var translation={}
translation['11.1'] = ""
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkgc2hhbGwsIGhvd2V2ZXIsIHRyeSB0byBwcm92ZSB0byB5b3UKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBtdXN0IG5vdCBxdWFpbCBiZWZvcmUgaGlzIHBvd2VyIG5vciBvZmZlciBhIGhhbGYtaGVhcnRlZCByZXNpc3RhbmNlLAogICAgICAgICAgICAgICAgICAgIGJ1dCBtdXN0IGVudGVyIHRoZSB3YXIgd2l0aCBhbiB1bnNwYXJpbmcgcHJvdmlzaW9uIG9mIG1lbiwgbW9uZXksIGFuZAogICAgICAgICAgICAgICAgICAgIHNoaXBz4oCUaW4gYSB3b3JkLCB3aXRoIGFsbCB5b3VyIHJlc291cmNlcy4gRm9yIGZpcnN0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3UgbWF5IHJlYXNvbmFibHkgZXhwZWN0IHRoYXQgeW91cgogICAgICAgICAgICAgICAgICAgIG1pZ2h0aWVzdCBhbGxpZXMgYW5kIHN1cHBvcnRlcnMgd2lsbCBiZSB0aG9zZSBnb2RzIHdob3NlIHNhbmN0aW9uIGhlIGhhcyBmbG91dGVkCiAgICAgICAgICAgICAgICAgICAgYW5kIHdob3NlIG5hbWUgaGUgaGFzIHRha2VuIGluIHZhaW4gdGhyb3VnaCBoaXMgdW5qdXN0IHZpb2xhdGlvbiBvZiB0aGUgcGVhY2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYWdhaW4sIGhlIGhhcyBhdCBsYXN0IGNvbWUgdG8gdGhlIGVuZAogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBwb2xpY3kgb2YgZGVjZXB0aW9uIGFuZCBoaXMgbGF2aXNoIHByb21pc2VzIG9mIGZ1dHVyZSBiZW5lZml0LCB3aGljaAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSBoZWxwZWQgaGltIHRvIHBvd2VyLiBUaGUgUGVyaW50aGlhbnMgYW5kIEJ5emFudGluZXMgd2l0aCB0aGVpciBhbGxpZXMKICAgICAgICAgICAgICAgICAgICByZWFsaXplIHRoYXQgaGlzIGFpbSBpcyB0byBkZWFsIHdpdGggdGhlbSBldmVuIGFzIGhlIGRlYWx0IHdpdGggdGhlIE9seW50aGlhbnMKICAgICAgICAgICAgICAgICAgICBiZWZvcmUuIDwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBUaGVzc2FsaWFucyByZWNvZ25pemUgdGhhdCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGRldGVybWluZWQgdG8gYmUgdGhlaXIgZGVzcG90IGFuZCBub3QgdGhlIHByZXNpZGVudCBvZiBhIGNvbmZlZGVyYWN5LiBUaGUKICAgICAgICAgICAgICAgICAgICBUaGViYW5zIHN1c3BlY3QgaGltLCBiZWNhdXNlIGhlIGtlZXBzIGEgZ2Fycmlzb24gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxOaWNhZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE5pY2FlYSI+TmljYWVhPC9wbGFjZU5hbWU+IGFuZCBoYXMgc3RvbGVuIGludG8gdGhlIEFtcGhpY3R5b25pYwogICAgICAgICAgICAgICAgICAgIENvdW5jaWwsIGFuZCBiZWNhdXNlIGhlIGF0dHJhY3RzIHRvIGhpcyBjb3VydCB0aGUgZW1iYXNzaWVzIG9mIHRoZSBQZWxvcG9ubmVzaWFuCiAgICAgICAgICAgICAgICAgICAgcG93ZXJzIGFuZCBzZWN1cmVzIHRoZWlyIGFsbGllcyBmb3IgaGltc2VsZi4gVGh1cyBvZiBoaXMgb2xkIGZyaWVuZHMgc29tZSBhcmUKICAgICAgICAgICAgICAgICAgICBldmVuIG5vdyBoaXMgaXJyZWNvbmNpbGFibGUgZm9lcywgb3RoZXJzIGFyZSBubyBsb25nZXIgaGlzIGhlYXJ0eSBzdXBwb3J0ZXJzLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGFsbCByZWdhcmQgaGltIHdpdGggc3VzcGljaW9uIGFuZCBkaXNsaWtlLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdG9v4oCUbm9yIGlzIHRoaXMgYSBtYXR0ZXIgb2Ygc21hbGwgaW1wb3J0YW5jZeKAlHF1aXRlCiAgICAgICAgICAgICAgICAgICAgcmVjZW50bHkgdGhlIHNhdHJhcHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIyOTQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjI5NCI+QXNpYSBNaW5vcjwvcGxhY2VOYW1lPiBzZW50CiAgICAgICAgICAgICAgICAgICAgYSBmb3JjZSBvZiBtZXJjZW5hcmllcyBhbmQgY29tcGVsbGVkIFBoaWxpcCB0byByYWlzZSB0aGUgc2llZ2Ugb2YgUGVyaW50aHVzOyBidXQKICAgICAgICAgICAgICAgICAgICB0b2RheSB0aGVpciBob3N0aWxpdHkgaXMgY29uZmlybWVkLCB0aGUgZGFuZ2VyLCBpZiBoZSByZWR1Y2VzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPiwgaXMgYXQgdGhlaXIgdmVyeSBkb29ycywgYW5kCiAgICAgICAgICAgICAgICAgICAgbm90IG9ubHkgd2lsbCB0aGV5IGVhZ2VybHkgam9pbiB0aGUgd2FyIGFnYWluc3QgaGltLCA8L3RyYW5zbGF0aW9uPg=="
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGV5IHdpbGwgcHJvbXB0IHRoZSBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiB0byBiZWNvbWUgb3VyIHBheW1hc3RlciBhbmQgaGUgaXMgcmljaGVyIHRoYW4gYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3QgdG9nZXRoZXIsIGFuZCBoaXMgcG93ZXIgdG8gaW50ZXJmZXJlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiBpcyBzdWNoIHRoYXQgaW4gb3VyIGZvcm1lciB3YXJzIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+LCB3aGljaGV2ZXIgc2lkZSBoZSBqb2luZWQsIGhlCiAgICAgICAgICAgICAgICAgICAgZW5zdXJlZCB0aGVpciB2aWN0b3J5LCBhbmQgc28sIGlmIGhlIHNpZGVzIHdpdGggdXMgbm93LCBoZSB3aWxsIGVhc2lseSBjcnVzaCB0aGUKICAgICAgICAgICAgICAgICAgICBwb3dlciBvZiBQaGlsaXAuIDwvdHJhbnNsYXRpb24+"
translation['11.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3csIGFkbWl0dGluZyB0aGVzZSBncmVhdCBhZHZhbnRhZ2VzLCBJIGNhbm5vdCBkZW55IHRoYXQgUGhpbGlwIGhhcyB1c2VkIHRoZQogICAgICAgICAgICAgICAgICAgIHBlYWNlIHRvIGZvcmVzdGFsbCB1cyBpbiBvY2N1cHlpbmcgbWFueSBmb3J0cmVzc2VzLCBoYXJib3JzLCBhbmQgb3RoZXIgcG9pbnRzIG9mCiAgICAgICAgICAgICAgICAgICAgdmFudGFnZTsgb25seSBJIG9ic2VydmUgdGhhdCB3aGVuIGEgbGVhZ3VlIGlzIGtuaXQgdG9nZXRoZXIgYnkgZ29vZHdpbGwsIGFuZAogICAgICAgICAgICAgICAgICAgIHdoZW4gYWxsIHRoZSBhbGxpZWQgc3RhdGVzIGhhdmUgdGhlIHNhbWUgaW50ZXJlc3RzLCB0aGVuIHRoZSBjb2FsaXRpb24gc3RhbmRzCiAgICAgICAgICAgICAgICAgICAgZmlybTsgYnV0IHdoZW4sIGxpa2UgUGhpbGlwJ3MsIGl0IGlzIGJhc2VkIG9uIHRyZWFjaGVyeSBhbmQgZ3JlZWQgYW5kIG1haW50YWluZWQKICAgICAgICAgICAgICAgICAgICBieSBmcmF1ZCBhbmQgdmlvbGVuY2UsIHRoZW4gb24gc29tZSBzbGlnaHQgcHJldGV4dCBvciBieSBzb21lIHRyaWZsaW5nIHNsaXAgaXQKICAgICAgICAgICAgICAgICAgICBpcyBpbnN0YW50bHkgc2hhdHRlcmVkIGFuZCBkaXNzb2x2ZWQuIDwvdHJhbnNsYXRpb24+"
translation['11.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGZyZXF1ZW50IHJlZmxlY3Rpb24KICAgICAgICAgICAgICAgICAgICBoYXMgdGF1Z2h0IG1lIHRoYXQgbm90IG9ubHkgZG8gUGhpbGlwJ3MgYWxsaWFuY2VzIGVuZCBpbiBzdXNwaWNpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgaG9zdGlsaXR5LCBidXQgYWxzbyB0aGUgdmFyaW91cyBwYXJ0cyBvZiBoaXMgb3duIGtpbmdkb20gYXJlIG5vdCB1bml0ZWQgYnkgc3VjaAogICAgICAgICAgICAgICAgICAgIHNhdGlzZmFjdG9yeSBhbmQgaW50aW1hdGUgdGllcyBhcyBwZW9wbGUgaW1hZ2luZS4gRm9yIGFsdGhvdWdoIGluIGEgZ2VuZXJhbCB3YXkKICAgICAgICAgICAgICAgICAgICB0aGUgTWFjZWRvbmlhbiBwb3dlciBjYXJyaWVzIHNvbWUgd2VpZ2h0IGFuZCB2YWx1ZSBhcyBhbiBhdXhpbGlhcnksIHlldCBieQogICAgICAgICAgICAgICAgICAgIGl0c2VsZiBpdCBpcyB3ZWFrIGFuZCwgaW4gZmFjZSBvZiBzdWNoIGEgc3R1cGVuZG91cyB0YXNrLCBldmVuIG5lZ2xpZ2libGU7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBQaGlsaXAsIGJ5IGhpcyB3YXJzIGFuZCBoaXMgY2FtcGFpZ25zCiAgICAgICAgICAgICAgICAgICAgYW5kIGJ5IGFsbCB0aG9zZSBhY3Rpdml0aWVzIHRvIHdoaWNoIGhpcyBncmVhdG5lc3MgbWlnaHQgYmUgYXR0cmlidXRlZCwgaGFzCiAgICAgICAgICAgICAgICAgICAgcmVhbGx5IG1hZGUgaXQgYSBsZXNzIHRydXN0eSB3ZWFwb24gdG8gaGlzIG93biBoYW5kLiBGb3IgeW91IG11c3Qgbm90IGltYWdpbmUsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBoaXMgc3ViamVjdHMKICAgICAgICAgICAgICAgICAgICBzaGFyZSBoaXMgdGFzdGVzOyB5b3UgbXVzdCByYXRoZXIgcmVmbGVjdCB0aGF0IGhlIHdhbnRzIGdsb3J5LCBidXQgdGhleQogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5LiBIZSBjYW5ub3QgZ2FpbiBoaXMgZW5kIHdpdGhvdXQgZGFuZ2VyOyB0aGV5LCB0aGlua2luZyBvZiBjaGlsZHJlbiwKICAgICAgICAgICAgICAgICAgICBwYXJlbnRzLCBhbmQgd2l2ZXMgbGVmdCBhdCBob21lLCBhcmUgbm90IHNvIGVhZ2VyIHRvIGNvdXJ0IHJ1aW4gYW5kIGRhbmdlciBldmVyeQogICAgICAgICAgICAgICAgICAgIGRheSB0byBvYmxpZ2UgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoaXMgeW91IGNhbiBnYXVnZSB0aGUKICAgICAgICAgICAgICAgICAgICBmZWVsaW5ncyBvZiB0aGUgZ3JlYXQgYm9keSBvZiB0aGUgTWFjZWRvbmlhbnMgdG93YXJkcyBQaGlsaXA7IHdoaWxlIGFzIHJlZ2FyZHMKICAgICAgICAgICAgICAgICAgICBoaXMgY291cnRpZXJzIGFuZCBjYXB0YWlucyBvZiBoaXMgbWVyY2VuYXJpZXMgeW91IHdpbGwgZmluZCB0aGF0LCB0aG91Z2ggdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgc29tZSByZXB1dGUgZm9yIHZhbG9yLCB0aGV5IGxpdmUgaW4gZ3JlYXRlciBmZWFyIHRoYW4gdGhvc2Ugd2hvIGhhdmUgbm9uZTsKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlc2UgaGF2ZSBvbmx5IHRoZSBlbmVteSB0byBmZWFyLCBidXQgdGhvc2UgZHJlYWQgdGhlIHN5Y29waGFudHMgYW5kCiAgICAgICAgICAgICAgICAgICAgc2xhbmRlcmVycyBvZiB0aGUgY291cnQgbW9yZSB0aGFuIGEgcGl0Y2hlZCBiYXR0bGUuIDwvdHJhbnNsYXRpb24+"
translation['11.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSwgYWdhaW4sIGhhdmUgdGhlIHdob2xlIGFybXkgdG8gc3VwcG9ydCB0aGVtIHdoZW4gdGhleSBmYWNlIHRoZQogICAgICAgICAgICAgICAgICAgIGhvc3RpbGUgcmFua3MsIGJ1dCB0aG9zZSBib3RoIGhhdmUgdG8gYmVhciB0aGUgY2hpZWYgYnVyZGVuIG9mIHRoZSB3YXIsIGFuZCwKICAgICAgICAgICAgICAgICAgICBhcGFydCBmcm9tIHRoYXQsIGl0IGlzIHRoZWlyIHBlY3VsaWFyIG1pc2ZvcnR1bmUgdG8gZmVhciB0aGUgdGVtcGVyIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAga2luZy4gTW9yZW92ZXIsIGlmIGEgY29tbW9uIHNvbGRpZXIgaXMgYXQgZmF1bHQsIGhpcyBwdW5pc2htZW50IGlzIHByb3BvcnRpb25lZAogICAgICAgICAgICAgICAgICAgIHRvIGhpcyBkZXNlcnRzLCBidXQgaXQgaXMganVzdCB3aGVuIHRoZSBvZmZpY2VycyBhcmUgbW9zdCBzdWNjZXNzZnVsIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSBtb3N0IGV4cG9zZWQgdG8gdW5tZXJpdGVkIGN1cnNlcyBhbmQgZ2liZXMuIDwvdHJhbnNsYXRpb24+"
translation['11.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWxsIHRoaXMgbm8gb25lIGluIGhpcyBzZW5zZXMgd291bGQgcmVmdXNlIHRvIGJlbGlldmU7IGZvciB0aG9zZSB3aG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlc2lkZWQgYXQgaGlzIGNvdXJ0IGFncmVlIHRoYXQgUGhpbGlwIGlzIHNvIGplYWxvdXMgdGhhdCBoZSB3YW50cyB0byB0YWtlIHRvCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBhbGwgdGhlIGNyZWRpdCBvZiB0aGUgY2hpZWYgc3VjY2Vzc2VzLCBhbmQgaXMgbW9yZSBhbm5veWVkIHdpdGggYQogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgb3IgYW4gb2ZmaWNlciB3aG8gYWNoaWV2ZXMgc29tZXRoaW5nIHByYWlzZXdvcnRoeSB0aGFuIHdpdGggdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgZmFpbCBpZ25vbWluaW91c2x5LiA8L3RyYW5zbGF0aW9uPg=="
translation['11.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGJlaW5nIHNvLCBob3cgaXMgaXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgaGF2ZSBzbyBsb25nIHJlbWFpbmVkIGxveWFsIHRvIGhpbT8gQmVjYXVzZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXQgcHJlc2VudCBoaXMgcHJvc3Blcml0eQogICAgICAgICAgICAgICAgICAgIG92ZXJzaGFkb3dzIGFsbCBzdWNoIHNob3J0Y29taW5ncywgZm9yIHN1Y2Nlc3MgaGFzIGEgc3RyYW5nZSBwb3dlciBvZiBvYnNjdXJpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgY292ZXJpbmcgbWVuJ3MgZmFpbGluZ3M7IGJ1dCBpZiBoZSB0cmlwcywgYWxsIGhpcyB3ZWFrbmVzcyB3aWxsIGJlIGNsZWFybHkKICAgICAgICAgICAgICAgICAgICByZXZlYWxlZC4gRm9yIGl0IGlzIHdpdGggdGhlIHBvbGl0aWNhbCBhcyB3aXRoIHRoZSBib2RpbHkgY29uc3RpdHV0aW9uLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBsb25nIGFzIGEgbWFuIGlzIGluIGdvb2QgaGVhbHRoLCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGNvbnNjaW91cyBvZiBubyB1bnNvdW5kbmVzcyBoZXJlIG9yIGhlcmUsIGJ1dCB3aGVuIGhpcyBoZWFsdGggYnJlYWtzIGRvd24sIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgcGFydCBpcyBzZXQgYS13b3JraW5nLCBiZSBpdCBhIHJ1cHR1cmUgb3IgYSBzcHJhaW4gb3IgYW55IG9yZ2FuIHRoYXQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgcGVyZmVjdGx5IGhlYWx0aHkuIFNvIHdpdGggYWxsIG1vbmFyY2hpZXMgYW5kIG9saWdhcmNoaWVzOyBhcyBsb25nIGFzIHRoZWlyIGFybXMKICAgICAgICAgICAgICAgICAgICBwcm9zcGVyLCBmZXcgZGV0ZWN0IHRoZWlyIHdlYWtuZXNzZXMsIGJ1dCB3aGVuIHRoZXkgc3R1bWJsZSwgZXZlbiBhcyBQaGlsaXAgbXVzdAogICAgICAgICAgICAgICAgICAgIHN0dW1ibGUgYmVuZWF0aCBhIGJ1cmRlbiB0aGF0IGlzIGdyZWF0ZXIgdGhhbiBoZSBjYW4gYmVhciwgdGhlbiBhbGwgdGhlaXIKICAgICAgICAgICAgICAgICAgICBkaXNhZHZhbnRhZ2VzIGFyZSBwbGFpbiBmb3IgYWxsIG1lbiB0byBzZWUuIDwvdHJhbnNsYXRpb24+"
translation['11.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGlmIGFueSBvZiB5b3UsIEF0aGVuaWFucywgc2VlaW5nCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwJ3MgZ29vZCBmb3J0dW5lLCBjb25zaWRlcnMgaGltIGEgZm9ybWlkYWJsZSBhbmQgZGFuZ2Vyb3VzIG9wcG9uZW50LCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGV4ZXJjaXNpbmcgYSBwcnVkZW50IGZvcmV0aG91Z2h0LiBGb3IgZm9ydHVuZSBpcyBpbmRlZWQgYSBncmVhdCB3ZWlnaHQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2NhbGU7IEkgbWlnaHQgYWxtb3N0IHNheSBpdCBpcyBldmVyeXRoaW5nIGluIGh1bWFuIGFmZmFpcnMuIEFuZCB5ZXQgaW4gbWFueQogICAgICAgICAgICAgICAgICAgIHJlc3BlY3RzIG91ciBnb29kIGZvcnR1bmUgaXMgdG8gYmUgcHJlZmVycmVkIHRvIFBoaWxpcCdzLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igb3VyIHByb3NwZXJpdHkgaXMgaW5oZXJpdGVkIGZyb20gb3VyIGFuY2VzdG9ycywKICAgICAgICAgICAgICAgICAgICBhbmQgaXMgb2YgYW4gZWFybGllciBkYXRlIHRoYW4gdGhlIHByb3NwZXJpdHkgbm90IG9ubHkgb2YgUGhpbGlwLCBidXQsIHJvdWdobHkKICAgICAgICAgICAgICAgICAgICBzcGVha2luZywgb2YgYWxsIHRoZSBraW5ncyB0aGF0IGhhdmUgZXZlciByZWlnbmVkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPi4gVGhvc2Uga2luZ3MgYWN0dWFsbHkgcGFpZCB0cmlidXRlCiAgICAgICAgICAgICAgICAgICAgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IG5ldmVyIHBhaWQgdHJpYnV0ZSB0byBhbnkgcG93ZXIgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgd29ybGQuIE1vcmVvdmVyLCB3ZSBoYXZlIGEgbW9yZSBzZWN1cmUgY2xhaW0gdGhhbiBQaGlsaXAgdXBvbiB0aGUgZmF2b3VyIG9mCiAgICAgICAgICAgICAgICAgICAgaGVhdmVuLCBpbiBzbyBmYXIgYXMgb3VyIGNvbmR1Y3QgaGFzIGFsd2F5cyBiZWVuIGd1aWRlZCBieSBncmVhdGVyIHJlZ2FyZCBmb3IKICAgICAgICAgICAgICAgICAgICByZWxpZ2lvbiBhbmQgZm9yIGp1c3RpY2UuIDwvdHJhbnNsYXRpb24+"
translation['11.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5XaHksIHRoZW4sIHdhcyBoZQogICAgICAgICAgICAgICAgICAgIG1vcmUgc3VjY2Vzc2Z1bCB0aGFuIHdlIGluIHRoZSBsYXRlIHdhcj8gSSB3aWxsIGJlIGZyYW5rIHdpdGggeW91LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBJdCBpcyBiZWNhdXNlIGhlIGFsd2F5cwogICAgICAgICAgICAgICAgICAgIHRha2VzIGEgcGVyc29uYWwgc2hhcmUgaW4gdGhlIGhhcmRzaGlwcyBhbmQgZGFuZ2VycyBvZiB0aGUgY2FtcGFpZ24sIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgbmVnbGVjdHMgYSBjaGFuY2UsIG5ldmVyIHdhc3RlcyBhbnkgc2Vhc29uIG9mIHRoZSB5ZWFyOyB3aGlsZSB3ZeKAlGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSB0cnV0aCBtdXN0IG91dOKAlHNpdCBoZXJlIGlkbGU7IHdlIGFyZSBhbHdheXMgaGFuZ2luZyBiYWNrIGFuZAogICAgICAgICAgICAgICAgICAgIHBhc3NpbmcgcmVzb2x1dGlvbnMgYW5kIGhhdW50aW5nIHRoZSBtYXJrZXQtcGxhY2UgdG8gbGVhcm4gdGhlIGxhdGVzdCBuZXdzLiBZZXQKICAgICAgICAgICAgICAgICAgICB3aGF0IG1vcmUgc3RhcnRsaW5nIG5ld3MgY291bGQgdGhlcmUgYmUgdGhhbiB0aGF0IGEgTWFjZWRvbmlhbiBzaG91bGQgaW5zdWx0CiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBkYXJpbmcgdG8gc2VuZCB1cyBzdWNoIGEgbGV0dGVyIGFzIHlvdSBoYXZlIGhlYXJkIHJlYWQgYSBtb21lbnQgYWdvPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAncyByZXNvdXJjZXMgaW5jbHVkZSBtZXJjZW5hcnkKICAgICAgICAgICAgICAgICAgICBzb2xkaWVycywgYW5kIGFsc28sIG9ic2VydmUhIGNlcnRhaW4gbWVyY2VuYXJ5IG9yYXRvcnMgaGVyZSBhbW9uZyB1cywgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIGFyZSBub3QgYXNoYW1lZCB0byBkZXZvdGUgdGhlaXIgbGl2ZXMgdG8gaGlzIHNlcnZpY2UsIHRoaW5raW5nIHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBjYXJyeWluZyBob21lIGhpcyBicmliZXMsIGJ1dCBibGluZCB0byB0aGUgZmFjdCB0aGF0IHRoZXkgYXJlIGJhcnRlcmluZyBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzIG9mIHRoZSBTdGF0ZSwgYW5kIHRoZWlyIG93biBhcyB3ZWxsLCBmb3IgYSBwYWx0cnkgcHJvZml0LiBXZSwgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgaGFuZCwgbWFrZSBubyBhdHRlbXB0IHRvIGZvbWVudCBhIHJldm9sdXRpb24gaW4gaGlzIGtpbmdkb20sIHdlIGRlY2xpbmUgdG8KICAgICAgICAgICAgICAgICAgICBoaXJlIG1lcmNlbmFyaWVzLCB3ZSBzaHJpbmsgZnJvbSB0YWtpbmcgdGhlIGZpZWxkLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBub3QgYSBzdHJhbmdlIHRoaW5nLCB0aGVuLCB0aGF0IGhlIGhhcyBnYWluZWQgZ3JvdW5kIGF0IG91cgogICAgICAgICAgICAgICAgICAgIGV4cGVuc2UgaW4gdGhlIGxhdGUgd2FyLCBidXQgcmF0aGVyIHRoYXQgd2UsIHBlcmZvcm1pbmcgbm8gc2luZ2xlIGR1dHkgb2YgYQogICAgICAgICAgICAgICAgICAgIG5hdGlvbiBhdCB3YXIsIHRoaW5rIHRoYXQgd2UgYXJlIGdvaW5nIHRvIGRlZmVhdCBvbmUgd2hvIGRvZXMgZXZlcnl0aGluZyB0aGF0IGEKICAgICAgICAgICAgICAgICAgICBncmFzcGluZyBhbWJpdGlvbiBkZW1hbmRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['11.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVhcmluZyB0aGlzIGluIG1pbmQsIEF0aGVuaWFucywgYW5kIHJlZmxlY3RpbmcgdGhhdCBpdAogICAgICAgICAgICAgICAgICAgIGlzIG5vdCBldmVuIGluIG91ciBwb3dlciB0byBwcmV0ZW5kIHRoYXQgd2UgYXJlIGF0IHBlYWNlLCBmb3IgUGhpbGlwIGhhcyBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgaXNzdWVkIGEgZGVjbGFyYXRpb24gb2Ygd2FyIGFuZCBmb2xsb3dlZCBpdCB1cCBieSBhY3RpdmUgaG9zdGlsaXRpZXMsIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHRvIHNwYXJlIG5vIGV4cGVuc2UsIHB1YmxpYyBvciBwcml2YXRlLCB0byB0YWtlIHRoZSBmaWVsZCBlYWdlcmx5IGFuZAogICAgICAgICAgICAgICAgICAgIGluIGZ1bGwgZm9yY2UsIHdoZXJldmVyIHRoZSBvcHBvcnR1bml0eSBvY2N1cnMsIGFuZCB0byBlbXBsb3kgYWJsZXIgZ2VuZXJhbHMKICAgICAgICAgICAgICAgICAgICB0aGFuIGJlZm9yZS4gPC90cmFuc2xhdGlvbj4="
translation['11.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm9uZSBvZiB5b3UgbXVzdCBhc3N1bWUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHBvbGljeSB0aGF0IHdlYWtlbmVkIHRoZSBwb3dlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2lsbCBzdWZmaWNlIHRvIHJlc3RvcmUgYW5kIGFkdmFuY2UgaXQsIG5vciBzdXBwb3NlCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgaWYgeW91IGFyZSBhcyBoYWxmLWhlYXJ0ZWQgYXMgYmVmb3JlLCBvdGhlcnMgd2lsbCBiZSB6ZWFsb3VzIGluIGRlZmVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGludGVyZXN0cy4gUmVmbGVjdCwgcmF0aGVyLCB3aGF0IGEgZGlzZ3JhY2UgaXQgd291bGQgYmUgaWYgeW91ciBmYXRoZXJzCiAgICAgICAgICAgICAgICAgICAgZmFjZWQgbWFueSBoYXJkc2hpcHMgYW5kIGdyZWF0IGRhbmdlcnMgaW4gZmlnaHRpbmcgdGhlIExhY2VkYWVtb25pYW5zLAogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgeW91IHNob3VsZCByZWZ1c2UgdG8gZGVmZW5kIHdpdGggdmlnb3IKICAgICAgICAgICAgICAgICAgICB0aG9zZSBhZHZhbnRhZ2VzIHdoaWNoIHRoZXkganVzdGx5IHdvbiBhbmQgYmVxdWVhdGhlZCB0byB5b3U7IHdoYXQgYSBkaXNncmFjZSBpZgogICAgICAgICAgICAgICAgICAgIG9uZSwgd2l0aCBvbmx5IHRoZSB0cmFkaXRpb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IGJlaGluZCBoaW0sIHNvIGNoZWVyZnVsbHkgY291cnRzIGRhbmdlciB0aGF0LCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB0YXNrIG9mIGV4dGVuZGluZyBoaXMgc3dheSwgaGUgaGFzIGJlZW4gd291bmRlZCBpbiBldmVyeSBsaW1iIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGJhdHRsZS1maWVsZCwgYnV0IEF0aGVuaWFucywgd2hvc2UgYW5jZXN0cmFsIGJvYXN0IGl0IGlzIGluIHdhciB0byB5aWVsZCB0byBub25lCiAgICAgICAgICAgICAgICAgICAgYW5kIGNvbnF1ZXIgYWxsLCBzaG91bGQgcmVub3VuY2UsIHRocm91Z2ggaW5kb2xlbmNlIG9yIGNvd2FyZGljZSwgYWxpa2UgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVlZHMgb2YgdGhlaXIgYW5jZXN0b3JzIGFuZCB0aGUgaW50ZXJlc3RzIG9mIHRoZWlyIGZhdGhlcmxhbmQuIDwvdHJhbnNsYXRpb24+"
translation['11.23'] = ""
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QaGlsaXAgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgQ291bmNpbCBhbmQgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBncmVldGluZy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHRoZSBlbWJhc3NpZXMgdGhhdCBJIGhhdmUgcmVwZWF0ZWRseQogICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZWQgdG8gZW5zdXJlIHRoZSBvYnNlcnZhbmNlIG9mIG91ciBvYXRocyBhbmQgYWdyZWVtZW50cyB5b3UgaGF2ZSBwYWlkIG5vCiAgICAgICAgICAgICAgICAgICAgYXR0ZW50aW9uLCBzbyB0aGF0IEkgYW0gZm9yY2VkIHRvIHNlbmQgeW91IGEgc3RhdGVtZW50IG9mIHRoZSBtYXR0ZXJzIGluIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciBteXNlbGYgd3JvbmdlZC4gQnV0IHlvdSBtdXN0IG5vdCBiZSBzdXJwcmlzZWQgYXQgdGhlIGxlbmd0aCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBsZXR0ZXIsIGZvciBJIGhhdmUgbWFueSBjaGFyZ2VzIHRvIHByZWZlciwgYW5kIGl0IGlzIG5lY2Vzc2FyeSB0byBwdXQgdGhlbSBhbGwKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IGFuZCBmcmFua2x5LiA8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIHdoZW4gTmljaWFzLCBteSBoZXJhbGQsIHdhcyBraWRuYXBwZWQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Tm90aGluZyBpcyBrbm93biBvZiB0aGlzIGluY2lkZW50LiBUaGUgbGV0dGVycwogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIG9idmlvdXNseSBub3QgaW50ZW5kZWQgZm9yIEF0aGVuaWFuIGVhcnMuPC9ub3RlPiBmcm9tIG15IHRlcnJpdG9yeSwgeW91CiAgICAgICAgICAgICAgICAgICAgbm90IG9ubHkgZmFpbGVkIHRvIGJyaW5nIHRoZSBsYXctYnJlYWtlcnMgdG8ganVzdGljZSwgYnV0IHlvdSBrZXB0IHRoZSB2aWN0aW0gYQogICAgICAgICAgICAgICAgICAgIHByaXNvbmVyIGZvciB0ZW4gbW9udGhzLCBhbmQgdGhlIGxldHRlcnMgZnJvbSBtZSwgb2Ygd2hpY2ggaGUgd2FzIHRoZSBiZWFyZXIsCiAgICAgICAgICAgICAgICAgICAgeW91IHJlYWQgYmVmb3JlIHlvdXIgQXNzZW1ibHkuIE5leHQsIHdoZW4gdGhlIFRoYXNpYW5zIG9wZW5lZCB0aGVpciBoYXJib3IgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgQnl6YW50aW5lIHdhci1nYWxsZXlzIGFuZCB0byBhbnkgcGlyYXRlcyB0aGF0IGNob3NlIHRvIHRvdWNoIHRoZXJlLCB5b3UKICAgICAgICAgICAgICAgICAgICBpZ25vcmVkIHRoZSBpbmNpZGVudCwgaW4gc3BpdGUgb2YgdGhlIGNsYXVzZXMgZXhwcmVzc2x5IGRlbm91bmNpbmcgc3VjaCBhY3RzIGFzCiAgICAgICAgICAgICAgICAgICAgaG9zdGlsZS4gPC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBhYm91dCB0aGUgc2FtZSBkYXRlLAogICAgICAgICAgICAgICAgICAgICAgICBEaW9waXRoZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gOCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICA4PC9iaWJsPi4gQ3JvYnlsZSBpcyBub3QgbWVudGlvbmVkIGVsc2V3aGVyZTsgVGlyaXN0YXNpcyB3YXMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+Ljwvbm90ZT4gYXR0YWNrZWQKICAgICAgICAgICAgICAgICAgICBDcm9ieWxlIGFuZCBUaXJpc3Rhc2lzIGFuZCBlbnNsYXZlZCB0aGUgaW5oYWJpdGFudHMsIGxheWluZyB3YXN0ZSB0aGUgYWRqYWNlbnQKICAgICAgICAgICAgICAgICAgICBwYXJ0cyBvZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDgiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgODwvYmlibD4uIENyb2J5bGUgaXMgbm90IG1lbnRpb25lZCBlbHNld2hlcmU7IFRpcmlzdGFzaXMgd2FzIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4uIEJ1dCBoaXMgY3Jvd25pbmcgYWN0CiAgICAgICAgICAgICAgICAgICAgb2YgbGF3bGVzc25lc3Mgd2FzIHRoZSBhcnJlc3Qgb2YgQW1waGlsb2NodXMsIHRoZSBhbWJhc3NhZG9yIHNlbnQgdG8gbmVnb3RpYXRlCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBjYXB0aXZlczsgaGUgc3ViamVjdGVkIGhpbSB0byB0aGUgc2V2ZXJlc3QgdG9ydHVyZSBhbmQgd3J1bmcgZnJvbSBoaW0gYQogICAgICAgICAgICAgICAgICAgIHJhbnNvbSBvZiBuaW5lIHRhbGVudHMuIEFuZCB0aGlzIGhlIGRpZCB3aXRoIHRoZSBhcHByb3ZhbCBvZiB5b3VyIEFzc2VtYmx5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPllldCB2aW9sYXRpb24gb2YgdGhlIHJpZ2h0cyBvZiBoZXJhbGRzIGFuZAogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzIGlzIHJlZ2FyZGVkIGJ5IGFsbCBtZW4gYXMgYW4gYWN0IG9mIGltcGlldHksIGFuZCBieSBub25lIG1vcmUgdGhhbgogICAgICAgICAgICAgICAgICAgIGJ5IHlvdSwgaWYgSSBtYXkganVkZ2UgZnJvbSB0aGUgZmFjdCB0aGF0LCB3aGVuIHRoZSBNZWdhcmlhbnMgYXJyZXN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgQW50aGVtb2NyaXR1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGluY2lkZW50IGlzIG5hcnJhdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIFBsdXRhcmNoIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gMzAiIHZhbGlkPSJ5ZXMiPlBsdXQuIFBlci4gMzA8L2JpYmw+77yJLgogICAgICAgICAgICAgICAgICAgICAgICBBLiB3YXMgc2VudCB0byByZW1vbnN0cmF0ZSB3aXRoIHRoZSBNZWdhcmlhbnMgZm9yIGN1bHRpdmF0aW5nIHNhY3JlZCBncm91bmQuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBzdGF0dXRlIHdhcyBzdGlsbCB0byBiZSBzZWVuIGluIHRoZSB0aW1lIG9mIFBhdXNhbmlhcyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjM2LjMiIHZhbGlkPSJ5ZXMiPlBhdXMuIDEuMzYuMzwvYmlibD7vvIkuPC9ub3RlPiB5b3VyIEFzc2VtYmx5CiAgICAgICAgICAgICAgICAgICAgd2VudCB0byB0aGUgbGVuZ3RoIG9mIGV4Y2x1ZGluZyB0aGVtIGZyb20gdGhlIGNlbGVicmF0aW9uIG9mIHRoZSBteXN0ZXJpZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IGVyZWN0ZWQgYSBzdGF0dWUgYmVmb3JlIHRoZSBjaXR5IGdhdGVzIHRvIGNvbW1lbW9yYXRlIHRoZSBvdXRyYWdlLiBZZXQKICAgICAgICAgICAgICAgICAgICBpcyBpdCBub3QgbW9uc3Ryb3VzIHRoYXQgeW91IGFyZSBub3cgeW91cnNlbHZlcyBub3RvcmlvdXNseSBndWlsdHkgb2YgYWN0cwogICAgICAgICAgICAgICAgICAgIHdoaWNoLCB3aGVuIHlvdSB3ZXJlIHRoZSB2aWN0aW1zLCBleGNpdGVkIGluIHlvdSBzdWNoIGRldGVzdGF0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBlcnBldHJhdG9ycz8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAzMCIgdmFsaWQ9InllcyI+UGx1dC4gUGVyLiAzMDwvYmlibD7vvIkuCiAgICAgICAgICAgICAgICAgICAgICAgIEEuIHdhcyBzZW50IHRvIHJlbW9uc3RyYXRlIHdpdGggdGhlIE1lZ2FyaWFucyBmb3IgY3VsdGl2YXRpbmcgc2FjcmVkIGdyb3VuZC4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHN0YXR1dGUgd2FzIHN0aWxsIHRvIGJlIHNlZW4gaW4gdGhlIHRpbWUgb2YgUGF1c2FuaWFzIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDEuMzYuMyIgdmFsaWQ9InllcyI+UGF1cy4gMS4zNi4zPC9iaWJsPu+8iS48L3RyYW5zbGF0aW9uPg=="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB5b3VyIGdlbmVyYWwsCiAgICAgICAgICAgICAgICAgICAgICAgIENhbGxpYXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2hhbGNpcyI+Q2hhbGNpczwvcGxhY2VOYW1lPiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIE9yaWdpbmFsbHkgYW4gYWxseSBvZiBQaGlsaXAsIGhlIGNoYW5nZWQgc2lkZXMgYW5kIGhlbHBlZCBQaG9jaW9uJ3MKICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbiBpbiAzNDEsIHdoaWNoIGNsZWFyZWQgT3JldXMgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRXJldHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRXJldHJpYSI+RXJldHJpYTwvcGxhY2VOYW1lPiBvZiB0eXJhbnRzLiBUaGUgY2FwdHVyZWQgY2l0aWVzLCBhcyBhbGxpZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGhpbGlwLCB3ZXJlIGluY2x1ZGVkIGluIHRoZSBQZWFjZSBvZiBQaGlsb2NyYXRlcwogICAgICAgICAgICAgICAgICAgICAgICDvvIgzNDbvvIkuPC9ub3RlPiBjYXB0dXJlZCB0aGUgY2l0aWVzIG9uIHRoZSBQYWdhc2FlYW4gR3VsZiwKICAgICAgICAgICAgICAgICAgICBldmVyeSBvbmUgb2YgdGhlbSwgdGhvdWdoIHRoZXkgd2VyZSBwcm90ZWN0ZWQgYnkgdHJlYXR5IHdpdGggeW91IGFuZCB3ZXJlIGluCiAgICAgICAgICAgICAgICAgICAgYWxsaWFuY2Ugd2l0aCBtZSBhbGwgbWVyY2hhbnRzIHNhaWxpbmcgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDaGFsY2lzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDaGFsY2lzIj5DaGFsY2lzPC9wbGFjZU5hbWU+IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgT3JpZ2luYWxseSBhbiBhbGx5IG9mIFBoaWxpcCwgaGUgY2hhbmdlZCBzaWRlcyBhbmQgaGVscGVkIFBob2Npb24ncwogICAgICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uIGluIDM0MSwgd2hpY2ggY2xlYXJlZCBPcmV1cyBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFcmV0cmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFcmV0cmlhIj5FcmV0cmlhPC9wbGFjZU5hbWU+IG9mIHR5cmFudHMuIFRoZSBjYXB0dXJlZCBjaXRpZXMsIGFzIGFsbGllcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBQaGlsaXAsIHdlcmUgaW5jbHVkZWQgaW4gdGhlIFBlYWNlIG9mIFBoaWxvY3JhdGVzCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iDM0Nu+8iS48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gaGUgcmVnYXJkZWQgYXMgZW5lbWllcyBhbmQgc29sZCB0aGVtIGludG8gc2xhdmVyeS4KICAgICAgICAgICAgICAgICAgICBBbmQgZm9yIHRoaXMgeW91IHBhc3NlZCBoaW0gYSB2b3RlIG9mIHRoYW5rcyEgU28gSSBhbSBhdCBhIGxvc3MgdG8gc2F5IHdoYXQKICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbmNlIGl0IHdpbGwgbWFrZSBpZiB5b3UgYWRtaXQgdGhhdCB5b3UgYXJlIGF0IHdhciB3aXRoIG1lLCBmb3Igd2hlbiB3ZQogICAgICAgICAgICAgICAgICAgIHdlcmUgb3Blbmx5IGF0IHZhcmlhbmNlLCB0aGVuIHRvbyB5b3UgdXNlZCB0byBzZW5kIG91dCBwcml2YXRlZXJzLCBlbnNsYXZlCiAgICAgICAgICAgICAgICAgICAgbWVyY2hhbnRzIHRyYWRpbmcgd2l0aCB1cywgaGVscCBteSBhZHZlcnNhcmllcywgYW5kIGxheSB3YXN0ZSBteSB0ZXJyaXRvcnkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3QgY29udGVudAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhpcywgeW91IGhhdmUgc2hvd24geW91ciBjb250ZW1wdCBmb3IgcmlnaHQgYW5kIHlvdXIgaG9zdGlsaXR5IHRvIG1lIGJ5CiAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgc2VuZGluZyBhbiBlbWJhc3N5IHRvIHVyZ2UgdGhlIGtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDAyMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMDIzMSI+UGVyc2lhPC9wbGFjZU5hbWU+IHRvIGRlY2xhcmUgd2FyIG9uIG1lLiBUaGlzIGlzIHRoZSBtb3N0IGFtYXppbmcgZXhwbG9pdAogICAgICAgICAgICAgICAgICAgIG9mIGFsbDsgZm9yLCBiZWZvcmUgdGhlIGtpbmcgcmVkdWNlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ2ODciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwNDY4NyI+UGhvZW5pY2lhPC9wbGFjZU5hbWU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVzZSB0d28gcHJvdmluY2VzLAogICAgICAgICAgICAgICAgICAgICAgICB0b2dldGhlciB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTEyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxMTIiPkN5cHJ1czwvcGxhY2VOYW1lPiwgcmV2b2x0ZWQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgMzQ2IGFuZCB3ZXJlIHJlY292ZXJlZCBieSBBcnRheGVyeGVzIE9jaHVzLiBHcmVlayBtZXJjZW5hcmllcyBmb3JtZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tib25lIG9mIHRoZSBhcm1pZXMgb24gYm90aCBzaWRlcy4gU2VlIEdyb3RlLCBjaGFwLiA5MC4gTm90aGluZyBpcyBrbm93bgogICAgICAgICAgICAgICAgICAgICAgICBvZiBhbnkgc3VjaCBBdGhlbmlhbiBkZWNyZWUuPC9ub3RlPiB5b3UgcGFzc2VkIGEgZGVjcmVlIGNhbGxpbmcgb24gbWUgdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIGNvbW1vbiBjYXVzZSB3aXRoIHRoZSByZXN0IG9mIHRoZSBHcmVla3MgYWdhaW5zdCBoaW0sIGluIGNhc2UgaGUgYXR0ZW1wdGVkCiAgICAgICAgICAgICAgICAgICAgdG8gaW50ZXJmZXJlIHdpdGggdXM7IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTEyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxMTIiPkN5cHJ1czwvcGxhY2VOYW1lPiwgcmV2b2x0ZWQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgMzQ2IGFuZCB3ZXJlIHJlY292ZXJlZCBieSBBcnRheGVyeGVzIE9jaHVzLiBHcmVlayBtZXJjZW5hcmllcyBmb3JtZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tib25lIG9mIHRoZSBhcm1pZXMgb24gYm90aCBzaWRlcy4gU2VlIEdyb3RlLCBjaGFwLiA5MC4gTm90aGluZyBpcyBrbm93bgogICAgICAgICAgICAgICAgICAgICAgICBvZiBhbnkgc3VjaCBBdGhlbmlhbiBkZWNyZWUuPC90cmFuc2xhdGlvbj4="
translation['12.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0b2RheSB5b3UgaGF2ZSBzdWNoIGEKICAgICAgICAgICAgICAgICAgICBzdXBlcmFidW5kYW5jZSBvZiBoYXRyZWQgZm9yIG1lIHRoYXQgeW91IG5lZ290aWF0ZSB3aXRoIGhpbSBmb3IgYSBkZWZlbnNpdmUKICAgICAgICAgICAgICAgICAgICBhbGxpYW5jZS4gWWV0IEkgYW0gZ2l2ZW4gdG8gdW5kZXJzdGFuZCB0aGF0IHlvdXIgZmF0aGVycyBvZiBvbGQgcHVuaXNoZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc29ucyBvZiBQaXNpc3RyYXR1cyBmb3IgaW52aXRpbmcgdGhlIFBlcnNpYW5zIHRvIGludmFkZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIFlvdSBhcmUgbm90IGFzaGFtZWQgdG8gZG8gd2hhdCB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIGFsd2F5cyBtYWRlIGEgbWF0dGVyIG9mIGluZGljdG1lbnQgYWdhaW5zdCB5b3VyIHR5cmFudHMuIDwvdHJhbnNsYXRpb24+"
translation['12.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgdGhlcmUgaXMgbW9yZSB0bwogICAgICAgICAgICAgICAgICAgIGNvbWUuIEluIHlvdXIgZGVjcmVlcyB5b3Ugb3JkZXIgbWUgaW4gc28gbWFueSB3b3JkcyB0byBsZWF2ZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gdG8gdGhlIHJ1bGUgb2YgVGVyZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Tm90IG90aGVyd2lzZSBrbm93bi48L25vdGU+IGFuZCBDZXJzb2JsZXB0ZXMsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IGFyZSBBdGhlbmlhbnMuIEJ1dCBJIGFtIG5vdCBhd2FyZSB0aGF0IHRoZXNlIHR3byBoYWQgYW55IHNoYXJlIHdpdGgKICAgICAgICAgICAgICAgICAgICB5b3UgaW4gdGhlIHRlcm1zIG9mIHBlYWNlLCBvciB0aGF0IHRoZWlyIG5hbWVzIHdlcmUgaW5jbHVkZWQgaW4gdGhlIGluc2NyaXB0aW9uCiAgICAgICAgICAgICAgICAgICAgc2V0IHVwLCBvciB0aGF0IHRoZXkgYXJlIHJlYWxseSBBdGhlbmlhbnMuIE9uIHRoZSBjb250cmFyeSwgSSBrbm93IHRoYXQgVGVyZXMKICAgICAgICAgICAgICAgICAgICBmb3VnaHQgd2l0aCBtZSBhZ2FpbnN0IHlvdSwgYW5kIHRoYXQgQ2Vyc29ibGVwdGVzIHdhcyBxdWl0ZSByZWFkeSBpbiBwcml2YXRlIHRvCiAgICAgICAgICAgICAgICAgICAgdGFrZSB0aGUgb2F0aCBvZiBhbGxlZ2lhbmNlIHRvIG15IGFtYmFzc2Fkb3JzLCBidXQgd2FzIHByZXZlbnRlZCBieSB5b3VyCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbHMsIHdobyBkZW5vdW5jZWQgaGltIGFzIGFuIGVuZW15IG9mIHRoZSBBdGhlbmlhbnMuIDwvdHJhbnNsYXRpb24+"
translation['12.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaXMgaXQgZmFpciBhbmQgcmlnaHQgdGhhdCwgd2hlbiBpdCBzdWl0cyB5b3VyCiAgICAgICAgICAgICAgICAgICAgY29udmVuaWVuY2UsIHlvdSBzaG91bGQgY2FsbCBoaW0gYW4gZW5lbXkgb2YgeW91ciBzdGF0ZSwgYnV0LCB3aGVuIHlvdSB3YW50IHRvCiAgICAgICAgICAgICAgICAgICAgYnVsbHkgbWUsIHRoZSBzYW1lIG1hbiBzaG91bGQgYmUgZGVzY3JpYmVkIGFzIHlvdXIgZmVsbG93LWNpdGl6ZW47IGFuZCB0aGF0IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlYXRoIG9mIFNpdGFsY2VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcHBhcmVudGx5IGEgbWlzdGFrZS4KICAgICAgICAgICAgICAgICAgICAgICAgU2l0YWxjZXMsIGtpbmcgb2YgdGhlIE9kcnlzYWUsIHdhcyBhbiBhbGx5LCBidXQgbm90IGEgY2l0aXplbiwgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgd2FzIGtpbGxlZCBpbiBiYXR0bGUKICAgICAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgVHJpYmFsbGkgaW4gNDI0IO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDQuMTAxIiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNC4xMDE8L2JpYmw+77yJLiBUaGUgZGVzY3JpcHRpb24gaGVyZSBleGFjdGx5IHN1aXRzIENvdHlzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBvbiB3aG9tIHlvdSBkaWQgY29uZmVyIHlvdXIgY2l0aXplbnNoaXAsIHlvdSBzaG91bGQgYXQgb25jZSBjdWx0aXZhdGUgdGhlCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kc2hpcCBvZiBoaXMgbXVyZGVyZXIsIGFuZCBwaWNrIGEgcXVhcnJlbCB3aXRoIHVzIHRvIHNoaWVsZCBDZXJzb2JsZXB0ZXM/CiAgICAgICAgICAgICAgICAgICAgQW5kIGFsbCB0aGUgdGltZSB5b3Uga25vdyBwZXJmZWN0bHkgd2VsbCB0aGF0IG9mIHRob3NlIHdobyByZWNlaXZlIHN1Y2ggaG9ub3JzCiAgICAgICAgICAgICAgICAgICAgYXQgeW91ciBoYW5kcyBub3Qgb25lIGNhcmVzIGEgam90IGZvciB5b3VyIGxhd3Mgb3IgeW91ciBkZWNyZWVzLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCB3YXMga2lsbGVkIGluIGJhdHRsZQogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoZSBUcmliYWxsaSBpbiA0MjQg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNC4xMDEiIHZhbGlkPSJ5ZXMiPlRodWMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0LjEwMTwvYmlibD7vvIkuIFRoZSBkZXNjcmlwdGlvbiBoZXJlIGV4YWN0bHkgc3VpdHMgQ290eXMuPC90cmFuc2xhdGlvbj4="
translation['12.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBpZiBJIG1heSBtZW50aW9uIHR3byBpbnN0YW5jZXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZXhjbHVzaW9uIG9mIHRoZSByZXN0LCB5b3UgZ2F2ZSB5b3VyIGNpdGl6ZW5zaGlwIHRvIEV2YWdvcmFzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklmIHRoaXMgaXMgdGhlIHlvdW5nZXIgRXZhZ29yYXMsIFBoaWxpcCdzIGhpc3RvcnkgaXMgaW5hY2N1cmF0ZS4KICAgICAgICAgICAgICAgICAgICAgICAgSGUgd2FzIGV4cGVsbGVkIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAxMTIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDExMiI+Q3lwcnVzPC9wbGFjZU5hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVkIEFydGF4ZXJ4ZXMgdG8gcmVjb3ZlciB0aGUgaXNsYW5kIGFmdGVyIHRoZSByZXZvbHQsIGJ1dCBoZSB3YXMgbmV2ZXIKICAgICAgICAgICAgICAgICAgICAgICAgcmVpbnN0YXRlZC4gSGlzIGdyYW5kZmF0aGVyLCBvZiB0aGUgc2FtZSBuYW1lLCB0aGUgZnJpZW5kIGFuZCBoZWxwZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTIzMDI5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjMwMjkiPkNvbm9uPC9wbGFjZU5hbWU+LCB3YXMgbWFkZSBhbiBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVuLjwvbm90ZT4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAxMTIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDExMiI+Q3lwcnVzPC9wbGFjZU5hbWU+LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgaGVscGVkIEFydGF4ZXJ4ZXMgdG8gcmVjb3ZlciB0aGUgaXNsYW5kIGFmdGVyIHRoZSByZXZvbHQsIGJ1dCBoZSB3YXMgbmV2ZXIKICAgICAgICAgICAgICAgICAgICAgICAgcmVpbnN0YXRlZC4gSGlzIGdyYW5kZmF0aGVyLCBvZiB0aGUgc2FtZSBuYW1lLCB0aGUgZnJpZW5kIGFuZCBoZWxwZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTIzMDI5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjMwMjkiPkNvbm9uPC9wbGFjZU5hbWU+LCB3YXMgbWFkZSBhbiBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVuLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTEyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxMTIiPkN5cHJ1czwvcGxhY2VOYW1lPiBhbmQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgRGlvbnlzaXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSB5b3VuZ2VyLCBleHBlbGxlZCBieQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEaW9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEaW9uIj5EaW9uPC9wbGFjZU5hbWU+IGluIDM1NiBhbmQgYnkgVGltb2xlb24gaW4KICAgICAgICAgICAgICAgICAgICAgICAgMzQzLjwvbm90ZT4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEaW9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEaW9uIj5EaW9uPC9wbGFjZU5hbWU+IGluIDM1NiBhbmQgYnkgVGltb2xlb24gaW4KICAgICAgICAgICAgICAgICAgICAgICAgMzQzLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3lyYWN1c2UiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFN5cmFjdXNlIj5TeXJhY3VzZTwvcGxhY2VOYW1lPiwgdG8KICAgICAgICAgICAgICAgICAgICB0aGVtIGFuZCB0aGVpciBkZXNjZW5kYW50cy4gTm93LCBpZiB5b3UgY2FuIHBlcnN1YWRlIGVpdGhlciBvZiB0aGVzZSBwZW9wbGVzIHRvCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSB0aGVpciBleGlsZWQgdHlyYW50cywgdGhlbiB5b3UgbWF5IGFwcGx5IHRvIG1lIGZvciBhcyBtdWNoIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBhcyB3YXMgcnVsZWQgYnkgVGVyZXMgYW5kIENlcnNvYmxlcHRlcy4KICAgICAgICAgICAgICAgICAgICBCdXQgaWYgeW91IGhhdmUgbm90IGEgd29yZCB0byBzYXkgYWdhaW5zdCB0aG9zZSB3aG8gb3ZlcnRocmV3IEV2YWdvcmFzIGFuZAogICAgICAgICAgICAgICAgICAgIERpb255c2l1cywgYnV0IHBlcnNpc3QgaW4gaGFyYXNzaW5nIG1lLCBoYXZlIEkgbm90IGEgcGVyZmVjdCByaWdodCB0byBkZWZlbmQKICAgICAgICAgICAgICAgICAgICBteXNlbGYgYWdhaW5zdCB5b3U/IDwvdHJhbnNsYXRpb24+"
translation['12.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkgcHJlZmVyIHRvIHBhc3Mgb3ZlciBtYW55IGNvbXBsYWludHMgdGhhdCBJIG1pZ2h0IGp1c3RseSBtYWtlLAogICAgICAgICAgICAgICAgICAgIGJ1dCBJIGFkbWl0IHRoYXQgSSBhbSBoZWxwaW5nIHRoZSBDYXJkaWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDgiIHZhbGlkPSJ5ZXMiPkRlbS4gODwvYmlibD48L25vdGU+IGZvciBJIHdhcyB0aGVpciBhbGx5IGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBwZWFjZSwgYW5kIHlvdSByZWZ1c2VkIHRvIHN1Ym1pdCB5b3VyIGNsYWltIHRvIGFyYml0cmF0aW9uLCB0aG91Z2ggeW91IHdlcmUKICAgICAgICAgICAgICAgICAgICBvZnRlbiBwcmVzc2VkIHRvIGRvIHNvIGJ5IG1lLCBhbmQgbm90IGluZnJlcXVlbnRseSBieSB0aGUgQ2FyZGlhbnMuIFNob3VsZCBJIG5vdAogICAgICAgICAgICAgICAgICAgIGJlIHV0dGVybHkgY29udGVtcHRpYmxlIGlmIEkgdGhyZXcgb3ZlciBteSBhbGxpZXMgYW5kIHBhaWQgbW9yZSByZWdhcmQgdG8geW91LAogICAgICAgICAgICAgICAgICAgIHdobyBhcmUgaGFyYXNzaW5nIG1lIGluIGV2ZXJ5IHdheSwgdGhhbiB0byB0aG9zZSB3aG8gaGF2ZSBhbHdheXMgYmVlbiBteSBzdGF1bmNoCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kcz8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA4IiB2YWxpZD0ieWVzIj5EZW0uIDg8L2JpYmw+PC90cmFuc2xhdGlvbj4="
translation['12.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlCiAgICAgICAgICAgICAgICAgICAgZm9sbG93aW5nIGFmZnJvbnQgYWxzbyBzaG91bGQgbm90IGJlIHBhc3NlZCBvdmVyLiBUaG91Z2ggZm9ybWVybHkgeW91IGNvbmZpbmVkCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcyB0byB0aGUgY2hhcmdlcyBJIGhhdmUgbWVudGlvbmVkLCB5b3VyIGFycm9nYW5jZSBpcyBub3cgc3VjaCB0aGF0LAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHBlb3BsZSBvZiBQZXBhcmV0aHVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDciIHZhbGlkPSJ5ZXMiPkRlbS4gNzwvYmlibD48L25vdGU+IGNvbXBsYWluZWQgb2YgdGhlIGxhdGVzdAogICAgICAgICAgICAgICAgICAgIOKAnG91dHJhZ2Us4oCdIHlvdSBpbnN0cnVjdGVkIHlvdXIgZ2VuZXJhbCB0byBkZW1hbmQgcmVkcmVzcwogICAgICAgICAgICAgICAgICAgIGZyb20gbWUgb24gdGhlaXIgYmVoYWxmLiBJIGFjdHVhbGx5IHB1bmlzaGVkIHRoZW0gbGVzcyByaWdvcm91c2x5IHRoYW4gdGhleQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkLCBmb3IgdGhleSBzZWl6ZWQgSGFsb25uZXN1cyBpbiB0aW1lIG9mIHBlYWNlIGFuZCByZWZ1c2VkIHRvIHJlc3RvcmUKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgdGhlIGZvcnRyZXNzIG9yIHRoZSBnYXJyaXNvbiBpbiBzcGl0ZSBvZiBteSByZXBlYXRlZCByZW1vbnN0cmFuY2VzLgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDciIHZhbGlkPSJ5ZXMiPkRlbS4gNzwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['12.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91LCB3aXRoIGZ1bGwga25vd2xlZGdlIG9mIHRoZSBmYWN0cywKICAgICAgICAgICAgICAgICAgICBpZ25vcmVkIHRoZWlyIG9mZmVuY2VzIGFnYWluc3QgbWUsIGFuZCBvbmx5IGNvbnNpZGVyZWQgdGhlaXIgcHVuaXNobWVudC4gWWV0IEkKICAgICAgICAgICAgICAgICAgICByb2JiZWQgbmVpdGhlciB0aGVtIG5vciB5b3Ugb2YgdGhlIGlzbGFuZCwgYnV0IG9ubHkgdGhlIHBpcmF0ZSBjaGllZiwgU29zdHJhdHVzLgogICAgICAgICAgICAgICAgICAgIE5vdywgaWYgeW91IHNheSB0aGF0IHlvdSBoYW5kZWQgaXQgb3ZlciB0byBTb3N0cmF0dXMsIHlvdSBhZG1pdCB0aGF0IHlvdSBlbXBsb3kKICAgICAgICAgICAgICAgICAgICBwaXJhdGVzOyBpZiBoZSBjYXB0dXJlZCBpdCBhZ2FpbnN0IHlvdXIgd2lzaGVzLCB3aHkgdGhpcyBpbmRpZ25hdGlvbiBhZ2FpbnN0IG1lCiAgICAgICAgICAgICAgICAgICAgZm9yIHRha2luZyBpdCBhbmQgbWFraW5nIHRoZSBkaXN0cmljdCBzYWZlIGZvciB0cmFkZXJzPyA8L3RyYW5zbGF0aW9uPg=="
translation['12.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiBteSByZWdhcmQgZm9yIHRoZSBpbnRlcmVzdHMgb2YgeW91ciBjaXR5LCBJCiAgICAgICAgICAgICAgICAgICAgb2ZmZXJlZCB5b3UgdGhlIGlzbGFuZCwgYnV0IHlvdXIgc3RhdGVzbWVuIHVyZ2VkIHlvdSB0byByZWZ1c2UgaXQgYXMgYSBnaWZ0IGFuZAogICAgICAgICAgICAgICAgICAgIGRlbWFuZCBpdCBhcyBhbiBhY3Qgb2YgcmVzdGl0dXRpb24sIGluIG9yZGVyIHRoYXQsIGlmIEkgc3VibWl0IHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZGljdGF0aW9uLCBJIG1heSB0aGVyZWJ5IGNvbmZlc3MgdGhhdCBJIGhhdmUgbm8gcmlnaHQgdG8gdGhlIHBsYWNlLCBidXQgaWYgSSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCBnaXZlIGl0IHVwLCBJIG1heSBhcm91c2UgdGhlIHN1c3BpY2lvbnMgb2YgeW91ciBkZW1vY3JhY3kuIENvbnNjaW91cyBvZgogICAgICAgICAgICAgICAgICAgIHRoaXMsIEkgY2hhbGxlbmdlZCB5b3UgdG8gc3VibWl0IG91ciBjbGFpbXMgdG8gYXJiaXRyYXRpb24sIHNvIHRoYXQgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgaXNsYW5kIHdhcyBhZGp1ZGdlZCB0byBiZSBtaW5lLCBJIG1pZ2h0IGdpdmUgaXQgdG8geW91OyBpZiB5b3VycywgdGhlbiBJIG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZSBpdCB0byB5b3VyIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['12.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5JIHJlcGVhdGVkbHkKICAgICAgICAgICAgICAgICAgICBkZW1hbmRlZCBhIHRyaWFsLCBidXQgeW91IHBhaWQgbWUgbm8gYXR0ZW50aW9uLCBhbmQgdGhlIFBlcGFyZXRoaWFucyBvY2N1cGllZAogICAgICAgICAgICAgICAgICAgIHRoZSBpc2xhbmQuIFdoYXQsIHRoZW4sIHdhcyBJIHRvIGRvPyBXYXMgSSBub3QgdG8gcHVuaXNoIHRob3NlIHdobyBoYWQgdmlvbGF0ZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciBvYXRocz8gV2FzIEkgbm90IHRvIHRha2UgdmVuZ2VhbmNlIGZvciBzdWNoIGEgd2FudG9uIG91dHJhZ2U/IEZvciBpZiB0aGUKICAgICAgICAgICAgICAgICAgICBpc2xhbmQgYmVsb25nZWQgdG8gdGhlIFBlcGFyZXRoaWFucywgd2hhdCByaWdodCBoYWQgdGhlIEF0aGVuaWFucyB0byBkZW1hbmQgaXQKICAgICAgICAgICAgICAgICAgICBiYWNrPyBJZiBpdCB3YXMgeW91cnMsIHdoeSBhcmUgeW91IG5vdCBhbmdyeSB3aXRoIHRoZSBQZXBhcmV0aGlhbnMgZm9yIHNlaXppbmcKICAgICAgICAgICAgICAgICAgICB0aGUgdGVycml0b3J5IG9mIG90aGVycz8gPC90cmFuc2xhdGlvbj4="
translation['12.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T3VyIG11dHVhbCBob3N0aWxpdHkgaGFzIGJlY29tZSBzbyBhY3V0ZSB0aGF0LCB3aGVuIEkKICAgICAgICAgICAgICAgICAgICB3YW50ZWQgdG8gY29udmV5IG15IGZsZWV0IHRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+LCBJIHdhcyBjb21wZWxsZWQgdG8gZXNjb3J0IGl0IHdpdGggbXkgYXJteSB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwMzQ1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTAzNDUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4sIGJlY2F1c2UgeW91ciBzZXR0bGVycwogICAgICAgICAgICAgICAgICAgIHRoZXJlIHdlcmUgYXQgd2FyIHdpdGggdXMgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBkZWNyZWUgb2YgUG9seWNyYXRlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VW5rbm93bjsgYXBwYXJlbnRseSB0aGUgYXV0aG9yIG9mIHRoZSBkZWNyZWUgYnkKICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIGNvbG9ueSB3YXMgc2VudCBvdXQuPC9ub3RlPiBiYWNrZWQgdXAgYnkgeW91ciByZXNvbHV0aW9ucywgYW5kCiAgICAgICAgICAgICAgICAgICAgeW91ciBnZW5lcmFsIHdhcyBpbmNpdGluZyB0aGUgQnl6YW50aW5lcyBhbmQgcHVibGljbHkgYW5ub3VuY2luZyB0aGF0IHlvdXIKICAgICAgICAgICAgICAgICAgICBvcmRlcnMgd2VyZSB0byBtYWtlIHdhciBvbiBtZSwgaWYgaGUgZ290IHRoZSBjaGFuY2UuIEluIHNwaXRlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBwcm92b2NhdGlvbiwgSSBrZXB0IG15IGhhbmRzIG9mZiB0aGUgZmxlZXRzIGFuZCB0aGUgdGVycml0b3J5IG9mIHlvdXIgc3RhdGUsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIEkgd2FzIHN0cm9uZyBlbm91Z2ggdG8gc2VpemUgbW9zdCwgaWYgbm90IGFsbCwgb2YgdGhlc2UsIGFuZCBJIGhhdmUgbm90CiAgICAgICAgICAgICAgICAgICAgY2Vhc2VkIHRvIGFwcGVhbCB0byB5b3UgdG8gaGF2ZSB0aGUgcG9pbnRzIGluIGRpc3B1dGUgYmV0d2VlbiB1cyBzZXR0bGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgYXJiaXRyYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['12.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgY29uc2lkZXIgd2hpY2ggaXMgdGhlIG1vcmUKICAgICAgICAgICAgICAgICAgICBob25vcmFibGXigJR0byBzZXR0bGUgdGhlIGRpc3B1dGUgYnkgYXJtcyBvciBieSBhcmd1bWVudHMsIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcyB0aGUgdW1waXJlcyBvciB0byB3aW4gdGhlIHZlcmRpY3QgZnJvbSBvdGhlcnMuIEFsc28gcmVmbGVjdCBob3cKICAgICAgICAgICAgICAgICAgICB1bnJlYXNvbmFibGUgaXQgaXMgdGhhdCBBdGhlbmlhbnMgc2hvdWxkIGZvcmNlIFRoYXNpYW5zIGFuZCBNYXJvbml0ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TWFyb25lYSBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTdHJ5bWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFN0cnltZSI+U3RyeW1lPC9wbGFjZU5hbWU+IHdlcmUgbmVpZ2hib3JpbmcgdG93bnMgb24gdGhlIGNvYXN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiwgZWFzdHdhcmQgZnJvbSB0aGUgaXNsYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDc4Ij5UaGFzb3M8L3BsYWNlTmFtZT4uIE1hcm9uZWEgbGFpZCBjbGFpbSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTdHJ5bWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFN0cnltZSI+U3RyeW1lPC9wbGFjZU5hbWU+LCB3aGljaCB3YXMgYSBjb2xvbnkKICAgICAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwNzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTA3OCI+VGhhc29zPC9wbGFjZU5hbWU+Ljwvbm90ZT4gdG8gc3VibWl0IHRvCiAgICAgICAgICAgICAgICAgICAgYXJiaXRyYXRpb24gYWJvdXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTdHJ5bWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFN0cnltZSI+U3RyeW1lPC9wbGFjZU5hbWU+IHdlcmUgbmVpZ2hib3JpbmcgdG93bnMgb24gdGhlIGNvYXN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiwgZWFzdHdhcmQgZnJvbSB0aGUgaXNsYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDc4Ij5UaGFzb3M8L3BsYWNlTmFtZT4uIE1hcm9uZWEgbGFpZCBjbGFpbSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTdHJ5bWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFN0cnltZSI+U3RyeW1lPC9wbGFjZU5hbWU+LCB3aGljaCB3YXMgYSBjb2xvbnkKICAgICAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwNzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTA3OCI+VGhhc29zPC9wbGFjZU5hbWU+LjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3RyeW1lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTdHJ5bWUiPlN0cnltZTwvcGxhY2VOYW1lPiwgYnV0IHNob3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCB0aGVtc2VsdmVzIGluIHRoaXMgd2F5IHNldHRsZSB3aXRoIG1lIHRoZSBwb2ludHMgb24gd2hpY2ggd2UgYXJlIGF0CiAgICAgICAgICAgICAgICAgICAgdmFyaWFuY2UsIGVzcGVjaWFsbHkgd2hlbiB5b3UgcmVhbGl6ZSB0aGF0LCBpZiB5b3UgbG9zZSB0aGUgdmVyZGljdCwgeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2Ugbm90aGluZywgYW5kIGlmIHlvdSB3aW4gaXQsIHlvdSB3aWxsIGdhaW4gdGVycml0b3J5IHdoaWNoIGlzIG5vdyBpbiBteQogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb24uIDwvdHJhbnNsYXRpb24+"
translation['12.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0CiAgICAgICAgICAgICAgICAgICAgdGhlIGNyb3duaW5nIGFic3VyZGl0eSwgSSB0aGluaywgaXMgdGhhdCwgdGhvdWdoIEkgc2VudCBhbWJhc3NhZG9ycyBmcm9tIGFsbCBteQogICAgICAgICAgICAgICAgICAgIGFsbGllcyB0byBhdHRlbmQgYXMgd2l0bmVzc2VzLCBhbmQgd2FzIHdpbGxpbmcgdG8gY29tZSB0byBhIGp1c3QgYWdyZWVtZW50IHdpdGgKICAgICAgICAgICAgICAgICAgICB5b3UgaW4gdGhlIGludGVyZXN0cyBvZiB0aGUgR3JlZWsgd29ybGQsIHlvdSB0dXJuZWQgYSBkZWFmIGVhciB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZXByZXNlbnRhdGlvbnMgb2YgdGhlIGFtYmFzc2Fkb3JzLCB3aGVuIHlvdSBtaWdodCBwZXJmZWN0bHkgd2VsbCBoYXZlIHJlbGlldmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGZlYXJzIG9mIHRob3NlIHdobyBhdHRyaWJ1dGVkIHNpbmlzdGVyIG1vdGl2ZXMgdG8gbWUsIG9yIGVsc2UgaGF2ZSBwcm92ZWQgbWUKICAgICAgICAgICAgICAgICAgICBiZXlvbmQgYWxsIGRvdWJ0IHRoZSBtb3N0IHdvcnRobGVzcyBvZiBtYW5raW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['12.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGEgY291cnNlIHdhcyBpbmRlZWQgaW4gdGhlIGludGVyZXN0cyBvZiB5b3VyIHBlb3BsZSwgYnV0IGl0IHdvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIGhhdmUgcGFpZCB5b3VyIHRhbGtlcnMuIEZvciB0aG9zZSB3aG8gaGF2ZSBhbnkgZXhwZXJpZW5jZSBvZiB5b3VyIGNvbnN0aXR1dGlvbgogICAgICAgICAgICAgICAgICAgIHNheSB0aGF0IHRvIHRoZSBvcmF0b3JzIHBlYWNlIG1lYW5zIHdhciBhbmQgd2FyIG1lYW5zIHBlYWNlOyBiZWNhdXNlIHRoZXkgYWx3YXlzCiAgICAgICAgICAgICAgICAgICAgbWFuYWdlIHRvIG1ha2Ugc29tZXRoaW5nIG91dCBvZiB0aGUgZ2VuZXJhbHMgZWl0aGVyIGJ5IGJhY2tpbmcgdGhlbSB1cCBvciBieQogICAgICAgICAgICAgICAgICAgIGJsYWNrbWFpbGluZyB0aGVtLCBhbmQgYWxzbywgYnkgYWJ1c2luZyBmcm9tIHRoZSBQdWJsaWMgcGxhdGZvcm0geW91ciBtb3N0CiAgICAgICAgICAgICAgICAgICAgcHJvbWluZW50IGNpdGl6ZW5zIGFuZCB0aGUgbW9zdCBlc3RlZW1lZCBvZiB5b3VyIGZvcmVpZ24gcmVzaWRlbnRzLCB0aGV5IHdpbiBhCiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiB3aXRoIHRoZSBtb2IgZm9yIGRlbW9jcmF0aWMgemVhbC4gPC90cmFuc2xhdGlvbj4="
translation['12.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGl0IHdvdWxkIGJlIGVhc3kgZm9yIG1lLCBhdCBhIHRyaWZsaW5nCiAgICAgICAgICAgICAgICAgICAgZXhwZW5zZSwgdG8gc3RvcCB0aGVpciBhYnVzZSBhbmQgc2V0IHRoZW0gc2luZ2luZyBteSBwcmFpc2VzLiBCdXQgSSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBhc2hhbWVkIGlmIEkgd2VyZSBrbm93biB0byBwdXJjaGFzZSB5b3VyIGdvb2R3aWxsIGZyb20gbWVuIHdobywgYmVzaWRlcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIG90aGVyIGZhdWx0cywgaGF2ZSByZWFjaGVkIHN1Y2ggYSBoZWlnaHQgb2YgaW1wdWRlbmNlIHRoYXQgdGhleSBldmVuIHZlbnR1cmUgdG8KICAgICAgICAgICAgICAgICAgICBkaXNwdXRlIHdpdGggbWUgYWJvdXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LCB0byB3aGljaCBJIHRoaW5rIEkgY2FuIGFkdmFuY2UgYSBmYXIgYmV0dGVyIGNsYWltIHRoYW4KICAgICAgICAgICAgICAgICAgICBteSByaXZhbHMuIDwvdHJhbnNsYXRpb24+"
translation['12.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIGlmIGl0IGJlbG9uZ3MgdG8gdGhlIG9yaWdpbmFsCiAgICAgICAgICAgICAgICAgICAgY29ucXVlcm9ycywgaGF2ZSBub3Qgd2UgYSByaWdodCB0byBob2xkIGl0PyBJdCB3YXMgbXkgYW5jZXN0b3IsIEFsZXhhbmRlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UmVhZGVycyBvZiBIZXJvZG90dXMgd2lsbCByZW1lbWJlciBBbGV4YW5kZXIsIHdobwogICAgICAgICAgICAgICAgICAgICAgICBhZnRlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzQwIj5TYWxhbWlzPC9wbGFjZU5hbWU+IHRyaWVkIHRvIHRlbXB0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMgdG8gZGVzZXJ0IHRoZSBHcmVlayBjYXVzZSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDguMTQwYSIgdmFsaWQ9InllcyI+SGR0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgOC4xNDA8L2JpYmw+77yJLCBidXQgbWFkZSBhbWVuZHMgYnkgcmV2ZWFsaW5nIHRvIHRoZW0gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uIG9mIHRoZSBQZXJzaWFucyBiZWZvcmUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQbGF0YWVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQbGF0YWVhIj5QbGF0YWVhPC9wbGFjZU5hbWU+IO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOS40NCIgdmFsaWQ9InllcyI+SGR0LgogICAgICAgICAgICAgICAgICAgICAgICA5LjQ0PC9iaWJsPu+8iTsgYW5kIGFsc28gdGhlIHN0YXR1ZSBlcmVjdGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRGVscGhpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEZWxwaGkiPkRlbHBoaTwvcGxhY2VOYW1lPiBmcm9tIHRoZSBwbHVuZGVyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4g77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA4LjEyMSIgdmFsaWQ9InllcyI+SGR0LiA4LjEyMTwvYmlibD7vvIkuIEJ1dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4gd2FzIG5vdCBpbiBleGlzdGVuY2UgYXQgdGhlIHRpbWUsIG5vciB3ZXJlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQZXJzaWFucyBpbiB0aGVpciByZXRyZWF0IGF0dGFja2VkIGJ5IE1hY2Vkb25pYW5zIGJ1dCBieSBUaHJhY2lhbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOS44OSIgdmFsaWQ9InllcyI+SGR0LiA5Ljg5PC9iaWJsPu+8iS4gUGVyaGFwcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTWFjZWRvbmlhbnMgaGFkIHRoZWlyIG93biBoaXN0b3J5IG9mIHRoZSBQZXJzaWFuIGludmFzaW9uLjwvbm90ZT4gd2hvIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgb2NjdXBpZWQgdGhlIHNpdGUsIGFuZCwgYXMgdGhlIGZpcnN0LWZydWl0cyBvZiB0aGUgUGVyc2lhbiBjYXB0aXZlcyB0YWtlbiB0aGVyZSwKICAgICAgICAgICAgICAgICAgICBzZXQgdXAgYSBnb2xkZW4gc3RhdHVlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4gdHJpZWQgdG8gdGVtcHQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucyB0byBkZXNlcnQgdGhlIEdyZWVrIGNhdXNlIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOC4xNDBhIiB2YWxpZD0ieWVzIj5IZHQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA4LjE0MDwvYmlibD7vvIksIGJ1dCBtYWRlIGFtZW5kcyBieSByZXZlYWxpbmcgdG8gdGhlbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVjaXNpb24gb2YgdGhlIFBlcnNpYW5zIGJlZm9yZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBsYXRhZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBsYXRhZWEiPlBsYXRhZWE8L3BsYWNlTmFtZT4g77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA5LjQ0IiB2YWxpZD0ieWVzIj5IZHQuCiAgICAgICAgICAgICAgICAgICAgICAgIDkuNDQ8L2JpYmw+77yJOyBhbmQgYWxzbyB0aGUgc3RhdHVlIGVyZWN0ZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxwaGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERlbHBoaSI+RGVscGhpPC9wbGFjZU5hbWU+IGZyb20gdGhlIHBsdW5kZXIgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjM0MCI+U2FsYW1pczwvcGxhY2VOYW1lPiDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDguMTIxIiB2YWxpZD0ieWVzIj5IZHQuIDguMTIxPC9iaWJsPu+8iS4gQnV0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiB3YXMgbm90IGluIGV4aXN0ZW5jZSBhdCB0aGUgdGltZSwgbm9yIHdlcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFBlcnNpYW5zIGluIHRoZWlyIHJldHJlYXQgYXR0YWNrZWQgYnkgTWFjZWRvbmlhbnMgYnV0IGJ5IFRocmFjaWFucwogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA5Ljg5IiB2YWxpZD0ieWVzIj5IZHQuIDkuODk8L2JpYmw+77yJLiBQZXJoYXBzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBNYWNlZG9uaWFucyBoYWQgdGhlaXIgb3duIGhpc3Rvcnkgb2YgdGhlIFBlcnNpYW4gaW52YXNpb24uPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxwaGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERlbHBoaSI+RGVscGhpPC9wbGFjZU5hbWU+LiBPcgogICAgICAgICAgICAgICAgICAgIGlmIGFueW9uZSBkaXNwdXRlcyB0aGlzIGFuZCBjbGFpbXMgaXQgZm9yIGl0cyBsYXRlciBvd25lcnMsIGhlcmUgYWdhaW4gdGhlIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgaXMgbWluZSwgYmVjYXVzZSBJIGJlc2llZ2VkIGFuZCBjYXB0dXJlZCB0aGUgY2l0eSwgYWZ0ZXIgaXRzIGluaGFiaXRhbnRzIGhhZAogICAgICAgICAgICAgICAgICAgIGV4cGVsbGVkIHlvdSBhbmQgYWNjZXB0ZWQgdGhlIExhY2VkYWVtb25pYW5zIGFzIHRoZWlyIGZvdW5kZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CcmFzaWRhcywgYWZ0ZXIgaGlzIGRlYXRoIGluIDQyMiwgd2FzIHdvcnNoaXBwZWQKICAgICAgICAgICAgICAgICAgICAgICAgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IGFzIGhlcm8gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kZXIgaW4gcGxhY2Ugb2YgSGFnbm9uIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDUuMTEiIHZhbGlkPSJ5ZXMiPlRodWMuCiAgICAgICAgICAgICAgICAgICAgICAgIDUuMTE8L2JpYmw+77yJLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4gYXMgaGVybyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRlciBpbiBwbGFjZSBvZiBIYWdub24g77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNS4xMSIgdmFsaWQ9InllcyI+VGh1Yy4KICAgICAgICAgICAgICAgICAgICAgICAgNS4xMTwvYmlibD7vvIkuPC90cmFuc2xhdGlvbj4="
translation['12.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgd2UgYWxsIG9mIHVzIG9jY3VweSBvdXIgY2l0aWVzIGVpdGhlciBieQogICAgICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlIGZyb20gb3VyIGFuY2VzdG9ycyBvciBieSByaWdodCBvZiBjb25xdWVzdCBpbiB3YXIuIEJ1dCB5b3UsIHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgbm90IHRoZSBmaXJzdCB0byB0YWtlIEFtcGhpcG9saXMsIHdobyBkbyBub3QgcG9zc2VzcyBpdCB0b2RheSwgYW5kIHdobyBtYWRlIHRoZQogICAgICAgICAgICAgICAgICAgIGJyaWVmZXN0IHNvam91cm4gaW4gdGhhdCBkaXN0cmljdCwgbm93IGxheSBjbGFpbSB0byB0aGUgY2l0eSwgYW5kIHRoYXQgaW4gc3BpdGUKICAgICAgICAgICAgICAgICAgICBvZiB5b3VyIG93biBtb3N0IHNvbGVtbiBhc3N1cmFuY2VzIGluIG15IGZhdm91ci4gRm9yIEkgd3JvdGUgdG8geW91IGFnYWluIGFuZAogICAgICAgICAgICAgICAgICAgIGFnYWluIG9uIHRoZSBzdWJqZWN0LCBhbmQgeW91IGFja25vd2xlZGdlZCB0aGF0IEkgd2FzIGluIHRoZSByaWdodCBieSBtYWtpbmcKICAgICAgICAgICAgICAgICAgICBwZWFjZSB3aXRoIG1lIGF0IGEgdGltZSB3aGVuIEkgd2FzIGluIG9jY3VwYXRpb24gb2YgdGhlIGNpdHksIGFuZCBzdWJzZXF1ZW50bHkKICAgICAgICAgICAgICAgICAgICBieSBjb25jbHVkaW5nIGFuIGFsbGlhbmNlIHdpdGggbWUgb24gdGhlIHNhbWUgdGVybXMuIDwvdHJhbnNsYXRpb24+"
translation['12.23'] = ""
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiBkZWFsaW5nIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgc3VtIG9mIG1vbmV5IHVuZGVyIGRpc2N1c3Npb24gYW5kIHRoZSBvdGhlciBtYXR0ZXJzIHJlZmVycmVkIHRvIHRoaXMKICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSwgSSBzZWUgbm8gZGlmZmljdWx0eSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaW4gZWl0aGVyIG9mIHR3byBtZXRob2RzOiBJIG1heSBhdHRhY2sgdGhlIG9mZmljaWFscwogICAgICAgICAgICAgICAgICAgIHdobyBhc3NpZ24gYW5kIGRpc3RyaWJ1dGUgdGhlIHB1YmxpYyBmdW5kcyBhbmQgbWF5IHRodXMgZ2FpbiBjcmVkaXQgd2l0aCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyByZWdhcmQgdGhpcyBzeXN0ZW0gYXMgZGV0cmltZW50YWwgdG8gdGhlIFN0YXRlLCBvciBJIG1heSBhcHByb3ZlIGFuZCBjb21tZW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0IHRvIHJlY2VpdmUgdGhlc2UgZG9sZXMgYW5kIHNvIGdyYXRpZnkgdGhvc2Ugd2hvIGFyZSBlc3BlY2lhbGx5IGluIG5lZWQKICAgICAgICAgICAgICAgICAgICBvZiB0aGVtLiBGb3IgbmVpdGhlciBjbGFzcyBoYXMgdGhlIGludGVyZXN0IG9mIHRoZSBTdGF0ZSBpbiB2aWV3LCB3aGVuIHRoZXkKICAgICAgICAgICAgICAgICAgICBhcHByb3ZlIG9yIGNvbXBsYWluIG9mIHRoZSBzeXN0ZW0sIGJ1dCB0aGV5IGFyZSBwcm9tcHRlZCByZXNwZWN0aXZlbHkgYnkgdGhlaXIKICAgICAgICAgICAgICAgICAgICBwb3ZlcnR5IG9yIHRoZWlyIGFmZmx1ZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkgbXlzZWxmIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBwcm9wb3NlIHN1Y2ggYSBkaXN0cmlidXRpb24gb2YgdGhlIGRvbGVzLCBub3Igb3Bwb3NlIHRoZSByaWdodCB0bwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGhlbTsgYnV0IEkgZG8gdXJnZSB5b3UgdG8gcmVmbGVjdCBzZXJpb3VzbHkgaW4geW91ciBvd24gbWluZHMgdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWxlIHRoZSBzdW0gb2YgbW9uZXkgeW91IGFyZSBkaXNjdXNzaW5nIGlzIGEgdHJpZmxlLCB0aGUgaGFiaXQgb2YgbWluZCB0aGF0IGl0CiAgICAgICAgICAgICAgICAgICAgZm9zdGVycyBpcyBhIHNlcmlvdXMgbWF0dGVyLiBOb3cgaWYgeW91IHNvIG9yZ2FuaXplIHRoZSByZWNlaXB0IG9mIG1vbmV5IHRoYXQgaXQKICAgICAgICAgICAgICAgICAgICBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIHBlcmZvcm1hbmNlIG9mIGR1dGllcywgc28gZmFyIGZyb20gaW5qdXJpbmcsIHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgY29uZmVyIG9uIHRoZSBTdGF0ZSBhbmQgb24geW91cnNlbHZlcyB0aGUgZ3JlYXRlc3QgYmVuZWZpdDsgYnV0IGlmIGEKICAgICAgICAgICAgICAgICAgICBmZXN0aXZhbCBvciBhbnkgb3RoZXIgcHJldGV4dCBpcyBnb29kIGVub3VnaCB0byBqdXN0aWZ5IGEgZG9sZSwgYW5kIHlldCB5b3UKICAgICAgICAgICAgICAgICAgICByZWZ1c2UgZXZlbiB0byBsaXN0ZW4gdG8gdGhlIHN1Z2dlc3Rpb24gdGhhdCB0aGVyZSBpcyBhbnkgb2JsaWdhdGlvbiBhdHRhY2hlZCB0bwogICAgICAgICAgICAgICAgICAgIGl0LCBiZXdhcmUgbGVzdCB5b3UgZW5kIGJ5IGFja25vd2xlZGdpbmcgdGhhdCB3aGF0IHlvdSBub3cgY29uc2lkZXIgYSBwcm9wZXIKICAgICAgICAgICAgICAgICAgICBwcmFjdGljZSB3YXMgYSBncmlldm91cyBlcnJvci4gPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk15IGlkZWEgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgZHV0eeKAlGRvIG5vdCBkcm93biB3aXRoIHlvdXIgY2xhbW9yIHdoYXQgSSBhbSBhYm91dCB0byBzYXksIGJ1dCBoZWFyIG1lCiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHlvdSBqdWRnZeKAlG15IGlkZWEgaXMgdGhhdCwgYXMgd2UgaGF2ZSBkZXZvdGVkIGEgbWVldGluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSB0byB0aGUgcXVlc3Rpb24gb2YgcmVjZWl2aW5nIHRoZSBkb2xlLCBzbyB3ZSBvdWdodCBhbHNvIHRvIGRldm90ZSBhCiAgICAgICAgICAgICAgICAgICAgbWVldGluZyB0byBvcmdhbml6YXRpb24gYW5kIHRvIGVxdWlwbWVudCBmb3Igd2FyOyBhbmQgZXZlcnlvbmUgbXVzdCBzaG93IGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICBub3QgbWVyZWx5IHJlYWR5IHRvIGhlYXIgd2hhdCBpcyBzYWlkLCBidXQgYWxzbyB3aWxsaW5nIHRvIGFjdCwgc28gdGhhdCB5b3UgbWF5CiAgICAgICAgICAgICAgICAgICAgZGVwZW5kIG9uIHlvdXJzZWx2ZXMsIEF0aGVuaWFucywgZm9yIHlvdXIgaG9wZXMgb2Ygc3VjY2VzcywgYW5kIG5vdCBiZSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBhc2tpbmcgd2hhdCBzZXJ2aWNlIHRoaXMgaW5kaXZpZHVhbCBvciB0aGF0IGlzIHJlbmRlcmluZy4gPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0b3RhbCByZXZlbnVlcyBvZiB0aGUgU3RhdGUsIGluY2x1ZGluZyB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIHJlc291cmNlcywgbm93IHNxdWFuZGVyZWQgb24gdW5uZWNlc3Nhcnkgb2JqZWN0cywgYW5kIHRoZSBjb250cmlidXRpb25zIG9mIHlvdXIKICAgICAgICAgICAgICAgICAgICBhbGxpZXMsIG11c3QgYmUgc2hhcmVkIGJ5IGVhY2ggY2l0aXplbiBlcXVhbGx5LCBhcyBwYXkgYnkgdGhvc2Ugb2YgbWlsaXRhcnkgYWdlCiAgICAgICAgICAgICAgICAgICAgYW5kIGFzIG92ZXJzZWVycycgZmVlcywgb3Igd2hhdGV2ZXIgeW91IGxpa2UgdG8gY2FsbCBpdCwgYnkgdGhvc2UgYmV5b25kIHRoZQogICAgICAgICAgICAgICAgICAgIGFnZS1saW1pdDsgYW5kIHlvdSBtdXN0IHNlcnZlIGluIHBlcnNvbiBhbmQgbm90IHJlc2lnbiB0aGF0IGR1dHkgdG8gb3RoZXJzLAogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBvdXIgYXJteSBtdXN0IGJlIGEgbmF0aW9uYWwgZm9yY2UsCiAgICAgICAgICAgICAgICAgICAgZXF1aXBwZWQgZnJvbSB0aGUgcmVzb3VyY2VzIEkgaGF2ZSBuYW1lZCwgc28gdGhhdCB5b3UgbWF5IGJlIHdlbGwgcHJvdmlkZWQgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHBlcmZvcm1hbmNlIG9mIHlvdXIgdGFzaywgYW5kIHRoYXQgd2UgbWF5IGhhdmUgbm8gcmVwZXRpdGlvbiBvZiB3aGF0IHVzdWFsbHkKICAgICAgICAgICAgICAgICAgICBoYXBwZW5zIG5vdywgd2hlbiB5b3UgYXJlIGFsd2F5cyBicmluZ2luZyB5b3VyIGdlbmVyYWxzIHRvIHRyaWFsIGFuZCB0aGUgbmV0CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0IG9mIHlvdXIgZXhlcnRpb25zIGlzIHRoZSBhbm5vdW5jZW1lbnQgdGhhdCDigJxTby1hbmQtc28sIHRoZSBzb24KICAgICAgICAgICAgICAgICAgICBvZiBTby1hbmQtc28sIGhhcyBpbXBlYWNoZWQgU28tYW5kLXNvLuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IGlzIHRvIGJlIHRoZSByZXN1bHQgZm9yIHlvdT8gSW4gdGhlIGZpcnN0IHBsYWNlLCB0aGF0IHlvdXIKICAgICAgICAgICAgICAgICAgICBhbGxpZXMgbWF5IGJlIGtlcHQgbG95YWwsIG5vdCBieSBtYWludGFpbmluZyBnYXJyaXNvbnMgYW1vbmcgdGhlbSwgYnV0IGJ5IG1ha2luZwogICAgICAgICAgICAgICAgICAgIHRoZWlyIGludGVyZXN0cyBpZGVudGljYWwgd2l0aCB5b3VyczsgbmV4dCwgdGhhdCBvdXIgZ2VuZXJhbHMgbWF5IG5vdCBsZWFkCiAgICAgICAgICAgICAgICAgICAgbWVyY2VuYXJpZXMgdG8gdGhlIHBsdW5kZXIgb2Ygb3VyIGFsbGllcyB3aXRob3V0IGV2ZW4gY29taW5nIGluIHNpZ2h0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15LCBzbyB0aGF0IHRoZSBwcm9maXQgaXMgYWxsIHRoZWlyIG93biwgd2hpbGUgdGhlIFN0YXRlIGF0IGxhcmdlIGluY3VycyB0aGUKICAgICAgICAgICAgICAgICAgICBoYXRyZWQgYW5kIHRoZSBhYnVzZSwgYnV0IHRoYXQgdGhleSBtYXkgaGF2ZSB0aGVpciBvd24gY2l0aXplbnMgYXQgdGhlaXIgYmFjaywKICAgICAgICAgICAgICAgICAgICBhbmQgbWF5IHNvIGRlYWwgd2l0aCBvdXIgZW5lbWllcyBhcyB0aGV5IG5vdyBkZWFsIHdpdGggb3VyIGZyaWVuZHMuIDwvdHJhbnNsYXRpb24+"
translation['13.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcGFydCBmcm9tIHRoaXMsIG1hbnkgb3BlcmF0aW9ucyBkZW1hbmQgeW91cgogICAgICAgICAgICAgICAgICAgIGFjdHVhbCBwcmVzZW5jZSwgYW5kIGJlc2lkZSB0aGUgYWR2YW50YWdlIG9mIHVzaW5nIGEgbmF0aW9uYWwgZm9yY2UgaW4gYQogICAgICAgICAgICAgICAgICAgIG5hdGlvbmFsIHF1YXJyZWwsIHRoaXMgaXMgbmVjZXNzYXJ5IG9uIGV2ZXJ5IG90aGVyIGdyb3VuZC4gRm9yIGlmIHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY29udGVudCB0byBsZXQgdGhpbmdzIHNsaWRlIGFuZCBub3Qgd29ycnkgYWJvdXQgdGhlIHN0YXRlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgaXQgd291bGQgYmUgYW5vdGhlciBtYXR0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['13.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgYXMgaXQgaXMsIHlvdSBjbGFpbSB0byB0YWtlIHRoZSBsZWFkIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIGRldGVybWluZSB0aGUgcmlnaHRzIG9mIG90aGVyIHN0YXRlczsgeWV0IG5laXRoZXIgaW4gdGhlIHBhc3Qgbm9yIHRvZGF5IGhhdmUgeW91CiAgICAgICAgICAgICAgICAgICAgZnVybmlzaGVkIGEgc3VmZmljaWVudCBmb3JjZSB0byBzdXBlcmludGVuZCBhbmQgc2VjdXJlIHRoaXMgY2xhaW0uIE9uIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnRyYXJ5LCBpdCB3YXMgd2hlbiB5b3Ugc3Rvb2QgdXR0ZXJseSBhbG9vZiBhbmQgaW5kaWZmZXJlbnQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBkZW1vY3JhY2llcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE15dGlsZW5lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNeXRpbGVuZSI+TXl0aWxlbmU8L3BsYWNlTmFtZT4gYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPiB3ZXJlIGRlc3Ryb3llZC4KICAgICAgICAgICAgICAgICAgICDigJxZZXMsIGJ1dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gd2FzIG91cgogICAgICAgICAgICAgICAgICAgIGVuZW15LOKAnSB5b3UgbWF5IHNheS4gPC90cmFuc2xhdGlvbj4="
translation['13.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB5b3Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXIsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgb3VyCiAgICAgICAgICAgICAgICAgICAgaG9zdGlsaXR5IHRvd2FyZHMgb2xpZ2FyY2hpZXMsIHB1cmVseSBvbiB0aGUgZ3JvdW5kIG9mIHByaW5jaXBsZSwgaXMgc3Ryb25nZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIG91ciBob3N0aWxpdHkgdG93YXJkcyBkZW1vY3JhY2llcyBvbiBhbnkgZ3JvdW5kcyB3aGF0ZXZlci4gQnV0IHRvIHJldHVybiB0bwogICAgICAgICAgICAgICAgICAgIG15IHBvaW50LiBNeSB2aWV3IGlzIHRoYXQgeW91IG11c3QgYmUgYnJvdWdodCB1bmRlciBhIHN5c3RlbSwgYW5kIHRoZXJlIG11c3QgYmUKICAgICAgICAgICAgICAgICAgICBhIHVuaWZvcm0gc2NoZW1lIGZvciByZWNlaXZpbmcgcHVibGljIG1vbmV5IGFuZCBmb3IgcGVyZm9ybWluZyBuZWNlc3NhcnkKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcy4gSSBoYXZlIGFkZHJlc3NlZCB5b3UgYmVmb3JlIG9uIHRoaXMgc3ViamVjdCBhbmQgaGF2ZSBkZXNjcmliZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWV0aG9kIG9mIG9yZ2FuaXppbmcgeW91LCB3aGV0aGVyIHlvdSBzZXJ2ZSBpbiB0aGUgaW5mYW50cnkgb3IgdGhlIGNhdmFscnkgb3IgaW4KICAgICAgICAgICAgICAgICAgICBvdGhlciB3YXlzLCBhbmQgYWxzbyBob3cgYW1wbGUgcHJvdmlzaW9uIG1heSBiZSBlbnN1cmVkIGZvciBhbGwgYWxpa2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5JIHdpbGwgdGVsbCB5b3Ugd2l0aG91dCBhbnkgY29uY2VhbG1lbnQKICAgICAgICAgICAgICAgICAgICB3aGF0IGhhcyBjYXVzZWQgbWUgbW9zdCBkaXNhcHBvaW50bWVudC4gSXQgaXMgdGhhdCB0aG91Z2ggdGhlIG1hbnkgcmVmb3JtcwogICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkIHdlcmUgYWxsIG9mIHRoZW0gaW1wb3J0YW50IGFuZCBob25vcmFibGUsIG5vIG9uZSByZW1lbWJlcnMgYW55IG9mIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgYnV0IGV2ZXJ5b25lIHJlbWVtYmVycyB0aGUgdHdvIG9ib2xzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgY2hhcmdlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBhZG1pc3Npb24gdG8gdGhlIHRoZWF0ZXIgZGVmcmF5ZWQgYnkgdGhlIFN0YXRlLjwvbm90ZT4gWWV0IHRoZXNlIGNhbgogICAgICAgICAgICAgICAgICAgIG5ldmVyIGJlIHdvcnRoIG1vcmUgdGhhbiB0d28gb2JvbHMsIGJ1dCB0aGUgb3RoZXIgcmVmb3JtcywgdG9nZXRoZXIgd2l0aCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBwcm9wb3NlZCwgYXJlIHdvcnRoIGFsbCB0aGUgd2VhbHRoIG9mIHRoZSBHcmVhdCBLaW5n4oCUdGhhdCBhCiAgICAgICAgICAgICAgICAgICAgY2l0eSwgc28gd2VsbCBwcm92aWRlZCB3aXRoIGluZmFudHJ5LCB0cmlyZW1lcywgY2F2YWxyeSwgYW5kIHJldmVudWVzLCBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBkdWx5IG9yZ2FuaXplZCBhbmQgZXF1aXBwZWQuIDwvdHJhbnNsYXRpb24+"
translation['13.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2h5IHRoZW4sIHlvdSBtYXkgYXNrLCBkbyBJIGNob29zZSB0aGUgcHJlc2VudCB0aW1lIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHJlbWFya3M/IEJlY2F1c2UgSSB0aGluayB0aGF0LCBhcyB0aGUgcHJpbmNpcGxlIHRoYXQgYWxsIGNpdGl6ZW5zIHNob3VsZAogICAgICAgICAgICAgICAgICAgIHNlcnZlIGZvciBwYXkgaXMgZGlzcGxlYXNpbmcgdG8gc29tZSBwZW9wbGUsIGFuZCB5ZXQgdGhlIGFkdmFudGFnZSBvZgogICAgICAgICAgICAgICAgICAgIG9yZ2FuaXphdGlvbiBhbmQgZXF1aXBtZW50IGlzIGFwcHJvdmVkIGJ5IGFsbCwgeW91IG91Z2h0IHRvIGJlZ2luIHRoZSBidXNpbmVzcwogICAgICAgICAgICAgICAgICAgIGF0IHRoaXMgcG9pbnQsIGdpdmluZyBldmVyeW9uZSBhIGNoYW5jZSBvZiBzdGF0aW5nIGhpcyB2aWV3cyBvbiB0aGUgc3ViamVjdC4gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhc2Ugc3RhbmRzIHRodXM6IGlmIHlvdSBhcmUgY29udmluY2VkIHRoYXQgbm93IGlzIHRoZSBvcHBvcnR1bml0eSBmb3IgdGhlc2UKICAgICAgICAgICAgICAgICAgICByZWZvcm1zLCBhbGwgdGhpbmdzIHdpbGwgYmUgcmVhZHkgd2hlbiB0aGUgbmVlZCBvZiB0aGVtIGFycml2ZXMsIGJ1dCBpZiB5b3UgcGFzcwogICAgICAgICAgICAgICAgICAgIG92ZXIgdGhlIG9wcG9ydHVuaXR5IGFzIHVuc3VpdGFibGUsIHRoZW4sIGp1c3Qgd2hlbiB5b3Ugd2FudCB0byB1c2UgdGhlbSwgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBjb21wZWxsZWQgdG8gYmVnaW4geW91ciBwcmVwYXJhdGlvbnMuIDwvdHJhbnNsYXRpb24+"
translation['13.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaGFzIGJlZW4gYmVmb3JlIG5vdyByZW1hcmtlZCwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYnkgc29tZQogICAgICAgICAgICAgICAgICAgIHNwZWFrZXLigJRub3Qgb25lIG9mIHRoZSBncmVhdCBib2R5IG9mIGNpdGl6ZW5zLCBidXQgb25lIG9mIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGFyZSBsaWtlbHkgdG8gaGF2ZSBhIGZpdCBpZiB0aGVzZSByZWZvcm1zIGFyZSBjYXJyaWVkCiAgICAgICAgICAgICAgICAgICAgb3V04oCU4oCcV2hhdCBnb29kIGhhdmUgd2UgZXZlciBnb3QgZnJvbSB0aGUgc3BlZWNoZXMgb2YKICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcz8gSGUgY29tZXMgZm9yd2FyZCwgd2hlbmV2ZXIgaGUgdGhpbmtzIHdlbGwsIGZpbGxzIG91ciBlYXJzIHdpdGgKICAgICAgICAgICAgICAgICAgICBwaHJhc2VzLCBkZW5vdW5jZXMgb3VyIHByZXNlbnQgc3RhdGUsIGV4dG9scyBvdXIgYW5jZXN0b3JzLCBhbmQgdGhlbiBkZXNjZW5kcwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHBsYXRmb3JtIGFmdGVyIHJhaXNpbmcgb3VyIGhvcGVzIGFuZCBpbmZsYXRpbmcgb3VyIHByaWRlLuKAnQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgSSBjb3VsZCBvbmx5IGluZHVjZSB5b3UgdG8gYWNjZXB0CiAgICAgICAgICAgICAgICAgICAgYW55IG9mIG15IHByb3Bvc2FscywgSSB0aGluayB0aGF0IEkgc2hvdWxkIGNvbmZlciBzdWNoIGJlbmVmaXRzIG9uIHRoZSBTdGF0ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaWYgSSB0cmllZCB0byBkZXNjcmliZSB0aGVtIG5vdywgbWFueSBvZiB5b3Ugd291bGQgZGlzYmVsaWV2ZSB0aGVtLCBhcwogICAgICAgICAgICAgICAgICAgIGJlaW5nIHRvbyBnb29kIHRvIGJlIHRydWUuIEFuZCB5ZXQgZXZlbiB0aGlzIHRvbyBJIGNvbnNpZGVyIG5vIG1lYW4gYmVuZWZpdCwgaWYKICAgICAgICAgICAgICAgICAgICBJIGFjY3VzdG9tIHlvdSB0byBsaXN0ZW4gdG8gdGhlIGJlc3QgYWR2aWNlLiBGb3IgaGUgd2hvIHdvdWxkIGJlbmVmaXQgdGhlIFN0YXRlLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgbXVzdCBmaXJzdCBwdXJnZSB5b3VyIGVhcnMsIGZvciB0aGV5IGhhdmUgYmVlbiBwb2lzb25lZDsgc28gbWFueSBsaWVzCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB5b3UgYmVlbiBhY2N1c3RvbWVkIHRvIGhlYXLigJRhbnl0aGluZywgaW4gZmFjdCwgcmF0aGVyIHRoYW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYmVzdCBhZHZpY2UuIDwvdHJhbnNsYXRpb24+"
translation['13.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5MZXQgbWUgZ2l2ZSB5b3UgYW4gaW5zdGFuY2UsIGFuZAogICAgICAgICAgICAgICAgICAgIGxldCBubyBvbmUgaW50ZXJydXB0IG1lIHRpbGwgSSBoYXZlIGZpbmlzaGVkIG15IHN0b3J5LiBZb3Uga25vdyB0aGF0IGEgZGF5IG9yCiAgICAgICAgICAgICAgICAgICAgdHdvIGFnbyB0aGUgdHJlYXN1cnkgb2YgdGhlIFBhcnRoZW5vbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgY2hhbWJlciBhdCB0aGUgYmFjayBvZiB0aGUgY2VsbGEgb2YgdGhlIFBhcnRoZW5vbiB3YXMgdXNlZCBhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWFzdXJ5Ljwvbm90ZT4gd2FzIGJyb2tlbiBpbnRvLiBTbyB0aGUgc3BlYWtlcnMgaW4gdGhlIEFzc2VtYmx5LCBvbmUgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxsLCBjcmllZCB0aGF0IHRoZSBkZW1vY3JhY3kgd2FzIG92ZXJ0aHJvd24sIHRoYXQgdGhlIGxhd3Mgd2VyZSBudWxsIGFuZCB2b2lkLAogICAgICAgICAgICAgICAgICAgIGFuZCBzbyBvbi4gQW5kIHlldCwgQXRoZW5pYW5zLCB0aG91Z2ggdGhlIGN1bHByaXRz4oCUbWFyayB3aGV0aGVyIG15CiAgICAgICAgICAgICAgICAgICAgd29yZHMgYXJlIHRydWXigJRkZXNlcnZlZCBkZWF0aCwgaXQgaXMgbm90IHRocm91Z2ggdGhlbSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlbW9jcmFjeSBpcyBlbmRhbmdlcmVkLiBBZ2FpbiwgYSBmZXcgb2FycyB3ZXJlIHN0b2xlbi4g4oCcU2NvdXJnZSB0aGUKICAgICAgICAgICAgICAgICAgICB0aGlldmVzIHRvcnR1cmUgdGhlbSzigJ0gY3JpZWQgdGhlIG9yYXRvcnM7IOKAnHRoZSBkZW1vY3JhY3kgaXMKICAgICAgICAgICAgICAgICAgICBpbiBkYW5nZXIu4oCdIEJ1dCB3aGF0IGlzIG15IG9waW5pb24gSSBzYXksIGxpa2UgdGhlIG90aGVycywgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICB0aGllZiBkZXNlcnZlcyBkZWF0aCwgYnV0IG5vdCB0aGF0IHRoZSBkZW1vY3JhY3kgaXMgZW5kYW5nZXJlZCBieSBzdWNoIG1lYW5zLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVhbCBkYW5nZXIgdG8gZGVtb2NyYWN5IG5vIG9uZSBpcwogICAgICAgICAgICAgICAgICAgIGJvbGQgZW5vdWdoIHRvIG5hbWU7IGJ1dCBJIHdpbGwgbmFtZSBpdC4gSXQgaXMgaW4gZGFuZ2VyIHdoZW4geW91LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhcmUgd3JvbmdseSBsZWQsIHdoZW4gaW4KICAgICAgICAgICAgICAgICAgICBzcGl0ZSBvZiB5b3VyIG51bWJlcnMgeW91IGFyZSBoZWxwbGVzcywgdW5hcm1lZCwgdW5vcmdhbml6ZWQgYW5kIGF0IHZhcmlhbmNlLAogICAgICAgICAgICAgICAgICAgIHdoZW4gbm8gZ2VuZXJhbCBvciBhbnlvbmUgZWxzZSBwYXlzIGFueSBoZWVkIHRvIHlvdXIgcmVzb2x1dGlvbnMsIHdoZW4gbm8gb25lCiAgICAgICAgICAgICAgICAgICAgY2FyZXMgdG8gdGVsbCB5b3UgdGhlIHRydXRoIG9yIHNldCB5b3UgcmlnaHQsIHdoZW4gbm8gb25lIG1ha2VzIGFuIGVmZm9ydCB0bwogICAgICAgICAgICAgICAgICAgIHJlbWVkeSB0aGlzIHN0YXRlIG9mIHRoaW5ncy4gQW5kIHRoYXQgaXMgd2hhdCBhbHdheXMgaGFwcGVucyBub3cuIDwvdHJhbnNsYXRpb24+"
translation['13.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXMsIGJ5IGhlYXZlbnMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCB0aGVyZSBhcmUgb3RoZXIgcGhyYXNlcywgZmFsc2UKICAgICAgICAgICAgICAgICAgICBhbmQgaW5qdXJpb3VzIHRvIHRoZSBTdGF0ZSwgdGhhdCBoYXZlIHBhc3NlZCBpbnRvIHlvdXIgY29tbW9uIHNwZWVjaCwgc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIOKAnEluIHRoZSBsYXctY291cnRzIGxpZXMgeW91ciBzYWx2YXRpb24s4oCdIGFuZCDigJxJdAogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBiYWxsb3QtYm94IHRoYXQgbXVzdCBzYXZlIHRoZSBTdGF0ZS7igJ0gSSBrbm93IHRoYXQgdGhlc2UgY291cnRzCiAgICAgICAgICAgICAgICAgICAgYXJlIHNvdmVyZWlnbiB0byB1cGhvbGQgdGhlIHJpZ2h0cyBvZiBjaXRpemVuIGFnYWluc3QgY2l0aXplbiwgYnV0IGl0IGlzIGJ5IGFybXMKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBtdXN0IGNvbnF1ZXIgdGhlIGVuZW15LCBhbmQgdXBvbiBhcm1zIGRlcGVuZHMgdGhlIHNhZmV0eSBvZiB0aGUgU3RhdGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgcmVzb2x1dGlvbnMgd2lsbCBub3QgZ2l2ZSB5b3VyIG1lbgogICAgICAgICAgICAgICAgICAgIHZpY3RvcnkgaW4gYmF0dGxlLCBidXQgdGhvc2Ugd2hvIHdpdGggdGhlIGhlbHAgb2YgYXJtcyBjb25xdWVyIHRoZSBlbmVteSBzaGFsbAogICAgICAgICAgICAgICAgICAgIHdpbiBmb3IgeW91IHBvd2VyIGFuZCBzZWN1cml0eSB0byBwYXNzIHJlc29sdXRpb25zIGFuZCB0byBkbyB3aGF0IHlvdSB3aWxsLiBGb3IKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZmllbGQgeW91IG91Z2h0IHRvIGJlIHRlcnJpYmxlLCBidXQgaW4gdGhlIGNvdXJ0cyBzeW1wYXRoZXRpYy4gPC90cmFuc2xhdGlvbj4="
translation['13.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgbXkgc3BlZWNoZXMgc2VlbSB0bwogICAgICAgICAgICAgICAgICAgIGJlIGdyZWF0ZXIgdGhhbiBteSBvd24gd29ydGgsIHRoYXQgaXMgaXRzZWxmIGEgdmlydHVlIGluIHRoZW0uIEZvciBhIHNwZWVjaCwgaWYKICAgICAgICAgICAgICAgICAgICBpdCBpcyB0byBiZSBkZWxpdmVyZWQgb24gYmVoYWxmIG9mIHRoaXMgZ3JlYXQgY2l0eSBhbmQgb3VyIHdpZGUgaW50ZXJlc3RzLCBvdWdodAogICAgICAgICAgICAgICAgICAgIGFsd2F5cyB0byBhcHBlYXIgZ3JlYXRlciB0aGFuIHRoZSBpbmRpdmlkdWFsIHdobyB1dHRlcnMgaXQ7IGl0IG91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgYXBwcm94aW1hdGUgdG8geW91ciByZXB1dGF0aW9uLCBub3QgdG8gdGhlIHJlcHV0YXRpb24gb2YgdGhlIHNwZWFrZXIuIEJ1dCBub25lCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG1lbiB3aG9tIHlvdSBkZWxpZ2h0IHRvIGhvbm9yIHNwZWFrcyBsaWtlIHRoYXQsIGFuZCBJIHdpbGwgdGVsbCB5b3Ugd2hhdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGV4Y3VzZSBpcy4gPC90cmFuc2xhdGlvbj4="
translation['13.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5NZW4gd2hvIGFpbSBhdCBvZmZpY2UgYW5kIGF0CiAgICAgICAgICAgICAgICAgICAgb2ZmaWNpYWwgcmFuayBnbyB0byBhbmQgZnJvIGNyaW5naW5nIHRvIHRoZSBmYXZvdXJzIG9mIHRoZSBlbGVjdG9yYXRlOyBlYWNoCiAgICAgICAgICAgICAgICAgICAgb25lJ3MgYW1iaXRpb24gaXMgdG8gam9pbiB0aGUgc2FjcmVkIHJhbmtzIG9mIHRoZSBnZW5lcmFscywgbm90IHRvIGRvIGEgbWFuJ3MKICAgICAgICAgICAgICAgICAgICB3b3JrLiBJZiBhbnlvbmUgaXMgcmVhbGx5IGNhcGFibGUgb2YgdW5kZXJ0YWtpbmcgYSBqb2IsIGhlIHRoaW5rcyB0aGF0IGJ5CiAgICAgICAgICAgICAgICAgICAgZXhwbG9pdGluZyB0aGUgcmVwdXRhdGlvbiBhbmQgcmVub3duIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgcHJvZml0aW5nIGJ5IHRoZSBhYnNlbmNlIG9mIG9wcG9zaXRpb24sIGhvbGRpbmcgb3V0CiAgICAgICAgICAgICAgICAgICAgaG9wZXMgdG8geW91IGFuZCBub3RoaW5nIGJ1dCBob3BlcywgaGUgd2lsbCBiZSBzb2xlIGluaGVyaXRvciBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlc+KAlGFuZCBzbyBoZSBpczsgYnV0IGlmIHlvdSBhY3QgYXMgeW91ciBvd24gYWdlbnRzIGluIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgY2FzZSwgaGUgd2lsbCBvbmx5IGhhdmUgaGlzIGVxdWFsIHNoYXJlIHdpdGggdGhlIHJlc3QsIGJvdGggaW4gdGhlIGxhYm91cnMgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxzbyBpbiB0aGVpciByZXN1bHRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['13.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcG9saXRpY2lhbnMsCiAgICAgICAgICAgICAgICAgICAgYWJzb3JiZWQgaW4gdGhlaXIgcHJvZmVzc2lvbiwgbmVnbGVjdCB0byBkZXZpc2UgdGhlIGJlc3QgcG9saWN5IGZvciB5b3UgYW5kIGhhdmUKICAgICAgICAgICAgICAgICAgICBqb2luZWQgdGhlIHJhbmtzIG9mIHRoZSBvZmZpY2Utc2Vla2VyczsgYW5kIHlvdSBjb25kdWN0IHlvdXIgcGFydHktcG9saXRpY3MgYXMKICAgICAgICAgICAgICAgICAgICB5b3UgdXNlZCB0byBjb25kdWN0IHlvdXIgdGF4LXBheWluZ+KAlGJ5IHN5bmRpY2F0ZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIuMjkiIHZhbGlkPSJ5ZXMiPkRlbS4gMi4yOTwvYmlibD4uPC9ub3RlPiBUaGVyZSBpcyBhbgogICAgICAgICAgICAgICAgICAgIG9yYXRvciBmb3IgY2hhaXJtYW4sIHdpdGggYSBnZW5lcmFsIHVuZGVyIGhpbSwgYW5kIHRocmVlIGh1bmRyZWQgdG8gZG8gdGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdXRpbmcuIFRoZSByZXN0IG9mIHlvdSBhcmUgYXR0YWNoZWQgbm93IHRvIG9uZSBwYXJ0eSBhbmQgbm93IHRvIGFub3RoZXIuCiAgICAgICAgICAgICAgICAgICAgSGVuY2UgYWxsIHRoYXQgeW91IGdhaW4gaXMgdGhhdCBTby1hbmQtc28gaGFzIGEgcHVibGljIHN0YXR1ZSBhbmQgU28tYW5kLXNvCiAgICAgICAgICAgICAgICAgICAgbWFrZXMgaGlzIGZvcnR1bmXigJRqdXN0IG9uZSBvciB0d28gbWVuIHByb2ZpdGluZyBhdCB0aGUgZXhwZW5zZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBTdGF0ZS4gVGhlIHJlc3Qgb2YgeW91IGFyZSBpZGxlIHdpdG5lc3NlcyBvZiB0aGVpciBwcm9zcGVyaXR5LCBzdXJyZW5kZXJpbmcgdG8KICAgICAgICAgICAgICAgICAgICB0aGVtLCBmb3IgdGhlIHNha2Ugb2YgYW4gZWFzeSBsaWZlIGZyb20gZGF5IHRvIGRheSwgdGhlIGdyZWF0IGFuZCBnbG9yaW91cwogICAgICAgICAgICAgICAgICAgIHByb3NwZXJpdHkgd2hpY2ggaXMgeW91cnMgYnkgaW5oZXJpdGFuY2UuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMi4yOSIgdmFsaWQ9InllcyI+RGVtLiAyLjI5PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['13.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WWV0IGNvbnNpZGVyIGhvdyB0aGluZ3Mgd2VyZSBtYW5hZ2VkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGRheXMgb2YgeW91ciBhbmNlc3RvcnMsIGZvciB5b3UgbmVlZCBub3QgZ28gYWJyb2FkIGZvciBleGFtcGxlcyB0byB0ZWFjaCB5b3UKICAgICAgICAgICAgICAgICAgICB5b3VyIGR1dHkuIFRha2UgVGhlbWlzdG9jbGVzLCB3aG8gd2FzIHlvdXIgZ2VuZXJhbCBpbiB0aGUgc2VhLWZpZ2h0IGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4sIGFuZCBNaWx0aWFkZXMsIHdobwogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlZCBhdCBNYXJhdGhvbiwgYW5kIG1hbnkgbW9yZSB3aG9zZSBnb29kIHNlcnZpY2VzIHdlcmUgZmFyIGdyZWF0ZXIgdGhhbgogICAgICAgICAgICAgICAgICAgIHRob3NlIG9mIG91ciBwcmVzZW50IGdlbmVyYWxzOiB2ZXJpbHkgb3VyIGFuY2VzdG9ycyBwdXQgdXAgbm8gYnJvbnplIHN0YXR1ZXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGVtLCBidXQgcmV3YXJkZWQgdGhlbSBhcyBtZW4gaW4gbm8gd2F5IHN1cGVyaW9yIHRvIHRoZW1zZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['13.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdHJ1bHksIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoZXkgbmV2ZXIgcm9iYmVkIHRoZW1zZWx2ZXMgb2YgYW55IG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRzLCBub3Igd291bGQgYW55b25lIGRyZWFtIG9mIHNwZWFraW5nIG9mIFRoZW1pc3RvY2xlcycgZmlnaHQgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjM0MCI+U2FsYW1pczwvcGxhY2VOYW1lPiwgYnV0IG9mIHRoZSBBdGhlbmlhbnMnCiAgICAgICAgICAgICAgICAgICAgZmlnaHQsIG5vciBvZiBNaWx0aWFkZXMnIGJhdHRsZSBhdCBNYXJhdGhvbiwgYnV0IG9mIHRoZSBBdGhlbmlhbnMnIGJhdHRsZS4gQnV0CiAgICAgICAgICAgICAgICAgICAgbm93IHdlIG9mdGVuIGhlYXIgaXQgc2FpZCB0aGF0IFRpbW90aGV1cyB0b29rIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwODg2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA4ODYiPkNvcmN5cmE8L3BsYWNlTmFtZT4sIHRoYXQgSXBoaWNyYXRlcyBjdXQgdXAgdGhlIFNwYXJ0YW4gZGV0YWNobWVudCwgb3IgdGhhdAogICAgICAgICAgICAgICAgICAgIENoYWJyaWFzIHdvbiB0aGUgc2VhLWZpZ2h0IG9mZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDUzIj5OYXhvczwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gMzc2LCAzOTAsYW5kIDM3NgogICAgICAgICAgICAgICAgICAgICAgICByZXNwZWN0aXZlbHkuPC9ub3RlPiBGb3IgeW91IHNlZW0gdG8gd2FpdmUgeW91ciBvd24gcmlnaHQgdG8gdGhlc2Ugc3VjY2Vzc2VzCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGV4dHJhdmFnYW50IGhvbm9ycyB3aGljaCB5b3UgaGF2ZSBiZXN0b3dlZCBvbiBlYWNoIG9mIHRoZXNlIG9mZmljZXJzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5SZXdhcmRzIHRvIGNpdGl6ZW5zLCByaWdodGx5IHRodXMgZ3JhbnRlZAogICAgICAgICAgICAgICAgICAgIGJ5IG91ciBhbmNlc3RvcnMsIGFyZSB3cm9uZ2x5IGdyYW50ZWQgYnkgeW91LiBCdXQgaG93IGFib3V0IGZvcmVpZ25lcnM/IFdoZW4KICAgICAgICAgICAgICAgICAgICBNZW5vIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzk3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3OTciPlBoYXJzYWx1czwvcGxhY2VOYW1lPiBnYXZlIHR3ZWx2ZSB0YWxlbnRzCiAgICAgICAgICAgICAgICAgICAgb2Ygc2lsdmVyIHRvd2FyZHMgdGhlIHdhciBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVpb24iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVpb24iPkVpb248L3BsYWNlTmFtZT4gbmVhcgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UHJlc3VtYWJseSBpbiA0MjQsIGJ1dCBUaGVtaXN0b2NsZXMgZG9lcyBub3QKICAgICAgICAgICAgICAgICAgICAgICAgbWVudGlvbiBpdC4gVGhlIGhpc3RvcmljYWwgZXhhbXBsZXMgaGVyZSBhcmUgYm9ycm93ZWQgZnJvbSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIzIiB2YWxpZD0ieWVzIj5EZW0uIDIzPC9iaWJsPjwvbm90ZT4gYW5kIHN1cHBvcnRlZCB1cyB3aXRoIHR3byBodW5kcmVkIGNhdmFscnkgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgb3duIHZhc3NhbHMsIG91ciBhbmNlc3RvcnMgZGlkIG5vdCB2b3RlIGhpbSB0aGUgY2l0aXplbnNoaXAsIGJ1dCBvbmx5IGdhdmUgaGltCiAgICAgICAgICAgICAgICAgICAgaW1tdW5pdHkgZnJvbSB0YXhlcy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMyIgdmFsaWQ9InllcyI+RGVtLiAyMzwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['13.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5PbiBhbiBlYXJsaWVyIG9jY2FzaW9uLAogICAgICAgICAgICAgICAgICAgIHdoZW4gUGVyZGljY2FzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BY2NvcmRpbmcgdG8gSGVyb2RvdHVzLCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFRocmFjaWFucywgbm90IHRoZSBNYWNlZG9uaWFucywgd2hvIGhhcmFzc2VkIHRoZSByZXRyZWF0aW5nIFBlcnNpYW5zLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgICAgICBBbGV4YW5kZXIsIHRoZSBmYXRoZXIgb2YgUGVyZGljY2FzLjwvbm90ZT4gd2hvIHdhcyBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgQWxleGFuZGVyLCB0aGUgZmF0aGVyIG9mIFBlcmRpY2Nhcy48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gYXQgdGhlIHRpbWUgb2YgdGhlIFBlcnNpYW4KICAgICAgICAgICAgICAgICAgICBpbnZhc2lvbnMsIGRlc3Ryb3llZCB0aGUgYmFyYmFyaWFucyB3aG8gd2VyZSByZXRyZWF0aW5nIGFmdGVyIHRoZWlyIGRlZmVhdCBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBsYXRhZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBsYXRhZWEiPlBsYXRhZWE8L3BsYWNlTmFtZT4gYW5kIHNvIGNvbXBsZXRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBkaXNjb21maXR1cmUgb2YgdGhlIEdyZWF0IEtpbmcsIHRoZXkgZGlkIG5vdCB2b3RlIGhpbSB0aGUgY2l0aXplbnNoaXAsIGJ1dCBvbmx5CiAgICAgICAgICAgICAgICAgICAgZ2F2ZSBoaW0gaW1tdW5pdHkgZnJvbSB0YXhlczsgYmVjYXVzZSwgSSBwcmVzdW1lLCB0aGV5IHJlZ2FyZGVkIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgIGNvdW50cnkgYXMgZ3JlYXQsIGdsb3Jpb3VzLCBhbmQgdmVuZXJhYmxlLCBhbmQgYXMgc29tZXRoaW5nIGdyZWF0ZXIgdGhhbiBhbnkKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlIHJlbmRlcmVkLiBCdXQgbm93LCBBdGhlbmlhbnMsIHlvdSBtYWtlIGNpdGl6ZW5zIG9mIHRoZSBzY3VtIG9mIG1hbmtpbmQsCiAgICAgICAgICAgICAgICAgICAgbWVuaWFsIHNvbnMgb2YgbWVuaWFsIGZhdGhlcnMsIGNoYXJnaW5nIGEgcHJpY2UgZm9yIGl0IGFzIGZvciBhbnkgb3RoZXIKICAgICAgICAgICAgICAgICAgICBjb21tb2RpdHkuIDwvdHJhbnNsYXRpb24+"
translation['13.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgaGF2ZSBnb3QgaW50byB0aGUgaGFiaXQgb2YKICAgICAgICAgICAgICAgICAgICBhY3RpbmcgdGh1cywgbm90IGJlY2F1c2UgaW4gYWJpbGl0eSB5b3UgYXJlIGluZmVyaW9yIHRvIHlvdXIgYW5jZXN0b3JzLCBidXQKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGl0IHdhcyBzZWNvbmQgbmF0dXJlIHdpdGggdGhlbSB0byBoYXZlIGEgaGlnaCBvcGluaW9uIG9mIHRoZW1zZWx2ZXMsCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgeW91LCBBdGhlbmlhbnMsIGhhdmUgbG9zdCB0aGF0IHZpcnR1ZS4gWW91IGNhbm5vdCwgSSBzdXBwb3NlLCBoYXZlIGEgcHJvdWQKICAgICAgICAgICAgICAgICAgICBhbmQgY2hpdmFscm91cyBzcGlyaXQsIGlmIHlvdXIgY29uZHVjdCBpcyBtZWFuIGFuZCBwYWx0cnksIGFueSBtb3JlIHRoYW4geW91cgogICAgICAgICAgICAgICAgICAgIHNwaXJpdCBjYW4gYmUgbWVhbiBhbmQgaHVtYmxlLCBpZiB5b3VyIGNvbmR1Y3QgaXMgaG9ub3JhYmxlIGFuZCBnbG9yaW91czsgZm9yCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgYSBtYW4ncyBwdXJzdWl0cyBhcmUsIHN1Y2ggbXVzdCBiZSBoaXMgc3Bpcml0LiA8L3RyYW5zbGF0aW9uPg=="
translation['13.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHJlZmxlY3Qgb24gd2hhdAogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlIG5hbWVkIGFzIHRoZSBvdXRzdGFuZGluZyBhY2hpZXZlbWVudHMgb2YgeW91ciBhbmNlc3RvcnMgYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcywgaWYgaGFwbHkgdGhlIGNvbXBhcmlzb24gbWF5IHlldCBlbmFibGUgeW91IHRvIGJlY29tZSB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIG1hc3RlcnMuIEZvciBmaXZlIGFuZCBmb3J0eSB5ZWFyczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CZXR3ZWVuIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQZXJzaWFuIGFuZCBQZWxvcG9ubmVzaWFuIHdhcnMuPC9ub3RlPiB0aGV5IGNvbW1hbmRlZCB0aGUgd2lsbGluZyBvYmVkaWVuY2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgR3JlZWtzOyBtb3JlIHRoYW4gdGVuIHRob3VzYW5kIHRhbGVudHMgZGlkIHRoZXkgYWNjdW11bGF0ZSBpbiBvdXIKICAgICAgICAgICAgICAgICAgICBBY3JvcG9saXM7IG1hbnkgaG9ub3JhYmxlIHRyb3BoaWVzIGZvciB2aWN0b3JpZXMgb24gc2VhIGFuZCBvbiBsYW5kIGRpZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZXJlY3QsIGluIHdoaWNoIGV2ZW4geWV0IHdlIHRha2UgYSBwcmlkZS4gWWV0IHJlbWVtYmVyIHRoYXQgdGhleSBlcmVjdGVkIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgbm90IHRoYXQgd2UgbWlnaHQgd29uZGVyIGFzIHdlIGdhemUgYXQgdGhlbSwgYnV0IHRoYXQgd2UgbWlnaHQgYWxzbyBpbWl0YXRlIHRoZQogICAgICAgICAgICAgICAgICAgIHZpcnR1ZXMgb2YgdGhlIGRlZGljYXRvcnMuIDwvdHJhbnNsYXRpb24+"
translation['13.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGRpZCBvdXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnM7IGJ1dCBhcyBmb3IgdXMsIHdobyBoYXZlIGdhaW5lZCwgYXMgeW91IGFsbCBzZWUsIGEgY2xlYXIgZmllbGQsCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXIgd2hldGhlciB3ZSBjYW4gbWF0Y2ggdGhlbS4gSGF2ZSB3ZSBub3Qgd2FzdGVkIG1vcmUgdGhhbiBmaWZ0ZWVuIGh1bmRyZWQKICAgICAgICAgICAgICAgICAgICB0YWxlbnRzIG9uIHRoZSBuZWVkeSBjb21tdW5pdGllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk5vIG9uZSBrbm93cyB0byB3aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgcmVmZXJzOyBidXQgdGhlIHBhc3NhZ2UgaXMgb25seSBhIHBhcm9keSBvZiB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhpcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9seW50aGlhYy48L3RpdGxlPjwvbm90ZT4gSGF2ZSB3ZSBub3Qgc3F1YW5kZXJlZCBvdXIgcHJpdmF0ZSBlc3RhdGVzLAogICAgICAgICAgICAgICAgICAgIG91ciBwdWJsaWMgZnVuZHMsIGFuZCB0aGUgY29udHJpYnV0aW9ucyBvZiBvdXIgYWxsaWVzPyBIYXZlIG5vdCB0aGUgYWxsaWVzCiAgICAgICAgICAgICAgICAgICAgZ2FpbmVkIGluIHdhciBiZWVuIGxvc3QgaW4gdGhlIHBlYWNlPyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGlyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgT2x5bnRoaWFjLjwvdGl0bGU+PC90cmFuc2xhdGlvbj4="
translation['13.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGl0CiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIHNhaWQsIGluIHRoZXNlIHJlc3BlY3RzIGFsb25lIHRoaW5ncyB3ZXJlIGJldHRlciB0aGVuIHRoYW4gbm93LCBidXQgaW4KICAgICAgICAgICAgICAgICAgICBvdGhlciByZXNwZWN0cyB3b3JzZS4gRmFyIGZyb20gaXQ7IGJ1dCBsZXQgdXMgZXhhbWluZSBhbnkgaW5zdGFuY2UgeW91IHBsZWFzZS4KICAgICAgICAgICAgICAgICAgICBUaGUgYnVpbGRpbmdzIHdoaWNoIHRoZXkgbGVmdCBiZWhpbmQgdGhlbSB0byBhZG9ybiBvdXIgY2l0eeKAlHRlbXBsZXMsCiAgICAgICAgICAgICAgICAgICAgaGFyYm9ycywgYW5kIHRoZWlyIGFjY2Vzc29yaWVz4oCUd2VyZSBzbyBncmVhdCBhbmQgc28gZmFpciB0aGF0IHdlIHdobwogICAgICAgICAgICAgICAgICAgIGNvbWUgYWZ0ZXIgbXVzdCBkZXNwYWlyIG9mIGV2ZXIgc3VycGFzc2luZyB0aGVtOyB0aGUgUHJvcHlsYWVhIHlvbmRlciwgdGhlCiAgICAgICAgICAgICAgICAgICAgZG9ja3MsIHRoZSBwb3J0aWNvZXMgYW5kIHRoZSByZXN0LCB3aXRoIHdoaWNoIHRoZXkgYmVhdXRpZmllZCB0aGUgY2l0eSB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlcXVlYXRoZWQgdG8gdXMuIDwvdHJhbnNsYXRpb24+"
translation['13.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHByaXZhdGUgaG91c2VzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhvc2Ugd2hvIHJvc2UgdG8gcG93ZXIgd2VyZSBzbyBtb2Rlc3QgYW5kIHNvIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgc3R5bGUgb2YKICAgICAgICAgICAgICAgICAgICBvdXIgY29uc3RpdHV0aW9uIHRoYXQgdGhlIGhvbWVzIG9mIHRoZWlyIGZhbW91cyBtZW4sIG9mIFRoZW1pc3RvY2xlcyBhbmQgQ2ltb24KICAgICAgICAgICAgICAgICAgICBhbmQgQXJpc3RpZGVzLCBhcyBhbnkgb2YgeW91IGNhbiBzZWUgdGhhdCBrbm93cyB0aGVtLCBhcmUgbm90IGEgd2hpdCBtb3JlCiAgICAgICAgICAgICAgICAgICAgc3BsZW5kaWQgdGhhbiB0aG9zZSBvZiB0aGVpciBuZWlnaGJvcnMuIDwvdHJhbnNsYXRpb24+"
translation['13.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB0b2RheSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hpbGUgb3VyCiAgICAgICAgICAgICAgICAgICAgcHVibGljIHdvcmtzIGFyZSBjb25maW5lZCB0byB0aGUgcHJvdmlzaW9uIG9mIHJvYWRzIGFuZCBmb3VudGFpbnMsIHdoaXRld2FzaCBhbmQKICAgICAgICAgICAgICAgICAgICBiYWxkZXJkYXNoIO+8iGFuZCBJIGJsYW1lLCBub3QgdGhvc2Ugd2hvIGludHJvZHVjZWQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBpbXByb3ZlbWVudHPigJRmYXIgZnJvbSBpdCHigJRidXQgeW91LCBpZiB5b3UgaW1hZ2luZSB0aGF0IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYXJlIGFsbCB0aGF0IGlzIHJlcXVpcmVkIG9mIHlvde+8iSwgcHJpdmF0ZSBpbmRpdmlkdWFscywgd2hvIGNvbnRyb2wgYW55CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIFN0YXRlLWZ1bmRzLCBoYXZlIHNvbWUgb2YgdGhlbSByZWFyZWQgcHJpdmF0ZSBob3VzZXMsIG5vdCBtZXJlbHkgZmluZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIHRoZSBtYWpvcml0eSwgYnV0IG1vcmUgc3RhdGVseSB0aGFuIG91ciBwdWJsaWMgZWRpZmljZXMsIGFuZCBvdGhlcnMgaGF2ZQogICAgICAgICAgICAgICAgICAgIHB1cmNoYXNlZCBhbmQgY3VsdGl2YXRlZCBlc3RhdGVzIG1vcmUgdmFzdCB0aGFuIHRoZXkgZXZlciBkcmVhbWVkIG9mIGJlZm9yZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2F1c2Ugb2YgYWxsIHRoaXMgY2hhbmdlIGlzIHRoYXQgdGhlbgogICAgICAgICAgICAgICAgICAgIHRoZSBwZW9wbGUgY29udHJvbGxlZCBhbmQgZGlzcGVuc2VkIGV2ZXJ5dGhpbmcsIGFuZCB0aGUgcmVzdCB3ZXJlIHdlbGwgY29udGVudAogICAgICAgICAgICAgICAgICAgIHRvIGFjY2VwdCBhdCB0aGVpciBoYW5kIGhvbm9yIGFuZCBhdXRob3JpdHkgYW5kIHJld2FyZDsgYnV0IG5vdywgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgY29udHJhcnksIHRoZSBwb2xpdGljaWFucyBob2xkIHRoZSBwdXJzZS1zdHJpbmdzIGFuZCBtYW5hZ2UgZXZlcnl0aGluZywgd2hpbGUKICAgICAgICAgICAgICAgICAgICB0aGUgcGVvcGxlIGFyZSBpbiB0aGUgcG9zaXRpb24gb2YgbGFja2V5cyBhbmQgaGFuZ2Vycy1vbiwgYW5kIHlvdSBhcmUgY29udGVudCB0bwogICAgICAgICAgICAgICAgICAgIGFjY2VwdCB3aGF0ZXZlciB5b3VyIG1hc3RlcnMgZG9sZSBvdXQgdG8geW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['13.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCwgaW4gY29uc2VxdWVuY2UsIGlzIHRoZSBzdGF0ZSBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgYWZmYWlycyB0aGF0IGlmIGFueW9uZSByZWFkIG91dCB5b3VyIHJlc29sdXRpb25zIGFuZCB0aGVuIHdlbnQgb24gdG8KICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSB5b3VyIHBlcmZvcm1hbmNlcywgbm90IGEgc291bCB3b3VsZCBiZWxpZXZlIHRoYXQgdGhlIHNhbWUgbWVuIHdlcmUKICAgICAgICAgICAgICAgICAgICByZXNwb25zaWJsZSBmb3IgdGhlIG9uZSBhbmQgZm9yIHRoZSBvdGhlci4gVGFrZSBmb3IgaW5zdGFuY2UgdGhlIGRlY3JlZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBwYXNzZWQgYWdhaW5zdCB0aGUgYWNjdXJzZWQgTWVnYXJpYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5OZWl0aGVyIHRoaXMgbm9yIHRoZSBmb2xsb3dpbmcgYWxsdXNpb24gY2FuIGJlIGRldGVybWluZWQgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBjZXJ0YWludHkuPC9ub3RlPiB3aGVuIHRoZXkgYXBwcm9wcmlhdGVkIHRoZSBzYWNyZWQgZGVtZXNuZSwgdGhhdCB5b3Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbWFyY2ggb3V0IGFuZCBwcmV2ZW50IGl0IGFuZCBmb3JiaWQgaXQ7IGluIGZhdm91ciBvZiB0aGUgUGhsaWFzaWFucywgd2hlbiB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSBleGlsZWQgdGhlIG90aGVyIGRheSwgdGhhdCB5b3Ugc2hvdWxkIGhlbHAgdGhlbSBhbmQgbm90IGdpdmUgdGhlbSB1cCB0bwogICAgICAgICAgICAgICAgICAgIHRoZWlyIG11cmRlcmVycywgYW5kIHNob3VsZCBjYWxsIGZvciB2b2x1bnRlZXJzIGZyb20gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['13.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0LCBBdGhlbmlhbnMsIHdhcyBhbGwgdmVyeSBub2JsZSBhbmQgcmlnaHQgYW5kIHdvcnRoeSBvZiBvdXIgY2l0eTsgYnV0IHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3VsdGFudCBhY3Rpb24gd2FzIHNpbXBseSBvZiBubyBhY2NvdW50LiBTbyB5b3VyIGhvc3RpbGl0eSBpcyBleHByZXNzZWQgaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIGRlY3JlZXMsIGJ1dCBhY3Rpb24gaXMgYmV5b25kIHlvdXIgY29udHJvbC4gWW91ciBkZWNyZWVzIGFjY29yZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIHRyYWRpdGlvbnMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgeW91cgogICAgICAgICAgICAgICAgICAgIHBvd2VycyBiZWFyIG5vIHJlbGF0aW9uIHRvIHlvdXIgZGVjcmVlcy4gPC90cmFuc2xhdGlvbj4="
translation['13.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5JLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIsIHdvdWxkIGFkdmlzZSB5b3XigJRkbyBub3QgYmUgYW5ncnkgd2l0aCBtZeKAlGVpdGhlciB0bwogICAgICAgICAgICAgICAgICAgIGh1bWJsZSB5b3Vyc2VsdmVzIGFuZCBiZSBjb250ZW50IHRvIG1pbmQgeW91ciBvd24gYWZmYWlycywgb3IgZWxzZSB0byBnZXQgcmVhZHkKICAgICAgICAgICAgICAgICAgICBhIG1vcmUgcG93ZXJmdWwgZm9yY2UuIElmIEkgZmVsdCBzdXJlIHRoYXQgeW91IHdlcmUgU2lwaG5pYW5zIG9yIEN5dGhuaWFuczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA1NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDU0Ij5TaXBobm9zPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBDeXRobm9zIGFyZSB0d28gb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjcwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNzAiPkN5Y2xhZGVzPC9wbGFjZU5hbWU+LCBTLkUuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gUGVyaGFwcyB0aGUgc3BlYWtlciByZW1lbWJlcmVkIHRoZSByZXRvcnQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgVGhlbWlzdG9jbGVzIHRvIHRoZSBtYW4gb2YgU2VyaXBob3Mg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGhlbS4gMTgiIHZhbGlkPSJ5ZXMiPlBsdXQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGVtLiAxODwvYmlibD7vvIkuPC9ub3RlPiBvciBwZW9wbGUgb2YgdGhhdCBzb3J0LCBJIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGNvdW5zZWwgeW91IHRvIGJlIGxlc3MgcHJvdWQsIGJ1dCBzaW5jZSB5b3UgYXJlIEF0aGVuaWFucywgSSB1cmdlIHlvdSB0byBnZXQKICAgICAgICAgICAgICAgICAgICB5b3VyIGZvcmNlIHJlYWR5LiBGb3IgaXQgd291bGQgYmUgYSBkaXNncmFjZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDU0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwNTQiPlNpcGhub3M8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgYW5kIEN5dGhub3MgYXJlIHR3byBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEyNzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTI3MCI+Q3ljbGFkZXM8L3BsYWNlTmFtZT4sIFMuRS4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBQZXJoYXBzIHRoZSBzcGVha2VyIHJlbWVtYmVyZWQgdGhlIHJldG9ydCBvZgogICAgICAgICAgICAgICAgICAgICAgICBUaGVtaXN0b2NsZXMgdG8gdGhlIG1hbiBvZiBTZXJpcGhvcyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaGVtLiAxOCIgdmFsaWQ9InllcyI+UGx1dC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZW0uIDE4PC9iaWJsPu+8iS48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGEgZGlzZ3JhY2UgdG8gZGVzZXJ0IHRoYXQgcG9zdCBvZgogICAgICAgICAgICAgICAgICAgIGhvbm9yIHdoaWNoIHlvdXIgYW5jZXN0b3JzIGJlcXVlYXRoZWQgdG8geW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['13.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYmVzaWRlcyBpdCBpcyBubyBsb25nZXIgaW4geW91ciBwb3dlciwgZXZlbiBpZiB5b3Ugd2lzaGVkIGl0LCB0byBob2xkCiAgICAgICAgICAgICAgICAgICAgYWxvb2YgZnJvbSBHcmVlayBhZmZhaXJzLiBGb3IgeW91IGhhdmUgbWFueSBleHBsb2l0cyB0byB5b3VyIGNyZWRpdCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGVhcmxpZXN0IHRpbWVzLCBhbmQgaXQgd291bGQgYmUgZGlzZ3JhY2VmdWwgdG8gYWJhbmRvbiB0aGUgZnJpZW5kcyB5b3UgaGF2ZSwKICAgICAgICAgICAgICAgICAgICB3aGlsZSBpdCBpcyBpbXBvc3NpYmxlIHRvIHRydXN0IHlvdXIgZW5lbWllcyBhbmQgYWxsb3cgdGhlbSB0byBncm93IHBvd2VyZnVsLiBJbgogICAgICAgICAgICAgICAgICAgIHNob3J0LCB5b3Ugc3RhbmQgaW4gdGhlIHNhbWUgcG9zaXRpb24gYXMgeW91ciBzdGF0ZXNtZW4gc3RhbmQgdG8KICAgICAgICAgICAgICAgICAgICB5b3XigJR0aGV5IGNhbm5vdCByZXRpcmUgd2hlbiB0aGV5IHdvdWxkOyBmb3IgeW91IGFyZSBkZWZpbml0ZWx5CiAgICAgICAgICAgICAgICAgICAgaW52b2x2ZWQgaW4gdGhlIHBvbGl0aWNzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.36'] = ""
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaG9zZSB3aG8gcHJhaXNlCiAgICAgICAgICAgICAgICAgICAgeW91ciBhbmNlc3RvcnMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHNlZW0KICAgICAgICAgICAgICAgICAgICB0byBtZSB0byBjaG9vc2UgYW4gYWNjZXB0YWJsZSB0aGVtZSwgd2hpY2ggeWV0IGZhaWxzIHRvIGRvIGFueSByZWFsIHNlcnZpY2UgdG8KICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG9tIHRoZXkgZXVsb2dpemU7IGZvciB3aGVuIHRoZXkgYXR0ZW1wdCB0byBzcGVhayBhYm91dCBhY2hpZXZlbWVudHMgdG8KICAgICAgICAgICAgICAgICAgICB3aGljaCBubyB3b3JkcyBjb3VsZCBwb3NzaWJseSBkbyBqdXN0aWNlLCB0aGV5IGVhcm4gZm9yIHRoZW1zZWx2ZXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBvZiBjbGV2ZXIgc3BlYWtlcnMsIGJ1dCBsZWF2ZSB0aGVpciBoZWFyZXJzIHdpdGggYSBsb3dlciBlc3RpbWF0ZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBtZXJpdHMgb2YgdGhvc2UgZmFtb3VzIG1lbi4gSW5kZWVkLCBJIHRoaW5rIHRoZSBiZXN0IHRlc3RpbW9ueSB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIG1lcml0cyBpcyB0aGUgbGVuZ3RoIG9mIHRpbWUgdGhhdCBoYXMgZWxhcHNlZCwgZHVyaW5nIHdoaWNoIG5vIG90aGVyIG1lbiBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBhYmxlIHRvIHN1cnBhc3MgdGhlaXIgYWNoaWV2ZW1lbnRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBteQogICAgICAgICAgICAgICAgICAgIG93biBwYXJ0LCBob3dldmVyLCBJIHNoYWxsIGNvbmZpbmUgbXlzZWxmIHRvIHBvaW50aW5nIG91dCBob3cgeW91IGNhbiBiZXN0CiAgICAgICAgICAgICAgICAgICAgcHJlcGFyZSBmb3Igd2FyLiBGb3IgdGhpcyBpcyBob3cgdGhpbmdzIHN0YW5kLiBFdmVuIGlmIGFsbCBvZiB1cyB3aG8gYXJlIHRvCiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyB5b3Ugc2hvdWxkIHByb3ZlIGNhcGFibGUgc3BlYWtlcnMsIHlvdSB3b3VsZCwgSSBhbSBzdXJlLCBiZSBubyBiZXR0ZXIKICAgICAgICAgICAgICAgICAgICBvZmY7IGJ1dCBpZiBzb21lb25lLCB3aG9ldmVyIGhlIG1heSBiZSwgY291bGQgY29tZSBmb3J3YXJkIGFuZCBwb2ludCBvdXQKICAgICAgICAgICAgICAgICAgICBjb252aW5jaW5nbHkgdGhlIG5hdHVyZSBhbmQgc2l6ZSBvZiB0aGUgZm9yY2UgdGhhdCB3aWxsIGJlIHNlcnZpY2VhYmxlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHksIGFuZCBzaG93IGhvdyBpdCBpcyB0byBiZSBwcm92aWRlZCwgYWxsIG91ciBwcmVzZW50IGZlYXJzIHdpbGwgYmUgcmVsaWV2ZWQuCiAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB3aGF0IEkgd2lsbCB0cnkgdG8gZG8sIGlmIG9ubHkgSSBhbSBhYmxlLCBmaXJzdCBnaXZpbmcgeW91IGJyaWVmbHkgbXkKICAgICAgICAgICAgICAgICAgICB2aWV3cyBhYm91dCBvdXIgcmVsYXRpb25zIHdpdGggdGhlIEdyZWF0IEtpbmcuIDwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGFkbWl0IHRoYXQgaGUgaXMgdGhlIGNvbW1vbiBlbmVteSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgR3JlZWtzOyB5ZXQgSSB3b3VsZCBub3Qgb24gdGhhdCBhY2NvdW50IGFkdmlzZSB5b3UgdG8gdW5kZXJ0YWtlIGEgd2FyCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoaW0gYnkgeW91cnNlbHZlcyBhcGFydCBmcm9tIHRoZSByZXN0LCBmb3IgSSBvYnNlcnZlIHRoYXQgdGhlIEdyZWVrcwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYXJlIGJ5IG5vIG1lYW5zIGNvbW1vbiBmcmllbmRzIG9mIG9uZSBhbm90aGVyLCBidXQgdGhhdCBjZXJ0YWluIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSByZXBvc2UgbW9yZSBjb25maWRlbmNlIGluIHRoZSBLaW5nIHRoYW4gaW4gc29tZSBvZiB0aGVpciBuZWlnaGJvcnMuIEZyb20KICAgICAgICAgICAgICAgICAgICB0aGlzIHN0YXRlIG9mIHRoaW5ncyBJIGNvbmNsdWRlIHRoYXQgaXQgaXMgdG8geW91ciBpbnRlcmVzdCB0byBiZSBjYXJlZnVsIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3VyIGdyb3VuZHMgZm9yIGVudGVyaW5nIG9uIHdhciBzaGFsbCBiZSBlcXVpdGFibGUgYW5kIGp1c3QsIGJ1dCB0byBwcm9jZWVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhbGwgdGhlIG5lY2Vzc2FyeSBwcmVwYXJhdGlvbnMsIG1ha2luZyB0aGF0IHRoZSBmb3VuZGF0aW9uIG9mIHlvdXIgcG9saWN5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBJIGJlbGlldmUsIEF0aGVuaWFucywgdGhhdCBpZiB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdlcmUgY2xlYXIgYW5kIHVubWlzdGFrYWJsZSBzaWducyBvZiB0aGUgS2luZydzIGhvc3RpbGUgaW50ZW50aW9ucywgdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgR3JlZWtzIHdvdWxkIGpvaW4gd2l0aCB1cywgYW5kIHdvdWxkIGJlIGRlZXBseSBncmF0ZWZ1bCB0byB0aG9zZSB3aG8gd291bGQgc3RhbmQKICAgICAgICAgICAgICAgICAgICB1cCBmb3IgdGhlbSBhbmQgd2l0aCB0aGVtIGFnYWluc3QgaGlzIGF0dGFja3M7IGJ1dCBpZiB3ZSBmb3JjZSBvbiBhIHdhciwgd2hpbGUKICAgICAgICAgICAgICAgICAgICBoaXMgYWltcyBhcmUgc3RpbGwgb2JzY3VyZSwgSSBhbSBhZnJhaWQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgd2Ugc2hhbGwgYmUgb2JsaWdlZCB0byBlbmNvdW50ZXIsIG5vdCBvbmx5IHRoZQogICAgICAgICAgICAgICAgICAgIEtpbmcsIGJ1dCBhbHNvIHRob3NlIHdob20gd2UgYXJlIG1pbmRlZCB0byBwcm90ZWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgS2luZywgc3VzcGVuZGluZyBoaXMgZGVzaWduc+KAlGlmIGhlIHJlYWxseSBpbnRlbmRzCiAgICAgICAgICAgICAgICAgICAgdG8gaW52YWRlIEdyZWVjZeKAlHdpbGwgZGlzdHJpYnV0ZSBtb25leSBhbW9uZyB0aGVtIGFuZCB0ZW1wdCB0aGVtIHdpdGgKICAgICAgICAgICAgICAgICAgICBvZmZlcnMgb2YgZnJpZW5kc2hpcCwgd2hpbGUgdGhleSwgYW54aW91cyB0byBicmluZyB0aGVpciBwcml2YXRlIHF1YXJyZWxzIHRvIGEKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsIGlzc3VlIGFuZCBrZWVwaW5nIHRoYXQgb2JqZWN0IGluIHZpZXcsIHdpbGwgb3Zlcmxvb2sgdGhlIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHNhZmV0eSBvZiBhbGwuIEludG8gc3VjaCBhIHdlbHRlciBvZiBjb25mdXNpb24gYW5kIGZvbGx5IEkgYmVzZWVjaCB5b3Ugbm90IHRvCiAgICAgICAgICAgICAgICAgICAgcGx1bmdlIG91ciBjb3VudHJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbmRlZWQsIGFzIHJlZ2FyZHMgeW91cgogICAgICAgICAgICAgICAgICAgIHBvbGljeSB0b3dhcmRzIHRoZSBLaW5nLCBJIHNlZSB0aGF0IHlvdSBhcmUgYnkgbm8gbWVhbnMgb24gdGhlIHNhbWUgZm9vdGluZyBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBHcmVla3M7IGZvciBtYW55IG9mIHRoZW0gaXQgaXMsIEkgc3VwcG9zZSwgcG9zc2libGUgdG8gcHVyc3VlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBpbnRlcmVzdHMgYW5kIGFiYW5kb24gdGhlIGNhdXNlIG9mIHRoZWlyIGNvdW50cnltZW4sIGJ1dCBmb3IgeW91LCBldmVuCiAgICAgICAgICAgICAgICAgICAgd2hlbiB3cm9uZ2VkIGJ5IHRoZW0sIGl0IHdvdWxkIG5vdCBiZSBob25vcmFibGUgdG8gZXhhY3Qgc3VjaCBhIHBlbmFsdHkgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICB3cm9uZy1kb2VycyBhcyB0byBsZWF2ZSBhbnkgb2YgdGhlbSB1bmRlciB0aGUgaGVlbCBvZiB0aGUgYmFyYmFyaWFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBsb25nIGFzIHRoaXMgaXMgc28sIHdlIG11c3QgdGFrZSBjYXJlIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBhcmUgbm90IGludm9sdmVkIGluIHdhciBhdCBhIGRpc2FkdmFudGFnZSwgYW5kIHRoYXQgdGhlIEtpbmcsIHdob20gd2UgYmVsaWV2ZSB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgZGVzaWducyBhZ2FpbnN0IHRoZSBHcmVla3MsIGRvZXMgbm90IHdpbiB0aGUgY3JlZGl0IG9mIGFwcGVhcmluZyBhcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGZyaWVuZC4gSG93IHRoZW4gY2FuIHRoaXMgYmUgZW5zdXJlZD8gSWYgd2UgbWFrZSBpdCBwbGFpbiB0byBhbGwgdGhhdCBvdXIgZm9yY2VzCiAgICAgICAgICAgICAgICAgICAgYXJlIGFscmVhZHkgbWFyc2hhbGxlZCBhbmQgZXF1aXBwZWQsIGJ1dCBlcXVhbGx5IHBsYWluIHRoYXQgb3VyIHBvbGljeSBpcwogICAgICAgICAgICAgICAgICAgIGZvdW5kZWQgb24gc2VudGltZW50cyBvZiBqdXN0aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRvIHlvdXIgcmFzaAogICAgICAgICAgICAgICAgICAgIGFkdmlzZXJzLCB3aG8gYXJlIHNvIGVhZ2VyIHRvIGh1cnJ5IHlvdSBpbnRvIHdhciwgSSBoYXZlIHRoaXMgdG8gc2F5LCB0aGF0IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IGRpZmZpY3VsdCwgd2hlbiBkZWxpYmVyYXRpb24gaXMgbmVlZGVkLCB0byBnYWluIGEgcmVwdXRhdGlvbiBmb3IgY291cmFnZSwKICAgICAgICAgICAgICAgICAgICBub3Igd2hlbiBkYW5nZXIgaXMgYXQgaGFuZCwgdG8gZGlzcGxheSBza2lsbCBpbiBvcmF0b3J5OyBidXQgdGhlcmUgaXMgc29tZXRoaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyBib3RoIGRpZmZpY3VsdCBhbmQgZXNzZW50aWFs4oCUdG8gZGlzcGxheSBjb3VyYWdlIGluIHRoZSBmYWNlIG9mCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyLCBhbmQgaW4gZGVsaWJlcmF0aW9uIHRvIG9mZmVyIHNvdW5kZXIgYWR2aWNlIHRoYW4gb25lJ3MgZmVsbG93cy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkkgYmVsaWV2ZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCB0aGUgd2FyIHdpdGggdGhlIEtpbmcgaXMgYQogICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdCB1bmRlcnRha2luZyBmb3Igb3VyIGNpdHksIHRob3VnaCBhbnkgY29uZmxpY3Qgd2hpY2ggdGhlIHdhciBpbnZvbHZlZAogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHByb3ZlIGVhc3kgZW5vdWdoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuNTIiIHZhbGlkPSJ5ZXMiPkRlbS4gOS41MjwvYmlibD4gaGUgbm90ZXMgdGhhdCB0aGUgcmV2ZXJzZSB3b3VsZCBiZSB0aGUgY2FzZSBpbiBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlc3Qgd2l0aCBQaGlsaXAuPC9ub3RlPiBXaHkgc28/IEJlY2F1c2UgdGhlIGZpcnN0IHJlcXVpc2l0ZXMgZm9yIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgd2FyIGFyZSBuZWNlc3NhcmlseSwgSSBzdXBwb3NlLCBmbGVldHMgYW5kIG1vbmV5IGFuZCBzdHJvbmcgcG9zaXRpb25zLCBhbmQgSQogICAgICAgICAgICAgICAgICAgIGZpbmQgdGhhdCB0aGUgS2luZyBpcyBtb3JlIGZ1bGx5IHN1cHBsaWVkIHdpdGggdGhlc2UgdGhhbiB3ZSBhcmU7IGJ1dCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgYWN0dWFsIGNvbmZsaWN0IEkgb2JzZXJ2ZSB0aGF0IG5vdGhpbmcgaXMgbmVlZGVkIHNvIG11Y2ggYXMgYnJhdmUgc29sZGllcnMsIGFuZAogICAgICAgICAgICAgICAgICAgIG9mIHRoZXNlIHdlIGFuZCB0aG9zZSB3aG8gc2hhcmUgdGhlIGRhbmdlciB3aXRoIHVzIGhhdmUgdGhlIGJldHRlciBzdXBwbHkuCiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gOS41MiIgdmFsaWQ9InllcyI+RGVtLiA5LjUyPC9iaWJsPiBoZSBub3RlcyB0aGF0IHRoZSByZXZlcnNlIHdvdWxkIGJlIHRoZSBjYXNlIGluIGEKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVzdCB3aXRoIFBoaWxpcC48L3RyYW5zbGF0aW9uPg=="
translation['14.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGlzIHdoeSBJIGFkdmlzZSB0aGF0IHdlIHNob3VsZCBub3Qgb24KICAgICAgICAgICAgICAgICAgICBhbnkgZ3JvdW5kcyBiZSB0aGUgZmlyc3QgdG8gcGx1bmdlIGludG8gd2FyLCBidXQgZm9yIHRoZSBjb25mbGljdCB3ZSBtdXN0IGJlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVybHkgZXF1aXBwZWQgZnJvbSB0aGUgc3RhcnQuIElmIGluZGVlZCB0aGVyZSB3ZXJlIG9uZSBraW5kIG9mIGZvcmNlCiAgICAgICAgICAgICAgICAgICAgc3VpdGFibGUgZm9yIGRlZmVuY2UgYWdhaW5zdCBQZXJzaWFucyBhbmQgYW5vdGhlciBmb3IgZGVmZW5jZSBhZ2FpbnN0IEdyZWVrcywKICAgICAgICAgICAgICAgICAgICB0aGVuIHdlIG1pZ2h0IHJlYXNvbmFibHkgYmUgc3VzcGVjdGVkIG9mIG1hcnNoYWxsaW5nIG91cnNlbHZlcyBhZ2FpbnN0IHRoZSBLaW5nOwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgd2hlbiBhbGwgcHJlcGFyYXRpb24gZm9yIHdhciBpcyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGxpbmVzIGFuZCB0aGUgbWFpbiBvYmplY3RzIG9mIGFuIGFybWVkIGZvcmNlIGFyZSB0aGUgc2FtZeKAlHRvIGJlCiAgICAgICAgICAgICAgICAgICAgc3Ryb25nIGVub3VnaCB0byByZXBlbCB0aGUgZW5lbXksIHRvIGFzc2lzdCBvbmUncyBhbGxpZXMsIGFuZCB0byBwcmVzZXJ2ZSBvbmUncwogICAgICAgICAgICAgICAgICAgIG93biBwb3NzZXNzaW9ucy13aHksIGhhdmluZyBvcGVuIGVuZW1pZXMgZW5vdWdoLCBtdXN0IHdlIGJlIGxvb2tpbmcgb3V0IGZvcgogICAgICAgICAgICAgICAgICAgIGFub3RoZXI/IExldCB1cyByYXRoZXIgbWFrZSBvdXIgcHJlcGFyYXRpb25zIGFnYWluc3QgdGhlbSwgYW5kIHRoZW4gd2Ugc2hhbGwKICAgICAgICAgICAgICAgICAgICBkZWZlbmQgb3Vyc2VsdmVzIGFnYWluc3QgaGltIHRvbywgaWYgaGUgdmVudHVyZXMgdG8gbW9sZXN0IHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciB5b3UgYXJlIG5vdyBjYWxsaW5nIG9uIHRoZSBHcmVla3MgdG8gam9pbgogICAgICAgICAgICAgICAgICAgIHlvdTsgYnV0IGlmIHlvdSByZWZ1c2UgdG8gZG8gdGhlaXIgYmlkZGluZ+KAlGFuZCB5b3VyIHJlbGF0aW9ucyB3aXRoCiAgICAgICAgICAgICAgICAgICAgc29tZSBvZiB0aGVtIGFyZSBub3QgY29yZGlhbOKAlGhvdyBjYW4geW91IGV4cGVjdCBhbnkgb2YgdGhlbSB0byBhbnN3ZXIKICAgICAgICAgICAgICAgICAgICB5b3VyIGNhbGw/IOKAnEJlY2F1c2Us4oCdIHlvdSBzYXksIOKAnHdlIHNoYWxsIHdhcm4gdGhlbQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIEtpbmcgaGFzIGRlc2lnbnMgb24gdGhlbS7igJ0gQnV0IHNlcmlvdXNseSwgZG8geW91IGltYWdpbmUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgY2Fubm90IGRldGVjdCB0aGF0IGZvciB0aGVtc2VsdmVzPyBJIGFtIHN1cmUgdGhleSBjYW4uIEJ1dCBhcyB5ZXQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBmZWFyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiBpcyBzdWJvcmRpbmF0ZSB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGZldWRzIHdpdGggeW91IGFuZCwgaW4gc29tZSBjYXNlcywgd2l0aCBvbmUgYW5vdGhlci4gVGhlcmVmb3JlIHlvdXIgYW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICB3aWxsIG9ubHkgZ28gcm91bmQgcmVwZWF0aW5nIHRoZWlyIGhlcm9pY3MuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBhcmUgY29tcGFyZWQgdG8gcmhhcHNvZGlzdHMsIHRoZSB3YW5kZXJpbmcgcHJvZmVzc2lvbmFsIHJlY2l0ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGVwaWMgcG9ldHJ5LCB3aG9zZSBhcnQgd2FzIGZhbGxpbmcgaW50byBjb250ZW1wdCBpbiBhbiBhZ2Ugb2Ygd2lkZXIKICAgICAgICAgICAgICAgICAgICAgICAgZWR1Y2F0aW9uLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbGF0ZXIgb24sIGlmIHdoYXQgd2Ugbm93IGRlZW0gcHJvYmFibGUKICAgICAgICAgICAgICAgICAgICBjb21lcyB0byBwYXNzLCBzdXJlbHkgbm8gR3JlZWsgY29tbXVuaXR5IGhhcyBzdWNoIGEgZ29vZCBjb25jZWl0IG9mIGl0c2VsZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IHNlZSB0aGF0IHlvdSBoYXZlIGEgdGhvdXNhbmQgY2F2YWxyeSBhbmQgYXMgbWFueSBpbmZhbnRyeSBhcyBvbmUgY291bGQKICAgICAgICAgICAgICAgICAgICBkZXNpcmUgYW5kIHRocmVlIGh1bmRyZWQgc2hpcHMsIHRoZXkgd2lsbCBub3QgY29tZSBhcyBvdXIgc3VpdG9ycywgZmVlbGluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBzdWNoIHN1cHBvcnQgdGhlaXIgc2FmZXR5IGlzIGFzc3VyZWQuIFRoZXJlZm9yZSB0byBpbnZpdGUgdGhlbSBhdCBvbmNlCiAgICAgICAgICAgICAgICAgICAgbWVhbnMgdGhhdCB5b3UgYXJlIHRoZSBzdXBwbGlhbnRzIGFuZCwgaWYgdW5zdWNjZXNzZnVsLCBoYXZlIGZhaWxlZCB1dHRlcmx5LCBidXQKICAgICAgICAgICAgICAgICAgICB0byB3YWl0IGFuZCBhdCB0aGUgc2FtZSB0aW1lIGNvbXBsZXRlIHlvdXIgb3duIHByZXBhcmF0aW9ucyBtZWFucyBzYXZpbmcgdGhlbSBhdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHJlcXVlc3QsIGFuZCBiZWluZyB3ZWxsIGFzc3VyZWQgdGhhdCB0aGV5IHdpbGwgYWxsIGpvaW4geW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['14.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBtb3ZlZCBieSB0aGlzIGFuZAogICAgICAgICAgICAgICAgICAgIHNpbWlsYXIgY29uc2lkZXJhdGlvbnMsIEkgd2FzIHVud2lsbGluZyB0byBjb21wb3NlIGEgY29uZmlkZW50IG9yYXRpb24gb3Igb25lIG9mCiAgICAgICAgICAgICAgICAgICAgZnV0aWxlIGxlbmd0aCwgYnV0IEkgaGF2ZSBiZWVuIGF0IHZlcnkgZ3JlYXQgcGFpbnMgdG8gY29uc2lkZXIgdGhlIGJlc3QgYW5kCiAgICAgICAgICAgICAgICAgICAgc3BlZWRpZXN0IG1ldGhvZCBvZiBjb21wbGV0aW5nIG91ciBlcXVpcG1lbnQuIEkgdmVudHVyZSB0byB0aGluayB0aGF0IHlvdSBvdWdodAogICAgICAgICAgICAgICAgICAgIHRvIGhlYXIgbXkgcGxhbiBhbmQgdm90ZSBmb3IgaXQsIGlmIGl0IHNhdGlzZmllcyB5b3UuIE5vdyB0aGUgZmlyc3QgYW5kIG1vc3QKICAgICAgICAgICAgICAgICAgICBpbXBvcnRhbnQgc3RlcCBpbiBvdXIgZXF1aXBtZW50LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyB0aGF0IHlvdSBzaG91bGQgYmUgZmlsbGVkIHdpdGggc3VjaCByZXNvbHV0aW9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBldmVyeW9uZSBzaGFsbCBiZSB3aWxsaW5nIGFuZCBlYWdlciB0byBkbyBoaXMgcGFydC4gPC90cmFuc2xhdGlvbj4="
translation['14.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91IHdpbGwgbm90aWNlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IHdoZW5ldmVyIHlvdSBoYXZlIGNvbGxlY3RpdmVseSBmb3JtZWQgc29tZQogICAgICAgICAgICAgICAgICAgIHByb2plY3QsIGFuZCB0aGVyZWFmdGVyIGVhY2ggaW5kaXZpZHVhbCBoYXMgcmVhbGl6ZWQgdGhhdCBpdCB3YXMgaGlzIHBlcnNvbmFsCiAgICAgICAgICAgICAgICAgICAgZHV0eSB0byBjYXJyeSBpdCBvdXQsIG5vdGhpbmcgaGFzIGV2ZXIgZXNjYXBlZCB5b3VyIGdyYXNwOyBidXQgd2hlbmV2ZXIgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBmb3JtZWQgeW91ciBwcm9qZWN0IGFuZCB0aGVyZWFmdGVyIGhhdmUgbG9va2VkIHRvIG9uZSBhbm90aGVyIHRvIGNhcnJ5IGl0IG91dCwKICAgICAgICAgICAgICAgICAgICBlYWNoIGV4cGVjdGluZyB0byBkbyBub3RoaW5nIHdoaWxlIGhpcyBuZWlnaGJvciB3b3JrZWQsIHRoZW4gbm90aGluZyBoYXMKICAgICAgICAgICAgICAgICAgICBzdWNjZWVkZWQgd2l0aCB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['14.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2VlaW5nIHlvdSB0aHVzCiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgYW5kIGVudGh1c2lhc3RpYywgSSBwcm9wb3NlIHRoYXQgdGhlIHJlZ2lzdGVyIG9mIHRoZSB0d2VsdmUKICAgICAgICAgICAgICAgICAgICAgICAgaHVuZHJlZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgd2VhbHRoaWVzdCBjaXRpemVucwogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4PPhc69z4TOtc67zrXhv5bPgjwvZm9yZWlnbj7vvIkuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBmaWxsZWQgdXAgYW5kIGVubGFyZ2VkIHRvIHR3byB0aG91c2FuZCBieSB0aGUgYWRkaXRpb24gb2YgZWlnaHQKICAgICAgICAgICAgICAgICAgICBodW5kcmVkIG5hbWVzOyBmb3IgaWYgeW91IGZpeCBvbiB0aGF0IG51bWJlciwgSSBiZWxpZXZlIHRoYXQgeW91IHdpbGwgZ2V0IHlvdXIKICAgICAgICAgICAgICAgICAgICB0d2VsdmUgaHVuZHJlZCBwZXJzb25zLCBhZnRlciBzdHJpa2luZyBvdXQgd2FyZHMsIG9ycGhhbnMsIHNldHRsZXJzIGluIGNvbG9uaWVzLAogICAgICAgICAgICAgICAgICAgIGpvaW50IGhvbGRlcnMgb2YgZXN0YXRlcywgYW5kIGFueW9uZSBvdGhlcndpc2UgaW5lbGlnaWJsZS4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4PPhc69z4TOtc67zrXhv5bPgjwvZm9yZWlnbj7vvIkuPC90cmFuc2xhdGlvbj4="
translation['14.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIEkgcHJvcG9zZSB0byBkaXZpZGUgdGhlc2UgaW50byB0d2VudHkgYm9hcmRzLCBhcwogICAgICAgICAgICAgICAgICAgIGF0IHByZXNlbnQsIGVhY2ggY29udGFpbmluZyBzaXh0eSBwZXJzb25zLiBFYWNoIG9mIHRoZXNlIGJvYXJkcyBJIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgc3ViZGl2aWRlIGludG8gZml2ZSBncm91cHMgb2YgdHdlbHZlIG1lbiwgYWx3YXlzIGF0dGFjaGluZyB0byB0aGUgd2VhbHRoaWVzdCBtYW4KICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gYXJlIHBvb3Jlc3QsIHRvIGtlZXAgdGhlIGJhbGFuY2UuIFRoYXQgaXMgaG93IEkgcHJvcG9zZSB0byBhcnJhbmdlCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgcGVyc29uczsgeW91IHdpbGwgdW5kZXJzdGFuZCB3aHksIHdoZW4geW91IGhhdmUgaGVhcmQgdGhlIHdob2xlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFycmFuZ2VtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['14.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgd2hhdCBhYm91dCB0aGUgd2FyLWdhbGxleXM/IEkKICAgICAgICAgICAgICAgICAgICBwcm9wb3NlIHRvIGZpeCB0aGUgdG90YWwgbnVtYmVyIGF0IHRocmVlIGh1bmRyZWQsIGRpdmlkZWQgaW50byB0d2VudHkgc3F1YWRyb25zCiAgICAgICAgICAgICAgICAgICAgb2YgZmlmdGVlbiBzaGlwcyBlYWNoLCBhc3NpZ25pbmcgdG8gZWFjaCBzcXVhZHJvbiBmaXZlIG9mIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgICAgICBodW5kcmVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TaGlwcyBvZiB0aGUgZmlyc3QgcmF0ZSwKICAgICAgICAgICAgICAgICAgICAgICAgYXBwYXJlbnRseS48L25vdGU+IGZpdmUgb2YgdGhlIHNlY29uZCwgYW5kIGZpdmUgb2YgdGhlIHRoaXJkOyBhbmQgbmV4dCB0bwogICAgICAgICAgICAgICAgICAgIGFsbG90IGEgc3F1YWRyb24gb2YgZmlmdGVlbiB0byBlYWNoIGJvYXJkLCBhbmQgdGhlIGJvYXJkIG11c3QgYXNzaWduIHRocmVlCiAgICAgICAgICAgICAgICAgICAgdmVzc2VscyB0byBlYWNoIG9mIGl0cyBvd24gZ3JvdXBzLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcHJlbGltaW5hcmllcyBhcmUgc2V0dGxlZCwgSSBwcm9wb3NlIHRoYXQgeW91ciB3ZWFsdGggYWxzbyBzaG91bGQgYmUgb3JnYW5pemVkLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IGFzIHRoZSByYXRhYmxlIHZhbHVlIG9mIHRoZSBjb3VudHJ5IGlzIHNpeCB0aG91c2FuZCB0YWxlbnRzLCB0aGlzIHN1bQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBkaXZpZGVkIGludG8gYSBodW5kcmVkIHBhcnRzIG9mIHNpeHR5IHRhbGVudHMgZWFjaCwgYW5kIHRoYXQgdGhlbiBmaXZlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2UgcGFydHMgc2hvdWxkIGJlIGFsbG90dGVkIHRvIGVhY2ggb2YgdGhlIHR3ZW50eSBmdWxsIGJvYXJkcywgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgYm9hcmQgaXRzZWxmIHNob3VsZCBhc3NpZ24gb25lIHBhcnQsIGNvbnNpc3Rpbmcgb2Ygc2l4dHkgdGFsZW50cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+aS5lLiBieSBhIHRheCBvbiB0aGlzIGZyYWN0aW9uLCBvbmUgaHVuZHJlZHRoLCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgcmF0YWJsZSB2YWx1ZS4gVGhlIGFjdHVhbCBjb3N0IG9mIGEgdHJpZXJhcmNoeSB3YXMgZnJvbSA0MCBtaW5hZQogICAgICAgICAgICAgICAgICAgICAgICB0byBvbmUgdGFsZW50LiBUaGUgdmFsdWUgb2YgYSBtaW5hIO+8iD0xMDAgZHJhY2htYWXvvIkgaXMKICAgICAgICAgICAgICAgICAgICAgICAgdXN1YWxseSBwdXQgYXQgwqM0IGFuZCB0aGF0IG9mIGEgdGFsZW50IGF0IMKjMjQwOiBidXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbCB2YWx1ZSBtdXN0IGhhdmUgYmVlbiBtdWNoIGdyZWF0ZXIsIGFzIGEgZHJhY2htYSB3YXMgdGhlIGF2ZXJhZ2Ugd2FnZQogICAgICAgICAgICAgICAgICAgICAgICBvZiBhbiBhcnRpc2FuLjwvbm90ZT4gdG8gZWFjaCBvZiBpdHMgb3duIGZpdmUgZ3JvdXBzLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzLCBpZiB5b3Ugd2FudCBhIGh1bmRyZWQgd2FyLWdhbGxleXMgdGhlIGNvc3Qgb2YKICAgICAgICAgICAgICAgICAgICBlYWNoIHdpbGwgYmUgY292ZXJlZCBieSB0aGUgc2l4dHkgdGFsZW50cyBhbmQgdGhlcmUgd2lsbCBiZSB0d2VsdmUgdHJpZXJhcmNocwogICAgICAgICAgICAgICAgICAgIGZvciBlYWNoOyBpZiB5b3Ugd2FudCB0d28gaHVuZHJlZCwgdGhlcmUgd2lsbCBiZSB0aGlydHkgdGFsZW50cyB0byBjb3ZlciB0aGUKICAgICAgICAgICAgICAgICAgICBjb3N0IGFuZCBzaXggcGVyc29ucyB0byBzZXJ2ZSBhcyB0cmllcmFyY2hzOyBpZiB5b3Ugd2FudCB0aHJlZSBodW5kcmVkLCB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgdHdlbnR5IHRhbGVudHMgZm9yIHRoZSBjb3N0IGFuZCBmb3VyIHBlcnNvbnMgdG8gc2VydmUuIDwvdHJhbnNsYXRpb24+"
translation['14.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2FtZSB3YXkgSSBwcm9wb3NlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IGFsbCBzaGlwcycgZ2VhciBub3cgb24gbG9hbgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSB2YWx1ZWQgYW5kIGRpdmlkZWQgYWNjb3JkaW5nIHRvIHRoZSBpbnZlbnRvcnkgaW50byB0d2VudHkgcGFydHMsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZW4gdGhhdCBvbmUgcGFydCBvZiB0aGUgZGVidG9ycyBsaWFibGUgZm9yIGl0IHNob3VsZCBiZSBhbGxvdHRlZCB0byBlYWNoIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZ1bGwgYm9hcmRzLCBhbmQgdGhhdCBlYWNoIGJvYXJkIHNob3VsZCBhc3NpZ24gYW4gZXF1YWwgc2hhcmUgdG8gZWFjaCBvZiBpdHMKICAgICAgICAgICAgICAgICAgICBvd24gZ3JvdXBzOyBhbmQgdGhhdCB0aGUgdHdlbHZlIG1lbWJlcnMgb2YgdGhlIGdyb3VwIHNob3VsZCBleGFjdCB0aGUgc2FtZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlYnRvcnMsIGFuZCBzbyBwcm92aWRlLCBmdWxseSBlcXVpcHBlZCwgYXMgbWFueSBnYWxsZXlzIGFzIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgc2V2ZXJhbGx5IHJlc3BvbnNpYmxlIGZvci4gPC90cmFuc2xhdGlvbj4="
translation['14.22'] = ""
translation['14.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZWFjaCBicmlnYWRlLWNvbW1hbmRlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5FYWNoIG9mIHRoZSB0ZW4KICAgICAgICAgICAgICAgICAgICAgICAgdGF4aWFyY2hzIGNvbW1hbmRlZCB0aGUgaW5mYW50cnkgYmVsb25naW5nIHRvIGhpcyB0cmliZS48L25vdGU+IG11c3QgZGl2aWRlCiAgICAgICAgICAgICAgICAgICAgaW50byB0aHJlZSBwYXJ0cyB3aGF0ZXZlciBhcmVhIGhpcyB0cmliZSBoYXMgdGFrZW4gb3ZlciwgYW5kIHRoZSBzaGlwcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHdheSwgYW5kIHRoZW4gaGUgbXVzdCBhbGxvdCB0aGUgdGhpcmRzIG9mIGhpcyB0cmliZSBpbiBzdWNoIGEgd2F5IHRoYXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgc3BhY2Ugb2YgdGhlIGRvY2t5YXJkcyBlYWNoIHRyaWJlIG1heSBoYXZlIG9uZSBhcmVhIGFuZCBlYWNoIHRoaXJkIG9mCiAgICAgICAgICAgICAgICAgICAgYSB0cmliZSBhIHRoaXJkIG9mIGFuIGFyZWE7IHNvIHRoYXQgeW91IGNhbiBrbm93IGF0IG9uY2UsIGlmIG5lY2Vzc2FyeSwgd2hlcmUKICAgICAgICAgICAgICAgICAgICBlYWNoIHRyaWJlIGFuZCBlYWNoIHRoaXJkIG9mIGEgdHJpYmUgaXMgc3RhdGlvbmVkLCB3aG8gYXJlIHRoZSB0cmllcmFyY2hzIGFuZAogICAgICAgICAgICAgICAgICAgIHdoYXQgc2hpcHMgdGhleSBoYXZlLCBhbmQgdGhhdCBzbyBlYWNoIHRyaWJlIG1heSBoYXZlIHRoaXJ0eSBzaGlwcyBhbmQgZWFjaAogICAgICAgICAgICAgICAgICAgIHRoaXJkIG9mIGEgdHJpYmUgdGVuLiBGb3IgaWYgd2UgY2FuIG9ubHkgZ2V0IHRoaXMgc3RhcnRlZCwgYW55IGRldGFpbCBhdCBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgb21pdHRlZCDvvIhmb3IgaXQgaXMgcGVyaGFwcyBkaWZmaWN1bHQgdG8gcHJvdmlkZSBmb3IKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5n77yJIHdpbGwgYmUgZGlzY292ZXJlZCBieSB0aGUgYWN0dWFsIHdvcmtpbmcgb2YgdGhlIHBsYW4sIGFuZAogICAgICAgICAgICAgICAgICAgIHdlIHNoYWxsIGhhdmUgYSB1bmlmb3JtIHN5c3RlbSBib3RoIGZvciB0aGUgd2hvbGUgbmF2eSBhbmQgZm9yIGV2ZXJ5IHBhcnQgb2YgaXQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGFzCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkcyBtb25leSBhbmQgYSByZWFkeSBzdXBwbHkgb2YgaXQgYXQgb25jZSwgSSBhbSBhd2FyZSB0aGF0IEkgYW0gZ29pbmcgdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIGEgc3RhcnRsaW5nIHByb3Bvc2FsLiBUaGUgcHJvcG9zYWwgc2hhbGwsIGhvd2V2ZXIsIGJlIG1hZGUsIGJlY2F1c2UgSSBhbQogICAgICAgICAgICAgICAgICAgIGNvbmZpZGVudCB0aGF0IGlmIHlvdSB0YWtlIHRoZSByaWdodCBwb2ludCBvZiB2aWV3LCBpdCB3aWxsIGJlIGNsZWFyIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIGFsb25lIGhhdmUgdG9sZCB5b3UgdGhlIHRydXRoLCBhcyBpdCBpcyBhbmQgYXMgaXQgd2lsbCBiZS4gTXkgdmlldyBpcyB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgbm90IHRvIHRhbGsgYWJvdXQgbW9uZXkgbm93OyBmb3IgaWYgd2UgbmVlZCBpdCwgd2UgaGF2ZSBhIHNvdXJjZSBvZgogICAgICAgICAgICAgICAgICAgIHN1cHBseSwgYWJ1bmRhbnQsIGhvbm9yYWJsZSBhbmQgZmFpcjsgaWYgd2UgbG9vayBmb3IgaXQgYXQgb25jZSwgd2Ugc2hhbGwgZmFpbAogICAgICAgICAgICAgICAgICAgIHNvIHV0dGVybHkgdG8gc3VwcGx5IGl0IG5vdyB0aGF0IHdlIHNoYWxsIGNvbmNsdWRlIHRoYXQgaXQgaXMgbm90IGV2ZW4gaW4KICAgICAgICAgICAgICAgICAgICByZXNlcnZlIGZvciBvdXIgZnV0dXJlIHVzZSwgYnV0IGlmIHdlIGxlYXZlIGl0IGFsb25lLCBpdCB3aWxsIGJlIHRoZXJlLiBXaGF0LAogICAgICAgICAgICAgICAgICAgIHRoZW4sIGlzIHRoaXMgc3VwcGx5LCB3aGljaCBpcyBub3Qgbm93LCBidXQgd2lsbCBiZSBoZXJlYWZ0ZXI/IDwvdHJhbnNsYXRpb24+"
translation['14.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IHNvdW5kcyBsaWtlIGEgcmlkZGxlLCBidXQgSSB3aWxsIGV4cGxhaW4uIExvb2sKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgZ3JlYXQgY2l0eSB0aGF0IGxpZXMgYXJvdW5kIHlvdSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gSW4gdGhhdCBjaXR5IHRoZXJlIGlzIHdlYWx0aCwgSSBtaWdodCBhbG1vc3Qgc2F5LCBlcXVhbAogICAgICAgICAgICAgICAgICAgIHRvIHRoYXQgb2YgYWxsIHRoZSBvdGhlciBHcmVlayBjaXRpZXMgdG9nZXRoZXIuIEJ1dCB0aGF0IHdlYWx0aCBpcyBpbiB0aGUgaGFuZHMKICAgICAgICAgICAgICAgICAgICBvZiBtZW4gd2hvc2UgdGVtcGVyIGlzIHN1Y2ggdGhhdCBpZiBhbGwgb3VyIG9yYXRvcnMgc3RhcnRlZCBhIHNjYXJlIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgS2luZyBpcyBjb21pbmcsIHRoYXQgaGUgaXMgY2xvc2UgYXQgaGFuZCwgdGhhdCB0aGUgcmVwb3J0IG11c3QgYmUgdHJ1ZSwgYW5kIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlIG9yYXRvcnMgd2VyZSBiYWNrZWQgYnkgYW4gZXF1YWwgbnVtYmVyIG9mIG9yYWNsZS1tb25nZXJzLCBub3Qgb25seSB3b3VsZAogICAgICAgICAgICAgICAgICAgIHRoZXkgZmFpbCB0byBjb250cmlidXRlLCBidXQgdGhleSB3b3VsZCByZWZ1c2UgdG8gZGVjbGFyZSBvciBhY2tub3dsZWRnZSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHdlYWx0aC4gPC90cmFuc2xhdGlvbj4="
translation['14.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgb25jZSB0aGV5IHNhdyB0aGF0IHdoYXQgYWxhcm1zCiAgICAgICAgICAgICAgICAgICAgdGhlbSBub3cgYXMgYSBtZXJlIHJ1bW9yIHdhcyBhY3R1YWxseSB0YWtpbmcgcGxhY2UsIG5vbmUgb2YgdGhlbSBpcyBzbyBmb29saXNoCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3b3VsZCBub3QgYmUgdGhlIGZpcnN0IHRvIHBheSBoaXMgY29udHJpYnV0aW9uOyBmb3Igd2hvIHdpbGwgY2hvb3NlIHRvCiAgICAgICAgICAgICAgICAgICAgc2FjcmlmaWNlIGxpZmUgYW5kIHByb3BlcnR5IHNvb25lciB0aGFuIGNvbnRyaWJ1dGUgYSBmcmFjdGlvbiB0byBlbnN1cmUgaGlzCiAgICAgICAgICAgICAgICAgICAgcGVyc29uIGFuZCB0aGUgcmVtYWluZGVyIG9mIGhpcyB3ZWFsdGg/IFRoZSBtb25leSwgSSBzYXksIHdlIGhhdmUgd2hlbiBpdCBpcwogICAgICAgICAgICAgICAgICAgIHJlYWxseSBuZWVkZWQsIGJ1dCBub3QgYmVmb3JlLiBUaGVyZWZvcmUgSSBhZHZpc2UgeW91IG5vdCB0byBzZWVrIGl0IG91dCwgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIHN1bSB0aGF0IHlvdSBjb3VsZCByYWlzZSwgaWYgeW91IGluc2lzdGVkIG9uIHJhaXNpbmcgaXQsIHdvdWxkIGJlIG1vcmUKICAgICAgICAgICAgICAgICAgICByaWRpY3Vsb3VzIHRoYW4gbm90aGluZyBhdCBhbGwuIDwvdHJhbnNsYXRpb24+"
translation['14.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgY29uc2lkZXI7CiAgICAgICAgICAgICAgICAgICAgd2lsbCBhbnlvbmUgcHJvcG9zZSBhIHRheCBvZiBvbmUgcGVyIGNlbnQgbm93PyBUaGVuIHdlIGdldCBzaXh0eSB0YWxlbnRzLiBPcgogICAgICAgICAgICAgICAgICAgIGRvdWJsZSBpdCBhbmQgbWFrZSBpdCB0d28gcGVyIGNlbnQ/IFN0aWxsIG9ubHkgYSBodW5kcmVkIGFuZCB0d2VudHkgdGFsZW50cy4gQW5kCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpcyB0aGF0IHRvIHRoZSB0d2VsdmUgaHVuZHJlZCBjYW1lbHMgbGFkZW4sIGFzIG91ciBmcmllbmRzIGhlcmUgdGVsbCB1cywKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBLaW5nJ3MgdHJlYXN1cmU/IFRoZW4gd291bGQgeW91IGhhdmUgbWUgYXNzdW1lIHRoYXQgd2Ugc2hhbGwgY29udHJpYnV0ZQogICAgICAgICAgICAgICAgICAgIGEgdHdlbGZ0aCBvZiB5b3VyIHdlYWx0aCwgb3IgZml2ZSBodW5kcmVkIHRhbGVudHM/IEJ1dCB5b3Ugd291bGQgbm90IHN1Ym1pdCB0bwogICAgICAgICAgICAgICAgICAgIHN1Y2ggYSB0YXgsIG5vciBpZiB5b3UgcGFpZCB1cCwgd291bGQgdGhlIG1vbmV5IGJlIHN1ZmZpY2llbnQgZm9yIHRoZSB3YXIuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgbXVzdCB0aGVyZWZvcmUgbWFrZSBhbGwgeW91ciBvdGhlcgogICAgICAgICAgICAgICAgICAgIHByZXBhcmF0aW9ucywgYnV0IGxldCB0aGUgbW9uZXkgcmVtYWluIGZvciB0aGUgcHJlc2VudCBpbiB0aGUgaGFuZHMgb2YgaXRzCiAgICAgICAgICAgICAgICAgICAgb3duZXJzLCBmb3IgaXQgY291bGQgbm90IGJlIGluIGJldHRlciBrZWVwaW5nLCBmb3IgdGhlIGJlbmVmaXQgb2YgdGhlIFN0YXRlOyBidXQKICAgICAgICAgICAgICAgICAgICBpZiBldmVyIHRoZSB0aHJlYXRlbmVkIGNyaXNpcyBjb21lcywgdGhlbiBhY2NlcHQgaXQgYXMgYSB2b2x1bnRhcnkKICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVzZSBwcm9wb3NhbHMsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFyZSBib3RoIHByYWN0aWNhYmxlIGFuZAogICAgICAgICAgICAgICAgICAgIGhvbm9yYWJsZSBhbmQgYWR2YW50YWdlb3VzLCBmaXQgdG8gYmUgcmVwb3J0ZWQgb2YgeW91IHRvIHRoZSBLaW5nIGFuZCBjYWxjdWxhdGVkCiAgICAgICAgICAgICAgICAgICAgdG8gaW5zcGlyZSBoaW0gd2l0aCBubyBsaXR0bGUgYWxhcm0uIDwvdHJhbnNsYXRpb24+"
translation['14.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBrbm93cwogICAgICAgICAgICAgICAgICAgIHRoYXQgd2l0aCB0d28gaHVuZHJlZCBnYWxsZXlzLCBvZiB3aGljaCB3ZSBwcm92aWRlZCBvbmUgaHVuZHJlZCwgb3VyIGFuY2VzdG9ycwogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3llZCBhIHRob3VzYW5kIG9mIGhpcyBzaGlwcywgYW5kIGhlIHdpbGwgaGVhciB0aGF0IHdlIGhhdmUgdGhyZWUgaHVuZHJlZAogICAgICAgICAgICAgICAgICAgIG9mIG91ciBvd24gcmVhZHkgZm9yIHNlYSwgc28gdGhhdCBldmVuIGlmIGhlIHdlcmUgcmF2aW5nIG1hZCwgaGUgd291bGQgc2NhcmNlbHkKICAgICAgICAgICAgICAgICAgICB0aGluayBpdCBhIGxpZ2h0IHRoaW5nIHRvIGluY3VyIHRoZSBob3N0aWxpdHkgb2Ygb3VyIGNpdHkuIEJ1dCBpbmRlZWQsIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgYmFzZXMgaGlzIGNvbmZpZGVuY2Ugb24gaGlzIHdlYWx0aCwgaGUgd2lsbCBmaW5kIHRoaXMgdG9vIGEgbGVzcyBzdXJlIGZvdW5kYXRpb24KICAgICAgICAgICAgICAgICAgICB0aGFuIHlvdXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBpcyBicmluZ2luZywgdGhleSBzYXksIGdvbGQgaW4KICAgICAgICAgICAgICAgICAgICBwbGVudHkuIEJ1dCBpZiBoZSBkaXNidXJzZXMgaXQsIGhlIHdpbGwgbG9vayBpbiB2YWluIGZvciBtb3JlOyBmb3IgZXZlbiBzcHJpbmdzCiAgICAgICAgICAgICAgICAgICAgYW5kIHdlbGxzIGhhdmUgYSB3YXkgb2YgZmFpbGluZywgaWYgb25lIGRyYXdzIGZyb20gdGhlbSBjb25zdGFudGx5IGFuZCBsYXZpc2hseS4KICAgICAgICAgICAgICAgICAgICBCdXQgaGUgd2lsbCBoZWFyIHRoYXQgb3VyIHJlc291cmNlcyBjb25zaXN0IG9mIHRoZSByYXRhYmxlIHZhbHVlIG9mIG91ciBjb3VudHJ5LAogICAgICAgICAgICAgICAgICAgIGFuZCBob3cgd2UgY2FuIGZpZ2h0IGluIGRlZmVuY2Ugb2YgaXQgYWdhaW5zdCBpbnZhZGVycyBmcm9tIGhpcyBsYW5kLCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGFuY2VzdG9ycyBvZiBoaXMgd2hvIGZvdWdodCBhdCBNYXJhdGhvbiBiZXN0IGtub3c7IGJ1dCBhcyBsb25nIGFzIHdlIGFyZQogICAgICAgICAgICAgICAgICAgIHZpY3RvcmlvdXMsIHRoZXJlIGlzIHN1cmVseSBubyBwcm9zcGVjdCBvZiBtb25leSBmYWlsaW5nIHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIHdoYXQgZnJpZ2h0ZW5zCiAgICAgICAgICAgICAgICAgICAgc29tZSBvZiB5b3XigJR0aGF0IGhpcyB3ZWFsdGggd2lsbCBhdHRyYWN0IGEgbGFyZ2UgbWVyY2VuYXJ5CiAgICAgICAgICAgICAgICAgICAgYXJteeKAlGRvZXMgbm90IHN0cmlrZSBtZSBhcyB0cnVlLiBGb3IgYWx0aG91Z2ggSSBiZWxpZXZlIHRoYXQgbWFueQogICAgICAgICAgICAgICAgICAgIEdyZWVrcyB3b3VsZCBjb25zZW50IHRvIHNlcnZlIGluIGhpcyBwYXkgYWdhaW5zdCB0aGUgRWd5cHRpYW5zIGFuZCBPcm9udGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIGluIHJldm9sdCBmb3IgbWFueSB5ZWFycywgYW5kIGluIDM2MyBtb3N0IG9mIHRoZSBzYXRyYXBzIG9mIHdlc3Rlcm4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sIGluY2x1ZGluZyBPcm9udGVzLCBzYXRyYXAKICAgICAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NDgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc0OCI+TXlzaWE8L3BsYWNlTmFtZT4sIGpvaW5lZCBpbiB0aGUgcmViZWxsaW9uLgogICAgICAgICAgICAgICAgICAgICAgICBBZ2VzaWxhdXMsIElwaGljcmF0ZXMgYW5kIENoYWJyaWFzIHdlcmUgYW1vbmcgdGhlIEdyZWVrIGdlbmVyYWxzIHdobyB0b29rCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgb24gb25lIHNpZGUgb3IgdGhlIG90aGVyLjwvbm90ZT4gYW5kIG90aGVyIGJhcmJhcmlhbnMsIG5vdCBzbyBtdWNoIHRvCiAgICAgICAgICAgICAgICAgICAgZW5hYmxlIGhpbSB0byBzdWJkdWUgYW55IG9mIHRob3NlIGVuZW1pZXMgYXMgdG8gd2luIGZvciB0aGVtc2VsdmVzIHdlYWx0aCBhbmQKICAgICAgICAgICAgICAgICAgICByZWxpZWYgZnJvbSB0aGVpciBwcmVzZW50IHBvdmVydHksIHlldCBJIGRvIG5vdCB0aGluayB0aGF0IGFueSBHcmVlayB3b3VsZAogICAgICAgICAgICAgICAgICAgIGF0dGFjayA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBpbiByZXZvbHQgZm9yIG1hbnkgeWVhcnMsIGFuZCBpbiAzNjMgbW9zdCBvZiB0aGUgc2F0cmFwcyBvZiB3ZXN0ZXJuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LCBpbmNsdWRpbmcgT3JvbnRlcywgc2F0cmFwCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NzQ4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY3NDgiPk15c2lhPC9wbGFjZU5hbWU+LCBqb2luZWQgaW4gdGhlIHJlYmVsbGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgQWdlc2lsYXVzLCBJcGhpY3JhdGVzIGFuZCBDaGFicmlhcyB3ZXJlIGFtb25nIHRoZSBHcmVlayBnZW5lcmFscyB3aG8gdG9vawogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0IG9uIG9uZSBzaWRlIG9yIHRoZSBvdGhlci48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIEZvciB3aGVyZSB3b3VsZCBoZQogICAgICAgICAgICAgICAgICAgIHJldGlyZSBhZnRlcndhcmRzPyBXaWxsIGhlIGdvIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjEzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MTMiPlBocnlnaWE8L3BsYWNlTmFtZT4gYW5kIGJlIGEgc2xhdmU/IDwvdHJhbnNsYXRpb24+"
translation['14.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICB0aGUgb2JqZWN0cyBhdCBzdGFrZSBpbiBhIHdhciBhZ2FpbnN0IHRoZSBiYXJiYXJpYW4gYXJlIG5vdGhpbmcgbGVzcyB0aGFuIG91cgogICAgICAgICAgICAgICAgICAgIGNvdW50cnksIG91ciBsaWZlLCBvdXIgaGFiaXRzLCBvdXIgZnJlZWRvbSwgYW5kIGFsbCBzdWNoIGJsZXNzaW5ncy4gV2hvLCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGlzIHNvIGRlc3BlcmF0ZSB0aGF0IGhlIHdpbGwgc2FjcmlmaWNlIGhpbXNlbGYsIGhpcyBhbmNlc3RvcnMsIGhpcyBzZXB1bGNocmVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgbmF0aXZlIGxhbmQsIGFsbCBmb3IgdGhlIHNha2Ugb2YgYSBwYWx0cnkgcHJvZml0PyBJIGNhbm5vdCB0aGluayB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgc3VjaCBhIG1hbi4gTW9yZW92ZXIsIGl0IGlzIG5vdCBldmVuIHRvIHRoZSBLaW5nJ3MgYWR2YW50YWdlIHRoYXQKICAgICAgICAgICAgICAgICAgICBtZXJjZW5hcmllcyBzaG91bGQgYmVhdCB0aGUgR3JlZWtzLCBmb3IgdGhlIG1lbiB3aG8gc2hhbGwgYmVhdCB1cyBoYXZlIGJlZW4gaGlzCiAgICAgICAgICAgICAgICAgICAgbWFzdGVycyBsb25nIGFnby48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+aS5lLiBieSBiZWF0aW5nIHVzIHRoZXkgd2lsbAogICAgICAgICAgICAgICAgICAgICAgICBzaG93IHRoYXQgYXQgYW55IHRpbWUgdGhleSBjb3VsZCBoYXZlIGJlYXRlbiBoaW0uPC9ub3RlPiBObzsgaGlzIG9iamVjdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCwgYWZ0ZXIgZGVzdHJveWluZyB1cywgdG8gZmluZCBoaW1zZWxmIGluIHRoZSBwb3dlciBvZiBvdGhlcnMsIGJ1dCB0byBydWxlCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSB3b3JsZCwgaWYgaGUgY2FuLCBvciBpZiBub3QsIGF0IGxlYXN0IHRob3NlIHdobyBhcmUgbm93IGhpcyBzbGF2ZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBpZgogICAgICAgICAgICAgICAgICAgIGFueW9uZSBleHBlY3RzIHRoZSBUaGViYW5zIHRvIHRha2Ugb3VyIHNpZGUsIGl0IGlzIGRpZmZpY3VsdCB0byBzcGVhayB0byB5b3UKICAgICAgICAgICAgICAgICAgICBhYm91dCB0aGVtLCBiZWNhdXNlIHlvdSBoYXZlIHN1Y2ggYSBoZWFydHkgZGlzbGlrZSBvZiB0aGVtIHRoYXQgeW91IHdvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIGNhcmUgdG8gaGVhciBhbnkgZ29vZCBvZiB0aGVtLCBldmVuIGlmIGl0IHdlcmUgdHJ1ZTsgYnV0IHlldCwgd2hlbiBkZWFsaW5nIHdpdGgKICAgICAgICAgICAgICAgICAgICBncmF2ZSBtYXR0ZXJzLCBvbmUgbXVzdCBub3Qgb24gYW55IHByZXRleHQgcGFzcyBvdmVyIGFuIGltcG9ydGFudCBjb25zaWRlcmF0aW9uLgogICAgICAgICAgICAgICAgICAgIEZvciBteSBwYXJ0LCBJIGJlbGlldmUgdGhhdCB0aGUgVGhlYmFucyBhcmUgc28gbGl0dGxlIGxpa2VseSB0byBqb2luIHRoZSBLaW5nIGluCiAgICAgICAgICAgICAgICAgICAgYW4gYXR0YWNrIG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB0aGF0IHRoZXkgd291bGQgcGF5CiAgICAgICAgICAgICAgICAgICAgYSBsYXJnZSBzdW0sIDwvdHJhbnNsYXRpb24+"
translation['14.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5pZiB0aGV5IGhhZCBpdCwgdG8gZ2V0IGEgY2hhbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgZXhwaWF0aW5nIHRoZWlyIGZvcm1lciBzaW5zIGFnYWluc3QgdGhlIEdyZWVrcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlaXIg4oCcTWVkaXNt4oCdIGR1cmluZyB0aGUgUGVyc2lhbgogICAgICAgICAgICAgICAgICAgICAgICB3YXJzLjwvbm90ZT4gSWYsIGhvd2V2ZXIsIHNvbWUgdGhpbmsgdGhhdCB0aGUgVGhlYmFucyBhcmUgZmF0ZWQgYWx3YXlzIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHdyb25nIHNpZGUsIGF0IGFueSByYXRlIHlvdSBhbGwga25vdyB0aGlzLCB0aGF0IGlmIHRoZSBUaGViYW5zIHN0YW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIEtpbmcsIHRoZWlyIGVuZW1pZXMgYXJlIGJvdW5kIHRvIHN0YW5kIGJ5IHRoZSBHcmVla3MuIDwvdHJhbnNsYXRpb24+"
translation['14.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBiZWxpZXZlLCB0aGVuLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGNhdXNlIG9mIGp1c3RpY2UgYW5kIHRob3NlIHdobyBkZWZlbmQgaXQgd2lsbCBwcm92ZSBzdHJvbmdlciB0aGFuIHRoZQogICAgICAgICAgICAgICAgICAgIHRyYWl0b3JzIGFuZCB0aGUgYmFyYmFyaWFuIGFnYWluc3QgYWxsIG9wcG9zaXRpb24uIFRoZXJlZm9yZSBJIHNheSB0aGF0IHdlIG11c3QKICAgICAgICAgICAgICAgICAgICBub3QgYmUgdW5kdWx5IGFsYXJtZWQsIG5vciBtdXN0IHdlIGJlIHRlbXB0ZWQgdG8gY29tbWVuY2UgaG9zdGlsaXRpZXMuIEFuZAogICAgICAgICAgICAgICAgICAgIGluZGVlZCBJIGNhbm5vdCBzZWUgdGhhdCBhbnkgb2YgdGhlIG90aGVyIEdyZWVrcyBoYXZlIHJlYXNvbiB0byBkcmVhZCB0aGlzIHdhci4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hvIG9mIHRoZW0gZG9lcyBub3Qga25vdyB0aGF0IGFzIGxvbmcKICAgICAgICAgICAgICAgICAgICBhcyB0aGV5IHdlcmUgb2Ygb25lIG1pbmQgYW5kIHJlZ2FyZGVkIHRoZSBQZXJzaWFuIGFzIHRoZWlyIGNvbW1vbiBlbmVteSwgdGhleQogICAgICAgICAgICAgICAgICAgIGNvdWxkIGNvdW50IG9uIG1hbnkgYWR2YW50YWdlcywgYnV0IGV2ZXIgc2luY2UgdGhleSB0aG91Z2h0IG9mIGhpbSBhcyBhIGZyaWVuZAogICAgICAgICAgICAgICAgICAgIHRvIGZhbGwgYmFjayBvbiBhbmQgd2VyZSB0b3JuIGFzdW5kZXIgYnkgdGhlaXIgb3duIHByaXZhdGUgcXVhcnJlbHMsIHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHN1ZmZlcmVkIHN1Y2ggZGlzYXN0ZXJzIGFzIG5vIG9uZSB3b3VsZCBoYXZlIGRldmlzZWQgZm9yIHRoZW0gZXZlbiBpbiBhbgogICAgICAgICAgICAgICAgICAgIGltcHJlY2F0aW9uLiBJZiB0aGF0IGlzIHNvLCBhcmUgd2UgdG8gZmVhciB0aGlzIG1hbiwgd2hvbSBmb3J0dW5lIGFuZCB0aGUgdm9pY2UKICAgICAgICAgICAgICAgICAgICBvZiBIZWF2ZW4gcHJvY2xhaW0gdG8gYmUgYW4gdW5wcm9maXRhYmxlIGZyaWVuZCBhbmQgYW4gYXVzcGljaW91cyBmb2U/IE5ldmVyIQogICAgICAgICAgICAgICAgICAgIFlldCBsZXQgdXMgZG8gaGltIG5vIHdyb25nIGVpdGhlciwgYm90aCBpbiBvdXIgb3duIGludGVyZXN0cyBhbmQgaW4gdmlldyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB1bnJlc3QgYW5kIGRpc2xveWFsdHkgb2YgdGhlIG90aGVyIEdyZWVrcy4gPC90cmFuc2xhdGlvbj4="
translation['14.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5JZgogICAgICAgICAgICAgICAgICAgIGluZGVlZCB3ZSBjb3VsZCBhdHRhY2sgaGltIHdpdGggdW5hbmltaXR5LCBhbGwgYmFuZGVkIGFnYWluc3Qgb25lLCBJIHNob3VsZCBub3QKICAgICAgICAgICAgICAgICAgICBjb3VudCBpdCB3cm9uZyBpbiB1cyB0byBkbyBoaW0gd3JvbmcuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgY3VyaW91cwogICAgICAgICAgICAgICAgICAgICAgICBwaWVjZSBvZiBjYXN1aXN0cnkuPC9ub3RlPiBCdXQgc2luY2UgdGhpcyBpcyBpbXBvc3NpYmxlLCBJIHN1Z2dlc3QgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIGJlIGNhcmVmdWwgbm90IHRvIGdpdmUgdGhlIEtpbmcgYW4gb3Bwb3J0dW5pdHkgdG8gcG9zZSBhcyB0aGUgY2hhbXBpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgb3RoZXIgR3JlZWtzOyBmb3IgYXMgbG9uZyBhcyB5b3UgcmVtYWluIHF1aWV0LCBhbnkgc3VjaCBhY3Rpb24gb24gaGlzCiAgICAgICAgICAgICAgICAgICAgcGFydCB3b3VsZCBleGNpdGUgc3VzcGljaW9uLCBidXQgaWYgeW91IGFyZSB0aGUgYWdncmVzc29ycywgaGUgd2lsbCBzZWVtCiAgICAgICAgICAgICAgICAgICAgbmF0dXJhbGx5IGFueGlvdXMgdG8gYmVmcmllbmQgdGhlIHJlc3QsIGJlY2F1c2UgdGhleSBhcmUgaG9zdGlsZSB0byB5b3UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QsIHRoZW4sIGV4cG9zZSB0aGUgd2Vha25lc3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgR3JlZWtzIGJ5IGlzc3VpbmcgYSBzdW1tb25zIHdoaWNoIHRoZXkgd2lsbCBub3Qgb2JleSBhbmQgZGVjbGFyaW5nIGEgd2FyIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IGNhbm5vdCB3YWdlOyBidXQgaW4gcXVpZXRuZXNzIGFuZCBjb25maWRlbmNlIGdvIG9uIHdpdGggeW91ciBwcmVwYXJhdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGJlIGNvbnRlbnQgdGhhdCB0aGlzIHJlcG9ydCBvZiB5b3UgYmUgYnJvdWdodCB0byB0aGUgS2luZydzIGVhcnMsIG5vdAogICAgICAgICAgICAgICAgICAgIO+8iEhlYXZlbiBmb3JiaWQh77yJIHRoYXQgYWxsIHRoZSBHcmVla3MsIGluY2x1ZGluZyB0aGUgQXRoZW5pYW5zLAogICAgICAgICAgICAgICAgICAgIGFyZSBoZWxwbGVzcywgPC90cmFuc2xhdGlvbj4="
translation['14.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz50ZXJyaWZpZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzdHJhY3RlZOKAlHRoYXQgaXMgZmFyIGZyb20gYmVpbmcgdGhlIGNhc2XigJRidXQgdGhhdCBpZgogICAgICAgICAgICAgICAgICAgIGZhbHNlaG9vZCBhbmQgcGVyanVyeSB3ZXJlIG5vdCBhcyBkaXNncmFjZWZ1bCBpbiB0aGUgZXllcyBvZiB0aGUgR3JlZWtzIGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICBhcmUgcmVzcGVjdGFibGUgaW4gaGlzLCB5b3Ugd291bGQgbG9uZyBhZ28gaGF2ZSBtYXJjaGVkIGFnYWluc3QgaGltOyB0aGF0IGFzIGl0CiAgICAgICAgICAgICAgICAgICAgaXMsIHlvdSB3aWxsIG5vdCBmb3IgeW91ciBvd24gc2FrZXMgZG8gdGhpcywgYnV0IHlvdSBwcmF5IHRvIGFsbCB0aGUgZ29kcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgbWF5IGJlIHNtaXR0ZW4gd2l0aCB0aGUgc2FtZSBpbmZhdHVhdGlvbiBhcyB3ZXJlIGhpcyBhbmNlc3RvcnMgb2Ygb2xkLiBBbmQgaWYKICAgICAgICAgICAgICAgICAgICBpdCBjb21lcyBpbnRvIGhpcyBtaW5kIHRvIHJlZmxlY3Qgb24gdGhpczsgaGUgd2lsbCBmaW5kIHRoYXQgeW91ciByZXNvbHV0aW9ucwogICAgICAgICAgICAgICAgICAgIGFyZSBub3QgY2FyZWxlc3NseSB0YWtlbi4gPC90cmFuc2xhdGlvbj4="
translation['14.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBrbm93cyB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHdhcnMgd2UgZm91Z2h0IGFnYWluc3QgaGlzIGFuY2VzdG9ycyBoYXZlIG1hZGUgb3VyIGNpdHkgcHJvc3Blcm91cyBhbmQgcG93ZXJmdWwsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoYXQgdGhlIHBvbGljeSBvZiBpbmFjdGlvbiB0aGF0IHNoZSBvbmNlIHB1cnN1ZWQgZ2F2ZSBoZXIgbm8gc3VjaCBzdXByZW1hY3kKICAgICAgICAgICAgICAgICAgICBvdmVyIGFueSBvZiB0aGUgb3RoZXIgR3JlZWsgc3RhdGVzIGFzIHNoZSBlbmpveXMgdG9kYXkuIEFuZCBpbmRlZWQgaGUgc2VlcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIEdyZWVrcyBzdGFuZCBpbiBuZWVkIG9mIGEgcGVhY2VtYWtlciwgd2hldGhlciB2b2x1bnRhcnkgb3IgaW52b2x1bnRhcnksIGFuZAogICAgICAgICAgICAgICAgICAgIGhlIGtub3dzIHRoYXQgaW4gdGhhdCBjaGFyYWN0ZXIgaGUgd291bGQgaGltc2VsZiBhcHBlYXIgdG8gdGhlbSwgaWYgaGUgdHJpZWQgdG8KICAgICAgICAgICAgICAgICAgICBzdGlyIHVwIHdhci4gVGhlcmVmb3JlIGhlIHdpbGwgZmluZCB0aGUgcmVwb3J0cyB0aGF0IHJlYWNoIGhpbSBlYXN5IHRvCiAgICAgICAgICAgICAgICAgICAgdW5kZXJzdGFuZCBhbmQgZWFzeSB0byBiZWxpZXZlLiA8L3RyYW5zbGF0aW9uPg=="
translation['14.41'] = ""
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3VyIGR1dHksIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hlbiBkZWJhdGluZyBzdWNoCiAgICAgICAgICAgICAgICAgICAgaW1wb3J0YW50IG1hdHRlcnMsIGlzLCBJIHRoaW5rLCB0byBhbGxvdyBmcmVlZG9tIG9mIHNwZWVjaCB0byBldmVyeSBvbmUgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIGNvdW5zZWxsb3JzLiBQZXJzb25hbGx5LCBJIG5ldmVyIHRob3VnaHQgaXQgYSBkaWZmaWN1bHQgdGFzayB0byBwb2ludCBvdXQgdG8geW91CiAgICAgICAgICAgICAgICAgICAgdGhlIGJlc3QgcG9saWN54oCUZm9yLCB0byBzcGVhayBwbGFpbmx5LCB5b3UgYWxsIHNlZW0gdG8gbWUgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGRpc2Nlcm5lZCBpdCBhbHJlYWR54oCUYnV0IHJhdGhlciB0byBpbmR1Y2UgeW91IHRvIHB1dCBpdCBpbnRvCiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uOyBmb3Igd2hlbiBhIHJlc29sdXRpb24gaGFzIGJlZW4gYXBwcm92ZWQgYW5kIHBhc3NlZCwgaXQgaXMgbm8gbmVhcmVyCiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGlzaG1lbnQgdGhhbiBiZWZvcmUgaXQgd2FzIGFwcHJvdmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgaXMgb25lIG9mIHRoZSBibGVzc2luZ3MgZm9yIHdoaWNoLCBJIHRoaW5rLCB0aGUgZ29kcyBkZXNlcnZlIHlvdXIKICAgICAgICAgICAgICAgICAgICBncmF0aXR1ZGUsIHRoYXQgdGhlIHNhbWUgbWVuIHdobyBub3QgbG9uZyBhZ28gYXR0YWNrZWQgeW91IGluIHRoZSB3YW50b25uZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcHJpZGUsIG5vdyBmaW5kIGluIHlvdSBhbG9uZSB0aGUgaG9wZSBvZiB0aGVpciBzYWx2YXRpb24uIFlvdSBvdWdodCB0byBiZQogICAgICAgICAgICAgICAgICAgIGRlbGlnaHRlZCBhdCB5b3VyIHByZXNlbnQgb3Bwb3J0dW5pdHksIGJlY2F1c2UsIGlmIHlvdSBkZWNpZGUgYXJpZ2h0LCB5b3Ugd2lsbAogICAgICAgICAgICAgICAgICAgIGluIGZhY3Qgc3VjY2VlZCwgd2l0aCBob25vciB0byB5b3Vyc2VsdmVzLCBpbiBzaWxlbmNpbmcgdGhlIGV2aWwgdG9uZ3VlcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdHJhZHVjZSBvdXIgY2l0eS4gPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3ZSB3ZXJlIGNoYXJnZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgQ2hpYW5zLCBCeXphbnRpbmVzIGFuZCBSaG9kaWFucyB3aXRoIHBsb3R0aW5nIGFnYWluc3QgdGhlbSwgYW5kIHRoYXQgd2FzIHdoeQogICAgICAgICAgICAgICAgICAgIHRoZXkgY29uY2VydGVkIHRoZSBsYXN0IHdhciBhZ2FpbnN0IHVzOyBidXQgd2Ugc2hhbGwgYmUgYWJsZSB0byBwcm92ZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hlcmVhcyBNYXVzb2x1cywgdGhlIHByaW1lIG1vdmVyIGFuZCBpbnN0aWdhdG9yIGluIHRoZSBidXNpbmVzcywgd2hpbGUgY2FsbGluZwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgdGhlIGZyaWVuZCBvZiB0aGUgUmhvZGlhbnMsIGhhcyByb2JiZWQgdGhlbSBvZiB0aGVpciBsaWJlcnR5LCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGVyZWFzIHRoZSBDaGlhbnMgYW5kIEJ5emFudGluZXMsIHdobyBwb3NlZCBhcyB0aGVpciBhbGxpZXMsIG5ldmVyIGhlbHBlZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgaW4gZGlzdHJlc3MsIDwvdHJhbnNsYXRpb24+"
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPml0IGlzIHRvIHlvdSwgd2hvbSB0aGV5IGRyZWFkZWQsCiAgICAgICAgICAgICAgICAgICAgdG8geW91IGFsb25lIG9mIGFsbCB0aGUgc3RhdGVzIHRoYXQgdGhleSBvd2UgdGhlaXIgZGVsaXZlcmFuY2UuIEJ5IG1ha2luZyB0aGlzCiAgICAgICAgICAgICAgICAgICAgY2xlYXIgdG8gYWxsLCB5b3Ugd2lsbCB0ZWFjaCB0aGUgZGVtb2NyYXRzIGluIGV2ZXJ5IHN0YXRlIHRvIGNvbnNpZGVyIGZyaWVuZHNoaXAKICAgICAgICAgICAgICAgICAgICB3aXRoIHlvdSBhcyB0aGUgcGxlZGdlIG9mIHRoZWlyIHNhZmV0eSwgYW5kIG5vIGdyZWF0ZXIgYWR2YW50YWdlIGNvdWxkIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0byB3aW4gZnJvbSBhbGwgbWVuIHRoZWlyIHZvbHVudGFyeSBhbmQgdW5zdXNwZWN0aW5nIGdvb2R3aWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGFtIHN1cnByaXNlZCB0byBzZWUKICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBtZW4gdXJnaW5nIHRoZSBjaXR5LCBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBFZ3lwdGlhbnMsIHRvIG9wcG9zZSB0aGUKICAgICAgICAgICAgICAgICAgICBLaW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiwgYnV0IGRyZWFkaW5nIGhpbSB3aGVyZQogICAgICAgICAgICAgICAgICAgIHRoZSBSaG9kaWFuIGRlbW9jcmFjeSBpcyBjb25jZXJuZWQuIFlldCBldmVyeW9uZSBrbm93cyB0aGF0IHRoZSBSaG9kaWFucyBhcmUKICAgICAgICAgICAgICAgICAgICBHcmVla3MsIHdoaWxlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+IGlzIGEgZGl2aXNpb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgUGVyc2lhbiBFbXBpcmUuIDwvdHJhbnNsYXRpb24+"
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgb2YgeW91LCBJIHN1cHBvc2UsCiAgICAgICAgICAgICAgICAgICAgcmVtZW1iZXIgdGhhdCB3aGVuIHlvdSB3ZXJlIGRpc2N1c3NpbmcgUGVyc2lhbiBhZmZhaXJzLCBJIHdhcyB0aGUgZmlyc3QgdG8gY29tZQogICAgICAgICAgICAgICAgICAgIGZvcndhcmQgd2l0aCBhZHZpY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluIHRoZSBzcGVlY2ggPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYXZ5LWJvYXJkcy48L3RpdGxlPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxNCIgdmFsaWQ9InllcyI+RGVtLiAxNDwvYmlibD48L25vdGU+IGFuZCBJCiAgICAgICAgICAgICAgICAgICAgYmVsaWV2ZSBJIHdhcyB0aGUgb25seSBzcGVha2VyLCBvciBwZXJoYXBzIG9uZSBvdXQgb2YgdHdvLCB0byBzYXkgdGhhdCBJIHNob3VsZAogICAgICAgICAgICAgICAgICAgIHRoaW5rIGl0IHBydWRlbnQgaW4geW91IG5vdCB0byBtYWtlIHlvdXIgaG9zdGlsaXR5IHRvIHRoZSBLaW5nIHRoZSBwcmV0ZXh0IGZvcgogICAgICAgICAgICAgICAgICAgIHlvdXIgcHJlcGFyYXRpb25zLCBidXQgd2hpbGUgZXF1aXBwaW5nIHlvdXJzZWx2ZXMgYWdhaW5zdCB5b3VyIGV4aXN0aW5nIGVuZW1pZXMsCiAgICAgICAgICAgICAgICAgICAgdG8gZGVmZW5kIHlvdXJzZWx2ZXMgYWdhaW5zdCBoaW0gdG9vLCBpZiBoZSBhdHRlbXB0ZWQgdG8gZG8geW91IHdyb25nLiBOb3IgZGlkIEkKICAgICAgICAgICAgICAgICAgICBmYWlsIHRvIGNvbnZpbmNlIHlvdSB0aGF0IEkgd2FzIHJpZ2h0LCBidXQgeW91LCB0b28sIGFwcHJvdmVkIG9mIG15IHN1Z2dlc3Rpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmF2eS1ib2FyZHMuPC90aXRsZT4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTQiIHZhbGlkPSJ5ZXMiPkRlbS4gMTQ8L2JpYmw+PC90cmFuc2xhdGlvbj4="
translation['15.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPk15IHByZXNlbnQgc3BlZWNoLCB0aGVuLCBpcyB0aGUgc2VxdWVsIG9mCiAgICAgICAgICAgICAgICAgICAgbXkgZm9ybWVyIG9uZS4gRm9yIGluZGVlZCwgaWYgdGhlIEtpbmcgYWRtaXR0ZWQgbWUgdG8gaGlzIHByZXNlbmNlIGFuZCBhc2tlZCBtZQogICAgICAgICAgICAgICAgICAgIGZvciBteSBhZHZpY2UsIEkgc2hvdWxkIGdpdmUgaGltIHRoZSBzYW1lIHRoYXQgSSBnYXZlIHlvdeKAlHRvIGRlZmVuZAogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gc3ViamVjdHMsIGlmIGFueSBvZiB0aGUgR3JlZWtzIGF0dGFja2VkIHRoZW0sIGJ1dCB0byBjbGFpbSBubwogICAgICAgICAgICAgICAgICAgIHNvdmVyZWlnbnR5IG92ZXIgdGhvc2Ugd2hvIG93ZWQgaGltIG5vIGFsbGVnaWFuY2UuIDwvdHJhbnNsYXRpb24+"
translation['15.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBpZiB5b3UgbWFrZSBpdCBhIGdlbmVyYWwgcHJpbmNpcGxlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBhYmFuZG9uIHRvIHRoZSBLaW5nIGFsbCBwbGFjZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhcyBnb3QgaW50byBoaXMgcG93ZXIsIHdoZXRoZXIgYnkgc3VycHJpc2Ugb3IgYnkgZGVjZWl2aW5nIHNvbWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5oYWJpdGFudHMsIHRoZW4geW91ciBwcmluY2lwbGUgaXMsIEkgdGhpbmssIGEgd3Jvbmcgb25lOyBidXQgaWYgeW91IGZlZWwgdGhhdAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBjYXVzZSBvZiBqdXN0aWNlIHlvdSBhcmUgYm91bmQgdG8gZ28gdG8gd2FyIGFuZCBmYWNlIHRoZSBjb25zZXF1ZW5jZXMsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgaW4gdGhlIGZpcnN0IHBsYWNlLCB0aGUgbW9yZSB5b3UgYXJlIGRldGVybWluZWQgb24gc3VjaCBhY3Rpb24sIHRoZSBsZXNzCiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbnRseSB3aWxsIGl0IGJlIG5lY2Vzc2FyeSwgYW5kIHNlY29uZGx5LCB5b3Ugd2lsbCBiZSBzaG93aW5nIHRoZSBwcm9wZXIKICAgICAgICAgICAgICAgICAgICBzcGlyaXQuIDwvdHJhbnNsYXRpb24+"
translation['15.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlcmUgaXMgcHJlY2VkZW50IGJvdGggZm9yIG15IHByb3Bvc2FsIHRvIGZyZWUgdGhlIFJob2RpYW5zIGFuZCBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIGFjdGlvbiwgaWYgeW91IGFkb3B0IGl0LCBJIHdpbGwgcmVtaW5kIHlvdSBvZiBzb21lIHRoaW5ncyB0aGF0IHlvdSBoYXZlIGRvbmUsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgc3VjY2Vzc2Z1bGx5LiBZb3UgYXJlIHRoZSBtZW4sIEF0aGVuaWFucywgd2hvIG9uY2Ugc2VudCBUaW1vdGhldXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgaGVscCBvZiBBcmlvYmFyemFuZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBzYXRyYXAgb2YgUGhyeWdpYSwKICAgICAgICAgICAgICAgICAgICAgICAgd2hvIGpvaW5lZCB0aGUgcmV2b2x0IG9mIHRoZSBzYXRyYXBzIGluIDM2Mi4gSGUgd2FzIHNvb24gYWZ0ZXJ3YXJkcyBiZXRyYXllZAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgY3J1Y2lmaWVkLjwvbm90ZT4gYWRkaW5nIHRoaXMgY2xhdXNlIHRvIHlvdXIgaW5zdHJ1Y3Rpb25zLAogICAgICAgICAgICAgICAgICAgIOKAnHByb3ZpZGVkIHRoYXQgaGUgZG9lcyBub3QgdmlvbGF0ZSBvdXIgdHJlYXR5IHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgS2luZy7igJ0gVGltb3RoZXVzLCBzZWVpbmcgdGhhdCBBcmlvYmFyemFuZXMgd2FzIGluIG9wZW4gcmV2b2x0IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgS2luZyBhbmQgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjczIj5TYW1vczwvcGxhY2VOYW1lPiB3YXMgZ2Fycmlzb25lZCBieQogICAgICAgICAgICAgICAgICAgIEN5cHJvdGhlbWlzLCB3aG8gaGFkIGJlZW4gc3RhdGlvbmVkIHRoZXJlIGJ5IFRpZ3JhbmVzLCB0aGUgS2luZydzIHZpY2Vyb3ksCiAgICAgICAgICAgICAgICAgICAgYWJhbmRvbmVkIGhpcyBpbnRlbnRpb24gb2YgaGVscGluZyB0aGUgc2F0cmFwLCBidXQgaW52ZXN0ZWQgdGhlIGlzbGFuZCBhbmQgdXNlZAogICAgICAgICAgICAgICAgICAgIGhpcyBmb3JjZSB0byBsaWJlcmF0ZSBpdDsgPC90cmFuc2xhdGlvbj4="
translation['15.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdG8gdGhpcyB2ZXJ5IGRheQogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIG5vdCBiZWVuIGludm9sdmVkIGluIHdhciBvbiB0aG9zZSBncm91bmRzLiBGb3Igbm8gb25lIHdvdWxkIGdvIHRvIHdhcgogICAgICAgICAgICAgICAgICAgIGFzIHJlYWRpbHkgZm9yIGFnZ3JhbmRpemVtZW50IGFzIGZvciB0aGUgZGVmZW5jZSBvZiBoaXMgb3duIHBvc3Nlc3Npb25zOyBidXQKICAgICAgICAgICAgICAgICAgICB3aGlsZSBhbGwgbWVuIGZpZ2h0IGRlc3BlcmF0ZWx5IHRvIGtlZXAgd2hhdCB0aGV5IGFyZSBpbiBkYW5nZXIgb2YgbG9zaW5nLCBpdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCBzbyB3aXRoIGFnZ3JhbmRpemVtZW50IG1lbiBtYWtlIGl0LCBpbmRlZWQsIHRoZWlyIGFpbSwgYnV0IGlmIHByZXZlbnRlZCwKICAgICAgICAgICAgICAgICAgICB0aGV5IGRvIG5vdCBmZWVsIHRoYXQgdGhleSBoYXZlIHN1ZmZlcmVkIGFueSBpbmp1c3RpY2UgZnJvbSB0aGVpciBvcHBvbmVudHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['15.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHNpbmNlIEkKICAgICAgICAgICAgICAgICAgICBiZWxpZXZlIHRoYXQgbmVpdGhlciB3b3VsZCBBcnRlbWlzaWEgbm93IG9wcG9zZSB0aGlzIGFjdGlvbiBvbiBvdXIgcGFydCwgaWYgb3VyCiAgICAgICAgICAgICAgICAgICAgU3RhdGUgd2VyZSBvbmNlIGNvbW1pdHRlZCB0byBpdCwgZ2l2ZSBtZSB5b3VyIGF0dGVudGlvbiBmb3IgYSBsaXR0bGUgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXIgd2hldGhlciBteSByZWFzb25pbmcgaXMgc291bmQgb3Igbm90LiBJIHRoaW5rIHRoYXQgaWYgdGhlIEtpbmcncwogICAgICAgICAgICAgICAgICAgIGRlc2lnbnMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT4gd2VyZSBtZWV0aW5nIHdpdGggYW55CiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcywgQXJ0ZW1pc2lhIHdvdWxkIG1ha2UgYSBiaWcgZWZmb3J0IHRvIHNlY3VyZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gZm9yIGhpbSwgbm90IGZyb20gYW55IGdvb2R3aWxsIHRvd2FyZHMKICAgICAgICAgICAgICAgICAgICBoaW0sIGJ1dCBiZWNhdXNlLCB3aGlsZSBoZSBpcyBpbiBoZXIgbmVpZ2hib3Job29kLCBzaGUgd291bGQgbGlrZSB0byBwdXQgaGltCiAgICAgICAgICAgICAgICAgICAgdW5kZXIgYSBncmVhdCBvYmxpZ2F0aW9uLCBzbyB0aGF0IGhlIG1heSBnaXZlIGhlciBhcyBjb3JkaWFsIGEgcmVjb2duaXRpb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWNrbm93bGVkZ2luZyBoZXIgYXMgdGhlIHN1Y2Nlc3NvciBvZgogICAgICAgICAgICAgICAgICAgICAgICBNYXVzb2x1cy48L25vdGU+IGFzIHBvc3NpYmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['15.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwb3J0cyBhcmUgdHJ1ZSBhbmQgaGUgaGFzIGZhaWxlZCBpbiBhbGwgaGlzIGF0dGVtcHRzLCBzaGUgbXVzdCBhcmd1ZSB0aGF0IHRoaXMKICAgICAgICAgICAgICAgICAgICBpc2xhbmQgd291bGQgYmUgb2Ygbm8gdXNlIHRvIGhpbSBhdCBwcmVzZW50LXdoaWNoIGlzIHRydWUgZW5vdWdo4oCUYnV0CiAgICAgICAgICAgICAgICAgICAgbWlnaHQgc2VydmUgYXMgYSBmb3J0cmVzcyB0byBvdmVyYXdlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNTgiPkNhcmlhPC9wbGFjZU5hbWU+IGFuZCBjaGVjayBhbnkgbW92ZSBvbiBoZXIgcGFydC4gVGhlcmVmb3JlIEkgdGhpbmsgc2hlCiAgICAgICAgICAgICAgICAgICAgd291bGQgcmF0aGVyIHRoYXQgeW91IGhhZCB0aGUgaXNsYW5kLCBpZiBub3QgdG9vIG9idmlvdXNseSBzdXJyZW5kZXJlZCBieSBoZXIsCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGF0IGhlIHNob3VsZCBnZXQgaXQuIEkgZG8gbm90LCBpbmRlZWQsIGV4cGVjdCB0aGF0IHNoZSB3aWxsIHNlbmQgYW55IGhlbHAKICAgICAgICAgICAgICAgICAgICB0byB0aGUgUmhvZGlhbiBnb3Zlcm5tZW50LCBvciBpZiBzaGUgZG9lcywgaXQgd2lsbCBiZSBmZWVibGUgYW5kIGhhbGYtaGVhcnRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSBhcyB0byB0aGUgS2luZywgSSBzaG91bGQgbm90IGxpa2UgdG8KICAgICAgICAgICAgICAgICAgICBzYXkgdGhhdCBJIGtub3cgd2hhdCBoZSBpcyBhY3R1YWxseSBnb2luZyB0byBkbywgYnV0IHRoYXQgaXQgaXMgdG8gb3VyIGFkdmFudGFnZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgc2hvdWxkIGF0IG9uY2UgbWFrZSBpdCBjbGVhciB3aGV0aGVyIGhlIGlzIGdvaW5nIHRvIGNsYWltIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPiBvciBub3TigJR0aGF0IEkgc2hvdWxkIG1haW50YWluCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpdmVseS4gRm9yIHdoZW4gaGUgZG9lcyBjbGFpbSBpdCwgeW91IHdpbGwgaGF2ZSB0byB0YWtlIGNvdW5zZWwsIG5vdCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgUmhvZGlhbnMgb25seSwgYnV0IGZvciB5b3Vyc2VsdmVzIGFuZCBhbGwgdGhlIEdyZWVrcy4gPC90cmFuc2xhdGlvbj4="
translation['15.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIHlldCwgZXZlbiBpZiB0aGUKICAgICAgICAgICAgICAgICAgICBwYXJ0eSBhdCBwcmVzZW50IGluIHBvc3Nlc3Npb24gaGVsZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYnkgdGhlaXIgb3duIHN0cmVuZ3RoLCBJIHNob3VsZCBub3QgaGF2ZSBhZHZpc2VkIHlvdSB0bwogICAgICAgICAgICAgICAgICAgIHRha2UgdGhlaXIgc2lkZSwgZXZlbiBpZiB0aGV5IHByb21pc2VkIHRvIGRvIGV2ZXJ5dGhpbmcgeW91IHdpc2hlZC4gRm9yIEkgbm90aWNlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhdCB0aGUgc3RhcnQsIGluIG9yZGVyIHRvIG92ZXJ0aHJvdyB0aGUgZGVtb2NyYWN5LCB0aGV5IGVubGlzdGVkIHNvbWUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY2l0aXplbnMgb24gdGhlaXIgc2lkZSwgYW5kIHdoZW4gdGhleSBoYWQgc3VjY2VlZGVkLCBzZW50IHRoZW0gaW50bwogICAgICAgICAgICAgICAgICAgIGJhbmlzaG1lbnQgYWdhaW4uIE5vdyBtZW4gd2hvIGhhdmUgYmVlbiBmYWl0aGZ1bCB0byBuZWl0aGVyIHNpZGUgY291bGQgbmV2ZXIsIEkKICAgICAgICAgICAgICAgICAgICBhbSBzdXJlLCBiZWNvbWUgc3RlYWRmYXN0IGFsbGllcyB0byB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['15.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciBJIHNob3VsZCBuZXZlciBoYXZlIG1hZGUgdGhpcyBwcm9wb3NhbCwgaGFkIEkgdGhvdWdodCB0aGF0IGl0IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYmVuZWZpdCB0aGUgUmhvZGlhbiBkZW1vY3JhdHMgYWxvbmUsIGZvciBJIGFtIG5vdCB0aGUgb2ZmaWNpYWwgcGF0cm9uIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBwYXJ0eSwgbm9yIGRvIEkgY291bnQgYW55IG9mIHRoZW0gYW1vbmcgbXkgcHJpdmF0ZSBmcmllbmRzLiBZZXQgZXZlbiBpZiBib3RoCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbW90aXZlcyBoYWQgYmVlbiBwcmVzZW50LCBJIHNob3VsZCBub3QgaGF2ZSBwcm9wb3NlZCBpdCwgaWYgSSBoYWQgbm90CiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGF0IGl0IHdvdWxkIGJlbmVmaXQgeW91LCBzaW5jZSBJIHNoYXJlIGluIHlvdXIgc2F0aXNmYWN0aW9uIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGZhdGUgb2YgdGhlIFJob2RpYW5z4oCUaWYgb25lIHdobyBpcyBwbGVhZGluZyBmb3IgdGhlaXIgZGVsaXZlcmFuY2UgbWF5CiAgICAgICAgICAgICAgICAgICAgYmUgcGVybWl0dGVkIHRvIHNheSBzby4gRm9yIHRoZXkgZ3J1ZGdlZCB5b3UgdGhlIHJlY292ZXJ5IG9mIHlvdXIgcmlnaHRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBub3cgdGhleSBoYXZlIGxvc3QgdGhlaXIgb3duIGxpYmVydHk7IHRoZXkgc3B1cm5lZCBhbiBhbGxpYW5jZSB3aXRoIHlvdSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgR3JlZWtzIGFuZCB0aGVpciBiZXR0ZXJzLCBhbmQgbm93IHRoZXkgYXJlIHNsYXZlcyBvZiBiYXJiYXJpYW5zLCBzbGF2ZXMgb2YKICAgICAgICAgICAgICAgICAgICBzbGF2ZXMsIHdob20gdGhleSBhZG1pdHRlZCBpbnRvIHRoZWlyIGNpdGFkZWxzLiA8L3RyYW5zbGF0aW9uPg=="
translation['15.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5JIGFtIGFsbW9zdCBpbmNsaW5lZCB0byBzYXksIGlmIHlvdSBjaG9vc2UgdG8gaGVscCB0aGVtLCB0aGF0IHRoaXMgaGFzIGJlZW4gYQogICAgICAgICAgICAgICAgICAgIHNhbHV0YXJ5IGxlc3NvbiBmb3IgdGhlbTsgZm9yIGluIHByb3NwZXJpdHkgSSBkb3VidCB3aGV0aGVyIHRoZXkgd291bGQgZXZlciBoYXZlCiAgICAgICAgICAgICAgICAgICAgY2hvc2VuIHRvIHNob3cgdGhlaXIgZ29vZCBzZW5zZSwgYmVpbmcgUmhvZGlhbnMsIGJ1dCB3aGVuIHRlc3RlZCBieSBleHBlcmllbmNlCiAgICAgICAgICAgICAgICAgICAgYW5kIHRhdWdodCB0aGF0IGZvbGx5IGlzIGluIG1vc3QgY2FzZXMgYSBmcnVpdGZ1bCBzb3VyY2Ugb2YgZXZpbCwgdGhleSBtYXkKICAgICAgICAgICAgICAgICAgICBwZXJoYXBzIHdpdGggbHVjayBncm93IG1vcmUgc2Vuc2libGUgZm9yIHRoZSBmdXR1cmU7IGFuZCB0aGF0IEkgcmVnYXJkIGFzIG5vCiAgICAgICAgICAgICAgICAgICAgc21hbGwgYWR2YW50YWdlIGZvciB0aGVtLiBBY2NvcmRpbmdseSwgSSBzYXkgdGhhdCBpdCBpcyB5b3VyIGR1dHkgdG8gdHJ5IHRvIHNhdmUKICAgICAgICAgICAgICAgICAgICB0aGVtIGFuZCB0byBsZXQgYnlnb25lcyBiZSBieWdvbmVzLCByZW1lbWJlcmluZyB0aGF0IHlvdSB0b28gaGF2ZSBpbiBtYW55IGNhc2VzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBsZWQgYnkgc2NoZW1lcnMgaW50byBlcnJvcnMsIGZvciBub25lIG9mIHdoaWNoIHlvdSB3b3VsZCB5b3Vyc2VsdmVzIGFkbWl0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3Ugb3VnaHQgdG8gcGF5IHRoZSBwZW5hbHR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['15.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IG1heSBhbHNvIG9ic2VydmUsIEF0aGVuaWFucywgdGhhdCB5b3UgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgZW5nYWdlZCBpbiBtYW55IHdhcnMgYm90aCB3aXRoIGRlbW9jcmFjaWVzIGFuZCB3aXRoIG9saWdhcmNoaWVzLiBZb3UgZG8gbm90IG5lZWQKICAgICAgICAgICAgICAgICAgICB0byBiZSB0b2xkIHRoYXQ7IGJ1dCBwZXJoYXBzIG5vbmUgb2YgeW91IGNvbnNpZGVycyB3aGF0IGFyZSB5b3VyIG1vdGl2ZXMgZm9yIHdhcgogICAgICAgICAgICAgICAgICAgIHdpdGggZWl0aGVyLiBXaGF0LCB0aGVuLCBhcmUgdGhvc2UgbW90aXZlcz8gV2l0aCBkZW1vY3JhY2llcywgZWl0aGVyIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBxdWFycmVscywgd2hlbiB0aGV5IGNvdWxkIG5vdCBiZSBhZGp1c3RlZCBieSB0aGUgU3RhdGUsIG9yIGEgcXVlc3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICB0ZXJyaXRvcnkgb3IgYm91bmRhcmllcywgb3IgZWxzZSByaXZhbHJ5IG9yIHRoZSBjbGFpbSB0byBsZWFkZXJzaGlwOyB3aXRoCiAgICAgICAgICAgICAgICAgICAgb2xpZ2FyY2hpZXMgeW91IGZpZ2h0IGZvciBub25lIG9mIHRoZXNlIHRoaW5ncywgYnV0IGZvciB5b3VyIGNvbnN0aXR1dGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICB5b3VyIGxpYmVydHkuIDwvdHJhbnNsYXRpb24+"
translation['15.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgSSBzaG91bGQgbm90IGhlc2l0YXRlCiAgICAgICAgICAgICAgICAgICAgdG8gc2F5IHRoYXQgSSB0aGluayBpdCBhIGdyZWF0ZXIgYWR2YW50YWdlIHRoYXQgYWxsIHRoZSBHcmVla3Mgc2hvdWxkIGJlIHlvdXIKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzIHVuZGVyIGRlbW9jcmFjeSB0aGFuIHlvdXIgZnJpZW5kcyB1bmRlciBvbGlnYXJjaHkuIEZvciB3aXRoIGZyZWUgbWVuIEkKICAgICAgICAgICAgICAgICAgICBkbyBub3QgdGhpbmsgdGhhdCB5b3Ugd291bGQgaGF2ZSBhbnkgZGlmZmljdWx0eSBpbiBtYWtpbmcgcGVhY2Ugd2hlbmV2ZXIgeW91CiAgICAgICAgICAgICAgICAgICAgd2lzaGVkLCBidXQgd2l0aCBhbiBvbGlnYXJjaGljYWwgc3RhdGUgSSBkbyBub3QgYmVsaWV2ZSB0aGF0IGV2ZW4gZnJpZW5kbHkKICAgICAgICAgICAgICAgICAgICByZWxhdGlvbnMgY291bGQgYmUgcGVybWFuZW50LCBmb3IgdGhlIGZldyBjYW4gbmV2ZXIgYmUgd2VsbCBkaXNwb3NlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBtYW55LCBub3IgdGhvc2Ugd2hvIGNvdmV0IHBvd2VyIHRvIHRob3NlIHdobyBoYXZlIGNob3NlbiBhIGxpZmUgb2YgZXF1YWwKICAgICAgICAgICAgICAgICAgICBwcml2aWxlZ2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['15.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2VlaW5nIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3MCI+Q2hpb3M8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTXl0aWxlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE15dGlsZW5lIj5NeXRpbGVuZTwvcGxhY2VOYW1lPiBhcmUgcnVsZWQgYnkgb2xpZ2FyY2hzLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYW5kLCBJIG1pZ2h0IGFsbW9zdCBzYXksIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSB3b3JsZCBhcmUgbm93IGJlaW5nIHNlZHVjZWQgaW50byB0aGlzIGZvcm0gb2Ygc2xhdmVyeSwgSSBhbSBzdXJwcmlzZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIG5vbmUgb2YgeW91IGNvbmNlaXZlcyB0aGF0IG91ciBjb25zdGl0dXRpb24gdG9vIGlzIGluIGRhbmdlciwgbm9yIGRyYXdzIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmNsdXNpb24gdGhhdCBpZiBhbGwgb3RoZXIgc3RhdGVzIGFyZSBvcmdhbml6ZWQgb24gb2xpZ2FyY2hpY2FsIHByaW5jaXBsZXMsIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgaW1wb3NzaWJsZSB0aGF0IHRoZXkgc2hvdWxkIGxlYXZlIHlvdXIgZGVtb2NyYWN5IGFsb25lLiBGb3IgdGhleSBrbm93IHRoYXQKICAgICAgICAgICAgICAgICAgICBub25lIGJ1dCB5b3Ugd2lsbCBicmluZyBmcmVlZG9tIGJhY2sgYWdhaW4sIGFuZCBvZiBjb3Vyc2UgdGhleSB3YW50IHRvIGRlc3Ryb3kKICAgICAgICAgICAgICAgICAgICB0aGUgc291cmNlIGZyb20gd2hpY2ggdGhleSBhcmUgZXhwZWN0aW5nIHJ1aW4gdG8gdGhlbXNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['15.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGFsbCBvdGhlciB3cm9uZ2RvZXJzIG11c3QgYmUgY29uc2lkZXJlZCB0aGUKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzIG9mIHRob3NlIG9ubHkgd2hvbSB0aGV5IGhhdmUgd3JvbmdlZCwgYnV0IHdoZW4gbWVuIG92ZXJ0aHJvdyBmcmVlCiAgICAgICAgICAgICAgICAgICAgY29uc3RpdHV0aW9ucyBhbmQgY2hhbmdlIHRoZW0gdG8gb2xpZ2FyY2hpZXMsIEkgdXJnZSB5b3UgdG8gcmVnYXJkIHRoZW0gYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIGVuZW1pZXMgb2YgYWxsIHdobyBsb3ZlIGZyZWVkb20uIDwvdHJhbnNsYXRpb24+"
translation['15.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuCiAgICAgICAgICAgICAgICAgICAgYWdhaW4sIEF0aGVuaWFucywgaXQgaXMgcmlnaHQgdGhhdCB5b3UsIGxpdmluZyB1bmRlciBhIGRlbW9jcmFjeSwgc2hvdWxkIHNob3cKICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBzeW1wYXRoeSBmb3IgZGVtb2NyYWNpZXMgaW4gZGlzdHJlc3MgYXMgeW91IHdvdWxkIGV4cGVjdCBvdGhlcnMgdG8gc2hvdwogICAgICAgICAgICAgICAgICAgIGZvciB5b3UsIGlmIGV2ZXLigJR3aGljaCBHb2QgZm9yYmlkIS15b3Ugd2VyZSBpbiB0aGUgc2FtZSBwbGlnaHQuIEV2ZW4KICAgICAgICAgICAgICAgICAgICBpZiBhbnlvbmUgaXMgcHJlcGFyZWQgdG8gc2F5IHRoYXQgdGhlIFJob2RpYW5zIGFyZSBzZXJ2ZWQgcmlnaHQsIHRoaXMgaXMgbm90IHRoZQogICAgICAgICAgICAgICAgICAgIHRpbWUgdG8gZXh1bHQgb3ZlciB0aGVtLCBmb3IgcHJvc3Blcm91cyBjb21tdW5pdGllcyBvdWdodCBhbHdheXMgdG8gc2hvdwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgcmVhZHkgdG8gY29uc3VsdCB0aGUgYmVzdCBpbnRlcmVzdHMgb2YgdGhlIHVuZm9ydHVuYXRlLCByZW1lbWJlcmluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGZ1dHVyZSBpcyBoaWRkZW4gZnJvbSBhbGwgbWVuJ3MgZXllcy4gPC90cmFuc2xhdGlvbj4="
translation['15.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlIHJlcGVhdGVkbHkgaGVhcmQgaXQgc2FpZCBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgQXNzZW1ibHkgdGhhdCB3aGVuIG1pc2ZvcnR1bmUgYmVmZWxsIG91ciBkZW1vY3JhY3ksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlVuZGVyIHRoZSBUaGlydHkgVHlyYW50cy48L25vdGU+IHRoZXJlIHdlcmUgc29tZSBwZW9wbGUgd2hvCiAgICAgICAgICAgICAgICAgICAgdXJnZWQgdGhhdCBpdCBzaG91bGQgYmUgcmVzdG9yZWQsIGFuZCBvZiB0aGVtIEkgd2lsbCBoZXJlIG1lbnRpb24gdGhlIEFyZ2l2ZXMKICAgICAgICAgICAgICAgICAgICBvbmx5LCBhbmQgdGhhdCBicmllZmx5LiBGb3IgSSBzaG91bGQgYmUgc29ycnkgaWYgeW91LCB3aG8gYXJlIHJlbm93bmVkIGZvcgogICAgICAgICAgICAgICAgICAgIHJlc2N1aW5nIHRoZSB1bmZvcnR1bmF0ZSwgc2hvdWxkIHByb3ZlIHlvdXJzZWx2ZXMgaW4gdGhpcyBpbnN0YW5jZSB3b3JzZSBtZW4KICAgICAgICAgICAgICAgICAgICB0aGFuIHRoZSBBcmdpdmVzLiBUaGV5LCBiZWluZyB0aGUgaW1tZWRpYXRlIG5laWdoYm9ycyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VlaW5nIHRoZW0gbWFzdGVycyBvZiBsYW5kIGFuZCBzZWEsIGRpZCBub3QgaGVzaXRhdGUgb3IgZmVhciB0byBzaG93IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZ29vZHdpbGwgdG8geW91LCBidXQgYWN0dWFsbHkgY2FycmllZCBhIGRlY3JlZSB0aGF0IHRoZSBlbnZveXMsIHdobywgd2UgYXJlCiAgICAgICAgICAgICAgICAgICAgdG9sZCwgaGFkIGNvbWUgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4gdG8gY2xhaW0KICAgICAgICAgICAgICAgICAgICB0aGUgcGVyc29ucyBvZiBzb21lIG9mIHlvdXIgcmVmdWdlZXMsIHNob3VsZCBiZSBkZW5vdW5jZWQgYXMgZW5lbWllcyB1bmxlc3MgdGhleQogICAgICAgICAgICAgICAgICAgIHRvb2sgdGhlaXIgZGVwYXJ0dXJlIGJlZm9yZSB0aGUgc2V0dGluZyBvZiB0aGUgc3VuLiA8L3RyYW5zbGF0aW9uPg=="
translation['15.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHdvdWxkIGl0IG5vdCBiZSBkaXNjcmVkaXRhYmxlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpZiB3aGVuIHRoZSBjb21tb25zIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJnb3MiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFyZ29zIj5BcmdvczwvcGxhY2VOYW1lPiBmZWFyZWQgbm90IHRoZSBhdXRob3JpdHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnMgaW4gdGhlIGRheSBvZiB0aGVpciBtaWdodCwgeW91LCB3aG8gYXJlIEF0aGVuaWFucywgc2hvdWxkIGZlYXIKICAgICAgICAgICAgICAgICAgICBvbmUgd2hvIGlzIGF0IG9uY2UgYSBiYXJiYXJpYW4gYW5kIGEgd29tYW4/IEluZGVlZCwgdGhlIEFyZ2l2ZXMgbWlnaHQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHBsZWFkZWQgdGhhdCB0aGV5IGhhZCBvZnRlbiBiZWVuIGRlZmVhdGVkIGJ5IHRoZSBMYWNlZGFlbW9uaWFucywgYnV0IHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVhdGVuIHRoZSBLaW5nIGFnYWluIGFuZCBhZ2FpbiwgYW5kIGhhdmUgbmV2ZXIgYmVlbiBiZWF0ZW4gZWl0aGVyIGJ5IGhpcyBzbGF2ZXMKICAgICAgICAgICAgICAgICAgICBvciBieSB0aGVpciBtYXN0ZXIgaGltc2VsZjsgZm9yIGlmIGV2ZXIgdGhlIEtpbmcgaGFzIGdhaW5lZCBzb21lIHNsaWdodAogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZSBvdmVyIG91ciBjaXR5LCBoZSBoYXMgZG9uZSBpdCBieSBicmliaW5nIHRoZSBtb3N0IHdvcnRobGVzcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBHcmVla3MsIHRoZSB0cmFpdG9ycyB0byB0aGVpciBjYXVzZSwgYW5kIG5ldmVyIGluIGFueSBvdGhlciB3YXkuIDwvdHJhbnNsYXRpb24+"
translation['15.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZXZlbiB0aGF0IHN1Y2Nlc3MgaGFzIG5vdCBiZW5lZml0ZWQgaGltLCBidXQgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBmaW5kIGhpbSBhdCBvbmUgYW5kIHRoZSBzYW1lIHRpbWUgdXNpbmcgdGhlIExhY2VkYWVtb25pYW5zIHRvIGNyaXBwbGUgb3VyCiAgICAgICAgICAgICAgICAgICAgY2l0eSwgYW5kIHN0cnVnZ2xpbmcgZm9yIGhpcyBvd24gY3Jvd24gYWdhaW5zdCBDbGVhcmNodXMgYW5kIEN5cnVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgU3BhcnRhbiBDbGVhcmNodXMgY29tbWFuZGVkIHRoZSBHcmVlawogICAgICAgICAgICAgICAgICAgICAgICBtZXJjZW5hcmllcyB3aG8gbWFyY2hlZCB3aXRoIEN5cnVzIHRoZSBZb3VuZ2VyIHRvIHRoZSBiYXR0bGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MjEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYyMSI+Q3VuYXhhPC9wbGFjZU5hbWU+LCA0MDEuPC9ub3RlPiBTbyBoZSBoYXMgbmV2ZXIgYmVhdGVuCiAgICAgICAgICAgICAgICAgICAgdXMgaW4gdGhlIGZpZWxkLCBub3IgaGF2ZSBoaXMgaW50cmlndWVzIGdhaW5lZCBoaW0gYW55IGFkdmFudGFnZS4gSSBvYnNlcnZlIHRoYXQKICAgICAgICAgICAgICAgICAgICBzb21lIG9mIHlvdSBhcmUgd29udCB0byBkaXNtaXNzIFBoaWxpcCBhcyBhIHBlcnNvbiBvZiBubyBhY2NvdW50LCBidXQgdG8gc3BlYWsKICAgICAgICAgICAgICAgICAgICB3aXRoIGF3ZSBvZiB0aGUgS2luZyBhcyBmb3JtaWRhYmxlIHRvIHRob3NlIHdob20gaGUgbWFya3MgYXMgaGlzIGVuZW1pZXMuIElmIHdlCiAgICAgICAgICAgICAgICAgICAgYXJlIG5vdCB0byBzdGFuZCB1cCB0byB0aGUgb25lIGJlY2F1c2UgaGUgaXMgY29udGVtcHRpYmxlLCBhbmQgaWYgd2UgeWllbGQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgYmVjYXVzZSBoZSBpcyBmb3JtaWRhYmxlLCBhZ2FpbnN0IHdob20sIEF0aGVuaWFucywgc2hhbGwgd2UgZXZlcgogICAgICAgICAgICAgICAgICAgIG1hcnNoYWwgb3VyIGZvcmNlcz8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MjEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYyMSI+Q3VuYXhhPC9wbGFjZU5hbWU+LCA0MDEuPC90cmFuc2xhdGlvbj4="
translation['15.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgYXJlIHNvbWUgYW1vbmcgeW91LCBBdGhlbmlhbnMsIHdobyBhcmUgdmVyeSBjbGV2ZXIgYXQgcGxlYWRpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgcmlnaHRzIG9mIG90aGVycyBhZ2FpbnN0IHlvdSwgYW5kIEkgd291bGQganVzdCBnaXZlIHRoZW0gdGhpcyBwaWVjZSBvZgogICAgICAgICAgICAgICAgICAgIGFkdmljZeKAlHRvIGZpbmQgc29tZXRoaW5nIHRvIHNheSBmb3IgeW91ciByaWdodHMgYWdhaW5zdCBvdGhlcnMsIHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHRoZW1zZWx2ZXMgbWF5IHNldCB0aGUgZXhhbXBsZSBvZiBkb2luZyB3aGF0IGlzIHByb3Blcjsgc2luY2UgaXQgaXMKICAgICAgICAgICAgICAgICAgICBhYnN1cmQgZm9yIGEgbWFuIHRvIGxlY3R1cmUgeW91IGFib3V0IHJpZ2h0cyB3aGVuIGhlIGlzIG5vdCBkb2luZyB3aGF0IGlzIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgYW5kIGl0IGlzIG5vdCByaWdodCB0aGF0IGEgY2l0aXplbiBzaG91bGQgaGF2ZSBnaXZlbiBoaXMgYXR0ZW50aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBhcmd1bWVudHMgYWdhaW5zdCB5b3UgYW5kIHRvIG5vbmUgaW4geW91ciBmYXZvdXIuIDwvdHJhbnNsYXRpb24+"
translation['15.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5JIGJlZyB5b3UsIGluIEhlYXZlbidzIG5hbWUsIHRvIGNvbnNpZGVyIHRoaXMgcG9pbnQ6CiAgICAgICAgICAgICAgICAgICAgd2h5IGlzIHRoZXJlIG5vIG1hbiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICB0byBkaXNzdWFkZSBoaXMgY291bnRyeS1tZW4gZnJvbSBzZWl6aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNlZG9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDaGFsY2Vkb24iPkNoYWxjZWRvbjwvcGxhY2VOYW1lPiwgd2hpY2ggYmVsb25ncyB0byB0aGUgS2luZyBhbmQgd2FzIG9uY2UgaGVsZCBieSB5b3UsCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgdGhlIEJ5emFudGluZXMgaGF2ZSBubyBzaGFkb3cgb2YgYSBjbGFpbSB0byBpdD8gT3IgZnJvbSB0YWtpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTZWx5bWJyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNlbHltYnJpYSI+U2VseW1icmlhPC9wbGFjZU5hbWU+LCBvbmNlIGFuIGFsbHkgb2YgeW91cnMsIGFuZAogICAgICAgICAgICAgICAgICAgIG1ha2luZyBpdCB0cmlidXRhcnkgdG8gdGhlbXNlbHZlcywgYW5kIGluY2x1ZGluZyBpdCBpbiB0aGUgdGVycml0b3J5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPiwgY29udHJhcnkgdG8gYWxsCiAgICAgICAgICAgICAgICAgICAgb2F0aHMgYW5kIGFncmVlbWVudHMgd2hpY2ggZ3VhcmFudGVlIHRoZSBhdXRvbm9teSBvZiB0aG9zZSBjaXRpZXM/IDwvdHJhbnNsYXRpb24+"
translation['15.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5ObyBvbmUgaGFzIGNvbWUgZm9yd2FyZCB0byBkaXNzdWFkZSBNYXVzb2x1cyB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgd2FzIGFsaXZlLCBvciBBcnRlbWlzaWEgc2luY2UgaGlzIGRlYXRoLCBmcm9tIHNlaXppbmcgQ29zIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTI2NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMjY2Ij5SaG9kZXM8L3BsYWNlTmFtZT4gYW5kIHZhcmlvdXMgb3RoZXIgR3JlZWsgc3RhdGVzLCB3aGljaAogICAgICAgICAgICAgICAgICAgIHRoZSBLaW5nLCB0aGVpciBvdmVybG9yZCwgY2VkZWQgYnkgdHJlYXR5IHRvIHRoZSBHcmVla3MsIGFuZCBmb3Igd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgR3JlZWtzIG9mIHRob3NlIGRheXMgZmFjZWQgbWFueSBkYW5nZXJzIGFuZCB3b24gbXVjaCBob25vciBpbiB0aGUgZmllbGQuIEF0IGFueQogICAgICAgICAgICAgICAgICAgIHJhdGUsIGlmIHRoZXJlIGlzIGFueW9uZSB0byBnaXZlIGFkdmljZSB0byBlaXRoZXIgb2YgdGhlc2UgcG93ZXJzLCB0aGVyZSBhcmUKICAgICAgICAgICAgICAgICAgICBub25lLCBpdCBzZWVtcywgdG8gcHJvZml0IGJ5IGhpcyBhZHZpY2UuIDwvdHJhbnNsYXRpb24+"
translation['15.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5JbiBteQogICAgICAgICAgICAgICAgICAgIG9waW5pb24gaXQgaXMgcmlnaHQgdG8gcmVzdG9yZSB0aGUgUmhvZGlhbiBkZW1vY3JhY3k7IHlldCBldmVuIGlmIGl0IHdlcmUgbm90CiAgICAgICAgICAgICAgICAgICAgcmlnaHQsIEkgc2hvdWxkIGZlZWwganVzdGlmaWVkIGluIHVyZ2luZyB5b3UgdG8gcmVzdG9yZSBpdCwgd2hlbiBJIG9ic2VydmUgd2hhdAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHBlb3BsZSBhcmUgZG9pbmcuIFdoeSBzbz8gQmVjYXVzZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaWYgZXZlcnkgc3RhdGUgd2VyZSBiZW50IG9uIGRvaW5nIHJpZ2h0LCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGRpc2dyYWNlZnVsIGlmIHdlIGFsb25lIHJlZnVzZWQ7IGJ1dCB3aGVuIHRoZSBvdGhlcnMsIHdpdGhvdXQgZXhjZXB0aW9uLCBhcmUKICAgICAgICAgICAgICAgICAgICBwcmVwYXJpbmcgdGhlIG1lYW5zIHRvIGRvIHdyb25nLCBmb3IgdXMgYWxvbmUgdG8gbWFrZSBwcm9mZXNzaW9uIG9mIHJpZ2h0LAogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZW5nYWdpbmcgaW4gYW55IGVudGVycHJpc2UsIHNlZW1zIHRvIG1lIG5vdCBsb3ZlIG9mIHJpZ2h0IGJ1dCB3YW50IG9mCiAgICAgICAgICAgICAgICAgICAgY291cmFnZS4gRm9yIEkgbm90aWNlIHRoYXQgYWxsIG1lbiBoYXZlIHRoZWlyIHJpZ2h0cyBjb25jZWRlZCB0byB0aGVtIGluCiAgICAgICAgICAgICAgICAgICAgcHJvcG9ydGlvbiB0byB0aGUgcG93ZXIgYXQgdGhlaXIgZGlzcG9zYWwuIDwvdHJhbnNsYXRpb24+"
translation['15.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JCiAgICAgICAgICAgICAgICAgICAgY2FuIGNpdGUgYW4gaW5zdGFuY2UgdGhhdCBpcyBmYW1pbGlhciB0byB5b3UgYWxsLiBUaGUgR3JlZWtzIGhhdmUgdHdvCiAgICAgICAgICAgICAgICAgICAgICAgIHRyZWF0aWVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBmaXJzdCBpcyBwcm9iYWJseSB0aGUgc28tY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHBlYWNlIG9mIENhbGxpYXMgYWJvdXQgNDQ4OyB0aGUgc2Vjb25kIGlzIGNlcnRhaW5seSB0aGF0IG9mIEFudGFsY2lkYXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgMzg3Ljwvbm90ZT4gd2l0aCB0aGUgS2luZywgb25lIG1hZGUgYnkgb3VyIGNpdHkgYW5kIGNvbW1lbmRlZCBieSBhbGw7IGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXRlciBvbmUgbWFkZSBieSB0aGUgTGFjZWRhZW1vbmlhbnMsIHdoaWNoIGlzIG9mIGNvdXJzZSBjb25kZW1uZWQgYnkgYWxsOwogICAgICAgICAgICAgICAgICAgIGFuZCBpbiB0aGVzZSB0d28gdHJlYXRpZXMgcmlnaHRzIGFyZSBkaXZlcnNlbHkgZGVmaW5lZC4gT2YgcHJpdmF0ZSByaWdodHMgd2l0aGluCiAgICAgICAgICAgICAgICAgICAgYSBzdGF0ZSwgdGhlIGxhd3Mgb2YgdGhhdCBzdGF0ZSBncmFudCBhbiBlcXVhbCBhbmQgaW1wYXJ0aWFsIHNoYXJlIHRvIGFsbCwgd2VhawogICAgICAgICAgICAgICAgICAgIGFuZCBzdHJvbmcgYWxpa2U7IGJ1dCB0aGUgaW50ZXJuYXRpb25hbCByaWdodHMgb2YgR3JlZWsgc3RhdGVzIGFyZSBkZWZpbmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIHN0cm9uZyBmb3IgdGhlIHdlYWsuIDwvdHJhbnNsYXRpb24+"
translation['15.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBhcyB5b3UgaGF2ZSBhbHJlYWR5IG1hZGUgdXAgeW91ciBtaW5kcyB0byBkbyByaWdodCwKICAgICAgICAgICAgICAgICAgICB5b3UgbXVzdCB0YWtlIGNhcmUgdGhhdCBpdCBpcyBpbiB5b3VyIHBvd2VyIHRvIGNhcnJ5IG91dCB5b3VyIHB1cnBvc2U7IGFuZCBpdAogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgaW4geW91ciBwb3dlciwgaWYgeW91IGFyZSBhY2NlcHRlZCBhcyB0aGUgY29tbW9uIGNoYW1waW9ucyBvZiBHcmVlawogICAgICAgICAgICAgICAgICAgIGxpYmVydHkuIEJ1dCwgaW5ldml0YWJseSwgSSB0aGluaywgaXQgaXMgdmVyeSBkaWZmaWN1bHQgZm9yIHlvdSB0byBkbyBhbGwgdGhhdAogICAgICAgICAgICAgICAgICAgIGlzIHJlcXVpcmVkLiBBbGwgb3RoZXIgc3RhdGVzIGhhdmUgb25seSB0aGVpciBvcGVuIGVuZW1pZXMgdG8gY29udGVuZCB3aXRoLCBhbmQKICAgICAgICAgICAgICAgICAgICBpZiB0aGV5IGNhbiBiZWF0IHRoZW0sIHRoZXJlIGlzIG5vdGhpbmcgdG8gaGluZGVyIHRoZW0gZnJvbSBlbmpveWluZyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZTsgPC90cmFuc2xhdGlvbj4="
translation['15.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgeW91LCBBdGhlbmlhbnMsIGhhdmUgdHdvCiAgICAgICAgICAgICAgICAgICAgc3RydWdnbGVzIGJlZm9yZSB5b3U7IG9uZSBpcyB0aGUgc2FtZSB0aGF0IGF3YWl0cyB0aGUgcmVzdCwgYnV0IHRoZXJlIGlzIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBhbmQgbW9yZSBzZXJpb3VzIHN0cnVnZ2xlIHRoYXQgY29tZXMgYmVmb3JlIGl0LCBmb3IgeW91IGhhdmUgZ290IHRvIGRlZmVhdCBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgZGViYXRlcyB0aGUgZmFjdGlvbiB0aGF0IGRlbGliZXJhdGVseSBvcHBvc2VzIHRoZSBpbnRlcmVzdHMgb2YgeW91ciBjaXR5LgogICAgICAgICAgICAgICAgICAgIFdoZW4sIHRoZXJlZm9yZSwgb3dpbmcgdG8gdGhpcyBvcHBvc2l0aW9uLCB5b3UgY2FuIGdldCBub3RoaW5nIGRvbmUgd2l0aG91dCBhCiAgICAgICAgICAgICAgICAgICAgc3RydWdnbGUsIHRoZSBuYXR1cmFsIGNvbnNlcXVlbmNlIGlzIHRoYXQgeW91IG1pc3MgbWFueSBhZHZhbnRhZ2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['15.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgaG93ZXZlciwgdGhlcmUgYXJlIG1hbnkgcG9saXRpY2lhbnMgd2hvCiAgICAgICAgICAgICAgICAgICAgcmVja2xlc3NseSB0YWtlIHVwIHRoaXMgcG9zaXRpb24sIHBlcmhhcHMgdGhlIHBheSB0aGV5IHJlY2VpdmUgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGVtcGxveWVycyBpcyBjaGllZmx5IHJlc3BvbnNpYmxlLCBidXQgbmV2ZXJ0aGVsZXNzIHlvdSB0b28gbXVzdCBiZWFyIHNvbWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYmxhbWUuIEZvciB5b3Ugb3VnaHQgdG8gaGF2ZSB0aGUgc2FtZSBmZWVsaW5nIGFib3V0IHRoZSBwb3N0IGEgbWFuIG9jY3VwaWVzIGluCiAgICAgICAgICAgICAgICAgICAgcG9saXRpY3MgYXMgYWJvdXQgdGhlIHBvc3QgaGUgb2NjdXBpZXMgaW4gd2FyLiBXaGF0IGZlZWxpbmcgZG8gSSByZWZlciB0bz8gWW91CiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXIgdGhhdCB0aGUgbWFuIHdobyBkZXNlcnRzIHRoZSBwb3N0IHdoZXJlIGhpcyBnZW5lcmFsIGhhcyBzdGF0aW9uZWQgaGltCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZXMgdG8gYmUgZGlzZnJhbmNoaXNlZCBhbmQgZGVwcml2ZWQgb2YgaGlzIHNoYXJlIGluIG91ciBjb21tb24gcHJpdmlsZWdlcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRob3NlIHdobywgYnkgYWRvcHRpbmcgb2xpZ2FyY2hpY2FsCiAgICAgICAgICAgICAgICAgICAgcHJpbmNpcGxlcywgYWJhbmRvbiB0aGUgcG9zdCB0YWtlbiBvdmVyIGJ5IHVzIGZyb20gb3VyIGFuY2VzdG9ycywgb3VnaHQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBkaXNxdWFsaWZpZWQgZnJvbSBldmVyIGdpdmluZyB5b3UgYWR2aWNlLiBBcyBpdCBpcywgeW91IGNvbnNpZGVyIHRoYXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBhbGxpZXMgYXJlIG1vc3QgZGV2b3RlZCB0byB5b3Ugd2hvIGhhdmUgc3dvcm4gdG8gcmVnYXJkIHlvdXIgZnJpZW5kcyBhbmQgeW91cgogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMgYXMgdGhlaXIgb3duLCBidXQgd2hlcmUgcG9saXRpY2lhbnMgYXJlIGNvbmNlcm5lZCwgeW91IHRha2UgYXMgeW91ciBtb3N0CiAgICAgICAgICAgICAgICAgICAgdHJ1c3RlZCBhZHZpc2VycyB0aGUgbWVuIHdobywgdG8geW91ciBjZXJ0YWluIGtub3dsZWRnZSwgaGF2ZSB0aHJvd24gaW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICBsb3Qgd2l0aCB0aGUgZW5lbWllcyBvZiB0aGUgU3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['15.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGluZGVlZCBpdCBpcyBub3QgZGlmZmljdWx0IHRvIGZpbmQgbWF0dGVyIG9mCiAgICAgICAgICAgICAgICAgICAgYWNjdXNhdGlvbiBhZ2FpbnN0IHRoZXNlIHBvbGl0aWNpYW5zIG9yIG9mIHJlcHJvYWNoIGFnYWluc3QgdGhlIHJlc3Qgb2YgeW91LCBidXQKICAgICAgICAgICAgICAgICAgICBvdXIgcmVhbCB0YXNrIGlzIHRvIGZpbmQgYnkgd2hhdCBhcmd1bWVudHMgYW5kIGJ5IHdoYXQgY291cnNlIG9mIGFjdGlvbiBvdXIKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IGZhdWx0cyBtYXkgYmUgYW1lbmRlZC4gUGVyaGFwcyBpdCBkb2VzIG5vdCBzdWl0IHRoZSBwcmVzZW50IG9jY2FzaW9uIHRvCiAgICAgICAgICAgICAgICAgICAgZGVhbCB3aXRoIGV2ZXJ5IHNpZGUgb2YgdGhlIHF1ZXN0aW9uLCBidXQgaWYgeW91IGNhbiBieSBzb21lIGZpdHRpbmcgYWN0aW9uIGdpdmUKICAgICAgICAgICAgICAgICAgICBlZmZlY3QgdG8gdGhlIHBvbGljeSB5b3UgaGF2ZSBhZG9wdGVkLCB0aGVuIHRoZXJlIG1pZ2h0IHBvc3NpYmx5IGJlLCBzdGVwIGJ5CiAgICAgICAgICAgICAgICAgICAgc3RlcCwgYSBnZW5lcmFsIGltcHJvdmVtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['15.35'] = ""
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Cb3RoIHNpZGVzIHNlZW0KICAgICAgICAgICAgICAgICAgICB0byBiZSBpbiBlcnJvciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYm90aAogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBoYXZlIHNwb2tlbiBpbiBmYXZvciBvZiB0aGUgQXJjYWRpYW5zIGFuZCB0aG9zZSB3aG8gaGF2ZSBkb25lIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBMYWNlZGFlbW9uaWFuczsgZm9yLCBqdXN0IGFzIHRob3VnaCB0aGV5IGhhZCBjb21lIGZyb20gb25lIG9yIG90aGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugc3RhdGVzIGFuZCB3ZXJlIG5vdCBjaXRpemVucyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIHdoaWNoIGJvdGggZW1iYXNzaWVzIGFyZSBhZGRyZXNzZWQsIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgaW5kdWxnaW5nIGluIG11dHVhbCBhYnVzZSBhbmQgcmVjcmltaW5hdGlvbi4gVGhhdCwgaW5kZWVkLCBtaWdodCBiZSBhIHRhc2sgZm9yCiAgICAgICAgICAgICAgICAgICAgb3VyIHZpc2l0b3JzOyBidXQgdG8gdGFrZSBhIGJyb2FkIHZpZXcgb2YgdGhlIHF1ZXN0aW9uIGFuZCB0byBleHBsb3JlIHRoZSBiZXN0CiAgICAgICAgICAgICAgICAgICAgcG9saWN5LCB3aXRoIGEgcmVnYXJkIGZvciB5b3VyIGludGVyZXN0cyBhbmQgeWV0IHdpdGhvdXQgcGFydHktc3Bpcml0LCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIHRhc2sgb2YgbWVuIHdobyBjbGFpbSB0byBvZmZlciBhZHZpY2UgaW4gdGhpcyBBc3NlbWJseS4gPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGl0IGlzLCBhcGFydCBmcm9tIHRoZSBmYWN0IHRoYXQgdGhleSB3ZXJlIGtub3duCiAgICAgICAgICAgICAgICAgICAgcGVyc29ucyBhbmQgc3Bva2UgQXR0aWMsIEkgdGhpbmsgbXlzZWxmIHRoYXQgbWFueSB3b3VsZCBoYXZlIHRha2VuIHRoZW0gZm9yCiAgICAgICAgICAgICAgICAgICAgQXJjYWRpYW5zIG9yIExhY29uaWFucy4gQnV0IEkgc2VlIGhvdyBkaWZmaWN1bHQgaXQgaXMgdG8gcmVjb21tZW5kIHRoZSB3aXNlc3QKICAgICAgICAgICAgICAgICAgICBjb3Vyc2UsIGJlY2F1c2UsIHdoZW4geW91IHNoYXJlIHRoZSBkZWx1c2lvbnMgb2YgeW91ciBhZHZpc2Vycywgc29tZSB3YW50aW5nCiAgICAgICAgICAgICAgICAgICAgdGhpcyBhbmQgb3RoZXJzIHRoYXQsIGFueW9uZSB3aG8gYXR0ZW1wdHMgdG8gc3VnZ2VzdCBhIG1pZGRsZSBjb3Vyc2UgYW5kIGZpbmRzCiAgICAgICAgICAgICAgICAgICAgeW91IHRvbyBpbXBhdGllbnQgdG8gYmUgaW5zdHJ1Y3RlZCwgd2lsbCBwbGVhc2UgbmVpdGhlciBwYXJ0eSBhbmQgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIGRpc2NyZWRpdGVkIHdpdGggYm90aC4gPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgc2FtZSwgaWYgdGhhdCBpcwogICAgICAgICAgICAgICAgICAgIHRvIGJlIG15IGZhdGUsIEkgd2lsbCBjaG9vc2UgcmF0aGVyIHRvIGJlIGNoYXJnZWQgd2l0aCB0YWxraW5nIG5vbnNlbnNlIHRoYW4KICAgICAgICAgICAgICAgICAgICBhbGxvdyB5b3UgdG8gYmUgbWlzbGVkIGJ5IGNlcnRhaW4gc3BlYWtlcnMsIGNvbnRyYXJ5IHRvIHdoYXQgSSBqdWRnZSB0byBiZSBiZXN0CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBjaXR5LiBPdGhlciBwb2ludHMgSSB3aWxsLCB3aXRoIHlvdXIgcGVybWlzc2lvbiwgZGlzY3VzcyBsYXRlciwgYnV0IG5vdywKICAgICAgICAgICAgICAgICAgICBzdGFydGluZyBmcm9tIHByaW5jaXBsZXMgYWRtaXR0ZWQgYnkgYWxsLCBJIHdpbGwgdHJ5IHRvIGV4cGxhaW4gd2hhdCBJIGNvbnNpZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGJlc3QgcG9saWN5LiA8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgbm8gb25lIHdvdWxkIGRlbnkgdGhhdCBvdXIgY2l0eSBpcyBiZW5lZml0ZWQgYnkgdGhlIHdlYWtuZXNzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIGFuZCBvZiB0aGUgVGhlYmFucyB5b25kZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEKICAgICAgICAgICAgICAgICAgICAgICAgZ2VzdHVyZSByZW1pbmRzIGhpcyBoZWFyZXJzIGhvdyBuZWFyIG5laWdoYm9ycyB0aGUgVGhlYmFucyB3ZXJlLjwvbm90ZT4gVGhlCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gb2YgYWZmYWlycywgdGhlbiwgaWYgb25lIG1heSBqdWRnZSBmcm9tIHN0YXRlbWVudHMgcmVwZWF0ZWRseSBtYWRlIGluCiAgICAgICAgICAgICAgICAgICAgeW91ciBBc3NlbWJseSwgaXMgc3VjaCB0aGF0IHRoZSBUaGViYW5zIHdpbGwgYmUgd2Vha2VuZWQgYnkgdGhlIHJlZm91bmRpbmcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwMzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTAzNCI+T3JjaG9tZW51czwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyNTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDI1OCI+VGhlc3BpYWU8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGxhdGFlYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGxhdGFlYSI+UGxhdGFlYTwvcGxhY2VOYW1lPiwgYnV0IHRoZSBMYWNlZGFlbW9uaWFucyB3aWxsIHJlZ2FpbiB0aGVpciBwb3dlciwgaWYKICAgICAgICAgICAgICAgICAgICB0aGV5IGdldCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjczNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzM1Ij5BcmNhZGlhPC9wbGFjZU5hbWU+IGludG8gdGhlaXIgaGFuZHMgYW5kCiAgICAgICAgICAgICAgICAgICAgZGVzdHJveSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhbG9wb2xpcyI+TWVnYWxvcG9saXM8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk91ciBkdXR5LCB0aGVuLCBpcyB0byB0YWtlIGNhcmUgbGVzdCB0aGUKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFucyBncm93IHN0cm9uZyBhbmQgZm9ybWlkYWJsZSBiZWZvcmUgdGhlIFRoZWJhbnMgYXJlIHdlYWtlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgbGVzdCB0aGVpciBpbmNyZWFzZSBvZiBwb3dlciBzaG91bGQsIHVucGVyY2VpdmVkIGJ5IHVzLCBvdXQtYmFsYW5jZSB0aGUKICAgICAgICAgICAgICAgICAgICBkaW1pbnV0aW9uIG9mIHRoZSBwb3dlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggb3VyIGludGVyZXN0cyBkZW1hbmQuIEZvciB0aGlzIGF0IGxlYXN0IHdlIHNob3VsZCBuZXZlciBhZG1pdCwgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIHNvb25lciBoYXZlIHRoZSBMYWNlZGFlbW9uaWFucyBmb3Igb3VyIHJpdmFscyB0aGFuIHRoZSBUaGViYW5zLCBub3IgaXMKICAgICAgICAgICAgICAgICAgICB0aGF0IG91ciBzZXJpb3VzIGFpbSwgYnV0IHJhdGhlciB0byBwdXQgaXQgb3V0IG9mIHRoZSBwb3dlciBvZiBlaXRoZXIgdG8gZG8gdXMKICAgICAgICAgICAgICAgICAgICBoYXJtLCBmb3IgaW4gdGhhdCB3YXkgd2Ugc2hhbGwgZW5qb3kgdGhlIG1vc3QgY29tcGxldGUgc2VjdXJpdHkuIDwvdHJhbnNsYXRpb24+"
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgcGVyaGFwcyB3ZSBzaGFsbAogICAgICAgICAgICAgICAgICAgIGFkbWl0IHRoYXQgdGhhdCBpcyBob3cgbWF0dGVycyBvdWdodCB0byBzdGFuZCwgYnV0IGZlZWwgdGhhdCBpdCBpcyBtb25zdHJvdXMgdG8KICAgICAgICAgICAgICAgICAgICBjaG9vc2UgYXMgb3VyIGFsbGllcyB0aGUgbWVuIHdob3NlIHJhbmtzIHdlIGZhY2VkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWFudGluZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1hbnRpbmVhIj5NYW50aW5lYTwvcGxhY2VOYW1lPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIEF0aGVuaWFucyBmb3VnaHQgb24gdGhlIGxlZnQgd2luZyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNYW50aW5lYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWFudGluZWEiPk1hbnRpbmVhPC9wbGFjZU5hbWU+IGFnYWluc3QgVGhlYmFucywgQXJjYWRpYW5zCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBvdGhlciBhbGxpZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+Ljwvbm90ZT4gYW5kIGV2ZW4gdG8gaGVscCB0aGVtIGFnYWluc3QgdGhvc2Ugd2l0aCB3aG9tIHdlCiAgICAgICAgICAgICAgICAgICAgc2hhcmVkIHRoZSBkYW5nZXJzIG9mIHRoYXQgYmF0dGxlLiBBbmQgSSB0b28gYW0gb2YgdGhhdCBvcGluaW9uLCBidXQgSSB0aGluayB3ZQogICAgICAgICAgICAgICAgICAgIG11c3QgYWRkIHRoZSBzYXZpbmcgY2xhdXNlLCDigJxpZiB0aGUgb3RoZXJzIGNvbnNlbnQgdG8gZG8gd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIGp1c3Qu4oCdIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWFudGluZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1hbnRpbmVhIj5NYW50aW5lYTwvcGxhY2VOYW1lPiBhZ2FpbnN0IFRoZWJhbnMsIEFyY2FkaWFucwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgb3RoZXIgYWxsaWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['16.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPklmLCB0aGVuLCBhbGwgdGhlIHBvd2VycwogICAgICAgICAgICAgICAgICAgIGNvbnNlbnQgdG8ga2VlcCBwZWFjZSwgd2Ugd2lsbCBub3QgaGVscCB0aGUgTWVnYWxvcG9saXRhbnMsIGZvciBpdCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgdW5uZWNlc3NhcnksIHNvIHRoYXQgdGhlcmUgd2lsbCBiZSBubyBxdWVzdGlvbiBvZiBvdXIgb3Bwb3Npbmcgb3VyIGNvbXJhZGVzIGluCiAgICAgICAgICAgICAgICAgICAgYXJtczsgc29tZSBvZiB0aGVtLCBpbmRlZWQsIGFscmVhZHkgcHJvZmVzcyB0byBiZSBvdXIgYWxsaWVzLCBhbmQgdGhlIG90aGVycwogICAgICAgICAgICAgICAgICAgIHdpbGwgbm93IGNvbWUgaW50byBsaW5lLiBBbmQgd2hhdCBtb3JlIGNvdWxkIHdlIGRlc2lyZT8gPC90cmFuc2xhdGlvbj4="
translation['16.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiB0aGUgTGFjZWRhZW1vbmlhbnMgYWN0IHVuanVzdGx5IGFuZCBpbnNpc3Qgb24KICAgICAgICAgICAgICAgICAgICBmaWdodGluZywgdGhlbiwgb24gdGhlIG9uZSBoYW5kLCBpZiB0aGUgb25seSBxdWVzdGlvbiB0byBiZSBkZWNpZGVkIGlzIHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICB3ZSBzaGFsbCBhYmFuZG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYWxvcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIj5NZWdhbG9wb2xpczwvcGxhY2VOYW1lPiB0bwogICAgICAgICAgICAgICAgICAgIHRoZW0gb3Igbm90LCBqdXN0IGluZGVlZCBpdCBpcyBub3QsIGJ1dCBJIGZvciBteSBwYXJ0IGFncmVlIHRvIGFsbG93IGl0IGFuZCB0bwogICAgICAgICAgICAgICAgICAgIG9mZmVyIG5vIG9wcG9zaXRpb24gdG8gdGhlIHBlb3BsZSB3aG8gc2hhcmVkIHRoZSBzYW1lIGRhbmdlcnMgd2l0aCB1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1hbnRpbmVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNYW50aW5lYSI+TWFudGluZWE8L3BsYWNlTmFtZT4uPC9ub3RlPjsgYnV0LCBvbiB0aGUgb3RoZXIgaGFuZCwgaWYgeW91IGFyZSBhbGwKICAgICAgICAgICAgICAgICAgICBhd2FyZSB0aGF0IHRoZSBjYXB0dXJlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWFudGluZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1hbnRpbmVhIj5NYW50aW5lYTwvcGxhY2VOYW1lPi48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhbG9wb2xpcyI+TWVnYWxvcG9saXM8L3BsYWNlTmFtZT4gd2lsbCBiZSBmb2xsb3dlZCBieSBhbiBhdHRhY2sgb24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXNzZW5lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZXNzZW5lIj5NZXNzZW5lPC9wbGFjZU5hbWU+LCBJIGFzayBhbnkgb2YgdGhvc2Ugd2hvIGFyZSBub3cgc28KICAgICAgICAgICAgICAgICAgICBoYXJkIG9uIHRoZSBNZWdhbG9wb2xpdGFucyB0byB0ZWxsIG1lIHdoYXQgaGUgd2lsbCBhZHZpc2UgdXMgdG8gZG8gdGhlbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBJIHNoYWxsIGdldCBubyBhbnN3ZXIuIFlldCB5b3UgYWxsIGtub3cKICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aGV0aGVyIHRoZXNlIHNwZWFrZXJzIGFkdmlzZSBpdCBvciBub3QsIHlvdSBhcmUgYm91bmQgdG8gaGVscCB0aGUKICAgICAgICAgICAgICAgICAgICBNZXNzZW5pYW5zLCBib3RoIGZvciB0aGUgc2FrZSBvZiB5b3VyIHN3b3JuIGFncmVlbWVudCB3aXRoIHRoZW0gYW5kIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2UgdGhhdCB5b3UgZGVyaXZlIGZyb20gdGhlIHByZXNlcnZhdGlvbiBvZiB0aGVpciBjaXR5LiBKdXN0IGFzawogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMgYXQgd2hhdCBwb2ludCB5b3Ugd291bGQgYmVnaW4gdG8gbWFrZSB5b3VyIHN0YW5kIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFuIGluanVzdGljZSB3aXRoIG1vcmUgaG9ub3IgYW5kIGdlbmVyb3NpdHnigJR3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuY2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhbG9wb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYWxvcG9saXMiPk1lZ2Fsb3BvbGlzPC9wbGFjZU5hbWU+IG9yIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZW5jZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lc3NlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lc3NlbmUiPk1lc3NlbmU8L3BsYWNlTmFtZT4/IDwvdHJhbnNsYXRpb24+"
translation['16.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgb25lIGNhc2UsIHlvdSB3aWxsIHNob3cgeW91cnNlbHZlcyByZWFkeSB0bwogICAgICAgICAgICAgICAgICAgIGhlbHAgdGhlIEFyY2FkaWFucyBhbmQgZWFnZXIgdG8gY29uZmlybSB0aGUgcGVhY2UgZm9yIHdoaWNoIHlvdSBmYWNlZCBkYW5nZXIgb24KICAgICAgICAgICAgICAgICAgICB0aGUgZmllbGQgb2YgYmF0dGxlLiBJbiB0aGUgb3RoZXIgY2FzZSwgZXZlcnlvbmUgd2lsbCBzZWUgY2xlYXJseSB0aGF0IHlvdSB3aXNoCiAgICAgICAgICAgICAgICAgICAgdG8gcHJlc2VydmUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXNzZW5lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZXNzZW5lIj5NZXNzZW5lPC9wbGFjZU5hbWU+IGxlc3MgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHNha2Ugb2YganVzdGljZSB0aGFuIGZvciBmZWFyIG9mIHRoZSBMYWNlZGFlbW9uaWFucy4gQnV0IHRoZSBwcm9wZXIgY291cnNlIGlzIGluCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoaW5ncyB0byBmaW5kIG91dCB3aGF0IGlzIHJpZ2h0IGFuZCB0aGVuIGRvIGl0LCB0aG91Z2ggYXQgdGhlIHNhbWUgdGltZSB3ZQogICAgICAgICAgICAgICAgICAgIG11c3QgdGFrZSBjYXJlIHRoYXQgd2hhdCB3ZSBkbyBpcyBleHBlZGllbnQgYXMgd2VsbC4gPC90cmFuc2xhdGlvbj4="
translation['16.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IG15IG9wcG9uZW50cyBhcmd1ZSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHJlY292ZXJ5IG9mIE9yb3B1cyBpcyBzb21ldGhpbmcgdGhhdCB3ZSBvdWdodCB0byBhdHRlbXB0LCBidXQgdGhhdCBpZiB3ZSBtYWtlCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcyBvZiB0aG9zZSB3aG8gd291bGQgaGF2ZSBoZWxwZWQgdXMgdG8gcmVjb3ZlciBpdCwgd2Ugc2hhbGwgaGF2ZSBubwogICAgICAgICAgICAgICAgICAgIGFsbGllcy4gSSB0b28gdGhpbmsgdGhhdCB3ZSBvdWdodCB0byByZWNvdmVyIE9yb3B1cywgYnV0IHRvIHNheSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIHdpbGwgYmUgb3VyIGVuZW1pZXMgYXMgc29vbiBhcyB3ZSBtYWtlIGFsbGllcyBvZiB0aG9zZSBBcmNhZGlhbnMKICAgICAgICAgICAgICAgICAgICB3aG8gYXJlIHdpbGxpbmcgdG8gYmUgb3VyIGZyaWVuZHPigJRJIHRoaW5rIHRoZSBvbmx5IG1lbiB3aG8gaGF2ZSBubwogICAgICAgICAgICAgICAgICAgIHJpZ2h0IGV2ZW4gdG8gc3VnZ2VzdCB0aGF0IGFyZSB0aGUgbWVuIHdobyBwZXJzdWFkZWQgeW91IHRvIGhlbHAgdGhlCiAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnMgaW4gdGhlaXIgaG91ciBvZiBkYW5nZXIuIDwvdHJhbnNsYXRpb24+"
translation['16.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICB3aGVuIGFsbCB0aGUgUGVsb3Bvbm5lc2lhbnMgY2FtZSB0byB5b3UgYW5kIGNhbGxlZCBvbiB5b3UgdG8gbGVhZCB0aGVtIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGUgTGFjZWRhZW1vbmlhbnMsIGl0IHdhcyBub3QgYnkgc3VjaCBhcmd1bWVudHMgdGhhdCB0aGVzZSBtZW4gcGVyc3VhZGVkIHlvdQogICAgICAgICAgICAgICAgICAgIG5vdCB0byByZWNlaXZlIHRoZW3igJTvvIhhbmQgdGhhdCB3YXMgd2h5IHRoZXkgdG9vayB0aGUgb25seQogICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZyBjb3Vyc2Ugb2YgYXBwbHlpbmcgdG8gdGhlIFRoZWJhbnPvvInigJRidXQgdG8KICAgICAgICAgICAgICAgICAgICBjb250cmlidXRlIGZ1bmRzIGFuZCByaXNrIHlvdXIgbGl2ZXMgZm9yIHRoZSBzYWZldHkgb2YgdGhlIExhY2VkYWVtb25pYW5zLiBZZXQKICAgICAgICAgICAgICAgICAgICB5b3Ugd291bGQgc3VyZWx5IG5ldmVyIGhhdmUgY29uc2VudGVkIHRvIHNhdmUgdGhlbSwgaWYgdGhleSBoYWQgYW5ub3VuY2VkIHRvIHlvdQogICAgICAgICAgICAgICAgICAgIHRoYXQgd2hlbiBzYXZlZCB0aGV5IHdvdWxkIG93ZSB5b3Ugbm8gdGhhbmtzIGZvciB5b3VyIGhlbHAsIHVubGVzcyB5b3UgYWxsb3dlZAogICAgICAgICAgICAgICAgICAgIHRoZW0gYXMgYmVmb3JlIHRvIGNvbW1pdCB3aGF0ZXZlciBhY3Qgb2YgaW5qdXN0aWNlIHRoZXkgY2hvc2UuIDwvdHJhbnNsYXRpb24+"
translation['16.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgZXZlbiBpZiBvdXIgYWxsaWFuY2Ugd2l0aCB0aGUgQXJjYWRpYW5zIGlzCiAgICAgICAgICAgICAgICAgICAgYSBzZXJpb3VzIGltcGVkaW1lbnQgdG8gdGhlIGRlc2lnbnMgb2YgdGhlIExhY2VkYWVtb25pYW5zLCB5ZXQgc3VyZWx5IHRoZXkgb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byBiZSBtb3JlIGdyYXRlZnVsIGZvciB0aGUgc2FmZXR5IHRoYXQgd2Ugd29uIGZvciB0aGVtLCB3aGVuIHRoZXkgd2VyZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBncmF2ZXN0IHBlcmlsLCB0aGFuIGFuZ3J5IGJlY2F1c2Ugb2YgdGhlIHdyb25ncyB0aGF0IHRoZXkgYXJlIG5vdyBwcmV2ZW50ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIGNvbW1pdHRpbmcuIEhvdywgdGhlbiwgY2FuIHRoZXkgcmVmdXNlIHRvIGhlbHAgdXMgYXQgT3JvcHVzIHdpdGhvdXQgcHJvdmluZwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgdGhlIGJhc2VzdCBvZiBtYW5raW5kPyBCeSBoZWF2ZW5zISBJIHNlZSBubyBlc2NhcGUgZm9yIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlbiB0aGVyZQogICAgICAgICAgICAgICAgICAgIGlzIGFub3RoZXIgYXJndW1lbnQgdGhhdCBhc3RvbmlzaGVzIG1lOyB0aGF0IGlmIHdlIG1ha2UgYW4gYWxsaWFuY2Ugd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBBcmNhZGlhbnMgYW5kIGFjdCB1cG9uIGl0LCBvdXIgY2l0eSB3aWxsIHNlZW0gdG8gYmUgY2hhbmdpbmcgaXRzIHBvbGljeSBhbmQKICAgICAgICAgICAgICAgICAgICBicmVha2luZyBmYWl0aC4gRm9yIHRvIG1lLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUgZXhhY3Qgb3Bwb3NpdGUgc2VlbXMgdG8gYmUgdGhlIGNhc2UuIEhvdyBzbz8KICAgICAgICAgICAgICAgICAgICBCZWNhdXNlIEkgZG8gbm90IHRoaW5rIGFueSBvbmUgbWFuIHdvdWxkIGRlbnkgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaGFzIHNhdmVkIHRoZSBMYWNlZGFlbW9uaWFucywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIFRoZWJhbnMgYmVmb3JlIHRoZW0sIGFuZCB0aGUgRXVib2VhbnMgcmVjZW50bHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByZWZlcmVuY2VzIGFyZSB0byB0aGUgYmF0dGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWFudGluZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1hbnRpbmVhIj5NYW50aW5lYTwvcGxhY2VOYW1lPiDvvIgzNjLvvIksIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhbGxpYW5jZSB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4gaW4gMzc4LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJhbmNlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBUaGViYW5zIGluIDM1Ny48L25vdGU+IGFuZCBoYXMgYWZ0ZXJ3YXJkcyBtYWRlIGFsbGlhbmNlIHdpdGggdGhlbSwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYWx3YXlzIG9uZSBhbmQgdGhlIHNhbWUgb2JqZWN0IGluIHZpZXcuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWFudGluZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1hbnRpbmVhIj5NYW50aW5lYTwvcGxhY2VOYW1lPiDvvIgzNjLvvIksIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhbGxpYW5jZSB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4gaW4gMzc4LCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJhbmNlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBUaGViYW5zIGluIDM1Ny48L3RyYW5zbGF0aW9uPg=="
translation['16.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB3aGF0IGlzIHRoYXQ/IFRvIHNhdmUgdGhlIHZpY3RpbXMgb2YgaW5qdXN0aWNlLiBJZiwgdGhlbiwgdGhpcyBpcyBzbywgaXQgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgd2Ugd2hvIGFyZSBpbmNvbnNpc3RlbnQsIGJ1dCB0aG9zZSB3aG8gcmVmdXNlIHRvIGFiaWRlIGJ5IHRoZSBwcmluY2lwbGVzIG9mCiAgICAgICAgICAgICAgICAgICAganVzdGljZTsgYW5kIGl0IHdpbGwgYmUgbWFuaWZlc3QgdGhhdCB0aGUgY2lyY3Vtc3RhbmNlcyBhcmUgYWx3YXlzIGNoYW5naW5nLAogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggdGhlIHBvbGljeSBvZiBhbWJpdGlvdXMgbWVuLCBidXQgb3VyIGNpdHkgY2hhbmdlcyBub3QuIDwvdHJhbnNsYXRpb24+"
translation['16.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHBvbGljeSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFucyBzZWVtcyB0byBtZSB0byBiZSB2ZXJ5IHNoYXJwIHByYWN0aWNlLiBGb3IgdGhleSBub3cgc2F5IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGlzIj5FbGlzPC9wbGFjZU5hbWU+IG91Z2h0IHRvIHJlY2VpdmUgcGFydHMgb2YKICAgICAgICAgICAgICAgICAgICBUcmlwaHlsaWEsIGFuZCBQaGxpdXMgdGhlIGRpc3RyaWN0IG9mIFRyaWNhcmFudW0sIGFuZCBjZXJ0YWluIEFyY2FkaWFuIHRyaWJlcwogICAgICAgICAgICAgICAgICAgIHRoZSBsYW5kIGJlbG9uZ2luZyB0byB0aGVtLCBhbmQgdGhhdCB3ZSBvdWdodCB0byBoYXZlIE9yb3B1cywgbm90IGJlY2F1c2UgdGhleQogICAgICAgICAgICAgICAgICAgIHdhbnQgdG8gc2VlIGVhY2ggb2YgdXMgZW5qb3lpbmcgb3VyIG93biwgZmFyIGZyb20gaXTigJTvvIh0aGF0CiAgICAgICAgICAgICAgICAgICAgd291bGQgYmUgYSB0YXJkeSBleGhpYml0aW9uIG9mIHBoaWxhbnRocm9wee+8ieKAlCA8L3RyYW5zbGF0aW9uPg=="
translation['16.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgdGhleSB3YW50IGl0IHRvIGJlIGdlbmVyYWxseSBzdXBwb3NlZCB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBhcmUgY28tb3BlcmF0aW5nIHdpdGggZWFjaCBzdGF0ZSB0byByZWNvdmVyIHRoZSB0ZXJyaXRvcnkgdGhhdCBpdCBjbGFpbXMsIHNvCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3aGVuIHRoZXkgbWFyY2ggYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lc3NlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lc3NlbmUiPk1lc3NlbmU8L3BsYWNlTmFtZT4gb24gdGhlaXIgb3duIGFjY291bnQsIGFsbCB0aGUgb3RoZXJzIHdpbGwgam9pbiBoZWFydGlseQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBleHBlZGl0aW9uLCBvciBlbHNlIHdpbGwgcHV0IHRoZW1zZWx2ZXMgaW4gdGhlIHdyb25nIGJ5IG1ha2luZyBubwogICAgICAgICAgICAgICAgICAgIGFkZXF1YXRlIHJldHVybiBmb3IgdGhlIHN1cHBvcnQgdGhleSBoYXZlIGVuam95ZWQgaW4gcmVnYWluaW5nIHdoYXQgZWFjaCBzdGF0ZQogICAgICAgICAgICAgICAgICAgIGNsYWltZWQgYXMgaXRzIG93bi4gPC90cmFuc2xhdGlvbj4="
translation['16.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbXkgb3duIGltcHJlc3Npb24gaXMKICAgICAgICAgICAgICAgICAgICB0aGF0LCBpbiB0aGUgZmlyc3QgcGxhY2UsIHdpdGhvdXQgc3ViamVjdGluZyBhbnkgb2YgdGhlIEFyY2FkaWFucyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4sIG91ciBjaXR5IG1heSByZWNvdmVyIE9yb3B1cyB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhlIGhlbHAgYm90aCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGlmIHRoZXkgY2hvb3NlIHRvIGFjdCBqdXN0bHksIGFuZCBvZiBhbGwKICAgICAgICAgICAgICAgICAgICB3aG8gdGhpbmsgdGhleSBvdWdodCBub3QgdG8gbGV0IHRoZSBUaGViYW5zIGtlZXAgb3RoZXIgcGVvcGxlJ3MgcHJvcGVydHkuIEJ1dAogICAgICAgICAgICAgICAgICAgIHN1cHBvc2luZywgb24gdGhlIG90aGVyIGhhbmQsIGl0IHNob3VsZCBiZWNvbWUgY2xlYXIgdG8gdXMgdGhhdCB1bmxlc3Mgd2UgbGV0CiAgICAgICAgICAgICAgICAgICAgdGhlIExhY2VkYWVtb25pYW5zIHN1YmR1ZSB0aGUgd2hvbGUgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+LCB3ZSBzaGFsbCBub3QgYmUgYWJsZSB0byB0YWtlIE9yb3B1cywgdGhlbiBJIHRoaW5rCiAgICAgICAgICAgICAgICAgICAgaXQgdGhlIGJldHRlciBwb2xpY3ksIGlmIEkgbWF5IHNheSBzbywgdG8gbGV0IE9yb3B1cyBnbywgcmF0aGVyIHRoYW4gc2FjcmlmaWNlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVzc2VuZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVzc2VuZSI+TWVzc2VuZTwvcGxhY2VOYW1lPiBhbmQgdGhlIHJlc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+IHRvIHRoZSBwb3dlciBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4uIEZvciBJIGRvIG5vdCB0aGluayB0aGF0CiAgICAgICAgICAgICAgICAgICAgT3JvcHVzIHdvdWxkIGJlIHRoZSBvbmx5IHN1YmplY3Qgb2YgZGlzcHV0ZSBiZXR3ZWVuIHVzLCBidXQgYWxzb+KAlC4KICAgICAgICAgICAgICAgICAgICBIb3dldmVyLCBJIHdpbGwgcGFzcyBvdmVyIHdoYXQgSSBpbnRlbmRlZCB0byBzYXk7IG9ubHkgSSBmYW5jeSB0aGVyZSBhcmUgbWFueQogICAgICAgICAgICAgICAgICAgIGRhbmdlcnMgYWhlYWQgb2YgdXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhlIHNlZW1zIHRvIGNvbnRlbXBsYXRlIGEKICAgICAgICAgICAgICAgICAgICAgICAgcmVuZXdlZCBhdHRlbXB0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiB0bwogICAgICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2ggaGVyIHN1cHJlbWFjeSwgaW52b2x2aW5nIHBlcmhhcHMgYSBzZWNvbmQgUGVsb3Bvbm5lc2lhbiB3YXIuIEhlCiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXItZXN0aW1hdGVzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPidzIHBvd2VyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY292ZXJ5Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4gdG8KICAgICAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoIGhlciBzdXByZW1hY3ksIGludm9sdmluZyBwZXJoYXBzIGEgc2Vjb25kIFBlbG9wb25uZXNpYW4gd2FyLiBIZQogICAgICAgICAgICAgICAgICAgICAgICBvdmVyLWVzdGltYXRlcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4ncyBwb3dlciBvZgogICAgICAgICAgICAgICAgICAgICAgICByZWNvdmVyeS48L3RyYW5zbGF0aW9uPg=="
translation['16.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGZ1cnRoZXIsCiAgICAgICAgICAgICAgICAgICAgd2l0aCByZWdhcmQgdG8gYW55IGFjdHMgd2hpY2ggdGhleSBzYXkgdGhlIE1lZ2Fsb3BvbGl0YW5zIGhhdmUgY29tbWl0dGVkIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBzYWtlIG9mIHRoZSBUaGViYW5zIHNvbWV3aGF0IGFnYWluc3QgeW91ciBpbnRlcmVzdHMsIGl0IGlzIHJpZGljdWxvdXMgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIHRoZXNlIG5vdyB0aGUgY291bnQgb2YgYW4gaW5kaWN0bWVudCwgYnV0IHdoZW4gdGhleSB3YW50IHRvIGJlY29tZSBmcmllbmRzIGFuZAogICAgICAgICAgICAgICAgICAgIG1ha2UgeW91IHNvbWUgcmVwYXJhdGlvbiwgdG8gbG9vayBhc2thbmNlIGF0IHRoZW0gYW5kIGRldmlzZSBtZWFucyBvZiBwcmV2ZW50aW5nCiAgICAgICAgICAgICAgICAgICAgdGhpcywgYW5kIG5vdCB0byByZWFsaXplIHRoYXQgdGhlIG1vcmUgemVhbG91cyB0aGV5IHNob3cgdGhlbXNlbHZlcyB0byBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY2F1c2Ugb2YgdGhlIFRoZWJhbnMsIHRoZSBtb3JlIGp1c3RseSB3b3VsZCB0aGVzZSB2ZXJ5IHNwZWFrZXJzIGluY3VyCiAgICAgICAgICAgICAgICAgICAgeW91ciBhbmdlciwgaWYgdGhleSBkZXByaXZlZCB0aGUgY2l0eSBvZiBzdWNoIHVzZWZ1bCBhbGxpZXMsIHdoZW4gdGhleSBjYW1lIHRvCiAgICAgICAgICAgICAgICAgICAgeW91IGJlZm9yZSBhcHBseWluZyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlc2UsIEkgdGFrZSBpdCwgYXJlIHRoZSBhbGxlZ2F0aW9ucwogICAgICAgICAgICAgICAgICAgIG9mIG1lbiB3aG8gd2FudCBvbmNlIGFnYWluIHRvIGRyaXZlIHRoZSBNZWdhbG9wb2xpdGFucyBlbHNld2hlcmUgZm9yIGFuCiAgICAgICAgICAgICAgICAgICAgYWxsaWFuY2UuIE5vdyBJIGtub3csIGFzIGZhciBhcyByZWFzb25pbmcgYW5kIGNvbmplY3R1cmUgY2FuIHRlYWNoIG1lLCBhbmQgSQogICAgICAgICAgICAgICAgICAgIHRoaW5rIHRoYXQgbW9zdCBvZiB5b3Ugd2lsbCBhZ3JlZSB3aXRoIG1lLCB0aGF0IGlmIHRoZSBMYWNlZGFlbW9uaWFucyB0YWtlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYWxvcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIj5NZWdhbG9wb2xpczwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXNzZW5lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZXNzZW5lIj5NZXNzZW5lPC9wbGFjZU5hbWU+IHdpbGwgYmUgaW4gZGFuZ2VyOyBhbmQgaWYgdGhleQogICAgICAgICAgICAgICAgICAgIHRha2UgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXNzZW5lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZXNzZW5lIj5NZXNzZW5lPC9wbGFjZU5hbWU+IGFsc28sIEkgc2F5IHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBzaGFsbCBmaW5kIG91cnNlbHZlcyBpbiBhbGxpYW5jZSB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['16.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHkgaXQgaXMgbW9yZQogICAgICAgICAgICAgICAgICAgIGhvbm9yYWJsZSBhbmQgc2F0aXNmYWN0b3J5IHRoYXQgd2Ugc2hvdWxkIHdpbiB0aGUgYWxsaWFuY2Ugb2YgdGhlIFRoZWJhbnMgb24gb3VyCiAgICAgICAgICAgICAgICAgICAgb3duIGFjY291bnQgYW5kIHJlc2lzdCBTcGFydGFuIGFtYml0aW9uLCB0aGFuIHRoYXQgd2Ugc2hvdWxkIHNocmluayBmcm9tCiAgICAgICAgICAgICAgICAgICAgcmVzY3VpbmcgdGhlIGFsbGllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgYWJhbmRvbiB0aGVtIG5vdywgb25seSB0byByZXNjdWUgdGhlIFRoZWJhbnMgaW4gdGhlIGVuZCwgYW5kIHRvIGJlIGtlcHQgbW9yZW92ZXIKICAgICAgICAgICAgICAgICAgICBpbiBwZXJwZXR1YWwgYWxhcm0gZm9yIG91cnNlbHZlcy4gPC90cmFuc2xhdGlvbj4="
translation['16.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSBjYW5ub3QKICAgICAgICAgICAgICAgICAgICByZWdhcmQgaXQgYXMgYSBwbGVkZ2Ugb2Ygb3VyIHNlY3VyaXR5LCB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyBzaG91bGQgc2VpemUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhbG9wb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYWxvcG9saXMiPk1lZ2Fsb3BvbGlzPC9wbGFjZU5hbWU+IGFuZCBncm93IGdyZWF0CiAgICAgICAgICAgICAgICAgICAgb25jZSBtb3JlLCBzZWVpbmcgYXMgSSBkbyB0aGF0IGV2ZW4gbm93IHRoZXkgaGF2ZSBub3QgdGFrZW4gdXAgYXJtcyB0byBhdmVuZ2UgYW4KICAgICAgICAgICAgICAgICAgICBpbmp1cnksIGJ1dCB0byByZWNvdmVyIHRoZSBwb3dlciB0aGF0IG9uY2Ugd2FzIHRoZWlyczsgYW5kIHdoYXQgdGhlaXIgYW1iaXRpb24KICAgICAgICAgICAgICAgICAgICB3YXMgaW4gdGhlIGRheSBvZiB0aGVpciBwb3dlciwgeW91IGtub3cgcGVyaGFwcyBiZXR0ZXIgdGhhbiBJLCBhbmQgd2lsbCBkaXN0cnVzdAogICAgICAgICAgICAgICAgICAgIHRoZW0gYWNjb3JkaW5nbHkuIDwvdHJhbnNsYXRpb24+"
translation['16.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBzaG91bGQgbGlrZSB0byBhc2sgdGhvc2Ugc3BlYWtlcnMgd2hvIHByb2Zlc3MgaGF0cmVkIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZWJhbnMgYW5kIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgd2hldGhlciB0aGV5IGhhdGUgdGhlbSBpbiBlaXRoZXIgY2FzZSBmb3IKICAgICAgICAgICAgICAgICAgICB5b3VyIHNha2UgYW5kIGluIHlvdXIgaW50ZXJlc3RzLCBvciB3aGV0aGVyIHRoZXkgaGF0ZSB0aGUgVGhlYmFucyBmb3IgdGhlIHNha2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgYW5kIHRoZSBMYWNlZGFlbW9uaWFucyBmb3IgdGhlIHNha2Ugb2YgdGhlIFRoZWJhbnMKICAgICAgICAgICAgICAgICAgICByZXNwZWN0aXZlbHkuIElmIHRoZSBsYXR0ZXIsIHlvdSBtdXN0IG5vdCB0YWtlIHRoZSBhZHZpY2Ugb2YgZWl0aGVyIHBhcnR5LAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhleSBhcmUgYm90aCBtYWQ7IGJ1dCBpZiB0aGV5IGFsbGVnZSB5b3VyIGludGVyZXN0cywgd2h5IGRvIHRoZXkgdW5kdWx5CiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZCB0aGUgaW50ZXJlc3RzIG9mIHRob3NlIG90aGVyIHN0YXRlcz8gPC90cmFuc2xhdGlvbj4="
translation['16.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgc3VyZWx5IHBvc3NpYmxlIHRvIGh1bWJsZSB0aGUgVGhlYmFucyB3aXRob3V0IHN0cmVuZ3RoZW5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnM7IG5heSwgaXQgaXMgbXVjaCBlYXNpZXIuIEhvdyBpdCBjYW4gYmUgZG9uZSwgSSB3aWxsIHRyeSB0bwogICAgICAgICAgICAgICAgICAgICAgICBleHBsYWluLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz4gRXZlcnlvbmUga25vd3MgdGhpcyBtdWNoLCB0aGF0IGFsbAogICAgICAgICAgICAgICAgICAgIG1lbiwgZXZlbiBhZ2FpbnN0IHRoZWlyIHdpc2hlcywgYXJlLCB1cCB0byBhIGNlcnRhaW4gcG9pbnQsIGFzaGFtZWQgbm90IHRvIGRvCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpcyBqdXN0LCBidXQgbWFrZSBhIGRpc3BsYXkgb2Ygb3Bwb3NpdGlvbiB0byBpbmp1c3RpY2UsIGVzcGVjaWFsbHkgaW4gY2FzZXMKICAgICAgICAgICAgICAgICAgICB3aGVyZSB0aGVyZSBhcmUgZGVmaW5pdGUgdmljdGltczsgYW5kIHdlIHNoYWxsIGZpbmQgdGhhdCB3aGF0IHJ1aW5zCiAgICAgICAgICAgICAgICAgICAgZXZlcnl0aGluZ+KAlHRoZSByb290IGluIGZhY3Qgb2YgYWxsIGV2aWzigJRpcyB1bndpbGxpbmduZXNzIHRvCiAgICAgICAgICAgICAgICAgICAgYWN0IGp1c3RseSB1bmRlciBhbGwgY2lyY3Vtc3RhbmNlcy4gPC90cmFuc2xhdGlvbj4="
translation['16.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBvcmRlciwKICAgICAgICAgICAgICAgICAgICB0aGVuLCB0aGF0IHRoaXMgdW53aWxsaW5nbmVzcyBtYXkgbm90IHN0YW5kIGluIHRoZSB3YXkgb2YgdGhlIHdlYWtlbmluZyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGxldCB1cyBhZG1pdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDA0MjU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDQyNTgiPlRoZXNwaWFlPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAzNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDM0Ij5PcmNob21lbnVzPC9wbGFjZU5hbWU+IGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBsYXRhZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBsYXRhZWEiPlBsYXRhZWE8L3BsYWNlTmFtZT4gb3VnaHQgdG8gYmUgcmVzdG9yZWQsIGFuZCBsZXQgdXMKICAgICAgICAgICAgICAgICAgICBjby1vcGVyYXRlIHdpdGggdGhlaXIgaW5oYWJpdGFudHMgYW5kIGFwcGVhbCB0byB0aGUgb3RoZXIgc3RhdGVzLCBmb3IgaXQgaXMgYQogICAgICAgICAgICAgICAgICAgIGp1c3QgYW5kIGhvbm9yYWJsZSBwb2xpY3kgbm90IHRvIGFsbG93IGFuY2llbnQgY2l0aWVzIHRvIGJlIHVwcm9vdGVkOyBidXQgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSB0aW1lIGxldCB1cyBub3QgYWJhbmRvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2Fsb3BvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhbG9wb2xpcyI+TWVnYWxvcG9saXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVzc2VuZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVzc2VuZSI+TWVzc2VuZTwvcGxhY2VOYW1lPiB0byB0aGVpciBvcHByZXNzb3JzLCBub3IgYWxsb3cgdGhlIHJlc3RvcmF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGxhdGFlYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGxhdGFlYSI+UGxhdGFlYTwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyNTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDI1OCI+VGhlc3BpYWU8L3BsYWNlTmFtZT4gdG8gYmxpbmQgdXMgdG8gdGhlIGRlc3RydWN0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgYW5kIGVzdGFibGlzaGVkIHN0YXRlcy4gPC90cmFuc2xhdGlvbj4="
translation['16.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaWYKICAgICAgICAgICAgICAgICAgICB3ZSBwcm9jbGFpbSB0aGlzIHBvbGljeSwgdGhlcmUgaXMgbm9uZSBidXQgd2lsbCBiZSBnbGFkIHRoYXQgdGhlIFRoZWJhbnMgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY2Vhc2UgdG8gaG9sZCBvdGhlciBwZW9wbGUncyB0ZXJyaXRvcnk7IGlmIHdlIGRvIG5vdCwgd2Ugc2hhbGwgbm90IG9ubHkgZmluZCB0aGUKICAgICAgICAgICAgICAgICAgICBUaGViYW5zLCBuYXR1cmFsbHkgZW5vdWdoLCBob3N0aWxlIHRvIHRoZSBvdGhlciBwcm9wb3NhbCwgYXMgc29vbiBhcyB0aGV5CiAgICAgICAgICAgICAgICAgICAgcmVmbGVjdCB0aGF0IHRoZSByZXN0b3JhdGlvbiBvZiB0aG9zZSBjaXRpZXMgbWVhbnMgcnVpbiB0byB0aGVtc2VsdmVzLCBidXQgd2UKICAgICAgICAgICAgICAgICAgICBzaGFsbCBhbHNvIGludm9sdmUgb3Vyc2VsdmVzIGluIGVuZGxlc3MgdHJvdWJsZTsgZm9yIHdoYXQgbGltaXQgaW5kZWVkIGNhbiB0aGVyZQogICAgICAgICAgICAgICAgICAgIGJlLCBpZiB3ZSBhcmUgYWx3YXlzIHNhbmN0aW9uaW5nIHRoZSBkZXN0cnVjdGlvbiBvZiBleGlzdGluZyBjaXRpZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGRlbWFuZGluZyB0aGUgcmVzdG9yYXRpb24gb2YgdGhvc2UgdGhhdCBhcmUgZGVzdHJveWVkPyA8L3RyYW5zbGF0aW9uPg=="
translation['16.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRob3NlIHdobyBzZWVtIHRvIGFyZ3VlIG1vc3QKICAgICAgICAgICAgICAgICAgICBmYWlybHkgZGVtYW5kIG9mIHRoZSBNZWdhbG9wb2xpdGFucyB0aGF0IHRoZXkgc2hhbGwgZGVzdHJveSB0aGUgcGlsbGFyczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdGVybXMgb2YgYW4gYWxsaWFuY2Ugd2VyZSBpbnNjcmliZWQgb24gYSBzbGFiCiAgICAgICAgICAgICAgICAgICAgICAgIG9yIHBpbGxhciwgc2V0IHVwIGluIHNvbWUgcHVibGljIHBsYWNlLCBhbmQgdG8gdGFrZSBkb3duIHRoZSBwaWxsYXIgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbGljYWxseSB0byBkaXNzb2x2ZSB0aGUgYWxsaWFuY2Ug77yIY2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMzciIHZhbGlkPSJ5ZXMiPkRlbS4gMjAuMzc8L2JpYmw+77yJLiBUaGUgQXJjYWRpYW5zIGFyZSB1bndpbGxpbmcgdG8gcmlzayBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlIHJ1cHR1cmUgd2l0aCB0aGUgVGhlYmFucy48L25vdGU+IHRoYXQgcmVjb3JkIHRoZWlyIHRyZWF0eSB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZWJhbnMsIGlmIHRoZXkgYXJlIHRvIGJlIG91ciB0cnVzdGVkIGFsbGllcy4gQnV0IHRoZXkgcmVwbHkgdGhhdCB3aXRoIHRoZW0KICAgICAgICAgICAgICAgICAgICBmcmllbmRzaGlwIGlzIGJhc2VkLCBub3Qgb24gaW5zY3JpYmVkIHBpbGxhcnMsIGJ1dCBvbiBtdXR1YWwgYWR2YW50YWdlLCBhbmQgdGhleQogICAgICAgICAgICAgICAgICAgIGNvdW50IGFzIHRoZWlyIGFsbGllcyB0aG9zZSB3aG8gYXJlIHRoZWlyIGhlbHBlcnMuIEJ1dCwgZ3JhbnRpbmcgdGhlIGZhaXJuZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugc3BlYWtlcnMsIG15IG93biB2aWV3IGlzIHRoaXMuIEkgc2F5IHRoYXQgd2UgbXVzdCBhdCB0aGUgc2FtZSB0aW1lIGNhbGwKICAgICAgICAgICAgICAgICAgICB1cG9uIHRoZW0gdG8gZGVzdHJveSB0aGUgcGlsbGFycyBhbmQgdXBvbiB0aGUgTGFjZWRhZW1vbmlhbnMgdG8ga2VlcCB0aGUgcGVhY2UuCiAgICAgICAgICAgICAgICAgICAgSWYgdGhleSByZWZ1c2XigJR3aGljaGV2ZXIgb2YgdGhlIHR3byBpdCBtYXkgYmXigJR0aGVuIGF0IG9uY2UKICAgICAgICAgICAgICAgICAgICB3ZSBzaWRlIHdpdGggdGhvc2Ugd2hvIGNvbnNlbnQuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMzciIHZhbGlkPSJ5ZXMiPkRlbS4gMjAuMzc8L2JpYmw+77yJLiBUaGUgQXJjYWRpYW5zIGFyZSB1bndpbGxpbmcgdG8gcmlzayBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlIHJ1cHR1cmUgd2l0aCB0aGUgVGhlYmFucy48L3RyYW5zbGF0aW9uPg=="
translation['16.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5JZiB0aGUKICAgICAgICAgICAgICAgICAgICBNZWdhbG9wb2xpdGFucywgdGhvdWdoIHBlYWNlIGlzIHNlY3VyZWQgZm9yIHRoZW0sIHN0aWxsIGNsaW5nIHRvIHRoZSBUaGViYW4KICAgICAgICAgICAgICAgICAgICBhbGxpYW5jZSwgaXQgd2lsbCBvZiBjb3Vyc2UgYmUgb2J2aW91cyB0byBhbGwgdGhhdCB0aGV5IHByZWZlciB0aGUgYW1iaXRpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IHRvIHRoZSBjbGFpbXMgb2YganVzdGljZTsKICAgICAgICAgICAgICAgICAgICBvciBpZiwgd2hpbGUgdGhlIE1lZ2Fsb3BvbGl0YW5zIGpvaW4gb3VyIGFsbGlhbmNlIGluIGFsbCBzaW5jZXJpdHksIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIHJlZnVzZSB0byBrZWVwIHRoZSBwZWFjZSwgdGhlbiBpdCB3aWxsIGJlIGVxdWFsbHkgb2J2aW91cyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIG9iamVjdCBvZiB0aGVpciBhY3Rpdml0aWVzIGlzIG5vdCBtZXJlbHkgdG8gcmVzdG9yZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNTAwNDI1OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw1MDA0MjU4Ij5UaGVzcGlhZTwvcGxhY2VOYW1lPiwgYnV0IHRvIHN1Ymp1Z2F0ZSB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc2U8L3BsYWNlTmFtZT4gd2hpbGUgdGhlIFRoZWJhbnMgYXJlIGVuZ3Jvc3NlZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSB3YXIuIDwvdHJhbnNsYXRpb24+"
translation['16.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JIGFtIHN1cnByaXNlZCB0aGF0IHNvbWUgb2YgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIGFmcmFpZCBvZiB0aGUgZW5lbWllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBiZWNvbWluZyBhbGxpZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+LCBhbmQgeWV0CiAgICAgICAgICAgICAgICAgICAgc2VlIG5vdGhpbmcgdG8gZmVhciBpbiB0aGVpciBzdWJqdWdhdGlvbiBieSB0aGUgTGFjZWRhZW1vbmlhbnMsIGZvcmdldHRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJhY3RpY2FsIGxlc3NvbiB0byBiZSBsZWFybmVkIGZyb20gdGhlIHBhc3QsIHRoYXQgdGhlIFRoZWJhbnMgYWx3YXlzIHVzZSB0aGVzZQogICAgICAgICAgICAgICAgICAgIGFsbGllcyBhZ2FpbnN0IHRoZSBMYWNlZGFlbW9uaWFucywgd2hlcmVhcyB0aGUgTGFjZWRhZW1vbmlhbnMsIHdoZW4gdGhleSBoYWQKICAgICAgICAgICAgICAgICAgICB0aGVtIGF0IGNvbW1hbmQsIHVzZWQgdGhlbSBhZ2FpbnN0IHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['16.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlbiBhZ2FpbiBJIHRoaW5rIHRoYXQgeW91IG11c3QgYmVhciB0aGlzCiAgICAgICAgICAgICAgICAgICAgaW4gbWluZCwgdGhhdCBpZiB5b3UgcmVqZWN0IHRoZSBNZWdhbG9wb2xpdGFucyBhbmQgdGhleSBhcmUgb3ZlcnRocm93biBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZGVjZW50cmFsaXplZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QnkgZGVzdHJveWluZyB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICBtZXRyb3BvbGlzIGFuZCBjb21wZWxsaW5nIHRoZW0gdG8gbGl2ZSBpbiBzY2F0dGVyZWQgYW5kIHVud2FsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHZpbGxhZ2VzLjwvbm90ZT4gdGhlIExhY2VkYWVtb25pYW5zIGNhbiBhdCBvbmNlIGJlIGEgZ3JlYXQgcG93ZXIsIG9yIGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICBkbyBlc2NhcGUgZGVzdHJ1Y3Rpb27igJRmb3Igc3VjaCBtaXJhY2xlcyBoYXZlIGhhcHBlbmVkIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIG5vd+KAlHRoZXkgYXJlIGJvdW5kIHRvIGJlIHRoZSBzdGF1bmNoIGZyaWVuZHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+OyBidXQgaWYgeW91IGFjY2VwdCB0aGVtIGFzIGFsbGllcywKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhbG9wb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYWxvcG9saXMiPk1lZ2Fsb3BvbGlzPC9wbGFjZU5hbWU+IHdpbGwgaW5kZWVkIG93ZQogICAgICAgICAgICAgICAgICAgIGl0cyBpbW1lZGlhdGUgZGVsaXZlcmFuY2UgdG8geW91LCBidXQgd2UgbXVzdCBwdXQgb24gb25lIHNpZGUgYWxsIGNhbGN1bGF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgcmlzaywgYW5kIGNvbnNpZGVyIHdoYXQgd2lsbCBiZSB0aGUgZWZmZWN0IHVwb24gb3VyIHJlbGF0aW9ucyB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['16.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaWYgdGhlIFRoZWJhbnMKICAgICAgICAgICAgICAgICAgICBhcmUgZmluYWxseSBiZWF0ZW4sIGFzIHRoZXkgZGVzZXJ2ZSB0byBiZSwgdGhlcmUgd2lsbCBiZSBubyB1bmR1ZSBpbmNyZWFzZSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBwb3dlciBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGJlY2F1c2UgdGhlcmUgYXJlIHRoZWlyIG5laWdoYm9ycywgdGhlCiAgICAgICAgICAgICAgICAgICAgQXJjYWRpYW5zLCB0byBiYWxhbmNlIGl0OyBidXQgaWYgdGhlIFRoZWJhbnMgYWZ0ZXIgYWxsIHJlY292ZXIgYW5kIGFyZSBzYXZlZCwgYXQKICAgICAgICAgICAgICAgICAgICBhbnkgcmF0ZSB0aGV5IHdpbGwgYmUgdGhlIHdlYWtlciBiZWNhdXNlIHdlIHNoYWxsIGhhdmUgZ2FpbmVkIHRoZXNlIGFsbGllcywKICAgICAgICAgICAgICAgICAgICBzYXZlZCBieSBvdXIgaGVscC4gVGhlcmVmb3JlIGl0IGlzIGluIGV2ZXJ5IHdheSBleHBlZGllbnQgdGhhdCB0aGUgQXJjYWRpYW5zCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG5vdCBiZSBhYmFuZG9uZWQsIGFuZCB0aGF0IGlmIHRoZXkgZG8gc3Vydml2ZSwgdGhleSBzaG91bGQgbm90IHNlZW0gdG8KICAgICAgICAgICAgICAgICAgICBvd2UgdGhlaXIgcHJlc2VydmF0aW9uIHRvIHRoZW1zZWx2ZXMgb3IgdG8gYW55IG90aGVyIHBlb3BsZSB0aGFuIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['16.32'] = ""
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PdXIgaGVhcnR5CiAgICAgICAgICAgICAgICAgICAgYXNzZW50LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyBkdWUgdG8KICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gaW5zaXN0IHRoYXQgd2Ugc2hvdWxkIGFiaWRlIGJ5IG91ciBvYXRocyBhbmQgY292ZW5hbnRzLCBwcm92aWRlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBkbyBzbyBmcm9tIGNvbnZpY3Rpb247IGZvciBJIGJlbGlldmUgdGhhdCBub3RoaW5nIGJlY29tZXMgYSBkZW1vY3JhdGljCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIG1vcmUgdGhhbiB6ZWFsIGZvciBlcXVpdHkgYW5kIGp1c3RpY2UuIFRob3NlLCB0aGVyZWZvcmUsIHdobyBhcmUgc28KICAgICAgICAgICAgICAgICAgICBlbXBoYXRpYyBpbiB1cmdpbmcgeW91IHRvIHRoaXMgY291cnNlIHNob3VsZCBub3Qga2VlcCB3ZWFyeWluZyB5b3Ugd2l0aCBzcGVlY2hlcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGFyZSBiZWxpZWQgYnkgdGhlaXIgcHJhY3RpY2UsIGJ1dCBhZnRlciBzdWJtaXR0aW5nIG5vdyB0byBmdWxsIGlucXVpcnksCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGVpdGhlciBmb3IgdGhlIGZ1dHVyZSBiZSBzdXJlIG9mIHlvdXIgYXNzZW50IGluIHRoZXNlIG1hdHRlcnMsIG9yIGVsc2UKICAgICAgICAgICAgICAgICAgICBtYWtlIHdheSBmb3IgdGhlIGNvdW5zZWxzIG9mIHRob3NlIHdobyBzaG93IGEgdHJ1ZXIgY29uY2VwdGlvbiBvZiB3aGF0IGlzIGp1c3QsCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgeW91IG1heSBlaXRoZXIgdm9sdW50YXJpbHkgc3VibWl0CiAgICAgICAgICAgICAgICAgICAgdG8gd3JvbmcsIG1ha2luZyB0aGUgd3Jvbmdkb2VyIGEgZnJlZSBnaWZ0IG9mIHlvdXIgc3VibWlzc2lvbiwgb3IgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGVseSByZXNvbHZlZCB0byBwdXQganVzdGljZSBiZWZvcmUgYWxsIG90aGVyIGNsYWltcywgbWF5IHB1cnN1ZSB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIGludGVyZXN0cywgY2xlYXIgZnJvbSBhbGwgcmVwcm9hY2gsIHdpdGhvdXQgZnVydGhlciBoZXNpdGF0aW9uLiBCdXQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICB2ZXJ5IHRlcm1zIG9mIHRoZSBjb21wYWN0IGFuZCBmcm9tIHRoZSBvYXRocyB3aGljaCByYXRpZmllZCB0aGUgZ2VuZXJhbCBwZWFjZSwKICAgICAgICAgICAgICAgICAgICB5b3UgbWF5IGF0IG9uY2Ugc2VlIHdobyBhcmUgaXRzIHRyYW5zZ3Jlc3NvcnM7IGFuZCB0aGF0IHRob3NlIHRyYW5zZ3Jlc3Npb25zIGFyZQogICAgICAgICAgICAgICAgICAgIHNlcmlvdXMsIEkgd2lsbCBwcm92ZSB0byB5b3UgY29uY2lzZWx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgaWYgeW91IHdlcmUgYXNrZWQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoYXQgZm9ybSBvZiBjb21wdWxzaW9uIHdvdWxkIG1vc3QKICAgICAgICAgICAgICAgICAgICByb3VzZSB5b3VyIGluZGlnbmF0aW9uLCBJIHRoaW5rIHRoYXQgaWYgdGhlIHNvbnMgb2YgUGlzaXN0cmF0dXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGlwcGlhcyBhbmQgaGlzIGZhbWlseSB3ZXJlIGRyaXZlbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYnkgdGhlIGhlbHAgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFNwYXJ0YW5zIGluIDUxMC48L25vdGU+IGhhZCBiZWVuIGFsaXZlIGF0IHRoZSBwcmVzZW50IHRpbWUgYW5kIHNvbWVvbmUgdHJpZWQKICAgICAgICAgICAgICAgICAgICB0byBjb21wZWwgeW91IHRvIHJlc3RvcmUgdGhlbSwgeW91IHdvdWxkIHNuYXRjaCB1cCB5b3VyIHdlYXBvbnMgYW5kIGJyYXZlIGFueQogICAgICAgICAgICAgICAgICAgIGRhbmdlciByYXRoZXIgdGhhbiByZWNlaXZlIHRoZW0gYmFjaywgb3IgaWYgeW91IGRpZCBjb25zZW50LCB5b3Ugd291bGQgYmUKICAgICAgICAgICAgICAgICAgICBzbGF2ZXMsIGFzIHN1cmVseSBhcyBpZiB5b3UgaGFkIGJlZW4gYm91Z2h0IGZvciBtb25leTsgbmF5LCBtb3JlIHNvLCBpbmFzbXVjaCBhcwogICAgICAgICAgICAgICAgICAgIG5vIG9uZSB3b3VsZCBpbnRlbnRpb25hbGx5IGtpbGwgaGlzIG93biBzZXJ2YW50LCBidXQgdGhlIHZpY3RpbXMgb2YgdHlyYW5ueSBtYXkKICAgICAgICAgICAgICAgICAgICBiZSBzZWVuIGV4ZWN1dGVkIHdpdGhvdXQgdHJpYWwsIGFzIHdlbGwgYXMgb3V0cmFnZWQgaW4gdGhlIHBlcnNvbnMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICB3aXZlcyBhbmQgY2hpbGRyZW4uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBieSB0aGUgaGVscCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgU3BhcnRhbnMgaW4gNTEwLjwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB3aGVuIEFsZXhhbmRlciwKICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byB0aGUgb2F0aHMgYW5kIHRoZSBjb21wYWN0cyBhcyBzZXQgZm9ydGggaW4gdGhlIGdlbmVyYWwgcGVhY2UsCiAgICAgICAgICAgICAgICAgICAgcmVzdG9yZWQgdGhvc2UgdHlyYW50cywgdGhlIHNvbnMgb2YgUGhpbGlhZGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UeXJhbnQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXNzZW5lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZXNzZW5lIj5NZXNzZW5lPC9wbGFjZU5hbWU+IGluIHRoZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIFBoaWxpcC4gSGlzIHNvbnMsIE5lb24gYW5kIFRocmFzeW1hY2h1cywgd2VyZSBleHBlbGxlZCBidXQgcmVzdG9yZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgQWxleGFuZGVyLiBQb2x5Yml1cywgaGltc2VsZiBhbiBBcmNhZGlhbiwgYm9ybiBhIGNlbnR1cnkgYW5kIGEgaGFsZiBsYXRlciwKICAgICAgICAgICAgICAgICAgICAgICAgZW50ZXJzIGEgdmlnb3JvdXMgcHJvdGVzdCBhZ2FpbnN0IERlbW9zdGhlbmVzJyBjb25kZW1uYXRpb24gb2YgdGhlc2UgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIOKAnHRyYWl0b3Jz4oCdIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjk1IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOC4yOTU8L2JpYmw+LCBhbmQgY2xhaW1zIHRoYXQgdGhleSBoYWQgcmVuZGVyZWQgdmFsdWFibGUgc2VydmljZSBpbgogICAgICAgICAgICAgICAgICAgICAgICBmcmVlaW5nIHRoZSBQZWxvcG9ubmVzaWFuIHN0YXRlcyBmcm9tIHRoZSB5b2tlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiBhbmQgZW5zdXJpbmcgdGhlaXIgcHJvc3Blcml0eQogICAgICAgICAgICAgICAgICAgICAgICB1bmRlciB0aGUgYWVnaXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDE3LjE0IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cyAxNy4xNDwvYmlibD4u77yJLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lc3NlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lc3NlbmUiPk1lc3NlbmU8L3BsYWNlTmFtZT4gaW4gdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgUGhpbGlwLiBIaXMgc29ucywgTmVvbiBhbmQgVGhyYXN5bWFjaHVzLCB3ZXJlIGV4cGVsbGVkIGJ1dCByZXN0b3JlZCBieQogICAgICAgICAgICAgICAgICAgICAgICBBbGV4YW5kZXIuIFBvbHliaXVzLCBoaW1zZWxmIGFuIEFyY2FkaWFuLCBib3JuIGEgY2VudHVyeSBhbmQgYSBoYWxmIGxhdGVyLAogICAgICAgICAgICAgICAgICAgICAgICBlbnRlcnMgYSB2aWdvcm91cyBwcm90ZXN0IGFnYWluc3QgRGVtb3N0aGVuZXMnIGNvbmRlbW5hdGlvbiBvZiB0aGVzZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIg4oCcdHJhaXRvcnPigJ0gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yOTUiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE4LjI5NTwvYmlibD4sIGFuZCBjbGFpbXMgdGhhdCB0aGV5IGhhZCByZW5kZXJlZCB2YWx1YWJsZSBzZXJ2aWNlIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGZyZWVpbmcgdGhlIFBlbG9wb25uZXNpYW4gc3RhdGVzIGZyb20gdGhlIHlva2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+IGFuZCBlbnN1cmluZyB0aGVpciBwcm9zcGVyaXR5CiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyIHRoZSBhZWdpcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMTcuMTQiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzIDE3LjE0PC9iaWJsPi7vvIkuPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZXNzZW5lIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZXNzZW5lIj5NZXNzZW5lPC9wbGFjZU5hbWU+LCBoYWQgaGUgYW55IHJlZ2FyZCBmb3IKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlPyBEaWQgaGUgbm90IHJhdGhlciBnaXZlIHBsYXkgdG8gaGlzIG93biB0eXJhbm5pY2FsIGRpc3Bvc2l0aW9uLCBzaG93aW5nCiAgICAgICAgICAgICAgICAgICAgbGl0dGxlIHJlZ2FyZCBmb3IgeW91IGFuZCB0aGUgam9pbnQgYWdyZWVtZW50PyA8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHN1cmVseSB3cm9uZyB0aGF0IHlvdSBzaG91bGQgYmUgaGlnaGx5IGluZGlnbmFudCB3aGVuIHlvdSBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgdmljdGltcyBvZiBzdWNoIGNvZXJjaW9uLCBidXQgc2hvdWxkIG5lZ2xlY3QgYWxsIHNhZmVndWFyZHMgaWYgaXQgaXMgZW1wbG95ZWQKICAgICAgICAgICAgICAgICAgICBzb21ld2hlcmUgZWxzZSwgY29udHJhcnkgdG8gdGhlIHN3b3JuIGFncmVlbWVudCB3aXRoIHlvdSwgYW5kIHRoYXQgd2UgaGVyZSBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gc2hvdWxkIGJlIHVyZ2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgY2VydGFpbiBzcGVha2VycyB0byBhYmlkZSBieSB0aGUgb2F0aHMsIHdoaWxlIHRoZXkgZ3JhbnQgdGhpcyBsaWJlcnR5IG9mIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBtZW4gd2hvIGhhdmUgc28gbm90b3Jpb3VzbHkgbWFkZSB0aG9zZSBvYXRocyBvZiBubyBlZmZlY3QuIDwvdHJhbnNsYXRpb24+"
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGlzIGNhbiBuZXZlciBoYXBwZW4sIGlmIHlvdSBhcmUgd2lsbGluZyB0byBzZWUKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlIGRvbmU7IGZvciBpdCBpcyBmdXJ0aGVyIHN0aXB1bGF0ZWQgaW4gdGhlIGNvbXBhY3QgdGhhdCBhbnlvbmUgd2hvIGFjdHMKICAgICAgICAgICAgICAgICAgICBhcyBBbGV4YW5kZXIgaGFzIGFjdGVkIHNoYWxsIGJlIHRoZSBlbmVteSBvZiBhbGwgdGhlIG90aGVyIHBhcnRpZXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY29tcGFjdCwgYW5kIGhpcyBjb3VudHJ5IHNoYWxsIGJlIGhvc3RpbGUgdGVycml0b3J5LCBhbmQgYWxsIHRoZSBwYXJ0aWVzIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgdW5pdGUgaW4gYSBjYW1wYWlnbiBhZ2FpbnN0IGhpbS4gU28gaWYgd2UgY2Fycnkgb3V0IHRoZSBhZ3JlZW1lbnQsIHdlIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgdHJlYXQgdGhlIHJlc3RvcmVyIG9mIHRoZSB0eXJhbnRzIGFzIGFuIGVuZW15LiA8L3RyYW5zbGF0aW9uPg=="
translation['17.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgdGhlc2UgY2hhbXBpb25zIG9mIHR5cmFubnkgbWlnaHQgdXJnZQogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHNvbnMgb2YgUGhpbGlhZGVzIHdlcmUgdHlyYW50cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lc3NlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lc3NlbmUiPk1lc3NlbmU8L3BsYWNlTmFtZT4gYmVmb3JlIHRoZSBjb21wYWN0IHdhcyBtYWRlLCBhbmQgdGhhdCB0aGF0IHdhcyB3aHkKICAgICAgICAgICAgICAgICAgICBBbGV4YW5kZXIgcmVzdG9yZWQgdGhlbS4gQnV0IGl0IGlzIGEgcmlkaWN1bG91cyBwcmluY2lwbGUgdG8gZXhwZWwgdGhlIExlc2JpYW4KICAgICAgICAgICAgICAgICAgICB0eXJhbnRzIG9uIHRoZSBncm91bmQgdGhhdCB0aGVpciBydWxlIGlzIGFuIG91dHJhZ2XigJRJIG1lYW4gdGhlIHR5cmFudHMKICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFudGlzc2EiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFudGlzc2EiPkFudGlzc2E8L3BsYWNlTmFtZT4gYW5kIEVyZXN1cywgd2hvCiAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoZWQgdGhlbXNlbHZlcyBiZWZvcmUgdGhlIGFncmVlbWVudOKAlGFuZCB5ZXQgdG8gaW1hZ2luZSB0aGF0IGl0CiAgICAgICAgICAgICAgICAgICAgaXMgYSBtYXR0ZXIgb2YgaW5kaWZmZXJlbmNlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVzc2VuZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVzc2VuZSI+TWVzc2VuZTwvcGxhY2VOYW1lPiwgd2hlcmUgdGhlIHNhbWUgaGFyc2ggc3lzdGVtIHByZXZhaWxzLiA8L3RyYW5zbGF0aW9uPg=="
translation['17.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BZ2FpbiwgdGhlIGNvbXBhY3QgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgdmVyeSBiZWdpbm5pbmcgZW5qb2lucyB0aGF0IHRoZSBHcmVla3Mgc2hhbGwgYmUgZnJlZSBhbmQgaW5kZXBlbmRlbnQuIElzIGl0CiAgICAgICAgICAgICAgICAgICAgbm90LCB0aGVuLCB0aGUgaGVpZ2h0IG9mIGFic3VyZGl0eSB0aGF0IHRoZSBjbGF1c2UgYWJvdXQgZnJlZWRvbSBzaG91bGQgc3RhbmQKICAgICAgICAgICAgICAgICAgICBmaXJzdCBpbiB0aGUgY29tcGFjdCwgYW5kIHRoYXQgb25lIHdobyBoYXMgZW5zbGF2ZWQgb3RoZXJzIHNob3VsZCBiZSBzdXBwb3NlZAogICAgICAgICAgICAgICAgICAgIG5vdCB0byBoYXZlIGFjdGVkIGNvbnRyYXJ5IHRvIHRoZSBqb2ludCBhZ3JlZW1lbnQ/IFRoZXJlZm9yZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaWYgd2UgYXJlIGdvaW5nIHRvIGFiaWRlIGJ5IG91cgogICAgICAgICAgICAgICAgICAgIG9hdGhzIGFuZCBjb3ZlbmFudHMgYW5kIGRvIHdoYXQgaXMganVzdCDvvIhmb3IgaXQgaXMgdG8gdGhpcyB0aGF0IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgc3BlYWtlcnMsIGFzIEkgaGF2ZSBzYWlkLCBhcmUgdXJnaW5nIHlvde+8iSwgaXQgaXMgb3VyIGJvdW5kZW4gZHV0eSB0bwogICAgICAgICAgICAgICAgICAgIHNlaXplIG91ciBhcm1zIGFuZCB0YWtlIHRoZSBmaWVsZCBhZ2FpbnN0IHRoZSB0cmFuc2dyZXNzb3JzIHdpdGggYWxsIHdobyB3aWxsCiAgICAgICAgICAgICAgICAgICAgam9pbiB1cy4gPC90cmFuc2xhdGlvbj4="
translation['17.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPk9yIGRvIHlvdSB0aGluayB0aGF0IG9wcG9ydHVuaXR5CiAgICAgICAgICAgICAgICAgICAgc29tZXRpbWVzIHNvIHByZXZhaWxzIHRoYXQgbWVuIHB1cnN1ZSBleHBlZGllbmN5IGV2ZW4gYXBhcnQgZnJvbQogICAgICAgICAgICAgICAgICAgIGp1c3RpY2XigJRhbmQgeWV0IG5vdywgd2hlbiBqdXN0aWNlIGFuZCBvcHBvcnR1bml0eSBhbmQgZXhwZWRpZW5jeSBhbGwKICAgICAgICAgICAgICAgICAgICBjb25jdXIsIHdpbGwgeW91IGFjdHVhbGx5IHdhaXQgZm9yIHNvbWUgb3RoZXIgc2Vhc29uIHRvIGNsYWltIHlvdXIgbGliZXJ0aWVzIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBsaWJlcnRpZXMgb2YgYWxsIHRoZSBHcmVla3M/IDwvdHJhbnNsYXRpb24+"
translation['17.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBjb21lIHRvIGFub3RoZXIgY2xhaW0gc2FuY3Rpb25lZCBieSB0aGUgY29tcGFjdC4gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGFjdHVhbCB3b3JkcyBhcmUsIOKAnElmIGFueSBvZiB0aGUgcGFydGllcyBzaGFsbCBvdmVydGhyb3cgdGhlCiAgICAgICAgICAgICAgICAgICAgY29uc3RpdHV0aW9uIGVzdGFibGlzaGVkIGluIHRoZSBzZXZlcmFsIHN0YXRlcyBhdCB0aGUgZGF0ZSB3aGVuIHRoZXkgdG9vayB0aGUKICAgICAgICAgICAgICAgICAgICBvYXRocyB0byBvYnNlcnZlIHRoZSBwZWFjZSwgdGhleSBzaGFsbCBiZSB0cmVhdGVkIGFzIGVuZW1pZXMgYnkgYWxsIHRoZSBwYXJ0aWVzCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHBlYWNlLuKAnSBCdXQganVzdCByZWZsZWN0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IHRoZSBBY2hhZWFucyBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc2U8L3BsYWNlTmFtZT4gZW5qb3llZCBkZW1vY3JhdGljIGdvdmVybm1lbnQsIGFuZAogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGVpciBkZW1vY3JhY2llcywgdGhhdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBlbGxlbmUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBlbGxlbmUiPlBlbGxlbmU8L3BsYWNlTmFtZT4sIGhhcyBub3cgYmVlbiBvdmVydGhyb3duIGJ5IHRoZSBNYWNlZG9uaWFuIGtpbmcsIHdobwogICAgICAgICAgICAgICAgICAgIGhhcyBleHBlbGxlZCB0aGUgbWFqb3JpdHkgb2YgdGhlIGNpdGl6ZW5zLCBnaXZlbiB0aGVpciBwcm9wZXJ0eSB0byB0aGVpciBzbGF2ZXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIHNldCB1cCBDaGFlcm9uLCB0aGUgd3Jlc3RsZXIsIGFzIHRoZWlyIHR5cmFudC4gPC90cmFuc2xhdGlvbj4="
translation['17.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2Ugb3Vyc2VsdmVzIGFyZSBwYXJ0aWVzIHRvIHRoZSBwZWFjZSwgd2hpY2ggaW5zdHJ1Y3RzIHVzIHRvCiAgICAgICAgICAgICAgICAgICAgdHJlYXQgYXMgZW5lbWllcyB0aG9zZSB3aG8gYXJlIGd1aWx0eSBvZiBzdWNoIGFjdHMuIE5vdyBpbiB2aWV3IG9mIHRoaXMsIGFyZSB3ZQogICAgICAgICAgICAgICAgICAgIHRvIG9iZXkgdGhlc2Ugam9pbnQgaW5zdHJ1Y3Rpb25zIGFuZCB0cmVhdCB0aGVtIGFzIGVuZW1pZXMsIG9yIHdpbGwgYW55b25lIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGJsYWNrZ3VhcmQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBpcyBvbmUgb2YgdGhlIHdvcmRzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIExpYmFuaXVzIHRob3VnaHQgbW9yZSB0aGUgc3R5bGUgb2YgSHlwZXJpZGVzIHRoYW4gb2YgRGVtb3N0aGVuZXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIGVub3VnaCB0byBzYXkgbm/igJRvbmUgb2YgdGhlIGhpcmVsaW5ncyBpbiB0aGUgcGF5IG9mIHRoZSBNYWNlZG9uaWFuCiAgICAgICAgICAgICAgICAgICAga2luZywgb25lIG9mIHRob3NlIHdobyBoYXZlIGdyb3duIHJpY2ggYXQgeW91ciBleHBlbnNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['17.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91IG1heSBiZSBzdXJlIHRoZXkgYXJlIG5vdCBpZ25vcmFudCBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIGZhY3RzOyBidXQgdGhleSBoYXZlIGdyb3duIHNvIGluc29sZW50LCB3aXRoIHRoZSB0eXJhbnQncyB0cm9vcHMgZm9yIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYm9keWd1YXJkLCB0aGF0IHRoZXkgaW5zaXN0IG9uIHlvdXIgb2JzZXJ2aW5nIHRoZSBhbHJlYWR5IHZpb2xhdGVkIG9hdGhzLCBhcyBpZgogICAgICAgICAgICAgICAgICAgIEFsZXhhbmRlcidzIGFic29sdXRlIHNvdmVyZWlnbnR5IGV4dGVuZGVkIG92ZXIgcGVyanVyeSBhbHNvOyBhbmQgdGhleSBjb21wZWwgeW91CiAgICAgICAgICAgICAgICAgICAgdG8gcmVzY2luZCB5b3VyIG93biBsYXdzLCByZWxlYXNpbmcgbWVuIHdobyBoYXZlIGJlZW4gY29uZGVtbmVkIGluIHlvdXIgY291cnRzCiAgICAgICAgICAgICAgICAgICAgYW5kIGZvcmNpbmcgeW91IHRvIHNhbmN0aW9uIG51bWJlcmxlc3Mgb3RoZXIgaWxsZWdhbGl0aWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['17.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlaXIgY29uZHVjdCBpcyBuYXR1cmFsOyBmb3IgbWVuIHdobyBoYXZlIHNvbGQKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHRvIGEgcG9saWN5IGFudGFnb25pc3RpYyB0byB0aGUgaW50ZXJlc3RzIG9mIHRoZWlyIGNvdW50cnkgY2Fubm90CiAgICAgICAgICAgICAgICAgICAgdHJvdWJsZSB0aGVtc2VsdmVzIGFib3V0IGxhd3MgYW5kIG9hdGhzOyB0aGV5IGFyZSB0byB0aGVtIG1lcmUgdGVybXMgd2hpY2ggdGhleQogICAgICAgICAgICAgICAgICAgIGVtcGxveSB0byBsZWFkIGFzdHJheSB0aGUgY2l0aXplbnMgd2hvIGNvbWUgdG8gdGhlIEFzc2VtYmx5IGZvciBkaXZlcnNpb24gYW5kCiAgICAgICAgICAgICAgICAgICAgbm90IGZvciBjYXJlZnVsIGlucXVpcnksIGFuZCB3aG8gZm9yZ2V0IHRoYXQgcHJlc2VudCBpbmFjdGlvbiB3aWxsIHNvbWUgZGF5CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0IGluIHdpbGQgY29uZnVzaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['17.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5NeSBvd24gYWR2aWNlLCBhcyBJCiAgICAgICAgICAgICAgICAgICAgc2FpZCBhdCB0aGUgc3RhcnQsIGlzIHRvIGJlbGlldmUgdGhlbSB3aGVuIHRoZXkgc2F5IHRoYXQgd2Ugb3VnaHQgdG8gYWJpZGUgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgam9pbnQgYWdyZWVtZW50LCB1bmxlc3MsIHdoZW4gdGhleSBpbnNpc3Qgb24gb3VyIGFiaWRpbmcgYnkgdGhlIG9hdGhzLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaW50ZXJwcmV0IHRoZW0gYXMgbm90IGZvcmJpZGRpbmcgYW55IGFjdCBvZiBpbmp1c3RpY2UsIG9yIGltYWdpbmUgdGhhdCBubyBvbmUKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIHNlbnNpYmxlIG9mIHRoZSBjaGFuZ2UgZnJvbSBkZW1vY3JhY3kgdG8gdHlyYW5ueSBvciBvZiB0aGUgb3ZlcnRocm93IG9mCiAgICAgICAgICAgICAgICAgICAgYSBmcmVlIGNvbnN0aXR1dGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['17.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGZvciBhIHN0aWxsIGdyZWF0ZXIgYWJzdXJkaXR5LiBGb3IgaXQgaXMgcHJvdmlkZWQgaW4gdGhlIGNvbXBhY3QKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IHNoYWxsIGJlIHRoZSBidXNpbmVzcyBvZiB0aGUgZGVsZWdhdGVzIGF0IHRoZSBDb25ncmVzcyBhbmQgdGhvc2UKICAgICAgICAgICAgICAgICAgICByZXNwb25zaWJsZSBmb3IgcHVibGljIHNhZmV0eSB0byBzZWUgdGhhdCBpbiB0aGUgc3RhdGVzIHRoYXQgYXJlIHBhcnRpZXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcGVhY2UgdGhlcmUgc2hhbGwgYmUgbm8gZXhlY3V0aW9ucyBhbmQgYmFuaXNobWVudHMgY29udHJhcnkgdG8gdGhlIGxhd3MKICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2hlZCBpbiB0aG9zZSBzdGF0ZXMsIG5vIGNvbmZpc2NhdGlvbiBvZiBwcm9wZXJ0eSwgbm8gcGFydGl0aW9uIG9mIGxhbmRzLAogICAgICAgICAgICAgICAgICAgIG5vIGNhbmNlbGxpbmcgb2YgZGVidHMsIGFuZCBubyBlbWFuY2lwYXRpb24gb2Ygc2xhdmVzIGZvciBwdXJwb3NlcyBvZgogICAgICAgICAgICAgICAgICAgIHJldm9sdXRpb24uIEJ1dCB0aGVzZSBzcGVha2VycyBhcmUgc28gZmFyIGZyb20gc2Vla2luZyB0byBwcmV2ZW50IGFueSBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIGV2aWxzLCB0aGF0IHRoZXkgam9pbiBpbiBwcm9tb3RpbmcgdGhlbS4gQW5kIGRvIHRoZXkgbm90IHRoZW4gZGVzZXJ2ZQogICAgICAgICAgICAgICAgICAgIGRlYXRo4oCUdGhlIG1lbiB3aG8gcHJvbW90ZSBpbiB0aGUgdmFyaW91cyBzdGF0ZXMgdGhvc2UgdGVycmlibGUKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0aWVzIHdoaWNoLCBiZWNhdXNlIHRoZXkgYXJlIHNvIHNlcmlvdXMsIHRoaXMgaW1wb3J0YW50IGJvZHkgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBjb21taXNzaW9uZWQgdG8gcHJldmVudDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj7igJxJdCBhcHBlYXJzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgYSBzdGFuZGluZyBtaWxpdGFyeSBmb3JjZSwgdW5kZXIgTWFjZWRvbmlhbiBvcmRlcnMsIHdhcyBwcm92aWRlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBlbmZvcmNlIG9ic2VydmFuY2Ugb2YgdGhlIGNvbnZlbnRpb247IGFuZCB0aGF0IHRoZSBTeW5vZCBvZiBEZXB1dGllcyB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVtcGxhdGVkIGFzIGxpa2VseSB0byBtZWV0IHBlcmlvZGljYWxseS7igJ3igJRHcm90ZQogICAgICAgICAgICAgICAgICAgICAgICDvvIhjLiA5Me+8iS4gVGhlIHN1YmplY3Qgb2Y8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPgOG9s8+EzrHOvs6xzr08L2ZvcmVpZ24+aXMgYXBwYXJlbnRseTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6x4byxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDPg8+Fzr3OuOG/hs66zrHOuTwvZm9yZWlnbj4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+A4b2zz4TOsc6+zrHOvTwvZm9yZWlnbj5pcyBhcHBhcmVudGx5PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrHhvLEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIM+Dz4XOvc644b+GzrrOsc65PC9mb3JlaWduPi48L3RyYW5zbGF0aW9uPg=="
translation['17.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aWxsIHBvaW50CiAgICAgICAgICAgICAgICAgICAgb3V0IGEgZnVydGhlciBicmVhY2ggb2YgdGhlIGNvbXBhY3QuIEZvciBpdCBpcyBsYWlkIGRvd24gdGhhdCBpdCBzaGFsbCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBsYXdmdWwgZm9yIGV4aWxlcyB0byBzZXQgb3V0LCBiZWFyaW5nIGFybXMsIGZyb20gdGhlIHN0YXRlcyB3aGljaCBhcmUgcGFydGllcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBwZWFjZSwgd2l0aCBob3N0aWxlIGludGVudCBhZ2FpbnN0IGFueSBvZiB0aGUgc3RhdGVzIGluY2x1ZGVkIGluIHRoZSBwZWFjZTsKICAgICAgICAgICAgICAgICAgICBidXQgaWYgdGhleSBkbywgdGhlbiB0aGF0IGNpdHkgZnJvbSB3aGljaCB0aGV5IHNldCBvdXQgc2hhbGwgYmUgZXhjbHVkZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSB0ZXJtcyBvZiB0aGUgdHJlYXR5LiBOb3cgdGhlIE1hY2Vkb25pYW4ga2luZyBoYXMgYmVlbiBzbyB1bnNjcnVwdWxvdXMgYWJvdXQKICAgICAgICAgICAgICAgICAgICBiZWFyaW5nIGFybXMgdGhhdCBoZSBoYXMgbmV2ZXIgeWV0IGxhaWQgdGhlbSBkb3duLCBidXQgZXZlbiBub3cgZ29lcyBhYm91dAogICAgICAgICAgICAgICAgICAgIGJlYXJpbmcgYXJtcywgYXMgZmFyIGFzIGlzIGluIGhpcyBwb3dlciwgYW5kIG1vcmUgc28gaW5kZWVkIG5vdyB0aGFuIGV2ZXIsCiAgICAgICAgICAgICAgICAgICAgaW5hc211Y2ggYXMgaGUgaGFzIHJlaW5zdGF0ZWQgdGhlIHByb2Zlc3Npb25hbCB0cmFpbmVyIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMTA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTExMDQiPlNpY3lvbjwvcGxhY2VOYW1lPiBieSBhbiBlZGljdCwgYW5kIG90aGVyIGV4aWxlcwogICAgICAgICAgICAgICAgICAgIGVsc2V3aGVyZS4gPC90cmFuc2xhdGlvbj4="
translation['17.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgaWYgd2UgYXJlIHRvIGtlZXAgdGhpcwogICAgICAgICAgICAgICAgICAgIGpvaW50IGFncmVlbWVudCwgYXMgdGhlc2Ugc3BlYWtlcnMgc2F5LCB0aGUgc3RhdGVzIHRoYXQgYXJlIGd1aWx0eSBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIG9mZmVuY2VzIGFyZSBleGNsdWRlZCBmcm9tIG91ciB0cmVhdHkuIElmLCBpbmRlZWQsIHdlIG91Z2h0IHRvIGh1c2ggdGhlIG1hdHRlcgogICAgICAgICAgICAgICAgICAgIHVwLCB3ZSBtdXN0IG5ldmVyIHNheSB0aGF0IHRoZXkgYXJlIHRoZSBNYWNlZG9uaWFuIHN0YXRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIHRoZSBzdGF0ZXMgdW5kZXIgdGhlIGltbWVkaWF0ZSBjb250cm9sIG9mCiAgICAgICAgICAgICAgICAgICAgQWxleGFuZGVyLjwvbm90ZT47IGJ1dCBpZiB0aGUgbWVuIHdobyBhcmUgc3Vic2VydmllbnQgdG8gdGhlIE1hY2Vkb25pYW4ga2luZwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgeW91ciBpbnRlcmVzdHMgbmV2ZXIgY2Vhc2UgdXJnaW5nIHVzIHRvIGNhcnJ5IG91dCB0aGUgam9pbnQgYWdyZWVtZW50LAogICAgICAgICAgICAgICAgICAgIGxldCB1cyB0YWtlIHRoZW0gYXQgdGhlaXIgd29yZCwgc2luY2UgdGhlaXIgY29udGVudGlvbiBpcyBqdXN0LCBhbmQgbGV0IHVzLCBhcwogICAgICAgICAgICAgICAgICAgIG91ciBvYXRoIGRlbWFuZHMsIGV4Y2x1ZGUgdGhlIGd1aWx0eSBwYXJ0aWVzIGZyb20gdGhlIHRyZWF0eSwgYW5kIGZvcm0gYSBwbGFuCiAgICAgICAgICAgICAgICAgICAgZm9yIGRlYWxpbmcgd2l0aCBtZW4gd2hvc2UgdGVtcGVyIGlzIHNvIGJydXRhbGx5IGRpY3RhdG9yaWFsLCBhbmQgd2hvIGFyZQogICAgICAgICAgICAgICAgICAgIGNvbnN0YW50bHkgZWl0aGVyIHBsb3R0aW5nIG9yIGFjdGluZyBhZ2FpbnN0IHVzIGFuZCBtb2NraW5nIGF0IHRoZSBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgcGVhY2UuIDwvdHJhbnNsYXRpb24+"
translation['17.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0LCBJIGFzayB5b3UsIGNhbiB0aGV5IHVyZ2UgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZSBjb3JyZWN0bmVzcyBvZiB0aGlzIHZpZXc/IFdpbGwgdGhleSBjbGFpbSB0aGF0IHRoZSBhZ3JlZW1lbnQgc3RhbmRzIGdvb2QgYXMKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG91ciBjaXR5LCBidXQgZGVtdXIgdG8gaXQgd2hlcmUgaXQgcHJvdGVjdHMgb3VyIGludGVyZXN0cz8gRG9lcyBpdAogICAgICAgICAgICAgICAgICAgIHJlYWxseSBzZWVtIGZhaXIgdGhhdCB0aGlzIHNob3VsZCBiZSBzbz8gQW5kIGlmIHRoZXJlIGlzIGFueXRoaW5nIGluIHRoZSB0cmVhdHkKICAgICAgICAgICAgICAgICAgICB0aGF0IGZhdm9ycyBvdXIgZW5lbWllcyBhZ2FpbnN0IG91ciBjaXR5LCB3aWxsIHRoZXkgYWx3YXlzIG1ha2UgdGhlIG1vc3Qgb2YgaXQsCiAgICAgICAgICAgICAgICAgICAgYnV0IGlmIHRoZXJlIGlzIGFueXRoaW5nIHRoYXQgdGVsbHMgdGhlIG90aGVyIHdheSBhbmQgaXMgYXQgb25jZSBqdXN0IGFuZAogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZW91cyB0byB1cywgd2lsbCB0aGV5IHRoaW5rIHRoYXQgdW5yZW1pdHRpbmcgb3Bwb3NpdGlvbiBpcyB0aGVpcgogICAgICAgICAgICAgICAgICAgIHBlY3VsaWFyIGR1dHk/IDwvdHJhbnNsYXRpb24+"
translation['17.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHRvIHByb3ZlIHRvIHlvdSBzdGlsbCBtb3JlIGNsZWFybHkgdGhhdCBubyBHcmVla3Mgd2lsbCBhY2N1c2UgeW91IG9mCiAgICAgICAgICAgICAgICAgICAgdHJhbnNncmVzc2luZyBhbnkgb2YgdGhlIHRlcm1zIG9mIHRoZSBqb2ludCBhZ3JlZW1lbnQsIGJ1dCB3aWxsIGV2ZW4gYmUgZ3JhdGVmdWwKICAgICAgICAgICAgICAgICAgICB0byB5b3UgZm9yIGV4cG9zaW5nIHRoZSByZWFsIHRyYW5zZ3Jlc3NvcnMsIEkgd2lsbCBqdXN0IHRvdWNoIHVwb24gYSBmZXcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFueSBwb2ludHMgdGhhdCBtaWdodCBiZSBtZW50aW9uZWQuIEZvciB0aGUgY29tcGFjdCwgb2YgY291cnNlLCBwcm92aWRlcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBwYXJ0aWVzIHRvIHRoZSBwZWFjZSBtYXkgc2FpbCB0aGUgc2VhcywgYW5kIHRoYXQgbm9uZSBtYXkgaGluZGVyIHRoZW0gb3IKICAgICAgICAgICAgICAgICAgICBmb3JjZSBhIHNoaXAgb2YgYW55IG9mIHRoZW0gdG8gY29tZSB0byBoYXJib3IsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDUuMjUiIHZhbGlkPSJ5ZXMiPkRlbS4gNS4yNTwvYmlibD4uPC9ub3RlPiBhbmQgdGhhdCBhbnlvbmUgd2hvCiAgICAgICAgICAgICAgICAgICAgdmlvbGF0ZXMgdGhpcyBzaGFsbCBiZSB0cmVhdGVkIGFzIGFuIGVuZW15IGJ5IGFsbCB0aGUgcGFydGllcyB0byB0aGUgcGVhY2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNS4yNSIgdmFsaWQ9InllcyI+RGVtLiA1LjI1PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['17.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBoYXZlIG1vc3QgZGlzdGluY3RseSBzZWVuIHRoaXMKICAgICAgICAgICAgICAgICAgICBkb25lIGJ5IHRoZSBNYWNlZG9uaWFuczsgZm9yIHRoZXkgaGF2ZSBncm93biBzbyBhcnJvZ2FudCB0aGF0IHRoZXkgZm9yY2VkIGFsbAogICAgICAgICAgICAgICAgICAgIG91ciBzaGlwcyBjb21pbmcgZnJvbSB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2MTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjYxOSI+QmxhY2sgU2VhPC9wbGFjZU5hbWU+IHRvCiAgICAgICAgICAgICAgICAgICAgcHV0IGluIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGVuZWRvcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGVuZWRvcyI+VGVuZWRvczwvcGxhY2VOYW1lPiwgYW5kIHVuZGVyIG9uZQogICAgICAgICAgICAgICAgICAgIHByZXRlbmNlIG9yIGFub3RoZXIgcmVmdXNlZCB0byByZWxlYXNlIHRoZW0gdW50aWwgeW91IHBhc3NlZCBhIGRlY3JlZSB0byBtYW4gYW5kCiAgICAgICAgICAgICAgICAgICAgbGF1bmNoIGEgaHVuZHJlZCB3YXItZ2FsbGV5cyBpbnN0YW50bHksIGFuZCB5b3UgcHV0IE1lbmVzdGhldXMgaW4gY29tbWFuZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5JcyBpdCBub3QsIHRoZW4sIGFic3VyZCB0aGF0IG90aGVycyBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZSBndWlsdHkgb2Ygc28gbWFueSBzZXJpb3VzIHRyYW5zZ3Jlc3Npb25zLCBidXQgdGhhdCB0aGVpciBmcmllbmRzIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaW5zdGVhZCBvZiByZXN0cmFpbmluZwogICAgICAgICAgICAgICAgICAgIHRoZSB0cmFuc2dyZXNzb3JzLCBzaG91bGQgdXJnZSB1cyB0byBhYmlkZSBieSB0aGUgdGVybXMgdGh1cyBsaWdodGx5IHJlZ2FyZGVkPwogICAgICAgICAgICAgICAgICAgIEFzIGlmIHRoZXJlIHdlcmUgYSBjbGF1c2UgYWRkZWQsIHBlcm1pdHRpbmcgc29tZSB0byB2aW9sYXRlIHRoZW0sIGJ1dCBmb3JiaWRkaW5nCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzIGV2ZW4gdG8gZGVmZW5kIHRoZWlyIHJpZ2h0cyEgPC90cmFuc2xhdGlvbj4="
translation['17.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IHRoZSBjb25kdWN0IG9mIHRoZSBNYWNlZG9uaWFucyBhcyBzdHVwaWQgYXMgaXQgd2FzIGxhd2xlc3MsIHdoZW4gdGhleQogICAgICAgICAgICAgICAgICAgIGNvbW1pdHRlZCBzdWNoIGEgZ3Jvc3MgdmlvbGF0aW9uIG9mIHRoZWlyIG9hdGhzIGFzIGRlc2VydmVkbHkgd2VudCBuZWFyIHRvIGNvc3QKICAgICAgICAgICAgICAgICAgICB0aGVtIHRoZWlyIHJpZ2h0IHRvIGNvbW1hbmQgYXQgc2VhPzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgQ29uZ3Jlc3MKICAgICAgICAgICAgICAgICAgICAgICAgZ2F2ZSBBbGV4YW5kZXIgdGhlIGNvbW1hbmQgb2YgdGhlIEdyZWVrIGZvcmNlcyBvbiBzZWEgYXMgd2VsbCBhcyBvbiBsYW5kLiBJZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgTWFjZWRvbmlhbnMgcHJvdm9rZWQgdGhlIEF0aGVuaWFucywgd2hvIHByb3ZpZGVkIHRoZSBncmVhdGVyIHBhcnQgb2YgYQogICAgICAgICAgICAgICAgICAgICAgICB1bml0ZWQgR3JlZWsgZmxlZXQsIGhlIG1pZ2h0IGxvc2UgdGhpcyBjb21tYW5kLjwvbm90ZT4gRXZlbiBhcyBpdCBpcywgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgc3VwcGxpZWQgdXMgd2l0aCB0aGlzIHVucXVlc3Rpb25hYmxlIGNsYWltIGFnYWluc3QgdGhlbSwgd2hlbmV2ZXIgd2UgY2hvb3NlCiAgICAgICAgICAgICAgICAgICAgdG8gcHJlc3MgaXQuIEZvciBzdXJlbHkgdGhlaXIgdmlvbGF0aW9uIG9mIHRoZSBqb2ludCBhZ3JlZW1lbnQgaXMgbm90IGxlc3NlbmVkCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IGhhdmUgbm93IGNlYXNlZCB0byBvZmZlbmQuIDwvdHJhbnNsYXRpb24+"
translation['17.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBpbiBsdWNrLCBiZWNhdXNlIHRoZXkgY2FuIG1ha2UgdGhlIG1vc3Qgb2YgeW91ciBzdXBpbmVuZXNzLCB3aGljaAogICAgICAgICAgICAgICAgICAgIHByZWZlcnMgdG8gdGFrZSBubyBhZHZhbnRhZ2UgZXZlbiBvZiB5b3VyIGR1ZSByaWdodHMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBncmVhdGVzdCBodW1pbGlhdGlvbiwgaG93ZXZlciwgdGhhdCB3ZSBoYXZlIHN1ZmZlcmVkIGlzIHRoYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyIEdyZWVrcyBhbmQgYmFyYmFyaWFucyBkcmVhZCB5b3VyIGVubWl0eSwgYnV0IHRoZXNlIHVwc3RhcnRzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxpdGVyYWxseSBub3V2ZWF1eCByaWNoZXMsIGFub3RoZXIgd29yZCBjb25kZW1uZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgTGliYW5pdXMgYXMgdW4tRGVtb3N0aGVuaWMuPC9ub3RlPiBhbG9uZSBjYW4gbWFrZSB5b3UgZGVzcGlzZSB5b3Vyc2VsdmVzLAogICAgICAgICAgICAgICAgICAgIHNvbWV0aW1lcyBieSBwZXJzdWFzaW9uLCBzb21ldGltZXMgYnkgZm9yY2UsIGFzIGlmIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQWJkZXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBYmRlcmEiPkFiZGVyYTwvcGxhY2VOYW1lPiBvciBNYXJvbmVhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Ud28gY2l0aWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGZvcm1lciB3YXMgdGhlIEdyZWVrIEdvdGhhbS48L25vdGU+IGFuZCBub3QgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgZm9ybWVyIHdhcyB0aGUgR3JlZWsgR290aGFtLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2VyZSB0aGUgc2NlbmUgb2YgdGhlaXIgcG9saXRpY2FsCiAgICAgICAgICAgICAgICAgICAgYWN0aXZpdGllcy4gPC90cmFuc2xhdGlvbj4="
translation['17.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hpbGUgdGhleSB3ZWFrZW4geW91cgogICAgICAgICAgICAgICAgICAgIGNhdXNlIGFuZCBzdHJlbmd0aGVuIHRoYXQgb2YgeW91ciBlbmVtaWVzLCB0aGV5IGF0IHRoZSBzYW1lIHRpbWUgYWRtaXQKICAgICAgICAgICAgICAgICAgICB1bmNvbnNjaW91c2x5IHRoYXQgb3VyIGNpdHkgaXMgaXJyZXNpc3RpYmxlLCBiZWNhdXNlIHRoZXkgYmlkIGhlciB1cGhvbGQganVzdGljZQogICAgICAgICAgICAgICAgICAgIGJ5IGluanVzdGljZSwgYXMgdGhvdWdoIHNoZSBjb3VsZCBlYXNpbHkgdmFucXVpc2ggaGVyIGVuZW1pZXMsIGlmIHNoZSBwcmVmZXJyZWQKICAgICAgICAgICAgICAgICAgICB0byBjb25zdWx0IGhlciBvd24gaW50ZXJlc3RzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZGlzbG95YWwKICAgICAgICAgICAgICAgICAgICAgICAgcG9saXRpY2lhbnMgd2lzaCB0byBwdXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIGF0IGEgZGlzYWR2YW50YWdlIGJ5IHVyZ2luZyBoZXIgdG8ga2VlcCB0aGUgY29tcGFjdCBqdXN0bHkgd2hpbGUgYWxsb3dpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIE1hY2Vkb25pYW5zIHRvIGJyZWFrIGl0IHVuanVzdGx5LiBOb3cgaWYgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGNhbiBhZmZvcmQgdG8gZG8gdGhpcyBhbmQgeWV0IGtlZXAgaGVyIHBvc2l0aW9uLCBpdAogICAgICAgICAgICAgICAgICAgICAgICBwcm92ZXMgdGhhdCBzaGUgY291bGQgZWFzaWx5IGJlYXQgaGVyIGVuZW1pZXMgaWYgc2hlIGNvbmNlbnRyYXRlZCBvbiBoZXIgb3duCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyZXN0cy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIGF0IGEgZGlzYWR2YW50YWdlIGJ5IHVyZ2luZyBoZXIgdG8ga2VlcCB0aGUgY29tcGFjdCBqdXN0bHkgd2hpbGUgYWxsb3dpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIE1hY2Vkb25pYW5zIHRvIGJyZWFrIGl0IHVuanVzdGx5LiBOb3cgaWYgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGNhbiBhZmZvcmQgdG8gZG8gdGhpcyBhbmQgeWV0IGtlZXAgaGVyIHBvc2l0aW9uLCBpdAogICAgICAgICAgICAgICAgICAgICAgICBwcm92ZXMgdGhhdCBzaGUgY291bGQgZWFzaWx5IGJlYXQgaGVyIGVuZW1pZXMgaWYgc2hlIGNvbmNlbnRyYXRlZCBvbiBoZXIgb3duCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyZXN0cy48L3RyYW5zbGF0aW9uPg=="
translation['17.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhleSBoYXZlIHRha2VuIHVwIGEgcmVhc29uYWJsZSBhdHRpdHVkZTsKICAgICAgICAgICAgICAgICAgICBmb3IgYXMgbG9uZyBhcyB3ZSwgc2luZ2xlLWhhbmRlZCwgY2FuIG1haW50YWluIGFuIHVuY2hhbGxlbmdlZCBzdXByZW1hY3kgYXQgc2VhLAogICAgICAgICAgICAgICAgICAgIHdlIGNhbiBkZXZpc2Ugb3RoZXIgYW5kIHN0cm9uZ2VyIGRlZmVuY2VzIG9uIGxhbmQgaW4gYWRkaXRpb24gdG8gb3VyIGV4aXN0aW5nCiAgICAgICAgICAgICAgICAgICAgZm9yY2VzLCBlc3BlY2lhbGx5IGlmIGJ5IGdvb2QgZm9ydHVuZSB3ZSBjYW4gZ2V0IHJpZCBvZiB0aGVzZSBwb2xpdGljaWFucywgd2hvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBmb3IgdGhlaXIgYm9keWd1YXJkIHRoZSBob3N0cyBvZiB0eXJhbm55LCBhbmQgaWYgc29tZSBvZiB0aGVtIGFyZSBkZXN0cm95ZWQKICAgICAgICAgICAgICAgICAgICBhbmQgb3RoZXJzIGNvbmNsdXNpdmVseSBwcm92ZWQgdG8gYmUgd29ydGhsZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['17.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCB0aGVuLCBpbiB0aGUgbWF0dGVyIG9mIHRoZSBzaGlwcywgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiB0aGUgdmlvbGF0aW9uIG9mIHRoZSBjb21wYWN0IGJ5IHRoZSBNYWNlZG9uaWFuIGtpbmcsIGluIGFkZGl0aW9uIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGNhc2VzIG1lbnRpb25lZC4gQnV0IHRoZSBtb3N0IGluc29sZW50IGFuZCBvdmVyYmVhcmluZyBleHBsb2l0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIE1hY2Vkb25pYW5zIHdhcyB0aGF0IHBlcmZvcm1lZCBxdWl0ZSByZWNlbnRseSwgd2hlbiB0aGV5IGRhcmVkIHRvIHNhaWwgaW50byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQaXJhZXVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQaXJhZXVzIj5QaXJhZXVzPC9wbGFjZU5hbWU+LCBjb250cmFyeSB0byBvdXIgbXV0dWFsCiAgICAgICAgICAgICAgICAgICAgYWdyZWVtZW50LiBNb3Jlb3ZlciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGl0IHdhcyBvbmx5IGEgc2luZ2xlIHdhci1nYWxsZXksIGl0IG11c3Qgbm90IGJlIHJlZ2FyZGVkIGFzIGEgc2xpZ2h0CiAgICAgICAgICAgICAgICAgICAgbWF0dGVyLCBidXQgYXMgYW4gZXhwZXJpbWVudCBtYWRlIHRvIHNlZSB3aGV0aGVyIHdlIHNob3VsZCBvdmVybG9vayBpdCwgc28gdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgY291bGQgcmVwZWF0IGl0IG9uIGEgbGFyZ2VyIHNjYWxlLCBhbmQgYWxzbyBhcyBhIHByb29mIHRoYXQgdGhleSBjYXJlZCBhcwogICAgICAgICAgICAgICAgICAgIGxpdHRsZSBmb3IgdGhlc2UgdGVybXMgb2YgYWdyZWVtZW50IGFzIGZvciB0aG9zZSB0aGF0IGhhdmUgYmVlbiBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgbWVudGlvbmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['17.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhhdCBpdCB3YXMgYW4gZW5jcm9hY2htZW50CiAgICAgICAgICAgICAgICAgICAgbGl0dGxlIGJ5IGxpdHRsZSBhbmQgd2FzIG1lYW50IHRvIGFjY3VzdG9tIHVzIHRvIHN1ZmZlcmluZyBzdWNoIGludHJ1c2lvbnMgaW50bwogICAgICAgICAgICAgICAgICAgIG91ciBoYXJib3JzLCBpcyBwbGFpbiBmcm9tIHRoZSBmb2xsb3dpbmcgY29uc2lkZXJhdGlvbi4gRm9yIHRoZSBtZXJlIGZhY3QgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBtYW4gd2hvIHNhaWxlZCB0aGUgc2hpcCBpbiwgYW5kIHdob20geW91IG91Z2h0IHRvIGhhdmUgcHV0IG91dCBvZiBleGlzdGVuY2UKICAgICAgICAgICAgICAgICAgICBhdCBvbmNlLCBnYWxsZXkgYW5kIGFsbCwgYXNrZWQgcGVybWlzc2lvbiB0byBidWlsZCBzbWFsbCBib2F0cyBpbiBvdXIKICAgICAgICAgICAgICAgICAgICBoYXJib3LigJRkb2VzIGl0IG5vdCBtYWtlIGl0IHBlcmZlY3RseSBwbGFpbiB0aGF0IHRoZWlyIHNjaGVtZSB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgc28gbXVjaCB0byBlbnRlciB0aGUgaGFyYm9yIGFzIHRvIGJlIGluc2lkZSBpdCBmcm9tIHRoZSBmaXJzdD8gQW5kIGlmIHdlCiAgICAgICAgICAgICAgICAgICAgdG9sZXJhdGUgc21hbGwgY3JhZnQsIGEgbGl0dGxlIGxhdGVyIGl0IHdpbGwgYmUgd2FyLWdhbGxleXMgYXMgd2VsbDsgYW5kIGlmIGF0CiAgICAgICAgICAgICAgICAgICAgZmlyc3Qgd2Ugc2FuY3Rpb24gYSBmZXcsIHRoZXJlIHdpbGwgc29vbiBiZSBtYW55LiA8L3RyYW5zbGF0aW9uPg=="
translation['17.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSBjYW5ub3QgYWxsZWdlIGFzIHRoZWlyIGV4Y3VzZSB0aGF0IHRoZXJlIGlzIHBsZW50eSBvZgogICAgICAgICAgICAgICAgICAgIHRpbWJlciBmb3Igc2hpcGJ1aWxkaW5nIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aGVyZSB3ZSBpbXBvcnQgaXQgd2l0aCBncmVhdCB0cm91YmxlIGZyb20gZGlzdGFudCBwYXJ0cywgYnV0IHRoYXQgaXQgaXMgc2NhcmNlCiAgICAgICAgICAgICAgICAgICAgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCB3aGVyZSB0aGVyZSBpcyBhIGNoZWFwCiAgICAgICAgICAgICAgICAgICAgc3VwcGx5IGZvciBhbGwgd2hvIHdhbnQgaXQuIE5vLCB0aGV5IHRob3VnaHQgdGhhdCB0aGV5IHdvdWxkIGJ1aWxkIHRoZWlyIHNoaXBzCiAgICAgICAgICAgICAgICAgICAgaGVyZSBhbmQgYWxzbyBmdXJuaXNoIHRoZW0gd2l0aCBjcmV3cyBpbiBvdXIgaGFyYm9yLCB0aG91Z2ggaXQgaXMgZXhwcmVzc2x5CiAgICAgICAgICAgICAgICAgICAgc3RpcHVsYXRlZCBpbiB0aGUgam9pbnQgYWdyZWVtZW50IHRoYXQgbm90aGluZyBvZiB0aGUga2luZCBzaG91bGQgYmUgcGVybWl0dGVkOwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGV5IHRob3VnaHQgdG9vIHRoYXQgaXQgd291bGQgYWx3YXlzIGJlIG1vcmUgYW5kIG1vcmUgaW4gdGhlaXIgcG93ZXIgdG8gZG8KICAgICAgICAgICAgICAgICAgICB0aGlzLiBUaHVzIG9uIGV2ZXJ5IGhhbmQgdGhleSB0cmVhdCBvdXIgY2l0eSB3aXRoIGNvbnRlbXB0LCB0aGFua3MgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBwcm9tcHRlcnMgaGVyZSwgd2hvIHN1Z2dlc3QgdG8gdGhlbSBldmVyeXRoaW5nIHRoZXkgc2hvdWxkIGRvOyA8L3RyYW5zbGF0aW9uPg=="
translation['17.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGh1cyB3aXRoIHRoZWlyIGhlbHAgdGhleSBoYXZlIGRpc2NvdmVyZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIGFuIGluZGVzY3JpYmFibGUgc2xhY2tuZXNzIGFuZCBmZWVibGVuZXNzIGluIG91ciBjaXR5LCBhbmQgdGhhdCB3ZSB0YWtlCiAgICAgICAgICAgICAgICAgICAgbm8gdGhvdWdodCBmb3IgdGhlIG1vcnJvdywgYW5kIHRoYXQgaXQgbmV2ZXIgb2NjdXJzIHRvIHVzIHRvIGNvbnNpZGVyIGhvdyB0aGUKICAgICAgICAgICAgICAgICAgICB0eXJhbnQgaXMgY2Fycnlpbmcgb3V0IHRoZSBqb2ludCBhZ3JlZW1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['17.30'] = ""
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5MZXQgbWUgYmVnaW4sCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYnkgYmVzZWVjaGluZyBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgUG93ZXJzIG9mIEhlYXZlbiB0aGF0IG9uIHRoaXMgdHJpYWwgSSBtYXkgZmluZCBpbiBBdGhlbmlhbiBoZWFydHMgc3VjaAogICAgICAgICAgICAgICAgICAgIGJlbmV2b2xlbmNlIHRvd2FyZHMgbWUgYXMgSSBoYXZlIGV2ZXIgY2hlcmlzaGVkIGZvciB0aGUgY2l0eSBhbmQgdGhlIHBlb3BsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIE15IG5leHQgcHJheWVyIGlzIGZvcgogICAgICAgICAgICAgICAgICAgIHlvdSwgYW5kIGZvciB5b3VyIGNvbnNjaWVuY2UgYW5kIGhvbm9yLiBNYXkgdGhlIGdvZHMgc28gaW5zcGlyZSB5b3UgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICB0ZW1wZXIgd2l0aCB3aGljaCB5b3UgbGlzdGVuIHRvIG15IHdvcmRzIHNoYWxsIGJlIGd1aWRlZCwgbm90IGJ5IG15CiAgICAgICAgICAgICAgICAgICAgYWR2ZXJzYXJ54oCUIDwvdHJhbnNsYXRpb24+"
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgd291bGQgYmUgbW9uc3Ryb3VzCiAgICAgICAgICAgICAgICAgICAgaW5kZWVkIeKAlCBidXQgYnkgdGhlIGxhd3MgYW5kIGJ5IHRoZSBqdWRpY2lhbCBvYXRoLCBieSB3aG9zZSB0ZXJtcwogICAgICAgICAgICAgICAgICAgIGFtb25nIG90aGVyIG9ibGlnYXRpb25zIHlvdSBhcmUgc3dvcm4gdG8gZ2l2ZSB0byBib3RoIHNpZGVzIGFuIGltcGFydGlhbAogICAgICAgICAgICAgICAgICAgIGhlYXJpbmcuIFRoZSBwdXJwb3NlIG9mIHRoYXQgb2F0aCBpcywgbm90IG9ubHkgdGhhdCB5b3Ugc2hhbGwgZGlzY2FyZCBhbGwKICAgICAgICAgICAgICAgICAgICBwcmVqdWRpY2UsIG5vdCBvbmx5IHRoYXQgeW91IHNoYWxsIHNob3cgZXF1YWwgZmF2b3IsIGJ1dCBhbHNvIHRoYXQgeW91IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgcGVybWl0IGV2ZXJ5IGxpdGlnYW50IHRvIGRpc3Bvc2UgYW5kIGFycmFuZ2UgaGlzIHRvcGljcyBvZiBkZWZlbmNlIGFjY29yZGluZyB0bwogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gZGlzY3JldGlvbiBhbmQganVkZ2VtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbW9uZyBtYW55IGFkdmFudGFnZXMgd2hpY2ggQWVzY2hpbmVzIGhvbGRzIG92ZXIgbWUgaW4KICAgICAgICAgICAgICAgICAgICB0aGlzIGNvbnRlbnRpb24sIHRoZXJlIGFyZSB0d28sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG9mIGdyZWF0IG1vbWVudC4gSW4gdGhlIGZpcnN0IHBsYWNlLCBJIGhhdmUgYSBsYXJnZXIKICAgICAgICAgICAgICAgICAgICBzdGFrZSBvbiB0aGUgaXNzdWU7IGZvciB0aGUgbG9zcyBvZiB5b3VyIGZhdm9yIGlzIGZhciBtb3JlIHNlcmlvdXMgdG8gbWUgdGhhbgogICAgICAgICAgICAgICAgICAgIHRoZSBsb3NzIG9mIHlvdXIgdmVyZGljdCB0byBoaW0uIEZvciBtZSwgaW5kZWVk4oCUYnV0IGxldCBtZSBzYXkgbm90aGluZwogICAgICAgICAgICAgICAgICAgIGluYXVzcGljaW91cyBhdCB0aGUgb3V0c2V0IG9mIG15IHNwZWVjaDogSSB3aWxsIG9ubHkgc2F5IHRoYXQgaGUgYWNjdXNlcyBtZSBhdAogICAgICAgICAgICAgICAgICAgIGFuIGFkdmFudGFnZS4gU2Vjb25kbHksIHRoZXJlIGlzIHRoZSBuYXR1cmFsIGRpc3Bvc2l0aW9uIG9mIG1hbmtpbmQgdG8gbGlzdGVuCiAgICAgICAgICAgICAgICAgICAgcmVhZGlseSB0byBvYmxvcXV5IGFuZCBpbnZlY3RpdmUsIGFuZCB0byByZXNlbnQgc2VsZi1sYXVkYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIGhpbSB0aGUgYWdyZWVhYmxlIGR1dHkgaGFzIGJlZW4gYXNzaWduZWQ7IHRoZSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyBhbG1vc3QgYWx3YXlzIG9mZmVuc2l2ZSByZW1haW5zIGZvciBtZS4gSWYgYXMgYSBzYWZlZ3VhcmQgYWdhaW5zdCBzdWNoCiAgICAgICAgICAgICAgICAgICAgb2ZmZW5jZSwgSSBhdm9pZCB0aGUgcmVsYXRpb24gb2YgbXkgb3duIGFjaGlldmVtZW50cywgSSBzaGFsbCBzZWVtIHRvIGJlIHVuYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIHJlZnV0ZSB0aGUgY2hhcmdlcyBhbGxlZ2VkIGFnYWluc3QgbWUsIG9yIHRvIGVzdGFibGlzaCBteSBjbGFpbSB0byBhbnkgcHVibGljCiAgICAgICAgICAgICAgICAgICAgZGlzdGluY3Rpb24uIFlldCwgaWYgSSBhZGRyZXNzIG15c2VsZiB0byB3aGF0IEkgaGF2ZSBkb25lLCBhbmQgdG8gdGhlIHBhcnQgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgdGFrZW4gaW4gcG9saXRpY3MsIEkgc2hhbGwgb2Z0ZW4gYmUgb2JsaWdlZCB0byBzcGVhayBhYm91dCBteXNlbGYuIFdlbGwsIEkKICAgICAgICAgICAgICAgICAgICB3aWxsIGVuZGVhdm9yIHRvIGRvIHNvIHdpdGggYWxsIHBvc3NpYmxlIG1vZGVzdHk7IGFuZCBsZXQgdGhlIG1hbiB3aG8gaGFzCiAgICAgICAgICAgICAgICAgICAgaW5pdGlhdGVkIHRoaXMgY29udHJvdmVyc3kgYmVhciB0aGUgYmxhbWUgb2YgdGhlIGVnb2lzbSB3aGljaCB0aGUgY29uZGl0aW9ucwogICAgICAgICAgICAgICAgICAgIGZvcmNlIHVwb24gbWUuIDwvdHJhbnNsYXRpb24+"
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgbXVzdCBhbGwgYmUgYWdyZWVkLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IGluIHRoZXNlIHByb2NlZWRpbmdzIEkgYW0gY29uY2VybmVkIGVxdWFsbHkgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMTYxMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAxNjEwIj5DdGVzaXBob248L3BsYWNlTmFtZT4sIGFuZCB0aGF0IHRoZXkgcmVxdWlyZQogICAgICAgICAgICAgICAgICAgIGZyb20gbWUgbm8gbGVzcyBzZXJpb3VzIGNvbnNpZGVyYXRpb24uIEFueSBsb3NzLCBlc3BlY2lhbGx5IGlmIGluZmxpY3RlZCBieQogICAgICAgICAgICAgICAgICAgIHByaXZhdGUgYW5pbW9zaXR5LCBpcyBoYXJkIHRvIGJlYXI7IGJ1dCB0byBsb3NlIHlvdXIgZ29vZHdpbGwgYW5kIGtpbmRuZXNzIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vc3QgcGFpbmZ1bCBvZiBhbGwgbG9zc2VzLCBhcyB0byBnYWluIHRoZW0gaXMgdGhlIGJlc3Qgb2YgYWxsIGFjcXVpc2l0aW9ucy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYmVpbmcgdGhlIGlzc3VlcyBhdCBzdGFrZSwgSSBpbXBsb3JlCiAgICAgICAgICAgICAgICAgICAgeW91IGFsbCBhbGlrZSB0byBsaXN0ZW4gdG8gbXkgZGVmZW5jZSBhZ2FpbnN0IHRoZSBhY2N1c2F0aW9ucyBsYWlkLCBpbiBhIHNwaXJpdAogICAgICAgICAgICAgICAgICAgIG9mIGp1c3RpY2UuIFNvIHRoZSBsYXdzIGVuam9pbuKAlHRoZSBsYXdzIHdoaWNoIFNvbG9uLCB3aG8gZmlyc3QgZnJhbWVkCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgYSBnb29kIGRlbW9jcmF0IGFuZCBmcmllbmQgb2YgdGhlIHBlb3BsZSwgdGhvdWdodCBpdCByaWdodCB0byB2YWxpZGF0ZSBub3QKICAgICAgICAgICAgICAgICAgICBvbmx5IGJ5IHRoZWlyIGVuYWN0bWVudCBidXQgYnkgdGhlIG9hdGggb2YgdGhlIGp1cnk7IDwvdHJhbnNsYXRpb24+"
translation['18.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPm5vdCBkaXN0cnVzdGluZyB5b3UsIGlmIEkgdW5kZXJzdGFuZCBoaW0gYXJpZ2h0LCBidXQgcGVyY2VpdmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgbm8gZGVmZW5kYW50IGNhbiBkZWZlYXQgdGhlIGNoYXJnZXMgYW5kIGNhbHVtbmllcyB3aGljaCB0aGUgcHJvc2VjdXRvciBwcmVmZXJzCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgYWR2YW50YWdlIG9mIHByaW9yIHNwZWVjaCwgdW5sZXNzIGV2ZXJ5IGp1cnltYW4gcmVjZWl2ZXMgd2l0aCBnb29kd2lsbAogICAgICAgICAgICAgICAgICAgIHRoZSBwbGVhcyBvZiB0aGUgc2Vjb25kIHNwZWFrZXIsIGFzIGFuIG9ibGlnYXRpb24gb2YgcGlldHkgdG8gdGhlIGdvZHMgYnkgd2hvbQogICAgICAgICAgICAgICAgICAgIGhlIGhhcyBzd29ybiwgYW5kIGZvcm1zIG5vIGZpbmFsIGNvbmNsdXNpb24gdXBvbiB0aGUgd2hvbGUgY2FzZSB1bnRpbCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBnaXZlbiBhIGZhaXIgYW5kIGltcGFydGlhbCBoZWFyaW5nIHRvIGJvdGggc2lkZXMuIDwvdHJhbnNsYXRpb24+"
translation['18.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBhcHBlYXJzIHRoYXQgSSBoYXZlIHRvZGF5IHRvIHJlbmRlcgogICAgICAgICAgICAgICAgICAgIGFjY291bnQgb2YgdGhlIHdob2xlIG9mIG15IHByaXZhdGUgbGlmZSBhcyB3ZWxsIGFzIG9mIG15IHB1YmxpYyB0cmFuc2FjdGlvbnMuIEkKICAgICAgICAgICAgICAgICAgICBtdXN0IHRoZXJlZm9yZSByZW5ldyBteSBhcHBlYWwgdG8gdGhlIGdvZHM7IGFuZCBpbiB5b3VyIHByZXNlbmNlIEkgbm93IGJlc2VlY2gKICAgICAgICAgICAgICAgICAgICB0aGVtLCBmaXJzdCB0aGF0IEkgbWF5IGZpbmQgaW4geW91ciBoZWFydHMgc3VjaCBiZW5ldm9sZW5jZSB0b3dhcmRzIG1lIGFzIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGV2ZXIgY2hlcmlzaGVkIGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIHNlY29uZGx5IHRoYXQgdGhleSB3aWxsIGd1aWRlIHlvdSB0byBzdWNoIGEganVkZ2VtZW50IHVwb24gdGhpcyBpbmRpY3RtZW50IGFzCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgcmVkb3VuZCB0byB0aGUgZ29vZCByZXB1dGUgb2YgdGhlIGp1cnksIGFuZCB0byB0aGUgZ29vZCBjb25zY2llbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgc2V2ZXJhbCBqdXJ5bWFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiB0aGVuIEFlc2NoaW5lcyBoYWQgY29uZmluZWQgaGlzIGNoYXJnZXMgdG8gdGhlIG1hdHRlcnMgYWxsZWdlZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBwcm9zZWN1dGlvbiwgSSBzaG91bGQgaGF2ZSBpbW1lZGlhdGVseSBhZGRyZXNzZWQgbXkgZGVmZW5jZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uIG9mIHRoZSBDb3VuY2lsOyBidXQgYXMgaGUgaGFzIHdhc3RlZnVsbHkgZGV2b3RlZCB0aGUgZ3JlYXRlciBwYXJ0IG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIHNwZWVjaCB0byBpcnJlbGV2YW50IHRvcGljcywgbW9zdGx5IGZhbHNlIGFjY3VzYXRpb25zLCBJIGNvbmNlaXZlIGl0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYm90aCBmYWlyIGFuZCBuZWNlc3NhcnksIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIHNheSBhIGZldyB3b3JkcyBmaXJzdCBvbiB0aG9zZSBtYXR0ZXJzLCBsZXN0IGFueSBvZgogICAgICAgICAgICAgICAgICAgIHlvdSwgbWlzbGVkIGJ5IGV4dHJhbmVvdXMgYXJndW1lbnRzLCBzaG91bGQgbGlzdGVuIHdpdGggZXN0cmFuZ2VtZW50IHRvIG15CiAgICAgICAgICAgICAgICAgICAganVzdGlmaWNhdGlvbiBpbiByZXNwZWN0IG9mIHRoZSBpbmRpY3RtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gaGlzIGFidXNpdmUgYXNwZXJzaW9uIG9mIG15IHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBsaWZlLCBJIGhhdmUsIHlvdSB3aWxsIG9ic2VydmUsIGFuIGhvbmVzdCBhbmQgc3RyYWlnaHRmb3J3YXJkIHJlcGx5LiBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBuZXZlciBsaXZlZCBhbnl3aGVyZSBidXQgaW4geW91ciBtaWRzdC4gSWYgdGhlbiB5b3Uga25vdyBteSBjaGFyYWN0ZXIgdG8gYmUgc3VjaAogICAgICAgICAgICAgICAgICAgIGFzIGhlIGFsbGVnZXMsIGRvIG5vdCB0b2xlcmF0ZSBteSB2b2ljZSwgZXZlbiBpZiBhbGwgbXkgcHVibGljIGNvbmR1Y3QgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBiZXlvbmQgcHJhaXNlLCBidXQgcmlzZSBhbmQgY29uZGVtbiBtZSBpbmNvbnRpbmVudGx5LiBCdXQgaWYsIGluIHlvdXIganVkZ2VtZW50CiAgICAgICAgICAgICAgICAgICAgYW5kIHRvIHlvdXIga25vd2xlZGdlLCBJIGFtIGEgYmV0dGVyIG1hbiBhbmQgYmV0dGVyIGJvcm4gdGhhbiBBZXNjaGluZXMsIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGtub3cgbWUgYW5kIG15IGZhbWlseSB0byBiZSwgbm90IHRvIHB1dCBpdCBvZmZlbnNpdmVseSwgYXMgZ29vZCBhcyB0aGUgYXZlcmFnZQogICAgICAgICAgICAgICAgICAgIG9mIHJlc3BlY3RhYmxlIHBlb3BsZSwgdGhlbiByZWZ1c2UgY3JlZGVuY2UgdG8gYWxsIGhpcyBhc3NlcnRpb25zLCBmb3IgY2xlYXJseQogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIGFsbCBmaWN0aXRpb3VzLCBhbmQgdHJlYXQgbWUgdG9kYXkgd2l0aCB0aGUgc2FtZSBnb29kd2lsbCB3aGljaAogICAgICAgICAgICAgICAgICAgIHRocm91Z2hvdXQgbXkgbGlmZSB5b3UgaGF2ZSBzaG93biB0byBtZSBpbiBtYW55IGVhcmxpZXIgY29udGVudGlvbnMuIDwvdHJhbnNsYXRpb24+"
translation['18.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5NYWxpY2lvdXMgYXMgeW91IGFyZSwgQWVzY2hpbmVzLCB5b3Ugd2VyZSBzdHJhbmdlbHkKICAgICAgICAgICAgICAgICAgICBpbm5vY2VudCB3aGVuIHlvdSBpbWFnaW5lZCB0aGF0IEkgc2hvdWxkIHR1cm4gYXNpZGUgZnJvbSB0aGUgZGlzY3Vzc2lvbiBvZgogICAgICAgICAgICAgICAgICAgIHB1YmxpYyB0cmFuc2FjdGlvbnMgdG8gcmVwbHkgdG8geW91ciBjYWx1bW5pZXMuIEkgc2hhbGwgZG8gbm90aGluZyBvZiB0aGUgc29ydDoKICAgICAgICAgICAgICAgICAgICBJIGFtIG5vdCBzbyBpbmZhdHVhdGVkLiBZb3VyIGZhbHNlIGFuZCBpbnZpZGlvdXMgY2hhcmdlcyBhZ2FpbnN0IG15IHBvbGl0aWNhbAogICAgICAgICAgICAgICAgICAgIGxpZmUgSSB3aWxsIGV4YW1pbmU7IGJ1dCBsYXRlciwgaWYgdGhlIGp1cnkgd2lzaCB0byBoZWFyIG1lLCBJIHdpbGwgcmV0dXJuIHRvCiAgICAgICAgICAgICAgICAgICAgeW91ciBvdXRyYWdlb3VzIHJpYmFsZHJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGNyaW1lcyBoZSBoYXMgbGFpZCB0byBteSBjaGFyZ2UgYXJlIG1hbnksIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIHNvbWUgb2YgdGhlbSB0aGUgbGF3IGhhcyBhc3NpZ25lZCBzZXZlcmUgYW5kIGV2ZW4gY2FwaXRhbCBwdW5pc2htZW50LiBCdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHVycG9zZSBvZiB0aGlzIHByb3NlY3V0aW9uIGdvZXMgZnVydGhlcjogaXQgaW5jbHVkZXMgcHJpdmF0ZSBtYWxpY2UgYW5kCiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2UsIHJhaWxpbmcgYW5kIHZpdHVwZXJhdGlvbiwgYW5kIHRoZSBsaWtlOyBhbmQgeWV0IGZvciBub25lIG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYWNjdXNhdGlvbnMsIGlmIG1hZGUgZ29vZCwgaXMgdGhlcmUgYW55IHBvd2VyIGF0IGFsbCBpbiB0aGUgc3RhdGUgdG8gaW5mbGljdCBhbgogICAgICAgICAgICAgICAgICAgIGFkZXF1YXRlIHBlbmFsdHksIG9yIGFueXRoaW5nIGxpa2UgaXQuIDwvdHJhbnNsYXRpb24+"
translation['18.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCByaWdodCB0byBkZWJhciBhIG1hbiBmcm9tIGFjY2VzcyB0byB0aGUgQXNzZW1ibHkgYW5kIGEgZmFpciBoZWFyaW5nLCBzdGlsbAogICAgICAgICAgICAgICAgICAgIGxlc3MgdG8gZG8gc28gYnkgd2F5IG9mIHNwaXRlIGFuZCBqZWFsb3VzeS4gTm8sIGJ5IGhlYXZlbnMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGl0IGlzIG5laXRoZXIganVzdCwgbm9yCiAgICAgICAgICAgICAgICAgICAgY29uc3RpdHV0aW9uYWwsIG5vciBob25lc3QhIElmIGhlIGV2ZXIgc2F3IG1lIGNvbW1pdHRpbmcgY3JpbWVzIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9ud2VhbHRoLCBlc3BlY2lhbGx5IHN1Y2ggZnJpZ2h0ZnVsIGNyaW1lcyBhcyBoZSBkZXNjcmliZWQganVzdCBub3cgc28KICAgICAgICAgICAgICAgICAgICBkcmFtYXRpY2FsbHksIGhpcyBkdXR5IHdhcyB0byBhdmFpbCBoaW1zZWxmIG9mIHRoZSBsZWdhbCBwZW5hbHRpZXMgYXMgc29vbiBhcwogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBjb21taXR0ZWQsIGltcGVhY2hpbmcgbWUsIGFuZCBzbyBwdXR0aW5nIG1lIG9uIG15IHRyaWFsIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUsIGlmIG15IHNpbnMgZGVzZXJ2ZWQgaW1wZWFjaG1lbnQsIG9yIGluZGljdGluZyBtZSBmb3IgYnJlYWNoIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN0aXR1dGlvbiwgaWYgSSBoYWQgcHJvcG9zZWQgaWxsZWdhbCBtZWFzdXJlcy4gRm9yLCBvZiBjb3Vyc2UsIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRlcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMTYxMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAxNjEwIj5DdGVzaXBob248L3BsYWNlTmFtZT4gbm93IG9uIG15IGFjY291bnQsCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgaW1wb3NzaWJsZSB0aGF0IGhlIHdvdWxkIG5vdCBoYXZlIGluZGljdGVkIG1lLCB3aXRoIGEgY2VydGFpbiBob3BlIG9mCiAgICAgICAgICAgICAgICAgICAgY29udmljdGlvbiEgPC90cmFuc2xhdGlvbj4="
translation['18.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgaWYgaGUgZGV0ZWN0ZWQgbWUgaW4gYW55IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGFjdHMgd2hpY2ggaGUgaGFzIHJlY291bnRlZCB0byBteSBwcmVqdWRpY2UsIG9yIGluIGFueSBvdGhlciBpbmlxdWl0eSwgdGhlcmUKICAgICAgICAgICAgICAgICAgICBhcmUgc3RhdHV0ZXMgZGVhbGluZyB3aXRoIHRob3NlIG9mZmVuY2VzLCBwdW5pc2htZW50cywgbGVnYWwgcHJvY2Vzc2VzLCB0cmlhbHMKICAgICAgICAgICAgICAgICAgICBpbnZvbHZpbmcgc2V2ZXJlIHBlbmFsdGllcyBhbmQgaGVhdnkgZmluZXM7IGFuZCBhbnkgb2YgdGhlc2UgcHJvY2VlZGluZ3MgaGUKICAgICAgICAgICAgICAgICAgICBtaWdodCBoYXZlIHRha2VuLiBIYWQgaGUgc28gYWN0ZWQsIGhhZCBoZSBpbiB0aGF0IHdheSBlbXBsb3llZCB0aGUgbWV0aG9kcwogICAgICAgICAgICAgICAgICAgIGFwcGxpY2FibGUgdG8gbXkgY2FzZSwgaGlzIGRlbnVuY2lhdGlvbnMgd291bGQgaGF2ZSBiZWVuIGNvbnNpc3RlbnQgd2l0aCBoaXMKICAgICAgICAgICAgICAgICAgICBjb25kdWN0OyA8L3RyYW5zbGF0aW9uPg=="
translation['18.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgaW4gZmFjdCBoZSBoYXMgZGVzZXJ0ZWQgdGhlIHBhdGgKICAgICAgICAgICAgICAgICAgICBvZiByaWdodCBhbmQganVzdGljZSwgaGUgaGFzIGZsaW5jaGVkIGZyb20gdGhlIHByb29mIG9mIHJlY2VudCBndWlsdCwgYW5kIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgYSBsb25nIGludGVydmFsLCBoZSBtYWtlcyBhIGhvdGNocG90Y2ggb2YgaW1wdXRhdGlvbiBhbmQgYmFudGVyIGFuZAogICAgICAgICAgICAgICAgICAgIHNjdXJyaWxpdHksIGFuZCBzdGFuZHMgb24gYSBmYWxzZSBwcmV0ZW5jZSwgZGVub3VuY2luZyBtZSwgYnV0IGluZGljdGluZwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMTYxMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAxNjEwIj5DdGVzaXBob248L3BsYWNlTmFtZT4uIEhlIHNldHMgaW4gdGhlIGZvcmVmcm9udAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjb250cm92ZXJzeSBoaXMgcHJpdmF0ZSBxdWFycmVsIHdpdGggbWUsIGluIHdoaWNoIGhlIGhhcyBuZXZlciBjb25mcm9udGVkCiAgICAgICAgICAgICAgICAgICAgbWUgZmFpcmx5OyB5ZXQgaGUgaXMgYXZvd2VkbHkgc2Vla2luZyB0byBkaXNmcmFuY2hpc2Ugc29tZWJvZHkgZWxzZS4gPC90cmFuc2xhdGlvbj4="
translation['18.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBhcmUgbWFueSBvdGhlciBhcmd1bWVudHMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIGJlIHBsZWFkZWQgb24gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYxMCI+Q3Rlc2lwaG9uPC9wbGFjZU5hbWU+J3MgYmVoYWxmLCBidXQgdGhpcyBzdXJlbHkgaXMKICAgICAgICAgICAgICAgICAgICBlbWluZW50bHkgcmVhc29uYWJsZSwgdGhhdCB0aGUgaG9uZXN0IGNvdXJzZSB3YXMgdG8gZmlnaHQgb3V0IG91ciBvd24gcXVhcnJlbHMKICAgICAgICAgICAgICAgICAgICBieSBvdXJzZWx2ZXMsIG5vdCB0byB0dXJuIGFzaWRlIGZyb20gb3VyIGFudGFnb25pc20gYW5kIHRyeSB0byBmaW5kIHNvbWUgb25lCiAgICAgICAgICAgICAgICAgICAgZWxzZSB0byBpbmp1cmUuIFRoYXQgaXMgY2FycnlpbmcgaW5pcXVpdHkgdG9vIGZhciEgPC90cmFuc2xhdGlvbj4="
translation['18.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgYSBmYWlyIGluZmVyZW5jZSB0aGF0IGFsbCBoaXMKICAgICAgICAgICAgICAgICAgICBhY2N1c2F0aW9ucyBhcmUgZXF1YWxseSBkaXNob25lc3QgYW5kIHVudHJ1dGhmdWwuIEkgd2lzaCwgaG93ZXZlciwgdG8gZXhhbWluZQogICAgICAgICAgICAgICAgICAgIHRoZW0gb25lIGJ5IG9uZSwgYW5kIGVzcGVjaWFsbHkgdGhlIGZhbHNlaG9vZHMgaGUgdG9sZCB0byBteSBkaXNjcmVkaXQgYWJvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVhY2UgYW5kIHRoZSBlbWJhc3N5LCBhdHRyaWJ1dGluZyB0byBtZSB3aGF0IHdhcyByZWFsbHkgZG9uZSBieSBoaW1zZWxmIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgYWlkIG9mIFBoaWxvY3JhdGVzLiBJdCBpcyBuZWNlc3NhcnksIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCBub3QgaW1wcm9wZXIsIHRvIHJlbWluZCB5b3Ugb2YgdGhlIHBvc2l0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgYWZmYWlycyBpbiB0aG9zZSBkYXlzLCBzbyB0aGF0IHlvdSBtYXkgY29uc2lkZXIgZWFjaCB0cmFuc2FjdGlvbiB3aXRoIGR1ZSByZWdhcmQKICAgICAgICAgICAgICAgICAgICB0byBpdHMgb2NjYXNpb24uIDwvdHJhbnNsYXRpb24+"
translation['18.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB0aGUgUGhvY2lhbiB3YXIgYmVnYW7igJRub3QgYnkgbXkgZmF1bHQsIGZvciBJIHdhcyBzdGlsbCBvdXRzaWRlCiAgICAgICAgICAgICAgICAgICAgcG9saXRpY3PigJR5b3Ugd2VyZSBhdCBmaXJzdCBkaXNwb3NlZCB0byBob3BlIHRoYXQgdGhlIFBob2NpYW5zIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgZXNjYXBlIHJ1aW4sIGFsdGhvdWdoIHlvdSBrbmV3IHRoYXQgdGhleSB3ZXJlIGluIHRoZSB3cm9uZywgYW5kIHRvIGV4dWx0IG92ZXIKICAgICAgICAgICAgICAgICAgICBhbnkgbWlzZm9ydHVuZSB0aGF0IG1pZ2h0IGJlZmFsbCB0aGUgVGhlYmFucywgd2l0aCB3aG9tIHlvdSB3ZXJlIGp1c3RseSBhbmQKICAgICAgICAgICAgICAgICAgICByZWFzb25hYmx5IGluZGlnbmFudCBiZWNhdXNlIG9mIHRoZSBpbW1vZGVyYXRlIHVzZSB0aGV5IGhhZCBtYWRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZSB0aGV5IGdhaW5lZCBhdCBMZXVjdHJhLiBUaGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcwNzYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzA3NiI+UGVsb3Bvbm5lc3VzPC9wbGFjZU5hbWU+IHdhcyBkaXZpZGVkLiBUaGUgZW5lbWllcyBvZiB0aGUgTGFjZWRhZW1vbmlhbnMKICAgICAgICAgICAgICAgICAgICB3ZXJlIG5vdCBzdHJvbmcgZW5vdWdoIHRvIGRlc3Ryb3kgdGhlbTsgYW5kIHRoZSBhcmlzdG9jcmF0cyB3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIGhhZCBwdXQgaW50byBwb3dlciBoYWQgbG9zdCBjb250cm9sIG9mIHRoZSBzZXZlcmFsIHN0YXRlcy4gSW4KICAgICAgICAgICAgICAgICAgICB0aG9zZSBzdGF0ZXMgYW5kIGV2ZXJ5d2hlcmUgZWxzZSB0aGVyZSB3YXMgaW5kaXNjcmltaW5hdGUgc3RyaWZlIGFuZCBjb25mdXNpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAsIG9ic2VydmluZyB0aGVzZSBjb25kaXRpb25zLCB3aGljaAogICAgICAgICAgICAgICAgICAgIHdlcmUgYXBwYXJlbnQgZW5vdWdoLCBzcGVudCBtb25leSBmcmVlbHkgaW4gYnJpYmluZyB0cmFpdG9yb3VzIHBlcnNvbnMgaW4gYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIGNpdGllcywgYW5kIHRyaWVkIHRvIHByb21vdGUgZW1icm9pbG1lbnQgYW5kIGRpc29yZGVyLiBIZSBiYXNlZCBoaXMgZGVzaWducwogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBlcnJvcnMgYW5kIGZvbGxpZXMgb2Ygb3RoZXJzLCBhbmQgdGhlIGdyb3d0aCBvZiBoaXMgcG93ZXIgd2FzIHBlcmlsb3VzIHRvCiAgICAgICAgICAgICAgICAgICAgdXMgYWxsLiBXaGVuIGl0IHdhcyBldmlkZW50IHRoYXQgdGhlIFRoZWJhbnMsIG5vdyBmYWxsZW4gZnJvbSBhcnJvZ2FuY2UgdG8KICAgICAgICAgICAgICAgICAgICBkaXNhc3RlciwgYW5kIG11Y2ggZGlzdHJlc3NlZCBieSB0aGUgcHJvbG9uZ2F0aW9uIG9mIHRoZSB3YXIsIHdvdWxkIGJlIGNvbXBlbGxlZAogICAgICAgICAgICAgICAgICAgIHRvIHNlZWsgdGhlIHByb3RlY3Rpb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCwgdG8gZm9yZXN0YWxsIHN1Y2ggYW4gYXBwZWFsIGFuZCBjb2FsaXRpb24sIG9mZmVyZWQgcGVhY2UgdG8geW91IGFuZAogICAgICAgICAgICAgICAgICAgIHN1Y2NvciB0byB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgd2hhdCBjb250cmlidXRlZCB0byBoaXMKICAgICAgICAgICAgICAgICAgICBzdWNjZXNzLCB3aGVuIGhlIGZvdW5kIHlvdSByZWFkeSB0byBmYWxsIGludG8gaGlzIHRyYXAgYWxtb3N0IGVhZ2VybHksIHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBiYXNlbmVzcywgb3IsIGlmIHlvdSBwcmVmZXIgdGhlIHRlcm0sIHRoZSBzdHVwaWRpdHksIG9yIGJvdGgsIG9mIHRoZSBvdGhlciBHcmVlawogICAgICAgICAgICAgICAgICAgIHN0YXRlcy4gWW91IHdlcmUgZmlnaHRpbmcgYSBsb25nIGFuZCBpbmNlc3NhbnQgd2FyIGZvciBwdXJwb3NlcyBpbiB3aGljaCwgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZXZlbnQgaGFzIHByb3ZlZCwgdGhleSB3ZXJlIGFsbCBjb25jZXJuZWQsIGFuZCB5ZXQgdGhleSBoZWxwZWQgeW91IG5laXRoZXIgd2l0aAogICAgICAgICAgICAgICAgICAgIG1vbmV5LCBub3Igd2l0aCBtZW4sIG5vciB3aXRoIGFueXRoaW5nIGVsc2U7IGFuZCBzbywgaW4geW91ciBqdXN0IGFuZCBuYXR1cmFsCiAgICAgICAgICAgICAgICAgICAgaW5kaWduYXRpb24sIHlvdSByZWFkaWx5IGFjY2VwdGVkIFBoaWxpcCdzIHN1Z2dlc3Rpb24uIFRoZSBwZWFjZSBjb25jZWRlZCB0byBoaW0KICAgICAgICAgICAgICAgICAgICBhdCB0aGF0IHRpbWUgd2FzIGR1ZSB0byB0aGUgY2F1c2VzIEkgaGF2ZSBuYW1lZCwgYW5kIG5vdCwgYXMgQWVzY2hpbmVzCiAgICAgICAgICAgICAgICAgICAgbWFsaWNpb3VzbHkgaW5zaXN0cywgdG8gbWU7IGFuZCB0aGUgbWlzZGVlZHMgYW5kIHRoZSBjb3JydXB0aW9uIG9mIEFlc2NoaW5lcyBhbmQKICAgICAgICAgICAgICAgICAgICBoaXMgcGFydHkgZHVyaW5nIHRoYXQgcGVhY2Ugd2lsbCBiZSBmb3VuZCwgb24gYW55IGhvbmVzdCBpbnF1aXJ5LCB0byBiZSB0aGUgdHJ1ZQogICAgICAgICAgICAgICAgICAgIGNhdXNlIG9mIG91ciBwcmVzZW50IHRyb3VibGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZQogICAgICAgICAgICAgICAgICAgIGRpc3RpbmN0aW9ucyBhbmQgZXhwbGFuYXRpb25zIEkgb2ZmZXIgbWVyZWx5IGZvciB0aGUgc2FrZSBvZiBhY2N1cmFjeTsgZm9yIGlmCiAgICAgICAgICAgICAgICAgICAgeW91IHNob3VsZCBzdXBwb3NlIHRoYXQgdGhlcmUgd2FzIGFueSBndWlsdCwgb3IgZXZlciBzbyBtdWNoIGd1aWx0LCBpbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgcGVhY2UtbWFraW5nIGJ1c2luZXNzLCB0aGUgc3VzcGljaW9uIGRvZXMgbm90IGNvbmNlcm4gbWUuIFRoZSBmaXJzdCBtYW4gdG8gcmFpc2UKICAgICAgICAgICAgICAgICAgICB0aGUgcXVlc3Rpb24gb2YgcGVhY2UgaW4gYSBzcGVlY2ggd2FzIEFyaXN0b2RlbXVzLCB0aGUgYWN0b3IsIGFuZCB0aGUgbWFuIHdobwogICAgICAgICAgICAgICAgICAgIHRvb2sgdXAgdGhlIGN1ZSwgbW92ZWQgdGhlIHJlc29sdXRpb24sIGFuZCwgd2l0aCBBZXNjaGluZXMsIGJlY2FtZSBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIGhpcmVkIGFnZW50LCB3YXMgUGhpbG9jcmF0ZXMgb2YgSGFnbnVz4oCUeW91ciBjb25mZWRlcmF0ZSwgQWVzY2hpbmVzLAogICAgICAgICAgICAgICAgICAgIG5vdCBtaW5lLCB0aG91Z2ggeW91IGxpZSB0aWxsIHlvdSBhcmUgYmxhY2sgaW4gdGhlIGZhY2UuIFRoZWlyIHN1cHBvcnRlcnMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGViYXRlIHdlcmUgRXVidWx1cyBhbmQgQ2VwaGlzb3Bob27igJRvbiB3aG9zZSBtb3RpdmVzIEkgaGF2ZSBhdCBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgbm90aGluZyB0byBzYXkuIEkgbmV2ZXIgc3Bva2UgaW4gZmF2b3Igb2YgdGhlIHBlYWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCB0aG91Z2ggdGhlIGZhY3RzIGFyZSBzdWNoIGFuZCBkZW1vbnN0cmF0ZWQgdG8gYmUgc3VjaCwgaGUKICAgICAgICAgICAgICAgICAgICBoYXMgdGhlIGFtYXppbmcgaW1wdWRlbmNlIHRvIHRlbGwgeW91IHRoYXQgSSBhbSB0byBibGFtZSBmb3IgdGhlIHRlcm1zIG9mIHBlYWNlLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IEkgc3RvcHBlZCB0aGUgY2l0eSBmcm9tIGFycmFuZ2luZyB0aGUgdGVybXMgaW4gY29uanVuY3Rpb24gd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgY29uZ3Jlc3Mgb2YgdGhlIEdyZWVrIHN0YXRlcy4gV2h5LCB5b3UsIHlvdeKAlGJ1dCBJIGNhbiBmaW5kIG5vIGVwaXRoZXQKICAgICAgICAgICAgICAgICAgICBiYWQgZW5vdWdoIGZvciB5b3XigJR3YXMgdGhlcmUgYW55IHNpbmdsZSBvY2Nhc2lvbiB3aGVuIHlvdSwgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZWQgbWUgaW4geW91ciBwcmVzZW5jZSB0cnlpbmcgdG8gcm9iIHRoZSBzdGF0ZSBvZiBhIG5lZ290aWF0aW9uIGFuZCBvZiBhbgogICAgICAgICAgICAgICAgICAgIGFsbGlhbmNlIHdoaWNoIHlvdSBoYXZlIGp1c3QgZGVzY3JpYmVkIGFzIG9mIHRoZSBncmVhdGVzdCBpbXBvcnRhbmNlLCBlaXRoZXIKICAgICAgICAgICAgICAgICAgICBtYWRlIGFueSBwcm90ZXN0LCBvciByb3NlIHRvIGdpdmUgdGhlIHBlb3BsZSBhbnkgaW5mb3JtYXRpb24gd2hhdHNvZXZlciBhYm91dAogICAgICAgICAgICAgICAgICAgIHRoZSBwcm9jZWVkaW5nIHdoaWNoIHlvdSBub3cgZGVub3VuY2U/IDwvdHJhbnNsYXRpb24+"
translation['18.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgaWYKICAgICAgICAgICAgICAgICAgICBJIGhhZCByZWFsbHkgaW50cmlndWVkIHdpdGggUGhpbGlwIHRvIHN0b3AgYSBQYW5oZWxsZW5pYyBjb2FsaXRpb24sIGl0IHdhcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3Mgbm90IHRvIGhvbGQgeW91ciBwZWFjZSwgYnV0IHRvIGNyeSBhbG91ZCwgdG8gcHJvdGVzdCwgdG8gaW5mb3JtIHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZS4gWW91IGRpZCBub3RoaW5nIG9mIHRoZSBzb3J0LiBObyBvbmUgZXZlciBoZWFyZCB0aGF0IGZpbmUgdm9pY2Ugb2YgeW91cnMuCiAgICAgICAgICAgICAgICAgICAgT2YgY291cnNlIG5vdDsgZm9yIGF0IHRoYXQgdGltZSB0aGVyZSB3YXMgbm8gZW1iYXNzeSB2aXNpdGluZyBhbnkgb2YgdGhlIEdyZWVrCiAgICAgICAgICAgICAgICAgICAgc3RhdGVzLCBidXQgYWxsIHRoZSBzdGF0ZXMgaGFkIGxvbmcgYWdvIGJlZW4gc291bmRlZCwgYW5kIHRoZXJlIGlzIG5vdCBhbiBob25lc3QKICAgICAgICAgICAgICAgICAgICB3b3JkIGluIGhpcyB3aG9sZSBzdG9yeS4gPC90cmFuc2xhdGlvbj4="
translation['18.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaGlzCiAgICAgICAgICAgICAgICAgICAgZmFsc2Vob29kcyBhcmUgdGhlIHdvcnN0IG9mIHNsYW5kZXJzIHVwb24gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBJZiBhdCBvbmUgYW5kIHRoZSBzYW1lIHRpbWUgeW91IHdlcmUgaW52aXRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgR3JlZWtzIHRvIG1ha2Ugd2FyIGFuZCBzZW5kaW5nIGVudm95cyB0byBQaGlsaXAgdG8gbmVnb3RpYXRlIHBlYWNlLCB5b3Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHBsYXlpbmcgYSBwYXJ0IHdvcnRoeSBvZiBFdXJ5YmF0dXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RXVyeWJhdHVzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI0OTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjQ5OSI+RXBoZXN1czwvcGxhY2VOYW1lPiwgYSBwcm92ZXJiaWFsIGtuYXZlLAogICAgICAgICAgICAgICAgICAgICAgICBnYXZlIHRvIEN5cnVzIG1pbGl0YXJ5IG1vbmV5IGVudHJ1c3RlZCB0byBoaW0gYnkgQ3JvZXN1cy48L25vdGU+IHRoZQogICAgICAgICAgICAgICAgICAgIGltcG9zdG9yLCBub3Qgb2YgYSBncmVhdCBjaXR5IG9yIG9mIGhvbmVzdCBtZW4uIEJ1dCBpdCBpcyBmYWxzZTsgaXQgaXMgZmFsc2UhCiAgICAgICAgICAgICAgICAgICAgRm9yIHdoYXQgcHVycG9zZSBjb3VsZCB5b3UgaGF2ZSBzdW1tb25lZCB0aGVtIGF0IHRoYXQgY3Jpc2lzPyBGb3IgcGVhY2U/IFRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJlIGFsbCBlbmpveWluZyBwZWFjZS4gRm9yIHdhcj8gWW91IHdlcmUgYWxyZWFkeSBkaXNjdXNzaW5nIHRlcm1zIG9mIHBlYWNlLgogICAgICAgICAgICAgICAgICAgIFRoZXJlZm9yZSBpdCBpcyBjbGVhciB0aGF0IEkgZGlkIG5vdCBwcm9tb3RlLCBhbmQgd2FzIGluIG5vIHdheSByZXNwb25zaWJsZSBmb3IsCiAgICAgICAgICAgICAgICAgICAgdGhlIG9yaWdpbmFsIHBlYWNlLCBhbmQgdGhhdCBhbGwgaGlzIG90aGVyIGNhbHVtbmllcyBhcmUgZXF1YWxseSBmYWxzZS4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI0OTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjQ5OSI+RXBoZXN1czwvcGxhY2VOYW1lPiwgYSBwcm92ZXJiaWFsIGtuYXZlLAogICAgICAgICAgICAgICAgICAgICAgICBnYXZlIHRvIEN5cnVzIG1pbGl0YXJ5IG1vbmV5IGVudHJ1c3RlZCB0byBoaW0gYnkgQ3JvZXN1cy48L3RyYW5zbGF0aW9uPg=="
translation['18.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IG9ic2VydmUKICAgICAgICAgICAgICAgICAgICB3aGF0IHBvbGljeSB3ZSBzZXZlcmFsbHkgYWRvcHRlZCBhZnRlciB0aGUgY29uY2x1c2lvbiBvZiBwZWFjZS4gWW91IHdpbGwgdGhlcmVieQogICAgICAgICAgICAgICAgICAgIGFzY2VydGFpbiB3aG8gYWN0ZWQgdGhyb3VnaG91dCBhcyBQaGlsaXAncyBhZ2VudCwgYW5kIHdobyBzZXJ2ZWQgeW91ciBpbnRlcmVzdHMKICAgICAgICAgICAgICAgICAgICBhbmQgc291Z2h0IHRoZSBnb29kIG9mIHRoZSBjaXR5LiBJIHByb3Bvc2VkIGluIHRoZSBDb3VuY2lsIHRoYXQgdGhlIGFtYmFzc2Fkb3JzCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHNhaWwgd2l0aG91dCBkZWxheSB0byBhbnkgcGxhY2Ugd2hlcmUgdGhleSBtaWdodCBsZWFybiB0aGF0IFBoaWxpcCB3YXMgdG8KICAgICAgICAgICAgICAgICAgICBiZSBmb3VuZCwgYW5kIHRoZXJlIHJlY2VpdmUgZnJvbSBoaW0gdGhlIG9hdGggb2YgcmF0aWZpY2F0aW9uOyBidXQgaW4gc3BpdGUgb2YKICAgICAgICAgICAgICAgICAgICBteSByZXNvbHV0aW9uIHRoZXkgcmVmdXNlZCB0byBnby4gV2hhdCB3YXMgdGhlIHJlYXNvbiBvZiB0aGF0IHJlZnVzYWw/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5JIHdpbGwgdGVsbCB5b3UuIEl0IHN1aXRlZCBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIHB1cnBvc2VzIHRoYXQgdGhlIGludGVydmFsIHNob3VsZCBiZSBhcyBsb25nLCBhbmQgb3VycyB0aGF0IGl0IHNob3VsZCBiZSBhcwogICAgICAgICAgICAgICAgICAgIHNob3J0IGFzIHBvc3NpYmxlOyBmb3IgeW91IGhhZCBzdXNwZW5kZWQgYWxsIHlvdXIgcHJlcGFyYXRpb25zIGZvciB3YXIsIG5vdAogICAgICAgICAgICAgICAgICAgIG1lcmVseSBmcm9tIHRoZSBkYXkgb2YgcmF0aWZpY2F0aW9uLCBidXQgZnJvbSB0aGF0IG9uIHdoaWNoIHlvdSBmaXJzdCBiZWdhbiB0bwogICAgICAgICAgICAgICAgICAgIGV4cGVjdCBwZWFjZS4gVGhhdCB3YXMganVzdCB3aGF0IFBoaWxpcCB3YXMgY29udHJpdmluZyBhbGwgdGhlIHRpbWUsIGV4cGVjdGluZwogICAgICAgICAgICAgICAgICAgIHdpdGggZ29vZCByZWFzb24gdGhhdCBoZSB3b3VsZCBob2xkIHNhZmVseSBhbnkgQXRoZW5pYW4gcG9zc2Vzc2lvbnMgd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICBtaWdodCBzZWl6ZSBiZWZvcmUgdGhlIHJhdGlmaWNhdGlvbiwgYXMgbm8gb25lIHdvdWxkIGJyZWFrIHRoZSBwZWFjZSB0byByZWNvdmVyCiAgICAgICAgICAgICAgICAgICAgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['18.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Jlc2VlaW5nIHRoYXQgcmVzdWx0LCBhbmQgYXBwcmVjaWF0aW5nCiAgICAgICAgICAgICAgICAgICAgaXRzIGltcG9ydGFuY2UsIEkgbW92ZWQgdGhhdCB0aGUgZW1iYXNzeSBzaG91bGQgcmVwYWlyIHRvIHRoZSBwbGFjZSB3aGVyZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgd291bGQgZmluZCBQaGlsaXAgYW5kIHN3ZWFyIGhpbSBpbiB3aXRob3V0IGRlbGF5LCBpbiBvcmRlciB0aGF0IHRoZSBvYXRoIG1pZ2h0CiAgICAgICAgICAgICAgICAgICAgYmUgdGFrZW4gd2hpbGUgeW91ciBhbGxpZXMgdGhlIFRocmFjaWFucyB3ZXJlIHN0aWxsIGhvbGRpbmcgdGhlIHBsYWNlcyBhYm91dAogICAgICAgICAgICAgICAgICAgIHdoaWNoIEFlc2NoaW5lcyB3YXMgc28gc2FyY2FzdGlj4oCUU2Vycml1bSwgTXlydGVudW0sIGFuZAogICAgICAgICAgICAgICAgICAgIEVyZ2lzY2XigJRhbmQgdGhhdCBQaGlsaXAgbWlnaHQgbm90IGdldCBjb250cm9sIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBieSBzZWl6aW5nIHRoZSBwb3NpdGlvbnMgb2YgYWR2YW50YWdlCiAgICAgICAgICAgICAgICAgICAgYW5kIHNvIHByb3ZpZGluZyBoaW1zZWxmIGFtcGx5IHdpdGggbWVuIGFuZCBtb25leSBmb3IgdGhlIGZ1cnRoZXJhbmNlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHVsdGVyaW9yIGRlc2lnbnMuIDwvdHJhbnNsYXRpb24+"
translation['18.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGRlY3JlZSBBZXNjaGluZXMKICAgICAgICAgICAgICAgICAgICBuZWl0aGVyIGNpdGVzIG5vciByZWFkczsgdGhvdWdoIGhlIG1lbnRpb25zIHRvIG15IGRpc2NyZWRpdCB0aGF0IEkgc3VnZ2VzdGVkIGluCiAgICAgICAgICAgICAgICAgICAgQ291bmNpbCB0aGF0IHRoZSBNYWNlZG9uaWFuIGFtYmFzc2Fkb3JzIHNob3VsZCBiZSBpbnRyb2R1Y2VkLiBXaGF0IG91Z2h0IEkgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGRvbmU/IE9iamVjdGVkIHRvIHRoZSBpbnRyb2R1Y3Rpb24gb2YgbWVuIHdobyBoYWQgY29tZSBleHByZXNzbHkgdG8gY29uZmVyCiAgICAgICAgICAgICAgICAgICAgd2l0aCB5b3U/IE9yZGVyZWQgdGhlIGxlc3NlZSBub3QgdG8gZ2l2ZSB0aGVtIHJlc2VydmVkIHNlYXRzIGluIHRoZSB0aGVhdHJlPyBCdXQKICAgICAgICAgICAgICAgICAgICB0aGV5IGNvdWxkIGhhdmUgc2F0IGluIHRoZSB0aHJlZXBlbm55IHNlYXRzLCBpZiBJIGhhZCBub3QgbW92ZWQgbXkgcmVzb2x1dGlvbi4KICAgICAgICAgICAgICAgICAgICBPciB3YXMgaXQgbXkgYnVzaW5lc3MgdG8gdGFrZSBjYXJlIG9mIHRoZSBwdWJsaWMgcGVuY2UsIGFuZCBwdXQgdXAgdGhlIHN0YXRlIGZvcgogICAgICAgICAgICAgICAgICAgIHNhbGUsIGxpa2UgQWVzY2hpbmVzIGFuZCBoaXMgZnJpZW5kcz8gU3VyZWx5IG5vdC4gUGxlYXNlIHRha2UgYW5kIHJlYWQgdGhpcwogICAgICAgICAgICAgICAgICAgIGRlY3JlZSwgd2hpY2ggdGhlIHByb3NlY3V0b3Igb21pdHRlZCwgdGhvdWdoIGhlIGtub3dzIGl0IHdlbGwuIDwvdHJhbnNsYXRpb24+"
translation['18.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUgb2YgRGVtb3N0aGVuZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hvbnNoaXAgb2YgTW5lc2lwaGlsdXMsIG9uIHRoZSB0aGlydGlldGggZGF5IG9mIEhlY2F0b21iYWVvbiwgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIFBhbmRpb25pcyB0aGVuIGhvbGRpbmcgdGhlIHByZXNpZGVuY3ksIERlbW9zdGhlbmVzLCBzb24gb2YgRGVtb3N0aGVuZXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBhZWFuaWEsIHByb3Bvc2VkIHRoYXQsIHdoZXJlYXMgUGhpbGlwIGhhcyBzZW50IGFtYmFzc2Fkb3JzIGFuZCBoYXMgYWdyZWVkCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFydGljbGVzIG9mIHBlYWNlLCBpdCBiZSByZXNvbHZlZCBieSB0aGUgQ291bmNpbCBhbmQgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2l0aCBhIHZpZXcgdG8gdGhlIHJhdGlmaWNhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcGVhY2UgYXMgYWNjZXB0ZWQgYnkgdm90ZSBvZiB0aGUgZmlyc3QgQXNzZW1ibHksIHRvIGNob29zZSBhdCBvbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIGZpdmUgYW1iYXNzYWRvcnMgZnJvbSBhbGwgdGhlIGNpdGl6ZW5zOyBhbmQgdGhhdCB0aG9zZSBzbyBlbGVjdGVkIHJlcGFpcgogICAgICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGRlbGF5IHdoZXJlc29ldmVyIHRoZXkgYXNjZXJ0YWluIFBoaWxpcCB0byBiZSwgYW5kIHRha2UgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluaXN0ZXIgdG8gaGltIHRoZSBvYXRocyB3aXRoIGFsbCBkaXNwYXRjaCBhY2NvcmRpbmcgdG8gdGhlIGFydGljbGVzCiAgICAgICAgICAgICAgICAgICAgICAgIGFncmVlZCBvbiBiZXR3ZWVuIGhpbSBhbmQgdGhlIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGluY2x1ZGluZyB0aGUgYWxsaWVzIG9uIGVpdGhlciBzaWRlLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgY2hvc2VuIHdlcmUgRXVidWx1cyBvZiBBbmFwaGx5c3R1cywgQWVzY2hpbmVzIG9mIENvdGhvY2lkYWUsCiAgICAgICAgICAgICAgICAgICAgICAgIENlcGhpc29waG9uIG9mIFJoYW1udXMsIERlbW9jcmF0ZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NSI+UGhseWE8L3BsYWNlTmFtZT4sIENsZW9uIG9mIENvdGhvY2lkYWUuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYXJjaG9uc2hpcCBvZiBNbmVzaXBoaWx1cywgb24gdGhlIHRoaXJ0aWV0aCBkYXkgb2YgSGVjYXRvbWJhZW9uLCB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgUGFuZGlvbmlzIHRoZW4gaG9sZGluZyB0aGUgcHJlc2lkZW5jeSwgRGVtb3N0aGVuZXMsIHNvbiBvZiBEZW1vc3RoZW5lcywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGFlYW5pYSwgcHJvcG9zZWQgdGhhdCwgd2hlcmVhcyBQaGlsaXAgaGFzIHNlbnQgYW1iYXNzYWRvcnMgYW5kIGhhcyBhZ3JlZWQKICAgICAgICAgICAgICAgICAgICAgICAgdG8gYXJ0aWNsZXMgb2YgcGVhY2UsIGl0IGJlIHJlc29sdmVkIGJ5IHRoZSBDb3VuY2lsIGFuZCBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aXRoIGEgdmlldyB0byB0aGUgcmF0aWZpY2F0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBwZWFjZSBhcyBhY2NlcHRlZCBieSB2b3RlIG9mIHRoZSBmaXJzdCBBc3NlbWJseSwgdG8gY2hvb3NlIGF0IG9uY2UKICAgICAgICAgICAgICAgICAgICAgICAgZml2ZSBhbWJhc3NhZG9ycyBmcm9tIGFsbCB0aGUgY2l0aXplbnM7IGFuZCB0aGF0IHRob3NlIHNvIGVsZWN0ZWQgcmVwYWlyCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZGVsYXkgd2hlcmVzb2V2ZXIgdGhleSBhc2NlcnRhaW4gUGhpbGlwIHRvIGJlLCBhbmQgdGFrZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgYWRtaW5pc3RlciB0byBoaW0gdGhlIG9hdGhzIHdpdGggYWxsIGRpc3BhdGNoIGFjY29yZGluZyB0byB0aGUgYXJ0aWNsZXMKICAgICAgICAgICAgICAgICAgICAgICAgYWdyZWVkIG9uIGJldHdlZW4gaGltIGFuZCB0aGUgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaW5jbHVkaW5nIHRoZSBhbGxpZXMgb24gZWl0aGVyIHNpZGUuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBjaG9zZW4gd2VyZSBFdWJ1bHVzIG9mIEFuYXBobHlzdHVzLCBBZXNjaGluZXMgb2YgQ290aG9jaWRhZSwKICAgICAgICAgICAgICAgICAgICAgICAgQ2VwaGlzb3Bob24gb2YgUmhhbW51cywgRGVtb2NyYXRlcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU1Ij5QaGx5YTwvcGxhY2VOYW1lPiwgQ2xlb24gb2YgQ290aG9jaWRhZS5dPC90cmFuc2xhdGlvbj4="
translation['18.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TXkgb2JqZWN0IGluCiAgICAgICAgICAgICAgICAgICAgbW92aW5nIHRoaXMgZGVjcmVlIHdhcyB0byBzZXJ2ZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG5vdCBQaGlsaXAuIE5ldmVydGhlbGVzcyB0aGVzZSBleGNlbGxlbnQgZW52b3lzIHRvb2sgc28KICAgICAgICAgICAgICAgICAgICBsaXR0bGUgaGVlZCBvZiBpdCB0aGF0IHRoZXkgbG9pdGVyZWQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+IGZvciB0aHJlZSB3aG9sZSBtb250aHMsIHVudGlsIFBoaWxpcCByZXR1cm5lZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiwgaGF2aW5nIHN1YmR1ZWQgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeTsgdGhvdWdoIHRoZXkgbWlnaHQgaGF2ZSByZWFjaGVkIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+IGluIHRlbiBvciBwZXJoYXBzIGluIHRocmVlIG9yIGZvdXIgZGF5cywgYW5kIHJlc2N1ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgb3V0cG9zdHMgYnkgcmVjZWl2aW5nIHRoZSBvYXRocyBvZiByYXRpZmljYXRpb24gYmVmb3JlIFBoaWxpcCBjYXB0dXJlZCB0aGVtLgogICAgICAgICAgICAgICAgICAgIEhlIGRhcmVkIG5vdCBoYXZlIHRvdWNoZWQgdGhlbSBpbiBvdXIgcHJlc2VuY2UsIG9yIHdlIHNob3VsZCBub3QgaGF2ZSBhY2NlcHRlZAogICAgICAgICAgICAgICAgICAgIGhpcyBvYXRoLCBhbmQgc28gaGUgd291bGQgaGF2ZSBtaXNzZWQgaGlzIHBlYWNlLCBpbnN0ZWFkIG9mIGdhaW5pbmcgYm90aCBoaXMKICAgICAgICAgICAgICAgICAgICBvYmplY3Rz4oCUcGVhY2UgYW5kIHRoZSBzdHJvbmdob2xkcyBhcyB3ZWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCB0aGVuIGlzIHRoZSBoaXN0b3J5IG9mIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIGFjdCBvZiBrbmF2ZXJ5IG9uIFBoaWxpcCdzIHBhcnQsIGFuZCB2ZW5hbGl0eSBvbiB0aGUgcGFydCBvZiB0aGVzZSBkaXNob25lc3QgbWVuCiAgICAgICAgICAgICAgICAgICAgYXQgdGhlIHRpbWUgb2YgdGhlIGVtYmFzc3kuIEZvciB0aGF0IGFjdCBJIGF2b3cgdGhhdCBJIHdhcyB0aGVuLCBhbSBzdGlsbCwgYW5kCiAgICAgICAgICAgICAgICAgICAgZXZlciBzaGFsbCBiZSB0aGVpciBlbmVteSBhbmQgdGhlaXIgYWR2ZXJzYXJ5LiBJIHdpbGwgbmV4dCBleGhpYml0IGFuIGFjdCBvZgogICAgICAgICAgICAgICAgICAgIHN0aWxsIGdyZWF0ZXIgdHVycGl0dWRlIHdoaWNoIGNvbWVzIG5leHQgaW4gb3JkZXIgb2YgdGltZS4gPC90cmFuc2xhdGlvbj4="
translation['18.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFBoaWxpcCBoYWQgc3dvcm4gdG8gdGhlIHBlYWNlLCBoYXZpbmcgZmlyc3QKICAgICAgICAgICAgICAgICAgICBzZWN1cmVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBiZWNhdXNlIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZGlzb2JlZGllbmNlIHRvIG15IGRlY3JlZSwgaGUgYnJpYmVkIHRoZW0gdG8gcG9zdHBvbmUgb3VyIGRlcGFydHVyZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiB1bnRpbCBoZSBoYWQgbWFkZSByZWFkeQogICAgICAgICAgICAgICAgICAgIGZvciBoaXMgZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBQaG9jaWFucy4gSGUgd2FzIGFmcmFpZCB0aGF0LCBpZiB3ZSByZXBvcnRlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaW50ZW5kZWQgYW5kIHdhcyBhbHJlYWR5IHByZXBhcmluZyB0byBtYXJjaCwgeW91IHdvdWxkIHR1cm4gb3V0IGFuZCBzYWlsCiAgICAgICAgICAgICAgICAgICAgcm91bmQgd2l0aCB5b3VyIGZsZWV0IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiwgYW5kIGJsb2NrIHRoZSBwYXNzYWdlLCBhcyB5b3UgZGlkIGJlZm9yZTsgYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIG9iamVjdCB3YXMgdGhhdCB5b3Ugc2hvdWxkIG5vdCByZWNlaXZlIG91ciByZXBvcnQgdW50aWwgaGUgaGFkIHJlYWNoZWQgdGhpcyBzaWRlCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGVybW9weWxhZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlcm1vcHlsYWUiPlRoZXJtb3B5bGFlPC9wbGFjZU5hbWU+IGFuZCB5b3Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHBvd2VybGVzcy4gPC90cmFuc2xhdGlvbj4="
translation['18.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgc28gbmVydm91cywgYW5kIHNvIG11Y2gKICAgICAgICAgICAgICAgICAgICB3b3JyaWVkIGJ5IHRoZSBmZWFyIHRoYXQsIGluIHNwaXRlIG9mIGhpcyBUaHJhY2lhbiBzdWNjZXNzLCBoaXMgZW50ZXJwcmlzZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIHNsaXAgZnJvbSBoaXMgZmluZ2VycyBpZiB5b3Ugc2hvdWxkIGludGVydmVuZSBiZWZvcmUgdGhlIFBob2NpYW5zIHBlcmlzaGVkLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgbWFkZSBhIG5ldyBiYXJnYWluIHdpdGggdGhpcyB2aWxlIGNyZWF0dXJl4oCUYWxsIGJ5IGhpbXNlbGYgdGhpcwogICAgICAgICAgICAgICAgICAgIHRpbWUsIG5vIHQgaW4gY29tbW9uIHdpdGggaGlzIGNvbGxlYWd1ZXPigJQgdG8gbWFrZSB0aGF0IHNwZWVjaCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICByZW5kZXIgdGhhdCByZXBvcnQgdG8geW91LCBieSB3aGljaCBhbGwgd2FzIGxvc3QuIDwvdHJhbnNsYXRpb24+"
translation['18.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5JIGVhcm5lc3RseSBiZWcgeW91LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBiZWFyIGluIG1pbmQgdGhyb3VnaG91dCB0aGlzIHRyaWFsIHRoYXQsIGlmCiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzIGhhZCBub3QgZ29uZSBvdXRzaWRlIHRoZSBhcnRpY2xlcyBvZiBpbmRpY3RtZW50IGluIGhpcyBkZW51bmNpYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBtZSwgSSB0b28gd291bGQgbm90IGhhdmUgZGlncmVzc2VkOyBidXQgYXMgaGUgaGFzIHJlc29ydGVkIHRvIGV2ZXJ5IHNvcnQgb2YKICAgICAgICAgICAgICAgICAgICBpbXB1dGF0aW9uIGFuZCBzbGFuZGVyLCBJIGFtIGNvbXBlbGxlZCB0byByZXBseSBicmllZmx5IHRvIGFsbCBoaXMgY2hhcmdlcyBpbgogICAgICAgICAgICAgICAgICAgIHR1cm4uIDwvdHJhbnNsYXRpb24+"
translation['18.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IHRoZW4gd2VyZSB0aGUgc3BlZWNoZXMgaGUgbWFkZSBhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgY3Jpc2lz4oCUdGhlIHNwZWVjaGVzIHRoYXQgYnJvdWdodCBldmVyeXRoaW5nIHRvIHJ1aW4/IEhlIHRvbGQgeW91CiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3UgbmVlZCBub3QgYmUgZXhjaXRlZCBiZWNhdXNlIFBoaWxpcCBoYWQgcGFzc2VkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPjsgdGhhdCwgaWYgb25seSB5b3Uga2VwdAogICAgICAgICAgICAgICAgICAgIHF1aWV0LCB5b3Ugd291bGQgZ2V0IGFsbCB5b3Ugd2FudGVkLCBhbmQgd291bGQgd2l0aGluIHR3byBvciB0aHJlZSBkYXlzIGxlYXJuCiAgICAgICAgICAgICAgICAgICAgdGhhdCBQaGlsaXAgd2FzIG5vdyB0aGUgZnJpZW5kIG9mIHRob3NlIHRvIHdob20gaGUgY2FtZSBhcyBlbmVteSwgYW5kIHRoZSBlbmVteQogICAgICAgICAgICAgICAgICAgIG9mIHRob3NlIHRvIHdob20gaGUgY2FtZSBhcyBmcmllbmQuIFRoZSBib25kcyBvZiBhbWl0eSwgaGUgZGVjbGFyZWQsIHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgbW9zdCBpbXByZXNzaXZlIGVsb3F1ZW5jZSwgYXJlIGZvcnRpZmllZCBub3QgYnkgd29yZHMgYnV0IGJ5IGNvbW11bml0eSBvZgogICAgICAgICAgICAgICAgICAgIGludGVyZXN0OyBhbmQgaXQgd2FzIGFuIGludGVyZXN0IGNvbW1vbiB0byBQaGlsaXAsIHRvIHRoZSBQaG9jaWFucywgYW5kIHRvIGFsbAogICAgICAgICAgICAgICAgICAgIG9mIHlvdSBhbGlrZSwgdG8gYmUgcXVpdCBvZiB0aGUgdW5mZWVsaW5nIGFuZCBvZmZlbnNpdmUgYmVoYXZpb3Igb2YgdGhlIFRoZWJhbnMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIG9mIHlvdSB3ZXJlIGRlbGlnaHRlZCB0byBoZWFyIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcmVtYXJrcywgZm9yIGF0IHRoYXQgdGltZSB3ZSBhbGwgZGlzbGlrZWQgdGhlIFRoZWJhbnMuIFdoYXQgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3VsdOKAlG5vdCB0aGUgZGlzdGFudCwgYnV0IHRoZSBpbW1lZGlhdGUgcmVzdWx0PyBUaGF0IHRoZSBQaG9jaWFucwogICAgICAgICAgICAgICAgICAgIHBlcmlzaGVkIGFuZCB0aGVpciBjaXRpZXMgd2VyZSBkZW1vbGlzaGVkOyB0aGF0IHlvdSB0b29rIGhpcyBhZHZpY2UgYW5kIGtlcHQKICAgICAgICAgICAgICAgICAgICBxdWlldOKAlGFuZCBiZWZvcmUgbG9uZyB3ZXJlIGNhcnJ5aW5nIGluIHlvdXIgY2hhdHRlbHMgZnJvbSB0aGUgY291bnRyeTsKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBBZXNjaGluZXMgcG9ja2V0ZWQgaGlzIGZlZS4gQSBmdXJ0aGVyIHJlc3VsdCB3YXMgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gZ290IGFsbCB0aGUgaWxsIHdpbGwgb2YgdGhlIFRoZWJhbnMKICAgICAgICAgICAgICAgICAgICBhbmQgVGhlc3NhbGlhbnMsIGFuZCBQaGlsaXAgYWxsIHRoZWlyIGdyYXRpdHVkZSBmb3IgdGhlc2UgdHJhbnNhY3Rpb25zLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwcm92ZSB0aGUgdHJ1dGggb2YgdGhlc2Ugc3RhdGVtZW50cywKICAgICAgICAgICAgICAgICAgICBwbGVhc2UgcmVhZCB0aGUgZGVjcmVlIG9mIENhbGxpc3RoZW5lcyBhbmQgUGhpbGlwJ3MgbGV0dGVyLCB3aGljaCB3aWxsIG1ha2UKICAgICAgICAgICAgICAgICAgICBldmVyeSBwb2ludCBjbGVhci48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgYXJjaG9uc2hpcCBvZiBNbmVzaXBoaWx1cywgYXQgYW4KICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFvcmRpbmFyeSBhc3NlbWJseSBjb252ZW5lZCBieSB0aGUgR2VuZXJhbHMgYW5kIHRoZSBQcmVzaWRlbnRzLCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhcHByb3ZhbCBvZiB0aGUgQ291bmNpbCwgb24gdGhlIHR3ZW50eS1maXJzdCBkYXkgb2YgTWFlbWFjdGVyaW9uLAogICAgICAgICAgICAgICAgICAgICAgICBDYWxsaXN0aGVuZXMsIHNvbiBvZiBFdGVvbmljdXMgb2YgUGhhbGVydW0sIHByb3Bvc2VkIHRoYXQgbm8gQXRoZW5pYW4gYmUKICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZCB1cG9uIGFueSBwcmV0ZXh0IHdoYXRzb2V2ZXIgdG8gcGFzcyB0aGUgbmlnaHQgaW4gdGhlIGNvdW50cnksIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICBvbmx5IGluIHRoZSBDaXR5IGFuZCBQZWlyYWV1cywgZXhjZXB0IHRob3NlIHN0YXRpb25lZCBpbiB0aGUgZ2Fycmlzb247IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxhdHRlciBrZWVwIGVhY2ggdGhlIHBvc3QgYXNzaWduZWQgdG8gaGltLCBsZWF2aW5nIGl0IG5laXRoZXIgYnkgZGF5IG5vcgogICAgICAgICAgICAgICAgICAgICAgICBieSBuaWdodC48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgYXJjaG9uc2hpcCBvZiBNbmVzaXBoaWx1cywgYXQgYW4KICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFvcmRpbmFyeSBhc3NlbWJseSBjb252ZW5lZCBieSB0aGUgR2VuZXJhbHMgYW5kIHRoZSBQcmVzaWRlbnRzLCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhcHByb3ZhbCBvZiB0aGUgQ291bmNpbCwgb24gdGhlIHR3ZW50eS1maXJzdCBkYXkgb2YgTWFlbWFjdGVyaW9uLAogICAgICAgICAgICAgICAgICAgICAgICBDYWxsaXN0aGVuZXMsIHNvbiBvZiBFdGVvbmljdXMgb2YgUGhhbGVydW0sIHByb3Bvc2VkIHRoYXQgbm8gQXRoZW5pYW4gYmUKICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZCB1cG9uIGFueSBwcmV0ZXh0IHdoYXRzb2V2ZXIgdG8gcGFzcyB0aGUgbmlnaHQgaW4gdGhlIGNvdW50cnksIGJ1dAogICAgICAgICAgICAgICAgICAgICAgICBvbmx5IGluIHRoZSBDaXR5IGFuZCBQZWlyYWV1cywgZXhjZXB0IHRob3NlIHN0YXRpb25lZCBpbiB0aGUgZ2Fycmlzb247IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxhdHRlciBrZWVwIGVhY2ggdGhlIHBvc3QgYXNzaWduZWQgdG8gaGltLCBsZWF2aW5nIGl0IG5laXRoZXIgYnkgZGF5IG5vcgogICAgICAgICAgICAgICAgICAgICAgICBieSBuaWdodC48L3RyYW5zbGF0aW9uPg=="
translation['18.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPkFueSBwZXJzb24gZGlzb2JleWluZwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGRlY3JlZSBzaGFsbCBiZSBsaWFibGUgdG8gdGhlIHN0YXR1dG9yeSBwZW5hbHR5IGZvciB0cmVhc29uLCB1bmxlc3MgaGUKICAgICAgICAgICAgICAgICAgICAgICAgY2FuIHByb3ZlIGluYWJpbGl0eSB0byBvYmV5IGluIGhpcyBvd24gY2FzZSwgc3VjaCBwbGVhIG9mIGluYWJpbGl0eSB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICBqdWRnZWQgYnkgdGhlIEdlbmVyYWwgb2YgdGhlIEluZmFudHJ5LCB0aGUgUGF5bWFzdGVyLUdlbmVyYWwsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgU2VjcmV0YXJ5IG9mIHRoZSBDb3VuY2lsLiBBbGwgcHJvcGVydHkgaW4gdGhlIGNvdW50cnkgc2hhbGwgYmUgaW1tZWRpYXRlbHkKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCwgaWYgd2l0aGluIGEgcmFkaXVzIG9mIDEyMCBmdXJsb25ncywgdG8gdGhlIENpdHkgYW5kIFBlaXJhZXVzOyBpZgogICAgICAgICAgICAgICAgICAgICAgICBvdXRzaWRlIHRoaXMgcmFkaXVzLCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVsZXVzaXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVsZXVzaXMiPkVsZXVzaXM8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGh5bGUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBoeWxlIj5QaHlsZTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXBoaWRuYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXBoaWRuYSI+QXBoaWRuYTwvcGxhY2VOYW1lPiwgUmhhbW51cywgb3IKICAgICAgICAgICAgICAgICAgICAgICAgU3VuaXVtLiBQcm9wb3NlZCBieSBDYWxsaXN0aGVuZXMgb2YgUGhhbGVydW0uXTwvcXVvdGU+PHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGV1c2lzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGV1c2lzIj5FbGV1c2lzPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBoeWxlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQaHlsZSI+UGh5bGU8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFwaGlkbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFwaGlkbmEiPkFwaGlkbmE8L3BsYWNlTmFtZT4sIFJoYW1udXMsIG9yCiAgICAgICAgICAgICAgICAgICAgICAgIFN1bml1bS4gUHJvcG9zZWQgYnkgQ2FsbGlzdGhlbmVzIG9mIFBoYWxlcnVtLl08bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2FzIGl0IHdpdGggc3VjaCBleHBlY3RhdGlvbiB0aGF0IHlvdSBtYWRlIHRoZSBwZWFjZT8KICAgICAgICAgICAgICAgICAgICBXZXJlIHRoZXNlIHRoZSBwcm9taXNlcyBvZiB0aGlzIGhpcmVsaW5nPyA8L3RyYW5zbGF0aW9uPg=="
translation['18.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHJlYWQgdGhlIGxldHRlciBzZW50IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhZnRlcndhcmRzIGJ5IFBoaWxpcC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXIiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltQaGlsaXAsIEtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCB0byB0aGUgQ291bmNpbCBhbmQgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZ3JlZXRpbmcuIEtub3cgdGhhdCB3ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCB3aXRoaW4gdGhlIEdhdGVzLCBhbmQgaGF2ZSBzdWJkdWVkIHRoZSBkaXN0cmljdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNDAwMzk2MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw0MDAzOTYzIj5QaG9jaXM8L3BsYWNlTmFtZT4uIFdlIGhhdmUgcHV0IGdhcnJpc29ucyBpbiBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcnRpZmllZCBwbGFjZXMgdGhhdCBzdXJyZW5kZXJlZCB2b2x1bnRhcmlseTsgdGhvc2UgdGhhdCBkaWQgbm90IG9iZXkgd2UKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBzdG9ybWVkIGFuZCByYXplZCB0byB0aGUgZ3JvdW5kLCBzZWxsaW5nIHRoZSBpbmhhYml0YW50cyBpbnRvIHNsYXZlcnkuCiAgICAgICAgICAgICAgICAgICAgICAgIEhlYXJpbmcgdGhhdCB5b3UgYXJlIGFjdHVhbGx5IHByZXBhcmluZyBhbiBleHBlZGl0aW9uIHRvIGhlbHAgdGhlbSwgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXR0ZW4gdG8geW91IHRvIHNhdmUgeW91IGZ1cnRoZXIgdHJvdWJsZSBpbiB0aGlzIG1hdHRlci4gWW91ciBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIHBvbGljeSBzdHJpa2VzIG1lIGFzIHVucmVhc29uYWJsZSwgdG8gYWdyZWUgdG8gcGVhY2UsIGFuZCB5ZXQgdGFrZSB0aGUgZmllbGQKICAgICAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZSwgYW5kIHRoYXQgYWx0aG91Z2ggdGhlIFBob2NpYW5zIHdlcmUgbm90IGluY2x1ZGVkIGluIHRoZSBpbGwKICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMgdXBvbiB3aGljaCB3ZSBhZ3JlZWQuIFRoZXJlZm9yZSBpZiB5b3UgZGVjbGluZSB0byBhYmlkZSBieSB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgIGFncmVlbWVudHMsIHlvdSB3aWxsIGdhaW4gbm8gYWR2YW50YWdlIHNhdmUgdGhhdCBvZiBiZWluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYWdncmVzc29ycy5dPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bUGhpbGlwLCBLaW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgdG8gdGhlIENvdW5jaWwgYW5kIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGdyZWV0aW5nLiBLbm93IHRoYXQgd2UgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgd2l0aGluIHRoZSBHYXRlcywgYW5kIGhhdmUgc3ViZHVlZCB0aGUgZGlzdHJpY3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDQwMDM5NjMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNDAwMzk2MyI+UGhvY2lzPC9wbGFjZU5hbWU+LiBXZSBoYXZlIHB1dCBnYXJyaXNvbnMgaW4gYWxsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmb3J0aWZpZWQgcGxhY2VzIHRoYXQgc3VycmVuZGVyZWQgdm9sdW50YXJpbHk7IHRob3NlIHRoYXQgZGlkIG5vdCBvYmV5IHdlCiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgc3Rvcm1lZCBhbmQgcmF6ZWQgdG8gdGhlIGdyb3VuZCwgc2VsbGluZyB0aGUgaW5oYWJpdGFudHMgaW50byBzbGF2ZXJ5LgogICAgICAgICAgICAgICAgICAgICAgICBIZWFyaW5nIHRoYXQgeW91IGFyZSBhY3R1YWxseSBwcmVwYXJpbmcgYW4gZXhwZWRpdGlvbiB0byBoZWxwIHRoZW0sIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuIHRvIHlvdSB0byBzYXZlIHlvdSBmdXJ0aGVyIHRyb3VibGUgaW4gdGhpcyBtYXR0ZXIuIFlvdXIgZ2VuZXJhbAogICAgICAgICAgICAgICAgICAgICAgICBwb2xpY3kgc3RyaWtlcyBtZSBhcyB1bnJlYXNvbmFibGUsIHRvIGFncmVlIHRvIHBlYWNlLCBhbmQgeWV0IHRha2UgdGhlIGZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbWUsIGFuZCB0aGF0IGFsdGhvdWdoIHRoZSBQaG9jaWFucyB3ZXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUgaWxsCiAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1zIHVwb24gd2hpY2ggd2UgYWdyZWVkLiBUaGVyZWZvcmUgaWYgeW91IGRlY2xpbmUgdG8gYWJpZGUgYnkgeW91cgogICAgICAgICAgICAgICAgICAgICAgICBhZ3JlZW1lbnRzLCB5b3Ugd2lsbCBnYWluIG5vIGFkdmFudGFnZSBzYXZlIHRoYXQgb2YgYmVpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFnZ3Jlc3NvcnMuXTwvdHJhbnNsYXRpb24+"
translation['18.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgIGxldHRlciBpcyBhZGRyZXNzZWQgdG8geW91LCBpdCBjb250YWlucywgYXMgeW91IGhlYXIsIGEgZGlzdGluY3QgaW50aW1hdGlvbgogICAgICAgICAgICAgICAgICAgIGludGVuZGVkIGZvciBoaXMgb3duIGFsbGllczog4oCcSSBoYXZlIGRvbmUgdGhpcyBhZ2FpbnN0IHRoZSB3aXNoZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGludGVyZXN0cyBvZiB0aGUgQXRoZW5pYW5zLiBUaGVyZWZvcmUsIGlmIHlvdSBUaGViYW5zIGFuZCBUaGVzc2FsaWFucyBhcmUKICAgICAgICAgICAgICAgICAgICB3aXNlLCB5b3Ugd2lsbCB0cmVhdCB0aGVtIGFzIHlvdXIgZW5lbWllcywgYW5kIHB1dCB5b3VyIGNvbmZpZGVuY2UgaW4KICAgICAgICAgICAgICAgICAgICBtZS7igJ0gVGhhdCBpcyB0aGUgbWVhbmluZyBjb252ZXllZCwgdGhvdWdoIG5vdCBpbiB0aG9zZSB3b3Jkcy4gQnkgc3VjaAogICAgICAgICAgICAgICAgICAgIGRlbHVzaW9ucyBoZSBjYXJyaWVkIHRoZW0gb2ZmIHRoZWlyIGZlZXQgc28gY29tcGxldGVseSB0aGF0IHRoZXkgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgZm9yZXNpZ2h0IG5vciBhbnkgaW5rbGluZyB3aGF0ZXZlciBvZiB0aGUgc2VxdWVsLCBidXQgYWxsb3dlZCBoaW0gdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIGNvbnRyb2wgb2YgdGhlIHdob2xlIGJ1c2luZXNzOyBhbmQgdGhhdCBpcyB0aGUgcmVhbCBjYXVzZSBvZiB0aGVpciBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgZGlzdHJlc3Nlcy4gPC90cmFuc2xhdGlvbj4="
translation['18.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlIG1hbiB3aG8gd2FzIGhhbmQtaW4tZ2xvdmUKICAgICAgICAgICAgICAgICAgICB3aXRoIFBoaWxpcCwgYW5kIGhlbHBlZCBoaW0gdG8gd2luIHRoYXQgYmxpbmQgY29uZmlkZW5jZSwgd2hvIGJyb3VnaHQgbHlpbmcKICAgICAgICAgICAgICAgICAgICByZXBvcnRzIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQgZGVsdWRlZCBoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3ctY2l0aXplbnMsIHdhcyB0aGlzIHNhbWUgQWVzY2hpbmVzIHdobyB0byBkYXkgYmV3YWlscyB0aGUgc29ycm93cyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBUaGViYW5zIGFuZCByZWNpdGVzIHRoZWlyIHBpdGlmdWwgc3RvcnksIGJlaW5nIGhpbXNlbGYgZ3VpbHR5IG9mIHRob3NlIHNvcnJvd3MsCiAgICAgICAgICAgICAgICAgICAgZ3VpbHR5IG9mIHRoZSBkaXN0cmVzc2VzIG9mIHRoZSBQaG9jaWFucywgZ3VpbHR5IG9mIGFsbCB0aGUgc3VmZmVyaW5ncyBvZiBldmVyeQogICAgICAgICAgICAgICAgICAgIG5hdGlvbiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIFllcywgQWVzY2hpbmVzLAogICAgICAgICAgICAgICAgICAgIGJleW9uZCBhIGRvdWJ0LCB5b3UgYXJlIHNpbmNlcmVseSBncmlldmVkIGJ5IHRoYXQgdGFsZSBvZiB3b2UsIHlvdSBhcmUgd3J1bmcKICAgICAgICAgICAgICAgICAgICB3aXRoIHBpdHkgZm9yIHRoZSBwb29yIFRoZWJhbnMsIHlvdSwgd2hvIGhvbGQgZXN0YXRlcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+LCB5b3UsIHdobyB0aWxsIHRoZSBmYXJtcyB0aGF0IG9uY2UKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoZWlyczsgaXQgaXMgSSB3aG8gZXh1bHTigJRJLCB3aG8gd2FzIGF0IG9uY2UgY2xhaW1lZCBhcyBhIHZpY3RpbQogICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBwZXJwZXRyYXRvcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj50aGUgcGVycGV0cmF0b3I6IEFsZXhhbmRlciwKICAgICAgICAgICAgICAgICAgICAgICAgd2hvLCBpbiB0aGUgeWVhciA8ZGF0ZSBhdXRobmFtZT0iMzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIzMzUiPjMzNTwvZGF0ZT4sIGRlc3Ryb3llZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGFuZCB0aGVuIGRlbWFuZGVkIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0aGUgc3VycmVuZGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLiBTZWUgSW50cm9kLiBwLiA0Ljwvbm90ZT4gb2YgdGhvc2Ugd3JvbmdzISA8ZGF0ZSBhdXRobmFtZT0iMzM1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIzMzUiPjMzNTwvZGF0ZT4sIGRlc3Ryb3llZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGFuZCB0aGVuIGRlbWFuZGVkIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0aGUgc3VycmVuZGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLiBTZWUgSW50cm9kLiBwLiA0LjwvdHJhbnNsYXRpb24+"
translation['18.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGlncmVzc2VkIHRvIHRvcGljcyB0aGF0IHdpbGwgcGVyaGFwcyBiZSBtb3JlIGFwcHJvcHJpYXRlbHkgZGlzY3Vzc2VkIGxhdGVyIG9uLgogICAgICAgICAgICAgICAgICAgIEkgcmV0dXJuIHRvIG15IHByb29mIHRoYXQgdGhlIG1pc2RlZWRzIG9mIHRoZXNlIG1lbiBhcmUgdGhlIHJlYWwgY2F1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBzaXR1YXRpb24uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW4geW91IGhhZCBiZWVuIGRlbHVkZWQgYnkKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgdGhyb3VnaCB0aGUgYWdlbmN5IG9mIHRoZSBtZW4gd2hvIHRvb2sgaGlzIHBheSB3aGVuIG9uIGVtYmFzc3kgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBiYWNrIGZpY3RpdGlvdXMgcmVwb3J0cywgYW5kIHdoZW4gdGhlIHVuaGFwcHkgUGhvY2lhbnMgd2VyZSBsaWtld2lzZQogICAgICAgICAgICAgICAgICAgIGRlbHVkZWQsIGFuZCBhbGwgdGhlaXIgY2l0aWVzIGRlc3Ryb3llZCwgd2hhdCBoYXBwZW5lZD8gPC90cmFuc2xhdGlvbj4="
translation['18.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSB2aWxlIFRoZXNzYWxpYW5zIGFuZCB0aG9zZSBpbGwtY29uZGl0aW9uZWQKICAgICAgICAgICAgICAgICAgICBUaGViYW5zIHJlZ2FyZGVkIFBoaWxpcCBhcyB0aGVpciBmcmllbmQsIHRoZWlyIGJlbmVmYWN0b3IsIGFuZCB0aGVpciBkZWxpdmVyZXIuCiAgICAgICAgICAgICAgICAgICAgSGUgd2FzIGFsbCBpbiBhbGwgdG8gdGhlbTsgdGhleSB3b3VsZCBub3QgbGlzdGVuIHRvIHRoZSB2b2ljZSBvZiBhbnkgb25lIHdobwogICAgICAgICAgICAgICAgICAgIHNwb2tlIGlsbCBvZiBoaW0uIFlvdSBBdGhlbmlhbnMsIHRob3VnaCBzdXNwaWNpb3VzIGFuZCBkaXNzYXRpc2ZpZWQsIG9ic2VydmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIHRlcm1zIG9mIHBlYWNlLCBmb3IgeW91IGNvdWxkIGRvIG5vdGhpbmcuIFRoZSByZXN0IG9mIHRoZSBHcmVla3MsIHRob3VnaAogICAgICAgICAgICAgICAgICAgIHNpbWlsYXJseSBvdmVycmVhY2hlZCBhbmQgZGlzYXBwb2ludGVkLCBvYnNlcnZlZCB0aGUgcGVhY2U7IGFuZCB5ZXQgaW4gYSBzZW5zZQogICAgICAgICAgICAgICAgICAgIHRoZSB3YXIgYWdhaW5zdCB0aGVtIGhhZCBhbHJlYWR5IGJlZ3VuOyA8L3RyYW5zbGF0aW9uPg=="
translation['18.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5mb3IKICAgICAgICAgICAgICAgICAgICB3aGVuIFBoaWxpcCB3YXMgbW92aW5nIGhpdGhlciBhbmQgdGhpdGhlciwgc3ViZHVpbmcgSWxseXJpYW5zIGFuZCBUcmliYWxsaWFucywKICAgICAgICAgICAgICAgICAgICBhbmQgc29tZSBHcmVla3MgYXMgd2VsbCwgd2hlbiBoZSB3YXMgZ3JhZHVhbGx5IGdldHRpbmcgY29udHJvbCBvZiBsYXJnZSBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgIHJlc291cmNlcywgYW5kIHdoZW4gY2VydGFpbiBHcmVlayBjaXRpemVucywgaW5jbHVkaW5nIEFlc2NoaW5lcywgd2VyZSBhdmFpbGluZwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgb2YgdGhlIGxpYmVydHkgb2YgdGhlIHBlYWNlIHRvIHZpc2l0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiBhbmQgdGFrZSBicmliZXMsIGFsbCB0aGVzZSBtb3ZlbWVudHMgd2VyZSByZWFsbHkgYWN0cwogICAgICAgICAgICAgICAgICAgIG9mIHdhciB1cG9uIHRoZSBzdGF0ZXMgYWdhaW5zdCB3aGljaCBQaGlsaXAgd2FzIG1ha2luZyBoaXMgcHJlcGFyYXRpb25zLiBUaGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBmYWlsZWQgdG8gcGVyY2VpdmUgaXQgaXMgYW5vdGhlciBzdG9yeSwgYW5kIGRvZXMgbm90IGNvbmNlcm4gbWUuIDwvdHJhbnNsYXRpb24+"
translation['18.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5NeSBmb3JlYm9kaW5ncyBhbmQgZXhwb3N0dWxhdGlvbnMgd2VyZSB1bmNlYXNpbmc7IEkKICAgICAgICAgICAgICAgICAgICB1dHRlcmVkIHRoZW0gaW4gdGhlIEFzc2VtYmx5IGFuZCBpbiBldmVyeSBjaXR5IHRvIHdoaWNoIEkgd2FzIHNlbnQuIEJ1dCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0aWVzIHdlcmUgZGVtb3JhbGl6ZWQuIFRoZSBhY3RpdmUgcG9saXRpY2lhbnMgd2VyZSB2ZW5hbCBhbmQgY29ycnVwdGVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGhvcGUgb2YgbW9uZXk6IHRoZSB1bm9mZmljaWFsIGNsYXNzZXMgYW5kIHRoZSBwZW9wbGUgaW4gZ2VuZXJhbCB3ZXJlIGVpdGhlcgogICAgICAgICAgICAgICAgICAgIGJsaW5kIHRvIHRoZSBmdXR1cmUgb3IgZW5zbmFyZWQgYnkgdGhlIGxpc3RsZXNzbmVzcyBhbmQgaW5kb2xlbmNlIG9mIHRoZWlyIGRhaWx5CiAgICAgICAgICAgICAgICAgICAgbGlmZTsgaW4gYWxsIHRoZSBtYWxhZHkgaGFkIGdvbmUgc28gZmFyIHRoYXQgdGhleSBleHBlY3RlZCB0aGUgZGFuZ2VyIHRvIGRlc2NlbmQKICAgICAgICAgICAgICAgICAgICBhbnl3aGVyZSBidXQgdXBvbiB0aGVtc2VsdmVzLCBhbmQgZXZlbiBob3BlZCB0byBkZXJpdmUgdGhlaXIgc2VjdXJpdHkgYXQgd2lsbAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHBlcmlscyBvZiBvdGhlcnMuIDwvdHJhbnNsYXRpb24+"
translation['18.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgcmVzdWx0LCBvZgogICAgICAgICAgICAgICAgICAgIGNvdXJzZSwgdGhlIGV4Y2Vzc2l2ZSBhbmQgaW5vcHBvcnR1bmUgYXBhdGh5IG9mIHRoZSBjb21tb24gcGVvcGxlIGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHVuaXNoZWQgYnkgdGhlIGxvc3Mgb2YgdGhlaXIgaW5kZXBlbmRlbmNlLCB3aGlsZSB0aGVpciBsZWFkZXJzLCB3aG8gZmFuY2llZAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBzZWxsaW5nIGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZW1zZWx2ZXMsIGRpc2NvdmVyIHRvbyBsYXRlIHRoYXQgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgbGliZXJ0eSB3YXMgdGhlIGZpcnN0IHRoaW5nIHRoZXkgc29sZC4gSW5zdGVhZCBvZiB0aGUgbmFtZSBvZiB0cnVzdHkgZnJpZW5kLCBpbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgcmVqb2ljZWQgd2hlbiB0aGV5IHdlcmUgdGFraW5nIHRoZWlyIGJyaWJlcywgdGhleSBhcmUgZHViYmVkCiAgICAgICAgICAgICAgICAgICAgdG9hZC1lYXRlcnMgYW5kIHNjb3VuZHJlbHMsIGFuZCBvdGhlciBzdWl0YWJsZSBlcGl0aGV0cy4gV2hhdCBkaWQgdGhleSBleHBlY3Q/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5NZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpdCBpcyBub3QgYmVjYXVzZSBoZSB3YW50cyB0byBkbyBhIHRyYWl0b3IgYSBnb29kIHR1cm4KICAgICAgICAgICAgICAgICAgICB0aGF0IGEgbWFuIHNwZW5kcyBoaXMgbW9uZXk7IG5vciwgd2hlbiBoZSBoYXMgb25jZSBnb3Qgd2hhdCBoZSBwYWlkIGZvciwgaGFzIGhlCiAgICAgICAgICAgICAgICAgICAgYW55IGZ1cnRoZXIgdXNlIGZvciB0aGUgdHJhaXRvcidzIGNvdW5zZWxzLiBPdGhlcndpc2UgdHJlYXNvbiB3b3VsZCBiZSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHByb2ZpdGFibGUgb2YgYWxsIHRyYWRlcy4gQnV0IGl0IGlzIG5vdCBzby4gSG93IGNvdWxkIGl0IGJlPyBGYXIgZnJvbSBpdCEgQXMKICAgICAgICAgICAgICAgICAgICBzb29uIGFzIHRoZSBtYW4gd2hvIGdyYXNwcyBhdCBwb3dlciBoYXMgYWNoaWV2ZWQgaGlzIHB1cnBvc2UsIGhlIGlzIHRoZSBtYXN0ZXIKICAgICAgICAgICAgICAgICAgICBvZiB0aG9zZSB3aG8gc29sZCBoaW0gaGlzIG1hc3Rlcnk7IGFuZCB0aGVu4oCUeWVzLAogICAgICAgICAgICAgICAgICAgIHRoZW4h4oCUa25vd2luZyB0aGVpciBiYXNlbmVzcywgaGUgbG9hdGhlcyB0aGVtLCBtaXN0cnVzdHMgdGhlbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmV2aWxlcyB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5Mb29rIGF0IHRoZXNlIGluc3RhbmNlcywKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlLCB0aG91Z2ggdGhlIHJpZ2h0IHRpbWUgZm9yIGFjdGlvbiBpcyBwYXN0LCBmb3Igd2lzZSBtZW4gaXQgaXMgYWx3YXlzIHRoZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0IHRpbWUgdG8gdW5kZXJzdGFuZCBoaXN0b3J5LiBMYXN0aGVuZXMgd2FzIGhhaWxlZCBhcyBmcmllbmTigJR1bnRpbAogICAgICAgICAgICAgICAgICAgIGhlIGJldHJheWVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPjsgVGltb2xhdXMsCiAgICAgICAgICAgICAgICAgICAgdW50aWwgaGUgYnJvdWdodCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gdG8gcnVpbjsKICAgICAgICAgICAgICAgICAgICBFdWRpY3VzIGFuZCBTaW11cyBvZiBMYXJpc3NhLCB1bnRpbCB0aGV5IHB1dCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPiB1bmRlciBQaGlsaXAncyBoZWVsLiBTaW5jZSB0aGVuIHRoZSB3aG9sZSB3b3JsZCBoYXMKICAgICAgICAgICAgICAgICAgICBiZWNvbWUgY3Jvd2RlZCB3aXRoIG1lbiBleGlsZWQsIGluc3VsdGVkLCBwdW5pc2hlZCBpbiBldmVyeSBjb25jZWl2YWJsZSB3YXkuCiAgICAgICAgICAgICAgICAgICAgV2hhdCBvZiBBcmlzdHJhdHVzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDk4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwOTgiPlNpY3lvbjwvcGxhY2VOYW1lPj8gb3IKICAgICAgICAgICAgICAgICAgICAgICAgUGVyaWxhdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UGVyaWxhdXM6IHNvIE1TUy4gaGVyZSwgYW5kLCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhdGlvbnMsIGluIDI5NTsgYWNjb3JkaW5nIHRvIEdyZWVrIGxleGljb2dyYXBoZXJzIHRoZSBuYW1lIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBQZXJpbGx1cy48L25vdGU+IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNZWdhcmEiPk1lZ2FyYTwvcGxhY2VOYW1lPj8gQXJlCiAgICAgICAgICAgICAgICAgICAgdGhleSBub3Qgb3V0Y2FzdHM/IDwvdHJhbnNsYXRpb24+"
translation['18.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoZXNlIGV4YW1wbGVzIGl0IG1heQogICAgICAgICAgICAgICAgICAgIGJlIGNsZWFybHkgZGlzY2VybmVkIHRoYXQgdGhlIG1hbiB3aG8gaXMgbW9zdCB2aWdpbGFudCBpbiBkZWZlbmNlIG9mIGhpcyBjb3VudHJ5CiAgICAgICAgICAgICAgICAgICAgYW5kIG1vc3Qgdmlnb3JvdXMgaW4gaGlzIG9wcG9zaXRpb24gdG8gdHJlYXNvbuKAlGhlIGlzIHRoZSBtYW4sCiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzLCB3aG8gcHJvdmlkZXMgeW91IHRyYWl0b3JzIGFuZCBtZXJjZW5hcmllcyB3aXRoIHNvbWV0aGluZyB0aGF0IHlvdSBjYW4KICAgICAgICAgICAgICAgICAgICBiZXRyYXkgZm9yIGEgYnJpYmU7IGFuZCwgaWYgeW91IGFyZSBzdGlsbCBzZWN1cmUgYW5kIHN0aWxsIGRyYXdpbmcgeW91ciBwYXksIHlvdQogICAgICAgICAgICAgICAgICAgIG93ZSB0aGlzIHRvIHRoZSBncmVhdCBtYWpvcml0eSBvZiB0aGVzZSBjaXRpemVucywgYW5kIHRvIHRob3NlIHdobyB0aHdhcnRlZCB5b3VyCiAgICAgICAgICAgICAgICAgICAgcHVycG9zZXPigJRmb3IgeW91ciBvd24gZWZmb3J0cyB3b3VsZCBsb25nIGFnbyBoYXZlIGJyb3VnaHQgeW91IHRvCiAgICAgICAgICAgICAgICAgICAgZGVzdHJ1Y3Rpb24uIDwvdHJhbnNsYXRpb24+"
translation['18.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SQogICAgICAgICAgICAgICAgICAgIGNvdWxkIHNheSBtdWNoIG1vcmUgYWJvdXQgdGhlIGhpc3Rvcnkgb2YgdGhhdCB0aW1lLCBidXQgSSBzdXBwb3NlIHRoYXQgd2hhdCBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIHNhaWQgaXMgbW9yZSB0aGFuIGVub3VnaC4gTXkgYW50YWdvbmlzdCBpcyB0byBibGFtZSwgZm9yIGhlIGhhcyBzbwogICAgICAgICAgICAgICAgICAgIGJlc3BhdHRlcmVkIG1lIHdpdGggdGhlIHNvdXIgZHJlZ3Mgb2YgaGlzIG93biBrbmF2ZXJ5IGFuZCBoaXMgb3duIGNyaW1lcywgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgd2FzIG9ibGlnZWQgdG8gY2xlYXIgbXlzZWxmIGluIHRoZSBleWVzIG9mIG1lbiB0b28geW91bmcgdG8gcmVtZW1iZXIgdGhvc2UKICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbnMuIEJ1dCBpdCBoYXMgcGVyaGFwcyBiZWVuIHdlYXJpc29tZSB0byB5b3UsIHdobywgYmVmb3JlIEkgc2FpZCBhCiAgICAgICAgICAgICAgICAgICAgd29yZCwga25ldyBhbGwgYWJvdXQgaGlzIHZlbmFsaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZQogICAgICAgICAgICAgICAgICAgIGNhbGxzIGl0IGZyaWVuZHNoaXAgYW5kIGFtaXR5OyBhbmQgb25seSBqdXN0IG5vdyBoZSBzcG9rZSBvZiDigJx0aGUgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIHRhdW50cyBtZSB3aXRoIHRoZSBmcmllbmRzaGlwIG9mIEFsZXhhbmRlci7igJ0gSSB0YXVudCB5b3Ugd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBmcmllbmRzaGlwIG9mIEFsZXhhbmRlciEgV2hlcmUgZGlkIHlvdSBnZXQgaXQ/IEhvdyBkaWQgeW91IGVhcm4gaXQ/IEkgYW0gbm90IG91dAogICAgICAgICAgICAgICAgICAgIG9mIG15IG1pbmQsIGFuZCBJIHdvdWxkIG5ldmVyIGNhbGwgeW91IHRoZSBmcmllbmQgZWl0aGVyIG9mIFBoaWxpcCBvciBBbGV4YW5kZXIsCiAgICAgICAgICAgICAgICAgICAgdW5sZXNzIHdlIGFyZSB0byBjYWxsIGEgaGFydmVzdGVyIG9yIG90aGVyIGhpcmVkIGxhYm9yZXIgdGhlIGZyaWVuZCBvZiB0aGUgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIHBheXMgaGltIGZvciBoaXMgam9iLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgaXMgbm90IHNvLgogICAgICAgICAgICAgICAgICAgIEhvdyBjb3VsZCBpdCBiZT8gRmFyIGZyb20gaXQhIEkgY2FsbCB5b3UgUGhpbGlwJ3MgaGlyZWxpbmcgb2YgeWVzdGVyZGF5LCBhbmQKICAgICAgICAgICAgICAgICAgICBBbGV4YW5kZXIncyBoaXJlbGluZyBvZiB0b2RheSwgYW5kIHNvIGRvZXMgZXZlcnkgbWFuIGluIHRoaXMgQXNzZW1ibHkuIElmIHlvdQogICAgICAgICAgICAgICAgICAgIGRvdWJ0IG15IHdvcmQsIGFzayB0aGVtOyBvciByYXRoZXIgSSB3aWxsIGFzayB0aGVtIG15c2VsZi4gQ29tZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hhdCBkbyB5b3UgdGhpbms/IElzCiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzIEFsZXhhbmRlcidzIGhpcmVsaW5nLCBvciBBbGV4YW5kZXIncyBmcmllbmQ/IFlvdSBoZWFyIHdoYXQgdGhleSBzYXkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBwcm9wb3NlCiAgICAgICAgICAgICAgICAgICAgdGhlbiBhdCBsYXN0IHRvIGNvbWUgdG8gbXkgZGVmZW5jZSBhZ2FpbnN0IHRoZSBhY3R1YWwgaW5kaWN0bWVudCwgYW5kIHRvIGEKICAgICAgICAgICAgICAgICAgICByZWNpdGFsIG9mIG15IHB1YmxpYyBhY3RzLCB0aGF0IEFlc2NoaW5lcyBtYXkgaGVhciBmcm9tIG1lIHdoYXQgaGUga25vd3MKICAgICAgICAgICAgICAgICAgICBwZXJmZWN0bHkgd2VsbCwgdGhlIGdyb3VuZHMgb24gd2hpY2ggSSBjbGFpbSB0aGF0IEkgZGVzZXJ2ZSBldmVuIGxhcmdlciByZXdhcmRzCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aG9zZSBwcm9wb3NlZCBieSB0aGUgQ291bmNpbC4gUGxlYXNlIHRha2UgYW5kIHJlYWQgdGhlIGluZGljdG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJJbmRpY3RtZW50Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbmRpY3RtZW50PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0luCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhcmNob25zaGlwIG9mIENoYWVyb25kYXMsIG9uIHRoZSBzaXh0aCBkYXkgb2YgRWxhcGhlYm9saW9uLCBBZXNjaGluZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbiBvZiBBdHJvbWV0dXMsIG9mIENvdGhvY2lkYWUsIGluZGljdGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDAxNjEwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDE2MTAiPkN0ZXNpcGhvbjwvcGxhY2VOYW1lPiwgc29uIG9mIExlb3N0aGVuZXMsIG9mIEFuYXBobHlzdHVzLCBiZWZvcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEFyY2hvbiBmb3IgYSBicmVhY2ggb2YgdGhlIGNvbnN0aXR1dGlvbiwgaW4gdGhhdCBoZSBwcm9wb3NlZCBhbgogICAgICAgICAgICAgICAgICAgICAgICB1bmNvbnN0aXR1dGlvbmFsIGRlY3JlZSwgdG8gd2l0LCB0aGF0IERlbW9zdGhlbmVzLCBzb24gb2YgRGVtb3N0aGVuZXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBhZWFuaWEgc2hvdWxkIGJlIGNyb3duZWQgd2l0aCBhIGdvbGRlbiBjcm93biwgYW5kIHRoYXQgcHJvY2xhbWF0aW9uIHNob3VsZAogICAgICAgICAgICAgICAgICAgICAgICBiZSBtYWRlIGluIHRoZSB0aGVhdHJlIGF0IHRoZSBHcmVhdCBEaW9ueXNpYSwgd2hlbiB0aGUgbmV3IHRyYWdlZGllcyBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjZWQsIHRoYXQg4oCcdGhlIFBlb3BsZSBjcm93biBEZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLAogICAgICAgICAgICAgICAgICAgICAgICBvZiBQYWVhbmlhLCB3aXRoIGEgZ29sZGVuIGNyb3duIGZvciBoaXMgbWVyaXQgYW5kIGZvciB0aGUgZ29vZHdpbGwgd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICAgICAgaGFzIGNvbnN0YW50bHkgZGlzcGxheWVkIGJvdGggdG93YXJkcyBhbGwgdGhlIEdyZWVrcyBhbmQgdG93YXJkcyB0aGUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIGFsc28gZm9yIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzdGVhZGZhc3RuZXNzLCBhbmQgYmVjYXVzZSBoZSBoYXMgY29uc3RhbnRseSBieSB3b3JkIGFuZCBkZWVkIHByb21vdGVkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBiZXN0IGludGVyZXN0cyBvZiB0aGUgcGVvcGxlLCBhbmQgaXMgZm9yd2FyZCB0byBkbyB3aGF0ZXZlciBnb29kIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNhbizigJ08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkluZGljdG1lbnQ8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGFyY2hvbnNoaXAgb2YgQ2hhZXJvbmRhcywgb24gdGhlIHNpeHRoIGRheSBvZiBFbGFwaGVib2xpb24sIEFlc2NoaW5lcywKICAgICAgICAgICAgICAgICAgICAgICAgc29uIG9mIEF0cm9tZXR1cywgb2YgQ290aG9jaWRhZSwgaW5kaWN0ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYxMCI+Q3Rlc2lwaG9uPC9wbGFjZU5hbWU+LCBzb24gb2YgTGVvc3RoZW5lcywgb2YgQW5hcGhseXN0dXMsIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXJjaG9uIGZvciBhIGJyZWFjaCBvZiB0aGUgY29uc3RpdHV0aW9uLCBpbiB0aGF0IGhlIHByb3Bvc2VkIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHVuY29uc3RpdHV0aW9uYWwgZGVjcmVlLCB0byB3aXQsIHRoYXQgRGVtb3N0aGVuZXMsIHNvbiBvZiBEZW1vc3RoZW5lcywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGFlYW5pYSBzaG91bGQgYmUgY3Jvd25lZCB3aXRoIGEgZ29sZGVuIGNyb3duLCBhbmQgdGhhdCBwcm9jbGFtYXRpb24gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIG1hZGUgaW4gdGhlIHRoZWF0cmUgYXQgdGhlIEdyZWF0IERpb255c2lhLCB3aGVuIHRoZSBuZXcgdHJhZ2VkaWVzIGFyZQogICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWNlZCwgdGhhdCDigJx0aGUgUGVvcGxlIGNyb3duIERlbW9zdGhlbmVzLCBzb24gb2YgRGVtb3N0aGVuZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIFBhZWFuaWEsIHdpdGggYSBnb2xkZW4gY3Jvd24gZm9yIGhpcyBtZXJpdCBhbmQgZm9yIHRoZSBnb29kd2lsbCB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgICAgICBoYXMgY29uc3RhbnRseSBkaXNwbGF5ZWQgYm90aCB0b3dhcmRzIGFsbCB0aGUgR3JlZWtzIGFuZCB0b3dhcmRzIHRoZSBwZW9wbGUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgYWxzbyBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZWFkZmFzdG5lc3MsIGFuZCBiZWNhdXNlIGhlIGhhcyBjb25zdGFudGx5IGJ5IHdvcmQgYW5kIGRlZWQgcHJvbW90ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3QgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUsIGFuZCBpcyBmb3J3YXJkIHRvIGRvIHdoYXRldmVyIGdvb2QgaGUKICAgICAgICAgICAgICAgICAgICAgICAgY2FuLOKAnTwvdHJhbnNsYXRpb24+"
translation['18.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPmFsbCB0aGVzZSBwcm9wb3NhbHMKICAgICAgICAgICAgICAgICAgICAgICAgYmVpbmcgZmFsc2UgYW5kIHVuY29uc3RpdHV0aW9uYWwsIGluYXNtdWNoIGFzIHRoZSBsYXdzIGZvcmJpZCwgZmlyc3QsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBlbnRyeSBvZiBmYWxzZSBzdGF0ZW1lbnRzIGluIHRoZSBwdWJsaWMgcmVjb3Jkczsgc2Vjb25kbHksIHRoZSBjcm93bmluZyBvZgogICAgICAgICAgICAgICAgICAgICAgICBvbmUgbGlhYmxlIHRvIGF1ZGl0IO+8iG5vdyBEZW1vc3RoZW5lcyBpcyBDb21taXNzaW9uZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgRm9ydGlmaWNhdGlvbnMgYW5kIGEgdHJ1c3RlZSBvZiB0aGUgVGhlYXRyaWNhbCBGdW5k77yJOyB0aGlyZGx5LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2xhbWF0aW9uIG9mIHRoZSBjcm93biBpbiB0aGUgVGhlYXRyZSBhdCB0aGUgRGlvbnlzaWEgdGhlIGRheSBvZiB0aGUgbmV3CiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWdlZGllczsgYnV0IGlmIHRoZSBjcm93bmluZyBpcyBieSB0aGUgQ291bmNpbCwgaXQgc2hhbGwgYmUgcHJvY2xhaW1lZCBpbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQ291bmNpbC1ob3VzZSwgaWYgYnkgdGhlIFN0YXRlLCBpbiB0aGUgQXNzZW1ibHkgb24gdGhlIFBueXguIEZpbmUKICAgICAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQ6IGZpZnR5IHRhbGVudHMuIFdpdG5lc3NlcyB0byBzdW1tb25zOiBDZXBoaXNvcGhvbiwgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIENlcGhpc29waG9uLCBvZiBSaGFtbnVzLCBDbGVvbiwgc29uIG9mIENsZW9uLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBDb3Rob2NpZGFlLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgYXJlIHRoZQogICAgICAgICAgICAgICAgICAgIGNsYXVzZXMgb2YgdGhlIGRlY3JlZSBhZ2FpbnN0IHdoaWNoIHRoaXMgcHJvc2VjdXRpb24gaXMgZGlyZWN0ZWQ7IGJ1dCBmcm9tIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgdmVyeSBjbGF1c2VzIEkgaG9wZSB0byBwcm92ZSB0byB5b3VyIHNhdGlzZmFjdGlvbiB0aGF0IEkgaGF2ZSBhbiBob25lc3QgZGVmZW5jZQogICAgICAgICAgICAgICAgICAgIHRvIG9mZmVyLiBGb3IgSSB3aWxsIHRha2UgdGhlIGNoYXJnZXMgb25lIGJ5IG9uZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dG9yLCB3aXRob3V0IGFueSBpbnRlbnRpb25hbCBvbWlzc2lvbi4gPC90cmFuc2xhdGlvbj4="
translation['18.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGFrZSBmaXJzdCB0aGUgY2xhdXNlIHdoaWNoIHJlY2l0ZXMgdGhhdCBpbiB3b3JkIGFuZCBkZWVkIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGNvbnN0YW50bHkgZG9uZSBteSBiZXN0IGZvciB0aGUgY29tbW9uIHdlYWwsIGFuZCB0aGF0IEkgYW0gZXZlciB6ZWFsb3VzIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBnb29kIGluIG15IHBvd2VyLCBhbmQgd2hpY2ggY29tbWVuZHMgbWUgb24gdGhvc2UgZ3JvdW5kcy4gWW91ciBqdWRnZW1lbnQKICAgICAgICAgICAgICAgICAgICBvbiB0aGF0IGNsYXVzZSBtdXN0LCBJIHRha2UgaXQsIGRlcGVuZCBzaW1wbHkgb24gbXkgcHVibGljIGFjdHMsIGJ5IGV4YW1pbmluZwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSB3aWxsIGRpc2NvdmVyIHdoZXRoZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYxMCI+Q3Rlc2lwaG9uPC9wbGFjZU5hbWU+IGhhcyBnaXZlbiBhIHRydWUgYW5kIHByb3Blciwgb3IgYSBmYWxzZSwgZGVzY3JpcHRpb24KICAgICAgICAgICAgICAgICAgICBvZiBteSBjb25kdWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgaGlzIHByb3Bvc2luZyB0aGF0IGEKICAgICAgICAgICAgICAgICAgICBjcm93biBzaG91bGQgYmUgZ2l2ZW4gdG8gbWUsIGFuZCB0aGUgZGVjb3JhdGlvbiBwcm9jbGFpbWVkIGluIHRoZSBUaGVhdHJlLAogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgYWRkaW5nIHRoZSB3b3Jkcywg4oCccHJvdmlkZWQgaGUgc2hhbGwgZmlyc3QgaGF2ZSByZW5kZXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBhY2NvdW50cyzigJ0gSSBjb25jZWl2ZSB0aGF0IHRoYXQgYWxzbyBpcyByZWxhdGVkIHRvIG15IHB1YmxpYyBhY3RzLAogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgSSBhbSwgb3IgYW0gbm90LCB3b3J0aHkgb2YgdGhlIGNyb3duIGFuZCBvZiB0aGUgcHJvY2xhbWF0aW9uIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGU7IGJ1dCBJIGhhdmUsIGhvd2V2ZXIsIGFsc28gdG8gY2l0ZSB0aGUgc3RhdHV0ZXMgdGhhdCBhdXRob3JpemUgc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwuIEluIHRoaXMgd2F5LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIGFtIHJlc29sdmVkIHRvIG9mZmVyIGFuIGhvbmVzdCBhbmQgc3RyYWlnaHRmb3J3YXJkCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZS4gSSB3aWxsIHByb2NlZWQgYXQgb25jZSB0byB0aGUgaGlzdG9yeSBvZiBteSBvd24gYWN0aW9uczsgPC90cmFuc2xhdGlvbj4="
translation['18.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgbGV0IG5vIG9uZSBpbWFnaW5lIHRoYXQgSSBhbSBzdHJheWluZyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGluZGljdG1lbnQgaWYgSSB0b3VjaCB1cG9uIEhlbGxlbmljIHBvbGljeSBhbmQgSGVsbGVuaWMgcXVlc3Rpb25zOyBmb3IgYnkKICAgICAgICAgICAgICAgICAgICBhdHRhY2tpbmcgYXMgbWVuZGFjaW91cyB0aGF0IGNsYXVzZSBvZiB0aGUgZGVjcmVlIHdoaWNoIGFsbGVnZXMgdGhhdCBpbiB3b3JkIGFuZAogICAgICAgICAgICAgICAgICAgIGRlZWQgSSBoYXZlIGFjdGVkIGZvciB0aGUgY29tbW9uIGdvb2QsIGl0IGlzIEFlc2NoaW5lcyB3aG8gaGFzIG1hZGUgYSBkaXNjdXNzaW9uCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHdob2xlIG9mIG15IHB1YmxpYyBsaWZlIG5lY2Vzc2FyeSBhbmQgcGVydGluZW50IHRvIHRoZSBpbmRpY3RtZW50LgogICAgICAgICAgICAgICAgICAgIEZ1cnRoZXIsIG91dCBvZiBtYW55IHNwaGVyZXMgb2YgcHVibGljIGFjdGl2aXR5IEkgY2hvc2UgSGVsbGVuaWMgYWZmYWlycyBhcyBteQogICAgICAgICAgICAgICAgICAgIHByb3ZpbmNlLCBhbmQgdGhlcmVmb3JlIEkgYW0ganVzdGlmaWVkIGluIHRha2luZyBIZWxsZW5pYyBwb2xpY3kgYXMgdGhlIGJhc2lzIG9mCiAgICAgICAgICAgICAgICAgICAgbXkgZGVtb25zdHJhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['18.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgSSBwYXNzIGJ5IHRob3NlIHN1Y2Nlc3NlcyB3aGljaCBQaGlsaXAgYWNoaWV2ZWQgYW5kIG1haW50YWluZWQKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgSSBiZWNhbWUgYSBwb2xpdGljaWFuIGFuZCBhIHB1YmxpYyBzcGVha2VyLCBhcyBJIGRvIG5vdCB0aGluayB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBjb25jZXJuIG1lLiBJIHdpbGwsIGhvd2V2ZXIsIHJlbWluZCB5b3Ugb2YgZW50ZXJwcmlzZXMgb2YgaGlzIHdoaWNoIHdlcmUKICAgICAgICAgICAgICAgICAgICB0aHdhcnRlZCBhZnRlciB0aGUgZGF5IG9uIHdoaWNoIEkgZW50ZXJlZCBwdWJsaWMgbGlmZS4gT2YgdGhlc2UgSSB3aWxsIHJlbmRlciBhbgogICAgICAgICAgICAgICAgICAgIGFjY291bnQsIHByZW1pc2luZyBvbmx5IHRoYXQgUGhpbGlwIHN0YXJ0ZWQgd2l0aCB0aGlzIGVub3Jtb3VzIGFkdmFudGFnZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBhbGwgdGhlIEdyZWVrIHN0YXRlc+KAlG5vdCBpbgogICAgICAgICAgICAgICAgICAgIHNvbWUgYnV0IGluIGV2ZXJ5IG9uZSBvZiB0aGVt4oCUaXQgY2hhbmNlZCB0aGF0IHRoZXJlIGhhZCBzcHJ1bmcgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBhYnVuZGFudCBjcm9wIG9mIHRyYWl0b3JvdXMsIHZlbmFsLCBhbmQgcHJvZmxpZ2F0ZSBwb2xpdGljaWFucyBldmVyIGtub3duCiAgICAgICAgICAgICAgICAgICAgd2l0aGluIHRoZSBtZW1vcnkgb2YgbWFua2luZC4gVGhlc2UgcGVyc29ucyBQaGlsaXAgYWRvcHRlZCBhcyBoaXMgc2F0ZWxsaXRlcyBhbmQKICAgICAgICAgICAgICAgICAgICBhY2NvbXBsaWNlcy4gVGhlIGRpc3Bvc2l0aW9uIG9mIEdyZWVrcyB0b3dhcmRzIG9uZSBhbm90aGVyIHdhcyBhbHJlYWR5IHZpY2lvdXMKICAgICAgICAgICAgICAgICAgICBhbmQgcXVhcnJlbHNvbWUgYW5kIGhlIG1hZGUgaXQgd29yc2UuIFNvbWUgaGUgY2Fqb2xlZDsgc29tZSBoZSBicmliZWQ7IHNvbWUgaGUKICAgICAgICAgICAgICAgICAgICBjb3JydXB0ZWQgaW4gZXZlcnkgcG9zc2libGUgd2F5LiBIZSBzcGxpdCB0aGVtIGludG8gbWFueSBmYWN0aW9ucywgYWx0aG91Z2ggYWxsCiAgICAgICAgICAgICAgICAgICAgaGFkIG9uZSBjb21tb24gaW50ZXJlc3TigJR0byB0aHdhcnQgaGlzIGFnZ3JhbmRpemVtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgc2VlaW5nIHRoYXQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB3YXMgaW4gc3VjaCBhIHBsaWdodCwgYW5kIHN0aWxsIHVuY29uc2Npb3VzIG9mIGEKICAgICAgICAgICAgICAgICAgICBnYXRoZXJpbmcgYW5kIGV2ZXItZ3Jvd2luZyBldmlsLCB3aGF0IHdhcyB0aGUgcmlnaHQgcG9saWN5IGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gYWRvcHQsIGFuZCB0aGUgcmlnaHQgYWN0aW9uIGZvcgogICAgICAgICAgICAgICAgICAgIGhlciB0byB0YWtlPyBUaGF0IGlzIHRoZSBxdWVzdGlvbiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hpY2ggeW91IG91Z2h0IHRvIGNvbnNpZGVyLCBhbmQgdGhhdCBpcyB0aGUgaXNzdWUgb24KICAgICAgICAgICAgICAgICAgICB3aGljaCBJIG91Z2h0IHRvIGJlIGNhbGxlZCB0byBhY2NvdW50OyBmb3IgSSB3YXMgdGhlIG1hbiB3aG8gdG9vayB1cCBhIGZpcm0KICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiBpbiB0aGF0IGRlcGFydG1lbnQgb2YgeW91ciBwdWJsaWMgYWZmYWlycy4gPC90cmFuc2xhdGlvbj4="
translation['18.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5XYXMgaXQgdGhlIGR1dHkgb2Ygb3VyIGNpdHksIEFlc2NoaW5lcywgdG8gYWJhc2UgaGVyIHByaWRlLCB0byBsb3dlcgogICAgICAgICAgICAgICAgICAgIGhlciBkaWduaXR5LCB0byByYW5rIGhlcnNlbGYgd2l0aCBUaGVzc2FsaWFucyBhbmQgRG9sb3BpYW5zLCB0byBoZWxwIFBoaWxpcCB0bwogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaCBoaXMgc3VwcmVtYWN5IG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCB0bwogICAgICAgICAgICAgICAgICAgIGFubmloaWxhdGUgdGhlIGdsb3JpZXMgYW5kIHRoZSBwcmVyb2dhdGl2ZXMgb2Ygb3VyIGZvcmVmYXRoZXJzPyBPciwgaWYgc2hlCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0ZWQgdGhhdCB0cnVseSBzaGFtZWZ1bCBwb2xpY3ksIHdhcyBzaGUgdG8gc3RhbmQgYnkgYW5kIHBlcm1pdCBhZ2dyZXNzaW9ucwogICAgICAgICAgICAgICAgICAgIHdoaWNoIHNoZSBtdXN0IGhhdmUgbG9uZyBmb3Jlc2VlbiwgYW5kIGtuZXcgd291bGQgc3VjY2VlZCBpZiBub25lIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGludGVydmVuZT8gPC90cmFuc2xhdGlvbj4="
translation['18.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5JIHdvdWxkIG5vdyBsaWtlIHRvIGFzayB0aGUgbWFuIHdobwogICAgICAgICAgICAgICAgICAgIGNlbnN1cmVzIG91ciBwYXN0IGNvbmR1Y3QgbW9zdCBzZXZlcmVseSwgd2hhdCBwYXJ0eSBoZSB3b3VsZCBoYXZlIHdpc2hlZCBvdXIKICAgICAgICAgICAgICAgICAgICBjaXR5IHRvIGpvaW4uIFRoZSBwYXJ0eSB0aGF0IHNoYXJlcyB0aGUgZ3VpbHQgb2YgYWxsIHRoZSBkaXNhc3RlcnMgYW5kIGRpc2hvbm9ycwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGF2ZSBiZWZhbGxlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4s4oCUdGhlIHBhcnR5LCBhcyBvbmUgbWF5IHNheSwgb2YgdGhlIFRoZXNzYWxpYW5zIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGFzc29jaWF0ZXM/IE9yIHRoYXQgd2hpY2ggcGVybWl0dGVkIHRob3NlIGRpc2FzdGVycyBpbiB0aGUgaG9wZSBvZiBzZWxmaXNoCiAgICAgICAgICAgICAgICAgICAgZ2FpbiwgdGhlIHBhcnR5IGluIHdoaWNoIHdlIG1heSBpbmNsdWRlIHRoZSBBcmNhZGlhbnMsIHRoZSBNZXNzZW5pYW5zLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgQXJnaXZlcz8gPC90cmFuc2xhdGlvbj4="
translation['18.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5XaHksIHRoZSBmYXRlIG9mIG1hbnksIGluZGVlZCBvZiBhbGwsCiAgICAgICAgICAgICAgICAgICAgb2YgdGhvc2UgbmF0aW9ucyBpcyB3b3JzZSB0aGFuIG91cnMuIEZvciBpZiwgYWZ0ZXIgaGlzIHZpY3RvcnksIFBoaWxpcCBoYWQgYXQKICAgICAgICAgICAgICAgICAgICBvbmNlIHRha2VuIGhpbXNlbGYgb2ZmLCBhbmQgcmVsYXBzZWQgaW50byBpbmFjdGl2aXR5LCBoYXJhc3NpbmcgbmVpdGhlciBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgYWxsaWVzIG5vciBhbnkgb3RoZXIgR3JlZWtzLCB0aGVyZSBtaWdodCBoYXZlIGJlZW4gc29tZSByZWFzb24gZm9yIGZpbmRpbmcgZmF1bHQKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBvcHBvbmVudHMgb2YgaGlzIGVudGVycHJpc2VzOyBidXQgc2VlaW5nIHRoYXQsIHdoZXJldmVyIGhlIGNvdWxkLCBoZQogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3llZCB0aGUgcHJlc3RpZ2UsIHRoZSBhdXRob3JpdHksIHRoZSBpbmRlcGVuZGVuY2UsIGFuZCBldmVuIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN0aXR1dGlvbiBvZiBldmVyeSBjaXR5IGFsaWtlLCB3aG8gY2FuIGRlbnkgdGhhdCB5b3UgY2hvc2UgdGhlIG1vc3QgaG9ub3IKICAgICAgICAgICAgICAgICAgICBhYmxlIG9mIGFsbCBwb2xpY2llcyB3aGVuIHlvdSBmb2xsb3dlZCBteSBhZHZpY2U/IDwvdHJhbnNsYXRpb24+"
translation['18.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcmVzdW1lIG15IGFyZ3VtZW50OiBJIGFzayB5b3UsCiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzLCB3aGF0IHdhcyB0aGUgZHV0eSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2hlbiBzaGUgcGVyY2VpdmVkIHRoYXQgUGhpbGlwJ3MgcHVycG9zZSB3YXMgdG8KICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2ggYSBkZXNwb3RpYyBlbXBpcmUgb3ZlciBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+PyBXaGF0IGxhbmd1YWdlLCB3aGF0IGNvdW5zZWxzLCB3ZXJlIGluY3VtYmVudCB1cG9uIGFuCiAgICAgICAgICAgICAgICAgICAgYWR2aXNlciBvZiB0aGUgcGVvcGxlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgb2YKICAgICAgICAgICAgICAgICAgICBhbGwgcGxhY2VzIGluIHRoZSB3b3JsZCwgd2hlbiBJIHdhcyBjb25zY2lvdXMgdGhhdCwgZnJvbSB0aGUgZGF3biBvZiBoZXIgaGlzdG9yeQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBkYXkgd2hlbiBJIGZpcnN0IGFzY2VuZGVkIHRoZSB0cmlidW5lLCBvdXIgY291bnRyeSBoYWQgZXZlciBzdHJpdmVuIGZvcgogICAgICAgICAgICAgICAgICAgIHByaW1hY3ksIGFuZCBob25vciwgYW5kIHJlbm93biwgYW5kIHRoYXQgdG8gc2VydmUgYW4gaG9ub3IgYWJsZSBhbWJpdGlvbiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIHdlbGZhcmUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IHNoZSBoYWQKICAgICAgICAgICAgICAgICAgICBleHBlbmRlZCBoZXIgdHJlYXN1cmUgYW5kIHRoZSBsaXZlcyBvZiBoZXIgc29ucyBmYXIgbW9yZSBnZW5lcm91c2x5IHRoYW4gYW55CiAgICAgICAgICAgICAgICAgICAgb3RoZXIgSGVsbGVuaWMgc3RhdGUgZmlnaHRpbmcgb25seSBmb3IgaXRzZWxmOyA8L3RyYW5zbGF0aW9uPg=="
translation['18.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQga25vd2luZyBhcyBJIGRpZCB0aGF0IG91ciBhbnRhZ29uaXN0IFBoaWxpcCBoaW1zZWxmLCBjb250ZW5kaW5nIGZvciBlbXBpcmUKICAgICAgICAgICAgICAgICAgICBhbmQgc3VwcmVtYWN5LCBoYWQgZW5kdXJlZCB0aGUgbG9zcyBvZiBoaXMgZXllLCB0aGUgZnJhY3R1cmUgb2YgaGlzIGNvbGxhci1ib25lLAogICAgICAgICAgICAgICAgICAgIHRoZSBtdXRpbGF0aW9uIG9mIGhpcyBoYW5kIGFuZCBoaXMgbGVnLCBhbmQgd2FzIHJlYWR5IHRvIHNhY3JpZmljZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lIG9mIHdhciBhbnkgYW5kIGV2ZXJ5IHBhcnQgb2YgaGlzIGJvZHksIGlmIG9ubHkgdGhlIGxpZmUgb2YgdGhlIHNoYXR0ZXJlZAogICAgICAgICAgICAgICAgICAgIHJlbW5hbnQgc2hvdWxkIGJlIGEgbGlmZSBvZiBob25vciBhbmQgcmVub3duPyA8L3RyYW5zbGF0aW9uPg=="
translation['18.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHkgbm8gbWFuIHdpbGwgZGFyZSB0byBjYWxsIGl0IGJlY29taW5nIHRoYXQgaW4gYSBtYW4gcmVhcmVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGVsbGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBlbGxhIj5QZWxsYTwvcGxhY2VOYW1lPiwgdGhlbiBhIG1lYW4gYW5kIGluc2lnbmlmaWNhbnQgY2l0eSwKICAgICAgICAgICAgICAgICAgICBzdWNoIGxvZnR5IGFtYml0aW9uIHNob3VsZCBiZSBpbm5hdGUgYXMgdG8gY292ZXQgdGhlIGRvbWluaW9uIG9mIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIGFuZCBhZG1pdCB0aGF0IGFzcGlyYXRpb24gdG8gaGlzIHNvdWwsCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgeW91LCBuYXRpdmVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBvYnNlcnZpbmcgZGF5IGJ5IGRheSwgaW4gZXZlcnkgc3BlZWNoIHlvdSBoZWFyIGFuZCBpbGwgZXZlcnkgc3BlY3RhY2xlIHlvdQogICAgICAgICAgICAgICAgICAgIGJlaG9sZCwgbWVtb3JpYWxzIG9mIHRoZSBoaWdoIHByb3dlc3Mgb2YgeW91ciBmb3JlZmF0aGVycywgc2hvdWxkIHNpbmsgdG8gc3VjaAogICAgICAgICAgICAgICAgICAgIGNvd2FyZGljZSBhcyBieSBhIHNwb250YW5lb3VzLCB2b2x1bnRhcnkgYWN0IHRvIHN1cnJlbmRlciB5b3VyIGxpYmVydHkgdG8gYQogICAgICAgICAgICAgICAgICAgIFBoaWxpcC4gPC90cmFuc2xhdGlvbj4="
translation['18.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5ObyBvbmUgd2lsbCBtYWtlIHRoYXQgYXNzZXJ0aW9uLiBUaGUKICAgICAgICAgICAgICAgICAgICBvbmx5IHJlbWFpbmluZywgYW5kIHRoZSBuZWNlc3NhcnksIHBvbGljeSB3YXMgdG8gcmVzaXN0IHdpdGgganVzdGljZSBhbGwgaGlzCiAgICAgICAgICAgICAgICAgICAgdW5qdXN0IGRlc2lnbnMuIFRoYXQgcG9saWN5IHdhcyBhZG9wdGVkIGJ5IHlvdSBmcm9tIHRoZSBzdGFydCBpbiBhIHNwaXJpdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2VsbCBiZWNhbWUgeW91LCBhbmQgZm9yd2FyZGVkIGJ5IG1lIGluIGFsbCBteSBwcm9wb3NhbHMsIGFjY29yZGluZyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0aWVzIG9mIG15IHB1YmxpYyBsaWZlLiBJIGFkbWl0IHRoZSBjaGFyZ2UuIFRlbGwgbWU7IHdoYXQgb3VnaHQgSSB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgZG9uZT8gSSBwdXQgdGhlIHF1ZXN0aW9uIHRvIHlvdSwgQWVzY2hpbmVzLCBkaXNtaXNzaW5nIGZvciB0aGUgbW9tZW50CiAgICAgICAgICAgICAgICAgICAgZXZlcnl0aGluZyBlbHNl4oCUPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB5ZG5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQeWRuYSI+UHlkbmE8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCBIYWxvbm5lc3VzLiBJIGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICByZWNvbGxlY3Rpb24gb2YgdGhvc2UgcGxhY2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5TZXJyaXVtLAogICAgICAgICAgICAgICAgICAgIERvcmlzY3VzLCB0aGUgc2FjayBvZiBQZXBhcmV0aHVzLCBhbmQgYWxsIG90aGVyIGluanVyaWVzIG9mIG91ciBjaXR54oCUSQogICAgICAgICAgICAgICAgICAgIGlnbm9yZSB0aGVtIHV0dGVybHkuIFlldCB5b3UgdG9sZCB1cyB0aGF0IEkgZW50YW5nbGVkIHRoZSBjaXRpemVucyBpbiBhIHF1YXJyZWwKICAgICAgICAgICAgICAgICAgICBieSBteSB0YWxrIGFib3V0IHRob3NlIHBsYWNlcywgdGhvdWdoIGV2ZXJ5IHJlc29sdXRpb24gdGhhdCBjb25jZXJuZWQgdGhlbSB3YXMKICAgICAgICAgICAgICAgICAgICBtb3ZlZCBieSBFdWJ1bHVzLCBvciBBcmlzdG9waG9uLCBvciBEaW9wZWl0aGVzLCBub3QgYnkgbWU7IG9ubHkgeW91IGFsbGVnZSBzbwogICAgICAgICAgICAgICAgICAgIGdsaWJseSB3aGF0ZXZlciBzdWl0cyB5b3VyIHB1cnBvc2UhIDwvdHJhbnNsYXRpb24+"
translation['18.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5FdmVuIG5vdyBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3QgZGlzY3VzcyB0aGVtLiBCdXQgaGVyZSB3YXMgYSBtYW4gYW5uZXhpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGFuZCBtYWtpbmcgaXQgYSBiYXNpcyBvZiBvcGVyYXRpb25zIGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCBhdHRhY2tpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2FyYSI+TWVnYXJhPC9wbGFjZU5hbWU+LCBvY2N1cHlpbmcgT3JldXMsIGRlbW9saXNoaW5nCiAgICAgICAgICAgICAgICAgICAgUG9ydGhtdXMsIGVzdGFibGlzaGluZyB0aGUgdHlyYW5ueSBvZiBQaGlsaXN0aWRlcyBhdCBPcmV1cyBhbmQgb2YgQ2xlaXRhcmNodXMgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFcmV0cmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFcmV0cmlhIj5FcmV0cmlhPC9wbGFjZU5hbWU+LCBzdWJqdWdhdGluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiwgYmVzaWVnaW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPiwgZGVzdHJveWluZyBzb21lIG9mIHRoZSBHcmVlawogICAgICAgICAgICAgICAgICAgIGNpdGllcywgcmVpbnN0YXRpbmcgZXhpbGVkIHRyYWl0b3JzIGluIG90aGVyczogYnkgdGhlc2UgYWN0cyB3YXMgaGUsIG9yIHdhcyBoZQogICAgICAgICAgICAgICAgICAgIG5vdCwgY29tbWl0dGluZyBpbmp1c3RpY2UsIGJyZWFraW5nIHRyZWF0eSwgYW5kIHZpb2xhdGluZyB0aGUgdGVybXMgb2YgcGVhY2U/CiAgICAgICAgICAgICAgICAgICAgV2FzIGl0LCBvciB3YXMgaXQgbm90LCByaWdodCB0aGF0IHNvbWUgbWFuIG9mIEdyZWNpYW4gcmFjZSBzaG91bGQgc3RhbmQgZm9yd2FyZAogICAgICAgICAgICAgICAgICAgIHRvIHN0b3AgdGhvc2UgYWdncmVzc2lvbnM/IDwvdHJhbnNsYXRpb24+"
translation['18.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5JZiBpdCB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgcmlnaHQsIGlmIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB3YXMgdG8gcHJlc2VudCB0aGUKICAgICAgICAgICAgICAgICAgICBzcGVjdGFjbGUsIGFzIHRoZSBwaHJhc2UgZ29lcywgb2YgdGhlIGxvb3Rpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NDgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc0OCI+TXlzaWE8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPmxvb3Rpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NDgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc0OCI+TXlzaWE8L3BsYWNlTmFtZT4sIGJ5IHBpcmF0ZXM7IHRoZSBwcm92ZXJiaWFsIGV4YW1wbGUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgY293YXJkbHkgbm9uLXJlc2lzdGFuY2UuPC9ub3RlPiB3aGlsZSBBdGhlbmlhbnMgc3RpbGwgbGl2ZWQgYW5kIGJyZWF0aGVkLAogICAgICAgICAgICAgICAgICAgIHRoZW4gSSBhbSBhIGJ1c3lib2R5LCBiZWNhdXNlIEkgc3Bva2Ugb2YgdGhvc2UgbWF0dGVycywgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NzQ4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY3NDgiPk15c2lhPC9wbGFjZU5hbWU+LCBieSBwaXJhdGVzOyB0aGUgcHJvdmVyYmlhbCBleGFtcGxlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGNvd2FyZGx5IG5vbi1yZXNpc3RhbmNlLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG9vLCBpcyBhIGJ1c3lib2R5IGJlY2F1c2Ugc2hlCiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZWQgdG8gbWU7IGFuZCBsZXQgYWxsIGhlciBtaXNkZWVkcyBhbmQgYmx1bmRlcnMgYmUgY2hhcmdlZCB0byBteSBhY2NvdW50IQogICAgICAgICAgICAgICAgICAgIEJ1dCBpZiBpdCB3YXMgcmlnaHQgdGhhdCBzb21lIG9uZSBzaG91bGQgaW50ZXJ2ZW5lLCBvbiB3aG9tIGRpZCB0aGUgZHV0eSBmYWxsLAogICAgICAgICAgICAgICAgICAgIGlmIG5vdCBvbiB0aGUgQXRoZW5pYW4gZGVtb2NyYWN5PyBUaGF0IHRoZW4gd2FzIG15IHBvbGljeS4gSSBzYXcgYSBtYW4gZW5zbGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYWxsIG1hbmtpbmQsIGFuZCBJIHN0b29kIGluIGhpcyB3YXkuIEkgbmV2ZXIgY2Vhc2VkIHdhcm5pbmcgeW91IGFuZCBhZG1vbmlzaGluZwogICAgICAgICAgICAgICAgICAgIHlvdSB0byBzdXJyZW5kZXIgbm90aGluZy4gPC90cmFuc2xhdGlvbj4="
translation['18.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHBlYWNlIHdhcyBicm9rZW4gYnkgUGhpbGlwLCB3aGVuIGhlIHNlaXplZCB0aG9zZQogICAgICAgICAgICAgICAgICAgIG1lcmNoYW50bWVuOyBub3QgYnkgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcy4gUHJvZHVjZSB0aGUgZGVjcmVlcywgYW5kIFBoaWxpcCdzIGxldHRlciwgYW5kIHJlYWQgdGhlbSBpbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIHByb3BlciBvcmRlci4gVGhleSB3aWxsIHNob3cgd2hvIHdhcyByZXNwb25zaWJsZSBmb3IgZWFjaCBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlIGFyY2hvbnNoaXAgb2YgTmVvY2xlcywgaW4gdGhlIG1vbnRoIEJvZWRyb21pb24sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0IGFuIGV4dHJhb3JkaW5hcnkgbWVldGluZyBvZiB0aGUgQXNzZW1ibHkgY29udmVuZWQgYnkgdGhlIEdlbmVyYWxzLAogICAgICAgICAgICAgICAgICAgICAgICBFdWJ1bHVzLCBzb24gb2YgTW5lc2l0aGV1cywgb2YgQ29wcnVzLCBwcm9wb3NlZCB0aGF0LCB3aGVyZWFzIHRoZSBnZW5lcmFscwogICAgICAgICAgICAgICAgICAgICAgICBoYXZlIGFubm91bmNlZCBpbiB0aGUgYXNzZW1ibHkgdGhhdCB0aGUgYWRtaXJhbCBMZW9kYW1hcyBhbmQgdGhlIHR3ZW50eQogICAgICAgICAgICAgICAgICAgICAgICBzaGlwcyB1bmRlciBoaXMgY29tbWFuZCwgc2VudCB0byB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiB0byBjb252b3kgY29ybiwgaGF2ZSBiZWVuIHJlbW92ZWQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjcxNSI+TWFjZWRvbjwvcGxhY2VOYW1lPiBieSBQaGlsaXAncyBvZmZpY2VyLCBBbXludGFzLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHRoZXJlIGtlcHQgaW4gY3VzdG9keSwgaXQgc2hhbGwgYmUgdGhlIGNvbmNlcm4gb2YgdGhlIHByZXNpZGVudHMgYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBnZW5lcmFscyB0aGF0IHRoZSBDb3VuY2lsIGJlIGNvbnZlbmVkIGFuZCBhbWJhc3NhZG9ycyBjaG9zZW4gdG8gZ28gdG8KICAgICAgICAgICAgICAgICAgICAgICAgUGhpbGlwOzwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0luIHRoZSBhcmNob25zaGlwIG9mIE5lb2NsZXMsIGluIHRoZSBtb250aCBCb2Vkcm9taW9uLAogICAgICAgICAgICAgICAgICAgICAgICBhdCBhbiBleHRyYW9yZGluYXJ5IG1lZXRpbmcgb2YgdGhlIEFzc2VtYmx5IGNvbnZlbmVkIGJ5IHRoZSBHZW5lcmFscywKICAgICAgICAgICAgICAgICAgICAgICAgRXVidWx1cywgc29uIG9mIE1uZXNpdGhldXMsIG9mIENvcHJ1cywgcHJvcG9zZWQgdGhhdCwgd2hlcmVhcyB0aGUgZ2VuZXJhbHMKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBhbm5vdW5jZWQgaW4gdGhlIGFzc2VtYmx5IHRoYXQgdGhlIGFkbWlyYWwgTGVvZGFtYXMgYW5kIHRoZSB0d2VudHkKICAgICAgICAgICAgICAgICAgICAgICAgc2hpcHMgdW5kZXIgaGlzIGNvbW1hbmQsIHNlbnQgdG8gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4gdG8gY29udm95IGNvcm4sIGhhdmUgYmVlbiByZW1vdmVkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzE1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MTUiPk1hY2Vkb248L3BsYWNlTmFtZT4gYnkgUGhpbGlwJ3Mgb2ZmaWNlciwgQW15bnRhcywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZSB0aGVyZSBrZXB0IGluIGN1c3RvZHksIGl0IHNoYWxsIGJlIHRoZSBjb25jZXJuIG9mIHRoZSBwcmVzaWRlbnRzIGFuZCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZ2VuZXJhbHMgdGhhdCB0aGUgQ291bmNpbCBiZSBjb252ZW5lZCBhbmQgYW1iYXNzYWRvcnMgY2hvc2VuIHRvIGdvIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxpcDs8L3RyYW5zbGF0aW9uPg=="
translation['18.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPnRoYXQgb24gdGhlaXIgYXJyaXZhbAogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IHNoYWxsIGNvbmZlciB3aXRoIGhpbSBhYm91dCB0aGUgc2VpenVyZSBvZiB0aGUgYWRtaXJhbCBhbmQgdGhlIHNoaXBzCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgc29sZGllcnMsIGFuZCwgaWYgQW15bnRhcyBhY3RlZCBpbiBpZ25vcmFuY2UsIHRoZXkgc2hhbGwgc2F5IHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBlb3BsZSBhdHRhY2ggbm8gYmxhbWUgdG8gaGltOyBvciwgaWYgdGhlIGFkbWlyYWwgd2FzIGNhdWdodCBleGNlZWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIGluc3RydWN0aW9ucywgdGhhdCB0aGUgQXRoZW5pYW5zIHdpbGwgaW52ZXN0aWdhdGUgdGhlIG1hdHRlciwgYW5kIHB1bmlzaAogICAgICAgICAgICAgICAgICAgICAgICBoaW0gYXMgaGlzIGNhcmVsZXNzbmVzcyBzaGFsbCBkZXNlcnZlOyBpZiwgb24gdGhlIG90aGVyIGhhbmQsIG5laXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlc2Ugc3VwcG9zaXRpb25zIGlzIHRydWUsIGJ1dCBpdCB3YXMgYSBkZWxpYmVyYXRlIGFmZnJvbnQgb24gdGhlIHBhcnQKICAgICAgICAgICAgICAgICAgICAgICAgZWl0aGVyIG9mIHRoZSBvZmZpY2VyIG9yIG9mIGhpcyBzdXBlcmlvciwgdGhleSBzaGFsbCBzdGF0ZSB0aGUgc2FtZSwgaW4KICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCB0aGUgcGVvcGxlLCBiZWluZyBhcHByaXNlZCBvZiBpdCwgbWF5IGRlY2lkZSB3aGF0IGNvdXJzZSB0bwogICAgICAgICAgICAgICAgICAgICAgICB0YWtlLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBkZWNyZWUgd2FzCiAgICAgICAgICAgICAgICAgICAgZHJhd24gdXAgYnkgRXVidWx1cywgbm90IGJ5IG1lOyB0aGUgbmV4dCBpbiBvcmRlciBieSBBcmlzdG9waG9uOyB0aGVuIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBIZWdlc2lwcHVzLCB0aGVuIEFyaXN0b3Bob24gYWdhaW4sIHRoZW4gUGhpbG9jcmF0ZXMsIHRoZW4gQ2VwaGlzb3Bob24sIGFuZCBzbwogICAgICAgICAgICAgICAgICAgIG9uLiBJIHByb3Bvc2VkIG5vIGRlY3JlZSBkZWFsaW5nIHdpdGggdGhlc2UgbWF0dGVycy4gR28gb24gcmVhZGluZy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgYXJjaG9uc2hpcCBvZiBOZW9jbGVzLCBvbiB0aGUgdGhpcnRpZXRoIGRheSBvZgogICAgICAgICAgICAgICAgICAgICAgICBCb2Vkcm9taW9uLCBieSBzYW5jdGlvbiBvZiB0aGUgQ291bmNpbCwgdGhlIFByZXNpZGVudHMgYW5kIEdlbmVyYWxzCiAgICAgICAgICAgICAgICAgICAgICAgIGludHJvZHVjZWQgdGhlIHJlcG9ydCBvZiB0aGUgcHJvY2VlZGluZ3MgaW4gdGhlIEFzc2VtYmx5LCB0byB3aXQsIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFBlb3BsZSBoYWQgcmVzb2x2ZWQgdGhhdCBhbWJhc3NhZG9ycyBiZSBjaG9zZW4gdG8gYXBwcm9hY2ggUGhpbGlwIGNvbmNlcm5pbmcKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJlbW92YWwgb2YgdGhlIHZlc3NlbHMsIGFuZCBpbnN0cnVjdGlvbnMgYmUgZ2l2ZW4gdGhlbSBpbiBhY2NvcmRhbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGRlY3JlZXMgb2YgdGhlIEFzc2VtYmx5LiBUaGUgZm9sbG93aW5nIHdlcmUgY2hvc2VuOiBDZXBoaXNvcGhvbiwKICAgICAgICAgICAgICAgICAgICAgICAgc29uIG9mIENsZW9uLCBvZiBBbmFwaGx5c3R1cywgRGVtb2NyaXR1cywgc29uIG9mIERlbW9waG9uLCBvZiBBbmFneXJ1cywKICAgICAgICAgICAgICAgICAgICAgICAgUG9seWNyaXR1cywgc29uIG9mIEFwZW1hbnR1cywgb2YgQ290aG9jaWRhZS4gSW4gdGhlIHByZXNpZGVuY2Ugb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIEhpcHBvdGhvbnRpcywgcHJvcG9zZWQgYnkgQXJpc3RvcGhvbiwgb2YgQ29sbHl0dXMsIGEKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2lkZW50Ll08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgYXJjaG9uc2hpcCBvZiBOZW9jbGVzLCBvbiB0aGUgdGhpcnRpZXRoIGRheSBvZgogICAgICAgICAgICAgICAgICAgICAgICBCb2Vkcm9taW9uLCBieSBzYW5jdGlvbiBvZiB0aGUgQ291bmNpbCwgdGhlIFByZXNpZGVudHMgYW5kIEdlbmVyYWxzCiAgICAgICAgICAgICAgICAgICAgICAgIGludHJvZHVjZWQgdGhlIHJlcG9ydCBvZiB0aGUgcHJvY2VlZGluZ3MgaW4gdGhlIEFzc2VtYmx5LCB0byB3aXQsIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFBlb3BsZSBoYWQgcmVzb2x2ZWQgdGhhdCBhbWJhc3NhZG9ycyBiZSBjaG9zZW4gdG8gYXBwcm9hY2ggUGhpbGlwIGNvbmNlcm5pbmcKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJlbW92YWwgb2YgdGhlIHZlc3NlbHMsIGFuZCBpbnN0cnVjdGlvbnMgYmUgZ2l2ZW4gdGhlbSBpbiBhY2NvcmRhbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGRlY3JlZXMgb2YgdGhlIEFzc2VtYmx5LiBUaGUgZm9sbG93aW5nIHdlcmUgY2hvc2VuOiBDZXBoaXNvcGhvbiwKICAgICAgICAgICAgICAgICAgICAgICAgc29uIG9mIENsZW9uLCBvZiBBbmFwaGx5c3R1cywgRGVtb2NyaXR1cywgc29uIG9mIERlbW9waG9uLCBvZiBBbmFneXJ1cywKICAgICAgICAgICAgICAgICAgICAgICAgUG9seWNyaXR1cywgc29uIG9mIEFwZW1hbnR1cywgb2YgQ290aG9jaWRhZS4gSW4gdGhlIHByZXNpZGVuY2Ugb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIEhpcHBvdGhvbnRpcywgcHJvcG9zZWQgYnkgQXJpc3RvcGhvbiwgb2YgQ29sbHl0dXMsIGEKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2lkZW50Ll08L3RyYW5zbGF0aW9uPg=="
translation['18.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgSSBjaXRlIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlcywgQWVzY2hpbmVzLCB5b3UgbXVzdCBjaXRlIHNvbWUgZGVjcmVlIGJ5IHByb3Bvc2luZyB3aGljaCBJIGJlY2FtZQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpYmxlIGZvciB0aGUgd2FyLiBCdXQgeW91IGNhbm5vdCBjaXRlIG9uZTsgaWYgeW91IGNvdWxkLCB0aGVyZSBpcyBubwogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50IHdoaWNoIHlvdSB3b3VsZCBoYXZlIHByb2R1Y2VkIG1vcmUgcmVhZGlseSBqdXN0IG5vdy4gV2h5LCBldmVuIFBoaWxpcCdzCiAgICAgICAgICAgICAgICAgICAgbGV0dGVyIGNhc3RzIG5vIGJsYW1lIHVwb24gbWUgaW4gcmVzcGVjdCBvZiB0aGUgd2FyOiBoZSBpbXB1dGVzIGl0IHRvIG90aGVyIG1lbi4KICAgICAgICAgICAgICAgICAgICBSZWFkIFBoaWxpcCdzIGFjdHVhbCBsZXR0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['18.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXIiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltQaGlsaXAsIEtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCB0byB0aGUgQ291bmNpbCBhbmQgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZ3JlZXRpbmcu4oCUWW91cgogICAgICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycywgQ2VwaGlzb3Bob24gYW5kIERlbW9jcml0dXMgYW5kIFBvbHljcml0dXMsIHZpc2l0ZWQgbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2N1c3NlZCB0aGUgcmVsZWFzZSBvZiB0aGUgdmVzc2VscyBjb21tYW5kZWQgYnkgTGVvZGFtYXMuIE5vdywgc3BlYWtpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbGx5LCBpdCBzZWVtcyB0byBtZSB0aGF0IHlvdSB3aWxsIGJlIHZlcnkgc2ltcGxlIHBlb3BsZSBpZiB5b3UgaW1hZ2luZQogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IEkgZG8gbm90IGtub3cgdGhhdCB0aGUgdmVzc2VscyB3ZXJlIHNlbnQgb3N0ZW5zaWJseSB0byBjb252ZXkgY29ybiBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMTczIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTExNzMiPkxlbW5vczwvcGxhY2VOYW1lPiwgYnV0IHJlYWxseSB0byBoZWxwIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBTZWx5bWJyaWFucywgd2hvIGFyZSBiZWluZyBiZXNpZWdlZCBieSBtZSBhbmQgYXJlIG5vdCBpbmNsdWRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYXJ0aWNsZXMgb2YgZnJpZW5kc2hpcCBtdXR1YWxseSBhZ3JlZWQgdXBvbiBiZXR3ZWVuIHVzLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W1BoaWxpcCwgS2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIHRvIHRoZSBDb3VuY2lsIGFuZCBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBncmVldGluZy7igJRZb3VyCiAgICAgICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzLCBDZXBoaXNvcGhvbiBhbmQgRGVtb2NyaXR1cyBhbmQgUG9seWNyaXR1cywgdmlzaXRlZCBtZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgZGlzY3Vzc2VkIHRoZSByZWxlYXNlIG9mIHRoZSB2ZXNzZWxzIGNvbW1hbmRlZCBieSBMZW9kYW1hcy4gTm93LCBzcGVha2luZwogICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmFsbHksIGl0IHNlZW1zIHRvIG1lIHRoYXQgeW91IHdpbGwgYmUgdmVyeSBzaW1wbGUgcGVvcGxlIGlmIHlvdSBpbWFnaW5lCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgSSBkbyBub3Qga25vdyB0aGF0IHRoZSB2ZXNzZWxzIHdlcmUgc2VudCBvc3RlbnNpYmx5IHRvIGNvbnZleSBjb3JuIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTExNzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTE3MyI+TGVtbm9zPC9wbGFjZU5hbWU+LCBidXQgcmVhbGx5IHRvIGhlbHAgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFNlbHltYnJpYW5zLCB3aG8gYXJlIGJlaW5nIGJlc2llZ2VkIGJ5IG1lIGFuZCBhcmUgbm90IGluY2x1ZGVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhcnRpY2xlcyBvZiBmcmllbmRzaGlwIG11dHVhbGx5IGFncmVlZCB1cG9uIGJldHdlZW4gdXMuPC90cmFuc2xhdGlvbj4="
translation['18.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPlRoZXNlIGluc3RydWN0aW9ucwogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIGdpdmVuIHRvIHRoZSBhZG1pcmFsLCB3aXRob3V0IHRoZSBjb2duaXphbmNlIG9mIHRoZSBBdGhlbmlhbiBQZW9wbGUsIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRhaW4gb2ZmaWNpYWxzIGFuZCBieSBvdGhlcnMgd2hvIGFyZSBub3cgb3V0IG9mIG9mZmljZSwgYnV0IHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGFueGlvdXMgYnkgZXZlcnkgbWVhbnMgaW4gdGhlaXIgcG93ZXIgdG8gY2hhbmdlIHRoZSBwcmVzZW50IGZyaWVuZGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGl0dWRlIG9mIHRoZSBwZW9wbGUgdG93YXJkcyBtZSB0byBvbmUgb2Ygb3BlbiBob3N0aWxpdHksIGJlaW5nIGluZGVlZAogICAgICAgICAgICAgICAgICAgICAgICBtdWNoIG1vcmUgemVhbG91cyBmb3IgdGhpcyBjb25zdW1tYXRpb24gdGhhbiBmb3IgdGhlIHJlbGllZiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgU2VseW1icmlhbnMuIFRoZXkgY29uY2VpdmUgdGhhdCBzdWNoIGEgcG9saWN5IHdpbGwgYmUgYSBzb3VyY2Ugb2YgaW5jb21lIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXM7IGl0IGRvZXMgbm90LCBob3dldmVyLCBzdHJpa2UgbWUgYXMgcHJvZml0YWJsZSBlaXRoZXIgZm9yIHlvdSBvcgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbWUuIFRoZXJlZm9yZSB0aGUgdmVzc2VscyBub3cgaW4gbXkgaGFyYm9ycyBJIGhlcmVieSByZWxlYXNlIHRvIHlvdTsgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZnV0dXJlLCBpZiwgaW5zdGVhZCBvZiBwZXJtaXR0aW5nIHlvdXIgc3RhdGVzbWVuIHRvIHB1cnN1ZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG1hbGljaW91cyBwb2xpY3ksIHlvdSB3aWxsIGJlIGdvb2QgZW5vdWdoIHRvIGMgZW5zdXJlIHRoZW0sIEkgdG9vIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgZW5kZWF2b3IgdG8gcHJlc2VydmUgdGhlIHBlYWNlLiBGYXJld2VsbC5dPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhpcyBsZXR0ZXIKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBubyBtZW50aW9uIG9mIHRoZSBuYW1lIG9mIERlbW9zdGhlbmVzLCBub3IgYW55IGNoYXJnZSBhZ2FpbnN0IG1lLiBXaHkKICAgICAgICAgICAgICAgICAgICBkb2VzIGhlIGZvcmdldCBteSBhY3RzLCB3aGVuIGhlIGJsYW1lcyBvdGhlcnM/IEJlY2F1c2UgaGUgY291bGQgbm90IG1lbnRpb24gbWUKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHJlY2FsbGluZyBoaXMgb3duIHRyYW5zZ3Jlc3Npb25zLCBvbiB3aGljaCBJIGZpeGVkIG15IGF0dGVudGlvbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSBzdHJvdmUgdG8gcmVzaXN0LiBJIGJlZ2FuIGJ5IHByb3Bvc2luZyB0aGUgZW1iYXNzeSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzdXM8L3BsYWNlTmFtZT4sIHdoZW4gZmlyc3QgaGUgdHJpZWQgdG8gZ2V0IGEKICAgICAgICAgICAgICAgICAgICBmb290aW5nIHRoZXJlOyB0aGVuIHRoZSBlbWJhc3N5IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgd2hlbiBoZSB3YXMgdGFtcGVyaW5nIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+OyB0aGVuIGFuIGV4cGVkaXRpb27igJQgbm90IGFuCiAgICAgICAgICAgICAgICAgICAgZW1iYXNzeeKAlHRvIE9yZXVzLCBhbmQgYWdhaW4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFcmV0cmlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFcmV0cmlhIj5FcmV0cmlhPC9wbGFjZU5hbWU+LCB3aGVuIGhlIGhhZCBzZXQgdXAgdHlyYW50cyBpbiB0aG9zZSBjaXRpZXMuIDwvdHJhbnNsYXRpb24+"
translation['18.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5TdWJzZXF1ZW50bHkgSSBkaXNwYXRjaGVkIGFsbCB0aG9zZSBzcXVhZHJvbnMgYnkKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTAzNDUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDM0NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiB3YXMgcmVzY3VlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgaGltLCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+LCBhbmQgYWxsIG91cgogICAgICAgICAgICAgICAgICAgIGFsbGllcy4gQnkgdGhpcyBwb2xpY3kgeW91IGdhaW5lZCBtdWNoIGdsb3J5LCByZWNlaXZpbmcgY29tbWVuZGF0aW9ucywgZXVsb2dpZXMsCiAgICAgICAgICAgICAgICAgICAgY29tcGxpbWVudHMsIGRlY29yYXRpb25zLCBhbmQgdm90ZXMgb2YgdGhhbmtzIGZyb20gdGhlIHJlY2lwaWVudHMgb2YgeSBvdXIKICAgICAgICAgICAgICAgICAgICBmYXZvcnMuIE9mIHRoZSBuYXRpb25zIHRoYXQgc3VmZmVyZWQgYWdncmVzc2lvbiwgdGhvc2Ugd2hvIGZvbGxvd2VkIHlvdXIgYWR2aWNlCiAgICAgICAgICAgICAgICAgICAgZ2FpbmVkIHRoZWlyIHNhbHZhdGlvbiwgd2hpbGUgdGhvc2Ugd2hvIHNjb3JuZWQgaXQgaGF2ZSBoYWQgbWFueSBvY2Nhc2lvbnMgc2luY2UKICAgICAgICAgICAgICAgICAgICB0byByZW1lbWJlciB5b3VyIHdhcm5pbmdzLCBhbmQgdG8gYWNrbm93bGVkZ2Ugbm90IG9ubHkgeW91ciBnb29kd2lsbCBidXQgeW91cgogICAgICAgICAgICAgICAgICAgIHNhZ2FjaXR5IGFuZCBmb3Jlc2lnaHQsIGZvciBldmVyeXRoaW5nIGhhcyB0dXJuZWQgb3V0IGFzIHlvdSBwcmVkaWN0ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhhdCBQaGlsaXN0aWRlcyB3b3VsZCBoYXZlIHBhaWQgYQogICAgICAgICAgICAgICAgICAgIGxhcmdlIHN1bSBmb3IgcG9zc2Vzc2lvbiBvZiBPcmV1cywgYW5kIENsZWl0YXJjaHVzIGZvciBwb3NzZXNzaW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRXJldHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRXJldHJpYSI+RXJldHJpYTwvcGxhY2VOYW1lPiwgYW5kIFBoaWxpcCBoaW1zZWxmIHRvIGdldCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZXMgb2YgcG9zaXRpb24gYWdhaW5zdCB5b3UsIG9yIHRvIGVzY2FwZSBjb252aWN0aW9uIGluIG90aGVyIG1hdHRlcnMgb3IKICAgICAgICAgICAgICAgICAgICBhbnkgaW5xdWlyeSBpbnRvIGhpcyB3cm9uZ2RvaW5nIGluIGV2ZXJ5IHF1YXJ0ZXIsIGlzIHdlbGwga25vd24gdG8KICAgICAgICAgICAgICAgICAgICBhbGzigJRhbmQgdG8gbm8gb25lIGJldHRlciB0aGFuIHRvIHlvdSwgQWVzY2hpbmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGFtYmFzc2Fkb3JzIHdobyBjYW1lIGhlcmUgZnJvbSBDbGVpdGFyY2h1cwogICAgICAgICAgICAgICAgICAgIGFuZCBQaGlsaXN0aWRlcyBsb2RnZWQgYXQgeW91ciBob3VzZSBhbmQgeW91IGVudGVydGFpbmVkIHRoZW0uIFRoZSBnb3Zlcm5tZW50CiAgICAgICAgICAgICAgICAgICAgZXhwZWxsZWQgdGhlbSBhcyBlbmVtaWVzLCBhbmQgYXMgbWVuIHdob3NlIHByb3Bvc2FscyB3ZXJlIGRpc2hvbmVzdCBhbmQKICAgICAgICAgICAgICAgICAgICB1bmFjY2VwdGFibGU7IGJ1dCB0byB5b3UgdGhleSB3ZXJlIGZyaWVuZHMuIFdlbGwsIG5vIHBhcnQgb2YgdGhlaXIgYnVzaW5lc3Mgd2FzCiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzc2Z1bCzigJR5b3UgYmFja2JpdGVyLCB3aG8gdGVsbCBtZSB0aGF0IEkgaG9sZCBteSB0b25ndWUgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgZmVlIGluIG15IHBvY2tldCwgYW5kIGNyeSBhbG91ZCB3aGVuIEkgaGF2ZSBzcGVudCBpdCEgVGhhdCBpcyBub3QgeW91ciBoYWJpdDsKICAgICAgICAgICAgICAgICAgICB5b3UgY3J5IGFsb3VkIHdpdGhvdXQgY2Vhc2luZywgYW5kIG5vdGhpbmcgd2lsbCBldmVyIHN0b3AgeW91cgogICAgICAgICAgICAgICAgICAgIG1vdXRoLOKAlGV4Y2VwdCBwZXJoYXBzIGEgc2VudGVuY2Ugb2YgZGlzZnJhbmNoaXNlbWVudCB0aGlzIHZlcnkgZGF5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWx0aG91Z2ggYXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRpbWUgeW91IGRlY29yYXRlZCBtZSBmb3IgbXkgc2VydmljZXMsIGFsdGhvdWdoIEFyaXN0b25pY3VzIGRyYWZ0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGluIHRoZSB2ZXJ5IHNhbWUgdGVybXMgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMTYxMCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAxNjEwIj5DdGVzaXBob248L3BsYWNlTmFtZT4gaGFzIG5vdyB1c2VkLCBhbHRob3VnaCB0aGUgZGVjb3JhdGlvbiB3YXMgcHJvY2xhaW1lZAogICAgICAgICAgICAgICAgICAgIGluIHRoZSB0aGVhdHJlLCBzbyB0aGF0IHRoaXMgaXMgdGhlIHNlY29uZCBwcm9jbGFtYXRpb24gb2YgbXkgbmFtZSB0aGVyZSwKICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMsIHdobyB3YXMgcHJlc2VudCwgbmV2ZXIgb3Bwb3NlZCB0aGUgZGVjcmVlLCBub3IgZGlkIGhlIGluZGljdCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wb3Nlci4gVGFrZSBhbmQgcmVhZCB0aGUgZGVjcmVlIGluIHF1ZXN0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgYXJjaG9uc2hpcCBvZiBDaGFlcm9uZGFzLCBzb24gb2YgSGVnZW1vbiwgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHR3ZW50eS1maWZ0aCBkYXkgb2YgR2FtZWxpb24sIHRoZSB0cmliZSBMZW9udGlzIGhvbGRpbmcgdGhlIHByZXNpZGVuY3ksCiAgICAgICAgICAgICAgICAgICAgICAgIEFyaXN0b25pY3VzIG9mIFBocmVhcnJpaSBwcm9wb3NlZCB0aGF0LCB3aGVyZWFzIERlbW9zdGhlbmVzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMsIG9mIFBhZWFuaWEsIGhhcyBjb25mZXJyZWQgbWFueSBncmVhdCBvYmxpZ2F0aW9ucyBvbiB0aGUgUGVvcGxlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIGhhcyBhaWRlZCBtYW55IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBBbGxpZXMgYnkgaGlzIGRlY3JlZXMgYm90aCBoZXJldG9mb3JlIGFuZCB1cG9uIHRoZSBwcmVzZW50IG9jY2FzaW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgaGFzIGxpYmVyYXRlZCBzb21lIG9mIHRoZSBjaXRpZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+LCBhbmQgaXMgYSBjb25zdGFudCBmcmllbmQgb2YgdGhlIEF0aGVuaWFuIFBlb3BsZSwKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGJ5IHdvcmQgYW5kIGRlZWQgZG9lcyBoaXMgdXRtb3N0IGluIHRoZSBpbnRlcmVzdHMgb2YgdGhlIEF0aGVuaWFucwogICAgICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGFzIHdlbGwgYXMgb2YgdGhlIG90aGVyIEdyZWVrcywgaXQgYmUgcmVzb2x2ZWQgYnkgdGhlIENvdW5jaWwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gY29tbWVuZAogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLCBvZiBQYWVhbmlhLCBhbmQgdG8gY3Jvd24gaGltIHdpdGggYSBnb2xkZW4KICAgICAgICAgICAgICAgICAgICAgICAgY3Jvd24sIGFuZCB0byBwcm9jbGFpbSB0aGUgY3Jvd24gaW4gdGhlIFRoZWF0cmUgYXQgdGhlIERpb255c2lhIGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZSBvZiB0aGUgbmV3IHRyYWdlZGllcywgdGhlIHByb2NsYW1hdGlvbiBvZiB0aGUgY3Jvd24gYmVpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZW50cnVzdGVkIHRvIHRoZSB0cmliZSBob2xkaW5nIHRoZSBwcmVzaWRlbmN5IGFuZCB0byB0aGUgc3Rld2FyZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZmVzdGl2YWwuIFByb3Bvc2VkIGJ5IEFyaXN0b25pY3VzIG9mIFBocmVhcnJpaS5dPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlIGFyY2hvbnNoaXAgb2YgQ2hhZXJvbmRhcywgc29uIG9mIEhlZ2Vtb24sIG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0d2VudHktZmlmdGggZGF5IG9mIEdhbWVsaW9uLCB0aGUgdHJpYmUgTGVvbnRpcyBob2xkaW5nIHRoZSBwcmVzaWRlbmN5LAogICAgICAgICAgICAgICAgICAgICAgICBBcmlzdG9uaWN1cyBvZiBQaHJlYXJyaWkgcHJvcG9zZWQgdGhhdCwgd2hlcmVhcyBEZW1vc3RoZW5lcywgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLCBvZiBQYWVhbmlhLCBoYXMgY29uZmVycmVkIG1hbnkgZ3JlYXQgb2JsaWdhdGlvbnMgb24gdGhlIFBlb3BsZQogICAgICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCBoYXMgYWlkZWQgbWFueSBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQWxsaWVzIGJ5IGhpcyBkZWNyZWVzIGJvdGggaGVyZXRvZm9yZSBhbmQgdXBvbiB0aGUgcHJlc2VudCBvY2Nhc2lvbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGhhcyBsaWJlcmF0ZWQgc29tZSBvZiB0aGUgY2l0aWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwgYW5kIGlzIGEgY29uc3RhbnQgZnJpZW5kIG9mIHRoZSBBdGhlbmlhbiBQZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBieSB3b3JkIGFuZCBkZWVkIGRvZXMgaGlzIHV0bW9zdCBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBBdGhlbmlhbnMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhcyB3ZWxsIGFzIG9mIHRoZSBvdGhlciBHcmVla3MsIGl0IGJlIHJlc29sdmVkIGJ5IHRoZSBDb3VuY2lsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvIGNvbW1lbmQKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMsIHNvbiBvZiBEZW1vc3RoZW5lcywgb2YgUGFlYW5pYSwgYW5kIHRvIGNyb3duIGhpbSB3aXRoIGEgZ29sZGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3duLCBhbmQgdG8gcHJvY2xhaW0gdGhlIGNyb3duIGluIHRoZSBUaGVhdHJlIGF0IHRoZSBEaW9ueXNpYSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcGVyZm9ybWFuY2Ugb2YgdGhlIG5ldyB0cmFnZWRpZXMsIHRoZSBwcm9jbGFtYXRpb24gb2YgdGhlIGNyb3duIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ1c3RlZCB0byB0aGUgdHJpYmUgaG9sZGluZyB0aGUgcHJlc2lkZW5jeSBhbmQgdG8gdGhlIHN0ZXdhcmQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZlc3RpdmFsLiBQcm9wb3NlZCBieSBBcmlzdG9uaWN1cyBvZiBQaHJlYXJyaWkuXTwvdHJhbnNsYXRpb24+"
translation['18.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXMgYW55IG9uZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdSBhd2FyZSBvZiBhbnkgZGlzaG9ub3IsIGNvbnRlbXB0LCBvciByaWRpY3VsZSB0aGF0IGhhcyBiZWZhbGxlbiB0aGUgY2l0eSBpbgogICAgICAgICAgICAgICAgICAgIGNvbnNlcXVlbmNlIG9mIHRoYXQgZGVjcmVlLCBzdWNoIGFzIGhlIG5vdyB0ZWxscyB5b3Ugd2lsbCBmb2xsb3csIGlmIEkgYW0KICAgICAgICAgICAgICAgICAgICBjcm93bmVkPyBXaGlsZSBhY3RzIGFyZSBzdGlsbCByZWNlbnQgYW5kIG5vdG9yaW91cywgdGhleSBhcmUgcmVxdWl0ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGdyYXRpdHVkZSwgaWYgZ29vZCwgYW5kIHdpdGggcHVuaXNobWVudCwgaWYgZXZpbCwgYW5kIGZyb20gdGhpcyBkZWNyZWUgaXQKICAgICAgICAgICAgICAgICAgICBhcHBlYXJzIHRoYXQgSSByZWNlaXZlZCBvbiB0aGF0IG9jY2FzaW9uIGdyYXRpdHVkZSwgbm90IGNlbnN1cmUgbm9yIHB1bmlzaG1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlLAogICAgICAgICAgICAgICAgICAgIHVwIHRvIHRoZSBkYXRlIG9mIHRob3NlIHRyYW5zYWN0aW9ucyBpdCBpcyBzaG93biBieSBjb21tb24gY29uc2VudCB0aGF0IG15CiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCB3YXMgZW50aXJlbHkgYmVuZWZpY2lhbCB0byB0aGUgY29tbW9ud2VhbHRoLiBUaGUgcHJvb2ZzIGFyZSwgdGhhdCBteQogICAgICAgICAgICAgICAgICAgIHNwZWVjaGVzIGFuZCBtb3Rpb25zIHdlcmUgc3VjY2Vzc2Z1bCBhdCB5b3VyIGRlbGliZXJhdGlvbnM7IHRoYXQgbXkgcmVzb2x1dGlvbnMKICAgICAgICAgICAgICAgICAgICB3ZXJlIGNhcnJpZWQgaW50byBlZmZlY3Q7IHRoYXQgdGhlcmVieSBkZWNvcmF0aW9ucyBjYW1lIHRvIHRoZSBjaXR5IGFuZCB0byBhbGwKICAgICAgICAgICAgICAgICAgICBvZiB5b3UgYXMgd2VsbCBhcyB0byBtZTsgYW5kIHRoYXQgZm9yIHRoZXNlIHN1Y2Nlc3NlcyB5b3UgdGhhbmtlZCB0aGUgZ29kcyB3aXRoCiAgICAgICAgICAgICAgICAgICAgc2FjcmlmaWNlcyBhbmQgcHJvY2Vzc2lvbnMuIDwvdHJhbnNsYXRpb24+"
translation['18.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBQaGlsaXAgd2FzIGRyaXZlbiBvdXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGJ5IHlvdXIgYXJtcywgYW5kCiAgICAgICAgICAgICAgICAgICAgYWxzbyzigJR0aG91Z2ggdGhlc2UgbWVuIGNob2tlIHRoZW1zZWx2ZXMgd2l0aCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRlbmlhbHMs4oCUYnkgbXkgcG9saWN5IGFuZCBteSBkZWNyZWVzLCBoZSBjYXN0IGFib3V0IGZvciBhIHNlY29uZCBwbGFuCiAgICAgICAgICAgICAgICAgICAgb2YgYXR0YWNrIGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBhbmQKICAgICAgICAgICAgICAgICAgICBvYnNlcnZpbmcgdGhhdCB3ZSBjb25zdW1lIG1vcmUgaW1wb3J0ZWQgY29ybiB0aGFuIGFueSBvdGhlciBuYXRpb24sIGhlIHByb3Bvc2VkCiAgICAgICAgICAgICAgICAgICAgdG8gZ2V0IGNvbnRyb2wgb2YgdGhlIGNhcnJ5aW5nIHRyYWRlIGluIGNvcm4uIEhlIGFkdmFuY2VkIHRvd2FyZHMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LCBhbmQgdGhlIGZpcnN0IHRoaW5nIGhlIGRpZCB3YXMgdG8KICAgICAgICAgICAgICAgICAgICBjbGFpbSB0aGUgaGVscCBvZiB0aGUgQnl6YW50aW5lcyBhcyBoaXMgYWxsaWVzIGluIHRoZSB3YXIgYWdhaW5zdCB5b3UuIFdoZW4gdGhleQogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQsIGRlY2xhcmluZyB3aXRoIGVudGlyZSB0cnV0aCB0aGF0IHRoZSB0ZXJtcyBvZiBhbGxpYW5jZSBpbmNsdWRlZCBubyBzdWNoCiAgICAgICAgICAgICAgICAgICAgb2JsaWdhdGlvbiwgaGUgc2V0IHVwIGEgc3RvY2thZGUgYWdhaW5zdCB0aGVpciBjaXR5LCBwbGFudGVkIGFydGlsbGVyeSwgYW5kCiAgICAgICAgICAgICAgICAgICAgYmVnYW4gYSBzaWVnZS4gPC90cmFuc2xhdGlvbj4="
translation['18.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz5JIHdpbGwgbm90IGZ1cnRoZXIgYXNrIHdoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgeW91ciBwcm9wZXIgY291cnNlIGluIHRob3NlIGNpcmN1bXN0YW5jZXMs4oCUdGhlIGFuc3dlciBpcyB0b28gb2J2aW91cy4KICAgICAgICAgICAgICAgICAgICBCdXQgd2hvIHNlbnQgcmVpbmZvcmNlbWVudHMgdG8gdGhlIEJ5emFudGluZXMgYW5kIGRlbGl2ZXJlZCB0aGVtPyBXaG8gcHJldmVudGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGVzdHJhbmdlbWVudCBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiBhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgY3Jpc2lzPyBZb3UsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IGFuZAogICAgICAgICAgICAgICAgICAgIHdoZW4gSSBzYXkgeW91LCBJIG1lYW4gdGhlIHdob2xlIGNpdHkuIFdobyBhZHZpc2VkIHRoZSBjaXR5LCBtb3ZlZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9ucywgdG9vayBhY3Rpb24sIGRldm90ZWQgaGltc2VsZiB3aG9sZWhlYXJ0ZWRseSBhbmQgd2l0aG91dCBzdGludCB0bwogICAgICAgICAgICAgICAgICAgIHRoYXQgYnVzaW5lc3M/IDwvdHJhbnNsYXRpb24+"
translation['18.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz5JIGRpZDsgYW5kIEkgbmVlZCBub3QgYXJndWUgaG93CiAgICAgICAgICAgICAgICAgICAgcHJvZml0YWJsZSBteSBwb2xpY3kgd2FzLCBmb3IgeW91IGtub3cgaXQgYnkgZXhwZXJpZW5jZS4gVGhlIHdhciBpbiB3aGljaCB3ZQogICAgICAgICAgICAgICAgICAgIHRoZW4gZW5nYWdlZCwgYXBhcnQgZnJvbSB0aGUgcmVub3duIGl0IGJyb3VnaHQgdG8geW91LCBtYWRlIGFsbCB0aGUgbmVjZXNzYXJpZXMKICAgICAgICAgICAgICAgICAgICBvZiBsaWZlIG1vcmUgYWJ1bmRhbnQgYW5kIGNoZWFwZXIgdGhhbiB0aGUgcGVhY2Ugd2Ugbm93IGVuam95LCB0aGUgcGVhY2Ugd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGVzZSB3b3J0aGllcyBjaGVyaXNoIHRvIHRoZSBkaXNhZHZhbnRhZ2Ugb2YgdGhlIGNpdHksIGluIHZpZXcgb2YgZnV0dXJlCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0YXRpb25zISBNYXkgdGhvc2UgZXhwZWN0YXRpb25zIGZhaWwhIE1heSB0aGV5IHNoYXJlIG9ubHkgdGhlIGJsZXNzaW5ncyBmb3IKICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3UgbWVuIG9mIGhvbmVzdCBpbnRlbnQgc3VwcGxpY2F0ZSB0aGUgZ29kcyEgQW5kIG1heSB0aGV5IG5ldmVyIGJlc3RvdwogICAgICAgICAgICAgICAgICAgIHVwb24geW91IGFueSBzaGFyZSBpbiB0aGUgcHJpbmNpcGxlcyB0aGV5IGhhdmUgY2hvc2VuISBOb3cgcmVhZCBvZiB0aGUgY3Jvd25zIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIEJ5emFudGluZXMgYW5kIG9mIHRoZSBQZXJpbnRoaWFucywgY29uZmVycmVkIGJ5IHRoZW0gdXBvbiB0aGUgY2l0eSBmb3IgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcy4gPC90cmFuc2xhdGlvbj4="
translation['18.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUgb2YgdGhlIEJ5emFudGluZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ5emFudGluZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZGVyc2hpcCBvZiBCb3Nwb3JpY2h1cywgRGFtYWdldHVzIHByb3Bvc2VkIGluIHRoZSBBc3NlbWJseSwgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2FuY3Rpb24gb2YgdGhlIENvdW5jaWwsIHRoYXQsIHdoZXJlYXMgdGhlIEF0aGVuaWFuIFBlb3BsZSBpbiBmb3JtZXIgdGltZXMKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGNvbnN0YW50IGZyaWVuZHMgb2YgdGhlIEJ5emFudGluZXMgYW5kIG9mIHRoZWlyIGFsbGllcyBhbmQga2luc21lbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgUGVyaW50aGlhbnMsIGFuZCBoYXZlIGNvbmZlcnJlZCBtYW55IGdyZWF0IHNlcnZpY2VzIHVwb24gdGhlbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VudGx5LCB3aGVuIFBoaWxpcCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE1Ij5NYWNlZG9uPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFja2VkIHRoZWlyIGxhbmQgYW5kIGNpdHkgdG8gZXh0ZXJtaW5hdGUgdGhlIEJ5emFudGluZXMgYW5kIFBlcmludGhpYW5zLAogICAgICAgICAgICAgICAgICAgICAgICBidXJuaW5nIGFuZCBkZXZhc3RhdGluZyB0aGUgbGFuZCwgdGhleSBjYW1lIHRvIG91ciBhaWQgd2l0aCBhIGh1bmRyZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHR3ZW50eSBzaGlwcyBhbmQgcHJvdmlzaW9ucyBhbmQgYXJtcyBhbmQgaW5mYW50cnksIGFuZCBleHRyaWNhdGVkIHVzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZGFuZ2VycywgYW5kIHJlc3RvcmVkIG91ciBvcmlnaW5hbCBjb25zdGl0dXRpb24gYW5kIG91ciBsYXdzIGFuZCBvdXIKICAgICAgICAgICAgICAgICAgICAgICAgc2VwdWxjaHJlcyw8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ5emFudGluZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZGVyc2hpcCBvZiBCb3Nwb3JpY2h1cywgRGFtYWdldHVzIHByb3Bvc2VkIGluIHRoZSBBc3NlbWJseSwgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2FuY3Rpb24gb2YgdGhlIENvdW5jaWwsIHRoYXQsIHdoZXJlYXMgdGhlIEF0aGVuaWFuIFBlb3BsZSBpbiBmb3JtZXIgdGltZXMKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGNvbnN0YW50IGZyaWVuZHMgb2YgdGhlIEJ5emFudGluZXMgYW5kIG9mIHRoZWlyIGFsbGllcyBhbmQga2luc21lbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgUGVyaW50aGlhbnMsIGFuZCBoYXZlIGNvbmZlcnJlZCBtYW55IGdyZWF0IHNlcnZpY2VzIHVwb24gdGhlbSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VudGx5LCB3aGVuIFBoaWxpcCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE1Ij5NYWNlZG9uPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFja2VkIHRoZWlyIGxhbmQgYW5kIGNpdHkgdG8gZXh0ZXJtaW5hdGUgdGhlIEJ5emFudGluZXMgYW5kIFBlcmludGhpYW5zLAogICAgICAgICAgICAgICAgICAgICAgICBidXJuaW5nIGFuZCBkZXZhc3RhdGluZyB0aGUgbGFuZCwgdGhleSBjYW1lIHRvIG91ciBhaWQgd2l0aCBhIGh1bmRyZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHR3ZW50eSBzaGlwcyBhbmQgcHJvdmlzaW9ucyBhbmQgYXJtcyBhbmQgaW5mYW50cnksIGFuZCBleHRyaWNhdGVkIHVzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgZ3JlYXQgZGFuZ2VycywgYW5kIHJlc3RvcmVkIG91ciBvcmlnaW5hbCBjb25zdGl0dXRpb24gYW5kIG91ciBsYXdzIGFuZCBvdXIKICAgICAgICAgICAgICAgICAgICAgICAgc2VwdWxjaHJlcyw8L3RyYW5zbGF0aW9uPg=="
translation['18.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPml0IGJlIHJlc29sdmVkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQZXJpbnRodXMgdG8gZ3JhbnQgdG8gdGhlIEF0aGVuaWFucyByaWdodHMgb2YgaW50ZXJtYXJyaWFnZSwgY2l0aXplbnNoaXAsCiAgICAgICAgICAgICAgICAgICAgICAgIHRlbnVyZSBvZiBsYW5kIGFuZCBob3VzZXMsIHRoZSBzZWF0IG9mIGhvbm9yIGF0IHRoZSBnYW1lcywgYWNjZXNzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBDb3VuY2lsIGFuZCB0aGUgcGVvcGxlIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBzYWNyaWZpY2VzLCBhbmQgaW1tdW5pdHkgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICBhbGwgcHVibGljIHNlcnZpY2VzIGZvciB0aG9zZSB3aG8gd2lzaCB0byBzZXR0bGUgaW4gb3VyIGNpdHk7IGFsc28gdG8gZXJlY3QKICAgICAgICAgICAgICAgICAgICAgICAgdGhyZWUgc3RhdHVlcywgc2l4dGVlbiBjdWJpdHMgaW4gaGVpZ2h0LCBpbiB0aGUgQm9zcG9yZXVtLCByZXByZXNlbnRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYmVpbmcgY3Jvd25lZAogICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgUGVvcGxlcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFBlcmludGh1czsgYWxzbyB0byBzZW5kIGRlcHV0YXRpb25zIHRvIHRoZSBQYW5oZWxsZW5pYyBnYXRoZXJpbmdzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgSXN0aG1pYW4sIE5lbWVhbiwgT2x5bXBpYW4sIGFuZCBQeXRoaWFuIGdhbWVzLCBhbmQgdGhlcmUgdG8gcHJvY2xhaW0gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3duIHdoZXJld2l0aCB0aGUgQXRoZW5pYW4gUGVvcGxlIGhhcyBiZWVuIGNyb3duZWQgYnkgdXMsIHRoYXQgdGhlIEdyZWVrcwogICAgICAgICAgICAgICAgICAgICAgICBtYXkga25vdyB0aGUgbWVyaXRzIG9mIHRoZSBBdGhlbmlhbnMgYW5kIHRoZSBncmF0aXR1ZGUgb2YgdGhlIEJ5emFudGluZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBQZXJpbnRoaWFucy5dPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIFBlcmludGh1cyB0byBncmFudCB0byB0aGUgQXRoZW5pYW5zIHJpZ2h0cyBvZiBpbnRlcm1hcnJpYWdlLCBjaXRpemVuc2hpcCwKICAgICAgICAgICAgICAgICAgICAgICAgdGVudXJlIG9mIGxhbmQgYW5kIGhvdXNlcywgdGhlIHNlYXQgb2YgaG9ub3IgYXQgdGhlIGdhbWVzLCBhY2Nlc3MgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIENvdW5jaWwgYW5kIHRoZSBwZW9wbGUgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIHNhY3JpZmljZXMsIGFuZCBpbW11bml0eSBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIGFsbCBwdWJsaWMgc2VydmljZXMgZm9yIHRob3NlIHdobyB3aXNoIHRvIHNldHRsZSBpbiBvdXIgY2l0eTsgYWxzbyB0byBlcmVjdAogICAgICAgICAgICAgICAgICAgICAgICB0aHJlZSBzdGF0dWVzLCBzaXh0ZWVuIGN1Yml0cyBpbiBoZWlnaHQsIGluIHRoZSBCb3Nwb3JldW0sIHJlcHJlc2VudGluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBiZWluZyBjcm93bmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBQZW9wbGVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgUGVyaW50aHVzOyBhbHNvIHRvIHNlbmQgZGVwdXRhdGlvbnMgdG8gdGhlIFBhbmhlbGxlbmljIGdhdGhlcmluZ3MsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBJc3RobWlhbiwgTmVtZWFuLCBPbHltcGlhbiwgYW5kIFB5dGhpYW4gZ2FtZXMsIGFuZCB0aGVyZSB0byBwcm9jbGFpbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY3Jvd24gd2hlcmV3aXRoIHRoZSBBdGhlbmlhbiBQZW9wbGUgaGFzIGJlZW4gY3Jvd25lZCBieSB1cywgdGhhdCB0aGUgR3JlZWtzCiAgICAgICAgICAgICAgICAgICAgICAgIG1heSBrbm93IHRoZSBtZXJpdHMgb2YgdGhlIEF0aGVuaWFucyBhbmQgdGhlIGdyYXRpdHVkZSBvZiB0aGUgQnl6YW50aW5lcyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFBlcmludGhpYW5zLl08L3RyYW5zbGF0aW9uPg=="
translation['18.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBhbHNvIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNyb3ducyBhd2FyZGVkIGJ5IHRoZSBpbmhhYml0YW50cyBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUgb2YgdGhlIENoZXJzb25lc2l0ZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZSBvZiB0aGUgQ2hlcnNvbmVzaXRlczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltUaGUgcGVvcGxlcyBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NyI+Q2hlcnNvbmVzdXM8L3BsYWNlTmFtZT4gaW5oYWJpdGluZyBTZXN0dXMsIEVsYWV1cywgTWFkeXR1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIEFsb3BlY29ubmVzdXMsIGRvIGNyb3duIHRoZSBDb3VuY2lsIGFuZCBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdpdGggYSBnb2xkZW4gY3Jvd24gb2Ygc2l4dHkKICAgICAgICAgICAgICAgICAgICAgICAgdGFsZW50cycgdmFsdWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZXNlIGNhbiBoYXJkbHkgYmUgc3RhbmRhcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhbGVudHMuIFBlcmhhcHMgdGhleSB3ZXJlIHRoZSBsYXRlciBjb252ZW50aW9uYWwgdGFsZW50cywgbWVudGlvbmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQaGlsZW1vbiwgd2hpY2ggd2VyZSBlcXVhbCB0byB0aHJlZSBnb2xkIHN0YXRlcnMgb3IgZGlkcmFjaG1hcwogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIc2F5IDRzLiA2ZC7vvIk7IG9yIHBlcmhhcHMgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+IGhhZCBhbiB1bmtub3duIHN0YW5kYXJkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdHMgb3duOyBvciBwZXJoYXBzIHRoZSBmb3JnZXIgb2YgdGhlc2UgZG9jdW1lbnRzIHdhcyBnZW5lcm91cyBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYnVyc2luZyBvdGhlciBwZW9wbGUncyBnb2xkLjwvbm90ZT4gYW5kIGVyZWN0IGFuIGFsdGFyIHRvIEdyYXRpdHVkZQogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdG8gdGhlIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhleSBoYXZlIGJlZW4gYSBjb250cmlidXRvcnkgY2F1c2Ugb2YgYWxsIHRoZSBncmVhdGVzdCBibGVzc2luZ3MgdG8KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBlb3BsZXMgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcmVzY3VlZCB0aGVtIGZyb20gUGhpbGlwIGFuZCByZXN0b3JlZCB0aGVpciBmYXRoZXJsYW5kLCB0aGVpciBsYXdzLAogICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBmcmVlZG9tLCBhbmQgdGhlaXIgdGVtcGxlczsgYWxzbyBpbiBhbGwgdGltZSB0byBjb21lIHRoZXkgd2lsbCBub3QKICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCB0byBiZSBncmF0ZWZ1bCBhbmQgdG8gZG8gdGhlbSBldmVyeSBzZXJ2aWNlIGluIHRoZWlyIHBvd2VyLiBUaGlzIGRlY3JlZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgcGFzc2VkIGluIENvbmZlZGVyYXRlIENvdW5jaWwuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlIG9mIHRoZSBDaGVyc29uZXNpdGVzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W1RoZSBwZW9wbGVzIG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPiBpbmhhYml0aW5nIFNlc3R1cywgRWxhZXVzLCBNYWR5dHVzLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgQWxvcGVjb25uZXN1cywgZG8gY3Jvd24gdGhlIENvdW5jaWwgYW5kIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2l0aCBhIGdvbGRlbiBjcm93biBvZiBzaXh0eQogICAgICAgICAgICAgICAgICAgICAgICB0YWxlbnRzJyB2YWx1ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlc2UgY2FuIGhhcmRseSBiZSBzdGFuZGFyZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFsZW50cy4gUGVyaGFwcyB0aGV5IHdlcmUgdGhlIGxhdGVyIGNvbnZlbnRpb25hbCB0YWxlbnRzLCBtZW50aW9uZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBoaWxlbW9uLCB3aGljaCB3ZXJlIGVxdWFsIHRvIHRocmVlIGdvbGQgc3RhdGVycyBvciBkaWRyYWNobWFzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIhzYXkgNHMuIDZkLu+8iTsgb3IgcGVyaGFwcyB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NyI+Q2hlcnNvbmVzdXM8L3BsYWNlTmFtZT4gaGFkIGFuIHVua25vd24gc3RhbmRhcmQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0cyBvd247IG9yIHBlcmhhcHMgdGhlIGZvcmdlciBvZiB0aGVzZSBkb2N1bWVudHMgd2FzIGdlbmVyb3VzIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNidXJzaW5nIG90aGVyIHBlb3BsZSdzIGdvbGQuPC9ub3RlPiBhbmQgZXJlY3QgYW4gYWx0YXIgdG8gR3JhdGl0dWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0byB0aGUgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+IGhhZCBhbiB1bmtub3duIHN0YW5kYXJkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdHMgb3duOyBvciBwZXJoYXBzIHRoZSBmb3JnZXIgb2YgdGhlc2UgZG9jdW1lbnRzIHdhcyBnZW5lcm91cyBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYnVyc2luZyBvdGhlciBwZW9wbGUncyBnb2xkLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGV5IGhhdmUgYmVlbiBhIGNvbnRyaWJ1dG9yeSBjYXVzZSBvZiBhbGwgdGhlIGdyZWF0ZXN0IGJsZXNzaW5ncyB0bwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcGVvcGxlcyBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NyI+Q2hlcnNvbmVzdXM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmluZyByZXNjdWVkIHRoZW0gZnJvbSBQaGlsaXAgYW5kIHJlc3RvcmVkIHRoZWlyIGZhdGhlcmxhbmQsIHRoZWlyIGxhd3MsCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZWlyIGZyZWVkb20sIGFuZCB0aGVpciB0ZW1wbGVzOyBhbHNvIGluIGFsbCB0aW1lIHRvIGNvbWUgdGhleSB3aWxsIG5vdAogICAgICAgICAgICAgICAgICAgICAgICBmYWlsIHRvIGJlIGdyYXRlZnVsIGFuZCB0byBkbyB0aGVtIGV2ZXJ5IHNlcnZpY2UgaW4gdGhlaXIgcG93ZXIuIFRoaXMgZGVjcmVlCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyBwYXNzZWQgaW4gQ29uZmVkZXJhdGUgQ291bmNpbC5dPC90cmFuc2xhdGlvbj4="
translation['18.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGh1cyBteQogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyZWQgcG9saWN5IHdhcyBub3Qgb25seSBzdWNjZXNzZnVsIGluIGRlbGl2ZXJpbmcgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwMzQ1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTAzNDUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPiwgaW4gcHJldmVudGluZyB0aGUgc3VianVnYXRpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiB0byBQaGlsaXAsIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIGJyaW5naW5nIGRpc3RpbmN0aW9uIHRvIHRoZSBjaXR5LCBidXQgaXQgZXhoaWJpdGVkIHRvIG1hbmtpbmQgdGhlIG5vYmxlIHNwaXJpdAogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQgdGhlIGRlcHJhdml0eSBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxpcC4gRm9yIGhlLCB0aGUgYWxseSBvZiB0aGUgQnl6YW50aW5lcywgd2FzIGJlc2llZ2luZyB0aGVtIGluIHRoZSBzaWdodCBvZgogICAgICAgICAgICAgICAgICAgIGFsbCBtZW46IGNvdWxkIGFueXRoaW5nIGJlIG1vcmUgZGlzY3JlZGl0YWJsZSBhbmQgb3V0cmFnZW91cz8gPC90cmFuc2xhdGlvbj4="
translation['18.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgeW91LCB3aG8gbWlnaHQgd2l0aCBqdXN0aWNlIGhhdmUgZm91bmQgZmF1bHQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZW0gZm9yIGVhcmxpZXIgYWN0cyBvZiB0cmVzcGFzcywgc28gZmFyIGZyb20gYmVpbmcgdmluZGljdGl2ZSBhbmQgZGVzZXJ0aW5nCiAgICAgICAgICAgICAgICAgICAgdGhlbSBpbiB0aGVpciBkaXN0cmVzcywgYXBwZWFyZWQgYXMgdGhlaXIgZGVsaXZlcmVycywgYW5kIGJ5IHRoYXQgY29uZHVjdCB3b24KICAgICAgICAgICAgICAgICAgICByZW5vd24s4oCUdGhlIGdvb2R3aWxsIG9mIHRoZSB3aG9sZSB3b3JsZC4gTW9yZW92ZXIgYWxsIGtub3cgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIGF3YXJkZWQgY3Jvd25zIHRvIG1hbnkgcG9saXRpY2lhbnM7IGJ1dCBubyBvbmUgY2FuIG5hbWUgYW55IG1hbuKAlEkKICAgICAgICAgICAgICAgICAgICBtZWFuIGFueSBzdGF0ZXNtYW4gb3Igb3JhdG9y4oCUZXhjZXB0IG1lLCBieSB3aG9zZSBleGVydGlvbnMgdGhlIGNpdHkKICAgICAgICAgICAgICAgICAgICBpdHNlbGYgaGFzIGJlZW4gY3Jvd25lZC4gPC90cmFuc2xhdGlvbj4="
translation['18.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIHRvIHNob3cgeW91IHRoYXQgdGhlIGF0dGFjayBBZXNjaGluZXMgbWFkZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBFdWJvZWFucyBhbmQgdGhlIEJ5emFudGluZXMgYnkgcmFraW5nIHVwIG9sZCBzdG9yaWVzIG9mIHRoZWlyIGRpc29ibGlnaW5nCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCB0b3dhcmRzIHlvdSwgd2FzIG1lcmUgc3BpdGVmdWwgY2FsdW1ueSzigJRub3Qgb25seSBiZWNhdXNlLCBhcyBJCiAgICAgICAgICAgICAgICAgICAgdGhpbmsgeW91IGFsbCBtdXN0IGtub3csIHRob3NlIHN0b3JpZXMgYXJlIGZhbHNlLCBidXQgYmVjYXVzZSwgZXZlbiBpZiB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBlbnRpcmVseSB0cnVlLCB0aGUgbWVyaXRzIG9mIG15IHBvbGljeSBhcmUgbm90IGFmZmVjdGVkLOKAlGJ5IHJlbGF0aW5nLAogICAgICAgICAgICAgICAgICAgIHdpdGggZHVlIGJyZXZpdHksIHR3byBvciB0aHJlZSBvZiB0aGUgbm9ibGUgYWN0aW9ucyBvZiB5b3VyIG93biBjb21tb253ZWFsdGg7CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBwdWJsaWMgY29uZHVjdCBvZiBhIHN0YXRlLCBsaWtlIHRoZSBwcml2YXRlIGNvbmR1Y3Qgb2YgYSBtYW4sIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGFsd2F5cyBiZSBndWlkZWQgYnkgaXRzIG1vc3QgaG9ub3IgYWJsZSB0cmFkaXRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBMYWNlZGFlbW9uaWFucywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGFkIHRoZSBzdXByZW1hY3kgb2YgbGFuZCBhbmQgc2VhLCBhbmQgd2VyZSBob2xkaW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCBnb3Zlcm5vcnMgYW5kIGdhcnJpc29ucyBhbGwgdGhlIGZyb250aWVycyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUYW5hZ3JhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUYW5hZ3JhIj5UYW5hZ3JhPC9wbGFjZU5hbWU+LCBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MyI+Qm9lb3RpYTwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2FyYSI+TWVnYXJhPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA4NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDg3Ij5BZWdpbmE8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwODY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA4NjciPkNlb3M8L3BsYWNlTmFtZT4sIGFuZCB0aGUgb3RoZXIgaXNsYW5kcywgZm9yIGF0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aW1lIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBoYWQgbm8gc2hpcHMgYW5kIG5vCiAgICAgICAgICAgICAgICAgICAgd2FsbHMsIHlvdSBtYXJjaGVkIG91dCB0byBIYWxpYXJ0dXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhhbGlhcnR1cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSItMzk1IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzk1Ij4zOTU8L2RhdGU+IEIuQy47IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPiwgPGRhdGUgYXV0aG5hbWU9Ii0zOTQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zOTQiPjM5NDwvZGF0ZT4gQi5DLjsgRGVjZWxlYW4gd2FyLAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbGFzdCBwZXJpb2QsIDRsMy00MDQsIG9mIHRoZSBQZWxvcG9ubmVzaWFuIHdhciwgd2hlbiB0aGUgU3BhcnRhbnMgaGVsZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZm9ydGlmaWVkIHBvc2l0aW9uIG9mIERlY2VsZWEgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+Ljwvbm90ZT4gYW5kIGFnYWluIGEgZmV3IGRheXMgbGF0ZXIgdG8gPGRhdGUgYXV0aG5hbWU9Ii0zOTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zOTUiPjM5NTwvZGF0ZT4gQi5DLjsgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+LCA8ZGF0ZSBhdXRobmFtZT0iLTM5NCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM5NCI+Mzk0PC9kYXRlPiBCLkMuOyBEZWNlbGVhbiB3YXIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBsYXN0IHBlcmlvZCwgNGwzLTQwNCwgb2YgdGhlIFBlbG9wb25uZXNpYW4gd2FyLCB3aGVuIHRoZSBTcGFydGFucyBoZWxkCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmb3J0aWZpZWQgcG9zaXRpb24gb2YgRGVjZWxlYSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4uPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDb3JpbnRoIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDb3JpbnRoIj5Db3JpbnRoPC9wbGFjZU5hbWU+LiBUaGUgQXRoZW5pYW5zIG9mIHRob3NlIGRheXMgaGFkCiAgICAgICAgICAgICAgICAgICAgZ29vZCByZWFzb24gdG8gYmVhciBtYWxpY2UgYWdhaW5zdCB0aGUgQ29yaW50aGlhbnMgYW5kIHRoZSBUaGViYW5zIGZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3QgZHVyaW5nIHRoZSBEZWNlbGVhbiBXYXI7IGJ1dCB0aGV5IGJvcmUgbm8gbWFsaWNlIHdoYXRldmVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgaW4gbWFraW5nIGJvdGggdGhlc2UgZXhwZWRpdGlvbnMsIEFlc2NoaW5lcywgdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgbm90IHJlcXVpdGluZyBiZW5lZml0cyByZWNlaXZlZCwgYW5kIHRoZXkga25ldyB0aGV5IHdlcmUgdGFraW5nIHJpc2tzLiBUaGV5CiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCB1c2UgdGhvc2UgcGxlYXMgYXMgZXhjdXNlcyBmb3IgZGVzZXJ0aW5nIG1lbiB3aG8gaGFkIHNvdWdodCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24uIEZvciB0aGUgc2FrZSBvZiBob25vciBhbmQgZ2xvcnkgdGhleSB3aWxsaW5nbHkgZW5jb3VudGVyZWQgdGhvc2UKICAgICAgICAgICAgICAgICAgICBwZXJpbHMs4oCUYSByaWdodGVvdXMgYW5kIGEgbm9ibGUgcmVzb2x2ZSEgRm9yIGV2ZXJ5IG1hbiBkZWF0aCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBnb2FsIG9mIGxpZmUsIHRob3VnaCBoZSBrZWVwIGhpbXNlbGYgY2xvaXN0ZXJlZCBpbiBoaXMgY2hhbWJlcjsgYnV0IGl0IGJlaG92ZXMKICAgICAgICAgICAgICAgICAgICB0aGUgYnJhdmUgdG8gc2V0IHRoZWlyIGhhbmRzIHRvIGV2ZXJ5IG5vYmxlIGVudGVycHJpc2UsIGJlYXJpbmcgYmVmb3JlIHRoZW0gdGhlCiAgICAgICAgICAgICAgICAgICAgYnVja2xlciBvZiBob3BlLCBhbmQgdG8gZW5kdXJlIGdhbGxhbnRseSB3aGF0ZXZlciBmYXRlIEdvZCBtYXkgYWxsb3QuIDwvdHJhbnNsYXRpb24+"
translation['18.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz5TbyB5b3VyIGZvcmVmYXRoZXJzIHBsYXllZCB0aGVpciBwYXJ0OyBzbyBhbHNvIGRpZAogICAgICAgICAgICAgICAgICAgIHRoZSBlbGRlciBhbW9uZyB5b3Vyc2VsdmVzLiBUaGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBubyBmcmllbmRzIG9yIGJlbmVmYWN0b3JzIG9mCiAgICAgICAgICAgICAgICAgICAgb3VyczsgdGhleSBoYWQgZG9uZSBtYW55IGdyaWV2b3VzIHdyb25ncyB0byBvdXIgY29tbW9ud2VhbHRoOyBidXQgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBUaGViYW5zLCBhZnRlciB0aGVpciB2aWN0b3J5IGF0IExldWN0cmEsIHRocmVhdGVuZWQgdG8gZXh0ZXJtaW5hdGUgdGhlbSwgeW91CiAgICAgICAgICAgICAgICAgICAgYmFsa2VkIHRoYXQgcmV2ZW5nZSwgd2l0aG91dCBmZWFyIG9mIHRoZSBwcm93ZXNzIGFuZCBoaWdoIHJlcHV0ZSBvZiB0aGUgVGhlYmFucywKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHRob3VnaHQgb2YgdGhlIHBhc3QgbWlzZGVlZHMgb2YgdGhlIHBlb3BsZSBmb3Igd2hvbSB5b3UgaW1wZXJpbGxlZAogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['18.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28geW91IHRhdWdodCB0byBhbGwKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IHRoZSBsZXNzb24gdGhhdCwgaG93ZXZlcgogICAgICAgICAgICAgICAgICAgIGdyYXZlbHkgYSBuYXRpb24gbWF5IGhhdmUgb2ZmZW5kZWQgYWdhaW5zdCB5b3UsIHlvdSBrZWVwIHlvdXIgcmVzZW50bWVudCBmb3IKICAgICAgICAgICAgICAgICAgICBwcm9wZXIgb2NjYXNpb25zLCBidXQgaWYgZXZlciB0aGVpciBsaWZlIG9yIHRoZWlyIGxpYmVydHkgaXMgZW5kYW5nZXJlZCwgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3QgaW5kdWxnZSB5b3VyIHJhbmNvciBvciB0YWtlIHlvdXIgd3JvbmdzIGludG8gYWNjb3VudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdCBvbmx5IHRvd2FyZHMgdGhlIExhY2VkYWVtb25pYW5zIGhhdmUgeW91IHNvIGRlbWVhbmVkCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlczsgYnV0IHdoZW4gdGhlIFRoZWJhbnMgd2VyZSB0cnlpbmcgdG8gYW5uZXggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+LCB5b3Ugd2VyZSBub3QgaW5kaWZmZXJlbnQ7IHlvdSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgY2FsbCB0byBtaW5kIHRoZSBpbmp1cmllcyB5b3UgaGFkIHN1ZmZlcmVkIGZyb20gVGhlbWlzbyBhbmQgVGhlb2RvcnVzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlciBvZiBPcm9wdXM7IHlvdSBjYXJyaWVkIGFpZCBldmVuIHRvIHRoZW0uIFRoYXQgd2FzIGluIHRoZSBlYXJseSBkYXlzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHZvbHVudGVlciB0cmllcmFyY2hzLCBvZiB3aG9tIEkgd2FzIG9uZTsgYnV0IEkgc2F5IG5vdGhpbmcgb2YgdGhhdCBub3cuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+WW91ciBkZWxpdmVyYW5jZSBvZiB0aGUgaXNsYW5kIHdhcyBhCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJvdXMgYWN0LCBidXQgc3RpbGwgbW9yZSBnZW5lcm91c2x5LCB3aGVuIHlvdSBoYWQgdGhlaXIgbGl2ZXMgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2l0aWVzIGF0IHlvdXIgbWVyY3ksIHlvdSByZXN0b3JlZCB0aGVtIGhvbmVzdGx5IHRvIG1lbiB3aG8gaGFkIHNpbm5lZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgeW91LCBmb3JnZXR0aW5nIHlvdXIgd3JvbmdzIHdoZXJlIHlvdSBmb3VuZCB5b3Vyc2VsdmVzIHRydXN0ZWQuIEkgcGFzcyBvdmVyIHRlbgogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIGluc3RhbmNlcyBJIGNvdWxkIGNpdGUs4oCUYmF0dGxlcyBieSBzZWEsIGV4cGVkaXRpb25zIGJ5IGxhbmQsCiAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ25zIG9mIGFuY2llbnQgZGF0ZSBhbmQgb2Ygb3VyIG93biB0aW1lcywgaW4gYWxsIG9mIHdoaWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBlbmdhZ2VkIGhlcnNlbGYgZm9yIHRoZSBmcmVlZG9tIGFuZAogICAgICAgICAgICAgICAgICAgIHNhbHZhdGlvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['18.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIGJlZm9yZSBteSBleWVzIHRoZSBzcGVjdGFjbGUgb2YgYSBjaXR5IGluIGFsbAogICAgICAgICAgICAgICAgICAgIHRob3NlIGdyZWF0IGVudGVycHJpc2VzIHJlYWR5IHRvIGZpZ2h0IHRoZSBiYXR0bGVzIG9mIGhlciBuZWlnaGJvcnMsIHdoYXQgYWR2aWNlCiAgICAgICAgICAgICAgICAgICAgd2FzIEkgdG8gZ2l2ZSBhbmQgd2hhdCBwb2xpY3kgdG8gdXJnZSwgd2hlbiBoZXIgZGVsaWJlcmF0aW9ucyBpbiBzb21lIG1lYXN1cmUKICAgICAgICAgICAgICAgICAgICBjb25jZXJuZWQgaGVyc2VsZj8gVG8gYmVhciBtYWxpY2UgYWdhaW5zdCBtZW4gd2hvIHdlcmUgc2Vla2luZyBkZWxpdmVyYW5jZT8gVG8KICAgICAgICAgICAgICAgICAgICBzZWFyY2ggZm9yIGV4Y3VzZXMgZm9yIGRlc2VydGluZyB0aGUgY29tbW9uIGNhdXNlPyBTaG91bGQgSSBub3QgaGF2ZSBkZXNlcnZlZAogICAgICAgICAgICAgICAgICAgIGRlYXRoIGlmIGV2ZW4gaW4gd29yZCBJIGhhZCBzb3VnaHQgdG8gdGFybmlzaCBvdXIgaG9ub3IgYWJsZSB0cmFkaXRpb25zPyBJbgogICAgICAgICAgICAgICAgICAgIHdvcmQsIEkgc2F5OyBmb3IgdGhlIGRlZWQgeW91IHdvdWxkIG5ldmVyIGhhdmUgZG9uZS4gT2YgdGhhdCBJIGFtIHdlbGwgYXNzdXJlZCwKICAgICAgICAgICAgICAgICAgICBmb3IgaWYgeW91IHNvIHdpc2hlZCwgd2hhdCBzdG9vZCBpbiB5b3VyIHdheT8gV2FzIGl0IG5vdCBpbiB5b3VyIHBvd2VyPyBXZXJlIG5vdAogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyBhbmQgaGlzIGZyaWVuZHMgdGhlcmUgdG8gYWR2aXNlIHlvdT8gPC90cmFuc2xhdGlvbj4="
translation['18.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgd2lsbCBub3cgcmV0dXJuIHRvIG15IG5leHQgZW5zdWluZyBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOyBjb25zaWRlciB0aGVtIG9uY2UgYWdhaW4gaW4gcmVsYXRpb24gdG8gdGhlIGJlc3QgaW50ZXJlc3RzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbW1vbndlYWx0aC4gT2JzZXJ2aW5nIHRoYXQgdGhlIG5hdnkgd2FzIGdvaW5nIHRvIHBpZWNlcywgdGhhdCB0aGUgd2VhbHRoeSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgbGV0IG9mZiB3aXRoIHRyaWZsaW5nIGNvbnRyaWJ1dGlvbnMsIHdoaWxlIGNpdGl6ZW5zIG9mIG1vZGVyYXRlIG9yIHNtYWxsIG1lYW5zCiAgICAgICAgICAgICAgICAgICAgd2VyZSBsb3NpbmcgYWxsIHRoZXkgaGFkLCBhbmQgdGhhdCBhcyBhIHJlc3VsdCB0aGUgZ292ZXJubWVudCB3YXMgbWlzc2luZyBpdHMKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0aWVzLCBJIG1hZGUgYSBzdGF0dXRlIHVuZGVyIHdoaWNoIEkgY29tcGVsbGVkIHRoZSB3ZWFsdGh5IHRvIHRha2UKICAgICAgICAgICAgICAgICAgICB0aGVpciBmYWlyIHNoYXJlIG9mIGV4cGVuc2UsIHN0b3BwZWQgdGhlIG9wcHJlc3Npb24gb2YgdGhlIHBvb3IsIGFuZCwgYnkgYQogICAgICAgICAgICAgICAgICAgIG1lYXN1cmUgb2YgZ3JlYXQgcHVibGljIGJlbmVmaXQsIGNhdXNlZCB5b3VyIG5hdmFsIHByZXBhcmF0aW9ucyB0byBiZSBtYWRlIGluCiAgICAgICAgICAgICAgICAgICAgZ29vZCB0aW1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+QmVpbmcgaW5kaWN0ZWQgZm9yIHRoaXMgbWVhc3VyZSwgSQogICAgICAgICAgICAgICAgICAgIHN0b29kIG15IHRyaWFsIGJlZm9yZSB0aGlzIGNvdXJ0IGFuZCB3YXMgYWNxdWl0dGVkLCB0aGUgcHJvc2VjdXRvciBub3QgZ2V0dGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBmaWZ0aCBwYXJ0IG9mIHRoZSB2b3Rlcy4gTm93IGhvdyBtdWNoIG1vbmV5IGRvIHlvdSB0aGluayB0aGUgZmlyc3QsIHNlY29uZCwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhpcmQgY2xhc3NlcyBvZiBjb250cmlidXRvcnMgb24gdGhlIE5hdmFsIEJvYXJkcyBvZmZlcmVkIG1lIG5vdCB0byBwcm9wb3NlCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lYXN1cmUsIG9yLCBmYWlsaW5nIHRoYXQsIHRvIHB1dCBpdCBvbiB0aGUgbGlzdCBhbmQgdGhlbiBkcm9wIGl0IG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbXVycmVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9kc+Az4nOvM6/z4PhvbfOsTwvZm9yZWlnbj4sIGluIGdlbmVyYWwgYW4gYWZmaWRhdml0IHRvIGFycmVzdCBwcm9jZWVkaW5nczsKICAgICAgICAgICAgICAgICAgICAgICAgaGVyZSB0aGUgb2F0aCB0YWtlbiBpbiB0aGUgQXNzZW1ibHkgYnkgdGhlIHBhcnR5IGVuZ2FnaW5nIHRvIHByb3NlY3V0ZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYXV0aG9yIG9mIGEgbGF3IG9yIGEgZGVjcmVlIGZvciB2aW9sYXRpb24gb2YgdGhlIGNvbnN0aXR1dGlvbi4gSXRzIGVmZmVjdAogICAgICAgICAgICAgICAgICAgICAgICB3YXMgdG8ga2VlcCB0aGUgbGF3IGluIGFiZXlhbmNlLCBhdCB3aGF0ZXZlciBzdGFnZSBpdCBoYWQgYXJyaXZlZCwgdW50aWwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHN1aXQgd2FzIGRlY2lkZWQuPC9ub3RlPj9cYiBJdCB3YXMgc28gbGFyZ2UgYSBzdW0sIG1lbiBvZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvZHPgM+JzrzOv8+D4b23zrE8L2ZvcmVpZ24+LCBpbiBnZW5lcmFsIGFuIGFmZmlkYXZpdCB0byBhcnJlc3QgcHJvY2VlZGluZ3M7CiAgICAgICAgICAgICAgICAgICAgICAgIGhlcmUgdGhlIG9hdGggdGFrZW4gaW4gdGhlIEFzc2VtYmx5IGJ5IHRoZSBwYXJ0eSBlbmdhZ2luZyB0byBwcm9zZWN1dGUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhvciBvZiBhIGxhdyBvciBhIGRlY3JlZSBmb3IgdmlvbGF0aW9uIG9mIHRoZSBjb25zdGl0dXRpb24uIEl0cyBlZmZlY3QKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIHRvIGtlZXAgdGhlIGxhdyBpbiBhYmV5YW5jZSwgYXQgd2hhdGV2ZXIgc3RhZ2UgaXQgaGFkIGFycml2ZWQsIHVudGlsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzdWl0IHdhcyBkZWNpZGVkLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBJIGhhcmRseSBsaWtlIHRvIG5hbWUgaXQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.104'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDQiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIG5hdHVyYWwgdGhhdCB0aGV5IHNob3VsZCBtYWtlIHRoaXMKICAgICAgICAgICAgICAgICAgICBhdHRlbXB0LiBVbmRlciB0aGUgZm9ybWVyIHN0YXR1dGVzIHRoZXkgbWlnaHQgZGlzY2hhcmdlIHRoZWlyIHB1YmxpYyBzZXJ2aWNlcyBpbgogICAgICAgICAgICAgICAgICAgIGdyb3VwcyBvZiBzaXh0ZWVuLCBzcGVuZGluZyBsaXR0bGUgb3Igbm90aGluZyB0aGVtc2VsdmVzLCBidXQgZ3JpbmRpbmcgZG93biB0aGUKICAgICAgICAgICAgICAgICAgICBuZWVkeSBjaXRpemVucywgd2hlcmVhcyBieSBteSBzdGF0dXRlIHRoZXkgaGFkIHRvIHJldHVybiB0aGUgZnVsbCBhc3Nlc3NtZW50CiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZWlyIG1lYW5zLCBhbmQgYSBtYW4gd2hvIHdhcyBmb3JtZXJseSBvbmUgb2Ygc2l4dGVlbiBjb250cmlidXRvcnMKICAgICAgICAgICAgICAgICAgICB0byBhIHNpbmdsZSB0cmlyZW1l4oCUZm9yIHRoZXkgd2VyZSBkcm9wcGluZyB0aGUgdGVybSB0cmllcmFyY2ggYW5kCiAgICAgICAgICAgICAgICAgICAgY2FsbGluZyB0aGVtc2VsdmVzIGNvbnRyaWJ1dG9ycy1taWdodCBoYXZlIHRvIGZ1cm5pc2ggdHdvIGNvbXBsZXRlIHZlc3NlbHMuIFRoZXkKICAgICAgICAgICAgICAgICAgICBvZmZlcmVkIGFueSBhbW91bnQgdG8gZ2V0IHRoZSBuZXcgcnVsZXMgYWJyb2dhdGVkIGFuZCBlc2NhcGUgdGhlaXIganVzdAogICAgICAgICAgICAgICAgICAgIG9ibGlnYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['18.105'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+UmVhZCBmaXJzdCB0aGUgZGVjcmVlLC5mb3Igd2hpY2gKICAgICAgICAgICAgICAgICAgICBJIHdhcyBpbmRpY3RlZCBhbmQgdHJpZWQsIGFuZCB0aGVuIHRoZSBzY2hlZHVsZXMgYXMgY29tcGlsZWQgdW5kZXIgdGhlIG9sZAogICAgICAgICAgICAgICAgICAgIHN0YXR1dGUgdW5kZXIgbXkgc3RhdHV0ZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgYXJjaG9uc2hpcCBvZiBQb2x5Y2xlcywgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNpeHRlZW50aCBvZiB0aGUgbW9udGggQm/Dq2Ryb21pb24sIHRoZSB0cmliZSBIaXBwb3Rob250aXMgaG9sZGluZwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcHJlc2lkZW5jeSwgRGVtb3N0aGVuZXMsIHNvbiBvZiBEZW1vc3RoZW5lcywgb2YgUGFlYW5pYSwgaW50cm9kdWNlZCBhCiAgICAgICAgICAgICAgICAgICAgICAgIGJpbGwgdG8gYW1lbmQgdGhlIGZvcm1lciBsYXcgY29uc3RpdHV0aW5nIHRoZSBzeW5kaWNhdGVzIGZvciB0aGUgZXF1aXBtZW50CiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRyaXJlbWVzLiBUaGUgYmlsbCB3YXMgcGFzc2VkIGJ5IHRoZSBDb3VuY2lsIGFuZCB0aGUgUGVvcGxlLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgUGF0cm9jbGVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTUiPlBobHlhPC9wbGFjZU5hbWU+IGluZGljdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzIGZvciBhIGJyZWFjaCBvZiB0aGUgY29uc3RpdHV0aW9uLCBhbmQsIG5vdCBvYnRhaW5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkIHByb3BvcnRpb24gb2Ygdm90ZXMsIHBhaWQgdGhlIGZlZSBvZiBmaXZlIGh1bmRyZWQKICAgICAgICAgICAgICAgICAgICAgICAgZHJhY2htYXMuXTwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0luIHRoZSBhcmNob25zaGlwIG9mIFBvbHljbGVzLCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2l4dGVlbnRoIG9mIHRoZSBtb250aCBCb8OrZHJvbWlvbiwgdGhlIHRyaWJlIEhpcHBvdGhvbnRpcyBob2xkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcmVzaWRlbmN5LCBEZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLCBvZiBQYWVhbmlhLCBpbnRyb2R1Y2VkIGEKICAgICAgICAgICAgICAgICAgICAgICAgYmlsbCB0byBhbWVuZCB0aGUgZm9ybWVyIGxhdyBjb25zdGl0dXRpbmcgdGhlIHN5bmRpY2F0ZXMgZm9yIHRoZSBlcXVpcG1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdHJpcmVtZXMuIFRoZSBiaWxsIHdhcyBwYXNzZWQgYnkgdGhlIENvdW5jaWwgYW5kIHRoZSBQZW9wbGUsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQYXRyb2NsZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NSI+UGhseWE8L3BsYWNlTmFtZT4gaW5kaWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgZm9yIGEgYnJlYWNoIG9mIHRoZSBjb25zdGl0dXRpb24sIGFuZCwgbm90IG9idGFpbmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQgcHJvcG9ydGlvbiBvZiB2b3RlcywgcGFpZCB0aGUgZmVlIG9mIGZpdmUgaHVuZHJlZAogICAgICAgICAgICAgICAgICAgICAgICBkcmFjaG1hcy5dPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyByZWFkIHRoYXQgZmluZQogICAgICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJTY2hlZHVsZSI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2NoZWR1bGU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bVGhlIHRyaWVyYXJjaHMgdG8gYmUgY2FsbGVkIHVwLCBzaXh0ZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBlYWNoIHRyaXJlbWUsIGZyb20gdGhlIGFzc29jaWF0aW9ucyBvZiBqb2ludCBjb250cmlidXRvcnMsIGZyb20gdGhlIGFnZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0d2VudHktZml2ZSB0byB0aGF0IG9mIGZvcnR5LCBwYXlpbmcgZXF1YWwgY29udHJpYnV0aW9ucyB0byB0aGUgcHVibGljCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2NoZWR1bGU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bVGhlIHRyaWVyYXJjaHMgdG8gYmUgY2FsbGVkIHVwLCBzaXh0ZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBlYWNoIHRyaXJlbWUsIGZyb20gdGhlIGFzc29jaWF0aW9ucyBvZiBqb2ludCBjb250cmlidXRvcnMsIGZyb20gdGhlIGFnZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0d2VudHktZml2ZSB0byB0aGF0IG9mIGZvcnR5LCBwYXlpbmcgZXF1YWwgY29udHJpYnV0aW9ucyB0byB0aGUgcHVibGljCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UuXTwvdHJhbnNsYXRpb24+"
translation['18.106'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyByZWFkIGZvcgogICAgICAgICAgICAgICAgICAgIGNvbXBhcmlzb24gdGhlIHNjaGVkdWxlIHVuZGVyIG15IHN0YXR1dGUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iU2NoZWR1bGUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNjaGVkdWxlPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W1RoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2hzIHRvIGJlIGNob3NlbiBhY2NvcmRpbmcgdG8gdGhlIGFzc2Vzc21lbnQgb2YgdGhlaXIgcHJvcGVydHkgYXQgdGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHRhbGVudHMgdG8gYSB0cmlyZW1lOyBpZiB0aGUgcHJvcGVydHkgYmUgYXNzZXNzZWQgYWJvdmUgdGhhdCBzdW0sIHRoZSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZSBzaGFsbCBiZSBmaXhlZCBwcm9wb3J0aW9uYXRlbHkgdXAgdG8gdGhyZWUgdHJpcmVtZXMgYW5kIGEgdGVuZGVyLgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgc2FtZSBwcm9wb3J0aW9uIHNoYWxsIGJlIG9ic2VydmVkIHdoZXJlIHRob3NlIHdob3NlIHByb3BlcnR5IGlzIHVuZGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHRlbiB0YWxlbnRzIGZvcm0gYSBzeW5kaWNhdGUgdG8gbWFrZSB1cCB0aGF0IHN1bS5dPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TY2hlZHVsZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltUaGUKICAgICAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNocyB0byBiZSBjaG9zZW4gYWNjb3JkaW5nIHRvIHRoZSBhc3Nlc3NtZW50IG9mIHRoZWlyIHByb3BlcnR5IGF0IHRlbgogICAgICAgICAgICAgICAgICAgICAgICB0YWxlbnRzIHRvIGEgdHJpcmVtZTsgaWYgdGhlIHByb3BlcnR5IGJlIGFzc2Vzc2VkIGFib3ZlIHRoYXQgc3VtLCB0aGUgcHVibGljCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2Ugc2hhbGwgYmUgZml4ZWQgcHJvcG9ydGlvbmF0ZWx5IHVwIHRvIHRocmVlIHRyaXJlbWVzIGFuZCBhIHRlbmRlci4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHNhbWUgcHJvcG9ydGlvbiBzaGFsbCBiZSBvYnNlcnZlZCB3aGVyZSB0aG9zZSB3aG9zZSBwcm9wZXJ0eSBpcyB1bmRlcgogICAgICAgICAgICAgICAgICAgICAgICB0ZW4gdGFsZW50cyBmb3JtIGEgc3luZGljYXRlIHRvIG1ha2UgdXAgdGhhdCBzdW0uXTwvdHJhbnNsYXRpb24+"
translation['18.107'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRvIHlvdSB0aGluawogICAgICAgICAgICAgICAgICAgIGl0IHdhcyBhIHRyaWZsaW5nIHJlbGllZiBJIGdhdmUgdG8gdGhlIHBvb3IsIG9yIGEgdHJpZmxpbmcgc3VtIHRoYXQgdGhlIHJpY2gKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIHNwZW50IHRvIGVzY2FwZSB0aGVpciBvYmxpZ2F0aW9uPyBJIHByaWRlIG15c2VsZiBub3Qgb25seSBvbiBteQogICAgICAgICAgICAgICAgICAgIHJlZnVzYWwgb2YgY29tcHJvbWlzZSBhbmQgb24gbXkgYWNxdWl0dGFsLCBidXQgYWxzbyBvbiBoYXZpbmcgZW5hY3RlZCBhCiAgICAgICAgICAgICAgICAgICAgYmVuZWZpY2lhbCBsYXcgYW5kIHByb3ZlZCBpdCBzdWNoIGJ5IGV4cGVyaWVuY2UuIER1cmluZyB0aGUgd2hvbGUgd2FyLCB3aGlsZSB0aGUKICAgICAgICAgICAgICAgICAgICBzcXVhZHJvbnMgd2VyZSBvcmdhbml6ZWQgdW5kZXIgbXkgcmVndWxhdGlvbnMsIG5vIHRyaWVyYXJjaCBtYWRlIHBldGl0aW9uIGFzCiAgICAgICAgICAgICAgICAgICAgYWdncmlldmVkLCBvciBhcHBlYXJlZCBhcyBhIHN1cHBsaWFudCBpbiB0aGUgZG9ja3lhcmQgdGVtcGxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5kb2NreWFyZCB0ZW1wbGU6IGxpdC4gdGVtcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iEFydGVtaXPvvIkgTXVuaWNoaWE6IHRoZSDigJxCbHVlamFja2V0cycKICAgICAgICAgICAgICAgICAgICAgICAgQ2h1cmNo4oCdIGF0IFBlaXJhZXVzLjwvbm90ZT4gb3Igd2FzIGltcHJpc29uZWQgYnkgdGhlIEFkbWlyYWx0eSwKICAgICAgICAgICAgICAgICAgICBhbmQgbm8gc2hpcCB3YXMgZWl0aGVyIGFiYW5kb25lZCBhdCBzZWEgYW5kIGxvc3QgdG8gdGhlIHN0YXRlLCBvciBsZWZ0IGluIGhhcmJvcgogICAgICAgICAgICAgICAgICAgIGFzIHVuc2Vhd29ydGh5LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.108'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBpbmNpZGVudHMgd2VyZSBmcmVxdWVudAogICAgICAgICAgICAgICAgICAgIHVuZGVyIHRoZSBvbGQgcmVndWxhdGlvbnMsIGJlY2F1c2UgdGhlIHB1YmxpYyBzZXJ2aWNlcyBmZWxsIHVwb24gcG9vciBtZW4sIGFuZAogICAgICAgICAgICAgICAgICAgIGltcG9zc2libGUgZGVtYW5kcyB3ZXJlIG9mdGVuIG1hZGUuIEkgdHJhbnNmZXJyZWQgdGhlIG5hdmFsIG9ibGlnYXRpb25zIGZyb20KICAgICAgICAgICAgICAgICAgICBuZWVkeSB0byB3ZWxsLXRvLWRvIHBlb3BsZSwgYW5kIHNvIHRoZSBkdXR5IHdhcyBhbHdheXMgZGlzY2hhcmdlZC4gSSBhbHNvIGNsYWltCiAgICAgICAgICAgICAgICAgICAgY3JlZGl0IGZvciB0aGUgdmVyeSBmYWN0IHRoYXQgYWxsIHRoZSBtZWFzdXJlcyBJIGFkb3B0ZWQgYnJvdWdodCByZW5vd24gYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzdGluY3Rpb24gYW5kIHN0cmVuZ3RoIHRvIHRoZSBjaXR5LCBhbmQgdGhhdCBubyBtZWFzdXJlIG9mIG1pbmUgd2FzIGludmlkaW91cywKICAgICAgICAgICAgICAgICAgICBvciB2ZXhhdGlvdXMsIG9yIHNwaXRlZnVsLCBvciBzaGFiYnkgYW5kIHVud29ydGh5IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['18.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+WW91IHdpbGwgZmluZCB0aGF0IEkgbWFpbnRhaW5lZCB0aGUgc2FtZSBjaGFyYWN0ZXIgYm90aCBpbiBkb21lc3RpYyBhbmQgaW4KICAgICAgICAgICAgICAgICAgICBIZWxsZW5pYyBwb2xpY3kuIEF0IGhvbWUgSSBuZXZlciBwcmVmZXJyZWQgdGhlIGdyYXRpdHVkZSBvZiB0aGUgcmljaCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjbGFpbXMgb2YgdGhlIHBvb3I7IGluIGZvcmVpZ24gYWZmYWlycyBJIG5ldmVyIGNvdmV0ZWQgdGhlIGdpZnRzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBmcmllbmRzaGlwIG9mIFBoaWxpcCByYXRoZXIgdGhhbiB0aGUgY29tbW9uIGludGVyZXN0cyBvZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk15IHJlbWFpbmluZyB0YXNrLCBJIHRoaW5rLCBpcyB0byBzcGVhayBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwcm9jbGFtYXRpb24gYW5kIG9mIHRoZSBhdWRpdDsgZm9yIEkgaG9wZSB0aGF0IHdoYXQgSSBoYXZlIGFscmVhZHkgc2FpZCBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIHN1ZmZpY2llbnQgdG8gc2F0aXNmeSB5b3UgdGhhdCBteSBwb2xpY3kgd2FzIHRoZSBiZXN0LCBhbmQgdGhhdCBJIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHRoZSBwZW9wbGUncyBmcmllbmQsIGFuZCB6ZWFsb3VzIGluIHlvdXIgc2VydmljZS4gWWV0IEkgcGFzcyBieSB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGltcG9ydGFudCBvZiBteSBwdWJsaWMgYWN0aW9ucywgZmlyc3QsIGJlY2F1c2UgSSBjb25jZWl2ZSB0aGF0IG15IG5leHQgZHV0eSBpcwogICAgICAgICAgICAgICAgICAgIHRvIHN1Ym1pdCBteSBleHBsYW5hdGlvbnMgaW4gcmVzcGVjdCBvZiB0aGUgYWN0dWFsIGNoYXJnZSBvZiBpbGxlZ2FsaXR5LAogICAgICAgICAgICAgICAgICAgIHNlY29uZGx5LCBiZWNhdXNlLCB0aG91Z2ggSSBzYXkgbm90aGluZyBmdXJ0aGVyIGFib3V0IHRoZSByZXN0IG9mIG15IHBvbGljeSwKICAgICAgICAgICAgICAgICAgICB5b3VyIG93biBrbm93bGVkZ2Ugd2lsbCBzZXJ2ZSBteSBwdXJwb3NlIGVxdWFsbHkgd2VsbC4gPC90cmFuc2xhdGlvbj4="
translation['18.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFzIGZvciBBZXNjaGluZXMnIHRvcHN5LXR1cnZ5CiAgICAgICAgICAgICAgICAgICAgbWlzY2VsbGFueSBvZiBhcmd1bWVudHMgYWJvdXQgdGhlIHN0YXR1dGVzIHRyYW5zY3JpYmVkIGZvciBjb21wYXJpc29uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbGF3cyBhbGxlZ2VkIHRvIGJlIHZpb2xhdGVkIHdlcmUgcG9zdGVkIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdXJ0IHNpZGUgYnkgc2lkZSB3aXRoIHRoZSBsYXcgb3IgZGVjcmVlIHdoaWNoIHdhcyB0aGUgb2JqZWN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dGlvbi48L25vdGU+IEkgdm93IHRvIEhlYXZlbiB0aGF0IEkgZG8gbm90IGJlbGlldmUgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICB1bmRlcnN0YW5kIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlbSwgYW5kIEkgYW0gc3VyZSB0aGV5IHdlcmUgcXVpdGUKICAgICAgICAgICAgICAgICAgICB1bmludGVsbGlnaWJsZSB0byBtZS4gSSBjYW4gb25seSBvZmZlciBhIHBsYWluLCBzdHJhaWdodGZvcndhcmQgcGxlYSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICByaWdodHMgb2YgdGhlIG1hdHRlci4gU28gZmFyIGZyb20gY2xhaW1pbmcsIGFzIGhlIGludmlkaW91c2x5IHN1Z2dlc3RlZCBqdXN0CiAgICAgICAgICAgICAgICAgICAgbm93LCB0aGF0IEkgYW0gbm90IHRvIGJlIGNhbGxlZCB0byBhY2NvdW50LCBJIGZ1bGx5IGFkbWl0IHRoYXQgYWxsIG15IGxpZmUgbG9uZwogICAgICAgICAgICAgICAgICAgIEkgaGF2ZSBiZWVuIGFjY291bnRhYmxlIGZvciBhbGwgbXkgb2ZmaWNpYWwgYWN0cyBhbmQgcHVibGljIGNvdW5zZWxzOyA8L3RyYW5zbGF0aW9uPg=="
translation['18.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGZvciB0aGUgZG9uYXRpb25zIHRoYXQgSSBwcm9taXNlZCBhbmQgZ2F2ZSBhdCBteQogICAgICAgICAgICAgICAgICAgIG93biBleHBlbnNlIEkgZG8gc2F5IHRoYXQgSSBhbSBub3QgYWNjb3VudGFibGUgYXQgYW55IHRpbWXigJQgeW91IGhlYXIKICAgICAgICAgICAgICAgICAgICB0aGF0LCBBZXNjaGluZXPigJRub3IgaXMgYW55IG90aGVyIG1hbiwgdGhvdWdoIGhlIGJlIG9uZSBvZiB0aGUgbmluZQogICAgICAgICAgICAgICAgICAgIGFyY2hvbnMuIElzIHRoZXJlIGFueSBsYXcgc28gY29tcGFjdCBvZiBpbmlxdWl0eSBhbmQgaWxsaWJlcmFsaXR5IHRoYXQsIHdoZW4gYQogICAgICAgICAgICAgICAgICAgIG1hbiBvdXQgb2Ygc2hlZXIgZ2VuZXJvc2l0eSBoYXMgZ2l2ZW4gYXdheSBoaXMgb3duIG1vbmV5LCBpdCBkZWZyYXVkcyBoaW0gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JhdGl0dWRlIGhlIGhhcyBlYXJuZWQsIGRyYWdzIGhpbSBiZWZvcmUgYSBzZXQgb2YgcHJ5aW5nIGluZm9ybWVycywgYW5kIGdpdmVzCiAgICAgICAgICAgICAgICAgICAgdGhlbSBhdXRob3JpdHkgdG8gaG9sZCBhbiBhdWRpdCBvZiBoaXMgZnJlZSBkb25hdGlvbnM/IFRoZXJlIGlzIG5vIHN1Y2ggbGF3LiBJZgogICAgICAgICAgICAgICAgICAgIGhlIGNvbnRyYWRpY3RzIG1lLCBsZXQgaGltIHByb2R1Y2UgdGhlIGxhdywgYW5kIEkgd2lsbCBiZSBzYXRpc2ZpZWQgYW5kIGhvbGQgbXkKICAgICAgICAgICAgICAgICAgICBwZWFjZS4gPC90cmFuc2xhdGlvbj4="
translation['18.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vLCB0aGUgbGF3IGRvZXMgbm90IGV4aXN0LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBvbmx5IHRoaXMgbWFuLCB3aXRoIGhpcwogICAgICAgICAgICAgICAgICAgIHBldHRpZm9nZ2luZyBzcGl0ZSwgYmVjYXVzZSwgd2hlbiBJIHdhcyBpbiBjaGFyZ2Ugb2YgdGhlIHRoZWF0cmljIGZ1bmQsIEkgYWRkZWQKICAgICAgICAgICAgICAgICAgICBnaWZ0cyBvZiBteSBvd24gdG8gdGhhdCBmdW5kLCBzYXlzLCDigJw8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q3Rlc2lwaG9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IGdhdmUgaGltIGEgdm90ZSBvZiB0aGFua3MgYmVmb3JlIGhlIGhhZCByZW5kZXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBhY2NvdW50cy7igJ0gWWVzLCBidXQgdGhlIHZvdGUgb2YgdGhhbmtzIGRpZCBub3QgY29uY2VybiB0aGUgYWNjb3VudHMKICAgICAgICAgICAgICAgICAgICB3aGljaCBJIGhhZCB0byByZW5kZXI7IGl0IHdhcyBmb3IgbXkgb3duIGRvbmF0aW9ucywgeW91IHBldHRpZm9nZ2VyIQogICAgICAgICAgICAgICAgICAgIOKAnEJ1dCB5b3Ugd2VyZSBhbHNvIGEgQ29tbWlzc2lvbmVyIG9mIEZvcnRpZmljYXRpb25zLuKAnSBXaHksCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyBob3cgSSBlYXJuZWQgbXkgdm90ZSBvZiB0aGFua3M6IEkgbWFkZSBhIHByZXNlbnQgb2YgdGhlIG1vbmV5IEkgaGFkCiAgICAgICAgICAgICAgICAgICAgc3BlbnQsIGFuZCBkaWQgbm90IGNoYXJnZSBpdCB0byB0aGUgcHVibGljIGFjY291bnQuIFRoZSBhY2NvdW50IHJlcXVpcmVzIGFuCiAgICAgICAgICAgICAgICAgICAgYXVkaXQgYW5kIGNoZWNrZXJzOyB0aGUgYmVuZWZhY3Rpb24gZGVzZXJ2ZXMgZ3JhdGl0dWRlIGFuZCBmb3JtYWwgdGhhbmtzLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IGlzIHRoZSB2ZXJ5IHJlYXNvbiBmb3IgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkN0ZXNpcGhvbjwvc3VybmFtZT48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q3Rlc2lwaG9uPC9zdXJuYW1lPjwvcGVyc05hbWU+J3MKICAgICAgICAgICAgICAgICAgICBwcm9wb3NpdGlvbi4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkN0ZXNpcGhvbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['18.114'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTQiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCB0aGlzIGRpc3RpbmN0aW9uIGlzCiAgICAgICAgICAgICAgICAgICAgcmVjb2duaXplZCBib3RoIGluIHRoZSBzdGF0dXRlcyBhbmQgaW4geW91ciBtb3JhbCBmZWVsaW5ncyBJIGNhbiBwcm92ZSBieSBtYW55CiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzLiBOYXVzaWNsZXMsIGZvciBleGFtcGxlLCBoYXMgYmVlbiByZXBlYXRlZGx5IGRlY29yYXRlZCBieSB5b3UgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmV5IGhlIHNwZW50IG91dCBvZiBoaXMgb3duIHBvY2tldCB3aGVuIHNlcnZpbmcgYXMgbWlsaXRhcnkgY29tbWFuZGVyLiBXaGVuCiAgICAgICAgICAgICAgICAgICAgRGlvdGltdXMsIGFuZCBvbiBhbm90aGVyIG9jY2FzaW9uIENoYXJpZGVtdXMsIGhhZCBtYWRlIGEgcHJlc2VudCBvZiBzaGllbGRzLAogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBjcm93bmVkLiBUaGVuIHRoZXJlIGlzIG91ciBmcmllbmQgTmVvcHRvbGVtdXMsIHdobyBoYXMgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBkaXN0aW5jdGlvbnMgZm9yIGRvbmF0aW9ucyBnaXZlbiBieSBoaW0gYXMgQ29tbWlzc2lvbmVyIGZvciBzdW5kcnkgcHVibGljIHdvcmtzLgogICAgICAgICAgICAgICAgICAgIEl0IHdvdWxkIGJlIHF1aXRlIGludG9sZXJhYmxlIHRoYXQgaXQgc2hvdWxkIGVpdGhlciBiZSBpbGxlZ2FsIGZvciBhIG1hbiBob2xkaW5nCiAgICAgICAgICAgICAgICAgICAgYW55IG9mZmljZSB0byBtYWtlIHByZXNlbnRzIHRvIHRoZSBnb3Zlcm5tZW50LCBvciB0aGF0LCB3aGVuIGhlIGhhcyBtYWRlIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiByZWNlaXZpbmcgdGhhbmtzLCBoZSBzaG91bGQgYmUgc3ViamVjdGVkIHRvIGFuIGF1ZGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.115'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gcHJvdmUgdGhlIHRydXRoIG9mIG15IHN0YXRlbWVudCwgcGxlYXNlIHRha2UgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhZCB0aGUgYWN0dWFsIHdvcmRzIG9mIHRoZSBkZWNyZWVzIG1hZGUgaW4gdGhlIGNhc2VzIEkgaGF2ZSBjaXRlZC4gUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltBcmNob25zaGlwIG9mIERlbW9uaWN1cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU1Ij5QaGx5YTwvcGxhY2VOYW1lPiwgb24gdGhlIHR3ZW50eS1zaXh0aCBkYXkgb2YgQm9lZHJvbWlvbiwgd2l0aCBzYW5jdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBvZiBDb3VuY2lsIGFuZCBQZW9wbGU6IENhbGxpYXMgb2YgUGhyZWFycmlpIHByb3Bvc2VkIHRoYXQgdGhlIENvdW5jaWwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIFBlb3BsZSByZXNvbHZlIHRvIGNyb3duIE5hdXNpY2xlcywgdGhlIGNvbW1hbmRlciBvZiB0aGUgaW5mYW50cnksIGJlY2F1c2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gUGhpbG8sIHRoZSBvZmZpY2lhbCBwYXltYXN0ZXIsIHdhcyBwcmV2ZW50ZWQgYnkgc3Rvcm1zIGZyb20gc2FpbGluZwogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHBheSBmb3IgdGhlIHR3byB0aG91c2FuZCBBdGhlbmlhbiBpbmZhbnRyeSBzZXJ2aW5nIGluIEltYnJvcyB0byBhc3Npc3QKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEF0aGVuaWFuIHJlc2lkZW50cyBpbiB0aGF0IGlzbGFuZCwgaGUgcGFpZCB0aGVtIGZyb20gaGlzIHByaXZhdGUgbWVhbnMsCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBkaWQgbm90IHNlbmQgaW4gYSBjbGFpbSB0byB0aGUgcGVvcGxlOyBhbmQgdGhhdCB0aGUgY3Jvd24gYmUgcHJvY2xhaW1lZAogICAgICAgICAgICAgICAgICAgICAgICBhdCB0aGUgRGlvbnlzaWEgYXQgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBuZXcgdHJhZ2VkaWVzLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltBcmNob25zaGlwIG9mIERlbW9uaWN1cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU1Ij5QaGx5YTwvcGxhY2VOYW1lPiwgb24gdGhlIHR3ZW50eS1zaXh0aCBkYXkgb2YgQm9lZHJvbWlvbiwgd2l0aCBzYW5jdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBvZiBDb3VuY2lsIGFuZCBQZW9wbGU6IENhbGxpYXMgb2YgUGhyZWFycmlpIHByb3Bvc2VkIHRoYXQgdGhlIENvdW5jaWwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIFBlb3BsZSByZXNvbHZlIHRvIGNyb3duIE5hdXNpY2xlcywgdGhlIGNvbW1hbmRlciBvZiB0aGUgaW5mYW50cnksIGJlY2F1c2UsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gUGhpbG8sIHRoZSBvZmZpY2lhbCBwYXltYXN0ZXIsIHdhcyBwcmV2ZW50ZWQgYnkgc3Rvcm1zIGZyb20gc2FpbGluZwogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHBheSBmb3IgdGhlIHR3byB0aG91c2FuZCBBdGhlbmlhbiBpbmZhbnRyeSBzZXJ2aW5nIGluIEltYnJvcyB0byBhc3Npc3QKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEF0aGVuaWFuIHJlc2lkZW50cyBpbiB0aGF0IGlzbGFuZCwgaGUgcGFpZCB0aGVtIGZyb20gaGlzIHByaXZhdGUgbWVhbnMsCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBkaWQgbm90IHNlbmQgaW4gYSBjbGFpbSB0byB0aGUgcGVvcGxlOyBhbmQgdGhhdCB0aGUgY3Jvd24gYmUgcHJvY2xhaW1lZAogICAgICAgICAgICAgICAgICAgICAgICBhdCB0aGUgRGlvbnlzaWEgYXQgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZSBuZXcgdHJhZ2VkaWVzLl08L3RyYW5zbGF0aW9uPg=="
translation['18.116'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTYiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQW5vdGhlciBEZWNyZWUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFub3RoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlY3JlZTwvdGl0bGU+W1Byb3Bvc2VkIGJ5IENhbGxpYXMgb2YgUGhyZWFycmlpLCBhbmQgcHV0IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHZvdGUgYnkgdGhlIHByZXNpZGVudHMsIHdpdGggc2FuY3Rpb24gb2YgQ291bmNpbDogdGhhdCwgd2hlcmVhcyBDaGFyaWRlbXVzLAogICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaGVkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4gaW4gY29tbWFuZCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgaW5mYW50cnksIGFuZCBEaW90aW11cywgY29tbWFuZGluZyB0aGUgY2F2YWxyeSwgd2hlbiBpbiB0aGUgYmF0dGxlIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSByaXZlciBzb21lIG9mIHRoZSBzb2xkaWVycyBoYWQgYmVlbiBkaXNhcm1lZCBieSB0aGUgZW5lbXksIGRpZCBhdCB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICBvd24gZXhwZW5zZSBhcm0gdGhlIHlvdW5nZXIgbWVuIHdpdGggZWlnaHQgaHVuZHJlZCBzaGllbGRzLCBpdCBiZSByZXNvbHZlZAogICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgQ291bmNpbCBhbmQgUGVvcGxlIHRvIGNyb3duIENoYXJpZGVtdXMgYW5kIERpb3RpbXVzIHdpdGggYSBnb2xkZW4KICAgICAgICAgICAgICAgICAgICAgICAgY3Jvd24sIGFuZCB0byBwcm9jbGFpbSBpdCBhdCB0aGUgZ3JlYXQgUGFuYXRoZW5hZWEgZHVyaW5nIHRoZSBneW1uYXN0aWMKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVzdCwgYW5kIGF0IHRoZSBEaW9ueXNpYSBhdCB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlIG5ldyB0cmFnZWRpZXM7IGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBwcm9jbGFtYXRpb24gYmUgZW50cnVzdGVkIHRvIHRoZSBqdWRpY2lhbCBhcmNob25zLCB0aGUgcHJlc2lkZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzdGV3YXJkcyBvZiB0aGUgZmVzdGl2YWwuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5vdGhlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVjcmVlPC90aXRsZT5bUHJvcG9zZWQgYnkgQ2FsbGlhcyBvZiBQaHJlYXJyaWksIGFuZCBwdXQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgdm90ZSBieSB0aGUgcHJlc2lkZW50cywgd2l0aCBzYW5jdGlvbiBvZiBDb3VuY2lsOiB0aGF0LCB3aGVyZWFzIENoYXJpZGVtdXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZWQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjM0MCI+U2FsYW1pczwvcGxhY2VOYW1lPiBpbiBjb21tYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBpbmZhbnRyeSwgYW5kIERpb3RpbXVzLCBjb21tYW5kaW5nIHRoZSBjYXZhbHJ5LCB3aGVuIGluIHRoZSBiYXR0bGUgYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJpdmVyIHNvbWUgb2YgdGhlIHNvbGRpZXJzIGhhZCBiZWVuIGRpc2FybWVkIGJ5IHRoZSBlbmVteSwgZGlkIGF0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgIG93biBleHBlbnNlIGFybSB0aGUgeW91bmdlciBtZW4gd2l0aCBlaWdodCBodW5kcmVkIHNoaWVsZHMsIGl0IGJlIHJlc29sdmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBDb3VuY2lsIGFuZCBQZW9wbGUgdG8gY3Jvd24gQ2hhcmlkZW11cyBhbmQgRGlvdGltdXMgd2l0aCBhIGdvbGRlbgogICAgICAgICAgICAgICAgICAgICAgICBjcm93biwgYW5kIHRvIHByb2NsYWltIGl0IGF0IHRoZSBncmVhdCBQYW5hdGhlbmFlYSBkdXJpbmcgdGhlIGd5bW5hc3RpYwogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXN0LCBhbmQgYXQgdGhlIERpb255c2lhIGF0IHRoZSBwZXJmb3JtYW5jZSBvZiB0aGUgbmV3IHRyYWdlZGllczsgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHByb2NsYW1hdGlvbiBiZSBlbnRydXN0ZWQgdG8gdGhlIGp1ZGljaWFsIGFyY2hvbnMsIHRoZSBwcmVzaWRlbnRzLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHN0ZXdhcmRzIG9mIHRoZSBmZXN0aXZhbC5dPC90cmFuc2xhdGlvbj4="
translation['18.117'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkV2ZXJ5IG9uZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwZXJzb25zIG1lbnRpb25lZCwgQWVzY2hpbmVzLCB3YXMgbGlhYmxlIHRvIGF1ZGl0IGluIHJlc3BlY3Qgb2YgdGhlIG9mZmljZQogICAgICAgICAgICAgICAgICAgIGhlIGhlbGQsIGJ1dCBub3Qgb2YgdGhlIHNlcnZpY2VzIGZvciB3aGljaCBoZSB3YXMgZGVjb3JhdGVkLiBJdCBmb2xsb3dzIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIGFtIG5vdCBsaWFibGU7IGZvciwgc3VyZWx5LCBJIGhhdmUgdGhlIHNhbWUgcmlnaHRzIHVuZGVyIHRoZSBzYW1lIGNvbmRpdGlvbnMgYXMKICAgICAgICAgICAgICAgICAgICBhbnlib2R5IGVsc2UhIEkgbWFkZSBkb25hdGlvbnMuIEZvciB0aG9zZSBkb25hdGlvbnMgSSBhbSB0aGFua2VkLCBub3QgYmVpbmcKICAgICAgICAgICAgICAgICAgICBzdWJqZWN0IHRvIGF1ZGl0IGZvciB3aGF0IEkgZ2F2ZS4gSSBoZWxkIG9mZmljZS4gWWVzLCBhbmQgSSBoYXZlIHN1Ym1pdHRlZCB0bwogICAgICAgICAgICAgICAgICAgIGF1ZGl0IGZvciBteSBvZmZpY2VzLCB0aG91Z2ggbm90IGZvciBteSBnaWZ0cy4gQWgsIGJ1dCBwZXJoYXBzIEkgd2FzIGd1aWx0eSBvZgogICAgICAgICAgICAgICAgICAgIG9mZmljaWFsIG1pc2NvbmR1Y3Q/IFdlbGwsIHRoZSBhdWRpdG9ycyBicm91Z2h0IG1lIGludG8gY291cnTigJRhbmQgbm8KICAgICAgICAgICAgICAgICAgICBjb21wbGFpbnQgZnJvbSB5b3UhIDwvdHJhbnNsYXRpb24+"
translation['18.118'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgQWVzY2hpbmVzIGhpbXNlbGYgdGVzdGlmaWVzIHRoYXQgSSBoYXZlIGJlZW4gY3Jvd25lZAogICAgICAgICAgICAgICAgICAgIGZvciBtYXR0ZXJzIGluIHdoaWNoIEkgd2FzIGF1ZGl0LWZyZWUsIHRha2UgYW5kIHJlYWQgdGhlIHdob2xlIG9mIHRoZSBkZWNyZWUKICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcyBkcmF3biBpbiBteSBmYXZvci4gVGhlIHByb29mIHRoYXQgaGlzIHByb3NlY3V0aW9uIGlzIHZpbmRpY3RpdmUgd2lsbAogICAgICAgICAgICAgICAgICAgIGFwcGVhciBmcm9tIHRob3NlIHNlbnRlbmNlcyBpbiB0aGUgcHJvdmlzaW9uYWwgZGVjcmVlIHdoaWNoIGhlIGhhcyBub3QgaW5kaWN0ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlIGFyY2hvbnNoaXAgb2YgRXV0aHljbGVzLCBvbiB0aGUgdHdlbnR5LXRoaXJkIGRheSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUHlhbmVwc2lvbiwgdGhlIHRyaWJlIE9lbmVpcyB0aGVuIGhvbGRpbmcgdGhlIHByZXNpZGVuY3ksIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5DdGVzaXBob248L3N1cm5hbWU+PC9wZXJzTmFtZT4sIHNvbiBvZiBMZW9zdGhlbmVzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBBbmFwaGx5c3R1cywgcHJvcG9zZWQgdGhhdCwgd2hlcmVhcyBEZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBQYWVhbmlhLCBoYXZpbmcgYmVlbiBhcHBvaW50ZWQgc3VwZXJpbnRlbmRlbnQgb2YgdGhlIHJlcGFpciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZm9ydGlmaWNhdGlvbnMsIGFuZCBoYXZpbmcgc3BlbnQgdXBvbiB0aGUgd29ya3MgdGhyZWUgdGFsZW50cyBmcm9tIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBwcml2YXRlIG1lYW5zLCBoYXMgbWFkZSB0aGUgc2FtZSBhIGJlbmV2b2xlbmNlIHRvIHRoZSBwZW9wbGU7IGFuZCB3aGVyZWFzLAogICAgICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYmVlbiBhcHBvaW50ZWQgdHJlYXN1cmVyIG9mIHRoZSBUaGVhdHJpY2FsIEZ1bmQsIGhlIGdhdmUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcHJlc2VudGF0aXZlcyBvZiBhbGwgdGhlIHRyaWJlcyBvbmUgaHVuZHJlZCBtaW5hcyBmb3Igc2FjcmlmaWNlcywgaXQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgYnkgdGhlIENvdW5jaWwgYW5kIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gY29tbWVuZCB0aGUgc2FpZCBEZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLAogICAgICAgICAgICAgICAgICAgICAgICBvZiBQYWVhbmlhLCBmb3IgaGlzIG1lcml0cyBhbmQgZm9yIHRoZSBnZW5lcm9zaXR5IHdoaWNoIGhlIGhhcyBjb25zdGFudGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZCBvbiBldmVyeSBvY2Nhc2lvbiB0b3dhcmRzIHRoZSBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgdG8gY3Jvd24gaGltIHdpdGggYSBnb2xkZW4KICAgICAgICAgICAgICAgICAgICAgICAgY3Jvd24sIGFuZCB0byBwcm9jbGFpbSB0aGUgY3Jvd24gaW4gdGhlIHRoZWF0cmUgYXQgdGhlIERpb255c2lhIGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZSBvZiB0aGUgbmV3IHRyYWdlZGllcyBhbmQgdGhhdCB0aGUgcHJvY2xhbWF0aW9uIGJlIGVudHJ1c3RlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3Rld2FyZCBvZiB0aGUgZmVzdGl2YWwuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0luIHRoZSBhcmNob25zaGlwIG9mIEV1dGh5Y2xlcywgb24gdGhlIHR3ZW50eS10aGlyZCBkYXkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFB5YW5lcHNpb24sIHRoZSB0cmliZSBPZW5laXMgdGhlbiBob2xkaW5nIHRoZSBwcmVzaWRlbmN5LCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q3Rlc2lwaG9uPC9zdXJuYW1lPjwvcGVyc05hbWU+LCBzb24gb2YgTGVvc3RoZW5lcywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQW5hcGhseXN0dXMsIHByb3Bvc2VkIHRoYXQsIHdoZXJlYXMgRGVtb3N0aGVuZXMsIHNvbiBvZiBEZW1vc3RoZW5lcywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgUGFlYW5pYSwgaGF2aW5nIGJlZW4gYXBwb2ludGVkIHN1cGVyaW50ZW5kZW50IG9mIHRoZSByZXBhaXIgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb25zLCBhbmQgaGF2aW5nIHNwZW50IHVwb24gdGhlIHdvcmtzIHRocmVlIHRhbGVudHMgZnJvbSBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBtZWFucywgaGFzIG1hZGUgdGhlIHNhbWUgYSBiZW5ldm9sZW5jZSB0byB0aGUgcGVvcGxlOyBhbmQgd2hlcmVhcywKICAgICAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGJlZW4gYXBwb2ludGVkIHRyZWFzdXJlciBvZiB0aGUgVGhlYXRyaWNhbCBGdW5kLCBoZSBnYXZlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICByZXByZXNlbnRhdGl2ZXMgb2YgYWxsIHRoZSB0cmliZXMgb25lIGh1bmRyZWQgbWluYXMgZm9yIHNhY3JpZmljZXMsIGl0IGJlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVkIGJ5IHRoZSBDb3VuY2lsIGFuZCBQZW9wbGUgb2YgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkN0ZXNpcGhvbjwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gY29tbWVuZCB0aGUgc2FpZCBEZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLAogICAgICAgICAgICAgICAgICAgICAgICBvZiBQYWVhbmlhLCBmb3IgaGlzIG1lcml0cyBhbmQgZm9yIHRoZSBnZW5lcm9zaXR5IHdoaWNoIGhlIGhhcyBjb25zdGFudGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZCBvbiBldmVyeSBvY2Nhc2lvbiB0b3dhcmRzIHRoZSBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgdG8gY3Jvd24gaGltIHdpdGggYSBnb2xkZW4KICAgICAgICAgICAgICAgICAgICAgICAgY3Jvd24sIGFuZCB0byBwcm9jbGFpbSB0aGUgY3Jvd24gaW4gdGhlIHRoZWF0cmUgYXQgdGhlIERpb255c2lhIGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZSBvZiB0aGUgbmV3IHRyYWdlZGllcyBhbmQgdGhhdCB0aGUgcHJvY2xhbWF0aW9uIGJlIGVudHJ1c3RlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3Rld2FyZCBvZiB0aGUgZmVzdGl2YWwuXTwvdHJhbnNsYXRpb24+"
translation['18.119'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlcmUsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgYXJlIG15IGRvbmF0aW9ucywgaW4gdGhlIGRlY3JlZeKAlGJ1dCBub3QgaW4geW91ciBpbmRpY3RtZW50LiBZb3VyCiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRpb24gaXMgZGlyZWN0ZWQgdG8gdGhlIHJld2FyZHMgd2hpY2ggdGhlIENvdW5jaWwgc2F5cyB0aGF0IEkgb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICByZWNlaXZlIGZvciB0aGVtLiBBY2NlcHRhbmNlIG9mIGdpZnRzIHlvdSBhZG1pdCB0byBiZSBsZWdhbDsgZ3JhdGl0dWRlIGZvciBnaWZ0cwogICAgICAgICAgICAgICAgICAgIHlvdSBpbmRpY3QgZm9yIGlsbGVnYWxpdHkuIEluIEhlYXZlbidzIG5hbWUsIHdoYXQgZG8gd2UgbWVhbiBieSBkaXNob25lc3R5IGFuZAogICAgICAgICAgICAgICAgICAgIG1hbGlnbml0eSwgaWYgeW91IGFyZSBub3QgZGlzaG9uZXN0IGFuZCBtYWxpZ25hbnQ/IDwvdHJhbnNsYXRpb24+"
translation['18.120'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFzIGZvciB0aGUgcHJvY2xhbWF0aW9uIGluIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZWF0cmUsIEkgd2lsbCBub3QgaW5zaXN0IHRoYXQgdGhvdXNhbmRzIG9mIG5hbWVzIGhhdmUgYmVlbiBhIHRob3VzYW5kIHRpbWVzIHNvCiAgICAgICAgICAgICAgICAgICAgcHJvY2xhaW1lZCwgbm9yIHRoYXQgSSBteXNlbGYgaGF2ZSBiZWVuIGNyb3duZWQgYWdhaW4gYW5kIGFnYWluIGJlZm9yZSBub3cuIEJ1dCwKICAgICAgICAgICAgICAgICAgICByZWFsbHkgbm93LCBhcmUgeW91IHNvIHVuaW50ZWxsaWdlbnQgYW5kIGJsaW5kLCBBZXNjaGluZXMsIHRoYXQgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIGluY2FwYWJsZSBvZiByZWZsZWN0aW5nIHRoYXQgYSBjcm93biBpcyBlcXVhbGx5IGdyYXRpZnlpbmcgdG8gdGhlIHBlcnNvbiBjcm93bmVkCiAgICAgICAgICAgICAgICAgICAgd2hlcmVzb2V2ZXIgaXQgaXMgcHJvY2xhaW1lZCwgYnV0IHRoYXQgdGhlIHByb2NsYW1hdGlvbiBpcyBtYWRlIGluIHRoZSBUaGVhdHJlCiAgICAgICAgICAgICAgICAgICAgbWVyZWx5IGZvciB0aGUgc2FrZSBvZiB0aG9zZSBieSB3aG9tIGl0IGlzIGNvbmZlcnJlZD8gRm9yIHRoZSB3aG9sZSB2YXN0CiAgICAgICAgICAgICAgICAgICAgYXVkaWVuY2UgaXMgc3RpbXVsYXRlZCB0byBkbyBzZXJ2aWNlIHRvIHRoZSBjb21tb253ZWFsdGgsIGFuZCBhcHBsYXVkcyB0aGUKICAgICAgICAgICAgICAgICAgICBleGhpYml0aW9uIG9mIGdyYXRpdHVkZSByYXRoZXIgdGhhbiB0aGUgcmVjaXBpZW50OyBhbmQgdGhhdCBpcyB0aGUgcmVhc29uIHdoeQogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZSBoYXMgZW5hY3RlZCB0aGlzIHN0YXR1dGUuIFBsZWFzZSB0YWtlIGFuZCByZWFkIGl0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0luIGNhc2VzCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlIGNyb3ducyBhcmUgYmVzdG93ZWQgYnkgYW55IG9mIHRoZSB0b3duc2hpcHMsIHRoZSBwcm9jbGFtYXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3duIHNoYWxsIGJlIG1hZGUgd2l0aGluIHRoZSByZXNwZWN0aXZlIHRvd25zaGlwcywgdW5sZXNzIHRoZSBjcm93biBpcwogICAgICAgICAgICAgICAgICAgICAgICBiZXN0b3dlZCBieSB0aGUgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICBvciBieSB0aGUgQ291bmNpbCwgaW4gd2hpY2ggY2FzZSBpdCBzaGFsbCBiZSBsYXdmdWwgdG8gcHJvY2xhaW0gaXQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZWF0cmUgYXQgdGhlIERpb255c2lhLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiBjYXNlcwogICAgICAgICAgICAgICAgICAgICAgICB3aGVyZSBjcm93bnMgYXJlIGJlc3Rvd2VkIGJ5IGFueSBvZiB0aGUgdG93bnNoaXBzLCB0aGUgcHJvY2xhbWF0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjcm93biBzaGFsbCBiZSBtYWRlIHdpdGhpbiB0aGUgcmVzcGVjdGl2ZSB0b3duc2hpcHMsIHVubGVzcyB0aGUgY3Jvd24gaXMKICAgICAgICAgICAgICAgICAgICAgICAgYmVzdG93ZWQgYnkgdGhlIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgb3IgYnkgdGhlIENvdW5jaWwsIGluIHdoaWNoIGNhc2UgaXQgc2hhbGwgYmUgbGF3ZnVsIHRvIHByb2NsYWltIGl0IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBUaGVhdHJlIGF0IHRoZSBEaW9ueXNpYS5dPC90cmFuc2xhdGlvbj4="
translation['18.121'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBoZWFyLAogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcywgaG93IHRoZSBzdGF0dXRlIGV4cHJlc3NseSBtYWtlcyBhbiBleGNlcHRpb246IOKAnHBlcnNvbnMKICAgICAgICAgICAgICAgICAgICBuYW1lZCBpbiBhbnkgZGVjcmVlIG9mIHRoZSBDb3VuY2lsIG9yIHRoZSBBc3NlbWJseSBhbHdheXMgZXhjZXB0ZWQuIFRoZXkgYXJlIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgcHJvY2xhaW1lZC7igJ0gVGhlbiB3aHkgdGhpcyBtaXNlcmFibGUgcGV0dGlmb2dnaW5nPyBXaHkgdGhlc2UKICAgICAgICAgICAgICAgICAgICBpbnNpbmNlcmUgYXJndW1lbnRzPyBXaHkgZG8geW91IG5vdCB0cnkgaGVsbGVib3JlIGZvciB5b3VyIGNvbXBsYWludD8gQXJlIHlvdQogICAgICAgICAgICAgICAgICAgIG5vdCBhc2hhbWVkIHRvIHByb3NlY3V0ZSBmb3Igc3BpdGUsIG5vdCBmb3IgY3JpbWU7IG1pc3F1b3RpbmcgdGhpcyBzdGF0dXRlLAogICAgICAgICAgICAgICAgICAgIGN1cnRhaWxpbmcgdGhhdCBzdGF0dXRlLCB3aGVuIHRoZXkgb3VnaHQgdG8gYmUgcmVhZCBpbiB0aGVpciBlbnRpcmV0eSB0byBhIGp1cnkKICAgICAgICAgICAgICAgICAgICBzd29ybiB0byB2b3RlIGFjY29yZGluZyB0byB0aGVpciBkaXJlY3Rpb24/IDwvdHJhbnNsYXRpb24+"
translation['18.122'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kLCB3aGlsZSBiZWhhdmluZyBsaWtlIHRoYXQsIHlvdSB0cmVhdCB1cyB0byB5b3VyIGRlZmluaXRpb24gb2YgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHF1YWxpdGllcyBwcm9wZXIgdG8gYSBwYXRyaW90aWMgcG9saXRpY2lhbuKAlGFzIHRob3VnaCB5b3UgaGFkIGJlc3Bva2VuCiAgICAgICAgICAgICAgICAgICAgYSBzdGF0dWUgYWNjb3JkaW5nIHRvIHNwZWNpZmljYXRpb24sIGFuZCBpdCBoYWQgYmVlbiBkZWxpdmVyZWQgd2l0aG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBxdWFsaXRpZXMgc3BlY2lmaWVkICEgQXMgdGhvdWdoIHRhbGssIG5vdCBkZWVkcyBhbmQgcG9saWN5LCB3ZXJlIHRoZSBjcml0ZXJpb24KICAgICAgICAgICAgICAgICAgICBvZiBwYXRyaW90aXNtICEgQW5kIHRoZW4geW91IHJhaXNlIHlvdXIgdm9pY2UsIGxpa2UgYSBjbG93biBhdCBhIGNhcm5pdmFsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5saWtlIGEgY2xvd24gYXQgYSBjYXJuaXZhbDogbGl0LiwgYXMgZnJvbSBhCiAgICAgICAgICAgICAgICAgICAgICAgIHdhZ29uLCBpbiB0aGUgcHJvY2Vzc2lvbiBhdCBhIERpb255c2lhYyBmZXN0aXZhbCwgd2hlbiBjb2Fyc2UgcmFpbGxlcnkgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbWFyeS4gQSBzaW1pbGFyIGV4cHJlc3Npb24gaXMgdXNlZCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjExIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOC4xMTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTI0IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjEyNDwvYmlibD4uPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICBwZWx0IG1lIHdpdGggZXBpdGhldHMgYm90aCBkZWNlbnQgYW5kIG9ic2NlbmUsIHN1aXRhYmxlIGZvciB5b3Vyc2VsZiBhbmQgeW91cgogICAgICAgICAgICAgICAgICAgIGtpbmRyZWQsIGJ1dCBub3QgZm9yIG1lLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjExIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOC4xMTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTI0IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjEyNDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['18.123'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlcmUgaXMgYW5vdGhlciBwb2ludCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiByYWlsaW5nIGFuZAogICAgICAgICAgICAgICAgICAgIGFjY3VzYXRpb24gSSB0YWtlIHRvIGJlIHRoaXM6IGFjY3VzYXRpb24gaW1wbGllcyBjcmltZXMgcHVuaXNoYWJsZSBieSBsYXc7CiAgICAgICAgICAgICAgICAgICAgcmFpbGluZywgc3VjaCBhYnVzZSBhcyBxdWFycmVsc29tZSBwZW9wbGUgdmVudCB1cG9uIG9uZSBhbm90aGVyIGFjY29yZGluZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZWlyIGRpc3Bvc2l0aW9uLiBUaGVzZSBsYXcgY291cnRzLCBpZiBJIGFtIG5vdCBtaXN0YWtlbiwgd2VyZSBidWlsdCBieSBvdXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMsIG5vdCB0aGF0IHdlIHNob3VsZCBjb252ZW5lIHlvdSBoZXJlIHRvIGxpc3RlbiB0byB1cyB0YXVudGluZyBvbmUKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHdpdGggdGhlIHNlY3JldCBzY2FuZGFsIG9mIHByaXZhdGUgbGlmZSwgYnV0IHRoYXQgd2Ugc2hvdWxkIGhlcmUgYnJpbmcKICAgICAgICAgICAgICAgICAgICBob21lIHRvIHRoZSBndWlsdHkgb2ZmZW5jZXMgYWdhaW5zdCB0aGUgcHVibGljIHdlYWwuIDwvdHJhbnNsYXRpb24+"
translation['18.124'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjQiIHVuaXQ9InNlY3Rpb24iIC8+QWVzY2hpbmVzIGtub3dzIHRoYXQgYXMgd2VsbCBhcyBJIGRvOyBidXQgaGUgaGFzIGEga2VlbmVyIHRhc3RlIGZvcgogICAgICAgICAgICAgICAgICAgIHNjdXJyaWxpdHkgdGhhbiBmb3IgYWNjdXNhdGlvbi4gSG93ZXZlciwgZXZlbiBpbiB0aGF0IHJlc3BlY3QgaGUgZGVzZXJ2ZXMgdG8gZ2V0CiAgICAgICAgICAgICAgICAgICAgYXMgZ29vZCBhcyBoZSBnaXZlcy4gSSB3aWxsIGNvbWUgdG8gdGhhdCBwcmVzZW50bHk7IG1lYW50aW1lIEkgd2lsbCBhc2sgaGltIGp1c3QKICAgICAgICAgICAgICAgICAgICBvbmUgcXVlc3Rpb24uIEFyZSB3ZSB0byBjYWxsIHlvdSB0aGUgZW5lbXkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBBZXNjaGluZXMsIG9yIG15IGVuZW15PyBNaW5lLCBvZiBjb3Vyc2UuIFlldCB5b3UgbGV0CiAgICAgICAgICAgICAgICAgICAgc2xpcCB5b3VyIHByb3BlciBvcHBvcnR1bml0aWVzIG9mIGJyaW5naW5nIG1lIHRvIGp1c3RpY2Ugb24gYmVoYWxmIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zLCBpZiBJIGhhZCBkb25lIHdyb25nLCBieSBhdWRpdCwgYnkgaW5kaWN0bWVudCwgYnkgYW55IHNvcnQgb2YgbGVnYWwKICAgICAgICAgICAgICAgICAgICBwcm9jZWR1cmU7IDwvdHJhbnNsYXRpb24+"
translation['18.125'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGhlcmUsIHdoZXJlIEkgYW0gaW52dWxuZXJhYmxlCiAgICAgICAgICAgICAgICAgICAgb24gZXZlcnkgZ3JvdW5kLCBieSBsYXcsIGJ5IGxhcHNlIG9mIHRpbWUsIGJ5IGxpbWl0YXRpb24sIGJ5IG1hbnkgZWFybGllcgogICAgICAgICAgICAgICAgICAgIGp1ZGdlbWVudHMgY292ZXJpbmcgZXZlcnkgcG9pbnQsIGJ5IGRlZmF1bHQgb2YgYW55IHByZXZpb3VzIGNvbnZpY3Rpb24gZm9yIGFueQogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBvZmZlbmNlLCBoZXJlLCB3aGVyZSB0aGUgY291bnRyeSBtdXN0IHRha2UgaGVyIHNoYXJlIGluIHRoZSByZXB1dGUgb3IKICAgICAgICAgICAgICAgICAgICBkaXNyZXB1dGUgb2YgbWVhc3VyZXMgdGhhdCB3ZXJlIGFwcHJvdmVkIGJ5IHRoZSBwZW9wbGUsIGhlcmUgeW91IGhhdmUgbWV0IG1lCiAgICAgICAgICAgICAgICAgICAgZmFjZSB0byBmYWNlLiBZb3UgcG9zZSBhcyBteSBlbmVteTsgYXJlIHlvdSBzdXJlIHlvdSBhcmUgbm90IHRoZSBlbmVteSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGU/IDwvdHJhbnNsYXRpb24+"
translation['18.126'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkEKICAgICAgICAgICAgICAgICAgICByaWdodGVvdXMgYW5kIGNvbnNjaWVudGlvdXMgdmVyZGljdCBpcyBub3cgc3VmZmljaWVudGx5IGluZGljYXRlZDsgYnV0IEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHN0aWxsLCBhcyBpdCBzZWVtc+KAlG5vdCBiZWNhdXNlIEkgaGF2ZSBhbnkgdGFzdGUgZm9yIHJhaWxpbmcsIGJ1dAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2Ugb2YgaGlzIGNhbHVtbmllc+KAlHRvIHN0YXRlIHRoZSBiYXJlIG5lY2Vzc2FyeSBmYWN0cyBhYm91dAogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcywgaW4gcmV0dXJuIGZvciBhIGdyZWF0IG1hbnkgbGllcy4gSSBtdXN0IGxldCB5b3Uga25vdyB3aG8gdGhpcyBtYW4sCiAgICAgICAgICAgICAgICAgICAgd2hvIHN0YXJ0cyBvbiB2aXR1cGVyYXRpb24gc28gZ2xpYmx54oCUd2hvIHJpZGljdWxlcyBjZXJ0YWluIHdvcmRzIG9mCiAgICAgICAgICAgICAgICAgICAgbWluZSB0aG91Z2ggaGUgaGFzIGhpbXNlbGYgc2FpZCB0aGluZ3MgdGhhdCBldmVyeSBkZWNlbnQgbWFuIHdvdWxkIHNocmluayBmcm9tCiAgICAgICAgICAgICAgICAgICAgdXR0ZXJpbmfigJRyZWFsbHkgaXMsIGFuZCB3aGF0IGlzIGhpcyBwYXJlbnRhZ2UuIDwvdHJhbnNsYXRpb24+"
translation['18.127'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjciIHVuaXQ9InNlY3Rpb24iIC8+V2h5LCBpZiBteSBjYWx1bW5pYXRvciBoYWQgYmVlbiBBZWFjdXMsIG9yCiAgICAgICAgICAgICAgICAgICAgUmhhZGFtYW50aHVzLCBvciBNaW5vcywgaW5zdGVhZCBvZiBhIG1lcmUgc2NhbmRhbG1vbmdlciwgYSBtYXJrZXQtcGxhY2UgbG9hZmVyLAogICAgICAgICAgICAgICAgICAgIGEgcG9vciBkZXZpbCBvZiBhIGNsZXJrLCBoZSBjb3VsZCBoYXJkbHkgaGF2ZSB1c2VkIHN1Y2ggbGFuZ3VhZ2UsIG9yIGVxdWlwcGVkCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB3aXRoIHN1Y2ggb2ZmZW5zaXZlIGV4cHJlc3Npb25zLiBIYXJrIHRvIGhpcyBtZWxvZHJhbWF0aWMgYm9tYmFzdDoKICAgICAgICAgICAgICAgICAgICDigJxPaCwgRWFydGghIE9oLCBTdW4hIE9oLCBWaXJ0dWUs4oCdIGFuZCBhbGwgdGhhdCB2YXBvcmluZzsgaGlzCiAgICAgICAgICAgICAgICAgICAgYXBwZWFscyB0byDigJxpbnRlbGxpZ2VuY2UgYW5kIGVkdWNhdGlvbiwgd2hlcmVieSB3ZSBkaXNjcmltaW5hdGUKICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIHRoaW5ncyBvZiBnb29kIGFuZCBldmlsIHJlcG9ydOKAneKAlGZvciB0aGF0IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBzb3J0IG9mIHJ1YmJpc2ggeW91IGhlYXJkIGhpbSBzcG91dGluZy4gPC90cmFuc2xhdGlvbj4="
translation['18.128'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjgiIHVuaXQ9InNlY3Rpb24iIC8+VmlydHVlISB5b3UgcnVuYWdhdGU7IHdoYXQgaGF2ZSB5b3Ugb3IgeW91ciBmYW1pbHkgdG8gZG8gd2l0aCB2aXJ0dWU/IEhvdyBkbwogICAgICAgICAgICAgICAgICAgIHlvdSBkaXN0aW5ndWlzaCBiZXR3ZWVuIGdvb2QgYW5kIGV2aWwgcmVwb3J0PyBXaGVyZSBhbmQgaG93IGRpZCB5b3UgcXVhbGlmeSBhcyBhCiAgICAgICAgICAgICAgICAgICAgbW9yYWxpc3Q/IFdoZXJlIGRpZCB5b3UgZ2V0IHlvdXIgcmlnaHQgdG8gdGFsayBhYm91dCBlZHVjYXRpb24/IE5vIHJlYWxseQogICAgICAgICAgICAgICAgICAgIGVkdWNhdGVkIG1hbiB3b3VsZCB1c2Ugc3VjaCBsYW5ndWFnZSBhYm91dCBoaW1zZWxmLCBidXQgd291bGQgcmF0aGVyIGJsdXNoIHRvCiAgICAgICAgICAgICAgICAgICAgaGVhciBpdCBmcm9tIG90aGVyczsgYnV0IHBlb3BsZSBsaWtlIHlvdSwgd2hvIG1ha2Ugc3R1cGlkIHByZXRlbnNpb25zIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGN1bHR1cmUgb2Ygd2hpY2ggdGhleSBhcmUgdXR0ZXJseSBkZXN0aXR1dGUsIHN1Y2NlZWQgaW4gZGlzZ3VzdGluZyBldmVyeWJvZHkKICAgICAgICAgICAgICAgICAgICB3aGVuZXZlciB0aGV5IG9wZW4gdGhlaXIgbGlwcywgYnV0IG5ldmVyIGluIG1ha2luZyB0aGUgaW1wcmVzc2lvbiB0aGV5IGRlc2lyZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.129'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgYW0gYXQgbm8KICAgICAgICAgICAgICAgICAgICBsb3NzIGZvciBpbmZvcm1hdGlvbiBhYm91dCB5b3UgYW5kIHlvdXIgZmFtaWx5OyBidXQgSSBhbSBhdCBhIGxvc3Mgd2hlcmUgdG8KICAgICAgICAgICAgICAgICAgICBiZWdpbi4gU2hhbGwgSSByZWxhdGUgaG93IHlvdXIgZmF0aGVyIFRyb21lcyB3YXMgYSBzbGF2ZSBpbiB0aGUgaG91c2Ugb2YgRWxwaWFzLAogICAgICAgICAgICAgICAgICAgIHdobyBrZXB0IGFuIGVsZW1lbnRhcnkgc2Nob29sIG5lYXIgdGhlIFRlbXBsZSBvZiBUaGVzZXVzLCBhbmQgaG93IGhlIHdvcmUKICAgICAgICAgICAgICAgICAgICBzaGFja2xlcyBvbiBoaXMgbGVncyBhbmQgYSB0aW1iZXIgY29sbGFyIHJvdW5kIGhpcyBuZWNrPyBvciBob3cgeW91ciBtb3RoZXIKICAgICAgICAgICAgICAgICAgICBwcmFjdGlzZWQgZGF5bGlnaHQgbnVwdGlhbHMgaW4gYW4gb3V0aG91c2UgbmV4dCBkb29yIHRvIEhlcm9zIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBib25lLXNldHRlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGVyb3MgdGhlIGJvbmUtc2V0dGVyOiB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVycHJldGF0aW9uIGlzIGRvdWJ0ZnVsOyBpdCBhc3N1bWVzIO+8iDHvvIkgaWRlbnRpdHkgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNvbiBjYWxsZWQsIG1vcmUgcmVzcGVjdGZ1bGx5LCBIZXJvcyB0aGUgcGh5c2ljaWFuLCBpbiBhIHNpbWlsYXIgcGFzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc3BlZWNoIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBFbWJhc3N5PC90aXRsZT4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE5PC9iaWJsPjsg77yIMu+8iSB0aGF0PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrOsc67zrHOvOG9t8+EzrfPgjwvZm9yZWlnbj5tYXkgbWVhbiBvbmUgd2hvIHVzZXMgc3BsaW50cyDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OuuG9sc67zrHOvM6/zrk8L2ZvcmVpZ24+77yJLiBPdGhlcndpc2U6IG5lYXIgdGhlIHNocmluZQogICAgICAgICAgICAgICAgICAgICAgICDvvIhvciBzdGF0dWXvvIkgb2YgdGhlIGhlcm8gQ2FsYW1pdGVz4oCUIHVua25vd24KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXdoZXJlLCBidXQgcGVyaGFwcyBpZGVudGljYWwgd2l0aCB0aGUgTHljaWFuIOKAnEhlcm8KICAgICAgICAgICAgICAgICAgICAgICAgUGh5c2ljaWFuLuKAnSBTZWUgRXNzYXkgNi4gaW4gR29vZHdpbidzIGVkaXRpb24uPC9ub3RlPiBhbmQgc28KICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHlvdSB1cCB0byBhY3QgaW4gdGFibGVhdXggdml2YW50cyBhbmQgdG8gZXhjZWwgaW4gbWlub3IgcGFydHMgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhZ2U/IEhvd2V2ZXIsIGV2ZXJ5Ym9keSBrbm93cyB0aGF0IHdpdGhvdXQgYmVpbmcgdG9sZCBieSBtZS4gU2hhbGwgSSB0ZWxsIHlvdQogICAgICAgICAgICAgICAgICAgIGhvdyBQaG9ybWlvIHRoZSBib2F0c3dhaW4sIGEgc2xhdmUgb2YgRGlvIG9mIFBocmVhcnJpaSwgdXBsaWZ0ZWQgaGVyIGZyb20gdGhhdAogICAgICAgICAgICAgICAgICAgIGNoYXN0ZSBwcm9mZXNzaW9uPyBCdXQgSSBwcm90ZXN0IHRoYXQsIGhvd2V2ZXIgd2VsbCB0aGUgc3RvcnkgYmVjb21lcyB5b3UsIEkgYW0KICAgICAgICAgICAgICAgICAgICBhZnJhaWQgSSBtYXkgYmUgdGhvdWdodCB0byBoYXZlIGNob3NlbiB0b3BpY3MgdW5iZWNvbWluZyB0byBteXNlbGYuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBFbWJhc3N5PC90aXRsZT4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE5PC9iaWJsPjsg77yIMu+8iSB0aGF0PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrOsc67zrHOvOG9t8+EzrfPgjwvZm9yZWlnbj5tYXkgbWVhbiBvbmUgd2hvIHVzZXMgc3BsaW50cyDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OuuG9sc67zrHOvM6/zrk8L2ZvcmVpZ24+77yJLiBPdGhlcndpc2U6IG5lYXIgdGhlIHNocmluZQogICAgICAgICAgICAgICAgICAgICAgICDvvIhvciBzdGF0dWXvvIkgb2YgdGhlIGhlcm8gQ2FsYW1pdGVz4oCUIHVua25vd24KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXdoZXJlLCBidXQgcGVyaGFwcyBpZGVudGljYWwgd2l0aCB0aGUgTHljaWFuIOKAnEhlcm8KICAgICAgICAgICAgICAgICAgICAgICAgUGh5c2ljaWFuLuKAnSBTZWUgRXNzYXkgNi4gaW4gR29vZHdpbidzIGVkaXRpb24uPC90cmFuc2xhdGlvbj4="
translation['18.130'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzAiIHVuaXQ9InNlY3Rpb24iIC8+SSB3aWxsIHBhc3MgYnkgdGhvc2UgZWFybHkgZGF5cywgYW5kIGJlZ2luIHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCBvZiBoaXMgb3duIGxpZmU7IGZvciBpbmRlZWQgaXQgaGFzIGJlZW4gbm8gb3JkaW5hcnkgbGlmZSwgYnV0IHN1Y2ggYXMgaXMKICAgICAgICAgICAgICAgICAgICBhbiBhYm9taW5hdGlvbiB0byBhIGZyZWUgcGVvcGxlLiBPbmx5IHJlY2VudGx54oCUIHJlY2VudGx5LCBkbyBJIHNheT8KICAgICAgICAgICAgICAgICAgICBXaHkgaXQgd2FzIG9ubHkgdGhlIGRheSBiZWZvcmUgeWVzdGVyZGF5IHdoZW4gaGUgYmVjYW1lIHNpbXVsdGFuZW91c2x5IGFuCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gYW5kIGFuIG9yYXRvciwgYW5kLCBieSB0aGUgYWRkaXRpb24gb2YgdHdvIHN5bGxhYmxlcywgdHJhbnNmb3JtZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGZyb20gVHJvbWVzIHRvIEF0cm9tZXR1cywgYW5kIGJlc3Rvd2VkIHVwb24gaGlzIG1vdGhlciB0aGUgaGlnaCBzb3VuZGluZwogICAgICAgICAgICAgICAgICAgIG5hbWUgb2YgR2xhdWNvdGhlYSwgYWx0aG91Z2ggc2hlIHdhcyB1bml2ZXJzYWxseSBrbm93biBhcyB0aGUgQmFuc2hlZSwgYQogICAgICAgICAgICAgICAgICAgIG5pY2tuYW1lIHNoZSBvd2VkIHRvIHRoZSBwbGVhc2luZyBkaXZlcnNpdHkgb2YgaGVyIGFjdHMgYW5kCiAgICAgICAgICAgICAgICAgICAgZXhwZXJpZW5jZXPigJRpdCBjYW4gaGF2ZSBubyBvdGhlciBvcmlnaW4uIDwvdHJhbnNsYXRpb24+"
translation['18.131'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzEiIHVuaXQ9InNlY3Rpb24iIC8+WW91IHdlcmUgcmFpc2VkIGZyb20gc2Vydml0dWRlIHRvIGZyZWVkb20sIGFuZCBmcm9tIGJlZ2dhcnkgdG8KICAgICAgICAgICAgICAgICAgICBvcHVsZW5jZSwgYnkgdGhlIGZhdm9yIG9mIHlvdXIgZmVsbG93LWNpdGl6ZW5zLCBhbmQgeWV0IHlvdSBhcmUgc28gdGhhbmtsZXNzIGFuZAogICAgICAgICAgICAgICAgICAgIGlsbC1jb25kaXRpb25lZCB0aGF0LCBpbnN0ZWFkIG9mIHNob3dpbmcgdGhlbSB5b3VyIGdyYXRpdHVkZSwgeW91IHRha2UgdGhlIHBheQogICAgICAgICAgICAgICAgICAgIG9mIHRoZWlyIGVuZW1pZXMgYW5kIGNvbmR1Y3QgcG9saXRpY2FsIGludHJpZ3VlcyB0byB0aGVpciBkZXRyaW1lbnQuIEkgd2lsbCBub3QKICAgICAgICAgICAgICAgICAgICBkZWFsIHdpdGggc3BlZWNoZXMgd2hpY2gsIG9uIGEgZGlzcHV0YWJsZSBjb25zdHJ1Y3Rpb24sIG1heSBiZSBjYWxsZWQgcGF0cmlvdGljLAogICAgICAgICAgICAgICAgICAgIGJ1dCBJIHdpbGwgcmVjYWxsIHRvIG1lbW9yeSBhY3RzIGJ5IHdoaWNoIGhlIHdhcyBwcm92ZWQgYmV5b25kIGRvdWJ0IHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBzZXJ2ZWQgeW91ciBlbmVtaWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.132'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBhbGwgcmVtZW1iZXIgQW50aXBob24sIHRoZSBtYW4gd2hvIHdhcyBzdHJ1Y2sgb2ZmIHRoZSByZWdpc3RlciwKICAgICAgICAgICAgICAgICAgICBhbmQgY2FtZSBiYWNrIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhZnRlcgogICAgICAgICAgICAgICAgICAgIHByb21pc2luZyBQaGlsaXAgdGhhdCBoZSB3b3VsZCBzZXQgZmlyZSB0byB0aGUgZG9ja3lhcmQuIFdoZW4gSSBoYWQgY2F1Z2h0IGhpbQogICAgICAgICAgICAgICAgICAgIGluIGhpZGluZyBhdCBQZWlyYWV1cywgYW5kIGJyb3VnaHQgaGltIGJlZm9yZSB0aGUgQXNzZW1ibHksIHRoaXMgbWFsaWduYW50CiAgICAgICAgICAgICAgICAgICAgZmVsbG93IHJhaXNlZCBhIGh1Z2Ugb3V0Y3J5IGFib3V0IG15IHNjYW5kYWxvdXMgYW5kIHVuZGVtb2NyYXRpYyBjb25kdWN0IGluCiAgICAgICAgICAgICAgICAgICAgYXNzYXVsdGluZyBjaXRpemVucyBpbiBkaXN0cmVzcyBhbmQgYnJlYWtpbmcgaW50byBob3VzZXMgd2l0aG91dCBhIHdhcnJhbnQsIGFuZAogICAgICAgICAgICAgICAgICAgIHNvIHByb2N1cmVkIGhpcyBhY3F1aXR0YWwuIDwvdHJhbnNsYXRpb24+"
translation['18.133'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzMiIHVuaXQ9InNlY3Rpb24iIC8+SGFkIG5vdCB0aGUKICAgICAgICAgICAgICAgICAgICBDb3VuY2lsIG9mIHRoZSBBcmVvcGFndXMsIGJlY29taW5nIGF3YXJlIG9mIHRoZSBmYWN0cywgYW5kIHNlZWluZyB0aGF0IHlvdSBoYWQKICAgICAgICAgICAgICAgICAgICBtYWRlIGEgbW9zdCBpbm9wcG9ydHVuZSBibHVuZGVyLCBzdGFydGVkIGZ1cnRoZXIgaW5xdWlyaWVzLCBhcnJlc3RlZCB0aGUgbWFuLAogICAgICAgICAgICAgICAgICAgIGFuZCBicm91Z2h0IGhpbSBpbnRvIGNvdXJ0IGEgc2Vjb25kIHRpbWUsIHRoZSB2aWxlIHRyYWl0b3Igd291bGQgaGF2ZSBzbGlwcGVkCiAgICAgICAgICAgICAgICAgICAgb3V0IG9mIHlvdXIgaGFuZHMgYW5kIGVsdWRlZCBqdXN0aWNlLCBiZWluZyBzbXVnZ2xlZCBvdXQgb2YgdGhlIGNpdHkgYnkgb3VyCiAgICAgICAgICAgICAgICAgICAgYm9tYmFzdGljIHBocmFzZS1tb25nZXIuIEFzIGl0IHdhcywgeW91IHB1dCBoaW0gb24gdGhlIHJhY2sgYW5kIHRoZW4gZXhlY3V0ZWQKICAgICAgICAgICAgICAgICAgICBoaW0sIGFuZCB5b3Ugb3VnaHQgdG8gaGF2ZSBkb25lIHRoZSBzYW1lIHRvIEFlc2NoaW5lcy4gPC90cmFuc2xhdGlvbj4="
translation['18.134'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZmFjdCwgdGhlIENvdW5jaWwgb2YgdGhlIEFyZW9wYWd1cyBrbmV3IHdlbGwgdGhhdCBBZXNjaGluZXMgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiB0byBibGFtZSB0aHJvdWdob3V0IHRoaXMgYWZmYWlyLCBhbmQgdGhlcmVmb3JlIHdoZW4sIGFmdGVyIGNob29zaW5nIGhpbSBieQogICAgICAgICAgICAgICAgICAgIHZvdGUgdG8gc3BlYWsgaW4gc3VwcG9ydCBvZiB5b3VyIGNsYWltcyB0byB0aGUgVGVtcGxlIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRGVsb3MiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERlbG9zIj5EZWxvczwvcGxhY2VOYW1lPiwgYnkgYSBtaXNhcHByZWhlbnNpb24gc3VjaCBhcyBoYXMKICAgICAgICAgICAgICAgICAgICBvZnRlbiBiZWVuIGZhdGFsIHRvIHlvdXIgcHVibGljIGludGVyZXN0cywgeW91IGludml0ZWQgdGhlIGNvb3BlcmF0aW9uIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBDb3VuY2lsIGFuZCBnYXZlIHRoZW0gZnVsbCBhdXRob3JpdHksIHRoZXkgcHJvbXB0bHkgcmVqZWN0ZWQgaGltIGFzIGEgdHJhaXRvciwKICAgICAgICAgICAgICAgICAgICBhbmQgZ2F2ZSB0aGUgYnJpZWYgdG8gSHlwZXJlaWRlcy4gT24gdGhpcyBvY2Nhc2lvbiB0aGUgYmFsbG90IHdhcyB0YWtlbiBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBhbHRhciwgYW5kIG5vdCBhIHNpbmdsZSB2b3RlIHdhcyBjYXN0IGZvciB0aGlzIHdyZXRjaC4gPC90cmFuc2xhdGlvbj4="
translation['18.135'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gcHJvdmUgdGhlIHRydXRoIG9mIG15IHN0YXRlbWVudCwgcGxlYXNlIGNhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdG5lc3Nlcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltXZSwgQ2FsbGlhcyBvZiBTdW5pdW0sIFplbm8gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NSI+UGhseWE8L3BsYWNlTmFtZT4sIENsZW9uIG9mIFBoYWxlcnVtLCBEZW1vbmljdXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTWFyYXRob24sIG9uIGJlaGFsZiBvZiBhbGwgdGhlIGNvdW5jaWxsb3JzLCBiZWFyIHdpdG5lc3MgZm9yIERlbW9zdGhlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQsIHdoZW4gdGhlIHBlb3BsZSBlbGVjdGVkIEFlc2NoaW5lcyBzdGF0ZS1hZHZvY2F0ZSBiZWZvcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEFtcGhpY3R5b25zIGluIHRoZSBtYXR0ZXIgb2YgdGhlIHRlbXBsZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLERlbG9zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEZWxvcyI+RGVsb3M8L3BsYWNlTmFtZT4sIHdlIGluIENvdW5jaWwganVkZ2VkIEh5cGVyZWlkZXMgbW9yZSB3b3J0aHkgdG8gc3BlYWsKICAgICAgICAgICAgICAgICAgICAgICAgb24gYmVoYWxmIG9mIHRoZSBzdGF0ZSwgYW5kIEh5cGVyZWlkZXMgd2FzIGFjY29yZGluZ2x5CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1pc3Npb25lZC5dPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bV2UsIENhbGxpYXMgb2YgU3VuaXVtLCBaZW5vIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTUiPlBobHlhPC9wbGFjZU5hbWU+LCBDbGVvbiBvZiBQaGFsZXJ1bSwgRGVtb25pY3VzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIE1hcmF0aG9uLCBvbiBiZWhhbGYgb2YgYWxsIHRoZSBjb3VuY2lsbG9ycywgYmVhciB3aXRuZXNzIGZvciBEZW1vc3RoZW5lcwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aGVuIHRoZSBwZW9wbGUgZWxlY3RlZCBBZXNjaGluZXMgc3RhdGUtYWR2b2NhdGUgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBbXBoaWN0eW9ucyBpbiB0aGUgbWF0dGVyIG9mIHRoZSB0ZW1wbGUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxvcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRGVsb3MiPkRlbG9zPC9wbGFjZU5hbWU+LCB3ZSBpbiBDb3VuY2lsIGp1ZGdlZCBIeXBlcmVpZGVzIG1vcmUgd29ydGh5IHRvIHNwZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIG9uIGJlaGFsZiBvZiB0aGUgc3RhdGUsIGFuZCBIeXBlcmVpZGVzIHdhcyBhY2NvcmRpbmdseQogICAgICAgICAgICAgICAgICAgICAgICBjb21taXNzaW9uZWQuXTwvdHJhbnNsYXRpb24+"
translation['18.136'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRodXMgYnkKICAgICAgICAgICAgICAgICAgICByZWplY3RpbmcgdGhpcyBtYW4gZnJvbSBoaXMgc3Bva2VzbWFuc2hpcCwgYW5kIGdpdmluZyB0aGUgYXBwb2ludG1lbnQgdG8KICAgICAgICAgICAgICAgICAgICBhbm90aGVyLCB0aGUgQ291bmNpbCBicmFuZGVkIGhpbSBhcyBhIHRyYWl0b3IgYW5kIGFuIGVuZW15IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwZW9wbGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvIG11Y2ggZm9yIG9uZSBvZiBoaXMgc3Bpcml0ZWQKICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZXMuIElzIGl0IG5vdCBqdXN0IGxpa2UgdGhlIGNoYXJnZXMgaGUgYnJpbmdzIGFnYWluc3QgbWU/IE5vdyBsZXQgbWUKICAgICAgICAgICAgICAgICAgICByZW1pbmQgeW91IG9mIGFub3RoZXIuIFBoaWxpcCBoYWQgc2VudCB0byB1cyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDc3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzcwIj5QeXRobzwvcGxhY2VOYW1lPiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4gaW4gY29tcGFueSB3aXRoIGFuIGVtYmFzc3kgcmVwcmVzZW50aW5nIGFsbCBoaXMKICAgICAgICAgICAgICAgICAgICBhbGxpZXMsIGhvcGluZyB0byBicmluZyBkaXNob25vciB1cG9uIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQgY29udmljdCBoZXIgb2YgaW5qdXN0aWNlLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDc3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzcwIj5QeXRobzwvcGxhY2VOYW1lPiB3YXMgbWlnaHRpbHkgY29uZmlkZW50LCBkZW5vdW5jaW5nIHlvdQogICAgICAgICAgICAgICAgICAgIHdpdGggYSBmdWxsIHNwYXRlIG9mIGVsb3F1ZW5jZSwgYnV0IEkgZGlkIG5vdCBzaHJpbmsgZnJvbSB0aGUgZW5jb3VudGVyLiBJIHN0b29kCiAgICAgICAgICAgICAgICAgICAgdXAgYW5kIGNvbnRyYWRpY3RlZCBoaW0sIHJlZnVzaW5nIHRvIHN1cnJlbmRlciB0aGUganVzdCBjbGFpbXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9ud2VhbHRoLCBhbmQgcHJvdmluZyB0aGF0IFBoaWxpcCB3YXMgaW4gdGhlIHdyb25nIHNvIGNvbmNsdXNpdmVseSB0aGF0IGhpcwogICAgICAgICAgICAgICAgICAgIG93biBhbGxpZXMgcm9zZSBhbmQgYWRtaXR0ZWQgSSB3YXMgcmlnaHQ7IGJ1dCBBZXNjaGluZXMgdG9vayBQaGlsaXAncyBzaWRlCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaG91dCwgYW5kIGJvcmUgd2l0bmVzcywgZXZlbiBmYWxzZSB3aXRuZXNzLCBhZ2FpbnN0IGhpcyBvd24gY291bnRyeS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.137'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vciBkaWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHNhdGlzZnkgaGltLiBBdCBhIGxhdGVyIGRhdGUgaGUgd2FzIGNhdWdodCBhZ2FpbiBpbiB0aGUgY29tcGFueSBvZiB0aGUgc3B5CiAgICAgICAgICAgICAgICAgICAgQW5heGludXMgYXQgdGhlIGhvdXNlIG9mIFRocmFzby4gWWV0IGEgbWFuIHdobyBzZWNyZXRseSBtZXQgYW5kIGNvbnZlcnNlZCB3aXRoIGEKICAgICAgICAgICAgICAgICAgICBzcHkgc2VudCBieSB0aGUgZW5lbXkgbXVzdCBoYXZlIGJlZW4gaGltc2VsZiBhIHNweSBieSBkaXNwb3NpdGlvbiBhbmQgYW4gZW5lbXkKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgY291bnRyeS4gVG8gcHJvdmUgdGhlIHRydXRoIG9mIG15IHN0YXRlbWVudCwgcGxlYXNlIGNhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdG5lc3Nlcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltUZWxlZGVtdXMsIHNvbiBvZiBDbGVvbiwgSHlwZXJlaWRlcywgc29uCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIENhbGxhZXNjaHJ1cywgTmljb21hY2h1cywgc29uIG9mIERpb3BoYW50dXMsIGJlYXIgd2l0bmVzcyBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMsIGFuZCBoYXZlIHRha2VuIG9hdGggYmVmb3JlIHRoZSBHZW5lcmFscyB0aGF0IHRvIHRoZWlyIGtub3dsZWRnZQogICAgICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMsIHNvbiBvZiBBdHJvbWV0dXMsIG9mIENvdGhvY2lkYWUsIGNvbWVzIGJ5IG5pZ2h0IHRvIHRoZSBob3VzZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBUaHJhc28gYW5kIGhvbGRzIGNvbW11bmljYXRpb24gd2l0aCBBbmF4aW51cywgd2hvIGhhcyBiZWVuIHByb3ZlZCB0byBiZSBhCiAgICAgICAgICAgICAgICAgICAgICAgIHNweSBmcm9tIFBoaWxpcC4gVGhlc2UgZGVwb3NpdGlvbnMgd2VyZSBsb2RnZWQgd2l0aCBOaWNpYXMgb24gdGhlIHRoaXJkIGRheQogICAgICAgICAgICAgICAgICAgICAgICBvZiBIZWNhdG9tYmFlb24uXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W1RlbGVkZW11cywgc29uIG9mIENsZW9uLCBIeXBlcmVpZGVzLCBzb24KICAgICAgICAgICAgICAgICAgICAgICAgb2YgQ2FsbGFlc2NocnVzLCBOaWNvbWFjaHVzLCBzb24gb2YgRGlvcGhhbnR1cywgYmVhciB3aXRuZXNzIGZvcgogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcywgYW5kIGhhdmUgdGFrZW4gb2F0aCBiZWZvcmUgdGhlIEdlbmVyYWxzIHRoYXQgdG8gdGhlaXIga25vd2xlZGdlCiAgICAgICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcywgc29uIG9mIEF0cm9tZXR1cywgb2YgQ290aG9jaWRhZSwgY29tZXMgYnkgbmlnaHQgdG8gdGhlIGhvdXNlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFRocmFzbyBhbmQgaG9sZHMgY29tbXVuaWNhdGlvbiB3aXRoIEFuYXhpbnVzLCB3aG8gaGFzIGJlZW4gcHJvdmVkIHRvIGJlIGEKICAgICAgICAgICAgICAgICAgICAgICAgc3B5IGZyb20gUGhpbGlwLiBUaGVzZSBkZXBvc2l0aW9ucyB3ZXJlIGxvZGdlZCB3aXRoIE5pY2lhcyBvbiB0aGUgdGhpcmQgZGF5CiAgICAgICAgICAgICAgICAgICAgICAgIG9mIEhlY2F0b21iYWVvbi5dPC90cmFuc2xhdGlvbj4="
translation['18.138'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgb21pdAogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kcyBvZiBzdG9yaWVzIHRoYXQgSSBjb3VsZCB0ZWxsIHlvdSBhYm91dCBoaW0uIFRoZSBmYWN0IGlzLCBJIGNvdWxkIGNpdGUKICAgICAgICAgICAgICAgICAgICBtYW55IGNsZWFyIGluc3RhbmNlcyBvZiBoaXMgY29uZHVjdCBhdCB0aGF0IHRpbWUsIGhlbHBpbmcgdGhlIGVuZW15IGFuZAogICAgICAgICAgICAgICAgICAgIG1hbGlnbmluZyBtZTsgb25seSBpdCBpcyBub3QgeW91ciB3YXkgdG8gc2NvcmUgdXAgc3VjaCBvZmZlbmNlcyBmb3IgYWNjdXJhdGUKICAgICAgICAgICAgICAgICAgICByZW1lbWJyYW5jZSBhbmQgZHVlIHJlc2VudG1lbnQuIFlvdSBoYXZlIGEgdmljaW91cyBoYWJpdCBvZiBhbGxvd2luZyB0b28gbXVjaAogICAgICAgICAgICAgICAgICAgIGluZHVsZ2VuY2UgdG8gYW55b25lIHdobyBjaG9vc2VzIGJ5IHNwaXRlZnVsIGNhbHVtbmllcyB0byB0cmlwIHVwIHRoZSBoZWVscyBvZiBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyBnaXZlcyB5b3UgZ29vZCBhZHZpY2UuIFlvdSBnaXZlIGF3YXkgYSBzb3VuZCBwb2xpY3kgaW4gZXhjaGFuZ2UgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGVudGVydGFpbm1lbnQgeW91IGRlcml2ZSBmcm9tIGludmVjdGl2ZTsgYW5kIHNvIGl0IGlzIGVhc2llciBhbmQgc2FmZXIgZm9yIGEKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgbWFuIHRvIHNlcnZlIHlvdXIgZW5lbWllcyBhbmQgcG9ja2V0IHRoZWlyIHBheSB0aGFuIHRvIGNob29zZSBhbmQKICAgICAgICAgICAgICAgICAgICBtYWludGFpbiBhIHBhdHJpb3RpYyBhdHRpdHVkZS4gPC90cmFuc2xhdGlvbj4="
translation['18.139'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRob3VnaCBpdCB3YXMgYSBzY2FuZGFsb3VzIHNoYW1lIGVub3VnaCwgR29kIGtub3dzLAogICAgICAgICAgICAgICAgICAgIG9wZW5seSB0byB0YWtlIFBoaWxpcCdzIHNpZGUgYWdhaW5zdCBoaXMgb3duIGNvdW50cnkgZXZlbiBiZWZvcmUgdGhlIHdhciwgbWFrZQogICAgICAgICAgICAgICAgICAgIGhpbSBhIHByZXNlbnQsIGlmIHlvdSBjaG9vc2UsIG1ha2UgaGltIGEgcHJlc2VudCBvZiB0aGF0LiBCdXQgd2hlbiBvdXIKICAgICAgICAgICAgICAgICAgICBtZXJjaGFudG1lbiBoYWQgYmVlbiBvcGVubHkgcGx1bmRlcmVkLCB3aGVuIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IHdhcyBiZWluZyByYXZhZ2VkLCB3aGVuIHRoZSBtYW4gd2FzIGFkdmFuY2luZyB1cG9uCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgd2hlbiB0aGVyZSBjb3VsZCBubyBsb25nZXIKICAgICAgICAgICAgICAgICAgICBiZSBhbnkgZG91YnQgYWJvdXQgdGhlIHBvc2l0aW9uLCBidXQgd2FyIGhhZCBhbHJlYWR5IGJlZ3Vu4oCUZXZlbiBhZnRlcgogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhpcyBtYWxpZ25hbnQgbXVtYmxlciBvZiBibGFuayB2ZXJzZSBjYW4gcG9pbnQgdG8gbm8gcGF0cmlvdGljIGFjdC4gTm8KICAgICAgICAgICAgICAgICAgICBwcm9maXRhYmxlIHByb3Bvc2l0aW9uLCBncmVhdCBvciBzbWFsbCwgc3RhbmRzIHRvIHRoZSBjcmVkaXQgb2YgQWVzY2hpbmVzLiBJZiBoZQogICAgICAgICAgICAgICAgICAgIGNsYWltcyBhbnksIGxldCBoaW0gY2l0ZSBpdCBub3csIHdoaWxlIG15IGhvdXItZ2xhc3M8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+aG91ci1nbGFzcywgdGhlIGNsZXBzeWRyYSBvciB3YXRlci1jbG9jaywgdXNlZCB0byBtZWFzdXJlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lIGFsbG93ZWQgYnkgdGhlIGNvdXJ0IHRvIGVhY2ggc3BlYWtlci48L25vdGU+IHJ1bnMuIEJ1dCB0aGVyZSBpcyBub25lLgogICAgICAgICAgICAgICAgICAgIE5vdyBvbmUgb2YgdHdvIHRoaW5nczogZWl0aGVyIGhlIG1hZGUgbm8gYWx0ZXJuYXRpdmUgcHJvcG9zYWwgYmVjYXVzZSBoZSBjb3VsZAogICAgICAgICAgICAgICAgICAgIGZpbmQgbm8gZmF1bHQgd2l0aCBteSBwb2xpY3ksIG9yIGhlIGRpZCBub3QgZGlzY2xvc2UgaGlzIGFtZW5kbWVudHMgYmVjYXVzZSBoaXMKICAgICAgICAgICAgICAgICAgICBvYmplY3Qgd2FzIHRoZSBhZHZhbnRhZ2Ugb2YgdGhlIGVuZW15LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.140'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRpZCBoZSB0aGVuIHJlZnJhaW4gZnJvbSBzcGVlY2ggYXMgd2VsbCBhcwogICAgICAgICAgICAgICAgICAgIGZyb20gbW92aW5nIHJlc29sdXRpb25zLCB3aGVuIHRoZXJlIHdhcyBhbnkgbWlzY2hpZWYgdG8gYmUgZG9uZT8gV2h5LCBubyBvbmUKICAgICAgICAgICAgICAgICAgICBlbHNlIGNvdWxkIGdldCBpbiBhIHdvcmQhIEFwcGFyZW50bHkgdGhlIGNpdHkgY291bGQgc3RhbmQsIGFuZCBoZSBjb3VsZCBkbwogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZGV0ZWN0aW9uLCBhbG1vc3QgYW55dGhpbmc7IGJ1dCB0aGVyZSB3YXMgb25lIHBlcmZvcm1hbmNlIG9mIGhpcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgcmVhbGx5IGdhdmUgdGhlIGZpbmlzaGluZyB0b3VjaCB0byBoaXMgZWFybGllciBlZmZvcnRzLiBPbiB0aGF0IGhlIGhhcyBsYXZpc2hlZAogICAgICAgICAgICAgICAgICAgIGFsbCBoaXMgd2VhbHRoIG9mIHdvcmRzLCBjaXRpbmcgaW4gZnVsbCB0aGUgZGVjcmVlcyBhZ2FpbnN0IHRoZSBBbXBoaXNzaWFucyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLExvY3JpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxMb2NyaSI+TG9jcmk8L3BsYWNlTmFtZT4sIGluIHRoZSBob3BlIG9mIGRpc3RvcnRpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgdHJ1dGguIEJ1dCBoZSBjYW4gbmV2ZXIgZGlzZ3Vpc2UgaXQuIE5vLCBBZXNjaGluZXMsIHlvdSB3aWxsIG5ldmVyIHdhc2ggb3V0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBzdGFpbjsgeW91IGNhbm5vdCB0YWxrIGxvbmcgZW5vdWdoIGZvciB0aGF0ISA8L3RyYW5zbGF0aW9uPg=="
translation['18.141'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHlvdXIgcHJlc2VuY2UsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIEkgbm93IGludm9rZSBhbGwgdGhlIGdvZHMgYW5kCiAgICAgICAgICAgICAgICAgICAgZ29kZGVzc2VzIHdob3NlIGRvbWFpbiBpcyB0aGUgbGFuZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4uIEkgaW52b2tlIGFsc28gUHl0aGlhbiBBcG9sbG8sIHRoZSBhbmNlc3RyYWwgZGl2aW5pdHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIGNpdHksIGFuZCBJIHNvbGVtbmx5IGJlc2VlY2ggdGhlbSBhbGwgdGhhdCwgaWYgSSBzaGFsbCBzcGVhayB0aGUgdHJ1dGggbm93LAogICAgICAgICAgICAgICAgICAgIGFuZCBpZiBJIHNwb2tlIHRydXRoIHRvIG15IGNvdW50cnltZW4gd2hlbiBmaXJzdCBJIHNhdyB0aGlzIG1pc2NyZWFudCBwdXR0aW5nCiAgICAgICAgICAgICAgICAgICAgaGlzIGhhbmQgdG8gdGhhdCB0cmFuc2FjdGlvbuKAlGZvciBJIGtuZXcgaXQsIEkga25ldyBpdAogICAgICAgICAgICAgICAgICAgIGluc3RhbnRseeKAlHRoZXkgbWF5IGdyYW50IHRvIG1lIHByb3NwZXJpdHkgYW5kIHNhbHZhdGlvbi4gQnV0IGlmIHdpdGgKICAgICAgICAgICAgICAgICAgICBtYWxpY2Ugb3IgaW4gdGhlIHNwaXJpdCBvZiBwZXJzb25hbCByaXZhbHJ5IEkgbGF5IGFnYWluc3QgaGltIGFueSBmYWxzZSBjaGFyZ2UsCiAgICAgICAgICAgICAgICAgICAgSSBwcmF5IHRoYXQgdGhleSBtYXkgZGlzcG9zc2VzcyBtZSBvZiBldmVyeXRoaW5nIHRoYXQgaXMgZ29vZC4gPC90cmFuc2xhdGlvbj4="
translation['18.142'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoaXMgaW1wcmVjYXRpb24gSQogICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgdG8gSGVhdmVuLCBhbmQgdGhpcyBzb2xlbW4gYXZlcm1lbnQgSSBub3cgbWFrZSwgYmVjYXVzZSwgdGhvdWdoIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGxldHRlcnMsIGRlcG9zaXRlZCBpbiB0aGUgUmVjb3JkIE9mZmljZSwgZW5hYmxpbmcgbWUgdG8gb2ZmZXIgYWJzb2x1dGUgcHJvb2YsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRob3VnaCBJIGFtIHN1cmUgdGhhdCB5b3UgaGF2ZSBub3QgZm9yZ290dGVuIHRoZSB0cmFuc2FjdGlvbiwgSSBhbSBhZnJhaWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhpcyBhYmlsaXR5IG1heSBiZSBkZWVtZWQgaW5hZGVxdWF0ZSBmb3Igc3VjaCBlbm9ybW91cyBtaXNjaGllZi4gVGhhdAogICAgICAgICAgICAgICAgICAgIG1pc3Rha2Ugd2FzIG1hZGUgYmVmb3JlLCB3aGVuIGJ5IGhpcyBmYWxzZSByZXBvcnRzIGhlIGNvbnRyaXZlZCB0aGUgZGVzdHJ1Y3Rpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdW5oYXBweSBQaG9jaWFucy4gPC90cmFuc2xhdGlvbj4="
translation['18.143'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdhciBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpc3NhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXNzYSI+QW1waGlzc2E8L3BsYWNlTmFtZT4sIHRoYXQgaXMsIHRoZSB3YXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGJyb3VnaHQgUGhpbGlwIHRvIEVsYXRlYSwgYW5kIGNhdXNlZCB0aGUgZWxlY3Rpb24sIGFzIGdlbmVyYWwgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQW1waGljdHlvbnMsIG9mIGEgbWFuIHdobyB0dXJuZWQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB1cHNpZGUgZG93biwgd2FzIGR1ZSB0byB0aGUgbWFjaGluYXRpb25zIG9mIHRoaXMgbWFuLiBJbgogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gc2luZ2xlIHBlcnNvbiBoZSB3YXMgdGhlIGF1dGhvciBvZiBhbGwgb3VyIHdvcnN0IGV2aWxzLiBJIHByb3Rlc3RlZAogICAgICAgICAgICAgICAgICAgIGluc3RhbnRseTsgSSByYWlzZWQgbXkgdm9pY2UgaW4gQXNzZW1ibHk7IEkgY3JpZWQgYWxvdWQsIOKAnFlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBicmluZ2luZyB3YXIgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4sIEFlc2NoaW5lcywgYW4KICAgICAgICAgICAgICAgICAgICBBbXBoaWN0eW9uaWMgd2FyO+KAnSBidXQgYSBjb21wYWN0IGJvZHkgb2YgbWVuLCBzaXR0aW5nIHRoZXJlIHVuZGVyIGhpcwogICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiwgd291bGQgbm90IGxldCBtZSBzcGVhaywgYW5kIHRoZSByZXN0IHdlcmUgbWVyZWx5IGFzdG9uaXNoZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgaW1hZ2luZWQgdGhhdCBJIHdhcyBsYXlpbmcgYW4gaWRsZSBjaGFyZ2UgaW4gcHJpdmF0ZSBzcGl0ZS4gPC90cmFuc2xhdGlvbj4="
translation['18.144'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDQiIHVuaXQ9InNlY3Rpb24iIC8+TWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IHdlcmUgbm90IGFsbG93ZWQgdG8gaGVhciBtZSB0aGVuOyBidXQgbm93IHlvdSBtdXN0CiAgICAgICAgICAgICAgICAgICAgYW5kIHNoYWxsIGhlYXIgd2hhdCB3YXMgdGhlIHJlYWwgbmF0dXJlIG9mIHRoYXQgYnVzaW5lc3MsIHdoYXQgd2FzIHRoZSBwdXJwb3NlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGNvbnNwaXJhY3ksIGFuZCBob3cgaXQgd2FzIGFjY29tcGxpc2hlZC4gWW91IHdpbGwgc2VlIGhvdyBza2lsZnVsbHkgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgY29udHJpdmVkOyB5b3Ugd2lsbCBnZXQgdGhlIGJlbmVmaXQgb2YgbmV3IGluc2lnaHQgaW50byB5b3VyIG93biBwb2xpdGljcwogICAgICAgICAgICAgICAgICAgIGFuZCB5b3Ugd2lsbCBmb3JtIGFuIGlkZWEgb2YgdGhlIHN1cHJlbWUgY3JhZnRpbmVzcyBvZiBQaGlsaXAuIDwvdHJhbnNsYXRpb24+"
translation['18.145'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZvciBQaGlsaXAgdGhlcmUKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBubyBlbmQgb3IgcXVpdHRhbmNlIG9mIGhvc3RpbGl0aWVzIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHVubGVzcyBoZSBzaG91bGQgbWFrZSB0aGUgVGhlYmFucyBhbmQgVGhlc3NhbGlhbnMgaGVyCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcy4gTm93LCBhSXRob3VnaCB5b3VyIGNvbW1hbmRlcnMgd2VyZSBjb25kdWN0aW5nIHRoZSB3YXIgYWdhaW5zdCBoaW0KICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGFiaWxpdHkgYW5kIHdpdGhvdXQgc3VjY2VzcywgaGUgd2FzIHZhc3RseSBkaXN0cmVzc2VkIGJvdGggYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FtcGFpZ24gYW5kIGJ5IHRoZSBwcml2YXRlZXJzOyBmb3IgaGUgY291bGQgbmVpdGhlciBleHBvcnQgdGhlIHByb2R1Y3RzIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIG93biBjb3VudHJ5LCBub3IgaW1wb3J0IHdoYXQgaGUgbmVlZGVkIGZvciBoaW1zZWxmLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.146'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhhdCB0aW1lIGhlIGhhZCBubyBzdXByZW1hY3kgYXQgc2VhLCBub3IgY291bGQgaGUgcmVhY2gKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IGJ5IGxhbmQgdW5sZXNzIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZXNzYWxpYW5zIGZvbGxvd2VkIGhpcyBiYW5uZXIgYW5kIHRoZSBUaGViYW5zIGdhdmUgaGltIGZyZWUgcGFzc2FnZS4gSW4gc3BpdGUKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgc3VjY2Vzc2VzIGFnYWluc3QgdGhlIGNvbW1hbmRlcnMgeW91IHNlbnQgb3V0LCBzdWNoIGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICB3ZXJl4oCUSSBoYXZlIG5vdGhpbmcgdG8gc2F5IG9mIHRoZWlyIGZhaWx1cmXigJRoZSBmb3VuZCBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgaW4gdHJvdWJsZSBieSByZWFzb24gb2YgY29uZGl0aW9ucyBvZiBsb2NhbGl0eSBhbmQgb2YgdGhlIGNvbXBhcmF0aXZlIHJlc291cmNlcwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0d28gY29tYmF0YW50cy4gPC90cmFuc2xhdGlvbj4="
translation['18.147'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDciIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpZiBoZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBpbnZpdGUgdGhlIFRoZWJhbnMgb3IgdGhlIFRoZXNzYWxpYW5zIHRvIHRha2UgdXAgaGlzIHByaXZhdGUgcXVhcnJlbCBhbmQgbWFyY2gKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHlvdSwgaGUgY291bGQgZXhwZWN0IG5vIGF0dGVudGlvbjsgYnV0IGlmIGhlIHNob3VsZCBlc3BvdXNlIHRoZWlyIGpvaW50CiAgICAgICAgICAgICAgICAgICAgZ3JpZXZhbmNlcyBhbmQgYmUgY2hvc2VuIGFzIHRoZWlyIGxlYWRlciwgaGUgbWlnaHQgaG9wZSB0byBzdWNjZWVkIGJ5IGEgbWl4dHVyZQogICAgICAgICAgICAgICAgICAgIG9mIGRlY2VwdGlvbiBhbmQgcGVyc3Vhc2lvbi4gVmVyeSB3ZWxsOyBoZSBzZXRzIHRvIHdvcmvigJRhbmQgb2JzZXJ2ZQogICAgICAgICAgICAgICAgICAgIGhvdyBjbGV2ZXJseSBoZSBtYW5hZ2VkIGl04oCUdG8gdGhyb3cgdGhlIFB5bGFlYW4gQ29uZ3Jlc3MgaW50bwogICAgICAgICAgICAgICAgICAgIGNvbmZ1c2lvbiBhbmQgdG8gaW1wbGljYXRlIHRoZSBBbXBoaWN0eW9uaWMgQ291bmNpbCBpbiB3YXJmYXJlLCBmZWVsaW5nIGNlcnRhaW4KICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd291bGQgaW1tZWRpYXRlbHkgYmVnIGhpbSB0byBkZWFsIHdpdGggdGhlIHNpdHVhdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['18.148'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDgiIHVuaXQ9InNlY3Rpb24iIC8+SWYsIGhvd2V2ZXIsIHRoZSBxdWVzdGlvbiBzaG91bGQgYmUgaW50cm9kdWNlZCBieQogICAgICAgICAgICAgICAgICAgIGFueSBvZiB0aGUgY29tbWlzc2lvbmVycyBvZiByZWxpZ2lvbiBzZW50IGJ5IGhpbSBvciBieSBhbnkgYWxsaWVzIG9mIGhpcywgdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlYmFucyBhbmQgVGhlc3NhbGlhbnMsIGFzIGhlIGV4cGVjdGVkLCB3b3VsZCBiZSBzdXNwaWNpb3VzIGFuZCBhbGwgb24gdGhlaXIKICAgICAgICAgICAgICAgICAgICBndWFyZDsgYnV0LCBpZiB0aGUgb3BlcmF0b3Igc2hvdWxkIGJlIGFuIEF0aGVuaWFuLCByZXByZXNlbnRpbmcgaGlzIG9wcG9uZW50cywKICAgICAgICAgICAgICAgICAgICBoZSBjb25jZWl2ZWQgdGhhdCBoZSB3b3VsZCBlYXNpbHkgZXNjYXBlIGRldGVjdGlvbi4gQW5kIHN1Y2ggd2FzIHRoZSBhY3R1YWwKICAgICAgICAgICAgICAgICAgICByZXN1bHQuIDwvdHJhbnNsYXRpb24+"
translation['18.149'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhvdwogICAgICAgICAgICAgICAgICAgIGRpZCBoZSBtYW5hZ2UgaXQ/IEJ5IGhpcmluZyBBZXNjaGluZXMuIE5vYm9keSwgb2YgY291cnNlLCBoYWQgYW55IGlua2xpbmc7CiAgICAgICAgICAgICAgICAgICAgbm9ib2R5IHdhcyB3YXRjaGluZ+KAlCBhY2NvcmRpbmcgdG8geW91ciB1c3VhbCBjdXN0b20hIEFlc2NoaW5lcyB3YXMKICAgICAgICAgICAgICAgICAgICBub21pbmF0ZWQgZm9yIHRoZSBkZXB1dGF0aW9uIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPjsgdGhyZWUgb3IgZm91ciBoYW5kcyB3ZXJlIGhlbGQgdXAsIGFuZCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBkZWNsYXJlZCBlbGVjdGVkLiBIZSByZXBhaXJlZCB0byB0aGUgQ291bmNpbCwgaW52ZXN0ZWQgd2l0aCBhbGwgdGhlIHByZXN0aWdlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIGF0IG9uY2UsIHB1dHRpbmcKICAgICAgICAgICAgICAgICAgICBhc2lkZSBhbmQgZGlzcmVnYXJkaW5nIGV2ZXJ5dGhpbmcgZWxzZSwgYWRkcmVzc2VkIGhpbXNlbGYgdG8gdGhlIGJ1c2luZXNzIGZvcgogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGhhZCB0YWtlbiBwYXkuIEhlIGNvbmNvY3RlZCBhIHBsYXVzaWJsZSBzcGVlY2ggYWJvdXQgdGhlIGxlZ2VuZGFyeQogICAgICAgICAgICAgICAgICAgIG9yaWdpbiBvZiB0aGUgY29uc2VjcmF0aW9uIG9mIHRoZSBDaXJyaGFlYW4gdGVycml0b3J5LCBhbmQgYnkgdGhpcyBuYXJyYXRpb24KICAgICAgICAgICAgICAgICAgICBpbmR1Y2VkIHRoZSBjb21taXNzaW9uZXJzLCBtZW4gdW52ZXJzZWQgaW4gb3JhdG9yeSBhbmQgdW5zdXNwaWNpb3VzIG9mCiAgICAgICAgICAgICAgICAgICAgY29uc2VxdWVuY2VzLCA8L3RyYW5zbGF0aW9uPg=="
translation['18.150'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTAiIHVuaXQ9InNlY3Rpb24iIC8+dG8gdm90ZSBmb3IgYSB0b3VyIG9mIHN1cnZleSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBsYW5kIHdoaWNoIHRoZSBBbXBoaXNzaWFucyBzYWlkIHRoZXkgd2VyZSBjdWx0aXZhdGluZyBiZWNhdXNlIGl0IGJlbG9uZ2VkIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgd2hpbGUgQWVzY2hpbmVzIGFjY3VzZWQgdGhlbSBvZiBpbnRydWRpbmcgb24gY29uc2VjcmF0ZWQgZ3JvdW5kLiBJdCBpcyBub3QKICAgICAgICAgICAgICAgICAgICB0cnVlIHRoYXQgdGhlc2UgTG9jcmlhbnMgdyBlcmUgbWVkaXRhdGluZyBhbnkgc3VpdCBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgb3IgYW55IG90aGVyIGFjdGlvbiBzdWNoIGFzIGhlIG5vdwogICAgICAgICAgICAgICAgICAgIGZhbHNlbHkgYWxsZWdlcyBpbiBleGN1c2UuIFlvdSB3aWxsIGZpbmQgYSBwcm9vZiBvZiBoaXMgZmFsc2Vob29kIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudDrigJRPZiBjb3Vyc2UgaXQgd2FzIG5vdCBjb21wZXRlbnQgZm9yIHRoZSBMb2NyaWFucyB0byB0YWtlCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZ3MgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2l0aG91dAogICAgICAgICAgICAgICAgICAgIHNlcnZpbmcgYSBzdW1tb25zLiBXZWxsLCB3aG8gc2VydmVkIGl0PyBGcm9tIHdoYXQgb2ZmaWNlIHdhcyBpdCBpc3N1ZWQ/IE5hbWUKICAgICAgICAgICAgICAgICAgICBhbnlvbmUgd2hvIGtub3dzOyBwb2ludCBoaW0gb3V0LiBZb3UgY2Fubm90OyBpdCB3YXMgYSBmYWxzZSBhbmQgaWRsZSBwcmV0ZXh0IG9mCiAgICAgICAgICAgICAgICAgICAgeW91cnMuIDwvdHJhbnNsYXRpb24+"
translation['18.151'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldpdGgKICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMgYXMgdGhlaXIgdHJ1c3R5IGd1aWRlLCB0aGUgQW1waGljdHlvbnMgYmVnYW4gdGhlaXIgdG91ciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB0ZXJyaXRvcnk7IGJ1dCB0aGUgTG9jcmlhbnMgZmVsbCB1cG9uIHRoZW0sIHdlcmUgd2l0aGluIGFuIGFjZSBvZiBzcGVhcmluZyB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBjcm93ZCwgYW5kIGRpZCBhY3R1YWxseSBzZWl6ZSBhbmQgY2Fycnkgb2ZmIHRoZSBzYWNyZWQgcGVyc29ucyBvZiBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgY29tbWlzc2lvbmVycy4gQ29tcGxhaW50cyB3ZXJlIHByb21wdGx5IGxhaWQsIGFuZCBzbyB3YXIgYWdhaW5zdCB0aGUgQW1waGlzc2lhbnMKICAgICAgICAgICAgICAgICAgICB3YXMgcHJvdm9rZWQuIEF0IHRoZSBvdXRzZXQgQ290dHlwaHVzIHdhcyBjb21tYW5kZXIgb2YgYW4gYXJteSBjb21wb3NlZCBvZgogICAgICAgICAgICAgICAgICAgIEFtcGhpY3R5b25zOyBidXQgc29tZSBkaXZpc2lvbnMgbmV2ZXIgam9pbmVkLCBhbmQgdGhvc2Ugd2hvIGpvaW5lZCBkaWQgbm90aGluZwogICAgICAgICAgICAgICAgICAgIGF0IGFsbC4gVGhlIHBlcnNvbnMgZW5nYWdlZCBpbiB0aGUgcGxvdCwgbW9zdGx5IHNjb3VuZHJlbHMgb2Ygb2xkIHN0YW5kaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4gYW5kIG90aGVyIHN0YXRlcywgcHJlcGFyZWQKICAgICAgICAgICAgICAgICAgICB0byBwdXQgdGhlIHdhciBpbnRvIFBoaWxpcCdzIGhhbmRzIGF0IHRoZSBuZXh0IGNvbmdyZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.152'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTIiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBmb3VuZCBhIHBsYXVzaWJsZSBwcmV0ZXh0OiB5b3UgbXVzdCBlaXRoZXIsCiAgICAgICAgICAgICAgICAgICAgdGhleSBzYWlkLCBwYXkgY29udHJpYnV0aW9ucyB0byBhIHdhci1jaGVzdCwgbWFpbnRhaW4gbWVyY2VuYXJ5IGZvcmNlcywgYW5kIGxldnkKICAgICAgICAgICAgICAgICAgICBhIGZpbmUgb24gYWxsIHJlY3VzYW50cywgb3IgZWxzZSBlbGVjdCBQaGlsaXAgYXMgY29tbWFuZGVyLWluLWNoaWVmOiBhbmQgc28sIHRvCiAgICAgICAgICAgICAgICAgICAgY3V0IGEgbG9uZyBzdG9yeSBzaG9ydCwgZWxlY3RlZCBoZSB3YXMgb24gdGhpcyBwbGVhLiBIZSBsb3N0IG5vIHRpbWUsIGNvbGxlY3RlZAogICAgICAgICAgICAgICAgICAgIGhpcyBhcm15LCBwcmV0ZW5kZWQgdG8gbWFyY2ggdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE0NjYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTQ2NiI+Q2lycmhhPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGVuIGJhZGUgdGhlIENpcnJoYWVhbnMgYW5kIHRoZSBMb2NyaWFucyBhbGlrZSBnb29kLWJ5ZSBhbmQgZ29vZCBsdWNrLCBhbmQKICAgICAgICAgICAgICAgICAgICBzZWl6ZWQgRWxhdGVhLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.153'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgVGhlYmFucyBzYXcgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJpY2ssIHRoZXkgcHJvbXB0bHkgY2hhbmdlZCB0aGVpciBtaW5kcyBhbmQgam9pbmVkIG91ciBzaWRlOyBvdGhlcndpc2UgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgYnVzaW5lc3Mgd291bGQgaGF2ZSBkZXNjZW5kZWQgdXBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gbGlrZSBhIHRvcnJlbnQgZnJvbSB0aGUgaGlsbHMuIEluIGZhY3QsIHRoZSBUaGViYW5zCiAgICAgICAgICAgICAgICAgICAgY2hlY2tlZCBoaW0gZm9yIHRoZSBtb21lbnQ7IGFuZCBmb3IgdGhhdCByZWxpZWYsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBoYXZlIGZpcnN0IGFuZCBjaGllZmx5IHRvIHRoYW5rCiAgICAgICAgICAgICAgICAgICAgdGhlIGtpbmRuZXNzIG9mIHNvbWUgZnJpZW5kbHkgZ29kLCBidXQgaW4gYSBzZWNvbmRhcnkgZGVncmVlLCBhbmQgc28gZmFyIGFzIG9uZQogICAgICAgICAgICAgICAgICAgIG1hbiBjb3VsZCBoZWxwLCB5b3UgaGF2ZSB0byB0aGFuayBtZS4gSGFuZCBtZSB0aG9zZSBkZWNyZWVzLCB3aXRoIHRoZSBkYXRlcyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBzZXZlcmFsIHRyYW5zYWN0aW9ucy4gVGhleSB3aWxsIHNob3cgeW91IHdoYXQgYSBtYXNzIG9mIHRyb3VibGUgdGhpcwogICAgICAgICAgICAgICAgICAgIGNvbnN1bW1hdGUgdmlsbGFpbiBwcm92b2tlZDsgYW5kIHlldCBoZSB3YXMgbmV2ZXIgcHVuaXNoZWQuIDwvdHJhbnNsYXRpb24+"
translation['18.154'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTQiIHVuaXQ9InNlY3Rpb24iIC8+UGxlYXNlIHJlYWQgdGhlIGRlY3JlZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iUmVzb2x1dGlvbiBvZiB0aGUgQW1waGljdHlvbnMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlc29sdXRpb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbXBoaWN0eW9uczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcHJpZXN0aG9vZCBvZiBDbGVpbmFnb3JhcywgYXQgdGhlIHNwcmluZyBzZXNzaW9uLCBpdCB3YXMgcmVzb2x2ZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFdhcmRlbnMgYW5kIHRoZSBBc3Nlc3NvcnMgb2YgdGhlIEFtcGhpY3R5b25zLCBhbmQgYnkgdGhlIEdlbmVyYWwgU3lub2Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEFtcGhpY3R5b25zLCB0aGF0LCB3aGVyZWFzIEFtcGhpc3NpYW5zIGFyZSBlbmNyb2FjaGluZyB1cG9uIHRoZSBzYWNyZWQKICAgICAgICAgICAgICAgICAgICAgICAgdGVycml0b3J5IGFuZCBhcmUgc293aW5nIGFuZCBncmF6aW5nIHRoZSBzYW1lLCB0aGUgV2FyZGVucyBhbmQgQXNzZXNzb3JzCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsIGF0dGVuZCBhbmQgbWFyayBvdXQgdGhlIGJvdW5kYXJpZXMgd2l0aCBwaWxsYXJzLCBhbmQgc2hhbGwgZm9yYmlkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBbXBoaXNzaWFucyBoZXJlYWZ0ZXIgdG8gZW5jcm9hY2guXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVzb2x1dGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFtcGhpY3R5b25zPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0luIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwcmllc3Rob29kIG9mIENsZWluYWdvcmFzLCBhdCB0aGUgc3ByaW5nIHNlc3Npb24sIGl0IHdhcyByZXNvbHZlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgV2FyZGVucyBhbmQgdGhlIEFzc2Vzc29ycyBvZiB0aGUgQW1waGljdHlvbnMsIGFuZCBieSB0aGUgR2VuZXJhbCBTeW5vZCBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQW1waGljdHlvbnMsIHRoYXQsIHdoZXJlYXMgQW1waGlzc2lhbnMgYXJlIGVuY3JvYWNoaW5nIHVwb24gdGhlIHNhY3JlZAogICAgICAgICAgICAgICAgICAgICAgICB0ZXJyaXRvcnkgYW5kIGFyZSBzb3dpbmcgYW5kIGdyYXppbmcgdGhlIHNhbWUsIHRoZSBXYXJkZW5zIGFuZCBBc3Nlc3NvcnMKICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgYXR0ZW5kIGFuZCBtYXJrIG91dCB0aGUgYm91bmRhcmllcyB3aXRoIHBpbGxhcnMsIGFuZCBzaGFsbCBmb3JiaWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEFtcGhpc3NpYW5zIGhlcmVhZnRlciB0byBlbmNyb2FjaC5dPC90cmFuc2xhdGlvbj4="
translation['18.155'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTUiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQW5vdGhlciBSZXNvbHV0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyIFJlc29sdXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlIHByaWVzdGhvb2Qgb2YgQ2xlaW5hZ29yYXMsIGF0IHRoZSBzcHJpbmcgc2Vzc2lvbiwgaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVkIGJ5IHRoZSBXYXJkZW5zLCBBc3Nlc3NvcnMsIGFuZCBHZW5lcmFsIFN5bm9kIHRoYXQgd2hlcmVhcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQW1waGlzc2lhbnMgd2hvIGhhdmUgb2NjdXBpZWQgdGhlIHNhY3JlZCB0ZXJyaXRvcnkgYXJlIHRpbGxpbmcgYW5kIGdyYXppbmcKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUsIGFuZCwgd2hlbiBmb3JiaWRkZW4gdG8gZG8gc28sIGhhdmUgYXBwZWFyZWQgaW4gYXJtcyBhbmQgcmVzaXN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1vbiBhc3NlbWJseSBvZiB0aGUgR3JlZWtzIGJ5IGZvcmNlLCBhbmQgaGF2ZSBhY3R1YWxseSB3b3VuZGVkIHNvbWUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlbSwgdGhlIGdlbmVyYWwgYXBwb2ludGVkIGJ5IHNvbWUgb2YgdGhlIEFtcGhpY3R5b25zLCBDb3R0eXBodXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEFyY2FkaWFuLCBzaGFsbCBnbyBhcyBhbiBhbWJhc3NhZG9yIHRvIFBoaWxpcCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE1Ij5NYWNlZG9uPC9wbGFjZU5hbWU+IGFuZCByZXF1ZXN0IGhpbSB0byBjb21lIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBoZWxwIG9mIEFwb2xsbyBhbmQgdGhlIEFtcGhpY3R5b25zLCB0aGF0IGhlIG1heSBub3Qgc3VmZmVyIHRoZSBnb2QgdG8gYmUKICAgICAgICAgICAgICAgICAgICAgICAgb3V0cmFnZWQgYnkgdGhlIGltcGlvdXMgQW1waGlzc2lhbnM7IGhlIHNoYWxsIGFsc28gYW5ub3VuY2UgdGhhdCBQaGlsaXAgaXMKICAgICAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIEdlbmVyYWwgd2l0aCBmdWxsIHBvd2VycyBieSB0aGUgR3JlZWtzIHdobyBhcmUgbWVtYmVycyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXNzZW1ibHkgb2YgdGhlIEFtcGhpY3R5b25zLl08L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFub3RoZXIgUmVzb2x1dGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgcHJpZXN0aG9vZCBvZiBDbGVpbmFnb3JhcywgYXQgdGhlIHNwcmluZyBzZXNzaW9uLCBpdCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgYnkgdGhlIFdhcmRlbnMsIEFzc2Vzc29ycywgYW5kIEdlbmVyYWwgU3lub2QgdGhhdCB3aGVyZWFzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBbXBoaXNzaWFucyB3aG8gaGF2ZSBvY2N1cGllZCB0aGUgc2FjcmVkIHRlcnJpdG9yeSBhcmUgdGlsbGluZyBhbmQgZ3JhemluZwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSwgYW5kLCB3aGVuIGZvcmJpZGRlbiB0byBkbyBzbywgaGF2ZSBhcHBlYXJlZCBpbiBhcm1zIGFuZCByZXNpc3RlZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9uIGFzc2VtYmx5IG9mIHRoZSBHcmVla3MgYnkgZm9yY2UsIGFuZCBoYXZlIGFjdHVhbGx5IHdvdW5kZWQgc29tZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGVtLCB0aGUgZ2VuZXJhbCBhcHBvaW50ZWQgYnkgc29tZSBvZiB0aGUgQW1waGljdHlvbnMsIENvdHR5cGh1cyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXJjYWRpYW4sIHNoYWxsIGdvIGFzIGFuIGFtYmFzc2Fkb3IgdG8gUGhpbGlwIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzE1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3MTUiPk1hY2Vkb248L3BsYWNlTmFtZT4gYW5kIHJlcXVlc3QgaGltIHRvIGNvbWUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGhlbHAgb2YgQXBvbGxvIGFuZCB0aGUgQW1waGljdHlvbnMsIHRoYXQgaGUgbWF5IG5vdCBzdWZmZXIgdGhlIGdvZCB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICBvdXRyYWdlZCBieSB0aGUgaW1waW91cyBBbXBoaXNzaWFuczsgaGUgc2hhbGwgYWxzbyBhbm5vdW5jZSB0aGF0IFBoaWxpcCBpcwogICAgICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQgR2VuZXJhbCB3aXRoIGZ1bGwgcG93ZXJzIGJ5IHRoZSBHcmVla3Mgd2hvIGFyZSBtZW1iZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSBvZiB0aGUgQW1waGljdHlvbnMuXTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgcmVhZCB0aGUgZGF0ZXMgb2YgdGhlc2UgdHJhbnNhY3Rpb25zLiBUaGV5IGFyZSBhbGwgZGF0ZXMgYXQgd2hpY2ggaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgb3Igc3Bva2VzbWFuIGF0IHRoZSBDb25ncmVzcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iUmVjb3JkIG9mIERhdGVzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZWNvcmQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGVzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0FyY2hvbnNoaXAgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTW5lc2l0aGVpZGVzLCBvbiB0aGUgc2l4dGVlbnRoIG9mIHRoZSBtb250aCBBbnRoZXN0ZXJpb24uXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVjb3JkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEYXRlczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltBcmNob25zaGlwIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIE1uZXNpdGhlaWRlcywgb24gdGhlIHNpeHRlZW50aCBvZiB0aGUgbW9udGggQW50aGVzdGVyaW9uLl08L3RyYW5zbGF0aW9uPg=="
translation['18.156'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBoYW5kIG1lCiAgICAgICAgICAgICAgICAgICAgdGhlIGxldHRlciB3aGljaCBQaGlsaXAgZGlzcGF0Y2hlZCB0byBoaXMgUGVsb3Bvbm5lc2lhbiBhbGxpZXMsIHdoZW4gdGhlIFRoZWJhbnMKICAgICAgICAgICAgICAgICAgICBkaXNvYmV5ZWQgaGltLiBFdmVuIHRoYXQgbGV0dGVyIHdpbGwgZ2l2ZSB5b3UgYSBjbGVhciBwcm9vZiB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGNvbmNlYWxpbmcgdGhlIHRydWUgcmVhc29ucyBvZiBoaXMgZW50ZXJwcmlzZSwgbmFtZWx5IGhpcyBkZXNpZ25zIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBhbmQgZXNwZWNpYWxseSBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgd2FzIG9ubHkgcHJldGVuZGluZyB6ZWFsIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBuYXRpb25hbCBpbnRlcmVzdHMgYXMgZGVmaW5lZCBieSB0aGUgQW1waGljdHlvbmljIENvdW5jaWwuIEJ1dCB0aGUgbWFuIHdobwogICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkIGhpbSB3aXRoIHRoYXQgYmFzaXMgb2YgYWN0aW9uIGFuZCB0aG9zZSBwcmV0ZXh0cyB3YXMgQWVzY2hpbmVzLiBSZWFkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.157'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTciIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGV0dGVyIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bUGhpbGlwLAogICAgICAgICAgICAgICAgICAgICAgICBraW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgdG8gdGhlIHB1YmxpYwogICAgICAgICAgICAgICAgICAgICAgICBvZmZpY2VycyBhbmQgY291bmNpbGxvcnMgb2YgdGhlIGFsbGllZCBQZWxvcG9ubmVzaWFucyBhbmQgdG8gYWxsIGhpcyBvdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBBbGxpZXMsIGdyZWV0aW5nLiBTaW5jZSB0aGUgT3pvbGlhbiBMb2NyaWFucywgc2V0dGxlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpc3NhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXNzYSI+QW1waGlzc2E8L3BsYWNlTmFtZT4sIGFyZSBvdXRyYWdpbmcgdGhlIHRlbXBsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBBcG9sbG8gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxwaGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERlbHBoaSI+RGVscGhpPC9wbGFjZU5hbWU+IGFuZCBjb21lIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGFybXMgdG8gcGx1bmRlciB0aGUgc2FjcmVkIHRlcnJpdG9yeSwgSSBjb25zZW50IHRvIGpvaW4geW91IGluIGhlbHBpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGdvZCBhbmQgaW4gcHVuaXNoaW5nIHRob3NlIHdobyB0cmFuc2dyZXNzIGluIGFueSB3YXkgdGhlIHByaW5jaXBsZXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgcmVsaWdpb24uIFRoZXJlZm9yZSBtZWV0IHVuZGVyIGFybXMgYXQgUGhvY2lzIHdpdGggZm9ydHkgZGF5cycgcHJvdmlzaW9ucyBpbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbmV4dCBtb250aCwgc3R5bGVkIExvdXMgYnkgdXMsIEJvZWRyb21pb24gYnkgdGhlIEF0aGVuaWFucywgYW5kIFBhbmVtdXMKICAgICAgICAgICAgICAgICAgICAgICAgYnkgdGhlIENvcmludGhpYW5zLiBUaG9zZSB3aG8sIGJlaW5nIHBsZWRnZWQgdG8gdXMsIGRvIG5vdCBqb2luIHVzIGluIGZ1bGwKICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2UsIHdlIHNoYWxsIHRyZWF0IGFzIHB1bmlzaGFibGUuIEZhcmV3ZWxsLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltQaGlsaXAsCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmcgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+LCB0byB0aGUgcHVibGljCiAgICAgICAgICAgICAgICAgICAgICAgIG9mZmljZXJzIGFuZCBjb3VuY2lsbG9ycyBvZiB0aGUgYWxsaWVkIFBlbG9wb25uZXNpYW5zIGFuZCB0byBhbGwgaGlzIG90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIEFsbGllcywgZ3JlZXRpbmcuIFNpbmNlIHRoZSBPem9saWFuIExvY3JpYW5zLCBzZXR0bGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlzc2EiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpc3NhIj5BbXBoaXNzYTwvcGxhY2VOYW1lPiwgYXJlIG91dHJhZ2luZyB0aGUgdGVtcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsbyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLERlbHBoaSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRGVscGhpIj5EZWxwaGk8L3BsYWNlTmFtZT4gYW5kIGNvbWUgaW4KICAgICAgICAgICAgICAgICAgICAgICAgYXJtcyB0byBwbHVuZGVyIHRoZSBzYWNyZWQgdGVycml0b3J5LCBJIGNvbnNlbnQgdG8gam9pbiB5b3UgaW4gaGVscGluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZ29kIGFuZCBpbiBwdW5pc2hpbmcgdGhvc2Ugd2hvIHRyYW5zZ3Jlc3MgaW4gYW55IHdheSB0aGUgcHJpbmNpcGxlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICByZWxpZ2lvbi4gVGhlcmVmb3JlIG1lZXQgdW5kZXIgYXJtcyBhdCBQaG9jaXMgd2l0aCBmb3J0eSBkYXlzJyBwcm92aXNpb25zIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBuZXh0IG1vbnRoLCBzdHlsZWQgTG91cyBieSB1cywgQm9lZHJvbWlvbiBieSB0aGUgQXRoZW5pYW5zLCBhbmQgUGFuZW11cwogICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgQ29yaW50aGlhbnMuIFRob3NlIHdobywgYmVpbmcgcGxlZGdlZCB0byB1cywgZG8gbm90IGpvaW4gdXMgaW4gZnVsbAogICAgICAgICAgICAgICAgICAgICAgICBmb3JjZSwgd2Ugc2hhbGwgdHJlYXQgYXMgcHVuaXNoYWJsZS4gRmFyZXdlbGwuXTwvdHJhbnNsYXRpb24+"
translation['18.158'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBzZWUgaG93IGhlCiAgICAgICAgICAgICAgICAgICAgYXZvaWRzIHBlcnNvbmFsIGV4Y3VzZXMsIGFuZCB0YWtlcyBzaGVsdGVyIGluIEFtcGhpY3R5b25pYyByZWFzb25zLiBXaG8gZ2F2ZSBoaW0KICAgICAgICAgICAgICAgICAgICBoaXMgZXF1aXBtZW50IG9mIGRlY2VpdD8gV2hvIHN1cHBsaWVkIGhpbSB3aXRoIHRoZXNlIHByZXRleHRzID8gV2hvIGFib3ZlIGFsbAogICAgICAgICAgICAgICAgICAgIG90aGVycyBpcyB0byBibGFtZSBmb3IgYWxsIHRoZSBlbnN1aW5nIG1pc2NoaWVmPyBXaG8gYnV0IEFlc2NoaW5lcz8gVGhlbiBkbyBub3QKICAgICAgICAgICAgICAgICAgICBnbyBhYm91dCBzYXlpbmcsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBkaXNhc3RlcnMgd2VyZSBicm91Z2h0IHVwb24gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGJ5IFBoaWxpcCBhbG9uZS4gSSBzb2xlbW5seSBhdmVyIHRoYXQgaXQgd2FzIG5vdCBvbmUKICAgICAgICAgICAgICAgICAgICBtYW4sIGJ1dCBhIGdhbmcgb2YgdHJhaXRvcnMgaW4gZXZlcnkgc3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['18.159'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTkiIHVuaXQ9InNlY3Rpb24iIC8+T25lIG9mIHRoZW0gd2FzIEFlc2NoaW5lczsgYW5kLCBpZiBJIGFtIHRvIHRlbGwgdGhlIHdob2xlIHRydXRoIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBjb25jZWFsbWVudCwgSSB3aWxsIG5vdCBmbGluY2ggZnJvbSBkZWNsYXJpbmcgaGltIHRoZSBldmlsIGdlbml1cyBvZiBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVuLCBhbGwgdGhlIGRpc3RyaWN0cywgYW5kIGFsbCB0aGUgY2l0aWVzIHRoYXQgaGF2ZSBwZXJpc2hlZC4gTGV0IHRoZSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgc293ZWQgdGhlIHNlZWQgYmVhciB0aGUgZ3VpbHQgb2YgdGhlIGhhcnZlc3QuIEkgbWFydmVsIHRoYXQgeW91IGRpZCBub3QgYXZlcnQKICAgICAgICAgICAgICAgICAgICB5b3VyIGZhY2VzIHRoZSBtb21lbnQgeW91IHNldCBleWVzIG9uIGhpbTsgb25seSwgYXMgaXQgc2VlbXMsIHRoZXJlIGlzIGEgY2xvdWQKICAgICAgICAgICAgICAgICAgICBvZiBkYXJrbmVzcyBiZXR3ZWVuIHlvdSBhbmQgdGhlIHRydXRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.160'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIGRlYWxpbmcgd2l0aCBoaXMgdW5wYXRyaW90aWMgY29uZHVjdCBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBhcHByb2FjaGVkIHRoZSBxdWVzdGlvbiBvZiB0aGUgdmVyeSBkaWZmZXJlbnQgcG9saWN5IHB1cnN1ZWQgYnkgbXlzZWxmLiBGb3IKICAgICAgICAgICAgICAgICAgICBtYW55IHJlYXNvbnMgeW91IG1heSBmYWlybHkgYmUgYXNrZWQgdG8gbGlzdGVuIHRvIG15IGFjY291bnQgb2YgdGhhdCBwb2xpY3ksIGJ1dAogICAgICAgICAgICAgICAgICAgIGNoaWVmbHkgYmVjYXVzZSBpdCB3b3VsZCBiZSBkaXNjcmVkaXRhYmxlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IHlvdSBzaG91bGQgYmUgaW1wYXRpZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1lciBlIHJlY2l0YWwgb2YgdGhvc2UgYXJkdW91cyBsYWJvcnMgb24geW91ciBiZWhhbGYgd2hpY2ggSSBoYWQgcGF0aWVuY2UgdG8KICAgICAgICAgICAgICAgICAgICBlbmR1cmUuIDwvdHJhbnNsYXRpb24+"
translation['18.161'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBJIHNhdyB0aGF0IHRoZSBUaGViYW5zLCBhbmQKICAgICAgICAgICAgICAgICAgICBwZXJoYXBzIGV2ZW4gdGhlIEF0aGVuaWFucywgdW5kZXIgdGhlIGluZmx1ZW5jZSBvZiB0aGUgYWRoZXJlbnRzIG9mIFBoaWxpcCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgY29ycnVwdCBmYWN0aW9uIGluIHRoZSB0d28gc3RhdGVzLCB3ZXJlIGRpc3JlZ2FyZGluZyBhIHJlYWwgZGFuZ2VyIHRoYXQKICAgICAgICAgICAgICAgICAgICBjYWxsZWQgZm9yIGVhcm5lc3QgdmlnaWxhbmNlLCB0aGUgZGFuZ2VyIG9mIHBlcm1pdHRpbmcgUGhpbGlwJ3MgYWdncmFuZGl6ZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdlcmUgdGFraW5nIG5vIHNpbmdsZSBtZWFzdXJlIG9mIHByZWNhdXRpb24sIGJ1dCB3ZXJlIHJlYWR5IHRvIHF1YXJyZWwgYW5kCiAgICAgICAgICAgICAgICAgICAgYXR0YWNrIGVhY2ggb3RoZXIsIEkgcGVyc2lzdGVudGx5IHdhdGNoZWQgZm9yIG9wcG9ydHVuaXRpZXMgb2YgYXZlcnRpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIGRhbmdlciwgbm90IG1lcmVseSBiZWNhdXNlIG15IG93biBqdWRnZW1lbnQgd2FybmVkIG1lIHRoYXQgc3VjaCBzb2xpY2l0dWRlIHdhcwogICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSwgPC90cmFuc2xhdGlvbj4="
translation['18.162'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGJlY2F1c2UgSSBrbmV3IHRoYXQKICAgICAgICAgICAgICAgICAgICBBcmlzdG9waG9uLCBhbmQgYWZ0ZXIgaGltIEV1YnVsdXMsIGhhZCBhbHdheXMgd2lzaGVkIHRvIHByb21vdGUgYSBnb29kCiAgICAgICAgICAgICAgICAgICAgdW5kZXJzdGFuZGluZyBiZXR3ZWVuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+LiBJbiB0aGF0IHJlZ2FyZCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBhbHdheXMgb2Ygb25lIG1pbmQsIGRlc3BpdGUgdGhlaXIgY29uc3RhbnQgZGlzYWdyZWVtZW50IG9uIG90aGVyIHBvaW50cyBvZgogICAgICAgICAgICAgICAgICAgIHBvbGljeS4gV2hpbGUgdGhvc2Ugc3RhdGVzbWVuIHdlcmUgYWxpdmUsIEFlc2NoaW5lcywgeW91IHBlc3RlcmVkIHRoZW0gd2l0aCB5b3VyCiAgICAgICAgICAgICAgICAgICAgZmxhdHRlcnksIGxpa2UgdGhlIHNseSBmb3ggeW91IGFyZTsgbm93IHRoZXkgYXJlIGRlYWQsIHlvdSBkZW5vdW5jZSB0aGVtLAogICAgICAgICAgICAgICAgICAgIHVuYXdhcmUgdGhhdCwgd2hlbiB5b3UgcmVwcm9hY2ggbWUgd2l0aCBhIFRoZWJhbiBwb2xpY3ksIHlvdXIgY2Vuc3VyZSBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIGFmZmVjdCBtZSBzbyBtdWNoIGFzIHRoZSBtZW4gd2hvIGFwcHJvdmVkIG9mIGEgVGhlYmFuIGFsbGlhbmNlIGJlZm9yZSBJIGRpZC4gQnV0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyBhIGRpZ3Jlc3Npb24uIDwvdHJhbnNsYXRpb24+"
translation['18.163'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjMiIHVuaXQ9InNlY3Rpb24iIC8+SSBzYXkgdGhhdCwgd2hlbgogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyBoYWQgcHJvdm9rZWQgdGhlIHdhciBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpc3NhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXNzYSI+QW1waGlzc2E8L3BsYWNlTmFtZT4sIGFuZCB3aGVuIGhpcyBhc3NvY2lhdGVzIGhhZCBoZWxwZWQgaGltIHRvIGFnZ3JhdmF0ZQogICAgICAgICAgICAgICAgICAgIG91ciBlbm1pdHkgdG93YXJkcyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCB3YXMgdGhhdCBQaGlsaXAgbWFyY2hlZCBhZ2FpbnN0IHVzLCBpbiBwdXJzdWFuY2Ugb2YgdGhlIHB1cnBvc2UgZm9yIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgZW1icm9pbGVkIHRoZSBzdGF0ZXMsIGFuZCB0aGF0LCBpZiB3ZSBoYWQgbm90IHJvdXNlZCBvdXJzZWx2ZXMgYSBsaXR0bGUKICAgICAgICAgICAgICAgICAgICBqdXN0IGluIHRpbWUsIHdlIGNvdWxkIG5ldmVyIGhhdmUgcmV0cmlldmVkIG91ciBwb3NpdGlvbjsgc28gZmFyIGhhZCB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICBjYXJyaWVkIHRoZSBxdWFycmVsLiBZb3Ugd2lsbCBiZXR0ZXIgdW5kZXJzdGFuZCB0aGUgc3RhdGUgb2YgZmVlbGluZyBiZXR3ZWVuIHRoZQogICAgICAgICAgICAgICAgICAgIHR3byBjaXRpZXMsIHdoZW4geW91IGhhdmUgaGVhcmQgdGhlIGRlY3JlZXMgYW5kIHRoZSBhbnN3ZXJzIHNlbnQgdGhlcmV0by4gUGxlYXNlCiAgICAgICAgICAgICAgICAgICAgdGFrZSBhbmQgcmVhZCB0aGVzZSBwYXBlcnMuIDwvdHJhbnNsYXRpb24+"
translation['18.164'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjQiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlIGFyY2hvbnNoaXAgb2YgSGVyb3B5dGh1cywgb24gdGhlIHR3ZW50eS1maWZ0aCBkYXkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoIEVsYXBoZWJvbGlvbiwgdGhlIHRyaWJlIEVyZWNodGhlaXMgdGhlbiBob2xkaW5nIHRoZSBwcmVzaWRlbmN5LCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYWR2aWNlIG9mIHRoZSBDb3VuY2lsIGFuZCB0aGUgR2VuZXJhbHM6IHdoZXJlYXMgUGhpbGlwIGhhcyBjYXB0dXJlZCBzbyBtZSBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgY2l0aWVzIG9mIG91ciBuZWlnaGJvcnMgYW5kIGlzIGJlc2llZ2luZyBvdGhlcnMsIGFuZCBmaW5hbGx5IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXBhcmluZyB0byBhZHZhbmNlIGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCBpZ25vcmluZyBvdXIgYWdyZWVtZW50IHdpdGggaGltLCBhbmQgaXMgbWVkaXRhdGluZyBhCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFjaCBvZiBoaXMgb2F0aHMgYW5kIG9mIHRoZSBwZWFjZSwgdmlvbGF0aW5nIGFsbCBtdXR1YWwgcGxlZGdlcywgYmUgaXQKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgYnkgdGhlIENvdW5jaWwgYW5kIFBlb3BsZSB0byBzZW5kIGFtYmFzc2Fkb3JzIHRvIGNvbmZlciB3aXRoIGhpbQogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdG8gc3VtbW9uIGhpbSB0byBwcmVzZXJ2ZSBpbiBwYXJ0aWN1bGFyIGhpcyBhZ3JlZW1lbnQgYW5kIGNvbXBhY3Qgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICB1cywgYW5kLCBmYWlsaW5nIHRoYXQsIHRvIGdpdmUgdGhlIENpdHkgdGltZSBmb3IgZGVjaXNpb24gYW5kIHRvIGNvbmNsdWRlIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGFybWlzdGljZSB1bnRpbCB0aGUgbW9udGggb2YgVGhhcmdlbGlvbi4gVGhlIGZvbGxvd2luZyBtZW1iZXJzIG9mIENvdW5jaWwKICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSBjaG9zZW46IFNpbXVzIG9mIEFuYWd5cnVzLCBFdXRoeWRlbW9zIG9mIFBoeWxhZSwgQnVsYWdvcmFzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEFsb3BlY2UuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0luIHRoZSBhcmNob25zaGlwIG9mIEhlcm9weXRodXMsIG9uIHRoZSB0d2VudHktZmlmdGggZGF5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBtb250aCBFbGFwaGVib2xpb24sIHRoZSB0cmliZSBFcmVjaHRoZWlzIHRoZW4gaG9sZGluZyB0aGUgcHJlc2lkZW5jeSwgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFkdmljZSBvZiB0aGUgQ291bmNpbCBhbmQgdGhlIEdlbmVyYWxzOiB3aGVyZWFzIFBoaWxpcCBoYXMgY2FwdHVyZWQgc28gbWUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNpdGllcyBvZiBvdXIgbmVpZ2hib3JzIGFuZCBpcyBiZXNpZWdpbmcgb3RoZXJzLCBhbmQgZmluYWxseSBpcwogICAgICAgICAgICAgICAgICAgICAgICBwcmVwYXJpbmcgdG8gYWR2YW5jZSBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgaWdub3Jpbmcgb3VyIGFncmVlbWVudCB3aXRoIGhpbSwgYW5kIGlzIG1lZGl0YXRpbmcgYQogICAgICAgICAgICAgICAgICAgICAgICBicmVhY2ggb2YgaGlzIG9hdGhzIGFuZCBvZiB0aGUgcGVhY2UsIHZpb2xhdGluZyBhbGwgbXV0dWFsIHBsZWRnZXMsIGJlIGl0CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVkIGJ5IHRoZSBDb3VuY2lsIGFuZCBQZW9wbGUgdG8gc2VuZCBhbWJhc3NhZG9ycyB0byBjb25mZXIgd2l0aCBoaW0KICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRvIHN1bW1vbiBoaW0gdG8gcHJlc2VydmUgaW4gcGFydGljdWxhciBoaXMgYWdyZWVtZW50IGFuZCBjb21wYWN0IHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgdXMsIGFuZCwgZmFpbGluZyB0aGF0LCB0byBnaXZlIHRoZSBDaXR5IHRpbWUgZm9yIGRlY2lzaW9uIGFuZCB0byBjb25jbHVkZSBhbgogICAgICAgICAgICAgICAgICAgICAgICBhcm1pc3RpY2UgdW50aWwgdGhlIG1vbnRoIG9mIFRoYXJnZWxpb24uIFRoZSBmb2xsb3dpbmcgbWVtYmVycyBvZiBDb3VuY2lsCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgY2hvc2VuOiBTaW11cyBvZiBBbmFneXJ1cywgRXV0aHlkZW1vcyBvZiBQaHlsYWUsIEJ1bGFnb3JhcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBBbG9wZWNlLl08L3RyYW5zbGF0aW9uPg=="
translation['18.165'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjUiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQW5vdGhlciBEZWNyZWUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFub3RoZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgYXJjaG9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICBvZiBIZXJvcHl0aHVzLCBvbiB0aGUgdGhpcnRpZXRoIG9mIHRoZSBtb250aCBNdW55Y2hpb24sIG9uIHRoZSBhZHZpY2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIENvbW1hbmRlci1pbi1jaGllZjogd2hlcmVhcyBQaGlsaXAgYWltcyBhdCBzZXR0aW5nIHRoZSBUaGViYW5zIGF0IHZhcmlhbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdXMsIGFuZCBoYXMgcHJlcGFyZWQgdG8gbWFyY2ggd2l0aCBhbGwgaGlzIGZvcmNlcyB0byB0aGUgcGFydHMgbmVhcmVzdAogICAgICAgICAgICAgICAgICAgICAgICB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4sIHZpb2xhdGluZyBoaXMgZXhpc3RpbmcKICAgICAgICAgICAgICAgICAgICAgICAgYXJyYW5nZW1lbnRzIHdpdGggdXMsIGJlIGl0IHJlc29sdmVkIGJ5IHRoZSBDb3VuY2lsIGFuZCBQZW9wbGUgdG8gc2VuZCBhCiAgICAgICAgICAgICAgICAgICAgICAgIGhlcmFsZCBhbmQgYW1iYXNzYWRvcnMgdG8gcmVxdWVzdCBhbmQgZXhob3J0IGhpbSB0byBjb25jbHVkZSBhbiBhcm1pc3RpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgIGluIG9yZGVyIHRoYXQgdGhlIFBlb3BsZSBtYXkgZGVjaWRlIGFjY29yZGluZyB0byBjaXJjdW1zdGFuY2VzOyBmb3IgZXZlbiBub3cKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFBlb3BsZSBoYXZlIG5vdCBkZWNpZGVkIHRvIHNlbmQgYSBmb3JjZSBpZiB0aGV5IGNhbiBvYnRhaW4gcmVhc29uYWJsZQogICAgICAgICAgICAgICAgICAgICAgICB0ZXJtcy4gVGhlIGZvbGxvd2luZyB3ZXJlIGNob3NlbiBmcm9tIHRoZSBDb3VuY2lsOiBOZWFyY2h1cywgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFNvc2lub211cywgUG9seWNyYXRlcywgc29uIG9mIEVwaXBocm9uOyBhbmQgYXMgaGVyYWxkIGZyb20gdGhlIFBlb3BsZSwKICAgICAgICAgICAgICAgICAgICAgICAgRXVub211cyBvZiBBbmFwaGx5c3R1cy5dPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Bbm90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWNyZWU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlIGFyY2hvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgb2YgSGVyb3B5dGh1cywgb24gdGhlIHRoaXJ0aWV0aCBvZiB0aGUgbW9udGggTXVueWNoaW9uLCBvbiB0aGUgYWR2aWNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBDb21tYW5kZXItaW4tY2hpZWY6IHdoZXJlYXMgUGhpbGlwIGFpbXMgYXQgc2V0dGluZyB0aGUgVGhlYmFucyBhdCB2YXJpYW5jZQogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHVzLCBhbmQgaGFzIHByZXBhcmVkIHRvIG1hcmNoIHdpdGggYWxsIGhpcyBmb3JjZXMgdG8gdGhlIHBhcnRzIG5lYXJlc3QKICAgICAgICAgICAgICAgICAgICAgICAgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCB2aW9sYXRpbmcgaGlzIGV4aXN0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGFycmFuZ2VtZW50cyB3aXRoIHVzLCBiZSBpdCByZXNvbHZlZCBieSB0aGUgQ291bmNpbCBhbmQgUGVvcGxlIHRvIHNlbmQgYQogICAgICAgICAgICAgICAgICAgICAgICBoZXJhbGQgYW5kIGFtYmFzc2Fkb3JzIHRvIHJlcXVlc3QgYW5kIGV4aG9ydCBoaW0gdG8gY29uY2x1ZGUgYW4gYXJtaXN0aWNlLAogICAgICAgICAgICAgICAgICAgICAgICBpbiBvcmRlciB0aGF0IHRoZSBQZW9wbGUgbWF5IGRlY2lkZSBhY2NvcmRpbmcgdG8gY2lyY3Vtc3RhbmNlczsgZm9yIGV2ZW4gbm93CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBQZW9wbGUgaGF2ZSBub3QgZGVjaWRlZCB0byBzZW5kIGEgZm9yY2UgaWYgdGhleSBjYW4gb2J0YWluIHJlYXNvbmFibGUKICAgICAgICAgICAgICAgICAgICAgICAgdGVybXMuIFRoZSBmb2xsb3dpbmcgd2VyZSBjaG9zZW4gZnJvbSB0aGUgQ291bmNpbDogTmVhcmNodXMsIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBTb3Npbm9tdXMsIFBvbHljcmF0ZXMsIHNvbiBvZiBFcGlwaHJvbjsgYW5kIGFzIGhlcmFsZCBmcm9tIHRoZSBQZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgICAgIEV1bm9tdXMgb2YgQW5hcGhseXN0dXMuXTwvdHJhbnNsYXRpb24+"
translation['18.166'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyByZWFkIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcGxpZXMuIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IlJlcGx5IHRvIHRoZSBBdGhlbmlhbnMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcGx5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W1BoaWxpcCwgS2luZwogICAgICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIHRvIHRoZSBDb3VuY2lsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBncmVldGluZy7igJRJIGFtIG5vdCBpZ25vcmFudCBvZiB0aGUgcG9saWN5IHdoaWNoIHlvdSBoYXZlIGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgdG93YXJkcyB1cyBmcm9tIHRoZSBmaXJzdCwgbm9yIG9mIHlvdXIgZWZmb3J0cyB0byB3aW4gb3ZlciB0aGUgVGhlc3NhbGlhbnMKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFRoZWJhbnMsIGFuZCB0aGUgQm9lb3RpYW5zIGFzIHdlbGwuIFRoZXksIGhvd2V2ZXIsIGFyZSB3aXNlciwgYW5kIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHN1Ym1pdCB0aGVpciBwb2xpY3kgdG8geW91ciBkaWN0YXRpb24sIGJ1dCB0YWtlIHRoZWlyIHN0YW5kIHVwb24KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi1pbnRlcmVzdC4gQW5kIG5vdyB5b3UgY2hhbmdlIHlvdXIgdGFjdGljcywgYW5kIHNlbmQgYW1iYXNzYWRvcnMgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgICAgIGhlcmFsZCB0byBtZSwgcmVtaW5kaW5nIG1lIG9mIG91ciBjb21wYWN0IGFuZCBhc2tpbmcgZm9yIGFuIGFybWlzdGljZSwKICAgICAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHdlIGhhdmUgZG9uZSB5b3Ugbm8gd3JvbmcuIEhvd2V2ZXIsIGFmdGVyIGhlYXJpbmcgeW91ciBhbWJhc3NhZG9ycywgSQogICAgICAgICAgICAgICAgICAgICAgICBhY2NlZGUgdG8geW91ciByZXF1ZXN0LCBhbmQgYW0gcmVhZHkgdG8gY29uY2x1ZGUgYW4gYXJtaXN0aWNlLCBpZiB5b3Ugd2lsbAogICAgICAgICAgICAgICAgICAgICAgICBkaXNtaXNzIHlvdXIgZXZpbCBjb3Vuc2VsbG9ycywgYW5kIHB1bmlzaCB0aGVtIHdpdGggc3VpdGFibGUgZGVncmFkYXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIEZhcmV3ZWxsLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcGx5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W1BoaWxpcCwgS2luZwogICAgICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIHRvIHRoZSBDb3VuY2lsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgICAgICBncmVldGluZy7igJRJIGFtIG5vdCBpZ25vcmFudCBvZiB0aGUgcG9saWN5IHdoaWNoIHlvdSBoYXZlIGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgdG93YXJkcyB1cyBmcm9tIHRoZSBmaXJzdCwgbm9yIG9mIHlvdXIgZWZmb3J0cyB0byB3aW4gb3ZlciB0aGUgVGhlc3NhbGlhbnMKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFRoZWJhbnMsIGFuZCB0aGUgQm9lb3RpYW5zIGFzIHdlbGwuIFRoZXksIGhvd2V2ZXIsIGFyZSB3aXNlciwgYW5kIHdpbGwKICAgICAgICAgICAgICAgICAgICAgICAgbm90IHN1Ym1pdCB0aGVpciBwb2xpY3kgdG8geW91ciBkaWN0YXRpb24sIGJ1dCB0YWtlIHRoZWlyIHN0YW5kIHVwb24KICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi1pbnRlcmVzdC4gQW5kIG5vdyB5b3UgY2hhbmdlIHlvdXIgdGFjdGljcywgYW5kIHNlbmQgYW1iYXNzYWRvcnMgd2l0aCBhCiAgICAgICAgICAgICAgICAgICAgICAgIGhlcmFsZCB0byBtZSwgcmVtaW5kaW5nIG1lIG9mIG91ciBjb21wYWN0IGFuZCBhc2tpbmcgZm9yIGFuIGFybWlzdGljZSwKICAgICAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHdlIGhhdmUgZG9uZSB5b3Ugbm8gd3JvbmcuIEhvd2V2ZXIsIGFmdGVyIGhlYXJpbmcgeW91ciBhbWJhc3NhZG9ycywgSQogICAgICAgICAgICAgICAgICAgICAgICBhY2NlZGUgdG8geW91ciByZXF1ZXN0LCBhbmQgYW0gcmVhZHkgdG8gY29uY2x1ZGUgYW4gYXJtaXN0aWNlLCBpZiB5b3Ugd2lsbAogICAgICAgICAgICAgICAgICAgICAgICBkaXNtaXNzIHlvdXIgZXZpbCBjb3Vuc2VsbG9ycywgYW5kIHB1bmlzaCB0aGVtIHdpdGggc3VpdGFibGUgZGVncmFkYXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIEZhcmV3ZWxsLl08L3RyYW5zbGF0aW9uPg=="
translation['18.167'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjciIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iUmVwbHkgdG8gdGhlIFRoZWJhbnMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcGx5IHRvIHRoZSBUaGViYW5zPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W1BoaWxpcCwgS2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4sIHRvIHRoZSBDb3VuY2lsIGFuZCBQZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+LCBncmVldGluZy7igJRJIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgeW91ciBsZXR0ZXIsIGluIHdoaWNoIHlvdSByZW5ldyBnb29kd2lsbCBhbmQgcGVhY2Ugd2l0aCBtZS4gSQogICAgICAgICAgICAgICAgICAgICAgICB1bmRlcnN0YW5kLCBob3dldmVyLCB0aGF0IHRoZSBBdGhlbmlhbnMgYXJlIGRpc3BsYXlpbmcgdGhlIHV0bW9zdCBlYWdlcm5lc3MKICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlaXIgZGVzaXJlIHRvIHdpbiB5b3VyIGFjY2VwdGFuY2Ugb2YgdGhlaXIgb3ZlcnR1cmVzLiBOb3cgZm9ybWVybHkgSQogICAgICAgICAgICAgICAgICAgICAgICB1c2VkIHRvIGJsYW1lIHlvdSBmb3IgYSB0ZW5kZW5jeSB0byBwdXQgZmFpdGggaW4gdGhlaXIgaG9wZXMgYW5kIHRvIGFkb3B0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZWlyIHBvbGljeTsgYnV0IG5vdyBJIGFtIGdsYWQgdG8gbGVhcm4gdGhhdCB5b3UgaGF2ZSBwcmVmZXJyZWQgdG8gYmUgYXQKICAgICAgICAgICAgICAgICAgICAgICAgcGVhY2Ugd2l0aCBtZSByYXRoZXIgdGhhbiB0byBhZG9wdCB0aGUgb3BpbmlvbnMgb2Ygb3RoZXJzLiBFc3BlY2lhbGx5IGRvIEkKICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVuZCB5b3UgZm9yIGZvcm1pbmcgYSBzYWZlciBqdWRnZW1lbnQgb24gdGhlc2UgbWF0dGVycyBhbmQgZm9yIHJldGFpbmluZwogICAgICAgICAgICAgICAgICAgICAgICB5b3VyIGdvb2R3aWxsIHRvd2FyZCB1cywgd2hpY2ggSSBleHBlY3Qgd2lsbCBiZSBvZiBubyBzbWFsbCBhZHZhbnRhZ2UgdG8KICAgICAgICAgICAgICAgICAgICAgICAgeW91LCBpZiB5b3UgYWRoZXJlIHRvIHRoaXMgcHVycG9zZS4gRmFyZXdlbGwuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwbHkgdG8gdGhlIFRoZWJhbnM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bUGhpbGlwLCBLaW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiwgdG8gdGhlIENvdW5jaWwgYW5kIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGdyZWV0aW5nLuKAlEkgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCB5b3VyIGxldHRlciwgaW4gd2hpY2ggeW91IHJlbmV3IGdvb2R3aWxsIGFuZCBwZWFjZSB3aXRoIG1lLiBJCiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVyc3RhbmQsIGhvd2V2ZXIsIHRoYXQgdGhlIEF0aGVuaWFucyBhcmUgZGlzcGxheWluZyB0aGUgdXRtb3N0IGVhZ2VybmVzcwogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGVpciBkZXNpcmUgdG8gd2luIHlvdXIgYWNjZXB0YW5jZSBvZiB0aGVpciBvdmVydHVyZXMuIE5vdyBmb3JtZXJseSBJCiAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgdG8gYmxhbWUgeW91IGZvciBhIHRlbmRlbmN5IHRvIHB1dCBmYWl0aCBpbiB0aGVpciBob3BlcyBhbmQgdG8gYWRvcHQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgcG9saWN5OyBidXQgbm93IEkgYW0gZ2xhZCB0byBsZWFybiB0aGF0IHlvdSBoYXZlIHByZWZlcnJlZCB0byBiZSBhdAogICAgICAgICAgICAgICAgICAgICAgICBwZWFjZSB3aXRoIG1lIHJhdGhlciB0aGFuIHRvIGFkb3B0IHRoZSBvcGluaW9ucyBvZiBvdGhlcnMuIEVzcGVjaWFsbHkgZG8gSQogICAgICAgICAgICAgICAgICAgICAgICBjb21tZW5kIHlvdSBmb3IgZm9ybWluZyBhIHNhZmVyIGp1ZGdlbWVudCBvbiB0aGVzZSBtYXR0ZXJzIGFuZCBmb3IgcmV0YWluaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHlvdXIgZ29vZHdpbGwgdG93YXJkIHVzLCB3aGljaCBJIGV4cGVjdCB3aWxsIGJlIG9mIG5vIHNtYWxsIGFkdmFudGFnZSB0bwogICAgICAgICAgICAgICAgICAgICAgICB5b3UsIGlmIHlvdSBhZGhlcmUgdG8gdGhpcyBwdXJwb3NlLiBGYXJld2VsbC5dPC90cmFuc2xhdGlvbj4="
translation['18.168'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhhdmluZywKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoZSBhZ2VuY3kgb2YgdGhlc2UgbWVuLCBwcm9tb3RlZCBzdWNoIHJlbGF0aW9ucyBiZXR3ZWVuIHRoZSB0d28gY2l0aWVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBiZWluZyBlbmNvdXJhZ2VkIGJ5IHRoZXNlIGRlY3JlZXMgYW5kIHRoZXNlIHJlcGxpZXMsIFBoaWxpcCBjYW1lIHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgZm9yY2VzIGFuZCBvY2N1cGllZCBFbGF0ZWEsIGltYWdpbmluZyB0aGF0LCB3aGF0ZXZlciBtaWdodCBoYXBwZW4sIHlvdSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlYmFucyB3b3VsZCBuZXZlciBjb21lIHRvIGFncmVlbWVudC4gWW91IGFsbCByZW1lbWJlciB0aGUgY29tbW90aW9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBlbnN1ZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBuZXZlcnRoZWxlc3MgbGV0CiAgICAgICAgICAgICAgICAgICAgbWUgcmVjb3VudCBzb21lIHNtYWxsIGJ1dCBlc3NlbnRpYWwgZGV0YWlscy4gPC90cmFuc2xhdGlvbj4="
translation['18.169'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkV2ZW5pbmcgaGFkIGFscmVhZHkgZmFsbGVuIHdoZW4gYSBtZXNzZW5nZXIKICAgICAgICAgICAgICAgICAgICBhcnJpdmVkIGJyaW5naW5nIHRvIHRoZSBwcmVzaWRpbmcgY291bmNpbGxvcnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+cHJlc2lkaW5nIGNvdW5jaWxsb3JzOiB0aGUgZmlmdHkgcmVwcmVzZW50YXRpdmVzIG9uIHRoZSBDb3VuY2lsIG9mIHRoYXQgb25lCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0ZW4gdHJpYmVzIHdpdGhpbiB3aG9zZSB0ZXJtIG9mIGFkbWluaXN0cmF0aXZlIGR1dHkgdGhlIG1lZXRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgZmVsbC48L25vdGU+IHRoZSBuZXdzIHRoYXQgRWxhdGVhIGhhZCBiZWVuIHRha2VuLiBUaGV5IHdlcmUgc2l0dGluZyBhdAogICAgICAgICAgICAgICAgICAgIHN1cHBlciwgYnV0IHRoZXkgaW5zdGFudGx5IHJvc2UgZnJvbSB0YWJsZSwgY2xlYXJlZCB0aGUgYm9vdGhzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcmtldHBsYWNlIG9mIHRoZWlyIG9jY3VwYW50cywgYW5kIHVuZm9sZGVkIHRoZSBodXJkbGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj51bmZvbGRlZCB0aGUgaHVyZGxlczogdGhleSB3ZXJlIHRpZWQgdG9nZXRoZXIgaGluZ2Utd2lzZSwgYW5kLAogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHVuZm9sZGVkLCBmb3JtZWQgYmFycmllcnMsIGVpdGhlciB0byBrZWVwIG91dCBzdHJhbmdlcnMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1OS45MCIgdmFsaWQ9InllcyI+RGVtLiA1OS45MDwvYmlibD7vvIkgb3IgdG8gYmxvY2sgc3RyZWV0cyBsZWFkaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIG1hcmtldHBsYWNlIGVsc2V3aGVyZSB0aGFuIHRvIHRoZSBQbnl4LCB3aGVyZSB0aGUgYXNzZW1ibHkgbWV0CiAgICAgICAgICAgICAgICAgICAgICAgIO+8iFNjaG9sLiBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG9waC4gQWNoLiAyMiIgdmFsaWQ9InllcyI+QXJpc3RvcGguIEFjaC4KICAgICAgICAgICAgICAgICAgICAgICAgMjI8L2JpYmw+77yJLiBVbmZvbGRlZCBpcyBhIGNvbmplY3R1cmFsIHJlYWRpbmcgZGVyaXZlZCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzY2hvbGl1bSBjaXRlZDsgYnV0IG5vIHNhdGlzZmFjdG9yeSBleHBsYW5hdGlvbiBpcyBmb3J0aGNvbWluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGluZyBvZiBhbGwgTVNTLiwgc2V0IGZpcmUgdG8gdGhlIGh1cmRsZXMuPC9ub3RlPiB3aGlsZSBvdGhlcnMgc3VtbW9uZWQKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbWFuZGVycyBhbmQgb3JkZXJlZCB0aGUgYXR0ZW5kYW5jZSBvZiB0aGUgdHJ1bXBldGVyLiBUaGUgY29tbW90aW9uIHNwcmVhZAogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggdGhlIHdob2xlIGNpdHkuIEF0IGRheWJyZWFrIG9uIHRoZSBtb3Jyb3cgdGhlIHByZXNpZGVudHMgc3VtbW9uZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgQ291bmNpbCB0byB0aGUgQ291bmNpbCBIb3VzZSwgYW5kIHRoZSBjaXRpemVucyBmbG9ja2VkIHRvIHRoZSBwbGFjZSBvZiBhc3NlbWJseS4KICAgICAgICAgICAgICAgICAgICBCZWZvcmUgdGhlIENvdW5jaWwgY291bGQgaW50cm9kdWNlIHRoZSBidXNpbmVzcyBhbmQgcHJlcGFyZSB0aGUgYWdlbmRhLCB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBib2R5IG9mIGNpdGl6ZW5zIGhhZCB0YWtlbiB0aGVpciBwbGFjZXMgb24gdGhlIGhpbGwuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTkuOTAiIHZhbGlkPSJ5ZXMiPkRlbS4gNTkuOTA8L2JpYmw+77yJIG9yIHRvIGJsb2NrIHN0cmVldHMgbGVhZGluZwogICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBtYXJrZXRwbGFjZSBlbHNld2hlcmUgdGhhbiB0byB0aGUgUG55eCwgd2hlcmUgdGhlIGFzc2VtYmx5IG1ldAogICAgICAgICAgICAgICAgICAgICAgICDvvIhTY2hvbC4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvcGguIEFjaC4gMjIiIHZhbGlkPSJ5ZXMiPkFyaXN0b3BoLiBBY2guCiAgICAgICAgICAgICAgICAgICAgICAgIDIyPC9iaWJsPu+8iS4gVW5mb2xkZWQgaXMgYSBjb25qZWN0dXJhbCByZWFkaW5nIGRlcml2ZWQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2Nob2xpdW0gY2l0ZWQ7IGJ1dCBubyBzYXRpc2ZhY3RvcnkgZXhwbGFuYXRpb24gaXMgZm9ydGhjb21pbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRpbmcgb2YgYWxsIE1TUy4sIHNldCBmaXJlIHRvIHRoZSBodXJkbGVzLjwvdHJhbnNsYXRpb24+"
translation['18.170'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzAiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIENvdW5jaWwgYXJyaXZlZCwgdGhlIHByZXNpZGluZyBDb3VuY2lsbG9ycwogICAgICAgICAgICAgICAgICAgIGZvcm1hbGx5IHJlcG9ydGVkIHRoZSBpbnRlbGxpZ2VuY2UgdGhleSBoYWQgcmVjZWl2ZWQsIGFuZCB0aGUgY291cmllciB3YXMKICAgICAgICAgICAgICAgICAgICBpbnRyb2R1Y2VkLiBBcyBzb29uIGFzIGhlIGhhZCB0b2xkIGhpcyB0YWxlLCB0aGUgbWFyc2hhbCBwdXQgdGhlIHF1ZXN0aW9uLCBXaG8KICAgICAgICAgICAgICAgICAgICB3aXNoZXMgdG8gc3BlYWs/IE5vIG9uZSBjYW1lIGZvcndhcmQuIFRoZSBtYXJzaGFsIHJlcGVhdGVkIGhpcyBxdWVzdGlvbiBhZ2FpbgogICAgICAgICAgICAgICAgICAgIGFuZCBhZ2FpbiwgYnV0IHN0aWxsIG5vIG9uZSByb3NlIHRvIHNwZWFrLCBhbHRob3VnaCBhbGwgdGhlIGNvbW1hbmRlcnMgd2VyZQogICAgICAgICAgICAgICAgICAgIHRoZXJlLCBhbmQgYWxsIHRoZSBvcmF0b3JzLCBhbmQgYWx0aG91Z2ggdGhlIGNvdW50cnkgd2l0aCBoZXIgY2l2aWMgdm9pY2Ugd2FzCiAgICAgICAgICAgICAgICAgICAgY2FsbGluZyBmb3IgdGhlIG1hbiB3aG8gc2hvdWxkIHNwZWFrIGZvciBoZXIgc2FsdmF0aW9uOyBmb3Igd2UgbWF5IGp1c3RseSByZWdhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgdm9pY2UsIHdoaWNoIHRoZSBjcmllciByYWlzZXMgYXMgdGhlIGxhd3MgZGlyZWN0LCBhcyB0aGUgY2l2aWMgdm9pY2Ugb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgY291bnRyeS4gPC90cmFuc2xhdGlvbj4="
translation['18.171'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGhhZCBpdCBiZWVuIHRoZSBkdXR5IG9mIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyBkZXNpcmVkIHRoZSBzYWx2YXRpb24gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvIGNvbWUgZm9yd2FyZCwgYWxsIG9mIHlvdSwgYXllLCBldmVyeSBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIHdvdWxkIGhhdmUgcmlzZW4gaW4geW91ciBwbGFjZXMgYW5kIG1hZGUgeW91ciB3YXkgdG8gdGhlIHRyaWJ1bmUsIGZvcgogICAgICAgICAgICAgICAgICAgIHRoYXQgc2FsdmF0aW9uLCBJIGFtIHdlbGwgYXNzdXJlZCwgd2FzIHRoZSBkZXNpcmUgb2YgZXZlcnkgaGVhcnQuIElmIHRoYXQgZHV0eQogICAgICAgICAgICAgICAgICAgIGhhZCBmYWxsZW4gdXBvbiB0aGUgd2VhbHRoeSwgdGhlIFRocmVlIEh1bmRyZWQgd291bGQgaGF2ZSByaXNlbjsgaWYgdXBvbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyB3ZXJlIGFsaWtlIHdlYWx0aHkgYW5kIHBhdHJpb3RpYywgdGhlIG1lbiB3aG8gdGhlcmVhZnRlciBnYXZlIHRob3NlIGdlbmVyb3VzCiAgICAgICAgICAgICAgICAgICAgZG9uYXRpb25zIHdoaWNoIHNpZ25hbGl6ZWQgYXQgb25jZSB0aGVpciB3ZWFsdGggYW5kIHRoZWlyIHBhdHJpb3Rpc20uIDwvdHJhbnNsYXRpb24+"
translation['18.172'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0LCBpdCBzZWVtcywgdGhlIGNhbGwgb2YgdGhlIGNyaXNpcyBvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgbW9tZW50b3VzIGRheSB3YXMgbm90IG9ubHkgZm9yIHRoZSB3ZWFsdGh5IHBhdHJpb3QgYnV0IGZvciB0aGUgbWFuIHdobyBmcm9tCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgdG8gbGFzdCBoYWQgY2xvc2VseSB3YXRjaGVkIHRoZSBzZXF1ZW5jZSBvZiBldmVudHMsIGFuZCBoYWQgcmlnaHRseQogICAgICAgICAgICAgICAgICAgIGZhdGhvbWVkIHRoZSBwdXJwb3NlcyBhbmQgdGhlIGRlc2lyZXMgb2YgUGhpbGlwOyBmb3IgYW55b25lIHdobyBoYWQgbm90IGdyYXNwZWQKICAgICAgICAgICAgICAgICAgICB0aG9zZSBwdXJwb3Nlcywgb3IgaGFkIG5vdCBzdHVkaWVkIHRoZW0gbG9uZyBiZWZvcmVoYW5kLCBob3dldmVyIHBhdHJpb3RpYyBhbmQKICAgICAgICAgICAgICAgICAgICBob3dldmVyIHdlYWx0aHkgaGUgbWlnaHQgYmUsIHdhcyBub3QgdGhlIG1hbiB0byBhcHByZWNpYXRlIHRoZSBuZWVkcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBob3VyLCBvciB0byBmaW5kIGFueSBjb3Vuc2VsIHRvIG9mZmVyIHRvIHRoZSBwZW9wbGUuIDwvdHJhbnNsYXRpb24+"
translation['18.173'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzMiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhhdCBkYXksIHRoZW4sIHRoZSBjYWxsIHdhcyBtYW5pZmVzdGx5IGZvciBtZS4gSSBjYW1lIGZvcndhcmQKICAgICAgICAgICAgICAgICAgICBhbmQgYWRkcmVzc2VkIHlvdTsgYW5kIEkgd2lsbCBub3cgYXNrIHlvdXIgY2FyZWZ1bCBhdHRlbnRpb24gdG8gdGhlIHNwZWVjaCBJCiAgICAgICAgICAgICAgICAgICAgdGhlbiBtYWRlLCBmb3IgdHdvIHJlYXNvbnM6IGZpcnN0LCB0aGF0IHlvdSBtYXkgdW5kZXJzdGFuZCB0aGF0IEksIGFsb25lIGFtb25nCiAgICAgICAgICAgICAgICAgICAgeW91ciBvcmF0b3JzIGFuZCBwb2xpdGljaWFucywgZGlkIG5vdCBkZXNlcnQgdGhlIHBvc3Qgb2YgcGF0cmlvdGlzbSBpbiB0aGUgaG91cgogICAgICAgICAgICAgICAgICAgIG9mIHBlcmlsLCBidXQgYXBwcm92ZWQgbXlzZWxmIGFzIG9uZSB3aG8gaW4gdGhlIG1pZHN0IG9mIHBhbmljIGNvdWxkLCBib3RoIGluCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoIGFuZCBpbiBzdWdnZXN0aW9uLCBkbyB3aGF0IGR1dHkgYmFkZSBvbiB5b3VyIGJlaGFsZjsgYW5kIHNlY29uZGx5LAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgYXQgdGhlIGNvc3Qgb2YgYSBmZXcgbWludXRlcyBvZiBzdHVkeSB5b3UgbWF5IGdhaW4gZXhwZXJpZW5jZSB3aGljaCB3aWxsCiAgICAgICAgICAgICAgICAgICAgc3RhbmQgeW91IGluIGdvb2Qgc3RlYWQgZm9yIHlvdXIgcG9saWN5IGluIHRpbWVzIHRvIGNvbWUuIDwvdHJhbnNsYXRpb24+"
translation['18.174'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoYXQgSSBzYWlkIHdhcyB0aGlzLgogICAgICAgICAgICAgICAgICAgIOKAnEluIG15IGp1ZGdlbWVudCB0aGUgcHJlc2VudCBwb3NpdGlvbiBvZiBhZmZhaXJzIGlzIG1pc3VuZGVyc3Rvb2QgYnkKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gYXJlIHNvIG11Y2ggYWxhcm1lZCBieSB0aGUgYXBwcmVoZW5zaW9uIHRoYXQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBpcyBhdCB0aGUgZGlzcG9zYWwgb2YgUGhpbGlwLiBJZgogICAgICAgICAgICAgICAgICAgIHRoYXQgd2VyZSB0cnVlLCBJIGFtIHF1aXRlIGNlcnRhaW4gdGhhdCB3ZSBzaG91bGQgaGF2ZSBoZWFyZCBvZiBoaW0gbm90IGF0CiAgICAgICAgICAgICAgICAgICAgRWxhdGVhIGJ1dCBvbiBvdXIgb3duIGZyb250aWVycy4gQnV0IEkga25vdyB3aXRoIGNlcnRhaW50eSB0aGF0IGhlIGhhcyBjb21lIHRvCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgaGlzIHByZXBhcmF0aW9ucyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgTGV0IG1lIHRlbGwgeW91IGhvdyBoZSBpcyBzaXR1YXRlZC4gPC90cmFuc2xhdGlvbj4="
translation['18.175'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGFzIGF0CiAgICAgICAgICAgICAgICAgICAgaGlzIGNvbW1hbmQgYWxsIHRob3NlIFRoZWJhbnMgd2hvbSBoZSB3YXMgYWJsZSB0byB3aW4gYnkgZnJhdWQgb3IgY29ycnVwdGlvbjsKICAgICAgICAgICAgICAgICAgICBidXQgaGUgY2Fubm90IGJ5IGFueSBtZWFucyBwcmV2YWlsIHVwb24gdGhvc2Ugd2hvIGhhdmUgcmVzaXN0ZWQgaGltIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgYW5kIHdobyBhcmUgc3RpbGwgaGlzIG9wcG9uZW50cy4gSGlzIHByZXNlbnQgb2JqZWN0LCBhbmQgdGhlIHB1cnBvc2UgZm9yCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgaGFzIG9jY3VwaWVkIEVsYXRlYSwgaXMgdGhhdCwgYnkgYW4gZXhoaWJpdCBpb24gb2YgaGlzIHBvd2VyIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG5laWdoYm9yaG9vZCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGFuZCBieQogICAgICAgICAgICAgICAgICAgIGJyaW5naW5nIHVwIGFybWVkIGZvcmNlcywgaGUgbWF5IGVuY291cmFnZSBhbmQgZW1ib2xkZW4gaGlzIGZyaWVuZHMsIGFuZCBvdmVyYXdlCiAgICAgICAgICAgICAgICAgICAgaGlzIGFkdmVyc2FyaWVzLCBob3BpbmcgdGhhdCB0aGUgbGF0dGVyIHdpbGwgeWllbGQgdG8gaW50aW1pZGF0aW9uIG9yIHRvCiAgICAgICAgICAgICAgICAgICAgY29tcHVsc2lvbiBhbmQgd2lsbCBzbyBjb25jZWRlIHdoYXQgYXQgcHJlc2VudCB0aGV5IHJlZnVzZS4gPC90cmFuc2xhdGlvbj4="
translation['18.176'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzYiIHVuaXQ9InNlY3Rpb24iIC8+SWYs4oCdIEkgYWRkZWQsIOKAnGF0IHRoaXMgY3Jpc2lzIHdlCiAgICAgICAgICAgICAgICAgICAgYXJlIGRldGVybWluZWQgdG8gcmVtZW1iZXIgYWxsIHRoZSBwcm92b2NhdGl2ZSBkZWFsaW5ncyBvZiB0aGUgVGhlYmFucyB3aXRoIHVzCiAgICAgICAgICAgICAgICAgICAgaW4gcGFzdCB0aW1lLCBhbmQgdG8gZGlzdHJ1c3QgdGhlbSBzdGlsbCBvbiB0aGUgc2NvcmUgb2YgZW5taXR5LCBpbiB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgd2Ugc2hhbGwgYmUgYWN0aW5nIGV4YWN0bHkgYXMgUGhpbGlwIHdvdWxkIGJlZyB1cyB0byBhY3Q7IGFuZCBzZWNvbmRseSwgSQogICAgICAgICAgICAgICAgICAgIGFtIGFmcmFpZCB0aGF0LCBpZiBoaXMgcHJlc2VudCBvcHBvbmVudHMgZ2l2ZSBoaW0gYSBmYXZvcmFibGUgcmVjZXB0aW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICB1bmFuaW1vdXNseSBiZWNvbWUgUGhpbGlwJ3MgbWVuLCBib3RoIHBhcnRpZXMgd2lsbCBqb2luIGluIGFuIGludmFzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPi4gSWYsIGhvd2V2ZXIsIHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbGlzdGVuIHRvIG15IGFkdmljZSwgYW5kIGFwcGx5IHlvdXIgbWluZHMgdG8gY29uc2lkZXJhdGlvbiwgYnV0IG5vdCB0byBjYXB0aW91cwogICAgICAgICAgICAgICAgICAgIGNyaXRpY2lzbSwgb2Ygd2hhdCBJIGxheSBiZWZvcmUgeW91LCBJIGJlbGlldmUgdGhhdCB5b3Ugd2lsbCBmaW5kIG15IHByb3Bvc2FscwogICAgICAgICAgICAgICAgICAgIGFjY2VwdGFibGUsIGFuZCB0aGF0IEkgc2hhbGwgZGlzcGVyc2UgdGhlIHBlcmlscyB0aGF0IG92ZXJoYW5nIG91ciBjaXR5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.177'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzciIHVuaXQ9InNlY3Rpb24iIC8+TGV0IG1lIHRoZW4gdGVsbCB5b3Ugd2hhdCB0byBkby4gSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgcGxhY2UsIGdldCByaWQgb2YgeW91ciBwcmVzZW50IHRlcnJvcjsgb3IgcmF0aGVyIGRpcmVjdCBpdCBlbHNld2hlcmUsIGFuZAogICAgICAgICAgICAgICAgICAgIGJlIGFzIGZyaWdodGVuZWQgYXMgeW91IHdpbGwgZm9yIHRoZSBUaGViYW5zLiBUaGV5IGxpZSBuZWFyZXIgdG8gcGVyaWw7IHRoZQogICAgICAgICAgICAgICAgICAgIGRhbmdlciB0aHJlYXRlbnMgdGhlbSBmaXJzdC4gTmV4dCwgbGV0IGFsbCBtZW4gb2YgbWlsaXRhcnkgYWdlLCBhbmQgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGNhdmFscnksIG1hcmNoIG91dCB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVsZXVzaXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVsZXVzaXMiPkVsZXVzaXM8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIHNob3cgdGhlIHdvcmxkIHRoYXQgeW91IGFyZSB1bmRlciBhcm1zLiBUaGVuIHlvdXIgcGFydGlzYW5zIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiB3aWxsIGhhdmUgZXF1YWwgZnJlZWRvbSB0byBzcGVhawogICAgICAgICAgICAgICAgICAgIHRoZWlyIG1pbmRzIGZvciByaWdodGVvdXNuZXNzJyBzYWtlLCBrbm93aW5nIHRoYXQsIGp1c3QgYXMgdGhlIG1lbiB3aG8gaGF2ZSBzb2xkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY291bnRyeSB0byBQaGlsaXAgYXJlIHN1cHBvcnRlZCBieSBhIGZvcmNlIGF0IEVsYXRlYSByZWFkeSB0byBjb21lIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgYWlkLCBzbyBhbHNvIHlvdSBhcmUgaW4gcmVhZGluZXNzIHRvIGhlbHAgbWVuIHdobyBhcmUgd2lsbGluZyB0byBmaWdodCBmb3IKICAgICAgICAgICAgICAgICAgICBpbmRlcGVuZGVuY2UsIGFuZCB3aWxsIGNvbWUgdG8gdGhlaXIgYWlkLCBpZiB0aGV5IGFyZSBhdHRhY2tlZC4gPC90cmFuc2xhdGlvbj4="
translation['18.178'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzgiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIG5leHQgcGxhY2UsIEkgd291bGQgaGF2ZSB5b3UgYXBwb2ludCB0ZW4KICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycywgYW5kIGdpdmUgdGhlbSBhdXRob3JpdHksIGluIGNvbnN1bHRhdGlvbiB3aXRoIHRoZSBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlcnMsIHRvIGRldGVybWluZSB0aGUgdGltZSBvZiB0aGUgbWFyY2ggdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IGFuZCB0aGUgY29uZHVjdCBvZiB0aGUgY2FtcGFpZ24uIE5vdwogICAgICAgICAgICAgICAgICAgIGZvciBteSBhZHZpY2Ugb24gdGhlIHRyZWF0bWVudCBvZiB0aGUgZGlmZmljdWx0eSBhZnRlciB0aGUgYXJyaXZhbCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4uIEkgYmVnIHlvdXIKICAgICAgICAgICAgICAgICAgICBjYXJlZnVsIGF0dGVudGlvbiB0byB0aGlzLiBEbyBub3QgYXNrIGFueSBmYXZvciBvZiB0aGUgVGhlYmFuczogZm9yIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb24gaXMgbm90IGNyZWRpdGFibGUuIFBsZWRnZSB5b3Vyc2VsdmVzIHRvIGNvbWUgdG8gdGhlaXIgYWlkIGF0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2FsbCwgb24gdGhlIGdyb3VuZCB0aGF0IHRoZXkgYXJlIGluIGV4dHJlbWl0aWVzLCBhbmQgdGhhdCB3ZSBoYXZlIGEgY2xlYXJlcgogICAgICAgICAgICAgICAgICAgIGZvcmVzaWdodCBvZiB0aGUgZnV0dXJlIHRoYW4gdGhleS4gQW5kIHNvLCBpZiB0aGV5IGFjY2VwdCBvdXIgb3ZlcnR1cmVzIGFuZCB0YWtlCiAgICAgICAgICAgICAgICAgICAgb3VyIGFkdmljZSwgd2Ugc2hhbGwgaGF2ZSBhY2NvbXBsaXNoZWQgb3VyIGRlc2lyZXMgYW5kIGhhdmUgYWN0ZWQgb24gYSBwcmluY2lwbGUKICAgICAgICAgICAgICAgICAgICB3b3J0aHkgb2Ygb3VyIHRyYWRpdGlvbnM7IHdoaWxlLCBpZiBzdWNjZXNzIGRvZXMgbm90IGZhbGwgdG8gb3VyIGxvdCwgdGhleSB3aWxsCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0aGVtc2VsdmVzIHRvIGJsYW1lIGZvciB0aGVpciBpbW1lZGlhdGUgYmx1bmRlciwgYW5kIHdlIHNoYWxsIGhhdmUgZG9uZQogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgbWVhbiBvciBkaXNjcmVkaXRhYmxlLuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['18.179'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHRob3NlIHdvcmRzLCBvciB0byB0aGF0IGVmZmVjdCwgSSBzcG9rZSwKICAgICAgICAgICAgICAgICAgICBhbmQgbGVmdCB0aGUgdHJpYnVuZS4gTXkgc3BlZWNoIHdhcyB1bml2ZXJzYWxseSBhcHBsYXVkZWQsIGFuZCB0aGVyZSB3YXMgbm8KICAgICAgICAgICAgICAgICAgICBvcHBvc2l0aW9uLiBJIGRpZCBub3Qgc3BlYWsgd2l0aG91dCBtb3ZpbmcsIG5vciBtb3ZlIHdpdGhvdXQgc2VydmluZyBhcwogICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3IsIG5vciBzZXJ2ZSB3aXRob3V0IGNvbnZpbmNpbmcgdGhlIFRoZWJhbnMuIEkgd2VudCB0aHJvdWdoIHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzIGZyb20gYmVnaW5uaW5nIHRvIGVuZCwgZGV2b3RpbmcgbXlzZWxmIHVuZ3J1ZGdpbmdseSB0byB5b3VyIHNlcnZpY2UgaW4KICAgICAgICAgICAgICAgICAgICBmYWNlIG9mIHRoZSBwZXJpbHMgdGhhdCBlbmNvbXBhc3NlZCBvdXIgY2l0eS4gUGxlYXNlIHByb2R1Y2UgdGhlIGRlY3JlZSBtYWRlIGF0CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aW1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.180'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoYXQgcGFydCBkbyB5b3Ugd2lzaCBtZSB0byBhc3NpZ24gdG8geW91LCBBZXNjaGluZXMsIGFuZCB3aGF0IHRvIG15c2VsZiwgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgZHJhbWEgb2YgdGhhdCBncmVhdCBkYXk/IEFtIEkgdG8gYmUgY2FzdCBmb3IgdGhlIHBhcnQgb2YgQmF0dGFsdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJhdHRhbHVzLCBwZXJoYXBzIHN0YW1tZXJlciwgYSBuaWNrbmFtZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbnVyc2VyeTsgY2FwYWJsZSBhbHNvIG9mIGFuIGluZGVjZW50IGludGVycHJldGF0aW9uLCBhbmQgdGhlcmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIG1hbGljaW91c2x5IHJldml2ZWQgYnkgQWVzY2hpbmVzLjwvbm90ZT4gYXMgeW91IGR1YiBtZSB3aGVuIHlvdSBzY29sZCBtZSBzbwogICAgICAgICAgICAgICAgICAgIHNjb3JuZnVsbHksIGFuZCB5b3UgZm9yIG5vIHZ1bGdhciByb2xlIGJ1dCB0byBwbGF5IHNvbWUgaGVybyBvZiBsZWdlbmRhcnkKICAgICAgICAgICAgICAgICAgICB0cmFnZWR5LCBDcmVzcGhvbnRlcywgb3IgQ3Jlb24sIG9yLCBzaGFsbCB3ZSBzYXksIE9lbm9tYXVzLCB3aG9tIHlvdSBvbmNlCiAgICAgICAgICAgICAgICAgICAgbXVyZGVyZWQgYnkgeW91ciBiYWQgYWN0aW5nIGF0IENvbGx5dHVzPyBBbnlob3csIG9uIHRoYXQgb2NjYXNpb24gQmF0dGFsdXMgb2YKICAgICAgICAgICAgICAgICAgICBQYWVhbmlhIGRlc2VydmVkIGJldHRlciBvZiBoaXMgY291bnRyeSB0aGFuIE9lbm9tYXVzIG9mIENvdGhvY2lkYWUuIFlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgdXR0ZXJseSB1c2VsZXNzOyBJIGRpZCBldmVyeXRoaW5nIHRoYXQgYmVjYW1lIGEgZ29vZCBjaXRpemVuLiBQbGVhc2UgcmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWUuIDwvdHJhbnNsYXRpb24+"
translation['18.181'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODEiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIG9mIERlbW9zdGhlbmVzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWUgb2YgRGVtb3N0aGVuZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSW4gdGhlIGFyY2hvbnNoaXAgb2YgTmF1c2ljbGVzLCB0aGUgdHJpYmUgQWVhbnRpcyB0aGVuIGhvbGRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHByZXNpZGVuY3ksIG9uIHRoZSBzaXh0ZWVudGggZGF5IG9mIFNjaXJvcGhvcmlvbiwgRGVtb3N0aGVuZXMsIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcywgb2YgUGFlYW5pYSwgcHJvcG9zZWQgdGhhdCwgd2hlcmVhcyBQaGlsaXAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3MTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjcxNSI+TWFjZWRvbjwvcGxhY2VOYW1lPiBpcyBwcm92ZWQgaW4gdGhlIHBhc3QgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICB2aW9sYXRlZCB0aGUgdGVybXMgb2YgcGVhY2UgYWdyZWVkIHRvIGJldHdlZW4gaGltIGFuZCB0aGUgUGVvcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGRpc3JlZ2FyZGluZyBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgb2F0aHMgYW5kIHRoZSBwcmluY2lwbGVzIG9mIGVxdWl0eSBhcyByZWNvZ25pemVkIGFtb25nIGFsbCB0aGUgR3JlZWtzOiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgd2hlcmVhcyBoZSBhcHByb3ByaWF0ZXMgY2l0aWVzIG5vdCBiZWxvbmdpbmcgdG8gaGltLCBhbmQgaGFzIGNhcHR1cmVkIGluIHdhcgogICAgICAgICAgICAgICAgICAgICAgICBzb21lIHRoYXQgYWN0dWFsbHkgYmVsb25nZWQgdG8gdGhlIEF0aGVuaWFucyB3aXRob3V0IHByb3ZvY2F0aW9uIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIHBlb3BsZSwgYW5kIGlzIHRvZGF5IG1ha2luZyBncmVhdCBhZHZhbmNlcyBpbiB2aW9sZW5jZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgY3J1ZWx0eSw8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZSBvZiBEZW1vc3RoZW5lczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJbiB0aGUgYXJjaG9uc2hpcCBvZiBOYXVzaWNsZXMsIHRoZSB0cmliZSBBZWFudGlzIHRoZW4gaG9sZGluZwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgcHJlc2lkZW5jeSwgb24gdGhlIHNpeHRlZW50aCBkYXkgb2YgU2Npcm9waG9yaW9uLCBEZW1vc3RoZW5lcywgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLCBvZiBQYWVhbmlhLCBwcm9wb3NlZCB0aGF0LCB3aGVyZWFzIFBoaWxpcCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjcxNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzE1Ij5NYWNlZG9uPC9wbGFjZU5hbWU+IGlzIHByb3ZlZCBpbiB0aGUgcGFzdCB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHZpb2xhdGVkIHRoZSB0ZXJtcyBvZiBwZWFjZSBhZ3JlZWQgdG8gYmV0d2VlbiBoaW0gYW5kIHRoZSBQZW9wbGUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZGlzcmVnYXJkaW5nIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBvYXRocyBhbmQgdGhlIHByaW5jaXBsZXMgb2YgZXF1aXR5IGFzIHJlY29nbml6ZWQgYW1vbmcgYWxsIHRoZSBHcmVla3M6IGFuZAogICAgICAgICAgICAgICAgICAgICAgICB3aGVyZWFzIGhlIGFwcHJvcHJpYXRlcyBjaXRpZXMgbm90IGJlbG9uZ2luZyB0byBoaW0sIGFuZCBoYXMgY2FwdHVyZWQgaW4gd2FyCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbWUgdGhhdCBhY3R1YWxseSBiZWxvbmdlZCB0byB0aGUgQXRoZW5pYW5zIHdpdGhvdXQgcHJvdm9jYXRpb24gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gcGVvcGxlLCBhbmQgaXMgdG9kYXkgbWFraW5nIGdyZWF0IGFkdmFuY2VzIGluIHZpb2xlbmNlIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBjcnVlbHR5LDwvdHJhbnNsYXRpb24+"
translation['18.182'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODIiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj5mb3Igb2Ygc29tZSBHcmVlawogICAgICAgICAgICAgICAgICAgICAgICBjaXRpZXMgaGUgb3ZlcnRocm93cyB0aGUgY29uc3RpdHV0aW9uLCBwdXR0aW5nIGEgZ2Fycmlzb24gaW4gdGhlbSwgb3RoZXJzIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJhemVzIHRvIHRoZSBncm91bmQsIHNlbGxpbmcgdGhlIGluaGFiaXRhbnRzIGludG8gc2xhdmVyeSwgb3RoZXJzIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9uaXplcyB3aXRoIGJhcmJhcmlhbnMgaW5zdGVhZCBvZiBHcmVla3MsIGhhbmRpbmcgb3ZlciB0byB0aGVtIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGVzIGFuZCB0aGUgc2VwdWxjaHJlcywgYWN0aW5nIGFzIG1pZ2h0IGJlIGV4cGVjdGVkIGZyb20gaGlzIG5hdGlvbmFsaXR5CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgY2hhcmFjdGVyIGFuZCBtYWtpbmcgaW5zb2xlbnQgdXNlIG9mIGhpcyBwcmVzZW50IGZvcnR1bmUsIGZvcmdldGZ1bAogICAgICAgICAgICAgICAgICAgICAgICBvZiBob3cgaGUgcm9zZSB0byBncmVhdG5lc3MgdW5leHBlY3RlZGx5IGZyb20gYSBzbWFsbCBhbmQgb3JkaW5hcnkKICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5uaW5nOzwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.183'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODMiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj5hbmQgd2hlcmVhcywgc28gbG9uZwogICAgICAgICAgICAgICAgICAgICAgICBhcyB0aGUgUGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBzYXcgaGltCiAgICAgICAgICAgICAgICAgICAgICAgIHNlaXppbmcgYmFyYmFyaWFuIHN0YXRlcywgYmVsb25naW5nIHRvIHRoZW1zZWx2ZXMgYWxvbmUsIHRoZXkgY29uY2VpdmVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3duIHdyb25ncyB3ZXJlIG9mIGxlc3MgYWNjb3VudCwgYnV0IG5vdywgc2VlaW5nIEdyZWVrIHN0YXRlcyBvdXRyYWdlZAogICAgICAgICAgICAgICAgICAgICAgICBvciB3aXBlZCBvdXQsIHRoZXkgY29uc2lkZXIgaXQgYSBzY2FuZGFsIGFuZCB1bndvcnRoeSBvZiB0aGUgcmVwdXRhdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBhbmNlc3RvcnMgdG8gc3VmZmVyIHRoZSBHcmVla3MgdG8gaGUgZW5zbGF2ZWQ7PC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gc2F3IGhpbQogICAgICAgICAgICAgICAgICAgICAgICBzZWl6aW5nIGJhcmJhcmlhbiBzdGF0ZXMsIGJlbG9uZ2luZyB0byB0aGVtc2VsdmVzIGFsb25lLCB0aGV5IGNvbmNlaXZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biB3cm9uZ3Mgd2VyZSBvZiBsZXNzIGFjY291bnQsIGJ1dCBub3csIHNlZWluZyBHcmVlayBzdGF0ZXMgb3V0cmFnZWQKICAgICAgICAgICAgICAgICAgICAgICAgb3Igd2lwZWQgb3V0LCB0aGV5IGNvbnNpZGVyIGl0IGEgc2NhbmRhbCBhbmQgdW53b3J0aHkgb2YgdGhlIHJlcHV0YXRpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgYW5jZXN0b3JzIHRvIHN1ZmZlciB0aGUgR3JlZWtzIHRvIGhlIGVuc2xhdmVkOzwvdHJhbnNsYXRpb24+"
translation['18.184'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODQiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj50aGVyZWZvcmUgYmUgaXQKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZWQgYnkgdGhlIENvdW5jaWwgYW5kIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFmdGVyIG9mZmVyaW5nIHByYXllcnMgYW5kIHNhY3JpZmljZXMgdG8gdGhlIGdvZHMKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGhlcm9lcyB3aG8gZ3VhcmQgdGhlIGNpdHkgYW5kIGNvdW50cnkgb2YgdGhlIEF0aGVuaWFucywgYW5kIGFmdGVyIHRha2luZwogICAgICAgICAgICAgICAgICAgICAgICBpbnRvIGNvbnNpZGVyYXRpb24gdGhlaXIgYW5jZXN0b3JzJyBtZXJpdHMsIGluIHRoYXQgdGhleSByYW5rZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlcnZhdGlvbiBvZiB0aGUgbGliZXJ0aWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiBhYm92ZSB0aGUgY2xhaW1zIG9mIHRoZWlyIG93biBzdGF0ZSwgdGhhdCB0d28KICAgICAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCBzaGlwcyBiZSBsYXVuY2hlZCwgYW5kIHRoYXQgdGhlIEFkbWlyYWwgc2FpbCBpbnRvIHRoZSBTdHJhaXRzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBHZW5lcmFsIGFuZCBjb21tYW5kZXIgb2YgdGhlIGNhdmFscnkgbWFyY2ggb3V0IHdpdGggdGhlIGluZmFudHJ5IGFuZAogICAgICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxldXNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWxldXNpcyI+RWxldXNpczwvcGxhY2VOYW1lPjsgYWxzbyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzIGJlIHNlbnQgdG8gdGhlIG90aGVyIEdyZWVrcywgYnV0IGZpcnN0IG9mIGFsbCB0byB0aGUgVGhlYmFucywKICAgICAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBQaGlsaXAgaXMgbmVhcmVzdCB0byB0aGVpciB0ZXJyaXRvcnksPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFmdGVyIG9mZmVyaW5nIHByYXllcnMgYW5kIHNhY3JpZmljZXMgdG8gdGhlIGdvZHMKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGhlcm9lcyB3aG8gZ3VhcmQgdGhlIGNpdHkgYW5kIGNvdW50cnkgb2YgdGhlIEF0aGVuaWFucywgYW5kIGFmdGVyIHRha2luZwogICAgICAgICAgICAgICAgICAgICAgICBpbnRvIGNvbnNpZGVyYXRpb24gdGhlaXIgYW5jZXN0b3JzJyBtZXJpdHMsIGluIHRoYXQgdGhleSByYW5rZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlcnZhdGlvbiBvZiB0aGUgbGliZXJ0aWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiBhYm92ZSB0aGUgY2xhaW1zIG9mIHRoZWlyIG93biBzdGF0ZSwgdGhhdCB0d28KICAgICAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCBzaGlwcyBiZSBsYXVuY2hlZCwgYW5kIHRoYXQgdGhlIEFkbWlyYWwgc2FpbCBpbnRvIHRoZSBTdHJhaXRzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBHZW5lcmFsIGFuZCBjb21tYW5kZXIgb2YgdGhlIGNhdmFscnkgbWFyY2ggb3V0IHdpdGggdGhlIGluZmFudHJ5IGFuZAogICAgICAgICAgICAgICAgICAgICAgICBjYXZhbHJ5IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxldXNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWxldXNpcyI+RWxldXNpczwvcGxhY2VOYW1lPjsgYWxzbyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGFtYmFzc2Fkb3JzIGJlIHNlbnQgdG8gdGhlIG90aGVyIEdyZWVrcywgYnV0IGZpcnN0IG9mIGFsbCB0byB0aGUgVGhlYmFucywKICAgICAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBQaGlsaXAgaXMgbmVhcmVzdCB0byB0aGVpciB0ZXJyaXRvcnksPC90cmFuc2xhdGlvbj4="
translation['18.185'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODUiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj5hbmQgZXhob3J0IHRoZW0gbm90CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIGRpc21heWVkIGF0IFBoaWxpcCwgYnV0IHRvIGhvbGQgZmFzdCB0byB0aGVpciBvd24gbGliZXJ0eSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxpYmVydHkgb2YgdGhlIG90aGVyIEdyZWVrcywgYXNzdXJpbmcgdGhlbSB0IGhhdCB0aGUgcGVvcGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGFyYm9yaW5nIG5vIGlsbCB3aWxsIGZvcgogICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyBtdXR1YWwgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGUgc3RhdGVzLCB3aWxsIGhlbHAgdGhlbSB3aXRoIHRyb29wcywKICAgICAgICAgICAgICAgICAgICAgICAgbW9uZXksIGFtbXVuaXRpb24sIGFuZCBhcm1zLCBrbm93aW5nIHRoYXQsIHdoaWxlIGl0IGlzIGFuIGhvbm9yIGFibGUKICAgICAgICAgICAgICAgICAgICAgICAgYW1iaXRpb24gZm9yIEdyZWVrcyB0byBkaXNwdXRlIHdpdGggZWFjaCBvdGhlciBmb3IgdGhlIGhlZ2Vtb255LCB5ZXQgdG8gYmUKICAgICAgICAgICAgICAgICAgICAgICAgcnVsZWQgYnkgYSBtYW4gb2YgYWxpZW4gcmFjZSBhbmQgdG8gYmUgcm9iYmVkIGJ5IGhpbSBvZiB0aGF0IGhlZ2Vtb255IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHVud29ydGh5IGJvdGggb2YgdGhlIHJlcHV0YXRpb24gb2YgdGhlIEdyZWVrcyBhbmQgb2YgdGhlIG1lcml0cyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGhhcmJvcmluZyBubyBpbGwgd2lsbCBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgbXV0dWFsIGRpZmZlcmVuY2VzIGJldHdlZW4gdGhlIHN0YXRlcywgd2lsbCBoZWxwIHRoZW0gd2l0aCB0cm9vcHMsCiAgICAgICAgICAgICAgICAgICAgICAgIG1vbmV5LCBhbW11bml0aW9uLCBhbmQgYXJtcywga25vd2luZyB0aGF0LCB3aGlsZSBpdCBpcyBhbiBob25vciBhYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIGFtYml0aW9uIGZvciBHcmVla3MgdG8gZGlzcHV0ZSB3aXRoIGVhY2ggb3RoZXIgZm9yIHRoZSBoZWdlbW9ueSwgeWV0IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVkIGJ5IGEgbWFuIG9mIGFsaWVuIHJhY2UgYW5kIHRvIGJlIHJvYmJlZCBieSBoaW0gb2YgdGhhdCBoZWdlbW9ueSBpcwogICAgICAgICAgICAgICAgICAgICAgICB1bndvcnRoeSBib3RoIG9mIHRoZSByZXB1dGF0aW9uIG9mIHRoZSBHcmVla3MgYW5kIG9mIHRoZSBtZXJpdHMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzLjwvdHJhbnNsYXRpb24+"
translation['18.186'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODYiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj5GdXJ0aGVybW9yZSwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gcmVnYXJkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IGFzIGluIG5vIHdheQogICAgICAgICAgICAgICAgICAgICAgICBhbGllbiBlaXRoZXIgaW4gcmFjZSBvciBpbiBuYXRpb25hbGl0eS4gVGhleSByZW1lbWJlciB0aGUgc2VydmljZXMgcmVuZGVyZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgdGhlaXIgb3duIGFuY2VzdG9ycyB0byB0aGUgYW5jZXN0b3JzIG9mIHRoZSBUaGViYW5zLCBmb3IsIHdoZW4gdGhlIHNvbnMKICAgICAgICAgICAgICAgICAgICAgICAgb2YgSGVyYWNsZXMgd2VyZSBkaXNwb3NzZXNzZWQgYnkgdGhlIFBlbG9wb25uZXNpYW5zIG9mIHRoZWlyIHBhdGVybmFsCiAgICAgICAgICAgICAgICAgICAgICAgIGRvbWluaW9uLCB0aGV5IHJlc3RvcmVkIHRoZW0sIG92ZXJjb21pbmcgaW4gYmF0dGxlIHRob3NlIHdobyB3ZXJlIHRyeWluZyB0bwogICAgICAgICAgICAgICAgICAgICAgICBvcHBvc2UgdGhlIGRlc2NlbmRhbnRzIG9mIEhlcmFjbGVzOyBhbmQgd2UgaGFyYm9yZWQgT2VkaXB1cyBhbmQgaGlzIGZhbWlseQogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgd2VyZSBiYW5pc2hlZDsgYW5kIG1hbnkgb3RoZXIgbm90YWJsZSBhY3RzIG9mIGtpbmRuZXNzIGhhdmUgd2UKICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSB0byB0aGUgVGhlYmFucy48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiByZWdhcmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYXMgaW4gbm8gd2F5CiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWVuIGVpdGhlciBpbiByYWNlIG9yIGluIG5hdGlvbmFsaXR5LiBUaGV5IHJlbWVtYmVyIHRoZSBzZXJ2aWNlcyByZW5kZXJlZAogICAgICAgICAgICAgICAgICAgICAgICBieSB0aGVpciBvd24gYW5jZXN0b3JzIHRvIHRoZSBhbmNlc3RvcnMgb2YgdGhlIFRoZWJhbnMsIGZvciwgd2hlbiB0aGUgc29ucwogICAgICAgICAgICAgICAgICAgICAgICBvZiBIZXJhY2xlcyB3ZXJlIGRpc3Bvc3Nlc3NlZCBieSB0aGUgUGVsb3Bvbm5lc2lhbnMgb2YgdGhlaXIgcGF0ZXJuYWwKICAgICAgICAgICAgICAgICAgICAgICAgZG9taW5pb24sIHRoZXkgcmVzdG9yZWQgdGhlbSwgb3ZlcmNvbWluZyBpbiBiYXR0bGUgdGhvc2Ugd2hvIHdlcmUgdHJ5aW5nIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIG9wcG9zZSB0aGUgZGVzY2VuZGFudHMgb2YgSGVyYWNsZXM7IGFuZCB3ZSBoYXJib3JlZCBPZWRpcHVzIGFuZCBoaXMgZmFtaWx5CiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhleSB3ZXJlIGJhbmlzaGVkOyBhbmQgbWFueSBvdGhlciBub3RhYmxlIGFjdHMgb2Yga2luZG5lc3MgaGF2ZSB3ZQogICAgICAgICAgICAgICAgICAgICAgICBkb25lIHRvIHRoZSBUaGViYW5zLjwvdHJhbnNsYXRpb24+"
translation['18.187'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODciIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj5UaGVyZWZvcmUgbm93IGFsc28KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2lsbCBub3QKICAgICAgICAgICAgICAgICAgICAgICAgZGVzZXJ0IHRoZSBjYXVzZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBHcmVla3MuIEFuIGFsbGlhbmNlIHNoYWxsIGJlIGFycmFuZ2VkIHdpdGggdGhlbSwgYW5kIHJpZ2h0cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBpbnRlcm1hcnJpYWdlIGVzdGFibGlzaGVkLCBhbmQgb2F0aHMgZXhjaGFuZ2VkLiDigJRBbWJhc3NhZG9ycwogICAgICAgICAgICAgICAgICAgICAgICBhcHBvaW50ZWQ6IERlbW9zdGhlbmVzLCBzb24gb2YgRGVtb3N0aGVuZXMsIG9mIFBhZWFuaWEsIEh5cGVyZWlkZXMsIHNvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBDbGVhbmRlciwgb2YgU3BoZXR0dXMsIE1uZXNpdGhlaWRlcywgc29uIG9mIEFudGlwaGFuZXMsIG9mIFBocmVhcnJpaSwKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb2NyYXRlcywgc29uIG9mIFNvcGhpbHVzLCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU1Ij5QaGx5YTwvcGxhY2VOYW1lPiwgQ2FsbGFlc2NocnVzLCBzb24gb2YgRGlvdGltdXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIENvdGhvY2lkYWUuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdpbGwgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2VydCB0aGUgY2F1c2Ugb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgR3JlZWtzLiBBbiBhbGxpYW5jZSBzaGFsbCBiZSBhcnJhbmdlZCB3aXRoIHRoZW0sIGFuZCByaWdodHMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJtYXJyaWFnZSBlc3RhYmxpc2hlZCwgYW5kIG9hdGhzIGV4Y2hhbmdlZC4g4oCUQW1iYXNzYWRvcnMKICAgICAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkOiBEZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLCBvZiBQYWVhbmlhLCBIeXBlcmVpZGVzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgQ2xlYW5kZXIsIG9mIFNwaGV0dHVzLCBNbmVzaXRoZWlkZXMsIHNvbiBvZiBBbnRpcGhhbmVzLCBvZiBQaHJlYXJyaWksCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9jcmF0ZXMsIHNvbiBvZiBTb3BoaWx1cywgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NSI+UGhseWE8L3BsYWNlTmFtZT4sIENhbGxhZXNjaHJ1cywgc29uIG9mIERpb3RpbXVzLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBDb3Rob2NpZGFlLl08L3RyYW5zbGF0aW9uPg=="
translation['18.188'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN1Y2ggd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IGJlZ2lubmluZyBhbmQgc3VjaCB0aGUgYmFzaXMgb2Ygb3VyIG5lZ290aWF0aW9ucyB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPjsgdGhlIGZpcnN0LCBJIHNheSwgZm9yIGhpdGhlcnRvIHRoZQogICAgICAgICAgICAgICAgICAgIHR3byBjaXRpZXMgaGFkIGJlZW4gZHJhZ2dlZCBieSB0aGVzZSBtZW4gaW50byBtdXR1YWwgZW5taXR5LCBoYXRyZWQsIGFuZAogICAgICAgICAgICAgICAgICAgIGRpc3RydXN0LiBUaGUgZGVjcmVlIHdhcyBtYWRlLCBhbmQgdGhlIGRhbmdlciB0aGF0IGVudmlyb25lZCB0aGUgY2l0eSBwYXNzZWQKICAgICAgICAgICAgICAgICAgICBhd2F5IGxpa2UgYSBzdW1tZXIgY2xvdWQuIFRoZW4gd2FzIHRoZSB0aW1lIHRoZXJlZm9yZSBmb3IgYW4gaG9uZXN0IG1hbiB0bwogICAgICAgICAgICAgICAgICAgIHBvaW50LCBpZiBoZSBjb3VsZCwgdG8gYSBiZXR0ZXIgd2F5OyBub3cgY2F2aWxsaW5nIGNvbWVzIHRvbyBsYXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.189'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODkiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBpcyB0aGUgc2FsaWVudCBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHN0YXRlc21hbgogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgY2hhcmxhdGFuLCB3aG8gYXJlIGluZGVlZCBpbiBhbGwgcmVzcGVjdHMgdW5saWtlIG9uZSBhbm90aGVyLiBUaGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZXNtYW4gZGVjbGFyZXMgaGlzIGp1ZGdlbWVudCBiZWZvcmUgdGhlIGV2ZW50LCBhbmQgYWNjZXB0cyByZXNwb25zaWJpbGl0eSB0bwogICAgICAgICAgICAgICAgICAgIGhpcyBmb2xsb3dlcnMsIHRvIGZvcnR1bmUsIHRvIHRoZSBjaGFuY2VzIG9mIHRoZSBob3VyLCB0byBldmVyeSBjcml0aWMgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgcG9saWN5LiBUaGUgY2hhcmxhdGFuIGhvbGRzIGhpcyBwZWFjZSB3aGVuIGhlIG91Z2h0IHRvIHNwZWFrLCBhbmQgdGhlbiBjcm9ha3MKICAgICAgICAgICAgICAgICAgICBvdmVyIGFueSB1bnRvd2FyZCByZXN1bHQuIDwvdHJhbnNsYXRpb24+"
translation['18.190'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTAiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCB0aGVuLCBhcyBJCiAgICAgICAgICAgICAgICAgICAgc2FpZCwgd2FzIHRoZSBvcHBvcnR1bml0eSBmb3IgYW55IG1hbiB3aG8gY2FyZWQgZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBvciBmb3IgaG9uZXN0IGRpc2N1c3Npb24uIEJ1dCBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBtYWtlIGEgbGFyZ2UgY29uY2Vzc2lvbi4gSWYgZXZlbiBub3cgYW55IG1hbiBjYW4gcG9pbnQgdG8gYSBiZXR0ZXIgd2F5LCBuYXksIGlmCiAgICAgICAgICAgICAgICAgICAgYW55IHBvbGljeSB3aGF0ZXZlciwgc2F2ZSBtaW5lLCB3YXMgZXZlbiBwcmF0aWNhYmxlLCBJIHBsZWFkIGd1aWx0eS4gSWYgYW55b25lCiAgICAgICAgICAgICAgICAgICAgaGFzIG5vdyBkaXNjZXJuZWQgYW55IGNvdXJzZSB3aGljaCBtaWdodCBoYXZlIGJlZW4gdGFrZW4gcHJvZml0YWJseSB0aGVuLCBJCiAgICAgICAgICAgICAgICAgICAgYWRtaXQgdGhhdCBJIG91Z2h0IG5vdCB0byBoYXZlIG1pc3NlZCBpdC4gQnV0IGlmIHRoZXJlIGlzIG5vbmUsIGlmIHRoZXJlIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgd2FzIGFueSwgaWYgdG8gdGhpcyB2ZXJ5IGRheSBubyBvbmUgaXMgYWJsZSB0byBuYW1lIGFueSwgd2hhdCB3YXMgYSBzdGF0ZXNtYW4gdG8KICAgICAgICAgICAgICAgICAgICBkbz8gU3VyZWx5IHRvIGNob29zZSB0aGUgYmVzdCBwb2xpY3kgYW1vbmcgdGhvc2UgdGhhdCB3ZXJlIHZpc2libGUgYW5kIGZlYXNpYmxlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.191'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTEiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBpcyB3aGF0IEkgZGlkLCBBZXNjaGluZXMsIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFyc2hhbCBwdXQgdGhlIHF1ZXN0aW9uLCDigJxXaG8gd2lzaGVzIHRvIHNwZWFrP+KAnSBIZSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgYXNrLCDigJxXaG8gd2lzaGVzIHRvIHJha2UgdXAgb2xkIGdyaWV2YW5jZXM/4oCdIG9yLAogICAgICAgICAgICAgICAgICAgIOKAnFdobyB3aXNoZXMgdG8gYmUgYW5zd2VyYWJsZSBmb3IgdGhlIGZ1dHVyZT/igJ0gSW4gdGhvc2UgZGF5cwogICAgICAgICAgICAgICAgICAgIHlvdSBzYXQgc3BlZWNobGVzcyBhdCBldmVyeSBhc3NlbWJseTsgSSBjYW1lIGZvcndhcmQgYW5kIHNwb2tlLiBZb3UgaGFkIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICB0byBzYXkgdGhlbjsgdmVyeSB3ZWxsLOKAlHNob3cgdXMgb3VyIGR1dHkgbm93LiBUZWxsIG1lIHdoYXQgcGxhbiBJCiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gaGF2ZSBkaXNjb3ZlcmVkLiBUZWxsIG1lIHdoYXQgZmF2b3JhYmxlIG9wcG9ydHVuaXR5IHdhcyBsb3N0IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlIGJ5IG15IGRlZmF1bHQuIFRlbGwgbWUgb2YgYW55IGFsbGlhbmNlLCBvciBhbnkgbmVnb3RpYXRpb24sIHRvIHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBvdWdodCBieSBwcmVmZXJlbmNlIHRvIGhhdmUgaW50cm9kdWNlZCB0aGUgcGVvcGxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.192'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ5Z29uZXMgYXJlIGJ5Z29uZXMsIGFsbCB0aGUgd29ybGQKICAgICAgICAgICAgICAgICAgICBvdmVyLiBObyBvbmUgcHJvcG9zZXMgZGVsaWJlcmF0aW9uIGFib3V0IHRoZSBwYXN0OyBpdCBpcyB0aGUgcHJlc2VudCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZnV0dXJlIHRoYXQgY2FsbCB0aGUgc3RhdGVzbWFuIHRvIGhpcyBwb3N0LiBBbmQgYXQgdGhhdCB0aW1lLCBhcyB3ZSBhbGwgdGhvdWdodCwKICAgICAgICAgICAgICAgICAgICB0aGVyZSB3ZXJlIGZ1dHVyZSBwZXJpbHMgYW5kIHRoZXJlIHdlcmUgcHJlc2VudCBwZXJpbHMuIExvb2sgYXQgdGhlIHBvbGljeSBJCiAgICAgICAgICAgICAgICAgICAgY2hvc2UgaW4gdGhlIGxpZ2h0IG9mIHRob3NlIHBlcmlsczsgZG8gbm90IGNhcnAgYXQgcmVzdWx0cy4gVGhlIGlzc3VlIGRlcGVuZHMgb24KICAgICAgICAgICAgICAgICAgICB0aGUgd2lsbCBvZiBhIGhpZ2hlciBQb3dlcjsgdGhlIG1pbmQgb2YgdGhlIHN0YXRlc21hbiBpcyBtYW5pZmVzdGVkIGluIGhpcwogICAgICAgICAgICAgICAgICAgIHBvbGljeS4gPC90cmFuc2xhdGlvbj4="
translation['18.193'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTMiIHVuaXQ9InNlY3Rpb24iIC8+WW91IG11c3Qgbm90IGFjY3VzZSBtZSBvZiBjcmltZSwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIFBoaWxpcCBoYXBwZW5lZCB0byB3aW4gdGhlIGJhdHRsZTsgZm9yIHRoZSBldmVudCB3YXMgaW4gR29kJ3MgaGFuZHMsIG5vdAogICAgICAgICAgICAgICAgICAgIG1pbmUuIFNob3cgbWUgdGhhdCBJIGRpZCBub3QgYWRvcHQsIGFzIGZhciBhcyBodW1hbiBjYWxjdWxhdGlvbiBjb3VsZCBnbywgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lYXN1cmVzIHRoYXQgd2VyZSBwcmFjdGljYWJsZSwgb3IgdGhhdCBJIGRpZCBub3QgY2FycnkgdGhlbSBvdXQgd2l0aAogICAgICAgICAgICAgICAgICAgIGhvbmVzdHkgYW5kIGRpbGlnZW5jZSwgYW5kIHdpdGggYW4gaW5kdXN0cnkgdGhhdCBvdmVydGF4ZWQgbXkgc3RyZW5ndGg7IG9yIGVsc2UKICAgICAgICAgICAgICAgICAgICBzaG93IG1lIHRoYXQgdGhlIGVudGVycHJpc2VzIEkgaW5pdGlhdGVkIHdlcmUgbm90IGhvbm9yIGFibGUsIHdvcnRoeSBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCBpbmV2aXRhYmxlLiBQcm92ZQogICAgICAgICAgICAgICAgICAgIHRoYXQsIGFuZCB0aGVuIGRlbm91bmNlIG1lOyBidXQgbm90IHRpbGwgdGhlbi4gPC90cmFuc2xhdGlvbj4="
translation['18.194'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTQiIHVuaXQ9InNlY3Rpb24iIC8+SWYgdGhlIGh1cnJpY2FuZSB0aGF0IGJ1cnN0IHVwb24gdXMgaGFzIGJlZW4gdG9vIHN0cm9uZywgbm90IGZvciB1cyBhbG9uZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgZm9yIGV2ZXJ5IEhlbGxlbmljIHN0YXRlLOKAlHdoYXQgdGhlbj8gQXMgaWYgYSBzaGlwb3duZXIsIHdobyBoYWQgZG9uZQogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgaW4gaGlzIHBvd2VyIGZvciBhIHByb3NwZXJvdXMgdm95YWdlLCB3aG8gaGFkIGVxdWlwcGVkIGhpcyBjcmFmdCB3aXRoCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgYXBwbGlhbmNlIGhlIGNvdWxkIHRoaW5rIG9mIHRvIGVuc3VyZSBoZXIgc2FmZXR5LCBzaG91bGQgZW5jb3VudGVyIGEgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBzdG9ybSwgYW5kIHRoZW4sIGJlY2F1c2UgaGlzIHRhY2tsZSB3YXMgb3ZlcnN0cmFpbmVkIG9yIGV2ZW4gc2hhdHRlcmVkLCBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZSBhY2N1c2VkIG9mIHRoZSBjcmltZSBvZiBzaGlwd3JlY2shIOKAnEJ1dCzigJ0gaGUgbWlnaHQgc2F5LAogICAgICAgICAgICAgICAgICAgIOKAnEkgd2FzIG5vdCBhdCB0aGUgaGVsbeKAneKAlG5vciB3YXMgSSBpbiBjb21tYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGFybXnigJTigJxhbmQgSSBjb3VsZCBub3QgY29udHJvbCBmb3J0dW5lLCBidXQgZm9ydHVuZQogICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzIGFsbC7igJ0gPC90cmFuc2xhdGlvbj4="
translation['18.195'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlcmUgaXMgYW5vdGhlciBwb2ludCBmb3IgeW91ciBjb25zaWRlcmF0aW9uLiBJZiB3ZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgZGVzdGluZWQgdG8gZGlzYXN0ZXIgd2hlbiB3ZSBmb3VnaHQgd2l0aCB0aGUgVGhlYmFucyBhdCBvdXIgc2lkZSwgd2hhdCB3ZXJlIHdlCiAgICAgICAgICAgICAgICAgICAgdG8gZXhwZWN0IGlmIHdlIGhhZCBsYWNrZWQgZXZlbiB0aGF0IGFsbGlhbmNlLCBhbmQgaWYgdGhleSBoYWQgam9pbmVkIFBoaWxpcCwgYQogICAgICAgICAgICAgICAgICAgIHVuaW9uIGZvciB3aGljaCBoZSBleGVydGVkIGFsbCBoaXMgcG93ZXJzIG9mIGFwcGVhbD8gQW5kIGlmLCBhZnRlciBhIGJhdHRsZQogICAgICAgICAgICAgICAgICAgIGZvdWdodCB0aHJlZSBkYXlzJyBtYXJjaCBmcm9tIHRoZSBmcm9udGllciwgc3VjaCBkYW5nZXIgYW5kIHN1Y2ggYWxhcm0gYmVzZXQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSwgd2hhdCBtdXN0IHdlIGhhdmUgZXhwZWN0ZWQgYWZ0ZXIgc3VmZmVyaW5nIHRoZSBzYW1lIGRlZmVhdCB3aXRoaW4gb3VyIG93bgogICAgICAgICAgICAgICAgICAgIGJvcmRlcnM/IERvIHlvdSBub3Qgc2VlIHRoYXQsIGFzIGl0IHdhcywgb25lLCBvciB0d28sIG9yIHRocmVlIGRheXMgZ2F2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5IHRpbWUgZm9yIHJlc2lzdGFuY2UsIGNvbmNlbnRyYXRpb24sIHJlY292ZXJ5LCBmb3IgbXVjaCB0aGF0IG1hZGUgZm9yCiAgICAgICAgICAgICAgICAgICAgZGVsaXZlcmFuY2U7IGFzIGl0IG1pZ2h0IGhhdmUgYmVlbuKAlGJ1dCBJIHdpbGwgbm90IG1lbnRpb24gYW4KICAgICAgICAgICAgICAgICAgICBleHBlcmllbmNlIHRoYXQgd2Ugd2VyZSBzcGFyZWQgYnkgZGl2aW5lIGZhdm9yLCBhbmQgYnkgdGhlIHByb3RlY3Rpb24gb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIHZlcnkgYWxsaWFuY2Ugd2hpY2ggeW91IGRlbm91bmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.196'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkdlbnRsZW1lbiBvZiB0aGUganVyeSwgYWxsIHRoaXMgbG9uZyBzdG9yeSBpcyBpbnRlbmRlZAogICAgICAgICAgICAgICAgICAgIGZvciB5b3UsIGFuZCBmb3IgdGhhdCBjaXJjbGUgb2YgaGVhcmVycyBvdXRzaWRlIHRoZSBiYXJyaWVyLiBGb3IgdGhpcwogICAgICAgICAgICAgICAgICAgIGNvbnRlbXB0aWJsZSBmZWxsb3csIEkgaGF2ZSBhIHNob3J0LCBwbGFpbiwgYW5kIHN1ZmZpY2llbnQgYW5zd2VyLiBBZXNjaGluZXMsIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlIGZ1dHVyZSB3YXMgcmV2ZWFsZWQgdG8geW91IGFuZCB0byBub2JvZHkgZWxzZSwgeW91IHNob3VsZCBoYXZlIGdpdmVuIHVzIHRoZQogICAgICAgICAgICAgICAgICAgIGJlbmVmaXQgb2YgeW91ciBwcmVkaWN0aW9ucyB3aGVuIHdlIHdlcmUgZGVsaWJlcmF0aW5nOyBpZiB5b3UgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgZm9yZWtub3dsZWRnZSwgeW91IGFyZSBvcGVuIHRvIHRoZSBjaGFyZ2Ugb2YgaWdub3JhbmNlIGp1c3QgbGlrZSB0aGUgcmVzdCBvZiB1cy4KICAgICAgICAgICAgICAgICAgICBUaGVuIHdoYXQgYmV0dGVyIHJpZ2h0IGhhdmUgeW91IHRvIGRlbm91bmNlIG1lIHRoYW4gSSB0byBkZW5vdW5jZSB5b3U/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.197'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTciIHVuaXQ9InNlY3Rpb24iIC8+SW4gcmVzcGVjdCBvZiB0aGUgYnVzaW5lc3Mgb2Ygd2hpY2ggSSBhbQogICAgICAgICAgICAgICAgICAgIHNwZWFraW5n4oCUIGFuZCBhdCBwcmVzZW50IEkgZGlzY3VzcyBub3RoaW5nIGVsc2XigJRJIGFtIGEKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgY2l0aXplbiB0aGFuIHlvdSwgaW4gc28gZmFyIGFzIEkgZGV2b3RlZCBteXNlbGYgdG8gYSBjb3Vyc2Ugb2YgYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCB3YXMgdW5hbmltb3VzbHkgYXBwcm92ZWQsIG5laXRoZXIgc2hpcmtpbmcgbm9yIGV2ZW4gY291bnRpbmcgYW55IHBlcnNvbmFsCiAgICAgICAgICAgICAgICAgICAgZGFuZ2VyLiBZb3UgbWFkZSBubyBtb3JlIGFjY2VwdGFibGUgc3VnZ2VzdGlvbiwgb3RoZXJ3aXNlIG1pbmUgd291bGQgbm90IGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIGFkb3B0ZWQ7IGFuZCBpbiBjYXJyeWluZyBvdXQgbWluZSB5b3Ugd2VyZSBub3Qgb2YgdGhlIHNsaWdodGVzdCB1c2UuIFlvdQogICAgICAgICAgICAgICAgICAgIGFyZSBwcm92ZWQgYWZ0ZXIgdGhlIGV2ZW50IHRvIGhhdmUgYmVoYXZlZCB0aHJvdWdob3V0IGxpa2UgYSB3b3J0aGxlc3MgYW5kIG1vc3QKICAgICAgICAgICAgICAgICAgICB1bnBhdHJpb3RpYyBjaXRpemVuOyBhbmQgbm93LCBieSBhIHN0cmFuZ2UgY29pbmNpZGVuY2UsIHRob3NlIHRob3JvdWdoLWdvaW5nCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIEFyaXN0cmF0dXMgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1MyI+TmF4b3M8L3BsYWNlTmFtZT4gYW5kIEFyaXN0b2xhdXMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwNzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTA3OCI+VGhhc29zPC9wbGFjZU5hbWU+LCBhcmUgYnJpbmdpbmcgdGhlIGZyaWVuZHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvIHRyaWFsLCB3aGlsZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaXRzZWxmIEFlc2NoaW5lcyBpcyBhY2N1c2luZwogICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.198'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBoZSB3aG8gYnVpbHQgaGlzCiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBvbiB0aGUgYWNjdW11bGF0ZWQgbWlzZm9ydHVuZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IGRlc2VydmVzIHJhdGhlciB0byBwZXJpc2ggaGltc2VsZiB0aGFuIHRvIHByb3NlY3V0ZSBoaXMKICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcjsgYW5kIHRoZSBtYW4gd2hvIGhhcyBmb3VuZCBoaXMgcHJvZml0IGluIHRoZSBzYW1lIGVtZXJnZW5jaWVzIGFzIGhpcwogICAgICAgICAgICAgICAgICAgIGNvdW50cnkncyBmb2VzIGNhbiBtYWtlIG5vIGNsYWltIHRvIHBhdHJpb3Rpc20uIFlvdSBzdGFuZCByZXZlYWxlZCBpbiB5b3VyIGxpZmUKICAgICAgICAgICAgICAgICAgICBhbmQgY29uZHVjdCwgaW4geW91ciBwdWJsaWMgcGVyZm9ybWFuY2VzIGFuZCBhbHNvIGluIHlvdXIgcHVibGljIGFic3RpbmVuY2VzLiBBCiAgICAgICAgICAgICAgICAgICAgcHJvamVjdCBhcHByb3ZlZCBieSB0aGUgcGVvcGxlIGlzIGdvaW5nIGZvcndhcmQuIEFlc2NoaW5lcyBpcyBzcGVlY2hsZXNzLiBBCiAgICAgICAgICAgICAgICAgICAgcmVncmV0dGFibGUgaW5jaWRlbnQgaXMgcmVwb3J0ZWQuIEFlc2NoaW5lcyBpcyBpbiBldmlkZW5jZS4gSGUgcmVtaW5kcyBvbmUgb2YgYW4KICAgICAgICAgICAgICAgICAgICBvbGQgc3ByYWluIG9yIGZyYWN0dXJlOiB0aGUgbW9tZW50IHlvdSBhcmUgb3V0IG9mIGhlYWx0aCBpdCBiZWdpbnMgdG8gYmUgYWN0aXZlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.199'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFzIGhlIGxheXMKICAgICAgICAgICAgICAgICAgICBzbyBtdWNoIHN0cmVzcyBvbiByZXN1bHRzLCBsZXQgbWUgdmVudHVyZSBvbiBhIHBhcmFkb3guIElmIGl0IHNlZW1zIGV4dHJhdmFnYW50LAogICAgICAgICAgICAgICAgICAgIEkgYmVnIHRoYXQgeW91IHdpbGwgbm90IGJlIHN1cnByaXNlZCwgYnV0IHRoYXQgeW91IHdpbGwgc3RpbGwgZ2l2ZSBmcmllbmRseQogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYXRpb24gdG8gd2hhdCBJIGFtIHNheWluZy4gU3VwcG9zZSB0aGF0IHRoZSBmdXR1cmUgaGFkIGJlZW4gcmV2ZWFsZWQgdG8KICAgICAgICAgICAgICAgICAgICBhbGwgb2YgdXMsIHRoYXQgZXZlcnkgb25lIGhhZCBrbm93biB3aGF0IHdvdWxkIGhhcHBlbiwgYW5kIHRoYXQgeW91LCBBZXNjaGluZXMsCiAgICAgICAgICAgICAgICAgICAgaGFkIHByZWRpY3RlZCBhbmQgcHJvdGVzdGVkLCBhbmQgc2hvdXRlZCBhbmQgc3Rvcm1lZOKAlHRob3VnaCBpbiBmYWN0CiAgICAgICAgICAgICAgICAgICAgeW91IG5ldmVyIG9wZW5lZCB5b3VyIG1vdXRo4oCUZXZlbiB0aGVuIHRoZSBjaXR5IGNvdWxkIG5vdCBoYXZlIGRlcGFydGVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGF0IHBvbGljeSwgaWYgc2hlIGhhZCBhbnkgcmVnYXJkIGZvciBob25vciwgb3IgZm9yIG91ciBhbmNlc3RvcnMsIG9yIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBkYXlzIHRoYXQgYXJlIHRvIGNvbWUuIDwvdHJhbnNsYXRpb24+"
translation['18.200'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDAiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoYXQgY2FuIGJlCiAgICAgICAgICAgICAgICAgICAgc2FpZCBub3cgaXMsIHRoYXQgd2UgaGF2ZSBmYWlsZWQgYW5kIHRoYXQgaXMgdGhlIGNvbW1vbiBsb3Qgb2YgaHVtYW5pdHksIGlmIEdvZAogICAgICAgICAgICAgICAgICAgIHNvIHdpbGxzLiBCdXQgdGhlbiwgaWYgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhZnRlcgogICAgICAgICAgICAgICAgICAgIGNsYWltaW5nIHRoZSBwcmltYWN5IG9mIHRoZSBuYXRpb25zLCBoYWQgcnVuIGF3YXkgZnJvbSBoZXIgY2xhaW1zLCBzaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gaGVsZCBndWlsdHkgb2YgYmV0cmF5aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB0byBQaGlsaXAuIElmLCB3aXRob3V0IHN0cmlraW5nIGEgYmxvdywgc2hlIGhhZAogICAgICAgICAgICAgICAgICAgIGFiYW5kb25lZCB0aGUgY2F1c2UgZm9yIHdoaWNoIG91ciBmb3JlZmF0aGVycyBmbGluY2hlZCBmcm9tIG5vIHBlcmlsLCBpcyB0aGVyZSBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyB3b3VsZCBub3QgaGF2ZSBzcGF0IGluIHlvdXIgZmFjZT8gSW4geW91ciBmYWNlLCBBZXNjaGluZXM6IG5vdCBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG5vdCBhdCBtZSEgPC90cmFuc2xhdGlvbj4="
translation['18.201'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDEiIHVuaXQ9InNlY3Rpb24iIC8+SG93IGNvdWxkIHdlIGhhdmUgcmV0dXJuZWQgdGhlIGdhemUgb2YgdmlzaXRvcnMgdG8KICAgICAgICAgICAgICAgICAgICBvdXIgY2l0eSwgaWYgdGhlIHJlc3VsdCBoYWQgYmVlbiB3aGF0IGl0IGlz4oCUUGhpbGlwIHRoZSBjaG9zZW4gbG9yZAogICAgICAgICAgICAgICAgICAgIHBhcmFtb3VudCBvZiBhbGwgR3JlZWNl4oCUYW5kIGlmIG90aGVyIG5hdGlvbnMgaGFkIGZvdWdodCBnYWxsYW50bHkgdG8KICAgICAgICAgICAgICAgICAgICBhdmVydCB0aGF0IGNhbGFtaXR5IHdpdGhvdXQgb3VyIGFpZCwgYWx0aG91Z2ggbmV2ZXIgYmVmb3JlIGluIHRoZSB3aG9sZSBjb3Vyc2UKICAgICAgICAgICAgICAgICAgICBvZiBoaXN0b3J5IGhhZCBvdXIgY2l0eSBwcmVmZXJyZWQgaW5nbG9yaW91cyBzZWN1cml0eSB0byB0aGUgcGVyaWxzIG9mIGEgbm9ibGUKICAgICAgICAgICAgICAgICAgICBjYXVzZT8gPC90cmFuc2xhdGlvbj4="
translation['18.202'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgaXMgbm8gbWFuIGxpdmluZywgd2hldGhlciBHcmVlawogICAgICAgICAgICAgICAgICAgIG9yIGJhcmJhcmlhbiwgd2hvIGRvZXMgbm90IGtub3cgdGhhdCB0aGUgVGhlYmFucywgb3IgdGhlIExhY2VkYWVtb25pYW5zLCB3aG8KICAgICAgICAgICAgICAgICAgICBoZWxkIHN1cHJlbWFjeSBiZWZvcmUgdGhlbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFNwYXJ0YW4gaGVnZW1vbnkKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdGVkIGZyb20gNDA0IHRvIDM3MSwgdGhlIFRoZWJhbiBmcm9tIDM3MSB0byAzNjIuPC9ub3RlPiBvciB0aGUga2luZyBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4gaGltc2VsZiwgd291bGQgY2hlZXJmdWxseQogICAgICAgICAgICAgICAgICAgIGFuZCBncmF0ZWZ1bGx5IGhhdmUgZ2l2ZW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgbGliZXJ0eSB0byBrZWVwIHdoYXQgc2hlIGhhZCBhbmQgdG8gdGFrZSB3aGF0IHNoZSBjaG9zZSwgaWYgb25seSBzaGUgd291bGQgZG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBiZWhlc3QgYW5kIHN1cnJlbmRlciB0aGUgcHJpbWFjeSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['18.203'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHRoZSBBdGhlbmlhbnMKICAgICAgICAgICAgICAgICAgICBvZiBvbGQsIEkgc3VwcG9zZSwgc3VjaCB0ZW1wb3JpemluZyB3YXMgZm9yYmlkZGVuIGJ5IHRoZWlyIGhlcmVkaXR5LCBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHByaWRlLCBieSB0aGVpciB2ZXJ5IG5hdHVyZS4gU2luY2UgdGhlIHdvcmxkIGJlZ2FuLCBubyBtYW4gaGFzIGV2ZXIgcHJldmFpbGVkCiAgICAgICAgICAgICAgICAgICAgdXBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdG8gYXR0YWNoIGhlcnNlbGYgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2VjdXJpdHkgb2Ygc2Vydml0dWRlIHRvIHRoZSBvcHByZXNzb3JzIG9mIG1hbmtpbmQgaG93ZXZlciBmb3JtaWRhYmxlOiBpbiBldmVyeQogICAgICAgICAgICAgICAgICAgIGdlbmVyYXRpb24gc2hlIGhhcyBzdHJpdmVuIHdpdGhvdXQgYSBwYXVzZSBpbiB0aGUgcGVyaWxvdXMgY29udGVudGlvbiBmb3IKICAgICAgICAgICAgICAgICAgICBwcmltYWN5LCBhbmQgaG9ub3IsIGFuZCByZW5vd24uIDwvdHJhbnNsYXRpb24+"
translation['18.204'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDQiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaAogICAgICAgICAgICAgICAgICAgIGNvbnN0YW5jeSB5b3UgZGVlbSBzbyBleGVtcGxhcnksIGFuZCBzbyBjb25nZW5pYWwgdG8geW91ciBjaGFyYWN0ZXIsIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgc3RpbGwgc2luZyB0aGUgcHJhaXNlcyBvZiB0aG9zZSBvZiB5b3VyIGZvcmVmYXRoZXJzIGJ5IHdob20gaXQgd2FzIG1vc3Qgc2lnbmFsbHkKICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ZWQuIEFuZCB5b3UgYXJlIHJpZ2h0LiBXaG8gd291bGQgbm90IGV4dWx0IGluIHRoZSB2YWxvciBvZiB0aG9zZSBmYW1vdXMKICAgICAgICAgICAgICAgICAgICBtZW4gd2hvLCByYXRoZXIgdGhhbiB5aWVsZCB0byBhIGNvbnF1ZXJvcidzIGJlaGVzdHMsIGxlZnQgY2l0eSBhbmQgY291bnRyeSBhbmQKICAgICAgICAgICAgICAgICAgICBtYWRlIHRoZSB3YXItZ2FsbGV5cyB0aGVpciBob21lOyB3aG8gY2hvc2UgVGhlbWlzdG9jbGVzLCB0aGUgbWFuIHdobyBnYXZlIHRoZW0KICAgICAgICAgICAgICAgICAgICB0aGF0IGNvdW5zZWwsIGFzIHRoZWlyIGNvbW1hbmRlciwgYW5kIHN0b25lZCBDeXJzaWx1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5zdG9uZWQgQ3lyaWx1czogYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjM0MCI+U2FsYW1pczwvcGxhY2VOYW1lPiwgPGRhdGUgYXV0aG5hbWU9Ii00NzkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00NzkiPjQ3OTwvZGF0ZT4gQi5DLiwgd2hlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdhcyBoZWxkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQZXJzaWFuczsgc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOS41IiB2YWxpZD0ieWVzIj5IZHQuIDkuNTwvYmlibD4sIHdoZXJlLCBob3dldmVyLCB0aGUgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICBpcyBMeWNpZGVzLiBOb3QgPGRhdGUgYXV0aG5hbWU9Ii00ODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00ODAiPjQ4MDwvZGF0ZT4gQi5DLiwgYXMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBPZmYuIDMuMTEuNDgiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2ZmLjwvdGl0bGU+IDMuMTEuNDg8L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICBpbXBsaWVzOyB0aG91Z2ggdGhlIHJlc3Qgb2YgdGhlIHNlbnRlbmNlIHJlZmVycyB0byB0aGUgY29uZGl0aW9ucyBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIuPC9ub3RlPiB0byBkZWF0aCBmb3IgYWR2aXNpbmcgb2JlZGllbnQgc3VibWlzc2lvbj8gQXllLCBhbmQgaGlzIHdpZmUKICAgICAgICAgICAgICAgICAgICBhbHNvIHdhcyBzdG9uZWQgYnkgeW91ciB3aXZlcy4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjM0MCI+U2FsYW1pczwvcGxhY2VOYW1lPiwgPGRhdGUgYXV0aG5hbWU9Ii00NzkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00NzkiPjQ3OTwvZGF0ZT4gQi5DLiwgd2hlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdhcyBoZWxkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQZXJzaWFuczsgc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOS41IiB2YWxpZD0ieWVzIj5IZHQuIDkuNTwvYmlibD4sIHdoZXJlLCBob3dldmVyLCB0aGUgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICBpcyBMeWNpZGVzLiBOb3QgPGRhdGUgYXV0aG5hbWU9Ii00ODAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00ODAiPjQ4MDwvZGF0ZT4gQi5DLiwgYXMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBPZmYuIDMuMTEuNDgiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2ZmLjwvdGl0bGU+IDMuMTEuNDg8L2JpYmw+LAogICAgICAgICAgICAgICAgICAgICAgICBpbXBsaWVzOyB0aG91Z2ggdGhlIHJlc3Qgb2YgdGhlIHNlbnRlbmNlIHJlZmVycyB0byB0aGUgY29uZGl0aW9ucyBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2ZmLjwvdGl0bGU+IDMuMTEuNDg8L3RyYW5zbGF0aW9uPg=="
translation['18.205'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEF0aGVuaWFucwogICAgICAgICAgICAgICAgICAgIG9mIHRoYXQgZGF5IGRpZCBub3Qgc2VhcmNoIGZvciBhIHN0YXRlc21hbiBvciBhIGNvbW1hbmRlciB3aG8gc2hvdWxkIGhlbHAgdGhlbQogICAgICAgICAgICAgICAgICAgIHRvIGEgc2VydmlsZSBzZWN1cml0eTogdGhleSBkaWQgbm90IGFzayB0byBsaXZlLCB1bmxlc3MgdGhleSBjb3VsZCBsaXZlIGFzIGZyZWUKICAgICAgICAgICAgICAgICAgICBtZW4uIEV2ZXJ5IG1hbiBvZiB0aGVtIHRob3VnaHQgb2YgaGltc2VsZiBhcyBvbmUgYm9ybiwgbm90IHRvIGhpcyBmYXRoZXIgYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIG1vdGhlciBhbG9uZSwgYnV0IHRvIGhpcyBjb3VudHJ5LiBXaGF0IGlzIHRoZSBkaWZmZXJlbmNlPyBUaGUgbWFuIHdobyBkZWVtcwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgYm9ybiBvbmx5IHRvIGhpcyBwYXJlbnRzIHdpbGwgd2FpdCBmb3IgaGlzIG5hdHVyYWwgYW5kIGRlc3RpbmVkIGVuZDsgdGhlCiAgICAgICAgICAgICAgICAgICAgc29uIG9mIGhpcyBjb3VudHJ5IGlzIHdpbGxpbmcgdG8gZGllIHJhdGhlciB0aGFuIHNlZSBoZXIgZW5zbGF2ZWQsIGFuZCB3aWxsIGxvb2sKICAgICAgICAgICAgICAgICAgICB1cG9uIHRob3NlIG91dHJhZ2VzIGFuZCBpbmRpZ25pdGllcywgd2hpY2ggYSBjb21tb253ZWFsdGggaW4gc3ViamVjdGlvbiBpcwogICAgICAgICAgICAgICAgICAgIGNvbXBlbGxlZCB0byBlbmR1cmUsIGFzIG1vcmUgZHJlYWRmdWwgdGhhbiBkZWF0aCBpdHNlbGYuIDwvdHJhbnNsYXRpb24+"
translation['18.206'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIEkgaGFkIGF0dGVtcHRlZCB0bwogICAgICAgICAgICAgICAgICAgIGNsYWltIHRoYXQgeW91IHdlcmUgZmlyc3QgaW5zcGlyZWQgd2l0aCB0aGUgc3Bpcml0IG9mIHlvdXIgZm9yZWZhdGhlcnMgYnkgbWUsCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgb25lIHdvdWxkIGp1c3RseSByZWJ1a2UgbWUuIEJ1dCBJIGRvIG5vdDogSSBhbSBhc3NlcnRpbmcgdGhlc2UgcHJpbmNpcGxlcwogICAgICAgICAgICAgICAgICAgIGFzIHlvdXIgcHJpbmNpcGxlczsgSSBhbSBzaG93aW5nIHlvdSB0aGF0IHN1Y2ggd2FzIHRoZSBwcmlkZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gbG9uZyBiZWZvcmUgbXkKICAgICAgICAgICAgICAgICAgICB0aW1lLOKAlHRob3VnaCBmb3IgbXlzZWxmIEkgZG8gY2xhaW0gc29tZSBjcmVkaXQgZm9yIHRoZSBhZG1pbmlzdHJhdGlvbgogICAgICAgICAgICAgICAgICAgIG9mIHBhcnRpY3VsYXIgbWVhc3VyZXMuIDwvdHJhbnNsYXRpb24+"
translation['18.207'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDciIHVuaXQ9InNlY3Rpb24iIC8+QWVzY2hpbmVzLCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlciBoYW5kLCBhcnJhaWducyB0aGUgd2hvbGUgcG9saWN5LCBzdGlycyB1cCB5b3VyIHJlc2VudG1lbnQgYWdhaW5zdCBtZSBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBhdXRob3Igb2YgeW91ciB0ZXJyb3JzIGFuZCB5b3VyIGRhbmdlcnMsIGFuZCwgaW4gaGlzIGVhZ2VybmVzcyB0byBzdHJpcCBtZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBkaXN0aW5jdGlvbiBvZiBhIG1vbWVudCwgd291bGQgcm9iIHlvdSBvZiB0aGUgZW5kdXJpbmcgcHJhaXNlcyBvZgogICAgICAgICAgICAgICAgICAgIHBvc3Rlcml0eS4gRm9yIGlmIHlvdSBjb25kZW1uIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5DdGVzaXBob248L3N1cm5hbWU+PC9wZXJzTmFtZT4KICAgICAgICAgICAgICAgICAgICBvbiB0aGUgZ3JvdW5kIG9mIG15IHBvbGl0aWNhbCBkZWxpbnF1ZW5jeSwgeW91IHlvdXJzZWx2ZXMgd2lsbCBiZSBhZGp1ZGdlZCBhcwogICAgICAgICAgICAgICAgICAgIHdyb25nZG9lcnMsIG5vdCBhcyBtZW4gd2hvIG93ZWQgdGhlIGNhbGFtaXRpZXMgdGhleSBoYXZlIHN1ZmZlcmVkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHVua2luZG5lc3Mgb2YgZm9ydHVuZS4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkN0ZXNpcGhvbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['18.208'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDgiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vOyB5b3UgY2Fubm90LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBjYW5ub3QgaGF2ZSBkb25lCiAgICAgICAgICAgICAgICAgICAgd3JvbmdseSB3aGVuIHlvdSBhY2NlcHRlZCB0aGUgcmlza3Mgb2Ygd2FyIGZvciB0aGUgcmVkZW1wdGlvbiBhbmQgdGhlIGxpYmVydGllcwogICAgICAgICAgICAgICAgICAgIG9mIG1hbmtpbmQ7IEkgc3dlYXIgaXQgYnkgb3VyIGZvcmVmYXRoZXJzIHdobyBib3JlIHRoZSBicnVudCBvZiB3YXJmYXJlIGF0CiAgICAgICAgICAgICAgICAgICAgTWFyYXRob24sIHdobyBzdG9vZCBpbiBhcnJheSBvZiBiYXR0bGUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQbGF0YWVhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQbGF0YWVhIj5QbGF0YWVhPC9wbGFjZU5hbWU+LCB3aG8gZm91Z2h0IGluIHRoZSBzZWEtZmlnaHRzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzQwIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNDAiPlNhbGFtaXM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXJ0ZW1pc2l1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXJ0ZW1pc2l1bSI+QXJ0ZW1pc2l1bTwvcGxhY2VOYW1lPiwgYW5kIGJ5IGFsbCB0aGUgYnJhdmUgbWVuCiAgICAgICAgICAgICAgICAgICAgd2hvIHJlcG9zZSBpbiBvdXIgcHVibGljIHNlcHVsY2hyZXMsIGJ1cmllZCB0aGVyZSBieSBhIGNvdW50cnkgdGhhdCBhY2NvdW50ZWQKICAgICAgICAgICAgICAgICAgICB0aGVtIGFsbCB0byBiZSBhbGlrZSB3b3J0aHkgb2YgdGhlIHNhbWUgaG9ub3Ig4oCUYWxsLCBJIHNheSwgQWVzY2hpbmVzLAogICAgICAgICAgICAgICAgICAgIG5vdCB0aGUgc3VjY2Vzc2Z1bCBhbmQgdGhlIHZpY3RvcmlvdXMgYWxvbmUuIFNvIGp1c3RpY2UgYmlkczogZm9yIGJ5IGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBkdXR5IG9mIGJyYXZlIG1lbiB3YXMgYWNjb21wbGlzaGVkOiB0aGVpciBmb3J0dW5lIHdhcyBzdWNoIGFzIEhlYXZlbiBzZXZlcmFsbHkKICAgICAgICAgICAgICAgICAgICBhbGxvdHRlZCB0byB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.209'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZCB0aGVuIGEgZGlzcmVwdXRhYmxlIHF1aWxsLWRyaXZlciBsaWtlIHlvdSwgd2FudGluZyB0byByb2IgbWUgb2YKICAgICAgICAgICAgICAgICAgICBhIGRpc3RpbmN0aW9uIGdpdmVuIG1lIGJ5IHRoZSBraW5kbmVzcyBvZiBteSBmZWxsb3cgY2l0aXplbnMsIHRhbGtlZCBhYm91dAogICAgICAgICAgICAgICAgICAgIHZpY3RvcmllcyBhbmQgYmF0dGxlcyBhbmQgYW5jaWVudCBkZWVkcyBvZiB2YWxvciwgYWxsIGlycmVsZXZhbnQgdG8gdGhlIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICB0cmlhbC4gQnV0IEksIHdobyBjYW1lIGZvcndhcmQgdG8gYWR2aXNlIG15IGNvdW50cnkgaG93IHRvIHJldGFpbiBoZXIKICAgICAgICAgICAgICAgICAgICBzdXByZW1hY3nigJR0ZWxsIG1lLCB5b3UgdGhpcmQtcmF0ZSB0cmFnZWRpYW4sIGluIHdoYXQgc3Bpcml0IGRpZCBpdAogICAgICAgICAgICAgICAgICAgIGJlc2VlbSBtZSB0byBhc2NlbmQgdGhlIHRyaWJ1bmU/IEFzIG9uZSB3aG8gc2hvdWxkIGdpdmUgdG8gdGhlIGNpdGl6ZW5zIGNvdW5zZWwKICAgICAgICAgICAgICAgICAgICB1bndvcnRoeSBvZiB0aGVpciB0cmFkaXRpb25zPyA8L3RyYW5zbGF0aW9uPg=="
translation['18.210'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTAiIHVuaXQ9InNlY3Rpb24iIC8+SSBzaG91bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkIGRlYXRoISBNZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3UKICAgICAgICAgICAgICAgICAgICBqdXJ5bWVuIGFyZSBub3QgdG8ganVkZ2UgcHVibGljIGFuZCBwcml2YXRlIGNhdXNlcyBpbiB0aGUgc2FtZSB0ZW1wZXIuIFlvdSBsb29rCiAgICAgICAgICAgICAgICAgICAgYXQgY29udHJhY3RzIG9mIGV2ZXJ5ZGF5IGJ1c2luZXNzIGluIHRoZSBsaWdodCBvZiByZWxldmFudCBzdGF0dXRlcyBhbmQgZmFjdHMsCiAgICAgICAgICAgICAgICAgICAgYnV0IGF0IHF1ZXN0aW9ucyBvZiBwdWJsaWMgcG9saWN5IHdpdGggZHVlIHJlZ2FyZCB0byB0aGUgcHJvdWQgdHJhZGl0aW9ucyBvZiBvdXIKICAgICAgICAgICAgICAgICAgICBmb3JlZmF0aGVycy4gSWYgeW91IGZlZWwgYm91bmQgdG8gYWN0IGluIHRoZSBzcGlyaXQgb2YgdGhhdCBkaWduaXR5LCB3aGVuZXZlcgogICAgICAgICAgICAgICAgICAgIHlvdSBjb21lIGludG8gY291cnQgdG8gZ2l2ZSBqdWRnZW1lbnQgb24gcHVibGljIGNhdXNlcywgeW91IG11c3QgYmV0aGluawogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMgdGhhdCB3aXRoIGhpcyBzdGFmZiBhbmQgaGlzIGJhZGdlIGV2ZXJ5IG9uZSBvZiB5b3UgcmVjZWl2ZXMgaW4gdHJ1c3QKICAgICAgICAgICAgICAgICAgICB0aGUgYW5jaWVudCBwcmlkZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.211'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhvd2V2ZXIsCiAgICAgICAgICAgICAgICAgICAgaW4gdG91Y2hpbmcgdXBvbiB0aGUgYWNoaWV2ZW1lbnRzIG9mIG91ciBhbmNlc3RvcnMsIEkgaGF2ZSBwYXNzZWQgYnkgc29tZSBvZiBteQogICAgICAgICAgICAgICAgICAgIGRlY3JlZXMgYW5kIG90aGVyIG1lYXN1cmVzLiBJIHdpbGwgbm93IHRoZXJlZm9yZSByZXR1cm4gdG8gdGhlIHBvaW50IGF0IHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICAgICAgZGlncmVzc2VkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuIHdlIHJlYWNoZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IHdlIGZvdW5kIGFtYmFzc2Fkb3JzIGZyb20gUGhpbGlwIGFuZAogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIFRoZWJhbnMgYW5kIG90aGVycyBvZiBoaXMgYWxsaWVzIGFscmVhZHkgdGhlcmUsIG91ciBmcmllbmRzCiAgICAgICAgICAgICAgICAgICAgcGFuaWMtc3RyaWNrZW4sIGFuZCBoaXMgZnJpZW5kcyBmdWxsIG9mIGNvbmZpZGVuY2UuIFRvIHByb3ZlIHRoYXQgdGhpcyBpcyBub3QgYQogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCBtYWRlIHRvZGF5IHRvIHNlcnZlIG15IG93biB0dXJuLCBwbGVhc2UgcmVhZCB0aGUgZGlzcGF0Y2ggd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgYW1iYXNzYWRvcnMgc2VudCBhdCB0aGUgdGltZS4gPC90cmFuc2xhdGlvbj4="
translation['18.212'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHByb3NlY3V0b3IKICAgICAgICAgICAgICAgICAgICBpcyBzbyBleHRyYW9yZGluYXJpbHkgbWFsaWNpb3VzIHRoYXQgaGUgZ2l2ZXMgdGhlIGNyZWRpdCBvZiBhbnkgZHV0eQogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NmdWxseSBwZXJmb3JtZWQgbm90IHRvIG1lIGJ1dCB0byBvcHBvcnR1bml0eSwgYnV0IGhvbGRzIG1lIGFuZCBteSBiYWQKICAgICAgICAgICAgICAgICAgICBsdWNrIHJlc3BvbnNpYmxlIGZvciBldmVyeXRoaW5nIHRoYXQgbWlzY2FycmllZC4gSSBhbSBhIHNwZWFrZXIgYW5kIGEgc3RhdGVzbWFuLAogICAgICAgICAgICAgICAgICAgIHlldCBpdCB3b3VsZCBzZWVtIHRoYXQsIGluIGhpcyB2aWV3LCBJIGFtIHRvIGhhdmUgbm8gY3JlZGl0IGZvciB0aGUgcmVzdWx0cyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBkaXNjdXNzaW9uIGFuZCBkZWxpYmVyYXRpb24sIGJ1dCBhbSBzb2xlbHkgcmVzcG9uc2libGUgZm9yIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBtaXNhZHZlbnR1cmVzIG9mIG91ciBhcm1zIGFuZCBvZiBvdXIgZ2VuZXJhbHNoaXAuIENhbiB5b3UgaW1hZ2luZSBhIGNydWRlciBvcgogICAgICAgICAgICAgICAgICAgIG1vcmUgYWJvbWluYWJsZSBjYWx1bW55PyBSZWFkIHRoZSBkaXNwYXRjaC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.213'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlYmFucyBoZWxkIHRoZWlyIGFzc2VtYmx5LCB0aGV5IGludHJvZHVjZWQgUGhpbGlwJ3MgYW1iYXNzYWRvcnMgZmlyc3QsIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGdyb3VuZCB0aGF0IHRoZXkgd2VyZSBpbiB0aGUgcG9zaXRpb24gb2YgYWxsaWVzLiBUaGV5IGNhbWUgZm9yd2FyZCBhbmQgbWFkZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIHNwZWVjaCwgZnVsbCBvZiBldWxvZ3kgb2YgUGhpbGlwLCBhbmQgb2YgaW5jcmltaW5hdGlvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCByZWNhbGxlZCBldmVyeXRoaW5nIHlvdSBoYWQKICAgICAgICAgICAgICAgICAgICBldmVyIGRvbmUgaW4gYW50YWdvbmlzbSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgVGhlIGdpc3Qgb2YgdGhlIHNwZWVjaCB3YXMgdGhhdCB0aGV5IHdlcmUgdG8gc2hvdyBncmF0aXR1ZGUgdG8gUGhpbGlwIGZvciBldmVyeQogICAgICAgICAgICAgICAgICAgIGdvb2QgdHVybiBoZSBoYWQgZG9uZSB0byB0aGVtLCBhbmQgdG8gcHVuaXNoIHlvdSBmb3IgdGhlIGluanVyaWVzIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQsIGluIHdoaWNoZXZlciBvZiB0d28gd2F5cyB0aGV5IGNob3Nl4oCUIGVpdGhlciBieSBnaXZpbmcgaGltIGEKICAgICAgICAgICAgICAgICAgICBmcmVlIHBhc3NhZ2UsIG9yIGJ5IGpvaW5pbmcgaW4gdGhlIGludmFzaW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPi4gVGhleSBwcm92ZWQsIGFzIHRoZXkgdGhvdWdodCwgdGhhdCwgaWYgdGhlaXIgYWR2aWNlCiAgICAgICAgICAgICAgICAgICAgd2VyZSB0YWtlbiwgY2F0dGxlLCBzbGF2ZXMsIGFuZCBvdGhlciBsb290IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IHdvdWxkIGNvbWUgaW50byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+LCB3aGVyZWFzIHRoZSByZXN1bHQgb2YgdGhlIHByb3Bvc2FscyB0aGV5IGV4cGVjdGVkIGZyb20KICAgICAgICAgICAgICAgICAgICB1cyB3b3VsZCBiZSB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4gd291bGQgYmUKICAgICAgICAgICAgICAgICAgICByYXZhZ2VkIGJ5IHRoZSB3YXIuIFRoZXkgYWRkZWQgbWFueSBvdGhlciBhcmd1bWVudHMsIGFsbCB0ZW5kaW5nIHRvIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgY29uY2x1c2lvbi4gPC90cmFuc2xhdGlvbj4="
translation['18.214'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTQiIHVuaXQ9InNlY3Rpb24iIC8+SSB3b3VsZCBnaXZlIG15IGxpZmUgdG8KICAgICAgICAgICAgICAgICAgICByZWNhcGl0dWxhdGUgdGhlIHJlcGx5IHRoYXQgd2UgbWFkZTogYnV0IEkgYW0gYWZyYWlkIHRoYXQsIGFzIHRoYXQgY3Jpc2lzIGlzCiAgICAgICAgICAgICAgICAgICAgbG9uZyBwYXN0LCBhbmQgYXMgeW91IG1heSB0aGluayB0aGF0IGFsbCB0aG9zZSB0cmFuc2FjdGlvbnMgYXJlIG5vdyBvYmxpdGVyYXRlZAogICAgICAgICAgICAgICAgICAgIGFzIGJ5IGEgZmxvb2QsIHlvdSB3b3VsZCByZWdhcmQgYW55IGRpc2N1c3Npb24gb2YgdGhlbSBhcyB1c2VsZXNzIGFuZCB2ZXhhdGlvdXMuCiAgICAgICAgICAgICAgICAgICAgSSB3aWxsIG9ubHkgYXNrIHlvdSB0byBoZWFyIGhvdyBmYXIgd2UgcHJldmFpbGVkIHVwb24gdGhlbSwgYW5kIHdoYXQgYW5zd2VyIHRoZXkKICAgICAgICAgICAgICAgICAgICByZXR1cm5lZC4gVGFrZSBhbmQgcmVhZCB0aGlzIGRvY3VtZW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IlJlcGx5IG9mIHRoZSBUaGViYW5zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwbHkgb2YgdGhlIFRoZWJhbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwbHkgb2YgdGhlIFRoZWJhbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.215'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFmdGVyIHRoYXQsCiAgICAgICAgICAgICAgICAgICAgdGhlIFRoZWJhbnMgaW52aXRlZCB5b3UgdG8gam9pbiB0aGVtLiBZb3UgbWFyY2hlZCBvdXQ6IHlvdSByZWluZm9yY2VkIHRoZW0uIEkKICAgICAgICAgICAgICAgICAgICBwYXNzIG92ZXIgdGhlIGluY2lkZW50cyBvZiB0aGUgbWFyY2g6IGJ1dCB0aGVpciByZWNlcHRpb24gb2YgeW91IHdhcyBzbyBmcmllbmRseQogICAgICAgICAgICAgICAgICAgIHRoYXQsIHdoaWxlIHRoZWlyIG93biBpbmZhbnRyeSBhbmQgY2F2YWxyeSBsYXkgb3V0c2lkZSB0aGUgd2FsbHMsIHRoZXkgZ2F2ZSB5b3UKICAgICAgICAgICAgICAgICAgICBhY2Nlc3MgdG8gdGhlaXIgaG9tZXMsIHRvIHRoZWlyIGNpdGFkZWwsIHRvIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiBhbmQgbW9zdAogICAgICAgICAgICAgICAgICAgIHByZWNpb3VzIHBvc3Nlc3Npb25zLiBPbiB0aGF0IGRheSB0aGUgVGhlYmFucyBwdWJsaWNseSBwYWlkIHRocmVlIGZpbmUKICAgICAgICAgICAgICAgICAgICBjb21wbGltZW50c+KAlHRvIHlvdXIgdmFsb3IsIHRvIHlvdXIgcmlnaHRlb3VzbmVzcywgYW5kIHRvIHlvdXIKICAgICAgICAgICAgICAgICAgICBzb2JyaWV0eS4gV2hlbiB0aGV5IGRlY2lkZWQgdG8gZmlnaHQgb24geW91ciBzaWRlIHJhdGhlciB0aGFuIGFnYWluc3QgeW91LCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYWRqdWRnZWQgeW91IHRvIGJlIGJyYXZlciBtZW4gdGhhbiBQaGlsaXAsIGFuZCB5b3VyIGNsYWltIHRvIGJlIG1vcmUgcmlnaHRlb3VzCiAgICAgICAgICAgICAgICAgICAgdGhhbiBoaXM7IGFuZCB3aGVuIHRoZXkgcHV0IGludG8geW91ciBwb3dlciB3aGF0IHRoZXksIGxpa2UgYWxsIG90aGVyIG1lbiwgd2VyZQogICAgICAgICAgICAgICAgICAgIG1vc3QgYW54aW91cyB0byBzYWZlZ3VhcmQsIG5hbWVseSB0aGVpciB3aXZlcyBhbmQgdGhlaXIgY2hpbGRyZW4sIHRoZXkgZXhoaWJpdGVkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY29uZmlkZW5jZSBpbiB5b3VyIHNvYnJpZXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.216'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmVieSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhleSBzaG93ZWQKICAgICAgICAgICAgICAgICAgICBhIGp1c3QgYXBwcmVjaWF0aW9uIG9mIHlvdXIgY2hhcmFjdGVyLiBBZnRlciB0aGUgZW50cnkgb2YgeW91ciBzb2xkaWVycyBubyBtYW4KICAgICAgICAgICAgICAgICAgICBldmVyIGxhaWQgZXZlbiBhIGdyb3VuZGxlc3MgY29tcGxhaW50IGFnYWluc3QgdGhlbSwgc28gc29iZXJseSBkaWQgeW91IGNvbmR1Y3QKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzLiBGaWdodGluZyBzaG91bGRlciB0byBzaG91bGRlciB3aXRoIHRoZW0gaW4gdGhlIHR3byBlYXJsaWVzdAogICAgICAgICAgICAgICAgICAgIGVuZ2FnZW1lbnRzLOKAlHRoZSBiYXR0bGUgYnkgdGhlIHJpdmVyLCBhbmQgdGhlIHdpbnRlcgogICAgICAgICAgICAgICAgICAgIGJhdHRsZSzigJR5b3UgYXBwcm92ZWQgeW91cnNlbHZlcyBpcnJlcHJvYWNoYWJsZSBmaWdodGVycywgYWRtaXJhYmxlCiAgICAgICAgICAgICAgICAgICAgYWxpa2UgaW4gZGlzY2lwbGluZSwgaW4gZXF1aXBtZW50LCBhbmQgaW4gZGV0ZXJtaW5hdGlvbi4gWW91ciBjb25kdWN0IGVsaWNpdGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIHByYWlzZXMgb2Ygb3RoZXIgbmF0aW9ucywgYW5kIHdhcyBhY2tub3dsZWRnZWQgYnkgeW91cnNlbHZlcyBpbiBzZXJ2aWNlcyBvZgogICAgICAgICAgICAgICAgICAgIHRoYW5rc2dpdmluZyB0byB0aGUgZ29kcy4gPC90cmFuc2xhdGlvbj4="
translation['18.217'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTciIHVuaXQ9InNlY3Rpb24iIC8+SSBzaG91bGQgbGlrZSB0bwogICAgICAgICAgICAgICAgICAgIGFzayBBZXNjaGluZXMgYSBxdWVzdGlvbjogd2hlbiBhbGwgdGhhdCB3YXMgZ29pbmcgb24sIHdoZW4gdGhlIHdob2xlIGNpdHkgd2FzIGEKICAgICAgICAgICAgICAgICAgICBzY2VuZSBvZiBlbnRodXNpYXNtIGFuZCByZWpvaWNpbmcgYW5kIHRoYW5rc2dpdmluZywgZGlkIGhlIHRha2UgcGFydCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB3b3JzaGlwIGFuZCBmZXN0aXZpdHkgb2YgdGhlIHBvcHVsYWNlLCBvciBkaWQgaGUgc2l0IHN0aWxsIGF0IGhvbWUsIGdyaWV2aW5nIGFuZAogICAgICAgICAgICAgICAgICAgIGdyb2FuaW5nIGFuZCBzdWxraW5nIG92ZXIgcHVibGljIHN1Y2Nlc3Nlcz8gSWYgaGUgd2FzIHByZXNlbnQgYXMgb25lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHRocm9uZywgc3VyZWx5IGhpcyBiZWhhdmlvciBpcyBzY2FuZGFsb3VzIGFuZCBldmVuIHNhY3JpbGVnaW91cywgZm9yIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgY2FsbGluZyB0aGUgZ29kcyB0byB3aXRuZXNzIHRoYXQgY2VydGFpbiBtZWFzdXJlcyB3ZXJlIHZlcnkgZ29vZCwgaGUgbm93IGFza3MgYQogICAgICAgICAgICAgICAgICAgIGp1cnkgdG8gdm90ZSB0aGF0IHRoZXkgd2VyZSB2ZXJ5IGJhZOKAlGEganVyeSB0aGF0IGhhcyBzd29ybiBieSB0aGUKICAgICAgICAgICAgICAgICAgICBnb2RzISBJZiBoZSB3YXMgbm90IHByZXNlbnQsIGhlIGRlc2VydmVzIG1hbnkgZGVhdGhzIGZvciBzaHJpbmtpbmcgZnJvbSBhIHNpZ2h0CiAgICAgICAgICAgICAgICAgICAgaW4gd2hpY2ggZXZlcnkgb25lIGVsc2UgcmVqb2ljZWQuIFBsZWFzZSByZWFkIHRoZXNlIGRlY3JlZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlcyBhcHBvaW50aW5nIGEgUHVibGljIFRoYW5rc2dpdmluZyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZXMgYXBwb2ludGluZyBhIFB1YmxpYyBUaGFua3NnaXZpbmc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlcyBhcHBvaW50aW5nIGEgUHVibGljIFRoYW5rc2dpdmluZzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.218'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvIHdlIHdlcmUKICAgICAgICAgICAgICAgICAgICBlbmdhZ2VkIGluIHRoYW5rc2dpdmluZywgYW5kIHRoZSBUaGViYW5zIGluIHRoZSBkZWxpdmVyYW5jZSB0aGF0IHRoZXkgb3dlZCB0bwogICAgICAgICAgICAgICAgICAgIHVzLiBUaGUgc2l0dWF0aW9uIHdhcyByZXZlcnNlZCwgYW5kIGEgbmF0aW9uIHRoYXQsIHRoYW5rcyB0byB0aGUgaW50cmlndWVzIG9mCiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzIGFuZCBoaXMgcGFydHksIHNlZW1lZCBvbiB0aGUgdmVyZ2Ugb2Ygc3VpbmcgZm9yIGFpZCwgd2FzIG5vdyBnaXZpbmcKICAgICAgICAgICAgICAgICAgICBhaWQgaW4gcHVyc3VhbmNlIG9mIHRoZSBhZHZpY2Ugd2hpY2ggeW91IGFjY2VwdGVkIGZyb20gbWUuIEJ1dCBpbmRlZWQsIHdoYXQgc29ydAogICAgICAgICAgICAgICAgICAgIG9mIGxhbmd1YWdlIFBoaWxpcCBnYXZlIHZlbnQgdG8gYXQgdGhhdCB0aW1lLCBhbmQgaG93IHNlcmlvdXNseSBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBkaXNjb21wb3NlZCwgeW91IHNoYWxsIGxlYXJuIGZyb20gbGV0dGVycyBzZW50IGJ5IGhpbSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzA3NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3MDc2Ij5QZWxvcG9ubmVzdXM8L3BsYWNlTmFtZT4uIFBsZWFzZSB0YWtlIGFuZCByZWFkIHRoZW0sIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSBtYXkgbGVhcm4gdGhlIHJlYWwgZWZmZWN0IG9mIG15IHBlcnNldmVyYW5jZSwgb2YgbXkgam91cm5leXMgYW5kCiAgICAgICAgICAgICAgICAgICAgaGFyZHNoaXBzLCBhbmQgb2YgdGhhdCBwcm9mdXNpb24gb2YgZGVjcmVlcyBhdCB3aGljaCBBZXNjaGluZXMgd2FzIGp1c3Qgbm93CiAgICAgICAgICAgICAgICAgICAgc2NvZmZpbmcuIDwvdHJhbnNsYXRpb24+"
translation['18.219'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1lbgogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhlcmUgaGF2ZSBiZWVuIG1hbnkKICAgICAgICAgICAgICAgICAgICBncmVhdCBhbmQgZGlzdGluZ3Vpc2hlZCBvcmF0b3JzIGluIHlvdXIgY2l0eSBiZWZvcmUgbXkgdGltZSzigJR0aGUKICAgICAgICAgICAgICAgICAgICBmYW1vdXMgQ2FsbGlzdHJhdHVzLCBBcmlzdG9waG9uLCBDZXBoYWx1cywgVGhyYXN5YnVsdXMsIGFuZCB0aG91c2FuZHMgbW9yZTsgYnV0CiAgICAgICAgICAgICAgICAgICAgbm8gb25lIG9mIHRoZW0gZXZlciBkZXZvdGVkIGhpbXNlbGYgdG8gYW55IHB1YmxpYyBidXNpbmVzcyB3aXRob3V0IGludGVybWlzc2lvbjsKICAgICAgICAgICAgICAgICAgICB0aGUgbWFuIHdobyBtb3ZlZCBhIHJlc29sdXRpb24gd291bGQgbm90IGdvIG9uIGVtYmFzc3ksIGFuZCB0aGUgbWFuIHdobyB3ZW50IG9uCiAgICAgICAgICAgICAgICAgICAgZW1iYXNzeSB3b3VsZCBub3QgbW92ZSBhIHJlc29sdXRpb24uIEVhY2ggb2YgdGhlbSB1c2VkIHRvIGxlYXZlIGhpbXNlbGYgc29tZQogICAgICAgICAgICAgICAgICAgIGxlaXN1cmUsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIHNvbWUgbG9vcC1ob2xlLCBpbiBjYXNlIGFueXRoaW5nIGhhcHBlbmVkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.220'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjAiIHVuaXQ9InNlY3Rpb24iIC8+4oCcV2hhdCHigJ0gc29tZSBvbmUgbWF5CiAgICAgICAgICAgICAgICAgICAgc2F5LCDigJx3ZXJlIHlvdSBzbyBtdWNoIHN0cm9uZ2VyIGFuZCBib2xkZXIgdGhhbiBvdGhlcnMgdGhhdCB5b3UgY291bGQKICAgICAgICAgICAgICAgICAgICBkbyBldmVyeXRoaW5nIGJ5IHlvdXJzZWxmP+KAnSBUaGF0IGlzIG5vdCB3aGF0IEkgbWVhbjogYnV0IEkgd2FzIHNvCiAgICAgICAgICAgICAgICAgICAgZmlybWx5IHBlcnN1YWRlZCB0aGF0IHRoZSBkYW5nZXIgd2hpY2ggb3Zlcmh1bmcgdGhlIGNpdHkgd2FzIHZlcnkgc2VyaW91cywgdGhhdAogICAgICAgICAgICAgICAgICAgIGl0IGRpZCBub3Qgc2VlbSB0byBtZSB0byBsZWF2ZSBtZSBhbnkgcm9vbSBmb3IgdGFraW5nIG15IHBlcnNvbmFsIHNhZmV0eSBpbnRvCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudDsgYnV0IGEgbWFuLCBJIHRob3VnaHQsIG11c3QgYmUgY29udGVudCwgd2l0aG91dCBuZWdsZWN0aW5nIGFueXRoaW5nLCB0bwogICAgICAgICAgICAgICAgICAgIGRvIGhpcyBkdXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.221'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIG15c2VsZiwgSSB3YXMgY29udmluY2VkLAogICAgICAgICAgICAgICAgICAgIHByZXN1bXB0dW91c2x5LCBwZXJoYXBzLCBidXQgY29udmluY2VkIEkgd2FzLCB0aGF0IHRoZXJlIHdhcyBubyBvbmUgbW9yZQogICAgICAgICAgICAgICAgICAgIGNvbXBldGVudCBlaXRoZXIgdG8gbWFrZSBzb3VuZCBwcm9wb3NhbHMsIG9yIHRvIGNhcnJ5IHRoZW0gaW50byBlZmZlY3QsIG9yIHRvCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCBhbiBlbWJhc3N5IGRpbGlnZW50bHkgYW5kIGhvbmVzdGx5OiBhbmQgdGhlcmVmb3JlIEkgdG9vayBteSBwbGFjZSBpbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGZpZWxkIG9mIGFjdGlvbi4gUmVhZCBQaGlsaXAncyBsZXR0ZXJzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxldHRlcnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXJzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.222'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgc3RyYWl0cyBoYWQgbXkgcG9saWN5LCBBZXNjaGluZXMsIHJlZHVjZWQgUGhpbGlwOiBhbmQgc3VjaCB3YXMgdGhlbiB0aGUgbGFuZ3VhZ2UKICAgICAgICAgICAgICAgICAgICB1dHRlcmVkIGJ5IGEgbWFuIHdobyBoYWQgaGl0aGVydG8gbGlmdGVkIGhpcyB2b2ljZSB2YXVudGluZ2x5IGFnYWluc3QgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBBbmQgZm9yIHRoYXQgcmVhc29uIEkgd2FzCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWRseSBkZWNvcmF0ZWQgYnkgdGhlIGNpdGl6ZW5zLiBZb3Ugd2VyZSBwcmVzZW50LCBidXQgc2FpZCBub3RoaW5nIGluCiAgICAgICAgICAgICAgICAgICAgb3Bwb3NpdGlvbjsgYW5kIERpb25kYXMsIHdobyBhcnJhaWduZWQgdGhlIGdyYW50LCBkaWQgbm90IGdldCB0aGUgZmlmdGggcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB2b3Rlcy4gUGxlYXNlIHJlYWQgdGhlIGRlY3JlZXMgd2hpY2ggd2VyZSB0aGVuIGJ5IHRoYXQgYWNxdWl0dGFsIHZhbGlkYXRlZCwKICAgICAgICAgICAgICAgICAgICBhbmQgd2hpY2ggQWVzY2hpbmVzIG5ldmVyIGV2ZW4gYXJyYWlnbmVkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.223'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXNlIGRlY3JlZXMsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZXhoaWJpdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHdvcmRpbmcgYW5kIHBocmFzaW5nIGFzIHRob3NlIHByb3Bvc2VkIGZvcm1lcmx5IGJ5IEFyaXN0b25pY3VzLCBhbmQgbm93IGJ5CiAgICAgICAgICAgICAgICAgICAgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkN0ZXNpcGhvbjwvc3VybmFtZT48L3BlcnNOYW1lPi4gQWVzY2hpbmVzIGRpZCBub3QKICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dGUgdGhlbSBoaW1zZWxmLCBub3IgZGlkIGhlIHN1cHBvcnQgdGhlIGFjY3VzYXRpb24gb2YgdGhlIG1hbiB3aG8gZGlkCiAgICAgICAgICAgICAgICAgICAgYXJyYWlnbiB0aGVtLiBBbmQgeWV0IGlmIHRoZXJlIGlzIGFueSB0cnV0aCBpbiBoaXMgcHJlc2VudCBkZW51bmNpYXRpb24sIGhlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgdGhlbiBoYXZlIHByb3NlY3V0ZWQgRGVtb21lbGVzLCB0aGUgcHJvcG9zZXIsIGFuZCBIeXBlcmVpZGVzLCB3aXRoIG1vcmUKICAgICAgICAgICAgICAgICAgICByZWFzb24gdGhhbiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q3Rlc2lwaG9uPC9zdXJuYW1lPjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5DdGVzaXBob248L3N1cm5hbWU+PC9wZXJzTmFtZT4sIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5DdGVzaXBob248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['18.224'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjQiIHVuaXQ9InNlY3Rpb24iIC8+d2hvIGNhbiByZWZlciB0byB0aGVzZSBwcmVjZWRlbnRzLCB0byB0aGUgZGVjaXNpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgY291cnRzLCB0byB0aGUgb2JzZXJ2YXRpb24gdGhhdCBBZXNjaGluZXMgaGltc2VsZiBkaWQgbm90IHByb3NlY3V0ZQogICAgICAgICAgICAgICAgICAgIHBlcnNvbnMgd2hvIG1hZGUgdGhlIHNhbWUgcHJvcG9zYWxzLCB0byB0aGUgc3RhdHV0b3J5IHByb2hpYml0aW9uIG9mIHJlcGVhdGVkCiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRpb24gaW4gc3VjaCBjYXNlcywgYW5kIHNvIGZvcnRoOyB3aGVyZWFzIGF0IHRoYXQgdGltZSB0aGUgaXNzdWUgd291bGQKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gdHJpZWQgb24gaXRzIG1lcml0cyB3aXRob3V0IHN1Y2ggcHJlc3VtcHRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.225'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjUiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIG90aGVyIGhhbmQsIGF0IHRoYXQgdGltZSwgSSBpbWFnaW5lLCB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdhcyBubyBjaGFuY2Ugb2YgZG9pbmcgd2hhdCBoZSBkb2VzIG5vdywgd2hlbiBvdXQgb2YgYSBsb3Qgb2Ygb2xkIGRhdGVzIGFuZAogICAgICAgICAgICAgICAgICAgIGRlY3JlZXMgaGUgc2VsZWN0cyBmb3Igc2xhbmRlcm91cyBwdXJwb3NlcyBhbnkgdGhhdCBub2JvZHkga25ldyBiZWZvcmVoYW5kIG9yCiAgICAgICAgICAgICAgICAgICAgd291bGQgZXhwZWN0IHRvIGhlYXIgY2l0ZWQgdG9kYXksIHRyYW5zcG9zZXMgZGF0ZXMsIHN1YnN0aXR1dGVzIGZpY3RpdGlvdXMKICAgICAgICAgICAgICAgICAgICByZWFzb25zIGZvciB0aGUgdHJ1ZSByZWFzb25zIG9mIHRyYW5zYWN0aW9ucywgYW5kIHNvIG1ha2VzIGEgc2hvdyBvZiBzcGVha2luZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBwb2ludC4gPC90cmFuc2xhdGlvbj4="
translation['18.226'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCB0cmljayB3YXMgbm90IHBvc3NpYmxlIHRoZW4uCiAgICAgICAgICAgICAgICAgICAgQWxsIHNwZWVjaGVzIG11c3QgaGF2ZSBiZWVuIG1hZGUgb24gYSBiYXNpcyBvZiB0cnV0aCwgd2l0aGluIGEgc2hvcnQgdGltZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmYWN0cywgd2hlbiB0aGUganVyeSBzdGlsbCByZW1lbWJlcmVkIGRldGFpbHMgYW5kIGFsbW9zdCBrbmV3IHRoZW0gYnkgaGVhcnQuCiAgICAgICAgICAgICAgICAgICAgVGhhdCBpcyB3aHksIGFmdGVyIHNoaXJraW5nIGlucXVpcnkgYXQgdGhlIHRpbWUgd2hlbiB0aGUgZXZlbnRzIHdlcmUgcmVjZW50LCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyByZXR1cm5lZCB0byB0aGUgaXNzdWUgdG9kYXksIGV4cGVjdGluZywgSSBzdXBwb3NlLCB0aGF0IHlvdSB3aWxsIGNvbmR1Y3QgYQogICAgICAgICAgICAgICAgICAgIGZvcmVuc2ljIGNvbXBldGl0aW9uIHJhdGhlciB0aGFuIGFuIGlucXVpcnkgaW50byBwb2xpdGljYWwgY29uZHVjdCwgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjaXNpb24gd2lsbCB0dXJuIHVwb24gZGljdGlvbiByYXRoZXIgdGhhbiBzb3VuZCBwb2xpY3kuIDwvdHJhbnNsYXRpb24+"
translation['18.227'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZW4gaGUgcmVzb3J0cyB0bwogICAgICAgICAgICAgICAgICAgIHNvcGhpc3RyeSwgYW5kIHRlbGxzIHlvdSB0aGF0IHlvdSBtdXN0IGlnbm9yZSBhbnkgb3BpbmlvbiBvZiBoaW1zZWxmIGFuZCBtZQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBicm91Z2h0IHdpdGggeW91IGZyb20gaG9tZTsgYW5kIHRoYXQsIGFzLCB3aGVuIHlvdSBjYXN0IHVwIGEgbWFuICcgcwogICAgICAgICAgICAgICAgICAgIGFjY291bnRzLCB0aG91Z2ggeW91IGFudGljaXBhdGUgYSBzdXJwbHVzLCB5b3UgYWNxdWllc2NlIGluIHRoZSByZXN1bHQgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgdG90YWxzIGJhbGFuY2UsIHNvIHlvdSBtdXN0IG5vdyBhY2NlcHQgdGhlIHJlc3VsdCBvZiB0aGUgY2FsY3VsYXRpb24uIEV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZGlzaG9uZXN0IGNvbnRyaXZhbmNlLCB5b3Ugd2lsbCBvYnNlcnZlLCBpcyByb3R0ZW4gdG8gdGhlIGNvcmUuIDwvdHJhbnNsYXRpb24+"
translation['18.228'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjgiIHVuaXQ9InNlY3Rpb24iIC8+QnkgaGlzIGluZ2VuaW91cyBhcG9sb2d1ZSBoZSBoYXMgYWRtaXR0ZWQgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIGFyZSBib3RoIGhlcmUgYXMgYWNrbm93bGVkZ2VkIGFkdm9jYXRlc+KAlEkgb2Ygb3VyIGNvdW50cnksIGhlIG9mCiAgICAgICAgICAgICAgICAgICAgUGhpbGlwOyBmb3IgaWYgc3VjaCBoYWQgbm90IGJlZW4gdGhlIHZpZXcgeW91IHRha2Ugb2YgdXMsIGhlIHdvdWxkIG5vdCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBhdCBwYWlucyB0byBjb252ZXJ0IHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['18.229'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjkiIHVuaXQ9InNlY3Rpb24iIC8+SSBzaGFsbCBwcm92ZQogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZGlmZmljdWx0eSB0aGF0IGhlIGhhcyBubyByaWdodCB0byBhc2sgeW91IHRvIHJldmVyc2UgdGhhdAogICAgICAgICAgICAgICAgICAgIG9waW5pb27igJRub3QgYnkgdXNpbmcgY291bnRlcnMsIGZvciBwb2xpdGljYWwgbWVhc3VyZXMgYXJlIG5vdCB0byBiZQogICAgICAgICAgICAgICAgICAgIGFkZGVkIHVwIGluIHRoYXQgZmFzaGlvbiwgYnV0IGJ5IHJlbWluZGluZyB5b3UgYnJpZWZseSBvZiB0aGUgc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9ucywgYW5kIGFwcGVhbGluZyB0byB5b3Ugd2hvIGhlYXIgbWUgYXMgYm90aCB0aGUgd2l0bmVzc2VzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBhdWRpdG9ycyBvZiBteSBhY2NvdW50LiBXZSBvd2UgaXQgdG8gdGhhdCBwb2xpY3kgb2YgbWluZSB3aGljaCBoZSBkZW5vdW5jZXMKICAgICAgICAgICAgICAgICAgICB0aGF0LCBpbnN0ZWFkIG9mIHRoZSBUaGViYW5zIGpvaW5pbmcgUGhpbGlwIGluIGFuIGludmFzaW9uIG9mIG91ciBjb3VudHJ5LCBhcwogICAgICAgICAgICAgICAgICAgIGV2ZXJ5b25lIGV4cGVjdGVkLCB0aGV5IGZvdWdodCBieSBvdXIgc2lkZSBhbmQgc3RvcHBlZCBoaW07IDwvdHJhbnNsYXRpb24+"
translation['18.230'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzAiIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCwgaW5zdGVhZCBvZiB0aGUgc2VhdCBvZiB3YXIgYmVpbmcgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LCBpdCB3YXMgc2V2ZW4gaHVuZHJlZCBmdXJsb25ncyBhd2F5IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhciBzaWRlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT47IHRoYXQsIGluc3RlYWQKICAgICAgICAgICAgICAgICAgICBvZiBwcml2YXRlZXJzIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGhhcnJ5aW5nIHVzLAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4gd2FzIGF0IHBlYWNlIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHNlYS1mcm9udGllciB0aHJvdWdob3V0IHRoZSB3YXI7IGFuZCB0aGF0LCBpbnN0ZWFkIG9mIFBoaWxpcCB0YWtpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+IGFuZCBob2xkaW5nIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+LCB0aGUgQnl6YW50aW5lcyBmb3VnaHQgb24gb3VyIHNpZGUKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['18.231'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzEiIHVuaXQ9InNlY3Rpb24iIC8+RG8geW91IHNlZSBhbnkgcmVzZW1ibGFuY2UKICAgICAgICAgICAgICAgICAgICBiZXR3ZWVuIHRoaXMgY29tcHV0YXRpb24gb2YgcmVzdWx0cyBhbmQgeW91ciBjYXN0aW5nIHVwIG9mIGNvdW50ZXJzPyBBcmUgd2UgdG8KICAgICAgICAgICAgICAgICAgICBjYW5jZWwgdGhlIGdhaW5zIHRvIGJhbGFuY2UgdGhlIGxvc3Nlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFwaG9ycyBoZXJlIGFyZSB0YWtlbiBmcm9tIGNhbGN1bGF0aW9ucyBvbiB0aGUgYWJhY3VzLCB3aGVyZSBzdWJ0cmFjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBvZiBjb3VudGVycyBmcm9tIG9uZSBzaWRlIG9mIHRoZSBib2FyZCB3b3VsZCBzZXJ2ZSBpbnN0ZWFkIG9mIGFkZGl0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlci4gSW5zdGVhZCBvZiBzaG93aW5nIHRoZSBnYWlucyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gc2lkZSBieSBzaWRlIHdpdGggaGVyIGxvc3NlcywgQWVzY2hpbmVzIHdvdWxkIHJlY29yZAogICAgICAgICAgICAgICAgICAgICAgICBvbmx5IHRoZSBhZHZlcnNlIGJhbGFuY2UuPC9ub3RlPiBpbnN0ZWFkIG9mIHByb3ZpZGluZyB0aGF0IHRoZXkgc2hhbGwgbmV2ZXIKICAgICAgICAgICAgICAgICAgICBiZSBmb3Jnb3R0ZW4/IEkgbmVlZCBub3QgYWRkIHRoYXQgb3RoZXIgbmF0aW9ucyBoYXZlIGhhZCBleHBlcmllbmNlIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBjcnVlbHR5IHdoaWNoIGlzIGFsd2F5cyBvYnNlcnZhYmxlIHdoZW5ldmVyIFBoaWxpcCBoYXMgZ290IHBlb3BsZSB1bmRlciBoaXMKICAgICAgICAgICAgICAgICAgICBoZWVsLCB3aGVyZWFzIHlvdSBoYXZlIGJlZW4gbHVja3kgZW5vdWdoIHRvIGVuam95IHRoZSBmcnVpdHMgb2YgdGhhdCBmYWN0aXRpb3VzCiAgICAgICAgICAgICAgICAgICAgaHVtYW5pdHkgaW4gd2hpY2ggaGUgY2xvdGhlZCBoaW1zZWxmIHdpdGggYW4gZXllIHRvIHRoZSBmdXR1cmUuIEJ1dCBJIHBhc3MgdGhhdAogICAgICAgICAgICAgICAgICAgIGJ5LiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gc2lkZSBieSBzaWRlIHdpdGggaGVyIGxvc3NlcywgQWVzY2hpbmVzIHdvdWxkIHJlY29yZAogICAgICAgICAgICAgICAgICAgICAgICBvbmx5IHRoZSBhZHZlcnNlIGJhbGFuY2UuPC90cmFuc2xhdGlvbj4="
translation['18.232'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgd2lsbCBub3QKICAgICAgICAgICAgICAgICAgICBzaHJpbmsgZnJvbSBvYnNlcnZpbmcgdGhhdCBhbnkgbWFuIHdobyB3aXNoZWQgdG8gYnJpbmcgYW4gb3JhdG9yIHRvIHRoZSBwcm9vZgogICAgICAgICAgICAgICAgICAgIGhvbmVzdGx5LCBhbmQgbm90IG1lcmVseSB0byBzbGFuZGVyIGhpbSwgd291bGQgbmV2ZXIgaGF2ZSBsYWlkIHN1Y2ggY2hhcmdlcyBhcwogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIGFsbGVnZWQsIGludmVudGluZyBhbmFsb2dpZXMsIGFuZCBtaW1pY2tpbmcgbXkgZGljdGlvbiBhbmQgZ2VzdHVyZXMuCiAgICAgICAgICAgICAgICAgICAgVGhlIGZhdGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBmb3Jzb290aCwgZGVwZW5kZWQKICAgICAgICAgICAgICAgICAgICBvbiB3aGV0aGVyIEkgdXNlZCB0aGlzIHdvcmQgb3IgdGhhdCwgb3IgbW92ZWQgbXkgaGFuZCB0aGlzIHdheSBvciB0aGF0IHdheSEKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.233'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzMiIHVuaXQ9InNlY3Rpb24iIC8+Tm87IGhlIHdvdWxkIGhhdmUgY29uc2lkZXJlZCwgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbGlnaHQgb2YgYWN0dWFsIGZhY3RzLCB0aGUgbWVhbnMgYW5kIHJlc291cmNlcyBwb3NzZXNzZWQgYnkgdGhlIGNpdHkgd2hlbiBJCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZCBvbiBhZG1pbmlzdHJhdGlvbiwgYW5kIHRob3NlIGFjY3VtdWxhdGVkIGJ5IG1lIHdoZW4gYXQgdGhlIGhlYWQgb2YKICAgICAgICAgICAgICAgICAgICBhZmZhaXJzOyBhbmQgYWxzbyB0aGUgY29uZGl0aW9uIG9mIG91ciBhZHZlcnNhcmllcy4gSWYgSSBoYWQgaW1wYWlyZWQgb3VyCiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzLCBoZSB3b3VsZCBoYXZlIHByb3ZlZCB0aGF0IHRoZSBmYXVsdCBsYXkgYXQgbXkgZG9vcjogaWYgSSBoYWQgZ3JlYXRseQogICAgICAgICAgICAgICAgICAgIGluY3JlYXNlZCB0aGVtLCBoZSB3b3VsZCBoYXZlIHNwYXJlZCBoaXMgc2xhbmRlcnMuIEFzIHlvdSBhdm9pZGVkIHRoaXMgdGVzdCwgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgYXBwbHkgaXQ7IGFuZCB0aGUganVyeSB3aWxsIHNlZSB3aGV0aGVyIEkgc3RhdGUgdGhlIGNhc2UgZmFpcmx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.234'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZvciByZXNvdXJjZXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdHkgcG9zc2Vzc2VkIHRoZSBpc2xhbmRlcnPigJRidXQgbm90IGFsbCwgb25seSB0aGUgd2Vha2VzdCwgZm9yCiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjcwIj5DaGlvczwvcGxhY2VOYW1lPiwgbm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMjY2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEyNjYiPlJob2RlczwvcGxhY2VOYW1lPiwgbm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwODg2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA4ODYiPkNvcmN5cmE8L3BsYWNlTmFtZT4gd2FzIG9uIG91ciBzaWRlOyBhIHN1YnNpZHkgb2YgZm9ydHktZml2ZSB0YWxlbnRzLCBhbGwKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgaW4gYWR2YW5jZTsgYW5kIG5vdCBhIHNpbmdsZSBwcml2YXRlIG9yIHRyb29wZXIgYXBhcnQgZnJvbSBvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgYXJteS4gQnV0IHdoYXQgd2FzIG1vc3QgYWxhcm1pbmcgdG8gdXMsIGFuZCBhZHZhbnRhZ2VvdXMgdG8gdGhlIGVuZW15LCBBZXNjaGluZXMKICAgICAgICAgICAgICAgICAgICBhbmQgaGlzIHBhcnR5IGhhZCBtYWRlIGFsbCBvdXIgbmVpZ2hib3JzLCBNZWdhcmlhbnMsIFRoZWJhbnMsIGFuZCBFdWJvZWFucywgbW9yZQogICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VkIHRvIGVubWl0eSB0aGFuIHRvIGZyaWVuZHNoaXAuIDwvdHJhbnNsYXRpb24+"
translation['18.235'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzUiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaAogICAgICAgICAgICAgICAgICAgIHdlcmUgdGhlIG1lYW5zIG9mIHRoZSBjaXR5OiBhbmQgSSBkZWZ5IGFueW9uZSB0byBuYW1lIGFueXRoaW5nIGVsc2UuIE5vdwogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIHRob3NlIG9mIG91ciBhbnRhZ29uaXN0IFBoaWxpcC4gSW4gdGhlIGZpcnN0IHBsYWNlLCBoZSB3YXMgdGhlIGRlc3BvdGljCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVyIG9mIGhpcyBhZGhlcmVudHM6IGFuZCBpbiB3YXIgdGhhdCBpcyB0aGUgbW9zdCBpbXBvcnRhbnQgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlcy4gU2Vjb25kbHksIHRoZXkgaGFkIHRoZWlyIHdlYXBvbnMgY29uc3RhbnRseSBpbiB0aGVpciBoYW5kcy4gVGhlbiBoZQogICAgICAgICAgICAgICAgICAgIHdhcyB3ZWxsIHByb3ZpZGVkIHdpdGggbW9uZXk6IGhlIGRpZCB3aGF0ZXZlciBoZSBjaG9zZSwgd2l0aG91dCBnaXZpbmcgbm90aWNlIGJ5CiAgICAgICAgICAgICAgICAgICAgcHVibGlzaGluZyBkZWNyZWVzLCBvciBkZWxpYmVyYXRpbmcgaW4gcHVibGljLCB3aXRob3V0IGZlYXIgb2YgcHJvc2VjdXRpb24gYnkKICAgICAgICAgICAgICAgICAgICBpbmZvcm1lcnMgb3IgaW5kaWN0bWVudCBmb3IgaWxsZWdhbCBtZWFzdXJlcy4gSGUgd2FzIHJlc3BvbnNpYmxlIHRvIG5vYm9keTogaGUKICAgICAgICAgICAgICAgICAgICB3YXMgdGhlIGFic29sdXRlIGF1dG9jcmF0LCBjb21tYW5kZXIsIGFuZCBtYXN0ZXIgb2YgZXZlcnlib2R5IGFuZCBldmVyeXRoaW5nLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.236'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIEksIGhpcyBjaG9zZW4gYWR2ZXJzYXJ54oCUaXQKICAgICAgICAgICAgICAgICAgICBpcyBhIGZhaXIgaW5xdWlyeeKAlG9mIHdoYXQgd2FzIEkgbWFzdGVyPyBPZiBub3RoaW5nIGF0IGFsbCEgUHVibGljCiAgICAgICAgICAgICAgICAgICAgc3BlYWtpbmcgd2FzIG15IG9ubHkgcHJpdmlsZWdlOiBhbmQgdGhhdCB5b3UgcGVybWl0dGVkIHRvIFBoaWxpcCdzIGhpcmVkCiAgICAgICAgICAgICAgICAgICAgc2VydmFudHMgb24gdGhlIHNhbWUgdGVybXMgYXMgdG8gbWUuIFdoZW5ldmVyIHRoZXkgaGFkIHRoZSBhZHZhbnRhZ2Ugb2YKICAgICAgICAgICAgICAgICAgICBtZeKAlGFuZCBmb3Igb25lIHJlYXNvbiBvciBhbm90aGVyIHRoYXQgb2Z0ZW4gaGFwcGVuZWTigJR5b3UKICAgICAgICAgICAgICAgICAgICBsYWlkIHlvdXIgcGxhbnMgZm9yIHRoZSBlbmVteSdzIGJlbmVmaXQsIGFuZCB3ZW50IHlvdXIgd2F5cy4gPC90cmFuc2xhdGlvbj4="
translation['18.237'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzciIHVuaXQ9InNlY3Rpb24iIC8+SW4gc3BpdGUgb2YgYWxsIHRoZXNlIGRyYXdiYWNrcywgSSBtYWRlIGFsbGlhbmNlIGZvcgogICAgICAgICAgICAgICAgICAgIHlvdSB3aXRoIEV1Ym9lYW5zLCBBY2hhZWFucywgQ29yaW50aGlhbnMsIFRoZWJhbnMsIE1lZ2FyaWFucywgTGV1Y2FkaWFucywgYW5kCiAgICAgICAgICAgICAgICAgICAgQ29yY3lyYWVhbnM6IGFuZCBmcm9tIHRob3NlIHN0YXRlcyB0aGVyZSB3YXMgYXNzZW1ibGVkIGEgZm9yZWlnbiBkaXZpc2lvbiBvZgogICAgICAgICAgICAgICAgICAgIGZpZnRlZW4gdGhvdXNhbmQgaW5mYW50cnkgYW5kIHR3byB0aG91c2FuZCBjYXZhbHJ5LCBub3QgY291bnRpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjaXRpemVuLXNvbGRpZXJ5LiBJIGFsc28gb2J0YWluZWQgZnJvbSB0aGVtIGluIG1vbmV5IHRoZSBsYXJnZXN0IHN1YnNpZHkgSQogICAgICAgICAgICAgICAgICAgIGNvdWxkLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.238'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzgiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB5b3UgdGFsayBhYm91dCBmYWlyIHRlcm1zIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgVGhlYmFucywgQWVzY2hpbmVzLCBvciB3aXRoIHRoZSBCeXphbnRpbmVzIGFuZCB0aGUgRXVib2VhbnMsIGFuZCByYWlzZSBhdAogICAgICAgICAgICAgICAgICAgIHRoaXMgdGltZSBvZiBkYXkgdGhlIHF1ZXN0aW9uIG9mIGVxdWFsIGNvbnRyaWJ1dGlvbnMsIGluIHRoZSBmaXJzdCBwbGFjZSwgeW91CiAgICAgICAgICAgICAgICAgICAgbXVzdCBiZSB1bmF3YXJlIHRoYXQgb2YgdGhhdCBmYW1vdXMgZmxlZXQgb2YgdGhyZWUgaHVuZHJlZCBnYWxsZXlzIHRoYXQgZm91Z2h0CiAgICAgICAgICAgICAgICAgICAgZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj50aGF0IGZvdWdodCBmb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+OgogICAgICAgICAgICAgICAgICAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzQwIj5TYWxhbWlzPC9wbGFjZU5hbWU+LCA8ZGF0ZSBhdXRobmFtZT0iLTQ4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTQ4MCI+NDgwPC9kYXRlPiBCLkMuPC9ub3RlPiBpbiBmb3JtZXIgZGF5cywgb3VyIGNpdHkgc3VwcGxpZWQgdHdvIGh1bmRyZWQ7CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgc2hlIGRpZCBub3Qgc2hvdyBhbnkgc2lnbiBvZiBjb21wbGFpbmluZyB0aGF0IHNoZSB3YXMgdW5mYWlybHkgdHJlYXRlZCwKICAgICAgICAgICAgICAgICAgICBvciBpbXBlYWNoaW5nIHRoZSBzdGF0ZXNtZW4gd2hvc2UgYWR2aWNlIHNoZSB0b29rLCBvciBhaXJpbmcgaGVyCiAgICAgICAgICAgICAgICAgICAgZGlzc2F0aXNmYWN0aW9uLiBUaGF0IHdvdWxkIGhhdmUgYmVlbiBkaXNjcmVkaXRhYmxlIGluZGVlZCEgTm8sIHNoZSBnYXZlIHRoYW5rcwogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBnb2RzIHRoYXQsIHdoZW4gYWxsIHRoZSBHcmVla3MgYWxpa2Ugd2VyZSBlbmNvbXBhc3NlZCBieSBhIGdyZWF0IHBlcmlsLAogICAgICAgICAgICAgICAgICAgIHNoZSBoYWQgY29udHJpYnV0ZWQgdHdpY2UgYXMgbXVjaCBhcyBhbGwgdGhlIHJlc3QgdG8gdGhlIGNvbW1vbiBkZWxpdmVyYW5jZS4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+OgogICAgICAgICAgICAgICAgICAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzQwIj5TYWxhbWlzPC9wbGFjZU5hbWU+LCA8ZGF0ZSBhdXRobmFtZT0iLTQ4MCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTQ4MCI+NDgwPC9kYXRlPiBCLkMuPC90cmFuc2xhdGlvbj4="
translation['18.239'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMzkiIHVuaXQ9InNlY3Rpb24iIC8+U2Vjb25kbHksIHdoZW4geW91IGdydW1ibGUgYXQgbWUsIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBkb2luZyBhbiBpbGwgdHVybiB0byB5b3VyIGZlbGxvdy1jaXRpemVucy4gV2h5IGRvIHlvdSB0ZWxsIHRoZW0gdG9kYXkgd2hhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgb3VnaHQgdG8gaGF2ZSBkb25lIHRoZW4/IFlvdSB3ZXJlIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQgYXQgdGhlIEFzc2VtYmx5OiB3aHkgZGlkIHlvdSBub3Qgb2ZmZXIgeW91cgogICAgICAgICAgICAgICAgICAgIHN1Z2dlc3Rpb25zIGF0IHRoZSB0aW1l4oCUaWYgaW5kZWVkIHRoZXkgY291bGQgcG9zc2libHkgYmUgb2ZmZXJlZAogICAgICAgICAgICAgICAgICAgIGR1cmluZyBhbiBpbW1pbmVudCBjcmlzaXMsIHdoZW4gd2UgaGFkIHRvIGFjY2VwdCwgbm90IGFsbCB0aGF0IHdlIHdhbnRlZCwgYnV0CiAgICAgICAgICAgICAgICAgICAgYWxsIHRoYXQgdGhlIGNvbmRpdGlvbnMgYWxsb3dlZD8gVGhlcmUgd2FzIGEgbWFuIGx5aW5nIGluIHdhaXQgd2hvIHdhcyBiaWRkaW5nCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB1cywgYW5kIHdhcyByZWFkeSB0byB3ZWxjb21lIGFueSBhbGxpZXMgd2UgZHJvdmUgYXdheSwgYW5kIHBheSB0aGVtIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgYmFyZ2Fpbi4gPC90cmFuc2xhdGlvbj4="
translation['18.240'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIEkgYW0gYWNjdXNlZCB0b2RheSBmb3Igd2hhdCB3YXMgYWN0dWFsbHkgZG9uZSwgc3VwcG9zZSB0aGF0LCB3aGlsZSBJIHdhcwogICAgICAgICAgICAgICAgICAgIGhhZ2dsaW5nIG92ZXIgbmljZSBjYWxjdWxhdGlvbnMsIHRoZXNlIGNpdGllcyBoYWQgbWFyY2hlZCBvZmYgYW5kIGpvaW5lZAogICAgICAgICAgICAgICAgICAgIFBoaWxpcOKAlHN1cHBvc2UgaGUgaGFkIGJlY29tZSBzdXplcmFpbiBvIGYgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT7igJQgd2hhdCBkbwogICAgICAgICAgICAgICAgICAgIHlvdSB0aGluayB0aGVzZSB1bnByaW5jaXBsZWQgbWVuIHdvdWxkIGhhdmUgZG9uZSBvciBzYWlkIHRoZW4/IDwvdHJhbnNsYXRpb24+"
translation['18.241'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDEiIHVuaXQ9InNlY3Rpb24iIC8+V291bGQgdGhleSBub3QgaGF2ZSB0b2xkIHlvdSB0aGF0IHdlIGhhZCBtYWRlIFBoaWxpcAogICAgICAgICAgICAgICAgICAgIGEgcHJlc2VudCBvZiBvdXIgYWxsaWVzPyBUaGF0IHRoZXkgaGFkIGJlZW4gZHJpdmVuIGF3YXkgd2hlbiB0aGV5IHdhbnRlZCB0byBqb2luCiAgICAgICAgICAgICAgICAgICAgdXM/IFRoYXQgdGhyb3VnaCB0aGUgQnl6YW50aW5lcyBoZSBoYWQgZ2FpbmVkIHRoZSBtYXN0ZXJ5IG9mIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+LCBhbmQgY29udHJvbCBvZiB0aGUgY29ybi1zdXBwbHkgb2YKICAgICAgICAgICAgICAgICAgICBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+PyBUaGF0IGJ5IG1lYW5zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZWJhbnMgQXR0aWNhIGhhZCBiZWNvbWUgdGhlIHNjZW5lIG9mIGEgZGlzdHJlc3Npbmcgd2FyIHdpdGggaGVyIG93biBuZWlnaGJvcnM/CiAgICAgICAgICAgICAgICAgICAgVGhhdCB0aGUgc2VhIGhhZCBiZWNvbWUgdXNlbGVzcyBmb3Igc2hpcHMgYmVjYXVzZSBvZiBwcml2YXRlZXJzIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGZvciB0aGVpciBiYXNlPyBXb3VsZCB0aGV5IG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgbWFkZSBhbGwgdGhvc2UgY29tcGxhaW50cywgYW5kIHBsZW50eSBtb3JlPyA8L3RyYW5zbGF0aW9uPg=="
translation['18.242'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDIiIHVuaXQ9InNlY3Rpb24iIC8+T2gsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoYXQgYSB2aWxlCiAgICAgICAgICAgICAgICAgICAgbW9uc3RlciBpcyB0aGUgY2FsdW1uaWF0b3IsIGdhdGhlcmluZyBtYWxpY2UgZnJvbSBldmVyeXdoZXJlLCBhbHdheXMgYmFja2JpdGluZyEKICAgICAgICAgICAgICAgICAgICBCdXQgdGhpcyBmZWxsb3cgaXMgYnkgdmVyeSBuYXR1cmUgYSBzcGl0ZWZ1bCBhbmltYWwsIGFic29sdXRlbHkgaW5jYXBhYmxlIG9mCiAgICAgICAgICAgICAgICAgICAgaG9uZXN0eSBvciBnZW5lcm9zaXR5OyB0aGlzIG1vbmtleSBvZiBtZWxvZHJhbWEsIHRoaXMgYnVtcGtpbiB0cmFnZWR5LWtpbmcsIHRoaXMKICAgICAgICAgICAgICAgICAgICBwaW5jaGJlY2sgb3JhdG9yISBXaGF0IHVzZSBoYXMgYWxsIHlvdXIgY2xldmVybmVzcyBldmVyIGJlZW4gdG8geW91ciBjb3VudHJ5PwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.243'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDMiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCEgdGFsayBhYm91dCBieWdvbmVzIHRvZGF5PyBJdCBpcyBhcwogICAgICAgICAgICAgICAgICAgIHRob3VnaCBhIHBoeXNpY2lhbiB2aXNpdGluZyBoaXMgcGF0aWVudHMgc2hvdWxkIG5ldmVyIG9wZW4gaGlzIG1vdXRoLCBvciB0ZWxsCiAgICAgICAgICAgICAgICAgICAgdGhlbSBob3cgdG8gZ2V0IHJpZCBvZiB0aGVpciBjb21wbGFpbnQsIHNvIGxvbmcgYXMgdGhleSBhcmUgaWxsOyBidXQsIGFzIHNvb24gYXMKICAgICAgICAgICAgICAgICAgICBvbmUgb2YgdGhlbSBkaWVzLCBhbmQgdGhlIG9ic2VxdWllcyBhcmUgY2VsZWJyYXRlZCwgc2hvdWxkIGZvbGxvdyB0aGUgY29ycHNlIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGdyYXZlLCBhbmQgZGVsaXZlciBoaXMgcHJlc2NyaXB0aW9uIGF0IGxhc3QgZnJvbSB0aGUgdG9tYnN0b25lOgogICAgICAgICAgICAgICAgICAgIOKAnElmIG91ciBkZXBhcnRlZCBmcmllbmQgaGFkIGRvbmUgdGhpcyBvciB0aGF0LCBoZSB3b3VsZCBuZXZlciBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGllZCHigJ0gWW91IGx1bmF0aWMhIHdoYXQgaXMgdGhlIHVzZSBvZiB0YWxraW5nIG5vdz8gPC90cmFuc2xhdGlvbj4="
translation['18.244'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSB3aWxsIGZpbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGV2ZW4gb3VyIGRlZmVhdCwgaWYgdGhpcyByZXByb2JhdGUgbXVzdCBuZWVkcyBleHVsdCBvdmVyIHdoYXQgaGUgb3VnaHQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlcGxvcmVkLCBkaWQgbm90IGZhbGwgdXBvbiB0aGUgY2l0eSB0aHJvdWdoIGFueSBmYXVsdCBvZiBtaW5lLiBNYWtlIHlvdXIKICAgICAgICAgICAgICAgICAgICByZWNrb25pbmcgaW4gdGhpcyB3YXk6IHdoZXJldmVyIEkgd2FzIHNlbnQgYXMgeW91ciByZXByZXNlbnRhdGl2ZSwgSSBjYW1lIGF3YXkKICAgICAgICAgICAgICAgICAgICB1bmRlZmVhdGVkIGJ5IFBoaWxpcCdzIGFtYmFzc2Fkb3LigJRmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzk5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTkiPlRoZXNzYWx5PC9wbGFjZU5hbWU+LCBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1icmFjaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtYnJhY2lhIj5BbWJyYWNpYTwvcGxhY2VOYW1lPiwgZnJvbSB0aGUgSWxseXJpYW5zLCBmcm9tIHRoZSBraW5ncyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4sIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+LCBmcm9tIGV2ZXJ5IG90aGVyIHBsYWNlLCBhbmQKICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+OyBidXQgd2hlcmV2ZXIKICAgICAgICAgICAgICAgICAgICBQaGlsaXAgd2FzIGJlYXRlbiBpbiBkaXBsb21hY3ksIGhlIGF0dGFja2VkIHRoZSBwbGFjZSB3aXRoIGFuIGFybXkgYW5kIGNvbnF1ZXJlZAogICAgICAgICAgICAgICAgICAgIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.245'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZvciB0aG9zZSBkZWZlYXRzLCBBZXNjaGluZXMsIHlvdQogICAgICAgICAgICAgICAgICAgIGNhbGwgbWUgdG8gYWNjb3VudCEgQXJlIHlvdSBub3QgYXNoYW1lZCB0byBqZWVyIGF0IGEgbWFuIGZvciBjb3dhcmRpY2UsIGFuZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgdG8gcmVxdWlyZSB0aGF0IHNhbWUgbWFuIHRvIG92ZXJjb21lIHRoZSB3aG9sZSBwb3dlciBvZiBQaGlsaXAgc2luZ2xlLWhhbmRlZCwKICAgICAgICAgICAgICAgICAgICBhbmQgdG8gZG8gaXQgYnkgbWVyZSB3b3Jkcz8gRm9yIHdoYXQgZWxzZSBoYWQgSSBhdCBteSBkaXNwb3NhbD8gQ2VydGFpbmx5IG5vdAogICAgICAgICAgICAgICAgICAgIHRoZSBwZXJzb25hbCBjb3VyYWdlIG9mIGVhY2ggbWFuLCBub3QgdGhlIGdvb2QgZm9ydHVuZSBvZiB0aGUgdHJvb3BzIGVuZ2FnZWQsCiAgICAgICAgICAgICAgICAgICAgbm90IHRoYXQgZ2VuZXJhbHNoaXAgZm9yIHdoaWNoIHlvdSBhcmUgdW5yZWFzb25hYmxlIGVub3VnaCB0byBob2xkIG1lCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2libGUuIE1ha2UgYXMgc3RyaWN0IGFuIGlucXVpcnkgYXMgeW91IHdpbGwgaW50byBldmVyeXRoaW5nIGZvciB3aGljaCBhbgogICAgICAgICAgICAgICAgICAgIG9yYXRvciBpcyByZXNwb25zaWJsZTsgSSBhc2sgbm8gaW5kdWxnZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['18.246'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGZvciB3aGF0IGlzIGhlIHJlc3BvbnNpYmxlPyBGb3IgZGlzY2VybmluZyB0aGUgdHJlbmQgb2YgZXZlbnRzIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIG91dHNldCwgZm9yIGZvcmVjYXN0aW5nIHJlc3VsdHMsIGZvciB3YXJuaW5nIG90aGVycy4gVGhhdCBJIGhhdmUgYWx3YXlzIGRvbmUuCiAgICAgICAgICAgICAgICAgICAgRnVydGhlciwgaGUgb3VnaHQgdG8gcmVkdWNlIHRvIGEgbWluaW11bSB0aG9zZSBkZWxheXMgYW5kIGhlc2l0YXRpb25zLCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGZpdHMgb2YgaWdub3JhbmNlIGFuZCBxdWFycmVsc29tZW5lc3MsIHdoaWNoIGFyZSB0aGUgbmF0dXJhbCBhbmQgaW5ldml0YWJsZQogICAgICAgICAgICAgICAgICAgIGZhaWxpbmdzIG9mIGFsbCBmcmVlIHN0YXRlcywgYW5kIG9uIHRoZSBvdGhlciBoYW5kIHRvIHByb21vdGUgdW5hbmltaXR5IGFuZAogICAgICAgICAgICAgICAgICAgIGZyaWVuZGxpbmVzcywgYW5kIHdoYXRldmVyIGltcGVscyBhIG1hbiB0byBkbyBoaXMgZHV0eS4gQWxsIHRoYXQgYWxzbyBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBtYWRlIG15IGJ1c2luZXNzOiBhbmQgaGVyZWluIG5vIG1hbiBjYW4gZmluZCBhbnkgZGVsaW5xdWVuY3kgb24gbXkgcGFydC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.247'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDciIHVuaXQ9InNlY3Rpb24iIC8+TGV0IGFueSBtYW4geW91IGxpa2UgYmUgYXNrZWQgYnkgd2hhdAogICAgICAgICAgICAgICAgICAgIG1lYW5zIFBoaWxpcCBhY2hpZXZlZCBtb3N0IG9mIGhpcyBzdWNjZXNzZXM6IHRoZSB1bml2ZXJzYWwgcmVwbHkgd2lsbCBiZSwgYnkgaGlzCiAgICAgICAgICAgICAgICAgICAgYXJteSBhbmQgYnkgYnJpYmluZyBhbmQgY29ycnVwdGluZyBwb2xpdGljaWFucy4gV2VsbCwgSSBoYWQgbm8gY29udHJvbCBvcgogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSBvdmVyIHlvdXIgZm9yY2VzLCBhbmQgdGhlcmVmb3JlIG5vIHF1ZXN0aW9uIG9mIHRoZWlyIHBlcmZvcm1hbmNlcyBjYW4KICAgICAgICAgICAgICAgICAgICB0b3VjaCBtZS4gTW9yZW92ZXIsIGluIHRoZSBtYXR0ZXIgb2YgY29ycnVwdGlvbiBvciBwdXJpdHkgSSBoYXZlIGJlYXRlbiBQaGlsaXAuCiAgICAgICAgICAgICAgICAgICAgSW4gYnJpYmVyeSwganVzdCBhcyB0aGUgcHVyY2hhc2VyIGhhcyB2YW5xdWlzaGVkIHRoZSBzZWxsZXIsIHdoZW5ldmVyIHRoZQogICAgICAgICAgICAgICAgICAgIGJhcmdhaW4gaXMgc3RydWNrLCBzbyB0aGUgbWFuIHdobyByZWZ1c2VzIHRoZSBwcmljZSBhbmQgcmVtYWlucyBpbmNvcnJ1cHRpYmxlCiAgICAgICAgICAgICAgICAgICAgaGFzIHZhbnF1aXNoZWQgdGhlIHB1cmNoYXNlci4gVGhlcmVmb3JlLCBpbiBteSBwZXJzb24sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpcyB1bmRlZmVhdGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.248'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXNlLCBhbmQgc3VjaCBhcwogICAgICAgICAgICAgICAgICAgIHRoZXNlLCB3aXRoIG1hbnkgb3RoZXJzIGFyZSB0aGUgZ3JvdW5kcyBmdXJuaXNoZWQgYnkgbXkgY29uZHVjdCB0byBqdXN0aWZ5IHRoZQogICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsIG9mIHRoZSBkZWZlbmRhbnQuIEkgd2lsbCBub3cgbWVudGlvbiBncm91bmRzIGZ1cm5pc2hlZCBieSBhbGwgb2YgeW91LgogICAgICAgICAgICAgICAgICAgIEltbWVkaWF0ZWx5IGFmdGVyIHRoZSBiYXR0bGUsIGluIHRoZSB2ZXJ5IG1pZHN0IG9mIGRhbmdlciBhbmQgYWxhcm0sIGF0IGEgdGltZQogICAgICAgICAgICAgICAgICAgIHdoZW4gaXQgd291bGQgbm90IGhhdmUgYmVlbiBzdXJwcmlzaW5nIGlmIG1vc3Qgb2YgeW91IGhhZCB0cmVhdGVkIG1lIHVua2luZGx5LAogICAgICAgICAgICAgICAgICAgIHRoZSBwZW9wbGUsIHdpdGggYSBmdWxsIGtub3dsZWRnZSBvZiBhbGwgbXkgZG9pbmdzLCBpbiB0aGUgZmlyc3QgcGxhY2UsIGFkb3B0ZWQKICAgICAgICAgICAgICAgICAgICBieSB2b3RlIG15IHByb3Bvc2FscyBmb3IgdGhlIHNhZmV0eSBvZiB0aGUgY2l0eS4gQWxsIHRob3NlIG1lYXN1cmVzIG9mCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZeKAlHRoZSBkaXNwb3NpdGlvbiBvZiBvdXRwb3N0cywgdGhlIGVudHJlbmNobWVudHMsIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cGVuZGl0dXJlIG9uIHRoZSBmb3J0aWZpY2F0aW9uc+KAlHdlcmUgdGFrZW4gb24gcmVzb2x1dGlvbnMgbW92ZWQgYnkKICAgICAgICAgICAgICAgICAgICBtZS4gSW4gdGhlIHNlY29uZCBwbGFjZSwgdGhleSBhcHBvaW50ZWQgbWUgRm9vZCBDb250cm9sbGVyLCBzZWxlY3RpbmcgbWUgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSBib2R5IG9mIGNpdGl6ZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.249'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNDkiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIG1hZGUgaXQgdGhlaXIgYnVzaW5lc3MgdG8gaW5qdXJlIG1lIGZvcm1lZCBhIGNhYmFsLCBhbmQgc2V0IGluIG1vdGlvbiBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFjaGluZXJ5IG9mIGluZGljdG1lbnRzLCBhdWRpdHMsIGltcGVhY2htZW50cywgYW5kIHRoZSBsaWtl4oCUbm90IGF0CiAgICAgICAgICAgICAgICAgICAgZmlyc3QgYnkgdGhlaXIgb3duIGFnZW5jeSwgYnV0IGVtcGxveWluZyBwZXJzb25zIGJ5IHdob20gdGhleSBpbWFnaW5lZCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd291bGQgYmUgc2NyZWVuZWQuIFlvdSB3aWxsIHJlbWVtYmVyIGhvdywgZHVyaW5nIHRoYXQgZWFybHkgcGVyaW9kLCBJIHdhcyBwdXQgb24KICAgICAgICAgICAgICAgICAgICBteSB0cmlhbCBldmVyeSBkYXk7IGFuZCBob3cgdGhlIHJlY2tsZXNzbmVzcyBvZiBTb3NpY2xlcywgYW5kIHRoZSBzcGl0ZSBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxvY3JhdGVzLCBhbmQgdGhlIGZyZW56eSBvZiBEaW9uZGFzIGFuZCBNZWxhbnR1cywgYW5kIGV2ZXJ5dGhpbmcgZWxzZSwgd2VyZQogICAgICAgICAgICAgICAgICAgIHR1cm5lZCB0byBhY2NvdW50IGJ5IHRoZW0gZm9yIG15IGRldHJpbWVudC4gTmV2ZXJ0aGVsZXNzLCBieSB0aGUgZmF2b3IsIGZpcnN0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGdvZHMsIGFuZCBzZWNvbmRseSBvZiB5b3UgYW5kIHRoZSByZXN0IG9mIHRoZSBBdGhlbmlhbnMsIEkgY2FtZSB0aHJvdWdoCiAgICAgICAgICAgICAgICAgICAgdW5zY2F0aGVkLiBBbmQgc28gSSBkZXNlcnZlZC4gWWVzOyB0aGF0IGlzIHRydWUsIGFuZCB0byB0aGUgY3JlZGl0IG9mIGp1cmllcwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGFkIHRha2VuIHRoZSBvYXRoIGFuZCBnYXZlIGp1ZGdlbWVudCBhY2NvcmRpbmcgdG8gdGhlaXIgb2F0aC4gPC90cmFuc2xhdGlvbj4="
translation['18.250'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTAiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgb24gbXkgaW1wZWFjaG1lbnQsIHlvdSBhY3F1aXR0ZWQgbWUsIGFuZCBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgZ2l2ZSB0aGUgcHJvc2VjdXRvcnMgdGhlIGZpZnRoIHBhcnQgb2YgeW91ciB2b3RlcywgeW91ciB2ZXJkaWN0IGltcGxpZWQKICAgICAgICAgICAgICAgICAgICBhcHByb3ZhbCBvZiBteSBwb2xpY3kuIFdoZW4gSSB3YXMgaW5kaWN0ZWQsIEkgc2F0aXNmaWVkIHlvdSB0aGF0IG15IHByb3Bvc2FscwogICAgICAgICAgICAgICAgICAgIGFuZCBteSBzcGVlY2hlcyBoYWQgYmVlbiBjb25zdGl0dXRpb25hbC4gV2hlbiB5b3UgcHV0IHRoZSBzZWFsIG9uIG15IGFjY291bnRzLAogICAgICAgICAgICAgICAgICAgIHlvdSBmdXJ0aGVyIGFkbWl0dGVkIHRoYXQgSSBoYWQgZG9uZSBteSBidXNpbmVzcyBob25lc3RseSBhbmQgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGNvcnJ1cHRpb24uIFRoYXQgYmVpbmcgc28sIHdoYXQgZGVzY3JpcHRpb24gY291bGQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDE2MTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMTYxMCI+Q3Rlc2lwaG9uPC9wbGFjZU5hbWU+IHByb3Blcmx5IGFuZCBob25lc3RseSBoYXZlIGFwcGxpZWQgdG8gbXkgY29uZHVjdCwKICAgICAgICAgICAgICAgICAgICBvdGhlciB0aGFuIHRoYXQgd2hpY2ggaGUgaGFkIHNlZW4gYXBwbGllZCBieSB0aGUgd2hvbGUgbmF0aW9uIGFuZCBieSBzd29ybgogICAgICAgICAgICAgICAgICAgIGp1cmllcywgYW5kIGNvbmZpcm1lZCBieSB0aGUgdHJ1dGggaW4gdGhlIGV5ZXMgb2YgYWxsIG1lbj8gPC90cmFuc2xhdGlvbj4="
translation['18.251'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFoLCBzYXlzIGhlLCBidXQgbG9vawogICAgICAgICAgICAgICAgICAgIGF0IHRoYXQgZ2xvcmlvdXMgYm9hc3Qgb2YgQ2VwaGFsdXPigJRuZXZlciBvbmNlIGluZGljdGVkISBZZXMsIGdsb3Jpb3VzLAogICAgICAgICAgICAgICAgICAgIGFuZCBhbHNvIGx1Y2t5LiBCdXQgd2h5IHNob3VsZCBhIG1hbiB3aG8gaGFzIGJlZW4gb2Z0ZW4gaW5kaWN0ZWQgYnV0IG5ldmVyCiAgICAgICAgICAgICAgICAgICAgY29udmljdGVkIGJlIHRoZSBtb3JlIGp1c3RseSBvcGVuIHRvIHJlcHJvYWNoPyBIb3dldmVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBzbyBmYXIgYXMgQWVzY2hpbmVzIGlzIGNvbmNlcm5lZCwgSQogICAgICAgICAgICAgICAgICAgIGNhbiByZXBlYXQgdGhhdCBnbG9yaW91cyBib2FzdDogZm9yIGhlIG5ldmVyIGluZGljdGVkIG1lIG9yIHByb3NlY3V0ZWQgbWUgb24KICAgICAgICAgICAgICAgICAgICBpbmRpY3RtZW50OyBhbmQgc28sIGJ5IGhpcyBvd24gYWRtaXNzaW9uLCBJIGFtIG5vIHdvcnNlIGEgY2l0aXplbiB0aGFuIENlcGhhbHVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.252'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkF0IGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgcG9pbnQgaGlzIG1vcm9zZSBhbmQgc3BpdGVmdWwgdGVtcGVyIGlzIGNvbnNwaWN1b3VzLCBhbmQgZXNwZWNpYWxseSBpbiB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgc2FpZCBhYm91dCBmb3J0dW5lLiBBcyBhIGdlbmVyYWwgcmVtYXJrLCBJIG11c3Qgc2F5IHRoYXQgaXQgaXMgYSBzdHVwaWQgdGhpbmcKICAgICAgICAgICAgICAgICAgICBmb3IgYW55IGh1bWFuIGJlaW5nIHRvIHJlcHJvYWNoIGhpcyBicm90aGVyIG1hbiBvbiB0aGUgc2NvcmUgb2YgZm9ydHVuZS4gU2VlaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIG1hbiB3aG8gdGhpbmtzIGhlIGlzIGRvaW5nIHZlcnkgd2VsbCBhbmQgcmVnYXJkcyBoaW1zZWxmIGFzIGhpZ2hseQogICAgICAgICAgICAgICAgICAgIGZvcnR1bmF0ZSwgaXMgbmV2ZXIgY2VydGFpbiB0aGF0IGhpcyBnb29kIGZvcnR1bmUgd2lsbCBsYXN0IHRpbGwgdGhlIGV2ZW5pbmcsCiAgICAgICAgICAgICAgICAgICAgaG93IGNhbiBpdCBiZSByaWdodCB0byBib2FzdCBhYm91dCBpdCwgb3IgdXNlIGl0IHRvIGluc3VsdCBvdGhlciBwZW9wbGU/IEJ1dCwKICAgICAgICAgICAgICAgICAgICBzaW5jZSBBZXNjaGluZXMgaGFzIHRyZWF0ZWQgdGhpcyB0b3BpYywgbGlrZSBtYW55IG90aGVycywgc28gdmFpbmdsb3Jpb3VzbHksIEkKICAgICAgICAgICAgICAgICAgICBiZWcgeW91IHRvIG9ic2VydmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhhdCBteSBkaXNjb3Vyc2Ugb24gZm9ydHVuZSB3aWxsIGJlIG1vcmUgdmVyYWNpb3VzLCBhbmQgbW9yZSBzdWl0YWJsZSB0byBhIG1lcmUKICAgICAgICAgICAgICAgICAgICBtYW4sIHRoYW4gaGlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.253'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTMiIHVuaXQ9InNlY3Rpb24iIC8+SSBhdHRyaWJ1dGUgZ29vZCBmb3J0dW5lIHRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGNpdHksIGFuZCBzbywgSSBvYnNlcnZlLCBkb2VzIHRoZSBvcmFjbGUgb2YgWmV1cyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLERvZG9uYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRG9kb25hIj5Eb2RvbmE8L3BsYWNlTmFtZT47IGJ1dCB0aGUgcHJlc2VudCBmb3J0dW5lIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIG1hbmtpbmQgSSBhY2NvdW50IGdyaWV2b3VzIGFuZCBkaXN0cmVzc2luZy4gSXMgdGhlcmUgYSBtYW4gbGl2aW5nLCBHcmVlayBvcgogICAgICAgICAgICAgICAgICAgIGJhcmJhcmlhbiwgd2hvIGhhcyBub3QgaW4gdGhlc2UgZGF5cyB1bmRlcmdvbmUgbWFueSBldmlscz8gPC90cmFuc2xhdGlvbj4="
translation['18.254'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTQiIHVuaXQ9InNlY3Rpb24iIC8+SSByZWNrb24gaXQgYXMgcGFydCBvZiB0aGUgZ29vZCBmb3J0dW5lIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB0aGF0IHNoZSBoYXMgY2hvc2VuIHRoZQogICAgICAgICAgICAgICAgICAgIG5vYmxlc3QgcG9saWN5LCBhbmQgdGhhdCBzaGUgaXMgYmV0dGVyIG9mZiB0aGFuIHRoZSBHcmVla3Mgd2hvIGV4cGVjdGVkCiAgICAgICAgICAgICAgICAgICAgcHJvc3Blcml0eSBmcm9tIHRoZWlyIGJldHJheWFsIG9mIHVzLiBJZiBzaGUgaGFzIGJlZW4gdW5zdWNjZXNzZnVsLCBpZgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcgaGFzIG5vdCBmYWxsZW4gb3V0IGFzIHdlIGRlc2lyZWQsIEkgcmVnYXJkIHRoYXQgYXMgb3VyIGFwcG9pbnRlZAogICAgICAgICAgICAgICAgICAgIHNoYXJlIGluIHRoZSBnZW5lcmFsIGlsbC1mb3J0dW5lIG9mIG1hbmtpbmQuIDwvdHJhbnNsYXRpb24+"
translation['18.255'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTUiIHVuaXQ9InNlY3Rpb24iIC8+TXkgcGVyc29uYWwgZm9ydHVuZSwgb3IgdGhhdCBvZiBhbnkgbWFuIGFtb25nIHlvdSwgbXVzdCwgSSBpbWFnaW5lLCBiZQogICAgICAgICAgICAgICAgICAgIGVzdGltYXRlZCBpbiB0aGUgbGlnaHQgb2YgaGlzIHByaXZhdGUgY2lyY3Vtc3RhbmNlcy4gVGhhdCBpcyBteSB2aWV3IG9mIGZvcnR1bmU6CiAgICAgICAgICAgICAgICAgICAgYSBqdXN0IGFuZCBjb3JyZWN0IHZpZXcsIGFzIGl0IHNlZW1zIHRvIG1lLCBhbmQsIEkgdGhpbmssIGFsc28gdG8geW91LiBCdXQgaGUKICAgICAgICAgICAgICAgICAgICBkZWNsYXJlcyB0aGF0IGEgcG9vciwgaW5zaWduaWZpY2FudCB0aGluZyBsaWtlIG15IGluZGl2aWR1YWwgZm9ydHVuZSBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIG1vcmUgcG93ZXJmdWwgdGhhbiB0aGUgZ3JlYXQgYW5kIGdvb2QgZm9ydHVuZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIE5vdyBob3cgaXMgdGhhdCBwb3NzaWJsZT8gPC90cmFuc2xhdGlvbj4="
translation['18.256'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmLCBBZXNjaGluZXMsIHlvdSBhcmUgZGV0ZXJtaW5lZCBhdAogICAgICAgICAgICAgICAgICAgIGFsbCBjb3N0cyB0byBpbnZlc3RpZ2F0ZSBteSBmb3J0dW5lLCBjb21wYXJlIGl0IHdpdGggeW91ciBvd247IGFuZCwgc2hvdWxkIHlvdQogICAgICAgICAgICAgICAgICAgIGZpbmQgbWluZSB0byBiZSBiZXR0ZXIgdGhhbiB5b3Vycywgc3RvcCB5b3VyIHZpbGlmaWNhdGlvbi4gQmVnaW4geW91ciBpbnF1aXJ5CiAgICAgICAgICAgICAgICAgICAgdGhlbiBhdCB0aGUgYmVnaW5uaW5nLiBBbmQgSSBiZWcgZWFybmVzdGx5IHRoYXQgbm8gb25lIHdpbGwgYmxhbWUgbWUgZm9yIHdhbnQgb2YKICAgICAgICAgICAgICAgICAgICBnZW5lcm9zaXR5LiBObyBzZW5zaWJsZSBtYW4sIGluIG15IGp1ZGdlbWVudCwgZXZlciB0dXJucyBwb3ZlcnR5IGludG8gYQogICAgICAgICAgICAgICAgICAgIHJlcHJvYWNoLCBvciBwcmlkZXMgaGltc2VsZiBvbiBoYXZpbmcgYmVlbiBudXJ0dXJlZCBpbiBhZmZsdWVuY2UuIEJ1dCBJIGFtCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIGJ5IHRoaXMgdHJvdWJsZXNvbWUgbWFuJ3Mgc2N1cnJpbGl0eSBhbmQgYmFja2JpdGluZyB0byBkZWFsIHdpdGggdGhlc2UKICAgICAgICAgICAgICAgICAgICB0b3BpY3M7IGFuZCBJIHdpbGwgdHJlYXQgdGhlbSB3aXRoIGFzIG11Y2ggbW9kZXN0eSBhcyB0aGUgc3RhdGUgb2YgdGhlIGNhc2UKICAgICAgICAgICAgICAgICAgICBwZXJtaXRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.257'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIG15CiAgICAgICAgICAgICAgICAgICAgYm95aG9vZCwgQWVzY2hpbmVzLCBJIGhhZCB0aGUgYWR2YW50YWdlIG9mIGF0dGVuZGluZyByZXNwZWN0YWJsZSBzY2hvb2xzOiBhbmQgbXkKICAgICAgICAgICAgICAgICAgICBtZWFucyB3ZXJlIHN1ZmZpY2llbnQgZm9yIG9uZSB3aG8gd2FzIG5vdCB0byBiZSBkcml2ZW4gYnkgcG92ZXJ0eSBpbnRvCiAgICAgICAgICAgICAgICAgICAgZGlzcmVwdXRhYmxlIG9jY3VwYXRpb25zLiBXaGVuIEkgaGFkIGNvbWUgb2YgYWdlLCBteSBjaXJjdW1zdGFuY2VzIHdlcmUgaW4KICAgICAgICAgICAgICAgICAgICBhY2NvcmRhbmNlIHdpdGggbXkgdXBicmluZ2luZy4gSSB3YXMgaW4gYSBwb3NpdGlvbiB0byBwcm92aWRlIGEgY2hvcnVzLCB0byBwYXkKICAgICAgICAgICAgICAgICAgICBmb3IgYSB3YXItZ2FsbGV5LCBhbmQgdG8gYmUgYXNzZXNzZWQgdG8gcHJvcGVydHktdGF4LiBJIHJlbm91bmNlZCBubyBob25vciBhYmxlCiAgICAgICAgICAgICAgICAgICAgYW1iaXRpb24gZWl0aGVyIGluIHB1YmxpYyBvciBpbiBwcml2YXRlIGxpZmU6IGFuZCByZW5kZXJlZCBnb29kIHNlcnZpY2UgYm90aCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjb21tb253ZWFsdGggYW5kIHRvIG15IG93biBmcmllbmRzLiBXaGVuIEkgZGVjaWRlZCB0byB0YWtlIHBhcnQgaW4gcHVibGljCiAgICAgICAgICAgICAgICAgICAgYWZmYWlycywgdGhlIHBvbGl0aWNhbCBzZXJ2aWNlcyBJIGNob3NlIHdlcmUgc3VjaCB0aGF0IEkgd2FzIHJlcGVhdGVkbHkKICAgICAgICAgICAgICAgICAgICBkZWNvcmF0ZWQgYm90aCBieSBteSBvd24gY291bnRyeSBhbmQgYnkgbWFueSBvdGhlciBHcmVjaWFuIGNpdGllcyBhbmQgZXZlbiBteQogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMsIHN1Y2ggYXMgeW91LCBuZXZlciB2ZW50dXJlZCB0byBzYXkgdGhhdCBteSBjaG9pY2Ugd2FzIG90aGVyIHRoYW4gaG9ub3IKICAgICAgICAgICAgICAgICAgICBhYmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.258'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTgiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBoYXMgYmVlbiBteSBmb3J0dW5lIHRocm91Z2hvdXQgbXkKICAgICAgICAgICAgICAgICAgICBjYXJlZXIuIEkgY291bGQgdGVsbCB5b3UgbW9yZSwgYnV0IEkgZm9yYmVhciwgZmVhcmluZyB0byB3ZWFyeSB5b3Ugd2l0aCBkZXRhaWxzCiAgICAgICAgICAgICAgICAgICAgaW4gd2hpY2ggSSB0YWtlIHNvbWUgcHJpZGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBkbwogICAgICAgICAgICAgICAgICAgIHlvdeKAlHlvdSB3aG8gYXJlIHNvIHByb3VkIGFuZCBzbyBjb250ZW1wdHVvdXMgb2Ygb3RoZXJz4oCUCiAgICAgICAgICAgICAgICAgICAgY29tcGFyZSB5b3VyIGZvcnR1bmUgd2l0aCBtaW5lLiBJbiB5b3VyIGNoaWxkaG9vZCB5b3Ugd2VyZSByZWFyZWQgaW4gYWJqZWN0CiAgICAgICAgICAgICAgICAgICAgcG92ZXJ0eS4gWW91IGhlbHBlZCB5b3VyIGZhdGhlciBpbiB0aGUgZHJ1ZGdlcnkgb2YgYSBncmFtbWFyLXNjaG9vbCwgZ3JpbmRpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgaW5rLCBzcG9uZ2luZyB0aGUgYmVuY2hlcywgYW5kIHN3ZWVwaW5nIHRoZSBzY2hvb2wtcm9vbSwgaG9sZGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiBvZiBhIG1lbmlhbCwgbm90IG9mIGEgZnJlZS1ib3JuIGJveS4gPC90cmFuc2xhdGlvbj4="
translation['18.259'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNTkiIHVuaXQ9InNlY3Rpb24iIC8+T24gYXJyaXZpbmcgYXQgbWFuaG9vZCB5b3UgYXNzaXN0ZWQgeW91ciBtb3RoZXIgaW4gaGVyIGluaXRpYXRpb25zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pbiBoZXIgaW5pdGlhdGlvbnM6IHNoZSB3YXMgYW4gZXhwZXJ0IGluIEJhY2NoaWMKICAgICAgICAgICAgICAgICAgICAgICAgb3IgU2FiYXppYW4gcml0ZXMgaW1wb3J0ZWQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYxMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjEzIj5QaHJ5Z2lhPC9wbGFjZU5hbWU+Ljwvbm90ZT4gcmVhZGluZyB0aGUgc2VydmljZS1ib29rIHdoaWxlIHNoZQogICAgICAgICAgICAgICAgICAgIHBlcmZvcm1lZCB0aGUgcml0dWFsLCBhbmQgaGVscGluZyBnZW5lcmFsbHkgd2l0aCB0aGUgcGFyYXBoZXJuYWxpYS4gQXQgbmlnaHQgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgeW91ciBkdXR5IHRvIG1peCB0aGUgbGliYXRpb25zLCB0byBjbG90aGUgdGhlIGNhdGVjaHVtZW5zIGluIGZhd24tc2tpbnMsIHRvCiAgICAgICAgICAgICAgICAgICAgd2FzaCB0aGVpciBib2RpZXMsIHRvIHNjb3VyIHRoZW0gd2l0aCB0aGUgbG9hbSBhbmQgdGhlIGJyYW4sIGFuZCwgd2hlbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGx1c3RyYXRpb24gd2FzIGR1bHkgcGVyZm9ybWVkLCB0byBzZXQgdGhlbSBvbiB0aGVpciBsZWdzLCBhbmQgZ2l2ZSBvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGh5bW46PHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYxMyI+UGhyeWdpYTwvcGxhY2VOYW1lPi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGVyZSBJIGxlYXZlIG15IHNpbnMgYmVoaW5kLDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5IZXJlIHRoZSBiZXR0ZXIgd2F5IEkgZmluZDsgYW5kIGl0IHdhcyB5b3VyIHByaWRlIHRoYXQKICAgICAgICAgICAgICAgICAgICBubyBvbmUgZXZlciBlbWl0dGVkIHRoYXQgaG9seSB1bHVsYXRpb24gc28gcG93ZXJmdWxseSBhcyB5b3Vyc2VsZi4gSSBjYW4gd2VsbAogICAgICAgICAgICAgICAgICAgIGJlbGlldmUgaXQhIFdoZW4geW91IGhlYXIgdGhlIHN0ZW50b3JpYW4gdG9uZXMgb2YgdGhlIG9yYXRvciwgY2FuIHlvdSBkb3VidCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIGVqYWN1bGF0aW9ucyBvZiB0aGUgYWNvbHl0ZSB3ZXJlIHNpbXBseSBtYWduaWZpY2VudD8gPC90cmFuc2xhdGlvbj4="
translation['18.260'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjAiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZGF5LXRpbWUgeW91IG1hcnNoYWxsZWQgeW91ciBnYWxsYW50IHRocm9uZyBvZgogICAgICAgICAgICAgICAgICAgIGJhY2NoYW5hbHMgdGhyb3VnaCB0aGUgcHVibGljIHN0cmVldHMsIHRoZWlyIGhlYWRzIGdhcmxhbmRlZCB3aXRoIGZlbm5lbCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGl0ZSBwb3BsYXI7IGFuZCwgYXMgeW91IHdlbnQsIHlvdSBzcXVlZXplZCB0aGUgZmF0LWNoZWVrZWQgc25ha2VzLCBvcgogICAgICAgICAgICAgICAgICAgIGJyYW5kaXNoZWQgdGhlbSBhYm92ZSB5b3VyIGhlYWQsIG5vdyBzaG91dGluZyB5b3VyIEV1b2kgU2Fib2khIG5vdyBmb290aW5nIGl0IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lYXN1cmUgb2YgSHllcyBBdHRlcyEgQXR0ZXMgSHllcyHigJRzYWx1dGVkIGJ5IGFsbCB0aGUgb2xkIHdvbWVuCiAgICAgICAgICAgICAgICAgICAgd2l0aCBzdWNoIHByb3VkIHRpdGxlcyBhcyBNYXN0ZXIgb2YgdGhlIENlcmVtb25pZXMsIEZ1Z2xlbWFuLCBJdnktYmVhcmVyLAogICAgICAgICAgICAgICAgICAgIEZhbi1jYXJyaWVyOyBhbmQgYXQgbGFzdCByZWNlaXZpbmcgeW91ciByZWNvbXBlbnNlIG9mIHRpcHN5LWNha2VzLCBhbmQKICAgICAgICAgICAgICAgICAgICBjcmFja25lbHMsIGFuZCBjdXJyYW50LWJ1bnMuIFdpdGggc3VjaCByZXdhcmRzIHdobyB3b3VsZCBub3QgcmVqb2ljZSBncmVhdGx5LAogICAgICAgICAgICAgICAgICAgIGFuZCBhY2NvdW50IGhpbXNlbGYgdGhlIGZhdm9yaXRlIG9mIGZvcnR1bmU/IDwvdHJhbnNsYXRpb24+"
translation['18.261'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFmdGVyIGdldHRpbmcgeW91cnNlbGYgZW5yb2xsZWQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXIgb2YgeW91ciBwYXJpc2jigJRubyBvbmUga25vd3MgaG93IHlvdSBtYW5hZ2VkIGl0OyBidXQgbGV0IHRoYXQKICAgICAgICAgICAgICAgICAgICBwYXNz4oCUYW55aG93LCB3aGVuIHlvdSB3ZXJlIGVucm9sbGVkLCB5b3UgcHJvbXB0bHkgY2hvc2UgYSBtb3N0CiAgICAgICAgICAgICAgICAgICAgZ2VudGxlbWFubHkgb2NjdXBhdGlvbiwgdGhhdCBvZiBjbGVyayBhbmQgZXJyYW5kLWJveSB0byBtaW5vciBvZmZpY2lhbHMuIEFmdGVyCiAgICAgICAgICAgICAgICAgICAgY29tbWl0dGluZyBhbGwgdGhlIG9mZmVuY2VzIHdpdGggd2hpY2ggeW91IG5vdyByZXByb2FjaCBvdGhlciBwZW9wbGUsIHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcmVsaWV2ZWQgb2YgdGhhdCBlbXBsb3ltZW50OyBhbmQgSSBtdXN0IHNheSB0aGF0IHlvdXIgc3Vic2VxdWVudCBjb25kdWN0IGRpZCBubwogICAgICAgICAgICAgICAgICAgIGRpc2NyZWRpdCB0byB5b3VyIGVhcmxpZXIgY2FyZWVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.262'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjIiIHVuaXQ9InNlY3Rpb24iIC8+WW91IGVudGVyZWQKICAgICAgICAgICAgICAgICAgICB0aGUgc2VydmljZSBvZiB0aG9zZSBmYW1vdXMgcGxheWVycyBTaW15bHVzIGFuZCBTb2NyYXRlcywgYmV0dGVyIGtub3duIGFzIHRoZQogICAgICAgICAgICAgICAgICAgIEdyb3dsZXJzLiBZb3UgcGxheWVkIHNtYWxsIHBhcnRzIHRvIHRoZWlyIGxlYWQsIHBpY2tpbmcgdXAgZmlncyBhbmQgZ3JhcGVzIGFuZAogICAgICAgICAgICAgICAgICAgIG9saXZlcywgbGlrZSBhbiBvcmNoYXJkLXJvYmJpbmcgY29zdGVybW9uZ2VyLCBhbmQgbWFraW5nIGEgYmV0dGVyIGxpdmluZyBvdXQgb2YKICAgICAgICAgICAgICAgICAgICB0aG9zZSBtaXNzaWxlcyB0aGFuIGJ5IGFsbCB0aGUgYmF0dGxlcyB0aGF0IHlvdSBmb3VnaHQgZm9yIGRlYXIgbGlmZS4gRm9yIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2FzIG5vIHRydWNlIG9yIGFybWlzdGljZSBpbiB0aGUgd2FyZmFyZSBiZXR3ZWVuIHlvdSBhbmQgeW91ciBhdWRpZW5jZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHlvdXIgY2FzdWFsdGllcyB3ZXJlIHNvIGhlYXZ5LCB0aGF0IG5vIHdvbmRlciB5b3UgdGF1bnQgd2l0aCBjb3dhcmRpY2UgdGhvc2Ugb2YKICAgICAgICAgICAgICAgICAgICB1cyB3aG8gaGF2ZSBubyBleHBlcmllbmNlIG9mIHN1Y2ggZW5nYWdlbWVudHMuIDwvdHJhbnNsYXRpb24+"
translation['18.263'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhvd2V2ZXIsIHBhc3NpbmcgYnkgdGhpbmdzIGZvciB3aGljaCB5b3VyCiAgICAgICAgICAgICAgICAgICAgcG92ZXJ0eSBtYXkgYmUgYmxhbWVkLCBJIHdpbGwgYWRkcmVzcyBteXNlbGYgdG8gYWN0dWFsIGNoYXJnZXMgYWdhaW5zdCB5b3VyIHdheQogICAgICAgICAgICAgICAgICAgIG9mIGxpdmluZy4gV2hlbiBpbiBjb3Vyc2Ugb2YgdGltZSBpdCBvY2N1cnJlZCB0byB5b3UgdG8gZW50ZXIgcHVibGljIGxpZmUsIHlvdQogICAgICAgICAgICAgICAgICAgIGNob3NlIHN1Y2ggYSBsaW5lIG9mIHBvbGl0aWNhbCBhY3Rpb24gdGhhdCwgc28gbG9uZyBhcyB0aGUgY2l0eSBwcm9zcGVyZWQsIHlvdQogICAgICAgICAgICAgICAgICAgIGxpdmVkIHRoZSBsaWZlIG9mIGEgaGFyZSwgaW4gZmVhciBhbmQgdHJlbWJsaW5nIGFuZCBjb25zdGFudCBleHBlY3RhdGlvbiBvZiBhCiAgICAgICAgICAgICAgICAgICAgc291bmQgdGhyYXNoaW5nIGZvciB0aGUgY3JpbWVzIHRoYXQgYnVyZGVuZWQgeW91ciBjb25zY2llbmNlOiBhbHRob3VnaCwgd2hlbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG9uZSBlbHNlIGlzIGluIGRpc3RyZXNzLCB5b3VyIGNvbmZpZGVuY2UgaXMgbWFuaWZlc3QgdG8gYWxsIG1lbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2luY2UgdGhlIGJhdHRsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDczMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzMxIj5DaGFlcm9uZWE8L3BsYWNlTmFtZT4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwNzMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA3MzEiPkNoYWVyb25lYTwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['18.264'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCB0cmVhdG1lbnQgZG9lcyBhIG1hbiwgd2hvIHJlY292ZXJlZCBoaXMKICAgICAgICAgICAgICAgICAgICBoaWdoIHNwaXJpdHMgb24gdGhlIGRlYXRoIG9mIGEgdGhvdXNhbmQgb2YgaGlzIGZlbGxvdy1jaXRpemVucywgZGVzZXJ2ZSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBoYW5kcyBvZiB0aGUgc3Vydml2b3JzPyBJIHNoYWxsIG9taXQgYSBncmVhdCBtYW55IG90aGVyIGZhY3RzIHRoYXQgSSBtaWdodAogICAgICAgICAgICAgICAgICAgIHJlbGF0ZTsgZm9yIEkgZG8gbm90IHRoaW5rIHRoYXQgSSBvdWdodCB0byByZWNvdW50IGdsaWJseSBhbGwgaGlzIGRpc2NyZWRpdGFibGUKICAgICAgICAgICAgICAgICAgICBhbmQgaW5mYW1vdXMgcXVhbGl0aWVzLCBidXQgb25seSBzdWNoIGFzIEkgbWF5IG1lbnRpb24gd2l0aG91dCBkaXNjcmVkaXQgdG8KICAgICAgICAgICAgICAgICAgICBteXNlbGYuIDwvdHJhbnNsYXRpb24+"
translation['18.265'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZAogICAgICAgICAgICAgICAgICAgIG5vdywgQWVzY2hpbmVzLCBJIGJlZyB5b3UgdG8gZXhhbWluZSBpbiBjb250cmFzdCwgcXVpZXRseSBhbmQgd2l0aG91dCBhY3JpbW9ueSwKICAgICAgICAgICAgICAgICAgICB0aGUgaW5jaWRlbnRzIG9mIG91ciByZXNwZWN0aXZlIGNhcmVlcnM6IGFuZCB0aGVuIGFzayB0aGUganVyeSwgbWFuIGJ5IG1hbiwKICAgICAgICAgICAgICAgICAgICB3aGV0aGVyIHRoZXkgd291bGQgY2hvb3NlIGZvciB0aGVtc2VsdmVzIHlvdXIgZm9ydHVuZSBvciBtaW5lLiBZb3Ugd2VyZSBhbgogICAgICAgICAgICAgICAgICAgIHVzaGVyLCBJIGEgcHVwaWw7IHlvdSB3ZXJlIGFuIGFjb2x5dGUsIEkgYSBjYW5kaWRhdGU7IHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY2xlcmstYXQtdGhlLXRhYmxlLCBJIGFkZHJlc3NlZCB0aGUgSG91c2U7IHlvdSB3ZXJlIGEgcGxheWVyLCBJIGEgc3BlY3RhdG9yOyB5b3UKICAgICAgICAgICAgICAgICAgICB3ZXJlIGNhdC1jYWxsZWQsIEkgaGlzc2VkOyB5b3UgaGF2ZSBldmVyIHNlcnZlZCBvdXIgZW5lbWllcywgSSBoYXZlIHNlcnZlZCBteQogICAgICAgICAgICAgICAgICAgIGNvdW50cnkuIDwvdHJhbnNsYXRpb24+"
translation['18.266'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjYiIHVuaXQ9InNlY3Rpb24iIC8+TXVjaCBJIHBhc3MgYnk7IGJ1dCBvbiB0aGlzIHZlcnkKICAgICAgICAgICAgICAgICAgICBkYXksIEkgYW0gb24gcHJvb2YgZm9yIHRoZSBob25vciBvZiBhIGNyb3duLCBhbmQgYWNrbm93bGVkZ2VkIHRvIGJlIGd1aWx0bGVzczsKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBhbHJlYWR5IHRoZSByZXB1dGF0aW9uIG9mIGFuIGluZm9ybWVyLCBhbmQgdGhlIHF1ZXN0aW9uIGF0IGhhemFyZCBmb3IKICAgICAgICAgICAgICAgICAgICB5b3UgaXMsIHdoZXRoZXIgeW91IGFyZSBzdGlsbCB0byBjb250aW51ZSBpbiB0aGF0IHRyYWRlLCBvciBiZSBzdG9wcGVkIGZvciBldmVyCiAgICAgICAgICAgICAgICAgICAgYnkgZ2V0dGluZyBsZXNzIHRoYW4geW91ciBxdW90YSBvZiB2b3Rlcy4gQW5kIHRoYXQgaXMgdGhlIGdvb2QgZm9ydHVuZSBlbmpveWVkCiAgICAgICAgICAgICAgICAgICAgYnkgeW91LCB3aG8gZGVub3VuY2UgdGhlIHNoYWJiaW5lc3Mgb2YgbWluZSEgPC90cmFuc2xhdGlvbj4="
translation['18.267'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCBtZSBub3cgcmVhZCB0byB5b3UgdGhlIHRlc3RpbW9ueSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgc2VydmljZXMgSSBoYXZlIHJlbmRlcmVkLCBhbmQgeW91IHNoYWxsIHJlYWQgZm9yIGNvbXBhcmlzb24gc29tZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBibGFuay12ZXJzZSB5b3UgdXNlZCB0byBtYWtlIHN1Y2ggYSBoYXNoIG9mOjxjaXQgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0idmVyc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9InUiPkZyb20gZ2F0ZXMgb2YgZ2xvb20gYW5kIGR3ZWxsaW5ncyBvZiB0aGUgZGVhZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBIZWMuIDEiIHZhbGlkPSJ5ZXMiPkV1ci4gSGVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTwvYmlibD4uIFRoZSBvdGhlciBxdW90YXRpb25zIGFyZSB1bmtub3duLjwvbm90ZT48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkV1ci4gSGVjLiAxPC9iaWJsPgogICAgICAgICAgICAgICAgICAgIDwvY2l0PiBvciwgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0idmVyc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9InUiPkZyb20gZ2F0ZXMgb2YgZ2xvb20gYW5kIGR3ZWxsaW5ncyBvZiB0aGUgZGVhZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBIZWMuIDEiIHZhbGlkPSJ5ZXMiPkV1ci4gSGVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTwvYmlibD4uIFRoZSBvdGhlciBxdW90YXRpb25zIGFyZSB1bmtub3duLjwvbm90ZT48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJ1Ij5Gcm9tIGdhdGVzIG9mIGdsb29tIGFuZCBkd2VsbGluZ3Mgb2YgdGhlIGRlYWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkV1ci4gSGVjLiAxIiB2YWxpZD0ieWVzIj5FdXIuIEhlYy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE8L2JpYmw+LiBUaGUgb3RoZXIgcXVvdGF0aW9ucyBhcmUgdW5rbm93bi48L25vdGU+PC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBIZWMuIDEiIHZhbGlkPSJ5ZXMiPkV1ci4gSGVjLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTwvYmlibD4uIFRoZSBvdGhlciBxdW90YXRpb25zIGFyZSB1bmtub3duLjwvbm90ZT48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIEhlYy4gMSIgdmFsaWQ9InllcyI+RXVyLiBIZWMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxPC9iaWJsPi4gVGhlIG90aGVyIHF1b3RhdGlvbnMgYXJlIHVua25vd24uPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+RXVyLiBIZWMuIDE8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgPGNpdCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJ2ZXJzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iIG1ldD0idSI+VGlkaW5ncyBvZiB3b2Ugd2l0aCBoZWF2eSBoZWFydCBJIGJlYXIsPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5Vbmtub3duPC9iaWJsPgogICAgICAgICAgICAgICAgICAgIDwvY2l0PiBvciwgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0idmVyc2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9InUiPlRpZGluZ3Mgb2Ygd29lIHdpdGggaGVhdnkgaGVhcnQgSSBiZWFyLDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9InUiPlRpZGluZ3Mgb2Ygd29lIHdpdGggaGVhdnkgaGVhcnQgSSBiZWFyLDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+VW5rbm93bjwvYmlibD4KICAgICAgICAgICAgICAgICAgICA8Y2l0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJ1Ij5PaCBjcnVlbCwgY3J1ZWwgZmF0ZSE8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPlVua25vd248L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgPC9jaXQ+U3VjaCBhIGZhdGUgbWF5IHRoZSBnb2RzIGZpcnN0LCBhbmQgdGhlIGp1cnkgYWZ0ZXJ3YXJkcywgYWxsb3QgdG8KICAgICAgICAgICAgICAgICAgICB5b3XigJRmb3IgeW91ciBjaXRpemVuc2hpcCBpcyBhcyB3b3J0aGxlc3MgYXMgeW91ciBtdW1tZXJ5LiBSZWFkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJ2ZXJzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iIG1ldD0idSI+T2ggY3J1ZWwsIGNydWVsIGZhdGUhPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iIG1ldD0idSI+T2ggY3J1ZWwsIGNydWVsIGZhdGUhPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5Vbmtub3duPC9iaWJsPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.268'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN1Y2ggaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBteSBjaGFyYWN0ZXIgaW4gcHVibGljIGxpZmUuIEluIHByaXZhdGUgbGlmZSwgaWYgYW55IG9mIHlvdSBhcmUgbm90IGF3YXJlIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBnZW5lcm91cyBhbmQgY291cnRlb3VzLCBhbmQgaGVscGZ1bCB0byB0aGUgZGlzdHJlc3NlZCwgSSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBtZW50aW9uIGl0LiBJIHdpbGwgbmV2ZXIgc2F5IGEgd29yZCwgb3IgdGVuZGVyIGFueSBldmlkZW5jZSBhYm91dCBzdWNoIG1hdHRlcnMKICAgICAgICAgICAgICAgICAgICBhcyB0aGUgY2FwdGl2ZXMgSSBoYXZlIHJhbnNvbWVkLCBvciB0aGUgZG93cmllcyBJIGhhdmUgaGVscGVkIHRvIHByb3ZpZGUsIG9yIGFueQogICAgICAgICAgICAgICAgICAgIHN1Y2ggYWN0cyBvZiBjaGFyaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['18.269'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNjkiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgYSBtYXR0ZXIgb2YKICAgICAgICAgICAgICAgICAgICBwcmluY2lwbGUgd2l0aCBtZS4gTXkgdmlldyBpcyB0aGF0IHRoZSByZWNpcGllbnQgb2YgYSBiZW5lZml0IG91Z2h0IHRvIHJlbWVtYmVyCiAgICAgICAgICAgICAgICAgICAgaXQgYWxsIGhpcyBsaWZlLCBidXQgdGhhdCB0aGUgYmVuZWZhY3RvciBvdWdodCB0byBwdXQgaXQgb3V0IG9mIGhpcyBtaW5kIGF0CiAgICAgICAgICAgICAgICAgICAgb25jZSwgaWYgdGhlIG9uZSBpcyB0byBiZWhhdmUgZGVjZW50bHksIGFuZCB0aGUgb3RoZXIgd2l0aCBtYWduYW5pbWl0eS4gVG8KICAgICAgICAgICAgICAgICAgICByZW1pbmQgYSBtYW4gb2YgdGhlIGdvb2QgdHVybnMgeW91IGhhdmUgZG9uZSB0byBoaW0gaXMgdmVyeSBtdWNoIGxpa2UgYQogICAgICAgICAgICAgICAgICAgIHJlcHJvYWNoLiBOb3RoaW5nIHNoYWxsIGluZHVjZSBtZSB0byBkbyBhbnl0aGluZyBvZiB0aGUgc29ydDsgYnV0IHdoYXRldmVyIGJlIG15CiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBpbiB0aGF0IHJlc3BlY3QsIEkgYW0gY29udGVudC4gPC90cmFuc2xhdGlvbj4="
translation['18.270'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgaGF2ZSBmaW5pc2hlZCB3aXRoIHByaXZhdGUgbWF0dGVycywgYnV0IEkKICAgICAgICAgICAgICAgICAgICBoYXZlIHN0aWxsIHNvbWUgdHJpZmxpbmcgcmVtYXJrcyB0byBvZmZlciBvbiBwdWJsaWMgYWZmYWlycy4gSWYgeW91LCBBZXNjaGluZXMsCiAgICAgICAgICAgICAgICAgICAgY2FuIG5hbWUgYW55IGh1bWFuIGJlaW5nLCBHcmVlayBvciBiYXJiYXJpYW4sIG9uIHdob20geW9uZGVyIHN1biBzaGluZXMsIHdobyBoYXMKICAgICAgICAgICAgICAgICAgICBlc2NhcGVkIGFsbCBpbmp1cnkgZnJvbSB0aGUgZG9taW5hdGlvbiwgZmlyc3Qgb2YgUGhpbGlwLCBhbmQgdG9kYXkgb2YgQWxleGFuZGVyLAogICAgICAgICAgICAgICAgICAgIHNvIGJlIGl0OiBJIGdyYW50IHlvdSB0aGF0IG15IGZvcnR1bmXigJQgb3IgbXkgbWlzZm9ydHVuZSwgaWYgeW91IHByZWZlcgogICAgICAgICAgICAgICAgICAgIHRoZSB3b3Jk4oCUaGFzIGJlZW4gdGhlIGNhdXNlIG9mIHRoZSB3aG9sZSB0cm91YmxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.271'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmIG1hbnkgcGVvcGxlLCB3aG8gaGF2ZSBuZXZlciBzZXQgZXllcyBvbiBtZSBvcgogICAgICAgICAgICAgICAgICAgIGhlYXJkIHRoZSBzb3VuZCBvZiBteSB2b2ljZSwgaGF2ZSBiZWVuIGdyaWV2b3VzbHkgYWZmbGljdGVk4oCUSSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBtZWFuIGFzIGluZGl2aWR1YWxzLCBidXQgd2hvbGUgY2l0aWVzIGFuZCBuYXRpb25z4oCUSSBzYXkgaXQgaXMgdmFzdGx5CiAgICAgICAgICAgICAgICAgICAgbW9yZSBob25lc3QgYW5kIGNhbmRpZCB0byBhdHRyaWJ1dGUgdGhlc2UgY2FsYW1pdGllcyB0byB0aGUgY29tbW9uIGZvcnR1bmUgb2YKICAgICAgICAgICAgICAgICAgICBtYW5raW5kLCBvciB0byBzb21lIGRpc3RyZXNzaW5nIGFuZCB1bnRvd2FyZCBjdXJyZW50IG9mIGV2ZW50cy4gPC90cmFuc2xhdGlvbj4="
translation['18.272'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzIiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IHlvdSBkaXNtaXNzIHRob3NlIGNhdXNlcywgYW5kIHB1dCB0aGUgYmxhbWUgdXBvbgogICAgICAgICAgICAgICAgICAgIG1lLCB3aG8gb25seSB0b29rIHBhcnQgaW4gcG9saXRpY3MgYnkgdGhlIHNpZGUgb2YgbXkgZmVsbG93LWNpdGl6ZW5zIGhlcmUsCiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggeW91IG11c3QgYmUgY29uc2Npb3VzIHRoYXQgYSBwYXJ0LCBpZiBub3QgdGhlIHdob2xlLCBvZiB5b3VyIGludmVjdGl2ZQogICAgICAgICAgICAgICAgICAgIGlzIGFkZHJlc3NlZCB0byBhbGwgb2YgdGhlbSwgYW5kIHBhcnRpY3VsYXJseSB0byB5b3Vyc2VsZi4gSWYgSSBoYWQgaGVsZCBzb2xlCiAgICAgICAgICAgICAgICAgICAgYW5kIGRlc3BvdGljIGF1dGhvcml0eSB3aGVuIEkgb2ZmZXJlZCBteSBjb3Vuc2VscywgaXQgd291bGQgaGF2ZSBiZWVuIG9wZW4gdG8KICAgICAgICAgICAgICAgICAgICB5b3Ugb3RoZXIgb3JhdG9ycyB0byBpbmNyaW1pbmF0ZSBtZTogPC90cmFuc2xhdGlvbj4="
translation['18.273'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzMiIHVuaXQ9InNlY3Rpb24iIC8+YnV0CiAgICAgICAgICAgICAgICAgICAgaW5hc211Y2ggYXMgeW91IHdlcmUgcHJlc2VudCBhdCBldmVyeSBhc3NlbWJseSwgYXMgdGhlIHN0YXRlIHByb3Bvc2VkIGEKICAgICAgICAgICAgICAgICAgICBkaXNjdXNzaW9uIG9mIHBvbGljeSBpbiB3aGljaCBldmVyeSBvbmUgbWlnaHQgam9pbiwgYW5kIGFzIG15IG1lYXN1cmVzIHdlcmUKICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZCBhdCB0aGUgdGltZSBieSBldmVyeSBvbmUsIGFuZCBlc3BlY2lhbGx5IGJ5IHlvdSzigJRmb3IgaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgaW4gbm8gZnJpZW5kbHkgc3Bpcml0IHRoYXQgeW91IGFsbG93ZWQgbWUgdG8gZW5qb3kgYWxsIHRoZSBob3BlcyBhbmQgZW50aHVzaWFzbQogICAgICAgICAgICAgICAgICAgIGFuZCBjcmVkaXQgdGhhdCB3ZXJlIGF0dGFjaGVkIHRvIG15IHBvbGljeSwgYnV0IG9idmlvdXNseSBiZWNhdXNlIHRydXRoIHdhcyB0b28KICAgICAgICAgICAgICAgICAgICBzdHJvbmcgZm9yIHlvdSwgYW5kIGJlY2F1c2UgeW91IGhhZCBub3RoaW5nIGJldHRlciB0byBzdWdnZXN04oCUaXQgaXMKICAgICAgICAgICAgICAgICAgICBtb3N0IGluaXF1aXRvdXMgYW5kIG91dHJhZ2VvdXMgdG8gc3RpZ21hdGl6ZSB0b2RheSBtZWFzdXJlcyB3aGljaCBhdCB0aGUgdGltZQogICAgICAgICAgICAgICAgICAgIHlvdSB3ZXJlIHVuYWJsZSB0byBhbWVuZC4gPC90cmFuc2xhdGlvbj4="
translation['18.274'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFtb25nIG90aGVyIHBlb3BsZSBJIGZpbmQgdGhpcyBzb3J0IG9mIGRpc3RpbmN0aW9uCiAgICAgICAgICAgICAgICAgICAgdW5pdmVyc2FsbHkgb2JzZXJ2ZWQu4oCUQSBtYW4gaGFzIHNpbm5lZCB3aWxsZnVsbHk6IGhlIGlzIHZpc2l0ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIHJlc2VudG1lbnQgYW5kIHB1bmlzaG1lbnQuIEhlIGhhcyBlcnJlZCB1bmludGVudGlvbmFsbHk6IHBhcmRvbiB0YWtlcyB0aGUgcGxhY2UKICAgICAgICAgICAgICAgICAgICBvZiBwdW5pc2htZW50LiBTdXBwb3NlIHRoYXQgaGUgaGFzIGNvbW1pdHRlZCBubyBzaW4gb3IgZXJyb3IgYXQgYWxsLCBidXQsIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGRldm90ZWQgaGltc2VsZiB0byBhIHByb2plY3QgYXBwcm92ZWQgYnkgYWxsLCBoYXMsIGluIGNvbW1vbiB3aXRoIGFsbCwgZmFpbGVkIG9mCiAgICAgICAgICAgICAgICAgICAgc3VjY2Vzcy4gSW4gdGhhdCBjYXNlIGhlIGRvZXMgbm90IGRlc2VydmUgcmVwcm9hY2ggb3Igb2Jsb3F1eSwgYnV0IGNvbmRvbGVuY2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.275'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBkaXN0aW5jdGlvbiB3aWxsIGJlIGZvdW5kIG5vdCBvbmx5CiAgICAgICAgICAgICAgICAgICAgZW1ib2RpZWQgaW4gb3VyIHN0YXR1dGVzLCBidXQgbGFpZCBkb3duIGJ5IG5hdHVyZSBoZXJzZWxmIGluIGhlciB1bndyaXR0ZW4gbGF3cwogICAgICAgICAgICAgICAgICAgIGFuZCBpbiB0aGUgbW9yYWwgc2Vuc2Ugb2YgdGhlIGh1bWFuIHJhY2UuIE5vdyBBZXNjaGluZXMgc28gZmFyIHN1cnBhc3NlcyBhbGwKICAgICAgICAgICAgICAgICAgICBtYW5raW5kIGluIHNhdmFnZXJ5IGFuZCBtYWxpZ25pdHkgdGhhdCBoZSB0dXJucyBldmVuIG1pc2FkdmVudHVyZXMsIHdoaWNoIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgY2l0ZWQgYXMgc3VjaCwgaW50byBjcmltZXMgZm9yIHdoaWNoIEkgYW0gdG8gYmUgZGVub3VuY2VkLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.276'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIGNyb3duCiAgICAgICAgICAgICAgICAgICAgYWxs4oCUYXMgdGhvdWdoIGFsbCBoaXMgb3duIHNwZWVjaGVzIGhhZCBiZWVuIG1hZGUgaW4gYSBkaXNpbnRlcmVzdGVkCiAgICAgICAgICAgICAgICAgICAgYW5kIHBhdHJpb3RpYyBzcGlyaXTigJRoZSBiaWRzIHlvdSBiZSBvbiB5b3VyIGd1YXJkIGFnYWluc3QgbWUsIGZvciBmZWFyCiAgICAgICAgICAgICAgICAgICAgSSBzaG91bGQgbWlzbGVhZCBhbmQgZGVjZWl2ZSB5b3UsIGNhbGxpbmcgbWUgYW4gYXJ0ZnVsIHNwZWFrZXIsIGEgbW91bnRlYmFuaywgYW4KICAgICAgICAgICAgICAgICAgICBpbXBvc3RvciwgYW5kIHNvIGZvcnRoLiBIZSBzZWVtcyB0byB0aGluayB0aGF0IGlmIGEgbWFuIGNhbiBvbmx5IGdldCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBibG93IHdpdGggZXBpdGhldHMgdGhhdCBhcmUgcmVhbGx5IGFwcGxpY2FibGUgdG8gaGltc2VsZiwgdGhleSBtdXN0IGJlCiAgICAgICAgICAgICAgICAgICAgdHJ1ZSwgYW5kIHRoZSBhdWRpZW5jZSB3aWxsIG1ha2Ugbm8gcmVmbGVjdGlvbnMgb24gdGhlIGNoYXJhY3RlciBvZiB0aGUgc3BlYWtlci4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.277'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEkgYW0gc3VyZSB5b3UgYWxsIGtub3cgaGltIHdlbGwsIGFuZAogICAgICAgICAgICAgICAgICAgIHdpbGwgcmVnYXJkIHRob3NlIGVwaXRoZXRzIGFzIG1vcmUgYXBwcm9wcmlhdGUgdG8gaGltIHRoYW4gdG8gbWUuIEkgYW0gYWxzbyBzdXJlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBteSBhcnRmdWxuZXNz4oCUd2VsbCwgYmUgaXQgc287IGFsdGhvdWdoIEkgbm90aWNlIHRoYXQgaW4gZ2VuZXJhbAogICAgICAgICAgICAgICAgICAgIGFuIGF1ZGllbmNlIGNvbnRyb2xzIHRoZSBhYmlsaXR5IG9mIGEgc3BlYWtlciwgYW5kIHRoYXQgaGlzIHJlcHV0YXRpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgd2lzZG9tIGRlcGVuZHMgdXBvbiB5b3VyIGFjY2VwdGFuY2UgYW5kIHlvdXIgZGlzY3JpbWluYXRpbmcgZmF2b3IuIEJlIHRoYXQgYXMgaXQKICAgICAgICAgICAgICAgICAgICBtYXksIGlmIEkgZG8gcG9zc2VzcyBhbnkgc2tpbGwgaW4gc3BlYWtpbmcsIHlvdSB3aWxsIGFsbCBmaW5kIHRoYXQgdGhhdCBza2lsbAogICAgICAgICAgICAgICAgICAgIGhhcyBhbHdheXMgYmVlbiBleGVyY2lzZWQgb24gcHVibGljIGNvbmNlcm5zIGFuZCBmb3IgeW91ciBhZHZhbnRhZ2UsIG5ldmVyIG9uCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBvY2Nhc2lvbnMgYW5kIHRvIHlvdXIgZGV0cmltZW50LiBPbiB0aGUgb3RoZXIgaGFuZCB0aGUgYWJpbGl0eSBvZgogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyBpcyBhcHBsaWVkIG5vdCBvbmx5IHRvIHNwZWFraW5nIG9uIGJlaGFsZiBvZiB5b3VyIGVuZW1pZXMsIGJ1dCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBkZXRyaW1lbnQgb2YgYW55b25lIHdobyBoYXMgYW5ub3llZCBvciBxdWFycmVsbGVkIHdpdGggaGltLiBIZSBuZXZlciB1c2VzIGl0CiAgICAgICAgICAgICAgICAgICAgaG9uZXN0bHkgb3IgaW4gdGhlIGludGVyZXN0cyBvZiB0aGUgY29tbW9ud2VhbC4gPC90cmFuc2xhdGlvbj4="
translation['18.278'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzgiIHVuaXQ9InNlY3Rpb24iIC8+Tm8gdXByaWdodCBhbmQgaG9ub3IgYWJsZSBjaXRpemVuIG11c3QgZXZlciBleHBlY3QgYSBqdXJ5CiAgICAgICAgICAgICAgICAgICAgaW1wYW5lbGxlZCBpbiB0aGUgcHVibGljIHNlcnZpY2UgdG8gYm9sc3RlciB1cCBoaXMgb3duIHJlc2VudG1lbnQgb3IgZW5taXR5IG9yCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgcGFzc2lvbnMsIG5vciB3aWxsIGhlIGdvIHRvIGxhdyB0byBncmF0aWZ5IHRoZW0uIElmIHBvc3NpYmxlIGhlIHdpbGwKICAgICAgICAgICAgICAgICAgICBleGNsdWRlIHRoZW0gZnJvbSBoaXMgaGVhcnQ6IGlmIGhlIGNhbm5vdCBlc2NhcGUgdGhlbSwgaGUgd2lsbCBhdCBsZWFzdCBjaGVyaXNoCiAgICAgICAgICAgICAgICAgICAgdGhlbSBjYWxtbHkgYW5kIHNvYmVybHkuIEluIHdoYXQgY2lyY3Vtc3RhbmNlcywgdGhlbiwgb3VnaHQgYSBwb2xpdGljaWFuIG9yIGFuCiAgICAgICAgICAgICAgICAgICAgb3JhdG9yIHRvIGJlIHZlaGVtZW50PyBXaGVuIGFsbCBvdXIgbmF0aW9uYWwgaW50ZXJlc3RzIGFyZSBpbXBlcmlsbGVkOyB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGlzc3VlIGxpZXMgYmV0d2VlbiB0aGUgcGVvcGxlIGFuZCB0aGVpciBhZHZlcnNhcmllcy4gVGhlbiBzdWNoIGlzIHRoZSBwYXJ0IG9mIGEKICAgICAgICAgICAgICAgICAgICBjaGl2YWxyb3VzIGFuZCBwYXRyaW90aWMgY2l0aXplbi4gPC90cmFuc2xhdGlvbj4="
translation['18.279'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNzkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGZvciBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHdobyBuZXZlciBvbmNlIHNvdWdodCB0byBicmluZyBtZSB0byBqdXN0aWNlIGZvciBhbnkgcHVibGljLCBub3IsIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIGFkZCwgZm9yIGFueSBwcml2YXRlIG9mZmVuY2UsIHdoZXRoZXIgZm9yIHRoZSBjaXR5J3Mgc2FrZSBvciBmb3IgaGlzIG93biwgdG8KICAgICAgICAgICAgICAgICAgICBjb21lIGludG8gY291cnQgYXJtZWQgd2l0aCBhIGRlbnVuY2lhdGlvbiBvZiBhIGNyb3duIGFuZCBvZiBhIHZvdGUgb2YgdGhhbmtzLAogICAgICAgICAgICAgICAgICAgIGFuZCB0byBsYXZpc2ggc3VjaCBhIHdlYWx0aCBvZiBlbG9xdWVuY2Ugb24gdGhhdCBwbGVhLCBpcyBhIHN5bXB0b20gb2YgYQogICAgICAgICAgICAgICAgICAgIHBlZXZpc2gsIGplYWxvdXMsIHNtYWxsLW1pbmRlZCwgZ29vZC1mb3Itbm90aGluZyBkaXNwb3NpdGlvbi4gQW5kIHRoZSBleGhpYml0aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIHR1cnBpdHVkZSBpcyBjb21wbGV0ZSB3aGVuIGhlIHJlbGlucXVpc2hlcyBoaXMgY29udHJvdmVyc3kgd2l0aCBtZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlyZWN0cyB0aGUgd2hvbGUgb2YgaGlzIGF0dGFjayB1cG9uIHRoZSBkZWZlbmRhbnQuIDwvdHJhbnNsYXRpb24+"
translation['18.280'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODAiIHVuaXQ9InNlY3Rpb24iIC8+SXQgcmVhbGx5IG1ha2VzIG1lIHRoaW5rLCBBZXNjaGluZXMsIHRoYXQgeW91IGRlbGliZXJhdGVseSB3ZW50IHRvCiAgICAgICAgICAgICAgICAgICAgbGF3LCBub3QgdG8gZ2V0IHNhdGlzZmFjdGlvbiBmb3IgYW55IHRyYW5zZ3Jlc3Npb24sIGJ1dCB0byBtYWtlIGEgZGlzcGxheSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgb3JhdG9yeSBhbmQgeW91ciB2b2NhbCBwb3dlcnMuIEJ1dCBpdCBpcyBub3QgdGhlIGRpY3Rpb24gb2YgYW4gb3JhdG9yLAogICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcywgb3IgdGhlIHZpZ29yIG9mIGhpcyB2b2ljZSB0aGF0IGhhcyBhbnkgdmFsdWU6IGl0IGlzIHN1cHBvcnRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgcG9saWN5IG9mIHRoZSBwZW9wbGUsIGFuZCBoYXZpbmcgdGhlIHNhbWUgZnJpZW5kcyBhbmQgdGhlIHNhbWUgZW5lbWllcyBhcyB5b3VyCiAgICAgICAgICAgICAgICAgICAgY291bnRyeS4gPC90cmFuc2xhdGlvbj4="
translation['18.281'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBzdWNoIGEgZGlzcG9zaXRpb24sIGEgbWFuJ3MKICAgICAgICAgICAgICAgICAgICBzcGVlY2hlcyB3aWxsIGFsd2F5cyBiZSBwYXRyaW90aWM6IGJ1dCB0aGUgbWFuIHdobyBwYXlzIGNvdXJ0IHRvIHRob3NlIGZyb20gd2hvbQogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF0ZSBhcHByZWhlbmRzIGRhbmdlciB0byBoZXJzZWxmLCBpcyBub3QgcmlkaW5nIGF0IHRoZSBzYW1lIGFuY2hvciBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUsIGFuZCB0aGVyZWZvcmUgZG9lcyBub3QgbG9vayB0byB0aGUgc2FtZSBxdWFydGVyIGZvciBoaXMgc2VjdXJpdHkuIEkgZG87CiAgICAgICAgICAgICAgICAgICAgbWFyayB0aGF0ISBNeSBwdXJwb3NlcyBhcmUgbXkgY291bnRyeW1lbidzIHB1cnBvc2VzOyBJIGhhdmUgbm8gcGVjdWxpYXIgb3IKICAgICAgICAgICAgICAgICAgICBwZXJzb25hbCBlbmQgdG8gc2VydmUuIDwvdHJhbnNsYXRpb24+"
translation['18.282'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODIiIHVuaXQ9InNlY3Rpb24iIC8+Q2FuIHlvdSBzYXkgdGhlIHNhbWU/CiAgICAgICAgICAgICAgICAgICAgTm8sIGluZGVlZCEgV2h5LCBpbW1lZGlhdGVseSBhZnRlciB0aGUgYmF0dGxlIHlvdSB3ZW50IG9uIGVtYmFzc3kgdG8gdmlzaXQKICAgICAgICAgICAgICAgICAgICBQaGlsaXAsIHRoZSBhdXRob3Igb2YgYWxsIHRoZSByZWNlbnQgY2FsYW1pdGllcyBvZiB5b3VyIGNvdW50cnksIGFsdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgaGl0aGVydG8geW91IGhhZCBub3RvcmlvdXNseSBkZWNsaW5lZCB0aGF0IGVtcGxveW1lbnQuIEFuZCB3aG8gaXMgdGhlIGRlY2VpdmVyCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGNvdW50cnk/IFN1cmVseSB0aGUgbWFuIHdobyBkb2VzIG5vdCBzYXkgd2hhdCBoZSB0aGlua3MuIEZvciB3aG9tIGRvZXMKICAgICAgICAgICAgICAgICAgICB0aGUgbWFyc2hhbCByZWFkIHRoZSBjb21taW5hdGlvbj8gRm9yIGhpbS4gV2hhdCBncmF2ZXIgY3JpbWUgY2FuIGJlIGNoYXJnZWQgdG8KICAgICAgICAgICAgICAgICAgICBhbiBvcmF0b3IgdGhhbiB0aGF0IGhpcyB0aG91Z2h0cyBhbmQgaGlzIHdvcmRzIGRvIG5vdCB0YWxseT8gSW4gdGhhdCBjcmltZSB5b3UKICAgICAgICAgICAgICAgICAgICB3ZXJlIGRldGVjdGVkOyA8L3RyYW5zbGF0aW9uPg=="
translation['18.283'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHlldCB5b3Ugc3RpbGwgcmFpc2UgeW91cgogICAgICAgICAgICAgICAgICAgIHZvaWNlLCBhbmQgZGFyZSB0byBsb29rIHlvdXIgZmVsbG93IGNpdGl6ZW5zIGluIHRoZSBmYWNlISBEbyB5b3UgaW1hZ2luZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBkbyBub3Qga25vdyB3aG8geW91IGFyZT8gdGhhdCB0aGV5IGFyZSBzdW5rIGluIHN1Y2ggc2x1bWJlciBhbmQgb2JsaXZpb24KICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgZG8gbm90IHJlbWVtYmVyIHRoZSBoYXJhbmd1ZXMgeW91IG1hZGUgd2hpbGUgdGhlIHdhciB3YXMgc3RpbGwgZ29pbmcKICAgICAgICAgICAgICAgICAgICBvbiwgd2hlbiB5b3UgcHJvdGVzdGVkIHdpdGggb2F0aHMgYW5kIGN1cnNlcyB0aGF0IHlvdSBoYWQgbm8gZGVhbGluZ3Mgd2l0aAogICAgICAgICAgICAgICAgICAgIFBoaWxpcOKAlCB0aGF0IEkgaGFkIGxhaWQgdGhhdCBjaGFyZ2UgYWdhaW5zdCB5b3Ugb3V0IG9mIHByaXZhdGUgbWFsaWNlLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IGl0IHdhcyBub3QgdHJ1ZT8gPC90cmFuc2xhdGlvbj4="
translation['18.284'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vIHNvb25lciBoYWQKICAgICAgICAgICAgICAgICAgICB0aGUgbmV3cyBvZiB0aGUgYmF0dGxlIHJlYWNoZWQgdXMgdGhhbiB5b3UgaWdub3JlZCBhbGwgeW91ciBwcm90ZXN0cywgYW5kCiAgICAgICAgICAgICAgICAgICAgY29uZmVzc2VkLCBvciByYXRoZXIgY2xhaW1lZCwgdGhhdCB5b3Ugd2VyZSBQaGlsaXAncyBmcmllbmQgYW5kIFBoaWxpcCdzCiAgICAgICAgICAgICAgICAgICAgZ3Vlc3TigJRhIGV1cGhlbWlzbSBmb3IgUGhpbGlwJ3MgaGlyZWQgc2VydmFudDsgZm9yIHdpdGggd2hhdCBzaG93IG9mCiAgICAgICAgICAgICAgICAgICAgZXF1YWxpdHkgb3IgaG9uZXN0eSBjb3VsZCBQaGlsaXAgcG9zc2libHkgYmUgdGhlIGhvc3Qgb3IgdGhlIGZyaWVuZCBvciBldmVuIHRoZQogICAgICAgICAgICAgICAgICAgIGFjcXVhaW50YW5jZSBvZiBBZXNjaGluZXMsIHNvbiBvZiBHbGF1Y290aGVhIHRoZSB0YW1ib3VyaW5pc3QgPyBJIGNhbm5vdCBzZWU6CiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZSB0cnV0aCBpcywgeW91IHRvb2sgaGlzIHBheSB0byBpbmp1cmUgdGhlIGludGVyZXN0cyBvZiB5b3VyIGNvdW50cnltZW4uCiAgICAgICAgICAgICAgICAgICAgQW5kIHlldCB5b3UsIGEgdHJhaXRvciBwdWJsaWNseSBjb252aWN0ZWQgb24gaW5mb3JtYXRpb24gbGFpZCBieSB5b3Vyc2VsZiBhZnRlcgogICAgICAgICAgICAgICAgICAgIHRoZSBmYWN0LCB2aWxpZnkgYW5kIHJlcHJvYWNoIG1lIGZvciBtaXNmb3J0dW5lcyBmb3Igd2hpY2ggeW91IHdpbGwgZmluZCBJIGFtCiAgICAgICAgICAgICAgICAgICAgbGVzcyByZXNwb25zaWJsZSB0aGFuIGFueSBvdGhlciBtYW4uIDwvdHJhbnNsYXRpb24+"
translation['18.285'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk91ciBjaXR5IG93ZXMgdG8gbWUsIEFlc2NoaW5lcywgYm90aCB0aGUKICAgICAgICAgICAgICAgICAgICBpbmNlcHRpb24gYW5kIHRoZSBzdWNjZXNzIG9mIG1hbnkgZ3JlYXQgYW5kIG5vYmxlIGVudGVycHJpc2VzOyBub3Igd2FzIHNoZQogICAgICAgICAgICAgICAgICAgIHVubWluZGZ1bC4gSXQgaXMgYSBwcm9vZiBvZiBoZXIgZ3JhdGl0dWRlIHRoYXQsIHdoZW4gdGhlIHBlb3BsZSB3YW50ZWQgb25lIHdobwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBzcGVhayBvdmVyIHRoZSBib2RpZXMgb2YgdGhlIHNsYWluLCBzaG9ydGx5IGFmdGVyIHRoZSBiYXR0bGUsIHlvdSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgbm9taW5hdGVkIGJ1dCB0aGV5IGRpZCBub3QgYXBwb2ludCB5b3UsIGluIHNwaXRlIG9mIHlvdXIgYmVhdXRpZnVsIHZvaWNlLCBub3IKICAgICAgICAgICAgICAgICAgICBEZW1hZGVzLCBhbHRob3VnaCBoZSBoYWQgcmVjZW50bHkgYXJyYW5nZWQgdGhlIHBlYWNlLCBub3IgSGVnZW1vbiwgbm9yIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgcGFydHk6IHRoZXkgYXBwb2ludGVkIG1lLiBUaGVuIHlvdSBjYW1lIGZvcndhcmQsIGFuZCBQeXRob2NsZXMgd2l0aAogICAgICAgICAgICAgICAgICAgIHlvdeKAlGFuZCwgZ3JhY2lvdXMgSGVhdmVucyEgaG93IGNvYXJzZWx5IGFuZCBpbXB1ZGVudGx5IHlvdQogICAgICAgICAgICAgICAgICAgIHNwb2tlIeKAlG1ha2luZyB0aGUgdmVyeSBzYW1lIGNoYXJnZXMgdGhhdCB5b3UgaGF2ZSByZXBlYXRlZCB0b2RheTsgYnV0LAogICAgICAgICAgICAgICAgICAgIGZvciBhbGwgeW91ciBzY3VycmlsaXR5LCB0aGV5IGFwcG9pbnRlZCBtZSBuZXZlcnRoZWxlc3MuIDwvdHJhbnNsYXRpb24+"
translation['18.286'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODYiIHVuaXQ9InNlY3Rpb24iIC8+WW91IGtub3cgdmVyeSB3ZWxsIHdoeTsgYnV0IHlvdSBzaGFsbCBoZWFyIHRoZQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBhZ2FpbiBmcm9tIG1lLiBUaGV5IHdlcmUgY29uc2Npb3VzIGJvdGggb2YgdGhlIHBhdHJpb3Rpc20gYW5kIGVuZXJneSB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSBoYWQgY29uZHVjdGVkIHRoZWlyIGJ1c2luZXNzLCBhbmQgYWxzbyBvZiB0aGUgZGlzaG9uZXN0eSBvZiB5b3UgYW5kIHlvdXIKICAgICAgICAgICAgICAgICAgICBmcmllbmRzOyBmb3IsIHdoZW4gdGhlIGNpdHkgaGFkIG1hZGUgYSBmYWxzZSBzdGVwLCB5b3UgaGFkIGFja25vd2xlZGdlZAogICAgICAgICAgICAgICAgICAgIHJlbGF0aW9ucyB3aGljaCB5b3UgaGFkIHN0cmVudW91c2x5IGRlbmllZCBvbiBvYXRoIGluIHRoZSBkYXlzIG9mIHByb3NwZXJpdHkuCiAgICAgICAgICAgICAgICAgICAgVGhleSBjb25jZWl2ZWQgdGhhdCBtZW4gd2hvIGZvdW5kIGltcHVuaXR5IGZvciB0aGVpciBhbWJpdGlvbnMgaW4gb3VyIG5hdGlvbmFsCiAgICAgICAgICAgICAgICAgICAgY2FsYW1pdGllcyBoYWQgbG9uZyBiZWVuIHRoZWlyIHNlY3JldCwgYW5kIHdlcmUgbm93IHRoZWlyIGRlY2xhcmVkLCBlbmVtaWVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.287'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODciIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB0aG91Z2h0IGl0IGJlY29taW5nIHRoYXQgdGhlIG9yYXRvcgogICAgICAgICAgICAgICAgICAgIHdobyBzaG91bGQgc3BlYWsgb3ZlciB0aGUgYm9kaWVzIG9mIHRoZSBzbGFpbiwgYW5kIG1hZ25pZnkgdGhlaXIgcHJvd2Vzcywgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGJlIG9uZSB3aG8gaGFkIHZpc2l0ZWQgdGhlIGhvbWVzIGFuZCBzaGFyZWQgdGhlIGxvdmluZyBjdXAgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcmllczsgdGhhdCB0aGUgbWFuIHdobyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gaGFkIHRha2VuIHBhcnQgd2l0aCB0aGVpciBtdXJkZXJlcnMgaW4gcmV2ZWxzIGFuZAogICAgICAgICAgICAgICAgICAgIHNvbmdzIG9mIGV4dWx0YXRpb24gb3ZlciB0aGUgY2FsYW1pdGllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4sIHNob3VsZCBub3QgYmUgY2hvc2VuIGZvciBoaWdoIGRpc3RpbmN0aW9uIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsgYW5kIHRoYXQgdGhlIGNob3NlbiBzcGVha2VyIHNob3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBsYW1lbnQgdGhlaXIgZmF0ZSB3aXRoIHRoZSBmZWlnbmluZyB2b2ljZSBvZiBhbiBhY3RvciwgYnV0IGV4cHJlc3MgdGhlCiAgICAgICAgICAgICAgICAgICAgbW91cm5pbmcgb2YgaGlzIHZlcnkgc291bC4gU3VjaCBzeW1wYXRoeSB0aGV5IGRpc2Nlcm5lZCBpbiB0aGVtc2VsdmVzLCBhbmQgaW4KICAgICAgICAgICAgICAgICAgICBtZTsgYnV0IG5vdCBpbiB5b3VyIHBhcnR5OyBhbmQgdGhhdCBpcyB3aHkgdGhleSBhcHBvaW50ZWQgbWUsIGFuZCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgYXBwb2ludCB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['18.288'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODgiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNlbnRpbWVudHMgb2YgdGhlIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIHdlcmUgc2hhcmVkIGJ5IHRob3NlIGZhdGhlcnMgYW5kIGJyb3RoZXJzIG9mIHRoZSBkZWFkIHdobyB3ZXJlIGNob3NlbiBieSB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgdG8gY29uZHVjdCB0aGUgb2JzZXF1aWVzLiBJbiBvYmVkaWVuY2UgdG8gdGhlIGN1c3RvbSB0aGF0IHJlcXVpcmVzIHRoZQogICAgICAgICAgICAgICAgICAgIGZ1bmVyYWwgZmVhc3QgdG8gYmUgaGVsZCBpbiB0aGUgaG9tZSBvZiB0aGUgbmVhcmVzdCByZWxhdGl2ZSBvZiB0aGUgZGVhZCwgdGhleQogICAgICAgICAgICAgICAgICAgIG9yZGVyZWQgaXQgdG8gYmUgaGVsZCBhdCBteSBob3VzZTsgYW5kIHdpdGggZ29vZCByZWFzb24uIEVhY2ggaGVybyBoYWQgc29tZQogICAgICAgICAgICAgICAgICAgIGtpbnNtYW4gd2hvIGJ5IHRoZSB0aWVzIG9mIGJsb29kIHN0b29kIG5lYXJlciB0byBoaW1zZWxmLCBidXQgdG8gdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgY29tcGFueSBvZiB0aGUgZmFsbGVuIG5vIG1hbiB3YXMgbmVhcmVyIG9mIGtpbiB0aGFuIEkuIFdoZW4gdGhleSBoYWQgbWV0IHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGVpciB1bnRpbWVseSBmYXRlLCBoZSB3aG8gd2FzIG1vc3QgZGVlcGx5IGNvbmNlcm5lZCBpbiB0aGVpciBzYWZldHkgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcywgY2xhaW1lZCB0aGUgY2hpZWYgc2hhcmUgaW4gbW91cm5pbmcgZm9yIHRoZW0gYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.289'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyODkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgZm9yIGhpcyBiZW5lZml0CiAgICAgICAgICAgICAgICAgICAgdGhlIGVwaXRhcGgsIHdoaWNoIHRoZSBzdGF0ZSByZXNvbHZlZCBieSBwdWJsaWMgdm90ZSB0byBpbnNjcmliZSB1cG9uIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbW9udW1lbnQuIEV2ZW4gZnJvbSB0aGVzZSB2ZXJzZXMsIEFlc2NoaW5lcywgeW91IG1heSBsZWFybiBzb21ldGhpbmcgb2YgeW91ciBvd24KICAgICAgICAgICAgICAgICAgICBjYWxsb3VzbmVzcywgYW5kIG1hbGlnbml0eSwgYW5kIGJydXRhbGl0eS4gUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJ2ZXJzZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJlbGVnaWFjIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXRhcGg8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVyZSBsaWUgdGhlIGJyYXZlLCB3aG8gZm9yIHRoZWlyIGNvdW50cnkncyByaWdodDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5EcmV3IHN3b3JkLCBhbmQgcHV0IHRoJyBpbnN1bHRpbmcgZm9lIHRvIGZsaWdodC48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlaXIgbGl2ZXMgdGhleSBzcGFyZWQgbm90LCBiaWRkaW5nIERlYXRoIGRlY2lkZTwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5XaG8gZmxpbmNoZWQgYW5kIGxpdmVkLCBhbmQgd2hvIHdpdGggY291cmFnZSBkaWVkLjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGV5IGZvdWdodCBhbmQgZmVsbCB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlnaHQgc3RpbGwgYmUgZnJlZSw8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Tm9yIGNyb3VjaCBiZW5lYXRoIHRoZSB5b2tlIG9mIHNsYXZlcnkuPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlpldXMgc3Bva2UgdGhlIHdvcmQgb2YgZG9vbTsgYW5kIG5vdyB0aGV5IHJlc3Q8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yc3BlbnQgd2l0aCB0b2lsIHVwb24gdGhlaXIgY291bnRyeSdzIGJyZWFzdC48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R29kIGVycnMgbm90LCBmYWlscyBub3Q7IEdvZCBhbG9uZSBpcyBncmVhdDs8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IG1hbiBsaWVzIGhlbHBsZXNzIGluIHRoZSBoYW5kcyBvZiBmYXRlLjwvbD4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjxsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbWV0PSJlbGVnaWFjIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXRhcGg8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICA8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXRhcGg8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkhlcmUgbGllIHRoZSBicmF2ZSwgd2hvIGZvciB0aGVpciBjb3VudHJ5J3MgcmlnaHQ8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RHJldyBzd29yZCwgYW5kIHB1dCB0aCcgaW5zdWx0aW5nIGZvZSB0byBmbGlnaHQuPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZWlyIGxpdmVzIHRoZXkgc3BhcmVkIG5vdCwgYmlkZGluZyBEZWF0aCBkZWNpZGU8L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2hvIGZsaW5jaGVkIGFuZCBsaXZlZCwgYW5kIHdobyB3aXRoIGNvdXJhZ2UgZGllZC48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhleSBmb3VnaHQgYW5kIGZlbGwgdGhhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0IHN0aWxsIGJlIGZyZWUsPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5HcmVlY2U8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0IHN0aWxsIGJlIGZyZWUsPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3IgY3JvdWNoIGJlbmVhdGggdGhlIHlva2Ugb2Ygc2xhdmVyeS48L2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+WmV1cyBzcG9rZSB0aGUgd29yZCBvZiBkb29tOyBhbmQgbm93IHRoZXkgcmVzdDwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Gb3JzcGVudCB3aXRoIHRvaWwgdXBvbiB0aGVpciBjb3VudHJ5J3MgYnJlYXN0LjwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5Hb2QgZXJycyBub3QsIGZhaWxzIG5vdDsgR29kIGFsb25lIGlzIGdyZWF0OzwvbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgbWFuIGxpZXMgaGVscGxlc3MgaW4gdGhlIGhhbmRzIG9mIGZhdGUuPC9sPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPnVua25vd248L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.290'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkRvIHlvdSBoZWFyCiAgICAgICAgICAgICAgICAgICAgdGhpcyBhZG1vbml0aW9uLCB0aGF0IGl0IGlzIHRoZSBnb2RzIGFsb25lIHdobyBlcnIgbm90IGFuZCBmYWlsIG5vdD8gSXQKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzIHRoZSBwb3dlciBvZiBnaXZpbmcgc3VjY2VzcyBpbiBiYXR0bGUgbm90IHRvIHRoZSBzdGF0ZXNtYW4sIGJ1dCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBnb2RzLiBBY2N1cnNlZCBzbGFuZGVyZXIhIHdoeSBkbyB5b3UgcmV2aWxlIG1lIGZvciB0aGVpciBkZWF0aD8gV2h5IGRvIHlvdQogICAgICAgICAgICAgICAgICAgIHV0dGVyIHdvcmRzIHdoaWNoIEkgcHJheSB0aGUgZ29kcyB0byBkaXZlcnQgdG8gdGhlIHVuZG9pbmcgb2YgeW91ciBjaGlsZHJlbiBhbmQKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsZj8gPC90cmFuc2xhdGlvbj4="
translation['18.291'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFtb25nIGFsbCB0aGUgc2xhbmRlcnMgYW5kIGxpZXMgd2hpY2ggaGUgbGF1bmNoZWQgYWdhaW5zdCBtZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hhdCBhbWF6ZWQgbWUgbW9zdCB3YXMKICAgICAgICAgICAgICAgICAgICB0aGF0LCB3aGVuIGhlIHJlY291bnRlZCB0aGUgZGlzYXN0ZXJzIHRoYXQgYmVmZWxsIG91ciBjaXR5IGF0IHRoYXQgdGltZSwgaGlzCiAgICAgICAgICAgICAgICAgICAgY29tbWVudHMgd2VyZSBuZXZlciBzdWNoIGFzIHdvdWxkIGhhdmUgYmVlbiBtYWRlIGJ5IGFuIGhvbmVzdCBhbmQgbG95YWwgY2l0aXplbi4KICAgICAgICAgICAgICAgICAgICBIZSBzaGVkIG5vIHRlYXJzOyBoZSBoYWQgbm8gZW1vdGlvbiBvZiByZWdyZXQgaW4gaGlzIGhlYXJ0OyBoZSB2b2NpZmVyYXRlZCwgaGUKICAgICAgICAgICAgICAgICAgICBleHVsdGVkLCBoZSBzdHJhaW5lZCBoaXMgdGhyb2F0LiBIZSBldmlkZW50bHkgc3VwcG9zZWQgaGltc2VsZiB0byBiZSB0ZXN0aWZ5aW5nCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZSwgYnV0IGhlIHdhcyByZWFsbHkgb2ZmZXJpbmcgcHJvb2YgYWdhaW5zdCBoaW1zZWxmIHRoYXQgaW4gYWxsIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGlzdHJlc3NpbmcgZXZlbnRzIGhlIGhhZCBoYWQgbm8gZmVlbGluZyBpbiBjb21tb24gd2l0aCBvdGhlciBjaXRpemVucy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.292'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTIiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IGEgbWFuIHdobyBwcm9mZXNzZXMgc3VjaCBzb2xpY2l0dWRlLAogICAgICAgICAgICAgICAgICAgIGFzIGhlIGhhcyBwcm9mZXNzZWQgdG9kYXksIGZvciBvdXIgbGF3cyBhbmQgY29uc3RpdHV0aW9uLCB3aGF0ZXZlciBlbHNlIGhlCiAgICAgICAgICAgICAgICAgICAgbGFja3MsIG91Z2h0IGF0IGxlYXN0IHRvIHBvc3Nlc3MgdGhlIHF1YWxpdHkgb2Ygc3ltcGF0aGl6aW5nIGJvdGggd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBzb3Jyb3dzIGFuZCB0aGUgam95cyBvZiB0aGUgY29tbW9uIHBlb3BsZTsgYW5kLCBpbiBjaG9vc2luZyBoaXMgcG9saXRpY2FsCiAgICAgICAgICAgICAgICAgICAgcHJpbmNpcGxlcywgaGUgb3VnaHQgbm90IHRvIHJhbmdlIGhpbXNlbGYgd2l0aCB0aGVpciBlbmVtaWVzLiBCdXQgdGhhdCBpcwogICAgICAgICAgICAgICAgICAgIGNsZWFybHkgd2hhdCBoZSBoYXMgZG9uZSwgd2hlbiBoZSBkZWNsYXJlcyB0aGF0IEkgYW0gcmVzcG9uc2libGUgZm9yIGV2ZXJ5dGhpbmcsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgdGhlIGNpdHkgaGFzIGZhbGxlbiBpbnRvIHRyb3VibGUgYnkgbXkgZmF1bHQuIDwvdHJhbnNsYXRpb24+"
translation['18.293'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTMiIHVuaXQ9InNlY3Rpb24iIC8+WW91ciBwb2xpY3kgb2YgYmVhcmluZyBzdWNjb3IgdG8gdGhlIEdyZWVrcyBkaWQgbm90IG9yaWdpbmF0ZSBpbiBteQogICAgICAgICAgICAgICAgICAgIHN0YXRlc21hbnNoaXAgYW5kIG15IHByaW5jaXBsZXMuIElmIHlvdSB3ZXJlIHRvIGFja25vd2xlZGdlIHRoYXQgbXkgaW5mbHVlbmNlCiAgICAgICAgICAgICAgICAgICAgY2F1c2VkIHlvdSB0byByZXNpc3QgYSBkZXNwb3Rpc20gdGhhdCB0aHJlYXRlbmVkIHRoZSBydWluIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgeW91IHdvdWxkIGJlc3RvdyBvbiBtZSBhIGZhdm9yIGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIGFsbCB0aGUgZ2lmdHMgeW91IGhhdmUgZXZlciBjb25mZXJyZWQgb24gYW55b25lLiBJIGRvIG5vdCBjbGFpbSB0aGF0IGZhdm9yOwogICAgICAgICAgICAgICAgICAgIEkgY2Fubm90IGNsYWltIGl0IHdpdGhvdXQgaW5qdXN0aWNlIHRvIHlvdTogYW5kIEkgYW0gY2VydGFpbiB0aGF0IHlvdSB3aWxsIG5vdAogICAgICAgICAgICAgICAgICAgIGdyYW50IGl0LiBJZiBBZXNjaGluZXMgaGFkIGFjdGVkIGFuIGhvbmVzdCBwYXJ0LCBoZSB3b3VsZCBuZXZlciBoYXZlIGluZHVsZ2VkCiAgICAgICAgICAgICAgICAgICAgaGlzIHNwaXRlIGFnYWluc3QgbWUgYnkgaW1wYWlyaW5nIGFuZCBkZWZhbWluZyB0aGUgbm9ibGVzdCBvZiB5b3VyIG5hdGlvbmFsCiAgICAgICAgICAgICAgICAgICAgZ2xvcmllcy4gPC90cmFuc2xhdGlvbj4="
translation['18.294'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dAogICAgICAgICAgICAgICAgICAgIHdoeSByZXByb2FjaCBoaW0gZm9yIHRoYXQgaW1wdXRhdGlvbiwgd2hlbiBoZSBoYXMgdXR0ZXJlZCBjYWx1bW5pZXMgb2YgZmFyCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlciBhdWRhY2l0eT8gQSBtIGFuIHdobyBhY2N1c2VzIG1lIG9mIFBoaWxpcHBpc23igJQgSGVhdmVuIGFuZAogICAgICAgICAgICAgICAgICAgIEVhcnRoLCBvZiB3aGF0IGxpZSBpcyBoZSBub3QgY2FwYWJsZT8gSSBzb2xlbW5seSBhdmVyIHRoYXQsIGlmIHdlIGFyZSB0byBjYXN0CiAgICAgICAgICAgICAgICAgICAgYXNpZGUgbHlpbmcgaW1wdXRhdGlvbnMgYW5kIHNwaXRlZnVsIG1lbmRhY2l0eSwgYW5kIGlucXVpcmUgaW4gYWxsIHNpbmNlcml0eSB3aG8KICAgICAgICAgICAgICAgICAgICByZWFsbHkgYXJlIHRoZSBtZW4gdG8gd2hvbSB0aGUgcmVwcm9hY2ggb2YgYWxsIHRoYXQgaGFzIGJlZmFsbGVuIG1pZ2h0IGJ5CiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCBjb25zZW50IGJlIGZhaXJseSBhbmQgaG9uZXN0bHkgYnJvdWdodCBob21lLCB5b3Ugd2lsbCBmaW5kIHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBtZW4gaW4gdGhlIHNldmVyYWwgY2l0aWVzIHdobyByZXNlbWJsZSBBZXNjaGluZXMsIGFuZCBkbyBub3QgcmVzZW1ibGUgbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.295'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTUiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYSB0aW1lIHdoZW4gUGhpbGlwJ3MgcmVzb3VyY2VzIHdlcmUKICAgICAgICAgICAgICAgICAgICBmZWVibGUgYW5kIHZlcnkgc21hbGwgaW5kZWVkLCB3aGVuIHdlIHdlcmUgY29uc3RhbnRseSB3YXJuaW5nLCBleGhvcnRpbmcsCiAgICAgICAgICAgICAgICAgICAgYWRtb25pc2hpbmcgdGhlbSBmb3IgdGhlIGJlc3QsIHRoZXNlIG1lbiBmbHVuZyBhd2F5IHRoZWlyIG5hdGlvbmFsIHByb3NwZXJpdHkKICAgICAgICAgICAgICAgICAgICBmb3IgcHJpdmF0ZSBhbmQgc2VsZmlzaCBnYWluOyB0aGV5IGNham9sZWQgYW5kIGNvcnJ1cHRlZCBhbGwgdGhlIGNpdGl6ZW5zIHdpdGhpbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGdyYXNwLCB1bnRpbCB0aGV5IGhhZCByZWR1Y2VkIHRoZW0gdG8gc2xhdmVyeS4gU28gdGhlIFRoZXNzYWxpYW5zIHdlcmUKICAgICAgICAgICAgICAgICAgICB0cmVhdGVkIGJ5IERhb2NodXMsIENpbmVhcywgVGhyYXN5ZGF1cywgdGhlIEFyY2FkaWFucyBieSBDZXJjaWRhcywgSGllcm9ueW11cywKICAgICAgICAgICAgICAgICAgICBFdWNhbXBpZGFzLCB0aGUgQXJnaXZlcyBieSBNeXJ0aXMsIFRlbGVkYW11cywgTW5hc2VhcywgdGhlIEVsZWlhbnMgYnkgRXV4aXRoZXVzLAogICAgICAgICAgICAgICAgICAgIENsZW90aW11cywgQXJpc3RhZWNobXVzLCB0aGUgTWVzc2VuaWFucyBieSB0aGUgc29ucyBvZiB0aGF0IGdvZC1mb3JzYWtlbgogICAgICAgICAgICAgICAgICAgIFBoaWxpYWRlcywgTmVvbiBhbmQgVGhyYXN5bG9jaHVzLCB0aGUgU2ljeW9uaWFucyBieSBBcmlzdHJhdHVzIGFuZCBFcGljaGFyZXMsCiAgICAgICAgICAgICAgICAgICAgdGhlIENvcmludGhpYW5zIGJ5IERlaW5hcmNodXMgYW5kIERlbWFyZXR1cywgdGhlIE1lZ2FyaWFucyBieSBQdG9lb2RvcnVzLAogICAgICAgICAgICAgICAgICAgIEhlbGl4dXMsIFBlcmlsYXVzLCB0aGUgVGhlYmFucyBieSBUaW1vbGF1cywgVGhlb2dlaXRvbiwgQW5lbW9ldGFzLCB0aGUgRXVib2VhbnMKICAgICAgICAgICAgICAgICAgICBieSBIaXBwYXJjaHVzLCBDbGVpdGFyY2h1cywgYW5kIFNvc2lzdHJhdHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.296'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTYiIHVuaXQ9InNlY3Rpb24iIC8+SSBjb3VsZCBjb250aW51ZSB0aGlzIGNhdGFsb2d1ZSBvZiB0cmFpdG9ycyB0aWxsIHRoZSBzdW4gc2V0cy4gRXZlcnkgb25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaXMgYSBtYW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSB3YXkgb2YgdGhpbmtpbmcgaW4gdGhlIHBvbGl0aWNzIG9mIGhpcyBvd24gY291bnRyeSBhcyBBZXNjaGluZXMgYW5kIGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYXJlIGluIG91cnMuIFRoZXkgdG9vIGFyZSBwcm9mbGlnYXRlcywgc3ljb3BoYW50cywgZmllbmRzIGluY2FybmF0ZTsKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgbXV0aWxhdGVkIHRoZWlyIG93biBjb3VudHJpZXM7IHRoZXkgaGF2ZSBwbGVkZ2VkIGF3YXkgdGhlaXIgbGliZXJ0eSBpbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGN1cHMsIGZpcnN0IHRvIFBoaWxpcCwgYW5kIG5vdyB0byBBbGV4YW5kZXIuIFRoZXkgbWVhc3VyZSB0aGVpciBoYXBwaW5lc3MKICAgICAgICAgICAgICAgICAgICBieSB0aGVpciBiZWxseSBhbmQgdGhlaXIgYmFzZXIgcGFydHM7IHRoZXkgaGF2ZSBvdmVydGhyb3duIGZvciBldmVyIHRoYXQgZnJlZWRvbQogICAgICAgICAgICAgICAgICAgIGFuZCBpbmRlcGVuZGVuY2Ugd2hpY2ggdG8gdGhlIEdyZWVrcyBvZiBhbiBlYXJsaWVyIGFnZSB3ZXJlIHRoZSB2ZXJ5IHN0YW5kYXJkCiAgICAgICAgICAgICAgICAgICAgYW5kIGNhbm9uIG9mIHByb3NwZXJpdHkuIDwvdHJhbnNsYXRpb24+"
translation['18.297'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9mIHRoaXMgZGlzZ3JhY2VmdWwgYW5kIG5vdG9yaW91cyBjb25zcGlyYWN5LCBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgd2lja2VkbmVzcywgb3IgcmF0aGVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpZiBJIGFtIHRvIHNwZWFrIHdpdGhvdXQgdHJpZmxpbmcsIHRoaXMgYmV0cmF5YWwgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbGliZXJ0aWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB5b3XigJR0aGFua3MgdG8gbXkgcG9saWN54oCUYXJlIGd1aWx0bGVzcyBpbiB0aGUgZXllcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB3b3JsZCwgYXMgSSBhbSBndWlsdGxlc3MgaW4geW91ciBleWVzLiBBbmQgdGhlbiwgQWVzY2hpbmVzLCB5b3UgYXNrIGZvciB3aGF0CiAgICAgICAgICAgICAgICAgICAgbWVyaXQgSSBjbGFpbSBkaXN0aW5jdGlvbiEgSSB0ZWxsIHlvdSB0aGF0LCB3aGVuIGFsbCB0aGUgcG9saXRpY2lhbnMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+LCBzdGFydGluZyB3aXRoIHlvdSwgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBjb3JydXB0ZWQsIGZpcnN0IGJ5IFBoaWxpcCwgYW5kIG5vdyBieSBBbGV4YW5kZXIsIDwvdHJhbnNsYXRpb24+"
translation['18.298'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTgiIHVuaXQ9InNlY3Rpb24iIC8+bmVpdGhlciBvcHBvcnR1bml0eSwgbm9yIGNpdmlsIHNwZWVjaGVzLCBub3IgbGFyZ2UgcHJvbWlzZXMsIG5vcgogICAgICAgICAgICAgICAgICAgIGhvcGUsIG5vciBmZWFyLCBub3IgYW55IG90aGVyIGluZHVjZW1lbnQsIGNvdWxkIHByb3Zva2Ugb3Igc3Vib3JuIG1lIHRvIGJldHJheQogICAgICAgICAgICAgICAgICAgIHRoZSBqdXN0IGNsYWltcyBhbmQgdGhlIHRydWUgaW50ZXJlc3RzIG9mIG15IGNvdW50cnksIGFzIEkgY29uY2VpdmVkIHRoZW07IGFuZAogICAgICAgICAgICAgICAgICAgIHRoYXQsIHdoYXRldmVyIGNvdW5zZWxzIEkgaGF2ZSBvZmZlcmVkIHRvIG15IGZlbGxvdy1jaXRpemVucyBoZXJlLCBJIGhhdmUgbm90CiAgICAgICAgICAgICAgICAgICAgb2ZmZXJlZCwgbGlrZSB5b3UsIGFzIGlmIEkgd2VyZSBhIGZhbHNlIGJhbGFuY2Ugd2l0aCBhIGJpYXMgaW4gZmF2b3Igb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgdmVuZG9yLiBXaXRoIGEgc291bCB1cHJpZ2h0LCBob25lc3QgYW5kIGluY29ycnVwdGlibGUsIGFwcG9pbnRlZCB0byB0aGUgY29udHJvbAogICAgICAgICAgICAgICAgICAgIG9mIG1vcmUgbW9tZW50b3VzIHRyYW5zYWN0aW9ucyB0aGFuIGFueSBzdGF0ZXNtYW4gb2YgbXkgdGltZSwgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgYWRtaW5pc3RlcmVkIHRoZW0gdGhyb3VnaG91dCBpbiBhbGwgcHVyaXR5IGFuZCByaWdodGVvdXNuZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.299'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOTkiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhvc2UgZ3JvdW5kcyBJIGNsYWltIHRoaXMgZGlzdGluY3Rpb24uIEFzIGZvciBteQogICAgICAgICAgICAgICAgICAgIGZvcnRpZmljYXRpb25zLCB3aGljaCB5b3UgdHJlYXRlZCBzbyBzYXRpcmljYWxseSwgYW5kIG15IGVudHJlbmNobWVudHMsIEkgZG8sCiAgICAgICAgICAgICAgICAgICAgYW5kIEkgbXVzdCwganVkZ2UgdGhlc2UgdGhpbmdzIHdvcnRoeSBvZiBncmF0aXR1ZGUgYW5kIHRoYW5rczsgYnV0IEkgZ2l2ZSB0aGVtIGEKICAgICAgICAgICAgICAgICAgICBwbGFjZSBmYXIgcmVtb3ZlZCBmcm9tIG15IHBvbGl0aWNhbCBhY2hpZXZlbWVudHMuIEkgZGlkIG5vdCBmb3J0aWZ5IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB3aXRoIG1hc29ucnkgYW5kIGJyaWNrd29yazogdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBub3QgdGhlIHdvcmtzIG9uIHdoaWNoIEkgY2hpZWZseSBwcmlkZSBteXNlbGYuIFJlZ2FyZCBteSBmb3J0aWZpY2F0aW9ucyBhcyB5b3UKICAgICAgICAgICAgICAgICAgICBvdWdodCwgYW5kIHlvdSB3aWxsIGZpbmQgYXJtaWVzIGFuZCBjaXRpZXMgYW5kIG91dHBvc3RzLCBzZWFwb3J0cyBhbmQgc2hpcHMgYW5kCiAgICAgICAgICAgICAgICAgICAgaG9yc2VzLCBhbmQgYSBtdWx0aXR1ZGUgcmVhZHkgdG8gZmlnaHQgZm9yIHRoZWlyIGRlZmVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['18.300'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDAiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2Ugd2VyZSB0aGUgYmFzdGlvbnMgSSBwbGFudGVkIGZvciB0aGUgcHJvdGVjdGlvbgogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBzbyBmYXIgYXMgaXQgd2FzIHBvc3NpYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgaHVtYW4gZm9yZXRob3VnaHQ7IGFuZCB0aGVyZXdpdGggSSBmb3J0aWZpZWQsIG5vdCB0aGUgcmluZy1mZW5jZSBvZiBvdXIgcG9ydCBhbmQKICAgICAgICAgICAgICAgICAgICBvdXIgY2l0YWRlbCwgYnV0IHRoZSB3aG9sZSBjb3VudHJ5LiBOb3Igd2FzIEkgYmVhdGVuIGJ5IFBoaWxpcCBpbiBmb3JldGhvdWdodCBvcgogICAgICAgICAgICAgICAgICAgIGluIGFybWFtZW50czsgdGhhdCBpcyBmYXIgZnJvbSB0aGUgdHJ1dGguIFRoZSBnZW5lcmFscyBhbmQgdGhlIGZvcmNlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhbGxpZXMgd2VyZSBiZWF0ZW4gYnkgaGlzIGdvb2QgZm9ydHVuZS4gSGF2ZSBJIGFueSBwcm9vZnMgb2YgbXkgY2xhaW0/IFllcywKICAgICAgICAgICAgICAgICAgICBwcm9vZnMgZGVmaW5pdGUgYW5kIG1hbmlmZXN0LiBJIGFzayB5b3UgYWxsIHRvIGNvbnNpZGVyIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['18.301'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoYXQgY291cnNlIG9mIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIHdhcyBwcm9wZXIgZm9yIGEgcGF0cmlvdGljIGNpdGl6ZW4gd2hvIHdhcyB0cnlpbmcgdG8gc2VydmUgaGlzIGNvdW50cnkgd2l0aCBhbGwKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSBwcnVkZW5jZSBhbmQgZW5lcmd5IGFuZCBsb3lhbHR5PyBTdXJlbHkgaXQgd2FzIHRvIHByb3RlY3QgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+IG9uIHRoZSBzZWEtYm9hcmQgYnkgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+LCBvbiB0aGUgaW5sYW5kIGZyb250aWVyIGJ5IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4sIGFuZCBvbiB0aGUgc2lkZSB0b3dhcmRzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXN1czwvcGxhY2VOYW1lPiBieSBvdXIgbmVpZ2hib3JzIGluIHRoYXQKICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb247IHRvIG1ha2UgcHJvdmlzaW9uIGZvciB0aGUgcGFzc2FnZSBvZiBvdXIgY29ybi1zdXBwbHkgYWxvbmcgZnJpZW5kbHkKICAgICAgICAgICAgICAgICAgICBjb2FzdHMgYWxsIHRoZSB3YXkgdG8gUGVpcmFldXM7IDwvdHJhbnNsYXRpb24+"
translation['18.302'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDIiIHVuaXQ9InNlY3Rpb24iIC8+dG8gcHJlc2VydmUKICAgICAgICAgICAgICAgICAgICBwbGFjZXMgYWxyZWFkeSBhdCBvdXIgZGlzcG9zYWwsIHN1Y2ggYXMgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI1OTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjU5OCI+UHJvY29ubmVzdXM8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRlbmVkb3MiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRlbmVkb3MiPlRlbmVkb3M8L3BsYWNlTmFtZT4sIGJ5IHNlbmRpbmcgc3VjY29yIHRvIHRoZW0gYW5kIGJ5IHN1aXRhYmxlIHNwZWVjaGVzIGFuZAogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb25zOyB0byBzZWN1cmUgdGhlIGZyaWVuZHNoaXAgYW5kIGFsbGlhbmNlIG9mIHN1Y2ggcGxhY2VzIGFzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPiwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDAwMzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMDAzMCI+QWJ5ZG9zPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+OyB0bwogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3kgdGhlIG1vc3QgaW1wb3J0YW50IG9mIHRoZSBleGlzdGluZyByZXNvdXJjZXMgb2YgdGhlIGVuZW15LCBhbmQgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIGdvb2QgdGhlIGRlZmljaWVuY2llcyBvZiBvdXIgb3duIGNpdHkuIEFsbCB0aGVzZSBwdXJwb3NlcyB3ZXJlIGFjY29tcGxpc2hlZCBieQogICAgICAgICAgICAgICAgICAgIG15IGRlY3JlZXMgYW5kIG15IGFkbWluaXN0cmF0aXZlIGFjdHMuIDwvdHJhbnNsYXRpb24+"
translation['18.303'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDMiIHVuaXQ9InNlY3Rpb24iIC8+V2hvZXZlciB3aWxsIHN0dWR5IHRoZW0sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdpdGhvdXQgamVhbG91c3ksIHdpbGwgZmluZCB0aGF0IHRoZXkgd2VyZSByaWdodGx5CiAgICAgICAgICAgICAgICAgICAgcGxhbm5lZCBhbmQgaG9uZXN0bHkgZXhlY3V0ZWQ7IHRoYXQgdGhlIHByb3BlciBvcHBvcnR1bml0eSBmb3IgZWFjaCBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZSB3YXMgbmV2ZXIgbmVnbGVjdGVkLCBvciBpZ25vcmVkLCBvciB0aHJvd24gYXdheSBieSBtZTogYW5kIHRoYXQgbm90aGluZwogICAgICAgICAgICAgICAgICAgIHdpdGhpbiB0aGUgY29tcGFzcyBvZiBvbmUgbWFuJ3MgYWJpbGl0eSBvciBmb3JldGhvdWdodCB3YXMgbGVmdCB1bmRvbmUuIElmIHRoZQogICAgICAgICAgICAgICAgICAgIHN1cGVyaW9yIHBvd2VyIG9mIHNvbWUgZGVpdHkgb3Igb2YgZm9ydHVuZSwgb3IgdGhlIGluY29tcGV0ZW5jZSBvZiBjb21tYW5kZXJzLAogICAgICAgICAgICAgICAgICAgIG9yIHRoZSB3aWNrZWRuZXNzIG9mIHRyYWl0b3JzLCBvciBhbGwgdGhlc2UgY2F1c2VzIGNvbWJpbmVkLCB2aXRpYXRlZCBhbmQgYXQKICAgICAgICAgICAgICAgICAgICBsYXN0IHNoYXR0ZXJlZCB0aGUgd2hvbGUgZW50ZXJwcmlzZSzigJRpcyBEZW1vc3RoZW5lcyBndWlsdHk/IDwvdHJhbnNsYXRpb24+"
translation['18.304'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDQiIHVuaXQ9InNlY3Rpb24iIC8+SWYgaW4gZWFjaCBvZiB0aGUgY2l0aWVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB0aGVyZSBoYWQgYmVlbiBzb21lIG9uZSBtYW4gc3VjaCBhcyBJCiAgICAgICAgICAgICAgICAgICAgd2FzIGluIG15IGFwcG9pbnRlZCBzdGF0aW9uIGluIHlvdXIgbWlkc3QsIG5heSwgaWYgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4gaGFkIHBvc3Nlc3NlZCBvbmUgbWFuIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjczNSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzM1Ij5BcmNhZGlhPC9wbGFjZU5hbWU+IG9uZSBtYW4gaG9sZGluZyB0aGUgc2FtZSBzZW50aW1lbnRzIHRoYXQgSSBoZWxkLCBubwogICAgICAgICAgICAgICAgICAgIEhlbGxlbmljIHBlb3BsZSBiZXlvbmQgb3Igb24gdGhpcyBzaWRlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiB3b3VsZCBoYXZlIGJlZW4gZXhwb3NlZCB0byB0aGVpciBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgZGlzdHJlc3NlczogPC90cmFuc2xhdGlvbj4="
translation['18.305'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDUiIHVuaXQ9InNlY3Rpb24iIC8+dGhleSB3b3VsZCBzdGlsbCBiZSBkd2VsbGluZwogICAgICAgICAgICAgICAgICAgIHByb3NwZXJvdXNseSBpbiB0aGVpciBvd24gY291bnRyaWVzLCBpbiBmcmVlZG9tIGFuZCBpbmRlcGVuZGVuY2UsIHNlY3VyZWx5IGFuZAogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZmVhciwgZ3JhdGVmdWwgdG8geW91IGFuZCB0byBhbGwgdGhlIEF0aGVuaWFucyBmb3IgdGhlIGdyZWF0IGFuZAogICAgICAgICAgICAgICAgICAgIG1hbmlmb2xkIGJsZXNzaW5ncyB0aGV5IG93ZWQgdG8gbWUuIFRvIHByb3ZlIHRoYXQsIGFzIGEgcHJlY2F1dGlvbiBhZ2FpbnN0IGVudnksCiAgICAgICAgICAgICAgICAgICAgSSBhbSB1c2luZyB3b3JkcyB0aGF0IGRvIGxlc3MgdGhhbiBqdXN0aWNlIHRvIG15IGRlZWRzLCBwbGVhc2UgdGFrZSB0aGVzZQogICAgICAgICAgICAgICAgICAgIHBhcGVycywgYW5kIHJlYWQgdGhlIGxpc3Qgb2YgZXhwZWRpdGlvbnMgc2VudCBpbiBwdXJzdWFuY2Ugb2YgbXkgZGVjcmVlcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJOdW1iZXIgb2YgRXhwZWRpdGlvbnMgaW4gQWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtYmVyIG9mIEV4cGVkaXRpb25zIGluIEFpZDwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OdW1iZXIgb2YgRXhwZWRpdGlvbnMgaW4gQWlkPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.306'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBkdXR5LCBBZXNjaGluZXMsIG9mIGFuIHVwcmlnaHQgYW5kIGhvbm9yIGFibGUgY2l0aXplbiB0byB0YWtlIHRoZXNlIG9yIHNpbWlsYXIKICAgICAgICAgICAgICAgICAgICBtZWFzdXJlcy4gSWYgdGhleSBoYWQgYmVlbiBzdWNjZXNzZnVsLCB3ZSBzaG91bGQgaGF2ZSBiZWVuLCBiZXlvbmQgY29udHJvdmVyc3ksCiAgICAgICAgICAgICAgICAgICAgdGhlIGdyZWF0ZXN0IG9mIG5hdGlvbnMgYW5kIGEgbmF0aW9uIHRoYXQgZGVzZXJ2ZWQgaXRzIGdyZWF0bmVzczogYW5kLCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgZmFpbGVkLCB0aGVyZSByZW1haW5zIHRoZSByZXN1bHQgdGhhdCBvdXIgcmVwdXRhdGlvbiBzdGFuZHMgaGlnaCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBubyBtYW4gY2FuIGZpbmQgZmF1bHQgd2l0aCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gb3IgaGVyIHBvbGljeSwgYnV0IGxheXMgdGhlIGJsYW1lIG9uIHRoZSBmb3J0dW5lIHRoYXQgc28KICAgICAgICAgICAgICAgICAgICBvcmRlcmVkIHRoZSBpc3N1ZS4gPC90cmFuc2xhdGlvbj4="
translation['18.307'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDciIHVuaXQ9InNlY3Rpb24iIC8+QXNzdXJlZGx5IGl0IHdhcyBub3QgdGhlCiAgICAgICAgICAgICAgICAgICAgZHV0eSBvZiBzdWNoIGEgY2l0aXplbiB0byBhYmFuZG9uIHRoZSBjYXVzZSBvZiBoaXMgY291bnRyeSwgdG8gdGFrZSB0aGUgaGlyZSBvZgogICAgICAgICAgICAgICAgICAgIGhlciBhZHZlcnNhcmllcywgdG8gd2FpdCBvbiB0aGUgb2NjYXNpb25zLCBub3Qgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgb2YgaGVyIGVuZW1pZXMuIEl0IHdhcyBub3QgaGlzCiAgICAgICAgICAgICAgICAgICAgZHV0eSB0byBsb29rIHdpdGggYW4gZXZpbCBleWUgdXBvbiBhIG1hbiB3aG8gaGFkIG1hZGUgaXQgaGlzIGJ1c2luZXNzIHRvIHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICBvciBwcm9wb3NlIG1lYXN1cmVzIHdvcnRoeSBvZiBvdXIgdHJhZGl0aW9ucywgYW5kIHdhcyByZXNvbHZlZCB0byBzdGFuZCBieSBzdWNoCiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZXM7IG5vciB0byB0cmVhc3VyZSB2aW5kaWN0aXZlbHkgdGhlIG1lbW9yeSBvZiBwcml2YXRlIGFubm95YW5jZXMuIE5vciB3YXMKICAgICAgICAgICAgICAgICAgICBpdCBoaXMgZHV0eSB0byBob2xkIGhpcyBwZWFjZSBkaXNob25lc3RseSBhbmQgZGVjZXB0aXZlbHksIGFzIHlvdSBzbyBvZnRlbiBkby4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.308'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDgiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgaXMsIGluZGVlZCwgYSBzaWxlbmNlIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICBob25lc3QgYW5kIGJlbmVmaWNpYWwgdG8gdGhlIGNpdHksIHN1Y2ggYXMgaXMgb2JzZXJ2ZWQgaW4gYWxsIHNpbXBsaWNpdHkgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFqb3JpdHkgb2YgeW91IGNpdGl6ZW5zLiBOb3Qgc3VjaCwgYnV0IGZhciwgZmFyIGRpZmZlcmVudCwgaXMgdGhlIHNpbGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMuIFdpdGhkcmF3aW5nIGhpbXNlbGYgZnJvbSBwdWJsaWMgbGlmZSB3aGVuZXZlciBoZSB0aGlua3MKICAgICAgICAgICAgICAgICAgICBmaXTigJRhbmQgdGhhdCBpcyB2ZXJ5IGZyZXF1ZW50bHnigJRoZSBsaWVzIGluIHdhaXQgZm9yIHRoZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgd2hlbiB5b3Ugd2lsbCBiZSB3ZWFyeSBvZiB0aGUgaW5jZXNzYW50IHNwZWFrZXIsIG9yIHdoZW4gc29tZSB1bmx1Y2t5IHJldmVyc2UKICAgICAgICAgICAgICAgICAgICBoYXMgYmVmYWxsZW4geW91LCBvciBhbnkgb2YgdGhvc2UgdmV4YXRpb25zIHRoYXQgYXJlIHNvIGZyZXF1ZW50IGluIHRoZSBsaWZlIG9mCiAgICAgICAgICAgICAgICAgICAgbW9ydGFsIG1lbjsgYW5kIHRoZW4sIHNlaXppbmcgdGhlIG9jY2FzaW9uLCBoZSBicmVha3Mgc2lsZW5jZSBhbmQgdGhlIG9yYXRvcgogICAgICAgICAgICAgICAgICAgIHJlYXBwZWFycyBsaWtlIGEgc3VkZGVuIHNxdWFsbCwgd2l0aCBoaXMgdm9pY2UgaW4gZmluZSB0cmFpbmluZzsgaGUgc3RyaW5ncwogICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyIHRoZSB3b3JkcyBhbmQgdGhlIHBocmFzZXMgdGhhdCBoZSBoYXMgYWNjdW11bGF0ZWQsIGVtcGhhdGljYWxseSBhbmQKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGEgcGF1c2U7IGJ1dCwgYWxhcywgdGhleSBhcmUgYWxsIHVzZWxlc3MsIHRoZXkgc2VydmUgbm8gZ29vZCBwdXJwb3NlLAogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIGRpcmVjdGVkIHRvIHRoZSBpbmp1cnkgb2YgdGhpcyBvciB0aGF0IGNpdGl6ZW4sIGFuZCB0byB0aGUgZGlzY3JlZGl0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIGNvbW11bml0eS4gPC90cmFuc2xhdGlvbj4="
translation['18.309'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMDkiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IGlmIGFsbCB0aGF0CiAgICAgICAgICAgICAgICAgICAgYXNzaWR1b3VzIHByYWN0aWNlLCBBZXNjaGluZXMsIGhhZCBiZWVuIGNvbmR1Y3RlZCBpbiBhIHNwaXJpdCBvZiBob25lc3R5IGFuZCBvZgogICAgICAgICAgICAgICAgICAgIHNvbGljaXR1ZGUgZm9yIHlvdXIgY291bnRyeSdzIHdlbGwtYmVpbmcsIGl0IHNob3VsZCBoYXZlIHlpZWxkZWQgYSByaWNoIGFuZAogICAgICAgICAgICAgICAgICAgIG5vYmxlIGhhcnZlc3QgZm9yIHRoZSBiZW5lZml0IG9mIHVzIGFsbOKAlGFsbGlhbmNlcyBvZiBzdGF0ZXMsIG5ldwogICAgICAgICAgICAgICAgICAgIHJldmVudWVzLCBkZXZlbG9wbWVudCBvZiBjb21tZXJjZSwgdXNlZnVsIGxlZ2lzbGF0aW9uLCBtZWFzdXJlcyBvZiBvcHBvc2l0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGF2b3dlZCBlbmVtaWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.310'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTAiIHVuaXQ9InNlY3Rpb24iIC8+SW4gZGF5cyBvZiBvbGQgYWxsIHRob3NlCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgYWZmb3JkZWQgdGhlIHJlY29nbml6ZWQgdGVzdCBvZiBzdGF0ZXNtYW5zaGlwOiBhbmQgdGhlIHRpbWUgdGhyb3VnaAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBoYXZlIHBhc3NlZCBzdXBwbGllZCB0byBhbiB1cHJpZ2h0IHBvbGl0aWNpYW4gbWFueSBvcHBvcnR1bml0aWVzIG9mCiAgICAgICAgICAgICAgICAgICAgc2hvd2luZyBoaXMgd29ydGg7IGJ1dCBhbW9uZyBzdWNoIG1lbiB5b3Ugd29uIG5vIHBvc2l0aW9u4oCUeW91IHdlcmUKICAgICAgICAgICAgICAgICAgICBuZWl0aGVyIGZpcnN0LCBzZWNvbmQsIHRoaXJkLCBmb3VydGgsIGZpZnRoLCBzaXh0aCwgbm9yIGFueXdoZXJlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHJhY2XigJRhdCBsZWFzdCB3aGVuIHRoZSBwb3dlciBvZiB5b3VyIGNvdW50cnkgd2FzIHRvIGJlIGVubGFyZ2VkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.311'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTEiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCBhbGxpYW5jZSBkb2VzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBvd2UgdG8geW91ciBleGVydGlvbnM/IFdoYXQKICAgICAgICAgICAgICAgICAgICBhdXhpbGlhcnkgZXhwZWRpdGlvbiwgd2hhdCBnYWluIG9mIGFtaXR5IG9yIHJlcHV0YXRpb24/IFdoYXQgZW1iYXNzeSBvciBzZXJ2aWNlLAogICAgICAgICAgICAgICAgICAgIGJ5IHdoaWNoIHRoZSBjcmVkaXQgb2YgdGhlIGNpdHkgaGFzIGJlZW4gcmFpc2VkPyBXaGF0IHByb2plY3QgaW4gZG9tZXN0aWMsCiAgICAgICAgICAgICAgICAgICAgSGVsbGVuaWMsIG9yIGZvcmVpZ24gcG9saWN5LCBvZiB3aGljaCB5b3UgdG9vayBjaGFyZ2UsIGhhcyBldmVyIGJlZW4gc3VjY2Vzc2Z1bD8KICAgICAgICAgICAgICAgICAgICBXaGF0IHdhci1nYWxsZXlzLCBvciBtdW5pdGlvbnMsIG9yIGRvY2tzLCBvciBmb3J0aWZpY2F0aW9ucywgb3IgY2F2YWxyeSwgZG8gd2UKICAgICAgICAgICAgICAgICAgICBvd2UgdG8geW91PyBPZiB3aGF0IHVzZSBpbiB0aGUgd2lkZSB3b3JsZCBhcmUgeW91PyBXaGF0IHB1YmxpYy1zcGlyaXRlZAogICAgICAgICAgICAgICAgICAgIGFzc2lzdGFuY2UgaGF2ZSB5b3UgZXZlciBnaXZlbiB0byByaWNoIG9yIHRvIHBvb3I/IE5vbmUgd2hhdGV2ZXIuIDwvdHJhbnNsYXRpb24+"
translation['18.312'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGNvbWUsIHNpciwgd2l0aG91dCBhbnkgb2YgdGhlc2UgdGhpbmdzIGEgbWFuIG1heQogICAgICAgICAgICAgICAgICAgIHNob3cgcGF0cmlvdGlzbSBhbmQgemVhbC4gV2hlcmU/IFdoZW4/IFdoeSwgeW91IGluY29ycmlnaWJsZSBrbmF2ZSwgZXZlbiBhdCB0aGUKICAgICAgICAgICAgICAgICAgICB0aW1lIHdoZW4gZXZlcnkgbWFuIHdobyBldmVyIHNwb2tlIGZyb20gdGhlIHRyaWJ1bmUgZ2F2ZSBmcmVlbHkgdG8gdGhlIG5hdGlvbmFsCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSwgd2hlbiBhdCBsYXN0IGV2ZW4gQXJpc3RvbmljdXMgZ2F2ZSB0aGUgbW9uZXkgaGUgaGFkIGNvbGxlY3RlZCB0byByZWRlZW0KICAgICAgICAgICAgICAgICAgICBoaXMgY2l0aXplbnNoaXAsIHlvdSBuZXZlciBjYW1lIGZvcndhcmQgYW5kIHB1dCB5b3VyIG5hbWUgZG93biBmb3IgYSBmYXJ0aGluZy4KICAgICAgICAgICAgICAgICAgICBBbmQgeWV0IHlvdSB3ZXJlIGNlcnRhaW5seSBub3Qgd2l0aG91dCBtZWFucywgZm9yIHlvdSBoYWQgaW5oZXJpdGVkIG1vcmUgdGhhbgogICAgICAgICAgICAgICAgICAgIGZpdmUgdGFsZW50cyBmcm9tIHRoZSBlc3RhdGUgb2YgeW91ciBmYXRoZXItaW4tbGF3IFBoaWxvLCBhbmQgeW91IGhhZCBhIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBvZiB0d28gdGFsZW50cywgc3Vic2NyaWJlZCBieSB0aGUgY2hhaXJtZW4gb2YgdGhlIE5hdnkgQm9hcmRzLCBhcyBhIHJld2FyZCBmb3IKICAgICAgICAgICAgICAgICAgICBzcG9pbGluZyB0aGUgTmF2eSBSZWZvcm0gQmlsbC4gPC90cmFuc2xhdGlvbj4="
translation['18.313'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgcGFzcyB0aGF0IGJ5LCBmb3IgZmVhciBJIHNob3VsZCBzdHJheSBmcm9tIG15IGltbWVkaWF0ZSBwdXJwb3NlIGJ5IHRlbGxpbmcKICAgICAgICAgICAgICAgICAgICBvbmUgc3RvcnkgYWZ0ZXIgYW5vdGhlci4gSXQgaXMgY2xlYXIgdGhhdCB5b3UgcmVmdXNlZCB0byBjb250cmlidXRlLCBub3QgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHlvdSB3ZXJlIHBvb3IsIGJ1dCBiZWNhdXNlIHlvdSB3ZXJlIGNhcmVmdWwgbm90IHRvIGRvIGFueXRoaW5nIGluIG9wcG9zaXRpb24gdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcGFydHkgeW91IHNlcnZlIGluIHBvbGl0aWNzLiBUaGVuIG9uIHdoYXQgb2NjYXNpb25zIGFyZSB5b3UgYSBtYW4gb2Ygc3Bpcml0PwogICAgICAgICAgICAgICAgICAgIFdoZW4gYXJlIHlvdSBhIHNoaW5pbmcgbGlnaHQ/IFdoZW5ldmVyIHNvbWV0aGluZyBpcyB0byBiZSBzYWlkIGluIHByZWp1ZGljZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgZmVsbG93LWNpdGl6ZW5zOyB0aGVuIHlvdXIgdm9pY2UgaXMgbWFnbmlmaWNlbnQsIHRoZW4geW91ciBtZW1vcnkgaXMKICAgICAgICAgICAgICAgICAgICB3b25kZXJmdWw7IHRoZW4gd2UgaGVhciB0aGUgZ3JlYXQgdHJhZ2VkaWFuLCB0aGUgVGhlb2NyaW5lczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVvY3JpbmVzLCBhIG5vdG9yaW91cyBpbmZvcm1lcjsgcHJvc2VjdXRlZCBpbiBhIHNwZWVjaAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVkIHRvIERlbW9zdGhlbmVzLjwvbm90ZT4gb2YgdGhlIGxlZ2l0aW1hdGUgZHJhbWEuIDwvdHJhbnNsYXRpb24+"
translation['18.314'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZW4geW91IHJlbWluZCB1cyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBoZXJvZXMgb2YgcGFzdCBnZW5lcmF0aW9ucy4gUXVpdGUgcmlnaHQ6IGJ1dCBpdCBpcyBub3QgZmFpciwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYWZmZWN0aW9uIHlvdSBjaGVyaXNoIGZvciB0aGUgZGVwYXJ0ZWQsIGFuZCBhbmFseXplIG1lLCB3aG8gYW0gc3RpbGwgbGl2aW5nIGluCiAgICAgICAgICAgICAgICAgICAgeW91ciBtaWRzdCwgYnkgY29tcGFyaW5nIG1lIHdpdGggdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['18.315'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTUiIHVuaXQ9InNlY3Rpb24iIC8+RXZlcnlib2R5IGtub3dzIHRoYXQgYWdhaW5zdCB0aGUgbGl2aW5nIHRoZXJlIGlzIGFsd2F5cyBhbiB1bmRlcmN1cnJlbnQgb2YKICAgICAgICAgICAgICAgICAgICBtb3JlIG9yIGxlc3MgamVhbG91c3ksIHdoaWxlIHRoZSBkZWFkIGFyZSBubyBsb25nZXIgZGlzbGlrZWQgZXZlbiBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMuIFN1Y2ggaXMgaHVtYW4gbmF0dXJlOyBhbSBJIHRoZW4gdG8gYmUgY3JpdGljaXplZCBhbmQgY2FudmFzc2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbiB3aXRoIG15IHByZWRlY2Vzc29ycz8gSGVhdmVuIGZvcmJpZCEgTm8sIEFlc2NoaW5lczsgdGhhdCBpcyB1bmZhaXIKICAgICAgICAgICAgICAgICAgICBhbmQgdW5qdXN0OiBjb21wYXJlIG1lIHdpdGggeW91cnNlbGYsIG9yIHdpdGggYW55IGxpdmluZyBtYW4geW91IGNob29zZSwgd2hvc2UKICAgICAgICAgICAgICAgICAgICBwcmluY2lwbGVzIGFyZSBpZGVudGljYWwgd2l0aCB5b3Vycy4gPC90cmFuc2xhdGlvbj4="
translation['18.316'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTYiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2lkZXIKICAgICAgICAgICAgICAgICAgICB0aGlzIHF1ZXN0aW9uOiBpcyBpdCBtb3JlIGRlY2VudCBhbmQgcGF0cmlvdGljIHRoYXQgZm9yIHRoZSBzYWtlIG9mIHRoZSBzZXJ2aWNlcwogICAgICAgICAgICAgICAgICAgIG9mIG1lbiBvZiBvbGQgdGltZXMsIGVub3Jtb3VzIGFzIHRoZXkgd2VyZSwgbmF5LCBncmVhdCBiZXlvbmQgZXhwcmVzc2lvbiwgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgdGhhdCBhcmUgbm93IGJlaW5nIHJlbmRlcmVkIHRvIHRoZSBwcmVzZW50IGFnZSBzaG91bGQgYmUgdHJlYXRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgaW5ncmF0aXR1ZGUgYW5kIHZpdHVwZXJhdGlvbiwgb3IgdGhhdCBldmVyeSBtYW4gd2hvIGFjaGlldmVzIGFueXRoaW5nIGluIGEKICAgICAgICAgICAgICAgICAgICBzcGlyaXQgb2YgbG95YWx0eSBzaG91bGQgcmVjZWl2ZSBzb21lIHNoYXJlIG9mIHRoZSByZXNwZWN0IGFuZCBjb25zaWRlcmF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGZlbGxvdy1jaXRpemVucz8gPC90cmFuc2xhdGlvbj4="
translation['18.317'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTciIHVuaXQ9InNlY3Rpb24iIC8+SWYgSSBtdXN0IGRlYWwgd2l0aCB0aGF0CiAgICAgICAgICAgICAgICAgICAgc3ViamVjdCwgSSBzYXkgdGhhdCwgaWYgbXkgcG9saWN5IGFuZCBteSBwcmluY2lwbGVzIGFyZSBjb25zaWRlcmVkLCB0aGV5IHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICBmb3VuZCB0byByZXNlbWJsZSBpbiBzcGlyaXQgYW5kIHB1cnBvc2UgdGhvc2Ugb2YgdGhlIHZlbmVyYXRlZCBuYW1lcyBvZgogICAgICAgICAgICAgICAgICAgIGFudGlxdWl0eS4gWW91cnMgYXJlIGxpa2UgdGhvc2Ugb2YgdGhlIG1lbiB3aG8gbWFsaWduZWQgdGhlbTogZm9yIGl0IGlzIGNlcnRhaW4KICAgICAgICAgICAgICAgICAgICB0aGF0LCBldmVuIGluIHRoZWlyIGRheXMsIHRoZXJlIHdlcmUgbWVuIHdobyB3ZXJlIGFsd2F5cyBjYXJwaW5nIGF0IHRoZSBsaXZpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgY29tbWVuZGluZyB0aGUgZGVhZOKAlGEgc3BpdGVmdWwgdm9jYXRpb24sIGFuZCBqdXN0IGxpa2UgeW91cnMuIFlvdQogICAgICAgICAgICAgICAgICAgIHRlbGwgbWUgSSBhbSBub3QgYXQgYWxsIGxpa2UgdGhvc2UgZ3JlYXQgbWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.318'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTgiIHVuaXQ9InNlY3Rpb24iIC8+QXJlIHlvdSBsaWtlIHRoZW0sIEFlc2NoaW5lcz8gT3IgeW91ciBicm90aGVyPyBPciBhbnkgb3RoZXIgb3JhdG9yIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBnZW5lcmF0aW9uPyBJbiBteSBvcGluaW9uLCBub25lLiBUaGVuLCBteSBob25lc3QgZnJpZW5k4oCUIHRvIGNhbGwgeW91CiAgICAgICAgICAgICAgICAgICAgbm90aGluZyB3b3JzZeKAlGFzc2F5IGEgbGl2aW5nIG1hbiBieSB0aGUgc3RhbmRhcmQgb2YgbGl2aW5nIG1lbiwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biB0aW1lLiBUaGF0IGlzIHRoZSB0ZXN0IHlvdSBhcHBseSB0byBldmVyeXRoaW5nIGVsc2XigJR0bwogICAgICAgICAgICAgICAgICAgIGRyYW1hdGlzdHMsIHRvIGNob3J1c2VzLCB0byBhdGhsZXRlcy4gPC90cmFuc2xhdGlvbj4="
translation['18.319'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMTkiIHVuaXQ9InNlY3Rpb24iIC8+UGhpbGFtbW9uIGRpZCBub3QgbGVhdmUgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHltcGlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHltcGlhIj5PbHltcGlhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBhIGNyb3duLCBiZWNhdXNlIGhlIHdhcyBub3Qgc28gc3Ryb25nIGFzIEdsYXVjdXMgb2YgQ2FyeXN0dXMsIG9yIG90aGVyCiAgICAgICAgICAgICAgICAgICAgYnlnb25lIGNoYW1waW9uczogaGUgd2FzIGNyb3duZWQgYW5kIHByb2NsYWltZWQgdmljdG9yLCBiZWNhdXNlIGhlIGZvdWdodCBiZXR0ZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIHRoZSBtZW4gd2hvIGVudGVyZWQgdGhlIHJpbmcgYWdhaW5zdCBoaW0uIFlvdSBtdXN0IGNvbXBhcmUgbWUgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBvcmF0b3JzIG9mIHRvZGF5OyB3aXRoIHlvdXJzZWxmLCBmb3IgaW5zdGFuY2UsIG9yIGFueW9uZSB5b3UgbGlrZTogSSBleGNsdWRlCiAgICAgICAgICAgICAgICAgICAgbm9uZS4gPC90cmFuc2xhdGlvbj4="
translation['18.320'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjAiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgY29tbW9ud2VhbHRoIHdhcyBhdCBsaWJlcnR5IHRvCiAgICAgICAgICAgICAgICAgICAgY2hvb3NlIHRoZSBiZXN0IHBvbGljeSwgd2hlbiB0aGVyZSB3YXMgYSBjb21wZXRpdGlvbiBvZiBwYXRyaW90aXNtIG9wZW4gdG8gYWxsCiAgICAgICAgICAgICAgICAgICAgY29tZXJzLCBJIG1hZGUgYmV0dGVyIHNwZWVjaGVzIHRoYW4gYW55IG90aGVyIG1hbiwgYW5kIGFsbCBidXNpbmVzcyB3YXMKICAgICAgICAgICAgICAgICAgICBjb25kdWN0ZWQgYnkgbXkgcmVzb2x1dGlvbnMsIG15IHN0YXR1dGVzLCBteSBkaXBsb21hY3kuIE5vdCBvbmUgbyBmIHlvdSBldmVyIHB1dAogICAgICAgICAgICAgICAgICAgIGluIGFuIGFwcGVhcmFuY2XigJQgZXhjZXB0IHdoZW4geW91IG11c3QgbmVlZHMgZmFsbCBmb3VsIG9mIG15IG1lYXN1cmVzLgogICAgICAgICAgICAgICAgICAgIEJ1dCB3aGVuIGNlcnRhaW4gZGVwbG9yYWJsZSBldmVudHMgaGFkIHRha2VuIHBsYWNlLCBhbmQgdGhlcmUgd2FzIGEgY2FsbCwgbm90CiAgICAgICAgICAgICAgICAgICAgZm9yIGNvdW5zZWxsb3JzLCBidXQgZm9yIG1lbiB3aG8gd291bGQgb2JleSBvcmRlcnMsIHdobyB3ZXJlIHJlYWR5IHRvIGluanVyZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIGNvdW50cnkgZm9yIHBheSwgYW5kIHdpbGxpbmcgdG8gdHJ1Y2tsZSB0byBzdHJhbmdlcnMsIHRoZW4geW91IGFuZCB5b3VyCiAgICAgICAgICAgICAgICAgICAgcGFydHkgd2VyZSBhdCB5b3VyIHBvc3QsIGdyZWF0IG1lbiB3aXRoIGdvcmdlb3VzIGVxdWlwYWdlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VG8ga2VlcCBhIHN0dWQgb2YgaG9yc2VzLCB3aGV0aGVyIGZvciByYWNpbmcgcHVycG9zZXMgb3IgZm9yIHVzZQogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY2F2YWxyeSwgd2FzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmF2b3JpdGUgbWV0aG9kIGZvciBkaXNwbGF5aW5nIHdlYWx0aC48L25vdGU+IEkgd2FzIHBvd2VybGVzcywgSSBhZG1pdDsKICAgICAgICAgICAgICAgICAgICBidXQgSSB3YXMgc3RpbGwgdGhlIGJldHRlciBwYXRyaW90LiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGZhdm9yaXRlIG1ldGhvZCBmb3IgZGlzcGxheWluZyB3ZWFsdGguPC90cmFuc2xhdGlvbj4="
translation['18.321'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlIGFyZSB0d28gdHJhaXRzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IG1hcmsgdGhlIGRpc3Bvc2l0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdlbGwtbWVhbmluZyBjaXRpemVuO+KAlHRoYXQgaXMgYSBkZXNjcmlwdGlvbiBJIG1heSBhcHBseSB0byBteXNlbGYKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IG9mZmVuY2UuIFdoZW4gaW4gcG93ZXIsIHRoZSBjb25zdGFudCBhaW0gb2YgaGlzIHBvbGljeSBzaG91bGQgYmUgdGhlCiAgICAgICAgICAgICAgICAgICAgaG9ub3IgYW5kIHRoZSBhc2NlbmRhbmN5IG9mIGhpcyBjb3VudHJ5OyBhbmQgb24gZXZlcnkgb2NjYXNpb24gYW5kIGluIGFsbAogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzIGhlIHNob3VsZCBwcmVzZXJ2ZSBoaXMgbG95YWx0eS4gVGhhdCB2aXJ0dWUgZGVwZW5kcyBvbiBoaXMgbmF0dXJhbAogICAgICAgICAgICAgICAgICAgIGRpc3Bvc2l0aW9uOiBhYmlsaXR5IGFuZCBzdWNjZXNzIGRlcGVuZCB1cG9uIG90aGVyIGNvbnNpZGVyYXRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.322'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjIiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgeW91IHdpbGwgZmluZCwgaGFzIGJlZW4gbXkgZGlzcG9zaXRpb24sCiAgICAgICAgICAgICAgICAgICAgYWJpZGluZ2x5IGFuZCB3aXRob3V0IGFsbG95LiBMb29rIGF0IHRoZSBmYWN0cy4gVGhleSBkZW1hbmRlZCB0aGF0IEkgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gdXA7IHRoZXkgYXJyYWlnbmVkIG1lIGJlZm9yZSB0aGUgQW1waGljdHlvbmljIENvdW5jaWw7IHRoZXkgdHJpZWQgbWUgd2l0aAogICAgICAgICAgICAgICAgICAgIHRocmVhdHMsIHRoZXkgdHJpZWQgbWUgd2l0aCBwcm9taXNlczsgdGhleSBzZXQgdGhlc2UgbWlzY3JlYW50cyB0byB3b3JyeSBtZSBsaWtlCiAgICAgICAgICAgICAgICAgICAgYSBwYWNrIG9mIHdvbHZlczsgYnV0IHRocm91Z2ggaXQgYWxsIEkgbmV2ZXIgcmVub3VuY2VkIG15IGxveWFsdHkgdG8geW91LiBBdCB0aGUKICAgICAgICAgICAgICAgICAgICB2ZXJ5IG91dHNldCBvZiBteSBjYXJlZXIgSSBoYWQgY2hvc2VuIG9uY2UgZm9yIGFsbCB0aGUgcGF0aCBvZiBwb2xpdGljYWwKICAgICAgICAgICAgICAgICAgICB1cHJpZ2h0bmVzcyBhbmQgaW50ZWdyaXR5LCBhbmQgcmVzb2x2ZWQgdG8gc3VwcG9ydCwgdG8gbWFnbmlmeSwgYW5kIHRvIGFzc29jaWF0ZQogICAgICAgICAgICAgICAgICAgIG15c2VsZiB3aXRoIHRoZSBob25vciwgdGhlIHBvd2VyLCBhbmQgdGhlIGdsb3J5IG9mIG15IG5hdGl2ZSBsYW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['18.323'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMjMiIHVuaXQ9InNlY3Rpb24iIC8+SSBkbyBub3QgcGVyYW1idWxhdGUgdGhlIG1hcmtldHBsYWNlLCBnYWlseSBleHVsdGluZwogICAgICAgICAgICAgICAgICAgIGluIHRoZSBnb29kIGZvcnR1bmUgb2YgdGhlIGFsaWVuLCBob2xkaW5nIG91dCBteSByaWdodCBoYW5kLCBhbmQgdGVsbGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBnbGFkIHRpZGluZ3MgdG8gYW55b25lIEkgdGhpbmsgbGlrZWx5IHRvIHNlbmQgd29yZCBvdmVyIHlvbmRlci4gV2hlbiBJIGhlYXIgb2YKICAgICAgICAgICAgICAgICAgICBteSBjb3VudHJ5J3Mgc3VjY2Vzc2VzLCBJIGRvIG5vdCBzaHVkZGVyLCBhbmQgc2lnaCwgYW5kIGhhbmcgZG93biBteSBoZWFkLCBsaWtlCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgYmxhc3BoZW1lcnMsIHdobyB0cmFkdWNlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZm9yZ2V0dGluZyB0aGF0IHRoZXJlYnkgdGhleSBhcmUgdHJhZHVjaW5nIHRoZW1zZWx2ZXM7CiAgICAgICAgICAgICAgICAgICAgd2hvIHR1cm4gdGhlaXIgZXllcyBhYnJvYWQsIGFuZCwgd2hlbiB0aGUgYWxpZW4gaGFzIHByb3NwZXJlZCBieSB0aGUgZGlzdHJlc3NlcwogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiwgYXBwbGF1ZCBoaXMgZ29vZCBmb3J0dW5lLAogICAgICAgICAgICAgICAgICAgIGFuZCBkZWNsYXJlIHRoYXQgd2UgbXVzdCB0cnkgdG8gcHJlc2VydmUgaXQgZm9yIGV2ZXIuIDwvdHJhbnNsYXRpb24+"
translation['18.324'] = ""
translation['19.Intro'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJJbnRybyIgdW5pdD0icGFydCIgLz48L3RyYW5zbGF0aW9uPg=="
translation['19.Narr'] = ""
translation['19.Proof'] = ""
translation['19.Narr'] = ""
translation['19.Concl'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW4gdGhlIHBlYWNlIG9mCiAgICAgICAgICAgICAgICAgICAgUGhpbG9jcmF0ZXMsIHdoaWNoIEFlc2NoaW5lcyBzdXBwb3J0ZWQgaW4gYSBzcGVlY2gsIGhhZCBiZWVuIGNvbmNsdWRlZCwgUGhpbGlwJ3MKICAgICAgICAgICAgICAgICAgICBhbWJhc3NhZG9ycyBhY2NlcHRlZCB0aGUgb2F0aHMsIGFuZCBkZXBhcnRlZC4gU28gZmFyIG5vIGZhdGFsIG1pc2NoaWVmIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgZG9uZS4gVGhlIHBlYWNlIHdhcywgaW5kZWVkLCBkaXNjcmVkaXRhYmxlIGFuZCB1bndvcnRoeSBvZiBBdGhlbnPigJRidXQKICAgICAgICAgICAgICAgICAgICB0aGVuIHdlIHdlcmUgZ29pbmcgdG8gZ2V0IHRob3NlIHdvbmRlcmZ1bCBhZHZhbnRhZ2VzIGluIGV4Y2hhbmdlLiBJIGF0IG9uY2UKICAgICAgICAgICAgICAgICAgICBjYWxsZWQgdXBvbiB5b3UsIGFuZCB0b2xkIHRoZSBlbnZveXMsIHRvIHNhaWwgZm9yIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+IGFzIHNwZWVkaWx5IGFzIHBvc3NpYmxlLCBhbmQgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgYWJhbmRvbiwgb3IgYWxsb3cgUGhpbGlwIHRvIHNlaXplIGFuZCBob2xkLCBhbnkgb2YgdGhlIHBvc2l0aW9ucyB0aGVyZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtZWFudGltZTsgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1MSIgdW5pdD0ic2VjdGlvbiIgLz5mb3Igd2VsbCBJIGtuZXcgdGhhdCBpbmRvbGVudAogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBsb3NlIGZvciBldmVyIGFueXRoaW5nIHRoYXQgdGhleSBsZXQgc2xpcCBpbiB0aGUgdHJhbnNpdGlvbiBmcm9tIHdhciB0bwogICAgICAgICAgICAgICAgICAgIHBlYWNlLiBObyBvbmUsIHdobyBoYXMgYmVlbiBpbmR1Y2VkIGJ5IGdlbmVyYWwgY29uc2lkZXJhdGlvbnMgdG8gc2hlYXRoZSB0aGUKICAgICAgICAgICAgICAgICAgICBzd29yZCwgaXMgZXZlciBpbmNsaW5lZCB0byBiZWdpbiB3YXIgb3ZlciBhZ2FpbiBmb3IgdGhlIHJlY292ZXJ5IG9mIGhpcyBsb3NzZXM7CiAgICAgICAgICAgICAgICAgICAgYW5kIHNvIHRoZSBhcHByb3ByaWF0b3IgcmV0YWlucyBwb3NzZXNzaW9uLiBBcGFydCBmcm9tIHRoZXNlIGNvbnNpZGVyYXRpb25zLCBJCiAgICAgICAgICAgICAgICAgICAgY29uY2VpdmVkIHRoYXQsIGlmIHdlIHNhaWxlZCBhdCBvbmNlLCB0aGUgY2l0eSB3b3VsZCBnYWluIG9uZSBvZiB0d28gYWR2YW50YWdlcy4KICAgICAgICAgICAgICAgICAgICBGb3Igd2hlbiB3ZSB3ZXJlIG9uIHRoZSBzcG90IGFuZCBoYWQgYWNjZXB0ZWQgaGlzIG9hdGggYWNjb3JkaW5nIHRvIHRoZSBkZWNyZWUsCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIGhlIHdvdWxkIHJlc3RvcmUgdGhlIHBsYWNlcyBoZSBoYWQgdGFrZW4gZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIGtlZXAgaGlzIGhhbmRzIG9mZiB0aGUgcmVzdCwKICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1MiIgdW5pdD0ic2VjdGlvbiIgLz5vciwgaWYgaGUgcmVmdXNlZCwgd2UgY291bGQgcHJvbXB0bHkKICAgICAgICAgICAgICAgICAgICByZXBvcnQgaGlzIHJlZnVzYWwuIEluIHRoYXQgY2FzZSB5b3UsIG9ic2VydmluZyBoaXMgZ3Jhc3Bpbmcgc3Bpcml0IGFuZCBwZXJmaWR5CiAgICAgICAgICAgICAgICAgICAgaW4gdGhvc2UgZGlzdGFudCBhbmQgY29tcGFyYXRpdmVseSB1bmltcG9ydGFudCBwbGFjZXMsIHdvdWxkIG5vIGxvbmdlciBiZQogICAgICAgICAgICAgICAgICAgIG5lZ2xpZ2VudCBvZiB0aGUgbW9yZSBpbXBvcnRhbnQgY29uY2VybnMgdGhhdCBsYXkgbmVhcmVyIGhvbWXigJRJIG1lYW4KICAgICAgICAgICAgICAgICAgICB0aGUgUGhvY2lhbnMgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICBJZiBoZSBoYWQgbm90IHNlaXplZCB0aGUgcG9zaXRpb25zLCBhbmQgaWYgdGhlcmUgaGFkIGJlZW4gbm8gZGVjZXB0aW9uIG9mIHlvdSwKICAgICAgICAgICAgICAgICAgICBhbGwgeW91ciBpbnRlcmVzdHMgd2VyZSBzYWZlIGVub3VnaCwgYW5kIHlvdSB3b3VsZCBnZXQgZmFpciB0cmVhdG1lbnQgZnJvbSBoaW0KICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGNvbXB1bHNpb24uIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgYSByZWFzb25hYmxlCiAgICAgICAgICAgICAgICAgICAgZXhwZWN0YXRpb247IGZvciBzbyBsb25nIGFzIHRoZSBQaG9jaWFucyB3ZXJlIHNhZmUsIGFzIHRoZXkgd2VyZSBhdCB0aGUgdGltZSwKICAgICAgICAgICAgICAgICAgICBhbmQgaW4gcG9zc2Vzc2lvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZXJtb3B5bGFlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGVybW9weWxhZSI+VGhlcm1vcHlsYWU8L3BsYWNlTmFtZT4sIHRoZXJlIHdhcyBubyBtZW5hY2Ugd2hpY2ggUGhpbGlwIGNvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBicmFuZGlzaGVkIGluIHlvdXIgZmFjZSB0byBtYWtlIHlvdSBkaXNyZWdhcmQgYW55IG9mIHlvdXIganVzdCBjbGFpbXMuIEhlIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IHJlYWNoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBlaXRoZXIgYnkgYSBtYXJjaAogICAgICAgICAgICAgICAgICAgIGFjcm9zcyBjb3VudHJ5IG9yIGJ5IGdldHRpbmcgY29tbWFuZCBvZiB0aGUgc2Vhcy4gSWYgaGUgcmVmdXNlZCBqdXN0aWNlLCB5b3UKICAgICAgICAgICAgICAgICAgICBjb3VsZCBmb3J0aHdpdGggY2xvc2UgaGlzIHBvcnRzLCBzdG9wIGhpcyBzdXBwbHkgb2YgbW9uZXksIGFuZCBvdGhlcndpc2UgcmVkdWNlCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIGEgc3RhdGUgb2YgYmxvY2thZGU7IGFuZCBzbyBoZSwgYW5kIG5vdCB5b3UsIHdvdWxkIGJlIHdob2xseSBkZXBlbmRlbnQgb24KICAgICAgICAgICAgICAgICAgICB0aGUgY29udGluZ2VudCBiZW5lZml0cyBvZiB0aGUgcGVhY2UuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTQiIHVuaXQ9InNlY3Rpb24iIC8+SSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbm93IHByb3ZlIHRvIHlvdSB0aGF0IEkgYW0gbm90IG1ha2luZyB1cCBhIHN0b3J5IG9yIGNsYWltaW5nIG1lcml0IGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGV2ZW50LCBidXQgdGhhdCBJIGZvcm1lZCBteSBqdWRnZW1lbnQsIGtlcHQgbXkgZXllIG9uIHlvdXIgaW50ZXJlc3RzLCBhbmQgdG9sZAogICAgICAgICAgICAgICAgICAgIHRoZSBlbnZveXMsIHdpdGhvdXQgYW55IGRlbGF5LiBGaW5kaW5nIHRoYXQgeW91IGhhZCBnb3QgdG8gdGhlIGVuZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZWd1bGFyIEFzc2VtYmxpZXMsIGFuZCB0aGF0IHRoZXJlIHdhcyBubyBtZWV0aW5nIGxlZnQsIGFuZCBvYnNlcnZpbmcgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBlbnZveXMgd2VyZSBzdGlsbCB3YXN0aW5nIHRpbWUgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGluc3RlYWQgb2Ygc3RhcnRpbmcgYXQgb25jZSwgSSBwcm9wb3NlZCBhIGRlY3JlZSBhcyBhCiAgICAgICAgICAgICAgICAgICAgbWVtYmVyIG9mIHRoZSBDb3VuY2lsLCB0byB3aGljaCB0aGUgQXNzZW1ibHkgaGFkIGdpdmVuIGF1dGhvcml0eSwgZGlyZWN0aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGVudm95cyB0byBzYWlsIGltbWVkaWF0ZWx5LCBhbmQgdGhlIGdlbmVyYWwgUHJveGVudXMgdG8gY29udmV5IHRoZW0gdG8gYW55IHBsYWNlCiAgICAgICAgICAgICAgICAgICAgaW4gd2hpY2ggaGUgc2hvdWxkIGFzY2VydGFpbiB0aGF0IFBoaWxpcCB3YXMgdG8gYmUgZm91bmQuIEkgZHJhZnRlZCBpdCwgYXMgSSBub3cKICAgICAgICAgICAgICAgICAgICByZWFkIGl0LCBpbiB0aG9zZSBleHByZXNzIHRlcm1zLiBQbGVhc2UgdGFrZSBhbmQgcmVhZCB0aGUgZGVjcmVlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvIEkgZ290IHRoZW0KICAgICAgICAgICAgICAgICAgICBhd2F5IGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBidXQgcXVpdGUgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHdpbGwsIGFzIHlvdSB3aWxsIGVhc2lseSBsZWFybiBmcm9tIHRoZWlyIHN1YnNlcXVlbnQgYmVoYXZpb3IuIFdoZW4gd2UgaGFkCiAgICAgICAgICAgICAgICAgICAgYXJyaXZlZCBhdCBPcmV1cyBhbmQgam9pbmVkIFByb3hlbnVzLCBpbnN0ZWFkIG9mIG9iZXlpbmcgdGhlaXIgaW5zdHJ1Y3Rpb25zIGFuZAogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmcgYnkgc2VhLCB0aGV5IHN0YXJ0ZWQgb24gYSByb3VuZGFib3V0IHRvdXIuIFdlIGhhZCB3YXN0ZWQKICAgICAgICAgICAgICAgICAgICB0aHJlZS1hbmQtdHdlbnR5IGRheXMgYmVmb3JlIHdlIHJlYWNoZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+OyBhbmQgYWxsIHRoZSByZXN0IG9mIHRoZSB0aW1lLCBtYWtpbmcsIHdpdGggdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICBjb25zdW1lZCBieSB0aGUgam91cm5leSwgZmlmdHkgZGF5cyBpbiBhbGwsIHVudGlsIHRoZSBhcnJpdmFsIG9mIFBoaWxpcCwgd2Ugd2VyZQogICAgICAgICAgICAgICAgICAgIGRhd2RsaW5nIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGVsbGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBlbGxhIj5QZWxsYTwvcGxhY2VOYW1lPi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1NiIgdW5pdD0ic2VjdGlvbiIgLz5UaHJvdWdob3V0IHRoYXQgcGVyaW9kIFBoaWxpcCB3YXMgb2NjdXB5aW5nIGFuZAogICAgICAgICAgICAgICAgICAgIGRpc3Bvc2luZyBvZiBEb3Jpc2N1cywgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICBUaHJhY2lhbiBmb3J0cmVzc2VzLCB0aGUgU2FjcmVkIE1vdW50LCBhbmQgc28gZm9ydGgsIGluIHNwaXRlIG9mIHRoZSBwZWFjZSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgYXJtaXN0aWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgSW50cm9kLiBwLiAyNDAuPC9ub3RlPiBBbGwKICAgICAgICAgICAgICAgICAgICB0aGlzIHRpbWUgSSBkaWQgbm90IHNwYXJlIHdvcmRzOyBJIHRhbGtlZCB0byB0aGVtIGZpcnN0IGFzIG9uZSBjb21tdW5pY2F0aW5nIGhpcwogICAgICAgICAgICAgICAgICAgIG9waW5pb24sIHRoZW4gYXMgaW5zdHJ1Y3RpbmcgdGhlIGlnbm9yYW50LCBhbmQgZmluYWxseSBpbiB1bmNvbXByb21pc2luZwogICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlLCBhcyBkZWFsaW5nIHdpdGggY29ycnVwdCBhbmQgcHJvZmxpZ2F0ZSBwZXJzb25zLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTU3IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYW4gd2hvIG9wZW5seSBjb250cmFkaWN0ZWQgbWUsIGFuZCBzZXQgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGluIG9wcG9zaXRpb24gdG8gbXkgYWR2aWNlIGFuZCB5b3VyIGZvcm1hbCByZXNvbHV0aW9ucywgd2FzIEFlc2NoaW5lcy4gWW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBsZWFybiBwcmVzZW50bHkgd2hldGhlciBoaXMgY29uZHVjdCB3YXMgYWdyZWVhYmxlIHRvIGhpcyBjb2xsZWFndWVzLiBGb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9tZW50LCBJIGhhdmUgbm90aGluZyB0byBzYXkgb2YgdGhlbSBieSB3YXkgb2YgZmF1bHQtZmluZGluZy4gVGhleSBtYXkgYWxsIHNob3cKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGhvbmVzdCBtZW4gdG9kYXksIG5vdCBieSBjb21wdWxzaW9uIGJ1dCBvZiB0aGVpciBvd24gZnJlZSB3aWxsLCBhbmQKICAgICAgICAgICAgICAgICAgICBhcyBoYXZpbmcgbm8gc2hhcmUgaW4gdGhvc2UgaW5pcXVpdGllcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhvc2UKICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVycyBvZiB0aGUgZW1iYXNzeSB3aG8gd2VyZSBpbm5vY2VudCBtYXkgY29tZSBmb3J3YXJkIHZvbHVudGFyaWx5IGFuZAogICAgICAgICAgICAgICAgICAgICAgICBkaXNhdm93IEFlc2NoaW5lcy4gRGVtb3N0aGVuZXMgd2lsbCBub3QgZm9yY2UgdGhlbSB0byBjbGVhciB0aGVtc2VsdmVzOyBoZQogICAgICAgICAgICAgICAgICAgICAgICBhY2N1c2VzIG5vbmUgYnV0IHRoZSBjaGllZiBjdWxwcml0LiBUaGUgbmV4dCBzZW50ZW5jZSwgaG93ZXZlciwgaGludHMgdGhhdCwKICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhleSBkbyBub3QgZGlzYXZvdyBoaW0sIHRoZXkgbWF5IHNoYXJlIGhpcyBkaXNncmFjZS48L25vdGU+IFRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVlZHMgZG9uZSB3ZXJlIGRpc2dyYWNlZnVsLCBtb25zdHJvdXMsIGFuZCB2ZW5hbCwgeW91IGhhdmUgYWxyZWFkeSBkaXNjb3ZlcmVkOwogICAgICAgICAgICAgICAgICAgIGxldCBmYWN0cyBkaXNjbG9zZSB3aG8gd2VyZSB0aGUgcGFydGljaXBhdG9ycy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGl0IG1heSBiZSB1cmdlZCB0aGF0IHRoZXkgc3BlbnQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0aW1lIHN3ZWFyaW5nIGluIHRoZSBhbGxpZXMsIG9yIGRpc2NoYXJnaW5nIHNvbWUgb3RoZXIgcGFydCBvZiB0aGVpciBkdXR5LgogICAgICAgICAgICAgICAgICAgIE5vdCBhdCBhbGw7IHRob3VnaCB0aGV5IHdlcmUgb24gdGhlaXIgdHJhdmVscyBmb3IgdGhyZWUgd2hvbGUgbW9udGhzLCBhbmQKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCBmcm9tIHlvdSBhIHRob3VzYW5kIGRyYWNobWFzIGZvciBqb3VybmV5LW1vbmV5LCB0aGV5IGRpZCBub3QgZ2V0IHRoZQogICAgICAgICAgICAgICAgICAgIG9hdGhzIGZyb20gYW55IHNpbmdsZSBjaXR5IGVpdGhlciBvbiB0aGVpciBvdXR3YXJkIGpvdXJuZXkgb3Igb24gdGhlaXIgd2F5IGhvbWUuCiAgICAgICAgICAgICAgICAgICAgVGhlIG9hdGhzIHdlcmUgYWRtaW5pc3RlcmVkIGF0IHRoZSBob3N0ZWxyeSBpbiBmcm9udCBvZiB0aGUgVGVtcGxlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFR3aW5zLOKAlGFueSBvZiB5b3Ugd2hvIGhhdmUgYmVlbiB0byBQaGVyYWUgd2lsbCBrbm93IHRoZSBwbGFjZSBJCiAgICAgICAgICAgICAgICAgICAgbWVhbizigJRhdCB0aGUgdGltZSB3aGVuIFBoaWxpcCB3YXMgYWxyZWFkeSBvbiBoaXMgbWFyY2ggdG93YXJkcwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2l0aCBoaXMgYXJteSwgYW5kIGluIGEKICAgICAgICAgICAgICAgICAgICBtYW5uZXIsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgdGhvcm91Z2hseSBkaXNjcmVkaXRhYmxlIHRvIHRoZSBjaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTU5IiB1bml0PSJzZWN0aW9uIiAvPllldAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCB3b3VsZCBoYXZlIHBhaWQgYW55IHN1bSB0byBoYXZlIG1hdHRlcnMgbWFuYWdlZCBpbiB0aGlzIHdheS4gRm9yIHdoZW4KICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4gaGFkIGZhaWxlZCB0byBkcmF3IHRoZSB0cmVhdHksIGFzIHRoZXkgZmlyc3QgdHJpZWQgdG8gZG8sIHdpdGggYQogICAgICAgICAgICAgICAgICAgIGNsYXVzZSBleGNlcHRpbmcgdGhlIEhhbGlhbnMgYW5kIHRoZSBQaG9jaWFucywgYW5kIFBoaWxvY3JhdGVzIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgY29tcGVsbGVkIGJ5IHlvdSB0byBlcmFzZSB0aG9zZSB3b3JkcyBhbmQgd3JpdGUgZXhwcmVzc2x5LCDigJx0aGUKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMgYW5kIHRoZSBBbGxpZXMgb2YgdGhlIEF0aGVuaWFucyzigJ0gdG8gdGhlIHRyZWF0eSBzbyBkcmF3bgogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBkaWQgbm90IHdpc2ggYW55IG9mIGhpcyBhbGxpZXMgdG8gaGF2ZSBzd29ybjsgZm9yIHRoZW4gdGhleSB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlZCB0byBqb2luIGluIGhpcyBmb3JjaWJsZSBvY2N1cGF0aW9uIG9mIHRob3NlIHBvc3Nlc3Npb25zIG9mIHlvdXJzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgbm93IGhvbGRzLCBhbmQgdGhlIG9hdGggd291bGQgaGF2ZSBiZWVuIHRoZWlyIGV4Y3VzZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2MCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgZGlkIGhlIGRlc2lyZSB3aXRuZXNzZXMgb2YgdGhlIHByb21pc2VzIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHN0cmVuZ3RoIG9mIHdoaWNoIGhlIHdhcyBvYnRhaW5pbmcgdGhlIHBlYWNlLCBub3IgYW55IHB1YmxpYyBkaXNjbG9zdXJlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZhY3QgdGhhdCBhZnRlciBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGhhZCBub3QKICAgICAgICAgICAgICAgICAgICBiZWVuIGJlYXRlbiBpbiB0aGUgd2FyLCBhbmQgdGhhdCBpdCB3YXMgUGhpbGlwIHdobyB3YXMgcmVhbGx5IGVhZ2VyIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBwZWFjZSwgYW5kIHdhcyByZWFkeSB0byBtYWtlIGxhcmdlIHByb21pc2VzIHRvIHRoZSBBdGhlbmlhbnMgaWYgaGUgY291bGQgZ2V0IGl0LgogICAgICAgICAgICAgICAgICAgIFRoZXJlZm9yZSBoZSBkaXNhcHByb3ZlZCBvZiB0aGVzZSBtZW4gZ29pbmcgYW55d2hlcmUsIGxlc3QgdGhlIGZhY3RzIHRoYXQgSSBhbQogICAgICAgICAgICAgICAgICAgIHN0YXRpbmcgc2hvdWxkIGJlY29tZSBnZW5lcmFsbHkga25vd247IGFuZCB0aGV5IHdlcmUgcmVhZHkgdG8gZ3JhdGlmeSBoaW0gd2l0aAogICAgICAgICAgICAgICAgICAgIG9zdGVudGF0aW91cyBkZWZlcmVuY2UgYW5kIGV4dHJhdmFnYW50IGFkdWxhdGlvbi4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2MSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsIHdoZW4gdGhleSBhcmUgY29udmljdGVkIG9mIGFsbCB0aGVzZSBkZWxpbnF1ZW5jaWVzLCBvZiBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBzcXVhbmRlcmVkIHRoZWlyIHRpbWUsIHRocm93biBhd2F5IHRoZSBUaHJhY2lhbiBvdXRwb3N0cywgZG9uZSBub3RoaW5nIGFncmVlYWJsZQogICAgICAgICAgICAgICAgICAgIGVpdGhlciB0byB5b3VyIGluc3RydWN0aW9ucyBvciB0byBzb3VuZCBwb2xpY3ksIGFuZCBzZW50IGx5aW5nIGRpc3BhdGNoZXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBob3cgY2FuIHRoaXMgbWFuCiAgICAgICAgICAgICAgICAgICAgcG9zc2libHkgZmluZCBhIHdheSBvZiBlc2NhcGUgYmVmb3JlIGFuIGludGVsbGlnZW50IGFuZCBjb25zY2llbnRpb3VzIGp1cnk/CiAgICAgICAgICAgICAgICAgICAgSG93ZXZlciwgdG8gcHJvdmUgdGhlIHRydXRoIG9mIG15IHN0YXRlbWVudHMsIHJlYWQgZmlyc3QgdGhlIGRlY3JlZSBnaXZpbmcKICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb25zIGZvciB0aGUgYWRtaW5pc3RyYXRpb24gb2YgdGhlIG9hdGgsIHRoZW4gUGhpbGlwJ3MgbGV0dGVyLCBhbmQgdGhlbgogICAgICAgICAgICAgICAgICAgIHRoZSBkZWNyZWUgb2YgUGhpbG9jcmF0ZXMsIGFuZCB0aGUgZGVjcmVlIG9mIHRoZSBBc3NlbWJseS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSwKICAgICAgICAgICAgICAgICAgICBtb3Jlb3ZlciwgdGhhdCB3ZSBzaG91bGQgaGF2ZSBjYXVnaHQgUGhpbGlwIGF0IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+LCBpZiBteSBhZHZpY2UgaGFkIGJlZW4gdGFrZW4gYW5kIHlvdXIgZGlyZWN0aW9ucwogICAgICAgICAgICAgICAgICAgIG9iZXllZCBpbiB0aGUgdGVybXMgb2YgdGhlIGRlY3JlZXMsIGNhbGwgdGhlIHdpdG5lc3NlcyB3aG8gd2VyZSB0aGVyZQogICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgcmVhZCB0aGUgb3RoZXIgZGVwb3NpdGlvbiB0ZXN0aWZ5aW5nCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGFuc3dlciBtYWRlIGJ5IFBoaWxpcCB0byBFdWNsZWlkZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RXVjbGVpZGVzOiBzZW50IHRvIHByb3Rlc3QgYWdhaW5zdCBQaGlsaXAncyBpbnZhc2lvbiBvZiB0aGUgZG9taW5pb25zIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIENlcnNvYmxlcHRlcy48L25vdGU+IGhlcmUsIHdobyBhcnJpdmVkIGxhdGVyLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+77yIVGhlIERlcG9zaXRpb24gaXMgcmVhZO+8iTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCBtZSBzaG93CiAgICAgICAgICAgICAgICAgICAgeW91IHRoYXQgdGhlcmUgaXMgbm8gd2F5IG9mIGRlbnlpbmcgdGhhdCB0aGV5IHdlcmUgYWN0aW5nIGluIHRoZSBpbnRlcmVzdCBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxpcC4gV2hlbiB3ZSB3ZXJlIHNldHRpbmcgb3V0IG9uIHRoZSBmb3JtZXIgZW1iYXNzeSBmb3IgcGVhY2UsIHlvdSBzZW50CiAgICAgICAgICAgICAgICAgICAgZm9yd2FyZCBhIGhlcmFsZCB0byBhcnJhbmdlIG91ciBzYWZlLWNvbmR1Y3QuIE9uIHRoYXQgb2NjYXNpb24sIGFzIHNvb24gYXMgdGhleQogICAgICAgICAgICAgICAgICAgIHJlYWNoZWQgT3JldXMsIHRoZXkgd2FzdGVkIG5vIHRpbWUgdGhlcmUgd2FpdGluZyBmb3IgdGhlIGhlcmFsZC4gQWx0aG91Z2ggSGFsdXMKICAgICAgICAgICAgICAgICAgICB3YXMgYmVsZWFndWVyZWQsIHRoZXkgY3Jvc3NlZCB0aGUgc2VhIHRoaXRoZXI7IHRoZW4gbGVmdCB0aGUgdG93biBhbmQgd2VudCB0bwogICAgICAgICAgICAgICAgICAgIFBhcm1lbmlvLCB3aG8gd2FzIGNvbmR1Y3RpbmcgdGhlIHNpZWdlOyBzZXQgb2ZmIHRocm91Z2ggdGhlIGVuZW1pZXMnIHBvc2l0aW9ucwogICAgICAgICAgICAgICAgICAgIGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA4NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDg0Ij5QYWdhc2FlPC9wbGFjZU5hbWU+LCBhbmQgY29udGludWVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgam91cm5leSB0aWxsIHRoZXkgbWV0IHRoZSBoZXJhbGQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxMYXJpc3NhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxMYXJpc3NhIj5MYXJpc3NhPC9wbGFjZU5hbWU+LiBTdWNoIHdhcyB0aGUgZW5lcmd5IGFuZCBnb29kd2lsbCB3aXRoIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICB0cmF2ZWxsZWQgdGhlbjsgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2NCIgdW5pdD0ic2VjdGlvbiIgLz5idXQgbm93LCBpbiB0aW1lIG9mIHBlYWNlLAogICAgICAgICAgICAgICAgICAgIHdpdGggY29tcGxldGUgc2VjdXJpdHkgZm9yIHRyYXZlbGxpbmcsIGFuZCB3aXRoIHlvdXIgaW5qdW5jdGlvbnMgb2YgaGFzdGUsIGl0CiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgb2NjdXJyZWQgdG8gdGhlbSB0byBoYXN0ZW4gdGhlaXIgam91cm5leSBieSBsYW5kIG9yIHRvIHRyYXZlbCBieSBzZWEuIFdoeQogICAgICAgICAgICAgICAgICAgIHNvPyBCZWNhdXNlIHRoZW4gaXQgd2FzIHRvIFBoaWxpcCdzIGFkdmFudGFnZSB0aGF0IHBlYWNlIHNob3VsZCBiZSBjb25jbHVkZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIGFsbCBzcGVlZCwgYnV0IG5vdyB0aGF0IGFzIG11Y2ggdGltZSBhcyBwb3NzaWJsZSBzaG91bGQgYmUgd2FzdGVkIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHRoZSBhZG1pbmlzdHJhdGlvbiBvZiB0aGUgb2F0aHMuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgc3RhdGVtZW50IGFsc28gaXMgdHJ1ZSwgdGFrZSBhbmQgcmVhZCB0aGlzIGRlcG9zaXRpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBjb3VsZCBtZW4gYmUgbW9yZSBjbGVhcmx5IGNvbnZpY3RlZAogICAgICAgICAgICAgICAgICAgIG9mIGFjdGluZyB0aHJvdWdob3V0IGluIHRoZSBpbnRlcmVzdCBvZiBQaGlsaXA/IEl0IHdhcyB0aGUgc2FtZSBqb3VybmV5OiB0aGV5CiAgICAgICAgICAgICAgICAgICAgbG9pdGVyZWQgd2hlbiB0aGV5IHNob3VsZCBoYXZlIGJlc3RpcnJlZCB0aGVtc2VsdmVzIGluIHlvdXIgc2VydmljZTsgdGhleQogICAgICAgICAgICAgICAgICAgIGh1cnJpZWQgd2hlbiB0aGV5IG91Z2h0IG5vdCB0byBoYXZlIG1vdmVkIGEgc3RlcCB1bnRpbCB0aGUgYXJyaXZhbCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBoZXJhbGQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UKICAgICAgICAgICAgICAgICAgICBuZXh0IHRoZSBwZXJpb2Qgb2Ygb3VyIGxvaXRlcmluZyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBlbGxhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQZWxsYSI+UGVsbGE8L3BsYWNlTmFtZT4sIGFuZCBjb21wYXJlIHRoZSBlbXBsb3ltZW50cyB3aGljaCB3ZSBzZXZlcmFsbHkgY2hvc2UgZm9yCiAgICAgICAgICAgICAgICAgICAgb3Vyc2VsdmVzLiBNaW5lIHdhcyB0byBzZWVrIG91dCBhbmQgcmVzY3VlIHRoZSBjYXB0aXZlcywgc3BlbmRpbmcgbW9uZXkgb2YgbXkKICAgICAgICAgICAgICAgICAgICBvd24sIGFuZCBhc2tpbmcgUGhpbGlwIHRvIGFwcGx5IHRvIHRoZWlyIHJhbnNvbSB0aGUgbW9uZXkgaGUgd2FzIHNwZW5kaW5nIG9uCiAgICAgICAgICAgICAgICAgICAgaG9zcGl0YWJsZSBnaWZ0cyBmb3IgdXMuIEJ1dCB3aGF0IEFlc2NoaW5lcyBjb25zdGFudGx5IHRyaWVkIHRvIGVmZmVjdCwgeW91CiAgICAgICAgICAgICAgICAgICAgc2hhbGwgaGVhciBpbiBhIG1vbWVudC4gV2hhdCB0aGVuIHdhcyBpdD8gSXQgd2FzIHRoYXQgUGhpbGlwIHNob3VsZCBnaXZlIHVzIGEKICAgICAgICAgICAgICAgICAgICBsdW1wIHN1bSBhcyBhIGNvbGxlY3RpdmUgcHJlc2VudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2NyIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgbXVzdAogICAgICAgICAgICAgICAgICAgIGtub3cgdGhhdCBQaGlsaXAgd2FzIGFscmVhZHkgc291bmRpbmcgdXMgYWxsIGluIHRoaXMgd2F5OiBoZSBzZW50IHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcyB0byBlYWNoIG9mIHVzIGluIHR1cm4sIHdpdGggdGhlIG9mZmVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBvZiBhIHJlYWxseSBsYXJnZSBzdW0gaW4gZ29sZC4KICAgICAgICAgICAgICAgICAgICBIYXZpbmcgZmFpbGVkIGluIHNvbWUgY2FzZSBvciBvdGhlcizigJRpbiB3aGF0IGNhc2UgbGV0IHRoZSByZXN1bHQKICAgICAgICAgICAgICAgICAgICBkaXNjbG9zZTsgaXQgaXMgbm90IGZvciBtZSB0byBuYW1lIG15c2VsZizigJRoZSBjb25jZWl2ZWQgdGhhdCBhCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGl2ZSBwcmVzZW50IG1pZ2h0IGJlIGFjY2VwdGVkIGJ5IGFsbCBvZiB1cyB3aXRob3V0IG1pc2dpdmluZzsgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSB3b3VsZCBiZSBzZWN1cml0eSBmb3IgdGhvc2Ugd2hvIGhhZCBpbmRpdmlkdWFsbHkgc29sZCB0aGVtc2VsdmVzLCBpZiB3ZQogICAgICAgICAgICAgICAgICAgIGFsbCBzaGFyZWQgZXZlbiB0byBhIHRyaWZsaW5nIGV4dGVudCBpbiB0aGUgZ2VuZXJhbCBhY2NlcHRhbmNlLiBBY2NvcmRpbmdseSBpdAogICAgICAgICAgICAgICAgICAgIHdhcyBvZmZlcmVkLOKAlG5vbWluYWxseSwgYXMgYSBmb3JtIG9mIGhvc3BpdGFsaXR5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTY4IiB1bml0PSJzZWN0aW9uIiAvPkkgc3RvcHBlZCB0aGF0IG1hbm9ldXZyZTsgYW5kIHRoZW4gdGhlc2UgbWVuIGRpdmlkZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IG1vbmV5IGFsc28gYW1vbmcgdGhlbXNlbHZlcy4gV2hlbiBJIGFza2VkIFBoaWxpcCB0byBzcGVuZCBpdCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBjYXB0aXZlcywgaGUgY291bGQgbm90IHdpdGggZGVjZW5jeSBlaXRoZXIgaW5mb3JtIGFnYWluc3QgdGhlbSBieSByZXBseWluZywKICAgICAgICAgICAgICAgICAgICDigJxJdCBpcyBpbiBzby1hbmQtc28ncyBwb2NrZXRzLOKAnSBvciBlc2NhcGUgdGhlIG91dGxheTsgc28gaGUKICAgICAgICAgICAgICAgICAgICBtYWRlIG1lIHRoZSBwcm9taXNlLCBidXQgZXZhZGVkIHBlcmZvcm1hbmNlIGJ5IHNheWluZyB0aGF0IGhlIHdvdWxkIHNlbmQgdGhlIG1lbgogICAgICAgICAgICAgICAgICAgIGhvbWUgaW4gdGltZSBmb3IgdGhlIFBhbmF0aGVuYWljIEZlc3RpdmFsLiBSZWFkIHRoZSBkZXBvc2l0aW9uIG9mIEFwb2xsb3BoYW5lcywKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlbiB0aG9zZSBvZiB0aGUgb3RoZXIgcGVyc29ucyB3aG8gd2VyZSB0aGVyZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTY5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5MZXQgbWUgbm93CiAgICAgICAgICAgICAgICAgICAgdGVsbCB5b3UgaG93IG1hbnkgb2YgdGhlIGNhcHRpdmVzIEkgcmFuc29tZWQgbXlzZWxmLiBGb3Igd2hpbGUgd2Ugd2VyZSBzdGF5aW5nCiAgICAgICAgICAgICAgICAgICAgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQZWxsYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGVsbGEiPlBlbGxhPC9wbGFjZU5hbWU+LCBiZWZvcmUgUGhpbGlwJ3MgYXJyaXZhbCwKICAgICAgICAgICAgICAgICAgICBzb21lIG9mIHRoZSBwcmlzb25lcnMs4oCUYWxsIGluIGZhY3Qgd2hvIHdlcmUgb3V0IG9uCiAgICAgICAgICAgICAgICAgICAgYmFpbCzigJRoYXZpbmcsIEkgc3VwcG9zZSwgbm8gY29uZmlkZW5jZSB0aGF0IHRoZXkgd291bGQgYWZ0ZXJ3YXJkcyBiZQogICAgICAgICAgICAgICAgICAgIGFibGUgdG8gaW5kdWNlIFBoaWxpcCB0byBtb3ZlLCB0b2xkIG1lIHRoYXQgdGhleSB3ZXJlIHdpbGxpbmcgdG8gcHJvdmlkZSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGVpciBvd24gcmFuc29tIHdpdGhvdXQgcHV0dGluZyB0aGVtc2VsdmVzIHVuZGVyIG9ibGlnYXRpb24gdG8gUGhpbGlwLCBhbmQKICAgICAgICAgICAgICAgICAgICBvZmZlcmVkIHRvIGJvcnJvdyB0aGVpciByYW5zb20tbW9uZXksIHRocmVlIG1pbmFzLCBmaXZlIG1pbmFzLCBvciBhcyB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTcwIiB1bml0PSJzZWN0aW9uIiAvPlNvIHdoZW4gUGhpbGlwIGFncmVlZCB0byBnZXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVsZWFzZSBvZiB0aGUgcmVzdCwgSSBjYWxsZWQgdG9nZXRoZXIgdGhlc2UgbWVuLCB0byB3aG9tIEkgaGFkIGxlbnQgdGhlIG1vbmV5CiAgICAgICAgICAgICAgICAgICAgYXMgYSBmcmllbmRseSBsb2FuLCByZW1pbmRlZCB0aGVtIG9mIHRoZSB0cmFuc2FjdGlvbiwgYW5kIG1hZGUgdGhlbSBhIGZyZWUgZ2lmdAogICAgICAgICAgICAgICAgICAgIG9mIHRoZWlyIHJhbnNvbS1tb25leSwgbGVzdCB0aGV5IHNob3VsZCBzZWVtIHRvIGhhdmUgYmVlbiBwdXQgaW50byBhIHdvcnNlCiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gYnkgdGhlaXIgaW1wZXR1b3NpdHksIG9yIHRvIGhhdmUgYmVlbiByYW5zb21lZCwgdGhvdWdoIHBvb3IgbWVuLCBhdAogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biBleHBlbnNlLCB3aGlsZSB0aGUgcmVzdCB3ZXJlIGV4cGVjdGluZyBkZWxpdmVyYW5jZSBmcm9tIFBoaWxpcC4gVG8KICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGUgdHJ1dGggb2YgbXkgc3RhdGVtZW50LCByZWFkIHRoZXNlIGRlcG9zaXRpb25zIGFsc28uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzdW1zIG9mIG1vbmV5IEkgZ2F2ZSBhd2F5IGFzIGEgZnJlZSBnaWZ0IHRvIG15IGZlbGxvdy1jaXRpemVucyBpbiBkaXN0cmVzcy4gSWYKICAgICAgICAgICAgICAgICAgICBBZXNjaGluZXMgaW4gYWRkcmVzc2luZyB5b3Ugc2hvdWxkIHNheSBwcmVzZW50bHk6IOKAnERlbW9zdGhlbmVzLCBpZiB5b3UKICAgICAgICAgICAgICAgICAgICByZWFsbHkgaW5mZXJyZWQgZnJvbSBteSBzcGVlY2ggaW4gc3VwcG9ydCBvZiBQaGlsb2NyYXRlcyB0aGF0IG91ciBjb25kdWN0IHdhcwogICAgICAgICAgICAgICAgICAgIHRob3JvdWdobHkgY29ycnVwdCwgd2h5IGRpZCB5b3Ugam9pbiB1cyBvbiB0aGUgc3Vic2VxdWVudCBlbWJhc3N5IHRvIHJlY2VpdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgb2F0aHMsIGluc3RlYWQgb2YgZXhjdXNpbmcgeW91cnNlbGY/4oCdIHlvdSBtdXN0IHJlbWVtYmVyIHRoYXQgSSBoYWQKICAgICAgICAgICAgICAgICAgICBwcm9taXNlZCB0aGUgcHJpc29uZXJzIHdob20gSSBkZWxpdmVyZWQgdGhhdCBJIHdvdWxkIGJyaW5nIHRoZSByYW5zb20tbW9uZXkgYW5kCiAgICAgICAgICAgICAgICAgICAgZG8gbXkgdXRtb3N0IGZvciB0aGVpciByZXNjdWUuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd291bGQKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgaGF2ZSBiZWVuIHRvbyBiYWQgdG8gYnJlYWsgbXkgd29yZCBhbmQgYWJhbmRvbiBmZWxsb3ctY3JlYXR1cmVzIGFuZAogICAgICAgICAgICAgICAgICAgIGZlbGxvdy1jaXRpemVucyBpbiBtaXNmb3J0dW5lLiBIYWQgSSBkZWNsaW5lZCBvbiBvYXRoLCBhIHByaXZhdGUgZXhjdXJzaW9uIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDA2NjY3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDY2NjciPk1hY2Vkb25pYTwvcGxhY2VOYW1lPiB3b3VsZCBoYXZlIGJlZW4gbmVpdGhlcgogICAgICAgICAgICAgICAgICAgIGRlY2VudCBub3Igc2FmZS4gRXhjZXB0IGZvciBteSBzdHJvbmcgZGVzaXJlIHRvIGxpYmVyYXRlIHRob3NlIG1lbiwgbWF5IEkgZGllCiAgICAgICAgICAgICAgICAgICAgbWlzZXJhYmx5IGJlZm9yZSBteSB0aW1lPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBHcmVlayBwaHJhc2UsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIG9jY3VycyBhbHNvIGF0IHRoZSBlbmQgb2YgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGNvcm9uYTwvdGl0bGU+LCBzdWdnZXN0cyBieSBpdHMKICAgICAgICAgICAgICAgICAgICAgICAgamluZ2xlIHRoZSBmb3JtdWxhIG9mIHNvbWUgY3Vyc2UsIGJ1dCBjYW5ub3QgYmUgd2VsbCByZXByb2R1Y2VkIGluCiAgICAgICAgICAgICAgICAgICAgICAgIEVuZ2xpc2guPC9ub3RlPiBpZiBhbnkgcmV3YXJkIHdvdWxkIGhhdmUgaW5kdWNlZCBtZSB0byBhY2NlcHQgYW4gZW1iYXNzeQogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlc2UgbWVuIGFzIG15IGNvbGxlYWd1ZXMuIEkgcHJvdmVkIHRoYXQgYnkgdHdpY2UgZXhjdXNpbmcgbXlzZWxmIHdoZW4geW91CiAgICAgICAgICAgICAgICAgICAgdHdpY2UgYXBwb2ludGVkIG1lIHRvIHRoZSB0aGlyZCBlbWJhc3N5LCBhbmQgYWxzbyBieSBteSBjb25zdGFudCBvcHBvc2l0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbSBvbiB0aGlzIGpvdXJuZXkuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGNvcm9uYTwvdGl0bGU+LCBzdWdnZXN0cyBieSBpdHMKICAgICAgICAgICAgICAgICAgICAgICAgamluZ2xlIHRoZSBmb3JtdWxhIG9mIHNvbWUgY3Vyc2UsIGJ1dCBjYW5ub3QgYmUgd2VsbCByZXByb2R1Y2VkIGluCiAgICAgICAgICAgICAgICAgICAgICAgIEVuZ2xpc2guPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28gdGhlIGJ1c2luZXNzIHdoaWNoIEkgY29udHJvbGxlZCBieSBteXNlbGYgb24gdGhlIGVtYmFzc3kgdHVybmVkCiAgICAgICAgICAgICAgICAgICAgb3V0IGluIHRoaXMgZmFzaGlvbiB0byB5b3VyIGFkdmFudGFnZSwgYWx0aG91Z2gsIHdoZXJlIHRoZSBtYWpvcml0eSBwcmV2YWlsZWQsCiAgICAgICAgICAgICAgICAgICAgZXZlcnl0aGluZyB3ZW50IHRvIHJ1aW4uIEluZGVlZCwgaWYgbXkgYWR2aWNlIGhhZCBiZWVuIHRha2VuLCBhbGwgb3VyCiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zIG1pZ2h0IGhhdmUgaGFkIGFuIGVxdWFsbHkgZm9ydHVuYXRlIGlzc3VlOyBmb3IgSSB3YXMgbm90IHNvIGZvb2xpc2gKICAgICAgICAgICAgICAgICAgICBhbmQgc3R1cGlkIGFzIHRvIGxvc2UgbW9uZXksIHdoaWxlIG90aGVycyB3ZXJlIG1ha2luZyBtb25leSwgb3V0IG9mIHNoZWVyIHB1YmxpYwogICAgICAgICAgICAgICAgICAgIHNwaXJpdCwgYW5kIHRoZW4gb2JqZWN0IHRvIGEgY291cnNlIG9mIGFjdGlvbiB0aGF0IHdvdWxkIGhhdmUgY29zdCBubyBleHBlbnNlLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IG9mZmVyZWQgZmFyIGdyZWF0ZXIgYWR2YW50YWdlcyB0byB0aGUgd2hvbGUgY29tbW9ud2VhbHRoLiBZZXMsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoZSBpc3N1ZSBtaWdodCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBmb3J0dW5hdGUgaW5kZWVkOyBvbmx5IHRoZXNlIG1lbiBoYWQgdGhlaXIgd2F5LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTc0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgbm93IEkgYXNrIHlvdSB0byBsb29rIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGFjdHMgb2YgQWVzY2hpbmVzIGFuZCB0aG9zZSBvZiBQaGlsb2NyYXRlcywgaW4gY29tcGFyaXNvbiB3aXRoIG1pbmU7IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBjb250cmFzdCB3aWxsIGhlbHAgdG8gZXhwb3NlIHRoZW0uIEZpcnN0LCBpbiB2aW9sYXRpb24gYm90aCBvZiB0aGUgZGVjcmVlIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIGFzc3VyYW5jZXMgZ2l2ZW4gdG8geW91LCB0aGV5IGV4Y2x1ZGVkIHRoZSBIYWxpYW5zLCB0aGUgUGhvY2lhbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIENlcnNvYmxlcHRlcywgZnJvbSB0aGUgYmVuZWZpdHMgb2YgdGhlIHRyZWF0eS4gVGhlbiB0aGV5IGF0dGVtcHRlZCB0byB0YW1wZXIKICAgICAgICAgICAgICAgICAgICB3aXRoIGFuZCByZXBlYWwgdGhlIGRlY3JlZSBmcm9tIHdoaWNoIG91ciBvd24gYXV0aG9yaXR5IHdhcyBkZXJpdmVkLiBOZXh0IHRoZXkKICAgICAgICAgICAgICAgICAgICBlbnRlcmVkIHRoZSBDYXJkaWFucyBhcyBhbGxpZXMgb2YgUGhpbGlwLCBhbmQgcmVmdXNlZCBieSBhIGRlZmluaXRlIHZvdGUgdG8gc2VuZAogICAgICAgICAgICAgICAgICAgIGEgZGlzcGF0Y2ggd3JpdHRlbiBieSBtZSwgYnV0IHRoZW1zZWx2ZXMgY29tcG9zZWQgYW5kIHNlbnQgb25lIHRoYXQgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIGNvbnRhaW4gYW4gaG9uZXN0IHdvcmQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYmVjYXVzZSBJCiAgICAgICAgICAgICAgICAgICAgb2JqZWN0ZWQgdG8gdGhlaXIgYWN0cywgbm90IG9ubHkgdGhpbmtpbmcgdGhlbSBkaXNob25vcmFibGUgYnV0IGZlYXJpbmcgdGhhdCBJCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgc2hhcmUgdGhlIHJ1aW4gdGhleSB3ZXJlIGJyaW5naW5nIG9uIHRoZW1zZWx2ZXMsIG91ciBjaGl2YWxyb3VzIGZyaWVuZAogICAgICAgICAgICAgICAgICAgIGFjY3VzZWQgbWUgb2YgcHJvbWlzaW5nIHRvIFBoaWxpcCB0aGF0IEkgd291bGQgb3ZlcnRocm93IHRoZSBBdGhlbmlhbiBkZW1vY3JhY3ksCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgYWxsIHRoZSB0aW1lIGhlIHdhcyBoaW1zZWxmIGNvbnN0YW50bHkgaG9sZGluZyBwcml2YXRlIGNvbW11bmljYXRpb25zIHdpdGgKICAgICAgICAgICAgICAgICAgICBQaGlsaXAuIEkgbmVlZCBvbmx5IG1lbnRpb24gdGhhdCBub3QgSSBidXQgRGVyY3lsdXMsIHdpdGggdGhlIGhlbHAgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIHNlcnZhbnQgb2YgbWluZSwgd2F0Y2hlZCBoaW0gYnkgbmlnaHQgYXQgUGhlcmFlLCBjYXVnaHQgaGltIGVtZXJnaW5nIGZyb20KICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyB0ZW50LCBhbmQgdG9sZCB0aGUgc2VydmFudCB0byBsZXQgbWUga25vdywgYW5kIG5vdCB0byBmb3JnZXQgaXQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmOyBhbmQgdGhhdCBpbiB0aGUgZW5kIHRoaXMgaW1wdWRlbnQgYmxhY2tndWFyZCBzdGF5ZWQgd2l0aCBQaGlsaXAgZm9yIGEKICAgICAgICAgICAgICAgICAgICBkYXkgYW5kIGEgbmlnaHQgb24gb3VyIGRlcGFydHVyZS4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3NiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwcm92ZQogICAgICAgICAgICAgICAgICAgIHRoZSB0cnV0aCBvZiB0aGVzZSBzdGF0ZW1lbnRzLCBpbiB0aGUgZmlyc3QgcGxhY2UgSSB3aWxsIGdpdmUgZXZpZGVuY2UgbXlzZWxmLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBkdWx5IHdyaXR0ZW4gZG93biBteSBkZXBvc2l0aW9uIGFuZCBpbmN1cnJlZCBsZWdhbCByZXNwb25zaWJpbGl0eTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JdCBzaG91bGQgYmUgcmVtZW1iZXJlZCB0aGF0IGFsbCBldmlkZW5jZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gY291cnRzIHdhcyBkZXBvc2l0ZWQgaW4gd3JpdGluZyBiZWZvcmUgdGhlIHRyaWFsLiBUaGVyZSB3YXMgbm8KICAgICAgICAgICAgICAgICAgICAgICAgdmVyYmFsIGV2aWRlbmNlIGFuZCBubyBjcm9zcy1leGFtaW5hdGlvbi4gQnkgYXR0ZXN0aW5nIHVuZGVyIG9hdGggdGhlIHRydXRoCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGhpcyBkZXBvc2l0aW9uLCB0aGUgd2l0bmVzcyBvZiBjb3Vyc2UgbWFkZSBoaW1zZWxmIGFuc3dlcmFibGUgdG8gYSBjaGFyZ2UKICAgICAgICAgICAgICAgICAgICAgICAgb2YgcGVyanVyeS48L25vdGU+OyBhbmQgSSB3aWxsIHRoZW4gY2FsbCB0aGUgb3RoZXIgYW1iYXNzYWRvcnMgaW4gdHVybiwgYW5kCiAgICAgICAgICAgICAgICAgICAgY29tcGVsIHRoZW0gZWl0aGVyIHRvIHRlc3RpZnksIG9yIHRvIHRha2Ugb2F0aCB0aGF0IHRoZXkgYXJlIHVuYWJsZSB0byB0ZXN0aWZ5LgogICAgICAgICAgICAgICAgICAgIElmIHRoZXkgdGFrZSB0aGUgb2F0aCwgSSBzaGFsbCBlYXNpbHkgY29udmljdCB0aGVtIG9mIHBlcmp1cnkuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgc2VlbgogICAgICAgICAgICAgICAgICAgIGhvdyBJIHdhcyBoYXJhc3NlZCBieSB0cm91YmxlcyBhbmQgYW5ub3lhbmNlIHRocm91Z2hvdXQgdGhlIGV4cGVkaXRpb24uIFlvdSBjYW4KICAgICAgICAgICAgICAgICAgICBpbWFnaW5lIGhvdyB0aGV5IGJlaGF2ZWQgdGhlcmUsIHdpdGggdGhlaXIgcGF5bWFzdGVyIG5leHQgZG9vciwgd2hlbiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3QgaGVyZSwgdW5kZXIgdGhlIGV5ZXMgb2YgdGhlIHBlb3BsZSwgd2hvIGhvbGQgdGhlIHBvd2VyIHRvIHJld2FyZCBhbmQgdG8KICAgICAgICAgICAgICAgICAgICBjaGFzdGlzZSwgaXMgd2hhdCB3ZSBrbm93IGl0IHRvIGJlLiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkgd2lzaCB0bwogICAgICAgICAgICAgICAgICAgIHJlY2FwaXR1bGF0ZSB0aGUgY2hhcmdlcyBJIGhhdmUgYnJvdWdodCBob21lLCBhbmQgdG8gc2hvdyB0aGF0IEkgaGF2ZSBmdWxmaWxsZWQKICAgICAgICAgICAgICAgICAgICB0aGUgdW5kZXJ0YWtpbmcgSSBnYXZlIGF0IHRoZSBvdXRzZXQgb2YgbXkgc3BlZWNoLiBJIGhhdmUgcHJvdmVkLCBub3QgYnkgd29yZHMKICAgICAgICAgICAgICAgICAgICBidXQgYnkgdGhlIHRlc3RpbW9ueSBvZiBmYWN0cywgdGhhdCB0aGVyZSB3YXMgbm8gd29yZCBvZiB0cnV0aCBpbiB0aGUgcmVwb3J0IG9mCiAgICAgICAgICAgICAgICAgICAgQWVzY2hpbmVzLCBidXQgdGhhdCBoZSBzdWNjZXNzZnVsbHkgZGVjZWl2ZWQgeW91LiA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTc4IiB1bml0PSJzZWN0aW9uIiAvPkkgaGF2ZSBwcm92ZWQgdGhhdCBoZSBpcyB0byBibGFtZSBmb3IgeW91ciByZWZ1c2FsIHRvIGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggZnJvbSBtZSwgY2FwdGl2YXRlZCBhcyB5b3UgdGhlbiB3ZXJlIGJ5IGhpcyBwcm9taXNlcyBhbmQgYXNzdXJhbmNlczsgdGhhdAogICAgICAgICAgICAgICAgICAgIGhpcyBjb3Vuc2VscyB3ZXJlIGV4YWN0bHkgb3Bwb3NlZCB0byByaWdodCBwb2xpY3k7IHRoYXQgaGUgc3Bva2UgYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICB0ZXJtcyBvZiBwZWFjZSBwcm9wb3NlZCBieSBvdXIgYWxsaWVzLCBhbmQgaW4gZmF2b3Igb2YgdGhlIHByb3Bvc2FscyBvZgogICAgICAgICAgICAgICAgICAgIFBoaWxvY3JhdGVzOyB0aGF0IGhlIHB1cnBvc2VseSB3YXN0ZWQgeW91ciB0aW1lIHRvIGRlYmFyIHlvdSBmcm9tIGdvaW5nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGFpZCBvZiB0aGUgUGhvY2lhbnMgaWYgeW91IHNob3VsZCBzbyBkZXNpcmU7IHRoYXQgdGhyb3VnaG91dCBoaXMgam91cm5leSBhYnJvYWQKICAgICAgICAgICAgICAgICAgICBoaXMgc2lucyB3ZXJlIG1hbnkgYW5kIGdyaWV2b3VzOyB0aGF0IGhlIGhhcyBiZXRyYXllZCBldmVyeXRoaW5nLCBzb2xkCiAgICAgICAgICAgICAgICAgICAgZXZlcnl0aGluZywgdGFrZW4gYnJpYmVzLCBhbmQgc3RvcHBlZCBzaG9ydCBvZiBubyBpbmlxdWl0eS4gVGhhdCwgdGhlbiwgaXMgd2hhdAogICAgICAgICAgICAgICAgICAgIEkgdW5kZXJ0b29rIHRvIHByb3ZlOyBhbmQgdGhhdCBpcyB3aGF0IEkgaGF2ZSBwcm92ZWQuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzkiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IG1hcmsgd2hhdCBmb2xsb3dzOyBmb3IgdGhlIGFyZ3VtZW50IEkgbm93IHB1dCBiZWZvcmUgeW91IGlzCiAgICAgICAgICAgICAgICAgICAgcGxhaW4gYW5kIHN0cmFpZ2h0Zm9yd2FyZC4gWW91IGhhdmUgc3dvcm4gdG8gZ2l2ZSBhIHZlcmRpY3QgYWNjb3JkaW5nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MsIGFuZCB0byB0aGUgZGVjcmVlcyBvZiB0aGUgcGVvcGxlIGFuZCBvZiB0aGUgQ291bmNpbCBvZiBGaXZlIEh1bmRyZWQ7IHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmR1Y3Qgb2YgdGhlIGRlZmVuZGFudCB3aGVuIGhvbGRpbmcgdGhlIG9mZmljZSBvZiBhbWJhc3NhZG9yIGhhcyBtYW5pZmVzdGx5CiAgICAgICAgICAgICAgICAgICAgdmlvbGF0ZWQgdGhvc2UgbGF3cywgdGhvc2UgZGVjcmVlcywgYW5kIHRoZSBwcmluY2lwbGVzIG9mIGp1c3RpY2U7IHRoZXJlZm9yZSBoZQogICAgICAgICAgICAgICAgICAgIG11c3QgYmUgY29udmljdGVkIGJ5IGFuIGludGVsbGlnZW50IGp1cnkuIElmIGhlIGhhZCBjb21taXR0ZWQgbm8gb3RoZXIgY3JpbWUsCiAgICAgICAgICAgICAgICAgICAgdHdvIG9ubHkgb2YgaGlzIHRyYW5zZ3Jlc3Npb25zIGFyZSBzdWZmaWNpZW50IHRvIHB1dCBoaW0gdG8gZGVhdGgsIGZvciBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBiZXRyYXllZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gYXMgd2VsbCBhcyB0aGUgUGhvY2lhbnMKICAgICAgICAgICAgICAgICAgICB0byBQaGlsaXAuIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODAiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IG5vIG1hbiBjb3VsZCBwb2ludCBvdXQgdHdvCiAgICAgICAgICAgICAgICAgICAgcGxhY2VzIGluIHRoZSB3aG9sZSB3b3JsZCBvZiBtb3JlIGltcG9ydGFuY2UgdG8gdGhlIGNvbW1vbndlYWx0aCB0aGFuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlcm1vcHlsYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZXJtb3B5bGFlIj5UaGVybW9weWxhZTwvcGxhY2VOYW1lPiBieSBsYW5kIGFuZCB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiBieSBzZWE7IGFuZCBib3RoIG9mIHRoZW0gdGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBpbmZhbW91c2x5IHNvbGQgYW5kIGRlbGl2ZXJlZCBpbnRvIHRoZSBoYW5kcyBvZiBQaGlsaXAuIFdoYXQgYW4gZW5vcm1vdXMKICAgICAgICAgICAgICAgICAgICBvZmZlbmNlLCBhcGFydCBmcm9tIGFsbCB0aGUgcmVzdCwgaXMgdGhlIHN1cnJlbmRlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gYW5kIHRoZSBUaHJhY2lhbiBvdXRwb3N0cywgSSBjb3VsZCBzaG93CiAgICAgICAgICAgICAgICAgICAgYnkgYSB0aG91c2FuZCByZWFzb25zOyBhbmQgaXQgd291bGQgYmUgZWFzeSB0byBwb2ludCB0byBtYW55IG1lbiB3aG8gZm9yIHN1Y2gKICAgICAgICAgICAgICAgICAgICBiZXRyYXlhbHMgaGF2ZSBiZWVuIHNlbnRlbmNlZCB0byBkZWF0aCBvciBtdWxjdGVkIGluIGxhcmdlIHN1bXMgb2YgbW9uZXkgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGNvdXJ0LOKAlEVyZ29waGlsdXMsIENlcGhpc29kb3R1cywgVGltb21hY2h1cywgYW5kLCBpbiBvbGQgdGltZXMsCiAgICAgICAgICAgICAgICAgICAgRXJnb2NsZXMsIERpb255c2l1cywgYW5kIG90aGVycywgb2Ygd2hvbSBJIG1heSBzYXkgdGhhdCBhbGwgb2YgdGhlbSB0b2dldGhlciBoYWQKICAgICAgICAgICAgICAgICAgICBpbmZsaWN0ZWQgZmV3ZXIgaW5qdXJpZXMgdXBvbiB0aGUgY29tbW9ud2VhbHRoIHRoYW4gdGhlIGRlZmVuZGFudC4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gdGhvc2UgZGF5cywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IHdlcmUgc3RpbGwgY2FyZWZ1bCB0byBiZSBvbgogICAgICAgICAgICAgICAgICAgIHlvdXIgZ3VhcmQgYWdhaW5zdCBwZXJpbHMsIGFuZCBub3Qgc3BhcmluZyBvZiBwcmVjYXV0aW9uOyBub3cgeW91IG92ZXJsb29rCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmcgdGhhdCBhdCBhbnkgZ2l2ZW4gbW9tZW50IGRvZXMgbm90IGRpc3R1cmIgeW91IG9yIGNhdXNlIGltbWVkaWF0ZQogICAgICAgICAgICAgICAgICAgIGFubm95YW5jZS4gQW5kIHRoZW4geW91IGNvbWUgaGVyZSBhbmQgcGFzcyByYW5kb20gcmVzb2x1dGlvbnMs4oCUdGhhdAogICAgICAgICAgICAgICAgICAgIFBoaWxpcCBzaGFsbCBzd2VhciBmaWRlbGl0eSB0byBDZXJzb2JsZXB0ZXMs4oCUdGhhdCBoZSBzaGFsbCBoYXZlIG5vCiAgICAgICAgICAgICAgICAgICAgc2hhcmUgaW4gQW1waGljdHlvbmljIGJ1c2luZXNzLOKAlHRoYXQgaGUgc2hhbGwgcmV2aXNlIHRoZSB0ZXJtcyBvZgogICAgICAgICAgICAgICAgICAgIHBlYWNlLiBZZXQgYWxsIHlvdXIgcmVzb2x1dGlvbnMgd291bGQgaGF2ZSBiZWVuIHVubmVjZXNzYXJ5LCBpZiBvbmx5IHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBoYWQgY2hvc2VuIHRvIHRyYXZlbCBieSBzZWEgYW5kIHRvIGRvIGhpcyBkdXR5LiBXaGF0IG1pZ2h0IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHNhdmVkIGJ5IHNhaWxpbmcsIGhlIGhhcyBsb3N0IGJ5IGluc2lzdGluZyBvbiB0cmF2ZWwgYnkgbGFuZDsgYW5kIHdoYXQgbWlnaHQKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gc2F2ZWQgYnkgdGVsbGluZyB0aGUgdHJ1dGgsIGhlIGhhcyBsb3N0IGJ5IHRlbGxpbmcgbGllcy4gPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IkNvbmNsIiB1bml0PSJwYXJ0IiAvPjwvdHJhbnNsYXRpb24+"
translation['20.1'] = ""
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBteSBvd24gcGFydCwgSSBzaGFsbAogICAgICAgICAgICAgICAgICAgIGZvcmJlYXIgdG8gcmV0b3J0IHRoYXQgaXQgaXMgdW5qdXN0IHRvIHRha2UgYXdheSB0aGlzIHByaXZpbGVnZSBmcm9tIGFsbCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgeW91IGZpbmQgZmF1bHQgd2l0aCBzb21lOyBmb3IgdGhhdCBvYmplY3Rpb24gaGFzIGFscmVhZHkgYmVlbiBwYXJ0aWFsbHkKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CeSB0aGUgcHJldmlvdXMgc3BlYWtlciwKICAgICAgICAgICAgICAgICAgICAgICAgUGhvcm1pby48L25vdGU+IGFuZCB5b3UgcHJvYmFibHkgcmVhbGl6ZSBpdHMgZm9yY2UuIEJ1dCBJIHNob3VsZCBsaWtlIHRvIGFzawogICAgICAgICAgICAgICAgICAgIExlcHRpbmVzIG9uIHdoYXQgZ3JvdW5kcywgZXZlbiBpZiBub3Qgc29tZSwgYnV0IGFsbCB0aGUgcmVjaXBpZW50cyBoYWQgYmVlbiB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBsYXN0IGRlZ3JlZSB1bmRlc2VydmluZywgaGUgaGFzIG1ldGVkIG91dCB0aGUgc2FtZSB0cmVhdG1lbnQgdG8geW91IGFzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlbTsgZm9yIGJ5IHRoZSBjbGF1c2UgIm5vbmUgc2hhbGwgYmUgZXhlbXB0IiBoZSBoYXMgdGFrZW4gYXdheSB0aGUgcHJpdmlsZWdlCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aG9zZSB3aG8gbm93IGVuam95IGl0LCB3aGlsZSBieSB0aGUgYWRkaXRpb24gIm5vciBzaGFsbCBpdCBiZSBsYXdmdWwKICAgICAgICAgICAgICAgICAgICBoZXJlYWZ0ZXIgdG8gZ3JhbnQgaXQiIGhlIHRha2VzIGF3YXkgZnJvbSB5b3UgdGhlIHJpZ2h0IHRvIGJlc3RvdyBpdC4gRm9yIHN1cmVseQogICAgICAgICAgICAgICAgICAgIGhlIGNhbm5vdCBtZWFuIHRoYXQgcHJlY2lzZWx5IGFzIGhlIHRob3VnaHQgdGhlIGhvbGRlcnMgb2YgdGhpcyBwcml2aWxlZ2UKICAgICAgICAgICAgICAgICAgICB1bndvcnRoeSwgc28gaGUgdGhvdWdodCB0aGUgcGVvcGxlIHVud29ydGh5IG9mIHRoZSByaWdodCB0byBkaXNwZW5zZSBpdHMgb3duCiAgICAgICAgICAgICAgICAgICAgZmF2b3JzIHRvIHdob21zb2V2ZXIgaXQgd2lzaGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwZXJoYXBzIGhlCiAgICAgICAgICAgICAgICAgICAgbWF5IG9iamVjdCBoZXJlIHRoYXQgaGUgZnJhbWVkIGhpcyBsYXcgaW4gdGhpcyB3YXkgYmVjYXVzZSB0aGUgcGVvcGxlIGFyZSBzbwogICAgICAgICAgICAgICAgICAgIGVhc2lseSBndWxsZWQuIEJ1dCBieSBwYXJpdHkgb2YgcmVhc29uaW5nIHdoeSBzaG91bGQgeW91IG5vdCBiZSBkZXByaXZlZCBvZiBhbGwKICAgICAgICAgICAgICAgICAgICB5b3VyIHJpZ2h0c+KAlG9mIHRoZSB3aG9sZSBjb25zdGl0dXRpb24gaW4gZmFjdD8gRm9yIHRoZXJlIGlzIG5vCiAgICAgICAgICAgICAgICAgICAgc2luZ2xl4oCUcmlnaHQgd2hpY2ggaGFzIG5vdCBiZWVuIGFidXNlZCBpbiB0aGlzIHdheS4gWW91IGhhdmUgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICBiZWVuIGRlY2VpdmVkIGludG8gcGFzc2luZyBkZWNyZWVzOyB5b3UgaGF2ZSBzb21ldGltZXMgYmVlbiBpbmR1Y2VkIHRvIGNob29zZQogICAgICAgICAgICAgICAgICAgIHdlYWsgYWxsaWVzIHJhdGhlciB0aGFuIHN0cm9uZzsgYW5kIGdlbmVyYWxseSwgSSBzdXBwb3NlLCBpbiBtYW55IG9mIHlvdXIgcHVibGljCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZ3MgdGhlIHNhbWUgdGhpbmcgaXMgYm91bmQgdG8gaGFwcGVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNoYWxsIHdlIHRoZW4gbWFrZSBhIGxhdyB0aGF0IGhlcmVhZnRlciBuZWl0aGVyIENvdW5jaWwgbm9yIEFzc2VtYmx5IHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGVkIHRvIGRlbGliZXJhdGUgb3IgdG8gdm90ZSBvbiBhbnkgc3ViamVjdD8gTm90IHNvLCBpbiBteSBvcGluaW9uOyBmb3Igd2UKICAgICAgICAgICAgICAgICAgICBvdWdodCBub3QgdG8gYmUgZGVwcml2ZWQgb2Ygb3VyIHJpZ2h0cywgd2hlcmUgd2UgaGF2ZSBiZWVuIG1pc2xlZDsgd2Ugb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBiZSBpbnN0cnVjdGVkIGhvdyB0byBhdm9pZCBzdWNoIG1pc3Rha2VzLCBhbmQgd2Ugb3VnaHQgdG8gbWFrZSBhIGxhdywgbm90IHRvCiAgICAgICAgICAgICAgICAgICAgc3RyaXAgdXMgb2Ygb3VyIG93biBhdXRob3JpdHksIGJ1dCB0byBwdW5pc2ggdGhvc2Ugd2hvIG1pc2xlYWQgdXMuIDwvdHJhbnNsYXRpb24+"
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgaWYsIHB1dHRpbmcgdGhlc2UKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9ucyBhc2lkZSwgeW91IHdvdWxkIGV4YW1pbmUgdGhlIHJlYWwgcHJvYmxlbSwgd2hldGhlciBpdCBpcyBtb3JlCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlb3VzIHRoYXQgeW91IHNob3VsZCBwb3NzZXNzIHRoZSBwb3dlciBvZiBiZXN0b3dpbmcgdGhpcyBwcml2aWxlZ2UsIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aG91Z2ggeW91IGFyZSBzb21ldGltZXMgZHVwZWQgaW50byBiZXN0b3dpbmcgaXQgb24gYSBzY291bmRyZWwsIG9yIHRoYXQgYnkKICAgICAgICAgICAgICAgICAgICBiZWluZyB3aG9sbHkgZGlzcG9zc2Vzc2VkIG9mIGl0IHlvdSBzaG91bGQgYmUgdW5hYmxlIHRvIGdyYW50IGhvbm9ycyBldmVuIHdoZXJlCiAgICAgICAgICAgICAgICAgICAgdGhleSBhcmUgZGVzZXJ2ZWQsIHlvdSB3b3VsZCBmaW5kIHRoZSBmb3JtZXIgY291cnNlIHRoZSBtb3JlIGFkdmFudGFnZW91cy4gQW5kCiAgICAgICAgICAgICAgICAgICAgd2h5PyBCZWNhdXNlIHRoZSByZXN1bHQgb2YgcmV3YXJkaW5nIHRvbyBtYW55IGNpdGl6ZW5zIGlzIHRvIGVuY291cmFnZSBtYW55IHRvCiAgICAgICAgICAgICAgICAgICAgZG8geW91IGdvb2Qgc2VydmljZSwgYnV0IHRoZSByZXN1bHQgb2YgcmV3YXJkaW5nIG5vIG9uZSwgZXZlbiBpZiBkZXNlcnZpbmcsIGlzCiAgICAgICAgICAgICAgICAgICAgdG8gZGlzY291cmFnZSBlbXVsYXRpb24gaW4gYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIGFsc28KICAgICAgICAgICAgICAgICAgICB0aGlzIG90aGVyIHJlYXNvbiwgdGhhdCB0aG9zZSB3aG8gcmV3YXJkIGFuIHVuZGVzZXJ2aW5nIGluZGl2aWR1YWwgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgY3JlZGl0ZWQgd2l0aCBzb21lIGRlZ3JlZSBvZiBhcnRsZXNzbmVzcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrXhvZDhvbXOuM61zrnOsTwvZm9yZWlnbj5oYXMgbWFueSBzaGFkZXMgb2YgbWVhbmluZwogICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHNpbXBsaWNpdHkgdG8gZm9sbHkuIEhlcmUgdGhlIGNvbnRyYXN0IHdpdGg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ous6xzrrhvbfOsTwvZm9yZWlnbj5zaG93cyB0aGF0IHRoZSBtaWxkZXIgc2Vuc2UgcHJlZG9taW5hdGVzOyBub3Qgc28gaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMTQ1IiB2YWxpZD0ieWVzIj5EZW0uIDIwLjE0NTwvYmlibD4uPC9ub3RlPiBidXQgdGhvc2Ugd2hvIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgcmVxdWl0ZSB0aGVpciBiZW5lZmFjdG9ycyBhcmUgY2hhcmdlZCB3aXRoIGJhc2VuZXNzLiBKdXN0IHNvIGZhciBhcyBpdCBpcyBiZXR0ZXIKICAgICAgICAgICAgICAgICAgICB0byBiZSB0aG91Z2h0IGFydGxlc3MgdGhhbiB1bnNjcnVwdWxvdXMsIGl0IGlzIG1vcmUgaG9ub3JhYmxlIHRvIHJlcGVhbCB0aGlzIGxhdwogICAgICAgICAgICAgICAgICAgIHRoYW4gdG8gZW5hY3QgaXQuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs614b2Q4b21zrjOtc65zrE8L2ZvcmVpZ24+aGFzIG1hbnkgc2hhZGVzIG9mIG1lYW5pbmcKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBzaW1wbGljaXR5IHRvIGZvbGx5LiBIZXJlIHRoZSBjb250cmFzdCB3aXRoPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrOsc664b23zrE8L2ZvcmVpZ24+c2hvd3MgdGhhdCB0aGUgbWlsZGVyIHNlbnNlIHByZWRvbWluYXRlczsgbm90IHNvIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIwLjE0NSIgdmFsaWQ9InllcyI+RGVtLiAyMC4xNDU8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['20.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3IgYWdhaW4sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG9uCiAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGlvbiBkb2VzIGl0IHNlZW0gdG8gbWUgcmVhc29uYWJsZSwgd2hlbiBmaW5kaW5nIGZhdWx0IHdpdGggc29tZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBncm91bmQgb2YgdGhlIHJld2FyZHMgdGhleSBhbHJlYWR5IGVuam95LCB0byByb2IgdXNlZnVsIGNpdGl6ZW5zIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgaG9ub3JzLiBGb3IgaWYsIHdoaWxlIHRoZXNlIGltbXVuaXRpZXMgZXhpc3QsIHNvbWUgb2YgdGhlIHJlY2lwaWVudHMgYXJlLCBhcyBvdXIKICAgICAgICAgICAgICAgICAgICBvcHBvbmVudHMgc2F5LCB3b3J0aGxlc3MgYW5kIHVucHJvZml0YWJsZSwgd2hhdCByZXN1bHQgYXJlIHdlIHRvIGV4cGVjdCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm8gY2hhbmNlIHdoYXRldmVyIG9mIHJld2FyZCBmb3IgdGhlIGdvb2QgY2l0aXplbnM/IDwvdHJhbnNsYXRpb24+"
translation['20.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVuIGFnYWluLCB5b3UgbXVzdAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIHRoaXMgcG9pbnQsIHRoYXQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBleGlzdGluZyBsYXdzIG9mIGxvbmcKICAgICAgICAgICAgICAgICAgICBzdGFuZGluZ+KAlGxhd3Mgb2Ygd2hpY2ggTGVwdGluZXMgaGltc2VsZiBjYW5ub3QgZGVueSB0aGUKICAgICAgICAgICAgICAgICAgICBzb3VuZG5lc3PigJR0aGVyZSBpcyBhbiBpbnRlcnZhbCBvZiBhIHllYXIgYmV0d2VlbiBlYWNoIHB1YmxpYyBzZXJ2aWNlLAogICAgICAgICAgICAgICAgICAgIHNvIHRoYXQgaGFsZiB0aGUgdGltZSBhIGNpdGl6ZW4gaXMgaW1tdW5lLiBBbmQgdGhlbiwgd2hlbiBhbGwgY2l0aXplbnMsIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gaGF2ZSBub3QgYmVuZWZpdGVkIHlvdSBpbiB0aGUgbGVhc3QsIGVuam95IGEgaGFsZiBzaGFyZSBpbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgcHJpdmlsZWdlLCBhcmUgd2UgdG8gdGFrZSBhd2F5IGZyb20geW91ciByZWFsIGJlbmVmYWN0b3JzIHRoZSBhZGRpdGlvbiB0aGF0IHdlCiAgICAgICAgICAgICAgICAgICAgbWFkZSB0byBpdD8gU3VyZWx5IG5vdDsgZm9yIHRoYXQgd291bGQgYmUgZGlzaG9ub3JhYmxlIGFuZCwgaW4geW91ciBjYXNlLAogICAgICAgICAgICAgICAgICAgIGVzcGVjaWFsbHkgdW5iZWNvbWluZy4gPC90cmFuc2xhdGlvbj4="
translation['20.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gd2UgaGF2ZSBhIGxhdyB3aGljaAogICAgICAgICAgICAgICAgICAgIGZvcmJpZHMgY2hlYXRpbmcgaW4gdGhlIG1hcmtldHBsYWNlLCB3aGVyZSBhIGZhbHNlaG9vZCBlbnRhaWxzIG5vIHB1YmxpYyBpbmp1cnksCiAgICAgICAgICAgICAgICAgICAgaXMgaXQgbm90IGRpc2dyYWNlZnVsIHRoYXQgaW4gcHVibGljIGFmZmFpcnMgdGhlIHNhbWUgc3RhdGUgc2hvdWxkIG5vdCBhYmlkZSBieQogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgd2hpY2ggaXQgZW5qb2lucyBvbiBwcml2YXRlIGluZGl2aWR1YWxzLCBidXQgc2hvdWxkIGNoZWF0IGl0cwogICAgICAgICAgICAgICAgICAgIGJlbmVmYWN0b3JzLCBhbmQgdGhhdCBhbHRob3VnaCBpdCBpcyBpdHNlbGYgbGlrZWx5IHRvIGluY3VyIG5vIHNtYWxsIHBlbmFsdHk/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2UgbXVzdCB0YWtlIGFjY291bnQgbm90IG9ubHkgb2YgbG9zcwogICAgICAgICAgICAgICAgICAgIG9mIG1vbmV5LCBidXQgb2YgbG9zcyBvZiBnb29kIGZhbWUsIHdoaWNoIHlvdSBhcmUgbW9yZSBhbnhpb3VzIHRvIGtlZXAgdGhhbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgbW9uZXnigJR5ZXMsIHlvdSBhbmQgeW91ciBhbmNlc3RvcnMgYWxzby4gVGhlIHByb29mIG9mIHRoaXMgaXMgdGhhdCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBoYWQgYWNjdW11bGF0ZWQgdmFzdCBzdW1zLCB0aGV5IHNwZW50IGFsbCBmb3IgaG9ub3IsIGFuZCB3aGVuIHJlcHV0YXRpb24KICAgICAgICAgICAgICAgICAgICB3YXMgYXQgc3Rha2UsIHRoZXkgbmV2ZXIgc2hyYW5rIGZyb20gZGFuZ2VyLCBidXQgZXZlbiBsYXZpc2hlZCB0aGVpciBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZXMgd2l0aG91dCBzdGludC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGUgcmVmZXJzIHRvIHRoZSB3ZWFsdGgKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIFN0YXRlIGluIHRoZSB0aW1lIG9mIFBlcmljbGVzIO+8iGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDEzLjI2IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMy4yNjwvYmlibD7vvIksIGFuZCB0byB0aGUgZXhlcnRpb25zIG9mIHRoZSBBdGhlbmlhbnMgZHVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQZWxvcG9ubmVzaWFuIFdhci48L25vdGU+IEFzIGl0IHN0YW5kcywgdGhlbiwgdGhpcyBsYXcgcmVmbGVjdHMgb24geW91ciBjaXR5CiAgICAgICAgICAgICAgICAgICAgbm90IGhvbm9yIGJ1dCBkaXNncmFjZSwgdW53b3J0aHkgYWxpa2Ugb2YgeW91ciBhbmNlc3RvcnMgYW5kIG9mIHlvdXJzZWx2ZXM7IGZvcgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDEzLjI2IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMy4yNjwvYmlibD7vvIksIGFuZCB0byB0aGUgZXhlcnRpb25zIG9mIHRoZSBBdGhlbmlhbnMgZHVyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQZWxvcG9ubmVzaWFuIFdhci48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaXMgaW5jdXJyaW5nIHRoZSB0aHJlZQogICAgICAgICAgICAgICAgICAgIHdvcnN0IHJlcHJvYWNoZXPigJR0aGF0IG1lbiBzaG91bGQgdGhpbmsgdXMgZW52aW91cywgZmFpdGhsZXNzLAogICAgICAgICAgICAgICAgICAgIHVuZ3JhdGVmdWwuIDwvdHJhbnNsYXRpb24+"
translation['20.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TmV4dCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGFic29sdXRlbHkgY29udHJhcnkgdG8gdGhlIG5hdGlvbmFsIGNoYXJhY3RlciB0byByYXRpZnkgc3VjaCBhIGxhdyBhcyB0aGlzLCBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBhbHNvIGVuZGVhdm9yIHRvIHNob3cgeW91IGJyaWVmbHkgYnkgYW4gZXhhbXBsZSBvZiBvdXIgY29uZHVjdCBpbiB0aGUgcGFzdC4KICAgICAgICAgICAgICAgICAgICBUaGUgVGhpcnR5IFR5cmFudHMgYXJlIHNhaWQgdG8gaGF2ZSBib3Jyb3dlZCBtb25leSBmcm9tIHRoZSBMYWNlZGFlbW9uaWFucyBmb3IKICAgICAgICAgICAgICAgICAgICB1c2UgYWdhaW5zdCB0aGUgcGF0cmlvdHMgaW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGlyYWV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGlyYWV1cyI+UGlyYWV1czwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gNDAzIFRocmFzeWJ1bHVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZXhpbGVkIGRlbW9jcmF0cyBoYWQgb2NjdXBpZWQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGlyYWV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGlyYWV1cyI+UGlyYWV1czwvcGxhY2VOYW1lPiBhbmQgZGVmZWF0ZWQgdGhlIFRoaXJ0eSwgd2hvc2UgZ292ZXJubWVudCB3YXMgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkIHRvIHRoYXQgb2YgdGhlIFRlbi4gVGhlIFNwYXJ0YW5zIHdlcmUgcGVyc3VhZGVkIGJ5IEx5c2FuZGVyIHRvIGxlbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFRlbiAxMDAgdGFsZW50cywgYnV0IHNob3J0bHkgYWZ0ZXJ3YXJkcyBQYXVzYW5pYXMsIHRoZSBTcGFydGFuIGtpbmcsIHdobwogICAgICAgICAgICAgICAgICAgICAgICB3YXMgbm8gZnJpZW5kIHRvIEx5c2FuZGVyLCBpbnRlcnZlbmVkLCB3aXRoZHJldyB0aGUgU3BhcnRhbiBzb24gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQWNyb3BvbGlzLCBhbmQgcmVjb25jaWxlZCB0aGUgcGFydGllcy4gVGhlIHN0b3J5IG9mIHRoZSBsb2FuIGlzIG5hcnJhdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIFhlbm9waG9uIGFuZCBQbHV0YXJjaDsgdGhlIGRlY3JlZSBvZiB0aGUgQXNzZW1ibHksIGFjY2VwdGluZyByZXNwb25zaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHJlcGF5bWVudCwgaXMgYXR0ZXN0ZWQgYWxzbyBieSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc29jLiA3LjY3IiB2YWxpZD0ieWVzIj5Jc29jLiBBcmVvcC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDY3PC9iaWJsPi48L25vdGU+IEJ1dCB3aGVuIHVuaXR5IHdhcyByZXN0b3JlZCB0byB0aGUgU3RhdGUgYW5kIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGlzcHV0ZXMgd2VyZSBzZXR0bGVkLCB0aGUgTGFjZWRhZW1vbmlhbnMgc2VudCBlbnZveXMgdG8gZGVtYW5kIHBheW1lbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGlyYWV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGlyYWV1cyI+UGlyYWV1czwvcGxhY2VOYW1lPiBhbmQgZGVmZWF0ZWQgdGhlIFRoaXJ0eSwgd2hvc2UgZ292ZXJubWVudCB3YXMgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VkIHRvIHRoYXQgb2YgdGhlIFRlbi4gVGhlIFNwYXJ0YW5zIHdlcmUgcGVyc3VhZGVkIGJ5IEx5c2FuZGVyIHRvIGxlbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFRlbiAxMDAgdGFsZW50cywgYnV0IHNob3J0bHkgYWZ0ZXJ3YXJkcyBQYXVzYW5pYXMsIHRoZSBTcGFydGFuIGtpbmcsIHdobwogICAgICAgICAgICAgICAgICAgICAgICB3YXMgbm8gZnJpZW5kIHRvIEx5c2FuZGVyLCBpbnRlcnZlbmVkLCB3aXRoZHJldyB0aGUgU3BhcnRhbiBzb24gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQWNyb3BvbGlzLCBhbmQgcmVjb25jaWxlZCB0aGUgcGFydGllcy4gVGhlIHN0b3J5IG9mIHRoZSBsb2FuIGlzIG5hcnJhdGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIFhlbm9waG9uIGFuZCBQbHV0YXJjaDsgdGhlIGRlY3JlZSBvZiB0aGUgQXNzZW1ibHksIGFjY2VwdGluZyByZXNwb25zaWJpbGl0eQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHJlcGF5bWVudCwgaXMgYXR0ZXN0ZWQgYWxzbyBieSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJJc29jLiA3LjY3IiB2YWxpZD0ieWVzIj5Jc29jLiBBcmVvcC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDY3PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['20.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBxdWVzdGlvbiB3YXMgZGlzY3Vzc2VkIGFuZCBzb21lCiAgICAgICAgICAgICAgICAgICAgd2VyZSBmb3Igb3JkZXJpbmcgdGhlIGNpdHktcGFydHksIHdobyB3ZXJlIHRoZSByZWFsIGJvcnJvd2VycywgdG8gcmVwYXksIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzIGNsYWltZWQgdGhhdCB0aGUgZmlyc3Qgc2lnbiBvZiByZWNvbmNpbGlhdGlvbiBzaG91bGQgYmUgdGhlIGpvaW50CiAgICAgICAgICAgICAgICAgICAgc2V0dGxlbWVudCBvZiB0aGUgZGVidCwgdGhleSBzYXkgdGhhdCB0aGUgcGVvcGxlIGNob3NlIHRvIHBheSB0aGVpciBjb250cmlidXRpb24KICAgICAgICAgICAgICAgICAgICBhbmQgYmVhciB0aGVpciBzaGFyZSBvZiB0aGUgbG9zcywgc28gdGhhdCB0aGVyZSBzaG91bGQgYmUgbm8gYnJlYWNoIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudC4gT24gdGhhdCBvY2Nhc2lvbiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8gYXZvaWQgYSBicmVhY2ggb2YgZmFpdGgsIHlvdSBjb25zZW50ZWQgdG8gcGF5IG1vbmV5CiAgICAgICAgICAgICAgICAgICAgdG8gdGhvc2Ugd2hvIGhhZCBpbmp1cmVkIHlvdSwgYnV0IG5vdywgd2hlbiB5b3UgbWlnaHQgd2l0aG91dCBhbnkgZXhwZW5zZQogICAgICAgICAgICAgICAgICAgIHJlcXVpdGUgeW91ciBiZW5lZmFjdG9ycyBieSByZXBlYWxpbmcgdGhpcyBsYXcsIHdpbGwgaXQgbm90IGJlIHN0cmFuZ2UgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgcHJlZmVyIHRvIGJyZWFrIHlvdXIgZmFpdGg/IEkgZm9yIG9uZSBjYW5ub3QgYXBwcm92ZSBvZiBpdC4gPC90cmFuc2xhdGlvbj4="
translation['20.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGluc3RhbmNlIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHF1b3RlZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXMgd2VsbCBtYW55CiAgICAgICAgICAgICAgICAgICAgb3RoZXJzLCB3aWxsIHNob3cgd2hhdCBvdXIgbmF0aW9uYWwgY2hhcmFjdGVyIGlz4oCUdHJ1dGhmdWwsIGhvbmVzdCwKICAgICAgICAgICAgICAgICAgICBhbmQsIHdoZXJlIG1vbmV5IGlzIGNvbmNlcm5lZCwgbm90IGFza2luZyB3aGF0IHBheXMgYmVzdCwgYnV0IHdoYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgaG9ub3JhYmxlIHRoaW5nIHRvIGRvLiBCdXQgYXMgdG8gdGhlIGNoYXJhY3RlciBvZiB0aGUgcHJvcG9zZXIgb2YgdGhpcyBsYXcsIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIG5vIGZ1cnRoZXIga25vd2xlZGdlIG9mIGhpbSwgbm9yIGRvIEkgc2F5IG9yIGtub3cgYW55dGhpbmcgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgcHJlanVkaWNlOyBidXQgaWYgSSBtYXkganVkZ2UgZnJvbSBoaXMgbGF3LCBJIGRldGVjdCBhIGNoYXJhY3RlciB2ZXJ5IGZhcgogICAgICAgICAgICAgICAgICAgIHJlbW92ZWQgZnJvbSB3aGF0IEkgaGF2ZSBkZXNjcmliZWQuIDwvdHJhbnNsYXRpb24+"
translation['20.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5JIHNheSwKICAgICAgICAgICAgICAgICAgICB0aGVuLCB0aGF0IGl0IHdvdWxkIGJlIG1vcmUgaG9ub3JhYmxlIGZvciBMZXB0aW5lcyB0byBiZSBndWlkZWQgYnkgeW91IGluCiAgICAgICAgICAgICAgICAgICAgcmVwZWFsaW5nIHRoZSBsYXcgdGhhbiBmb3IgeW91IHRvIGJlIGd1aWRlZCBieSBoaW0gaW4gcmF0aWZ5aW5nIGl0LCBhbmQgaXQgd291bGQKICAgICAgICAgICAgICAgICAgICBiZSBtb3JlIHByb2ZpdGFibGUgZm9yIHlvdSwgYXMgd2VsbCBhcyBmb3IgaGltLCB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBzaG91bGQgcGVyc3VhZGUgTGVwdGluZXMgdG8gYXNzdW1lIGEKICAgICAgICAgICAgICAgICAgICBsaWtlbmVzcyB0byBoZXJzZWxmIHRoYW4gdGhhdCBzaGUgc2hvdWxkIGJlIHBlcnN1YWRlZCBieSBMZXB0aW5lcyB0byBiZSBsaWtlCiAgICAgICAgICAgICAgICAgICAgaGltOyBmb3IgZXZlbiBpZiBoZSBpcyBhIHJlYWxseSBnb29kIG1hbuKAlGFuZCBoZSBtYXkgYmUsIGZvciBhdWdodCBJCiAgICAgICAgICAgICAgICAgICAga25vd+KAlGhlIGNhbm5vdCBleGNlbCBoZXIgaW4gY2hhcmFjdGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZW92ZXIsIGdlbnRsZW1lbiwgSSB0aGluayB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGNvbWUgdG8gYSBzb3VuZGVyIGp1ZGdlbWVudCBpbiB0aGlzIG1hdHRlciBpZiB5b3Ugd291bGQgb2JzZXJ2ZSB0aGlzCiAgICAgICAgICAgICAgICAgICAgZnVydGhlciB0cnV0aCwgdGhhdCB0aGUgcHJlc2VudCBsYXcgcmVtb3ZlcyBqdXN0IHRoZSBvbmUgYWR2YW50YWdlIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIHJld2FyZHMgb2YgYSBkZW1vY3JhY3kgaGF2ZSBvdmVyIHRob3NlIG9mIG90aGVyIGNvbnN0aXR1dGlvbnMuIEZvciBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbCB2YWx1ZSB0byB0aGUgcmVjaXBpZW50cyBvZiB0aGUgcmV3YXJkcyBiZXN0b3dlZCwgYSB0eXJhbm55IG9yIGFuCiAgICAgICAgICAgICAgICAgICAgb2xpZ2FyY2h5IGhhcyBhbiBpbW1lbnNlIGFkdmFudGFnZSBpbiB0aGF0IHRoZXkgY2FuIG1ha2UgYW55b25lIHRoZXkgY2hvb3NlCiAgICAgICAgICAgICAgICAgICAgaW5zdGFudGFuZW91c2x5IHJpY2g7IGJ1dCBpbiBob25vciBhbmQgaW4gc2VjdXJpdHkgb2YgcG9zc2Vzc2lvbiB5b3Ugd2lsbCBmaW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZ2lmdHMgb2YgYSBkZW1vY3JhY3kgYXJlIHRvIGJlIHByZWZlcnJlZC4gPC90cmFuc2xhdGlvbj4="
translation['20.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm90IHRoZSByZWNlaXB0IG9mIGEgZmxhdHRlcmVyJ3MgcGF5IHdpdGggaXRzIHRhaW50IG9mIHNoYW1lLAogICAgICAgICAgICAgICAgICAgIGJ1dCB0byBiZSBob25vcmVkLCB3aGVyZSBzcGVlY2ggaXMgZnJlZSwgYXMgb25lIHdobyBpcyBkZWVtZWQKICAgICAgICAgICAgICAgICAgICB3b3J0aHnigJR0aGF0IGlzIHRydWUgZ2xvcnk7IGFuZCB0byBlbmpveSB0aGUgd2lsbGluZyBhZG1pcmF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgZXF1YWxzIHNlZW1zIGJldHRlciB0aGFuIHRvIGFjY2VwdCB0aGUgcmljaGVzdCBnaWZ0IGZyb20gYSB0eXJhbnQncyBoYW5kLiBGb3IgaW4KICAgICAgICAgICAgICAgICAgICB0aG9zZSBjb21tdW5pdGllcyB0aGUgZmVhciBvZiB0b21vcnJvdyBvdXR3ZWlnaHMgdGhlIGZhdm9yIG9mIHRvZGF5LCBidXQgaW4geW91cgogICAgICAgICAgICAgICAgICAgIGNpdHkgYSBtYW4gY291bGQga2VlcCB3aGF0IGhlIHdvbiB3aXRob3V0IGZlYXIgb2YgbG9zcywgYXQgYW55IHJhdGUgaW4gdGltZQogICAgICAgICAgICAgICAgICAgIHBhc3QuIDwvdHJhbnNsYXRpb24+"
translation['20.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGUgbGF3IHdoaWNoIGRlc3Ryb3lzIGNvbmZpZGVuY2UgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgcmV3YXJkcyB0YWtlcyBhd2F5IHRoZSBvbmUgdGhpbmcgdGhhdCBnaXZlcyBhIGhpZ2hlciB2YWx1ZSB0byByZXdhcmRzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IGJlc3Rvdy4gQW5kIGluZGVlZCwgaWYgZnJvbSBhbnkgb25lIG9mIGFsbCBrbm93biBmb3JtcyBvZiBnb3Zlcm5tZW50IHlvdQogICAgICAgICAgICAgICAgICAgIHRha2UgYXdheSB0aGUgcmlnaHQgb2YgbG95YWwgc3VwcG9ydGVycyBvZiB0aGUgY29uc3RpdHV0aW9uIHRvIHJlY2VpdmUgZmF2b3JzLAogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGZpbmQgdGhhdCB5b3UgaGF2ZSBkZXByaXZlZCB0aG9zZSBnb3Zlcm5tZW50cyBvZiBubyB1bmltcG9ydGFudAogICAgICAgICAgICAgICAgICAgIHNhZmVndWFyZC4gPC90cmFuc2xhdGlvbj4="
translation['20.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93CiAgICAgICAgICAgICAgICAgICAgcGVyaGFwcyBMZXB0aW5lcyB3aWxsIHRyeSB0byBkaXZlcnQgeW91ciBhdHRlbnRpb24gZnJvbSB0aGVzZSBwb2ludHMgYW5kIGFzc2VydAogICAgICAgICAgICAgICAgICAgIHRoYXQgYXQgcHJlc2VudCB0aGUgcHVibGljIHNlcnZpY2VzIGZhbGwgdXBvbiB0aGUgcG9vciwgYnV0IHRoYXQgdW5kZXIgaGlzIGxhdwogICAgICAgICAgICAgICAgICAgIHRoZXkgd2lsbCBiZSBwZXJmb3JtZWQgYnkgdGhlIHdlYWx0aGllc3QgY2xhc3MuIEF0IGZpcnN0IGhlYXJpbmcsIHRoZSBwbGVhIHNlZW1zCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSBzb21lIHdlaWdodDsgYnV0IGV4YW1pbmUgaXQgc3RyaWN0bHkgYW5kIHRoZSBmYWxsYWN5IHdpbGwgYmUgZXhwb3NlZC4KICAgICAgICAgICAgICAgICAgICBGb3IgdGhlcmUgYXJlLCBhcyB5b3Uga25vdywgYW1vbmcgdXMgc29tZSBzZXJ2aWNlcyB0aGF0IGZhbGwgdXBvbiByZXNpZGVudAogICAgICAgICAgICAgICAgICAgIGFsaWVucyBhbmQgb3RoZXJzIHRoYXQgZmFsbCB1cG9uIGNpdGl6ZW5zLCBhbmQgdGhlIGV4ZW1wdGlvbiwgd2hpY2ggTGVwdGluZXMKICAgICAgICAgICAgICAgICAgICB3b3VsZCByZW1vdmUsIGhhcyBiZWVuIGdyYW50ZWQgaW4gdGhlIGNhc2Ugb2YgYm90aC4gRm9yIGZyb20gc3BlY2lhbAogICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGlvbnMgZm9yIHdhciBvciBmb3IgbmF0aW9uYWwgZGVmZW5jZSBhbmQgYWxzbyBmcm9tIHRoZSBlcXVpcG1lbnQgb2YKICAgICAgICAgICAgICAgICAgICB3YXItZ2FsbGV5cywgcmlnaHRseSBhbmQganVzdGx5IGluIGFjY29yZGFuY2Ugd2l0aCBlYXJsaWVyIGxhd3MsIG5vIG9uZSBpcwogICAgICAgICAgICAgICAgICAgIGV4ZW1wdCwgbm90IGV2ZW4gdGhlIGRlc2NlbmRhbnRzIG9mIEhhcm1vZGl1cyBhbmQgQXJpc3RvZ2l0b24sIHdob20gTGVwdGluZXMgaGFzCiAgICAgICAgICAgICAgICAgICAgc3BlY2lhbGx5IG5hbWVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5MZXQgdXMgdGhlbiBzZWUgd2hhdAogICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWwgY29udHJpYnV0b3JzIGhlIHByb3ZpZGVzIHRvIHBlcmZvcm0gdGhvc2UgcHVibGljIHNlcnZpY2VzLCBhbmQgaG93CiAgICAgICAgICAgICAgICAgICAgbWFueSB3aWxsIGJlIHBhc3NlZCBvdmVyIGlmIHdlIHR1cm4gYSBkZWFmIGVhciB0byBoaW0uIE5vdyB0aGUgcmljaGVzdCBjaXRpemVucywKICAgICAgICAgICAgICAgICAgICB3aGVuIGVxdWlwcGluZyBhIHdhci1nYWxsZXksIGFyZSBhbHJlYWR5IGV4ZW1wdCBmcm9tIHRoZSBvcmRpbmFyeSBzZXJ2aWNlcywKICAgICAgICAgICAgICAgICAgICB3aGlsZSB0aG9zZSB3aG9zZSB3ZWFsdGggaXMgaW5zdWZmaWNpZW50IG5lY2Vzc2FyaWx5IGVuam95IGV4ZW1wdGlvbiBhbmQgYXJlIG91dAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSByZWFjaCBvZiB0aGlzIHRheDsgc28gaGlzIGxhdyB3aWxsIG5vdCBwcm92aWRlIHVzIHdpdGggYW5vdGhlcgogICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yIGZyb20gZWl0aGVyIG9mIHRoZXNlIGNsYXNzZXMuIDwvdHJhbnNsYXRpb24+"
translation['20.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5IZQogICAgICAgICAgICAgICAgICAgIG1heSByZXBseSB0aGF0IGhlIHJlY3J1aXRzIG1hbnkgYWxpZW5zIGZvciB0aGUgc2VydmljZXMuIEJ1dCBpZiBoZSBjYW4gcG9pbnQgdG8KICAgICAgICAgICAgICAgICAgICBmaXZlIHN1Y2gsIEkgd2lsbCBlYXQgbXkgd29yZHMuIEkgd2lsbCBhc3N1bWUsIHRoZW4sIHRoYXQgdGhpcyBpcyBub3QgdGhlIGNhc2UsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoYXQgaWYgdGhlIGxhdyBzdGFuZHMsIGJvdGggdGhlIG51bWJlciBvZiBhbGllbnMgcGVyZm9ybWluZyBwdWJsaWMgc2VydmljZXMKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGdyZWF0ZXIsIGFuZCBvZiB0aGUgY2l0aXplbnMgbm9uZSB3aWxsIGJlIGV4Y3VzZWQgYmVjYXVzZSBoZSBpcwogICAgICAgICAgICAgICAgICAgIGVxdWlwcGluZyBhIHdhci1nYWxsZXkuIE5vdyBsZXQgdXMgY29uc2lkZXIgd2hhdCB0aGUgU3RhdGUgd2lsbCBnYWluIGlmIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHBlcmZvcm0gdGhlIHNlcnZpY2VzLCBmb3IgaXQgd2lsbCBwcm92ZSB0byBiZSBubyBjb21wZW5zYXRpb24gYXQgYWxsIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBkaXNncmFjZSBpdCB3aWxsIGVudGFpbC4gPC90cmFuc2xhdGlvbj4="
translation['20.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5QdXQgaXQgdGh1cy4gT2YKICAgICAgICAgICAgICAgICAgICBhbGllbnMgdGhlcmUgYXJlIGV4ZW1wdOKAlEkgd2lsbCBhc3N1bWUgdGVuLiBBbmQgYnkgSGVhdmVuLCBhcyBJIHNhaWQKICAgICAgICAgICAgICAgICAgICBiZWZvcmUsIEkgZG8gbm90IGJlbGlldmUgdGhlcmUgYXJlIGZpdmUuIE1vcmVvdmVyIG9mIHRoZSBjaXRpemVucyB0aGVyZSBhcmUgbm90CiAgICAgICAgICAgICAgICAgICAgaGFsZiBhIGRvemVuLiBTaXh0ZWVuIG9mIGJvdGgsIHRoZW4uIExldCB1cyBjYWxsIGl0IHR3ZW50eSwgb3IgdGhpcnR5LCBpZiB5b3UKICAgICAgICAgICAgICAgICAgICBsaWtlLiBIb3cgbWFueSwgcHJheSwgYXJlIHRoZXJlIHRoYXQgYW5udWFsbHkgcGVyZm9ybSB0aGUgcmVndWxhcmx5IHJlY3VycmluZwogICAgICAgICAgICAgICAgICAgIHNlcnZpY2Vz4oCUY2hvcnVzLW1hc3RlcnMsIHByZXNpZGVudHMgb2YgZ3ltbmFzaWEsIGFuZCBwdWJsaWMgaG9zdHM/CiAgICAgICAgICAgICAgICAgICAgUGVyaGFwcyBzaXh0eSBpbiBhbGwsIG9yIGEgdHJpZmxlIG1vcmUuIDwvdHJhbnNsYXRpb24+"
translation['20.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5JbgogICAgICAgICAgICAgICAgICAgIG9yZGVyLCB0aGVuLCB0aGF0IHdlIG1heSBoYXZlIHRoaXJ0eSBtb3JlIG1lbiBmb3IgdGhlIHB1YmxpYyBzZXJ2aWNlcywgc3ByZWFkCiAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGUgd2hvbGUgcGVyaW9kLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcyB0aGVyZSB3YXMgYSBsaXN0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDMwMCBjaXRpemVucyBxdWFsaWZpZWQgZm9yIHRoZTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Az4HOv861zrnPg8+Gzr/PgeG9sTwvZm9yZWlnbj5hbmQKICAgICAgICAgICAgICAgICAgICAgICAgb2YgPGRhdGUgYXV0aG5hbWU9IjEyMDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjEyMDAiPjEyMDA8L2RhdGU+IGZvciB0aGUgdHJpZXJhcmNoeSwgd2UgbWF5IHBlcmhhcHMgYXNzdW1lCiAgICAgICAgICAgICAgICAgICAgICAgIGEgbGlzdCBvZiA2MDAgZm9yIHRoZSByZWd1bGFyIHNlcnZpY2VzLiBBdCB0aGUgcmF0ZSBvZiA2MCBhIHllYXIsIGl0IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIHRha2UgMTAgeWVhcnMgdG8gd29yayB0aHJvdWdoIHRoZSBsaXN0LCBpZiB0aGUgY29udHJpYnV0b3JzIHdlcmUgY2FsbGVkIHVwb24KICAgICAgICAgICAgICAgICAgICAgICAgc3RyaWN0bHkgaW4gcm90YXRpb24gYnkgdGhlIG9mZmljaWFscyBvZiB0aGVpciByZXNwZWN0aXZlIHRyaWJlcy4gVGhlcmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBvdXRzaWRlIGVzdGltYXRlIG9mIDMwIGFkZGl0aW9uYWwgY29udHJpYnV0b3JzLCByZW5kZXJlZCBhdmFpbGFibGUgYnkKICAgICAgICAgICAgICAgICAgICAgICAgYWJvbGlzaGluZyB0aGUgaW1tdW5pdGllcywgd291bGQgcHJvdmlkZSBvbmx5IDMgbW9yZSBlYWNoIHllYXI7IGkuZS4gMwogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVucyBvdXQgb2YgNjAgd291bGQgYmUgcmVsaWV2ZWQgYW5udWFsbHkuIEluIGNhc2Ugb2YgYSByZWFsIHNob3J0YWdlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpZmllZCBjb250cmlidXRvcnMsIERlbW9zdGhlbmVzIHdvdWxkIHByZWZlciB0aGUgYWRvcHRpb24gb2YgdGhlIHN5c3RlbSwKICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgaW5zdGl0dXRlZCBmb3IgdGhlIHRyaWVyYXJjaHkgaW4gMzU3LCB3aGVyZWJ5IHRoZSA8ZGF0ZSBhdXRobmFtZT0iMTIwMCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iMTIwMCI+MTIwMDwvZGF0ZT4gd2VyZSBkaXZpZGVkIGludG8gMjAgY29tcGFuaWVzIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Dz4XOvM68zr/PgeG9t86xzrk8L2ZvcmVpZ24+77yJIG9mIDYwIGVhY2gsIGZ1cnRoZXIKICAgICAgICAgICAgICAgICAgICAgICAgc3ViZGl2aWRlZCBpbnRvIHN5bmRpY2F0ZXMg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4PPhc69z4ThvbPOu861zrnOsc65PC9mb3JlaWduPu+8iSwgZWFjaCByZXNwb25zaWJsZSBmb3Igb25lIHNoaXAuIFRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIHRoZSBzeXN0ZW0gcmVmb3JtZWQgYXQgYSBsYXRlciBkYXRlIGJ5IERlbW9zdGhlbmVzIGhpbXNlbGYuPC9ub3RlPiBpcyBpdAogICAgICAgICAgICAgICAgICAgIHdvcnRoIG91ciB3aGlsZSB0byBleGNpdGUgdGhlIGRpc3RydXN0IG9mIGFsbD8gQnV0IHN1cmVseSB3ZSBtdXN0IGtub3cgdGhpcywKICAgICAgICAgICAgICAgICAgICB0aGF0IGFzIGxvbmcgYXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DPgc6/zrXOuc+Dz4bOv8+B4b2xPC9mb3JlaWduPmFuZAogICAgICAgICAgICAgICAgICAgICAgICBvZiA8ZGF0ZSBhdXRobmFtZT0iMTIwMCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iMTIwMCI+MTIwMDwvZGF0ZT4gZm9yIHRoZSB0cmllcmFyY2h5LCB3ZSBtYXkgcGVyaGFwcyBhc3N1bWUKICAgICAgICAgICAgICAgICAgICAgICAgYSBsaXN0IG9mIDYwMCBmb3IgdGhlIHJlZ3VsYXIgc2VydmljZXMuIEF0IHRoZSByYXRlIG9mIDYwIGEgeWVhciwgaXQgd291bGQKICAgICAgICAgICAgICAgICAgICAgICAgdGFrZSAxMCB5ZWFycyB0byB3b3JrIHRocm91Z2ggdGhlIGxpc3QsIGlmIHRoZSBjb250cmlidXRvcnMgd2VyZSBjYWxsZWQgdXBvbgogICAgICAgICAgICAgICAgICAgICAgICBzdHJpY3RseSBpbiByb3RhdGlvbiBieSB0aGUgb2ZmaWNpYWxzIG9mIHRoZWlyIHJlc3BlY3RpdmUgdHJpYmVzLiBUaGVyZWZvcmUKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG91dHNpZGUgZXN0aW1hdGUgb2YgMzAgYWRkaXRpb25hbCBjb250cmlidXRvcnMsIHJlbmRlcmVkIGF2YWlsYWJsZSBieQogICAgICAgICAgICAgICAgICAgICAgICBhYm9saXNoaW5nIHRoZSBpbW11bml0aWVzLCB3b3VsZCBwcm92aWRlIG9ubHkgMyBtb3JlIGVhY2ggeWVhcjsgaS5lLiAzCiAgICAgICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIG91dCBvZiA2MCB3b3VsZCBiZSByZWxpZXZlZCBhbm51YWxseS4gSW4gY2FzZSBvZiBhIHJlYWwgc2hvcnRhZ2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgcXVhbGlmaWVkIGNvbnRyaWJ1dG9ycywgRGVtb3N0aGVuZXMgd291bGQgcHJlZmVyIHRoZSBhZG9wdGlvbiBvZiB0aGUgc3lzdGVtLAogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCBpbnN0aXR1dGVkIGZvciB0aGUgdHJpZXJhcmNoeSBpbiAzNTcsIHdoZXJlYnkgdGhlIDxkYXRlIGF1dGhuYW1lPSIxMjAwIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxMjAwIj4xMjAwPC9kYXRlPiB3ZXJlIGRpdmlkZWQgaW50byAyMCBjb21wYW5pZXMg77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4PPhc68zrzOv8+B4b23zrHOuTwvZm9yZWlnbj7vvIkgb2YgNjAgZWFjaCwgZnVydGhlcgogICAgICAgICAgICAgICAgICAgICAgICBzdWJkaXZpZGVkIGludG8gc3luZGljYXRlcyDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg8+Fzr3PhOG9s867zrXOuc6xzrk8L2ZvcmVpZ24+77yJLCBlYWNoIHJlc3BvbnNpYmxlIGZvciBvbmUgc2hpcC4gVGhpcwogICAgICAgICAgICAgICAgICAgICAgICB3YXMgdGhlIHN5c3RlbSByZWZvcm1lZCBhdCBhIGxhdGVyIGRhdGUgYnkgRGVtb3N0aGVuZXMgaGltc2VsZi48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gc3RhbmRzLCB0aGVyZQogICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgcGxlbnR5IG9mIGNpdGl6ZW5zLCB3aXRob3V0IGZhaWwsIHRvIHBlcmZvcm0gdGhlIHNlcnZpY2VzLCBidXQgbm90IGEKICAgICAgICAgICAgICAgICAgICBzb3VsIHdpbGwgd2FudCB0byBkbyB1cyBhIGdvb2QgdHVybiwgaWYgaGUgc2VlcyBvdXIgcHJldmlvdXMgYmVuZWZhY3RvcnMKICAgICAgICAgICAgICAgICAgICB3cm9uZ2VkLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5TbyBmYXIsIHNvIGdvb2QuIEJ1dCBpZiB0aGVyZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vc3Qgc2VyaW91cyBzaG9ydGFnZSBvZiBwb3NzaWJsZSBjb250cmlidXRvcnMsIGluIEhlYXZlbidzIG5hbWUsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd291bGQgeW91IHByZWZlcuKAlHRvIG9yZ2FuaXplIHN5bmRpY2F0ZXMgZm9yIHRob3NlIHNlcnZpY2VzIGFzIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQgb2Ygd2FyLXZlc3NlbHMsIG9yIHRvIHJvYiB5b3VyIGJlbmVmYWN0b3JzIG9mIHdoYXQgeW91IGhhdmUgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICB0aGVtPyBJIHRoaW5rIEkgc2hvdWxkIHByZWZlciB0aGUgc3luZGljYXRlcy4gQnkgdGhlIHByZXNlbnQgbGF3LCB3aGlsZSBlYWNoIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgdGhpcnR5IGlzIHBlcmZvcm1pbmcgYSBwdWJsaWMgc2VydmljZSwgTGVwdGluZXMgYWZmb3JkcyBhIHJlc3BpdGUgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVycywgYW5kIHRoYXQgaXMgYWxsOyBhZnRlciB0aGF0LCBlYWNoIG9mIHRoZW0gd2lsbCBoYXZlIHRvIHNwZW5kIGFzIG11Y2ggYXMKICAgICAgICAgICAgICAgICAgICBiZWZvcmU7IGJ1dCBpbiB0aGUgb3RoZXIgY2FzZSwgZWFjaCB3b3VsZCBwYXkgYSBzbWFsbCBjb250cmlidXRpb24sIHByb3BvcnRpb25lZAogICAgICAgICAgICAgICAgICAgIHRvIGhpcyBtZWFucywgYW5kIG5vbmUgd291bGQgYmUgaGFyZGx5IHRyZWF0ZWQsIGV2ZW4gaWYgaGlzIHByb3BlcnR5IHdlcmUgcXVpdGUKICAgICAgICAgICAgICAgICAgICBzbWFsbC4gPC90cmFuc2xhdGlvbj4="
translation['20.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHNvbWUKICAgICAgICAgICAgICAgICAgICBvZiBvdXIgb3Bwb25lbnRzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhcmUKICAgICAgICAgICAgICAgICAgICBzbyBpbGxvZ2ljYWwgdGhhdCB0aGV5IG1ha2Ugbm8gYXR0ZW1wdCB0byBhbnN3ZXIgdGhlc2UgYXJndW1lbnRzLCBidXQgdGFrZSBhCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW50IGxpbmUsIHNheWluZyBmb3IgaW5zdGFuY2UgaG93IG1vbnN0cm91cyBpdCBpcyB0aGF0IG9uIHRoZSBvbmUgaGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGlzIG5vdGhpbmcgbGVmdCBpbiB0aGUgRXhjaGVxdWVyLCBidXQgb24gdGhlIG90aGVyIGhhbmQgcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWxzIHdpbGwgZ3JvdyB3ZWFsdGh5IGJlY2F1c2UgdGhleSBoYXZlIHNlY3VyZWQgYW4gaW1tdW5pdHkuIEJ1dCBpdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCBmYWlyIHRvIGNvbWJpbmUgYm90aCB0aGVzZSBzdGF0ZW1lbnRzLiBGb3IgaWYgYSBtYW4gaGFzIGdyZWF0IHdlYWx0aCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgZG9pbmcgeW91IGFueSB3cm9uZywgdGhlcmUgaXMgc3VyZWx5IG5vIG5lZWQgdG8gbG9vayBvbiBoaW0gd2l0aCBlbnZ5OyBidXQgaWYKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBwcmVwYXJlZCB0byBzYXkgdGhhdCBoZSBoYXMgc3RvbGVuIGl0IG9yIGdhaW5lZCBpdCBpbiBzb21lIG90aGVyCiAgICAgICAgICAgICAgICAgICAgZGlzcmVwdXRhYmxlIHdheSwgdGhlcmUgYXJlIGxhd3MgYnkgd2hpY2ggaGUgY2FuIGJlIHN1aXRhYmx5IHB1bmlzaGVkLiBCdXQgYXMKICAgICAgICAgICAgICAgICAgICBsb25nIGFzIHRoZXkgZG8gbm90IHByb3NlY3V0ZSBoaW0sIG5laXRoZXIgaGF2ZSB0aGV5IGFueSByaWdodCB0byBtYWtlIHRoaXMKICAgICAgICAgICAgICAgICAgICBhbGxlZ2F0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCB3aXRoIHJlZ2FyZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBhbGxlZ2VkIHBvdmVydHkgb2YgdGhlIEV4Y2hlcXVlciwgeW91IG11c3QgcmVmbGVjdCB0aGF0IHlvdSB3aWxsIG5vdCBiZSBhIHdoaXQKICAgICAgICAgICAgICAgICAgICB0aGUgYmV0dGVyIG9mZiBpZiB5b3UgYWJvbGlzaCB0aGVzZSBleGVtcHRpb25zLCBmb3IgdGhlIGV4cGVuZGl0dXJlIG9uIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgaGFzIG5vdGhpbmcgdG8gZG8gd2l0aCB0aGUgcmV2ZW51ZXMgb3IgdGhlIHN1cnBsdXMgb2YgdGhlIFN0YXRlLiBBbmQKICAgICAgICAgICAgICAgICAgICBhcGFydCBmcm9tIGFsbCB0aGlzLCBvZiB0d28gcG9zc2libGUgYWR2YW50YWdlc+KAlHdlYWx0aCBhbmQgY3JlZGl0IHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCBvZiB0aGUgd29ybGTigJRvdXIgU3RhdGUgdG9kYXkgZW5qb3lzIHRoZSBsYXR0ZXIuIEJ1dCBpZiBhbnlvbmUKICAgICAgICAgICAgICAgICAgICBpbWFnaW5lcyB0aGF0IGJlY2F1c2Ugd2UgaGF2ZSBubyBtb25leSB3ZSBuZWVkIG5vdCBhbHNvIGtlZXAgb3VyIGhvbm9yIGJyaWdodCwKICAgICAgICAgICAgICAgICAgICBoaXMganVkZ2VtZW50IGlzIGF0IGZhdWx0LiBGb3IgbXlzZWxmIGluZGVlZCwgSSBwcmF5IEhlYXZlbiB0aGF0LCBpZiBzbyBpdCBtYXkKICAgICAgICAgICAgICAgICAgICBiZSwgb3VyIHdlYWx0aCBhbHNvIG1heSBpbmNyZWFzZSwgYnV0IGlmIG5vdCwgdGhlbiBhdCBsZWFzdCB0aGF0IG91ciByZXB1dGF0aW9uCiAgICAgICAgICAgICAgICAgICAgZm9yIGdvb2QgZmFpdGggYW5kIGNvbnN0YW5jeSBtYXkgcmVtYWluIHN1cmUuIDwvdHJhbnNsYXRpb24+"
translation['20.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRha2UgdGhlIGxhcmdlIGZvcnR1bmVzIHdoaWNoLAogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byBvdXIgb3Bwb25lbnRzLCBzb21lIGNpdGl6ZW5zIHdpbGwgYW1hc3MgaWYgcmVsaWV2ZWQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMsIGJ1dCB3aGljaCBJIHdpbGwgc2hvdyB0byBiZSBhdmFpbGFibGUgZm9yIHlvdXIgbmVlZHMuIEZvciBvZiBjb3Vyc2UKICAgICAgICAgICAgICAgICAgICB5b3UgYXJlIGF3YXJlIHRoYXQgbm8gb25lIGlzIGV4ZW1wdCBmcm9tIHRoZSBlcXVpcG1lbnQgb2Ygd2FyLWdhbGxleXMgb3IgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBzcGVjaWFsIGNvbnRyaWJ1dGlvbnMgZm9yIHdhci4gU28gdGhpcyBwZXJzb24sIHdob2V2ZXIgaGUgbWF5IGJlLCB3aG8gb3ducwogICAgICAgICAgICAgICAgICAgIG11Y2gsIGNvbnRyaWJ1dGVzIG11Y2ggdG8gdGhvc2Ugb2JqZWN0czsgdGhlcmUgaXMgbm8gZ2V0dGluZyBvdXQgb2YgaXQuIEFuZAogICAgICAgICAgICAgICAgICAgIGFnYWluLCBhbGwgd291bGQgYWdyZWUgdGhhdCB0aGUgcmVzb3VyY2VzIHdoaWNoIHRoZSBTdGF0ZSBjYW4gcmVseSBvbiBmb3IgdGhlc2UKICAgICAgICAgICAgICAgICAgICBvYmplY3RzIHNob3VsZCBiZSBhcyBncmVhdCBhcyBwb3NzaWJsZS4gRm9yIG1vbmV5IHNwZW50IGJ5IHRoZSBjaG9ydXMtbWFzdGVycwogICAgICAgICAgICAgICAgICAgIGFmZm9yZHMgdGhvc2Ugb2YgdXMgd2hvIGFyZSBpbiB0aGUgdGhlYXRlciBncmF0aWZpY2F0aW9uIGZvciBhIGZyYWN0aW9uIG9mIGEKICAgICAgICAgICAgICAgICAgICBkYXk7IGJ1dCBtb25leSBsYXZpc2hlZCBvbiBlcXVpcG1lbnQgZm9yIHdhciBnaXZlcyBzZWN1cml0eSB0byB0aGUgd2hvbGUgY2l0eQogICAgICAgICAgICAgICAgICAgIGZvciBhbGwgdGltZS4gPC90cmFuc2xhdGlvbj4="
translation['20.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgd2hhdGV2ZXIgeW91IHJlbWl0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBvbmUgaGFuZCwgeW91IHJlY2VpdmUgd2l0aCB0aGUgb3RoZXI7IGFuZCB5b3UgZ3JhbnQgYXMgYW4gaG9ub3IgZXhlbXB0aW9ucwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGV2ZW4gdGhvc2Ugd2hvIHJlY2VpdmUgdGhlbSBjYW5ub3QgZW5qb3ksIGlmIHRoZXkgaGF2ZSB3ZWFsdGggc3VmZmljaWVudAogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZXF1aXBtZW50IG9mIGEgd2FyLXZlc3NlbC4gQnV0IGFsdGhvdWdoIEkgc3VwcG9zZSB5b3UgYWxsIGtub3cgdGhhdCBubwogICAgICAgICAgICAgICAgICAgIG9uZSBpcyBleGVtcHQgZnJvbSB0aGUgbGF0dGVyIHNlcnZpY2UsIHRoZSBjbGVyayBzaGFsbCByZWFkIHRvIHlvdSB0aGUgYWN0dWFsCiAgICAgICAgICAgICAgICAgICAgc3RhdHV0ZS4gVGFrZSB0aGUgbGF3IGFib3V0IHRoZSB0cmllcmFyY2h5IGFuZCByZWFkIHRoaXMgY2xhdXNlIG9ubHkuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bQW5kCiAgICAgICAgICAgICAgICAgICAgICAgIG5vbmUgc2hhbGwgYmUgZXhlbXB0IGZyb20gdGhlIHRyaWVyYXJjaHkgZXhjZXB0IHRoZSBuaW5lCiAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hvbnMuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0FuZAogICAgICAgICAgICAgICAgICAgICAgICBub25lIHNoYWxsIGJlIGV4ZW1wdCBmcm9tIHRoZSB0cmllcmFyY2h5IGV4Y2VwdCB0aGUgbmluZQogICAgICAgICAgICAgICAgICAgICAgICBhcmNob25zLl08L3RyYW5zbGF0aW9uPg=="
translation['20.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHNlZSwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIGhvdyBleHBsaWNpdGx5IHRoZSBsYXcgbGF5cyBkb3duIHRoYXQgbm9uZSBzaGFsbCBiZSBleGVtcHQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQgb2YgYSB3YXItZ2FsbGV5IGV4Y2VwdCB0aGUgbmluZSBhcmNob25zLiBTbyB0aG9zZSB3aG9zZSB3ZWFsdGggZmFsbHMKICAgICAgICAgICAgICAgICAgICBzaG9ydCBvZiB0aGUgcXVhbGlmaWNhdGlvbiBmb3IgdGhhdCBzZXJ2aWNlIHdpbGwgY29udHJpYnV0ZSBieSBncm91cHMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgc3BlY2lhbCB3YXItdGF4LCBidXQgdGhvc2Ugd2hvIHJlYWNoIHRoYXQgcXVhbGlmaWNhdGlvbiB3aWxsIGJlIGF2YWlsYWJsZSBib3RoCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSB3YXItZ2FsbGV5cyBhbmQgZm9yIHRoZSB3YXItdGF4LiBUaGVuIHdoYXQgcmVsaWVmIGRvZXMgeW91ciBsYXcsCiAgICAgICAgICAgICAgICAgICAgTGVwdGluZXMsIGFmZm9yZCB0byB0aGUgbWFpbiBib2R5IG9mIGNpdGl6ZW5zLCBpZiBmcm9tIG9uZSBvciB0d28gdHJpYmVzIGl0CiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXMgYSBzaW5nbGUgY29udHJpYnV0b3IsIHdobywgaGF2aW5nIHJlbGlldmVkIG9uZSBvdGhlciBjaXRpemVuIG9uIG9uZQogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uLCB3aWxsIHRoZXJlYWZ0ZXIgYmUgZXhlbXB0Pzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BY2NvcmRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdG8gRGVtb3N0aGVtZXMnIGxvd2VzdCBlc3RpbWF0ZSwgdGhlcmUgd291bGQgYmUgNSBvciA2IGNpdGl6ZW5zIGV4ZW1wdDoKICAgICAgICAgICAgICAgICAgICAgICAgdG90YWwgMTYuIFRoaXMgbnVtYmVyIGhlIGlzIHdpbGxpbmcgdG8gZG91YmxlLCBtYWtpbmcgdGhlIGZ1bGwgdG90YWwgMzAgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0b3RhbCBvZiBjaXRpemVucyBwcmVzdW1hYmx5IDEwIG9yIDEyLiBJZiBzcHJlYWQgb3ZlciB0aGUgbDAgdHJpYmVzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbG93ZXIgZXN0aW1hdGUgd291bGQgZ2l2ZSwgcm91Z2hseSwgb25lIGNvbnRyaWJ1dG9yIGZvciAyIHRyaWJlczsgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBoaWdoZXIsIG9uZSBmb3IgZWFjaCB0cmliZS48L25vdGU+IEkgY2FuIHNlZSBubyByZWxpZWYuIE9uIHRoZSBvdGhlciBoYW5kIGl0CiAgICAgICAgICAgICAgICAgICAgdGFpbnRzIHRoZSBob25vciBhbmQgY3JlZGl0IG9mIHRoZSB3aG9sZSBTdGF0ZS4gVGhlcmVmb3JlLCB3aGVuIHRoZSBkYW1hZ2UgaXQKICAgICAgICAgICAgICAgICAgICB3aWxsIGluZmxpY3QgaXMgZ3JlYXRlciB0aGFuIHRoZSBiZW5lZml0IGl0IGNvbmZlcnMsIG91Z2h0IGl0IG5vdCB0byBiZSByZXBlYWxlZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoaXMgY291cnQ/IFN1Y2ggd291bGQgYmUgbXkgdmVyZGljdC4gPC90cmFuc2xhdGlvbj4="
translation['20.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TXkgbmV4dCBwb2ludCBpcyB0aGlzLCBnZW50bGVtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeS4gVGhlIGxhdyBvZiBMZXB0aW5lcyBleHBsaWNpdGx5IHN0YXRlcyB0aGF0ICJub25lLCB3aGV0aGVyIGNpdGl6ZW4gb3IKICAgICAgICAgICAgICAgICAgICBlbmZyYW5jaGlzZWQgYWxpZW4gb3IgZm9yZWlnbmVyLCBzaGFsbCBiZSBleGVtcHQsIiBhbmQgZG9lcyBub3Qgc3BlY2lmeSBmcm9tCiAgICAgICAgICAgICAgICAgICAgd2hhdCwgd2hldGhlciBmcm9tIHRoZSBwdWJsaWMgc2VydmljZSBvciBmcm9tIGFueSBvdGhlciBjaGFyZ2UsIGJ1dCBzaW1wbHkgdGhhdAogICAgICAgICAgICAgICAgICAgICJub25lIHNoYWxsIGJlIGV4ZW1wdCBleGNlcHQgdGhlIGRlc2NlbmRhbnRzIG9mIEhhcm1vZGl1cyBhbmQgQXJpc3RvZ2l0b24uIiBUaGUKICAgICAgICAgICAgICAgICAgICB3b3JkICJub25lIiBtdXN0IGJlIHRha2VuIHRvIGluY2x1ZGUgYWxsIGNsYXNzZXMsIGFuZCBmb3JlaWduZXIgaXMgbm90IGZ1cnRoZXIKICAgICAgICAgICAgICAgICAgICBkZWZpbmVkIGFzIHJlc2lkZW50IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBmb2xsb3dzIHRoYXQgTGVwdGluZXMgZGVwcml2ZXMKICAgICAgICAgICAgICAgICAgICAgICAgTGV1Y29uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5MZXVjb24sIHNvbiBhbmQgc3VjY2Vzb3Igb2YgU2F0eXJ1cywKICAgICAgICAgICAgICAgICAgICAgICAgcmVpZ25lZCBvdmVyIHRoZSBDaW1tZXJpYW4gQm9zcG9ydXMg77yIPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDMzODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMzM4MSI+Q3JpbWVhPC9wbGFjZU5hbWU+77yJIGZyb20gMzkzIHRvIDM1My4gSW4gcmV0dXJuIGZvciBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgaGVyZSBkZXNjcmliZCwgdGhlIEF0aGVuaWFucyBoYWQgbWFkZSBoaW0gYSBjaXRpemVuLCB2b3RlZCBoaW0gYQogICAgICAgICAgICAgICAgICAgICAgICBnb2xkZW4gY3Jvd24sIGFuZCBhbGxvd2VkIGhpbSBleGVtcHRpb24gbm90IG9ubHkgZnJvbSBwdWJsaWMgc2VydmljZXMgYnV0CiAgICAgICAgICAgICAgICAgICAgICAgIGFsc28gZnJvbSB0aGUgcGF5bWVudCBvZiBjdXN0b21zIGF0IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBpcmFldXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBpcmFldXMiPlBpcmFldXM8L3BsYWNlTmFtZT4uIEhpcyBzb25zIHdlcmUgU3BhcnRhY3VzIGFuZCBQYWVyaXNhZGVzLCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VlZGVkIGhpbSBhcyBqb2ludCBydWxlcnMsIGFuZCBBcG9sbG9uaXVzLiBBbiBpbnNjcmlwdGlvbiBpbiB0aGVpciBob25vcgogICAgICAgICAgICAgICAgICAgICAgICB3YXMgdm90ZWQgaW4gdGhlIHllYXJzIDM0Ny0zNDYuIEl0IHdhcyBkaXNjb3ZlcmVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhbmQgcHVibGlzaGVkIGluIDxkYXRlIGF1dGhuYW1lPSIxODc3IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSIxODc3Ij4xODc3PC9kYXRlPi4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkhpY2tzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NYW51YWwgb2YgR3JlZWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIaXN0b3JpY2FsIEluc2NyaXB0aW9uczwvdGl0bGU+LCBuby4gMTExPC9iaWJsPi48L25vdGU+IHRoZSBydWxlciBvZgogICAgICAgICAgICAgICAgICAgIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMzM4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAzMzgxIj5DcmltZWE8L3BsYWNlTmFtZT7vvIkgZnJvbSAzOTMgdG8gMzUzLiBJbiByZXR1cm4gZm9yIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcyBoZXJlIGRlc2NyaWJkLCB0aGUgQXRoZW5pYW5zIGhhZCBtYWRlIGhpbSBhIGNpdGl6ZW4sIHZvdGVkIGhpbSBhCiAgICAgICAgICAgICAgICAgICAgICAgIGdvbGRlbiBjcm93biwgYW5kIGFsbG93ZWQgaGltIGV4ZW1wdGlvbiBub3Qgb25seSBmcm9tIHB1YmxpYyBzZXJ2aWNlcyBidXQKICAgICAgICAgICAgICAgICAgICAgICAgYWxzbyBmcm9tIHRoZSBwYXltZW50IG9mIGN1c3RvbXMgYXQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsUGlyYWV1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGlyYWV1cyI+UGlyYWV1czwvcGxhY2VOYW1lPi4gSGlzIHNvbnMgd2VyZSBTcGFydGFjdXMgYW5kIFBhZXJpc2FkZXMsIHdobwogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZWVkZWQgaGltIGFzIGpvaW50IHJ1bGVycywgYW5kIEFwb2xsb25pdXMuIEFuIGluc2NyaXB0aW9uIGluIHRoZWlyIGhvbm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcyB2b3RlZCBpbiB0aGUgeWVhcnMgMzQ3LTM0Ni4gSXQgd2FzIGRpc2NvdmVyZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCBwdWJsaXNoZWQgaW4gPGRhdGUgYXV0aG5hbWU9IjE4NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9IjE4NzciPjE4Nzc8L2RhdGU+LiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+SGlja3MsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hbnVhbCBvZiBHcmVlawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhpc3RvcmljYWwgSW5zY3JpcHRpb25zPC90aXRsZT4sIG5vLiAxMTE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hbnVhbCBvZiBHcmVlawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhpc3RvcmljYWwgSW5zY3JpcHRpb25zPC90aXRsZT4sIG5vLiAxMTE8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPiwgYW5kIGhpcyBjaGlsZHJlbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZXdhcmQgd2hpY2ggeW91IGJlc3Rvd2VkIG9uIHRoZW0uIEZvciwgb2YgY291cnNlLCBMZXVjb24gaXMgYSBmb3JlaWduZXIgYnkKICAgICAgICAgICAgICAgICAgICBiaXJ0aCwgdGhvdWdoIGJ5IGFkb3B0aW9uIGFuIEF0aGVuaWFuIGNpdGl6ZW4sIGJ1dCBvbiBuZWl0aGVyIGdyb3VuZCBjYW4gaGUKICAgICAgICAgICAgICAgICAgICBjbGFpbSBleGVtcHRpb24sIGlmIHRoaXMgbGF3IHN0YW5kcy4gQW5kIHlldCwgd2hpbGUgb2Ygb3VyIG90aGVyIGJlbmVmYWN0b3JzCiAgICAgICAgICAgICAgICAgICAgZWFjaCBoYXMgbWFkZSBoaW1zZWxmIHVzZWZ1bCB0byB1cyBvbiBvbmUgb2NjYXNpb24sIExldWNvbiB3aWxsIGJlIGZvdW5kIG9uCiAgICAgICAgICAgICAgICAgICAgcmVmbGVjdGlvbiB0byBiZSBhIHBlcnBldHVhbCBiZW5lZmFjdG9yLCBhbmQgdGhhdCBpbiBhIG1hdHRlciBlc3BlY2lhbGx5IHZpdGFsCiAgICAgICAgICAgICAgICAgICAgdG8gb3VyIGNpdHkuIDwvdHJhbnNsYXRpb24+"
translation['20.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91IGFyZSBhd2FyZSB0aGF0IHdlIGNvbnN1bWUKICAgICAgICAgICAgICAgICAgICBtb3JlIGltcG9ydGVkIGNvcm4gdGhhbiBhbnkgb3RoZXIgbmF0aW9uLiBOb3cgdGhlIGNvcm4gdGhhdCBjb21lcyB0byBvdXIgcG9ydHMKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjYxOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2NjE5Ij5CbGFjayBTZWE8L3BsYWNlTmFtZT4gaXMgZXF1YWwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgYW1vdW50IGZyb20gYWxsIG90aGVyIHBsYWNlcyBvZiBleHBvcnQuIEFuZCB0aGlzIGlzIG5vdCBzdXJwcmlzaW5nOyBmb3IKICAgICAgICAgICAgICAgICAgICBub3Qgb25seSBpcyB0aGF0IGRpc3RyaWN0IG1vc3QgcHJvZHVjdGl2ZSBvZiBjb3JuLCBidXQgYWxzbyBMZXVjb24sIHdobyBjb250cm9scwogICAgICAgICAgICAgICAgICAgIHRoZSB0cmFkZSwgaGFzIGdyYW50ZWQgZXhlbXB0aW9uIGZyb20gZHVlcyB0byBtZXJjaGFudHMgY29udmV5aW5nIGNvcm4gdG8KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgaGUgcHJvY2xhaW1zIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG9zZSBib3VuZCBmb3IgeW91ciBwb3J0IHNoYWxsIGhhdmUgcHJpb3JpdHkgb2YgbGFkaW5nLiBGb3IgTGV1Y29uLCBlbmpveWluZwogICAgICAgICAgICAgICAgICAgIGV4ZW1wdGlvbiBmb3IgaGltc2VsZiBhbmQgaGlzIGNoaWxkcmVuLCBoYXMgZ3JhbnRlZCBleGVtcHRpb24gdG8gZXZlcnkgb25lIG9mCiAgICAgICAgICAgICAgICAgICAgeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['20.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5TZWUgd2hhdCB0aGlzIGFtb3VudHMgdG8uIEhlIGV4YWN0cyBhCiAgICAgICAgICAgICAgICAgICAgdG9sbCBvZiBvbmUtdGhpcnRpZXRoIGZyb20gZXhwb3J0ZXJzIG9mIGNvcm4gZnJvbSBoaXMgY291bnRyeS4gTm93IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+IHRoZXJlIGNvbWUgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFib3V0IGZvdXIgaHVuZHJlZCB0aG91c2FuZCBidXNoZWxzOwogICAgICAgICAgICAgICAgICAgIHRoZSBmaWd1cmVzIGNhbiBiZSBjaGVja2VkIGJ5IHRoZSBib29rcyBvZiB0aGUgZ3JhaW4gY29tbWlzc2lvbmVycy4gU28gZm9yIGVhY2gKICAgICAgICAgICAgICAgICAgICB0aHJlZSBodW5kcmVkIHRob3VzYW5kIGJ1c2hlbHMgaGUgbWFrZXMgdXMgYSBwcmVzZW50IG9mIHRlbiB0aG91c2FuZCBidXNoZWxzLAogICAgICAgICAgICAgICAgICAgIGFuZCBmb3IgdGhlIHJlbWFpbmluZyBodW5kcmVkIHRob3VzYW5kIGEgcHJlc2VudCBvZiByb3VnaGx5IHRocmVlIHRob3VzYW5kLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UbyBoZWxwIGhpcyBhdWRpZW5jZSBpbiB0aGlzIHBpZWNlIG9mIG1lbnRhbAogICAgICAgICAgICAgICAgICAgICAgICBhcml0aG1ldGljLCBEZW1vc3RoZW5lcyBkaXZpZGVzIGhpcyA0MDAsMDAwIGludG8gdHdvIHBhcnRzLCBvZiAzMDAsMDAwIChvZgogICAgICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGUgdGhpcnRpZXRoIGlzIGVhc2lseSBjYWxjdWxhdGVkKSBhbmQgb2YgMTAwLDAwMCwgdGhlIHRoaXJ0aWV0aCBvZgogICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBpcyAzMzMzIDEvMyBvciByb3VnaGx5IDMwMDAuIEl0IHNob3VsZCBiZSByZW1lbWJlcmVkIHRoYXQgdGhlIG1lZGltbnVzCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIG1vcmUgc3RyaWN0bHkgYWJvdXQgYSBidXNoZWwgYW5kIGEgaGFsZi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHNvIGxpdHRsZSBkYW5nZXIgaXMgdGhlcmUgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZGVwcml2aW5nIG91ciBzdGF0ZSBvZiB0aGlzIGdpZnQsIHRoYXQgaGUgaGFzIG9wZW5lZCBhbm90aGVyIGRlcG90IGF0IFRoZXVkb3NpYSwKICAgICAgICAgICAgICAgICAgICB3aGljaCBvdXIgbWVyY2hhbnRzIHNheSBpcyBub3QgYXQgYWxsIGluZmVyaW9yIHRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTExNTA2OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTE1MDY4Ij5Cb3Nwb3J1czwvcGxhY2VOYW1lPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGVyZQogICAgICAgICAgICAgICAgICAgICAgICBub3QgdGhlIGRpc3RyaWN0LCBidXQgdGhlIGNhcGl0YWwsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDA5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwMDkiPlBhbnRpY2FwYWV1bTwvcGxhY2VOYW1lPiwgdGhlIG1vZGVybiBLZXJ0Y2guIFNpeHR5IG1pbGVzIHdlc3QgbGllcwogICAgICAgICAgICAgICAgICAgICAgICBUaGV1ZG9zaWEg77yIPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY2OTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjY5MyI+S2FmZmE8L3BsYWNlTmFtZT7vvIksIGFuIGFuY2llbnQgY29sb255IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWlsZXR1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWlsZXR1cyI+TWlsZXR1czwvcGxhY2VOYW1lPi48L25vdGU+IGFuZCB0aGVyZSwgdG9vLCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBncmFudGVkIHVzIHRoZSBzYW1lIGV4ZW1wdGlvbi4gSSBvbWl0IG11Y2ggdGhhdCBtaWdodCBiZSBzYWlkIGFib3V0IHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIGJlbmVmaXRzIGNvbmZlcnJlZCB1cG9uIHlvdSBieSB0aGlzIHByaW5jZSBhbmQgYWxzbyBieSBoaXMgYW5jZXN0b3JzLCBidXQgdGhlCiAgICAgICAgICAgICAgICAgICAgeWVhciBiZWZvcmUgbGFzdCwgd2hlbiB0aGVyZSB3YXMgYSB1bml2ZXJzYWwgc2hvcnRhZ2Ugb2YgZ3JhaW4sIGhlIG5vdCBvbmx5IHNlbnQKICAgICAgICAgICAgICAgICAgICBlbm91Z2ggZm9yIHlvdXIgbmVlZHMsIGJ1dCBzdWNoIGEgcXVhbnRpdHkgaW4gYWRkaXRpb24gdGhhdCBDYWxsaXN0aGVuZXMgaGFkIGEKICAgICAgICAgICAgICAgICAgICBzdXJwbHVzIG9mIGZpZnRlZW4gdGFsZW50cyBvZiBzaWx2ZXIgdG8gZGlzcG9zZSBvZi48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjAwOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDA5Ij5QYW50aWNhcGFldW08L3BsYWNlTmFtZT4sIHRoZSBtb2Rlcm4gS2VydGNoLiBTaXh0eSBtaWxlcyB3ZXN0IGxpZXMKICAgICAgICAgICAgICAgICAgICAgICAgVGhldWRvc2lhIO+8iDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2OTMiPkthZmZhPC9wbGFjZU5hbWU+77yJLCBhbiBhbmNpZW50IGNvbG9ueSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1pbGV0dXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1pbGV0dXMiPk1pbGV0dXM8L3BsYWNlTmFtZT4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNhbGxpc3RoZW5lcywgYXM8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg865z4Thvb3Ovc63z4I8L2ZvcmVpZ24+b3IgRm9vZAogICAgICAgICAgICAgICAgICAgICAgICBDb250cm9sbGVyIO+8iGFuIG9mZmljZSBoZWxkIGJ5IERlbW9zdGhlbmVzIGhpbXNlbGYsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4yNDgiIHZhbGlkPSJ5ZXMiPkRlbS4gMTguMjQ4PC9iaWJsPu+8iSwgcmVjZWl2ZWQgc28gbXVjaCBjb3JuIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgTGV1Y29uIHRoYXQsIGFmdGVyIHN1cHBseWluZyB0aGUgbmVlZHMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBoZSB3YXMgYWJsZSB0byBtYWtlIDE2IHRhbGVudHMgZm9yIHRoZSB0cmVhc3VyeSBieQogICAgICAgICAgICAgICAgICAgICAgICBzZWxsaW5nIHRoZSBzdXJwbHVzIGVsc2V3aGVyZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4POuc+E4b29zr3Ot8+CPC9mb3JlaWduPm9yIEZvb2QKICAgICAgICAgICAgICAgICAgICAgICAgQ29udHJvbGxlciDvvIhhbiBvZmZpY2UgaGVsZCBieSBEZW1vc3RoZW5lcyBoaW1zZWxmLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMjQ4IiB2YWxpZD0ieWVzIj5EZW0uIDE4LjI0ODwvYmlibD7vvIksIHJlY2VpdmVkIHNvIG11Y2ggY29ybiBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgIExldWNvbiB0aGF0LCBhZnRlciBzdXBwbHlpbmcgdGhlIG5lZWRzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGUgd2FzIGFibGUgdG8gbWFrZSAxNiB0YWxlbnRzIGZvciB0aGUgdHJlYXN1cnkgYnkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsbGluZyB0aGUgc3VycGx1cyBlbHNld2hlcmUuPC90cmFuc2xhdGlvbj4="
translation['20.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0LCB0aGVuLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBkbyB5b3UgZXhwZWN0IG9mIHRoaXMgbWFuLCB3aG8gaGFzCiAgICAgICAgICAgICAgICAgICAgcHJvdmVkIGhpbXNlbGYgc3VjaCBhIGZyaWVuZCB0byB5b3UsIGlmIGhlIGxlYXJucyB0aGF0IHlvdSBoYXZlIGRlcHJpdmVkIGhpbSBieQogICAgICAgICAgICAgICAgICAgIGxhdyBvZiBoaXMgaW1tdW5pdHksIGFuZCBoYXZlIG1hZGUgaXQgaWxsZWdhbCB0byBiZXN0b3cgaXQgaGVyZWFmdGVyLCBldmVuIGlmCiAgICAgICAgICAgICAgICAgICAgeW91IGNoYW5nZSB5b3VyIG1pbmRzPyBBcmUgeW91IG5vdCBhd2FyZSB0aGF0IHRoaXMgc2FtZSBsYXcsIGlmIHJhdGlmaWVkLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgdGFrZSBhd2F5IHRoZSBpbW11bml0eSwgbm90IG9ubHkgZnJvbSBMZXVjb24sIGJ1dCBmcm9tIHRob3NlIG9mIHlvdSB3aG8gaW1wb3J0CiAgICAgICAgICAgICAgICAgICAgY29ybiBmcm9tIGhpcyBjb3VudHJ5Pzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CZWNhdXNlIExldWNvbiB3aWxsLCBvZgogICAgICAgICAgICAgICAgICAgICAgICBjb3Vyc2UsIHJldGFsaWF0ZSBieSBpbXBvc2luZyB0aGUgZHVlcyBhZ2Fpbi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igc3VyZWx5IG5vIG9uZSBkcmVhbXMgdGhhdCBoZSB3aWxsIHRvbGVyYXRlCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhbmNlbGxpbmcgb2YgeW91ciBnaWZ0cyB0byBoaW0sIGFuZCBsZXQgaGlzIG93biBnaWZ0cyB0byB5b3Ugc3RhbmQgZ29vZC4gU28KICAgICAgICAgICAgICAgICAgICB0byB0aGUgbWFueSBkaXNhZHZhbnRhZ2VzIHRoYXQgdGhpcyBsYXcgd2lsbCBvYnZpb3VzbHkgZW50YWlsIHVwb24geW91LCBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBhZGRlZCB0aGUgaW1tZWRpYXRlIGxvc3Mgb2YgcGFydCBvZiB5b3VyIHJlc291cmNlcy4gSW4gdmlldyBvZiB0aGlzLCBhcmUgeW91CiAgICAgICAgICAgICAgICAgICAgc3RpbGwgY29uc2lkZXJpbmcgd2hldGhlciB5b3Ugb3VnaHQgdG8gZXJhc2UgaXQgZnJvbSB0aGUgc3RhdHV0ZS1ib29rPyBIYXZlIHlvdQogICAgICAgICAgICAgICAgICAgIG5vdCBtYWRlIHVwIHlvdXIgbWluZHMgbG9uZyBhZ28/IFRha2UgYW5kIHJlYWQgdGhlbSB0aGUgZGVjcmVlcyB0b3VjaGluZyBMZXVjb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93IHJlYXNvbmFibGUKICAgICAgICAgICAgICAgICAgICBhbmQganVzdCB3YXMgdGhlIGltbXVuaXR5IHdoaWNoIExldWNvbiBoYXMgb2J0YWluZWQgZnJvbSB5b3UsIHRoZXNlIGRlY3JlZXMgaGF2ZQogICAgICAgICAgICAgICAgICAgIGluZm9ybWVkIHlvdSwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LiBDb3BpZXMgb2YgYWxsIHRoZXNlIGRlY3JlZXMgb24gc3RvbmUgd2VyZQogICAgICAgICAgICAgICAgICAgIHNldCB1cCBieSB5b3UgYW5kIGJ5IExldWNvbiBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4sIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBpcmFldXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBpcmFldXMiPlBpcmFldXM8L3BsYWNlTmFtZT4sIGFuZCBhdCBIaWVydW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBc2lhdGljIHNpZGUgb2YgdGhlIGVudHJhbmNlIHRvIHRoZSBUaHJhY2lhbiBCb3Nwb3J1cyBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBFdXhpbmUuPC9ub3RlPiBKdXN0IHJlZmxlY3QgdG8gd2hhdCBkZXB0aHMgb2YgbWVhbm5lc3MgeW91IGFyZSBkcmFnZ2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhpcyBsYXcsIHdoaWNoIG1ha2VzIHRoZSBuYXRpb24gbGVzcyB0cnVzdHdvcnRoeSB0aGFuIGFuIGluZGl2aWR1YWwuIDwvdHJhbnNsYXRpb24+"
translation['20.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgeW91IG11c3Qgbm90IGltYWdpbmUgdGhhdCB0aGUgcGlsbGFycyBzdGFuZGluZwogICAgICAgICAgICAgICAgICAgIHRoZXJlIGFyZSBhbnl0aGluZyBlbHNlIHRoYW4gdGhlIGNvdmVuYW50cyBvZiBhbGwgdGhhdCB5b3UgaGF2ZSByZWNlaXZlZCBvcgogICAgICAgICAgICAgICAgICAgIGdyYW50ZWQ7IGFuZCBpdCB3aWxsIGJlIG1hZGUgY2xlYXIgdGhhdCBMZXVjb24gb2JzZXJ2ZXMgdGhlbSBhbmQgaXMgYWx3YXlzIGVhZ2VyCiAgICAgICAgICAgICAgICAgICAgdG8gYmVuZWZpdCB5b3UsIGJ1dCB0aGF0IHlvdSBoYXZlIHJlcHVkaWF0ZWQgdGhlbSB3aGlsZSB0aGV5IHN0aWxsIHN0YW5kOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IGlzIGEgZmFyIHdvcnNlIG9mZmVuY2UgdGhhbiB0byBwdWxsIHRoZW0gZG93bjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Cb3RoIG5vdW5zIGJlaW5nIGZlbWluaW5lIHBsdXJhbCwgRGVtb3N0aGVuZXMgaXMgYWJsZSB0byBmdXNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlbHkgdGhlIGxpdGVyYWwgYW5kIG1ldGFwaG9yaWNhbCBtZWFuaW5ncy48L25vdGU+OyBmb3Igd2hlbiBtZW4gd2lzaAogICAgICAgICAgICAgICAgICAgIHRvIHRyYWR1Y2Ugb3VyIGNpdHksIHRoZXJlIHdpbGwgc3RhbmQgdGhlIHBpbGxhcnMgdG8gd2l0bmVzcyB0byB0aGUgdHJ1dGggb2YKICAgICAgICAgICAgICAgICAgICB0aGVpciB3b3Jkcy4gPC90cmFuc2xhdGlvbj4="
translation['20.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgbWFyayEgU3VwcG9zZSBMZXVjb24gc2VuZHMKICAgICAgICAgICAgICAgICAgICBhbmQgYXNrcyB1cyBvbiB3aGF0IGNoYXJnZSBvciBmb3Igd2hhdCBmYXVsdCB3ZSBoYXZlIHRha2VuIGF3YXkgaGlzIGltbXVuaXR5OwogICAgICAgICAgICAgICAgICAgIHdoYXQsIGluIHRoZSBuYW1lIG9mIHdvbmRlciwgc2hhbGwgd2Ugc2F5LCBvciBpbiB3aGF0IHRlcm1zIHdpbGwgdGhlIHByb3Bvc2VyIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciByZXBseSBkcmFmdCBpdD8gSGUgd2lsbCBzYXksIEkgc3VwcG9zZSwgdGhhdCBzb21lIG9mIHRob3NlIHdobyBvYnRhaW5lZAogICAgICAgICAgICAgICAgICAgIGltbXVuaXR5IGRpZCBub3QgZGVzZXJ2ZSBpdCEgPC90cmFuc2xhdGlvbj4="
translation['20.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgdGhlbiwgTGV1Y29uCiAgICAgICAgICAgICAgICAgICAgcmVwbGllcyB0byB0aGlzLCDigJxZZXM7IEkgZGFyZSBzYXkgc29tZSBvZiB0aGUgQXRoZW5pYW5zIGFyZQogICAgICAgICAgICAgICAgICAgIHNjb3VuZHJlbHMsIGJ1dCBJIGhhdmUgbm90IG1hZGUgdGhhdCBhIHJlYXNvbiBmb3Igcm9iYmluZyB0aGUgZ29vZCBjaXRpemVuczsgb24KICAgICAgICAgICAgICAgICAgICB0aGUgY29udHJhcnksIGJlY2F1c2UgSSB0aGluayB0aGUgQXRoZW5pYW5zLCBhcyBhIG5hdGlvbiwgYXJlIGdvb2QgbWVuLCBJIGFsbG93CiAgICAgICAgICAgICAgICAgICAgdGhlbSBhbGwgYSBzaGFyZeKAnTsgd2lsbCB0aGVyZSBub3QgYmUgbW9yZSBmYWlybmVzcyBpbiBoaXMgd29yZHMgdGhhbgogICAgICAgICAgICAgICAgICAgIGluIG91cnM/IFRvIG1lLCBhdCBsZWFzdCwgaXQgc2VlbXMgc28uIEZvciBpdCBpcyB0aGUgY3VzdG9tIG9mIGFsbCBuYXRpb25zLCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgc2FrZSBvZiB0aGVpciBiZW5lZmFjdG9ycywgcmF0aGVyIHRvIGluY2x1ZGUgc29tZSBiYWQgbWVuIGluIHRoZWlyIHJld2FyZHMsCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0byBtYWtlIHRoZSB3b3J0aGxlc3MgbWVuIGFuIGV4Y3VzZSBmb3Igd2l0aGhvbGRpbmcgdGhlaXIgcmV3YXJkcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGFyZSBhY2tub3dsZWRnZWQgdG8gbWVyaXQgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['20.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5OYXkKICAgICAgICAgICAgICAgICAgICBtb3JlLCB1cG9uIGNvbnNpZGVyYXRpb24sIEkgY2Fubm90IGV2ZW4gc2VlIHdoeSBhbnlvbmUgc2hvdWxkIG5vdCwgaWYgaGUgd2lzaGVzLAogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZSBMZXVjb24gdG8gYW4gZXhjaGFuZ2Ugb2YgcHJvcGVydHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJ5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBsZWdhbCBwcm9jZXNzIGtub3duIGFzPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAzr3PhOG9t860zr/Pg865z4I8L2ZvcmVpZ24+LCBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4gY2FsbGVkIHVwb24gdG8gcGVyZm9ybSBhIHB1YmxpYyBzZXJ2aWNlLCBpZiBoZSB0aG91Z2h0IHRoYXQgYSByaWNoZXIKICAgICAgICAgICAgICAgICAgICAgICAgbWFuIGhhZCBiZWVuIHVuZmFpcmx5IHBhc3NlZCBvdmVyLCBjb3VsZCBjaGFsbGVuZ2UgaGltIGVpdGhlciB0byBwZXJmb3JtIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlIGluIGhpcyBzdGVhZCBvciB0byBleGNoYW5nZSBwcm9wZXJ0aWVzLiBEZW1vc3RoZW5lcyBpcyBoZXJlIHB1dHRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgYW4gZXh0cmVtZSBjYXNlLCBmb3IgaXQgaXMgZGlmZmljdWx0IHRvIGJlbGlldmUgdGhhdCBhbiBob25vcmFyeSBjaXRpemVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxpa2UgTGV1Y29uLCByZXNpZGVudCBlbHNld2hlcmUsIGNvdWxkIGJlIGNhbGxlZCB1cG9uIGZvciBhIHNlcnZpY2UsIGV2ZW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIGhhZCB3ZWFsdGggZGVwb3NpdGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi48L25vdGU+IEZvciB0aGVyZSBpcyBhbHdheXMgcHJvcGVydHkgb2YgaGlzIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM69z4ThvbfOtM6/z4POuc+CPC9mb3JlaWduPiwgYQogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVuIGNhbGxlZCB1cG9uIHRvIHBlcmZvcm0gYSBwdWJsaWMgc2VydmljZSwgaWYgaGUgdGhvdWdodCB0aGF0IGEgcmljaGVyCiAgICAgICAgICAgICAgICAgICAgICAgIG1hbiBoYWQgYmVlbiB1bmZhaXJseSBwYXNzZWQgb3ZlciwgY291bGQgY2hhbGxlbmdlIGhpbSBlaXRoZXIgdG8gcGVyZm9ybSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZSBpbiBoaXMgc3RlYWQgb3IgdG8gZXhjaGFuZ2UgcHJvcGVydGllcy4gRGVtb3N0aGVuZXMgaXMgaGVyZSBwdXR0aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGFuIGV4dHJlbWUgY2FzZSwgZm9yIGl0IGlzIGRpZmZpY3VsdCB0byBiZWxpZXZlIHRoYXQgYW4gaG9ub3JhcnkgY2l0aXplbgogICAgICAgICAgICAgICAgICAgICAgICBsaWtlIExldWNvbiwgcmVzaWRlbnQgZWxzZXdoZXJlLCBjb3VsZCBiZSBjYWxsZWQgdXBvbiBmb3IgYSBzZXJ2aWNlLCBldmVuCiAgICAgICAgICAgICAgICAgICAgICAgIHRob3VnaCBoZSBoYWQgd2VhbHRoIGRlcG9zaXRlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgYnkgdGhpcyBsYXcsIGlmCiAgICAgICAgICAgICAgICAgICAgYW55b25lIHRyaWVzIHRvIGxheSBoYW5kcyBvbiBpdCBMZXVjb24gd2lsbCBlaXRoZXIgZm9yZmVpdCBpdCBvciBiZSBjb21wZWxsZWQgdG8KICAgICAgICAgICAgICAgICAgICBwZXJmb3JtIHB1YmxpYyBzZXJ2aWNlLiBBbmQgaXQgaXMgbm90IHRoZSBxdWVzdGlvbiBvZiBleHBlbnNlIHRoYXQgd2lsbCB0cm91YmxlCiAgICAgICAgICAgICAgICAgICAgaGltIG1vc3QsIGJ1dCB0aGUgcmVmbGVjdGlvbiB0aGF0IHlvdSBoYXZlIHJvYmJlZCBoaW0gb2YgaGlzIHJld2FyZC4gPC90cmFuc2xhdGlvbj4="
translation['20.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4gdGhlbiwgQXRoZW5pYW5zLAogICAgICAgICAgICAgICAgICAgIGl0IGlzIG5vdCBtZXJlbHkgbmVjZXNzYXJ5IHRvIGNvbnNpZGVyIGhvdyBMZXVjb24gbWF5IGJlIHNwYXJlZAogICAgICAgICAgICAgICAgICAgIGluanVzdGljZeKAlGEgbWFuIHdob3NlIGFueGlldHkgYWJvdXQgaGlzIHByaXZpbGVnZSB3b3VsZCBhcmlzZSBmcm9tIGEKICAgICAgICAgICAgICAgICAgICBzZW5zZSBvZiBob25vciByYXRoZXIgdGhhbiBmcm9tIGhpcyBuZWVkc+KAlGJ1dCB3ZSBtdXN0IGFsc28gY29uc2lkZXIKICAgICAgICAgICAgICAgICAgICB3aGV0aGVyIGFub3RoZXIgbWFuLCB3aG8gZGlkIHlvdSBzZXJ2aWNlIHdoZW4gaGUgd2FzIHByb3NwZXJvdXMsIG1heSBub3QgZmluZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGV4ZW1wdGlvbiBoZSByZWNlaXZlZCBmcm9tIHlvdSB0aGVuIGlzIGEgbWF0dGVyIG9mIG5lY2Vzc2l0eSB0byBoaW0KICAgICAgICAgICAgICAgICAgICBub3cuIFRvIHdob20sIHRoZW4sIGRvIEkgcmVmZXI/IFRvIEVwaWNlcmRlcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDYzOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwNjM5Ij5DeXJlbmU8L3BsYWNlTmFtZT4sIHRoYW4gd2hvbSBubyByZWNpcGllbnQgb2YgdGhpcyBob25vciBldmVyIGRlc2VydmVkIGl0CiAgICAgICAgICAgICAgICAgICAgYmV0dGVyLCBub3QgYmVjYXVzZSBoaXMgZ2lmdHMgd2VyZSBncmVhdCBvciBleHRyYW9yZGluYXJ5LCBidXQgYmVjYXVzZSB0aGV5IGNhbWUKICAgICAgICAgICAgICAgICAgICBhdCBhIHRpbWUgd2hlbiB3ZSB3ZXJlIGhhcmQgcHV0IHRvIGl0IHRvIGZpbmQsIGV2ZW4gYW1vbmcgdGhvc2Ugd2hvbSB3ZSBoYWQKICAgICAgICAgICAgICAgICAgICBiZW5lZml0ZWQsIGFueW9uZSB3aWxsaW5nIHRvIHJlbWVtYmVyIG91ciBiZW5lZmFjdGlvbnMuIDwvdHJhbnNsYXRpb24+"
translation['20.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgRXBpY2VyZGVzLCBhcyB0aGlzIGRlY3JlZSB0aGVuIHBhc3NlZCBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBob25vciBkZWNsYXJlcywgZ2F2ZSBhIGh1bmRyZWQgbWluYWUgdG8gb3VyIGZlbGxvdy1jb3VudHJ5bWVuIGF0IHRoYXQgdGltZQogICAgICAgICAgICAgICAgICAgIHByaXNvbmVycyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMzEyMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAzMTIyIj5TaWNpbHk8L3BsYWNlTmFtZT4gdW5kZXIgc3VjaAogICAgICAgICAgICAgICAgICAgIGRpc3RyZXNzaW5nIGNpcmN1bXN0YW5jZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZvciB0aGUgaG9ycm9ycwogICAgICAgICAgICAgICAgICAgICAgICBlbmR1cmVkIGJ5IHRoZSA3MDAwIEF0aGVuaWFuIGNhcHRpdmVzLCBzY29yY2hlZCBieSBkYXkgYW5kIGZyb3plbiBieSBuaWdodAogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZGVlcCBzdG9uZS1xdWFycmllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFN5cmFjdXNlIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTeXJhY3VzZSI+U3lyYWN1c2U8L3BsYWNlTmFtZT4sIHNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiA3Ljg3IiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICA3Ljg3PC9iaWJsPi48L25vdGU+IGFuZCB0aHVzIGhlIGJlY2FtZSB0aGUgY2hpZWYgaW5zdHJ1bWVudCBpbiBzYXZpbmcgdGhlbQogICAgICAgICAgICAgICAgICAgIGZyb20gYWxsIHBlcmlzaGluZyBvZiBodW5nZXIuIEFmdGVyd2FyZHMsIHdoZW4geW91IGhhZCByZXdhcmRlZCBoaW0gd2l0aAogICAgICAgICAgICAgICAgICAgIGltbXVuaXR5LCBzZWVpbmcgdGhhdCBpbiB0aGUgd2FyPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTeXJhY3VzZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3lyYWN1c2UiPlN5cmFjdXNlPC9wbGFjZU5hbWU+LCBzZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gNy44NyIgdmFsaWQ9InllcyI+VGh1Yy4KICAgICAgICAgICAgICAgICAgICAgICAgNy44NzwvYmlibD4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSB0aGlyZAogICAgICAgICAgICAgICAgICAgICAgICBwZXJpb2Qgb2YgdGhlIFBlbG9wb25uZXNpYW4gV2FyLCBjYWxsZWQgdGhlIOKAnERlY2VsZWFu4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIFdhciAoNDEzLTQwNCkgZnJvbSB0aGUgU3BhcnRhbiBmb3J0aWZpZWQgcG9zdCBhdCBEZWNlbGVhIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPi48L25vdGU+IGp1c3QgYmVmb3JlIHRoZSBydWxlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFRoaXJ0eSB0aGUgcGVvcGxlIHdlcmUgc3RyYWl0ZW5lZCBmb3Igd2FudCBvZiBmdW5kcywgaGUgZ2F2ZSB0aGVtIGEgdGFsZW50IGFzIGEKICAgICAgICAgICAgICAgICAgICBmcmVld2lsbCBvZmZlcmluZy4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MSI+QXR0aWNhPC9wbGFjZU5hbWU+LjwvdHJhbnNsYXRpb24+"
translation['20.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbmFtZSBvZiBaZXVzIGFuZCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgZ29kcywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXNrCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcyBob3cgYSBtYW4gY291bGQgbW9yZSBjbGVhcmx5IHNob3cgaGlzIGdvb2R3aWxsIHRvd2FyZHMgeW91LCBvciBob3cgaGUKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBsZXNzIGRlc2VydmluZyBvZiBhbiBpbGwgcmV0dXJuIHRoYW4gaWYsIGJlaW5nIGZpcnN0IGFuIGV5ZS13aXRuZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCBuYXRpb25hbCBkaXNhc3RlciwgaGUgc2hvdWxkIHByZWZlciB0aGUgYmVhdGVuIHNpZGUgYW5kIHN1Y2ggZmF2b3JzIGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICBtaWdodCBzb21lIGRheSBiZXN0b3csIHJhdGhlciB0aGFuIHRoZSB2aWN0b3JzIGFtb25nIHdob20gaGUgZm91bmQgaGltc2VsZiBpbgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGhvdXIgb2YgdHJpdW1waDsgb3IgaWYgbmV4dCwgc2VlaW5nIGEgZnVydGhlciBuZWVkIGFyaXNlLCBoZSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBmb3VuZCBvbmNlIG1vcmUgYSBkb25vciwgYW54aW91cyBub3QgdG8gaG9hcmQgaGlzIG93biBwcml2YXRlIG1lYW5zLCBidXQgdG8KICAgICAgICAgICAgICAgICAgICBlbnN1cmUgdGhhdCBubyBjYXVzZSBvZiB5b3VycyBzaG91bGQgZmFsbCBzaG9ydCBvZiBzdWNjZXNzLCBzbyBmYXIgYXMgaW4gaGltCiAgICAgICAgICAgICAgICAgICAgbGF5LiA8L3RyYW5zbGF0aW9uPg=="
translation['20.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgdGhpcyBtYW4sIHdobyBpbiBhY3R1YWwgZGVlZCBvbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIG1vbWVudG91cyBvY2Nhc2lvbnMgc2hhcmVkIGhpcyB3ZWFsdGggd2l0aCB0aGUgcGVvcGxlLCBidXQgZW5qb3llZCBvbmx5IGEKICAgICAgICAgICAgICAgICAgICBub21pbmFsIGFuZCBob25vcmFyeSBpbW11bml0eSwgd2lsbCBiZSByb2JiZWQgYnkgeW91LCBub3Qgb2YgaGlzIGltbXVuaXR5LCBmb3IKICAgICAgICAgICAgICAgICAgICBpdCBpcyBldmlkZW50IHRoYXQgaGUgZGlkIG5vdCB1c2UgaXQgd2hlbiBoZSBoYWQgaXQsIGJ1dCBvZiBoaXMgdHJ1c3QgaW4geW91OwogICAgICAgICAgICAgICAgICAgIGFuZCB3aGF0IGNvdWxkIGJlIG1vcmUgZGlzY3JlZGl0YWJsZSB0aGFuIHRoYXQ/IE5vdyB5b3Ugc2hhbGwgaGVhciB0aGUgdmVyeQogICAgICAgICAgICAgICAgICAgIHdvcmRzIG9mIHRoZSBkZWNyZWUgdGhlbiBwYXNzZWQgaW4gaGlzIGhvbm9yLiBBbmQgb2JzZXJ2ZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaG93IG1hbnkgZGVjcmVlcyB0aGlzIGxhdyBhbm51bHMsCiAgICAgICAgICAgICAgICAgICAgaG93IG1hbnkgaW5kaXZpZHVhbHMgaXQgd3JvbmdzLCBhbmQgd2hhdCBvY2Nhc2lvbnMgdGhleSBjaG9zZSBmb3IgbWFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBzZXJ2aWNlYWJsZSB0byB5b3U7IGZvciB5b3Ugd2lsbCBmaW5kIHRoYXQgdGhlIGxhdyB3cm9uZ3MganVzdCB0aGUKICAgICAgICAgICAgICAgICAgICBtZW4gd2hvIGxlYXN0IGRlc2VydmUgaXQuIFJlYWQuIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+R2VudGxlbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIHlvdSBoYXZlIGhlYXJkIGZyb20gdGhlIGRlY3JlZXMgd2hhdCB3ZXJlIHRoZSBzZXJ2aWNlcyBmb3Igd2hpY2gKICAgICAgICAgICAgICAgICAgICBFcGljZXJkZXMgb2J0YWluZWQgaGlzIGltbXVuaXR5LiBEbyBub3Qgc3RvcCB0byBhc2sgd2hldGhlciBoZSBnYXZlIHlvdSBhCiAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCBtaW5hZSBhbmQgYSB0YWxlbnQgYXMgd2VsbOKAlGZvciBJIGV4cGVjdCB0aGF0IGV2ZW4gdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgaXQgd2VyZSBub3Qgc3RydWNrIGJ5IHRoZSBhbW91bnQgb2YgaGlzIGdpZnTigJRidXQgdGhpbmsgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgemVhbCwgaGlzIHNwb250YW5lb3VzIGFjdCwgYW5kIHRoZSBvY2Nhc2lvbiB0aGF0IGhlIGNob3NlLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgcmVjb21wZW5zZSBpcyBkdWUgdG8gYWxsIGFsaWtlIHdobyBhcmUgZm9yd2FyZCB0bwogICAgICAgICAgICAgICAgICAgIGRvIHVzIHNlcnZpY2UsIGJ1dCBpbiBhIHNwZWNpYWwgZGVncmVlIHRvIHRob3NlIHdobyBhcmUgZnJpZW5kcyBpbiB0aW1lIG9mIG5lZWQ7CiAgICAgICAgICAgICAgICAgICAgYW5kIHN1Y2ggYW4gb25lIGNsZWFybHkgd2FzIEVwaWNlcmRlcy4gQXJlIHdlIG5vdCB0aGVuIGFzaGFtZWQsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGlmIGl0IGFwcGVhcnMgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIGhhdmUgcmV0YWluZWQgbm8gbWVtb3J5IG9mIHRoZXNlIHNlcnZpY2VzIGFuZCBoYXZlIHJvYmJlZCBvZiB0aGVpciByZXdhcmQgdGhlCiAgICAgICAgICAgICAgICAgICAgc29ucyBvZiBzdWNoIGEgYmVuZWZhY3RvciwgdGhvdWdoIHdlIGNhbiBjaGFyZ2UgdGhlbSB3aXRoIG5vIGZhdWx0PyA8L3RyYW5zbGF0aW9uPg=="
translation['20.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgdGhvc2Ugd2hvIHdlcmUgdGhlbiBzYXZlZCBieSBoaW0gYW5kIHdobwogICAgICAgICAgICAgICAgICAgIGJlc3Rvd2VkIG9uIGhpbSB0aGlzIGltbXVuaXR5IHdlcmUgYSBkaWZmZXJlbnQgZ2VuZXJhdGlvbiBmcm9tIHlvdSB3aG8gbm93CiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZSB0byB0YWtlIGl0IGF3YXksIHlldCB0aGF0IGRvZXMgbm90IHJlbW92ZSB0aGUgaW5mYW15IG9mIHRoZSBhY3Q7IG5heSwgaXQKICAgICAgICAgICAgICAgICAgICBpcyBqdXN0IHRoZXJlIHRoYXQgaXRzIGF0cm9jaXR5IGxpZXMuIEZvciBpZiB0aG9zZSB3aG8ga25ldyBhbmQgZXhwZXJpZW5jZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJvc2l0eSBmZWx0IHRoYXQgaXQgbWVyaXRlZCB0aGlzIHJldHVybiwgd2hpbGUgd2UsIHdobyBoYXZlIG9ubHkgaGVhcmQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RvcnkgdG9sZCwgc2hhbGwgcmV2b2tlIHRoZSBnaWZ0IGFzIHVuZGVzZXJ2ZWQsIHNoYWxsIHdlIG5vdCBiZSBndWlsdHkgb2YgbW9yZQogICAgICAgICAgICAgICAgICAgIHRoYW4gb3JkaW5hcnkgYXRyb2NpdHk/IDwvdHJhbnNsYXRpb24+"
translation['20.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgbXkgcGxlYSBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGluIHRoaXMgY2FzZSBhcyBmb3IgdGhvc2Ugd2hvIG92ZXJ0aHJldyB0aGUgRm91ciBIdW5kcmVkLCBhbmQgZm9yIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHByb3ZlZCBoZWxwZnVsIHRvIHRoZSBkZW1vY3JhdHMgaW4gZXhpbGU7IGZvciBJIHRoaW5rIHRoZXkgd291bGQgYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgYXRyb2Npb3VzbHkgdHJlYXRlZCBpZiBhbnkgcG9ydGlvbiBvZiB0aGUgcmV3YXJkcyB0aGVuIGRlY3JlZWQgdG8gdGhlbSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICByZXZva2VkLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGlmCiAgICAgICAgICAgICAgICAgICAgYW55IG9mIHlvdSBpcyBwZXJzdWFkZWQgdGhhdCBvdXIgY2l0eSBpcyBmYXIgZnJvbSBuZWVkaW5nIHN1Y2ggYSBiZW5lZmFjdG9yCiAgICAgICAgICAgICAgICAgICAgdG9kYXksIGxldCBoaW0gcHJheSBIZWF2ZW4gaXQgbWF5IGJlIHNvLCBhbmQgSSB3aWxsIGpvaW4gaW4gdGhhdCBwcmF5ZXI7IGJ1dCBsZXQKICAgICAgICAgICAgICAgICAgICBoaW0gYWxzbyByZWZsZWN0LCBmaXJzdCwgdGhhdCBoZSBpcyBnb2luZyB0byBnaXZlIGhpcyB2b3RlIG9uIGEgbGF3IHVuZGVyIHdoaWNoLAogICAgICAgICAgICAgICAgICAgIGlmIHVucmVwZWFsZWQsIGhlIHdpbGwgaGF2ZSB0byBsaXZlLCBhbmQgc2Vjb25kbHksIHRoYXQgYmFkIGxhd3MgY2FuIGluanVyZSBldmVuCiAgICAgICAgICAgICAgICAgICAgY29tbXVuaXRpZXMgd2hpY2ggZmFuY3kgdGhleSBhcmUgZHdlbGxpbmcgaW4gc2VjdXJpdHkuIEZvciB0aGVyZSB3b3VsZCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBubyBjaGFuZ2VzIGZvciBiZXR0ZXIgb3IgZm9yIHdvcnNlIGluIHRoZSBmb3J0dW5lcyBvZiBzdGF0ZXMsIGhhZCBpdCBub3QgYmVlbgogICAgICAgICAgICAgICAgICAgIHRoYXQgYSBuYXRpb24gaW4gcGVyaWwgaXMgZ3VpZGVkIHRvIHNhZmV0eSBieSBnb29kIHBvbGljeSwgZ29vZCBsYXdzLCBhbmQgZ29vZAogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGFuZCBieSB0aGUgb2JzZXJ2YW5jZSBvZiBvcmRlciBpbiBhbGwgdGhpbmdzLCBidXQgaW4gdGhlIGNhc2Ugb2YgYQogICAgICAgICAgICAgICAgICAgIG5hdGlvbiB0aGF0IHNlZW1zIGVzdGFibGlzaGVkIGluIHBlcmZlY3QgcHJvc3Blcml0eSwgYWxsIHRoZXNlIHRoaW5ncywgYmVpbmcKICAgICAgICAgICAgICAgICAgICBuZWdsZWN0ZWQsIHNsaXAgYXdheSBmcm9tIGl0IGxpdHRsZSBieSBsaXR0bGUuIDwvdHJhbnNsYXRpb24+"
translation['20.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbW9zdCBtZW4gYWNoaWV2ZSBwcm9zcGVyaXR5IGJ5IHBsYW5uaW5nIHNvdW5kbHkgYW5kIGJ5IGRlc3Bpc2luZyBub3RoaW5nOwogICAgICAgICAgICAgICAgICAgIGJ1dCB0aGV5IGRvIG5vdCB0YWtlIHRoZSB0cm91YmxlIHRvIGd1YXJkIGl0IGJ5IHRoZSBzYW1lIG1lYW5zLiBMZXQgbm90IHRoaXMKICAgICAgICAgICAgICAgICAgICBtaXN0YWtlIGJlIHlvdXJzIHRvZGF5LCBhbmQgZG8gbm90IHRoaW5rIHRoYXQgeW91IG91Z2h0IHRvIHJhdGlmeSBhIGxhdyB3aGljaAogICAgICAgICAgICAgICAgICAgIHdpbGwgdGFpbnQgdGhlIHJlcHV0YXRpb24gb2Ygb3VyIGNpdHkgaW4gdGhlIHRpbWUgb2YgaGVyIHByb3NwZXJpdHkgYW5kLCBpZiBldmVyCiAgICAgICAgICAgICAgICAgICAgYSBjcmlzaXMgY29tZXMsIHdpbGwgbGVhdmUgaGVyIGRlc3RpdHV0ZSBvZiB0aG9zZSB3aG8gd291bGQgYmUgd2lsbGluZyB0byBkbyBoZXIKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBpdCBpcyBub3Qgb25seSB0aGUgbWVuIHdobywgaW4gYSBwcml2YXRlIGNhcGFjaXR5LCBjaG9zZSB0byBiZW5lZml0CiAgICAgICAgICAgICAgICAgICAgeW91IGFuZCB0byBvZmZlciB0aGVpciBzZXJ2aWNlcyBvbiB0aG9zZSBpbXBvcnRhbnQgb2NjYXNpb25zIHRoYXQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmVkIGEgbGl0dGxlIHdoaWxlIGFnbyBieSBQaG9ybWlvIGFuZCBtZW50aW9uZWQgYnkgbWUganVzdAogICAgICAgICAgICAgICAgICAgIG5vd+KAlGl0IGlzIG5vdCBvbmx5IHRoZXNlIG1lbiB0aGF0IHlvdSBtdXN0IGJlIGNhcmVmdWwgbm90IHRvIHdyb25nLAogICAgICAgICAgICAgICAgICAgIGJ1dCBtYW55IG90aGVycyBhbHNvLCB3aG8gZHJldyB3aG9sZSBzdGF0ZXMsIHRoZWlyIG93biBuYXRpdmUgY2l0aWVzLCBpbnRvCiAgICAgICAgICAgICAgICAgICAgYWxsaWFuY2Ugd2l0aCB1cyBpbiB0aGUgd2FyIGFnYWluc3QgdGhlIExhY2VkYWVtb25pYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgc28tY2FsbGVkIENvcmludGhpYW4gV2FyLCA8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzk1Ly0zODciIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM5NSIgdG89Ii0zODciPjM5NTwvZGF0ZVJhbmdlPi0zODcgQi5DLjwvbm90ZT4gdGh1cyBmdXJ0aGVyaW5nIGJ5IHdvcmQgYW5kIGRlZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzIG9mIHlvdXIgY2l0eTsgPGRhdGVSYW5nZSBhdXRobmFtZT0iLTM5NS8tMzg3IiBjbGFzcz0idHJhbnNsYXRpb24iIGZyb209Ii0zOTUiIHRvPSItMzg3Ij4zOTU8L2RhdGVSYW5nZT4tMzg3IEIuQy48L3RyYW5zbGF0aW9uPg=="
translation['20.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgc29tZSBvZiB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoZWlyIGdvb2R3aWxsIHRvIHlvdSBoYXZlIG5vIGxvbmdlciBhIGZhdGhlcmxhbmQuIFRoZSBmaXJzdCBleGFtcGxlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBJIHByb3Bvc2UgdG8gZXhhbWluZSBpcyB0aGF0IG9mIHRoZSBDb3JpbnRoaWFuIGV4aWxlcy4gQW5kIGhlcmUgSSBhbQogICAgICAgICAgICAgICAgICAgIG9ibGlnZWQgdG8gbWVudGlvbiBmYWN0cyB3aGljaCBJIG15c2VsZiBoYXZlIG9ubHkgaGVhcmQgZnJvbSB0aGUgbGlwcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBvbGRlciBhbW9uZyB5b3UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkRlbW9zdGhlbmVzIHdhcyBub3cgdGhpcnR5LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGJhdHRsZSB3YXMgZm91Z2h0IHRlbiB0ZWFycyBiZWZvcmUgaGlzIGJpcnRoLjwvbm90ZT4gU29tZSBvY2Nhc2lvbnMsCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgb24gd2hpY2ggdGhleSBtYWRlIHRoZW1zZWx2ZXMgdXNlZnVsIHRvIHVzLCBJIHdpbGwgcGFzcyBvdmVyOyBidXQgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBncmVhdCBiYXR0bGUgYWdhaW5zdCB0aGUgTGFjZWRhZW1vbmlhbnMgd2FzIGZvdWdodCBuZWFyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPiwgYW5kIHdoZW4gdGhlIHBhcnR5IGluIHRoYXQgY2l0eQogICAgICAgICAgICAgICAgICAgIGRldGVybWluZWQgYWZ0ZXIgdGhlIGJhdHRsZSBub3QgdG8gYWRtaXQgb3VyIHNvbGRpZXJzIHdpdGhpbiB0aGVpciB3YWxscywgYnV0IHRvCiAgICAgICAgICAgICAgICAgICAgc2VuZCBoZXJhbGRzIHRvIGdyZWV0IHRoZSBMYWNlZGFlbW9uaWFucywgPC90cmFuc2xhdGlvbj4="
translation['20.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz50aGVzZSBtZW4sIHRob3VnaCB0aGV5IHNhdyB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBoYWQgbG9zdCB0aGUgZGF5IGFuZCB0aGF0IG91ciBlbmVtaWVzIHdlcmUgaG9sZGluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcGFzcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QmV0d2VlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4gYW5kIGl0cyBoYXJib3Igb2YgTGVjaGFldW0gb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIENvcmludGhpYW4gR3VsZi48L25vdGU+IHJlZnVzZWQgdG8gYmV0cmF5IHVzIG9yIHRvIHRha2Ugc3RlcHMgZm9yIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgb3duIGluZGl2aWR1YWwgc2FmZXR5LCBidXQgd2l0aCB0aGUgd2hvbGUgYXJtZWQgZm9yY2Ugb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPiBhbmQgaXRzIGhhcmJvciBvZiBMZWNoYWV1bSBvbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQ29yaW50aGlhbiBHdWxmLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+IGNsb3NlIHVwb24gdGhlbSwgdGhleSBvcGVuZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBnYXRlcyB0byB1cyBpbiBkZWZpYW5jZSBvZiB0aGUgbWFqb3JpdHkgYW5kIGNob3NlIGFsb25nIHdpdGggeW91LCB3aG8gaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBlbmdhZ2VkIGluIHRoZSBiYXR0bGUsIHRvIHN1ZmZlciB3aGF0ZXZlciBtaWdodCBiZXRpZGUsIHJhdGhlciB0aGFuIHdpdGhvdXQgeW91CiAgICAgICAgICAgICAgICAgICAgdG8gZW5qb3kgYSBzYWZldHkgdGhhdCBpbnZvbHZlZCBubyBkYW5nZXI7IGFuZCBzbyB0aGV5IGFkbWl0dGVkIHRoZSB0cm9vcHMgYW5kCiAgICAgICAgICAgICAgICAgICAgc3VjY2VlZGVkIGluIHNhdmluZyBib3RoIHlvdSBhbmQgeW91ciBhbGxpZXMuIDwvdHJhbnNsYXRpb24+"
translation['20.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWZ0ZXJ3YXJkcywgd2hlbiBwZWFjZSwgdGhlIHBlYWNlIG9mIEFudGFsY2lkYXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluIDM4Ny4gQW50YWxjaWRhcyB3YXMgdGhlIFNwYXJ0YW4gZGlwbG9tYXRpc3QuIFRoZSBHcmVla3MKICAgICAgICAgICAgICAgICAgICAgICAgYWNrbm93bGVkZ2VkIHRoZSBLaW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiBhcwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgYXJiaXRlciBvZiB0aGVpciBkaXNwdXRlcywgYW5kIGFiYW5kb25lZCB0byBoaW0gdGhlaXIgY2l0aWVzIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LiBBbGwgb3RoZXIgR3JlZWsgc3RhdGVzCiAgICAgICAgICAgICAgICAgICAgICAgIHdlcmUgdG8gYmUgaW5kZXBlbmRlbnQsIGV4Y2VwdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTE3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMTczIj5MZW1ub3M8L3BsYWNlTmFtZT4sIEltYnJvcywgYW5kIFNjeXJvcywgd2hpY2ggd2VyZSB0byBiZSByZXRhaW5lZCBieQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4ncyBtYWluIG9iamVjdCB3YXMgdG8gYnJlYWsgdXAKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBvd2VyIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsVGhlYmVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUaGViZXMiPlRoZWJlczwvcGxhY2VOYW1lPiBvdmVyIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBvdGhlciBCb2VvdGlhbiBjaXRpZXMuPC9ub3RlPiB3YXMgY29uY2x1ZGVkIHdpdGggdGhlIExhY2VkYWVtb25pYW5zLCB0aGUKICAgICAgICAgICAgICAgICAgICBsYXR0ZXIgcmVxdWl0ZWQgdGhlaXIgYWN0cyB3aXRoIGV4aWxlLiBCdXQgeW91LCBpbiBnaXZpbmcgdGhlbSBzaGVsdGVyLCBhY3RlZAogICAgICAgICAgICAgICAgICAgIGxpa2UgZ29vZCBtZW4gYW5kIHRydWU7IGZvciB5b3UgZGVjcmVlZCB0aGVtIGFsbCB0aGF0IHRoZXkgbmVlZGVkLiBZZXQgbm93IGFyZQogICAgICAgICAgICAgICAgICAgIHdlIGFjdHVhbGx5IGRlYmF0aW5nIHdoZXRoZXIgdGhvc2UgZGVjcmVlcyBzaG91bGQgcmVtYWluIHZhbGlkPyBObyEgVGhlIGJhcmUKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgaXMgYSBkaXNncmFjZSwgaWYgaXQgc2hvdWxkIGJlIHJlcG9ydGVkIHRoYXQgQXRoZW5pYW5zIGFyZSBkZWJhdGluZwogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgdGhleSBvdWdodCB0byBsZXQgdGhlaXIgYmVuZWZhY3RvcnMga2VlcCB3aGF0IHRoZXkgaGF2ZSBnaXZlbiB0aGVtOyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGF0IHF1ZXN0aW9uIG91Z2h0IHRvIGhhdmUgYmVlbiBkZWJhdGVkLCB5ZXMsIGFuZCBkZWNpZGVkLCBsb25nIGFnby48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4gYXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGFyYml0ZXIgb2YgdGhlaXIgZGlzcHV0ZXMsIGFuZCBhYmFuZG9uZWQgdG8gaGltIHRoZWlyIGNpdGllcyBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPi4gQWxsIG90aGVyIEdyZWVrIHN0YXRlcwogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIHRvIGJlIGluZGVwZW5kZW50LCBleGNlcHQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTExNzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTE3MyI+TGVtbm9zPC9wbGFjZU5hbWU+LCBJbWJyb3MsIGFuZCBTY3lyb3MsIHdoaWNoIHdlcmUgdG8gYmUgcmV0YWluZWQgYnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTcGFydGEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFNwYXJ0YSI+U3BhcnRhPC9wbGFjZU5hbWU+J3MgbWFpbiBvYmplY3Qgd2FzIHRvIGJyZWFrIHVwCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwb3dlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4gb3ZlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIgQm9lb3RpYW4gY2l0aWVzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoaXMgZGVjcmVlIGFsc28gdG8gdGhlIGNvdXJ0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCwgZ2VudGxlbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIGlzIHRoZSBkZWNyZWUgcGFzc2VkIGJ5IHlvdSBpbiBmYXZvciBvZiB0aGUgQ29yaW50aGlhbnMgd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICBleGlsZWQgb24geW91ciBhY2NvdW50LiBCdXQgdGhpbmshIElmIG9uZSB3aG8ga25ldyB0aG9zZSBjcml0aWNhbAogICAgICAgICAgICAgICAgICAgIHRpbWVz4oCUd2hldGhlciBhcyBhbiBleWUtd2l0bmVzcyBvciBoZWFyaW5nIHRoZSBzdG9yeSBmcm9tIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICBrbmV34oCUaWYgaGUgc2hvdWxkIGhlYXIgdGhpcyBsYXcgd2hpY2ggcmV2b2tlcyB0aGUgZ2lmdHMgdGhhdCB3ZXJlIHRoZW4KICAgICAgICAgICAgICAgICAgICBiZXN0b3dlZCwgaG93IGhlIHdvdWxkIGRlbm91bmNlIHRoZSBiYXNlbmVzcyBvZiB1cyB3aG8gbWFkZSB0aGUKICAgICAgICAgICAgICAgICAgICBsYXfigJRhbmQgd2hvIHdlcmUgc28gZ2VuZXJvdXMgYW5kIG9ibGlnaW5nIHdoZW4gb3VyIG5lZWQgd2FzIHByZXNzaW5nLAogICAgICAgICAgICAgICAgICAgIGJ1dCB3aGVuIHdlIGhhdmUgc2F0aXNmaWVkIGFsbCBvdXIgaG9wZXMsIGFyZSBzbyB0aGFua2xlc3MgYW5kIGNodXJsaXNoIHRoYXQgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIHJvYmJlZCBtZW4gb2YgdGhlIHJld2FyZHMgdGhleSBlbmpveSwgYW5kIGhhdmUgbWFkZSBhIGxhdyB0aGF0IGhlcmVhZnRlcgogICAgICAgICAgICAgICAgICAgIG5vLCBzdWNoIHJld2FyZHMgc2hvdWxkIGJlIGJlc3Rvd2VkISA8L3RyYW5zbGF0aW9uPg=="
translation['20.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz7igJxPaCBidXQs4oCdIHdlIHNoYWxsIGJlIHRvbGQsIOKAnHNvbWUgb2YgdGhvc2Ugd2hvCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgdGhlc2UgcmV3YXJkcyBkaWQgbm90IGRlc2VydmUgdGhlbeKAnTsgZm9yIHRoYXQgdGhvdWdodCB3aWxsCiAgICAgICAgICAgICAgICAgICAgcnVuIHRocm91Z2ggYWxsIHRoZWlyIGFyZ3VtZW50LiBJbiB0aGF0IGNhc2Ugc2hhbGwgd2UgY29uZmVzcyB0aGF0IHdlIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGtub3cgdGhhdCBhIG1hbidzIGRlc2VydHMgc2hvdWxkIGJlIGV4YW1pbmVkIGF0IHRoZSB0aW1lIG9mIHRoZSByZXdhcmQsIGFuZCBub3QKICAgICAgICAgICAgICAgICAgICBhbiBpbmRlZmluaXRlbHkgbG9uZyB0aW1lIGFmdGVyPyBGb3IgdG8gZ2l2ZSBubyByZXdhcmQgaW4gdGhlIGZpcnN0IGluc3RhbmNlIGlzCiAgICAgICAgICAgICAgICAgICAgYW4gZXhlcmNpc2Ugb2YganVkZ2VtZW50OyB0byB0YWtlIGl0IGF3YXkgd2hlbiBnaXZlbiBzaG93cyBhIGdydWRnaW5nIHNwaXJpdCwKICAgICAgICAgICAgICAgICAgICBhbmQgeW91IG11c3Qgbm90IHNlZW0gdG8gaGF2ZSBiZWVuIHByb21wdGVkIGJ5IHRoYXQuIDwvdHJhbnNsYXRpb24+"
translation['20.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgb24gdGhlIHF1ZXN0aW9uIG9mIG1lcml0IEkgc2hhbGwgbm90IHNocmluayBmcm9tIHNheWluZwogICAgICAgICAgICAgICAgICAgIHRoaXMgdG8geW91OiBJIGZvciBvbmUgZG8gbm90IHRoaW5rIHRoYXQgbWVyaXQgc2hvdWxkIGJlIGV4YW1pbmVkIGJ5IHRoZSBTdGF0ZQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBzYW1lIHdheSBhcyBieSBhbiBpbmRpdmlkdWFsLCBiZWNhdXNlIHRoZSBleGFtaW5hdGlvbiBpcyBub3QgY29uY2VybmVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgc2FtZSBxdWVzdGlvbnMuIEZvciBpbiBwcml2YXRlIGxpZmUgZWFjaCBvZiB1cyB0cmllcyB0byBmaW5kIHdobyBpcwogICAgICAgICAgICAgICAgICAgIHdvcnRoeSwgc2F5LCB0byBtYXJyeSBpbnRvIG91ciBmYW1pbHksIG9yIHNvbWV0aGluZyBvZiB0aGF0IHNvcnQsIGFuZCBzdWNoCiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zIGFyZSBkZXRlcm1pbmVkIGJ5IGNvbnZlbnRpb24gYW5kIG9waW5pb247IGJ1dCBpbiBwdWJsaWMgYWZmYWlycyB0aGUKICAgICAgICAgICAgICAgICAgICBTdGF0ZSBhbmQgdGhlIHBlb3BsZSB0cnkgdG8gZmluZCB3aG8gaXMgdGhlaXIgYmVuZWZhY3RvciBhbmQgc2F2aW9yLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uIHlvdSB3aWxsIGZpbmQgaXMgYmVzdCBkZWNpZGVkIGJ5IHJlZmVyZW5jZSBub3QgdG8gYmlydGggb3Igb3BpbmlvbiwgYnV0CiAgICAgICAgICAgICAgICAgICAgdG8gcGxhaW4gZmFjdC4gU28sIHdoZW5ldmVyIHdlIHdhbnQgdG8gcmVjZWl2ZSBiZW5lZml0cywgYXJlIHdlIHRvIGFsbG93IGFueW9uZQogICAgICAgICAgICAgICAgICAgIHRvIGNvbmZlciB0aGVtLCBidXQgd2hlbiB3ZSBoYXZlIHJlY2VpdmVkIHRoZW0sIHRoZW4gc2hhbGwgd2Ugc2NydXRpbml6ZSB0aGUKICAgICAgICAgICAgICAgICAgICBtZXJpdHMgb2YgdGhlIGJlbmVmYWN0b3I/IFRoYXQgd2lsbCBiZSBhIHRvcHN5LXR1cnZ5IHBvbGljeS4gPC90cmFuc2xhdGlvbj4="
translation['20.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0LCBpdCBtYXkgYmUgc2FpZCwKICAgICAgICAgICAgICAgICAgICB0aGUgb25seSBzdWZmZXJlcnMgd2lsbCBiZSB0aG9zZSBJIGhhdmUgbWVudGlvbmVkLCBhbmQgYWxsIG15IHJlbWFya3MgYXBwbHkgdG8KICAgICAgICAgICAgICAgICAgICB0aGVtIGFsb25lLiBUaGF0IGlzIHF1aXRlIHVudHJ1ZS4gQnV0IEkgY291bGQgbm90IGV2ZW4gYXR0ZW1wdCB0byBleGFtaW5lIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBpbnN0YW5jZXMgb2YgbWVuIHdobyBoYXZlIGJlbmVmaXRlZCB5b3UsIGJ1dCB3aG8gYnkgdGhpcyBsYXcsIGlmIGl0IGlzIG5vdAogICAgICAgICAgICAgICAgICAgIHJlcGVhbGVkLCB3aWxsIGJlIHJvYmJlZCBvZiB0aGVpciByZXdhcmRzOyBieSBjYWxsaW5nIHlvdXIgYXR0ZW50aW9uIHRvIG9uZSBvcgogICAgICAgICAgICAgICAgICAgIHR3byBmdXJ0aGVyIGRlY3JlZXMsIEkgYWJzb2x2ZSBteXNlbGYgZnJvbSBkaXNjdXNzaW5nIHRoZXNlIGNhc2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIHRoZW4sIHdpbGwgeW91IG5vdCB3cm9uZyB0aGUKICAgICAgICAgICAgICAgICAgICBUaGFzaWFuIHN1cHBvcnRlcnMgb2YgRWNwaGFudHVzLCBpZiB5b3UgcmV2b2tlIHRoZWlyIGltbXVuaXR54oCUSSBtZWFuCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lbiB3aG8gaGFuZGVkIG92ZXIgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTEwNzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTA3OCI+VGhhc29zPC9wbGFjZU5hbWU+IHRvIHlvdQogICAgICAgICAgICAgICAgICAgIGJ5IGV4cGVsbGluZyB0aGUgYXJtZWQgZ2Fycmlzb24gb2YgdGhlIExhY2VkYWVtb25pYW5zIGFuZCBhZG1pdHRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgVGhyYXN5YnVsdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii00MDgvLTQwNyIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItNDA4IiB0bz0iLTQwNyI+NDA4PC9kYXRlUmFuZ2U+LTQwNyBCLkMuIFRoZXJlIGlzIHNvbWUgZGlzY3JlcGFuY3kgYXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgYmV0d2VlbiBvdXIgdHdvIGF1dGhvcml0aWVzLCBYZW5vcGhvbiBhbmQgRGlvZG9ydXMsIG5laXRoZXIgb2Ygd2hvbQogICAgICAgICAgICAgICAgICAgICAgICBtZW50aW9ucyBFY3BoYW50dXMsIHByZXN1bWFibHkgYSBkZW1vY3JhdGljIGxlYWRlciBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDc4Ij5UaGFzb3M8L3BsYWNlTmFtZT4uPC9ub3RlPiBhbmQgdGh1cywgYnkgYnJpbmdpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvd24gY291bnRyeSBvbiB0byB5b3VyIHNpZGUsIHdlcmUgdGhlIG1lYW5zIG9mIHdpbm5pbmcgZm9yIHlvdSB0aGUgYWxsaWFuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZGlzdHJpY3QgYm9yZGVyaW5nIG9uIDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii00MDgvLTQwNyIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItNDA4IiB0bz0iLTQwNyI+NDA4PC9kYXRlUmFuZ2U+LTQwNyBCLkMuIFRoZXJlIGlzIHNvbWUgZGlzY3JlcGFuY3kgYXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgYmV0d2VlbiBvdXIgdHdvIGF1dGhvcml0aWVzLCBYZW5vcGhvbiBhbmQgRGlvZG9ydXMsIG5laXRoZXIgb2Ygd2hvbQogICAgICAgICAgICAgICAgICAgICAgICBtZW50aW9ucyBFY3BoYW50dXMsIHByZXN1bWFibHkgYSBkZW1vY3JhdGljIGxlYWRlciBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA3OCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDc4Ij5UaGFzb3M8L3BsYWNlTmFtZT4uPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+PwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2Vjb25kIHBsYWNlLCB3aWxsIHlvdSBub3Qgd3JvbmcKICAgICAgICAgICAgICAgICAgICBBcmNoZWJpdXMgYW5kIEhlcmFjbGlkZXMsIHdobyBieSBwdXR0aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPiBpbnRvIHRoZSBoYW5kcyBvZiBUaHJhc3lidWx1cyBtYWRlIHlvdSBtYXN0ZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+LCBzbyB0aGF0IHlvdSBmYXJtZWQgb3V0CiAgICAgICAgICAgICAgICAgICAgdGhlIHRvbGwgb2YgdGVuIHBlciBjZW50LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5MZXZpZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEJ5emFudGluZXMgb24gdGhlIHZhbHVlIG9mIHRoZSBjYXJnbyBvZiBldmVyeSBzaGlwIHBhc3NpbmcgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTE1MDY4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMTUwNjgiPkJvc3BvcnVzPC9wbGFjZU5hbWU+Ljwvbm90ZT4gYW5kIHRodXMgYmVpbmcKICAgICAgICAgICAgICAgICAgICB3ZWxsIGZ1cm5pc2hlZCB3aXRoIG1vbmV5IGZvcmNlZCB0aGUgTGFjZWRhZW1vbmlhbnMgdG8gY29uY2x1ZGUgYSBwZWFjZQogICAgICAgICAgICAgICAgICAgIGZhdm9yYWJsZSB0byB5b3U/PHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMTUwNjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTExNTA2OCI+Qm9zcG9ydXM8L3BsYWNlTmFtZT4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBBdGhlbmlhbnMgZ2FpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNlZG9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDaGFsY2Vkb24iPkNoYWxjZWRvbjwvcGxhY2VOYW1lPiBpbiA8ZGF0ZSBhdXRobmFtZT0iLTM5MCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM5MCI+MzkwPC9kYXRlPiBCLkMuIEl0IGlzIHN0cmFuZ2UgdG8gZmluZCB0aGUgbm90b3Jpb3VzIHBlYWNlIG9mIEFudGFsY2lkYXMKICAgICAgICAgICAgICAgICAgICAgICAgbWVudGlvbmVkIHdpdGggYXBwcm92YWwuPC9ub3RlPiBXaGVuIHN1YnNlcXVlbnRseSB0aGV5IHdlcmUgYmFuaXNoZWQsIHlvdSwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIHBhc3NlZCB3aGF0IEkgdGhpbmsgd2FzIGEgdmVyeSBwcm9wZXIgZGVjcmVlIGluIGZhdm9yIG9mIG1lbiBleGlsZWQKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIGRldm90aW9uIHRvIHlvdXIgaW50ZXJlc3RzLCBjb25mZXJyaW5nIG9uIHRoZW0gdGhlIHRpdGxlIG9mIEZyaWVuZHMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgU3RhdGU8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNlZG9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDaGFsY2Vkb24iPkNoYWxjZWRvbjwvcGxhY2VOYW1lPiBpbiA8ZGF0ZSBhdXRobmFtZT0iLTM5MCIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM5MCI+MzkwPC9kYXRlPiBCLkMuIEl0IGlzIHN0cmFuZ2UgdG8gZmluZCB0aGUgbm90b3Jpb3VzIHBlYWNlIG9mIEFudGFsY2lkYXMKICAgICAgICAgICAgICAgICAgICAgICAgbWVudGlvbmVkIHdpdGggYXBwcm92YWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgcHJveGVudXMgd2FzIGEgZm9yZWlnbmVyIHdobywgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG93biBzdGF0ZSwgbG9va2VkIGFmdGVyIEF0aGVuaWFuIGludGVyZXN0cy4gVGhlc2UgbWVuLCBiZWluZyBleGlsZXMgcmVzaWRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBjb3VsZCBub3QgcGVyZm9ybQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGR1dHkuIFRoZSB0aXRsZSB3YXMgYW4gaG9ub3Jhcnkgb25lLCBnaXZpbmcgdGhlbSByYW5rIGFuZCBwcml2aWxlZ2VzCiAgICAgICAgICAgICAgICAgICAgICAgIGFib3ZlIHRoZSBvcmRpbmFyeSByZXNpZGVudCBhbGllbnMuPC9ub3RlPiBhbmQgQmVuZWZhY3RvcnMsIHRvZ2V0aGVyIHdpdGgKICAgICAgICAgICAgICAgICAgICBpbW11bml0eSBmcm9tIGFsbCB0YXhlcy4gRm9yIHlvdXIgc2FrZXMgdGhleSB3ZXJlIGluIGV4aWxlLCBmcm9tIHlvdSB0aGV5CiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgYSBqdXN0IHJlY29tcGVuc2U7IGFuZCBhcmUgd2Ugbm93IHRvIGxldCB0aGVtIGJlIHJvYmJlZCBvZiB0aGlzLCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICB3ZSBjYW4gY2hhcmdlIHRoZW0gd2l0aCBubyBmYXVsdD8gQnV0IHRoYXQgd291bGQgYmUgc2NhbmRhbG91cy4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBjb3VsZCBub3QgcGVyZm9ybQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGR1dHkuIFRoZSB0aXRsZSB3YXMgYW4gaG9ub3Jhcnkgb25lLCBnaXZpbmcgdGhlbSByYW5rIGFuZCBwcml2aWxlZ2VzCiAgICAgICAgICAgICAgICAgICAgICAgIGFib3ZlIHRoZSBvcmRpbmFyeSByZXNpZGVudCBhbGllbnMuPC90cmFuc2xhdGlvbj4="
translation['20.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Ugd2lsbCBncmFzcCB0aGUgc2l0dWF0aW9uIGJlc3QgaWYgeW91IHdpbGwgcmVhc29uCiAgICAgICAgICAgICAgICAgICAgaXQgb3V0IGZvciB5b3Vyc2VsdmVzIGluIHRoaXMgd2F5LiBTdXBwb3NlIGF0IHRoZSBwcmVzZW50IGRheSBhIHBhcnR5IG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgaW4gcG93ZXIgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQeWRuYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUHlkbmEiPlB5ZG5hPC9wbGFjZU5hbWU+IG9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+IG9yIGFueSBvZiB0aG9zZSBvdGhlciBwbGFjZXMgd2hpY2gKICAgICAgICAgICAgICAgICAgICBhcmUgc3ViamVjdCB0byBQaGlsaXAgYW5kIGhvc3RpbGUgdG8geW914oCUIDwvdHJhbnNsYXRpb24+"
translation['20.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5qdXN0IGFzIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDc4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwNzgiPlRoYXNvczwvcGxhY2VOYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+IHRoZW4gd2VyZSBmcmllbmRseQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBMYWNlZGFlbW9uaWFucyBhbmQgZXN0cmFuZ2VkIGZyb20geW914oCUcHJvbWlzZWQgdG8gaGFuZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgb3ZlciB0byB5b3UgaW4gcmV0dXJuIGZvciB0aGUgc2FtZSByZXdhcmRzIHRoYXQgeW91IGdhdmUgdG8gRWNwaGFudHVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDc4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwNzgiPlRoYXNvczwvcGxhY2VOYW1lPiBhbmQgQXJjaGViaXVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPjsgYW5kIHN1cHBvc2Ugc29tZSBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIGdlbnRsZW1lbiBoZXJlIG9iamVjdGVkIHRvIHRoZWlyIHByb3Bvc2FsIG9uIHRoZSBncm91bmQgdGhhdCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIG1vbnN0cm91cyBpZiBhIHNlbGVjdCBmZXcgb2YgdGhlIHJlc2lkZW50IGFsaWVucyB3ZXJlIHRvIGVzY2FwZSB0aGUgcHVibGljCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXM7IGhvdyB3b3VsZCB5b3UgZGVhbCB3aXRoIHRoZWlyIGFyZ3VtZW50cz8gSXMgaXQgbm90IGNlcnRhaW4gdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICB3b3VsZCByZWZ1c2UgdG8gbGlzdGVuIHRvIHN1Y2ggbWFsaWduYW50IHBldHRpZm9nZ2Vycz8gSWYgc28sIHRoZW4gaXQgaXMKICAgICAgICAgICAgICAgICAgICBkaXNncmFjZWZ1bCB0aGF0IHlvdSBzaG91bGQgY29uc2lkZXIgc3VjaCBhbiBvYmplY3Rpb24gbWFsaWduYW50IHdoZW4geW91IGFyZQogICAgICAgICAgICAgICAgICAgIGdvaW5nIHRvIHJlY2VpdmUgYSBiZW5lZml0LCBidXQgc2hvdWxkIGxlbmQgYW4gZWFyIHRvIGl0IHdoZW4gaXQgaXMgcHJvcG9zZWQgdG8KICAgICAgICAgICAgICAgICAgICByZXZva2UgeW91ciBnaWZ0cyB0byBmb3JtZXIgYmVuZWZhY3RvcnMuIE5vdyBsZXQgdXMgcGFzcyB0byBhbm90aGVyIGFyZ3VtZW50LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWVuIHdobyBiZXRyYXllZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFB5ZG5hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxQeWRuYSI+UHlkbmE8L3BsYWNlTmFtZT4gYW5kIHRoZSBvdGhlciBwbGFjZXMgdG8KICAgICAgICAgICAgICAgICAgICBQaGlsaXDigJR3aGF0IHByb21wdGVkIHRoZW0gdG8gaW5qdXJlIHVzPyBJcyBpdCBub3Qgb2J2aW91cyB0byBldmVyeW9uZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgd2FzIHRoZSByZXdhcmQgd2hpY2ggdGhleSBjYWxjdWxhdGVkIG9uIHJlY2VpdmluZyBmcm9tIFBoaWxpcCBmb3IgdGhlaXIKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcz8gV2hpY2gsIHRoZW4sIG91Z2h0IHlvdSB0byBoYXZlIGNob3NlbiB0byBkbywgTGVwdGluZXM/IFRvIGluZHVjZSBvdXIKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzLCBpZiB5b3UgY2FuLCB0byBnaXZlIHVwIGhvbm9yaW5nIHRob3NlIHdobyBiZWNvbWUgdGhlaXIgYmVuZWZhY3RvcnMgb24KICAgICAgICAgICAgICAgICAgICB0aGUgc3RyZW5ndGggb2YgaW5qdXJpZXMgZG9uZSB0byB1cywgb3IgdG8gaW1wb3NlIGEgbGF3IG9uIHVzIHdoaWNoIHRha2VzIGF3YXkKICAgICAgICAgICAgICAgICAgICBzb21lIHBhcnQgb2YgdGhlIHJld2FyZHMgd2hpY2ggb3VyIG93biBiZW5lZmFjdG9ycyBhcmUgZW5qb3lpbmc/IEkgZmFuY3kgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ybWVyLiBCdXQgdGhhdCBJIG1heSBub3Qgd2FuZGVyIGZyb20gdGhlIHByZXNlbnQgcG9pbnQsIHRha2UgYW5kIHJlYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlcyBwYXNzZWQgaW4gaG9ub3Igb2YgdGhlIFRoYXNpYW5zIGFuZCB0aGUgQnl6YW50aW5lcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWVzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgZGVjcmVlcywgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LiBQZXJoYXBzIHNvbWUgb2YgdGhlIG1lbiBuYW1lZCBhcmUgbm8gbG9uZ2VyCiAgICAgICAgICAgICAgICAgICAgYWxpdmUuIEJ1dCB0aGVpciBkZWVkcyBzdXJ2aXZlLCBzaW5jZSB0aGV5IHdlcmUgZG9uZSBvbmNlIGZvciBhbGwuIEl0IGlzCiAgICAgICAgICAgICAgICAgICAgZml0dGluZywgdGhlcmVmb3JlLCB0byBhbGxvdyB0aGVzZSBpbnNjcmlwdGlvbnMgdG8gaG9sZCBnb29kIGZvciBhbGwgdGltZSwgdGhhdAogICAgICAgICAgICAgICAgICAgIGFzIGxvbmcgYXMgYW55IG9mIHRoZSBtZW4gYXJlIGFsaXZlLCB0aGV5IG1heSBzdWZmZXIgbm8gd3JvbmcgYXQgeW91ciBoYW5kcywgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IGRpZSwgdGhvc2UgaW5zY3JpcHRpb25zIG1heSBiZSBhIG1lbW9yaWFsIG9mIG91ciBuYXRpb25hbCBjaGFyYWN0ZXIsCiAgICAgICAgICAgICAgICAgICAgYW5kIG1heSBzdGFuZCBhcyBwcm9vZnMgdG8gYWxsIHdobyB3aXNoIHRvIGRvIHVzIHNlcnZpY2UsIGRlY2xhcmluZyBob3cgbWFueQogICAgICAgICAgICAgICAgICAgIGJlbmVmYWN0b3JzIG91ciBjaXR5IGhhcyBiZW5lZml0ZWQgaW4gcmV0dXJuLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgaW5kZWVkIHdvdWxkIEkgaGF2ZSB5b3UgZm9yZ2V0IHRoaXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgaXQgaXMgYSBtb3N0IGRpc2dyYWNlZnVsIHRoaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gc2hvdyBhbmQgcHJvY2xhaW0gdG8gYWxsIG1hbmtpbmQgdGhhdCB0aGUgbWlzZm9ydHVuZXMgd2hpY2ggdGhlc2UgbWVuIGVuZHVyZWQKICAgICAgICAgICAgICAgICAgICBmb3IgeW91ciBzYWtlIGhhdmUgYmVlbiBjb25maXJtZWQgdG8gdGhlbSBmb3IgZXZlciwgd2hpbGUgdGhlIGdyYW50cyB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgZnJvbSB5b3UgaW4gcmVjb21wZW5zZSBoYXZlIGJlZW4gZXZlbiBub3cgcmVzY2luZGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd291bGQgaGF2ZSBiZWVuIGZhciBtb3JlIGZpdHRpbmcgdG8gbWl0aWdhdGUKICAgICAgICAgICAgICAgICAgICB0aGVpciBkaXN0cmVzcyBieSBsZXR0aW5nIHRoZW0ga2VlcCB5b3VyIGdpZnRzLCB0aGFuLCB3aGlsZSB0aGUgZGlzdHJlc3MKICAgICAgICAgICAgICAgICAgICByZW1haW5zLCB0byByb2IgdGhlbSBvZiB5b3VyIGJvdW50eS4gSW4gSGVhdmVuJ3MgbmFtZSwgSSBhc2sgeW91LCB3aG8gaXMgdGhlcmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHdpbGwgY2hvb3NlIHRvIGRvIHlvdSBzZXJ2aWNlIHdpdGggdGhlIHByb3NwZWN0IG9mIGluc3RhbnQgcHVuaXNobWVudCBieQogICAgICAgICAgICAgICAgICAgIHlvdXIgZW5lbWllcywgaWYgaGUgZmFpbHMsIGFuZCBvZiBhIGR1YmlvdXMgZ3JhdGl0dWRlIGZyb20geW91LCBpZiBoZSBzdWNjZWVkcz8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgZ3JlYXRseSB2ZXhlZCwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBpZiBJIHRob3VnaHQgdGhhdCB0aGUgb25seSByZWFsCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlIEkgd2FzIGJyaW5naW5nIGFnYWluc3QgdGhlIGxhdyB3YXMgaXRzIGRlcHJpdmluZyBtYW55IG9mIG91ciBhbGllbgogICAgICAgICAgICAgICAgICAgIGJlbmVmYWN0b3JzIG9mIHRoZSBpbW11bml0eSwgYnV0IHNob3VsZCBzZWVtIHVuYWJsZSB0byBwb2ludCB0byBhbnkgZGVzZXJ2aW5nCiAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50IG9mIHRoZSBob25vciBhbW9uZyBvdXIgb3duIGZlbGxvdy1jb3VudHJ5bWVuLiBGb3IgbXkgcHJheWVyIHdvdWxkIGV2ZXIKICAgICAgICAgICAgICAgICAgICBiZSB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBtYXkgYWJvdW5kIGluIGFsbAogICAgICAgICAgICAgICAgICAgIGJsZXNzaW5ncywgYnV0IGVzcGVjaWFsbHkgdGhhdCB0aGUgYmVzdCBtZW4gYW5kIHRoZSBtb3N0IG51bWVyb3VzIGJlbmVmYWN0b3JzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBjaXR5IG1heSBiZSBoZXIgb3duIGNpdGl6ZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCBvZgogICAgICAgICAgICAgICAgICAgIGFsbCwgdGhlbiwgaW4gdGhlIGNhc2Ugb2YgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+LCBhc2sKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzIHdoZXRoZXIgZGlzc2F0aXNmYWN0aW9uIHdpdGggdGhlIG1hbiBvciBoaXMgcGVyZm9ybWFuY2VzIGp1c3RpZmllcwogICAgICAgICAgICAgICAgICAgIHRoZSBjYW5jZWxsaW5nIG9mIHRoZSBnaWZ0cyBjb25mZXJyZWQgb24gaGltLiBGb3IsIGFzIHNvbWUgb2YgeW91IHdobyBhcmUgaGlzCiAgICAgICAgICAgICAgICAgICAgY29udGVtcG9yYXJpZXMgY2FuIGF0dGVzdCwgaXQgd2FzIGp1c3QgYWZ0ZXIgdGhlIHJldHVybiBvZiB0aGUgZXhpbGVkIGRlbW9jcmF0cwogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBpcmFldXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBpcmFldXMiPlBpcmFldXM8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlVuZGVyIFRocmFzeWJ1bHVzIGluIDQwMy48L25vdGU+IHdoZW4gb3VyIGNpdHkKICAgICAgICAgICAgICAgICAgICB3YXMgc28gd2VhayB0aGF0IHNoZSBoYWQgbm90IGEgc2luZ2xlIHNoaXAsIGFuZCBDb25vbiwgd2hvIHdhcyBhIGdlbmVyYWwgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgUGVyc2lhbiBzZXJ2aWNlIGFuZCByZWNlaXZlZCBubyBwcm9tcHRpbmcgd2hhdGV2ZXIgZnJvbSB5b3UsIGRlZmVhdGVkIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIGF0IHNlYSBhbmQgdGF1Z2h0IHRoZSBmb3JtZXIgZGljdGF0b3JzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPiB0byBzaG93IHlvdSBkZWZlcmVuY2U7IGhlIGNsZWFyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgaXNsYW5kcyBvZiB0aGVpciBtaWxpdGFyeSBnb3Zlcm5vcnMsIGFuZCBjb21pbmcgaGVyZSBoZSByZXN0b3JlZCBvdXIgTG9uZwogICAgICAgICAgICAgICAgICAgICAgICBXYWxsczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyMzAyOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTIzMDI5Ij5Db25vbjwvcGxhY2VOYW1lPiBvYnRhaW5lZCB0aGUgc3VwcG9ydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4gZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiBhbmQgd2FzIGFwcG9pbnRlZCBqb2ludCBjb21tYW5kZXIsIHdpdGggdGhlIHNhdHJhcAogICAgICAgICAgICAgICAgICAgICAgICBQaGFybmFiYXp1cywgb2YgdGhlIFBlcnNpYW4gZmxlZXQuIEluIDM5NCBoZSBkZXN0cm95ZWQgdGhlIFNwYXJ0YW4gZmxlZXQgb2ZmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNTAwMzc1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw1MDAzNzU3Ij5DbmlkdXM8L3BsYWNlTmFtZT4sIHNhaWxlZCBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzUiPkFlZ2VhbjwvcGxhY2VOYW1lPiBleHBlbGxpbmcgdGhlIFNwYXJ0YW4KICAgICAgICAgICAgICAgICAgICAgICAgaGFybW9zdHMgZnJvbSBtYW55IG9mIHRoZSBpc2xhbmRzLCBhbmQgZmluYWxseSByZWFjaGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hlcmUgaGUgcmVzdG9yZWQgdGhlIExvbmcKICAgICAgICAgICAgICAgICAgICAgICAgV2FsbCwgZGlzbWFudGxlZCBzaW5jZSB0aGUgUGVsb3Bvbm5lc2lhbiB3YXIuPC9ub3RlPjsgYW5kIGhlIHdhcyB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICB0byBtYWtlIHRoZSBoZWdlbW9ueSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEyMzAyOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTIzMDI5Ij5Db25vbjwvcGxhY2VOYW1lPiBvYnRhaW5lZCB0aGUgc3VwcG9ydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4gZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiBhbmQgd2FzIGFwcG9pbnRlZCBqb2ludCBjb21tYW5kZXIsIHdpdGggdGhlIHNhdHJhcAogICAgICAgICAgICAgICAgICAgICAgICBQaGFybmFiYXp1cywgb2YgdGhlIFBlcnNpYW4gZmxlZXQuIEluIDM5NCBoZSBkZXN0cm95ZWQgdGhlIFNwYXJ0YW4gZmxlZXQgb2ZmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNTAwMzc1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw1MDAzNzU3Ij5DbmlkdXM8L3BsYWNlTmFtZT4sIHNhaWxlZCBhYm91dCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzUiPkFlZ2VhbjwvcGxhY2VOYW1lPiBleHBlbGxpbmcgdGhlIFNwYXJ0YW4KICAgICAgICAgICAgICAgICAgICAgICAgaGFybW9zdHMgZnJvbSBtYW55IG9mIHRoZSBpc2xhbmRzLCBhbmQgZmluYWxseSByZWFjaGVkIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hlcmUgaGUgcmVzdG9yZWQgdGhlIExvbmcKICAgICAgICAgICAgICAgICAgICAgICAgV2FsbCwgZGlzbWFudGxlZCBzaW5jZSB0aGUgUGVsb3Bvbm5lc2lhbiB3YXIuPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IG9uY2UKICAgICAgICAgICAgICAgICAgICBtb3JlIHRoZSBzdWJqZWN0IG9mIGRpc3B1dGUgYmV0d2VlbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIGluZGVlZCwgaGUgaGFzIHRoZSB1bmlxdWUgZGlzdGluY3Rpb24KICAgICAgICAgICAgICAgICAgICBvZiBiZWluZyB0aHVzIG1lbnRpb25lZCBpbiBoaXMgaW5zY3JpcHRpb247IOKAnFdoZXJlYXMgQ29ub24s4oCdCiAgICAgICAgICAgICAgICAgICAgaXQgcnVucywg4oCcZnJlZWQgdGhlIGFsbGllcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4u4oCdIFRoYXQgaW5zY3JpcHRpb24sIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgaXMKICAgICAgICAgICAgICAgICAgICBoaXMgZ2xvcnkgaW4geW91ciBlc3RpbWF0aW9uLCBidXQgaXQgaXMgeW91cnMgaW4gdGhlIGVzdGltYXRpb24gb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkdyZWVjZTwvcGxhY2VOYW1lPi4gRm9yIHdoYXRldmVyIGJvb24gYW55IG9uZQogICAgICAgICAgICAgICAgICAgIG9mIHVzIGNvbmZlcnMgb24gdGhlIG90aGVyIHN0YXRlcywgdGhlIGNyZWRpdCBvZiBpdCBpcyByZWFwZWQgYnkgdGhlIGZhbWUgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgY2l0eS4gPC90cmFuc2xhdGlvbj4="
translation['20.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgaGlzIGNvbnRlbXBvcmFyaWVzIG5vdCBvbmx5CiAgICAgICAgICAgICAgICAgICAgZ3JhbnRlZCBoaW0gaW1tdW5pdHksIGJ1dCBhbHNvIHNldCB1cCBoaXMgc3RhdHVlIGluIGJyb256ZeKAlHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIG1hbiBzbyBob25vcmVkIHNpbmNlIEhhcm1vZGl1cyBhbmQgQXJpc3RvZ2l0b24uIEZvciB0aGV5IGZlbHQgdGhhdCBoZSB0b28sIGluCiAgICAgICAgICAgICAgICAgICAgYnJlYWtpbmcgdXAgdGhlIGVtcGlyZSBvZiB0aGUgTGFjZWRhZW1vbmlhbnMsIGhhZCBlbmRlZCBubyBpbnNpZ25pZmljYW50CiAgICAgICAgICAgICAgICAgICAgdHlyYW5ueS4gSW4gb3JkZXIsIHRoZW4sIHRoYXQgeW91IG1heSBnaXZlIGEgY2xvc2VyIGF0dGVudGlvbiB0byBteSB3b3JkcywgdGhlCiAgICAgICAgICAgICAgICAgICAgY2xlcmsgc2hhbGwgcmVhZCB0aGUgYWN0dWFsIGRlY3JlZXMgd2hpY2ggeW91IHRoZW4gcGFzc2VkIGluIGZhdm9yIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTIzMDI5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjMwMjkiPkNvbm9uPC9wbGFjZU5hbWU+LiBSZWFkIHRoZW0uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgd2FzIG5vdCwKICAgICAgICAgICAgICAgICAgICB0aGVuLCBvbmx5IGJ5IHlvdSwgQXRoZW5pYW5zLCB0aGF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiB3YXMgaG9ub3JlZCBmb3IgdGhlIHNlcnZpY2VzIHRoYXQgSSBoYXZlIGRlc2NyaWJlZCwgYnV0CiAgICAgICAgICAgICAgICAgICAgYnkgbWFueSBvdGhlcnMsIHdobyByaWdodGx5IGZlbHQgYm91bmQgdG8gc2hvdyBncmF0aXR1ZGUgZm9yIHRoZSBiZW5lZml0cyB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGFkIHJlY2VpdmVkLiBBbmQgc28gaXQgaXMgdG8geW91ciBkaXNob25vciwgbWVuIG9mIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgaW4gb3RoZXIgc3RhdGVzIGhpcyByZXdhcmRzCiAgICAgICAgICAgICAgICAgICAgaG9sZCBnb29kLCBidXQgb2YgeW91ciByZXdhcmRzIGFsb25lIGhlIGlzIHRvIGxvc2UgdGhpcyBwYXJ0LiA8L3RyYW5zbGF0aW9uPg=="
translation['20.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5OZWl0aGVyIGlzIHRoaXMgY3JlZGl0YWJsZeKAlHRvIGhvbm9yIGhpbQogICAgICAgICAgICAgICAgICAgIHdoZW4gbGl2aW5nLCB3aXRoIGFsbCB0aGUgZGlzdGluY3Rpb25zIHRoYXQgaGF2ZSBiZWVuIHJlY2l0ZWQgdG8geW91LCBidXQgd2hlbgogICAgICAgICAgICAgICAgICAgIGhlIGlzIGRlYWQgdG8gdGFrZSBiYWNrIHNvbWUgcGFydCBvZiB5b3VyIGZvcm1lciBnaWZ0cy4gRm9yIG1hbnkgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgYWNoaWV2ZW1lbnRzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBkZXNlcnZlCiAgICAgICAgICAgICAgICAgICAgcHJhaXNlLCBhbmQgYWxsIG9mIHRoZW0gbWFrZSBpdCBpbXByb3BlciB0byByZXZva2UgdGhlIGdpZnRzIHRoZXkgZWFybmVkIGZvcgogICAgICAgICAgICAgICAgICAgIGhpbSwgYnV0IHRoZSBub2JsZXN0IGRlZWQgb2YgYWxsIHdhcyBoaXMgcmVzdG9yYXRpb24gb2YgdGhlIExvbmcgV2FsbHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Ugd2lsbCByZWFsaXplIHRoaXMgaWYgeW91IGNvbXBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgd2F5IGluIHdoaWNoIFRoZW1pc3RvY2xlcywgdGhlIG1vc3QgZmFtb3VzIG1hbiBvZiBoaXMgYWdlLCBhY2NvbXBsaXNoZWQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICByZXN1bHQuIE5vdyBoaXN0b3J5IHRlbGxzIHVzIHRoYXQgVGhlbWlzdG9jbGVzIGJhZGUgaGlzIGNvdW50cnltZW4gZ2V0IG9uIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgYnVpbGRpbmcgYW5kIGRldGFpbiBhbnlvbmUgd2hvIGNhbWUgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFNwYXJ0YSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3BhcnRhIj5TcGFydGE8L3BsYWNlTmFtZT4sIHdoaWxlIGhlIHdlbnQgb2ZmIGhpbXNlbGYgb24gYW4gZW1iYXNzeSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBMYWNlZGFlbW9uaWFuczsgYW5kIHdoaWxlIG5lZ290aWF0aW9ucyB3ZW50IG9uIHRoZXJlIGFuZCB0aGUgbmV3cyBrZXB0IGNvbWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIEF0aGVuaWFucyB3ZXJlIGZvcnRpZnlpbmcsIGhlIGRlbmllZCBpdCBhbmQgdG9sZCB0aGVtIHRvIHNlbmQgZW52b3lzIHRvCiAgICAgICAgICAgICAgICAgICAgc2VlIGZvciB0aGVtc2VsdmVzLCBhbmQgd2hlbiB0aGVzZSBlbnZveXMgZGlkIG5vdCByZXR1cm4sIGhlIHVyZ2VkIHRoZW0gdG8gc2VuZAogICAgICAgICAgICAgICAgICAgIG1vcmUuIEluZGVlZCwgSSBleHBlY3QgeW91IGhhdmUgYWxsIGhlYXJkIHRoZSBzdG9yeSBvZiBob3cgaGUgaG9vZHdpbmtlZCB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSBhc3NlcnTigJRhbmQgSSBlYXJuZXN0bHkKICAgICAgICAgICAgICAgICAgICBhcHBlYWwgdG8geW91LCBBdGhlbmlhbnMsIG5vdCB0byB0YWtlIG9mZmVuY2UgYXQgd2hhdCBpcyBjb21pbmcsIGJ1dCB0byBjb25zaWRlcgogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgaXQgaXMgdHJ1ZeKAlEkgYXNzZXJ0IHRoYXQgaW4gcHJvcG9ydGlvbiBhcyBvcGVubmVzcyBpcyBiZXR0ZXIKICAgICAgICAgICAgICAgICAgICB0aGFuIHNlY3JlY3ksIGFuZCBpdCBpcyBtb3JlIGhvbm9yYWJsZSB0byBnYWluIG9uZSdzIGVuZCBieSB2aWN0b3J5IHRoYW4gYnkKICAgICAgICAgICAgICAgICAgICB0cmlja2VyeSwgc28gPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IGRlc2VydmVzIG1vcmUgY3JlZGl0CiAgICAgICAgICAgICAgICAgICAgdGhhbiBUaGVtaXN0b2NsZXMgZm9yIGJ1aWxkaW5nIHRoZSB3YWxscy4gRm9yIHRoZSBsYXR0ZXIgYWNoaWV2ZWQgaXQgYnkgZXZhZGluZwogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyB3b3VsZCBoYXZlIHByZXZlbnRlZCBpdCwgYnV0IHRoZSBmb3JtZXIgYnkgYmVhdGluZyB0aGVtIGluIGJhdHRsZS4KICAgICAgICAgICAgICAgICAgICBUaGVyZWZvcmUgaXQgaXMgbm90IHJpZ2h0IHRoYXQgc28gZ3JlYXQgYSBtYW4gc2hvdWxkIGJlIHdyb25nZWQgYnkgeW91LCBvcgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBnYWluIGxlc3MgdGhhbiB0aG9zZSBvcmF0b3JzIHdobyB3aWxsIHRyeSB0byBwcm92ZSB0aGF0IHlvdSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGRlZHVjdCBzb21ldGhpbmcgZnJvbSB3aGF0IHdhcyBiZXN0b3dlZCBvbiBoaW0uIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['20.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VmVyeSB3ZWxsLiBCdXQsIHRoZXkgd2lsbCBzYXksIHdlIG1heSBsZXQKICAgICAgICAgICAgICAgICAgICB0aGUgc29uIG9mIENoYWJyaWFzIGJlIHJvYmJlZCBvZiB0aGUgaW1tdW5pdHkgd2hpY2ggaGlzIGZhdGhlciBqdXN0bHkgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHlvdSBhbmQgYmVxdWVhdGhlZCB0byBoaW0uIEJ1dCBJIGFtIHN1cmUgdGhlcmUgaXMgbm90IGEgc2luZ2xlIHJpZ2h0LW1pbmRlZAogICAgICAgICAgICAgICAgICAgIG1hbiB3aG8gd291bGQgYXBwcm92ZSBvZiB0aGF0LiBOb3csIHBlcmhhcHMgeW91IGtub3csIGV2ZW4gd2l0aG91dCBhbnkgd29yZHMKICAgICAgICAgICAgICAgICAgICBmcm9tIG1lLCB0aGF0IENoYWJyaWFzIHdhcyBhIG1hbiBvZiBoaWdoIGNoYXJhY3RlcjsgeWV0IHRoZXJlIGlzIG5vIGhhcm0gaWYgSQogICAgICAgICAgICAgICAgICAgIHRvbyByZWNhbGwgYnJpZWZseSBoaXMgYWNoaWV2ZW1lbnRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3cKICAgICAgICAgICAgICAgICAgICBza2lsZnVsbHksIGFzIHlvdXIgY29tbWFuZGVyLCBoZSBkcmV3IHVwIHlvdXIgcmFua3MgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBoZWxwZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IHRvIHJlcGVsIHRoZSBpbnZhc2lvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBBZ2VzaWxhdXMgaW4gMzc4LiBDaGFicmlhcywgb24gaGlzIHdheSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDExMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTEyIj5DeXBydXM8L3BsYWNlTmFtZT4gaW4gMzg4IHRvIGhlbHAgRXZhZ29yYXMgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4sIGxhbmRlZCBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA4NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDg3Ij5BZWdpbmE8L3BsYWNlTmFtZT4gYW5kIGtpbGxlZCB0aGUgU3BhcnRhbiBoYXJtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXJlLiBIZSB3YXMgb3BlcmF0aW5nIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+IGluCiAgICAgICAgICAgICAgICAgICAgICAgIDM4MCBhbmQgYWdhaW4gaW4gMzYxLjwvbm90ZT4gdG8gZmFjZSB0aGUgd2hvbGUgcG93ZXIgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBoZWxwZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUaGViZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRoZWJlcyI+VGhlYmVzPC9wbGFjZU5hbWU+IHRvIHJlcGVsIHRoZSBpbnZhc2lvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBBZ2VzaWxhdXMgaW4gMzc4LiBDaGFicmlhcywgb24gaGlzIHdheSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDExMiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMTEyIj5DeXBydXM8L3BsYWNlTmFtZT4gaW4gMzg4IHRvIGhlbHAgRXZhZ29yYXMgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMDIzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAwMjMxIj5QZXJzaWE8L3BsYWNlTmFtZT4sIGxhbmRlZCBvbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA4NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDg3Ij5BZWdpbmE8L3BsYWNlTmFtZT4gYW5kIGtpbGxlZCB0aGUgU3BhcnRhbiBoYXJtb3N0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXJlLiBIZSB3YXMgb3BlcmF0aW5nIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2ODMzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY4MzMiPkVneXB0PC9wbGFjZU5hbWU+IGluCiAgICAgICAgICAgICAgICAgICAgICAgIDM4MCBhbmQgYWdhaW4gaW4gMzYxLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3MDc2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcwNzYiPlBlbG9wb25uZXNlPC9wbGFjZU5hbWU+LCBob3cgaGUgc2xldyBHb3Jnb3BhcyBpbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTA4NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDg3Ij5BZWdpbmE8L3BsYWNlTmFtZT4sIHdoYXQgdHJvcGhpZXMgaGUgc2V0IHVwIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMTEyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAxMTIiPkN5cHJ1czwvcGxhY2VOYW1lPiBhbmQgYWZ0ZXJ3YXJkcyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNjgzMyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE2ODMzIj5FZ3lwdDwvcGxhY2VOYW1lPiwgaG93IGhlIHZpc2l0ZWQsIEkgbWlnaHQgYWxtb3N0IHNheSwKICAgICAgICAgICAgICAgICAgICBldmVyeSBsYW5kLCB5ZXQgbm93aGVyZSBkaXNncmFjZWQgb3VyIGNpdHkncyBuYW1lIG9yIGhpcyBvd27igJRvZiBhbGwKICAgICAgICAgICAgICAgICAgICB0aGVzZSBleHBsb2l0cyBpdCBpcyBieSBubyBtZWFucyBlYXN5IHRvIHNwZWFrIGFkZXF1YXRlbHksIGFuZCBpdCB3b3VsZCBiZSBhCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgc2hhbWUgaWYgbXkgd29yZHMgc2hvdWxkIG1ha2UgdGhlbSBmYWxsIGJlbG93IHRoZSBlc3RpbWF0ZSBvZiBoaW0gd2hpY2gKICAgICAgICAgICAgICAgICAgICBlYWNoIG9uZSBvZiB5b3UgaGFzIGZvcm1lZCBpbiBoaXMgb3duIG1pbmQuIEJ1dCBvZiBzb21lLCB3aGljaCBJIHRoaW5rIEkgY291bGQKICAgICAgICAgICAgICAgICAgICBuZXZlciBiZWxpdHRsZSBpbiBkZXNjcmliaW5nIHRoZW0sIEkgd2lsbCB0cnkgdG8gcmVtaW5kIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['20.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGhlIGJlYXQgdGhlIExhY2VkYWVtb25pYW5zIGluIGEgc2VhLWZpZ2h0PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9mZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDUzIj5OYXhvczwvcGxhY2VOYW1lPiBpbiAzNzYuPC9ub3RlPiBhbmQgdG9vayBmb3J0eS1uaW5lIHdhcnNoaXBzOyBoZQogICAgICAgICAgICAgICAgICAgIGNhcHR1cmVkIG1vc3Qgb2YgdGhlIGlzbGFuZHMgbmVhciBhbmQgaGFuZGVkIHRoZW0gb3ZlciB0byB5b3UsIHR1cm5pbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICBwcmV2aW91cyBlbm1pdHkgaW50byBmcmllbmRzaGlwOyBoZSBicm91Z2h0IHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDUzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTMiPk5heG9zPC9wbGFjZU5hbWU+IGluIDM3Ni48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdGhyZWUgdGhvdXNhbmQgY2FwdGl2ZXMsIGFuZCBwYWlkIGludG8gdGhlIHRyZWFzdXJ5IG1vcmUKICAgICAgICAgICAgICAgICAgICB0aGFuIGEgaHVuZHJlZCBhbmQgdGVuIHRhbGVudHMgdGFrZW4gZnJvbSB0aGUgZW5lbXkuIEFuZCBpbiBhbGwgdGhlc2UgZmFjdHMgc29tZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBvbGRlc3QgYW1vbmcgeW91IGNhbiBiZWFyIG1lIG91dC4gQnV0IGluIGFkZGl0aW9uLCBoZSBjYXB0dXJlZCBtb3JlIHRoYW4KICAgICAgICAgICAgICAgICAgICB0d2VudHkgd2Fyc2hpcHMsIG9uZSBvciB0d28gYXQgYSB0aW1lLCBhbmQgYnJvdWdodCB0aGVtIGFsbCBpbnRvIHlvdXIgaGFyYm9ycy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz5UbyBzdW0gdXA7IGhlIGFsb25lIG9mIGFsbCBvdXIgZ2VuZXJhbHMKICAgICAgICAgICAgICAgICAgICBuZXZlciBsb3N0IGEgY2l0eSwgYSBmb3J0LCBhIHNoaXAsIG9yIGEgbWFuLCBhcyBsb25nIGFzIGhlIGxlZCB5b3U7IGFuZCBub25lIG9mCiAgICAgICAgICAgICAgICAgICAgeW91ciBlbmVtaWVzIGNhbiBib2FzdCBhIHNpbmdsZSB0cm9waHkgd29uIGZyb20geW91IGFuZCBoaW0sIHdoaWxlIHlvdSBwb3NzZXNzCiAgICAgICAgICAgICAgICAgICAgbWFueSB3b24gZnJvbSBtYW55IGVuZW1pZXMgd2hpbGUgaGUgd2FzIHlvdXIgZ2VuZXJhbC4gQnV0IGZvciBmZWFyIGxlc3QgbXkKICAgICAgICAgICAgICAgICAgICBzcGVlY2ggc2hvdWxkIG9taXQgYW55IG9mIGhpcyBleHBsb2l0cywgdGhlIGNsZXJrIHNoYWxsIHJlYWQgdG8geW91IGFuIGludmVudG9yeQogICAgICAgICAgICAgICAgICAgIG9mIGFsbCB0aGUgc2hpcHMgaGUgdG9vayBhbmQgd2hlcmUgaGUgdG9vayBlYWNoLCB0aGUgbnVtYmVyIG9mIGNpdGllcyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgYW1vdW50IG9mIHRyZWFzdXJlIGNhcHR1cmVkLCBhbmQgdGhlIHBsYWNlIHdoZXJlIGhlIHNldCB1cCBlYWNoIHRyb3BoeS4KICAgICAgICAgICAgICAgICAgICAgICAgUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWVkcyBvZiBDaGFicmlhcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlZWRzIG9mIENoYWJyaWFzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlZWRzIG9mIENoYWJyaWFzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RG9lcyBpdCBzZWVtIHRvCiAgICAgICAgICAgICAgICAgICAgYW55IG9mIHlvdSwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IHRoaXMgbWFuLCB3aG8gY2FwdHVyZWQgc28gbWFueSBjaXRpZXMKICAgICAgICAgICAgICAgICAgICBhbmQgc2hpcHMgZnJvbSB5b3VyIGVuZW1pZXMgYnkgaGlzIHZpY3RvcmllcyBvbiBzZWEsIGFuZCB3aG8gd2FzIHRoZSBzb3VyY2Ugb2YKICAgICAgICAgICAgICAgICAgICBzbyBtdWNoIGhvbm9yLCBidXQgbmV2ZXIgb2YgZGlzZ3JhY2UsIHRvIHlvdXIgY2l0eSwgZGVzZXJ2ZXMgdG8gYmUgZGVwcml2ZWQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgaW1tdW5pdHkgd2hpY2ggaGUgb2J0YWluZWQgYXQgeW91ciBoYW5kcyBhbmQgYmVxdWVhdGhlZCB0byBoaXMgc29uPyBJIGNhbm5vdAogICAgICAgICAgICAgICAgICAgIGJlbGlldmUgaXQsIGZvciBpdCBpcyBvdXQgb2YgYWxsIHJlYXNvbi4gSGFkIGhlIGxvc3QgYSBzaW5nbGUgY2l0eSBvciBhcyBmZXcgYXMKICAgICAgICAgICAgICAgICAgICB0ZW4gc2hpcHMsIExlcHRpbmVzIGFuZCBoaXMgc3VwcG9ydGVycyB3b3VsZCBoYXZlIGltcGVhY2hlZCBoaW0gZm9yIGhpZ2gKICAgICAgICAgICAgICAgICAgICB0cmVhc29uLCBhbmQgaWYgaGUgaGFkIGJlZW4gY29udmljdGVkLCBoZSB3b3VsZCBoYXZlIGJlZW4gYSBydWluZWQgbWFuIGZvciBldmVyLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UsIG9uIHRoZSBjb250cmFyeSwgaGUgdG9vawogICAgICAgICAgICAgICAgICAgIHNldmVudGVlbiBjaXRpZXMsIGFuZCBjYXB0dXJlZCBzZXZlbnR5IHNoaXBzIGFuZCB0aHJlZSB0aG91c2FuZCBwcmlzb25lcnMsIGFuZAogICAgICAgICAgICAgICAgICAgIHBhaWQgaW50byB0aGUgdHJlYXN1cnkgYSBodW5kcmVkIGFuZCB0ZW4gdGFsZW50cywgYW5kIHNldCB1cCBzbyBtYW55IHRyb3BoaWVzLAogICAgICAgICAgICAgICAgICAgIGluIHRoYXQgY2FzZSBzaGFsbCBub3QgaGlzIHJld2FyZHMgZm9yIHRoZXNlIHNlcnZpY2VzIHN0YW5kIGdvb2Q/IE1vcmVvdmVyLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgaXQgd2lsbCBiZSBzZWVuIHRoYXQgQ2hhYnJpYXMgZHVyaW5nIGhpcyBsaWZldGltZSBkaWQgZXZlcnl0aGluZyBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgYmVoYWxmLCBhbmQgdGhhdCBoZSBtZXQgZGVhdGggaXRzZWxmIGluIG5vIG90aGVyIHNlcnZpY2U7IHNvIHRoYXQgZm9yIHRoaXMsCiAgICAgICAgICAgICAgICAgICAgYXMgd2VsbCBhcyBmb3IgYWxsIHRoYXQgaGUgZGlkIGluIGhpcyBsaWZlLCB5b3Ugb3VnaHQgdG8gc2hvdyB5b3Vyc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJvdXNseSBkaXNwb3NlZCB0byBoaXMgc29uLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoaXMgdG9vLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgZGVtYW5kcyB5b3VyIGNvbnNpZGVyYXRpb27igJR0aGF0IHdlIG11c3Qgbm90IHByb3ZlIGxlc3MKICAgICAgICAgICAgICAgICAgICBnZW5lcm91cyB0aGFuIHRoZSBDaGlhbnMgaW4gb3VyIHRyZWF0bWVudCBvZiBvdXIgYmVuZWZhY3RvcnMuIEZvciBpZiB0aGV5LAogICAgICAgICAgICAgICAgICAgIGFnYWluc3Qgd2hvbSBDaGFicmlhcyBjYXJyaWVkIGFybXMgYXMgYW4gZW5lbXksIGhhdmUgbm90IG5vdyByZXZva2VkIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZvcm1lciBnaWZ0cywgYnV0IGhhdmUgbWFkZSBhbmNpZW50IHNlcnZpY2VzIG91dHdlaWdoIHJlY2VudCBvZmZlbmNlcywKICAgICAgICAgICAgICAgICAgICB3aGlsZSB5b3UsIGluIHdob3NlIGNhdXNlIGhlIG1hcmNoZWQgYWdhaW5zdCB0aGVtIHRvIGhpcyBkZWF0aCwgc28gZmFyIGZyb20KICAgICAgICAgICAgICAgICAgICBob25vcmluZyBoaW0gdGhlIG1vcmUgb24gdGhhdCBhY2NvdW50LCBhcmUgZXZlbiBnb2luZyB0byByb2IgaGltIG9mIHBhcnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkIG9mIGhpcyBwYXN0IHNlcnZpY2VzLCBob3cgd2lsbCB5b3UgZXNjYXBlIHRoZSBpZ25vbWlueSB0aGF0IHlvdSBkZXNlcnZlPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZW92ZXIsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHRoZSBzb24gYmUgcm9iYmVkIG9mIHBhcnQgb2YgaGlzIHJld2FyZCwgaGlzIHRyZWF0bWVudCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHVuZGVzZXJ2ZWQgaW4gdmlldyBvZiB0aGUgZmFjdCB0aGF0IG5vIG1hbidzIGNoaWxkIHdhcyBldmVyIG9ycGhhbmVkIHRocm91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgZmF1bHQgb2YgQ2hhYnJpYXMsIHRob3VnaCBoZSBmcmVxdWVudGx5IGxlZCB5b3UgaW4gd2FyLCBidXQgdGhlIGJveSBoaW1zZWxmIGhhcwogICAgICAgICAgICAgICAgICAgIGdyb3duIHVwIGFuIG9ycGhhbiwganVzdCBiZWNhdXNlIG9mIGhpcyBmYXRoZXIncyBkZXZvdGlvbiB0byB5b3VyIGNhdXNlLiBGb3IgdG8KICAgICAgICAgICAgICAgICAgICBtZSBoZSBzZWVtcyB0cnVseSB0byBoYXZlIGJlZW4gc3VjaCBhIHN0YXVuY2ggcGF0cmlvdCwgdGhhdCB0aG91Z2ggcmVwdXRlZCB0byBiZQogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IGNhdXRpb3VzIG9mIGNvbW1hbmRlcnMsIGFzIGluZGVlZCBoZSB3YXMsIGl0IHdhcyBmb3IgeW91ciBzYWtlIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBkaXNwbGF5ZWQgdGhhdCBxdWFsaXR5IHdoZW5ldmVyIGhlIGxlZCB5b3UsIGJ1dCBmb3IgaGlzIG93biBzYWtlLCB3aGVuIGhlIGZvdW5kCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBhc3NpZ25lZCB0byB0aGUgcG9zdCBvZiBkYW5nZXIsIGhlIGZvcmdvdCBhbGwgaGlzIGNhdXRpb24gYW5kIHByZWZlcnJlZAogICAgICAgICAgICAgICAgICAgIHRvIGxheSBkb3duIGhpcyBsaWZlIHJhdGhlciB0aGFuIHRhcm5pc2ggdGhlIGhvbm9ycyB0aGF0IHlvdSBoYWQgYmVzdG93ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGF0LCBhcmUgd2UgdG8gcm9iIHRoZSBzb24gb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICBob25vcnMgd2hpY2ggaW5zcGlyZWQgdGhlIGZhdGhlciB0byBjb25xdWVyIG9yIHRvIGRpZT8gQW5kIHdoYXQgc2hhbGwgd2Ugc2F5LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoZW4gdGhlIHRyb3BoaWVzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBzZXQgdXAgYXMgZ2VuZXJhbCBpbiB5b3VyIG5hbWUgc3RhbmQgcGxhaW4gZm9yIGFsbCBtZW4gdG8gc2VlLCBidXQgYQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgdGhlIHJld2FyZCBmb3IgdGhvc2UgdHJvcGhpZXMgaXMgZm91bmQgdG8gaGF2ZSBiZWVuIGZpbGNoZWQgYXdheT8gV2lsbAogICAgICAgICAgICAgICAgICAgIHlvdSBub3Qgb2JzZXJ2ZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVmbGVjdCB0aGF0IHRvZGF5IHdlIGFyZSBub3QganVkZ2luZyB0aGUgbGF3LCB0byBzZWUgd2hldGhlciBpdCBpcyBzdWl0YWJsZSBvcgogICAgICAgICAgICAgICAgICAgIG5vdD8gSXQgaXMgeW91IHdobyBhcmUgdW5kZXIgZXhhbWluYXRpb24sIHRvIHNlZSB3aGV0aGVyIHlvdSBhcmUgc3VpdGFibGUKICAgICAgICAgICAgICAgICAgICBwZXJzb25zIHRvIHJlY2VpdmUgYmVuZWZpdHMgaW4gdGhlIGZ1dHVyZSBvciB3aGV0aGVyIHlvdSBhcmUgbm90LiA8L3RyYW5zbGF0aW9uPg=="
translation['20.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VHVybiBub3cgdG8gdGhlIGRlY3JlZQogICAgICAgICAgICAgICAgICAgIHBhc3NlZCBpbiBob25vciBvZiBDaGFicmlhcy4gSnVzdCBsb29rIGFuZCBzZWU7IGl0IG11c3QgYmUgc29tZXdoZXJlIHRoZXJlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIGFzaWRlIGlzIGludGVuZGVkIHRvIGdpdmUgYW4gYWlyIG9mIHJlYWxpdHkKICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHB1Ymxpc2hlZCBzcGVlY2guIEVkaXRvcnMgd2VsbCBjb21wYXJlIGEgc2ltaWxhciB0cmljayBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFZlci4gMi40LjMiIHZhbGlkPSJ5ZXMiPkNpY2VybyBWZXJyLiAyLjQuMzwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gVmVyLiAyLjQuMyIgdmFsaWQ9InllcyI+Q2ljZXJvIFZlcnIuIDIuNC4zPC9iaWJsPi48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgaXMgb25lIHRoaW5nIGZ1cnRoZXIgdGhhdCBJIHdhbnQgdG8gc2F5CiAgICAgICAgICAgICAgICAgICAgYWJvdXQgQ2hhYnJpYXMuIFlvdSwgQXRoZW5pYW5zLCBpbiBob25vcmluZyBJcGhpY3JhdGVzLCBob25vcmVkIG5vdCBvbmx5IGhpbSBidXQKICAgICAgICAgICAgICAgICAgICBhbHNvIG9uIGhpcyBhY2NvdW50IFN0cmFiYXggYW5kIFBvbHlzdHJhdHVzOyBhbmQgYWdhaW4sIHdoZW4gZ2l2aW5nIHlvdXIgcmV3YXJkCiAgICAgICAgICAgICAgICAgICAgdG8gVGltb3RoZXVzLCB5b3UgYWxzbyBmb3IgaGlzIHNha2UgcmV3YXJkZWQgQ2xlYXJjaHVzIGFuZCBzb21lIG90aGVycyB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVuc2hpcDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JcGhpY3JhdGVzIHdhcyBob25vcmVkIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVmZWF0IG9mIHRoZSBTcGFydGFuIG1vcmEgaW4gdGhlIENvcmludGhpYW4gV2FyICgzOTApLCBUaW1vdGhldXMgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzZnVsIGV4cGVkaXRpb24gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA4ODYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDg4NiI+Q29yY3lyYTwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGUgYmF0dGxlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDUzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTMiPk5heG9zPC9wbGFjZU5hbWU+ICgzNzYpLgogICAgICAgICAgICAgICAgICAgICAgICBTdHJhYmF4IHdhcyBwcmVzdW1hYmx5IGEgZm9yZWlnbiBtZXJjZW5hcnk7IFBvbHlzdHJhdHVzIGlzIG1lbnRpb25lZCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0LjI0IiB2YWxpZD0ieWVzIj5EZW0uIDQuMjQ8L2JpYmw+LCBhcyBhIGNvbW1hbmRlciBvZiBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBtZXJjZW5hcmllcyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLENvcmludGgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLENvcmludGgiPkNvcmludGg8L3BsYWNlTmFtZT4uIFRoZXNlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgdHdvIHdlcmUgcmV3YXJkZWQgZm9yIHNlcnZpY2VzIHVuZGVyIHRoZSBjb21tYW5kIG9mIElwaGljcmF0ZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIENsZWFyY2h1cyBjYW5ub3QgYmUgaWRlbnRpZmllZCB3aXRoIGNlcnRhaW50eS48L25vdGU+OyA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDg4NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwODg2Ij5Db3JjeXJhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBiYXR0bGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1MyI+TmF4b3M8L3BsYWNlTmFtZT4gKDM3NikuCiAgICAgICAgICAgICAgICAgICAgICAgIFN0cmFiYXggd2FzIHByZXN1bWFibHkgYSBmb3JlaWduIG1lcmNlbmFyeTsgUG9seXN0cmF0dXMgaXMgbWVudGlvbmVkIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQuMjQiIHZhbGlkPSJ5ZXMiPkRlbS4gNC4yNDwvYmlibD4sIGFzIGEgY29tbWFuZGVyIG9mIEF0aGVuaWFuCiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmNlbmFyaWVzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29yaW50aCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29yaW50aCI+Q29yaW50aDwvcGxhY2VOYW1lPi4gVGhlc2UKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCB0d28gd2VyZSByZXdhcmRlZCBmb3Igc2VydmljZXMgdW5kZXIgdGhlIGNvbW1hbmQgb2YgSXBoaWNyYXRlcy4KICAgICAgICAgICAgICAgICAgICAgICAgQ2xlYXJjaHVzIGNhbm5vdCBiZSBpZGVudGlmaWVkIHdpdGggY2VydGFpbnR5LjwvdHJhbnNsYXRpb24+"
translation['20.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgaW4gdGhlIGNhc2Ugb2YgQ2hhYnJpYXMgeW91ciBob25vcnMgd2VyZSBmb3IgaGltCiAgICAgICAgICAgICAgICAgICAgYWxvbmUuIE5vdywgaWYgYXQgdGhlIHRpbWUgd2hlbiBoZSB3YXMgcmVjZWl2aW5nIGhpcyByZXdhcmQsIGhlIGhhZCBjbGFpbWVkIHRoYXQKICAgICAgICAgICAgICAgICAgICBhcyB5b3UgaGFkIHJld2FyZGVkIG90aGVycyBmb3IgdGhlIHNha2Ugb2YgSXBoaWNyYXRlcyBhbmQgVGltb3RoZXVzLCBzbyBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgc2FrZSB5b3Ugc2hvdWxkIHJld2FyZCBzb21lIG9mIHRob3NlIG1lbiB3aG8gaGF2ZSBhY3R1YWxseSByZWNlaXZlZCB0aGUKICAgICAgICAgICAgICAgICAgICBpbW11bml0eSwgYnV0IHRvIHdob20gb3VyIG9wcG9uZW50cyBvYmplY3Qgc28gc3Ryb25nbHkgdGhhdCB0aGV5IHdhbnQgYWxsIGFsaWtlCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgZGVwcml2ZWQgb2YgaXQsIHdvdWxkIHlvdSBub3QgaGF2ZSBncmFudGVkIGhpbSB0aGF0IGJvb24/IEkgY2Fubm90IGRvdWJ0CiAgICAgICAgICAgICAgICAgICAgaXQuIDwvdHJhbnNsYXRpb24+"
translation['20.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGlzIHNha2UgeW91IHdvdWxkIGhhdmUgcmV3YXJkZWQgdGhlbQogICAgICAgICAgICAgICAgICAgIHRoZW47IHlldCBub3csIG9uIHRoZWlyIGFjY291bnQsIHdpbGwgeW91IHRha2UgYXdheSB0aGUgaW1tdW5pdHkgZnJvbSBDaGFicmlhcwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGY/IFdoeSwgdGhhdCBpcyBhYnN1cmQhIEZvciBpdCBpcyBpbmNvbnNpc3RlbnQgdG8gc2VlbSBzbyBnZW5lcm91cywgd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZSBiZW5lZml0cyBhcmUgcmVjZW50LCB0aGF0IHlvdSBob25vciBub3QgdGhlIGJlbmVmYWN0b3JzIG9ubHkgYnV0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kcyBhcyB3ZWxsLCBidXQsIHdoZW4gYSBzaG9ydCB0aW1lIGhhcyBlbGFwc2VkLCB0byB0YWtlIGF3YXkgZXZlbiB0aGUKICAgICAgICAgICAgICAgICAgICByZXdhcmRzIHRoYXQgeW91IGhhdmUgZ2l2ZW4gdG8gdGhlIGJlbmVmYWN0b3JzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgYXJndW1lbnQgc2VlbXMgdG8gYmUgdGhpcy4gU29tZSByZWNpcGllbnRzIG9mIGltbXVuaXR5IG9idGFpbmVkIHNpbWlsYXIKICAgICAgICAgICAgICAgICAgICAgICAgZmF2b3JzIGZvciB0aGVpciBmcmllbmRzLiBDaGFicmlhcyBkaWQgbm90LCBidXQgaGUgbWlnaHQgaGF2ZSBkb25lIHNvLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIGZyaWVuZHMgbWlnaHQgaGF2ZSBiZWVuIHRoZSB1bmRlc2VydmluZyBwZXJzb25zIG5vdyBlbmpveWluZyBpbW11bml0eS4KICAgICAgICAgICAgICAgICAgICAgICAgSW4gdGhpcyByYXRoZXIgaHlwb3RoZXRpY2FsIGNhc2UsIGFmdGVyIHJld2FyZGluZyB0aGUgamFja2FscyBmcm9tIGdyYXRpdHVkZQogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgbGlvbiwgeW91IG5vdyBwZW5hbGl6ZSB0aGUgbGlvbiBvdXQgb2YgY29udGVtcHQgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBqYWNrYWxzLjwvbm90ZT48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWVzIG9uIHRoZSBIb25vcnMgb2YgQ2hhYnJpYXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzIG9uIHRoZSBIb25vcnMgb2YgQ2hhYnJpYXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlcyBvbiB0aGUgSG9ub3JzIG9mIENoYWJyaWFzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28gdGhlc2Ugd2hvc2UKICAgICAgICAgICAgICAgICAgICBuYW1lcyB5b3UgaGF2ZSBoZWFyZCwgYXMgd2VsbCBhcyBtYW55IG90aGVycywgYXJlIHRoZSBtZW4gd2hvbSB5b3Ugd2lsbCBpbmp1cmUKICAgICAgICAgICAgICAgICAgICBpZiB5b3UgZG8gbm90IHJlcGVhbCB0aGUgbGF3LiBKdXN0IHJlZmxlY3QgYW5kIHBvbmRlciBpbiB5b3VyIG93biBtaW5kcywgaWYgYW55CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2UgbWVuIG5vdyBwYXNzZWQgYXdheSBjb3VsZCBzb21laG93IGNvbWUgdG8ga25vdyBvZiB0aGUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIHByb2NlZWRpbmdzLCB3aGF0IGp1c3QgZ3JvdW5kIHRoZXkgd291bGQgaGF2ZSBmb3IgaW5kaWduYXRpb24hIEZvciBpZiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBkZWVkcyB0aGF0IGVhY2ggd3JvdWdodCBmb3IgeW91ciBhZHZhbnRhZ2UgdGhlcmUgaXMgdG8gYmUgYSBqdWRnZW1lbnQgYmFzZWQgb24KICAgICAgICAgICAgICAgICAgICB3b3JkcywgaWYgYWN0aW9ucyBub2JseSBwZXJmb3JtZWQgYnkgdGhlbSwgdW5sZXNzIG5vYmx5IGF2b3dlZCBieSB1cyBpbiBzcGVlY2gsCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHdyb3VnaHQgaW4gdmFpbiBmb3IgYWxsIHRoZWlyIHRvaWwsIGFyZSB0aGV5IG5vdCBzdWZmZXJpbmcgYSB0ZXJyaWJsZQogICAgICAgICAgICAgICAgICAgIHdyb25nPyA8L3RyYW5zbGF0aW9uPg=="
translation['20.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCB0bwogICAgICAgICAgICAgICAgICAgIHNhdGlzZnkgeW91LCBBdGhlbmlhbnMsIHRoYXQgZXZlcnkgYXJndW1lbnQgdGhhdCB3ZSBzdWJtaXQgdG8geW91IGlzIGJhc2VkIG9uCiAgICAgICAgICAgICAgICAgICAgcGVyZmVjdGx5IGp1c3QgZ3JvdW5kcywgYW5kIHRoYXQgbm90IGEgc2luZ2xlIGFyZ3VtZW50IGlzIGludGVuZGVkIHRvIG1pc2xlYWQKICAgICAgICAgICAgICAgICAgICBhbmQgZGVjZWl2ZSB5b3UsIHRoZSBjbGVyayBzaGFsbCByZWFkIHRoZSBsYXcgZHJhZnRlZCBhbmQgcHJvcG9zZWQgYnkgdXMgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIHRoZSBwbGFjZSBvZiB0aGUgcHJlc2VudCBvbmUsIHdoaWNoIHdlIGNvbnRlbmQgaXMgbWlzY2hpZXZvdXMuIEZvciBvdXIgbGF3IHdpbGwKICAgICAgICAgICAgICAgICAgICBzaG93IHlvdSB0aGF0IHdlIHRha2Ugc29tZSBjYXJlIHRvIGVuc3VyZSB0aGF0IHlvdSBzaGFsbCBiZSBzYXZlZCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2Ugb2YgYSBkaXNob25vcmFibGUgYWN0OyB0aGF0IGlmIGFueW9uZSBvYmplY3RzIHRvIG9uZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICByZWNpcGllbnRzLCBoZSBjYW4gZGVwcml2ZSBoaW0gb2YgaGlzIGdpZnQsIGlmIHRoZSBvYmplY3Rpb24gaXMgc291bmQsIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgdHJpYWwgaW4geW91ciBjb3VydHM7IGFuZCBhbHNvIHRoYXQgdGhvc2Ugd2hvc2UgY2xhaW0gdG8gdGhlIGdpZnRzIG5vbmUgY291bGQKICAgICAgICAgICAgICAgICAgICBkaXNwdXRlIHNoYWxsIGtlZXAgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['20.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gYWxsIHRoaXMgdGhlcmUKICAgICAgICAgICAgICAgICAgICBpcyBub3RoaW5nIG5ldywgbm8gaW5ub3ZhdGlvbiBvZiBvdXIgb3duOyBidXQgdGhlIG9sZCBsYXcsIHRyYW5zZ3Jlc3NlZCBieQogICAgICAgICAgICAgICAgICAgIExlcHRpbmVzLCBsYXlzIGRvd24gdGhpcyBwcm9jZWR1cmUgaW4gbGVnaXNsYXRpb24sIHRoYXQgaWYgYSBtYW4gZGlzYXBwcm92ZXMgb2YKICAgICAgICAgICAgICAgICAgICBhbiBleGlzdGluZyBsYXcsIGhlIHNoYWxsIGJyaW5nIGFuIGluZGljdG1lbnQgYWdhaW5zdCBpdCwgYnV0IHNoYWxsIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICBpbnRyb2R1Y2UgYW4gYWx0ZXJuYXRpdmUsIHN1Y2ggYXMgaGUgcHJvcG9zZXMgdG8gZW5hY3QgYWZ0ZXIgcmVwZWFsIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyLCBhbmQgdGhhdCB5b3UsIGFmdGVyIGhlYXJpbmcgYXJndW1lbnRzLCBzaGFsbCBjaG9vc2UgdGhlIGJldHRlciBsYXcuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgU29sb24sIHdobyBpbXBvc2VkIHRoaXMgbWV0aG9kLCBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgdGhpbmsgaXQgcmlnaHQgdGhhdCB3aGlsZSB0aGUganVuaW9yIGFyY2hvbnMsIHdobyBhcmUgYXBwb2ludGVkIGJ5IGxvdCB0bwogICAgICAgICAgICAgICAgICAgIGFkbWluaXN0ZXIgdGhlIGxhd3MsIHVuZGVyZ28gdHdvIHNjcnV0aW5pZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VG8KICAgICAgICAgICAgICAgICAgICAgICAgYXNjZXJ0YWluIHdoZXRoZXIgdGhleSB3ZXJlIGR1bHkgcXVhbGlmaWVkIGJ5IGJpcnRoLCBieSBjaGFyYWN0ZXIsIGFuZCBieQogICAgICAgICAgICAgICAgICAgICAgICB3ZWFsdGguPC9ub3RlPiBiZWZvcmUgZW50ZXJpbmcgb24gb2ZmaWNlLCBvbmUgaW4gdGhlIENvdW5jaWwgYW5kIGEgc2Vjb25kIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhdy1jb3VydHMgYmVmb3JlIHlvdSwgdGhlIGxhd3MgdGhlbXNlbHZlcywgd2hpY2ggcmVndWxhdGUgdGhlaXIgb2ZmaWNpYWwKICAgICAgICAgICAgICAgICAgICBhY3RzIGFuZCBhbGwgb3RoZXIgY2l2aWMgZHV0aWVzLCBzaG91bGQgYmUgcGFzc2VkIGF0IGhhcGhhemFyZCB0byBtZWV0IHNvbWUKICAgICAgICAgICAgICAgICAgICBlbWVyZ2VuY3ksIGFuZCBzaG91bGQgYmUgYXQgb25jZSB2YWxpZCB3aXRob3V0IHBhc3NpbmcgYSBzY3J1dGlueS4gPC90cmFuc2xhdGlvbj4="
translation['20.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gdGhvc2UgZGF5cywgaW5kZWVkLCB3aGlsZSB0aGV5IGxlZ2lzbGF0ZWQgaW4KICAgICAgICAgICAgICAgICAgICB0aGF0IHdheSwgdGhleSBrZXB0IHRvIHRoZSBleGlzdGluZyBsYXdzIGFuZCB3ZXJlIG5vdCBhbHdheXMgcHJvcG9zaW5nIG5ldyBvbmVzOwogICAgICAgICAgICAgICAgICAgIGJ1dCBldmVyIHNpbmNlIGNlcnRhaW4gc3RhdGVzbWVuIHJvc2UgdG8gcG93ZXIgYW5kLCBhcyBJIGFtIGluZm9ybWVkLCBjb250cml2ZWQKICAgICAgICAgICAgICAgICAgICB0byBnZXQgaW50byB0aGVpciBvd24gaGFuZHMgdGhlIHJpZ2h0IHRvIGluaXRpYXRlIGxlZ2lzbGF0aW9uIGF0IGFueSB0aW1lIGFuZCBpbgogICAgICAgICAgICAgICAgICAgIGFueSB3YXkgdGhleSB3aXNoZWQsIHRoZXJlIGFyZSBzbyBtYW55IGNvbnRyYWRpY3Rvcnkgc3RhdHV0ZXMgdGhhdCBmb3IgYSBsb25nCiAgICAgICAgICAgICAgICAgICAgdGltZSB5b3UgaGF2ZSBoYWQgdG8gYXBwb2ludCBhIGNvbW1pc3Npb24gdG8gc29ydCBvdXQgdGhlIGNvbnRyYWRpY3Rvcnkgb25lczsKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz55ZXQgaW4gc3BpdGUgb2YgdGhpcyB0aGUgYnVzaW5lc3MgbmV2ZXIKICAgICAgICAgICAgICAgICAgICBjb21lcyB0byBhbiBlbmQuIE91ciBsYXdzIGFyZSBubyBiZXR0ZXIgdGhhbiBzbyBtYW55IGRlY3JlZXM7IG5heSwgeW91IHdpbGwgZmluZAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGxhd3Mgd2hpY2ggaGF2ZSB0byBiZSBvYnNlcnZlZCBpbiBkcmFmdGluZyB0aGUgZGVjcmVlcyBhcmUgbGF0ZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zr3OteG9vc+EzrXPgc6/zrk8L2ZvcmVpZ24+IGhhcwogICAgICAgICAgICAgICAgICAgICAgICBiZWVuIG1pc3VuZGVyc3Rvb2QgYW5kIHZhcmlvdXNseSBlbWVuZGVkLiBMYXdzIG91Z2h0IHRvIGJlIGdlbmVyYWwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHBlcm1hbmVudCwgZGVjcmVlcyBwYXJ0aWN1bGFyIGFuZCBvY2Nhc2lvbmFsOyBidXQgdGhlcmUgaGFzIGJlZW4gc3VjaCBhIGdsdXQKICAgICAgICAgICAgICAgICAgICAgICAgb2YgaGFzdHkgbGVnaXNsYXRpb24sIHNpbmNlIHRoZSByZXN0b3JhdGlvbiBvZiB0aGUgZGVtb2NyYWN5IGluIDQwMywgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBtYW55IGRlY3JlZXMgc3RpbGwgc3RhbmQgdW5yZXBlYWxlZCBhZnRlciB0aGUgbGF3cyBvbiB3aGljaCB0aGV5IHdlcmUgYmFzZWQKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHN1cGVyc2VkZWQuIEZvciB0aGUgbGVnaXNsYXRpdmUgY29tbWlzc2lvbiBzZWUKICAgICAgICAgICAgICAgICAgICAgICAgSW50cm9kdWN0aW9uLjwvbm90ZT4gdGhhbiB0aGUgZGVjcmVlcyB0aGVtc2VsdmVzLiBOb3QgdG8gYmUgY29udGVudCwgdGhlbiwKICAgICAgICAgICAgICAgICAgICB3aXRoIGEgYmFyZSBhc3NlcnRpb24sIGJ1dCB0byBzaG93IHlvdSB0aGUgYWN0dWFsIGxhdyB0byB3aGljaCBJIHJlZmVyLCBwbGVhc2UKICAgICAgICAgICAgICAgICAgICB0YWtlIGFuZCByZWFkIHRoZSBsYXcgY29uc3RpdHV0aW5nIHRoZSBvcmlnaW5hbCBsZWdpc2xhdGl2ZSBjb21taXNzaW9uLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ovc614b29z4TOtc+Bzr/OuTwvZm9yZWlnbj4gaGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZW4gbWlzdW5kZXJzdG9vZCBhbmQgdmFyaW91c2x5IGVtZW5kZWQuIExhd3Mgb3VnaHQgdG8gYmUgZ2VuZXJhbCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcGVybWFuZW50LCBkZWNyZWVzIHBhcnRpY3VsYXIgYW5kIG9jY2FzaW9uYWw7IGJ1dCB0aGVyZSBoYXMgYmVlbiBzdWNoIGEgZ2x1dAogICAgICAgICAgICAgICAgICAgICAgICBvZiBoYXN0eSBsZWdpc2xhdGlvbiwgc2luY2UgdGhlIHJlc3RvcmF0aW9uIG9mIHRoZSBkZW1vY3JhY3kgaW4gNDAzLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIG1hbnkgZGVjcmVlcyBzdGlsbCBzdGFuZCB1bnJlcGVhbGVkIGFmdGVyIHRoZSBsYXdzIG9uIHdoaWNoIHRoZXkgd2VyZSBiYXNlZAogICAgICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gc3VwZXJzZWRlZC4gRm9yIHRoZSBsZWdpc2xhdGl2ZSBjb21taXNzaW9uIHNlZQogICAgICAgICAgICAgICAgICAgICAgICBJbnRyb2R1Y3Rpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHVuZGVyc3RhbmQsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCB0aGUgYmVhdXR5IG9mIFNvbG9uJ3MgZGlyZWN0aW9ucyBmb3IgbGVnaXNsYXRpbmcuIFRoZSBmaXJzdCBzdGFnZSBpcwogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgY291cnRzLCBiZWZvcmUgbWVuIHVuZGVyIG9hdGgsIHdoZXJlIGFsbCBvdGhlciByYXRpZmljYXRpb25zIGFyZSBtYWRlOwogICAgICAgICAgICAgICAgICAgIHRoZSBuZXh0IGlzIHRoZSByZXBlYWwgb2YgdGhlIGNvbnRyYWRpY3RvcnkgbGF3cywgc28gdGhhdCB0aGVyZSBtYXkgYmUgb25seSBvbmUKICAgICAgICAgICAgICAgICAgICBsYXcgZGVhbGluZyB3aXRoIGVhY2ggc3ViamVjdCwgYW5kIHRoYXQgdGhlIHBsYWluIGNpdGl6ZW4gbWF5IG5vdCBiZSBwdXp6bGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgc3VjaCBjb250cmFkaWN0aW9ucyBhbmQgYmUgYXQgYSBkaXNhZHZhbnRhZ2UgY29tcGFyZWQgd2l0aCB0aG9zZSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgYWNxdWFpbnRlZCB3aXRoIHRoZSB3aG9sZSBib2R5IG9mIGxhdywgYnV0IHRoYXQgYWxsIG1heSBoYXZlIHRoZSBzYW1lIG9yZGluYW5jZXMKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlbSwgc2ltcGxlIGFuZCBjbGVhciB0byByZWFkIGFuZCB1bmRlcnN0YW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgYmVmb3JlIHRoZXNlIHByb2NlZWRpbmdzLCBTb2xvbiBvcmRlcmVkIHRoYXQgdGhlIGxhd3MKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgZXhwb3NlZCBiZWZvcmUgdGhlIHN0YXR1ZXMgb2YgdGhlIGVwb255bW91cyBoZXJvZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHN0YXR1ZXMgb2YgdGhlIGhlcm9lcyB3aG8gZ2F2ZSB0aGVpciBuYW1lcyB0byB0aGUgdGVuIHRyaWJlcwogICAgICAgICAgICAgICAgICAgICAgICBzdG9vZCBpbiB0aGUgQWdvcmEgbmVhciB0aGUgY291bmNpbC1jaGFtYmVyLjwvbm90ZT4gYW5kIGhhbmRlZCBpbiB0byB0aGUKICAgICAgICAgICAgICAgICAgICB0b3duLWNsZXJrIHRvIHJlY2l0ZSB0aGVtIGF0IHRoZSBtZWV0aW5ncyBvZiB0aGUgQXNzZW1ibHksIHNvIHRoYXQgZWFjaCBvZiB5b3UKICAgICAgICAgICAgICAgICAgICBtYXkgaGVhciB0aGVtIG1vcmUgdGhhbiBvbmNlIGFuZCBkaWdlc3QgdGhlbSBhdCBsZWlzdXJlLCBhbmQgaWYgdGhleSBhcmUganVzdAogICAgICAgICAgICAgICAgICAgIGFuZCBleHBlZGllbnQsIG1heSBhZGQgdGhlbSB0byB0aGUgc3RhdHV0ZS1ib29rLiBOb3csIG51bWVyb3VzIGFzIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZW5hY3RtZW50cyBhcmUsIExlcHRpbmVzIHlvbmRlciBoYXMgb2JzZXJ2ZWQgbm90IG9uZSBvZiB0aGVtLCBmb3IsIGlmIGhlIGhhZCwgSQogICAgICAgICAgICAgICAgICAgIGRvIG5vdCB0aGluayB0aGF0IHlvdSB3b3VsZCBldmVyIGhhdmUgY29uc2VudGVkIHRvIHBhc3MgaGlzIGxhdy4gV2Ugb24gdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgaGFuZCwgQXRoZW5pYW5zLCBoYXZlIG9ic2VydmVkIHRoZW0gYWxsLCBhbmQgd2UgYXJlIHN1Ym1pdHRpbmcgYSBtdWNoIGJldHRlciBhbmQKICAgICAgICAgICAgICAgICAgICBtb3JlIGVxdWl0YWJsZSBsYXcgdGhhbiBoaXMuIFlvdSB3aWxsIHJlYWxpemUgdGhhdCB3aGVuIHlvdSBoZWFyIGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['20.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz5UYWtlIGFuZCByZWFkIGZpcnN0IG9mIGFsbCB0aGUgY2xhdXNlcyBvZiBoaXMgbGF3CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2UgaGF2ZSBpbmRpY3RlZCwgYW5kIG5leHQgdGhlIGNsYXVzZXMgd2UgcHJvcG9zZSB0byBzdWJzdGl0dXRlIGZvciB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICBSZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CeSB0aGlzLCBpZiBjb3JyZWN0LCBtdXN0IGJlIG1lYW50IHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlYW1ibGUgb2YgdGhlIGFtZW5kZWQgbGF3LCBzZXR0aW5nIGZvcnRoIHRoZSBvYmplY3Rpb25zIHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgbGF3IG9mIExlcHRpbmVzLiBUaGUgc2Vjb25kICJsYXciIHJlYWQgd291bGQgYmUgdGhlIGFtZW5kbWVudHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkOyBhbmQgYXQgdGhlIGVuZCBvZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIwLjk3IiB2YWxpZD0ieWVzIj5EZW0uIDIwLjk3PC9iaWJsPiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdob2xlIGxhdyBhcyBhbWVuZGVkIGlzIHJlYWQuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJ5IHRoaXMsIGlmIGNvcnJlY3QsIG11c3QgYmUgbWVhbnQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVhbWJsZSBvZiB0aGUgYW1lbmRlZCBsYXcsIHNldHRpbmcgZm9ydGggdGhlIG9iamVjdGlvbnMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZyBsYXcgb2YgTGVwdGluZXMuIFRoZSBzZWNvbmQgImxhdyIgcmVhZCB3b3VsZCBiZSB0aGUgYW1lbmRtZW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWQ7IGFuZCBhdCB0aGUgZW5kIG9mIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuOTciIHZhbGlkPSJ5ZXMiPkRlbS4gMjAuOTc8L2JpYmw+IHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGUgbGF3IGFzIGFtZW5kZWQgaXMgcmVhZC48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMC45NyIgdmFsaWQ9InllcyI+RGVtLiAyMC45NzwvYmlibD4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aG9sZSBsYXcgYXMgYW1lbmRlZCBpcyByZWFkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVzZSBhcmUgdGhlIHBhcnRzIG9mIHRoZSBsYXcgb2YKICAgICAgICAgICAgICAgICAgICBMZXB0aW5lcyB3aGljaCB3ZSBhcnJhaWduIGFzIHVuc2F0aXNmYWN0b3J5LiBOZXh0IGluIG9yZGVyIHJlYWQgb3VyIHByb3Bvc2VkCiAgICAgICAgICAgICAgICAgICAgYW1lbmRtZW50cy4gUHJheSBhdHRlbmQsIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgdG8gdGhlc2UgYXMgdGhleSBhcmUgcmVjaXRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcCB0aGVyZS4gVGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyBub3cgaW4gZm9yY2UgY29udGFpbiB0aGlzIHByb3Zpc2lvbuKAlGEgY2FwaXRhbCBvbmUsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIHVuYW1iaWd1b3Vz4oCUdGhhdCAiYWxsIHJld2FyZHMgZ3JhbnRlZCBieSB0aGUgcGVvcGxlIHNoYWxsIGJlIHZhbGlkLiIKICAgICAgICAgICAgICAgICAgICBFcXVpdGFibGUgdG9vLCBieSBhbGwgdGhlIHBvd2VycyEgU28gTGVwdGluZXMgc2hvdWxkIG5vdCBoYXZlIHByb3Bvc2VkIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBsYXcgdW50aWwgaGUgaGFkIGluZGljdGVkIGFuZCByZXBlYWxlZCB0aGlzLiBBcyBpdCBpcywgbmVnbGVjdGluZyBwcm9vZiBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gdmlvbGF0aW9uIG9mIHRoZSBsYXcsIGhlIG5ldmVydGhlbGVzcyBwcm9jZWVkZWQgdG8gbGVnaXNsYXRlLCBpbiBmYWNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZhY3QgdGhhdCBhbm90aGVyIGxhdyBwcm9jbGFpbXMgaGlzIGxhdyBpbmRpY3RhYmxlIGZvciB0aGlzIHZlcnkgb2ZmZW5jZSwKICAgICAgICAgICAgICAgICAgICBuYW1lbHksIGZvciBjb250cmFkaWN0aW5nIHByZXZpb3VzIGxlZ2lzbGF0aW9uLiBIZXJlIGlzIHRoZSB2ZXJ5IGxhdyBpbgogICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaXMgbm90IHRoZSBwcm92aXNpb24KICAgICAgICAgICAgICAgICAgICB0aGF0ICJhbGwgcmV3YXJkcyBncmFudGVkIGJ5IHRoZSBwZW9wbGUgc2hhbGwgYmUgdmFsaWQiIGNvbnRyYWRpY3RlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBjbGF1c2UgdGhhdCAibm8gb25lIHNoYWxsIGJlIGltbXVuZSwiIG5vIG9uZSwgdGhhdCBpcywgb2YgdGhvc2UgdG8gd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgaGFzIGdyYW50ZWQgaW1tdW5pdHk/IFRoYXQgaXMgcGxhaW4gZW5vdWdoLCBhdCBhbnkgcmF0ZS4gQnV0IGl0IGlzIG5vdCBzbwogICAgICAgICAgICAgICAgICAgIGluIHRoZSBhbHRlcm5hdGl2ZSBsYXcgd2hpY2ggbXkgZnJpZW5kPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFwc2VwaGlvbi48L25vdGU+IGhlcmUgcHJvcG9zZXMsIGFuZCB3aGljaCBjb25maXJtcyB3aGF0IHlvdSBoYXZlIGdyYW50ZWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIHByb3ZpZGVzIGEgZmFpciBncm91bmQgb2YgYWN0aW9uIGFnYWluc3QgdGhvc2Ugd2hvIGhhdmUgaW1wb3NlZCB1cG9uIHlvdSwgb3IKICAgICAgICAgICAgICAgICAgICBoYXZlIHN1YnNlcXVlbnRseSBpbmp1cmVkIHlvdSwgb3IgYXJlIGdlbmVyYWxseSB1bmRlc2VydmluZzsgc28gdGhhdCB5b3Ugd2lsbAogICAgICAgICAgICAgICAgICAgIHRodXMgcHJldmVudCBhbnlvbmUgeW91IHBsZWFzZSBmcm9tIHJldGFpbmluZyBoaXMgZ3JhbnQuIFJlYWQgdGhlIGxhdy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3LCBBdGhlbmlhbnMsIGFuZCB5b3UgdW5kZXJzdGFuZCB0aGF0IGl0IGVuYWJsZXMgdGhlIGRlc2VydmluZyB0byByZXRhaW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICByZXdhcmRzLCBhbmQgdGhvc2Ugd2hvIGFyZSBqdWRnZWQgb3RoZXJ3aXNlIHRvIGJlIGRlcHJpdmVkIG9mIGFueSBwcml2aWxlZ2UgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgdW5qdXN0bHkgc2VjdXJlZDsgZm9yIHRoZSBmdXR1cmUgZXZlcnl0aGluZyBpcyBsZWZ0IGluIHlvdXIgaGFuZHMsIGFzIGlzCiAgICAgICAgICAgICAgICAgICAgcmlnaHQsIHRvIGdyYW50IG9yIHRvIHdpdGhob2xkLiBOb3cgSSBkbyBub3QgdGhpbmsgdGhhdCBMZXB0aW5lcyB3aWxsIGRlbnkgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoaXMgbGF3IGlzIHNvdW5kIGFuZCBqdXN0LCBvciwgaWYgaGUgZG9lcywgdGhhdCBoZSB3aWxsIGJlIGFibGUgdG8gcHJvdmUgaXQuCiAgICAgICAgICAgICAgICAgICAgQnV0IHBlcmhhcHMgaGUgd2lsbCB0cnkgdG8gbGVhZCB5b3UgYXN0cmF5IGJ5IHJlcGVhdGluZyB3aGF0IGhlIHNhaWQgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGp1bmlvciBhcmNob25zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BdCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAzr3hvbHOus+BzrnPg865z4I8L2ZvcmVpZ24+IG9yIHByZWxpbWluYXJ5IHRyaWFsLjwvbm90ZT4gRm9yIGhlIGFsbGVnZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBwdWJsaWNhdGlvbiBvZiB0aGlzIGFtZW5kZWQgbGF3IHdhcyBhIG1lcmUgdHJpY2ssIGFuZCB0aGF0IHNob3VsZCBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgbGF3IGJlIHJlcGVhbGVkLCB0aGlzIG9uZSB3b3VsZCBuZXZlciBiZSBwYXNzZWQuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM694b2xzrrPgc65z4POuc+CPC9mb3JlaWduPiBvciBwcmVsaW1pbmFyeSB0cmlhbC48L3RyYW5zbGF0aW9uPg=="
translation['20.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRvIGF2b2lkIGRpc3B1dGUsIEkgd2lsbCBub3QgcHJlc3MgdGhlIHBvaW50IHRoYXQgdGhlIG9sZCBsYXcKICAgICAgICAgICAgICAgICAgICBvZiBTb2xvbiwgaW4gYWNjb3JkYW5jZSB3aXRoIHdoaWNoIHRoZSBqdW5pb3IgYXJjaG9ucyBoYXZlIG5vdGlmaWVkIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgYW1lbmRtZW50cyB0byB5b3UsIGNsZWFybHkgZW5qb2lucyB0aGF0IGlmIHRoZSBsYXcgb2YgTGVwdGluZXMgaXMgcmVwZWFsZWQgYnkKICAgICAgICAgICAgICAgICAgICB5b3VyIHZvdGUsIHRoZSBhbHRlcm5hdGl2ZSBsYXcgc2hhbGwgYmUgdmFsaWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldlIG1heSBjb25qZWN0dXJlIHRoYXQgdGhlIG9sZCBsYXcg77yIdGhhdCBpZiB0aGUgb3JpZ2luYWwgc3RhdHV0ZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgY29uZGVtbmVkLCB0aGUgYW1lbmRtZW50IGJhZWNhbWUgbGF3IGlwc28gZmFjdG/vvIkgaGFkIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHByYWN0aWNlIGJlZW4gc3VwZXJzZWRlZC48L25vdGU+IEkgd2lsbCBwYXNzIHRvIGFub3RoZXIgcG9pbnQuIExlcHRpbmVzLCBpbgogICAgICAgICAgICAgICAgICAgIHNheWluZyB0aGlzLCBvYnZpb3VzbHkgYWRtaXRzIHRoYXQgb3VyIGxhdyBpcyBiZXR0ZXIgYW5kIGZhaXJlciB0aGFuIGhpcyBvd24sCiAgICAgICAgICAgICAgICAgICAgYnV0IGJhc2VzIGhpcyBhcmd1bWVudCBvbiB0aGUgd2F5IGluIHdoaWNoIGl0IGlzIHRvIGJlIHBhc3NlZC4gPC90cmFuc2xhdGlvbj4="
translation['20.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpbiB0aGUgZmlyc3QgcGxhY2UsIHRoZXJlIGFyZSBtYW55IHdheXMgb3BlbiB0bwogICAgICAgICAgICAgICAgICAgIGhpbSwgaWYgaGUgd2lzaGVzLCBvZiBjb21wZWxsaW5nIHRoZSBhbWVuZGVyIHRvIGludHJvZHVjZSBoaXMgb3duIGxhdy4gSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbmV4dCBwbGFjZSwgUGhvcm1pbyBhbmQgbXlzZWxmIGFuZCBhbnlvbmUgZWxzZSBoZSBsaWtlcyB0byBuYW1lIGFyZSBwcmVwYXJlZCB0bwogICAgICAgICAgICAgICAgICAgIGd1YXJhbnRlZSB0aGF0IHdlIHdpbGwgaW50cm9kdWNlIGl0LiBZb3Uga25vdyB0aGVyZSBpcyBhIGxhdyBtYWtpbmcgZGVhdGggdGhlCiAgICAgICAgICAgICAgICAgICAgcGVuYWx0eSBmb3IgYW55b25lIHdobyBicmVha3MgaGlzIHByb21pc2UgdG8gdGhlIEFzc2VtYmx5IG9yIG9uZSBvZiB0aGUgQ291bmNpbHMKICAgICAgICAgICAgICAgICAgICBvciBsYXctY291cnRzLiBZb3UgaGF2ZSBvdXIgZ3VhcmFudGVlLCBvdXIgcHJvbWlzZS4gTGV0IHRoZSBhcmNob25zIHJlY29yZCBpdCwKICAgICAgICAgICAgICAgICAgICBhbmQgbGV0IHRoZSBtYXR0ZXIgcmVzdCBpbiB0aGVpciBoYW5kcy4gPC90cmFuc2xhdGlvbj4="
translation['20.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+TmVpdGhlciBkbyBhbnl0aGluZyB0aGF0IGlzIHVud29ydGh5IG9mIHRoaXMgY291cnQsIG5vciwgaWYgYSB3b3J0aGxlc3MgcGVyc29uCiAgICAgICAgICAgICAgICAgICAgaXMgZm91bmQgYW1vbmcgdGhvc2Ugd2hvIGVuam95IHRoZSBncmFudCwgbGV0IGhpbSBrZWVwIGl0OyBvbmx5IGxldCBlYWNoIGNhc2UgYmUKICAgICAgICAgICAgICAgICAgICBqdWRnZWQgb24gaXRzIG1lcml0cy4gQnV0IGlmIExlcHRpbmVzIHNoYWxsIHNheSB0aGF0IHRoYXQgaXMgYWxsIHRhbGsgYW5kCiAgICAgICAgICAgICAgICAgICAgaHVtYnVnLCB0aGlzIGF0IGFueSByYXRlIGlzIG5vdCBtZXJlIHRhbGs7IGxldCBoaW0gYnJpbmcgaW4gdGhlIGFtZW5kZWQgbGF3CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBhbmQgY2Vhc2UgdG8gc2F5IHRoYXQgd2Ugd2lsbCBub3QgZG8gc28uIEl0IGlzIHN1cmVseSBhIGdyZWF0ZXIgaG9ub3IgdG8KICAgICAgICAgICAgICAgICAgICBwcm9wb3NlIHRoZSBsYXcsIHN0YW1wZWQgd2l0aCB5b3VyIGFwcHJvdmFsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EZW1vc3RoZW5lcyBpcyBhIHRyaWZsZSBwcmVtYXR1cmUgaGVyZS48L25vdGU+IHRoYW4gdGhpcyBvZiBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgZGV2aXNpbmcuIDwvdHJhbnNsYXRpb24+"
translation['20.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0CiAgICAgICAgICAgICAgICAgICAgc2VlbXMgdG8gbWUsIEF0aGVuaWFucywgdGhhdCBMZXB0aW5lc+KAlGFuZCBwcmF5LCBiZSBub3QgYW5ncnksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkhlIGFkZHJlc3NlcyBoaW1zZWxmIGRpcmVjdGx5IHRvIExlcHRpbmVzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBmb3IgSSBhbSBub3QgZ29pbmcgdG8gc2F5IGFueXRoaW5nIG9mZmVuc2l2ZSBhYm91dCB5b3XigJRMZXB0aW5lcyBoYXMKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgbmV2ZXIgcmVhZCBTb2xvbidzIGxhd3Mgb3IgZWxzZSBkb2VzIG5vdCB1bmRlcnN0YW5kIHRoZW0uIEZvciBpZiBTb2xvbgogICAgICAgICAgICAgICAgICAgIG1hZGUgYSBsYXcgdGhhdCBldmVyeSBtYW4gY291bGQgZ3JhbnQgaGlzIHByb3BlcnR5IHRvIHdob21zb2V2ZXIgaGUgcGxlYXNlZCwgaW4KICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IG9mIGxlZ2l0aW1hdGUgb2Zmc3ByaW5nLCBub3Qgd2l0aCB0aGUgb2JqZWN0IG9mIGRlcHJpdmluZyB0aGUgbmV4dCBvZgogICAgICAgICAgICAgICAgICAgIGtpbiBvZiB0aGVpciByaWdodHMgb2YgY29uc2FuZ3Vpbml0eSwgYnV0IHRoYXQgYnkgbWFraW5nIHRoZSBwcml6ZSBvcGVuIHRvIGFsbAogICAgICAgICAgICAgICAgICAgIGhlIG1pZ2h0IGV4Y2l0ZSBhIHJpdmFscnkgaW4gZG9pbmcgZ29vZCBvbmUgdG8gYW5vdGhlcjsgPC90cmFuc2xhdGlvbj4="
translation['20.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGlmIHlvdSwgb24gdGhlIGNvbnRyYXJ5LCBoYXZlIHByb3Bvc2VkIGEgbGF3CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgcGVvcGxlIHNoYWxsIG5vdCBiZSBwZXJtaXR0ZWQgdG8gYmVzdG93IG9uIGFueSBtYW4gYW55IHBhcnQgb2Ygd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biwgaG93IGNhbiB5b3UgYmUgc2FpZCB0byBoYXZlIHJlYWQgb3IgdW5kZXJzdG9vZCB0aGUgbGF3cyBvZiBTb2xvbj8gWW91CiAgICAgICAgICAgICAgICAgICAgbWFrZSB0aGUgbmF0aW9uIGJhcnJlbiBvZiB3b3VsZC1iZSBwYXRyaW90cyBieSBwcm9jbGFpbWluZyB1bm1pc3Rha2FibHkgdGhhdAogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBiZW5lZml0IHVzIHNoYWxsIGdhaW4gbm90aGluZyBieSBpdC4gPC90cmFuc2xhdGlvbj4="
translation['20.104'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDQiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHRoZXJlIGlzIGFub3RoZXIgZXhjZWxsZW50IGxhdyBvZiBTb2xvbiwgZm9yYmlkZGluZyBhIG1hbiB0byBzcGVhayBpbGwKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZGVhZCwgZXZlbiBpZiBoZSBpcyBoaW1zZWxmIGRlZmFtZWQgYnkgdGhlIGRlYWQgbWFuJ3MgY2hpbGRyZW4uIFlvdSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCBzcGVhayBpbGwgb2Ygb3VyIGRlcGFydGVkIGJlbmVmYWN0b3JzLCBMZXB0aW5lczsgeW91IGRvIGlsbCB0byB0aGVtLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgeW91IGJsYW1lIG9uZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIG9mIHRoZWlyIGRlc2NlbmRhbnRzLCB3aG9zZQogICAgICAgICAgICAgICAgICAgICAgICBkZW1lcml0cyBhcmUgbm8ganVzdGlmaWNhdGlvbiBmb3IgY2FuY2VsbGluZyBhIHJld2FyZCBvbmNlIGdpdmVuLiBCdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEdyZWVrIGlzIG5vdCBjbGVhci48L25vdGU+IGFuZCBhc3NlcnQgdGhhdCBhbm90aGVyIGlzIHVud29ydGh5LCB0aG91Z2ggdGhlc2UKICAgICAgICAgICAgICAgICAgICBjaGFyZ2VzIGhhdmUgbm90aGluZyB0byBkbyB3aXRoIHRoZSBkZWFkIG1lbi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T3IKICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libHksIGlmIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9ps69PC9mb3JlaWduPiBpcyBtYXNjdWxpbmUsICJ0aG91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbiB0aHVzIGNoYXJnZWQgaGF2ZSBubyBjb25uZWN0aW9uIHdpdGggdGhlIGRlYWQuIjwvbm90ZT4gQXJlIHlvdSBub3QgdmVyeQogICAgICAgICAgICAgICAgICAgIGZhciBmcm9tIHRoZSBpbnRlbnRpb24gb2YgU29sb24/IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9ps69PC9mb3JlaWduPiBpcyBtYXNjdWxpbmUsICJ0aG91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbiB0aHVzIGNoYXJnZWQgaGF2ZSBubyBjb25uZWN0aW9uIHdpdGggdGhlIGRlYWQuIjwvdHJhbnNsYXRpb24+"
translation['20.105'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBJIGhhdmUgYmVlbiBxdWl0ZSBzZXJpb3VzbHkgaW5mb3JtZWQgdGhhdCB3aXRoCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkIHRvIHRoZSBhYnNvbHV0ZSBwcm9oaWJpdGlvbiBvZiBhbGwgcmV3YXJkcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMgaGVyZSBtaXNyZXByZXNlbnRzIHRoZSBsYXcsIHdoaWNoIG9ubHkgdG91Y2hlZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgaW1tdW5pdGllcy4gIlF1aXRlIHNlcmlvdXNseSIgaXMgdGFrZW4gYnkgc29tZSB3aXRoICJwcmVwYXJlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICB1c2UuIjwvbm90ZT4gd2hhdGV2ZXIgYSBtYW4ncyBzZXJ2aWNlcyBtYXkgYmUsIG91ciBvcHBvbmVudHMgYXJlIHByZXBhcmVkIHRvCiAgICAgICAgICAgICAgICAgICAgdXNlIHNvbWUgc3VjaCBhcmd1bWVudCBhcyB0aGlzLiBUaGUgTGFjZWRhZW1vbmlhbnMsIHdobyBhcmUgYSB3ZWxsLW9yZ2FuaXplZAogICAgICAgICAgICAgICAgICAgIHN0YXRlLCBhbmQgdGhlIFRoZWJhbnMgZ3JhbnQgbm8gc3VjaCByZXdhcmQgdG8gYW55IG9mIHRoZWlyIGNpdGl6ZW5zLCBhbmQgeWV0CiAgICAgICAgICAgICAgICAgICAgcG9zc2libHkgdGhlcmUgYXJlIHNvbWUgZ29vZCBtZW4gYW1vbmcgdGhlbS4gSW4gbXkgb3BpbmlvbiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYWxsIHN1Y2ggYXJndW1lbnRzIGFyZSBwcm92b2NhdGl2ZSwKICAgICAgICAgICAgICAgICAgICBhbmQgaW50ZW5kZWQgdG8gcGVyc3VhZGUgeW91IHRvIGFib2xpc2ggdGhlIGltbXVuaXRpZXMsIGJ1dCBqdXN0IHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbmx5IG5vdC4gRm9yIEkgYW0gcXVpdGUgYXdhcmUgdGhhdCB0aGUgVGhlYmFucyBhbmQgdGhlIExhY2VkYWVtb25pYW5zIGFuZAogICAgICAgICAgICAgICAgICAgIG91cnNlbHZlcyBkbyBub3Qgb2JzZXJ2ZSB0aGUgc2FtZSBsYXdzIGFuZCBjdXN0b21zLCBub3IgdGhlIHNhbWUgZm9ybSBvZgogICAgICAgICAgICAgICAgICAgIGdvdmVybm1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['20.106'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIHRoZSBmaXJzdCBwbGFjZSwgaWYgdGhpcwogICAgICAgICAgICAgICAgICAgIGlzIHRoZWlyIGFyZ3VtZW50LCB0aGV5IGFyZSBhYm91dCB0byBkbyBleGFjdGx5IHdoYXQgYSBtYW4gY2Fubm90IGRvIGF0CiAgICAgICAgICAgICAgICAgICAgU3BhcnRh4oCUcHJhaXNlIHRoZSBsYXdzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBvciBvZiBhbnkgb3RoZXIgc3RhdGU7IG5heSwgc28gZmFyIGZyb20gdGhhdCwgaGUgaXMKICAgICAgICAgICAgICAgICAgICBvYmxpZ2VkIHRvIHByYWlzZSwgYXMgd2VsbCBhcyBkbywgd2hhdGV2ZXIgYWNjb3JkcyB3aXRoIGhpcyBuYXRpdmUgY29uc3RpdHV0aW9uLgogICAgICAgICAgICAgICAgICAgIFRoZW4gYWdhaW4sIHRob3VnaCB0aGUgTGFjZWRhZW1vbmlhbnMgZG8gbm90IGhvbGQgd2l0aCB0aGVzZSBjdXN0b21zLCB5ZXQgdGhlcmUKICAgICAgICAgICAgICAgICAgICBhcmUgb3RoZXIgaG9ub3JzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiwgd2hpY2gKICAgICAgICAgICAgICAgICAgICBvdXIgY2l0aXplbnMgdG8gYSBtYW4gd291bGQgc2hyaW5rIGZyb20gaW50cm9kdWNpbmcgaGVyZS4gPC90cmFuc2xhdGlvbj4="
translation['20.107'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCwgdGhlbiwgYXJlIHRob3NlIGhvbm9ycz8gTm90IHRvIHRha2UgZWFjaAogICAgICAgICAgICAgICAgICAgIHNpbmdseSwgSSB3aWxsIGRlc2NyaWJlIG9uZSB3aGljaCBjb21wcmlzZXMgYWxsIHRoZSByZXN0LiBXaGVuZXZlciBhIG1hbiBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgZ29vZCBjb25kdWN0IGlzIGVsZWN0ZWQgdG8gdGhlIFNlbmF0ZSwgb3IgR2VydXNpYSwgYXMgdGhleSBjYWxsIGl0LCBoZSBpcwogICAgICAgICAgICAgICAgICAgIGFic29sdXRlIG1hc3RlciBvZiB0aGUgbWFzcyBvZiBjaXRpemVucy4gRm9yIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiB0aGUgcHJpemUgb2YgbWVyaXQgaXMgdG8gc2hhcmUgd2l0aCBvbmUncyBwZWVycyB0aGUKICAgICAgICAgICAgICAgICAgICBzdXByZW1hY3kgaW4gdGhlIFN0YXRlOyBidXQgd2l0aCB1cyB0aGUgcGVvcGxlIGlzIHN1cHJlbWUsIGFuZCBhbnkgb3RoZXIgZm9ybSBvZgogICAgICAgICAgICAgICAgICAgIHN1cHJlbWFjeSBpcyBmb3JiaWRkZW4gYnkgaW1wcmVjYXRpb25zPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBvcGVuaW5nIG9mIGV2ZXJ5IG1lZXRpbmcgb2YgdGhlIEFzc2VtYmx5IGFuZCBvZiB0aGUgQ291bmNpbCBhIGhlcmFsZCByZWNpdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIGEgY3Vyc2Ugb24gZW5lbWllcyBvZiB0aGUgU3RhdGUgYW5kIG9uIGV2aWwgY291bnNlbGxvcnM7IHNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjcwIiB2YWxpZD0ieWVzIj5EZW0uIDE5LjcwPC9iaWJsPi48L25vdGU+IGFuZCBsYXdzIGFuZCBvdGhlciBzYWZlZ3VhcmRzLAogICAgICAgICAgICAgICAgICAgIGJ1dCB3ZSBoYXZlIGNyb3ducyBvZiBob25vciBhbmQgaW1tdW5pdGllcyBhbmQgZnJlZSBtYWludGVuYW5jZSBhbmQgc2ltaWxhcgogICAgICAgICAgICAgICAgICAgIHJld2FyZHMsIHdoaWNoIGFueW9uZSBtYXkgd2luLCBpZiBoZSBpcyBhIGdvb2QgY2l0aXplbi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS43MCIgdmFsaWQ9InllcyI+RGVtLiAxOS43MDwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['20.108'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGJvdGggdGhlc2UgY3VzdG9tcyBhcmUgcmlnaHQgZW5vdWdoLCB0aGUgb25lIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiBhbmQgdGhlIG90aGVyIGhlcmUuIFdoeT8KICAgICAgICAgICAgICAgICAgICBCZWNhdXNlIGluIGFuIG9saWdhcmNoeSBoYXJtb255IGlzIGF0dGFpbmVkIGJ5IHRoZSBlcXVhbGl0eSBvZiB0aG9zZSB3aG8gY29udHJvbAogICAgICAgICAgICAgICAgICAgIHRoZSBTdGF0ZSwgYnV0IHRoZSBmcmVlZG9tIG9mIGEgZGVtb2NyYWN5IGlzIGd1YXJkZWQgYnkgdGhlIHJpdmFscnkgd2l0aCB3aGljaAogICAgICAgICAgICAgICAgICAgIGdvb2QgY2l0aXplbnMgY29tcGV0ZSBmb3IgdGhlIHJld2FyZHMgb2ZmZXJlZCBieSB0aGUgcGVvcGxlLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFnYWluLCB3aXRoIHJlZ2FyZCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBhYnNlbmNlIG9mIGhvbm9ycyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sIEkKICAgICAgICAgICAgICAgICAgICB0aGluayBJIGNhbiBleHByZXNzIHRoZSB0cnV0aCB0aHVzLiBUaGUgVGhlYmFucywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgcGx1bWUgdGhlbXNlbHZlcyBtb3JlIG9uIGJydXRhbGl0eQogICAgICAgICAgICAgICAgICAgIGFuZCBpbmlxdWl0eSB0aGFuIHlvdSBvbiBodW1hbml0eSBhbmQgbG92ZSBvZiBqdXN0aWNlLiBJZiBhIHByYXllciBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBhbGxvd2VkLCBtYXkgdGhleSBuZXZlciBjZWFzZSB0byB3aXRoaG9sZCBob25vciBhbmQgYWRtaXJhdGlvbiBmcm9tIHRob3NlIHdobyBkbwogICAgICAgICAgICAgICAgICAgIHRoZW0gc2VydmljZSwgb3IgdG8gZGVhbCB3aXRoIGtpbmRyZWQgc3RhdGVzIGluIHRoZSBzYW1lIHdheSDvvIhGb3IgeW91CiAgICAgICAgICAgICAgICAgICAgcmVtZW1iZXIgaG93IHRoZXkgdHJlYXRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTAzNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMDM0Ij5PcmNob21lbnVzPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5XaXBlZCBvdXQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZWJhbnMgaW4gMzY0LiBUaGUgbWVuIHdlcmUgbWFzc2FjcmVkLCBhbmQgdGhlIHdvbWVuIGFuZCBjaGlsZHJlbiBzb2xkIGludG8KICAgICAgICAgICAgICAgICAgICAgICAgc2xhdmVyeS48L25vdGU+77yJIEFuZCBuZXZlciBtYXkgeW91IGNlYXNlIHRvIGRvIHRoZSBvcHBvc2l0ZSwKICAgICAgICAgICAgICAgICAgICBob25vcmluZyB5b3VyIGJlbmVmYWN0b3JzIGFuZCB3aW5uaW5nIHlvdXIgcmlnaHRzIGZyb20geW91ciBmZWxsb3ctY2l0aXplbnMgYnkKICAgICAgICAgICAgICAgICAgICBkZWJhdGUgYW5kIGluIGhhcm1vbnkgd2l0aCB0aGUgbGF3cyEgPC90cmFuc2xhdGlvbj4="
translation['20.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCwgSSB0aGluayB0aGF0IHRoZW4gb25seSBvdWdodCB5b3UgdG8gcHJhaXNlIHRoZSBoYWJpdHMgYW5kIGNoYXJhY3RlciBvZgogICAgICAgICAgICAgICAgICAgIG90aGVyIG5hdGlvbnMgYW5kIGRlY3J5IHlvdXIgb3duLCB3aGVuIGl0IGlzIHBvc3NpYmxlIHRvIHByb3ZlIHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBtb3JlIHByb3NwZXJvdXMgdGhhbiB5b3UuIEFzIGxvbmcgYXMgeW91IO+8iHRoYW5rIEhlYXZlbiHvvIkgYXJlCiAgICAgICAgICAgICAgICAgICAgbW9yZSBwcm9zcGVyb3VzIHRoYW4gdGhleSwgaW4gcHVibGljIHBvbGljeSwgaW4gaW50ZXJuYWwgaGFybW9ueSwgYW5kIGluIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgb3RoZXIgd2F5LCB3aHkgc2hvdWxkIHlvdSBiZWxpdHRsZSB5b3VyIG5hdGlvbmFsIGluc3RpdHV0aW9ucyBhbmQgaW1pdGF0ZQogICAgICAgICAgICAgICAgICAgIHRoZWlycz8gRXZlbiBpZiB0aGVpcnMgY291bGQgYmUgcHJvdmVkIHN1cGVyaW9yIGluIHRoZW9yeSwgeWV0IHRoZSBnb29kIGZvcnR1bmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBoYXZlIGVuam95ZWQgdW5kZXIgeW91ciBvd24gaW5zdGl0dXRpb25zIG1ha2VzIGl0IHdvcnRoIHlvdXIgd2hpbGUgdG8KICAgICAgICAgICAgICAgICAgICByZXRhaW4gdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['20.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcyBhbGwgdGhpcywgaWYgSSBtdXN0IHNheQogICAgICAgICAgICAgICAgICAgIHdoYXQgSSB0aGluayBpcyByaWdodCwgSSB3b3VsZCBwdXQgaXQgaW4gdGhpcyB3YXkuIEl0IGlzIG5vdCByaWdodCwgQXRoZW5pYW5zLAogICAgICAgICAgICAgICAgICAgIHRvIGNpdGUgdGhlIGxhd3Mgb2YgdGhlIExhY2VkYWVtb25pYW5zIG9yIG9mIHRoZSBUaGViYW5zIGluIG9yZGVyIHRvIHVuZGVybWluZQogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzIGVzdGFibGlzaGVkIGhlcmU7IGl0IGlzIG5vdCByaWdodCB0aGF0IHlvdSBzaG91bGQgd2FudCB0byBwdXQgYSBtYW4gdG8KICAgICAgICAgICAgICAgICAgICBkZWF0aCBmb3IgdHJhbnNwbGFudGluZyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBhbnkgb2YgdGhlIGluc3RpdHV0aW9ucyB0aGF0IGhhdmUgbWFkZSB0aG9zZSBuYXRpb25zIGdyZWF0LCBhbmQgeWV0IGxlbmQgYQogICAgICAgICAgICAgICAgICAgIHdpbGxpbmcgZWFyIHRvIHRob3NlIHdobyBwcm9wb3NlIHRvIGRlc3Ryb3kgdGhlIGluc3RpdHV0aW9ucyB1bmRlciB3aGljaCBvdXIKICAgICAgICAgICAgICAgICAgICBkZW1vY3JhY3kgaGFzIGZsb3VyaXNoZWQuIDwvdHJhbnNsYXRpb24+"
translation['20.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZW4gdGhleSBoYXZlIGFub3RoZXIgYXJndW1lbnQgcmVhZHk7IHRoYXQgZXZlbiBhdAogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaW4gZm9ybWVyIGdlbmVyYXRpb25zIG1lbgogICAgICAgICAgICAgICAgICAgIHdobyBoYWQgcmVuZGVyZWQgZ3JlYXQgc2VydmljZXMgbWV0IHdpdGggbm8gcmVjb2duaXRpb24gb2YgdGhpcyBzb3J0LCBidXQgd2VyZQogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgd2l0aCBhbiBpbnNjcmlwdGlvbiBpbiB0aGUgSGVybWVzLVBvcnRpY28uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluIHRoZSBBZ29yYS4gVGhlIGluc2NyaXB0aW9uIO+8iHF1b3RlZCBieSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjgzIiB2YWxpZD0ieWVzIj5BZXNjaGluLiAzLjgzPC9iaWJsPu+8iSB3YXMgaW4gaG9ub3Igb2YgQ2ltb24ncwogICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWlvbiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWlvbiI+RWlvbjwvcGxhY2VOYW1lPiBvbiB0aGUgU3RyeW1vbiBpbgogICAgICAgICAgICAgICAgICAgICAgICA0NzYuPC9ub3RlPiBQZXJoYXBzIGluZGVlZCB0aGUgaW5zY3JpcHRpb24gd2lsbCBiZSByZWFkIHRvIHlvdS4gQnV0IGluIG15CiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiwgQXRoZW5pYW5zLCB0aGlzIGFyZ3VtZW50IGlzIGluIG1hbnkgd2F5cyBwcmVqdWRpY2lhbCB0byB0aGUgU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgYmVzaWRlcyBiZWluZyB1bmp1c3QuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuODMiIHZhbGlkPSJ5ZXMiPkFlc2NoaW4uIDMuODM8L2JpYmw+77yJIHdhcyBpbiBob25vciBvZiBDaW1vbidzCiAgICAgICAgICAgICAgICAgICAgICAgIGNhcHR1cmUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFaW9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFaW9uIj5FaW9uPC9wbGFjZU5hbWU+IG9uIHRoZSBTdHJ5bW9uIGluCiAgICAgICAgICAgICAgICAgICAgICAgIDQ3Ni48L3RyYW5zbGF0aW9uPg=="
translation['20.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIGFueW9uZSBzYXlzIHRoYXQKICAgICAgICAgICAgICAgICAgICBldmVuIHRoZXNlIG1lbiBkZXNlcnZlZCBubyBob25vciwgbGV0IGhpbSBzYXkgd2hvIGRvZXMgZGVzZXJ2ZSBpdCwgaWYgdGhlcmUgaXMKICAgICAgICAgICAgICAgICAgICBubyBvbmUgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGVtLiBJZiBoZSBzaGFsbCBzYXkgIm5vIG9uZSwiIEkgc2hvdWxkIGJlIHZlcnkKICAgICAgICAgICAgICAgICAgICBzb3JyeSBmb3Igb3VyIGNpdHksIGlmIG5vIG9uZSBpbiB0aGUgY291cnNlIG9mIGl0cyBoaXN0b3J5IGhhcyBwcm92ZWQgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkLiBBZ2FpbiwgaWYgd2hpbGUgYWRtaXR0aW5nIHRoZWlyIG1lcml0IGhlIHBvaW50cyBvdXQgdGhhdCB0aGV5IGdvdAogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgYnkgaXQsIGFzc3VyZWRseSBoZSBhY2N1c2VzIHRoZSBjaXR5IG9mIGluZ3JhdGl0dWRlLiBCdXQgdGhhdCBpcyBub3QgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggb3IgYW55dGhpbmcgbGlrZSBpdDsgYnV0IHdoZW5ldmVyIGEgbWFuIG1hbGljaW91c2x5IGdpdmVzIGEgd3JvbmcgdHdpc3QgdG8KICAgICAgICAgICAgICAgICAgICBoaXMgYXJndW1lbnRzLCBJIHRoaW5rIHRoZXkgbXVzdCBhcHBlYXIgaGF0ZWZ1bC4gPC90cmFuc2xhdGlvbj4="
translation['20.114'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTQiIHVuaXQ9InNlY3Rpb24iIC8+SSwgaG93ZXZlciwgd2lsbCBleHBsYWluIHRoZSBjYXNlIHRvIHlvdSwgYXMgdHJ1dGggYW5kIGp1c3RpY2UKICAgICAgICAgICAgICAgICAgICBkZW1hbmQuIFRoZXJlIHdlcmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgcGxlbnR5IG9mIHplYWxvdXMgY2l0aXplbnMgaW4gZm9ybWVyIGdlbmVyYXRpb25zLCBhbmQgb3VyIGNpdHkgZXZlbiB0aGVuIGhvbm9yZWQKICAgICAgICAgICAgICAgICAgICBpdHMgZ29vZCBtZW47IG9ubHkgaG9ub3JzIHRoZW4sIGxpa2UgZXZlcnl0aGluZyBlbHNlLCByZWZsZWN0ZWQgdGhlIHRlbXBlciBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB0aW1lcywganVzdCBhcyB0aGV5IG5vdyByZWZsZWN0IHRoZSB0ZW1wZXIgb2YgdG9kYXkuIEFuZCB3aHkgZG8gSSBzYXkgdGhpcz8KICAgICAgICAgICAgICAgICAgICBCZWNhdXNlIGZvciBteXNlbGYgSSBzaG91bGQgYmUgaW5jbGluZWQgdG8gYXNzZXJ0IHRoYXQgdGhleSBkaWQgZ2V0IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUgZXZlcnl0aGluZyB0aGF0IHRoZXkgd2lzaGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.115'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTUiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCBpcyBteQogICAgICAgICAgICAgICAgICAgIGV2aWRlbmNlPyBMeXNpbWFjaHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Tb24gb2YgQXJpc3RpZGVzIHRoZSBqdXN0LAogICAgICAgICAgICAgICAgICAgICAgICBwZW5zaW9uZWQgZm9yIGhpcyBmYXRoZXIncyBtZXJpdHMuPC9ub3RlPiBvbmx5IG9uZSBvZiB0aGUgd29ydGhpZXMgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIGRheSwgcmVjZWl2ZWQgYSBodW5kcmVkIHJvb2RzIG9mIG9yY2hhcmQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+IGFuZCBhIGh1bmRyZWQgb2YgYXJhYmxlIGxhbmQsIGJlc2lkZXMgYSBodW5kcmVkIG1pbmFzIG9mCiAgICAgICAgICAgICAgICAgICAgc2lsdmVyIGFuZCBhIHBlbnNpb24gb2YgZm91ciBkcmFjaG1hcyBhIGRheS4gQW5kIHRoZSBkZWNyZWUgaW4gd2hpY2ggdGhlc2UgZ2lmdHMKICAgICAgICAgICAgICAgICAgICBhcmUgcmVjb3JkZWQgc3RhbmRzIGluIHRoZSBuYW1lIG9mIEFsY2liaWFkZXMuIEZvciB0aGVuIG91ciBjaXR5IHdhcyByaWNoIGluCiAgICAgICAgICAgICAgICAgICAgbGFuZHMgYW5kIG1vbmV5LCB0aG91Z2ggbm934oCUc2hlIHdpbGwgYmUgcmljaCBzb21lIGRheTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIGV1cGhlbWlzbSBmb3IgInNoZSBpcyBwb29yLiI8L25vdGU+OyBmb3IgSSBtdXN0CiAgICAgICAgICAgICAgICAgICAgcHV0IGl0IGluIHRoYXQgd2F5IHRvIGF2b2lkIGFueXRoaW5nIGxpa2Ugb2Jsb3F1eS4gWWV0IHRvZGF5IHdobywgdGhpbmsgeW91LAogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBwcmVmZXIgYSB0aGlyZCBvZiB0aGF0IHJld2FyZCB0byBtZXJlIGltbXVuaXR5PyBUbyBwcm92ZSB0aGUgdHJ1dGggb2YKICAgICAgICAgICAgICAgICAgICBteSB3b3JkcywgcGxlYXNlIHRha2UgdGhlIGRlY3JlZS4gPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.116'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyB0aGlzCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlLCBBdGhlbmlhbnMsIHByb3ZlcyB0aGF0IHlvdXIgYW5jZXN0b3JzLCBsaWtlIHlvdXJzZWx2ZXMsIHdlcmUgYWNjdXN0b21lZAogICAgICAgICAgICAgICAgICAgIHRvIGhvbm9yIGdvb2QgbWVuOyBpZiB0aGV5IHVzZWQgZGlmZmVyZW50IG1ldGhvZHMgZnJvbSBvdXJzIHRvZGF5LCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciBtYXR0ZXIuIFNvIGV2ZW4gaWYgd2Ugc2hvdWxkIGFkbWl0IHRoYXQgbmVpdGhlciBMeXNpbWFjaHVzIG5vciBhbnlvbmUKICAgICAgICAgICAgICAgICAgICBlbHNlIGdhaW5lZCBhbnl0aGluZyBmcm9tIG91ciBhbmNlc3RvcnMsIGRvZXMgdGhhdCBtYWtlIGl0IGFueSBmYWlyZXIgaW4gdXMgdG8KICAgICAgICAgICAgICAgICAgICByb2IgdGhlIG1lbiB3aG9tIHdlIGhhdmUganVzdCByZXdhcmRlZD8gPC90cmFuc2xhdGlvbj4="
translation['20.117'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm90aGluZyBvdXRyYWdlb3VzIGluIHdpdGhob2xkaW5nIHdoYXQgb25lIG5ldmVyIGRyZWFtZWQgb2YgZ2l2aW5nOyBidXQKICAgICAgICAgICAgICAgICAgICBpdCBpcyBhbiBvdXRyYWdlIHRvIGdpdmUgYW5kIGFmdGVyd2FyZHMgdGFrZSBiYWNrIG9uZSdzIGdpZnQsIHdpdGggbm8gZmF1bHQKICAgICAgICAgICAgICAgICAgICBhbGxlZ2VkLiBQcm92ZSB0byBtZSB0aGF0IG91ciBhbmNlc3RvcnMgZXZlciB0b29rIGJhY2sgdGhlIGdpZnRzIHRoZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVzdG93ZWQsIGFuZCB5b3UgdG9vIGhhdmUgbXkgbGVhdmUgdG8gZG8gdGhlIHNhbWUsIHRob3VnaCB0aGUgZGlzZ3JhY2UgcmVtYWlucwogICAgICAgICAgICAgICAgICAgIG5vbmUgdGhlIGxlc3M7IGJ1dCBpZiBubyBvbmUgY2FuIGNpdGUgYW4gaW5zdGFuY2UgZnJvbSB0aGUgd2hvbGUgY291cnNlIG9mIG91cgogICAgICAgICAgICAgICAgICAgIGhpc3RvcnksIHdoeSBpcyBzdWNoIGEgcHJlY2VkZW50IHRvIGJlIHNldCBpbiBvdXIgZ2VuZXJhdGlvbj8gPC90cmFuc2xhdGlvbj4="
translation['20.118'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFnYWluLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5b3UgbXVzdCBhbHNvIGNvbnNpZGVyCiAgICAgICAgICAgICAgICAgICAgd2VsbCBhbmQgY2FyZWZ1bGx5IHRoZSBmYWN0IHRoYXQgeW91IGhhdmUgY29tZSBpbnRvIGNvdXJ0IHRvZGF5LCBzd29ybiB0byBnaXZlCiAgICAgICAgICAgICAgICAgICAgeW91ciB2ZXJkaWN0IGFjY29yZGluZyB0byB0aGUgbGF3cywgbm90IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3BhcnRhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTcGFydGEiPlNwYXJ0YTwvcGxhY2VOYW1lPiBvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRoZWJlcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsVGhlYmVzIj5UaGViZXM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgbm9yIHRob3NlIG9mIG91ciBlYXJsaWVzdCBhbmNlc3RvcnMsIGJ1dCB0aG9zZSB1bmRlciB3aGljaCBpbW11bml0aWVzIHdlcmUKICAgICAgICAgICAgICAgICAgICBncmFudGVkIHRvIHRoZSBtZW4gd2hvbSBMZXB0aW5lcyBpcyBub3cgdHJ5aW5nIHRvIHJvYiBieSBoaXMgbGF3OyBhbmQgd2hlcmUKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgbm8gc3RhdHV0ZXMgdG8gZ3VpZGUgeW91LCB5b3UgYXJlIHN3b3JuIHRvIGRlY2lkZSBhY2NvcmRpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYmVzdCBvZiB5b3VyIGp1ZGdlbWVudC4gU28gZmFyLCBzbyBnb29kLiBUaGVuIHlvdSBtdXN0IGFwcGx5IHRoZXNlIHByaW5jaXBsZXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbGF3IGFzIGEgd2hvbGUuIDwvdHJhbnNsYXRpb24+"
translation['20.119'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTkiIHVuaXQ9InNlY3Rpb24iIC8+SXMgaXQgcmlnaHQsIEF0aGVuaWFucywKICAgICAgICAgICAgICAgICAgICB0byBob25vciB5b3VyIGJlbmVmYWN0b3JzPyBJdCBpcy4gV2VsbCB0aGVuLCBpcyBpdCByaWdodCB0byBhbGxvdyBhIG1hbiB0byBrZWVwCiAgICAgICAgICAgICAgICAgICAgd2hhdCBoYXMgb25jZSBiZWVuIGdpdmVuIGhpbT8gSXQgaXMuIFRoZW4sIHRvIG9ic2VydmUgeW91ciBvYXRocywgYWN0IG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBwcmluY2lwbGUgeW91cnNlbHZlczsgcmVzZW50IHRoZSBpbXB1dGF0aW9uIHRoYXQgeW91ciBhbmNlc3RvcnMgYWN0ZWQgb3RoZXJ3aXNlOwogICAgICAgICAgICAgICAgICAgIGFuZCBhcyBmb3IgdGhvc2Ugd2hvIGNpdGUgc3VjaCBpbnN0YW5jZXMsIGFsbGVnaW5nIHRoYXQgeW91ciBhbmNlc3RvcnMgcmV3YXJkZWQKICAgICAgICAgICAgICAgICAgICBubyBtYW4gZm9yIGdyZWF0IGJlbmVmaXRzIHJlY2VpdmVkLCBsb29rIHVwb24gdGhlbSBhcyBib3RoIGtuYXZlcyBhbmQKICAgICAgICAgICAgICAgICAgICBkdWxsYXJkc+KAlGtuYXZlcywgYmVjYXVzZSB0aGV5IGZhbHNlbHkgY2hhcmdlIHlvdXIgYW5jZXN0b3JzIHdpdGgKICAgICAgICAgICAgICAgICAgICBpbmdyYXRpdHVkZTsgZm9vbHMsIGJlY2F1c2UgdGhleSBkbyBub3Qgc2VlIHRoYXQgd2VyZSB0aGUgY2hhcmdlIHByb3ZlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBoaWx0LCBpdCB3b3VsZCBiZXR0ZXIgYmVjb21lIHRoZW0gdG8gZGVueSB0aGFuIHRvIHJlcGVhdCBpdC4gPC90cmFuc2xhdGlvbj4="
translation['20.120'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBJIGV4cGVjdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciBhcmd1bWVudCBvZiBMZXB0aW5lcyB3aWxsIGJlIHRoYXQgaGlzIGxhdyBkb2VzIG5vdCBkZXByaXZlIHRoZQogICAgICAgICAgICAgICAgICAgIHJlY2lwaWVudHMgb2YgdGhlaXIgaW5zY3JpcHRpb25zIGFuZCB0aGVpciBmcmVlIG1haW50ZW5hbmNlLCBub3IgdGhlIFN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0IHRvIGNvbmZlciBob25vciBvbiB0aG9zZSB3aG8gZGVzZXJ2ZSBpdCwgYnV0IHRoYXQgaXQgd2lsbCBzdGlsbCBiZSBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgcG93ZXIgdG8gc2V0IHVwIHN0YXR1ZXMgYW5kIGdyYW50IG1haW50ZW5hbmNlIGFuZCBhbnl0aGluZyBlbHNlIHlvdSB3aXNoLAogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCB0aGlzIG9uZSBwcml2aWxlZ2UuIEJ1dCB3aXRoIHJlc3BlY3QgdG8gdGhlIHBvd2VycyB0aGF0IGhlIHdpbGwgcHJldGVuZAogICAgICAgICAgICAgICAgICAgIHRvIGxlYXZlIHRvIHRoZSBTdGF0ZSwgSSBoYXZlIGp1c3QgdGhpcyB0byBzYXkuIEFzIHNvb24gYXMgeW91IHRha2UgYXdheSBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcHJpdmlsZWdlcyB5b3UgaGF2ZSBhbHJlYWR5IGdyYW50ZWQsIHlvdSB3aWxsIHNoYWtlIHRoZSBjcmVkaXQgb2YgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3QuIEZvciBob3cgY2FuIHRoZSBncmFudCBvZiBhIHN0YXR1ZSBvciBvZiBmcmVlIG1haW50ZW5hbmNlIGJlIG1vcmUKICAgICAgICAgICAgICAgICAgICBpbmRlZmVhc2libGUgdGhhbiB0aGF0IG9mIGFuIGltbXVuaXR5LCB3aGljaCB5b3Ugd2lsbCBzZWVtIHRvIGhhdmUgZmlyc3QgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBhbmQgdGhlbiB0YWtlbiBhd2F5PyA8L3RyYW5zbGF0aW9uPg=="
translation['20.121'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlciwgZXZlbiBpZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgZGlmZmljdWx0eSB3ZXJlIG5vdCBsaWtlbHkgdG8gYXJpc2UsIEkgY2Fubm90IHRoaW5rIHRoYXQgaXQgaXMgd2VsbCB0byBicmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBTdGF0ZSBpbnRvIHRoaXMgZGlsZW1tYSwgdGhhdCBpdCBtdXN0IGVpdGhlciBwdXQgYWxsIGNpdGl6ZW5zIG9uIGFuIGVxdWFsaXR5CiAgICAgICAgICAgICAgICAgICAgd2l0aCBpdHMgZ3JlYXRlc3QgYmVuZWZhY3RvcnMsIG9yIHRvIGF2b2lkIHRoaXMgbXVzdCB0cmVhdCBzb21lIHdpdGgKICAgICAgICAgICAgICAgICAgICBpbmdyYXRpdHVkZS4gTm93IGFzIGZvciBncmVhdCBiZW5lZmFjdGlvbnMsIGl0IGlzIG5vdCB3ZWxsIHRoYXQgeW91IHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgbWFueSBvcHBvcnR1bml0aWVzIG9mIHJlY2VpdmluZyB0aGVtLCBub3IgaXMgaXQgcGVyaGFwcyBlYXN5IGZvciBhbiBpbmRpdmlkdWFsCiAgICAgICAgICAgICAgICAgICAgdG8gY29uZmVyIHRoZW07IDwvdHJhbnNsYXRpb24+"
translation['20.122'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IHRoZSBodW1ibGVyIGR1dGllcyB0bwogICAgICAgICAgICAgICAgICAgIHdoaWNoIG9uZSBjYW4gcmlzZSBpbiB0aW1lIG9mIHBlYWNlIGFuZCBpbiB0aGUgY2l2aWwgc3BoZXJl4oCUbG95YWx0eSwKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlLCB6ZWFsIGFuZCB0aGUgbGlrZeKAlGl0IGlzLCBpbiBteSBvcGluaW9uLCBib3RoIHdlbGwgYW5kCiAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5IHRoYXQgdGhleSBzaG91bGQgYmUgcmV3YXJkZWQuIEdyYW50cyBvdWdodCwgdGhlcmVmb3JlLCB0byBiZSBzbwogICAgICAgICAgICAgICAgICAgIGFwcG9ydGlvbmVkIHRoYXQgZWFjaCBtYW4gbWF5IHJlY2VpdmUgZnJvbSB0aGUgcGVvcGxlIHRoZSBleGFjdCByZXdhcmQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.123'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZW4gYWdhaW4sIHdpdGggcmVnYXJkIHRvIHdoYXQKICAgICAgICAgICAgICAgICAgICBoZSB3aWxsIHNheSBhYm91dCBsZWF2aW5nIHRoZWlyIGhvbm9ycyB0byB0aG9zZSB3aG8gaGF2ZSByZWNlaXZlZCB0aGVtLCBzb21lCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSBhIHBlcmZlY3RseSBwbGFpbiBhbmQgc3RyYWlnaHRmb3J3YXJkIGFuc3dlciwgd2hlbiB0aGV5IGNsYWltIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgdG8gYWxsIHRoZWlyIHJld2FyZHMsIGJlY2F1c2UgdGhleSB3ZXJlIGdyYW50ZWQgZm9yIHRoZSBzYW1lIHNlcnZpY2UsIGJ1dAogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlcnMgd2lsbCByZXBseSB0aGF0IHRoZSBtYW4gd2hvIHNheXMgdGhhdCBoZSBsZWF2ZXMgdGhlbSBhbnl0aGluZyBpcwogICAgICAgICAgICAgICAgICAgIG1vY2tpbmcgdGhlbS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+IlNvbWUiIGhhdmUgcmVjZWl2ZWQgb3RoZXIgcmV3YXJkcwogICAgICAgICAgICAgICAgICAgICAgICB0b2dldGhlciB3aXRoIGltbXVuaXR5OyAidGhlIG90aGVycyIgaW1tdW5pdHkgYWxvbmUuPC9ub3RlPiBGb3IgaWYgYSBtYW4gaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiB0aG91Z2h0IHRvIGRlc2VydmUgaW1tdW5pdHkgYW5kIGhhcyByZWNlaXZlZCB0aGF0IGZyb20geW91IGFzIGhpcyBzb2xlCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkLCBiZSBoZSBmb3JlaWduZXIgb3IgY2l0aXplbiwgd2hhdCByZXdhcmQgaGFzIGhlIGxlZnQsIExlcHRpbmVzLCBpZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXMgdGFrZW4gZnJvbSBoaW0/IE5vbmUgd2hhdGV2ZXIhIFRoZW4geW91IGhhdmUgbm8gcmlnaHQgdG8gcm9iIHNvbWUgYmVjYXVzZSB5b3UKICAgICAgICAgICAgICAgICAgICBhcnJhaWduIHRoZSB3b3J0aGxlc3NuZXNzIG9mIHRoZSBvdGhlcnMsIG9yIHRvIHJvYiBvbmUgY2xhc3Mgb2YgdGhlaXIgc29sZQogICAgICAgICAgICAgICAgICAgIHJld2FyZCBiZWNhdXNlIHlvdSBzYXkgdGhhdCB5b3UgYXJlIGdvaW5nIHRvIGxlYXZlIHRoZSBvdGhlciBjbGFzcyBzb21ldGhpbmcuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.124'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjQiIHVuaXQ9InNlY3Rpb24iIC8+VG8gcHV0IGl0IHBsYWlubHksIHRoZSBkYW5nZXIgaXMgbm90IHRoYXQKICAgICAgICAgICAgICAgICAgICBvZiBkb2luZyBhIGdyZWF0ZXIgb3IgbGVzcyBpbmp1c3RpY2UgdG8gb25lIG1lbWJlciBvZiB0aGUgd2hvbGUgYm9keSwgYnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICBvZiByZW5kZXJpbmcgcHJlY2FyaW91cyB0aGUgaG9ub3JzIHdpdGggd2hpY2ggd2UgcmV3YXJkIG1lbidzIHNlcnZpY2VzLCBub3IgaXMKICAgICAgICAgICAgICAgICAgICBpbW11bml0eSB0aGUgbWFpbiB0b3BpYyBvZiBteSBzcGVlY2gsIGJ1dCB0aGUgZXZpbCBwcmVjZWRlbnQgd2hpY2ggdGhpcyBsYXcgd2lsbAogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaCwgc28gdGhhdCB0aGVyZSB3aWxsIGJlIG5vIHNlY3VyaXR5IGZvciB0aGUgbmF0aW9uJ3MgZ2lmdHMuIDwvdHJhbnNsYXRpb24+"
translation['20.125'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFnYWluLCB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHVuc2NydXB1bG91cyBhcmd1bWVudCB0aGF0IHRoZXkgaGF2ZSBmcmFtZWQsIGFzIHRoZXkgdGhpbmssIHRvIHBlcnN1YWRlIHlvdSB0bwogICAgICAgICAgICAgICAgICAgIHdpdGhkcmF3IHRoZSBpbW11bml0aWVzLCBpcyBvbmUgd2hpY2ggSSBoYWQgYmV0dGVyIGV4cGxhaW4gZm9yIGZlYXIgeW91IHNob3VsZAogICAgICAgICAgICAgICAgICAgIGJlIHRoZWlyIGlubm9jZW50IGR1cGVzLiBUaGV5IGFyZSBnb2luZyB0byBjbGFpbSB0aGF0IGFsbCBzdWNoIHBheW1lbnRzIGFyZQogICAgICAgICAgICAgICAgICAgIHJlbGlnaW91cyBkdWVzLCBhbmQgdGhhdCBvZiBjb3Vyc2UgaXQgaXMgbW9uc3Ryb3VzIHRoYXQgYW55b25lIHNob3VsZCBiZSBleGVtcHQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBkdWVzIG9mIHJlbGlnaW9uLiBGb3IgbXkgcGFydCwgSSBzZWUgbm8gdW5mYWlybmVzcyBpbiBzdWNoIGV4ZW1wdGlvbiwKICAgICAgICAgICAgICAgICAgICBpZiB0aGUgcGVvcGxlIGhhdmUgYmVzdG93ZWQgaXQ7IHRoZSByZWFsbHkgbW9uc3Ryb3VzIHRoaW5nIGlzIHRoZSBjb3Vyc2Ugd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGV5IHByb3Bvc2UsIGlmIHRoYXQgaXMgdG8gYmUgdGhlaXIgYXJndW1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['20.126'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjYiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIGJ5IGFwcGVhbGluZyB0byB0aGUgbmFtZSBvZiB0aGUgZ29kcyB0aGV5IHRyeSB0byBqdXN0aWZ5IGEgcm9iYmVyeQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZXkgY2Fubm90IGp1c3RpZnkgb3RoZXJ3aXNlLCB3aWxsIG5vdCB0aGF0IGJlIG1vc3QgaW1waW91cyBhbmQgbW9uc3Ryb3VzCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdD8gSW4gbXkgb3Bpbmlvbiwgd2hlbmV2ZXIgYSBtYW4gYXBwZWFscyBzb2xlbW5seSB0byB0aGUgZ29kcywgaGlzIGNvbmR1Y3QKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBiZSBjbGVhcmx5IHN1Y2ggYXMgd291bGQgbm90IGFwcGVhciBiYXNlIGV2ZW4gaWYgc3VwcG9ydGVkIG9ubHkgYnkKICAgICAgICAgICAgICAgICAgICBodW1hbiBhdXRob3JpdHkuIE5vdyB0aGF0IHRoZXJlIGlzIGEgZGlmZmVyZW5jZSBiZXR3ZWVuIGV4ZW1wdGlvbiBmcm9tIHJlbGlnaW91cwogICAgICAgICAgICAgICAgICAgIGR1dGllcyBhbmQgZXhlbXB0aW9uIGZyb20gcHVibGljIHNlcnZpY2VzLCBhbmQgdGhhdCB0aGUgZGVmZW5kYW50cyBhcmUgdHJ5aW5nIHRvCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZSB5b3UgYnkgdHJhbnNmZXJyaW5nIHRoZSBuYW1lIG9mIHB1YmxpYyBzZXJ2aWNlcyB0byByZWxpZ2lvdXMgYWN0cywgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGFkZHVjZSBMZXB0aW5lcyBoaW1zZWxmIGFzIG15IHdpdG5lc3MuIEZvciB0aGUgZmlyc3QgY2xhdXNlIG9mIHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBzYXlzIDwvdHJhbnNsYXRpb24+"
translation['20.127'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjciIHVuaXQ9InNlY3Rpb24iIC8+IkxlcHRpbmVzIHByb3Bvc2VkIHRoYXQsIHRvIHRoZSBlbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSB3ZWFsdGhpZXN0IGNpdGl6ZW5zIG1heSBwZXJmb3JtIHRoZSBwdWJsaWMgc2VydmljZXMsIG5vbmUgc2hhbGwgYmUgaW1tdW5lCiAgICAgICAgICAgICAgICAgICAgc2F2ZSBhbmQgZXhjZXB0IHRoZSBkZXNjZW5kYW50cyBvZiBIYXJtb2RpdXMgYW5kIEFyaXN0b2dpdG9uLiIgQnV0IGlmIGltbXVuaXR5CiAgICAgICAgICAgICAgICAgICAgZnJvbSByZWxpZ2lvdXMgZHV0aWVzIHdlcmUgdGhlIHNhbWUgYXMgaW1tdW5pdHkgZnJvbSBwdWJsaWMgc2VydmljZXMsIHdoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgdGhlIG9iamVjdCBvZiB0aGF0IGNsYXVzZT8gRm9yIGltbXVuaXR5IGZyb20gcmVsaWdpb3VzIGR1dGllcyBoYXMgbmV2ZXIgYmVlbgogICAgICAgICAgICAgICAgICAgIGdyYW50ZWQgZXZlbiB0byB0aGUgcGVyc29ucyBoZXJlIG5hbWVkLiBUbyBwcm92ZSB0aGF0IHRoaXMgaXMgc28sIHBsZWFzZSB0YWtlCiAgICAgICAgICAgICAgICAgICAgYW5kIHJlYWQgdGhlIGNvcHkgb2YgdGhlIGluc2NyaXB0aW9uIGFuZCB0aGVuIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxhdyBvZgogICAgICAgICAgICAgICAgICAgICAgICBMZXB0aW5lcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDb3B5IG9mIFN0ZWxhIEluc2NyaXB0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29weSBvZiBTdGVsYSBJbnNjcmlwdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3B5IG9mIFN0ZWxhIEluc2NyaXB0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.128'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBoZWFyIHRoZQogICAgICAgICAgICAgICAgICAgIGNvcHkgb2YgdGhlIGluc2NyaXB0aW9uLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBvcmRlcmluZyB0aGVtIHRvIGJlIGltbXVuZSwgc2F2ZSBmcm9tIHJlbGlnaW91cyBkdXRpZXMuCiAgICAgICAgICAgICAgICAgICAgTm93IHJlYWQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbGF3IG9mIExlcHRpbmVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Hb29kOyBzdG9wIHRoZXJlLiBBZnRlciB0aGUgd29yZHMgInRvIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZCB0aGF0IHRoZSB3ZWFsdGhpZXN0IGNpdGl6ZW5zIG1heSBwZXJmb3JtIHRoZSBwdWJsaWMgc2VydmljZXMsIiBoZSBhZGRlZCAibm8KICAgICAgICAgICAgICAgICAgICBvbmUgc2hhbGwgYmUgaW1tdW5lIHNhdmUgYW5kIGV4Y2VwdCwgdGhlIGRlc2NlbmRhbnRzIG9mIEhhcm1vZGl1cyBhbmQKICAgICAgICAgICAgICAgICAgICBBcmlzdG9naXRvbi4iIFdoeSBzbywgaWYgdG8gcGF5IGZvciBhIHJlbGlnaW91cyByaXRlIGlzIHRvIHBlcmZvcm0gYSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlPyBGb3IgaWYgdGhhdCBpcyBoaXMgbWVhbmluZywgaGlzIG93biBkcmFmdGluZyB3aWxsIGJlIGZvdW5kIHRvCiAgICAgICAgICAgICAgICAgICAgY29udHJhZGljdCB0aGUgaW5zY3JpcHRpb24uIDwvdHJhbnNsYXRpb24+"
translation['20.129'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjkiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEkgc2hvdWxkIGxpa2UKICAgICAgICAgICAgICAgICAgICB0byBwdXQgYSBxdWVzdGlvbiB0byBMZXB0aW5lcy4gV2hlbiB5b3Ugc2F5IHRoYXQgdGhlIHB1YmxpYyBzZXJ2aWNlcyBjb21lIHVuZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGhlYWQgb2YgcmVsaWdpb3VzIGR1ZXMsIGluIHdoYXQsIGFjY29yZGluZyB0byB5b3UsIGRpZCB0aGUgaW1tdW5pdHkgY29uc2lzdCwKICAgICAgICAgICAgICAgICAgICB3aGljaCBvdXIgYW5jZXN0b3JzIHRoZW4gZ3JhbnRlZCBhbmQgeW91IG5vdyBsZWF2ZSB1bnRvdWNoZWQ/IEZvciBieSB0aGUgb2xkCiAgICAgICAgICAgICAgICAgICAgbGF3cyB0aGV5IGFyZSBub3QgaW1tdW5lIGZyb20gYWxsIHRoZSBzcGVjaWFsIHdhci10YXhlcyBvciBmcm9tIHRoZSBlcXVpcG1lbnQgb2YKICAgICAgICAgICAgICAgICAgICB3YXItZ2FsbGV5czsgYW5kIHRoZXkgZW5qb3kgbm8gaW1tdW5pdHkgZnJvbSB0aGUgc3RhdGUgc2VydmljZXMsIHNpbmNlIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWQgaW4gdGhlIHJlbGlnaW91cyBkdXRpZXMuIDwvdHJhbnNsYXRpb24+"
translation['20.130'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzAiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCB0aGUKICAgICAgICAgICAgICAgICAgICBpbnNjcmlwdGlvbiBzYXlzIHRoYXQgdGhleSBzaGFsbCBiZSBpbW11bmUuIEZyb20gd2hhdD8gRnJvbSB0aGUgdGF4IG9uIHJlc2lkZW50CiAgICAgICAgICAgICAgICAgICAgYWxpZW5zLCBzaW5jZSBub3RoaW5nIGVsc2UgaXMgbGVmdD8gT2YgY291cnNlIG5vdC4gSXQgaXMgZnJvbSB0aGUgcmVndWxhcmx5CiAgICAgICAgICAgICAgICAgICAgcmVjdXJyaW5nIHNlcnZpY2VzLCBhcyB0aGUgaW5zY3JpcHRpb24gc2hvd3MsIGFzIHlvdXIgbGF3IGZ1cnRoZXIgc3BlY2lmaWVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBhcyBhbGwgaGlzdG9yeSB3aXRuZXNzZXMuIER1cmluZyBhbGwgdGhhdCBsZW5ndGggb2YgdGltZSBubyB0cmliZSBoYXMgZXZlcgogICAgICAgICAgICAgICAgICAgIHZlbnR1cmVkIHRvIG5vbWluYXRlIG9uZSBvZiB0aGVzZSBkZXNjZW5kYW50cyBhcyBjaG9ydXMtbWFzdGVyLCBhbmQgbm8gb25lCiAgICAgICAgICAgICAgICAgICAgbm9taW5hdGVkIGhhcyBldmVyIHZlbnR1cmVkIHRvIGNoYWxsZW5nZSB0aGVtIHRvIGFuIGV4Y2hhbmdlIG9mIHByb3BlcnR5LiBJZgogICAgICAgICAgICAgICAgICAgIExlcHRpbmVzIGRhcmVzIHRvIGRlbnkgaXQsIHlvdSBtdXN0IHBheSBubyBoZWVkIHRvIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['20.131'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFnYWluLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGV5IGFzc2VydCB0aGF0IG1hbnkgYWxpZW5zIGhhdmUgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaW1tdW5pdHk7IGhlIGNoYWxsZW5nZXMgdGhlbSB0byBwcm9kdWNlIHRoZSBkZWNyZWVzIGNvbmZlcnJpbmcgaXQuIEhlIGFkbWl0cwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IG1hbnkgdW5kZXNlcnZpbmcgYWxpZW5zIGhhdmUgYmVlbiBtYWRlIHByb3hlbm9pIO+8iGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBob25vcmFyeSBzZW5zZSBleHBsYWluZWQgaW4gbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIwLjYwIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDIwLjYwPC9iaWJsPu+8iSwgYnV0IHRoaXMgZGlzdGluY3Rpb24gZG9lcyBub3QgY29uZmVyCiAgICAgICAgICAgICAgICAgICAgICAgIGltbXVuaXR5Ljwvbm90ZT4gcGVyaGFwcyB0aGV5IHdpbGwgc2F5IGluIHRoZWlyIGhhcGhhemFyZDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuNjAiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgMjAuNjA8L2JpYmw+77yJLCBidXQgdGhpcyBkaXN0aW5jdGlvbiBkb2VzIG5vdCBjb25mZXIKICAgICAgICAgICAgICAgICAgICAgICAgaW1tdW5pdHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxpdGVyYWxseSwgdHJhaWxpbmcgdGhlIHJvYmU7IGhlbmNlIHNsb3Zlbmx5LAogICAgICAgICAgICAgICAgICAgICAgICBzbGlwc2hvZC48L25vdGU+IHN0eWxlIHRoYXQgc29tZSBjaXRpemVucywgYnkgY2xhaW1pbmcgdG8gYmUgTWVnYXJpYW5zIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBNZXNzZW5pYW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZSBpcyBubyByZWNvcmQgb2YgYW55CiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgZXhlbXB0aW9uIGdyYW50ZWQgdG8gdGhlc2UgdHdvIHBlb3BsZXMuIElmIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTMxNjcxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMzE2NzEiPldlaWw8L3BsYWNlTmFtZT4ncyBjb25qZWN0dXJlIGlzIHJpZ2h0LCB0cmFuc2xhdGUKICAgICAgICAgICAgICAgICAgICAgICAgImNlcnRhaW4gTS4gYW5kIE0uLCBieSBjbGFpbWluZyB0byBiZSBGcmllbmRzIG9mIHRoZSBTdGF0ZS4iPC9ub3RlPiBhdCBvbmNlCiAgICAgICAgICAgICAgICAgICAgZ2FpbiBpbW11bml0eSwgd2hvbGUgY3Jvd2RzIGF0IGEgdGltZSwgdG8gc2F5IG5vdGhpbmcgb2Ygc2xhdmVzIGFuZCBqYWlsYmlyZHMKICAgICAgICAgICAgICAgICAgICBsaWtlIEx5Y2lkYXMgYW5kIERpb255c2l1czsgc3VjaCBhcmUgdGhlIGV4YW1wbGVzIHRoZXkgc2VsZWN0LiBXaGVuIHRoZXkgaG9sZAogICAgICAgICAgICAgICAgICAgIHN1Y2ggbGFuZ3VhZ2UsIGRlYWwgd2l0aCB0aGVtIHRodXMuIFRlbGwgdGhlbSwgaWYgdGhleSBhcmUgc3BlYWtpbmcgdGhlIHRydXRoLAogICAgICAgICAgICAgICAgICAgIHRvIHByb2R1Y2UgdGhlIGRlY3JlZXMgd2hpY2ggY29udGFpbiB0aGVzZSBtZW4ncyBpbW11bml0eTsgZm9yIG5vIG9uZSBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgY2l0eSBlbmpveXMgaW1tdW5pdHkgdW5sZXNzIGdyYW50ZWQgYnkgc29tZSBkZWNyZWUgb3IgbGF3LiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTEzMTY3MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMTMxNjcxIj5XZWlsPC9wbGFjZU5hbWU+J3MgY29uamVjdHVyZSBpcyByaWdodCwgdHJhbnNsYXRlCiAgICAgICAgICAgICAgICAgICAgICAgICJjZXJ0YWluIE0uIGFuZCBNLiwgYnkgY2xhaW1pbmcgdG8gYmUgRnJpZW5kcyBvZiB0aGUgU3RhdGUuIjwvdHJhbnNsYXRpb24+"
translation['20.132'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzIiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSBzdWNoIG1lbiwgaG93ZXZlciwgaGF2ZSBiZWVuIHByb2NsYWltZWQgRnJpZW5kcwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBTdGF0ZSBoZXJlIGF0IHRoZSBpbnN0YW5jZSBvZiB5b3VyIHBvbGl0aWNpYW5zIEx5Y2lkYXMsIGZvciBleGFtcGxlLiBCdXQKICAgICAgICAgICAgICAgICAgICBpdCBpcyBvbmUgdGhpbmcgdG8gYmUgYSBGcmllbmQgb2YgdGhlIFN0YXRlIGFuZCBhbm90aGVyIHRvIGVuam95IGltbXVuaXR5LiBCZQogICAgICAgICAgICAgICAgICAgIG5vdCBtaXNsZWQgYnkgdGhlbS4gQmVjYXVzZSBzbGF2ZXMsIGxpa2UgTHljaWRhcyBhbmQgRGlvbnlzaXVzIGFuZCBwZXJoYXBzIG9uZQogICAgICAgICAgICAgICAgICAgIG90aGVyLCB3ZXJlIG1hZGUgRnJpZW5kcyBvZiB0aGUgU3RhdGUgYnkgbWVuIHdobyBhcmUgcmVhZGlseSBicmliZWQgdG8gcHJvcG9zZQogICAgICAgICAgICAgICAgICAgIHN1Y2ggZGVjcmVlcywgdGhleSBtdXN0IG5vdCB0cnkgdG8gdGFrZSBhd2F5IHRoZSBnaWZ0cyB0aGF0IHlvdSBoYXZlIGp1c3RseQogICAgICAgICAgICAgICAgICAgIGJlc3Rvd2VkIG9uIG1lbiBvZiBhIGRpZmZlcmVudCBjbGFzc+KAlG1lbnRvcmlvdXMsIGZyZWVib3JuLCBtdW5pZmljZW50CiAgICAgICAgICAgICAgICAgICAgYmVuZWZhY3RvcnMuIDwvdHJhbnNsYXRpb24+"
translation['20.133'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzMiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhpcyBwcmluY2lwbGUsIHdoYXQgYSBncm9zcwogICAgICAgICAgICAgICAgICAgIGluc3VsdCBpdCB3b3VsZCBiZSB0byBDaGFicmlhcywgaWYgcG9saXRpY2lhbnMgb2YgdGhhdCBzdGFtcCwgbm90IGNvbnRlbnQgd2l0aAogICAgICAgICAgICAgICAgICAgIG1ha2luZyBoaXMgc2xhdmUsIEx5Y2lkYXMsIGEgRnJpZW5kIG9mIHlvdXIgU3RhdGUsIHNob3VsZCBtYWtlIHRoZSBzbGF2ZSBhbgogICAgICAgICAgICAgICAgICAgIGV4Y3VzZSBmb3IgdGFraW5nIGJhY2sgcmV3YXJkcyBjb25mZXJyZWQgb24gdGhlIG1hc3RlciwgYW5kIHRoYXQgb24gYSBmYWxzZQogICAgICAgICAgICAgICAgICAgIHBsZWEhIEZvciBuZWl0aGVyIEx5Y2lkYXMgbm9yIGFueW9uZSBlbHNlIGVuam95cyBpbW11bml0eSBhcyBhIEZyaWVuZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBTdGF0ZSwgdW5sZXNzIHN1Y2ggaW1tdXJpdHkgaGFzIGJlZW4gZXhwcmVzc2x5IGNvbmZlcnJlZCBieSB0aGUgcGVvcGxlLiBUaGUgbWVuCiAgICAgICAgICAgICAgICAgICAgaW4gcXVlc3Rpb24gaGF2ZSBub3QgcmVjZWl2ZWQgaXQ7IEkgZGVmeSB0aGUgZGVmZW5kYW50cyB0byBwcm92ZSBpdC4gSWYgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIGVmZnJvbnRlcnkgdG8gYXNzZXJ0IGl0LCB0aGV5IHdpbGwgYmUgYWN0aW5nIGRpc2hvbm9yYWJseS4gPC90cmFuc2xhdGlvbj4="
translation['20.134'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgbm93IGNvbWUgdG8gc3BlYWsKICAgICAgICAgICAgICAgICAgICBvZiBhIG1hdHRlciBhYm91dCB3aGljaCBJIGZlZWwgYm91bmQsIEF0aGVuaWFucywgdG8gd2FybiB5b3UgbW9zdCBzZXJpb3VzbHkuIEZvcgogICAgICAgICAgICAgICAgICAgIGV2ZW4gaWYgb25lIGNvdWxkIGFkbWl0IHRoZSB0cnV0aCBvZiBhbGwgdGhhdCBMZXB0aW5lcyB3aWxsIHNheSBpbiBwcmFpc2Ugb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgbGF3LCBpdCB3b3VsZCBiZSBpbXBvc3NpYmxlIHVuZGVyIGFueSBjaXJjdW1zdGFuY2VzIHRvIHdpcGUgb3V0IG9uZSBkaXNncmFjZQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhpcyBsYXcsIGlmIHJhdGlmaWVkLCB3aWxsIGJyaW5nIHVwb24gb3VyIGNpdHkuIFRvIHdoYXQgZG8gSSByZWZlcj8gVG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVwdXRhdGlvbiBvZiBoYXZpbmcgY2hlYXRlZCBvdXIgYmVuZWZhY3RvcnMuIDwvdHJhbnNsYXRpb24+"
translation['20.135'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzUiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEkgdGhpbmsgeW91IHdvdWxkIGFsbCBhZ3JlZSB0aGF0IHRoaXMgaXMgYSBkaXN0aW5jdCBkaXNncmFjZTsgaG93IG11Y2gKICAgICAgICAgICAgICAgICAgICB3b3JzZSBpbiB5b3UgdGhhbiBpbiBvdGhlcnMsIGhlYXIgbWUgZXhwbGFpbi4gWW91IGhhdmUgYW4gYW5jaWVudCBsYXcsIG9uZSBoZWxkCiAgICAgICAgICAgICAgICAgICAgaW4gZ3JlYXQgcmVzcGVjdCwgdGhhdCBpZiBhbnlvbmUgZGVjZWl2ZXMgdGhlIHBlb3BsZSBieSBmYWxzZSBwcm9taXNlcywgaGUgc2hhbGwKICAgICAgICAgICAgICAgICAgICBiZSBicm91Z2h0IHRvIHRyaWFsLCBhbmQgaWYgY29udmljdGVkIHNoYWxsIGJlIHB1bmlzaGVkIHdpdGggZGVhdGguIEFuZCBhcmUgeW91CiAgICAgICAgICAgICAgICAgICAgbm90IHRoZW4gYXNoYW1lZCwgQXRoZW5pYW5zLCB0byBmaW5kIHlvdXJzZWx2ZXMgZG9pbmcgdGhlIHZlcnkgdGhpbmcgZm9yIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgeW91IHB1bmlzaCBvdGhlciBtZW4gd2l0aCBkZWF0aD8gTmF5LCBidXQgaW4gZXZlcnl0aGluZyBpdCBpcyByaWdodCB0byB0YWtlIGhlZWQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGRvaW5nIHdoYXRldmVyIHNlZW1zIG9yIGlzIGRpc2hvbm9yYWJsZSwgYnV0IGVzcGVjaWFsbHkgaW4gY2FzZXMgd2hlcmUgYQogICAgICAgICAgICAgICAgICAgIG1hbiBpcyBzZWVuIHRvIGJlIGluZGlnbmFudCB3aXRoIG90aGVycy4gRm9yIHRoZXJlIGlzIG5vIHJvb20gbGVmdCBldmVuIGZvcgogICAgICAgICAgICAgICAgICAgIGhlc2l0YXRpb24gaW4gYXZvaWRpbmcgYWN0cyB3aGljaCBhIG1hbidzIG93biBqdWRnZW1lbnQgaGFzIGFscmVhZHkgY29uZGVtbmVkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.136'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZW4gdGhlcmUKICAgICAgICAgICAgICAgICAgICBpcyBhbm90aGVyIHByZWNhdXRpb24gdGhhdCB5b3UgbXVzdCB0YWtl4oCUdG8gZG8gbm90aGluZyBhcyBhIGNvbW11bml0eQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSB3b3VsZCBzaHVuIGFzIGluZGl2aWR1YWxzLiBOb3QgYSBtYW4gYW1vbmcgeW91IHdvdWxkIHRha2UgYXdheSBmcm9tCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciBoaXMgb3duIHBlcnNvbmFsIGdpZnRzLCBub3IgZXZlbiBkcmVhbSBvZiBkb2luZyBzby4gVGhlbiBkbyBub3Qgc28gaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIHB1YmxpYyBjYXBhY2l0eSwgYnV0IHRlbGwgdGhlIG9mZmljaWFsIGRlZmVuZGVyczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgYWR2b2NhdGVzIG5hbWVkIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMTQ2IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDIwLjE0NjwvYmlibD4uPC9ub3RlPiBvZiB0aGlzIGxhdyB0aGF0IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMTQ2IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDIwLjE0NjwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['20.137'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzciIHVuaXQ9InNlY3Rpb24iIC8+aWYKICAgICAgICAgICAgICAgICAgICB0aGV5IHNheSB0aGF0IGFueSBvZiB0aGUgcmVjaXBpZW50cyBvZiB0aGVzZSByZXdhcmRzIGlzIHVuZGVzZXJ2aW5nLCBvciBob2xkcwogICAgICAgICAgICAgICAgICAgIHRoZW0gdW5kZXIgZmFsc2UgcHJldGVuY2VzLCBvciBpcyBvcGVuIHRvIGFueSBvdGhlciBjaGFyZ2UsIHRoZXkgc2hvdWxkIGluZGljdAogICAgICAgICAgICAgICAgICAgIGhpbSB1bmRlciB0aGUgYW1lbmRlZCBsYXcgd2hpY2ggd2UgYXJlIG5vdyBwcm9wb3NpbmcsIGVpdGhlciB3aGVuIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBjYXJyaWVkIGl0IHRocm91Z2gsIGFzIHdlIGd1YXJhbnRlZSBhbmQgYXNzZXJ0IHRoYXQgd2Ugd2lsbCwgb3Igd2hlbiB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIGNhcnJpZWQgaXQsIHRoYXQgaXMsIGFzIHNvb24gYXMgdGhlIGxlZ2lzbGF0aXZlIGNvbW1pc3Npb24gaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IHllYXIKICAgICAgICAgICAgICAgICAgICAgICAg77yISnVsee+8iS48L25vdGU+IEJ1dCBlYWNoIGRlZmVuZGVyIG9mIHRoaXMgbGF3LCBpdCBzZWVtcywKICAgICAgICAgICAgICAgICAgICBoYXMgYSBwZXJzb25hbCBlbmVteSwgd2hldGhlciBEaW9waGFudHVzIG9yIEV1YnVsdXMgb3Igc29tZW9uZSBlbHNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgb2ZmaWNpYWwgZGVmZW5kZXJzIGhhdmUgdGhlaXIgcGVyc29uYWwKICAgICAgICAgICAgICAgICAgICAgICAgZW5lbWllcywgd2hvIGhhdmUgcmVjZWl2ZWQgaW1tdW5pdHkgYW5kIHdob20gaXQgd291bGQgYmUgbmF0dXJhbCBmb3IgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgICAgICBpbmRpY3QuIFRoaXMgdGhleSBkbyBub3QgdmVudHVyZSB0byBkbywgYnV0IHRyeSwgYnkgdGhpcyBzd2VlcGluZyBsYXcsIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHJpdmUgYWxsLCBnb29kIGFuZCBiYWQgYWxpa2UsIG9mIHRoZWlyIHByaXZpbGVnZXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.138'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzgiIHVuaXQ9InNlY3Rpb24iIC8+SWYgdGhleSBoYW5nIGJhY2sgYW5kIHJlZnVzZSB0byB0YWtlIHRoaXMKICAgICAgICAgICAgICAgICAgICBzdGVwLCB0aGVuIGNvbnNpZGVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgaXQgaXMgdG8geW91ciBjcmVkaXQgdGhhdCB5b3Ugc2hvdWxkIGJlIGtub3duIHRvIGhhdmUgdGFrZW4gYXdheSBmcm9tCiAgICAgICAgICAgICAgICAgICAgeW91ciBiZW5lZmFjdG9ycyB3aGF0IG5vdCBvbmUgb2YgdGhlc2UgbWVuIHZlbnR1cmVzIHRvIHRha2UgZnJvbSBoaXMgcGVyc29uYWwKICAgICAgICAgICAgICAgICAgICBlbmVteSwgYW5kIHRoYXQgeW91IHNob3VsZCBwYXNzIGEgbGF3IHRvIHJvYiBjb2xsZWN0aXZlbHkgb2YgdGhlaXIgcmV3YXJkcyBtZW4KICAgICAgICAgICAgICAgICAgICB3aG8gaGF2ZSBzZXJ2ZWQgeW91IHdlbGwgYW5kIHdob20gbm8gb25lIGRyZWFtcyBvZiBpbmRpY3RpbmcsIHdoZW4gdGhlIGhhbmRmdWwKICAgICAgICAgICAgICAgICAgICBvZiB1bndvcnRoeSByZWNpcGllbnRzLCBpZiB0aGVyZSBhcmUgYW55LCBjb3VsZCBiZSBkZWFsdCB3aXRoIGp1c3QgYXMKICAgICAgICAgICAgICAgICAgICBlZmZlY3RpdmVseSwgaWYgdGhlc2UgbWVuIHdvdWxkIGltcGVhY2ggdGhlbSBhbmQgYnJpbmcgdGhlbSB0byB0cmlhbCBvbmUgYnkgb25lLgogICAgICAgICAgICAgICAgICAgIEZvciBpdCBwYXNzZXMgbXkgY29tcHJlaGVuc2lvbiBob3cgdGhlIHByZXNlbnQgYXJyYW5nZW1lbnQgY2FuIGNvbnNvcnQgd2l0aCB5b3VyCiAgICAgICAgICAgICAgICAgICAgaG9ub3IgYW5kIHlvdXIgZGlnbml0eS4gPC90cmFuc2xhdGlvbj4="
translation['20.139'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFnYWluLCB3ZSBtdXN0IG5vdCBkZXZpYXRlIGZyb20gdGhpcyBwcmluY2lwbGUsIHRoYXQgaXQKICAgICAgICAgICAgICAgICAgICB3YXMgZmFpciB0byBpbnZlc3RpZ2F0ZSB0aGVpciBtZXJpdHMgYXQgdGhlIHRpbWUgb2YgY29uZmVycmluZyB0aGUgcmV3YXJkLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgbm9uZSBvZiB0aGVzZSBtZW4gb3Bwb3NlZCB0aGUgdm90ZSwgYnV0IGFmdGVyIHRoYXQgdG8gbGV0IHRoZSByZXdhcmQgc3RhbmQsCiAgICAgICAgICAgICAgICAgICAgdW5sZXNzIHlvdSBoYXZlIHJlY2VpdmVkIGFueSBzdWJzZXF1ZW50IHdyb25nIGF0IHRoZWlyIGhhbmRzLiBJZiB0aGV5IGFsbGVnZQogICAgICAgICAgICAgICAgICAgIHRoYXQg77yIZm9yIHRoZXkgY2Fubm90IHByb3ZlIGl077yJLCBpdCBtdXN0IGJlIHNob3duIHRoYXQgdGhlIG1lbgogICAgICAgICAgICAgICAgICAgIHdlcmUgcHVuaXNoZWQgYXQgdGhlIHRpbWUgb2YgdGhlIGFsbGVnZWQgd3JvbmdzLiBCdXQgaWYgeW91IHJhdGlmeSB0aGlzIGxhdywKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggbm8gc3VjaCB3cm9uZyB3YXMgY29tbWl0dGVkLCBpdCB3aWxsIHNlZW0gdGhhdCB5b3UgaGF2ZSB0YWtlbiBhd2F5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcmV3YXJkIGJlY2F1c2UgeW91IHdlcmUgZW52aW91cywgbm90IGJlY2F1c2UgeW91IGZvdW5kIHRoZW0gcmFzY2Fscy4gPC90cmFuc2xhdGlvbj4="
translation['20.140'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDAiIHVuaXQ9InNlY3Rpb24iIC8+RXZlcnkgcmVwcm9hY2gsIEkgbWlnaHQgYWxtb3N0IHNheSwgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgYXZvaWRlZCwgYnV0IHRoaXMgYWJvdmUgYWxsLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBXaHk/IEJlY2F1c2UgaW4gZXZlcnkgd2F5IGVudnkgaXMgdGhlIG1hcmsgb2YgYSB2aWNpb3VzCiAgICAgICAgICAgICAgICAgICAgbmF0dXJlLCBhbmQgdGhlIG1hbiB3aG8gaXMgc3ViamVjdCB0byBpdCBoYXMgbm8gY2xhaW0gd2hhdGV2ZXIgdG8gY29uc2lkZXJhdGlvbi4KICAgICAgICAgICAgICAgICAgICBNb3Jlb3ZlciB0aGVyZSBpcyBubyByZXByb2FjaCBtb3JlIGFsaWVuIHRvIG91ciBjaXR5IHRoYW4gdGhlIGFwcGVhcmFuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBlbnZ5LCBhdmVyc2UgYXMgc2hlIGlzIGZyb20gYWxsIHRoYXQgaXMgZGlzZ3JhY2VmdWwuIDwvdHJhbnNsYXRpb24+"
translation['20.141'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDEiIHVuaXQ9InNlY3Rpb24iIC8+U2VlIHdoYXQgc3Ryb25nIGV2aWRlbmNlIHdlIGhhdmUgb2YgdGhpcy4gSW4gdGhlIGZpcnN0IHBsYWNlLCB5b3UKICAgICAgICAgICAgICAgICAgICBhbG9uZSBvZiBhbGwgbWFua2luZCBwdWJsaWNseSBwcm9ub3VuY2Ugb3ZlciB5b3VyIGRlYWQgZnVuZXJhbCBvcmF0aW9ucywgaW4KICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3UgZXh0b2wgdGhlIGRlZWRzIG9mIHRoZSBicmF2ZS4gU3VjaCwgaG93ZXZlciwgaXMgdGhlIHByYWN0aWNlIG9mIG1lbgogICAgICAgICAgICAgICAgICAgIHdobyBhZG1pcmUgYnJhdmVyeSwgbm90IG9mIG1lbiB3aG8gZW52eSB0aGUgaG9ub3JzIHRoYXQgYnJhdmVyeSB3aW5zLiBOZXh0LCB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIGZyb20gdGltZSBpbW1lbW9yaWFsIGdpdmVuIHRoZSByaWNoZXN0IHJld2FyZHMgdG8gdGhvc2Ugd2hvIHdpbiBjcm93bnMgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgYXRobGV0aWMgZ2FtZXM7IG5vciwgYmVjYXVzZSBzdWNoIGhvbm9ycyBhcmUgbmVjZXNzYXJpbHkgY29uZmluZWQgdG8gYSBmZXcsCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB5b3UgZ3J1ZGdlZCBvciBzdGludGVkIHRoZSBob25vcnMgb2YgdGhlIHZpY3RvcnMgb24gdGhhdCBhY2NvdW50LiBCZXNpZGUKICAgICAgICAgICAgICAgICAgICB0aGVzZSBub3RhYmxlIGluc3RhbmNlcywgbm8gb25lLCBJIHRoaW5rLCBoYXMgZXZlciBzdXJwYXNzZWQgb3VyIFN0YXRlIGluCiAgICAgICAgICAgICAgICAgICAgZ2VuZXJvc2l0eTsgc3VjaCBhIHN1cGVyYWJ1bmRhbmNlIG9mIHJld2FyZHMgaGFzIHNoZSBoZWFwZWQgb24gdGhvc2Ugd2hvIHNlcnZlCiAgICAgICAgICAgICAgICAgICAgaGVyIHdlbGwuIDwvdHJhbnNsYXRpb24+"
translation['20.142'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDIiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoZXNlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhcmUgcHJvb2ZzIG9mIGp1c3RpY2UsIG9mIHZpcnR1ZSwKICAgICAgICAgICAgICAgICAgICBvZiBtYWduYW5pbWl0eS4gVGhlbiBkbyBub3Qgbm93IGRlc3Ryb3kgdGhlIHZlcnkgcXVhbGl0aWVzIG9uIHdoaWNoIHRocm91Z2hvdXQKICAgICAgICAgICAgICAgICAgICBpdHMgaGlzdG9yeSBvdXIgY2l0eSdzIHJlcHV0YXRpb24gaXMgZm91bmRlZDsgZG8gbm90LCBpbiBvcmRlciB0aGF0IExlcHRpbmVzIG1heQogICAgICAgICAgICAgICAgICAgIHZlbnQgaGlzIHNwaXRlIG9uIG1lbiB3aG9tIGhlIGRpc2xpa2VzLCByb2IgYm90aCB5b3Vyc2VsdmVzIGFuZCB5b3VyIGNpdHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZmFpciBmYW1lIHRoYXQgaGFzIGJlZW4geW91cnMgaW4gZXZlcnkgYWdlOyBkbyBub3Qgc3VwcG9zZSB0aGF0IGFueXRoaW5nIGVsc2UgaXMKICAgICAgICAgICAgICAgICAgICBhdCBzdGFrZSBpbiB0aGlzIHRyaWFsIHNhdmUgdGhlIGhvbm9yIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hldGhlciBpdCBpcyB0byBzdGFuZCB1bmltcGFpcmVkIGFzIG9mIG9sZCwgb3IgdG8gcGFzcwogICAgICAgICAgICAgICAgICAgIGludG8gbmVnbGVjdCBhbmQgZGVncmFkYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['20.143'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBvZiBhbGwgdGhlIGFzdG9uaXNoaW5nIGZlYXR1cmVzIG9mIExlcHRpbmVzJyBsYXcsCiAgICAgICAgICAgICAgICAgICAgd2hhdCBhc3RvbmlzaGVzIG1lIG1vc3QgaXMgaGlzIGlnbm9yYW5jZSBvZiB0aGUgZmFjdCB0aGF0IGp1c3QgYXMgYSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgYXNzaWducyBoZWF2eSBwZW5hbHRpZXMgZm9yIG9mZmVuY2VzIHdvdWxkIGJlIHVubGlrZWx5IHRvIGhhdmUgY29udGVtcGxhdGVkIGFuCiAgICAgICAgICAgICAgICAgICAgb2ZmZW5jZSBoaW1zZWxmLCBzbyBvbmUgd2hvIGFib2xpc2hlcyB0aGUgcmV3YXJkcyBmb3IgYmVuZWZhY3Rpb25zIHdpbGwgbm90CiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBiZSBsaWtlbHkgdG8gaGF2ZSBjb250ZW1wbGF0ZWQgYSBnb29kIGRlZWQuIE5vdyBpZiwgYXMgaXMganVzdCBwb3NzaWJsZSwKICAgICAgICAgICAgICAgICAgICBoZSBkaWQgbm90IGtub3cgdGhpcywgaGUgd2lsbCBhdCBvbmNlIGNvbmZlc3MgaXQgYnkgYWxsb3dpbmcgeW91IHRvIHJlcGVhbCB0aGUKICAgICAgICAgICAgICAgICAgICBsYXcgd2hpY2ggZW1ib2RpZXMgaGlzIG93biBlcnJvciwgYnV0IGlmIGhlIHNob3dzIGhpbXNlbGYgb2JzdGluYXRlIGFuZCBlYWdlciB0bwogICAgICAgICAgICAgICAgICAgIHJhdGlmeSB0aGUgbGF3LCBJIGZvciBvbmUgY2Fubm90IHByYWlzZSBoaW0sIHRob3VnaCBJIHJlZnJhaW4gZnJvbSBjZW5zdXJlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.144'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBiZSBub3Qgc3R1YmJvcm4sIExlcHRpbmVzOyBkbyBub3QKICAgICAgICAgICAgICAgICAgICBpbnNpc3Qgb24gYSBjb3Vyc2Ugd2hpY2ggd2lsbCBub3QgYWRkIHRvIHlvdXIgb3duIHJlcHV0YXRpb24gb3IgdGhhdCBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVycywgZXNwZWNpYWxseSBhcyB0aGlzIHRyaWFsIG5vIGxvbmdlciBlbmRhbmdlcnMgeW91LiBGb3Igb3dpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVhdGggb2YgdGhlIGZhdGhlciBvZiBBcHNlcGhpb24gaGVyZSwgQmF0aGlwcHVzLCB3aG8gaW5kaWN0ZWQgTGVwdGluZXMgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBzdGlsbCBsaWFibGUsIHRoZSBsZWdhbCBwZXJpb2QgaGFzIGVsYXBzZWQsIGFuZCBub3cgb3VyIHdob2xlIGNvbmNlcm4gaXMKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBsYXcsIGFuZCBpdHMgcHJvcG9zZXIgcnVucyBubyByaXNrLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUKICAgICAgICAgICAgICAgICAgICAgICAgSW50cm9kdWN0aW9uIHAuIDQ4OS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.145'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgYW0gdG9sZCwKICAgICAgICAgICAgICAgICAgICBob3dldmVyLCB0aGF0IHlvdSBhc3NlcnQgdGhhdCB0aHJlZSBkaXN0aW5jdCBwZXJzb25zIGluZGljdGVkIHlvdSBiZWZvcmUKICAgICAgICAgICAgICAgICAgICBBcHNlcGhpb24sIGJ1dCBkcm9wcGVkIHRoZSBhY3Rpb24uIFdlbGwsIGlmIHlvdXIgY29tcGxhaW50IGFnYWluc3QgdGhlbSBpcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhleSBkaWQgbm90IGVuZGFuZ2VyIHlvdSwgeW91IG11c3QgYmUgZm9uZGVyIG9mIGRhbmdlciB0aGFuIG90aGVyIHBlb3BsZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgaWYgeW91IGJyaW5nIGl0IGZvcndhcmQgYXMgYSBwcm9vZiBvZiB0aGUganVzdGljZSBvZiB5b3VyIHByb3Bvc2FscywgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIGRvaW5nIGEgdmVyeSBzaWxseSB0aGluZy4gRm9yIGhvdyBpcyB5b3VyIGxhdyBpbXByb3ZlZCBieSB0aGUgZmFjdCB0aGF0IG9uZSBvZgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBpbmRpY3RlZCB5b3UgZGllZCBiZWZvcmUgaGUgY291bGQgY29tZSBpbnRvIGNvdXJ0LCBvciB3YXMgaW5kdWNlZCBieQogICAgICAgICAgICAgICAgICAgIHlvdSB0byBkcm9wIHRoZSBjaGFyZ2UsIG9yIGV2ZW4gd2FzIHNpbXBseSBzdWJvcm5lZCBieSB5b3U/IEJ1dCBJIGFtIGFzaGFtZWQKICAgICAgICAgICAgICAgICAgICBldmVuIHRvIHN1Z2dlc3Qgc3VjaCB0aGluZ3MuIDwvdHJhbnNsYXRpb24+"
translation['20.146'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlIGFyZSBhZHZvY2F0ZXMgYXBwb2ludGVkIHRvIGRlZmVuZCB0aGUgbGF3LCBhbmQKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGFibGUgc3BlYWtlcnMgdGhleSBhcmU7IExlb2RhbWFzIG9mIEFjaGFybmFlLCBBcmlzdG9waG9uIG9mIEhhemVuaWEsCiAgICAgICAgICAgICAgICAgICAgQ2VwaGlzb2RvdHVzIG9mIENlcmFtaWN1cywgYW5kIERpbmlhcyBvZiBIZXJjaGlhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVzZSB3ZXJlIHRoZSBmb3VyIGFkdm9jYXRlcyBub21pbmF0ZWQgYnkgdGhlIHBlb3BsZSwgd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBMZXB0aW5lcyBhcyBhIGZpZnRoLCB0byBkZWZlbmQgdGhlIGxhdy4gQXJpc3RvcGhvbiwgdGhlIGJlc3Qga25vd24sIHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbGVhZGluZyBBdGhlbmlhbiBzdGF0ZXNtYW4gYmVmb3JlIHRoZSByaXNlIG9mIEV1YnVsdXMuIEhlIHdhcyBub3cgbmVhcmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGVpZ2h0eSB5ZWFycyBvbGQsIGFuZCBjb3VsZCBib2FzdCB0aGF0IGhlIGhhZCBiZWVuIDc1IHRpbWVzIGRlZmVuZGFudCBpbiBhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Os8+BzrHPhuG9tCDPgM6xz4HOsc694b25zrzPic69PC9mb3JlaWduPiBhbmQgaGFkIGFsd2F5cwogICAgICAgICAgICAgICAgICAgICAgICBhY3F1aXR0ZWQuPC9ub3RlPiBMZXQgbWUgdGVsbCB5b3UsIHRoZW4sIGhvdyB5b3UgbWF5IHJlYXNvbmFibHkgcmV0b3J0IHVwb24KICAgICAgICAgICAgICAgICAgICB0aGVtLCBhbmQgZG8geW91IGNvbnNpZGVyIHdoZXRoZXIgdGhlIHJldG9ydCBpcyBmYWlyLjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6zz4HOsc+G4b20IM+AzrHPgc6xzr3hvbnOvM+Jzr08L2ZvcmVpZ24+IGFuZCBoYWQgYWx3YXlzCiAgICAgICAgICAgICAgICAgICAgICAgIGFjcXVpdHRlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RGVtb3N0aGVuZXMgc3VnZ2VzdHMgdGhhdCB0aGUgcGVyc29uYWwgcmVjb3JkIG9mIHRoZSBhZHZvY2F0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGxlYWQgdGhlIGp1cnkgdG8gcmVqZWN0IHRoZWlyIGFyZ3VtZW50cy48L25vdGU+IFRha2UgTGVvZGFtYXMgZmlyc3QuCiAgICAgICAgICAgICAgICAgICAgSXQgd2FzIGhlIHdobyBpbXBlYWNoZWQgdGhlIGdyYW50IHRvIENoYWJyaWFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMC43NyIgdmFsaWQ9InllcyI+RGVtLiAyMC43NzwvYmlibD4uPC9ub3RlPiB3aGljaCBpbmNsdWRlZCBhbW9uZwogICAgICAgICAgICAgICAgICAgIG90aGVyIHRoaW5ncyB0aGUgZ2lmdCBvZiBpbW11bml0eSwgYW5kIHdoZW4gaGlzIGNhc2UgY2FtZSBiZWZvcmUgeW91LCBoZSBsb3N0CiAgICAgICAgICAgICAgICAgICAgaXQuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuNzciIHZhbGlkPSJ5ZXMiPkRlbS4gMjAuNzc8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['20.147'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDciIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZSBsYXdzIGZvcmJpZCB0aGUgc2FtZSBtYW4gdG8gYmUKICAgICAgICAgICAgICAgICAgICB0cmllZCB0d2ljZSBvbiB0aGUgc2FtZSBpc3N1ZSwgYmUgaXQgYSBjaXZpbCBhY3Rpb24sIGEgc2NydXRpbnksIGEgY29udGVzdGVkCiAgICAgICAgICAgICAgICAgICAgY2xhaW0sIG9yIGFueXRoaW5nIGVsc2Ugb2YgdGhlIHNvcnQuIEJ1dCBxdWl0ZSBhcGFydCBmcm9tIGFsbCB0aGlzLCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGEgbW9zdCBhYnN1cmQgcmVzdWx0IGlmIG9uIHRoZSBmaXJzdCBvY2Nhc2lvbiB0aGUgc2VydmljZXMgb2YgQ2hhYnJpYXMKICAgICAgICAgICAgICAgICAgICBvdXR3ZWlnaGVkIHRoZSBhcmd1bWVudHMgb2YgTGVvZGFtYXMsIGJ1dCB3aGVuIHRvIGhpcyBzZXJ2aWNlcyB3ZXJlIGFkZGVkIHRob3NlCiAgICAgICAgICAgICAgICAgICAgb2YgYWxsIHRoZSBvdGhlciBiZW5lZmFjdG9ycywgdGhlbiB0aGUgY29tYmluZWQgZWZmZWN0IHNob3VsZCBiZSB3ZWFrZXIgdGhhbiB0aGUKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMuIDwvdHJhbnNsYXRpb24+"
translation['20.148'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDgiIHVuaXQ9InNlY3Rpb24iIC8+VG8gQXJpc3RvcGhvbiBJIHRoaW5rIEkgY291bGQKICAgICAgICAgICAgICAgICAgICByYWlzZSBtYW55IHNvdW5kIG9iamVjdGlvbnMuIEhlIG9idGFpbmVkIGhpcyBncmFudCwgd2hpY2ggaW5jbHVkZWQgaW1tdW5pdHksIGJ5CiAgICAgICAgICAgICAgICAgICAgeW91ciB2b3Rlcy4gSSBmaW5kIG5vIGZhdWx0IHdpdGggdGhhdCwgZm9yIGl0IGlzIHJpZ2h0IHRoYXQgeW91IHNob3VsZCBoYXZlIGl0CiAgICAgICAgICAgICAgICAgICAgaW4geW91ciBwb3dlciB0byBiZXN0b3cgd2hhdCBpcyB5b3VycyBvbiBhbnlvbmUgeW91IHBsZWFzZS4gQnV0IEkgZG8gc3VnZ2VzdAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgaXMgdW5mYWlyIHRoYXQgaGUgc2hvdWxkIHJhaXNlIG5vIG9iamVjdGlvbiB3aGVuIGhlIHdhcyBnb2luZyB0byByZWNlaXZlCiAgICAgICAgICAgICAgICAgICAgaXQgaGltc2VsZiwgYnV0IHdoZW4gaXQgaGFzIGJlZW4gZ2l2ZW4gdG8gb3RoZXJzLCBoZSBzaG91bGQgdGFrZSBvZmZlbmNlIGFuZAogICAgICAgICAgICAgICAgICAgIHVyZ2UgeW91IHRvIHdpdGhkcmF3IGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['20.149'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDkiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIgaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgQXJpc3RvcGhvbiB3aG8gcHJvcG9zZWQgdG8gcGF5IEdlbGFyY2h1cyBmaXZlIHRhbGVudHMgZm9yIHN1bXMgYWR2YW5jZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVtb2NyYXRzIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBpcmFldXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBpcmFldXMiPlBpcmFldXM8L3BsYWNlTmFtZT48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMTEiIHZhbGlkPSJ5ZXMiPkRlbS4gMjAuMTE8L2JpYmw+LgogICAgICAgICAgICAgICAgICAgICAgICBHZWxhcmNodXMgaXMgbm90IG90aGVyd2lzZSBrbm93bi4gVGhlcmUgd2VyZSwgYXBwYXJlbnRseSwgbm8gd2l0bmVzc2VzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyBnaWZ0Ljwvbm90ZT47IGFuZCBoZSB3YXMgcmlnaHQuIFRoZW4sIG15IGZyaWVuZCwgaWYgeW91IHJlY29tbWVuZGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHJlcGF5bWVudCBvZiB1bmF0dGVzdGVkIHN1bXMgb24gdGhlIGdyb3VuZCBvZiBzZXJ2aWNlIGRvbmUgdG8gdGhlIHBlb3BsZSwgeW91CiAgICAgICAgICAgICAgICAgICAgbXVzdCBub3QgYWR2aXNlIHRoZSByZXZvY2F0aW9uIG9mIGdyYW50cyBmb3Igc2VydmljZXMgd2hpY2ggdGhlIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYXR0ZXN0ZWQgYnkgaW5zY3JpcHRpb25zIGluIHRoZSB0ZW1wbGVzLCBhbmQgd2hpY2ggYXJlIGluZGVlZCBrbm93bgogICAgICAgICAgICAgICAgICAgIHRvIGFsbCBtZW4uIFlvdSBtdXN0IG5vdCBleGhpYml0IHlvdXJzZWxmIGFzIGF0IHRoZSBzYW1lIHRpbWUgcHJvcG9zaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICBkZWJ0cyBvdWdodCB0byBiZSBwYWlkLCBhbmQgdXJnaW5nIHRoYXQgYSBtYW4gc2hvdWxkIGJlIGRlcHJpdmVkIG9mIHdoYXQgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgd29uIGF0IHRoZSBoYW5kcyBvZiB0aGUgcGVvcGxlLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIwLjExIiB2YWxpZD0ieWVzIj5EZW0uIDIwLjExPC9iaWJsPi4KICAgICAgICAgICAgICAgICAgICAgICAgR2VsYXJjaHVzIGlzIG5vdCBvdGhlcndpc2Uga25vd24uIFRoZXJlIHdlcmUsIGFwcGFyZW50bHksIG5vIHdpdG5lc3NlcyB0bwogICAgICAgICAgICAgICAgICAgICAgICBoaXMgZ2lmdC48L3RyYW5zbGF0aW9uPg=="
translation['20.150'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTAiIHVuaXQ9InNlY3Rpb24iIC8+TmV4dCwgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdGhpcyBtdWNoIHRvIHNheSB0byBDZXBoaXNvZG90dXMuIEFzIGFuIG9yYXRvciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGUgaXMgaW5mZXJpb3IgdG8gbm9uZS4gVGhlbiBpdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJlIGZhciBtb3JlIGhvbm9yYWJsZSB0byB1c2UgaGlzIHRhbGVudHMgZm9yIHRoZSBjaGFzdGlzZW1lbnQgb2YKICAgICAgICAgICAgICAgICAgICBldmlsLWRvZXJzIHRoYW4gZm9yIHRoZSBpbmp1cnkgb2YgdGhvc2Ugd2hvIGRlc2VydmUgd2VsbC4gSWYgaGUgbXVzdCBtYWtlCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcywgSSBzdWdnZXN0IHRoYXQgdGhleSBzaG91bGQgYmUgdGhvc2Ugd2hvIGluanVyZSB0aGUgcGVvcGxlLCBub3QgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gYmVuZWZpdCB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.151'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBhcyB0byBEaW5pYXMuIFBlcmhhcHMKICAgICAgICAgICAgICAgICAgICBoZSB3aWxsIHRlbGwgeW91IG9mIHRoZSB3YXItZ2FsbGV5cyBoZSBoYXMgZXF1aXBwZWQgYW5kIG9mIGhpcyBvdGhlciBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcy4gRm9yIG15IHBhcnQsIHRob3VnaCBEaW5pYXMgaGFzIHByb3ZlZCBoaW1zZWxmIGEgdmFsdWFibGUgc2VydmFudCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwdWJsaWMsIGFzIEkgc2luY2VyZWx5IGJlbGlldmUsIEkgd291bGQgdXJnZSBoaW0gcmF0aGVyIHRvIGNsYWltIGZyb20geW91CiAgICAgICAgICAgICAgICAgICAgc29tZSByZXdhcmQgZm9yIGhpbXNlbGYgdGhhbiB0byB0ZWxsIHlvdSB0byB0YWtlIGJhY2sgcmV3YXJkcyBwcmV2aW91c2x5IGdpdmVuCiAgICAgICAgICAgICAgICAgICAgdG8gb3RoZXJzOyBmb3IgYSBtYW4gZ2l2ZXMgYSBzdXJlciBwcm9vZiBvZiBleGNlbGxlbmNlIGJ5IGNsYWltaW5nIGEgcmV3YXJkIGZvcgogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gc2VydmljZXMgdGhhbiBieSBncnVkZ2luZyBvdGhlcnMgdGhlIHJld2FyZHMgdGhleSBoYXZlIHJlY2VpdmVkIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZWlycy4gPC90cmFuc2xhdGlvbj4="
translation['20.152'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBtb3N0IGVmZmVjdGl2ZSByZXRvcnQgaXMgb25lCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggYXBwbGllcyB0byBhbGwgdGhlIGNvbW1pc3Npb25lcnMgYWxpa2UuIEVhY2ggb25lIG9mIHRoZW0gaGFzIG9mdGVuIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHNlcnZlZCBhcyBjb21taXNzaW9uZXIgZm9yIHNvbWUgYnVzaW5lc3Mgb3Igb3RoZXIuIE5vdyB5b3UgaGF2ZSBhIHZlcnkgc291bmQKICAgICAgICAgICAgICAgICAgICBsYXfigJRub3QsIG9mIGNvdXJzZSwgZGlyZWN0ZWQgYWdhaW5zdCB0aGVzZSBtZW4sIGJ1dCBmcmFtZWQgdG8gcHJldmVudAogICAgICAgICAgICAgICAgICAgIGFueSBjb21taXNzaW9uZXIgZnJvbSB1c2luZyBoaXMgb3Bwb3J0dW5pdHkgZm9yIHByb2ZpdCBvcgogICAgICAgICAgICAgICAgICAgIGJsYWNrbWFpbOKAlHRoYXQgbm8gb25lLCBlbGVjdGVkIGJ5IHRoZSBwZW9wbGUsIGJlIHBlcm1pdHRlZCB0byBzZXJ2ZSBhcwogICAgICAgICAgICAgICAgICAgIGNvbW1pc3Npb25lciBtb3JlIHRoYW4gb25jZS4gPC90cmFuc2xhdGlvbj4="
translation['20.153'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTMiIHVuaXQ9InNlY3Rpb24iIC8+U3VyZWx5IHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGFyZSBnb2luZyB0byBhZHZvY2F0ZSBhIGxhdyBhbmQgdXJnZSBpdHMgbmVjZXNzaXR5IG91Z2h0IHRvIHNob3cgdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgIHJlYWR5IHRvIG9iZXkgZXhpc3RpbmcgbGF3czsgb3RoZXJ3aXNlIGl0IGlzIGFic3VyZCBmb3IgdGhlbSB0byBkZWZlbmQgb25lIGxhdwogICAgICAgICAgICAgICAgICAgIGFzIGNvbW1pc3Npb25lcnMgYW5kIHZpb2xhdGUgYW5vdGhlciB0aGVtc2VsdmVzLiBUYWtlIGFuZCByZWFkIHRoZSBsYXcgd2hpY2ggSQogICAgICAgICAgICAgICAgICAgICAgICBjaXRlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGF0LCBBdGhlbmlhbnMsIGlzIGJvdGggYW4gb2xkIGFuZCBhCiAgICAgICAgICAgICAgICAgICAgc291bmQgbGF3LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CdXQgaXQgc2VlbXMgdG8gaGF2ZSBiZWNvbWUgb2Jzb2xldGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBzb3VuZCByZWFzb25zLjwvbm90ZT4gd2hpY2ggdGhlIGNvbW1pc3Npb25lcnMgd2lsbCBiZSBjYXJlZnVsIG5vdCB0bwogICAgICAgICAgICAgICAgICAgIHZpb2xhdGUsIGlmIHRoZXkgYXJlIHdpc2UuIDwvdHJhbnNsYXRpb24+"
translation['20.154'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgaGF2ZSBzdGlsbCBhIGZldyB0aGluZ3MgdG8gc2F5IHRvIHlvdSBiZWZvcmUgSSBzaXQKICAgICAgICAgICAgICAgICAgICBkb3duLiBGb3IgeW91IG91Z2h0LCBpbiBteSBvcGluaW9uLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBiZSBhbnhpb3VzIGZvciB0aGUgdXRtb3N0IHBvc3NpYmxlIGVmZmljaWVuY3kgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgbGF3cywgYnV0IGVzcGVjaWFsbHkgb2YgdGhvc2Ugb24gd2hpY2ggZGVwZW5kcyB0aGUgc3RyZW5ndGggb3Igd2Vha25lc3Mgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgU3RhdGUuIEFuZCB3aGljaCBhcmUgdGhleT8gVGhleSBhcmUgdGhvc2Ugd2hpY2ggYXNzaWduIHJld2FyZHMgdG8gdGhvc2Ugd2hvIGRvCiAgICAgICAgICAgICAgICAgICAgZ29vZCBhbmQgcHVuaXNobWVudHMgdG8gdGhvc2Ugd2hvIGRvIGV2aWwuIEZvciBpbiB0cnV0aCwgaWYgZnJvbSBmZWFyIG9mIGxlZ2FsCiAgICAgICAgICAgICAgICAgICAgcGVuYWx0aWVzIGFsbCBtZW4gc2h1bm5lZCB3cm9uZ2RvaW5nLCBhbmQgaWYgZnJvbSBhbWJpdGlvbiBmb3IgdGhlIHJld2FyZHMgb2YKICAgICAgICAgICAgICAgICAgICBnb29kIHNlcnZpY2UgYWxsIGNob3NlIHRoZSBwYXRoIG9mIGR1dHksIHdoYXQgcHJldmVudHMgb3VyIGNpdHkgZnJvbSBiZWluZyBncmVhdAogICAgICAgICAgICAgICAgICAgIGFuZCBhbGwgb3VyIGNpdGl6ZW5zIGhvbmVzdCwgd2l0aCBub3QgYSByb2d1ZSBhbW9uZyB0aGVtPyA8L3RyYW5zbGF0aW9uPg=="
translation['20.155'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyB0aGUgbGF3IG9mCiAgICAgICAgICAgICAgICAgICAgTGVwdGluZXMsIEF0aGVuaWFucywgZG9lcyBoYXJtIG5vdCBvbmx5IGJ5IGFib2xpc2hpbmcgdGhlIHJld2FyZHMgb2YgZ29vZAogICAgICAgICAgICAgICAgICAgIHNlcnZpY2UgYW5kIHNvIHJlbmRlcmluZyBmcnVpdGxlc3MgdGhlIGdvb2QgaW50ZW50aW9ucyBvZiB0aG9zZSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgYW1iaXRpb3VzIGZvciBob25vciwgYnV0IGFsc28gYnkgbGVhdmluZyBvdXIgY2l0eSB1bmRlciB0aGUgc2VyaW91cyByZXByb2FjaCBvZgogICAgICAgICAgICAgICAgICAgIGltYmVjaWxpdHkuIEZvciB5b3UgYXJlIG9mIGNvdXJzZSBhd2FyZSB0aGF0IGZvciBlYWNoIGdyYXZlIG9mZmVuY2UgYSBzaW5nbGUKICAgICAgICAgICAgICAgICAgICBwZW5hbHR5IGlzIHByb3ZpZGVkIGJ5IHRoZSBsYXcsIHdoaWNoIHNheXMgZXhwbGljaXRseSB0aGF0IOKAnGF0IGFueQogICAgICAgICAgICAgICAgICAgIHRyaWFsIHRoZXJlIHNoYWxsIGJlIG5vdCBtb3JlIHRoYW4gb25lIGFzc2Vzc21lbnQgb2YgcGVuYWx0eSwgd2hpY2hldmVyIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdXJ0IGltcG9zZXMsIHdoZXRoZXIgYSBwZXJzb25hbCBwdW5pc2htZW50IG9yIGEgZmluZSwgYnV0IG5vdCBib3RoLuKAnQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.156'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IExlcHRpbmVzIGhhcyB1c2VkIGEgZGlmZmVyZW50IG1lYXN1cmUKICAgICAgICAgICAgICAgICAgICBhbmQgc2F5cyB0aGF0IGlmIGFueW9uZSBjbGFpbXMgYSByZXR1cm4gZnJvbSB5b3UsIOKAnGhlIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgZGlzZnJhbmNoaXNlZCwgYW5kIGhpcyBwcm9wZXJ0eSBzaGFsbCBiZSBjb25maXNjYXRlZC7igJ0gVGhlcmUgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICB0d28gcGVuYWx0aWVzLiDigJxUaGUgcHJvY2VzcyBzaGFsbCBiZSBieSBsYXlpbmcgaW5mb3JtYXRpb24gb3IgYnkKICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5IGFycmVzdDsgYW5kIGlmIGhlIGJlIGNvbnZpY3RlZCwgaGUgc2hhbGwgYmUgbGlhYmxlIHVuZGVyIHRoZSBsYXcgd2hpY2gKICAgICAgICAgICAgICAgICAgICBwcm92aWRlcyBmb3IgdGhlIGNhc2Ugb2YgYSBtYW4gaG9sZGluZyBvZmZpY2Ugd2hpbGUgaW4gZGVidCB0byB0aGUKICAgICAgICAgICAgICAgICAgICB0cmVhc3VyeS7igJ0gRGVhdGggaXMgd2hhdCBoZSBtZWFucywgZm9yIHN1Y2ggaXMgdGhlIHB1bmlzaG1lbnQgaW4gdGhhdAogICAgICAgICAgICAgICAgICAgIGNhc2UuIFdoeSwgaGVyZSBhcmUgdGhyZWUgcGVuYWx0aWVzITxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbGwgdGhpcyBpcwogICAgICAgICAgICAgICAgICAgICAgICBwdXJlIHNvcGhpc3RyeS48Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPhM65zrzhvbfOsTwvZm9yZWlnbj4gaW52b2x2aW5nIGxvc3Mgb2YKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgd2FzIG5vdCBhIGRvdWJsZSBwZW5hbHR5LCBidXQgbWVyZWx5IG9uZSBkZWdyZWUgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4TOuc684b23zrE8L2ZvcmVpZ24+LiBNb3Jlb3ZlciwgdGhlIGxhdyBjaXRlZCByZWZlcnMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcGVuYWx0aWVzIGFzc2Vzc2VkIGJ5IHRoZSBjb3VydHMsIG5vdCB0byB0aG9zZSBwcmVzY3JpYmVkIGJ5IHN0YXR1dGUuCiAgICAgICAgICAgICAgICAgICAgICAgIExhc3RseSwgdGhlIHNvLWNhbGxlZCB0aGlyZCBwZW5hbHR5IHdhcyBpbXBvc2VkIGZvciB0aGUgYWRkaXRpb25hbCBvZmZlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGNvbnRlbXB0LCB3aGVyZSBvbmUgd2hvIGhhZCBpbmN1cnJlZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPhM65zrzhvbfOsTwvZm9yZWlnbj4gbmV2ZXJ0aGVsZXNzIGNsYWltZWQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4ThvbPOu861zrnOsTwvZm9yZWlnbj4uPC9ub3RlPiBJcyBpdCBub3QgbW9uc3Ryb3VzbHkgaGFyZCwgQXRoZW5pYW5zLCBpZgogICAgICAgICAgICAgICAgICAgIGl0IHByb3ZlcyBtb3JlIHNlcmlvdXMgaW4geW91ciBjb3VydHMgdG8gYXNrIGZvciBhIHJldHVybiBmb3IgZ29vZCBzZXJ2aWNlIHRoYW4KICAgICAgICAgICAgICAgICAgICB0byBiZSBjb252aWN0ZWQgb2Ygc29tZSBoZWlub3VzIGNyaW1lPyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPhM65zrzhvbfOsTwvZm9yZWlnbj4gaW52b2x2aW5nIGxvc3Mgb2YKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgd2FzIG5vdCBhIGRvdWJsZSBwZW5hbHR5LCBidXQgbWVyZWx5IG9uZSBkZWdyZWUgb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4TOuc684b23zrE8L2ZvcmVpZ24+LiBNb3Jlb3ZlciwgdGhlIGxhdyBjaXRlZCByZWZlcnMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcGVuYWx0aWVzIGFzc2Vzc2VkIGJ5IHRoZSBjb3VydHMsIG5vdCB0byB0aG9zZSBwcmVzY3JpYmVkIGJ5IHN0YXR1dGUuCiAgICAgICAgICAgICAgICAgICAgICAgIExhc3RseSwgdGhlIHNvLWNhbGxlZCB0aGlyZCBwZW5hbHR5IHdhcyBpbXBvc2VkIGZvciB0aGUgYWRkaXRpb25hbCBvZmZlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGNvbnRlbXB0LCB3aGVyZSBvbmUgd2hvIGhhZCBpbmN1cnJlZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPhM65zrzhvbfOsTwvZm9yZWlnbj4gbmV2ZXJ0aGVsZXNzIGNsYWltZWQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4ThvbPOu861zrnOsTwvZm9yZWlnbj4uPC90cmFuc2xhdGlvbj4="
translation['20.157'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoaXMgbGF3LCBzbyBkaXNob25vcmFibGUsIHNvIHVuc291bmQsIHNvIHN1Z2dlc3RpdmUgb2YKICAgICAgICAgICAgICAgICAgICBlbnZ5IGFuZCBzcGl0ZSBhbmTigJRJIHNwYXJlIHlvdSB0aGUgcmVzdC4gVGhvc2UgYXJlIHRoZSBzb3J0IG9mIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGZyYW1lciBvZiB0aGUgbGF3IHNlZW1zIHRvIGZhdm9yLCBidXQgeW91IG11c3Qgbm90IGltaXRhdGUgdGhlbSBub3IKICAgICAgICAgICAgICAgICAgICBkaXNwbGF5IHNlbnRpbWVudHMgdW53b3J0aHkgb2YgeW91cnNlbHZlcy4gSSBhc2sgeW91IGluIEhlYXZlbidzIG5hbWUsIHdoYXQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgd2UgYWxsIG1vc3QgZWFybmVzdGx5IGRlcHJlY2F0ZT8gV2hhdCBkbyBhbGwgb3VyIGxhd3MgbW9zdCBjYXJlZnVsbHkKICAgICAgICAgICAgICAgICAgICBndWFyZCBhZ2FpbnN0PyBXaGF0IGJ1dCB0aG9zZSB2ZW5nZWZ1bCBtdXJkZXJzIGFnYWluc3Qgd2hpY2ggb3VyIHNwZWNpYWxseQogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBwcm90ZWN0b3IgaXMgdGhlIENvdW5jaWwgb2YgdGhlIEFyZW9wYWd1cz8gPC90cmFuc2xhdGlvbj4="
translation['20.158'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTgiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IERyYWNvLCBpbiB0aGlzIGdyb3VwIG9mIGxhd3MsIG1hcmtlZCB0aGUgdGVycmlibGUgd2lja2VkbmVzcyBvZgogICAgICAgICAgICAgICAgICAgIGhvbWljaWRlIGJ5IGJhbm5pbmcgdGhlIG9mZmVuZGVyIGZyb20gdGhlIGx1c3RyYWwgd2F0ZXIsIHRoZSBsaWJhdGlvbnMsIHRoZQogICAgICAgICAgICAgICAgICAgIGxvdmluZy1jdXAsIHRoZSBzYWNyaWZpY2VzIGFuZCB0aGUgbWFya2V0LXBsYWNlOyBoZSBlbnVtZXJhdGVkIGV2ZXJ5dGhpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHRob3VnaHQgbGlrZWx5IHRvIGRldGVyIHRoZSBvZmZlbmRlcjsgYnV0IGhlIG5ldmVyIHJvYmJlZCBoaW0gb2YgaGlzIGNsYWltIHRvCiAgICAgICAgICAgICAgICAgICAganVzdGljZTsgaGUgZGVmaW5lZCB0aGUgY2lyY3Vtc3RhbmNlcyB0aGF0IG1ha2UgaG9taWNpZGUganVzdGlmaWFibGUgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvY2xhaW1lZCB0aGUgYWNjdXNlZCBpbiBzdWNoIGNhc2UgZnJlZSBmcm9tIHRhaW50LiBJZiwgdGhlbiwgeW91ciBsYXdzIGNhbgogICAgICAgICAgICAgICAgICAgIGp1c3RpZnkgaG9taWNpZGUsIGlzIHRoaXMgZmVsbG93J3MgbGF3IHRvIGZvcmJpZCBhbnkgY2xhaW0sIGV2ZW4gYSBqdXN0IG9uZSwgdG8KICAgICAgICAgICAgICAgICAgICByZWNvbXBlbnNlPyBOb3Qgc28sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4hCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.159'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTkiIHVuaXQ9InNlY3Rpb24iIC8+RG8gbm90IGxldCBpdCBhcHBlYXIgdGhhdCB5b3UgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgbW9yZSBkaWxpZ2VudCB0byBwcmV2ZW50IGFueSBvZiB5b3VyIGJlbmVmYWN0b3JzIGZyb20gd2lubmluZyBhIHJlY29tcGVuc2UgdGhhbgogICAgICAgICAgICAgICAgICAgIHRvIHN1cHByZXNzIG11cmRlciBpbiB5b3VyIGNpdHkuIFJhdGhlciwgcmVjYWxsaW5nIHRoZSBvY2Nhc2lvbnMgb24gd2hpY2ggeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSByZXBhaWQgdGhlIHNlcnZpY2VzIHJlbmRlcmVkIHlvdSwgYW5kIHJlbWVtYmVyaW5nIHRoZSBpbnNjcmlwdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIERlbW9waGFudHVzLCBhbHJlYWR5IHJlZmVycmVkIHRvIGJ5IFBob3JtaW8sIG9uIHdoaWNoIGl0IHN0YW5kcyB3cml0dGVuIGFuZAogICAgICAgICAgICAgICAgICAgIGNvbmZpcm1lZCBieSBvYXRoIHRoYXQgd2hvc28gc2hhbGwgc3VmZmVyIGluIGRlZmVuY2Ugb2YgdGhlIGRlbW9jcmFjeSBzaGFsbAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGhlIHNhbWUgcmV3YXJkIGFzIEhhcm1vZGl1cyBhbmQgQXJpc3RvZ2l0b24sIHZvdGUgZm9yIHRoZSByZXBlYWwgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIGxhdzsgZm9yIGlmIHlvdSBkbyBub3QsIGl0IGlzIGltcG9zc2libGUgZm9yIHlvdSB0byBvYnNlcnZlIHlvdXIgb2F0aHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.160'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuZAogICAgICAgICAgICAgICAgICAgIGJlc2lkZXMgYWxsIHRoaXMsIG9ic2VydmUgYSBmdXJ0aGVyIHBvaW50LiBUaGF0IGxhdyBjYW5ub3QgYmUgYSBzb3VuZCBvbmUgd2hpY2gKICAgICAgICAgICAgICAgICAgICBkZWFscyB3aXRoIHRoZSBwYXN0IGFuZCB0aGUgZnV0dXJlIGluIHRoZSBzYW1lIHdheS4g4oCcTm9uZSzigJ0KICAgICAgICAgICAgICAgICAgICBzYXlzIHRoaXMgbGF3LCDigJxzaGFsbCBiZSBpbW11bmUgc2F2ZSBhbmQgZXhjZXB0IHRoZSBkZXNjZW5kYW50cyBvZgogICAgICAgICAgICAgICAgICAgIEhhcm1vZGl1cyBhbmQgQXJpc3RvZ2l0b24u4oCdIEdvb2QhIOKAnE5vciBzaGFsbCBhbnlvbmUgaW4KICAgICAgICAgICAgICAgICAgICBmdXR1cmUgYmUgZ3JhbnRlZCBpbW11bml0eS7igJ0gV2hhdCEgbm90IGV2ZW4gaWYgb3RoZXIgc3VjaCBiZW5lZmFjdG9ycwogICAgICAgICAgICAgICAgICAgIGFyaXNlLCBMZXB0aW5lcz8gSWYgeW91IGZvdW5kIGZhdWx0IHdpdGggdGhlIHBhc3QsIGNhbiBpdCBiZSB0aGF0IHlvdSBhbHNvCiAgICAgICAgICAgICAgICAgICAgZm9yZXNhdyB0aGUgZnV0dXJlPyA8L3RyYW5zbGF0aW9uPg=="
translation['20.161'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVjYXVzZSwgeW91IHdpbGwgc2F5LCB3ZQogICAgICAgICAgICAgICAgICAgIGFyZSBub3cgcGFzdCBzdWNoIGV4cGVjdGF0aW9uLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZGF5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cmFudHMgaXMgcGFzdCwgYW5kIHRoZSBzZXJ2aWNlcyBvZiB0eXJhbm5pY2lkZXMgYXJlIG5vIGxvbmdlcgogICAgICAgICAgICAgICAgICAgICAgICBuZWVkZWQuPC9ub3RlPiBJIHByYXkgdGhhdCB3ZSBtYXkgYmUsIEF0aGVuaWFucy4gQnV0IGFzIHdlIGFyZSBtZXJlIG1vcnRhbHMsCiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBvdXIgbGFuZ3VhZ2Ugbm9yIG91ciBsYXdzIHNob3VsZCBvZmZlbmQgcmVsaWdpb3VzIHNlbnRpbWVudDsgd2UgbWF5IGJvdGgKICAgICAgICAgICAgICAgICAgICBleHBlY3QgYmxlc3NpbmdzIGFuZCBwcmF5IGZvciB0aGVtLCBidXQgd2UgbXVzdCByZWZsZWN0IHRoYXQgYWxsIHRoaW5ncyBhcmUKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25lZCBieSBtb3J0YWxpdHkuIEZvciB0aGUgTGFjZWRhZW1vbmlhbnMgbmV2ZXIgZHJlYW1lZCB0aGF0IHRoZXkgd291bGQKICAgICAgICAgICAgICAgICAgICBiZSBicm91Z2h0IHRvIHRoZWlyIHByZXNlbnQgc3RyYWl0cywgYW5kIHBlcmhhcHMgZXZlbiB0aGUgU3lyYWN1c2Fucywgb25jZSBhCiAgICAgICAgICAgICAgICAgICAgZGVtb2NyYWN5LCB3aG8gZXhhY3RlZCB0cmlidXRlIGZyb20gdGhlIENhcnRoYWdpbmlhbnMgYW5kIHJ1bGVkIGFsbCB0aGVpcgogICAgICAgICAgICAgICAgICAgIG5laWdoYm9ycyBhbmQgYmVhdCBhdCB1cyBhdCBzZWEsIGxpdHRsZSB0aG91Z2h0IHRoZXkgd291bGQgZmFsbCB1bmRlciB0aGUKICAgICAgICAgICAgICAgICAgICB0eXJhbm55IG9mIGEgc2luZ2xlIGNsZXJrLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EaW9ueXNpdXMgSS4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsU3lyYWN1c2UiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFN5cmFjdXNlIj5TeXJhY3VzZTwvcGxhY2VOYW1lPiBzdGFydGVkIGxpZmUgYXMgYQogICAgICAgICAgICAgICAgICAgICAgICBjbGVyayBpbiB0aGUgcHVibGljIHNlcnZpY2UuPC9ub3RlPiBpZiByZXBvcnQgYmUgdHJ1ZS4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTeXJhY3VzZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3lyYWN1c2UiPlN5cmFjdXNlPC9wbGFjZU5hbWU+IHN0YXJ0ZWQgbGlmZSBhcyBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsZXJrIGluIHRoZSBwdWJsaWMgc2VydmljZS48L3RyYW5zbGF0aW9uPg=="
translation['20.162'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIGFnYWluIGNvdWxkIHRoZSBwcmVzZW50IERpb255c2l1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EaW9ueXNpdXMgSUkuLCBleHBlbGxlZCBieSA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+RGlvbjwvc3VybmFtZT48L3BlcnNOYW1lPiBpbiAzNTcuPC9ub3RlPiBldmVyIGhhdmUgZXhhY3RlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkRpb248L3N1cm5hbWU+PC9wZXJzTmFtZT4gaW4gMzU3LjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5EaW9uPC9zdXJuYW1lPjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5EaW9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IHdvdWxkIGNvbWUgYWdhaW5zdCBoaW0gaW4gYQogICAgICAgICAgICAgICAgICAgIGNhcmdvLWJvYXQgd2l0aCBhIGhhbmRmdWwgb2Ygc29sZGllcnMgYW5kIGV4cGVsIHRoZSBtYXN0ZXIgb2Ygc28gbWFueSB3YXJzaGlwcwogICAgICAgICAgICAgICAgICAgIGFuZCBtZXJjZW5hcmllcyBhbmQgY2l0aWVzLiBCdXQsIG1ldGhpbmtzLCB0aGUgZnV0dXJlIGlzIGhpZGRlbiBmcm9tIGFsbCBtZW4sCiAgICAgICAgICAgICAgICAgICAgYW5kIGdyZWF0IGV2ZW50cyBoYW5nIG9uIHNtYWxsIGNoYW5jZXMuIFRoZXJlZm9yZSB3ZSBtdXN0IGJlIG1vZGVzdCBpbiB0aGUgZGF5CiAgICAgICAgICAgICAgICAgICAgb2YgcHJvc3Blcml0eSwgYW5kIG11c3Qgc2hvdyB0aGF0IHdlIGFyZSBub3QgYmxpbmQgdG8gdGhlIGZ1dHVyZS4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkRpb248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['20.163'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlIGFyZSBzdGlsbCBtYW55CiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzIHRoYXQgb25lIG1pZ2h0IGRldmVsb3AgYXQgbGVuZ3RoLCBzaG93aW5nIHRoYXQgdGhpcyBsYXcgaXMgaW4gZXZlcnkKICAgICAgICAgICAgICAgICAgICByZXNwZWN0IHVuc291bmQgYW5kIG9wcG9zZWQgdG8geW91ciBpbnRlcmVzdHM7IGJ1dCB0byBzdW0gdXAgYW5kIGJyaW5nIG15IHNwZWVjaAogICAgICAgICAgICAgICAgICAgIHRvIGEgY29uY2x1c2lvbiwgSSB3aWxsIGFzayB5b3UgdG8gZG8gdGhpcy4gQ2FsY3VsYXRlIGFuZCBjb21wYXJlIGluIHlvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgbWluZHMgd2hhdCB3aWxsIGhhcHBlbiB0byB5b3UgaWYgeW91IHJlcGVhbCB0aGlzIGxhdywgYW5kIHdoYXQgaWYgeW91IGRvIG5vdDsKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlbiBiZSBjYXJlZnVsIHRvIHJlbWVtYmVyIGFsbCB0aGUgY29uc2VxdWVuY2VzIG9mIGVpdGhlciBzdGVwLCBzbyB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIG1heSBtYWtlIHRoZSBiZXR0ZXIgY2hvaWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.164'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGlmLCBvbiBvdXIKICAgICAgICAgICAgICAgICAgICBhZHZpY2UsIHlvdSByZWplY3QgaXQsIGRlc2VydmluZyBtZW4gd2lsbCByZWNlaXZlIHRoZWlyIGR1ZSByZXdhcmQgZnJvbSB5b3UsIGFuZAogICAgICAgICAgICAgICAgICAgIGFueSB1bmRlc2VydmluZyBtYW4g77yIYXNzdW1pbmcgdGhhdCB0aGVyZSBhcmUgc3VjaO+8iSB3aWxsIG5vdAogICAgICAgICAgICAgICAgICAgIG9ubHkgbG9zZSBoaXMgcmV3YXJkLCBidXQgd2lsbCBwYXkgd2hhdGV2ZXIgcGVuYWx0eSB5b3UgYXBwcm92ZSwgaW4gYWNjb3JkYW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGggb3VyIGFsdGVybmF0aXZlIGxhdywgd2hpbGUgYWxsIG1lbiB3aWxsIGFja25vd2xlZGdlIHRoZSBob25vciwganVzdGljZSBhbmQKICAgICAgICAgICAgICAgICAgICB2ZXJhY2l0eSBvZiBvdXIgY2l0eS4gSWYsIG9uIHRoZSBvdGhlciBoYW5kLCB5b3UgYWxsb3cgaXQgdG8gcGFzcywgYXMgSSBwcmF5IHlvdQogICAgICAgICAgICAgICAgICAgIG1heSBub3QsIHRoZSBnb29kIHdpbGwgc3VmZmVyIGZvciB0aGUgc2FrZSBvZiB0aGUgYmFkLCB0aGUgdW5kZXNlcnZpbmcgd2lsbAogICAgICAgICAgICAgICAgICAgIGJyaW5nIGNhbGFtaXR5IG9uIHRoZSByZXN0LCBidXQgY29tZSBvZmYgc2NvdC1mcmVlIHRoZW1zZWx2ZXMsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXB1dGF0aW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB3aWxsIGJlIHRoZQogICAgICAgICAgICAgICAgICAgIHZlcnkgcmV2ZXJzZSBvZiB3aGF0IEkgaGF2ZSBkZXNjcmliZWQ7IGFsbCBtZW4gd2lsbCByZWdhcmQgaGVyIGFzIGZhaXRobGVzcywKICAgICAgICAgICAgICAgICAgICBlbnZpb3VzIGFuZCBtZWFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['20.165'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjUiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgdW53b3J0aHkgb2YgeW91LAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgdG8gcHJlZmVyIHN1Y2ggYSBmb3VsIHJlcHJvYWNoIHRvIGFkdmFudGFnZXMgc28gaG9ub3JhYmxlIGFuZCBzbwogICAgICAgICAgICAgICAgICAgIGFwcHJvcHJpYXRlIHRvIHlvdS4gRm9yIGVhY2ggb2YgeW91IHdpbGwgc2hhcmUgaW5kaXZpZHVhbGx5IGluIHRoZSBjcmVkaXQgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGpvaW50IGRlY2lzaW9uLiBGb3IgaXQgaXMga25vd24gdG8gYWxsIHN0YW5kaW5nIHJvdW5kIHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIHRoZSBnZW5lcmFsIHB1YmxpYzsgdGhlIGp1cnkgd2VyZQogICAgICAgICAgICAgICAgICAgICAgICBzZWF0ZWQuPC9ub3RlPiBhcyB0byBldmVyeW9uZSBlbHNlLCB0aGF0IGluIHRoaXMgY291cnQgTGVwdGluZXMgaXMKICAgICAgICAgICAgICAgICAgICBjb250ZW5kaW5nIHdpdGggdXMsIGJ1dCB3aXRoaW4gdGhlIGNvbnNjaWVuY2Ugb2YgZWFjaCBtZW1iZXIgb2YgdGhlIGp1cnkKICAgICAgICAgICAgICAgICAgICBodW1hbml0eSBpcyBhcnJheWVkIGFnYWluc3QgZW52eSwganVzdGljZSBhZ2FpbnN0IG1hbGljZSwgYW5kIGFsbCB0aGF0IGlzIGdvb2QKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGFsbCB0aGF0IGlzIG1vc3QgYmFzZS4gPC90cmFuc2xhdGlvbj4="
translation['20.166'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjYiIHVuaXQ9InNlY3Rpb24iIC8+SWYgeW91IHlpZWxkCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIG5vYmxlciBpbXB1bHNlIGFuZCBjYXN0IHlvdXIgdm90ZXMgd2l0aCB1cywgeW91IHdpbGwgd2luIGZvciB5b3Vyc2VsdmVzCiAgICAgICAgICAgICAgICAgICAgdGhlIGNyZWRpdCwgYW5kIGZvciB0aGUgU3RhdGUgdGhlIGJlbmVmaXQsIG9mIGEgcmlnaHRlb3VzIHZlcmRpY3QsIGFuZCBpZiBldmVyCiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb24gYXJpc2VzLCB5b3Ugd2lsbCBub3QgbGFjayBmcmllbmRzIHdpbGxpbmcgdG8gZW5jb3VudGVyIHJpc2sgaW4geW91cgogICAgICAgICAgICAgICAgICAgIGJlaGFsZi4gSSBhc2sgeW91LCB0aGVyZWZvcmUsIHRvIHRha2UgYWxsIHRoZXNlIGNvbnNpZGVyYXRpb25zIHNlcmlvdXNseSB0bwogICAgICAgICAgICAgICAgICAgIGhlYXJ0IGFuZCB0byBiZXdhcmUgdGhhdCB5b3UgYXJlIG5vdCBmb3JjZWQgaW50byBhbiBlcnJvciBvZiBqdWRnZW1lbnQuIEZvciBvbgogICAgICAgICAgICAgICAgICAgIG1hbnkgb2NjYXNpb25zLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICBqdXN0aWNlIG9mIHRoZSBjYXNlIGhhcyBub3QgYmVlbiBicm91Z2h0IGhvbWUgdG8geW91LCBidXQgYSB2ZXJkaWN0IGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgd3Jlc3RlZCBmcm9tIHlvdSBieSB0aGUgY2xhbW9yLCB0aGUgdmlvbGVuY2UgYW5kIHRoZSBzaGFtZWxlc3NuZXNzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBsZWFkZXJzLiBMZXQgbm90IHRoYXQgYmUgeW91ciBjYXNlIHRvZGF5LCBmb3IgdGhhdCB3b3VsZCBiZSB1bndvcnRoeSBvZiB5b3U7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
