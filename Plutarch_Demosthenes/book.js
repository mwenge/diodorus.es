var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3ZXJlIGxhdWdoYWJsZSB0byBzdXBwb3NlIHRoYXQgSXVsaXMsIHdoaWNoIGlzIGEgbGl0dGxlIHBhcnQgb2YgdGhlIHNtYWxsIGlzbGFuZCBvZiBDZW9zLCBhbmQgQWVnaW5hLCB3aGljaCBhIGNlcnRhaW4gQXRoZW5pYW4gd2FzIHVyZ2VudCB0byBoYXZlIHJlbW92ZWQgYXMgYW4gZXllLXNvcmUgb2YgdGhlIFBpcmFldXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gOC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVyaWNsZXM8L3RpdGxlPiwgdmlpaS4gNTwvYmlibD4uPC9ub3RlPiBzaG91bGQgYnJlZWQgZ29vZCBhY3RvcnMgYW5kIHBvZXRzLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gOC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVyaWNsZXM8L3RpdGxlPiwgdmlpaS4gNTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVyaWNsZXM8L3RpdGxlPiwgdmlpaS4gNTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGdyZWF0IHBvZXQgU2ltb25pZGVzIHdhcyBvZiBDZW9zLCBhbmQgdGhlIGdyZWF0IGFjdG9yIFBvbHVzIG9mIEFlZ2luYS48L25vdGU+IGJ1dCBzaG91bGQgbmV2ZXIgYmUgYWJsZSB0byBwcm9kdWNlIGEgbWFuIHdobyBpcyBqdXN0LCBpbmRlcGVuZGVudCwgd2lzZSwgYW5kIG1hZ25hbmltb3VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBhcnRzLCBpbmRlZWQsIHNpbmNlIHRoZWlyIG9iamVjdCBpcyB0byBicmluZyBidXNpbmVzcyBvciBmYW1lLCBuYXR1cmFsbHkgcGluZSBhd2F5IGluIG9ic2N1cmUgYW5kIG1lYW4gY2l0aWVzOyBidXQgdmlydHVlLCBsaWtlIGEgc3Ryb25nIGFuZCBoYXJkeSBwbGFudCwgdGFrZXMgcm9vdCBpbiBhbnkgcGxhY2UsIGlmIHNoZSBmaW5kcyB0aGVyZSBhIGdlbmVyb3VzIG5hdHVyZSBhbmQgYSBzcGlyaXQgdGhhdCBzaHVucyBubyBsYWJvdXIuIFdoZXJlZm9yZSB3ZSBhbHNvLCBpZiB3ZSBmYWlsIHRvIGxpdmUgYW5kIHRoaW5rIGFzIHdlIG91Z2h0LCB3aWxsIGp1c3RseSBhdHRyaWJ1dGUgdGhpcywgbm90IHRvIHRoZSBzbWFsbG5lc3Mgb2Ygb3VyIG5hdGl2ZSBjaXR5LCBidXQgdG8gb3Vyc2VsdmVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gb25lIGhhcyB1bmRlcnRha2VuIHRvIGNvbXBvc2UgYSBoaXN0b3J5IGJhc2VkIHVwb24gcmVhZGluZ3Mgd2hpY2ggYXJlIG5vdCByZWFkaWx5IGFjY2Vzc2libGUgb3IgZXZlbiBmb3VuZCBhdCBob21lLCBidXQgaW4gZm9yZWlnbiBjb3VudHJpZXMsIGZvciB0aGUgbW9zdCBwYXJ0LCBhbmQgc2NhdHRlcmVkIGFib3V0IGFtb25nIGRpZmZlcmVudCBvd25lcnMsIGZvciBoaW0gaXQgaXMgcmVhbGx5IG5lY2Vzc2FyeSwgZmlyc3QgYW5kIGFib3ZlIGFsbCB0aGluZ3MsIHRoYXQgaGUgc2hvdWxkIGxpdmUgaW4gYSBjaXR5IHdoaWNoIGlzIGZhbW91cywgZnJpZW5kbHkgdG8gdGhlIGxpYmVyYWwgYXJ0cywgYW5kIHBvcHVsb3VzLCBpbiBvcmRlciB0aGF0IGhlIG1heSBoYXZlIGFsbCBzb3J0cyBvZiBib29rcyBpbiBwbGVudHksIGFuZCBtYXkgYnkgaGVhcnNheSBhbmQgZW5xdWlyeSBjb21lIGludG8gcG9zc2Vzc2lvbiBvZiBhbGwgdGhvc2UgZGV0YWlscyB3aGljaCBlbHVkZSB3cml0ZXJzIGFuZCBhcmUgcHJlc2VydmVkIHdpdGggbW9yZSBjb25zcGljdW91cyBmaWRlbGl0eSBpbiB0aGUgbWVtb3JpZXMgb2YgbWVuLiBIZSB3aWxsIHRodXMgYmUgcHJldmVudGVkIGZyb20gcHVibGlzaGluZyBhIHdvcmsgd2hpY2ggaXMgZGVmaWNpZW50IGluIG1hbnksIGFuZCBldmVuIGluIGVzc2VudGlhbCB0aGluZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgbWUsIEkgbGl2ZSBpbiBhIHNtYWxsIGNpdHksIGFuZCBJIHByZWZlciB0byBkd2VsbCB0aGVyZSB0aGF0IGl0IG1heSBub3QgYmVjb21lIHNtYWxsZXIgc3RpbGw7IGFuZCBkdXJpbmcgdGhlIHRpbWUgd2hlbiBJIHdhcyBpbiBSb21lIGFuZCB2YXJpb3VzIHBhcnRzIG9mIEl0YWx5IEkgaGFkIG5vIGxlaXN1cmUgdG8gcHJhY3Rpc2UgbXlzZWxmIGluIHRoZSBSb21hbiBsYW5ndWFnZSwgb3dpbmcgdG8gbXkgcHVibGljIGR1dGllcyBhbmQgdGhlIG51bWJlciBvZiBteSBwdXBpbHMgaW4gcGhpbG9zb3BoeS4gSXQgd2FzIHRoZXJlZm9yZSBsYXRlIGFuZCB3aGVuIEkgd2FzIHdlbGwgb24gaW4geWVhcnMgdGhhdCBJIGJlZ2FuIHRvIHN0dWR5IFJvbWFuIGxpdGVyYXR1cmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZXJlIG15IGV4cGVyaWVuY2Ugd2FzIGFuIGFzdG9uaXNoaW5nIHRoaW5nLCBidXQgdHJ1ZS4gRm9yIGl0IHdhcyBub3Qgc28gbXVjaCB0aGF0IGJ5IG1lYW5zIG9mIHdvcmRzIEkgY2FtZSB0byBhIGNvbXBsZXRlIHVuZGVyc3RhbmRpbmcgb2YgdGhpbmdzLCBhcyB0aGF0IGZyb20gdGhpbmdzIEkgc29tZWhvdyBoYWQgYW4gZXhwZXJpZW5jZSB3aGljaCBlbmFibGVkIG1lIHRvIGZvbGxvdyB0aGUgbWVhbmluZyBvZiB3b3Jkcy4gQnV0IHRvIGFwcHJlY2lhdGUgdGhlIGJlYXV0eSBhbmQgcXVpY2tuZXNzIG9mIHRoZSBSb21hbiBzdHlsZSwgdGhlIGZpZ3VyZXMgb2Ygc3BlZWNoLCB0aGUgcmh5dGhtLCBhbmQgdGhlIG90aGVyIGVtYmVsbGlzaG1lbnRzIG9mIHRoZSBsYW5ndWFnZSwgd2hpbGUgSSB0aGluayBpdCBhIGdyYWNlZnVsIGFjY29tcGxpc2htZW50IGFuZCBvbmUgbm90IHdpdGhvdXQgaXRzIHBsZWFzdXJlcywgc3RpbGwsIHRoZSBjYXJlZnVsIHByYWN0aWNlIG5lY2Vzc2FyeSBmb3IgYXR0YWluaW5nIHRoaXMgaXMgbm90IGVhc3kgZm9yIG9uZSBsaWtlIG1lLCBidXQgYXBwcm9wcmlhdGUgZm9yIHRob3NlIHdobyBoYXZlIG1vcmUgbGVpc3VyZSBhbmQgd2hvc2UgcmVtYWluaW5nIHllYXJzIHN0aWxsIHN1ZmZpY2UgZm9yIHN1Y2ggcHVyc3VpdHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB3aGVuIG9uZSBoYXMgdW5kZXJ0YWtlbiB0byBjb21wb3NlIGEgaGlzdG9yeSBiYXNlZCB1cG9uIHJlYWRpbmdzIHdoaWNoIGFyZSBub3QgcmVhZGlseSBhY2Nlc3NpYmxlIG9yIGV2ZW4gZm91bmQgYXQgaG9tZSwgYnV0IGluIGZvcmVpZ24gY291bnRyaWVzLCBmb3IgdGhlIG1vc3QgcGFydCwgYW5kIHNjYXR0ZXJlZCBhYm91dCBhbW9uZyBkaWZmZXJlbnQgb3duZXJzLCBmb3IgaGltIGl0IGlzIHJlYWxseSBuZWNlc3NhcnksIGZpcnN0IGFuZCBhYm92ZSBhbGwgdGhpbmdzLCB0aGF0IGhlIHNob3VsZCBsaXZlIGluIGEgY2l0eSB3aGljaCBpcyBmYW1vdXMsIGZyaWVuZGx5IHRvIHRoZSBsaWJlcmFsIGFydHMsIGFuZCBwb3B1bG91cywgaW4gb3JkZXIgdGhhdCBoZSBtYXkgaGF2ZSBhbGwgc29ydHMgb2YgYm9va3MgaW4gcGxlbnR5LCBhbmQgbWF5IGJ5IGhlYXJzYXkgYW5kIGVucXVpcnkgY29tZSBpbnRvIHBvc3Nlc3Npb24gb2YgYWxsIHRob3NlIGRldGFpbHMgd2hpY2ggZWx1ZGUgd3JpdGVycyBhbmQgYXJlIHByZXNlcnZlZCB3aXRoIG1vcmUgY29uc3BpY3VvdXMgZmlkZWxpdHkgaW4gdGhlIG1lbW9yaWVzIG9mIG1lbi4gSGUgd2lsbCB0aHVzIGJlIHByZXZlbnRlZCBmcm9tIHB1Ymxpc2hpbmcgYSB3b3JrIHdoaWNoIGlzIGRlZmljaWVudCBpbiBtYW55LCBhbmQgZXZlbiBpbiBlc3NlbnRpYWwgdGhpbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgbWUsIEkgbGl2ZSBpbiBhIHNtYWxsIGNpdHksIGFuZCBJIHByZWZlciB0byBkd2VsbCB0aGVyZSB0aGF0IGl0IG1heSBub3QgYmVjb21lIHNtYWxsZXIgc3RpbGw7IGFuZCBkdXJpbmcgdGhlIHRpbWUgd2hlbiBJIHdhcyBpbiBSb21lIGFuZCB2YXJpb3VzIHBhcnRzIG9mIEl0YWx5IEkgaGFkIG5vIGxlaXN1cmUgdG8gcHJhY3Rpc2UgbXlzZWxmIGluIHRoZSBSb21hbiBsYW5ndWFnZSwgb3dpbmcgdG8gbXkgcHVibGljIGR1dGllcyBhbmQgdGhlIG51bWJlciBvZiBteSBwdXBpbHMgaW4gcGhpbG9zb3BoeS4gSXQgd2FzIHRoZXJlZm9yZSBsYXRlIGFuZCB3aGVuIEkgd2FzIHdlbGwgb24gaW4geWVhcnMgdGhhdCBJIGJlZ2FuIHRvIHN0dWR5IFJvbWFuIGxpdGVyYXR1cmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZXJlIG15IGV4cGVyaWVuY2Ugd2FzIGFuIGFzdG9uaXNoaW5nIHRoaW5nLCBidXQgdHJ1ZS4gRm9yIGl0IHdhcyBub3Qgc28gbXVjaCB0aGF0IGJ5IG1lYW5zIG9mIHdvcmRzIEkgY2FtZSB0byBhIGNvbXBsZXRlIHVuZGVyc3RhbmRpbmcgb2YgdGhpbmdzLCBhcyB0aGF0IGZyb20gdGhpbmdzIEkgc29tZWhvdyBoYWQgYW4gZXhwZXJpZW5jZSB3aGljaCBlbmFibGVkIG1lIHRvIGZvbGxvdyB0aGUgbWVhbmluZyBvZiB3b3Jkcy4gQnV0IHRvIGFwcHJlY2lhdGUgdGhlIGJlYXV0eSBhbmQgcXVpY2tuZXNzIG9mIHRoZSBSb21hbiBzdHlsZSwgdGhlIGZpZ3VyZXMgb2Ygc3BlZWNoLCB0aGUgcmh5dGhtLCBhbmQgdGhlIG90aGVyIGVtYmVsbGlzaG1lbnRzIG9mIHRoZSBsYW5ndWFnZSwgd2hpbGUgSSB0aGluayBpdCBhIGdyYWNlZnVsIGFjY29tcGxpc2htZW50IGFuZCBvbmUgbm90IHdpdGhvdXQgaXRzIHBsZWFzdXJlcywgc3RpbGwsIHRoZSBjYXJlZnVsIHByYWN0aWNlIG5lY2Vzc2FyeSBmb3IgYXR0YWluaW5nIHRoaXMgaXMgbm90IGVhc3kgZm9yIG9uZSBsaWtlIG1lLCBidXQgYXBwcm9wcmlhdGUgZm9yIHRob3NlIHdobyBoYXZlIG1vcmUgbGVpc3VyZSBhbmQgd2hvc2UgcmVtYWluaW5nIHllYXJzIHN0aWxsIHN1ZmZpY2UgZm9yIHN1Y2ggcHVyc3VpdHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlLCBpbiB0aGlzIGZpZnRoIGJvb2s8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gMi40IiB2YWxpZD0ieWVzIj5ub3RlIG9uIHRoZTx0aXRsZT5EaW9uPC90aXRsZT4sIGlpLiA0PC9iaWJsPi48L25vdGU+IG9mIG15IFBhcmFsbGVsIExpdmVzLCB3aGVyZSBJIHdyaXRlIGFib3V0IERlbW9zdGhlbmVzIGFuZCBDaWNlcm8sIEkgc2hhbGwgZXhhbWluZSB0aGVpciBhY3Rpb25zIGFuZCB0aGVpciBwb2xpdGljYWwgY2FyZWVycyB0byBzZWUgaG93IHRoZWlyIG5hdHVyZXMgYW5kIGRpc3Bvc2l0aW9ucyBjb21wYXJlIHdpdGggb25lIGFub3RoZXIsIGJ1dCBJIHNoYWxsIG1ha2Ugbm8gY3JpdGljYWwgY29tcGFyaXNvbiBvZiB0aGVpciBzcGVlY2hlcywgbm9yIHRyeSB0byBzaG93IHdoaWNoIHdhcyB0aGUgbW9yZSBhZ3JlZWFibGUgb3IgdGhlIG1vcmUgcG93ZXJmdWwgb3JhdG9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIHVzZWxlc3MsPC9xPiBhcyBJb24gc2F5cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pcyBhIGRvbHBoaW4ncyBtaWdodCB1cG9uIGRyeSBncm91bmQsPC9xPiBhIG1heGltIHdoaWNoIENhZWNpbGl1cywgd2hvIGdvZXMgdG8gZXhjZXNzIGluIGV2ZXJ5dGhpbmcsIGZvcmdvdCB3aGVuIGhlIGJvbGRseSB2ZW50dXJlZCB0byBwdXQgZm9ydGggYSBjb21wYXJpc29uIG9mIERlbW9zdGhlbmVzIGFuZCBDaWNlcm8uIEJ1dCByZWFsbHkgaXQgaXMgcG9zc2libGUgdGhhdCwgaWYgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+S25vdyB0aHlzZWxmPC9xPiBvZiB0aGUgb3JhY2xlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgRGVscGhpLjwvbm90ZT4gd2VyZSBhbiBlYXN5IHRoaW5nIGZvciBldmVyeSBtYW4sIGl0IHdvdWxkIG5vdCBiZSBoZWxkIHRvIGJlIGEgZGl2aW5lIGluanVuY3Rpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIGluIHRoaXMgZmlmdGggYm9vazxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gMi40IiB2YWxpZD0ieWVzIj5ub3RlIG9uIHRoZTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpb248L3RpdGxlPiwgaWkuIDQ8L2JpYmw+Ljwvbm90ZT4gb2YgbXkgUGFyYWxsZWwgTGl2ZXMsIHdoZXJlIEkgd3JpdGUgYWJvdXQgRGVtb3N0aGVuZXMgYW5kIENpY2VybywgSSBzaGFsbCBleGFtaW5lIHRoZWlyIGFjdGlvbnMgYW5kIHRoZWlyIHBvbGl0aWNhbCBjYXJlZXJzIHRvIHNlZSBob3cgdGhlaXIgbmF0dXJlcyBhbmQgZGlzcG9zaXRpb25zIGNvbXBhcmUgd2l0aCBvbmUgYW5vdGhlciwgYnV0IEkgc2hhbGwgbWFrZSBubyBjcml0aWNhbCBjb21wYXJpc29uIG9mIHRoZWlyIHNwZWVjaGVzLCBub3IgdHJ5IHRvIHNob3cgd2hpY2ggd2FzIHRoZSBtb3JlIGFncmVlYWJsZSBvciB0aGUgbW9yZSBwb3dlcmZ1bCBvcmF0b3IuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGlvIDIuNCIgdmFsaWQ9InllcyI+bm90ZSBvbiB0aGU8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaW9uPC90aXRsZT4sIGlpLiA0PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaW9uPC90aXRsZT4sIGlpLiA0PC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB1c2VsZXNzLDwvcT4gYXMgSW9uIHNheXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pcyBhIGRvbHBoaW4ncyBtaWdodCB1cG9uIGRyeSBncm91bmQsPC9xPiBhIG1heGltIHdoaWNoIENhZWNpbGl1cywgd2hvIGdvZXMgdG8gZXhjZXNzIGluIGV2ZXJ5dGhpbmcsIGZvcmdvdCB3aGVuIGhlIGJvbGRseSB2ZW50dXJlZCB0byBwdXQgZm9ydGggYSBjb21wYXJpc29uIG9mIERlbW9zdGhlbmVzIGFuZCBDaWNlcm8uIEJ1dCByZWFsbHkgaXQgaXMgcG9zc2libGUgdGhhdCwgaWYgdGhlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Lbm93IHRoeXNlbGY8L3E+IG9mIHRoZSBvcmFjbGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IERlbHBoaS48L25vdGU+IHdlcmUgYW4gZWFzeSB0aGluZyBmb3IgZXZlcnkgbWFuLCBpdCB3b3VsZCBub3QgYmUgaGVsZCB0byBiZSBhIGRpdmluZSBpbmp1bmN0aW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSBjYXNlIG9mIERlbW9zdGhlbmVzIGFuZCBDaWNlcm8sIHRoZW4sIGl0IHdvdWxkIHNlZW0gdGhhdCB0aGUgRGVpdHkgb3JpZ2luYWxseSBmYXNoaW9uZWQgdGhlbSBvbiB0aGUgc2FtZSBwbGFuLCBpbXBsYW50aW5nIGluIHRoZWlyIG5hdHVyZXMgbWFueSBzaW1pbGFyaXRpZXMsIHN1Y2ggYXMgdGhlaXIgbG92ZSBvZiBkaXN0aW5jdGlvbiwgdGhlaXIgbG92ZSBvZiBmcmVlZG9tIGluIHRoZWlyIHBvbGl0aWNhbCBhY3Rpdml0aWVzLCBhbmQgdGhlaXIgbGFjayBvZiBjb3VyYWdlIGZvciB3YXJzIGFuZCBkYW5nZXJzLCBhbmQgdW5pdGluZyBpbiB0aGVtIGFsc28gbWFueSBzaW1pbGFyaXRpZXMgb2YgZm9ydHVuZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW4gbXkgb3BpbmlvbiB0d28gb3RoZXIgb3JhdG9ycyBjb3VsZCBub3QgYmUgZm91bmQgd2hvLCBmcm9tIHNtYWxsIGFuZCBvYnNjdXJlIGJlZ2lubmluZ3MsIGJlY2FtZSBncmVhdCBhbmQgcG93ZXJmdWw7IHdobyBjYW1lIGludG8gY29uZmxpY3Qgd2l0aCBraW5ncyBhbmQgdHlyYW50czsgd2hvIGxvc3QgZWFjaCBhIGRhdWdodGVyOyB3aG8gd2VyZSBiYW5pc2hlZCBmcm9tIHRoZWlyIG5hdGl2ZSBjaXRpZXMgYW5kIHJldHVybmVkIHdpdGggaG9ub3VyOyBhbmQgd2hvLCBhZnRlciB0YWtpbmcgdG8gZmxpZ2h0IGFnYWluIGFuZCBiZWluZyBjYXB0dXJlZCBieSB0aGVpciBlbmVtaWVzLCBlbmRlZCB0aGVpciBsaXZlcyBhcyBzb29uIGFzIHRoZWlyIGNvdW50cnltZW4gY2Vhc2VkIHRvIGJlIGZyZWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoYXQsIGlmIHRoZXJlIHNob3VsZCBiZSBhIGNvbXBldGl0aW9uIGJldHdlZW4gbmF0dXJlIGFuZCBmb3J0dW5lLCBhcyBiZXR3ZWVuIGFydGlzdHMsIGl0IHdvdWxkIGJlIGRpZmZpY3VsdCB0byBkZWNpZGUgd2hldGhlciB0aGUgb25lIG1hZGUgdGhlIG1lbiBtb3JlIGFsaWtlIGluIHRoZWlyIGNoYXJhY3RlcnMsIG9yIHRoZSBvdGhlciBpbiB0aGUgY2lyY3Vtc3RhbmNlcyBvZiB0aGVpciBsaXZlcy4gQnV0IEkgbXVzdCBzcGVhayBvZiB0aGUgbW9yZSBhbmNpZW50IGZpcnN0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbiBteSBvcGluaW9uIHR3byBvdGhlciBvcmF0b3JzIGNvdWxkIG5vdCBiZSBmb3VuZCB3aG8sIGZyb20gc21hbGwgYW5kIG9ic2N1cmUgYmVnaW5uaW5ncywgYmVjYW1lIGdyZWF0IGFuZCBwb3dlcmZ1bDsgd2hvIGNhbWUgaW50byBjb25mbGljdCB3aXRoIGtpbmdzIGFuZCB0eXJhbnRzOyB3aG8gbG9zdCBlYWNoIGEgZGF1Z2h0ZXI7IHdobyB3ZXJlIGJhbmlzaGVkIGZyb20gdGhlaXIgbmF0aXZlIGNpdGllcyBhbmQgcmV0dXJuZWQgd2l0aCBob25vdXI7IGFuZCB3aG8sIGFmdGVyIHRha2luZyB0byBmbGlnaHQgYWdhaW4gYW5kIGJlaW5nIGNhcHR1cmVkIGJ5IHRoZWlyIGVuZW1pZXMsIGVuZGVkIHRoZWlyIGxpdmVzIGFzIHNvb24gYXMgdGhlaXIgY291bnRyeW1lbiBjZWFzZWQgdG8gYmUgZnJlZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoYXQsIGlmIHRoZXJlIHNob3VsZCBiZSBhIGNvbXBldGl0aW9uIGJldHdlZW4gbmF0dXJlIGFuZCBmb3J0dW5lLCBhcyBiZXR3ZWVuIGFydGlzdHMsIGl0IHdvdWxkIGJlIGRpZmZpY3VsdCB0byBkZWNpZGUgd2hldGhlciB0aGUgb25lIG1hZGUgdGhlIG1lbiBtb3JlIGFsaWtlIGluIHRoZWlyIGNoYXJhY3RlcnMsIG9yIHRoZSBvdGhlciBpbiB0aGUgY2lyY3Vtc3RhbmNlcyBvZiB0aGVpciBsaXZlcy4gQnV0IEkgbXVzdCBzcGVhayBvZiB0aGUgbW9yZSBhbmNpZW50IGZpcnN0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkRlbW9zdGhlbmVzLCB0aGUgZmF0aGVyIG9mIERlbW9zdGhlbmVzLCBiZWxvbmdlZCB0byB0aGUgYmV0dGVyIGNsYXNzIG9mIGNpdGl6ZW5zLCBhcyBUaGVvcG9tcHVzIHRlbGxzIHVzLCBhbmQgd2FzIHN1cm5hbWVkIEN1dGxlciwgYmVjYXVzZSBoZSBoYWQgYSBsYXJnZSBmYWN0b3J5IGFuZCBzbGF2ZXMgd2hvIHdlcmUgc2tpbGxlZCB3b3JrbWVuIGluIHRoaXMgYnVzaW5lc3MuIEJ1dCBhcyBmb3Igd2hhdCBBZXNjaGluZXMgdGhlIG9yYXRvciBzYXlzIG9mIHRoZSBtb3RoZXIgb2YgRGVtb3N0aGVuZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjE3MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5PbiB0aGUgQ3Jvd248L3RpdGxlPizCp8KnMTcxIGY8L2JpYmw+Ljwvbm90ZT4gbmFtZWx5LCB0aGF0IHNoZSB3YXMgYSBkYXVnaHRlciBvZiBvbmUgR3lsb24sIHdobyB3YXMgYmFuaXNoZWQgZnJvbSB0aGUgY2l0eSBvbiBhIGNoYXJnZSBvZiB0cmVhc29uLCBhbmQgb2YgYSBiYXJiYXJpYW4gd29tYW4sIEkgY2Fubm90IHNheSB3aGV0aGVyIGhlIHNwZWFrcyB0cnVseSwgb3IgaXMgdXR0ZXJpbmcgc2xhbmRlciBhbmQgbGllcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYXQgdGhlIGFnZSBvZiBzZXZlbiwgRGVtb3N0aGVuZXMgd2FzIGxlZnQgYnkgaGlzIGZhdGhlciBpbiBhZmZsdWVuY2UsIHNpbmNlIHRoZSB0b3RhbCB2YWx1ZSBvZiBoaXMgZXN0YXRlIGZlbGwgbGl0dGxlIHNob3J0IG9mIGZpZnRlZW4gdGFsZW50czs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHRhbGVudCB3YXMgZXF1aXZhbGVudCB0byBhYm91dCDCozIzNSwgb3IgJDEsMjAwLCB3aXRoIGZpdmUgb3Igc2l4IHRpbWVzIHRoZSBwdXJjaGFzaW5nIHBvd2VyIG9mIG1vZGVybiBtb25leS48L25vdGU+IGJ1dCBoZSB3YXMgd3JvbmdlZCBieSBoaXMgZ3VhcmRpYW5zLCB3aG8gYXBwcm9wcmlhdGVkIHNvbWUgb2YgaGlzIHByb3BlcnR5IHRvIHRoZWlyIG93biB1c2VzIGFuZCBuZWdsZWN0ZWQgdGhlIHJlc3QsIHNvIHRoYXQgZXZlbiBoaXMgdGVhY2hlcnMgd2VyZSBkZXByaXZlZCBvZiB0aGVpciBwYXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBmb3IgdGhpcyByZWFzb24sIGFzIGl0IHNlZW1zLCB0aGF0IGhlIGRpZCBub3QgcHVyc3VlIHRoZSBzdHVkaWVzIHdoaWNoIHdlcmUgc3VpdGFibGUgYW5kIHByb3BlciBmb3IgYSB3ZWxsLWJvcm4gYm95LCBhbmQgYWxzbyBiZWNhdXNlIG9mIGhpcyBib2RpbHkgd2Vha25lc3MgYW5kIGZyYWdpbGl0eSwgc2luY2UgaGlzIG1vdGhlciB3b3VsZCBub3QgcGVybWl0IGhpbSB0byB3b3JrIGhhcmQgaW4gdGhlIHBhbGFlc3RyYSwgYW5kIGhpcyB0dXRvcnMgd291bGQgbm90IGZvcmNlIGhpbSB0byBkbyBzby4gRm9yIGZyb20gdGhlIGZpcnN0IGhlIHdhcyBsZWFuIGFuZCBzaWNrbHksIGFuZCBoaXMgb3Bwcm9icmlvdXMgc3VybmFtZSBvZiBCYXRhbHVzIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGdpdmVuIGhpbSBieSB0aGUgYm95cyBpbiBtb2NrZXJ5IG9mIGhpcyBwaHlzaXF1ZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEJhdGFsdXMsIGFzIHNvbWUgc2F5LCB3YXMgYW4gZWZmZW1pbmF0ZSBmbHV0ZS1wbGF5ZXIsIGFuZCBBbnRpcGhhbmVzIHdyb3RlIGEgZmFyY2UgaW4gd2hpY2ggaGUgaGVsZCBoaW0gdXAgdG8gcmlkaWN1bGUgZm9yIHRoaXMuIEJ1dCBzb21lIHNwZWFrIG9mIEJhdGFsdXMgYXMgYSBwb2V0IHdobyB3cm90ZSB2b2x1cHR1b3VzIHZlcnNlcyBhbmQgZHJpbmtpbmcgc29uZ3MuIEFuZCBpdCBhcHBlYXJzIHRoYXQgb25lIG9mIHRoZSBwYXJ0cyBvZiB0aGUgYm9keSB3aGljaCBpdCBpcyBub3QgZGVjZW50IHRvIG5hbWUgd2FzIGF0IHRoYXQgdGltZSBjYWxsZWQgQmF0YWx1cyBieSB0aGUgQXRoZW5pYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG5hbWUgb2YgQXJnYXMgKGZvciB0aGV5IHRlbGwgdXMgdGhhdCBEZW1vc3RoZW5lcyBoYWQgdGhpcyBuaWNrbmFtZSBhbHNvKSB3YXMgZ2l2ZW4gaGltIGVpdGhlciB3aXRoIHJlZmVyZW5jZSB0byBoaXMgbWFubmVycywgd2hpY2ggd2VyZSBoYXJzaCBhbmQgc2F2YWdlLCB0aGUgc25ha2UgYmVpbmcgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YXJnYXM8L3E+IGJ5IHNvbWUgb2YgdGhlIHBvZXRzOyBvciB3aXRoIHJlZmVyZW5jZSB0byBoaXMgd2F5IG9mIHNwZWFraW5nLCB3aGljaCB3YXMgZGlzdHJlc3NpbmcgdG8gaGlzIGhlYXJlcnMsIEFyZ2FzIGJlaW5nIHRoZSBuYW1lIG9mIGEgY29tcG9zZXIgb2YgdmlsZSBhbmQgZGlzYWdyZWVhYmxlIHNvbmdzLiBTbyBtdWNoIG9uIHRoaXMgaGVhZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5EZW1vc3RoZW5lcywgdGhlIGZhdGhlciBvZiBEZW1vc3RoZW5lcywgYmVsb25nZWQgdG8gdGhlIGJldHRlciBjbGFzcyBvZiBjaXRpemVucywgYXMgVGhlb3BvbXB1cyB0ZWxscyB1cywgYW5kIHdhcyBzdXJuYW1lZCBDdXRsZXIsIGJlY2F1c2UgaGUgaGFkIGEgbGFyZ2UgZmFjdG9yeSBhbmQgc2xhdmVzIHdobyB3ZXJlIHNraWxsZWQgd29ya21lbiBpbiB0aGlzIGJ1c2luZXNzLiBCdXQgYXMgZm9yIHdoYXQgQWVzY2hpbmVzIHRoZSBvcmF0b3Igc2F5cyBvZiB0aGUgbW90aGVyIG9mIERlbW9zdGhlbmVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMTcxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4swqfCpzE3MSBmPC9iaWJsPi48L25vdGU+IG5hbWVseSwgdGhhdCBzaGUgd2FzIGEgZGF1Z2h0ZXIgb2Ygb25lIEd5bG9uLCB3aG8gd2FzIGJhbmlzaGVkIGZyb20gdGhlIGNpdHkgb24gYSBjaGFyZ2Ugb2YgdHJlYXNvbiwgYW5kIG9mIGEgYmFyYmFyaWFuIHdvbWFuLCBJIGNhbm5vdCBzYXkgd2hldGhlciBoZSBzcGVha3MgdHJ1bHksIG9yIGlzIHV0dGVyaW5nIHNsYW5kZXIgYW5kIGxpZXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMy4xNzEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgQ3Jvd248L3RpdGxlPizCp8KnMTcxIGY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBDcm93bjwvdGl0bGU+LMKnwqcxNzEgZjwvdHJhbnNsYXRpb24+"
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGF0IHRoZSBhZ2Ugb2Ygc2V2ZW4sIERlbW9zdGhlbmVzIHdhcyBsZWZ0IGJ5IGhpcyBmYXRoZXIgaW4gYWZmbHVlbmNlLCBzaW5jZSB0aGUgdG90YWwgdmFsdWUgb2YgaGlzIGVzdGF0ZSBmZWxsIGxpdHRsZSBzaG9ydCBvZiBmaWZ0ZWVuIHRhbGVudHM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIHRhbGVudCB3YXMgZXF1aXZhbGVudCB0byBhYm91dCDCozIzNSwgb3IgJDEsMjAwLCB3aXRoIGZpdmUgb3Igc2l4IHRpbWVzIHRoZSBwdXJjaGFzaW5nIHBvd2VyIG9mIG1vZGVybiBtb25leS48L25vdGU+IGJ1dCBoZSB3YXMgd3JvbmdlZCBieSBoaXMgZ3VhcmRpYW5zLCB3aG8gYXBwcm9wcmlhdGVkIHNvbWUgb2YgaGlzIHByb3BlcnR5IHRvIHRoZWlyIG93biB1c2VzIGFuZCBuZWdsZWN0ZWQgdGhlIHJlc3QsIHNvIHRoYXQgZXZlbiBoaXMgdGVhY2hlcnMgd2VyZSBkZXByaXZlZCBvZiB0aGVpciBwYXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBmb3IgdGhpcyByZWFzb24sIGFzIGl0IHNlZW1zLCB0aGF0IGhlIGRpZCBub3QgcHVyc3VlIHRoZSBzdHVkaWVzIHdoaWNoIHdlcmUgc3VpdGFibGUgYW5kIHByb3BlciBmb3IgYSB3ZWxsLWJvcm4gYm95LCBhbmQgYWxzbyBiZWNhdXNlIG9mIGhpcyBib2RpbHkgd2Vha25lc3MgYW5kIGZyYWdpbGl0eSwgc2luY2UgaGlzIG1vdGhlciB3b3VsZCBub3QgcGVybWl0IGhpbSB0byB3b3JrIGhhcmQgaW4gdGhlIHBhbGFlc3RyYSwgYW5kIGhpcyB0dXRvcnMgd291bGQgbm90IGZvcmNlIGhpbSB0byBkbyBzby4gRm9yIGZyb20gdGhlIGZpcnN0IGhlIHdhcyBsZWFuIGFuZCBzaWNrbHksIGFuZCBoaXMgb3Bwcm9icmlvdXMgc3VybmFtZSBvZiBCYXRhbHVzIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGdpdmVuIGhpbSBieSB0aGUgYm95cyBpbiBtb2NrZXJ5IG9mIGhpcyBwaHlzaXF1ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBCYXRhbHVzLCBhcyBzb21lIHNheSwgd2FzIGFuIGVmZmVtaW5hdGUgZmx1dGUtcGxheWVyLCBhbmQgQW50aXBoYW5lcyB3cm90ZSBhIGZhcmNlIGluIHdoaWNoIGhlIGhlbGQgaGltIHVwIHRvIHJpZGljdWxlIGZvciB0aGlzLiBCdXQgc29tZSBzcGVhayBvZiBCYXRhbHVzIGFzIGEgcG9ldCB3aG8gd3JvdGUgdm9sdXB0dW91cyB2ZXJzZXMgYW5kIGRyaW5raW5nIHNvbmdzLiBBbmQgaXQgYXBwZWFycyB0aGF0IG9uZSBvZiB0aGUgcGFydHMgb2YgdGhlIGJvZHkgd2hpY2ggaXQgaXMgbm90IGRlY2VudCB0byBuYW1lIHdhcyBhdCB0aGF0IHRpbWUgY2FsbGVkIEJhdGFsdXMgYnkgdGhlIEF0aGVuaWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbmFtZSBvZiBBcmdhcyAoZm9yIHRoZXkgdGVsbCB1cyB0aGF0IERlbW9zdGhlbmVzIGhhZCB0aGlzIG5pY2tuYW1lIGFsc28pIHdhcyBnaXZlbiBoaW0gZWl0aGVyIHdpdGggcmVmZXJlbmNlIHRvIGhpcyBtYW5uZXJzLCB3aGljaCB3ZXJlIGhhcnNoIGFuZCBzYXZhZ2UsIHRoZSBzbmFrZSBiZWluZyBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFyZ2FzPC9xPiBieSBzb21lIG9mIHRoZSBwb2V0czsgb3Igd2l0aCByZWZlcmVuY2UgdG8gaGlzIHdheSBvZiBzcGVha2luZywgd2hpY2ggd2FzIGRpc3RyZXNzaW5nIHRvIGhpcyBoZWFyZXJzLCBBcmdhcyBiZWluZyB0aGUgbmFtZSBvZiBhIGNvbXBvc2VyIG9mIHZpbGUgYW5kIGRpc2FncmVlYWJsZSBzb25ncy4gU28gbXVjaCBvbiB0aGlzIGhlYWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG9yaWdpbiBvZiBoaXMgZWFnZXIgZGVzaXJlIHRvIGJlIGFuIG9yYXRvciwgdGhleSB0ZWxsIHVzLCB3YXMgYXMgZm9sbG93cy4gQ2FsbGlzdHJhdHVzIHRoZSBvcmF0b3Igd2FzIGdvaW5nIHRvIG1ha2UgYSBwbGVhIGluIGNvdXJ0IG9uIHRoZSBxdWVzdGlvbiBvZiBPcm9wdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY2IEIuQy4gT3JvcHVzLCBhIHRvd24gb24gdGhlIGNvbmZpbmVzIG9mIEF0dGljYSBhbmQgQm9lb3RpYSwgd2FzIHdyZXN0ZWQgZnJvbSBBdGhlbnMgYnkgdGhlIFRoZWJhbnMuIFN1YnNlcXVlbnRseSB0aGVyZSB3YXMgYSB0cmlhbCBmb3IgdHJlYXNvbiBhdCBBdGhlbnMsIGluIHdoaWNoIENhbGxpc3RyYXR1cyB0aGUgb3JhdG9yIGFuZCBDaGFicmlhcyB0aGUgZ2VuZXJhbCBmaWd1cmVkLCBidXQgdGhlIGRldGFpbHMgb2YgdGhlIHRyaWFsIGFyZSBvYnNjdXJlLjwvbm90ZT4gYW5kIHRoZSB0cmlhbCB3YXMgZWFnZXJseSBhd2FpdGVkLCBub3Qgb25seSBiZWNhdXNlIG9mIHRoZSBhYmlsaXR5IG9mIHRoZSBvcmF0b3IsIHdobyB3YXMgdGhlbiBhdCB0aGUgdmVyeSBoZWlnaHQgb2YgaGlzIHJlcHV0YXRpb24sIGJ1dCBhbHNvIGJlY2F1c2Ugb2YgdGhlIGNpcmN1bXN0YW5jZXMgb2YgdGhlIGNhc2UsIHdoaWNoIHdhcyBub3RvcmlvdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIERlbW9zdGhlbmVzIGhlYXJkIHRoZSB0ZWFjaGVycyBhbmQgdHV0b3JzIGFncmVlaW5nIGFtb25nIHRoZW1zZWx2ZXMgdG8gYmUgcHJlc2VudCBhdCB0aGUgdHJpYWwsIHdpdGggZ3JlYXQgaW1wb3J0dW5pdHkgaGUgcGVyc3VhZGVkIGhpcyBvd24gdHV0b3IgdG8gdGFrZSBoaW0gdG8gdGhlIGhlYXJpbmcuIFRoaXMgdHV0b3IsIGhhdmluZyBhbiBhY3F1YWludGFuY2Ugd2l0aCB0aGUgcHVibGljIG9mZmljaWFscyB3aG8gb3BlbmVkIHRoZSBjb3VydHMsIHN1Y2NlZWRlZCBpbiBwcm9jdXJpbmcgYSBwbGFjZSB3aGVyZSB0aGUgYm95IGNvdWxkIHNpdCB1bnNlZW4gYW5kIGxpc3RlbiB0byB3aGF0IHdhcyBzYWlkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DYWxsaXN0cmF0dXMgd29uIGhpcyBjYXNlIGFuZCB3YXMgZXh0cmF2YWdhbnRseSBhZG1pcmVkLCBhbmQgRGVtb3N0aGVuZXMgY29uY2VpdmVkIGEgZGVzaXJlIHRvIGVtdWxhdGUgaGlzIGZhbWUsIHNlZWluZyBoaW0gZXNjb3J0ZWQgb24gaGlzIHdheSBieSB0aGUgbXVsdGl0dWRlIGFuZCBjb25ncmF0dWxhdGVkIGJ5IGFsbDsgYnV0IGhlIGhhZCBhIG1vcmUgd29uZGVyaW5nIGFwcHJlY2lhdGlvbiBvZiB0aGUgcG93ZXIgb2YgaGlzIG9yYXRvcnksIHdoaWNoIHdhcyBuYXR1cmFsbHkgYWRhcHRlZCB0byBzdWJkdWUgYW5kIG1hc3RlciBhbGwgb3Bwb3NpdGlvbi4gV2hlcmVmb3JlLCBiaWRkaW5nIGZhcmV3ZWxsIHRvIGhpcyBvdGhlciBzdHVkaWVzIGFuZCB0byB0aGUgdXN1YWwgcHVyc3VpdHMgb2YgYm95aG9vZCwgaGUgcHJhY3Rpc2VkIGhpbXNlbGYgbGFib3Jpb3VzbHkgaW4gZGVjbGFtYXRpb24sIHdpdGggdGhlIGlkZWEgdGhhdCBoZSB0b28gd2FzIHRvIGJlIGFuIG9yYXRvci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBlbXBsb3llZCBJc2FldXMgYXMgaGlzIGd1aWRlIHRvIHRoZSBhcnQgb2Ygc3BlYWtpbmcsIGFsdGhvdWdoIElzb2NyYXRlcyB3YXMgbGVjdHVyaW5nIGF0IHRoZSB0aW1lOyBlaXRoZXIsIGFzIHNvbWUgc2F5LCBiZWNhdXNlIGhlIHdhcyBhbiBvcnBoYW4gYW5kIHVuYWJsZSB0byBwYXkgSXNvY3JhdGVzIGhpcyBzdGlwdWxhdGVkIGZlZSBvZiB0ZW4gbWluYXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RXF1aXZhbGVudCB0byBhYm91dCDCozQwLCBvciAkMjAwLCB3aXRoIGZpdmUgb3Igc2l4IHRpbWVzIHRoZSBwdXJjaGFzaW5nIHBvd2VyIG9mIG1vZGVybiBtb25leS48L25vdGU+IG9yIGJlY2F1c2UgaGUgcHJlZmVycmVkIHRoZSBzdHlsZSBvZiBJc2FldXMgZm9yIGl0cyBlZmZlY3RpdmVuZXNzIGFuZCBhZGFwdGFiaWxpdHkgaW4gYWN0dWFsIHVzZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEhlcm1pcHB1cyBzYXlzIHRoYXQgaGUgb25jZSBjYW1lIHVwb24gc29tZSBhbm9ueW1vdXMgbWVtb2lycyBpbiB3aGljaCBpdCB3YXMgcmVjb3JkZWQgdGhhdCBEZW1vc3RoZW5lcyB3YXMgYSBwdXBpbCBvZiBQbGF0byBhbmQgZ290IG1vc3QgaGVscCBmcm9tIGhpbSBpbiBoaXMgcmhldG9yaWNhbCBzdHVkaWVzLiBIZSBhbHNvIHF1b3RlcyBDdGVzaWJpdXMgYXMgc2F5aW5nIHRoYXQgZnJvbSBDYWxsaWFzIHRoZSBTeXJhY3VzYW4gYW5kIGNlcnRhaW4gb3RoZXJzIERlbW9zdGhlbmVzIHNlY3JldGx5IG9idGFpbmVkIHRoZSByaGV0b3JpY2FsIHN5c3RlbXMgb2YgSXNvY3JhdGVzIGFuZCBBbGNpZGFtYXMgYW5kIG1hc3RlcmVkIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb3JpZ2luIG9mIGhpcyBlYWdlciBkZXNpcmUgdG8gYmUgYW4gb3JhdG9yLCB0aGV5IHRlbGwgdXMsIHdhcyBhcyBmb2xsb3dzLiBDYWxsaXN0cmF0dXMgdGhlIG9yYXRvciB3YXMgZ29pbmcgdG8gbWFrZSBhIHBsZWEgaW4gY291cnQgb24gdGhlIHF1ZXN0aW9uIG9mIE9yb3B1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDM2NiBCLkMuIE9yb3B1cywgYSB0b3duIG9uIHRoZSBjb25maW5lcyBvZiBBdHRpY2EgYW5kIEJvZW90aWEsIHdhcyB3cmVzdGVkIGZyb20gQXRoZW5zIGJ5IHRoZSBUaGViYW5zLiBTdWJzZXF1ZW50bHkgdGhlcmUgd2FzIGEgdHJpYWwgZm9yIHRyZWFzb24gYXQgQXRoZW5zLCBpbiB3aGljaCBDYWxsaXN0cmF0dXMgdGhlIG9yYXRvciBhbmQgQ2hhYnJpYXMgdGhlIGdlbmVyYWwgZmlndXJlZCwgYnV0IHRoZSBkZXRhaWxzIG9mIHRoZSB0cmlhbCBhcmUgb2JzY3VyZS48L25vdGU+IGFuZCB0aGUgdHJpYWwgd2FzIGVhZ2VybHkgYXdhaXRlZCwgbm90IG9ubHkgYmVjYXVzZSBvZiB0aGUgYWJpbGl0eSBvZiB0aGUgb3JhdG9yLCB3aG8gd2FzIHRoZW4gYXQgdGhlIHZlcnkgaGVpZ2h0IG9mIGhpcyByZXB1dGF0aW9uLCBidXQgYWxzbyBiZWNhdXNlIG9mIHRoZSBjaXJjdW1zdGFuY2VzIG9mIHRoZSBjYXNlLCB3aGljaCB3YXMgbm90b3Jpb3VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIERlbW9zdGhlbmVzIGhlYXJkIHRoZSB0ZWFjaGVycyBhbmQgdHV0b3JzIGFncmVlaW5nIGFtb25nIHRoZW1zZWx2ZXMgdG8gYmUgcHJlc2VudCBhdCB0aGUgdHJpYWwsIHdpdGggZ3JlYXQgaW1wb3J0dW5pdHkgaGUgcGVyc3VhZGVkIGhpcyBvd24gdHV0b3IgdG8gdGFrZSBoaW0gdG8gdGhlIGhlYXJpbmcuIFRoaXMgdHV0b3IsIGhhdmluZyBhbiBhY3F1YWludGFuY2Ugd2l0aCB0aGUgcHVibGljIG9mZmljaWFscyB3aG8gb3BlbmVkIHRoZSBjb3VydHMsIHN1Y2NlZWRlZCBpbiBwcm9jdXJpbmcgYSBwbGFjZSB3aGVyZSB0aGUgYm95IGNvdWxkIHNpdCB1bnNlZW4gYW5kIGxpc3RlbiB0byB3aGF0IHdhcyBzYWlkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhbGxpc3RyYXR1cyB3b24gaGlzIGNhc2UgYW5kIHdhcyBleHRyYXZhZ2FudGx5IGFkbWlyZWQsIGFuZCBEZW1vc3RoZW5lcyBjb25jZWl2ZWQgYSBkZXNpcmUgdG8gZW11bGF0ZSBoaXMgZmFtZSwgc2VlaW5nIGhpbSBlc2NvcnRlZCBvbiBoaXMgd2F5IGJ5IHRoZSBtdWx0aXR1ZGUgYW5kIGNvbmdyYXR1bGF0ZWQgYnkgYWxsOyBidXQgaGUgaGFkIGEgbW9yZSB3b25kZXJpbmcgYXBwcmVjaWF0aW9uIG9mIHRoZSBwb3dlciBvZiBoaXMgb3JhdG9yeSwgd2hpY2ggd2FzIG5hdHVyYWxseSBhZGFwdGVkIHRvIHN1YmR1ZSBhbmQgbWFzdGVyIGFsbCBvcHBvc2l0aW9uLiBXaGVyZWZvcmUsIGJpZGRpbmcgZmFyZXdlbGwgdG8gaGlzIG90aGVyIHN0dWRpZXMgYW5kIHRvIHRoZSB1c3VhbCBwdXJzdWl0cyBvZiBib3lob29kLCBoZSBwcmFjdGlzZWQgaGltc2VsZiBsYWJvcmlvdXNseSBpbiBkZWNsYW1hdGlvbiwgd2l0aCB0aGUgaWRlYSB0aGF0IGhlIHRvbyB3YXMgdG8gYmUgYW4gb3JhdG9yLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gZW1wbG95ZWQgSXNhZXVzIGFzIGhpcyBndWlkZSB0byB0aGUgYXJ0IG9mIHNwZWFraW5nLCBhbHRob3VnaCBJc29jcmF0ZXMgd2FzIGxlY3R1cmluZyBhdCB0aGUgdGltZTsgZWl0aGVyLCBhcyBzb21lIHNheSwgYmVjYXVzZSBoZSB3YXMgYW4gb3JwaGFuIGFuZCB1bmFibGUgdG8gcGF5IElzb2NyYXRlcyBoaXMgc3RpcHVsYXRlZCBmZWUgb2YgdGVuIG1pbmFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RXF1aXZhbGVudCB0byBhYm91dCDCozQwLCBvciAkMjAwLCB3aXRoIGZpdmUgb3Igc2l4IHRpbWVzIHRoZSBwdXJjaGFzaW5nIHBvd2VyIG9mIG1vZGVybiBtb25leS48L25vdGU+IG9yIGJlY2F1c2UgaGUgcHJlZmVycmVkIHRoZSBzdHlsZSBvZiBJc2FldXMgZm9yIGl0cyBlZmZlY3RpdmVuZXNzIGFuZCBhZGFwdGFiaWxpdHkgaW4gYWN0dWFsIHVzZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBIZXJtaXBwdXMgc2F5cyB0aGF0IGhlIG9uY2UgY2FtZSB1cG9uIHNvbWUgYW5vbnltb3VzIG1lbW9pcnMgaW4gd2hpY2ggaXQgd2FzIHJlY29yZGVkIHRoYXQgRGVtb3N0aGVuZXMgd2FzIGEgcHVwaWwgb2YgUGxhdG8gYW5kIGdvdCBtb3N0IGhlbHAgZnJvbSBoaW0gaW4gaGlzIHJoZXRvcmljYWwgc3R1ZGllcy4gSGUgYWxzbyBxdW90ZXMgQ3Rlc2liaXVzIGFzIHNheWluZyB0aGF0IGZyb20gQ2FsbGlhcyB0aGUgU3lyYWN1c2FuIGFuZCBjZXJ0YWluIG90aGVycyBEZW1vc3RoZW5lcyBzZWNyZXRseSBvYnRhaW5lZCB0aGUgcmhldG9yaWNhbCBzeXN0ZW1zIG9mIElzb2NyYXRlcyBhbmQgQWxjaWRhbWFzIGFuZCBtYXN0ZXJlZCB0aGVtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIgdGhpcyBtYXkgYmUsIHdoZW4gRGVtb3N0aGVuZXMgY2FtZSBvZiBhZ2UgaGUgYmVnYW4gdG8gYnJpbmcgc3VpdHMgYWdhaW5zdCBoaXMgZ3VhcmRpYW5zIGFuZCB0byB3cml0ZSBzcGVlY2hlcyBhdHRhY2tpbmcgdGhlbS4gVGhleSBkZXZpc2VkIG1hbnkgZXZhc2lvbnMgYW5kIG5ldyB0cmlhbHMsIGJ1dCBEZW1vc3RoZW5lcywgYWZ0ZXIgcHJhY3Rpc2luZyBoaW1zZWxmIGluIHRoZXNlIGV4ZXJjaXNlcywgYXMgVGh1Y3lkaWRlcyBzYXlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJncmVlayI+zprOseG9tiDhvJDOvM+AzrXOuc+B4b25z4TOtc+Bzr/OuSDhvJDOs+G9s869zr/Ovc+Ezr8gzrzOtc+E4b2wIM66zrnOvc604b27zr3Pic69IM+E4b2wz4IgzrzOtc674b2zz4TOsc+CIM+Azr/Ouc6/4b27zrzOtc69zr/OuTwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAxLjE4LjMiIHZhbGlkPSJ5ZXMiPmkuMTgsIDM8L2JpYmw+IG9mIHRoZSBBdGhlbmlhbnMgYW5kIExhY2VkYWVtb25pYW5zKS48L25vdGU+IG5vdCB3aXRob3V0IHRvaWwgYW5kIGRhbmdlciwgd29uIGhpcyBjYXVzZSwgYWx0aG91Z2ggaGUgd2FzIGFibGUgdG8gcmVjb3ZlciBub3QgZXZlbiBhIHNtYWxsIGZyYWN0aW9uIG9mIGhpcyBwYXRyaW1vbnkuIEhvd2V2ZXIsIGhlIGFjcXVpcmVkIHN1ZmZpY2llbnQgcHJhY3RpY2UgYW5kIGNvbmZpZGVuY2UgaW4gc3BlYWtpbmcsIGFuZCBnb3QgYSB0YXN0ZSBvZiB0aGUgZGlzdGluY3Rpb24gYW5kIHBvd2VyIHRoYXQgZ28gd2l0aCBmb3JlbnNpYyBjb250ZXN0cywgYW5kIHRoZXJlZm9yZSBlc3NheWVkIHRvIGNvbWUgZm9yd2FyZCBhbmQgZW5nYWdlIGluIHB1YmxpYyBtYXR0ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQganVzdCBhcyBMYW9tZWRvbiB0aGUgT3JjaG9tZW5pYW7igJRzbyB3ZSBhcmUgdG9sZOKAlHByYWN0aXNlZCBsb25nLWRpc3RhbmNlIHJ1bm5pbmcgYnkgdGhlIGFkdmljZSBvZiBoaXMgcGh5c2ljaWFucywgdG8gd2FyZCBvZmYgc29tZSBkaXNlYXNlIG9mIHRoZSBzcGxlZW4sIGFuZCB0aGVuLCBhZnRlciByZXN0b3JpbmcgaGlzIGhlYWx0aCBpbiB0aGlzIHdheSwgZW50ZXJlZCB0aGUgZ3JlYXQgZ2FtZXMgYW5kIGJlY2FtZSBvbmUgb2YgdGhlIGJlc3QgcnVubmVycyBvZiB0aGUgbG9uZyBjb3Vyc2UsIHNvIERlbW9zdGhlbmVzLCBhZnRlciBhcHBseWluZyBoaW1zZWxmIHRvIG9yYXRvcnkgaW4gdGhlIGZpcnN0IHBsYWNlIGZvciB0aGUgc2FrZSBvZiByZWNvdmVyaW5nIGhpcyBwcml2YXRlIHByb3BlcnR5LCBieSB0aGlzIG1lYW5zIGFjcXVpcmVkIGFiaWxpdHkgYW5kIHBvd2VyIGluIHNwZWFraW5nLCBhbmQgYXQgbGFzdCBpbiBwdWJsaWMgYnVzaW5lc3MsIGFzIGl0IHdlcmUgaW4gdGhlIGdyZWF0IGdhbWVzLCB3b24gdGhlIGZpcnN0IHBsYWNlIGFtb25nIHRoZSBjaXRpemVucyB3aG8gc3Ryb3ZlIHdpdGggb25lIGFub3RoZXIgb24gdGhlIGJlbWEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyIHRoaXMgbWF5IGJlLCB3aGVuIERlbW9zdGhlbmVzIGNhbWUgb2YgYWdlIGhlIGJlZ2FuIHRvIGJyaW5nIHN1aXRzIGFnYWluc3QgaGlzIGd1YXJkaWFucyBhbmQgdG8gd3JpdGUgc3BlZWNoZXMgYXR0YWNraW5nIHRoZW0uIFRoZXkgZGV2aXNlZCBtYW55IGV2YXNpb25zIGFuZCBuZXcgdHJpYWxzLCBidXQgRGVtb3N0aGVuZXMsIGFmdGVyIHByYWN0aXNpbmcgaGltc2VsZiBpbiB0aGVzZSBleGVyY2lzZXMsIGFzIFRodWN5ZGlkZXMgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Oms6x4b22IOG8kM68z4DOtc65z4HhvbnPhM61z4HOv865IOG8kM6z4b2zzr3Ov869z4TOvyDOvM61z4ThvbAgzrrOuc69zrThvbvOvc+Jzr0gz4ThvbDPgiDOvM61zrvhvbPPhM6xz4Igz4DOv865zr/hvbvOvM61zr3Ov865PC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMS4xOC4zIiB2YWxpZD0ieWVzIj5pLjE4LCAzPC9iaWJsPiBvZiB0aGUgQXRoZW5pYW5zIGFuZCBMYWNlZGFlbW9uaWFucykuPC9ub3RlPiBub3Qgd2l0aG91dCB0b2lsIGFuZCBkYW5nZXIsIHdvbiBoaXMgY2F1c2UsIGFsdGhvdWdoIGhlIHdhcyBhYmxlIHRvIHJlY292ZXIgbm90IGV2ZW4gYSBzbWFsbCBmcmFjdGlvbiBvZiBoaXMgcGF0cmltb255LiBIb3dldmVyLCBoZSBhY3F1aXJlZCBzdWZmaWNpZW50IHByYWN0aWNlIGFuZCBjb25maWRlbmNlIGluIHNwZWFraW5nLCBhbmQgZ290IGEgdGFzdGUgb2YgdGhlIGRpc3RpbmN0aW9uIGFuZCBwb3dlciB0aGF0IGdvIHdpdGggZm9yZW5zaWMgY29udGVzdHMsIGFuZCB0aGVyZWZvcmUgZXNzYXllZCB0byBjb21lIGZvcndhcmQgYW5kIGVuZ2FnZSBpbiBwdWJsaWMgbWF0dGVycy4gCgkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Oms6x4b22IOG8kM68z4DOtc65z4HhvbnPhM61z4HOv865IOG8kM6z4b2zzr3Ov869z4TOvyDOvM61z4ThvbAgzrrOuc69zrThvbvOvc+Jzr0gz4ThvbDPgiDOvM61zrvhvbPPhM6xz4Igz4DOv865zr/hvbvOvM61zr3Ov865PC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMS4xOC4zIiB2YWxpZD0ieWVzIj5pLjE4LCAzPC9iaWJsPiBvZiB0aGUgQXRoZW5pYW5zIGFuZCBMYWNlZGFlbW9uaWFucykuPC90cmFuc2xhdGlvbj4="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBqdXN0IGFzIExhb21lZG9uIHRoZSBPcmNob21lbmlhbuKAlHNvIHdlIGFyZSB0b2xk4oCUcHJhY3Rpc2VkIGxvbmctZGlzdGFuY2UgcnVubmluZyBieSB0aGUgYWR2aWNlIG9mIGhpcyBwaHlzaWNpYW5zLCB0byB3YXJkIG9mZiBzb21lIGRpc2Vhc2Ugb2YgdGhlIHNwbGVlbiwgYW5kIHRoZW4sIGFmdGVyIHJlc3RvcmluZyBoaXMgaGVhbHRoIGluIHRoaXMgd2F5LCBlbnRlcmVkIHRoZSBncmVhdCBnYW1lcyBhbmQgYmVjYW1lIG9uZSBvZiB0aGUgYmVzdCBydW5uZXJzIG9mIHRoZSBsb25nIGNvdXJzZSwgc28gRGVtb3N0aGVuZXMsIGFmdGVyIGFwcGx5aW5nIGhpbXNlbGYgdG8gb3JhdG9yeSBpbiB0aGUgZmlyc3QgcGxhY2UgZm9yIHRoZSBzYWtlIG9mIHJlY292ZXJpbmcgaGlzIHByaXZhdGUgcHJvcGVydHksIGJ5IHRoaXMgbWVhbnMgYWNxdWlyZWQgYWJpbGl0eSBhbmQgcG93ZXIgaW4gc3BlYWtpbmcsIGFuZCBhdCBsYXN0IGluIHB1YmxpYyBidXNpbmVzcywgYXMgaXQgd2VyZSBpbiB0aGUgZ3JlYXQgZ2FtZXMsIHdvbiB0aGUgZmlyc3QgcGxhY2UgYW1vbmcgdGhlIGNpdGl6ZW5zIHdobyBzdHJvdmUgd2l0aCBvbmUgYW5vdGhlciBvbiB0aGUgYmVtYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCB3aGVuIGhlIGZpcnN0IGFkZHJlc3NlZCB0aGUgcGVvcGxlIGhlIHdhcyBpbnRlcnJ1cHRlZCBieSB0aGVpciBjbGFtb3VycyBhbmQgbGF1Z2hlZCBhdCBmb3IgaGlzIGluZXhwZXJpZW5jZSwgc2luY2UgaGlzIGRpc2NvdXJzZSBzZWVtZWQgdG8gdGhlbSBjb25mdXNlZCBieSBsb25nIHBlcmlvZHMgYW5kIHRvbyBoYXJzaGx5IGFuZCBpbW1vZGVyYXRlbHkgdG9ydHVyZWQgYnkgZm9ybWFsIGFyZ3VtZW50cy4gSGUgaGFkIGFsc28sIGFzIGl0IHdvdWxkIGFwcGVhciwgYSBjZXJ0YWluIHdlYWtuZXNzIG9mIHZvaWNlIGFuZCBpbmRpc3RpbmN0bmVzcyBvZiBzcGVlY2ggYW5kIHNob3J0bmVzcyBvZiBicmVhdGggd2hpY2ggZGlzdHVyYmVkIHRoZSBzZW5zZSBvZiB3aGF0IGhlIHNhaWQgYnkgZGlzam9pbmluZyBoaXMgc2VudGVuY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZmluYWxseSwgd2hlbiBoZSBoYWQgZm9yc2FrZW4gdGhlIGFzc2VtYmx5IGFuZCB3YXMgd2FuZGVyaW5nIGFib3V0IGRlamVjdGVkbHkgaW4gdGhlIFBpcmFldXMsIEV1bm9tdXMgdGhlIFRocmlhc2lhbiwgd2hvIHdhcyBhbHJlYWR5IGEgdmVyeSBvbGQgbWFuLCBjYXVnaHQgc2lnaHQgb2YgaGltIGFuZCB1cGJyYWlkZWQgaGltIGJlY2F1c2UsIGFsdGhvdWdoIGhlIGhhZCBhIHN0eWxlIG9mIHNwZWFraW5nIHdoaWNoIHdhcyBtb3N0IGxpa2UgdGhhdCBvZiBQZXJpY2xlcywgaGUgd2FzIHRocm93aW5nIGhpbXNlbGYgYXdheSBvdXQgb2Ygd2Vha25lc3MgYW5kIGxhY2sgb2YgY291cmFnZSwgbmVpdGhlciBmYWNpbmcgdGhlIG11bHRpdHVkZSB3aXRoIGJvbGRuZXNzLCBub3IgcHJlcGFyaW5nIGhpcyBib2R5IGZvciB0aGVzZSBmb3JlbnNpYyBjb250ZXN0cywgYnV0IHN1ZmZlcmluZyBpdCB0byB3aXRoZXIgYXdheSBpbiBzbG90aGZ1bCBuZWdsZWN0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgd2hlbiBoZSBmaXJzdCBhZGRyZXNzZWQgdGhlIHBlb3BsZSBoZSB3YXMgaW50ZXJydXB0ZWQgYnkgdGhlaXIgY2xhbW91cnMgYW5kIGxhdWdoZWQgYXQgZm9yIGhpcyBpbmV4cGVyaWVuY2UsIHNpbmNlIGhpcyBkaXNjb3Vyc2Ugc2VlbWVkIHRvIHRoZW0gY29uZnVzZWQgYnkgbG9uZyBwZXJpb2RzIGFuZCB0b28gaGFyc2hseSBhbmQgaW1tb2RlcmF0ZWx5IHRvcnR1cmVkIGJ5IGZvcm1hbCBhcmd1bWVudHMuIEhlIGhhZCBhbHNvLCBhcyBpdCB3b3VsZCBhcHBlYXIsIGEgY2VydGFpbiB3ZWFrbmVzcyBvZiB2b2ljZSBhbmQgaW5kaXN0aW5jdG5lc3Mgb2Ygc3BlZWNoIGFuZCBzaG9ydG5lc3Mgb2YgYnJlYXRoIHdoaWNoIGRpc3R1cmJlZCB0aGUgc2Vuc2Ugb2Ygd2hhdCBoZSBzYWlkIGJ5IGRpc2pvaW5pbmcgaGlzIHNlbnRlbmNlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB3aGVuIGhlIGhhZCBmb3JzYWtlbiB0aGUgYXNzZW1ibHkgYW5kIHdhcyB3YW5kZXJpbmcgYWJvdXQgZGVqZWN0ZWRseSBpbiB0aGUgUGlyYWV1cywgRXVub211cyB0aGUgVGhyaWFzaWFuLCB3aG8gd2FzIGFscmVhZHkgYSB2ZXJ5IG9sZCBtYW4sIGNhdWdodCBzaWdodCBvZiBoaW0gYW5kIHVwYnJhaWRlZCBoaW0gYmVjYXVzZSwgYWx0aG91Z2ggaGUgaGFkIGEgc3R5bGUgb2Ygc3BlYWtpbmcgd2hpY2ggd2FzIG1vc3QgbGlrZSB0aGF0IG9mIFBlcmljbGVzLCBoZSB3YXMgdGhyb3dpbmcgaGltc2VsZiBhd2F5IG91dCBvZiB3ZWFrbmVzcyBhbmQgbGFjayBvZiBjb3VyYWdlLCBuZWl0aGVyIGZhY2luZyB0aGUgbXVsdGl0dWRlIHdpdGggYm9sZG5lc3MsIG5vciBwcmVwYXJpbmcgaGlzIGJvZHkgZm9yIHRoZXNlIGZvcmVuc2ljIGNvbnRlc3RzLCBidXQgc3VmZmVyaW5nIGl0IHRvIHdpdGhlciBhd2F5IGluIHNsb3RoZnVsIG5lZ2xlY3QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW5vdGhlciB0aW1lLCB0b28sIHRoZXkgc2F5LCB3aGVuIGhlIGhhZCBiZWVuIHJlYnVmZmVkIGJ5IHRoZSBwZW9wbGUgYW5kIHdhcyBnb2luZyBvZmYgaG9tZXdhcmRzIGRpc2NvbmNlcnRlZCBhbmQgaW4gZ3JlYXQgZGlzdHJlc3MsIFNhdHlydXMgdGhlIGFjdG9yLCB3aG8gd2FzIGEgZmFtaWxpYXIgYWNxdWFpbnRhbmNlIG9mIGhpcywgZm9sbG93ZWQgYWZ0ZXIgYW5kIHdlbnQgaW5kb29ycyB3aXRoIGhpbS4gRGVtb3N0aGVuZXMgbGFtZW50ZWQgdG8gaGltIHRoYXQgYWx0aG91Z2ggaGUgd2FzIHRoZSBtb3N0IGxhYm9yaW91cyBvZiBhbGwgdGhlIG9yYXRvcnMgYW5kIGhhZCBhbG1vc3QgdXNlZCB1cCB0aGUgdmlnb3VyIG9mIGhpcyBib2R5IGluIHRoaXMgY2FsbGluZywgaGUgaGFkIG5vIGZhdm91ciB3aXRoIHRoZSBwZW9wbGUsIGJ1dCBkZWJhdWNoZWVzLCBzYWlsb3JzLCBhbmQgaWxsaXRlcmF0ZSBmZWxsb3dzIHdlcmUgbGlzdGVuZWQgdG8gYW5kIGhlbGQgdGhlIGJlbWEsIHdoaWxlIGhlIGhpbXNlbGYgd2FzIGlnbm9yZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3UgYXJlIHJpZ2h0LCBEZW1vc3RoZW5lcyw8L3E+IHNhaWQgU2F0eXJ1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5idXQgSSB3aWxsIHF1aWNrbHkgcmVtZWR5IHRoZSBjYXVzZSBvZiBhbGwgdGhpcywgaWYgeW91IHdpbGwgY29uc2VudCB0byByZWNpdGUgb2ZmLWhhbmQgZm9yIG1lIHNvbWUgbmFycmF0aXZlIHNwZWVjaCBmcm9tIEV1cmlwaWRlcyBvciBTb3Bob2NsZXMuPC9xPiBEZW1vc3RoZW5lcyBkaWQgc28sIHdoZXJldXBvbiBTYXR5cnVzLCB0YWtpbmcgdXAgdGhlIHNhbWUgc3BlZWNoIGFmdGVyIGhpbSwgZ2F2ZSBpdCBzdWNoIGEgZm9ybSBhbmQgcmVjaXRlZCBpdCB3aXRoIHN1Y2ggYXBwcm9wcmlhdGUgc2VudGltZW50IGFuZCBkaXNwb3NpdGlvbiB0aGF0IGl0IGFwcGVhcmVkIHRvIERlbW9zdGhlbmVzIHRvIGJlIHF1aXRlIGFub3RoZXIuIFBlcnN1YWRlZCwgbm93LCBob3cgbXVjaCBvZiBvcm5hbWVudCBhbmQgZ3JhY2UgYWN0aW9uIGxlbmRzIHRvIG9yYXRvcnksIGhlIGNvbnNpZGVyZWQgaXQgb2YgbGl0dGxlIG9yIG5vIHVzZSBmb3IgYSBtYW4gdG8gcHJhY3Rpc2UgZGVjbGFpbWluZyBpZiBoZSBuZWdsZWN0ZWQgdGhlIGRlbGl2ZXJ5IGFuZCBkaXNwb3NpdGlvbiBvZiBoaXMgd29yZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHdlIGFyZSB0b2xkLCBoZSBidWlsdCBhIHN1YnRlcnJhbmVhbiBzdHVkeSwgd2hpY2gsIGluIGZhY3QsIHdhcyBwcmVzZXJ2ZWQgaW4gb3VyIHRpbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gZXJyb25lb3VzIHRyYWRpdGlvbiBpZGVudGlmaWVzIHRoaXMgd2l0aCB0aGUgY2hvcmFnaWMgbW9udW1lbnQgb2YgTHlzaWNyYXRlcyAodGhlIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxhbnRlcm4gb2YgRGVtb3N0aGVuZXM8L3E+KS48L25vdGU+IGFuZCBpbnRvIHRoaXMgaGUgd291bGQgZGVzY2VuZCBldmVyeSBkYXkgd2l0aG91dCBleGNlcHRpb24gaW4gb3JkZXIgdG8gZm9ybSBoaXMgYWN0aW9uIGFuZCBjdWx0aXZhdGUgaGlzIHZvaWNlLCBhbmQgaGUgd291bGQgb2Z0ZW4gcmVtYWluIHRoZXJlIGV2ZW4gZm9yIHR3byBvciB0aHJlZSBtb250aHMgdG9nZXRoZXIsIHNoYXZpbmcgb25lIHNpZGUgb2YgaGlzIGhlYWQgaW4gb3JkZXIgdGhhdCBzaGFtZSBtaWdodCBrZWVwIGhpbSBmcm9tIGdvaW5nIGFicm9hZCBldmVuIHRob3VnaCBoZSBncmVhdGx5IHdpc2hlZCB0byBkbyBzby4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbm90aGVyIHRpbWUsIHRvbywgdGhleSBzYXksIHdoZW4gaGUgaGFkIGJlZW4gcmVidWZmZWQgYnkgdGhlIHBlb3BsZSBhbmQgd2FzIGdvaW5nIG9mZiBob21ld2FyZHMgZGlzY29uY2VydGVkIGFuZCBpbiBncmVhdCBkaXN0cmVzcywgU2F0eXJ1cyB0aGUgYWN0b3IsIHdobyB3YXMgYSBmYW1pbGlhciBhY3F1YWludGFuY2Ugb2YgaGlzLCBmb2xsb3dlZCBhZnRlciBhbmQgd2VudCBpbmRvb3JzIHdpdGggaGltLiBEZW1vc3RoZW5lcyBsYW1lbnRlZCB0byBoaW0gdGhhdCBhbHRob3VnaCBoZSB3YXMgdGhlIG1vc3QgbGFib3Jpb3VzIG9mIGFsbCB0aGUgb3JhdG9ycyBhbmQgaGFkIGFsbW9zdCB1c2VkIHVwIHRoZSB2aWdvdXIgb2YgaGlzIGJvZHkgaW4gdGhpcyBjYWxsaW5nLCBoZSBoYWQgbm8gZmF2b3VyIHdpdGggdGhlIHBlb3BsZSwgYnV0IGRlYmF1Y2hlZXMsIHNhaWxvcnMsIGFuZCBpbGxpdGVyYXRlIGZlbGxvd3Mgd2VyZSBsaXN0ZW5lZCB0byBhbmQgaGVsZCB0aGUgYmVtYSwgd2hpbGUgaGUgaGltc2VsZiB3YXMgaWdub3JlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdSBhcmUgcmlnaHQsIERlbW9zdGhlbmVzLDwvcT4gc2FpZCBTYXR5cnVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YnV0IEkgd2lsbCBxdWlja2x5IHJlbWVkeSB0aGUgY2F1c2Ugb2YgYWxsIHRoaXMsIGlmIHlvdSB3aWxsIGNvbnNlbnQgdG8gcmVjaXRlIG9mZi1oYW5kIGZvciBtZSBzb21lIG5hcnJhdGl2ZSBzcGVlY2ggZnJvbSBFdXJpcGlkZXMgb3IgU29waG9jbGVzLjwvcT4gRGVtb3N0aGVuZXMgZGlkIHNvLCB3aGVyZXVwb24gU2F0eXJ1cywgdGFraW5nIHVwIHRoZSBzYW1lIHNwZWVjaCBhZnRlciBoaW0sIGdhdmUgaXQgc3VjaCBhIGZvcm0gYW5kIHJlY2l0ZWQgaXQgd2l0aCBzdWNoIGFwcHJvcHJpYXRlIHNlbnRpbWVudCBhbmQgZGlzcG9zaXRpb24gdGhhdCBpdCBhcHBlYXJlZCB0byBEZW1vc3RoZW5lcyB0byBiZSBxdWl0ZSBhbm90aGVyLiBQZXJzdWFkZWQsIG5vdywgaG93IG11Y2ggb2Ygb3JuYW1lbnQgYW5kIGdyYWNlIGFjdGlvbiBsZW5kcyB0byBvcmF0b3J5LCBoZSBjb25zaWRlcmVkIGl0IG9mIGxpdHRsZSBvciBubyB1c2UgZm9yIGEgbWFuIHRvIHByYWN0aXNlIGRlY2xhaW1pbmcgaWYgaGUgbmVnbGVjdGVkIHRoZSBkZWxpdmVyeSBhbmQgZGlzcG9zaXRpb24gb2YgaGlzIHdvcmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHdlIGFyZSB0b2xkLCBoZSBidWlsdCBhIHN1YnRlcnJhbmVhbiBzdHVkeSwgd2hpY2gsIGluIGZhY3QsIHdhcyBwcmVzZXJ2ZWQgaW4gb3VyIHRpbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBlcnJvbmVvdXMgdHJhZGl0aW9uIGlkZW50aWZpZXMgdGhpcyB3aXRoIHRoZSBjaG9yYWdpYyBtb251bWVudCBvZiBMeXNpY3JhdGVzICh0aGUgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MYW50ZXJuIG9mIERlbW9zdGhlbmVzPC9xPikuPC9ub3RlPiBhbmQgaW50byB0aGlzIGhlIHdvdWxkIGRlc2NlbmQgZXZlcnkgZGF5IHdpdGhvdXQgZXhjZXB0aW9uIGluIG9yZGVyIHRvIGZvcm0gaGlzIGFjdGlvbiBhbmQgY3VsdGl2YXRlIGhpcyB2b2ljZSwgYW5kIGhlIHdvdWxkIG9mdGVuIHJlbWFpbiB0aGVyZSBldmVuIGZvciB0d28gb3IgdGhyZWUgbW9udGhzIHRvZ2V0aGVyLCBzaGF2aW5nIG9uZSBzaWRlIG9mIGhpcyBoZWFkIGluIG9yZGVyIHRoYXQgc2hhbWUgbWlnaHQga2VlcCBoaW0gZnJvbSBnb2luZyBhYnJvYWQgZXZlbiB0aG91Z2ggaGUgZ3JlYXRseSB3aXNoZWQgdG8gZG8gc28uCgkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGFudGVybiBvZiBEZW1vc3RoZW5lczwvcT4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIHdhcyB0aGlzIGFsbCwgYnV0IGhlIHdvdWxkIG1ha2UgaGlzIGludGVydmlld3MsIGNvbnZlcnNhdGlvbnMsIGFuZCBidXNpbmVzcyB3aXRoIHRob3NlIG91dHNpZGUsIHRoZSBmb3VuZGF0aW9uIGFuZCBzdGFydGluZyBwb2ludCBmb3IgZWFnZXIgdG9pbC4gRm9yIGFzIHNvb24gYXMgaGUgcGFydGVkIGZyb20gaGlzIGFzc29jaWF0ZXMsIGhlIHdvdWxkIGdvIGRvd24gaW50byBoaXMgc3R1ZHksIGFuZCB0aGVyZSB3b3VsZCBnbyBvdmVyIGhpcyB0cmFuc2FjdGlvbnMgd2l0aCB0aGVtIGluIGR1ZSBvcmRlciwgYW5kIHRoZSBhcmd1bWVudHMgdXNlZCBpbiBkZWZlbmNlIG9mIGVhY2ggY291cnNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc3RpbGwgZnVydGhlciwgd2hhdGV2ZXIgc3BlZWNoZXMgaGUgY2hhbmNlZCB0byBoZWFyIGRlbGl2ZXJlZCBoZSB3b3VsZCB0YWtlIHVwIGJ5IGhpbXNlbGYgYW5kIHJlZHVjZSB0byBwcm9wb3NpdGlvbnMgYW5kIHBlcmlvZHMsIGFuZCBoZSB3b3VsZCBpbnRyb2R1Y2UgYWxsIHNvcnRzIG9mIGNvcnJlY3Rpb25zIGFuZCBjaGFuZ2VzIG9mIGV4cHJlc3Npb24gaW50byB0aGUgc3BlZWNoZXMgbWFkZSBieSBvdGhlcnMgYWdhaW5zdCBoaW1zZWxmLCBvciwgY29udHJhcml3aXNlLCBieSBoaW1zZWxmIGFnYWluc3Qgb3RoZXJzLiBDb25zZXF1ZW50bHkgaXQgd2FzIHRob3VnaHQgdGhhdCBoZSB3YXMgbm90IGEgbWFuIG9mIGdvb2QgbmF0dXJhbCBwYXJ0cywgYnV0IHRoYXQgaGlzIGFiaWxpdHkgYW5kIHBvd2VyIHdlcmUgdGhlIHByb2R1Y3Qgb2YgdG9pbC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZXJlIHdvdWxkIHNlZW0gdG8gYmUgc3Ryb25nIHByb29mIG9mIHRoaXMgaW4gdGhlIGZhY3QgdGhhdCBEZW1vc3RoZW5lcyB3YXMgcmFyZWx5IGhlYXJkIHRvIHNwZWFrIG9uIHRoZSBzcHVyIG9mIHRoZSBtb21lbnQsIGJ1dCB0aG91Z2ggdGhlIHBlb3BsZSBvZnRlbiBjYWxsZWQgdXBvbiBoaW0gYnkgbmFtZSBhcyBoZSBzYXQgaW4gdGhlIGFzc2VtYmx5LCBoZSB3b3VsZCBub3QgY29tZSBmb3J3YXJkIHVubGVzcyBoZSBoYWQgZ2l2ZW4gdGhvdWdodCB0byB0aGUgcXVlc3Rpb24gYW5kIHdhcyBwcmVwYXJlZCB0byBzcGVhayB1cG9uIGl0LiBGb3IgdGhpcywgbWFueSBvZiB0aGUgcG9wdWxhciBsZWFkZXJzIHVzZWQgdG8gcmFpbCBhdCBoaW0sIGFuZCBQeXRoZWFzLCBpbiBwYXJ0aWN1bGFyLCBvbmNlIHRvbGQgaGltIHNjb2ZmaW5nbHkgdGhhdCBoaXMgYXJndW1lbnRzIHNtZWx0IG9mIGxhbXAgd2lja3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIGhpbSwgdGhlbiwgRGVtb3N0aGVuZXMgbWFkZSBhIHNoYXJwIGFuc3dlci4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbmRlZWQsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoeSBsYW1wIGFuZCBtaW5lLCBPIFB5dGhlYXMsIGFyZSBub3QgcHJpdnkgdG8gdGhlIHNhbWUgcHVyc3VpdHMuPC9xPiBUbyB0aGUgcmVzdCwgaG93ZXZlciwgaGUgbWFkZSBubyBkZW5pYWwgYXQgYWxsLCBidXQgY29uZmVzc2VkIHRoYXQgaGlzIHNwZWVjaGVzIHdlcmUgbmVpdGhlciBhbHRvZ2V0aGVyIHVud3JpdHRlbiwgbm9yIHlldCBmdWxseSB3cml0dGVuIG91dC4gTW9yZW92ZXIsIGhlIHVzZWQgdG8gZGVjbGFyZSB0aGF0IGhlIHdobyByZWhlYXJzZWQgaGlzIHNwZWVjaGVzIHdhcyBhIHRydWUgbWFuIG9mIHRoZSBwZW9wbGU6IGZvciBzdWNoIHByZXBhcmF0aW9uIHdhcyBhIG1hcmsgb2YgZGVmZXJlbmNlIHRvIHRoZSBwZW9wbGUsIHdoZXJlYXMgaGVlZGxlc3NuZXNzIG9mIHdoYXQgdGhlIG11bHRpdHVkZSB3aWxsIHRoaW5rIG9mIGhpcyBzcGVlY2ggbWFya3MgYSBtYW4gb2Ygb2xpZ2FyY2hpY2FsIHNwaXJpdCwgYW5kIG9uZSB3aG8gcmVsaWVzIG9uIGZvcmNlIHJhdGhlciB0aGFuIG9uIHBlcnN1YXNpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFub3RoZXIgY2lyY3Vtc3RhbmNlLCB0b28sIGlzIG1hZGUgYSBwcm9vZiBvZiBoaXMgbGFjayBvZiBjb3VyYWdlIGZvciBhbiBlbWVyZ2VuY3ksIG5hbWVseSwgdGhhdCB3aGVuIGhlIHdhcyBpbnRlcnJ1cHRlZCBieSB0aGUgY2xhbW91cnMgb2YgdGhlIHBlb3BsZSwgRGVtYWRlcyBvZnRlbiByb3NlIGFuZCBzcG9rZSBvZmYtaGFuZCBpbiBoaXMgc3VwcG9ydCwgYnV0IGhlIG5ldmVyIHJlbmRlcmVkIHN1Y2ggYSBzZXJ2aWNlIHRvIERlbWFkZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Igd2FzIHRoaXMgYWxsLCBidXQgaGUgd291bGQgbWFrZSBoaXMgaW50ZXJ2aWV3cywgY29udmVyc2F0aW9ucywgYW5kIGJ1c2luZXNzIHdpdGggdGhvc2Ugb3V0c2lkZSwgdGhlIGZvdW5kYXRpb24gYW5kIHN0YXJ0aW5nIHBvaW50IGZvciBlYWdlciB0b2lsLiBGb3IgYXMgc29vbiBhcyBoZSBwYXJ0ZWQgZnJvbSBoaXMgYXNzb2NpYXRlcywgaGUgd291bGQgZ28gZG93biBpbnRvIGhpcyBzdHVkeSwgYW5kIHRoZXJlIHdvdWxkIGdvIG92ZXIgaGlzIHRyYW5zYWN0aW9ucyB3aXRoIHRoZW0gaW4gZHVlIG9yZGVyLCBhbmQgdGhlIGFyZ3VtZW50cyB1c2VkIGluIGRlZmVuY2Ugb2YgZWFjaCBjb3Vyc2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdGlsbCBmdXJ0aGVyLCB3aGF0ZXZlciBzcGVlY2hlcyBoZSBjaGFuY2VkIHRvIGhlYXIgZGVsaXZlcmVkIGhlIHdvdWxkIHRha2UgdXAgYnkgaGltc2VsZiBhbmQgcmVkdWNlIHRvIHByb3Bvc2l0aW9ucyBhbmQgcGVyaW9kcywgYW5kIGhlIHdvdWxkIGludHJvZHVjZSBhbGwgc29ydHMgb2YgY29ycmVjdGlvbnMgYW5kIGNoYW5nZXMgb2YgZXhwcmVzc2lvbiBpbnRvIHRoZSBzcGVlY2hlcyBtYWRlIGJ5IG90aGVycyBhZ2FpbnN0IGhpbXNlbGYsIG9yLCBjb250cmFyaXdpc2UsIGJ5IGhpbXNlbGYgYWdhaW5zdCBvdGhlcnMuIENvbnNlcXVlbnRseSBpdCB3YXMgdGhvdWdodCB0aGF0IGhlIHdhcyBub3QgYSBtYW4gb2YgZ29vZCBuYXR1cmFsIHBhcnRzLCBidXQgdGhhdCBoaXMgYWJpbGl0eSBhbmQgcG93ZXIgd2VyZSB0aGUgcHJvZHVjdCBvZiB0b2lsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGVyZSB3b3VsZCBzZWVtIHRvIGJlIHN0cm9uZyBwcm9vZiBvZiB0aGlzIGluIHRoZSBmYWN0IHRoYXQgRGVtb3N0aGVuZXMgd2FzIHJhcmVseSBoZWFyZCB0byBzcGVhayBvbiB0aGUgc3B1ciBvZiB0aGUgbW9tZW50LCBidXQgdGhvdWdoIHRoZSBwZW9wbGUgb2Z0ZW4gY2FsbGVkIHVwb24gaGltIGJ5IG5hbWUgYXMgaGUgc2F0IGluIHRoZSBhc3NlbWJseSwgaGUgd291bGQgbm90IGNvbWUgZm9yd2FyZCB1bmxlc3MgaGUgaGFkIGdpdmVuIHRob3VnaHQgdG8gdGhlIHF1ZXN0aW9uIGFuZCB3YXMgcHJlcGFyZWQgdG8gc3BlYWsgdXBvbiBpdC4gRm9yIHRoaXMsIG1hbnkgb2YgdGhlIHBvcHVsYXIgbGVhZGVycyB1c2VkIHRvIHJhaWwgYXQgaGltLCBhbmQgUHl0aGVhcywgaW4gcGFydGljdWxhciwgb25jZSB0b2xkIGhpbSBzY29mZmluZ2x5IHRoYXQgaGlzIGFyZ3VtZW50cyBzbWVsdCBvZiBsYW1wIHdpY2tzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIGhpbSwgdGhlbiwgRGVtb3N0aGVuZXMgbWFkZSBhIHNoYXJwIGFuc3dlci4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkluZGVlZCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aHkgbGFtcCBhbmQgbWluZSwgTyBQeXRoZWFzLCBhcmUgbm90IHByaXZ5IHRvIHRoZSBzYW1lIHB1cnN1aXRzLjwvcT4gVG8gdGhlIHJlc3QsIGhvd2V2ZXIsIGhlIG1hZGUgbm8gZGVuaWFsIGF0IGFsbCwgYnV0IGNvbmZlc3NlZCB0aGF0IGhpcyBzcGVlY2hlcyB3ZXJlIG5laXRoZXIgYWx0b2dldGhlciB1bndyaXR0ZW4sIG5vciB5ZXQgZnVsbHkgd3JpdHRlbiBvdXQuIE1vcmVvdmVyLCBoZSB1c2VkIHRvIGRlY2xhcmUgdGhhdCBoZSB3aG8gcmVoZWFyc2VkIGhpcyBzcGVlY2hlcyB3YXMgYSB0cnVlIG1hbiBvZiB0aGUgcGVvcGxlOiBmb3Igc3VjaCBwcmVwYXJhdGlvbiB3YXMgYSBtYXJrIG9mIGRlZmVyZW5jZSB0byB0aGUgcGVvcGxlLCB3aGVyZWFzIGhlZWRsZXNzbmVzcyBvZiB3aGF0IHRoZSBtdWx0aXR1ZGUgd2lsbCB0aGluayBvZiBoaXMgc3BlZWNoIG1hcmtzIGEgbWFuIG9mIG9saWdhcmNoaWNhbCBzcGlyaXQsIGFuZCBvbmUgd2hvIHJlbGllcyBvbiBmb3JjZSByYXRoZXIgdGhhbiBvbiBwZXJzdWFzaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFub3RoZXIgY2lyY3Vtc3RhbmNlLCB0b28sIGlzIG1hZGUgYSBwcm9vZiBvZiBoaXMgbGFjayBvZiBjb3VyYWdlIGZvciBhbiBlbWVyZ2VuY3ksIG5hbWVseSwgdGhhdCB3aGVuIGhlIHdhcyBpbnRlcnJ1cHRlZCBieSB0aGUgY2xhbW91cnMgb2YgdGhlIHBlb3BsZSwgRGVtYWRlcyBvZnRlbiByb3NlIGFuZCBzcG9rZSBvZmYtaGFuZCBpbiBoaXMgc3VwcG9ydCwgYnV0IGhlIG5ldmVyIHJlbmRlcmVkIHN1Y2ggYSBzZXJ2aWNlIHRvIERlbWFkZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93LCB0aGVuLCBzb21lIG9uZSBtaWdodCBzYXksIGNvdWxkIEFlc2NoaW5lcyBjYWxsIGhpbSBhIG1hbiBvZiB0aGUgbW9zdCBhc3RvbmlzaGluZyBib2xkbmVzcyBpbiBoaXMgc3BlZWNoZXM/PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIEFlc2NoaW5lcywgPHRpdGxlPk9uIHRoZSBDcm93bjwvdGl0bGU+IMKnIDE1Mi48L25vdGU+IEFuZCBob3cgd2FzIGl0IHRoYXQsIHdoZW4gUHl0aG9uIG9mIEJ5emFudGl1bTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGVudm95IG9mIFBoaWxpcCB0byB0aGUgQXRoZW5pYW4gYXNzZW1ibHksIGluIDM0MyBCLkMuIFNlZSBEZW1vc3RoZW5lcywgPHRpdGxlPk9uIHRoZSBDcm93bjwvdGl0bGU+ICDCpyAgMTM2Ljwvbm90ZT4gd2FzIGludmVpZ2hpbmcgd2l0aCBtdWNoIGJvbGRuZXNzIGFuZCBhIGdyZWF0IHRvcnJlbnQgb2Ygd29yZHMgYWdhaW5zdCB0aGUgQXRoZW5pYW5zLCBEZW1vc3RoZW5lcyBhbG9uZSByb3NlIHVwIGFuZCBzcG9rZSBhZ2FpbnN0IGhpbT8gT3IgaG93IGRpZCBpdCBoYXBwZW4gdGhhdCwgd2hlbiBMYW1hY2h1cyB0aGUgTXlyaW5hZWFuIGhhZCB3cml0dGVuIGFuIGVuY29taXVtIG9uIEtpbmdzIFBoaWxpcCBhbmQgQWxleGFuZGVyLCBpbiB3aGljaCBtYW55IGluanVyaW91cyB0aGluZ3Mgd2VyZSBzYWlkIG9mIFRoZWJlcyBhbmQgT2x5bnRodXMsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGlsZSBoZSB3YXMgcmVhZGluZyBpdCBhbG91ZCBhdCBPbHltcGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMyNCBCLkMuPC9ub3RlPkRlbW9zdGhlbmVzIGNhbWUgZm9yd2FyZCBhbmQgcmVoZWFyc2VkIHdpdGggaGlzdG9yaWNhbCBwcm9vZnMgYWxsIHRoZSBiZW5lZml0cyB3aGljaCB0aGUgcGVvcGxlcyBvZiBUaGViZXMgYW5kIENoYWxjaWRpY2UgaGFkIGNvbmZlcnJlZCB1cG9uIEdyZWVjZSwgYW5kLCBvbiB0aGUgb3RoZXIgaGFuZCwgYWxsIHRoZSBldmlscyBvZiB3aGljaCB0aGUgZmxhdHRlcmVycyBvZiB0aGUgTWFjZWRvbmlhbnMgaGFkIGJlZW4gdGhlIGNhdXNlLCBhbmQgdGhlcmVieSBzbyB0dXJuZWQgdGhlIG1pbmRzIG9mIHRoZSBhdWRpZW5jZSB0aGF0IHRoZSBzb3BoaXN0IHdhcyB0ZXJyaWZpZWQgYXQgdGhlIG91dGNyeSBhZ2FpbnN0IGhpbSBhbmQgc2x1bmsgYXdheSBmcm9tIHRoZSBmZXN0aXZhbCBhc3NlbWJsYWdlPwoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3csIHRoZW4sIHNvbWUgb25lIG1pZ2h0IHNheSwgY291bGQgQWVzY2hpbmVzIGNhbGwgaGltIGEgbWFuIG9mIHRoZSBtb3N0IGFzdG9uaXNoaW5nIGJvbGRuZXNzIGluIGhpcyBzcGVlY2hlcz88bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSBBZXNjaGluZXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBDcm93bjwvdGl0bGU+IMKnIDE1Mi48L25vdGU+IEFuZCBob3cgd2FzIGl0IHRoYXQsIHdoZW4gUHl0aG9uIG9mIEJ5emFudGl1bTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBDcm93bjwvdGl0bGU+IMKnIDE1Mi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGVudm95IG9mIFBoaWxpcCB0byB0aGUgQXRoZW5pYW4gYXNzZW1ibHksIGluIDM0MyBCLkMuIFNlZSBEZW1vc3RoZW5lcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4gIMKnICAxMzYuPC9ub3RlPiB3YXMgaW52ZWlnaGluZyB3aXRoIG11Y2ggYm9sZG5lc3MgYW5kIGEgZ3JlYXQgdG9ycmVudCBvZiB3b3JkcyBhZ2FpbnN0IHRoZSBBdGhlbmlhbnMsIERlbW9zdGhlbmVzIGFsb25lIHJvc2UgdXAgYW5kIHNwb2tlIGFnYWluc3QgaGltPyBPciBob3cgZGlkIGl0IGhhcHBlbiB0aGF0LCB3aGVuIExhbWFjaHVzIHRoZSBNeXJpbmFlYW4gaGFkIHdyaXR0ZW4gYW4gZW5jb21pdW0gb24gS2luZ3MgUGhpbGlwIGFuZCBBbGV4YW5kZXIsIGluIHdoaWNoIG1hbnkgaW5qdXJpb3VzIHRoaW5ncyB3ZXJlIHNhaWQgb2YgVGhlYmVzIGFuZCBPbHludGh1cywgCgkJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgQ3Jvd248L3RpdGxlPiAgwqcgIDEzNi48L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGlsZSBoZSB3YXMgcmVhZGluZyBpdCBhbG91ZCBhdCBPbHltcGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzI0IEIuQy48L25vdGU+RGVtb3N0aGVuZXMgY2FtZSBmb3J3YXJkIGFuZCByZWhlYXJzZWQgd2l0aCBoaXN0b3JpY2FsIHByb29mcyBhbGwgdGhlIGJlbmVmaXRzIHdoaWNoIHRoZSBwZW9wbGVzIG9mIFRoZWJlcyBhbmQgQ2hhbGNpZGljZSBoYWQgY29uZmVycmVkIHVwb24gR3JlZWNlLCBhbmQsIG9uIHRoZSBvdGhlciBoYW5kLCBhbGwgdGhlIGV2aWxzIG9mIHdoaWNoIHRoZSBmbGF0dGVyZXJzIG9mIHRoZSBNYWNlZG9uaWFucyBoYWQgYmVlbiB0aGUgY2F1c2UsIGFuZCB0aGVyZWJ5IHNvIHR1cm5lZCB0aGUgbWluZHMgb2YgdGhlIGF1ZGllbmNlIHRoYXQgdGhlIHNvcGhpc3Qgd2FzIHRlcnJpZmllZCBhdCB0aGUgb3V0Y3J5IGFnYWluc3QgaGltIGFuZCBzbHVuayBhd2F5IGZyb20gdGhlIGZlc3RpdmFsIGFzc2VtYmxhZ2U/CgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCBEZW1vc3RoZW5lcywgYXMgaXQgd291bGQgYXBwZWFyLCBkaWQgbm90IHJlZ2FyZCB0aGUgb3RoZXIgY2hhcmFjdGVyaXN0aWNzIG9mIFBlcmljbGVzIGFzIHN1aXRhYmxlIGZvciBoaW1zZWxmLCBoZSBhZG1pcmVkIGFuZCBzb3VnaHQgdG8gaW1pdGF0ZSB0aGUgZm9ybWFsaXR5IG9mIGhpcyBzcGVlY2ggYW5kIGJlYXJpbmcsIGFzIHdlbGwgYXMgaGlzIHJlZnVzYWwgdG8gc3BlYWsgc3VkZGVubHkgb3Igb24gZXZlcnkgc3ViamVjdCB0aGF0IG1pZ2h0IHByZXNlbnQgaXRzZWxmLCBhcyBpZiBoaXMgZ3JlYXRuZXNzIHdhcyBkdWUgdG8gdGhlc2UgdGhpbmdzOyBidXQgaGUgYnkgbm8gbWVhbnMgc291Z2h0IHRoZSByZXB1dGF0aW9uIHdoaWNoIGlzIHdvbiBpbiBhIHN1ZGRlbiBlbWVyZ2VuY3ksIG5vciBkaWQgaGUgb2Z0ZW4gb2YgaGlzIG93biBmcmVlIHdpbGwgc3Rha2UgaGlzIGluZmx1ZW5jZSB1cG9uIGNoYW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhvc2Ugb3JhdGlvbnMgd2hpY2ggd2VyZSBzcG9rZW4gb2ZmLWhhbmQgYnkgaGltIGhhZCBtb3JlIGNvdXJhZ2UgYW5kIGJvbGRuZXNzIHRoYW4gdGhvc2Ugd2hpY2ggaGUgd3JvdGUgb3V0LCBpZiB3ZSBhcmUgdG8gcHV0IGFueSBjb25maWRlbmNlIGluIEVyYXRvc3RoZW5lcywgRGVtZXRyaXVzIHRoZSBQaGFsZXJpYW4sIGFuZCB0aGUgY29taWMgcG9ldHMuIE9mIHRoZXNlLCBFcmF0b3N0aGVuZXMgc2F5cyB0aGF0IG9mdGVuIGluIGhpcyBzcGVlY2hlcyBEZW1vc3RoZW5lcyB3YXMgbGlrZSBvbmUgZnJlbnppZWQsIGFuZCB0aGUgUGhhbGVyZWFuIHNheXMgdGhhdCBvbmNlLCBhcyBpZiB1bmRlciBpbnNwaXJhdGlvbiwgaGUgc3dvcmUgdGhlIGZhbW91cyBtZXRyaWNhbCBvYXRoIHRvIHRoZSBwZW9wbGU64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkJ5IGVhcnRoLCBieSBzcHJpbmdzLCBieSByaXZlcnMsIGFuZCBieSBzdHJlYW1zLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+S29jaywgPHRpdGxlPkNvbS4gQXR0LiBGcmFnLjwvdGl0bGU+IGlpLiBwLiAxMjguIEZyb20gUGx1dGFyY2gncyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA4NDViIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1vcmFsczwvdGl0bGU+LCBwLiA4NDViPC9iaWJsPiwgaXQgaXMgdG8gYmUgaW5mZXJyZWQgcmF0aGVyIHRoYXQgdGhpcyB3YXMgYSB2ZXJzZSBvZiBBbnRpcGhhbmVzIHJpZGljdWxpbmcgdGhlIHBlcmNlaXZlZCBtYW5uZXIgb2YgRGVtb3N0aGVuZXMuPC9ub3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlPZiB0aGUgY29taWMgcG9ldHMsIG9uZSBjYWxscyBoaW0gYSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJob3BvcGVycGVyZXRocmFzLDwvcT4gb3IgPGdsb3NzPnRydW1wZXJ5LWJyYWdnYXJ0PC9nbG9zcz4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+S29jaywgPHRpdGxlPm9wLmNpdC48L3RpdGxlPiwgaWlpLiBwLiA0NjEuPC9ub3RlPiBhbmQgYW5vdGhlciwgcmlkaWN1bGluZyBoaXMgdXNlIG9mIHRoZSBhbnRpdGhlc2lzLCBzYXlzIHRoaXM64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPihGaXJzdCBzbGF2ZSkgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFzdGVyLCBhcyBoZSB0b29rLCByZXRvb2suPC9xPgogICAgICAgICAgICAgICA8L2w+CgkJCQkJICAgICAgICAgIDxsPihTZWNvbmQgc2xhdmUgKD8pKSA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZW1vc3RoZW5lcyB3b3VsZCBoYXZlIGJlZW4gZGVsaWdodGVkIHRvIHRha2Ugb3ZlciB0aGlzIHBocmFzZS48L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+S29jaywgPHRpdGxlPm9wLiBjaXQuPC90aXRsZT4sIGlpLiBwLiA4MC4gQSB2ZXJzZSBwcmVjZWRlcyB3aGljaCBtYXkgYmUgdHJhbnNsYXRlZDogCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFzdGVyIG9uIHJlY2VpdmluZyBhbGwgaGlzIHBhdHJpbW9ueSw8L3E+IGFuZCB0aGUgcG9pbnQgYXBwYXJlbnRseSBpcyB0aGF0IHRoZSBoZWlyIHRvb2sgd2hhdCB3YXMgYSBnaWZ0IGFzIGhpcyByaWdodGZ1bCBkdWUuPC9ub3RlPgoJCQkJVW5sZXNzLCBpbmRlZWQsIHRoaXMsIHRvbywgd2FzIGEgamVzdCBvZiBBbnRpcGhhbmVzIHVwb24gdGhlIHNwZWVjaCBvZiBEZW1vc3RoZW5lcyBjb25jZXJuaW5nIEhhbG9ubmVzdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDx0aXRsZT5Pci48L3RpdGxlPiB2aWkuLCB3cm9uZ2x5IGF0dHJpYnV0ZWQgdG8gRGVtb3N0aGVuZXMuIFRoZXJlIGlzIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDcuNSIgdmFsaWQ9InllcyI+wqcgIDU8L2JpYmw+IGEgcGhyYXNlIHNpbWlsYXIgdG8gdGhlIG9uZSB1bmRlciBjb21tZW50Ljwvbm90ZT4gaW4gd2hpY2ggdGhlIG9yYXRvciBjb3Vuc2VsbGVkIHRoZSBBdGhlbmlhbnMgbm90IHRvIHRha2UgdGhlIGlzbGFuZCBmcm9tIFBoaWxpcCwgYnV0IHRvIHJldGFrZSBpdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCBEZW1vc3RoZW5lcywgYXMgaXQgd291bGQgYXBwZWFyLCBkaWQgbm90IHJlZ2FyZCB0aGUgb3RoZXIgY2hhcmFjdGVyaXN0aWNzIG9mIFBlcmljbGVzIGFzIHN1aXRhYmxlIGZvciBoaW1zZWxmLCBoZSBhZG1pcmVkIGFuZCBzb3VnaHQgdG8gaW1pdGF0ZSB0aGUgZm9ybWFsaXR5IG9mIGhpcyBzcGVlY2ggYW5kIGJlYXJpbmcsIGFzIHdlbGwgYXMgaGlzIHJlZnVzYWwgdG8gc3BlYWsgc3VkZGVubHkgb3Igb24gZXZlcnkgc3ViamVjdCB0aGF0IG1pZ2h0IHByZXNlbnQgaXRzZWxmLCBhcyBpZiBoaXMgZ3JlYXRuZXNzIHdhcyBkdWUgdG8gdGhlc2UgdGhpbmdzOyBidXQgaGUgYnkgbm8gbWVhbnMgc291Z2h0IHRoZSByZXB1dGF0aW9uIHdoaWNoIGlzIHdvbiBpbiBhIHN1ZGRlbiBlbWVyZ2VuY3ksIG5vciBkaWQgaGUgb2Z0ZW4gb2YgaGlzIG93biBmcmVlIHdpbGwgc3Rha2UgaGlzIGluZmx1ZW5jZSB1cG9uIGNoYW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRob3NlIG9yYXRpb25zIHdoaWNoIHdlcmUgc3Bva2VuIG9mZi1oYW5kIGJ5IGhpbSBoYWQgbW9yZSBjb3VyYWdlIGFuZCBib2xkbmVzcyB0aGFuIHRob3NlIHdoaWNoIGhlIHdyb3RlIG91dCwgaWYgd2UgYXJlIHRvIHB1dCBhbnkgY29uZmlkZW5jZSBpbiBFcmF0b3N0aGVuZXMsIERlbWV0cml1cyB0aGUgUGhhbGVyaWFuLCBhbmQgdGhlIGNvbWljIHBvZXRzLiBPZiB0aGVzZSwgRXJhdG9zdGhlbmVzIHNheXMgdGhhdCBvZnRlbiBpbiBoaXMgc3BlZWNoZXMgRGVtb3N0aGVuZXMgd2FzIGxpa2Ugb25lIGZyZW56aWVkLCBhbmQgdGhlIFBoYWxlcmVhbiBzYXlzIHRoYXQgb25jZSwgYXMgaWYgdW5kZXIgaW5zcGlyYXRpb24sIGhlIHN3b3JlIHRoZSBmYW1vdXMgbWV0cmljYWwgb2F0aCB0byB0aGUgcGVvcGxlOuKAlAoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnkgZWFydGgsIGJ5IHNwcmluZ3MsIGJ5IHJpdmVycywgYW5kIGJ5IHN0cmVhbXMuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ5IGVhcnRoLCBieSBzcHJpbmdzLCBieSByaXZlcnMsIGFuZCBieSBzdHJlYW1zLjwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Lb2NrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db20uIEF0dC4gRnJhZy48L3RpdGxlPiBpaS4gcC4gMTI4LiBGcm9tIFBsdXRhcmNoJ3MgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTW9yLiA4NDViIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHAuIDg0NWI8L2JpYmw+LCBpdCBpcyB0byBiZSBpbmZlcnJlZCByYXRoZXIgdGhhdCB0aGlzIHdhcyBhIHZlcnNlIG9mIEFudGlwaGFuZXMgcmlkaWN1bGluZyB0aGUgcGVyY2VpdmVkIG1hbm5lciBvZiBEZW1vc3RoZW5lcy48L25vdGU+CgkJCQkgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbS4gQXR0LiBGcmFnLjwvdGl0bGU+IGlpLiBwLiAxMjguIEZyb20gUGx1dGFyY2gncyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDg0NWIiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Nb3JhbHM8L3RpdGxlPiwgcC4gODQ1YjwvYmlibD4sIGl0IGlzIHRvIGJlIGluZmVycmVkIHJhdGhlciB0aGF0IHRoaXMgd2FzIGEgdmVyc2Ugb2YgQW50aXBoYW5lcyByaWRpY3VsaW5nIHRoZSBwZXJjZWl2ZWQgbWFubmVyIG9mIERlbW9zdGhlbmVzLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwLiA4NDViPC90cmFuc2xhdGlvbj4="
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJT2YgdGhlIGNvbWljIHBvZXRzLCBvbmUgY2FsbHMgaGltIGEgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnJob3BvcGVycGVyZXRocmFzLDwvcT4gb3IgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+dHJ1bXBlcnktYnJhZ2dhcnQ8L2dsb3NzPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPktvY2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPm9wLmNpdC48L3RpdGxlPiwgaWlpLiBwLiA0NjEuPC9ub3RlPiBhbmQgYW5vdGhlciwgcmlkaWN1bGluZyBoaXMgdXNlIG9mIHRoZSBhbnRpdGhlc2lzLCBzYXlzIHRoaXM64oCUCgkJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5vcC5jaXQuPC90aXRsZT4sIGlpaS4gcC4gNDYxLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPihGaXJzdCBzbGF2ZSkgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBtYXN0ZXIsIGFzIGhlIHRvb2ssIHJldG9vay48L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj4oU2Vjb25kIHNsYXZlICg/KSkgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZW1vc3RoZW5lcyB3b3VsZCBoYXZlIGJlZW4gZGVsaWdodGVkIHRvIHRha2Ugb3ZlciB0aGlzIHBocmFzZS48L3E+CiAgICAgICAgICAgICAgIDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj4oRmlyc3Qgc2xhdmUpIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFzdGVyLCBhcyBoZSB0b29rLCByZXRvb2suPC9xPgogICAgICAgICAgICAgICA8L2w+CgkJCQkJICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFzdGVyLCBhcyBoZSB0b29rLCByZXRvb2suPC9xPgogICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPihTZWNvbmQgc2xhdmUgKD8pKSA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRlbW9zdGhlbmVzIHdvdWxkIGhhdmUgYmVlbiBkZWxpZ2h0ZWQgdG8gdGFrZSBvdmVyIHRoaXMgcGhyYXNlLjwvcT4KICAgICAgICAgICAgICAgPC9sPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRlbW9zdGhlbmVzIHdvdWxkIGhhdmUgYmVlbiBkZWxpZ2h0ZWQgdG8gdGFrZSBvdmVyIHRoaXMgcGhyYXNlLjwvcT4KICAgICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Lb2NrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5vcC4gY2l0LjwvdGl0bGU+LCBpaS4gcC4gODAuIEEgdmVyc2UgcHJlY2VkZXMgd2hpY2ggbWF5IGJlIHRyYW5zbGF0ZWQ6IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TXkgbWFzdGVyIG9uIHJlY2VpdmluZyBhbGwgaGlzIHBhdHJpbW9ueSw8L3E+IGFuZCB0aGUgcG9pbnQgYXBwYXJlbnRseSBpcyB0aGF0IHRoZSBoZWlyIHRvb2sgd2hhdCB3YXMgYSBnaWZ0IGFzIGhpcyByaWdodGZ1bCBkdWUuPC9ub3RlPgoJCQkJVW5sZXNzLCBpbmRlZWQsIHRoaXMsIHRvbywgd2FzIGEgamVzdCBvZiBBbnRpcGhhbmVzIHVwb24gdGhlIHNwZWVjaCBvZiBEZW1vc3RoZW5lcyBjb25jZXJuaW5nIEhhbG9ubmVzdXMsPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+b3AuIGNpdC48L3RpdGxlPiwgaWkuIHAuIDgwLiBBIHZlcnNlIHByZWNlZGVzIHdoaWNoIG1heSBiZSB0cmFuc2xhdGVkOiAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IG1hc3RlciBvbiByZWNlaXZpbmcgYWxsIGhpcyBwYXRyaW1vbnksPC9xPiBhbmQgdGhlIHBvaW50IGFwcGFyZW50bHkgaXMgdGhhdCB0aGUgaGVpciB0b29rIHdoYXQgd2FzIGEgZ2lmdCBhcyBoaXMgcmlnaHRmdWwgZHVlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+IHZpaS4sIHdyb25nbHkgYXR0cmlidXRlZCB0byBEZW1vc3RoZW5lcy4gVGhlcmUgaXMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA3LjUiIHZhbGlkPSJ5ZXMiPsKnICA1PC9iaWJsPiBhIHBocmFzZSBzaW1pbGFyIHRvIHRoZSBvbmUgdW5kZXIgY29tbWVudC48L25vdGU+IGluIHdoaWNoIHRoZSBvcmF0b3IgY291bnNlbGxlZCB0aGUgQXRoZW5pYW5zIG5vdCB0byB0YWtlIHRoZSBpc2xhbmQgZnJvbSBQaGlsaXAsIGJ1dCB0byByZXRha2UgaXQuCgkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+IHZpaS4sIHdyb25nbHkgYXR0cmlidXRlZCB0byBEZW1vc3RoZW5lcy4gVGhlcmUgaXMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA3LjUiIHZhbGlkPSJ5ZXMiPsKnICA1PC9iaWJsPiBhIHBocmFzZSBzaW1pbGFyIHRvIHRoZSBvbmUgdW5kZXIgY29tbWVudC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdGlsbCwgYWxsIG1lbiB1c2VkIHRvIGFncmVlIHRoYXQgRGVtYWRlcywgaW4gdGhlIGV4ZXJjaXNlIG9mIGhpcyBuYXR1cmFsIGdpZnRzLCB3YXMgaW52aW5jaWJsZSwgYW5kIHRoYXQgd2hlbiBoZSBzcG9rZSBvbiB0aGUgc3B1ciBvZiB0aGUgbW9tZW50IGhlIHN1cnBhc3NlZCB0aGUgc3R1ZGllZCBwcmVwYXJhdGlvbnMgb2YgRGVtb3N0aGVuZXMuIEFuZCBBcmlzdG9uIHRoZSBDaGlhbiByZWNvcmRzIGFuIG9waW5pb24gd2hpY2ggVGhlb3BocmFzdHVzIGFsc28gcGFzc2VkIHVwb24gdGhlIHR3byBvcmF0b3JzLiBXaGVuIGhlIHdhcyBhc2tlZCwgbmFtZWx5LCB3aGF0IHNvcnQgb2YgYW4gb3JhdG9yIGhlIHRob3VnaHQgRGVtb3N0aGVuZXMgd2FzLCBoZSByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldvcnRoeSBvZiB0aGUgY2l0eTwvcT47IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGF0IERlbWFkZXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VG9vIGdvb2QgZm9yIHRoZSBjaXR5LjwvcT4gQW5kIHRoZSBzYW1lIHBoaWxvc29waGVyIHRlbGxzIHVzIHRoYXQgUG9seWV1Y3R1cyB0aGUgU3BoZXR0aWFuLCBvbmUgb2YgdGhlIHBvbGl0aWNhbCBsZWFkZXJzIG9mIHRoYXQgdGltZSBhdCBBdGhlbnMsIGRlY2xhcmVkIHRoYXQgRGVtb3N0aGVuZXMgd2FzIHRoZSBncmVhdGVzdCBvcmF0b3IsIGJ1dCBQaG9jaW9uIHRoZSBtb3N0IGluZmx1ZW50aWFsIHNwZWFrZXI7IHNpbmNlIGhlIGV4cHJlc3NlZCBtb3N0IHNlbnNlIGluIGZld2VzdCB3b3Jkcy4gSW5kZWVkLCB3ZSBhcmUgdG9sZCB0aGF0IGV2ZW4gRGVtb3N0aGVuZXMgaGltc2VsZiwgd2hlbmV2ZXIgUGhvY2lvbiBtb3VudGVkIHRoZSBiZW1hIHRvIHJlcGx5IHRvIGhpbSwgd291bGQgc2F5IHRvIGhpcyBpbnRpbWF0ZXM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGVyZSBjb21lcyB0aGUgY2hvcHBlciBvZiBteSBzcGVlY2hlcy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpdCBpcyBub3QgY2xlYXIgd2hldGhlciBEZW1vc3RoZW5lcyBoYWQgdGhpcyBmZWVsaW5nIHRvd2FyZHMgUGhvY2lvbiBiZWNhdXNlIG9mIGhpcyBvcmF0b3J5LCBvciBiZWNhdXNlIG9mIGhpcyBsaWZlIGFuZCByZXB1dGF0aW9uLCBiZWxpZXZpbmcgdGhhdCBhIHNpbmdsZSB3b3JkIG9yIG5vZCBmcm9tIGEgbWFuIHdobyBpcyB0cnVzdGVkIGhhcyBtb3JlIHBvd2VyIHRoYW4gdmVyeSBtYW55IGxvbmcgcGVyaW9kcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3RpbGwsIGFsbCBtZW4gdXNlZCB0byBhZ3JlZSB0aGF0IERlbWFkZXMsIGluIHRoZSBleGVyY2lzZSBvZiBoaXMgbmF0dXJhbCBnaWZ0cywgd2FzIGludmluY2libGUsIGFuZCB0aGF0IHdoZW4gaGUgc3Bva2Ugb24gdGhlIHNwdXIgb2YgdGhlIG1vbWVudCBoZSBzdXJwYXNzZWQgdGhlIHN0dWRpZWQgcHJlcGFyYXRpb25zIG9mIERlbW9zdGhlbmVzLiBBbmQgQXJpc3RvbiB0aGUgQ2hpYW4gcmVjb3JkcyBhbiBvcGluaW9uIHdoaWNoIFRoZW9waHJhc3R1cyBhbHNvIHBhc3NlZCB1cG9uIHRoZSB0d28gb3JhdG9ycy4gV2hlbiBoZSB3YXMgYXNrZWQsIG5hbWVseSwgd2hhdCBzb3J0IG9mIGFuIG9yYXRvciBoZSB0aG91Z2h0IERlbW9zdGhlbmVzIHdhcywgaGUgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldvcnRoeSBvZiB0aGUgY2l0eTwvcT47IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGF0IERlbWFkZXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ub28gZ29vZCBmb3IgdGhlIGNpdHkuPC9xPiBBbmQgdGhlIHNhbWUgcGhpbG9zb3BoZXIgdGVsbHMgdXMgdGhhdCBQb2x5ZXVjdHVzIHRoZSBTcGhldHRpYW4sIG9uZSBvZiB0aGUgcG9saXRpY2FsIGxlYWRlcnMgb2YgdGhhdCB0aW1lIGF0IEF0aGVucywgZGVjbGFyZWQgdGhhdCBEZW1vc3RoZW5lcyB3YXMgdGhlIGdyZWF0ZXN0IG9yYXRvciwgYnV0IFBob2Npb24gdGhlIG1vc3QgaW5mbHVlbnRpYWwgc3BlYWtlcjsgc2luY2UgaGUgZXhwcmVzc2VkIG1vc3Qgc2Vuc2UgaW4gZmV3ZXN0IHdvcmRzLiBJbmRlZWQsIHdlIGFyZSB0b2xkIHRoYXQgZXZlbiBEZW1vc3RoZW5lcyBoaW1zZWxmLCB3aGVuZXZlciBQaG9jaW9uIG1vdW50ZWQgdGhlIGJlbWEgdG8gcmVwbHkgdG8gaGltLCB3b3VsZCBzYXkgdG8gaGlzIGludGltYXRlczogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlcmUgY29tZXMgdGhlIGNob3BwZXIgb2YgbXkgc3BlZWNoZXMuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgaXMgbm90IGNsZWFyIHdoZXRoZXIgRGVtb3N0aGVuZXMgaGFkIHRoaXMgZmVlbGluZyB0b3dhcmRzIFBob2Npb24gYmVjYXVzZSBvZiBoaXMgb3JhdG9yeSwgb3IgYmVjYXVzZSBvZiBoaXMgbGlmZSBhbmQgcmVwdXRhdGlvbiwgYmVsaWV2aW5nIHRoYXQgYSBzaW5nbGUgd29yZCBvciBub2QgZnJvbSBhIG1hbiB3aG8gaXMgdHJ1c3RlZCBoYXMgbW9yZSBwb3dlciB0aGFuIHZlcnkgbWFueSBsb25nIHBlcmlvZHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoaXMgYm9kaWx5IGRlZmljaWVuY2llcyBoZSBhZG9wdGVkIHRoZSBleGVyY2lzZXMgd2hpY2ggSSBzaGFsbCBkZXNjcmliZSwgYXMgRGVtZXRyaXVzIHRoZSBQaGFsZXJpYW4gdGVsbHMgdXMsIHdobyBzYXlzIGhlIGhlYXJkIGFib3V0IHRoZW0gZnJvbSBEZW1vc3RoZW5lcyBoaW1zZWxmLCBub3cgZ3Jvd24gb2xkLiBUaGUgaW5kaXN0aW5jdG5lc3MgYW5kIGxpc3Bpbmc8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TdHJpY3RseSwgYW4gaW5hYmlsaXR5IHRvIHByb25vdW5jZSB0aGUgbGV0dGVyIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnIsPC9xPiBnaXZpbmcgaW5zdGVhZCB0aGUgc291bmQgb2YgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bC48L3E+IFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsYy4gMS40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFsY2liaWFkZXM8L3RpdGxlPiwgaS4gNDwvYmlibD4uPC9ub3RlPiBpbiBoaXMgc3BlZWNoIGhlIHVzZWQgdG8gY29ycmVjdCBhbmQgZHJpdmUgYXdheSBieSB0YWtpbmcgcGViYmxlcyBpbiBoaXMgbW91dGggYW5kIHRoZW4gcmVjaXRpbmcgc3BlZWNoZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyB2b2ljZSBoZSB1c2VkIHRvIGV4ZXJjaXNlIGJ5IGRpc2NvdXJzaW5nIHdoaWxlIHJ1bm5pbmcgb3IgZ29pbmcgdXAgc3RlZXAgcGxhY2VzLCBhbmQgYnkgcmVjaXRpbmcgc3BlZWNoZXMgb3IgdmVyc2VzIGF0IGEgc2luZ2xlIGJyZWF0aC4gTW9yZW92ZXIsIGhlIGhhZCBpbiBoaXMgaG91c2UgYSBsYXJnZSBsb29raW5nLWdsYXNzLCBhbmQgaW4gZnJvbnQgb2YgdGhpcyBoZSB1c2VkIHRvIHN0YW5kIGFuZCBnbyB0aHJvdWdoIGhpcyBleGVyY2lzZXMgaW4gZGVjbGFtYXRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhpcyBib2RpbHkgZGVmaWNpZW5jaWVzIGhlIGFkb3B0ZWQgdGhlIGV4ZXJjaXNlcyB3aGljaCBJIHNoYWxsIGRlc2NyaWJlLCBhcyBEZW1ldHJpdXMgdGhlIFBoYWxlcmlhbiB0ZWxscyB1cywgd2hvIHNheXMgaGUgaGVhcmQgYWJvdXQgdGhlbSBmcm9tIERlbW9zdGhlbmVzIGhpbXNlbGYsIG5vdyBncm93biBvbGQuIFRoZSBpbmRpc3RpbmN0bmVzcyBhbmQgbGlzcGluZzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3RyaWN0bHksIGFuIGluYWJpbGl0eSB0byBwcm9ub3VuY2UgdGhlIGxldHRlciAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnIsPC9xPiBnaXZpbmcgaW5zdGVhZCB0aGUgc291bmQgb2YgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5sLjwvcT4gU2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGMuIDEuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsY2liaWFkZXM8L3RpdGxlPiwgaS4gNDwvYmlibD4uPC9ub3RlPiBpbiBoaXMgc3BlZWNoIGhlIHVzZWQgdG8gY29ycmVjdCBhbmQgZHJpdmUgYXdheSBieSB0YWtpbmcgcGViYmxlcyBpbiBoaXMgbW91dGggYW5kIHRoZW4gcmVjaXRpbmcgc3BlZWNoZXMuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5yLDwvcT4gZ2l2aW5nIGluc3RlYWQgdGhlIHNvdW5kIG9mIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bC48L3E+IFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxjLiAxLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGNpYmlhZGVzPC90aXRsZT4sIGkuIDQ8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsY2liaWFkZXM8L3RpdGxlPiwgaS4gNDwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyB2b2ljZSBoZSB1c2VkIHRvIGV4ZXJjaXNlIGJ5IGRpc2NvdXJzaW5nIHdoaWxlIHJ1bm5pbmcgb3IgZ29pbmcgdXAgc3RlZXAgcGxhY2VzLCBhbmQgYnkgcmVjaXRpbmcgc3BlZWNoZXMgb3IgdmVyc2VzIGF0IGEgc2luZ2xlIGJyZWF0aC4gTW9yZW92ZXIsIGhlIGhhZCBpbiBoaXMgaG91c2UgYSBsYXJnZSBsb29raW5nLWdsYXNzLCBhbmQgaW4gZnJvbnQgb2YgdGhpcyBoZSB1c2VkIHRvIHN0YW5kIGFuZCBnbyB0aHJvdWdoIGhpcyBleGVyY2lzZXMgaW4gZGVjbGFtYXRpb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QSBzdG9yeSBpcyB0b2xkIG9mIGEgbWFuIGNvbWluZyB0byBoaW0gYW5kIGJlZ2dpbmcgaGlzIHNlcnZpY2VzIGFzIGFkdm9jYXRlLCBhbmQgdGVsbGluZyBhdCBncmVhdCBsZW5ndGggaG93IGhlIGhhZCBiZWVuIGFzc2F1bHRlZCBhbmQgYmVhdGVuIGJ5IHNvbWUgb25lLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGNlcnRhaW5seSw8L3E+IHNhaWQgRGVtb3N0aGVuZXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj55b3UgZ290IG5vbmUgb2YgdGhlIGh1cnRzIHdoaWNoIHlvdSBkZXNjcmliZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZSBtYW4gcmFpc2VkIGhpcyB2b2ljZSBhbmQgc2hvdXRlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JLCBEZW1vc3RoZW5lcywgbm8gaHVydHM/PC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93LCBpbmRlZWQsPC9xPiBzYWlkIERlbW9zdGhlbmVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgaGVhciB0aGUgdm9pY2Ugb2Ygb25lIHdobyBpcyB3cm9uZ2VkIGFuZCBodXJ0LjwvcT4gU28gaW1wb3J0YW50IGluIHdpbm5pbmcgY3JlZGVuY2UgZGlkIGhlIGNvbnNpZGVyIHRoZSB0b25lIGFuZCBhY3Rpb24gb2YgdGhlIHNwZWFrZXIuIEFjY29yZGluZ2x5LCBoaXMgb3duIGFjdGlvbiBpbiBzcGVha2luZyB3YXMgYXN0b25pc2hpbmdseSBwbGVhc2luZyB0byBtb3N0IG1lbiwgYnV0IG1lbiBvZiByZWZpbmVtZW50LCBsaWtlIERlbWV0cml1cyB0aGUgUGhhbGVyaWFuLCB0aG91Z2h0IGhpcyBtYW5uZXIgbG93LCBpZ25vYmxlLCBhbmQgd2Vhay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIEhlcm1pcHB1cyB0ZWxscyB1cyB0aGF0IEFlc2lvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGNvbnRlbXBvcmFyeSBvZiBEZW1vc3RoZW5lcy48L25vdGU+IHdoZW4gYXNrZWQgaGlzIG9waW5pb24gb2YgdGhlIGFuY2llbnQgb3JhdG9ycyBhcyBjb21wYXJlZCB3aXRoIHRob3NlIG9mIGhpcyBvd24gdGltZSwgc2FpZCB0aGF0IG9uZSB3b3VsZCBoYXZlIGxpc3RlbmVkIHdpdGggYWRtaXJhdGlvbiB3aGVuIHRoZSBvbGRlciBvcmF0b3JzIGRpc2NvdXJzZWQgdG8gdGhlIHBlb3BsZSBkZWNvcm91c2x5IGFuZCBpbiB0aGUgZ3JhbmQgbWFubmVyLCBidXQgdGhhdCB0aGUgc3BlZWNoZXMgb2YgRGVtb3N0aGVuZXMsIHdoZW4gcmVhZCBhbG91ZCwgd2VyZSBmYXIgc3VwZXJpb3IgaW4gcG9pbnQgb2YgYXJyYW5nZW1lbnQgYW5kIHBvd2VyLiBOb3csIGl0IGlzIG5lZWRsZXNzIHRvIHJlbWFyayB0aGF0IGhpcyB3cml0dGVuIHNwZWVjaGVzIGhhdmUgbXVjaCBpbiB0aGVtIHRoYXQgaXMgaGFyc2ggYW5kIGJpdHRlcjsgYnV0IGluIGhpcyBleHRlbXBvcmUgcmVqb2luZGVycyBoZSB3YXMgYWxzbyBodW1vcm91cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluc3RhbmNlLCB3aGVuIERlbWFkZXMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZW1vc3RoZW5lcyB0ZWFjaCBtZSEgQXMgd2VsbCBtaWdodCB0aGUgc293IHRlYWNoIEF0aGVuYS48L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCB3YXMgdGhpcyBBdGhlbmEsPC9xPiBzYWlkIERlbW9zdGhlbmVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgd2FzIGxhdGVseSBmb3VuZCBwbGF5aW5nIHRoZSBoYXJsb3QgaW4gQ29sbHl0dXMuPC9xPiBBbmQgdG8gdGhlIHRoaWVmIG5pY2tuYW1lZCBCcmF6ZW4sIHdobyBhdHRlbXB0ZWQgdG8gbWFrZSBmdW4gb2YgaGltIGZvciBoaXMgbGF0ZSBob3VycyBhbmQgaGlzIHdyaXRpbmcgYXQgbmlnaHQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBrbm93LDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IEkgYW5ub3kgeW91IHdpdGggbXkgbGlnaHRlZCBsYW1wLiAKCQkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHlvdSwgbWVuIG9mIEF0aGVucywgbXVzdCBub3Qgd29uZGVyIGF0IHRoZSB0aGVmdHMgdGhhdCBhcmUgY29tbWl0dGVkLCB3aGVuIHdlIGhhdmUgdGhpZXZlcyBvZiBicmFzcywgYnV0IGhvdXNlLXdhbGxzIG9mIGNsYXkuPC9xPiBIb3dldmVyLCB0aG91Z2ggSSBoYXZlIHN0aWxsIG1vcmUgdG8gc2F5IG9uIHRoaXMgaGVhZCwgSSBzaGFsbCBzdG9wIGhlcmU7IHRoZSBvdGhlciB0cmFpdHMgb2YgaGlzIGNoYXJhY3RlciwgYW5kIGhpcyBkaXNwb3NpdGlvbiwgc2hvdWxkIGJlIHN1cnZleWVkIGluIGNvbm5lY3Rpb24gd2l0aCBoaXMgYWNoaWV2ZW1lbnRzIGFzIGEgc3RhdGVzbWFuLgoJCQk8L3A+CiAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IGNlcnRhaW5seSw8L3E+IHNhaWQgRGVtb3N0aGVuZXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj55b3UgZ290IG5vbmUgb2YgdGhlIGh1cnRzIHdoaWNoIHlvdSBkZXNjcmliZS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIG1hbiByYWlzZWQgaGlzIHZvaWNlIGFuZCBzaG91dGVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSwgRGVtb3N0aGVuZXMsIG5vIGh1cnRzPzwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93LCBpbmRlZWQsPC9xPiBzYWlkIERlbW9zdGhlbmVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoZWFyIHRoZSB2b2ljZSBvZiBvbmUgd2hvIGlzIHdyb25nZWQgYW5kIGh1cnQuPC9xPiBTbyBpbXBvcnRhbnQgaW4gd2lubmluZyBjcmVkZW5jZSBkaWQgaGUgY29uc2lkZXIgdGhlIHRvbmUgYW5kIGFjdGlvbiBvZiB0aGUgc3BlYWtlci4gQWNjb3JkaW5nbHksIGhpcyBvd24gYWN0aW9uIGluIHNwZWFraW5nIHdhcyBhc3RvbmlzaGluZ2x5IHBsZWFzaW5nIHRvIG1vc3QgbWVuLCBidXQgbWVuIG9mIHJlZmluZW1lbnQsIGxpa2UgRGVtZXRyaXVzIHRoZSBQaGFsZXJpYW4sIHRob3VnaHQgaGlzIG1hbm5lciBsb3csIGlnbm9ibGUsIGFuZCB3ZWFrLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBIZXJtaXBwdXMgdGVsbHMgdXMgdGhhdCBBZXNpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGNvbnRlbXBvcmFyeSBvZiBEZW1vc3RoZW5lcy48L25vdGU+IHdoZW4gYXNrZWQgaGlzIG9waW5pb24gb2YgdGhlIGFuY2llbnQgb3JhdG9ycyBhcyBjb21wYXJlZCB3aXRoIHRob3NlIG9mIGhpcyBvd24gdGltZSwgc2FpZCB0aGF0IG9uZSB3b3VsZCBoYXZlIGxpc3RlbmVkIHdpdGggYWRtaXJhdGlvbiB3aGVuIHRoZSBvbGRlciBvcmF0b3JzIGRpc2NvdXJzZWQgdG8gdGhlIHBlb3BsZSBkZWNvcm91c2x5IGFuZCBpbiB0aGUgZ3JhbmQgbWFubmVyLCBidXQgdGhhdCB0aGUgc3BlZWNoZXMgb2YgRGVtb3N0aGVuZXMsIHdoZW4gcmVhZCBhbG91ZCwgd2VyZSBmYXIgc3VwZXJpb3IgaW4gcG9pbnQgb2YgYXJyYW5nZW1lbnQgYW5kIHBvd2VyLiBOb3csIGl0IGlzIG5lZWRsZXNzIHRvIHJlbWFyayB0aGF0IGhpcyB3cml0dGVuIHNwZWVjaGVzIGhhdmUgbXVjaCBpbiB0aGVtIHRoYXQgaXMgaGFyc2ggYW5kIGJpdHRlcjsgYnV0IGluIGhpcyBleHRlbXBvcmUgcmVqb2luZGVycyBoZSB3YXMgYWxzbyBodW1vcm91cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgd2hlbiBEZW1hZGVzIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EZW1vc3RoZW5lcyB0ZWFjaCBtZSEgQXMgd2VsbCBtaWdodCB0aGUgc293IHRlYWNoIEF0aGVuYS48L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IHdhcyB0aGlzIEF0aGVuYSw8L3E+IHNhaWQgRGVtb3N0aGVuZXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IHdhcyBsYXRlbHkgZm91bmQgcGxheWluZyB0aGUgaGFybG90IGluIENvbGx5dHVzLjwvcT4gQW5kIHRvIHRoZSB0aGllZiBuaWNrbmFtZWQgQnJhemVuLCB3aG8gYXR0ZW1wdGVkIHRvIG1ha2UgZnVuIG9mIGhpbSBmb3IgaGlzIGxhdGUgaG91cnMgYW5kIGhpcyB3cml0aW5nIGF0IG5pZ2h0LCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBrbm93LDwvcT4gaGUgc2FpZCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgSSBhbm5veSB5b3Ugd2l0aCBteSBsaWdodGVkIGxhbXAuIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB5b3UsIG1lbiBvZiBBdGhlbnMsIG11c3Qgbm90IHdvbmRlciBhdCB0aGUgdGhlZnRzIHRoYXQgYXJlIGNvbW1pdHRlZCwgd2hlbiB3ZSBoYXZlIHRoaWV2ZXMgb2YgYnJhc3MsIGJ1dCBob3VzZS13YWxscyBvZiBjbGF5LjwvcT4gSG93ZXZlciwgdGhvdWdoIEkgaGF2ZSBzdGlsbCBtb3JlIHRvIHNheSBvbiB0aGlzIGhlYWQsIEkgc2hhbGwgc3RvcCBoZXJlOyB0aGUgb3RoZXIgdHJhaXRzIG9mIGhpcyBjaGFyYWN0ZXIsIGFuZCBoaXMgZGlzcG9zaXRpb24sIHNob3VsZCBiZSBzdXJ2ZXllZCBpbiBjb25uZWN0aW9uIHdpdGggaGlzIGFjaGlldmVtZW50cyBhcyBhIHN0YXRlc21hbi4KCQkJPC90cmFuc2xhdGlvbj4="
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB5b3UsIG1lbiBvZiBBdGhlbnMsIG11c3Qgbm90IHdvbmRlciBhdCB0aGUgdGhlZnRzIHRoYXQgYXJlIGNvbW1pdHRlZCwgd2hlbiB3ZSBoYXZlIHRoaWV2ZXMgb2YgYnJhc3MsIGJ1dCBob3VzZS13YWxscyBvZiBjbGF5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIGhlIHNldCBvdXQgdG8gZW5nYWdlIGluIHB1YmxpYyBtYXR0ZXJzIGFmdGVyIHRoZSBQaG9jaWFuIHdhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjM1Ny0zNDYgQi5DLjwvbm90ZT4gaGFkIGJyb2tlbiBvdXQsIGFzIGhlIGhpbXNlbGYgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T24gdGhlIENyb3duPC90aXRsZT4sIMKnIDE4PC9iaWJsPi48L25vdGU+IGFuZCBhcyBpdCBpcyBwb3NzaWJsZSB0byBnYXRoZXIgZnJvbSBoaXMgUGhpbGlwcGljIGhhcmFuZ3Vlcy4gRm9yIHNvbWUgb2YgdGhlc2Ugd2VyZSBtYWRlIGFmdGVyIHRoZSBQaG9jaWFuIHdhciB3YXMgYWxyZWFkeSBlbmRlZCwgYW5kIHRoZSBlYXJsaWVzdCBvZiB0aGVtIHRvdWNoIHVwb24gYWZmYWlycyB3aGljaCB3ZXJlIGNsb3NlbHkgY29ubmVjdGVkIHdpdGggaXQuIEFuZCBpdCBpcyBjbGVhciB0aGF0IHdoZW4gaGUgcHJlcGFyZWQgaGltc2VsZiB0byBzcGVhayBpbiB0aGUgcHJvc2VjdXRpb24gb2YgTWVpZGlhczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDM1MCBCLkMuIFRoZSBzcGVlY2ggCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWdhbmluc3QgTWVpZGlhczwvcT4gKDx0aXRsZT5Pci48L3RpdGxlPiB4eGkuKSB3YXMgbmV2ZXIgZGVsaXZlcmVkLiAgU2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjE1NCIgdmFsaWQ9InllcyI+wqcgIDE1NDwvYmlibD4uPC9ub3RlPiBoZSB3YXMgdGhpcnR5LXR3byB5ZWFycyBvbGQsIGJ1dCBoYWQgYXMgeWV0IG5vIHBvd2VyIG9yIHJlcHV0YXRpb24gaW4gdGhlIGNvbmR1Y3Qgb2YgdGhlIGNpdHkncyBhZmZhaXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGlzIGZlYXJzIG9uIHRoaXMgc2NvcmUgd2VyZSB0aGUgY2hpZWYgcmVhc29uLCBpbiBteSBvcGluaW9uLCB3aHkgaGUgY29tcHJvbWlzZWQgaGlzIGNhc2UgYWdhaW5zdCB0aGUgbWFuIGhlIGhhdGVkIGZvciBhIHN1bSBvZiBtb25leToKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+Rm9yIGhlIHdhcyBub3QgYXQgYWxsIGEgc3dlZXQtdGVtcGVyZWQgbWFuIG9yIDwvbD4KCQkJCQkgICAgICAgICAgPGw+b2YgZ2VudGxlIG1vb2QsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDIwLjQ2NyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5JSWlhZDwvdGl0bGU+LCB4eC4gNDY3PC9iaWJsPiwgb2YgQWNoaWxsZXMuPC9ub3RlPgoJCQkJYnV0IHZlaGVtZW50IGFuZCB2aW9sZW50IGluIGhpcyByZXF1aXRhbHMuIEhvd2V2ZXIsIHNlZWluZyB0aGF0IGl0IHdhcyBubyBtZWFuIHRhc2sgYW5kIG9uZSBiZXlvbmQgaGlzIHBvd2VyIHRvIG92ZXJ0aHJvdyBhIG1hbiBsaWtlIE1laWRpYXMsIHdobyB3YXMgd2VsbCBoZWRnZWQgYWJvdXQgd2l0aCB3ZWFsdGgsIG9yYXRvcnkgYW5kIGZyaWVuZHMsIGhlIHlpZWxkZWQgdG8gdGhvc2Ugd2hvIGludGVyY2VkZWQgaW4gaGlzIGJlaGFsZi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGl0IGRvZXMgbm90IHNlZW0gdG8gbWUgdGhhdCB0aGUgdGhyZWUgdGhvdXNhbmQgZHJhY2htYXMgb2YgdGhlbXNlbHZlcyBjb3VsZCBoYXZlIGR1bGxlZCB0aGUgYml0dGVyIGZlZWxpbmdzIG9mIERlbW9zdGhlbmVzIGlmIGhlIGhhZCBleHBlY3RlZCBvciBmZWx0IGFibGUgdG8gdHJpdW1waCBvdmVyIGhpcyBhZHZlcnNhcnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgaGUgc2V0IG91dCB0byBlbmdhZ2UgaW4gcHVibGljIG1hdHRlcnMgYWZ0ZXIgdGhlIFBob2NpYW4gd2FyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4zNTctMzQ2IEIuQy48L25vdGU+IGhhZCBicm9rZW4gb3V0LCBhcyBoZSBoaW1zZWxmIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4xOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBDcm93bjwvdGl0bGU+LCDCpyAxODwvYmlibD4uPC9ub3RlPiBhbmQgYXMgaXQgaXMgcG9zc2libGUgdG8gZ2F0aGVyIGZyb20gaGlzIFBoaWxpcHBpYyBoYXJhbmd1ZXMuIEZvciBzb21lIG9mIHRoZXNlIHdlcmUgbWFkZSBhZnRlciB0aGUgUGhvY2lhbiB3YXIgd2FzIGFscmVhZHkgZW5kZWQsIGFuZCB0aGUgZWFybGllc3Qgb2YgdGhlbSB0b3VjaCB1cG9uIGFmZmFpcnMgd2hpY2ggd2VyZSBjbG9zZWx5IGNvbm5lY3RlZCB3aXRoIGl0LiBBbmQgaXQgaXMgY2xlYXIgdGhhdCB3aGVuIGhlIHByZXBhcmVkIGhpbXNlbGYgdG8gc3BlYWsgaW4gdGhlIHByb3NlY3V0aW9uIG9mIE1laWRpYXM8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjE4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4sIMKnIDE4PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgQ3Jvd248L3RpdGxlPiwgwqcgMTg8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDM1MCBCLkMuIFRoZSBzcGVlY2ggCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BZ2FuaW5zdCBNZWlkaWFzPC9xPiAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHhpLikgd2FzIG5ldmVyIGRlbGl2ZXJlZC4gIFNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjE1NCIgdmFsaWQ9InllcyI+wqcgIDE1NDwvYmlibD4uPC9ub3RlPiBoZSB3YXMgdGhpcnR5LXR3byB5ZWFycyBvbGQsIGJ1dCBoYWQgYXMgeWV0IG5vIHBvd2VyIG9yIHJlcHV0YXRpb24gaW4gdGhlIGNvbmR1Y3Qgb2YgdGhlIGNpdHkncyBhZmZhaXJzLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWdhbmluc3QgTWVpZGlhczwvcT4gKDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+IHh4aS4pIHdhcyBuZXZlciBkZWxpdmVyZWQuICBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4xNTQiIHZhbGlkPSJ5ZXMiPsKnICAxNTQ8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoaXMgZmVhcnMgb24gdGhpcyBzY29yZSB3ZXJlIHRoZSBjaGllZiByZWFzb24sIGluIG15IG9waW5pb24sIHdoeSBoZSBjb21wcm9taXNlZCBoaXMgY2FzZSBhZ2FpbnN0IHRoZSBtYW4gaGUgaGF0ZWQgZm9yIGEgc3VtIG9mIG1vbmV5OgoJCQkJPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIGhlIHdhcyBub3QgYXQgYWxsIGEgc3dlZXQtdGVtcGVyZWQgbWFuIG9yIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5vZiBnZW50bGUgbW9vZCw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Rm9yIGhlIHdhcyBub3QgYXQgYWxsIGEgc3dlZXQtdGVtcGVyZWQgbWFuIG9yIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5vZiBnZW50bGUgbW9vZCw8L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDIwLjQ2NyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklJaWFkPC90aXRsZT4sIHh4LiA0Njc8L2JpYmw+LCBvZiBBY2hpbGxlcy48L25vdGU+CgkJCQlidXQgdmVoZW1lbnQgYW5kIHZpb2xlbnQgaW4gaGlzIHJlcXVpdGFscy4gSG93ZXZlciwgc2VlaW5nIHRoYXQgaXQgd2FzIG5vIG1lYW4gdGFzayBhbmQgb25lIGJleW9uZCBoaXMgcG93ZXIgdG8gb3ZlcnRocm93IGEgbWFuIGxpa2UgTWVpZGlhcywgd2hvIHdhcyB3ZWxsIGhlZGdlZCBhYm91dCB3aXRoIHdlYWx0aCwgb3JhdG9yeSBhbmQgZnJpZW5kcywgaGUgeWllbGRlZCB0byB0aG9zZSB3aG8gaW50ZXJjZWRlZCBpbiBoaXMgYmVoYWxmLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDIwLjQ2NyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklJaWFkPC90aXRsZT4sIHh4LiA0Njc8L2JpYmw+LCBvZiBBY2hpbGxlcy48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JSWlhZDwvdGl0bGU+LCB4eC4gNDY3PC90cmFuc2xhdGlvbj4="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBkb2VzIG5vdCBzZWVtIHRvIG1lIHRoYXQgdGhlIHRocmVlIHRob3VzYW5kIGRyYWNobWFzIG9mIHRoZW1zZWx2ZXMgY291bGQgaGF2ZSBkdWxsZWQgdGhlIGJpdHRlciBmZWVsaW5ncyBvZiBEZW1vc3RoZW5lcyBpZiBoZSBoYWQgZXhwZWN0ZWQgb3IgZmVsdCBhYmxlIHRvIHRyaXVtcGggb3ZlciBoaXMgYWR2ZXJzYXJ5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB3aGVuIGhlIGhhZCBvbmNlIHRha2VuIGFzIGEgbm9ibGUgYmFzaXMgZm9yIGhpcyBwb2xpdGljYWwgYWN0aXZpdHkgdGhlIGRlZmVuY2Ugb2YgdGhlIEdyZWVrcyBhZ2FpbnN0IFBoaWxpcCwgYW5kIHdhcyBjb250ZW5kaW5nIHdvcnRoaWx5IGhlcmUsIGhlIHF1aWNrbHkgd29uIGEgcmVwdXRhdGlvbiBhbmQgd2FzIGxpZnRlZCBpbnRvIGEgY29uc3BpY3VvdXMgcGxhY2UgYnkgdGhlIGJvbGRuZXNzIG9mIGhpcyBzcGVlY2hlcywgc28gdGhhdCBoZSB3YXMgYWRtaXJlZCBpbiBHcmVlY2UsIGFuZCB0cmVhdGVkIHdpdGggZGVmZXJlbmNlIGJ5IHRoZSBHcmVhdCBLaW5nOyAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCwgdG9vLCBtYWRlIG1vcmUgYWNjb3VudCBvZiBoaW0gdGhhbiBvZiBhbnkgb3RoZXIgcG9wdWxhciBsZWFkZXIgYXQgQXRoZW5zLCBhbmQgaXQgd2FzIGFkbWl0dGVkIGV2ZW4gYnkgdGhvc2Ugd2hvIGhhdGVkIGhpbSB0aGF0IHRoZXkgaGFkIHRvIGNvbnRlbmQgd2l0aCBhIG1hbiBvZiBtYXJrLiBGb3IgYm90aCBBZXNjaGluZXMgYW5kIEh5cGVyZWlkZXMgc2F5IHRodXMgbXVjaCBmb3IgaGltIHdoaWxlIGRlbm91bmNpbmcgaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCwgdG9vLCBtYWRlIG1vcmUgYWNjb3VudCBvZiBoaW0gdGhhbiBvZiBhbnkgb3RoZXIgcG9wdWxhciBsZWFkZXIgYXQgQXRoZW5zLCBhbmQgaXQgd2FzIGFkbWl0dGVkIGV2ZW4gYnkgdGhvc2Ugd2hvIGhhdGVkIGhpbSB0aGF0IHRoZXkgaGFkIHRvIGNvbnRlbmQgd2l0aCBhIG1hbiBvZiBtYXJrLiBGb3IgYm90aCBBZXNjaGluZXMgYW5kIEh5cGVyZWlkZXMgc2F5IHRodXMgbXVjaCBmb3IgaGltIHdoaWxlIGRlbm91bmNpbmcgaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVyZWZvcmUgSSBkbyBub3Qga25vdyBob3cgaXQgb2NjdXJyZWQgdG8gVGhlb3BvbXB1cyB0byBzYXkgdGhhdCBEZW1vc3RoZW5lcyB3YXMgdW5zdGFibGUgaW4gaGlzIGNoYXJhY3RlciBhbmQgdW5hYmxlIHRvIHJlbWFpbiB0cnVlIGZvciBhbnkgbGVuZ3RoIG9mIHRpbWUgdG8gdGhlIHNhbWUgcG9saWNpZXMgb3IgdGhlIHNhbWUgbWVuLiBGb3IgaXQgaXMgYXBwYXJlbnQgdGhhdCBhZnRlciBoZSBoYWQgYXQgdGhlIG91dHNldCBhZG9wdGVkIGEgcGFydHkgYW5kIGEgbGluZSBvZiBwb2xpY3kgaW4gdGhlIGNvbmR1Y3Qgb2YgdGhlIGNpdHkncyBhZmZhaXJzLCBoZSBtYWludGFpbmVkIHRoaXMgdG8gdGhlIGVuZCwgYW5kIG5vdCBvbmx5IGRpZCBub3QgY2hhbmdlIGhpcyBwb3NpdGlvbiB3aGlsZSBoZSBsaXZlZCwgYnV0IGFjdHVhbGx5IGdhdmUgdXAgaGlzIGxpZmUgdGhhdCBoZSBtaWdodCBub3QgY2hhbmdlIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgd2FzIG5vdCBsaWtlIERlbWFkZXMsIHdobyBhcG9sb2dpc2VkIGZvciBoaXMgY2hhbmdlIG9mIHBvbGljeSBieSBzYXlpbmcgdGhhdCBoZSBvZnRlbiBzcG9rZSBhdCB2YXJpYW5jZSB3aXRoIGhpbXNlbGYsIGJ1dCBuZXZlciBhdCB2YXJpYW5jZSB3aXRoIHRoZSBpbnRlcmVzdHMgb2YgdGhlIGNpdHk7IG5vciBsaWtlIE1lbGFub3B1cywgd2hvLCB0aG91Z2ggb3Bwb3NlZCBwb2xpdGljYWxseSB0byBDYWxsaXN0cmF0dXMsIHdhcyBvZnRlbiBib3VnaHQgb3ZlciBieSBoaW0sIGFuZCB0aGVuIHdvdWxkIHNheSB0byB0aGUgcGVvcGxlOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBtYW4gaXMgbXkgZW5lbXksIGl0IGlzIHRydWUsIGJ1dCB0aGUgaW50ZXJlc3RzIG9mIHRoZSBjaXR5IHNoYWxsIHByZXZhaWw8L3E+OyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5ub3IgbGlrZSBOaWNvZGVtdXMgdGhlIE1lc3Nlbmlhbiwgd2hvIGZpcnN0IGF0dGFjaGVkIGhpbXNlbGYgdG8gQ2Fzc2FuZGVyIGFuZCB0aGVuIGFnYWluIGFkdm9jYXRlZCB0aGUgaW50ZXJlc3RzIG9mIERlbWV0cml1cywgYnV0IHNhaWQgdGhhdCBoZSB3YXMgbm90IGNvbnRyYWRpY3RpbmcgaGltc2VsZiwgZm9yIGl0IHdhcyBhbHdheXMgYWR2YW50YWdlb3VzIHRvIGxpc3RlbiB0byBvbmUncyBtYXN0ZXJzLiBXZSBjYW5ub3Qgc2F5IHN1Y2ggdGhpbmdzIG9mIERlbW9zdGhlbmVzIGFsc28sIGFzIG9mIG9uZSB3aG8gaXMgdHVybmVkIGZyb20gaGlzIGNvdXJzZSBhbmQgdmVlcnMgdG8gYW5kIGZybyBlaXRoZXIgaW4gd29yZCBvciBkZWVkLW5heSwgaGUgZm9sbG93ZWQgb25lIHVuY2hhbmdlYWJsZSBzY2FsZSwgYXMgaXQgd2VyZSwgYW5kIGV2ZXIgaGVsZCB0byBvbmUga2V5IGluIHBvbGl0aWNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgUGFuYWV0aXVzIHRoZSBwaGlsb3NvcGhlciBzYXlzIHRoYXQgbW9zdCBvZiBoaXMgc3BlZWNoZXMgYWxzbyBhcmUgd3JpdHRlbiBpbiB0aGUgY29udmljdGlvbiB0aGF0IHRoZSBnb29kIGFsb25lIGlzIHRvIGJlIGNob3NlbiBmb3IgaXRzIG93biBzYWtlLCBhcywgZm9yIGluc3RhbmNlLCB0aGUgc3BlZWNoIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gdGhlIENyb3duLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T3IuPC90aXRsZT4geHZpaWk8L2JpYmw+Ljwvbm90ZT4gdGhlIG9uZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFnYWluc3QgQXJpc3RvY3JhdGVzLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T3IuPC90aXRsZT4geHhpaWk8L2JpYmw+Ljwvbm90ZT4gdGhhdCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB0aGUgSW1tdW5pdGllcyw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9yLjwvdGl0bGU+IHh4LjwvYmlibD4gKDx0aXRsZT5BZ2FpbnN0IExlcHRpbmVzPC90aXRsZT4pLjwvbm90ZT4gYW5kIHRoZSBQaGlsaXBwaWNzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T3JzLjwvdGl0bGU+IGl2LjwvYmlibD4sIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYuMSIgdmFsaWQ9InllcyI+dmkuPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gOS4xIiB2YWxpZD0ieWVzIj5peC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gZm9yIGluIGFsbCB0aGVzZSBoZSBkb2VzIG5vdCB0cnkgdG8gbGVhZCBoaXMgY291bnRyeW1lbiB0byBkbyB3aGF0IGlzIHBsZWFzYW50ZXN0IG9yIGVhc2llc3Qgb3IgbW9zdCBwcm9maXRhYmxlLCBidXQgaW4gbWFueSBwbGFjZXMgdGhpbmtzIHRoZXkgb3VnaHQgdG8gbWFrZSB0aGVpciBzYWZldHkgYW5kIHByZXNlcnZhdGlvbiBzZWNvbmRhcnkgdG8gd2hhdCBpcyBob25vdXJhYmxlIGFuZCBmaXR0aW5nLCBzbyB0aGF0LCBpZiB0aGUgbG9mdGluZXNzIG9mIGhpcyBwcmluY2lwbGVzIGFuZCB0aGUgbm9iaWxpdHkgb2YgaGlzIHNwZWVjaGVzIGhhZCBiZWVuIGFjY29tcGFuaWVkIGJ5IHN1Y2ggYnJhdmVyeSBhcyBiZWNvbWVzIGEgd2FycmlvciBhbmQgYnkgaW5jb3JydXB0aWJpbGl0eSBpbiBhbGwgaGlzIGRlYWxpbmdzLCBoZSB3b3VsZCBoYXZlIGJlZW4gd29ydGh5IHRvIGJlIG51bWJlcmVkLCBub3Qgd2l0aCBzdWNoIG9yYXRvcnMgYXMgTW9lcm9jbGVzLCBQb2x5ZXVjdHVzLCBIeXBlcmVpZGVzLCBhbmQgdGhlaXIgY29udGVtcG9yYXJpZXMsIGJ1dCBoaWdoIHVwIHdpdGggQ2ltb24sIFRodWN5ZGlkZXMsIGFuZCBQZXJpY2xlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlIEkgZG8gbm90IGtub3cgaG93IGl0IG9jY3VycmVkIHRvIFRoZW9wb21wdXMgdG8gc2F5IHRoYXQgRGVtb3N0aGVuZXMgd2FzIHVuc3RhYmxlIGluIGhpcyBjaGFyYWN0ZXIgYW5kIHVuYWJsZSB0byByZW1haW4gdHJ1ZSBmb3IgYW55IGxlbmd0aCBvZiB0aW1lIHRvIHRoZSBzYW1lIHBvbGljaWVzIG9yIHRoZSBzYW1lIG1lbi4gRm9yIGl0IGlzIGFwcGFyZW50IHRoYXQgYWZ0ZXIgaGUgaGFkIGF0IHRoZSBvdXRzZXQgYWRvcHRlZCBhIHBhcnR5IGFuZCBhIGxpbmUgb2YgcG9saWN5IGluIHRoZSBjb25kdWN0IG9mIHRoZSBjaXR5J3MgYWZmYWlycywgaGUgbWFpbnRhaW5lZCB0aGlzIHRvIHRoZSBlbmQsIGFuZCBub3Qgb25seSBkaWQgbm90IGNoYW5nZSBoaXMgcG9zaXRpb24gd2hpbGUgaGUgbGl2ZWQsIGJ1dCBhY3R1YWxseSBnYXZlIHVwIGhpcyBsaWZlIHRoYXQgaGUgbWlnaHQgbm90IGNoYW5nZSBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgbm90IGxpa2UgRGVtYWRlcywgd2hvIGFwb2xvZ2lzZWQgZm9yIGhpcyBjaGFuZ2Ugb2YgcG9saWN5IGJ5IHNheWluZyB0aGF0IGhlIG9mdGVuIHNwb2tlIGF0IHZhcmlhbmNlIHdpdGggaGltc2VsZiwgYnV0IG5ldmVyIGF0IHZhcmlhbmNlIHdpdGggdGhlIGludGVyZXN0cyBvZiB0aGUgY2l0eTsgbm9yIGxpa2UgTWVsYW5vcHVzLCB3aG8sIHRob3VnaCBvcHBvc2VkIHBvbGl0aWNhbGx5IHRvIENhbGxpc3RyYXR1cywgd2FzIG9mdGVuIGJvdWdodCBvdmVyIGJ5IGhpbSwgYW5kIHRoZW4gd291bGQgc2F5IHRvIHRoZSBwZW9wbGU6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGUgbWFuIGlzIG15IGVuZW15LCBpdCBpcyB0cnVlLCBidXQgdGhlIGludGVyZXN0cyBvZiB0aGUgY2l0eSBzaGFsbCBwcmV2YWlsPC9xPjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPm5vciBsaWtlIE5pY29kZW11cyB0aGUgTWVzc2VuaWFuLCB3aG8gZmlyc3QgYXR0YWNoZWQgaGltc2VsZiB0byBDYXNzYW5kZXIgYW5kIHRoZW4gYWdhaW4gYWR2b2NhdGVkIHRoZSBpbnRlcmVzdHMgb2YgRGVtZXRyaXVzLCBidXQgc2FpZCB0aGF0IGhlIHdhcyBub3QgY29udHJhZGljdGluZyBoaW1zZWxmLCBmb3IgaXQgd2FzIGFsd2F5cyBhZHZhbnRhZ2VvdXMgdG8gbGlzdGVuIHRvIG9uZSdzIG1hc3RlcnMuIFdlIGNhbm5vdCBzYXkgc3VjaCB0aGluZ3Mgb2YgRGVtb3N0aGVuZXMgYWxzbywgYXMgb2Ygb25lIHdobyBpcyB0dXJuZWQgZnJvbSBoaXMgY291cnNlIGFuZCB2ZWVycyB0byBhbmQgZnJvIGVpdGhlciBpbiB3b3JkIG9yIGRlZWQtbmF5LCBoZSBmb2xsb3dlZCBvbmUgdW5jaGFuZ2VhYmxlIHNjYWxlLCBhcyBpdCB3ZXJlLCBhbmQgZXZlciBoZWxkIHRvIG9uZSBrZXkgaW4gcG9saXRpY3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQYW5hZXRpdXMgdGhlIHBoaWxvc29waGVyIHNheXMgdGhhdCBtb3N0IG9mIGhpcyBzcGVlY2hlcyBhbHNvIGFyZSB3cml0dGVuIGluIHRoZSBjb252aWN0aW9uIHRoYXQgdGhlIGdvb2QgYWxvbmUgaXMgdG8gYmUgY2hvc2VuIGZvciBpdHMgb3duIHNha2UsIGFzLCBmb3IgaW5zdGFuY2UsIHRoZSBzcGVlY2ggCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9uIHRoZSBDcm93biw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+IHh2aWlpPC9iaWJsPi48L25vdGU+IHRoZSBvbmUgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4dmlpaTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHZpaWk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFnYWluc3QgQXJpc3RvY3JhdGVzLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHhpaWk8L2JpYmw+Ljwvbm90ZT4gdGhhdCAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+IHh4aWlpPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eGlpaTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIHRoZSBJbW11bml0aWVzLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHguPC9iaWJsPiAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdhaW5zdCBMZXB0aW5lczwvdGl0bGU+KS48L25vdGU+IGFuZCB0aGUgUGhpbGlwcGljczs8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eC48L2JpYmw+ICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eC48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2FpbnN0IExlcHRpbmVzPC90aXRsZT4pLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JzLjwvdGl0bGU+IGl2LjwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNi4xIiB2YWxpZD0ieWVzIj52aS48L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMSIgdmFsaWQ9InllcyI+aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGZvciBpbiBhbGwgdGhlc2UgaGUgZG9lcyBub3QgdHJ5IHRvIGxlYWQgaGlzIGNvdW50cnltZW4gdG8gZG8gd2hhdCBpcyBwbGVhc2FudGVzdCBvciBlYXNpZXN0IG9yIG1vc3QgcHJvZml0YWJsZSwgYnV0IGluIG1hbnkgcGxhY2VzIHRoaW5rcyB0aGV5IG91Z2h0IHRvIG1ha2UgdGhlaXIgc2FmZXR5IGFuZCBwcmVzZXJ2YXRpb24gc2Vjb25kYXJ5IHRvIHdoYXQgaXMgaG9ub3VyYWJsZSBhbmQgZml0dGluZywgc28gdGhhdCwgaWYgdGhlIGxvZnRpbmVzcyBvZiBoaXMgcHJpbmNpcGxlcyBhbmQgdGhlIG5vYmlsaXR5IG9mIGhpcyBzcGVlY2hlcyBoYWQgYmVlbiBhY2NvbXBhbmllZCBieSBzdWNoIGJyYXZlcnkgYXMgYmVjb21lcyBhIHdhcnJpb3IgYW5kIGJ5IGluY29ycnVwdGliaWxpdHkgaW4gYWxsIGhpcyBkZWFsaW5ncywgaGUgd291bGQgaGF2ZSBiZWVuIHdvcnRoeSB0byBiZSBudW1iZXJlZCwgbm90IHdpdGggc3VjaCBvcmF0b3JzIGFzIE1vZXJvY2xlcywgUG9seWV1Y3R1cywgSHlwZXJlaWRlcywgYW5kIHRoZWlyIGNvbnRlbXBvcmFyaWVzLCBidXQgaGlnaCB1cCB3aXRoIENpbW9uLCBUaHVjeWRpZGVzLCBhbmQgUGVyaWNsZXMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JzLjwvdGl0bGU+IGl2LjwvYmlibD4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9ycy48L3RpdGxlPiBpdi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDYuMSIgdmFsaWQ9InllcyI+dmkuPC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA5LjEiIHZhbGlkPSJ5ZXMiPml4LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIFBob2Npb24sIGFtb25nIGhpcyBjb250ZW1wb3JhcmllcywgdGhvdWdoIGhlIHRvb2sgdGhlIGxlYWQgaW4gYSBwb2xpY3kgd2hpY2ggaXMgbm90IHRvIGJlIGNvbW1lbmRlZCwgYW5kIHRob3VnaCBoZSBoYWQgdGhlIHJlcHV0YXRpb24gb2YgZmF2b3VyaW5nIE1hY2Vkb25pYSwgbmV2ZXJ0aGVsZXNzLCBieSByZWFzb24gb2YgaGlzIGJyYXZlcnkgYW5kIGludGVncml0eSwgd2FzIGhlbGQgdG8gYmUgaW4gbm8gd2lzZSBpbmZlcmlvciB0byBFcGhpYWx0ZXMgYW5kIEFyaXN0aWRlcyBhbmQgQ2ltb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRlbW9zdGhlbmVzLCBob3dldmVyLCB3YXMgbm90IHdvcnRoeSBvZiBjb25maWRlbmNlIHdoZW4gaGUgYm9yZSBhcm1zLCBhcyBEZW1ldHJpdXMgc2F5cywgbm9yIHdhcyBoZSBhbHRvZ2V0aGVyIGluYWNjZXNzaWJsZSB0byBicmliZXMsIGJ1dCB0aG91Z2ggaGUgZGlkIG5vdCBzdWNjdW1iIHRvIHRoZSBnb2xkIHdoaWNoIGNhbWUgZnJvbSBQaGlsaXAgYW5kIE1hY2Vkb25pYSwgdGhhdCB3aGljaCBjYW1lIGRvd24gaW4gc3RyZWFtcyBmcm9tIFN1c2EgYW5kIEVjYmF0YW5hIHJlYWNoZWQgYXJpZCBvdmVyd2hlbG1lZCBoaW0sIGFuZCB0aGVyZWZvcmUgd2hpbGUgaGUgd2FzIG1vc3QgY2FwYWJsZSBvZiBwcmFpc2luZyB0aGUgdmlydHVlcyBvZiBlYXJsaWVyIGdlbmVyYXRpb25zLCBoZSB3YXMgbm90IHNvIGdvb2QgYXQgaW1pdGF0aW5nIHRoZW0uIEZvciBjZXJ0YWlubHkgdGhlIG9yYXRvcnMgb2YgaGlzIG93biBkYXkgKHRob3VnaCBJIGxlYXZlIFBob2Npb24gb3V0IG9mIHRoZSBhY2NvdW50KSB3ZXJlIHN1cnBhc3NlZCBieSBoaW0gZXZlbiBpbiBoaXMgbGlmZSBhbmQgY29udmVyc2F0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgbWFuaWZlc3QgdGhhdCBiZXlvbmQgdGhlbSBhbGwgaGUgcmVhc29uZWQgYm9sZGx5IHdpdGggdGhlIHBlb3BsZSwgb3Bwb3NlZCBoaW1zZWxmIHRvIHRoZSBkZXNpcmVzIG9mIHRoZSBtdWx0aXR1ZGUsIGFuZCBwZXJzaXN0ZW50bHkgYXR0YWNrZWQgdGhlaXIgZmF1bHRzLCBhcyBtYXkgYmUgZ2F0aGVyZWQgZnJvbSBoaXMgc3BlZWNoZXMuIEFuZCBldmVuIFRoZW9wb21wdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVvcG9tcHVzIGFsbW9zdCBhbHdheXMgZGlzcGxheXMgaG9zdGlsaXR5IHRvIEF0aGVucyBhbmQgaGVyIHBvcHVsYXIgbGVhZGVycy48L25vdGU+IHRlbGxzIHVzIHRoYXQsIHdoZW4gdGhlIEF0aGVuaWFucyBub21pbmF0ZWQgaGltIHRvIGNvbmR1Y3QgYSBjZXJ0YWluIGltcGVhY2htZW50LCBhbmQsIG9uIGhpcyByZWZ1c2FsLCByYWlzZWQgYSB0dW11bHQgYWdhaW5zdCBoaW0sIGhlIHJvc2UgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWVuIG9mIEF0aGVucywgSSB3aWxsIHNlcnZlIHlvdSBhcyBhIGNvdW5zZWxsb3IsIGV2ZW4gdGhvdWdoIHlvdSBkbyBub3Qgd2lzaCBpdDsgYnV0IG5vdCBhcyBhIGZhbHNlIGFjY3VzZXIsIGV2ZW4gdGhvdWdoIHlvdSB3aXNoIGl0LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhlIG1lYXN1cmVzIHdoaWNoIGhlIHRvb2sgaW4gdGhlIGNhc2Ugb2YgQW50aXBob248bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTMyIiB2YWxpZD0ieWVzIj5EZW1vc3RoZW5lcywgPHRpdGxlPk9uIHRoZSBDcm93bjwvdGl0bGU+IMKnIMKnICAxMzIgZjwvYmlibD4uPC9ub3RlPiB3ZXJlIGV4Y2VlZGluZ2x5IGFyaXN0b2NyYXRpYyBpbiB0aGVpciBzcGlyaXQuIEFudGlwaG9uIGhhZCBiZWVuIGFjcXVpdHRlZCBieSB0aGUgYXNzZW1ibHksIGJ1dCBEZW1vc3RoZW5lcyBhcnJlc3RlZCBoaW0gYW5kIGJyb3VnaHQgaGltIGJlZm9yZSB0aGUgY291bmNpbCBvZiB0aGUgQXJlaW9wYWd1cywgYW5kIG1ha2luZyBubyBhY2NvdW50IG9mIHRoZSBvZmZlbmNlIHRodXMgZ2l2ZW4gdG8gdGhlIHBlb3BsZSwgY29udmljdGVkIGhpbSBvZiBoYXZpbmcgcHJvbWlzZWQgUGhpbGlwIHRvIHNldCBmaXJlIHRvIHRoZSBkb2NreWFyZHM7IGFuZCBBbnRpcGhvbiB3YXMgZ2l2ZW4gdXAgdG8ganVzdGljZSBieSB0aGUgY291bmNpbCBhbmQgc3VmZmVyZWQgZGVhdGguIEhlIGFsc28gYWNjdXNlZCB0aGUgcHJpZXN0ZXNzIFRoZW9yaXMgb2YgbWFueSBtaXNkZW1lYW5vdXJzLCBhbmQgcGFydGljdWxhcmx5IG9mIHRlYWNoaW5nIHRoZSBzbGF2ZXMgdG8gcHJhY3Rpc2UgZGVjZWl0OyBhbmQgYnkgZml4aW5nIHRoZSBwZW5hbHR5IGF0IGRlYXRoIGhlIGJyb3VnaHQgYWJvdXQgaGVyIGV4ZWN1dGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIFBob2Npb24sIGFtb25nIGhpcyBjb250ZW1wb3JhcmllcywgdGhvdWdoIGhlIHRvb2sgdGhlIGxlYWQgaW4gYSBwb2xpY3kgd2hpY2ggaXMgbm90IHRvIGJlIGNvbW1lbmRlZCwgYW5kIHRob3VnaCBoZSBoYWQgdGhlIHJlcHV0YXRpb24gb2YgZmF2b3VyaW5nIE1hY2Vkb25pYSwgbmV2ZXJ0aGVsZXNzLCBieSByZWFzb24gb2YgaGlzIGJyYXZlcnkgYW5kIGludGVncml0eSwgd2FzIGhlbGQgdG8gYmUgaW4gbm8gd2lzZSBpbmZlcmlvciB0byBFcGhpYWx0ZXMgYW5kIEFyaXN0aWRlcyBhbmQgQ2ltb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRlbW9zdGhlbmVzLCBob3dldmVyLCB3YXMgbm90IHdvcnRoeSBvZiBjb25maWRlbmNlIHdoZW4gaGUgYm9yZSBhcm1zLCBhcyBEZW1ldHJpdXMgc2F5cywgbm9yIHdhcyBoZSBhbHRvZ2V0aGVyIGluYWNjZXNzaWJsZSB0byBicmliZXMsIGJ1dCB0aG91Z2ggaGUgZGlkIG5vdCBzdWNjdW1iIHRvIHRoZSBnb2xkIHdoaWNoIGNhbWUgZnJvbSBQaGlsaXAgYW5kIE1hY2Vkb25pYSwgdGhhdCB3aGljaCBjYW1lIGRvd24gaW4gc3RyZWFtcyBmcm9tIFN1c2EgYW5kIEVjYmF0YW5hIHJlYWNoZWQgYXJpZCBvdmVyd2hlbG1lZCBoaW0sIGFuZCB0aGVyZWZvcmUgd2hpbGUgaGUgd2FzIG1vc3QgY2FwYWJsZSBvZiBwcmFpc2luZyB0aGUgdmlydHVlcyBvZiBlYXJsaWVyIGdlbmVyYXRpb25zLCBoZSB3YXMgbm90IHNvIGdvb2QgYXQgaW1pdGF0aW5nIHRoZW0uIEZvciBjZXJ0YWlubHkgdGhlIG9yYXRvcnMgb2YgaGlzIG93biBkYXkgKHRob3VnaCBJIGxlYXZlIFBob2Npb24gb3V0IG9mIHRoZSBhY2NvdW50KSB3ZXJlIHN1cnBhc3NlZCBieSBoaW0gZXZlbiBpbiBoaXMgbGlmZSBhbmQgY29udmVyc2F0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBtYW5pZmVzdCB0aGF0IGJleW9uZCB0aGVtIGFsbCBoZSByZWFzb25lZCBib2xkbHkgd2l0aCB0aGUgcGVvcGxlLCBvcHBvc2VkIGhpbXNlbGYgdG8gdGhlIGRlc2lyZXMgb2YgdGhlIG11bHRpdHVkZSwgYW5kIHBlcnNpc3RlbnRseSBhdHRhY2tlZCB0aGVpciBmYXVsdHMsIGFzIG1heSBiZSBnYXRoZXJlZCBmcm9tIGhpcyBzcGVlY2hlcy4gQW5kIGV2ZW4gVGhlb3BvbXB1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlb3BvbXB1cyBhbG1vc3QgYWx3YXlzIGRpc3BsYXlzIGhvc3RpbGl0eSB0byBBdGhlbnMgYW5kIGhlciBwb3B1bGFyIGxlYWRlcnMuPC9ub3RlPiB0ZWxscyB1cyB0aGF0LCB3aGVuIHRoZSBBdGhlbmlhbnMgbm9taW5hdGVkIGhpbSB0byBjb25kdWN0IGEgY2VydGFpbiBpbXBlYWNobWVudCwgYW5kLCBvbiBoaXMgcmVmdXNhbCwgcmFpc2VkIGEgdHVtdWx0IGFnYWluc3QgaGltLCBoZSByb3NlIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWVuIG9mIEF0aGVucywgSSB3aWxsIHNlcnZlIHlvdSBhcyBhIGNvdW5zZWxsb3IsIGV2ZW4gdGhvdWdoIHlvdSBkbyBub3Qgd2lzaCBpdDsgYnV0IG5vdCBhcyBhIGZhbHNlIGFjY3VzZXIsIGV2ZW4gdGhvdWdoIHlvdSB3aXNoIGl0LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbWVhc3VyZXMgd2hpY2ggaGUgdG9vayBpbiB0aGUgY2FzZSBvZiBBbnRpcGhvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTMyIiB2YWxpZD0ieWVzIj5EZW1vc3RoZW5lcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4gwqcgwqcgIDEzMiBmPC9iaWJsPi48L25vdGU+IHdlcmUgZXhjZWVkaW5nbHkgYXJpc3RvY3JhdGljIGluIHRoZWlyIHNwaXJpdC4gQW50aXBob24gaGFkIGJlZW4gYWNxdWl0dGVkIGJ5IHRoZSBhc3NlbWJseSwgYnV0IERlbW9zdGhlbmVzIGFycmVzdGVkIGhpbSBhbmQgYnJvdWdodCBoaW0gYmVmb3JlIHRoZSBjb3VuY2lsIG9mIHRoZSBBcmVpb3BhZ3VzLCBhbmQgbWFraW5nIG5vIGFjY291bnQgb2YgdGhlIG9mZmVuY2UgdGh1cyBnaXZlbiB0byB0aGUgcGVvcGxlLCBjb252aWN0ZWQgaGltIG9mIGhhdmluZyBwcm9taXNlZCBQaGlsaXAgdG8gc2V0IGZpcmUgdG8gdGhlIGRvY2t5YXJkczsgYW5kIEFudGlwaG9uIHdhcyBnaXZlbiB1cCB0byBqdXN0aWNlIGJ5IHRoZSBjb3VuY2lsIGFuZCBzdWZmZXJlZCBkZWF0aC4gSGUgYWxzbyBhY2N1c2VkIHRoZSBwcmllc3Rlc3MgVGhlb3JpcyBvZiBtYW55IG1pc2RlbWVhbm91cnMsIGFuZCBwYXJ0aWN1bGFybHkgb2YgdGVhY2hpbmcgdGhlIHNsYXZlcyB0byBwcmFjdGlzZSBkZWNlaXQ7IGFuZCBieSBmaXhpbmcgdGhlIHBlbmFsdHkgYXQgZGVhdGggaGUgYnJvdWdodCBhYm91dCBoZXIgZXhlY3V0aW9uLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE4LjEzMiIgdmFsaWQ9InllcyI+RGVtb3N0aGVuZXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBDcm93bjwvdGl0bGU+IMKnIMKnICAxMzIgZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4gwqcgwqcgIDEzMiBmPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCwgdG9vLCB0aGF0IHRoZSBzcGVlY2ggd2hpY2ggQXBvbGxvZG9ydXMgdXNlZCBpbiBvcmRlciB0byBzZWN1cmUgdGhlIGNvbnZpY3Rpb24gb2YgVGltb3RoZXVzIHRoZSBnZW5lcmFsIGluIGFuIGFjdGlvbiBmb3IgZGVidCB3YXMgd3JpdHRlbiBmb3IgaGltIGJ5IERlbW9zdGhlbmVzLCBhbmQgbGlrZXdpc2UgdGhlIHNwZWVjaGVzIHdoaWNoIEFwb2xsb2RvcnVzIHVzZWQgYWdhaW5zdCBQaG9ybWlvIGFuZCBTdGVwaGFudXMsIGluIHdoaWNoIGNhc2VzIERlbW9zdGhlbmVzIHByb3Blcmx5IHdvbiBkaXNjcmVkaXQuIEZvciBQaG9ybWlvIGNvbnRlbmRlZCBhZ2FpbnN0IEFwb2xsb2RvcnVzIHdpdGggYSBzcGVlY2ggd2hpY2ggRGVtb3N0aGVuZXMgaGFkIHdyaXR0ZW4gZm9yIGhpbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Pci48L3RpdGxlPiB4eHh2aTwvYmlibD4uPC9ub3RlPiB0aGUgb3JhdG9yIHRodXMgc2ltcGx5IHNlbGxpbmcgdG8gdGhlIGRpc3B1dGFudHMsIGFzIGl0IHdlcmUgZnJvbSBvbmUgYW5kIHRoZSBzYW1lIGN1dGxlcnktc2hvcCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gNC4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGl2LiAxPC9iaWJsPi48L25vdGU+IHRoZSBrbml2ZXMgd2l0aCB3aGljaCB0byB3b3VuZCBlYWNoIG90aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgb2YgaGlzIHB1YmxpYyBvcmF0aW9ucywgdGhvc2UgYWdhaW5zdCBBbmRyb3Rpb248bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Pci48L3RpdGxlPi4geHhpaTwvYmlibD4uPC9ub3RlPiBhbmQgVGltb2NyYXRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9yLjwvdGl0bGU+IHh4aXY8L2JpYmw+Ljwvbm90ZT4gYW5kIEFyaXN0b2NyYXRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9yLjwvdGl0bGU+IHh4aWlpPC9iaWJsPi48L25vdGU+IHdlcmUgd3JpdHRlbiBmb3Igb3RoZXJzIHRvIHByb25vdW5jZSwgYmVmb3JlIGhlIGhhZCBhcyB5ZXQgZW50ZXJlZCBwdWJsaWMgbGlmZTsgZm9yIGl0IGFwcGVhcnMgdGhhdCB0aGVzZSBzcGVlY2hlcyB3ZXJlIHByb2R1Y2VkIHdoZW4gaGUgd2FzIHR3ZW50eS1zZXZlbiBvciB0d2VudHktZWlnaHQgeWVhcnMgb2YgYWdlLiBCdXQgaGUgaGltc2VsZiBkZWxpdmVyZWQgdGhlIHNwZWVjaCBhZ2FpbnN0IEFyaXN0b2dlaXRvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Pci48L3RpdGxlPiB4eHY8L2JpYmw+Ljwvbm90ZT4gYXMgd2VsbCBhcyB0aGUgb25lIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gdGhlIEltbXVuaXRpZXMsPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Pci48L3RpdGxlPiB4eDwvYmlibD4uPC9ub3RlPiBhdCB0aGUgaW5zdGFuY2UsIGFzIGhlIGhpbXNlbGYgc2F5cywgb2YgQ3Rlc2lwcHVzIHRoZSBzb24gb2YgQ2hhYnJpYXMsIGJ1dCBhcyBzb21lIHNheSwgYmVjYXVzZSBoZSB3YXMgd29vaW5nIHRoZSBtb3RoZXIgb2YgdGhpcyB5b3VuZyBtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpZCBub3QgbWFycnkgdGhpcyB3b21hbiwgYnV0IGhhZCBhIGNlcnRhaW4gd29tYW4gb2YgU2Ftb3MgdG8gd2lmZSwgYXMgRGVtZXRyaXVzIHRoZSBNYWduZXNpYW4gdGVsbHMgdXMgaW4gaGlzIHdvcmsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiBQZXJzb25zIG9mIHRoZSBTYW1lIE5hbWUuPC9xPiBXaGV0aGVyIHRoZSBzcGVlY2ggZGVub3VuY2luZyB0aGUgdHJlYWNoZXJvdXMgZW1iYXNzYWdlIG9mIEFlc2NoaW5lczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk9yLjwvdGl0bGU+IHhpeDwvYmlibD4uPC9ub3RlPiB3YXMgZGVsaXZlcmVkIG9yIG5vdCwgaXMgdW5jZXJ0YWluOyBhbmQgeWV0IElkb21lbmV1cyBzYXlzIHRoYXQgQWVzY2hpbmVzIGdvdCBvZmYgYnkgb25seSB0aGlydHkgdm90ZXMuIEJ1dCB0aGlzIHdvdWxkIHNlZW0gdG8gYmUgdW50cnVlLCBpZiB3ZSBhcmUgdG8ganVkZ2UgYnkgdGhlIHdyaXR0ZW4gc3BlZWNoZXMgb2YgYm90aCBvcmF0b3JzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gdGhlIENyb3duLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiAyNC4xIiB2YWxpZD0ieWVzIj5zZWNvbmQgbm90ZSBvbiB4eGl2LiAxIGY8L2JpYmw+Ljwvbm90ZT4gRm9yIG5laXRoZXIgb2YgdGhlbSBzcGVha3MgY2xlYXJseSBhbmQgZGlzdGluY3RseSBvZiB0aGF0IGNvbnRlbnRpb24gYXMgb25lIHdoaWNoIGNhbWUgdG8gdHJpYWwuIFRoaXMgcXVlc3Rpb24sIGhvd2V2ZXIsIHdpbGwgaGF2ZSB0byBiZSBkZWNpZGVkIGJ5IG90aGVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCwgdG9vLCB0aGF0IHRoZSBzcGVlY2ggd2hpY2ggQXBvbGxvZG9ydXMgdXNlZCBpbiBvcmRlciB0byBzZWN1cmUgdGhlIGNvbnZpY3Rpb24gb2YgVGltb3RoZXVzIHRoZSBnZW5lcmFsIGluIGFuIGFjdGlvbiBmb3IgZGVidCB3YXMgd3JpdHRlbiBmb3IgaGltIGJ5IERlbW9zdGhlbmVzLCBhbmQgbGlrZXdpc2UgdGhlIHNwZWVjaGVzIHdoaWNoIEFwb2xsb2RvcnVzIHVzZWQgYWdhaW5zdCBQaG9ybWlvIGFuZCBTdGVwaGFudXMsIGluIHdoaWNoIGNhc2VzIERlbW9zdGhlbmVzIHByb3Blcmx5IHdvbiBkaXNjcmVkaXQuIEZvciBQaG9ybWlvIGNvbnRlbmRlZCBhZ2FpbnN0IEFwb2xsb2RvcnVzIHdpdGggYSBzcGVlY2ggd2hpY2ggRGVtb3N0aGVuZXMgaGFkIHdyaXR0ZW4gZm9yIGhpbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eHh2aTwvYmlibD4uPC9ub3RlPiB0aGUgb3JhdG9yIHRodXMgc2ltcGx5IHNlbGxpbmcgdG8gdGhlIGRpc3B1dGFudHMsIGFzIGl0IHdlcmUgZnJvbSBvbmUgYW5kIHRoZSBzYW1lIGN1dGxlcnktc2hvcCw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDM2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eHh2aTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHh4dmk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDQuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpdi4gMTwvYmlibD4uPC9ub3RlPiB0aGUga25pdmVzIHdpdGggd2hpY2ggdG8gd291bmQgZWFjaCBvdGhlci4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDQuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpdi4gMTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBvZiBoaXMgcHVibGljIG9yYXRpb25zLCB0aG9zZSBhZ2FpbnN0IEFuZHJvdGlvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+LiB4eGlpPC9iaWJsPi48L25vdGU+IGFuZCBUaW1vY3JhdGVzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4uIHh4aWk8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+LiB4eGlpPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHhpdjwvYmlibD4uPC9ub3RlPiBhbmQgQXJpc3RvY3JhdGVzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHhpdjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHhpdjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+IHh4aWlpPC9iaWJsPi48L25vdGU+IHdlcmUgd3JpdHRlbiBmb3Igb3RoZXJzIHRvIHByb25vdW5jZSwgYmVmb3JlIGhlIGhhZCBhcyB5ZXQgZW50ZXJlZCBwdWJsaWMgbGlmZTsgZm9yIGl0IGFwcGVhcnMgdGhhdCB0aGVzZSBzcGVlY2hlcyB3ZXJlIHByb2R1Y2VkIHdoZW4gaGUgd2FzIHR3ZW50eS1zZXZlbiBvciB0d2VudHktZWlnaHQgeWVhcnMgb2YgYWdlLiBCdXQgaGUgaGltc2VsZiBkZWxpdmVyZWQgdGhlIHNwZWVjaCBhZ2FpbnN0IEFyaXN0b2dlaXRvbiw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eGlpaTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHhpaWk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eHY8L2JpYmw+Ljwvbm90ZT4gYXMgd2VsbCBhcyB0aGUgb25lIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHh2PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eHY8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9uIHRoZSBJbW11bml0aWVzLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geHg8L2JpYmw+Ljwvbm90ZT4gYXQgdGhlIGluc3RhbmNlLCBhcyBoZSBoaW1zZWxmIHNheXMsIG9mIEN0ZXNpcHB1cyB0aGUgc29uIG9mIENoYWJyaWFzLCBidXQgYXMgc29tZSBzYXksIGJlY2F1c2UgaGUgd2FzIHdvb2luZyB0aGUgbW90aGVyIG9mIHRoaXMgeW91bmcgbWFuLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+IHh4PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4eDwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGRpZCBub3QgbWFycnkgdGhpcyB3b21hbiwgYnV0IGhhZCBhIGNlcnRhaW4gd29tYW4gb2YgU2Ftb3MgdG8gd2lmZSwgYXMgRGVtZXRyaXVzIHRoZSBNYWduZXNpYW4gdGVsbHMgdXMgaW4gaGlzIHdvcmsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9uIFBlcnNvbnMgb2YgdGhlIFNhbWUgTmFtZS48L3E+IFdoZXRoZXIgdGhlIHNwZWVjaCBkZW5vdW5jaW5nIHRoZSB0cmVhY2hlcm91cyBlbWJhc3NhZ2Ugb2YgQWVzY2hpbmVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3IuPC90aXRsZT4geGl4PC9iaWJsPi48L25vdGU+IHdhcyBkZWxpdmVyZWQgb3Igbm90LCBpcyB1bmNlcnRhaW47IGFuZCB5ZXQgSWRvbWVuZXVzIHNheXMgdGhhdCBBZXNjaGluZXMgZ290IG9mZiBieSBvbmx5IHRoaXJ0eSB2b3Rlcy4gQnV0IHRoaXMgd291bGQgc2VlbSB0byBiZSB1bnRydWUsIGlmIHdlIGFyZSB0byBqdWRnZSBieSB0aGUgd3JpdHRlbiBzcGVlY2hlcyBvZiBib3RoIG9yYXRvcnMgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Pci48L3RpdGxlPiB4aXg8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9yLjwvdGl0bGU+IHhpeDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gdGhlIENyb3duLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMjQuMSIgdmFsaWQ9InllcyI+c2Vjb25kIG5vdGUgb24geHhpdi4gMSBmPC9iaWJsPi48L25vdGU+IEZvciBuZWl0aGVyIG9mIHRoZW0gc3BlYWtzIGNsZWFybHkgYW5kIGRpc3RpbmN0bHkgb2YgdGhhdCBjb250ZW50aW9uIGFzIG9uZSB3aGljaCBjYW1lIHRvIHRyaWFsLiBUaGlzIHF1ZXN0aW9uLCBob3dldmVyLCB3aWxsIGhhdmUgdG8gYmUgZGVjaWRlZCBieSBvdGhlcnMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMjQuMSIgdmFsaWQ9InllcyI+c2Vjb25kIG5vdGUgb24geHhpdi4gMSBmPC9iaWJsPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcG9saXRpY2FsIGF0dGl0dWRlIG9mIERlbW9zdGhlbmVzIHdhcyBtYW5pZmVzdCBldmVuIHdoaWxlIHBlYWNlIHN0aWxsIGxhc3RlZCwgZm9yIGhlIHdvdWxkIGxldCBubyBhY3Qgb2YgdGhlIE1hY2Vkb25pYW4gcGFzcyB1bmNlbnN1cmVkLCBidXQgb24gZXZlcnkgb2NjYXNpb24ga2VwdCByb3VzaW5nIGFuZCBpbmZsYW1pbmcgdGhlIEF0aGVuaWFucyBhZ2FpbnN0IGhpbS4gVGhlcmVmb3JlIFBoaWxpcCBhbHNvIG1hZGUgbW9zdCBhY2NvdW50IG9mIGhpbTsgYW5kIHdoZW4gRGVtb3N0aGVuZXMgY2FtZSB0byBNYWNlZG9uaWEgaW4gYW4gZW1iYXNzeSBvZiB0ZW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzQ2IEIuQy4gdGhleSBvYnRhaW5lZCB0aGUgc28tY2FsbGVkIFBlYWNlIG9mIFBoaWxvY3JhdGVzLjwvbm90ZT4gUGhpbGlwIGxpc3RlbmVkIGluZGVlZCB0byB0aGVtIGFsbCwgYnV0IHRvb2sgbW9zdCBwYWlucyB0byBhbnN3ZXIgaGlzIHNwZWVjaC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgcmVnYXJkcyBhbGwgb3RoZXIgbWFya3Mgb2YgaG9ub3VyIGFuZCBraW5kbHkgYXR0ZW50aW9uLCBob3dldmVyLCBQaGlsaXAgZGlkIG5vdCB0cmVhdCBEZW1vc3RoZW5lcyBhcyB3ZWxsIGFzIHRoZSBvdGhlcnMsIGJ1dCBjb3VydGVkIHJhdGhlciB0aGUgcGFydHkgb2YgQWVzY2hpbmVzIGFuZCBQaGlsb2NyYXRlcy4gQW5kIHNvIHdoZW4gdGhlc2UgbGF1ZGVkIFBoaWxpcCBhcyBtb3N0IHBvd2VyZnVsIGluIHNwZWFraW5nLCBtb3N0IGZhaXIgdG8gbG9vayB1cG9uLCBhbmQsIGluZGVlZCwgYXMgYSBtb3N0IGNhcGFibGUgZmVsbG93LWRyaW5rZXIsIERlbW9zdGhlbmVzIGhhZCB0byBzYXkgaW4gYml0dGVyIHJhaWxsZXJ5IHRoYXQgdGhlIGZpcnN0IGVuY29taXVtIHdhcyBhcHByb3ByaWF0ZSBmb3IgYSBzb3BoaXN0LCB0aGUgc2Vjb25kIGZvciBhIHdvbWFuLCBhbmQgdGhlIHRoaXJkIGZvciBhIHNwb25nZSwgYnV0IG5vbmUgb2YgdGhlbSBmb3IgYSBraW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBvbGl0aWNhbCBhdHRpdHVkZSBvZiBEZW1vc3RoZW5lcyB3YXMgbWFuaWZlc3QgZXZlbiB3aGlsZSBwZWFjZSBzdGlsbCBsYXN0ZWQsIGZvciBoZSB3b3VsZCBsZXQgbm8gYWN0IG9mIHRoZSBNYWNlZG9uaWFuIHBhc3MgdW5jZW5zdXJlZCwgYnV0IG9uIGV2ZXJ5IG9jY2FzaW9uIGtlcHQgcm91c2luZyBhbmQgaW5mbGFtaW5nIHRoZSBBdGhlbmlhbnMgYWdhaW5zdCBoaW0uIFRoZXJlZm9yZSBQaGlsaXAgYWxzbyBtYWRlIG1vc3QgYWNjb3VudCBvZiBoaW07IGFuZCB3aGVuIERlbW9zdGhlbmVzIGNhbWUgdG8gTWFjZWRvbmlhIGluIGFuIGVtYmFzc3kgb2YgdGVuLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzQ2IEIuQy4gdGhleSBvYnRhaW5lZCB0aGUgc28tY2FsbGVkIFBlYWNlIG9mIFBoaWxvY3JhdGVzLjwvbm90ZT4gUGhpbGlwIGxpc3RlbmVkIGluZGVlZCB0byB0aGVtIGFsbCwgYnV0IHRvb2sgbW9zdCBwYWlucyB0byBhbnN3ZXIgaGlzIHNwZWVjaC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIHJlZ2FyZHMgYWxsIG90aGVyIG1hcmtzIG9mIGhvbm91ciBhbmQga2luZGx5IGF0dGVudGlvbiwgaG93ZXZlciwgUGhpbGlwIGRpZCBub3QgdHJlYXQgRGVtb3N0aGVuZXMgYXMgd2VsbCBhcyB0aGUgb3RoZXJzLCBidXQgY291cnRlZCByYXRoZXIgdGhlIHBhcnR5IG9mIEFlc2NoaW5lcyBhbmQgUGhpbG9jcmF0ZXMuIEFuZCBzbyB3aGVuIHRoZXNlIGxhdWRlZCBQaGlsaXAgYXMgbW9zdCBwb3dlcmZ1bCBpbiBzcGVha2luZywgbW9zdCBmYWlyIHRvIGxvb2sgdXBvbiwgYW5kLCBpbmRlZWQsIGFzIGEgbW9zdCBjYXBhYmxlIGZlbGxvdy1kcmlua2VyLCBEZW1vc3RoZW5lcyBoYWQgdG8gc2F5IGluIGJpdHRlciByYWlsbGVyeSB0aGF0IHRoZSBmaXJzdCBlbmNvbWl1bSB3YXMgYXBwcm9wcmlhdGUgZm9yIGEgc29waGlzdCwgdGhlIHNlY29uZCBmb3IgYSB3b21hbiwgYW5kIHRoZSB0aGlyZCBmb3IgYSBzcG9uZ2UsIGJ1dCBub25lIG9mIHRoZW0gZm9yIGEga2luZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gbWF0dGVycyB3ZXJlIGluY2xpbmluZyBhdCBsYXN0IHRvIHdhciwgc2luY2UgUGhpbGlwIHdhcyB1bmFibGUgdG8ga2VlcCBxdWlldCBhbmQgdGhlIEF0aGVuaWFucyB3ZXJlIGJlaW5nIHN0aXJyZWQgdXAgYnkgRGVtb3N0aGVuZXMsIGluIHRoZSBmaXJzdCBwbGFjZSwgaGUgdXJnZWQgdGhlIEF0aGVuaWFucyB0byBpbnZhZGUgRXVib2VhLCB3aGljaCBoYWQgYmVlbiBicm91Z2h0IGludG8gc3ViamVjdGlvbiB0byBQaGlsaXAgYnkgaXRzIHR5cmFudHM7IGFuZCBpdCB3YXMgb24gaGlzIG1vdGlvbiB0aGF0IHRoZXkgY3Jvc3NlZCBvdmVyIHRvIHRoZSBpc2xhbmQgYW5kIGRyb3ZlIG91dCB0aGUgTWFjZWRvbmlhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIGhlIGNhbWUgdG8gdGhlIGFpZCBvZiB0aGUgY2l0aXplbnMgb2YgQnl6YW50aXVtIGFuZCBQZXJpbnRodXMgd2hlbiB0aGUgTWFjZWRvbmlhbiB3YXMgbWFraW5nIHdhciB1cG9uIHRoZW0sIGJ5IHBlcnN1YWRpbmcgdGhlIEF0aGVuaWFuIHBlb3BsZSB0byByZW1pdCB0aGVpciBoYXRyZWQgYW5kIGZvcmdldCB0aGUgd3JvbmdzIGNvbW1pdHRlZCBieSBlYWNoIG9mIHRoZXNlIGNpdGllcyBpbiB0aGUgU29jaWFsIFdhciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCB0aGUgb3V0YnJlYWsgb2YgdGhlIFNvY2lhbCBXYXIgKDM1Ny0zNTUgQi5DLikgQnl6YW50aXVtIGFuZCBvdGhlciBhbGxpZXMgb2YgQXRoZW5zIGhhZCByZXZvbHRlZCBmcm9tIGhlci48L25vdGU+IGFuZCB0byBzZW5kIHRoZW0gYSBmb3JjZSzigJR0aGUgZm9yY2Ugd2hpY2ggc2F2ZWQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TmV4dCwgaGUgd2VudCBvbiBhbiBlbWJhc3N5IHRvIHRoZSBHcmVlayBzdGF0ZXMsIGFuZCBieSBhcmd1aW5nIHdpdGggdGhlbSBhbmQgcHJpY2tpbmcgdGhlbSBvbiBicm91Z2h0IGFsbW9zdCBhbGwgb2YgdGhlbSBpbnRvIGEgbGVhZ3VlIGFnYWluc3QgUGhpbGlwLCBzbyB0aGF0IHRoZXkgcmFpc2VkIGEgbWVyY2VuYXJ5IGZvcmNlIG9mIGZpZnRlZW4gdGhvdXNhbmQgZm9vdCBhbmQgdHdvIHRob3VzYW5kIGhvcnNlLCBhcGFydCBmcm9tIHRoZSBjaXRpemVuIHNvbGRpZXJ5LCBhbmQgcmVhZGlseSBjb250cmlidXRlZCBtb25leSB0byBwYXkgdGhlbS4gSXQgd2FzIGF0IHRoaXMgdGltZSwgYXMgVGhlb3BocmFzdHVzIHNheXMsIHdoZW4gdGhlIGFsbGllcyB3ZXJlIGRlbWFuZGluZyB0aGF0IHRoZWlyIGNvbnRyaWJ1dGlvbnMgYmUgZml4ZWQgd2l0aGluIGxpbWl0cywgdGhhdCBDcm9ieWx1cyB0aGUgcG9wdWxhciBsZWFkZXIgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XYXIgaGFzIG5vIGZpeGVkIHJhdGlvbnMuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIG5vdGUgb24gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gMi44IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNyYXNzdXM8L3RpdGxlPiwgaWkuIDg8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gbWF0dGVycyB3ZXJlIGluY2xpbmluZyBhdCBsYXN0IHRvIHdhciwgc2luY2UgUGhpbGlwIHdhcyB1bmFibGUgdG8ga2VlcCBxdWlldCBhbmQgdGhlIEF0aGVuaWFucyB3ZXJlIGJlaW5nIHN0aXJyZWQgdXAgYnkgRGVtb3N0aGVuZXMsIGluIHRoZSBmaXJzdCBwbGFjZSwgaGUgdXJnZWQgdGhlIEF0aGVuaWFucyB0byBpbnZhZGUgRXVib2VhLCB3aGljaCBoYWQgYmVlbiBicm91Z2h0IGludG8gc3ViamVjdGlvbiB0byBQaGlsaXAgYnkgaXRzIHR5cmFudHM7IGFuZCBpdCB3YXMgb24gaGlzIG1vdGlvbiB0aGF0IHRoZXkgY3Jvc3NlZCBvdmVyIHRvIHRoZSBpc2xhbmQgYW5kIGRyb3ZlIG91dCB0aGUgTWFjZWRvbmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIGhlIGNhbWUgdG8gdGhlIGFpZCBvZiB0aGUgY2l0aXplbnMgb2YgQnl6YW50aXVtIGFuZCBQZXJpbnRodXMgd2hlbiB0aGUgTWFjZWRvbmlhbiB3YXMgbWFraW5nIHdhciB1cG9uIHRoZW0sIGJ5IHBlcnN1YWRpbmcgdGhlIEF0aGVuaWFuIHBlb3BsZSB0byByZW1pdCB0aGVpciBoYXRyZWQgYW5kIGZvcmdldCB0aGUgd3JvbmdzIGNvbW1pdHRlZCBieSBlYWNoIG9mIHRoZXNlIGNpdGllcyBpbiB0aGUgU29jaWFsIFdhciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoZSBvdXRicmVhayBvZiB0aGUgU29jaWFsIFdhciAoMzU3LTM1NSBCLkMuKSBCeXphbnRpdW0gYW5kIG90aGVyIGFsbGllcyBvZiBBdGhlbnMgaGFkIHJldm9sdGVkIGZyb20gaGVyLjwvbm90ZT4gYW5kIHRvIHNlbmQgdGhlbSBhIGZvcmNlLOKAlHRoZSBmb3JjZSB3aGljaCBzYXZlZCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIGhlIHdlbnQgb24gYW4gZW1iYXNzeSB0byB0aGUgR3JlZWsgc3RhdGVzLCBhbmQgYnkgYXJndWluZyB3aXRoIHRoZW0gYW5kIHByaWNraW5nIHRoZW0gb24gYnJvdWdodCBhbG1vc3QgYWxsIG9mIHRoZW0gaW50byBhIGxlYWd1ZSBhZ2FpbnN0IFBoaWxpcCwgc28gdGhhdCB0aGV5IHJhaXNlZCBhIG1lcmNlbmFyeSBmb3JjZSBvZiBmaWZ0ZWVuIHRob3VzYW5kIGZvb3QgYW5kIHR3byB0aG91c2FuZCBob3JzZSwgYXBhcnQgZnJvbSB0aGUgY2l0aXplbiBzb2xkaWVyeSwgYW5kIHJlYWRpbHkgY29udHJpYnV0ZWQgbW9uZXkgdG8gcGF5IHRoZW0uIEl0IHdhcyBhdCB0aGlzIHRpbWUsIGFzIFRoZW9waHJhc3R1cyBzYXlzLCB3aGVuIHRoZSBhbGxpZXMgd2VyZSBkZW1hbmRpbmcgdGhhdCB0aGVpciBjb250cmlidXRpb25zIGJlIGZpeGVkIHdpdGhpbiBsaW1pdHMsIHRoYXQgQ3JvYnlsdXMgdGhlIHBvcHVsYXIgbGVhZGVyIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XYXIgaGFzIG5vIGZpeGVkIHJhdGlvbnMuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgbm90ZSBvbiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDIuOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgaWkuIDg8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDIuOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgaWkuIDg8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgaWkuIDg8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5HcmVlY2Ugd2FzIG5vdyBpbiBzdXNwZW5zZSBhcyBpdCB0aG91Z2h0IG9mIHRoZSBmdXR1cmUsIGFuZCBpdHMgcGVvcGxlcyBhbmQgY2l0aWVzIHdlcmUgbGVhZ3VpbmcgdGhlbXNlbHZlcyB0b2dldGhlciwgRXVib2VhbnMsIEFjaGFlYW5zLCBDb3JpbnRoaWFucywgTWVnYXJpYW5zLCBMZXVjYWRpYW5zLCBhbmQgQ29yY3lyYWVhbnMuIEJ1dCB0aGUgbW9zdCBpbXBvcnRhbnQgc3RydWdnbGUgc3RpbGwgcmVtYWluZWQgZm9yIERlbW9zdGhlbmVzIGluIGJyaW5naW5nIHRoZSBUaGViYW5zIHRvIGpvaW4gdGhlIGFsbGlhbmNlLCBmb3IgdGhleSBoYWQgYSB0ZXJyaXRvcnkgYm91bmRpbmcgdGhhdCBvZiBBdHRpY2EgYW5kIGEgZm9yY2UgcmVhZHkgdG8gdGFrZSB0aGUgZmllbGQsIGFuZCBhdCB0aGF0IHRpbWUgd2VyZSBhY2NvdW50ZWQgdGhlIGJlc3Qgc29sZGllcnMgaW4gR3JlZWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgd2FzIG5vIGVhc3kgbWF0dGVyLCBpbiB2aWV3IG9mIHRoZSByZWNlbnQgYmVuZWZpdHMgd2l0aCB3aGljaCBQaGlsaXAgaGFkIGN1bHRpdmF0ZWQgdGhlaXIgZmF2b3VyIGR1cmluZyB0aGUgUGhvY2lhbiB3YXIsIHRvIG1ha2UgdGhlIFRoZWJhbnMgY2hhbmdlIHNpZGVzLCBhbmQgZXNwZWNpYWxseSBiZWNhdXNlIGluIHRoZSBwZXR0eSBxdWFycmVscyBicm91Z2h0IG9uIGJ5IHRoZWlyIHByb3hpbWl0eSB0byBBdGhlbnMgdGhlIGRpZmZlcmVuY2VzIHdoaWNoIG1hZGUgZm9yIHdhciBiZXR3ZWVuIHRoZSB0d28gY2l0aWVzIHdlcmUgYWxsIHRoZSB3aGlsZSBzdGlycmVkIHVwIGFuZXcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkdyZWVjZSB3YXMgbm93IGluIHN1c3BlbnNlIGFzIGl0IHRob3VnaHQgb2YgdGhlIGZ1dHVyZSwgYW5kIGl0cyBwZW9wbGVzIGFuZCBjaXRpZXMgd2VyZSBsZWFndWluZyB0aGVtc2VsdmVzIHRvZ2V0aGVyLCBFdWJvZWFucywgQWNoYWVhbnMsIENvcmludGhpYW5zLCBNZWdhcmlhbnMsIExldWNhZGlhbnMsIGFuZCBDb3JjeXJhZWFucy4gQnV0IHRoZSBtb3N0IGltcG9ydGFudCBzdHJ1Z2dsZSBzdGlsbCByZW1haW5lZCBmb3IgRGVtb3N0aGVuZXMgaW4gYnJpbmdpbmcgdGhlIFRoZWJhbnMgdG8gam9pbiB0aGUgYWxsaWFuY2UsIGZvciB0aGV5IGhhZCBhIHRlcnJpdG9yeSBib3VuZGluZyB0aGF0IG9mIEF0dGljYSBhbmQgYSBmb3JjZSByZWFkeSB0byB0YWtlIHRoZSBmaWVsZCwgYW5kIGF0IHRoYXQgdGltZSB3ZXJlIGFjY291bnRlZCB0aGUgYmVzdCBzb2xkaWVycyBpbiBHcmVlY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpdCB3YXMgbm8gZWFzeSBtYXR0ZXIsIGluIHZpZXcgb2YgdGhlIHJlY2VudCBiZW5lZml0cyB3aXRoIHdoaWNoIFBoaWxpcCBoYWQgY3VsdGl2YXRlZCB0aGVpciBmYXZvdXIgZHVyaW5nIHRoZSBQaG9jaWFuIHdhciwgdG8gbWFrZSB0aGUgVGhlYmFucyBjaGFuZ2Ugc2lkZXMsIGFuZCBlc3BlY2lhbGx5IGJlY2F1c2UgaW4gdGhlIHBldHR5IHF1YXJyZWxzIGJyb3VnaHQgb24gYnkgdGhlaXIgcHJveGltaXR5IHRvIEF0aGVucyB0aGUgZGlmZmVyZW5jZXMgd2hpY2ggbWFkZSBmb3Igd2FyIGJldHdlZW4gdGhlIHR3byBjaXRpZXMgd2VyZSBhbGwgdGhlIHdoaWxlIHN0aXJyZWQgdXAgYW5ldy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGhpbGlwLCBob3dldmVyLCBlbGF0ZWQgYnkgaGlzIGdvb2QtZm9ydHVuZSBpbiB0aGUgbWF0dGVyIG9mIEFtcGhpc3NhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMzOSBCLkMuLCBQaGlsaXAgd2FzIGRlcHV0ZWQgYnkgdGhlIEFtcGhpY3R5b25pYyBDb3VuY2lsIHRvIHB1bmlzaCB0aGUgY2l0eSBvZiBBbXBoaXNzYSwgbmVhciBEZWxwaGksIGZvciBzYWNyaWxlZ2UuIENmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC4xNDMiIHZhbGlkPSJ5ZXMiPkRlbW9zdGhlbmVzLCA8dGl0bGU+T24gdGhlIENyb3duPC90aXRsZT4sIMKnIMKnICAxNDMgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHN1cnByaXNlZCBFbGF0ZWlhIGFuZCBvY2N1cGllZCBQaG9jaXMuIFRoaXMgc3RlcCBkcm92ZSB0aGUgQXRoZW5pYW5zIG91dCBvZiB0aGVpciBzZW5zZXM6IG5vIG9uZSB2ZW50dXJlZCB0byBhc2NlbmQgdGhlIGJlbWEgYW5kIG5vIG9uZSBrbmV3IHdoYXQgb3VnaHQgdG8gYmUgc2FpZCwgYnV0IHBlcnBsZXhpdHkgYW5kIHNpbGVuY2UgcmVpZ25lZCBpbiB0aGUgYXNzZW1ibHkuIFRoZW4gaXQgd2FzIHRoYXQgRGVtb3N0aGVuZXMsIGFuZCBoZSBhbG9uZSwgY2FtZSBmb3J3YXJkIGFuZCBhZHZpc2VkIHRoZSBwZW9wbGUgdG8gY2xpbmcgdG8gVGhlYmVzOyBhbmQgYWZ0ZXIgZ2l2aW5nIHRoZW0gY291cmFnZSBpbiBvdGhlciB3YXlzIGFuZCBidW95aW5nIHRoZW0gdXAgd2l0aCBob3BlcywgYXMgaGUgd2FzIHdvbnQgdG8gZG8sIGhlIHdhcyBzZW50IHdpdGggb3RoZXJzIGFzIGFtYmFzc2Fkb3IgdG8gVGhlYmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QaGlsaXAgYWxzbywgYXMgTWFyc3lhcyB0ZWxscyB1cywgc2VudCBBbXludGFzIGFuZCBDbGVhcmNodXMgb2YgTWFjZWRvbmlhLCBEYW9jaHVzIG9mIFRoZXNzYWx5LCBhbmQgVGhyYXN5ZGFldXMsIHRvIHNwZWFrIGluIG9wcG9zaXRpb24gdG8gdGhlIEF0aGVuaWFucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGhpbGlwLCBob3dldmVyLCBlbGF0ZWQgYnkgaGlzIGdvb2QtZm9ydHVuZSBpbiB0aGUgbWF0dGVyIG9mIEFtcGhpc3NhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzM5IEIuQy4sIFBoaWxpcCB3YXMgZGVwdXRlZCBieSB0aGUgQW1waGljdHlvbmljIENvdW5jaWwgdG8gcHVuaXNoIHRoZSBjaXR5IG9mIEFtcGhpc3NhLCBuZWFyIERlbHBoaSwgZm9yIHNhY3JpbGVnZS4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTQzIiB2YWxpZD0ieWVzIj5EZW1vc3RoZW5lcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4sIMKnIMKnICAxNDMgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHN1cnByaXNlZCBFbGF0ZWlhIGFuZCBvY2N1cGllZCBQaG9jaXMuIFRoaXMgc3RlcCBkcm92ZSB0aGUgQXRoZW5pYW5zIG91dCBvZiB0aGVpciBzZW5zZXM6IG5vIG9uZSB2ZW50dXJlZCB0byBhc2NlbmQgdGhlIGJlbWEgYW5kIG5vIG9uZSBrbmV3IHdoYXQgb3VnaHQgdG8gYmUgc2FpZCwgYnV0IHBlcnBsZXhpdHkgYW5kIHNpbGVuY2UgcmVpZ25lZCBpbiB0aGUgYXNzZW1ibHkuIFRoZW4gaXQgd2FzIHRoYXQgRGVtb3N0aGVuZXMsIGFuZCBoZSBhbG9uZSwgY2FtZSBmb3J3YXJkIGFuZCBhZHZpc2VkIHRoZSBwZW9wbGUgdG8gY2xpbmcgdG8gVGhlYmVzOyBhbmQgYWZ0ZXIgZ2l2aW5nIHRoZW0gY291cmFnZSBpbiBvdGhlciB3YXlzIGFuZCBidW95aW5nIHRoZW0gdXAgd2l0aCBob3BlcywgYXMgaGUgd2FzIHdvbnQgdG8gZG8sIGhlIHdhcyBzZW50IHdpdGggb3RoZXJzIGFzIGFtYmFzc2Fkb3IgdG8gVGhlYmVzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguMTQzIiB2YWxpZD0ieWVzIj5EZW1vc3RoZW5lcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4sIMKnIMKnICAxNDMgZmYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgQ3Jvd248L3RpdGxlPiwgwqcgwqcgIDE0MyBmZi48L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpcCBhbHNvLCBhcyBNYXJzeWFzIHRlbGxzIHVzLCBzZW50IEFteW50YXMgYW5kIENsZWFyY2h1cyBvZiBNYWNlZG9uaWEsIERhb2NodXMgb2YgVGhlc3NhbHksIGFuZCBUaHJhc3lkYWV1cywgdG8gc3BlYWsgaW4gb3Bwb3NpdGlvbiB0byB0aGUgQXRoZW5pYW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldlbGwsIHRoZW4sIHRoZSBUaGViYW5zLCBpbiB0aGVpciBjYWxjdWxhdGlvbnMsIHdlcmUgbm90IGJsaW5kIHRvIHRoZWlyIG93biBpbnRlcmVzdHMsIGJ1dCBlYWNoIG9mIHRoZW0gaGFkIGJlZm9yZSBoaXMgZXllcyB0aGUgdGVycm9ycyBvZiB3YXIsIHNpbmNlIHRoZWlyIGxvc3NlcyBpbiB0aGUgUGhvY2lhbiB3YXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzZWNvbmQgc28tY2FsbGVkIFNhY3JlZCBXYXIgKDM1Ny0zNDYgQi4gQy4pLCBpbiB3aGljaCBBdGhlbnMgYWlkZWQgdGhlIFBob2NpYW5zLCBhbmQgUGhpbGlwIHRoZSBUaGViYW5zLjwvbm90ZT4gd2VyZSBzdGlsbCBmcmVzaDsgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5ob3dldmVyLCB0aGUgcG93ZXIgb2YgdGhlIG9yYXRvciwgYXMgVGhlb3BvbXB1cyBzYXlzLCBmYW5uZWQgdXAgdGhlaXIgY291cmFnZSBhbmQgaW5mbGFtZWQgdGhlaXIgaG9ub3VyYWJsZSBhbWJpdGlvbiBhbmQgb2JzY3VyZWQgYWxsIG90aGVyIGNvbnNpZGVyYXRpb25zLCBzbyB0aGF0LCBjYXN0aW5nIGF3YXkgZmVhciBhbmQgY2FsY3VsYXRpb24gYW5kIGZlZWxpbmdzIG9mIG9ibGlnYXRpb24sIHRoZXkgd2VyZSByYXB0IGF3YXkgYnkgaGlzIHdvcmRzIGludG8gdGhlIHBhdGggb2YgaG9ub3VyLiBBbmQgc28gZ3JlYXQgYW5kIGdsb3Jpb3VzIHdhcyB0aGUgb3JhdG9yJ3Mgc3VjY2VzcyBzZWVuIHRvIGJlIHRoYXQgUGhpbGlwIGF0IG9uY2Ugc2VudCBhbiBlbWJhc3N5IGFuZCBhc2tlZCBmb3IgcGVhY2UsIHdoaWxlIEdyZWVjZSB3YXMgY29uZmlkZW50IGFuZCB1cCBpbiBhcm1zIHRvIGFpZCBEZW1vc3RoZW5lcyBmb3IgdGhlIGZ1dHVyZTsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG5vdCBvbmx5IGRpZCB0aGUgQXRoZW5pYW4gZ2VuZXJhbHMgYXNzaXN0IGhpbSBhbmQgZG8gd2hhdCBoZSBvcmRlcmVkLCBidXQgYWxzbyB0aGUgQm9lb3RhcmNocy4gSGUgbWFuYWdlZCBhdCB0aGlzIHRpbWUgYWxsIHRoZSBhc3NlbWJsaWVzIG9mIHRoZSBUaGViYW5zIG5vIGxlc3MgdGhhbiB0aG9zZSBvZiB0aGUgQXRoZW5pYW5zOyBoZSB3YXMgYmVsb3ZlZCBieSBib3RoIHBlb3BsZXMgYW5kIGV4ZXJjaXNlZCBzdXByZW1lIHBvd2VyLCBub3QgaWxsZWdhbGx5IG5vciB1bndvcnRoaWx5LCBhcyBUaGVvcG9tcHVzIGRlY2xhcmVzLCBidXQgcmF0aGVyIHdpdGggcGVyZmVjdCBwcm9wcmlldHkuCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc2Vjb25kIHNvLWNhbGxlZCBTYWNyZWQgV2FyICgzNTctMzQ2IEIuIEMuKSwgaW4gd2hpY2ggQXRoZW5zIGFpZGVkIHRoZSBQaG9jaWFucywgYW5kIFBoaWxpcCB0aGUgVGhlYmFucy48L25vdGU+IHdlcmUgc3RpbGwgZnJlc2g7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmhvd2V2ZXIsIHRoZSBwb3dlciBvZiB0aGUgb3JhdG9yLCBhcyBUaGVvcG9tcHVzIHNheXMsIGZhbm5lZCB1cCB0aGVpciBjb3VyYWdlIGFuZCBpbmZsYW1lZCB0aGVpciBob25vdXJhYmxlIGFtYml0aW9uIGFuZCBvYnNjdXJlZCBhbGwgb3RoZXIgY29uc2lkZXJhdGlvbnMsIHNvIHRoYXQsIGNhc3RpbmcgYXdheSBmZWFyIGFuZCBjYWxjdWxhdGlvbiBhbmQgZmVlbGluZ3Mgb2Ygb2JsaWdhdGlvbiwgdGhleSB3ZXJlIHJhcHQgYXdheSBieSBoaXMgd29yZHMgaW50byB0aGUgcGF0aCBvZiBob25vdXIuIEFuZCBzbyBncmVhdCBhbmQgZ2xvcmlvdXMgd2FzIHRoZSBvcmF0b3IncyBzdWNjZXNzIHNlZW4gdG8gYmUgdGhhdCBQaGlsaXAgYXQgb25jZSBzZW50IGFuIGVtYmFzc3kgYW5kIGFza2VkIGZvciBwZWFjZSwgd2hpbGUgR3JlZWNlIHdhcyBjb25maWRlbnQgYW5kIHVwIGluIGFybXMgdG8gYWlkIERlbW9zdGhlbmVzIGZvciB0aGUgZnV0dXJlOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBub3Qgb25seSBkaWQgdGhlIEF0aGVuaWFuIGdlbmVyYWxzIGFzc2lzdCBoaW0gYW5kIGRvIHdoYXQgaGUgb3JkZXJlZCwgYnV0IGFsc28gdGhlIEJvZW90YXJjaHMuIEhlIG1hbmFnZWQgYXQgdGhpcyB0aW1lIGFsbCB0aGUgYXNzZW1ibGllcyBvZiB0aGUgVGhlYmFucyBubyBsZXNzIHRoYW4gdGhvc2Ugb2YgdGhlIEF0aGVuaWFuczsgaGUgd2FzIGJlbG92ZWQgYnkgYm90aCBwZW9wbGVzIGFuZCBleGVyY2lzZWQgc3VwcmVtZSBwb3dlciwgbm90IGlsbGVnYWxseSBub3IgdW53b3J0aGlseSwgYXMgVGhlb3BvbXB1cyBkZWNsYXJlcywgYnV0IHJhdGhlciB3aXRoIHBlcmZlY3QgcHJvcHJpZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgd291bGQgc2VlbSB0aGF0IHNvbWUgZGl2aW5lbHkgb3JkZXJlZCBmb3J0dW5lIGluIHRoZSByZXZvbHV0aW9uIG9mIGFmZmFpcnMsIHdoaWNoIHdhcyBwdXR0aW5nIGFuIGVuZCBhdCB0aGlzIHRpbWUgdG8gdGhlIGZyZWVkb20gb2YgdGhlIEdyZWVrcywgb3Bwb3NlZCB0aGVpciBlZmZvcnRzLCBhbmQgc2hvd2VkIGZvcnRoIG1hbnkgc2lnbnMgb2Ygd2hhdCB3YXMgdG8gY29tZS4gQW1vbmcgdGhlc2Ugd2VyZSB0aGUgZGlyZSBwcm9waGVjaWVzIHdoaWNoIHRoZSBQeXRoaWFuIHByaWVzdGVzcyBtYWRlIGtub3duLCBhbmQgYW4gYW5jaWVudCBvcmFjbGUgd2hpY2ggd2FzIHJlY2l0ZWQgZnJvbSB0aGUgU2lieWxsaW5lIGJvb2tzOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5Gcm9tIHRoZSBiYXR0bGUgb24gVGhlcm1vZG9uIG1heSBJIGJlIGZhciByZW1vdmVkLDwvbD4KCQkJCQkgICAgICAgICAgPGw+VG8gYmVob2xkIGl0IGxpa2UgYW4gZWFnbGUgaW4gY2xvdWRzIGFuZCB1cHBlciBhaXIuPC9sPgoJCQkJCSAgICAgICAgICA8bD5UZWFycyBhcmUgZm9yIHRoZSBjb25xdWVyZWQgdGhlcmUsIGFuZCBmb3IgdGhlIGNvbnF1ZXJvciwgZGVhdGguPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGl0IHdvdWxkIHNlZW0gdGhhdCBzb21lIGRpdmluZWx5IG9yZGVyZWQgZm9ydHVuZSBpbiB0aGUgcmV2b2x1dGlvbiBvZiBhZmZhaXJzLCB3aGljaCB3YXMgcHV0dGluZyBhbiBlbmQgYXQgdGhpcyB0aW1lIHRvIHRoZSBmcmVlZG9tIG9mIHRoZSBHcmVla3MsIG9wcG9zZWQgdGhlaXIgZWZmb3J0cywgYW5kIHNob3dlZCBmb3J0aCBtYW55IHNpZ25zIG9mIHdoYXQgd2FzIHRvIGNvbWUuIEFtb25nIHRoZXNlIHdlcmUgdGhlIGRpcmUgcHJvcGhlY2llcyB3aGljaCB0aGUgUHl0aGlhbiBwcmllc3Rlc3MgbWFkZSBrbm93biwgYW5kIGFuIGFuY2llbnQgb3JhY2xlIHdoaWNoIHdhcyByZWNpdGVkIGZyb20gdGhlIFNpYnlsbGluZSBib29rczrigJQKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkZyb20gdGhlIGJhdHRsZSBvbiBUaGVybW9kb24gbWF5IEkgYmUgZmFyIHJlbW92ZWQsPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIGJlaG9sZCBpdCBsaWtlIGFuIGVhZ2xlIGluIGNsb3VkcyBhbmQgdXBwZXIgYWlyLjwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UZWFycyBhcmUgZm9yIHRoZSBjb25xdWVyZWQgdGhlcmUsIGFuZCBmb3IgdGhlIGNvbnF1ZXJvciwgZGVhdGguPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkZyb20gdGhlIGJhdHRsZSBvbiBUaGVybW9kb24gbWF5IEkgYmUgZmFyIHJlbW92ZWQsPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPlRvIGJlaG9sZCBpdCBsaWtlIGFuIGVhZ2xlIGluIGNsb3VkcyBhbmQgdXBwZXIgYWlyLjwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UZWFycyBhcmUgZm9yIHRoZSBjb25xdWVyZWQgdGhlcmUsIGFuZCBmb3IgdGhlIGNvbnF1ZXJvciwgZGVhdGguPC9sPgoJCQkJICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBUaGVybW9kb24sIHRoZXkgc2F5LCBpcyBpbiBteSBuYXRpdmUgdGVycml0b3J5LCBpbiBDaGFlcm9uZWlhLCBiZWluZyBhIGxpdHRsZSByaXZlciB3aGljaCBlbXB0aWVzIGludG8gdGhlIENlcGhpc3VzLiBCdXQgSSBrbm93IG9mIG5vIHJpdmVyIGJlYXJpbmcgdGhpcyBuYW1lIGF0IHRoZSBwcmVzZW50IHRpbWU7IEkgY29uamVjdHVyZSwgaG93ZXZlciwgdGhhdCB0aGUgc3RyZWFtIG5vdyBjYWxsZWQgSGFlbW9uIHRoZW4gYm9yZSB0aGUgbmFtZSBvZiBUaGVybW9kb24uIEZvciBpdCBmbG93cyBwYXN0IHRoZSBIZXJhY2xldW0sIHdoZXJlIHRoZSBHcmVla3MgaGFkIHRoZWlyIGNhbXA7IGFuZCBJIGp1ZGdlIHRoYXQgYWZ0ZXIgdGhlIGJhdHRsZSB0aGUgcml2ZXIgd2FzIGZpbGxlZCB3aXRoIGJsb29kIGFuZCBjb3Jwc2VzIGFuZCB0aGVyZWZvcmUgcmVjZWl2ZWQgaXRzIHByZXNlbnQgbmFtZSBpbiBleGNoYW5nZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkRlcml2aW5nIDxmb3JlaWduIGxhbmc9ImdyZWVrIj7OkeG8tc68z4nOvTwvZm9yZWlnbj4gZnJvbSA8Zm9yZWlnbiBsYW5nPSJncmVlayI+zrHhvLfOvM6xPC9mb3JlaWduPiAoPGdsb3NzPmJsb29kPC9nbG9zcz4pLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5EdXJpcywgaG93ZXZlciwgc2F5cyB0aGF0IHRoaXMgVGhlcm1vZG9uIHdhcyBub3QgYSByaXZlciwgYnV0IHRoYXQgc29tZSBzb2xkaWVycyB3aG8gd2VyZSBwaXRjaGluZyBhIHRlbnQgYW5kIGRpZ2dpbmcgYSB0cmVuY2ggYWJvdXQgaXQsIGZvdW5kIGEgc21hbGwgc3RvbmUgZmlndXJlLCBhbiBpbnNjcmlwdGlvbiB1cG9uIHdoaWNoIHNpZ25pZmllZCB0aGF0IGl0IHdhcyBUaGVybW9kb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+aS5lLiB0aGUgZ29kIG9mIHRoZSByaXZlciBUaGVybW9kb24sIGluIENhcHBhZG9jaWEsIG9uIHRoZSBiYW5rcyBvZiB3aGljaCB0aGUgQW1hem9ucyB3ZXJlIHRob3VnaHQgdG8gZHdlbGwuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZXMuIDI3LjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+VGhlc2V1czwvdGl0bGU+LCB4eHZpaS4gNjwvYmlibD4uPC9ub3RlPiBjYXJyeWluZyBpbiBpdHMgYXJtcyBhIHdvdW5kZWQgQW1hem9uLiBUaGV5IHNheSBhbHNvIHRoYXQgaW4gcmVmZXJlbmNlIHRvIHRoaXMgYW5vdGhlciBvcmFjbGUgaXMgcmVjaXRlZCBhcyBmb2xsb3dzOuKAlAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5Gb3IgdGhlIGJhdHRsZSBvbiBUaGVybW9kb24gd2FpdCB0aG91LCBhbGwtYmxhY2sgYmlyZDs8L2w+CgkJCQkJICAgICAgICAgIDxsPlRoZXJlIHRob3Ugc2hhbHQgaGF2ZSBpbiBhYnVuZGFuY2UgdGhlIGZsZXNoIG9mIG1lbi48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIFRoZXJtb2RvbiwgdGhleSBzYXksIGlzIGluIG15IG5hdGl2ZSB0ZXJyaXRvcnksIGluIENoYWVyb25laWEsIGJlaW5nIGEgbGl0dGxlIHJpdmVyIHdoaWNoIGVtcHRpZXMgaW50byB0aGUgQ2VwaGlzdXMuIEJ1dCBJIGtub3cgb2Ygbm8gcml2ZXIgYmVhcmluZyB0aGlzIG5hbWUgYXQgdGhlIHByZXNlbnQgdGltZTsgSSBjb25qZWN0dXJlLCBob3dldmVyLCB0aGF0IHRoZSBzdHJlYW0gbm93IGNhbGxlZCBIYWVtb24gdGhlbiBib3JlIHRoZSBuYW1lIG9mIFRoZXJtb2Rvbi4gRm9yIGl0IGZsb3dzIHBhc3QgdGhlIEhlcmFjbGV1bSwgd2hlcmUgdGhlIEdyZWVrcyBoYWQgdGhlaXIgY2FtcDsgYW5kIEkganVkZ2UgdGhhdCBhZnRlciB0aGUgYmF0dGxlIHRoZSByaXZlciB3YXMgZmlsbGVkIHdpdGggYmxvb2QgYW5kIGNvcnBzZXMgYW5kIHRoZXJlZm9yZSByZWNlaXZlZCBpdHMgcHJlc2VudCBuYW1lIGluIGV4Y2hhbmdlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5EZXJpdmluZyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OkeG8tc68z4nOvTwvZm9yZWlnbj4gZnJvbSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OseG8t868zrE8L2ZvcmVpZ24+ICg8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5ibG9vZDwvZ2xvc3M+KS48L25vdGU+IAoJCQkJICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OkeG8tc68z4nOvTwvZm9yZWlnbj4gZnJvbSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OseG8t868zrE8L2ZvcmVpZ24+ICg8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5ibG9vZDwvZ2xvc3M+KS48L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkR1cmlzLCBob3dldmVyLCBzYXlzIHRoYXQgdGhpcyBUaGVybW9kb24gd2FzIG5vdCBhIHJpdmVyLCBidXQgdGhhdCBzb21lIHNvbGRpZXJzIHdobyB3ZXJlIHBpdGNoaW5nIGEgdGVudCBhbmQgZGlnZ2luZyBhIHRyZW5jaCBhYm91dCBpdCwgZm91bmQgYSBzbWFsbCBzdG9uZSBmaWd1cmUsIGFuIGluc2NyaXB0aW9uIHVwb24gd2hpY2ggc2lnbmlmaWVkIHRoYXQgaXQgd2FzIFRoZXJtb2Rvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmkuZS4gdGhlIGdvZCBvZiB0aGUgcml2ZXIgVGhlcm1vZG9uLCBpbiBDYXBwYWRvY2lhLCBvbiB0aGUgYmFua3Mgb2Ygd2hpY2ggdGhlIEFtYXpvbnMgd2VyZSB0aG91Z2h0IHRvIGR3ZWxsLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRoZXMuIDI3LjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVzZXVzPC90aXRsZT4sIHh4dmlpLiA2PC9iaWJsPi48L25vdGU+IGNhcnJ5aW5nIGluIGl0cyBhcm1zIGEgd291bmRlZCBBbWF6b24uIFRoZXkgc2F5IGFsc28gdGhhdCBpbiByZWZlcmVuY2UgdG8gdGhpcyBhbm90aGVyIG9yYWNsZSBpcyByZWNpdGVkIGFzIGZvbGxvd3M64oCUCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaGVzLiAyNy42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2V1czwvdGl0bGU+LCB4eHZpaS4gNjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlc2V1czwvdGl0bGU+LCB4eHZpaS4gNjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGUgYmF0dGxlIG9uIFRoZXJtb2RvbiB3YWl0IHRob3UsIGFsbC1ibGFjayBiaXJkOzwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSB0aG91IHNoYWx0IGhhdmUgaW4gYWJ1bmRhbmNlIHRoZSBmbGVzaCBvZiBtZW4uPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkZvciB0aGUgYmF0dGxlIG9uIFRoZXJtb2RvbiB3YWl0IHRob3UsIGFsbC1ibGFjayBiaXJkOzwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGVyZSB0aG91IHNoYWx0IGhhdmUgaW4gYWJ1bmRhbmNlIHRoZSBmbGVzaCBvZiBtZW4uPC9sPgoJCQkJICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3cgdGhpcyBtYXR0ZXIgcmVhbGx5IHN0YW5kcywgdGhlbiwgaXQgaXMgZGlmZmljdWx0IHRvIGRlY2lkZTsgYnV0IGFzIGZvciBEZW1vc3RoZW5lcywgaGUgaXMgc2FpZCB0byBoYXZlIGhhZCBjb21wbGV0ZSBjb25maWRlbmNlIGluIHRoZSBHcmVlayBmb3JjZXMsIGFuZCB0byBoYXZlIGJlZW4gbGlmdGVkIGludG8gYSBzdGF0ZSBvZiBnbG93aW5nIGV4Y2l0ZW1lbnQgYnkgdGhlIHN0cmVuZ3RoIGFuZCBhcmRvdXIgb2Ygc28gbWFueSBtZW4gZWFnZXIgdG8gZW5nYWdlIHRoZSBlbmVteSwgc28gdGhhdCBoZSB3b3VsZCBub3Qgc3VmZmVyIGhpcyBjb3VudHJ5bWVuIHRvIGdpdmUgaGVlZCB0byBvcmFjbGVzIG9yIGxpc3RlbiB0byBwcm9waGVjaWVzOyBuYXksIGhlIGV2ZW4gc3VzcGVjdGVkIHRoZSBQeXRoaWFuIHByaWVzdGVzcyBvZiBiZWluZyBpbiBzeW1wYXRoeSB3aXRoIFBoaWxpcCwgcmVtaW5kaW5nIHRoZSBUaGViYW5zIG9mIEVwYW1pbm9uZGFzIGFuZCB0aGUgQXRoZW5pYW5zIG9mIFBlcmljbGVzLCBhbmQgZGVjbGFyaW5nIHRoYXQgdGhvc2UgZ3JlYXQgbGVhZGVycyByZWdhcmRlZCB0aGluZ3Mgb2YgdGhpcyBraW5kIGFzIHByZXRleHRzIGZvciBjb3dhcmRpY2UsIGFuZCB0aGVyZWZvcmUgZm9sbG93ZWQgdGhlIGRpY3RhdGVzIG9mIHJlYXNvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VXAgdG8gdGhpcyBwb2ludCwgdGhlbiwgaGUgd2FzIGEgYnJhdmUgbWFuOyBidXQgaW4gdGhlIGJhdHRsZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IENoYXJvbmVpYSwgMzM4IEIuQy48L25vdGU+IGhlIGRpc3BsYXllZCBubyBjb25kdWN0IHRoYXQgd2FzIGhvbm91cmFibGUgb3IgY29uc29uYW50IHdpdGggaGlzIHdvcmRzLCBidXQgZm9yc29vayBoaXMgcG9zdCwgY2FzdCBhd2F5IGhpcyBhcm1zLCBhbmQgcmFuIGF3YXkgbW9zdCBkaXNncmFjZWZ1bGx5LCBub3Igd2FzIGhlIGFzaGFtZWQgdG8gYmVsaWUgdGhlIGluc2NyaXB0aW9uIG9uIGhpcyBzaGllbGQsIGFzIFB5dGhlYXMgc2FpZCwgd2hlcmVvbiB3YXMgd3JpdHRlbiBpbiBsZXR0ZXJzIG9mIGdvbGQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2l0aCBnb29kIGZvcnR1bmUuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93IHRoaXMgbWF0dGVyIHJlYWxseSBzdGFuZHMsIHRoZW4sIGl0IGlzIGRpZmZpY3VsdCB0byBkZWNpZGU7IGJ1dCBhcyBmb3IgRGVtb3N0aGVuZXMsIGhlIGlzIHNhaWQgdG8gaGF2ZSBoYWQgY29tcGxldGUgY29uZmlkZW5jZSBpbiB0aGUgR3JlZWsgZm9yY2VzLCBhbmQgdG8gaGF2ZSBiZWVuIGxpZnRlZCBpbnRvIGEgc3RhdGUgb2YgZ2xvd2luZyBleGNpdGVtZW50IGJ5IHRoZSBzdHJlbmd0aCBhbmQgYXJkb3VyIG9mIHNvIG1hbnkgbWVuIGVhZ2VyIHRvIGVuZ2FnZSB0aGUgZW5lbXksIHNvIHRoYXQgaGUgd291bGQgbm90IHN1ZmZlciBoaXMgY291bnRyeW1lbiB0byBnaXZlIGhlZWQgdG8gb3JhY2xlcyBvciBsaXN0ZW4gdG8gcHJvcGhlY2llczsgbmF5LCBoZSBldmVuIHN1c3BlY3RlZCB0aGUgUHl0aGlhbiBwcmllc3Rlc3Mgb2YgYmVpbmcgaW4gc3ltcGF0aHkgd2l0aCBQaGlsaXAsIHJlbWluZGluZyB0aGUgVGhlYmFucyBvZiBFcGFtaW5vbmRhcyBhbmQgdGhlIEF0aGVuaWFucyBvZiBQZXJpY2xlcywgYW5kIGRlY2xhcmluZyB0aGF0IHRob3NlIGdyZWF0IGxlYWRlcnMgcmVnYXJkZWQgdGhpbmdzIG9mIHRoaXMga2luZCBhcyBwcmV0ZXh0cyBmb3IgY293YXJkaWNlLCBhbmQgdGhlcmVmb3JlIGZvbGxvd2VkIHRoZSBkaWN0YXRlcyBvZiByZWFzb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlVwIHRvIHRoaXMgcG9pbnQsIHRoZW4sIGhlIHdhcyBhIGJyYXZlIG1hbjsgYnV0IGluIHRoZSBiYXR0bGU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IENoYXJvbmVpYSwgMzM4IEIuQy48L25vdGU+IGhlIGRpc3BsYXllZCBubyBjb25kdWN0IHRoYXQgd2FzIGhvbm91cmFibGUgb3IgY29uc29uYW50IHdpdGggaGlzIHdvcmRzLCBidXQgZm9yc29vayBoaXMgcG9zdCwgY2FzdCBhd2F5IGhpcyBhcm1zLCBhbmQgcmFuIGF3YXkgbW9zdCBkaXNncmFjZWZ1bGx5LCBub3Igd2FzIGhlIGFzaGFtZWQgdG8gYmVsaWUgdGhlIGluc2NyaXB0aW9uIG9uIGhpcyBzaGllbGQsIGFzIFB5dGhlYXMgc2FpZCwgd2hlcmVvbiB3YXMgd3JpdHRlbiBpbiBsZXR0ZXJzIG9mIGdvbGQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaXRoIGdvb2QgZm9ydHVuZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkltbWVkaWF0ZWx5IGFmdGVyIGhpcyB2aWN0b3J5LCB0aGVuLCBQaGlsaXAgd2F4ZWQgaW5zb2xlbnQgZm9yIGpveSwgYW5kIGdvaW5nIGZvcnRoIGluIHJldmVsIHJvdXQgdG8gc2VlIHRoZSBib2RpZXMgb2YgdGhlIHNsYWluLCBhbmQgYmVpbmcgaW4gaGlzIGN1cHMsIHJlY2l0ZWQgdGhlIGJlZ2lubmluZyBvZiB0aGUgZGVjcmVlIGludHJvZHVjZWQgYnkgRGVtb3N0aGVuZXMsIGRpdmlkaW5nIGl0IGludG8gZmVldCBhbmQgbWFya2luZyBvZmYgdGhlIHRpbWU64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkRlbW9zdGhlbmVzLCBzb24gb2YgRGVtb3N0aGVuZXMsIG9mIFBhZWFuaWEsIHRodXMgbW92ZXM7PC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgR3JlZWsgd29yZHMgZm9ybSBhbiBpYW1iaWMgdGV0cmFtZXRlciBjYXRhbGV0aWMuPC9ub3RlPgoJCQkJYnV0IHdoZW4gaGUgZ290IHNvYmVyIGFuZCByZWFsaXplZCB0aGUgbWFnbml0dWRlIG9mIHRoZSBzdHJ1Z2dsZSBpbiB3aGljaCBoZSBoYWQgYmVlbiBpbnZvbHZlZCwgaGUgc2h1ZGRlcmVkIGF0IHRoZSBwb3dlciBhbmQgdGhlIGFiaWxpdHkgb2YgdGhlIG9yYXRvciB3aG8gaGFkIGZvcmNlZCBoaW0gdG8gaGF6YXJkIGhpcyBlbXBpcmUgYW5kIGhpcyBsaWZlIGluIHRoZSBicmllZiBzcGFuIG9mIGEgc2luZ2xlIGRheS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBmYW1lIG9mIHRoaXMgb3JhdG9yIHBlbmV0cmF0ZWQgZXZlbiB0byB0aGUgUGVyc2lhbiBraW5nLCB3aG8gc2VudCBsZXR0ZXJzIHRvIGhpcyBzYXRyYXBzIG9uIHRoZSBjb2FzdCwgYmlkZGluZyB0aGVtIHRvIG9mZmVyIG1vbmV5IHRvIERlbW9zdGhlbmVzLCBhbmQgdG8gcGF5IG1vcmUgYXR0ZW50aW9uIHRvIGhpbSB0aGFuIHRvIGFueSBvdGhlciBHcmVlaywgc2luY2UgaGUgd2FzIGFibGUgdG8gZGlzdHJhY3QgYW5kIGRldGFpbiB0aGUgTWFjZWRvbmlhbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBoaWxpcCB3YXMgdGhyZWF0ZW5pbmcgdGhlIGludmFzaW9uIG9mIEFzaWEuPC9ub3RlPiB3aXRoIHRoZSB0cm91YmxlcyB3aGljaCBoZSByYWlzZWQgaW4gR3JlZWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSB0aGluZ3MsIG5vdywgd2VyZSBkaXNjb3ZlcmVkIGF0IGEgbGF0ZXIgdGltZSBieSBBbGV4YW5kZXIsIHdobyBmb3VuZCBhdCBTYXJkaXMgY2VydGFpbiBsZXR0ZXJzIG9mIERlbW9zdGhlbmVzIGFuZCBkb2N1bWVudHMgb2YgdGhlIEtpbmcncyBnZW5lcmFscywgd2hpY2ggZGlzY2xvc2VkIHRoZSBhbW91bnQgb2YgbW9uZXkgdGhleSBoYWQgZ2l2ZW4gaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkltbWVkaWF0ZWx5IGFmdGVyIGhpcyB2aWN0b3J5LCB0aGVuLCBQaGlsaXAgd2F4ZWQgaW5zb2xlbnQgZm9yIGpveSwgYW5kIGdvaW5nIGZvcnRoIGluIHJldmVsIHJvdXQgdG8gc2VlIHRoZSBib2RpZXMgb2YgdGhlIHNsYWluLCBhbmQgYmVpbmcgaW4gaGlzIGN1cHMsIHJlY2l0ZWQgdGhlIGJlZ2lubmluZyBvZiB0aGUgZGVjcmVlIGludHJvZHVjZWQgYnkgRGVtb3N0aGVuZXMsIGRpdmlkaW5nIGl0IGludG8gZmVldCBhbmQgbWFya2luZyBvZmYgdGhlIHRpbWU64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLCBvZiBQYWVhbmlhLCB0aHVzIG1vdmVzOzwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLCBvZiBQYWVhbmlhLCB0aHVzIG1vdmVzOzwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgR3JlZWsgd29yZHMgZm9ybSBhbiBpYW1iaWMgdGV0cmFtZXRlciBjYXRhbGV0aWMuPC9ub3RlPgoJCQkJYnV0IHdoZW4gaGUgZ290IHNvYmVyIGFuZCByZWFsaXplZCB0aGUgbWFnbml0dWRlIG9mIHRoZSBzdHJ1Z2dsZSBpbiB3aGljaCBoZSBoYWQgYmVlbiBpbnZvbHZlZCwgaGUgc2h1ZGRlcmVkIGF0IHRoZSBwb3dlciBhbmQgdGhlIGFiaWxpdHkgb2YgdGhlIG9yYXRvciB3aG8gaGFkIGZvcmNlZCBoaW0gdG8gaGF6YXJkIGhpcyBlbXBpcmUgYW5kIGhpcyBsaWZlIGluIHRoZSBicmllZiBzcGFuIG9mIGEgc2luZ2xlIGRheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgZmFtZSBvZiB0aGlzIG9yYXRvciBwZW5ldHJhdGVkIGV2ZW4gdG8gdGhlIFBlcnNpYW4ga2luZywgd2hvIHNlbnQgbGV0dGVycyB0byBoaXMgc2F0cmFwcyBvbiB0aGUgY29hc3QsIGJpZGRpbmcgdGhlbSB0byBvZmZlciBtb25leSB0byBEZW1vc3RoZW5lcywgYW5kIHRvIHBheSBtb3JlIGF0dGVudGlvbiB0byBoaW0gdGhhbiB0byBhbnkgb3RoZXIgR3JlZWssIHNpbmNlIGhlIHdhcyBhYmxlIHRvIGRpc3RyYWN0IGFuZCBkZXRhaW4gdGhlIE1hY2Vkb25pYW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBoaWxpcCB3YXMgdGhyZWF0ZW5pbmcgdGhlIGludmFzaW9uIG9mIEFzaWEuPC9ub3RlPiB3aXRoIHRoZSB0cm91YmxlcyB3aGljaCBoZSByYWlzZWQgaW4gR3JlZWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHRoaW5ncywgbm93LCB3ZXJlIGRpc2NvdmVyZWQgYXQgYSBsYXRlciB0aW1lIGJ5IEFsZXhhbmRlciwgd2hvIGZvdW5kIGF0IFNhcmRpcyBjZXJ0YWluIGxldHRlcnMgb2YgRGVtb3N0aGVuZXMgYW5kIGRvY3VtZW50cyBvZiB0aGUgS2luZydzIGdlbmVyYWxzLCB3aGljaCBkaXNjbG9zZWQgdGhlIGFtb3VudCBvZiBtb25leSB0aGV5IGhhZCBnaXZlbiBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgaG93ZXZlciwgd2hlbiB0aGVpciBkaXNhc3RlciBmZWxsIHVwb24gdGhlIEdyZWVrcywgdGhlIG9yYXRvcnMgb2YgdGhlIG9wcG9zaW5nIHBhcnR5IGFzc2FpbGVkIERlbW9zdGhlbmVzIGFuZCBwcmVwYXJlZCByZWNrb25pbmdzIGFuZCBpbmRpY3RtZW50cyBhZ2FpbnN0IGhpbTsgYnV0IHRoZSBwZW9wbGUgbm90IG9ubHkgYWJzb2x2ZWQgaGltIGZyb20gdGhlc2UsIG5heSwgdGhleSBhY3R1YWxseSBjb250aW51ZWQgdG8gaG9ub3VyIGhpbSBhbmQgaW52aXRlZCBoaW0gYWdhaW4sIGFzIGEgbG95YWwgbWFuLCB0byB0YWtlIHBhcnQgaW4gcHVibGljIGFmZmFpcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSwgd2hlbiB0aGUgYm9uZXMgb2YgdGhvc2Ugd2hvIGhhZCBmYWxsZW4gYXQgQ2hhZXJvbmVpYSB3ZXJlIGJyb3VnaHQgaG9tZSBmb3IgYnVyaWFsLCB0aGV5IGFzc2lnbmVkIHRvIGhpbSB0aGUgaG9ub3VyIG9mIHByb25vdW5jaW5nIHRoZSBldWxvZ3kgb3ZlciB0aGUgbWVuOyBub3IgZGlkIHRoZXkgc2hvdyBhIGJhc2Ugb3IgaWdub2JsZSBzcGlyaXQgdW5kZXIgdGhlIGNhbGFtaXR5IHdoaWNoIGhhZCBiZWZhbGxlbiB0aGVtLCBhcyBUaGVvcG9tcHVzIHdyaXRlcyBpbiBoaXMgaW5mbGF0ZWQgc3R5bGUsIGJ1dCBieSB0aGUgc3BlY2lhbCBob25vdXIgYW5kIHJlc3BlY3Qgd2hpY2ggdGhleSBwYWlkIHRvIHRoZWlyIGNvdW5zZWxsb3IgdGhleSBtYWRlIGl0IG1hbmlmZXN0IHRoYXQgdGhleSBkaWQgbm90IHJlcGVudCBvZiB0aGUgY291bnNlbHMgaGUgaGFkIGdpdmVuIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvcmF0aW9uLCB0aGVuLCB3YXMgcHJvbm91bmNlZCBieSBEZW1vc3RoZW5lcywgYnV0IHRvIHRoZSBkZWNyZWVzIHdoaWNoIGhlIHByb3Bvc2VkIGhlIHdvdWxkIG5vdCBwdXQgaGlzIG93biBuYW1lLCBidXQgcmF0aGVyIHRob3NlIG9mIGhpcyBmcmllbmRzLCBvbmUgYWZ0ZXIgdGhlIG90aGVyLCBhdm9pZGluZyBoaXMgb3duIGFzIGluYXVzcGljaW91cyBhbmQgdW5mb3J0dW5hdGUsIHVudGlsIGhlIG9uY2UgbW9yZSB0b29rIGNvdXJhZ2UgdXBvbiBQaGlsaXAncyBkZWF0aC4gQW5kIFBoaWxpcCBkaWVkLCBzdXJ2aXZpbmcgaGlzIHN1Y2Nlc3MgYXQgQ2hhZXJvbmVpYSBvbmx5IGEgc2hvcnQgdGltZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QaGlsaXAgd2FzIGFzc2Fzc2luYXRlZCBieSBQYXVzYW5pYXMsIG9uZSBvZiBoaXMgcm95YWwgYm9keWd1YXJkLCBpbiAzMzYgQi5DLiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbGV4LiAxMC40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkFsZXhhbmRlcjwvdGl0bGU+LCB4LiA0PC9iaWJsPi48L25vdGU+IGFuZCB0aGlzLCBpdCB3b3VsZCBzZWVtLCB3YXMgZm9yZXRvbGQgYnkgdGhlIGxhc3QgdmVyc2Ugb2YgdGhlIG9yYWNsZTrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+VGVhcnMgYXJlIGZvciB0aGUgY29ucXVlcmVkIHRoZXJlLCBhbmQgZm9yIHRoZSA8L2w+CgkJCQkJICAgICAgICAgIDxsPmNvbnF1ZXJvciwgZGVhdGguPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCBob3dldmVyLCB3aGVuIHRoZWlyIGRpc2FzdGVyIGZlbGwgdXBvbiB0aGUgR3JlZWtzLCB0aGUgb3JhdG9ycyBvZiB0aGUgb3Bwb3NpbmcgcGFydHkgYXNzYWlsZWQgRGVtb3N0aGVuZXMgYW5kIHByZXBhcmVkIHJlY2tvbmluZ3MgYW5kIGluZGljdG1lbnRzIGFnYWluc3QgaGltOyBidXQgdGhlIHBlb3BsZSBub3Qgb25seSBhYnNvbHZlZCBoaW0gZnJvbSB0aGVzZSwgbmF5LCB0aGV5IGFjdHVhbGx5IGNvbnRpbnVlZCB0byBob25vdXIgaGltIGFuZCBpbnZpdGVkIGhpbSBhZ2FpbiwgYXMgYSBsb3lhbCBtYW4sIHRvIHRha2UgcGFydCBpbiBwdWJsaWMgYWZmYWlycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSwgd2hlbiB0aGUgYm9uZXMgb2YgdGhvc2Ugd2hvIGhhZCBmYWxsZW4gYXQgQ2hhZXJvbmVpYSB3ZXJlIGJyb3VnaHQgaG9tZSBmb3IgYnVyaWFsLCB0aGV5IGFzc2lnbmVkIHRvIGhpbSB0aGUgaG9ub3VyIG9mIHByb25vdW5jaW5nIHRoZSBldWxvZ3kgb3ZlciB0aGUgbWVuOyBub3IgZGlkIHRoZXkgc2hvdyBhIGJhc2Ugb3IgaWdub2JsZSBzcGlyaXQgdW5kZXIgdGhlIGNhbGFtaXR5IHdoaWNoIGhhZCBiZWZhbGxlbiB0aGVtLCBhcyBUaGVvcG9tcHVzIHdyaXRlcyBpbiBoaXMgaW5mbGF0ZWQgc3R5bGUsIGJ1dCBieSB0aGUgc3BlY2lhbCBob25vdXIgYW5kIHJlc3BlY3Qgd2hpY2ggdGhleSBwYWlkIHRvIHRoZWlyIGNvdW5zZWxsb3IgdGhleSBtYWRlIGl0IG1hbmlmZXN0IHRoYXQgdGhleSBkaWQgbm90IHJlcGVudCBvZiB0aGUgY291bnNlbHMgaGUgaGFkIGdpdmVuIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBvcmF0aW9uLCB0aGVuLCB3YXMgcHJvbm91bmNlZCBieSBEZW1vc3RoZW5lcywgYnV0IHRvIHRoZSBkZWNyZWVzIHdoaWNoIGhlIHByb3Bvc2VkIGhlIHdvdWxkIG5vdCBwdXQgaGlzIG93biBuYW1lLCBidXQgcmF0aGVyIHRob3NlIG9mIGhpcyBmcmllbmRzLCBvbmUgYWZ0ZXIgdGhlIG90aGVyLCBhdm9pZGluZyBoaXMgb3duIGFzIGluYXVzcGljaW91cyBhbmQgdW5mb3J0dW5hdGUsIHVudGlsIGhlIG9uY2UgbW9yZSB0b29rIGNvdXJhZ2UgdXBvbiBQaGlsaXAncyBkZWF0aC4gQW5kIFBoaWxpcCBkaWVkLCBzdXJ2aXZpbmcgaGlzIHN1Y2Nlc3MgYXQgQ2hhZXJvbmVpYSBvbmx5IGEgc2hvcnQgdGltZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBoaWxpcCB3YXMgYXNzYXNzaW5hdGVkIGJ5IFBhdXNhbmlhcywgb25lIG9mIGhpcyByb3lhbCBib2R5Z3VhcmQsIGluIDMzNiBCLkMuIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWxleC4gMTAuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFsZXhhbmRlcjwvdGl0bGU+LCB4LiA0PC9iaWJsPi48L25vdGU+IGFuZCB0aGlzLCBpdCB3b3VsZCBzZWVtLCB3YXMgZm9yZXRvbGQgYnkgdGhlIGxhc3QgdmVyc2Ugb2YgdGhlIG9yYWNsZTrigJQKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFsZXguIDEwLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbGV4YW5kZXI8L3RpdGxlPiwgeC4gNDwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWxleGFuZGVyPC90aXRsZT4sIHguIDQ8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UZWFycyBhcmUgZm9yIHRoZSBjb25xdWVyZWQgdGhlcmUsIGFuZCBmb3IgdGhlIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5jb25xdWVyb3IsIGRlYXRoLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UZWFycyBhcmUgZm9yIHRoZSBjb25xdWVyZWQgdGhlcmUsIGFuZCBmb3IgdGhlIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5jb25xdWVyb3IsIGRlYXRoLjwvbD4KCQkJCSAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBEZW1vc3RoZW5lcyBoYWQgc2VjcmV0IGludGVsbGlnZW5jZSBvZiBQaGlsaXAncyBkZWF0aCwgYW5kIGJ5IHdheSBvZiBpbnNwaXJpbmcgdGhlIEF0aGVuaWFucyB3aXRoIGNvdXJhZ2UgZm9yIHRoZSBmdXR1cmUsIGhlIGNhbWUgZm9ydGggdG8gdGhlIGNvdW5jaWwgd2l0aCBhIGdsYWQgY291bnRlbmFuY2UsIGRlY2xhcmluZyB0aGF0IGhlIGhhZCBhIGRyZWFtIHdoaWNoIGxlZCBoaW0gdG8gZXhwZWN0IHNvbWUgZ3JlYXQgYmxlc3NpbmcgZm9yIEF0aGVuczsgYW5kIG5vdCBsb25nIGFmdGVyd2FyZHMgdGhlIG1lc3NlbmdlcnMgY2FtZSB3aXRoIHRpZGluZ3Mgb2YgUGhpbGlwJ3MgZGVhdGguIEF0IG9uY2UsIHRoZW4sIHRoZSBBdGhlbmlhbnMgcHJvY2VlZGVkIHRvIG1ha2UgdGhhbmstb2ZmZXJpbmdzIGZvciBnbGFkIHRpZGluZ3MgYW5kIHZvdGVkIGEgY3Jvd24gZm9yIFBhdXNhbmlhcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIERlbW9zdGhlbmVzIGNhbWUgZm9ydGggaW4gcHVibGljIGRyZXNzZWQgaW4gYSBzcGxlbmRpZCByb2JlIGFuZCB3ZWFyaW5nIGEgZ2FybGFuZCBvbiBoaXMgaGVhZCwgYWx0aG91Z2ggaGlzIGRhdWdodGVyIGhhZCBkaWVkIG9ubHkgc2l4IGRheXMgYmVmb3JlLCBhcyBBZXNjaGluZXMgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuNzciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QWdhaW5zdCBDdGVzaXBob248L3RpdGxlPiAgKG9yIDx0aXRsZT5PbiB0aGUgQ3Jvd248L3RpdGxlPiksIMKnICA3NzwvYmlibD4uPC9ub3RlPiB3aG8gcmFpbHMgYXQgaGltIGZvciB0aGlzIGFuZCBkZW5vdW5jZXMgaGltIGFzIGFuIHVubmF0dXJhbCBmYXRoZXIuIEFuZCB5ZXQgQWVzY2hpbmVzIGhpbXNlbGYgd2FzIG9mIGEgd2VhayBhbmQgdW5nZW5lcm91cyBuYXR1cmUsIGlmIGhlIGNvbnNpZGVyZWQgbW91cm5pbmdzIGFuZCBsYW1lbnRhdGlvbnMgYXMgdGhlIHNpZ25zIG9mIGFuIGFmZmVjdGlvbmF0ZSBzcGlyaXQsIGJ1dCBjb25kZW1uZWQgdGhlIGJlYXJpbmcgb2Ygc3VjaCBsb3NzZXMgc2VyZW5lbHkgYW5kIHdpdGhvdXQgcmVwaW5pbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBEZW1vc3RoZW5lcyBoYWQgc2VjcmV0IGludGVsbGlnZW5jZSBvZiBQaGlsaXAncyBkZWF0aCwgYW5kIGJ5IHdheSBvZiBpbnNwaXJpbmcgdGhlIEF0aGVuaWFucyB3aXRoIGNvdXJhZ2UgZm9yIHRoZSBmdXR1cmUsIGhlIGNhbWUgZm9ydGggdG8gdGhlIGNvdW5jaWwgd2l0aCBhIGdsYWQgY291bnRlbmFuY2UsIGRlY2xhcmluZyB0aGF0IGhlIGhhZCBhIGRyZWFtIHdoaWNoIGxlZCBoaW0gdG8gZXhwZWN0IHNvbWUgZ3JlYXQgYmxlc3NpbmcgZm9yIEF0aGVuczsgYW5kIG5vdCBsb25nIGFmdGVyd2FyZHMgdGhlIG1lc3NlbmdlcnMgY2FtZSB3aXRoIHRpZGluZ3Mgb2YgUGhpbGlwJ3MgZGVhdGguIEF0IG9uY2UsIHRoZW4sIHRoZSBBdGhlbmlhbnMgcHJvY2VlZGVkIHRvIG1ha2UgdGhhbmstb2ZmZXJpbmdzIGZvciBnbGFkIHRpZGluZ3MgYW5kIHZvdGVkIGEgY3Jvd24gZm9yIFBhdXNhbmlhcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBEZW1vc3RoZW5lcyBjYW1lIGZvcnRoIGluIHB1YmxpYyBkcmVzc2VkIGluIGEgc3BsZW5kaWQgcm9iZSBhbmQgd2VhcmluZyBhIGdhcmxhbmQgb24gaGlzIGhlYWQsIGFsdGhvdWdoIGhpcyBkYXVnaHRlciBoYWQgZGllZCBvbmx5IHNpeCBkYXlzIGJlZm9yZSwgYXMgQWVzY2hpbmVzIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMy43NyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnYWluc3QgQ3Rlc2lwaG9uPC90aXRsZT4gIChvciA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgQ3Jvd248L3RpdGxlPiksIMKnICA3NzwvYmlibD4uPC9ub3RlPiB3aG8gcmFpbHMgYXQgaGltIGZvciB0aGlzIGFuZCBkZW5vdW5jZXMgaGltIGFzIGFuIHVubmF0dXJhbCBmYXRoZXIuIEFuZCB5ZXQgQWVzY2hpbmVzIGhpbXNlbGYgd2FzIG9mIGEgd2VhayBhbmQgdW5nZW5lcm91cyBuYXR1cmUsIGlmIGhlIGNvbnNpZGVyZWQgbW91cm5pbmdzIGFuZCBsYW1lbnRhdGlvbnMgYXMgdGhlIHNpZ25zIG9mIGFuIGFmZmVjdGlvbmF0ZSBzcGlyaXQsIGJ1dCBjb25kZW1uZWQgdGhlIGJlYXJpbmcgb2Ygc3VjaCBsb3NzZXMgc2VyZW5lbHkgYW5kIHdpdGhvdXQgcmVwaW5pbmcuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuNzciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZ2FpbnN0IEN0ZXNpcGhvbjwvdGl0bGU+ICAob3IgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4pLCDCpyAgNzc8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFnYWluc3QgQ3Rlc2lwaG9uPC90aXRsZT4gIChvciA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgQ3Jvd248L3RpdGxlPiksIMKnICA3NzxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBteSBvd24gcGFydCwgSSBjYW5ub3Qgc2F5IHRoYXQgaXQgd2FzIGhvbm91cmFibGUgaW4gdGhlIEF0aGVuaWFucyB0byBjcm93biB0aGVtc2VsdmVzIHdpdGggZ2FybGFuZHMgYW5kIG9mZmVyIHNhY3JpZmljZXMgdG8gdGhlIGdvZHMgb24gdGhlIGRlYXRoIG9mIGEga2luZyB3aG8sIGluIHRoZSBtaWRzdCBvZiBoaXMgc3VjY2Vzc2VzLCBoYWQgdHJlYXRlZCB0aGVtIHNvIG1pbGRseSBhbmQgaHVtYW5lbHkgaW4gdGhlaXIgcmV2ZXJzZXM7IGZvciBiZXNpZGVzIHByb3Zva2luZyB0aGUgaW5kaWduYXRpb24gb2YgdGhlIGdvZHMsIGl0IHdhcyBhbHNvIGFuIGlnbm9ibGUgdGhpbmcgdG8gaG9ub3VyIGhpbSB3aGlsZSBoZSB3YXMgYWxpdmUgYW5kIG1ha2UgaGltIGEgY2l0aXplbiBvZiBBdGhlbnMsIGJ1dCB3aGVuIGhlIGhhZCBmYWxsZW4gYnkgYW5vdGhlcidzIGhhbmQgdG8gc2V0IG5vIGJvdW5kcyB0byB0aGVpciBqb3ksIG5heSwgdG8gbGVhcCBhcyBpdCB3ZXJlLCB1cG9uIHRoZSBkZWFkLCBhbmQgc2luZyBwYWVhbnMgb2YgdmljdG9yeSwgYXMgaWYgdGhleSB0aGVtc2VsdmVzIGhhZCB3cm91Z2h0IGEgZGVlZCBvZiB2YWxvdXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGZvciBsZWF2aW5nIGhpcyBkb21lc3RpYyBtaXNmb3J0dW5lcyBhbmQgdGVhcnMgYW5kIGxhbWVudGF0aW9ucyB0byB0aGUgd29tZW4gYW5kIGdvaW5nIGFib3V0IHN1Y2ggYnVzaW5lc3MgYXMgaGUgdGhvdWdodCBhZHZhbnRhZ2VvdXMgdG8gdGhlIGNpdHksIEkgY29tbWVuZCBEZW1vc3RoZW5lcywgYW5kIEkgaG9sZCBpdCB0byBiZSB0aGUgcGFydCBvZiBhIHN0YXRlc21hbmxpa2UgYW5kIG1hbmx5IHNwaXJpdCB0byBrZWVwIGV2ZXIgaW4gdmlldyB0aGUgZ29vZCBvZiB0aGUgY29tbXVuaXR5LCB0byBmaW5kIHN1cHBvcnQgZm9yIGRvbWVzdGljIHNvcnJvd3MgYW5kIGNvbmNlcm5zIGluIHRoZSBwdWJsaWMgd2VsZmFyZSwgYW5kIHRvIHByZXNlcnZlIG9uZSdzIGRpZ25pdHkgZmFyIG1vcmUgdGhhbiBhY3RvcnMgZG8gd2hlbiB0aGV5IHRha2UgdGhlIHBhcnRzIG9mIGtpbmdzIGFuZCB0eXJhbnRzOyBmb3IgdGhlc2UsIGFzIHdlIHNlZSBpbiB0aGUgdGhlYXRyZXMsIG5laXRoZXIgd2VlcCBub3IgbGF1Z2ggYWNjb3JkaW5nIHRvIHRoZWlyIG93biBpbmNsaW5hdGlvbnMsIGJ1dCBhcyB0aGUgc3ViamVjdCBvZiB0aGUgYWN0aW9uIGRlbWFuZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBteSBvd24gcGFydCwgSSBjYW5ub3Qgc2F5IHRoYXQgaXQgd2FzIGhvbm91cmFibGUgaW4gdGhlIEF0aGVuaWFucyB0byBjcm93biB0aGVtc2VsdmVzIHdpdGggZ2FybGFuZHMgYW5kIG9mZmVyIHNhY3JpZmljZXMgdG8gdGhlIGdvZHMgb24gdGhlIGRlYXRoIG9mIGEga2luZyB3aG8sIGluIHRoZSBtaWRzdCBvZiBoaXMgc3VjY2Vzc2VzLCBoYWQgdHJlYXRlZCB0aGVtIHNvIG1pbGRseSBhbmQgaHVtYW5lbHkgaW4gdGhlaXIgcmV2ZXJzZXM7IGZvciBiZXNpZGVzIHByb3Zva2luZyB0aGUgaW5kaWduYXRpb24gb2YgdGhlIGdvZHMsIGl0IHdhcyBhbHNvIGFuIGlnbm9ibGUgdGhpbmcgdG8gaG9ub3VyIGhpbSB3aGlsZSBoZSB3YXMgYWxpdmUgYW5kIG1ha2UgaGltIGEgY2l0aXplbiBvZiBBdGhlbnMsIGJ1dCB3aGVuIGhlIGhhZCBmYWxsZW4gYnkgYW5vdGhlcidzIGhhbmQgdG8gc2V0IG5vIGJvdW5kcyB0byB0aGVpciBqb3ksIG5heSwgdG8gbGVhcCBhcyBpdCB3ZXJlLCB1cG9uIHRoZSBkZWFkLCBhbmQgc2luZyBwYWVhbnMgb2YgdmljdG9yeSwgYXMgaWYgdGhleSB0aGVtc2VsdmVzIGhhZCB3cm91Z2h0IGEgZGVlZCBvZiB2YWxvdXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGZvciBsZWF2aW5nIGhpcyBkb21lc3RpYyBtaXNmb3J0dW5lcyBhbmQgdGVhcnMgYW5kIGxhbWVudGF0aW9ucyB0byB0aGUgd29tZW4gYW5kIGdvaW5nIGFib3V0IHN1Y2ggYnVzaW5lc3MgYXMgaGUgdGhvdWdodCBhZHZhbnRhZ2VvdXMgdG8gdGhlIGNpdHksIEkgY29tbWVuZCBEZW1vc3RoZW5lcywgYW5kIEkgaG9sZCBpdCB0byBiZSB0aGUgcGFydCBvZiBhIHN0YXRlc21hbmxpa2UgYW5kIG1hbmx5IHNwaXJpdCB0byBrZWVwIGV2ZXIgaW4gdmlldyB0aGUgZ29vZCBvZiB0aGUgY29tbXVuaXR5LCB0byBmaW5kIHN1cHBvcnQgZm9yIGRvbWVzdGljIHNvcnJvd3MgYW5kIGNvbmNlcm5zIGluIHRoZSBwdWJsaWMgd2VsZmFyZSwgYW5kIHRvIHByZXNlcnZlIG9uZSdzIGRpZ25pdHkgZmFyIG1vcmUgdGhhbiBhY3RvcnMgZG8gd2hlbiB0aGV5IHRha2UgdGhlIHBhcnRzIG9mIGtpbmdzIGFuZCB0eXJhbnRzOyBmb3IgdGhlc2UsIGFzIHdlIHNlZSBpbiB0aGUgdGhlYXRyZXMsIG5laXRoZXIgd2VlcCBub3IgbGF1Z2ggYWNjb3JkaW5nIHRvIHRoZWlyIG93biBpbmNsaW5hdGlvbnMsIGJ1dCBhcyB0aGUgc3ViamVjdCBvZiB0aGUgYWN0aW9uIGRlbWFuZHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcGFydCBmcm9tIHRoZXNlIGNvbnNpZGVyYXRpb25zLCBpZiBpdCBpcyBvdXIgZHV0eSBub3QgdG8gYWxsb3cgdGhlIHVuZm9ydHVuYXRlIHRvIGxpZSBjb21mb3J0bGVzcyBpbiBoaXMgc29ycm93LCBidXQgdG8gYWRkcmVzcyBoaW0gd2l0aCBjaGVlcmluZyB3b3JkcyBhbmQgdHVybiBoaXMgdGhvdWdodHMgdG8gcGxlYXNhbnRlciB0aGluZ3MgKGxpa2UgdGhvc2Ugd2hvIHRlbGwgcGVvcGxlIHdpdGggc29yZSBleWVzIHRvIHdpdGhkcmF3IHRoZWlyIGdhemUgZnJvbSBicmlnaHQgYW5kIGhhcmQgY29sb3VycyBhbmQgZml4IGl0IHVwb24gdGhvc2Ugd2hpY2ggYXJlIHNvZnQgYW5kIGdyZWVuKSwgaG93IGNhbiBhIG1hbiBvYnRhaW4gYmV0dGVyIGNvbnNvbGF0aW9uIGZvciBoaXMgZG9tZXN0aWMgZ3JpZWZzIHRoYW4gYnkgYmxlbmRpbmcgdGhlbSB3aXRoIHRoZSBnZW5lcmFsIHdlbGZhcmUgb2YgYSBwcm9zcGVyb3VzIGNvdW50cnksIHRodXMgbWFraW5nIHRoZSBiZXR0ZXIgdGhpbmdzIG9ic2N1cmUgdGhlIHdvcnNlPyBUaGVzZSB0aGluZ3MsIHRoZW4sIEkgaGF2ZSBiZWVuIGxlZCB0byBzYXkgb24gc2VlaW5nIHRoYXQgbWFueSBoYXZlIHRoZWlyIGhlYXJ0cyBzb2Z0ZW5lZCB0byBlZmZlbWluYXRlIHBpdHkgYnkgdGhpcyBkaXNjb3Vyc2Ugb2YgQWVzY2hpbmVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcGFydCBmcm9tIHRoZXNlIGNvbnNpZGVyYXRpb25zLCBpZiBpdCBpcyBvdXIgZHV0eSBub3QgdG8gYWxsb3cgdGhlIHVuZm9ydHVuYXRlIHRvIGxpZSBjb21mb3J0bGVzcyBpbiBoaXMgc29ycm93LCBidXQgdG8gYWRkcmVzcyBoaW0gd2l0aCBjaGVlcmluZyB3b3JkcyBhbmQgdHVybiBoaXMgdGhvdWdodHMgdG8gcGxlYXNhbnRlciB0aGluZ3MgKGxpa2UgdGhvc2Ugd2hvIHRlbGwgcGVvcGxlIHdpdGggc29yZSBleWVzIHRvIHdpdGhkcmF3IHRoZWlyIGdhemUgZnJvbSBicmlnaHQgYW5kIGhhcmQgY29sb3VycyBhbmQgZml4IGl0IHVwb24gdGhvc2Ugd2hpY2ggYXJlIHNvZnQgYW5kIGdyZWVuKSwgaG93IGNhbiBhIG1hbiBvYnRhaW4gYmV0dGVyIGNvbnNvbGF0aW9uIGZvciBoaXMgZG9tZXN0aWMgZ3JpZWZzIHRoYW4gYnkgYmxlbmRpbmcgdGhlbSB3aXRoIHRoZSBnZW5lcmFsIHdlbGZhcmUgb2YgYSBwcm9zcGVyb3VzIGNvdW50cnksIHRodXMgbWFraW5nIHRoZSBiZXR0ZXIgdGhpbmdzIG9ic2N1cmUgdGhlIHdvcnNlPyBUaGVzZSB0aGluZ3MsIHRoZW4sIEkgaGF2ZSBiZWVuIGxlZCB0byBzYXkgb24gc2VlaW5nIHRoYXQgbWFueSBoYXZlIHRoZWlyIGhlYXJ0cyBzb2Z0ZW5lZCB0byBlZmZlbWluYXRlIHBpdHkgYnkgdGhpcyBkaXNjb3Vyc2Ugb2YgQWVzY2hpbmVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2l0aWVzIG9mIEdyZWVjZSwgdW5kZXIgdGhlIGluaXRpYXRpb25zIG9mIERlbW9zdGhlbmVzLCBub3cgZm9ybWVkIHRoZW1zZWx2ZXMgaW50byBhIGxlYWd1ZSBhZ2Fpbi4gVGhlIFRoZWJhbnMsIHdob20gRGVtb3N0aGVuZXMgaGFkIGhlbHBlZCB0byBwcm92aWRlIHdpdGggYXJtcywgZmVsbCB1cG9uIHRoZWlyIE1hY2Vkb25pYW4gZ2Fycmlzb24gYW5kIHNsZXcgbWFueSBvZiB0aGVtOyB3aGlsZSB0aGUgQXRoZW5pYW5zIG1hZGUgcHJlcGFyYXRpb25zIHRvIGdvIHRvIHdhciBhbG9uZyB3aXRoIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRlbW9zdGhlbmVzIHJlaWduZWQgc3VwcmVtZSBpbiB0aGUgYXNzZW1ibHksIGFuZCB3cm90ZSBsZXR0ZXJzIHRvIHRoZSBLaW5nJ3MgZ2VuZXJhbHMgaW4gQXNpYSBzdGlycmluZyB0aGVtIHVwIHRvIG1ha2Ugd2FyIHVwb24gQWxleGFuZGVyLCB3aG9tIGhlIGNhbGxlZCBhIGJveSBhbmQgYSBNYXJnaXRlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5pLmUuIDxnbG9zcz5TaWxseSBNYWRtYW48L2dsb3NzPi4gQSBtb2NrIGhlcm9pYyBwb2VtIGJlYXJpbmcgdGhpcyBuYW1lIHdhcyBhdHRyaWJ1dGVkIHRvIEhvbWVyLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMTYwIiB2YWxpZD0ieWVzIj5BZXNjaGluZXMsIDx0aXRsZT5PbiB0aGUgQ3Jvd248L3RpdGxlPiDCpyAxNjA8L2JpYmw+Ljwvbm90ZT4gV2hlbiwgaG93ZXZlciwgQWxleGFuZGVyIGhhZCBzZXR0bGVkIHRoZSBhZmZhaXJzIG9mIGhpcyBvd24gY291bnRyeSBhbmQgY2FtZSBpbiBwZXJzb24gd2l0aCBoaXMgZm9yY2VzIGludG8gQm9lb3RpYSwgcHJvbmUgbGF5IHRoZSBjb3VyYWdlIG9mIHRoZSBBdGhlbmlhbnMsIGFuZCBEZW1vc3RoZW5lcyB3YXMgZXh0aW5ndWlzaGVkLCB3aGlsZSB0aGUgVGhlYmFucywgYmV0cmF5ZWQgYnkgdGhlaXIgYWxsaWVzLCBmb3VnaHQgYnkgdGhlbXNlbHZlcyBhbmQgbG9zdCB0aGVpciBjaXR5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIE9jdG9iZXIsIDMzNSBCLkMuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGluIHRoZSBtaWRzdCBvZiB0aGUgZ3JlYXQgY29uZnVzaW9uIHdoaWNoIHJlaWduZWQgYXQgQXRoZW5zLCBEZW1vc3RoZW5lcyB3YXMgY2hvc2VuIGFuZCBzZW50IHdpdGggb3RoZXJzIGFzIGFuIGFtYmFzc2Fkb3IgdG8gQWxleGFuZGVyLCBidXQgZmVhcmluZyB0aGUgd3JhdGggb2YgdGhlIGtpbmcgaGUgdHVybmVkIGJhY2sgYXQgQ2l0aGFlcm9uIGFuZCBhYmFuZG9uZWQgdGhlIGVtYmFzc3kuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjE2MSIgdmFsaWQ9InllcyI+QWVzY2hpbmVzLCA8dGl0bGU+T24gdGhlIENyb3duPC90aXRsZT4sIMKnICAxNjE8L2JpYmw+Ljwvbm90ZT4gVGhlbiBzdHJhaWdodHdheSBBbGV4YW5kZXIgc2VudCB0byBBdGhlbnMgYSBkZW1hbmQgZm9yIHRoZSBzdXJyZW5kZXIgdG8gaGltIG9mIHRlbiBvZiB0aGVpciBwb3B1bGFyIGxlYWRlcnMsIGFjY29yZGluZyB0byBJZG9tZW5ldXMgYW5kIER1cmlzLCBidXQgYWNjb3JkaW5nIHRvIHRoZSBtb3N0IGFuZCBtb3N0IHJlcHV0YWJsZSB3cml0ZXJzLCBvbmx5IGVpZ2h0LCBuYW1lbHksIERlbW9zdGhlbmVzLCBQb2x5ZXVjdHVzLCBFcGhpYWx0ZXMsIEx5Y3VyZ3VzLCBNb2Vyb2NsZXMsIERlbW9uLCBDYWxsaXN0aGVuZXMsIGFuZCBDaGFyaWRlbXVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNpdGllcyBvZiBHcmVlY2UsIHVuZGVyIHRoZSBpbml0aWF0aW9ucyBvZiBEZW1vc3RoZW5lcywgbm93IGZvcm1lZCB0aGVtc2VsdmVzIGludG8gYSBsZWFndWUgYWdhaW4uIFRoZSBUaGViYW5zLCB3aG9tIERlbW9zdGhlbmVzIGhhZCBoZWxwZWQgdG8gcHJvdmlkZSB3aXRoIGFybXMsIGZlbGwgdXBvbiB0aGVpciBNYWNlZG9uaWFuIGdhcnJpc29uIGFuZCBzbGV3IG1hbnkgb2YgdGhlbTsgd2hpbGUgdGhlIEF0aGVuaWFucyBtYWRlIHByZXBhcmF0aW9ucyB0byBnbyB0byB3YXIgYWxvbmcgd2l0aCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRlbW9zdGhlbmVzIHJlaWduZWQgc3VwcmVtZSBpbiB0aGUgYXNzZW1ibHksIGFuZCB3cm90ZSBsZXR0ZXJzIHRvIHRoZSBLaW5nJ3MgZ2VuZXJhbHMgaW4gQXNpYSBzdGlycmluZyB0aGVtIHVwIHRvIG1ha2Ugd2FyIHVwb24gQWxleGFuZGVyLCB3aG9tIGhlIGNhbGxlZCBhIGJveSBhbmQgYSBNYXJnaXRlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmkuZS4gPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lsbHkgTWFkbWFuPC9nbG9zcz4uIEEgbW9jayBoZXJvaWMgcG9lbSBiZWFyaW5nIHRoaXMgbmFtZSB3YXMgYXR0cmlidXRlZCB0byBIb21lci4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMTYwIiB2YWxpZD0ieWVzIj5BZXNjaGluZXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBDcm93bjwvdGl0bGU+IMKnIDE2MDwvYmlibD4uPC9ub3RlPiBXaGVuLCBob3dldmVyLCBBbGV4YW5kZXIgaGFkIHNldHRsZWQgdGhlIGFmZmFpcnMgb2YgaGlzIG93biBjb3VudHJ5IGFuZCBjYW1lIGluIHBlcnNvbiB3aXRoIGhpcyBmb3JjZXMgaW50byBCb2VvdGlhLCBwcm9uZSBsYXkgdGhlIGNvdXJhZ2Ugb2YgdGhlIEF0aGVuaWFucywgYW5kIERlbW9zdGhlbmVzIHdhcyBleHRpbmd1aXNoZWQsIHdoaWxlIHRoZSBUaGViYW5zLCBiZXRyYXllZCBieSB0aGVpciBhbGxpZXMsIGZvdWdodCBieSB0aGVtc2VsdmVzIGFuZCBsb3N0IHRoZWlyIGNpdHkuPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U2lsbHkgTWFkbWFuPC9nbG9zcz4uIEEgbW9jayBoZXJvaWMgcG9lbSBiZWFyaW5nIHRoaXMgbmFtZSB3YXMgYXR0cmlidXRlZCB0byBIb21lci4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFlc2NoaW4uIDMuMTYwIiB2YWxpZD0ieWVzIj5BZXNjaGluZXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uIHRoZSBDcm93bjwvdGl0bGU+IMKnIDE2MDwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4gwqcgMTYwPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBPY3RvYmVyLCAzMzUgQi5DLjwvbm90ZT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGluIHRoZSBtaWRzdCBvZiB0aGUgZ3JlYXQgY29uZnVzaW9uIHdoaWNoIHJlaWduZWQgYXQgQXRoZW5zLCBEZW1vc3RoZW5lcyB3YXMgY2hvc2VuIGFuZCBzZW50IHdpdGggb3RoZXJzIGFzIGFuIGFtYmFzc2Fkb3IgdG8gQWxleGFuZGVyLCBidXQgZmVhcmluZyB0aGUgd3JhdGggb2YgdGhlIGtpbmcgaGUgdHVybmVkIGJhY2sgYXQgQ2l0aGFlcm9uIGFuZCBhYmFuZG9uZWQgdGhlIGVtYmFzc3kuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMy4xNjEiIHZhbGlkPSJ5ZXMiPkFlc2NoaW5lcywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4sIMKnICAxNjE8L2JpYmw+Ljwvbm90ZT4gVGhlbiBzdHJhaWdodHdheSBBbGV4YW5kZXIgc2VudCB0byBBdGhlbnMgYSBkZW1hbmQgZm9yIHRoZSBzdXJyZW5kZXIgdG8gaGltIG9mIHRlbiBvZiB0aGVpciBwb3B1bGFyIGxlYWRlcnMsIGFjY29yZGluZyB0byBJZG9tZW5ldXMgYW5kIER1cmlzLCBidXQgYWNjb3JkaW5nIHRvIHRoZSBtb3N0IGFuZCBtb3N0IHJlcHV0YWJsZSB3cml0ZXJzLCBvbmx5IGVpZ2h0LCBuYW1lbHksIERlbW9zdGhlbmVzLCBQb2x5ZXVjdHVzLCBFcGhpYWx0ZXMsIEx5Y3VyZ3VzLCBNb2Vyb2NsZXMsIERlbW9uLCBDYWxsaXN0aGVuZXMsIGFuZCBDaGFyaWRlbXVzLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjE2MSIgdmFsaWQ9InllcyI+QWVzY2hpbmVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PbiB0aGUgQ3Jvd248L3RpdGxlPiwgwqcgIDE2MTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gdGhlIENyb3duPC90aXRsZT4sIMKnICAxNjE8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgb24gdGhpcyBvY2Nhc2lvbiB0aGF0IERlbW9zdGhlbmVzIHRvbGQgdGhlIEF0aGVuaWFucyB0aGUgc3Rvcnkgb2YgaG93IHRoZSBzaGVlcCBzdXJyZW5kZXJlZCB0aGVpciBkb2dzIHRvIHRoZSB3b2x2ZXMsIGNvbXBhcmluZyBoaW1zZWxmIGFuZCBoaXMgZmVsbG93LW9yYXRvcnMgdG8gZG9ncyBmaWdodGluZyBpbiBkZWZlbmNlIG9mIHRoZSBwZW9wbGUsIGFuZCBjYWxsaW5nIEFsZXhhbmRlciAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZSBNYWNlZG9uaWFuIGFyY2gtd29sZi48L3E+IE1vcmVvdmVyLCBoZSBzYWlkIGZ1cnRoZXI6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SnVzdCBhcyBncmFpbi1tZXJjaGFudHMgc2VsbCB0aGVpciB3aG9sZSBzdG9jayBieSBtZWFucyBvZiBhIGZldyBrZXJuZWxzIG9mIHdoZWF0IHdoaWNoIHRoZXkgY2FycnkgYWJvdXQgd2l0aCB0aGVtIGluIGEgYm93bCBhcyBhIHNhbXBsZSwgc28gaW4gc3VycmVuZGVyaW5nIHVzIHlvdSB1bndpdHRpbmdseSBzdXJyZW5kZXIgYWxzbyB5b3Vyc2VsdmVzLCBhbGwgb2YgeW91LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoLCB0aGVuLCBpcyB0aGUgYWNjb3VudCB3aGljaCBBcmlzdG9idWx1cyBvZiBDYXNzYW5kcmVpYSBoYXMgZ2l2ZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBvbiB0aGlzIG9jY2FzaW9uIHRoYXQgRGVtb3N0aGVuZXMgdG9sZCB0aGUgQXRoZW5pYW5zIHRoZSBzdG9yeSBvZiBob3cgdGhlIHNoZWVwIHN1cnJlbmRlcmVkIHRoZWlyIGRvZ3MgdG8gdGhlIHdvbHZlcywgY29tcGFyaW5nIGhpbXNlbGYgYW5kIGhpcyBmZWxsb3ctb3JhdG9ycyB0byBkb2dzIGZpZ2h0aW5nIGluIGRlZmVuY2Ugb2YgdGhlIHBlb3BsZSwgYW5kIGNhbGxpbmcgQWxleGFuZGVyIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgTWFjZWRvbmlhbiBhcmNoLXdvbGYuPC9xPiBNb3Jlb3ZlciwgaGUgc2FpZCBmdXJ0aGVyOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SnVzdCBhcyBncmFpbi1tZXJjaGFudHMgc2VsbCB0aGVpciB3aG9sZSBzdG9jayBieSBtZWFucyBvZiBhIGZldyBrZXJuZWxzIG9mIHdoZWF0IHdoaWNoIHRoZXkgY2FycnkgYWJvdXQgd2l0aCB0aGVtIGluIGEgYm93bCBhcyBhIHNhbXBsZSwgc28gaW4gc3VycmVuZGVyaW5nIHVzIHlvdSB1bndpdHRpbmdseSBzdXJyZW5kZXIgYWxzbyB5b3Vyc2VsdmVzLCBhbGwgb2YgeW91LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2gsIHRoZW4sIGlzIHRoZSBhY2NvdW50IHdoaWNoIEFyaXN0b2J1bHVzIG9mIENhc3NhbmRyZWlhIGhhcyBnaXZlbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgQXRoZW5pYW5zIHdlcmUgZGVsaWJlcmF0aW5nIG9uIHRoaXMgZGVtYW5kIGFuZCB3ZXJlIGF0IGEgbG9zcyBob3cgdG8gdHJlYXQgaXQsIHdoZW4gRGVtYWRlcywgZm9yIGZpdmUgdGFsZW50cyB3aGljaCBoZSBoYWQgcmVjZWl2ZWQgZnJvbSB0aGUgbWVuIGRlbWFuZGVkLCBhZ3JlZWQgdG8gZ28gb24gYW4gZW1iYXNzeSB0byB0aGUga2luZyBhbmQgZW50cmVhdCBoaW0gaW4gdGhlaXIgYmVoYWxmOyBlaXRoZXIgYmVjYXVzZSBoZSByZWxpZWQgb24gdGhlIGZyaWVuZHNoaXAgb2YgQWxleGFuZGVyLCBvciBiZWNhdXNlIGhlIGV4cGVjdGVkIHRvIGZpbmQgaGltIHNhdGVkLCBsaWtlIGEgbGlvbiBnbHV0dGVkIHdpdGggc2xhdWdodGVyLiBBdCBhbnkgcmF0ZSwgRGVtYWRlcyBwZXJzdWFkZWQgdGhlIGtpbmcgdG8gbGV0IHRoZSBtZW4gb2ZmLCBhbmQgcmVjb25jaWxlZCBoaW0gd2l0aCB0aGUgY2l0eS4KCQkJPC9wPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB3aGVuIEFsZXhhbmRlciB3ZW50IGJhY2sgdG8gTWFjZWRvbmlhLCBEZW1hZGVzIGFuZCBoaXMgYXNzb2NpYXRlcyB3ZXJlIGhpZ2ggaW4gcG93ZXIsIGJ1dCBEZW1vc3RoZW5lcyBhY3RlZCBhIGh1bWJsZSBwYXJ0LiBJdCBpcyB0cnVlIHRoYXQgd2hlbiBBZ2lzIHRoZSBTcGFydGFuIHdhcyBhY3RpdmUgaW4gcmV2b2x0IERlbW9zdGhlbmVzIG9uY2UgbW9yZSBtYWRlIGEgZmVlYmxlIGVmZm9ydCBpbiBoaXMgc3VwcG9ydCwgYnV0IHRoZW4gaGUgY293ZXJlZCBkb3duLCBzaW5jZSB0aGUgQXRoZW5pYW5zIHdvdWxkIG5vdCBqb2luIGluIHRoZSB1cHJpc2luZy4gQWdpcyBmZWxsIGluIGJhdHRsZSwgYW5kIHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIGNydXNoZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJvbSAzMzMgQi5DLiAzMzAgQi5DLiwgQWdpcyBJSUkuLCB0aGUga2luZyBvZiBTcGFydGEsIGNhcnJpZWQgb24gd2FyIGFnYWluc3QgTWFjZWRvbmlhIGluIGNvbmp1bmN0aW9uIHdpdGggUGVyc2lhLiBJbiB0aGUgbGF0dGVyIHllYXIgaGUgd2FzIGRlZmVhdGVkIGFuZCBzbGFpbiBieSBBbnRpcGF0ZXIsIEFsZXhhbmRlcidzIHJlZ2VudCBpbiBNYWNlZG9uaWEuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gd2hlbiBBbGV4YW5kZXIgd2VudCBiYWNrIHRvIE1hY2Vkb25pYSwgRGVtYWRlcyBhbmQgaGlzIGFzc29jaWF0ZXMgd2VyZSBoaWdoIGluIHBvd2VyLCBidXQgRGVtb3N0aGVuZXMgYWN0ZWQgYSBodW1ibGUgcGFydC4gSXQgaXMgdHJ1ZSB0aGF0IHdoZW4gQWdpcyB0aGUgU3BhcnRhbiB3YXMgYWN0aXZlIGluIHJldm9sdCBEZW1vc3RoZW5lcyBvbmNlIG1vcmUgbWFkZSBhIGZlZWJsZSBlZmZvcnQgaW4gaGlzIHN1cHBvcnQsIGJ1dCB0aGVuIGhlIGNvd2VyZWQgZG93biwgc2luY2UgdGhlIEF0aGVuaWFucyB3b3VsZCBub3Qgam9pbiBpbiB0aGUgdXByaXNpbmcuIEFnaXMgZmVsbCBpbiBiYXR0bGUsIGFuZCB0aGUgTGFjZWRhZW1vbmlhbnMgd2VyZSBjcnVzaGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJvbSAzMzMgQi5DLiAzMzAgQi5DLiwgQWdpcyBJSUkuLCB0aGUga2luZyBvZiBTcGFydGEsIGNhcnJpZWQgb24gd2FyIGFnYWluc3QgTWFjZWRvbmlhIGluIGNvbmp1bmN0aW9uIHdpdGggUGVyc2lhLiBJbiB0aGUgbGF0dGVyIHllYXIgaGUgd2FzIGRlZmVhdGVkIGFuZCBzbGFpbiBieSBBbnRpcGF0ZXIsIEFsZXhhbmRlcidzIHJlZ2VudCBpbiBNYWNlZG9uaWEuPC9ub3RlPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkl0IHdhcyBhdCB0aGlzIHRpbWUgdGhhdCB0aGUgaW5kaWN0bWVudCBhZ2FpbnN0IEN0ZXNpcGhvbiBpbiB0aGUgbWF0dGVyIG9mIHRoZSBjcm93biBjYW1lIG9uIGZvciB0cmlhbC4gSXQgaGFkIGJlZW4gcHJlcGFyZWQgaW4gdGhlIGFyY2hvbnNoaXAgb2YgQ2hhZXJvbmRhcyBhIGxpdHRsZSBiZWZvcmUgdGhlIGJhdHRsZSBvZiBDaGFlcm9uZWlhLCAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBjYW1lIG9uIGZvciB0cmlhbCB0ZW4geWVhcnMgbGF0ZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzMzYgQi5DLiwgQ3Rlc2lwaG9uIHByb3Bvc2VkIHRoYXQgRGVtb3N0aGVuZXMgcmVjZWl2ZSBhIGdvbGRlbiBjcm93biBmb3IgY2VydGFpbiBwdWJsaWMgc2VydmljZXMsIGFuZCBBZXNjaGluZXMgaW5kaWN0ZWQgQ3Rlc2lwaG9uIGZvciBwcm9wb3NpbmcgYW4gaWxsZWdhbCBtZWFzdXJlLiAgVGhlIGRvY3VtZW50ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAxOC41NCIgdmFsaWQ9InllcyI+RGVtb3MuIDx0aXRsZT5EZSBDb3IuPC90aXRsZT4gwqcgNTQpPC9iaWJsPiwgZnJvbSB3aGljaCBQbHV0YXJjaCB0YWtlcyB0aGUgbmFtZSBvZiBDaGFlcm9uZGFzLCB0aGUgYXJjaG9uIG9mIDMzOCwgaGFzIGJlZW4gc2hvd24gdG8gYmUgc3B1cmlvdXMuIFRoZSBjYXNlIHdhcyB0cmllZCBpbiAzMzAgQi5DLjwvbm90ZT4gaW4gdGhlIGFyY2hvbnNoaXAgb2YgQXJpc3RvcGhvbi4gSXQgYmVjYW1lIHRoZSBtb3N0IGNlbGVicmF0ZWQgb2YgYWxsIHB1YmxpYyBjYXVzZXMsIG5vdCBvbmx5IG9uIGFjY291bnQgb2YgdGhlIGZhbWUgb2YgdGhlIG9yYXRvcnMsIGJ1dCBhbHNvIGJlY2F1c2Ugb2YgdGhlIG5vYmxlIGNvbmR1Y3Qgb2YgdGhlIGp1ZGdlcywgd2hvLCB0aG91Z2ggdGhlIHByb3NlY3V0b3JzIG9mIERlbW9zdGhlbmVzIHdlcmUgdGhlbiBhdCB0aGUgaGVpZ2h0IG9mIHBvd2VyIGFuZCBhY3RpbmcgaW4gdGhlIGludGVyZXN0cyBvZiBNYWNlZG9uaWEsIHdvdWxkIG5vdCB2b3RlIGFnYWluc3QgaGltLCBidXQgYWNxdWl0dGVkIGhpbSBzbyBkZWNpc2l2ZWx5IHRoYXQgQWVzY2hpbmVzIGRpZCBub3QgZ2V0IGEgZmlmdGggcGFydCBvZiB0aGVpciBiYWxsb3RzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgbWFkZSBBZXNjaGluZXMgbGlhYmxlIHRvIGEgZmluZSBvZiAxLDAwMCBkcmFjaG1hcywgYW5kIG1hZGUgaXQgaW1wb3NzaWJsZSBmb3IgaGltIHRvIGJyaW5nIGFueSBmdXR1cmUgYWN0aW9uIGJlZm9yZSBhbiBBdGhlbmlhbiBjb3VydC48L25vdGU+IENvbnNlcXVlbnRseSwgQWVzY2hpbmVzIGZvcnNvb2sgdGhlIGNpdHkgYXQgb25jZSwgYW5kIHNwZW50IHRoZSByZXN0IG9mIGhpcyBsaWZlIGFzIGEgdGVhY2hlciBvZiByaGV0b3JpYyBpbiBSaG9kZXMgYW5kIElvbmlhLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBjYW1lIG9uIGZvciB0cmlhbCB0ZW4geWVhcnMgbGF0ZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDMzNiBCLkMuLCBDdGVzaXBob24gcHJvcG9zZWQgdGhhdCBEZW1vc3RoZW5lcyByZWNlaXZlIGEgZ29sZGVuIGNyb3duIGZvciBjZXJ0YWluIHB1YmxpYyBzZXJ2aWNlcywgYW5kIEFlc2NoaW5lcyBpbmRpY3RlZCBDdGVzaXBob24gZm9yIHByb3Bvc2luZyBhbiBpbGxlZ2FsIG1lYXN1cmUuICBUaGUgZG9jdW1lbnQgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguNTQiIHZhbGlkPSJ5ZXMiPkRlbW9zLiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBDb3IuPC90aXRsZT4gwqcgNTQpPC9iaWJsPiwgZnJvbSB3aGljaCBQbHV0YXJjaCB0YWtlcyB0aGUgbmFtZSBvZiBDaGFlcm9uZGFzLCB0aGUgYXJjaG9uIG9mIDMzOCwgaGFzIGJlZW4gc2hvd24gdG8gYmUgc3B1cmlvdXMuIFRoZSBjYXNlIHdhcyB0cmllZCBpbiAzMzAgQi5DLjwvbm90ZT4gaW4gdGhlIGFyY2hvbnNoaXAgb2YgQXJpc3RvcGhvbi4gSXQgYmVjYW1lIHRoZSBtb3N0IGNlbGVicmF0ZWQgb2YgYWxsIHB1YmxpYyBjYXVzZXMsIG5vdCBvbmx5IG9uIGFjY291bnQgb2YgdGhlIGZhbWUgb2YgdGhlIG9yYXRvcnMsIGJ1dCBhbHNvIGJlY2F1c2Ugb2YgdGhlIG5vYmxlIGNvbmR1Y3Qgb2YgdGhlIGp1ZGdlcywgd2hvLCB0aG91Z2ggdGhlIHByb3NlY3V0b3JzIG9mIERlbW9zdGhlbmVzIHdlcmUgdGhlbiBhdCB0aGUgaGVpZ2h0IG9mIHBvd2VyIGFuZCBhY3RpbmcgaW4gdGhlIGludGVyZXN0cyBvZiBNYWNlZG9uaWEsIHdvdWxkIG5vdCB2b3RlIGFnYWluc3QgaGltLCBidXQgYWNxdWl0dGVkIGhpbSBzbyBkZWNpc2l2ZWx5IHRoYXQgQWVzY2hpbmVzIGRpZCBub3QgZ2V0IGEgZmlmdGggcGFydCBvZiB0aGVpciBiYWxsb3RzLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTguNTQiIHZhbGlkPSJ5ZXMiPkRlbW9zLiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBDb3IuPC90aXRsZT4gwqcgNTQpPC9iaWJsPiwgZnJvbSB3aGljaCBQbHV0YXJjaCB0YWtlcyB0aGUgbmFtZSBvZiBDaGFlcm9uZGFzLCB0aGUgYXJjaG9uIG9mIDMzOCwgaGFzIGJlZW4gc2hvd24gdG8gYmUgc3B1cmlvdXMuIFRoZSBjYXNlIHdhcyB0cmllZCBpbiAzMzAgQi5DLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIENvci48L3RpdGxlPiDCpyA1NCk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgbWFkZSBBZXNjaGluZXMgbGlhYmxlIHRvIGEgZmluZSBvZiAxLDAwMCBkcmFjaG1hcywgYW5kIG1hZGUgaXQgaW1wb3NzaWJsZSBmb3IgaGltIHRvIGJyaW5nIGFueSBmdXR1cmUgYWN0aW9uIGJlZm9yZSBhbiBBdGhlbmlhbiBjb3VydC48L25vdGU+IENvbnNlcXVlbnRseSwgQWVzY2hpbmVzIGZvcnNvb2sgdGhlIGNpdHkgYXQgb25jZSwgYW5kIHNwZW50IHRoZSByZXN0IG9mIGhpcyBsaWZlIGFzIGEgdGVhY2hlciBvZiByaGV0b3JpYyBpbiBSaG9kZXMgYW5kIElvbmlhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgbG9uZyBhZnRlcndhcmRzIEhhcnBhbHVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWxleGFuZGVyJ3MgdHJlYXN1cmVyLiBIZSBjYW1lIHRvIEF0aGVucyBpbiAzMjQgQi5DLjwvbm90ZT4gY2FtZSBvdXQgb2YgQXNpYSB0byBBdGhlbnMuIEhlIGhhZCBydW4gYXdheSBmcm9tIEFsZXhhbmRlciwgYmVjYXVzZSBoZSB3YXMgY29uc2Npb3VzIHRoYXQgaGlzIHByb2RpZ2FsaXR5IGhhZCBsZWQgaGltIGludG8gY3JpbWluYWwgcHJhY3RpY2VzLCBhbmQgYmVjYXVzZSBoZSB3YXMgYWZyYWlkIG9mIGhpcyBtYXN0ZXIsIHdobyB3YXMgbm93IGJlY29tZSBoYXJzaCB0byBoaXMgZnJpZW5kcy4gQnV0IGFmdGVyIGhlIGhhZCB0YWtlbiByZWZ1Z2Ugd2l0aCB0aGUgQXRoZW5pYW4gcGVvcGxlIGFuZCBwdXQgaGltc2VsZiBpbiB0aGVpciBoYW5kcyB3aXRoIGhpcyBzaGlwcyBhbmQgaGlzIHRyZWFzdXJlcywgdGhlIG90aGVyIG9yYXRvcnMgYXQgb25jZSBmaXhlZCB0aGVpciBsb25naW5nIGV5ZXMgdXBvbiBoaXMgd2VhbHRoLCBjYW1lIHRvIGhpcyBhaWQsIGFuZCB0cmllZCB0byBwZXJzdWFkZSB0aGUgQXRoZW5pYW5zIHRvIHJlY2VpdmUgYW5kIHNhdmUgdGhlIHN1cHBsaWFudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERlbW9zdGhlbmVzLCBpbiB0aGUgYmVnaW5uaW5nLCBjb3Vuc2VsbGVkIHRoZW0gdG8gZHJpdmUgSGFycGFsdXMgYXdheSwgYW5kIHRvIGJld2FyZSBsZXN0IHRoZXkgcGx1bmdlIHRoZSBjaXR5IGludG8gd2FyIHVwb24gYW4gdW5uZWNlc3NhcnkgYW5kIHVuanVzdCBncm91bmQ7IGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcywgaG93ZXZlciwgd2hpbGUgdGhleSB3ZXJlIG1ha2luZyBhbiBpbnZlbnRvcnkgb2YgdGhlIHRyZWFzdXJlLCBIYXJwYWx1cyBzYXcgdGhhdCBEZW1vc3RoZW5lcyB3YXMgZXllaW5nIHdpdGggcGxlYXN1cmUgYSBjdXAgb2YgYmFyYmFyaWFuIG1ha2UsIHdpdGggYSBrZWVuIGFwcHJlY2lhdGlvbiBvZiBpdHMgZmFzaGlvbiBhbmQgb2YgdGhlIG9ybmFtZW50YWwgd29yayB1cG9uIGl0LiBIZSB0aGVyZWZvcmUgYmFkZSBoaW0gcG9pc2UgaXQgaW4gaGlzIGhhbmQgYW5kIHNlZSBob3cgaGVhdnkgdGhlIGdvbGQgd2FzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBEZW1vc3RoZW5lcyB3YXMgYW1hemVkIGF0IGl0cyB3ZWlnaHQgYW5kIGFza2VkIGhvdyBtdWNoIGl0IHdvdWxkIGFtb3VudCB0bywgSGFycGFsdXMgc21pbGVkIGFuZCBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciB5b3UgaXQgd2lsbCBhbW91bnQgdG8gdHdlbnR5IHRhbGVudHM7PC9xPiBhbmQgYXMgc29vbiBhcyBuaWdodCB3YXMgY29tZSBoZSBzZW50IGhpbSB0aGUgY3VwIHdpdGggdGhlIHR3ZW50eSB0YWxlbnRzLiBOb3csIEhhcnBhbHVzIHdhcyBza2lsZnVsIGluIGRldGVjdGluZyB0aGUgY2hhcmFjdGVyIG9mIGEgbWFuIHdobyBoYWQgYSBwYXNzaW9uIGZvciBnb2xkLCBieSBtZWFucyBvZiB0aGUgbG9vayB0aGF0IHNwcmVhZCBvdmVyIGhpcyBmYWNlIGFuZCB0aGUgZ2xhbmNlcyBvZiBoaXMgZXllcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIERlbW9zdGhlbmVzIGNvdWxkIG5vdCByZXNpc3QsIGJ1dCB3YXMgb3ZlcmNvbWUgYnkgdGhlIGJyaWJlLCBhbmQgbm93IHRoYXQgaGUgaGFkLCBhcyBpdCB3ZXJlLCBhZG1pdHRlZCBhIGdhcnJpc29uIGludG8gaGlzIGhvdXNlLCBwcm9tcHRseSB3ZW50IG92ZXIgdG8gdGhlIHNpZGUgb2YgSGFycGFsdXMuIE5leHQgZGF5LCBhZnRlciBzd2F0aGluZyBoaXMgbmVjayBjYXJlZnVsbHkgaW4gd29vbGxlbiBiYW5kYWdlcywgaGUgd2VudCBmb3J0aCBpbnRvIHRoZSBhc3NlbWJseTsgYW5kIHdoZW4gaGUgd2FzIHVyZ2VkIHRvIHJpc2UgYW5kIHNwZWFrLCBoZSBtYWRlIHNpZ25zIHRoYXQgaGlzIHZvaWNlIHdhcyBydWluZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aXRzLCBob3dldmVyLCBieSB3YXkgb2YgcmFpbGxlcnksIGRlY2xhcmVkIHRoYXQgdGhlIG9yYXRvciBoYWQgYmVlbiBzZWl6ZWQgb3Zlcm5pZ2h0LCBub3Qgd2l0aCBhbiBvcmRpbmFyeSBxdWluc3ksIGJ1dCB3aXRoIGEgc2lsdmVyIHF1aW5zeS4gQW5kIGFmdGVyd2FyZHMsIHdoZW4gdGhlIHdob2xlIHBlb3BsZSBsZWFybmVkIHRoYXQgaGUgaGFkIGJlZW4gYnJpYmVkLCBhbmQgd291bGQgbm90IHBlcm1pdCBoaW0sIHdoZW4gaGUgd2lzaGVkIGl0LCB0byBoYXZlIGEgaGVhcmluZyBhbmQgbWFrZSBoaXMgZGVmZW5jZSwgYnV0IHdlcmUgYW5ncnkgYW5kIHJhaXNlZCBhIHR1bXVsdCBhZ2FpbnN0IGhpbSwgc29tZW9uZSByb3NlIGFuZCBzYWlkIGpva2luZ2x5OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1lbiBvZiBBdGhlbnMsIHdpbGwgeW91IG5vdCBsaXN0ZW4gdG8gdGhlIG1hbiB3aG8gaG9sZHMgdGhlIGN1cD88L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IGZlYXN0cyB0aGUgY3VwIHBhc3NlZCBmcm9tIGd1ZXN0IHRvIGd1ZXN0LCBhbmQgdGhlIG9uZSB3aG8gaGVsZCBpdCBoYWQgdGhlIHJpZ2h0IG9mIHVuaW50ZXJydXB0ZWQgc3BlZWNoIG9yIHNvbmcuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IGxvbmcgYWZ0ZXJ3YXJkcyBIYXJwYWx1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWxleGFuZGVyJ3MgdHJlYXN1cmVyLiBIZSBjYW1lIHRvIEF0aGVucyBpbiAzMjQgQi5DLjwvbm90ZT4gY2FtZSBvdXQgb2YgQXNpYSB0byBBdGhlbnMuIEhlIGhhZCBydW4gYXdheSBmcm9tIEFsZXhhbmRlciwgYmVjYXVzZSBoZSB3YXMgY29uc2Npb3VzIHRoYXQgaGlzIHByb2RpZ2FsaXR5IGhhZCBsZWQgaGltIGludG8gY3JpbWluYWwgcHJhY3RpY2VzLCBhbmQgYmVjYXVzZSBoZSB3YXMgYWZyYWlkIG9mIGhpcyBtYXN0ZXIsIHdobyB3YXMgbm93IGJlY29tZSBoYXJzaCB0byBoaXMgZnJpZW5kcy4gQnV0IGFmdGVyIGhlIGhhZCB0YWtlbiByZWZ1Z2Ugd2l0aCB0aGUgQXRoZW5pYW4gcGVvcGxlIGFuZCBwdXQgaGltc2VsZiBpbiB0aGVpciBoYW5kcyB3aXRoIGhpcyBzaGlwcyBhbmQgaGlzIHRyZWFzdXJlcywgdGhlIG90aGVyIG9yYXRvcnMgYXQgb25jZSBmaXhlZCB0aGVpciBsb25naW5nIGV5ZXMgdXBvbiBoaXMgd2VhbHRoLCBjYW1lIHRvIGhpcyBhaWQsIGFuZCB0cmllZCB0byBwZXJzdWFkZSB0aGUgQXRoZW5pYW5zIHRvIHJlY2VpdmUgYW5kIHNhdmUgdGhlIHN1cHBsaWFudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBEZW1vc3RoZW5lcywgaW4gdGhlIGJlZ2lubmluZywgY291bnNlbGxlZCB0aGVtIHRvIGRyaXZlIEhhcnBhbHVzIGF3YXksIGFuZCB0byBiZXdhcmUgbGVzdCB0aGV5IHBsdW5nZSB0aGUgY2l0eSBpbnRvIHdhciB1cG9uIGFuIHVubmVjZXNzYXJ5IGFuZCB1bmp1c3QgZ3JvdW5kOyBhIGZldyBkYXlzIGFmdGVyd2FyZHMsIGhvd2V2ZXIsIHdoaWxlIHRoZXkgd2VyZSBtYWtpbmcgYW4gaW52ZW50b3J5IG9mIHRoZSB0cmVhc3VyZSwgSGFycGFsdXMgc2F3IHRoYXQgRGVtb3N0aGVuZXMgd2FzIGV5ZWluZyB3aXRoIHBsZWFzdXJlIGEgY3VwIG9mIGJhcmJhcmlhbiBtYWtlLCB3aXRoIGEga2VlbiBhcHByZWNpYXRpb24gb2YgaXRzIGZhc2hpb24gYW5kIG9mIHRoZSBvcm5hbWVudGFsIHdvcmsgdXBvbiBpdC4gSGUgdGhlcmVmb3JlIGJhZGUgaGltIHBvaXNlIGl0IGluIGhpcyBoYW5kIGFuZCBzZWUgaG93IGhlYXZ5IHRoZSBnb2xkIHdhcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIERlbW9zdGhlbmVzIHdhcyBhbWF6ZWQgYXQgaXRzIHdlaWdodCBhbmQgYXNrZWQgaG93IG11Y2ggaXQgd291bGQgYW1vdW50IHRvLCBIYXJwYWx1cyBzbWlsZWQgYW5kIHNhaWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgeW91IGl0IHdpbGwgYW1vdW50IHRvIHR3ZW50eSB0YWxlbnRzOzwvcT4gYW5kIGFzIHNvb24gYXMgbmlnaHQgd2FzIGNvbWUgaGUgc2VudCBoaW0gdGhlIGN1cCB3aXRoIHRoZSB0d2VudHkgdGFsZW50cy4gTm93LCBIYXJwYWx1cyB3YXMgc2tpbGZ1bCBpbiBkZXRlY3RpbmcgdGhlIGNoYXJhY3RlciBvZiBhIG1hbiB3aG8gaGFkIGEgcGFzc2lvbiBmb3IgZ29sZCwgYnkgbWVhbnMgb2YgdGhlIGxvb2sgdGhhdCBzcHJlYWQgb3ZlciBoaXMgZmFjZSBhbmQgdGhlIGdsYW5jZXMgb2YgaGlzIGV5ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBEZW1vc3RoZW5lcyBjb3VsZCBub3QgcmVzaXN0LCBidXQgd2FzIG92ZXJjb21lIGJ5IHRoZSBicmliZSwgYW5kIG5vdyB0aGF0IGhlIGhhZCwgYXMgaXQgd2VyZSwgYWRtaXR0ZWQgYSBnYXJyaXNvbiBpbnRvIGhpcyBob3VzZSwgcHJvbXB0bHkgd2VudCBvdmVyIHRvIHRoZSBzaWRlIG9mIEhhcnBhbHVzLiBOZXh0IGRheSwgYWZ0ZXIgc3dhdGhpbmcgaGlzIG5lY2sgY2FyZWZ1bGx5IGluIHdvb2xsZW4gYmFuZGFnZXMsIGhlIHdlbnQgZm9ydGggaW50byB0aGUgYXNzZW1ibHk7IGFuZCB3aGVuIGhlIHdhcyB1cmdlZCB0byByaXNlIGFuZCBzcGVhaywgaGUgbWFkZSBzaWducyB0aGF0IGhpcyB2b2ljZSB3YXMgcnVpbmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aXRzLCBob3dldmVyLCBieSB3YXkgb2YgcmFpbGxlcnksIGRlY2xhcmVkIHRoYXQgdGhlIG9yYXRvciBoYWQgYmVlbiBzZWl6ZWQgb3Zlcm5pZ2h0LCBub3Qgd2l0aCBhbiBvcmRpbmFyeSBxdWluc3ksIGJ1dCB3aXRoIGEgc2lsdmVyIHF1aW5zeS4gQW5kIGFmdGVyd2FyZHMsIHdoZW4gdGhlIHdob2xlIHBlb3BsZSBsZWFybmVkIHRoYXQgaGUgaGFkIGJlZW4gYnJpYmVkLCBhbmQgd291bGQgbm90IHBlcm1pdCBoaW0sIHdoZW4gaGUgd2lzaGVkIGl0LCB0byBoYXZlIGEgaGVhcmluZyBhbmQgbWFrZSBoaXMgZGVmZW5jZSwgYnV0IHdlcmUgYW5ncnkgYW5kIHJhaXNlZCBhIHR1bXVsdCBhZ2FpbnN0IGhpbSwgc29tZW9uZSByb3NlIGFuZCBzYWlkIGpva2luZ2x5OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWVuIG9mIEF0aGVucywgd2lsbCB5b3Ugbm90IGxpc3RlbiB0byB0aGUgbWFuIHdobyBob2xkcyB0aGUgY3VwPzwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBmZWFzdHMgdGhlIGN1cCBwYXNzZWQgZnJvbSBndWVzdCB0byBndWVzdCwgYW5kIHRoZSBvbmUgd2hvIGhlbGQgaXQgaGFkIHRoZSByaWdodCBvZiB1bmludGVycnVwdGVkIHNwZWVjaCBvciBzb25nLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhhdCB0aW1lLCB0aGVuLCB0aGV5IHNlbnQgSGFycGFsdXMgYXdheSBmcm9tIHRoZSBjaXR5LCBhbmQgZmVhcmluZyBsZXN0IHRoZXkgc2hvdWxkIGJlIGNhbGxlZCB0byBhY2NvdW50IGZvciB0aGUgbW9uZXlzIHdoaWNoIHRoZSBvcmF0b3JzIGhhZCBzZWl6ZWQsIHRoZXkgbWFkZSBhIHplYWxvdXMgc2VhcmNoIGZvciBpdCwgYW5kIHdlbnQgcm91bmQgdG8gdGhlaXIgaG91c2VzIG9uIHRoZSBxdWVzdCwgZXhjZXB0IHRoYXQgb2YgQ2FsbGljbGVzIHRoZSBzb24gb2YgQXJyaGVuaWRlcy4gRm9yIGhpcyBob3VzZSB3YXMgdGhlIG9ubHkgb25lIHdoaWNoIHRoZXkgd291bGQgbm90IGFsbG93IHRvIGJlIHNlYXJjaGVkLCBzaW5jZSBoZSB3YXMgbmV3bHkgbWFycmllZCBhbmQgaGlzIGJyaWRlIHdhcyB3aXRoaW4sIGFzIFRoZW9wb21wdXMgcmVsYXRlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSwgdGhlbiwgdGhleSBzZW50IEhhcnBhbHVzIGF3YXkgZnJvbSB0aGUgY2l0eSwgYW5kIGZlYXJpbmcgbGVzdCB0aGV5IHNob3VsZCBiZSBjYWxsZWQgdG8gYWNjb3VudCBmb3IgdGhlIG1vbmV5cyB3aGljaCB0aGUgb3JhdG9ycyBoYWQgc2VpemVkLCB0aGV5IG1hZGUgYSB6ZWFsb3VzIHNlYXJjaCBmb3IgaXQsIGFuZCB3ZW50IHJvdW5kIHRvIHRoZWlyIGhvdXNlcyBvbiB0aGUgcXVlc3QsIGV4Y2VwdCB0aGF0IG9mIENhbGxpY2xlcyB0aGUgc29uIG9mIEFycmhlbmlkZXMuIEZvciBoaXMgaG91c2Ugd2FzIHRoZSBvbmx5IG9uZSB3aGljaCB0aGV5IHdvdWxkIG5vdCBhbGxvdyB0byBiZSBzZWFyY2hlZCwgc2luY2UgaGUgd2FzIG5ld2x5IG1hcnJpZWQgYW5kIGhpcyBicmlkZSB3YXMgd2l0aGluLCBhcyBUaGVvcG9tcHVzIHJlbGF0ZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBEZW1vc3RoZW5lcyBwdXQgYSBib2xkIGZhY2Ugb24gdGhlIG1hdHRlciBhbmQgaW50cm9kdWNlZCBhIGJpbGwgcHJvdmlkaW5nIHRoYXQgdGhlIGNhc2Ugc2hvdWxkIGJlIHJlZmVycmVkIGZvciBpbnZlc3RpZ2F0aW9uIHRvIHRoZSBjb3VuY2lsIG9mIHRoZSBBcmVpb3BhZ3VzLCBhbmQgdGhhdCB0aG9zZSBzaG91bGQgYmUgYnJvdWdodCB0byB0cmlhbCB3aG8gd2VyZSBmb3VuZCBndWlsdHkgdGhlcmUuIEhlIHdhcyBoaW1zZWxmLCBob3dldmVyLCBhbW9uZyB0aGUgZmlyc3QgY29uZGVtbmVkIGJ5IHRoZSBjb3VuY2lsLCBhbmQgY2FtZSBiZWZvcmUgdGhlIGNvdXJ0IGZvciB0cmlhbCwgd2hlcmUgaGUgd2FzIHNlbnRlbmNlZCB0byBhIGZpbmUgb2YgZmlmdHkgdGFsZW50cyBhbmQgZGVsaXZlcmVkIG92ZXIgdG8gcHJpc29uIGluIGRlZmF1bHQgb2YgcGF5bWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG91dCBvZiBzaGFtZSBhdCB0aGUgY2hhcmdlIHVuZGVyIHdoaWNoIGhlIGxheSwgYXMgaGUgc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc2Vjb25kIG9mIHRoZSBsZXR0ZXJzIHdoaWNoIGhhdmUgY29tZSBkb3duIHRvIHVzIHVuZGVyIGhpcyBuYW1lLCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiBMLiAyLjE3IiB2YWxpZD0ieWVzIj7CpyAxNzwvYmlibD4uPC9ub3RlPiBhbmQgb3dpbmcgdG8gdGhlIHdlYWtuZXNzIG9mIGhpcyBib2R5LCB3aGljaCBjb3VsZCBub3QgZW5kdXJlIGNvbmZpbmVtZW50LCBoZSByYW4gYXdheSwgdGhyb3VnaCB0aGUgY2FyZWxlc3NuZXNzIG9mIHNvbWUgb2YgaGlzIGtlZXBlcnMgYW5kIHRoZSBjb25uaXZhbmNlIG9mIG90aGVycy4gQXQgYW55IHJhdGUsIHdlIGFyZSB0b2xkIHRoYXQgd2hlbiBoZSB3YXMgaW4gZmxpZ2h0IGF0IGEgc2hvcnQgZGlzdGFuY2UgZnJvbSB0aGUgY2l0eSwgaGUgbGVhcm5lZCB0aGF0IHNvbWUgb2YgdGhlIGNpdGl6ZW5zIHdobyB3ZXJlIGhpcyBlbmVtaWVzIHdlcmUgaW4gcHVyc3VpdCBvZiBoaW0sIGFuZCB0aGVyZWZvcmUgd2lzaGVkIHRvIGhpZGUgaGltc2VsZjsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gdGhleSBjYWxsZWQgdXBvbiBoaW0gbG91ZGx5IGJ5IG5hbWUsIGFuZCBjYW1lIHVwIG5lYXIgdG8gaGltLCBhbmQgYmVnZ2VkIGhpbSB0byBhY2NlcHQgZnJvbSB0aGVtIHByb3Zpc2lvbiBmb3IgaGlzIGpvdXJuZXksIGRlY2xhcmluZyB0aGF0IHRoZXkgd2VyZSBicmluZ2luZyBtb25leSBmcm9tIGhvbWUgZm9yIHRoaXMgdmVyeSBwdXJwb3NlLCBhbmQgd2VyZSBwdXJzdWluZyBoaW0gb25seSBpbiBvcmRlciB0byBnZXQgaXQgdG8gaGltOyBhbmQgd2hlbiBhdCB0aGUgc2FtZSB0aW1lIHRoZXkgZXhob3J0ZWQgaGltIHRvIGJlIG9mIGdvb2QgY291cmFnZSBhbmQgbm90IHRvIGJlIHBhaW5lZCBhdCB3aGF0IGhhZCBoYXBwZW5lZCwgRGVtb3N0aGVuZXMgYnJva2Ugb3V0IGFsbCB0aGUgbW9yZSBpbnRvIGNyaWVzIG9mIGdyaWVmLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3VyZWx5IEkgbXVzdCBiZSBkaXN0cmVzc2VkIHRvIGxlYXZlIGEgY2l0eSB3aGVyZSBteSBlbmVtaWVzIGFyZSBhcyBnZW5lcm91cyBhcyBJIGNhbiBoYXJkbHkgZmluZCBmcmllbmRzIHRvIGJlIGluIGFub3RoZXIuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERlbW9zdGhlbmVzIHB1dCBhIGJvbGQgZmFjZSBvbiB0aGUgbWF0dGVyIGFuZCBpbnRyb2R1Y2VkIGEgYmlsbCBwcm92aWRpbmcgdGhhdCB0aGUgY2FzZSBzaG91bGQgYmUgcmVmZXJyZWQgZm9yIGludmVzdGlnYXRpb24gdG8gdGhlIGNvdW5jaWwgb2YgdGhlIEFyZWlvcGFndXMsIGFuZCB0aGF0IHRob3NlIHNob3VsZCBiZSBicm91Z2h0IHRvIHRyaWFsIHdobyB3ZXJlIGZvdW5kIGd1aWx0eSB0aGVyZS4gSGUgd2FzIGhpbXNlbGYsIGhvd2V2ZXIsIGFtb25nIHRoZSBmaXJzdCBjb25kZW1uZWQgYnkgdGhlIGNvdW5jaWwsIGFuZCBjYW1lIGJlZm9yZSB0aGUgY291cnQgZm9yIHRyaWFsLCB3aGVyZSBoZSB3YXMgc2VudGVuY2VkIHRvIGEgZmluZSBvZiBmaWZ0eSB0YWxlbnRzIGFuZCBkZWxpdmVyZWQgb3ZlciB0byBwcmlzb24gaW4gZGVmYXVsdCBvZiBwYXltZW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvdXQgb2Ygc2hhbWUgYXQgdGhlIGNoYXJnZSB1bmRlciB3aGljaCBoZSBsYXksIGFzIGhlIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgc2Vjb25kIG9mIHRoZSBsZXR0ZXJzIHdoaWNoIGhhdmUgY29tZSBkb3duIHRvIHVzIHVuZGVyIGhpcyBuYW1lLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIEwuIDIuMTciIHZhbGlkPSJ5ZXMiPsKnIDE3PC9iaWJsPi48L25vdGU+IGFuZCBvd2luZyB0byB0aGUgd2Vha25lc3Mgb2YgaGlzIGJvZHksIHdoaWNoIGNvdWxkIG5vdCBlbmR1cmUgY29uZmluZW1lbnQsIGhlIHJhbiBhd2F5LCB0aHJvdWdoIHRoZSBjYXJlbGVzc25lc3Mgb2Ygc29tZSBvZiBoaXMga2VlcGVycyBhbmQgdGhlIGNvbm5pdmFuY2Ugb2Ygb3RoZXJzLiBBdCBhbnkgcmF0ZSwgd2UgYXJlIHRvbGQgdGhhdCB3aGVuIGhlIHdhcyBpbiBmbGlnaHQgYXQgYSBzaG9ydCBkaXN0YW5jZSBmcm9tIHRoZSBjaXR5LCBoZSBsZWFybmVkIHRoYXQgc29tZSBvZiB0aGUgY2l0aXplbnMgd2hvIHdlcmUgaGlzIGVuZW1pZXMgd2VyZSBpbiBwdXJzdWl0IG9mIGhpbSwgYW5kIHRoZXJlZm9yZSB3aXNoZWQgdG8gaGlkZSBoaW1zZWxmOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gTC4gMi4xNyIgdmFsaWQ9InllcyI+wqcgMTc8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIHRoZXkgY2FsbGVkIHVwb24gaGltIGxvdWRseSBieSBuYW1lLCBhbmQgY2FtZSB1cCBuZWFyIHRvIGhpbSwgYW5kIGJlZ2dlZCBoaW0gdG8gYWNjZXB0IGZyb20gdGhlbSBwcm92aXNpb24gZm9yIGhpcyBqb3VybmV5LCBkZWNsYXJpbmcgdGhhdCB0aGV5IHdlcmUgYnJpbmdpbmcgbW9uZXkgZnJvbSBob21lIGZvciB0aGlzIHZlcnkgcHVycG9zZSwgYW5kIHdlcmUgcHVyc3VpbmcgaGltIG9ubHkgaW4gb3JkZXIgdG8gZ2V0IGl0IHRvIGhpbTsgYW5kIHdoZW4gYXQgdGhlIHNhbWUgdGltZSB0aGV5IGV4aG9ydGVkIGhpbSB0byBiZSBvZiBnb29kIGNvdXJhZ2UgYW5kIG5vdCB0byBiZSBwYWluZWQgYXQgd2hhdCBoYWQgaGFwcGVuZWQsIERlbW9zdGhlbmVzIGJyb2tlIG91dCBhbGwgdGhlIG1vcmUgaW50byBjcmllcyBvZiBncmllZiwgc2F5aW5nOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3VyZWx5IEkgbXVzdCBiZSBkaXN0cmVzc2VkIHRvIGxlYXZlIGEgY2l0eSB3aGVyZSBteSBlbmVtaWVzIGFyZSBhcyBnZW5lcm91cyBhcyBJIGNhbiBoYXJkbHkgZmluZCBmcmllbmRzIHRvIGJlIGluIGFub3RoZXIuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgYm9yZSBoaXMgZXhpbGUgd2l0aG91dCBmb3J0aXR1ZGUsIHRha2luZyB1cCBoaXMgcXVhcnRlcnMgaW4gQWVnaW5hIGFuZCBUcm9lemVuIGZvciB0aGUgbW9zdCBwYXJ0LCBhbmQgbG9va2luZyBvZmYgdG93YXJkcyBBdHRpY2Egd2l0aCB0ZWFycyBpbiBoaXMgZXllcywgc28gdGhhdCB1dHRlcmFuY2VzIG9mIGhpcyBhcmUgb24gcmVjb3JkIHdoaWNoIGFyZSBub3QgZ2VuZXJvdXMgb3IgY29uc29uYW50IHdpdGggaGlzIHNwaXJpdGVkIGVmZm9ydHMgYXMgYSBzdGF0ZXNtYW4uIFdlIGFyZSB0b2xkLCBuYW1lbHksIHRoYXQgYXMgaGUgd2FzIGxlYXZpbmcgdGhlIGNpdHkgaGUgbGlmdGVkIHVwIGhpcyBoYW5kcyB0b3dhcmRzIHRoZSBhY3JvcG9saXMgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBwb3RlbnQgR3VhcmRpYW4gb2YgdGhlIENpdHksIEF0aGVuYSwgaG93LCBwcmF5LCBjYW5zdCB0aG91IHRha2UgZGVsaWdodCBpbiB0aG9zZSB0aHJlZSBtb3N0IGludHJhY3RhYmxlIGJlYXN0cywgdGhlIG93bCwgdGhlIHNlcnBlbnQsIGFuZCB0aGUgcGVvcGxlPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hlbiB5b3VuZyBtZW4gY2FtZSB0byB2aXNpdCBhbmQgY29udmVyc2Ugd2l0aCBoaW0sIGhlIHdvdWxkIHRyeSB0byBkZXRlciB0aGVtIGZyb20gcHVibGljIGxpZmUsIHNheWluZyB0aGF0IGlmIHR3byByb2FkcyBoYWQgYmVlbiBwcmVzZW50ZWQgdG8gaGltIGluIHRoZSBiZWdpbm5pbmcsIG9uZSBsZWFkaW5nIHRvIHRoZSBiZW1hIGFuZCB0aGUgYXNzZW1ibHksIGFuZCB0aGUgb3RoZXIgc3RyYWlnaHQgdG8gZGVzdHJ1Y3Rpb24sIGFuZCBpZiBoZSBjb3VsZCBoYXZlIGtub3duIGJlZm9yZWhhbmQgdGhlIGV2aWxzIGF0dGVuZGFudCBvbiBhIHB1YmxpYyBjYXJlZXIsIG5hbWVseSwgZmVhcnMsIGhhdHJlZHMsIGNhbHVtbmllcyBhbmQgY29udGVudGlvbnMsIGhlIHdvdWxkIGhhdmUgdGFrZW4gdGhhdCByb2FkIHdoaWNoIGxlZCBkaXJlY3RseSB0byBkZWF0aC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBib3JlIGhpcyBleGlsZSB3aXRob3V0IGZvcnRpdHVkZSwgdGFraW5nIHVwIGhpcyBxdWFydGVycyBpbiBBZWdpbmEgYW5kIFRyb2V6ZW4gZm9yIHRoZSBtb3N0IHBhcnQsIGFuZCBsb29raW5nIG9mZiB0b3dhcmRzIEF0dGljYSB3aXRoIHRlYXJzIGluIGhpcyBleWVzLCBzbyB0aGF0IHV0dGVyYW5jZXMgb2YgaGlzIGFyZSBvbiByZWNvcmQgd2hpY2ggYXJlIG5vdCBnZW5lcm91cyBvciBjb25zb25hbnQgd2l0aCBoaXMgc3Bpcml0ZWQgZWZmb3J0cyBhcyBhIHN0YXRlc21hbi4gV2UgYXJlIHRvbGQsIG5hbWVseSwgdGhhdCBhcyBoZSB3YXMgbGVhdmluZyB0aGUgY2l0eSBoZSBsaWZ0ZWQgdXAgaGlzIGhhbmRzIHRvd2FyZHMgdGhlIGFjcm9wb2xpcyBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gcG90ZW50IEd1YXJkaWFuIG9mIHRoZSBDaXR5LCBBdGhlbmEsIGhvdywgcHJheSwgY2Fuc3QgdGhvdSB0YWtlIGRlbGlnaHQgaW4gdGhvc2UgdGhyZWUgbW9zdCBpbnRyYWN0YWJsZSBiZWFzdHMsIHRoZSBvd2wsIHRoZSBzZXJwZW50LCBhbmQgdGhlIHBlb3BsZT88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIHlvdW5nIG1lbiBjYW1lIHRvIHZpc2l0IGFuZCBjb252ZXJzZSB3aXRoIGhpbSwgaGUgd291bGQgdHJ5IHRvIGRldGVyIHRoZW0gZnJvbSBwdWJsaWMgbGlmZSwgc2F5aW5nIHRoYXQgaWYgdHdvIHJvYWRzIGhhZCBiZWVuIHByZXNlbnRlZCB0byBoaW0gaW4gdGhlIGJlZ2lubmluZywgb25lIGxlYWRpbmcgdG8gdGhlIGJlbWEgYW5kIHRoZSBhc3NlbWJseSwgYW5kIHRoZSBvdGhlciBzdHJhaWdodCB0byBkZXN0cnVjdGlvbiwgYW5kIGlmIGhlIGNvdWxkIGhhdmUga25vd24gYmVmb3JlaGFuZCB0aGUgZXZpbHMgYXR0ZW5kYW50IG9uIGEgcHVibGljIGNhcmVlciwgbmFtZWx5LCBmZWFycywgaGF0cmVkcywgY2FsdW1uaWVzIGFuZCBjb250ZW50aW9ucywgaGUgd291bGQgaGF2ZSB0YWtlbiB0aGF0IHJvYWQgd2hpY2ggbGVkIGRpcmVjdGx5IHRvIGRlYXRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hpbGUgaGUgd2FzIHN0aWxsIHVuZGVyZ29pbmcgdGhlIGV4aWxlIG9mIHdoaWNoIEkgaGF2ZSBzcG9rZW4sIEFsZXhhbmRlciBkaWVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IEJhYnlsb24sIGluIE1heSwgMzIzIEIuQy48L25vdGU+IGFuZCB0aGUgR3JlZWsgc3RhdGVzIHByb2NlZWRlZCB0byBmb3JtIGEgbGVhZ3VlIGFnYWluLCB3aGlsZSBMZW9zdGhlbmVzIHdhcyBkaXNwbGF5aW5nIGRlZWRzIG9mIHZhbG91ciBhbmQgd2FsbGluZyBBbnRpcGF0ZXIgdXAgaW4gTGFtaWEsIHdoZXJlIGhlIGhlbGQgaGltIGluIHNpZWdlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIG9yYXRvcnMgUHl0aGVhcyBhbmQgQ2FsbGltZWRvbiAoY2FsbGVkIHRoZSBTdGFnLWJlZXRsZSkgZmxlZCBmcm9tIEF0aGVucyBhbmQgam9pbmVkIHRoZSBwYXJ0eSBvZiBBbnRpcGF0ZXIsIGFuZCB0cmF2ZWxsaW5nIGFib3V0IHdpdGggdGhlIHJlZ2VudCdzIGZyaWVuZHMgYW5kIGFtYmFzc2Fkb3JzIHRyaWVkIHRvIHByZXZlbnQgdGhlIEdyZWVrcyBmcm9tIHJldm9sdGluZyBvciBhdHRhY2hpbmcgdGhlbXNlbHZlcyB0byBBdGhlbnM7IGJ1dCBEZW1vc3RoZW5lcywgam9pbmluZyBoaW1zZWxmIHRvIHRoZSBhbWJhc3NhZG9ycyBmcm9tIEF0aGVucywgdXNlZCBoaXMgdXRtb3N0IGVmZm9ydHMgaW4gaGVscGluZyB0aGVtIHRvIGluZHVjZSB0aGUgY2l0aWVzIHRvIHVuaXRlIGluIGF0dGFja2luZyB0aGUgTWFjZWRvbmlhbnMgYW5kIGV4cGVsbGluZyB0aGVtIGZyb20gR3JlZWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgUGh5bGFyY2h1cyBzdGF0ZXMgdGhhdCBpbiBBcmNhZGlhIFB5dGhlYXMgYW5kIERlbW9zdGhlbmVzIGFjdHVhbGx5IGZlbGwgdG8gYWJ1c2luZyBvbmUgYW5vdGhlciBpbiBhbiBhc3NlbWJseSwgdGhlIG9uZSBzcGVha2luZyBpbiBiZWhhbGYgb2YgdGhlIE1hY2Vkb25pYW5zLCB0aGUgb3RoZXIgaW4gYmVoYWxmIG9mIHRoZSBHcmVla3MuIFB5dGhlYXMsIHdlIGFyZSB0b2xkLCBzYWlkIHRoYXQganVzdCBhcyB3ZSB0aGluayB0aGF0IGEgaG91c2UgaW50byB3aGljaCBhc3NlcyBtaWxrIGlzIGJyb3VnaHQgbXVzdCBjZXJ0YWlubHkgaGF2ZSBzb21lIGV2aWwgaW4gaXQsIHNvIGFsc28gYSBjaXR5IG11c3Qgb2YgbmVjZXNzaXR5IGJlIGRpc2Vhc2VkIGludG8gd2hpY2ggYW4gQXRoZW5pYW4gZW1iYXNzeSBjb21lczsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+d2hlcmV1cG9uIERlbW9zdGhlbmVzIHR1cm5lZCB0aGUgaWxsdXN0cmF0aW9uIGFnYWluc3QgaGltIGJ5IHNheWluZyB0aGF0IGFzc2VzJyBtaWxrIHdhcyBnaXZlbiB0byByZXN0b3JlIGhlYWx0aCwgYW5kIHRoZSBBdGhlbmlhbnMgY2FtZSB0byBicmluZyBzYWx2YXRpb24gdG8gdGhlIHNpY2suCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIGhlIHdhcyBzdGlsbCB1bmRlcmdvaW5nIHRoZSBleGlsZSBvZiB3aGljaCBJIGhhdmUgc3Bva2VuLCBBbGV4YW5kZXIgZGllZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IEJhYnlsb24sIGluIE1heSwgMzIzIEIuQy48L25vdGU+IGFuZCB0aGUgR3JlZWsgc3RhdGVzIHByb2NlZWRlZCB0byBmb3JtIGEgbGVhZ3VlIGFnYWluLCB3aGlsZSBMZW9zdGhlbmVzIHdhcyBkaXNwbGF5aW5nIGRlZWRzIG9mIHZhbG91ciBhbmQgd2FsbGluZyBBbnRpcGF0ZXIgdXAgaW4gTGFtaWEsIHdoZXJlIGhlIGhlbGQgaGltIGluIHNpZWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgb3JhdG9ycyBQeXRoZWFzIGFuZCBDYWxsaW1lZG9uIChjYWxsZWQgdGhlIFN0YWctYmVldGxlKSBmbGVkIGZyb20gQXRoZW5zIGFuZCBqb2luZWQgdGhlIHBhcnR5IG9mIEFudGlwYXRlciwgYW5kIHRyYXZlbGxpbmcgYWJvdXQgd2l0aCB0aGUgcmVnZW50J3MgZnJpZW5kcyBhbmQgYW1iYXNzYWRvcnMgdHJpZWQgdG8gcHJldmVudCB0aGUgR3JlZWtzIGZyb20gcmV2b2x0aW5nIG9yIGF0dGFjaGluZyB0aGVtc2VsdmVzIHRvIEF0aGVuczsgYnV0IERlbW9zdGhlbmVzLCBqb2luaW5nIGhpbXNlbGYgdG8gdGhlIGFtYmFzc2Fkb3JzIGZyb20gQXRoZW5zLCB1c2VkIGhpcyB1dG1vc3QgZWZmb3J0cyBpbiBoZWxwaW5nIHRoZW0gdG8gaW5kdWNlIHRoZSBjaXRpZXMgdG8gdW5pdGUgaW4gYXR0YWNraW5nIHRoZSBNYWNlZG9uaWFucyBhbmQgZXhwZWxsaW5nIHRoZW0gZnJvbSBHcmVlY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBQaHlsYXJjaHVzIHN0YXRlcyB0aGF0IGluIEFyY2FkaWEgUHl0aGVhcyBhbmQgRGVtb3N0aGVuZXMgYWN0dWFsbHkgZmVsbCB0byBhYnVzaW5nIG9uZSBhbm90aGVyIGluIGFuIGFzc2VtYmx5LCB0aGUgb25lIHNwZWFraW5nIGluIGJlaGFsZiBvZiB0aGUgTWFjZWRvbmlhbnMsIHRoZSBvdGhlciBpbiBiZWhhbGYgb2YgdGhlIEdyZWVrcy4gUHl0aGVhcywgd2UgYXJlIHRvbGQsIHNhaWQgdGhhdCBqdXN0IGFzIHdlIHRoaW5rIHRoYXQgYSBob3VzZSBpbnRvIHdoaWNoIGFzc2VzIG1pbGsgaXMgYnJvdWdodCBtdXN0IGNlcnRhaW5seSBoYXZlIHNvbWUgZXZpbCBpbiBpdCwgc28gYWxzbyBhIGNpdHkgbXVzdCBvZiBuZWNlc3NpdHkgYmUgZGlzZWFzZWQgaW50byB3aGljaCBhbiBBdGhlbmlhbiBlbWJhc3N5IGNvbWVzOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoZXJldXBvbiBEZW1vc3RoZW5lcyB0dXJuZWQgdGhlIGlsbHVzdHJhdGlvbiBhZ2FpbnN0IGhpbSBieSBzYXlpbmcgdGhhdCBhc3NlcycgbWlsayB3YXMgZ2l2ZW4gdG8gcmVzdG9yZSBoZWFsdGgsIGFuZCB0aGUgQXRoZW5pYW5zIGNhbWUgdG8gYnJpbmcgc2FsdmF0aW9uIHRvIHRoZSBzaWNrLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkF0IHRoaXMgY29uZHVjdCB0aGUgQXRoZW5pYW4gcGVvcGxlIHdlcmUgZGVsaWdodGVkLCBhbmQgdm90ZWQgdGhhdCBEZW1vc3RoZW5lcyBtaWdodCByZXR1cm4gZnJvbSBleGlsZS4gVGhlIGRlY3JlZSB3YXMgYnJvdWdodCBpbiBieSBEZW1vbiBvZiBQYWVhbmlhLCB3aG8gd2FzIGEgY291c2luIG9mIERlbW9zdGhlbmVzOyBhbmQgYSB0cmlyZW1lIHdhcyBzZW50IHRvIEFlZ2luYSB0byBmZXRjaCBoaW0gaG9tZS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIHNldCBvdXQgdG8gZ28gdXAgdG8gdGhlIGNpdHkgZnJvbSBQaXJhZXVzLCBub3QgYW4gYXJjaG9uIG9yIGEgcHJpZXN0IHdhcyBtaXNzaW5nLCBhbmQgYWxsIHRoZSByZXN0IG9mIHRoZSBwZW9wbGUgYWxzbyBtZXQgaGltIGluIGEgYm9keSBhbmQgd2VsY29tZWQgaGltIGVhZ2VybHkuIEl0IHdhcyBhdCB0aGlzIHRpbWUsIHRvbywgYXMgRGVtZXRyaXVzIHRoZSBNYWduZXNpYW4gc2F5cywgdGhhdCBoZSBsaWZ0ZWQgaGlzIGhhbmRzIHRvd2FyZHMgaGVhdmVuIGFuZCBibGVzc2VkIGhpbXNlbGYgZm9yIHRoYXQgZGF5LCBzaW5jZSBoZSB3YXMgY29taW5nIGhvbWUgZnJvbSBleGlsZSBtb3JlIGhvbm91cmFibHkgdGhhbiBBbGNpYmlhZGVzIGRpZDsgZm9yIGhlIGhhZCBwZXJzdWFkZWQsIG5vdCBmb3JjZWQsIGhpcyBmZWxsb3ctY2l0aXplbnMgdG8gd2VsY29tZSBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHRydWUgdGhhdCBoaXMgcGVjdW5pYXJ5IGZpbmUgcmVtYWluZWQgc3RhbmRpbmcgYWdhaW5zdCBoaW0gKGZvciBpdCB3YXMgbm90IGxhd2Z1bCB0byByZW1pdCBhbiBhc3Nlc3NtZW50IGJ5IGFjdCBvZiBncmFjZSksIGJ1dCB0aGV5IGZvdW5kIGEgZGV2aWNlIHRvIGV2YWRlIHRoZSBsYXcuIEl0IHdhcyB0aGVpciBjdXN0b20sIG5hbWVseSwgaW4gdGhlIGNhc2Ugb2YgYSBzYWNyaWZpY2UgdG8gWmV1cyB0aGUgU2F2aW91ciwgdG8gcGF5IGEgc3VtIG9mIG1vbmV5IHRvIHRob3NlIHdobyBwcmVwYXJlZCBhbmQgYWRvcm5lZCB0aGUgYWx0YXIsIGFuZCB0aGV5IG5vdyBnYXZlIERlbW9zdGhlbmVzIHRoZSBjb250cmFjdCB0byBtYWtlIHRoZXNlIHByZXBhcmF0aW9ucyBmb3IgZmlmdHkgdGFsZW50cywgd2hpY2ggd2FzIGp1c3QgdGhlIGFtb3VudCBvZiBoaXMgYXNzZXNzbWVudC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgc2V0IG91dCB0byBnbyB1cCB0byB0aGUgY2l0eSBmcm9tIFBpcmFldXMsIG5vdCBhbiBhcmNob24gb3IgYSBwcmllc3Qgd2FzIG1pc3NpbmcsIGFuZCBhbGwgdGhlIHJlc3Qgb2YgdGhlIHBlb3BsZSBhbHNvIG1ldCBoaW0gaW4gYSBib2R5IGFuZCB3ZWxjb21lZCBoaW0gZWFnZXJseS4gSXQgd2FzIGF0IHRoaXMgdGltZSwgdG9vLCBhcyBEZW1ldHJpdXMgdGhlIE1hZ25lc2lhbiBzYXlzLCB0aGF0IGhlIGxpZnRlZCBoaXMgaGFuZHMgdG93YXJkcyBoZWF2ZW4gYW5kIGJsZXNzZWQgaGltc2VsZiBmb3IgdGhhdCBkYXksIHNpbmNlIGhlIHdhcyBjb21pbmcgaG9tZSBmcm9tIGV4aWxlIG1vcmUgaG9ub3VyYWJseSB0aGFuIEFsY2liaWFkZXMgZGlkOyBmb3IgaGUgaGFkIHBlcnN1YWRlZCwgbm90IGZvcmNlZCwgaGlzIGZlbGxvdy1jaXRpemVucyB0byB3ZWxjb21lIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHRydWUgdGhhdCBoaXMgcGVjdW5pYXJ5IGZpbmUgcmVtYWluZWQgc3RhbmRpbmcgYWdhaW5zdCBoaW0gKGZvciBpdCB3YXMgbm90IGxhd2Z1bCB0byByZW1pdCBhbiBhc3Nlc3NtZW50IGJ5IGFjdCBvZiBncmFjZSksIGJ1dCB0aGV5IGZvdW5kIGEgZGV2aWNlIHRvIGV2YWRlIHRoZSBsYXcuIEl0IHdhcyB0aGVpciBjdXN0b20sIG5hbWVseSwgaW4gdGhlIGNhc2Ugb2YgYSBzYWNyaWZpY2UgdG8gWmV1cyB0aGUgU2F2aW91ciwgdG8gcGF5IGEgc3VtIG9mIG1vbmV5IHRvIHRob3NlIHdobyBwcmVwYXJlZCBhbmQgYWRvcm5lZCB0aGUgYWx0YXIsIGFuZCB0aGV5IG5vdyBnYXZlIERlbW9zdGhlbmVzIHRoZSBjb250cmFjdCB0byBtYWtlIHRoZXNlIHByZXBhcmF0aW9ucyBmb3IgZmlmdHkgdGFsZW50cywgd2hpY2ggd2FzIGp1c3QgdGhlIGFtb3VudCBvZiBoaXMgYXNzZXNzbWVudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGUgZGlkIG5vdCBlbmpveSBoaXMgbmF0aXZlIGNpdHkgZm9yIGxvbmcgYWZ0ZXIgaGlzIHJldHVybiBmcm9tIGV4aWxlLCBidXQgdGhlIGNhdXNlIG9mIEdyZWVjZSB3YXMgc3BlZWRpbHkgY3J1c2hlZCwgYW5kIGluIHRoZSBtb250aCBvZiBNZXRhZ2VpdG5pb24gdGhlIGJhdHRsZSBhdCBDcmFubm9uIHRvb2sgcGxhY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXVndXN0IDZ0aCAzMjIgQi5DLiBJbiB0aGlzIGJhdHRsZSBBbnRpcGF0ZXIgYW5kIENyYXRlcnVzIGNydXNoZWQgdGhlIGNvbWJpbmVkIGFybWllcyBvZiB0aGUgR3JlZWtzIGFuZCBjb25jbHVkZWQgdGhlIHNvLWNhbGxlZCBMYW1pYW4gd2FyLjwvbm90ZT4gaW4gdGhhdCBvZiBCb8OrZHJvbWlvbiB0aGUgTWFjZWRvbmlhbiBnYXJyaXNvbiBlbnRlcmVkIE11bnljaGlhLCBhbmQgaW4gdGhhdCBvZiBQeWFuZXBzaW9uIERlbW9zdGhlbmVzIGRpZWQsIGluIHRoZSBmb2xsb3dpbmcgbWFubmVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGUgZGlkIG5vdCBlbmpveSBoaXMgbmF0aXZlIGNpdHkgZm9yIGxvbmcgYWZ0ZXIgaGlzIHJldHVybiBmcm9tIGV4aWxlLCBidXQgdGhlIGNhdXNlIG9mIEdyZWVjZSB3YXMgc3BlZWRpbHkgY3J1c2hlZCwgYW5kIGluIHRoZSBtb250aCBvZiBNZXRhZ2VpdG5pb24gdGhlIGJhdHRsZSBhdCBDcmFubm9uIHRvb2sgcGxhY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdWd1c3QgNnRoIDMyMiBCLkMuIEluIHRoaXMgYmF0dGxlIEFudGlwYXRlciBhbmQgQ3JhdGVydXMgY3J1c2hlZCB0aGUgY29tYmluZWQgYXJtaWVzIG9mIHRoZSBHcmVla3MgYW5kIGNvbmNsdWRlZCB0aGUgc28tY2FsbGVkIExhbWlhbiB3YXIuPC9ub3RlPiBpbiB0aGF0IG9mIEJvw6tkcm9taW9uIHRoZSBNYWNlZG9uaWFuIGdhcnJpc29uIGVudGVyZWQgTXVueWNoaWEsIGFuZCBpbiB0aGF0IG9mIFB5YW5lcHNpb24gRGVtb3N0aGVuZXMgZGllZCwgaW4gdGhlIGZvbGxvd2luZyBtYW5uZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQW50aXBhdGVyIGFuZCBDcmF0ZXJ1cyB3ZXJlIHJlcG9ydGVkIHRvIGJlIGFkdmFuY2luZyB1cG9uIEF0aGVucywgRGVtb3N0aGVuZXMgYW5kIGhpcyBhc3NvY2lhdGVzIHN1Y2NlZWRlZCBpbiBlc2NhcGluZyBieSBzdGVhbHRoIGZyb20gdGhlIGNpdHksIGFuZCB0aGUgcGVvcGxlLCBvbiBtb3Rpb24gb2YgRGVtYWRlcywgcGFzc2VkIHNlbnRlbmNlIG9mIGRlYXRoIHVwb24gdGhlbS4gU2luY2UgdGhleSBkaXNwZXJzZWQgdGhlbXNlbHZlcyB0byBkaWZmZXJlbnQgcGxhY2VzLCBBbnRpcGF0ZXIgc2VudCBoaXMgc29sZGllcnMgYWJvdXQgdG8gYXJyZXN0IHRoZW0sIHVuZGVyIHRoZSBjb21tYW5kIG9mIEFyY2hpYXMgdGhlIHNvLWNhbGxlZCBFeGlsZS1odW50ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIHdhcyBhIG5hdGl2ZSBvZiBUaHVyaWksIGFuZCB0aGUgc3RvcnkgZ29lcyB0aGF0IGhlIHdhcyBvbmNlIGEgdHJhZ2ljIGFjdG9yOyBpbmRlZWQsIGl0IGlzIHJlY29yZGVkIHRoYXQgUG9sdXMgb2YgQWVnaW5hLCB0aGUgYmVzdCBhY3RvciBvZiBoaXMgdGltZSwgd2FzIGEgcHVwaWwgb2YgaGlzLiBCdXQgSGVybWlwcHVzIHN0YXRlcyB0aGF0IEFyY2hpYXMgd2FzIG9uZSBvZiB0aGUgcHVwaWxzIG9mIExhY3JpdHVzIHRoZSByaGV0b3JpY2lhbjsgd2hpbGUgRGVtZXRyaXVzIHNheXMgdGhhdCBoZSBiZWxvbmdlZCB0byB0aGUgc2Nob29sIG9mIEFuYXhpbWVuZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgQXJjaGlhcywgdGhlbiwgZmluZGluZyB0aGF0IEh5cGVyZWlkZXMgdGhlIG9yYXRvciBhbmQgQXJpc3RvbmljdXMgb2YgTWFyYXRob24gYW5kIEhpbWVyYWV1cyB0aGUgYnJvdGhlciBvZiBEZW1ldHJpdXMgdGhlIFBoYWxlcmVhbiBoYWQgdGFrZW4gcmVmdWdlIGluIHRoZSBzYW5jdHVhcnkgb2YgQWVhY3VzIGF0IEFlZ2luYSwgaGFsZWQgdGhlbSBhd2F5IGFuZCBzZW50IHRoZW0gdG8gQW50aXBhdGVyIGF0IENsZW9uYWUuIFRoZXJlIHRoZXkgd2VyZSBwdXQgdG8gZGVhdGgsIGFuZCBIeXBlcmVpZGVzLCBpdCBpcyBzYWlkLCBhbHNvIGhhZCBoaXMgdG9uZ3VlIGN1dCBvdXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQW50aXBhdGVyIGFuZCBDcmF0ZXJ1cyB3ZXJlIHJlcG9ydGVkIHRvIGJlIGFkdmFuY2luZyB1cG9uIEF0aGVucywgRGVtb3N0aGVuZXMgYW5kIGhpcyBhc3NvY2lhdGVzIHN1Y2NlZWRlZCBpbiBlc2NhcGluZyBieSBzdGVhbHRoIGZyb20gdGhlIGNpdHksIGFuZCB0aGUgcGVvcGxlLCBvbiBtb3Rpb24gb2YgRGVtYWRlcywgcGFzc2VkIHNlbnRlbmNlIG9mIGRlYXRoIHVwb24gdGhlbS4gU2luY2UgdGhleSBkaXNwZXJzZWQgdGhlbXNlbHZlcyB0byBkaWZmZXJlbnQgcGxhY2VzLCBBbnRpcGF0ZXIgc2VudCBoaXMgc29sZGllcnMgYWJvdXQgdG8gYXJyZXN0IHRoZW0sIHVuZGVyIHRoZSBjb21tYW5kIG9mIEFyY2hpYXMgdGhlIHNvLWNhbGxlZCBFeGlsZS1odW50ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIHdhcyBhIG5hdGl2ZSBvZiBUaHVyaWksIGFuZCB0aGUgc3RvcnkgZ29lcyB0aGF0IGhlIHdhcyBvbmNlIGEgdHJhZ2ljIGFjdG9yOyBpbmRlZWQsIGl0IGlzIHJlY29yZGVkIHRoYXQgUG9sdXMgb2YgQWVnaW5hLCB0aGUgYmVzdCBhY3RvciBvZiBoaXMgdGltZSwgd2FzIGEgcHVwaWwgb2YgaGlzLiBCdXQgSGVybWlwcHVzIHN0YXRlcyB0aGF0IEFyY2hpYXMgd2FzIG9uZSBvZiB0aGUgcHVwaWxzIG9mIExhY3JpdHVzIHRoZSByaGV0b3JpY2lhbjsgd2hpbGUgRGVtZXRyaXVzIHNheXMgdGhhdCBoZSBiZWxvbmdlZCB0byB0aGUgc2Nob29sIG9mIEFuYXhpbWVuZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgQXJjaGlhcywgdGhlbiwgZmluZGluZyB0aGF0IEh5cGVyZWlkZXMgdGhlIG9yYXRvciBhbmQgQXJpc3RvbmljdXMgb2YgTWFyYXRob24gYW5kIEhpbWVyYWV1cyB0aGUgYnJvdGhlciBvZiBEZW1ldHJpdXMgdGhlIFBoYWxlcmVhbiBoYWQgdGFrZW4gcmVmdWdlIGluIHRoZSBzYW5jdHVhcnkgb2YgQWVhY3VzIGF0IEFlZ2luYSwgaGFsZWQgdGhlbSBhd2F5IGFuZCBzZW50IHRoZW0gdG8gQW50aXBhdGVyIGF0IENsZW9uYWUuIFRoZXJlIHRoZXkgd2VyZSBwdXQgdG8gZGVhdGgsIGFuZCBIeXBlcmVpZGVzLCBpdCBpcyBzYWlkLCBhbHNvIGhhZCBoaXMgdG9uZ3VlIGN1dCBvdXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBvbiBsZWFybmluZyB0aGF0IERlbW9zdGhlbmVzIGhhZCB0YWtlbiBzYW5jdHVhcnkgaW4gdGhlIHRlbXBsZSBvZiBQb3NlaWRvbiBhdCBDYWxhdXJpYSwgQXJjaGlhcyBzYWlsZWQgYWNyb3NzIHRvIHRoZSBpc2xhbmQgaW4gc21hbGwgYm9hdHMsIGFuZCBhZnRlciBsYW5kaW5nIHdpdGggVGhyYWNpYW4gc3BlYXItbWVuIHRyaWVkIHRvIHBlcnN1YWRlIHRoZSBmdWdpdGl2ZSB0byBsZWF2ZSB0aGUgdGVtcGxlIGFuZCBnbyB3aXRoIGhpbSB0byBBbnRpcGF0ZXIsIGFzc3VyaW5nIGhpbSB0aGF0IGhlIHdvdWxkIHN1ZmZlciBubyBoYXJzaCB0cmVhdG1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpdCBjaGFuY2VkIHRoYXQgRGVtb3N0aGVuZXMsIGluIGhpcyBzbGVlcCB0aGUgbmlnaHQgYmVmb3JlLCBoYWQgc2VlbiBhIHN0cmFuZ2UgdmlzaW9uLiBIZSBkcmVhbWVkLCBuYW1lbHksIHRoYXQgaGUgd2FzIGFjdGluZyBpbiBhIHRyYWdlZHkgYW5kIGNvbnRlbmRpbmcgd2l0aCBBcmNoaWFzIGZvciB0aGUgcHJpemUsIGFuZCB0aGF0IGFsdGhvdWdoIGhlIGFjcXVpdHRlZCBoaW1zZWxmIHdlbGwgYW5kIHdvbiB0aGUgZmF2b3VyIG9mIHRoZSBhdWRpZW5jZSwgaGlzIGxhY2sgb2Ygc3RhZ2UgZGVjb3JhdGlvbnMgYW5kIGNvc3R1bWVzIGNvc3QgaGltIHRoZSB2aWN0b3J5LiBUaGVyZWZvcmUsIGFmdGVyIEFyY2hpYXMgaGFkIHNhaWQgbWFueSBraW5kbHkgdGhpbmdzIHRvIGhpbSwgRGVtb3N0aGVuZXMsIGp1c3QgYXMgaGUgc2F0LCBsb29rZWQgc3RlYWRmYXN0bHkgYXQgaGltIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gQXJjaGlhcywgdGhvdSBkaWRzdCBuZXZlciBjb252aW5jZSBtZSBieSB0aGluZSBhY3RpbmcsIG5vciB3aWx0IHRob3Ugbm93IGNvbnZpbmNlIG1lIGJ5IHRoeSBwcm9taXNlcy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gQXJjaGlhcyBiZWdhbiB0byB0aHJlYXRlbiBoaW0gYW5ncmlseSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3csPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRob3UgdXR0ZXJlc3QgdGhlIGxhbmd1YWdlIG9mIHRoZSBNYWNlZG9uaWFuIG9yYWNsZTs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5pLmUuIHRoeSByZWFsIHNlbnRpbWVudHMgaW4gb2JlZGllbmNlIHRvIEFudGlwYXRlci48L25vdGU+IGJ1dCBhIG1vbWVudCBhZ28gdGhvdSB3ZXJlIGFjdGluZyBhIHBhcnQuIFdhaXQgYSBsaXR0bGUsIHRoZW4sIHRoYXQgSSBtYXkgd3JpdGUgYSBtZXNzYWdlIHRvIG15IGZhbWlseS48L3E+IFdpdGggdGhlc2Ugd29yZHMsIGhlIHJldGlyZWQgaW50byB0aGUgdGVtcGxlLCBhbmQgdGFraW5nIGEgc2Nyb2xsLCBhcyBpZiBhYm91dCB0byB3cml0ZSwgaGUgcHV0IGhpcyBwZW4gdG8gaGlzIG1vdXRoIGFuZCBiaXQgaXQsIGFzIGhlIHdhcyB3b250IHRvIGRvIHdoZW4gdGhpbmtpbmcgd2hhdCBoZSBzaG91bGQgd3JpdGUsIGFuZCBrZXB0IGl0IHRoZXJlIHNvbWUgdGltZSwgdGhlbiBjb3ZlcmVkIGFuZCBiZW50IGhpcyBoZWFkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3BlYXItbWVuLCB0aGVuLCB3aG8gc3Rvb2QgYXQgdGhlIGRvb3IsIGxhdWdoZWQgYXQgaGltIGZvciBwbGF5aW5nIHRoZSBjb3dhcmQsIGFuZCBjYWxsZWQgaGltIHdlYWsgYW5kIHVubWFubHksIGJ1dCBBcmNoaWFzIGNhbWUgdXAgYW5kIHVyZ2VkIGhpbSB0byByaXNlLCBhbmQgcmVpdGVyYXRpbmcgdGhlIHNhbWUgc3BlZWNoZXMgYXMgYmVmb3JlLCBwcm9taXNlZCBoaW0gYSByZWNvbmNpbGlhdGlvbiB3aXRoIEFudGlwYXRlci4gQnV0IERlbW9zdGhlbmVzLCBub3cgY29uc2Npb3VzIHRoYXQgdGhlIHBvaXNvbiB3YXMgYWZmZWN0aW5nIGFuZCBvdmVycG93ZXJpbmcgaGltLCB1bmNvdmVyZWQgaGlzIGhlYWQ7IGFuZCBmaXhpbmcgaGlzIGV5ZXMgdXBvbiBBcmNoaWFzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBjYW5zdCBub3QgYmUgdG9vIHNvb24gbm93LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pbiBwbGF5aW5nIHRoZSBwYXJ0IG9mIENyZW9uIGluIHRoZSB0cmFnZWR5IGFuZCBjYXN0aW5nIHRoaXMgYm9keSBvdXQgd2l0aG91dCBidXJpYWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gYWxsdXNpb24gdG8gdGhlIENyZW9uIGluIHRoZSA8dGl0bGU+QW50aWdvbmU8L3RpdGxlPiBvZiBTb3Bob2NsZXMsIGJ5IHdob3NlIGVkaWN0IHRoZSBib2R5IG9mIFBvbHluZWljZXMgd2FzIHRvIGJlIGxlZnQgdW5idXJpZWQgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTb3BoLiBBbnQuIDI2IiB2YWxpZD0ieWVzIj52di4gMjYgZmYuPC9iaWJsPiAKICAgICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlNvcGguIEFudC4gMTkxIiB2YWxpZD0ieWVzIj4xOTEgZmYuPC9iaWJsPikuPC9ub3RlPiBCdXQgSSwgTyBiZWxvdmVkIFBvc2VpZG9uLCB3aWxsIGRlcGFydCBmcm9tIHRoeSBzYW5jdHVhcnkgd2hpbGUgSSBhbSBzdGlsbCBhbGl2ZTsgd2hlcmVhcyBBbnRpcGF0ZXIgYW5kIHRoZSBNYWNlZG9uaWFucyB3b3VsZCBub3QgaGF2ZSBsZWZ0IGV2ZW4gdGh5IHRlbXBsZSB1bmRlZmlsZWQuPC9xPiBTbyBzcGVha2luZywgYW5kIGJpZGRpbmcgc29tZW9uZSBzdXBwb3J0IGhpbSwgc2luY2UgaGUgd2FzIG5vdyB0cmVtYmxpbmcgYW5kIHRvdHRlcmluZywgaGUgaGFkIG5vIHNvb25lciBnb25lIGZvcnRoIGFuZCBwYXNzZWQgYnkgdGhlIGFsdGFyIHRoYW4gaGUgZmVsbCwgYW5kIHdpdGggYSBncm9hbiBnYXZlIHVwIHRoZSBnaG9zdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIG9uIGxlYXJuaW5nIHRoYXQgRGVtb3N0aGVuZXMgaGFkIHRha2VuIHNhbmN0dWFyeSBpbiB0aGUgdGVtcGxlIG9mIFBvc2VpZG9uIGF0IENhbGF1cmlhLCBBcmNoaWFzIHNhaWxlZCBhY3Jvc3MgdG8gdGhlIGlzbGFuZCBpbiBzbWFsbCBib2F0cywgYW5kIGFmdGVyIGxhbmRpbmcgd2l0aCBUaHJhY2lhbiBzcGVhci1tZW4gdHJpZWQgdG8gcGVyc3VhZGUgdGhlIGZ1Z2l0aXZlIHRvIGxlYXZlIHRoZSB0ZW1wbGUgYW5kIGdvIHdpdGggaGltIHRvIEFudGlwYXRlciwgYXNzdXJpbmcgaGltIHRoYXQgaGUgd291bGQgc3VmZmVyIG5vIGhhcnNoIHRyZWF0bWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpdCBjaGFuY2VkIHRoYXQgRGVtb3N0aGVuZXMsIGluIGhpcyBzbGVlcCB0aGUgbmlnaHQgYmVmb3JlLCBoYWQgc2VlbiBhIHN0cmFuZ2UgdmlzaW9uLiBIZSBkcmVhbWVkLCBuYW1lbHksIHRoYXQgaGUgd2FzIGFjdGluZyBpbiBhIHRyYWdlZHkgYW5kIGNvbnRlbmRpbmcgd2l0aCBBcmNoaWFzIGZvciB0aGUgcHJpemUsIGFuZCB0aGF0IGFsdGhvdWdoIGhlIGFjcXVpdHRlZCBoaW1zZWxmIHdlbGwgYW5kIHdvbiB0aGUgZmF2b3VyIG9mIHRoZSBhdWRpZW5jZSwgaGlzIGxhY2sgb2Ygc3RhZ2UgZGVjb3JhdGlvbnMgYW5kIGNvc3R1bWVzIGNvc3QgaGltIHRoZSB2aWN0b3J5LiBUaGVyZWZvcmUsIGFmdGVyIEFyY2hpYXMgaGFkIHNhaWQgbWFueSBraW5kbHkgdGhpbmdzIHRvIGhpbSwgRGVtb3N0aGVuZXMsIGp1c3QgYXMgaGUgc2F0LCBsb29rZWQgc3RlYWRmYXN0bHkgYXQgaGltIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBBcmNoaWFzLCB0aG91IGRpZHN0IG5ldmVyIGNvbnZpbmNlIG1lIGJ5IHRoaW5lIGFjdGluZywgbm9yIHdpbHQgdGhvdSBub3cgY29udmluY2UgbWUgYnkgdGh5IHByb21pc2VzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIEFyY2hpYXMgYmVnYW4gdG8gdGhyZWF0ZW4gaGltIGFuZ3JpbHksIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob3csPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhvdSB1dHRlcmVzdCB0aGUgbGFuZ3VhZ2Ugb2YgdGhlIE1hY2Vkb25pYW4gb3JhY2xlOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+aS5lLiB0aHkgcmVhbCBzZW50aW1lbnRzIGluIG9iZWRpZW5jZSB0byBBbnRpcGF0ZXIuPC9ub3RlPiBidXQgYSBtb21lbnQgYWdvIHRob3Ugd2VyZSBhY3RpbmcgYSBwYXJ0LiBXYWl0IGEgbGl0dGxlLCB0aGVuLCB0aGF0IEkgbWF5IHdyaXRlIGEgbWVzc2FnZSB0byBteSBmYW1pbHkuPC9xPiBXaXRoIHRoZXNlIHdvcmRzLCBoZSByZXRpcmVkIGludG8gdGhlIHRlbXBsZSwgYW5kIHRha2luZyBhIHNjcm9sbCwgYXMgaWYgYWJvdXQgdG8gd3JpdGUsIGhlIHB1dCBoaXMgcGVuIHRvIGhpcyBtb3V0aCBhbmQgYml0IGl0LCBhcyBoZSB3YXMgd29udCB0byBkbyB3aGVuIHRoaW5raW5nIHdoYXQgaGUgc2hvdWxkIHdyaXRlLCBhbmQga2VwdCBpdCB0aGVyZSBzb21lIHRpbWUsIHRoZW4gY292ZXJlZCBhbmQgYmVudCBoaXMgaGVhZC4gCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmkuZS4gdGh5IHJlYWwgc2VudGltZW50cyBpbiBvYmVkaWVuY2UgdG8gQW50aXBhdGVyLjwvbm90ZT4gYnV0IGEgbW9tZW50IGFnbyB0aG91IHdlcmUgYWN0aW5nIGEgcGFydC4gV2FpdCBhIGxpdHRsZSwgdGhlbiwgdGhhdCBJIG1heSB3cml0ZSBhIG1lc3NhZ2UgdG8gbXkgZmFtaWx5LjwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzcGVhci1tZW4sIHRoZW4sIHdobyBzdG9vZCBhdCB0aGUgZG9vciwgbGF1Z2hlZCBhdCBoaW0gZm9yIHBsYXlpbmcgdGhlIGNvd2FyZCwgYW5kIGNhbGxlZCBoaW0gd2VhayBhbmQgdW5tYW5seSwgYnV0IEFyY2hpYXMgY2FtZSB1cCBhbmQgdXJnZWQgaGltIHRvIHJpc2UsIGFuZCByZWl0ZXJhdGluZyB0aGUgc2FtZSBzcGVlY2hlcyBhcyBiZWZvcmUsIHByb21pc2VkIGhpbSBhIHJlY29uY2lsaWF0aW9uIHdpdGggQW50aXBhdGVyLiBCdXQgRGVtb3N0aGVuZXMsIG5vdyBjb25zY2lvdXMgdGhhdCB0aGUgcG9pc29uIHdhcyBhZmZlY3RpbmcgYW5kIG92ZXJwb3dlcmluZyBoaW0sIHVuY292ZXJlZCBoaXMgaGVhZDsgYW5kIGZpeGluZyBoaXMgZXllcyB1cG9uIEFyY2hpYXMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgY2Fuc3Qgbm90IGJlIHRvbyBzb29uIG5vdyw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pbiBwbGF5aW5nIHRoZSBwYXJ0IG9mIENyZW9uIGluIHRoZSB0cmFnZWR5IGFuZCBjYXN0aW5nIHRoaXMgYm9keSBvdXQgd2l0aG91dCBidXJpYWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBhbGx1c2lvbiB0byB0aGUgQ3Jlb24gaW4gdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFudGlnb25lPC90aXRsZT4gb2YgU29waG9jbGVzLCBieSB3aG9zZSBlZGljdCB0aGUgYm9keSBvZiBQb2x5bmVpY2VzIHdhcyB0byBiZSBsZWZ0IHVuYnVyaWVkICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTb3BoLiBBbnQuIDI2IiB2YWxpZD0ieWVzIj52di4gMjYgZmYuPC9iaWJsPiAKICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU29waC4gQW50LiAxOTEiIHZhbGlkPSJ5ZXMiPjE5MSBmZi48L2JpYmw+KS48L25vdGU+IEJ1dCBJLCBPIGJlbG92ZWQgUG9zZWlkb24sIHdpbGwgZGVwYXJ0IGZyb20gdGh5IHNhbmN0dWFyeSB3aGlsZSBJIGFtIHN0aWxsIGFsaXZlOyB3aGVyZWFzIEFudGlwYXRlciBhbmQgdGhlIE1hY2Vkb25pYW5zIHdvdWxkIG5vdCBoYXZlIGxlZnQgZXZlbiB0aHkgdGVtcGxlIHVuZGVmaWxlZC48L3E+IFNvIHNwZWFraW5nLCBhbmQgYmlkZGluZyBzb21lb25lIHN1cHBvcnQgaGltLCBzaW5jZSBoZSB3YXMgbm93IHRyZW1ibGluZyBhbmQgdG90dGVyaW5nLCBoZSBoYWQgbm8gc29vbmVyIGdvbmUgZm9ydGggYW5kIHBhc3NlZCBieSB0aGUgYWx0YXIgdGhhbiBoZSBmZWxsLCBhbmQgd2l0aCBhIGdyb2FuIGdhdmUgdXAgdGhlIGdob3N0LgoJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGFsbHVzaW9uIHRvIHRoZSBDcmVvbiBpbiB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW50aWdvbmU8L3RpdGxlPiBvZiBTb3Bob2NsZXMsIGJ5IHdob3NlIGVkaWN0IHRoZSBib2R5IG9mIFBvbHluZWljZXMgd2FzIHRvIGJlIGxlZnQgdW5idXJpZWQgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlNvcGguIEFudC4gMjYiIHZhbGlkPSJ5ZXMiPnZ2LiAyNiBmZi48L2JpYmw+IAogICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTb3BoLiBBbnQuIDE5MSIgdmFsaWQ9InllcyI+MTkxIGZmLjwvYmlibD4pLjwvbm90ZT4gQnV0IEksIE8gYmVsb3ZlZCBQb3NlaWRvbiwgd2lsbCBkZXBhcnQgZnJvbSB0aHkgc2FuY3R1YXJ5IHdoaWxlIEkgYW0gc3RpbGwgYWxpdmU7IHdoZXJlYXMgQW50aXBhdGVyIGFuZCB0aGUgTWFjZWRvbmlhbnMgd291bGQgbm90IGhhdmUgbGVmdCBldmVuIHRoeSB0ZW1wbGUgdW5kZWZpbGVkLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFudGlnb25lPC90aXRsZT4gb2YgU29waG9jbGVzLCBieSB3aG9zZSBlZGljdCB0aGUgYm9keSBvZiBQb2x5bmVpY2VzIHdhcyB0byBiZSBsZWZ0IHVuYnVyaWVkICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTb3BoLiBBbnQuIDI2IiB2YWxpZD0ieWVzIj52di4gMjYgZmYuPC9iaWJsPiAKICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU29waC4gQW50LiAxOTEiIHZhbGlkPSJ5ZXMiPjE5MSBmZi48L2JpYmw+KS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlIHBvaXNvbiwgQXJpc3RvbiBzYXlzIGhlIHRvb2sgaXQgZnJvbSB0aGUgcGVuLCBhcyBJIGhhdmUgc2FpZDsgYnV0IGEgY2VydGFpbiBQYXBwdXMsIGZyb20gd2hvbSBIZXJtaXBwdXMgdG9vayBoaXMgc3RvcnksIHNheXMgdGhhdCB3aGVuIGhlIGhhZCBmYWxsZW4gYnkgdGhlIHNpZGUgb2YgdGhlIGFsdGFyLCB0aGVyZSB3YXMgZm91bmQgd3JpdHRlbiBpbiB0aGUgc2Nyb2xsIHRoZSBiZWdpbm5pbmcgb2YgYSBsZXR0ZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGVtb3N0aGVuZXMgdG8gQW50aXBhdGVyLDwvcT4gYW5kIG5vdGhpbmcgbW9yZTsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoYXQgd2hlbiBtZW4gd2VyZSBhbWF6ZWQgYXQgdGhlIHN1ZGRlbm5lc3Mgb2YgaGlzIGRlYXRoIHRoZSBUaHJhY2lhbnMgd2hvIGhhZCBzdG9vZCBhdCB0aGUgZG9vciB0b2xkIHRoZSBzdG9yeSB0aGF0IGhlIHRvb2sgdGhlIHBvaXNvbiBpbnRvIGhpcyBoYW5kIGZyb20gYSBjbG90aCBhbmQgcHV0IGl0IHRvIGhpcyBtb3V0aCBhbmQgc3dhbGxvd2VkIGl0OyBhbmQgdGhhdCB0aGV5IHRoZW1zZWx2ZXMsIHN0cmFuZ2UgdG8gc2F5LCBoYWQgc3VwcG9zZWQgdGhhdCB3aGF0IGhlIHN3YWxsb3dlZCB3YXMgZ29sZDsgYW5kIHRoYXQgdGhlIGxpdHRsZSBtYWlkIHdobyBzZXJ2ZWQgaGltLCB3aGVuIGlucXVpcmllcyB3ZXJlIG1hZGUgYnkgQXJjaGlhcywgc2FpZCB0aGF0IERlbW9zdGhlbmVzIGhhZCBsb25nIHdvcm4gdGhhdCBjbG90aCBnaXJkbGUgYXMgYSBzYWZlZ3VhcmQgYWdhaW5zdCBoaXMgZW5lbWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGV2ZW4gRXJhdG9zdGhlbmVzIGhpbXNlbGYgc2F5cyB0aGF0IERlbW9zdGhlbmVzIGtlcHQgdGhlIHBvaXNvbiBpbiBhIGhvbGxvdyBicmFjZWxldCwgYW5kIHRoYXQgaGUgd29yZSB0aGlzIGJyYWNlbGV0IGFzIGFuIG9ybmFtZW50IHVwb24gaGlzIGFybS4gQnV0IHRoZSBkaXZlcmdlbnQgc3RvcmllcyBvZiBhbGwgdGhlIG90aGVycyB3aG8gaGF2ZSB3cml0dGVuIGFib3V0IHRoZSBtYXR0ZXIsIGFuZCB0aGV5IGFyZSB2ZXJ5IG1hbnksIG5lZWQgbm90IGJlIHJlY291bnRlZDsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+ZXhjZXB0IHRoYXQgRGVtb2NoYXJlcyB0aGUgcmVsYXRpdmUgb2YgRGVtb3N0aGVuZXMgc2F5cyB0aGF0IGluIGhpcyBvcGluaW9uIGl0IHdhcyBub3QgZHVlIHRvIHBvaXNvbiwgYnV0IHRvIHRoZSBob25vdXIgYW5kIGtpbmRseSBmYXZvdXIgc2hvd24gaGltIGJ5IHRoZSBnb2RzLCB0aGF0IGhlIHdhcyByZXNjdWVkIGZyb20gdGhlIGNydWVsdHkgb2YgdGhlIE1hY2Vkb25pYW5zIGJ5IGEgc3BlZWR5IGFuZCBwYWlubGVzcyBkZWF0aC4gQW5kIGhlIGRpZWQgb24gdGhlIHNpeHRlZW50aCBvZiB0aGUgbW9udGggUHlhbmVwc2lvbiwgdGhlIG1vc3QgZ2xvb215IGRheSBvZiB0aGUgVGhlc21vcGhvcmlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGFubnVhbCBmZXN0aXZhbCBpbiBob25vdXIgb2YgRGVtZXRlciBhbmQgUGVyc2VwaG9uZS48L25vdGU+IHdoaWNoIHRoZSB3b21lbiBvYnNlcnZlIGJ5IGZhc3RpbmcgaW4gdGhlIHRlbXBsZSBvZiB0aGUgZ29kZGVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSBwb2lzb24sIEFyaXN0b24gc2F5cyBoZSB0b29rIGl0IGZyb20gdGhlIHBlbiwgYXMgSSBoYXZlIHNhaWQ7IGJ1dCBhIGNlcnRhaW4gUGFwcHVzLCBmcm9tIHdob20gSGVybWlwcHVzIHRvb2sgaGlzIHN0b3J5LCBzYXlzIHRoYXQgd2hlbiBoZSBoYWQgZmFsbGVuIGJ5IHRoZSBzaWRlIG9mIHRoZSBhbHRhciwgdGhlcmUgd2FzIGZvdW5kIHdyaXR0ZW4gaW4gdGhlIHNjcm9sbCB0aGUgYmVnaW5uaW5nIG9mIGEgbGV0dGVyLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGVtb3N0aGVuZXMgdG8gQW50aXBhdGVyLDwvcT4gYW5kIG5vdGhpbmcgbW9yZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IHdoZW4gbWVuIHdlcmUgYW1hemVkIGF0IHRoZSBzdWRkZW5uZXNzIG9mIGhpcyBkZWF0aCB0aGUgVGhyYWNpYW5zIHdobyBoYWQgc3Rvb2QgYXQgdGhlIGRvb3IgdG9sZCB0aGUgc3RvcnkgdGhhdCBoZSB0b29rIHRoZSBwb2lzb24gaW50byBoaXMgaGFuZCBmcm9tIGEgY2xvdGggYW5kIHB1dCBpdCB0byBoaXMgbW91dGggYW5kIHN3YWxsb3dlZCBpdDsgYW5kIHRoYXQgdGhleSB0aGVtc2VsdmVzLCBzdHJhbmdlIHRvIHNheSwgaGFkIHN1cHBvc2VkIHRoYXQgd2hhdCBoZSBzd2FsbG93ZWQgd2FzIGdvbGQ7IGFuZCB0aGF0IHRoZSBsaXR0bGUgbWFpZCB3aG8gc2VydmVkIGhpbSwgd2hlbiBpbnF1aXJpZXMgd2VyZSBtYWRlIGJ5IEFyY2hpYXMsIHNhaWQgdGhhdCBEZW1vc3RoZW5lcyBoYWQgbG9uZyB3b3JuIHRoYXQgY2xvdGggZ2lyZGxlIGFzIGEgc2FmZWd1YXJkIGFnYWluc3QgaGlzIGVuZW1pZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBldmVuIEVyYXRvc3RoZW5lcyBoaW1zZWxmIHNheXMgdGhhdCBEZW1vc3RoZW5lcyBrZXB0IHRoZSBwb2lzb24gaW4gYSBob2xsb3cgYnJhY2VsZXQsIGFuZCB0aGF0IGhlIHdvcmUgdGhpcyBicmFjZWxldCBhcyBhbiBvcm5hbWVudCB1cG9uIGhpcyBhcm0uIEJ1dCB0aGUgZGl2ZXJnZW50IHN0b3JpZXMgb2YgYWxsIHRoZSBvdGhlcnMgd2hvIGhhdmUgd3JpdHRlbiBhYm91dCB0aGUgbWF0dGVyLCBhbmQgdGhleSBhcmUgdmVyeSBtYW55LCBuZWVkIG5vdCBiZSByZWNvdW50ZWQ7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmV4Y2VwdCB0aGF0IERlbW9jaGFyZXMgdGhlIHJlbGF0aXZlIG9mIERlbW9zdGhlbmVzIHNheXMgdGhhdCBpbiBoaXMgb3BpbmlvbiBpdCB3YXMgbm90IGR1ZSB0byBwb2lzb24sIGJ1dCB0byB0aGUgaG9ub3VyIGFuZCBraW5kbHkgZmF2b3VyIHNob3duIGhpbSBieSB0aGUgZ29kcywgdGhhdCBoZSB3YXMgcmVzY3VlZCBmcm9tIHRoZSBjcnVlbHR5IG9mIHRoZSBNYWNlZG9uaWFucyBieSBhIHNwZWVkeSBhbmQgcGFpbmxlc3MgZGVhdGguIEFuZCBoZSBkaWVkIG9uIHRoZSBzaXh0ZWVudGggb2YgdGhlIG1vbnRoIFB5YW5lcHNpb24sIHRoZSBtb3N0IGdsb29teSBkYXkgb2YgdGhlIFRoZXNtb3Bob3JpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGFubnVhbCBmZXN0aXZhbCBpbiBob25vdXIgb2YgRGVtZXRlciBhbmQgUGVyc2VwaG9uZS48L25vdGU+IHdoaWNoIHRoZSB3b21lbiBvYnNlcnZlIGJ5IGZhc3RpbmcgaW4gdGhlIHRlbXBsZSBvZiB0aGUgZ29kZGVzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIHRvIHRoaXMgbWFuLCBhIGxpdHRsZSB3aGlsZSBhZnRlciBoaXMgZGVhdGgsIHRoYXQgdGhlIEF0aGVuaWFuIHBlb3BsZSBwYWlkIHdvcnRoeSBob25vdXIgYnkgZXJlY3RpbmcgaGlzIHN0YXR1ZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgc3RhdHVlLCB0aGUgd29yayBvZiBQb2x5ZXVjdHVzLCB3YXMgZXJlY3RlZCBpbiAyODAtMjc5IEIuQy4sIG9uIG1vdGlvbiBvZiBEZW1vY2hhcmVzLCBhIG5lcGhldyBvZiBEZW1vc3RoZW5lcy4gVGhlIHdlbGwta25vd24gbWFyYmxlIHN0YXR1ZSBvZiBEZW1vc3RoZW5lcyBpbiB0aGUgVmF0aWNhbiBpcyB0aG91Z2h0IHRvIGJlIGEgY29weSBvZiBpdC4gU2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxLjguMiIgdmFsaWQ9InllcyI+UGF1c2FuaWFzIGkuIDgsIDI8L2JpYmw+LCB3aXRoIEZyYXplcidzIG5vdGVzLjwvbm90ZT4gaW4gYnJvbnplLCBhbmQgYnkgZGVjcmVlaW5nIHRoYXQgdGhlIGVsZGVzdCBvZiBoaXMgaG91c2Ugc2hvdWxkIGhhdmUgcHVibGljIG1haW50ZW5hbmNlIGluIHRoZSBwcnl0YW5laXVtLiBBbmQgdGhpcyBjZWxlYnJhdGVkIGluc2NyaXB0aW9uIHdhcyBpbnNjcmliZWQgdXBvbiB0aGUgcGVkZXN0YWwgb2YgaGlzIHN0YXR1ZTrigJQKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+SWYgdGh5IHN0cmVuZ3RoIGhhZCBvbmx5IGJlZW4gZXF1YWwgdG8gdGh5IHB1cnBvc2VzLCA8L2w+CgkJCQkJICAgICAgICAgIDxsPkRlbW9zdGhlbmVzLDwvbD4KCQkJCQkgICAgICAgICAgPGw+TmV2ZXIgd291bGQgdGhlIEdyZWVrcyBoYXZlIGJlZW4gcnVsZWQgYnkgYSA8L2w+CgkJCQkJICAgICAgICAgIDxsPk1hY2Vkb25pYW4gQXJlcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlPZiBjb3Vyc2UgdGhvc2Ugd2hvIHNheSB0aGF0IERlbW9zdGhlbmVzIGhpbXNlbGYgY29tcG9zZWQgdGhlc2UgbGluZXMgaW4gQ2FsYXVyaWEsIGFzIGhlIHdhcyBhYm91dCB0byBwdXQgdGhlIHBvaXNvbiB0byBoaXMgbGlwcywgdGFsayB1dHRlciBub25zZW5zZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0byB0aGlzIG1hbiwgYSBsaXR0bGUgd2hpbGUgYWZ0ZXIgaGlzIGRlYXRoLCB0aGF0IHRoZSBBdGhlbmlhbiBwZW9wbGUgcGFpZCB3b3J0aHkgaG9ub3VyIGJ5IGVyZWN0aW5nIGhpcyBzdGF0dWU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoaXMgc3RhdHVlLCB0aGUgd29yayBvZiBQb2x5ZXVjdHVzLCB3YXMgZXJlY3RlZCBpbiAyODAtMjc5IEIuQy4sIG9uIG1vdGlvbiBvZiBEZW1vY2hhcmVzLCBhIG5lcGhldyBvZiBEZW1vc3RoZW5lcy4gVGhlIHdlbGwta25vd24gbWFyYmxlIHN0YXR1ZSBvZiBEZW1vc3RoZW5lcyBpbiB0aGUgVmF0aWNhbiBpcyB0aG91Z2h0IHRvIGJlIGEgY29weSBvZiBpdC4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDEuOC4yIiB2YWxpZD0ieWVzIj5QYXVzYW5pYXMgaS4gOCwgMjwvYmlibD4sIHdpdGggRnJhemVyJ3Mgbm90ZXMuPC9ub3RlPiBpbiBicm9uemUsIGFuZCBieSBkZWNyZWVpbmcgdGhhdCB0aGUgZWxkZXN0IG9mIGhpcyBob3VzZSBzaG91bGQgaGF2ZSBwdWJsaWMgbWFpbnRlbmFuY2UgaW4gdGhlIHByeXRhbmVpdW0uIEFuZCB0aGlzIGNlbGVicmF0ZWQgaW5zY3JpcHRpb24gd2FzIGluc2NyaWJlZCB1cG9uIHRoZSBwZWRlc3RhbCBvZiBoaXMgc3RhdHVlOuKAlAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gMS44LjIiIHZhbGlkPSJ5ZXMiPlBhdXNhbmlhcyBpLiA4LCAyPC9iaWJsPiwgd2l0aCBGcmF6ZXIncyBub3Rlcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5JZiB0aHkgc3RyZW5ndGggaGFkIG9ubHkgYmVlbiBlcXVhbCB0byB0aHkgcHVycG9zZXMsIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5EZW1vc3RoZW5lcyw8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmV2ZXIgd291bGQgdGhlIEdyZWVrcyBoYXZlIGJlZW4gcnVsZWQgYnkgYSA8L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWFjZWRvbmlhbiBBcmVzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCU9mIGNvdXJzZSB0aG9zZSB3aG8gc2F5IHRoYXQgRGVtb3N0aGVuZXMgaGltc2VsZiBjb21wb3NlZCB0aGVzZSBsaW5lcyBpbiBDYWxhdXJpYSwgYXMgaGUgd2FzIGFib3V0IHRvIHB1dCB0aGUgcG9pc29uIHRvIGhpcyBsaXBzLCB0YWxrIHV0dGVyIG5vbnNlbnNlLgoJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPklmIHRoeSBzdHJlbmd0aCBoYWQgb25seSBiZWVuIGVxdWFsIHRvIHRoeSBwdXJwb3NlcywgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkRlbW9zdGhlbmVzLDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5OZXZlciB3b3VsZCB0aGUgR3JlZWtzIGhhdmUgYmVlbiBydWxlZCBieSBhIDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5NYWNlZG9uaWFuIEFyZXMuPC9sPgoJCQkJICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGEgc2hvcnQgdGltZSBiZWZvcmUgSSB0b29rIHVwIG15IGFib2RlIGluIEF0aGVucywgdGhlIGZvbGxvd2luZyBpbmNpZGVudCBpcyBzYWlkIHRvIGhhdmUgb2NjdXJyZWQuIEEgc29sZGllciB3aG8gaGFkIGJlZW4gY2FsbGVkIHRvIGFuIGFjY291bnQgYnkgaGlzIGNvbW1hbmRlciwgcHV0IHdoYXQgbGl0dGxlIGdvbGQgaGUgaGFkIGludG8gdGhlIGhhbmRzIG9mIHRoaXMgc3RhdHVlIG9mIERlbW9zdGhlbmVzLiBJdCBzdG9vZCB3aXRoIGl0cyBmaW5nZXJzIGludGVybGFjZWQsIGFuZCBoYXJkIGJ5IGdyZXcgYSBzbWFsbCBwbGFuZS10cmVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IG9mIHRoZSBsZWF2ZXMgZnJvbSB0aGlzIHRyZWUsIHdoZXRoZXIgdGhlIHdpbmQgYWNjaWRlbnRhbGx5IGJsZXcgdGhlbSB0aGl0aGVyLCBvciB3aGV0aGVyIHRoZSBkZXBvc2l0b3IgaGltc2VsZiB0b29rIHRoaXMgd2F5IG9mIGNvbmNlYWxpbmcgaGlzIHRyZWFzdXJlLCBsYXkgY2x1c3RlcmluZyB0b2dldGhlciBhYm91dCB0aGUgZ29sZCBhbmQgaGlkIGl0IGZvciBhIGxvbmcgdGltZS4gQXQgbGFzdCwgaG93ZXZlciwgdGhlIG1hbiBjYW1lIGJhY2ssIGZvdW5kIGhpcyB0cmVhc3VyZSBpbnRhY3QsIGFuZCBhbiBhY2NvdW50IG9mIHRoZSBtYXR0ZXIgd2FzIHNwcmVhZCBhYnJvYWQsIHdoZXJldXBvbiB0aGUgd2l0cyBvZiB0aGUgY2l0eSB0b29rIGZvciBhIHRoZW1lIHRoZSBpbmNvcnJ1cHRpYmlsaXR5IG9mIERlbW9zdGhlbmVzIGFuZCB2aWVkIHdpdGggb25lIGFub3RoZXIgaW4gdGhlaXIgZXBpZ3JhbXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBhIHNob3J0IHRpbWUgYmVmb3JlIEkgdG9vayB1cCBteSBhYm9kZSBpbiBBdGhlbnMsIHRoZSBmb2xsb3dpbmcgaW5jaWRlbnQgaXMgc2FpZCB0byBoYXZlIG9jY3VycmVkLiBBIHNvbGRpZXIgd2hvIGhhZCBiZWVuIGNhbGxlZCB0byBhbiBhY2NvdW50IGJ5IGhpcyBjb21tYW5kZXIsIHB1dCB3aGF0IGxpdHRsZSBnb2xkIGhlIGhhZCBpbnRvIHRoZSBoYW5kcyBvZiB0aGlzIHN0YXR1ZSBvZiBEZW1vc3RoZW5lcy4gSXQgc3Rvb2Qgd2l0aCBpdHMgZmluZ2VycyBpbnRlcmxhY2VkLCBhbmQgaGFyZCBieSBncmV3IGEgc21hbGwgcGxhbmUtdHJlZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgb2YgdGhlIGxlYXZlcyBmcm9tIHRoaXMgdHJlZSwgd2hldGhlciB0aGUgd2luZCBhY2NpZGVudGFsbHkgYmxldyB0aGVtIHRoaXRoZXIsIG9yIHdoZXRoZXIgdGhlIGRlcG9zaXRvciBoaW1zZWxmIHRvb2sgdGhpcyB3YXkgb2YgY29uY2VhbGluZyBoaXMgdHJlYXN1cmUsIGxheSBjbHVzdGVyaW5nIHRvZ2V0aGVyIGFib3V0IHRoZSBnb2xkIGFuZCBoaWQgaXQgZm9yIGEgbG9uZyB0aW1lLiBBdCBsYXN0LCBob3dldmVyLCB0aGUgbWFuIGNhbWUgYmFjaywgZm91bmQgaGlzIHRyZWFzdXJlIGludGFjdCwgYW5kIGFuIGFjY291bnQgb2YgdGhlIG1hdHRlciB3YXMgc3ByZWFkIGFicm9hZCwgd2hlcmV1cG9uIHRoZSB3aXRzIG9mIHRoZSBjaXR5IHRvb2sgZm9yIGEgdGhlbWUgdGhlIGluY29ycnVwdGliaWxpdHkgb2YgRGVtb3N0aGVuZXMgYW5kIHZpZWQgd2l0aCBvbmUgYW5vdGhlciBpbiB0aGVpciBlcGlncmFtcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIERlbWFkZXMsIGhlIGhhZCBub3QgbG9uZyBlbmpveWVkIGhpcyBncm93aW5nIHJlcHV0YXRpb24gd2hlbiB2ZW5nZWFuY2UgZm9yIERlbW9zdGhlbmVzIGJyb3VnaHQgaGltIGludG8gTWFjZWRvbmlhLCB3aG9zZSBwZW9wbGUgaGUgaGFkIGRpc2dyYWNlZnVsbHkgZmxhdHRlcmVkLCBvbmx5IHRvIGJlIGJ5IHRoZW0ganVzdGx5IHB1dCB0byBkZWF0aC4gSGUgaGFkIGJlZW4gb2Jub3hpb3VzIHRvIHRoZW0gZXZlbiBiZWZvcmUgdGhpcywgYnV0IG5vdyBmZWxsIHVuZGVyIGEgY2hhcmdlIGZyb20gd2hpY2ggdGhlcmUgd2FzIG5vIGVzY2FwZS4gQSBsZXR0ZXIgb2YgaGlzLCBuYW1lbHksIGxlYWtlZCBvdXQsIGluIHdoaWNoIGhlIGhhZCB1cmdlZCBQZXJkaWNjYXMgdG8gc2VpemUgTWFjZWRvbmlhIGFuZCBkZWxpdmVyIHRoZSBHcmVla3MsIHdobywgaGUgc2FpZCwgd2VyZSBmYXN0ZW5lZCB0byBpdCBvbmx5IGJ5IGFuIG9sZCBhbmQgcm90dGVuIHRocmVhZCAobWVhbmluZyBBbnRpcGF0ZXIpLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBEZWluYXJjaHVzIHRoZSBDb3JpbnRoaWFuIGRlbm91bmNlZCBoaW0gZm9yIHRoaXMsIENhc3NhbmRlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzb24gb2YgQW50aXBhdGVyIGFuZCwgbGF0ZXIgaGlzIHN1Y2Nlc3Nvci48L25vdGU+IGZsZXcgaW50byBhIHJhZ2UgYW5kIHNsZXcgdGhlIHNvbiBvZiBEZW1hZGVzIGFzIGhlIHN0b29kIGNsb3NlIGJ5IGhpcyBmYXRoZXIncyBzaWRlLCBhbmQgdGhlbiBvcmRlcmVkIHRoYXQgRGVtYWRlcyBzaG91bGQgYmUgbGlrZXdpc2Uga2lsbGVkLiBEZW1hZGVzIHdhcyBub3cgbGVhcm5pbmcgYW1pZCBoaXMgZXh0cmVtZXN0IG1pc2ZvcnR1bmVzIHRoYXQgdHJhaXRvcnMgc2VsbCB0aGVtc2VsdmVzIGZpcnN0LCBhIHRydXRoIG9mIHdoaWNoIERlbW9zdGhlbmVzIGhhZCBvZnRlbiBhc3N1cmVkIGhpbSwgYnV0IHdoaWNoIGhlIHdvdWxkIG5vdCBiZWxpZXZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBEZW1hZGVzLCBoZSBoYWQgbm90IGxvbmcgZW5qb3llZCBoaXMgZ3Jvd2luZyByZXB1dGF0aW9uIHdoZW4gdmVuZ2VhbmNlIGZvciBEZW1vc3RoZW5lcyBicm91Z2h0IGhpbSBpbnRvIE1hY2Vkb25pYSwgd2hvc2UgcGVvcGxlIGhlIGhhZCBkaXNncmFjZWZ1bGx5IGZsYXR0ZXJlZCwgb25seSB0byBiZSBieSB0aGVtIGp1c3RseSBwdXQgdG8gZGVhdGguIEhlIGhhZCBiZWVuIG9ibm94aW91cyB0byB0aGVtIGV2ZW4gYmVmb3JlIHRoaXMsIGJ1dCBub3cgZmVsbCB1bmRlciBhIGNoYXJnZSBmcm9tIHdoaWNoIHRoZXJlIHdhcyBubyBlc2NhcGUuIEEgbGV0dGVyIG9mIGhpcywgbmFtZWx5LCBsZWFrZWQgb3V0LCBpbiB3aGljaCBoZSBoYWQgdXJnZWQgUGVyZGljY2FzIHRvIHNlaXplIE1hY2Vkb25pYSBhbmQgZGVsaXZlciB0aGUgR3JlZWtzLCB3aG8sIGhlIHNhaWQsIHdlcmUgZmFzdGVuZWQgdG8gaXQgb25seSBieSBhbiBvbGQgYW5kIHJvdHRlbiB0aHJlYWQgKG1lYW5pbmcgQW50aXBhdGVyKS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
