var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  if (Array.isArray(lineNumber)) {
    lineNumber = lineNumber[0];
  }
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(refs) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = null;
  for (var i = 0; i < refs.length; i++) {
    var ref = refs[i];
    translatedSection = document.getElementsByClassName(ref);
    if (translatedSection)
      break;
  }
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(ref)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[ref]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIERpb255c2l1cywgd2hlbiBUaW1vbGVvbiBlbmdhZ2VkIGhpbSwgd2FzIGFsdG9nZXRoZXIgY3J1c2hlZCBhbmQgZGVzcGVyYXRlLiBBbmQsIGFnYWluLCBpdCBtaWdodCBiZSBzYWlkIGluIGZhdm91ciBvZiBUaW1vbGVvbiB0aGF0IGhlIGNvbnF1ZXJlZCBtYW55IHR5cmFudHMgYW5kIHRoZSBmb3JjZSBvZiB0aGUgQ2FydGhhZ2luaWFucywgbGFyZ2UgYXMgaXQgd2FzLCB3aXRoIHdoYXQgc29sZGllcnMgaGUgY291bGQgZ2V0LCBub3QgaGF2aW5nIGF0IGhpcyBzZXJ2aWNlLCBhcyBBZW1pbGl1cyBoYWQsIG1lbiB3aG8gd2VyZSBleHBlcmllbmNlZCBpbiB3YXIgYW5kIHRhdWdodCB0byBvYmV5IG9yZGVycywgYnV0IG1lbiB3aG8gd2VyZSBoaXJlbGluZ3MgYW5kIGRpc29yZGVybHkgc29sZGllcnMsIGFjY3VzdG9tZWQgdG8gY29uc3VsdCB0aGVpciBvd24gcGxlYXN1cmUgaW4gdGhlaXIgY2FtcGFpZ25zLiBGb3Igd2hlbiBlcXVhbCBzdWNjZXNzZXMgZm9sbG93IGFuIHVuZXF1YWwgZXF1aXBtZW50LCB0aGUgZ3JlYXRlciBjcmVkaXQgYWNjcnVlcyB0byB0aGUgY29tbWFuZGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXIsIGluIHRoZWlyIGFkbWluaXN0cmF0aW9uIG9mIGFmZmFpcnMgYm90aCB3ZXJlIGp1c3QgYW5kIGluY29ycnVwdGlibGU7IGJ1dCBBZW1pbGl1cywgaXQgd291bGQgc2VlbSwgd2FzIG1hZGUgc28gZnJvbSB0aGUgb3V0c2V0IG9mIGhpcyBjYXJlZXIgYnkgdGhlIGxhd3MgYW5kIGN1c3RvbXMgb2YgaGlzIGNvdW50cnksIHdoaWxlIFRpbW9sZW9uJ3MgZ3JlYXQgcHJvYml0eSB3YXMgZHVlIHRvIGhpbXNlbGYuIFRoZXJlIGlzIHByb29mIG9mIHRoaXMgaW4gdGhlIGZhY3QgdGhhdCB0aGUgUm9tYW5zIGluIHRoZSB0aW1lIG9mIEFlbWlsaXVzIHdlcmUsIGFsbCBhbGlrZSwgb3JkZXJseSBpbiB0aGVpciBsaXZlcywgb2JzZXJ2YW50IG9mIHVzYWdlLCBhbmQgd2hvbGVzb21lbHkgZmVhcmZ1bCBvZiB0aGUgbGF3cyBhbmQgb2YgdGhlaXIgZmVsbG93IGNpdGl6ZW5zOyB3aGVyZWFzLCBvZiB0aGUgR3JlZWsgbGVhZGVycyBhbmQgZ2VuZXJhbHMgd2hvIHRvb2sgcGFydCBpbiBTaWNpbGlhbiBhZmZhaXJzIGR1cmluZyB0aGUgdGltZSBvZiBUaW1vbGVvbiwgbm90IG9uZSB3YXMgZnJlZSBmcm9tIGNvcnJ1cHRpb24gZXhjZXB0IERpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBEaW9uIHdhcyBzdXNwZWN0ZWQgYnkgbWFueSBvZiBiZWluZyBhbWJpdGlvdXMgZm9yIGEgbW9uYXJjaHkgYW5kIGRyZWFtaW5nIG9mIGEga2luZ2RvbSBsaWtlIHRoYXQgaW4gU3BhcnRhLiBGdXJ0aGVybW9yZSwgVGltYWV1cyBzYXlzIHRoYXQgZXZlbiBHeWxpcHB1cyB3YXMgc2VudCBhd2F5IGluIGlnbm9taW55IGFuZCBkaXNob25vdXIgYnkgdGhlIFN5cmFjdXNhbnMsIGJlY2F1c2UgdGhleSBmb3VuZCBoaW0gZ3VpbHR5IG9mIGF2YXJpY2UgYW5kIGdyZWVkIHdoaWxlIGhlIHdhcyB0aGVpciBnZW5lcmFsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gMjguMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5OaWNpYXM8L3RpdGxlPiwgeHh2aWlpLiAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCBob3cgUGhhcmF4IHRoZSBTcGFydGFuIGFuZCBDYWxsaXBwdXMgdGhlIEF0aGVuaWFuIHZpb2xhdGVkIGxhd3MgYW5kIHRyZWF0aWVzIGluIHRoZWlyIGhvcGVzIG9mIHJ1bGluZyBTaWNpbHksIGhhcyBiZWVuIHRvbGQgYnkgbWFueSB3cml0ZXJzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRpbS4gMTEuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5UaW1vbGVvbjwvdGl0bGU+LCB4aS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHdobyB3ZXJlIHRoZXNlIG1lbiwgb3Igb2YgaG93IGxhcmdlIHJlc291cmNlcyB3ZXJlIHRoZXkgbWFzdGVycywgdGhhdCB0aGV5IGVudGVydGFpbmVkIHN1Y2ggaG9wZXM/IE9uZSBvZiB0aGVtIHdhcyBhIHNlcnZpbGUgZm9sbG93ZXIgb2YgRGlvbnlzaXVzIGFmdGVyIGhlIGhhZCBiZWVuIGRyaXZlbiBvdXQgb2YgU3lyYWN1c2UsIGFuZCBDYWxsaXBwdXMgd2FzIG9uZSBvZiBEaW9uJ3MgY2FwdGFpbnMgb2YgbWVyY2VuYXJpZXMuIEJ1dCBUaW1vbGVvbiwgYXQgdGhlIGVhcm5lc3QgcmVxdWVzdCBvZiB0aGUgU3lyYWN1c2Fucywgd2FzIHNlbnQgdG8gYmUgdGhlaXIgZ2VuZXJhbCwgYW5kIG5lZWRlZCBub3QgdG8gc2VlayBwb3dlciBmcm9tIHRoZW0sIGJ1dCBvbmx5IHRvIGhvbGQgdGhhdCB3aGljaCB0aGV5IGhhZCBnaXZlbiBoaW0gb2YgdGhlaXIgb3duIGZyZWUgd2lsbCwgYW5kIHlldCBoZSBsYWlkIGRvd24gaGlzIG9mZmljZSBhbmQgY29tbWFuZCB3aGVuIGhlIGhhZCBvdmVydGhyb3duIHRoZWlyIHVubGF3ZnVsIHJ1bGVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBpbiB0aGVpciBhZG1pbmlzdHJhdGlvbiBvZiBhZmZhaXJzIGJvdGggd2VyZSBqdXN0IGFuZCBpbmNvcnJ1cHRpYmxlOyBidXQgQWVtaWxpdXMsIGl0IHdvdWxkIHNlZW0sIHdhcyBtYWRlIHNvIGZyb20gdGhlIG91dHNldCBvZiBoaXMgY2FyZWVyIGJ5IHRoZSBsYXdzIGFuZCBjdXN0b21zIG9mIGhpcyBjb3VudHJ5LCB3aGlsZSBUaW1vbGVvbidzIGdyZWF0IHByb2JpdHkgd2FzIGR1ZSB0byBoaW1zZWxmLiBUaGVyZSBpcyBwcm9vZiBvZiB0aGlzIGluIHRoZSBmYWN0IHRoYXQgdGhlIFJvbWFucyBpbiB0aGUgdGltZSBvZiBBZW1pbGl1cyB3ZXJlLCBhbGwgYWxpa2UsIG9yZGVybHkgaW4gdGhlaXIgbGl2ZXMsIG9ic2VydmFudCBvZiB1c2FnZSwgYW5kIHdob2xlc29tZWx5IGZlYXJmdWwgb2YgdGhlIGxhd3MgYW5kIG9mIHRoZWlyIGZlbGxvdyBjaXRpemVuczsgd2hlcmVhcywgb2YgdGhlIEdyZWVrIGxlYWRlcnMgYW5kIGdlbmVyYWxzIHdobyB0b29rIHBhcnQgaW4gU2ljaWxpYW4gYWZmYWlycyBkdXJpbmcgdGhlIHRpbWUgb2YgVGltb2xlb24sIG5vdCBvbmUgd2FzIGZyZWUgZnJvbSBjb3JydXB0aW9uIGV4Y2VwdCBEaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBEaW9uIHdhcyBzdXNwZWN0ZWQgYnkgbWFueSBvZiBiZWluZyBhbWJpdGlvdXMgZm9yIGEgbW9uYXJjaHkgYW5kIGRyZWFtaW5nIG9mIGEga2luZ2RvbSBsaWtlIHRoYXQgaW4gU3BhcnRhLiBGdXJ0aGVybW9yZSwgVGltYWV1cyBzYXlzIHRoYXQgZXZlbiBHeWxpcHB1cyB3YXMgc2VudCBhd2F5IGluIGlnbm9taW55IGFuZCBkaXNob25vdXIgYnkgdGhlIFN5cmFjdXNhbnMsIGJlY2F1c2UgdGhleSBmb3VuZCBoaW0gZ3VpbHR5IG9mIGF2YXJpY2UgYW5kIGdyZWVkIHdoaWxlIGhlIHdhcyB0aGVpciBnZW5lcmFsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDI4LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeHh2aWlpLiAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEFuZCBob3cgUGhhcmF4IHRoZSBTcGFydGFuIGFuZCBDYWxsaXBwdXMgdGhlIEF0aGVuaWFuIHZpb2xhdGVkIGxhd3MgYW5kIHRyZWF0aWVzIGluIHRoZWlyIGhvcGVzIG9mIHJ1bGluZyBTaWNpbHksIGhhcyBiZWVuIHRvbGQgYnkgbWFueSB3cml0ZXJzLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gMjguMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pY2lhczwvdGl0bGU+LCB4eHZpaWkuIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pY2lhczwvdGl0bGU+LCB4eHZpaWkuIDIgZi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gVGltLiAxMS40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGltb2xlb248L3RpdGxlPiwgeGkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaW0uIDExLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaW1vbGVvbjwvdGl0bGU+LCB4aS4gNC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRpbW9sZW9uPC90aXRsZT4sIHhpLiA0LjwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgd2hvIHdlcmUgdGhlc2UgbWVuLCBvciBvZiBob3cgbGFyZ2UgcmVzb3VyY2VzIHdlcmUgdGhleSBtYXN0ZXJzLCB0aGF0IHRoZXkgZW50ZXJ0YWluZWQgc3VjaCBob3Blcz8gT25lIG9mIHRoZW0gd2FzIGEgc2VydmlsZSBmb2xsb3dlciBvZiBEaW9ueXNpdXMgYWZ0ZXIgaGUgaGFkIGJlZW4gZHJpdmVuIG91dCBvZiBTeXJhY3VzZSwgYW5kIENhbGxpcHB1cyB3YXMgb25lIG9mIERpb24ncyBjYXB0YWlucyBvZiBtZXJjZW5hcmllcy4gQnV0IFRpbW9sZW9uLCBhdCB0aGUgZWFybmVzdCByZXF1ZXN0IG9mIHRoZSBTeXJhY3VzYW5zLCB3YXMgc2VudCB0byBiZSB0aGVpciBnZW5lcmFsLCBhbmQgbmVlZGVkIG5vdCB0byBzZWVrIHBvd2VyIGZyb20gdGhlbSwgYnV0IG9ubHkgdG8gaG9sZCB0aGF0IHdoaWNoIHRoZXkgaGFkIGdpdmVuIGhpbSBvZiB0aGVpciBvd24gZnJlZSB3aWxsLCBhbmQgeWV0IGhlIGxhaWQgZG93biBoaXMgb2ZmaWNlIGFuZCBjb21tYW5kIHdoZW4gaGUgaGFkIG92ZXJ0aHJvd24gdGhlaXIgdW5sYXdmdWwgcnVsZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcywgaG93ZXZlciwgd29ydGh5IG9mIGFkbWlyYXRpb24gaW4gQWVtaWxpdXMgdGhhdCwgYWx0aG91Z2ggaGUgaGFkIHN1YmR1ZWQgc28gZ3JlYXQgYSBraW5nZG9tLCBoZSBkaWQgbm90IGFkZCBvbmUgZHJhY2htYSB0byBoaXMgc3Vic3RhbmNlLCBub3Igd291bGQgaGUgdG91Y2ggb3IgZXZlbiBsb29rIHVwb24gdGhlIGNvbnF1ZXJlZCB0cmVhc3VyZTsgYW5kIHlldCBoZSBtYWRlIG1hbnkgbGliZXJhbCBnaWZ0cyB0byBvdGhlcnMuIE5vdywgSSBkbyBub3Qgc2F5IHRoYXQgVGltb2xlb24gaXMgdG8gYmUgYmxhbWVkIGZvciBhY2NlcHRpbmcgYSBmaW5lIGhvdXNlIGFuZCBjb3VudHJ5IGVzdGF0ZSwgZm9yIGFjY2VwdGFuY2UgdW5kZXIgc3VjaCBjaXJjdW1zdGFuY2VzIGlzIG5vdCBkaXNncmFjZWZ1bDsgYnV0IG5vdCB0byBhY2NlcHQgaXMgYmV0dGVyLCBhbmQgdGhhdCBpcyBhIHN1cnBhc3NpbmcgdmlydHVlIHdoaWNoIHNob3dzIHRoYXQgaXQgZG9lcyBub3Qgd2FudCB3aGF0IGl0IG1pZ2h0IGxhd2Z1bGx5IGhhdmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzLCBob3dldmVyLCB3b3J0aHkgb2YgYWRtaXJhdGlvbiBpbiBBZW1pbGl1cyB0aGF0LCBhbHRob3VnaCBoZSBoYWQgc3ViZHVlZCBzbyBncmVhdCBhIGtpbmdkb20sIGhlIGRpZCBub3QgYWRkIG9uZSBkcmFjaG1hIHRvIGhpcyBzdWJzdGFuY2UsIG5vciB3b3VsZCBoZSB0b3VjaCBvciBldmVuIGxvb2sgdXBvbiB0aGUgY29ucXVlcmVkIHRyZWFzdXJlOyBhbmQgeWV0IGhlIG1hZGUgbWFueSBsaWJlcmFsIGdpZnRzIHRvIG90aGVycy4gTm93LCBJIGRvIG5vdCBzYXkgdGhhdCBUaW1vbGVvbiBpcyB0byBiZSBibGFtZWQgZm9yIGFjY2VwdGluZyBhIGZpbmUgaG91c2UgYW5kIGNvdW50cnkgZXN0YXRlLCBmb3IgYWNjZXB0YW5jZSB1bmRlciBzdWNoIGNpcmN1bXN0YW5jZXMgaXMgbm90IGRpc2dyYWNlZnVsOyBidXQgbm90IHRvIGFjY2VwdCBpcyBiZXR0ZXIsIGFuZCB0aGF0IGlzIGEgc3VycGFzc2luZyB2aXJ0dWUgd2hpY2ggc2hvd3MgdGhhdCBpdCBkb2VzIG5vdCB3YW50IHdoYXQgaXQgbWlnaHQgbGF3ZnVsbHkgaGF2ZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIGEgYm9keSB0aGF0IGNhbiBlbmR1cmUgb25seSBoZWF0IG9yIGNvbGQgaXMgbGVzcyBwb3dlcmZ1bCB0aGFuIG9uZSB0aGF0IGlzIHdlbGwgYWRhcHRlZCBieSBuYXR1cmUgdG8gd2l0aHN0YW5kIGJvdGggZXh0cmVtZXMgYWxpa2UuIEluIGxpa2UgbWFubmVyIGEgc3Bpcml0IGlzIGFic29sdXRlbHkgdmlnb3JvdXMgYW5kIHN0cm9uZyBpZiBpdCBpcyBuZWl0aGVyIHNwb2lsZWQgYW5kIGVsYXRlZCBieSB0aGUgaW5zb2xlbmNlIHdoaWNoIHByb3NwZXJpdHkgYnJpbmdzLCBub3IgaHVtYmxlZCBieSBhZHZlcnNpdHkuIFRoZSBjaGFyYWN0ZXIgb2YgQWVtaWxpdXMsIHRoZXJlZm9yZSwgd2FzIG1hbmlmZXN0bHkgbW9yZSBwZXJmZWN0LCBzaW5jZSBpbiB0aGUgZ3JpZXZvdXMgbWlzZm9ydHVuZSBhbmQgZ3JlYXQgc29ycm93IGJyb3VnaHQgdXBvbiBoaW0gYnkgdGhlIGRlYXRoIG9mIGhpcyBzb25zIGhlIHdhcyBzZWVuIHRvIGhhdmUgbm8gbGVzcyBncmVhdG5lc3MgYW5kIG5vIGxlc3MgZGlnbml0eSB0aGFuIGluIHRoZSBtaWRzdCBvZiBoaXMgc3VjY2Vzc2VzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz53aGVyZWFzIFRpbW9sZW9uLCBhbHRob3VnaCBoZSBoYWQgYWN0ZWQgaW4gYSBub2JsZSB3YXkgd2l0aCByZWdhcmQgdG8gaGlzIGJyb3RoZXIsIGNvdWxkIG5vdCByZWFzb24gZG93biBoaXMgc29ycm93LCBidXQgd2FzIHByb3N0cmF0ZWQgd2l0aCBncmllZiBhbmQgcmVwZW50YW5jZSwgYW5kIGZvciB0d2VudHkgeWVhcnMgY291bGQgbm90IGVuZHVyZSB0aGUgc2lnaHQgb2YgYmVtYSBvciBtYXJrZXQtcGxhY2UuIE9uZSBzaG91bGQgc2NydXB1bG91c2x5IHNodW4gZGlzZ3JhY2VmdWwgZGVlZHM7IGJ1dCB0aGUgYW54aW91cyBmZWFyIG9mIGV2ZXJ5IGtpbmQgb2YgaWxsIHJlcG9ydCBhbW9uZyBtZW4gYXJndWVzIGEgbmF0dXJlIHdoaWNoIGlzIGluZGVlZCBraW5kbHkgYW5kIHNlbnNpdGl2ZSwgYnV0IGhhcyBub3QgZ3JlYXRuZXNzLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBhIGJvZHkgdGhhdCBjYW4gZW5kdXJlIG9ubHkgaGVhdCBvciBjb2xkIGlzIGxlc3MgcG93ZXJmdWwgdGhhbiBvbmUgdGhhdCBpcyB3ZWxsIGFkYXB0ZWQgYnkgbmF0dXJlIHRvIHdpdGhzdGFuZCBib3RoIGV4dHJlbWVzIGFsaWtlLiBJbiBsaWtlIG1hbm5lciBhIHNwaXJpdCBpcyBhYnNvbHV0ZWx5IHZpZ29yb3VzIGFuZCBzdHJvbmcgaWYgaXQgaXMgbmVpdGhlciBzcG9pbGVkIGFuZCBlbGF0ZWQgYnkgdGhlIGluc29sZW5jZSB3aGljaCBwcm9zcGVyaXR5IGJyaW5ncywgbm9yIGh1bWJsZWQgYnkgYWR2ZXJzaXR5LiBUaGUgY2hhcmFjdGVyIG9mIEFlbWlsaXVzLCB0aGVyZWZvcmUsIHdhcyBtYW5pZmVzdGx5IG1vcmUgcGVyZmVjdCwgc2luY2UgaW4gdGhlIGdyaWV2b3VzIG1pc2ZvcnR1bmUgYW5kIGdyZWF0IHNvcnJvdyBicm91Z2h0IHVwb24gaGltIGJ5IHRoZSBkZWF0aCBvZiBoaXMgc29ucyBoZSB3YXMgc2VlbiB0byBoYXZlIG5vIGxlc3MgZ3JlYXRuZXNzIGFuZCBubyBsZXNzIGRpZ25pdHkgdGhhbiBpbiB0aGUgbWlkc3Qgb2YgaGlzIHN1Y2Nlc3NlczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
