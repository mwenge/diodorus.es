var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgdGhpcyBCcnV0dXMsIG9mIHdob20gSSBub3cgd3JpdGUsIG1vZGlmaWVkIGhpcyBkaXNwb3NpdGlvbiBieSBtZWFucyBvZiB0aGUgdHJhaW5pbmcgYW5kIGN1bHR1cmUgd2hpY2ggcGhpbG9zb3BoeSBnaXZlcywgYW5kIHN0aW11bGF0ZWQgYSBuYXR1cmUgd2hpY2ggd2FzIHNlZGF0ZSBhbmQgbWlsZCBieSBhY3RpdmUgZW50ZXJwcmlzZXMsIGFuZCB0aHVzIHNlZW1zIHRvIGhhdmUgYmVlbiBtb3N0IGhhcm1vbmlvdXNseSBhdHRlbXBlcmVkIGZvciB0aGUgcHJhY3RpY2Ugb2YgdmlydHVlLiBBcyBhIGNvbnNlcXVlbmNlLCBldmVuIHRob3NlIHdobyBoYXRlZCBoaW0gb24gYWNjb3VudCBvZiBoaXMgY29uc3BpcmFjeSBhZ2FpbnN0IENhZXNhciBhc2NyaWJlZCB3aGF0ZXZlciB3YXMgbm9ibGUgaW4gdGhlIHVuZGVydGFraW5nIHRvIEJydXR1cywgYnV0IGxhaWQgdGhlIG1vcmUgZGlzdHJlc3NpbmcgZmVhdHVyZXMgb2Ygd2hhdCB3YXMgZG9uZSB0byB0aGUgY2hhcmdlIG9mIENhc3NpdXMsIHdobyB3YXMgYSBraW5zbWFuIG9mIEJydXR1cywgaW5kZWVkLCBhbmQgaGlzIGZyaWVuZCwgYnV0IG5vdCBzbyBzaW1wbGUgYW5kIHNpbmNlcmUgaW4gaGlzIGNoYXJhY3Rlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNlcnZpbGlhLCB0aGUgbW90aGVyIG9mIEJydXR1cywgdHJhY2VkIGhlciBsaW5lYWdlIGJhY2sgdG8gU2VydmlsaXVzIEFoYWxhLCB3aG8sIHdoZW4gU3B1cml1cyBNYWVsaXVzIHdhcyBzZWRpdGlvdXNseSBwbG90dGluZyB0byB1c3VycCBhYnNvbHV0ZSBwb3dlciwgdG9vayBhIGRhZ2dlciB1bmRlciBoaXMgYXJtLCB3ZW50IGludG8gdGhlIGZvcnVtLCBkcmV3IG5pZ2ggdGhlIG1hbiwgYXMgaWYgaW50ZW5kaW5nIHRvIGNvbmZlciBwcml2YXRlbHkgd2l0aCBoaW0sIGFuZCB3aGVuIGhlIGluY2xpbmVkIGhpcyBoZWFkIHRvIGxpc3Rlbiwgc3RhYmJlZCBoaW0gdG8gZGVhdGguPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA0MzkgQi5DLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiA0LjEzLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIGl2LiAxMyBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDQuMTMuMSIgdmFsaWQ9InllcyI+TGl2eSwgaXYuIDEzIGYuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzLCBhdCBhbGwgZXZlbnRzLCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQ7IGJ1dCBhcyB0byB0aGUgbGluZWFnZSBvZiBCcnV0dXMgYnkgaGlzIGZhdGhlcidzIHNpZGUsIHRob3NlIHdobyBkaXNwbGF5IGdyZWF0IGhhdHJlZCBhbmQgbWFsZXZvbGVuY2UgdG93YXJkcyBoaW0gYmVjYXVzZSBvZiB0aGUgbXVyZGVyIG9mIENhZXNhciBkZW55IHRoYXQgaXQgZ29lcyBiYWNrIHRvIHRoYXQgQnJ1dHVzIHdobyBleHBlbGxlZCB0aGUgVGFycXVpbnMsIHNpbmNlIG5vIG9mZnNwcmluZyB3YXMgbGVmdCB0byBoaW0gd2hlbiBoZSBoYWQgc2xhaW4gaGlzIHNvbnMuIFRoZSBhbmNlc3RvciBvZiBCcnV0dXMsIHRoZXkgc2F5LCB3YXMgYSBwbGViZWlhbiwgc29uIG9mIGEgc3Rld2FyZCBieSB0aGUgbmFtZSBvZiBCcnV0dXMsIGFuZCBoYWQgb25seSByZWNlbnRseSByaXNlbiB0byBvZmZpY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBvc2VpZG9uaXVzIHRoZSBwaGlsb3NvcGhlciwgaG93ZXZlciwgc2F5cyB0aGF0IHRoZSB0d28gc29ucyBvZiBCcnV0dXMgd2hvIHdlcmUgb2YgYWdlIHBlcmlzaGVkIGFjY29yZGluZyB0byB0aGUgc3RvcnksIGJ1dCB0aGF0IGEgdGhpcmQgc29uIHdhcyBsZWZ0LCBhbiBpbmZhbnQsIGZyb20gd2hvbSB0aGUgZmFtaWx5IGRlc2NlbmRlZC4gSGUgc2F5cywgbW9yZW92ZXIsIHRoYXQgdGhlcmUgd2VyZSBjZXJ0YWlubHkgaWxsdXN0cmlvdXMgbWVuIG9mIHRoaXMgaG91c2UgaW4gaGlzIG93biBkYXksIHNvbWUgb2Ygd2hvbSBjYWxsZWQgYXR0ZW50aW9uIHRvIHRoZWlyIGxpa2VuZXNzIGluIGZvcm0gYW5kIGZlYXR1cmVzIHRvIHRoZSBzdGF0dWUgb2YgQnJ1dHVzLiBUaHVzIG11Y2gsIHRoZW4sIG9uIHRoaXMgaGVhZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIGF0IGFsbCBldmVudHMsIGlzIGdlbmVyYWxseSBhZG1pdHRlZDsgYnV0IGFzIHRvIHRoZSBsaW5lYWdlIG9mIEJydXR1cyBieSBoaXMgZmF0aGVyJ3Mgc2lkZSwgdGhvc2Ugd2hvIGRpc3BsYXkgZ3JlYXQgaGF0cmVkIGFuZCBtYWxldm9sZW5jZSB0b3dhcmRzIGhpbSBiZWNhdXNlIG9mIHRoZSBtdXJkZXIgb2YgQ2Flc2FyIGRlbnkgdGhhdCBpdCBnb2VzIGJhY2sgdG8gdGhhdCBCcnV0dXMgd2hvIGV4cGVsbGVkIHRoZSBUYXJxdWlucywgc2luY2Ugbm8gb2Zmc3ByaW5nIHdhcyBsZWZ0IHRvIGhpbSB3aGVuIGhlIGhhZCBzbGFpbiBoaXMgc29ucy4gVGhlIGFuY2VzdG9yIG9mIEJydXR1cywgdGhleSBzYXksIHdhcyBhIHBsZWJlaWFuLCBzb24gb2YgYSBzdGV3YXJkIGJ5IHRoZSBuYW1lIG9mIEJydXR1cywgYW5kIGhhZCBvbmx5IHJlY2VudGx5IHJpc2VuIHRvIG9mZmljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlBvc2VpZG9uaXVzIHRoZSBwaGlsb3NvcGhlciwgaG93ZXZlciwgc2F5cyB0aGF0IHRoZSB0d28gc29ucyBvZiBCcnV0dXMgd2hvIHdlcmUgb2YgYWdlIHBlcmlzaGVkIGFjY29yZGluZyB0byB0aGUgc3RvcnksIGJ1dCB0aGF0IGEgdGhpcmQgc29uIHdhcyBsZWZ0LCBhbiBpbmZhbnQsIGZyb20gd2hvbSB0aGUgZmFtaWx5IGRlc2NlbmRlZC4gSGUgc2F5cywgbW9yZW92ZXIsIHRoYXQgdGhlcmUgd2VyZSBjZXJ0YWlubHkgaWxsdXN0cmlvdXMgbWVuIG9mIHRoaXMgaG91c2UgaW4gaGlzIG93biBkYXksIHNvbWUgb2Ygd2hvbSBjYWxsZWQgYXR0ZW50aW9uIHRvIHRoZWlyIGxpa2VuZXNzIGluIGZvcm0gYW5kIGZlYXR1cmVzIHRvIHRoZSBzdGF0dWUgb2YgQnJ1dHVzLiBUaHVzIG11Y2gsIHRoZW4sIG9uIHRoaXMgaGVhZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TZXJ2aWxpYSwgdGhlIG1vdGhlciBvZiBCcnV0dXMsIHdhcyBhIHNpc3RlciBvZiBDYXRvIHRoZSBwaGlsb3NvcGhlciwgYW5kIEJydXR1cyBoYWQgYSBoaWdoZXIgZXN0ZWVtIGZvciBoaW0gdGhhbiBmb3IgYW55IG90aGVyIFJvbWFuLCBDYXRvIGJlaW5nIGhpcyB1bmNsZSBhbmQgYWZ0ZXJ3YXJkcyBiZWNvbWluZyBoaXMgZmF0aGVyLWluLWxhdy4gVGhlcmUgd2FzIHByYWN0aWNhbGx5IG5vIEdyZWVrIHBoaWxvc29waGVyIHdpdGggd2hvbSBCcnV0dXMgd2FzIHVuYWNxdWFpbnRlZCBvciB1bmZhbWlsaWFyLCBidXQgaGUgZGV2b3RlZCBoaW1zZWxmIHBhcnRpY3VsYXJseSB0byB0aGUgZGlzY2lwbGVzIG9mIFBsYXRvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UbyB0aGUgTmV3IGFuZCBNaWRkbGUgQWNhZGVteSwgYXMgdGhleSBhcmUgY2FsbGVkLCBoZSB3YXMgbm90IHZlcnkgcGFydGlhbCwgYnV0IGNsdW5nIHRvIHRoZSBPbGQuIEhlIHdhcyB0aGVyZWZvcmUgYWx3YXlzIGFuIGFkbWlyZXIgb2YgQW50aW9jaHVzIG9mIEFzY2Fsb24sIHdob3NlIGJyb3RoZXIgQXJpc3R1cyBoZSBoYWQgbWFkZSBoaXMgZnJpZW5kIGFuZCBob3VzZW1hdGUsIGEgbWFuIHdobyBpbiBsZWFybmluZyB3YXMgaW5mZXJpb3IgdG8gbWFueSBwaGlsb3NvcGhlcnMsIGJ1dCB3aG8gaW4gZ29vZCBzZW5zZSBhbmQgZ2VudGxlbmVzcyB2aWVkIHdpdGggdGhlIGZvcmVtb3N0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5FbXB5bHVzIGFsc28sIHdobyBpcyBvZnRlbiBtZW50aW9uZWQgYnkgQnJ1dHVzIGhpbXNlbGYgaW4gaGlzIGxldHRlcnMsIGFuZCBhbHNvIGJ5IGhpcyBmcmllbmRzLCBhcyBhIGhvdXNlbWF0ZSBvZiBoaXMsIHdhcyBhIHJoZXRvcmljaWFuLCBhbmQgaGFzIGxlZnQgYSBicmllZiBidXQgZXhjZWxsZW50IGFjY291bnQgb2YgdGhlIGFzc2Fzc2luYXRpb24gb2YgQ2Flc2FyLCBlbnRpdGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJydXR1cy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TZXJ2aWxpYSwgdGhlIG1vdGhlciBvZiBCcnV0dXMsIHdhcyBhIHNpc3RlciBvZiBDYXRvIHRoZSBwaGlsb3NvcGhlciwgYW5kIEJydXR1cyBoYWQgYSBoaWdoZXIgZXN0ZWVtIGZvciBoaW0gdGhhbiBmb3IgYW55IG90aGVyIFJvbWFuLCBDYXRvIGJlaW5nIGhpcyB1bmNsZSBhbmQgYWZ0ZXJ3YXJkcyBiZWNvbWluZyBoaXMgZmF0aGVyLWluLWxhdy4gVGhlcmUgd2FzIHByYWN0aWNhbGx5IG5vIEdyZWVrIHBoaWxvc29waGVyIHdpdGggd2hvbSBCcnV0dXMgd2FzIHVuYWNxdWFpbnRlZCBvciB1bmZhbWlsaWFyLCBidXQgaGUgZGV2b3RlZCBoaW1zZWxmIHBhcnRpY3VsYXJseSB0byB0aGUgZGlzY2lwbGVzIG9mIFBsYXRvLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBOZXcgYW5kIE1pZGRsZSBBY2FkZW15LCBhcyB0aGV5IGFyZSBjYWxsZWQsIGhlIHdhcyBub3QgdmVyeSBwYXJ0aWFsLCBidXQgY2x1bmcgdG8gdGhlIE9sZC4gSGUgd2FzIHRoZXJlZm9yZSBhbHdheXMgYW4gYWRtaXJlciBvZiBBbnRpb2NodXMgb2YgQXNjYWxvbiwgd2hvc2UgYnJvdGhlciBBcmlzdHVzIGhlIGhhZCBtYWRlIGhpcyBmcmllbmQgYW5kIGhvdXNlbWF0ZSwgYSBtYW4gd2hvIGluIGxlYXJuaW5nIHdhcyBpbmZlcmlvciB0byBtYW55IHBoaWxvc29waGVycywgYnV0IHdobyBpbiBnb29kIHNlbnNlIGFuZCBnZW50bGVuZXNzIHZpZWQgd2l0aCB0aGUgZm9yZW1vc3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVtcHlsdXMgYWxzbywgd2hvIGlzIG9mdGVuIG1lbnRpb25lZCBieSBCcnV0dXMgaGltc2VsZiBpbiBoaXMgbGV0dGVycywgYW5kIGFsc28gYnkgaGlzIGZyaWVuZHMsIGFzIGEgaG91c2VtYXRlIG9mIGhpcywgd2FzIGEgcmhldG9yaWNpYW4sIGFuZCBoYXMgbGVmdCBhIGJyaWVmIGJ1dCBleGNlbGxlbnQgYWNjb3VudCBvZiB0aGUgYXNzYXNzaW5hdGlvbiBvZiBDYWVzYXIsIGVudGl0bGVkIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CcnV0dXMuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIExhdGluLCBub3csIEJydXR1cyB3YXMgc3VmZmljaWVudGx5IHRyYWluZWQgZm9yIG5hcnJhdGl2ZSBvciBwbGVhZGluZzsgYnV0IGluIEdyZWVrIGhlIGFmZmVjdGVkIHRoZSBicmV2aXR5IG9mIHRoZSBhcG9waHRoZWdtIGFuZCB0aGUgU3BhcnRhbiwgb2Ygd2hpY2ggaGUgc29tZXRpbWVzIGdpdmVzIGEgc3RyaWtpbmcgZXhhbXBsZSBpbiBoaXMgbGV0dGVycyAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgd2hlbiBoZSBoYWQgYWxyZWFkeSBlbWJhcmtlZCB1cG9uIHRoZSB3YXIsIGhlIHdyb3RlIHRvIHRoZSBQZXJnYW1lbmlhbnM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBoZWFyIHRoYXQgeWUgaGF2ZSBnaXZlbiBtb25leSB0byBEb2xhYmVsbGE7IGlmIHllIGdhdmUgaXQgd2lsbGluZ2x5IGNvbmZlc3MgdGhhdCB5ZSBoYXZlIHdyb25nZWQgbWU7IGlmIHVud2lsbGluZ2x5LCBwcm92ZSBpdCBieSBnaXZpbmcgd2lsbGluZ2x5IHRvIG1lLjwvcT4gQWdhaW4sIHRvIHRoZSBTYW1pYW5zOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvdXIgY291bnNlbHMgYXJlIHBhbHRyeSwgeW91ciBzdWJzaWRpZXMgc2xvdzsgd2hhdCwgdGhpbmsgeWUsIHdpbGwgYmUgdGhlIGVuZCBvZiB0aGlzPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gYW5vdGhlciBsZXR0ZXI6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlIFhhbnRoaWFucyBpZ25vcmVkIG15IGJlbmVmYWN0aW9ucywgYW5kIGhhdmUgbWFkZSB0aGVpciBjb3VudHJ5IGEgZ3JhdmUgZm9yIHRoZWlyIG1hZG5lc3M7IGJ1dCB0aGUgUGF0YXJlYW5zIGVudHJ1c3RlZCB0aGVtc2VsdmVzIHRvIG1lLCBhbmQgbm93IGVuam95IHRoZWlyIGZyZWVkb20gaW4gYWxsIGl0cyBmdWxsbmVzcy4gSXQgaXMgaW4geW91ciBwb3dlciBhbHNvIHRvIGNob29zZSB0aGUgZGVjaXNpb24gb2YgdGhlIFBhdGFyZWFucyBvciB0aGUgZmF0ZSBvZiB0aGUgWGFudGhpYW5zLjwvcT4gU3VjaCwgdGhlbiwgaXMgdGhlIHN0eWxlIG9mIGhpcyByZW1hcmthYmxlIGxldHRlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgd2hlbiBoZSBoYWQgYWxyZWFkeSBlbWJhcmtlZCB1cG9uIHRoZSB3YXIsIGhlIHdyb3RlIHRvIHRoZSBQZXJnYW1lbmlhbnM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGhlYXIgdGhhdCB5ZSBoYXZlIGdpdmVuIG1vbmV5IHRvIERvbGFiZWxsYTsgaWYgeWUgZ2F2ZSBpdCB3aWxsaW5nbHkgY29uZmVzcyB0aGF0IHllIGhhdmUgd3JvbmdlZCBtZTsgaWYgdW53aWxsaW5nbHksIHByb3ZlIGl0IGJ5IGdpdmluZyB3aWxsaW5nbHkgdG8gbWUuPC9xPiBBZ2FpbiwgdG8gdGhlIFNhbWlhbnM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3VyIGNvdW5zZWxzIGFyZSBwYWx0cnksIHlvdXIgc3Vic2lkaWVzIHNsb3c7IHdoYXQsIHRoaW5rIHllLCB3aWxsIGJlIHRoZSBlbmQgb2YgdGhpcz88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBhbm90aGVyIGxldHRlcjogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZSBYYW50aGlhbnMgaWdub3JlZCBteSBiZW5lZmFjdGlvbnMsIGFuZCBoYXZlIG1hZGUgdGhlaXIgY291bnRyeSBhIGdyYXZlIGZvciB0aGVpciBtYWRuZXNzOyBidXQgdGhlIFBhdGFyZWFucyBlbnRydXN0ZWQgdGhlbXNlbHZlcyB0byBtZSwgYW5kIG5vdyBlbmpveSB0aGVpciBmcmVlZG9tIGluIGFsbCBpdHMgZnVsbG5lc3MuIEl0IGlzIGluIHlvdXIgcG93ZXIgYWxzbyB0byBjaG9vc2UgdGhlIGRlY2lzaW9uIG9mIHRoZSBQYXRhcmVhbnMgb3IgdGhlIGZhdGUgb2YgdGhlIFhhbnRoaWFucy48L3E+IFN1Y2gsIHRoZW4sIGlzIHRoZSBzdHlsZSBvZiBoaXMgcmVtYXJrYWJsZSBsZXR0ZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGhlIHdhcyBzdGlsbCBhIHlvdXRoLCBoZSBtYWRlIGEgam91cm5leSB0byBDeXBydXMgd2l0aCBoaXMgdW5jbGUgQ2F0bywgd2hvIHdhcyBzZW50IG91dCBhZ2FpbnN0IFB0b2xlbXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAzNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgY2hhcHRlcnMgeHh4aXYuPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDM2LjEiIHZhbGlkPSJ5ZXMiPnh4eHZpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBbmQgd2hlbiBQdG9sZW15IG1hZGUgYXdheSB3aXRoIGhpbXNlbGYsIENhdG8sIHdobyB3YXMgaGltc2VsZiBvYmxpZ2VkIHRvIHRhcnJ5IGEgd2hpbGUgaW4gUmhvZGVzLCBoYWQgYWxyZWFkeSBkaXNwYXRjaGVkIG9uZSBvZiBoaXMgZnJpZW5kcywgQ2FuaWRpdXMsIHRvIHRha2UgY2hhcmdlIG9mIHRoZSBraW5nJ3MgdHJlYXN1cmVzOyBidXQgZmVhcmluZyB0aGF0IGhlIHdvdWxkIG5vdCByZWZyYWluIGZyb20gdGhlZnQsIGhlIHdyb3RlIHRvIEJydXR1cyBiaWRkaW5nIGhpbSBzYWlsIHdpdGggYWxsIHNwZWVkIHRvIEN5cHJ1cyBmcm9tIFBhbXBoeWxpYSwgd2hlcmUgaGUgd2FzIHJlY3J1aXRpbmcgaGlzIGhlYWx0aCBhZnRlciBhIHNldmVyZSBzaWNrbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnJ1dHVzIHNldCBzYWlsLCBidXQgdmVyeSBtdWNoIGFnYWluc3QgaGlzIHdpbGwsIGJvdGggYmVjYXVzZSBoZSBoYWQgcmVnYXJkIGZvciBDYW5pZGl1cywgd2hvbSBoZSB0aG91Z2h0IHRvIGhhdmUgYmVlbiBpZ25vbWluaW91c2x5IGRpc2NhcmRlZCBieSBDYXRvLCBhbmQgYmVjYXVzZSBvbiBnZW5lcmFsIGdyb3VuZHMgaGUgY29uc2lkZXJlZCBzdWNoIHBhaW5zdGFraW5nIGF0dGVudGlvbiB0byBhZG1pbmlzdHJhdGl2ZSBhZmZhaXJzIHRvIGJlIGlsbGliZXJhbCBhbmQgdW53b3J0aHkgb2YgaGltc2VsZiBhcyBhIHlvdW5nIG1hbiBhZGRpY3RlZCB0byBsZXR0ZXJzLiBIb3dldmVyLCBoZSBhcHBsaWVkIGhpbXNlbGYgdG8gdGhpcyB0YXNrIGFsc28sIGFuZCB3b24gQ2F0bydzIHByYWlzZSwgYW5kIGFmdGVyIGNvbnZlcnRpbmcgdGhlIGtpbmcncyBwcm9wZXJ0eSBpbnRvIG1vbmV5LCB0b29rIG1vc3Qgb2YgdGhlIHRyZWFzdXJlIGFuZCBzZXQgc2FpbCBmb3IgUm9tZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBoZSB3YXMgc3RpbGwgYSB5b3V0aCwgaGUgbWFkZSBhIGpvdXJuZXkgdG8gQ3lwcnVzIHdpdGggaGlzIHVuY2xlIENhdG8sIHdobyB3YXMgc2VudCBvdXQgYWdhaW5zdCBQdG9sZW15Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDM0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIGNoYXB0ZXJzIHh4eGl2LjwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDM2LjEiIHZhbGlkPSJ5ZXMiPnh4eHZpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBBbmQgd2hlbiBQdG9sZW15IG1hZGUgYXdheSB3aXRoIGhpbXNlbGYsIENhdG8sIHdobyB3YXMgaGltc2VsZiBvYmxpZ2VkIHRvIHRhcnJ5IGEgd2hpbGUgaW4gUmhvZGVzLCBoYWQgYWxyZWFkeSBkaXNwYXRjaGVkIG9uZSBvZiBoaXMgZnJpZW5kcywgQ2FuaWRpdXMsIHRvIHRha2UgY2hhcmdlIG9mIHRoZSBraW5nJ3MgdHJlYXN1cmVzOyBidXQgZmVhcmluZyB0aGF0IGhlIHdvdWxkIG5vdCByZWZyYWluIGZyb20gdGhlZnQsIGhlIHdyb3RlIHRvIEJydXR1cyBiaWRkaW5nIGhpbSBzYWlsIHdpdGggYWxsIHNwZWVkIHRvIEN5cHJ1cyBmcm9tIFBhbXBoeWxpYSwgd2hlcmUgaGUgd2FzIHJlY3J1aXRpbmcgaGlzIGhlYWx0aCBhZnRlciBhIHNldmVyZSBzaWNrbmVzcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAzNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byB0aGUgWW91bmdlcjwvdGl0bGU+LCBjaGFwdGVycyB4eHhpdi48L2JpYmw+LCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIGNoYXB0ZXJzIHh4eGl2LjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDM2LjEiIHZhbGlkPSJ5ZXMiPnh4eHZpLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJydXR1cyBzZXQgc2FpbCwgYnV0IHZlcnkgbXVjaCBhZ2FpbnN0IGhpcyB3aWxsLCBib3RoIGJlY2F1c2UgaGUgaGFkIHJlZ2FyZCBmb3IgQ2FuaWRpdXMsIHdob20gaGUgdGhvdWdodCB0byBoYXZlIGJlZW4gaWdub21pbmlvdXNseSBkaXNjYXJkZWQgYnkgQ2F0bywgYW5kIGJlY2F1c2Ugb24gZ2VuZXJhbCBncm91bmRzIGhlIGNvbnNpZGVyZWQgc3VjaCBwYWluc3Rha2luZyBhdHRlbnRpb24gdG8gYWRtaW5pc3RyYXRpdmUgYWZmYWlycyB0byBiZSBpbGxpYmVyYWwgYW5kIHVud29ydGh5IG9mIGhpbXNlbGYgYXMgYSB5b3VuZyBtYW4gYWRkaWN0ZWQgdG8gbGV0dGVycy4gSG93ZXZlciwgaGUgYXBwbGllZCBoaW1zZWxmIHRvIHRoaXMgdGFzayBhbHNvLCBhbmQgd29uIENhdG8ncyBwcmFpc2UsIGFuZCBhZnRlciBjb252ZXJ0aW5nIHRoZSBraW5nJ3MgcHJvcGVydHkgaW50byBtb25leSwgdG9vayBtb3N0IG9mIHRoZSB0cmVhc3VyZSBhbmQgc2V0IHNhaWwgZm9yIFJvbWUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSwgd2hlbiB0aGUgc3RhdGUgd2FzIHJlbnQgYnkgZmFjdGlvbnMsIFBvbXBleSBhbmQgQ2Flc2FyIGFwcGVhbGluZyB0byBhcm1zIGFuZCB0aGUgc3VwcmVtZSBwb3dlciBiZWluZyBjb25mb3VuZGVkLCBCcnV0dXMgd2FzIGV4cGVjdGVkIHRvIGNob29zZSB0aGUgc2lkZSBvZiBDYWVzYXIsIHNpbmNlIGhpcyBmYXRoZXIgaGFkIGJlZW4gcHV0IHRvIGRlYXRoIGEgd2hpbGUgYmVmb3JlIGF0IHRoZSBpbnN0aWdhdGlvbiBvZiBQb21wZXk7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciB4dmkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGJ1dCB0aGlua2luZyBpdCBoaXMgZHV0eSB0byBwdXQgdGhlIHB1YmxpYyBnb29kIGFib3ZlIGhpcyBvd24sIGFuZCBob2xkaW5nIHRoYXQgUG9tcGV5J3MgZ3JvdW5kcyBmb3IgZ29pbmcgdG8gd2FyIHdlcmUgYmV0dGVyIHRoYW4gQ2Flc2FyJ3MsIGhlIGF0dGFjaGVkIGhpbXNlbGYgdG8gUG9tcGV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGJlZm9yZSB0aGlzIGhlIHdvdWxkIG5vdCBldmVuIHNwZWFrIHRvIFBvbXBleSB3aGVuIGhlIG1ldCBoaW0sIGNvbnNpZGVyaW5nIGl0IGEgZ3JlYXQgYWJvbWluYXRpb24gdG8gY29udmVyc2Ugd2l0aCB0aGUgbXVyZGVyZXIgb2YgaGlzIGZhdGhlcjsgbm93LCBob3dldmVyLCBsb29raW5nIHVwb24gaGltIGFzIGhpcyBjb3VudHJ5J3MgcnVsZXIsIGhlIHB1dCBoaW1zZWxmIHVuZGVyIGhpcyBvcmRlcnMsIGFuZCBzZXQgc2FpbCBmb3IgQ2lsaWNpYSBhcyBsZWdhdGUgd2l0aCBTZXN0aXVzLCB0byB3aG9tIHRoZSBwcm92aW5jZSBoYWQgYmVlbiBhbGxvdHRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIHRoZXJlIHdhcyBub3RoaW5nIG9mIGltcG9ydGFuY2UgZm9yIGhpbSB0byBkbyB0aGVyZSwgYW5kIHNpbmNlIFBvbXBleSBhbmQgQ2Flc2FyIHdlcmUgbm93IGFib3V0IHRvIG1lZXQgaW4gYSBzdXByZW1lIHN0cnVnZ2xlLCBoZSBjYW1lIG9mIGhpcyBvd24gYWNjb3JkIGludG8gTWFjZWRvbmlhIHRvIHNoYXJlIHRoZSBkYW5nZXIuIEl0IHdhcyB0aGVuLCB0aGV5IHNheSwgdGhhdCBQb21wZXkgd2FzIHNvIGZpbGxlZCB3aXRoIGRlbGlnaHQgYW5kIGFkbWlyYXRpb24gdGhhdCBoZSByb3NlIGZyb20gaGlzIHNlYXQgYXMgQnJ1dHVzIGFwcHJvYWNoZWQsIGFuZCBpbiB0aGUgc2lnaHQgb2YgYWxsIGVtYnJhY2VkIGhpbSBhcyBhIHN1cGVyaW9yLiBEdXJpbmcgdGhlIGNhbXBhaWduLCBmb3Igd2hhdGV2ZXIgcGFydCBvZiB0aGUgZGF5IGhlIHdhcyBub3Qgd2l0aCBQb21wZXksIGhlIGJ1c2llZCBoaW1zZWxmIHdpdGggYm9va3MgYW5kIGxpdGVyYXR1cmUsIG5vdCBvbmx5IHRoZSByZXN0IG9mIHRoZSB0aW1lLCBidXQgZXZlbiBiZWZvcmUgdGhlIGdyZWF0IGJhdHRsZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBQaGFyc2FsdXMgaW4gVGhlc3NhbHksIGluIEF1Z3VzdCBvZiA0OCBCLkMuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aGUgaGVpZ2h0IG9mIHN1bW1lciwgdGhlIGhlYXQgd2FzIGdyZWF0IChzaW5jZSB0aGV5IGhhZCBlbmNhbXBlZCBpbiBtYXJzaHkgcmVnaW9ucyksIGFuZCB0aGV5IHRoYXQgY2FycmllZCB0aGUgdGVudCBvZiBCcnV0dXMgd2VyZSBzbG93IGluIGNvbWluZy4gQnV0IHRob3VnaCBoZSB3YXMgdGh1cyBhbGwgd29ybiBvdXQsIGFuZCB0aG91Z2ggaXQgd2FzIGFsbW9zdCBub29uIGJlZm9yZSBoZSBhbm9pbnRlZCBoaW1zZWxmIGFuZCB0b29rIGEgbGl0dGxlIGZvb2QsIG5ldmVydGhlbGVzcywgd2hpbGUgdGhlIHJlc3Qgd2VyZSBlaXRoZXIgc2xlZXBpbmcgb3Igb2NjdXBpZWQgd2l0aCBhbnhpb3VzIHRob3VnaHRzIGFib3V0IHRoZSBmdXR1cmUsIGhlIGhpbXNlbGYgd2FzIGJ1c3kgdW50aWwgZXZlbmluZyBpbiBtYWtpbmcgYW5kIHdyaXRpbmcgb3V0IGEgY29tcGVuZCBvZiBQb2x5Yml1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlLCB3aGVuIHRoZSBzdGF0ZSB3YXMgcmVudCBieSBmYWN0aW9ucywgUG9tcGV5IGFuZCBDYWVzYXIgYXBwZWFsaW5nIHRvIGFybXMgYW5kIHRoZSBzdXByZW1lIHBvd2VyIGJlaW5nIGNvbmZvdW5kZWQsIEJydXR1cyB3YXMgZXhwZWN0ZWQgdG8gY2hvb3NlIHRoZSBzaWRlIG9mIENhZXNhciwgc2luY2UgaGlzIGZhdGhlciBoYWQgYmVlbiBwdXQgdG8gZGVhdGggYSB3aGlsZSBiZWZvcmUgYXQgdGhlIGluc3RpZ2F0aW9uIG9mIFBvbXBleTs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIHh2aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYnV0IHRoaW5raW5nIGl0IGhpcyBkdXR5IHRvIHB1dCB0aGUgcHVibGljIGdvb2QgYWJvdmUgaGlzIG93biwgYW5kIGhvbGRpbmcgdGhhdCBQb21wZXkncyBncm91bmRzIGZvciBnb2luZyB0byB3YXIgd2VyZSBiZXR0ZXIgdGhhbiBDYWVzYXIncywgaGUgYXR0YWNoZWQgaGltc2VsZiB0byBQb21wZXkuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gMTYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIHh2aS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIHh2aS48L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgYmVmb3JlIHRoaXMgaGUgd291bGQgbm90IGV2ZW4gc3BlYWsgdG8gUG9tcGV5IHdoZW4gaGUgbWV0IGhpbSwgY29uc2lkZXJpbmcgaXQgYSBncmVhdCBhYm9taW5hdGlvbiB0byBjb252ZXJzZSB3aXRoIHRoZSBtdXJkZXJlciBvZiBoaXMgZmF0aGVyOyBub3csIGhvd2V2ZXIsIGxvb2tpbmcgdXBvbiBoaW0gYXMgaGlzIGNvdW50cnkncyBydWxlciwgaGUgcHV0IGhpbXNlbGYgdW5kZXIgaGlzIG9yZGVycywgYW5kIHNldCBzYWlsIGZvciBDaWxpY2lhIGFzIGxlZ2F0ZSB3aXRoIFNlc3RpdXMsIHRvIHdob20gdGhlIHByb3ZpbmNlIGhhZCBiZWVuIGFsbG90dGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSB0aGVyZSB3YXMgbm90aGluZyBvZiBpbXBvcnRhbmNlIGZvciBoaW0gdG8gZG8gdGhlcmUsIGFuZCBzaW5jZSBQb21wZXkgYW5kIENhZXNhciB3ZXJlIG5vdyBhYm91dCB0byBtZWV0IGluIGEgc3VwcmVtZSBzdHJ1Z2dsZSwgaGUgY2FtZSBvZiBoaXMgb3duIGFjY29yZCBpbnRvIE1hY2Vkb25pYSB0byBzaGFyZSB0aGUgZGFuZ2VyLiBJdCB3YXMgdGhlbiwgdGhleSBzYXksIHRoYXQgUG9tcGV5IHdhcyBzbyBmaWxsZWQgd2l0aCBkZWxpZ2h0IGFuZCBhZG1pcmF0aW9uIHRoYXQgaGUgcm9zZSBmcm9tIGhpcyBzZWF0IGFzIEJydXR1cyBhcHByb2FjaGVkLCBhbmQgaW4gdGhlIHNpZ2h0IG9mIGFsbCBlbWJyYWNlZCBoaW0gYXMgYSBzdXBlcmlvci4gRHVyaW5nIHRoZSBjYW1wYWlnbiwgZm9yIHdoYXRldmVyIHBhcnQgb2YgdGhlIGRheSBoZSB3YXMgbm90IHdpdGggUG9tcGV5LCBoZSBidXNpZWQgaGltc2VsZiB3aXRoIGJvb2tzIGFuZCBsaXRlcmF0dXJlLCBub3Qgb25seSB0aGUgcmVzdCBvZiB0aGUgdGltZSwgYnV0IGV2ZW4gYmVmb3JlIHRoZSBncmVhdCBiYXR0bGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCBQaGFyc2FsdXMgaW4gVGhlc3NhbHksIGluIEF1Z3VzdCBvZiA0OCBCLkMuPC9ub3RlPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aGUgaGVpZ2h0IG9mIHN1bW1lciwgdGhlIGhlYXQgd2FzIGdyZWF0IChzaW5jZSB0aGV5IGhhZCBlbmNhbXBlZCBpbiBtYXJzaHkgcmVnaW9ucyksIGFuZCB0aGV5IHRoYXQgY2FycmllZCB0aGUgdGVudCBvZiBCcnV0dXMgd2VyZSBzbG93IGluIGNvbWluZy4gQnV0IHRob3VnaCBoZSB3YXMgdGh1cyBhbGwgd29ybiBvdXQsIGFuZCB0aG91Z2ggaXQgd2FzIGFsbW9zdCBub29uIGJlZm9yZSBoZSBhbm9pbnRlZCBoaW1zZWxmIGFuZCB0b29rIGEgbGl0dGxlIGZvb2QsIG5ldmVydGhlbGVzcywgd2hpbGUgdGhlIHJlc3Qgd2VyZSBlaXRoZXIgc2xlZXBpbmcgb3Igb2NjdXBpZWQgd2l0aCBhbnhpb3VzIHRob3VnaHRzIGFib3V0IHRoZSBmdXR1cmUsIGhlIGhpbXNlbGYgd2FzIGJ1c3kgdW50aWwgZXZlbmluZyBpbiBtYWtpbmcgYW5kIHdyaXRpbmcgb3V0IGEgY29tcGVuZCBvZiBQb2x5Yml1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkLCBtb3Jlb3ZlciwgdGhhdCBDYWVzYXIgYWxzbyB3YXMgY29uY2VybmVkIGZvciBoaXMgc2FmZXR5LCBhbmQgb3JkZXJlZCBoaXMgb2ZmaWNlcnMgbm90IHRvIGtpbGwgQnJ1dHVzIGluIHRoZSBiYXR0bGUsIGJ1dCB0byBzcGFyZSBoaW0sIGFuZCB0YWtlIGhpbSBwcmlzb25lciBpZiBoZSBnYXZlIGhpbXNlbGYgdXAgdm9sdW50YXJpbHksIGFuZCBpZiBoZSBwZXJzaXN0ZWQgaW4gZmlnaHRpbmcgYWdhaW5zdCBjYXB0dXJlLCB0byBsZXQgaGltIGFsb25lIGFuZCBkbyBoaW0gbm8gdmlvbGVuY2U7IGFuZCB0aGF0IENhZXNhciBkaWQgdGhpcyBvdXQgb2YgcmVnYXJkIGZvciBTZXJ2aWxpYSwgdGhlIG1vdGhlciBvZiBCcnV0dXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGlsZSBoZSB3YXMgc3RpbGwgYSB5b3VuZyBtYW4sIGFzIGl0IHNlZW1zLCBDYWVzYXIgaGFkIGJlZW4gaW50aW1hdGUgd2l0aCBTZXJ2aWxpYSwgd2hvIHdhcyBtYWRseSBpbiBsb3ZlIHdpdGggaGltLCBhbmQgaGUgaGFkIHNvbWUgZ3JvdW5kcyBmb3IgYmVsaWV2aW5nIHRoYXQgQnJ1dHVzLCB3aG8gd2FzIGJvcm4gYXQgYWJvdXQgdGhlIHRpbWUgd2hlbiBoZXIgcGFzc2lvbiB3YXMgaW4gZnVsbCBibGF6ZSwgd2FzIGhpcyBvd24gc29uLiBJdCBpcyBzYWlkIGFsc28gdGhhdCB3aGVuIHRoZSBncmVhdCBjb25zcGlyYWN5IG9mIENhdGlsaW5lLCB3aGljaCBjYW1lIG5lYXIgb3ZlcnRocm93aW5nIHRoZSBjaXR5LCBoYWQgY29tZSB0byB0aGUgZWFycyBvZiB0aGUgc2VuYXRlLCBDYXRvIGFuZCBDYWVzYXIsIHdobyB3ZXJlIG9mIGRpZmZlcmVudCBvcGluaW9ucyBhYm91dCB0aGUgbWF0dGVyLCB3ZXJlIHN0YW5kaW5nIHNpZGUgYnkgc2lkZSwgYW5kIGp1c3QgdGhlbiBhIGxpdHRsZSBub3RlIHdhcyBoYW5kZWQgdG8gQ2Flc2FyIGZyb20gb3V0c2lkZSwgd2hpY2ggaGUgcmVhZCBxdWlldGx5LiBCdXQgQ2F0byBjcmllZCBvdXQgdGhhdCBDYWVzYXIgd2FzIG91dHJhZ2VvdXNseSByZWNlaXZpbmcgbGV0dGVycyBvZiBpbnN0cnVjdGlvbiBmcm9tIHRoZSBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcywgYSBncmVhdCB0dW11bHQgYXJvc2UsIGFuZCBDYWVzYXIgZ2F2ZSB0aGUgbWlzc2l2ZSwganVzdCBhcyBpdCB3YXMsIHRvIENhdG8uIENhdG8gZm91bmQsIHdoZW4gaGUgcmVhZCBpdCwgdGhhdCBpdCB3YXMgYSB3YW50b24gYml0IG9mIHdyaXRpbmcgZnJvbSBoaXMgc2lzdGVyIFNlcnZpbGlhLCBhbmQgdGhyb3dpbmcgaXQgdG8gQ2Flc2FyIHdpdGggdGhlIHdvcmRzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGFrZSBpdCwgdGhvdSBzb3QsPC9xPiB0dXJuZWQgYWdhaW4gdG8gdGhlIGJ1c2luZXNzIHVuZGVyIGRpc2N1c3Npb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgeHhpdi4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBTbyBub3RvcmlvdXMgd2FzIFNlcnZpbGlhJ3MgcGFzc2lvbiBmb3IgQ2Flc2FyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBzYWlkLCBtb3Jlb3ZlciwgdGhhdCBDYWVzYXIgYWxzbyB3YXMgY29uY2VybmVkIGZvciBoaXMgc2FmZXR5LCBhbmQgb3JkZXJlZCBoaXMgb2ZmaWNlcnMgbm90IHRvIGtpbGwgQnJ1dHVzIGluIHRoZSBiYXR0bGUsIGJ1dCB0byBzcGFyZSBoaW0sIGFuZCB0YWtlIGhpbSBwcmlzb25lciBpZiBoZSBnYXZlIGhpbXNlbGYgdXAgdm9sdW50YXJpbHksIGFuZCBpZiBoZSBwZXJzaXN0ZWQgaW4gZmlnaHRpbmcgYWdhaW5zdCBjYXB0dXJlLCB0byBsZXQgaGltIGFsb25lIGFuZCBkbyBoaW0gbm8gdmlvbGVuY2U7IGFuZCB0aGF0IENhZXNhciBkaWQgdGhpcyBvdXQgb2YgcmVnYXJkIGZvciBTZXJ2aWxpYSwgdGhlIG1vdGhlciBvZiBCcnV0dXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGlsZSBoZSB3YXMgc3RpbGwgYSB5b3VuZyBtYW4sIGFzIGl0IHNlZW1zLCBDYWVzYXIgaGFkIGJlZW4gaW50aW1hdGUgd2l0aCBTZXJ2aWxpYSwgd2hvIHdhcyBtYWRseSBpbiBsb3ZlIHdpdGggaGltLCBhbmQgaGUgaGFkIHNvbWUgZ3JvdW5kcyBmb3IgYmVsaWV2aW5nIHRoYXQgQnJ1dHVzLCB3aG8gd2FzIGJvcm4gYXQgYWJvdXQgdGhlIHRpbWUgd2hlbiBoZXIgcGFzc2lvbiB3YXMgaW4gZnVsbCBibGF6ZSwgd2FzIGhpcyBvd24gc29uLiBJdCBpcyBzYWlkIGFsc28gdGhhdCB3aGVuIHRoZSBncmVhdCBjb25zcGlyYWN5IG9mIENhdGlsaW5lLCB3aGljaCBjYW1lIG5lYXIgb3ZlcnRocm93aW5nIHRoZSBjaXR5LCBoYWQgY29tZSB0byB0aGUgZWFycyBvZiB0aGUgc2VuYXRlLCBDYXRvIGFuZCBDYWVzYXIsIHdobyB3ZXJlIG9mIGRpZmZlcmVudCBvcGluaW9ucyBhYm91dCB0aGUgbWF0dGVyLCB3ZXJlIHN0YW5kaW5nIHNpZGUgYnkgc2lkZSwgYW5kIGp1c3QgdGhlbiBhIGxpdHRsZSBub3RlIHdhcyBoYW5kZWQgdG8gQ2Flc2FyIGZyb20gb3V0c2lkZSwgd2hpY2ggaGUgcmVhZCBxdWlldGx5LiBCdXQgQ2F0byBjcmllZCBvdXQgdGhhdCBDYWVzYXIgd2FzIG91dHJhZ2VvdXNseSByZWNlaXZpbmcgbGV0dGVycyBvZiBpbnN0cnVjdGlvbiBmcm9tIHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMsIGEgZ3JlYXQgdHVtdWx0IGFyb3NlLCBhbmQgQ2Flc2FyIGdhdmUgdGhlIG1pc3NpdmUsIGp1c3QgYXMgaXQgd2FzLCB0byBDYXRvLiBDYXRvIGZvdW5kLCB3aGVuIGhlIHJlYWQgaXQsIHRoYXQgaXQgd2FzIGEgd2FudG9uIGJpdCBvZiB3cml0aW5nIGZyb20gaGlzIHNpc3RlciBTZXJ2aWxpYSwgYW5kIHRocm93aW5nIGl0IHRvIENhZXNhciB3aXRoIHRoZSB3b3JkcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGFrZSBpdCwgdGhvdSBzb3QsPC9xPiB0dXJuZWQgYWdhaW4gdG8gdGhlIGJ1c2luZXNzIHVuZGVyIGRpc2N1c3Npb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgeHhpdi4gMSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBTbyBub3RvcmlvdXMgd2FzIFNlcnZpbGlhJ3MgcGFzc2lvbiBmb3IgQ2Flc2FyLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byB0aGUgWW91bmdlcjwvdGl0bGU+LCB4eGl2LiAxIGYuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIHh4aXYuIDEgZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBkZWZlYXQgYXQgUGhhcnNhbHVzLCB3aGVuIFBvbXBleSBoYWQgbWFkZSBoaXMgZXNjYXBlIHRvIHRoZSBzZWEgYW5kIGhpcyBjYW1wIHdhcyBiZXNpZWdlZCwgQnJ1dHVzIHdlbnQgb3V0IHVubm90aWNlZCBieSBhIGdhdGUgbGVhZGluZyB0byBhIHBsYWNlIHRoYXQgd2FzIG1hcnNoeSBhbmQgZnVsbCBvZiB3YXRlciBhbmQgcmVlZHMsIGFuZCBtYWRlIGhpcyB3YXkgc2FmZWx5IGJ5IG5pZ2h0IHRvIExhcmlzc2EuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlbmNlIGhlIHdyb3RlIHRvIENhZXNhciwgd2hvIHdhcyBkZWxpZ2h0ZWQgYXQgaGlzIHNhZmUgZXNjYXBlLCBhbmQgYmFkZSBoaW0gY29tZSB0byBoaW0sIGFuZCBub3Qgb25seSBwYXJkb25lZCBoaW0sIGJ1dCBhY3R1YWxseSBtYWRlIGhpbSBhIGhpZ2hseSBob25vdXJlZCBjb21wYW5pb24uIE5vdywgc2luY2Ugbm8gb25lIGNvdWxkIHRlbGwgd2hpdGhlciBQb21wZXkgd2FzIGZsZWVpbmcsIGFuZCBhbGwgd2VyZSBpbiBncmVhdCBwZXJwbGV4aXR5LCBDYWVzYXIgdG9vayBhIGxvbmcgd2FsayB3aXRoIEJydXR1cyBhbG9uZSwgYW5kIHNvdW5kZWQgaGltIG9uIHRoZSBzdWJqZWN0LiBDZXJ0YWluIGNvbnNpZGVyYXRpb25zIGFkdmFuY2VkIGJ5IEJydXR1cyBtYWRlIGhpcyBvcGluaW9uIGNvbmNlcm5pbmcgUG9tcGV5J3MgZmxpZ2h0IHNlZW0gdGhlIGJlc3QsIGFuZCBDYWVzYXIgdGhlcmVmb3JlIHJlbm91bmNlZCBhbGwgb3RoZXIgY291cnNlcyBhbmQgaGFzdGVuZWQgdG93YXJkcyBFZ3lwdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGZvciBQb21wZXksIGhlIHB1dCBpbiBhdCBFZ3lwdCwgYXMgQnJ1dHVzIGNvbmplY3R1cmVkLCBhbmQgdGhlcmUgbWV0IGhpcyBkb29tOyBhcyBmb3IgQ2Flc2FyLCBob3dldmVyLCBCcnV0dXMgdHJpZWQgdG8gc29mdGVuIGhpbSB0b3dhcmRzIENhc3NpdXMgYWxzby4gSGUgYWxzbyBzZXJ2ZWQgYXMgYWR2b2NhdGUgZm9yIHRoZSBraW5nIG9mIEFmcmljYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBhbiBlcnJvciwgZWl0aGVyIG9mIFBsdXRhcmNoJ3MsIG9yIG9mIHRoZSBNU1MuIEluIDQ3IEIuQy4gQnJ1dHVzIHBsZWFkZWQgdW5zdWNjZXNzZnVsbHkgYmVmb3JlIENhZXNhciB0aGUgY2F1c2Ugb2YgRGVpb3RhcnVzLCBraW5nIG9mIEdhbGF0aWEuIENvcmHDq3Mgd291bGQgcmVhZCA8Zm9yZWlnbiBsYW5nPSJncmVlayI+zpPOsc67zrHPhOG/ts69PC9mb3JlaWduPiBmb3IgPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs6bzrnOsuG9u8+Jzr08L2ZvcmVpZ24+Ljwvbm90ZT4gYW5kIHRob3VnaCBoZSBsb3N0IHRoZSBjYXNlLCBvd2luZyB0byB0aGUgbWFnbml0dWRlIG9mIHRoZSBhY2N1c2F0aW9ucyBhZ2FpbnN0IGhpcyBjbGllbnQsIHN0aWxsLCBieSBzdXBwbGljYXRpb25zIGFuZCBlbnRyZWF0aWVzIGluIGhpcyBiZWhhbGYgaGUgc2F2ZWQgbXVjaCBvZiBoaXMga2luZ2RvbSBmb3IgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgc2FpZCB0aGF0IENhZXNhciwgd2hlbiBoZSBmaXJzdCBoZWFyZCBCcnV0dXMgc3BlYWsgaW4gcHVibGljLCBzYWlkIHRvIGhpcyBmcmllbmRzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkga25vdyBub3Qgd2hhdCB0aGlzIHlvdW5nIG1hbiB3YW50cywgYnV0IGFsbCB0aGF0IGhlIHdhbnRzIGhlIHdhbnRzIHZlcnkgbXVjaC48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBBdHQuIDE0LjEuMiIgdmFsaWQ9InllcyI+Q2ljZXJvIDx0aXRsZT5hZCBBdHQuPC90aXRsZT4geGl2LiAxLCAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBGb3IgdGhlIHdlaWdodCBvZiBoaXMgY2hhcmFjdGVyLCBhbmQgdGhlIGZhY3QgdGhhdCBubyBvbmUgZm91bmQgaXQgZWFzeSB0byBtYWtlIGhpbSBsaXN0ZW4gdG8gYXBwZWFscyBmb3IgZmF2b3VyLCBidXQgdGhhdCBoZSBhY2NvbXBsaXNoZWQgaGlzIGVuZHMgYnkgcmVhc29uaW5nIGFuZCB0aGUgYWRvcHRpb24gb2Ygbm9ibGUgcHJpbmNpcGxlcywgbWFkZSBoaXMgZWZmb3J0cywgd2hpdGhlcnNvZXZlciBkaXJlY3RlZCwgcG93ZXJmdWwgYW5kIGVmZmljYWNpb3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5ObyBmbGF0dGVyeSBjb3VsZCBpbmR1Y2UgaGltIHRvIGdyYW50IGFuIHVuanVzdCBwZXRpdGlvbiwgYW5kIHRoYXQgaW5hYmlsaXR5IHRvIHdpdGhzdGFuZCBzaGFtZWxlc3MgaW1wb3J0dW5pdHksIHdoaWNoIHNvbWUgY2FsbCB0aW1pZGl0eSwgaGUgcmVnYXJkZWQgYXMgbW9zdCBkaXNncmFjZWZ1bCBpbiBhIGdyZWF0IG1hbiwgYW5kIGhlIHdhcyB3b250IHRvIHNheSB0aGF0IHRob3NlIHdobyB3ZXJlIHVuYWJsZSB0byByZWZ1c2UgYW55dGhpbmcsIGluIGhpcyBvcGluaW9uLCBtdXN0IGhhdmUgYmVlbiBjb3JydXB0ZWQgaW4gdGhlaXIgeW91dGguCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgZGVmZWF0IGF0IFBoYXJzYWx1cywgd2hlbiBQb21wZXkgaGFkIG1hZGUgaGlzIGVzY2FwZSB0byB0aGUgc2VhIGFuZCBoaXMgY2FtcCB3YXMgYmVzaWVnZWQsIEJydXR1cyB3ZW50IG91dCB1bm5vdGljZWQgYnkgYSBnYXRlIGxlYWRpbmcgdG8gYSBwbGFjZSB0aGF0IHdhcyBtYXJzaHkgYW5kIGZ1bGwgb2Ygd2F0ZXIgYW5kIHJlZWRzLCBhbmQgbWFkZSBoaXMgd2F5IHNhZmVseSBieSBuaWdodCB0byBMYXJpc3NhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlbmNlIGhlIHdyb3RlIHRvIENhZXNhciwgd2hvIHdhcyBkZWxpZ2h0ZWQgYXQgaGlzIHNhZmUgZXNjYXBlLCBhbmQgYmFkZSBoaW0gY29tZSB0byBoaW0sIGFuZCBub3Qgb25seSBwYXJkb25lZCBoaW0sIGJ1dCBhY3R1YWxseSBtYWRlIGhpbSBhIGhpZ2hseSBob25vdXJlZCBjb21wYW5pb24uIE5vdywgc2luY2Ugbm8gb25lIGNvdWxkIHRlbGwgd2hpdGhlciBQb21wZXkgd2FzIGZsZWVpbmcsIGFuZCBhbGwgd2VyZSBpbiBncmVhdCBwZXJwbGV4aXR5LCBDYWVzYXIgdG9vayBhIGxvbmcgd2FsayB3aXRoIEJydXR1cyBhbG9uZSwgYW5kIHNvdW5kZWQgaGltIG9uIHRoZSBzdWJqZWN0LiBDZXJ0YWluIGNvbnNpZGVyYXRpb25zIGFkdmFuY2VkIGJ5IEJydXR1cyBtYWRlIGhpcyBvcGluaW9uIGNvbmNlcm5pbmcgUG9tcGV5J3MgZmxpZ2h0IHNlZW0gdGhlIGJlc3QsIGFuZCBDYWVzYXIgdGhlcmVmb3JlIHJlbm91bmNlZCBhbGwgb3RoZXIgY291cnNlcyBhbmQgaGFzdGVuZWQgdG93YXJkcyBFZ3lwdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgUG9tcGV5LCBoZSBwdXQgaW4gYXQgRWd5cHQsIGFzIEJydXR1cyBjb25qZWN0dXJlZCwgYW5kIHRoZXJlIG1ldCBoaXMgZG9vbTsgYXMgZm9yIENhZXNhciwgaG93ZXZlciwgQnJ1dHVzIHRyaWVkIHRvIHNvZnRlbiBoaW0gdG93YXJkcyBDYXNzaXVzIGFsc28uIEhlIGFsc28gc2VydmVkIGFzIGFkdm9jYXRlIGZvciB0aGUga2luZyBvZiBBZnJpY2EsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBhbiBlcnJvciwgZWl0aGVyIG9mIFBsdXRhcmNoJ3MsIG9yIG9mIHRoZSBNU1MuIEluIDQ3IEIuQy4gQnJ1dHVzIHBsZWFkZWQgdW5zdWNjZXNzZnVsbHkgYmVmb3JlIENhZXNhciB0aGUgY2F1c2Ugb2YgRGVpb3RhcnVzLCBraW5nIG9mIEdhbGF0aWEuIENvcmHDq3Mgd291bGQgcmVhZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ok86xzrvOsc+E4b+2zr08L2ZvcmVpZ24+IGZvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Om865zrLhvbvPic69PC9mb3JlaWduPi48L25vdGU+IGFuZCB0aG91Z2ggaGUgbG9zdCB0aGUgY2FzZSwgb3dpbmcgdG8gdGhlIG1hZ25pdHVkZSBvZiB0aGUgYWNjdXNhdGlvbnMgYWdhaW5zdCBoaXMgY2xpZW50LCBzdGlsbCwgYnkgc3VwcGxpY2F0aW9ucyBhbmQgZW50cmVhdGllcyBpbiBoaXMgYmVoYWxmIGhlIHNhdmVkIG11Y2ggb2YgaGlzIGtpbmdkb20gZm9yIGhpbS4gCgkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ok86xzrvOsc+E4b+2zr08L2ZvcmVpZ24+IGZvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Om865zrLhvbvPic69PC9mb3JlaWduPi48L3RyYW5zbGF0aW9uPg=="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgQ2Flc2FyLCB3aGVuIGhlIGZpcnN0IGhlYXJkIEJydXR1cyBzcGVhayBpbiBwdWJsaWMsIHNhaWQgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGtub3cgbm90IHdoYXQgdGhpcyB5b3VuZyBtYW4gd2FudHMsIGJ1dCBhbGwgdGhhdCBoZSB3YW50cyBoZSB3YW50cyB2ZXJ5IG11Y2guPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEF0dC4gMTQuMS4yIiB2YWxpZD0ieWVzIj5DaWNlcm8gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgQXR0LjwvdGl0bGU+IHhpdi4gMSwgMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gRm9yIHRoZSB3ZWlnaHQgb2YgaGlzIGNoYXJhY3RlciwgYW5kIHRoZSBmYWN0IHRoYXQgbm8gb25lIGZvdW5kIGl0IGVhc3kgdG8gbWFrZSBoaW0gbGlzdGVuIHRvIGFwcGVhbHMgZm9yIGZhdm91ciwgYnV0IHRoYXQgaGUgYWNjb21wbGlzaGVkIGhpcyBlbmRzIGJ5IHJlYXNvbmluZyBhbmQgdGhlIGFkb3B0aW9uIG9mIG5vYmxlIHByaW5jaXBsZXMsIG1hZGUgaGlzIGVmZm9ydHMsIHdoaXRoZXJzb2V2ZXIgZGlyZWN0ZWQsIHBvd2VyZnVsIGFuZCBlZmZpY2FjaW91cy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEF0dC4gMTQuMS4yIiB2YWxpZD0ieWVzIj5DaWNlcm8gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgQXR0LjwvdGl0bGU+IHhpdi4gMSwgMi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmFkIEF0dC48L3RpdGxlPiB4aXYuIDEsIDIuPC90cmFuc2xhdGlvbj4="
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vIGZsYXR0ZXJ5IGNvdWxkIGluZHVjZSBoaW0gdG8gZ3JhbnQgYW4gdW5qdXN0IHBldGl0aW9uLCBhbmQgdGhhdCBpbmFiaWxpdHkgdG8gd2l0aHN0YW5kIHNoYW1lbGVzcyBpbXBvcnR1bml0eSwgd2hpY2ggc29tZSBjYWxsIHRpbWlkaXR5LCBoZSByZWdhcmRlZCBhcyBtb3N0IGRpc2dyYWNlZnVsIGluIGEgZ3JlYXQgbWFuLCBhbmQgaGUgd2FzIHdvbnQgdG8gc2F5IHRoYXQgdGhvc2Ugd2hvIHdlcmUgdW5hYmxlIHRvIHJlZnVzZSBhbnl0aGluZywgaW4gaGlzIG9waW5pb24sIG11c3QgaGF2ZSBiZWVuIGNvcnJ1cHRlZCBpbiB0aGVpciB5b3V0aC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYWVzYXIgd2FzIGFib3V0IHRvIGNyb3NzIG92ZXIgaW50byBBZnJpY2EgYWdhaW5zdCBDYXRvIGFuZCBTY2lwaW8sIGhlIHB1dCBCcnV0dXMgaW4gY2hhcmdlIG9mIENpc2FscGluZSBHYXVsLCB0byB0aGUgZ3JlYXQgZ29vZC1mb3J0dW5lIG9mIHRoZSBwcm92aW5jZTsgZm9yIHdoaWxlIHRoZSBvdGhlciBwcm92aW5jZXMsIG93aW5nIHRvIHRoZSBpbnNvbGVuY2UgYW5kIHJhcGFjaXR5IG9mIHRoZWlyIGdvdmVybm9ycywgd2VyZSBwbHVuZGVyZWQgYXMgdGhvdWdoIHRoZXkgaGFkIGJlZW4gY29ucXVlcmVkIGluIHdhciwgdG8gdGhlIHBlb3BsZSBvZiBoaXMgcHJvdmluY2UgQnJ1dHVzIG1lYW50IHJlbGllZiBhbmQgY29uc29sYXRpb24gZXZlbiBmb3IgdGhlaXIgZm9ybWVyIG1pc2ZvcnR1bmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgYXR0YWNoZWQgdGhlIGdyYXRpdHVkZSBvZiBhbGwgdG8gQ2Flc2FyLCBzbyB0aGF0LCBhZnRlciBDYWVzYXIncyByZXR1cm4sIGFuZCBhcyBoZSB0cmF2ZXJzZWQgSXRhbHksIGhlIGZvdW5kIHRoZSBjaXRpZXMgdW5kZXIgQnJ1dHVzIGEgbW9zdCBwbGVhc2luZyBzaWdodCwgYXMgd2VsbCBhcyBCcnV0dXMgaGltc2VsZiwgd2hvIGVuaGFuY2VkIGhpcyBob25vdXIgYW5kIHdhcyBhIGRlbGlnaHRmdWwgY29tcGFuaW9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2Flc2FyIHdhcyBhYm91dCB0byBjcm9zcyBvdmVyIGludG8gQWZyaWNhIGFnYWluc3QgQ2F0byBhbmQgU2NpcGlvLCBoZSBwdXQgQnJ1dHVzIGluIGNoYXJnZSBvZiBDaXNhbHBpbmUgR2F1bCwgdG8gdGhlIGdyZWF0IGdvb2QtZm9ydHVuZSBvZiB0aGUgcHJvdmluY2U7IGZvciB3aGlsZSB0aGUgb3RoZXIgcHJvdmluY2VzLCBvd2luZyB0byB0aGUgaW5zb2xlbmNlIGFuZCByYXBhY2l0eSBvZiB0aGVpciBnb3Zlcm5vcnMsIHdlcmUgcGx1bmRlcmVkIGFzIHRob3VnaCB0aGV5IGhhZCBiZWVuIGNvbnF1ZXJlZCBpbiB3YXIsIHRvIHRoZSBwZW9wbGUgb2YgaGlzIHByb3ZpbmNlIEJydXR1cyBtZWFudCByZWxpZWYgYW5kIGNvbnNvbGF0aW9uIGV2ZW4gZm9yIHRoZWlyIGZvcm1lciBtaXNmb3J0dW5lcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBhdHRhY2hlZCB0aGUgZ3JhdGl0dWRlIG9mIGFsbCB0byBDYWVzYXIsIHNvIHRoYXQsIGFmdGVyIENhZXNhcidzIHJldHVybiwgYW5kIGFzIGhlIHRyYXZlcnNlZCBJdGFseSwgaGUgZm91bmQgdGhlIGNpdGllcyB1bmRlciBCcnV0dXMgYSBtb3N0IHBsZWFzaW5nIHNpZ2h0LCBhcyB3ZWxsIGFzIEJydXR1cyBoaW1zZWxmLCB3aG8gZW5oYW5jZWQgaGlzIGhvbm91ciBhbmQgd2FzIGEgZGVsaWdodGZ1bCBjb21wYW5pb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgdGhlcmUgd2VyZSBzZXZlcmFsIHByYWV0b3JzaGlwcyB0byBiZSBoYWQsIGl0IHdhcyBleHBlY3RlZCB0aGF0IHRoZSBvbmUgb2YgZ3JlYXRlc3QgZGlnbml0eSwgdGhhdCBpcywgdGhlIHByYWV0b3JzaGlwIG9mIHRoZSBjaXR5LCB3b3VsZCBmYWxsIGVpdGhlciB0byBCcnV0dXMgb3IgdG8gQ2Fzc2l1czsgYW5kIHNvbWUgc2F5IHRoYXQgdGhlIHR3byBtZW4sIHdobyB3ZXJlIGFscmVhZHkgc2xpZ2h0bHkgYXQgdmFyaWFuY2UgZm9yIG90aGVyIHJlYXNvbnMsIHdlcmUgc3RpbGwgbW9yZSBlc3RyYW5nZWQgYnkgdGhpcyBjaXJjdW1zdGFuY2UsIGFsdGhvdWdoIHRoZXkgd2VyZSByZWxhdGl2ZXMsIHNpbmNlIENhc3NpdXMgd2FzIHRoZSBodXNiYW5kIG9mIEp1bmlhLCBhIHNpc3RlciBvZiBCcnV0dXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvdGhlcnMgc2F5IHRoYXQgdGhpcyByaXZhbHJ5IHdhcyB0aGUgd29yayBvZiBDYWVzYXIsIHdobyBzZWNyZXRseSBmYXZvdXJlZCB0aGUgaG9wZXMgb2YgZWFjaCB1bnRpbCwgdGh1cyBpbmR1Y2VkIGFuZCBpbmNpdGVkLCB0aGV5IGVudGVyZWQgaW50byBjb21wZXRpdGlvbiB3aXRoIG9uZSBhbm90aGVyLiBCcnV0dXMsIGhvd2V2ZXIsIG1hZGUgdGhlIGNvbnRlc3Qgc3VwcG9ydGVkIG9ubHkgYnkgaGlzIGZhaXIgZmFtZSBhbmQgaGlzIHZpcnR1ZSwgYXMgYWdhaW5zdCBtYW55IGJyaWxsaWFudCBhbmQgc3Bpcml0ZWQgZXhwbG9pdHMgb2YgQ2Fzc2l1cyBpbiB0aGUgUGFydGhpYW4gd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENyYXNzLiAxOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNyYXNzdXM8L3RpdGxlPiwgeHZpaWkuIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXIsIGFmdGVyIGhlYXJpbmcgdGhlIGNsYWltcyBvZiBlYWNoLCBzYWlkLCBpbiBjb3VuY2lsIHdpdGggaGlzIGZyaWVuZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2Fzc2l1cyBtYWtlcyB0aGUganVzdGVyIHBsZWEsIGJ1dCBCcnV0dXMgbXVzdCBoYXZlIHRoZSBmaXJzdCBwcmFldG9yc2hpcC48L3E+IFNvIENhc3NpdXMgd2FzIGFwcG9pbnRlZCB0byBhbm90aGVyIHByYWV0b3JzaGlwLCBidXQgaGUgd2FzIG5vdCBzbyBncmF0ZWZ1bCBmb3Igd2hhdCBoZSBnb3QgYXMgaGUgd2FzIGFuZ3J5IG92ZXIgd2hhdCBoZSBoYWQgbG9zdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhhdCB0aGVyZSB3ZXJlIHNldmVyYWwgcHJhZXRvcnNoaXBzIHRvIGJlIGhhZCwgaXQgd2FzIGV4cGVjdGVkIHRoYXQgdGhlIG9uZSBvZiBncmVhdGVzdCBkaWduaXR5LCB0aGF0IGlzLCB0aGUgcHJhZXRvcnNoaXAgb2YgdGhlIGNpdHksIHdvdWxkIGZhbGwgZWl0aGVyIHRvIEJydXR1cyBvciB0byBDYXNzaXVzOyBhbmQgc29tZSBzYXkgdGhhdCB0aGUgdHdvIG1lbiwgd2hvIHdlcmUgYWxyZWFkeSBzbGlnaHRseSBhdCB2YXJpYW5jZSBmb3Igb3RoZXIgcmVhc29ucywgd2VyZSBzdGlsbCBtb3JlIGVzdHJhbmdlZCBieSB0aGlzIGNpcmN1bXN0YW5jZSwgYWx0aG91Z2ggdGhleSB3ZXJlIHJlbGF0aXZlcywgc2luY2UgQ2Fzc2l1cyB3YXMgdGhlIGh1c2JhbmQgb2YgSnVuaWEsIGEgc2lzdGVyIG9mIEJydXR1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvdGhlcnMgc2F5IHRoYXQgdGhpcyByaXZhbHJ5IHdhcyB0aGUgd29yayBvZiBDYWVzYXIsIHdobyBzZWNyZXRseSBmYXZvdXJlZCB0aGUgaG9wZXMgb2YgZWFjaCB1bnRpbCwgdGh1cyBpbmR1Y2VkIGFuZCBpbmNpdGVkLCB0aGV5IGVudGVyZWQgaW50byBjb21wZXRpdGlvbiB3aXRoIG9uZSBhbm90aGVyLiBCcnV0dXMsIGhvd2V2ZXIsIG1hZGUgdGhlIGNvbnRlc3Qgc3VwcG9ydGVkIG9ubHkgYnkgaGlzIGZhaXIgZmFtZSBhbmQgaGlzIHZpcnR1ZSwgYXMgYWdhaW5zdCBtYW55IGJyaWxsaWFudCBhbmQgc3Bpcml0ZWQgZXhwbG9pdHMgb2YgQ2Fzc2l1cyBpbiB0aGUgUGFydGhpYW4gd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDcmFzcy4gMTguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeHZpaWkuIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ3Jhc3MuIDE4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHh2aWlpLiBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeHZpaWkuIGZmLjwvdHJhbnNsYXRpb24+"
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXIsIGFmdGVyIGhlYXJpbmcgdGhlIGNsYWltcyBvZiBlYWNoLCBzYWlkLCBpbiBjb3VuY2lsIHdpdGggaGlzIGZyaWVuZHM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYXNzaXVzIG1ha2VzIHRoZSBqdXN0ZXIgcGxlYSwgYnV0IEJydXR1cyBtdXN0IGhhdmUgdGhlIGZpcnN0IHByYWV0b3JzaGlwLjwvcT4gU28gQ2Fzc2l1cyB3YXMgYXBwb2ludGVkIHRvIGFub3RoZXIgcHJhZXRvcnNoaXAsIGJ1dCBoZSB3YXMgbm90IHNvIGdyYXRlZnVsIGZvciB3aGF0IGhlIGdvdCBhcyBoZSB3YXMgYW5ncnkgb3ZlciB3aGF0IGhlIGhhZCBsb3N0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gYWxsIG90aGVyIHdheXMsIHRvbywgQnJ1dHVzIGhhZCBhcyBsYXJnZSBhIHNoYXJlIGluIENhZXNhcidzIHBvd2VyIGFzIGhlIHdpc2hlZC4gSW5kZWVkLCBoYWQgaGUgd2lzaGVkIGl0LCBoZSBtaWdodCBoYXZlIGJlZW4gZmlyc3QgYW1vbmcgQ2Flc2FyJ3MgZnJpZW5kcyBhbmQgZXhlcmNpc2VkIHRoZSBncmVhdGVzdCBwb3dlcjsgYnV0IHRoZSBwYXJ0eSBvZiBDYXNzaXVzIGRyZXcgaGltIGF3YXkgZnJvbSBzdWNoIGEgY291cnNlLiBOb3QgdGhhdCBoZSB3YXMgcmVjb25jaWxlZCB0byBDYXNzaXVzIGhpbXNlbGYgYXMgeWV0LCBhZnRlciB0aGVpciBzdHJ1Z2dsZSBmb3IgaG9ub3VycywgYnV0IGhlIGdhdmUgZWFyIHRvIHRoZSBmcmllbmRzIG9mIENhc3NpdXMsIHdobyB1cmdlZCBoaW0gbm90IHRvIHN1ZmZlciBoaW1zZWxmIHRvIGJlIGNoYXJtZWQgYW5kIHNvZnRlbmVkIGJ5IENhZXNhciwgYnV0IHJhdGhlciB0byBmbGVlIHRoZSB0eXJhbnQncyBraW5kbmVzc2VzIGFuZCBmYXZvdXJzLCBmb3IgdGhlc2Ugd2VyZSBzaG93biB0byBoaW0sIG5vdCB0byByZXdhcmQgaGlzIHZpcnR1ZSwgYnV0IHRvIHJvb3Qgb3V0IGhpcyB2aWdvdXIgYW5kIGhpcyBoYXVnaHR5IHNwaXJpdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBhbGwgb3RoZXIgd2F5cywgdG9vLCBCcnV0dXMgaGFkIGFzIGxhcmdlIGEgc2hhcmUgaW4gQ2Flc2FyJ3MgcG93ZXIgYXMgaGUgd2lzaGVkLiBJbmRlZWQsIGhhZCBoZSB3aXNoZWQgaXQsIGhlIG1pZ2h0IGhhdmUgYmVlbiBmaXJzdCBhbW9uZyBDYWVzYXIncyBmcmllbmRzIGFuZCBleGVyY2lzZWQgdGhlIGdyZWF0ZXN0IHBvd2VyOyBidXQgdGhlIHBhcnR5IG9mIENhc3NpdXMgZHJldyBoaW0gYXdheSBmcm9tIHN1Y2ggYSBjb3Vyc2UuIE5vdCB0aGF0IGhlIHdhcyByZWNvbmNpbGVkIHRvIENhc3NpdXMgaGltc2VsZiBhcyB5ZXQsIGFmdGVyIHRoZWlyIHN0cnVnZ2xlIGZvciBob25vdXJzLCBidXQgaGUgZ2F2ZSBlYXIgdG8gdGhlIGZyaWVuZHMgb2YgQ2Fzc2l1cywgd2hvIHVyZ2VkIGhpbSBub3QgdG8gc3VmZmVyIGhpbXNlbGYgdG8gYmUgY2hhcm1lZCBhbmQgc29mdGVuZWQgYnkgQ2Flc2FyLCBidXQgcmF0aGVyIHRvIGZsZWUgdGhlIHR5cmFudCdzIGtpbmRuZXNzZXMgYW5kIGZhdm91cnMsIGZvciB0aGVzZSB3ZXJlIHNob3duIHRvIGhpbSwgbm90IHRvIHJld2FyZCBoaXMgdmlydHVlLCBidXQgdG8gcm9vdCBvdXQgaGlzIHZpZ291ciBhbmQgaGlzIGhhdWdodHkgc3Bpcml0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGV2ZW4gQ2Flc2FyIHdhcyBub3Qgd2hvbGx5IHdpdGhvdXQgc3VzcGljaW9uLCBub3IgZnJlZSBmcm9tIHRoZSBlZmZlY3RzIG9mIGFjY3VzYXRpb25zIGFnYWluc3QgQnJ1dHVzLCBidXQsIHdoaWxlIGhlIGZlYXJlZCBoaXMgaGlnaCBzcGlyaXQsIGhpcyBncmVhdCByZXB1dGUsIGFuZCBoaXMgZnJpZW5kcywgaGUgaGFkIGZhaXRoIGluIGhpcyBjaGFyYWN0ZXIuIE9uY2UsIHdoZW4gaGUgd2FzIHRvbGQgdGhhdCBBbnRvbnkgYW5kIERvbGFiZWxsYSB3ZXJlIHBsb3R0aW5nIHJldm9sdXRpb24sIGhlIHNhaWQgaXQgd2FzIG5vdCB0aGUgZmF0IGFuZCBsb25nLWhhaXJlZCBmZWxsb3dzIHRoYXQgdHJvdWJsZWQgaGltLCBidXQgdGhvc2UgcGFsZSBhbmQgbGVhbiBvbmVzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNjIuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgbHhpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbWVhbmluZyBCcnV0dXMgYW5kIENhc3NpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2Fpbiwgd2hlbiBjZXJ0YWluIG9uZXMgd2VyZSBhY2N1c2luZyBCcnV0dXMgdG8gaGltLCBhbmQgdXJnaW5nIGhpbSB0byBiZSBvbiBoaXMgZ3VhcmQgYWdhaW5zdCBoaW0sIGhlIGxhaWQgaGlzIGhhbmQgdXBvbiBoaXMgYnJlYXN0IGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQ/IFRoaW5rIHllIG5vdCB0aGF0IEJydXR1cyBjYW4gd2FpdCBmb3IgdGhpcyBwb29yIGZsZXNoPzwvcT4gaW1wbHlpbmcgdGhhdCBubyBvbmUgYmVzaWRlcyBCcnV0dXMgd2FzIGZpdCB0byBzdWNjZWVkIGhpbSBpbiBzdWNoIGdyZWF0IHBvd2VyLiBBbmQgdmVyaWx5IGl0IGFwcGVhcnMgdGhhdCBCcnV0dXMgbWlnaHQgaGF2ZSBiZWVuIGZpcnN0IGluIHRoZSBjaXR5IHdpdGggbm9uZSB0byBkaXNwdXRlIGhpbSwgY291bGQgaGUgaGF2ZSBlbmR1cmVkIGZvciBhIGxpdHRsZSB3aGlsZSB0byBiZSBzZWNvbmQgdG8gQ2Flc2FyLCBzdWZmZXJpbmcgaGlzIHBvd2VyIHRvIHdhbmUgYW5kIHRoZSBmYW1lIG9mIGhpcyBzdWNjZXNzZXMgdG8gd2l0aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2Fzc2l1cywgYSBtYW4gb2YgdmlvbGVudCB0ZW1wZXIsIGFuZCByYXRoZXIgYSBoYXRlciBvZiBDYWVzYXIgb24gaGlzIG93biBwcml2YXRlIGFjY291bnQgdGhhbiBhIGhhdGVyIG9mIHR5cmFubnkgb24gcHVibGljIGdyb3VuZHMsIGZpcmVkIGhpbSB1cCBhbmQgdXJnZWQgaGltIG9uLiBCcnV0dXMsIGl0IGlzIHNhaWQsIG9iamVjdGVkIHRvIHRoZSBydWxlLCBidXQgQ2Fzc2l1cyBoYXRlZCB0aGUgcnVsZXIsIGFuZCBhbW9uZyBvdGhlciBjaGFyZ2VzIHdoaWNoIGhlIGJyb3VnaHQgYWdhaW5zdCBoaW0gd2FzIHRoYXQgb2YgdGFraW5nIGF3YXkgc29tZSBsaW9ucyB3aGljaCBDYXNzaXVzIGhhZCBwcm92aWRlZCB3aGVuIGhlIHdhcyBhYm91dCB0byBiZSBhZWRpbGU7IHRoZSBiZWFzdHMgaGFkIGJlZW4gbGVmdCBhdCBNZWdhcmEsIGFuZCB3aGVuIHRoZSBjaXR5IHdhcyB0YWtlbiBieSBDYWxlbnVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNDMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgeGxpaWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IENhZXNhciBhcHByb3ByaWF0ZWQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBiZWFzdHMgYXJlIHNhaWQgdG8gaGF2ZSBicm91Z2h0IGdyZWF0IGNhbGFtaXR5IHVwb24gdGhlIE1lZ2FyaWFucy4gRm9yIHRoZXNlLCBqdXN0IGFzIHRoZWlyIGNpdHkgd2FzIGNhcHR1cmVkLCBkcmV3IGJhY2sgdGhlIGJvbHRzIGFuZCBsb29zZW5lZCB0aGUgZmV0dGVycyB0aGF0IGNvbmZpbmVkIHRoZSBhbmltYWxzLCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgb2JzdHJ1Y3QgdGhlIG9uY29taW5nIGZvZSwgYnV0IHRoZXkgcnVzaGVkIGFtb25nIHRoZSB1bmFybWVkIGNpdGl6ZW5zIHRoZW1zZWx2ZXMgYW5kIHByZXllZCB1cG9uIHRoZW0gYXMgdGhleSByYW4gaGl0aGVyIGFuZCB0aGl0aGVyLCBzbyB0aGF0IGV2ZW4gdG8gdGhlIGVuZW15IHRoZSBzaWdodCB3YXMgYSBwaXRpZnVsIG9uZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBldmVuIENhZXNhciB3YXMgbm90IHdob2xseSB3aXRob3V0IHN1c3BpY2lvbiwgbm9yIGZyZWUgZnJvbSB0aGUgZWZmZWN0cyBvZiBhY2N1c2F0aW9ucyBhZ2FpbnN0IEJydXR1cywgYnV0LCB3aGlsZSBoZSBmZWFyZWQgaGlzIGhpZ2ggc3Bpcml0LCBoaXMgZ3JlYXQgcmVwdXRlLCBhbmQgaGlzIGZyaWVuZHMsIGhlIGhhZCBmYWl0aCBpbiBoaXMgY2hhcmFjdGVyLiBPbmNlLCB3aGVuIGhlIHdhcyB0b2xkIHRoYXQgQW50b255IGFuZCBEb2xhYmVsbGEgd2VyZSBwbG90dGluZyByZXZvbHV0aW9uLCBoZSBzYWlkIGl0IHdhcyBub3QgdGhlIGZhdCBhbmQgbG9uZy1oYWlyZWQgZmVsbG93cyB0aGF0IHRyb3VibGVkIGhpbSwgYnV0IHRob3NlIHBhbGUgYW5kIGxlYW4gb25lczs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA2Mi41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGx4aWkuIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG1lYW5pbmcgQnJ1dHVzIGFuZCBDYXNzaXVzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDYyLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgbHhpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBseGlpLiA1LjwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZ2Fpbiwgd2hlbiBjZXJ0YWluIG9uZXMgd2VyZSBhY2N1c2luZyBCcnV0dXMgdG8gaGltLCBhbmQgdXJnaW5nIGhpbSB0byBiZSBvbiBoaXMgZ3VhcmQgYWdhaW5zdCBoaW0sIGhlIGxhaWQgaGlzIGhhbmQgdXBvbiBoaXMgYnJlYXN0IGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdD8gVGhpbmsgeWUgbm90IHRoYXQgQnJ1dHVzIGNhbiB3YWl0IGZvciB0aGlzIHBvb3IgZmxlc2g/PC9xPiBpbXBseWluZyB0aGF0IG5vIG9uZSBiZXNpZGVzIEJydXR1cyB3YXMgZml0IHRvIHN1Y2NlZWQgaGltIGluIHN1Y2ggZ3JlYXQgcG93ZXIuIEFuZCB2ZXJpbHkgaXQgYXBwZWFycyB0aGF0IEJydXR1cyBtaWdodCBoYXZlIGJlZW4gZmlyc3QgaW4gdGhlIGNpdHkgd2l0aCBub25lIHRvIGRpc3B1dGUgaGltLCBjb3VsZCBoZSBoYXZlIGVuZHVyZWQgZm9yIGEgbGl0dGxlIHdoaWxlIHRvIGJlIHNlY29uZCB0byBDYWVzYXIsIHN1ZmZlcmluZyBoaXMgcG93ZXIgdG8gd2FuZSBhbmQgdGhlIGZhbWUgb2YgaGlzIHN1Y2Nlc3NlcyB0byB3aXRoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYXNzaXVzLCBhIG1hbiBvZiB2aW9sZW50IHRlbXBlciwgYW5kIHJhdGhlciBhIGhhdGVyIG9mIENhZXNhciBvbiBoaXMgb3duIHByaXZhdGUgYWNjb3VudCB0aGFuIGEgaGF0ZXIgb2YgdHlyYW5ueSBvbiBwdWJsaWMgZ3JvdW5kcywgZmlyZWQgaGltIHVwIGFuZCB1cmdlZCBoaW0gb24uIEJydXR1cywgaXQgaXMgc2FpZCwgb2JqZWN0ZWQgdG8gdGhlIHJ1bGUsIGJ1dCBDYXNzaXVzIGhhdGVkIHRoZSBydWxlciwgYW5kIGFtb25nIG90aGVyIGNoYXJnZXMgd2hpY2ggaGUgYnJvdWdodCBhZ2FpbnN0IGhpbSB3YXMgdGhhdCBvZiB0YWtpbmcgYXdheSBzb21lIGxpb25zIHdoaWNoIENhc3NpdXMgaGFkIHByb3ZpZGVkIHdoZW4gaGUgd2FzIGFib3V0IHRvIGJlIGFlZGlsZTsgdGhlIGJlYXN0cyBoYWQgYmVlbiBsZWZ0IGF0IE1lZ2FyYSwgYW5kIHdoZW4gdGhlIGNpdHkgd2FzIHRha2VuIGJ5IENhbGVudXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNDMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCB4bGlpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQ2Flc2FyIGFwcHJvcHJpYXRlZCB0aGVtLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDQzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeGxpaWkuIDEuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgeGxpaWkuIDEuPC90cmFuc2xhdGlvbj4="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgYmVhc3RzIGFyZSBzYWlkIHRvIGhhdmUgYnJvdWdodCBncmVhdCBjYWxhbWl0eSB1cG9uIHRoZSBNZWdhcmlhbnMuIEZvciB0aGVzZSwganVzdCBhcyB0aGVpciBjaXR5IHdhcyBjYXB0dXJlZCwgZHJldyBiYWNrIHRoZSBib2x0cyBhbmQgbG9vc2VuZWQgdGhlIGZldHRlcnMgdGhhdCBjb25maW5lZCB0aGUgYW5pbWFscywgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IG9ic3RydWN0IHRoZSBvbmNvbWluZyBmb2UsIGJ1dCB0aGV5IHJ1c2hlZCBhbW9uZyB0aGUgdW5hcm1lZCBjaXRpemVucyB0aGVtc2VsdmVzIGFuZCBwcmV5ZWQgdXBvbiB0aGVtIGFzIHRoZXkgcmFuIGhpdGhlciBhbmQgdGhpdGhlciwgc28gdGhhdCBldmVuIHRvIHRoZSBlbmVteSB0aGUgc2lnaHQgd2FzIGEgcGl0aWZ1bCBvbmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGNhc2Ugb2YgQ2Fzc2l1cywgdGhlbiwgdGhleSBzYXkgdGhpcyB3YXMgdGhlIGNoaWVmIHJlYXNvbiBmb3IgaGlzIHBsb3R0aW5nIGFnYWluc3QgQ2Flc2FyOyBidXQgaXQgaXMgbm90IHNvLiBGb3IgZnJvbSB0aGUgb3V0c2V0IHRoZXJlIHdhcyBpbiB0aGUgbmF0dXJlIG9mIENhc3NpdXMgZ3JlYXQgaG9zdGlsaXR5IGFuZCBiaXR0ZXJuZXNzIHRvd2FyZHMgdGhlIHdob2xlIHJhY2Ugb2YgdHlyYW50cywgYXMgaGUgc2hvd2VkIHdoZW4gaGUgd2FzIHN0aWxsIGEgYm95IGFuZCB3ZW50IHRvIHRoZSBzYW1lIHNjaG9vbCB3aXRoIEZhdXN0dXMgdGhlIHNvbiBvZiBTdWxsYS4gRm9yIHdoZW4gRmF1c3R1cyBibHVzdGVyZWQgYW1vbmcgdGhlIGJveXMgYW5kIGJyYWdnZWQgYWJvdXQgaGlzIGZhdGhlcidzIGFic29sdXRlIHBvd2VyLCBDYXNzaXVzIHNwcmFuZyB1cCBhbmQgZ2F2ZSBoaW0gYSB0aHJhc2hpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBndWFyZGlhbnMgYW5kIHJlbGF0aXZlcyBvZiBGYXVzdHVzIHdpc2hlZCB0byBjYXJyeSB0aGUgbWF0dGVyIGludG8gY291cnQsIGJ1dCBQb21wZXkgZm9yYmFkZSBpdCwgYW5kIGFmdGVyIGJyaW5naW5nIHRoZSB0d28gYm95cyB0b2dldGhlciwgcXVlc3Rpb25lZCB0aGVtIGJvdGggYWJvdXQgdGhlIG1hdHRlci4gVGhlbiwgYXMgdGhlIHN0b3J5IGdvZXMsIENhc3NpdXMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21lIG5vdywgRmF1c3R1cywgaGF2ZSB0aGUgY291cmFnZSB0byB1dHRlciBpbiB0aGlzIG1hbidzIHByZXNlbmNlIHRoYXQgc3BlZWNoIHdoaWNoIGFuZ2VyZWQgbWUsIGFuZCBJIHdpbGwgc21hc2ggeW91ciBmYWNlIGFnYWluLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgY2FzZSBvZiBDYXNzaXVzLCB0aGVuLCB0aGV5IHNheSB0aGlzIHdhcyB0aGUgY2hpZWYgcmVhc29uIGZvciBoaXMgcGxvdHRpbmcgYWdhaW5zdCBDYWVzYXI7IGJ1dCBpdCBpcyBub3Qgc28uIEZvciBmcm9tIHRoZSBvdXRzZXQgdGhlcmUgd2FzIGluIHRoZSBuYXR1cmUgb2YgQ2Fzc2l1cyBncmVhdCBob3N0aWxpdHkgYW5kIGJpdHRlcm5lc3MgdG93YXJkcyB0aGUgd2hvbGUgcmFjZSBvZiB0eXJhbnRzLCBhcyBoZSBzaG93ZWQgd2hlbiBoZSB3YXMgc3RpbGwgYSBib3kgYW5kIHdlbnQgdG8gdGhlIHNhbWUgc2Nob29sIHdpdGggRmF1c3R1cyB0aGUgc29uIG9mIFN1bGxhLiBGb3Igd2hlbiBGYXVzdHVzIGJsdXN0ZXJlZCBhbW9uZyB0aGUgYm95cyBhbmQgYnJhZ2dlZCBhYm91dCBoaXMgZmF0aGVyJ3MgYWJzb2x1dGUgcG93ZXIsIENhc3NpdXMgc3ByYW5nIHVwIGFuZCBnYXZlIGhpbSBhIHRocmFzaGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBndWFyZGlhbnMgYW5kIHJlbGF0aXZlcyBvZiBGYXVzdHVzIHdpc2hlZCB0byBjYXJyeSB0aGUgbWF0dGVyIGludG8gY291cnQsIGJ1dCBQb21wZXkgZm9yYmFkZSBpdCwgYW5kIGFmdGVyIGJyaW5naW5nIHRoZSB0d28gYm95cyB0b2dldGhlciwgcXVlc3Rpb25lZCB0aGVtIGJvdGggYWJvdXQgdGhlIG1hdHRlci4gVGhlbiwgYXMgdGhlIHN0b3J5IGdvZXMsIENhc3NpdXMgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvbWUgbm93LCBGYXVzdHVzLCBoYXZlIHRoZSBjb3VyYWdlIHRvIHV0dGVyIGluIHRoaXMgbWFuJ3MgcHJlc2VuY2UgdGhhdCBzcGVlY2ggd2hpY2ggYW5nZXJlZCBtZSwgYW5kIEkgd2lsbCBzbWFzaCB5b3VyIGZhY2UgYWdhaW4uPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHdhcyBDYXNzaXVzOyBidXQgQnJ1dHVzIHdhcyBleGhvcnRlZCBhbmQgaW5jaXRlZCB0byB0aGUgdW5kZXJ0YWtpbmcgYnkgbWFueSBhcmd1bWVudHMgZnJvbSBoaXMgY29tcmFkZXMsIGFuZCBieSBtYW55IHV0dGVyYW5jZXMgYW5kIHdyaXRpbmdzIGZyb20gaGlzIGZlbGxvdyBjaXRpemVucy4gRm9yIGluc3RhbmNlLCBvbiB0aGUgc3RhdHVlIG9mIGhpcyBhbmNlc3RvciwgdGhlIEJydXR1cyB3aG8gb3ZlcnRocmV3IHRoZSBwb3dlciBvZiB0aGUga2luZ3MsIHRoZXJlIHdhcyB3cml0dGVuOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gdGhhdCB3ZSBoYWQgdGhlZSBub3csIEJydXR1cyE8L3E+IGFuZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gdGhhdCBCcnV0dXMgd2VyZSBhbGl2ZSE8L3E+IEJlc2lkZXMsIHRoZSBwcmFldG9yaWFsIHRyaWJ1bmFsIG9mIEJydXR1cyBoaW1zZWxmIHdhcyBkYWlseSBmb3VuZCBjb3ZlcmVkIHdpdGggc3VjaCB3cml0aW5ncyBhcyB0aGVzZTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CcnV0dXMsIGFydCB0aG91IGFzbGVlcD88L3E+IGFuZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgYXJ0IG5vdCByZWFsbHkgQnJ1dHVzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSB0aGluZ3Mgd2VyZSBicm91Z2h0IGFib3V0IGJ5IHRoZSBmbGF0dGVyZXJzIG9mIENhZXNhciwgd2hvLCBhbW9uZyBvdGhlciBpbnZpZGlvdXMgaG9ub3VycyB3aGljaCB0aGV5IGludmVudGVkIGZvciBoaW0sIGFjdHVhbGx5IHB1dCBjcm93bnMgdXBvbiBoaXMgc3RhdHVlcyBieSBuaWdodCwgaG9waW5nIHRvIGluZHVjZSB0aGUgbXVsdGl0dWRlIHRvIGFkZHJlc3MgaGltIGFzIGtpbmcgaW5zdGVhZCBvZiBkaWN0YXRvci4gQnV0IHRoZSBjb250cmFyeSBjYW1lIHRvIHBhc3MsIGFzIEkgaGF2ZSB3cml0dGVuIGZ1bGx5IGluIG15IExpZmUgb2YgQ2Flc2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNjEuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBseGkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggd2FzIENhc3NpdXM7IGJ1dCBCcnV0dXMgd2FzIGV4aG9ydGVkIGFuZCBpbmNpdGVkIHRvIHRoZSB1bmRlcnRha2luZyBieSBtYW55IGFyZ3VtZW50cyBmcm9tIGhpcyBjb21yYWRlcywgYW5kIGJ5IG1hbnkgdXR0ZXJhbmNlcyBhbmQgd3JpdGluZ3MgZnJvbSBoaXMgZmVsbG93IGNpdGl6ZW5zLiBGb3IgaW5zdGFuY2UsIG9uIHRoZSBzdGF0dWUgb2YgaGlzIGFuY2VzdG9yLCB0aGUgQnJ1dHVzIHdobyBvdmVydGhyZXcgdGhlIHBvd2VyIG9mIHRoZSBraW5ncywgdGhlcmUgd2FzIHdyaXR0ZW46IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PIHRoYXQgd2UgaGFkIHRoZWUgbm93LCBCcnV0dXMhPC9xPiBhbmQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gdGhhdCBCcnV0dXMgd2VyZSBhbGl2ZSE8L3E+IEJlc2lkZXMsIHRoZSBwcmFldG9yaWFsIHRyaWJ1bmFsIG9mIEJydXR1cyBoaW1zZWxmIHdhcyBkYWlseSBmb3VuZCBjb3ZlcmVkIHdpdGggc3VjaCB3cml0aW5ncyBhcyB0aGVzZTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJydXR1cywgYXJ0IHRob3UgYXNsZWVwPzwvcT4gYW5kIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGFydCBub3QgcmVhbGx5IEJydXR1cy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHRoaW5ncyB3ZXJlIGJyb3VnaHQgYWJvdXQgYnkgdGhlIGZsYXR0ZXJlcnMgb2YgQ2Flc2FyLCB3aG8sIGFtb25nIG90aGVyIGludmlkaW91cyBob25vdXJzIHdoaWNoIHRoZXkgaW52ZW50ZWQgZm9yIGhpbSwgYWN0dWFsbHkgcHV0IGNyb3ducyB1cG9uIGhpcyBzdGF0dWVzIGJ5IG5pZ2h0LCBob3BpbmcgdG8gaW5kdWNlIHRoZSBtdWx0aXR1ZGUgdG8gYWRkcmVzcyBoaW0gYXMga2luZyBpbnN0ZWFkIG9mIGRpY3RhdG9yLiBCdXQgdGhlIGNvbnRyYXJ5IGNhbWUgdG8gcGFzcywgYXMgSSBoYXZlIHdyaXR0ZW4gZnVsbHkgaW4gbXkgTGlmZSBvZiBDYWVzYXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNjEuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBseGkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDYxLjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgbHhpLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoZW4gQ2Fzc2l1cyBzb3VnaHQgdG8gaW5kdWNlIGhpcyBmcmllbmRzIHRvIGNvbnNwaXJlIGFnYWluc3QgQ2Flc2FyLCB0aGV5IGFsbCBhZ3JlZWQgdG8gZG8gc28gaWYgQnJ1dHVzIHRvb2sgdGhlIGxlYWQsIGFyZ3VpbmcgdGhhdCB0aGUgdW5kZXJ0YWtpbmcgZGVtYW5kZWQsIG5vdCB2aW9sZW5jZSBub3IgZGFyaW5nLCBidXQgdGhlIHJlcHV0YXRpb24gb2YgYSBtYW4gbGlrZSBoaW0sIHdobyBzaG91bGQgY29uc2VjcmF0ZSB0aGUgdmljdGltLCBhcyBpdCB3ZXJlLCBhbmQgZW5zdXJlIGJ5IHRoZSBtZXJlIGZhY3Qgb2YgaGlzIHBhcnRpY2lwYXRpb24gdGhlIGp1c3RpY2Ugb2YgdGhlIHNhY3JpZmljZTsgb3RoZXJ3aXNlIHRoZXkgd291bGQgYmUgbW9yZSB0aW1pZCBpbiBkb2luZyB0aGUgZGVlZCBhbmQgbW9yZSBzdXNwZWN0ZWQgYWZ0ZXIgdGhleSBoYWQgZG9uZSBpdCwgc2luY2UgbWVuIHdvdWxkIHNheSB0aGF0IEJydXR1cyB3b3VsZCBub3QgaGF2ZSBkZWNsaW5lZCB0aGUgdGFzayBpZiB0aGUgcHVycG9zZSBvZiBpdCBoYWQgYmVlbiBob25vdXJhYmxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciByZWZsZWN0aW5nIG9uIHRoaXMsIENhc3NpdXMgbWFkZSBCcnV0dXMgaGlzIGZpcnN0IHZpc2l0IHNpbmNlIHRoZSBxdWFycmVsIGFib3ZlIG1lbnRpb25lZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDcuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciB2aWkuIDEtMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHdoZW4gdGhleSB3ZXJlIGFnYWluIG9uIGEgZnJpZW5kbHkgZm9vdGluZywgYXNrZWQgaGltIHdoZXRoZXIgaGUgaGFkIG1hZGUgdXAgaGlzIG1pbmQgdG8gYXR0ZW5kIHRoZSBtZWV0aW5nIG9mIHRoZSBzZW5hdGUgb24gdGhlIENhbGVuZHMgb2YgTWFyY2g7IGZvciBpdCBoYWQgY29tZSB0byBoaXMgZWFycywgaGUgc2FpZCwgdGhhdCBDYWVzYXIncyBmcmllbmRzIHdvdWxkIHRoZW4gbW92ZSB0byBoYXZlIGhpbSBtYWRlIGtpbmcuIFdoZW4gQnJ1dHVzIGFuc3dlcmVkIHRoYXQgaGUgc2hvdWxkIG5vdCBhdHRlbmQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCwgdGhlbiw8L3E+IHNhaWQgQ2Fzc2l1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pZiB3ZSBzaG91bGQgYmUgc3VtbW9uZWQ/PC9xPiAKCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgd291bGQgYXQgb25jZSBiZSBteSBkdXR5LDwvcT4gc2FpZCBCcnV0dXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+bm90IHRvIGhvbGQgbXkgcGVhY2UsIGJ1dCB0byBkZWZlbmQgbXkgY291bnRyeSBhbmQgZGllIGluIGJlaGFsZiBvZiBsaWJlcnR5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIENhc3NpdXMsIGVsYXRlZCwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgd2hhdCBSb21hbiB3aWxsIGNvbnNlbnQgdG8gaGF2ZSB0aGVlIGRpZSBpbiBzdWNoIGRlZmVuY2U/IERvc3QgdGhvdSBub3Qga25vdyB0aHlzZWxmIEJydXR1cz8gT3IgZG9zdCB0aG91IHRoaW5rIHRoYXQgdGh5IHRyaWJ1bmFsIHdhcyBjb3ZlcmVkIHdpdGggaW5zY3JpcHRpb25zIGJ5IHdlYXZlcnMgYW5kIGh1Y2tzdGVycywgYW5kIG5vdCBieSB0aGUgZm9yZW1vc3QgYW5kIG1vc3QgaW5mbHVlbnRpYWwgY2l0aXplbnM/IEZyb20gdGhlaXIgb3RoZXIgcHJhZXRvcnMgdGhleSBkZW1hbmQgZ2lmdHMgYW5kIHNwZWN0YWNsZXMgYW5kIGdsYWRpYXRvcmlhbCBjb21iYXRzOyBidXQgZnJvbSB0aGVlLCBhcyBhIGRlYnQgdGhvdSBvd2VzdCB0byB0aHkgbGluZWFnZSwgdGhlIGFib2xpdGlvbiBvZiB0aGUgdHlyYW5ueTsKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoZXkgYXJlIHJlYWR5IGFuZCB3aWxsaW5nIHRvIHN1ZmZlciBhbnl0aGluZyBpbiB0aHkgYmVoYWxmLCBpZiB0aG91IHNob3dlc3QgdGh5c2VsZiB0byBiZSB3aGF0IHRoZXkgZXhwZWN0IGFuZCBkZW1hbmQuPC9xPiBBZnRlciB0aGlzLCBoZSBlbWJyYWNlZCBCcnV0dXMgYW5kIGtpc3NlZCBoaW0sIGFuZCB0aHVzIHJlY29uY2lsZWQgdGhleSBiZXRvb2sgdGhlbXNlbHZlcyB0byB0aGVpciBmcmllbmRzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoZW4gQ2Fzc2l1cyBzb3VnaHQgdG8gaW5kdWNlIGhpcyBmcmllbmRzIHRvIGNvbnNwaXJlIGFnYWluc3QgQ2Flc2FyLCB0aGV5IGFsbCBhZ3JlZWQgdG8gZG8gc28gaWYgQnJ1dHVzIHRvb2sgdGhlIGxlYWQsIGFyZ3VpbmcgdGhhdCB0aGUgdW5kZXJ0YWtpbmcgZGVtYW5kZWQsIG5vdCB2aW9sZW5jZSBub3IgZGFyaW5nLCBidXQgdGhlIHJlcHV0YXRpb24gb2YgYSBtYW4gbGlrZSBoaW0sIHdobyBzaG91bGQgY29uc2VjcmF0ZSB0aGUgdmljdGltLCBhcyBpdCB3ZXJlLCBhbmQgZW5zdXJlIGJ5IHRoZSBtZXJlIGZhY3Qgb2YgaGlzIHBhcnRpY2lwYXRpb24gdGhlIGp1c3RpY2Ugb2YgdGhlIHNhY3JpZmljZTsgb3RoZXJ3aXNlIHRoZXkgd291bGQgYmUgbW9yZSB0aW1pZCBpbiBkb2luZyB0aGUgZGVlZCBhbmQgbW9yZSBzdXNwZWN0ZWQgYWZ0ZXIgdGhleSBoYWQgZG9uZSBpdCwgc2luY2UgbWVuIHdvdWxkIHNheSB0aGF0IEJydXR1cyB3b3VsZCBub3QgaGF2ZSBkZWNsaW5lZCB0aGUgdGFzayBpZiB0aGUgcHVycG9zZSBvZiBpdCBoYWQgYmVlbiBob25vdXJhYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHJlZmxlY3Rpbmcgb24gdGhpcywgQ2Fzc2l1cyBtYWRlIEJydXR1cyBoaXMgZmlyc3QgdmlzaXQgc2luY2UgdGhlIHF1YXJyZWwgYWJvdmUgbWVudGlvbmVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDcuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciB2aWkuIDEtMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHdoZW4gdGhleSB3ZXJlIGFnYWluIG9uIGEgZnJpZW5kbHkgZm9vdGluZywgYXNrZWQgaGltIHdoZXRoZXIgaGUgaGFkIG1hZGUgdXAgaGlzIG1pbmQgdG8gYXR0ZW5kIHRoZSBtZWV0aW5nIG9mIHRoZSBzZW5hdGUgb24gdGhlIENhbGVuZHMgb2YgTWFyY2g7IGZvciBpdCBoYWQgY29tZSB0byBoaXMgZWFycywgaGUgc2FpZCwgdGhhdCBDYWVzYXIncyBmcmllbmRzIHdvdWxkIHRoZW4gbW92ZSB0byBoYXZlIGhpbSBtYWRlIGtpbmcuIFdoZW4gQnJ1dHVzIGFuc3dlcmVkIHRoYXQgaGUgc2hvdWxkIG5vdCBhdHRlbmQsIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gNy4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIHZpaS4gMS0zLjwvYmlibD4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0LCB0aGVuLDwvcT4gc2FpZCBDYXNzaXVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aWYgd2Ugc2hvdWxkIGJlIHN1bW1vbmVkPzwvcT4gCgkJCQkgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgd291bGQgYXQgb25jZSBiZSBteSBkdXR5LDwvcT4gc2FpZCBCcnV0dXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ub3QgdG8gaG9sZCBteSBwZWFjZSwgYnV0IHRvIGRlZmVuZCBteSBjb3VudHJ5IGFuZCBkaWUgaW4gYmVoYWxmIG9mIGxpYmVydHkuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQ2Fzc2l1cywgZWxhdGVkLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHdoYXQgUm9tYW4gd2lsbCBjb25zZW50IHRvIGhhdmUgdGhlZSBkaWUgaW4gc3VjaCBkZWZlbmNlPyBEb3N0IHRob3Ugbm90IGtub3cgdGh5c2VsZiBCcnV0dXM/IE9yIGRvc3QgdGhvdSB0aGluayB0aGF0IHRoeSB0cmlidW5hbCB3YXMgY292ZXJlZCB3aXRoIGluc2NyaXB0aW9ucyBieSB3ZWF2ZXJzIGFuZCBodWNrc3RlcnMsIGFuZCBub3QgYnkgdGhlIGZvcmVtb3N0IGFuZCBtb3N0IGluZmx1ZW50aWFsIGNpdGl6ZW5zPyBGcm9tIHRoZWlyIG90aGVyIHByYWV0b3JzIHRoZXkgZGVtYW5kIGdpZnRzIGFuZCBzcGVjdGFjbGVzIGFuZCBnbGFkaWF0b3JpYWwgY29tYmF0czsgYnV0IGZyb20gdGhlZSwgYXMgYSBkZWJ0IHRob3Ugb3dlc3QgdG8gdGh5IGxpbmVhZ2UsIHRoZSBhYm9saXRpb24gb2YgdGhlIHR5cmFubnk7CgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoZXkgYXJlIHJlYWR5IGFuZCB3aWxsaW5nIHRvIHN1ZmZlciBhbnl0aGluZyBpbiB0aHkgYmVoYWxmLCBpZiB0aG91IHNob3dlc3QgdGh5c2VsZiB0byBiZSB3aGF0IHRoZXkgZXhwZWN0IGFuZCBkZW1hbmQuPC9xPiBBZnRlciB0aGlzLCBoZSBlbWJyYWNlZCBCcnV0dXMgYW5kIGtpc3NlZCBoaW0sIGFuZCB0aHVzIHJlY29uY2lsZWQgdGhleSBiZXRvb2sgdGhlbXNlbHZlcyB0byB0aGVpciBmcmllbmRzLgoJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGV5IGFyZSByZWFkeSBhbmQgd2lsbGluZyB0byBzdWZmZXIgYW55dGhpbmcgaW4gdGh5IGJlaGFsZiwgaWYgdGhvdSBzaG93ZXN0IHRoeXNlbGYgdG8gYmUgd2hhdCB0aGV5IGV4cGVjdCBhbmQgZGVtYW5kLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBhIGNlcnRhaW4gQ2FpdXMgTGlnYXJpdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5IZSBpcyBjYWxsZWQgUXVpbnR1cyBMaWdhcml1cyBpbiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzkuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgeHh4aXguIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFtb25nIHRoZSBmcmllbmRzIG9mIFBvbXBleSwgd2hvIGhhZCBiZWVuIGRlbm91bmNlZCBhcyBzdWNoLCBidXQgcGFyZG9uZWQgYnkgQ2Flc2FyLiBUaGlzIG1hbiwgY2hlcmlzaGluZyBubyBncmF0aXR1ZGUgZm9yIGhpcyBwYXJkb24sIGJ1dCByYXRoZXIgb2ZmZW5kZWQgYnkgdGhlIHBvd2VyIHdoaWNoIGhhZCBwdXQgaGlzIGxpZmUgaW4gamVvcGFyZHksIHdhcyBhbiBlbmVteSBvZiBDYWVzYXIsIGFuZCBvbmUgb2YgdGhlIG1vc3QgZmFtaWxpYXIgZnJpZW5kcyBvZiBCcnV0dXMuIE9uY2UsIHdoZW4gdGhpcyBtYW4gd2FzIHNpY2ssIEJydXR1cyBjYW1lIHRvIHNlZSBoaW0sIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gTGlnYXJpdXMsIHdoYXQgYSB0aW1lIHRoaXMgaXMgdG8gYmUgc2ljayE8L3E+IExpZ2FyaXVzIGF0IG9uY2UgcmFpc2VkIGhpbXNlbGYgb24gaGlzIGVsYm93LCBjbGFzcGVkIEJydXR1cyBieSB0aGUgaGFuZCwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LCBCcnV0dXMsIGlmIHRob3UgaGFzdCBhIHB1cnBvc2Ugd29ydGh5IG9mIHRoeXNlbGYsIEkgYW0gd2VsbC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2FzIGEgY2VydGFpbiBDYWl1cyBMaWdhcml1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SGUgaXMgY2FsbGVkIFF1aW50dXMgTGlnYXJpdXMgaW4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzkuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCB4eHhpeC4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW1vbmcgdGhlIGZyaWVuZHMgb2YgUG9tcGV5LCB3aG8gaGFkIGJlZW4gZGVub3VuY2VkIGFzIHN1Y2gsIGJ1dCBwYXJkb25lZCBieSBDYWVzYXIuIFRoaXMgbWFuLCBjaGVyaXNoaW5nIG5vIGdyYXRpdHVkZSBmb3IgaGlzIHBhcmRvbiwgYnV0IHJhdGhlciBvZmZlbmRlZCBieSB0aGUgcG93ZXIgd2hpY2ggaGFkIHB1dCBoaXMgbGlmZSBpbiBqZW9wYXJkeSwgd2FzIGFuIGVuZW15IG9mIENhZXNhciwgYW5kIG9uZSBvZiB0aGUgbW9zdCBmYW1pbGlhciBmcmllbmRzIG9mIEJydXR1cy4gT25jZSwgd2hlbiB0aGlzIG1hbiB3YXMgc2ljaywgQnJ1dHVzIGNhbWUgdG8gc2VlIGhpbSwgYW5kIHNhaWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzOS41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIHh4eGl4LiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIHh4eGl4LiA1LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBMaWdhcml1cywgd2hhdCBhIHRpbWUgdGhpcyBpcyB0byBiZSBzaWNrITwvcT4gTGlnYXJpdXMgYXQgb25jZSByYWlzZWQgaGltc2VsZiBvbiBoaXMgZWxib3csIGNsYXNwZWQgQnJ1dHVzIGJ5IHRoZSBoYW5kLCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgQnJ1dHVzLCBpZiB0aG91IGhhc3QgYSBwdXJwb3NlIHdvcnRoeSBvZiB0aHlzZWxmLCBJIGFtIHdlbGwuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB0aGV5IHNlY3JldGx5IHRlc3RlZCB0aGUgc2VudGltZW50cyBvZiB3ZWxsIGtub3duIG1lbiBpbiB3aG9tIHRoZXkgaGFkIGNvbmZpZGVuY2UsIHNlbGVjdGluZyBub3Qgb25seSBmcm9tIHRoZWlyIGludGltYXRlcywgYnV0IGFsbCB3aG9tIHRoZXkga25ldyB0byBiZSBib2xkLCBicmF2ZSwgYW5kIGNvbnRlbXB0dW91cyBvZiBkZWF0aC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCB0b28sIHRoZXkga2VwdCB0aGVpciBwbGFucyBhIHNlY3JldCBmcm9tIENpY2VybywgYWx0aG91Z2ggaGUgd2FzIGZvcmVtb3N0IGFtb25nIHRoZW0sIG5vdCBvbmx5IGZvciB0aGUgY29uZmlkZW5jZSwgYnV0IGFsc28gZm9yIHRoZSBnb29kIHdpbGwgd2hpY2ggaGUgaW5zcGlyZWQuIFRoZXkgZmVhcmVkIHRoYXQgdGhlIGNhdXRpb24gd2hpY2ggdGltZSBhbmQgb2xkIGFnZSBoYWQgYnJvdWdodCBoaW0sIGNvbWJpbmVkIHdpdGggaGlzIG5hdHVyYWwgdGltaWRpdHksIGFuZCBmdXJ0aGVyLCBoaXMgaGFiaXQgb2YgY2FsY3VsYXRpbmcgYWxsIHRoZSBkZXRhaWxzIG9mIGV2ZXJ5IGVudGVycHJpc2Ugc28gYXMgdG8gZW5zdXJlIHRoZSB1dG1vc3Qgc2FmZXR5LCB3b3VsZCBibHVudCB0aGUgZWRnZSBvZiB0aGVpciBhcmRvdXIgYXQgYSBjcmlzaXMgd2hpY2ggZGVtYW5kZWQgc3BlZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIEJydXR1cyBhbHNvIHBhc3NlZCBieSwgYW1vbmcgaGlzIG90aGVyIGZyaWVuZHMsIFN0YXRpbGl1cyB0aGUgRXBpY3VyZWFuIGFuZCBGYXZvbml1cyB0aGUgZGV2b3RlZCBmb2xsb3dlciBvZiBDYXRvLiBUaGUgcmVhc29uIHdhcyB0aGF0IHNvbWUgdGltZSBiZWZvcmUgaGUgaGFkIHB1dCB0aGVtIHRvIGEgdmVyeSBzaW1pbGFyIHRlc3QgYnkgdGhlIHJvdW5kLWFib3V0IG1ldGhvZCBvZiBhIHBoaWxvc29waGljYWwgZGlzY3Vzc2lvbiwgd2hlbiBGYXZvbml1cyBoYWQgYW5zd2VyZWQgdGhhdCBjaXZpbCB3YXIgd2FzIHdvcnNlIHRoYW4gaWxsZWdhbCBtb25hcmNoeTsgYW5kIFN0YXRpbGl1cyBoYWQgZGVjbGFyZWQgdGhhdCBpdCBkaWQgbm90IGJlY29tZSBhIHdpc2UgYW5kIHNlbnNpYmxlIG1hbiB0byBiZSB0aHJvd24gaW50byB0dXJtb2lsIGFuZCBwZXJpbCBmb3IgdGhlIHNha2Ugb2YgZmVlYmxlIGFuZCBmb29saXNoIGZvbGsuIExhYmVvLCBob3dldmVyLCB3aG8gd2FzIHByZXNlbnQsIGFyZ3VlZCBhZ2FpbnN0IHRoZW0gYm90aC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhhdCB0aW1lLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhlIHF1ZXN0aW9uIHdhcyByYXRoZXIgZGlmZmljdWx0IGFuZCBoYXJkIHRvIGRlY2lkZSwgQnJ1dHVzIGhlbGQgaGlzIHBlYWNlLCBidXQgYWZ0ZXJ3YXJkcyBpbXBhcnRlZCBoaXMgcHVycG9zZSB0byBMYWJlbywgd2hvIHJlYWRpbHkgY29uY3VycmVkIGluIGl0LiBUaGVuIGl0IHdhcyBkZWNpZGVkIHRvIGJyaW5nIG92ZXIgdG8gdGhlaXIgY2F1c2UgdGhlIG90aGVyIEJydXR1cywgc3VybmFtZWQgQWxiaW51czs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDY0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIGNoYXB0ZXIgbHhpdi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW4gb3RoZXIgd2F5cyBoZSB3YXMgbm90IGFuIGVudGVycHJpc2luZyBub3IgZXZlbiBhIGNvdXJhZ2VvdXMgbWFuLCBidXQgdGhlIGxhcmdlIG51bWJlciBvZiBnbGFkaWF0b3JzIHdob20gaGUgd2FzIG1haW50YWluaW5nIGZvciB0aGUgUm9tYW4gc3BlY3RhY2xlcyBtYWRlIGhpbSBwb3dlcmZ1bCwgYW5kIGhlIGhhZCBDYWVzYXIncyBjb25maWRlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENhc3NpdXMgYW5kIExhYmVvIGRpc2N1c3NlZCB0aGUgbWF0dGVyIHdpdGggaGltLCBoZSB3b3VsZCBtYWtlIG5vIGFuc3dlcjsgYnV0IGhlIGhhZCBhIHByaXZhdGUgaW50ZXJ2aWV3IGJ5IGhpbXNlbGYgd2l0aCBCcnV0dXMsIGFuZCBvbiBsZWFybmluZyB0aGF0IGhlIHdhcyBsZWFkZXIgb2YgdGhlIGVudGVycHJpc2UsIHJlYWRpbHkgYWdyZWVkIHRvIGNvLW9wZXJhdGUuIFRoZSBtb3N0IGFuZCBiZXN0IG9mIHRoZSByZXN0IGFsc28gd2VyZSB3b24gb3ZlciBieSB0aGUgcmVwdXRhdGlvbiBpbiB3aGljaCBCcnV0dXMgc3Rvb2QuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbHRob3VnaCB0aGV5IGV4Y2hhbmdlZCBuZWl0aGVyIG9hdGhzIG5vciBzYWNyZWQgcGxlZGdlcywgdGhleSBhbGwga2VwdCB0aGUgdW5kZXJ0YWtpbmcgc28gbXVjaCB0byB0aGVtc2VsdmVzIGFuZCB3ZXJlIHNvIHNlY3JldCBpbiBjYXJyeWluZyBpdCBvdXQgdG9nZXRoZXIgdGhhdCwgYWx0aG91Z2ggaXQgd2FzIGZvcmV0b2xkIGJ5IHRoZSBnb2RzIGluIHByb3BoZWNpZXMgYW5kIG9yYWNsZXMgYW5kIHNhY3JpZmljaWFsIG9tZW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNjMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciBseGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbm8gb25lIHdvdWxkIGJlbGlldmUgaW4gaXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhleSBzZWNyZXRseSB0ZXN0ZWQgdGhlIHNlbnRpbWVudHMgb2Ygd2VsbCBrbm93biBtZW4gaW4gd2hvbSB0aGV5IGhhZCBjb25maWRlbmNlLCBzZWxlY3Rpbmcgbm90IG9ubHkgZnJvbSB0aGVpciBpbnRpbWF0ZXMsIGJ1dCBhbGwgd2hvbSB0aGV5IGtuZXcgdG8gYmUgYm9sZCwgYnJhdmUsIGFuZCBjb250ZW1wdHVvdXMgb2YgZGVhdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgdG9vLCB0aGV5IGtlcHQgdGhlaXIgcGxhbnMgYSBzZWNyZXQgZnJvbSBDaWNlcm8sIGFsdGhvdWdoIGhlIHdhcyBmb3JlbW9zdCBhbW9uZyB0aGVtLCBub3Qgb25seSBmb3IgdGhlIGNvbmZpZGVuY2UsIGJ1dCBhbHNvIGZvciB0aGUgZ29vZCB3aWxsIHdoaWNoIGhlIGluc3BpcmVkLiBUaGV5IGZlYXJlZCB0aGF0IHRoZSBjYXV0aW9uIHdoaWNoIHRpbWUgYW5kIG9sZCBhZ2UgaGFkIGJyb3VnaHQgaGltLCBjb21iaW5lZCB3aXRoIGhpcyBuYXR1cmFsIHRpbWlkaXR5LCBhbmQgZnVydGhlciwgaGlzIGhhYml0IG9mIGNhbGN1bGF0aW5nIGFsbCB0aGUgZGV0YWlscyBvZiBldmVyeSBlbnRlcnByaXNlIHNvIGFzIHRvIGVuc3VyZSB0aGUgdXRtb3N0IHNhZmV0eSwgd291bGQgYmx1bnQgdGhlIGVkZ2Ugb2YgdGhlaXIgYXJkb3VyIGF0IGEgY3Jpc2lzIHdoaWNoIGRlbWFuZGVkIHNwZWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIEJydXR1cyBhbHNvIHBhc3NlZCBieSwgYW1vbmcgaGlzIG90aGVyIGZyaWVuZHMsIFN0YXRpbGl1cyB0aGUgRXBpY3VyZWFuIGFuZCBGYXZvbml1cyB0aGUgZGV2b3RlZCBmb2xsb3dlciBvZiBDYXRvLiBUaGUgcmVhc29uIHdhcyB0aGF0IHNvbWUgdGltZSBiZWZvcmUgaGUgaGFkIHB1dCB0aGVtIHRvIGEgdmVyeSBzaW1pbGFyIHRlc3QgYnkgdGhlIHJvdW5kLWFib3V0IG1ldGhvZCBvZiBhIHBoaWxvc29waGljYWwgZGlzY3Vzc2lvbiwgd2hlbiBGYXZvbml1cyBoYWQgYW5zd2VyZWQgdGhhdCBjaXZpbCB3YXIgd2FzIHdvcnNlIHRoYW4gaWxsZWdhbCBtb25hcmNoeTsgYW5kIFN0YXRpbGl1cyBoYWQgZGVjbGFyZWQgdGhhdCBpdCBkaWQgbm90IGJlY29tZSBhIHdpc2UgYW5kIHNlbnNpYmxlIG1hbiB0byBiZSB0aHJvd24gaW50byB0dXJtb2lsIGFuZCBwZXJpbCBmb3IgdGhlIHNha2Ugb2YgZmVlYmxlIGFuZCBmb29saXNoIGZvbGsuIExhYmVvLCBob3dldmVyLCB3aG8gd2FzIHByZXNlbnQsIGFyZ3VlZCBhZ2FpbnN0IHRoZW0gYm90aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSwgb24gdGhlIGdyb3VuZCB0aGF0IHRoZSBxdWVzdGlvbiB3YXMgcmF0aGVyIGRpZmZpY3VsdCBhbmQgaGFyZCB0byBkZWNpZGUsIEJydXR1cyBoZWxkIGhpcyBwZWFjZSwgYnV0IGFmdGVyd2FyZHMgaW1wYXJ0ZWQgaGlzIHB1cnBvc2UgdG8gTGFiZW8sIHdobyByZWFkaWx5IGNvbmN1cnJlZCBpbiBpdC4gVGhlbiBpdCB3YXMgZGVjaWRlZCB0byBicmluZyBvdmVyIHRvIHRoZWlyIGNhdXNlIHRoZSBvdGhlciBCcnV0dXMsIHN1cm5hbWVkIEFsYmludXM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNjQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBjaGFwdGVyIGx4aXYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGluIG90aGVyIHdheXMgaGUgd2FzIG5vdCBhbiBlbnRlcnByaXNpbmcgbm9yIGV2ZW4gYSBjb3VyYWdlb3VzIG1hbiwgYnV0IHRoZSBsYXJnZSBudW1iZXIgb2YgZ2xhZGlhdG9ycyB3aG9tIGhlIHdhcyBtYWludGFpbmluZyBmb3IgdGhlIFJvbWFuIHNwZWN0YWNsZXMgbWFkZSBoaW0gcG93ZXJmdWwsIGFuZCBoZSBoYWQgQ2Flc2FyJ3MgY29uZmlkZW5jZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA2NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGNoYXB0ZXIgbHhpdi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBjaGFwdGVyIGx4aXYuPC90cmFuc2xhdGlvbj4="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2Fzc2l1cyBhbmQgTGFiZW8gZGlzY3Vzc2VkIHRoZSBtYXR0ZXIgd2l0aCBoaW0sIGhlIHdvdWxkIG1ha2Ugbm8gYW5zd2VyOyBidXQgaGUgaGFkIGEgcHJpdmF0ZSBpbnRlcnZpZXcgYnkgaGltc2VsZiB3aXRoIEJydXR1cywgYW5kIG9uIGxlYXJuaW5nIHRoYXQgaGUgd2FzIGxlYWRlciBvZiB0aGUgZW50ZXJwcmlzZSwgcmVhZGlseSBhZ3JlZWQgdG8gY28tb3BlcmF0ZS4gVGhlIG1vc3QgYW5kIGJlc3Qgb2YgdGhlIHJlc3QgYWxzbyB3ZXJlIHdvbiBvdmVyIGJ5IHRoZSByZXB1dGF0aW9uIGluIHdoaWNoIEJydXR1cyBzdG9vZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhbHRob3VnaCB0aGV5IGV4Y2hhbmdlZCBuZWl0aGVyIG9hdGhzIG5vciBzYWNyZWQgcGxlZGdlcywgdGhleSBhbGwga2VwdCB0aGUgdW5kZXJ0YWtpbmcgc28gbXVjaCB0byB0aGVtc2VsdmVzIGFuZCB3ZXJlIHNvIHNlY3JldCBpbiBjYXJyeWluZyBpdCBvdXQgdG9nZXRoZXIgdGhhdCwgYWx0aG91Z2ggaXQgd2FzIGZvcmV0b2xkIGJ5IHRoZSBnb2RzIGluIHByb3BoZWNpZXMgYW5kIG9yYWNsZXMgYW5kIHNhY3JpZmljaWFsIG9tZW5zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDYzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciBseGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbm8gb25lIHdvdWxkIGJlbGlldmUgaW4gaXQuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDYzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgY2hhcHRlciBseGlpaS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBjaGFwdGVyIGx4aWlpLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyBCcnV0dXMsIHNpbmNlIGhlIGhhZCBtYWRlIHRoZSBmb3JlbW9zdCBtZW4gb2YgUm9tZSBmb3IgZGlnbml0eSwgZmFtaWx5LCBhbmQgdmlydHVlLCBkZXBlbmRlbnQgb24gaGltc2VsZiwgYW5kIHNpbmNlIGhlIHVuZGVyc3Rvb2QgYWxsIHRoZSBkYW5nZXIgaW52b2x2ZWQsIGluIHB1YmxpYyB0cmllZCB0byBrZWVwIGhpcyB0aG91Z2h0cyB0byBoaW1zZWxmIGFuZCB1bmRlciBjb250cm9sIDsgYnV0IGF0IGhvbWUsIGFuZCBhdCBuaWdodCwgaGUgd2FzIG5vdCB0aGUgc2FtZSBtYW4uIFNvbWV0aW1lcywgaW4gc3BpdGUgb2YgaGltc2VsZiwgaGlzIGFueGlvdXMgdGhvdWdodHMgd291bGQgcm91c2UgaGltIG91dCBvZiBzbGVlcCwgYW5kIHNvbWV0aW1lcywgd2hlbiBoZSB3YXMgbW9yZSB0aGFuIGV2ZXIgaW1tZXJzZWQgaW4gY2FsY3VsYXRpb24gYW5kIGJlc2V0IHdpdGggcGVycGxleGl0aWVzLCBoaXMgd2lmZSwgd2hvIHNsZXB0IGJ5IGhpcyBzaWRlLCBwZXJjZWl2ZWQgdGhhdCBoZSB3YXMgZnVsbCBvZiB1bndvbnRlZCB0cm91YmxlLCBhbmQgd2FzIHJldm9sdmluZyBpbiBoaXMgbWluZCBzb21lIGRpZmZpY3VsdCBhbmQgY29tcGxpY2F0ZWQgcGxhbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEJydXR1cywgc2luY2UgaGUgaGFkIG1hZGUgdGhlIGZvcmVtb3N0IG1lbiBvZiBSb21lIGZvciBkaWduaXR5LCBmYW1pbHksIGFuZCB2aXJ0dWUsIGRlcGVuZGVudCBvbiBoaW1zZWxmLCBhbmQgc2luY2UgaGUgdW5kZXJzdG9vZCBhbGwgdGhlIGRhbmdlciBpbnZvbHZlZCwgaW4gcHVibGljIHRyaWVkIHRvIGtlZXAgaGlzIHRob3VnaHRzIHRvIGhpbXNlbGYgYW5kIHVuZGVyIGNvbnRyb2wgOyBidXQgYXQgaG9tZSwgYW5kIGF0IG5pZ2h0LCBoZSB3YXMgbm90IHRoZSBzYW1lIG1hbi4gU29tZXRpbWVzLCBpbiBzcGl0ZSBvZiBoaW1zZWxmLCBoaXMgYW54aW91cyB0aG91Z2h0cyB3b3VsZCByb3VzZSBoaW0gb3V0IG9mIHNsZWVwLCBhbmQgc29tZXRpbWVzLCB3aGVuIGhlIHdhcyBtb3JlIHRoYW4gZXZlciBpbW1lcnNlZCBpbiBjYWxjdWxhdGlvbiBhbmQgYmVzZXQgd2l0aCBwZXJwbGV4aXRpZXMsIGhpcyB3aWZlLCB3aG8gc2xlcHQgYnkgaGlzIHNpZGUsIHBlcmNlaXZlZCB0aGF0IGhlIHdhcyBmdWxsIG9mIHVud29udGVkIHRyb3VibGUsIGFuZCB3YXMgcmV2b2x2aW5nIGluIGhpcyBtaW5kIHNvbWUgZGlmZmljdWx0IGFuZCBjb21wbGljYXRlZCBwbGFuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Qb3JjaWEsIGFzIGhhcyBiZWVuIHNhaWQsIHdhcyBhIGRhdWdodGVyIG9mIENhdG8sIGFuZCB3aGVuIEJydXR1cywgd2hvIHdhcyBoZXIgY291c2luLCB0b29rIGhlciB0byB3aWZlLCBzaGUgd2FzIG5vdCBhIHZpcmdpbjsgc2hlIHdhcywgaG93ZXZlciwgc3RpbGwgdmVyeSB5b3VuZywgYW5kIGhhZCBieSBoZXIgZGVjZWFzZWQgaHVzYmFuZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hcmN1cyBDYWxwdXJuaXVzIEJpYnVsdXMsIGNvbGxlYWd1ZSBvZiBDYWVzYXIgaW4gdGhlIGNvbnN1bHNoaXAgb2YgNTkgQi5DLjwvbm90ZT4gYSBsaXR0bGUgc29uIHdob3NlIG5hbWUgd2FzIEJpYnVsdXMuIEEgc21hbGwgYm9vayBjb250YWluaW5nIG1lbW9pcnMgb2YgQnJ1dHVzIHdhcyB3cml0dGVuIGJ5IGhpbSwgYW5kIGlzIHN0aWxsIGV4dGFudC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+UG9yY2lhLCBiZWluZyBvZiBhbiBhZmZlY3Rpb25hdGUgbmF0dXJlLCBmb25kIG9mIGhlciBodXNiYW5kLCBhbmQgZnVsbCBvZiBzZW5zaWJsZSBwcmlkZSwgZGlkIG5vdCB0cnkgdG8gcXVlc3Rpb24gaGVyIGh1c2JhbmQgYWJvdXQgaGlzIHNlY3JldHMgdW50aWwgc2hlIGhhZCBwdXQgaGVyc2VsZiB0byB0aGUgZm9sbG93aW5nIHRlc3QuIFNoZSB0b29rIGEgbGl0dGxlIGtuaWZlLCBzdWNoIGFzIGJhcmJlcnMgdXNlIHRvIGN1dCB0aGUgZmluZ2VyIG5haWxzLCBhbmQgYWZ0ZXIgYmFuaXNoaW5nIGFsbCBoZXIgYXR0ZW5kYW50cyBmcm9tIGhlciBjaGFtYmVyLCBtYWRlIGEgZGVlcCBnYXNoIGluIGhlciB0aGlnaCwgc28gdGhhdCB0aGVyZSB3YXMgYSBjb3Bpb3VzIGZsb3cgb2YgYmxvb2QsIGFuZCBhZnRlciBhIGxpdHRsZSB3aGlsZSB2aW9sZW50IHBhaW5zIGFuZCBjaGlsbHMgYW5kIGZldmVyIGZvbGxvd2VkIGZyb20gdGhlIHdvdW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TZWVpbmcgdGhhdCBCcnV0dXMgd2FzIGRpc3R1cmJlZCBhbmQgZ3JlYXRseSBkaXN0cmVzc2VkLCBpbiB0aGUgaGVpZ2h0IG9mIGhlciBhbmd1aXNoIHNoZSBzcG9rZSB0byBoaW0gdGh1czogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CcnV0dXMsIEkgYW0gQ2F0bydzIGRhdWdodGVyLCBhbmQgSSB3YXMgYnJvdWdodCBpbnRvIHRoeSBob3VzZSwgbm90LCBsaWtlIGEgbWVyZSBjb25jdWJpbmUsIHRvIHNoYXJlIHRoeSBiZWQgYW5kIGJvYXJkIG1lcmVseSwgYnV0IHRvIGJlIGEgcGFydG5lciBpbiB0aHkgam95cywgYW5kIGEgcGFydG5lciBpbiB0aHkgdHJvdWJsZXMuIFRob3UsIGluZGVlZCwgYXJ0IGZhdWx0bGVzcyBhcyBhIGh1c2JhbmQ7IGJ1dCBob3cgY2FuIEkgc2hvdyB0aGVlIGFueSBncmF0ZWZ1bCBzZXJ2aWNlIGlmIEkgYW0gdG8gc2hhcmUgbmVpdGhlciB0aHkgc2VjcmV0IHN1ZmZlcmluZyBub3IgdGhlIGFueGlldHkgd2hpY2ggY3JhdmVzIGEgbG95YWwgY29uZmlkYW50PyAKCQkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SSBrbm93IHRoYXQgd29tYW4ncyBuYXR1cmUgaXMgdGhvdWdodCB0b28gd2VhayB0byBlbmR1cmUgYSBzZWNyZXQ7IGJ1dCBnb29kIHJlYXJpbmcgYW5kIGV4Y2VsbGVudCBjb21wYW5pb25zaGlwIGdvIGZhciB0b3dhcmRzIHN0cmVuZ3RoZW5pbmcgdGhlIGNoYXJhY3RlciwgYW5kIGl0IGlzIG15IGhhcHB5IGxvdCB0byBiZSBib3RoIHRoZSBkYXVnaHRlciBvZiBDYXRvIGFuZCB0aGUgd2lmZSBvZiBCcnV0dXMuIEJlZm9yZSB0aGlzIEkgcHV0IGxlc3MgY29uZmlkZW5jZSBpbiB0aGVzZSBhZHZhbnRhZ2VzLCBidXQgbm93IEkga25vdyB0aGF0IEkgYW0gc3VwZXJpb3IgZXZlbiB0byBwYWluLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGhhdmluZyBzcG9rZW4sIHNoZSBzaG93ZWQgaGltIGhlciB3b3VuZCBhbmQgZXhwbGFpbmVkIGhlciB0ZXN0OyB3aGVyZXVwb24gQnJ1dHVzLCBhbWF6ZWQsIGFuZCBsaWZ0aW5nIGhpcyBoYW5kcyB0byBoZWF2ZW4sIHByYXllZCB0aGF0IGhlIG1pZ2h0IHN1Y2NlZWQgaW4gaGlzIHVuZGVydGFraW5nIGFuZCB0aHVzIHNob3cgaGltc2VsZiBhIHdvcnRoeSBodXNiYW5kIG9mIFBvcmNpYS4gVGhlbiBoZSBzb3VnaHQgdG8gcmVzdG9yZSBoaXMgd2lmZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBvcmNpYSwgYXMgaGFzIGJlZW4gc2FpZCwgd2FzIGEgZGF1Z2h0ZXIgb2YgQ2F0bywgYW5kIHdoZW4gQnJ1dHVzLCB3aG8gd2FzIGhlciBjb3VzaW4sIHRvb2sgaGVyIHRvIHdpZmUsIHNoZSB3YXMgbm90IGEgdmlyZ2luOyBzaGUgd2FzLCBob3dldmVyLCBzdGlsbCB2ZXJ5IHlvdW5nLCBhbmQgaGFkIGJ5IGhlciBkZWNlYXNlZCBodXNiYW5kPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYXJjdXMgQ2FscHVybml1cyBCaWJ1bHVzLCBjb2xsZWFndWUgb2YgQ2Flc2FyIGluIHRoZSBjb25zdWxzaGlwIG9mIDU5IEIuQy48L25vdGU+IGEgbGl0dGxlIHNvbiB3aG9zZSBuYW1lIHdhcyBCaWJ1bHVzLiBBIHNtYWxsIGJvb2sgY29udGFpbmluZyBtZW1vaXJzIG9mIEJydXR1cyB3YXMgd3JpdHRlbiBieSBoaW0sIGFuZCBpcyBzdGlsbCBleHRhbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBvcmNpYSwgYmVpbmcgb2YgYW4gYWZmZWN0aW9uYXRlIG5hdHVyZSwgZm9uZCBvZiBoZXIgaHVzYmFuZCwgYW5kIGZ1bGwgb2Ygc2Vuc2libGUgcHJpZGUsIGRpZCBub3QgdHJ5IHRvIHF1ZXN0aW9uIGhlciBodXNiYW5kIGFib3V0IGhpcyBzZWNyZXRzIHVudGlsIHNoZSBoYWQgcHV0IGhlcnNlbGYgdG8gdGhlIGZvbGxvd2luZyB0ZXN0LiBTaGUgdG9vayBhIGxpdHRsZSBrbmlmZSwgc3VjaCBhcyBiYXJiZXJzIHVzZSB0byBjdXQgdGhlIGZpbmdlciBuYWlscywgYW5kIGFmdGVyIGJhbmlzaGluZyBhbGwgaGVyIGF0dGVuZGFudHMgZnJvbSBoZXIgY2hhbWJlciwgbWFkZSBhIGRlZXAgZ2FzaCBpbiBoZXIgdGhpZ2gsIHNvIHRoYXQgdGhlcmUgd2FzIGEgY29waW91cyBmbG93IG9mIGJsb29kLCBhbmQgYWZ0ZXIgYSBsaXR0bGUgd2hpbGUgdmlvbGVudCBwYWlucyBhbmQgY2hpbGxzIGFuZCBmZXZlciBmb2xsb3dlZCBmcm9tIHRoZSB3b3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNlZWluZyB0aGF0IEJydXR1cyB3YXMgZGlzdHVyYmVkIGFuZCBncmVhdGx5IGRpc3RyZXNzZWQsIGluIHRoZSBoZWlnaHQgb2YgaGVyIGFuZ3Vpc2ggc2hlIHNwb2tlIHRvIGhpbSB0aHVzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnJ1dHVzLCBJIGFtIENhdG8ncyBkYXVnaHRlciwgYW5kIEkgd2FzIGJyb3VnaHQgaW50byB0aHkgaG91c2UsIG5vdCwgbGlrZSBhIG1lcmUgY29uY3ViaW5lLCB0byBzaGFyZSB0aHkgYmVkIGFuZCBib2FyZCBtZXJlbHksIGJ1dCB0byBiZSBhIHBhcnRuZXIgaW4gdGh5IGpveXMsIGFuZCBhIHBhcnRuZXIgaW4gdGh5IHRyb3VibGVzLiBUaG91LCBpbmRlZWQsIGFydCBmYXVsdGxlc3MgYXMgYSBodXNiYW5kOyBidXQgaG93IGNhbiBJIHNob3cgdGhlZSBhbnkgZ3JhdGVmdWwgc2VydmljZSBpZiBJIGFtIHRvIHNoYXJlIG5laXRoZXIgdGh5IHNlY3JldCBzdWZmZXJpbmcgbm9yIHRoZSBhbnhpZXR5IHdoaWNoIGNyYXZlcyBhIGxveWFsIGNvbmZpZGFudD8gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SSBrbm93IHRoYXQgd29tYW4ncyBuYXR1cmUgaXMgdGhvdWdodCB0b28gd2VhayB0byBlbmR1cmUgYSBzZWNyZXQ7IGJ1dCBnb29kIHJlYXJpbmcgYW5kIGV4Y2VsbGVudCBjb21wYW5pb25zaGlwIGdvIGZhciB0b3dhcmRzIHN0cmVuZ3RoZW5pbmcgdGhlIGNoYXJhY3RlciwgYW5kIGl0IGlzIG15IGhhcHB5IGxvdCB0byBiZSBib3RoIHRoZSBkYXVnaHRlciBvZiBDYXRvIGFuZCB0aGUgd2lmZSBvZiBCcnV0dXMuIEJlZm9yZSB0aGlzIEkgcHV0IGxlc3MgY29uZmlkZW5jZSBpbiB0aGVzZSBhZHZhbnRhZ2VzLCBidXQgbm93IEkga25vdyB0aGF0IEkgYW0gc3VwZXJpb3IgZXZlbiB0byBwYWluLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkkga25vdyB0aGF0IHdvbWFuJ3MgbmF0dXJlIGlzIHRob3VnaHQgdG9vIHdlYWsgdG8gZW5kdXJlIGEgc2VjcmV0OyBidXQgZ29vZCByZWFyaW5nIGFuZCBleGNlbGxlbnQgY29tcGFuaW9uc2hpcCBnbyBmYXIgdG93YXJkcyBzdHJlbmd0aGVuaW5nIHRoZSBjaGFyYWN0ZXIsIGFuZCBpdCBpcyBteSBoYXBweSBsb3QgdG8gYmUgYm90aCB0aGUgZGF1Z2h0ZXIgb2YgQ2F0byBhbmQgdGhlIHdpZmUgb2YgQnJ1dHVzLiBCZWZvcmUgdGhpcyBJIHB1dCBsZXNzIGNvbmZpZGVuY2UgaW4gdGhlc2UgYWR2YW50YWdlcywgYnV0IG5vdyBJIGtub3cgdGhhdCBJIGFtIHN1cGVyaW9yIGV2ZW4gdG8gcGFpbi48L3RyYW5zbGF0aW9uPg=="
translation['13.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaGF2aW5nIHNwb2tlbiwgc2hlIHNob3dlZCBoaW0gaGVyIHdvdW5kIGFuZCBleHBsYWluZWQgaGVyIHRlc3Q7IHdoZXJldXBvbiBCcnV0dXMsIGFtYXplZCwgYW5kIGxpZnRpbmcgaGlzIGhhbmRzIHRvIGhlYXZlbiwgcHJheWVkIHRoYXQgaGUgbWlnaHQgc3VjY2VlZCBpbiBoaXMgdW5kZXJ0YWtpbmcgYW5kIHRodXMgc2hvdyBoaW1zZWxmIGEgd29ydGh5IGh1c2JhbmQgb2YgUG9yY2lhLiBUaGVuIGhlIHNvdWdodCB0byByZXN0b3JlIGhpcyB3aWZlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BIG1lZXRpbmcgb2YgdGhlIHNlbmF0ZSBoYXZpbmcgYmVlbiBjYWxsZWQsIHRvIHdoaWNoIGl0IHdhcyBleHBlY3RlZCB0aGF0IENhZXNhciB3b3VsZCBjb21lLCB0aGV5IGRldGVybWluZWQgdG8gbWFrZSB0aGVpciBhdHRlbXB0IHRoZXJlOyBmb3IgdGhleSBjb3VsZCB0aGVuIGdhdGhlciB0b2dldGhlciBpbiBudW1iZXJzIHdpdGhvdXQgZXhjaXRpbmcgc3VzcGljaW9uLCBhbmQgd291bGQgaGF2ZSBhbGwgdGhlIGJlc3QgYW5kIGZvcmVtb3N0IG1lbiBpbiBvbmUgcGxhY2UsIHdobywgb25jZSB0aGUgZ3JlYXQgZGVlZCB3YXMgZG9uZSwgd291bGQgc3RyYWlnaHR3YXkgZXNwb3VzZSB0aGUgY2F1c2Ugb2YgbGliZXJ0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIHRob3VnaHQsIHRvbywgdGhhdCB0aGUgcGxhY2Ugb2YgbWVldGluZyB3YXMgcHJvdmlkZW50aWFsbHkgaW4gdGhlaXIgZmF2b3VyOyBmb3IgaXQgd2FzIG9uZSBvZiB0aGUgcG9ydGljb2VzIGFib3V0IHRoZSB0aGVhdHJlLCBjb250YWluaW5nIGEgc2Vzc2lvbi1yb29tIGluIHdoaWNoIHN0b29kIGEgc3RhdHVlIG9mIFBvbXBleS4gVGhpcyBzdGF0dWUgdGhlIGNpdHkgaGFkIGVyZWN0ZWQgaW4gaGlzIGhvbm91ciB3aGVuIGhlIGFkb3JuZWQgdGhhdCBwbGFjZSB3aXRoIHRoZSBwb3J0aWNvZXMgYW5kIHRoZSB0aGVhdHJlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDAuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgeGwuIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IEhpdGhlciwgdGhlbiwgdGhlIHNlbmF0ZSB3YXMgc3VtbW9uZWQgYWJvdXQgdGhlIG1pZGRsZSBvZiBNYXJjaDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hcmNoIDE1LCA0NCBCLkMuPC9ub3RlPiAodGhlIFJvbWFucyBjYWxsIHRoZSBkYXkgdGhlIElkZXMgb2YgTWFyY2gpLCBzbyB0aGF0IHNvbWUgaGVhdmVubHkgcG93ZXIgc2VlbWVkIHRvIGJlIGNvbmR1Y3RpbmcgQ2Flc2FyIHRvIFBvbXBleSdzIHZlbmdlYW5jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QSBtZWV0aW5nIG9mIHRoZSBzZW5hdGUgaGF2aW5nIGJlZW4gY2FsbGVkLCB0byB3aGljaCBpdCB3YXMgZXhwZWN0ZWQgdGhhdCBDYWVzYXIgd291bGQgY29tZSwgdGhleSBkZXRlcm1pbmVkIHRvIG1ha2UgdGhlaXIgYXR0ZW1wdCB0aGVyZTsgZm9yIHRoZXkgY291bGQgdGhlbiBnYXRoZXIgdG9nZXRoZXIgaW4gbnVtYmVycyB3aXRob3V0IGV4Y2l0aW5nIHN1c3BpY2lvbiwgYW5kIHdvdWxkIGhhdmUgYWxsIHRoZSBiZXN0IGFuZCBmb3JlbW9zdCBtZW4gaW4gb25lIHBsYWNlLCB3aG8sIG9uY2UgdGhlIGdyZWF0IGRlZWQgd2FzIGRvbmUsIHdvdWxkIHN0cmFpZ2h0d2F5IGVzcG91c2UgdGhlIGNhdXNlIG9mIGxpYmVydHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyB0aG91Z2h0LCB0b28sIHRoYXQgdGhlIHBsYWNlIG9mIG1lZXRpbmcgd2FzIHByb3ZpZGVudGlhbGx5IGluIHRoZWlyIGZhdm91cjsgZm9yIGl0IHdhcyBvbmUgb2YgdGhlIHBvcnRpY29lcyBhYm91dCB0aGUgdGhlYXRyZSwgY29udGFpbmluZyBhIHNlc3Npb24tcm9vbSBpbiB3aGljaCBzdG9vZCBhIHN0YXR1ZSBvZiBQb21wZXkuIFRoaXMgc3RhdHVlIHRoZSBjaXR5IGhhZCBlcmVjdGVkIGluIGhpcyBob25vdXIgd2hlbiBoZSBhZG9ybmVkIHRoYXQgcGxhY2Ugd2l0aCB0aGUgcG9ydGljb2VzIGFuZCB0aGUgdGhlYXRyZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0MC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBIaXRoZXIsIHRoZW4sIHRoZSBzZW5hdGUgd2FzIHN1bW1vbmVkIGFib3V0IHRoZSBtaWRkbGUgb2YgTWFyY2g8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0MC41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsLiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsLiA1Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TWFyY2ggMTUsIDQ0IEIuQy48L25vdGU+ICh0aGUgUm9tYW5zIGNhbGwgdGhlIGRheSB0aGUgSWRlcyBvZiBNYXJjaCksIHNvIHRoYXQgc29tZSBoZWF2ZW5seSBwb3dlciBzZWVtZWQgdG8gYmUgY29uZHVjdGluZyBDYWVzYXIgdG8gUG9tcGV5J3MgdmVuZ2VhbmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBkYXkgY2FtZSwgQnJ1dHVzIGdpcnQgb24gYSBkYWdnZXIsIHRvIHRoZSBrbm93bGVkZ2Ugb2YgaGlzIHdpZmUgYWxvbmUsIGFuZCB3ZW50IGZvcnRoLCB3aGlsZSB0aGUgcmVzdCBhc3NlbWJsZWQgYXQgdGhlIGhvdXNlIG9mIENhc3NpdXMgYW5kIGNvbmR1Y3RlZCBoaXMgc29uLCB3aG8gd2FzIGFib3V0IHRvIGFzc3VtZSB3aGF0IHdhcyBjYWxsZWQgdGhlIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj50b2dhIHZpcmlsaXM8L2ZvcmVpZ24+LDwvcT4gZG93biB0byB0aGUgZm9ydW0uIFRoZW5jZSB0aGV5IGFsbCBoYXN0ZW5lZCB0byB0aGUgcG9ydGljbyBvZiBQb21wZXkgYW5kIHdhaXRlZCB0aGVyZSwgZXhwZWN0aW5nIHRoYXQgQ2Flc2FyIHdvdWxkIHN0cmFpZ2h0LXdheSBjb21lIHRvIHRoZSBtZWV0aW5nIG9mIHRoZSBzZW5hdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGFueSBvbmUgd2hvIGtuZXcgd2hhdCB3YXMgYWJvdXQgdG8gaGFwcGVuIHdvdWxkIGhhdmUgYmVlbiBhYm92ZSBhbGwgdGhpbmdzIGFzdG9uaXNoZWQgYXQgdGhlIGluZGlmZmVyZW5jZSBhbmQgY29tcG9zdXJlIG9mIHRoZSBtZW4gb24gdGhlIGJyaW5rIG9mIHRoaXMgdGVycmlibGUgY3Jpc2lzLiBNYW55IG9mIHRoZW0gd2VyZSBwcmFldG9ycyBhbmQgdGhlcmVmb3JlIG9ibGlnZWQgdG8gcGVyZm9ybSB0aGUgZHV0aWVzIG9mIHRoZWlyIG9mZmljZSwgd2hlcmVpbiB0aGV5IG5vdCBvbmx5IGxpc3RlbmVkIGNhbG1seSB0byB0aG9zZSB3aG8gaGFkIHBldGl0aW9ucyB0byBvZmZlciBvciBxdWFycmVscyB0byBjb21wb3NlLCBhcyBpZiB0aGV5IGhhZCBhbXBsZSB0aW1lLCBidXQgYWxzbyB0b29rIHBhaW5zIHRvIGdpdmUgdGhlaXIgdmVyZGljdHMgaW4gZXZlcnkgY2FzZSB3aXRoIGFjY3VyYWN5IGFuZCBqdWRnbWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gYSBjZXJ0YWluIG1hbiB3aG8gd2FzIHVud2lsbGluZyB0byBzdWJtaXQgdG8gdGhlIHZlcmRpY3Qgb2YgQnJ1dHVzIGFwcGVhbGVkIHRvIENhZXNhciB3aXRoIGxvdWQgY3JpZXMgYW5kIGF0dGVzdGF0aW9ucywgQnJ1dHVzIHR1cm5lZCBoaXMgZ2F6ZSB1cG9uIHRoZSBieXN0YW5kZXJzIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhZXNhciBkb2VzIG5vdCBwcmV2ZW50IG1lIGZyb20gYWN0aW5nIGFjY29yZGluZyB0byB0aGUgbGF3cywgbm9yIHdpbGwgaGUgcHJldmVudCBtZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGRheSBjYW1lLCBCcnV0dXMgZ2lydCBvbiBhIGRhZ2dlciwgdG8gdGhlIGtub3dsZWRnZSBvZiBoaXMgd2lmZSBhbG9uZSwgYW5kIHdlbnQgZm9ydGgsIHdoaWxlIHRoZSByZXN0IGFzc2VtYmxlZCBhdCB0aGUgaG91c2Ugb2YgQ2Fzc2l1cyBhbmQgY29uZHVjdGVkIGhpcyBzb24sIHdobyB3YXMgYWJvdXQgdG8gYXNzdW1lIHdoYXQgd2FzIGNhbGxlZCB0aGUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj50b2dhIHZpcmlsaXM8L2ZvcmVpZ24+LDwvcT4gZG93biB0byB0aGUgZm9ydW0uIFRoZW5jZSB0aGV5IGFsbCBoYXN0ZW5lZCB0byB0aGUgcG9ydGljbyBvZiBQb21wZXkgYW5kIHdhaXRlZCB0aGVyZSwgZXhwZWN0aW5nIHRoYXQgQ2Flc2FyIHdvdWxkIHN0cmFpZ2h0LXdheSBjb21lIHRvIHRoZSBtZWV0aW5nIG9mIHRoZSBzZW5hdGUuIAoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+dG9nYSB2aXJpbGlzPC9mb3JlaWduPiw8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGFueSBvbmUgd2hvIGtuZXcgd2hhdCB3YXMgYWJvdXQgdG8gaGFwcGVuIHdvdWxkIGhhdmUgYmVlbiBhYm92ZSBhbGwgdGhpbmdzIGFzdG9uaXNoZWQgYXQgdGhlIGluZGlmZmVyZW5jZSBhbmQgY29tcG9zdXJlIG9mIHRoZSBtZW4gb24gdGhlIGJyaW5rIG9mIHRoaXMgdGVycmlibGUgY3Jpc2lzLiBNYW55IG9mIHRoZW0gd2VyZSBwcmFldG9ycyBhbmQgdGhlcmVmb3JlIG9ibGlnZWQgdG8gcGVyZm9ybSB0aGUgZHV0aWVzIG9mIHRoZWlyIG9mZmljZSwgd2hlcmVpbiB0aGV5IG5vdCBvbmx5IGxpc3RlbmVkIGNhbG1seSB0byB0aG9zZSB3aG8gaGFkIHBldGl0aW9ucyB0byBvZmZlciBvciBxdWFycmVscyB0byBjb21wb3NlLCBhcyBpZiB0aGV5IGhhZCBhbXBsZSB0aW1lLCBidXQgYWxzbyB0b29rIHBhaW5zIHRvIGdpdmUgdGhlaXIgdmVyZGljdHMgaW4gZXZlcnkgY2FzZSB3aXRoIGFjY3VyYWN5IGFuZCBqdWRnbWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGEgY2VydGFpbiBtYW4gd2hvIHdhcyB1bndpbGxpbmcgdG8gc3VibWl0IHRvIHRoZSB2ZXJkaWN0IG9mIEJydXR1cyBhcHBlYWxlZCB0byBDYWVzYXIgd2l0aCBsb3VkIGNyaWVzIGFuZCBhdHRlc3RhdGlvbnMsIEJydXR1cyB0dXJuZWQgaGlzIGdhemUgdXBvbiB0aGUgYnlzdGFuZGVycyBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhZXNhciBkb2VzIG5vdCBwcmV2ZW50IG1lIGZyb20gYWN0aW5nIGFjY29yZGluZyB0byB0aGUgbGF3cywgbm9yIHdpbGwgaGUgcHJldmVudCBtZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgbWFueSB0aGluZ3Mgb2NjdXJyZWQgdG8gc3VycHJpc2UgYW5kIGRpc3R1cmIgdGhlbS4gRmlyc3QgYW5kIGZvcmVtb3N0LCB0aG91Z2ggdGhlIGRheSB3YXMgYWR2YW5jaW5nLCBDYWVzYXIgZGVsYXllZCBoaXMgY29taW5nLCBiZWluZyBkZXRhaW5lZCBhdCBob21lIGJ5IGhpcyB3aWZlIGJlY2F1c2UgaGlzIG9tZW5zIHdlcmUgdW5wcm9waXRpb3VzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNjMuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXI8L3RpdGxlPiwgbHhpaWkuIDUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBwcmV2ZW50ZWQgZnJvbSBnb2luZyBmb3J0aCBieSB0aGUgc29vdGhzYXllcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIHNvbWUgb25lIGNhbWUgdXAgdG8gQ2FzY2EsIG9uZSBvZiB0aGUgY29uc3BpcmF0b3JzLCB0b29rIGhpbSBieSB0aGUgaGFuZCwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IGhpZCB0aGUgc2VjcmV0IGZyb20gdXMsIENhc2NhLCBidXQgQnJ1dHVzIGhhcyB0b2xkIG1lIGV2ZXJ5dGhpbmcuPC9xPiBBbmQgd2hlbiBDYXNjYSB3YXMgZHVtYiB3aXRoIGFtYXplbWVudCwgdGhlIG1hbiBidXJzdCBvdXQgbGF1Z2hpbmcgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SG93IGRpZCB5b3UgZ2V0IHNvIHJpY2ggb24gYSBzdWRkZW4sIG15IGdvb2QgZmVsbG93LCBhcyB0byBzdGFuZCBmb3IgdGhlIGFlZGlsZXNpbGlwPzwvcT4gU28gbmVhciBkaWQgQ2FzY2EgY29tZSwgaW4gdGhlIG1pc3Rha2UgY2F1c2VkIGJ5IHRoZSBtYW4ncyBhbWJpZ3VpdHksIHRvIGRpc2Nsb3NpbmcgdGhlIHNlY3JldC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIEJydXR1cyBhbmQgQ2Fzc2l1cyB3ZXJlIGdyZWV0ZWQgbW9yZSB3YXJtbHkgdGhhbiwgdXN1YWwgYnkgUG9waWxpdXMgTGFlbmFzLCBhIHNlbmF0b3IsIHdobyB0aGVuIHdoaXNwZXJlZCBxdWlldGx5IHRvIHRoZW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBqb2luIHlvdSBpbiBwcmF5aW5nIGZvciB0aGUgYWNjb21wbGlzaG1lbnQgb2Ygd2hhdCB5b3UgaGF2ZSBpbiBtaW5kLCBhbmQgZXhob3J0IHlvdSBub3QgdG8gZGVsYXksIGZvciB0aGUgbWF0dGVyIGlzIG9uIG1lbidzIHRvbmd1ZXMuPC9xPiBIYXZpbmcgc2FpZCB0aGlzLCBoZSB3ZW50IGF3YXksIGxlYXZpbmcgdGhlbSBmdWxsIG9mIHN1c3BpY2lvbiB0aGF0IHRoZWlyIHVuZGVydGFraW5nIGhhZCBiZWNvbWUga25vd24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBtYW55IHRoaW5ncyBvY2N1cnJlZCB0byBzdXJwcmlzZSBhbmQgZGlzdHVyYiB0aGVtLiBGaXJzdCBhbmQgZm9yZW1vc3QsIHRob3VnaCB0aGUgZGF5IHdhcyBhZHZhbmNpbmcsIENhZXNhciBkZWxheWVkIGhpcyBjb21pbmcsIGJlaW5nIGRldGFpbmVkIGF0IGhvbWUgYnkgaGlzIHdpZmUgYmVjYXVzZSBoaXMgb21lbnMgd2VyZSB1bnByb3BpdGlvdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNjMuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBseGlpaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHByZXZlbnRlZCBmcm9tIGdvaW5nIGZvcnRoIGJ5IHRoZSBzb290aHNheWVycy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA2My41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGx4aWlpLiA1LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGx4aWlpLiA1LjwvdHJhbnNsYXRpb24+"
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIHNvbWUgb25lIGNhbWUgdXAgdG8gQ2FzY2EsIG9uZSBvZiB0aGUgY29uc3BpcmF0b3JzLCB0b29rIGhpbSBieSB0aGUgaGFuZCwgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3UgaGlkIHRoZSBzZWNyZXQgZnJvbSB1cywgQ2FzY2EsIGJ1dCBCcnV0dXMgaGFzIHRvbGQgbWUgZXZlcnl0aGluZy48L3E+IEFuZCB3aGVuIENhc2NhIHdhcyBkdW1iIHdpdGggYW1hemVtZW50LCB0aGUgbWFuIGJ1cnN0IG91dCBsYXVnaGluZyBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhvdyBkaWQgeW91IGdldCBzbyByaWNoIG9uIGEgc3VkZGVuLCBteSBnb29kIGZlbGxvdywgYXMgdG8gc3RhbmQgZm9yIHRoZSBhZWRpbGVzaWxpcD88L3E+IFNvIG5lYXIgZGlkIENhc2NhIGNvbWUsIGluIHRoZSBtaXN0YWtlIGNhdXNlZCBieSB0aGUgbWFuJ3MgYW1iaWd1aXR5LCB0byBkaXNjbG9zaW5nIHRoZSBzZWNyZXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBCcnV0dXMgYW5kIENhc3NpdXMgd2VyZSBncmVldGVkIG1vcmUgd2FybWx5IHRoYW4sIHVzdWFsIGJ5IFBvcGlsaXVzIExhZW5hcywgYSBzZW5hdG9yLCB3aG8gdGhlbiB3aGlzcGVyZWQgcXVpZXRseSB0byB0aGVtOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBqb2luIHlvdSBpbiBwcmF5aW5nIGZvciB0aGUgYWNjb21wbGlzaG1lbnQgb2Ygd2hhdCB5b3UgaGF2ZSBpbiBtaW5kLCBhbmQgZXhob3J0IHlvdSBub3QgdG8gZGVsYXksIGZvciB0aGUgbWF0dGVyIGlzIG9uIG1lbidzIHRvbmd1ZXMuPC9xPiBIYXZpbmcgc2FpZCB0aGlzLCBoZSB3ZW50IGF3YXksIGxlYXZpbmcgdGhlbSBmdWxsIG9mIHN1c3BpY2lvbiB0aGF0IHRoZWlyIHVuZGVydGFraW5nIGhhZCBiZWNvbWUga25vd24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXQgdGhpcyBqdW5jdHVyZSwgdG9vLCBhIG1lc3NlbmdlciBmcm9tIGhpcyBob3VzZSBjYW1lIHJ1bm5pbmcgdG8gQnJ1dHVzIHdpdGggdGhlIHRpZGluZ3MgdGhhdCBoaXMgd2lmZSB3YXMgZGVhZC4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgUG9yY2lhLCBiZWluZyBkaXN0cmVzc2VkIGFib3V0IHdoYXQgd2FzIGltcGVuZGluZyBhbmQgdW5hYmxlIHRvIGJlYXIgdGhlIHdlaWdodCBvZiBoZXIgYW54aWV0eSwgY291bGQgd2l0aCBkaWZmaWN1bHR5IGtlZXAgaGVyc2VsZiBhdCBob21lLCBhbmQgYXQgZXZlcnkgbm9pc2Ugb3IgY3J5LCBsaWtlIHdvbWVuIGluIHRoZSBCYWNjaGljIGZyZW56eSwgc2hlIHdvdWxkIHJ1c2ggZm9ydGggYW5kIGFzayBldmVyeSBtZXNzZW5nZXIgd2hvIGNhbWUgaW4gZnJvbSB0aGUgZm9ydW0gaG93IEJydXR1cyB3YXMgZmFyaW5nLCBhbmQga2VwdCBzZW5kaW5nIG91dCBvdGhlcnMgY29udGludWFsbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIGFzIHRoZSB0aW1lIGdyZXcgbG9uZywgaGVyIGJvZGlseSBwb3dlcnMgY291bGQgbm8gbG9uZ2VyIGVuZHVyZSB0aGUgc3RyYWluLCBidXQgd2VyZSByZWxheGVkIGFuZCBlbmZlZWJsZWQgYXMgaGVyIHBlcnBsZXhpdGllcyB0aHJlYXRlbmVkIHRvIGRyaXZlIGhlciBtYWQuIFNoZSBoYWQgbm90IHRpbWUgdG8gZ28gdG8gaGVyIGNoYW1iZXIsIGJ1dCBqdXN0IGFzIHNoZSB3YXMsIHNpdHRpbmcgaW4gdGhlIG1pZHN0IG9mIGhlciBzZXJ2YW50cywgc2hlIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGZhaW50bmVzcyBhbmQgaGVscGxlc3Mgc3R1cG9yLCBoZXIgY29sb3VyIGZsZWQsIGFuZCBoZXIgc3BlZWNoIHdhcyB1dHRlcmx5IHN0YXllZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGVyIG1haWRzIHNocmlla2VkIGF0IHRoZSBzaWdodCwgYW5kIHNpbmNlIHRoZSBuZWlnaGJvdXJzIGNhbWUgcnVubmluZyBpbiBhIGNyb3dkIHRvIHRoZSBkb29yLCBhIHJlcG9ydCBzcGVlZGlseSB3ZW50IGZvcnRoIGFuZCBhIHN0b3J5IHdhcyBzcHJlYWQgYWJyb2FkIHRoYXQgc2hlIHdhcyBkZWFkLiBIb3dldmVyLCBzaGUgcmV2aXZlZCBpbiBhIHNob3J0IHRpbWUsIGNhbWUgdG8gaGVyc2VsZiwgYW5kIHdhcyBjYXJlZCBmb3IgYnkgaGVyIHdvbWVuOyBidXQgQnJ1dHVzLCB0aG91Z2ggaGUgd2FzIGNvbmZvdW5kZWQsIG5hdHVyYWxseSwgYnkgdGhlIHN0YXJ0bGluZyB0YWxlLCBuZXZlcnRoZWxlc3MgZGlkIG5vdCBhYmFuZG9uIGhpcyBwdWJsaWMgZHV0eSwgbm9yIHdhcyBoZSBkcml2ZW4gYnkgaGlzIGFmZmxpY3Rpb24gdG8gZHdlbGwgb24gaGlzIHByaXZhdGUgY29uY2VybnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBQb3JjaWEsIGJlaW5nIGRpc3RyZXNzZWQgYWJvdXQgd2hhdCB3YXMgaW1wZW5kaW5nIGFuZCB1bmFibGUgdG8gYmVhciB0aGUgd2VpZ2h0IG9mIGhlciBhbnhpZXR5LCBjb3VsZCB3aXRoIGRpZmZpY3VsdHkga2VlcCBoZXJzZWxmIGF0IGhvbWUsIGFuZCBhdCBldmVyeSBub2lzZSBvciBjcnksIGxpa2Ugd29tZW4gaW4gdGhlIEJhY2NoaWMgZnJlbnp5LCBzaGUgd291bGQgcnVzaCBmb3J0aCBhbmQgYXNrIGV2ZXJ5IG1lc3NlbmdlciB3aG8gY2FtZSBpbiBmcm9tIHRoZSBmb3J1bSBob3cgQnJ1dHVzIHdhcyBmYXJpbmcsIGFuZCBrZXB0IHNlbmRpbmcgb3V0IG90aGVycyBjb250aW51YWxseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIGFzIHRoZSB0aW1lIGdyZXcgbG9uZywgaGVyIGJvZGlseSBwb3dlcnMgY291bGQgbm8gbG9uZ2VyIGVuZHVyZSB0aGUgc3RyYWluLCBidXQgd2VyZSByZWxheGVkIGFuZCBlbmZlZWJsZWQgYXMgaGVyIHBlcnBsZXhpdGllcyB0aHJlYXRlbmVkIHRvIGRyaXZlIGhlciBtYWQuIFNoZSBoYWQgbm90IHRpbWUgdG8gZ28gdG8gaGVyIGNoYW1iZXIsIGJ1dCBqdXN0IGFzIHNoZSB3YXMsIHNpdHRpbmcgaW4gdGhlIG1pZHN0IG9mIGhlciBzZXJ2YW50cywgc2hlIHdhcyBvdmVyd2hlbG1lZCB3aXRoIGZhaW50bmVzcyBhbmQgaGVscGxlc3Mgc3R1cG9yLCBoZXIgY29sb3VyIGZsZWQsIGFuZCBoZXIgc3BlZWNoIHdhcyB1dHRlcmx5IHN0YXllZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlciBtYWlkcyBzaHJpZWtlZCBhdCB0aGUgc2lnaHQsIGFuZCBzaW5jZSB0aGUgbmVpZ2hib3VycyBjYW1lIHJ1bm5pbmcgaW4gYSBjcm93ZCB0byB0aGUgZG9vciwgYSByZXBvcnQgc3BlZWRpbHkgd2VudCBmb3J0aCBhbmQgYSBzdG9yeSB3YXMgc3ByZWFkIGFicm9hZCB0aGF0IHNoZSB3YXMgZGVhZC4gSG93ZXZlciwgc2hlIHJldml2ZWQgaW4gYSBzaG9ydCB0aW1lLCBjYW1lIHRvIGhlcnNlbGYsIGFuZCB3YXMgY2FyZWQgZm9yIGJ5IGhlciB3b21lbjsgYnV0IEJydXR1cywgdGhvdWdoIGhlIHdhcyBjb25mb3VuZGVkLCBuYXR1cmFsbHksIGJ5IHRoZSBzdGFydGxpbmcgdGFsZSwgbmV2ZXJ0aGVsZXNzIGRpZCBub3QgYWJhbmRvbiBoaXMgcHVibGljIGR1dHksIG5vciB3YXMgaGUgZHJpdmVuIGJ5IGhpcyBhZmZsaWN0aW9uIHRvIGR3ZWxsIG9uIGhpcyBwcml2YXRlIGNvbmNlcm5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IHdvcmQgd2FzIGJyb3VnaHQgdGhhdCBDYWVzYXIgd2FzIGNvbWluZywgYm9ybmUgb24gYSBsaXR0ZXIuIEZvciBpbiBjb25zZXF1ZW5jZSBvZiB0aGUgZGVqZWN0aW9uIGNhdXNlZCBieSBoaXMgb21lbnMsIGhlIGhhZCBkZXRlcm1pbmVkIG5vdCB0byBzYW5jdGlvbiBhbnkgaW1wb3J0YW50IGJ1c2luZXNzIGF0IHRoYXQgdGltZSwgYnV0IHRvIHBvc3Rwb25lIGl0LCB1bmRlciBwcmV0ZXh0IG9mIGluZGlzcG9zaXRpb24uIEFzIGhlIGRlc2NlbmRlZCBmcm9tIGhpcyBsaXR0ZXIsIFBvcGlsaXVzIExhZW5hcywgd2hvLCBhIGxpdHRsZSB3aGlsZSBiZWZvcmUsIGhhZCB3aXNoZWQgQnJ1dHVzIHN1Y2Nlc3MgaW4gaGlzIGVudGVycHJpc2UsIGh1cnJpZWQgdXAgdG8gaGltIGFuZCBjb252ZXJzZWQgd2l0aCBoaW0gZm9yIHNvbWUgdGltZSwgYW5kIENhZXNhciBzdG9vZCBhbmQgbGlzdGVuZWQgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29uc3BpcmF0b3JzIChmb3Igc28gdGhleSBzaGFsbCBiZSBjYWxsZWQpIGNvdWxkIG5vdCBoZWFyIHdoYXQgaGUgc2FpZCwgYnV0IGp1ZGdpbmcgZnJvbSB0aGVpciBzdXNwaWNpb25zIHRoYXQgd2hhdCBoZSB0b2xkIENhZXNhciB3YXMgYSByZXZlbGF0aW9uIG9mIHRoZWlyIHBsb3QsIHRoZXkgd2VyZSBkaXNjb25jZXJ0ZWQgaW4gdGhlaXIgcGxhbnMsIGFuZCBtdXR1YWxseSBhZ3JlZWQgYnkgbG9va3Mgd2hpY2ggcGFzc2VkIGJldHdlZW4gdGhlbSB0aGF0IHRoZXkgbXVzdCBub3QgYXdhaXQgYXJyZXN0LCBidXQgYXQgb25jZSBkaXNwYXRjaCB0aGVtc2VsdmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DYXNzaXVzIGFuZCBzb21lIG90aGVycywgaW5kZWVkLCBoYWQgYWxyZWFkeSBncmFzcGVkIHRoZSBoYW5kbGVzIG9mIHRoZSBkYWdnZXJzIGJlbmVhdGggdGhlaXIgcm9iZXMgYW5kIHdlcmUgYWJvdXQgdG8gZHJhdyB0aGVtLCB3aGVuIEJydXR1cyBvYnNlcnZlZCBmcm9tIHRoZSBtaWVuIG9mIExhZW5hcyB0aGF0IGhlIHdhcyBhc2tpbmcgZWFnZXJseSBmb3Igc29tZXRoaW5nIGFuZCBub3QgZGVub3VuY2luZyBhbnlvbmUuIEJydXR1cyBzYWlkIG5vdGhpbmcsIGJlY2F1c2UgbWFueSB3ZXJlIGFib3V0IGhpbSB3aG8gd2VyZSBub3QgaW4gdGhlIHBsb3QsIGJ1dCBieSB0aGUgY2hlZXJmdWxuZXNzIG9mIGhpcyBjb3VudGVuYW5jZSBnYXZlIGNvdXJhZ2UgdG8gQ2Fzc2l1cyBhbmQgaGlzIGZyaWVuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBhIGxpdHRsZSB3aGlsZSBMYWVuYXMga2lzc2VkIENhZXNhcidzIGhhbmQgYW5kIHdpdGhkcmV3LiBIZSBoYWQgbWFkZSBpdCBjbGVhciB0aGF0IGl0IHdhcyBpbiBoaXMgb3duIGJlaGFsZiBhbmQgb24gc29tZXRoaW5nIHdoaWNoIGNsb3NlbHkgY29uY2VybmVkIGhpbXNlbGYgdGhhdCBoZSBoYWQgY29uc3VsdGVkIENhZXNhci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB3b3JkIHdhcyBicm91Z2h0IHRoYXQgQ2Flc2FyIHdhcyBjb21pbmcsIGJvcm5lIG9uIGEgbGl0dGVyLiBGb3IgaW4gY29uc2VxdWVuY2Ugb2YgdGhlIGRlamVjdGlvbiBjYXVzZWQgYnkgaGlzIG9tZW5zLCBoZSBoYWQgZGV0ZXJtaW5lZCBub3QgdG8gc2FuY3Rpb24gYW55IGltcG9ydGFudCBidXNpbmVzcyBhdCB0aGF0IHRpbWUsIGJ1dCB0byBwb3N0cG9uZSBpdCwgdW5kZXIgcHJldGV4dCBvZiBpbmRpc3Bvc2l0aW9uLiBBcyBoZSBkZXNjZW5kZWQgZnJvbSBoaXMgbGl0dGVyLCBQb3BpbGl1cyBMYWVuYXMsIHdobywgYSBsaXR0bGUgd2hpbGUgYmVmb3JlLCBoYWQgd2lzaGVkIEJydXR1cyBzdWNjZXNzIGluIGhpcyBlbnRlcnByaXNlLCBodXJyaWVkIHVwIHRvIGhpbSBhbmQgY29udmVyc2VkIHdpdGggaGltIGZvciBzb21lIHRpbWUsIGFuZCBDYWVzYXIgc3Rvb2QgYW5kIGxpc3RlbmVkIHRvIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb25zcGlyYXRvcnMgKGZvciBzbyB0aGV5IHNoYWxsIGJlIGNhbGxlZCkgY291bGQgbm90IGhlYXIgd2hhdCBoZSBzYWlkLCBidXQganVkZ2luZyBmcm9tIHRoZWlyIHN1c3BpY2lvbnMgdGhhdCB3aGF0IGhlIHRvbGQgQ2Flc2FyIHdhcyBhIHJldmVsYXRpb24gb2YgdGhlaXIgcGxvdCwgdGhleSB3ZXJlIGRpc2NvbmNlcnRlZCBpbiB0aGVpciBwbGFucywgYW5kIG11dHVhbGx5IGFncmVlZCBieSBsb29rcyB3aGljaCBwYXNzZWQgYmV0d2VlbiB0aGVtIHRoYXQgdGhleSBtdXN0IG5vdCBhd2FpdCBhcnJlc3QsIGJ1dCBhdCBvbmNlIGRpc3BhdGNoIHRoZW1zZWx2ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhc3NpdXMgYW5kIHNvbWUgb3RoZXJzLCBpbmRlZWQsIGhhZCBhbHJlYWR5IGdyYXNwZWQgdGhlIGhhbmRsZXMgb2YgdGhlIGRhZ2dlcnMgYmVuZWF0aCB0aGVpciByb2JlcyBhbmQgd2VyZSBhYm91dCB0byBkcmF3IHRoZW0sIHdoZW4gQnJ1dHVzIG9ic2VydmVkIGZyb20gdGhlIG1pZW4gb2YgTGFlbmFzIHRoYXQgaGUgd2FzIGFza2luZyBlYWdlcmx5IGZvciBzb21ldGhpbmcgYW5kIG5vdCBkZW5vdW5jaW5nIGFueW9uZS4gQnJ1dHVzIHNhaWQgbm90aGluZywgYmVjYXVzZSBtYW55IHdlcmUgYWJvdXQgaGltIHdobyB3ZXJlIG5vdCBpbiB0aGUgcGxvdCwgYnV0IGJ5IHRoZSBjaGVlcmZ1bG5lc3Mgb2YgaGlzIGNvdW50ZW5hbmNlIGdhdmUgY291cmFnZSB0byBDYXNzaXVzIGFuZCBoaXMgZnJpZW5kcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhZnRlciBhIGxpdHRsZSB3aGlsZSBMYWVuYXMga2lzc2VkIENhZXNhcidzIGhhbmQgYW5kIHdpdGhkcmV3LiBIZSBoYWQgbWFkZSBpdCBjbGVhciB0aGF0IGl0IHdhcyBpbiBoaXMgb3duIGJlaGFsZiBhbmQgb24gc29tZXRoaW5nIHdoaWNoIGNsb3NlbHkgY29uY2VybmVkIGhpbXNlbGYgdGhhdCBoZSBoYWQgY29uc3VsdGVkIENhZXNhci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgc2VuYXRlIGhhZCBwcmVjZWRlZCBDYWVzYXIgaW50byB0aGUgc2Vzc2lvbi1yb29tLCB0aGUgcmVzdCBvZiB0aGUgY29uc3BpcmF0b3JzIHN0YXRpb25lZCB0aGVtc2VsdmVzIGFib3V0IENhZXNhcidzIGNoYWlyLCBhcyBpZiB0aGV5IGludGVuZGVkIHRvIGhhdmUgc29tZSBjb25mZXJlbmNlIHdpdGggaGltLCBhbmQgQ2Fzc2l1cyBpcyBzYWlkIHRvIGhhdmUgdHVybmVkIGhpcyBmYWNlIHRvd2FyZHMgdGhlIHN0YXR1ZSBvZiBQb21wZXkgYW5kIHRvIGhhdmUgaW52b2tlZCBpdCwgYXMgaWYgaXQgaGFkIHVuZGVyc3RhbmRpbmc7IGJ1dCBUcmVib25pdXMgZHJldyBBbnRvbnkgaW50byBjb252ZXJzYXRpb24gYXQgdGhlIGRvb3IgYW5kIGtlcHQgaGltIG91dHNpZGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDY2LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIGx4dmkuIDM8L2JpYmw+LCBCcnV0dXMgQWxiaW51cyBpcyBpbmNvcnJlY3RseSBzYWlkIHRvIGhhdmUgZGV0YWluZWQgQW50b255IGluIGNvbnZlcnNhdGlvbi4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTYuMTE3IiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZT5CLkMuPC90aXRsZT4gaWkuIDExNzwvYmlibD4sIGFuZCBDaWNlcm8ncyBsZXR0ZXIgdG8gVHJlYm9uaXVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDEwLjI4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkVwaXN0LjwvdGl0bGU+IHguIDI4PC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIENhZXNhciBlbnRlcmVkLCB0aGUgc2VuYXRlIHJvc2UgaW4gaGlzIGhvbm91ciwgYnV0IGFzIHNvb24gYXMgaGUgd2FzIHNlYXRlZCB0aGUgY29uc3BpcmF0b3JzIHN1cnJvdW5kZWQgaGltIGluIGEgYm9keSwgcHV0dGluZyBmb3J3YXJkIFR1bGxpdXMgQ2ltYmVyIG9mIHRoZWlyIG51bWJlciB3aXRoIGEgcGxlYSBpbiBiZWhhbGYgb2YgaGlzIGJyb3RoZXIsIHdobyB3YXMgaW4gZXhpbGUuIFRoZSBvdGhlcnMgYWxsIGpvaW5lZCBpbiBoaXMgcGxlYSwgYW5kIGNsYXNwaW5nIENhZXNhcidzIGhhbmRzLCBraXNzZWQgaGlzIGJyZWFzdCBhbmQgaGlzIGhlYWQuIEF0IGZpcnN0LCBDYWVzYXIgbWVyZWx5IHJlamVjdGVkIHRoZWlyIHBsZWFzLCBhbmQgdGhlbiwgd2hlbiB0aGV5IHdvdWxkIG5vdCBkZXNpc3QsIHRyaWVkIHRvIGZyZWUgaGltc2VsZiBmcm9tIHRoZW0gYnkgZm9yY2UuIEF0IHRoaXMsIFR1bGxpdXMgdG9yZSBDYWVzYXIncyByb2JlIGZyb20gaGlzIHNob3VsZGVycyB3aXRoIGJvdGggaGFuZHMsIGFuZCBDYXNjYSwgd2hvIHN0b29kIGJlaGluZCBoaW0sIGRyZXcgaGlzIGRhZ2dlciBhbmQgZ2F2ZSBoaW0gdGhlIGZpcnN0IHN0YWIsIG5vdCBhIGRlZXAgb25lLCBuZWFyIHRoZSBzaG91bGRlci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIGNhdWdodCB0aGUgaGFuZGxlIG9mIHRoZSBkYWdnZXIgYW5kIGNyaWVkIG91dCBsb3VkbHkgaW4gTGF0aW46IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW1waW91cyBDYXNjYSwgd2hhdCBkb2VzdCB0aG91PzwvcT4gVGhlbiBDYXNjYSwgYWRkcmVzc2luZyBoaXMgYnJvdGhlciBpbiBHcmVlaywgYmFkZSBoaW0gY29tZSB0byBoaXMgYWlkLiBBbmQgbm93IENhZXNhciBoYWQgcmVjZWl2ZWQgbWFueSBibG93cyBhbmQgd2FzIGxvb2tpbmcgYWJvdXQgYW5kIHNlZWtpbmcgdG8gZm9yY2UgaGlzIHdheSB0aHJvdWdoIGhpcyBhc3NhaWxhbnRzLCB3aGVuIGhlIHNhdyBCcnV0dXMgc2V0dGluZyB1cG9uIGhpbSB3aXRoIGRyYXduIGRhZ2dlci4gQXQgdGhpcywgaGUgZHJvcHBlZCB0aGUgaGFuZCBvZiBDYXNjYSB3aGljaCBoZSBoYWQgc2VpemVkLCBjb3ZlcmVkIGhpcyBoZWFkIHdpdGggaGlzIHJvYmUsIGFuZCByZXNpZ25lZCBoaW1zZWxmIHRvIHRoZSBkYWdnZXItc3Ryb2tlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNvbnNwaXJhdG9ycywgY3Jvd2RpbmcgZWFnZXJseSBhYm91dCB0aGUgYm9keSwgYW5kIHBseWluZyB0aGVpciBtYW55IGRhZ2dlcnMsIHdvdW5kZWQgb25lIGFub3RoZXIsIHNvIHRoYXQgQnJ1dHVzIGFsc28gZ290IGEgd291bmQgaW4gdGhlIGhhbmQgYXMgaGUgc291Z2h0IHRvIHRha2UgcGFydCBpbiB0aGUgbXVyZGVyLCBhbmQgYWxsIHdlcmUgY292ZXJlZCB3aXRoIGJsb29kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgc2VuYXRlIGhhZCBwcmVjZWRlZCBDYWVzYXIgaW50byB0aGUgc2Vzc2lvbi1yb29tLCB0aGUgcmVzdCBvZiB0aGUgY29uc3BpcmF0b3JzIHN0YXRpb25lZCB0aGVtc2VsdmVzIGFib3V0IENhZXNhcidzIGNoYWlyLCBhcyBpZiB0aGV5IGludGVuZGVkIHRvIGhhdmUgc29tZSBjb25mZXJlbmNlIHdpdGggaGltLCBhbmQgQ2Fzc2l1cyBpcyBzYWlkIHRvIGhhdmUgdHVybmVkIGhpcyBmYWNlIHRvd2FyZHMgdGhlIHN0YXR1ZSBvZiBQb21wZXkgYW5kIHRvIGhhdmUgaW52b2tlZCBpdCwgYXMgaWYgaXQgaGFkIHVuZGVyc3RhbmRpbmc7IGJ1dCBUcmVib25pdXMgZHJldyBBbnRvbnkgaW50byBjb252ZXJzYXRpb24gYXQgdGhlIGRvb3IgYW5kIGtlcHQgaGltIG91dHNpZGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA2Ni4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGx4dmkuIDM8L2JpYmw+LCBCcnV0dXMgQWxiaW51cyBpcyBpbmNvcnJlY3RseSBzYWlkIHRvIGhhdmUgZGV0YWluZWQgQW50b255IGluIGNvbnZlcnNhdGlvbi4gQ2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMi4xNi4xMTciIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi5DLjwvdGl0bGU+IGlpLiAxMTc8L2JpYmw+LCBhbmQgQ2ljZXJvJ3MgbGV0dGVyIHRvIFRyZWJvbml1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDEwLjI4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4geC4gMjg8L2JpYmw+KS48L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA2Ni4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGx4dmkuIDM8L2JpYmw+LCBCcnV0dXMgQWxiaW51cyBpcyBpbmNvcnJlY3RseSBzYWlkIHRvIGhhdmUgZGV0YWluZWQgQW50b255IGluIGNvbnZlcnNhdGlvbi4gQ2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBseHZpLiAzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjE2LjExNyIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLkMuPC90aXRsZT4gaWkuIDExNzwvYmlibD4sIGFuZCBDaWNlcm8ncyBsZXR0ZXIgdG8gVHJlYm9uaXVzICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLkMuPC90aXRsZT4gaWkuIDExNzxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRmFtLiAxMC4yOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXN0LjwvdGl0bGU+IHguIDI4PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4geC4gMjg8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIENhZXNhciBlbnRlcmVkLCB0aGUgc2VuYXRlIHJvc2UgaW4gaGlzIGhvbm91ciwgYnV0IGFzIHNvb24gYXMgaGUgd2FzIHNlYXRlZCB0aGUgY29uc3BpcmF0b3JzIHN1cnJvdW5kZWQgaGltIGluIGEgYm9keSwgcHV0dGluZyBmb3J3YXJkIFR1bGxpdXMgQ2ltYmVyIG9mIHRoZWlyIG51bWJlciB3aXRoIGEgcGxlYSBpbiBiZWhhbGYgb2YgaGlzIGJyb3RoZXIsIHdobyB3YXMgaW4gZXhpbGUuIFRoZSBvdGhlcnMgYWxsIGpvaW5lZCBpbiBoaXMgcGxlYSwgYW5kIGNsYXNwaW5nIENhZXNhcidzIGhhbmRzLCBraXNzZWQgaGlzIGJyZWFzdCBhbmQgaGlzIGhlYWQuIEF0IGZpcnN0LCBDYWVzYXIgbWVyZWx5IHJlamVjdGVkIHRoZWlyIHBsZWFzLCBhbmQgdGhlbiwgd2hlbiB0aGV5IHdvdWxkIG5vdCBkZXNpc3QsIHRyaWVkIHRvIGZyZWUgaGltc2VsZiBmcm9tIHRoZW0gYnkgZm9yY2UuIEF0IHRoaXMsIFR1bGxpdXMgdG9yZSBDYWVzYXIncyByb2JlIGZyb20gaGlzIHNob3VsZGVycyB3aXRoIGJvdGggaGFuZHMsIGFuZCBDYXNjYSwgd2hvIHN0b29kIGJlaGluZCBoaW0sIGRyZXcgaGlzIGRhZ2dlciBhbmQgZ2F2ZSBoaW0gdGhlIGZpcnN0IHN0YWIsIG5vdCBhIGRlZXAgb25lLCBuZWFyIHRoZSBzaG91bGRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBjYXVnaHQgdGhlIGhhbmRsZSBvZiB0aGUgZGFnZ2VyIGFuZCBjcmllZCBvdXQgbG91ZGx5IGluIExhdGluOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW1waW91cyBDYXNjYSwgd2hhdCBkb2VzdCB0aG91PzwvcT4gVGhlbiBDYXNjYSwgYWRkcmVzc2luZyBoaXMgYnJvdGhlciBpbiBHcmVlaywgYmFkZSBoaW0gY29tZSB0byBoaXMgYWlkLiBBbmQgbm93IENhZXNhciBoYWQgcmVjZWl2ZWQgbWFueSBibG93cyBhbmQgd2FzIGxvb2tpbmcgYWJvdXQgYW5kIHNlZWtpbmcgdG8gZm9yY2UgaGlzIHdheSB0aHJvdWdoIGhpcyBhc3NhaWxhbnRzLCB3aGVuIGhlIHNhdyBCcnV0dXMgc2V0dGluZyB1cG9uIGhpbSB3aXRoIGRyYXduIGRhZ2dlci4gQXQgdGhpcywgaGUgZHJvcHBlZCB0aGUgaGFuZCBvZiBDYXNjYSB3aGljaCBoZSBoYWQgc2VpemVkLCBjb3ZlcmVkIGhpcyBoZWFkIHdpdGggaGlzIHJvYmUsIGFuZCByZXNpZ25lZCBoaW1zZWxmIHRvIHRoZSBkYWdnZXItc3Ryb2tlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb25zcGlyYXRvcnMsIGNyb3dkaW5nIGVhZ2VybHkgYWJvdXQgdGhlIGJvZHksIGFuZCBwbHlpbmcgdGhlaXIgbWFueSBkYWdnZXJzLCB3b3VuZGVkIG9uZSBhbm90aGVyLCBzbyB0aGF0IEJydXR1cyBhbHNvIGdvdCBhIHdvdW5kIGluIHRoZSBoYW5kIGFzIGhlIHNvdWdodCB0byB0YWtlIHBhcnQgaW4gdGhlIG11cmRlciwgYW5kIGFsbCB3ZXJlIGNvdmVyZWQgd2l0aCBibG9vZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIHRodXMgc2xhaW4sIEJydXR1cyB3ZW50IG91dCBpbnRvIHRoZSBtaWRkbGUgb2YgdGhlIHNlc3Npb24tcm9vbSBhbmQgdHJpZWQgdG8gc3BlYWssIGFuZCB3b3VsZCBoYXZlIGRldGFpbmVkIHRoZSBzZW5hdG9ycyB0aGVyZSB3aXRoIGVuY291cmFnaW5nIHdvcmRzOyBidXQgdGhleSBmbGVkIGluIHRlcnJvciBhbmQgY29uZnVzaW9uLCBhbmQgdGhlcmUgd2FzIGEgdHVtdWx0dW91cyBjcm93ZGluZyBhdCB0aGUgZG9vciwgYWx0aG91Z2ggbm8gb25lIHByZXNzZWQgdXBvbiB0aGVtIGluIHB1cnN1aXQuIEZvciBpdCBoYWQgYmVlbiBmaXJtbHkgZGVjaWRlZCBub3QgdG8ga2lsbCBhbnkgb25lIGVsc2UsIGJ1dCB0byBzdW1tb24gYWxsIHRvIHRoZSBlbmpveW1lbnQgb2YgbGliZXJ0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoZSByZXN0IG9mIHRoZSBjb25zcGlyYXRvcnMsIGluZGVlZCwgd2hlbiB0aGV5IHdlcmUgZGlzY3Vzc2luZyB0aGVpciBlbnRlcnByaXNlLCBoYWQgYmVlbiBtaW5kZWQgdG8ga2lsbCBBbnRvbnkgYXMgd2VsbCBhcyBDYWVzYXIsIHNpbmNlIGhlIHdhcyBhIGxhd2xlc3MgbWFuIGFuZCBpbiBmYXZvdXIgb2YgYSBtb25hcmNoeSwgYW5kIGhhZCBhY3F1aXJlZCBzdHJlbmd0aCBieSBmYW1pbGlhciBhc3NvY2lhdGlvbiB3aXRoIHRoZSBzb2xkaWVyeTsgYW5kIHBhcnRpY3VsYXJseSBiZWNhdXNlIHRvIGhpcyBuYXR1cmFsIGFycm9nYW5jZSBhbmQgYW1iaXRpb24gaGUgaGFkIGFkZGVkIHRoZSBkaWduaXR5IG9mIHRoZSBjb25zdWxzaGlwLCBhbmQgd2FzIGF0IHRoYXQgdGltZSBhIGNvbGxlYWd1ZSBvZiBDYWVzYXIuIEJ1dCBCcnV0dXMgb3Bwb3NlZCB0aGUgcGxhbiwgaW5zaXN0aW5nIGluIHRoZSBmaXJzdCBwbGFjZSBvbiBhIGp1c3QgY291cnNlLCBhbmQgYmVzaWRlcywgaG9sZGluZyBvdXQgYSBob3BlIG9mIGEgY2hhbmdlIG9mIGhlYXJ0IGluIEFudG9ueS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHdvdWxkIG5vdCBnaXZlIHVwIHRoZSBiZWxpZWYgdGhhdCBBbnRvbnksIHdobyB3YXMgYSBtYW4gb2YgZ29vZCBwYXJ0cywgYW1iaXRpb3VzLCBhbmQgYSBsb3ZlciBvZiBmYW1lLCBpZiBvbmNlIENhZXNhciB3ZXJlIG91dCBvZiB0aGUgd2F5LCB3b3VsZCBhc3Npc3QgaGlzIGNvdW50cnkgaW4gYXR0YWluaW5nIGhlciBsaWJlcnR5LCB3aGVuIHRoZWlyIGV4YW1wbGUgaGFkIGluZHVjZWQgaGltIHRvIGZvbGxvdyBlbXVsb3VzbHkgdGhlIG5vYmxlciBjb3Vyc2UuIFRodXMgQW50b255J3MgbGlmZSB3YXMgc2F2ZWQgYnkgQnJ1dHVzOyBidXQgaW4gdGhlIGZlYXIgd2hpY2ggdGhlbiByZWlnbmVkLCBoZSBwdXQgb24gYSBwbGViZWlhbiBkcmVzcyBhbmQgdG9vayB0byBmbGlnaHQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIHRodXMgc2xhaW4sIEJydXR1cyB3ZW50IG91dCBpbnRvIHRoZSBtaWRkbGUgb2YgdGhlIHNlc3Npb24tcm9vbSBhbmQgdHJpZWQgdG8gc3BlYWssIGFuZCB3b3VsZCBoYXZlIGRldGFpbmVkIHRoZSBzZW5hdG9ycyB0aGVyZSB3aXRoIGVuY291cmFnaW5nIHdvcmRzOyBidXQgdGhleSBmbGVkIGluIHRlcnJvciBhbmQgY29uZnVzaW9uLCBhbmQgdGhlcmUgd2FzIGEgdHVtdWx0dW91cyBjcm93ZGluZyBhdCB0aGUgZG9vciwgYWx0aG91Z2ggbm8gb25lIHByZXNzZWQgdXBvbiB0aGVtIGluIHB1cnN1aXQuIEZvciBpdCBoYWQgYmVlbiBmaXJtbHkgZGVjaWRlZCBub3QgdG8ga2lsbCBhbnkgb25lIGVsc2UsIGJ1dCB0byBzdW1tb24gYWxsIHRvIHRoZSBlbmpveW1lbnQgb2YgbGliZXJ0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgcmVzdCBvZiB0aGUgY29uc3BpcmF0b3JzLCBpbmRlZWQsIHdoZW4gdGhleSB3ZXJlIGRpc2N1c3NpbmcgdGhlaXIgZW50ZXJwcmlzZSwgaGFkIGJlZW4gbWluZGVkIHRvIGtpbGwgQW50b255IGFzIHdlbGwgYXMgQ2Flc2FyLCBzaW5jZSBoZSB3YXMgYSBsYXdsZXNzIG1hbiBhbmQgaW4gZmF2b3VyIG9mIGEgbW9uYXJjaHksIGFuZCBoYWQgYWNxdWlyZWQgc3RyZW5ndGggYnkgZmFtaWxpYXIgYXNzb2NpYXRpb24gd2l0aCB0aGUgc29sZGllcnk7IGFuZCBwYXJ0aWN1bGFybHkgYmVjYXVzZSB0byBoaXMgbmF0dXJhbCBhcnJvZ2FuY2UgYW5kIGFtYml0aW9uIGhlIGhhZCBhZGRlZCB0aGUgZGlnbml0eSBvZiB0aGUgY29uc3Vsc2hpcCwgYW5kIHdhcyBhdCB0aGF0IHRpbWUgYSBjb2xsZWFndWUgb2YgQ2Flc2FyLiBCdXQgQnJ1dHVzIG9wcG9zZWQgdGhlIHBsYW4sIGluc2lzdGluZyBpbiB0aGUgZmlyc3QgcGxhY2Ugb24gYSBqdXN0IGNvdXJzZSwgYW5kIGJlc2lkZXMsIGhvbGRpbmcgb3V0IGEgaG9wZSBvZiBhIGNoYW5nZSBvZiBoZWFydCBpbiBBbnRvbnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3b3VsZCBub3QgZ2l2ZSB1cCB0aGUgYmVsaWVmIHRoYXQgQW50b255LCB3aG8gd2FzIGEgbWFuIG9mIGdvb2QgcGFydHMsIGFtYml0aW91cywgYW5kIGEgbG92ZXIgb2YgZmFtZSwgaWYgb25jZSBDYWVzYXIgd2VyZSBvdXQgb2YgdGhlIHdheSwgd291bGQgYXNzaXN0IGhpcyBjb3VudHJ5IGluIGF0dGFpbmluZyBoZXIgbGliZXJ0eSwgd2hlbiB0aGVpciBleGFtcGxlIGhhZCBpbmR1Y2VkIGhpbSB0byBmb2xsb3cgZW11bG91c2x5IHRoZSBub2JsZXIgY291cnNlLiBUaHVzIEFudG9ueSdzIGxpZmUgd2FzIHNhdmVkIGJ5IEJydXR1czsgYnV0IGluIHRoZSBmZWFyIHdoaWNoIHRoZW4gcmVpZ25lZCwgaGUgcHV0IG9uIGEgcGxlYmVpYW4gZHJlc3MgYW5kIHRvb2sgdG8gZmxpZ2h0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IEJydXR1cyBhbmQgaGlzIGFzc29jaWF0ZXMgd2VudCB1cCB0byB0aGUgQ2FwaXRvbCwgdGhlaXIgaGFuZHMgc21lYXJlZCB3aXRoIGJsb29kLCBhbmQgZGlzcGxheWluZyB0aGVpciBuYWtlZCBkYWdnZXJzIHRoZXkgZXhob3J0ZWQgdGhlIGNpdGl6ZW5zIHRvIGFzc2VydCB0aGVpciBsaWJlcnR5LiBBdCBmaXJzdCwgdGhlbiwgdGhlcmUgd2VyZSBjcmllcyBvZiB0ZXJyb3IsIGFuZCB0aGUgdHVtdWx0IHdhcyBpbmNyZWFzZWQgYnkgd2lsZCBodXJyeWluZ3MgdG8gYW5kIGZybyB3aGljaCBzdWNjZWVkZWQgdGhlIGRpc2FzdGVyOyBidXQgc2luY2UgdGhlcmUgd2VyZSBubyBmdXJ0aGVyIG11cmRlcnMgYW5kIG5vIHBsdW5kZXJpbmcgb2YgcHJvcGVydHksIHRoZSBzZW5hdG9ycyBhbmQgbWFueSBvZiB0aGUgY29tbW9uIHBlb3BsZSB0b29rIGhlYXJ0IGFuZCB3ZW50IHVwIHRvIHRoZSBtZW4gb24gdGhlIENhcGl0b2wuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG11bHRpdHVkZSB3YXMgYXNzZW1ibGVkIHRoZXJlLCBCcnV0dXMgbWFkZSBhIHNwZWVjaCBjYWxjdWxhdGVkIHRvIHdpbiB0aGUgcGVvcGxlIGFuZCBiZWZpdHRpbmcgdGhlIG9jY2FzaW9uLiBUaGUgYXVkaWVuY2UgYXBwbGF1ZGluZyBoaXMgd29yZHMgYW5kIGNyeWluZyBvdXQgdG8gaGltIHRvIGNvbWUgZG93biBmcm9tIHRoZSBDYXBpdG9sLCB0aGUgY29uc3BpcmF0b3JzIHRvb2sgaGVhcnQgYW5kIHdlbnQgZG93biBpbnRvIHRoZSBmb3J1bS4gVGhlIHJlc3Qgb2YgdGhlbSBmb2xsb3dlZCBhbG9uZyBpbiBvbmUgYW5vdGhlcidzIGNvbXBhbnksIGJ1dCBCcnV0dXMgd2FzIHN1cnJvdW5kZWQgYnkgbWFueSBlbWluZW50IGNpdGl6ZW5zLCBlc2NvcnRlZCB3aXRoIGdyZWF0IGhvbm91ciBkb3duIGZyb20gdGhlIGNpdGFkZWwsIGFuZCBwbGFjZWQgb24gdGhlIHJvc3RyYS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgc2lnaHQgb2YgaGltIHRoZSBtdWx0aXR1ZGUsIGFsdGhvdWdoIGl0IHdhcyBhIG1peGVkIHJhYmJsZSBhbmQgcHJlcGFyZWQgdG8gcmFpc2UgYSBkaXN0dXJiYW5jZSwgd2FzIHN0cnVjayB3aXRoIGF3ZSwgYW5kIGF3YWl0ZWQgdGhlIGlzc3VlIGluIGRlY29yb3VzIHNpbGVuY2UuIEFsc28gd2hlbiBoZSBjYW1lIGZvcndhcmQgdG8gc3BlYWssIGFsbCBwYWlkIHF1aWV0IGF0dGVudGlvbiB0byBoaXMgd29yZHM7IGJ1dCB0aGF0IGFsbCB3ZXJlIG5vdCBwbGVhc2VkIHdpdGggd2hhdCBoYWQgYmVlbiBkb25lIHdhcyBtYWRlIG1hbmlmZXN0IHdoZW4gQ2lubmEgYmVnYW4gdG8gc3BlYWsgYW5kIHRvIGRlbm91bmNlIENhZXNhci4gVGhlIG11bHRpdHVkZSBicm9rZSBpbnRvIGEgcmFnZSBhbmQgcmV2aWxlZCBDaW5uYSBzbyBiaXR0ZXJseSB0aGF0IHRpbWUgY29uc3BpcmF0b3JzIHdpdGhkcmV3IGFnYWluIHRvIHRoZSBDYXBpdG9sLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBCcnV0dXMsIHdobyBmZWFyZWQgdGhhdCB0aGV5IHdvdWxkIGJlIGJlc2llZ2VkLCBzZW50IGF3YXkgdGhlIG1vc3QgZW1pbmVudCBvZiB0aG9zZSB3aG8gaGFkIGNvbWUgdXAgd2l0aCB0aGVtLCBub3QgZGVlbWluZyBpdCByaWdodCB0aGF0IHRoZXkgc2hvdWxkIGluY3VyIHRoZSBkYW5nZXIgdG9vLCBzaW5jZSB0aGV5IGhhZCBubyBzaGFyZSBpbiB0aGUgZ3VpbHQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgQnJ1dHVzIGFuZCBoaXMgYXNzb2NpYXRlcyB3ZW50IHVwIHRvIHRoZSBDYXBpdG9sLCB0aGVpciBoYW5kcyBzbWVhcmVkIHdpdGggYmxvb2QsIGFuZCBkaXNwbGF5aW5nIHRoZWlyIG5ha2VkIGRhZ2dlcnMgdGhleSBleGhvcnRlZCB0aGUgY2l0aXplbnMgdG8gYXNzZXJ0IHRoZWlyIGxpYmVydHkuIEF0IGZpcnN0LCB0aGVuLCB0aGVyZSB3ZXJlIGNyaWVzIG9mIHRlcnJvciwgYW5kIHRoZSB0dW11bHQgd2FzIGluY3JlYXNlZCBieSB3aWxkIGh1cnJ5aW5ncyB0byBhbmQgZnJvIHdoaWNoIHN1Y2NlZWRlZCB0aGUgZGlzYXN0ZXI7IGJ1dCBzaW5jZSB0aGVyZSB3ZXJlIG5vIGZ1cnRoZXIgbXVyZGVycyBhbmQgbm8gcGx1bmRlcmluZyBvZiBwcm9wZXJ0eSwgdGhlIHNlbmF0b3JzIGFuZCBtYW55IG9mIHRoZSBjb21tb24gcGVvcGxlIHRvb2sgaGVhcnQgYW5kIHdlbnQgdXAgdG8gdGhlIG1lbiBvbiB0aGUgQ2FwaXRvbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG11bHRpdHVkZSB3YXMgYXNzZW1ibGVkIHRoZXJlLCBCcnV0dXMgbWFkZSBhIHNwZWVjaCBjYWxjdWxhdGVkIHRvIHdpbiB0aGUgcGVvcGxlIGFuZCBiZWZpdHRpbmcgdGhlIG9jY2FzaW9uLiBUaGUgYXVkaWVuY2UgYXBwbGF1ZGluZyBoaXMgd29yZHMgYW5kIGNyeWluZyBvdXQgdG8gaGltIHRvIGNvbWUgZG93biBmcm9tIHRoZSBDYXBpdG9sLCB0aGUgY29uc3BpcmF0b3JzIHRvb2sgaGVhcnQgYW5kIHdlbnQgZG93biBpbnRvIHRoZSBmb3J1bS4gVGhlIHJlc3Qgb2YgdGhlbSBmb2xsb3dlZCBhbG9uZyBpbiBvbmUgYW5vdGhlcidzIGNvbXBhbnksIGJ1dCBCcnV0dXMgd2FzIHN1cnJvdW5kZWQgYnkgbWFueSBlbWluZW50IGNpdGl6ZW5zLCBlc2NvcnRlZCB3aXRoIGdyZWF0IGhvbm91ciBkb3duIGZyb20gdGhlIGNpdGFkZWwsIGFuZCBwbGFjZWQgb24gdGhlIHJvc3RyYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IHNpZ2h0IG9mIGhpbSB0aGUgbXVsdGl0dWRlLCBhbHRob3VnaCBpdCB3YXMgYSBtaXhlZCByYWJibGUgYW5kIHByZXBhcmVkIHRvIHJhaXNlIGEgZGlzdHVyYmFuY2UsIHdhcyBzdHJ1Y2sgd2l0aCBhd2UsIGFuZCBhd2FpdGVkIHRoZSBpc3N1ZSBpbiBkZWNvcm91cyBzaWxlbmNlLiBBbHNvIHdoZW4gaGUgY2FtZSBmb3J3YXJkIHRvIHNwZWFrLCBhbGwgcGFpZCBxdWlldCBhdHRlbnRpb24gdG8gaGlzIHdvcmRzOyBidXQgdGhhdCBhbGwgd2VyZSBub3QgcGxlYXNlZCB3aXRoIHdoYXQgaGFkIGJlZW4gZG9uZSB3YXMgbWFkZSBtYW5pZmVzdCB3aGVuIENpbm5hIGJlZ2FuIHRvIHNwZWFrIGFuZCB0byBkZW5vdW5jZSBDYWVzYXIuIFRoZSBtdWx0aXR1ZGUgYnJva2UgaW50byBhIHJhZ2UgYW5kIHJldmlsZWQgQ2lubmEgc28gYml0dGVybHkgdGhhdCB0aW1lIGNvbnNwaXJhdG9ycyB3aXRoZHJldyBhZ2FpbiB0byB0aGUgQ2FwaXRvbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIEJydXR1cywgd2hvIGZlYXJlZCB0aGF0IHRoZXkgd291bGQgYmUgYmVzaWVnZWQsIHNlbnQgYXdheSB0aGUgbW9zdCBlbWluZW50IG9mIHRob3NlIHdobyBoYWQgY29tZSB1cCB3aXRoIHRoZW0sIG5vdCBkZWVtaW5nIGl0IHJpZ2h0IHRoYXQgdGhleSBzaG91bGQgaW5jdXIgdGhlIGRhbmdlciB0b28sIHNpbmNlIHRoZXkgaGFkIG5vIHNoYXJlIGluIHRoZSBndWlsdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgb24gdGhlIGZvbGxvd2luZyBkYXkgdGhlIHNlbmF0ZSBtZXQgaW4gdGhlIHRlbXBsZSBvZiBUZWxsdXMsIGFuZCBBbnRvbnksIFBsYW5jdXMsIGFuZCBDaWNlcm8gc3Bva2UgaW4gZmF2b3VyIG9mIGFtbmVzdHkgYW5kIGNvbmNvcmQuIEl0IHdhcyB0aGVuIHZvdGVkIG5vdCBvbmx5IHRoYXQgdGhlIGNvbnNwaXJhdG9ycyBzaG91bGQgaGF2ZSBpbW11bml0eSwgYnV0IGFsc28gdGhhdCB0aGUgY29uc3VscyBzaG91bGQgbGF5IGJlZm9yZSB0aGUgcGVvcGxlIGEgbWVhc3VyZSB0byBwYXkgdGhlbSBob25vdXJzLiBBZnRlciBwYXNzaW5nIHRoZXNlIHZvdGVzLCB0aGUgc2VuYXRlIGJyb2tlIHVwLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCB3aGVuIEFudG9ueSBoYWQgc2VudCBoaXMgc29uIHRvIHRoZSBDYXBpdG9sIGFzIGEgaG9zdGFnZSwgQnJ1dHVzIGFuZCBoaXMgYXNzb2NpYXRlcyBjYW1lIGRvd24sIGFuZCB0aGVyZSB3ZXJlIHNhbHV0YXRpb25zIGFuZCBncmVldGluZ3MgZm9yIGFsbCB3aXRob3V0IGRpc2NyaW1pbmF0aW9uLiBDYXNzaXVzIHdhcyB0YWtlbiBob21lIGFuZCBlbnRlcnRhaW5lZCBieSBBbnRvbnksIEJydXR1cyBieSBMZXBpZHVzLCBhbmQgdGhlIHJlc3QgYnkgdGhlaXIgc2V2ZXJhbCBjb21yYWRlcyBvciBmcmllbmRzLiBFYXJseSBuZXh0IG1vcm5pbmcgdGhlIHNlbmF0ZSBhc3NlbWJsZWQgYWdhaW4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGZpcnN0IHBsYWNlLCB0aGV5IGdhdmUgYSB2b3RlIG9mIHRoYW5rcyB0byBBbnRvbnkgZm9yIGhhdmluZyBzdG9wcGVkIGFuIGluY2lwaWVudCBjaXZpbCB3YXI7IG5leHQsIHRoZXkgcGFzc2VkIGEgdm90ZSBvZiBjb21tZW5kYXRpb24gZm9yIHRoZSBmb2xsb3dlcnMgb2YgQnJ1dHVzIHdobyB3ZXJlIHByZXNlbnQ7IGFuZCBmaW5hbGx5LCB0aGV5IGRpc3RyaWJ1dGVkIHRoZSBwcm92aW5jZXMuIEl0IHdhcyB2b3RlZCB0aGF0IEJydXR1cyBzaG91bGQgaGF2ZSBDcmV0ZSwgQ2Fzc2l1cyBBZnJpY2EsIFRyZWJvbml1cyBBc2lhLCBDaW1iZXIgQml0aHluaWEsIGFuZCB0aGUgb3RoZXIgQnJ1dHVzIENpc2FscGluZSBHYXVsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgb24gdGhlIGZvbGxvd2luZyBkYXkgdGhlIHNlbmF0ZSBtZXQgaW4gdGhlIHRlbXBsZSBvZiBUZWxsdXMsIGFuZCBBbnRvbnksIFBsYW5jdXMsIGFuZCBDaWNlcm8gc3Bva2UgaW4gZmF2b3VyIG9mIGFtbmVzdHkgYW5kIGNvbmNvcmQuIEl0IHdhcyB0aGVuIHZvdGVkIG5vdCBvbmx5IHRoYXQgdGhlIGNvbnNwaXJhdG9ycyBzaG91bGQgaGF2ZSBpbW11bml0eSwgYnV0IGFsc28gdGhhdCB0aGUgY29uc3VscyBzaG91bGQgbGF5IGJlZm9yZSB0aGUgcGVvcGxlIGEgbWVhc3VyZSB0byBwYXkgdGhlbSBob25vdXJzLiBBZnRlciBwYXNzaW5nIHRoZXNlIHZvdGVzLCB0aGUgc2VuYXRlIGJyb2tlIHVwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHdoZW4gQW50b255IGhhZCBzZW50IGhpcyBzb24gdG8gdGhlIENhcGl0b2wgYXMgYSBob3N0YWdlLCBCcnV0dXMgYW5kIGhpcyBhc3NvY2lhdGVzIGNhbWUgZG93biwgYW5kIHRoZXJlIHdlcmUgc2FsdXRhdGlvbnMgYW5kIGdyZWV0aW5ncyBmb3IgYWxsIHdpdGhvdXQgZGlzY3JpbWluYXRpb24uIENhc3NpdXMgd2FzIHRha2VuIGhvbWUgYW5kIGVudGVydGFpbmVkIGJ5IEFudG9ueSwgQnJ1dHVzIGJ5IExlcGlkdXMsIGFuZCB0aGUgcmVzdCBieSB0aGVpciBzZXZlcmFsIGNvbXJhZGVzIG9yIGZyaWVuZHMuIEVhcmx5IG5leHQgbW9ybmluZyB0aGUgc2VuYXRlIGFzc2VtYmxlZCBhZ2FpbiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBmaXJzdCBwbGFjZSwgdGhleSBnYXZlIGEgdm90ZSBvZiB0aGFua3MgdG8gQW50b255IGZvciBoYXZpbmcgc3RvcHBlZCBhbiBpbmNpcGllbnQgY2l2aWwgd2FyOyBuZXh0LCB0aGV5IHBhc3NlZCBhIHZvdGUgb2YgY29tbWVuZGF0aW9uIGZvciB0aGUgZm9sbG93ZXJzIG9mIEJydXR1cyB3aG8gd2VyZSBwcmVzZW50OyBhbmQgZmluYWxseSwgdGhleSBkaXN0cmlidXRlZCB0aGUgcHJvdmluY2VzLiBJdCB3YXMgdm90ZWQgdGhhdCBCcnV0dXMgc2hvdWxkIGhhdmUgQ3JldGUsIENhc3NpdXMgQWZyaWNhLCBUcmVib25pdXMgQXNpYSwgQ2ltYmVyIEJpdGh5bmlhLCBhbmQgdGhlIG90aGVyIEJydXR1cyBDaXNhbHBpbmUgR2F1bC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIHN1YmplY3RzIG9mIENhZXNhcidzIHdpbGwgYW5kIG9mIGhpcyBidXJpYWwgY2FtZSB1cCBmb3IgZGlzY3Vzc2lvbi4gQW50b255IGRlbWFuZGVkIHRoYXQgdGhlIHdpbGwgc2hvdWxkIGJlIHJlYWQgcHVibGljbHksIGFuZCB0aGF0IHRoZSBib2R5IHNob3VsZCBiZSBjYXJyaWVkIGZvcnRoIHRvIGJ1cmlhbCwgbm90IHNlY3JldGx5LCBub3Igd2l0aG91dCBob25vdXJzLCBsZXN0IHRoaXMgYWxzbyBzaG91bGQgZXhhc3BlcmF0ZSB0aGUgcGVvcGxlLiBDYXNzaXVzLCBpbmRlZWQsIHZlaGVtZW50bHkgb3Bwb3NlZCB0aGVzZSBtZWFzdXJlcywgYnV0IEJydXR1cyB5aWVsZGVkIGFuZCBhZ3JlZWQgdG8gdGhlbSwgdGh1cyBtYWtpbmcgYSBzZWNvbmQgbWlzdGFrZSwgYXMgaXQgd2FzIHRob3VnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBieSBzcGFyaW5nIEFudG9ueSdzIGxpZmUgYXMgaGUgaGFkIGRvbmUgaGUgaW5jdXJyZWQgdGhlIGNoYXJnZSBvZiByYWlzaW5nIHVwIGFnYWluc3QgdGhlIGNvbnNwaXJhdG9ycyBhIGJpdHRlciBhbmQgZm9ybWlkYWJsZSBmb2U7IGFuZCBub3csIGluIGFsbG93aW5nIENhZXNhcidzIGZ1bmVyYWwgcml0ZXMgdG8gYmUgY29uZHVjdGVkIGFzIEFudG9ueSBkZW1hbmRlZCwgaGUgY29tbWl0dGVkIGEgZmF0YWwgZXJyb3IuIEZvciwgaW4gdGhlIGZpcnN0IHBsYWNlLCB3aGVuIGl0IHdhcyBmb3VuZCB0aGF0IHRoZSB3aWxsIG9mIENhZXNhciBnYXZlIHRvIGV2ZXJ5IHNpbmdsZSBSb21hbiBzZXZlbnR5LWZpdmUgZHJhY2htYXMsIGFuZCBsZWZ0IHRvIHRoZSBwZW9wbGUgaGlzIGdhcmRlbnMgYmV5b25kIHRoZSBUaWJlciwgd2hlcmUgbm93IHN0YW5kcyBhIHRlbXBsZSBvZiBGb3J0dW5lLCBhbiBhc3RvbmlzaGluZyBraW5kbGluZXNzIGFuZCB5ZWFybmluZyBmb3IgQ2Flc2FyIHNlaXplZCB0aGUgY2l0aXplbnM7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBhZnRlciBDYWVzYXIncyBib2R5IGhhZCBiZWVuIGJyb3VnaHQgdG8gdGhlIGZvcnVtLCBBbnRvbnkgcHJvbm91bmNlZCB0aGUgY3VzdG9tYXJ5IGV1bG9neSwgYW5kIHdoZW4gaGUgc2F3IHRoYXQgdGhlIG11bHRpdHVkZSB3ZXJlIG1vdmVkIGJ5IGhpcyB3b3JkcywgY2hhbmdlZCBoaXMgdG9uZSB0byBvbmUgb2YgY29tcGFzc2lvbiwgYW5kIHRha2luZyB0aGUgcm9iZSBvZiBDYWVzYXIsIGFsbCBibG9vZHkgYXMgaXQgd2FzLCB1bmZvbGRlZCBpdCB0byB2aWV3LCBwb2ludGluZyBvdXQgdGhlIG1hbnkgcGxhY2VzIGluIHdoaWNoIGl0IGhhZCBiZWVuIHBpZXJjZWQgYW5kIENhZXNhciB3b3VuZGVkLiBBbGwgZnVydGhlciBvcmRlcmx5IHByb2NlZHVyZSB3YXMgYXQgYW4gZW5kLCBvZiBjb3Vyc2U7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnNvbWUgY3JpZWQgb3V0IHRvIGtpbGwgdGhlIG11cmRlcmVycywgYW5kIG90aGVycywgYXMgZm9ybWVybHkgaW4gdGhlIGNhc2Ugb2YgQ2xvZGl1cyB0aGUgZGVtYWdvZ3VlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNsb2RpdXMgd2FzIGtpbGxlZCBpbiBhIHN0cmVldC1icmF3bCB3aXRoIE1pbG8sIDUyIEIuQy4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDI1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2ljZXJvPC90aXRsZT4sIHh4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gZHJhZ2dlZCBmcm9tIHRoZSBzaG9wcyB0aGUgYmVuY2hlcyBhbmQgdGFibGVzLCBwaWxlZCB0aGVtIHVwb24gb25lIGFub3RoZXIsIGFuZCB0aHVzIGVyZWN0ZWQgYSBodWdlIHB5cmU7IG9uIHRoaXMgdGhleSBwbGFjZWQgQ2Flc2FyJ3MgYm9keSwgYW5kIGluIHRoZSBtaWRzdCBvZiBtYW55IHNhbmN0dWFyaWVzLCBhc3lsdW1zLCBhbmQgaG9seSBwbGFjZXMsIGJ1cm5lZCBpdC4gTW9yZW92ZXIsIHdoZW4gdGhlIGZpcmUgYmxhemVkIHVwLCBwZW9wbGUgcnVzaGVkIHVwIGZyb20gYWxsIHNpZGVzLCBzbmF0Y2hlZCB1cCBoYWxmLWJ1cm50IGJyYW5kcywgYW5kIHJhbiByb3VuZCB0byB0aGUgaG91c2VzIG9mIENhZXNhcidzIHNsYXllcnMgdG8gc2V0IHRoZW0gb24gZmlyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlIHN1YmplY3RzIG9mIENhZXNhcidzIHdpbGwgYW5kIG9mIGhpcyBidXJpYWwgY2FtZSB1cCBmb3IgZGlzY3Vzc2lvbi4gQW50b255IGRlbWFuZGVkIHRoYXQgdGhlIHdpbGwgc2hvdWxkIGJlIHJlYWQgcHVibGljbHksIGFuZCB0aGF0IHRoZSBib2R5IHNob3VsZCBiZSBjYXJyaWVkIGZvcnRoIHRvIGJ1cmlhbCwgbm90IHNlY3JldGx5LCBub3Igd2l0aG91dCBob25vdXJzLCBsZXN0IHRoaXMgYWxzbyBzaG91bGQgZXhhc3BlcmF0ZSB0aGUgcGVvcGxlLiBDYXNzaXVzLCBpbmRlZWQsIHZlaGVtZW50bHkgb3Bwb3NlZCB0aGVzZSBtZWFzdXJlcywgYnV0IEJydXR1cyB5aWVsZGVkIGFuZCBhZ3JlZWQgdG8gdGhlbSwgdGh1cyBtYWtpbmcgYSBzZWNvbmQgbWlzdGFrZSwgYXMgaXQgd2FzIHRob3VnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBieSBzcGFyaW5nIEFudG9ueSdzIGxpZmUgYXMgaGUgaGFkIGRvbmUgaGUgaW5jdXJyZWQgdGhlIGNoYXJnZSBvZiByYWlzaW5nIHVwIGFnYWluc3QgdGhlIGNvbnNwaXJhdG9ycyBhIGJpdHRlciBhbmQgZm9ybWlkYWJsZSBmb2U7IGFuZCBub3csIGluIGFsbG93aW5nIENhZXNhcidzIGZ1bmVyYWwgcml0ZXMgdG8gYmUgY29uZHVjdGVkIGFzIEFudG9ueSBkZW1hbmRlZCwgaGUgY29tbWl0dGVkIGEgZmF0YWwgZXJyb3IuIEZvciwgaW4gdGhlIGZpcnN0IHBsYWNlLCB3aGVuIGl0IHdhcyBmb3VuZCB0aGF0IHRoZSB3aWxsIG9mIENhZXNhciBnYXZlIHRvIGV2ZXJ5IHNpbmdsZSBSb21hbiBzZXZlbnR5LWZpdmUgZHJhY2htYXMsIGFuZCBsZWZ0IHRvIHRoZSBwZW9wbGUgaGlzIGdhcmRlbnMgYmV5b25kIHRoZSBUaWJlciwgd2hlcmUgbm93IHN0YW5kcyBhIHRlbXBsZSBvZiBGb3J0dW5lLCBhbiBhc3RvbmlzaGluZyBraW5kbGluZXNzIGFuZCB5ZWFybmluZyBmb3IgQ2Flc2FyIHNlaXplZCB0aGUgY2l0aXplbnM7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBhZnRlciBDYWVzYXIncyBib2R5IGhhZCBiZWVuIGJyb3VnaHQgdG8gdGhlIGZvcnVtLCBBbnRvbnkgcHJvbm91bmNlZCB0aGUgY3VzdG9tYXJ5IGV1bG9neSwgYW5kIHdoZW4gaGUgc2F3IHRoYXQgdGhlIG11bHRpdHVkZSB3ZXJlIG1vdmVkIGJ5IGhpcyB3b3JkcywgY2hhbmdlZCBoaXMgdG9uZSB0byBvbmUgb2YgY29tcGFzc2lvbiwgYW5kIHRha2luZyB0aGUgcm9iZSBvZiBDYWVzYXIsIGFsbCBibG9vZHkgYXMgaXQgd2FzLCB1bmZvbGRlZCBpdCB0byB2aWV3LCBwb2ludGluZyBvdXQgdGhlIG1hbnkgcGxhY2VzIGluIHdoaWNoIGl0IGhhZCBiZWVuIHBpZXJjZWQgYW5kIENhZXNhciB3b3VuZGVkLiBBbGwgZnVydGhlciBvcmRlcmx5IHByb2NlZHVyZSB3YXMgYXQgYW4gZW5kLCBvZiBjb3Vyc2U7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnNvbWUgY3JpZWQgb3V0IHRvIGtpbGwgdGhlIG11cmRlcmVycywgYW5kIG90aGVycywgYXMgZm9ybWVybHkgaW4gdGhlIGNhc2Ugb2YgQ2xvZGl1cyB0aGUgZGVtYWdvZ3VlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2xvZGl1cyB3YXMga2lsbGVkIGluIGEgc3RyZWV0LWJyYXdsIHdpdGggTWlsbywgNTIgQi5DLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAyNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIHh4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gZHJhZ2dlZCBmcm9tIHRoZSBzaG9wcyB0aGUgYmVuY2hlcyBhbmQgdGFibGVzLCBwaWxlZCB0aGVtIHVwb24gb25lIGFub3RoZXIsIGFuZCB0aHVzIGVyZWN0ZWQgYSBodWdlIHB5cmU7IG9uIHRoaXMgdGhleSBwbGFjZWQgQ2Flc2FyJ3MgYm9keSwgYW5kIGluIHRoZSBtaWRzdCBvZiBtYW55IHNhbmN0dWFyaWVzLCBhc3lsdW1zLCBhbmQgaG9seSBwbGFjZXMsIGJ1cm5lZCBpdC4gTW9yZW92ZXIsIHdoZW4gdGhlIGZpcmUgYmxhemVkIHVwLCBwZW9wbGUgcnVzaGVkIHVwIGZyb20gYWxsIHNpZGVzLCBzbmF0Y2hlZCB1cCBoYWxmLWJ1cm50IGJyYW5kcywgYW5kIHJhbiByb3VuZCB0byB0aGUgaG91c2VzIG9mIENhZXNhcidzIHNsYXllcnMgdG8gc2V0IHRoZW0gb24gZmlyZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAyNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIHh4di4gMS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCB4eHYuIDEuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgbWVuLCBpbmRlZWQsIGhhdmluZyBwcmV2aW91c2x5IGJhcnJpY2FkZWQgdGhlbXNlbHZlcyB3ZWxsLCByZXBlbGxlZCB0aGUgZGFuZ2VyOyBidXQgdGhlcmUgd2FzIGEgY2VydGFpbiBDaW5uYSwgYSBwb2V0LCB3aG8gaGFkIG5vIHNoYXJlIGluIHRoZSBjcmltZSwgYnV0IHdhcyBhY3R1YWxseSBhIGZyaWVuZCBvZiBDYWVzYXIncy4gVGhpcyBtYW4gZHJlYW1lZCB0aGF0IGhlIHdhcyBpbnZpdGVkIHRvIHN1cHBlciBieSBDYWVzYXIgYW5kIGRlY2xpbmVkIHRvIGdvLCBidXQgdGhhdCBDYWVzYXIgYmVzb3VnaHQgYW5kIGNvbnN0cmFpbmVkIGhpbSwgYW5kIGZpbmFsbHkgdG9vayBoaW0gYnkgdGhlIGhhbmQgYW5kIGxlZCBoaW0gaW50byBhIHlhd25pbmcgYW5kIGRhcmtzb21lIHBsYWNlLCB3aGl0aGVyIGhlIGZvbGxvd2VkIHVud2lsbGluZyBhbmQgYmV3aWxkZXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGF2aW5nIHRoaXMgdmlzaW9uLCBoZSBmZWxsIGludG8gYSBmZXZlciB3aGljaCBsYXN0ZWQgYWxsIG5pZ2h0OyBidXQgaW4gdGhlIG1vcm5pbmcsIG5ldmVydGhlbGVzcywgd2hlbiB0aGUgZnVuZXJhbCByaXRlcyB3ZXJlIGhlbGQgb3ZlciBDYWVzYXIncyBib2R5LCBoZSB3YXMgYXNoYW1lZCBub3QgdG8gYmUgcHJlc2VudCwgYW5kIHdlbnQgb3V0IGludG8gdGhlIGNyb3dkIHdoZW4gaXQgd2FzIGFscmVhZHkgYmVjb21pbmcgc2F2YWdlLiBIZSB3YXMgc2VlbiwgaG93ZXZlciwgYW5kIGJlaW5nIHRob3VnaHQgdG8gYmUsIG5vdCB0aGUgQ2lubmEgdGhhdCBoZSByZWFsbHkgd2FzLCBidXQgdGhlIG9uZSB3aG8gaGFkIHJlY2VudGx5IHJldmlsZWQgQ2Flc2FyIGJlZm9yZSB0aGUgYXNzZW1ibGVkIHBlb3BsZSwgaGUgd2FzIHRvcm4gaW4gcGllY2VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgaW5kZWVkLCBoYXZpbmcgcHJldmlvdXNseSBiYXJyaWNhZGVkIHRoZW1zZWx2ZXMgd2VsbCwgcmVwZWxsZWQgdGhlIGRhbmdlcjsgYnV0IHRoZXJlIHdhcyBhIGNlcnRhaW4gQ2lubmEsIGEgcG9ldCwgd2hvIGhhZCBubyBzaGFyZSBpbiB0aGUgY3JpbWUsIGJ1dCB3YXMgYWN0dWFsbHkgYSBmcmllbmQgb2YgQ2Flc2FyJ3MuIFRoaXMgbWFuIGRyZWFtZWQgdGhhdCBoZSB3YXMgaW52aXRlZCB0byBzdXBwZXIgYnkgQ2Flc2FyIGFuZCBkZWNsaW5lZCB0byBnbywgYnV0IHRoYXQgQ2Flc2FyIGJlc291Z2h0IGFuZCBjb25zdHJhaW5lZCBoaW0sIGFuZCBmaW5hbGx5IHRvb2sgaGltIGJ5IHRoZSBoYW5kIGFuZCBsZWQgaGltIGludG8gYSB5YXduaW5nIGFuZCBkYXJrc29tZSBwbGFjZSwgd2hpdGhlciBoZSBmb2xsb3dlZCB1bndpbGxpbmcgYW5kIGJld2lsZGVyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhhdmluZyB0aGlzIHZpc2lvbiwgaGUgZmVsbCBpbnRvIGEgZmV2ZXIgd2hpY2ggbGFzdGVkIGFsbCBuaWdodDsgYnV0IGluIHRoZSBtb3JuaW5nLCBuZXZlcnRoZWxlc3MsIHdoZW4gdGhlIGZ1bmVyYWwgcml0ZXMgd2VyZSBoZWxkIG92ZXIgQ2Flc2FyJ3MgYm9keSwgaGUgd2FzIGFzaGFtZWQgbm90IHRvIGJlIHByZXNlbnQsIGFuZCB3ZW50IG91dCBpbnRvIHRoZSBjcm93ZCB3aGVuIGl0IHdhcyBhbHJlYWR5IGJlY29taW5nIHNhdmFnZS4gSGUgd2FzIHNlZW4sIGhvd2V2ZXIsIGFuZCBiZWluZyB0aG91Z2h0IHRvIGJlLCBub3QgdGhlIENpbm5hIHRoYXQgaGUgcmVhbGx5IHdhcywgYnV0IHRoZSBvbmUgd2hvIGhhZCByZWNlbnRseSByZXZpbGVkIENhZXNhciBiZWZvcmUgdGhlIGFzc2VtYmxlZCBwZW9wbGUsIGhlIHdhcyB0b3JuIGluIHBpZWNlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpbmNpZGVudCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSwgZXhjZXB0LCBwZXJoYXBzLCBBbnRvbnkncyBjaGFuZ2Ugb2YgaGVhcnQsIGZyaWdodGVuZWQgQnJ1dHVzIGFuZCBoaXMgYWRoZXJlbnRzLCBhbmQgdGhleSB3aXRoZHJldyBmcm9tIHRoZSBjaXR5LiBBdCBmaXJzdCB0aGV5IHNwZW50IHNvbWUgdGltZSBpbiBBbnRpdW0sIHdpdGggdGhlIGlkZWEgb2YgcmV0dXJuaW5nIHRvIFJvbWUgd2hlbiB0aGUgcGVvcGxlJ3Mgd3JhdGggaGFkIHBhc3NlZCBpdHMgY2xpbWF4IGFuZCBzdWJzaWRlZC4gVGhpcyB0aGV5IHRob3VnaHQgd291bGQgcmVhZGlseSBjb21lIHRvIHBhc3MsIHNpbmNlIG11bHRpdHVkZXMgYXJlIGZpY2tsZSBhbmQgaW1wZXR1b3VzLCBhbmQsIGJlc2lkZXMsIHRoZXkgaGFkIHRoZSBzZW5hdGUgaW4gdGhlaXIgZmF2b3VyLCB3aGljaCBsZXQgdGhvc2Ugd2hvIHRvcmUgQ2lubmEgdG8gcGllY2VzIGdvIHVucHVuaXNoZWQsIGFuZCB5ZXQgdHJpZWQgdG8gc2VlayBvdXQgYW5kIGFycmVzdCB0aG9zZSB3aG8gaGFkIGFzc2F1bHRlZCB0aGUgaG91c2VzIG9mIHRoZSBjb25zcGlyYXRvcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFscmVhZHksIHRvbywgdGhlIHBlb3BsZSB3ZXJlIGRpc3R1cmJlZCBiZWNhdXNlIEFudG9ueSB3YXMgYXNzdW1pbmcgYWxtb3N0IGFic29sdXRlIHBvd2VyLCBhbmQgdGhleSBsb25nZWQgZm9yIEJydXR1czsgaXQgd2FzIGFsc28gZXhwZWN0ZWQgdGhhdCBoZSB3b3VsZCBiZSBwcmVzZW50IGluIHBlcnNvbiBhbmQgY29uZHVjdCB0aGUgc3BlY3RhY2xlcyB3aGljaCBpdCB3YXMgaGlzIGR1dHkgYXMgcHJhZXRvciB0byBmdXJuaXNoLiBCdXQgQnJ1dHVzIGxlYXJuZWQgdGhhdCBtYW55IG9mIHRoZSB2ZXRlcmFuIHNvbGRpZXJzIG9mIENhZXNhciB3aG8gaGFkIHJlY2VpdmVkIGxhbmQgYW5kIGNpdGllcyBmcm9tIHRoZWlyIGNvbW1hbmRlciwgd2VyZSBub3cgcGxvdHRpbmcgYWdhaW5zdCBoaXMgbGlmZSBhbmQgaW4gc21hbGwgYmFuZHMgc3RyZWFtaW5nIGluIHRvIHRoZSBjaXR5LiBIZSB0aGVyZWZvcmUgaGFkIG5vdCB0aGUgY291cmFnZSB0byBjb21lLiBUaGUgcGVvcGxlLCBob3dldmVyLCBoYWQgdGhlaXIgc3BlY3RhY2xlcywgaW4gc3BpdGUgb2YgaGlzIGFic2VuY2UsIGFuZCB0aGVzZSB3ZXJlIHZlcnkgbGF2aXNobHkgYW5kIG1hZ25pZmljZW50bHkgYXBwb2ludGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQnJ1dHVzIGhhZCBwdXJjaGFzZWQgYSBncmVhdCBudW1iZXIgb2Ygd2lsZCBiZWFzdHMsIGFuZCBub3cgZ2F2ZSBvcmRlcnMgdGhhdCBub3Qgb25lIHNob3VsZCBiZSBzb2xkIG9yIGxlZnQgYmVoaW5kLCBidXQgdGhhdCBhbGwgc2hvdWxkIGJlIHVzZWQ7IGFuZCBoZSBoaW1zZWxmIHdlbnQgZG93biB0byBOYXBsZXMgYW5kIGNvbmZlcnJlZCB3aXRoIGEgdmVyeSBsYXJnZSBudW1iZXIgb2YgYWN0b3JzOyBhbmQgcmVnYXJkaW5nIENhbnV0aXVzLCBhbiBhY3RvciB3aG8gZW5qb3llZCBncmVhdCBmYW1lLCBoZSB3cm90ZSB0byBoaXMgZnJpZW5kcyB0aGF0IHRoZXkgc2hvdWxkIHBlcnN1YWRlIGhpbSB0byBnbyB0byBSb21lOyBmb3Igbm8gR3JlZWsgY291bGQgcHJvcGVybHkgYmUgY29tcGVsbGVkIHRvIGdvLiBIZSB3cm90ZSBhbHNvIHRvIENpY2VybywgYmVnZ2luZyBoaW0gYnkgYWxsIG1lYW5zIHRvIGF0dGVuZCB0aGUgc3BlY3RhY2xlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpbmNpZGVudCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSwgZXhjZXB0LCBwZXJoYXBzLCBBbnRvbnkncyBjaGFuZ2Ugb2YgaGVhcnQsIGZyaWdodGVuZWQgQnJ1dHVzIGFuZCBoaXMgYWRoZXJlbnRzLCBhbmQgdGhleSB3aXRoZHJldyBmcm9tIHRoZSBjaXR5LiBBdCBmaXJzdCB0aGV5IHNwZW50IHNvbWUgdGltZSBpbiBBbnRpdW0sIHdpdGggdGhlIGlkZWEgb2YgcmV0dXJuaW5nIHRvIFJvbWUgd2hlbiB0aGUgcGVvcGxlJ3Mgd3JhdGggaGFkIHBhc3NlZCBpdHMgY2xpbWF4IGFuZCBzdWJzaWRlZC4gVGhpcyB0aGV5IHRob3VnaHQgd291bGQgcmVhZGlseSBjb21lIHRvIHBhc3MsIHNpbmNlIG11bHRpdHVkZXMgYXJlIGZpY2tsZSBhbmQgaW1wZXR1b3VzLCBhbmQsIGJlc2lkZXMsIHRoZXkgaGFkIHRoZSBzZW5hdGUgaW4gdGhlaXIgZmF2b3VyLCB3aGljaCBsZXQgdGhvc2Ugd2hvIHRvcmUgQ2lubmEgdG8gcGllY2VzIGdvIHVucHVuaXNoZWQsIGFuZCB5ZXQgdHJpZWQgdG8gc2VlayBvdXQgYW5kIGFycmVzdCB0aG9zZSB3aG8gaGFkIGFzc2F1bHRlZCB0aGUgaG91c2VzIG9mIHRoZSBjb25zcGlyYXRvcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFscmVhZHksIHRvbywgdGhlIHBlb3BsZSB3ZXJlIGRpc3R1cmJlZCBiZWNhdXNlIEFudG9ueSB3YXMgYXNzdW1pbmcgYWxtb3N0IGFic29sdXRlIHBvd2VyLCBhbmQgdGhleSBsb25nZWQgZm9yIEJydXR1czsgaXQgd2FzIGFsc28gZXhwZWN0ZWQgdGhhdCBoZSB3b3VsZCBiZSBwcmVzZW50IGluIHBlcnNvbiBhbmQgY29uZHVjdCB0aGUgc3BlY3RhY2xlcyB3aGljaCBpdCB3YXMgaGlzIGR1dHkgYXMgcHJhZXRvciB0byBmdXJuaXNoLiBCdXQgQnJ1dHVzIGxlYXJuZWQgdGhhdCBtYW55IG9mIHRoZSB2ZXRlcmFuIHNvbGRpZXJzIG9mIENhZXNhciB3aG8gaGFkIHJlY2VpdmVkIGxhbmQgYW5kIGNpdGllcyBmcm9tIHRoZWlyIGNvbW1hbmRlciwgd2VyZSBub3cgcGxvdHRpbmcgYWdhaW5zdCBoaXMgbGlmZSBhbmQgaW4gc21hbGwgYmFuZHMgc3RyZWFtaW5nIGluIHRvIHRoZSBjaXR5LiBIZSB0aGVyZWZvcmUgaGFkIG5vdCB0aGUgY291cmFnZSB0byBjb21lLiBUaGUgcGVvcGxlLCBob3dldmVyLCBoYWQgdGhlaXIgc3BlY3RhY2xlcywgaW4gc3BpdGUgb2YgaGlzIGFic2VuY2UsIGFuZCB0aGVzZSB3ZXJlIHZlcnkgbGF2aXNobHkgYW5kIG1hZ25pZmljZW50bHkgYXBwb2ludGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBCcnV0dXMgaGFkIHB1cmNoYXNlZCBhIGdyZWF0IG51bWJlciBvZiB3aWxkIGJlYXN0cywgYW5kIG5vdyBnYXZlIG9yZGVycyB0aGF0IG5vdCBvbmUgc2hvdWxkIGJlIHNvbGQgb3IgbGVmdCBiZWhpbmQsIGJ1dCB0aGF0IGFsbCBzaG91bGQgYmUgdXNlZDsgYW5kIGhlIGhpbXNlbGYgd2VudCBkb3duIHRvIE5hcGxlcyBhbmQgY29uZmVycmVkIHdpdGggYSB2ZXJ5IGxhcmdlIG51bWJlciBvZiBhY3RvcnM7IGFuZCByZWdhcmRpbmcgQ2FudXRpdXMsIGFuIGFjdG9yIHdobyBlbmpveWVkIGdyZWF0IGZhbWUsIGhlIHdyb3RlIHRvIGhpcyBmcmllbmRzIHRoYXQgdGhleSBzaG91bGQgcGVyc3VhZGUgaGltIHRvIGdvIHRvIFJvbWU7IGZvciBubyBHcmVlayBjb3VsZCBwcm9wZXJseSBiZSBjb21wZWxsZWQgdG8gZ28uIEhlIHdyb3RlIGFsc28gdG8gQ2ljZXJvLCBiZWdnaW5nIGhpbSBieSBhbGwgbWVhbnMgdG8gYXR0ZW5kIHRoZSBzcGVjdGFjbGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYXR0ZXJzIHdlcmUgYXQgc3VjaCBhIHBhc3Mgd2hlbiBhIGZyZXNoIHR1cm4gd2FzIGdpdmVuIHRvIHRoZW0gYnkgdGhlIGFycml2YWwgb2YgdGhlIHlvdW5nIENhZXNhci4gSGUgd2FzIGEgc29uIG9mIENhZXNhcidzIG5pZWNlLCBidXQgaGFkIGJlZW4gZm9ybWFsbHkgYWRvcHRlZCBieSBoaW0sIGFuZCBsZWZ0IGhpcyBoZWlyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgcHVyc3VpbmcgaGlzIHN0dWRpZXMgYXQgQXBvbGxvbmlhIHdoZW4gQ2Flc2FyIHdhcyBraWxsZWQsIGFuZCBoYWQgYmVlbiBhd2FpdGluZyBoaW0gdGhlcmUgYWZ0ZXIgaGlzIGRldGVybWluYXRpb24gdG8gbWFyY2ggYXQgb25jZSBhZ2FpbnN0IHRoZSBQYXJ0aGlhbnMuIEFzIHNvb24gYXMgaGUgbGVhcm5lZCBvZiBDYWVzYXIncyBmYXRlLCBoZSBjYW1lIHRvIFJvbWUsIGFuZCBhcyBhIGZpcnN0IHN0ZXAgdG93YXJkcyB3aW5uaW5nIHRoZSBmYXZvdXIgb2YgdGhlIHBlb3BsZSwgYXNzdW1lZCB0aGUgbmFtZSBvZiBDYWVzYXIgYW5kIGRpc3RyaWJ1dGVkIHRvIHRoZSBjaXRpemVucyB0aGUgbW9uZXkgd2hpY2ggaGFkIGJlZW4gbGVmdCB0aGVtIGJ5IGhpcyB3aWxsLiBUaHVzIGhlIGRlcG9zZWQgQW50b255IGZyb20gcG9wdWxhciBmYXZvdXIsIGFuZCBieSBhIGxhdmlzaCB1c2Ugb2YgbW9uZXkgYXNzZW1ibGVkIGFuZCBnb3QgdG9nZXRoZXIgbWFueSBvZiBDYWVzYXIncyB2ZXRlcmFuIHNvbGRpZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENpY2VybyB3YXMgbGVkIGJ5IGhpcyBoYXRyZWQgb2YgQW50b255IHRvIHRha2UgdGhlIHNpZGUgb2YgT2N0YXZpdXMgQ2Flc2FyLCBCcnV0dXMgcmVidWtlZCBoaW0gc2V2ZXJlbHksIHdyaXRpbmcgdGhhdCBDaWNlcm8gZGlkIG5vdCBvYmplY3QgdG8gYSBkZXNwb3QgYXMgc3VjaCwgYnV0IG9ubHkgZmVhcmVkIGEgZGVzcG90IHdobyBoYXRlZCBoaW0sIGFuZCB0aGF0IHdoZW4gaGUgZGVjbGFyZWQgaW4gaGlzIGxldHRlcnMgYW5kIHNwZWVjaGVzIHRoYXQgT2N0YXZpdXMgd2FzIGEgd29ydGh5IG1hbiwgaGlzIHBvbGljeSBtZWFudCB0aGUgY2hvaWNlIG9mIGEga2luZGx5IHNsYXZlcnkuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T3VyIGFuY2VzdG9ycywgaG93ZXZlciw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y291bGQgbm90IGVuZHVyZSBldmVuIGdlbnRsZSBkZXNwb3RzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgaGltc2VsZiwgaGUgaGFkIG5vdCBhcyB5ZXQgZGVmaW5pdGVseSBkZWNpZGVkLCBoZSBzYWlkLCBlaXRoZXIgZm9yIHdhciBvciBmb3IgcGVhY2UsIGJ1dCBvbiBvbmUgdGhpbmcgb25seSB3YXMgaGUgZGV0ZXJtaW5lZCwgYW5kIHRoYXQgd2FzIG5vdCB0byBiZSBhIHNsYXZlOyBhbmQgaGUgd2FzIGFtYXplZCwgaGUgc2FpZCwgdGhhdCBDaWNlcm8gZHJlYWRlZCBhIGNpdmlsIHdhciB3aXRoIGFsbCBpdHMgcGVyaWxzLCBidXQgd2FzIG5vdCBhZnJhaWQgb2YgYSBzaGFtZWZ1bCBhbmQgaW5nbG9yaW91cyBwZWFjZSwgYW5kIHRoYXQsIGFzIGEgcmV3YXJkIGZvciBkcml2aW5nIEFudG9ueSBmcm9tIHRoZSB0eXJhbm55LCBoZSBhc2tlZCB0aGUgcHJpdmlsZWdlIG9mIG1ha2luZyBPY3Rhdml1cyB0eXJhbnQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWF0dGVycyB3ZXJlIGF0IHN1Y2ggYSBwYXNzIHdoZW4gYSBmcmVzaCB0dXJuIHdhcyBnaXZlbiB0byB0aGVtIGJ5IHRoZSBhcnJpdmFsIG9mIHRoZSB5b3VuZyBDYWVzYXIuIEhlIHdhcyBhIHNvbiBvZiBDYWVzYXIncyBuaWVjZSwgYnV0IGhhZCBiZWVuIGZvcm1hbGx5IGFkb3B0ZWQgYnkgaGltLCBhbmQgbGVmdCBoaXMgaGVpci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBwdXJzdWluZyBoaXMgc3R1ZGllcyBhdCBBcG9sbG9uaWEgd2hlbiBDYWVzYXIgd2FzIGtpbGxlZCwgYW5kIGhhZCBiZWVuIGF3YWl0aW5nIGhpbSB0aGVyZSBhZnRlciBoaXMgZGV0ZXJtaW5hdGlvbiB0byBtYXJjaCBhdCBvbmNlIGFnYWluc3QgdGhlIFBhcnRoaWFucy4gQXMgc29vbiBhcyBoZSBsZWFybmVkIG9mIENhZXNhcidzIGZhdGUsIGhlIGNhbWUgdG8gUm9tZSwgYW5kIGFzIGEgZmlyc3Qgc3RlcCB0b3dhcmRzIHdpbm5pbmcgdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlLCBhc3N1bWVkIHRoZSBuYW1lIG9mIENhZXNhciBhbmQgZGlzdHJpYnV0ZWQgdG8gdGhlIGNpdGl6ZW5zIHRoZSBtb25leSB3aGljaCBoYWQgYmVlbiBsZWZ0IHRoZW0gYnkgaGlzIHdpbGwuIFRodXMgaGUgZGVwb3NlZCBBbnRvbnkgZnJvbSBwb3B1bGFyIGZhdm91ciwgYW5kIGJ5IGEgbGF2aXNoIHVzZSBvZiBtb25leSBhc3NlbWJsZWQgYW5kIGdvdCB0b2dldGhlciBtYW55IG9mIENhZXNhcidzIHZldGVyYW4gc29sZGllcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2ljZXJvIHdhcyBsZWQgYnkgaGlzIGhhdHJlZCBvZiBBbnRvbnkgdG8gdGFrZSB0aGUgc2lkZSBvZiBPY3Rhdml1cyBDYWVzYXIsIEJydXR1cyByZWJ1a2VkIGhpbSBzZXZlcmVseSwgd3JpdGluZyB0aGF0IENpY2VybyBkaWQgbm90IG9iamVjdCB0byBhIGRlc3BvdCBhcyBzdWNoLCBidXQgb25seSBmZWFyZWQgYSBkZXNwb3Qgd2hvIGhhdGVkIGhpbSwgYW5kIHRoYXQgd2hlbiBoZSBkZWNsYXJlZCBpbiBoaXMgbGV0dGVycyBhbmQgc3BlZWNoZXMgdGhhdCBPY3Rhdml1cyB3YXMgYSB3b3J0aHkgbWFuLCBoaXMgcG9saWN5IG1lYW50IHRoZSBjaG9pY2Ugb2YgYSBraW5kbHkgc2xhdmVyeS4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk91ciBhbmNlc3RvcnMsIGhvd2V2ZXIsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y291bGQgbm90IGVuZHVyZSBldmVuIGdlbnRsZSBkZXNwb3RzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBoaW1zZWxmLCBoZSBoYWQgbm90IGFzIHlldCBkZWZpbml0ZWx5IGRlY2lkZWQsIGhlIHNhaWQsIGVpdGhlciBmb3Igd2FyIG9yIGZvciBwZWFjZSwgYnV0IG9uIG9uZSB0aGluZyBvbmx5IHdhcyBoZSBkZXRlcm1pbmVkLCBhbmQgdGhhdCB3YXMgbm90IHRvIGJlIGEgc2xhdmU7IGFuZCBoZSB3YXMgYW1hemVkLCBoZSBzYWlkLCB0aGF0IENpY2VybyBkcmVhZGVkIGEgY2l2aWwgd2FyIHdpdGggYWxsIGl0cyBwZXJpbHMsIGJ1dCB3YXMgbm90IGFmcmFpZCBvZiBhIHNoYW1lZnVsIGFuZCBpbmdsb3Jpb3VzIHBlYWNlLCBhbmQgdGhhdCwgYXMgYSByZXdhcmQgZm9yIGRyaXZpbmcgQW50b255IGZyb20gdGhlIHR5cmFubnksIGhlIGFza2VkIHRoZSBwcml2aWxlZ2Ugb2YgbWFraW5nIE9jdGF2aXVzIHR5cmFudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cywgdGhlbiwgZGlkIEJydXR1cyBleHByZXNzIGhpbXNlbGYgaW4gaGlzIGZpcnN0IGxldHRlcnMgdG8gQ2ljZXJvLiBCdXQgYWxyZWFkeSBvbmUgZmFjdGlvbiB3YXMgZm9ybWluZyBhYm91dCBPY3Rhdml1cywgYW5kIGFub3RoZXIgYWJvdXQgQW50b255LCBhbmQgdGhlIHNvbGRpZXJzLCBhcyB0aG91Z2ggZm9yIHNhbGUgYXQgYXVjdGlvbiwgZmxvY2tlZCB0byB0aGUgaGlnaGVzdCBiaWRkZXIuIEFsdG9nZXRoZXIgZGVzcGFpcmluZywgdGhlcmVmb3JlLCBvZiB0aGUgc3RhdGUsIEJydXR1cyBkZXRlcm1pbmVkIHRvIGFiYW5kb24gSXRhbHksIGFuZCBjYW1lIGJ5IGxhbmQgdGhyb3VnaCBMdWNhbmlhIHRvIEVsZWEgYnkgdGhlIHNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgUG9yY2lhIHdhcyBhYm91dCB0byByZXR1cm4gdGhlbmNlIHRvIFJvbWUsIHNoZSB0cmllZCB0byBjb25jZWFsIGhlciBkaXN0cmVzcywgYnV0IGEgY2VydGFpbiBwYWludGluZyBiZXRyYXllZCBoZXIsIGluIHNwaXRlIG9mIGhlciBub2JsZSBzcGlyaXQgaGl0aGVydG8uIEl0cyBzdWJqZWN0IHdhcyBHcmVlaywg4oCUQW5kcm9tYWNoZSBiaWRkaW5nIGZhcmV3ZWxsIHRvIEhlY3Rvcjsgc2hlIHdhcyB0YWtpbmcgZnJvbSBoaXMgYXJtcyB0aGVpciBsaXR0bGUgc29uLCB3aGlsZSBoZXIgZXllcyB3ZXJlIGZpeGVkIHVwb24gaGVyIGh1c2JhbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gUG9yY2lhIHNhdyB0aGlzLCB0aGUgaW1hZ2Ugb2YgaGVyIG93biBzb3Jyb3cgcHJlc2VudGVkIGJ5IGl0IGNhdXNlZCBoZXIgdG8gYnVyc3QgaW50byB0ZWFycywgYW5kIHNoZSB3b3VsZCB2aXNpdCBpdCBtYW55IHRpbWVzIGEgZGF5IGFuZCB3ZWVwIGJlZm9yZSBpdC4gQW5kIHdoZW4gQWNpbGl1cywgb25lIG9mIHRoZSBmcmllbmRzIG9mIEJydXR1cywgcmVjaXRlZCB0aGUgdmVyc2VzIGNvbnRhaW5pbmcgQW5kcm9tYWNoZSdzIHdvcmRzIHRvIEhlY3RvciwKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+QnV0LCBIZWN0b3IsIHRob3UgdG8gbWUgYXJ0IGZhdGhlciBhbmQgaG9ub3VyZWQgbW90aGVyPC9sPgoJCQkJCSAgICAgICAgICA8bD5BbmQgYnJvdGhlcjsgbXkgdGVuZGVyIGh1c2JhbmQsIHRvbywgYXJ0IHRob3UsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlCcnV0dXMgc21pbGVkIGFuZCBzYWlkOiAKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj5CdXQgSSwgY2VydGFpbmx5LCBoYXZlIG5vIG1pbmQgdG8gYWRkcmVzcyBQb3JjaWEgaW4gdGhlIHdvcmRzIG9mIEhlY3RvciwKCQkJCQkKCQkJCQk8bD7igJhQbHkgbG9vbSBhbmQgZGlzdGFmZiBhbmQgZ2l2ZSBvcmRlcnMgdG8gdGh5IG1haWRzLOKAmTwvbD4KCQkJCQkgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA2LjQyOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5JbGlhZDwvdGl0bGU+LCB2aS4gNDI5IGYuPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDYuNDkxIiB2YWxpZD0ieWVzIj40OTE8L2JpYmw+Ljwvbm90ZT4gZm9yIHRob3VnaCBoZXIgYm9keSBpcyBub3Qgc3Ryb25nIGVub3VnaCB0byBwZXJmb3JtIHN1Y2ggaGVyb2ljIHRhc2tzIGFzIG1lbiBkbywgc3RpbGwsIGluIHNwaXJpdCBzaGUgaXMgdmFsaWFudCBpbiBkZWZlbmNlIG9mIGhlciBjb3VudHJ5LCBqdXN0IGFzIHdlIGFyZS48L3F1b3RlPiBUaGlzIHN0b3J5IGlzIHRvbGQgYnkgUG9yY2lhJ3Mgc29uLCBCaWJ1bHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMTMuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cywgdGhlbiwgZGlkIEJydXR1cyBleHByZXNzIGhpbXNlbGYgaW4gaGlzIGZpcnN0IGxldHRlcnMgdG8gQ2ljZXJvLiBCdXQgYWxyZWFkeSBvbmUgZmFjdGlvbiB3YXMgZm9ybWluZyBhYm91dCBPY3Rhdml1cywgYW5kIGFub3RoZXIgYWJvdXQgQW50b255LCBhbmQgdGhlIHNvbGRpZXJzLCBhcyB0aG91Z2ggZm9yIHNhbGUgYXQgYXVjdGlvbiwgZmxvY2tlZCB0byB0aGUgaGlnaGVzdCBiaWRkZXIuIEFsdG9nZXRoZXIgZGVzcGFpcmluZywgdGhlcmVmb3JlLCBvZiB0aGUgc3RhdGUsIEJydXR1cyBkZXRlcm1pbmVkIHRvIGFiYW5kb24gSXRhbHksIGFuZCBjYW1lIGJ5IGxhbmQgdGhyb3VnaCBMdWNhbmlhIHRvIEVsZWEgYnkgdGhlIHNlYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIFBvcmNpYSB3YXMgYWJvdXQgdG8gcmV0dXJuIHRoZW5jZSB0byBSb21lLCBzaGUgdHJpZWQgdG8gY29uY2VhbCBoZXIgZGlzdHJlc3MsIGJ1dCBhIGNlcnRhaW4gcGFpbnRpbmcgYmV0cmF5ZWQgaGVyLCBpbiBzcGl0ZSBvZiBoZXIgbm9ibGUgc3Bpcml0IGhpdGhlcnRvLiBJdHMgc3ViamVjdCB3YXMgR3JlZWssIOKAlEFuZHJvbWFjaGUgYmlkZGluZyBmYXJld2VsbCB0byBIZWN0b3I7IHNoZSB3YXMgdGFraW5nIGZyb20gaGlzIGFybXMgdGhlaXIgbGl0dGxlIHNvbiwgd2hpbGUgaGVyIGV5ZXMgd2VyZSBmaXhlZCB1cG9uIGhlciBodXNiYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gUG9yY2lhIHNhdyB0aGlzLCB0aGUgaW1hZ2Ugb2YgaGVyIG93biBzb3Jyb3cgcHJlc2VudGVkIGJ5IGl0IGNhdXNlZCBoZXIgdG8gYnVyc3QgaW50byB0ZWFycywgYW5kIHNoZSB3b3VsZCB2aXNpdCBpdCBtYW55IHRpbWVzIGEgZGF5IGFuZCB3ZWVwIGJlZm9yZSBpdC4gQW5kIHdoZW4gQWNpbGl1cywgb25lIG9mIHRoZSBmcmllbmRzIG9mIEJydXR1cywgcmVjaXRlZCB0aGUgdmVyc2VzIGNvbnRhaW5pbmcgQW5kcm9tYWNoZSdzIHdvcmRzIHRvIEhlY3RvciwKCQkJCTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCwgSGVjdG9yLCB0aG91IHRvIG1lIGFydCBmYXRoZXIgYW5kIGhvbm91cmVkIG1vdGhlcjwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgYnJvdGhlcjsgbXkgdGVuZGVyIGh1c2JhbmQsIHRvbywgYXJ0IHRob3UsPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgoJCQkJICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCwgSGVjdG9yLCB0aG91IHRvIG1lIGFydCBmYXRoZXIgYW5kIGhvbm91cmVkIG1vdGhlcjwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgYnJvdGhlcjsgbXkgdGVuZGVyIGh1c2JhbmQsIHRvbywgYXJ0IHRob3UsPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnJ1dHVzIHNtaWxlZCBhbmQgc2FpZDogCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj5CdXQgSSwgY2VydGFpbmx5LCBoYXZlIG5vIG1pbmQgdG8gYWRkcmVzcyBQb3JjaWEgaW4gdGhlIHdvcmRzIG9mIEhlY3RvciwKCQkJCQkKCQkJCQk8bCBjbGFzcz0idHJhbnNsYXRpb24iPuKAmFBseSBsb29tIGFuZCBkaXN0YWZmIGFuZCBnaXZlIG9yZGVycyB0byB0aHkgbWFpZHMs4oCZPC9sPgoJCQkJCSAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA2LjQyOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHZpLiA0MjkgZi48L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA2LjQ5MSIgdmFsaWQ9InllcyI+NDkxPC9iaWJsPi48L25vdGU+IGZvciB0aG91Z2ggaGVyIGJvZHkgaXMgbm90IHN0cm9uZyBlbm91Z2ggdG8gcGVyZm9ybSBzdWNoIGhlcm9pYyB0YXNrcyBhcyBtZW4gZG8sIHN0aWxsLCBpbiBzcGlyaXQgc2hlIGlzIHZhbGlhbnQgaW4gZGVmZW5jZSBvZiBoZXIgY291bnRyeSwganVzdCBhcyB3ZSBhcmUuPC9xdW90ZT4gVGhpcyBzdG9yeSBpcyB0b2xkIGJ5IFBvcmNpYSdzIHNvbiwgQmlidWx1cy48bCBjbGFzcz0idHJhbnNsYXRpb24iPuKAmFBseSBsb29tIGFuZCBkaXN0YWZmIGFuZCBnaXZlIG9yZGVycyB0byB0aHkgbWFpZHMs4oCZPC9sPgoJCQkJCSAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA2LjQyOSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHZpLiA0MjkgZi48L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiA2LjQ5MSIgdmFsaWQ9InllcyI+NDkxPC9iaWJsPi48L25vdGU+IGZvciB0aG91Z2ggaGVyIGJvZHkgaXMgbm90IHN0cm9uZyBlbm91Z2ggdG8gcGVyZm9ybSBzdWNoIGhlcm9pYyB0YXNrcyBhcyBtZW4gZG8sIHN0aWxsLCBpbiBzcGlyaXQgc2hlIGlzIHZhbGlhbnQgaW4gZGVmZW5jZSBvZiBoZXIgY291bnRyeSwganVzdCBhcyB3ZSBhcmUuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gNi40MjkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB2aS4gNDI5IGYuPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgdmkuIDQyOSBmLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDYuNDkxIiB2YWxpZD0ieWVzIj40OTE8L2JpYmw+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDEzLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGlpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMTMuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVuY2UgQnJ1dHVzIHB1dCB0byBzZWEgYW5kIHNhaWxlZCBmb3IgQXRoZW5zLiBIZXJlIHRoZSBwZW9wbGUgd2VsY29tZWQgaGltIGVhZ2VybHkgYW5kIGV4dG9sbGVkIGhpbSBpbiBwdWJsaWMgZGVjcmVlcy4gSGUgZHdlbHQgd2l0aCBhIGNlcnRhaW4gZ3Vlc3QtZnJpZW5kLCBhdHRlbmRlZCB0aGUgbGVjdHVyZXMgb2YgVGhlb21uZXN0dXMgdGhlIEFjYWRlbWljIGFuZCBDcmF0aXBwdXMgdGhlIFBlcmlwYXRldGljLCBkaXNjdXNzZWQgcGhpbG9zb3BoeSB3aXRoIHRoZW0sIGFuZCB3YXMgdGhvdWdodCB0byBiZSB3aG9sbHkgZ2l2ZW4gdXAgdG8gbGl0ZXJhcnkgcHVyc3VpdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aXRob3V0IGFueSBvbmUncyBzdXNwZWN0aW5nIGl0LCBoZSB3YXMgZ2V0dGluZyByZWFkeSBmb3Igd2FyLiBGb3IgaGUgc2VudCBIZXJvc3RyYXR1cyBpbnRvIE1hY2Vkb25pYSwgZGVzaXJpbmcgdG8gd2luIG92ZXIgdGhlIGNvbW1hbmRlcnMgb2YgdGhlIGFybWllcyB0aGVyZSwgYW5kIGhlIHVuaXRlZCBpbiBoaXMgc2VydmljZSBhbGwgdGhlIHlvdW5nIFJvbWFucyB3aG8gd2VyZSBzdHVkeWluZyBhdCBBdGhlbnMuIE9uZSBvZiB0aGVzZSB3YXMgQ2ljZXJvJ3Mgc29uLCBvbiB3aG9tIGhlIGJlc3Rvd3MgaGlnaCBwcmFpc2UsIGRlY2xhcmluZyB0aGF0IHdoZXRoZXIgYXdha2Ugb3IgYXNsZWVwIGFuZCBkcmVhbWluZywgaGUgd2FzIGFtYXplZCB0byBmaW5kIGhpbSBvZiBzdWNoIGEgbm9ibGUgc3Bpcml0IGFuZCBzdWNoIGEgaGF0ZXIgb2YgdHlyYW5ueS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVuY2UgQnJ1dHVzIHB1dCB0byBzZWEgYW5kIHNhaWxlZCBmb3IgQXRoZW5zLiBIZXJlIHRoZSBwZW9wbGUgd2VsY29tZWQgaGltIGVhZ2VybHkgYW5kIGV4dG9sbGVkIGhpbSBpbiBwdWJsaWMgZGVjcmVlcy4gSGUgZHdlbHQgd2l0aCBhIGNlcnRhaW4gZ3Vlc3QtZnJpZW5kLCBhdHRlbmRlZCB0aGUgbGVjdHVyZXMgb2YgVGhlb21uZXN0dXMgdGhlIEFjYWRlbWljIGFuZCBDcmF0aXBwdXMgdGhlIFBlcmlwYXRldGljLCBkaXNjdXNzZWQgcGhpbG9zb3BoeSB3aXRoIHRoZW0sIGFuZCB3YXMgdGhvdWdodCB0byBiZSB3aG9sbHkgZ2l2ZW4gdXAgdG8gbGl0ZXJhcnkgcHVyc3VpdHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aXRob3V0IGFueSBvbmUncyBzdXNwZWN0aW5nIGl0LCBoZSB3YXMgZ2V0dGluZyByZWFkeSBmb3Igd2FyLiBGb3IgaGUgc2VudCBIZXJvc3RyYXR1cyBpbnRvIE1hY2Vkb25pYSwgZGVzaXJpbmcgdG8gd2luIG92ZXIgdGhlIGNvbW1hbmRlcnMgb2YgdGhlIGFybWllcyB0aGVyZSwgYW5kIGhlIHVuaXRlZCBpbiBoaXMgc2VydmljZSBhbGwgdGhlIHlvdW5nIFJvbWFucyB3aG8gd2VyZSBzdHVkeWluZyBhdCBBdGhlbnMuIE9uZSBvZiB0aGVzZSB3YXMgQ2ljZXJvJ3Mgc29uLCBvbiB3aG9tIGhlIGJlc3Rvd3MgaGlnaCBwcmFpc2UsIGRlY2xhcmluZyB0aGF0IHdoZXRoZXIgYXdha2Ugb3IgYXNsZWVwIGFuZCBkcmVhbWluZywgaGUgd2FzIGFtYXplZCB0byBmaW5kIGhpbSBvZiBzdWNoIGEgbm9ibGUgc3Bpcml0IGFuZCBzdWNoIGEgaGF0ZXIgb2YgdHlyYW5ueS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXJ3YXJkcyBoZSBiZWdhbiB0byBhY3Qgb3Blbmx5LCBhbmQgaGF2aW5nIGxlYXJuZWQgdGhhdCBSb21hbiB0cmFuc3BvcnRzIGZ1bGwgb2YgdHJlYXN1cmUgd2VyZSBhcHByb2FjaGluZyBmcm9tIEFzaWEsIGFuZCB0aGF0IGFuIGFjY29tcGxpc2hlZCBhbmQgd2VsbC1rbm93biBtYW4gd2FzIGluIGNvbW1hbmQgb2YgdGhlbSwgaGUgd2VudCB0byBtZWV0IGhpbSBhdCBDYXJ5c3R1cy4gQWZ0ZXIgY29uZmVycmluZyB3aXRoIGhpbSBhbmQgcGVyc3VhZGluZyBoaW0gdG8gaGFuZCBvdmVyIHRoZSB0cmFuc3BvcnRzLCBoZSBwcmVwYXJlZCBhbiBlbnRlcnRhaW5tZW50IG9mIHVudXN1YWwgc3BsZW5kb3VyOyBmb3IgaXQgd2FzIEJydXR1cydzIGJpcnRoZGF5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiB0aGV5IHdlcmUgY29tZSB0byB0aGVpciB3aW5lLCBhbmQgd2VyZSBwbGVkZ2luZyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlZpY3RvcnkgdG8gQnJ1dHVzLDwvcT4gYW5kIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGliZXJ0eSB0byB0aGUgUm9tYW5zLDwvcT4gd2lzaGluZyB0byBhbmltYXRlIHRoZW0gc3RpbGwgbW9yZSwgQnJ1dHVzIGNhbGxlZCBmb3IgYSBsYXJnZXIgYmVha2VyLCBhbmQgdGhlbiwgd2hlbiBoZSBoYWQgcmVjZWl2ZWQgaXQsIHdpdGhvdXQgYW55IG9zdGVuc2libGUgcmVhc29uLCByZWNpdGVkIHRoaXMgdmVyc2U64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPuKAlEJ1dCBJIGFtIHNsYWluIGJ5IGJhbGVmdWwgRmF0ZSBhbmQgTGV0bydzIHNvbi48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBhdHJvY2x1cyB0byBIZWN0b3IsIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAxNi44NDkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgeHZpLiA4NDk8L2JpYmw+LiBMZXRvJ3Mgc29uIHdhcyBBcG9sbG8sIGFuZCB0aGUgbmFtZSB3YXMgdGhvdWdodCB0byBtZWFuIDxlbXBoPkRlc3Ryb3llcjwvZW1waD4uPC9ub3RlPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlBbmQgc3RpbGwgZnVydGhlciwgaW4gYWRkaXRpb24gdG8gdGhpcywgaGlzdG9yaWFucyB0ZWxsIHVzIHRoYXQgd2hlbiBoZSB3YXMgZ29pbmcgb3V0IHRvIGZpZ2h0IGhpcyBsYXN0IGJhdHRsZSBhdCBQaGlsaXBwaSwgdGhlIHdhdGNod29yZCB3aGljaCBoZSBnYXZlIG91dCB0byBoaXMgc29sZGllcnMgd2FzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXBvbGxvLjwvcT4gVGhlcmVmb3JlIHRoZXkgY29uY2x1ZGUgdGhhdCB3aGVuIGhlIHJlY2l0ZWQgdGhhdCB2ZXJzZSwgaXQgYWxzbyB3YXMgYSBwcmVzYWdlIG9mIGhpcyBjYWxhbWl0eS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyd2FyZHMgaGUgYmVnYW4gdG8gYWN0IG9wZW5seSwgYW5kIGhhdmluZyBsZWFybmVkIHRoYXQgUm9tYW4gdHJhbnNwb3J0cyBmdWxsIG9mIHRyZWFzdXJlIHdlcmUgYXBwcm9hY2hpbmcgZnJvbSBBc2lhLCBhbmQgdGhhdCBhbiBhY2NvbXBsaXNoZWQgYW5kIHdlbGwta25vd24gbWFuIHdhcyBpbiBjb21tYW5kIG9mIHRoZW0sIGhlIHdlbnQgdG8gbWVldCBoaW0gYXQgQ2FyeXN0dXMuIEFmdGVyIGNvbmZlcnJpbmcgd2l0aCBoaW0gYW5kIHBlcnN1YWRpbmcgaGltIHRvIGhhbmQgb3ZlciB0aGUgdHJhbnNwb3J0cywgaGUgcHJlcGFyZWQgYW4gZW50ZXJ0YWlubWVudCBvZiB1bnVzdWFsIHNwbGVuZG91cjsgZm9yIGl0IHdhcyBCcnV0dXMncyBiaXJ0aGRheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIHRoZXkgd2VyZSBjb21lIHRvIHRoZWlyIHdpbmUsIGFuZCB3ZXJlIHBsZWRnaW5nIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5WaWN0b3J5IHRvIEJydXR1cyw8L3E+IGFuZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGliZXJ0eSB0byB0aGUgUm9tYW5zLDwvcT4gd2lzaGluZyB0byBhbmltYXRlIHRoZW0gc3RpbGwgbW9yZSwgQnJ1dHVzIGNhbGxlZCBmb3IgYSBsYXJnZXIgYmVha2VyLCBhbmQgdGhlbiwgd2hlbiBoZSBoYWQgcmVjZWl2ZWQgaXQsIHdpdGhvdXQgYW55IG9zdGVuc2libGUgcmVhc29uLCByZWNpdGVkIHRoaXMgdmVyc2U64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj7igJRCdXQgSSBhbSBzbGFpbiBieSBiYWxlZnVsIEZhdGUgYW5kIExldG8ncyBzb24uPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPuKAlEJ1dCBJIGFtIHNsYWluIGJ5IGJhbGVmdWwgRmF0ZSBhbmQgTGV0bydzIHNvbi48L2w+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UGF0cm9jbHVzIHRvIEhlY3RvciwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMTYuODQ5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHZpLiA4NDk8L2JpYmw+LiBMZXRvJ3Mgc29uIHdhcyBBcG9sbG8sIGFuZCB0aGUgbmFtZSB3YXMgdGhvdWdodCB0byBtZWFuIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVzdHJveWVyPC9lbXBoPi48L25vdGU+CgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gSWwuIDE2Ljg0OSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkPC90aXRsZT4sIHh2aS4gODQ5PC9iaWJsPi4gTGV0bydzIHNvbiB3YXMgQXBvbGxvLCBhbmQgdGhlIG5hbWUgd2FzIHRob3VnaHQgdG8gbWVhbiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB4dmkuIDg0OTxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVzdHJveWVyPC9lbXBoPi48L3RyYW5zbGF0aW9uPg=="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQW5kIHN0aWxsIGZ1cnRoZXIsIGluIGFkZGl0aW9uIHRvIHRoaXMsIGhpc3RvcmlhbnMgdGVsbCB1cyB0aGF0IHdoZW4gaGUgd2FzIGdvaW5nIG91dCB0byBmaWdodCBoaXMgbGFzdCBiYXR0bGUgYXQgUGhpbGlwcGksIHRoZSB3YXRjaHdvcmQgd2hpY2ggaGUgZ2F2ZSBvdXQgdG8gaGlzIHNvbGRpZXJzIHdhcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXBvbGxvLjwvcT4gVGhlcmVmb3JlIHRoZXkgY29uY2x1ZGUgdGhhdCB3aGVuIGhlIHJlY2l0ZWQgdGhhdCB2ZXJzZSwgaXQgYWxzbyB3YXMgYSBwcmVzYWdlIG9mIGhpcyBjYWxhbWl0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgQW50aXN0aXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBtaXN0YWtlIGZvciBBcHB1bGVpdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIFBoaWwuIDEwLjI0IiB2YWxpZD0ieWVzIj5DaWNlcm8sIDx0aXRsZT5QaGlsaXBwaWNzPC90aXRsZT4sIHguIDExPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMy44LjYzIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZT5CLkMuPC90aXRsZT4gaWlpLiA2MzwvYmlibD4pLCB3aG8gd2FzIHF1YWVzdG9yIGluIEFzaWEuPC9ub3RlPiBnYXZlIGhpbSBmaXZlIGh1bmRyZWQgdGhvdXNhbmQgZHJhY2htYXMgZnJvbSB0aGUgbW9uZXlzIHdoaWNoIGhlIHdhcyBwZXJzb25hbGx5IHRha2luZyB0byBJdGFseSwgYW5kIGFsbCBQb21wZXkncyBzb2xkaWVycyB3aG8gd2VyZSBzdGlsbCB3YW5kZXJpbmcgYWJvdXQgVGhlc3NhbHkgZ2xhZGx5IGZsb2NrZWQgdG8gaGlzIHN0YW5kYXJkLiBIZSBhbHNvIHRvb2sgZnJvbSBDaW5uYSBmaXZlIGh1bmRyZWQgaG9yc2VtZW4gdGhhdCBoZSB3YXMgY29uZHVjdGluZyB0byBEb2xhYmVsbGEgaW4gQXNpYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBzYWlsaW5nIHRvIERlbWV0cmlhcywgd2hlbmNlIGdyZWF0IHF1YW50aXRpZXMgb2YgYXJtcywgd2hpY2ggdGhlIGVsZGVyIENhZXNhciBoYWQgb3JkZXJlZCB0byBiZSBtYWRlIGZvciBoaXMgUGFydGhpYW4gd2FyLCB3ZXJlIGJlaW5nIGNvbmR1Y3RlZCB0byBBbnRvbnksIGhlIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGVtLiBBZnRlciBIb3J0ZW5zaXVzIHRoZSBwcmFldG9yIGhhZCBkZWxpdmVyZWQgdXAgTWFjZWRvbmlhIHRvIGhpbSwgYW5kIHdoaWxlIGFsbCB0aGUgc3Vycm91bmRpbmcga2luZ3MgYW5kIHBvdGVudGF0ZXMgd2VyZSB1bml0aW5nIG9uIGhpcyBzaWRlLCB3b3JkIHdhcyBicm91Z2h0IHRoYXQgQ2FpdXMsIHRoZSBicm90aGVyIG9mIEFudG9ueSwgaGFkIGNyb3NzZWQgb3ZlciBmcm9tIEl0YWx5IGFuZCB3YXMgbWFyY2hpbmcgZGlyZWN0bHkgdG8gam9pbiB0aGUgZm9yY2VzIHVuZGVyIFZhdGluaXVzIGluIEVwaWRhbW51cyBhbmQgQXBvbGxvbmlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaXNoaW5nLCB0aGVyZWZvcmUsIHRvIGFudGljaXBhdGUgaGlzIGFycml2YWwgYW5kIGNhcHR1cmUgdGhlc2UgZm9yY2VzLCBCcnV0dXMgc3VkZGVubHkgc2V0IG91dCB3aXRoIHRoZSBmb3JjZXMgdW5kZXIgaGltIGFuZCBtYXJjaGVkIHRocm91Z2ggcmVnaW9ucyBkaWZmaWN1bHQgb2YgcGFzc2FnZSwgaW4gc25vdyBzdG9ybXMsIGFuZCBmYXIgaW4gYWR2YW5jZSBvZiBoaXMgcHJvdmlzaW9uLXRyYWluLiBBY2NvcmRpbmdseSwgd2hlbiBoZSBoYWQgbmVhcmx5IHJlYWNoZWQgRXBpZGFtbnVzLCBmYXRpZ3VlIGFuZCBjb2xkIGdhdmUgaGltIHRoZSBkaXN0ZW1wZXIgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Ym91bGltaWEsPC9xPiBUaGlzIGF0dGFja3MgbW9yZSBlc3BlY2lhbGx5IG1lbiBhbmQgYmVhc3RzIHRvaWxpbmcgdGhyb3VnaCBzbm93Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFzIGl0IGRpZCB0aGUgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGVuIFRob3VzYW5kPC9xPiBpbiBBcm1lbmlhICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iWGVuLiBBbmFiLiA0LjUuNyIgdmFsaWQ9InllcyI+WGVub3Bob24sIDx0aXRsZT5BbmFiLjwvdGl0bGU+IGl2LiA1LCA3IGYuPC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoZXRoZXIgaXQgaXMgdGhhdCB0aGUgdml0YWwgaGVhdCwgYmVpbmcgd2hvbGx5IHNodXQgdXAgd2l0aGluIHRoZSBib2R5IGJ5IHRoZSBjb2xkIHRoYXQgc3Vycm91bmRzIGFuZCB0aGlja2VucyBpdCwgY29uc3VtZXMgaXRzIG5vdXJpc2htZW50IGNvbXBsZXRlbHksIG9yIHRoYXQgYSBrZWVuIGFuZCBzdWJ0bGUgdmFwb3VyIGFyaXNpbmcgZnJvbSB0aGUgbWVsdGluZyBzbm93IHBpZXJjZXMgdGhlIGJvZHkgYW5kIGRlc3Ryb3lzIGl0cyBoZWF0IGFzIGl0IGlzc3VlcyBmb3J0aC4gRm9yIHRoZSBzd2VhdCBvZiB0aGUgYm9keSBzZWVtcyB0byBiZSBwcm9kdWNlZCBieSBpdHMgaGVhdCwgYW5kIHRoaXMgaXMgZXh0aW5ndWlzaGVkIGJ5IHRoZSBjb2xkIHdoaWNoIG1lZXRzIGl0IGF0IHRoZSBzdXJmYWNlLiBCdXQgSSBoYXZlIGRpc2N1c3NlZCB0aGlzIG1hdHRlciBtb3JlIGF0IGxlbmd0aCBlbHNld2hlcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuLCBmb3IgZXhhbXBsZSwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNjkxIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1vcmFsczwvdGl0bGU+LCBwcC4gNjkxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgQW50aXN0aXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIG1pc3Rha2UgZm9yIEFwcHVsZWl1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQaGlsLiAxMC4yNCIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsaXBwaWNzPC90aXRsZT4sIHguIDExPC9iaWJsPjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAzLjguNjMiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi5DLjwvdGl0bGU+IGlpaS4gNjM8L2JpYmw+KSwgd2hvIHdhcyBxdWFlc3RvciBpbiBBc2lhLjwvbm90ZT4gZ2F2ZSBoaW0gZml2ZSBodW5kcmVkIHRob3VzYW5kIGRyYWNobWFzIGZyb20gdGhlIG1vbmV5cyB3aGljaCBoZSB3YXMgcGVyc29uYWxseSB0YWtpbmcgdG8gSXRhbHksIGFuZCBhbGwgUG9tcGV5J3Mgc29sZGllcnMgd2hvIHdlcmUgc3RpbGwgd2FuZGVyaW5nIGFib3V0IFRoZXNzYWx5IGdsYWRseSBmbG9ja2VkIHRvIGhpcyBzdGFuZGFyZC4gSGUgYWxzbyB0b29rIGZyb20gQ2lubmEgZml2ZSBodW5kcmVkIGhvcnNlbWVuIHRoYXQgaGUgd2FzIGNvbmR1Y3RpbmcgdG8gRG9sYWJlbGxhIGluIEFzaWEuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBQaGlsLiAxMC4yNCIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QaGlsaXBwaWNzPC90aXRsZT4sIHguIDExPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGhpbGlwcGljczwvdGl0bGU+LCB4LiAxMTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMy44LjYzIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuQy48L3RpdGxlPiBpaWkuIDYzPC9iaWJsPiksIHdobyB3YXMgcXVhZXN0b3IgaW4gQXNpYS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLkMuPC90aXRsZT4gaWlpLiA2MzwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gc2FpbGluZyB0byBEZW1ldHJpYXMsIHdoZW5jZSBncmVhdCBxdWFudGl0aWVzIG9mIGFybXMsIHdoaWNoIHRoZSBlbGRlciBDYWVzYXIgaGFkIG9yZGVyZWQgdG8gYmUgbWFkZSBmb3IgaGlzIFBhcnRoaWFuIHdhciwgd2VyZSBiZWluZyBjb25kdWN0ZWQgdG8gQW50b255LCBoZSB0b29rIHBvc3Nlc3Npb24gb2YgdGhlbS4gQWZ0ZXIgSG9ydGVuc2l1cyB0aGUgcHJhZXRvciBoYWQgZGVsaXZlcmVkIHVwIE1hY2Vkb25pYSB0byBoaW0sIGFuZCB3aGlsZSBhbGwgdGhlIHN1cnJvdW5kaW5nIGtpbmdzIGFuZCBwb3RlbnRhdGVzIHdlcmUgdW5pdGluZyBvbiBoaXMgc2lkZSwgd29yZCB3YXMgYnJvdWdodCB0aGF0IENhaXVzLCB0aGUgYnJvdGhlciBvZiBBbnRvbnksIGhhZCBjcm9zc2VkIG92ZXIgZnJvbSBJdGFseSBhbmQgd2FzIG1hcmNoaW5nIGRpcmVjdGx5IHRvIGpvaW4gdGhlIGZvcmNlcyB1bmRlciBWYXRpbml1cyBpbiBFcGlkYW1udXMgYW5kIEFwb2xsb25pYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldpc2hpbmcsIHRoZXJlZm9yZSwgdG8gYW50aWNpcGF0ZSBoaXMgYXJyaXZhbCBhbmQgY2FwdHVyZSB0aGVzZSBmb3JjZXMsIEJydXR1cyBzdWRkZW5seSBzZXQgb3V0IHdpdGggdGhlIGZvcmNlcyB1bmRlciBoaW0gYW5kIG1hcmNoZWQgdGhyb3VnaCByZWdpb25zIGRpZmZpY3VsdCBvZiBwYXNzYWdlLCBpbiBzbm93IHN0b3JtcywgYW5kIGZhciBpbiBhZHZhbmNlIG9mIGhpcyBwcm92aXNpb24tdHJhaW4uIEFjY29yZGluZ2x5LCB3aGVuIGhlIGhhZCBuZWFybHkgcmVhY2hlZCBFcGlkYW1udXMsIGZhdGlndWUgYW5kIGNvbGQgZ2F2ZSBoaW0gdGhlIGRpc3RlbXBlciBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJvdWxpbWlhLDwvcT4gVGhpcyBhdHRhY2tzIG1vcmUgZXNwZWNpYWxseSBtZW4gYW5kIGJlYXN0cyB0b2lsaW5nIHRocm91Z2ggc25vdzs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFzIGl0IGRpZCB0aGUgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UZW4gVGhvdXNhbmQ8L3E+IGluIEFybWVuaWEgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gNC41LjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGl2LiA1LCA3IGYuPC9iaWJsPikuPC9ub3RlPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UZW4gVGhvdXNhbmQ8L3E+IGluIEFybWVuaWEgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ilhlbi4gQW5hYi4gNC41LjciIHZhbGlkPSJ5ZXMiPlhlbm9waG9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmFiLjwvdGl0bGU+IGl2LiA1LCA3IGYuPC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5hYi48L3RpdGxlPiBpdi4gNSwgNyBmLjwvdHJhbnNsYXRpb24+"
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoZXRoZXIgaXQgaXMgdGhhdCB0aGUgdml0YWwgaGVhdCwgYmVpbmcgd2hvbGx5IHNodXQgdXAgd2l0aGluIHRoZSBib2R5IGJ5IHRoZSBjb2xkIHRoYXQgc3Vycm91bmRzIGFuZCB0aGlja2VucyBpdCwgY29uc3VtZXMgaXRzIG5vdXJpc2htZW50IGNvbXBsZXRlbHksIG9yIHRoYXQgYSBrZWVuIGFuZCBzdWJ0bGUgdmFwb3VyIGFyaXNpbmcgZnJvbSB0aGUgbWVsdGluZyBzbm93IHBpZXJjZXMgdGhlIGJvZHkgYW5kIGRlc3Ryb3lzIGl0cyBoZWF0IGFzIGl0IGlzc3VlcyBmb3J0aC4gRm9yIHRoZSBzd2VhdCBvZiB0aGUgYm9keSBzZWVtcyB0byBiZSBwcm9kdWNlZCBieSBpdHMgaGVhdCwgYW5kIHRoaXMgaXMgZXh0aW5ndWlzaGVkIGJ5IHRoZSBjb2xkIHdoaWNoIG1lZXRzIGl0IGF0IHRoZSBzdXJmYWNlLiBCdXQgSSBoYXZlIGRpc2N1c3NlZCB0aGlzIG1hdHRlciBtb3JlIGF0IGxlbmd0aCBlbHNld2hlcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4sIGZvciBleGFtcGxlLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNb3IuIDY5MSI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwcC4gNjkxIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1vci4gNjkxIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TW9yYWxzPC90aXRsZT4sIHBwLiA2OTEgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1vcmFsczwvdGl0bGU+LCBwcC4gNjkxIGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSBCcnV0dXMgd2FzIGZhaW50LCBhbmQgc2luY2Ugbm90IG9uZSBvZiBoaXMgc29sZGllcnMgaGFkIGFueXRoaW5nIGluIHRoZSBzaGFwZSBvZiBmb29kLCBoaXMgYXR0ZW5kYW50cyB3ZXJlIG9ibGlnZWQgdG8gaGF2ZSByZWNvdXJzZSB0byB0aGVpciBlbmVtaWVzLCBhbmQgZ29pbmcgZG93biB0byB0aGUgZ2F0ZSBvZiB0aGUgY2l0eSB0aGV5IGFza2VkIHRoZSBzZW50aW5lbHMgZm9yIGJyZWFkLiBUaGVzZSwgd2hlbiB0aGV5IGhlYXJkIG9mIHRoZSBtaXNoYXAgb2YgQnJ1dHVzLCBjYW1lIHRvIGhpbSB0aGVtc2VsdmVzLCBicmluZ2luZyBmb29kIGFuZCBkcmluay4gV2hlcmVmb3JlIEJydXR1cywgd2hlbiB0aGUgY2l0eSBoYWQgc3VycmVuZGVyZWQgdG8gaGltLCB0cmVhdGVkIG5vdCBvbmx5IHRoZXNlIG1lbiBodW1hbmVseSwgYnV0IGFsc28gYWxsIHRoZSBvdGhlciBjaXRpemVucyBmb3IgdGhlaXIgc2FrZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSBCcnV0dXMgd2FzIGZhaW50LCBhbmQgc2luY2Ugbm90IG9uZSBvZiBoaXMgc29sZGllcnMgaGFkIGFueXRoaW5nIGluIHRoZSBzaGFwZSBvZiBmb29kLCBoaXMgYXR0ZW5kYW50cyB3ZXJlIG9ibGlnZWQgdG8gaGF2ZSByZWNvdXJzZSB0byB0aGVpciBlbmVtaWVzLCBhbmQgZ29pbmcgZG93biB0byB0aGUgZ2F0ZSBvZiB0aGUgY2l0eSB0aGV5IGFza2VkIHRoZSBzZW50aW5lbHMgZm9yIGJyZWFkLiBUaGVzZSwgd2hlbiB0aGV5IGhlYXJkIG9mIHRoZSBtaXNoYXAgb2YgQnJ1dHVzLCBjYW1lIHRvIGhpbSB0aGVtc2VsdmVzLCBicmluZ2luZyBmb29kIGFuZCBkcmluay4gV2hlcmVmb3JlIEJydXR1cywgd2hlbiB0aGUgY2l0eSBoYWQgc3VycmVuZGVyZWQgdG8gaGltLCB0cmVhdGVkIG5vdCBvbmx5IHRoZXNlIG1lbiBodW1hbmVseSwgYnV0IGFsc28gYWxsIHRoZSBvdGhlciBjaXRpemVucyBmb3IgdGhlaXIgc2FrZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYWl1cyBBbnRvbml1cyBkcmV3IG5lYXIgQXBvbGxvbmlhLCBoZSBzdW1tb25lZCB0aGUgc29sZGllcnMgd2hvIHdlcmUgaW4gdGhlIHZpY2luaXR5LiBUaGVzZSwgaG93ZXZlciwgd2VudCB0byBCcnV0dXMsIGFuZCBDYWl1cyBwZXJjZWl2ZWQgYWxzbyB0aGF0IHRoZSBwZW9wbGUgb2YgQXBvbGxvbmlhIGZhdm91cmVkIHRoZSBjYXVzZSBvZiBCcnV0dXMuIEhlIHRoZXJlZm9yZSBsZWZ0IHRoZSBjaXR5IGJlaGluZCBhbmQgc2V0IG91dCBmb3IgQnV0aHJvdHVtLiBUbyBiZWdpbiB3aXRoLCBoZSBsb3N0IHRocmVlIGNvaG9ydHMgb24gdGhlIG1hcmNoLCB3aGljaCB3ZXJlIGN1dCB0byBwaWVjZXMgYnkgQnJ1dHVzOyBuZXh0LCB3aGVuIGhlIHRyaWVkIHRvIGZvcmNlIHRoZSBwb3NpdGlvbnMgbmVhciBCeWxsaXMgd2hpY2ggaGlzIG9wcG9uZW50cyBoYWQgZWFybGllciBvY2N1cGllZCwgYW5kIGpvaW5lZCBiYXR0bGUsIGhlIHdhcyBkZWZlYXRlZCBieSBDaWNlcm8uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBCcnV0dXMgZW1wbG95ZWQgdGhpcyB5b3VuZyBtYW4gYXMgZ2VuZXJhbCwgYW5kIHdvbiBtYW55IHN1Y2Nlc3NlcyB0aHJvdWdoIGhpbS4gV2hlbiwgaG93ZXZlciwgaGUgY2FtZSB1cG9uIENhaXVzIGluIG1hcnNoeSByZWdpb25zIGFuZCB3aXRoIGhpcyBmb3JjZXMgd2lkZWx5IHNjYXR0ZXJlZCwgQnJ1dHVzIHdvdWxkIG5vdCBwZXJtaXQgaGlzIG1lbiB0byBhdHRhY2sgdGhlbSwgYnV0IHJvZGUgYWJvdXQgZ2l2aW5nIG9yZGVycyB0byBzcGFyZSB0aGVtLCBpbiB0aGUgYmVsaWVmIHRoYXQgdGhleSB3b3VsZCBzb29uIGJlIGhpcyBvd24uIEFuZCB0aGlzIGFjdHVhbGx5IGNhbWUgdG8gcGFzcy4gRm9yIHRoZXkgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyBhbmQgdGhlaXIgZ2VuZXJhbCwgc28gdGhhdCBub3cgQnJ1dHVzIGhhZCBhIGxhcmdlIGZvcmNlIGFib3V0IGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGEgbG9uZyB0aW1lLCB0aGVuLCBoZSBoZWxkIENhaXVzIGluIGhvbm91ciwgYW5kIHdvdWxkIG5vdCBkZXByaXZlIGhpbSBvZiB0aGUgaW5zaWduaWEgb2YgaGlzIGNvbW1hbmQsIGFsdGhvdWdoLCBhcyB3ZSBhcmUgdG9sZCwgQ2ljZXJvIGFuZCBtYW55IG90aGVycyBiZXNpZGVzIHdyb3RlIHRvIGhpbSBmcm9tIFJvbWUgYW5kIHVyZ2VkIGhpbSB0byBwdXQgdGhlIG1hbiB0byBkZWF0aC4gSG93ZXZlciwgd2hlbiBDYW1zIGJlZ2FuIHRvIGhvbGQgc2VjcmV0IGNvbW11bmljYXRpb25zIHdpdGggdGhlIG9mZmljZXJzIG9mIEJydXR1cywgYW5kIGluY2l0ZWQgYSByZXZvbHQsIEJydXR1cyBwdXQgaGltIG9uIGJvYXJkIGEgc2hpcCBhbmQga2VwdCBoaW0gdW5kZXIgZ3VhcmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBzb2xkaWVycyB3aG8gaGFkIGJlZW4gY29ycnVwdGVkIGJ5IENhaXVzIHdpdGhkcmV3IHRvIEFwb2xsb25pYSBhbmQgaW52aXRlZCBCcnV0dXMgdG8gY29tZSB0byB0aGVtIHRoZXJlLCBoZSB0b2xkIHRoZW0gdGhpcyB3YXMgbm90IGEgUm9tYW4gY3VzdG9tLCBidXQgdGhhdCB0aGV5IG11c3QgY29tZSB0aGVtc2VsdmVzIHRvIHRoZWlyIGNvbW1hbmRlciBhbmQgc2VlayB0byBhdmVydCBoaXMgd3JhdGggYXQgdGhlaXIgdHJhbnNncmVzc2lvbnMuIEFuZCB3aGVuIHRoZXkgY2FtZSBhbmQgYXNrZWQgaGlzIHBhcmRvbiwgaGUgZ3JhbnRlZCBpdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2FpdXMgQW50b25pdXMgZHJldyBuZWFyIEFwb2xsb25pYSwgaGUgc3VtbW9uZWQgdGhlIHNvbGRpZXJzIHdobyB3ZXJlIGluIHRoZSB2aWNpbml0eS4gVGhlc2UsIGhvd2V2ZXIsIHdlbnQgdG8gQnJ1dHVzLCBhbmQgQ2FpdXMgcGVyY2VpdmVkIGFsc28gdGhhdCB0aGUgcGVvcGxlIG9mIEFwb2xsb25pYSBmYXZvdXJlZCB0aGUgY2F1c2Ugb2YgQnJ1dHVzLiBIZSB0aGVyZWZvcmUgbGVmdCB0aGUgY2l0eSBiZWhpbmQgYW5kIHNldCBvdXQgZm9yIEJ1dGhyb3R1bS4gVG8gYmVnaW4gd2l0aCwgaGUgbG9zdCB0aHJlZSBjb2hvcnRzIG9uIHRoZSBtYXJjaCwgd2hpY2ggd2VyZSBjdXQgdG8gcGllY2VzIGJ5IEJydXR1czsgbmV4dCwgd2hlbiBoZSB0cmllZCB0byBmb3JjZSB0aGUgcG9zaXRpb25zIG5lYXIgQnlsbGlzIHdoaWNoIGhpcyBvcHBvbmVudHMgaGFkIGVhcmxpZXIgb2NjdXBpZWQsIGFuZCBqb2luZWQgYmF0dGxlLCBoZSB3YXMgZGVmZWF0ZWQgYnkgQ2ljZXJvLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBCcnV0dXMgZW1wbG95ZWQgdGhpcyB5b3VuZyBtYW4gYXMgZ2VuZXJhbCwgYW5kIHdvbiBtYW55IHN1Y2Nlc3NlcyB0aHJvdWdoIGhpbS4gV2hlbiwgaG93ZXZlciwgaGUgY2FtZSB1cG9uIENhaXVzIGluIG1hcnNoeSByZWdpb25zIGFuZCB3aXRoIGhpcyBmb3JjZXMgd2lkZWx5IHNjYXR0ZXJlZCwgQnJ1dHVzIHdvdWxkIG5vdCBwZXJtaXQgaGlzIG1lbiB0byBhdHRhY2sgdGhlbSwgYnV0IHJvZGUgYWJvdXQgZ2l2aW5nIG9yZGVycyB0byBzcGFyZSB0aGVtLCBpbiB0aGUgYmVsaWVmIHRoYXQgdGhleSB3b3VsZCBzb29uIGJlIGhpcyBvd24uIEFuZCB0aGlzIGFjdHVhbGx5IGNhbWUgdG8gcGFzcy4gRm9yIHRoZXkgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyBhbmQgdGhlaXIgZ2VuZXJhbCwgc28gdGhhdCBub3cgQnJ1dHVzIGhhZCBhIGxhcmdlIGZvcmNlIGFib3V0IGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBhIGxvbmcgdGltZSwgdGhlbiwgaGUgaGVsZCBDYWl1cyBpbiBob25vdXIsIGFuZCB3b3VsZCBub3QgZGVwcml2ZSBoaW0gb2YgdGhlIGluc2lnbmlhIG9mIGhpcyBjb21tYW5kLCBhbHRob3VnaCwgYXMgd2UgYXJlIHRvbGQsIENpY2VybyBhbmQgbWFueSBvdGhlcnMgYmVzaWRlcyB3cm90ZSB0byBoaW0gZnJvbSBSb21lIGFuZCB1cmdlZCBoaW0gdG8gcHV0IHRoZSBtYW4gdG8gZGVhdGguIEhvd2V2ZXIsIHdoZW4gQ2FtcyBiZWdhbiB0byBob2xkIHNlY3JldCBjb21tdW5pY2F0aW9ucyB3aXRoIHRoZSBvZmZpY2VycyBvZiBCcnV0dXMsIGFuZCBpbmNpdGVkIGEgcmV2b2x0LCBCcnV0dXMgcHV0IGhpbSBvbiBib2FyZCBhIHNoaXAgYW5kIGtlcHQgaGltIHVuZGVyIGd1YXJkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBzb2xkaWVycyB3aG8gaGFkIGJlZW4gY29ycnVwdGVkIGJ5IENhaXVzIHdpdGhkcmV3IHRvIEFwb2xsb25pYSBhbmQgaW52aXRlZCBCcnV0dXMgdG8gY29tZSB0byB0aGVtIHRoZXJlLCBoZSB0b2xkIHRoZW0gdGhpcyB3YXMgbm90IGEgUm9tYW4gY3VzdG9tLCBidXQgdGhhdCB0aGV5IG11c3QgY29tZSB0aGVtc2VsdmVzIHRvIHRoZWlyIGNvbW1hbmRlciBhbmQgc2VlayB0byBhdmVydCBoaXMgd3JhdGggYXQgdGhlaXIgdHJhbnNncmVzc2lvbnMuIEFuZCB3aGVuIHRoZXkgY2FtZSBhbmQgYXNrZWQgaGlzIHBhcmRvbiwgaGUgZ3JhbnRlZCBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGhlIHdhcyBhYm91dCB0byBjcm9zcyBpbnRvIEFzaWEsIHRpZGluZ3MgY2FtZSB0byBoaW0gb2YgdGhlIGNoYW5nZSB0aGF0IGhhZCB0YWtlbiBwbGFjZSBhdCBSb21lLiBGb3IgT2N0YXZpdXMgQ2Flc2FyIGhhZCBiZWVuIHN0cmVuZ3RoZW5lZCBieSB0aGUgc2VuYXRlIGFnYWluc3QgQW50b255LCBhbmQgYWZ0ZXIgZWplY3RpbmcgaGlzIHJpdmFsIGZyb20gSXRhbHksIHdhcyBoaW1zZWxmIG5vdyBhbiBvYmplY3Qgb2YgZmVhciwgc29saWNpdGluZyB0aGUgY29uc3Vsc2hpcCBpbGxlZ2FsbHksIGFuZCBtYWludGFpbmluZyBsYXJnZSBhcm1pZXMsIG9mIHdoaWNoIHRoZSBjaXR5IGhhZCBubyBuZWVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBoZSBzYXcgdGhhdCBldmVuIHRoZSBzZW5hdGUgd2FzIGRpc3BsZWFzZWQgYXQgdGhpcyBhbmQgdHVybmVkIHRoZWlyIGV5ZXMgYWJyb2FkIHRvIEJydXR1cywgY29uZmlybWluZyBoaW0gaW4gY29tbWFuZCBvZiBoaXMgcHJvdmluY2VzIGJ5IHRoZWlyIHZvdGUsIGhlIGJlY2FtZSBhZnJhaWQuIFNvIGhlIHNlbnQgYW5kIGludml0ZWQgQW50b255IHRvIGJlY29tZSBoaXMgZnJpZW5kLCBhbmQgdGhlbiwgc3RhdGlvbmluZyBoaXMgZm9yY2VzIGFib3V0IHRoZSBjaXR5LCBzZWN1cmVkIHRoZSBjb25zdWxzaGlwLCBhbHRob3VnaCBoZSB3YXMgc3RpbGwgYSBtZXJlIHlvdXRoLCBiZWluZyBpbiBoaXMgdHdlbnRpZXRoIHllYXIsIGFzIGhlIGhpbXNlbGYgaGFzIHN0YXRlZCBpbiBoaXMgQ29tbWVudGFyaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TdHJhaWdodHdheSwgdGhlbiwgaGUgYnJvdWdodCBpbmRpY3RtZW50cyBmb3IgbXVyZGVyIGFnYWluc3QgQnJ1dHVzIGFuZCBoaXMgYXNzb2NpYXRlcywgYWNjdXNpbmcgdGhlbSBvZiBoYXZpbmcgc2xhaW4gdGhlIGZpcnN0IG1hZ2lzdHJhdGUgb2YgdGhlIGNpdHkgd2l0aG91dCBhIHRyaWFsLiBIZSBhcHBvaW50ZWQgTHVjaXVzIENvcm5pZmljaXVzIHRvIGJlIHByb3NlY3V0b3Igb2YgQnJ1dHVzLCBhbmQgTWFyY3VzIEFncmlwcGEgb2YgQ2Fzc2l1cy4gQWNjb3JkaW5nbHksIHRoZWlyIGNhc2VzIHdlbnQgYnkgZGVmYXVsdCwgdGhlIGp1cm9ycyB2b3RpbmcgdW5kZXIgY29tcHVsc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHNhaWQgdGhhdCB3aGVuIHRoZSBoZXJhbGQgb24gdGhlIHJvc3RyYSBwcm9ub3VuY2VkIHRoZSBjdXN0b21hcnkgc3VtbW9ucyBmb3IgQnJ1dHVzIHRvIGFwcGVhciwgdGhlIG11bHRpdHVkZSBncm9hbmVkIGF1ZGlibHksIHdoaWxlIHRoZSBiZXR0ZXIgY2xhc3NlcyBib3dlZCB0aGVpciBoZWFkcyBpbiBzaWxlbmNlOyBhbmQgdGhhdCBQdWJsaXVzIFNpbGljaXVzIHdhcyBzZWVuIHRvIGJ1cnN0IGludG8gdGVhcnMsIGFuZCB3YXMgZm9yIHRoaXMgcmVhc29uIHNvb24gYWZ0ZXJ3YXJkcyBwdXQgb24gdGhlIGxpc3Qgb2YgdGhlIHByb3NjcmliZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRoZSB0aHJlZSBtZW4sIE9jdGF2aXVzLCBBbnRvbnksIGFuZCBMZXBpZHVzLCB3ZXJlIHJlY29uY2lsZWQgd2l0aCBvbmUgYW5vdGhlciBkaXN0cmlidXRlZCB0aGUgcHJvdmluY2VzIGFtb25nIHRoZW1zZWx2ZXMsIGFuZCBzZW50ZW5jZWQgdG8gZGVhdGggYnkgcHJvc2NyaXB0aW9uIHR3byBodW5kcmVkIG1lbi4gQW1vbmcgdGhvc2UgcHV0IHRvIGRlYXRoIHdhcyBDaWNlcm8uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGhlIHdhcyBhYm91dCB0byBjcm9zcyBpbnRvIEFzaWEsIHRpZGluZ3MgY2FtZSB0byBoaW0gb2YgdGhlIGNoYW5nZSB0aGF0IGhhZCB0YWtlbiBwbGFjZSBhdCBSb21lLiBGb3IgT2N0YXZpdXMgQ2Flc2FyIGhhZCBiZWVuIHN0cmVuZ3RoZW5lZCBieSB0aGUgc2VuYXRlIGFnYWluc3QgQW50b255LCBhbmQgYWZ0ZXIgZWplY3RpbmcgaGlzIHJpdmFsIGZyb20gSXRhbHksIHdhcyBoaW1zZWxmIG5vdyBhbiBvYmplY3Qgb2YgZmVhciwgc29saWNpdGluZyB0aGUgY29uc3Vsc2hpcCBpbGxlZ2FsbHksIGFuZCBtYWludGFpbmluZyBsYXJnZSBhcm1pZXMsIG9mIHdoaWNoIHRoZSBjaXR5IGhhZCBubyBuZWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIHNhdyB0aGF0IGV2ZW4gdGhlIHNlbmF0ZSB3YXMgZGlzcGxlYXNlZCBhdCB0aGlzIGFuZCB0dXJuZWQgdGhlaXIgZXllcyBhYnJvYWQgdG8gQnJ1dHVzLCBjb25maXJtaW5nIGhpbSBpbiBjb21tYW5kIG9mIGhpcyBwcm92aW5jZXMgYnkgdGhlaXIgdm90ZSwgaGUgYmVjYW1lIGFmcmFpZC4gU28gaGUgc2VudCBhbmQgaW52aXRlZCBBbnRvbnkgdG8gYmVjb21lIGhpcyBmcmllbmQsIGFuZCB0aGVuLCBzdGF0aW9uaW5nIGhpcyBmb3JjZXMgYWJvdXQgdGhlIGNpdHksIHNlY3VyZWQgdGhlIGNvbnN1bHNoaXAsIGFsdGhvdWdoIGhlIHdhcyBzdGlsbCBhIG1lcmUgeW91dGgsIGJlaW5nIGluIGhpcyB0d2VudGlldGggeWVhciwgYXMgaGUgaGltc2VsZiBoYXMgc3RhdGVkIGluIGhpcyBDb21tZW50YXJpZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN0cmFpZ2h0d2F5LCB0aGVuLCBoZSBicm91Z2h0IGluZGljdG1lbnRzIGZvciBtdXJkZXIgYWdhaW5zdCBCcnV0dXMgYW5kIGhpcyBhc3NvY2lhdGVzLCBhY2N1c2luZyB0aGVtIG9mIGhhdmluZyBzbGFpbiB0aGUgZmlyc3QgbWFnaXN0cmF0ZSBvZiB0aGUgY2l0eSB3aXRob3V0IGEgdHJpYWwuIEhlIGFwcG9pbnRlZCBMdWNpdXMgQ29ybmlmaWNpdXMgdG8gYmUgcHJvc2VjdXRvciBvZiBCcnV0dXMsIGFuZCBNYXJjdXMgQWdyaXBwYSBvZiBDYXNzaXVzLiBBY2NvcmRpbmdseSwgdGhlaXIgY2FzZXMgd2VudCBieSBkZWZhdWx0LCB0aGUganVyb3JzIHZvdGluZyB1bmRlciBjb21wdWxzaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgd2hlbiB0aGUgaGVyYWxkIG9uIHRoZSByb3N0cmEgcHJvbm91bmNlZCB0aGUgY3VzdG9tYXJ5IHN1bW1vbnMgZm9yIEJydXR1cyB0byBhcHBlYXIsIHRoZSBtdWx0aXR1ZGUgZ3JvYW5lZCBhdWRpYmx5LCB3aGlsZSB0aGUgYmV0dGVyIGNsYXNzZXMgYm93ZWQgdGhlaXIgaGVhZHMgaW4gc2lsZW5jZTsgYW5kIHRoYXQgUHVibGl1cyBTaWxpY2l1cyB3YXMgc2VlbiB0byBidXJzdCBpbnRvIHRlYXJzLCBhbmQgd2FzIGZvciB0aGlzIHJlYXNvbiBzb29uIGFmdGVyd2FyZHMgcHV0IG9uIHRoZSBsaXN0IG9mIHRoZSBwcm9zY3JpYmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRoZSB0aHJlZSBtZW4sIE9jdGF2aXVzLCBBbnRvbnksIGFuZCBMZXBpZHVzLCB3ZXJlIHJlY29uY2lsZWQgd2l0aCBvbmUgYW5vdGhlciBkaXN0cmlidXRlZCB0aGUgcHJvdmluY2VzIGFtb25nIHRoZW1zZWx2ZXMsIGFuZCBzZW50ZW5jZWQgdG8gZGVhdGggYnkgcHJvc2NyaXB0aW9uIHR3byBodW5kcmVkIG1lbi4gQW1vbmcgdGhvc2UgcHV0IHRvIGRlYXRoIHdhcyBDaWNlcm8uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIHRpZGluZ3Mgb2YgdGhlc2UgZXZlbnRzIHdlcmUgYnJvdWdodCB0byBNYWNlZG9uaWEsIEJydXR1cyBmZWx0IGNvbXBlbGxlZCB0byB3cml0ZSB0byBIb3J0ZW5zaXVzIGNvbW1hbmRpbmcgaGltIHRvIGtpbGwgQ2FpdXMgQW50b25pdXMsIG9uIHRoZSBwbGVhIHRoYXQgaGUgd2FzIHRodXMgYXZlbmdpbmcgQ2ljZXJvIGFuZCBCcnV0dXMgQWxiaW51cywgb25lIG9mIHdob20gd2FzIGhpcyBmcmllbmQsIGFuZCB0aGUgb3RoZXIgaGlzIGtpbnNtYW4uIEZvciB0aGlzIHJlYXNvbiwgYXQgYSBsYXRlciB0aW1lLCB3aGVuIEFudG9ueSBoYWQgY2FwdHVyZWQgSG9ydGVuc2l1cyBhdCB0aGUgYmF0dGxlIG9mIFBoaWxpcHBpLCBoZSBzbGV3IGhpbSBvbiB0aGUgdG9tYiBvZiBoaXMgYnJvdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnJ1dHVzLCBob3dldmVyLCBzYXlzIHRoYXQgaGUgZmVsdCBtb3JlIHNoYW1lIGF0IHRoZSBjYXVzZSBvZiBDaWNlcm8ncyBkZWF0aCB0aGFuIGdyaWVmIGF0IHRoZSBldmVudCBpdHNlbGYsIGFuZCB0aHJldyB0aGUgYmxhbWUgdXBvbiBoaXMgZnJpZW5kcyBhdCBSb21lLiBIZSBzYWlkIHRoZWlyIHNlcnZpdHVkZSB3YXMgZHVlIHRvIHRoZW1zZWx2ZXMgcmF0aGVyIHRoYW4gdG8gdGhlaXIgdHlyYW50cywgYW5kIHRoYXQgdGhleSBjb25zZW50ZWQgdG8gYmUgZXlld2l0bmVzc2VzIG9mIHRoaW5ncyBvZiB3aGljaCB0aGV5IG91Z2h0IG5vdCBldmVuIHRvIGhlYXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gdGlkaW5ncyBvZiB0aGVzZSBldmVudHMgd2VyZSBicm91Z2h0IHRvIE1hY2Vkb25pYSwgQnJ1dHVzIGZlbHQgY29tcGVsbGVkIHRvIHdyaXRlIHRvIEhvcnRlbnNpdXMgY29tbWFuZGluZyBoaW0gdG8ga2lsbCBDYWl1cyBBbnRvbml1cywgb24gdGhlIHBsZWEgdGhhdCBoZSB3YXMgdGh1cyBhdmVuZ2luZyBDaWNlcm8gYW5kIEJydXR1cyBBbGJpbnVzLCBvbmUgb2Ygd2hvbSB3YXMgaGlzIGZyaWVuZCwgYW5kIHRoZSBvdGhlciBoaXMga2luc21hbi4gRm9yIHRoaXMgcmVhc29uLCBhdCBhIGxhdGVyIHRpbWUsIHdoZW4gQW50b255IGhhZCBjYXB0dXJlZCBIb3J0ZW5zaXVzIGF0IHRoZSBiYXR0bGUgb2YgUGhpbGlwcGksIGhlIHNsZXcgaGltIG9uIHRoZSB0b21iIG9mIGhpcyBicm90aGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJydXR1cywgaG93ZXZlciwgc2F5cyB0aGF0IGhlIGZlbHQgbW9yZSBzaGFtZSBhdCB0aGUgY2F1c2Ugb2YgQ2ljZXJvJ3MgZGVhdGggdGhhbiBncmllZiBhdCB0aGUgZXZlbnQgaXRzZWxmLCBhbmQgdGhyZXcgdGhlIGJsYW1lIHVwb24gaGlzIGZyaWVuZHMgYXQgUm9tZS4gSGUgc2FpZCB0aGVpciBzZXJ2aXR1ZGUgd2FzIGR1ZSB0byB0aGVtc2VsdmVzIHJhdGhlciB0aGFuIHRvIHRoZWlyIHR5cmFudHMsIGFuZCB0aGF0IHRoZXkgY29uc2VudGVkIHRvIGJlIGV5ZXdpdG5lc3NlcyBvZiB0aGluZ3Mgb2Ygd2hpY2ggdGhleSBvdWdodCBub3QgZXZlbiB0byBoZWFyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkhlIG5vdyBjcm9zc2VkIGludG8gQXNpYSB3aXRoIGhpcyBhcm15LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWJvdXQgdGhlIG1pZGRsZSBvZiA0MyBCLkMuPC9ub3RlPiB3aGljaCB3YXMgYWxyZWFkeSBhIHNwbGVuZGlkIG9uZSwgYW5kIGVxdWlwcGVkIGEgZmxlZXQgaW4gQml0aHluaWEgYW5kIGF0IEN5emljdXMsIHdoaWxlIGhlIGhpbXNlbGYsIHByb2NlZWRpbmcgYnkgbGFuZCwgc2V0dGxlZCB0aGUgYWZmYWlycyBvZiB0aGUgY2l0aWVzIGFuZCBnYXZlIGF1ZGllbmNlcyB0byB0aGUgcG90ZW50YXRlcyBvZiB0aGUgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhbHNvIHNlbnQgdG8gQ2Fzc2l1cyBpbiBTeXJpYSwgcmVjYWxsaW5nIGhpbSBmcm9tIGhpcyBleHBlZGl0aW9uIHRvIEVneXB0OyBmb3IgaXQgd2FzIG5vdCB0byB3aW4gZW1waXJlIGZvciB0aGVtc2VsdmVzLCBoZSBzYWlkLCBidXQgdG8gZ2l2ZSBsaWJlcnR5IHRvIHRoZWlyIGNvdW50cnksIHRoYXQgdGhleSB3ZXJlIHdhbmRlcmluZyBhYm91dCBhbmQgY29sbGVjdGluZyBmb3JjZXMgd2l0aCB3aGljaCB0byBvdmVydGhyb3cgdGhlIHR5cmFudHM7IHRoZXkgbXVzdCB0aGVyZWZvcmUga2VlcCB0aGVpciBwdXJwb3NlIGNhcmVmdWxseSBpbiBtaW5kIGFuZCBub3QgZ2V0IGZhciByZW1vdmVkIGZyb20gSXRhbHksIGJ1dCByYXRoZXIgaGFzdGVuIHRoaXRoZXIgYW5kIGdpdmUgYWlkIHRvIHRoZWlyIGNvdW50cnltZW4uCgkJCTwvcD4KICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BYm91dCB0aGUgbWlkZGxlIG9mIDQzIEIuQy48L25vdGU+IHdoaWNoIHdhcyBhbHJlYWR5IGEgc3BsZW5kaWQgb25lLCBhbmQgZXF1aXBwZWQgYSBmbGVldCBpbiBCaXRoeW5pYSBhbmQgYXQgQ3l6aWN1cywgd2hpbGUgaGUgaGltc2VsZiwgcHJvY2VlZGluZyBieSBsYW5kLCBzZXR0bGVkIHRoZSBhZmZhaXJzIG9mIHRoZSBjaXRpZXMgYW5kIGdhdmUgYXVkaWVuY2VzIHRvIHRoZSBwb3RlbnRhdGVzIG9mIHRoZSBjb3VudHJ5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gc2VudCB0byBDYXNzaXVzIGluIFN5cmlhLCByZWNhbGxpbmcgaGltIGZyb20gaGlzIGV4cGVkaXRpb24gdG8gRWd5cHQ7IGZvciBpdCB3YXMgbm90IHRvIHdpbiBlbXBpcmUgZm9yIHRoZW1zZWx2ZXMsIGhlIHNhaWQsIGJ1dCB0byBnaXZlIGxpYmVydHkgdG8gdGhlaXIgY291bnRyeSwgdGhhdCB0aGV5IHdlcmUgd2FuZGVyaW5nIGFib3V0IGFuZCBjb2xsZWN0aW5nIGZvcmNlcyB3aXRoIHdoaWNoIHRvIG92ZXJ0aHJvdyB0aGUgdHlyYW50czsgdGhleSBtdXN0IHRoZXJlZm9yZSBrZWVwIHRoZWlyIHB1cnBvc2UgY2FyZWZ1bGx5IGluIG1pbmQgYW5kIG5vdCBnZXQgZmFyIHJlbW92ZWQgZnJvbSBJdGFseSwgYnV0IHJhdGhlciBoYXN0ZW4gdGhpdGhlciBhbmQgZ2l2ZSBhaWQgdG8gdGhlaXIgY291bnRyeW1lbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q2Fzc2l1cyBvYmV5ZWQsIGFuZCBhcyBoZSB3YXMgcmV0dXJuaW5nLCBCcnV0dXMgd2VudCB0byBtZWV0IGhpbS4gVGhlaXIgaW50ZXJ2aWV3IGF0IFNteXJuYSB3YXMgdGhlIGZpcnN0IHRoZXkgaGFkIGhhZCBzaW5jZSB0aGV5IHBhcnRlZCBhdCBQaXJhZXVzIGFuZCBzZXQgb3V0LCB0aGUgb25lIGZvciBTeXJpYSwgdGhlIG90aGVyIGZvciBNYWNlZG9uaWEuIFRoZXkgdGhlcmVmb3JlIGRlcml2ZWQgZ3JlYXQgcGxlYXN1cmUgYW5kIGNvdXJhZ2UgZnJvbSB0aGUgZm9yY2VzIHdoaWNoIGVhY2ggbm93IGhhZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXkgaGFkIHNldCBvdXQgZnJvbSBJdGFseSBsaWtlIHRoZSBtb3N0IHdyZXRjaGVkIG9mIGV4aWxlcywgd2l0aG91dCBtb25leSwgd2l0aG91dCBhcm1zLCBoYXZpbmcgbm90IGEgc2hpcCBlcXVpcHBlZCB3aXRoIG9hcnMsIG5vdCBhIHNpbmdsZSBzb2xkaWVyLCBub3QgYSBjaXR5OyBidXQgYmVmb3JlIHZlcnkgbG9uZyB0aGV5IGhhZCBtZXQsIGhhdmluZyBhIGZsZWV0LCBhbiBhcm15IG9mIGZvb3QgYW5kIGhvcnNlLCBhbmQgbW9uZXksIHdoaWNoIG1hZGUgdGhlbSB3b3J0aHkgYW50YWdvbmlzdHMgaW4gdGhlIHN0cnVnZ2xlIGZvciBzdXByZW1hY3kgYXQgUm9tZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhc3NpdXMgb2JleWVkLCBhbmQgYXMgaGUgd2FzIHJldHVybmluZywgQnJ1dHVzIHdlbnQgdG8gbWVldCBoaW0uIFRoZWlyIGludGVydmlldyBhdCBTbXlybmEgd2FzIHRoZSBmaXJzdCB0aGV5IGhhZCBoYWQgc2luY2UgdGhleSBwYXJ0ZWQgYXQgUGlyYWV1cyBhbmQgc2V0IG91dCwgdGhlIG9uZSBmb3IgU3lyaWEsIHRoZSBvdGhlciBmb3IgTWFjZWRvbmlhLiBUaGV5IHRoZXJlZm9yZSBkZXJpdmVkIGdyZWF0IHBsZWFzdXJlIGFuZCBjb3VyYWdlIGZyb20gdGhlIGZvcmNlcyB3aGljaCBlYWNoIG5vdyBoYWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IGhhZCBzZXQgb3V0IGZyb20gSXRhbHkgbGlrZSB0aGUgbW9zdCB3cmV0Y2hlZCBvZiBleGlsZXMsIHdpdGhvdXQgbW9uZXksIHdpdGhvdXQgYXJtcywgaGF2aW5nIG5vdCBhIHNoaXAgZXF1aXBwZWQgd2l0aCBvYXJzLCBub3QgYSBzaW5nbGUgc29sZGllciwgbm90IGEgY2l0eTsgYnV0IGJlZm9yZSB2ZXJ5IGxvbmcgdGhleSBoYWQgbWV0LCBoYXZpbmcgYSBmbGVldCwgYW4gYXJteSBvZiBmb290IGFuZCBob3JzZSwgYW5kIG1vbmV5LCB3aGljaCBtYWRlIHRoZW0gd29ydGh5IGFudGFnb25pc3RzIGluIHRoZSBzdHJ1Z2dsZSBmb3Igc3VwcmVtYWN5IGF0IFJvbWUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2Fzc2l1cyB3YXMgZGVzaXJvdXMgdGhhdCBCcnV0dXMgYW5kIGhlIHNob3VsZCBoYXZlIGVxdWFsIGhvbm91ciwgYnV0IEJydXR1cyBmb3Jlc3RhbGxlZCB0aGlzIGJ5IGNvbWluZyB0byBoaW0gZ2VuZXJhbGx5LCBzaW5jZSBoZSB3YXMgYW4gb2xkZXIgbWFuIGFuZCB1bmFibGUgdG8gZW5kdXJlIHRoZSBzYW1lIGFtb3VudCBvZiBoYXJkc2hpcC4gQ2Fzc2l1cyBoYWQgdGhlIHJlcHV0YXRpb24gb2YgYmVpbmcgYW4gYWJsZSBzb2xkaWVyLCBidXQgaGFyc2ggaW4gaGlzIGFuZ2VyLCBhbmQgd2l0aCBhbiBhdXRob3JpdHkgYmFzZWQgbGFyZ2VseSBvbiBmZWFyLCBhbHRob3VnaCB3aXRoIGhpcyBmYW1pbGlhcnMgaGUgd2FzIHJhdGhlciBwcm9uZSB0byBsYXVnaHRlciBhbmQgZm9uZCBvZiBiYW50ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgdmlydHVlcyBvZiBCcnV0dXMsIGFzIHdlIGFyZSB0b2xkLCBtYWRlIGhpbSBiZWxvdmVkIGJ5IHRoZSBtdWx0aXR1ZGUsIGFkb3JlZCBieSBoaXMgZnJpZW5kcywgYWRtaXJlZCBieSB0aGUgbm9iaWxpdHksIGFuZCBub3QgaGF0ZWQgZXZlbiBieSBoaXMgZW5lbWllcy4gRm9yIGhlIHdhcyByZW1hcmthYmx5IGdlbnRsZSBhbmQgbGFyZ2UtbWluZGVkLCBmcmVlIGZyb20gYWxsIGFuZ2VyLCBwbGVhc3VyYWJsZSBpbmR1bGdlbmNlLCBhbmQgZ3JlZWQsIGFuZCBrZXB0IGhpcyBwdXJwb3NlIGVyZWN0IGFuZCB1bmJlbmRpbmcgaW4sIGRlZmVuY2Ugb2Ygd2hhdCB3YXMgaG9ub3VyYWJsZSBhbmQganVzdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBzdHJvbmdlc3QgcmVhc29uIGZvciB0aGUgZmF2b3VyIGFuZCBmYW1lIHdoaWNoIGhlIGFjaGlldmVkIHdhcyB0aGUgY29uZmlkZW5jZSBmZWx0IGluIGhpcyBwcmluY2lwbGVzLiBGb3Igbm8gb25lIGhhZCBleHBlY3RlZCB0aGF0IFBvbXBleSB0aGUgR3JlYXQsIGlmIGhlIG92ZXJ0aHJldyBDYWVzYXIsIHdvdWxkIGluc2lzdCBvbiBkaXNtaXNzaW5nIGhpcyBmb3JjZXMgaW4gb2JlZGllbmNlIHRvIHRoZSBsYXdzLCBidXQgYWxsIHRob3VnaHQgdGhhdCBoZSB3b3VsZCBjb250aW51ZSB0byByZXRhaW4gaGlzIHBvd2VyLCBhcHBlYXNpbmcgdGhlIHBlb3BsZSBieSB1c2luZyB0aGUgbmFtZSBvZiBjb25zdWxzaGlwIG9yIGRpY3RhdG9yc2hpcCBvciBzb21lIG90aGVyIGxlc3Mgb2Jub3hpb3VzIGZvcm0gb2YgZ292ZXJubWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBpdCB3YXMgdGhvdWdodCB0aGF0IENhc3NpdXMsIHZlaGVtZW50IGFuZCBwYXNzaW9uYXRlIG1hbiB0aGF0IGhlIHdhcywgYW5kIG9mdGVuIHN3ZXB0IGZyb20gdGhlIHBhdGggb2YganVzdGljZSBieSBoaXMgcGFzc2lvbiBmb3IgZ2Fpbiwgd2FzIGluY3VycmluZyB0aGUgcGVyaWxzIG9mIHdhcnMgYW5kIHdhbmRlcmluZ3MgcHJpbmNpcGFsbHkgdG8gZXN0YWJsaXNoIHNvbWUgZ3JlYXQgcG93ZXIgZm9yIGhpbXNlbGYsIGFuZCBub3QgbGliZXJ0eSBmb3IgaGlzIGNvdW50cnltZW4uIEZvciB0aGUgbWVuIG9mIGEgc3RpbGwgZWFybGllciB0aW1lIHRoYW4gUG9tcGV5IGFuZCBDYXNzaXVzLCBtZW4gbGlrZSBDaW5uYSBhbmQgTWFyaXVzIGFuZCBDYXJibywgbWFkZSB0aGVpciBjb3VudHJ5IHRoZSBib290eSBvciBwcml6ZSByb3VuZCB3aGljaCB0aGV5IGZvdWdodCwgYW5kIHRoZXkgYWxsIGJ1dCBjb25mZXNzZWQgdGhhdCB0aGV5IHdhZ2VkIHdhciB0byBlc3RhYmxpc2ggYSB0eXJhbm55LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQnJ1dHVzLCB3ZSBhcmUgdG9sZCwgd2FzIG5vdCBhY2N1c2VkIGV2ZW4gYnkgaGlzIGVuZW1pZXMgb2Ygc3VjaCBhIGRlcGFydHVyZSBmcm9tIGhpcyBwcmluY2lwbGVzOyBuYXksIEFudG9ueSBhdCBsZWFzdCwgaW4gdGhlIGhlYXJpbmcgb2YgbWFueSwgZGVjbGFyZWQgdGhhdCBpbiBoaXMgb3BpbmlvbiBCcnV0dXMgd2FzIHRoZSBvbmx5IGNvbnNwaXJhdG9yIGFnYWluc3QgQ2Flc2FyIHdobyB3YXMgaW1wZWxsZWQgYnkgdGhlIHNwbGVuZG91ciBhbmQgYnkgd2hhdCBzZWVtZWQgdG8gaGltIHRoZSBub2JpbGl0eSBvZiB0aGUgZW50ZXJwcmlzZSwgd2hlcmVhcyB0aGUgcmVzdCBiYW5kZWQgdG9nZXRoZXIgYWdhaW5zdCB0aGUgbWFuIGJlY2F1c2UgdGhleSBlbnZpZWQgYW5kIGhhdGVkIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlIEJydXR1cyByZWxpZWQgbm90IHNvIG11Y2ggb24gaGlzIGFybWllcyBhcyBvbiBoaXMgdmlydHVvdXMgY2F1c2UsIGFzIGlzIGNsZWFyIGZyb20gaGlzIGxldHRlcnMuIFdoZW4gaGUgd2FzIGFscmVhZHkgbmVhcmluZyB0aGUgcGVyaWxvdXMgY3Jpc2lzLCBoZSB3cm90ZSB0byBBdHRpY3VzIHRoYXQgaGlzIGNhdXNlIGhhZCB0aGUgZmFpcmVzdCBvdXRsb29rIHRoYXQgZm9ydHVuZSBjb3VsZCBiZXN0b3csIGZvciBoZSB3b3VsZCBlaXRoZXIgY29ucXVlciBhbmQgZ2l2ZSBsaWJlcnR5IHRvIHRoZSBSb21hbiBwZW9wbGUsIG9yIGRpZSBhbmQgYmUgZnJlZWQgZnJvbSBzbGF2ZXJ5OyBhbmQgdGhhdCBhbWlkIHRoZSBnZW5lcmFsIHNlY3VyaXR5IGFuZCBzYWZldHkgb2YgdGhlaXIgbG90IG9uZSB0aGluZyBvbmx5IHdhcyB1bmNlcnRhaW4sIG5hbWVseSwgd2hldGhlciB0aGV5IHdlcmUgdG8gbGl2ZSBhcyBmcmVlbWVuIG9yIGRpZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+SGUgc2F5cyBhbHNvIHRoYXQgTWFyayBBbnRvbnkgd2FzIHBheWluZyBhIGZpdHRpbmcgcGVuYWx0eSBmb3IgaGlzIGZvbGx5LCBzaW5jZSwgd2hlbiBpdCB3YXMgaW4gaGlzIHBvd2VyIHRvIGJlIG51bWJlcmVkIHdpdGggc3VjaCBtZW4gYXMgQnJ1dHVzIGFuZCBDYXNzaXVzIGFuZCBDYXRvLCBoZSBoYWQgZ2l2ZW4gaGltc2VsZiB0byBPY3Rhdml1cyBhcyBhIG1lcmUgYXBwZW5kYWdlOyBhbmQgdGhhdCBpZiBoZSBzaG91bGQgbm90IG5vdyBiZSBkZWZlYXRlZCB3aXRoIGhpbSwgaW4gYSBsaXR0bGUgd2hpbGUgaGUgd291bGQgYmUgZmlnaHRpbmcgaGltLiBIZXJlaW4sIHRoZW4sIGhlIHNlZW1zIHRvIGhhdmUgYmVlbiBhbiBleGNlbGxlbnQgcHJvcGhldC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBDYXNzaXVzIHdhcyBkZXNpcm91cyB0aGF0IEJydXR1cyBhbmQgaGUgc2hvdWxkIGhhdmUgZXF1YWwgaG9ub3VyLCBidXQgQnJ1dHVzIGZvcmVzdGFsbGVkIHRoaXMgYnkgY29taW5nIHRvIGhpbSBnZW5lcmFsbHksIHNpbmNlIGhlIHdhcyBhbiBvbGRlciBtYW4gYW5kIHVuYWJsZSB0byBlbmR1cmUgdGhlIHNhbWUgYW1vdW50IG9mIGhhcmRzaGlwLiBDYXNzaXVzIGhhZCB0aGUgcmVwdXRhdGlvbiBvZiBiZWluZyBhbiBhYmxlIHNvbGRpZXIsIGJ1dCBoYXJzaCBpbiBoaXMgYW5nZXIsIGFuZCB3aXRoIGFuIGF1dGhvcml0eSBiYXNlZCBsYXJnZWx5IG9uIGZlYXIsIGFsdGhvdWdoIHdpdGggaGlzIGZhbWlsaWFycyBoZSB3YXMgcmF0aGVyIHByb25lIHRvIGxhdWdodGVyIGFuZCBmb25kIG9mIGJhbnRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgdmlydHVlcyBvZiBCcnV0dXMsIGFzIHdlIGFyZSB0b2xkLCBtYWRlIGhpbSBiZWxvdmVkIGJ5IHRoZSBtdWx0aXR1ZGUsIGFkb3JlZCBieSBoaXMgZnJpZW5kcywgYWRtaXJlZCBieSB0aGUgbm9iaWxpdHksIGFuZCBub3QgaGF0ZWQgZXZlbiBieSBoaXMgZW5lbWllcy4gRm9yIGhlIHdhcyByZW1hcmthYmx5IGdlbnRsZSBhbmQgbGFyZ2UtbWluZGVkLCBmcmVlIGZyb20gYWxsIGFuZ2VyLCBwbGVhc3VyYWJsZSBpbmR1bGdlbmNlLCBhbmQgZ3JlZWQsIGFuZCBrZXB0IGhpcyBwdXJwb3NlIGVyZWN0IGFuZCB1bmJlbmRpbmcgaW4sIGRlZmVuY2Ugb2Ygd2hhdCB3YXMgaG9ub3VyYWJsZSBhbmQganVzdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgc3Ryb25nZXN0IHJlYXNvbiBmb3IgdGhlIGZhdm91ciBhbmQgZmFtZSB3aGljaCBoZSBhY2hpZXZlZCB3YXMgdGhlIGNvbmZpZGVuY2UgZmVsdCBpbiBoaXMgcHJpbmNpcGxlcy4gRm9yIG5vIG9uZSBoYWQgZXhwZWN0ZWQgdGhhdCBQb21wZXkgdGhlIEdyZWF0LCBpZiBoZSBvdmVydGhyZXcgQ2Flc2FyLCB3b3VsZCBpbnNpc3Qgb24gZGlzbWlzc2luZyBoaXMgZm9yY2VzIGluIG9iZWRpZW5jZSB0byB0aGUgbGF3cywgYnV0IGFsbCB0aG91Z2h0IHRoYXQgaGUgd291bGQgY29udGludWUgdG8gcmV0YWluIGhpcyBwb3dlciwgYXBwZWFzaW5nIHRoZSBwZW9wbGUgYnkgdXNpbmcgdGhlIG5hbWUgb2YgY29uc3Vsc2hpcCBvciBkaWN0YXRvcnNoaXAgb3Igc29tZSBvdGhlciBsZXNzIG9ibm94aW91cyBmb3JtIG9mIGdvdmVybm1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgaXQgd2FzIHRob3VnaHQgdGhhdCBDYXNzaXVzLCB2ZWhlbWVudCBhbmQgcGFzc2lvbmF0ZSBtYW4gdGhhdCBoZSB3YXMsIGFuZCBvZnRlbiBzd2VwdCBmcm9tIHRoZSBwYXRoIG9mIGp1c3RpY2UgYnkgaGlzIHBhc3Npb24gZm9yIGdhaW4sIHdhcyBpbmN1cnJpbmcgdGhlIHBlcmlscyBvZiB3YXJzIGFuZCB3YW5kZXJpbmdzIHByaW5jaXBhbGx5IHRvIGVzdGFibGlzaCBzb21lIGdyZWF0IHBvd2VyIGZvciBoaW1zZWxmLCBhbmQgbm90IGxpYmVydHkgZm9yIGhpcyBjb3VudHJ5bWVuLiBGb3IgdGhlIG1lbiBvZiBhIHN0aWxsIGVhcmxpZXIgdGltZSB0aGFuIFBvbXBleSBhbmQgQ2Fzc2l1cywgbWVuIGxpa2UgQ2lubmEgYW5kIE1hcml1cyBhbmQgQ2FyYm8sIG1hZGUgdGhlaXIgY291bnRyeSB0aGUgYm9vdHkgb3IgcHJpemUgcm91bmQgd2hpY2ggdGhleSBmb3VnaHQsIGFuZCB0aGV5IGFsbCBidXQgY29uZmVzc2VkIHRoYXQgdGhleSB3YWdlZCB3YXIgdG8gZXN0YWJsaXNoIGEgdHlyYW5ueS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBCcnV0dXMsIHdlIGFyZSB0b2xkLCB3YXMgbm90IGFjY3VzZWQgZXZlbiBieSBoaXMgZW5lbWllcyBvZiBzdWNoIGEgZGVwYXJ0dXJlIGZyb20gaGlzIHByaW5jaXBsZXM7IG5heSwgQW50b255IGF0IGxlYXN0LCBpbiB0aGUgaGVhcmluZyBvZiBtYW55LCBkZWNsYXJlZCB0aGF0IGluIGhpcyBvcGluaW9uIEJydXR1cyB3YXMgdGhlIG9ubHkgY29uc3BpcmF0b3IgYWdhaW5zdCBDYWVzYXIgd2hvIHdhcyBpbXBlbGxlZCBieSB0aGUgc3BsZW5kb3VyIGFuZCBieSB3aGF0IHNlZW1lZCB0byBoaW0gdGhlIG5vYmlsaXR5IG9mIHRoZSBlbnRlcnByaXNlLCB3aGVyZWFzIHRoZSByZXN0IGJhbmRlZCB0b2dldGhlciBhZ2FpbnN0IHRoZSBtYW4gYmVjYXVzZSB0aGV5IGVudmllZCBhbmQgaGF0ZWQgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSBCcnV0dXMgcmVsaWVkIG5vdCBzbyBtdWNoIG9uIGhpcyBhcm1pZXMgYXMgb24gaGlzIHZpcnR1b3VzIGNhdXNlLCBhcyBpcyBjbGVhciBmcm9tIGhpcyBsZXR0ZXJzLiBXaGVuIGhlIHdhcyBhbHJlYWR5IG5lYXJpbmcgdGhlIHBlcmlsb3VzIGNyaXNpcywgaGUgd3JvdGUgdG8gQXR0aWN1cyB0aGF0IGhpcyBjYXVzZSBoYWQgdGhlIGZhaXJlc3Qgb3V0bG9vayB0aGF0IGZvcnR1bmUgY291bGQgYmVzdG93LCBmb3IgaGUgd291bGQgZWl0aGVyIGNvbnF1ZXIgYW5kIGdpdmUgbGliZXJ0eSB0byB0aGUgUm9tYW4gcGVvcGxlLCBvciBkaWUgYW5kIGJlIGZyZWVkIGZyb20gc2xhdmVyeTsgYW5kIHRoYXQgYW1pZCB0aGUgZ2VuZXJhbCBzZWN1cml0eSBhbmQgc2FmZXR5IG9mIHRoZWlyIGxvdCBvbmUgdGhpbmcgb25seSB3YXMgdW5jZXJ0YWluLCBuYW1lbHksIHdoZXRoZXIgdGhleSB3ZXJlIHRvIGxpdmUgYXMgZnJlZW1lbiBvciBkaWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgYWxzbyB0aGF0IE1hcmsgQW50b255IHdhcyBwYXlpbmcgYSBmaXR0aW5nIHBlbmFsdHkgZm9yIGhpcyBmb2xseSwgc2luY2UsIHdoZW4gaXQgd2FzIGluIGhpcyBwb3dlciB0byBiZSBudW1iZXJlZCB3aXRoIHN1Y2ggbWVuIGFzIEJydXR1cyBhbmQgQ2Fzc2l1cyBhbmQgQ2F0bywgaGUgaGFkIGdpdmVuIGhpbXNlbGYgdG8gT2N0YXZpdXMgYXMgYSBtZXJlIGFwcGVuZGFnZTsgYW5kIHRoYXQgaWYgaGUgc2hvdWxkIG5vdCBub3cgYmUgZGVmZWF0ZWQgd2l0aCBoaW0sIGluIGEgbGl0dGxlIHdoaWxlIGhlIHdvdWxkIGJlIGZpZ2h0aW5nIGhpbS4gSGVyZWluLCB0aGVuLCBoZSBzZWVtcyB0byBoYXZlIGJlZW4gYW4gZXhjZWxsZW50IHByb3BoZXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIHdoZW4gdGhleSB3ZXJlIGluIFNteXJuYSwgQnJ1dHVzIGFza2VkIENhc3NpdXMgdG8gZ2l2ZSBoaW0gYSBwYXJ0IG9mIHRoZSBsYXJnZSB0cmVhc3VyZSB3aGljaCBoZSBoYWQgY29sbGVjdGVkLCBzaW5jZSBoZSBoYWQgZXhwZW5kZWQgd2hhdCBoZSBoYWQgaGltc2VsZiBpbiBidWlsZGluZyBhIGZsZWV0IGxhcmdlIGVub3VnaCB0byBnaXZlIHRoZW0gY29udHJvbCBvZiBhbGwgdGhlIE1lZGl0ZXJyYW5lYW4uIFRoZSBmcmllbmRzIG9mIENhc3NpdXMsIHRoZW4sIHRyaWVkIHRvIGRpc3N1YWRlIGhpbSBmcm9tIGdpdmluZyBhbnl0aGluZyB0byBCcnV0dXMsIGFyZ3VpbmcgdGhhdCBpdCB3YXMgbm90IHJpZ2h0IHRoYXQgd2hhdCBoZSB3YXMga2VlcGluZyBieSBoaXMgZnJ1Z2FsaXR5IGFuZCBnZXR0aW5nIHRvZ2V0aGVyIGF0IHRoZSBwcmljZSBvZiBtZW4ncyBoYXRyZWQgc2hvdWxkIGJlIHRha2VuIGJ5IEJydXR1cyBmb3IgdGhlIHdpbm5pbmcgb2YgcG9wdWxhciBmYXZvdXIgYW5kIHRoZSBncmF0aWZpY2F0aW9uIG9mIGhpcyBzb2xkaWVycy4gSG93ZXZlciwgQ2Fzc2l1cyBnYXZlIGhpbSBhIHRoaXJkIG9mIHRoZSB3aG9sZSBhbW91bnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSBwYXJ0ZWQgYWdhaW4gZm9yIHRoZWlyIHJlc3BlY3RpdmUgdW5kZXJ0YWtpbmdzLiBDYXNzaXVzIHRvb2sgUmhvZGVzLCBidXQgbWFuYWdlZCBtYXR0ZXJzIHRoZXJlIHdpdGggdW5kdWUgcmlnb3VyLCBhbmQgdGhhdCB0b28gdGhvdWdoIGhlIGhhZCByZXBsaWVkIHRvIHRob3NlIHdobyBoYWlsZWQgaGltLCB3aGVuIGhlIGVudGVyZWQgdGhlIGNpdHksIGFzIHRoZWlyIGxvcmQgYW5kIGtpbmcsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmVpdGhlciBsb3JkIG5vciBraW5nLCBidXQsIGNoYXN0aXNlciBhbmQgc2xheWVyIG9mIHlvdXIgbG9yZCBhbmQga2luZy48L3E+IEJydXR1cywgb24gaGlzIHBhcnQsIGRlbWFuZGVkIG1vbmV5IGFuZCBzb2xkaWVycyBmcm9tIHRoZSBMeWNpYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTmF1Y3JhdGVzLCB0aGUgcG9wdWxhciBsZWFkZXIsIHBlcnN1YWRlZCB0aGUgY2l0aWVzIHRvIHJldm9sdCwgYW5kIHRoZSBpbmhhYml0YW50cyBvY2N1cGllZCBjZXJ0YWluIGNvbW1hbmRpbmcgaGlsbHMgaW4gb3JkZXIgdG8gcHJldmVudCB0aGUgcGFzc2FnZSBvZiBCcnV0dXMuIEJydXR1cywgdGhlcmVmb3JlLCBpbiB0aGUgZmlyc3QgcGxhY2UsIHNlbnQgaG9yc2VtZW4gYWdhaW5zdCB0aGVtIHdoaWxlIHRoZXkgd2VyZSBhdCBicmVha2Zhc3QsIGFuZCB0aGVzZSBzbGV3IHNpeCBodW5kcmVkIG9mIHRoZW07IG5leHQsIGhlIHRvb2sgdGhlaXIgc3Ryb25naG9sZHMgYW5kIHZpbGxhZ2VzLCBidXQgZGlzbWlzc2VkIGFsbCBoaXMgY2FwdGl2ZXMgd2l0aG91dCByYW5zb20sIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgd2luIHRoZSBwZW9wbGUgb3ZlciBieSBraW5kbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIG9ic3RpbmF0ZSwgaG93ZXZlciwgZmVlZGluZyB0aGVpciBhbmdlciB1cG9uIHRoZWlyIGluanVyaWVzLCBhbmQgZGVzcGlzaW5nIGhpcyBjbGVtZW5jeSBhbmQga2luZG5lc3MsIHVudGlsIGhlIGRyb3ZlIHRoZSBtb3N0IHdhcmxpa2Ugb2YgdGhlbSBpbnRvIFhhbnRodXMgYW5kIGxhaWQgc2llZ2UgdG8gdGhlIGNpdHkuIFRoZXkgdHJpZWQgdG8gZXNjYXBlIGJ5IHN3aW1taW5nIHVuZGVyIHRoZSBzdXJmYWNlIG9mIHRoZSByaXZlciB3aGljaCBmbG93ZWQgcGFzdCB0aGUgY2l0eS4gQnV0IHRoZXkgd2VyZSBjYXVnaHQgaW4gbmV0cyB3aGljaCB3ZXJlIGxldCBkb3duIGRlZXAgYWNyb3NzIHRoZSBjaGFubmVsOyB0aGUgdG9wcyBvZiB0aGVzZSBoYWQgYmVsbHMgYXR0YWNoZWQgdG8gdGhlbSB3aGljaCBpbmRpY2F0ZWQgYXQgb25jZSB3aGVuIGFueSBvbmUgd2FzIGVudGFuZ2xlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgWGFudGhpYW5zIG1hZGUgYSBzYWxseSBieSBuaWdodCBhbmQgc2V0IGZpcmUgdG8gc29tZSBvZiB0aGUgc2llZ2UtIGVuZ2luZXMsIGJ1dCB0aGV5IHdlcmUgcGVyY2VpdmVkIGJ5IHRoZSBSb21hbnMgYW5kIGRyaXZlbiBiYWNrIHRvIHRoZWlyIHdhbGxzOyBhbmQgd2hlbiBhIGJyaXNrIHdpbmQgZmFubmVkIHRoZSBmbGFtZXMgYmFjayB0b3dhcmRzIHRoZSBiYXR0bGVtZW50cyBhbmQgc29tZSBvZiB0aGUgYWRqb2luaW5nIGhvdXNlcyB0b29rIGZpcmUsIEJydXR1cywgZmVhcmluZyBmb3IgdGhlIHNhZmV0eSBvZiB0aGUgY2l0eSwgb3JkZXJlZCBoaXMgbWVuIHRvIGFzc2lzdCBpbiBwdXR0aW5nIG91dCB0aGUgZmlyZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHRpbWUgd2hlbiB0aGV5IHdlcmUgaW4gU215cm5hLCBCcnV0dXMgYXNrZWQgQ2Fzc2l1cyB0byBnaXZlIGhpbSBhIHBhcnQgb2YgdGhlIGxhcmdlIHRyZWFzdXJlIHdoaWNoIGhlIGhhZCBjb2xsZWN0ZWQsIHNpbmNlIGhlIGhhZCBleHBlbmRlZCB3aGF0IGhlIGhhZCBoaW1zZWxmIGluIGJ1aWxkaW5nIGEgZmxlZXQgbGFyZ2UgZW5vdWdoIHRvIGdpdmUgdGhlbSBjb250cm9sIG9mIGFsbCB0aGUgTWVkaXRlcnJhbmVhbi4gVGhlIGZyaWVuZHMgb2YgQ2Fzc2l1cywgdGhlbiwgdHJpZWQgdG8gZGlzc3VhZGUgaGltIGZyb20gZ2l2aW5nIGFueXRoaW5nIHRvIEJydXR1cywgYXJndWluZyB0aGF0IGl0IHdhcyBub3QgcmlnaHQgdGhhdCB3aGF0IGhlIHdhcyBrZWVwaW5nIGJ5IGhpcyBmcnVnYWxpdHkgYW5kIGdldHRpbmcgdG9nZXRoZXIgYXQgdGhlIHByaWNlIG9mIG1lbidzIGhhdHJlZCBzaG91bGQgYmUgdGFrZW4gYnkgQnJ1dHVzIGZvciB0aGUgd2lubmluZyBvZiBwb3B1bGFyIGZhdm91ciBhbmQgdGhlIGdyYXRpZmljYXRpb24gb2YgaGlzIHNvbGRpZXJzLiBIb3dldmVyLCBDYXNzaXVzIGdhdmUgaGltIGEgdGhpcmQgb2YgdGhlIHdob2xlIGFtb3VudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhleSBwYXJ0ZWQgYWdhaW4gZm9yIHRoZWlyIHJlc3BlY3RpdmUgdW5kZXJ0YWtpbmdzLiBDYXNzaXVzIHRvb2sgUmhvZGVzLCBidXQgbWFuYWdlZCBtYXR0ZXJzIHRoZXJlIHdpdGggdW5kdWUgcmlnb3VyLCBhbmQgdGhhdCB0b28gdGhvdWdoIGhlIGhhZCByZXBsaWVkIHRvIHRob3NlIHdobyBoYWlsZWQgaGltLCB3aGVuIGhlIGVudGVyZWQgdGhlIGNpdHksIGFzIHRoZWlyIGxvcmQgYW5kIGtpbmcsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OZWl0aGVyIGxvcmQgbm9yIGtpbmcsIGJ1dCwgY2hhc3Rpc2VyIGFuZCBzbGF5ZXIgb2YgeW91ciBsb3JkIGFuZCBraW5nLjwvcT4gQnJ1dHVzLCBvbiBoaXMgcGFydCwgZGVtYW5kZWQgbW9uZXkgYW5kIHNvbGRpZXJzIGZyb20gdGhlIEx5Y2lhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBOYXVjcmF0ZXMsIHRoZSBwb3B1bGFyIGxlYWRlciwgcGVyc3VhZGVkIHRoZSBjaXRpZXMgdG8gcmV2b2x0LCBhbmQgdGhlIGluaGFiaXRhbnRzIG9jY3VwaWVkIGNlcnRhaW4gY29tbWFuZGluZyBoaWxscyBpbiBvcmRlciB0byBwcmV2ZW50IHRoZSBwYXNzYWdlIG9mIEJydXR1cy4gQnJ1dHVzLCB0aGVyZWZvcmUsIGluIHRoZSBmaXJzdCBwbGFjZSwgc2VudCBob3JzZW1lbiBhZ2FpbnN0IHRoZW0gd2hpbGUgdGhleSB3ZXJlIGF0IGJyZWFrZmFzdCwgYW5kIHRoZXNlIHNsZXcgc2l4IGh1bmRyZWQgb2YgdGhlbTsgbmV4dCwgaGUgdG9vayB0aGVpciBzdHJvbmdob2xkcyBhbmQgdmlsbGFnZXMsIGJ1dCBkaXNtaXNzZWQgYWxsIGhpcyBjYXB0aXZlcyB3aXRob3V0IHJhbnNvbSwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCB3aW4gdGhlIHBlb3BsZSBvdmVyIGJ5IGtpbmRuZXNzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBvYnN0aW5hdGUsIGhvd2V2ZXIsIGZlZWRpbmcgdGhlaXIgYW5nZXIgdXBvbiB0aGVpciBpbmp1cmllcywgYW5kIGRlc3Bpc2luZyBoaXMgY2xlbWVuY3kgYW5kIGtpbmRuZXNzLCB1bnRpbCBoZSBkcm92ZSB0aGUgbW9zdCB3YXJsaWtlIG9mIHRoZW0gaW50byBYYW50aHVzIGFuZCBsYWlkIHNpZWdlIHRvIHRoZSBjaXR5LiBUaGV5IHRyaWVkIHRvIGVzY2FwZSBieSBzd2ltbWluZyB1bmRlciB0aGUgc3VyZmFjZSBvZiB0aGUgcml2ZXIgd2hpY2ggZmxvd2VkIHBhc3QgdGhlIGNpdHkuIEJ1dCB0aGV5IHdlcmUgY2F1Z2h0IGluIG5ldHMgd2hpY2ggd2VyZSBsZXQgZG93biBkZWVwIGFjcm9zcyB0aGUgY2hhbm5lbDsgdGhlIHRvcHMgb2YgdGhlc2UgaGFkIGJlbGxzIGF0dGFjaGVkIHRvIHRoZW0gd2hpY2ggaW5kaWNhdGVkIGF0IG9uY2Ugd2hlbiBhbnkgb25lIHdhcyBlbnRhbmdsZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIFhhbnRoaWFucyBtYWRlIGEgc2FsbHkgYnkgbmlnaHQgYW5kIHNldCBmaXJlIHRvIHNvbWUgb2YgdGhlIHNpZWdlLSBlbmdpbmVzLCBidXQgdGhleSB3ZXJlIHBlcmNlaXZlZCBieSB0aGUgUm9tYW5zIGFuZCBkcml2ZW4gYmFjayB0byB0aGVpciB3YWxsczsgYW5kIHdoZW4gYSBicmlzayB3aW5kIGZhbm5lZCB0aGUgZmxhbWVzIGJhY2sgdG93YXJkcyB0aGUgYmF0dGxlbWVudHMgYW5kIHNvbWUgb2YgdGhlIGFkam9pbmluZyBob3VzZXMgdG9vayBmaXJlLCBCcnV0dXMsIGZlYXJpbmcgZm9yIHRoZSBzYWZldHkgb2YgdGhlIGNpdHksIG9yZGVyZWQgaGlzIG1lbiB0byBhc3Npc3QgaW4gcHV0dGluZyBvdXQgdGhlIGZpcmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgTHljaWFucyB3ZXJlIHN1ZGRlbmx5IHBvc3Nlc3NlZCBieSBhIGRyZWFkZnVsIGFuZCBpbmRlc2NyaWJhYmxlIGltcHVsc2UgdG8gbWFkbmVzcywgd2hpY2ggY2FuIGJlIGxpa2VuZWQgYmVzdCB0byBhIHBhc3Npb24gZm9yIGRlYXRoLiBBdCBhbnkgcmF0ZSwgYWxsIGFnZXMgb2YgdGhlbSwgZnJlZW1lbiBhbmQgc2xhdmVzIHdpdGggdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCBzaG90IG1pc3NpbGVzIGZyb20gdGhlIHdhbGxzIGF0IHRoZSBlbmVteSB3aG8gd2VyZSBoZWxwaW5nIHRoZW0gdG8gY29tYmF0IHRoZSBmbGFtZXMsIGFuZCB3aXRoIHRoZWlyIG93biBoYW5kcyBicm91Z2h0IHVwIHJlZWRzIGFuZCB3b29kIGFuZCBhbGwgbWFubmVyIG9mIGNvbWJ1c3RpYmxlcywgYW5kIHNvIHNwcmVhZCB0aGUgZmlyZSBvdmVyIHRoZSBjaXR5LCBmZWVkaW5nIGl0IHdpdGggYWxsIHNvcnRzIG9mIG1hdGVyaWFsIGFuZCBpbmNyZWFzaW5nIGl0cyBzdHJlbmd0aCBhbmQgZnVyeSBpbiBldmVyeSB3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGZsYW1lcyBoYWQgZGFydGVkIGZvcnRoIGFuZCBlbmNpcmNsZWQgdGhlIGNpdHkgb24gYWxsIHNpZGVzLCBhbmQgYmxhemVkIG91dCBtaWdodGlseSwgQnJ1dHVzLCBkaXN0cmVzc2VkIGF0IHdoYXQgd2FzIGdvaW5nIG9uLCByb2RlIHJvdW5kIG91dHNpZGUgdGhlIGNpdHkgaW4gaGlzIGVhZ2VybmVzcyB0byBoZWxwLCBhbmQgd2l0aCBvdXRzdHJldGNoZWQgaGFuZHMgYmVnZ2VkIHRoZSBYYW50aGlhbnMgdG8gc3BhcmUgYW5kIHNhdmUgdGhlaXIgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm8gb25lIGhlZWRlZCBoaW0sIGhvd2V2ZXIsIGJ1dCBhbGwgc291Z2h0IGluIGV2ZXJ5IHdheSB0byBkZXN0cm95IHRoZW1zZWx2ZXMsIG1lbiBhbmQgd29tZW4gYWxpa2U7IG5heSwgZXZlbiB0aGUgbGl0dGxlIGNoaWxkcmVuIHdpdGggc2hvdXRzIGFuZCBzaHJpZWtzIGVpdGhlciBsZWFwZWQgaW50byB0aGUgZmlyZSwgb3IgdGhyZXcgdGhlbXNlbHZlcyBoZWFkbG9uZyBmcm9tIHRoZSB3YWxscywgb3IgY2FzdCB0aGVtc2VsdmVzIGJlbmVhdGggdGhlaXIgZmF0aGVycycgc3dvcmRzLCBiYXJpbmcgdGhlaXIgdGhyb2F0cyBhbmQgYmVnZ2luZyB0byBiZSBzbWl0dGVuLiBBZnRlciB0aGUgY2l0eSBoYWQgYmVlbiB0aHVzIGRlc3Ryb3llZCwgYSB3b21hbiB3YXMgc2VlbiBkYW5nbGluZyBpbiBhIG5vb3NlOyBzaGUgaGFkIGEgZGVhZCBjaGlsZCBmYXN0ZW5lZCB0byBoZXIgbmVjaywgYW5kIHdpdGggYSBibGF6aW5nIHRvcmNoIHdhcyB0cnlpbmcgdG8gc2V0IGZpcmUgdG8gaGVyIGR3ZWxsaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0cmFnaWMgd2FzIHRoZSBzcGVjdGFjbGUgdGhhdCBCcnV0dXMgY291bGQgbm90IGJlYXIgdG8gc2VlIGl0LCBhbmQgYnVyc3QgaW50byB0ZWFycyBvbiBoZWFyaW5nIG9mIGl0OyBoZSBhbHNvIHByb2NsYWltZWQgYSBwcml6ZSBmb3IgYW55IHNvbGRpZXIgd2hvIHNob3VsZCBzdWNjZWVkIGluIHNhdmluZyB0aGUgbGlmZSBvZiBhIEx5Y2lhbi4gQnV0IHRoZXJlIHdlcmUgb25seSBhIGh1bmRyZWQgYW5kIGZpZnR5LCB3ZSBhcmUgdG9sZCwgd2hvIGRpZCBub3QgZXNjYXBlIHN1Y2ggcHJlc2VydmF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGVuIHRoZSBYYW50aGlhbnMsIGFmdGVyIGxvbmcgbGFwc2Ugb2YgdGltZSwgYXMgdGhvdWdoIGZ1bGZpbGxpbmcgYSBwZXJpb2Qgc2V0IGJ5IGZhdGUgZm9yIHRoZWlyIGRlc3RydWN0aW9uLCBoYWQgdGhlIGJvbGRuZXNzIHRvIHJlbmV3IHRoZSBjYWxhbWl0eSBvZiB0aGVpciBhbmNlc3RvcnM7IGZvciB0aGVzZSB0b28sIGluIHRoZSB0aW1lIG9mIHRoZSBQZXJzaWFuIHdhcnMsIGhhZCBsaWtld2lzZSBidXJuZWQgZG93biB0aGVpciBjaXR5IGFuZCBkZXN0cm95ZWQgdGhlbXNlbHZlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhkdC4gMS4xNzYiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgaS4gMTc2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBMeWNpYW5zIHdlcmUgc3VkZGVubHkgcG9zc2Vzc2VkIGJ5IGEgZHJlYWRmdWwgYW5kIGluZGVzY3JpYmFibGUgaW1wdWxzZSB0byBtYWRuZXNzLCB3aGljaCBjYW4gYmUgbGlrZW5lZCBiZXN0IHRvIGEgcGFzc2lvbiBmb3IgZGVhdGguIEF0IGFueSByYXRlLCBhbGwgYWdlcyBvZiB0aGVtLCBmcmVlbWVuIGFuZCBzbGF2ZXMgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIHNob3QgbWlzc2lsZXMgZnJvbSB0aGUgd2FsbHMgYXQgdGhlIGVuZW15IHdobyB3ZXJlIGhlbHBpbmcgdGhlbSB0byBjb21iYXQgdGhlIGZsYW1lcywgYW5kIHdpdGggdGhlaXIgb3duIGhhbmRzIGJyb3VnaHQgdXAgcmVlZHMgYW5kIHdvb2QgYW5kIGFsbCBtYW5uZXIgb2YgY29tYnVzdGlibGVzLCBhbmQgc28gc3ByZWFkIHRoZSBmaXJlIG92ZXIgdGhlIGNpdHksIGZlZWRpbmcgaXQgd2l0aCBhbGwgc29ydHMgb2YgbWF0ZXJpYWwgYW5kIGluY3JlYXNpbmcgaXRzIHN0cmVuZ3RoIGFuZCBmdXJ5IGluIGV2ZXJ5IHdheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGZsYW1lcyBoYWQgZGFydGVkIGZvcnRoIGFuZCBlbmNpcmNsZWQgdGhlIGNpdHkgb24gYWxsIHNpZGVzLCBhbmQgYmxhemVkIG91dCBtaWdodGlseSwgQnJ1dHVzLCBkaXN0cmVzc2VkIGF0IHdoYXQgd2FzIGdvaW5nIG9uLCByb2RlIHJvdW5kIG91dHNpZGUgdGhlIGNpdHkgaW4gaGlzIGVhZ2VybmVzcyB0byBoZWxwLCBhbmQgd2l0aCBvdXRzdHJldGNoZWQgaGFuZHMgYmVnZ2VkIHRoZSBYYW50aGlhbnMgdG8gc3BhcmUgYW5kIHNhdmUgdGhlaXIgY2l0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vIG9uZSBoZWVkZWQgaGltLCBob3dldmVyLCBidXQgYWxsIHNvdWdodCBpbiBldmVyeSB3YXkgdG8gZGVzdHJveSB0aGVtc2VsdmVzLCBtZW4gYW5kIHdvbWVuIGFsaWtlOyBuYXksIGV2ZW4gdGhlIGxpdHRsZSBjaGlsZHJlbiB3aXRoIHNob3V0cyBhbmQgc2hyaWVrcyBlaXRoZXIgbGVhcGVkIGludG8gdGhlIGZpcmUsIG9yIHRocmV3IHRoZW1zZWx2ZXMgaGVhZGxvbmcgZnJvbSB0aGUgd2FsbHMsIG9yIGNhc3QgdGhlbXNlbHZlcyBiZW5lYXRoIHRoZWlyIGZhdGhlcnMnIHN3b3JkcywgYmFyaW5nIHRoZWlyIHRocm9hdHMgYW5kIGJlZ2dpbmcgdG8gYmUgc21pdHRlbi4gQWZ0ZXIgdGhlIGNpdHkgaGFkIGJlZW4gdGh1cyBkZXN0cm95ZWQsIGEgd29tYW4gd2FzIHNlZW4gZGFuZ2xpbmcgaW4gYSBub29zZTsgc2hlIGhhZCBhIGRlYWQgY2hpbGQgZmFzdGVuZWQgdG8gaGVyIG5lY2ssIGFuZCB3aXRoIGEgYmxhemluZyB0b3JjaCB3YXMgdHJ5aW5nIHRvIHNldCBmaXJlIHRvIGhlciBkd2VsbGluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRyYWdpYyB3YXMgdGhlIHNwZWN0YWNsZSB0aGF0IEJydXR1cyBjb3VsZCBub3QgYmVhciB0byBzZWUgaXQsIGFuZCBidXJzdCBpbnRvIHRlYXJzIG9uIGhlYXJpbmcgb2YgaXQ7IGhlIGFsc28gcHJvY2xhaW1lZCBhIHByaXplIGZvciBhbnkgc29sZGllciB3aG8gc2hvdWxkIHN1Y2NlZWQgaW4gc2F2aW5nIHRoZSBsaWZlIG9mIGEgTHljaWFuLiBCdXQgdGhlcmUgd2VyZSBvbmx5IGEgaHVuZHJlZCBhbmQgZmlmdHksIHdlIGFyZSB0b2xkLCB3aG8gZGlkIG5vdCBlc2NhcGUgc3VjaCBwcmVzZXJ2YXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gdGhlIFhhbnRoaWFucywgYWZ0ZXIgbG9uZyBsYXBzZSBvZiB0aW1lLCBhcyB0aG91Z2ggZnVsZmlsbGluZyBhIHBlcmlvZCBzZXQgYnkgZmF0ZSBmb3IgdGhlaXIgZGVzdHJ1Y3Rpb24sIGhhZCB0aGUgYm9sZG5lc3MgdG8gcmVuZXcgdGhlIGNhbGFtaXR5IG9mIHRoZWlyIGFuY2VzdG9yczsgZm9yIHRoZXNlIHRvbywgaW4gdGhlIHRpbWUgb2YgdGhlIFBlcnNpYW4gd2FycywgaGFkIGxpa2V3aXNlIGJ1cm5lZCBkb3duIHRoZWlyIGNpdHkgYW5kIGRlc3Ryb3llZCB0aGVtc2VsdmVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gMS4xNzYiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgaS4gMTc2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDEuMTc2IiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIGkuIDE3Ni48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQnJ1dHVzIHNhdyB0aGF0IHRoZSBjaXR5IG9mIFBhdGFyYSB3YXMgaG9sZGluZyBvdXQgc3Ryb25nbHkgYWdhaW5zdCBoaW0sIGhlIGhlc2l0YXRlZCB0byBhdHRhY2sgaXQsIGFuZCB3YXMgaW4gcGVycGxleGl0eSwgZmVhcmluZyB0aGF0IGl0IHdvdWxkIGJlIGFmZmxpY3RlZCB3aXRoIHRoZSBzYW1lIG1hZG5lc3M7IGJ1dCBhcyBoZSBoZWxkIHNvbWUgb2YgaXRzIHdvbWVuIHByaXNvbmVycyBvZiB3YXIsIGhlIHJlbGVhc2VkIHRoZW0gd2l0aG91dCByYW5zb20uIFRoZXkgd2VyZSB0aGUgd2l2ZXMgYW5kIGRhdWdodGVycyBvZiBwcm9taW5lbnQgbWVuLCBhbmQgYnkgcmVoZWFyc2luZyB0aGUgcHJhaXNlcyBvZiBCcnV0dXMsIGNhbGxpbmcgaGltIGEgbWFuIG9mIHRoZSBncmVhdGVzdCBtb2RlcmF0aW9uIGFuZCBqdXN0aWNlLCB0aGV5IHBlcnN1YWRlZCB0aGVtIHRvIHlpZWxkIGFuZCBzdXJyZW5kZXIgdGhlaXIgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2VxdWVudGx5IGFsbCB0aGUgcmVzdCBvZiB0aGUgTHljaWFucyBjYW1lIGFuZCBlbnRydXN0ZWQgdGhlbXNlbHZlcyB0byBoaW0sIGFuZCBmb3VuZCB0aGF0IGhpcyBnb29kbmVzcyBhbmQga2luZG5lc3MgZXhjZWVkZWQgdGhlaXIgaG9wZXMuIEZvciB3aGVyZWFzIENhc3NpdXMsIGFib3V0IHRoZSBzYW1lIHRpbWUsIGNvbXBlbGxlZCB0aGUgUmhvZGlhbnMgaW5kaXZpZHVhbGx5IHRvIHBheSBpbiB0byBoaW0gYWxsIHRoZSBnb2xkIGFuZCBzaWx2ZXIgdGhleSBwb3NzZXNzZWQgKHRodXMgYWNjdW11bGF0aW5nIGFib3V0IGVpZ2h0IGh1bmRyZWQgdGFsZW50cyksIGFuZCBmaW5lZCB0aGUgY2l0eSBhcyBhIHdob2xlIGZpdmUgaHVuZHJlZCB0YWxlbnRzIG1vcmUsIEJydXR1cyBleGFjdGVkIG9ubHkgYSBodW5kcmVkIGFuZCBmaWZ0eSB0YWxlbnRzIGZyb20gdGhlIEx5Y2lhbnMsIGFuZCwgd2l0aG91dCBkb2luZyB0aGVtIGFueSBvdGhlciBpbmp1cnksIHNldCBvdXQgd2l0aCBoaXMgYXJteSBmb3IgSW9uaWEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBCcnV0dXMgc2F3IHRoYXQgdGhlIGNpdHkgb2YgUGF0YXJhIHdhcyBob2xkaW5nIG91dCBzdHJvbmdseSBhZ2FpbnN0IGhpbSwgaGUgaGVzaXRhdGVkIHRvIGF0dGFjayBpdCwgYW5kIHdhcyBpbiBwZXJwbGV4aXR5LCBmZWFyaW5nIHRoYXQgaXQgd291bGQgYmUgYWZmbGljdGVkIHdpdGggdGhlIHNhbWUgbWFkbmVzczsgYnV0IGFzIGhlIGhlbGQgc29tZSBvZiBpdHMgd29tZW4gcHJpc29uZXJzIG9mIHdhciwgaGUgcmVsZWFzZWQgdGhlbSB3aXRob3V0IHJhbnNvbS4gVGhleSB3ZXJlIHRoZSB3aXZlcyBhbmQgZGF1Z2h0ZXJzIG9mIHByb21pbmVudCBtZW4sIGFuZCBieSByZWhlYXJzaW5nIHRoZSBwcmFpc2VzIG9mIEJydXR1cywgY2FsbGluZyBoaW0gYSBtYW4gb2YgdGhlIGdyZWF0ZXN0IG1vZGVyYXRpb24gYW5kIGp1c3RpY2UsIHRoZXkgcGVyc3VhZGVkIHRoZW0gdG8geWllbGQgYW5kIHN1cnJlbmRlciB0aGVpciBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNvbnNlcXVlbnRseSBhbGwgdGhlIHJlc3Qgb2YgdGhlIEx5Y2lhbnMgY2FtZSBhbmQgZW50cnVzdGVkIHRoZW1zZWx2ZXMgdG8gaGltLCBhbmQgZm91bmQgdGhhdCBoaXMgZ29vZG5lc3MgYW5kIGtpbmRuZXNzIGV4Y2VlZGVkIHRoZWlyIGhvcGVzLiBGb3Igd2hlcmVhcyBDYXNzaXVzLCBhYm91dCB0aGUgc2FtZSB0aW1lLCBjb21wZWxsZWQgdGhlIFJob2RpYW5zIGluZGl2aWR1YWxseSB0byBwYXkgaW4gdG8gaGltIGFsbCB0aGUgZ29sZCBhbmQgc2lsdmVyIHRoZXkgcG9zc2Vzc2VkICh0aHVzIGFjY3VtdWxhdGluZyBhYm91dCBlaWdodCBodW5kcmVkIHRhbGVudHMpLCBhbmQgZmluZWQgdGhlIGNpdHkgYXMgYSB3aG9sZSBmaXZlIGh1bmRyZWQgdGFsZW50cyBtb3JlLCBCcnV0dXMgZXhhY3RlZCBvbmx5IGEgaHVuZHJlZCBhbmQgZmlmdHkgdGFsZW50cyBmcm9tIHRoZSBMeWNpYW5zLCBhbmQsIHdpdGhvdXQgZG9pbmcgdGhlbSBhbnkgb3RoZXIgaW5qdXJ5LCBzZXQgb3V0IHdpdGggaGlzIGFybXkgZm9yIElvbmlhLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IHdlcmUgaGlzIG1lbW9yYWJsZSBhY2hpZXZlbWVudHMgaW4gbWV0aW5nIG91dCByZXdhcmRzIG9yIHB1bmlzaG1lbnRzIHRvIHRob3NlIHdobyBkZXNlcnZlZCB0aGVtLCBidXQgSSBzaGFsbCBoZXJlIGRlc2NyaWJlIG9ubHkgdGhhdCBpbiB3aGljaCBib3RoIGhlIGhpbXNlbGYgYW5kIHRoZSBjaGllZiBtZW4gb2YgUm9tZSB0b29rIGVzcGVjaWFsIHBsZWFzdXJlLiBXaGVuIFBvbXBleSB0aGUgR3JlYXQsIGFmdGVyIGhlIGhhZCBiZWVuIHN0cmlwcGVkIG9mIGhpcyBncmVhdCBwb3dlciBieSBDYWVzYXIsIHB1dCBpbiBhcyBhIGZ1Z2l0aXZlIGF0IFBlbHVzaXVtIGluIEVneXB0LCB0aGUgZ3VhcmRpYW5zIG9mIHRoZSBib3kga2luZyB3ZXJlIGhvbGRpbmcgYSBjb3VuY2lsIHdpdGggdGhlaXIgZnJpZW5kcywgYXQgd2hpY2ggb3BpbmlvbnMgZGlmZmVyZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgdGhvdWdodCB0aGV5IHNob3VsZCByZWNlaXZlIFBvbXBleSwgb3RoZXJzIHRoYXQgdGhleSBzaG91bGQgcmVwdWxzZSBoaW0gZnJvbSBFZ3lwdC4gQnV0IGEgY2VydGFpbiBUaGVvZG90dXMsIG9mIENoaW9zLCB3aG8gd2FzIGF0dGFjaGVkIHRvIHRoZSBraW5nIGFzIGEgcGFpZCB0ZWFjaGVyIG9mIHJoZXRvcmljLCBhbmQgd2FzIGF0IHRoaXMgdGltZSBkZWVtZWQgd29ydGh5IG9mIGEgcGxhY2UgaW4gdGhlIGNvdW5jaWwgZm9yIGxhY2sgb2YgYmV0dGVyIG1lbiwgZGVjbGFyZWQgdGhhdCBib3RoIHdlcmUgd3JvbmcsIGJvdGggdGhvc2Ugd2hvIHdvdWxkIGFkbWl0IGFuZCB0aG9zZSB3aG8gd291bGQgcmVqZWN0IFBvbXBleTsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIHRoZXJlIHdhcyBidXQgb25lIGFkdmFudGFnZW91cyBjb3Vyc2UgaW4gdmlldyBvZiB0aGUgY2lyY3Vtc3RhbmNlcywgYW5kIHRoYXQgd2FzIHRvIHJlY2VpdmUgaGltIGFuZCBwdXQgaGltIHRvIGRlYXRoLiBBbmQgaGUgYWRkZWQsIGFzIGhlIGNsb3NlZCBoaXMgc3BlZWNoLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgZGVhZCBtYW4gZG9lcyBub3QgYml0ZS48L3E+IFRoZSBjb3VuY2lsIGFkb3B0ZWQgaGlzIG9waW5pb24sIGFuZCBQb21wZXkgdGhlIEdyZWF0IGxheSBkZWFkLCBhbiBleGFtcGxlIG9mIHRoZSB1bmV4cGVjdGVkIGFuZCBpbmNyZWRpYmxlIGluIGh1bWFuIGxpZmUsIGFuZCBpdCB3YXMgdGhlIHdvcmsgb2YgVGhlb2RvdHVzIGFuZCBoaXMgY2xldmVyIHJoZXRvcmljLCBhcyB0aGF0IHNvcGhpc3QgaGltc2VsZiB3YXMgd29udCB0byBzYXkgd2l0aCBib2FzdGluZy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDc3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXJzIGx4eHZpaS4tbHh4eC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BIGxpdHRsZSB3aGlsZSBhZnRlcndhcmRzLCBob3dldmVyLCB3aGVuIENhZXNhciBjYW1lLCB0aGUgb3RoZXIgd3JldGNoZXMgcGFpZCB0aGUgcGVuYWx0eSBmb3IgdGhlaXIgY3JpbWUgYW5kIHBlcmlzaGVkIHdyZXRjaGVkbHk7IGFzIGZvciBUaGVvZG90dXMsIGFmdGVyIGJvcnJvd2luZyBmcm9tIEZvcnR1bmUgZW5vdWdoIHRpbWUgZm9yIGEgd2FuZGVyaW5nLCBkZXN0aXR1dGUsIGFuZCBpbmdsb3Jpb3VzIGxpZmUsIGhlIGRpZCBub3QgZXNjYXBlIHRoZSBub3RpY2Ugb2YgQnJ1dHVzLCB3aG8gYXQgdGhpcyB0aW1lIHRyYXZlcnNlZCBBc2lhLCBidXQgd2FzIGJyb3VnaHQgdG8gaGltIGFuZCBwdW5pc2hlZCwgYW5kIHdvbiBtb3JlIGZhbWUgZm9yIGhpcyBkZWF0aCB0aGFuIGZvciBoaXMgbGlmZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSB3ZXJlIGhpcyBtZW1vcmFibGUgYWNoaWV2ZW1lbnRzIGluIG1ldGluZyBvdXQgcmV3YXJkcyBvciBwdW5pc2htZW50cyB0byB0aG9zZSB3aG8gZGVzZXJ2ZWQgdGhlbSwgYnV0IEkgc2hhbGwgaGVyZSBkZXNjcmliZSBvbmx5IHRoYXQgaW4gd2hpY2ggYm90aCBoZSBoaW1zZWxmIGFuZCB0aGUgY2hpZWYgbWVuIG9mIFJvbWUgdG9vayBlc3BlY2lhbCBwbGVhc3VyZS4gV2hlbiBQb21wZXkgdGhlIEdyZWF0LCBhZnRlciBoZSBoYWQgYmVlbiBzdHJpcHBlZCBvZiBoaXMgZ3JlYXQgcG93ZXIgYnkgQ2Flc2FyLCBwdXQgaW4gYXMgYSBmdWdpdGl2ZSBhdCBQZWx1c2l1bSBpbiBFZ3lwdCwgdGhlIGd1YXJkaWFucyBvZiB0aGUgYm95IGtpbmcgd2VyZSBob2xkaW5nIGEgY291bmNpbCB3aXRoIHRoZWlyIGZyaWVuZHMsIGF0IHdoaWNoIG9waW5pb25zIGRpZmZlcmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgdGhvdWdodCB0aGV5IHNob3VsZCByZWNlaXZlIFBvbXBleSwgb3RoZXJzIHRoYXQgdGhleSBzaG91bGQgcmVwdWxzZSBoaW0gZnJvbSBFZ3lwdC4gQnV0IGEgY2VydGFpbiBUaGVvZG90dXMsIG9mIENoaW9zLCB3aG8gd2FzIGF0dGFjaGVkIHRvIHRoZSBraW5nIGFzIGEgcGFpZCB0ZWFjaGVyIG9mIHJoZXRvcmljLCBhbmQgd2FzIGF0IHRoaXMgdGltZSBkZWVtZWQgd29ydGh5IG9mIGEgcGxhY2UgaW4gdGhlIGNvdW5jaWwgZm9yIGxhY2sgb2YgYmV0dGVyIG1lbiwgZGVjbGFyZWQgdGhhdCBib3RoIHdlcmUgd3JvbmcsIGJvdGggdGhvc2Ugd2hvIHdvdWxkIGFkbWl0IGFuZCB0aG9zZSB3aG8gd291bGQgcmVqZWN0IFBvbXBleTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGVyZSB3YXMgYnV0IG9uZSBhZHZhbnRhZ2VvdXMgY291cnNlIGluIHZpZXcgb2YgdGhlIGNpcmN1bXN0YW5jZXMsIGFuZCB0aGF0IHdhcyB0byByZWNlaXZlIGhpbSBhbmQgcHV0IGhpbSB0byBkZWF0aC4gQW5kIGhlIGFkZGVkLCBhcyBoZSBjbG9zZWQgaGlzIHNwZWVjaCwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkEgZGVhZCBtYW4gZG9lcyBub3QgYml0ZS48L3E+IFRoZSBjb3VuY2lsIGFkb3B0ZWQgaGlzIG9waW5pb24sIGFuZCBQb21wZXkgdGhlIEdyZWF0IGxheSBkZWFkLCBhbiBleGFtcGxlIG9mIHRoZSB1bmV4cGVjdGVkIGFuZCBpbmNyZWRpYmxlIGluIGh1bWFuIGxpZmUsIGFuZCBpdCB3YXMgdGhlIHdvcmsgb2YgVGhlb2RvdHVzIGFuZCBoaXMgY2xldmVyIHJoZXRvcmljLCBhcyB0aGF0IHNvcGhpc3QgaGltc2VsZiB3YXMgd29udCB0byBzYXkgd2l0aCBib2FzdGluZy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA3Ny4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXJzIGx4eHZpaS4tbHh4eC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDc3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlcnMgbHh4dmlpLi1seHh4LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXJzIGx4eHZpaS4tbHh4eC48L3RyYW5zbGF0aW9uPg=="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkEgbGl0dGxlIHdoaWxlIGFmdGVyd2FyZHMsIGhvd2V2ZXIsIHdoZW4gQ2Flc2FyIGNhbWUsIHRoZSBvdGhlciB3cmV0Y2hlcyBwYWlkIHRoZSBwZW5hbHR5IGZvciB0aGVpciBjcmltZSBhbmQgcGVyaXNoZWQgd3JldGNoZWRseTsgYXMgZm9yIFRoZW9kb3R1cywgYWZ0ZXIgYm9ycm93aW5nIGZyb20gRm9ydHVuZSBlbm91Z2ggdGltZSBmb3IgYSB3YW5kZXJpbmcsIGRlc3RpdHV0ZSwgYW5kIGluZ2xvcmlvdXMgbGlmZSwgaGUgZGlkIG5vdCBlc2NhcGUgdGhlIG5vdGljZSBvZiBCcnV0dXMsIHdobyBhdCB0aGlzIHRpbWUgdHJhdmVyc2VkIEFzaWEsIGJ1dCB3YXMgYnJvdWdodCB0byBoaW0gYW5kIHB1bmlzaGVkLCBhbmQgd29uIG1vcmUgZmFtZSBmb3IgaGlzIGRlYXRoIHRoYW4gZm9yIGhpcyBsaWZlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CcnV0dXMgbm93IHN1bW1vbmVkIENhc3NpdXMgdG8gU2FyZGlzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBlYXJseSBwYXJ0IG9mIDQyIEIuQy48L25vdGU+IGFzIGhlIGRyZXcgbmVhciwgd2VudCB0byBtZWV0IGhpbSB3aXRoIGhpcyBmcmllbmRzOyBhbmQgdGhlIHdob2xlIGFybXksIGluIGZ1bGwgYXJyYXksIHNhbHV0ZWQgdGhlbSBib3RoIGFzIEltcGVyYXRvcnMuIEJ1dCwgYXMgaXMgd29udCB0byBiZSB0aGUgY2FzZSBpbiBncmVhdCB1bmRlcnRha2luZ3Mgd2hlcmUgdGhlcmUgYXJlIG1hbnkgZnJpZW5kcyBhbmQgY29tbWFuZGVycywgbXV0dWFsIGNoYXJnZXMgYW5kIGFjY3VzYXRpb25zIGhhZCBwYXNzZWQgYmV0d2VlbiB0aGVtLCBhbmQgdGhlcmVmb3JlLCBpbW1lZGlhdGVseSBhZnRlciB0aGVpciBtYXJjaCBhbmQgYmVmb3JlIHRoZXkgZGlkIGFueXRoaW5nIGVsc2UsIHRoZXkgbWV0IGluIGEgcm9vbSBieSB0aGVtc2VsdmVzLiBUaGUgZG9vcnMgd2VyZSBsb2NrZWQsIGFuZCwgd2l0aCBubyBvbmUgYnksIHRoZXkgaW5kdWxnZWQgaW4gZmF1bHQtZmluZGluZyBmaXJzdCwgdGhlbiBpbiByZWJ1a2VzIGFuZCBkZW51bmNpYXRpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCB0aGV5IHdlcmUgc3dlcHQgYWxvbmcgaW50byBwYXNzaW9uYXRlIHNwZWVjaGVzIGFuZCB0ZWFycywgYW5kIHRoZWlyIGZyaWVuZHMsIGFtYXplZCBhdCB0aGUgaGFyc2huZXNzIGFuZCBpbnRlbnNpdHkgb2YgdGhlaXIgYW5nZXIsIGZlYXJlZCBzb21lIHVudG93YXJkIHJlc3VsdDsgdGhleSB3ZXJlLCBob3dldmVyLCBmb3JiaWRkZW4gdG8gYXBwcm9hY2guIEJ1dCBNYXJjdXMgRmF2b25pdXMsIHdobyBoYWQgYmVjb21lIGEgZGV2b3RlZSBvZiBDYXRvLCBhbmQgd2FzIG1vcmUgaW1wZXR1b3VzIGFuZCBmcmVuemllZCB0aGFuIHJlYXNvbmFibGUgaW4gaGlzIHB1cnN1aXQgb2YgcGhpbG9zb3BoeSwgdHJpZWQgdG8gZ28gaW4gdG8gdGhlbSwgYW5kIHdhcyBwcmV2ZW50ZWQgYnkgdGhlaXIgc2VydmFudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBubyBlYXN5IG1hdHRlciwgaG93ZXZlciwgdG8gc3RvcCBGYXZvbml1cyB3aGVuIGhlIHNwcmFuZyB0byBkbyBhbnl0aGluZywgZm9yIGhlIHdhcyBhbHdheXMgdmVoZW1lbnQgYW5kIHJhc2guIFRoZSBmYWN0IHRoYXQgaGUgd2FzIGEgUm9tYW4gc2VuYXRvciB3YXMgb2Ygbm8gaW1wb3J0YW5jZSBpbiBoaXMgZXllcywgYW5kIGJ5IHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmN5bmljYWw8L3E+IGJvbGRuZXNzIG9mIGhpcyBzcGVlY2ggaGUgb2Z0ZW4gdG9vayBhd2F5IGl0cyBvZmZlbnNpdmVuZXNzLCBhbmQgdGhlcmVmb3JlIG1lbiBwdXQgdXAgd2l0aCBoaXMgaW1wZXJ0aW5lbmNlIGFzIGEgam9rZS4gQW5kIHNvIGF0IHRoaXMgdGltZSBoZSBmb3JjZWQgaGlzIHdheSB0aHJvdWdoIHRoZSBieXN0YW5kZXJzIGFuZCBlbnRlcmVkIHRoZSByb29tLCByZWNpdGluZyBpbiBhbiBhZmZlY3RlZCB2b2ljZSB0aGUgdmVyc2VzIHdoZXJlaW4gSG9tZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPHRpdGxlPklsaWFkLCBpLiAyNTkuPC90aXRsZT4KICAgICAgICAgICAgPC9ub3RlPiByZXByZXNlbnRzIE5lc3RvciBhcyBzYXlpbmc64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkJ1dCBkbyB5ZSBoYXJrZW4gdG8gbWUsIGZvciB5ZSBib3RoIGFyZSB5b3VuZ2VyIHRoYW4gSSBhbSw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlhbmQgc28gZm9ydGguIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgQ2Fzc2l1cyBidXJzdCBvdXQgbGF1Z2hpbmc7IGJ1dCBCcnV0dXMgZHJvdmUgRmF2b25pdXMgb3V0IG9mIHRoZSByb29tLCBjYWxsaW5nIGhpbSBhIG1lcmUgZG9nLCBhbmQgYSBjb3VudGVyZmVpdCBDeW5pYy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGZvbGxvd2VyIG9mIEFudGlzdGhlbmVzIHdhcyBjYWxsZWQgYSAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DeW5pYyw8L3E+IG9yIDxlbXBoPmRvZy1saWtlPC9lbXBoPiwgcHJvYmFibHkgZnJvbSB0aGUgY29hcnNlIGFuZCBicnV0YWwgbWFubmVycyBhZmZlY3RlZCBieSB0aGUgc2Nob29sLjwvbm90ZT4gSG93ZXZlciwgYXQgdGhlIHRpbWUsIHRoaXMgaW5jaWRlbnQgcHV0IGFuIGVuZCB0byB0aGVpciBxdWFycmVsLCBhbmQgdGhleSBzZXBhcmF0ZWQgYXQgb25jZS4gRnVydGhlcm1vcmUsIENhc3NpdXMgZ2F2ZSBhIHN1cHBlciwgdG8gd2hpY2ggQnJ1dHVzIGludml0ZWQgaGlzIGZyaWVuZHMuIEFuZCBhcyB0aGUgZ3Vlc3RzIHdlcmUgYWxyZWFkeSB0YWtpbmcgdGhlaXIgcGxhY2VzIGF0IHRoZSBmZWFzdCwgRmF2b25pdXMgY2FtZSwgZnJlc2ggZnJvbSBoaXMgYmF0aC4gQnJ1dHVzIHByb3Rlc3RlZCB0aGF0IGhlIGhhZCBjb21lIHdpdGhvdXQgYW4gaW52aXRhdGlvbiwgYW5kIG9yZGVyZWQgdGhlIHNlcnZhbnRzIHRvIGNvbmR1Y3QgaGltIHRvIHRoZSB1cHBlcm1vc3QgY291Y2g7IGJ1dCBGYXZvbml1cyBmb3JjZWQgaGlzIHdheSBwYXN0IHRoZW0gYW5kIHJlY2xpbmVkIHVwb24gdGhlIGNlbnRyYWwgb25lLiBBbmQgb3ZlciB0aGUgd2luZSBtaXJ0aCBhbmQgamVzdCBhYm91bmRlZCwgc2Vhc29uZWQgd2l0aCB3aXQgYW5kIHBoaWxvc29waHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnJ1dHVzIG5vdyBzdW1tb25lZCBDYXNzaXVzIHRvIFNhcmRpcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBlYXJseSBwYXJ0IG9mIDQyIEIuQy48L25vdGU+IGFzIGhlIGRyZXcgbmVhciwgd2VudCB0byBtZWV0IGhpbSB3aXRoIGhpcyBmcmllbmRzOyBhbmQgdGhlIHdob2xlIGFybXksIGluIGZ1bGwgYXJyYXksIHNhbHV0ZWQgdGhlbSBib3RoIGFzIEltcGVyYXRvcnMuIEJ1dCwgYXMgaXMgd29udCB0byBiZSB0aGUgY2FzZSBpbiBncmVhdCB1bmRlcnRha2luZ3Mgd2hlcmUgdGhlcmUgYXJlIG1hbnkgZnJpZW5kcyBhbmQgY29tbWFuZGVycywgbXV0dWFsIGNoYXJnZXMgYW5kIGFjY3VzYXRpb25zIGhhZCBwYXNzZWQgYmV0d2VlbiB0aGVtLCBhbmQgdGhlcmVmb3JlLCBpbW1lZGlhdGVseSBhZnRlciB0aGVpciBtYXJjaCBhbmQgYmVmb3JlIHRoZXkgZGlkIGFueXRoaW5nIGVsc2UsIHRoZXkgbWV0IGluIGEgcm9vbSBieSB0aGVtc2VsdmVzLiBUaGUgZG9vcnMgd2VyZSBsb2NrZWQsIGFuZCwgd2l0aCBubyBvbmUgYnksIHRoZXkgaW5kdWxnZWQgaW4gZmF1bHQtZmluZGluZyBmaXJzdCwgdGhlbiBpbiByZWJ1a2VzIGFuZCBkZW51bmNpYXRpb25zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRoZXkgd2VyZSBzd2VwdCBhbG9uZyBpbnRvIHBhc3Npb25hdGUgc3BlZWNoZXMgYW5kIHRlYXJzLCBhbmQgdGhlaXIgZnJpZW5kcywgYW1hemVkIGF0IHRoZSBoYXJzaG5lc3MgYW5kIGludGVuc2l0eSBvZiB0aGVpciBhbmdlciwgZmVhcmVkIHNvbWUgdW50b3dhcmQgcmVzdWx0OyB0aGV5IHdlcmUsIGhvd2V2ZXIsIGZvcmJpZGRlbiB0byBhcHByb2FjaC4gQnV0IE1hcmN1cyBGYXZvbml1cywgd2hvIGhhZCBiZWNvbWUgYSBkZXZvdGVlIG9mIENhdG8sIGFuZCB3YXMgbW9yZSBpbXBldHVvdXMgYW5kIGZyZW56aWVkIHRoYW4gcmVhc29uYWJsZSBpbiBoaXMgcHVyc3VpdCBvZiBwaGlsb3NvcGh5LCB0cmllZCB0byBnbyBpbiB0byB0aGVtLCBhbmQgd2FzIHByZXZlbnRlZCBieSB0aGVpciBzZXJ2YW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBubyBlYXN5IG1hdHRlciwgaG93ZXZlciwgdG8gc3RvcCBGYXZvbml1cyB3aGVuIGhlIHNwcmFuZyB0byBkbyBhbnl0aGluZywgZm9yIGhlIHdhcyBhbHdheXMgdmVoZW1lbnQgYW5kIHJhc2guIFRoZSBmYWN0IHRoYXQgaGUgd2FzIGEgUm9tYW4gc2VuYXRvciB3YXMgb2Ygbm8gaW1wb3J0YW5jZSBpbiBoaXMgZXllcywgYW5kIGJ5IHRoZSAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y3luaWNhbDwvcT4gYm9sZG5lc3Mgb2YgaGlzIHNwZWVjaCBoZSBvZnRlbiB0b29rIGF3YXkgaXRzIG9mZmVuc2l2ZW5lc3MsIGFuZCB0aGVyZWZvcmUgbWVuIHB1dCB1cCB3aXRoIGhpcyBpbXBlcnRpbmVuY2UgYXMgYSBqb2tlLiBBbmQgc28gYXQgdGhpcyB0aW1lIGhlIGZvcmNlZCBoaXMgd2F5IHRocm91Z2ggdGhlIGJ5c3RhbmRlcnMgYW5kIGVudGVyZWQgdGhlIHJvb20sIHJlY2l0aW5nIGluIGFuIGFmZmVjdGVkIHZvaWNlIHRoZSB2ZXJzZXMgd2hlcmVpbiBIb21lcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPklsaWFkLCBpLiAyNTkuPC90aXRsZT4KICAgICAgICAgICAgPC9ub3RlPiByZXByZXNlbnRzIE5lc3RvciBhcyBzYXlpbmc64oCUCgkJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZCwgaS4gMjU5LjwvdGl0bGU+CiAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCBkbyB5ZSBoYXJrZW4gdG8gbWUsIGZvciB5ZSBib3RoIGFyZSB5b3VuZ2VyIHRoYW4gSSBhbSw8L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CgkJCQlhbmQgc28gZm9ydGguIAoJCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgZG8geWUgaGFya2VuIHRvIG1lLCBmb3IgeWUgYm90aCBhcmUgeW91bmdlciB0aGFuIEkgYW0sPC9sPgoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgQ2Fzc2l1cyBidXJzdCBvdXQgbGF1Z2hpbmc7IGJ1dCBCcnV0dXMgZHJvdmUgRmF2b25pdXMgb3V0IG9mIHRoZSByb29tLCBjYWxsaW5nIGhpbSBhIG1lcmUgZG9nLCBhbmQgYSBjb3VudGVyZmVpdCBDeW5pYy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgZm9sbG93ZXIgb2YgQW50aXN0aGVuZXMgd2FzIGNhbGxlZCBhIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q3luaWMsPC9xPiBvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmRvZy1saWtlPC9lbXBoPiwgcHJvYmFibHkgZnJvbSB0aGUgY29hcnNlIGFuZCBicnV0YWwgbWFubmVycyBhZmZlY3RlZCBieSB0aGUgc2Nob29sLjwvbm90ZT4gSG93ZXZlciwgYXQgdGhlIHRpbWUsIHRoaXMgaW5jaWRlbnQgcHV0IGFuIGVuZCB0byB0aGVpciBxdWFycmVsLCBhbmQgdGhleSBzZXBhcmF0ZWQgYXQgb25jZS4gRnVydGhlcm1vcmUsIENhc3NpdXMgZ2F2ZSBhIHN1cHBlciwgdG8gd2hpY2ggQnJ1dHVzIGludml0ZWQgaGlzIGZyaWVuZHMuIEFuZCBhcyB0aGUgZ3Vlc3RzIHdlcmUgYWxyZWFkeSB0YWtpbmcgdGhlaXIgcGxhY2VzIGF0IHRoZSBmZWFzdCwgRmF2b25pdXMgY2FtZSwgZnJlc2ggZnJvbSBoaXMgYmF0aC4gQnJ1dHVzIHByb3Rlc3RlZCB0aGF0IGhlIGhhZCBjb21lIHdpdGhvdXQgYW4gaW52aXRhdGlvbiwgYW5kIG9yZGVyZWQgdGhlIHNlcnZhbnRzIHRvIGNvbmR1Y3QgaGltIHRvIHRoZSB1cHBlcm1vc3QgY291Y2g7IGJ1dCBGYXZvbml1cyBmb3JjZWQgaGlzIHdheSBwYXN0IHRoZW0gYW5kIHJlY2xpbmVkIHVwb24gdGhlIGNlbnRyYWwgb25lLiBBbmQgb3ZlciB0aGUgd2luZSBtaXJ0aCBhbmQgamVzdCBhYm91bmRlZCwgc2Vhc29uZWQgd2l0aCB3aXQgYW5kIHBoaWxvc29waHkuCgkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q3luaWMsPC9xPiBvciA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmRvZy1saWtlPC9lbXBoPiwgcHJvYmFibHkgZnJvbSB0aGUgY29hcnNlIGFuZCBicnV0YWwgbWFubmVycyBhZmZlY3RlZCBieSB0aGUgc2Nob29sLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbiB0aGUgZm9sbG93aW5nIGRheSBMdWNpdXMgUGVsbGEsIGEgUm9tYW4gd2hvIGhhZCBiZWVuIHByYWV0b3IgYW5kIGhhZCBlbmpveWVkIHRoZSBjb25maWRlbmNlIG9mIEJydXR1cywgYmVpbmcgZGVub3VuY2VkIGJ5IHRoZSBTYXJkaWFucyBhcyBhbiBlbWJlenpsZXIgb2YgdGhlIHB1YmxpYyBtb25leXMsIHdhcyBjb25kZW1uZWQgYnkgQnJ1dHVzIGFuZCBkaXNncmFjZWQ7IGFuZCB0aGUgbWF0dGVyIHZleGVkIENhc3NpdXMgYmV5b25kIG1lYXN1cmUuIEZvciBhIGZldyBkYXlzIGJlZm9yZSwgd2hlbiB0d28gZnJpZW5kcyBvZiBoaXMgaGFkIGJlZW4gY29udmljdGVkIG9mIHRoZSBzYW1lIG1pc2RlZWRzLCBoZSBoYWQgcHJpdmF0ZWx5IGFkbW9uaXNoZWQgdGhlbSBidXQgcHVibGljbHkgYWNxdWl0dGVkIHRoZW0sIGFuZCBjb250aW51ZWQgdG8gZW1wbG95IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBmb3VuZCBmYXVsdCB3aXRoIEJydXR1cyBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgd2FzIHRvbyBvYnNlcnZhbnQgb2YgbGF3IGFuZCBqdXN0aWNlIGF0IGEgdGltZSB3aGljaCBkZW1hbmRlZCBhIHBvbGljeSBvZiBraW5kbmVzcy4gQnV0IEJydXR1cyBiYWRlIGhpbSByZW1lbWJlciB0aGUgSWRlcyBvZiBNYXJjaCwgb24gd2hpY2ggdGhleSBoYWQgc2xhaW4gQ2Flc2FyLCBub3QgYmVjYXVzZSBoZSB3YXMgaGltc2VsZiBwbHVuZGVyaW5nIGV2ZXJ5Ym9keSwgYnV0IGJlY2F1c2UgaGUgZW5hYmxlZCBvdGhlcnMgdG8gZG8gdGhpczsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+c2luY2UsIGlmIHRoZXJlIGlzIGFueSBnb29kIGV4Y3VzZSBmb3IgbmVnbGVjdGluZyBqdXN0aWNlLCBpdCBoYWQgYmVlbiBiZXR0ZXIgZm9yIHVzIHRvIGVuZHVyZSB0aGUgZnJpZW5kcyBvZiBDYWVzYXIgdGhhbiB0byBzdWZmZXIgb3VyIG93biB0byBkbyB3cm9uZy4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgaW4gdGhlIG9uZSBjYXNlLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53ZSBzaG91bGQgaGF2ZSBoYWQgdGhlIHJlcHV0YXRpb24gb2YgY293YXJkaWNlIG1lcmVseTsgYnV0IG5vdywgaW4gYWRkaXRpb24gdG8gb3VyIHRvaWxzIGFuZCBwZXJpbHMsIHdlIGFyZSBkZWVtZWQgdW5qdXN0LjwvcT4gU3VjaCB3ZXJlIHRoZSBwcmluY2lwbGVzIG9mIEJydXR1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9uIHRoZSBmb2xsb3dpbmcgZGF5IEx1Y2l1cyBQZWxsYSwgYSBSb21hbiB3aG8gaGFkIGJlZW4gcHJhZXRvciBhbmQgaGFkIGVuam95ZWQgdGhlIGNvbmZpZGVuY2Ugb2YgQnJ1dHVzLCBiZWluZyBkZW5vdW5jZWQgYnkgdGhlIFNhcmRpYW5zIGFzIGFuIGVtYmV6emxlciBvZiB0aGUgcHVibGljIG1vbmV5cywgd2FzIGNvbmRlbW5lZCBieSBCcnV0dXMgYW5kIGRpc2dyYWNlZDsgYW5kIHRoZSBtYXR0ZXIgdmV4ZWQgQ2Fzc2l1cyBiZXlvbmQgbWVhc3VyZS4gRm9yIGEgZmV3IGRheXMgYmVmb3JlLCB3aGVuIHR3byBmcmllbmRzIG9mIGhpcyBoYWQgYmVlbiBjb252aWN0ZWQgb2YgdGhlIHNhbWUgbWlzZGVlZHMsIGhlIGhhZCBwcml2YXRlbHkgYWRtb25pc2hlZCB0aGVtIGJ1dCBwdWJsaWNseSBhY3F1aXR0ZWQgdGhlbSwgYW5kIGNvbnRpbnVlZCB0byBlbXBsb3kgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHRoZXJlZm9yZSBmb3VuZCBmYXVsdCB3aXRoIEJydXR1cyBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgd2FzIHRvbyBvYnNlcnZhbnQgb2YgbGF3IGFuZCBqdXN0aWNlIGF0IGEgdGltZSB3aGljaCBkZW1hbmRlZCBhIHBvbGljeSBvZiBraW5kbmVzcy4gQnV0IEJydXR1cyBiYWRlIGhpbSByZW1lbWJlciB0aGUgSWRlcyBvZiBNYXJjaCwgb24gd2hpY2ggdGhleSBoYWQgc2xhaW4gQ2Flc2FyLCBub3QgYmVjYXVzZSBoZSB3YXMgaGltc2VsZiBwbHVuZGVyaW5nIGV2ZXJ5Ym9keSwgYnV0IGJlY2F1c2UgaGUgZW5hYmxlZCBvdGhlcnMgdG8gZG8gdGhpczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnNpbmNlLCBpZiB0aGVyZSBpcyBhbnkgZ29vZCBleGN1c2UgZm9yIG5lZ2xlY3RpbmcganVzdGljZSwgaXQgaGFkIGJlZW4gYmV0dGVyIGZvciB1cyB0byBlbmR1cmUgdGhlIGZyaWVuZHMgb2YgQ2Flc2FyIHRoYW4gdG8gc3VmZmVyIG91ciBvd24gdG8gZG8gd3JvbmcuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgaW4gdGhlIG9uZSBjYXNlLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndlIHNob3VsZCBoYXZlIGhhZCB0aGUgcmVwdXRhdGlvbiBvZiBjb3dhcmRpY2UgbWVyZWx5OyBidXQgbm93LCBpbiBhZGRpdGlvbiB0byBvdXIgdG9pbHMgYW5kIHBlcmlscywgd2UgYXJlIGRlZW1lZCB1bmp1c3QuPC9xPiBTdWNoIHdlcmUgdGhlIHByaW5jaXBsZXMgb2YgQnJ1dHVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZXkgd2VyZSBhYm91dCB0byBjcm9zcyBvdmVyIGZyb20gQXNpYSwgQnJ1dHVzIGlzIHNhaWQgdG8gaGF2ZSBoYWQgYSBncmVhdCBzaWduLiBIZSB3YXMgbmF0dXJhbGx5IHdha2VmdWwsIGFuZCBieSBwcmFjdGljZSBhbmQgc2VsZi1yZXN0cmFpbnQgaGFkIHJlZHVjZWQgaGlzIGhvdXJzIG9mIHNsZWVwIHRvIGZldywgbmV2ZXIgbHlpbmcgZG93biBieSBkYXksIGFuZCBieSBuaWdodCBvbmx5IHdoZW4gaGUgY291bGQgdHJhbnNhY3Qgbm8gYnVzaW5lc3Mgbm9yIGNvbnZlcnNlIHdpdGggYW55IG9uZSwgc2luY2UgYWxsIGhhZCBnb25lIHRvIHJlc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgaG93ZXZlciwgd2hlbiB0aGUgd2FyIHdhcyBiZWd1biBhbmQgaGUgaGFkIGluIGhpcyBoYW5kcyB0aGUgY29uZHVjdCBvZiBhIGxpZmUgYW5kIGRlYXRoIHN0cnVnZ2xlLCBhbmQgd2FzIGFueGlvdXNseSBmb3JlY2FzdGluZyB0aGUgZnV0dXJlLCBoZSB3b3VsZCBmaXJzdCBkb3plIGEgbGl0dGxlIGluIHRoZSBldmVuaW5nIGFmdGVyIGVhdGluZywgYW5kIHRoZW4gd291bGQgc3BlbmQgdGhlIHJlc3Qgb2YgdGhlIG5pZ2h0IG9uIHVyZ2VudCBidXNpbmVzcy4gQnV0IHdoZW5ldmVyIGhlIGhhZCBmdWxseSBtZXQgdGhlIGRlbWFuZHMgb2Ygc3VjaCBidXNpbmVzcyBpbiBzaG9ydGVyIHRpbWUsIGhlIHdvdWxkIHJlYWQgYSBib29rIHVudGlsIHRoZSB0aGlyZCB3YXRjaCwgYXQgd2hpY2ggaG91ciB0aGUgY2VudHVyaW9ucyBhbmQgdHJpYnVuZXMgdXN1YWxseSBjYW1lIHRvIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T25jZSwgYWNjb3JkaW5nbHksIHdoZW4gaGUgd2FzIGFib3V0IHRvIHRha2UgaGlzIGFybXkgYWNyb3NzIGZyb20gQXNpYSwgaXQgd2FzIHZlcnkgbGF0ZSBhdCBuaWdodCwgaGlzIHRlbnQgd2FzIGRpbWx5IGxpZ2h0ZWQsIGFuZCBhbGwgdGhlIGNhbXAgd2FzIHdyYXBwZWQgaW4gc2lsZW5jZS4gVGhlbiwgYXMgaGUgd2FzIG1lZGl0YXRpbmcgYW5kIHJlZmxlY3RpbmcsIGhlIHRob3VnaHQgaGUgaGVhcmQgc29tZSBvbmUgY29taW5nIGludG8gdGhlIHRlbnQuIEhlIHR1cm5lZCBoaXMgZXllcyB0b3dhcmRzIHRoZSBlbnRyYW5jZSBhbmQgYmVoZWxkIGEgc3RyYW5nZSBhbmQgZHJlYWRmdWwgYXBwYXJpdGlvbiwgYSBtb25zdHJvdXMgYW5kIGZlYXJmdWwgc2hhcGUgc3RhbmRpbmcgc2lsZW50bHkgYnkgaGlzIHNpZGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBsdWNraW5nIHVwIGNvdXJhZ2UgdG8gcXVlc3Rpb24gaXQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hvIGFydCB0aG91LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5vZiBnb2RzIG9yIG1lbiwgYW5kIHdoYXQgaXMgdGhpbmUgZXJyYW5kIHdpdGggbWU/PC9xPiBUaGVuIHRoZSBwaGFudG9tIGFuc3dlcmVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYW0gdGh5IGV2aWwgZ2VuaXVzLCBCcnV0dXMsIGFuZCB0aG91IHNoYWx0IHNlZSBtZSBhdCBQaGlsaXBwaS48L3E+IEFuZCBCcnV0dXMsIHVuZGlzdHVyYmVkLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2hhbGwgc2VlIHRoZWUuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDY5LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyPC90aXRsZT4sIGx4aXguIDUtNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGV5IHdlcmUgYWJvdXQgdG8gY3Jvc3Mgb3ZlciBmcm9tIEFzaWEsIEJydXR1cyBpcyBzYWlkIHRvIGhhdmUgaGFkIGEgZ3JlYXQgc2lnbi4gSGUgd2FzIG5hdHVyYWxseSB3YWtlZnVsLCBhbmQgYnkgcHJhY3RpY2UgYW5kIHNlbGYtcmVzdHJhaW50IGhhZCByZWR1Y2VkIGhpcyBob3VycyBvZiBzbGVlcCB0byBmZXcsIG5ldmVyIGx5aW5nIGRvd24gYnkgZGF5LCBhbmQgYnkgbmlnaHQgb25seSB3aGVuIGhlIGNvdWxkIHRyYW5zYWN0IG5vIGJ1c2luZXNzIG5vciBjb252ZXJzZSB3aXRoIGFueSBvbmUsIHNpbmNlIGFsbCBoYWQgZ29uZSB0byByZXN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgaG93ZXZlciwgd2hlbiB0aGUgd2FyIHdhcyBiZWd1biBhbmQgaGUgaGFkIGluIGhpcyBoYW5kcyB0aGUgY29uZHVjdCBvZiBhIGxpZmUgYW5kIGRlYXRoIHN0cnVnZ2xlLCBhbmQgd2FzIGFueGlvdXNseSBmb3JlY2FzdGluZyB0aGUgZnV0dXJlLCBoZSB3b3VsZCBmaXJzdCBkb3plIGEgbGl0dGxlIGluIHRoZSBldmVuaW5nIGFmdGVyIGVhdGluZywgYW5kIHRoZW4gd291bGQgc3BlbmQgdGhlIHJlc3Qgb2YgdGhlIG5pZ2h0IG9uIHVyZ2VudCBidXNpbmVzcy4gQnV0IHdoZW5ldmVyIGhlIGhhZCBmdWxseSBtZXQgdGhlIGRlbWFuZHMgb2Ygc3VjaCBidXNpbmVzcyBpbiBzaG9ydGVyIHRpbWUsIGhlIHdvdWxkIHJlYWQgYSBib29rIHVudGlsIHRoZSB0aGlyZCB3YXRjaCwgYXQgd2hpY2ggaG91ciB0aGUgY2VudHVyaW9ucyBhbmQgdHJpYnVuZXMgdXN1YWxseSBjYW1lIHRvIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uY2UsIGFjY29yZGluZ2x5LCB3aGVuIGhlIHdhcyBhYm91dCB0byB0YWtlIGhpcyBhcm15IGFjcm9zcyBmcm9tIEFzaWEsIGl0IHdhcyB2ZXJ5IGxhdGUgYXQgbmlnaHQsIGhpcyB0ZW50IHdhcyBkaW1seSBsaWdodGVkLCBhbmQgYWxsIHRoZSBjYW1wIHdhcyB3cmFwcGVkIGluIHNpbGVuY2UuIFRoZW4sIGFzIGhlIHdhcyBtZWRpdGF0aW5nIGFuZCByZWZsZWN0aW5nLCBoZSB0aG91Z2h0IGhlIGhlYXJkIHNvbWUgb25lIGNvbWluZyBpbnRvIHRoZSB0ZW50LiBIZSB0dXJuZWQgaGlzIGV5ZXMgdG93YXJkcyB0aGUgZW50cmFuY2UgYW5kIGJlaGVsZCBhIHN0cmFuZ2UgYW5kIGRyZWFkZnVsIGFwcGFyaXRpb24sIGEgbW9uc3Ryb3VzIGFuZCBmZWFyZnVsIHNoYXBlIHN0YW5kaW5nIHNpbGVudGx5IGJ5IGhpcyBzaWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBsdWNraW5nIHVwIGNvdXJhZ2UgdG8gcXVlc3Rpb24gaXQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaG8gYXJ0IHRob3UsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+b2YgZ29kcyBvciBtZW4sIGFuZCB3aGF0IGlzIHRoaW5lIGVycmFuZCB3aXRoIG1lPzwvcT4gVGhlbiB0aGUgcGhhbnRvbSBhbnN3ZXJlZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYW0gdGh5IGV2aWwgZ2VuaXVzLCBCcnV0dXMsIGFuZCB0aG91IHNoYWx0IHNlZSBtZSBhdCBQaGlsaXBwaS48L3E+IEFuZCBCcnV0dXMsIHVuZGlzdHVyYmVkLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzaGFsbCBzZWUgdGhlZS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDY5LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXI8L3RpdGxlPiwgbHhpeC4gNS03LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA2OS41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyPC90aXRsZT4sIGx4aXguIDUtNy48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhZXNhcjwvdGl0bGU+LCBseGl4LiA1LTcuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgc2hhcGUgaGFkIGRpc2FwcGVhcmVkLCBCcnV0dXMgY2FsbGVkIGhpcyBzZXJ2YW50czsgYnV0IHRoZXkgZGVjbGFyZWQgdGhhdCB0aGV5IGhhZCBuZWl0aGVyIGhlYXJkIGFueSB3b3JkcyBub3Igc2VlbiBhbnkgYXBwYXJpdGlvbiwgYW5kIHNvIGhlIHdhdGNoZWQgdGhlIG5pZ2h0IG91dC4gQXMgc29vbiBhcyBpdCB3YXMgZGF5LCBob3dldmVyLCBoZSBzb3VnaHQgb3V0IENhc3NpdXMgYW5kIHRvbGQgaGltIG9mIHRoZSBhcHBhcml0aW9uLiBDYXNzaXVzLCB3aG8gYmVsb25nZWQgdG8gdGhlIHNjaG9vbCBvZiBFcGljdXJ1cywgYW5kIHdhcyBpbiB0aGUgaGFiaXQgb2YgdGFraW5nIGlzc3VlIG9uIHN1Y2ggdG9waWNzIHdpdGggQnJ1dHVzLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgaXMgb3VyIGRvY3RyaW5lLCBCcnV0dXMsIHRoYXQgd2UgZG8gbm90IHJlYWxseSBmZWVsIG9yIHNlZSBldmVyeXRoaW5nLCBidXQgcGVyY2VwdGlvbiBieSB0aGUgc2Vuc2VzIGlzIGEgcGxpYW50IGFuZCBkZWNlaXRmdWwgdGhpbmcsIGFuZCBiZXNpZGVzLCB0aGUgaW50ZWxsaWdlbmNlIGlzIHZlcnkga2VlbiB0byBjaGFuZ2UgYW5kIHRyYW5zZm9ybSB0aGUgdGhpbmcgcGVyY2VpdmVkIGludG8gYW55IGFuZCBldmVyeSBzaGFwZSBmcm9tIG9uZSB3aGljaCBoYXMgbm8gcmVhbCBleGlzdGVuY2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbiBpbXByZXNzaW9uIG9uIHRoZSBzZW5zZXMgaXMgbGlrZSB3YXgsIGFuZCB0aGUgc291bCBvZiBtYW4sIGluIHdoaWNoIHRoZSBwbGFzdGljIG1hdGVyaWFsIGFuZCB0aGUgcGxhc3RpYyBwb3dlciBhbGlrZSBleGlzdCwgY2FuIHZlcnkgZWFzaWx5IHNoYXBlIGFuZCBlbWJlbGxpc2ggaXQgYXQgcGxlYXN1cmUuIFRoaXMgaXMgY2xlYXIgZnJvbSB0aGUgdHJhbnNmb3JtYXRpb25zIHdoaWNoIG9jY3VyIGluIGRyZWFtcywgd2hlcmUgc2xpZ2h0IGluaXRpYWwgbWF0ZXJpYWwgaXMgdHJhbnNmb3JtZWQgYnkgdGhlIGltYWdpbmF0aW9uIGludG8gYWxsIHNvcnRzIG9mIGVtb3Rpb25zIGFuZCBzaGFwZXMuIFRoZSBpbWFnaW5hdGlvbiBpcyBieSBuYXR1cmUgaW4gcGVycGV0dWFsIG1vdGlvbiwgYW5kIHRoaXMgbW90aW9uIHdoaWNoIGl0IGhhcyBpcyBmYW5jeSwgb3IgdGhvdWdodC4gCgkJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoeSBjYXNlLCB0b28sIHRoZSBib2R5IGlzIHdvcm4gd2l0aCBoYXJkc2hpcHMgYW5kIHRoaXMgY29uZGl0aW9uIG5hdHVyYWxseSBleGNpdGVzIGFuZCBwZXJ2ZXJ0cyB0aGUgaW50ZWxsaWdlbmNlLiBBcyBmb3IgZ2VuaWksIGl0IGlzIGluY3JlZGlibGUgZWl0aGVyIHRoYXQgdGhleSBleGlzdCwgb3IsIGlmIHRoZXkgZG8gZXhpc3QsIHRoYXQgdGhleSBoYXZlIHRoZSBhcHBlYXJhbmNlIG9yIHRoZSBzcGVlY2ggb2YgbWVuLCBvciBhIHBvd2VyIHRoYXQgZXh0ZW5kcyB0byB1cy4gRm9yIG15IHBhcnQsIEkgY291bGQgd2lzaCBpdCB3ZXJlIHNvLCBpbiBvcmRlciB0aGF0IG5vdCBvbmx5IG91ciBtZW4tYXQtYXJtcywgYW5kIGhvcnNlcywgYW5kIHNoaXBzLCB3aGljaCBhcmUgc28gbnVtZXJvdXMsIGJ1dCBhbHNvIHRoZSBhc3Npc3RhbmNlIG9mIHRoZSBnb2RzIG1pZ2h0IGdpdmUgdXMgY291cmFnZSwgY29uZHVjdGluZyBhcyB3ZSBkbyB0aGUgZmFpcmVzdCBhbmQgaG9saWVzdCBlbnRlcnByaXNlcy48L3E+IFdpdGggc3VjaCBkaXNjb3Vyc2UgZGlkIENhc3NpdXMgc2VlayB0byBjYWxtIEJydXR1cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgc2hhcGUgaGFkIGRpc2FwcGVhcmVkLCBCcnV0dXMgY2FsbGVkIGhpcyBzZXJ2YW50czsgYnV0IHRoZXkgZGVjbGFyZWQgdGhhdCB0aGV5IGhhZCBuZWl0aGVyIGhlYXJkIGFueSB3b3JkcyBub3Igc2VlbiBhbnkgYXBwYXJpdGlvbiwgYW5kIHNvIGhlIHdhdGNoZWQgdGhlIG5pZ2h0IG91dC4gQXMgc29vbiBhcyBpdCB3YXMgZGF5LCBob3dldmVyLCBoZSBzb3VnaHQgb3V0IENhc3NpdXMgYW5kIHRvbGQgaGltIG9mIHRoZSBhcHBhcml0aW9uLiBDYXNzaXVzLCB3aG8gYmVsb25nZWQgdG8gdGhlIHNjaG9vbCBvZiBFcGljdXJ1cywgYW5kIHdhcyBpbiB0aGUgaGFiaXQgb2YgdGFraW5nIGlzc3VlIG9uIHN1Y2ggdG9waWNzIHdpdGggQnJ1dHVzLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBpcyBvdXIgZG9jdHJpbmUsIEJydXR1cywgdGhhdCB3ZSBkbyBub3QgcmVhbGx5IGZlZWwgb3Igc2VlIGV2ZXJ5dGhpbmcsIGJ1dCBwZXJjZXB0aW9uIGJ5IHRoZSBzZW5zZXMgaXMgYSBwbGlhbnQgYW5kIGRlY2VpdGZ1bCB0aGluZywgYW5kIGJlc2lkZXMsIHRoZSBpbnRlbGxpZ2VuY2UgaXMgdmVyeSBrZWVuIHRvIGNoYW5nZSBhbmQgdHJhbnNmb3JtIHRoZSB0aGluZyBwZXJjZWl2ZWQgaW50byBhbnkgYW5kIGV2ZXJ5IHNoYXBlIGZyb20gb25lIHdoaWNoIGhhcyBubyByZWFsIGV4aXN0ZW5jZS4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW4gaW1wcmVzc2lvbiBvbiB0aGUgc2Vuc2VzIGlzIGxpa2Ugd2F4LCBhbmQgdGhlIHNvdWwgb2YgbWFuLCBpbiB3aGljaCB0aGUgcGxhc3RpYyBtYXRlcmlhbCBhbmQgdGhlIHBsYXN0aWMgcG93ZXIgYWxpa2UgZXhpc3QsIGNhbiB2ZXJ5IGVhc2lseSBzaGFwZSBhbmQgZW1iZWxsaXNoIGl0IGF0IHBsZWFzdXJlLiBUaGlzIGlzIGNsZWFyIGZyb20gdGhlIHRyYW5zZm9ybWF0aW9ucyB3aGljaCBvY2N1ciBpbiBkcmVhbXMsIHdoZXJlIHNsaWdodCBpbml0aWFsIG1hdGVyaWFsIGlzIHRyYW5zZm9ybWVkIGJ5IHRoZSBpbWFnaW5hdGlvbiBpbnRvIGFsbCBzb3J0cyBvZiBlbW90aW9ucyBhbmQgc2hhcGVzLiBUaGUgaW1hZ2luYXRpb24gaXMgYnkgbmF0dXJlIGluIHBlcnBldHVhbCBtb3Rpb24sIGFuZCB0aGlzIG1vdGlvbiB3aGljaCBpdCBoYXMgaXMgZmFuY3ksIG9yIHRob3VnaHQuIAoJCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aHkgY2FzZSwgdG9vLCB0aGUgYm9keSBpcyB3b3JuIHdpdGggaGFyZHNoaXBzIGFuZCB0aGlzIGNvbmRpdGlvbiBuYXR1cmFsbHkgZXhjaXRlcyBhbmQgcGVydmVydHMgdGhlIGludGVsbGlnZW5jZS4gQXMgZm9yIGdlbmlpLCBpdCBpcyBpbmNyZWRpYmxlIGVpdGhlciB0aGF0IHRoZXkgZXhpc3QsIG9yLCBpZiB0aGV5IGRvIGV4aXN0LCB0aGF0IHRoZXkgaGF2ZSB0aGUgYXBwZWFyYW5jZSBvciB0aGUgc3BlZWNoIG9mIG1lbiwgb3IgYSBwb3dlciB0aGF0IGV4dGVuZHMgdG8gdXMuIEZvciBteSBwYXJ0LCBJIGNvdWxkIHdpc2ggaXQgd2VyZSBzbywgaW4gb3JkZXIgdGhhdCBub3Qgb25seSBvdXIgbWVuLWF0LWFybXMsIGFuZCBob3JzZXMsIGFuZCBzaGlwcywgd2hpY2ggYXJlIHNvIG51bWVyb3VzLCBidXQgYWxzbyB0aGUgYXNzaXN0YW5jZSBvZiB0aGUgZ29kcyBtaWdodCBnaXZlIHVzIGNvdXJhZ2UsIGNvbmR1Y3RpbmcgYXMgd2UgZG8gdGhlIGZhaXJlc3QgYW5kIGhvbGllc3QgZW50ZXJwcmlzZXMuPC9xPiBXaXRoIHN1Y2ggZGlzY291cnNlIGRpZCBDYXNzaXVzIHNlZWsgdG8gY2FsbSBCcnV0dXMuCgkJCTwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuIGltcHJlc3Npb24gb24gdGhlIHNlbnNlcyBpcyBsaWtlIHdheCwgYW5kIHRoZSBzb3VsIG9mIG1hbiwgaW4gd2hpY2ggdGhlIHBsYXN0aWMgbWF0ZXJpYWwgYW5kIHRoZSBwbGFzdGljIHBvd2VyIGFsaWtlIGV4aXN0LCBjYW4gdmVyeSBlYXNpbHkgc2hhcGUgYW5kIGVtYmVsbGlzaCBpdCBhdCBwbGVhc3VyZS4gVGhpcyBpcyBjbGVhciBmcm9tIHRoZSB0cmFuc2Zvcm1hdGlvbnMgd2hpY2ggb2NjdXIgaW4gZHJlYW1zLCB3aGVyZSBzbGlnaHQgaW5pdGlhbCBtYXRlcmlhbCBpcyB0cmFuc2Zvcm1lZCBieSB0aGUgaW1hZ2luYXRpb24gaW50byBhbGwgc29ydHMgb2YgZW1vdGlvbnMgYW5kIHNoYXBlcy4gVGhlIGltYWdpbmF0aW9uIGlzIGJ5IG5hdHVyZSBpbiBwZXJwZXR1YWwgbW90aW9uLCBhbmQgdGhpcyBtb3Rpb24gd2hpY2ggaXQgaGFzIGlzIGZhbmN5LCBvciB0aG91Z2h0LiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoeSBjYXNlLCB0b28sIHRoZSBib2R5IGlzIHdvcm4gd2l0aCBoYXJkc2hpcHMgYW5kIHRoaXMgY29uZGl0aW9uIG5hdHVyYWxseSBleGNpdGVzIGFuZCBwZXJ2ZXJ0cyB0aGUgaW50ZWxsaWdlbmNlLiBBcyBmb3IgZ2VuaWksIGl0IGlzIGluY3JlZGlibGUgZWl0aGVyIHRoYXQgdGhleSBleGlzdCwgb3IsIGlmIHRoZXkgZG8gZXhpc3QsIHRoYXQgdGhleSBoYXZlIHRoZSBhcHBlYXJhbmNlIG9yIHRoZSBzcGVlY2ggb2YgbWVuLCBvciBhIHBvd2VyIHRoYXQgZXh0ZW5kcyB0byB1cy4gRm9yIG15IHBhcnQsIEkgY291bGQgd2lzaCBpdCB3ZXJlIHNvLCBpbiBvcmRlciB0aGF0IG5vdCBvbmx5IG91ciBtZW4tYXQtYXJtcywgYW5kIGhvcnNlcywgYW5kIHNoaXBzLCB3aGljaCBhcmUgc28gbnVtZXJvdXMsIGJ1dCBhbHNvIHRoZSBhc3Npc3RhbmNlIG9mIHRoZSBnb2RzIG1pZ2h0IGdpdmUgdXMgY291cmFnZSwgY29uZHVjdGluZyBhcyB3ZSBkbyB0aGUgZmFpcmVzdCBhbmQgaG9saWVzdCBlbnRlcnByaXNlcy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgYXMgdGhlIHNvbGRpZXJzIHdlcmUgZW1iYXJraW5nLCB0d28gZWFnbGVzIHBlcmNoZWQgdXBvbiB0aGUgZm9yZW1vc3Qgc3RhbmRhcmRzIGFuZCB3ZXJlIGJvcm5lIGFsb25nIHdpdGggdGhlbSwgYW5kIHRoZXkga2VwdCB0aGUgYXJteSBjb21wYW55LCBiZWluZyBmZWQgYnkgdGhlIHNvbGRpZXJzLCBhcyBmYXIgYXMgUGhpbGlwcGkuIFRoZXJlLCBvbmx5IG9uZSBkYXkgYmVmb3JlIHRoZSBiYXR0bGUsIHRoZXkgZmxldyBhd2F5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBhcyB0aGUgc29sZGllcnMgd2VyZSBlbWJhcmtpbmcsIHR3byBlYWdsZXMgcGVyY2hlZCB1cG9uIHRoZSBmb3JlbW9zdCBzdGFuZGFyZHMgYW5kIHdlcmUgYm9ybmUgYWxvbmcgd2l0aCB0aGVtLCBhbmQgdGhleSBrZXB0IHRoZSBhcm15IGNvbXBhbnksIGJlaW5nIGZlZCBieSB0aGUgc29sZGllcnMsIGFzIGZhciBhcyBQaGlsaXBwaS4gVGhlcmUsIG9ubHkgb25lIGRheSBiZWZvcmUgdGhlIGJhdHRsZSwgdGhleSBmbGV3IGF3YXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIHBlb3BsZXMgZW5jb3VudGVyZWQgb24gdGhlIG1hcmNoIEJydXR1cyBoYWQgYWxyZWFkeSBicm91Z2h0IGludG8gc3ViamVjdGlvbjsgYW5kIG5vdywgd2hhdGV2ZXIgY2l0eSBvciBwb3RlbnRhdGUgaGFkIGJlZW4gb21pdHRlZCwgdGhleSB3b24gdGhlbSBhbGwgb3ZlciwgYW5kIGFkdmFuY2VkIGFzIGZhciBhcyB0aGUgVGhhc2lhbiBzZWEuIFRoZXJlIE5vcmJhbnVzIGFuZCBoaXMgYXJteSB3ZXJlIGVuY2FtcGVkLCBhdCB3aGF0IHdlcmUgY2FsbGVkIFRoZSBOYXJyb3dzLCBhbmQgbmVhciBTeW1ib2x1bTsgYnV0IHRoZXkgc3Vycm91bmRlZCBoaW0gYW5kIGNvbXBlbGxlZCBoaW0gdG8gd2l0aGRyYXcgYW5kIGFiYW5kb24gaGlzIHBvc2l0aW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBhbG1vc3QgY2FwdHVyZWQgaGlzIGZvcmNlcywgdG9vLCBzaW5jZSBPY3Rhdml1cyB3YXMgZGVsYXllZCBieSBzaWNrbmVzczsgYW5kIHRoZXkgd291bGQgaGF2ZSBkb25lIHNvIGhhZCBub3QgQW50b255IGNvbWUgdG8gaGlzIGFpZCB3aXRoIHN1Y2ggYXN0b25pc2hpbmcgc3dpZnRuZXNzIHRoYXQgQnJ1dHVzIGNvdWxkIG5vdCBiZWxpZXZlIGluIGl0LiBPY3Rhdml1cyBjYW1lLCBob3dldmVyLCB0ZW4gZGF5cyBsYXRlciwgYW5kIGVuY2FtcGVkIG92ZXIgYWdhaW5zdCBCcnV0dXMsIHdoaWxlIEFudG9ueSBmYWNlZCBDYXNzaXVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCBvZiB0aGUgcGVvcGxlcyBlbmNvdW50ZXJlZCBvbiB0aGUgbWFyY2ggQnJ1dHVzIGhhZCBhbHJlYWR5IGJyb3VnaHQgaW50byBzdWJqZWN0aW9uOyBhbmQgbm93LCB3aGF0ZXZlciBjaXR5IG9yIHBvdGVudGF0ZSBoYWQgYmVlbiBvbWl0dGVkLCB0aGV5IHdvbiB0aGVtIGFsbCBvdmVyLCBhbmQgYWR2YW5jZWQgYXMgZmFyIGFzIHRoZSBUaGFzaWFuIHNlYS4gVGhlcmUgTm9yYmFudXMgYW5kIGhpcyBhcm15IHdlcmUgZW5jYW1wZWQsIGF0IHdoYXQgd2VyZSBjYWxsZWQgVGhlIE5hcnJvd3MsIGFuZCBuZWFyIFN5bWJvbHVtOyBidXQgdGhleSBzdXJyb3VuZGVkIGhpbSBhbmQgY29tcGVsbGVkIGhpbSB0byB3aXRoZHJhdyBhbmQgYWJhbmRvbiBoaXMgcG9zaXRpb25zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgYWxtb3N0IGNhcHR1cmVkIGhpcyBmb3JjZXMsIHRvbywgc2luY2UgT2N0YXZpdXMgd2FzIGRlbGF5ZWQgYnkgc2lja25lc3M7IGFuZCB0aGV5IHdvdWxkIGhhdmUgZG9uZSBzbyBoYWQgbm90IEFudG9ueSBjb21lIHRvIGhpcyBhaWQgd2l0aCBzdWNoIGFzdG9uaXNoaW5nIHN3aWZ0bmVzcyB0aGF0IEJydXR1cyBjb3VsZCBub3QgYmVsaWV2ZSBpbiBpdC4gT2N0YXZpdXMgY2FtZSwgaG93ZXZlciwgdGVuIGRheXMgbGF0ZXIsIGFuZCBlbmNhbXBlZCBvdmVyIGFnYWluc3QgQnJ1dHVzLCB3aGlsZSBBbnRvbnkgZmFjZWQgQ2Fzc2l1cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBsYWlucyBiZXR3ZWVuIHRoZSBhcm1pZXMgdGhlIFJvbWFucyBjYWxsIENhbXBpIFBoaWxpcHBpLCBhbmQgUm9tYW4gZm9yY2VzIG9mIHN1Y2ggc2l6ZSBoYWQgbmV2ZXIgYmVmb3JlIGVuY291bnRlcmVkIG9uZSBhbm90aGVyLiBJbiBudW1iZXJzIHRoZSBhcm15IG9mIEJydXR1cyB3YXMgbXVjaCBpbmZlcmlvciB0byB0aGF0IG9mIE9jdGF2aXVzLCBidXQgaW4gdGhlIHNwbGVuZGlkIGRlY29yYXRpb24gb2YgaXRzIGFybXMgaXQgcHJlc2VudGVkIGEgd29uZGVyZnVsIHNpZ2h0LiBGb3IgbW9zdCBvZiB0aGVpciBhcm1vdXIgd2FzIGNvdmVyZWQgd2l0aCBnb2xkIGFuZCBzaWx2ZXIsIHdpdGggd2hpY2ggQnJ1dHVzIGhhZCBsYXZpc2hseSBzdXBwbGllZCB0aGVtLCBhbHRob3VnaCBpbiBvdGhlciBtYXR0ZXJzIGhlIGFjY3VzdG9tZWQgaGlzIG9mZmljZXJzIHRvIGFkb3B0IGEgdGVtcGVyYXRlIGFuZCByZXN0cmljdGVkIHJlZ2ltZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB0aG91Z2h0IHRoYXQgdGhlIHdlYWx0aCB3aGljaCB0aGV5IGhlbGQgaW4gdGhlaXIgaGFuZHMgYW5kIHdvcmUgdXBvbiB0aGVpciBwZXJzb25zIGdhdmUgYWRkaXRpb25hbCBzcGlyaXQgdG8gdGhlIG1vcmUgYW1iaXRpb3VzLCBhbmQgbWFkZSB0aGUgY292ZXRvdXMgZXZlbiBtb3JlIHdhcmxpa2UsIHNpbmNlIHRoZXkgY2x1bmcgdG8gdGhlaXIgYXJtb3VyIGFzIHNvIG11Y2ggdHJlYXN1cmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwbGFpbnMgYmV0d2VlbiB0aGUgYXJtaWVzIHRoZSBSb21hbnMgY2FsbCBDYW1waSBQaGlsaXBwaSwgYW5kIFJvbWFuIGZvcmNlcyBvZiBzdWNoIHNpemUgaGFkIG5ldmVyIGJlZm9yZSBlbmNvdW50ZXJlZCBvbmUgYW5vdGhlci4gSW4gbnVtYmVycyB0aGUgYXJteSBvZiBCcnV0dXMgd2FzIG11Y2ggaW5mZXJpb3IgdG8gdGhhdCBvZiBPY3Rhdml1cywgYnV0IGluIHRoZSBzcGxlbmRpZCBkZWNvcmF0aW9uIG9mIGl0cyBhcm1zIGl0IHByZXNlbnRlZCBhIHdvbmRlcmZ1bCBzaWdodC4gRm9yIG1vc3Qgb2YgdGhlaXIgYXJtb3VyIHdhcyBjb3ZlcmVkIHdpdGggZ29sZCBhbmQgc2lsdmVyLCB3aXRoIHdoaWNoIEJydXR1cyBoYWQgbGF2aXNobHkgc3VwcGxpZWQgdGhlbSwgYWx0aG91Z2ggaW4gb3RoZXIgbWF0dGVycyBoZSBhY2N1c3RvbWVkIGhpcyBvZmZpY2VycyB0byBhZG9wdCBhIHRlbXBlcmF0ZSBhbmQgcmVzdHJpY3RlZCByZWdpbWVuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB0aG91Z2h0IHRoYXQgdGhlIHdlYWx0aCB3aGljaCB0aGV5IGhlbGQgaW4gdGhlaXIgaGFuZHMgYW5kIHdvcmUgdXBvbiB0aGVpciBwZXJzb25zIGdhdmUgYWRkaXRpb25hbCBzcGlyaXQgdG8gdGhlIG1vcmUgYW1iaXRpb3VzLCBhbmQgbWFkZSB0aGUgY292ZXRvdXMgZXZlbiBtb3JlIHdhcmxpa2UsIHNpbmNlIHRoZXkgY2x1bmcgdG8gdGhlaXIgYXJtb3VyIGFzIHNvIG11Y2ggdHJlYXN1cmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9jdGF2aXVzIGFuZCBBbnRvbnkgbm93IG1hZGUgYSBsdXN0cmF0aW9uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBzb2xlbW4gcmV2aWV3LCB3aXRoIGNlcmVtb25pZXMgb2YgcHVyaWZpY2F0aW9uLjwvbm90ZT4gb2YgdGhlaXIgYXJtaWVzIGluIHRoZWlyIGNhbXBzLCBhbmQgdGhlbiBkaXN0cmlidXRlZCBhIGxpdHRsZSBtZWFsIGFuZCBmaXZlIGRyYWNobWFzIHRvIGV2ZXJ5IG1hbiBmb3IgYSBzYWNyaWZpY2U7IGJ1dCBCcnV0dXMgYW5kIENhc3NpdXMsIGRlc3Bpc2luZyB0aGVpciBlbmVtaWVzJyBwb3ZlcnR5IG9yIHBhcnNpbW9ueSwgZmlyc3QgbWFkZSBsdXN0cmF0aW9uIG9mIHRoZWlyIGFybWllcyBpbiB0aGUgb3BlbiBmaWVsZCwgYXMgdGhlIGN1c3RvbSBpcywgYW5kIHRoZW4gZGlzdHJpYnV0ZWQgZ3JlYXQgbnVtYmVycyBvZiBjYXR0bGUgZm9yIHNhY3JpZmljZSBhbW9uZyB0aGVpciBjb2hvcnRzLCBhbmQgZmlmdHkgZHJhY2htYXMgdG8gZXZlcnkgc29sZGllciwgYW5kIHRodXMsIGluIHRoZSBnb29kd2lsbCBhbmQgemVhbCBvZiB0aGVpciBmb3JjZXMsIHRoZXkgd2VyZSBhdCBhbiBhZHZhbnRhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IHdhcyB0aG91Z2h0IHRoYXQgQ2Fzc2l1cyBoYWQgYSBiYWxlZnVsIHNpZ24gZHVyaW5nIHRoZSBsdXN0cmF0aW9uOyBmb3IgdGhlIGxpY3RvciBicm91Z2h0IGhpbSBoaXMgd3JlYXRoIHR1cm5lZCB1cHNpZGUgZG93bi4gQW5kIGl0IGlzIHNhaWQgdGhhdCBiZWZvcmUgdGhpcywgYWxzbywgaW4gYSBwcm9jZXNzaW9uIGF0IHNvbWUgZmVzdGl2YWwsIGEgZ29sZGVuIFZpY3RvcnkgYmVsb25naW5nIHRvIENhc3NpdXMsIHdoaWNoIHdhcyBiZWluZyBib3JuZSBhbG9uZywgZmVsbCB0byB0aGUgZ3JvdW5kLCBpdHMgYmVhcmVyIGhhdmluZyBzbGlwcGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYmVzaWRlcywgbWFueSBjYXJyaW9uIGJpcmRzIGhvdmVyZWQgb3ZlciB0aGUgY2FtcCBkYWlseSwgYW5kIHN3YXJtcyBvZiBiZWVzIHdlcmUgc2VlbiBjbHVzdGVyaW5nIGF0IGEgY2VydGFpbiBwbGFjZSBpbnNpZGUgdGhlIGNhbXA7IHRoaXMgcGxhY2UgdGhlIHNvb3Roc2F5ZXJzIHNodXQgb2ZmIGZyb20gdGhlIHJlc3Qgb2YgdGhlIGNhbXAsIGluIG9yZGVyIHRvIGF2ZXJ0IGJ5IHRoZWlyIHJpdGVzIHRoZSBzdXBlcnN0aXRpb3VzIGZlYXJzIHdoaWNoIHdlcmUgZ3JhZHVhbGx5IGNhcnJ5aW5nIGV2ZW4gQ2Fzc2l1cyBoaW1zZWxmIGF3YXkgZnJvbSBoaXMgRXBpY3VyZWFuIGRvY3RyaW5lcywgYW5kIHdoaWNoIGhhZCBhbHRvZ2V0aGVyIHN1Ymp1Z2F0ZWQgaGlzIHNvbGRpZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2N0YXZpdXMgYW5kIEFudG9ueSBub3cgbWFkZSBhIGx1c3RyYXRpb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgc29sZW1uIHJldmlldywgd2l0aCBjZXJlbW9uaWVzIG9mIHB1cmlmaWNhdGlvbi48L25vdGU+IG9mIHRoZWlyIGFybWllcyBpbiB0aGVpciBjYW1wcywgYW5kIHRoZW4gZGlzdHJpYnV0ZWQgYSBsaXR0bGUgbWVhbCBhbmQgZml2ZSBkcmFjaG1hcyB0byBldmVyeSBtYW4gZm9yIGEgc2FjcmlmaWNlOyBidXQgQnJ1dHVzIGFuZCBDYXNzaXVzLCBkZXNwaXNpbmcgdGhlaXIgZW5lbWllcycgcG92ZXJ0eSBvciBwYXJzaW1vbnksIGZpcnN0IG1hZGUgbHVzdHJhdGlvbiBvZiB0aGVpciBhcm1pZXMgaW4gdGhlIG9wZW4gZmllbGQsIGFzIHRoZSBjdXN0b20gaXMsIGFuZCB0aGVuIGRpc3RyaWJ1dGVkIGdyZWF0IG51bWJlcnMgb2YgY2F0dGxlIGZvciBzYWNyaWZpY2UgYW1vbmcgdGhlaXIgY29ob3J0cywgYW5kIGZpZnR5IGRyYWNobWFzIHRvIGV2ZXJ5IHNvbGRpZXIsIGFuZCB0aHVzLCBpbiB0aGUgZ29vZHdpbGwgYW5kIHplYWwgb2YgdGhlaXIgZm9yY2VzLCB0aGV5IHdlcmUgYXQgYW4gYWR2YW50YWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGl0IHdhcyB0aG91Z2h0IHRoYXQgQ2Fzc2l1cyBoYWQgYSBiYWxlZnVsIHNpZ24gZHVyaW5nIHRoZSBsdXN0cmF0aW9uOyBmb3IgdGhlIGxpY3RvciBicm91Z2h0IGhpbSBoaXMgd3JlYXRoIHR1cm5lZCB1cHNpZGUgZG93bi4gQW5kIGl0IGlzIHNhaWQgdGhhdCBiZWZvcmUgdGhpcywgYWxzbywgaW4gYSBwcm9jZXNzaW9uIGF0IHNvbWUgZmVzdGl2YWwsIGEgZ29sZGVuIFZpY3RvcnkgYmVsb25naW5nIHRvIENhc3NpdXMsIHdoaWNoIHdhcyBiZWluZyBib3JuZSBhbG9uZywgZmVsbCB0byB0aGUgZ3JvdW5kLCBpdHMgYmVhcmVyIGhhdmluZyBzbGlwcGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzLCBtYW55IGNhcnJpb24gYmlyZHMgaG92ZXJlZCBvdmVyIHRoZSBjYW1wIGRhaWx5LCBhbmQgc3dhcm1zIG9mIGJlZXMgd2VyZSBzZWVuIGNsdXN0ZXJpbmcgYXQgYSBjZXJ0YWluIHBsYWNlIGluc2lkZSB0aGUgY2FtcDsgdGhpcyBwbGFjZSB0aGUgc29vdGhzYXllcnMgc2h1dCBvZmYgZnJvbSB0aGUgcmVzdCBvZiB0aGUgY2FtcCwgaW4gb3JkZXIgdG8gYXZlcnQgYnkgdGhlaXIgcml0ZXMgdGhlIHN1cGVyc3RpdGlvdXMgZmVhcnMgd2hpY2ggd2VyZSBncmFkdWFsbHkgY2FycnlpbmcgZXZlbiBDYXNzaXVzIGhpbXNlbGYgYXdheSBmcm9tIGhpcyBFcGljdXJlYW4gZG9jdHJpbmVzLCBhbmQgd2hpY2ggaGFkIGFsdG9nZXRoZXIgc3VianVnYXRlZCBoaXMgc29sZGllcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSByZWFzb25zIENhc3NpdXMgd2FzIG5vdCBlYWdlciB0byBoYXZlIHRoZSBpc3N1ZSBkZWNpZGVkIGJ5IGJhdHRsZSBhdCBwcmVzZW50LCBidXQgdGhvdWdodCBpdCBiZXN0IHRvIHByb3RyYWN0IHRoZSB3YXIsIHNpbmNlIHRoZXkgd2VyZSBzdHJvbmcgZmluYW5jaWFsbHksIGFsdGhvdWdoIGluZmVyaW9yIGluIHRoZSBudW1iZXIgb2YgdGhlaXIgYXJtcyBhbmQgbWVuLiBCcnV0dXMsIGhvd2V2ZXIsIGV2ZW4gYmVmb3JlIHRoaXMgaGFkIGJlZW4gYW54aW91cyB0byBoYXZlIHRoZSBpc3N1ZSBkZWNpZGVkIGJ5IHRoZSBzcGVlZGllc3Qgb2YgaGF6YXJkcywgdGhhdCBoZSBtaWdodCBlaXRoZXIgcmVzdG9yZSBmcmVlZG9tIHRvIGhpcyBjb3VudHJ5LCBvciByZWxpZXZlIG1hbmtpbmQgb2YgY2FsYW1pdG91cyBleHBlbmRpdHVyZXMgYW5kIHJlcXVpc2l0aW9ucyBmb3IgbWlsaXRhcnkgc2VydmljZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCB0b28sIGhlIHNhdyB0aGF0IGhpcyBob3JzZW1lbiB3ZXJlIHN1Y2Nlc3NmdWwgYW5kIHZpY3RvcmlvdXMgaW4gdGhlIHByZWxpbWluYXJ5IHNraXJtaXNoZXMsIGFuZCB3YXMgdGhlcmVmb3JlIGxpZnRlZCB1cCBpbiBzcGlyaXQuIEJlc2lkZXMsIHN1bmRyeSBkZXNlcnRpb25zIHRvIHRoZSBlbmVteSwgYW5kIHN1c3BpY2lvbnMgYW5kIGFzc2VydGlvbnMgdGhhdCBvdGhlcnMgd291bGQgZm9sbG93LCBicm91Z2h0IG1hbnkgb2YgdGhlIGZyaWVuZHMgb2YgQ2Fzc2l1cyBpbiB0aGUgY291bmNpbCBvdmVyIHRvIHRoZSBzaWRlIG9mIEJydXR1cy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG9uZSBvZiB0aGUgZnJpZW5kcyBvZiBCcnV0dXMsIEF0aWxsaXVzLCBvcHBvc2VkIGhpcyB3aXNoZXMsIGFuZCB1cmdlZCBkZWxheSB0aWxsIHdpbnRlciBhdCBsZWFzdCB3YXMgcGFzdC4gQW5kIHdoZW4gQnJ1dHVzIGFza2VkIGhpbSBob3cgaGUgdGhvdWdodCBoZSB3b3VsZCBiZSBiZXR0ZXIgb2ZmIGFub3RoZXIgeWVhciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiBpbiBubyBvdGhlciB3YXksPC9xPiBzYWlkIEF0aWxsaXVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2hhbGwgaGF2ZSBsaXZlZCBsb25nZXIuPC9xPiBBdCB0aGlzIGFuc3dlciBDYXNzaXVzIHdhcyB2ZXhlZCwgYW5kIHRoZSByZXN0IGFsc28gd2VyZSBub3QgYSBsaXR0bGUgYW5ub3llZCBieSBBdGlsbGl1cy4gU28gaXQgd2FzIHByZXNlbnRseSBkZWNpZGVkIHRvIGdpdmUgYmF0dGxlIG9uIHRoZSBuZXh0IGRheS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSByZWFzb25zIENhc3NpdXMgd2FzIG5vdCBlYWdlciB0byBoYXZlIHRoZSBpc3N1ZSBkZWNpZGVkIGJ5IGJhdHRsZSBhdCBwcmVzZW50LCBidXQgdGhvdWdodCBpdCBiZXN0IHRvIHByb3RyYWN0IHRoZSB3YXIsIHNpbmNlIHRoZXkgd2VyZSBzdHJvbmcgZmluYW5jaWFsbHksIGFsdGhvdWdoIGluZmVyaW9yIGluIHRoZSBudW1iZXIgb2YgdGhlaXIgYXJtcyBhbmQgbWVuLiBCcnV0dXMsIGhvd2V2ZXIsIGV2ZW4gYmVmb3JlIHRoaXMgaGFkIGJlZW4gYW54aW91cyB0byBoYXZlIHRoZSBpc3N1ZSBkZWNpZGVkIGJ5IHRoZSBzcGVlZGllc3Qgb2YgaGF6YXJkcywgdGhhdCBoZSBtaWdodCBlaXRoZXIgcmVzdG9yZSBmcmVlZG9tIHRvIGhpcyBjb3VudHJ5LCBvciByZWxpZXZlIG1hbmtpbmQgb2YgY2FsYW1pdG91cyBleHBlbmRpdHVyZXMgYW5kIHJlcXVpc2l0aW9ucyBmb3IgbWlsaXRhcnkgc2VydmljZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgdG9vLCBoZSBzYXcgdGhhdCBoaXMgaG9yc2VtZW4gd2VyZSBzdWNjZXNzZnVsIGFuZCB2aWN0b3Jpb3VzIGluIHRoZSBwcmVsaW1pbmFyeSBza2lybWlzaGVzLCBhbmQgd2FzIHRoZXJlZm9yZSBsaWZ0ZWQgdXAgaW4gc3Bpcml0LiBCZXNpZGVzLCBzdW5kcnkgZGVzZXJ0aW9ucyB0byB0aGUgZW5lbXksIGFuZCBzdXNwaWNpb25zIGFuZCBhc3NlcnRpb25zIHRoYXQgb3RoZXJzIHdvdWxkIGZvbGxvdywgYnJvdWdodCBtYW55IG9mIHRoZSBmcmllbmRzIG9mIENhc3NpdXMgaW4gdGhlIGNvdW5jaWwgb3ZlciB0byB0aGUgc2lkZSBvZiBCcnV0dXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBvbmUgb2YgdGhlIGZyaWVuZHMgb2YgQnJ1dHVzLCBBdGlsbGl1cywgb3Bwb3NlZCBoaXMgd2lzaGVzLCBhbmQgdXJnZWQgZGVsYXkgdGlsbCB3aW50ZXIgYXQgbGVhc3Qgd2FzIHBhc3QuIEFuZCB3aGVuIEJydXR1cyBhc2tlZCBoaW0gaG93IGhlIHRob3VnaHQgaGUgd291bGQgYmUgYmV0dGVyIG9mZiBhbm90aGVyIHllYXIsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiBpbiBubyBvdGhlciB3YXksPC9xPiBzYWlkIEF0aWxsaXVzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzaGFsbCBoYXZlIGxpdmVkIGxvbmdlci48L3E+IEF0IHRoaXMgYW5zd2VyIENhc3NpdXMgd2FzIHZleGVkLCBhbmQgdGhlIHJlc3QgYWxzbyB3ZXJlIG5vdCBhIGxpdHRsZSBhbm5veWVkIGJ5IEF0aWxsaXVzLiBTbyBpdCB3YXMgcHJlc2VudGx5IGRlY2lkZWQgdG8gZ2l2ZSBiYXR0bGUgb24gdGhlIG5leHQgZGF5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CcnV0dXMgd2FzIGZ1bGwgb2YgaG9wZWZ1bG5lc3MgYXQgc3VwcGVyLCBhbmQgYWZ0ZXIgZW5nYWdpbmcgaW4gcGhpbG9zb3BoaWNhbCBkaXNjdXNzaW9uLCB3ZW50IHRvIHJlc3Q7IGJ1dCBDYXNzaXVzLCBhcyBNZXNzYWxhIHRlbGxzIHVzLCBzdXBwZWQgaW4gcHJpdmF0ZSB3aXRoIGEgZmV3IG9mIGhpcyBpbnRpbWF0ZXMsIGFuZCB3YXMgc2VlbiB0byBiZSBzaWxlbnQgYW5kIHBlbnNpdmUsIGNvbnRyYXJ5IHRvIGhpcyB1c3VhbCBuYXR1cmUuIFdoZW4gc3VwcGVyIHdhcyBvdmVyLCBoZSBncmFzcGVkIE1lc3NhbGEncyBoYW5kIHdhcm1seSwgYW5kLCBzcGVha2luZyBpbiBHcmVlaywgYXMgd2FzIGhpcyBjdXN0b20gd2hlbiBoZSB3b3VsZCBzaG93IGFmZmVjdGlvbiwgc2FpZDogCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY2FsbCB0aGVlIHRvIHdpdG5lc3MsIE1lc3NhbGEsIHRoYXQgSSBhbSBpbiB0aGUgc2FtZSBwbGlnaHQgYXMgUG9tcGV5IHRoZSBHcmVhdCwgaW4gdGhhdCBJIGFtIGZvcmNlZCB0byBoYXphcmQgdGhlIGZhdGUgb2YgbXkgY291bnRyeSBvbiB0aGUgaXNzdWUgb2YgYSBzaW5nbGUgYmF0dGxlLiBXaXRoIGdvb2QgY291cmFnZSwgaG93ZXZlciwgbGV0IHVzIGZpeCBvdXIgd2FpdGluZyBleWVzIG9uIEZvcnR1bmUsIG9mIHdob20sIGV2ZW4gdGhvdWdoIG91ciBjb3Vuc2VscyBiZSBpbmZpcm0sIGl0IGlzIG5vdCByaWdodCB0aGF0IHdlIHNob3VsZCBiZSBkaXN0cnVzdGZ1bC48L3E+IFdpdGggdGhlc2UgbGFzdCB3b3JkcyB0byBoaW0sIE1lc3NhbGEgc2F5cywgQ2Fzc2l1cyBlbWJyYWNlZCBoaW07IGFuZCBoZSBoYWQgYWxyZWFkeSBpbnZpdGVkIGhpbSB0byBzdXBwZXIgb24gdGhlIGZvbGxvd2luZyBkYXksIHdoaWNoIHdhcyBoaXMgYmlydGhkYXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnJ1dHVzIHdhcyBmdWxsIG9mIGhvcGVmdWxuZXNzIGF0IHN1cHBlciwgYW5kIGFmdGVyIGVuZ2FnaW5nIGluIHBoaWxvc29waGljYWwgZGlzY3Vzc2lvbiwgd2VudCB0byByZXN0OyBidXQgQ2Fzc2l1cywgYXMgTWVzc2FsYSB0ZWxscyB1cywgc3VwcGVkIGluIHByaXZhdGUgd2l0aCBhIGZldyBvZiBoaXMgaW50aW1hdGVzLCBhbmQgd2FzIHNlZW4gdG8gYmUgc2lsZW50IGFuZCBwZW5zaXZlLCBjb250cmFyeSB0byBoaXMgdXN1YWwgbmF0dXJlLiBXaGVuIHN1cHBlciB3YXMgb3ZlciwgaGUgZ3Jhc3BlZCBNZXNzYWxhJ3MgaGFuZCB3YXJtbHksIGFuZCwgc3BlYWtpbmcgaW4gR3JlZWssIGFzIHdhcyBoaXMgY3VzdG9tIHdoZW4gaGUgd291bGQgc2hvdyBhZmZlY3Rpb24sIHNhaWQ6IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY2FsbCB0aGVlIHRvIHdpdG5lc3MsIE1lc3NhbGEsIHRoYXQgSSBhbSBpbiB0aGUgc2FtZSBwbGlnaHQgYXMgUG9tcGV5IHRoZSBHcmVhdCwgaW4gdGhhdCBJIGFtIGZvcmNlZCB0byBoYXphcmQgdGhlIGZhdGUgb2YgbXkgY291bnRyeSBvbiB0aGUgaXNzdWUgb2YgYSBzaW5nbGUgYmF0dGxlLiBXaXRoIGdvb2QgY291cmFnZSwgaG93ZXZlciwgbGV0IHVzIGZpeCBvdXIgd2FpdGluZyBleWVzIG9uIEZvcnR1bmUsIG9mIHdob20sIGV2ZW4gdGhvdWdoIG91ciBjb3Vuc2VscyBiZSBpbmZpcm0sIGl0IGlzIG5vdCByaWdodCB0aGF0IHdlIHNob3VsZCBiZSBkaXN0cnVzdGZ1bC48L3E+IFdpdGggdGhlc2UgbGFzdCB3b3JkcyB0byBoaW0sIE1lc3NhbGEgc2F5cywgQ2Fzc2l1cyBlbWJyYWNlZCBoaW07IGFuZCBoZSBoYWQgYWxyZWFkeSBpbnZpdGVkIGhpbSB0byBzdXBwZXIgb24gdGhlIGZvbGxvd2luZyBkYXksIHdoaWNoIHdhcyBoaXMgYmlydGhkYXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgaXQgd2FzIGRheSwgYSBzY2FybGV0IHR1bmljLCB0aGUgc2lnbmFsIGZvciBiYXR0bGUsIHdhcyBkaXNwbGF5ZWQgYmVmb3JlIHRoZSBjYW1wcyBvZiBCcnV0dXMgYW5kIENhc3NpdXMsIGFuZCB0aGV5IHRoZW1zZWx2ZXMgY2FtZSB0b2dldGhlciBpbnRvIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZWlyIGFybWllcyBIZXJlIENhc3NpdXMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NYXkgd2UgYmUgdmljdG9yaW91cywgQnJ1dHVzLCBhbmQgZXZlciBhZnRlcndhcmRzIHNoYXJlIGEgbXV0dWFsIHByb3NwZXJpdHk7IGJ1dCBzaW5jZSB0aGUgbW9zdCBpbXBvcnRhbnQgb2YgaHVtYW4gYWZmYWlycyBhcmUgbW9zdCB1bmNlcnRhaW4sIGFuZCBzaW5jZSwgaWYgdGhlIGJhdHRsZSBnb2VzIGNvbnRyYXJ5IHRvIG91ciB3aXNoZXMsIHdlIHNoYWxsIG5vdCBlYXNpbHkgc2VlIG9uZSBhbm90aGVyIGFnYWluLCB3aGF0IGlzIHRoeSBmZWVsaW5nIGFib3V0IGZsaWdodCBhbmQgZGVhdGg/PC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBCcnV0dXMgbWFkZSBhbnN3ZXI6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hlbiBJIHdhcyBhIHlvdW5nIG1hbiwgQ2Fzc2l1cywgYW5kIHdpdGhvdXQgZXhwZXJpZW5jZSBvZiB0aGUgd29ybGQsIEkgd2FzIGxlZCwgSSBrbm93IG5vdCBob3csIHRvIHNwZWFrIHRvbyByYXNobHkgZm9yIGEgcGhpbG9zb3BoZXIuIEkgYmxhbWVkIENhdG8gZm9yIG1ha2luZyBhd2F5IHdpdGggaGltc2VsZiwgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyBpbXBpb3VzIGFuZCB1bm1hbmx5IHRvIHlpZWxkIHRvIG9uZSdzIGV2aWwgZ2VuaXVzLCBub3QgYWNjZXB0aW5nIGZlYXJsZXNzbHkgd2hhdGV2ZXIgYmVmYWxscywgYnV0IHJ1bm5pbmcgYXdheS4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIG15IHByZXNlbnQgZm9ydHVuZXMsIGhvd2V2ZXIsIEkgYW0gYmVjb21lIG9mIGEgZGlmZmVyZW50IG1pbmQ7IGFuZCBpZiBHb2QgZG9lcyBub3QgZGVjaWRlIHRoZSBwcmVzZW50IGlzc3VlIGluIG91ciBmYXZvdXIsIGRvIG5vdCBhc2sgb25jZSBtb3JlIHRvIHB1dCBmcmVzaCBob3BlcyBhbmQgcHJlcGFyYXRpb25zIHRvIHRoZSB0ZXN0LCBidXQgSSB3aWxsIGdvIGhlbmNlIHdpdGggd29yZHMgb2YgcHJhaXNlIGZvciBGb3J0dW5lOyBvbiB0aGUgSWRlcyBvZiBNYXJjaCBJIGdhdmUgbXkgb3duIGxpZmUgdG8gbXkgY291bnRyeSwgYW5kIHNpbmNlIHRoZWlyLCBmb3IgaGVyIHNha2UsIEkgaGF2ZSBsaXZlZCBhbm90aGVyIGxpZmUgb2YgbGliZXJ0eSBhbmQgZ2xvcnkuPC9xPiBBdCB0aGVzZSB3b3JkcyBDYXNzaXVzIHNtaWxlZCwgYW5kIGFmdGVyIGVtYnJhY2luZyBCcnV0dXMsIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGh1cyBtaW5kZWQsIGxldCB1cyBnbyBhZ2FpbnN0IHRoZSBlbmVteTsgZm9yIGVpdGhlciB3ZSBzaGFsbCBiZSB2aWN0b3Jpb3VzLCBvciB3ZSBzaGFsbCBub3QgZmVhciB0aGUgdmljdG9ycy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgaXQgd2FzIGRheSwgYSBzY2FybGV0IHR1bmljLCB0aGUgc2lnbmFsIGZvciBiYXR0bGUsIHdhcyBkaXNwbGF5ZWQgYmVmb3JlIHRoZSBjYW1wcyBvZiBCcnV0dXMgYW5kIENhc3NpdXMsIGFuZCB0aGV5IHRoZW1zZWx2ZXMgY2FtZSB0b2dldGhlciBpbnRvIHRoZSBzcGFjZSBiZXR3ZWVuIHRoZWlyIGFybWllcyBIZXJlIENhc3NpdXMgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1heSB3ZSBiZSB2aWN0b3Jpb3VzLCBCcnV0dXMsIGFuZCBldmVyIGFmdGVyd2FyZHMgc2hhcmUgYSBtdXR1YWwgcHJvc3Blcml0eTsgYnV0IHNpbmNlIHRoZSBtb3N0IGltcG9ydGFudCBvZiBodW1hbiBhZmZhaXJzIGFyZSBtb3N0IHVuY2VydGFpbiwgYW5kIHNpbmNlLCBpZiB0aGUgYmF0dGxlIGdvZXMgY29udHJhcnkgdG8gb3VyIHdpc2hlcywgd2Ugc2hhbGwgbm90IGVhc2lseSBzZWUgb25lIGFub3RoZXIgYWdhaW4sIHdoYXQgaXMgdGh5IGZlZWxpbmcgYWJvdXQgZmxpZ2h0IGFuZCBkZWF0aD88L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['40.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBCcnV0dXMgbWFkZSBhbnN3ZXI6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGVuIEkgd2FzIGEgeW91bmcgbWFuLCBDYXNzaXVzLCBhbmQgd2l0aG91dCBleHBlcmllbmNlIG9mIHRoZSB3b3JsZCwgSSB3YXMgbGVkLCBJIGtub3cgbm90IGhvdywgdG8gc3BlYWsgdG9vIHJhc2hseSBmb3IgYSBwaGlsb3NvcGhlci4gSSBibGFtZWQgQ2F0byBmb3IgbWFraW5nIGF3YXkgd2l0aCBoaW1zZWxmLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaXQgd2FzIGltcGlvdXMgYW5kIHVubWFubHkgdG8geWllbGQgdG8gb25lJ3MgZXZpbCBnZW5pdXMsIG5vdCBhY2NlcHRpbmcgZmVhcmxlc3NseSB3aGF0ZXZlciBiZWZhbGxzLCBidXQgcnVubmluZyBhd2F5LiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBteSBwcmVzZW50IGZvcnR1bmVzLCBob3dldmVyLCBJIGFtIGJlY29tZSBvZiBhIGRpZmZlcmVudCBtaW5kOyBhbmQgaWYgR29kIGRvZXMgbm90IGRlY2lkZSB0aGUgcHJlc2VudCBpc3N1ZSBpbiBvdXIgZmF2b3VyLCBkbyBub3QgYXNrIG9uY2UgbW9yZSB0byBwdXQgZnJlc2ggaG9wZXMgYW5kIHByZXBhcmF0aW9ucyB0byB0aGUgdGVzdCwgYnV0IEkgd2lsbCBnbyBoZW5jZSB3aXRoIHdvcmRzIG9mIHByYWlzZSBmb3IgRm9ydHVuZTsgb24gdGhlIElkZXMgb2YgTWFyY2ggSSBnYXZlIG15IG93biBsaWZlIHRvIG15IGNvdW50cnksIGFuZCBzaW5jZSB0aGVpciwgZm9yIGhlciBzYWtlLCBJIGhhdmUgbGl2ZWQgYW5vdGhlciBsaWZlIG9mIGxpYmVydHkgYW5kIGdsb3J5LjwvcT4gQXQgdGhlc2Ugd29yZHMgQ2Fzc2l1cyBzbWlsZWQsIGFuZCBhZnRlciBlbWJyYWNpbmcgQnJ1dHVzLCBzYWlkOiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['40.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluIG15IHByZXNlbnQgZm9ydHVuZXMsIGhvd2V2ZXIsIEkgYW0gYmVjb21lIG9mIGEgZGlmZmVyZW50IG1pbmQ7IGFuZCBpZiBHb2QgZG9lcyBub3QgZGVjaWRlIHRoZSBwcmVzZW50IGlzc3VlIGluIG91ciBmYXZvdXIsIGRvIG5vdCBhc2sgb25jZSBtb3JlIHRvIHB1dCBmcmVzaCBob3BlcyBhbmQgcHJlcGFyYXRpb25zIHRvIHRoZSB0ZXN0LCBidXQgSSB3aWxsIGdvIGhlbmNlIHdpdGggd29yZHMgb2YgcHJhaXNlIGZvciBGb3J0dW5lOyBvbiB0aGUgSWRlcyBvZiBNYXJjaCBJIGdhdmUgbXkgb3duIGxpZmUgdG8gbXkgY291bnRyeSwgYW5kIHNpbmNlIHRoZWlyLCBmb3IgaGVyIHNha2UsIEkgaGF2ZSBsaXZlZCBhbm90aGVyIGxpZmUgb2YgbGliZXJ0eSBhbmQgZ2xvcnkuPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaHVzIG1pbmRlZCwgbGV0IHVzIGdvIGFnYWluc3QgdGhlIGVuZW15OyBmb3IgZWl0aGVyIHdlIHNoYWxsIGJlIHZpY3RvcmlvdXMsIG9yIHdlIHNoYWxsIG5vdCBmZWFyIHRoZSB2aWN0b3JzLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhleSBjb25mZXJyZWQgdG9nZXRoZXIgYWJvdXQgdGhlIG9yZGVyIG9mIGJhdHRsZSBpbiB0aGUgcHJlc2VuY2Ugb2YgdGhlaXIgZnJpZW5kcy4gQW5kIEJydXR1cyBhc2tlZCBDYXNzaXVzIHRoYXQgaGUgbWlnaHQgaGF2ZSBjb21tYW5kIG9mIHRoZSByaWdodCB3aW5nIGhpbXNlbGYsIGFsdGhvdWdoIGhpcyB5ZWFycyBhbmQgZXhwZXJpZW5jZSBtYWRlIHRoaXMgcG9zdCBzZWVtIG1vcmUgYXBwcm9wcmlhdGUgZm9yIENhc3NpdXMuIEhvd2V2ZXIsIENhc3NpdXMgbm90IG9ubHkgZ3JhbnRlZCBoaW0gdGhpcyBmYXZvdXIsIGJ1dCBhbHNvIG9yZGVyZWQgTWVzc2FsYSB3aXRoIHRoZSBtb3N0IHdhcmxpa2Ugb2YgdGhlIGxlZ2lvbnMgdG8gdGFrZSBwb3NpdGlvbiBvbiB0aGUgcmlnaHQuIEJydXR1cyBhdCBvbmNlIGxlZCBvdXQgaGlzIGhvcnNlbWVuIG1hZ25pZmljZW50bHkgZXF1aXBwZWQsIGFuZCB3aXRoIG5vIGxlc3MgcHJvbXB0bmVzcyBwdXQgaGlzIGluZmFudHJ5IGFsc28gaW4gYXJyYXkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRoZXkgY29uZmVycmVkIHRvZ2V0aGVyIGFib3V0IHRoZSBvcmRlciBvZiBiYXR0bGUgaW4gdGhlIHByZXNlbmNlIG9mIHRoZWlyIGZyaWVuZHMuIEFuZCBCcnV0dXMgYXNrZWQgQ2Fzc2l1cyB0aGF0IGhlIG1pZ2h0IGhhdmUgY29tbWFuZCBvZiB0aGUgcmlnaHQgd2luZyBoaW1zZWxmLCBhbHRob3VnaCBoaXMgeWVhcnMgYW5kIGV4cGVyaWVuY2UgbWFkZSB0aGlzIHBvc3Qgc2VlbSBtb3JlIGFwcHJvcHJpYXRlIGZvciBDYXNzaXVzLiBIb3dldmVyLCBDYXNzaXVzIG5vdCBvbmx5IGdyYW50ZWQgaGltIHRoaXMgZmF2b3VyLCBidXQgYWxzbyBvcmRlcmVkIE1lc3NhbGEgd2l0aCB0aGUgbW9zdCB3YXJsaWtlIG9mIHRoZSBsZWdpb25zIHRvIHRha2UgcG9zaXRpb24gb24gdGhlIHJpZ2h0LiBCcnV0dXMgYXQgb25jZSBsZWQgb3V0IGhpcyBob3JzZW1lbiBtYWduaWZpY2VudGx5IGVxdWlwcGVkLCBhbmQgd2l0aCBubyBsZXNzIHByb21wdG5lc3MgcHV0IGhpcyBpbmZhbnRyeSBhbHNvIGluIGFycmF5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc29sZGllcnMgb2YgQW50b255IHdlcmUgZW5nYWdlZCBpbiBydW5uaW5nIHRyZW5jaGVzIGZyb20gdGhlIG1hcnNoZXMsIGF0IHdoaWNoIHRoZXkgd2VyZSBlbmNhbXBlZCwgaW50byB0aGUgcGxhaW4sIHRodXMgY3V0dGluZyBvZmYgQ2Fzc2l1cyBmcm9tIGFjY2VzcyB0byB0aGUgc2VhLiBPY3Rhdml1cyB3YXMgcXVpZXRseSB3YXRjaGluZyB0aGUgY291cnNlIG9mIGV2ZW50cyzigJRub3QgYmVpbmcgcHJlc2VudCBpbiBwZXJzb24sIG93aW5nIHRvIHNpY2tuZXNzLCBidXQgaGlzIGZvcmNlcyBmb3IgaGltOyB0aGV5IGhhZCBubyBleHBlY3RhdGlvbiBhdCBhbGwgdGhhdCB0aGVpciBlbmVtaWVzIHdvdWxkIGdpdmUgYmF0dGxlLCBidXQgdGhvdWdodCB0aGV5IHdvdWxkIG1lcmVseSBzYWxseSBvdXQgYWdhaW5zdCB0aGUgd29ya3MgYW5kIHdpdGggbGlnaHQgbWlzc2lsZXMgYW5kIGNsYW1vcm91cyBjcmllcyB0cnkgdG8gZGlzdHVyYiB0aGUgd29ya2VycyBpbiB0aGUgdHJlbmNoZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHBheWluZyBubyBhdHRlbnRpb24gdG8gdGhlaXIgb3Bwb25lbnRzLCB0aGV5IHdlcmUgYW1hemVkIGF0IHRoZSBsb3VkIGFuZCBjb25mdXNlZCBvdXRjcmllcyB3aGljaCBjYW1lIHRvIHRoZW0gZnJvbSB0aGUgdHJlbmNoZXMuIEF0IHRoaXMgcG9pbnQsIHdoaWxlIHRpY2tldHMgd2l0aCB0aGUgd2F0Y2h3b3JkIHdyaXR0ZW4gdXBvbiB0aGVtIHdlcmUgYmVpbmcgY2FycmllZCB0byBoaXMgb2ZmaWNlcnMgZnJvbSBCcnV0dXMsIGFuZCB3aGlsZSBCcnV0dXMgaGltc2VsZiB3YXMgcmlkaW5nIGFsb25nIHBhc3QgdGhlIGxlZ2lvbnMgYW5kIGVuY291cmFnaW5nIHRoZW0sIGZldyBvZiBoaXMgbWVuIHN1Y2NlZWRlZCBpbiBoZWFyaW5nIHRoZSB3YXRjaHdvcmQgYXMgaXQgd2FzIHBhc3NlZCBhbG9uZywgYnV0IG1vc3Qgb2YgdGhlbSwgd2l0aG91dCB3YWl0aW5nIGZvciBpdCwgd2l0aCBvbmUgaW1wdWxzZSBhbmQgd2l0aCBvbmUgd2FyLWNyeSwgcnVzaGVkIHVwb24gdGhlIGVuZW15LgoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzIGRpc29yZGVyIHRocmV3IHRoZSBsZWdpb25zIG91dCBvZiBsaW5lIGFuZCB0b3VjaCB3aXRoIG9uZSBhbm90aGVyLCBhbmQgZmlyc3QgdGhhdCBvZiBNZXNzYWxhLCB0aGVuIHRob3NlIHRoYXQgaGFkIGJlZW4gZHJhd24gdXAgd2l0aCBpdCwgd2VudCBiZXlvbmQgdGhlIGxlZnQgd2luZyBvZiBPY3Rhdml1czsgdGhleSBoYWQgb25seSBhIGJyaWVmIGNvbnRhY3Qgd2l0aCBpdHMgb3V0ZXJtb3N0IGxpbmVzLCBhbmQgc2xldyBvbmx5IGEgZmV3IG1lbiwgYnV0IG91dGZsYW5rZWQgaXQgYW5kIGJ1cnN0IGludG8gdGhlaXIgY2FtcC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIE9jdGF2aXVzLCBhcyBoZSBoaW1zZWxmIHRlbGxzIHVzIGluIGhpcyBDb21tZW50YXJpZXMsIGluIGNvbnNlcXVlbmNlIG9mIGEgdmlzaW9uIHdoaWNoIHZpc2l0ZWQgb25lIG9mIGhpcyBmcmllbmRzLCBNYXJjdXMgQXJ0b3JpdXMsIGFuZCBvcmRlcmVkIHRoYXQgT2N0YXZpdXMgc2hvdWxkIHJpc2UgdXAgZnJvbSBoaXMgYmVkIGFuZCBkZXBhcnQgZnJvbSB0aGUgY2FtcCwgYmFyZWx5IHN1Y2NlZWRlZCBpbiBoYXZpbmcgaGltc2VsZiBjYXJyaWVkIGZvcnRoLCBhbmQgd2FzIHRob3VnaHQgdG8gaGF2ZSBiZWVuIHNsYWluLiBGb3IgaGlzIGxpdHRlciwgd2hlbiBlbXB0eSwgd2FzIHBpZXJjZWQgYnkgdGhlIGphdmVsaW5zIGFuZCBzcGVhcnMgb2YgaGlzIGVuZW1pZXMuIFRob3NlIHdobyB3ZXJlIHRha2VuIHByaXNvbmVycyBpbiB0aGUgY2FtcCB3ZXJlIHNsYXVnaHRlcmVkLCBhbmQgdHdvIHRob3VzYW5kIExhY2VkYWVtb25pYW5zIHdobyBoYWQgcmVjZW50bHkgY29tZSBhcyBhdXhpbGlhcmllcyB3ZXJlIGN1dCB0byBwaWVjZXMgYWxvbmcgd2l0aCB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNvbGRpZXJzIG9mIEFudG9ueSB3ZXJlIGVuZ2FnZWQgaW4gcnVubmluZyB0cmVuY2hlcyBmcm9tIHRoZSBtYXJzaGVzLCBhdCB3aGljaCB0aGV5IHdlcmUgZW5jYW1wZWQsIGludG8gdGhlIHBsYWluLCB0aHVzIGN1dHRpbmcgb2ZmIENhc3NpdXMgZnJvbSBhY2Nlc3MgdG8gdGhlIHNlYS4gT2N0YXZpdXMgd2FzIHF1aWV0bHkgd2F0Y2hpbmcgdGhlIGNvdXJzZSBvZiBldmVudHMs4oCUbm90IGJlaW5nIHByZXNlbnQgaW4gcGVyc29uLCBvd2luZyB0byBzaWNrbmVzcywgYnV0IGhpcyBmb3JjZXMgZm9yIGhpbTsgdGhleSBoYWQgbm8gZXhwZWN0YXRpb24gYXQgYWxsIHRoYXQgdGhlaXIgZW5lbWllcyB3b3VsZCBnaXZlIGJhdHRsZSwgYnV0IHRob3VnaHQgdGhleSB3b3VsZCBtZXJlbHkgc2FsbHkgb3V0IGFnYWluc3QgdGhlIHdvcmtzIGFuZCB3aXRoIGxpZ2h0IG1pc3NpbGVzIGFuZCBjbGFtb3JvdXMgY3JpZXMgdHJ5IHRvIGRpc3R1cmIgdGhlIHdvcmtlcnMgaW4gdGhlIHRyZW5jaGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHBheWluZyBubyBhdHRlbnRpb24gdG8gdGhlaXIgb3Bwb25lbnRzLCB0aGV5IHdlcmUgYW1hemVkIGF0IHRoZSBsb3VkIGFuZCBjb25mdXNlZCBvdXRjcmllcyB3aGljaCBjYW1lIHRvIHRoZW0gZnJvbSB0aGUgdHJlbmNoZXMuIEF0IHRoaXMgcG9pbnQsIHdoaWxlIHRpY2tldHMgd2l0aCB0aGUgd2F0Y2h3b3JkIHdyaXR0ZW4gdXBvbiB0aGVtIHdlcmUgYmVpbmcgY2FycmllZCB0byBoaXMgb2ZmaWNlcnMgZnJvbSBCcnV0dXMsIGFuZCB3aGlsZSBCcnV0dXMgaGltc2VsZiB3YXMgcmlkaW5nIGFsb25nIHBhc3QgdGhlIGxlZ2lvbnMgYW5kIGVuY291cmFnaW5nIHRoZW0sIGZldyBvZiBoaXMgbWVuIHN1Y2NlZWRlZCBpbiBoZWFyaW5nIHRoZSB3YXRjaHdvcmQgYXMgaXQgd2FzIHBhc3NlZCBhbG9uZywgYnV0IG1vc3Qgb2YgdGhlbSwgd2l0aG91dCB3YWl0aW5nIGZvciBpdCwgd2l0aCBvbmUgaW1wdWxzZSBhbmQgd2l0aCBvbmUgd2FyLWNyeSwgcnVzaGVkIHVwb24gdGhlIGVuZW15LgoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzIGRpc29yZGVyIHRocmV3IHRoZSBsZWdpb25zIG91dCBvZiBsaW5lIGFuZCB0b3VjaCB3aXRoIG9uZSBhbm90aGVyLCBhbmQgZmlyc3QgdGhhdCBvZiBNZXNzYWxhLCB0aGVuIHRob3NlIHRoYXQgaGFkIGJlZW4gZHJhd24gdXAgd2l0aCBpdCwgd2VudCBiZXlvbmQgdGhlIGxlZnQgd2luZyBvZiBPY3Rhdml1czsgdGhleSBoYWQgb25seSBhIGJyaWVmIGNvbnRhY3Qgd2l0aCBpdHMgb3V0ZXJtb3N0IGxpbmVzLCBhbmQgc2xldyBvbmx5IGEgZmV3IG1lbiwgYnV0IG91dGZsYW5rZWQgaXQgYW5kIGJ1cnN0IGludG8gdGhlaXIgY2FtcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBPY3Rhdml1cywgYXMgaGUgaGltc2VsZiB0ZWxscyB1cyBpbiBoaXMgQ29tbWVudGFyaWVzLCBpbiBjb25zZXF1ZW5jZSBvZiBhIHZpc2lvbiB3aGljaCB2aXNpdGVkIG9uZSBvZiBoaXMgZnJpZW5kcywgTWFyY3VzIEFydG9yaXVzLCBhbmQgb3JkZXJlZCB0aGF0IE9jdGF2aXVzIHNob3VsZCByaXNlIHVwIGZyb20gaGlzIGJlZCBhbmQgZGVwYXJ0IGZyb20gdGhlIGNhbXAsIGJhcmVseSBzdWNjZWVkZWQgaW4gaGF2aW5nIGhpbXNlbGYgY2FycmllZCBmb3J0aCwgYW5kIHdhcyB0aG91Z2h0IHRvIGhhdmUgYmVlbiBzbGFpbi4gRm9yIGhpcyBsaXR0ZXIsIHdoZW4gZW1wdHksIHdhcyBwaWVyY2VkIGJ5IHRoZSBqYXZlbGlucyBhbmQgc3BlYXJzIG9mIGhpcyBlbmVtaWVzLiBUaG9zZSB3aG8gd2VyZSB0YWtlbiBwcmlzb25lcnMgaW4gdGhlIGNhbXAgd2VyZSBzbGF1Z2h0ZXJlZCwgYW5kIHR3byB0aG91c2FuZCBMYWNlZGFlbW9uaWFucyB3aG8gaGFkIHJlY2VudGx5IGNvbWUgYXMgYXV4aWxpYXJpZXMgd2VyZSBjdXQgdG8gcGllY2VzIGFsb25nIHdpdGggdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxlZ2lvbnMgb2YgQnJ1dHVzIHdoaWNoIGhhZCBub3Qgb3V0ZmxhbmtlZCB0aGUgZm9yY2VzIG9mIE9jdGF2aXVzLCBidXQgZW5nYWdlZCB0aGVtIGluIGJhdHRsZSwgZWFzaWx5IHJvdXRlZCB0aGVtIGluIHRoZWlyIGNvbmZ1c2lvbiBhbmQgY3V0IHRvIHBpZWNlcyB0aHJlZSBsZWdpb25zIGF0IGNsb3NlIHF1YXJ0ZXJzOyB0aGVuIHRoZXkgZGFzaGVkIGludG8gdGhlaXIgY2FtcCB3aXRoIHRoZSBmdWdpdGl2ZXMsIGJvcm5lIG9uIGJ5IHRoZSBpbXBldHVzIG9mIHRoZWlyIHZpY3RvcnkgYW5kIGNhcnJ5aW5nIEJydXR1cyB3aXRoIHRoZW0uIEJ1dCBoZXJlIHRoZSB2YW5xdWlzaGVkIHNhdyBhbiBvcHBvcnR1bml0eSBvZiB3aGljaCB0aGUgdmljdG9ycyB3ZXJlIG5vdCBhd2FyZTsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIHRoZXkgY2hhcmdlZCB1cG9uIHRoZSBicm9rZW4gYW5kIGV4cG9zZWQgcGFydHMgb2YgdGhlaXIgb3Bwb25lbnRzJyBsaW5lLCBmcm9tIHdoaWNoIHRoZSByaWdodCB3aW5nIGhhZCBiZWVuIGRyYXduIGF3YXkgaW4gcHVyc3VpdC4gVGhlIGNlbnRyZSBkaWQgbm90IHlpZWxkIHRvIHRoZW0sIGJ1dCBmb3VnaHQgdGhlbSB2aWdvcm91c2x5OyB0aGUgbGVmdCB3aW5nLCBob3dldmVyLCBvd2luZyB0byB0aGVpciBkaXNvcmRlciBhbmQgaWdub3JhbmNlIG9mIHdoYXQgaGFkIGhhcHBlbmVkLCB0aGV5IHJvdXRlZCBhbmQgcHVyc3VlZCBpbnRvIHRoZWlyIGNhbXAsIHdoaWNoIHRoZXkgc2Fja2VkLiBOZWl0aGVyIG9mIHRoZSBnZW5lcmFscyB3YXMgd2l0aCBoaXMgbWVuOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgQW50b255LCB3ZSBhcmUgdG9sZCwgdHVybmVkIGFzaWRlIGZyb20gdGhlIGF0dGFjayBhdCB0aGUgb3V0c2V0IGFuZCB3aXRoZHJldyBpbnRvIHRoZSBtYXJzaCwgYW5kIE9jdGF2aXVzIHdhcyBub3doZXJlIHRvIGJlIHNlZW4gYWZ0ZXIgaGUgaGFkIGZvcnNha2VuIGhpcyBjYW1wOyBpbmRlZWQsIHN1bmRyeSBzb2xkaWVycyBkZWNsYXJlZCB0aGF0IHRoZXkgaGFkIHNsYWluIGhpbSwgc2hvd2luZyBCcnV0dXMgdGhlaXIgYmxvb2R5IHN3b3JkcyBhbmQgZGVzY3JpYmluZyBoaXMgeW91dGhmdWwgYXBwZWFyYW5jZS4gQnV0IHByZXNlbnRseSB0aGUgY2VudHJlIGRyb3ZlIGJhY2sgdGhlaXIgb3Bwb25lbnRzIHdpdGggZ3JlYXQgc2xhdWdodGVyLCBhbmQgaXQgYXBwZWFyZWQgdGhhdCBCcnV0dXMgd2FzIGNvbXBsZXRlbHkgdmljdG9yaW91cywgYXMgQ2Fzc2l1cyB3YXMgY29tcGxldGVseSBkZWZlYXRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG9uZSB0aGluZyBhbG9uZSBicm91Z2h0IHJ1aW4gdG8gdGhlaXIgY2F1c2UsIG5hbWVseSwgdGhhdCBCcnV0dXMgdGhvdWdodCBDYXNzaXVzIHZpY3RvcmlvdXMgYW5kIGRpZCBub3QgZ28gdG8gaGlzIGFpZCwgd2hpbGUgQ2Fzc2l1cyB0aG91Z2h0IEJydXR1cyBkZWFkIGFuZCBkaWQgbm90IHdhaXQgZm9yIGhpcyBhaWQ7IHNpbmNlIE1lc3NhbGEgY29uc2lkZXJzIGl0IGEgY2VydGFpbiBwcm9vZiBvZiB0aGUgdmljdG9yeSB0aGF0IGhlIGNhcHR1cmVkIHRocmVlIGVhZ2xlcyBhbmQgbWFueSBzdGFuZGFyZHMgZnJvbSB0aGUgZW5lbXksIHdoaWxlIHRoZXkgdG9vayBub3RoaW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGxlZ2lvbnMgb2YgQnJ1dHVzIHdoaWNoIGhhZCBub3Qgb3V0ZmxhbmtlZCB0aGUgZm9yY2VzIG9mIE9jdGF2aXVzLCBidXQgZW5nYWdlZCB0aGVtIGluIGJhdHRsZSwgZWFzaWx5IHJvdXRlZCB0aGVtIGluIHRoZWlyIGNvbmZ1c2lvbiBhbmQgY3V0IHRvIHBpZWNlcyB0aHJlZSBsZWdpb25zIGF0IGNsb3NlIHF1YXJ0ZXJzOyB0aGVuIHRoZXkgZGFzaGVkIGludG8gdGhlaXIgY2FtcCB3aXRoIHRoZSBmdWdpdGl2ZXMsIGJvcm5lIG9uIGJ5IHRoZSBpbXBldHVzIG9mIHRoZWlyIHZpY3RvcnkgYW5kIGNhcnJ5aW5nIEJydXR1cyB3aXRoIHRoZW0uIEJ1dCBoZXJlIHRoZSB2YW5xdWlzaGVkIHNhdyBhbiBvcHBvcnR1bml0eSBvZiB3aGljaCB0aGUgdmljdG9ycyB3ZXJlIG5vdCBhd2FyZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGV5IGNoYXJnZWQgdXBvbiB0aGUgYnJva2VuIGFuZCBleHBvc2VkIHBhcnRzIG9mIHRoZWlyIG9wcG9uZW50cycgbGluZSwgZnJvbSB3aGljaCB0aGUgcmlnaHQgd2luZyBoYWQgYmVlbiBkcmF3biBhd2F5IGluIHB1cnN1aXQuIFRoZSBjZW50cmUgZGlkIG5vdCB5aWVsZCB0byB0aGVtLCBidXQgZm91Z2h0IHRoZW0gdmlnb3JvdXNseTsgdGhlIGxlZnQgd2luZywgaG93ZXZlciwgb3dpbmcgdG8gdGhlaXIgZGlzb3JkZXIgYW5kIGlnbm9yYW5jZSBvZiB3aGF0IGhhZCBoYXBwZW5lZCwgdGhleSByb3V0ZWQgYW5kIHB1cnN1ZWQgaW50byB0aGVpciBjYW1wLCB3aGljaCB0aGV5IHNhY2tlZC4gTmVpdGhlciBvZiB0aGUgZ2VuZXJhbHMgd2FzIHdpdGggaGlzIG1lbjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmZvciBBbnRvbnksIHdlIGFyZSB0b2xkLCB0dXJuZWQgYXNpZGUgZnJvbSB0aGUgYXR0YWNrIGF0IHRoZSBvdXRzZXQgYW5kIHdpdGhkcmV3IGludG8gdGhlIG1hcnNoLCBhbmQgT2N0YXZpdXMgd2FzIG5vd2hlcmUgdG8gYmUgc2VlbiBhZnRlciBoZSBoYWQgZm9yc2FrZW4gaGlzIGNhbXA7IGluZGVlZCwgc3VuZHJ5IHNvbGRpZXJzIGRlY2xhcmVkIHRoYXQgdGhleSBoYWQgc2xhaW4gaGltLCBzaG93aW5nIEJydXR1cyB0aGVpciBibG9vZHkgc3dvcmRzIGFuZCBkZXNjcmliaW5nIGhpcyB5b3V0aGZ1bCBhcHBlYXJhbmNlLiBCdXQgcHJlc2VudGx5IHRoZSBjZW50cmUgZHJvdmUgYmFjayB0aGVpciBvcHBvbmVudHMgd2l0aCBncmVhdCBzbGF1Z2h0ZXIsIGFuZCBpdCBhcHBlYXJlZCB0aGF0IEJydXR1cyB3YXMgY29tcGxldGVseSB2aWN0b3Jpb3VzLCBhcyBDYXNzaXVzIHdhcyBjb21wbGV0ZWx5IGRlZmVhdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmUgdGhpbmcgYWxvbmUgYnJvdWdodCBydWluIHRvIHRoZWlyIGNhdXNlLCBuYW1lbHksIHRoYXQgQnJ1dHVzIHRob3VnaHQgQ2Fzc2l1cyB2aWN0b3Jpb3VzIGFuZCBkaWQgbm90IGdvIHRvIGhpcyBhaWQsIHdoaWxlIENhc3NpdXMgdGhvdWdodCBCcnV0dXMgZGVhZCBhbmQgZGlkIG5vdCB3YWl0IGZvciBoaXMgYWlkOyBzaW5jZSBNZXNzYWxhIGNvbnNpZGVycyBpdCBhIGNlcnRhaW4gcHJvb2Ygb2YgdGhlIHZpY3RvcnkgdGhhdCBoZSBjYXB0dXJlZCB0aHJlZSBlYWdsZXMgYW5kIG1hbnkgc3RhbmRhcmRzIGZyb20gdGhlIGVuZW15LCB3aGlsZSB0aGV5IHRvb2sgbm90aGluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyBCcnV0dXMgd2FzIHJldHVybmluZyBmcm9tIGhpcyB2aWN0b3J5LCB0aGUgY2FtcCBvZiBDYWVzYXIgaGF2aW5nIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWQsIGhlIHdhcyBhbWF6ZWQgbm90IHRvIHNlZSB0aGUgdGVudCBvZiBDYXNzaXVzIHRvd2VyaW5nIGFib3ZlIHRoZSBvdGhlcnMsIGFzIHVzdWFsLCBub3IgdGhlIG90aGVyIHRlbnRzIGluIHRoZWlyIHdvbnRlZCBwbGFjZTsgZm9yIG1vc3Qgb2YgdGhlbSBoYWQgYmVlbiBkZW1vbGlzaGVkIGF0IG9uY2Ugd2hlbiB0aGUgZW5lbXkgYnVyc3QgaW4uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzaGFycGVyIHNpZ2h0ZWQgYW1vbmcgaGlzIGNvbXBhbmlvbnMgdG9sZCBoaW0gdGhleSBjb3VsZCBzZWUgbWFueSBoZWxtZXRzIGdsZWFtaW5nLCBhbmQgbWFueSBzaWx2ZXIgYnJlYXN0LXBsYXRlcyBtb3ZpbmcgYWJvdXQgaW4gdGhlIGNhbXAgb2YgQ2Fzc2l1czsgdGhleSBkaWQgbm90IHRoaW5rIHRoYXQgZWl0aGVyIHRoZSBudW1iZXIgb3IgdGhlIGFybW91ciB3YXMgdGhhdCBvZiB0aGUgZ2Fycmlzb24gbGVmdCBiZWhpbmQ7IGhvd2V2ZXIsIHRoZXkgc2FpZCwgdGhlcmUgd2VyZSBub3Qgc28gbWFueSBkZWFkIGJvZGllcyB2aXNpYmxlIHRoZXJlIGFzIG1pZ2h0IGhhdmUgYmVlbiBleHBlY3RlZCBpZiBzbyBtYW55IGxlZ2lvbnMgaGFkIGJlZW4gb3ZlcndoZWxtZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHdoYXQgZmlyc3QgbWFkZSBCcnV0dXMgYXdhcmUgb2YgdGhlIGNhbGFtaXR5OyBhbmQgbGVhdmluZyBhIGd1YXJkIGluIHRoZSBjYXB0dXJlZCBjYW1wIG9mIHRoZSBlbmVteSwgaGUgY2FsbGVkIGhpcyBtZW4gYmFjayBmcm9tIHRoZSBwdXJzdWl0IGFuZCB1bml0ZWQgaGlzIGZvcmNlcyB3aXRoIHRoZSBwdXJwb3NlIG9mIGFzc2lzdGluZyBDYXNzaXVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc2hhcnBlciBzaWdodGVkIGFtb25nIGhpcyBjb21wYW5pb25zIHRvbGQgaGltIHRoZXkgY291bGQgc2VlIG1hbnkgaGVsbWV0cyBnbGVhbWluZywgYW5kIG1hbnkgc2lsdmVyIGJyZWFzdC1wbGF0ZXMgbW92aW5nIGFib3V0IGluIHRoZSBjYW1wIG9mIENhc3NpdXM7IHRoZXkgZGlkIG5vdCB0aGluayB0aGF0IGVpdGhlciB0aGUgbnVtYmVyIG9yIHRoZSBhcm1vdXIgd2FzIHRoYXQgb2YgdGhlIGdhcnJpc29uIGxlZnQgYmVoaW5kOyBob3dldmVyLCB0aGV5IHNhaWQsIHRoZXJlIHdlcmUgbm90IHNvIG1hbnkgZGVhZCBib2RpZXMgdmlzaWJsZSB0aGVyZSBhcyBtaWdodCBoYXZlIGJlZW4gZXhwZWN0ZWQgaWYgc28gbWFueSBsZWdpb25zIGhhZCBiZWVuIG92ZXJ3aGVsbWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHdoYXQgZmlyc3QgbWFkZSBCcnV0dXMgYXdhcmUgb2YgdGhlIGNhbGFtaXR5OyBhbmQgbGVhdmluZyBhIGd1YXJkIGluIHRoZSBjYXB0dXJlZCBjYW1wIG9mIHRoZSBlbmVteSwgaGUgY2FsbGVkIGhpcyBtZW4gYmFjayBmcm9tIHRoZSBwdXJzdWl0IGFuZCB1bml0ZWQgaGlzIGZvcmNlcyB3aXRoIHRoZSBwdXJwb3NlIG9mIGFzc2lzdGluZyBDYXNzaXVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIENhc3NpdXMgbWF0dGVycyBoYWQgZ29uZSBhcyBmb2xsb3dzLiBIZSBoYWQgYmVlbiBkaXN0dXJiZWQgdG8gc2VlIHRoZSBmaXJzdCBzYWxseSBvZiB0aGUgdHJvb3BzIG9mIEJydXR1cywgd2hpY2ggd2FzIG1hZGUgd2l0aG91dCB3YXRjaC13b3JkIG9yIGNvbW1hbmQsIGFuZCB3aGVuLCBiZWluZyB2aWN0b3Jpb3VzLCB0aGV5IHJ1c2hlZCBhdCBvbmNlIGFmdGVyIGJvb3R5IGFuZCBzcG9pbCwgd2l0aCBubyB0aG91Z2h0IGZvciB0aGUgZW52ZWxvcG1lbnQgb2YgdGhlIGVuZW15LCBoZSB3YXMgdmV4ZWQgYXQgdGhlIHdheSB0aGluZ3Mgd2VyZSBnb2luZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcywgZXhlcmNpc2luZyBoaXMgY29tbWFuZCB3aXRoIGhlc2l0YXRpb24gYW5kIGRlbGF5IHJhdGhlciB0aGFuIHdpdGggcmVhZGluZXNzIGFuZCBkZWNpc2lvbiwgaGUgd2FzIGVudmVsb3BlZCBieSB0aGUgZW5lbXkncyByaWdodCB3aW5nLiBIaXMgaG9yc2VtZW4gYXQgb25jZSBicm9rZSBhd2F5IGluIGZsaWdodCB0b3dhcmRzIHRoZSBzZWEsIGFuZCBzZWVpbmcgaGlzIGluZmFudHJ5IGFsc28gYXJvdW5kIGhlIHRyaWVkIHRvIHJhbGx5IHRoZW0uICBIZSBzbmF0Y2hlZCB0aGUgc3RhbmRhcmQgZnJvbSBhIHN0YW5kYXJkLWJlYXJlciB3aG8gd2FzIGluIGZsaWdodCwgYW5kIHBsYW50ZWQgaXQgaW4gdGhlIGdyb3VuZCBiZWZvcmUgaGltLCBhbHRob3VnaCBub3QgZXZlbiBoaXMgYm9keS1ndWFyZCB3ZXJlIGluY2xpbmVkIHRvIGhvbGQgdG9nZXRoZXIgYW55IG1vcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRodXMsIHRoZW4sIHVuZGVyIGNvbXB1bHNpb24sIGhlIHdpdGhkcmV3IHdpdGggYSBmZXcgZm9sbG93ZXJzIHRvIGEgbHVsbCBvdmVybG9va2luZyB0aGUgcGxhaW4uIEJ1dCBoZSBoaW1zZWxmIGNvdWxkIHNlZSBub3RoaW5nLCBvciBuZXh0IHRvIG5vdGhpbmcsIG9mIHRoZSBzYWNraW5nIG9mIGhpcyBjYW1wLCBmb3IgaGlzIHZpc2lvbiB3YXMgd2VhazsgdGhlIGhvcnNlbWVuIGFib3V0IGhpbSwgaG93ZXZlciwgc2F3IGEgZ3JlYXQgdHJvb3AgcmlkaW5nIHVwIHdoaWNoIEJydXR1cyBoYWQgc2VudC4gQnV0IENhc3NpdXMgY29uamVjdHVyZWQgdGhhdCB0aGV5IHdlcmUgZW5lbWllcywgYW5kIGluIHB1cnN1aXQgb2YgaGltLiBOZXZlcnRoZWxlc3MsIGhlIHNlbnQgb3V0IG9uZSBvZiB0aG9zZSB3aG8gd2VyZSB3aXRoIGhpbSwgVGl0aW5pdXMsIHRvIHJlY29ubm9pdHJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgaG9yc2VtZW4gc3BpZWQgdGhpcyBtYW4gYXMgaGUgY2FtZSB0b3dhcmRzIHRoZW0sIGFuZCB3aGVuIHRoZXkgc2F3IHRoYXQgaGUgd2FzIGEgdHJ1c3RlZCBmcmllbmQgb2YgQ2Fzc2l1cywgaGlzIGludGltYXRlcywgc2hvdXRpbmcgZm9yIGpveSwgbGVhcGVkIGZyb20gdGhlaXIgaG9yc2VzIGFuZCBlbWJyYWNlZCBoaW0gd2FybWx5LCB3aGlsZSB0aGUgcmVzdCByb2RlIHJvdW5kIGhpbSB3aXRoIHNob3V0cyBhbmQgY2xhc2hpbmcgb2YgYXJtcywgdGh1cywgaW4gdGhlaXIgYm91bmRsZXNzIGpveSwgd29ya2luZyB0aGUgZ3JlYXRlc3QgbWlzY2hpZWYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBDYXNzaXVzIG1hdHRlcnMgaGFkIGdvbmUgYXMgZm9sbG93cy4gSGUgaGFkIGJlZW4gZGlzdHVyYmVkIHRvIHNlZSB0aGUgZmlyc3Qgc2FsbHkgb2YgdGhlIHRyb29wcyBvZiBCcnV0dXMsIHdoaWNoIHdhcyBtYWRlIHdpdGhvdXQgd2F0Y2gtd29yZCBvciBjb21tYW5kLCBhbmQgd2hlbiwgYmVpbmcgdmljdG9yaW91cywgdGhleSBydXNoZWQgYXQgb25jZSBhZnRlciBib290eSBhbmQgc3BvaWwsIHdpdGggbm8gdGhvdWdodCBmb3IgdGhlIGVudmVsb3BtZW50IG9mIHRoZSBlbmVteSwgaGUgd2FzIHZleGVkIGF0IHRoZSB3YXkgdGhpbmdzIHdlcmUgZ29pbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIGV4ZXJjaXNpbmcgaGlzIGNvbW1hbmQgd2l0aCBoZXNpdGF0aW9uIGFuZCBkZWxheSByYXRoZXIgdGhhbiB3aXRoIHJlYWRpbmVzcyBhbmQgZGVjaXNpb24sIGhlIHdhcyBlbnZlbG9wZWQgYnkgdGhlIGVuZW15J3MgcmlnaHQgd2luZy4gSGlzIGhvcnNlbWVuIGF0IG9uY2UgYnJva2UgYXdheSBpbiBmbGlnaHQgdG93YXJkcyB0aGUgc2VhLCBhbmQgc2VlaW5nIGhpcyBpbmZhbnRyeSBhbHNvIGFyb3VuZCBoZSB0cmllZCB0byByYWxseSB0aGVtLiAgSGUgc25hdGNoZWQgdGhlIHN0YW5kYXJkIGZyb20gYSBzdGFuZGFyZC1iZWFyZXIgd2hvIHdhcyBpbiBmbGlnaHQsIGFuZCBwbGFudGVkIGl0IGluIHRoZSBncm91bmQgYmVmb3JlIGhpbSwgYWx0aG91Z2ggbm90IGV2ZW4gaGlzIGJvZHktZ3VhcmQgd2VyZSBpbmNsaW5lZCB0byBob2xkIHRvZ2V0aGVyIGFueSBtb3JlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRodXMsIHRoZW4sIHVuZGVyIGNvbXB1bHNpb24sIGhlIHdpdGhkcmV3IHdpdGggYSBmZXcgZm9sbG93ZXJzIHRvIGEgbHVsbCBvdmVybG9va2luZyB0aGUgcGxhaW4uIEJ1dCBoZSBoaW1zZWxmIGNvdWxkIHNlZSBub3RoaW5nLCBvciBuZXh0IHRvIG5vdGhpbmcsIG9mIHRoZSBzYWNraW5nIG9mIGhpcyBjYW1wLCBmb3IgaGlzIHZpc2lvbiB3YXMgd2VhazsgdGhlIGhvcnNlbWVuIGFib3V0IGhpbSwgaG93ZXZlciwgc2F3IGEgZ3JlYXQgdHJvb3AgcmlkaW5nIHVwIHdoaWNoIEJydXR1cyBoYWQgc2VudC4gQnV0IENhc3NpdXMgY29uamVjdHVyZWQgdGhhdCB0aGV5IHdlcmUgZW5lbWllcywgYW5kIGluIHB1cnN1aXQgb2YgaGltLiBOZXZlcnRoZWxlc3MsIGhlIHNlbnQgb3V0IG9uZSBvZiB0aG9zZSB3aG8gd2VyZSB3aXRoIGhpbSwgVGl0aW5pdXMsIHRvIHJlY29ubm9pdHJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['43.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBob3JzZW1lbiBzcGllZCB0aGlzIG1hbiBhcyBoZSBjYW1lIHRvd2FyZHMgdGhlbSwgYW5kIHdoZW4gdGhleSBzYXcgdGhhdCBoZSB3YXMgYSB0cnVzdGVkIGZyaWVuZCBvZiBDYXNzaXVzLCBoaXMgaW50aW1hdGVzLCBzaG91dGluZyBmb3Igam95LCBsZWFwZWQgZnJvbSB0aGVpciBob3JzZXMgYW5kIGVtYnJhY2VkIGhpbSB3YXJtbHksIHdoaWxlIHRoZSByZXN0IHJvZGUgcm91bmQgaGltIHdpdGggc2hvdXRzIGFuZCBjbGFzaGluZyBvZiBhcm1zLCB0aHVzLCBpbiB0aGVpciBib3VuZGxlc3Mgam95LCB3b3JraW5nIHRoZSBncmVhdGVzdCBtaXNjaGllZi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIENhc3NpdXMgdGhvdWdodCB0aGF0IFRpdGluaXVzIHdhcyBhY3R1YWxseSB0YWtlbiBieSB0aGUgZW5lbXksIGFuZCB3aXRoIHRoZSB3b3JkcyA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBsb3ZlIG9mIGxpZmUgaGFzIGJyb3VnaHQgbWUgdG8gdGhlIHBhc3Mgb2Ygc2VlaW5nIGEgZnJpZW5kIHNlaXplZCBieSB0aGUgZW5lbXksPC9xPiBoZSB3aXRoZHJldyBpbnRvIGFuIGVtcHR5IHRlbnQsIGZvcmNpbmcgYWxvbmcgd2l0aCBoaW0gb25lIG9mIGhpcyBmcmVlZG1lbiwgUGluZGFydXMsIHdob20sIGFmdGVyIHRoZSBkaXNhc3RlciB3aGljaCBiZWZlbGwgQ3Jhc3N1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYXNzaXVzIGhhZCBiZWVuIHF1YWVzdG9yIGZvciBDcmFzc3VzIG9uIHRoZSBkaXNhc3Ryb3VzIFBhcnRoaWFuIGV4cGVkaXRpb24gaW4gNTMgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q3Jhc3N1czwvdGl0bGU+LCB4dmlpaS4gNTwvYmlibD4pLjwvbm90ZT4gaGUgdXNlZCB0byBrZWVwIGluIHJlYWRpbmVzcyBmb3IgdGhpcyBlbWVyZ2VuY3kuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlIFBhcnRoaWFucywgaW5kZWVkLCBoZSBoYWQgbWFkZSBoaXMgZXNjYXBlOyBidXQgbm93LCBkcmF3aW5nIGhpcyByb2JlcyB1cCBvdmVyIGhpcyBmYWNlIGFuZCBsYXlpbmcgYmFyZSBoaXMgbmVjaywgaGUgb2ZmZXJlZCBpdCB0byB0aGUgc3dvcmQuIEZvciBoaXMgaGVhZCB3YXMgZm91bmQgc2V2ZXJlZCBmcm9tIGhpcyBib2R5LiBQaW5kYXJ1cywgaG93ZXZlciwgbm8gbWFuIHNhdyBhZnRlciB0aGUgYmxvb2R5IGRlZWQsIGFuZCB0aGVyZWZvcmUgc29tZSBoYXZlIHRob3VnaHQgdGhhdCBoZSBzbGV3IGhpcyBtYXN0ZXIgdW5iaWRkZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkEgbGl0dGxlIGxhdGVyIGl0IGJlY2FtZSBldmlkZW50IHdobyB0aGUgaG9yc2VtZW4gd2VyZSwgYW5kIFRpdGluaXVzLCB3aG9tIHRoZXkgaGFkIGNyb3duZWQgd2l0aCBnYXJsYW5kcywgY2FtZSB1cCB0byByZXBvcnQgdG8gQ2Fzc2l1cy4gQnV0IHdoZW4gdGhlIGxhbWVudGFibGUgY3JpZXMgb2YgaGlzIGRpc3RyZXNzZWQgYW5kIHdlZXBpbmcgZnJpZW5kcyBtYWRlIGtub3duIHRvIGhpbSB0aGUgZ3JpZXZvdXMgZmF0ZSBvZiBoaXMgZ2VuZXJhbCBhbmQgaGlzIGVycm9yLCBoZSBkcmV3IGhpcyBzd29yZCwgcmVwcm9hY2hlZCBoaW1zZWxmIGJpdHRlcmx5IGZvciBoaXMgc2xvd25lc3MsIGFuZCBzbGV3IGhpbXNlbGYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBDYXNzaXVzIHRob3VnaHQgdGhhdCBUaXRpbml1cyB3YXMgYWN0dWFsbHkgdGFrZW4gYnkgdGhlIGVuZW15LCBhbmQgd2l0aCB0aGUgd29yZHMgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBsb3ZlIG9mIGxpZmUgaGFzIGJyb3VnaHQgbWUgdG8gdGhlIHBhc3Mgb2Ygc2VlaW5nIGEgZnJpZW5kIHNlaXplZCBieSB0aGUgZW5lbXksPC9xPiBoZSB3aXRoZHJldyBpbnRvIGFuIGVtcHR5IHRlbnQsIGZvcmNpbmcgYWxvbmcgd2l0aCBoaW0gb25lIG9mIGhpcyBmcmVlZG1lbiwgUGluZGFydXMsIHdob20sIGFmdGVyIHRoZSBkaXNhc3RlciB3aGljaCBiZWZlbGwgQ3Jhc3N1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhc3NpdXMgaGFkIGJlZW4gcXVhZXN0b3IgZm9yIENyYXNzdXMgb24gdGhlIGRpc2FzdHJvdXMgUGFydGhpYW4gZXhwZWRpdGlvbiBpbiA1MyBCLkMuICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q3Jhc3N1czwvdGl0bGU+LCB4dmlpaS4gNTwvYmlibD4pLjwvbm90ZT4gaGUgdXNlZCB0byBrZWVwIGluIHJlYWRpbmVzcyBmb3IgdGhpcyBlbWVyZ2VuY3kuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNyYXNzdXM8L3RpdGxlPiwgeHZpaWkuIDU8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DcmFzc3VzPC90aXRsZT4sIHh2aWlpLiA1PC90cmFuc2xhdGlvbj4="
translation['43.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlIFBhcnRoaWFucywgaW5kZWVkLCBoZSBoYWQgbWFkZSBoaXMgZXNjYXBlOyBidXQgbm93LCBkcmF3aW5nIGhpcyByb2JlcyB1cCBvdmVyIGhpcyBmYWNlIGFuZCBsYXlpbmcgYmFyZSBoaXMgbmVjaywgaGUgb2ZmZXJlZCBpdCB0byB0aGUgc3dvcmQuIEZvciBoaXMgaGVhZCB3YXMgZm91bmQgc2V2ZXJlZCBmcm9tIGhpcyBib2R5LiBQaW5kYXJ1cywgaG93ZXZlciwgbm8gbWFuIHNhdyBhZnRlciB0aGUgYmxvb2R5IGRlZWQsIGFuZCB0aGVyZWZvcmUgc29tZSBoYXZlIHRob3VnaHQgdGhhdCBoZSBzbGV3IGhpcyBtYXN0ZXIgdW5iaWRkZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkEgbGl0dGxlIGxhdGVyIGl0IGJlY2FtZSBldmlkZW50IHdobyB0aGUgaG9yc2VtZW4gd2VyZSwgYW5kIFRpdGluaXVzLCB3aG9tIHRoZXkgaGFkIGNyb3duZWQgd2l0aCBnYXJsYW5kcywgY2FtZSB1cCB0byByZXBvcnQgdG8gQ2Fzc2l1cy4gQnV0IHdoZW4gdGhlIGxhbWVudGFibGUgY3JpZXMgb2YgaGlzIGRpc3RyZXNzZWQgYW5kIHdlZXBpbmcgZnJpZW5kcyBtYWRlIGtub3duIHRvIGhpbSB0aGUgZ3JpZXZvdXMgZmF0ZSBvZiBoaXMgZ2VuZXJhbCBhbmQgaGlzIGVycm9yLCBoZSBkcmV3IGhpcyBzd29yZCwgcmVwcm9hY2hlZCBoaW1zZWxmIGJpdHRlcmx5IGZvciBoaXMgc2xvd25lc3MsIGFuZCBzbGV3IGhpbXNlbGYuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQnJ1dHVzIGxlYXJuZWQgb2YgdGhlIGRlZmVhdCBvZiBDYXNzaXVzLCBoZSByb2RlIHRvd2FyZHMgaGltLCBidXQgaGVhcmQgb2YgaGlzIGRlYXRoIHdoZW4gaGUgd2FzIGFscmVhZHkgbmVhciBoaXMgY2FtcC4gSGUgbW91cm5lZCBvdmVyIHRoZSBib2R5LCBhbmQgY2FsbGVkIENhc3NpdXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGUgbGFzdCBvZiB0aGUgUm9tYW5zLDwvcT4gaW1wbHlpbmcgdGhhdCBzdWNoIGFuIGV4YWx0ZWQgc3Bpcml0IGNvdWxkIG5vIGxvbmdlciBhcmlzZSBpbiB0aGUgY2l0eS4gVGhlbiBoZSBkZWNrZWQgdGhlIGJvZHkgZm9yIGJ1cmlhbCBhbmQgc2VudCBpdCB0byBUaGFzb3MsIGluIG9yZGVyIHRoYXQgdGhlIGZ1bmVyYWwgcml0ZXMgbWlnaHQgbm90IGRpc3R1cmIgdGhlIGNhbXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIGhvd2V2ZXIsIGFzc2VtYmxlZCB0aGUgc29sZGllcnMgb2YgQ2Fzc2l1cyBhbmQgY29tZm9ydGVkIHRoZW07IGFuZCBzZWVpbmcgdGhhdCB0aGV5IHdlcmUgZGVwcml2ZWQgb2YgYWxsIHRoZSBuZWNlc3NhcmllcyBvZiBsaWZlLCBoZSBwcm9taXNlZCB0aGVtIHR3byB0aG91c2FuZCBkcmFjaG1hcyB0aGUgbWFuLCB0byBtYWtlIGdvb2Qgd2hhdCB0aGV5IGhhZCBsb3N0LiBUaGV5IHdlcmUgZW5jb3VyYWdlZCBieSBoaXMgd29yZHMgYW5kIGFtYXplZCBhdCB0aGUgbGFyZ2VuZXNzIG9mIGhpcyBnaWZ0OyBhbmQgdGhleSBzZW50IGhpbSBvbiBoaXMgd2F5IHdpdGggc2hvdXRzLCBleGFsdGluZyBoaW0gYXMgdGhlIG9ubHkgb25lIG9mIHRoZSBmb3VyIGNvbW1hbmRlcnMgd2hvIGhhZCBub3QgYmVlbiBkZWZlYXRlZCBpbiB0aGUgYmF0dGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlIHJlc3VsdHMgYm9yZSB3aXRuZXNzIHRoYXQgaGlzIGNvbmZpZGVuY2UgaW4gYSB2aWN0b3J5IGluIHRoZSBiYXR0bGUgd2FzIHdlbGwgZ3JvdW5kZWQ7IGZvciB3aXRoIGEgZmV3IGxlZ2lvbnMgaGUgcm91dGVkIGFsbCB0aG9zZSBvcHBvc2VkIHRvIGhpbS4gQW5kIGlmIGhlIGhhZCBlbXBsb3llZCB0aGVtIGFsbCBpbiBmaWdodGluZywgYW5kIGlmIHRoZSBtb3N0IG9mIHRoZW0gaGFkIG5vdCBwYXNzZWQgYnkgdGhlIGVuZW15IGFuZCBzZXQgdXBvbiB0aGUgZW5lbXkncyBwb3NzZXNzaW9ucywgaXQgd291bGQgc2VlbSB0aGF0IGhpcyB2aWN0b3JzJyBtdXN0IGhhdmUgYmVlbiBjb21wbGV0ZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBCcnV0dXMgbGVhcm5lZCBvZiB0aGUgZGVmZWF0IG9mIENhc3NpdXMsIGhlIHJvZGUgdG93YXJkcyBoaW0sIGJ1dCBoZWFyZCBvZiBoaXMgZGVhdGggd2hlbiBoZSB3YXMgYWxyZWFkeSBuZWFyIGhpcyBjYW1wLiBIZSBtb3VybmVkIG92ZXIgdGhlIGJvZHksIGFuZCBjYWxsZWQgQ2Fzc2l1cyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhlIGxhc3Qgb2YgdGhlIFJvbWFucyw8L3E+IGltcGx5aW5nIHRoYXQgc3VjaCBhbiBleGFsdGVkIHNwaXJpdCBjb3VsZCBubyBsb25nZXIgYXJpc2UgaW4gdGhlIGNpdHkuIFRoZW4gaGUgZGVja2VkIHRoZSBib2R5IGZvciBidXJpYWwgYW5kIHNlbnQgaXQgdG8gVGhhc29zLCBpbiBvcmRlciB0aGF0IHRoZSBmdW5lcmFsIHJpdGVzIG1pZ2h0IG5vdCBkaXN0dXJiIHRoZSBjYW1wLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYsIGhvd2V2ZXIsIGFzc2VtYmxlZCB0aGUgc29sZGllcnMgb2YgQ2Fzc2l1cyBhbmQgY29tZm9ydGVkIHRoZW07IGFuZCBzZWVpbmcgdGhhdCB0aGV5IHdlcmUgZGVwcml2ZWQgb2YgYWxsIHRoZSBuZWNlc3NhcmllcyBvZiBsaWZlLCBoZSBwcm9taXNlZCB0aGVtIHR3byB0aG91c2FuZCBkcmFjaG1hcyB0aGUgbWFuLCB0byBtYWtlIGdvb2Qgd2hhdCB0aGV5IGhhZCBsb3N0LiBUaGV5IHdlcmUgZW5jb3VyYWdlZCBieSBoaXMgd29yZHMgYW5kIGFtYXplZCBhdCB0aGUgbGFyZ2VuZXNzIG9mIGhpcyBnaWZ0OyBhbmQgdGhleSBzZW50IGhpbSBvbiBoaXMgd2F5IHdpdGggc2hvdXRzLCBleGFsdGluZyBoaW0gYXMgdGhlIG9ubHkgb25lIG9mIHRoZSBmb3VyIGNvbW1hbmRlcnMgd2hvIGhhZCBub3QgYmVlbiBkZWZlYXRlZCBpbiB0aGUgYmF0dGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgcmVzdWx0cyBib3JlIHdpdG5lc3MgdGhhdCBoaXMgY29uZmlkZW5jZSBpbiBhIHZpY3RvcnkgaW4gdGhlIGJhdHRsZSB3YXMgd2VsbCBncm91bmRlZDsgZm9yIHdpdGggYSBmZXcgbGVnaW9ucyBoZSByb3V0ZWQgYWxsIHRob3NlIG9wcG9zZWQgdG8gaGltLiBBbmQgaWYgaGUgaGFkIGVtcGxveWVkIHRoZW0gYWxsIGluIGZpZ2h0aW5nLCBhbmQgaWYgdGhlIG1vc3Qgb2YgdGhlbSBoYWQgbm90IHBhc3NlZCBieSB0aGUgZW5lbXkgYW5kIHNldCB1cG9uIHRoZSBlbmVteSdzIHBvc3Nlc3Npb25zLCBpdCB3b3VsZCBzZWVtIHRoYXQgaGlzIHZpY3RvcnMnIG11c3QgaGF2ZSBiZWVuIGNvbXBsZXRlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBmZWxsIG9uIGhpcyBzaWRlIGVpZ2h0IHRob3VzYW5kIG1lbiwgaW5jbHVkaW5nIHRoZSBjYW1wIHNlcnZhbnRzIHdob20gQnJ1dHVzIGNhbGxlZCBCcmlnZXM7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIG5hbWUgb2YgYSBUaHJhY2lhbiB0cmliZSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhkdC4gNy43MyIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCB2aWkuIDczPC9iaWJsPikuPC9ub3RlPiBidXQgdGhlIGVuZW15LCBpbiB0aGUgb3BpbmlvbiBvZiBNZXNzYWxhLCBsb3N0IG1vcmUgdGhhbiB0d2ljZSBhcyBtYW55LiBUaGV5IHdlcmUgdGhlcmVmb3JlIHRoZSBtb3JlIGRlamVjdGVkIG9mIHRoZSB0d28sIHVudGlsIGFuIGF0dGVuZGFudCBvZiBDYXNzaXVzLCBuYW1lZCBEZW1ldHJpdXMsIGNhbWUgdG8gQW50b255IGluIHRoZSBldmVuaW5nLCBicmluZ2luZyB0aGUgcm9iZXMgYW5kIHRoZSBzd29yZCB3aGljaCBoZSBoYWQgdGFrZW4gYXQgb25jZSBmcm9tIHRoZSBkZWFkIGJvZHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZW5jb3VyYWdlZCB0aGVtIHNvIG11Y2ggdGhhdCBhdCBicmVhayBvZiBkYXkgdGhleSBsZWQgdGhlaXIgZm9yY2VzIG91dCBhcnJheWVkIGZvciBiYXR0bGUuIEJ1dCBib3RoIHRoZSBjYW1wcyBvdmVyIHdoaWNoIEJydXR1cyBoYWQgY29tbWFuZCB3ZXJlIGluIGRhbmdlcm91cyBzdHJhaXRzLiBIaXMgb3duIHdhcyBmaWxsZWQgd2l0aCBwcmlzb25lcnMgb2Ygd2FyIGFuZCByZXF1aXJlZCBhIGhlYXZ5IGd1YXJkOyB3aGlsZSB0aGF0IG9mIENhc3NpdXMgd2FzIGRpc3NhdGlzZmllZCB3aXRoIHRoZSBjaGFuZ2Ugb2YgY29tbWFuZGVycywgYW5kIGJlc2lkZXMsIGFzIHZhbnF1aXNoZWQgbWVuLCB0aGV5IHdlcmUgZnVsbCBvZiBoYXRyZWQgYW5kIGplYWxvdXN5IHRvd2FyZHMgdGhvc2Ugd2hvIGhhZCBiZWVuIHZpY3RvcmlvdXMgQnJ1dHVzIHRoZXJlZm9yZSBkZWNpZGVkIHRvIHB1dCBoaXMgYXJteSBpbiBhcnJheSwgYnV0IHRvIHJlZnJhaW4gZnJvbSBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbXVsdGl0dWRlIG9mIHNsYXZlcyBhbW9uZyBoaXMgY2FwdGl2ZXMgd2VyZSBmb3VuZCBzdXNwaWNpb3VzbHkgbW92aW5nIGFib3V0IGFtb25nIHRoZSBtZW4tYXQtYXJtcywgYW5kIGhlIG9yZGVyZWQgdGhlbSB0byBiZSBwdXQgdG8gZGVhdGg7IG9mIHRoZSBmcmVlbWVuLCBob3dldmVyLCBoZSByZWxlYXNlZCBzb21lLCBkZWNsYXJpbmcgdGhhdCB0aGV5IGhhZCBtb3JlIHRydWx5IGJlZW4gY2FwdHVyZWQgYnkgaGlzIGVuZW1pZXMsIGluIHdob3NlIGhhbmRzIHRoZXkgd2VyZSBwcmlzb25lcnMgYW5kIHNsYXZlcywgd2hpbGUgd2l0aCBoaW0gdGhleSB3ZXJlIGZyZWVtZW4gYW5kIGNpdGl6ZW5zOyBhbmQgd2hlbiBoZSBzYXcgdGhhdCBoaXMgZnJpZW5kcyBhbmQgb2ZmaWNlcnMgd2VyZSBpbXBsYWNhYmx5IGhvc3RpbGUgdG8gdGhlbSwgaGUgc2F2ZWQgdGhlaXIgbGl2ZXMgYnkgaGlkaW5nIHRoZW0gYW5kIGhlbHBpbmcgdGhlbSB0byBlc2NhcGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgZmVsbCBvbiBoaXMgc2lkZSBlaWdodCB0aG91c2FuZCBtZW4sIGluY2x1ZGluZyB0aGUgY2FtcCBzZXJ2YW50cyB3aG9tIEJydXR1cyBjYWxsZWQgQnJpZ2VzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIG5hbWUgb2YgYSBUaHJhY2lhbiB0cmliZSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA3LjczIiB2YWxpZD0ieWVzIj5IZXJvZG90dXMsIHZpaS4gNzM8L2JpYmw+KS48L25vdGU+IGJ1dCB0aGUgZW5lbXksIGluIHRoZSBvcGluaW9uIG9mIE1lc3NhbGEsIGxvc3QgbW9yZSB0aGFuIHR3aWNlIGFzIG1hbnkuIFRoZXkgd2VyZSB0aGVyZWZvcmUgdGhlIG1vcmUgZGVqZWN0ZWQgb2YgdGhlIHR3bywgdW50aWwgYW4gYXR0ZW5kYW50IG9mIENhc3NpdXMsIG5hbWVkIERlbWV0cml1cywgY2FtZSB0byBBbnRvbnkgaW4gdGhlIGV2ZW5pbmcsIGJyaW5naW5nIHRoZSByb2JlcyBhbmQgdGhlIHN3b3JkIHdoaWNoIGhlIGhhZCB0YWtlbiBhdCBvbmNlIGZyb20gdGhlIGRlYWQgYm9keS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDcuNzMiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgdmlpLiA3MzwvYmlibD4pLjwvdHJhbnNsYXRpb24+"
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZW5jb3VyYWdlZCB0aGVtIHNvIG11Y2ggdGhhdCBhdCBicmVhayBvZiBkYXkgdGhleSBsZWQgdGhlaXIgZm9yY2VzIG91dCBhcnJheWVkIGZvciBiYXR0bGUuIEJ1dCBib3RoIHRoZSBjYW1wcyBvdmVyIHdoaWNoIEJydXR1cyBoYWQgY29tbWFuZCB3ZXJlIGluIGRhbmdlcm91cyBzdHJhaXRzLiBIaXMgb3duIHdhcyBmaWxsZWQgd2l0aCBwcmlzb25lcnMgb2Ygd2FyIGFuZCByZXF1aXJlZCBhIGhlYXZ5IGd1YXJkOyB3aGlsZSB0aGF0IG9mIENhc3NpdXMgd2FzIGRpc3NhdGlzZmllZCB3aXRoIHRoZSBjaGFuZ2Ugb2YgY29tbWFuZGVycywgYW5kIGJlc2lkZXMsIGFzIHZhbnF1aXNoZWQgbWVuLCB0aGV5IHdlcmUgZnVsbCBvZiBoYXRyZWQgYW5kIGplYWxvdXN5IHRvd2FyZHMgdGhvc2Ugd2hvIGhhZCBiZWVuIHZpY3RvcmlvdXMgQnJ1dHVzIHRoZXJlZm9yZSBkZWNpZGVkIHRvIHB1dCBoaXMgYXJteSBpbiBhcnJheSwgYnV0IHRvIHJlZnJhaW4gZnJvbSBiYXR0bGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbXVsdGl0dWRlIG9mIHNsYXZlcyBhbW9uZyBoaXMgY2FwdGl2ZXMgd2VyZSBmb3VuZCBzdXNwaWNpb3VzbHkgbW92aW5nIGFib3V0IGFtb25nIHRoZSBtZW4tYXQtYXJtcywgYW5kIGhlIG9yZGVyZWQgdGhlbSB0byBiZSBwdXQgdG8gZGVhdGg7IG9mIHRoZSBmcmVlbWVuLCBob3dldmVyLCBoZSByZWxlYXNlZCBzb21lLCBkZWNsYXJpbmcgdGhhdCB0aGV5IGhhZCBtb3JlIHRydWx5IGJlZW4gY2FwdHVyZWQgYnkgaGlzIGVuZW1pZXMsIGluIHdob3NlIGhhbmRzIHRoZXkgd2VyZSBwcmlzb25lcnMgYW5kIHNsYXZlcywgd2hpbGUgd2l0aCBoaW0gdGhleSB3ZXJlIGZyZWVtZW4gYW5kIGNpdGl6ZW5zOyBhbmQgd2hlbiBoZSBzYXcgdGhhdCBoaXMgZnJpZW5kcyBhbmQgb2ZmaWNlcnMgd2VyZSBpbXBsYWNhYmx5IGhvc3RpbGUgdG8gdGhlbSwgaGUgc2F2ZWQgdGhlaXIgbGl2ZXMgYnkgaGlkaW5nIHRoZW0gYW5kIGhlbHBpbmcgdGhlbSB0byBlc2NhcGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSBwcmlzb25lcnMgdGhlcmUgd2FzIGEgY2VydGFpbiBWb2x1bW5pdXMsIGFuIGFjdG9yLCBhbmQgU2FjdWxpbywgYSBidWZmb29uLCB0byB3aG9tIEJydXR1cyBwYWlkIG5vIGF0dGVudGlvbjsgYnV0IHRoZSBmcmllbmRzIG9mIEJydXR1cyBicm91Z2h0IHRoZW0gZm9yd2FyZCBhbmQgZGVub3VuY2VkIHRoZW0gZm9yIG5vdCByZWZyYWluaW5nIGV2ZW4gbm93IGZyb20gaW5zb2xlbnQgYW5kIG1vY2tpbmcgc3BlZWNoZXMgdG8gdGhlbS4gQnJ1dHVzIGhhZCBub3RoaW5nIHRvIHNheSwgYmVpbmcgY29uY2VybmVkIGFib3V0IG90aGVyIG1hdHRlcnMsIGJ1dCBNZXNzYWxhIENvcnZpbnVzIGdhdmUgaGlzIG9waW5pb24gdGhhdCB0aGV5IHNob3VsZCBiZSBwdWJsaWNseSBmbG9nZ2VkIGFuZCB0aGVuIHNlbnQgYmFjayBuYWtlZCB0byB0aGUgZW5lbXkncyBnZW5lcmFscywgaW4gb3JkZXIgdG8gbGV0IHRoZXNlIGtub3cgd2hhdCBzb3J0IG9mIGJvb24gY29tcGFuaW9ucyB0aGV5IHJlcXVpcmVkIG9uIHRoZWlyIGNhbXBhaWducy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBzb21lIG9mIHRoZSBieXN0YW5kZXJzIGJ1cnN0IG91dCBsYXVnaGluZywgYnV0IFB1YmxpdXMgQ2FzY2EsIHRoZSBvbmUgd2hvIGZpcnN0IHNtb3RlIENhZXNhciwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyBub3QgbWVldCBmb3IgdXMgdG8gY2VsZWJyYXRlIHRoZSBmdW5lcmFsIHJpdGVzIG9mIENhc3NpdXMgd2l0aCBqZXN0cyBhbmQgbWlydGg7IGFuZCB0aG91LCBCcnV0dXMsIHdpbHQgc2hvdyB3aGF0IGVzdGVlbSB0aG91IGhhc3QgZm9yIHRoZSBtZW1vcnkgb2YgdGhhdCBnZW5lcmFsIGFjY29yZGluZyBhcyB0aG91IHB1bmlzaGVzdCBvciBzaGllbGRlc3QgdGhvc2Ugd2hvIHdpbGwgYWJ1c2UgYW5kIHJldmlsZSBoaW0uPC9xPiBUbyB0aGlzIEJydXR1cywgaW4gaGlnaCBkdWRnZW9uLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiwgZG8geWUgZW5xdWlyZSBvZiBtZSwgQ2FzY2EsIGluc3RlYWQgb2YgZG9pbmcgd2hhdCBzZWVtcyBiZXN0IHRvIHlvdT88L3E+IFRoaXMgYW5zd2VyIHdhcyB0YWtlbiB0byBiZSBhIGNvbmRlbW5hdGlvbiBvZiB0aGUgcG9vciB3cmV0Y2hlcywgYW5kIHRoZXkgd2VyZSBsZWQgb2ZmIGFuZCBwdXQgdG8gZGVhdGguCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZSBwcmlzb25lcnMgdGhlcmUgd2FzIGEgY2VydGFpbiBWb2x1bW5pdXMsIGFuIGFjdG9yLCBhbmQgU2FjdWxpbywgYSBidWZmb29uLCB0byB3aG9tIEJydXR1cyBwYWlkIG5vIGF0dGVudGlvbjsgYnV0IHRoZSBmcmllbmRzIG9mIEJydXR1cyBicm91Z2h0IHRoZW0gZm9yd2FyZCBhbmQgZGVub3VuY2VkIHRoZW0gZm9yIG5vdCByZWZyYWluaW5nIGV2ZW4gbm93IGZyb20gaW5zb2xlbnQgYW5kIG1vY2tpbmcgc3BlZWNoZXMgdG8gdGhlbS4gQnJ1dHVzIGhhZCBub3RoaW5nIHRvIHNheSwgYmVpbmcgY29uY2VybmVkIGFib3V0IG90aGVyIG1hdHRlcnMsIGJ1dCBNZXNzYWxhIENvcnZpbnVzIGdhdmUgaGlzIG9waW5pb24gdGhhdCB0aGV5IHNob3VsZCBiZSBwdWJsaWNseSBmbG9nZ2VkIGFuZCB0aGVuIHNlbnQgYmFjayBuYWtlZCB0byB0aGUgZW5lbXkncyBnZW5lcmFscywgaW4gb3JkZXIgdG8gbGV0IHRoZXNlIGtub3cgd2hhdCBzb3J0IG9mIGJvb24gY29tcGFuaW9ucyB0aGV5IHJlcXVpcmVkIG9uIHRoZWlyIGNhbXBhaWducy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgc29tZSBvZiB0aGUgYnlzdGFuZGVycyBidXJzdCBvdXQgbGF1Z2hpbmcsIGJ1dCBQdWJsaXVzIENhc2NhLCB0aGUgb25lIHdobyBmaXJzdCBzbW90ZSBDYWVzYXIsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyBub3QgbWVldCBmb3IgdXMgdG8gY2VsZWJyYXRlIHRoZSBmdW5lcmFsIHJpdGVzIG9mIENhc3NpdXMgd2l0aCBqZXN0cyBhbmQgbWlydGg7IGFuZCB0aG91LCBCcnV0dXMsIHdpbHQgc2hvdyB3aGF0IGVzdGVlbSB0aG91IGhhc3QgZm9yIHRoZSBtZW1vcnkgb2YgdGhhdCBnZW5lcmFsIGFjY29yZGluZyBhcyB0aG91IHB1bmlzaGVzdCBvciBzaGllbGRlc3QgdGhvc2Ugd2hvIHdpbGwgYWJ1c2UgYW5kIHJldmlsZSBoaW0uPC9xPiBUbyB0aGlzIEJydXR1cywgaW4gaGlnaCBkdWRnZW9uLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5LCB0aGVuLCBkbyB5ZSBlbnF1aXJlIG9mIG1lLCBDYXNjYSwgaW5zdGVhZCBvZiBkb2luZyB3aGF0IHNlZW1zIGJlc3QgdG8geW91PzwvcT4gVGhpcyBhbnN3ZXIgd2FzIHRha2VuIHRvIGJlIGEgY29uZGVtbmF0aW9uIG9mIHRoZSBwb29yIHdyZXRjaGVzLCBhbmQgdGhleSB3ZXJlIGxlZCBvZmYgYW5kIHB1dCB0byBkZWF0aC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgZ2F2ZSB0aGUgc29sZGllcnMgdGhlaXIgcHJvbWlzZWQgcmV3YXJkcywgYW5kIGFmdGVyIGdlbnRseSBjaGlkaW5nIHRoZW0gZm9yIG5vdCBnZXR0aW5nIHRoZSB3YXRjaHdvcmQgYW5kIGZvciBydXNoaW5nIHVwb24gdGhlIGVuZW15IHdpdGhvdXQgY29tbWFuZCBhbmQgaW4gZ3JlYXQgZGlzb3JkZXIsIGhlIHByb21pc2VkIHRoYXQgaWYgdGhleSBub3cgZm91Z2h0IHdlbGwsIGhlIHdvdWxkIHR1cm4gb3ZlciB0byB0aGVtIHR3byBjaXRpZXMgZm9yIHBsdW5kZXIgYW5kIGJvb3R5LCBUaGVzc2Fsb25pY2EgYW5kIExhY2VkYWVtb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIG9ubHkgYWNjdXNhdGlvbiBpbiB0aGUgbGlmZSBvZiBCcnV0dXMgYWdhaW5zdCB3aGljaCBubyBkZWZlbmNlIGNhbiBiZSBtYWRlLCBldmVuIHRob3VnaCBBbnRvbnkgYW5kIE9jdGF2aXVzIHByYWN0aXNlZCBmYXIgZ3JlYXRlciBjcnVlbHR5IHRoYW4gdGhpcyBpbiByZXdhcmRpbmcgdGhlaXIgc29sZGllcnMsIGFuZCBkcm92ZSBoZXIgYW5jaWVudCBpbmhhYml0YW50cyBvdXQgb2YgYWxtb3N0IHRoZSB3aG9sZSBvZiBJdGFseSwgaW4gb3JkZXIgdGhhdCB0aGVpciBmb2xsb3dlcnMgbWlnaHQgZ2V0IGxhbmQgYW5kIGNpdGllcyB0byB3aGljaCB0aGV5IGhhZCBubyByaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHRoZWlyIG1pbmRzIGNvbnF1ZXN0IGFuZCBkb21pbmlvbiB3ZXJlIHRoZSBlbmQgYW5kIG9iamVjdCBvZiB0aGUgd2FyOyB3aGVyZWFzIEJydXR1cyBoYWQgc3VjaCBhIHJlcHV0YXRpb24gZm9yIHZpcnR1ZSB3aXRoIHRoZSBtdWx0aXR1ZGUgdGhhdCBoZSB3YXMgbm90IHBlcm1pdHRlZCBlaXRoZXIgdG8gY29ucXVlciBvciB0byBnYWluIHNhZmV0eSBleGNlcHQgd2l0aCBob25vdXIgYW5kIGp1c3RpY2UsIGVzcGVjaWFsbHkgbm93IHRoYXQgQ2Fzc2l1cyB3YXMgZGVhZCwgd2hvIHdhcyBhY2N1c2VkIG9mIGxlYWRpbmcgQnJ1dHVzIHdpdGggaGltIGludG8gc29tZSBhY3RzIG9mIHZpb2xlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQganVzdCBhcyBzYWlsb3JzLCB3aGVuIHRoZWlyIHJ1ZGRlciBoYXMgYmVlbiBzaGF0dGVyZWQsIHRyeSB0byBmaXQgYW5kIGZhc3RlbiBvdGhlciB0aW1iZXJzIGluIGl0cyBwbGFjZSwgc3RyaXZpbmcgdG8gbWVldCB0aGVpciBuZWVkcywgbm90IHdlbGwsIGluZGVlZCwgYnV0IGFzIGJlc3QgdGhleSBjYW4sIHNvIEJydXR1cywgbm90IGhhdmluZyBpbiBoaXMgZ3JlYXQgYXJteSBhbmQgZGFuZ2Vyb3VzIHBsaWdodCBhIGdlbmVyYWwgd2hvIHdhcyBlcXVhbCB0byB0aGUgZW1lcmdlbmN5LCB3YXMgZm9yY2VkIHRvIGVtcGxveSBzdWNoIGFzIGhlIGhhZCwgYW5kIHRvIGRvIGFuZCBzYXkgbWFueSB0aGluZ3Mgd2hpY2ggdGhleSBhcHByb3ZlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHNvIGhlIGRlY2lkZWQgdG8gZG8gd2hhdGV2ZXIgdGhleSB0aG91Z2h0IHdvdWxkIG1ha2UgdGhlIHNvbGRpZXJzIG9mIENhc3NpdXMgYmV0dGVyIG1lbi4gRm9yIHRoZXNlIHdlcmUgdmVyeSBpbnRyYWN0YWJsZTsgdGhlaXIgbGFjayBvZiBhIGxlYWRlciBtYWRlIHRoZW0gYm9sZCBpbiBjYW1wLCB3aGlsZSB0aGVpciBkZWZlYXQgbWFkZSB0aGVtIGFmcmFpZCB0byBmYWNlIHRoZSBlbmVteS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgZ2F2ZSB0aGUgc29sZGllcnMgdGhlaXIgcHJvbWlzZWQgcmV3YXJkcywgYW5kIGFmdGVyIGdlbnRseSBjaGlkaW5nIHRoZW0gZm9yIG5vdCBnZXR0aW5nIHRoZSB3YXRjaHdvcmQgYW5kIGZvciBydXNoaW5nIHVwb24gdGhlIGVuZW15IHdpdGhvdXQgY29tbWFuZCBhbmQgaW4gZ3JlYXQgZGlzb3JkZXIsIGhlIHByb21pc2VkIHRoYXQgaWYgdGhleSBub3cgZm91Z2h0IHdlbGwsIGhlIHdvdWxkIHR1cm4gb3ZlciB0byB0aGVtIHR3byBjaXRpZXMgZm9yIHBsdW5kZXIgYW5kIGJvb3R5LCBUaGVzc2Fsb25pY2EgYW5kIExhY2VkYWVtb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIG9ubHkgYWNjdXNhdGlvbiBpbiB0aGUgbGlmZSBvZiBCcnV0dXMgYWdhaW5zdCB3aGljaCBubyBkZWZlbmNlIGNhbiBiZSBtYWRlLCBldmVuIHRob3VnaCBBbnRvbnkgYW5kIE9jdGF2aXVzIHByYWN0aXNlZCBmYXIgZ3JlYXRlciBjcnVlbHR5IHRoYW4gdGhpcyBpbiByZXdhcmRpbmcgdGhlaXIgc29sZGllcnMsIGFuZCBkcm92ZSBoZXIgYW5jaWVudCBpbmhhYml0YW50cyBvdXQgb2YgYWxtb3N0IHRoZSB3aG9sZSBvZiBJdGFseSwgaW4gb3JkZXIgdGhhdCB0aGVpciBmb2xsb3dlcnMgbWlnaHQgZ2V0IGxhbmQgYW5kIGNpdGllcyB0byB3aGljaCB0aGV5IGhhZCBubyByaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiB0aGVpciBtaW5kcyBjb25xdWVzdCBhbmQgZG9taW5pb24gd2VyZSB0aGUgZW5kIGFuZCBvYmplY3Qgb2YgdGhlIHdhcjsgd2hlcmVhcyBCcnV0dXMgaGFkIHN1Y2ggYSByZXB1dGF0aW9uIGZvciB2aXJ0dWUgd2l0aCB0aGUgbXVsdGl0dWRlIHRoYXQgaGUgd2FzIG5vdCBwZXJtaXR0ZWQgZWl0aGVyIHRvIGNvbnF1ZXIgb3IgdG8gZ2FpbiBzYWZldHkgZXhjZXB0IHdpdGggaG9ub3VyIGFuZCBqdXN0aWNlLCBlc3BlY2lhbGx5IG5vdyB0aGF0IENhc3NpdXMgd2FzIGRlYWQsIHdobyB3YXMgYWNjdXNlZCBvZiBsZWFkaW5nIEJydXR1cyB3aXRoIGhpbSBpbnRvIHNvbWUgYWN0cyBvZiB2aW9sZW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBqdXN0IGFzIHNhaWxvcnMsIHdoZW4gdGhlaXIgcnVkZGVyIGhhcyBiZWVuIHNoYXR0ZXJlZCwgdHJ5IHRvIGZpdCBhbmQgZmFzdGVuIG90aGVyIHRpbWJlcnMgaW4gaXRzIHBsYWNlLCBzdHJpdmluZyB0byBtZWV0IHRoZWlyIG5lZWRzLCBub3Qgd2VsbCwgaW5kZWVkLCBidXQgYXMgYmVzdCB0aGV5IGNhbiwgc28gQnJ1dHVzLCBub3QgaGF2aW5nIGluIGhpcyBncmVhdCBhcm15IGFuZCBkYW5nZXJvdXMgcGxpZ2h0IGEgZ2VuZXJhbCB3aG8gd2FzIGVxdWFsIHRvIHRoZSBlbWVyZ2VuY3ksIHdhcyBmb3JjZWQgdG8gZW1wbG95IHN1Y2ggYXMgaGUgaGFkLCBhbmQgdG8gZG8gYW5kIHNheSBtYW55IHRoaW5ncyB3aGljaCB0aGV5IGFwcHJvdmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['46.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBoZSBkZWNpZGVkIHRvIGRvIHdoYXRldmVyIHRoZXkgdGhvdWdodCB3b3VsZCBtYWtlIHRoZSBzb2xkaWVycyBvZiBDYXNzaXVzIGJldHRlciBtZW4uIEZvciB0aGVzZSB3ZXJlIHZlcnkgaW50cmFjdGFibGU7IHRoZWlyIGxhY2sgb2YgYSBsZWFkZXIgbWFkZSB0aGVtIGJvbGQgaW4gY2FtcCwgd2hpbGUgdGhlaXIgZGVmZWF0IG1hZGUgdGhlbSBhZnJhaWQgdG8gZmFjZSB0aGUgZW5lbXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBPY3Rhdml1cyBhbmQgQW50b255IHdlcmUgbm8gYmV0dGVyIG9mZjsgdGhleSB3ZXJlIHNjYW50aWx5IHByb3Zpc2lvbmVkLCBhbmQgdGhlIGxvdyBzaXRlIG9mIHRoZWlyIGNhbXAgbWFkZSB0aGVtIGV4cGVjdCBhIGdyaWV2b3VzIHdpbnRlci4gRm9yIHRoZXkgd2VyZSBodWRkbGVkIHRvZ2V0aGVyIG9uIHRoZSBlZGdlIG9mIG1hcnNoZXMsIGFuZCB0aGUgYXV0dW1uIHJhaW5zIHdoaWNoIGZlbGwgYWZ0ZXIgdGhlIGJhdHRsZSBrZXB0IGZpbGxpbmcgdGhlaXIgdGVudHMgd2l0aCBtdWQgYW5kIHdhdGVyIHRoYXQgZnJvemUgYXQgb25jZSwgc28gY29sZCB3YXMgdGhlIHdlYXRoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGlsZSB0aGV5IHdlcmUgaW4gdGhpcyBwbGlnaHQsIHdvcmQgY2FtZSB0byB0aGVtIG9mIHRoZSBkaXNhc3RlciB3aGljaCBoYWQgYmVmYWxsZW4gdGhlbSBhdCBzZWEuIEZvciBhIGxhcmdlIGZvcmNlIHdoaWNoIHdhcyBiZWluZyBicm91Z2h0IGZyb20gSXRhbHkgYnkgY29tbWFuZCBvZiBPY3Rhdml1cyB3YXMgYXR0YWNrZWQgYnkgdGhlIHNoaXBzIG9mIEJydXR1cyBhbmQgZGVzdHJveWVkLCBhbmQgdGhlIHNtYWxsIHJlbW5hbnQgb2YgdGhlbSB0aGF0IGVzY2FwZWQgdGhlaXIgZW5lbWllcyB3ZXJlIGRyaXZlbiBieSBodW5nZXIgdG8gc3Vic2lzdCB1cG9uIHRoZSBzYWlscyBhbmQgdGFja2xlIG9mIHRoZWlyIHNoaXBzLiBPbiBoZWFyaW5nIG9mIHRoaXMsIHRoZXkgd2VyZSBlYWdlciB0byBoYXZlIHRoZSBpc3N1ZSBkZWNpZGVkIGJ5IGJhdHRsZSBiZWZvcmUgQnJ1dHVzIGxlYXJuZWQgd2hhdCBncmVhdCBnb29kIGZvcnR1bmUgaGFkIGNvbWUgdG8gaGltLiBGb3IgaXQgaGFwcGVuZWQgdGhhdCB0aGUgY29uZmxpY3RzIG9uIHNlYSBhbmQgbGFuZCB3ZXJlIGRlY2lkZWQgb24gb25lIGFuZCB0aGUgc2FtZSBkYXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBieSBzb21lIGNoYW5jZSwgcmF0aGVyIHRoYW4gYnkgdGhlIGZhdWx0IG9mIGhpcyBuYXZhbCBjb21tYW5kZXJzLCBCcnV0dXMgd2FzIGlnbm9yYW50IG9mIHRoZWlyIHN1Y2Nlc3MgdW50aWwgdHdlbnR5IGRheXMgYWZ0ZXJ3YXJkcy4gT3RoZXJ3aXNlIGhlIHdvdWxkIG5vdCBoYXZlIHByb2NlZWRlZCB0byBhIHNlY29uZCBiYXR0bGUsIHNpbmNlIGhpcyBhcm15IHdhcyBzdXBwbGllZCB3aXRoIHByb3Zpc2lvbnMgZm9yIGEgbG9uZyB0aW1lLCBhbmQgaGUgd2FzIHBvc3RlZCBpbiBhbiBhZHZhbnRhZ2VvdXMgcG9zaXRpb24sIHNvIHRoYXQgaGlzIGNhbXAgZGlkIG5vdCBzdWZmZXIgZnJvbSB3aW50cnkgd2VhdGhlciwgYW5kIG9uIHRoZSBzaWRlIHRvd2FyZHMgdGhlIGVuZW15IHdhcyBhbG1vc3QgaW1wcmVnbmFibGUsIHdoaWxlIGhpcyBzZWN1cmUgbWFzdGVyeSBvZiB0aGUgc2VhIGFuZCB0aGUgdmljdG9yeSBvZiB0aGUgbGFuZCBmb3JjZXMgdW5kZXIgaGlzIG93biBjb21tYW5kIGhhZCBwdXQgaGltIGluIGhpZ2ggaG9wZXMgYW5kIHNwaXJpdHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE9jdGF2aXVzIGFuZCBBbnRvbnkgd2VyZSBubyBiZXR0ZXIgb2ZmOyB0aGV5IHdlcmUgc2NhbnRpbHkgcHJvdmlzaW9uZWQsIGFuZCB0aGUgbG93IHNpdGUgb2YgdGhlaXIgY2FtcCBtYWRlIHRoZW0gZXhwZWN0IGEgZ3JpZXZvdXMgd2ludGVyLiBGb3IgdGhleSB3ZXJlIGh1ZGRsZWQgdG9nZXRoZXIgb24gdGhlIGVkZ2Ugb2YgbWFyc2hlcywgYW5kIHRoZSBhdXR1bW4gcmFpbnMgd2hpY2ggZmVsbCBhZnRlciB0aGUgYmF0dGxlIGtlcHQgZmlsbGluZyB0aGVpciB0ZW50cyB3aXRoIG11ZCBhbmQgd2F0ZXIgdGhhdCBmcm96ZSBhdCBvbmNlLCBzbyBjb2xkIHdhcyB0aGUgd2VhdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGlsZSB0aGV5IHdlcmUgaW4gdGhpcyBwbGlnaHQsIHdvcmQgY2FtZSB0byB0aGVtIG9mIHRoZSBkaXNhc3RlciB3aGljaCBoYWQgYmVmYWxsZW4gdGhlbSBhdCBzZWEuIEZvciBhIGxhcmdlIGZvcmNlIHdoaWNoIHdhcyBiZWluZyBicm91Z2h0IGZyb20gSXRhbHkgYnkgY29tbWFuZCBvZiBPY3Rhdml1cyB3YXMgYXR0YWNrZWQgYnkgdGhlIHNoaXBzIG9mIEJydXR1cyBhbmQgZGVzdHJveWVkLCBhbmQgdGhlIHNtYWxsIHJlbW5hbnQgb2YgdGhlbSB0aGF0IGVzY2FwZWQgdGhlaXIgZW5lbWllcyB3ZXJlIGRyaXZlbiBieSBodW5nZXIgdG8gc3Vic2lzdCB1cG9uIHRoZSBzYWlscyBhbmQgdGFja2xlIG9mIHRoZWlyIHNoaXBzLiBPbiBoZWFyaW5nIG9mIHRoaXMsIHRoZXkgd2VyZSBlYWdlciB0byBoYXZlIHRoZSBpc3N1ZSBkZWNpZGVkIGJ5IGJhdHRsZSBiZWZvcmUgQnJ1dHVzIGxlYXJuZWQgd2hhdCBncmVhdCBnb29kIGZvcnR1bmUgaGFkIGNvbWUgdG8gaGltLiBGb3IgaXQgaGFwcGVuZWQgdGhhdCB0aGUgY29uZmxpY3RzIG9uIHNlYSBhbmQgbGFuZCB3ZXJlIGRlY2lkZWQgb24gb25lIGFuZCB0aGUgc2FtZSBkYXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBieSBzb21lIGNoYW5jZSwgcmF0aGVyIHRoYW4gYnkgdGhlIGZhdWx0IG9mIGhpcyBuYXZhbCBjb21tYW5kZXJzLCBCcnV0dXMgd2FzIGlnbm9yYW50IG9mIHRoZWlyIHN1Y2Nlc3MgdW50aWwgdHdlbnR5IGRheXMgYWZ0ZXJ3YXJkcy4gT3RoZXJ3aXNlIGhlIHdvdWxkIG5vdCBoYXZlIHByb2NlZWRlZCB0byBhIHNlY29uZCBiYXR0bGUsIHNpbmNlIGhpcyBhcm15IHdhcyBzdXBwbGllZCB3aXRoIHByb3Zpc2lvbnMgZm9yIGEgbG9uZyB0aW1lLCBhbmQgaGUgd2FzIHBvc3RlZCBpbiBhbiBhZHZhbnRhZ2VvdXMgcG9zaXRpb24sIHNvIHRoYXQgaGlzIGNhbXAgZGlkIG5vdCBzdWZmZXIgZnJvbSB3aW50cnkgd2VhdGhlciwgYW5kIG9uIHRoZSBzaWRlIHRvd2FyZHMgdGhlIGVuZW15IHdhcyBhbG1vc3QgaW1wcmVnbmFibGUsIHdoaWxlIGhpcyBzZWN1cmUgbWFzdGVyeSBvZiB0aGUgc2VhIGFuZCB0aGUgdmljdG9yeSBvZiB0aGUgbGFuZCBmb3JjZXMgdW5kZXIgaGlzIG93biBjb21tYW5kIGhhZCBwdXQgaGltIGluIGhpZ2ggaG9wZXMgYW5kIHNwaXJpdHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSwgYXMgaXQgd291bGQgc2VlbSwgdGhlIGdvdmVybm1lbnQgb2YgUm9tZSBjb3VsZCBubyBsb25nZXIgYmUgYSBkZW1vY3JhY3ksIGFuZCBhIG1vbmFyY2h5IHdhcyBuZWNlc3NhcnksIEhlYXZlbiwgd2lzaGluZyB0byByZW1vdmUgZnJvbSB0aGUgc2NlbmUgdGhlIG9ubHkgbWFuIHdobyBzdG9vZCBpbiB0aGUgd2F5IG9mIGhpbSB3aG8gd2FzIGFibGUgdG8gYmUgc29sZSBtYXN0ZXIsIGN1dCBvZmYgZnJvbSBCcnV0dXMgdGhlIGtub3dsZWRnZSBvZiB0aGF0IGdvb2QgZm9ydHVuZSwgYWx0aG91Z2ggaXQgdmVyeSBuZWFybHkgcmVhY2hlZCBoaW0gaW4gdGltZTsgZm9yIG9ubHkgb25lIGRheSBiZWZvcmUgdGhlIGJhdHRsZSB3aGljaCBoZSB3YXMgYWJvdXQgdG8gZmlnaHQsIGxhdGUgaW4gdGhlIGRheSwgYSBjZXJ0YWluIENsb2RpdXMgZGVzZXJ0ZWQgZnJvbSB0aGUgZW5lbXksIGFuZCBicm91Z2h0IHdvcmQgdGhhdCBPY3Rhdml1cyBoYWQgbGVhcm5lZCBvZiB0aGUgZGVzdHJ1Y3Rpb24gb2YgaGlzIGZsZWV0IGFuZCB3YXMgdGhlcmVmb3JlIGVhZ2VyIGZvciBhIGRlY2lzaXZlIHN0cnVnZ2xlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWFuIGZvdW5kIG5vIGNyZWRlbmNlIGZvciBoaXMgc3RvcnksIG5vciBkaWQgaGUgZXZlbiBjb21lIGludG8gdGhlIHByZXNlbmNlIG9mIEJydXR1cywgYnV0IHdhcyBhbHRvZ2V0aGVyIGRlc3Bpc2VkOyBpdCB3YXMgdGhvdWdodCB0aGF0IGVpdGhlciBoZSBoYWQgaGVhcmQgYW4gaWRsZSB0YWxlLCBvciB3YXMgYnJpbmdpbmcgZmFsc2UgdGlkaW5ncyBpbiBvcmRlciB0byB3aW4gZmF2b3VyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSwgYXMgaXQgd291bGQgc2VlbSwgdGhlIGdvdmVybm1lbnQgb2YgUm9tZSBjb3VsZCBubyBsb25nZXIgYmUgYSBkZW1vY3JhY3ksIGFuZCBhIG1vbmFyY2h5IHdhcyBuZWNlc3NhcnksIEhlYXZlbiwgd2lzaGluZyB0byByZW1vdmUgZnJvbSB0aGUgc2NlbmUgdGhlIG9ubHkgbWFuIHdobyBzdG9vZCBpbiB0aGUgd2F5IG9mIGhpbSB3aG8gd2FzIGFibGUgdG8gYmUgc29sZSBtYXN0ZXIsIGN1dCBvZmYgZnJvbSBCcnV0dXMgdGhlIGtub3dsZWRnZSBvZiB0aGF0IGdvb2QgZm9ydHVuZSwgYWx0aG91Z2ggaXQgdmVyeSBuZWFybHkgcmVhY2hlZCBoaW0gaW4gdGltZTsgZm9yIG9ubHkgb25lIGRheSBiZWZvcmUgdGhlIGJhdHRsZSB3aGljaCBoZSB3YXMgYWJvdXQgdG8gZmlnaHQsIGxhdGUgaW4gdGhlIGRheSwgYSBjZXJ0YWluIENsb2RpdXMgZGVzZXJ0ZWQgZnJvbSB0aGUgZW5lbXksIGFuZCBicm91Z2h0IHdvcmQgdGhhdCBPY3Rhdml1cyBoYWQgbGVhcm5lZCBvZiB0aGUgZGVzdHJ1Y3Rpb24gb2YgaGlzIGZsZWV0IGFuZCB3YXMgdGhlcmVmb3JlIGVhZ2VyIGZvciBhIGRlY2lzaXZlIHN0cnVnZ2xlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['47.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYW4gZm91bmQgbm8gY3JlZGVuY2UgZm9yIGhpcyBzdG9yeSwgbm9yIGRpZCBoZSBldmVuIGNvbWUgaW50byB0aGUgcHJlc2VuY2Ugb2YgQnJ1dHVzLCBidXQgd2FzIGFsdG9nZXRoZXIgZGVzcGlzZWQ7IGl0IHdhcyB0aG91Z2h0IHRoYXQgZWl0aGVyIGhlIGhhZCBoZWFyZCBhbiBpZGxlIHRhbGUsIG9yIHdhcyBicmluZ2luZyBmYWxzZSB0aWRpbmdzIGluIG9yZGVyIHRvIHdpbiBmYXZvdXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoYXQgbmlnaHQsIHRoZXkgc2F5LCB0aGUgcGhhbnRvbSB2aXNpdGVkIEJydXR1cyBhZ2Fpbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDM2LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4dmkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG1hbmlmZXN0aW5nIHRoZSBzYW1lIGFwcGVhcmFuY2UgYXMgYmVmb3JlLCBidXQgd2VudCBhd2F5IHdpdGhvdXQgYSB3b3JkLiBQdWJsaXVzIFZvbHVtbml1cywgaG93ZXZlciwgYSBwaGlsb3NvcGhlciwgYW5kIGEgY29tcGFuaW9uIG9mIEJydXR1cyBpbiBhbGwgaGlzIGNhbXBhaWducywgbWFrZXMgbm8gbWVudGlvbiBvZiB0aGlzIG9tZW4sIGJ1dCBzYXlzIHRoYXQgdGhlIGZvcmVtb3N0IHN0YW5kYXJkIHdhcyBjb3ZlcmVkIHdpdGggYmVlczsgYW5kIHRoYXQgb2YgaXRzIG93biBhY2NvcmQgdGhlIGFybSBvZiBvbmUgb2YgdGhlIG9mZmljZXJzIHN3ZWF0ZWQgb2lsIG9mIHJvc2VzLCBhbmQgdGhvdWdoIHRoZXkgb2Z0ZW4gcnViYmVkIGFuZCB3aXBlZCBpdCBvZmYgaXQgd2FzIG9mIG5vIGF2YWlsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBzYXlzIGFsc28gdGhhdCBqdXN0IGJlZm9yZSB0aGUgYmF0dGxlIGl0c2VsZiB0d28gZWFnbGVzIGZvdWdodCBhIHBpdGNoZWQgYmF0dGxlIHdpdGggb25lIGFub3RoZXIgaW4gdGhlIHNwYWNlIGJldHdlZW4gdGhlIGNhbXBzLCBhbmQgYXMgYWxsIHdlcmUgZ2F6aW5nIGF0IHRoZW0sIHdoaWxlIGFuIGluY3JlZGlibGUgc2lsZW5jZSByZWlnbmVkIG92ZXIgdGhlIHBsYWluLCB0aGUgZWFnbGUgdG93YXJkcyBCcnV0dXMgZ2F2ZSB1cCB0aGUgZmlnaHQgYW5kIGZsZWQuIEFuZCB0aGUgc3Rvcnkgb2YgdGhlIEV0aGlvcGlhbiBpcyB3ZWxsIGtub3duLCB3aG8sIGFzIHRoZSBnYXRlIG9mIHRoZSBjYW1wIHdhcyB0aHJvd24gb3BlbiwgbWV0IHRoZSBzdGFuZGFyZC1iZWFyZXIsIGFuZCB3YXMgY3V0IHRvIHBpZWNlcyBieSB0aGUgc29sZGllcnMsIHdobyB0aG91Z2h0IGhpcyBhcHBlYXJhbmNlIG9taW5vdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhhdCBuaWdodCwgdGhleSBzYXksIHRoZSBwaGFudG9tIHZpc2l0ZWQgQnJ1dHVzIGFnYWluLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDM2LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4dmkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IG1hbmlmZXN0aW5nIHRoZSBzYW1lIGFwcGVhcmFuY2UgYXMgYmVmb3JlLCBidXQgd2VudCBhd2F5IHdpdGhvdXQgYSB3b3JkLiBQdWJsaXVzIFZvbHVtbml1cywgaG93ZXZlciwgYSBwaGlsb3NvcGhlciwgYW5kIGEgY29tcGFuaW9uIG9mIEJydXR1cyBpbiBhbGwgaGlzIGNhbXBhaWducywgbWFrZXMgbm8gbWVudGlvbiBvZiB0aGlzIG9tZW4sIGJ1dCBzYXlzIHRoYXQgdGhlIGZvcmVtb3N0IHN0YW5kYXJkIHdhcyBjb3ZlcmVkIHdpdGggYmVlczsgYW5kIHRoYXQgb2YgaXRzIG93biBhY2NvcmQgdGhlIGFybSBvZiBvbmUgb2YgdGhlIG9mZmljZXJzIHN3ZWF0ZWQgb2lsIG9mIHJvc2VzLCBhbmQgdGhvdWdoIHRoZXkgb2Z0ZW4gcnViYmVkIGFuZCB3aXBlZCBpdCBvZmYgaXQgd2FzIG9mIG5vIGF2YWlsLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDM2LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh4dmkuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgYWxzbyB0aGF0IGp1c3QgYmVmb3JlIHRoZSBiYXR0bGUgaXRzZWxmIHR3byBlYWdsZXMgZm91Z2h0IGEgcGl0Y2hlZCBiYXR0bGUgd2l0aCBvbmUgYW5vdGhlciBpbiB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgY2FtcHMsIGFuZCBhcyBhbGwgd2VyZSBnYXppbmcgYXQgdGhlbSwgd2hpbGUgYW4gaW5jcmVkaWJsZSBzaWxlbmNlIHJlaWduZWQgb3ZlciB0aGUgcGxhaW4sIHRoZSBlYWdsZSB0b3dhcmRzIEJydXR1cyBnYXZlIHVwIHRoZSBmaWdodCBhbmQgZmxlZC4gQW5kIHRoZSBzdG9yeSBvZiB0aGUgRXRoaW9waWFuIGlzIHdlbGwga25vd24sIHdobywgYXMgdGhlIGdhdGUgb2YgdGhlIGNhbXAgd2FzIHRocm93biBvcGVuLCBtZXQgdGhlIHN0YW5kYXJkLWJlYXJlciwgYW5kIHdhcyBjdXQgdG8gcGllY2VzIGJ5IHRoZSBzb2xkaWVycywgd2hvIHRob3VnaHQgaGlzIGFwcGVhcmFuY2Ugb21pbm91cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQnJ1dHVzIGhhZCBsZWQgb3V0IGhpcyBmb3JjZXMgaW4gYmF0dGxlIGFycmF5IGFuZCBzdGF0aW9uZWQgdGhlbSBvdmVyIGFnYWluc3QgdGhlIGVuZW15LCBoZSB3YWl0ZWQgYSBsb25nIHRpbWU7IGZvciBhcyBoZSB3YXMgcmV2aWV3aW5nIGhpcyB0cm9vcHMgaGUgYmVjYW1lIHN1c3BpY2lvdXMgb2Ygc29tZSBvZiB0aGVtLCBhbmQgaGVhcmQgdGhlbSBhY2N1c2VkIG9mIHRyZWFjaGVyeTsgaGUgc2F3LCB0b28sIHRoYXQgaGlzIGhvcnNlbWVuIHdlcmUgbm90IHZlcnkgZWFnZXIgdG8gYmVnaW4gdGhlIGJhdHRsZSwgYnV0IGFsd2F5cyB3YWl0ZWQgdG8gc2VlIHdoYXQgdGhlIGluZmFudHJ5IGRpZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgb2YgYSBzdWRkZW4sIGEgbWFuIHdobyB3YXMgYSBnb29kIHNvbGRpZXIgYW5kIGhhZCBiZWVuIGNvbnNwaWN1b3VzbHkgaG9ub3VyZWQgZm9yIGhpcyBicmF2ZXJ5IGJ5IEJydXR1cywgcm9kZSBvdXQgb2YgdGhlIHJhbmtzIGFuZCB3ZW50IG92ZXIgdG8gdGhlIGVuZW15OyBoaXMgbmFtZSB3YXMgQ2FtdWxhdHVzLiBUaGUgc2lnaHQgb2YgdGhpcyBnYXZlIEJydXR1cyBncmVhdCBkaXN0cmVzczsgYW5kIHBhcnRseSBmcm9tIGFuZ2VyLCBwYXJ0bHkgYmVjYXVzZSBoZSB3YXMgYWZyYWlkIG9mIGdyZWF0ZXIgdHJlYWNoZXJ5IGFuZCBkZXNlcnRpb24sIGhlIGxlZCBhdCBvbmNlIGFnYWluc3QgdGhlIGVuZW15LCBhdCBhYm91dCB0aHJlZSBvJ2Nsb2NrIGluIHRoZSBhZnRlcm5vb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlIHBhcnQgdW5kZXIgaGlzIG93biBpbW1lZGlhdGUgY29tbWFuZCBoZSB3YXMgdmljdG9yaW91cywgYW5kIGFkdmFuY2VkLCBwcmVzc2luZyBoYXJkIHVwb24gdGhlIHJldHJlYXRpbmcgbGVmdCB3aW5nIG9mIHRoZSBlbmVteTsgaGlzIGNhdmFscnksIHRvbywgZGFzaGVkIGZvcndhcmQgYWxvbmcgd2l0aCB0aGUgaW5mYW50cnkgYW5kIGZlbGwgdXBvbiBhIGRpc29yZGVyZWQgZm9lOyB0aGUgb3RoZXIgd2luZywgaG93ZXZlciwgd2hpY2ggd2FzIGV4dGVuZGVkIGJ5IGl0cyBjb21tYW5kZXJzIHRvIHByZXZlbnQgdGhlaXIgYmVpbmcgc3Vycm91bmRlZCBieSB0aGUgZW5lbXksIHRvIHdob20gdGhleSB3ZXJlIGluZmVyaW9yIGluIG51bWJlcnMsIHdhcyB0aHVzIHdlYWtlbmVkIGluIHRoZSBjZW50cmUgYW5kIGNvdWxkIG5vdCBob2xkIG91dCBhZ2FpbnN0IHRoZWlyIG9wcG9uZW50cywgYnV0IGZsZWQgZmlyc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGN1dHRpbmcgdGhlaXIgd2F5IHRocm91Z2ggdGhpcyB3aW5nLCB0aGUgZW5lbXkgYXQgb25jZSBlbnZlbG9wZWQgQnJ1dHVzLiBIZSBoaW1zZWxmIGRpc3BsYXllZCBhbGwgdGhlIHZhbG91ciBwb3NzaWJsZSBpbiBhIHNvbGRpZXIgYW5kIGNvbW1hbmRlciwgY29udGVuZGluZyB3aXRoIGp1ZGdtZW50IGFuZCBwZXJzb25hbCBwcm93ZXNzIGZvciB2aWN0b3J5IGluIHRoZSB0ZXJyaWJsZSBjcmlzaXM7IGJ1dCB0aGF0IHdoaWNoIHdhcyBhbiBhZHZhbnRhZ2UgZm9yIGhpbSBpbiB0aGUgZm9ybWVyIGJhdHRsZSB3YXMgYSBkZXRyaW1lbnQgdG8gaGltIG5vdy4gRm9yIGluIHRoZSBmb3JtZXIgYmF0dGxlIHRoZSBjb25xdWVyZWQgd2luZyBvZiB0aGUgZW5lbXkgaGFkIGJlZW4gYXQgb25jZSBkZXN0cm95ZWQsIGJ1dCB3aGVuIHRoZSBzb2xkaWVycyBvZiBDYXNzaXVzIHdlcmUgcm91dGVkLCBvbmx5IGZldyBvZiB0aGVtIHdlcmUgc2xhaW4sIGFuZCB0aG9zZSB3aG8gdGhlbiBlc2NhcGVkLCByZW5kZXJlZCBmZWFyZnVsIG5vdyBieSB0aGVpciBmb3JtZXIgZGVmZWF0LCBmaWxsZWQgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgYXJteSB3aXRoIGRlamVjdGlvbiBhbmQgY29uZnVzaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIE1hcmN1cyB0aGUgc29uIG9mIENhdG8gYWxzbywgZmlnaHRpbmcgYW1vbmcgdGhlIGJyYXZlc3QgYW5kIG5vYmxlc3QgeW91bmcgbWVuLCB3YXMgb3ZlcnBvd2VyZWQsIGJ1dCB3b3VsZCBub3QgeWllbGQgbm9yIGZseSwgYnV0IHBseWluZyBoaXMgc3dvcmQsIGFuZCBkZWNsYXJpbmcgdGhhdCBoZSB3YXMgTWFyY3VzIENhdG8gYW5kIE1hcmN1cyBDYXRvJ3Mgc29uLCBmZWxsIGRlYWQgdXBvbiB0aGUgbWFueSBlbmVtaWVzIHdob20gaGUgaGFkIHNsYWluLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNzMuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIGx4eGlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhlIGJyYXZlc3Qgb2YgdGhlIHJlc3QgZmVsbCBhbHNvLCByaXNraW5nIHRoZWlyIGxpdmVzIGluIGRlZmVuY2Ugb2YgQnJ1dHVzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQnJ1dHVzIGhhZCBsZWQgb3V0IGhpcyBmb3JjZXMgaW4gYmF0dGxlIGFycmF5IGFuZCBzdGF0aW9uZWQgdGhlbSBvdmVyIGFnYWluc3QgdGhlIGVuZW15LCBoZSB3YWl0ZWQgYSBsb25nIHRpbWU7IGZvciBhcyBoZSB3YXMgcmV2aWV3aW5nIGhpcyB0cm9vcHMgaGUgYmVjYW1lIHN1c3BpY2lvdXMgb2Ygc29tZSBvZiB0aGVtLCBhbmQgaGVhcmQgdGhlbSBhY2N1c2VkIG9mIHRyZWFjaGVyeTsgaGUgc2F3LCB0b28sIHRoYXQgaGlzIGhvcnNlbWVuIHdlcmUgbm90IHZlcnkgZWFnZXIgdG8gYmVnaW4gdGhlIGJhdHRsZSwgYnV0IGFsd2F5cyB3YWl0ZWQgdG8gc2VlIHdoYXQgdGhlIGluZmFudHJ5IGRpZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIG9mIGEgc3VkZGVuLCBhIG1hbiB3aG8gd2FzIGEgZ29vZCBzb2xkaWVyIGFuZCBoYWQgYmVlbiBjb25zcGljdW91c2x5IGhvbm91cmVkIGZvciBoaXMgYnJhdmVyeSBieSBCcnV0dXMsIHJvZGUgb3V0IG9mIHRoZSByYW5rcyBhbmQgd2VudCBvdmVyIHRvIHRoZSBlbmVteTsgaGlzIG5hbWUgd2FzIENhbXVsYXR1cy4gVGhlIHNpZ2h0IG9mIHRoaXMgZ2F2ZSBCcnV0dXMgZ3JlYXQgZGlzdHJlc3M7IGFuZCBwYXJ0bHkgZnJvbSBhbmdlciwgcGFydGx5IGJlY2F1c2UgaGUgd2FzIGFmcmFpZCBvZiBncmVhdGVyIHRyZWFjaGVyeSBhbmQgZGVzZXJ0aW9uLCBoZSBsZWQgYXQgb25jZSBhZ2FpbnN0IHRoZSBlbmVteSwgYXQgYWJvdXQgdGhyZWUgbydjbG9jayBpbiB0aGUgYWZ0ZXJub29uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldpdGggdGhlIHBhcnQgdW5kZXIgaGlzIG93biBpbW1lZGlhdGUgY29tbWFuZCBoZSB3YXMgdmljdG9yaW91cywgYW5kIGFkdmFuY2VkLCBwcmVzc2luZyBoYXJkIHVwb24gdGhlIHJldHJlYXRpbmcgbGVmdCB3aW5nIG9mIHRoZSBlbmVteTsgaGlzIGNhdmFscnksIHRvbywgZGFzaGVkIGZvcndhcmQgYWxvbmcgd2l0aCB0aGUgaW5mYW50cnkgYW5kIGZlbGwgdXBvbiBhIGRpc29yZGVyZWQgZm9lOyB0aGUgb3RoZXIgd2luZywgaG93ZXZlciwgd2hpY2ggd2FzIGV4dGVuZGVkIGJ5IGl0cyBjb21tYW5kZXJzIHRvIHByZXZlbnQgdGhlaXIgYmVpbmcgc3Vycm91bmRlZCBieSB0aGUgZW5lbXksIHRvIHdob20gdGhleSB3ZXJlIGluZmVyaW9yIGluIG51bWJlcnMsIHdhcyB0aHVzIHdlYWtlbmVkIGluIHRoZSBjZW50cmUgYW5kIGNvdWxkIG5vdCBob2xkIG91dCBhZ2FpbnN0IHRoZWlyIG9wcG9uZW50cywgYnV0IGZsZWQgZmlyc3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['49.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGN1dHRpbmcgdGhlaXIgd2F5IHRocm91Z2ggdGhpcyB3aW5nLCB0aGUgZW5lbXkgYXQgb25jZSBlbnZlbG9wZWQgQnJ1dHVzLiBIZSBoaW1zZWxmIGRpc3BsYXllZCBhbGwgdGhlIHZhbG91ciBwb3NzaWJsZSBpbiBhIHNvbGRpZXIgYW5kIGNvbW1hbmRlciwgY29udGVuZGluZyB3aXRoIGp1ZGdtZW50IGFuZCBwZXJzb25hbCBwcm93ZXNzIGZvciB2aWN0b3J5IGluIHRoZSB0ZXJyaWJsZSBjcmlzaXM7IGJ1dCB0aGF0IHdoaWNoIHdhcyBhbiBhZHZhbnRhZ2UgZm9yIGhpbSBpbiB0aGUgZm9ybWVyIGJhdHRsZSB3YXMgYSBkZXRyaW1lbnQgdG8gaGltIG5vdy4gRm9yIGluIHRoZSBmb3JtZXIgYmF0dGxlIHRoZSBjb25xdWVyZWQgd2luZyBvZiB0aGUgZW5lbXkgaGFkIGJlZW4gYXQgb25jZSBkZXN0cm95ZWQsIGJ1dCB3aGVuIHRoZSBzb2xkaWVycyBvZiBDYXNzaXVzIHdlcmUgcm91dGVkLCBvbmx5IGZldyBvZiB0aGVtIHdlcmUgc2xhaW4sIGFuZCB0aG9zZSB3aG8gdGhlbiBlc2NhcGVkLCByZW5kZXJlZCBmZWFyZnVsIG5vdyBieSB0aGVpciBmb3JtZXIgZGVmZWF0LCBmaWxsZWQgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgYXJteSB3aXRoIGRlamVjdGlvbiBhbmQgY29uZnVzaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgTWFyY3VzIHRoZSBzb24gb2YgQ2F0byBhbHNvLCBmaWdodGluZyBhbW9uZyB0aGUgYnJhdmVzdCBhbmQgbm9ibGVzdCB5b3VuZyBtZW4sIHdhcyBvdmVycG93ZXJlZCwgYnV0IHdvdWxkIG5vdCB5aWVsZCBub3IgZmx5LCBidXQgcGx5aW5nIGhpcyBzd29yZCwgYW5kIGRlY2xhcmluZyB0aGF0IGhlIHdhcyBNYXJjdXMgQ2F0byBhbmQgTWFyY3VzIENhdG8ncyBzb24sIGZlbGwgZGVhZCB1cG9uIHRoZSBtYW55IGVuZW1pZXMgd2hvbSBoZSBoYWQgc2xhaW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNzMuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgbHh4aWlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBUaGUgYnJhdmVzdCBvZiB0aGUgcmVzdCBmZWxsIGFsc28sIHJpc2tpbmcgdGhlaXIgbGl2ZXMgaW4gZGVmZW5jZSBvZiBCcnV0dXMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDczLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIGx4eGlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgbHh4aWlpLiAzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2FzIGEgY2VydGFpbiBMdWNpbGl1cywgYSBicmF2ZSBtYW4sIGFtb25nIHRoZSBjb21yYWRlcyBvZiBCcnV0dXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbnQuIDY5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QW50b255PC90aXRsZT4sIGx4aXguIDEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFRoaXMgbWFuLCBzZWVpbmcgc29tZSBiYXJiYXJpYW4gaG9yc2VtZW4gaWdub3JpbmcgYWxsIG90aGVycyBpbiB0aGVpciBwdXJzdWl0IGFuZCByaWRpbmcgaW1wZXR1b3VzbHkgYWZ0ZXIgQnJ1dHVzLCBkZXRlcm1pbmVkIGF0IHRoZSByaXNrIG9mIGhpcyBsaWZlIHRvIHN0b3AgdGhlbS4gU28gZmFsbGluZyBiZWhpbmQgYSBsaXR0bGUsIGhlIHRvbGQgdGhlbSB0aGF0IGhlIHdhcyBCcnV0dXMuIFRoZSBCYXJiYXJpYW5zIGJlbGlldmVkIGhpbSBiZWNhdXNlIGhlIGFza2VkIHRoZW0gdG8gY29uZHVjdCBoaW0gdG8gQW50b255LCBwcmV0ZW5kaW5nIHRvIGJlIGFmcmFpZCBvZiBPY3Rhdml1cyBidXQgdG8gaGF2ZSBubyBmZWFyIG9mIEFudG9ueS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB3ZXJlIGRlbGlnaHRlZCB3aXRoIHRoZWlyIHVuZXhwZWN0ZWQgcHJpemUsIGFuZCB0aGlua2luZyB0aGVtc2VsdmVzIGFtYXppbmdseSBmb3J0dW5hdGUsIGxlZCBMdWNpbGl1cyBhbG9uZyBpbiB0aGUgZGFya25lc3Mgd2hpY2ggaGFkIG5vdyBmYWxsZW4sIGFmdGVyIHNlbmRpbmcgYWhlYWQgc29tZSBtZXNzZW5nZXJzIHRvIEFudG9ueS4gQW50b255IGhpbXNlbGYgd2FzIHBsZWFzZWQsIG9mIGNvdXJzZSwgYW5kIHNldCBvdXQgdG8gbWVldCB0aGUgZXNjb3J0LCBhbmQgYWxsIHRoZSByZXN0IGFsc28gd2hvIGxlYXJuZWQgdGhhdCBCcnV0dXMgd2FzIGJlaW5nIGJyb3VnaHQgaW4gYWxpdmUgZmxvY2tlZCB0b2dldGhlciwgc29tZSB0aGlua2luZyBoaW0gdG8gYmUgcGl0aWVkIGZvciBoaXMgbWlzZm9ydHVuZSwgb3RoZXJzIHRoYXQgaGUgd2FzIHVud29ydGh5IG9mIGhpcyBmYW1lIGluIHRodXMgYWxsb3dpbmcgaGlzIGxvdmUgb2YgbGlmZSB0byBtYWtlIGhpbSBhIHByZXkgb2YgQmFyYmFyaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGV5IHdlcmUgbmVhciwgaG93ZXZlciwgQW50b255IHBhdXNlZCwgYXQgYSBsb3NzIHRvIGtub3cgaG93IGhlIG91Z2h0IHRvIHJlY2VpdmUgQnJ1dHVzOyBidXQgTHVjaWxpdXMsIGFzIGhlIHdhcyBicm91Z2h0IGZvciB3YXJkLCBzYWlkIHdpdGggZ3JlYXQgYm9sZG5lc3M6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWFyY3VzIEJydXR1cywgTyBBbnRvbnksIG5vIGZvZSBoYXMgdGFrZW4gb3IgY2FuIHRha2U7IG1heSBmb3J0dW5lIG5vdCBzbyBmYXIgcHJldmFpbCBvdmVyIHZpcnR1ZSEgTmF5LCBoZSB3aWxsIGJlIGZvdW5kIGxpdmluZywgb3IgcG9zc2libHkgZXZlbiBseWluZyBkZWFkIGFzIGJlY29tZXMgaGltLiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgYnkgY2hlYXRpbmcgdGhlc2Ugc29sZGllcnMgb2YgdGhpbmUgdGhhdCBJIGFtIGNvbWUsIGFuZCBJIGFtIHJlYWR5IHRvIHN1ZmZlciBmb3IgaXQgYW55IGZhdGFsIHBlbmFsdHkuPC9xPiBXaGVuIEx1Y2lsaXVzIGhhZCB0aHVzIHNwb2tlbiBhbmQgYWxsIHdlcmUgaW4gYW1hemVtZW50LCBBbnRvbnkgdHVybmVkIHRvIGhpcyBjb25kdWN0b3JzIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc3VwcG9zZSwgbXkgZmVsbG93IHNvbGRpZXJzLCB5b3UgYXJlIHZleGVkIGF0IHlvdXIgbWlzdGFrZSBhbmQgdGhpbmsgdGhhdCB5b3UgaGF2ZSBiZWVuIGZsb3V0ZWQ7IAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5idXQgYmUgYXNzdXJlZCB0aGF0IHlvdSBoYXZlIHRha2VuIGEgYmV0dGVyIHByZXkgdGhhbiB0aGF0IHlvdSBzb3VnaHQuIEZvciB5b3Ugc291Z2h0IGFuIGVuZW15LCBidXQgeW91IGNvbWUgYnJpbmdpbmcgbWUgYSBmcmllbmQuIFNpbmNlLCBieSB0aGUgZ29kcywgSSBrbm93IG5vdCBob3cgSSBjb3VsZCBoYXZlIHRyZWF0ZWQgQnJ1dHVzLCBoYWQgaGUgY29tZSBpbnRvIG15IGhhbmRzIGFsaXZlOyBidXQgc3VjaCBtZW4gYXMgdGhpcyBJIHdvdWxkIGhhdmUgbXkgZnJpZW5kcyByYXRoZXIgdGhhbiBteSBlbmVtaWVzLjwvcT4gV2l0aCB0aGVzZSB3b3JkcyBoZSBlbWJyYWNlZCBMdWNpbGl1cywgYW5kIGZvciB0aGUgdGltZSBiZWluZyBwdXQgaGltIGluIGNoYXJnZSBvZiBvbmUgb2YgaGlzIGZyaWVuZHMsIGJ1dCBldmVyIGFmdGVyd2FyZHMgZm91bmQgaW4gaGltIGEgc3VyZSBhbmQgdHJ1c3R5IGhlbHBlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['50.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSB3YXMgYSBjZXJ0YWluIEx1Y2lsaXVzLCBhIGJyYXZlIG1hbiwgYW1vbmcgdGhlIGNvbXJhZGVzIG9mIEJydXR1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBbnQuIDY5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BbnRvbnk8L3RpdGxlPiwgbHhpeC4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gVGhpcyBtYW4sIHNlZWluZyBzb21lIGJhcmJhcmlhbiBob3JzZW1lbiBpZ25vcmluZyBhbGwgb3RoZXJzIGluIHRoZWlyIHB1cnN1aXQgYW5kIHJpZGluZyBpbXBldHVvdXNseSBhZnRlciBCcnV0dXMsIGRldGVybWluZWQgYXQgdGhlIHJpc2sgb2YgaGlzIGxpZmUgdG8gc3RvcCB0aGVtLiBTbyBmYWxsaW5nIGJlaGluZCBhIGxpdHRsZSwgaGUgdG9sZCB0aGVtIHRoYXQgaGUgd2FzIEJydXR1cy4gVGhlIEJhcmJhcmlhbnMgYmVsaWV2ZWQgaGltIGJlY2F1c2UgaGUgYXNrZWQgdGhlbSB0byBjb25kdWN0IGhpbSB0byBBbnRvbnksIHByZXRlbmRpbmcgdG8gYmUgYWZyYWlkIG9mIE9jdGF2aXVzIGJ1dCB0byBoYXZlIG5vIGZlYXIgb2YgQW50b255LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFudC4gNjkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFudG9ueTwvdGl0bGU+LCBseGl4LiAxLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW50b255PC90aXRsZT4sIGx4aXguIDEuPC90cmFuc2xhdGlvbj4="
translation['50.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgd2VyZSBkZWxpZ2h0ZWQgd2l0aCB0aGVpciB1bmV4cGVjdGVkIHByaXplLCBhbmQgdGhpbmtpbmcgdGhlbXNlbHZlcyBhbWF6aW5nbHkgZm9ydHVuYXRlLCBsZWQgTHVjaWxpdXMgYWxvbmcgaW4gdGhlIGRhcmtuZXNzIHdoaWNoIGhhZCBub3cgZmFsbGVuLCBhZnRlciBzZW5kaW5nIGFoZWFkIHNvbWUgbWVzc2VuZ2VycyB0byBBbnRvbnkuIEFudG9ueSBoaW1zZWxmIHdhcyBwbGVhc2VkLCBvZiBjb3Vyc2UsIGFuZCBzZXQgb3V0IHRvIG1lZXQgdGhlIGVzY29ydCwgYW5kIGFsbCB0aGUgcmVzdCBhbHNvIHdobyBsZWFybmVkIHRoYXQgQnJ1dHVzIHdhcyBiZWluZyBicm91Z2h0IGluIGFsaXZlIGZsb2NrZWQgdG9nZXRoZXIsIHNvbWUgdGhpbmtpbmcgaGltIHRvIGJlIHBpdGllZCBmb3IgaGlzIG1pc2ZvcnR1bmUsIG90aGVycyB0aGF0IGhlIHdhcyB1bndvcnRoeSBvZiBoaXMgZmFtZSBpbiB0aHVzIGFsbG93aW5nIGhpcyBsb3ZlIG9mIGxpZmUgdG8gbWFrZSBoaW0gYSBwcmV5IG9mIEJhcmJhcmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['50.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhleSB3ZXJlIG5lYXIsIGhvd2V2ZXIsIEFudG9ueSBwYXVzZWQsIGF0IGEgbG9zcyB0byBrbm93IGhvdyBoZSBvdWdodCB0byByZWNlaXZlIEJydXR1czsgYnV0IEx1Y2lsaXVzLCBhcyBoZSB3YXMgYnJvdWdodCBmb3Igd2FyZCwgc2FpZCB3aXRoIGdyZWF0IGJvbGRuZXNzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWFyY3VzIEJydXR1cywgTyBBbnRvbnksIG5vIGZvZSBoYXMgdGFrZW4gb3IgY2FuIHRha2U7IG1heSBmb3J0dW5lIG5vdCBzbyBmYXIgcHJldmFpbCBvdmVyIHZpcnR1ZSEgTmF5LCBoZSB3aWxsIGJlIGZvdW5kIGxpdmluZywgb3IgcG9zc2libHkgZXZlbiBseWluZyBkZWFkIGFzIGJlY29tZXMgaGltLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBieSBjaGVhdGluZyB0aGVzZSBzb2xkaWVycyBvZiB0aGluZSB0aGF0IEkgYW0gY29tZSwgYW5kIEkgYW0gcmVhZHkgdG8gc3VmZmVyIGZvciBpdCBhbnkgZmF0YWwgcGVuYWx0eS48L3E+IFdoZW4gTHVjaWxpdXMgaGFkIHRodXMgc3Bva2VuIGFuZCBhbGwgd2VyZSBpbiBhbWF6ZW1lbnQsIEFudG9ueSB0dXJuZWQgdG8gaGlzIGNvbmR1Y3RvcnMgYW5kIHNhaWQ6IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['50.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIGJ5IGNoZWF0aW5nIHRoZXNlIHNvbGRpZXJzIG9mIHRoaW5lIHRoYXQgSSBhbSBjb21lLCBhbmQgSSBhbSByZWFkeSB0byBzdWZmZXIgZm9yIGl0IGFueSBmYXRhbCBwZW5hbHR5LjxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzdXBwb3NlLCBteSBmZWxsb3cgc29sZGllcnMsIHlvdSBhcmUgdmV4ZWQgYXQgeW91ciBtaXN0YWtlIGFuZCB0aGluayB0aGF0IHlvdSBoYXZlIGJlZW4gZmxvdXRlZDsgCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGJlIGFzc3VyZWQgdGhhdCB5b3UgaGF2ZSB0YWtlbiBhIGJldHRlciBwcmV5IHRoYW4gdGhhdCB5b3Ugc291Z2h0LiBGb3IgeW91IHNvdWdodCBhbiBlbmVteSwgYnV0IHlvdSBjb21lIGJyaW5naW5nIG1lIGEgZnJpZW5kLiBTaW5jZSwgYnkgdGhlIGdvZHMsIEkga25vdyBub3QgaG93IEkgY291bGQgaGF2ZSB0cmVhdGVkIEJydXR1cywgaGFkIGhlIGNvbWUgaW50byBteSBoYW5kcyBhbGl2ZTsgYnV0IHN1Y2ggbWVuIGFzIHRoaXMgSSB3b3VsZCBoYXZlIG15IGZyaWVuZHMgcmF0aGVyIHRoYW4gbXkgZW5lbWllcy48L3E+IFdpdGggdGhlc2Ugd29yZHMgaGUgZW1icmFjZWQgTHVjaWxpdXMsIGFuZCBmb3IgdGhlIHRpbWUgYmVpbmcgcHV0IGhpbSBpbiBjaGFyZ2Ugb2Ygb25lIG9mIGhpcyBmcmllbmRzLCBidXQgZXZlciBhZnRlcndhcmRzIGZvdW5kIGluIGhpbSBhIHN1cmUgYW5kIHRydXN0eSBoZWxwZXIuCgkJCTwvdHJhbnNsYXRpb24+"
translation['50.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBiZSBhc3N1cmVkIHRoYXQgeW91IGhhdmUgdGFrZW4gYSBiZXR0ZXIgcHJleSB0aGFuIHRoYXQgeW91IHNvdWdodC4gRm9yIHlvdSBzb3VnaHQgYW4gZW5lbXksIGJ1dCB5b3UgY29tZSBicmluZ2luZyBtZSBhIGZyaWVuZC4gU2luY2UsIGJ5IHRoZSBnb2RzLCBJIGtub3cgbm90IGhvdyBJIGNvdWxkIGhhdmUgdHJlYXRlZCBCcnV0dXMsIGhhZCBoZSBjb21lIGludG8gbXkgaGFuZHMgYWxpdmU7IGJ1dCBzdWNoIG1lbiBhcyB0aGlzIEkgd291bGQgaGF2ZSBteSBmcmllbmRzIHJhdGhlciB0aGFuIG15IGVuZW1pZXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEJydXR1cywgYWZ0ZXIgY3Jvc3NpbmcgYSBicm9vayB3aGljaCByYW4gYW1vbmcgdHJlZXMgYW5kIGhhZCBwcmVjaXBpdG91cyBiYW5rcywgd291bGQgZ28gbm8gZnVydGhlciwgc2luY2UgaXQgd2FzIGFscmVhZHkgZGFyaywgYnV0IHNhdCBkb3duIGluIGEgaG9sbG93IHBsYWNlIHdpdGggYSBncmVhdCByb2NrIGluIGZyb250IG9mIGl0LCBoYXZpbmcgYSBmZXcgb2ZmaWNlcnMgYW5kIGZyaWVuZHMgYWJvdXQgaGltLiBGaXJzdCwgaGUgdHVybmVkIGhpcyBleWVzIHRvIHRoZSBoZWF2ZW5zLCB3aGljaCB3ZXJlIHN0dWRkZWQgd2l0aCBzdGFycywgYW5kIHJlY2l0ZWQgdHdvIHZlcnNlcywgb25lIG9mIHdoaWNoIFZvbHVtbml1cyBoYXMgcmVjb3JkZWQ64oCUCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPk8gWmV1cywgZG8gbm90IGZvcmdldCB0aGUgYXV0aG9yIG9mIHRoZXNlIGlsbHMhPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkV1ci4gTWVkLiAzMzIiIHZhbGlkPSJ5ZXMiPkV1cmlwaWRlcywgPHRpdGxlPk1lZGVpYTwvdGl0bGU+LCAzMzQ8L2JpYmw+IChLaXJjaGhvZmYpLjwvbm90ZT4KCQkJCXRoZSBvdGhlciBWb2x1bW5pdXMgc2F5cyBoZSBoYXMgZm9yZ290dGVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBhZnRlciBhIGxpdHRsZSwgaGUgY2FsbGVkIHRoZSBuYW1lIG9mIGVhY2ggb2YgaGlzIGNvbXJhZGVzIHdobyBoYWQgZmFsbGVuIGluIHRoZSBiYXR0bGUgdG8gZGVmZW5kIGhpbSwgZ3JvYW5pbmcgbW9zdCBoZWF2aWx5IGF0IHRoZSBtZW50aW9uIG9mIEZsYXZpdXMgYW5kIExhYmVvLiBMYWJlbyB3YXMgaGlzIGxlZ2F0ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDEyLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGlpLiAzIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgRmxhdml1cyBoaXMgY2hpZWYgb2YgZW5naW5lZXJzLiBBdCB0aGlzIHBvaW50LCBzb21lb25lIHdobyB3YXMgdGhpcnN0eSBoaW1zZWxmIGFuZCBzYXcgdGhhdCBCcnV0dXMgd2FzIHRoaXJzdHkgdG9vLCB0b29rIGEgaGVsbWV0IGFuZCByYW4gZG93biB0byB0aGUgcml2ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYSBub2lzZSBmZWxsIHVwb24gdGhlaXIgZWFycyBmcm9tIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24sIGFuZCBWb2x1bW5pdXMgd2VudCBmb3J0aCB0byByZWNvbm5vaXRyZSwgYW5kIHdpdGggaGltIERhcmRhbnVzIGhpcyBzaGllbGQtYmVhcmVyLiBBZnRlciBhIGxpdHRsZSB3aGlsZSwgaG93ZXZlciwgdGhleSByZXR1cm5lZCwgYW5kIGFza2VkIGFib3V0IHRoZSB3YXRlciB0byBkcmluay4gV2hlcmV1cG9uLCB3aXRoIGEgdmVyeSBleHByZXNzaXZlIHNtaWxlLCBCcnV0dXMgc2FpZCB0byBWb2x1bW5pdXM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgZHJ1bmsgdXA7IGJ1dCBhbm90aGVyIGRyYXVnaHQgc2hhbGwgYmUgZmV0Y2hlZCBmb3IgeW91LjwvcT4gVGhlbiB0aGUgc2FtZSBtYW4gd2hvIGhhZCBicm91Z2h0IHRoZSBmaXJzdCB3YXMgc2VudCBmb3IgbW9yZSwgYnV0IGhlIHJhbiB0aGUgcmlzayBvZiBiZWluZyBjYXB0dXJlZCBieSB0aGUgZW5lbXksIHdhcyB3b3VuZGVkLCBhbmQgd2l0aCBkaWZmaWN1bHR5IGNhbWUgb2ZmIHNhZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgc2luY2UgQnJ1dHVzIGNvbmplY3R1cmVkIHRoYXQgbm90IG1hbnkgb2YgaGlzIG1lbiBoYWQgYmVlbiBraWxsZWQgaW4gdGhlIGJhdHRsZSwgU3RhdHlsbGl1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNjUuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIGx4di4gNCBmLjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiA3My40IiB2YWxpZD0ieWVzIj5seHhpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHByb21pc2VkIGhpbSB0aGF0IGFmdGVyIGN1dHRpbmcgaGlzIHdheSB0aHJvdWdoIHRoZSBlbmVteSAodGhlcmUgd2FzIG5vIG90aGVyIHdheSksIGhlIHdvdWxkIHJlY29ubm9pdHJlIHRoZSBjYW1wLCByYWlzZSBhIGJsYXppbmcgdG9yY2ggaWYgaGUgZm91bmQgdGhpbmdzIHRoZXJlIGluIHNhZmV0eSwgYW5kIHRoZW4gY29tZSBiYWNrIHRvIGhpbS4gQWNjb3JkaW5nbHksIHRoZSBibGF6aW5nIHRvcmNoIHdhcyByYWlzZWQsIHNpbmNlIFN0YXR5bGxpdXMgc3VjY2VlZGVkIGluIHJlYWNoaW5nIHRoZSBjYW1wOyBidXQgYWZ0ZXIgYSBsb25nIHRpbWUgaGFkIHBhc3NlZCBhbmQgaGUgZGlkIG5vdCByZXR1cm4sIEJydXR1cyBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIFN0YXR5bGxpdXMgaXMgYWxpdmUsIGhlIHdpbGwgY29tZSBiYWNrLjwvcT4gQnV0IGl0IHNvIGhhcHBlbmVkIHRoYXQgaGUgZmVsbCBpbiB3aXRoIHRoZSBlbmVteSBvbiBoaXMgd2F5IGJhY2ssIGFuZCB3YXMgc2xhaW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['51.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEJydXR1cywgYWZ0ZXIgY3Jvc3NpbmcgYSBicm9vayB3aGljaCByYW4gYW1vbmcgdHJlZXMgYW5kIGhhZCBwcmVjaXBpdG91cyBiYW5rcywgd291bGQgZ28gbm8gZnVydGhlciwgc2luY2UgaXQgd2FzIGFscmVhZHkgZGFyaywgYnV0IHNhdCBkb3duIGluIGEgaG9sbG93IHBsYWNlIHdpdGggYSBncmVhdCByb2NrIGluIGZyb250IG9mIGl0LCBoYXZpbmcgYSBmZXcgb2ZmaWNlcnMgYW5kIGZyaWVuZHMgYWJvdXQgaGltLiBGaXJzdCwgaGUgdHVybmVkIGhpcyBleWVzIHRvIHRoZSBoZWF2ZW5zLCB3aGljaCB3ZXJlIHN0dWRkZWQgd2l0aCBzdGFycywgYW5kIHJlY2l0ZWQgdHdvIHZlcnNlcywgb25lIG9mIHdoaWNoIFZvbHVtbml1cyBoYXMgcmVjb3JkZWQ64oCUCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5PIFpldXMsIGRvIG5vdCBmb3JnZXQgdGhlIGF1dGhvciBvZiB0aGVzZSBpbGxzITwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5PIFpldXMsIGRvIG5vdCBmb3JnZXQgdGhlIGF1dGhvciBvZiB0aGVzZSBpbGxzITwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRXVyLiBNZWQuIDMzMiIgdmFsaWQ9InllcyI+RXVyaXBpZGVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZWRlaWE8L3RpdGxlPiwgMzM0PC9iaWJsPiAoS2lyY2hob2ZmKS48L25vdGU+CgkJCQl0aGUgb3RoZXIgVm9sdW1uaXVzIHNheXMgaGUgaGFzIGZvcmdvdHRlbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJFdXIuIE1lZC4gMzMyIiB2YWxpZD0ieWVzIj5FdXJpcGlkZXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lZGVpYTwvdGl0bGU+LCAzMzQ8L2JpYmw+IChLaXJjaGhvZmYpLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1lZGVpYTwvdGl0bGU+LCAzMzQ8L3RyYW5zbGF0aW9uPg=="
translation['51.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGEgbGl0dGxlLCBoZSBjYWxsZWQgdGhlIG5hbWUgb2YgZWFjaCBvZiBoaXMgY29tcmFkZXMgd2hvIGhhZCBmYWxsZW4gaW4gdGhlIGJhdHRsZSB0byBkZWZlbmQgaGltLCBncm9hbmluZyBtb3N0IGhlYXZpbHkgYXQgdGhlIG1lbnRpb24gb2YgRmxhdml1cyBhbmQgTGFiZW8uIExhYmVvIHdhcyBoaXMgbGVnYXRlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDEyLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeGlpLiAzIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgRmxhdml1cyBoaXMgY2hpZWYgb2YgZW5naW5lZXJzLiBBdCB0aGlzIHBvaW50LCBzb21lb25lIHdobyB3YXMgdGhpcnN0eSBoaW1zZWxmIGFuZCBzYXcgdGhhdCBCcnV0dXMgd2FzIHRoaXJzdHkgdG9vLCB0b29rIGEgaGVsbWV0IGFuZCByYW4gZG93biB0byB0aGUgcml2ZXIuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMTIuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWkuIDMgZmYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['51.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYSBub2lzZSBmZWxsIHVwb24gdGhlaXIgZWFycyBmcm9tIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24sIGFuZCBWb2x1bW5pdXMgd2VudCBmb3J0aCB0byByZWNvbm5vaXRyZSwgYW5kIHdpdGggaGltIERhcmRhbnVzIGhpcyBzaGllbGQtYmVhcmVyLiBBZnRlciBhIGxpdHRsZSB3aGlsZSwgaG93ZXZlciwgdGhleSByZXR1cm5lZCwgYW5kIGFza2VkIGFib3V0IHRoZSB3YXRlciB0byBkcmluay4gV2hlcmV1cG9uLCB3aXRoIGEgdmVyeSBleHByZXNzaXZlIHNtaWxlLCBCcnV0dXMgc2FpZCB0byBWb2x1bW5pdXM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBpcyBkcnVuayB1cDsgYnV0IGFub3RoZXIgZHJhdWdodCBzaGFsbCBiZSBmZXRjaGVkIGZvciB5b3UuPC9xPiBUaGVuIHRoZSBzYW1lIG1hbiB3aG8gaGFkIGJyb3VnaHQgdGhlIGZpcnN0IHdhcyBzZW50IGZvciBtb3JlLCBidXQgaGUgcmFuIHRoZSByaXNrIG9mIGJlaW5nIGNhcHR1cmVkIGJ5IHRoZSBlbmVteSwgd2FzIHdvdW5kZWQsIGFuZCB3aXRoIGRpZmZpY3VsdHkgY2FtZSBvZmYgc2FmZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['51.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgc2luY2UgQnJ1dHVzIGNvbmplY3R1cmVkIHRoYXQgbm90IG1hbnkgb2YgaGlzIG1lbiBoYWQgYmVlbiBraWxsZWQgaW4gdGhlIGJhdHRsZSwgU3RhdHlsbGl1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDY1LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIHRoZSBZb3VuZ2VyPC90aXRsZT4sIGx4di4gNCBmLjwvYmlibD47IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDczLjQiIHZhbGlkPSJ5ZXMiPmx4eGlpaS4gNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gcHJvbWlzZWQgaGltIHRoYXQgYWZ0ZXIgY3V0dGluZyBoaXMgd2F5IHRocm91Z2ggdGhlIGVuZW15ICh0aGVyZSB3YXMgbm8gb3RoZXIgd2F5KSwgaGUgd291bGQgcmVjb25ub2l0cmUgdGhlIGNhbXAsIHJhaXNlIGEgYmxhemluZyB0b3JjaCBpZiBoZSBmb3VuZCB0aGluZ3MgdGhlcmUgaW4gc2FmZXR5LCBhbmQgdGhlbiBjb21lIGJhY2sgdG8gaGltLiBBY2NvcmRpbmdseSwgdGhlIGJsYXppbmcgdG9yY2ggd2FzIHJhaXNlZCwgc2luY2UgU3RhdHlsbGl1cyBzdWNjZWVkZWQgaW4gcmVhY2hpbmcgdGhlIGNhbXA7IGJ1dCBhZnRlciBhIGxvbmcgdGltZSBoYWQgcGFzc2VkIGFuZCBoZSBkaWQgbm90IHJldHVybiwgQnJ1dHVzIHNhaWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNjUuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gdGhlIFlvdW5nZXI8L3RpdGxlPiwgbHh2LiA0IGYuPC9iaWJsPjsgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byB0aGUgWW91bmdlcjwvdGl0bGU+LCBseHYuIDQgZi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiA3My40IiB2YWxpZD0ieWVzIj5seHhpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIFN0YXR5bGxpdXMgaXMgYWxpdmUsIGhlIHdpbGwgY29tZSBiYWNrLjwvcT4gQnV0IGl0IHNvIGhhcHBlbmVkIHRoYXQgaGUgZmVsbCBpbiB3aXRoIHRoZSBlbmVteSBvbiBoaXMgd2F5IGJhY2ssIGFuZCB3YXMgc2xhaW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIHRoZSBuaWdodCBhZHZhbmNlZCwgQnJ1dHVzIHR1cm5lZCwganVzdCBhcyBoZSBzYXQsIHRvd2FyZHMgaGlzIHNlcnZhbnQgQ2xlaXR1cywgYW5kIHRhbGtlZCB3aXRoIGhpbS4gQW5kIHdoZW4gQ2xlaXR1cyB3ZXB0IGFuZCBtYWRlIG5vIGFuc3dlciwgQnJ1dHVzIG5leHQgZHJldyBEYXJkYW51cyBoaXMgc2hpZWxkLWJlYXJlciBhc2lkZSBhbmQgaGFkIHNvbWUgcHJpdmF0ZSBjb252ZXJzYXRpb24gd2l0aCBoaW0uIEZpbmFsbHksIGhlIHNwb2tlIHRvIFZvbHVtbml1cyBoaW1zZWxmIGluIEdyZWVrLCByZW1pbmRpbmcgaGltIG9mIHRoZWlyIHN0dWRlbnQgbGlmZSwgYW5kIGJlZ2dlZCBoaW0gdG8gZ3Jhc3AgaGlzIHN3b3JkIHdpdGggaGltIGFuZCBoZWxwIGhpbSBkcml2ZSBob21lIHRoZSBibG93LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBWb2x1bW5pdXMgcmVmdXNlZCwgYW5kIHRoZSByZXN0IGxpa2V3aXNlLCBhbmQgc29tZSBvbmUgc2FpZCB0aGV5IG11c3Qgbm90IHRhcnJ5IGJ1dCBmbHksIEJydXR1cyByb3NlIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ5IGFsbCBtZWFucyBtdXN0IHdlIGZseTsgbm90IHdpdGggb3VyIGZlZXQsIGhvd2V2ZXIsIGJ1dCB3aXRoIG91ciBoYW5kcy48L3E+IFRoZW4sIGFmdGVyIGNsYXNwaW5nIGVhY2ggYnkgdGhlIGhhbmQsIHdpdGggYSB2ZXJ5IGNoZWVyZnVsIGNvdW50ZW5hbmNlIGhlIHNhaWQgaGUgcmVqb2ljZWQgd2l0aCBleGNlZWRpbmcgam95IHRoYXQgbm90IG9uZSBvZiBoaXMgZnJpZW5kcyBoYWQgcHJvdmVkIGZhbHNlIHRvIGhpbSwgYW5kIGFzIGZvciBGb3J0dW5lLCBoZSBibGFtZWQgaGVyIG9ubHkgZm9yIGhpcyBjb3VudHJ5J3Mgc2FrZTsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+aGltc2VsZiBoZSByZWdhcmRlZCBhcyBtb3JlIHRvIGJlIGVudmllZCB0aGFuIGhpcyBjb25xdWVyb3JzLCBub3QgeWVzdGVyZGF5IGFuZCB0aGUgZGF5IGJlZm9yZSBtZXJlbHksIGJ1dCBldmVuIG5vdywgc2luY2UgaGUgd2FzIGxlYXZpbmcgYmVoaW5kIGhpbSBhIHJlcHV0YXRpb24gZm9yIHZpcnR1ZSwgd2hpY2ggdGhvc2Ugd2hvIHN1cnBhc3NlZCBpbiBhcm1zIG9yIHdlYWx0aCB3b3VsZCBub3QgZG87IHNpbmNlIHRoZSB3b3JsZCB3b3VsZCBiZWxpZXZlIHRoYXQgYmFzZSBhbmQgdW5qdXN0IG1lbiB3aG8gcHV0IHRvIGRlYXRoIHRoZSBnb29kIGFuZCBqdXN0IHdlcmUgdW5maXQgdG8gcnVsZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYWZ0ZXIgZWFybmVzdGx5IGVudHJlYXRpbmcgdGhlbSB0byBzYXZlIHRoZW1zZWx2ZXMsIGhlIHdpdGhkcmV3IGEgbGl0dGxlIHdheSBpbiB0aGUgY29tcGFueSBvZiB0d28gb3IgdGhyZWUgZnJpZW5kcywgYW1vbmcgd2hvbSB3YXMgU3RyYXRvLCB3aG8gaGFkIGJlZW4gaGlzIGludGltYXRlIHNpbmNlIHRoZXkgc3R1ZGllZCByaGV0b3JpYyB0b2dldGhlci4gVGhpcyBtYW4gaGUgcGxhY2VkIG5lYXJlc3QgdG8gaGltc2VsZiwgYW5kIHRoZW4sIGdyYXNwaW5nIHdpdGggYm90aCBoYW5kcyB0aGUgaGlsdCBvZiBoaXMgbmFrZWQgc3dvcmQsIGhlIGZlbGwgdXBvbiBpdCBhbmQgZGllZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSwgaG93ZXZlciwgc2F5IHRoYXQgaXQgd2FzIG5vdCBCcnV0dXMgaGltc2VsZiwgYnV0IFN0cmF0bywgd2hvIGF0IGhpcyB2ZXJ5IHVyZ2VudCByZXF1ZXN0LCBhbmQgd2l0aCBhdmVydGVkIGV5ZXMsIGhlbGQgdGhlIHN3b3JkIGluIGZyb250IG9mIGhpbSwgdXBvbiB3aGljaCBoZSBmZWxsIHdpdGggc3VjaCBmb3JjZSB0aGF0IGl0IHBhc3NlZCBxdWl0ZSB0aHJvdWdoIGhpcyBicmVhc3QgYW5kIGJyb3VnaHQgaGltIGluc3RhbnQgZGVhdGguPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGJhdHRsZXMgYXQgUGhpbGlwcGkgb2NjdXJyZWQgaW4gNDIgQi5DLiwgYW5kIEJydXR1cyB3YXMgZm9ydHktdGhyZWUgeWVhcnMgb2YgYWdlIHdoZW4gaGUgZGllZC48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['52.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgdGhlIG5pZ2h0IGFkdmFuY2VkLCBCcnV0dXMgdHVybmVkLCBqdXN0IGFzIGhlIHNhdCwgdG93YXJkcyBoaXMgc2VydmFudCBDbGVpdHVzLCBhbmQgdGFsa2VkIHdpdGggaGltLiBBbmQgd2hlbiBDbGVpdHVzIHdlcHQgYW5kIG1hZGUgbm8gYW5zd2VyLCBCcnV0dXMgbmV4dCBkcmV3IERhcmRhbnVzIGhpcyBzaGllbGQtYmVhcmVyIGFzaWRlIGFuZCBoYWQgc29tZSBwcml2YXRlIGNvbnZlcnNhdGlvbiB3aXRoIGhpbS4gRmluYWxseSwgaGUgc3Bva2UgdG8gVm9sdW1uaXVzIGhpbXNlbGYgaW4gR3JlZWssIHJlbWluZGluZyBoaW0gb2YgdGhlaXIgc3R1ZGVudCBsaWZlLCBhbmQgYmVnZ2VkIGhpbSB0byBncmFzcCBoaXMgc3dvcmQgd2l0aCBoaW0gYW5kIGhlbHAgaGltIGRyaXZlIGhvbWUgdGhlIGJsb3cuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFZvbHVtbml1cyByZWZ1c2VkLCBhbmQgdGhlIHJlc3QgbGlrZXdpc2UsIGFuZCBzb21lIG9uZSBzYWlkIHRoZXkgbXVzdCBub3QgdGFycnkgYnV0IGZseSwgQnJ1dHVzIHJvc2UgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CeSBhbGwgbWVhbnMgbXVzdCB3ZSBmbHk7IG5vdCB3aXRoIG91ciBmZWV0LCBob3dldmVyLCBidXQgd2l0aCBvdXIgaGFuZHMuPC9xPiBUaGVuLCBhZnRlciBjbGFzcGluZyBlYWNoIGJ5IHRoZSBoYW5kLCB3aXRoIGEgdmVyeSBjaGVlcmZ1bCBjb3VudGVuYW5jZSBoZSBzYWlkIGhlIHJlam9pY2VkIHdpdGggZXhjZWVkaW5nIGpveSB0aGF0IG5vdCBvbmUgb2YgaGlzIGZyaWVuZHMgaGFkIHByb3ZlZCBmYWxzZSB0byBoaW0sIGFuZCBhcyBmb3IgRm9ydHVuZSwgaGUgYmxhbWVkIGhlciBvbmx5IGZvciBoaXMgY291bnRyeSdzIHNha2U7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmhpbXNlbGYgaGUgcmVnYXJkZWQgYXMgbW9yZSB0byBiZSBlbnZpZWQgdGhhbiBoaXMgY29ucXVlcm9ycywgbm90IHllc3RlcmRheSBhbmQgdGhlIGRheSBiZWZvcmUgbWVyZWx5LCBidXQgZXZlbiBub3csIHNpbmNlIGhlIHdhcyBsZWF2aW5nIGJlaGluZCBoaW0gYSByZXB1dGF0aW9uIGZvciB2aXJ0dWUsIHdoaWNoIHRob3NlIHdobyBzdXJwYXNzZWQgaW4gYXJtcyBvciB3ZWFsdGggd291bGQgbm90IGRvOyBzaW5jZSB0aGUgd29ybGQgd291bGQgYmVsaWV2ZSB0aGF0IGJhc2UgYW5kIHVuanVzdCBtZW4gd2hvIHB1dCB0byBkZWF0aCB0aGUgZ29vZCBhbmQganVzdCB3ZXJlIHVuZml0IHRvIHJ1bGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGVhcm5lc3RseSBlbnRyZWF0aW5nIHRoZW0gdG8gc2F2ZSB0aGVtc2VsdmVzLCBoZSB3aXRoZHJldyBhIGxpdHRsZSB3YXkgaW4gdGhlIGNvbXBhbnkgb2YgdHdvIG9yIHRocmVlIGZyaWVuZHMsIGFtb25nIHdob20gd2FzIFN0cmF0bywgd2hvIGhhZCBiZWVuIGhpcyBpbnRpbWF0ZSBzaW5jZSB0aGV5IHN0dWRpZWQgcmhldG9yaWMgdG9nZXRoZXIuIFRoaXMgbWFuIGhlIHBsYWNlZCBuZWFyZXN0IHRvIGhpbXNlbGYsIGFuZCB0aGVuLCBncmFzcGluZyB3aXRoIGJvdGggaGFuZHMgdGhlIGhpbHQgb2YgaGlzIG5ha2VkIHN3b3JkLCBoZSBmZWxsIHVwb24gaXQgYW5kIGRpZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGl0IHdhcyBub3QgQnJ1dHVzIGhpbXNlbGYsIGJ1dCBTdHJhdG8sIHdobyBhdCBoaXMgdmVyeSB1cmdlbnQgcmVxdWVzdCwgYW5kIHdpdGggYXZlcnRlZCBleWVzLCBoZWxkIHRoZSBzd29yZCBpbiBmcm9udCBvZiBoaW0sIHVwb24gd2hpY2ggaGUgZmVsbCB3aXRoIHN1Y2ggZm9yY2UgdGhhdCBpdCBwYXNzZWQgcXVpdGUgdGhyb3VnaCBoaXMgYnJlYXN0IGFuZCBicm91Z2h0IGhpbSBpbnN0YW50IGRlYXRoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGJhdHRsZXMgYXQgUGhpbGlwcGkgb2NjdXJyZWQgaW4gNDIgQi5DLiwgYW5kIEJydXR1cyB3YXMgZm9ydHktdGhyZWUgeWVhcnMgb2YgYWdlIHdoZW4gaGUgZGllZC48L25vdGU+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGlzIFN0cmF0bywgTWVzc2FsYSwgdGhlIGNvbXJhZGUgb2YgQnJ1dHVzLCBhZnRlciBhIHJlY29uY2lsaWF0aW9uIHdpdGggT2N0YXZpdXMsIG9uY2UgZm91bmQgb2NjYXNpb24gdG8gaW50cm9kdWNlIGhpbSB0byBoaXMgbmV3IG1hc3RlciwgYW5kIHNhaWQsIHdpdGggYSBidXJzdCBvZiB0ZWFyczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIHRoZSBtYW4sIE8gQ2Flc2FyLCB3aG8gZGlkIHRoZSBsYXN0IGtpbmQgb2ZmaWNlIGZvciBteSBkZWFyIEJydXR1cy48L3E+IEFjY29yZGluZ2x5LCBTdHJhdG8gd2FzIGtpbmRseSByZWNlaXZlZCBieSBPY3Rhdml1cywgd2hvLCBpbiBoaXMgc3Vic2VxdWVudCBsYWJvdXJzLCBhbmQgZXNwZWNpYWxseSBhdCB0aGUgYmF0dGxlIG9mIEFjdGl1bSwgZm91bmQgaGltLCBhcyB3ZWxsIGFzIG90aGVyIEdyZWVrcywgYSBicmF2ZSBwYXJ0aXNhbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHNhaWQgdGhhdCBNZXNzYWxhIGhpbXNlbGYgd2FzIG9uY2UgcHJhaXNlZCBieSBPY3Rhdml1cyBiZWNhdXNlLCB0aG91Z2ggYXQgUGhpbGlwcGkgaGUgaGFkIGJlZW4gbW9zdCBob3N0aWxlIHRvIGhpbSBhbmQgQW50b255IGZvciB0aGUgc2FrZSBvZiBCcnV0dXMsIGF0IEFjdGl1bSBoZSBoYWQgYmVlbiBhIG1vc3QgemVhbG91cyBhZGhlcmVudCBvZiBoaXM7IHdoZXJldXBvbiBNZXNzYWxhIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLCBPIENhZXNhciwgSSBoYXZlIGV2ZXIgYmVlbiBvbiB0aGUgYmV0dGVyIGFuZCBqdXN0ZXIgc2lkZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoaXMgU3RyYXRvLCBNZXNzYWxhLCB0aGUgY29tcmFkZSBvZiBCcnV0dXMsIGFmdGVyIGEgcmVjb25jaWxpYXRpb24gd2l0aCBPY3Rhdml1cywgb25jZSBmb3VuZCBvY2Nhc2lvbiB0byBpbnRyb2R1Y2UgaGltIHRvIGhpcyBuZXcgbWFzdGVyLCBhbmQgc2FpZCwgd2l0aCBhIGJ1cnN0IG9mIHRlYXJzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBpcyB0aGUgbWFuLCBPIENhZXNhciwgd2hvIGRpZCB0aGUgbGFzdCBraW5kIG9mZmljZSBmb3IgbXkgZGVhciBCcnV0dXMuPC9xPiBBY2NvcmRpbmdseSwgU3RyYXRvIHdhcyBraW5kbHkgcmVjZWl2ZWQgYnkgT2N0YXZpdXMsIHdobywgaW4gaGlzIHN1YnNlcXVlbnQgbGFib3VycywgYW5kIGVzcGVjaWFsbHkgYXQgdGhlIGJhdHRsZSBvZiBBY3RpdW0sIGZvdW5kIGhpbSwgYXMgd2VsbCBhcyBvdGhlciBHcmVla3MsIGEgYnJhdmUgcGFydGlzYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['53.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgTWVzc2FsYSBoaW1zZWxmIHdhcyBvbmNlIHByYWlzZWQgYnkgT2N0YXZpdXMgYmVjYXVzZSwgdGhvdWdoIGF0IFBoaWxpcHBpIGhlIGhhZCBiZWVuIG1vc3QgaG9zdGlsZSB0byBoaW0gYW5kIEFudG9ueSBmb3IgdGhlIHNha2Ugb2YgQnJ1dHVzLCBhdCBBY3RpdW0gaGUgaGFkIGJlZW4gYSBtb3N0IHplYWxvdXMgYWRoZXJlbnQgb2YgaGlzOyB3aGVyZXVwb24gTWVzc2FsYSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLCBPIENhZXNhciwgSSBoYXZlIGV2ZXIgYmVlbiBvbiB0aGUgYmV0dGVyIGFuZCBqdXN0ZXIgc2lkZS48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQW50b255IGZvdW5kIEJydXR1cyBseWluZyBkZWFkLCBoZSBvcmRlcmVkIHRoZSBib2R5IHRvIGJlIHdyYXBwZWQgaW4gdGhlIG1vc3QgY29zdGx5IG9mIGhpcyBvd24gcm9iZXMsIGFuZCBhZnRlcndhcmRzLCBvbiBoZWFyaW5nIHRoYXQgdGhlIHJvYmUgaGFkIGJlZW4gc3RvbGVuLCBwdXQgdGhlIHRoaWVmIHRvIGRlYXRoLiBUaGUgYXNoZXMgb2YgQnJ1dHVzIGhlIHNlbnQgaG9tZSB0byBoaXMgbW90aGVyIFNlcnZpbGlhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlN1ZXRvbml1cyAoPHRpdGxlPkRpdnVzIEF1Z3VzdHVzPC90aXRsZT4sIDEzKSBzYXlzIHRoYXQgdGhlIGhlYWQgb2YgQnJ1dHVzIHdhcyBzZW50IHRvIFJvbWUgdG8gYmUgdGhyb3duIGF0IHRoZSBmZWV0IG9mIENhZXNhcidzIHN0YXR1ZS48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIFBvcmNpYSwgdGhlIHdpZmUgb2YgQnJ1dHVzLCBOaWNvbGHDvHMgdGhlIHBoaWxvc29waGVyLCBhcyB3ZWxsIGFzIFZhbGVyaXVzIE1heGltdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDx0aXRsZT5EZSBmYWN0aXMgbWVtLjwvdGl0bGU+IGl2LiA2LCA1Ljwvbm90ZT4gcmVsYXRlcyB0aGF0IHNoZSBub3cgZGVzaXJlZCB0byBkaWUsIGJ1dCB3YXMgb3Bwb3NlZCBieSBhbGwgaGVyIGZyaWVuZHMsIHdobyBrZXB0IHN0cmljdCB3YXRjaCB1cG9uIGhlcjsgd2hlcmVmb3JlIHNoZSBzbmF0Y2hlZCB1cCBsaXZlIGNvYWxzIGZyb20gdGhlIGZpcmUsIHN3YWxsb3dlZCB0aGVtLCBrZXB0IGhlciBtb3V0aCBmYXN0IGNsb3NlZCwgYW5kIHRodXMgbWFkZSBhd2F5IHdpdGggaGVyc2VsZi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCB0aGVyZSBpcyBleHRhbnQgYSBsZXR0ZXIgb2YgQnJ1dHVzIHRvIGhpcyBmcmllbmRzIGluIHdoaWNoIGhlIGNoaWRlcyB0aGVtIHdpdGggcmVnYXJkIHRvIFBvcmNpYSBhbmQgbGFtZW50cyBoZXIgZmF0ZSwgYmVjYXVzZSBzaGUgd2FzIG5lZ2xlY3RlZCBieSB0aGVtIGFuZCB0aGVyZWZvcmUgZHJpdmVuIGJ5IGlsbG5lc3MgdG8gcHJlZmVyIGRlYXRoIHRvIGxpZmUuIEl0IHdvdWxkIHNlZW0sIHRoZW4sIHRoYXQgTmljb2xhw7xzIHdhcyBtaXN0YWtlbiBpbiB0aGUgdGltZSBvZiBoZXIgZGVhdGgsIHNpbmNlIGhlciBkaXN0ZW1wZXIsIGhlciBsb3ZlIGZvciBCcnV0dXMsIGFuZCB0aGUgbWFubmVyIG9mIGhlciBkZWF0aCwgYXJlIGFsc28gaW5kaWNhdGVkIGluIHRoZSBsZXR0ZXIsIElmLCBpbmRlZWQsIGl0IGlzIGEgZ2VudWluZSBvbmUuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQW50b255IGZvdW5kIEJydXR1cyBseWluZyBkZWFkLCBoZSBvcmRlcmVkIHRoZSBib2R5IHRvIGJlIHdyYXBwZWQgaW4gdGhlIG1vc3QgY29zdGx5IG9mIGhpcyBvd24gcm9iZXMsIGFuZCBhZnRlcndhcmRzLCBvbiBoZWFyaW5nIHRoYXQgdGhlIHJvYmUgaGFkIGJlZW4gc3RvbGVuLCBwdXQgdGhlIHRoaWVmIHRvIGRlYXRoLiBUaGUgYXNoZXMgb2YgQnJ1dHVzIGhlIHNlbnQgaG9tZSB0byBoaXMgbW90aGVyIFNlcnZpbGlhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3VldG9uaXVzICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZ1cyBBdWd1c3R1czwvdGl0bGU+LCAxMykgc2F5cyB0aGF0IHRoZSBoZWFkIG9mIEJydXR1cyB3YXMgc2VudCB0byBSb21lIHRvIGJlIHRocm93biBhdCB0aGUgZmVldCBvZiBDYWVzYXIncyBzdGF0dWUuPC9ub3RlPiAKCQkJCSAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2dXMgQXVndXN0dXM8L3RpdGxlPiwgMTMpIHNheXMgdGhhdCB0aGUgaGVhZCBvZiBCcnV0dXMgd2FzIHNlbnQgdG8gUm9tZSB0byBiZSB0aHJvd24gYXQgdGhlIGZlZXQgb2YgQ2Flc2FyJ3Mgc3RhdHVlLjwvdHJhbnNsYXRpb24+"
translation['53.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBQb3JjaWEsIHRoZSB3aWZlIG9mIEJydXR1cywgTmljb2xhw7xzIHRoZSBwaGlsb3NvcGhlciwgYXMgd2VsbCBhcyBWYWxlcml1cyBNYXhpbXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGZhY3RpcyBtZW0uPC90aXRsZT4gaXYuIDYsIDUuPC9ub3RlPiByZWxhdGVzIHRoYXQgc2hlIG5vdyBkZXNpcmVkIHRvIGRpZSwgYnV0IHdhcyBvcHBvc2VkIGJ5IGFsbCBoZXIgZnJpZW5kcywgd2hvIGtlcHQgc3RyaWN0IHdhdGNoIHVwb24gaGVyOyB3aGVyZWZvcmUgc2hlIHNuYXRjaGVkIHVwIGxpdmUgY29hbHMgZnJvbSB0aGUgZmlyZSwgc3dhbGxvd2VkIHRoZW0sIGtlcHQgaGVyIG1vdXRoIGZhc3QgY2xvc2VkLCBhbmQgdGh1cyBtYWRlIGF3YXkgd2l0aCBoZXJzZWxmLiAKCQkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlIGZhY3RpcyBtZW0uPC90aXRsZT4gaXYuIDYsIDUuPC90cmFuc2xhdGlvbj4="
