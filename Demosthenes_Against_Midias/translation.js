var translation={}
translation['21.1'] = ""
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIHBlb3BsZSwgYWN0aW5nIGhvbm9yYWJseSBhbmQgcmlnaHRseSwgZXZpbmNlZCBzdWNoIGFuZ2VyLCBzdWNoCiAgICAgICAgICAgICAgICAgICAgZXhhc3BlcmF0aW9uLCBzdWNoIGRlZXAgY29uY2VybiBhdCB0aGUgd3JvbmdzIHdoaWNoIHRoZXkga25ldyBJIGhhZCBzdWZmZXJlZCwKICAgICAgICAgICAgICAgICAgICB0aGF0LCBpbiBzcGl0ZSBvZiB0aGUgZnJhbnRpYyBlZmZvcnRzIG9mIHRoZSBkZWZlbmRhbnQgYW5kIGEgZmV3IHN1cHBvcnRlcnMsCiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIGRlYWYgdG8gdGhlaXIgYXJndW1lbnRzLCBzaHV0IHRoZWlyIGV5ZXMgdG8gdGhlaXIgd2VhbHRoIGFuZCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHByb21pc2VzLCBhbmQgY29uZGVtbmVkIGhpbSBieSBhbiB1bmFuaW1vdXMgc2hvdyBvZiBoYW5kcywgdGhlcmV1cG9uLCBnZW50bGVtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUganVyeSwgbWFueSBjaXRpemVucywgaW5jbHVkaW5nIHNvbWUgb2YgeW91IHdobyBhcmUgaGVyZSBpbiBjb3VydCwgY2FtZSB0bwogICAgICAgICAgICAgICAgICAgIG1lIGFuZCBkZW1hbmRlZCBhbmQgZXZlbiBpbXBsb3JlZCB0aGF0IEkgc2hvdWxkIHRha2UgdGhlIGZ1cnRoZXIgc3RlcCBvZgogICAgICAgICAgICAgICAgICAgIGJyaW5naW5nIE1laWRpYXMgdW5kZXIgeW91ciBqdXJpc2RpY3Rpb247IGFuZCB0aGV5IGRpZCBzbywgSSB0aGluaywgZm9yIHR3bwogICAgICAgICAgICAgICAgICAgIHJlYXNvbnMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGJlY2F1c2UsIHNvCiAgICAgICAgICAgICAgICAgICAgaGVscCBtZSBoZWF2ZW4hIHRoZXkgdGhvdWdodCB0aGF0IG15IG93biB3cm9uZ3Mgd2VyZSBzZXJpb3VzLCBhbmQgdGhleSBhbHNvCiAgICAgICAgICAgICAgICAgICAgd2lzaGVkIHRvIHB1bmlzaCBNZWlkaWFzIGZvciBjb25kdWN0IHdoaWNoIHRoZXkgaGFkIHdpdG5lc3NlZCBvbiBvdGhlcgogICAgICAgICAgICAgICAgICAgIG9jY2FzaW9ucywgYXMgYSBzY291bmRyZWwgYW5kIGEgcnVmZmlhbiB3aG8gY291bGQgbm8gbG9uZ2VyIGJlIHRvbGVyYXRlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYmVpbmcgc28sIEkgaGF2ZSBpbiB5b3VyIGludGVyZXN0cwogICAgICAgICAgICAgICAgICAgIHRha2VuIGFsbCBkdWUgcHJlY2F1dGlvbnMsIGFuZCBub3cgdGhhdCB0aGUgY2FzZSBpcyBiZWZvcmUgdGhlIGNvdXJ0LCBJIGFtIGhlcmUsCiAgICAgICAgICAgICAgICAgICAgYXMgeW91IHNlZSwgdG8gYWNjdXNlIGhpbSwgaGF2aW5nIHJlZnVzZWQgbGFyZ2Ugc3VtcyBvZiBtb25leSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hpY2ggSSBtaWdodCBoYXZlIGFjY2VwdGVkIG9uCiAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uIG9mIGRyb3BwaW5nIHRoZSBwcm9zZWN1dGlvbiwgYW5kIGhhdmluZyBoYWQgdG8gc3RlZWwgbXlzZWxmIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBtYW55IGFwcGVhbHMgYW5kIGZhdm9yYWJsZSBvZmZlcnMteWVzLCBhbmQgZXZlbiBtZW5hY2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoYXQgeWV0IHJlbWFpbnMgdG8gZG8gaXMgaW4geW91ciBoYW5kczsgYnV0IG15IGhvcGUgaXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBtb3JlIHRoZSBkZWZlbmRhbnQgaGFzIHBlc3RlcmVkIHlvdSB3aXRoIGhpcyBzb2xpY2l0YXRpb25z4oCUSQogICAgICAgICAgICAgICAgICAgIG9ic2VydmVkIGp1c3Qgbm93IHdoYXQgaGUgd2FzIHVwIHRvIGluIGZyb250IG9mIHRoZSBjb3VydGhvdXNlLW1vcmUgbGlrZWx5IEkgYW0KICAgICAgICAgICAgICAgICAgICB0byBvYnRhaW4ganVzdGljZS4gRm9yIEkgd291bGQgbm90IGluc3VsdCBhbnkgb2YgeW91IGJ5IGltYWdpbmluZyB0aGF0IHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgaW5kaWZmZXJlbnQgdG8gdGhlIGNhdXNlIGluIHdoaWNoIHlvdSBzbyBoZWFydGlseSBzdXBwb3J0ZWQgbWUgYmVmb3JlLCBvcgogICAgICAgICAgICAgICAgICAgIHRoYXQsIGluIG9yZGVyIHRvIGdyYW50IE1laWRpYXMgaW1tdW5pdHkgZm9yIGZ1dHVyZSBvdXRyYWdlcywgYW55IGp1cnltYW4KICAgICAgICAgICAgICAgICAgICByZW1lbWJlcmluZyBoaXMgb2F0aCB3aWxsIGdpdmUgb3RoZXIgdGhhbiB3aGF0IGhlIGNvbnNpZGVycyBhIHJpZ2h0ZW91cyB2ZXJkaWN0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBpZiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgSSB3ZXJlIGdvaW5nIHRvIGFjY3VzZSBNZWlkaWFzIG9mCiAgICAgICAgICAgICAgICAgICAgdW5jb25zdGl0dXRpb25hbCBwcm9wb3NhbHMgb3Igb2YgbWlzY29uZHVjdCBvbiBhbiBlbWJhc3N5IG9yIG9mIGFueSBvZmZlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhhdCBzb3J0LCBJIHNob3VsZCBub3QgZmVlbCBqdXN0aWZpZWQgaW4gYXBwZWFsaW5nIGZvciB5b3VyIHN5bXBhdGh5LCBmb3IgSQogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIHRoYXQgaW4gc3VjaCBjYXNlcyB0aGUgcGxhaW50aWZmIG91Z2h0IHRvIGNvbmZpbmUgaGltc2VsZiB0byBwcm92aW5nCiAgICAgICAgICAgICAgICAgICAgaGlzIGNhc2UsIHRob3VnaCB0aGUgZGVmZW5kYW50IG1heSBoYXZlIHJlY291cnNlIHRvIHByYXllcnMuIEJ1dCBzaW5jZSBNZWlkaWFzCiAgICAgICAgICAgICAgICAgICAgYnJpYmVkIHRoZSB1bXBpcmVzIGFuZCBzbyByb2JiZWQgbXkgdHJpYmUgdW5mYWlybHkgb2YgdGhlIHByaXplLCA8L3RyYW5zbGF0aW9uPg=="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnNpbmNlIEkgaW4gcGVyc29uIHdhcyBzdHJ1Y2sgYnkgaGltIGFuZCBpbnN1bHRlZCBhcwogICAgICAgICAgICAgICAgICAgIHBlcmhhcHMgbm8gY2hvcnVzLW1hc3RlciB3YXMgZXZlciBpbnN1bHRlZCBiZWZvcmUsIGFuZCBzaW5jZSBJIGFtIGhlcmUgdG8gZm9sbG93CiAgICAgICAgICAgICAgICAgICAgdXAgdGhlIHZlcmRpY3Qgd2hpY2ggdGhlIEFzc2VtYmx5IHByb25vdW5jZWQgaW4gaW5kaWduYXRpb24gYW5kIGFuZ2VyIGF0IHN1Y2gKICAgICAgICAgICAgICAgICAgICBjb25kdWN0LCBmb3IgdGhlc2UgcmVhc29ucyBJIHNoYWxsIG5vdCBzaHJpbmsgZXZlbiBmcm9tIGFuIGFwcGVhbCB0byB5b3UuIEZvciwKICAgICAgICAgICAgICAgICAgICBpZiBJIG1heSBzYXkgc28sIGl0IGlzIG5vdyBJIHdobyBhbSBpbiB0aGUgcG9zaXRpb24gb2YgYSBkZWZlbmRhbnQsIGlmIGluZGVlZCB0bwogICAgICAgICAgICAgICAgICAgIG9idGFpbiBubyByZWRyZXNzIGZvciBhbiBpbnN1bHQgaXMgdGhlIHJlYWwgY2FsYW1pdHkuIDwvdHJhbnNsYXRpb24+"
translation['21.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBJIGFwcGVhbCB0byB5b3UgYWxsLCBhbmQKICAgICAgICAgICAgICAgICAgICBpbXBsb3JlIHlvdSBmaXJzdCB0byBncmFudCBtZSBhIGZhdm9yYWJsZSBoZWFyaW5nLCBhbmQgc2Vjb25kbHksIGlmIEkgcHJvdmUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBpbnN1bHRzIG9mIE1laWRpYXMgdG91Y2gsIG5vdCBtZSBvbmx5LCBidXQgeW91IGFuZCB0aGUgbGF3cyBhbmQgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgYm9keSBvZiBjaXRpemVucywgdG8gY29tZSBhdCBvbmNlIHRvIGFueSByZXNjdWUgYW5kIHRvIHlvdXIgb3duLiBGb3IgdGhlIGNhc2UKICAgICAgICAgICAgICAgICAgICBzdGFuZHMgdGh1cywgQXRoZW5pYW5zLiBJIHdhcyB0aGUgdmljdGltIGFuZCBpdCB3YXMgbXkgcGVyc29uIHRoYXQgd2FzIHRoZW4KICAgICAgICAgICAgICAgICAgICBvdXRyYWdlZDsgYnV0IG5vdyB0aGUgcXVlc3Rpb24gdG8gYmUgZm91Z2h0IG91dCBhbmQgZGVjaWRlZCBpcyB3aGV0aGVyIE1laWRpYXMKICAgICAgICAgICAgICAgICAgICBpcyB0byBiZSBhbGxvd2VkIHRvIHJlcGVhdCBoaXMgcGVyZm9ybWFuY2VzIGFuZCBpbnN1bHQgYW55b25lIGFuZCBldmVyeW9uZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdSB3aXRoIGltcHVuaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBpZiBwZXJoYXBzIGFueW9uZQogICAgICAgICAgICAgICAgICAgIG9mIHlvdSBoaXRoZXJ0byBhc3N1bWVkIHRoYXQgdGhpcyBhY3Rpb24gd2FzIGJyb3VnaHQgZnJvbSBwcml2YXRlIG1vdGl2ZXMsIHdoZW4KICAgICAgICAgICAgICAgICAgICBoZSBub3cgcmVmbGVjdHMgdGhhdCB0aGlzIGlzIGEgbWF0dGVyIG9mIGdlbmVyYWwgY29uY2VybiwgYW5kIHRoYXQgcHVibGljCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3QgZGVtYW5kcyB0aGF0IG5vIG9uZSBzaGFsbCBiZSBhbGxvd2VkIHRvIGFjdCBpbiB0aGlzIHdheSwgbGV0IGhpbSBncmFudAogICAgICAgICAgICAgICAgICAgIG1lIGFuIGF0dGVudGl2ZSBoZWFyaW5nLCBhbmQgdGhlbiBsZXQgaGltIGdpdmUgd2hhdCBzZWVtcyB0byBoaW0gdGhlIGZhaXJlc3QKICAgICAgICAgICAgICAgICAgICAgICAgdmVyZGljdC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGZpcnN0IHRoZSBjbGVyayBzaGFsbCByZWFkIHlvdQogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgd2hpY2ggcHJvdmlkZXMgZm9yIHRoZSBsb2RnaW5nIG9mIHBsYWludHMgaW4gdGhlIEFzc2VtYmx5OyBhZnRlciB0aGF0IEkKICAgICAgICAgICAgICAgICAgICB3aWxsIHRyeSB0byBlbmxpZ2h0ZW4geW91IG9uIG90aGVyIHBvaW50cy4gUmVjaXRlIHRoZSBsYXcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bVGhlIFByeXRhbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsIGNhbGwgYSBtZWV0aW5nIG9mIHRoZSBBc3NlbWJseSBpbiB0aGUgdGVtcGxlIG9mIERpb255c3VzIG9uIHRoZSBkYXkKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCBhZnRlciB0aGUgUGFuZGlhLiBBdCB0aGlzIG1lZXRpbmcgdGhleSBzaGFsbCBmaXJzdCBkZWFsIHdpdGggcmVsaWdpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgIG1hdHRlcnM7IG5leHQgdGhleSBzaGFsbCBsYXkgYmVmb3JlIGl0IHRoZSBwbGFpbnRzIGxvZGdlZCBjb25jZXJuaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW9uIG9yIHRoZSBjb250ZXN0cyBhdCB0aGUgRGlvbnlzaWEsIG5hbWVseSBzdWNoIGFzIGhhdmUgbm90IGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgc2F0aXNmaWVkLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltUaGUgUHJ5dGFuZXMKICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgY2FsbCBhIG1lZXRpbmcgb2YgdGhlIEFzc2VtYmx5IGluIHRoZSB0ZW1wbGUgb2YgRGlvbnlzdXMgb24gdGhlIGRheQogICAgICAgICAgICAgICAgICAgICAgICBuZXh0IGFmdGVyIHRoZSBQYW5kaWEuIEF0IHRoaXMgbWVldGluZyB0aGV5IHNoYWxsIGZpcnN0IGRlYWwgd2l0aCByZWxpZ2lvdXMKICAgICAgICAgICAgICAgICAgICAgICAgbWF0dGVyczsgbmV4dCB0aGV5IHNoYWxsIGxheSBiZWZvcmUgaXQgdGhlIHBsYWludHMgbG9kZ2VkIGNvbmNlcm5pbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npb24gb3IgdGhlIGNvbnRlc3RzIGF0IHRoZSBEaW9ueXNpYSwgbmFtZWx5IHN1Y2ggYXMgaGF2ZSBub3QgYmVlbgogICAgICAgICAgICAgICAgICAgICAgICBzYXRpc2ZpZWQuXTwvdHJhbnNsYXRpb24+"
translation['21.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIGlzIHRoZSBsYXcsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCB3aGljaCBwcm92aWRlcyBmb3IgdGhlIGxvZGdpbmcgb2YgYSBwbGFpbnQuIEl0IGRpcmVjdHMsIGFzIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgaGVhcmQsIHRoYXQgYSBtZWV0aW5nIG9mIHRoZSBBc3NlbWJseSBzaGFsbCBiZSBoZWxkIGluIHRoZSB0ZW1wbGUgb2YgRGlvbnlzdXMKICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGUgUGFuZGlhLCBhbmQgdGhhdCBhdCB0aGlzIG1lZXRpbmcsIHdoZW4gdGhlIGNoYWlybWVuIGZvciB0aGUgZGF5IGhhdmUKICAgICAgICAgICAgICAgICAgICBkZWFsdCB3aXRoIHRoZSBvZmZpY2lhbCBhY3RzIG9mIHRoZSBjaGllZiBBcmNob24sIHRoZXkgc2hhbGwgYWxzbyBkZWFsIHdpdGggYW55CiAgICAgICAgICAgICAgICAgICAgb2ZmZW5jZXMgb3IgaWxsZWdhbCBhY3RzIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgZmVzdGl2YWzigJRhIHNvdW5kIGFuZAogICAgICAgICAgICAgICAgICAgIGV4cGVkaWVudCBsYXcsIEF0aGVuaWFucywgYXMgdGhlIGZhY3RzIG9mIHRoZSBwcmVzZW50IGNhc2UgYXR0ZXN0LiBGb3Igd2hlbiBpdAogICAgICAgICAgICAgICAgICAgIGFwcGVhcnMgdGhhdCBjZXJ0YWluIHBlcnNvbnMsIHdpdGggdGhpcyB0aHJlYXQgb3ZlcmhhbmdpbmcgdGhlbSwgY2FuIGJlIGFzCiAgICAgICAgICAgICAgICAgICAgaW5zb2xlbnQgYXMgZXZlciwgaG93IHNob3VsZCB3ZSBleHBlY3QgdGhhdCBzdWNoIG1lbiB3b3VsZCBiZWhhdmUsIGlmIHRoZXJlIHdlcmUKICAgICAgICAgICAgICAgICAgICBubyByaXNrIGFuZCBubyB0cmlhbCB0byBiZSBmYWNlZD8gPC90cmFuc2xhdGlvbj4="
translation['21.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkgd2FudCB0byByZWFkIHRvIHlvdSB0aGUgbmV4dCBsYXcgYXMgd2VsbCwgYmVjYXVzZQogICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgaWxsdXN0cmF0ZSB0byBhbGwgb2YgeW91IHRoZSBzZWxmLXJlc3RyYWludCBvZiB0aGUgY2l0aXplbnMgaW4gZ2VuZXJhbAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgaGFyZGlob29kIG9mIHRoZSBkZWZlbmRhbnQuIFJlYWQgdGhlIGxhdy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltFdmVnb3J1cwogICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZCB0aGF0LCBvbiB0aGUgb2NjYXNpb24gb2YgdGhlIHByb2Nlc3Npb24gaW4gaG9ub3Igb2YgRGlvbnlzdXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgUGVpcmFldXMgd2l0aCB0aGUgY29tZWRpZXMgYW5kIHRyYWdlZGllcywgdGhlIHByb2Nlc3Npb24gYXQgdGhlIExlbmFldW0gd2l0aAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgY29tZWRpZXMgYW5kIHRyYWdlZGllcywgdGhlIHByb2Nlc3Npb24gYXQgdGhlIENpdHkgRGlvbnlzaWEgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYm95cycgY29udGVzdHMgYW5kIHRoZSByZXZlbCBhbmQgdGhlIGNvbWVkaWVzIGFuZCB0cmFnZWRpZXMuIGFuZCBhbHNvIGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW9uIGFuZCBjb250ZXN0IG9mIHRoZSBUaGFyZ2VsaWEsIGl0IHNoYWxsIG5vdCBiZSBsYXdmdWwgb24gdGhvc2UKICAgICAgICAgICAgICAgICAgICAgICAgZGF5cyB0byBkaXN0cmFpbiBvciB0byBzZWl6ZSBhbnkgZGVidG9ycycgcHJvcGVydHksIGV2ZW4gaWYgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdGVycy4gSWYgYW55b25lIHRyYW5zZ3Jlc3NlcyBhbnkgb2YgdGhlc2UgcmVndWxhdGlvbnMsIGhlIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGxpYWJsZSB0byBwcm9zZWN1dGlvbiBieSB0aGUgYWdncmlldmVkIHBhcnR5LCBhbmQgcHVibGljIHBsYWludHMgYWdhaW5zdCBoaW0KICAgICAgICAgICAgICAgICAgICAgICAgYXMgYW4gb2ZmZW5kZXIgbWF5IGJlIGxvZGdlZCBhdCB0aGUgbWVldGluZyBvZiB0aGUgQXNzZW1ibHkgaW4gdGhlIHRlbXBsZSBvZgogICAgICAgICAgICAgICAgICAgICAgICBEaW9ueXN1cywgYXMgaXMgcHJvdmlkZWQgYnkgc3RhdHV0ZSBpbiB0aGUgY2FzZSBvZiBvdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBvZmZlbmRlcnMuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0V2ZWdvcnVzCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkIHRoYXQsIG9uIHRoZSBvY2Nhc2lvbiBvZiB0aGUgcHJvY2Vzc2lvbiBpbiBob25vciBvZiBEaW9ueXN1cyBpbgogICAgICAgICAgICAgICAgICAgICAgICBQZWlyYWV1cyB3aXRoIHRoZSBjb21lZGllcyBhbmQgdHJhZ2VkaWVzLCB0aGUgcHJvY2Vzc2lvbiBhdCB0aGUgTGVuYWV1bSB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb21lZGllcyBhbmQgdHJhZ2VkaWVzLCB0aGUgcHJvY2Vzc2lvbiBhdCB0aGUgQ2l0eSBEaW9ueXNpYSB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBib3lzJyBjb250ZXN0cyBhbmQgdGhlIHJldmVsIGFuZCB0aGUgY29tZWRpZXMgYW5kIHRyYWdlZGllcy4gYW5kIGFsc28gYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npb24gYW5kIGNvbnRlc3Qgb2YgdGhlIFRoYXJnZWxpYSwgaXQgc2hhbGwgbm90IGJlIGxhd2Z1bCBvbiB0aG9zZQogICAgICAgICAgICAgICAgICAgICAgICBkYXlzIHRvIGRpc3RyYWluIG9yIHRvIHNlaXplIGFueSBkZWJ0b3JzJyBwcm9wZXJ0eSwgZXZlbiBpZiB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0ZXJzLiBJZiBhbnlvbmUgdHJhbnNncmVzc2VzIGFueSBvZiB0aGVzZSByZWd1bGF0aW9ucywgaGUgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgbGlhYmxlIHRvIHByb3NlY3V0aW9uIGJ5IHRoZSBhZ2dyaWV2ZWQgcGFydHksIGFuZCBwdWJsaWMgcGxhaW50cyBhZ2FpbnN0IGhpbQogICAgICAgICAgICAgICAgICAgICAgICBhcyBhbiBvZmZlbmRlciBtYXkgYmUgbG9kZ2VkIGF0IHRoZSBtZWV0aW5nIG9mIHRoZSBBc3NlbWJseSBpbiB0aGUgdGVtcGxlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIERpb255c3VzLCBhcyBpcyBwcm92aWRlZCBieSBzdGF0dXRlIGluIHRoZSBjYXNlIG9mIG90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIG9mZmVuZGVycy5dPC90cmFuc2xhdGlvbj4="
translation['21.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBvYnNlcnZlLCBnZW50bGVtZW4gb2YgdGhlIGp1cnksIHRoYXQgd2hlcmVhcyBpbiB0aGUgZmlyc3QgbGF3IHRoZSBwdWJsaWMgcGxhaW50CiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIGxvZGdlZCBhZ2FpbnN0IHRob3NlIHdobyB2aW9sYXRlIHRoZSBsYXdzIG9mIHRoZSBmZXN0aXZhbCwgaW4gdGhlIGxhdHRlcgogICAgICAgICAgICAgICAgICAgIGxhdyB5b3UgaGF2ZSBzYW5jdGlvbmVkIHBsYWludHMgYWdhaW5zdCB0aG9zZSB3aG8gZXhhY3QgbW9uZXkgZnJvbSBkZWZhdWx0aW5nCiAgICAgICAgICAgICAgICAgICAgZGVidG9ycyBvciBzZWl6ZSBhbnkgcHJvcGVydHkgb3IgdXNlIHZpb2xlbmNlIHRvIHRoYXQgZW5kLiBTbyBmYXIgZnJvbSB0aGlua2luZwogICAgICAgICAgICAgICAgICAgIGl0IHJpZ2h0IHRoYXQgYW55IG1hbidzIHBlcnNvbiBzaG91bGQgYmUgb3V0cmFnZWQgb24gdGhvc2UgZGF5cywgb3IgdGhhdCBhbnkKICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQgc2hvdWxkIGJlIGRhbWFnZWQgd2hpY2ggYSBjaXRpemVuIHByb3ZpZGVzIG91dCBvZiBoaXMgcHJpdmF0ZSBtZWFucwogICAgICAgICAgICAgICAgICAgIGZvciBhIHB1YmxpYyBzZXJ2aWNlLCB5b3UgaGF2ZSBldmVuIGNvbmNlZGVkIHRoYXQgd2hhdCBieSBsYXcgYW5kIGJ5IHZlcmRpY3QKICAgICAgICAgICAgICAgICAgICBiZWxvbmdzIHRvIHRoZSB3aW5uZXIgb2YgYSBzdWl0IHNob3VsZCByZW1haW4gdGhlIHByb3BlcnR5IG9mIHRoZSBsb3NlciBhbmQKICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbCBvd25lciwgYXQgYW55IHJhdGUgZHVyaW5nIHRoZSBmZXN0aXZhbC4gPC90cmFuc2xhdGlvbj4="
translation['21.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgdGhlcmVmb3JlLCBBdGhlbmlhbnMsIGhhdmUgYWxsIHJpc2VuIHRvIHN1Y2ggYSBoZWlnaHQgb2YKICAgICAgICAgICAgICAgICAgICBiZW5ldm9sZW5jZSBhbmQgcGlldHkgdGhhdCBkdXJpbmcgdGhvc2UgZGF5cyB5b3UgaGF2ZSBldmVuIHN1c3BlbmRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBleGFjdGlvbiBvZiBwZW5hbHRpZXMgZHVlIGZvciBwYXN0IG9mZmVuY2VzOyBidXQgTWVpZGlhcywgYXMgSSBzaGFsbCBwcm92ZSwKICAgICAgICAgICAgICAgICAgICBjaG9zZSB0aG9zZSB2ZXJ5IHNhbWUgZGF5cyB0byBjb21taXQgb2ZmZW5jZXMgdGhhdCBjYWxsIGZvciB0aGUgc2V2ZXJlc3QKICAgICAgICAgICAgICAgICAgICBwdW5pc2htZW50LiBJIGludGVuZCB0byBkZXNjcmliZSBpbiBvcmRlciBlYWNoIG91dHJhZ2Ugb2Ygd2hpY2ggSSBoYXZlIGJlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgdmljdGltLCBiZWZvcmUgSSBzcGVhayBvZiB0aGUgYmxvd3MgaW4gd2hpY2ggaGlzIGF0dGFja3MgY3VsbWluYXRlZCwgZm9yIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgaXMgbm90IGEgc2luZ2xlIG9uZSBvZiB0aG9zZSBhdHRhY2tzIGZvciB3aGljaCBoZSB3aWxsIG5vdCBiZSBzaG93biB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWQgZGVhdGguIDwvdHJhbnNsYXRpb24+"
translation['21.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VHdvIHllYXJzIGFnbyB0aGUgdHJpYmUgb2YgUGFuZGlvbmlzIGhhZCBmYWlsZWQgdG8gYXBwb2ludCBhIGNob3J1cy1tYXN0ZXIsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdoZW4gdGhlIEFzc2VtYmx5IG1ldCBhdCB3aGljaCB0aGUgbGF3IGRpcmVjdHMgdGhlIEFyY2hvbnMgdG8gYXNzaWduIHRoZQogICAgICAgICAgICAgICAgICAgIGZsdXRlLXBsYXllcnMgYnkgbG90IHRvIHRoZSBjaG9ydXNlcywgdGhlcmUgd2FzIGEgaGVhdGVkIGRpc2N1c3Npb24gYW5kIG11dHVhbAogICAgICAgICAgICAgICAgICAgIHJlY3JpbWluYXRpb24gYmV0d2VlbiB0aGUgQXJjaG9uIGFuZCB0aGUgb3ZlcnNlZXJzIG9mIHRoZSB0cmliZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RWxlY3RlZCwgb25lIGZyb20gZWFjaCB0cmliZSwgdG8gaGVscCB0aGUgQXJjaG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGluIGRpcmVjdGluZyB0aGUgcHJvY2Vzc2lvbiBhdCB0aGUgRGlvbnlzaWEuPC9ub3RlPiBUaGVyZXVwb24gSSBjYW1lIGZvcndhcmQKICAgICAgICAgICAgICAgICAgICBhbmQgdm9sdW50ZWVyZWQgdG8gYWN0IGFzIGNob3J1cy1tYXN0ZXIsIGFuZCBhdCB0aGUgZHJhd2luZyBvZiB0aGUgbG90cyBJIHdhcwogICAgICAgICAgICAgICAgICAgIGZvcnR1bmF0ZSBlbm91Z2ggdG8gZ2V0IGZpcnN0IGNob2ljZSBvZiBhIGZsdXRlLXBsYXllci4gPC90cmFuc2xhdGlvbj4="
translation['21.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UsIEF0aGVuaWFucywgYWxsIG9mIHlvdSwgd2VsY29tZWQgd2l0aCB0aGUgdXRtb3N0CiAgICAgICAgICAgICAgICAgICAgY29yZGlhbGl0eSBib3RoIHRoZXNlIGluY2lkZW50c+KAlG15IHZvbHVudGFyeSBvZmZlciBhbmQgbXkgc3Ryb2tlIG9mCiAgICAgICAgICAgICAgICAgICAgbHVjazsgYW5kIHlvdXIgY2hlZXJzIGFuZCBhcHBsYXVzZSBleHByZXNzZWQgeW91ciBhcHByb3ZhbCBvZiBteSBjb25kdWN0IGFuZAogICAgICAgICAgICAgICAgICAgIHlvdXIgc3ltcGF0aHkgd2l0aCBteSBnb29kIGZvcnR1bmUuIEJ1dCB0aGVyZSBzZWVtcyB0byBoYXZlIGJlZW4gb25lIHNvbGl0YXJ5CiAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uLCBNZWlkaWFzLCB3aG8gaW4gaGlzIGNoYWdyaW4ga2VwdCB1cCBhIGNvbnN0YW50IGZpcmUgb2YgaW5zdWx0cywKICAgICAgICAgICAgICAgICAgICB0cmlmbGluZyBvciBzZXJpb3VzLCBkdXJpbmcgdGhlIHdob2xlIHBlcmlvZCBvZiBteSBzZXJ2aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIHRyb3VibGUgdGhhdCBoZSBjYXVzZWQgYnkgb3Bwb3NpbmcgdGhlIGV4ZW1wdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIG91ciBjaG9ydXMgZnJvbSBtaWxpdGFyeSBzZXJ2aWNlLCBvciBieSBwdXR0aW5nIGhpbXNlbGYgZm9yd2FyZCBhcyBvdmVyc2VlciBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBEaW9ueXNpYSBhbmQgZGVtYW5kaW5nIGVsZWN0aW9uLCB0aGVzZSBhbmQgb3RoZXIgc2ltaWxhciBhbm5veWFuY2VzIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIHBhc3Mgb3ZlciBpbiBzaWxlbmNlOyBmb3IgSSBhbSBub3QgdW5hd2FyZSB0aGF0IGFsdGhvdWdoIHRvIG15c2VsZiwgdGhlIHZpY3RpbQogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBwZXJzZWN1dGlvbiBhbmQgaW5zb2xlbmNlLCBlYWNoIG9mIHRoZXNlIGFjdHMgY2F1c2VkIGFzIG11Y2ggaXJyaXRhdGlvbgogICAgICAgICAgICAgICAgICAgIGFzIGFueSByZWFsbHkgc2VyaW91cyBvZmZlbmNlLCB5ZXQgdG8gdGhlIHJlc3Qgb2YgeW91LCB3aG8gd2VyZSBub3QgZGlyZWN0bHkKICAgICAgICAgICAgICAgICAgICBjb25jZXJuZWQsIHRoZXNlIHRoaW5ncyBpbiB0aGVtc2VsdmVzIHdvdWxkIGhhcmRseSBzZWVtIHRvIGNhbGwgZm9yIGxpdGlnYXRpb24uCiAgICAgICAgICAgICAgICAgICAgSSBzaGFsbCB0aGVyZWZvcmUgY29uZmluZSBteXNlbGYgdG8gd2hhdCB3aWxsIGV4Y2l0ZSBpbmRpZ25hdGlvbiBpbiBhbGwgb2YgeW91CiAgICAgICAgICAgICAgICAgICAgYWxpa2UuIDwvdHJhbnNsYXRpb24+"
translation['21.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgc3Vic2VxdWVudCBjb25kdWN0LCB3aGljaCBJIGFtIG5vdwogICAgICAgICAgICAgICAgICAgIGdvaW5nIHRvIGRlc2NyaWJlLCBwYXNzZXMgYWxsIGxpbWl0czsgYW5kIGluZGVlZCBJIHNob3VsZCBuZXZlciBoYXZlIHZlbnR1cmVkIHRvCiAgICAgICAgICAgICAgICAgICAgYXJyYWlnbiBoaW0gdG9kYXksIGhhZCBJIG5vdCBwcmV2aW91c2x5IHNlY3VyZWQgaGlzIGltbWVkaWF0ZSBjb252aWN0aW9uIGluIHRoZQogICAgICAgICAgICAgICAgICAgIEFzc2VtYmx5LiBUaGUgc2FjcmVkIGFwcGFyZWzigJRmb3IgYWxsIGFwcGFyZWwgcHJvdmlkZWQgZm9yIHVzZSBhdCBhCiAgICAgICAgICAgICAgICAgICAgZmVzdGl2YWwgSSByZWdhcmQgYXMgYmVpbmcgc2FjcmVkIHVudGlsIGFmdGVyIGl0IGhhcyBiZWVuIHVzZWTigJRhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29sZGVuIGNyb3ducyx3aGljaCBJIG9yZGVyZWQgZm9yIHRoZSBkZWNvcmF0aW9uIG9mIHRoZSBjaG9ydXMsIGhlIHBsb3R0ZWQgdG8KICAgICAgICAgICAgICAgICAgICBkZXN0cm95LG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGJ5IGEKICAgICAgICAgICAgICAgICAgICBub2N0dXJuYWwgcmFpZCBvbiB0aGUgcHJlbWlzZXMgb2YgbXkgZ29sZHNtaXRoLiBBbmQgaGUgZGlkIGRlc3Ryb3kgdGhlbSwgdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgbm90IGNvbXBsZXRlbHksIGZvciB0aGF0IHdhcyBiZXlvbmQgaGlzIHBvd2VyLiBBbmQgbm8gb25lIGNhbiBzYXkgdGhhdCBoZSBldmVyCiAgICAgICAgICAgICAgICAgICAgeWV0IGhlYXJkIG9mIGFueW9uZSBkYXJpbmcgb3IgcGVycGV0cmF0aW5nIHN1Y2ggYW4gb3V0cmFnZSBpbiB0aGlzIGNpdHkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90IGNvbnRlbnQgd2l0aCB0aGlzLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBoZSBhY3R1YWxseSBjb3JydXB0ZWQKICAgICAgICAgICAgICAgICAgICB0aGUgdHJhaW5lciBvZiBteSBjaG9ydXM7IGFuZCBpZiBUZWxlcGhhbmVzLCB0aGUgZmx1dGUtcGxheWVyLCBoYWQgbm90IHByb3ZlZAogICAgICAgICAgICAgICAgICAgIHRoZSBzdGF1bmNoZXN0IGZyaWVuZCB0byBtZSwgaWYgaGUgaGFkIG5vdCBzZWVuIHRocm91Z2ggdGhlIGZlbGxvdydzIGdhbWUgYW5kCiAgICAgICAgICAgICAgICAgICAgc2VudCBoaW0gYWJvdXQgaGlzIGJ1c2luZXNzLCBpZiBoZSBoYWQgbm90IGZlbHQgaXQgaGlzIGR1dHkgdG8gdHJhaW4gdGhlIGNob3J1cwogICAgICAgICAgICAgICAgICAgIGFuZCB3ZWxkIHRoZW0gaW50byBzaGFwZSBoaW1zZWxmLCB3ZSBjb3VsZCBub3QgaGF2ZSB0YWtlbiBwYXJ0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbXBldGl0aW9uLCBBdGhlbmlhbnM7IHRoZSBjaG9ydXMgd291bGQgaGF2ZSBjb21lIGluIHVudHJhaW5lZCBhbmQgd2Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGNvdmVyZWQgd2l0aCBpZ25vbWlueS4gTm9yIGRpZCBoaXMgaW5zb2xlbmNlIHN0b3AgZXZlbiB0aGVyZS4gSXQgd2FzCiAgICAgICAgICAgICAgICAgICAgc28gdW5yZXN0cmFpbmVkIHRoYXQgaGUgYnJpYmVkIHRoZSBjcm93bmVkIEFyY2hvbiBoaW1zZWxmOyBoZSBiYW5kZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hvcmlzdGVycyBhZ2FpbnN0IG1lOyBoZSBiYXdsZWQgYW5kIHRocmVhdGVuZWQsIHN0YW5kaW5nIGJlc2lkZSB0aGUgdW1waXJlcyBhcwogICAgICAgICAgICAgICAgICAgIHRoZXkgdG9vayB0aGUgb2F0aCBoZSBibG9ja2VkIHRoZSBnYW5nd2F5cyBmcm9tIHRoZSB3aW5ncyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Um9vbXMgcHJvamVjdGluZyBSLiBhbmQgTC4gZnJvbSB0aGUgYmFjay1zY2VuZSwgYW5kIGdpdmluZwogICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3MgdG8gdGhlIG9yY2hlc3RyYSBmb3IgdGhlIGRpdGh5cmFtYmljIGNob3J1cy4gTWVpZGlhcyBhcHBhcmVudGx5CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBlbGxlZCB0aGVtIHRvIGVudGVyIGJ5IHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PgOG9sc+Bzr/OtM6/zrk8L2ZvcmVpZ24+LAogICAgICAgICAgICAgICAgICAgICAgICBsaWtlIGEgdHJhZ2ljIGNob3J1cy4gU2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkhhaWdoJ3MgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXR0aWMgVGhlYXRyZTwvdGl0bGU+LCBwLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMTE3LjwvYmlibD48L25vdGU+IG5haWxpbmcgdXAgdGhvc2UgcHVibGljIHRob3JvdWdoZmFyZXMgd2l0aG91dCBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdHk7IGhlIG5ldmVyIGNlYXNlZCB0byBjYXVzZSBtZSB1bnRvbGQgZGFtYWdlIGFuZCBhbm5veWFuY2UuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+A4b2xz4HOv860zr/OuTwvZm9yZWlnbj4sCiAgICAgICAgICAgICAgICAgICAgICAgIGxpa2UgYSB0cmFnaWMgY2hvcnVzLiBTZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+SGFpZ2gncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BdHRpYyBUaGVhdHJlPC90aXRsZT4sIHAuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMTcuPC9iaWJsPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkF0dGljIFRoZWF0cmU8L3RpdGxlPiwgcC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExNy48L3RyYW5zbGF0aW9uPg=="
translation['21.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aG9zZSBvdXRyYWdlcyB3aGljaCB3ZXJlIGNvbW1pdHRlZCBpbiBwdWJsaWMgb3IKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIHVtcGlyZXMgaW4gdGhlIHRoZWF0ZXIsIHlvdSBhcmUgeW91cnNlbHZlcyBteSB3aXRuZXNzZXMsIGFsbCBvZiB5b3UsCiAgICAgICAgICAgICAgICAgICAgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LiBBbmQgc3VyZWx5IHRoZSBzdGF0ZW1lbnRzIG9uIHdoaWNoIG1vc3QgcmVsaWFuY2Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgcGxhY2VkIGFyZSB0aG9zZSBvZiB3aGljaCB0aGUganVyeSBjYW4gdGhlbXNlbHZlcyBhdHRlc3QgdGhlIHRydXRoLiBTbyBhZnRlcgogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBhbHJlYWR5IGNvcnJ1cHRlZCB0aGUgdW1waXJlcyBpbiB0aGUgbWVuJ3MgY29udGVzdCwgaGUgcHV0IHRoZSBjYXAsIGFzIGl0CiAgICAgICAgICAgICAgICAgICAgd2VyZSwgb24gYWxsIGhpcyBwcmV2aW91cyBhY3RzIG9mIHdhbnRvbm5lc3MgYnkgdHdvIG91dHJhZ2VzOiBoZSBhc3NhdWx0ZWQgbXkKICAgICAgICAgICAgICAgICAgICBwZXJzb24sIGFuZCBoZSB3YXMgY2hpZWZseSByZXNwb25zaWJsZSBmb3IgcHJldmVudGluZyBteSB0cmliZSwgd2hpY2ggd2FzCiAgICAgICAgICAgICAgICAgICAgd2lubmluZywgZnJvbSBnYWluaW5nIHRoZSBwcml6ZS4gPC90cmFuc2xhdGlvbj4="
translation['21.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2Ugd2VyZSB0aGUgY3JpbWVzIGFuZCBicnV0YWxpdGllcyB3aGljaCBNZWlkaWFzCiAgICAgICAgICAgICAgICAgICAgY29tbWl0dGVkIGluIGNvbm5lY3Rpb24gd2l0aCB0aGUgZmVzdGl2YWwgYWdhaW5zdCBteSBmZWxsb3ctdHJpYmVzbWVuIGFuZAogICAgICAgICAgICAgICAgICAgIG15c2VsZi4gSXQgd2FzIGZvciB0aGVzZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBJIGxvZGdlZCBteSBwdWJsaWMgcGxhaW50OyBhbmQgdGhlcmUgYXJlIG1hbnkKICAgICAgICAgICAgICAgICAgICBiZXNpZGVzLCBvZiB3aGljaCBJIHdpbGwgZGVzY3JpYmUgdG8geW91IGltbWVkaWF0ZWx5IGFzIG1hbnkgYXMgSSBjYW4uIEJ1dCBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB0byB0ZWxsIG9mIG1hbnkgb3RoZXIgYWN0cyBvZiB1bm1pdGlnYXRlZCByYXNjYWxpdHkgYW5kIGluc29sZW5jZSwgZGlyZWN0ZWQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IG1hbnkgb2YgeW91cnNlbHZlcywgYW5kIG1hbnkgZGFyaW5nIGNyaW1lcyBvZiB0aGlzIGJsYWNrZ3VhcmQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIG9mIGhpcyB2aWN0aW1zLCBnZW50bGVtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgc3VmZmVyZWQgaW4gc2lsZW5jZSwgYmVjYXVzZSB0aGV5IHdlcmUgY293ZWQgYnkgaGltIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICBzZWxmLWNvbmZpZGVuY2UsIG9yIGJ5IGhpcyBnYW5nIG9mIGJ1bGxpZXMsIGhpcyB3ZWFsdGggYW5kIGFsbCBoaXMgb3RoZXIKICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXM7IG90aGVycyB0cmllZCB0byBvYnRhaW4gcmVkcmVzcyBhbmQgZmFpbGVkOyBvdGhlcnMgYWdhaW4gbWFkZSB0ZXJtcwogICAgICAgICAgICAgICAgICAgIHdpdGggaGltLCBwZXJoYXBzIGJlY2F1c2UgdGhleSB0aG91Z2h0IHRoYXQgdGhlIGJlc3QgcG9saWN5LiBUaG9zZSwgdGhlbiwgd2hvCiAgICAgICAgICAgICAgICAgICAgd2VyZSBpbmR1Y2VkIHRvIGRvIHNvIGhhdmUgb2J0YWluZWQgdGhlIHNhdGlzZmFjdGlvbiBkdWUgdG8gdGhlbXNlbHZlczsgYnV0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhdGlzZmFjdGlvbiBkdWUgdG8gdGhlIGxhd3MsIGJ5IGJyZWFraW5nIHdoaWNoIE1laWRpYXMgd3JvbmdlZCB0aGVtIGFuZCBpcwogICAgICAgICAgICAgICAgICAgIHdyb25naW5nIG1lIG5vdyBhbmQgZXZlcnkgb3RoZXIgY2l0aXplbuKAlG9mIHRoYXQgc2F0aXNmYWN0aW9uIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICB0aGUgZGlzcGVuc2Vycy4gPC90cmFuc2xhdGlvbj4="
translation['21.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgaW5jbHVkZSBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmZW5jZXMgaW4gb25lIHN3ZWVwaW5nIHBlbmFsdHksIHdoYXRldmVyIHlvdSBjb25zaWRlciBqdXN0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHdpbGwgZmlyc3QsIHRoZW4sIGFkZHVjZSBwcm9vZnMgb2YgdGhlIG91dHJhZ2VzIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICBteXNlbGYsIG5leHQgb2YgdGhvc2UgYWdhaW5zdCB5b3UuIEFmdGVyIHRoYXQsIEF0aGVuaWFucywgSSB3aWxsIGV4YW1pbmUgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgb2YgaGlzIGxpZmUgYW5kIHdpbGwgc2hvdyB0aGF0IGhlIGRlc2VydmVzIG5vdCBvbmUgZGVhdGgsIGJ1dCBhIHRob3VzYW5kLgogICAgICAgICAgICAgICAgICAgIEZpcnN0IHBsZWFzZSB0YWtlIGFuZCByZWFkIHRoZSBkZXBvc2l0aW9uIG9mIHRoZSBnb2xkc21pdGguIDwvdHJhbnNsYXRpb24+"
translation['21.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0ksIFBhbW1lbmVzLCBzb24gb2YgUGFtbWVuZXMsIG9mIEVyY2hpYSwKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBhIGdvbGRzbWl0aCdzIHNob3AgaW4gdGhlIEFnb3JhLCB3aGVyZSBJIHJlc2lkZSBhbmQgY2Fycnkgb24gbXkKICAgICAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3MuIFdoZW4gRGVtb3N0aGVuZXMsIGZvciB3aG9tIEkgYW0gYSB3aXRuZXNzLCBjb21taXNzaW9uZWQgbWUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgZmFzaGlvbiBhIGdvbGRlbiBjcm93biw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SWYgdGhpcyBkb2N1bWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSB3b3J0aCBlbWVuZGluZywgd2Ugc2hvdWxkIGhhdmUgdG8gcmVhZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg8+EzrXPhuG9sc69zr/Phc+CIM+Hz4HPhc+Dzr/hv6bPgjwvZm9yZWlnbj4gaGVyZSBhbmQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4TOv+G9us+CCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgz4PPhM61z4bhvbHOvc6/z4XPgjwvZm9yZWlnbj4gYmVsb3csIHRvIHRhbGx5IHdpdGggPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4xNiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxLjE2PC9iaWJsPi48L25vdGU+IGFuZCB0byBtYWtlIGEgZ29sZC1lbWJyb2lkZXJlZCByb2JlLCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0IHdlYXIgdGhlbSBhdCB0aGUgcHJvY2Vzc2lvbiBpbiBob25vciBvZiBEaW9ueXN1czsgYW5kIHdoZW4gSSBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkIHRoZW0gYW5kIGhhZCB0aGVtIHJlYWR5IGJ5IG1lLCBNZWlkaWFzLCB3aG8gaXMgYmVpbmcgcHJvc2VjdXRlZCBieQogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcywgYnJva2UgaW50byBteSBwcmVtaXNlcyBieSBuaWdodCwgaGF2aW5nIGFsc28gb3RoZXJzIHdpdGggaGltLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdHJpZWQgdG8gZGVzdHJveSB0aGUgY3Jvd24gYW5kIHRoZSByb2JlLCBhbmQgYSBwYXJ0IG9mIHRoZW0gaGUgaW5qdXJlZCwKICAgICAgICAgICAgICAgICAgICAgICAgYnV0IHdhcyBub3QgYWJsZSB0byBkZXN0cm95IHRoZW0gY29tcGxldGVseSwgYmVjYXVzZSBJIGFwcGVhcmVkIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgaGltLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bSSwgUGFtbWVuZXMsIHNvbiBvZiBQYW1tZW5lcywgb2YgRXJjaGlhLAogICAgICAgICAgICAgICAgICAgICAgICBoYXZlIGEgZ29sZHNtaXRoJ3Mgc2hvcCBpbiB0aGUgQWdvcmEsIHdoZXJlIEkgcmVzaWRlIGFuZCBjYXJyeSBvbiBteQogICAgICAgICAgICAgICAgICAgICAgICBidXNpbmVzcy4gV2hlbiBEZW1vc3RoZW5lcywgZm9yIHdob20gSSBhbSBhIHdpdG5lc3MsIGNvbW1pc3Npb25lZCBtZSB0bwogICAgICAgICAgICAgICAgICAgICAgICBmYXNoaW9uIGEgZ29sZGVuIGNyb3duLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JZiB0aGlzIGRvY3VtZW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIHdvcnRoIGVtZW5kaW5nLCB3ZSBzaG91bGQgaGF2ZSB0byByZWFkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Dz4TOtc+G4b2xzr3Ov8+Fz4Igz4fPgc+Fz4POv+G/ps+CPC9mb3JlaWduPiBoZXJlIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhM6/4b26z4IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPg8+EzrXPhuG9sc69zr/Phc+CPC9mb3JlaWduPiBiZWxvdywgdG8gdGFsbHkgd2l0aCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjE2IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjEuMTY8L2JpYmw+Ljwvbm90ZT4gYW5kIHRvIG1ha2UgYSBnb2xkLWVtYnJvaWRlcmVkIHJvYmUsIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgbWlnaHQgd2VhciB0aGVtIGF0IHRoZSBwcm9jZXNzaW9uIGluIGhvbm9yIG9mIERpb255c3VzOyBhbmQgd2hlbiBJIGhhZAogICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZWQgdGhlbSBhbmQgaGFkIHRoZW0gcmVhZHkgYnkgbWUsIE1laWRpYXMsIHdobyBpcyBiZWluZyBwcm9zZWN1dGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLCBicm9rZSBpbnRvIG15IHByZW1pc2VzIGJ5IG5pZ2h0LCBoYXZpbmcgYWxzbyBvdGhlcnMgd2l0aCBoaW0sCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0cmllZCB0byBkZXN0cm95IHRoZSBjcm93biBhbmQgdGhlIHJvYmUsIGFuZCBhIHBhcnQgb2YgdGhlbSBoZSBpbmp1cmVkLAogICAgICAgICAgICAgICAgICAgICAgICBidXQgd2FzIG5vdCBhYmxlIHRvIGRlc3Ryb3kgdGhlbSBjb21wbGV0ZWx5LCBiZWNhdXNlIEkgYXBwZWFyZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCBoaW0uXTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Dz4TOtc+G4b2xzr3Ov8+Fz4Igz4fPgc+Fz4POv+G/ps+CPC9mb3JlaWduPiBoZXJlIGFuZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhM6/4b26z4IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDPg8+EzrXPhuG9sc69zr/Phc+CPC9mb3JlaWduPiBiZWxvdywgdG8gdGFsbHkgd2l0aCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjE2IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjEuMTY8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['21.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkgaGF2ZSBtdWNoCiAgICAgICAgICAgICAgICAgICAgdG8gc2F5IGFsc28sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFib3V0CiAgICAgICAgICAgICAgICAgICAgdGhlIHdyb25ncyB3aGljaCBoZSBpbmZsaWN0ZWQgb24gb3RoZXJzLCBhcyBJIHRvbGQgeW91IGF0IHRoZSBiZWdpbm5pbmcgb2YgbXkKICAgICAgICAgICAgICAgICAgICBzcGVlY2gsIGFuZCBJIGhhdmUgbWFkZSBhIGNvbGxlY3Rpb24gb2YgaGlzIG91dHJhZ2VvdXMgYW5kIGluc3VsdGluZyBhY3RzLCB3aGljaAogICAgICAgICAgICAgICAgICAgIHlvdSBzaGFsbCBoZWFyIGluIGEgbW9tZW50LiBUaGUgY29sbGVjdGlvbiB3YXMgaW5kZWVkIGFuIGVhc3kgbWF0dGVyLCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgdmljdGltcyB0aGVtc2VsdmVzIGFwcGxpZWQgdG8gbWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZXJlIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG9idmlvdXNseSBzb21lIGRpc2xvY2F0aW9uIGhlcmUuIFRoZSBldmlkZW5jZSBvZiB0aGUgZ29sZHNtaXRoLCB3aGljaAogICAgICAgICAgICAgICAgICAgICAgICBjb25jZXJucyB0aGUgb3V0cmFnZXMgc3BlY2lmaWVkIGluIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PgM+Bzr/Oss6/zrvhvbU8L2ZvcmVpZ24+LCBzaG91bGQgaGF2ZSBjb21lLCB3aXRoIHRoZSBvdGhlciBkZXBvc2l0aW9ucywgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMTgiIHZhbGlkPSJ5ZXMiPkRlbS4gMjEuMTg8L2JpYmw+LiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjIzIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMS4yMzwvYmlibD4sIGluIGl0cyBwcmVzZW50IHBsYWNlLCB3aXRoIGl0cyByZWZlcmVuY2UgdG8gdGhlIGJlZ2lubmluZwogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc3BlZWNoLCBpcyBub25zZW5zZS4gSXQgaXMgYSByZXBldGl0aW9uIG9mIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMTkiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxLjE5PC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4yMCIgdmFsaWQ9InllcyI+RGVtLiAyMS4yMDwvYmlibD4sIGJlaW5nIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGludHJvZHVjdGlvbiB0byBhIGRlc2NyaXB0aW9uIG9mIG91dHJhZ2VzIGNvbW1pdHRlZCBhZ2FpbnN0IG90aGVycy4gVGhpcwogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIGhpcyBhcmd1bWVudCBEZW1vc3RoZW5lcyBjb21tZW5jZXMgYXQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4xMjgiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxLjEyODwvYmlibD4uIEdvb2R3aW4sIHdobyB0aGlua3MgdGhhdCBEZW1vc3RoZW5lcyBpbnRlbmRlZCB0byByZXZpc2UKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIGFycmFuZ2VtZW50IG9mIHRvcGljcywgYnV0IGRpZCBub3QgY2FycnkgaXQgb3V0IHdoZW4gdGhlIGNhc2Ugd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3BwZWQsIGJyYWNrZXRzIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMjMiIHZhbGlkPSJ5ZXMiPkRlbS4gMjEuMjM8L2JpYmw+IGhlcmUgYW5kIGluc2VydHMgaXQKICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMTI4IiB2YWxpZD0ieWVzIj5EZW0uIDIxLjEyODwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Az4HOv86yzr/Ou+G9tTwvZm9yZWlnbj4sIHNob3VsZCBoYXZlIGNvbWUsIHdpdGggdGhlIG90aGVyIGRlcG9zaXRpb25zLCBhZnRlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4xOCIgdmFsaWQ9InllcyI+RGVtLiAyMS4xODwvYmlibD4uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMjMiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxLjIzPC9iaWJsPiwgaW4gaXRzIHByZXNlbnQgcGxhY2UsIHdpdGggaXRzIHJlZmVyZW5jZSB0byB0aGUgYmVnaW5uaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzcGVlY2gsIGlzIG5vbnNlbnNlLiBJdCBpcyBhIHJlcGV0aXRpb24gb2YgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4xOSIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjEuMTk8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjIwIiB2YWxpZD0ieWVzIj5EZW0uIDIxLjIwPC9iaWJsPiwgYmVpbmcgYW4KICAgICAgICAgICAgICAgICAgICAgICAgaW50cm9kdWN0aW9uIHRvIGEgZGVzY3JpcHRpb24gb2Ygb3V0cmFnZXMgY29tbWl0dGVkIGFnYWluc3Qgb3RoZXJzLiBUaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgaGlzIGFyZ3VtZW50IERlbW9zdGhlbmVzIGNvbW1lbmNlcyBhdCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjEyOCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjEuMTI4PC9iaWJsPi4gR29vZHdpbiwgd2hvIHRoaW5rcyB0aGF0IERlbW9zdGhlbmVzIGludGVuZGVkIHRvIHJldmlzZQogICAgICAgICAgICAgICAgICAgICAgICBoaXMgYXJyYW5nZW1lbnQgb2YgdG9waWNzLCBidXQgZGlkIG5vdCBjYXJyeSBpdCBvdXQgd2hlbiB0aGUgY2FzZSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcHBlZCwgYnJhY2tldHMgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4yMyIgdmFsaWQ9InllcyI+RGVtLiAyMS4yMzwvYmlibD4gaGVyZSBhbmQgaW5zZXJ0cyBpdAogICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4xMjgiIHZhbGlkPSJ5ZXMiPkRlbS4gMjEuMTI4PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['21.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IGJlZm9yZSBJCiAgICAgICAgICAgICAgICAgICAgY29tZSB0byB0aGF0LCBJIHdhbnQgdG8gc3BlYWsgYWJvdXQgdGhlIHRyaWNrcyBieSB3aGljaCBJIGFtIHRvbGQgaGUgd2lsbCB0cnkgdG8KICAgICAgICAgICAgICAgICAgICBkZWNlaXZlIHlvdTsgZm9yIEkgdGhpbmsgaXQgdmVyeSBuZWNlc3NhcnkgZm9yIG1lIHRvIHB1dCBteSByZW1hcmtzIG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBzdWJqZWN0IGJlZm9yZSB5b3UsIGFuZCB2ZXJ5IGltcG9ydGFudCBmb3IgeW91IHRvIGhlYXIgdGhlbS4gV2h5IHNvPyBCZWNhdXNlIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgYXJndW1lbnQgdGhhdCBwcmV2ZW50cyB5b3VyIGRlY2VwdGlvbiB3aWxsIGhlbHAgeW91IHRvIGNhc3QgeW91ciB2b3RlcyBpbgogICAgICAgICAgICAgICAgICAgIGFjY29yZGFuY2Ugd2l0aCBqdXN0aWNlIGFuZCB5b3VyIG9hdGguIFlvdSBtdXN0IHBheSBhdHRlbnRpb24gdG8gdGhpcyBhcmd1bWVudAogICAgICAgICAgICAgICAgICAgIGFib3ZlIGFsbCBvdGhlcnMgYW5kIGJlYXIgaXQgaW4gbWluZCwgc28gYXMgdG8gbWVldCBlYWNoIHNlcGFyYXRlIHBvaW50IGluIGhpcwogICAgICAgICAgICAgICAgICAgIHNwZWVjaC4gPC90cmFuc2xhdGlvbj4="
translation['21.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kCiAgICAgICAgICAgICAgICAgICAgZmlyc3QsIGl0IGlzIHByZXR0eSBldmlkZW50IGZyb20gaGlzIHByaXZhdGUgY29udmVyc2F0aW9uIGFzIHJlcG9ydGVkIHRvIG1lIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSB3aWxsIHNheSB0aGF0LCBpZiBJIGhhZCByZWFsbHkgc3VmZmVyZWQgZnJvbSBoaW0gYXMgSSBhc3NlcnQsIEkgb3VnaHQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgdmFyaW91cyBwZXJzb25hbCBzdWl0cyBhZ2FpbnN0IGhpbSwgb25lIGZvciB3aWxsZnVsIGRhbWFnZSwgYXJpc2luZyBvdXQKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIHJvYmVzIGFuZCBnb2xkZW4gY3Jvd25zLCBhbmQgYW5vdGhlciBmb3IgYXNzYXVsdCwKICAgICAgICAgICAgICAgICAgICBhcmlzaW5nIG91dCBvZiBoaXMgYWxsZWdlZCBhdHRhY2sgb24gbXkgcGVyc29uOyBidXQgdGhhdCBJIG91Z2h0IG1vc3QKICAgICAgICAgICAgICAgICAgICBlbXBoYXRpY2FsbHkgbm90IHRvIGhhdmUgYnJvdWdodCBoaW0gdG8gYSBwdWJsaWMgdHJpYWwgYW5kIHByb3Bvc2VkIGEgcGVuYWx0eSBvcgogICAgICAgICAgICAgICAgICAgIGEgZmluZSB3aGljaCBoZSBtdXN0IHBheS4gPC90cmFuc2xhdGlvbj4="
translation['21.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb2Ygb25lIHRoaW5nIEkKICAgICAgICAgICAgICAgICAgICBhbSBwZXJmZWN0bHkgY2VydGFpbiwgYW5kIHlvdSBzaG91bGQgYmUgZXF1YWxseSBzby10aGF0IGlmIEkgaGFkIG5vdCBsb2RnZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHVibGljIHBsYWludCBidXQgaGFkIGJyb3VnaHQgYSBjaXZpbCBhY3Rpb24sIHRoZSBvcHBvc2l0ZSBhcmd1bWVudCB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiB1c2VkIGFnYWluc3QgbWUsIHRoYXQgaWYgdGhlcmUgd2FzIGFueSB0cnV0aCBpbiBteSBzdGF0ZW1lbnRzLCBJIG91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBsb2RnZWQgYSBwdWJsaWMgcGxhaW50IGFuZCBjbGFpbWVkIHJlZHJlc3MgYXQgdGhlIHRpbWUgd2hlbiB0aGUgb2ZmZW5jZXMKICAgICAgICAgICAgICAgICAgICB3ZXJlIGNvbW1pdHRlZDsgZm9yIHRoZSBjaG9ydXMgd2FzIGEgc3RhdGUtY2hvcnVzLCB0aGUgYXBwYXJlbCB3YXMgYmVpbmcKICAgICAgICAgICAgICAgICAgICBwcmVwYXJlZCBlbnRpcmVseSBmb3IgYSBwdWJsaWMgZmVzdGl2YWwsIGFuZCBJLCB0aGUgYWdncmlldmVkIHBhcnR5LCB3YXMKICAgICAgICAgICAgICAgICAgICBvZmZpY2lhbCBjaG9ydXMtbWFzdGVyLiBXaG8gdGhlbiB3b3VsZCBkcmVhbSBvZiBhbnkgb3RoZXIgZm9ybSBvZiByZWRyZXNzIHRoYW4KICAgICAgICAgICAgICAgICAgICB0aGF0IHdoaWNoIHRoZSBsYXcgcHJvdmlkZXMgYWdhaW5zdCB0aG9zZSB3aG8gcHJvZmFuZSBhIGZlc3RpdmFsPyA8L3RyYW5zbGF0aW9uPg=="
translation['21.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5JIGFtIHN1cmUgdGhhdCBoZSB3b3VsZCBoYXZlIHNhaWQgYWxsIHRoYXQgaW4gdGhvc2UKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2VzLiBGb3IgaXQgaXMsIEkgYmVsaWV2ZSwgdGhlIGN1ZSBmb3IgdGhlIGRlZmVuZGFudCwgdGhlIG1hbiB3aG8gaGFzCiAgICAgICAgICAgICAgICAgICAgZG9uZSBhIHdyb25nLCB0byB0cnkgYW5kIHNodWZmbGUgb3V0IG9mIHRoZSBtZXRob2QgYWN0dWFsbHkgYWRvcHRlZCB0byBicmluZyBoaW0KICAgICAgICAgICAgICAgICAgICB0byBwdW5pc2htZW50IGFuZCB0byBzYXkgdGhhdCBhIGRpZmZlcmVudCBtZXRob2Qgc2hvdWxkIGhhdmUgYmVlbiBlbXBsb3llZDsgYnV0CiAgICAgICAgICAgICAgICAgICAgaXQgaXMgdGhlIGR1dHkgb2Ygc2Vuc2libGUganVyeW1lbiB0byBpZ25vcmUgc3VjaCBldmFzaW9ucyBhbmQgdG8gY2hhc3Rpc2UKICAgICAgICAgICAgICAgICAgICBhbnlvbmUgd2hvbSB0aGV5IGNvbnZpY3Qgb2YgYW4gb3V0cmFnZS4gPC90cmFuc2xhdGlvbj4="
translation['21.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QKICAgICAgICAgICAgICAgICAgICBhbGxvdyBoaW0gdG8gc2F5IHRoYXQgdGhlIGxhdyBhZmZvcmRzIG1lIGEgY2hvaWNlIG9mIHBlcnNvbmFsIHN1aXRzIG9yIGFuCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudCBmb3IgYXNzYXVsdC4gVGhhdCBpcyB0cnVlOyBidXQgaGUgaGFzIHRvIHByb3ZlIHRoYXQgaGUgaGFzIG5vdCBkb25lCiAgICAgICAgICAgICAgICAgICAgd2hhdCBJIGhhdmUgY2hhcmdlZCBoaW0gd2l0aCwgb3IgdGhhdCBpbiBkb2luZyBpdCBoZSBoYXMgbm90IHByb2ZhbmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGZlc3RpdmFsLCBmb3IgdGhhdCBpcyB0aGUgZ3JvdW5kIG9uIHdoaWNoIEkgYmFzZWQgbXkgcHVibGljIHBsYWludCBhZ2FpbnN0IGhpbSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBpcyB0aGUgcXVlc3Rpb24gb24gd2hpY2ggeW91IG11c3QgcHJlc2VudGx5IGNhc3QgeW91ciB2b3Rlcy4gQnV0IGlmIEksCiAgICAgICAgICAgICAgICAgICAgd2FpdmluZyB0aGUgcHJvZml0IHdoaWNoIGEgcHJpdmF0ZSBzdWl0IHdvdWxkIGJyaW5nLCBlbnRydXN0IGhpcyBwdW5pc2htZW50IHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIFN0YXRlLCBhbmQgaWYgSSBoYXZlIGNob3NlbiB0aGlzIHBhcnRpY3VsYXIgZm9ybSBvZiBhY3Rpb24gZnJvbSB3aGljaCBJIGNhbgogICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgbm8gYmVuZWZpdCBteXNlbGYsIHRoZW4gc3VyZWx5IGl0IG91Z2h0IHRvIHdpbiBtZSB5b3VyIGZhdm91ciBhbmQgbm90CiAgICAgICAgICAgICAgICAgICAgcHJlanVkaWNlIG15IGNhc2UuIDwvdHJhbnNsYXRpb24+"
translation['21.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkga25vdyB0aGF0IGhlIHdpbGwgYWxzbyBtYWtlIGdyZWF0IHVzZSBvZiB0aGlzIGFyZ3VtZW50OgogICAgICAgICAgICAgICAgICAgIOKAnERvIG5vdCBkZWxpdmVyIG1lIGludG8gRGVtb3N0aGVuZXMnIGhhbmRzOyBkbyBub3QgcnVpbiBtZSB0byBvYmxpZ2UKICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcy4gQmVjYXVzZSBJIGFtIGF0IHdhciB3aXRoIGhpbSwgd2lsbCB5b3UgcnVpbiBtZT/igJ0gVGhhdCBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBzb3J0IG9mIGxhbmd1YWdlIHRoYXQgaGUgd2lsbCwgSSBhbSBzdXJlLCB1c2UgYWdhaW4gYW5kIGFnYWluLCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIG9iamVjdCBvZiBleGNpdGluZyBwcmVqdWRpY2UgYWdhaW5zdCBtZS4gPC90cmFuc2xhdGlvbj4="
translation['21.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB0aGUgdHJ1dGggaXMgcXVpdGUgb3RoZXJ3aXNlLiBZb3UgbmV2ZXIg4oCcZGVsaXZlcuKAnSBhCiAgICAgICAgICAgICAgICAgICAgbWFsZWZhY3RvciB0byBoaXMgYWNjdXNlcjsgZm9yIHdoZW4gc29tZW9uZSBoYXMgYmVlbiB3cm9uZ2VkLCB5b3UgZG8gbm90IGV4YWN0CiAgICAgICAgICAgICAgICAgICAgdGhlIHBlbmFsdHkgaW4gc3VjaCBhIGZvcm0gYXMgdGhlIGluanVyZWQgcGFydHkgdXJnZXMgdXBvbiB5b3UgaW4gZWFjaCBjYXNlLiBPbgogICAgICAgICAgICAgICAgICAgIHRoZSBjb250cmFyeSwgbGF3cyB3ZXJlIGxhaWQgZG93biBieSB5b3UgYmVmb3JlIHRoZSBwYXJ0aWN1bGFyIG9mZmVuY2VzIHdlcmUKICAgICAgICAgICAgICAgICAgICBjb21taXR0ZWQsIHdoZW4gdGhlIGZ1dHVyZSB3cm9uZ2RvZXIgYW5kIGhpcyB2aWN0aW0gd2VyZSBlcXVhbGx5IHVua25vd24uIFdoYXQKICAgICAgICAgICAgICAgICAgICBpcyB0aGUgZWZmZWN0IG9mIHRoZXNlIGxhd3M/IFRoZXkgZW5zdXJlIGZvciBldmVyeSBjaXRpemVuIHRoZSBvcHBvcnR1bml0eSBvZgogICAgICAgICAgICAgICAgICAgIG9idGFpbmluZyByZWRyZXNzIGlmIGhlIGlzIHdyb25nZWQuIFRoZXJlZm9yZSB3aGVuIHlvdSBwdW5pc2ggYSBtYW4gd2hvIGJyZWFrcwogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzLCB5b3UgYXJlIG5vdCBkZWxpdmVyaW5nIGhpbSBvdmVyIHRvIGhpcyBhY2N1c2VyczsgeW91IGFyZSBzdHJlbmd0aGVuaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIGFybSBvZiB0aGUgbGF3IGluIHlvdXIgb3duIGludGVyZXN0cy4gPC90cmFuc2xhdGlvbj4="
translation['21.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICBzdXJlbHkgd2hlbiBoZSBzYXlzLCDigJxEZW1vc3RoZW5lcyB3YXMgaW5zdWx0ZWQs4oCdIGhlIGlzIG1ldAogICAgICAgICAgICAgICAgICAgIGJ5IGFuIGFyZ3VtZW50IHRoYXQgaXMganVzdCBhbmQgaW1wYXJ0aWFsIGFuZCBpbiB0aGUgaW50ZXJlc3RzIG9mIGFsbC4gSXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IGFnYWluc3QgdGhlIGluZGl2aWR1YWwgbmFtZWQgRGVtb3N0aGVuZXMgdGhhdCBoaXMgYnJ1dGFsaXR5IHdhcyBkaXJlY3RlZCBvbgogICAgICAgICAgICAgICAgICAgIHRoYXQgb2NjYXNpb24sIGJ1dCBhbHNvIGFnYWluc3QgeW91ciBjaG9ydXMtbWFzdGVyOyBhbmQgd2hhdCB0aGF0IGltcGxpZXMgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IHJlYWxpemUgZnJvbSB0aGUgZm9sbG93aW5nIGNvbnNpZGVyYXRpb25zLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Uga25vdyBvZiBjb3Vyc2UgdGhhdCBvZiB0aGUganVkZ2VzIHdobyBzaXQgaW4gdGhpcyBjb3VydCBub25lIGhhcyB0aGUgbmFtZQogICAgICAgICAgICAgICAgICAgIG9mIEp1ZGdlLCBidXQgZWFjaCBoYXMgc29tZSBuYW1lIG9mIGhpcyBvd24uIFRoZXJlZm9yZSBpZiBhIG1hbiBpcyBndWlsdHkgb2YKICAgICAgICAgICAgICAgICAgICBhc3NhdWx0IG9yIHNsYW5kZXIgYWdhaW5zdCBhbnlvbmUgb2YgdGhlbSBpbiBoaXMgcHJpdmF0ZSBjYXBhY2l0eSwgaGUgd2lsbCBzdGFuZAogICAgICAgICAgICAgICAgICAgIGhpcyB0cmlhbCBvbiBhbiBpbmRpY3RtZW50IGZvciBhc3NhdWx0IG9yIGluIGEgc3VpdCBmb3Igc2xhbmRlcjsgYnV0IGlmIGhlCiAgICAgICAgICAgICAgICAgICAgYXNzYWlscyBoaW0gYXMganVkZ2UsIGhlIHdpbGwgaW5jdXIgdG90YWwgZGlzZnJhbmNoaXNlbWVudC4gV2h5IHNvPyBCZWNhdXNlIGF0CiAgICAgICAgICAgICAgICAgICAgb25jZSBieSB0aGUgbWVyZSBhY3QgaGUgaXMgb3V0cmFnaW5nIHlvdXIgbGF3cywgeW91ciBwdWJsaWMgY3Jvd24gb2Ygb2ZmaWNlLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgbmFtZSB0aGF0IGJlbG9uZ3MgdG8gdGhlIFN0YXRlLCBmb3IgSnVkZ2UgaXMgbm90IGEgcHJpdmF0ZSBuYW1lIGJ1dCBhCiAgICAgICAgICAgICAgICAgICAgc3RhdGUtdGl0bGUuIDwvdHJhbnNsYXRpb24+"
translation['21.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2FtZSB3YXkgYWdhaW4sIGlmIHlvdQogICAgICAgICAgICAgICAgICAgIHN0cmlrZSBvciBhYnVzZSB0aGUgQXJjaG9uIHdoZW4gd2VhcmluZyBoaXMgY3Jvd24sIHlvdSBhcmUgZGlzZnJhbmNoaXNlZDsgYnV0IGlmCiAgICAgICAgICAgICAgICAgICAgeW91IGFzc2F1bHQgaGltIGFzIGEgcHJpdmF0ZSBjaXRpemVuLCB5b3UgYXJlIGxpYWJsZSB0byBhIHByaXZhdGUgc3VpdC4KICAgICAgICAgICAgICAgICAgICBNb3Jlb3ZlciwgdGhpcyBpcyB0cnVlIG5vdCBvbmx5IG9mIHRoZXNlIG9mZmljaWFscywgYnV0IG9mIGV2ZXJ5b25lIHRvIHdob20gdGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUgZ3JhbnRzIHRoZSBpbnZpb2xhYmlsaXR5IG9mIGEgY3Jvd25lZCBvZmZpY2Ugb3Igb2YgYW55IG90aGVyIGhvbm9yLgogICAgICAgICAgICAgICAgICAgIFRoZXJlZm9yZSBpbiBteSBjYXNlIGFsc28sIGlmIG9uIGFueSBvdGhlciBkYXkgaW4gdGhlIHllYXIgTWVpZGlhcyBoYWQgd3JvbmdlZAogICAgICAgICAgICAgICAgICAgIG1lIGFzIGEgcHJpdmF0ZSBjaXRpemVuLCBoZSB3b3VsZCBoYXZlIGhhZCB0byBnaXZlIG1lIHByaXZhdGUgc2F0aXNmYWN0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5idXQgaWYgYWxsIGhpcyBvdXRyYWdlcyBhcmUgc2hvd24gdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gYWltZWQgYXQgeW91ciBjaG9ydXMtbWFzdGVyIGR1cmluZyB0aGUgaG9seSBkYXlzIG9mIHRoZSBmZXN0aXZhbCwgaXQgaXMKICAgICAgICAgICAgICAgICAgICByaWdodCB0aGF0IGhlIHNob3VsZCBmYWNlIHB1YmxpYyByZXNlbnRtZW50IGFuZCBwYXkgYSBwdWJsaWMgcGVuYWx0eS4gRm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGNob3J1cyBtYXN0ZXIgd2FzIGluc3VsdGVkIGFzIHdlbGwgYXMgRGVtb3N0aGVuZXMsIGFuZCB0aGF0IGlzIGEgY29uY2VybiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBTdGF0ZSwgYXMgd2VsbCBhcyB0aGUgZmFjdCB0aGF0IHRoaXMgb2NjdXJyZWQgb24gdGhlIHZlcnkgZGF5cyBvbiB3aGljaCB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGV4cHJlc3NseSBmb3JiaWQgaXQuIFdoZW4geW91IGFyZSBmcmFtaW5nIHlvdXIgbGF3cywgeW91IG11c3Qgc2NydXRpbml6ZSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHB1cnBvcnQ7IGJ1dCB3aGVuIHlvdSBoYXZlIHBhc3NlZCB0aGVtLCB5b3UgbXVzdCB1cGhvbGQgdGhlbSBhbmQgcHV0IHRoZW0gaW4KICAgICAgICAgICAgICAgICAgICBmb3JjZSwgZm9yIHRoYXQgaXMgcmVxdWlyZWQgYnkgeW91ciBvYXRoIGFuZCBieSBqdXN0aWNlIGFzIHdlbGwuIDwvdHJhbnNsYXRpb24+"
translation['21.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgaGFkIHRoZSBsYXfigJRhbiBhbmNpZW50IG9uZeKAlG9mCiAgICAgICAgICAgICAgICAgICAgZGFtYWdlOyB5b3UgaGFkIHRoZSBsYXcgb2YgYmF0dGVyeSBhbmQgdGhlIGxhdyBvZiBhc3NhdWx0LiBOb3cgaWYgaXQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBzdWZmaWNpZW50IHRoYXQgdGhvc2UgZ3VpbHR5IGF0IHRoZSBEaW9ueXNpYSBvZiBhbnkgb2YgdGhlc2Ugb2ZmZW5jZXMgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgcHVuaXNoZWQgYWNjb3JkaW5nIHRvIHRoZXNlIGxhd3MsIHRoZXJlIHdvdWxkIGhhdmUgYmVlbiBubyBuZWVkIGZvciB0aGlzIGZ1cnRoZXIKICAgICAgICAgICAgICAgICAgICBsYXcuIEJ1dCBpdCB3YXMgbm90IHN1ZmZpY2llbnQsIGFuZCB0aGUgcHJvb2Ygb2YgdGhpcyBpcyB0aGF0IHlvdSBtYWRlIGEgbGF3IHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdCB0aGUgc2FuY3RpdHkgb2YgdGhlIGdvZCBkdXJpbmcgdGhlIEhvbHkgTW9udGguIElmLCB0aGVuLCBhbnlvbmUgaXMKICAgICAgICAgICAgICAgICAgICBsaWFibGUgYm90aCB1bmRlciB0aG9zZSBwcmUtZXhpc3RpbmcgbGF3cyBhbmQgdW5kZXIgdGhpcyBzdWJzZXF1ZW50IG9uZSBhcyB3ZWxsCiAgICAgICAgICAgICAgICAgICAgYXMgYWxsIHRoZSByZXN0IG9mIHRoZSBsYXdzLCBpcyBoZSBmb3IgdGhhdCByZWFzb24gdG8gZXNjYXBlIHB1bmlzaG1lbnQsIG9yCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhlIGluIGZhaXJuZXNzIHN1ZmZlciBhIGhlYXZpZXIgb25lPyBJIHRoaW5rIHRoYXQgaXQgc2hvdWxkIGJlIHRoZQogICAgICAgICAgICAgICAgICAgIGhlYXZpZXIgcHVuaXNobWVudC4gPC90cmFuc2xhdGlvbj4="
translation['21.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlIGJlZW4gdG9sZCB0aGF0IE1laWRpYXMgZ29lcyBhYm91dCBpbnF1aXJpbmcgYW5kCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGluZyBleGFtcGxlcyBvZiBwZW9wbGUgd2hvIGhhdmUgYXQgYW55IHRpbWUgYmVlbiBhc3NhdWx0ZWQsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlc2UgcGVvcGxlIGFyZSBnb2luZyB0byBnaXZlIGV2aWRlbmNlIGFuZCBkZXNjcmliZSB0aGVpciBleHBlcmllbmNlcyB0byB5b3U7CiAgICAgICAgICAgICAgICAgICAgZm9yIGluc3RhbmNlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUKICAgICAgICAgICAgICAgICAgICBDaGFpcm1hbiBmb3IgdGhlIGRheSB3aG8gaXMgc2FpZCB0byBoYXZlIGJlZW4gc3RydWNrIGJ5IFBvbHl6ZWx1cyBpbiB5b3VyIGNvdXJ0LAogICAgICAgICAgICAgICAgICAgIHRoZSBqdWRnZSB3aG8gd2FzIGxhdGVseSBzdHJ1Y2sgd2hlbiB0cnlpbmcgdG8gcmVzY3VlIHRoZSBmbHV0ZS1naXJsLCBhbmQKICAgICAgICAgICAgICAgICAgICBzaW1pbGFyIGNhc2VzLiBIZSBpbWFnaW5lcyB0aGF0IGlmIGhlIGNhbiBwb2ludCB0byBtYW55IG90aGVyIHZpY3RpbXMgb2Ygc2VyaW91cwogICAgICAgICAgICAgICAgICAgIGFzc2F1bHQsIHlvdSB3aWxsIGJlIGxlc3MgaW5kaWduYW50IGF0IHRoZSBhc3NhdWx0IGNvbW1pdHRlZCB1cG9uIG1lISA8L3RyYW5zbGF0aW9uPg=="
translation['21.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgc2VlbXMgdG8gbWUsIEF0aGVuaWFucywgdGhhdCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHJlYXNvbmFibGUgZm9yIHlvdSB0byBkbyBqdXN0IHRoZSByZXZlcnNlLCBzaW5jZSB5b3VyIGR1dHkgaXMgdG8gYmUgc29saWNpdG91cwogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgY29tbW9uIGdvb2Qgb2YgYWxsLiBGb3Igd2hvIG9mIHlvdSBpcyB1bmF3YXJlIHRoYXQgdGhlIHJlYXNvbiBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5IG9mIHRoZXNlIGFzc2F1bHRzIGlzIHRoZSBmYWlsdXJlIHRvIHB1bmlzaCB0aGUgb2ZmZW5kZXJzLCBhbmQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBvbmx5IHdheSB0byBwcmV2ZW50IHN1Y2ggYXNzYXVsdHMgaW4gdGhlIGZ1dHVyZSBpcyBhZGVxdWF0ZWx5IHRvIHB1bmlzaCBldmVyeQogICAgICAgICAgICAgICAgICAgIG9mZmVuZGVyIHdobyBpcyBjYXVnaHQ/IFRoZXJlZm9yZSwgaWYgaXQgaXMgdG8geW91ciBpbnRlcmVzdCB0byBkZXRlciBvdGhlcnMsCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgY2FzZXMgYXJlIGFuIGFkZGl0aW9uYWwgcmVhc29uIGZvciBwdW5pc2hpbmcgTWVpZGlhcywgYW5kIHB1bmlzaGluZyBoaW0KICAgICAgICAgICAgICAgICAgICB0aGUgbW9yZSBzZXZlcmVseSBpbiBwcm9wb3J0aW9uIHRvIHRoZWlyIG51bWJlciBhbmQgdGhlaXIgc2VyaW91c25lc3M7IGJ1dCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSB3YW50IHRvIGVuY291cmFnZSBoaW0gYW5kIGV2ZXJ5Ym9keSwgeW91IG11c3QgbGV0IGhpbSBvZmYuIDwvdHJhbnNsYXRpb24+"
translation['21.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5bVGhlbiBhZ2FpbiB3ZSBzaGFsbCBmaW5kIHRoYXQgaGUgaGFzIG5vdCB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIGNsYWltIHRvIGNvbnNpZGVyYXRpb24gYXMgdGhlc2Ugb3RoZXJzLiBGb3IgaW4gdGhlIGZpcnN0IGNhc2UgdGhlIG1hbiB3aG8gc3RydWNrCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1ZGdlIGhhZCB0aHJlZSBleGN1c2VzOiBoZSB3YXMgZHJ1bmssIGhlIHdhcyBpbiBsb3ZlLCBhbmQgaGUgZGlkIG5vdCBrbm93CiAgICAgICAgICAgICAgICAgICAgd2hhdCBoZSB3YXMgZG9pbmcgaW4gdGhlIGRhcmtuZXNzIGFuZCB0aGUgbmlnaHQuIFBvbHl6ZWx1cyBhZ2FpbiBleHBsYWluZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIG93aW5nIHRvIGhpcyB1bmdvdmVybmFibGUgdGVtcGVyIGhlIGhhZCBsb3N0IGhpcyBoZWFkIHdoZW4gaGUgY29tbWl0dGVkIHRoZQogICAgICAgICAgICAgICAgICAgIG9mZmVuY2U7IHRoZXJlIHdhcyBubyBob3N0aWxpdHkgYmVoaW5kIHRoZSBhY3QgYW5kIG5vIGludGVudGlvbiB0byBpbnN1bHQuIEJ1dAogICAgICAgICAgICAgICAgICAgIE1laWRpYXMgY2Fubm90IHBsZWFkIGFueSBvZiB0aGVzZSBleGN1c2VzLCBmb3IgaGUgd2FzIG15IGVuZW15LCBhbmQgaGUgYXNzYXVsdGVkCiAgICAgICAgICAgICAgICAgICAgbWUgd2lsbGZ1bGx5IGJ5IGRheWxpZ2h0LCBhbmQgbm90IG9ubHkgb24gdGhhdCwgYnV0IG9uIGV2ZXJ5IG9jY2FzaW9uIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIHNob3duIGEgZGVsaWJlcmF0ZSBpbnRlbnRpb24gdG8gaW5zdWx0IG1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgSSBjYW4gc2VlIG5vIGNvbXBhcmlzb24gYmV0d2VlbiBteSBvd24gY29uZHVjdCBhbmQgdGhhdCBvZiB0aG9zZSBvdGhlcnMuCiAgICAgICAgICAgICAgICAgICAgSW4gdGhlIGZpcnN0IGNhc2UgaXQgd2lsbCBiZSBwcm92ZWQgdGhhdCB0aGUganVkZ2UgdG9vayBubyB0aG91Z2h0IG9yIGNvbmNlcm4KICAgICAgICAgICAgICAgICAgICBmb3IgeW91IG9yIGZvciB0aGUgbGF3cywgYnV0IHdhcyBwcml2YXRlbHkgaW5kdWNlZCBieSBhIHN1bSBvZiBtb25leeKAlEkKICAgICAgICAgICAgICAgICAgICBjYW5ub3Qgc2F5IGhvdyBtdWNo4oCUdG8gZHJvcCBoaXMgYWN0aW9uLiBJbiB0aGUgc2FtZSB3YXkgdGhlIG1hbiB3aG8KICAgICAgICAgICAgICAgICAgICB3YXMgc3RydWNrIGJ5IFBvbHl6ZWx1cyB3YXMgcHJpdmF0ZWx5IHNxdWFyZWQsIGxhdWdoZWQgaW4gaGlzIHNsZWV2ZSBhdCB5b3UgYW5kCiAgICAgICAgICAgICAgICAgICAgeW91ciBsYXdzLCBhbmQgbmV2ZXIgZXZlbiBwcm9zZWN1dGVkIGhpcyBhc3NhaWxhbnQuIDwvdHJhbnNsYXRpb24+"
translation['21.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHN0YXRlbWVudHMsIHRoZW4sIGFyZSBxdWl0ZSBpbiBwb2ludCBpZiBvbmUgd2lzaGVzIHRvCiAgICAgICAgICAgICAgICAgICAgYWNjdXNlIHRob3NlIG1lbiB0b2RheSwgYnV0IGFzIGEgZGVmZW5jZSBvZiBNZWlkaWFzIGFnYWluc3QgbXkgaW5kaWN0bWVudHMgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSB0aGUgdmVyeSBsYXN0IHBsZWFzIHRoYXQgc2hvdWxkIGJlIHVyZ2VkLiBGb3IgbXkgY29uZHVjdCB3YXMgY2xlYW4gY29udHJhcnkKICAgICAgICAgICAgICAgICAgICB0byB0aGVpcnMuIEl0IHdpbGwgYmUgcHJvdmVkIHRoYXQgSSBuZXZlciBnb3QsIG9yIHRyaWVkIHRvIGdldCwgYW55IGFkdmFudGFnZQogICAgICAgICAgICAgICAgICAgIGZvciBteXNlbGYsIGJ1dCByZWxpZ2lvdXNseSBvYnNlcnZlZCwgYW5kIGhhdmUgbm93IHJlc3RvcmVkIHRvIHlvdXIga2VlcGluZywgdGhlCiAgICAgICAgICAgICAgICAgICAgdGFzayBvZiBhdmVuZ2luZyB0aGUgbGF3cywgdGhlIGdvZCwgYW5kIHlvdXIgaW50ZXJlc3RzLl0gRG8gbm90IHRoZW4KICAgICAgICAgICAgICAgICAgICBhbGxvdyBoaW0gdG8gbWFrZSB0aGVzZSBzdGF0ZW1lbnRzLCBvciBpZiBoZSBwZXJzaXN0cywgZG8gbm90IGdpdmUgaGltIGNyZWRlbmNlCiAgICAgICAgICAgICAgICAgICAgYXMgaWYgaGlzIHBsZWEgd2VyZSBqdXN0LiBJZiBoZSBmaW5kcyB0aGF0IHRoaXMgaXMgeW91ciBmaXhlZCBkZXRlcm1pbmF0aW9uLCBoZQogICAgICAgICAgICAgICAgICAgIHdpbGwgaGF2ZSBub3RoaW5nIHRvIHNheSwgbm90IGEgd29yZC4gPC90cmFuc2xhdGlvbj4="
translation['21.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hhdAogICAgICAgICAgICAgICAgICAgIHNvcnQgb2YgcHJldGV4dCwgd2hhdCBkZWNlbnQgYW5kIG1vZGVyYXRlIGV4Y3VzZSwgY2FuIGhlIHNob3cgZm9yIGhpcyBjb25kdWN0PwogICAgICAgICAgICAgICAgICAgIEFuZ2VyPyBQb3NzaWJseSB0aGF0IHdpbGwgYmUgaGlzIHBsZWEuIEJ1dCB3aGVyZWFzIGluIGNhc2VzIHdoZXJlIGEgc3VkZGVuIGxvc3MKICAgICAgICAgICAgICAgICAgICBvZiBzZWxmLWNvbnRyb2wgaGFzIGltcGVsbGVkIGEgbWFuIGV2ZW4gdG8gaW5mbGljdCBhIHdhbnRvbiBpbnN1bHQsIGl0IGlzIG9wZW4KICAgICAgICAgICAgICAgICAgICB0byBoaW0gdG8gc2F5IHRoYXQgaGUgaGFzIGFjdGVkIGluIGFuZ2VyOyBpZiwgb24gdGhlIG90aGVyIGhhbmQsIGhlIGlzIGRldGVjdGVkCiAgICAgICAgICAgICAgICAgICAgaW4gYSBjb250aW51b3VzIGNvdXJzZSBvZiBsYXctYnJlYWtpbmcsIHNwcmVhZCBvdmVyIG1hbnkgZGF5cywgc3VyZWx5IHRoaXMgaXMKICAgICAgICAgICAgICAgICAgICBmYXIgZnJvbSBhIG1lcmUgZml0IG9mIGFuZ2VyIGFuZCBoZSBzdGFuZHMgY29udmljdGVkIG9mIGEgZGVsaWJlcmF0ZSBwb2xpY3kgb2YKICAgICAgICAgICAgICAgICAgICBpbnN1bHQuIDwvdHJhbnNsYXRpb24+"
translation['21.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VmVyeQogICAgICAgICAgICAgICAgICAgIHdlbGw7IHNpbmNlIGhlIGhhcyBjbGVhcmx5IGRvbmUgd2hhdCBJIGFjY3VzZSBoaW0gb2YsIGFuZCBoYXMgZG9uZSBpdCBieSB3YXkgb2YKICAgICAgICAgICAgICAgICAgICBpbnN1bHQsIHdlIG11c3Qgbm93IGNvbnNpZGVyIHRoZSBsYXdzLCBnZW50bGVtZW4gb2YgdGhlIGp1cnksIGZvciBpdCBpcyBpbgogICAgICAgICAgICAgICAgICAgIGFjY29yZGFuY2Ugd2l0aCB0aGUgbGF3cyB0aGF0IHlvdSBoYXZlIHN3b3JuIHRvIGdpdmUgeW91ciB2ZXJkaWN0LiBPYnNlcnZlLAogICAgICAgICAgICAgICAgICAgIG1vcmVvdmVyLCB0aGF0IHRoZSBsYXdzIHRyZWF0IHRoZSB3aWxsZnVsIGFuZCBpbnNvbGVudCB0cmFuc2dyZXNzb3JzIGFzCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2aW5nIG1vcmUgcmVzZW50bWVudCBhbmQgYSBoZWF2aWVyIHB1bmlzaG1lbnQgdGhhbiBvdGhlciBjbGFzc2VzIG9mCiAgICAgICAgICAgICAgICAgICAgb2ZmZW5kZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCB0aGVuLCBhbGwgdGhlIGxhd3Mgb2YKICAgICAgICAgICAgICAgICAgICBkYW1hZ2XigJR0byB0YWtlIHRoZXNlIGZpcnN04oCUb3JkZXIgdGhlIG9mZmVuZGVyIHRvIHBheSB0aGUKICAgICAgICAgICAgICAgICAgICBhbW91bnQgdHdpY2Ugb3ZlciBpZiB0aGUgZGFtYWdlIGlzIHdpbGxmdWwsIGJ1dCBvbmx5IG9uY2UgaWYgaXQgaXMgaW52b2x1bnRhcnkuCiAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyByZWFzb25hYmxlLCBiZWNhdXNlLCB3aGlsZSB0aGUgaW5qdXJlZCBwYXJ0eSBpcyBpbiBhbnkgY2FzZSBlbnRpdGxlZCB0bwogICAgICAgICAgICAgICAgICAgIHJlbGllZiwgdGhlIGxhdyBkb2VzIG5vdCBvcmRhaW4gdGhhdCB0aGUgcmVzZW50bWVudCBhZ2FpbnN0IHRoZSBhZ2dyZXNzb3Igc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgYmUgdGhlIHNhbWUsIHdoZXRoZXIgaGlzIGFjdCBpcyB2b2x1bnRhcnkgb3IgaW52b2x1bnRhcnkuIEFnYWluLCB0aGUgbGF3cyBvZgogICAgICAgICAgICAgICAgICAgIGhvbWljaWRlIHB1bmlzaCB3aWxsZnVsIG11cmRlciB3aXRoIGRlYXRoLCBwZXJwZXR1YWwgZXhpbGUsIGFuZCBjb25maXNjYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBnb29kcywgYnV0IGFjY2lkZW50YWwgaG9taWNpZGUgdGhleSB0cmVhdCB3aXRoIG11Y2ggY29uc2lkZXJhdGlvbiBhbmQgY2hhcml0eS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBub3Qgb25seSBpbiB0aGVzZSwgYnV0IGluIGFsbCBjYXNlcywKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBsYXdzIG1heSBiZSBzZWVuIHRvIGJlIHNldmVyZSBhZ2FpbnN0IHByZW1lZGl0YXRlZCBvdXRyYWdlcy4gRm9yIGhvdyBpcwogICAgICAgICAgICAgICAgICAgIGl0IHRoYXQgaWYgYSBtYW4gd2hvIGhhcyBsb3N0IGhpcyBjYXNlIGZhaWxzIHRvIHBheSwgdGhlIGxhdyB0aGVyZXVwb24gaXMgbm90CiAgICAgICAgICAgICAgICAgICAgY29udGVudCB3aXRoIGEgcHJpdmF0ZSBzdWl0IGZvciBlamVjdG1lbnQsIGJ1dCBkaXJlY3RzIHRoZSBpbXBvc2l0aW9uIG9mIGEKICAgICAgICAgICAgICAgICAgICBmdXJ0aGVyIGZpbmUgdG8gdGhlIHRyZWFzdXJ5PyBPciBhZ2FpbiwgaG93IGlzIGl0IHRoYXQgaWYgYSBtYW4gdGFrZXMgZnJvbQogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgYnkgbXV0dWFsIGNvbnNlbnQgYSBzdW0gb2Ygb25lLCB0d28sIG9yIHRlbiB0YWxlbnRzLCBhbmQgdGhlbgogICAgICAgICAgICAgICAgICAgIGZyYXVkdWxlbnRseSB3aXRoaG9sZHMgaXQsIHRoZSBTdGF0ZSBoYXMgbm8gY29uY2VybiB3aXRoIGhpbTsgYnV0IGlmIGEgbWFuLAogICAgICAgICAgICAgICAgICAgIHRha2luZyBzb21ldGhpbmcgdGhhdCB3b3VsZCBtZXJpdCBvbmx5IGEgdHJpZmxpbmcgZmluZSwga2VlcHMgaXQgYmFjayBieSBmb3JjZSwKICAgICAgICAgICAgICAgICAgICB0aGVuIHRoZSBsYXdzIGRpcmVjdCB0aGUganVyeSB0byBpbXBvc2UgYW4gYWRkaXRpb25hbCBmaW5lIGZvciB0aGUgdHJlYXN1cnkKICAgICAgICAgICAgICAgICAgICBlcXVhbCB0byB0aGF0IHBhaWQgdG8gdGhlIHByaXZhdGUgb3duZXI/IDwvdHJhbnNsYXRpb24+"
translation['21.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUKICAgICAgICAgICAgICAgICAgICBhbnN3ZXIgaXMgdGhhdCB0aGUgbGVnaXNsYXRvciByZWdhcmRlZCBldmVyeSBkZWVkIG9mIHZpb2xlbmNlIGFzIGEgcHVibGljCiAgICAgICAgICAgICAgICAgICAgb2ZmZW5jZSwgY29tbWl0dGVkIGFnYWluc3QgdGhvc2UgYWxzbyB3aG8gYXJlIG5vdCBkaXJlY3RseSBjb25jZXJuZWQuIEZvciBmb3JjZQogICAgICAgICAgICAgICAgICAgIGJlbG9uZ3MgdG8gdGhlIGZldywgYnV0IHRoZSBsYXdzIHRvIGFsbCBhbGlrZTsgYW5kIHRoZSBtYW4gd2hvIGFncmVlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbiBjYW4gcmlnaHQgaGltc2VsZiBwcml2YXRlbHksIGJ1dCB0aGUgdmljdGltIG9mIHZpb2xlbmNlIG5lZWRzIHJlbGllZgogICAgICAgICAgICAgICAgICAgIGF0IHRoZSBoYW5kcyBvZiB0aGUgU3RhdGUuIE9uIHRoaXMgcHJpbmNpcGxlLCBmb3IgdGhlIGFjdHVhbCBhc3NhdWx0IHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBncmFudHMgZXZlcnlvbmUgdGhlIHJpZ2h0IHRvIHByb3NlY3V0ZSwgYnV0IG1ha2VzIG92ZXIgdGhlIHdob2xlIG9mIHRoZSBmaW5lIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIFN0YXRlLiBUaGUgbGVnaXNsYXRvciBjb25zaWRlcmVkIHRoYXQgdGhlIFN0YXRlLCBhcyB3ZWxsIGFzIHRoZSBpbmp1cmVkCiAgICAgICAgICAgICAgICAgICAgcGFydHksIHdhcyB3cm9uZ2VkIGJ5IHRoZSBhdXRob3Igb2YgdGhlIG91dHJhZ2UsIGFuZCB0aGF0IGhpcyBwdW5pc2htZW50IHdhcwogICAgICAgICAgICAgICAgICAgIHN1ZmZpY2llbnQgY29tcGVuc2F0aW9uIGZvciB0aGUgdmljdGltLCB3aG8gb3VnaHQgbm90IHRvIG1ha2UgbW9uZXkgZm9yIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICBvdXQgb2Ygc3VjaCB3cm9uZ3MuIDwvdHJhbnNsYXRpb24+"
translation['21.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQgaGUgd2VudCB0byBzdWNoCiAgICAgICAgICAgICAgICAgICAgZXh0cmVtZSBsZW5ndGhzIHRoYXQgZXZlbiBpZiBhIHNsYXZlIHdhcyBhc3NhdWx0ZWQsIGhlIGdyYW50ZWQgaGltIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgb2YgYnJpbmdpbmcgYSBwdWJsaWMgYWN0aW9uLiBIZSB0aG91Z2h0IHRoYXQgaGUgb3VnaHQgdG8gbG9vaywgbm90IGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHJhbmsgb2YgdGhlIHN1ZmZlcmVyLCBidXQgYXQgdGhlIG5hdHVyZSBvZiB0aGUgYWN0LCBhbmQgd2hlbiBoZSBmb3VuZCB0aGUgYWN0CiAgICAgICAgICAgICAgICAgICAgdW5qdXN0aWZpYWJsZSwgaGUgd291bGQgbm90IGdpdmUgaXQgaGlzIHNhbmN0aW9uIGVpdGhlciBpbiByZWdhcmQgdG8gYSBzbGF2ZSBvcgogICAgICAgICAgICAgICAgICAgIGluIGFueSBvdGhlciBjYXNlLiBGb3Igbm90aGluZywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgbm90aGluZyBpbiB0aGUgd29ybGQgaXMgbW9yZSBpbnRvbGVyYWJsZSB0aGFuIGEKICAgICAgICAgICAgICAgICAgICBwZXJzb25hbCBvdXRyYWdlLCBub3IgaXMgdGhlcmUgYW55dGhpbmcgdGhhdCBtb3JlIGRlc2VydmVzIHlvdXIgcmVzZW50bWVudC4gUmVhZAogICAgICAgICAgICAgICAgICAgIG1lIHRoZSBhY3R1YWwgbGF3IHdpdGggcmVnYXJkIHRvIGl0LiBUaGVyZSBpcyBub3RoaW5nIGxpa2UgaGVhcmluZyB0aGUgbGF3J3Mgb3duCiAgICAgICAgICAgICAgICAgICAgd29yZHMuIDwvdHJhbnNsYXRpb24+"
translation['21.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGFueW9uZSBhc3NhdWx0cyBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgb3Igd29tYW4gb3IgbWFuLCB3aGV0aGVyIGZyZWUgb3Igc2xhdmUsIG9yIGNvbW1pdHMgYW55IHVubGF3ZnVsIGFjdAogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGFueW9uZSBvZiB0aGVzZSwgYW55IEF0aGVuaWFuIGNpdGl6ZW4gd2hvIGRlc2lyZXMgc28gdG8gZG8sIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHF1YWxpZmllZCwgbWF5IGluZGljdCBoaW0gYmVmb3JlIHRoZSBKdWRnZXM7IGFuZCB0aGUgSnVkZ2VzIHNoYWxsIGJyaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGJlZm9yZSB0aGUgSGVsaWFzdGljIENvdXJ0IHdpdGhpbiB0aGlydHkgZGF5cyBmcm9tIHRoZSBkYXRlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBpbmRpY3RtZW50LCB1bmxlc3Mgc29tZSBwdWJsaWMgYnVzaW5lc3MgcHJldmVudHMsIGluIHdoaWNoIGNhc2UgaXQgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBvbiB0aGUgZWFybGllc3QgcG9zc2libGUgZGF0ZS4gV2hvbXNvZXZlciB0aGUgQ291cnQgc2hhbGwgY29uZGVtbiwKICAgICAgICAgICAgICAgICAgICAgICAgaXQgc2hhbGwgYXQgb25jZSBhc3Nlc3MgdGhlIHB1bmlzaG1lbnQgb3IgdGhlIGZpbmUgd2hpY2ggaGUgaXMgY29uc2lkZXJlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICBkZXNlcnZlLiBJbiBhbGwgY2FzZXMgd2hlcmUgYW4gaW5kaWN0bWVudCBpcyBlbnRlcmVkLCBhcyB0aGUgbGF3IGRpcmVjdHMsIGlmCiAgICAgICAgICAgICAgICAgICAgICAgIGFueW9uZSBmYWlscyB0byBwcm9zZWN1dGUsIG9yIGFmdGVyIHByb3NlY3V0aW9uIGZhaWxzIHRvIG9idGFpbiBvbmUgZmlmdGggb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHZvdGVzIG9mIHRoZSBqdXJ5LCBoZSBzaGFsbCBwYXkgYSB0aG91c2FuZCBkcmFjaG1hcyB0byB0aGUgVHJlYXN1cnkuIElmCiAgICAgICAgICAgICAgICAgICAgICAgIGhlIGlzIGZpbmVkIGZvciB0aGUgYXNzYXVsdCwgaGUgc2hhbGwgYmUgaW1wcmlzb25lZCB1bnRpbCB0aGUgZmluZSBpcyBwYWlkLAogICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCB0aGF0IHRoZSBvZmZlbmNlIHdhcyBjb21taXR0ZWQgYWdhaW5zdCBhIGZyZWVtYW4uPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnlvbmUgYXNzYXVsdHMgYW55CiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkIG9yIHdvbWFuIG9yIG1hbiwgd2hldGhlciBmcmVlIG9yIHNsYXZlLCBvciBjb21taXRzIGFueSB1bmxhd2Z1bCBhY3QKICAgICAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBhbnlvbmUgb2YgdGhlc2UsIGFueSBBdGhlbmlhbiBjaXRpemVuIHdobyBkZXNpcmVzIHNvIHRvIGRvLCBiZWluZwogICAgICAgICAgICAgICAgICAgICAgICBxdWFsaWZpZWQsIG1heSBpbmRpY3QgaGltIGJlZm9yZSB0aGUgSnVkZ2VzOyBhbmQgdGhlIEp1ZGdlcyBzaGFsbCBicmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBiZWZvcmUgdGhlIEhlbGlhc3RpYyBDb3VydCB3aXRoaW4gdGhpcnR5IGRheXMgZnJvbSB0aGUgZGF0ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudCwgdW5sZXNzIHNvbWUgcHVibGljIGJ1c2luZXNzIHByZXZlbnRzLCBpbiB3aGljaCBjYXNlIGl0IHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgb24gdGhlIGVhcmxpZXN0IHBvc3NpYmxlIGRhdGUuIFdob21zb2V2ZXIgdGhlIENvdXJ0IHNoYWxsIGNvbmRlbW4sCiAgICAgICAgICAgICAgICAgICAgICAgIGl0IHNoYWxsIGF0IG9uY2UgYXNzZXNzIHRoZSBwdW5pc2htZW50IG9yIHRoZSBmaW5lIHdoaWNoIGhlIGlzIGNvbnNpZGVyZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZS4gSW4gYWxsIGNhc2VzIHdoZXJlIGFuIGluZGljdG1lbnQgaXMgZW50ZXJlZCwgYXMgdGhlIGxhdyBkaXJlY3RzLCBpZgogICAgICAgICAgICAgICAgICAgICAgICBhbnlvbmUgZmFpbHMgdG8gcHJvc2VjdXRlLCBvciBhZnRlciBwcm9zZWN1dGlvbiBmYWlscyB0byBvYnRhaW4gb25lIGZpZnRoIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB2b3RlcyBvZiB0aGUganVyeSwgaGUgc2hhbGwgcGF5IGEgdGhvdXNhbmQgZHJhY2htYXMgdG8gdGhlIFRyZWFzdXJ5LiBJZgogICAgICAgICAgICAgICAgICAgICAgICBoZSBpcyBmaW5lZCBmb3IgdGhlIGFzc2F1bHQsIGhlIHNoYWxsIGJlIGltcHJpc29uZWQgdW50aWwgdGhlIGZpbmUgaXMgcGFpZCwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgdGhhdCB0aGUgb2ZmZW5jZSB3YXMgY29tbWl0dGVkIGFnYWluc3QgYSBmcmVlbWFuLjwvdHJhbnNsYXRpb24+"
translation['21.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXRoZW5pYW5zLCB5b3UKICAgICAgICAgICAgICAgICAgICBoZWFyIHRoZSBodW1hbml0eSBvZiB0aGUgbGF3LCB3aGljaCBkb2VzIG5vdCBwZXJtaXQgZXZlbiBzbGF2ZXMgdG8gYmUgYXNzYXVsdGVkLgogICAgICAgICAgICAgICAgICAgIEluIGhlYXZlbidzIG5hbWUsIHRoaW5rIHdoYXQgdGhpcyBtZWFucy4gU3VwcG9zZSBzb21lb25lIGNhcnJpZWQgdGhpcyBsYXcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgYmFyYmFyb3VzIG5hdGlvbnMgZnJvbSB3aG9tIHdlIGltcG9ydCBvdXIgc2xhdmVzOyBzdXBwb3NlIGhlIHByYWlzZWQgeW91IGFuZAogICAgICAgICAgICAgICAgICAgIGRlc2NyaWJlZCB5b3VyIGNpdHkgdG8gdGhlbSBpbiB0aGVzZSB3b3JkczogPC90cmFuc2xhdGlvbj4="
translation['21.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz7igJxUaGVyZSBhcmUgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+R3JlZWNlPC9wbGFjZU5hbWU+IG1lbiBzbwogICAgICAgICAgICAgICAgICAgIG1pbGQgYW5kIGh1bWFuZSBpbiBkaXNwb3NpdGlvbiB0aGF0IHRob3VnaCB0aGV5IGhhdmUgb2Z0ZW4gYmVlbiB3cm9uZ2VkIGJ5IHlvdSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhvdWdoIHRoZXkgaGF2ZSBpbmhlcml0ZWQgYSBuYXR1cmFsIGhvc3RpbGl0eSB0b3dhcmRzIHlvdSwgeWV0IHRoZXkgcGVybWl0CiAgICAgICAgICAgICAgICAgICAgbm8gaW5zdWx0IHRvIGJlIG9mZmVyZWQgZXZlbiB0byB0aGUgbWVuIHdob20gdGhleSBoYXZlIGJvdWdodCBmb3IgYSBwcmljZSBhbmQKICAgICAgICAgICAgICAgICAgICBrZWVwIGFzIHRoZWlyIHNsYXZlcy4gTmF5LCB0aGV5IGhhdmUgcHVibGljbHkgZXN0YWJsaXNoZWQgdGhpcyBsYXcgZm9yYmlkZGluZwogICAgICAgICAgICAgICAgICAgIHN1Y2ggaW5zdWx0LCBhbmQgdGhleSBoYXZlIGFscmVhZHkgcHVuaXNoZWQgbWFueSBvZiB0aGUgdHJhbnNncmVzc29ycyB3aXRoCiAgICAgICAgICAgICAgICAgICAgZGVhdGgu4oCdIDwvdHJhbnNsYXRpb24+"
translation['21.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5JZiB0aGUgYmFyYmFyaWFucyBoZWFyZAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHdvcmRzIGFuZCB1bmRlcnN0b29kIHRoZWlyIGltcG9ydCwgZG8geW91IG5vdCB0aGluayB0aGF0IHRoZXkgd291bGQKICAgICAgICAgICAgICAgICAgICB1bmFuaW1vdXNseSBhcHBvaW50IHlvdSB0aGVpciBwcm90ZWN0b3JzPzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PgM+B4b25zr7Otc69zr/PgjwvZm9yZWlnbj4sIGhlcmUgbG9vc2VseSB1c2VkLCBpcwogICAgICAgICAgICAgICAgICAgICAgICB0ZWNobmljYWxseSBhIG1hbiBjaG9zZW4gYnkgYSBmb3JlaWduIHN0YXRlIGFzIGl0cyByZXByZXNlbnRhdGl2ZSBpbiBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZSBjaXR5IO+8iG5lYXJseSBhIOKAnGNvbnN1bOKAnSBpbiB0aGUgbW9kZXJuCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNl77yJLjwvbm90ZT4gQXMgcmVnYXJkcyB0aGlzIGxhdyB0aGVuLCB3aGljaCBpcyBzbyB3ZWxsIGVzdGVlbWVkCiAgICAgICAgICAgICAgICAgICAgYW1vbmcgdGhlIEdyZWVrcyBhbmQgd291bGQgYmUgd2VsbCBlc3RlZW1lZCBhbW9uZyB0aGUgYmFyYmFyaWFucyBhbHNvLCBjb25zaWRlcgogICAgICAgICAgICAgICAgICAgIHdoYXQgcGVuYWx0eSBoZSB3aG8gdHJhbnNncmVzc2VzIGl0IHdpbGwgaGF2ZSB0byBwYXkgYmVmb3JlIGhlIGhhcyBwYWlkIGhpcwogICAgICAgICAgICAgICAgICAgIGRlc2VydHMuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Az4HhvbnOvs61zr3Ov8+CPC9mb3JlaWduPiwgaGVyZSBsb29zZWx5IHVzZWQsIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHRlY2huaWNhbGx5IGEgbWFuIGNob3NlbiBieSBhIGZvcmVpZ24gc3RhdGUgYXMgaXRzIHJlcHJlc2VudGF0aXZlIGluIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlIGNpdHkg77yIbmVhcmx5IGEg4oCcY29uc3Vs4oCdIGluIHRoZSBtb2Rlcm4KICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc2XvvIkuPC90cmFuc2xhdGlvbj4="
translation['21.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGlmCiAgICAgICAgICAgICAgICAgICAgSSBoYWQgbm90IGJlZW4gY2hvcnVzLW1hc3RlciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hlbiBJIHdhcyB0aHVzIG1hbHRyZWF0ZWQgYnkgTWVpZGlhcywgaXQgaXMgb25seSB0aGUKICAgICAgICAgICAgICAgICAgICBwZXJzb25hbCBpbnN1bHQgdGhhdCBvbmUgd291bGQgaGF2ZSBjb25kZW1uZWQ7IGJ1dCB1bmRlciB0aGUgY2lyY3Vtc3RhbmNlcyBJCiAgICAgICAgICAgICAgICAgICAgdGhpbmsgb25lIHdvdWxkIGJlIGp1c3RpZmllZCBpbiBjb25kZW1uaW5nIGFsc28gdGhlIGltcGlldHkgb2YgdGhlIGFjdC4gWW91CiAgICAgICAgICAgICAgICAgICAgc3VyZWx5IHJlYWxpemUgdGhhdCBhbGwgeW91ciBjaG9ydXNlcyBhbmQgaHltbnMgdG8gdGhlIGdvZCBhcmUgc2FuY3Rpb25lZCwgbm90CiAgICAgICAgICAgICAgICAgICAgb25seSBieSB0aGUgcmVndWxhdGlvbnMgb2YgdGhlIERpb255c2lhLCBidXQgYWxzbyBieSB0aGUgb3JhY2xlcywgaW4gYWxsIG9mCiAgICAgICAgICAgICAgICAgICAgd2hpY2gsIHdoZXRoZXIgZ2l2ZW4gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxwaGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERlbHBoaSI+RGVscGhpPC9wbGFjZU5hbWU+IG9yIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRG9kb25hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEb2RvbmEiPkRvZG9uYTwvcGxhY2VOYW1lPiwgeW91IHdpbGwgZmluZCBhIHNvbGVtbgogICAgICAgICAgICAgICAgICAgIGluanVuY3Rpb24gdG8gdGhlIFN0YXRlIHRvIHNldCB1cCBkYW5jZXMgYWZ0ZXIgdGhlIGFuY2VzdHJhbCBjdXN0b20sIHRvIGZpbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RyZWV0cyB3aXRoIHRoZSBzYXZvdXIgb2Ygc2FjcmlmaWNlLCBhbmQgdG8gd2VhciBnYXJsYW5kcy4gPC90cmFuc2xhdGlvbj4="
translation['21.52'] = ""
translation['21.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48Y2l0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9Im9yYWNsZSI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JhY2xlcyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRG9kb25hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEb2RvbmEiPkRvZG9uYTwvcGxhY2VOYW1lPjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVvcGxlIG9mIHRoZSBBdGhlbmlhbnMgdGhlIHByb3BoZXQgb2YgWmV1cyBhbm5vdW5jZXMuIFdoZXJlYXMgeWUgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhc3MgdGhlIHNlYXNvbnMgb2YgdGhlIHNhY3JpZmljZSBhbmQgb2YgdGhlIHNhY3JlZCBlbWJhc3N5LCBoZSBiaWRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3Ugc2VuZCBuaW5lIGNob3NlbiBlbnZveXMsIGFuZCB0aGF0IHJpZ2h0IHNvb24uIFRvIFpldXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hpcDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZSB3YXMgYSB0ZW1wbGUgYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEb2RvbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERvZG9uYSI+RG9kb25hPC9wbGFjZU5hbWU+IGRlZGljYXRlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFpldXMgdW5kZXIgdGhpcyB0aXRsZSB0byBjb21tZW1vcmF0ZSBhIHJlc2N1ZSBmcm9tIHNoaXB3cmVjay48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2UgdGhyZWUgb3hlbiBhbmQgd2l0aCBlYWNoIG94IHRocmVlIHNoZWVwOyB0byBEaW9uZSBvbmUgb3ggYW5kIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYXplbiB0YWJsZSBmb3IgdGhlIG9mZmVyaW5nIHdoaWNoIHRoZSBwZW9wbGUgb2YgdGhlIEF0aGVuaWFucyBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmZXJlZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHByb3BoZXQgb2YgWmV1cyBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRG9kb25hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEb2RvbmEiPkRvZG9uYTwvcGxhY2VOYW1lPiBhbm5vdW5jZXMuIFRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaW9ueXN1cyBwYXkgcHVibGljIHNhY3JpZmljZXMgYW5kIG1peCBhIGJvd2wgb2Ygd2luZSBhbmQgc2V0IHVwIGRhbmNlczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIEFwb2xsbyB0aGUgQXZlcnRlciBzYWNyaWZpY2UgYW4gb3ggYW5kIHdlYXIgZ2FybGFuZHMsIGJvdGggZnJlZSBtZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBzbGF2ZXMsIGFuZCBvYnNlcnZlIG9uZSBkYXkgb2YgcmVzdDsgdG8gWmV1cywgdGhlIGdpdmVyIG9mIHdlYWx0aCwgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGUgYnVsbC48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj51bmtub3duPC9iaWJsPgogICAgICAgICAgICAgICAgICAgIDwvY2l0PgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9Im9yYWNsZSI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3JhY2xlcyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRG9kb25hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEb2RvbmEiPkRvZG9uYTwvcGxhY2VOYW1lPjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVvcGxlIG9mIHRoZSBBdGhlbmlhbnMgdGhlIHByb3BoZXQgb2YgWmV1cyBhbm5vdW5jZXMuIFdoZXJlYXMgeWUgaGF2ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhc3MgdGhlIHNlYXNvbnMgb2YgdGhlIHNhY3JpZmljZSBhbmQgb2YgdGhlIHNhY3JlZCBlbWJhc3N5LCBoZSBiaWRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3Ugc2VuZCBuaW5lIGNob3NlbiBlbnZveXMsIGFuZCB0aGF0IHJpZ2h0IHNvb24uIFRvIFpldXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hpcDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZSB3YXMgYSB0ZW1wbGUgYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEb2RvbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERvZG9uYSI+RG9kb25hPC9wbGFjZU5hbWU+IGRlZGljYXRlZCB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFpldXMgdW5kZXIgdGhpcyB0aXRsZSB0byBjb21tZW1vcmF0ZSBhIHJlc2N1ZSBmcm9tIHNoaXB3cmVjay48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2UgdGhyZWUgb3hlbiBhbmQgd2l0aCBlYWNoIG94IHRocmVlIHNoZWVwOyB0byBEaW9uZSBvbmUgb3ggYW5kIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyYXplbiB0YWJsZSBmb3IgdGhlIG9mZmVyaW5nIHdoaWNoIHRoZSBwZW9wbGUgb2YgdGhlIEF0aGVuaWFucyBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmZXJlZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHByb3BoZXQgb2YgWmV1cyBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRG9kb25hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEb2RvbmEiPkRvZG9uYTwvcGxhY2VOYW1lPiBhbm5vdW5jZXMuIFRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaW9ueXN1cyBwYXkgcHVibGljIHNhY3JpZmljZXMgYW5kIG1peCBhIGJvd2wgb2Ygd2luZSBhbmQgc2V0IHVwIGRhbmNlczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIEFwb2xsbyB0aGUgQXZlcnRlciBzYWNyaWZpY2UgYW4gb3ggYW5kIHdlYXIgZ2FybGFuZHMsIGJvdGggZnJlZSBtZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBzbGF2ZXMsIGFuZCBvYnNlcnZlIG9uZSBkYXkgb2YgcmVzdDsgdG8gWmV1cywgdGhlIGdpdmVyIG9mIHdlYWx0aCwgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpdGUgYnVsbC48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PcmFjbGVzIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEb2RvbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERvZG9uYSI+RG9kb25hPC9wbGFjZU5hbWU+PC90aXRsZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLERvZG9uYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRG9kb25hIj5Eb2RvbmE8L3BsYWNlTmFtZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZW9wbGUgb2YgdGhlIEF0aGVuaWFucyB0aGUgcHJvcGhldCBvZiBaZXVzIGFubm91bmNlcy4gV2hlcmVhcyB5ZSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGFzcyB0aGUgc2Vhc29ucyBvZiB0aGUgc2FjcmlmaWNlIGFuZCBvZiB0aGUgc2FjcmVkIGVtYmFzc3ksIGhlIGJpZHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBzZW5kIG5pbmUgY2hvc2VuIGVudm95cywgYW5kIHRoYXQgcmlnaHQgc29vbi4gVG8gWmV1cyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaGlwPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZXJlIHdhcyBhIHRlbXBsZSBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLERvZG9uYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRG9kb25hIj5Eb2RvbmE8L3BsYWNlTmFtZT4gZGVkaWNhdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWmV1cyB1bmRlciB0aGlzIHRpdGxlIHRvIGNvbW1lbW9yYXRlIGEgcmVzY3VlIGZyb20gc2hpcHdyZWNrLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhY3JpZmljZSB0aHJlZSBveGVuIGFuZCB3aXRoIGVhY2ggb3ggdGhyZWUgc2hlZXA7IHRvIERpb25lIG9uZSBveCBhbmQgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJhemVuIHRhYmxlIGZvciB0aGUgb2ZmZXJpbmcgd2hpY2ggdGhlIHBlb3BsZSBvZiB0aGUgQXRoZW5pYW5zIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZlcmVkLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRG9kb25hIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEb2RvbmEiPkRvZG9uYTwvcGxhY2VOYW1lPiBkZWRpY2F0ZWQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBaZXVzIHVuZGVyIHRoaXMgdGl0bGUgdG8gY29tbWVtb3JhdGUgYSByZXNjdWUgZnJvbSBzaGlwd3JlY2suPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBwcm9waGV0IG9mIFpldXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLERvZG9uYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRG9kb25hIj5Eb2RvbmE8L3BsYWNlTmFtZT4gYW5ub3VuY2VzLiBUbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlvbnlzdXMgcGF5IHB1YmxpYyBzYWNyaWZpY2VzIGFuZCBtaXggYSBib3dsIG9mIHdpbmUgYW5kIHNldCB1cCBkYW5jZXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBBcG9sbG8gdGhlIEF2ZXJ0ZXIgc2FjcmlmaWNlIGFuIG94IGFuZCB3ZWFyIGdhcmxhbmRzLCBib3RoIGZyZWUgbWVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgc2xhdmVzLCBhbmQgb2JzZXJ2ZSBvbmUgZGF5IG9mIHJlc3Q7IHRvIFpldXMsIHRoZSBnaXZlciBvZiB3ZWFsdGgsIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaXRlIGJ1bGwuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+dW5rbm93bjwvYmlibD4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVzaWRlcyB0aGVzZQogICAgICAgICAgICAgICAgICAgIG9yYWNsZXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoZXJlIGFyZQogICAgICAgICAgICAgICAgICAgIG1hbnkgb3RoZXJzIGFkZHJlc3NlZCB0byBvdXIgY2l0eSwgYW5kIGV4Y2VsbGVudCBvcmFjbGVzIHRoZXkgYXJlLiBOb3cgd2hhdAogICAgICAgICAgICAgICAgICAgIGNvbmNsdXNpb24gb3VnaHQgeW91IHRvIGRyYXcgZnJvbSB0aGVtPyBUaGF0IHdoaWxlIHRoZXkgcHJlc2NyaWJlIHRoZSBzYWNyaWZpY2VzCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGdvZHMgaW5kaWNhdGVkIGluIGVhY2ggb3JhY2xlLCB0byBldmVyeSBvcmFjbGUgdGhhdCBpcyBwdWJsaXNoZWQgdGhleSBhZGQKICAgICAgICAgICAgICAgICAgICB0aGUgaW5qdW5jdGlvbiB0byBzZXQgdXAgZGFuY2VzIGFuZCB0byB3ZWFyIGdhcmxhbmRzIGFmdGVyIHRoZSBtYW5uZXIgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgaW4gdGhlIGNhc2Ugb2YgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIGNob3J1c2VzIHRoYXQgYXJlIGNvbnN0aXR1dGVkLCB0b2dldGhlciB3aXRoIHRoZWlyIGNob3J1cy1tYXN0ZXJzLCBkdXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZGF5cyBvbiB3aGljaCB3ZSBtZWV0IGluIGNvbXBldGl0aW9uLCB0aGVzZSBvcmFjbGVzIG1ha2UgaXQgY2xlYXIgdGhhdCB3ZSB3ZWFyCiAgICAgICAgICAgICAgICAgICAgb3VyIGNyb3ducyBhcyB5b3VyIHJlcHJlc2VudGF0aXZlcywgdGhlIHdpbm5lciBhcyB3ZWxsIGFzIHRoZSBvbmUgZGVzdGluZWQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBsYXN0IG9mIGFsbDsgaXQgaXMgbm90IHVudGlsIHRoZSBkYXkgb2YgdGhlIHByaXplLWdpdmluZyB0aGF0IHRoZSB2aWN0b3IKICAgICAgICAgICAgICAgICAgICByZWNlaXZlcyBoaXMgb3duIHNwZWNpYWwgY3Jvd24uIElmLCB0aGVuLCBhIG1hbiBjb21taXRzIGEgbWFsaWNpb3VzIGFzc2F1bHQgb24KICAgICAgICAgICAgICAgICAgICBhbnkgbWVtYmVyIG9yIG1hc3RlciBvZiB0aGVzZSBjaG9ydXNlcywgZXNwZWNpYWxseSBkdXJpbmcgdGhlIGFjdHVhbCBjb250ZXN0IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhY3JlZCBwcmVjaW5jdCBvZiB0aGUgZ29kLCBjYW4gd2UgZGVueSB0aGF0IGhlIGlzIGd1aWx0eSBvZiBpbXBpZXR5PwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZW92ZXIsCiAgICAgICAgICAgICAgICAgICAgeW91IGFyZSBhd2FyZSB0aGF0LCBhbHRob3VnaCBhbnhpb3VzIHRvIGV4Y2x1ZGUgYWxpZW5zIGZyb20gdGhlIGNvbnRlc3QsIHlvdSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCBncmFudCB1bmxpbWl0ZWQgcmlnaHQgdG8gYW55IGNob3J1cy1tYXN0ZXIgdG8gc3VtbW9uIGZvciBzY3J1dGlueSBhbnkgbWVtYmVyCiAgICAgICAgICAgICAgICAgICAgb2YgYSBjaG9ydXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SWYgYSBjaG9ydXMtbWFzdGVyIHN1c3BlY3RlZCB0aGF0IGEKICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVyIG9mIGEgcml2YWwgY2hvcnVzIHdhcyBhbiBhbGllbiwgaGUgbXVzdCBub3QgZm9yY2libHkgZWplY3QgaGltIG5vcgogICAgICAgICAgICAgICAgICAgICAgICBzdW1tb24gaGltIGJlZm9yZSB0aGUgQXJjaG9uIHRvIHByb3ZlIGhpcyBuYXRpb25hbGl0eS48L25vdGU+OyBpZiBoZSBzdW1tb25zCiAgICAgICAgICAgICAgICAgICAgaGltLCBoZSBpcyBmaW5lZCBmaWZ0eSBkcmFjaG1hcywgYW5kIGEgdGhvdXNhbmQgZHJhY2htYXMgaWYgaGUgb3JkZXJzIGhpbSB0byBzaXQKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGUgc3BlY3RhdG9ycy4gV2hhdCBpcyB0aGUgb2JqZWN0PyBUbyBwcm90ZWN0IHRoZSBjcm93bmVkIG9mZmljaWFsLCB3aG8KICAgICAgICAgICAgICAgICAgICBpcyBkb2luZyBwdWJsaWMgc2VydmljZSB0byB0aGUgZ29kLCBmcm9tIGJlaW5nIG1hbGljaW91c2x5IHN1bW1vbmVkIG9yIGFubm95ZWQKICAgICAgICAgICAgICAgICAgICBvciBpbnN1bHRlZCBvbiB0aGF0IGRheS4gPC90cmFuc2xhdGlvbj4="
translation['21.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5TbyBldmVuIHRoZSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaW4gZHVlIGNvdXJzZSBvZiBsYXcgc3VtbW9ucyBhIG1lbWJlciBvZiBhIGNob3J1cyB3aWxsIG5vdCBlc2NhcGUgYSBmaW5lLiBBbmQKICAgICAgICAgICAgICAgICAgICBzaGFsbCBub3QgaGUgYmUgcHVuaXNoZWQgd2hvIGluIGNvbnRlbXB0IG9mIGFsbCB0aGUgbGF3cyB0aHVzIHB1YmxpY2x5IHN0cmlrZXMKICAgICAgICAgICAgICAgICAgICB0aGUgbWFzdGVyIG9mIGEgY2hvcnVzPyBTdXJlbHkgaXQgaXMgdXNlbGVzcyBmb3IgeW91ciBsYXdzIHRvIGJlIHRodXMgd2VsbCBhbmQKICAgICAgICAgICAgICAgICAgICBodW1hbmVseSBmcmFtZWQgZm9yIHRoZSBwcm90ZWN0aW9uIG9mIHRoZSBodW1ibGVyIGNpdGl6ZW4sIGlmIHRob3NlIHdobyBkaXNvYmV5CiAgICAgICAgICAgICAgICAgICAgYW5kIGZsb3V0IHRoZW0gYXJlIG5vdCB0byBpbmN1ciB0aGUgcmVzZW50bWVudCBvZiB5b3Ugd2hvIGFyZSwgZm9yIHRoZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgYmVpbmcsIGVudHJ1c3RlZCB3aXRoIHRoZWlyIGFkbWluaXN0cmF0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIG5vdyBJIHNvbGVtbmx5IGNhbGwgeW91ciBhdHRlbnRpb24gdG8KICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHBvaW50LiBJIHNoYWxsIGJlZyB5b3Ugbm90IHRvIGJlIG9mZmVuZGVkIGlmIEkgbWVudGlvbiBieSBuYW1lIHNvbWUKICAgICAgICAgICAgICAgICAgICBwZXJzb25zIHdobyBoYXZlIGZhbGxlbiBpbnRvIG1pc2ZvcnR1bmU7IGZvciBJIHN3ZWFyIHRvIHlvdSB0aGF0IGluIGRvaW5nIHNvIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIG5vIGludGVudGlvbiBvZiBjYXN0aW5nIHJlcHJvYWNoIHVwb24gYW55IG1hbjsgSSBvbmx5IHdhbnQgdG8gc2hvdyB5b3UgaG93CiAgICAgICAgICAgICAgICAgICAgY2FyZWZ1bGx5IGFsbCB0aGUgcmVzdCBvZiB5b3UgYXZvaWQgYW55dGhpbmcgbGlrZSB2aW9sZW50IG9yIGluc3VsdGluZyBiZWhhdmlvci4KICAgICAgICAgICAgICAgICAgICBUaGVyZSBpcywgZm9yIGluc3RhbmNlLCBTYW5uaW8sIHRoZSB0cmFpbmVyIG9mIHRoZSB0cmFnaWMgY2hvcnVzZXMsIHdobyB3YXMKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgb2Ygc2hpcmtpbmcgbWlsaXRhcnkgc2VydmljZSBhbmQgc28gZm91bmQgaGltc2VsZiBpbiB0cm91YmxlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGF0IG1pc2ZvcnR1bmUgaGUgd2FzIGhpcmVkIGJ5IGEKICAgICAgICAgICAgICAgICAgICBjaG9ydXMtbWFzdGVy4oCUVGhlb3pvdGlkZXMsIGlmIEkgYW0gbm90IG1pc3Rha2Vu4oCUd2hvIHdhcyBrZWVuCiAgICAgICAgICAgICAgICAgICAgdG8gd2luIGEgdmljdG9yeSBpbiB0aGUgdHJhZ2VkaWVzLiBXZWxsLCBhdCBmaXJzdCB0aGUgcml2YWwgbWFzdGVycyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgaW5kaWduYW50IGFuZCB0aHJlYXRlbmVkIHRvIGRlYmFyIGhpbSwgYnV0IHdoZW4gdGhleSBzYXcgdGhhdCB0aGUgdGhlYXRlciB3YXMKICAgICAgICAgICAgICAgICAgICBmdWxsIGFuZCB0aGUgY3Jvd2QgYXNzZW1ibGVkIGZvciB0aGUgY29udGVzdCwgdGhleSBoZXNpdGF0ZWQsIHRoZXkgZ2F2ZSB3YXksIGFuZAogICAgICAgICAgICAgICAgICAgIG5vIG9uZSBsYWlkIGEgZmluZ2VyIG9uIGhpbS4gT25lIGNhbiBzZWUgdGhhdCB0aGUgZm9yYmVhcmFuY2Ugd2hpY2ggcGlldHkKICAgICAgICAgICAgICAgICAgICBpbnNwaXJlcyBpbiBldmVyeSBvbmUgb2YgeW91IGlzIHN1Y2ggdGhhdCBTYW5uaW8gaGFzIGJlZW4gdHJhaW5pbmcgY2hvcnVzZXMgZXZlcgogICAgICAgICAgICAgICAgICAgIHNpbmNlLCBub3QgaGluZGVyZWQgZXZlbiBieSBoaXMgcHJpdmF0ZSBlbmVtaWVzLCBtdWNoIGxlc3MgYnkgYW55IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNob3J1cy1tYXN0ZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGFnYWluIHRoZXJlIGlzIEFyaXN0ZWlkZXMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJpYmUgb2YgT2VuZWlzLCB3aG8gaGFzIGhhZCBhIHNpbWlsYXIgbWlzZm9ydHVuZS4gSGUgaXMgbm93IGFuIG9sZCBtYW4KICAgICAgICAgICAgICAgICAgICBhbmQgcGVyaGFwcyBsZXNzIHVzZWZ1bCBpbiBhIGNob3J1cywgYnV0IGhlIHdhcyBvbmNlIGNob3J1cy1sZWFkZXIgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgIHRyaWJlLiBZb3Uga25vdywgb2YgY291cnNlLCB0aGF0IGlmIHRoZSBsZWFkZXIgaXMgd2l0aGRyYXduLCB0aGUgcmVzdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjaG9ydXMgaXMgZG9uZSBmb3IuIEJ1dCBpbiBzcGl0ZSBvZiB0aGUga2VlbiByaXZhbHJ5IG9mIG1hbnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hvcnVzLW1hc3RlcnMsIG5vdCBvbmUgb2YgdGhlbSBsb29rZWQgYXQgdGhlIHBvc3NpYmxlIGFkdmFudGFnZSBvciB2ZW50dXJlZCB0bwogICAgICAgICAgICAgICAgICAgIHJlbW92ZSBoaW0gb3IgcHJldmVudCBoaW0gZnJvbSBwZXJmb3JtaW5nLiBTaW5jZSB0aGlzIGludm9sdmVkIGxheWluZyBoYW5kcyBvbgogICAgICAgICAgICAgICAgICAgIGhpbSwgYW5kIHNpbmNlIGhlIGNvdWxkIG5vdCBiZSBjaXRlZCBiZWZvcmUgdGhlIEFyY2hvbiBhcyBpZiBoZSB3ZXJlIGFuIGFsaWVuCiAgICAgICAgICAgICAgICAgICAgd2hvbSBpdCB3YXMgZGVzaXJlZCB0byBlamVjdCwgZXZlcnkgbWFuIHNocmFuayBmcm9tIGJlaW5nIHNlZW4gYXMgdGhlIHBlcnNvbmFsCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yIG9mIHN1Y2ggYW4gb3V0cmFnZS4gPC90cmFuc2xhdGlvbj4="
translation['21.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGlzIG5vdCB0aGlzLAogICAgICAgICAgICAgICAgICAgIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgYSBzaG9ja2luZyBhbmQgaW50b2xlcmFibGUgcG9zaXRpb24/IE9uIHRoZSBvbmUgaGFuZCwKICAgICAgICAgICAgICAgICAgICBjaG9ydXMtbWFzdGVycywgd2hvIHRoaW5rIHRoYXQgc3VjaCBhIGNvdXJzZSBtaWdodCBicmluZyB0aGVtIHZpY3RvcnkgYW5kIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgaW4gbWFueSBjYXNlcyBzcGVudCBhbGwgdGhlaXIgc3Vic3RhbmNlIG9uIHRoZWlyIHB1YmxpYyBzZXJ2aWNlcywgaGF2ZQogICAgICAgICAgICAgICAgICAgIG5ldmVyIGRhcmVkIHRvIGxheSBoYW5kcyBldmVuIG9uIG9uZSB3aG9tIHRoZSBsYXcgcGVybWl0cyB0aGVtIHRvIHRvdWNoLCBidXQKICAgICAgICAgICAgICAgICAgICBzaG93IHN1Y2ggY2F1dGlvbiwgc3VjaCBwaWV0eSwgc3VjaCBtb2RlcmF0aW9uIHRoYXQsIGluIHNwaXRlIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZXhwZW5kaXR1cmUgYW5kIHRoZWlyIGVhZ2VyIGNvbXBldGl0aW9uLCB0aGV5IHJlc3RyYWluIHRoZW1zZWx2ZXMgYW5kIHJlc3BlY3QKICAgICAgICAgICAgICAgICAgICB5b3VyIHdpc2hlcyBhbmQgeW91ciB6ZWFsIGZvciB0aGUgZmVzdGl2YWwuIE1laWRpYXMsIG9uIHRoZSBvdGhlciBoYW5kLCBhCiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBpbmRpdmlkdWFsIHdobyBoYXMgYmVlbiBwdXQgdG8gbm8gZXhwZW5zZSwganVzdCBiZWNhdXNlIGhlIGhhcyBmYWxsZW4KICAgICAgICAgICAgICAgICAgICBmb3VsIG9mIGEgbWFuIHdob20gaGUgaGF0ZXPigJRhIG1hbiwgcmVtZW1iZXIsIHdobyBpcyBzcGVuZGluZyBoaXMgbW9uZXkKICAgICAgICAgICAgICAgICAgICBhcyBjaG9ydXMtbWFzdGVyIGFuZCB3aG8gaGFzIGZ1bGwgcmlnaHRzIG9mIGNpdGl6ZW5zaGlw4oCUaW5zdWx0cyBoaW0KICAgICAgICAgICAgICAgICAgICBhbmQgc3RyaWtlcyBoaW0gYW5kIGNhcmVzIG5vdGhpbmcgZm9yIHRoZSBmZXN0aXZhbCwgZm9yIHRoZSBsYXdzLCBmb3IgeW91cgogICAgICAgICAgICAgICAgICAgIG9waW5pb24sIG9yIGZvciB0aGUgZ29kJ3MgaG9ub3IuIDwvdHJhbnNsYXRpb24+"
translation['21.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGFsdGhvdWdoIG1lbiBoYXZlIHF1YXJyZWxsZWQgb2Z0ZW4gZW5vdWdoLCB3aGV0aGVyCiAgICAgICAgICAgICAgICAgICAgb24gcHJpdmF0ZSBvciBvbiBwdWJsaWMgZ3JvdW5kcywgbm8gb25lIGhhcyBldmVyIGJlZW4gc28gbG9zdCB0byBzaGFtZSBhcyB0bwogICAgICAgICAgICAgICAgICAgIHZlbnR1cmUgb24gc3VjaCBjb25kdWN0IGFzIHRoaXMuIFlldCBpdCBpcyBzYWlkIHRoYXQgdGhlIGZhbW91cyBJcGhpY3JhdGVzIG9uY2UKICAgICAgICAgICAgICAgICAgICBoYWQgYSBzZXJpb3VzIHF1YXJyZWwgd2l0aCBEaW9jbGVzIG9mIHRoZSBQaXR0aGVhbiBkZW1lLCBhbmQsIHRvIG1ha2UgbWF0dGVycwogICAgICAgICAgICAgICAgICAgIHdvcnNlLCBJcGhpY3JhdGVzJyBicm90aGVyIFRlaXNpYXMgaGFwcGVuZWQgdG8gYmUgYSBjaG9ydXMtbWFzdGVyIGluIGNvbXBldGl0aW9uCiAgICAgICAgICAgICAgICAgICAgd2l0aCBEaW9jbGVzLiBJcGhpY3JhdGVzIHdhcyBhIHdlYWx0aHkgbWFuIHdpdGggbWFueSBmcmllbmRzIGFuZCBoYWQgYSBoaWdoCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiBvZiBoaW1zZWxmLCBhcyBhIG1hbiB3b3VsZCBuYXR1cmFsbHkgaGF2ZSB3aG8gaGFkIGVhcm5lZCBzbyBtYW55IGhvbm9ycwogICAgICAgICAgICAgICAgICAgIGFuZCBkaXN0aW5jdGlvbnMgYXQgeW91ciBoYW5kczsgPC90cmFuc2xhdGlvbj4="
translation['21.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgSXBoaWNyYXRlcwogICAgICAgICAgICAgICAgICAgIG5ldmVyIHdlbnQgdW5kZXIgY292ZXIgb2YgbmlnaHQgdG8gdGhlIGdvbGRzbWl0aHMnIHNob3BzLCBoZSBuZXZlciByaXBwZWQgdXAgdGhlCiAgICAgICAgICAgICAgICAgICAgY29zdHVtZXMgaW50ZW5kZWQgZm9yIHRoZSBmZXN0aXZhbCwgaGUgbmV2ZXIgYnJpYmVkIHRoZSBpbnN0cnVjdG9yIGFuZCBoaW5kZXJlZAogICAgICAgICAgICAgICAgICAgIHRoZSB0cmFpbmluZyBvZiB0aGUgY2hvcnVzLCBoZSBuZXZlciBwbGF5ZWQgYW55IG9mIHRoZSB0cmlja3MgdGhhdCBNZWlkaWFzCiAgICAgICAgICAgICAgICAgICAgcmVwZWF0ZWRseSBwcmFjdGlzZWQuIE5vLCBoZSBzdWJtaXR0ZWQgdG8gdGhlIGxhd3MgYW5kIHRvIHRoZSB3aXNoZXMgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zLCBhbmQgcGF0aWVudGx5IHdpdG5lc3NlZCB0aGUgdmljdG9yeSBhbmQgdGhlIGNyb3duaW5nIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGVuZW15LiBBbmQgaGUgd2FzIHJpZ2h0OyBmb3IgaGUgZmVsdCB0aGF0IHN1Y2ggc3VibWlzc2lvbiB3YXMgZHVlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnN0aXR1dGlvbiB1bmRlciB3aGljaCBoZSBoaW1zZWxmIGhhZCBlbmpveWVkIHN1Y2ggcHJvc3Blcml0eS4gPC90cmFuc2xhdGlvbj4="
translation['21.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSBhbm90aGVyIGluc3RhbmNlLgogICAgICAgICAgICAgICAgICAgIFdlIGFsbCBrbm93IHRoYXQgUGhpbG9zdHJhdHVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ29sb251cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ29sb251cyI+Q29sb251czwvcGxhY2VOYW1lPiB3YXMgb25lIG9mIHRoZSBhY2N1c2VycyB3aGVuIENoYWJyaWFzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNoYWJyaWFzLCB3aXRoIENhbGxpc3RyYXR1cywgd2FzIHRyaWVkIGZvciB0cmVhY2hlcnkgaW4KICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbiB3aXRoIHRoZSBzdXJyZW5kZXIgb2YgT3JvcHVzIGluIDM2Ni4gVGhlIGRlZmVuY2Ugb2YgQ2FsbGlzdHJhdHVzCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIHNhaWQgdG8gaGF2ZSByb3VzZWQgdGhlIGFkbWlyYXRpb24gb2YgRGVtb3N0aGVuZXMsIHRoZW4gYSB5b3V0aC48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgd2FzIHRyaWVkIGZvciBoaXMgbGlmZSBvbiBjaGFyZ2VzIHJlbGF0aW5nIHRvIE9yb3B1cywgYW5kIHRoYXQgaGUgc2hvd2VkIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICB0aGUgYml0dGVyZXN0IG9mIHRoZW0gYWxsLCBhbmQgdGhhdCBhZnRlcndhcmRzIGhlIHdvbiB0aGUgcHJpemUgYXQgdGhlIERpb255c2lhCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGNob3J1cyBvZiBib3lzLiBZZXQgQ2hhYnJpYXMgbmVpdGhlciBzdHJ1Y2sgaGltIG5vciBzbmF0Y2hlZCB0aGUgY3Jvd24KICAgICAgICAgICAgICAgICAgICBvZmYgaGlzIGhlYWQgbm9yIGluIGFueSB3YXkgaW50cnVkZWQgd2hlcmUgaGUgaGFkIG5vIHJpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5JIGNvdWxkIG1lbnRpb24gbWFueSBvdGhlcnMgd2hvIG9uIHZhcmlvdXMgZ3JvdW5kcyBoYXZlCiAgICAgICAgICAgICAgICAgICAgcXVhcnJlbGxlZCB3aXRoIHRoZWlyIG5laWdoYm9ycywgYnV0IEkgaGF2ZSBuZXZlciBzZWVuIG9yIGhlYXJkIG9mIGFueW9uZSB3aG8KICAgICAgICAgICAgICAgICAgICBjYXJyaWVkIGhpcyBpbnNvbGVuY2Ugc28gZmFyIGFzIHRvIGJlaGF2ZSBsaWtlIHRoaXMuIEFuZCBJIGFtIHF1aXRlIHN1cmUgdGhhdCBubwogICAgICAgICAgICAgICAgICAgIG9uZSBoZXJlIGNhbiByZWNhbGwgYW55IGNhc2Ugd2hlcmUgYSBtYW4sIGludm9sdmVkIGluIGEgcHVibGljIG9yIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBkaXNwdXRlLCBoYXMgdGFrZW4gaGlzIHN0YW5kIGJlc2lkZSB0aGUgdW1waXJlcyB3aGlsZSB0aGV5IHdlcmUgYmVpbmcgbmFtZWQsIG9yCiAgICAgICAgICAgICAgICAgICAgZGljdGF0ZWQgdGhlIG9hdGggd2hlbiB0aGV5IHdlcmUgYmVpbmcgc3dvcm4sIG9yIHBhcmFkZWQgaGlzIGhvc3RpbGl0eSBvbiBhbnkKICAgICAgICAgICAgICAgICAgICBzdWNoIG9jY2FzaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBhbmQgYWxsIHNpbWlsYXIgYWN0cywKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIGFyZSBwYXJ0bHkgZXhjdXNhYmxlIGluIGEgY2hvcnVzLW1hc3RlciB3aG8gaXMgY2FycmllZCBhd2F5IGJ5CiAgICAgICAgICAgICAgICAgICAgZW11bGF0aW9uOyBidXQgdG8gaGFyYXNzIGEgbWFuIHdpdGggb25lJ3MgaG9zdGlsaXR5LCBkZWxpYmVyYXRlbHkgYW5kIG9uIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb24sIGFuZCB0byBib2FzdCBvbmUncyBvd24gcG93ZXIgYXMgc3VwZXJpb3IgdG8gdGhlIGxhd3MsIHRoYXQsIGJ5IEhlYXZlbiEKICAgICAgICAgICAgICAgICAgICBpcyBjcnVlbCBhbmQgdW5qdXN0IGFuZCBjb250cmFyeSB0byB5b3VyIGludGVyZXN0cy4gRm9yIGlmIGVhY2ggbWFuIHdoZW4gaGUKICAgICAgICAgICAgICAgICAgICBiZWNvbWVzIGNob3J1cy1tYXN0ZXIgY291bGQgZm9yZXNlZSB0aGlzIHJlc3VsdDog4oCcSWYgU28tYW5kLXNvIGlzIG15CiAgICAgICAgICAgICAgICAgICAgZW5lbXnigJRNZWlkaWFzIGZvciBleGFtcGxlIG9yIGFueW9uZSBlbHNlIGVxdWFsbHkgcmljaCBhbmQKICAgICAgICAgICAgICAgICAgICB1bnNjcnVwdWxvdXPigJRmaXJzdCBJIHNoYWxsIGJlIHJvYmJlZCBvZiBteSB2aWN0b3J5LCBldmVuIGlmIEkgbWFrZSBhCiAgICAgICAgICAgICAgICAgICAgYmV0dGVyIHNob3cgdGhhbiBhbnkgb2YgbXkgY29tcGV0aXRvcnMgbmV4dCBJIHNoYWxsIGJlIHdvcnN0ZWQgYXQgZXZlcnkgcG9pbnQKICAgICAgICAgICAgICAgICAgICBhbmQgZXhwb3NlZCB0byByZXBlYXRlZCBpbnN1bHRzOuKAnSB3aG8gaXMgc28gaXJyYXRpb25hbCBvciBzdWNoIGEgcG9vcgogICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlIHRoYXQgaGUgd291bGQgdm9sdW50YXJpbHkgY29uc2VudCB0byBzcGVuZCBhIHNpbmdsZSBkcmFjaG1hPyA8L3RyYW5zbGF0aW9uPg=="
translation['21.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5JIHN1cHBvc2Ugd2hhdCB0ZW5kcyB0byBtYWtlIGV2ZXJ5b25lIHB1YmxpYy1zcGlyaXRlZAogICAgICAgICAgICAgICAgICAgIGFuZCBsaWJlcmFsIHdpdGggaGlzIG1vbmV5IGlzIHRoZSByZWZsZWN0aW9uIHRoYXQgdW5kZXIgYSBkZW1vY3JhY3kgZWFjaCBtYW4gaGFzCiAgICAgICAgICAgICAgICAgICAgaGlzIHNoYXJlIG9mIGp1c3QgYW5kIGVxdWFsIHJpZ2h0cy4gTm93IEksIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdhcyBkZXByaXZlZCBvZiB0aG9zZSByaWdodHMKICAgICAgICAgICAgICAgICAgICB0aHJvdWdoIHRoaXMgbWFuJ3MgYWN0cywgYW5kLCBxdWl0ZSBhcGFydCBmcm9tIHRoZSBpbnN1bHRzIEkgZW5kdXJlZCwgSSB3YXMKICAgICAgICAgICAgICAgICAgICByb2JiZWQgb2YgbXkgdmljdG9yeS4gWWV0IEkgc2hhbGwgcHJvdmUgdG8gYWxsIG9mIHlvdSBiZXlvbmQgYSBkb3VidCB0aGF0CiAgICAgICAgICAgICAgICAgICAgTWVpZGlhcywgd2l0aG91dCBjb21taXR0aW5nIGFueSBvdXRyYWdlb3VzIG9mZmVuY2UsIHdpdGhvdXQgaW5zdWx0aW5nIG9yCiAgICAgICAgICAgICAgICAgICAgc3RyaWtpbmcgbWUsIGhhZCBpdCBpbiBoaXMgcG93ZXIgYm90aCB0byBjYXVzZSBtZSB0cm91YmxlIGFuZCB0byBkaXNwbGF5IGhpcwogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBzcGlyaXQgdG8geW91IGluIGEgbGVnaXRpbWF0ZSB3YXksIHNvIHRoYXQgSSBzaG91bGQgbm90IGJlIGFibGUgdG8gb3BlbgogICAgICAgICAgICAgICAgICAgIG15IGxpcHMgYWdhaW5zdCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['21.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIHdoYXQgaGUgb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGRvbmUsIEF0aGVuaWFucy4gV2hlbiBJIG9mZmVyZWQgbXlzZWxmIHRvIHRoZSBBc3NlbWJseSBhcyBjaG9ydXMtbWFzdGVyIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSB0cmliZSBvZiBQYW5kaW9uaXMsIGhlIHNob3VsZCBoYXZlIGdvdCB1cCBhbmQgb2ZmZXJlZCBoaW1zZWxmIGFzIGEgcml2YWwKICAgICAgICAgICAgICAgICAgICBtYXN0ZXIgZm9yIGhpcyBvd24gdHJpYmUgb2YgRXJlY2h0aGVpcyBoZSBzaG91bGQgaGF2ZSBwdXQgaGltc2VsZiBvbiBlcXVhbCB0ZXJtcwogICAgICAgICAgICAgICAgICAgIHdpdGggbWUgYW5kIHNwZW50IGhpcyBtb25leSBhcyBJIHdhcyBzcGVuZGluZyBtaW5lIGFuZCB0cmllZCBpbiB0aGF0IHdheSB0bwogICAgICAgICAgICAgICAgICAgIHdyZXN0IHRoZSB2aWN0b3J5IGZyb20gbWU7IGJ1dCBub3QgZXZlbiBhcyBteSByaXZhbCBzaG91bGQgaGUgaGF2ZSB0aHVzIGluc3VsdGVkCiAgICAgICAgICAgICAgICAgICAgYW5kIHN0cnVjayBtZS4gPC90cmFuc2xhdGlvbj4="
translation['21.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBpdCB3YXMsIGhlIGRpZCBub3QgYWRvcHQKICAgICAgICAgICAgICAgICAgICB0aGlzIGNvdXJzZSwgYnkgd2hpY2ggaGUgbWlnaHQgaGF2ZSBkb25lIGhvbm9yIHRvIHRoZSBwZW9wbGUsIG5vciBkaWQgaGUgd29yawogICAgICAgICAgICAgICAgICAgIG9mZiBoaXMgaGlnaCBzcGlyaXRzIGluIHRoaXMgd2F5LiBObzsgSSB3YXMgaGlzIHRhcmdldCwgSSB3aG8gaW4gbXkgbWFkbmVzcywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LOKAlGZvciBpdCBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBtYWRuZXNzIHRvIGVuZ2FnZSBpbiBzb21ldGhpbmcgYmV5b25kIG9uZSdzIHBvd2VyIHBlcmhhcHMgaW4gbXkgYW1iaXRpb24sCiAgICAgICAgICAgICAgICAgICAgdm9sdW50ZWVyZWQgZm9yIGNob3J1cy1tYXN0ZXIuIEhlIGhhcmFzc2VkIG1lIHdpdGggYSBwZXJzZWN1dGlvbiBzbyB1bmRpc2d1aXNlZAogICAgICAgICAgICAgICAgICAgIGFuZCBzbyBicnV0YWwgdGhhdCBuZWl0aGVyIHRoZSBzYWNyZWQgY29zdHVtZXMgbm9yIHRoZSBjaG9ydXMgbm9yIGF0IGxhc3QgZXZlbgogICAgICAgICAgICAgICAgICAgIG15IG93biBwZXJzb24gd2FzIHNhZmUgZnJvbSBoaXMgaGFuZHMuIDwvdHJhbnNsYXRpb24+"
translation['21.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGlmIHRoZXJlIGlzIGFueW9uZSBvZiB5b3UsIEF0aGVuaWFucywKICAgICAgICAgICAgICAgICAgICB3aG9zZSBhbmdlciBhZ2FpbnN0IE1laWRpYXMgZmFsbHMgc2hvcnQgb2YgYSBkZW1hbmQgZm9yIGhpcyBkZWF0aCwgaGUgaXMgd3JvbmcuCiAgICAgICAgICAgICAgICAgICAgRm9yIGl0IGlzIG5laXRoZXIganVzdCBub3IgcHJvcGVyIHRoYXQgdGhlIGZvcmJlYXJhbmNlIG9mIHRoZSB2aWN0aW0gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0ZSB0byB0aGUgYWNxdWl0dGFsIG9mIGEgbWFuIHdobyBoYXMgcHV0IG5vIGNoZWNrIG9uIGhpcyBpbnNvbGVuY2UuIFRoZQogICAgICAgICAgICAgICAgICAgIGxhdHRlciB5b3Ugc2hvdWxkIHB1bmlzaCBhcyBpZiB0aGUgcmVzdWx0cyBvZiBoaXMgY29uZHVjdCBoYWQgYmVlbiB1dHRlcmx5CiAgICAgICAgICAgICAgICAgICAgaXJyZW1lZGlhYmxlOyB0byB0aGUgZm9ybWVyIHlvdSBzaG91bGQgc2hvdyB5b3VyIGdvb2R3aWxsIGJ5IGZhdm91cmluZyBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgY2F1c2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBhcmd1bWVudCBpcyBoZXJlIGNvbmRlbnNlZC4KICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMgaW1hZ2luZXMgYSBqdXJ5bWFuIGFzIHNheWluZyB0byBoaW1zZWxmLCDigJxEZW1vc3RoZW5lcwogICAgICAgICAgICAgICAgICAgICAgICBkaWQgbm90IHJldGFsaWF0ZTsgdGhlcmVmb3JlIHRoZSBpbnN1bHQgd2FzIG5vdCByZWFsbHkKICAgICAgICAgICAgICAgICAgICAgICAgaW50b2xlcmFibGUu4oCdIEhlIHJlcGxpZXMsIOKAnFRoYXQgb25seSBzaG93cyBteQogICAgICAgICAgICAgICAgICAgICAgICBmb3JlYmVhcmFuY2UuIFlvdSBvdWdodCB0byBwdW5pc2ggTWVpZGlhcyBhcyBzZXZlcmVseSBhcyB5b3Ugd291bGQgaWYgSSBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgc2hvd24gdGhhdCB0aGUgaW5zdWx0IHdhcyBpbnRvbGVyYWJsZSBieSBoaXR0aW5nIGhpbSBiYWNrLuKAnTwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGNhbm5vdAogICAgICAgICAgICAgICAgICAgIHJldG9ydCB0aGF0IHN1Y2ggYWN0cyBoYXZlIG5ldmVyIGhhZCBhbnkgc2VyaW91cyBjb25zZXF1ZW5jZXMsIGJ1dCB0aGF0IEkgYW0gbm93CiAgICAgICAgICAgICAgICAgICAgZXhhZ2dlcmF0aW5nIHRoZSBpbmNpZGVudCBhbmQgcmVwcmVzZW50aW5nIGl0IGFzIGZvcm1pZGFibGUuIFRoYXQgaXMgd2lkZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJrLiBCdXQgYWxsLCBvciBhdCBsZWFzdCBtYW55LCBrbm93IHdoYXQgRXV0aHludXMsIHRoZSBvbmNlIGZhbW91cyB3cmVzdGxlciwgYQogICAgICAgICAgICAgICAgICAgIHlvdW5nc3RlciwgZGlkIHRvIFNvcGhpbHVzIHRoZSBwcml6ZS1maWdodGVyLiBIZSB3YXMgYSBkYXJrLCBicmF3bnkgZmVsbG93LiBJIGFtCiAgICAgICAgICAgICAgICAgICAgc3VyZSBzb21lIG9mIHlvdSBrbm93IHRoZSBtYW4gSSBtZWFuLiBIZSBtZXQgaGltIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjczIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzMiPlNhbW9zPC9wbGFjZU5hbWU+IGF0IGEgZ2F0aGVyaW5n4oCUanVzdCBhIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBwbGVhc3VyZS1wYXJ0eS1hbmQgYmVjYXVzZSBoZSBpbWFnaW5lZCBoZSB3YXMgaW5zdWx0aW5nIGhpbSwgdG9vayBzdWNoIHN1bW1hcnkKICAgICAgICAgICAgICAgICAgICB2ZW5nZWFuY2UgdGhhdCBoZSBhY3R1YWxseSBraWxsZWQgaGltLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UgaXMgc3RyYW5nZWx5IGNvbGxvcXVpYWwsIG5vdCB0byBzYXkgc2xpcC1zaG9kLiBNYW55IGVkaXRvcnMgdGhpbmsKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB3ZSBoYXZlIGhlcmUgYSBwYXNzYWdlIHdoaWNoIERlbW9zdGhlbmVzIGhhcyBub3QgZmluYWxseSB3b3JrZWQgdXAuIFlldAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3VkZGVuIGRyb3AgaW4gc3R5bGUgbWlnaHQgYmUgZWZmZWN0aXZlLCBpZiBvbmx5IHRoZSBtZWFuaW5nIHdlcmUgbW9yZQogICAgICAgICAgICAgICAgICAgICAgICBjbGVhci4gRGlkIHRoZSB3cmVzdGxlciBraWxsIHRoZSBwcml6ZS1maWdodGVyIG9yIHZpY2UgdmVyc2E/IFRoZSByZWFkZXIKICAgICAgICAgICAgICAgICAgICAgICAgbXVzdCB0YWtlIGhpcyBjaG9pY2UuIElmIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9gSDPhOG9u8+Az4TPic69PC9mb3JlaWduPiBpcwogICAgICAgICAgICAgICAgICAgICAgICByZXRhaW5lZCwgaXQgd2lsbCBtZWFuIGJlY2F1c2UgdGhlIHN0cmlrZXIgW0UuIG9yIFMuP10KICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW5kZWQgdG8gaW5zdWx0IGhpbSBbUy4gb3IgRS4/XS4gVGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs66zrHhvbc8L2ZvcmVpZ24+IG9ubHkgbWFrZXMgY29uZnVzaW9uIHdvcnNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZvdW5kZWQuPC9ub3RlPjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9gSDPhOG9u8+Az4TPic69PC9mb3JlaWduPiBpcwogICAgICAgICAgICAgICAgICAgICAgICByZXRhaW5lZCwgaXQgd2lsbCBtZWFuIGJlY2F1c2UgdGhlIHN0cmlrZXIgW0UuIG9yIFMuP10KICAgICAgICAgICAgICAgICAgICAgICAgaW50ZW5kZWQgdG8gaW5zdWx0IGhpbSBbUy4gb3IgRS4/XS4gVGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs66zrHhvbc8L2ZvcmVpZ24+IG9ubHkgbWFrZXMgY29uZnVzaW9uIHdvcnNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZvdW5kZWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IGlzIGEgbWF0dGVyIG9mIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZSB0aGF0IEV1YWVvbiwgdGhlIGJyb3RoZXIgb2YgTGVvZGFtYXMsIGtpbGxlZCBCb2VvdHVzIGF0IGEgcHVibGljCiAgICAgICAgICAgICAgICAgICAgYmFucXVldCBhbmQgZW50ZXJ0YWlubWVudCBpbiByZXZlbmdlIGZvciBhIHNpbmdsZSBibG93LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd2FzIG5vdCB0aGUgYmxvdyBidXQgdGhlIGluZGlnbml0eSB0aGF0IHJvdXNlZCB0aGUKICAgICAgICAgICAgICAgICAgICBhbmdlci4gVG8gYmUgc3RydWNrIGlzIG5vdCB0aGUgc2VyaW91cyB0aGluZyBmb3IgYSBmcmVlIG1hbiwgc2VyaW91cyB0aG91Z2ggaXQKICAgICAgICAgICAgICAgICAgICBpcywgYnV0IHRvIGJlIHN0cnVjayBpbiB3YW50b24gaW5zb2xlbmNlLiBNYW55IHRoaW5ncywgQXRoZW5pYW5zLCBzb21lIG9mIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhlIHZpY3RpbSB3b3VsZCBmaW5kIGl0IGRpZmZpY3VsdCB0byBwdXQgaW50byB3b3JkcywgbWF5IGJlIGRvbmUgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RyaWtlcuKAlGJ5IGdlc3R1cmUsIGJ5IGxvb2ssIGJ5IHRvbmU7IHdoZW4gaGUgc3RyaWtlcyBpbiB3YW50b25uZXNzIG9yCiAgICAgICAgICAgICAgICAgICAgb3V0IG9mIGVubWl0eTsgd2l0aCB0aGUgZmlzdCBvciBvbiB0aGUgY2hlZWsuIFRoZXNlIGFyZSB0aGUgdGhpbmdzIHRoYXQgcHJvdm9rZQogICAgICAgICAgICAgICAgICAgIG1lbiBhbmQgbWFrZSB0aGVtIGJlc2lkZSB0aGVtc2VsdmVzLCBpZiB0aGV5IGFyZSB1bnVzZWQgdG8gaW5zdWx0LiBObwogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBjYW4KICAgICAgICAgICAgICAgICAgICBicmluZyB0aGUgb3V0cmFnZSBhcyB2aXZpZGx5IGJlZm9yZSB0aGUgaGVhcmVycyBhcyBpdCBhcHBlYXJzIGluIHRydXRoIGFuZAogICAgICAgICAgICAgICAgICAgIHJlYWxpdHkgdG8gdGhlIHZpY3RpbSBhbmQgdG8gdGhlIHNwZWN0YXRvcnMuIDwvdHJhbnNsYXRpb24+"
translation['21.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbmFtZSBvZiBhbGwgdGhlIGdvZHMsIEF0aGVuaWFucywgSSBhc2sgeW91IHRvIHJlZmxlY3QgYW5kIGNhbGN1bGF0ZSBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgb3duIG1pbmRzIGhvdyBtdWNoIG1vcmUgcmVhc29uIEkgaGFkIHRvIGJlIGFuZ3J5IHdoZW4gSSBzdWZmZXJlZCBzbyBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBoYW5kcyBvZiBNZWlkaWFzLCB0aGFuIEV1YWVvbiB3aGVuIGhlIGtpbGxlZCBCb2VvdHVzLiBFdWFlb24gd2FzIHN0cnVjayBieSBhbgogICAgICAgICAgICAgICAgICAgIGFjcXVhaW50YW5jZSwgd2hvIHdhcyBkcnVuayBhdCB0aGUgdGltZSwgaW4gdGhlIHByZXNlbmNlIG9mIHNpeCBvciBzZXZlbgogICAgICAgICAgICAgICAgICAgIHdpdG5lc3Nlcywgd2hvIHdlcmUgYWxzbyBhY3F1YWludGFuY2VzIGFuZCBtaWdodCBiZSBkZXBlbmRlZCB1cG9uIHRvIGRlbm91bmNlCiAgICAgICAgICAgICAgICAgICAgdGhlIG9uZSBmb3IgaGlzIG9mZmVuY2UgYW5kIGNvbW1lbmQgdGhlIG90aGVyIGlmIGhlIGhhZCBwYXRpZW50bHkgcmVzdHJhaW5lZCBoaXMKICAgICAgICAgICAgICAgICAgICBmZWVsaW5ncyBhZnRlciBzdWNoIGFuIGFmZnJvbnQsIGVzcGVjaWFsbHkgYXMgRXVhZW9uIGhhZCBnb25lIHRvIHN1cCBhdCBhIGhvdXNlCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggaGUgbmVlZCBuZXZlciBoYXZlIGVudGVyZWQgYXQgYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSQogICAgICAgICAgICAgICAgICAgIHdhcyBhc3NhdWx0ZWQgYnkgYSBwZXJzb25hbCBlbmVteSBlYXJseSBpbiB0aGUgZGF5LCB3aGVuIGhlIHdhcyBzb2JlciwgcHJvbXB0ZWQKICAgICAgICAgICAgICAgICAgICBieSBpbnNvbGVuY2UsIG5vdCBieSB3aW5lLCBpbiB0aGUgcHJlc2VuY2Ugb2YgbWFueSBmb3JlaWduZXJzIGFzIHdlbGwgYXMKICAgICAgICAgICAgICAgICAgICBjaXRpemVucywgYW5kIGFib3ZlIGFsbCBpbiBhIHRlbXBsZSB3aGljaCBJIHdhcyBzdHJpY3RseSBvYmxpZ2VkIHRvIGVudGVyIGJ5CiAgICAgICAgICAgICAgICAgICAgdmlydHVlIG9mIG15IG9mZmljZS4gQW5kLCBBdGhlbmlhbnMsIEkgY29uc2lkZXIgdGhhdCBJIHdhcyBwcnVkZW50LCBvciByYXRoZXIKICAgICAgICAgICAgICAgICAgICBoYXBwaWx5IGluc3BpcmVkLCB3aGVuIEkgc3VibWl0dGVkIGF0IHRoZSB0aW1lIGFuZCB3YXMgbm90IGltcGVsbGVkIHRvIGFueQogICAgICAgICAgICAgICAgICAgIGlycmVtZWRpYWJsZSBhY3Rpb247IHRob3VnaCBJIGZ1bGx5IHN5bXBhdGhpemUgd2l0aCBFdWFlb24gYW5kIGFueW9uZSBlbHNlIHdobywKICAgICAgICAgICAgICAgICAgICB3aGVuIHByb3Zva2VkLCB0YWtlcyB0aGUgbGF3IGludG8gaGlzIG93biBoYW5kcy4gPC90cmFuc2xhdGlvbj4="
translation['21.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5NeSB2aWV3cyB3ZXJlLCBJIHRoaW5rLCBzaGFyZWQgYXQgdGhhdCB0cmlhbCBieSBtYW55IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cnk7IGZvciBJIGFtIHRvbGQgdGhhdCBoZSB3YXMgb25seSBjb25kZW1uZWQgYnkgYSBzaW5nbGUgdm90ZSwgYW5kIHlldCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICBubyByZWNvdXJzZSB0byB0ZWFycyBvciBzdXBwbGljYXRpb25zIGFuZCBtYWRlIG5vIGVmZm9ydCwgc21hbGwgb3IgZ3JlYXQsIHRvIHdpbgogICAgICAgICAgICAgICAgICAgIHRoZSBmYXZvdXIgb2YgaGlzIGp1ZGdlcy4gTGV0IHVzIGFzc3VtZSwgdGhlbiwgdGhhdCB0aGUganVkZ2VzIHdobyBjb25kZW1uZWQgaGltCiAgICAgICAgICAgICAgICAgICAgZGlkIHNvLCBub3QgYmVjYXVzZSBoZSByZXRhbGlhdGVkLCBidXQgYmVjYXVzZSBoZSBkaWQgaXQgaW4gc3VjaCBhIHdheSBhcyB0bwogICAgICAgICAgICAgICAgICAgIGtpbGwgdGhlIGFnZ3Jlc3Nvciwgd2hpbGUgdGhlIGp1ZGdlcyB3aG8gYWNxdWl0dGVkIGhpbSBhbGxvd2VkIGV2ZW4gdGhpcyBsaWNlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgcmV2ZW5nZSB0byBhIG1hbiB3aG8gaGFkIHN1ZmZlcmVkIGFuIG91dHJhZ2Ugb24gaGlzIHBlcnNvbi4gPC90cmFuc2xhdGlvbj4="
translation['21.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGZvbGxvd3M/IEkgd2hvIHdhcyBzbyBjYXJlZnVsIG5vdCB0byBjYXVzZSBhbnkKICAgICAgICAgICAgICAgICAgICBpcnJlbWVkaWFibGUgbWlzY2hpZWYgdGhhdCBJIG5ldmVyIHJldGFsaWF0ZWTigJRmcm9tIHdob20gYW0gSSB0byBzZWVrCiAgICAgICAgICAgICAgICAgICAgcmVkcmVzcyBmb3IgbXkgc3VmZmVyaW5ncz8gSSB0aGluayBpdCBzaG91bGQgYmUgZnJvbSB5b3UgYW5kIGZyb20gdGhlIGxhd3MuIEkKICAgICAgICAgICAgICAgICAgICB0aGluayB0aGF0IHlvdSBzaG91bGQgc2V0IHVwIGEgcHJlY2VkZW50IGZvciBhbGwgdG8gZm9sbG93LCB0aGF0IG5vIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICB3YW50b25seSBhc3NhdWx0cyBhbmQgb3V0cmFnZXMgYW5vdGhlciBzaG91bGQgYmUgcHVuaXNoZWQgYnkgdGhlIHZpY3RpbSBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgaW4gaG90IGJsb29kLCBidXQgbXVzdCBiZSBicm91Z2h0IGludG8geW91ciBjb3VydCwgYmVjYXVzZSBpdCBpcyB5b3Ugd2hvIGNvbmZpcm0KICAgICAgICAgICAgICAgICAgICBhbmQgdXBob2xkIHRoZSBwcm90ZWN0aW9uIGdyYW50ZWQgYnkgdGhlIGxhd3MgdG8gdGhvc2Ugd2hvIGFyZSBpbmp1cmVkLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkKICAgICAgICAgICAgICAgICAgICBleHBlY3QsIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgdGhhdCBzb21lIG9mIHlvdSBhcmUgYW54aW91cyB0byBoZWFyIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIHF1YXJyZWwgYmV0d2VlbiBNZWlkaWFzIGFuZCBteXNlbGY7IGZvciB5b3UgbXVzdCBzdXBwb3NlIHRoYXQgbm8gaHVtYW4gYmVpbmcKICAgICAgICAgICAgICAgICAgICBjb3VsZCB0cmVhdCBhIGZlbGxvdy1jb3VudHJ5bWFuIHdpdGggc3VjaCB2aW9sZW5jZSBhbmQgYnJ1dGFsaXR5LCB1bmxlc3MgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgYSBsb25nIGFjY291bnQgdG8gc2V0dGxlIHdpdGggaGltLiBXZWxsLCBJIGFtIHF1aXRlIHdpbGxpbmcgdG8gZ2l2ZSB5b3UgYQogICAgICAgICAgICAgICAgICAgIGRldGFpbGVkIGFjY291bnQgb2YgdGhpcyBxdWFycmVsIGZyb20gaXRzIGluY2VwdGlvbiwgc28gdGhhdCB5b3UgbWF5IHVuZGVyc3RhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IG9uIHRoaXMgc2NvcmUgdG9vLCBhcyBJIHNoYWxsIHByb3ZlLCBoZSBvd2VzIG1lIHJlcGFyYXRpb24uIFRoZSBuYXJyYXRpdmUKICAgICAgICAgICAgICAgICAgICBzaGFsbCBiZSBicmllZiwgdGhvdWdoIEkgbWF5IHNlZW0gdG8gZ28gYSBsb25nIHdheSBiYWNrIGZvciB0aGUgc3RhcnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBJCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBteSBhY3Rpb24gYWdhaW5zdCBteSBndWFyZGlhbnMgZm9yIHRoZSByZWNvdmVyeSBvZiBteSBwYXRyaW1vbnksIGJlaW5nIGEKICAgICAgICAgICAgICAgICAgICBtZXJlIGxhZCwgbmVpdGhlciBhY3F1YWludGVkIHdpdGggTWVpZGlhcyBub3IgZXZlbiBhd2FyZSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBleGlzdGVuY2XigJR3b3VsZCB0aGF0IEkgd2VyZSBub3QgYWNxdWFpbnRlZCB3aXRoIGhpbQogICAgICAgICAgICAgICAgICAgIG5vdyHigJR3aGVuIG15IHN1aXQgd2FzIGR1ZSB0byBjb21lIG9uIGluIHRocmVlIG9yIGZvdXIgZGF5cywgTWVpZGlhcwogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgYnJvdGhlciBzdWRkZW5seSBidXJzdCBpbnRvIG15IGhvdXNlIGFuZCBjaGFsbGVuZ2VkIG1lIHRvIHRha2Ugb3ZlcgogICAgICAgICAgICAgICAgICAgIHRoZWlyIHRyaWVyYXJjaHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJlZm9yZSB0aGUgc3lzdGVtIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnHN5bW1vcmllc+KAnSB3YXMgaW50cm9kdWNlZCwgdGhlIGxpdHVyZ2llcyBmZWxsIG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGluZGl2aWR1YWxzLiBBIGNpdGl6ZW4gdG8gd2hvbSBvbmUgd2FzIGFzc2lnbmVkIGNvdWxkIGNoYWxsZW5nZSBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIHdob20gaGUgdGhvdWdodCBiZXR0ZXIgYWJsZSB0byBiZWFyIHRoZSBleHBlbnNlLCB0byB1bmRlcnRha2UgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxpdHVyZ3kgb3IgZXhjaGFuZ2UgcHJvcGVydGllcy4gU3VjaCBleGNoYW5nZSB3YXMgY2FsbGVkIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM69z4ThvbfOtM6/z4POuc+CPC9mb3JlaWduPi48L25vdGU+IEl0IHdhcyB0aGUgYnJvdGhlciwKICAgICAgICAgICAgICAgICAgICBUaHJhc3lsb2NodXMsIHdobyBzdWJtaXR0ZWQgaGlzIG5hbWUgYW5kIG1hZGUgdGhlIGNoYWxsZW5nZTsgYnV0IHRoZSByZWFsIGF1dGhvcgogICAgICAgICAgICAgICAgICAgIG9mIGFsbCB0aGVzZSBwcm9jZWVkaW5ncyB3YXMgTWVpZGlhcy4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAzr3PhOG9t860zr/Pg865z4I8L2ZvcmVpZ24+LjwvdHJhbnNsYXRpb24+"
translation['21.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICBmaXJzdCB0aGV5IGZvcmNlZCB0aGUgZG9vcnMgb2YgdGhlIGFwYXJ0bWVudHMsIGFzc3VtaW5nIHRoYXQgdGhlc2UgYmVjYW1lIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgYnkgdGhlIHRlcm1zIG9mIHRoZSBjaGFsbGVuZ2U7IG5leHQgaW4gdGhlIHByZXNlbmNlIG9mIG15IHNpc3Rlciwgd2hvCiAgICAgICAgICAgICAgICAgICAgd2FzIGEgeW91bmcgZ2lybCBzdGlsbCBsaXZpbmcgYXQgaG9tZSwgdGhleSB1c2VkIGZvdWwgbGFuZ3VhZ2Ugc3VjaCBhcyBvbmx5IG1lbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZWlyIHN0YW1wIHdvdWxkIHVzZeKAlG5vdGhpbmcgd291bGQgaW5kdWNlIG1lIHRvIHJlcGVhdCB0byB5b3Ugc29tZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZWlyIGV4cHJlc3Npb25z4oCUYW5kIHRoZXkgdXR0ZXJlZCB1bnJlc3RyYWluZWQgYWJ1c2Ugb2YgbXkgbW90aGVyCiAgICAgICAgICAgICAgICAgICAgYW5kIG15c2VsZiBhbmQgYWxsIG15IGZhbWlseS4gQnV0LCB3aGF0IHdhcyBtb3JlIHNob2NraW5nIHN0aWxsLCBmcm9tIHdvcmRzIHRoZXkKICAgICAgICAgICAgICAgICAgICBwcm9jZWVkZWQgdG8gZGVlZHMsIGFuZCB0aGV5IHdlcmUgZ29pbmcgdG8gZHJvcCB0aGUgbGF3c3VpdHMsIGNsYWltaW5nIHRoZW0gYXMKICAgICAgICAgICAgICAgICAgICB0aGVpciBvd24sIHRvIG9ibGlnZSBteSBndWFyZGlhbnMuIDwvdHJhbnNsYXRpb24+"
translation['21.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyBpcwogICAgICAgICAgICAgICAgICAgIGFuY2llbnQgaGlzdG9yeSwgdGhvdWdoIEkgZXhwZWN0IHNvbWUgb2YgeW91IHJlbWVtYmVyIGl0LCBmb3IgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTMiPkF0aGVuczwvcGxhY2VOYW1lPiBoZWFyZCBvZiB0aGUgY2hhbGxlbmdlIGFuZCBvZiB0aGUgcGxvdAogICAgICAgICAgICAgICAgICAgIHRoZXkgdGhlbiBoYXRjaGVkIGFuZCBvZiB0aGVpciBicnV0YWwgYmVoYXZpb3IuIEFzIGZvciBtZSwgYmVpbmcgcXVpdGUgYWxvbmUgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgd29ybGQgYW5kIGEgbWVyZSBsYWQsIEkgZGlkIG5vdCB3YW50IHRvIGxvc2UgdGhlIHByb3BlcnR5IHRoYXQgd2FzIHN0aWxsIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGhhbmRzIG9mIG15IGd1YXJkaWFucywgYW5kIEkgZXhwZWN0ZWQgdG8gb2J0YWluLCBub3QgdGhlIHRyaWZsZSB0aGF0IEkgd2FzCiAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgYWJsZSB0byByZWNvdmVyLCBidXQgYWxsIHRoYXQgSSBrbmV3IEkgaGFkIGJlZW4gcm9iYmVkIG9mOyBzbyBJIGdhdmUKICAgICAgICAgICAgICAgICAgICB0aGVtIHR3ZW50eSBtaW5hcywgdGhlIHN1bSB3aGljaCB0aGV5IGhhZCBwYWlkIGZvciB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICB0cmllcmFyY2h5IGJ5IGRlcHV0eS4gU3VjaCB3YXMgdGhlIHNjYW5kYWxvdXMgdHJlYXRtZW50IHRoYXQgSSByZWNlaXZlZCBhdCB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhhbmRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5OZXh0IEkgYnJvdWdodCBhbiBhY3Rpb24gYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIE1laWRpYXMgZm9yIHNsYW5kZXIgYW5kIGdhaW5lZCB0aGUgdmVyZGljdCBieSBkZWZhdWx0LCBmb3IgaGUgZGlkIG5vdCBhcHBlYXIuIEhlCiAgICAgICAgICAgICAgICAgICAgaGFkIHB1dCBoaW1zZWxmIGludG8gbXkgcG93ZXIgYnkgZmFpbGluZyB0byBwYXkgdGhlIGZpbmUsIGJ1dCBJIGRpZCBub3QgbGF5CiAgICAgICAgICAgICAgICAgICAgaGFuZHMgb24gaGlzIHByb3BlcnR5LiBJbnN0ZWFkIEkgb2J0YWluZWQgbGVhdmUgdG8gYnJpbmcgYW4gYWN0aW9uIGZvcgogICAgICAgICAgICAgICAgICAgIGVqZWN0bWVudCwgYnV0IHRvIHRoaXMgZGF5IEkgaGF2ZSBuZXZlciBiZWVuIGFibGUgdG8gY29tbWVuY2UgaXQsIHN1Y2ggc2hpZnRzCiAgICAgICAgICAgICAgICAgICAgYW5kIHF1aWJibGVzIGRvZXMgaGUgZmluZCB0byB0aHdhcnQgbWUuIFdoaWxlIEkgdGhpbmsgaXQgbXkgZHV0eSB0byBwcm9jZWVkIHRodXMKICAgICAgICAgICAgICAgICAgICB3aXRoIGNhdXRpb24sIGxlZ2FsbHkgYW5kIGNvbnN0aXR1dGlvbmFsbHksIE1laWRpYXMsIGFzIHlvdSBsZWFybiwgdGhvdWdodCBmaXQKICAgICAgICAgICAgICAgICAgICB0byB0cmVhdCB3aXRoIGJydXRhbCBpbnNvbGVuY2Ugbm90IG9ubHkgbWUgYW5kIG1pbmUsIGJ1dCBhbHNvIG15CiAgICAgICAgICAgICAgICAgICAgZmVsbG93LXRyaWJlc21lbiB0aHJvdWdoIG1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwcm92ZSB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCBvZiB0aGlzLCBwbGVhc2UgY2FsbCBteSB3aXRuZXNzZXMsIHNvIHRoYXQgeW91IG1heSBrbm93IHRoYXQsIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIG9idGFpbmluZyBsZWdhbCByZWRyZXNzIGZvciBteSBmb3JtZXIgaW5qdXJpZXMsIEkgaGF2ZSBhZ2FpbiBiZWVuIGluc3VsdGVkIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHdheSB0aGF0IHlvdSBoYXZlIGhlYXJkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bV2UsCiAgICAgICAgICAgICAgICAgICAgICAgIENhbGxpc3RoZW5lcyBvZiBTcGhldHR1cywgRGlvZ25ldHVzIG9mIFRob3JpY3VzLCBNbmVzaXRoZXVzIG9mIEFsb3BlY2UsIGtub3cKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBEZW1vc3RoZW5lcywgZm9yIHdob20gd2UgYXBwZWFyLCBoYXMgYnJvdWdodCBhbiBhY3Rpb24gZm9yIGVqZWN0bWVudAogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IE1laWRpYXMsIHdobyBpcyBub3cgYWxzbyBiZWluZyBwdWJsaWNseSBwcm9zZWN1dGVkIGJ5IGhpbSwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgZWlnaHQgeWVhcnMgaGF2ZSBub3cgcGFzc2VkIHNpbmNlIHRoYXQgYWN0aW9uLCBhbmQgdGhhdCBNZWlkaWFzIGhhcyBiZWVuIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjYXVzZSBvZiBhbGwgdGhlIGRlbGF5IGJ5IHJlcGVhdGVkIGV4Y3VzZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2NyYXN0aW5hdGlvbnMuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltXZSwKICAgICAgICAgICAgICAgICAgICAgICAgQ2FsbGlzdGhlbmVzIG9mIFNwaGV0dHVzLCBEaW9nbmV0dXMgb2YgVGhvcmljdXMsIE1uZXNpdGhldXMgb2YgQWxvcGVjZSwga25vdwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IERlbW9zdGhlbmVzLCBmb3Igd2hvbSB3ZSBhcHBlYXIsIGhhcyBicm91Z2h0IGFuIGFjdGlvbiBmb3IgZWplY3RtZW50CiAgICAgICAgICAgICAgICAgICAgICAgIGFnYWluc3QgTWVpZGlhcywgd2hvIGlzIG5vdyBhbHNvIGJlaW5nIHB1YmxpY2x5IHByb3NlY3V0ZWQgYnkgaGltLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBlaWdodCB5ZWFycyBoYXZlIG5vdyBwYXNzZWQgc2luY2UgdGhhdCBhY3Rpb24sIGFuZCB0aGF0IE1laWRpYXMgaGFzIGJlZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNhdXNlIG9mIGFsbCB0aGUgZGVsYXkgYnkgcmVwZWF0ZWQgZXhjdXNlcyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgcHJvY3Jhc3RpbmF0aW9ucy5dPC90cmFuc2xhdGlvbj4="
translation['21.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGVhciBub3cgd2hhdAogICAgICAgICAgICAgICAgICAgIGhlIGhhcyBkb25lLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5MyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgb2YgdGhlIGxlZ2FsIGFjdGlvbiBhbmQgb2JzZXJ2ZSBoaXMgaW5zb2xlbnQgYW5kIG92ZXJiZWFyaW5nIGNvbmR1Y3Qgb24KICAgICAgICAgICAgICAgICAgICBlYWNoIG9jY2FzaW9uLiBJbiB0aGF0IGFjdGlvbuKAlEkgbWVhbiB0aGUgb25lIGluIHdoaWNoIEkgb2J0YWluZWQgYQogICAgICAgICAgICAgICAgICAgIHZlcmRpY3QgYWdhaW5zdCBoaW3igJR0aGUgYXJiaXRyYXRvciBhc3NpZ25lZCB0byBtZSB3YXMgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48L3BlcnNOYW1lPiBvZiBQaGFsZXJ1bSwgYSBtYW4gb2Ygc21hbGwgbWVhbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgbm8gZXhwZXJpZW5jZSwgYnV0IGluIG90aGVyIHJlc3BlY3RzIHF1aXRlIGEgZ29vZCBmZWxsb3c7IGJ1dCBoaXMgYXBwb2ludG1lbnQKICAgICAgICAgICAgICAgICAgICBwcm92ZWQgdGhlIHVuaGFwcHkgbWFuJ3MgcnVpbuKAlGEgcnVpbiB1bmRlc2VydmVkLCB1bmp1c3QsIGFuZCBpbiBldmVyeQogICAgICAgICAgICAgICAgICAgIHdheSBzY2FuZGFsb3VzLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+U3RyYXRvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['21.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5TdHJhdG88L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGFjdGluZyBhcyBhcmJpdHJhdG9yLCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBkYXkgYXJyaXZlZCBhbmQgYWxsIHRoZSBsZWdhbCBkZWxheXMgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBleGhhdXN0ZWTigJRjb3VudGVyLXBsZWFzLCBkZW11cnJlcnMsIGFuZCB0aGUgcmVzdCBvZiB0aGVt4oCUYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2FzIG5vdCBhIHRyaWNrIGxlZnQsIGF0IGZpcnN0IGJlZ2dlZCBtZSB0byBhYmFuZG9uIHRoZSBhcmJpdHJhdGlvbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlbiB0byBwb3N0cG9uZSBpdCB0aWxsIHRoZSBuZXh0IGRheSwgYW5kIGF0IHRoZSBsYXN0LCBhcyBJIGNvbnRpbnVlZCB0byByZWZ1c2UKICAgICAgICAgICAgICAgICAgICBhbmQgTWVpZGlhcyBkaWQgbm90IGFwcGVhciBpbiBjb3VydCwgYW5kIGl0IHdhcyBnZXR0aW5nIGxhdGUsIGhlIGdhdmUgaGlzCiAgICAgICAgICAgICAgICAgICAgZGVjaXNpb24gYWdhaW5zdCBoaW0uIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5TdHJhdG88L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['21.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm93IGV2ZW5pbmcgYW5kCiAgICAgICAgICAgICAgICAgICAgZ3Jvd2luZyBkYXJrLiBVcCBjb21lcyB0aGlzIGZlbGxvdyBNZWlkaWFzIHRvIHRoZSBvZmZpY2Ugb2YgdGhlIEFyY2hvbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIGZpbmRzIHRoZW0ganVzdCBsZWF2aW5nIGFuZCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+U3RyYXRvPC9zdXJuYW1lPjwvcGVyc05hbWU+CiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeSBtYWtpbmcgaGlzIHdheSBob21lIGFmdGVyIGhhdmluZyBoYW5kZWQgdG8gdGhlbSBoaXMganVkZ2VtZW50IG9mIGd1aWx0eQogICAgICAgICAgICAgICAgICAgIGJ5IGRlZmF1bHQuIFRoaXMgSSBsZWFybmVkIGZyb20gb25lIG9mIHRoZSBieXN0YW5kZXJzLiBXZWxsLCBhdCBmaXJzdCBoZSBoYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgaW1wdWRlbmNlIHRvIHRyeSBhbmQgcGVyc3VhZGUgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+U3RyYXRvPC9zdXJuYW1lPjwvcGVyc05hbWU+IHRvCiAgICAgICAgICAgICAgICAgICAgcmVwb3J0IGEganVkZ2VtZW50IGZvciB0aGUgZGVmZW5kYW50IGluc3RlYWQgb2Ygb25lIGZvciB0aGUgcGxhaW50aWZmLCBhbmQgaGUKICAgICAgICAgICAgICAgICAgICB3YW50ZWQgdGhlIEFyY2hvbnMgdG8gYWx0ZXIgdGhlIHJlY29yZCBhbmQgb2ZmZXJlZCB0aGVtIGZpZnR5IGRyYWNobWFzLgogICAgICAgICAgICAgICAgICAgICAgICA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+U3RyYXRvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['21.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZmluZGluZyB0aGF0IHRoZXkgcmVzZW50ZWQgdGhlIG9mZmVyCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgaGUgY291bGQgcGVyc3VhZGUgbmVpdGhlciBBcmNob25zIG5vciBhcmJpdHJhdG9yLCBoZSB0aHJlYXRlbmVkIHRoZW0KICAgICAgICAgICAgICAgICAgICBhbmQgYmxhY2tndWFyZGVkIHRoZW0gYW5kIHdlbnQgb2ZmIGFuZOKAlHdoYXQgZG8geW91IHRoaW5rIGhlIGRpZD8gSnVzdAogICAgICAgICAgICAgICAgICAgIG9ic2VydmUgaGlzIG1hbGlnbml0eS4gW0hlIGFwcGVhbGVkIGFnYWluc3QgdGhlIGFyYml0cmF0aW9uIGJ1dCBvbWl0dGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIG9hdGgsIHRodXMgYWxsb3dpbmcgdGhlIHZlcmRpY3QgYWdhaW5zdCBoaW0gdG8gYmUgbWFkZSBhYnNvbHV0ZSwgYW5kIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIHJlY29yZGVkIGFzIHVuc3dvcm4uIFRoZW4sIHdpc2hpbmcgdG8gY29uY2VhbCBoaXMgcmVhbCBvYmplY3QsXSBoZQogICAgICAgICAgICAgICAgICAgIHdhaXRlZCBmb3IgdGhlIGxhc3QgZGF5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkl0IHNlZW1zIHNhZmVzdCB0bwogICAgICAgICAgICAgICAgICAgICAgICBmb2xsb3cgdGhlIHNjaG9saWFzdCBpbiB0aGlzIGRpZmZpY3VsdCBwYXNzYWdlLiBIZSBleHBsYWlucyB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdG9ycyB1bmRlcndlbnQgdGhlaXIgYXVkaXQgaW4gdGhlIGVsZXZlbnRoIG1vbnRoIG9mIHRoZSB5ZWFyLCBpLmUuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoYXJnZWxpb24sIHRob3VnaCBoZSBtYWtlcyB0aGUgb2RkIG1pc3Rha2Ugb2YgY2FsbGluZyBpdCBTY2lyb3Bob3Jpb24uIFRoZQogICAgICAgICAgICAgICAgICAgICAgICBsYXN0IGRheSBvZiB0aGUgbW9udGgsIGNhbGxlZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJTOvc63IM66zrHhvbYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIM694b2zzrE8L2ZvcmVpZ24+LCBiZWxvbmdlZCBwYXJ0bHkgdG8gdGhlIHBhc3NpbmcgbW9udGggYW5kIHBhcnRseSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbmV3LiBTdHJhdG8sIGJlaW5nIG9mZiBoaXMgZ3VhcmQsIGltYWdpbmVkIHRoYXQgdGhlIG1vbnRoIHdhcyBvdmVyIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGl0IHdhcyB0b28gbGF0ZSBmb3IgY29tcGxhaW50cyB0byBiZSBicm91Z2h0IGFnYWluc3QgaGltLjwvbm90ZT4gZm9yIGFwcGVhbAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIGFyYml0cmF0b3JzLCB3aGljaCBmYWxscyBpbiBUaGFyZ2VsaW9uIG9yIFNjaXJvcGhvcmlvbiwgYSBkYXkgb24KICAgICAgICAgICAgICAgICAgICB3aGljaCBzb21lIG9mIHRoZSBhcmJpdHJhdG9ycyB0dXJuZWQgdXAgYnV0IG90aGVycyBkaWQgbm90OyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJTOvc63IM66zrHhvbYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIM694b2zzrE8L2ZvcmVpZ24+LCBiZWxvbmdlZCBwYXJ0bHkgdG8gdGhlIHBhc3NpbmcgbW9udGggYW5kIHBhcnRseSB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbmV3LiBTdHJhdG8sIGJlaW5nIG9mZiBoaXMgZ3VhcmQsIGltYWdpbmVkIHRoYXQgdGhlIG1vbnRoIHdhcyBvdmVyIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIGl0IHdhcyB0b28gbGF0ZSBmb3IgY29tcGxhaW50cyB0byBiZSBicm91Z2h0IGFnYWluc3QgaGltLjwvdHJhbnNsYXRpb24+"
translation['21.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz5oZSBpbmR1Y2VkIHRoZSBwcmVzaWRpbmcgYXJiaXRyYXRvciB0byBwdXQgaXQgdG8gdGhlIHZvdGUKICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byBhbGwgdGhlIGxhd3MsIGJlY2F1c2UgTWVpZGlhcyBoYWQgbm90IGFwcGVuZGVkIHRoZSBuYW1lIG9mIGEgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzcyB0byB0aGUgc3VtbW9uczsgaGUgZGVub3VuY2VzIFN0cmF0byBpbiBoaXMgYWJzZW5jZSBhbmQgaW4gdGhlIGFic2VuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMsIGFuZCBnZXRzIGhpbSBzdHJ1Y2sgb2ZmIHRoZSByb2xsIG9mIGFyYml0cmF0b3JzIGFuZCBkaXNmcmFuY2hpc2VkLgogICAgICAgICAgICAgICAgICAgIEFuZCBzbyBhIGNpdGl6ZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5MyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgTWVpZGlhcyBsb3N0IGhpcyBzdWl0IGJ5IGRlZmF1bHQsIGhhcyBiZWVuIGRlcHJpdmVkIG9mIGFsbCBoaXMgY2l2aWMgcmlnaHRzLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBpcnJldm9jYWJseSBkaXNmcmFuY2hpc2VkOyBhbmQgaXQgaXMgdW5zYWZlIGZvciBoaW0gdG8gYnJpbmcgYW4gYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBNZWlkaWFzIHdoZW4gd3JvbmdlZCwgb3IgdG8gYWN0IGFzIGFyYml0cmF0b3IgZm9yIGhpbSwgb3IgZXZlbiwgaXQKICAgICAgICAgICAgICAgICAgICBzZWVtcywgdG8gd2FsayB0aGUgc2FtZSBzdHJlZXQgd2l0aCBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['21.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz5bTm93IHlvdSBtdXN0IGNvbnNpZGVyIHRoZSB0cmFuc2FjdGlvbiBmcm9tIHRoaXMgcG9pbnQgb2Ygdmlldy4KICAgICAgICAgICAgICAgICAgICBFc3RpbWF0ZSB3aGF0IGxvc3MgTWVpZGlhcyBtdXN0IGhhdmUgc3VmZmVyZWQgYmVmb3JlIGhlIGNvdWxkIHBsYW4gc3VjaCBhIGRpcmUKICAgICAgICAgICAgICAgICAgICByZXZlbmdlIGFnYWluc3QgYSBmZWxsb3ctY2l0aXplbjsgYW5kIGlmIGl0IHdhcyBzb21ldGhpbmcgcmVhbGx5IHRlcnJpYmxlIGFuZAogICAgICAgICAgICAgICAgICAgIG92ZXJ3aGVsbWluZywgaGUgbWF5IGJlIGZvcmdpdmVuLCBidXQgaWYgaXQgd2FzIG5vdGhpbmcgb2YgdGhlIHNvcnQsIG1hcmsgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5zb2xlbnQgYnJ1dGFsaXR5IHdpdGggd2hpY2ggaGUgdHJlYXRzIGFsbCB3aG9tIGhlIGNvbWVzIGFjcm9zcy4gV2VsbCwgd2hhdAogICAgICAgICAgICAgICAgICAgIGxvc3MgaGFzIGhlIHN1ZmZlcmVkPyBIZSB3YXMgY2FzdCwgeW91IHJlcGx5LCBpbiBhIGJpZyBsYXdzdWl0LCBzbyBiaWcgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBsb3N0IGFsbCBoaXMgcHJvcGVydHkuIDwvdHJhbnNsYXRpb24+"
translation['21.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGxhd3N1aXQKICAgICAgICAgICAgICAgICAgICBvbmx5IGludm9sdmVkIGEgdGhvdXNhbmQgZHJhY2htYXMuIFRydWUsIHlvdSB3aWxsIHNheTsgYnV0IHRoZSBnYWxsaW5nIHRoaW5nIGlzCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgbWFkZSB0byBwYXkgdW5mYWlybHksIGFuZCBpdCB3YXMgdGhlIHVuZmFpcm5lc3Mgb2YgaXQgdGhhdCBjYXVzZWQgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgbGV0IHRoZSBkYXkgb2YgcGF5bWVudCBwYXNzIHVubm90aWNlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcywgYXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNjaG9saWFzdCByZW1hcmtzLCBzZWVtcyB0byBiZSBvYnNjdXJlLiBUaGUgcmFua2xpbmcgaW5qdXN0aWNlIHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIG1vcmUgbGlrZWx5IHRvIGtlZXAgaGlzIG1lbW9yeSBhY3RpdmUuPC9ub3RlPiBCdXQgaGUgbm90aWNlZCBoaXMgbWlzdGFrZSB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGRheSwgd2hpY2ggaXMgdGhlIHN0cm9uZ2VzdCBwb3NzaWJsZSBwcm9vZiB0aGF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5TdHJhdG88L3N1cm5hbWU+PC9wZXJzTmFtZT4gaGFkIGRvbmUgaGltIG5vIHdyb25nOyBhbmQgaGUgaGFzIG5vdAogICAgICAgICAgICAgICAgICAgIHlldCBwYWlkIGEgc2luZ2xlIGRyYWNobWEuIEJ1dCBvZiB0aGF0IGxhdGVyLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+U3RyYXRvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['21.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb2YgY291cnNlIGhlIGNvdWxkIGhhdmUgbW92ZWQgZm9yIGEgZnJlc2ggdHJpYWwgb24gdGhlIGdyb3VuZCBvZiBudWxsaXR5LAogICAgICAgICAgICAgICAgICAgIGFuZCBzbyBtYWRlIG1lIHRoZSBvYmplY3Qgb2YgaGlzIGxpdGlnYXRpb24gYXMgYXQgdGhlIGZpcnN0LiBCdXQgbm87IHRoYXQgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IGhpcyBnYW1lLiBUbyBzYXZlIGhpbSBmcm9tIGRlZmVuZGluZyBhIHN1aXQgaW4gd2hpY2ggdGhlIHBlbmFsdHkgd2FzIGZpeGVkCiAgICAgICAgICAgICAgICAgICAgYnkgbGF3IGF0IHRlbiBtaW5hc+KAlHRoZSBzdWl0IGluIHdoaWNoIGhlIG5lZ2xlY3RlZCB0bwogICAgICAgICAgICAgICAgICAgIGFwcHBlYXLigJR0byBzYXZlIGhpbSBmcm9tIHBheWluZyB0aGUgcGVuYWx0eSBpZiBndWlsdHkgb3IgaWYgaW5ub2NlbnQsCiAgICAgICAgICAgICAgICAgICAgYSBjaXRpemVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMzkzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEzOTMiPkF0aGVuczwvcGxhY2VOYW1lPiBtdXN0IG5lZWRzIGJlCiAgICAgICAgICAgICAgICAgICAgZGlzZnJhbmNoaXNlZCwgYW5kIG11c3Qgb2J0YWluIG5laXRoZXIgcGFyZG9uIG5vciByaWdodCBvZiBkZWZlbmNlIG5vciBhbnkgc29ydAogICAgICAgICAgICAgICAgICAgIG9mIGVxdWl0YWJsZSB0cmVhdG1lbnQsIHByaXZpbGVnZXMgZXh0ZW5kZWQgZXZlbiB0byB0aG9zZSB3aG9zZSBndWlsdCBpcwogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm93IHRoYXQgaGUgaGFzIGRpc2ZyYW5jaGlzZWQKICAgICAgICAgICAgICAgICAgICB0aGUgbWFuIGhlIHdhbnRlZCB0bywgYW5kIHlvdSBoYXZlIGluZHVsZ2VkIGhpbSBpbiB0aGlzOyBub3cgdGhhdCBoZSBoYXMgc2F0ZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHNoYW1lbGVzcyB0ZW1wZXIgdGhhdCBwcm9tcHRlZCBoaW0gdG8gdGhpcyBjb3Vyc2UsIGhhcyBoZSBmaW5pc2hlZCB0aGUKICAgICAgICAgICAgICAgICAgICBidXNpbmVzcz8gSGFzIGhlIHBhaWQgdGhlIGZpbmUsIHRvIGVzY2FwZSB3aGljaCBoZSBydWluZWQgdGhlIHBvb3IgZmVsbG93PyBOb3QgYQogICAgICAgICAgICAgICAgICAgIGJyYXNzIGZhcnRoaW5nIG9mIGl0IHRvIHRoaXMgZGF5ISBIZSBzdWJtaXRzIHJhdGhlciB0byBiZSB0aGUgZGVmZW5kYW50IGluIGFuCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIGZvciBlamVjdG1lbnQuIFNvIHRoZSBvbmUgbWFuIGlzIGRpc2ZyYW5jaGlzZWQgYW5kIHJ1aW5lZCBvbiBhIHNpZGUKICAgICAgICAgICAgICAgICAgICBpc3N1ZTsgdGhlIG90aGVyIGlzIHVuc2NhdGhlZCBhbmQgaXMgcGxheWluZyBoYXZvYyB3aXRoIHRoZSBsYXdzLCB0aGUKICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdG9ycywgYW5kIGV2ZXJ5dGhpbmcgZWxzZSB0aGF0IGhlIHBsZWFzZXMuIDwvdHJhbnNsYXRpb24+"
translation['21.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaGUgaGFzIHNlY3VyZWQgdGhlIHZhbGlkaXR5IG9mIHRoZSBhd2FyZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlIGFyYml0cmF0b3IsIHdoaWNoIGhlIG1hbmV1dmVyZWQgdG8gZ2V0IHdpdGhvdXQgc2VydmluZyBhIHN1bW1vbnMsIHdoaWxlIHRoZQogICAgICAgICAgICAgICAgICAgIHN1aXQgd2hpY2ggaGUgbG9zdCB0byBtZSwgd2l0dGluZ2x5IGFuZCBhZnRlciBkdWUgc3VtbW9ucywgdGhpcyBoZSByZW5kZXJzCiAgICAgICAgICAgICAgICAgICAgaW52YWxpZC5dIFlldCBpZiBzdWNoIGlzIHRoZSB2ZW5nZWFuY2UgdGhhdCBoZSBjbGFpbXMgZnJvbSBhcmJpdHJhdG9ycwogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGdpdmVuIGp1ZGdlbWVudCBhZ2FpbnN0IGhpbSBieSBkZWZhdWx0LCB3aGF0IHZlbmdlYW5jZSBvdWdodCB5b3UgdG8KICAgICAgICAgICAgICAgICAgICB3cmVhayBvbiBhIG1hbiB3aG8gb3Blbmx5IGFuZCB3YW50b25seSB0cmFuc2dyZXNzZXMgeW91ciBsYXdzPyBbRm9yIGlmCiAgICAgICAgICAgICAgICAgICAgZGlzZnJhbmNoaXNlbWVudCBhbmQgbG9zcyBvZiBhbGwgbGVnYWwgYW5kIGNpdmlsIHJpZ2h0cyBpcyBhIGZpdHRpbmcgcHVuaXNobWVudAogICAgICAgICAgICAgICAgICAgIGZvciB0aGF0IG90aGVyIG9mZmVuY2UsIGRlYXRoIHNlZW1zIGFuIGluYWRlcXVhdGUgb25lIGZvciB0aGlzIHJlY2tsZXNzCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZS5dIDwvdHJhbnNsYXRpb24+"
translation['21.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0byBwcm92ZSB0aGUgdHJ1dGgKICAgICAgICAgICAgICAgICAgICBvZiBteSBzdGF0ZW1lbnRzLCBwbGVhc2UgY2FsbCB0aGUgd2l0bmVzc2VzLCBhbmQgYWxzbyByZWFkIHRoZSBsYXcgY29uY2VybmluZwogICAgICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdG9ycy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltXZSwgTmljb3N0cmF0dXMgb2YgTXlycmhpbnVzIGFuZCBQaGFuaWFzCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIEFwaGlkbmEsIGtub3cgdGhhdCBEZW1vc3RoZW5lcywgZm9yIHdob20gd2UgYXBwZWFyLCBhbmQgTWVpZGlhcywgd2hvIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIHByb3NlY3V0ZWQgYnkgRGVtb3N0aGVuZXMsIHdoZW4gRGVtb3N0aGVuZXMgYnJvdWdodCBoaXMgYWN0aW9uIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgaGltIGZvciBzbGFuZGVyLCBjaG9zZSA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+U3RyYXRvPC9zdXJuYW1lPjwvcGVyc05hbWU+IGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3I7IGFuZCB3aGVuIHRoZSBzdGF0dXRvcnkgZGF5IGFycml2ZWQsIE1laWRpYXMgZGlkIG5vdCBhcHBlYXIgaW4KICAgICAgICAgICAgICAgICAgICAgICAgY291cnQgYnV0IGFiYW5kb25lZCB0aGUgY2FzZS4gSnVkZ2VtZW50IGhhdmluZyBnb25lIGJ5IGRlZmF1bHQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICBNZWlkaWFzLCB3ZSBrbm93IHRoYXQgTWVpZGlhcyB0cmllZCB0byBpbmR1Y2UgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48L3BlcnNOYW1lPiwgdGhlIGFyYml0cmF0b3IsIGFuZCB1cywgd2hvIHdlcmUgYXQgdGhhdCB0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgIEFyY2hvbnMsIHRvIHJldmVyc2UgdGhlIGp1ZGdlbWVudCBhZ2FpbnN0IGhpbSwgYW5kIGhlIG9mZmVyZWQgdXMgZmlmdHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJhY2htYXMsIGFuZCwgd2hlbiB3ZSByZXNlbnRlZCBoaXMgb2ZmZXIsIGhlIHRocmVhdGVuZWQgdXMgYW5kIHNvIGRlcGFydGVkLgogICAgICAgICAgICAgICAgICAgICAgICBBbHNvIHdlIGtub3cgdGhhdCBvbiB0aGlzIGFjY291bnQgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48L3BlcnNOYW1lPiB3YXMgdmljdGltaXplZCBieSBNZWlkaWFzIGFuZCB3YXMgZGlzZnJhbmNoaXNlZAogICAgICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byBhbGwganVzdGljZS5dPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bV2UsIE5pY29zdHJhdHVzIG9mIE15cnJoaW51cyBhbmQgUGhhbmlhcwogICAgICAgICAgICAgICAgICAgICAgICBvZiBBcGhpZG5hLCBrbm93IHRoYXQgRGVtb3N0aGVuZXMsIGZvciB3aG9tIHdlIGFwcGVhciwgYW5kIE1laWRpYXMsIHdobyBpcwogICAgICAgICAgICAgICAgICAgICAgICBiZWluZyBwcm9zZWN1dGVkIGJ5IERlbW9zdGhlbmVzLCB3aGVuIERlbW9zdGhlbmVzIGJyb3VnaHQgaGlzIGFjdGlvbiBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgIGhpbSBmb3Igc2xhbmRlciwgY2hvc2UgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48L3BlcnNOYW1lPiBhcwogICAgICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdG9yOyBhbmQgd2hlbiB0aGUgc3RhdHV0b3J5IGRheSBhcnJpdmVkLCBNZWlkaWFzIGRpZCBub3QgYXBwZWFyIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdXJ0IGJ1dCBhYmFuZG9uZWQgdGhlIGNhc2UuIEp1ZGdlbWVudCBoYXZpbmcgZ29uZSBieSBkZWZhdWx0IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgTWVpZGlhcywgd2Uga25vdyB0aGF0IE1laWRpYXMgdHJpZWQgdG8gaW5kdWNlIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5TdHJhdG88L3N1cm5hbWU+PHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48L3BlcnNOYW1lPiwgdGhlIGFyYml0cmF0b3IsIGFuZCB1cywgd2hvIHdlcmUgYXQgdGhhdCB0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgIEFyY2hvbnMsIHRvIHJldmVyc2UgdGhlIGp1ZGdlbWVudCBhZ2FpbnN0IGhpbSwgYW5kIGhlIG9mZmVyZWQgdXMgZmlmdHkKICAgICAgICAgICAgICAgICAgICAgICAgZHJhY2htYXMsIGFuZCwgd2hlbiB3ZSByZXNlbnRlZCBoaXMgb2ZmZXIsIGhlIHRocmVhdGVuZWQgdXMgYW5kIHNvIGRlcGFydGVkLgogICAgICAgICAgICAgICAgICAgICAgICBBbHNvIHdlIGtub3cgdGhhdCBvbiB0aGlzIGFjY291bnQgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+U3RyYXRvPC9zdXJuYW1lPjwvcGVyc05hbWU+IHdhcyB2aWN0aW1pemVkIGJ5IE1laWRpYXMgYW5kIHdhcyBkaXNmcmFuY2hpc2VkCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYXJ5IHRvIGFsbCBqdXN0aWNlLl08c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+U3RyYXRvPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['21.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBhbHNvIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdyBjb25jZXJuaW5nIGFyYml0cmF0b3JzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W0lmIGFueSBwYXJ0aWVzIGFyZSBpbiBkaXNwdXRlIGNvbmNlcm5pbmcgcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgICAgICBjb250cmFjdHMgYW5kIHdpc2ggdG8gY2hvb3NlIGFueSBhcmJpdHJhdG9yLCBpdCBzaGFsbCBiZSBsYXdmdWwgZm9yIHRoZW0gdG8KICAgICAgICAgICAgICAgICAgICAgICAgY2hvb3NlIHdob21zb2V2ZXIgdGhleSB3aXNoLiBCdXQgd2hlbiB0aGV5IGhhdmUgY2hvc2VuIGJ5IG11dHVhbCBhZ3JlZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXkgc2hhbGwgYWJpZGUgYnkgaGlzIGRlY2lzaW9ucyBhbmQgc2hhbGwgbm90IHRyYW5zZmVyIHRoZSBzYW1lIGNoYXJnZXMKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBoaW0gdG8gYW5vdGhlciBjb3VydCwgYnV0IHRoZSBqdWRnZW1lbnRzIG9mIHRoZSBhcmJpdHJhdG9yIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsLl08L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPltJZiBhbnkgcGFydGllcyBhcmUgaW4gZGlzcHV0ZSBjb25jZXJuaW5nIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICAgICAgY29udHJhY3RzIGFuZCB3aXNoIHRvIGNob29zZSBhbnkgYXJiaXRyYXRvciwgaXQgc2hhbGwgYmUgbGF3ZnVsIGZvciB0aGVtIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGNob29zZSB3aG9tc29ldmVyIHRoZXkgd2lzaC4gQnV0IHdoZW4gdGhleSBoYXZlIGNob3NlbiBieSBtdXR1YWwgYWdyZWVtZW50LAogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IHNoYWxsIGFiaWRlIGJ5IGhpcyBkZWNpc2lvbnMgYW5kIHNoYWxsIG5vdCB0cmFuc2ZlciB0aGUgc2FtZSBjaGFyZ2VzCiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gaGltIHRvIGFub3RoZXIgY291cnQsIGJ1dCB0aGUganVkZ2VtZW50cyBvZiB0aGUgYXJiaXRyYXRvciBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICBmaW5hbC5dPC90cmFuc2xhdGlvbj4="
translation['21.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2FsbCBhbHNvCiAgICAgICAgICAgICAgICAgICAgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48L3BlcnNOYW1lPiwgdGhlIHZpY3RpbSBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgcGVyc2VjdXRpb24sIGZvciBubyBkb3VidCBoZSB3aWxsIGJlIGFsbG93ZWQgdG8gc3RhbmQgdXAgaW4gY291cnQuPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBtYW4sIEF0aGVuaWFucywgaXMgYSBwb29yIG1hbiBwZXJoYXBzLCBidXQKICAgICAgICAgICAgICAgICAgICBjZXJ0YWlubHkgbm90IGEgYmFkIG1hbi4gSGUgd2FzIG9uY2UgYSBjaXRpemVuIGFuZCBzZXJ2ZWQgYXQgdGhlIHByb3BlciBhZ2UgaW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIGNhbXBhaWduczsgaGUgaGFzIGRvbmUgbm90aGluZyByZXByZWhlbnNpYmxlLCB5ZXQgbm93IHRoZXJlIGhlIHN0YW5kcwogICAgICAgICAgICAgICAgICAgIHNpbGVudCwgc3RyaXBwZWQgbm90IG9ubHkgb2YgYWxsIG91ciBjb21tb24gcHJpdmlsZWdlcywgYnV0IGFsc28gb2YgdGhlIHJpZ2h0IHRvCiAgICAgICAgICAgICAgICAgICAgc3BlYWsgb3IgY29tcGxhaW47IGhlIGlzIG5vdCBldmVuIGFsbG93ZWQgdG8gdGVsbCB5b3Ugd2hldGhlciBoZSBoYXMgc3VmZmVyZWQKICAgICAgICAgICAgICAgICAgICBqdXN0bHkgb3IgdW5qdXN0bHkuIDwvdHJhbnNsYXRpb24+"
translation['21.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyBoZSBoYXMgZW5kdXJlZCBhdAogICAgICAgICAgICAgICAgICAgIHRoZSBoYW5kcyBvZiBNZWlkaWFzLCBhbmQgZnJvbSB0aGUgd2VhbHRoIGFuZCBwcmlkZSBvZiBNZWlkaWFzLCBiZWNhdXNlIGhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBpcyBwb29yIGFuZCBmcmllbmRsZXNzIGFuZCBqdXN0IG9uZSBvZiB0aGUgbXVsdGl0dWRlLiBJZiBpbiB2aW9sYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3cyBoZSBoYWQgYWNjZXB0ZWQgdGhlIGZpZnR5IGRyYWNobWFzIGFuZCBjaGFuZ2VkIGhpcyB2ZXJkaWN0IGZyb20gYQogICAgICAgICAgICAgICAgICAgIGNvbmRlbW5hdGlvbiB0byBhbiBhY3F1aXR0YWwsIGhlIHdvdWxkIG5vdyBiZSBhIGZ1bGwgY2l0aXplbiwgdW50b3VjaGVkIGJ5IGhhcm0KICAgICAgICAgICAgICAgICAgICBhbmQgc2hhcmluZyB3aXRoIHRoZSByZXN0IG9mIHVzIGluIG91ciBjb21tb24gcmlnaHRzOyBidXQgYmVjYXVzZSBoZSBkaXNyZWdhcmRlZAogICAgICAgICAgICAgICAgICAgIE1laWRpYXMgaW4gY29tcGFyaXNvbiB3aXRoIGp1c3RpY2UgYW5kIGZlYXJlZCB0aGUgbGF3cyBtb3JlIHRoYW4gaGlzIHRocmVhdHMsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIGhlIGhhcyBtZXQgd2l0aCB0aGlzIGdyZWF0IGFuZCB0ZXJyaWJsZSBtaXNmb3J0dW5lIHRocm91Z2ggdGhlIGFjdCBvZgogICAgICAgICAgICAgICAgICAgIHRoaXMgbWFuLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlbiB0aGlzIHNhbWUgbWFuLCBzbyBjcnVlbCwgc28KICAgICAgICAgICAgICAgICAgICBoZWFydGxlc3MsIHdobyBoYXMgdGFrZW4gc3VjaCBkaXJlIHZlbmdlYW5jZSBmb3IgaGlzIHdyb25nc+KAlHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgb25seSBoaXMgd29yZCBmb3IgdGhlbSwgZm9yIGhlIHJlYWxseSBzdWZmZXJlZCBub25l4oCUd2lsbCB5b3UgYWNxdWl0CiAgICAgICAgICAgICAgICAgICAgaGltIHdoZW4geW91IGhhdmUgZGV0ZWN0ZWQgaGltIGluIGEgd2FudG9uIG91dHJhZ2Ugb24gb25lIG9mIHRoZSBjaXRpemVucz8KICAgICAgICAgICAgICAgICAgICBbSWYgaGUgcmVnYXJkcyBuZWl0aGVyIGZlc3RpdmFscyBub3IgdGVtcGxlcyBub3IgbGF3IG5vciBhbnl0aGluZyBlbHNlLAogICAgICAgICAgICAgICAgICAgIHdpbGwgeW91IG5vdCBjb25kZW1uIGhpbT8gV2lsbCB5b3Ugbm90IG1ha2UgYW4gZXhhbXBsZSBvZiBoaW0/XQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz5JZiBub3QsIHdoYXQgaGF2ZSB5b3UgdG8gc2F5LCBnZW50bGVtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeT8gV2hhdCBmYWlyIGFuZCBob25vcmFibGUgZXhjdXNlLCBpbiBoZWF2ZW4ncyBuYW1lLCBjYW4geW91IGZpbmQgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltPyBJcyBpdCBiZWNhdXNlIGhlIGlzIGEgcnVmZmlhbiBhbmQgYSBibGFja2d1YXJkPyBUaGF0IGlzIHRydWUgZW5vdWdoLCBidXQKICAgICAgICAgICAgICAgICAgICBzdXJlbHksIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzkzIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdXIgZHV0eSBpcyB0bwogICAgICAgICAgICAgICAgICAgIGhhdGUgc3VjaCBjcmVhdHVyZXMsIG5vdCB0byBzY3JlZW4gdGhlbS4gSXMgaXQgYmVjYXVzZSBoZSBpcyB3ZWFsdGh5PyBCdXQgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBmaW5kIHRoYXQgaGlzIHdlYWx0aCB3YXMgdGhlIG1haW4gY2F1c2Ugb2YgaGlzIGluc29sZW5jZSwgc28gdGhhdCB5b3VyIGR1dHkKICAgICAgICAgICAgICAgICAgICBpcyB0byBjdXQgb2ZmIHRoZSByZXNvdXJjZXMgZnJvbSB3aGljaCBoaXMgaW5zb2xlbmNlIHNwcmluZ3MsIHJhdGhlciB0aGFuIHNwYXJlCiAgICAgICAgICAgICAgICAgICAgaGltIGZvciB0aGUgc2FrZSBvZiB0aG9zZSByZXNvdXJjZXM7IGZvciB0byBhbGxvdyBzdWNoIGEgcmVja2xlc3MgYW5kIGFib21pbmFibGUKICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZSB0byBoYXZlIHN1Y2ggd2VhbHRoIGF0IGhpcyBjb21tYW5kIGlzIHRvIHN1cHBseSBoaW0gd2l0aCByZXNvdXJjZXMgdG8KICAgICAgICAgICAgICAgICAgICB1c2UgYWdhaW5zdCB5b3Vyc2VsdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IHBsZWEsIHRoZW4sIGlzCiAgICAgICAgICAgICAgICAgICAgbGVmdD8gUGl0eSwgZm9yc29vdGghIEhlIHdpbGwgZ3JvdXAgaGlzIGNoaWxkcmVuIHJvdW5kIGhpbSBhbmQgd2VlcCBhbmQgYmVnIHlvdQogICAgICAgICAgICAgICAgICAgIHRvIHBhcmRvbiBoaW0gZm9yIHRoZWlyIHNha2VzLiBUaGF0IGlzIGhpcyBsYXN0IG1vdmUuIFtCdXQgSSBuZWVkIG5vdAogICAgICAgICAgICAgICAgICAgIHJlbWluZCB5b3UgdGhhdCBwaXR5IGlzIHRoZSBkdWUgb2YgdGhvc2Ugd2hvIHVuanVzdGx5IHN1ZmZlciBtb3JlIHRoYW4gdGhleSBjYW4KICAgICAgICAgICAgICAgICAgICBlbmR1cmUsIG5vdCBvZiB0aG9zZSB3aG8gYXJlIHBheWluZyB0aGUgcGVuYWx0eSBmb3IgdGhlIG1pc2RlZWRzIHRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGNvbW1pdHRlZC5dIEFuZCB3aG8gY291bGQganVzdGx5IHBpdHkgaGlzIGNoaWxkcmVuLCB3aGVuIGhlIHNlZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIE1laWRpYXMgaGFkIG5vIHBpdHkgZm9yIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5TdHJhdG88L3N1cm5hbWU+PC9wZXJzTmFtZT4ncwogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLCB3aG9zZSBkaXN0cmVzcyBpcyBlbmhhbmNlZCBieSB0aGUgcmVmbGVjdGlvbiB0aGF0IGZvciB0aGVpciBmYXRoZXIncwogICAgICAgICAgICAgICAgICAgIGNhbGFtaXR5IG5vIHJlbGllZiBpcyBwb3NzaWJsZT8gRm9yIGl0IGlzIG5vdCBhIHF1ZXN0aW9uIG9mIHBheWluZyBhIGZpeGVkIGZpbmUKICAgICAgICAgICAgICAgICAgICBhbmQgcmVnYWluaW5nIGhpcyBjaXZpbCByaWdodHM7IGhlIGhhcyBiZWVuIGRpc2ZyYW5jaGlzZWQgYWJzb2x1dGVseSwgYXQgb25lCiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlLCBieSB0aGUgd2FudG9uIHJlc2VudG1lbnQgb2YgTWVpZGlhcy4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlN0cmF0bzwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['21.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+W1dob3NlIGluc29sZW5jZSB0aGVuIHdpbGwgYmUgY2hlY2tlZCwgYW5kIHdobyB3aWxsIGJlIGRlcHJpdmVkIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdlYWx0aCB0aGF0IG1ha2VzIHN1Y2ggb3V0cmFnZXMgcG9zc2libGUsIGlmIHlvdSBhcmUgcHJlcGFyZWQgdG8gcGl0eQogICAgICAgICAgICAgICAgICAgIE1laWRpYXMgYXMgdGhvdWdoIGhlIHdlcmUgYW4gaW5ub2NlbnQgdmljdGltLCB3aGlsZSwgaWYgYSBwb29yIG1hbiwgd2hvIGhhcyBkb25lCiAgICAgICAgICAgICAgICAgICAgbm8gd3JvbmcsIGhhcyB0aHJvdWdoIGhpbSBiZWNvbWUgdW5qdXN0bHkgaW52b2x2ZWQgaW4gdXRtb3N0IHJ1aW4sIHlvdSBmYWlsIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0byBzaGFyZSBpbiBoaXMgaW5kaWduYXRpb24/IEl0IG11c3Qgbm90IGJlLiBObyBvbmUgZGVzZXJ2ZXMgcGl0eSB3aG8gc2hvd3Mgbm8KICAgICAgICAgICAgICAgICAgICBwaXR5OyBubyBvbmUgZGVzZXJ2ZXMgcGFyZG9uIHdobyBncmFudHMgbm8gcGFyZG9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEkgdGhpbmsgdGhhdCBhbGwgbWVuLCBpbiBhbGwgdGhhdCB0aGV5IGRvLCBmZWVsIGJvdW5kIHRvCiAgICAgICAgICAgICAgICAgICAgbWFrZSBhIGNvbnRyaWJ1dGlvbiBvdXQgb2YgdGhlaXIgb3duIHBvY2tldHMgZm9yIHRoZSBiZW5lZml0IG9mIHRoZWlyIG93biBsaWZlLgogICAgICAgICAgICAgICAgICAgIEhlcmUgYW0gSSwgbGV0IHVzIHN1cHBvc2U7IG1vZGVyYXRlIGFuZCBtZXJjaWZ1bCB0b3dhcmRzIGFsbCwgYW5kIGEgYmVuZWZhY3RvcgogICAgICAgICAgICAgICAgICAgIG9mIG1hbnkuIFRvIHN1Y2ggYSBtYW4gYWxsIG1lbiBvdWdodCB0byBtYWtlIGFuIGVxdWl2YWxlbnQgcmV0dXJuLCBpZiBvY2Nhc2lvbgogICAgICAgICAgICAgICAgICAgIG9mZmVycyBvciBuZWVkIGRlbWFuZHMuIEhlcmUgYWdhaW4gaXMgYSB2ZXJ5IGRpZmZlcmVudCBtYW47IHZpb2xlbnQsIHNob3dpbmcgbm8KICAgICAgICAgICAgICAgICAgICBwaXR5IHRvIGhpcyBuZWlnaGJvciwgbm9yIGV2ZW4gdHJlYXRpbmcgaGltIGFzIGEgZmVsbG93LW1hbi4gU3VjaCBhIG1hbiBkZXNlcnZlcwogICAgICAgICAgICAgICAgICAgIHRvIGJlIHBhaWQgaW4gaGlzIG93biBjb2luLiBBbmQgc3VjaCwgTWVpZGlhcywgd2FzIHRoZSBjb250cmlidXRpb24gdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBwYWlkIGZvciB5b3VyIG93biBiZW5lZml0OyBzdWNoIGlzIHRoZSByZXR1cm4gdGhhdCB5b3UgZGVzZXJ2ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBtZXRhcGhvciBvZiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byUz4HOsc69zr/PgjwvZm9yZWlnbj4sIHdoaWNoIG1lYW5zIO+8iDHvvIkgYSBwaWNuaWMsCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iDLvvIkgYSBiZW5lZml0IGNsdWIsIHRvIHdoaWNoIGVhY2ggbWVtYmVyIHBhaWQgYQogICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24sIGFuZCBmcm9tIHdoaWNoIGhlIGNvdWxkIGNsYWltIGhlbHAgaW4gdGltZSBvZiBuZWVkLCBpcwogICAgICAgICAgICAgICAgICAgICAgICByZXBlYXRlZCBtb3JlIGZ1bGx5IGFuZCBjbGVhcmx5IGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMTg0IiB2YWxpZD0ieWVzIj5EZW0uIDIxLjE4NDwvYmlibD4uCiAgICAgICAgICAgICAgICAgICAgICAgIFJldmlzaW9uIG9mIHRoZSBzcGVlY2ggd291bGQgcHJvYmFibHkgaGF2ZSBjYW5jZWxsZWQgdGhpcyBwYXNzYWdlOyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjEwMCIgdmFsaWQ9InllcyI+RGVtLiAyMS4xMDA8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjEwMSIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjEuMTAxPC9iaWJsPiBhcmUgb2JlbGl6ZWQgaW4gUyBhbmQgdHdvIG90aGVyIE1zcy48L25vdGU+XQogICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJTPgc6xzr3Ov8+CPC9mb3JlaWduPiwgd2hpY2ggbWVhbnMg77yIMe+8iSBhIHBpY25pYywKICAgICAgICAgICAgICAgICAgICAgICAg77yIMu+8iSBhIGJlbmVmaXQgY2x1YiwgdG8gd2hpY2ggZWFjaCBtZW1iZXIgcGFpZCBhCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiwgYW5kIGZyb20gd2hpY2ggaGUgY291bGQgY2xhaW0gaGVscCBpbiB0aW1lIG9mIG5lZWQsIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdGVkIG1vcmUgZnVsbHkgYW5kIGNsZWFybHkgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyMS4xODQiIHZhbGlkPSJ5ZXMiPkRlbS4gMjEuMTg0PC9iaWJsPi4KICAgICAgICAgICAgICAgICAgICAgICAgUmV2aXNpb24gb2YgdGhlIHNwZWVjaCB3b3VsZCBwcm9iYWJseSBoYXZlIGNhbmNlbGxlZCB0aGlzIHBhc3NhZ2U7IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMTAwIiB2YWxpZD0ieWVzIj5EZW0uIDIxLjEwMDwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMTAxIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyMS4xMDE8L2JpYmw+IGFyZSBvYmVsaXplZCBpbiBTIGFuZCB0d28gb3RoZXIgTXNzLjwvdHJhbnNsYXRpb24+"
translation['21.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlZm9yZSwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5MyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIHRoaW5rIHRoYXQgZXZlbiBpZiBJCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vIG90aGVyIGNoYXJnZSB0byBicmluZyBhZ2FpbnN0IE1laWRpYXMsIGFuZCBldmVuIGlmIHdoYXQgSSBzaGFsbCBhbGxlZ2UKICAgICAgICAgICAgICAgICAgICBoZXJlYWZ0ZXIgd2VyZSBub3QgbW9yZSBzZXJpb3VzIHRoYW4gd2hhdCBJIGhhdmUgYWxyZWFkeSBzYWlkLCB5b3Ugd291bGQgYmUKICAgICAgICAgICAgICAgICAgICBqdXN0aWZpZWQsIGluIHZpZXcgb2YgbXkgc3RhdGVtZW50cywgaW4gY29uZGVtbmluZyBoaW0gYW5kIGltcG9zaW5nIHRoZSB1dG1vc3QKICAgICAgICAgICAgICAgICAgICBwZW5hbHR5IG9mIHRoZSBsYXcuIFlldCB0aGUgdGFsZSBpcyBub3QgY29tcGxldGUsIGFuZCBJIHRoaW5rIEkgc2hhbGwgbm90IGJlIGF0CiAgICAgICAgICAgICAgICAgICAgYSBsb3NzIHdoYXQgdG8gc2F5IG5leHQsIHNvIGxhdmlzaGx5IGhhcyBoZSBmdXJuaXNoZWQgbWUgd2l0aCBtYXR0ZXIgZm9yCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudC4gPC90cmFuc2xhdGlvbj4="
translation['21.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+SG93IGhlIHRydW1wZWQgdXAgYSBjaGFyZ2Ugb2YKICAgICAgICAgICAgICAgICAgICBkZXNlcnRpb24gYWdhaW5zdCBtZSBhbmQgYnJpYmVkIGFub3RoZXIgdG8gYnJpbmcgdGhlIGFjdGlvbuKAlGEKICAgICAgICAgICAgICAgICAgICBzY291bmRyZWwgcmVhZHkgZm9yIGFueSBkaXJ0eSBqb2IsIHRoZSBmaWx0aHkgRXVjdGVtb27igJR0aGF0IEkgc2hhbGwKICAgICAgICAgICAgICAgICAgICBwYXNzIG92ZXI7IGZvciB0aGF0IGJsYWNrbWFpbGVyIG5ldmVyIG1vdmVkIGZvciBhIHRyaWFsLCBub3IgaGFkIE1laWRpYXMgaGlyZWQKICAgICAgICAgICAgICAgICAgICBoaW0gZm9yIGFueSBvdGhlciBwdXJwb3NlIHRoYW4gdG8gaGF2ZSB0aGlzIG5vdGljZSBwb3N0ZWQgdXAgYmVmb3JlIHRoZSBUcmliYWwKICAgICAgICAgICAgICAgICAgICBIZXJvZXMgZm9yIGFsbCBtZW4gdG8gcmVhZCwg4oCcRXVjdGVtb24gb2YgdGhlIEx1c2lhbiBkZW1lIGhhcyBpbmRpY3RlZAogICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzIG9mIHRoZSBQYWVhbmlhbiBkZW1lIGZvciBkZXNlcnRpb24gb2YgaGlzIHBvc3Qu4oCdIEluZGVlZCBJCiAgICAgICAgICAgICAgICAgICAgdGhpbmsgaGUgd291bGQgaGF2ZSBiZWVuIGRlbGlnaHRlZCwgaWYgaXQgaGFkIGJlZW4gaW4gb3JkZXIsIHRvIGFkZCB0aGF0IE1laWRpYXMKICAgICAgICAgICAgICAgICAgICBoYWQgaGlyZWQgaGltIHRvIGluZGljdCBtZS4gQnV0IEkgcGFzcyB0aGF0IG92ZXIsIGJlY2F1c2UgRXVjdGVtb24sIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGRpc2ZyYW5jaGlzZWQgaGltc2VsZiBieSBmYWlsaW5nIHRvIGZvbGxvdyB1cCB0aGUgY2hhcmdlLCBoYXMgZ2l2ZW4gbWUgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHNhdGlzZmFjdGlvbiB0aGF0IEkgcmVxdWlyZS4gPC90cmFuc2xhdGlvbj4="
translation['21.104'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEkgd2lsbCBub3cKICAgICAgICAgICAgICAgICAgICByZWxhdGUgYSBzZXJpb3VzIGFjdCBvZiBjcnVlbHR5IGNvbW1pdHRlZCBieSBoaW0sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoaWNoIEkgYXQgbGVhc3QgcmVnYXJkIGFzIG5vdAogICAgICAgICAgICAgICAgICAgIG1lcmVseSBhIHBlcnNvbmFsIHdyb25nIGJ1dCBhIHB1YmxpYyBzYWNyaWxlZ2UuIEZvciB3aGVuIGEgZ3JhdmUgY3JpbWluYWwgY2hhcmdlCiAgICAgICAgICAgICAgICAgICAgd2FzIGhhbmdpbmcgb3ZlciB0aGF0IHVubHVja3kgd3JldGNoLCBBcmlzdGFyY2h1cywgdGhlIHNvbiBvZiBNb3NjaHVzLCBhdCBmaXJzdCwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIE1laWRpYXMgd2VudCByb3VuZCB0aGUgTWFya2V0LXBsYWNlIGFuZCB2ZW50dXJlZCB0byBzcHJlYWQgaW1waW91cwogICAgICAgICAgICAgICAgICAgIGFuZCBhdHJvY2lvdXMgc3RhdGVtZW50cyBhYm91dCBtZSB0byB0aGUgZWZmZWN0IHRoYXQgSSB3YXMgdGhlIGF1dGhvciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBkZWVkOyBuZXh0LCB3aGVuIHRoaXMgZGV2aWNlIGZhaWxlZCwgaGUgd2VudCB0byB0aGUgcmVsYXRpb25zIG9mIHRoZSBkZWFkIG1hbiwKICAgICAgICAgICAgICAgICAgICB3aG8gd2VyZSBicmluZ2luZyB0aGUgY2hhcmdlIG9mIG11cmRlciBhZ2FpbnN0IEFyaXN0YXJjaHVzLCBhbmQgb2ZmZXJlZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgaWYgdGhleSB3b3VsZCBhY2N1c2UgbWUgb2YgdGhlIGNyaW1lLiBIZSBsZXQgbmVpdGhlciByZWxpZ2lvbiBub3IgcGlldHkKICAgICAgICAgICAgICAgICAgICBub3IgYW55IG90aGVyIGNvbnNpZGVyYXRpb24gc3RhbmQgaW4gdGhlIHdheSBvZiB0aGlzIHdpbGQgcHJvcG9zYWw6IGhlIHNocmFuawogICAgICAgICAgICAgICAgICAgIGZyb20gbm90aGluZy4gPC90cmFuc2xhdGlvbj4="
translation['21.105'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+TmF5LCBoZSB3YXMgbm90IGFzaGFtZWQgdG8gbG9vawogICAgICAgICAgICAgICAgICAgIGV2ZW4gdGhhdCBhdWRpZW5jZSBpbiB0aGUgZmFjZSBhbmQgYnJpbmcgc3VjaCBhIHRlcnJpYmxlIGNhbGFtaXR5IHVwb24gYW4KICAgICAgICAgICAgICAgICAgICBpbm5vY2VudCBtYW47IGJ1dCBoYXZpbmcgc2V0IG9uZSBnb2FsIGJlZm9yZSBoaW0sIHRvIHJ1aW4gbWUgYnkgZXZlcnkgbWVhbnMgaW4KICAgICAgICAgICAgICAgICAgICBoaXMgcG93ZXIsIGhlIHRob3VnaHQgaGltc2VsZiBib3VuZCB0byBsZWF2ZSBubyBzdG9uZSB1bnR1cm5lZCwgYXMgaWYgaXQgd2VyZQogICAgICAgICAgICAgICAgICAgIG9ubHkgcmlnaHQgdGhhdCB3aGVuIGFueSBtYW4sIGhhdmluZyBiZWVuIGluc3VsdGVkIGJ5IGhpbSwgY2xhaW1lZCByZWRyZXNzIGFuZAogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgdG8ga2VlcCBzaWxlbmNlLCBoZSBzaG91bGQgYmUgcmVtb3ZlZCBieSBiYW5pc2htZW50IHdpdGhvdXQgYSBjaGFuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBlc2NhcGUsIHNob3VsZCBldmVuIGZpbmQgaGltc2VsZiBjb252aWN0ZWQgb2YgZGVzZXJ0aW9uLCBzaG91bGQgZGVmZW5kIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICBvbiBhIGNhcGl0YWwgY2hhcmdlLCBhbmQgc2hvdWxkIGJlIGluIGltbWluZW50IGRhbmdlciBvZiBjcnVjaWZpeGlvbi4gWWV0IHdoZW4KICAgICAgICAgICAgICAgICAgICBNZWlkaWFzIGlzIHByb3ZlZCBndWlsdHkgb2YgYWxsIHRoaXMsIGFzIHdlbGwgYXMgb2YgaGlzIGluc3VsdHMgd2hlbiBJIHdhcwogICAgICAgICAgICAgICAgICAgIGNob3J1cy1tYXN0ZXIsIHdoYXQgbGVuaWVuY3ksIHdoYXQgY29tcGFzc2lvbiBzaGFsbCBoZSBkZXNlcnZlIGF0IHlvdXIgaGFuZHM/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.106'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+TXkgb3duIG9waW5pb24sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGlzIHRoYXQgdGhlc2UgYWN0cyBjb25zdGl0dXRlIGhpbQogICAgICAgICAgICAgICAgICAgIG15IG11cmRlcmVyOyB0aGF0IHdoaWxlIGF0IHRoZSBEaW9ueXNpYSBoaXMgb3V0cmFnZXMgd2VyZSBjb25maW5lZCB0byBteQogICAgICAgICAgICAgICAgICAgIGVxdWlwbWVudCwgbXkgcGVyc29uLCBhbmQgbXkgZXhwZW5kaXR1cmUsIGhpcyBzdWJzZXF1ZW50IGNvdXJzZSBvZiBhY3Rpb24gc2hvd3MKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2VyZSBhaW1lZCBhdCBldmVyeXRoaW5nIGVsc2UgdGhhdCBpcyBtaW5lLCBteSBjaXRpemVuc2hpcCwgbXkgZmFtaWx5LAogICAgICAgICAgICAgICAgICAgIG15IHByaXZpbGVnZXMsIG15IGhvcGVzLiBIYWQgYSBzaW5nbGUgb25lIG9mIGhpcyBtYWNoaW5hdGlvbnMgc3VjY2VlZGVkLCBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhhdmUgYmVlbiByb2JiZWQgb2YgYWxsIHRoYXQgSSBoYWQsIGV2ZW4gb2YgdGhlIHJpZ2h0IHRvIGJlIGJ1cmllZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBob21lbGFuZC4gV2hhdCBkb2VzIHRoaXMgbWVhbiwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5PyBJdCBtZWFucyB0aGF0IGlmIHRyZWF0bWVudAogICAgICAgICAgICAgICAgICAgIHN1Y2ggYXMgSSBoYXZlIHN1ZmZlcmVkIGlzIHRvIGJlIHRoZSBmYXRlIG9mIGFueSBtYW4gd2hvIHRyaWVzIHRvIHJpZ2h0IGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICB3aGVuIG91dHJhZ2VkIGJ5IE1laWRpYXMgaW4gZGVmaWFuY2Ugb2YgYWxsIHRoZSBsYXdzLCB0aGVuIGl0IHdpbGwgYmUgYmVzdCBmb3IKICAgICAgICAgICAgICAgICAgICB1cywgYXMgaXMgdGhlIHdheSBhbW9uZyBiYXJiYXJpYW5zLCB0byBncm92ZWwgYXQgdGhlIG9wcHJlc3NvcidzIGZlZXQgYW5kIG1ha2UKICAgICAgICAgICAgICAgICAgICBubyBhdHRlbXB0IGF0IHNlbGYtZGVmZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['21.107'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IG15IHN0YXRlbWVudHMgYXJlIHRydWUgYW5kIHRoYXQgdGhlc2UgdGhpbmdzIGhhdmUgYWN0dWFsbHkgYmVlbiBwZXJwZXRyYXRlZAogICAgICAgICAgICAgICAgICAgIGJ5IHRoaXMgc2hhbWVsZXNzIHJ1ZmZpYW4sIHBsZWFzZSBjYWxsIHRoZSB3aXRuZXNzZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bV2UsCiAgICAgICAgICAgICAgICAgICAgICAgIERpb255c2l1cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFwaGlkbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFwaGlkbmEiPkFwaGlkbmE8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIEFudGlwaGlsdXMgb2YgUGFlYW5pYSwgd2hlbiBvdXIga2luc21hbiBOaWNvZGVtdXMgaGFkIG1ldCB3aXRoIGEgdmlvbGVudAogICAgICAgICAgICAgICAgICAgICAgICBkZWF0aCBhdCB0aGUgaGFuZHMgb2YgQXJpc3RhcmNodXMsIHRoZSBzb24gb2YgTW9zY2h1cywgcHJvc2VjdXRlZAogICAgICAgICAgICAgICAgICAgICAgICBBcmlzdGFyY2h1cyBmb3IgbXVyZGVyLiBMZWFybmluZyB0aGlzLCBNZWlkaWFzLCB3aG8gaXMgbm93IGJlaW5nIGJyb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgdHJpYWwgYnkgRGVtb3N0aGVuZXMsIGZvciB3aG9tIHdlIGFwcGVhciwgb2ZmZXJlZCB1cyBzbWFsbCBzdW1zIG9mIG1vbmV5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBBcmlzdGFyY2h1cyBnbyB1bmhhcm1lZCwgYW5kIHRvIHN1YnN0aXR1dGUgdGhlIG5hbWUgb2YgRGVtb3N0aGVuZXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGluZGljdG1lbnQgZm9yIG11cmRlci5dPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bV2UsCiAgICAgICAgICAgICAgICAgICAgICAgIERpb255c2l1cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFwaGlkbmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFwaGlkbmEiPkFwaGlkbmE8L3BsYWNlTmFtZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIEFudGlwaGlsdXMgb2YgUGFlYW5pYSwgd2hlbiBvdXIga2luc21hbiBOaWNvZGVtdXMgaGFkIG1ldCB3aXRoIGEgdmlvbGVudAogICAgICAgICAgICAgICAgICAgICAgICBkZWF0aCBhdCB0aGUgaGFuZHMgb2YgQXJpc3RhcmNodXMsIHRoZSBzb24gb2YgTW9zY2h1cywgcHJvc2VjdXRlZAogICAgICAgICAgICAgICAgICAgICAgICBBcmlzdGFyY2h1cyBmb3IgbXVyZGVyLiBMZWFybmluZyB0aGlzLCBNZWlkaWFzLCB3aG8gaXMgbm93IGJlaW5nIGJyb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICAgICAgdHJpYWwgYnkgRGVtb3N0aGVuZXMsIGZvciB3aG9tIHdlIGFwcGVhciwgb2ZmZXJlZCB1cyBzbWFsbCBzdW1zIG9mIG1vbmV5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBBcmlzdGFyY2h1cyBnbyB1bmhhcm1lZCwgYW5kIHRvIHN1YnN0aXR1dGUgdGhlIG5hbWUgb2YgRGVtb3N0aGVuZXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGluZGljdG1lbnQgZm9yIG11cmRlci5dPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBsZXQgbWUgaGF2ZSB0aGUgbGF3IGNvbmNlcm5pbmcgYnJpYmVyeS4gPC90cmFuc2xhdGlvbj4="
translation['21.108'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoaWxlIHRoZSBjbGVyayBpcyBmaW5kaW5nIHRoZSBzdGF0dXRlLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIEkgd2lzaCB0byBhZGRyZXNzIGEgZmV3CiAgICAgICAgICAgICAgICAgICAgd29yZHMgdG8geW91LiBJIGFwcGVhbCB0byBhbGwgb2YgeW91IGp1cnltZW4sIGluIHRoZSBuYW1lIG9mIFpldXMgYW5kIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBnb2RzLCB0aGF0IHdoYXRldmVyIHlvdSBoZWFyIGluIGNvdXJ0LCB5b3UgbWF5IGxpc3RlbiB0byBpdCB3aXRoIHRoaXMgaW4geW91cgogICAgICAgICAgICAgICAgICAgIG1pbmRzOiBXaGF0IHdvdWxkIG9uZSBvZiB5b3UgZG8sIGlmIGhlIHdlcmUgdGhlIHZpY3RpbSBvZiB0aGlzIHRyZWF0bWVudCwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hhdCBhbmdlciB3b3VsZCBoZSBmZWVsIG9uIGhpcyBvd24gYWNjb3VudCBhZ2FpbnN0IHRoZSBhdXRob3Igb2YgaXQ/IFNlcmlvdXNseQogICAgICAgICAgICAgICAgICAgIGRpc3RyZXNzZWQgYXMgSSB3YXMgYXQgdGhlIGluc3VsdHMgdGhhdCBJIGVuZHVyZWQgaW4gdGhlIGRpc2NoYXJnZSBvZiBteSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLCBJIGFtIGZhciBtb3JlIHNlcmlvdXNseSBkaXN0cmVzc2VkIGFuZCBpbmRpZ25hbnQgYXQgd2hhdCBlbnN1ZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIHRydXRoLCB3aGF0IGJvdW5kcyBjYW4gYmUgc2V0IHRvCiAgICAgICAgICAgICAgICAgICAgd2lja2VkbmVzcywgYW5kIGhvdyBjYW4gc2hhbWVsZXNzbmVzcywgYnJ1dGFsaXR5IGFuZCBpbnNvbGVuY2UgZ28gZmFydGhlciwgaWYgYQogICAgICAgICAgICAgICAgICAgIG1hbiB3aG8gaGFzIGNvbW1pdHRlZCBncmF2ZS15ZXMsIGdyYXZlIGFuZCByZXBlYXRlZCB3cm9uZ3MgYWdhaW5zdCBhbm90aGVyLAogICAgICAgICAgICAgICAgICAgIGluc3RlYWQgb2YgbWFraW5nIGFtZW5kcyBhbmQgcmVwZW50aW5nIG9mIHRoZSBldmlsLCBzaG91bGQgYWZ0ZXJ3YXJkcyBhZGQgbW9yZQogICAgICAgICAgICAgICAgICAgIHNlcmlvdXMgb3V0cmFnZXMgYW5kIHNob3VsZCBlbXBsb3kgaGlzIHJpY2hlcywgbm90IHRvIGZ1cnRoZXIgaGlzIG93biBpbnRlcmVzdHMKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHByZWp1ZGljZSB0byBvdGhlcnMsIGJ1dCBmb3IgdGhlIG9wcG9zaXRlIHB1cnBvc2Ugb2YgZHJpdmluZyBoaXMgdmljdGltCiAgICAgICAgICAgICAgICAgICAgaW50byBleGlsZSB1bmp1c3RseSBhbmQgY292ZXJpbmcgaGltIHdpdGggaWdub21pbnksIHdoaWxlIGhlIGdsb2F0cyBvdmVyIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBzdXBlcmFidW5kYW5jZSBvZiB3ZWFsdGg/IDwvdHJhbnNsYXRpb24+"
translation['21.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoYXQsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGlzIGp1c3Qgd2hhdCBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIGRvbmUgYnkgTWVpZGlhcy4gSGUgYnJvdWdodCBhZ2FpbnN0IG1lIGEgZmFsc2UgY2hhcmdlIG9mIG11cmRlciwgaW4gd2hpY2gsIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3RzIHByb3ZlZCwgSSB3YXMgaW4gbm8gd2F5IGNvbmNlcm5lZDsgaGUgaW5kaWN0ZWQgbWUgZm9yIGRlc2VydGlvbiwKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgaGltc2VsZiBvbiB0aHJlZSBvY2Nhc2lvbnMgZGVzZXJ0ZWQgaGlzIHBvc3Q7IGFuZCBhcyBmb3IgdGhlIHRyb3VibGVzIGluCiAgICAgICAgICAgICAgICAgICAgRXVib2Vh4oCUd2h5LCBJIG5lYXJseSBmb3Jnb3QgdG8gbWVudGlvbiB0aGVtIS10cm91YmxlcyBmb3Igd2hpY2ggaGlzCiAgICAgICAgICAgICAgICAgICAgYm9zb20tZnJpZW5kIFBsdXRhcmNodXMgd2FzIHJlc3BvbnNpYmxlLCBoZSBjb250cml2ZWQgdG8gaGF2ZSB0aGUgYmxhbWUgbGFpZCBhdAogICAgICAgICAgICAgICAgICAgIG15IGRvb3IsIGJlZm9yZSBpdCBiZWNhbWUgcGxhaW4gdG8gZXZlcnlvbmUgdGhhdCBQbHV0YXJjaHVzIHdhcyBhdCB0aGUgYm90dG9tIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIGJ1c2luZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+TGFzdGx5LCB3aGVuIEkgd2FzIG1hZGUKICAgICAgICAgICAgICAgICAgICBzZW5hdG9yIGJ5IGxvdCwgaGUgZGVub3VuY2VkIG1lIGF0IHRoZSBzY3J1dGlueSwgYW5kIHRoZSBidXNpbmVzcyBwcm92ZWQgYSB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgcmVhbCBkYW5nZXIgZm9yIG1lOyBmb3IgaW5zdGVhZCBvZiBnZXR0aW5nIGNvbXBlbnNhdGlvbiBmb3IgdGhlIGluanVyaWVzIEkgaGFkCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQsIEkgd2FzIGluIGRhbmdlciBvZiBiZWluZyBwdW5pc2hlZCBmb3IgYWN0cyB3aXRoIHdoaWNoIEkgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgY29uY2Vybi4gSGF2aW5nIHN1Y2ggZ3JpZXZhbmNlcyBhbmQgYmVpbmcgcGVyc2VjdXRlZCBpbiB0aGUgd2F5IHRoYXQgSSBoYXZlIGp1c3QKICAgICAgICAgICAgICAgICAgICBkZXNjcmliZWQgdG8geW91LCBidXQgYXQgdGhlIHNhbWUgdGltZSBiZWluZyBuZWl0aGVyIHF1aXRlIGZyaWVuZGxlc3Mgbm9yCiAgICAgICAgICAgICAgICAgICAgZXhhY3RseSBhIHBvb3IgbWFuLCBJIGFtIHVuY2VydGFpbiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hhdCBJIG91Z2h0IHRvIGRvLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yLCBpZiBJIG1heSBhZGQgYSB3b3JkIG9uIHRoaXMgc3ViamVjdCBhbHNvLCB3aGVyZSB0aGUgcmljaCBhcmUgY29uY2VybmVkLAogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucywgdGhlIHJlc3Qgb2YgdXMgaGF2ZSBubyBzaGFyZSBpbiBvdXIganVzdCBhbmQgZXF1YWwgcmlnaHRzLiBJbmRlZWQgd2UKICAgICAgICAgICAgICAgICAgICBoYXZlIG5vdC4gVGhlIHJpY2ggY2FuIGNob29zZSB0aGVpciBvd24gdGltZSBmb3IgZmFjaW5nIGEganVyeSwgYW5kIHRoZWlyIGNyaW1lcwogICAgICAgICAgICAgICAgICAgIGFyZSBzdGFsZSBhbmQgY29sZCB3aGVuIHRoZXkgYXJlIGRpc2hlZCB1cCBiZWZvcmUgeW91LCBidXQgaWYgYW55IG9mIHRoZSByZXN0IG9mCiAgICAgICAgICAgICAgICAgICAgdXMgaXMgaW4gdHJvdWJsZSwgaGUgaXMgYnJvdWdodCBpbnRvIGNvdXJ0IHdoaWxlIGFsbCBpcyBmcmVzaC4gVGhlIHJpY2ggaGF2ZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyBhbmQgY291bnNlbCBpbiByZWFkaW5lc3MsIGFsbCBwcmltZWQgYWdhaW5zdCB1czsgYnV0LCBhcyB5b3Ugc2VlLCBteQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyBhcmUgc29tZSBvZiB0aGVtIHVud2lsbGluZyBldmVuIHRvIGJlYXIgdGVzdGltb255IHRvIHRoZSB0cnV0aC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+T25lIG1pZ2h0IGhhcnAgb24gdGhlc2UgZ3JpZXZhbmNlcyB0aWxsCiAgICAgICAgICAgICAgICAgICAgb25lIHdhcyB3ZWFyeSwgSSBzdXBwb3NlOyBidXQgbm93IHJlY2l0ZSBpbiBmdWxsIHRoZSBsYXcgd2hpY2ggSSBiZWdhbiB0byBxdW90ZS4KICAgICAgICAgICAgICAgICAgICAgICAgUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmCiAgICAgICAgICAgICAgICAgICAgICAgIGFueSBBdGhlbmlhbiBhY2NlcHRzIGEgYnJpYmUgZnJvbSBhbm90aGVyLCBvciBoaW1zZWxmIG9mZmVycyBpdCB0byBhbm90aGVyLAogICAgICAgICAgICAgICAgICAgICAgICBvciBjb3JydXB0cyBhbnlvbmUgYnkgcHJvbWlzZXMsIHRvIHRoZSBkZXRyaW1lbnQgb2YgdGhlIHBlb3BsZSBpbiBnZW5lcmFsLAogICAgICAgICAgICAgICAgICAgICAgICBvciBvZiBhbnkgaW5kaXZpZHVhbCBjaXRpemVuLCBieSBhbnkgbWVhbnMgb3IgZGV2aWNlIHdoYXRzb2V2ZXIsIGhlIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2ZyYW5jaGlzZWQgdG9nZXRoZXIgd2l0aCBoaXMgY2hpbGRyZW4sIGFuZCBoaXMgcHJvcGVydHkgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlzY2F0ZWQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZgogICAgICAgICAgICAgICAgICAgICAgICBhbnkgQXRoZW5pYW4gYWNjZXB0cyBhIGJyaWJlIGZyb20gYW5vdGhlciwgb3IgaGltc2VsZiBvZmZlcnMgaXQgdG8gYW5vdGhlciwKICAgICAgICAgICAgICAgICAgICAgICAgb3IgY29ycnVwdHMgYW55b25lIGJ5IHByb21pc2VzLCB0byB0aGUgZGV0cmltZW50IG9mIHRoZSBwZW9wbGUgaW4gZ2VuZXJhbCwKICAgICAgICAgICAgICAgICAgICAgICAgb3Igb2YgYW55IGluZGl2aWR1YWwgY2l0aXplbiwgYnkgYW55IG1lYW5zIG9yIGRldmljZSB3aGF0c29ldmVyLCBoZSBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICBkaXNmcmFuY2hpc2VkIHRvZ2V0aGVyIHdpdGggaGlzIGNoaWxkcmVuLCBhbmQgaGlzIHByb3BlcnR5IHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGVkLjwvdHJhbnNsYXRpb24+"
translation['21.114'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoaXMgbWFuLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIGlzIHNvIGltcGlvdXMsIHNvIGFiYW5kb25lZCwgc28gcmVhZHkgdG8gc2F5IG9yIGRvIGFueXRoaW5nLCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgc3RvcHBpbmcgZm9yIGEgbW9tZW50IHRvIGFzayB3aGV0aGVyIGl0IGlzIHRydWUgb3IgZmFsc2UsIHdoZXRoZXIgaXQgdG91Y2hlcyBhbgogICAgICAgICAgICAgICAgICAgIGVuZW15IG9yIGEgZnJpZW5kLCBvciBhbnkgc3VjaCBxdWVzdGlvbiwgdGhhdCBhZnRlciBhY2N1c2luZyBtZSBvZiBtdXJkZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgYnJpbmdpbmcgdGhhdCBncmF2ZSBjaGFyZ2UgYWdhaW5zdCBtZSwgaGUgc3VmZmVyZWQgbWUgdG8gY29uZHVjdCBpbml0aWF0b3J5CiAgICAgICAgICAgICAgICAgICAgcml0ZXMgYW5kIHNhY3JpZmljZXMgZm9yIHRoZSBDb3VuY2lsLCBhbmQgdG8gaW5hdWd1cmF0ZSB0aGUgdmljdGltcyBvbiBiZWhhbGYgb2YKICAgICAgICAgICAgICAgICAgICB5b3UgYW5kIGFsbCB0aGUgU3RhdGU7IDwvdHJhbnNsYXRpb24+"
translation['21.115'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTUiIHVuaXQ9InNlY3Rpb24iIC8+aGUgc3VmZmVyZWQgbWUgYXMgaGVhZAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBTYWNyZWQgRW1iYXNzeSB0byBsZWFkIGl0IGluIHRoZSBuYW1lIG9mIHRoZSBjaXR5IHRvIHRoZSBOZW1lYW4gc2hyaW5lIG9mCiAgICAgICAgICAgICAgICAgICAgWmV1czsgaGUgcmFpc2VkIG5vIG9iamVjdGlvbiB3aGVuIEkgd2FzIGNob3NlbiB3aXRoIHR3byBjb2xsZWFndWVzIHRvIGluYXVndXJhdGUKICAgICAgICAgICAgICAgICAgICB0aGUgc2FjcmlmaWNlIHRvIHRoZSBEcmVhZCBHb2RkZXNzZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBFdW1lbmlkZXMg77yIRnVyaWVz77yJLCB3aG9zZSBzYW5jdHVhcnkgd2FzIGEgY2F2ZSB1bmRlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQXJlb3BhZ3VzLjwvbm90ZT4gV291bGQgaGUgaGF2ZSBhbGxvd2VkIGFsbCB0aGlzLCBpZiBoZSBoYWQgaGFkIG9uZSBqb3Qgb3IKICAgICAgICAgICAgICAgICAgICB0aXR0bGUgb2YgcHJvb2YgZm9yIHRoZSBjaGFyZ2VzIHRoYXQgaGUgd2FzIHRydW1waW5nIHVwIGFnYWluc3QgbWU/IEkgY2Fubm90CiAgICAgICAgICAgICAgICAgICAgYmVsaWV2ZSBpdC4gU28gdGhlbiB0aGlzIGlzIGNvbmNsdXNpdmUgcHJvb2YgdGhhdCBoZSB3YXMgc2Vla2luZyBpbiBtZXJlIHdhbnRvbgogICAgICAgICAgICAgICAgICAgIHNwaXRlIHRvIGRyaXZlIG1lIGZyb20gbXkgbmF0aXZlIGxhbmQuIDwvdHJhbnNsYXRpb24+"
translation['21.116'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZW4sIHdoZW4gZm9yIGFsbCBoaXMgZGVzcGVyYXRlIHNoaWZ0cyBoZQogICAgICAgICAgICAgICAgICAgIGNvdWxkIGJyaW5nIG5vbmUgb2YgdGhlc2UgY2hhcmdlcyBob21lIHRvIG1lLCBoZSB0dXJuZWQgaW5mb3JtZXIgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIEFyaXN0YXJjaHVzLCBhaW1pbmcgZXZpZGVudGx5IGF0IG1lLiBUbyBwYXNzIG92ZXIgb3RoZXIgaW5jaWRlbnRzLCB3aGVuIHRoZQogICAgICAgICAgICAgICAgICAgIENvdW5jaWwgd2FzIGluIHNlc3Npb24gYW5kIHdhcyBpbnZlc3RpZ2F0aW5nIHRoZSBtdXJkZXIsIE1laWRpYXMgY2FtZSBpbiBhbmQKICAgICAgICAgICAgICAgICAgICBjcmllZCwg4oCcRG9uJ3QgeW91IGtub3cgdGhlIGZhY3RzIG9mIHRoZSBjYXNlLCBDb3VuY2lsbG9ycz8gQXJlIHlvdQogICAgICAgICAgICAgICAgICAgIHdhc3RpbmcgdGltZSBhbmQgZ3JvcGluZyBibGluZGx5IGZvciB0aGUgbXVyZGVyZXIsIHdoZW4geW91IGhhdmUgaGltIGFscmVhZHkgaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIGhhbmRzP+KAnS1tZWFuaW5nIEFyaXN0YXJjaHVzLiDigJxXb24ndCB5b3UgcHV0IGhpbSB0bwogICAgICAgICAgICAgICAgICAgIGRlYXRoPyBXb24ndCB5b3UgZ28gdG8gaGlzIGhvdXNlIGFuZCBhcnJlc3QgaGltP+KAnSA8L3RyYW5zbGF0aW9uPg=="
translation['21.117'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTciIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIGxhbmd1YWdlIG9mIHRoaXMgc2hhbWVsZXNzIGFuZCBhYmFuZG9uZWQKICAgICAgICAgICAgICAgICAgICByZXB0aWxlLCB0aG91Z2ggb25seSB0aGUgZGF5IGJlZm9yZSBoZSBoYWQgc3RlcHBlZCBvdXQgb2YgQXJpc3RhcmNodXMncyBob3VzZSwKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggdXAgdGlsbCB0aGVuIGhlIGhhZCBiZWVuIGFzIGludGltYXRlIHdpdGggaGltIGFzIGFueW9uZSBjb3VsZCBiZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIEFyaXN0YXJjaHVzIGluIHRoZSBkYXkgb2YgaGlzIHByb3NwZXJpdHkgaGFkIG9mdGVuIGltcG9ydHVuZWQgbWUgdG8KICAgICAgICAgICAgICAgICAgICBzZXR0bGUgbXkgc3VpdCB3aXRoIE1laWRpYXMgb3V0IG9mIGNvdXJ0LiBOb3cgaWYgaGUgc2FpZCB0aGlzIHRvIHRoZSBDb3VuY2lsLAogICAgICAgICAgICAgICAgICAgIGJlbGlldmluZyB0aGF0IEFyaXN0YXJjaHVzIGhhZCBhY3R1YWxseSBjb21taXR0ZWQgdGhlIGNyaW1lIHdoaWNoIGhhcyBzaW5jZQogICAgICAgICAgICAgICAgICAgIHByb3ZlZCBoaXMgcnVpbiwgYW5kIHRydXN0aW5nIHRvIHRoZSB0YWxlIHRvbGQgYnkgaGlzIGFjY3VzZXJzLCB5ZXQgZXZlbiBzbyB0aGUKICAgICAgICAgICAgICAgICAgICBzcGVlY2ggd2FzIHVucGFyZG9uYWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['21.118'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTgiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiBmcmllbmRzLCBpZgogICAgICAgICAgICAgICAgICAgIHRoZXkgc2VlbSB0byBoYXZlIGRvbmUgc29tZXRoaW5nIHNlcmlvdXMsIG9uZSBzaG91bGQgaW1wb3NlIHRoZSBtb2RlcmF0ZSBwZW5hbHR5CiAgICAgICAgICAgICAgICAgICAgb2Ygd2l0aGRyYXdpbmcgZnJvbSB0aGVpciBmcmllbmRzaGlwOyB2ZW5nZWFuY2UgYW5kIHByb3NlY3V0aW9uIHNob3VsZCBiZSBsZWZ0CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlaXIgdmljdGltcyBvciB0aGVpciBlbmVtaWVzLiBZZXQgaW4gYSBtYW4gbGlrZSBNZWlkaWFzIHRoaXMgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgY29uZG9uZWQuIEJ1dCBpZiBpdCBzaGFsbCBhcHBlYXIgdGhhdCBoZSBjaGF0dGVkIGZhbWlsaWFybHkgdW5kZXIgdGhlIHNhbWUgcm9vZgogICAgICAgICAgICAgICAgICAgIHdpdGggQXJpc3RhcmNodXMsIGFzIGlmIGhlIHdlcmUgcGVyZmVjdGx5IGlubm9jZW50LCBhbmQgdGhlbiB1dHRlcmVkIHRob3NlCiAgICAgICAgICAgICAgICAgICAgZGFtbmluZyBjaGFyZ2VzIGFnYWluc3QgaGltIGluIG9yZGVyIHRvIGludm9sdmUgbWUgaW4gYSBmYWxzZSBhY2N1c2F0aW9uLCBkb2VzCiAgICAgICAgICAgICAgICAgICAgaGUgbm90IGRlc2VydmUgdG8gYmUgcHV0IHRvIGRlYXRoIHRlbiB0aW1lc+KAlG5vISB0ZW4gdGhvdXNhbmQgdGltZXMKICAgICAgICAgICAgICAgICAgICBvdmVyPyA8L3RyYW5zbGF0aW9uPg=="
translation['21.119'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTkiIHVuaXQ9InNlY3Rpb24iIC8+SSBhbSBnb2luZyB0byBjYWxsIHRoZSB3aXRuZXNzZXMgbm93CiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBpbiBjb3VydCB0byBwcm92ZSB0aGF0IG15IHZlcnNpb24gb2YgdGhlIGZhY3RzIGlzIGNvcnJlY3Q7IHRoYXQgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgZGF5IGJlZm9yZSBoZSB0b2xkIHRoYXQgdGFsZSB0byB0aGUgQ291bmNpbCwgaGUgaGFkIGVudGVyZWQgQXJpc3RhcmNodXMncyBob3VzZQogICAgICAgICAgICAgICAgICAgIGFuZCBoYWQgYSBjb252ZXJzYXRpb24gd2l0aCBoaW07IHRoYXQgb24gdGhlIG5leHQgZGF5LWFuZCB0aGlzLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGlzIGZvciB2aWxlbmVzcyBpcwogICAgICAgICAgICAgICAgICAgIGltcG9zc2libGUgdG8gYmVhdOKAlGhlIHdlbnQgaW50byBoaXMgaG91c2UgYW5kIHNhdCBhcyBjbG9zZSB0byBoaW0gYXMKICAgICAgICAgICAgICAgICAgICB0aGlzLCBhbmQgcHV0IGhpcyBoYW5kIGluIGhpcywgaW4gdGhlIHByZXNlbmNlIG9mIG1hbnkgd2l0bmVzc2VzLCBhZnRlciB0aGF0CiAgICAgICAgICAgICAgICAgICAgc3BlZWNoIGluIHRoZSBDb3VuY2lsIGluIHdoaWNoIGhlIGhhZCBjYWxsZWQgQXJpc3RhcmNodXMgYSBtdXJkZXJlciBhbmQgc2FpZCB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IHRlcnJpYmxlIHRoaW5ncyBvZiBoaW07IHRoYXQgaGUgaW52b2tlZCB1dHRlciBkZXN0cnVjdGlvbiBvbiBoaW1zZWxmIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIHNhaWQgYSB3b3JkIGluIGhpcyBkaXNwYXJhZ2VtZW50OyB0aGF0IGhlIG5ldmVyIHRob3VnaHQgdHdpY2UgYWJvdXQgaGlzCiAgICAgICAgICAgICAgICAgICAgcGVyanVyeSwgdGhvdWdoIHRoZXJlIHdlcmUgcGVvcGxlIHByZXNlbnQgd2hvIGtuZXcgdGhlIHRydXRoLCBhbmQgaGUgYWN0dWFsbHkKICAgICAgICAgICAgICAgICAgICBiZWdnZWQgaGltIHRvIHVzZSBoaXMgaW5mbHVlbmNlIHRvIGJyaW5nIGFib3V0IGEgcmVjb25jaWxpYXRpb24gd2l0aCBtZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.120'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjAiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCwgQXRoZW5pYW5zLCBtdXN0IHdlIG5vdCBjYWxsIGl0IGEKICAgICAgICAgICAgICAgICAgICBjcmltZSwgb3IgcmF0aGVyIGFuIGltcGlldHksIHRvIHNheSB0aGF0IGEgbWFuIGlzIGEgbXVyZGVyZXIgYW5kIHRoZW4gc3dlYXIgdGhhdAogICAgICAgICAgICAgICAgICAgIG9uZSBoYXMgbmV2ZXIgc2FpZCB0aGlzIHRvIHJlcHJvYWNoIGEgbWFuIHdpdGggbXVyZGVyIGFuZCB0aGVuIHNpdCBpbiB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHJvb20gd2l0aCBoaW0/IEFuZCBpZiBJIGxldCBoaW0gb2ZmIG5vdyBhbmQgc28gc3R1bHRpZnkgeW91ciB2b3RlIG9mCiAgICAgICAgICAgICAgICAgICAgY29uZGVtbmF0aW9uLCBJIGFtIGFuIGlubm9jZW50IG1hbiBhcHBhcmVudGx5OyBidXQgaWYgSSBwcm9jZWVkIHdpdGggbXkgY2FzZSwgSQogICAgICAgICAgICAgICAgICAgIGFtIGEgZGVzZXJ0ZXIsIEkgYW0gYWNjZXNzb3J5IHRvIGEgbXVyZGVyLCBJIGRlc2VydmUgZXh0ZXJtaW5hdGlvbi4gSSBhbSBxdWl0ZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBjb250cmFyeSBvcGluaW9uLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBJZiBJIGhhZCBsZXQgTWVpZGlhcyBvZmYsIHRoZW4gSSBzaG91bGQgaGF2ZSBiZWVuIGEKICAgICAgICAgICAgICAgICAgICBkZXNlcnRlciBmcm9tIHRoZSBjYXVzZSBvZiBqdXN0aWNlLCBhbmQgSSBtaWdodCByZWFzb25hYmx5IGhhdmUgY2hhcmdlZCBteXNlbGYKICAgICAgICAgICAgICAgICAgICB3aXRoIG11cmRlciwgZm9yIGxpZmUgd291bGQgaGF2ZSBiZWVuIGltcG9zc2libGUgZm9yIG1lLCBoYWQgSSBhY3RlZCB0aHVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.121'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBwbGVhc2UgY2FsbCB0aGUgd2l0bmVzc2VzIHRvCiAgICAgICAgICAgICAgICAgICAgYXR0ZXN0IHRoZSB0cnV0aCBvZiB0aGVzZSBzdGF0ZW1lbnRzIGFsc28uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5bV2UsCiAgICAgICAgICAgICAgICAgICAgICAgIEx5c2ltYWNodXMgb2YgQWxvcGVjZSwgRGVtZWFzIG9mIFN1bml1bSwgQ2hhcmVzIG9mIFRob3JpY3VzLCBQaGlsZW1vbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBTcGhldHRhLCBNb3NjaHVzIG9mIFBhZWFuaWEsIGtub3cgdGhhdCBhdCB0aGUgZGF0ZSB3aGVuIHRoZSBpbmRpY3RtZW50IHdhcwogICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50ZWQgdG8gdGhlIENvdW5jaWwgY2hhcmdpbmcgQXJpc3RhcmNodXMsIHRoZSBzb24gb2YgTW9zY2h1cywgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbXVyZGVyIG9mIE5pY29kZW11cywgTWVpZGlhcywgd2hvIGlzIG5vdyBiZWluZyB0cmllZCBhdCB0aGUgc3VpdCBvZgogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcywgZm9yIHdob20gd2UgYXBwZWFyLCBjYW1lIGJlZm9yZSB0aGUgQ291bmNpbCBhbmQgc3RhdGVkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgQXJpc3RhcmNodXMsIGFuZCBubyBvbmUgZWxzZSwgd2FzIHRoZSBtdXJkZXJlciBvZiBOaWNvZGVtdXMsIGFuZCBoZSBhZHZpc2VkCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBDb3VuY2lsIHRvIGdvIHRvIHRoZSBob3VzZSBvZiBBcmlzdGFyY2h1cyBhbmQgYXJyZXN0IGhpbS4gVGhpcyBoZSBzYWlkCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBDb3VuY2lsLCBoYXZpbmcgZGluZWQgb24gdGhlIHByZXZpb3VzIGRheSB3aXRoIEFyaXN0YXJjaHVzIGluIG91cgogICAgICAgICAgICAgICAgICAgICAgICBjb21wYW55LiBXZSBhbHNvIGtub3cgdGhhdCBNZWlkaWFzLCB3aGVuIGhlIGNhbWUgZnJvbSB0aGUgQ291bmNpbCBhZnRlcgogICAgICAgICAgICAgICAgICAgICAgICBtYWtpbmcgdGhpcyBzdGF0ZW1lbnQsIGFnYWluIGVudGVyZWQgdGhlIGhvdXNlIG9mIEFyaXN0YXJjaHVzIGFuZCBzaG9vawogICAgICAgICAgICAgICAgICAgICAgICBoYW5kcyB3aXRoIGhpbSBhbmQsIGludm9raW5nIGRlc3RydWN0aW9uIG9uIGhpcyBvd24gaGVhZCwgc3dvcmUgdGhhdCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICAgICAgc2FpZCBub3RoaW5nIGluIGhpcyBkaXNwYXJhZ2VtZW50IGJlZm9yZSB0aGUgQ291bmNpbCwgYW5kIGhlIGFza2VkCiAgICAgICAgICAgICAgICAgICAgICAgIEFyaXN0YXJjaHVzIHRvIHJlY29uY2lsZSBEZW1vc3RoZW5lcyB0byBoaW0uXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+W1dlLAogICAgICAgICAgICAgICAgICAgICAgICBMeXNpbWFjaHVzIG9mIEFsb3BlY2UsIERlbWVhcyBvZiBTdW5pdW0sIENoYXJlcyBvZiBUaG9yaWN1cywgUGhpbGVtb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgU3BoZXR0YSwgTW9zY2h1cyBvZiBQYWVhbmlhLCBrbm93IHRoYXQgYXQgdGhlIGRhdGUgd2hlbiB0aGUgaW5kaWN0bWVudCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VudGVkIHRvIHRoZSBDb3VuY2lsIGNoYXJnaW5nIEFyaXN0YXJjaHVzLCB0aGUgc29uIG9mIE1vc2NodXMsIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG11cmRlciBvZiBOaWNvZGVtdXMsIE1laWRpYXMsIHdobyBpcyBub3cgYmVpbmcgdHJpZWQgYXQgdGhlIHN1aXQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMsIGZvciB3aG9tIHdlIGFwcGVhciwgY2FtZSBiZWZvcmUgdGhlIENvdW5jaWwgYW5kIHN0YXRlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIEFyaXN0YXJjaHVzLCBhbmQgbm8gb25lIGVsc2UsIHdhcyB0aGUgbXVyZGVyZXIgb2YgTmljb2RlbXVzLCBhbmQgaGUgYWR2aXNlZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQ291bmNpbCB0byBnbyB0byB0aGUgaG91c2Ugb2YgQXJpc3RhcmNodXMgYW5kIGFycmVzdCBoaW0uIFRoaXMgaGUgc2FpZAogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgQ291bmNpbCwgaGF2aW5nIGRpbmVkIG9uIHRoZSBwcmV2aW91cyBkYXkgd2l0aCBBcmlzdGFyY2h1cyBpbiBvdXIKICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFueS4gV2UgYWxzbyBrbm93IHRoYXQgTWVpZGlhcywgd2hlbiBoZSBjYW1lIGZyb20gdGhlIENvdW5jaWwgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgbWFraW5nIHRoaXMgc3RhdGVtZW50LCBhZ2FpbiBlbnRlcmVkIHRoZSBob3VzZSBvZiBBcmlzdGFyY2h1cyBhbmQgc2hvb2sKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZHMgd2l0aCBoaW0gYW5kLCBpbnZva2luZyBkZXN0cnVjdGlvbiBvbiBoaXMgb3duIGhlYWQsIHN3b3JlIHRoYXQgaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgICAgIHNhaWQgbm90aGluZyBpbiBoaXMgZGlzcGFyYWdlbWVudCBiZWZvcmUgdGhlIENvdW5jaWwsIGFuZCBoZSBhc2tlZAogICAgICAgICAgICAgICAgICAgICAgICBBcmlzdGFyY2h1cyB0byByZWNvbmNpbGUgRGVtb3N0aGVuZXMgdG8gaGltLl08L3RyYW5zbGF0aW9uPg=="
translation['21.122'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNhbiBhbnl0aGluZwogICAgICAgICAgICAgICAgICAgIGdvIGJleW9uZCB0aGF0PyBIYXMgdGhlcmUgZXZlciBiZWVuLCBvciBjb3VsZCB0aGVyZSBldmVyIGJlLCBiYXNlbmVzcyB0byBjb21wYXJlCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGlzIG9mIE1laWRpYXM/IEhlIGZlbHQganVzdGlmaWVkIGluIGluZm9ybWluZyBhZ2FpbnN0IHRoYXQgdW5mb3J0dW5hdGUKICAgICAgICAgICAgICAgICAgICBtYW4sIHdobyBoYWQgZG9uZSBoaW0gbm8gd3JvbmfigJRJIHdhaXZlIHRoZSBmYWN0IHRoYXQgaGUgd2FzIGhpcwogICAgICAgICAgICAgICAgICAgIGZyaWVuZOKAlGFuZCBhdCB0aGUgc2FtZSB0aW1lIGhlIHdhcyBiZWdnaW5nIGhpbSB0byBicmluZyBhYm91dCBhCiAgICAgICAgICAgICAgICAgICAgcmVjb25jaWxpYXRpb24gYmV0d2VlbiBoaW1zZWxmIGFuZCBtZTsgYW5kIG5vdCBjb250ZW50IHdpdGggdGhpcywgaGUgc3BlbnQgbW9uZXkKICAgICAgICAgICAgICAgICAgICBvbiBhbiBpbmlxdWl0b3VzIGF0dGVtcHQgdG8gcHJvY3VyZSBteSBiYW5pc2htZW50IGFzIHdlbGwgYXMgdGhhdCBvZgogICAgICAgICAgICAgICAgICAgIEFyaXN0YXJjaHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.123'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllldCB0aGlzIGhhYml0IG9mIGhpcywgQXRoZW5pYW5zLCB0aGlzIHNjaGVtZSBvZiBpbnZvbHZpbmcgaW4geWV0IGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgICBjYWxhbWl0aWVzIGFsbCB3aG8gc3RhbmQgdXAgYWdhaW5zdCBoaW0gaW4ganVzdCBkZWZlbmNlLCBpcyBub3Qgc29tZXRoaW5nIHRoYXQKICAgICAgICAgICAgICAgICAgICBtaWdodCB3ZWxsIHJvdXNlIGluZGlnbmF0aW9uIGFuZCByZXNlbnRtZW50IGluIG1lLCBidXQgdGhhdCB0aGUgcmVzdCBvZiB5b3UKICAgICAgICAgICAgICAgICAgICBzaG91bGQgb3Zlcmxvb2suIEZhciBmcm9tIGl0LiBBbGwgY2l0aXplbnMgYWxpa2Ugc2hvdWxkIGJlIHN0aXJyZWQgdG8gYW5nZXIsCiAgICAgICAgICAgICAgICAgICAgd2hlbiB0aGV5IHJlZmxlY3QgYW5kIG9ic2VydmUgdGhhdCBpdCBpcyBleGFjdGx5IHRoZSBwb29yZXN0IGFuZCB3ZWFrZXN0IG9mIHlvdQogICAgICAgICAgICAgICAgICAgIHRoYXQgcnVuIHRoZSBncmVhdGVzdCByaXNrIG9mIGJlaW5nIHRodXMgd2FudG9ubHkgd3JvbmdlZCwgd2hpbGUgaXQgaXMgdGhlIHJpY2gKICAgICAgICAgICAgICAgICAgICBibGFja2d1YXJkcyB0aGF0IGZpbmQgaXQgZWFzaWVzdCB0byBvcHByZXNzIG90aGVycyBhbmQgZXNjYXBlIHB1bmlzaG1lbnQsIGFuZAogICAgICAgICAgICAgICAgICAgIGV2ZW4gdG8gaGlyZSBhZ2VudHMgdG8gcHV0IG9ic3RhY2xlcyBpbiB0aGUgcGF0aCBvZiBqdXN0aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.124'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjQiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBjb25kdWN0IG11c3Qgbm90IGJlIG92ZXJsb29rZWQuIEl0IG11c3Qgbm90IGJlIHN1cHBvc2VkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgbWFuIHdobyBieSBpbnRpbWlkYXRpb24gdHJpZXMgdG8gZGViYXIgYW55IGNpdGl6ZW4gZnJvbSBvYnRhaW5pbmcKICAgICAgICAgICAgICAgICAgICByZXBhcmF0aW9uIGZvciBoaXMgd3JvbmdzIGlzIGRvaW5nIGxlc3MgdGhhbiByb2JiaW5nIHVzIG9mIG91ciBsaWJlcnRpZXMgYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgb3VyIHJpZ2h0IG9mIGZyZWUgc3BlZWNoLiBQZXJoYXBzIEkgYW5kIG9uZSBvciB0d28gb3RoZXJzIG1heSBoYXZlIG1hbmFnZWQgdG8KICAgICAgICAgICAgICAgICAgICByZXBlbCBhIGZhbHNlIGFuZCBjYWxhbWl0b3VzIGNoYXJnZSBhbmQgc28gaGF2ZSBlc2NhcGVkIGRlc3RydWN0aW9uOyBidXQgd2hhdAogICAgICAgICAgICAgICAgICAgIHdpbGwgdGhlIHZhc3QgbWFqb3JpdHkgb2YgeW91IGRvLCBpZiB5b3UgZG8gbm90IGJ5IGEgcHVibGljIGV4YW1wbGUgbWFrZSBpdCBhCiAgICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzIGdhbWUgZm9yIGFueW9uZSB0byBhYnVzZSBoaXMgd2VhbHRoIGZvciBzdWNoIGEgcHVycG9zZT8gPC90cmFuc2xhdGlvbj4="
translation['21.125'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgYWNjdXNlZCBtYW4gaGFzIHJlbmRlcmVkIGFuIGFjY291bnQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyBhbmQgaGFzIHN0b29kIGhpcyB0cmlhbCBvbiB0aGUgY2hhcmdlcyBicm91Z2h0IGFnYWluc3QgaGltLCB0aGVuIGhlIG1heQogICAgICAgICAgICAgICAgICAgIHJldGFsaWF0ZSB1cG9uIHVuanVzdCBhc3NhaWxhbnRzOyBidXQgZXZlbiB0aGVuIGhlIG11c3Qgbm90IHRyeSB0byBzcGlyaXQgYXdheQogICAgICAgICAgICAgICAgICAgIHNvbWUgd2l0bmVzcyBvZiBoaXMgaWxsIGRlZWRzLCBub3IgdG8gZXNjYXBlIGEgdHJpYWwgYnkgYnJpbmdpbmcgZmFsc2UgY2hhcmdlczsKICAgICAgICAgICAgICAgICAgICBoZSBtdXN0IG5vdCBjb3VudCBpdCBhIGdyaWV2YW5jZSB0byBzdWJtaXQgdG8ganVzdGljZSwgYnV0IG11c3QgYXZvaWQgYWxsCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZW91cyBjb25kdWN0IGZyb20gdGhlIGZpcnN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.126'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHlvdSBoYXZlIG5vdyBoZWFyZCBob3cgbWFueSBvdXRyYWdlcyBJIGVuZHVyZWQsIGJvdGggaW4KICAgICAgICAgICAgICAgICAgICBteSBvd24gcGVyc29uIGFuZCBpbiB0aGUgcGVyZm9ybWFuY2Ugb2YgbXkgcHVibGljIHNlcnZpY2UsIGFuZCBob3cgbWFueSBlc2NhcGVzCiAgICAgICAgICAgICAgICAgICAgSSBoYXZlIGhhZCBmcm9tIHBsb3RzIGFuZCBpbGwtdHJlYXRtZW50IG9mIGV2ZXJ5IGtpbmQuIFlldCBJIGhhdmUgb21pdHRlZCBtdWNoLAogICAgICAgICAgICAgICAgICAgIGZvciBpdCB3YXMgbm90IGVhc3kgcGVyaGFwcyB0byBtZW50aW9uIGV2ZXJ5dGhpbmcuIEJ1dCB0aGUgY2FzZSBpcyB0aGlzLiBCeSBub25lCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGFjdHMgd2FzIEkgYWxvbmUgd3JvbmdlZCwgYnV0IGluIHRoZSB3cm9uZ3MgaW5mbGljdGVkIG9uIHRoZSBjaG9ydXMgbXkKICAgICAgICAgICAgICAgICAgICB3aG9sZSB0cmliZSwgdGhlIHRlbnRoIHBhcnQgb2YgdGhlIGNpdGl6ZW5zLCBzaGFyZWQ7IGJ5IGhpcyBwbG90cyBhbmQgYXR0YWNrcwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgbWUgaGUgd3JvbmdlZCB0aGUgbGF3cywgdG8gd2hpY2ggZWFjaCBvZiB5b3UgbG9va3MgZm9yIHByb3RlY3Rpb247bGFzdGx5CiAgICAgICAgICAgICAgICAgICAgYnkgYWxsIHRoZXNlIGFjdHMgaGUgd3JvbmdlZCB0aGUgZ29kIHRvIHdob3NlIHNlcnZpY2UgSSBoYWQgYmVlbiBkZWRpY2F0ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBkaXZpbmUgYW5kIGF3ZnVsIHBvd2VyIGJleW9uZCBvdXIga2Vu4oCUdGhlIHBvd2VyIG9mIEhvbGluZXNzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.127'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjciIHVuaXQ9InNlY3Rpb24iIC8+VGhvc2Ugd2hvIHdvdWxkIGV4YWN0IGZyb20gaGltIGFuCiAgICAgICAgICAgICAgICAgICAgYWRlcXVhdGUgcHVuaXNobWVudCBmb3IgaGlzIG1pc2RlZWRzIG11c3Qgbm90IGxldCB0aGVpciBpbmRpZ25hdGlvbiBiZSBjaGVja2VkCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHJlZmxlY3Rpb24gdGhhdCBJIGFsb25lIGFtIGNvbmNlcm5lZCwgYnV0IG11c3QgYmFzZSB0aGUgcGVuYWx0eSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBncm91bmQgdGhhdCBhbGwgYWxpa2UgYXJlIHZpY3RpbXMgb2YgdGhlIHNhbWUgd3JvbmfigJR0aGUgbGF3cywgdGhlCiAgICAgICAgICAgICAgICAgICAgZ29kcywgdGhlIGNpdHkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBhbmQgdGhleQogICAgICAgICAgICAgICAgICAgIG11c3QgbG9vayB1cG9uIHRob3NlIHdobyBzdXBwb3J0IGhpbSBhbmQgYXJlIG1hcnNoYWxsZWQgaW4gaGlzIGRlZmVuY2UgYXMKICAgICAgICAgICAgICAgICAgICBzb21ldGhpbmcgbW9yZSB0aGFuIG1lcmUgYWR2b2NhdGVzLCBhcyBtZW4gd2hvIHNldCB0aGUgc2VhbCBvZiB0aGVpciBhcHByb3ZhbCB0bwogICAgICAgICAgICAgICAgICAgIGhpcyBhY3RzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.128'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdwogICAgICAgICAgICAgICAgICAgIGlmLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBNZWlkaWFzIGhhZCBpbgogICAgICAgICAgICAgICAgICAgIG90aGVyIHJlc3BlY3RzIGJlaGF2ZWQgd2l0aCBkZWNlbmN5IGFuZCBtb2RlcmF0aW9uLCBpZiBoZSBoYWQgbmV2ZXIgaW5qdXJlZCBhbnkKICAgICAgICAgICAgICAgICAgICBvdGhlciBjaXRpemVuLCBidXQgaGFkIGNvbmZpbmVkIGhpcyBicnV0YWxpdHkgYW5kIHZpb2xlbmNlIHRvIG1lLCBJIG1pZ2h0LCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCBwbGFjZSwgY29uc2lkZXIgdGhpcyBhIHBpZWNlIG9mIG15IG93biBiYWQgbHVjaywgYW5kLCBpbiB0aGUgc2Vjb25kCiAgICAgICAgICAgICAgICAgICAgcGxhY2UsIEkgc2hvdWxkIGJlIGFmcmFpZCBsZXN0LCBieSBwb2ludGluZyB0byB0aGUgbW9kZXJhdGlvbiBhbmQgaHVtYW5pdHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVzdCBvZiBoaXMgbGlmZSwgaGUgbWlnaHQgc28gZXZhZGUgcHVuaXNobWVudCBmb3IgaGlzIG91dHJhZ2Ugb24gbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.129'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGl0IGlzLCB0aGUgd3JvbmdzIHRoYXQgaGUgaGFzIGRvbmUKICAgICAgICAgICAgICAgICAgICB0byBtYW55IG9mIHlvdSBhcmUgc28gbWFueSBhbmQgc28gZ3JlYXQgdGhhdCBJIGFtIHJlbGlldmVkIG9mIHRoaXMgYXBwcmVoZW5zaW9uOwogICAgICAgICAgICAgICAgICAgIG15IGZlYXIgaXMgbm93LCBvbiB0aGUgY29udHJhcnksIHRoYXQgd2hlbiB5b3UgaGVhciBvZiB0aGUgdGVycmlibGUgd3JvbmdzIHRoYXQKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgaGF2ZSBzdWZmZXJlZCBhdCBoaXMgaGFuZHMsIHNvbWUgc3VjaCBhcmd1bWVudCBhcyB0aGlzIG1heSBvY2N1ciB0byB5b3UuCiAgICAgICAgICAgICAgICAgICAg4oCcV2hhdCBoYXZlIHlvdSB0byBjb21wbGFpbiBvZj8gSGF2ZSB5b3Ugc3VmZmVyZWQgbW9yZSB0aGFuIGVhY2ggb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgdmljdGltcz/igJ0gTm93IGFsbCB0aGF0IGhlIGhhcyBkb25lLCBJIGNvdWxkIG5vdCByZWxhdGUgdG8geW91LAogICAgICAgICAgICAgICAgICAgIG5vciB3b3VsZCB5b3UgaGF2ZSB0aGUgcGF0aWVuY2UgdG8gbGlzdGVuLCBldmVuIGlmIEkgd2VyZSBhbGxvd2VkIGZvciB0aGUgcmVzdAogICAgICAgICAgICAgICAgICAgIG9mIG15IHNwZWVjaCBhbGwgdGhlIHRpbWUgYXNzaWduZWQgdG8gYm90aCBvZiB1czogYWxsIG15IHRpbWUgYW5kIGFsbCBoaXMgaW4KICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbiB3b3VsZCBub3Qgc3VmZmljZS4gSSB3aWxsIGNvbmZpbmUgbXlzZWxmIHRvIHRoZSBtb3N0IGltcG9ydGFudCBhbmQKICAgICAgICAgICAgICAgICAgICBjbGVhcmVzdCBleGFtcGxlcy4gPC90cmFuc2xhdGlvbj4="
translation['21.130'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzAiIHVuaXQ9InNlY3Rpb24iIC8+T3IgcmF0aGVyLCB0aGlzIGlzIHdoYXQgSQogICAgICAgICAgICAgICAgICAgIHByb3Bvc2UgdG8gZG8uIEkgd2lsbCByZWFkIHlvdSBhbGwgbXkgbWVtb3JhbmRhLCBqdXN0IGFzIEkgd3JvdGUgdGhlbSBvdXQgZm9yIG15CiAgICAgICAgICAgICAgICAgICAgb3duIHVzZS4gSSB3aWxsIHRha2UgZmlyc3Qgd2hhdGV2ZXIgaW5jaWRlbnQgeW91IHdvdWxkIGxpa2UgdG8gaGVhciBmaXJzdDsgbmV4dAogICAgICAgICAgICAgICAgICAgIHlvdXIgc2Vjb25kIGNob2ljZSwgYW5kIHNvIG9uLCBhcyBsb25nIGFzIHlvdSBjYXJlIHRvIGxpc3Rlbi4gVGhlcmUgaXMgbm8gbGFjawogICAgICAgICAgICAgICAgICAgIG9mIHZhcmlldHk7IHBsZW50eSBvZiBleGFtcGxlcyBvZiBhc3NhdWx0LCBvZiBraW5zbWVuIHN3aW5kbGVkLCBhbmQgb2YKICAgICAgICAgICAgICAgICAgICBzYWNyaWxlZ2UuIFRoZXJlIGlzIG5vdCBhIHNpbmdsZSBwYXNzYWdlIHdoZXJlIHlvdSB3aWxsIG5vdCBmaW5kIHRoYXQgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgY29tbWl0dGVkIG1hbnkgY3JpbWVzIHdvcnRoeSBvZiBkZWF0aC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJNZW1vcmFuZGEgb2YgdGhlIENyaW1lcyBvZiBNZWlkaWFzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVtb3JhbmRhIG9mIHRoZSBDcmltZXMgb2YgTWVpZGlhczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW1vcmFuZGEgb2YgdGhlIENyaW1lcyBvZiBNZWlkaWFzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.131'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQsCiAgICAgICAgICAgICAgICAgICAgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBpcyBob3cgaGUgaGFzIHRyZWF0ZWQgZXZlcnlvbmUgdGhhdCBjb21lcyBhY3Jvc3MgaGlzCiAgICAgICAgICAgICAgICAgICAgcGF0aC4gSSBoYXZlIG9taXR0ZWQgb3RoZXIgaW5zdGFuY2VzLCBmb3Igbm8gb25lIGNvdWxkIGNvbXByZXNzIGludG8gYSBzaW5nbGUKICAgICAgICAgICAgICAgICAgICBuYXJyYXRpdmUgdGhlIHZpb2xlbnQgYWN0cyB0aGF0IGhlIGhhcyBzcGVudCBhIGxpZmV0aW1lIGluIGNvbW1pdHRpbmcuIEJ1dCBpdCBpcwogICAgICAgICAgICAgICAgICAgIHdvcnRoIHdoaWxlIG5vdGljaW5nIHRvIHdoYXQgYSBoZWlnaHQgb2YgYXVkYWNpdHkgaGUgaGFzIGFkdmFuY2VkIGluIGNvbnNlcXVlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIG5ldmVyIGhhdmluZyBiZWVuIHB1bmlzaGVkIGZvciBhbnkgb2YgdGhlc2UgYWN0cy4gSGUgc2VlbXMgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgdGhhdCBubyBhY3QgdGhhdCBvbmUgbWFuIGNhbiBjb21taXQgYWdhaW5zdCBhbiBpbmRpdmlkdWFsIHdhcyBicmlsbGlhbnQKICAgICAgICAgICAgICAgICAgICBvciBkYXNoaW5nIGVub3VnaCBvciB3b3J0aCByaXNraW5nIGhpcyBsaWZlIGZvciwgYW5kIHVubGVzcyBoZSBjb3VsZCBhZmZyb250IGEKICAgICAgICAgICAgICAgICAgICB3aG9sZSB0cmliZSBvciB0aGUgQ291bmNpbCBvciBzb21lIGNsYXNzIG9mIGNpdGl6ZW5zIGFuZCBoYXJhc3MgdmFzdCBtdWx0aXR1ZGVzCiAgICAgICAgICAgICAgICAgICAgb2YgeW91IGF0IG9uY2UsIGhlIGZlbHQgdGhhdCBsaWZlIHdhcyByZWFsbHkgbm90IHdvcnRoIGxpdmluZy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+4oCcSGUgdGhhdCBraWxscyBtZSBzb21lIHNpeCBvciBzZXZlbiBkb3plbiBvZiBTY290cwogICAgICAgICAgICAgICAgICAgICAgICBhdCBhIGJyZWFrZmFzdCwgd2FzaGVzIGhpcyBoYW5kcywgYW5kIHNheXMgdG8gaGlzIHdpZmUgJ0ZpZSB1cG9uIHRoaXMgcXVpZXQKICAgICAgICAgICAgICAgICAgICAgICAgbGlmZSEgSSB3YW50IHdvcmsuJ+KAnSDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5TaGFrZXNwZWFyZSw8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5IZW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDwvdGl0bGU+LiBQdC4gMS4gMi4gNC4gMTE1PC9iaWJsPu+8iS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+U2hha2VzcGVhcmUsPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVuLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ8L3RpdGxlPi4gUHQuIDEuIDIuIDQuIDExNTwvYmlibD7vvIkuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGVuLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ8L3RpdGxlPi4gUHQuIDEuIDIuIDQuIDExNTwvdHJhbnNsYXRpb24+"
translation['21.132'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGFzIHRvIG90aGVyIGluc3RhbmNlcywgaW5udW1lcmFibGUgYXMKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSwgSSBzYXkgbm90aGluZywgYnV0IGFzIHJlZ2FyZHMgdGhlIGNhdmFscnkgd2hpY2ggd2FzIGRpc3BhdGNoZWQgdG8KICAgICAgICAgICAgICAgICAgICBBcmd1cmEsIGFuZCBvZiB3aGljaCBoZSB3YXMgb25lLCB5b3UgYWxsIGtub3cgb2YgY291cnNlIGhvdyBoZSBoYXJhbmd1ZWQgeW91IG9uCiAgICAgICAgICAgICAgICAgICAgaGlzIHJldHVybiBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2hhbGNpcyI+Q2hhbGNpczwvcGxhY2VOYW1lPiwgYmxhbWluZwogICAgICAgICAgICAgICAgICAgIHRoZSB0cm9vcCBhbmQgc2F5aW5nIHRoYXQgaXRzIGRpc3BhdGNoIHdhcyBhIHNjYW5kYWwgdG8gdGhlIGNpdHkuIEluIGNvbm5lY3Rpb24KICAgICAgICAgICAgICAgICAgICB3aXRoIHRoYXQsIHlvdSByZW1lbWJlciB0b28gdGhlIGFidXNlIHRoYXQgaGUgaGVhcGVkIG9uIENyYXRpbnVzLCB3aG8gaXMsIEkKICAgICAgICAgICAgICAgICAgICB1bmRlcnN0YW5kLCBnb2luZyB0byBzdXBwb3J0IGhpbSBpbiB0aGUgcHJlc2VudCBjYXNlLiBOb3cgaWYgaGUgcHJvdm9rZWQgc3VjaAogICAgICAgICAgICAgICAgICAgIHNlcmlvdXMgYnV0IGdyb3VuZGxlc3MgcXVhcnJlbHMgd2l0aCBzbyBtYW55IGNpdGl6ZW5zIGF0IG9uY2UsIHdoYXQgZGVncmVlIG9mCiAgICAgICAgICAgICAgICAgICAgd2lja2VkbmVzcyBhbmQgcmVja2xlc3NuZXNzIG1heSB3ZSBleHBlY3QgZnJvbSBoaW0gbm93PyA8L3RyYW5zbGF0aW9uPg=="
translation['21.133'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzMiIHVuaXQ9InNlY3Rpb24iIC8+W0J1dCBJIHNob3VsZCBsaWtlIHRvIGFzayB5b3UsIE1laWRpYXMsIHdoaWNoIHdhcwogICAgICAgICAgICAgICAgICAgIHRoZSBncmVhdGVyIHNjYW5kYWwgdG8gdGhlIGNpdHnigJR0aGUgbWVuIHdobyBjcm9zc2VkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2hhbGNpcyI+Q2hhbGNpczwvcGxhY2VOYW1lPiBpbiBkdWUgb3JkZXIsIGFuZCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGVxdWlwbWVudCBwcm9wZXIgdG8gdGhvc2Ugd2hvIHdlcmUgdG8gdGFrZSB0aGUgZmllbGQgYWdhaW5zdCB0aGUgZW5lbXkgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgam9pbiBmb3JjZXMgd2l0aCBvdXIgYWxsaWVzLCBvciB5b3UsIHdobywgd2hlbiBsb3RzIHdlcmUgZHJhd24gZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cGVkaXRpb24sIHByYXllZCB0aGF0IHlvdSBtaWdodCBkcmF3IGEgYmxhbmssIHdobyBuZXZlciBkb25uZWQgeW91ciBjdWlyYXNzLAogICAgICAgICAgICAgICAgICAgIHdobyByb2RlIG9uIGEgc2FkZGxlIHdpdGggc2lsdmVyIHRyYXBwaW5ncywgaW1wb3J0ZWQgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4sIHRha2luZyB3aXRoIHlvdSB5b3VyIHNoYXdscyBhbmQKICAgICAgICAgICAgICAgICAgICBnb2JsZXRzIGFuZCB3aW5lLWphcnMsIHdoaWNoIHdlcmUgY29uZmlzY2F0ZWQgYnkgdGhlIGN1c3RvbXM/IFdlIG9mIHRoZSBpbmZhbnRyeQogICAgICAgICAgICAgICAgICAgIGxlYXJuZWQgdGhpcyBieSByZXBvcnQsIGZvciB3ZSBoYWQgbm90IGNyb3NzZWQgYXQgdGhlIHNhbWUgcG9pbnQgYXMgdGhlIGNhdmFscnkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.134'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZW4sIGJlY2F1c2UgQXJjaGV0aW9uIG9yIHNvbWVvbmUKICAgICAgICAgICAgICAgICAgICBjaGFmZmVkIHlvdSBvbiB0aGUgc3ViamVjdCwgbXVzdCB5b3UgYW5ub3kgdGhlbSBhbGw/XSBJZiB5b3UgZGlkIHdoYXQKICAgICAgICAgICAgICAgICAgICB5b3VyIGZlbGxvdy10cm9vcGVycyBzYXkgeW91IGRpZCwgTWVpZGlhcywgYW5kIHdoYXQgeW91IGNvbXBsYWluIG9mIHRoZW0gZm9yCiAgICAgICAgICAgICAgICAgICAgc2F5aW5nLCB0aGVuIHlvdSBkZXNlcnZlZCB0aGVpciByZXByb2FjaGVzLCBiZWNhdXNlIHlvdSB3ZXJlIGJyaW5naW5nIGhhcm0gYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzZ3JhY2UgYm90aCBvbiB0aGVtIGFuZCBvbiB0aGVzZSBqdXJ5bWVuIGhlcmUgYW5kIG9uIGFsbCB0aGUgY2l0eS4gQnV0IGlmIHlvdQogICAgICAgICAgICAgICAgICAgIGRpZCBub3QgZG8gaXQgYW5kIGl0IHdhcyBhbGwgYSBmYWJyaWNhdGlvbiwgYW5kIGlmIHRoZSByZXN0IG9mIHRoZSBzb2xkaWVycywKICAgICAgICAgICAgICAgICAgICBpbnN0ZWFkIG9mIHJlcHJvdmluZyB0aGUgc2xhbmRlcmVycywgY2h1Y2tsZWQgb3ZlciB5b3UsIGl0IG9ubHkgc2hvd3MgdGhhdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgeW91ciBnZW5lcmFsIG1hbm5lciBvZiBsaWZlIHRoZXkgdGhvdWdodCB0aGF0IHN1Y2ggYSBzdG9yeSBleGFjdGx5IGZpdHRlZCB5b3UuCiAgICAgICAgICAgICAgICAgICAgSXQgd2FzIHlvdXJzZWxmLCB0aGVuLCB0aGF0IHlvdSBvdWdodCB0byBoYXZlIGtlcHQgbW9yZSB1bmRlciBjb250cm9sLCBpbnN0ZWFkCiAgICAgICAgICAgICAgICAgICAgb2YgYWNjdXNpbmcgdGhlIG90aGVycy4gPC90cmFuc2xhdGlvbj4="
translation['21.135'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHlvdSB0aHJlYXRlbiBhbGwsCiAgICAgICAgICAgICAgICAgICAgeW91IGJ1bGx5IGFsbC4gWW91IGluc2lzdCB0aGF0IGV2ZXJ5b25lIGVsc2Ugc2hhbGwgY29uc3VsdCB5b3VyIHdpc2hlczsgeW91IGRvCiAgICAgICAgICAgICAgICAgICAgbm90IHlvdXIgc2VsZiBjb25zdWx0IGhvdyB0byBhdm9pZCBhbm5veWluZyBvdGhlcnMuIFllcywgYW5kIHdoYXQgc2VlbXMgdG8gbWUKICAgICAgICAgICAgICAgICAgICB0aGUgbW9zdCBkYW1uaW5nIHByb29mIG9mIHlvdXIgYXVkYWNpdHkgaXMgdGhpczogeW91IGNvbWUgZm9yd2FyZCwgeW91IHNoYW1lbGVzcwogICAgICAgICAgICAgICAgICAgIHJ1ZmZpYW4sIGFuZCBpbmNsdWRlIGFsbCB0aGVzZSBtZW4gaW4gb25lIHN3ZWVwaW5nIGFjY3VzYXRpb24uIEFueW9uZSBlbHNlIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzaHVkZGVyZWQgYXQgdGhlIHRob3VnaHQgb2YgZG9pbmcgc3VjaCBhIHRoaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.136'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgb2JzZXJ2ZSwgZ2VudGxlbWVuLCB0aGF0IGluCiAgICAgICAgICAgICAgICAgICAgYWxsIG90aGVyIHRyaWFscyB0aGUgZGVmZW5kYW50cyBhcmUgY2hhcmdlZCB3aXRoIG9uZSBvciB0d28gb2ZmZW5jZXMgb25seSwgYnV0CiAgICAgICAgICAgICAgICAgICAgdGhleSBjYW4gcmVseSBvbiBhbnkgbnVtYmVyIG9mIGFwcGVhbHMsIHN1Y2ggYXMgdGhlc2U6IOKAnERvZXMgYW55b25lIGluCiAgICAgICAgICAgICAgICAgICAgY291cnQga25vdyBtZSB0byBiZSBjYXBhYmxlIG9mIHRoaXM/IFdobyBhbW9uZyB5b3UgaGFzIGV2ZXIgc2VlbiBtZSBjb21taXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBvZmZlbmNlcz8gTm8gb25lLiBUaGUgcGxhaW50aWZmcyBhcmUgbGliZWxsaW5nIG1lIG91dCBvZiBzcGl0ZS4gSSBhbSB0aGUgdmljdGltCiAgICAgICAgICAgICAgICAgICAgb2YgZmFsc2UgdGVzdGltb255LOKAnSBhbmQgc28gb24uIEJ1dCB3aXRoIE1laWRpYXMgdGhlIGNhc2UgaXMganVzdCB0aGUKICAgICAgICAgICAgICAgICAgICByZXZlcnNlOyA8L3RyYW5zbGF0aW9uPg=="
translation['21.137'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzciIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIEkgc3VwcG9zZSB5b3UgYWxsIGtub3cgaGlzIHdheQogICAgICAgICAgICAgICAgICAgIG9mIGxpZmUsIGhpcyBhcnJvZ2FuY2UgYW5kIGhpcyBzdXBlcmNpbGlvdXNuZXNzLCBhbmQgSSBldmVuIHN1c3BlY3QgdGhhdCBzb21lCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBsb25nIG1hcnZlbGxlZCBhdCB0aGluZ3Mgd2hpY2ggdGhleSBrbm93IHRoZW1zZWx2ZXMsIGJ1dCBoYXZlIG5vdCBoZWFyZAogICAgICAgICAgICAgICAgICAgIGZyb20gbXkgbGlwcyB0b2RheS4gQnV0IEkgbm90ZSB0aGF0IG1hbnkgb2YgaGlzIHZpY3RpbXMgYXJlIHJlbHVjdGFudCB0bwogICAgICAgICAgICAgICAgICAgIGRpc2Nsb3NlIGluIGV2aWRlbmNlIGFsbCB0aGF0IHRoZXkgaGF2ZSBzdWZmZXJlZCwgYmVjYXVzZSB0aGV5IHJlYWxpemUgaGlzCiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2UgYW5kIGhpcyBwZXJzaXN0ZW5jZSBhbmQgdGhlIGV4dGVudCBvZiB0aG9zZSByZXNvdXJjZXMgd2hpY2ggbWFrZSBoaW0gc28KICAgICAgICAgICAgICAgICAgICBwb3dlcmZ1bCBhbmQgc28gZHJlYWRlZCwgZGVzcGljYWJsZSB0aG91Z2ggaGUgaXMuIDwvdHJhbnNsYXRpb24+"
translation['21.138'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzgiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGEgbWFuIHdob3NlIHdpY2tlZG5lc3MgYW5kIHZpb2xlbmNlIGFyZSBzdXBwb3J0ZWQgYnkKICAgICAgICAgICAgICAgICAgICBwb3dlciBhbmQgd2VhbHRoIGlzIGZvcnRpZmllZCBhZ2FpbnN0IGFueSBzdWRkZW4gYXR0YWNrLiBTbyB0aGlzIGZlbGxvdywgaWYgaGUKICAgICAgICAgICAgICAgICAgICB3ZXJlIGRlcHJpdmVkIG9mIGhpcyBwcm9wZXJ0eSwgd291bGQgcGVyaGFwcyBkaXNjb250aW51ZSBoaXMgb3V0cmFnZXMsIG9yIGlmCiAgICAgICAgICAgICAgICAgICAgbm90LCBoZSB3aWxsIGJlIG9mIGxlc3MgYWNjb3VudCBpbiB5b3VyIGNvdXJ0cyB0aGFuIHRoZSBtb3N0IGluc2lnbmlmaWNhbnQKICAgICAgICAgICAgICAgICAgICBjcmltaW5hbDsgZm9yIHRoZW4gaGUgd2lsbCByYWlsIGFuZCBibHVzdGVyIHRvIGRlYWYgZWFycywgYW5kIGZvciBhbnkgYWN0IG9mCiAgICAgICAgICAgICAgICAgICAgZ3Jvc3MgdmlvbGVuY2UgaGUgd2lsbCBwYXkgdGhlIHBlbmFsdHkgbGlrZSB0aGUgcmVzdCBvZiB1cy4gPC90cmFuc2xhdGlvbj4="
translation['21.139'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdywgSSBiZWxpZXZlLCBoaXMgY2hhbXBpb25zIGFyZSBQb2x5ZXVjdHVzIGFuZAogICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXMgYW5kIHRoZSByYWdhbXVmZmluIEV1Y3RlbW9uLiBTdWNoIGFyZSB0aGUgbWVyY2VuYXJpZXMgdGhhdCBoZSBrZWVwcwogICAgICAgICAgICAgICAgICAgIGFib3V0IGhpbTsgYW5kIHRoZXJlIGFyZSBvdGhlcnMgYmVzaWRlcywgYW4gb3JnYW5pemVkIGdhbmcgb2Ygd2l0bmVzc2VzLCB3aG8gZG8KICAgICAgICAgICAgICAgICAgICBub3Qgb3Blbmx5IGZvcmNlIHRoZW1zZWx2ZXMgdXBvbiB5b3UsIGJ1dCByZWFkaWx5IGdpdmUgYSBzaWxlbnQgbm9kIG9mIGFzc2VudCB0bwogICAgICAgICAgICAgICAgICAgIGhpcyBsaWVzLiBbSSBkbyBub3Qgb2YgY291cnNlIGltYWdpbmUgdGhhdCB0aGV5IG1ha2UgYW55dGhpbmcgb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgaGltLCBidXQgdGhlcmUgYXJlIHNvbWUgcGVvcGxlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aG8gYXJlIHN0cmFuZ2VseSBwcm9uZSB0byBhYmFzZSB0aGVtc2VsdmVzIHRvd2FyZHMgdGhlCiAgICAgICAgICAgICAgICAgICAgd2VhbHRoeSwgdG8gYXR0ZW5kIHVwb24gdGhlbSwgYW5kIHRvIGdpdmUgd2l0bmVzcyBpbiB0aGVpciBmYXZvdXIuXQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.140'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDAiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoaXMsIEkgZXhwZWN0LCBpcyBhbGFybWluZyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdCBvZiB5b3UgYXMgaW5kaXZpZHVhbHMsIGRlcGVuZGluZyBlYWNoIHVwb24gaGlzIG93biByZXNvdXJjZXM7IGFuZCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgd2h5IHlvdSBiYW5kIHlvdXJzZWx2ZXMgdG9nZXRoZXIsIHNvIHRoYXQgd2hlbiB5b3UgZmluZCB5b3Vyc2VsdmVzIGluZGl2aWR1YWxseQogICAgICAgICAgICAgICAgICAgIGluZmVyaW9yIHRvIG90aGVycywgd2hldGhlciBpbiB3ZWFsdGggb3IgaW4gZnJpZW5kcyBvciBpbiBhbnkgb3RoZXIgcmVzcGVjdCwgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IHRvZ2V0aGVyIHByb3ZlIHN0cm9uZ2VyIHRoYW4gYW55IG9uZSBvZiB5b3VyIGVuZW1pZXMgYW5kIHNvIGNoZWNrIGhpcwogICAgICAgICAgICAgICAgICAgIGluc29sZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['21.141'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdywgc29tZSBzdWNoIHJlYWR5IHBsZWEgYXMgdGhpcyB3aWxsIGJlIHN1Ym1pdHRlZCB0byB5b3U6IOKAnFdoeSBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgU28tYW5kLXNvLCB3aG8gc3VmZmVyZWQgdGhpcyBvciB0aGF0IGF0IG15IGhhbmRzLCB0cnkgdG8gb2J0YWluIHJlZHJlc3MgZnJvbQogICAgICAgICAgICAgICAgICAgIG1lPyBPciB3aHkgZGlkIG5vdCBTby1hbmQtc28/4oCd4oCUbmFtaW5nIHBlcmhhcHMgYW5vdGhlciBvZiBoaXMKICAgICAgICAgICAgICAgICAgICB2aWN0aW1zLiBCdXQgSSBleHBlY3QgeW91IGFsbCBrbm93IHRoZSBzdG9jayBleGN1c2VzIGZvciBzaGlya2luZyB0aGUgZHV0eSBvZgogICAgICAgICAgICAgICAgICAgIHNlbGYtZGVmZW5jZeKAlHdhbnQgb2YgbGVpc3VyZSwgYSBkaXN0YXN0ZSBmb3IgYWZmYWlycywgaW5hYmlsaXR5IHRvCiAgICAgICAgICAgICAgICAgICAgc3BlYWssIGxhY2sgb2YgbWVhbnMsIGFuZCBhIHRob3VzYW5kIHN1Y2ggcmVhc29ucy4gPC90cmFuc2xhdGlvbj4="
translation['21.142'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDIiIHVuaXQ9InNlY3Rpb24iIC8+SSBkbyBub3QsIGhvd2V2ZXIsIHRoaW5rIHRoYXQgTWVpZGlhcyBoYXMgYW55IHJpZ2h0IHRvIHVzZQogICAgICAgICAgICAgICAgICAgIHN1Y2ggbGFuZ3VhZ2Ugbm93OyBoaXMgZHV0eSBpcyB0byBwcm92ZSB0aGF0IGhlIGhhcyBub3QgZG9uZSB3aGF0IEkgaGF2ZSBhY2N1c2VkCiAgICAgICAgICAgICAgICAgICAgaGltIG9mIGRvaW5nLCBhbmQgaWYgaGUgY2Fubm90LCB0aGVuIGhlIGRlc2VydmVzIGRlYXRoIGFsbCB0aGUgbW9yZS4gRm9yIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgaXMgc28gcG93ZXJmdWwgdGhhdCBoZSBjYW4gYWN0IGxpa2UgdGhpcyBhbmQgeWV0IHByZXZlbnQgeW91IGluZGl2aWR1YWxseSBmcm9tCiAgICAgICAgICAgICAgICAgICAgb2J0YWluaW5nIHNhdGlzZmFjdGlvbiBmcm9tIGhpbSwgeW91IG91Z2h0IGFsbCBvZiB5b3UsIGluIGNvbW1vbiBhbmQgb24gYmVoYWxmCiAgICAgICAgICAgICAgICAgICAgb2YgYWxsLCBub3cgdGhhdCBoZSBpcyBpbiB5b3VyIGdyYXNwLCB0byBwdW5pc2ggaGltIGFzIHRoZSBjb21tb24gZW5lbXkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['21.143'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhpc3RvcnkKICAgICAgICAgICAgICAgICAgICB0ZWxscyB1cyB0aGF0IEFsY2liaWFkZXMgbGl2ZWQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGluIHRoZSBnb29kIG9sZCBkYXlzIG9mIGhlciBwcm9zcGVyaXR5LCBhbmQgSSB3YW50IHlvdQogICAgICAgICAgICAgICAgICAgIHRvIGNvbnNpZGVyIHdoYXQgZ3JlYXQgcHVibGljIHNlcnZpY2VzIHN0YW5kIHRvIGhpcyBjcmVkaXQgYW5kIGhvdyB5b3VyCiAgICAgICAgICAgICAgICAgICAgYW5jZXN0b3JzIGRlYWx0IHdpdGggaGltIHdoZW4gaGUgdGhvdWdodCBmaXQgdG8gYmVoYXZlIGxpa2UgYSBydWZmaWFuIGFuZCBhCiAgICAgICAgICAgICAgICAgICAgYnVsbHkuIEFuZCBhc3N1cmVkbHkgaXQgaXMgbm90IGZyb20gYW55IGRlc2lyZSB0byBjb21wYXJlIE1laWRpYXMgd2l0aAogICAgICAgICAgICAgICAgICAgIEFsY2liaWFkZXMgdGhhdCBJIG1lbnRpb24gdGhpcyBzdG9yeS4gSSBhbSBub3Qgc28gZm9vbGlzaCBvciBpbmZhdHVhdGVkLiBNeQogICAgICAgICAgICAgICAgICAgIG9iamVjdCwgbWVuIG9mIEF0aGVucywgaXMgdGhhdCB5b3UgbWF5IGtub3cgYW5kIGZlZWwgdGhhdCB0aGVyZSBpcyBub3QsIGFuZAogICAgICAgICAgICAgICAgICAgIG5ldmVyIHdpbGwgYmUsIGFueXRoaW5n4oCUbm90IGJpcnRoLCBub3Qgd2VhbHRoLCBub3QKICAgICAgICAgICAgICAgICAgICBwb3dlcuKAlHRoYXQgeW91LCB0aGUgZ3JlYXQgbWFzcyBvZiBjaXRpemVucywgb3VnaHQgdG8gdG9sZXJhdGUsIGlmIGl0CiAgICAgICAgICAgICAgICAgICAgaXMgY291cGxlZCB3aXRoIGluc29sZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['21.144'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEFsY2liaWFkZXMsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCB3YXMgb24gaGlzIGZhdGhlcidzIHNpZGUgb25lIG9mIHRoZSBBbGNtYWVvbmlkYWUsIHdobyBhcmUgc2FpZCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBiYW5pc2hlZCBieSB0aGUgdHlyYW50cyBiZWNhdXNlIHRoZXkgYmVsb25nZWQgdG8gdGhlIGRlbW9jcmF0aWMKICAgICAgICAgICAgICAgICAgICBmYWN0aW9uLCBhbmQgd2hvLCB3aXRoIG1vbmV5IGJvcnJvd2VkIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxEZWxwaGkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLERlbHBoaSI+RGVscGhpPC9wbGFjZU5hbWU+LCBsaWJlcmF0ZWQgb3VyIGNpdHksIGV4cGVsbGluZyB0aGUgc29ucyBvZiBQZWlzaXN0cmF0dXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIG9uIGhpcyBtb3RoZXIncyBzaWRlIGhlIGNsYWltZWQgZGVzY2VudCBmcm9tIEhpcHBvbmljdXMgYW5kIHRoYXQgZmFtb3VzCiAgICAgICAgICAgICAgICAgICAgaG91c2UgdG8gd2hpY2ggdGhlIHBlb3BsZSBhcmUgaW5kZWJ0ZWQgZm9yIG1hbnkgZW1pbmVudCBzZXJ2aWNlcy4gPC90cmFuc2xhdGlvbj4="
translation['21.145'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXNlIHdlcmUgbm90IGhpcyBvbmx5IGNsYWltcywgZm9yIGhlIGhhZCBhbHNvCiAgICAgICAgICAgICAgICAgICAgdGFrZW4gYXJtcyBpbiB0aGUgY2F1c2Ugb2YgZGVtb2NyYWN5LCB0d2ljZSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjczIj5TYW1vczwvcGxhY2VOYW1lPiBhbmQgYSB0aGlyZCB0aW1lIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpdHNlbGYsIGRpc3BsYXlpbmcgaGlzIHBhdHJpb3Rpc20sIG5vdCBieSBnaWZ0cyBvZiBtb25leQogICAgICAgICAgICAgICAgICAgIG9yIGJ5IHNwZWVjaGVzLCBidXQgYnkgcGVyc29uYWwgc2VydmljZS4gSGUgaGFkIGFsc28gdG8gaGlzIGNyZWRpdCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgT2x5bXBpYW4gY2hhcmlvdC1yYWNlIGFuZCB2aWN0b3JpZXMgdGhlcmUsIGFuZCB3ZSBhcmUgdG9sZCB0aGF0IGhlIHdhcyByZWdhcmRlZAogICAgICAgICAgICAgICAgICAgIGFzIHRoZSBiZXN0IGdlbmVyYWwgYW5kIHRoZSBhYmxlc3Qgc3BlYWtlciBvZiB0aGUgZGF5LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.146'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHlldCB5b3VyIGFuY2VzdG9ycywgZm9yIGFsbCB0aGVzZSBzZXJ2aWNlcywgd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgYWxsb3cgaGltIHRvIGluc3VsdCB0aGVtLiBUaGV5IG1hZGUgaGltIGEgZnVnaXRpdmUgYW5kIGFuIG91dGxhdywgYW5kIGluIHRoZSBkYXkKICAgICAgICAgICAgICAgICAgICBvZiBMYWNlZGFlbW9uaWFuIHBvd2VyIHRoZXkgZW5kdXJlZCB0aGUgZm9ydGlmaWNhdGlvbiBvZiBEZWNlbGVhLCB0aGUgY2FwdHVyZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZWlyIGZsZWV0LCBhbmQgZXZlcnkga2luZCBvZiBsb3NzLCBiZWNhdXNlIHRoZXkgZGVlbWVkIGFueSBpbnZvbHVudGFyeQogICAgICAgICAgICAgICAgICAgIHN1ZmZlcmluZyBtb3JlIGhvbm9yYWJsZSB0aGFuIGEgdm9sdW50YXJ5IHN1Ym1pc3Npb24gdG8gdGhlIHR5cmFubnkgb2YKICAgICAgICAgICAgICAgICAgICBpbnNvbGVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['21.147'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDciIHVuaXQ9InNlY3Rpb24iIC8+WWV0IHdoYXQgd2FzIGhpcyBpbnNvbGVuY2UKICAgICAgICAgICAgICAgICAgICBjb21wYXJlZCB3aXRoIHdoYXQgaGFzIGJlZW4gcHJvdmVkIG9mIE1laWRpYXMgdG9kYXk/IEhlIGJveGVkIHRoZSBlYXJzIG9mCiAgICAgICAgICAgICAgICAgICAgVGF1cmVhcywgd2hlbiB0aGUgbGF0dGVyIHdhcyBjaG9ydXMtbWFzdGVyLiBHcmFudGVkOyBidXQgaXQgd2FzIGFzIGNob3J1cy1tYXN0ZXIKICAgICAgICAgICAgICAgICAgICB0byBjaG9ydXMtbWFzdGVyIHRoYXQgaGUgZGlkIGl0LCBhbmQgaGUgZGlkIG5vdCB0cmFuc2dyZXNzIHRoZSBwcmVzZW50IGxhdywgZm9yCiAgICAgICAgICAgICAgICAgICAgaXQgaGFkIG5vdCB5ZXQgYmVlbiBtYWRlLiBBbm90aGVyIHN0b3J5IGlzIHRoYXQgaGUgaW1wcmlzb25lZCB0aGUgcGFpbnRlcgogICAgICAgICAgICAgICAgICAgIEFnYXRoYXJjaHVzLiBZZXMsIGJ1dCBoZSBoYWQgY2F1Z2h0IGhpbSBpbiBhbiBhY3Qgb2YgdHJlc3Bhc3MsIG9yIHNvIHdlIGFyZQogICAgICAgICAgICAgICAgICAgIHRvbGQ7IHNvIHRoYXQgaXQgaXMgdW5mYWlyIHRvIGJsYW1lIGhpbSBmb3IgdGhhdC4gSGUgd2FzIG9uZSBvZiB0aGUgbXV0aWxhdG9ycwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBIZXJtYWUuIEFsbCBhY3RzIG9mIHNhY3JpbGVnZSwgSSBzdXBwb3NlLCBvdWdodCB0byBleGNpdGUgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICBpbmRpZ25hdGlvbiwgYnV0IGlzIG5vdCBjb21wbGV0ZSBkZXN0cnVjdGlvbiBvZiBzYWNyZWQgdGhpbmdzIGp1c3QgYXMKICAgICAgICAgICAgICAgICAgICBzYWNyaWxlZ2lvdXMgYXMgdGhlaXIgbXV0aWxhdGlvbj8gV2VsbCwgdGhhdCBpcyB3aGF0IE1laWRpYXMgaGFzIGJlZW4gY29udmljdGVkCiAgICAgICAgICAgICAgICAgICAgb2YuIDwvdHJhbnNsYXRpb24+"
translation['21.148'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDgiIHVuaXQ9InNlY3Rpb24iIC8+VG8gY29udHJhc3QgdGhlIHR3byBtZW4sIGxldCB1cyBhc2sgd2hvCiAgICAgICAgICAgICAgICAgICAgTWVpZGlhcyBpcyBhbmQgdG8gd2hvbSBoZSBkaXNwbGF5ZWQgaGlzIHF1YWxpdGllcy4gRG8gbm90IHRoZW4gaW1hZ2luZSB0aGF0IGZvcgogICAgICAgICAgICAgICAgICAgIHlvdSwgZ2VudGxlbWVuLCBiZWluZyB0aGUgZGVzY2VuZGFudHMgb2Ygc3VjaCBhbmNlc3RvcnMsIGl0IHdvdWxkIGJlIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIGp1c3RpY2Ugb3IgcGlldHksIHRvIHNheSBub3RoaW5nIG9mIGhvbm9yLCBpZiwgd2hlbiB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGNhdWdodCBhIHJhc2NhbGx5LCB2aW9sZW50IGJ1bGx5LCBhIG1lcmUgbm9ib2R5IGFuZCBzb24gb2Ygbm9ib2R5LCB5b3Ugc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgcHJvbm91bmNlIGhpbSBkZXNlcnZpbmcgb2YgcGFyZG9uIG9yIHBpdHkgb3IgZmF2b3VyIG9mIGFueSBraW5kLiBGb3Igd2h5IHNob3VsZAogICAgICAgICAgICAgICAgICAgIHlvdT8gQmVjYXVzZSBvZiBoaXMgc2VydmljZXMgYXMgZ2VuZXJhbD8gQnV0IG5vdCBldmVuIGFzIGEgcHJpdmF0ZSBzb2xkaWVyLCBtdWNoCiAgICAgICAgICAgICAgICAgICAgbGVzcyBhcyBhIGxlYWRlciBvZiBvdGhlcnMsIGlzIGhlIHdvcnRoIGFueXRoaW5nIGF0IGFsbC4gRm9yIGhpcyBzcGVlY2hlcyB0aGVuPwogICAgICAgICAgICAgICAgICAgIEluIGhpcyBwdWJsaWMgc3BlZWNoZXMgaGUgbmV2ZXIgeWV0IHNhaWQgYSBnb29kIHdvcmQgb2YgYW55b25lLCBhbmQgaGUgc3BlYWtzCiAgICAgICAgICAgICAgICAgICAgaWxsIG9mIGV2ZXJ5b25lIGluIHByaXZhdGUuIDwvdHJhbnNsYXRpb24+"
translation['21.149'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDkiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBzYWtlIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGZhbWlseSBwZXJoYXBzPyBBbmQgd2hvIG9mIHlvdSBkb2VzIG5vdCBrbm93IHRoZSBteXN0ZXJpb3VzIHN0b3J5IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGJpcnRo4oCUcXVpdGUgbGlrZSBhIG1lbG9kcmFtYT8gSGUgd2FzIHRoZSBzcG9ydCBvZiB0d28gb3Bwb3NpbmcKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2VzLiBUaGUgcmVhbCBtb3RoZXIgd2hvIGJvcmUgaGltIHdhcyB0aGUgbW9zdCBzZW5zaWJsZSBvZiBtb3J0YWxzOwogICAgICAgICAgICAgICAgICAgIGhpcyByZXB1dGVkIG1vdGhlciB3aG8gYWRvcHRlZCBoaW0gd2FzIHRoZSBzaWxsaWVzdCB3b21hbiBpbiB0aGUgd29ybGQuIERvIHlvdQogICAgICAgICAgICAgICAgICAgIGFzayB3aHk/IFRoZSBvbmUgc29sZCBoaW0gYXMgc29vbiBhcyBoZSB3YXMgYm9ybjsgdGhlIG90aGVyIHB1cmNoYXNlZCBoaW0sIHdoZW4KICAgICAgICAgICAgICAgICAgICBzaGUgbWlnaHQgaGF2ZSBnb3QgYSBiZXR0ZXIgYmFyZ2FpbiBhdCB0aGUgc2FtZSBmaWd1cmUuIDwvdHJhbnNsYXRpb24+"
translation['21.150'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTAiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCwgdGhvdWdoIGhlIGhhcyB0aHVzIGJlY29tZSB0aGUgcG9zc2Vzc29yIG9mCiAgICAgICAgICAgICAgICAgICAgcHJpdmlsZWdlcyB0byB3aGljaCBoZSBoYXMgbm8gY2xhaW0sIGFuZCBoYXMgZm91bmQgYSBmYXRoZXJsYW5kIHdoaWNoIGlzIHJlcHV0ZWQKICAgICAgICAgICAgICAgICAgICB0byBiZSBvZiBhbGwgc3RhdGVzIHRoZSBtb3N0IGZpcm1seSBiYXNlZCB1cG9uIGl0cyBsYXdzLCBoZSBzZWVtcyB1dHRlcmx5IHVuYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIHN1Ym1pdCB0byB0aG9zZSBsYXdzIG9yIGFiaWRlIGJ5IHRoZW0uIEhpcyB0cnVlLCBuYXRpdmUgYmFyYmFyaXNtIGFuZCBoYXRyZWQKICAgICAgICAgICAgICAgICAgICBvZiByZWxpZ2lvbiBkcml2ZSBoaW0gb24gYnkgZm9yY2UgYW5kIGJldHJheSB0aGUgZmFjdCB0aGF0IGhlIHRyZWF0cyBoaXMgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIHJpZ2h0cyBhcyBpZiB0aGV5IHdlcmUgbm90IGhpcyBvd27igJRhcyBpbmRlZWQgdGhleSBhcmUgbm90LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.151'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlN1Y2gsIHRoZW4sIGJlaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGV2ZW50cyB0aGF0IG1ha2UgdXAgdGhlIGxpZmUgb2YgdGhpcyBzaGFtZWxlc3MgYmxhY2tndWFyZCwgc29tZSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBhc3NvY2lhdGVzIGNhbWUgdG8gbWUsIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgdXJnaW5nIG1lIHRvIHJldGlyZSBhbmQgZHJvcCB0aGlzCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOyBidXQgZmluZGluZyBtZSB1bm1vdmVkLCB0aGV5IGRpZCBub3QgdmVudHVyZSB0byBhc3NlcnQgdGhhdCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBpbm5vY2VudCBvZiBhbGwgdGhlc2UgY3JpbWVzIGFuZCB3b3VsZCBub3QgZGVzZXJ2ZSB0aGUgc2V2ZXJlc3QgcGVuYWx0eSBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgZGVlZHMuIFRoZXkgdG9vayB0aGlzIGxpbmUgb2YgYXJndW1lbnQuIOKAnEhlIGhhcyBhbHJlYWR5IGJlZW4gY29udmljdGVkCiAgICAgICAgICAgICAgICAgICAgYW5kIGNvbmRlbW5lZDsgd2hhdCBmaW5lIGRvIHlvdSBleHBlY3QgdGhlIGNvdXJ0IHRvIGltcG9zZSBvbiBoaW0/IERvIHlvdSBub3QKICAgICAgICAgICAgICAgICAgICBzZWUgdGhhdCBoZSBpcyBhIHJpY2ggbWFuIGFuZCB3aWxsIHRhbGsgYWJvdXQgdGhlIGVxdWlwbWVudCBvZiB3YXItZ2FsbGV5cyBhbmQKICAgICAgICAgICAgICAgICAgICBvdGhlciBwdWJsaWMgc2VydmljZXM/IFRoZW4gdGFrZSBjYXJlIHRoYXQgaGUgZG9lcyBub3QgYmVnIGhpbXNlbGYgb2ZmIGJ5IHN1Y2gKICAgICAgICAgICAgICAgICAgICBwbGVhcywgYW5kIG1ha2UgeW91IGhpcyBsYXVnaGluZ3N0b2NrLCB3aGVuIGhlIHBheXMgdGhlIFN0YXRlIGEgZmFyIGxlc3Mgc3VtCiAgICAgICAgICAgICAgICAgICAgdGhhbiBoZSBub3cgb2ZmZXJzIHlvdS7igJ0gPC90cmFuc2xhdGlvbj4="
translation['21.152'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yCiAgICAgICAgICAgICAgICAgICAgbXlzZWxmLCBpbiB0aGUgZmlyc3QgcGxhY2UsIEkgZG8gbm90IGNoYXJnZSB5b3Ugd2l0aCBhbnl0aGluZyBkaXNob25vcmFibGUsIG5vcgogICAgICAgICAgICAgICAgICAgIGRvIEkgc3VwcG9zZSB0aGF0IHlvdSB3aWxsIGxheSBvbiBoaW0gYSBsaWdodGVyIHB1bmlzaG1lbnQgdGhhbiB3aWxsIGVmZmVjdHVhbGx5CiAgICAgICAgICAgICAgICAgICAgY2hlY2sgaGlzIGluc29sZW5jZTsgYW5kIHRoYXQgbWVhbnMsIGZvciBjaG9pY2UsIGRlYXRoLCBvciBmYWlsaW5nIHRoYXQsIGF0CiAgICAgICAgICAgICAgICAgICAgbGVhc3QgdGhlIGNvbmZpc2NhdGlvbiBvZiBhbGwgaGlzIHByb3BlcnR5LiBJbiB0aGUgbmV4dCBwbGFjZSwgbXkgb3duIG9waW5pb24KICAgICAgICAgICAgICAgICAgICBhYm91dCBoaXMgdHJpZXJhcmNoaWVzIGFuZCBwdWJsaWMgc2VydmljZXMgYW5kIHBsZWFzIG9mIHRoYXQgc29ydCBpcyB0aGlzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.153'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTMiIHVuaXQ9InNlY3Rpb24iIC8+SWYsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHB1YmxpYyBzZXJ2aWNlIGNvbnNpc3RzIGluIHNheWluZwogICAgICAgICAgICAgICAgICAgIHRvIHlvdSBhdCBhbGwgdGhlIG1lZXRpbmdzIG9mIHRoZSBBc3NlbWJseSBhbmQgb24gZXZlcnkgcG9zc2libGUgb2NjYXNpb24sCiAgICAgICAgICAgICAgICAgICAg4oCcV2UgYXJlIHRoZSBtZW4gd2hvIHBlcmZvcm0gdGhlIHB1YmxpYyBzZXJ2aWNlczsgd2UgYXJlIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIGFkdmFuY2UgeW91ciB0YXgtbW9uZXk7IHdlIGFyZSB0aGUgY2FwaXRhbGlzdHPigJ3igJRpZiB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgYWxsIGl0IG1lYW5zLCB0aGVuIEkgY29uZmVzcyB0aGF0IE1laWRpYXMgaGFzIHNob3duIGhpbXNlbGYgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBkaXN0aW5ndWlzaGVkIGNpdGl6ZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBmb3IKICAgICAgICAgICAgICAgICAgICBoZSBib3JlcyB1cyBhdCBldmVyeSBBc3NlbWJseSBieSB0aGVzZSB0YXN0ZWxlc3MgYW5kIHRhY3RsZXNzIGJvYXN0cy4gPC90cmFuc2xhdGlvbj4="
translation['21.154'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmIHlvdSB3YW50IHRvIGZpbmQgb3V0IGhvdyBoZSByZWFsbHkgcGVyZm9ybXMKICAgICAgICAgICAgICAgICAgICBoaXMgc2VydmljZXMsIEkgd2lsbCB0ZWxsIHlvdTsgYW5kIHBsZWFzZSBtYXJrIHdpdGggd2hhdCBmYWlybmVzcyBJIHNoYWxsIHRlc3QKICAgICAgICAgICAgICAgICAgICBoaW0sIGZvciBJIHdpbGwgY29tcGFyZSBoaW0gd2l0aCBteXNlbGYuIFRoaXMgbWFuLCBBdGhlbmlhbnMsIHdobyBpcyBhYm91dCBmaWZ0eQogICAgICAgICAgICAgICAgICAgIHllYXJzIG9sZCBvciBvbmx5IGEgdHJpZmxlIGxlc3MsIGhhcyBub3QgcGVyZm9ybWVkIG1vcmUgcHVibGljIHNlcnZpY2VzIHRoYW4gSSwKICAgICAgICAgICAgICAgICAgICB3aG8gYW0gb25seSB0d28gYW5kIHRoaXJ0eS4gTW9yZW92ZXIgSSwgYXMgc29vbiBhcyBJIGhhZCByZWFjaGVkIG1hbidzIGVzdGF0ZSwKICAgICAgICAgICAgICAgICAgICB1bmRlcnRvb2sgdGhlIHRyaWVyYXJjaHkgaW4gdGhlIGRheXMgd2hlbiBvbmx5IHR3byBzaGFyZWQgdGhlIGR1dHksIGFuZCB3aGVuIHdlCiAgICAgICAgICAgICAgICAgICAgcGFpZCBhbGwgdGhlIGV4cGVuc2VzIGZyb20gb3VyIG93biBwdXJzZXMgYW5kIHByb3ZpZGVkIHRoZSBjcmV3cyBvdXJzZWx2ZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.155'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTUiIHVuaXQ9InNlY3Rpb24iIC8+TWVpZGlhcywgd2hlbiBoZSB3YXMgb2YgbXkgcHJlc2VudCBhZ2UsCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vdCB5ZXQgYmVndW4gdG8gcGVyZm9ybSBzZXJ2aWNlczsgaGUgaGFzIG9ubHkgcHV0IGhpcyBoYW5kIHRvIHRoZSB0YXNrCiAgICAgICAgICAgICAgICAgICAgc2luY2UgeW91IG1hZGUgdHdlbHZlIGh1bmRyZWQgY2l0aXplbnMgam9pbnQgY29udHJpYnV0b3JzLCBmcm9tIHdob20gc3VjaCBtZW4gYXMKICAgICAgICAgICAgICAgICAgICBNZWlkaWFzIGV4YWN0IGEgdGFsZW50IGFuZCB0aGVuIGNvbnRyYWN0IGZvciB0aGUgZXF1aXBtZW50IG9mIHRoZSB3YXItZ2FsbGV5IGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgcHJpY2UuIEFmdGVyIHRoaXMgdGhlIFN0YXRlIHByb3ZpZGVzIHRoZSBjcmV3cyBhbmQgZnVybmlzaGVzIHRoZQogICAgICAgICAgICAgICAgICAgIHRhY2tsZTsgc28gdGhhdCBzb21lIG9mIHRoZW0gc3VjY2VlZCBpbiByZWFsbHkgc3BlbmRpbmcgbm90aGluZyBhdCBhbGwgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgcHJldGVuZGluZyB0byBoYXZlIHBlcmZvcm1lZCBvbmUgcHVibGljIHNlcnZpY2UgZW5qb3kgZXhlbXB0aW9uIGZyb20gdGhlIHJlc3QuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.156'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTYiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgaXMgdGhlcmUgYW55dGhpbmcgZWxzZT8gSGUgaGFzIG9uY2UKICAgICAgICAgICAgICAgICAgICBlcXVpcHBlZCBhIHRyYWdpYyBjaG9ydXM7IEkgaGF2ZSBmdXJuaXNoZWQgYSBiYW5kIG9mIG1hbGUgZmx1dGUtcGxheWVyczsgYW5kCiAgICAgICAgICAgICAgICAgICAgZXZlcnlvbmUga25vd3MgdGhhdCB0aGUgbGF0dGVyIGludm9sdmVzIG11Y2ggZ3JlYXRlciBleHBlbnNlIHRoYW4gdGhlIGZvcm1lci4KICAgICAgICAgICAgICAgICAgICBNb3Jlb3ZlciBteSBzZXJ2aWNlIGlzIHZvbHVudGFyeTsgaGlzIHdhcyBvbmx5IHVuZGVydGFrZW4gYWZ0ZXIgYSBjaGFsbGVuZ2UgdG8KICAgICAgICAgICAgICAgICAgICBleGNoYW5nZSBwcm9wZXJ0eS4gVGhlcmVmb3JlIG5vIG9uZSBjb3VsZCBqdXN0bHkgYWxsb3cgaGltIGFueSBjcmVkaXQgZm9yIGl0LgogICAgICAgICAgICAgICAgICAgIFdoYXQgZWxzZT8gSSBoYXZlIGZlYXN0ZWQgbXkgdHJpYmUgYW5kIGVxdWlwcGVkIGEgY2hvcnVzIGZvciB0aGUgUGFuYXRoZW5hZWE7IGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIGRvbmUgbmVpdGhlci4gPC90cmFuc2xhdGlvbj4="
translation['21.157'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTciIHVuaXQ9InNlY3Rpb24iIC8+SSB3YXMgY2hhaXJtYW4gb2Ygb25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHRheC1zeW5kaWNhdGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMi4yOSIgdmFsaWQ9InllcyI+RGVtLiAyLjI5PC9iaWJsPi48L25vdGU+IGZvciB0ZW4geWVhcnMsIGNvbnRyaWJ1dGluZyB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHNoYXJlIGFzIFBob3JtaW8sIEx5c2l0aGVpZGVzLCBDYWxsYWVzY2hydXMsIGFuZCB0aGUgcmljaGVzdCBjaXRpemVucywgbm90CiAgICAgICAgICAgICAgICAgICAgZnJvbSBteSBhY3R1YWwgcHJvcGVydHksIG9mIHdoaWNoIG15IGd1YXJkaWFucyBoYWQgcm9iYmVkIG1lLCBidXQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBlc3RpbWF0ZWQgd2VhbHRoIHdoaWNoIG15IGZhdGhlciBoYWQgbGVmdCBhbmQgd2hpY2ggSSB3YXMgZW50aXRsZWQgdG8gaW5oZXJpdAogICAgICAgICAgICAgICAgICAgIHdoZW4gSSBoYWQgcGFzc2VkIHRoZSBzY3J1dGlueSBmb3IgY2l0aXplbnNoaXAuIFRoYXQgaXMgaG93IEkgaGF2ZSBib3JuZSBteXNlbGYKICAgICAgICAgICAgICAgICAgICB0b3dhcmRzIHlvdTsgYnV0IGhvdyBoYXMgTWVpZGlhcz8gVG8gdGhpcyBkYXkgaGUgaGFzIG5ldmVyIGJlZW4gY2hhaXJtYW4gb2YgYQogICAgICAgICAgICAgICAgICAgIHN5bmRpY2F0ZSwgdGhvdWdoIG5vIG9uZSBoYXMgZXZlciByb2JiZWQgaGltIG9mIGFueSBwYXJ0IG9mIGhpcyBpbmhlcml0YW5jZSBhbmQKICAgICAgICAgICAgICAgICAgICBoZSBoYXMgcmVjZWl2ZWQgZnJvbSBoaXMgZmF0aGVyIGEgbGFyZ2UgcHJvcGVydHkuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMi4yOSIgdmFsaWQ9InllcyI+RGVtLiAyLjI5PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['21.158'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTgiIHVuaXQ9InNlY3Rpb24iIC8+SW4gd2hhdCwgdGhlbiwgY29uc2lzdCBoaXMgc3BsZW5kb3IsIGhpcyBwdWJsaWMgc2VydmljZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgaGlzIGxvcmRseSBleHBlbmRpdHVyZT8gSSBjYW5ub3QgZm9yIHRoZSBsaWZlIG9mIG1lIHNlZSwgdW5sZXNzIG9uZSBmaXhlcyBvbmUncwogICAgICAgICAgICAgICAgICAgIGF0dGVudGlvbiBvbiB0aGVzZSBmYWN0cy4gSGUgaGFzIGJ1aWx0IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRWxldXNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRWxldXNpcyI+RWxldXNpczwvcGxhY2VOYW1lPiBhIG1hbnNpb24gaHVnZSBlbm91Z2ggdG8gb3ZlcnNoYWRvdyBoaXMgbmVpZ2hib3JzOyBoZQogICAgICAgICAgICAgICAgICAgIGRyaXZlcyBoaXMgd2lmZSB0byB0aGUgTXlzdGVyaWVzLCBvciBhbnl3aGVyZSBlbHNlIHRoYXQgaGUgd2lzaGVzLCB3aXRoIGEgcGFpcgogICAgICAgICAgICAgICAgICAgIG9mIGdyZXlzIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTExMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTEwNCI+U2ljeW9uPC9wbGFjZU5hbWU+OyBoZSBzd2FnZ2VycyBhYm91dAogICAgICAgICAgICAgICAgICAgIHRoZSBtYXJrZXQtcGxhY2Ugd2l0aCB0aHJlZSBvciBmb3VyIGhlbmNobWVuIGluIGF0dGVuZGFuY2UsIGRlc2NyaWJpbmcgYmVha2VycwogICAgICAgICAgICAgICAgICAgIGFuZCBkcmlua2luZy1ob3JucyBhbmQgY3VwcyBsb3VkIGVub3VnaCBmb3IgdGhlIHBhc3NlcnMtYnkgdG8gaGVhci4gPC90cmFuc2xhdGlvbj4="
translation['21.159'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTkiIHVuaXQ9InNlY3Rpb24iIC8+SSBkbyBub3Qgc2VlIGhvdyB0aGUgbWFzcyBvZiBBdGhlbmlhbnMgYXJlIGJlbmVmaXRlZAogICAgICAgICAgICAgICAgICAgIGJ5IGFsbCB0aGUgd2VhbHRoIHRoYXQgTWVpZGlhcyByZXRhaW5zIGZvciBwcml2YXRlIGx1eHVyeSBhbmQgc3VwZXJmbHVvdXMKICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OyBJIGRvIHNlZSB0aGF0IGhpcyBpbnNvbGVuY2UsIGZvc3RlcmVkIGJ5IGhpcyB3ZWFsdGgsIGFmZmVjdHMgbWFueSBvZiB1cwogICAgICAgICAgICAgICAgICAgIG9yZGluYXJ5IGZvbGsuIFlvdSBvdWdodCBub3QgdG8gc2hvdyByZXNwZWN0IGFuZCBhZG1pcmF0aW9uIGZvciBzdWNoIHRoaW5ncyBvbgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG9jY2FzaW9uLCBub3IganVkZ2UgYSBtYW4ncyBwdWJsaWMgc3Bpcml0IGJ5IHN1Y2ggdGVzdHMgYXMKICAgICAgICAgICAgICAgICAgICB0aGVzZeKAlHdoZXRoZXIgaGUgYnVpbGRzIGhpbXNlbGYgYSBzcGxlbmRpZCBob3VzZSBvciBrZWVwcyBtYW55CiAgICAgICAgICAgICAgICAgICAgbWFpZC1zZXJ2YW50cyBvciBoYW5kc29tZSBmdXJuaXR1cmUsIGJ1dCB3aGV0aGVyIGhpcyBzcGxlbmRvciBhbmQgcHVibGljIHNwaXJpdAogICAgICAgICAgICAgICAgICAgIGFyZSBkaXNwbGF5ZWQgaW4gdGhvc2UgdGhpbmdzIGluIHdoaWNoIHRoZSBtYWpvcml0eSBvZiB5b3UgY2FuIHNoYXJlLiBUaGVyZSB5b3UKICAgICAgICAgICAgICAgICAgICB3aWxsIGZpbmQgTWVpZGlhcyBhYnNvbHV0ZWx5IHdhbnRpbmcuIDwvdHJhbnNsYXRpb24+"
translation['21.160'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCwgbWFyayB5b3UsIGhlIGdhdmUgdXMgYSB3YXItZ2FsbGV5ISBJCiAgICAgICAgICAgICAgICAgICAgYW0gc3VyZSBoZSB3aWxsIGJyYWcgYWJvdXQgdGhhdCB2ZXNzZWwuIOKAnEks4oCdIGhlIHdpbGwgc2F5LAogICAgICAgICAgICAgICAgICAgIOKAnHByZXNlbnRlZCB5b3Ugd2l0aCBhIHRyaXJlbWUu4oCdIE5vdyB0aGlzIGlzIGhvdyB5b3UgbXVzdAogICAgICAgICAgICAgICAgICAgIGRlYWwgd2l0aCBoaW0uIElmLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBoZQogICAgICAgICAgICAgICAgICAgIGdhdmUgaXQgZnJvbSBwYXRyaW90aWMgbW90aXZlcywgYmUgZHVseSBncmF0ZWZ1bCBhbmQgcGF5IGhpbSB0aGUgdGhhbmtzIHRoYXQKICAgICAgICAgICAgICAgICAgICBzdWNoIGEgZ2lmdCBkZXNlcnZlcy4gQnV0IGRvIG5vdCBnaXZlIGhpbSBhIGNoYW5jZSB0byBhaXIgaGlzIGluc29sZW5jZTsgdGhhdAogICAgICAgICAgICAgICAgICAgIG11c3Qgbm90IGJlIGNvbmNlZGVkIGFzIHRoZSBwcmljZSBvZiBhbnkgYWN0IG9yIGRlZWQuIElmLCBvbiB0aGUgb3RoZXIgaGFuZCwgaXQKICAgICAgICAgICAgICAgICAgICBpcyBwcm92ZWQgdGhhdCBoaXMgbW90aXZlIHdhcyBjb3dhcmRpY2UgYW5kIG1hbGluZ2VyaW5nLCBkbyBub3QgYmUgbGVkIGFzdHJheS4KICAgICAgICAgICAgICAgICAgICBIb3cgdGhlbiB3aWxsIHlvdSBrbm93PyBUaGlzIHRvbyBJIHdpbGwgZXhwbGFpbi4gSSB3aWxsIHRlbGwgeW91IHRoZSBzdG9yeSBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXJ0OiBpdCBpcyBub3QgYSBsb25nIG9uZS4gPC90cmFuc2xhdGlvbj4="
translation['21.161'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjEiIHVuaXQ9InNlY3Rpb24iIC8+Vm9sdW50YXJ5CiAgICAgICAgICAgICAgICAgICAgZ2lmdHMgd2VyZSBmaXJzdCBpbnRyb2R1Y2VkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBmb3IgdGhlIGV4cGVkaXRpb24gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2NzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY3NyI+RXVib2VhPC9wbGFjZU5hbWU+LiBNZWlkaWFzIHdhcyBub3Qgb25lIG9mIHRob3NlIHZvbHVudGVlcnMsIGJ1dCBJIHdhcywgYW5kCiAgICAgICAgICAgICAgICAgICAgbXkgY29sbGVhZ3VlIHdhcyBQaGlsaW51cywgdGhlIHNvbiBvZiBOaWNvc3RyYXR1cy4gVGhlcmUgd2FzIGEgc2Vjb25kIGNhbGwKICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50bHkgZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPi4gTWVpZGlhcwogICAgICAgICAgICAgICAgICAgIHdhcyBub3Qgb25lIG9mIHRob3NlIHZvbHVudGVlcnMgZWl0aGVyLiBZZXQgc3VyZWx5IHRoZSBwdWJsaWMtc3Bpcml0ZWQgbWFuIG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gYmUgZm91bmQgYXQgaGlzIHBvc3Qgb24gZXZlcnkgb2NjYXNpb24uIFdlIGhhdmUgbm93IHRoZXNlIHZvbHVudGFyeSBnaWZ0cyBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgdGhpcmQgdGltZSwgYW5kIHRoaXMgdGltZSBoZSBkaWQgbWFrZSBhbiBvZmZlci4gQnV0IGhvdz8gVGhvdWdoIHByZXNlbnQgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgQ291bmNpbCB3aGVuIHRoZSBnaWZ0cyB3ZXJlIGJlaW5nIHJlY2VpdmVkLCBoZSBtYWRlIG5vIG9mZmVyIHRoZW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.162'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaXQgd2FzIGFubm91bmNlZCB0aGF0IHRoZSB0cm9vcHMKICAgICAgICAgICAgICAgICAgICBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFRhbXluYWUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFRhbXluYWUiPlRhbXluYWU8L3BsYWNlTmFtZT4gd2VyZSBibG9ja2FkZWQsIGFuZCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIENvdW5jaWwgY2FycmllZCBhIHByZWxpbWluYXJ5IGRlY3JlZSB0byBkaXNwYXRjaCB0aGUgcmVzdCBvZiB0aGUgY2F2YWxyeSwgdG8KICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBiZWxvbmdlZCwgdGhlbiwgYWxhcm1lZCBhdCB0aGUgcHJvc3BlY3Qgb2YgdGhpcyBjYW1wYWlnbiwgaGUgY2FtZQogICAgICAgICAgICAgICAgICAgIGZvcndhcmQgd2l0aCBhIHZvbHVudGFyeSBnaWZ0IGF0IHRoZSBuZXh0IG1lZXRpbmcgb2YgdGhlIEFzc2VtYmx5LCBldmVuIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHRoZSBDb21taXR0ZWUgY291bGQgdGFrZSB0aGVpciBzZWF0cy4gV2hhdCBtYWtlcyBpdCBjbGVhciwgYmV5b25kIGFsbAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmlsaXR5IG9mIGRvdWJ0LCB0aGF0IGhpcyBtb3RpdmUgd2FzIG5vdCBwdWJsaWMgc3Bpcml0IGJ1dCB0aGUgZGVzaXJlIHRvCiAgICAgICAgICAgICAgICAgICAgc2hpcmsgdGhlIGNhbXBhaWduPyBIaXMgc3Vic2VxdWVudCBwcm9jZWVkaW5ncy4gPC90cmFuc2xhdGlvbj4="
translation['21.163'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluIHRoZSBmaXJzdCBwbGFjZSwgd2hlbiBpdCBhcHBlYXJlZCwgYXMgdGhlIG1lZXRpbmcKICAgICAgICAgICAgICAgICAgICBwcm9jZWVkZWQgYW5kIHNwZWVjaGVzIHdlcmUgbWFkZSwgdGhhdCB0aGUgc2VydmljZXMgb2YgdGhlIGNhdmFscnkgd2VyZSBub3Qgbm93CiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQsIGJ1dCB0aGF0IHRoZSBwcm9wb3NlZCBleHBlZGl0aW9uIGhhZCBmYWxsZW4gdGhyb3VnaCwgaGUgbmV2ZXIgc2V0IGZvb3QKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgc2hpcCBoZSBoYWQgcHJlc2VudGVkLCBidXQgZGlzcGF0Y2hlZCBhIHJlc2lkZW50IGFsaWVuLCB0aGUgRWd5cHRpYW4KICAgICAgICAgICAgICAgICAgICBQYW1waGlsdXMsIHdoaWxlIGhlIGhpbXNlbGYgc3RheWVkIGF0IGhvbWUgYW5kIGJlaGF2ZWQgYXQgdGhlIERpb255c2lhIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHdheSB0aGF0IGlzIHRoZSBtYXR0ZXIgb2YgdGhlIHByZXNlbnQgdHJpYWwuIDwvdHJhbnNsYXRpb24+"
translation['21.164'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjQiIHVuaXQ9InNlY3Rpb24iIC8+TmV4dCwgd2hlbiB0aGUgZ2VuZXJhbCwgUGhvY2lvbiwgc3VtbW9uZWQgdGhlIGNhdmFscnkgZnJvbSBBcmd1cmEgdG8gdGFrZQogICAgICAgICAgICAgICAgICAgIHRoZWlyIHR1cm4gb2Ygc2VydmljZSwgYW5kIHRoZSB0cmlja2VyeSBvZiBNZWlkaWFzIHdhcyBleHBvc2VkLCB0aGVuIHRoaXMKICAgICAgICAgICAgICAgICAgICBkYW1uYWJsZSBjb3dhcmQgcXVpdHRlZCB0aGF0IHBvc3QgYW5kIGh1cnJpZWQgdG8gaGlzIHNoaXAgYW5kIG5ldmVyIHdlbnQgb3V0CiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgY2F2YWxyeSB3aG9tIGhlIGNsYWltZWQgdG8gY29tbWFuZCBoZXJlIGF0IGhvbWUuIEJ1dCBpZiB0aGVyZSBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGFueSByaXNrIGF0IHNlYSwgaGUgd291bGQgY2VydGFpbmx5IGhhdmUgaGFzdGVuZWQgdG8gbGFuZC4gPC90cmFuc2xhdGlvbj4="
translation['21.165'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjUiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IHNvIGJlaGF2ZWQgTmljZXJhdHVzLCB0aGUgYmVsb3ZlZCBzb24gb2YgTmljaWFzLCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICBoZSB3YXMgaGltc2VsZiBwaHlzaWNhbGx5IGFuIHV0dGVyIHdlYWtsaW5nLiBOb3Qgc28gYmVoYXZlZCBFdWN0ZW1vbiwgdGhlIHNvbiBvZgogICAgICAgICAgICAgICAgICAgIEFlc2lvbiwgbm9yIEV1dGh5ZGVtdXMsIHRoZSBzb24gb2YgU3RyYXRvY2xlcy4gRWFjaCBvZiB0aGVzZSBtZW4gaGFkIG1hZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2lmdCBvZiBhIHdhci1nYWxsZXksIHlldCBkaWQgbm90IHJ1biBhd2F5IGZyb20gdGhlIGNhbXBhaWduIGluIHRoaXMgd2F5LiBFYWNoLAogICAgICAgICAgICAgICAgICAgIGFzIGFuIGFjdCBvZiBncmFjZSBhbmQgYSBmcmVlIGdpZnQsIHN1cHBsaWVkIHRoZSBTdGF0ZSB3aXRoIGEgc2hpcCByZWFkeSBmb3IKICAgICAgICAgICAgICAgICAgICBzZWEsIGFuZCB3aGVyZSB0aGUgbGF3IG9mIHRoZSBTdGF0ZSBhc3NpZ25lZCB0aGVtIHRoZWlyIHBvc3RzLCB0aGVyZSBlYWNoCiAgICAgICAgICAgICAgICAgICAgaW5zaXN0ZWQgb24gZ2l2aW5nIGhpcyBwZXJzb25hbCBzZXJ2aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.166'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0CiAgICAgICAgICAgICAgICAgICAgbm90IHNvIG91ciBjYXZhbHJ5LW9mZmljZXIgTWVpZGlhcy4gSGUgZGVzZXJ0ZWQgdGhlIHBvc3QgYXNzaWduZWQgaGltIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MsIGFuZCB0aGlzLCB3aGljaCBpcyBhIHB1bmlzaGFibGUgb2ZmZW5jZSBhZ2FpbnN0IHRoZSBTdGF0ZSwgaGUgaXMgcHJlcGFyZWQKICAgICAgICAgICAgICAgICAgICB0byBjb3VudCBhcyBhIG1lcml0b3Jpb3VzIHNlcnZpY2UuIFlldCwgZ29vZCBoZWF2ZW5zISB3aGF0IG5hbWUgYmVzdCBiZWZpdHMgc3VjaAogICAgICAgICAgICAgICAgICAgIGEgdHJpZXJhcmNoeSBhcyBoaXM/IFNoYWxsIHdlIGNhbGwgaXQgcGF0cmlvdGlzbSwgb3IgdGF4LWpvYmJpbmcsCiAgICAgICAgICAgICAgICAgICAgdHdvLXBlci1jZW50LWNvbGxlY3RpbmcsIGRlc2VydGlvbiwgbWFsaW5nZXJpbmcsIGFuZCBldmVyeXRoaW5nIG9mIHRoYXQgc29ydD8KICAgICAgICAgICAgICAgICAgICBVbmFibGUgaW4gYW55IG90aGVyIHdheSB0byBnZXQgaGltc2VsZiBleGVtcHQgZnJvbSBzZXJ2aWNlIHdpdGggdGhlIGNhdmFscnksCiAgICAgICAgICAgICAgICAgICAgTWVpZGlhcyBoYXMgaW52ZW50ZWQgdGhpcyBuZXctZmFuZ2xlZCBjYXZhbHJ5LWNvbGxlY3RvcnNoaXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlVzaW5nIG5vbWluYWwgc2VydmljZSB3aXRoIHRoZSBjYXZhbHJ5IHRvIHNlY3VyZSB0aGUgcHJvZml0cwogICAgICAgICAgICAgICAgICAgICAgICBvZiBhIGNvbGxlY3Rvci48L25vdGU+IEFub3RoZXIgcG9pbnQuIDwvdHJhbnNsYXRpb24+"
translation['21.167'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjciIHVuaXQ9InNlY3Rpb24iIC8+QWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyIGRvbm9ycyBvZiB3YXItZ2FsbGV5cyBjb252b3llZCB5b3Ugd2hlbiB5b3Ugc2FpbGVkIGJhY2sgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFN0eXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTdHlyYSI+U3R5cmE8L3BsYWNlTmFtZT47IE1laWRpYXMgYWxvbmUgdG9vayBubyBwYXJ0CiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGNvbnZveSwgYnV0LCB3aXRob3V0IGEgdGhvdWdodCBmb3IgeW91LCBoZSB3YXMgYnJpbmdpbmcgZmVuY2VzIGFuZCBjYXR0bGUKICAgICAgICAgICAgICAgICAgICBhbmQgZG9vci1wb3N0cyBmb3IgaGlzIG93biBob3VzZSBhbmQgcGl0LXByb3BzIGZvciBoaXMgc2lsdmVyLW1pbmVzLCBhbmQgc28gaGlzCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZCBoYXMgcHJvdmVkLCBub3QgYSBwdWJsaWMgc2VydmljZSwgYnV0IGEgbHVjcmF0aXZlIGpvYiBmb3IgdGhpcwogICAgICAgICAgICAgICAgICAgIGRldGVzdGFibGUgY3JlYXR1cmUuIEhvd2V2ZXIsIHRvIHByb3ZlIHRvIHlvdSB0aGUgdHJ1dGggb2YgbXkgc3RhdGVtZW50cywgdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgbW9zdCBvZiB0aGUgZmFjdHMgYXJlIGtub3duIHRvIHlvdSwgSSB3aWxsIG5ldmVydGhlbGVzcyBjYWxsIHdpdG5lc3Nlcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.168'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjgiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPltXZSwgQ2xlb24gb2YgU3VuaXVtLCBBcmlzdG9jbGVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFBhZWFuaWEsIFBhbXBoaWx1cywgTmljZXJhdHVzIG9mIEFjaGVyZHVzLCBhbmQgRXVjdGVtb24gb2YgU3BoZXR0YSwgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIG9jY2FzaW9uIHdoZW4gd2Ugc2FpbGVkIGhvbWUgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFN0eXJhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxTdHlyYSI+U3R5cmE8L3BsYWNlTmFtZT4gd2l0aCB0aGUgZW50aXJlIGZvcmNlLCB3ZXJlIGNvbW1hbmRlcnMgb2YgdHJpcmVtZXMKICAgICAgICAgICAgICAgICAgICAgICAgYWxvbmcgd2l0aCBNZWlkaWFzLCB3aG8gaXMgbm93IGJlaW5nIHByb3NlY3V0ZWQgYnkgRGVtb3N0aGVuZXMsIGZvciB3aG9tIHdlCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhciBhcyB3aXRuZXNzZXMuIFdoZW4gdGhlIHdob2xlIGZsZWV0IHdhcyBzYWlsaW5nIGluIGZvcm1hdGlvbiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlcnMgaGFkIGluc3RydWN0aW9ucyBub3QgdG8gc2VwYXJhdGUgdW50aWwgd2UgbGFuZGVkIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgTWVpZGlhcyBsYWdnZWQgYmVoaW5kIHRoZSBmbGVldAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgbG9hZGVkIGhpcyBzaGlwIHdpdGggdGltYmVyIGFuZCBmZW5jaW5nIGFuZCBjYXR0bGUgYW5kIG90aGVyIHRoaW5ncywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHNhaWxlZCBhbG9uZSBpbnRvIFBlaXJhZXVzIHR3byBkYXlzIGxhdGVyLCBhbmQgZGlkIG5vdCBqb2luIHdpdGggdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRlcnMgaW4gYnJpbmdpbmcgdGhlIGZvcmNlIHRvIGxhbmQuXTwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT5bV2UsIENsZW9uIG9mIFN1bml1bSwgQXJpc3RvY2xlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBQYWVhbmlhLCBQYW1waGlsdXMsIE5pY2VyYXR1cyBvZiBBY2hlcmR1cywgYW5kIEV1Y3RlbW9uIG9mIFNwaGV0dGEsIG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbiB3aGVuIHdlIHNhaWxlZCBob21lIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxTdHlyYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsU3R5cmEiPlN0eXJhPC9wbGFjZU5hbWU+IHdpdGggdGhlIGVudGlyZSBmb3JjZSwgd2VyZSBjb21tYW5kZXJzIG9mIHRyaXJlbWVzCiAgICAgICAgICAgICAgICAgICAgICAgIGFsb25nIHdpdGggTWVpZGlhcywgd2hvIGlzIG5vdyBiZWluZyBwcm9zZWN1dGVkIGJ5IERlbW9zdGhlbmVzLCBmb3Igd2hvbSB3ZQogICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXIgYXMgd2l0bmVzc2VzLiBXaGVuIHRoZSB3aG9sZSBmbGVldCB3YXMgc2FpbGluZyBpbiBmb3JtYXRpb24gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kZXJzIGhhZCBpbnN0cnVjdGlvbnMgbm90IHRvIHNlcGFyYXRlIHVudGlsIHdlIGxhbmRlZCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIE1laWRpYXMgbGFnZ2VkIGJlaGluZCB0aGUgZmxlZXQKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGxvYWRlZCBoaXMgc2hpcCB3aXRoIHRpbWJlciBhbmQgZmVuY2luZyBhbmQgY2F0dGxlIGFuZCBvdGhlciB0aGluZ3MsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBzYWlsZWQgYWxvbmUgaW50byBQZWlyYWV1cyB0d28gZGF5cyBsYXRlciwgYW5kIGRpZCBub3Qgam9pbiB3aXRoIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kZXJzIGluIGJyaW5naW5nIHRoZSBmb3JjZSB0byBsYW5kLl08L3RyYW5zbGF0aW9uPg=="
translation['21.169'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBpZiwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGlzIHB1YmxpYyBzZXJ2aWNlcyBhbmQKICAgICAgICAgICAgICAgICAgICBoaXMgY29uZHVjdCB3ZXJlIHJlYWxseSB3aGF0IGhlIHdpbGwgcHJlc2VudGx5IGluIGNvdXJ0IGFsbGVnZSBhbmQgYm9hc3QgdGhlbSB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBhbmQgbm90IHdoYXQgSSB0aHVzIHByb3ZlIHRoZW0gdG8gaGF2ZSBiZWVuLCBldmVuIHNvIHN1cmVseSBoZSBoYXMgbm8KICAgICAgICAgICAgICAgICAgICByaWdodCwgdW5kZXIgY292ZXIgb2YgaGlzIHNlcnZpY2VzLCB0byBlc2NhcGUgdGhlIHB1bmlzaG1lbnQgZHVlIHRvIGhpcyBpbnNvbGVudAogICAgICAgICAgICAgICAgICAgIGFjdHMuIEZvciBJIGtub3cgdGhhdCB0aGVyZSBhcmUgbWFueSBtZW4gd2hvIGhhdmUgZG9uZSB5b3UgZ3JlYXQgYW5kIHVzZWZ1bAogICAgICAgICAgICAgICAgICAgIHNlcnZpY2XigJR0aG91Z2ggbm90IGFmdGVyIHRoZSBzdHlsZSBvZiBNZWlkaWFzISBTb21lIGhhdmUgd29uIG5hdmFsCiAgICAgICAgICAgICAgICAgICAgdmljdG9yaWVzLCBvdGhlcnMgaGF2ZSBjYXB0dXJlZCBjaXRpZXMsIG90aGVycyBoYXZlIHNldCB1cCBtYW55IGdsb3Jpb3VzCiAgICAgICAgICAgICAgICAgICAgdHJvcGhpZXMgdG8gdGhlIGNyZWRpdCBvZiB0aGUgU3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['21.170'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzAiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHlldAogICAgICAgICAgICAgICAgICAgIHRvIG5vdCBvbmUgb2YgdGhlc2UgbWVuIGhhdmUgeW91IGV2ZXIgeWV0IGdyYW50ZWQsIG5vciBhcmUgeW91IGxpa2VseSB0byBncmFudCwKICAgICAgICAgICAgICAgICAgICB0aGlzIHJld2FyZOKAlGxpY2VuY2UgZm9yIGVhY2ggb25lIG9mIHRoZW0gdG8gb3BwcmVzcyBoaXMgcHJpdmF0ZQogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMgd2hlbmV2ZXIgaGUgbGlrZXMgYW5kIGluIHdoYXRldmVyIHdheSBoZSBjYW4uIEZvciBub3QgZXZlbiBIYXJtb2RpdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgQXJpc3RvZ2VpdG9uIHdlcmUgc28gcHJpdmlsZWdlZCwgdGhvdWdoIGluZGVlZCB0aGV5IHJlY2VpdmVkIGZyb20geW91IHRoZQogICAgICAgICAgICAgICAgICAgIGhpZ2hlc3QgcmV3YXJkcyBmb3IgdGhlIG5vYmxlc3Qgc2VydmljZXMuIFlvdSB3b3VsZCBuZXZlciBoYXZlIHRvbGVyYXRlZCBpdCBpZgogICAgICAgICAgICAgICAgICAgIGFueSBvbmUgaGFkIGFkZGVkIHRoaXMgdG8gdGhlIGluc2NyaXB0aW9uIG9uIHRoZWlyIG1vbnVtZW50LCDigJxBbmQgdGhleQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGJlIGxpY2Vuc2VkIHRvIG9wcHJlc3Mgd2hvbXNvZXZlciB0aGV5IHdpbGwu4oCdIE5vLCB0aGV5IHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3RoZXIgcmV3YXJkcyBmb3IgdGhpcyB2ZXJ5IHNlcnZpY2UsIHRoYXQgdGhleSBoYWQgcmVzdHJhaW5lZCB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBhY3RlZCBpbnNvbGVudGx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.171'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgbm93IHByb3Bvc2UgdG8gc2hvdyB5b3UsIEF0aGVuaWFucywgdGhhdCBoZSBoYXMgcmVjZWl2ZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHlvdSBhIHJlY29tcGVuc2UgYWRlcXVhdGUgbm90IG9ubHkgdG8gdGhlIHB1YmxpYyBzZXJ2aWNlcyBoZSBoYXMgYWN0dWFsbHkKICAgICAgICAgICAgICAgICAgICBwZXJmb3JtZWTigJRmb3IgaW4gdGhhdCBjYXNlIGl0IHdvdWxkIGJlIHNtYWxsIGluZGVlZCHigJRidXQKICAgICAgICAgICAgICAgICAgICBldmVuIHRvIHRoZSBtb3N0IGRpc3Rpbmd1aXNoZWQgc2VydmljZXM7IHNvIHRoYXQgeW91IG1heSBub3QgaW1hZ2luZSB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIGFyZSBzdGlsbCBpbiBkZWJ0IHRvIHRoaXMgY29udGVtcHRpYmxlIGZlbGxvdy4gRm9yIGl0IHdhcyB5b3UsIG1lbiBvZiBBdGhlbnMsCiAgICAgICAgICAgICAgICAgICAgd2hvIGVsZWN0ZWQgaGlt4oCUaGUgYmVpbmcgd2hhdCBoZSBpc+KAlHN0ZXdhcmQgb2YgdGhlIFBhcmFsdXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGFsc28gY29tbWFuZGVyIG9mIHRoZSBjYXZhbHJ5LCB0aG91Z2ggaGUgY291bGQgbm90IHNpdCBhIGhvcnNlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npb25zIHRocm91Z2ggdGhlIG1hcmtldC1wbGFjZSwgYW5kIHN1cGVyaW50ZW5kZW50IG9mIHRoZSBNeXN0ZXJpZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIHNhY3JpZmljZXIgb24gb25lIG9jY2FzaW9uLCBhbmQgYnV5ZXIgb2YgdGhlIHZpY3RpbXMgYW5kIGFsbCB0aGUgcmVzdCBvZiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.172'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZW4sIHRoYXQgYSBtYW4ncyBpbm5hdGUgYmFzZW5lc3MKICAgICAgICAgICAgICAgICAgICBhbmQgY293YXJkaWNlIGFuZCB3aWNrZWRuZXNzIHNob3VsZCBiZSByZWRlZW1lZCBieSBvZmZpY2VzIGFuZCBob25vcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludG1lbnRzIGZyb20geW914oCUZG8geW91LCBpbiBoZWF2ZW4ncyBuYW1lLCByZWdhcmQgdGhhdCBhcyBhCiAgICAgICAgICAgICAgICAgICAgdHJpdmlhbCBnaWZ0IGFuZCBmYXZvdXI/IFRha2UgYXdheSwgaW5kZWVkLCBoaXMgcmlnaHQgdG8gc2F5LCDigJxJIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIGNvbW1hbmRlciBvZiB0aGUgY2F2YWxyeTsgSSBoYXZlIGJlZW4gbWFkZSBzdGV3YXJkIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFBhcmFsdXMs4oCdIGFuZCB3aGF0IGVsc2UgaXMgaGUgZ29vZCBmb3I/IDwvdHJhbnNsYXRpb24+"
translation['21.173'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IGFueSByYXRlIHlvdSBrbm93IHRoaXMsIHRoYXQgd2hlbiBoZSBoYWQgYmVlbiBtYWRlCiAgICAgICAgICAgICAgICAgICAgc3Rld2FyZCBvZiB0aGUgUGFyYWx1cywgaGUgcGx1bmRlcmVkIHRoZSBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxDeXppY3VzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxDeXppY3VzIj5DeXppY3VzPC9wbGFjZU5hbWU+IG9mIG1vcmUgdGhhbiBmaXZlIHRhbGVudHMsIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIGF2b2lkIHB1bmlzaG1lbnQgaGUgd29ycmllZCBhbmQgaGFyYXNzZWQgdGhlIHdyZXRjaGVzIGluIGV2ZXJ5IHBvc3NpYmxlIHdheSwgYW5kCiAgICAgICAgICAgICAgICAgICAgYnkgbWFraW5nIGNoYW9zIG9mIHRoZSB0cmVhdGllcyBoZSBoYXMgYWxpZW5hdGVkIHRoZWlyIHN0YXRlIGZyb20gb3Vycywgd2hpbGUgaGUKICAgICAgICAgICAgICAgICAgICBrZWVwcyB0aGUgbW9uZXkgaGltc2VsZi4gU2luY2UgaGUgd2FzIGFwcG9pbnRlZCBpdHMgY29tbWFuZGVyLCBoZSBoYXMgcnVpbmVkCiAgICAgICAgICAgICAgICAgICAgeW91ciBjYXZhbHJ5IGZvcmNlLCBnZXR0aW5nIGxhd3MgcGFzc2VkIHdoaWNoIGhlIGFmdGVyd2FyZHMgZGlzb3duZWQuIDwvdHJhbnNsYXRpb24+"
translation['21.174'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSB3YXMgc3Rld2FyZCBvZiB0aGUgUGFyYWx1cyBhdCB0aGUgdGltZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgZXhwZWRpdGlvbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICBUaGViYW5zLCB0aG91Z2ggaGUgd2FzIGF1dGhvcml6ZWQgdG8gZXhwZW5kIHR3ZWx2ZSB0YWxlbnRzIG9mIHB1YmxpYyBtb25leSBhbmQKICAgICAgICAgICAgICAgICAgICB3YXMgaW5zdHJ1Y3RlZCBieSB5b3UgdG8gc2FpbCBhbmQgY29udm95IHRoZSB0cm9vcHMsIGhlIHJlbmRlcmVkIHRoZW0gbm8KICAgICAgICAgICAgICAgICAgICBhc3Npc3RhbmNlIGFuZCBkaWQgbm90IGFycml2ZSB1bnRpbCBEaW9jbGVzIGhhZCBhbHJlYWR5IGNvbmNsdWRlZCBoaXMgdHJ1Y2Ugd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBUaGViYW5zOyBtb3Jlb3ZlciBoZSB3YXMgb3V0c3RyaXBwZWQgYnkgb25lIG9mIHRoZSBwcml2YXRlbHkgb3duZWQgZ2FsbGV5cy4KICAgICAgICAgICAgICAgICAgICBUaGF0IHNob3dzIHlvdSBob3cgd2VsbCBoZSBoYWQgZXF1aXBwZWQgeW91ciBzYWNyZWQgZ2FsbGV5LiBUaGVuIGFzCiAgICAgICAgICAgICAgICAgICAgY2F2YWxyeS1jb21tYW5kZXItSSBkbyBub3Qga25vdyB3aGF0IHlvdSB0aGluayBvZiBoaXMgb3RoZXIgcGVyZm9ybWFuY2VzLCBidXQKICAgICAgICAgICAgICAgICAgICB0aGlzIHdlYWx0aHkgZmluZSBnZW50bGVtYW4gZGlkIG5vdCB2ZW50dXJlIHRvIGJ1eSBhIGhvcnNl4oCUbm90IGV2ZW4gYQogICAgICAgICAgICAgICAgICAgIGhvcnNlISBIZSBsZWQgdGhlIHByb2Nlc3Npb25zIG9uIG9uZSBib3Jyb3dlZCBmcm9tIFBoaWxvbWVsdXMgb2YgUGFlYW5pYSwgYW5kCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgY2F2YWxyeW1hbiBrbm93cyBpdC4gUGxlYXNlIGNhbGwgdGhlIHdpdG5lc3NlcyB0byBwcm92ZSB0aGUgdHJ1dGggb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnRzIGFsc28uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.175'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBJIHByb3Bvc2UsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8gbmFtZSB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gY29uZGVtbmVkIGJ5IHlvdSwgYWZ0ZXIgYW4gYWR2ZXJzZSB2b3RlIG9mIHRoZSBBc3NlbWJseSwgZm9yIHZpb2xhdGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBmZXN0aXZhbCwgYW5kIHRvIGV4cGxhaW4gd2hhdCBzb21lIG9mIHRoZW0gaGFkIGRvbmUgdG8gaW5jdXIgeW91ciBhbmdlciwgc28KICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBtYXkgY29tcGFyZSB0aGVpciBndWlsdCB3aXRoIHRoYXQgb2YgTWVpZGlhcy4gRmlyc3Qgb2YgYWxsIHRoZW4sIHRvCiAgICAgICAgICAgICAgICAgICAgYmVnaW4gd2l0aCB0aGUgbW9zdCByZWNlbnQgY29uZGVtbmF0aW9uLCB0aGUgQXNzZW1ibHkgZ2F2ZSBpdHMgdmVyZGljdCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgRXVhbmRydXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDQyNTgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwNDI1OCI+VGhlc3BpYWU8L3BsYWNlTmFtZT4gZm9yIHByb2ZhbmF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIE15c3RlcmllcyBvbiB0aGUgY2hhcmdlIG9mIE1lbmlwcHVzLCBhIGZlbGxvdyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyMzU4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDIzNTgiPkNhcmlhPC9wbGFjZU5hbWU+LiBUaGUgbGF3IGNvbmNlcm5pbmcgdGhlIE15c3RlcmllcyBpcwogICAgICAgICAgICAgICAgICAgIGlkZW50aWNhbCB3aXRoIHRoYXQgY29uY2VybmluZyB0aGUgRGlvbnlzaWEsIGFuZCBpdCB3YXMgZW5hY3RlZCBsYXRlci4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.176'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzYiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgQXRoZW5pYW5zLCB3aGF0IGhhZCBFdWFuZHJ1cyBkb25lCiAgICAgICAgICAgICAgICAgICAgdG8gZGVzZXJ2ZSB5b3VyIGNvbmRlbW5hdGlvbj8gSGUgaGFkIHdvbiBhIGNvbW1lcmNpYWwgc3VpdCBhZ2FpbnN0IE1lbmlwcHVzLCBidXQKICAgICAgICAgICAgICAgICAgICBiZWluZywgYXMgaGUgYWxsZWdlZCwgdW5hYmxlIHRvIGNhdGNoIGhpbSBzb29uZXIsIGhlIGhhZCBhcnJlc3RlZCBoaW0gd2hpbGUgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgc3RheWluZyBoZXJlIGZvciB0aGUgTXlzdGVyaWVzLiBZb3UgY29uZGVtbmVkIGhpbSBmb3IgdGhhdCBhbG9uZSwgYW5kIHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2VyZSBubyBhZ2dyYXZhdGluZyBjaXJjdW1zdGFuY2VzLiBXaGVuIGhlIGNhbWUgYmVmb3JlIHRoZSBjb3VydCwgeW91IHdlcmUKICAgICAgICAgICAgICAgICAgICBpbmNsaW5lZCB0byBwdW5pc2ggaGltIHdpdGggZGVhdGgsIGFuZCB3aGVuIGhpcyBhY2N1c2VyIHdhcyBpbmR1Y2VkIHRvIHJlbGVudCwKICAgICAgICAgICAgICAgICAgICB5b3UgY29tcGVsbGVkIEV1YW5kcnVzIHRvIHJlZnVuZCB0aGUgZGFtYWdlcywgYW1vdW50aW5nIHRvIHR3byB0YWxlbnRzLCB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIGhhZCB3b24gaW4gdGhlIGZvcm1lciBhY3Rpb24sIGFuZCB5b3UgYWxzbyBtYWRlIGhpbSBjb21wZW5zYXRlIHRoZSBmZWxsb3cgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGxvc3MgdGhhdCBoZSBoYWQgc3VzdGFpbmVkLCBvbiBoaXMgb3duIGNhbGN1bGF0aW9uLCBieSBzdGF5aW5nIGhlcmUgaW4KICAgICAgICAgICAgICAgICAgICBkZWZlcmVuY2UgdG8geW91ciBwcmVsaW1pbmFyeSB2ZXJkaWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.177'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzciIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBvbmUgY2FzZSBvZiBhIG1hbiwgaW4gYSBtZXJlbHkgcHJpdmF0ZSBtYXR0ZXIsIHdpdGggbm8gYWRkZWQKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2VzIG9mIGluc29sZW5jZSwgcGF5aW5nIHNvIGhlYXZ5IGEgcGVuYWx0eSBmb3IgYSBicmVhY2ggb2YgdGhlIGxhdy4KICAgICAgICAgICAgICAgICAgICBXaXRoIGdvb2QgcmVhc29uOyBiZWNhdXNlIHRoYXQgaXMgd2hhdCB5b3UgYXJlIGhlcmUgdG8gZ3VhcmTigJR0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGFuZCB5b3VyIG9hdGguIFRoYXQgaXMgd2hhdCB5b3Ugd2hvIHNlcnZlIG9uIGFueSBqdXJ5IGhvbGQgYXMgYSB0cnVzdCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc3Qgb2YgdGhlIGNpdGl6ZW5zLCBhIHRydXN0IHdoaWNoIG11c3QgYmUgbWFpbnRhaW5lZCBpbnZpb2xhdGUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3RzIG9mIGFsbCB3aG8gYXBwZWFsIHRvIHlvdSB3aXRoIGp1c3RpY2Ugb24gdGhlaXIgc2lkZS4gPC90cmFuc2xhdGlvbj4="
translation['21.178'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlIHdhcyBhbm90aGVyIG1hbgogICAgICAgICAgICAgICAgICAgIHdobyBpbiB5b3VyIG9waW5pb24gaGFkIHByb2ZhbmVkIHRoZSBEaW9ueXNpYSwgYW5kIGFsdGhvdWdoIGhlIHdhcyBhY3R1YWxseQogICAgICAgICAgICAgICAgICAgIHNpdHRpbmcgYXMgYXNzZXNzb3IgdG8gaGlzIHNvbiwgd2hvIHdhcyBBcmNob24sIHlvdSBjb25kZW1uZWQgaGltLCBiZWNhdXNlIGluCiAgICAgICAgICAgICAgICAgICAgZWplY3RpbmcgZnJvbSB0aGUgdGhlYXRlciBhIG1hbiB3aG8gd2FzIHRha2luZyBhIHdyb25nIHNlYXQsIGhlIGxhaWQgYSBoYW5kIG9uCiAgICAgICAgICAgICAgICAgICAgaGltLiBUaGF0IG1hbiB3YXMgdGhlIGZhdGhlciBvZiB0aGUgaGlnaGx5IHJlc3BlY3RlZCBDaGFyaWNsZWlkZXMsIGF0IHRoYXQgdGltZQogICAgICAgICAgICAgICAgICAgIGFyY2hvbi4gPC90cmFuc2xhdGlvbj4="
translation['21.179'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzkiIHVuaXQ9InNlY3Rpb24iIC8+WWVzLCBhbmQgeW91IHRob3VnaHQgdGhhdCBoaXMgYWNjdXNlcgogICAgICAgICAgICAgICAgICAgIGhhZCBhIHN0cm9uZyBjYXNlIHdoZW4gaGUgc2FpZCwg4oCcSWYgSSB3YXMgdGFraW5nIGEgd3Jvbmcgc2VhdCwgZmVsbG93LAogICAgICAgICAgICAgICAgICAgIGlmIGFzIHlvdSBhc3NlcnQgSSB3YXMgZGlzcmVnYXJkaW5nIHRoZSBub3RpY2VzLCB3aGF0IGF1dGhvcml0eSBkbyB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGNvbmZlciBvbiB5b3Ugb3IgZXZlbiBvbiB0aGUgYXJjaG9uIGhpbXNlbGY/IFRoZSBhdXRob3JpdHkgdG8gYmlkIHRoZSBhdHRlbmRhbnRzCiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlIG1lLCBidXQgbm90IHRvIHN0cmlrZSBtZSB5b3Vyc2VsZi4gSWYgSSBzdGlsbCByZWZ1c2UgdG8gZ28sIHlvdSBtYXkKICAgICAgICAgICAgICAgICAgICBpbXBvc2UgYSBmaW5lOyBhbnl0aGluZyByYXRoZXIgdGhhbiB0b3VjaCBtZSB3aXRoIHlvdXIgb3duIGhhbmQ7IGZvciB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGhhdmUgdGFrZW4gZXZlcnkgcHJlY2F1dGlvbiB0byBzYXZlIGEgY2l0aXplbiBmcm9tIGJlaW5nIGluc3VsdGVkIGluIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBwZXJzb24u4oCdIFRoYXQgd2FzIGhpcyBhcmd1bWVudC4gWW91IGdhdmUgeW91ciB2b3RlcywgYnV0IHRoZSBhY2N1c2VyCiAgICAgICAgICAgICAgICAgICAgZGllZCBiZWZvcmUgaGUgY291bGQgYnJpbmcgdGhlIGNhc2UgYmVmb3JlIGEganVyeS4gPC90cmFuc2xhdGlvbj4="
translation['21.180'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODAiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBhbm90aGVyIG1hbiwgQ3Rlc2ljbGVzLCB3YXMgdW5hbmltb3VzbHkgY29uZGVtbmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIEFzc2VtYmx5IGZvciBwcm9mYW5pbmcgdGhlIGZlc3RpdmFsLCBhbmQgd2hlbiBoZSBjYW1lIGJlZm9yZSB5b3UsIHlvdQogICAgICAgICAgICAgICAgICAgIHNlbnRlbmNlZCBoaW0gdG8gZGVhdGgsIGJlY2F1c2UgaGUgY2FycmllZCBhIGxlYXRoZXJuIGxhc2ggaW4gdGhlIHByb2Nlc3Npb24KICAgICAgICAgICAgICAgICAgICBhbmQsIGJlaW5nIGRydW5rLCBzdHJ1Y2sgd2l0aCBpdCBhIHBlcnNvbmFsIGVuZW15IG9mIGhpcy4gSXQgd2FzIHRob3VnaHQgdGhhdAogICAgICAgICAgICAgICAgICAgIGluc29sZW5jZSwgbm90IGRyaW5rLCBwcm9tcHRlZCB0aGUgc3Ryb2tlLCBhbmQgdGhhdCBoZSBzZWl6ZWQgdGhlIGV4Y3VzZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW9uIGFuZCBoaXMgb3duIGRydW5rZW5uZXNzIHRvIGNvbW1pdCB0aGUgb2ZmZW5jZSBvZiB0cmVhdGluZyBmcmVlbWVuCiAgICAgICAgICAgICAgICAgICAgbGlrZSBzbGF2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['21.181'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IEkgYW0gY2VydGFpbiwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBldmVyeW9uZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGFkbWl0IHRoYXQgdGhlIG9mZmVuY2VzIG9mIE1laWRpYXMgd2VyZSBtdWNoIG1vcmUgc2VyaW91cyB0aGFuIHRob3NlIG9mIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiwgb2Ygd2hvbSBvbmUsIGFzIEkgaGF2ZSBzaG93biwgZm9yZmVpdGVkIHRoZSBkYW1hZ2VzIGhlIGhhZCBhbHJlYWR5CiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQsIHdoaWxlIHRoZSBvdGhlciB3YXMgYWN0dWFsbHkgcHVuaXNoZWQgd2l0aCBkZWF0aC4gRm9yIE1laWRpYXMsIG5vdAogICAgICAgICAgICAgICAgICAgIGJlaW5nIGluIGEgcHJvY2Vzc2lvbiwgbm90IGhhdmluZyB3b24gYSBzdWl0LCBub3QgYWN0aW5nIGFzIGFzc2Vzc29yLCBoYXZpbmcgaW4KICAgICAgICAgICAgICAgICAgICBmYWN0IG5vIG90aGVyIG1vdGl2ZSB0aGFuIGluc29sZW5jZSwgYmVoYXZlZCB3b3JzZSB0aGFuIGFueSBvZiB0aGVtLiBBYm91dCB0aGVtCiAgICAgICAgICAgICAgICAgICAgSSB3aWxsIHNheSBubyBtb3JlOyA8L3RyYW5zbGF0aW9uPg=="
translation['21.182'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IFB5cnJodXMsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIG9uZSBvZiB0aGUgRXRlb2J1dGFkYWUsCiAgICAgICAgICAgICAgICAgICAgd2hvIHdhcyBpbmRpY3RlZCBmb3Igc2VydmluZyBvbiBhIGp1cnkgd2hlbiBoZSB3YXMgaW4gZGVidCB0byB0aGUgVHJlYXN1cnksIHdhcwogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgYnkgc29tZSBvZiB5b3UgdG8gZGVzZXJ2ZSBjYXBpdGFsIHB1bmlzaG1lbnQsIGFuZCBoZSB3YXMgY29udmljdGVkIGluCiAgICAgICAgICAgICAgICAgICAgeW91ciBjb3VydCBhbmQgcHV0IHRvIGRlYXRoLiBBbmQgeWV0IGl0IHdhcyBmcm9tIHBvdmVydHksIG5vdCBmcm9tIGluc29sZW5jZSwKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHRyaWVkIHRvIGdldCB0aGUganVyeW1hbidzIGZlZS4gQW5kIEkgY291bGQgbWVudGlvbiBtYW55IG90aGVycyB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHB1dCB0byBkZWF0aCBvciBkaXNmcmFuY2hpc2VkIGZvciBmYXIgc2xpZ2h0ZXIgb2ZmZW5jZXMgdGhhbiB0aG9zZSBvZiBNZWlkaWFzLgogICAgICAgICAgICAgICAgICAgIFlvdSB5b3Vyc2VsdmVzLCBBdGhlbmlhbnMsIGZpbmVkIFNtaWNydXMgdGVuIHRhbGVudHMgYW5kIFNjaXRvbiBhIHNpbWlsYXIgc3VtLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgaGUgd2FzIGFkanVkZ2VkIHRvIGJlIHByb3Bvc2luZyB1bmNvbnN0aXR1dGlvbmFsIG1lYXN1cmVzOyB5b3UgaGFkIG5vCiAgICAgICAgICAgICAgICAgICAgcGl0eSBmb3IgdGhlaXIgY2hpbGRyZW4gb3IgZnJpZW5kcyBhbmQgcmVsYXRpb25zLCBvciBmb3IgYW55IG9mIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZCB0aGVtIGluIGNvdXJ0LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.183'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODMiIHVuaXQ9InNlY3Rpb24iIC8+RG8gbm90LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGRpc3BsYXkgc3VjaCBhbmdlciB3aGVuIHBlb3BsZSBtYWtlIHVuY29uc3RpdHV0aW9uYWwgcHJvcG9zYWxzLCBhbmQgc3VjaAogICAgICAgICAgICAgICAgICAgIGluZHVsZ2VuY2Ugd2hlbiBub3QgdGhlaXIgcHJvcG9zYWxzLCBidXQgdGhlaXIgYWN0cyBhcmUgdW5jb25zdGl0dXRpb25hbC4gRm9yIG5vCiAgICAgICAgICAgICAgICAgICAgbWVyZSB3b3JkcyBhbmQgdGVybXMgY2FuIGJlIHNvIGdhbGxpbmcgdG8gdGhlIGdyZWF0IG1hc3Mgb2YgeW91IGFzIHRoZSBjb25kdWN0CiAgICAgICAgICAgICAgICAgICAgb2YgYSBtYW4gd2hvIHBlcnNpc3RlbnRseSBpbnN1bHRzIGFueSBjaXRpemVuIHdobyBjcm9zc2VzIGhpcyBwYXRoLiBCZXdhcmUsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCBvZiBiZWFyaW5nIHRoaXMgdGVzdGltb255IGFnYWluc3QgeW91cnNlbHZlcywgdGhhdCBpZiB5b3UgZGV0ZWN0IGEKICAgICAgICAgICAgICAgICAgICBtYW4gb2YgdGhlIG1pZGRsZSBjbGFzcyBvciBhIGZyaWVuZCBvZiB0aGUgcGVvcGxlIGNvbW1pdHRpbmcgYW4gb2ZmZW5jZSwgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBuZWl0aGVyIHBpdHkgbm9yIHJlcHJpZXZlIGhpbSwgYnV0IHdpbGwgcHVuaXNoIGhpbSB3aXRoIGRlYXRoIG9yCiAgICAgICAgICAgICAgICAgICAgZGlzZnJhbmNoaXNlbWVudCwgd2hpbGUgeW91IGFyZSByZWFkeSB0byBwYXJkb24gdGhlIGluc29sZW5jZSBvZiBhIHJpY2ggbWFuLgogICAgICAgICAgICAgICAgICAgIFNwYXJlIHVzIHRoYXQgaW5qdXN0aWNlLCBhbmQgc2hvdyB5b3VyIGluZGlnbmF0aW9uIGltcGFydGlhbGx5IGFnYWluc3QgYWxsCiAgICAgICAgICAgICAgICAgICAgb2ZmZW5kZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.184'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlIGFyZSBzb21lIG90aGVyIHBvaW50cyB0aGF0IEkgY29uc2lkZXIgbm8gbGVzcyBuZWNlc3NhcnkgdG8gbWVudGlvbiB0aGFuCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hpY2ggSSBoYXZlIGFscmVhZHkgcHV0IGJlZm9yZSB5b3UuIEkgd2lsbCBtZW50aW9uIHRoZW0gYW5kIGRpc2N1c3MgdGhlbQogICAgICAgICAgICAgICAgICAgIGJyaWVmbHkgYmVmb3JlIEkgc2l0IGRvd24uIFRoZSBsZW5pZW5jeSBvZiB5b3VyIGRpc3Bvc2l0aW9uLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyBhIGdyZWF0IGFzc2V0IGFuZCBhZHZhbnRhZ2UgdG8KICAgICAgICAgICAgICAgICAgICBhbGwgd3Jvbmdkb2Vycy4gR2l2ZSBtZSwgdGhlbiwgeW91ciBhdHRlbnRpb24gd2hpbGUgSSBzaG93IHRoYXQgeW91IGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICByaWdodCB0byBhZG1pdCBNZWlkaWFzIHRvIHRoZSBsZWFzdCBzaGFyZSBpbiB0aGF0IGFkdmFudGFnZS4gTXkgdmlldyBpcyB0aGF0IGFsbAogICAgICAgICAgICAgICAgICAgIG1lbiBkdXJpbmcgdGhlaXIgbGl2ZXMgcGF5IGNvbnRyaWJ1dGlvbnMgdG8gdGhlaXIgb3duIGZvcnR1bmVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDIxLjEwMSIgdmFsaWQ9InllcyI+RGVtLiAyMS4xMDE8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBub3Qgb25seSB0aG9zZSB3aGljaCBhcmUgYWN0dWFsbHkgY29sbGVjdGVkIGFuZCBwYWlkIGluLCBidXQgb3RoZXJzIGFsc28uCiAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEuMTAxIiB2YWxpZD0ieWVzIj5EZW0uIDIxLjEwMTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['21.185'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluc3RhbmNlLCBvbmUgb2YgdXMgaXMgbW9kZXJhdGUsCiAgICAgICAgICAgICAgICAgICAga2luZGx5IGRpc3Bvc2VkIGFuZCBtZXJjaWZ1bDogaGUgZGVzZXJ2ZXMgdG8gcmVjZWl2ZSBhbiBlcXVpdmFsZW50IHJldHVybiBmcm9tCiAgICAgICAgICAgICAgICAgICAgYWxsLCBpZiBoZSBldmVyIGZhbGxzIGludG8gd2FudCBvciBkaXN0cmVzcy4gWW9uZGVyIGlzIGFub3RoZXIsIHdobyBpcyBzaGFtZWxlc3MKICAgICAgICAgICAgICAgICAgICBhbmQgaW5zdWx0aW5nLCB0cmVhdGluZyBvdGhlcnMgYXMgaWYgdGhleSB3ZXJlIGJlZ2dhcnMsIHRoZSBzY3VtIG9mIHRoZSBlYXJ0aCwKICAgICAgICAgICAgICAgICAgICBtZXJlIG5vYm9kaWVzOiBoZSBkZXNlcnZlcyB0byBiZSBwYWlkIHdpdGggdGhlIHNhbWUgbWVhc3VyZSB0aGF0IGhlIGhhcyBtZXRlZCB0bwogICAgICAgICAgICAgICAgICAgIG90aGVycy4gSWYgeW91IHdpbGwgY29uc2VudCB0byBsb29rIGF0IGl0IGluIGEgdHJ1ZSBsaWdodCwgeW91IHdpbGwgZmluZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcywgYW5kIG5vdCB0aGUgZm9ybWVyLCBpcyB0aGUga2luZCBvZiBjb250cmlidXRpb24gdGhhdCBNZWlkaWFzIGhhcyBtYWRlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.186'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBJIGtub3cKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHdpbGwgc2V0IHVwIGEgd2FpbCwgd2l0aCBoaXMgY2hpbGRyZW4gZ3JvdXBlZCBhYm91dCBoaW0sIGFuZCB3aWxsIG1ha2UgYQogICAgICAgICAgICAgICAgICAgIGxvbmcgYW5kIGh1bWJsZSBhcHBlYWwsIHdlZXBpbmcgYW5kIG1ha2luZyBoaW1zZWxmIGFzIHBpdGlhYmxlIGEgZmlndXJlIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgY2FuLiBCdXQgdGhlIG1vcmUgaGUgaHVtaWxpYXRlcyBoaW1zZWxmLCBBdGhlbmlhbnMsIHRoZSBtb3JlIGhlIGRlc2VydmVzIHlvdXIKICAgICAgICAgICAgICAgICAgICBoYXRyZWQuIFdoeSBzbz8gSWYgaW4gaGlzIHBhc3QgbGlmZSBoZSB3YXMgc28gYnJ1dGFsIGFuZCB2aW9sZW50IGJlY2F1c2UgaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZSBmb3IgaGltIHRvIGJlIGh1bWJsZSwgaXQgd291bGQgYmUgcmlnaHQgdG8gYWJhdGUgc29tZSBvZiB5b3VyIGFuZ2VyCiAgICAgICAgICAgICAgICAgICAgYXMgYSBjb25jZXNzaW9uIHRvIGhpcyBuYXR1cmFsIHRlbXBlciBhbmQgdG8gdGhlIGRlc3RpbnkgdGhhdCBtYWRlIGhpbSB0aGUgbWFuCiAgICAgICAgICAgICAgICAgICAgaGUgaXM7IGJ1dCBpZiBoZSBrbm93cyBob3cgdG8gYmVoYXZlIGRpc2NyZWV0bHkgd2hlbiBoZSBsaWtlcywgYnV0IGhhcwogICAgICAgICAgICAgICAgICAgIGRlbGliZXJhdGVseSBjaG9zZW4gdGhlIG9wcG9zaXRlIGxpbmUgb2YgY29uZHVjdCwgaXQgaXMgc3VyZWx5IG9idmlvdXMgdGhhdCwgaWYKICAgICAgICAgICAgICAgICAgICBoZSBzbGlwcyB0aHJvdWdoIHlvdXIgZmluZ2VycyBub3csIGhlIHdpbGwgb25jZSBtb3JlIHByb3ZlIGhpbXNlbGYgdGhlIG1hbiB5b3UKICAgICAgICAgICAgICAgICAgICBrbm93IHNvIHdlbGwuIDwvdHJhbnNsYXRpb24+"
translation['21.187'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODciIHVuaXQ9InNlY3Rpb24iIC8+UGF5IG5vIGF0dGVudGlvbiB0byBoaW07IGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGxldCB0aGUgcHJlc2VudCBjcmlzaXMgaW4gaGlzIGFmZmFpcnMsIGV4cHJlc3NseSBpbnZlbnRlZCBieSBoaW0sIGNhcnJ5IG1vcmUKICAgICAgICAgICAgICAgICAgICB3ZWlnaHQgYW5kIGluZmx1ZW5jZSB3aXRoIHlvdSB0aGFuIHRoZSB3aG9sZSBjb3Vyc2Ugb2YgaGlzIGxpZmUsIG9mIHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgZGlyZWN0IGtub3dsZWRnZS4gSSBoYXZlIG5vIGNoaWxkcmVuIHRvIHBvc2UgYmVmb3JlIHlvdSwgd2hpbGUgSSB3ZWVwIGFuZAogICAgICAgICAgICAgICAgICAgIHdhaWwgb3ZlciB0aGVtIGZvciB0aGUgaW5zdWx0cyBJIGhhdmUgcmVjZWl2ZWQuIEZvciB0aGF0IHJlYXNvbiBzaGFsbCBJLCB0aGUKICAgICAgICAgICAgICAgICAgICB2aWN0aW0sIGJlIG9mIGxlc3MgYWNjb3VudCBpbiB5b3VyIGNvdXJ0IHRoYW4gdGhlIHBlcnBldHJhdG9yIG9mIHRoZSB3cm9uZz8gSXQKICAgICAgICAgICAgICAgICAgICBtdXN0IG5vdCBiZS4gPC90cmFuc2xhdGlvbj4="
translation['21.188'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODgiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBNZWlkaWFzLCB3aXRoIGhpcyBjaGlsZHJlbgogICAgICAgICAgICAgICAgICAgIHJvdW5kIGhpbSwgY2FsbHMgeW91IHRvIGNhc3QgeW91ciB2b3RlcyBmb3IgdGhlbSwgdGhlbiB5b3UgbXVzdCBpbWFnaW5lIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIGFtIHN0YW5kaW5nIGhlcmUgd2l0aCB0aGUgbGF3cyBieSBteSBzaWRlIGFuZCB0aGUgb2F0aCB0aGF0IHlvdSBoYXZlIHN3b3JuLAogICAgICAgICAgICAgICAgICAgIGRlbWFuZGluZyBhbmQgaW1wbG9yaW5nIGVhY2ggb2YgeW91IHRvIHZvdGUgZm9yIHRoZW0uIEl0IGlzIGluIGV2ZXJ5IHdheSBtb3JlCiAgICAgICAgICAgICAgICAgICAganVzdCB0aGF0IHlvdSBzaG91bGQgc2lkZSB3aXRoIHRoZSBsYXdzIHRoYW4gd2l0aCB0aGlzIG1hbi4gVGhlIGxhd3MsIEF0aGVuaWFucywKICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBzd29ybiB0byBvYmV5OyB0aHJvdWdoIHRoZSBsYXdzIHlvdSBlbmpveSB5b3VyIGVxdWFsIHJpZ2h0czsgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyB5b3Ugb3dlIGV2ZXJ5IGJsZXNzaW5nIHRoYXQgaXMgeW91cnPigJRub3QgdG8gTWVpZGlhcyBub3IgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gb2YgTWVpZGlhcy4gPC90cmFuc2xhdGlvbj4="
translation['21.189'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBlcmhhcHMgaGUgd2lsbCBzYXkgb2YgbWUsIOKAnFRoaXMgbWFuIGlzIGFuCiAgICAgICAgICAgICAgICAgICAgb3JhdG9yLuKAnSBJZiBhbiBvcmF0b3IgaXMgb25lIHdobyBvZmZlcnMgeW91IHN1Y2ggY291bnNlbCBhcyBoZSB0aGlua3MKICAgICAgICAgICAgICAgICAgICBleHBlZGllbnQgZm9yIHlvdSwgeWV0IHN0b3BzIHNob3J0IG9mIHBlc3RlcmluZyBvciBidWxseWluZyB5b3UsIHRoZW4gZm9yIG15CiAgICAgICAgICAgICAgICAgICAgcGFydCBJIHdvdWxkIG5laXRoZXIgc2h1biBub3IgZGlzY2xhaW0gdGhhdCB0aXRsZS4gQnV0IGlmIGJ5IG9yYXRvciBoZSBtZWFucyBvbmUKICAgICAgICAgICAgICAgICAgICBvZiB0aG9zZSBzcGVha2VycyBzdWNoIGFzIHlvdSBhbmQgSSBzbyBvZnRlbiBzZWUsIG1lbiB3aG8gaGF2ZSBzaGFtZWxlc3NseQogICAgICAgICAgICAgICAgICAgIGVucmljaGVkIHRoZW1zZWx2ZXMgYXQgeW91ciBleHBlbnNlLCBJIGNhbm5vdCBiZSBvbmUsIGZvciBJIGhhdmUgbmV2ZXIgcmVjZWl2ZWQKICAgICAgICAgICAgICAgICAgICBhIHBlbm55IGZyb20geW91IGFuZCBJIGhhdmUgc3BlbnQgdXBvbiB5b3UgYWxsIGJ1dCBhIHRyaWZsZSBvZiBteSBmb3J0dW5lLiBZZXQKICAgICAgICAgICAgICAgICAgICBldmVuIGlmIEkgd2VyZSB0aGUgbW9zdCB1bnNjcnVwdWxvdXMgb2YgdGhhdCBnYW5nLCBJIG91Z2h0IHJhdGhlciB0byBiZSBwdW5pc2hlZAogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgbGF3cyB0aGFuIGluc3VsdGVkIGluIHRoZSBwZXJmb3JtYW5jZSBvZiBhIHB1YmxpYyBzZXJ2aWNlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.190'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTAiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBhZ2Fpbiwgbm9uZSBvZiB0aGVzZSBvcmF0b3JzCiAgICAgICAgICAgICAgICAgICAgc3VwcG9ydHMgbWUgaW4gdGhpcyB0cmlhbDsgbm9yIGRvIEkgYmxhbWUgdGhlbSwgZm9yIEkgaGF2ZSBuZXZlciBzYWlkIGEgd29yZCBpbgogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBpbiBzdXBwb3J0IG9mIG9uZSBvZiB0aGVtLiBJIG1ha2UgaXQgYSBmaXhlZCBydWxlIHRvIHRha2UgbXkgb3duIGxpbmUsCiAgICAgICAgICAgICAgICAgICAgc3BlYWtpbmcgYW5kIGFjdGluZyBpbiB3aGF0ZXZlciB3YXkgSSBiZWxpZXZlIHRvIGJlIGZvciB5b3VyIGFkdmFudGFnZS4gQnV0IHlvdQogICAgICAgICAgICAgICAgICAgIHdpbGwgc2VlIHZlcnkgc29vbiB0aGF0IE1laWRpYXMgaGFzIGFsbCB0aGUgb3JhdG9ycyBpbiB0dXJuIHJhbmdlZCBvbiBoaXMgc2lkZS4KICAgICAgICAgICAgICAgICAgICBZZXQgaXMgaXQgZmFpciBpbiBoaW0gdG8gYnJhbmQgbWUgd2l0aCB0aGUgcmVwcm9hY2ggb2YgdGhhdCB0aXRsZSBhbmQgdGhlbiB0bwogICAgICAgICAgICAgICAgICAgIGRlcGVuZCBvbiB0aGVzZSB2ZXJ5IG1lbiB0byByZXNjdWUgaGltPyA8L3RyYW5zbGF0aW9uPg=="
translation['21.191'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBlcmhhcHMgdG9vIGhlIHdpbGwgc2F5IHNvbWV0aGluZyBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgc29ydDsgdGhhdCBteSBwcmVzZW50IHNwZWVjaCBpcyBhbGwgY2FyZWZ1bGx5IHRob3VnaHQgb3V0IGFuZCBwcmVwYXJlZC4gSSBhZG1pdCwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIHRoYXQgSSBoYXZlIHRob3VnaHQgaXQgb3V0LCBhbmQgSSBzaG91bGQgbm90IGRyZWFtIG9mIGRlbnlpbmcgaXQ7CiAgICAgICAgICAgICAgICAgICAgeWVzLCBhbmQgSSBoYXZlIHNwZW50IGFsbCBwb3NzaWJsZSBjYXJlIG9uIGl0LiBJIHNob3VsZCBiZSBhIHBvb3IgY3JlYXR1cmUgaWYKICAgICAgICAgICAgICAgICAgICBhbGwgbXkgd3JvbmdzLCBwYXN0IGFuZCBwcmVzZW50LCBsZWZ0IG1lIGNhcmVsZXNzIG9mIHdoYXQgSSB3YXMgZ29pbmcgdG8gc2F5IHRvCiAgICAgICAgICAgICAgICAgICAgeW91IGFib3V0IHRoZW0uIFlldCB0aGUgcmVhbCBjb21wb3NlciBvZiBteSBzcGVlY2ggaXMgTWVpZGlhcy4gPC90cmFuc2xhdGlvbj4="
translation['21.192'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG1hbiB3aG8gaGFzIGZ1cm5pc2hlZCB0aGUgZmFjdHMgd2l0aCB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICBzcGVlY2hlcyBkZWFsIG91Z2h0IGluIHN0cmljdCBqdXN0aWNlIHRvIGJlYXIgdGhhdCByZXNwb25zaWJpbGl0eSwgYW5kIG5vdCB0aGUKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvIGhhcyBkZXZvdGVkIHRob3VnaHQgYW5kIGNhcmUgdG8gbGF5IGFuIGhvbmVzdCBjYXNlIGJlZm9yZSB5b3UgdG9kYXkuCiAgICAgICAgICAgICAgICAgICAgVGhhdCBpcyB3aGF0IEkgYW0gZG9pbmcsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IHRvIHRoYXQgSSBwbGVhZCBndWlsdHkuIEFzIGZvciBNZWlkaWFzLCBoZSBoYXMgcHJvYmFibHkKICAgICAgICAgICAgICAgICAgICBuZXZlciBpbiBoaXMgbGlmZSB0cm91YmxlZCBoaW1zZWxmIGFib3V0IGhvbmVzdHksIGZvciBpZiBpdCBoYWQgZW50ZXJlZCBoaXMgaGVhZAogICAgICAgICAgICAgICAgICAgIGV2ZW4gZm9yIGEgbW9tZW50IHRvIGNvbnNpZGVyIHN1Y2ggYSB0aGluZywgaGUgd291bGQgbm90IGhhdmUgbWlzc2VkIGl0IHNvCiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVseSBpbiBwcmFjdGljZS4gPC90cmFuc2xhdGlvbj4="
translation['21.193'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFnYWluLCBJIGV4cGVjdCB0aGF0IGhlIHdpbGwgbm90IHNocmluayBmcm9tIHZpbGlmeWluZyB0aGUKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgYW5kIHRoZSBBc3NlbWJseSwgYnV0IHdpbGwgcmVwZWF0IHdoYXQgaGUgaGFkIHRoZSBlZmZyb250ZXJ5IHRvIHNheSB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhlIHBsYWludCB3YXMgZmlyc3QgYnJvdWdodCBpbjogdGhhdCB0aGUgbWVldGluZyB3YXMgY29tcG9zZWQgb2YgbWVuIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBzdGF5ZWQgYXQgaG9tZSB3aGVuIHRoZXkgb3VnaHQgdG8gaGF2ZSBnb25lIHRvIHRoZSBmcm9udCBhbmQgd2hvIGhhZCBsZWZ0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcG9zdHMgdW5ndWFyZGVkLCBhbmQgdGhhdCBoZSB3YXMgY29uZGVtbmVkIGJ5IHRoZSB2b3RlcyBvZiBjaG9ydXMtbWVuIGFuZCBhbGllbnMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGxpa2UuIDwvdHJhbnNsYXRpb24+"
translation['21.194'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTQiIHVuaXQ9InNlY3Rpb24iIC8+QXMgdGhvc2Ugb2YgeW91IHdobyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBrbm93LCBnZW50bGVtZW4sIGhlIGhhZCByaXNlbiBvbiB0aGF0IG9jY2FzaW9uIHRvIHN1Y2ggYSBoZWlnaHQgb2YKICAgICAgICAgICAgICAgICAgICBicmF2YWRvIGFuZCBpbXB1ZGVuY2UgdGhhdCwgYnkgYWJ1c2luZyBhbmQgdGhyZWF0ZW5pbmcgYW5kIHR1cm5pbmcgaGlzIGdsYW5jZSB0bwogICAgICAgICAgICAgICAgICAgIGFueSBxdWFydGVyIG9mIHRoZSBBc3NlbWJseSB0aGF0IHdhcyBpbmNsaW5lZCB0byBiZSBvYnN0cmVwZXJvdXMsIGhlIHRob3VnaHQgaGUKICAgICAgICAgICAgICAgICAgICBjb3VsZCBicm93YmVhdCB0aGUgd2hvbGUgYm9keSBvZiBjaXRpemVucy4gVGhhdCwgSSB0aGluaywgbXVzdCBzdXJlbHkgbWFrZSBoaXMKICAgICAgICAgICAgICAgICAgICB0ZWFycyB0b2RheSBzZWVtIHJpZGljdWxvdXMuIEV4ZWNyYWJsZSB3cmV0Y2gsIHdoYXQgaGF2ZSB5b3UgdG8gc2F5PyA8L3RyYW5zbGF0aW9uPg=="
translation['21.195'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTUiIHVuaXQ9InNlY3Rpb24iIC8+V2lsbCB5b3UgY2xhaW0gcGl0eSBmb3IgeW91ciBjaGlsZHJlbiBhbmQgeW91cnNlbGYKICAgICAgICAgICAgICAgICAgICBvciBhIGtpbmRseSBpbnRlcmVzdCBpbiB5b3VyIGZvcnR1bmVzIGZyb20gdGhlc2UgbWVuIHdob20geW91IGhhdmUgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgIGluc3VsdGVkIHB1YmxpY2x5PyBBcmUgeW91IGFsb25lIG9mIGxpdmluZyBtZW4gcHJpdmlsZWdlZCB0byBiZSBpbiB5b3VyIGRhaWx5CiAgICAgICAgICAgICAgICAgICAgbGlmZSBzbyBub3RvcmlvdXNseSBwb3NzZXNzZWQgb2YgdGhlIGRlbW9uIG9mIGFycm9nYW5jZSB0aGF0IGV2ZW4gdGhvc2Ugd2hvIGhhdmUKICAgICAgICAgICAgICAgICAgICBubyBkZWFsaW5ncyB3aXRoIHlvdSBhcmUgZXhhc3BlcmF0ZWQgYnkgeW91ciBhc3N1cmFuY2UsIHlvdXIgdG9uZXMgYW5kIGdlc3R1cmVzLAogICAgICAgICAgICAgICAgICAgIHlvdXIgcGFyYXNpdGVzLCB5b3VyIHdlYWx0aCBhbmQgeW91ciBpbnNvbGVuY2U7IGFuZCB0aGVuLCB0aGUgaW5zdGFudCB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgcHV0IG9uIHlvdXIgdHJpYWwgYXJlIHlvdSB0byBiZSBwaXRpZWQ/IDwvdHJhbnNsYXRpb24+"
translation['21.196'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTYiIHVuaXQ9InNlY3Rpb24iIC8+SXQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBpbmRlZWQgYSBncmVhdCBtZXRob2QgdGhhdCB5b3UgaGF2ZSBkZXZpc2VkLCBvciwgcmF0aGVyLCBhIGdyZWF0IHRyaWNrLAogICAgICAgICAgICAgICAgICAgIGlmIHlvdSBjb3VsZCBpbiBzbyBzaG9ydCBhIHRpbWUgbWFrZSB5b3Vyc2VsZiB0aGUgb2JqZWN0IG9mIHR3byBjb250cmFkaWN0b3J5CiAgICAgICAgICAgICAgICAgICAgc2VudGltZW50cywgcm91c2luZyByZXNlbnRtZW50IGJ5IHlvdXIgd2F5IG9mIGxpZmUgYW5kIGNvbXBhc3Npb24gYnkgeW91cgogICAgICAgICAgICAgICAgICAgIG11bW1lcmllcy4gWW91IGhhdmUgbm8gY29uY2VpdmFibGUgY2xhaW0gdG8gY29tcGFzc2lvbjsgbm8sIG5vdCBmb3IgYW4gaW5zdGFudC4KICAgICAgICAgICAgICAgICAgICBPbiB0aGUgY29udHJhcnksIGhhdHJlZCwgcmVzZW50bWVudCBhbmQgd3JhdGjigJR0aG9zZSBhcmUgd2hhdCB5b3VyCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCBjYWxscyBmb3IuIEJ1dCBsZXQgbWUgY29tZSBiYWNrIHRvIG15IHBvaW50LCB0aGF0IGhlIGludGVuZHMgdG8gYXJyYWlnbgogICAgICAgICAgICAgICAgICAgIHRoZSBwZW9wbGUgYW5kIHRoZSBBc3NlbWJseS4gPC90cmFuc2xhdGlvbj4="
translation['21.197'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTciIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHdoZW4gaGUgZG9lcwogICAgICAgICAgICAgICAgICAgIHNvLCBqdXN0IHJlZmxlY3QsIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgdGhhdCB0aGlzIHNhbWUgbWFuIGJyb3VnaHQgYWNjdXNhdGlvbnMKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoZSBjYXZhbHJ5IHdobyBoYWQgc2VydmVkIHdpdGggaGltLCBjb21pbmcgaW50byB0aGUgQXNzZW1ibHkgYWZ0ZXIgdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBzYWlsZWQgZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsT2x5bnRodXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE9seW50aHVzIj5PbHludGh1czwvcGxhY2VOYW1lPjsgYW5kIG5vdwogICAgICAgICAgICAgICAgICAgIG9uY2UgbW9yZSwgaGF2aW5nIHN0YXllZCBhdCBob21lLCBoZSB3aWxsIGFkZHJlc3MgaGlzIGRlbnVuY2lhdGlvbiBvZiB0aGUgcGVvcGxlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIG1lbiB3aG8gd2VyZSB0aGVuIGF3YXkgb24gc2VydmljZS4gQXJlIHlvdSwgdGhlbiwgcHJlcGFyZWQgdG8gYWRtaXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSwgd2hldGhlciBhdCBob21lIG9yIG9uIHNlcnZpY2UsIGFyZSB3aGF0IE1laWRpYXMgcHJvY2xhaW1zIHlvdSB0byBiZSwgb3Igb24KICAgICAgICAgICAgICAgICAgICB0aGUgY29udHJhcnkgdGhhdCBoZSBpcywgYW5kIGFsd2F5cyBoYXMgYmVlbiwgYW4gdW5oYWxsb3dlZCBydWZmaWFuPyBUaGF0IGlzIG15CiAgICAgICAgICAgICAgICAgICAgb3duIG9waW5pb24gb2YgaGltOyBbZm9yIGhvdyBlbHNlIGFyZSB3ZSB0byBkZXNjcmliZSBhIGNyZWF0dXJlIHdob20KICAgICAgICAgICAgICAgICAgICBoaXMgb3duIHRyb29wZXJzLCBoaXMgYnJvdGhlci1vZmZpY2VycyBhbmQgaGlzIGZyaWVuZHMgY2Fubm90IHN0b21hY2g/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.198'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTgiIHVuaXQ9InNlY3Rpb24iIC8+SSBzd2VhciBzb2xlbW5seSBieSBaZXVzLCBieSBBcG9sbG8sIGFuZAogICAgICAgICAgICAgICAgICAgIGJ5IEF0aGVuYeKAlGZvciBJIHdpbGwgc3BlYWsgb3V0LCB3aGF0ZXZlciB0aGUgcmVzdWx0IG1heQogICAgICAgICAgICAgICAgICAgIGJl4oCUZm9yIHdoZW4gdGhpcyBtYW4gd2FzIGdvaW5nIGFib3V0LCB0cnVtcGluZyB1cCB0aGUgc3RvcnkgdGhhdCBJIGhhZAogICAgICAgICAgICAgICAgICAgIGFiYW5kb25lZCB0aGUgcHJvc2VjdXRpb24sIEkgb2JzZXJ2ZWQgc2lnbnMgb2YgZGlzZ3VzdCBldmVuIGFtb25nIGhpcyBhcmRlbnQKICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZXJzLiBBbmQgYnkgaGVhdmVuISB0aGV5IGhhZCBzb21lIGV4Y3VzZSwgZm9yIHRoZXJlIGlzIG5vIHB1dHRpbmcgdXAgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBmZWxsb3c7IGhlIGNsYWltcyB0byBiZSB0aGUgb25seSByaWNoIG1hbiBhbmQgdGhlIG9ubHkgbWFuIHdobyBrbm93cyBob3cgdG8KICAgICAgICAgICAgICAgICAgICBzcGVhazsgYWxsIG90aGVycyBhcmUgaW4gaGlzIG9waW5pb24gb3V0Y2FzdHMsIGJlZ2dhcnMsIGJlbG93IHRoZSByYW5rIG9mIG1lbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.199'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTkiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgaGUgc3RhbmRzIG9uIHN1Y2ggYW4gZW1pbmVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBwcmlkZSwgd2hhdCBkbyB5b3UgdGhpbmsgaGUgd2lsbCBkbywgaWYgaGUgZXNjYXBlcyBub3c/IEkgd2lsbCB0ZWxsIHlvdSBob3cgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGtub3cgaXQ7IHlvdSBoYXZlIG9ubHkgdG8gb2JzZXJ2ZSB0aGUgc2lnbnMgdGhhdCBmb2xsb3dlZCB0aGUgYWR2ZXJzZQogICAgICAgICAgICAgICAgICAgIHZvdGUuXSBGb3Igd2hvIGlzIHRoZXJlIHRoYXQsIGlmIGFuIGFkdmVyc2Ugdm90ZSBoYWQgYmVlbiByZWNvcmRlZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBvbiBhIGNoYXJnZSBvZiBwcm9mYW5pbmcgdGhlIGZlYXN0LCBldmVuIGlmIHRoZXJlIGhhZCBiZWVuIG5vIGZ1cnRoZXIgc3VpdAogICAgICAgICAgICAgICAgICAgIHBlbmRpbmcgYW5kIG5vIGRhbmdlciBhaGVhZCzigJR3aG8gaXMgdGhlcmUsIEkgc2F5LCB0aGF0IHdvdWxkIG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgbWFkZSB0aGF0IGEgcmVhc29uIGZvciBlZmZhY2luZyBoaW1zZWxmIGFuZCBiZWhhdmluZyBkZWNlbnRseSwgYXQgYW55IHJhdGUgdW50aWwKICAgICAgICAgICAgICAgICAgICB0aGUgdGltZSBvZiB0aGUgdHJpYWwsIGlmIG5vdCBmb3IgZXZlciBhZnRlcj8gQW55b25lIGVsc2Ugd291bGQgaGF2ZSBhY3RlZCBzby4KICAgICAgICAgICAgICAgICAgICBCdXQgbm90IE1laWRpYXMuIDwvdHJhbnNsYXRpb24+"
translation['21.200'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDAiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGF0IGRheSBvbndhcmRzIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gdGFsa2luZywgcmFpbGluZywgYW5kIGJlbGxvd2luZy4gSXMgdGhlcmUgYW4gZWxlY3Rpb24gb24/IE1laWRpYXMgb2YKICAgICAgICAgICAgICAgICAgICBBbmFneXJ1cyBpcyBhIGNhbmRpZGF0ZS4gSGUgaXMgdGhlIGFjY3JlZGl0ZWQgYWdlbnQgb2YgUGx1dGFyY2h1czsgaGUga25vd3MgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlY3JldHM7IHRoZSBjaXR5IGNhbm5vdCBob2xkIGhpbS4gSGlzIG9iamVjdCBpbiBhbGwgdGhpcyBpcyBvYnZpb3VzO2hlCiAgICAgICAgICAgICAgICAgICAgd2FudHMgdG8gcHJvY2xhaW0gdGhhdCDigJxJIGFtIG5vdCBhIHBpbiB0aGUgd29yc2UgZm9yIHRoZSB2b3RlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZTogSSBoYXZlIG5vIGZlYXJzIG9yIG1pc2dpdmluZ3MgYWJvdXQgdGhlIHBlbmRpbmcgYWN0aW9uLuKAnQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.201'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGEgbWFuIHdobyB0aGlua3MgaXQgZGVncmFkaW5nIHRvIHNob3cKICAgICAgICAgICAgICAgICAgICBhbnkgZmVhciBvZiB5b3UsIEF0aGVuaWFucywgYW5kIGEgZGFzaGluZyB0aGluZyB0byBzbmFwIGhpcyBmaW5nZXJzIGF0IHlvdSwgZG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCBzdWNoIGEgbWFuIGRlc2VydmUgZGVhdGggdGVuIHRpbWVzIG92ZXI/IFtIZSByZWFsbHkgYmVsaWV2ZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGhhdmUgbm8gaG9sZCBvdmVyIGhpbS4gUmljaCwgYXJyb2dhbnQsIGhhdWdodHksIGxvdWQtdm9pY2VkLCB2aW9sZW50LAogICAgICAgICAgICAgICAgICAgIHNoYW1lbGVzcywgd2hlcmUgd2lsbCB5b3UgY2F0Y2ggaGltIGlmIGhlIGdpdmVzIHlvdSB0aGUgc2xpcCBub3c/XQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.202'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBpbiBteQogICAgICAgICAgICAgICAgICAgIG9waW5pb24sIGlmIGZvciBub3RoaW5nIGVsc2UsIHlldCBmb3IgdGhvc2UgaGFyYW5ndWVzIHRoYXQgaGUgZGVsaXZlcnMgYXQgZXZlcnkKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0eSBhbmQgZm9yIHRoZSBvY2Nhc2lvbnMgdGhhdCBoZSBjaG9vc2VzIGZvciB0aGVtLCBoZSB3b3VsZCBkZXNlcnZlIHRoZQogICAgICAgICAgICAgICAgICAgIHNldmVyZXN0IHBlbmFsdHkuIEZvciBvZiBjb3Vyc2UgeW91IGtub3cgdGhhdCBpZiBhbnkgd2VsY29tZSBuZXdzIGlzIGJyb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eSwgc3VjaCBhcyB3ZSBhbGwgcmVqb2ljZSB0byBoZWFyLCBNZWlkaWFzIGhhcyBuZXZlciBvbiBhbnkgb2YgdGhvc2UKICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbnMgYmVlbiBmb3VuZCBpbiB0aGUgcmFua3Mgb2YgdGhvc2Ugd2hvIHNoYXJlIGluIHRoZSBwdWJsaWMgc2F0aXNmYWN0aW9uCiAgICAgICAgICAgICAgICAgICAgb3IgdGhlIHB1YmxpYyByZWpvaWNpbmdzOyA8L3RyYW5zbGF0aW9uPg=="
translation['21.203'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDMiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGlmIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgc29tZXRoaW5nIHVudG93YXJkLCBzb21ldGhpbmcgdGhhdCBubyBvbmUgZWxzZSB3b3VsZCB3aXNoIHRvIGhlYXIsIGhlIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHRvIGp1bXAgdXAgYXQgb25jZSBhbmQgaGFyYW5ndWUgdGhlIHBlb3BsZSwgbWFraW5nIHRoZSB1dG1vc3Qgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdHkgYW5kIGVuam95aW5nIHRoZSBzaWxlbmNlIGJ5IHdoaWNoIHlvdSBzaG93IHlvdXIgZGlzdHJlc3MgYXQgd2hhdCBoYXMKICAgICAgICAgICAgICAgICAgICBoYXBwZW5lZC4g4oCcV2h5LCB0aGF0IGlzIHRoZSBzb3J0IG9mIG1lbiB5b3UgQXRoZW5pYW5zIGFyZS4gWW91IGRvIG5vdAogICAgICAgICAgICAgICAgICAgIHNlcnZlIGFicm9hZDsgeW91IHNlZSBubyBuZWVkIHRvIHBheSB5b3VyIHByb3BlcnR5LXRheC4gQW5kIHRoZW4gZG8geW91IHdvbmRlcgogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91ciBhZmZhaXJzIGdvIHdyb25nPyBEbyB5b3UgdGhpbmsgSSBhbSBnb2luZyB0byBwYXkgbXkgcHJvcGVydHktdGF4IGFuZAogICAgICAgICAgICAgICAgICAgIHlvdSBzcGVuZCB0aGUgbW9uZXk/IERvIHlvdSB0aGluayBJIGFtIGdvaW5nIHRvIGZpdCBvdXQgd2FyLWdhbGxleXMgYW5kIHlvdQogICAgICAgICAgICAgICAgICAgIGRlY2xpbmUgdG8gZW1iYXJrIGluIHRoZW0/4oCdIDwvdHJhbnNsYXRpb24+"
translation['21.204'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDQiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBpcwogICAgICAgICAgICAgICAgICAgIGhvdyBoZSBpbnN1bHRzIHlvdSwgc2VpemluZyB0aGUgY2hhbmNlIHRvIHZvaWQgdGhlIHJhbmNvciBhbmQgdmVub20gdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHNlY3JldGVzIGluIGhpcyBoZWFydCBhZ2FpbnN0IHRoZSBtYXNzZXMsIGFzIGhlIG1vdmVzIGFib3V0IGFtb25nIHlvdS4gTm93IGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIGNoYW5jZSBmb3IgeW91LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIG5vdyB3aGVuIGhlIGNvbWVzIHdpdGggaGlzIGh1bWJ1ZyBhbmQgY2hpY2FuZXJ5LCB3aXRoIGhpcyBsYW1lbnRhdGlvbnMsIHRlYXJzCiAgICAgICAgICAgICAgICAgICAgYW5kIHByYXllcnMsIHRvIHRocm93IHRoaXMgYW5zd2VyIGluIGhpcyB0ZWV0aC4g4oCcWWVzLCBhbmQgdGhhdCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBzb3J0IG9mIG1hbiB5b3UgYXJlLCBNZWlkaWFzLiBZb3UgYXJlIGEgYnVsbHk7IHlvdSBjYW5ub3Qga2VlcCB5b3VyIGhhbmRzIHRvCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYuIFRoZW4gY2FuIHlvdSB3b25kZXIgaWYgeW91ciBldmlsIGRlZWRzIGJyaW5nIHlvdSB0byBhbiBldmlsIGVuZD8gRG8KICAgICAgICAgICAgICAgICAgICB5b3UgdGhpbmsgdGhhdCB3ZSBzaGFsbCBzdWJtaXQgdG8geW91IGFuZCB5b3Ugc2hhbGwgZ28gb24gYmVhdGluZyB1cz8gVGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGFjcXVpdCB5b3UgYW5kIHlvdSBzaGFsbCBuZXZlciBkZXNpc3Q/4oCdIDwvdHJhbnNsYXRpb24+"
translation['21.205'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFzIGZvciB0aGUgc3BlYWtlcnMgd2hvIHdpbGwKICAgICAgICAgICAgICAgICAgICBzdXBwb3J0IGhpbSwgdGhlaXIgb2JqZWN0LCBJIHN3ZWFyLCBpcyBub3Qgc28gbXVjaCB0byBvYmxpZ2UgaGltIGFzIHRvIGluc3VsdAogICAgICAgICAgICAgICAgICAgIG1lLCBvd2luZyB0byB0aGUgcGVyc29uYWwgcXVhcnJlbCB3aGljaCB0aGF0IG1hbiB0aGVyZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EZW1vc3RoZW5lcyBwb2ludHMgYXQgRXVidWx1cy4gVGhlIHNlbnRlbmNlIGlzIGNsdW1zeSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW4gZG91YnRmdWwgR3JlZWssIGFuZCBtYXkgYmUgY29ycnVwdC4gVGhpcyBhbmQgdGhlIHR3byBmb2xsb3dpbmcgc2VjdGlvbnMKICAgICAgICAgICAgICAgICAgICAgICAgYXJlIG9iZWxpemVkIGluIFMgYW5kIG90aGVyIGdvb2QgTXNzLjwvbm90ZT4gc2F5cyB0aGF0IEkgaGF2ZSB3aXRoIGhpbXNlbGYuCiAgICAgICAgICAgICAgICAgICAgSGUgaW5zaXN0cyB0aGF0IGl0IGlzIHNvLCB3aGV0aGVyIEkgYWRtaXQgaXQgb3Igbm90OyBidXQgaGUgaXMgd3JvbmcuIFRvbyBtdWNoCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyBpcyBhcHQgc29tZXRpbWVzIHRvIG1ha2UgcGVvcGxlIG92ZXJiZWFyaW5nLiBGb3Igd2hlbiBJLCBhZnRlciBhbGwgdGhhdAogICAgICAgICAgICAgICAgICAgIEkgaGF2ZSBzdWZmZXJlZCwgZG8gbm90IGFkbWl0IHRoYXQgaGUgaXMgbXkgZW5lbXksIHdoaWxlIGhlIHdpbGwgbm90IGFjY2VwdCBteQogICAgICAgICAgICAgICAgICAgIGRpc2NsYWltZXIsIGJ1dCBldmVuIGNvbmZyb250cyBtZSBpbiBhbm90aGVyJ3MgcXVhcnJlbCwgYW5kIGlzIHByZXBhcmVkIG5vdyB0bwogICAgICAgICAgICAgICAgICAgIG1vdW50IHRoZSBwbGF0Zm9ybSBhbmQgZGVtYW5kIHRoYXQgSSBzaGFsbCBldmVuIGZvcmZlaXQgbXkgY2xhaW0gdG8gdGhhdAogICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gd2hpY2ggdGhlIGxhd3MgYWZmb3JkIHRvIGFsbCwgaXMgaXQgbm90IGNsZWFyIHRoYXQgaGUgaGFzIGdyb3duCiAgICAgICAgICAgICAgICAgICAgb3ZlcmJlYXJpbmcgYW5kIGlzIHRvbyBwb3dlcmZ1bCB0byBzdWl0IHRoZSBpbnRlcmVzdHMgb2YgZWFjaCBvbmUgb2YgdXM/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.206'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDYiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIEF0aGVuaWFucywgRXVidWx1cyB3YXMgaW4KICAgICAgICAgICAgICAgICAgICBoaXMgc2VhdCBpbiB0aGUgdGhlYXRlciB3aGVuIHRoZSBwZW9wbGUgZ2F2ZSB0aGVpciB2b3RlIGFnYWluc3QgTWVpZGlhcywgYW5kCiAgICAgICAgICAgICAgICAgICAgeWV0LCBhcyB5b3Uga25vdywgaGUgbmV2ZXIgc3Rvb2QgdXAgd2hlbiBjYWxsZWQgdXBvbiBieSBuYW1lLCB0aG91Z2ggTWVpZGlhcwogICAgICAgICAgICAgICAgICAgIGJlZ2dlZCBhbmQgaW1wbG9yZWQgaGltIHRvIGRvIHNvLiBZZXQgaWYgaGUgdGhvdWdodCB0aGF0IHRoZSBwbGFpbnQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGFnYWluc3QgYW4gaW5ub2NlbnQgbWFuLCB0aGF0IHdhcyB0aGUgbW9tZW50IHRvIGhlbHAgaGltIGJ5IGhpcwogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSwgaWYgaGUgd2FzIHJlYWxseSBoaXMgZnJpZW5kO2J1dCBpZiBoZSB3aXRoaGVsZCBoaXMgc3VwcG9ydCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgaGUgaGFkIHByb25vdW5jZWQgaGltIGd1aWx0eSwgYnV0IGlzIG5vdyBnb2luZyB0byBhc2sgZm9yIGhpcyBhY3F1aXR0YWwsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBoZSBoYXMgZmFsbGVuIGZvdWwgb2YgbWUsIGl0IGlzIG5vdCB3ZWxsIHRoYXQgeW91IHNob3VsZCBodW1vciBoaW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.207'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDciIHVuaXQ9InNlY3Rpb24iIC8+SW4gYSBkZW1vY3JhY3kgdGhlcmUgbXVzdCBuZXZlciBiZSBhCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiBzbyBwb3dlcmZ1bCB0aGF0IGhpcyBzdXBwb3J0IGNhbiBlbnN1cmUgdGhhdCB0aGUgb25lIHBhcnR5IHN1Ym1pdHMgdG8KICAgICAgICAgICAgICAgICAgICBvdXRyYWdlcyBhbmQgdGhlIG90aGVyIGVzY2FwZXMgcHVuaXNobWVudC4gQnV0IGlmIHlvdSBhcmUgYW54aW91cyB0byBkbyBtZSBhbgogICAgICAgICAgICAgICAgICAgIGlsbCB0dXJuLCBFdWJ1bHVzLHRob3VnaCBJIHByb3Rlc3QgdGhhdCBJIGtub3cgbm90IHdoeSB5b3Ugc2hvdWxk4oCUeW91CiAgICAgICAgICAgICAgICAgICAgYXJlIGEgbWFuIG9mIGluZmx1ZW5jZSBhbmQgYSBzdGF0ZXNtYW47IHRha2UgYW55IGxlZ2FsIHZlbmdlYW5jZSB5b3UgbGlrZSBvbiBtZSwKICAgICAgICAgICAgICAgICAgICBidXQgZG8gbm90IGRlcHJpdmUgbWUgb2YgbXkgY29tcGVuc2F0aW9uIGZvciBpbGxlZ2FsIG91dHJhZ2VzLiBJZiB5b3UgZmluZCBpdAogICAgICAgICAgICAgICAgICAgIGltcG9zc2libGUgdG8gaGFybSBtZSBpbiB0aGF0IHdheSwgaXQgbWF5IGJlIHRha2VuIGFzIGEgcHJvb2Ygb2YgbXkgaW5ub2NlbmNlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3UgY2FuIHJlYWRpbHkgY2Vuc3VyZSBvdGhlcnMsIGJ1dCBmaW5kIG5vIGdyb3VuZCBvZiBjZW5zdXJlIGluIG1lLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.208'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBsZWFybmVkIHRoYXQgUGhpbGlwcGlkZXMgYW5kIE1uZXNhcmNoaWRlcyBhbmQgRGlvdGltdXMgb2YgRXVvbnltaWEgYW5kIHNvbWUKICAgICAgICAgICAgICAgICAgICBvdGhlciByaWNoIHRyaWVyYXJjaHMgd2lsbCBwbGVhZCB3aXRoIHlvdSBmb3IgaGlzIGFjcXVpdHRhbCwgY2xhaW1pbmcgaXQgYXMgYQogICAgICAgICAgICAgICAgICAgIGZhdm91ciBkdWUgdG8gdGhlbXNlbHZlcy4gSSB3b3VsZCBub3QgdXR0ZXIgYSB3b3JkIGluIGRpc3BhcmFnZW1lbnQgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW47IEkgc2hvdWxkIGluZGVlZCBiZSBtYWQgdG8gZG8gc286IGJ1dCBJIHdpbGwgdGVsbCB5b3UgaG93IHlvdSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIHJlZmxlY3QgYW5kIGNvbnNpZGVyLCB3aGVuIHRoZXkgbWFrZSB0aGVpciByZXF1ZXN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.209'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDkiIHVuaXQ9InNlY3Rpb24iIC8+U3VwcG9zZSwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVu4oCUbmV2ZXIgbWF5IGl0IHNvIGJlZmFsbCwgYXMgaW5kZWVkIGl0IG5ldmVyIHdpbGzigJRtYWRlCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBtYXN0ZXJzIG9mIHRoZSBTdGF0ZSwgYWxvbmcgd2l0aCBNZWlkaWFzIGFuZCBvdGhlcnMgbGlrZSBoaW07IGFuZAogICAgICAgICAgICAgICAgICAgIHN1cHBvc2UgdGhhdCBvbmUgb2YgeW91LCB3aG8gYXJlIG1lbiBvZiB0aGUgcGVvcGxlIGFuZCBmcmllbmRzIHRvIHBvcHVsYXIKICAgICAgICAgICAgICAgICAgICBnb3Zlcm5tZW50LCBoYXZpbmcgb2ZmZW5kZWQgb25lIG9mIHRoZXNlIG1lbizigJRub3Qgc28gc2VyaW91c2x5IGFzCiAgICAgICAgICAgICAgICAgICAgTWVpZGlhcyBvZmZlbmRlZCBtZSwgYnV0IGluIHNvbWUgc2xpZ2h0ZXIgZGVncmVl4oCUY2FtZSBiZWZvcmUgYSBqdXJ5CiAgICAgICAgICAgICAgICAgICAgcGFja2VkIHdpdGggbWVuIG9mIHRoYXQgY2xhc3M7IHdoYXQgcGFyZG9uLCB3aGF0IGNvbnNpZGVyYXRpb24gZG8geW91IHRoaW5rIGhlCiAgICAgICAgICAgICAgICAgICAgd291bGQgcmVjZWl2ZT8gVGhleSB3b3VsZCBiZSBwcm9tcHQgd2l0aCB0aGVpciBmYXZvdXIsIHdvdWxkIHRoZXkgbm90PyBXb3VsZAogICAgICAgICAgICAgICAgICAgIHRoZXkgaGVlZCB0aGUgcGV0aXRpb24gb2Ygb25lIG9mIHRoZSBjb21tb24gZm9saz8gV291bGQgbm90IHRoZWlyIGZpcnN0IHdvcmRzCiAgICAgICAgICAgICAgICAgICAgYmUsIOKAnFRoZSBrbmF2ZSEgVGhlIHNvcnJ5IHJhc2NhbCEgVG8gdGhpbmsgdGhhdCBoZSBzaG91bGQgaW5zdWx0IHVzCiAgICAgICAgICAgICAgICAgICAgYW5kIHN0aWxsIGRyYXcgYnJlYXRoISBIZSBvdWdodCB0byBiZSBvbmx5IHRvbyBoYXBweSBpZiBoZSBpcyBwZXJtaXR0ZWQgdG8KICAgICAgICAgICAgICAgICAgICBleGlzdOKAnT8gPC90cmFuc2xhdGlvbj4="
translation['21.210'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTAiIHVuaXQ9InNlY3Rpb24iIC8+RG8gbm90IHRoZXJlZm9yZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdHJlYXQgdGhlbSBvdGhlcndpc2UKICAgICAgICAgICAgICAgICAgICB0aGFuIGFzIHRoZXkgd291bGQgdHJlYXQgeW91LiBLZWVwIHlvdXIgcmVzcGVjdCwgbm90IGZvciB0aGVpciB3ZWFsdGggb3IgdGhlaXIKICAgICAgICAgICAgICAgICAgICByZXB1dGF0aW9uLCBidXQgZm9yIHlvdXJzZWx2ZXMuIFRoZXkgaGF2ZSBtYW55IGFkdmFudGFnZXMsIHdoaWNoIG5vIG9uZSBoaW5kZXJzCiAgICAgICAgICAgICAgICAgICAgdGhlbSBmcm9tIGVuam95aW5nOyB0aGVuIHRoZXkgaW4gdGhlaXIgdHVybiBtdXN0IG5vdCBoaW5kZXIgdXMgZnJvbSBlbmpveWluZyB0aGUKICAgICAgICAgICAgICAgICAgICBzZWN1cml0eSB3aGljaCB0aGUgbGF3cyBwcm92aWRlIGFzIG91ciBjb21tb24gYmlydGhyaWdodC4gPC90cmFuc2xhdGlvbj4="
translation['21.211'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTEiIHVuaXQ9InNlY3Rpb24iIC8+TWVpZGlhcyB3aWxsIHN1ZmZlciBubyBkaXN0cmVzc2luZyBoYXJkc2hpcCBpZiBoZSBzaGFsbCBjb21lCiAgICAgICAgICAgICAgICAgICAgdG8gcG9zc2VzcyBqdXN0IGFzIG11Y2ggYXMgdGhlIG1ham9yaXR5IG9mIHlvdSwgd2hvbSBoZSBub3cgaW5zdWx0cyBhbmQgY2FsbHMKICAgICAgICAgICAgICAgICAgICBiZWdnYXJzLCBhbmQgaWYgaGUgaXMgc3RyaXBwZWQgb2YgdGhlIHN1cGVyZmx1b3VzIHdlYWx0aCB0aGF0IGluY2l0ZXMgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgc3VjaCBpbnNvbGVuY2UuIFN1cmVseSBzdWNoIG1lbiBoYXZlIG5vIHJpZ2h0IHRvIGFzayBvZiB5b3UsIOKAnERvIG5vdAogICAgICAgICAgICAgICAgICAgIHRyeSB0aGUgY2FzZSBieSB0aGUgbGF3cywgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5OyBkbyBub3QgaGVscCB0aGUgbWFuIHdobyBoYXMKICAgICAgICAgICAgICAgICAgICBzdWZmZXJlZCBzZXJpb3VzIHdyb25nczsgZG8gbm90IG9ic2VydmUgeW91ciBvYXRoczsgZ3JhbnQgdXMgeW91ciB2ZXJkaWN0IGFzIGEKICAgICAgICAgICAgICAgICAgICBmYXZvdXIu4oCdIElmIHRoZXkgcGxlYWQgZm9yIE1laWRpYXMsIHRoYXQgaXMgd2hhdCB0aGVpciBwbGVhIHdpbGwgY29tZQogICAgICAgICAgICAgICAgICAgIHRvLCB0aG91Z2ggdGhlc2UgbWF5IG5vdCBiZSB0aGVpciBhY3R1YWwgd29yZHMuIDwvdHJhbnNsYXRpb24+"
translation['21.212'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmIHRoZXkgYXJlIGhpcyBmcmllbmRzIGFuZCB0aGluayBpdCBoYXJkIHRoYXQgaGUgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGJlIHJpY2gsIHdlbGwsIHRoZXkgYXJlIGV4dHJlbWVseSByaWNoIHRoZW1zZWx2ZXM7IHRoYXQgaXMgdGhlaXIgZ29vZAogICAgICAgICAgICAgICAgICAgIGZvcnR1bmUuIExldCB0aGVtIHNwYXJlIGhpbSBzb21lIG9mIHRoZWlyIG93biB3ZWFsdGgsIHRoYXQgeW91IG1heSBnaXZlIHlvdXIKICAgICAgICAgICAgICAgICAgICB2b3RlcyBob25lc3RseSwgYXMgeW91IHN3b3JlIHRvIGRvIHdoZW4geW91IGNhbWUgaW50byBjb3VydCwgYW5kIHRoYXQgdGhleSBtYXkKICAgICAgICAgICAgICAgICAgICBiZSBnZW5lcm91cyB0byBoaW0gYXQgdGhlaXIgb3duIGV4cGVuc2UsIGFuZCBub3QgYXQgdGhlIGV4cGVuc2Ugb2YgeW91ciBob25vci4KICAgICAgICAgICAgICAgICAgICBCdXQgaWYgdGhlc2UgbWVuIHdpdGggYWxsIHRoZWlyIG1vbmV5IGFyZSBub3QgcHJlcGFyZWQgdG8gc2FjcmlmaWNlIGl0LCBob3cgY2FuCiAgICAgICAgICAgICAgICAgICAgaXQgYmUgaG9ub3JhYmxlIGZvciB5b3UgdG8gc2FjcmlmaWNlIHlvdXIgb2F0aD8gPC90cmFuc2xhdGlvbj4="
translation['21.213'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFuIGltcG9zaW5nIG11c3RlciBvZiB3ZWFsdGh5CiAgICAgICAgICAgICAgICAgICAgbWVuLCB3aG9zZSBwcm9zcGVyaXR5IGhhcyByYWlzZWQgdGhlbSB0byBhcHBhcmVudCBpbXBvcnRhbmNlLCB3aWxsIGNvbWUgaW50bwogICAgICAgICAgICAgICAgICAgIGNvdXJ0IHRvIHBsZWFkIHdpdGggeW91LiBNZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBkbyBub3Qgc2FjcmlmaWNlIG1lIHRvIGFueSBvbmUgb2YgdGhlbTsgYnV0IGp1c3QgYXMKICAgICAgICAgICAgICAgICAgICBlYWNoIG9mIHRoZW0gd2lsbCBiZSB6ZWFsb3VzIGZvciBoaXMgcHJpdmF0ZSBpbnRlcmVzdHMgYW5kIGZvciB0aGUgZGVmZW5kYW50LCBzbwogICAgICAgICAgICAgICAgICAgIGJlIHplYWxvdXMgZm9yIHlvdXIgb3duIHNlbHZlcyBhbmQgZm9yIHRoZSBsYXdzLCBhcyB3ZWxsIGFzIGZvciBtZSB3aG8gaGF2ZSBmbGVkCiAgICAgICAgICAgICAgICAgICAgdG8geW91IGZvciByZWZ1Z2UsIGFuZCBjbGVhdmUgdG8gdGhlIG9waW5pb24gdGhhdCB5b3UgYWxyZWFkeSBob2xkLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.214'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTQiIHVuaXQ9InNlY3Rpb24iIC8+SWYsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGF0IHRoZSB0aW1lIG9mIHRoZSBwbGFpbnQgdGhlIHBlb3BsZSwgYWZ0ZXIgaGVhcmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBmYWN0cywgaGFkIGFjcXVpdHRlZCBNZWlkaWFzLCBpdCB3b3VsZCBub3QgYmUgc28gaGFyZCB0byBiZWFyOiBvbmUgbWlnaHQgY29uc29sZQogICAgICAgICAgICAgICAgICAgIG9uZXNlbGYgd2l0aCB0aGUgZmFuY3kgdGhhdCB0aGUgYXNzYXVsdCBoYWQgbmV2ZXIgYmVlbiBtYWRlLCBvciB0aGF0IGl0IHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBhIHByb2ZhbmF0aW9uIG9mIHRoZSBmZXN0aXZhbCwgYW5kIHNvIG9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['21.215'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0CiAgICAgICAgICAgICAgICAgICAgbm93IHRoaXMgd291bGQgYmUgdGhlIGhhcmRlc3QgYmxvdyBmb3IgbWUgdG8gYmVhciwgaWYsIHdoZW4gdGhlIG9mZmVuY2VzIHdlcmUKICAgICAgICAgICAgICAgICAgICBmcmVzaCBpbiB5b3VyIG1lbW9yeSwgeW91IGRpc3BsYXllZCBzdWNoIGFuZ2VyIGFuZCBpbmRpZ25hdGlvbiBhbmQgYml0dGVybmVzcwogICAgICAgICAgICAgICAgICAgIHRoYXQsIHdoZW4gTmVvcHRvbGVtdXMgYW5kIE1uZXNhcmNoaWRlcyBhbmQgUGhpbGlwcGlkZXMgYW5kIGFub3RoZXIgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICB2ZXJ5IHdlYWx0aHkgbWVuIHdlcmUgaW50ZXJjZWRpbmcgd2l0aCB5b3UgYW5kIG1lLCB5b3Ugc2hvdXRlZCB0byBtZSBub3QgdG8gbGV0CiAgICAgICAgICAgICAgICAgICAgaGltIG9mZiwgYW5kIHdoZW4gQmxlcGFldXMgdGhlIGJhbmtlciBjYW1lIHVwIHRvIG1lLCB5b3UgcmFpc2VkIHN1Y2ggYW4gdXByb2FyLAogICAgICAgICAgICAgICAgICAgIGFzIGlmIEkgd2FzIGdvaW5nIHRvIHRha2UgYSBicmliZeKAlHRoZSBvbGQsIG9sZCBzdG9yeSHigJQKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.216'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTYiIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCBJIHdhcyBzdGFydGxlZCBieSB5b3VyIGNsYW1vciwKICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbnMsIGFuZCBsZXQgbXkgY2xvYWsgZHJvcCBzbyB0aGF0IEkgd2FzIGhhbGYtbmFrZWQgaW4gbXkgdHVuaWMsIHRyeWluZyB0bwogICAgICAgICAgICAgICAgICAgIGdldCBhd2F5IGZyb20gaGlzIGdyYXNwLCBhbmQgd2hlbiB5b3UgbWV0IG1lIGFmdGVyd2FyZHMsIOKAnE1pbmQgeW91CiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRlIHRoZSBibGFja2d1YXJkLOKAnSB5b3UgY3JpZWQ7IOKAnGRvbid0IGxldCBoaW0gZ287IHRoZQogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucyB3aWxsIHdhdGNoIHRvIHNlZSB3aGF0IHlvdSBhcmUgZ29pbmcgdG8gZG/igJ07IGFuZCB5ZXQgd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZSBhY3QgaGFzIGJlZW4gY29uZGVtbmVkIGJ5IHZvdGUgYXMgYW4gb3V0cmFnZSwgYW5kIHRob3NlIHdobyBnYXZlIHRoYXQKICAgICAgICAgICAgICAgICAgICB2ZXJkaWN0IHdlcmUgc2l0dGluZyBpbiBhIHNhY3JlZCBidWlsZGluZywgYW5kIHdoZW4gSSBoYXZlIHN0dWNrIHRvIG15IHRhc2sgYW5kCiAgICAgICAgICAgICAgICAgICAgbm90IGJldHJheWVkIGVpdGhlciB5b3Ugb3IgbXlzZWxmLCBpZiBhZnRlciBhbGwgdGhpcyB5b3UgYXJlIGdvaW5nIHRvIGFjcXVpdAogICAgICAgICAgICAgICAgICAgICAgICBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkVkaXRvcnMgZmluZCB0aGlzIHNlbnRlbmNlIHNvCiAgICAgICAgICAgICAgICAgICAgICAgIGludG9sZXJhYmx5IGNsdW1zeSB0aGF0IHRoZXkgc2VlIGluIGl0IGEgcHJvb2YgdGhhdCBEZW1vc3RoZW5lcyBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIHJldmlzZSB0aGlzIHBhcnQgb2YgdGhlIHNwZWVjaC4gSXQgbWF5IGJlIHVyZ2VkIHRoYXQgdGhlIHNlbnRlbmNlLCB0aG91Z2gKICAgICAgICAgICAgICAgICAgICAgICAgaW52b2x2ZWQsIGlzIGx1Y2lkIGVub3VnaCBhbmQgd291bGQgYmUgdmVyeSBlZmZlY3RpdmUgYXMgYW4gYXBwYXJlbnRseQogICAgICAgICAgICAgICAgICAgICAgICB1bnByZW1lZGl0YXRlZCBvdXRidXJzdC48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.217'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTciIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXIhIFtTdWNoIGEgcmVzdWx0IGVudGFpbHMgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyBtb3N0IGRpc2dyYWNlZnVsLiBJIGRvIG5vdCBkZXNlcnZlIHRoaXMgYXQgeW91ciBoYW5kcywgQXRoZW5pYW5zLiBIb3cKICAgICAgICAgICAgICAgICAgICBzaG91bGQgSSwgd2hlbiBJIGFtIGJyaW5naW5nIHRvIGp1c3RpY2UgYSBmZWxsb3cgd2hvIGlzIGFzIHZpb2xlbnQgYSBidWxseSBhcyBoZQogICAgICAgICAgICAgICAgICAgIGlzIHJlcHV0ZWQgdG8gYmUsIHdobyBoYXMgb2ZmZW5kZWQgYWdhaW5zdCBkZWNlbmN5IGF0IGEgcHVibGljIGZlc3RpdmFsLCBhbmQgd2hvCiAgICAgICAgICAgICAgICAgICAgaGFzIG1hZGUgbm90IG9ubHkgeW91LCBidXQgYWxsIHRoZSBHcmVla3Mgd2hvIHdlcmUgdmlzaXRpbmcgdGhlIGNpdHksIHdpdG5lc3NlcwogICAgICAgICAgICAgICAgICAgIG9mIGhpcyBicnV0YWxpdHk/IFRoZSBwZW9wbGUgaGVhcmQgd2hhdCBoZSBoYWQgZG9uZS4gV2hhdCB3YXMgdGhlIHJlc3VsdD8gVGhleQogICAgICAgICAgICAgICAgICAgIHZvdGVkIGhpbSBndWlsdHkgYW5kIHBhc3NlZCBoaW0gb24gdG8geW91ciBjb3VydC4gPC90cmFuc2xhdGlvbj4="
translation['21.218'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTgiIHVuaXQ9InNlY3Rpb24iIC8+U28gaXQgaXMgaW1wb3NzaWJsZSB0aGF0IHlvdXIgZGVjaXNpb24gc2hvdWxkIGJlIGNvbmNlYWxlZAogICAgICAgICAgICAgICAgICAgIG9yIGh1c2hlZCB1cCwgb3IgdGhhdCB0aGUgcXVlc3Rpb24gc2hvdWxkIG5vdCBiZSBhc2tlZCwgSG93IGRpZCB5b3UganVkZ2UgdGhlCiAgICAgICAgICAgICAgICAgICAgY2FzZSB3aGVuIGl0IHdhcyBicm91Z2h0IGJlZm9yZSB5b3U/IE5vOyBpZiB5b3UgcHVuaXNoIGhpbSwgeW91IHdpbGwgYmUgdGhvdWdodAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiBkaXNjcmV0aW9uIGFuZCBob25vciBhbmQgaGF0ZXJzIG9mIGluaXF1aXR5OyBidXQgaWYgeW91IGFjcXVpdCBoaW0sIHlvdQogICAgICAgICAgICAgICAgICAgIHdpbGwgc2VlbSB0byBoYXZlIGNhcGl0dWxhdGVkIHRvIHNvbWUgb3RoZXIgbW90aXZlLl0gRm9yIHRoaXMgaXMgbm90IGEKICAgICAgICAgICAgICAgICAgICBwb2xpdGljYWwgaXNzdWUsIG5vciBkb2VzIGl0IHJlc2VtYmxlIHRoZSBjYXNlIG9mIEFyaXN0b3Bob24sIHdobyBzdG9wcGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWludCBhZ2FpbnN0IGhpbSBieSByZXN0b3JpbmcgdGhlIGNyb3ducy4gVGhpcyBjYXNlIGFyaXNlcyBmcm9tIHRoZSBpbnNvbGVuY2UKICAgICAgICAgICAgICAgICAgICBvZiBNZWlkaWFzIGFuZCBmcm9tIHRoZSBpbXBvc3NpYmlsaXR5IG9mIGhpcyB1bmRvaW5nIGFueSBvZiBoaXMgYWN0cy4KICAgICAgICAgICAgICAgICAgICBbSXMgaXQgdGhlbiBiZXR0ZXIsIGluIHZpZXcgb2YgdGhlIHBhc3QsIHRvIHB1bmlzaCBoaW0gbm93IG9yIHRoZSBuZXh0CiAgICAgICAgICAgICAgICAgICAgdGltZSBoZSBvZmZlbmRzPyBOb3cgaXMgdGhlIHRpbWUsIEkgdGhpbmssIGJlY2F1c2UgdGhlIHRyaWFsIGlzIGEgcHVibGljIG9uZSwKICAgICAgICAgICAgICAgICAgICBldmVuIGFzIHRoZSBvZmZlbmNlcyBmb3Igd2hpY2ggaGUgaXMgYmVpbmcgdHJpZWQgd2VyZSBwdWJsaWMuXQogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.219'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZ1cnRoZXJtb3JlLCBpdCB3YXMgbm90IEkgYWxvbmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgaGUgdGhlbiwgaW4gaGlzIGludGVudGlvbiwgc3RydWNrIGFuZCBpbnN1bHRlZCwKICAgICAgICAgICAgICAgICAgICB3aGVuIGhlIGFjdGVkIGFzIGhlIGRpZCwgYnV0IGFsbCB3aG8gbWF5IGJlIHN1cHBvc2VkIGxlc3MgYWJsZSB0aGFuIEkgYW0gdG8KICAgICAgICAgICAgICAgICAgICBvYnRhaW4gc2F0aXNmYWN0aW9uIGZvciB0aGVtc2VsdmVzLiBJZiB5b3Ugd2VyZSBub3QgYWxsIGJlYXRlbiwgaWYgeW91IHdlcmUgbm90CiAgICAgICAgICAgICAgICAgICAgYWxsIGluc3VsdGVkIHdoaWxlIGFjdGluZyBhcyBjaG9pci1tYXN0ZXJzLCB5b3UgcmVhbGl6ZSBvZiBjb3Vyc2UgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBjYW5ub3QgYWxsIGJlIGNob2lyLW1hc3RlcnMgYXQgdGhlIHNhbWUgdGltZSwgYW5kIHRoYXQgbm8gb25lIGNvdWxkIHBvc3NpYmx5CiAgICAgICAgICAgICAgICAgICAgYXNzYXVsdCBhbGwgb2YgeW91IGF0IG9uY2Ugd2l0aCBhIHNpbmdsZSBmaXN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.220'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjAiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW5ldmVyIGEgc29saXRhcnkgdmljdGltIGZhaWxzIHRvIG9idGFpbiByZWRyZXNzLCB0aGVuIGVhY2ggb25lIG9mIHlvdQogICAgICAgICAgICAgICAgICAgIG11c3QgZXhwZWN0IHRvIGJlIHRoZSBuZXh0IHZpY3RpbSBoaW1zZWxmLCBhbmQgbXVzdCBub3QgYmUgaW5kaWZmZXJlbnQgdG8gc3VjaAogICAgICAgICAgICAgICAgICAgIGluY2lkZW50cyBub3Igd2FpdCBmb3IgdGhlbSB0byBjb21lIGhpcyB3YXksIGJ1dCBtdXN0IHJhdGhlciBndWFyZCBhZ2FpbnN0IHRoZW0KICAgICAgICAgICAgICAgICAgICBhcyBsb25nIGJlZm9yZWhhbmQgYXMgcG9zc2libGUuIEkgcGVyaGFwcyBhbSBoYXRlZCBieSBNZWlkaWFzLCBhbmQgZWFjaCBvZiB5b3UKICAgICAgICAgICAgICAgICAgICBieSBzb21lb25lIGVsc2UuIFdvdWxkIHlvdSwgdGhlbiwgYWxsb3cgdGhhdCBlbmVteSwgd2hvZXZlciBoZSBpcywgdG8gZ2FpbiB0aGUKICAgICAgICAgICAgICAgICAgICBwb3dlciBvZiBkb2luZyB0byBlYWNoIG9mIHlvdSB3aGF0IHRoaXMgbWFuIGhhcyBkb25lIHRvIG1lPyBJIHNob3VsZCB0aGluayBub3QKICAgICAgICAgICAgICAgICAgICBpbmRlZWQuIFRoZW4gbmVpdGhlciBtdXN0IHlvdSBsZWF2ZSBtZSwgQXRoZW5pYW5zLCBpbiB0aGlzIG1hbidzIHBvd2VyLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.221'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjEiIHVuaXQ9InNlY3Rpb24iIC8+SnVzdCB0aGluay4gVGhlIGluc3RhbnQgdGhpcyBjb3VydCByaXNlcywKICAgICAgICAgICAgICAgICAgICBlYWNoIG9mIHlvdSB3aWxsIHdhbGsgaG9tZSwgb25lIHF1aWNrZXIsIGFub3RoZXIgbW9yZSBsZWlzdXJlbHksIG5vdCBhbnhpb3VzLAogICAgICAgICAgICAgICAgICAgIG5vdCBnbGFuY2luZyBiZWhpbmQgaGltLCBub3QgZmVhcmluZyB3aGV0aGVyIGhlIGlzIGdvaW5nIHRvIHJ1biB1cCBhZ2FpbnN0IGEKICAgICAgICAgICAgICAgICAgICBmcmllbmQgb3IgYW4gZW5lbXksIGEgYmlnIG1hbiBvciBhIGxpdHRsZSBvbmUsIGEgc3Ryb25nIG1hbiBvciBhIHdlYWsgb25lLCBvcgogICAgICAgICAgICAgICAgICAgIGFueXRoaW5nIG9mIHRoYXQgc29ydC4gQW5kIHdoeT8gQmVjYXVzZSBpbiBoaXMgaGVhcnQgaGUga25vd3MsIGFuZCBpcyBjb25maWRlbnQsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhcyBsZWFybmVkIHRvIHRydXN0IHRoZSBTdGF0ZSwgdGhhdCBubyBvbmUgc2hhbGwgc2VpemUgb3IgaW5zdWx0IG9yIHN0cmlrZQogICAgICAgICAgICAgICAgICAgIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['21.222'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBzZW5zZSBvZiBzZWN1cml0eSwgdGhlbiwgd2l0aCB3aGljaAogICAgICAgICAgICAgICAgICAgIHlvdSB3YWxrIHRoZSBzdHJlZXRz4oCUd2lsbCB5b3Ugbm90IGd1YXJhbnRlZSBpdCB0byBtZSBiZWZvcmUgeW91IHNldAogICAgICAgICAgICAgICAgICAgIG9mZiBob21lPyBIb3cgY2FuIEkgcmVhc29uYWJseSBleHBlY3QgdG8gc3Vydml2ZSBhZnRlciB3aGF0IEkgaGF2ZSBzdWZmZXJlZCwgaWYKICAgICAgICAgICAgICAgICAgICB5b3UgbGVhdmUgbWUgaW4gdGhlIGx1cmNoPyBQZXJoYXBzIHNvbWVvbmUgd2lsbCBzYXksIOKAnFRha2UgaGVhcnQhIFlvdQogICAgICAgICAgICAgICAgICAgIHdpbGwgbm90IGJlIGluc3VsdGVkIGFnYWluLuKAnSBCdXQgaWYgSSBhbSwgd2lsbCB5b3UgYmUgYW5ncnkgd2l0aCBoaW0KICAgICAgICAgICAgICAgICAgICB0aGVuLCBhZnRlciBhY3F1aXR0aW5nIGhpbSBub3c/IERvIG5vdCwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBkbyBub3QgYmV0cmF5IG1lCiAgICAgICAgICAgICAgICAgICAgb3IgeW91cnNlbHZlcyBvciB0aGUgbGF3cy4gPC90cmFuc2xhdGlvbj4="
translation['21.223'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIHlvdSB3b3VsZAogICAgICAgICAgICAgICAgICAgIG9ubHkgZXhhbWluZSBhbmQgY29uc2lkZXIgdGhlIHF1ZXN0aW9uLCB3aGF0IGl0IGlzIHRoYXQgZ2l2ZXMgeW91IHdobyBzZXJ2ZSBvbgogICAgICAgICAgICAgICAgICAgIGp1cmllcyBzdWNoIHBvd2VyIGFuZCBhdXRob3JpdHkgaW4gYWxsIHN0YXRlLWFmZmFpcnMsIHdoZXRoZXIgdGhlIFN0YXRlIGVtcGFuZWxzCiAgICAgICAgICAgICAgICAgICAgdHdvIGh1bmRyZWQgb2YgeW91IG9yIGEgdGhvdXNhbmQgb3IgYW55IG90aGVyIG51bWJlciwgeW91IHdvdWxkIGZpbmQgdGhhdCBpdCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCB0aGF0IHlvdSBhbG9uZSBvZiB0aGUgY2l0aXplbnMgYXJlIGRyYXduIHVwIHVuZGVyIGFybXMsIG5vdCB0aGF0IHlvdXIKICAgICAgICAgICAgICAgICAgICBwaHlzaWNhbCBwb3dlcnMgYXJlIGF0IHRoZWlyIGJlc3QgYW5kIHN0cm9uZ2VzdCwgbm90IHRoYXQgeW91IGFyZSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBlYXJsaWVzdCBwcmltZSBvZiBtYW5ob29kOyBpdCBpcyBkdWUgdG8gbm8gY2F1c2Ugb2YgdGhhdCBzb3J0IGJ1dCBzaW1wbHkgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgc3RyZW5ndGggb2YgdGhlIGxhd3MuIDwvdHJhbnNsYXRpb24+"
translation['21.224'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RyZW5ndGggb2YgdGhlIGxhd3M/IElmIG9uZSBvZiB5b3UgaXMgd3JvbmdlZCBhbmQgY3JpZXMgYWxvdWQsIHdpbGwgdGhlIGxhd3MKICAgICAgICAgICAgICAgICAgICBydW4gdXAgYW5kIGJlIGF0IGhpcyBzaWRlIHRvIGFzc2lzdCBoaW0/IE5vOyB0aGV5IGFyZSBvbmx5IHdyaXR0ZW4gdGV4dHMgYW5kCiAgICAgICAgICAgICAgICAgICAgaW5jYXBhYmxlIG9mIHN1Y2ggYWN0aW9uLiBXaGVyZWluIHRoZW4gcmVzaWRlcyB0aGVpciBwb3dlcj8gSW4geW91cnNlbHZlcywgaWYKICAgICAgICAgICAgICAgICAgICBvbmx5IHlvdSBzdXBwb3J0IHRoZW0gYW5kIG1ha2UgdGhlbSBhbGwtcG93ZXJmdWwgdG8gaGVscCBoaW0gd2hvIG5lZWRzIHRoZW0uIFNvCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MgYXJlIHN0cm9uZyB0aHJvdWdoIHlvdSBhbmQgeW91IHRocm91Z2ggdGhlIGxhd3MuIDwvdHJhbnNsYXRpb24+"
translation['21.225'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlIHlvdSBtdXN0IGhlbHAgdGhlbSBhcyByZWFkaWx5IGFzIGFueSBtYW4gd291bGQKICAgICAgICAgICAgICAgICAgICBoZWxwIGhpbXNlbGYgaWYgd3JvbmdlZDsgeW91IG11c3QgY29uc2lkZXIgdGhhdCB5b3Ugc2hhcmUgaW4gdGhlIHdyb25ncyBkb25lIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhd3MsIGJ5IHdob21zb2V2ZXIgdGhleSBhcmUgZm91bmQgdG8gYmUgY29tbWl0dGVkOyBhbmQgbm8KICAgICAgICAgICAgICAgICAgICBleGN1c2XigJRuZWl0aGVyIHB1YmxpYyBzZXJ2aWNlcywgbm9yIHBpdHksIG5vciBwZXJzb25hbCBpbmZsdWVuY2UsIG5vcgogICAgICAgICAgICAgICAgICAgIGZvcmVuc2ljIHNraWxsLCBub3IgYW55dGhpbmcgZWxzZeKAlG11c3QgYmUgZGV2aXNlZCB3aGVyZWJ5IGFueW9uZSB3aG8KICAgICAgICAgICAgICAgICAgICBoYXMgdHJhbnNncmVzc2VkIHRoZSBsYXdzIHNoYWxsIGVzY2FwZSBwdW5pc2htZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['21.226'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRob3NlIG9mIHlvdSB3aG8gd2VyZQogICAgICAgICAgICAgICAgICAgIHNwZWN0YXRvcnMgYXQgdGhlIERpb255c2lhIGhpc3NlZCBhbmQgaG9vdGVkIE1laWRpYXMgd2hlbiBoZSBlbnRlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIHRoZWF0ZXI7IHlvdSBnYXZlIGV2ZXJ5IGluZGljYXRpb24gb2YgeW91ciBhYmhvcnJlbmNlLCB0aG91Z2ggeW91IGhhZCBub3QgeWV0CiAgICAgICAgICAgICAgICAgICAgaGVhcmQgd2hhdCBJIGhhZCB0byBzYXkgYWJvdXQgaGltLiBXZXJlIHlvdSBzbyBpbmRpZ25hbnQgYmVmb3JlIHRoZSBjYXNlIHdhcwogICAgICAgICAgICAgICAgICAgIGludmVzdGlnYXRlZCwgdGhhdCB5b3UgdXJnZWQgbWUgdG8gZGVtYW5kIHZlbmdlYW5jZSBmb3IgbXkgd3JvbmdzIGFuZCBhcHBsYXVkZWQKICAgICAgICAgICAgICAgICAgICBtZSB3aGVuIEkgYnJvdWdodCBteSBwbGFpbnQgYmVmb3JlIHRoZSBBc3NlbWJseT8gPC90cmFuc2xhdGlvbj4="
translation['21.227'] = ""
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkdlbnRsZW1lbiBvZiB0aGUganVyeSwgRXVjdGVtb24gZmluZGluZyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgd3JvbmdlZCBieSBBbmRyb3Rpb24sIHRoaW5rcyBpdCBoaXMgZHV0eSB0byBvYnRhaW4gc2F0aXNmYWN0aW9uIGZvciBoaW1zZWxmIGFuZAogICAgICAgICAgICAgICAgICAgIGF0IHRoZSBzYW1lIHRpbWUgdG8gdXAgaG9sZCB0aGUgY29uc3RpdHV0aW9uOyBhbmQgdGhhdCBpcyB3aGF0IEkgYWxzbyBzaGFsbAogICAgICAgICAgICAgICAgICAgIGVzc2F5IHRvIGRvLCBpZiBJIGFtIGVxdWFsIHRvIHRoZSB0YXNrLiBBcyBhIG1hdHRlciBvZiBmYWN0IHRoZSBvdXRyYWdlcyB0aGF0CiAgICAgICAgICAgICAgICAgICAgRXVjdGVtb24gaGFzIGVuZHVyZWQsIG1hbnkgYW5kIHNlcmlvdXMgYW5kIHV0dGVybHkgaWxsZWdhbCBhcyB0aGV5IHdlcmUsIGFyZQogICAgICAgICAgICAgICAgICAgIHNsaWdodGVyIHRoYW4gdGhlIHRyb3VibGUgdGhhdCBBbmRyb3Rpb24gaGFzIGNhdXNlZCBtZS4gRXVjdGVtb24gd2FzIHRoZSBvYmplY3QKICAgICAgICAgICAgICAgICAgICBvZiBhIHBsb3QgdG8gZ2V0IG1vbmV5IG91dCBvZiBoaW0gYW5kIHRvIGVqZWN0IGhpbSB1bmZhaXJseSBmcm9tIGFuIG9mZmljZSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgYXBwb2ludG1lbnQ7IGJ1dCBpZiB0aGUgY2hhcmdlcyB0aGF0IEFuZHJvdGlvbiB0cnVtcGVkIHVwIGFnYWluc3QgbWUgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBhY2NlcHRlZCBpbiB5b3VyIGNvdXJ0cywgbm90IGEgc2luZ2xlIGxpdmluZyBtYW4gd291bGQgaGF2ZSBvcGVuZWQgaGlzIGRvb3IKICAgICAgICAgICAgICAgICAgICB0byBtZSwgPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciBoZSBhY2N1c2VkIG1lIG9mIHRoaW5ncyB0aGF0IGFueW9uZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgc2hydW5rIGZyb20gbWVudGlvbmluZywgdW5sZXNzIGhlIHdlcmUgYSBtYW4gb2YgdGhlIHNhbWUgc3RhbXAgYXMKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLCBzYXlpbmcgdGhhdCBJIGhhZCBraWxsZWQgbXkgb3duIGZhdGhlci4gSGUgYWxzbyBjb25jb2N0ZWQgYSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBpbmRpY3RtZW50IGZvciBpbXBpZXR5LCBub3QgYWdhaW5zdCBtZSBkaXJlY3RseSwgYnV0IGFnYWluc3QgbXkgdW5jbGUsIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IHRvIHRyaWFsLCBjaGFyZ2luZyBoaW0gd2l0aCBpbXBpZXR5IGZvciBhc3NvY2lhdGluZyB3aXRoIG1lLCBhcyB0aG91Z2ggSQogICAgICAgICAgICAgICAgICAgIGhhZCBjb21taXR0ZWQgdGhlIGFsbGVnZWQgYWN0cywgYW5kIGlmIGl0IGhhZCBlbmRlZCBpbiBteSB1bmNsZSdzIGNvbnZpY3Rpb24sCiAgICAgICAgICAgICAgICAgICAgd2hvIHdvdWxkIGhhdmUgc3VmZmVyZWQgbW9yZSBncmlldm91c2x5IGF0IHRoZSBkZWZlbmRhbnQncyBoYW5kcyB0aGFuIEk/IEZvcgogICAgICAgICAgICAgICAgICAgIHdobywgd2hldGhlciBmcmllbmQgb3Igc3RyYW5nZXIsIHdvdWxkIGhhdmUgY29uc2VudGVkIHRvIGhhdmUgYW55IGRlYWxpbmdzIHdpdGgKICAgICAgICAgICAgICAgICAgICBtZT8gV2hhdCBzdGF0ZSB3b3VsZCBoYXZlIGFkbWl0dGVkIHdpdGhpbiBpdHMgYm9yZGVycyBhIG1hbiBkZWVtZWQgZ3VpbHR5IG9mCiAgICAgICAgICAgICAgICAgICAgc3VjaCBpbXBpZXR5PyBOb3QgYSBzaW5nbGUgb25lLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlcywgdGhlbiwgSSBjbGVhcmVkIG15c2VsZiBpbiB5b3VyIGNvdXJ0LCBub3QgYnkgYSBuYXJyb3cgbWFyZ2luIGJ1dCBzbwogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlbHkgdGhhdCBteSBhY2N1c2VyIGZhaWxlZCB0byBvYnRhaW4gYSBmaWZ0aCBvZiB0aGUgdm90ZXM7IGFuZCB1cG9uCiAgICAgICAgICAgICAgICAgICAgQW5kcm90aW9uIEkgc2hhbGwgZW5kZWF2b3IsIHdpdGggeW91ciBoZWxwLCB0byBhdmVuZ2UgbXlzZWxmIHRvZGF5IGFuZCBvbiBldmVyeQogICAgICAgICAgICAgICAgICAgIG90aGVyIG9jY2FzaW9uLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHNoYWxsIHBhc3Mgb3ZlciBhIGdyZWF0IGRlYWwKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgbWlnaHQgc2F5IGFib3V0IHByaXZhdGUgbWF0dGVyczsgYnV0IHRoZXJlIGFyZSBvdGhlciBtYXR0ZXJzIG9uIHdoaWNoIHlvdQogICAgICAgICAgICAgICAgICAgIGFyZSBub3cgZ29pbmcgdG8gZ2l2ZSB5b3VyIHZvdGVzLCBpbmNsdWRpbmcgbm90IGEgZmV3IGluanVyaWVzIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBoYXMgZG9uZSB5b3UgaW4gZGVhbGluZyBhcyBhIGNpdGl6ZW4gd2l0aCBwdWJsaWMgYWZmYWlycywgYW5kIHRoZXNlLAogICAgICAgICAgICAgICAgICAgIHdoaWNoIEV1Y3RlbW9uIGNob3NlIHRvIHBhc3Mgb3ZlciwgYnV0IHdoaWNoIGl0IGlzIGJldHRlciBmb3IgeW91IHRvIHVuZGVyc3RhbmQsCiAgICAgICAgICAgICAgICAgICAgSSBzaGFsbCBub3cgdHJ5IHRvIGV4cGxhaW4gYnJpZWZseS4gPC90cmFuc2xhdGlvbj4="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPklmIEkgY291bGQKICAgICAgICAgICAgICAgICAgICBzZWUgYW55IHN0cmFpZ2h0Zm9yd2FyZCBkZWZlbmNlIHRoYXQgaGUgY291bGQgb2ZmZXIgdG8gdGhlc2UgY2hhcmdlcywgSSB3b3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBtYWtlIGFueSByZWZlcmVuY2UgdG8gdGhlbTsgYnV0IEkgYW0gcXVpdGUgY2VydGFpbiB0aGF0IGhlIGNhbm5vdCBoYXZlIGFueQogICAgICAgICAgICAgICAgICAgIHNpbXBsZSBhbmQgaG9uZXN0IHBsZWEgdG8gcHV0IGZvcndhcmQsIGJ1dCB3aWxsIHRyeSB0byBob29kd2luayB5b3UsIGludmVudGluZwogICAgICAgICAgICAgICAgICAgIG1hbGljaW91cyBhbnN3ZXJzIHRvIGVhY2ggY2hhcmdlIGFuZCBzbyBsZWFkaW5nIHlvdSBhc3RyYXkuIEZvciBoZSBpcyBhIHNraWxsZnVsCiAgICAgICAgICAgICAgICAgICAgcmhldG9yaWNpYW4sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCBoYXMKICAgICAgICAgICAgICAgICAgICBkZXZvdGVkIGFsbCBoaXMgbGlmZSB0byB0aGF0IG9uZSBzdHVkeS4gVGhlcmVmb3JlLCB0aGF0IHlvdSBtYXkgbm90IGJlIGRlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgYW5kIHBlcnN1YWRlZCB0byB2b3RlIGNvbnRyYXJ5IHRvIHRoZSBzcGlyaXQgb2YgeW91ciBvYXRoIGFuZCB0byBhY3F1aXQgYSBtYW4KICAgICAgICAgICAgICAgICAgICB3aG9tIHlvdSBoYXZlIGV2ZXJ5IHJlYXNvbiB0byBwdW5pc2gsIHByYXkgYXR0ZW5kIHRvIHdoYXQgSSBzaGFsbCBzYXksIHNvIHRoYXQKICAgICAgICAgICAgICAgICAgICB3aGVuIHlvdSBoYXZlIGhlYXJkIG1lLCB5b3UgbWF5IGhhdmUgdGhlIHJpZ2h0IHJlcGx5IHRvIGV2ZXJ5IGFyZ3VtZW50IHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3aWxsIGFkdmFuY2UuIDwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZSBpcyBvbmUgcGxlYSB3aGljaCBoZSB0aGlua3MgYSBjbGV2ZXIgZGVmZW5jZSBvZiB0aGUgb21pc3Npb24gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlbGltaW5hcnkgZGVjcmVlLiBUaGVyZSBpcyBhIGxhdywgaGUgc2F5cywgdGhhdCBpZiB0aGUgQ291bmNpbCBieSBpdHMKICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZSBvZiBpdHMgZHV0aWVzIHNlZW1zIHRvIGRlc2VydmUgYSByZXdhcmQsIHRoYXQgcmV3YXJkIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudGVkIGJ5IHRoZSBwZW9wbGUuIFRoYXQgcXVlc3Rpb24sIGhlIHNheXMsIHRoZSBjaGFpcm1hbiBvZiB0aGUgQXNzZW1ibHkKICAgICAgICAgICAgICAgICAgICBwdXQsIHRoZSBwZW9wbGUgdm90ZWQsIGFuZCBpdCB3YXMgY2FycmllZC4gSW4gdGhpcyBjYXNlLCBoZSBzYXlzLCB0aGVyZSBpcyBubwogICAgICAgICAgICAgICAgICAgIG5lZWQgb2YgYSBwcmVsaW1pbmFyeSBkZWNyZWUsIGJlY2F1c2Ugd2hhdCB3YXMgZG9uZSB3YXMgaW4gYWNjb3JkYW5jZSB3aXRoIGxhdy4KICAgICAgICAgICAgICAgICAgICBCdXQgSSB0YWtlIHRoZSBleGFjdGx5IGNvbnRyYXJ5IHZpZXctYW5kIEkgdGhpbmsgeW91IHdpbGwgYWdyZWUgd2l0aAogICAgICAgICAgICAgICAgICAgIG1l4oCUdGhhdCB0aGUgcHJlbGltaW5hcnkgZGVjcmVlcyBzaG91bGQgb25seSBiZSBwcm9wb3NlZCBjb25jZXJuaW5nCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyBwcmVzY3JpYmVkIGJ5IHRoZSBsYXdzLCBiZWNhdXNlLCB3aGVyZSBubyBsYXdzIGFyZSBsYWlkIGRvd24sIHN1cmVseSBubwogICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsIHdoYXRldmVyIGlzIGFkbWlzc2libGUuIDwvdHJhbnNsYXRpb24+"
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBoZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgc2F5IHRoYXQgYWxsIHRoZSBDb3VuY2lscyB0aGF0IGhhdmUgZXZlciByZWNlaXZlZCBhIHJld2FyZCBmcm9tIHlvdSwgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGl0IGluIHRoaXMgd2F5LCBhbmQgdGhhdCBpbiBubyBjYXNlIGhhcyBhIHByZWxpbWluYXJ5IGRlY3JlZSBldmVyIGJlZW4KICAgICAgICAgICAgICAgICAgICBwYXNzZWQuIEJ1dCBJIHRoaW5r4oCUb3IgcmF0aGVyLCBJIGFtIGNlcnRhaW7igJR0aGF0IHRoaXMKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgaXMgdW50cnVlLiBFdmVuIGlmIGl0IHdlcmUgYWJzb2x1dGVseSB0cnVlLCB5ZXQgc3VyZWx5IHdoZXJlIHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBzYXlzIHRoZSBvcHBvc2l0ZSwgd2Ugb3VnaHQgbm90IHRvIHRyYW5zZ3Jlc3MgdGhlIGxhdyBub3cgYmVjYXVzZSBpdCBoYXMgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICBiZWVuIHRyYW5zZ3Jlc3NlZCBiZWZvcmU7IG9uIHRoZSBjb250cmFyeSB3ZSBvdWdodCB0byBlbmZvcmNlIHRoZSBvYnNlcnZhbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhdywgYmVnaW5uaW5nIHdpdGggeW91LCBBbmRyb3Rpb24sIGZpcnN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['22.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPllvdSBtdXN0IG5vdCB0ZWxsIHVzIHRoYXQgdGhpcyBoYXMgb2Z0ZW4gYmVlbiBkb25lIGJlZm9yZTsgeW91IG11c3Qgc2hvdyB1cwogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgaXMgcmlnaHQgdG8gZG8gaXQuIElmIHRoZSBwcmFjdGljZSBoYXMgYXQgYW55IHRpbWUgYmVlbiBjb250cmFyeSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdzIGFuZCB5b3UgaGF2ZSBvbmx5IGZvbGxvd2VkIHByZWNlZGVudCwgeW91IGNhbm5vdCBpbiBmYWlybmVzcyBlc2NhcGUsIGJ1dAogICAgICAgICAgICAgICAgICAgIG91Z2h0IGFsbCB0aGUgbW9yZSB0byBiZSBjb252aWN0ZWQ7IGZvciBpZiBhbnkgb2YgdGhlIGZvcm1lciBkZWxpbnF1ZW50cyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIGNvbmRlbW5lZCwgeW91IHdvdWxkIG5ldmVyIGhhdmUgcHJvcG9zZWQgdGhlIHJlc29sdXRpb24sIGFuZCBpbiB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIHdheSwgaWYgeW91IGFyZSBwdW5pc2hlZCBub3csIG5vIG9uZSBlbHNlIHdpbGwgcHJvcG9zZSBpdCBpbiB0aGUgZnV0dXJlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Db21pbmcgbm93CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGxhdyB3aGljaCBleHBsaWNpdGx5IGRlbmllcyB0byB0aGUgQ291bmNpbCB0aGUgcmlnaHQgdG8gYXNrIGEgcmV3YXJkLCBpZgogICAgICAgICAgICAgICAgICAgIHRoZXkgaGF2ZSBub3QgYnVpbHQgdGhlIHdhcnNoaXBzLCBpdCBpcyB3b3J0aCB3aGlsZSB0byBoZWFyIHRoZSBkZWZlbmNlIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3aWxsIHNldCB1cCwgYW5kIHRvIGdldCBhIGNsZWFyIHZpZXcgb2YgdGhlIHNoYW1lbGVzc25lc3Mgb2YgaGlzIGJlaGF2aW9yIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgYXJndW1lbnRzIHRoYXQgaGUgYXR0ZW1wdHMgdG8gdXNlLiBUaGUgbGF3LCBoZSBzYXlzLCBmb3JiaWRzIHRoZSBDb3VuY2lsIHRvCiAgICAgICAgICAgICAgICAgICAgYXNrIGZvciB0aGUgcmV3YXJkLCBpZiB0aGV5IGhhdmUgbm90IGJ1aWx0IHRoZSBzaGlwcy4gQnV0LCBoZSBhZGRzLCB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgbm93aGVyZSBwcm9oaWJpdHMgdGhlIEFzc2VtYmx5IGZyb20gZ2l2aW5nIGl0LiDigJxJZiBJIGdhdmUgaXQgYXQgdGhlaXIKICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LCBteSBtb3Rpb24gd2FzIGlsbGVnYWwsIGJ1dCBpZiBJIGhhdmUgbmV2ZXIgbWVudGlvbmVkIHRoZSBzaGlwcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBvZiBteSBkZWNyZWUsIGJ1dCBnaXZlIG90aGVyIGdyb3VuZHMgZm9yIGdyYW50aW5nIGEgY3Jvd24gdG8gdGhlIENvdW5jaWwsCiAgICAgICAgICAgICAgICAgICAgd2hlcmUgaXMgdGhlIGlsbGVnYWxpdHkgb2YgbXkgbW90aW9uP+KAnSA8L3RyYW5zbGF0aW9uPg=="
translation['22.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHN1cmVseSBub3QgZGlmZmljdWx0IGZvciB0aGUganVyeSB0byBmaW5kIHRoZSByaWdodCBhbnN3ZXIgdG8gdGhpczogdGhhdAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBmaXJzdCBwbGFjZSB0aGUgQ29tbWl0dGVlIG9mIHRoZSBDb3VuY2lsIGFuZCB0aGUgY2hhaXJtYW4sIHdobyBwdXRzIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzIHRvIHRoZSB2b3RlLCBkdWx5IHB1dCB0aGUgcXVlc3Rpb24gYW5kIGNhbGxlZCBmb3IgYSBzaG93IG9mCiAgICAgICAgICAgICAgICAgICAgaGFuZHPigJTigJx0aG9zZSB3aG8gYXJlIG9mIG9waW5pb24gdGhhdCB0aGUgQ291bmNpbCBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWQgYSByZXdhcmQsIHRvIHZvdGUgYXllOyBvbiB0aGUgY29udHJhcnksIG5vLuKAnSBZZXQgc3VyZWx5IG1lbgogICAgICAgICAgICAgICAgICAgIHdobyBuZWl0aGVyIGFzayBub3IgZXhwZWN0IGEgcmV3YXJkIHNob3VsZCBuZXZlciBoYXZlIHB1dCB0aGUgcXVlc3Rpb24gYXQgYWxsLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIHRoaXMsIHdoZW4gTWVpZGlhcyBhbmQgb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBjZXJ0YWluIGFjY3VzYXRpb25zIGFnYWluc3QgdGhlIENvdW5jaWwsIHRoZSBDb3VuY2lsbG9ycyBmYWlybHkgbGVhcGVkCiAgICAgICAgICAgICAgICAgICAgdXAgb24gdG8gdGhlIHBsYXRmb3JtIGFuZCBiZWdnZWQgbm90IHRvIGJlIHJvYmJlZCBvZiB0aGVpciByZXdhcmQuIFRoZXJlIGlzIG5vCiAgICAgICAgICAgICAgICAgICAgbmVlZCBmb3IgbWUgdG8gdGVsbCB0aGUganVyeSB0aGlzLCBmb3IgeW91IHdlcmUgcHJlc2VudCBpbiB0aGUgQXNzZW1ibHkgYW5kIGtub3cKICAgICAgICAgICAgICAgICAgICB3aGF0IGhhcHBlbmVkIHRoZXJlLiBTbyB3aGVuIGhlIHNheXMgdGhhdCB0aGUgQ291bmNpbCBkaWQgbm90IGFzayBmb3IgaXQsIGhhdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IGFuc3dlciByZWFkeSBmb3IgaGltLiBCdXQgSSB3aWxsIGFsc28gcHJvdmUgdG8geW91IHRoYXQgdGhlIHBlb3BsZSBhcmUKICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW4gYnkgdGhlIGxhdyB0byBnaXZlIHRoZSByZXdhcmQsIGlmIHRoZSBDb3VuY2lsIGhhdmUgbm90IGJ1aWx0IHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXBzLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGxhdywgdGhhdCB0aGUgQ291bmNpbCBzaG91bGQKICAgICAgICAgICAgICAgICAgICBub3QgYXNrIGZvciB0aGUgcmV3YXJkIGlmIHRoZXkgaGF2ZSBub3QgYnVpbHQgdGhlIHdhciBzaGlwcywgd2FzIGZyYW1lZCBpbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2F5LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBwcmV2ZW50IHRoZQogICAgICAgICAgICAgICAgICAgIHBvc3NpYmlsaXR5IG9mIHRoZSBwZW9wbGUgYmVpbmcgaW5mbHVlbmNlZCBvciBtaXNsZWQuIFRoZSBsZWdpc2xhdG9yIGhlbGQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBxdWVzdGlvbiBzaG91bGQgbm90IGRlcGVuZCBvbiB0aGUgYWJpbGl0aWVzIG9mIHRoZSBzcGVha2VycywgYnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBoZSBjb3VsZCBkZXZpc2UgdGhhdCB3YXMgYXQgb25jZSBqdXN0IGFuZCBleHBlZGllbnQgZm9yIHRoZSBwZW9wbGUsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGZpeGVkIGJ5IGxhdy4g4oCcWW91IGhhdmUgbm90IGJ1aWx0IHRoZSBzaGlwcz8gVGhlbiBkb24ndCBhc2sKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHJld2FyZC7igJ0gV2hlcmUgdGhlIGxhdyBkb2VzIG5vdCBwZXJtaXQgdGhlIGFza2luZywgZG9lcyBpdCBub3QKICAgICAgICAgICAgICAgICAgICBhYnNvbHV0ZWx5IGZvcmJpZCB0aGUgZ2l2aW5nPyA8L3RyYW5zbGF0aW9uPg=="
translation['22.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoZXJlIGlzIGFub3RoZXIgcXVlc3Rpb24sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoaWNoIGlzIHdvcnRoIGdvaW5nIGludG8uIFdoeSBpcwogICAgICAgICAgICAgICAgICAgIGl0IHRoYXQgd2hlbiB0aGUgQ291bmNpbCBoYXZlIHBlcmZvcm1lZCBhbGwgdGhlaXIgb3RoZXIgZHV0aWVzIHNhdGlzZmFjdG9yaWx5LAogICAgICAgICAgICAgICAgICAgIGFuZCBubyBvbmUgaGFzIGFueSBjb21wbGFpbnQgdG8gbWFrZSwgeWV0LCBpZiB0aGV5IGhhdmUgbm90IGJ1aWx0IHRoZSBzaGlwcywKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBub3QgYWxsb3dlZCB0byBhc2sgZm9yIHRoZSByZXdhcmQ/IFlvdSB3aWxsIGZpbmQgdGhhdCB0aGlzIHN0cmluZ2VudAogICAgICAgICAgICAgICAgICAgIGVuYWN0bWVudCBpcyBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUuIEZvciBJIHN1cHBvc2Ugbm8gb25lIHdvdWxkIGRlbnkKICAgICAgICAgICAgICAgICAgICB0aGF0IGFsbCB0aGF0IGhhcyBoYXBwZW5lZCB0byBvdXIgY2l0eSwgaW4gdGhlIHBhc3Qgb3IgaW4gdGhlIHByZXNlbnQsIHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICBnb29kIG9yIG90aGVyd2lzZeKAlEkgYXZvaWQgYW4gdW5wbGVhc2FudCB0ZXJt4oCUaGFzIHJlc3VsdGVkIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIG9uZSBjYXNlIGZyb20gdGhlIHBvc3Nlc3Npb24sIGFuZCBpbiB0aGUgb3RoZXIgZnJvbSB0aGUgd2FudCwgb2Ygd2Fyc2hpcHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5NYW55IGluc3RhbmNlcyBtaWdodCBiZSBnaXZlbiwgYW5jaWVudCBhbmQKICAgICAgICAgICAgICAgICAgICBtb2Rlcm4sIGJ1dCBvZiB0aG9zZSB0aGF0IGFyZSBtb3N0IGZhbWlsaWFyIHRvIHlvdXIgZWFycywgdGFrZSBpZiB5b3UgcGxlYXNlCiAgICAgICAgICAgICAgICAgICAgdGhpcy4gVGhlIG1lbiB3aG8gYnVpbHQgdGhlIFByb3B5bGFlYSBhbmQgdGhlIFBhcnRoZW5vbiwgYW5kIGRlY2tlZCBvdXIgb3RoZXIKICAgICAgICAgICAgICAgICAgICB0ZW1wbGVzIHdpdGggdGhlIHNwb2lscyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIHRyb3BoaWVzIGluIHdoaWNoIHdlIHRha2UgYSBuYXR1cmFsIHByaWRlLOKAlHlvdSBrbm93IG9mIGNvdXJzZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgdHJhZGl0aW9uIHRoYXQgYWZ0ZXIgdGhleSBhYmFuZG9uZWQgdGhlIGNpdHkgYW5kIHNodXQgdGhlbXNlbHZlcyB1cCBpbgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzQwIj5TYWxhbWlzPC9wbGFjZU5hbWU+LCBpdCB3YXMgYmVjYXVzZSB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIHRoZSB3YXIgZ2FsbGV5cyB0aGF0IHRoZXkgd29uIHRoZSBzZWEtZmlnaHQgYW5kIHNhdmVkIHRoZSBjaXR5IGFuZCBhbGwgdGhlaXIKICAgICAgICAgICAgICAgICAgICBiZWxvbmdpbmdzLCBhbmQgbWFkZSB0aGVtc2VsdmVzIHRoZSBhdXRob3JzIGZvciB0aGUgcmVzdCBvZiB0aGUgR3JlZWtzIG9mIG1hbnkKICAgICAgICAgICAgICAgICAgICBncmVhdCBiZW5lZml0cywgb2Ygd2hpY2ggbm90IGV2ZW4gdGltZSBjYW4gZXZlciBvYmxpdGVyYXRlIHRoZSBtZW1vcnkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB5b3Ugc2F5LCBidXQgdGhhdCBpcyBhbmNpZW50CiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS4gQnV0IHRha2Ugc29tZXRoaW5nIHRoYXQgeW91IGhhdmUgYWxsIHNlZW4uIFlvdSBrbm93IHRoYXQgbGF0ZWx5IHlvdQogICAgICAgICAgICAgICAgICAgIHNlbnQgaGVscCB0byB0aGUgRXVib2VhbnMgd2l0aGluIHRocmVlIGRheXMgYW5kIGdvdCByaWQgb2YgdGhlIFRoZWJhbnMgYnkgYW4KICAgICAgICAgICAgICAgICAgICAgICAgYXJtaXN0aWNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbiAzNTcuPC9ub3RlPiBDb3VsZCB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRvbmUgYWxsIHRoaXMgc28gcHJvbXB0bHksIGlmIHlvdSBoYWQgbm90IGhhZCBuZXcgdmVzc2VscyB0byBjb252ZXkgeW91ciBmb3JjZT8KICAgICAgICAgICAgICAgICAgICBZb3Ugd291bGQgaGF2ZSBmb3VuZCBpdCBpbXBvc3NpYmxlLiBNYW55IG90aGVyIHN1Y2Nlc3NlcyBtaWdodCBiZSBtZW50aW9uZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhhdmUgcmVzdWx0ZWQgZnJvbSBvdXIgYmVpbmcgcHJvdmlkZWQgd2l0aCB0aGVzZSBzaGlwcyBpbiBzb3VuZCBjb25kaXRpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXMsIGFuZCBob3cgbWFueSBkaXNhc3RlcnMgZnJvbSB1bnNvdW5kCiAgICAgICAgICAgICAgICAgICAgc2hpcHM/IEkgd2lsbCBwYXNzIG92ZXIgbW9zdCBvZiB0aGVtOyBidXQgaW4gdGhlIERlY2VsZWFuIHdhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbGFzdCBzdGFnZSBvZiB0aGUgUGVsb3Bvbm5lc2lhbiBXYXIsIDQxMyB0bwogICAgICAgICAgICAgICAgICAgIDQwNC48L25vdGU+4oCUSSBhbSByZW1pbmRpbmcgeW91IG9mIGEgYml0IG9mIG9sZCBoaXN0b3J5IHdoaWNoIHlvdSBhbGwKICAgICAgICAgICAgICAgICAgICBrbm93IGJldHRlciB0aGFuIEkgZG/igJR0aG91Z2ggbWFueSBzZXJpb3VzIGRpc2FzdGVycyBiZWZlbGwgb3VyIGNpdHksCiAgICAgICAgICAgICAgICAgICAgc2hlIGRpZCBub3Qgc3VjY3VtYiB0aWxsIGhlciBmbGVldCB3YXMgZGVzdHJveWVkLiBCdXQgd2h5IG5lZWQgbWUgY2l0ZSBhbmNpZW50CiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzPyBZb3Uga25vdyBob3cgaXQgc3Rvb2Qgd2l0aCBvdXIgY2l0eSBpbiB0aGUgbGFzdCB3YXIgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTGFjZWRhZW1vbmlhbnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGVybWluYXRlZCBieSB0aGUgcGVhY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgQ2FsbGlhcyBpbiAzNzEuPC9ub3RlPiB3aGVuIGl0IHNlZW1lZCB1bmxpa2VseSB0aGF0IHlvdSBjb3VsZCBkaXNwYXRjaCBhCiAgICAgICAgICAgICAgICAgICAgZmxlZXQuIFlvdSBrbm93IHRoYXQgdmV0Y2hlcyB3ZXJlIHNvbGQgZm9yIGZvb2QuIEJ1dCB3aGVuIHlvdSBkaWQgZGlzcGF0Y2ggaXQsCiAgICAgICAgICAgICAgICAgICAgeW91IG9idGFpbmVkIHBlYWNlIG9uIHlvdXIgb3duIHRlcm1zLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHNlZWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgd2Fyc2hpcHMgaGF2ZSBzdWNoIHdlaWdodCBpbiBlaXRoZXIgc2NhbGUsIHlvdSBuYXZlIGRvbmUgcmlnaHRseSB0byBzZXQKICAgICAgICAgICAgICAgICAgICB0aGlzIHN0cmljdCBsaW1pdCB0byB0aGUgQ291bmNpbCdzIGNsYWltIHRvIHRoZSByZXdhcmQuIEZvciBpZiB0aGV5IHNob3VsZAogICAgICAgICAgICAgICAgICAgIGRpc2NoYXJnZSBhbGwgdGhlaXIgb3RoZXIgZHV0aWVzIHNhdGlzZmFjdG9yaWx5LCBidXQgZmFpbCB0byBidWlsZCB0aGVzZSBzaGlwcywKICAgICAgICAgICAgICAgICAgICBieSB3aGljaCB3ZSBnYWluZWQgb3VyIHBvd2VyIGF0IHRoZSBmaXJzdCBhbmQgYnkgd2hpY2ggd2UgcmV0YWluIGl0IHRvZGF5LCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGVpciBvdGhlciBzZXJ2aWNlcyBhcmUgb2Ygbm8gYXZhaWwsIGZvciBpdCBpcyB0aGUgc2FmZXR5IG9mIHRoZSB3aG9sZSBTdGF0ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgbXVzdCBiZSBlbnN1cmVkIGZvciB0aGUgcGVvcGxlIGJlZm9yZSBldmVyeSB0aGluZy4gTm93IHRoZSBkZWZlbmRhbnQgaXMgc28KICAgICAgICAgICAgICAgICAgICBvYnNlc3NlZCB3aXRoIHRoZSBpZGVhIHRoYXQgaGUgY2FuIG1ha2UgYW55IHNwZWVjaCBvciBwcm9wb3NhbCBoZSB3aXNoZXMsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggdGhlIENvdW5jaWwgaGFzIGRpc2NoYXJnZWQgaXRzIG90aGVyIGR1dGllcyBpbiB0aGUgd2F5IHRoYXQgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBoZWFyZCwgYnV0IGhhcyBub3QgYnVpbHQgdGhlIHdhcnNoaXBzLCBoZSBtb3ZlZCB0byBncmFudCB0aGVtIHRoZWlyIHJld2FyZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgaXMgbm90IGEgdmlvbGF0aW9uIG9mIHRoZSBsYXcsIGhlIGNvdWxkIG5vdCBwb3NzaWJseSBhc3NlcnQgbm9yIGNvdWxkIHlvdSBiZQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgdG8gYmVsaWV2ZSBpdC4gQnV0IEkgdW5kZXJzdGFuZCB0aGF0IGhlIHdpbGwgcHV0IGJlZm9yZSB5b3Ugc29tZSBzdWNoCiAgICAgICAgICAgICAgICAgICAgcGxlYSBhcyB0aGlz4oCUdGhhdCB0aGUgQ291bmNpbCB3YXMgbm90IHRvIGJsYW1lIGZvciB0aGUgc2hvcnRhZ2Ugb2YKICAgICAgICAgICAgICAgICAgICBzaGlwcywgYnV0IHRoZSB0cmVhc3VyZXIgb2YgdGhlIHNoaXBidWlsZGVycywgd2hvIGFic2NvbmRlZCB3aXRoIHR3byBhbmQgYSBoYWxmCiAgICAgICAgICAgICAgICAgICAgdGFsZW50cywgYW5kIHNvIHRoZSBidXNpbmVzcyBlbmRlZCBpbiBhIGZpYXNjby4gQnV0IEkgbXVzdCBmaXJzdCBleHByZXNzIG15CiAgICAgICAgICAgICAgICAgICAgc3VycHJpc2UgdGhhdCBoZSBzaG91bGQgaGF2ZSBkZW1hbmRlZCBhIGNyb3duIGZvciB0aGUgQ291bmNpbCB0byByZXdhcmQgYQogICAgICAgICAgICAgICAgICAgIGZpYXNjby4gSSB0aG91Z2h0IHN1Y2ggaG9ub3JzIHdlcmUgcmVzZXJ2ZWQgZm9yIHN1Y2Nlc3Nlcy4gTmV4dCwgSSBoYXZlIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9uIHRvIHB1dCBiZWZvcmUgeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['22.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5JIHN1Ym1pdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IGZhaXIgdG8gY29tYmluZSB0aGUgdHdvIHBsZWFzLCB0aGF0IHRoZSBnaWZ0IHdhcyBub3QgaWxsZWdhbCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBDb3VuY2lsIGFyZSBub3QgcmVzcG9uc2libGUgZm9yIHRoZSBsYWNrIG9mIHNoaXBzLiBGb3IgaWYgaXQgaXMgcmlnaHQgdG8KICAgICAgICAgICAgICAgICAgICBnaXZlIHRoZW0gdGhlIHJld2FyZCBldmVuIHdoZW4gdGhleSBoYXZlIG5vdCBidWlsdCB0aGUgc2hpcHMsIHdoYXQgbmVlZCBpcyB0aGVyZQogICAgICAgICAgICAgICAgICAgIHRvIHNheSB3aG8gaXMgcmVzcG9uc2libGUgZm9yIHRoZSBvbWlzc2lvbj8gQnV0IGlmIGl0IGlzIG5vdCByaWdodCwgd2h5IHdlcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgQ291bmNpbCBhbnkgdGhlIG1vcmUgZW50aXRsZWQgdG8gaXQsIGJlY2F1c2UgaGUgY2FuIHBvaW50IHRvIHRoaXMgb3IgdGhhdCBtYW4gYXMKICAgICAgICAgICAgICAgICAgICByZXNwb25zaWJsZSBmb3IgdGhlIHNob3J0YWdlPyA8L3RyYW5zbGF0aW9uPg=="
translation['22.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5BcGFydCBmcm9tIHRoYXQsCiAgICAgICAgICAgICAgICAgICAgaXQgc2VlbXMgdG8gbWUgdGhhdCBzdWNoIGFyZ3VtZW50cyBvZmZlciB5b3UgYSBjaG9pY2UsIHdoZXRoZXIgeW91IHRoaW5rIHlvdQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIGhlYXIgZXhjdXNlcyBhbmQgcGxlYXMgZnJvbSBtZW4gd2hvIGhhdmUgZG9uZSB5b3UgaGFybSwgb3Igd2hldGhlciB5b3UKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBoYXZlIHNvbWUgc2hpcHMuIEZvciBpZiB5b3UgYWNjZXB0IHRoZSBkZWZlbmRhbnQncyBwbGVhLCBpdCB3aWxsIGJlCiAgICAgICAgICAgICAgICAgICAgY2xlYXIgdG8gZXZlcnkgZnV0dXJlIENvdW5jaWwgdGhhdCB0aGVpciBidXNpbmVzcyBpcyB0byBmaW5kIHlvdSBwbGF1c2libGUKICAgICAgICAgICAgICAgICAgICBleGN1c2VzLCBub3QgdG8gYnVpbGQgeW91IHNoaXBzLCB3aXRoIHRoZSByZXN1bHQgdGhhdCB5b3VyIG1vbmV5IHdpbGwgYmUgc3BlbnQsCiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZXJlIHdpbGwgYmUgbm8gc2hpcHMgZm9yIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['22.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYsIGFzCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhdyBzYXlzIGFuZCBhcyB5b3VyIG9hdGggZW5qb2lucywgeW91IHN0ZXJubHkgYW5kIGFic29sdXRlbHkgcmVqZWN0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZXhjdXNlcywgYW5kIG1ha2UgaXQgY2xlYXIgdGhhdCB5b3UgaGF2ZSB3aXRoaGVsZCB0aGUgcmV3YXJkIGJlY2F1c2UgdGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbm90IGJ1aWx0IHRoZSBzaGlwcywgdGhlbiBldmVyeSBDb3VuY2lsLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aWxsIGRlbGl2ZXIgdG8geW91IHRoZSBzaGlwcyBkdWx5IGJ1aWx0LCBiZWNhdXNlIHRoZXkKICAgICAgICAgICAgICAgICAgICB3aWxsIHNlZSB0aGF0IGluIHlvdXIgZXllcyBldmVyeXRoaW5nIGVsc2UgaXMgb2YgbGVzcyBjb25zZXF1ZW5jZSB0aGFuIHRoZSBsYXcuCiAgICAgICAgICAgICAgICAgICAgTm93IEkgc2hhbGwgc2hvdyB5b3UgY2xlYXJseSB0aGF0IG5vIG90aGVyIGh1bWFuIGJlaW5nIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBzaG9ydGFnZSBvZiBzaGlwczsgZm9yIHRoZSBDb3VuY2lsLCBoYXZpbmcgbWFkZSB0aGUgbGF3IG51bGwgYW5kIHZvaWQsIGVsZWN0ZWQKICAgICAgICAgICAgICAgICAgICB0aGlzIHRyZWFzdXJlciB0aGVtc2VsdmVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgdHJlYXN1cmVyIHNob3VsZAogICAgICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gZWxlY3RlZCBieSB0aGUgcGVvcGxlOyB0aGUgQ291bmNpbCwgYnkgYXBwb2ludGluZyBoaW0gaWxsZWdhbGx5LAogICAgICAgICAgICAgICAgICAgICAgICBtYWRlIHRoZW1zZWx2ZXMgcmVzcG9uc2libGUgZm9yIGhpcyBkZWZhbGNhdGlvbnMuIFRoZSBjb3JydXB0aW9uIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2FnZSBpcyBhcyBvbGQgYXMgSGFycG9jcmF0aW9uLiBNc3MuIGhhdmUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byBz4XPhOG/hzwvZm9yZWlnbj4gb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byBz4XPhOG9tc69PC9mb3JlaWduPiAuIFdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhdHRlciBhbmQgYSBjb21tYSBhZnRlciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhM6/4b+mz4TOv869PC9mb3JlaWduPiwgZWRpdG9ycwogICAgICAgICAgICAgICAgICAgICAgICBoYXZlIHRyaWVkIHRvIHRyYW5zbGF0ZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDPh861zrnPgM6/z4ThvbnOvc63z4POtc69PC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICDigJx2b3RlZCBpdHNlbGYgZ3VpbHR5LuKAnSBKdXJpbnVzIHdhcyB0aGUgZmlyc3QgdG8gc3VnZ2VzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrHhvZDPhOG9tDwvZm9yZWlnbj4gYW5kIHRvIHJlZmVyIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Ezr/hv6bPhM6/zr08L2ZvcmVpZ24+IHRvIHRoZSB0cmVhc3VyZXIuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gc+Fz4Thv4c8L2ZvcmVpZ24+IG9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gc+Fz4ThvbXOvTwvZm9yZWlnbj4gLiBXaXRoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBsYXR0ZXIgYW5kIGEgY29tbWEgYWZ0ZXIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4TOv+G/ps+Ezr/OvTwvZm9yZWlnbj4sIGVkaXRvcnMKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSB0cmllZCB0byB0cmFuc2xhdGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQz4fOtc65z4DOv8+E4b25zr3Ot8+DzrXOvTwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICAgICAg4oCcdm90ZWQgaXRzZWxmIGd1aWx0eS7igJ0gSnVyaW51cyB3YXMgdGhlIGZpcnN0IHRvIHN1Z2dlc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6x4b2Qz4ThvbQ8L2ZvcmVpZ24+IGFuZCB0byByZWZlciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhM6/4b+mz4TOv869PC9mb3JlaWduPiB0byB0aGUgdHJlYXN1cmVyLjwvdHJhbnNsYXRpb24+"
translation['22.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIHdpdGgKICAgICAgICAgICAgICAgICAgICByZWdhcmQgdG8gdGhlIGxhdzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgbGl0dGxlIHRoYXQgaXMga25vd24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBsYXcgaXMgZGVyaXZlZCBmcm9tIEFlc2NoaW5lcycgc3BlZWNoIGFnYWluc3QgVGltYXJjaHVzPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQWVzY2hpbi4gMSIgdmFsaWQ9InllcyI+QWVzY2hpbi4gMTwvYmlibD48L25vdGU+IG9mIHByb3N0aXR1dGlvbiwgaGUgdHJpZXMgdG8KICAgICAgICAgICAgICAgICAgICBtYWtlIG91dCB0aGF0IHdlIGFyZSBpbnN1bHRpbmcgaGltIGFuZCBhdHRhY2tpbmcgaGltIHdpdGggYmFzZWxlc3MgY2FsdW1uaWVzLiBIZQogICAgICAgICAgICAgICAgICAgIHNheXMgdG9vIHRoYXQgaWYgd2UgYmVsaWV2ZWQgdGhlIGNoYXJnZXMgdHJ1ZSwgd2Ugb3VnaHQgdG8gaGF2ZSBmYWNlZCBoaW0gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgQ291cnQgb2YgdGhlIFRoZXNtb3RoZXRhZSwgYW5kIGFza2VkIGEgZmluZSBvZiBhIHRob3VzYW5kIGRyYWNobWFzIGlmIG91cgogICAgICAgICAgICAgICAgICAgIGNoYXJnZXMgaGFkIGJlZW4gcHJvdmVkIGZhbHNlOyBhcyBpdCBpcywgd2UgYXJlIHRyeWluZyB0byBob29kd2luayB5b3UgYnkKICAgICAgICAgICAgICAgICAgICBhY2N1c2F0aW9ucyBhbmQgaWRsZSBhYnVzZSwgYW5kIGFyZSBjb25mdXNpbmcgeW91IGJ5IG1hdHRlcnMgb3V0c2lkZSB5b3VyCiAgICAgICAgICAgICAgICAgICAganVyaXNkaWN0aW9uLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAxIiB2YWxpZD0ieWVzIj5BZXNjaGluLiAxPC9iaWJsPjwvdHJhbnNsYXRpb24+"
translation['22.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSSB0aGluayB5b3Ugb3VnaHQgZmlyc3Qgb2YKICAgICAgICAgICAgICAgICAgICBhbGwgdG8gcmVmbGVjdCBpbiB5b3VyIG93biBtaW5kcyB0aGF0IGFidXNlIGFuZCBhY2N1c2F0aW9uIGFyZSB2ZXJ5IGZhciByZW1vdmVkCiAgICAgICAgICAgICAgICAgICAgZnJvbSBwcm9vZi4gSXQgaXMgYW4gYWNjdXNhdGlvbiB3aGVuIG9uZSBtYWtlcyBhIGJhcmUgc3RhdGVtZW50IHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBzdXBwbHlpbmcgZ3JvdW5kcyBmb3IgYmVsaWV2aW5nIGl0OyBpdCBpcyBwcm9vZiB3aGVuIG9uZSBhdCB0aGUgc2FtZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgZGVtb25zdHJhdGVzIHRoZSB0cnV0aCBvZiBvbmUncyBzdGF0ZW1lbnRzLiBUaG9zZSwgdGhlcmVmb3JlLCB3aG8gYXJlIHByb3ZpbmcgYQogICAgICAgICAgICAgICAgICAgIGNhc2UgbXVzdCBzdXBwbHkgZXZpZGVuY2Ugc3VmZmljaWVudCB0byBlc3RhYmxpc2ggaXRzIGNyZWRpYmlsaXR5IHdpdGggeW91LCBvcgogICAgICAgICAgICAgICAgICAgIG11c3QgYWR2YW5jZSByZWFzb25hYmxlIGFyZ3VtZW50cywgb3IgbXVzdCBwcm9kdWNlIHdpdG5lc3Nlcy4gT2Ygc29tZSBmYWN0cyBpdAogICAgICAgICAgICAgICAgICAgIGlzIGltcG9zc2libGUgdG8gcHV0IGV5ZS13aXRuZXNzZXMgaW4gdGhlIGJveCwgYnV0IGlmIG9uZSBjYW4gZXN0YWJsaXNoIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHRlc3RzLCB5b3UgcmlnaHRseSBjb25zaWRlciBpbiBldmVyeSBjYXNlIHRoYXQgeW91IGhhdmUgYSBzdWZmaWNpZW50IHByb29mCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRydXRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5XZSB0aGVuIGJhc2Ugb3VyIHByb29mLCBub3Qgb24KICAgICAgICAgICAgICAgICAgICBwcm9iYWJpbGl0aWVzIG5vciBvbiBjaXJjdW1zdGFudGlhbCBldmlkZW5jZSwgYnV0IG9uIGEgd2l0bmVzcyBmcm9tIHdob20gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IG1heSBlYXNpbHkgb2J0YWluIHNhdGlzZmFjdGlvbuKAlGEgbWFuIHdobyBoYXMgcHJlcGFyZWQgYQogICAgICAgICAgICAgICAgICAgIGRvY3VtZW50IGNvbnRhaW5pbmcgYW4gYWNjb3VudCBvZiB0aGUgZGVmZW5kYW50J3MgbGlmZSwgYW5kIHdobyBtYWtlcyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2libGUgZm9yIHRoaXMgZXZpZGVuY2UuIFNvIHRoYXQgd2hlbiBBbmRyb3Rpb24gc2F5cyB0aGF0IHRoaXMgaXMgbWVyZQogICAgICAgICAgICAgICAgICAgIGFidXNlIGFuZCBhY2N1c2F0aW9uLCByZXBseSB0aGF0IHRoaXMgaXMgcHJvb2YsIGJ1dCB0aGF0IGFidXNlIGFuZCBhY2N1c2F0aW9uCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmUgaGlzIG93biBwZXJmb3JtYW5jZTsgYW5kIHdoZW4gaGUgc2F5cyB0aGF0IHdlIG91Z2h0IHRvIGhhdmUgZGVub3VuY2VkCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIHRoZSBUaGVzbW90aGV0YWUsIHJlcGx5IHRoYXQgd2UgaW50ZW5kIHRvIGRvIHNvLCBhbmQgdGhhdCB3ZSBhcmUgbm93CiAgICAgICAgICAgICAgICAgICAgcXVpdGUgcHJvcGVybHkgY2l0aW5nIHRoaXMgc3RhdHV0ZS4gPC90cmFuc2xhdGlvbj4="
translation['22.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgd2UKICAgICAgICAgICAgICAgICAgICB3ZXJlIGJyaW5naW5nIHRoZXNlIGNoYXJnZXMgYWdhaW5zdCBoaW0gaW4gYW55IG90aGVyIGtpbmQgb2YgdHJpYWwsIGhlIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBqdXN0IGNhdXNlIG9mIGNvbXBsYWludDsgYnV0IGlmIHRoZSBwcmVzZW50IHRyaWFsIGlzIG9uZSB0aGF0IGNvbmNlcm5zCiAgICAgICAgICAgICAgICAgICAgaWxsZWdhbCBwcm9wb3NhbHMsIGFuZCBpZiBtZW4gd2hvIGhhdmUgbGVkIGEgbGlmZSBsaWtlIGhpcyBhcmUgZm9yYmlkZGVuIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MgdG8gbWFrZSBldmVuIGEgbGVnYWwgcHJvcG9zYWwsIGFuZCBpZiB3ZSBwcm92ZSB0aGF0IGhlIGhhcyBub3Qgb25seSBtYWRlIGFuCiAgICAgICAgICAgICAgICAgICAgaWxsZWdhbCBwcm9wb3NhbCBidXQgaGFzIGFsc28gbGVkIGFuIGlsbGVnYWwgbGlmZSwgdGhlbiBpcyBpdCBub3QgcHJvcGVyIHRvIGNpdGUKICAgICAgICAgICAgICAgICAgICB0aGlzIGxhdyB3aGljaCBkZXRlcm1pbmVzIGhpcyBpbGxlZ2FsIHN0YXR1cz8gPC90cmFuc2xhdGlvbj4="
translation['22.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZW92ZXIgeW91IHNob3VsZCBncmFzcCB0aGlzIGZhY3QsIHRoYXQKICAgICAgICAgICAgICAgICAgICBTb2xvbiwgd2hvIGZyYW1lZCB0aGVzZSBhbmQgbW9zdCBvZiBvdXIgb3RoZXIgbGF3cywgd2FzIGEgdmVyeSBkaWZmZXJlbnQga2luZCBvZgogICAgICAgICAgICAgICAgICAgIGxlZ2lzbGF0b3IgZnJvbSB0aGUgZGVmZW5kYW50LCBhbmQgcHJvdmlkZWQgbm90IG9uZSwgYnV0IG1hbnkgbW9kZXMgb2YgcHJvY2VkdXJlCiAgICAgICAgICAgICAgICAgICAgZm9yIHRob3NlIHdobyB3aXNoIHRvIG9idGFpbiByZWRyZXNzIGZvciB2YXJpb3VzIHdyb25ncy4gRm9yIGhlIGtuZXcsIEkgdGhpbmssCiAgICAgICAgICAgICAgICAgICAgdGhhdCBmb3IgYWxsIHRoZSBjaXRpemVucyB0byBiZSBlcXVhbGx5IGNsZXZlciwgb3IgYm9sZCwgb3IgbW9kZXJhdGUgZm9saywgd2FzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZS4gSWYsIHRoZW4sIGhlIHdhcyBnb2luZyB0byBmcmFtZSB0aGUgbGF3cyB0byBzYXRpc2Z5IHRoZSBtb2RlcmF0ZQogICAgICAgICAgICAgICAgICAgIG1hbidzIGNsYWltIHRvIHJlZHJlc3MsIG1hbnkgcmFzY2FscywgaGUgcmVmbGVjdGVkLCB3b3VsZCBnZXQgb2ZmIHNjb3QtZnJlZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgaWYgaGUgZnJhbWVkIHRoZW0gaW4gdGhlIGludGVyZXN0cyBvZiB0aGUgYm9sZCBhbmQgdGhlIGNsZXZlciBzcGVha2VycywgdGhlCiAgICAgICAgICAgICAgICAgICAgcGxhaW4gY2l0aXplbiB3b3VsZCBub3QgYmUgYWJsZSB0byBvYnRhaW4gcmVkcmVzcyBpbiB0aGUgc2FtZSB3YXkgYXMgdGhleSB3b3VsZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUgdGhvdWdodCB0aGF0IG5vIG9uZSBzaG91bGQgYmUKICAgICAgICAgICAgICAgICAgICBkZWJhcnJlZCBmcm9tIG9idGFpbmluZyByZWRyZXNzIGluIHdoYXRldmVyIHdheSBoZSBjYW4gYmVzdCBkbyBzby4gSG93IHRoZW4gd2lsbAogICAgICAgICAgICAgICAgICAgIHRoaXMgYmUgZW5zdXJlZD8gQnkgZ3JhbnRpbmcgbWFueSBtb2RlcyBvZiBsZWdhbCBwcm9jZWR1cmUgdG8gdGhlIGluanVyZWQKICAgICAgICAgICAgICAgICAgICBwYXJ0aWVzLiBUYWtlIGEgY2FzZSBvZiB0aGVmdC4gQXJlIHlvdSBhIHN0cm9uZyBtYW4sIGNvbmZpZGVudCBpbiB5b3Vyc2VsZj8KICAgICAgICAgICAgICAgICAgICBBcnJlc3QgdGhlIHRoaWVmOyBvbmx5IHlvdSBhcmUgcmlza2luZyBhIHRob3VzYW5kIGRyYWNobWFzLiBBcmUgeW91IHJhdGhlciB3ZWFrPwogICAgICAgICAgICAgICAgICAgIEd1aWRlIHRoZSBBcmNob25zIHRvIGhpbSwgYW5kIHRoZXkgd2lsbCBkbyB0aGUgcmVzdC4gQXJlIHlvdSBhZnJhaWQgZXZlbiB0byBkbwogICAgICAgICAgICAgICAgICAgIHRoaXM/IEJyaW5nIGEgd3JpdHRlbiBpbmRpY3RtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['22.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3UKICAgICAgICAgICAgICAgICAgICBkaXN0cnVzdCB5b3Vyc2VsZiwgYW5kIGFyZSB5b3UgYSBwb29yIG1hbiwgdW5hYmxlIHRvIGZpbmQgdGhlIHRob3VzYW5kIGRyYWNobWFzPwogICAgICAgICAgICAgICAgICAgIFN1ZSBoaW0gZm9yIHRoZWZ0IGJlZm9yZSBhIHB1YmxpYyBhcmJpdHJhdG9yLCBhbmQgeW91IHdpbGwgcmlzayBub3RoaW5nLiBJbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHdheSBmb3IgaW1waWV0eSB5b3UgY2FuIGFycmVzdCwgb3IgaW5kaWN0LCBvciBzdWUgYmVmb3JlIHRoZSBFdW1vbHBpZGFlLCBvcgogICAgICAgICAgICAgICAgICAgIGdpdmUgaW5mb3JtYXRpb24gdG8gdGhlIEtpbmctQXJjaG9uLiBBbmQgaW4gdGhlIHNhbWUgd2F5LCBvciBuZWFybHkgc28sIGZvcgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG90aGVyIG9mZmVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['22.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cganVzdCBzdXBwb3NlIHRoYXQgYQogICAgICAgICAgICAgICAgICAgIG1hbiwgaW5zdGVhZCBvZiByZWJ1dHRpbmcgdGhlIGNoYXJnZSBvZiBjcmltZSBvciBpbXBpZXR5IG9yIHdoYXRldmVyIGVsc2UgaGUgbWF5CiAgICAgICAgICAgICAgICAgICAgYmUgdHJpZWQgZm9yLCBzaG91bGQgY2xhaW0gaGlzIGFjcXVpdHRhbCBvbiB0aGVzZSBncm91bmRzLWluIHRoZSBjYXNlIG9mIGFuCiAgICAgICAgICAgICAgICAgICAgYXJyZXN0LCB0aGF0IHlvdSBtaWdodCBoYXZlIGJyb3VnaHQgYW4gYWN0aW9uIGJlZm9yZSBhbiBhcmJpdHJhdG9yIGFuZCB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIG91Z2h0IHRvIGhhdmUgaW5kaWN0ZWQgaGltLCBvciwgaWYgaGUgaXMgZGVmZW5kYW50IGluIGFuIGFyYml0cmF0b3IncyBjb3VydCwKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSBvdWdodCB0byBoYXZlIGFycmVzdGVkIGhpbSwgc28gdGhhdCB5b3UgbWlnaHQgcmlzayBhIGZpbmUgb2YgYSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFzLiBTdXJlbHkgdGhhdCB3b3VsZCBiZSBhIGZhcmNlLiBBIGRlZmVuZGFudCwgaWYgaW5ub2NlbnQsIG5lZWQgbm90CiAgICAgICAgICAgICAgICAgICAgZGlzcHV0ZSB0aGUgbWV0aG9kIGJ5IHdoaWNoIGhlIGlzIGJyb3VnaHQudG8ganVzdGljZTogaGUgb3VnaHQgdG8gcHJvdmUgaGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaXMgaW5ub2NlbnQuIDwvdHJhbnNsYXRpb24+"
translation['22.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JbiBqdXN0IHRoZSBzYW1lIHdheSwgaWYgeW91LAogICAgICAgICAgICAgICAgICAgIEFuZHJvdGlvbiwgcHJvcG9zZSBhIGRlY3JlZSBhZnRlciBoYXZpbmcgYmVlbiBndWlsdHkgb2YgcHJvc3RpdHV0aW9uLCBkbyBub3QKICAgICAgICAgICAgICAgICAgICBpbWFnaW5lIHRoYXQgeW91IG91Z2h0IHRvIGVzY2FwZSBwdW5pc2htZW50IGJlY2F1c2Ugd2UgbWlnaHQgYWxzbyBoYXZlIGRlbm91bmNlZAogICAgICAgICAgICAgICAgICAgIHlvdSB0byB0aGUgVGhlc21vdGhldGFlLCBidXQgZWl0aGVyIHByb3ZlIHRoYXQgeW91IGFyZSBpbm5vY2VudCBvciBzdWJtaXQgdG8KICAgICAgICAgICAgICAgICAgICBwdW5pc2htZW50IGZvciBhbnkgZGVjcmVlcyB0aGF0IHlvdSBoYXZlIHByb3Bvc2VkLCBiZWluZyB3aGF0IHlvdSBhcmU7IG9yIHlvdQogICAgICAgICAgICAgICAgICAgIGhhdmUgbm8gcmlnaHQgdG8gcHJvcG9zZSB0aGVtLiBJZiB3ZSBkbyBub3QgcHVuaXNoIHlvdSBieSBldmVyeSBwcm9jZXNzIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyBhbGxvdywgYmUgZ3JhdGVmdWwgdG8gdXMgZm9yIHRob3NlIHRoYXQgd2Ugb21pdDogZG8gbm90IG9uIHRoYXQgZ3JvdW5kCiAgICAgICAgICAgICAgICAgICAgY2xhaW0gdG8gcGF5IG5vIHBlbmFsdHkgYXQgYWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGl0IGlzIHdvcnRoIHlvdXIgd2hpbGUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRvIHN0dWR5IHRvbyB0aGUgY2hhcmFjdGVyIG9mCiAgICAgICAgICAgICAgICAgICAgU29sb24sIHdobyBmcmFtZWQgdGhpcyBsYXcsIGFuZCB0byBvYnNlcnZlIHdoYXQgY2FyZSBoZSB0b29rIG9mIHRoZSBjb25zdGl0dXRpb24KICAgICAgICAgICAgICAgICAgICBpbiBhbGwgdGhlIGxhd3MsIGhvdyBtdWNoIG1vcmUgemVhbG91cyBpbmRlZWQgaGUgd2FzIGZvciB0aGUgY29uc3RpdHV0aW9uIHRoYW4KICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIG1hdHRlciBvbiB3aGljaCBoZSB3YXMgbGVnaXNsYXRpbmcuIFRoaXMgbWF5IGJlIHNlZW4gaW4gbWFueSB3YXlzLCBidXQKICAgICAgICAgICAgICAgICAgICBlc3BlY2lhbGx5IGZyb20gdGhpcyBsYXcsIHdoaWNoIGZvcmJpZHMgcGVyc29ucyBndWlsdHkgb2YgcHJvc3RpdHV0aW9uIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICBzcGVlY2hlcyBvciB0byBwcm9wb3NlIG1lYXN1cmVzLiBGb3IgaGUgc2F3IHRoYXQgdGhlIG1ham9yaXR5IG9mIHlvdSBkbyBub3QKICAgICAgICAgICAgICAgICAgICBhdmFpbCB5b3Vyc2VsdmVzIG9mIHlvdXIgcmlnaHQgdG8gc3BlYWssIHNvIHRoYXQgdGhlIHByb2hpYml0aW9uIHNlZW1lZCBubyBncmVhdAogICAgICAgICAgICAgICAgICAgIGhhcmRzaGlwLCBhbmQgaGUgY291bGQgaGF2ZSBsYWlkIGRvd24gbWFueSBoYXJzaGVyIHBlbmFsdGllcywgaWYgaGlzIG9iamVjdCBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHRoZSBjaGFzdGlzZW1lbnQgb2YgdGhlc2Ugb2ZmZW5kZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB0aGF0IHdhcyBub3QgaGlzIGFpbTsgaGUgaW1wb3NlZCB0aGlzIGRpc2FiaWxpdHkgaW4gdGhlIGludGVyZXN0cyBvZiB5b3UgYW5kIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIFN0YXRlLCBmb3IgaGUga25ld+KAlEkgc2F5LCBoZSBrbmV3IHRoYXQgb2YgYWxsIHN0YXRlcyB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGFudGFnb25pc3RpYyBtZW4gb2YgaW5mYW1vdXMgaGFiaXRzIGlzIHRoYXQgaW4gd2hpY2ggZXZlcnkgbWFuIGlzIGF0IGxpYmVydHkgdG8KICAgICAgICAgICAgICAgICAgICBwdWJsaXNoIHRoZWlyIHNoYW1lLiBBbmQgd2hhdCBzdGF0ZSBpcyB0aGF0PyBBIGRlbW9jcmFjeS4gSGUgdGhvdWdodCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGRhbmdlcm91cyBpZiB0aGVyZSBldmVyIGhhcHBlbmVkIHRvIGNvZXhpc3QgYSBjb25zaWRlcmFibGUgbnVtYmVyIG9mIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIGJvbGQgYW5kIGNsZXZlciBzcGVha2VycywgYnV0IHRhaW50ZWQgd2l0aCBzdWNoIGRpc2dyYWNlZnVsIHdpY2tlZG5lc3MuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIHBlb3BsZSBtYXkgYmUgbGVkIGFzdHJheSBieSB0aGVtCiAgICAgICAgICAgICAgICAgICAgdG8gbWFrZSBtYW55IG1pc3Rha2VzLCBhbmQgc3VjaCBtZW4gbWF5IGF0dGVtcHQgZWl0aGVyIHRvIG92ZXJ0aHJvdyB0aGUKICAgICAgICAgICAgICAgICAgICBkZW1vY3JhY3kgY29tcGxldGVseSzigJRmb3IgaW4gYW4gb2xpZ2FyY2h5LCBldmVuIGlmIHRoZXJlIGFyZSB2aWxlcgogICAgICAgICAgICAgICAgICAgIGxpdmVycyB0aGFuIEFuZHJvdGlvbiwgbm8gb25lIG1heSBzcGVhayBldmlsIG9mIGRpZ25pdGllc+KAlG9yIHRvCiAgICAgICAgICAgICAgICAgICAgZGViYXVjaCB0aGUgcGVvcGxlLCBzbyB0aGF0IHRoZXkgbWF5IGJlIGFzIG5lYXJseSBhcyBwb3NzaWJsZSBsaWtlIHRoZW1zZWx2ZXMuCiAgICAgICAgICAgICAgICAgICAgSGUgdGhlcmVmb3JlIGFic29sdXRlbHkgZm9yYmFkZSBzdWNoIG1lbiB0byB0YWtlIGFueSBzaGFyZSBpbiB0aGUgY291bnNlbHMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgU3RhdGUsIGxlc3QgdGhlIHBlb3BsZSBzaG91bGQgYmUgZGVsdWRlZCBpbnRvIHNvbWUgZXJyb3IuIERpc3JlZ2FyZGluZyBhbGwKICAgICAgICAgICAgICAgICAgICB0aGlzLCBvdXIgaG9ub3JhYmxlIGdlbnRsZW1hbiBoZXJlIHRob3VnaHQgZml0IG5vdCBvbmx5IHRvIG1ha2Ugc3BlZWNoZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzLCB0aG91Z2ggbm90IGVudGl0bGVkIHRvIGRvIHNvLCBidXQgZXZlbiB2ZW50dXJlZCB0byBtYWtlIGlsbGVnYWwgb25lcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIHdpdGgKICAgICAgICAgICAgICAgICAgICByZWdhcmQgdG8gdGhlIGxhdyB3aGljaCBmb3JiaWRzIGhpbSB0byBzcGVhayBvciBtb3ZlIHJlc29sdXRpb25zLCBiZWNhdXNlIGhpcwogICAgICAgICAgICAgICAgICAgIGZhdGhlciBvd2VkIG1vbmV5IHRvIHRoZSBleGNoZXF1ZXIgYW5kIGhhcyBuZXZlciBwYWlkIGl0LCB5b3UgaGF2ZSBhIGZhaXIgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJsZSBhbnN3ZXIgdG8gaGltLCBpZiBoZSBzYXlzIHRoYXQgd2Ugb3VnaHQgdG8gaGF2ZSBsYWlkIGFuIGluZm9ybWF0aW9uCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBoaW0uIFdlIHdpbGwgZG8gdGhhdCBsYXRlciwgY2VydGFpbmx5IG5vdCBub3csIEFuZHJvdGlvbiwgd2hlbiB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIHRvIHJlbmRlciBhbiBhY2NvdW50IG9mIHlvdXIgb3RoZXIgY3JpbWVzLCBidXQgd2hlbiBpdCBpcyBwcm9wZXIgdG8gZG8gc28KICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGxhdy4gRm9yIHRoZSBwcmVzZW50LCB3ZSBhcmUgY29udGVudCB0byBwcm92ZSB0aGF0IHRoZSBsYXcgZG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCBwZXJtaXQgeW91IHRvIG1vdmUgcmVzb2x1dGlvbnMsIG5vdCBldmVuIHN1Y2ggYXMgZXZlcnkgb3RoZXIgY2l0aXplbiBtYXkKICAgICAgICAgICAgICAgICAgICBtb3ZlLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Qcm92ZSwgdGhlcmVmb3JlLCB0aGF0IHlvdXIgZmF0aGVyIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBhIGRlZmF1bHRlciwgb3IgdGhhdCBoZSBsZWZ0IHRoZSBwcmlzb24sIG5vdCBieSBydW5uaW5nIGF3YXksIGJ1dCBieSBwYXlpbmcKICAgICAgICAgICAgICAgICAgICBoaXMgZGVidHMuIElmIHlvdSBjYW5ub3QgcHJvdmUgdGhhdCwgdGhlbiB5b3UgaGFkIG5vIHJpZ2h0IHRvIG1vdmUgeW91cgogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb247IGZvciB0aGUgbGF3IG1ha2VzIHlvdSBhIHBhcnRuZXIgaW4gdGhlIGRpc3F1YWxpZmljYXRpb24gb2YgeW91cgogICAgICAgICAgICAgICAgICAgIGZhdGhlciwgYW5kIGJlaW5nIGRpc3F1YWxpZmllZCB5b3UgaGFkIG5vIHJpZ2h0IGVpdGhlciB0byBzcGVhayBvciBtb3ZlLiBBbHNvCiAgICAgICAgICAgICAgICAgICAgd2l0aCByZWdhcmQgdG8gdGhlIGxhd3Mgd2hpY2ggd2UgaGF2ZSBjaXRlZCBpbiBjb3VydCwgSSB0aGluayB0aGF0IGlmIGhlIHRyaWVzCiAgICAgICAgICAgICAgICAgICAgdG8gY2hlYXQgYW5kIG1pc2xlYWQgeW91LCBnZW50bGVtZW4sIHlvdSBtdXN0IGdpdmUgaGltIHRoZSByZXBseSB0aGF0IEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGluZGljYXRlZC4gPC90cmFuc2xhdGlvbj4="
translation['22.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T24KICAgICAgICAgICAgICAgICAgICBvdGhlciBwb2ludHMgYWxzbyBoZSBoYXMgYXJndW1lbnRzIGFkbWlyYWJseSBjYWxjdWxhdGVkIHRvIGRlY2VpdmUgeW91LCBhbmQgaXQKICAgICAgICAgICAgICAgICAgICBpcyBiZXR0ZXIgdGhhdCB5b3Ugc2hvdWxkIGJlIHRvbGQgb2YgdGhlbSBiZWZvcmVoYW5kLiBPbmUgb2YgdGhlbSBydW5zIGxpa2UKICAgICAgICAgICAgICAgICAgICB0aGlzOiDigJxEbyBub3Qgc3RlYWwgdGhlIHJld2FyZCBmcm9tIGZpdmUgaHVuZHJlZCBvZiB5b3Vyc2VsdmVzLCBub3IKICAgICAgICAgICAgICAgICAgICBpbnZvbHZlIHRoZW0gaW4gZGlzZ3JhY2U7IHRoZXkgYXJlIG9uIHRoZWlyIHRyaWFsLCBub3QgSS7igJ0gQnV0LCBoYWQKICAgICAgICAgICAgICAgICAgICB5b3UgYmVlbiBnb2luZyB0byBkZXByaXZlIHRoZW0gb2Ygc29tZXRoaW5nIHdpdGhvdXQgb3RoZXJ3aXNlIGJlbmVmaXRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUsIEkgc2hvdWxkIG5vdCBoYXZlIGFza2VkIHlvdSB0byBzaG93IGFueSBncmVhdCBrZWVubmVzcyBpbiB0aGUgbWF0dGVyOyBidXQKICAgICAgICAgICAgICAgICAgICBpZiBieSB0aGlzIGFjdGlvbiB5b3UgYXJlIGdvaW5nIHRvIGNvbnZlcnQgbW9yZSB0aGFuIHRlbiB0aG91c2FuZCBvdGhlcnMgaW50bwogICAgICAgICAgICAgICAgICAgIGJldHRlciBjaXRpemVucywgd2hhdCBhIGZhciBmaW5lciB0aGluZyBpdCBpcyB0byBtYWtlIHNvIG1hbnkgbWVuIGhvbmVzdCB0aGFuIHRvCiAgICAgICAgICAgICAgICAgICAgY29uZmVyIGFuIHVuanVzdCBmYXZvdXIgb24gZml2ZSBodW5kcmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSQogICAgICAgICAgICAgICAgICAgIGFtIGluIGEgcG9zaXRpb24gdG8gYXNzZXJ0IHRoYXQgdGhlIHF1ZXN0aW9uIGRvZXMgbm90IGNvbmNlcm4gdGhlIHdob2xlIENvdW5jaWwsCiAgICAgICAgICAgICAgICAgICAgYnV0IG9ubHkgQW5kcm90aW9uIGFuZCBzb21lIG90aGVycywgd2hvIGFyZSB0aGUgY2F1c2Ugb2YgdGhlIG1pc2NoaWVmLiBGb3IKICAgICAgICAgICAgICAgICAgICBzaG91bGQgdGhlIENvdW5jaWwgcmVjZWl2ZSBubyBjcm93biwgd2hvIHN1ZmZlcnMgZGlzZ3JhY2UsIGlmIGhlIG1ha2VzIG5vIHNwZWVjaAogICAgICAgICAgICAgICAgICAgIGFuZCBtb3ZlcyBubyByZXNvbHV0aW9uIGhpbXNlbGYsIGFuZCBwZXJoYXBzIGV2ZW4gZG9lcyBub3QgYXR0ZW5kIG1vc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVldGluZ3M/IE5vIG9uZSBzdXJlbHkuIFRoZSBkaXNncmFjZSBhdHRhY2hlcyB0byBoaW0gd2hvIG1vdmVzIHJlc29sdXRpb25zIGFuZAogICAgICAgICAgICAgICAgICAgIG1lZGRsZXMgd2l0aCBwb2xpdGljcyBhbmQgdHJpZXMgdG8gaW1wb3NlIGhpcyB3aXNoZXMgb24gdGhlIENvdW5jaWw7IGJlY2F1c2UgaXQKICAgICAgICAgICAgICAgICAgICBpcyB0aHJvdWdoIHN1Y2ggbWVuIHRoYXQgdGhlIGRlbGliZXJhdGlvbnMgb2YgdGhlIENvdW5jaWwgaGF2ZSBwcm92ZWQKICAgICAgICAgICAgICAgICAgICB1bmRlc2VydmluZyBvZiB0aGUgY3Jvd24uIDwvdHJhbnNsYXRpb24+"
translation['22.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0LCBldmVuIGlmIHdlCiAgICAgICAgICAgICAgICAgICAgZ3JhbnQgZnJlZWx5IHRoYXQgdGhlIHdob2xlIENvdW5jaWwgaXMgb24gaXRzIHRyaWFsLCByZWZsZWN0IGhvdyBtdWNoIG1vcmUKICAgICAgICAgICAgICAgICAgICBhZHZhbnRhZ2UgeW91IHdpbGwgZ2FpbiBpZiB5b3UgY29uZGVtbiBBbmRyb3Rpb24sIHRoYW4gaWYgeW91IGRvIG5vdC4gSWYgeW91CiAgICAgICAgICAgICAgICAgICAgYWNxdWl0IGhpbSwgdGhlIHRhbGtlcnMgd2lsbCBydWxlIGluIHRoZSBDb3VuY2lsIGNoYW1iZXIsIGJ1dCBpZiB5b3UgY29udmljdAogICAgICAgICAgICAgICAgICAgIGhpbSwgdGhlIG9yZGluYXJ5IG1lbWJlcnMuIEZvciB3aGVuIHRoZSBtYWpvcml0eSBzZWUgdGhhdCB0aGV5IGhhdmUgbG9zdCB0aGUKICAgICAgICAgICAgICAgICAgICBjcm93biB0aHJvdWdoIHRoZSBtaXNjb25kdWN0IG9mIHRoZSBvcmF0b3JzLCB0aGV5IHdpbGwgbm90IGxlYXZlIHRoZSB0cmFuc2FjdGlvbgogICAgICAgICAgICAgICAgICAgIG9mIGJ1c2luZXNzIGluIHRoZWlyIGhhbmRzLCBidXQgd2lsbCBkZXBlbmQgb24gdGhlbXNlbHZlcyBmb3IgdGhlIGJlc3QgYWR2aWNlLgogICAgICAgICAgICAgICAgICAgIElmIHRoaXMgY29tZXMgdG8gcGFzcywgYW5kIGlmIHlvdSBhcmUgb25jZSByaWQgb2YgdGhlIG9sZCBnYW5nIG9mIG9yYXRvcnMsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IHdpbGwgc2VlCiAgICAgICAgICAgICAgICAgICAgZXZlcnl0aGluZyBkb25lIGFzIGl0IG91Z2h0IHRvIGJlLiBGb3IgdGhpcywgaWYgZm9yIG5vIG90aGVyLCByZWFzb24geW91IG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gY29udmljdC4gPC90cmFuc2xhdGlvbj4="
translation['22.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93CiAgICAgICAgICAgICAgICAgICAgYXR0ZW5kIHRvIGFub3RoZXIgcG9pbnQgdGhhdCBtdXN0IG5vdCBlc2NhcGUgeW91LiBQZXJoYXBzIFBoaWxpcHB1cyB3aWxsIGdldCB1cAogICAgICAgICAgICAgICAgICAgIGFuZCBkZWZlbmQgdGhlIENvdW5jaWw7IHBlcmhhcHMgdG9vIEFudGlnZW5lcyBhbmQgdGhlIGNoZWNraW5nLWNsZXJrPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDOvc+EzrnOs8+BzrHPhs614b26z4Igz4Thv4bPggogICAgICAgICAgICAgICAgICAgICAgICAgICAgzrLOv8+FO+G/hs+CPC9mb3JlaWduPiBjaGVja2VkIGFsbCBmaW5hbmNpYWwgdHJhbnNhY3Rpb25zIHdpdGggd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIENvdW5jaWwgd2FzIGNvbmNlcm5lZC4gSGUgbXVzdCBiZSBkaXN0aW5ndWlzaGVkIGZyb20gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6zz4HOsc68zrzOsc+EzrXhvbvPgjwvZm9yZWlnbj4gLCB3aG8gZGVhbHQgd2l0aCB0aGUgZGVjcmVlcy4gVGhlIHR3bwogICAgICAgICAgICAgICAgICAgICAgICBtZW4gbmFtZWQgYXJlIHVua25vd24uPC9ub3RlPiBhbmQgc29tZSBvdGhlcnMsIHdobyBhbG9uZyB3aXRoIHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICBrZXB0IHRoZSBDb3VuY2lsLWNoYW1iZXIgYXMgdGhlaXIgcHJpdmF0ZSBwcmVzZXJ2ZSwgYW5kIHdobyBhcmUgdGhlIGNhdXNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgZGlzY29udGVudHMuIE5vdyB5b3UgbXVzdCBhbGwgb2JzZXJ2ZSB0aGF0IHRoZWlyIHByZXRlbmNlIGlzIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSBzdXBwb3J0aW5nIHRoZSBjYXVzZSBvZiB0aGUgQ291bmNpbCwgYnV0IHJlYWxseSB0aGV5IHdpbGwgYmUgZmlnaHRpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3duIGludGVyZXN0cywgdG8gc3VwcG9ydCB0aGUgYXVkaXQgd2hpY2ggdGhleSBoYXZlIHRvIHJlbmRlciBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIG9mZmljaWFsIGFjdHMuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM69z4TOuc6zz4HOsc+GzrXhvbrPgiDPhOG/hs+CCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDOss6/z4U74b+Gz4I8L2ZvcmVpZ24+IGNoZWNrZWQgYWxsIGZpbmFuY2lhbCB0cmFuc2FjdGlvbnMgd2l0aCB3aGljaCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQ291bmNpbCB3YXMgY29uY2VybmVkLiBIZSBtdXN0IGJlIGRpc3Rpbmd1aXNoZWQgZnJvbSB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrPPgc6xzrzOvM6xz4TOteG9u8+CPC9mb3JlaWduPiAsIHdobyBkZWFsdCB3aXRoIHRoZSBkZWNyZWVzLiBUaGUgdHdvCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbiBuYW1lZCBhcmUgdW5rbm93bi48L3RyYW5zbGF0aW9uPg=="
translation['22.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlIGNhc2Ugc3RhbmRzIHRodXMuIElmCiAgICAgICAgICAgICAgICAgICAgeW91IGRpc21pc3MgdGhpcyBpbXBlYWNobWVudCwgdGhleSBhcmUgYWxsIGFjcXVpdHRlZCBhbmQgbm90IGEgc2luZ2xlIG9uZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZW0gd2lsbCBwYXkgdGhlIHBlbmFsdHksIGZvciB3aG8gaGVuY2Vmb3J0aCB3b3VsZCBnaXZlIGhpcyB2ZXJkaWN0IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGVtIHdoZW4geW91IGhhdmUgY3Jvd25lZCB0aGUgQ291bmNpbCBvZiB3aGljaCB0aGV5IHdlcmUgdGhlIGxlYWRpbmcgc3Bpcml0cz8KICAgICAgICAgICAgICAgICAgICBCdXQgaWYgeW91IGNvbnZpY3QsIGluIHRoZSBmaXJzdCBwbGFjZSB5b3Ugd2lsbCBoYXZlIGtlcHQgeW91ciBqdWRpY2lhbCBvYXRoOwogICAgICAgICAgICAgICAgICAgIGFuZCBmdXJ0aGVyLCB3aGVuIHlvdSBoYXZlIGVhY2ggb2YgdGhlc2UgbWVuIGJlZm9yZSB5b3UgYXQgdGhlaXIgYXVkaXQsIGFueW9uZQogICAgICAgICAgICAgICAgICAgIHdob20geW91IHRoaW5rIGd1aWx0eSB5b3Ugd2lsbCBwdW5pc2g7IGFuZCBhbnlvbmUgd2hvIGlzIG5vdCwgdGhlbiB3aWxsIGJlIHRoZQogICAgICAgICAgICAgICAgICAgIHRpbWUgdG8gYWNxdWl0IGhpbS4gRG8gbm90LCB0aGVyZWZvcmUsIGFjY2VwdCB0aGVpciB3b3JkcyBhcyBzcG9rZW4gb24gYmVoYWxmIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIENvdW5jaWwgYW5kIG9mIHRoZSBnZW5lcmFsIHB1YmxpYywgYnV0IGJlIGluY2Vuc2VkIGFnYWluc3QgdGhlbSBhcyBpbXBvc3RvcnMKICAgICAgICAgICAgICAgICAgICBkZWZlbmRpbmcgdGhlaXIgb3duIGludGVyZXN0cy4gPC90cmFuc2xhdGlvbj4="
translation['22.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIEkgZXhwZWN0IHRoYXQgQXJjaGlhcywgb2YgdGhlIGRlbWUgb2YKICAgICAgICAgICAgICAgICAgICBDaG9sYXJnYXMs4oCUZm9yIGhlIHRvbyB3YXMgYSBDb3VuY2lsbG9yIGxhc3QgeWVhci13aWxsIHBsZWFkIG9uIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgYmVoYWxmIGluIGhpcyBjaGFyYWN0ZXIgb2YgcmVzcGVjdGFibGUgY2l0aXplbi4gQnV0IEkgc3VnZ2VzdCB0aGF0IHlvdSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBtZWV0IGhpcyBwbGVhIGluIHNvbWUgc3VjaCB3YXkgYXMgdGhpcy4gQXNrIGhpbSB3aGV0aGVyIHRoZSBjb25kdWN0IHdpdGggd2hpY2gKICAgICAgICAgICAgICAgICAgICB0aGUgQ291bmNpbCBhcmUgY2hhcmdlZCBzZWVtcyB0byBoaW0gaG9ub3JhYmxlIG9yIHRoZSByZXZlcnNlLCBhbmQgaWYgaGUgc2F5cwogICAgICAgICAgICAgICAgICAgIOKAnGhvbm9yYWJsZSzigJ0gcGF5IGhpbSBubyBsb25nZXIgdGhlIGF0dGVudGlvbiBkdWUgdG8gYQogICAgICAgICAgICAgICAgICAgIHJlc3BlY3RhYmxlIG1hbjsgaWYgaGUgc2F5cyDigJxkaXNob25vcmFibGUs4oCdIGFzayBoaW0gYSBzZWNvbmQKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbjogd2h5IGRpZCBoZSBsZXQgaXQgcGFzcywgaWYgaGUgY2xhaW1zIHRvIGJlIGEgcmVzcGVjdGFibGUgbWFuPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5JZiBoZSBzYXlzIHRoYXQgaGUgc3Bva2UgYWdhaW5zdCBpdCBidXQKICAgICAgICAgICAgICAgICAgICBjb3VsZCBwZXJzdWFkZSBubyBvbmUsIHN1cmVseSBpdCBpcyByaWRpY3Vsb3VzIGZvciBoaW0gbm93IHRvIGRlZmVuZCB0aGlzCiAgICAgICAgICAgICAgICAgICAgQ291bmNpbCB0aGF0IHJlamVjdGVkIGFsbCBoaXMgZXhjZWxsZW50IGFkdmljZTsgYnV0IGlmIGhlIHNheXMgdGhhdCBoZSBoZWxkIGhpcwogICAgICAgICAgICAgICAgICAgIHRvbmd1ZSwgaXMgaGUgbm90IGd1aWx0eSBvZiBhbiBpbmp1c3RpY2UgaWYgaGUgbmVnbGVjdGVkIGhpcyBjaGFuY2Ugb2YKICAgICAgICAgICAgICAgICAgICBkaXNzdWFkaW5nIHRoZW0gZnJvbSB0aGUgb2ZmZW5jZSB0aGV5IHdlcmUgY29udGVtcGxhdGluZywgYW5kIHlldCB2ZW50dXJlcyBub3cKICAgICAgICAgICAgICAgICAgICB0byBzYXkgdGhhdCBoYXZpbmcgYWN0dWFsbHkgZG9uZSBzbyBtdWNoIGV2aWwgdGhleSBkZXNlcnZlIHRvIGJlIGNyb3duZWQ/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBleHBlY3QKICAgICAgICAgICAgICAgICAgICB0b28gdGhhdCBBbmRyb3Rpb24gd2lsbCBub3QgcmVmcmFpbiBmcm9tIHBsZWFkaW5nIHRoYXQgYWxsIHRoaXMgaGFzIGNvbWUgdXBvbgogICAgICAgICAgICAgICAgICAgIGhpbSBiZWNhdXNlIG9mIGhpcyBzdWNjZXNzIGluIGNvbGxlY3Rpbmcgb24geW91ciBiZWhhbGYgbGFyZ2UgYXJyZWFycyBvZiB0YXhlcywKICAgICAgICAgICAgICAgICAgICB3aGljaCBhIGZldyBjaXRpemVucyDvvIhzbyBoZSB3aWxsIHRlbGwgeW9177yJIHNoYW1lbGVzc2x5CiAgICAgICAgICAgICAgICAgICAgbmVnbGVjdGVkIHRvIHBheTsgYW5kIGhlIHdpbGwgZGVub3VuY2UgdGhlc2UgbWVu4oCUdW5kZXJ0YWtpbmcgYW4gZWFzeQogICAgICAgICAgICAgICAgICAgIHRhc2ssIEkgdGhpbmvigJRbZm9yIG5vdCBwYXlpbmcgdGhlaXIgcHJvcGVydHktdGF4XSwKICAgICAgICAgICAgICAgICAgICBhbmQgd2lsbCBwcm9waGVzeSBjb21wbGV0ZSBpbXB1bml0eSBmb3IgYWxsIHdobyBkbyBub3QgcGF5LCBpZiB5b3UgZ2l2ZSB5b3VyCiAgICAgICAgICAgICAgICAgICAgdmVyZGljdCBhZ2FpbnN0IGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['22.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSSBtdXN0IGZpcnN0IGFzayB5b3UsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8gcmVmbGVjdCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uIHlvdSBhcmUgc3dvcm4gdG8gZGVjaWRlIGlzIG5vdCB0aGlzLCBidXQgd2hldGhlciBoaXMgcHJvcG9zYWwgd2FzIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXdzLiBOZXh0IHJlZmxlY3QgdGhhdCBpdCBpcyBvdXRyYWdlb3VzIGluIG9uZSB3aG8gY2hhcmdlcwogICAgICAgICAgICAgICAgICAgIG90aGVycyB3aXRoIHZpb2xhdGluZyB0aGUgY29uc3RpdHV0aW9uIHRvIGNsYWltIGV4ZW1wdGlvbiBmcm9tIHB1bmlzaG1lbnQgZm9yCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBtb3JlIHNlcmlvdXMgdmlvbGF0aW9uczsgYmVjYXVzZSBpdCBpcyBvYnZpb3VzbHkgbW9yZSBzZXJpb3VzIHRvIHByb3Bvc2UKICAgICAgICAgICAgICAgICAgICBhbiB1bmNvbnN0aXR1dGlvbmFsIGRlY3JlZSB0aGFuIHRvIGZhaWwgdG8gcGF5IHRoZSBwcm9wZXJ0eS10YXguIDwvdHJhbnNsYXRpb24+"
translation['22.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGV2ZW4gaWYgaXQgd2VyZSBjZXJ0YWluIHRoYXQgYWZ0ZXIgdGhpcyBtYW4ncwogICAgICAgICAgICAgICAgICAgIGNvbnZpY3Rpb24gbm8gb25lIHdvdWxkIHBheSB0aGUgdGF4IG9yIGJlIHdpbGxpbmcgdG8gY29sbGVjdCBpdCwgZXZlbiBzbyB5b3UKICAgICAgICAgICAgICAgICAgICBtdXN0IG5vdCBhY3F1aXQgaGltLCBhcyB5b3Ugd2lsbCBzZWUgZnJvbSB0aGlzIGNvbnNpZGVyYXRpb24uIFVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHktdGF4ZXMgZnJvbSB0aGUgYXJjaG9uc2hpcCBvZiBOYXVzaW5pY3Vz4oCUc2F5IHRocmVlIGh1bmRyZWQKICAgICAgICAgICAgICAgICAgICB0YWxlbnRzIG9yIGEgdHJpZmxlIG1vcmU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBmaWd1cmUgaXMgcHJvYmFibHkKICAgICAgICAgICAgICAgICAgICAgICAgY29ycnVwdCwgYmVpbmcgdG9vIGxhcmdlIGZvciBhIHNpbmdsZSB5ZWFyLCBhbmQgdG9vIHNtYWxsIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdHdlbnR5LXRocmVlIHllYXJzIGZyb20gdGhlIGFyY2hvbnNoaXAgb2YgTmF1c2luaWN1cwogICAgICAgICAgICAgICAgICAgICAgICDvvIgzNzgtMzc377yJIHRvIHRoZSBkYXRlIG9mIHRoaXMgc3BlZWNoLjwvbm90ZT7igJR5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIGEgZGVmaWNpdCBvZiBmb3VydGVlbiB0YWxlbnRzLCBvZiB3aGljaCBoZSBsZXZpZWQgc2V2ZW47IGJ1dCBJIGFtIGFzc3VtaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBsZXZpZWQgdGhlIHdob2xlIGFtb3VudC4gTm93IHlvdSBkbyBub3QgbmVlZCBBbmRyb3Rpb24gdG8gZGVhbCB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIHdpbGxpbmcgcGF5ZXJzLCBidXQgd2l0aCB0aGUgZGVmYXVsdGVycy4gPC90cmFuc2xhdGlvbj4="
translation['22.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5TbwogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlIG5vdyB0byBjb25zaWRlciB3aGV0aGVyIHRoYXQgaXMgdGhlIHZhbHVlIHRoYXQgeW91IHB1dCBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zdGl0dXRpb24sIHRoZSBleGlzdGluZyBsYXdzLCBhbmQgeW91ciByZWdhcmQgZm9yIHlvdXIgb2F0aDtmb3IgaWYgeW91IGFjcXVpdAogICAgICAgICAgICAgICAgICAgIGhpbSwgdGhvdWdoIGhpcyBwcm9wb3NhbCB3YXMgbWFuaWZlc3RseSBpbGxlZ2FsLCBldmVyeW9uZSB3aWxsIGNvbmNsdWRlIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBwcmVmZXJyZWQgdGhpcyBzdW0gb2YgbW9uZXkgdG8gdGhlIGxhd3MgYW5kIHRvIHlvdXIgZ29vZCBmYWl0aC4gV2h5LCBldmVuCiAgICAgICAgICAgICAgICAgICAgaWYgYSBtYW4gZ2F2ZSB5b3UgdGhpcyBzdW0gb3V0IG9mIGhpcyBvd24gcG9ja2V0LCBpdCB3b3VsZCBub3QgYmUgd29ydGggdGFraW5nLAogICAgICAgICAgICAgICAgICAgIG11Y2ggbGVzcyBpZiBpdCBoYXMgdG8gYmUgZXhhY3RlZCBmcm9tIG90aGVycy4gPC90cmFuc2xhdGlvbj4="
translation['22.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIHdoZW4gaGUgdXNlcyB0aGlzIGFyZ3VtZW50LCByZW1lbWJlciB5b3VyIG9hdGgsIGFuZCByZWZsZWN0IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGlzIGluZGljdG1lbnQgY29uY2VybnMgbm90IHRoZSBjb2xsZWN0aW9uIG9mIHRheGVzLCBidXQgdGhlIHNvdmVyZWlnbnR5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MuIEFuZCBhcyB0byBhbGwgdGhpc+KAlGhvdyBoZSB3aWxsIHRyeSB0byBob29kd2luayB5b3UgYnkKICAgICAgICAgICAgICAgICAgICBkaXN0cmFjdGluZyB5b3UgZnJvbSB0aGUgc3ViamVjdCBvZiB0aGlzIGxhdywgYW5kIHdoYXQgcG9pbnRzIHlvdSBtdXN0IGJlYXIgaW4KICAgICAgICAgICAgICAgICAgICBtaW5kIHNvIGFzIG5vdCB0byBnaXZlIHdheSB0byBoaW3igJR0aG91Z2ggSSBtaWdodCBzYXkgbW9yZSBvbiB0aGVzZQogICAgICAgICAgICAgICAgICAgIHN1YmplY3RzLCBJIHdpbGwgcmVmcmFpbiwgYXMgSSB0aGluayB0aGF0IHRoaXMgd2lsbCBzdWZmaWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBkZXNpcmUgYWxzbyB0byBzdWJqZWN0IHRoZQogICAgICAgICAgICAgICAgICAgIHBvbGl0aWNzIG9mIHRoaXMgaG9ub3JhYmxlIGdlbnRsZW1hbiB0byBhIHNjcnV0aW55LCBmcm9tIHdoaWNoIGl0IHdpbGwgYmUgY2xlYXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhcyBub3Qgc3RvcHBlZCBzaG9ydCBvZiB0aGUgdXRtb3N0IGxpbWl0cyBvZiBkZXByYXZpdHk7IGZvciBJIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgcHJvdmUgaGltIHRvIGJlIHNoYW1lbGVzcyBhbmQgcmVja2xlc3MsIGEgdGhpZWYgYW5kIGEgYnVsbHksIGZpdCBmb3IgYW55dGhpbmcKICAgICAgICAgICAgICAgICAgICByYXRoZXIgdGhhbiB0byBwbGF5IGEgcHVibGljIHBhcnQgaW4gYSBkZW1vY3JhY3kuIEFuZCBmaXJzdCBvZiBhbGwgbGV0IHVzCiAgICAgICAgICAgICAgICAgICAgZXhhbWluZSB0aGlzIGxldnlpbmcgb2YgdGF4ZXMsIG9uIHdoaWNoIGhlIGNoaWVmbHkgcHJpZGVzIGhpbXNlbGYuIFdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBwYXlpbmcgYW55IGF0dGVudGlvbiB0byBoaXMgYm9hc3RzLCBsZXQgdXMgbG9vayBhdCB0aGUgZmFjdHMgaW4gdGhlaXIgdHJ1ZQogICAgICAgICAgICAgICAgICAgIGxpZ2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['22.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBzYWlkIHRoYXQgRXVjdGVtb24gd2FzIHJldGFpbmluZwogICAgICAgICAgICAgICAgICAgIHlvdXIgdGF4ZXMsIGFuZCBoZSB1bmRlcnRvb2sgdG8gcHJvdmUgdGhlIGNoYXJnZSBvciBwYXkgdGhlIHN1bSBvdXQgb2YgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHBvY2tldC4gT24gdGhhdCBwcmV0ZXh0IGhlIGdvdCB5b3UgdG8gdm90ZSBmb3IgdGhlIGRpc21pc3NhbCBvZiBhbiBvZmZpY2lhbAogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBieSBsb3QsIGFuZCBzbyB3b3JtZWQgaGlzIHdheSBpbnRvIGEgY29sbGVjdG9yc2hpcC4gSGUgZGVsaXZlcmVkCiAgICAgICAgICAgICAgICAgICAgc3VuZHJ5IGhhcmFuZ3VlcyBvbiB0aGUgc3ViamVjdCwgdGVsbGluZyB5b3UgdGhhdCB5b3UgaGFkIGEgY2hvaWNlIG9mIHRocmVlCiAgICAgICAgICAgICAgICAgICAgY291cnNlcywgZWl0aGVyIHRvIGJyZWFrIHVwIHRoZSBzYWNyZWQgcGxhdGUsIG9yIHRvIGltcG9zZSBhIGZyZXNoIHRheCwgb3IgdG8KICAgICAgICAgICAgICAgICAgICBzcXVlZXplIHRoZSBtb25leSBvdXQgb2YgdGhlIGRlZmF1bHRlcnM7IGFuZCB5b3UgbmF0dXJhbGx5IGNob3NlIHRoZSBsYXN0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgeW91IHVuZGVyIGhpcyB0aHVtYiwgdGhhbmtzIHRvIGhpcwogICAgICAgICAgICAgICAgICAgIHByb21pc2VzLCBhbmQgaGF2aW5nIGxpYmVydHkgb2YgYWN0aW9uIG93aW5nIHRvIHRoZSBzdGF0ZSBvZiBhZmZhaXJzIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHRpbWUsIGhlIGRpZCBub3QgdGhpbmsgaXQgbmVjZXNzYXJ5IHRvIGVtcGxveSB0aGUgZXhpc3RpbmcgbGF3cyBmb3IgaGlzIHB1cnBvc2UsCiAgICAgICAgICAgICAgICAgICAgbm9yIHRvIG1ha2UgbmV3IGxhd3MsIGlmIGhlIGNvbnNpZGVyZWQgdGhlIG9sZCBvbmVzIGluYWRlcXVhdGU7IGJ1dCBoZSBwcm9wb3NlZAogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgQXNzZW1ibHkgbW9uc3Ryb3VzIGFuZCB1bmNvbnN0aXR1dGlvbmFsIGRlY3JlZXMsIGJ5IG1lYW5zIG9mIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZCBhIGpvYiBmb3IgaGltc2VsZiBhbmQgaGFzIHN0b2xlbiBhIGdyZWF0IGRlYWwgdGhhdCBiZWxvbmdzIHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICBwdXR0aW5nIGluIGEgY2xhdXNlIHRoYXQgdGhlIEVsZXZlbiBzaG91bGQgYXR0ZW5kIG9uIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['22.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCB3aXRoIHRoZSBFbGV2ZW4sIGhlIGxlZCB0aGUgd2F5IHRvIHRoZSBob21lcyBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBmZWxsb3ctY2l0aXplbnMuIEFnYWluc3QgRXVjdGVtb24gaGUgY291bGQgcHJvdmUgbm90aGluZywgdGhvdWdoIGhlIGhhZCBzYWlkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3b3VsZCBnZXQgdGhlIHRheGVzIG91dCBvZiBoaW0gb3IgcGF5IHRoZW0gaGltc2VsZjsgYnV0IGl0IHdhcyBmcm9tIHlvdQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgbGV2aWVkIHRoZW0sIGFzIGlmIGhpcyBtb3RpdmUgd2FzIGhvc3RpbGl0eSwgbm90IHRvIEV1Y3RlbW9uLCBidXQgdG8KICAgICAgICAgICAgICAgICAgICB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['22.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5MZXQgbm8gb25lIHVuZGVyc3RhbmQgbWUgdG8gc2F5IHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgb3VnaHQgbm90IHRvIGhhdmUgYmVlbiB3cnVuZyBmcm9tIHRoZSBkZWZhdWx0ZXJzLiBJdCBvdWdodDsgYnV0IGhvdz8gRXZlbgogICAgICAgICAgICAgICAgICAgIGFzIHRoZSBsYXcgZW5qb2lucywgZm9yIHRoZSBiZW5lZml0IG9mIHRoZSBvdGhlciBjaXRpemVucy4gVGhhdCBpcyB0aGUgc3Bpcml0IG9mCiAgICAgICAgICAgICAgICAgICAgZGVtb2NyYWN5LiBGb3Igd2hhdCB5b3UsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGhhdmUgZ2FpbmVkIGJ5IHRoZSBleGFjdGlvbiBvZiBzdWNoIHBhbHRyeSBzdW1zIG9mCiAgICAgICAgICAgICAgICAgICAgbW9uZXkgaW4gdGhpcyB3YXksIGlzIG5vdGhpbmcgdG8gd2hhdCB5b3UgaGF2ZSBsb3N0IGJ5IHRoZSBpbnRyb2R1Y3Rpb24gb2Ygc3VjaAogICAgICAgICAgICAgICAgICAgIGhhYml0cyBpbnRvIHBvbGl0aWNhbCBsaWZlLiBJZiB5b3UgY2FyZSB0byBpbnF1aXJlIHdoeSBhIG1hbiB3b3VsZCBzb29uZXIgbGl2ZQogICAgICAgICAgICAgICAgICAgIHVuZGVyIGEgZGVtb2NyYWN5IHRoYW4gdW5kZXIgYW4gb2xpZ2FyY2h5LCB5b3Ugd2lsbCBmaW5kIHRoYXQgbW9zdCBvYnZpb3VzCiAgICAgICAgICAgICAgICAgICAgcmVhc29uIGlzIHRoYXQgaW4gYSBkZW1vY3JhY3kgZXZlcnl0aGluZyBpcyBtb3JlIGVhc3ktZ29pbmcuIDwvdHJhbnNsYXRpb24+"
translation['22.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5JIHNoYWxsIG5vdCwgdGhlbiwgdHJvdWJsZSB0byBzaG93IHRoYXQgdGhlIGRlZmVuZGFudCBoYXMKICAgICAgICAgICAgICAgICAgICBwcm92ZWQgaGltc2VsZiBtb3JlIGJydXRhbCB0aGFuIGFueSBvbGlnYXJjaHkgYW55d2hlcmUgaW4gdGhlIHdvcmxkLiBCdXQgaGVyZSwKICAgICAgICAgICAgICAgICAgICBpbiBvdXIgb3duIGNpdHksIGF0IHdoYXQgcGVyaW9kIHdlcmUgdGhlIG1vc3Qgb3V0cmFnZW91cyB0aGluZ3MgZG9uZT8gWW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBhbGwgc2F5LCDigJxVbmRlciB0aGUgVGhpcnR5IFR5cmFudHMu4oCdIE5vdyB1bmRlciB0aGUgVGhpcnR5LAogICAgICAgICAgICAgICAgICAgIGFzIHdlIGFyZSBpbmZvcm1lZCwgbm8gbWFuIGZvcmZlaXRlZCB0aGUgcG93ZXIgdG8gc2F2ZSBoaXMgbGlmZSB3aG8gY291bGQgaGlkZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgYXQgaG9tZTsgd2hhdCB3ZSBkZW5vdW5jZSB0aGUgVGhpcnR5IGZvciBpcyB0aGF0IHRoZXkgYXJyZXN0ZWQgbWVuCiAgICAgICAgICAgICAgICAgICAgaWxsZWdhbGx5IGluIHRoZSBtYXJrZXQtcGxhY2UuIFRoaXMgbWFuIGRpc3BsYXllZCBhIGJydXRhbGl0eSBzbyBmYXIgaW4gZXhjZXNzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlaXJzIHRoYXQgaGUsIGEgcHVibGljIG1hbiB1bmRlciBhIGRlbW9jcmFjeSwgdHVybmVkIGV2ZXJ5IG1hbidzIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBob3VzZSBpbnRvIGEgamFpbCBieSBjb25kdWN0aW5nIHRoZSBFbGV2ZW4gaW50byB5b3VyIGhvbWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hhdCBkbyB5b3UgdGhpbmsgb2YgdGhpcywgQXRoZW5pYW5zPyBXaGF0IGlmIGEgcG9vcgogICAgICAgICAgICAgICAgICAgIG1hbiwgb3IgYSByaWNoIG1hbiBmb3IgdGhhdCBtYXR0ZXIgd2hvIGhhcyBzcGVudCBtdWNoIG1vbmV5IGFuZCBpcyBuYXR1cmFsbHkKICAgICAgICAgICAgICAgICAgICBwZXJoYXBzIHJhdGhlciBzaG9ydCBvZiBjYXNoLCBzaG91bGQgaGF2ZSB0byBjbGltYiBvdmVyIHRoZSByb29mIHRvIGEgbmVpZ2hib3IncwogICAgICAgICAgICAgICAgICAgIGhvdXNlIG9yIGNyZWVwIHVuZGVyIGJlZCwgdG8gYXZvaWQgYmVpbmcgY2F1Z2h0IGFuZCBkcmFnZ2VkIG9mZiB0byBqYWlsLCBvcgogICAgICAgICAgICAgICAgICAgIHNob3VsZCBkZWdyYWRlIGhpbXNlbGYgaW4gc29tZSBvdGhlciBmYXNoaW9uLCBmaXQgZm9yIHNsYXZlcyBhbmQgbm90IGZvcgogICAgICAgICAgICAgICAgICAgIGZyZWVtZW4sIGFuZCBzaG91bGQgYmUgc2VlbiB0aHVzIGFjdGluZyBieSBoaXMgb3duIHdpZmUsIHdob20gaGUgZXNwb3VzZWQgYXMgYQogICAgICAgICAgICAgICAgICAgIGZyZWVtYW4gYW5kIGEgY2l0aXplbiBvZiBvdXIgc3RhdGU/IEFuZCB3aGF0IGlmIHRoZSBjYXVzZSBvZiBhbGwgdGhpcyB3YXMKICAgICAgICAgICAgICAgICAgICBBbmRyb3Rpb24sIGEgbWFuIHdobyBpcyBkZWJhcnJlZCBieSBoaXMgb3duIGNvbmR1Y3QgYW5kIG1vZGUgb2YgbGlmZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgc2Vla2luZyByZWRyZXNzIGZvciBoaW1zZWxmLCBtdWNoIG1vcmUgZm9yIHRoZSBTdGF0ZT8gPC90cmFuc2xhdGlvbj4="
translation['22.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgaWYgaGUgd2VyZSBhc2tlZCB3aGV0aGVyIHRoZSB0YXhlcyBhcmUgZHVlIGZyb20gb3VyCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgb3IgZnJvbSBvdXIgcGVyc29ucywgaGUgd291bGQgYWRtaXQsIGlmIGhlIGNhcmVkIHRvIHNwZWFrIHRoZSB0cnV0aCwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgYXJlIGR1ZSBmcm9tIG91ciBwcm9wZXJ0eTsgaXQgaXMgZnJvbSBwcm9wZXJ0eSB0aGF0IG91ciBjb250cmlidXRpb25zCiAgICAgICAgICAgICAgICAgICAgY29tZS4gVGhlbiB3aHkgZGlkIHlvdSBkcm9wIHRoZSBzZXF1ZXN0cmF0aW9uIGFuZCBzY2hlZHVsaW5nIG9mIGxhbmRzIGFuZAogICAgICAgICAgICAgICAgICAgIGhvdXNlcywgYW5kIHByb2NlZWQgdG8gaW1wcmlzb24gYW5kIGluc3VsdCBBdGhlbmlhbiBjaXRpemVucyBhbmQgdGhlIHVuZm9ydHVuYXRlCiAgICAgICAgICAgICAgICAgICAgcmVzaWRlbnQgYWxpZW5zLCB3aG9tIHlvdSBoYXZlIHRyZWF0ZWQgd2l0aCBtb3JlIGluc29sZW5jZSB0aGFuIHlvdXIgb3duIHNsYXZlcz8KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQsIGlmIHlvdSB3YW50ZWQgdG8gY29udHJhc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgc2xhdmUgYW5kIHRoZSBmcmVlbWFuLCB5b3Ugd291bGQgZmluZCB0aGUgbW9zdCBpbXBvcnRhbnQgZGlzdGluY3Rpb24gaW4gdGhlIGZhY3QKICAgICAgICAgICAgICAgICAgICB0aGF0IHNsYXZlcyBhcmUgcmVzcG9uc2libGUgaW4gcGVyc29uIGZvciBhbGwgb2ZmZW5jZXMsIHdoaWxlIGZyZWVtZW4sIGV2ZW4gaW4KICAgICAgICAgICAgICAgICAgICB0aGUgbW9zdCB1bmZvcnR1bmF0ZSBjaXJjdW1zdGFuY2VzLCBjYW4gcHJvdGVjdCB0aGVpciBwZXJzb25zLiBGb3IgaXQgaXMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2hhcGUgb2YgbW9uZXkgdGhhdCBpbiB0aGUgbWFqb3JpdHkgb2YgY2FzZXMgdGhlIGxhdyBtdXN0IG9idGFpbiBzYXRpc2ZhY3Rpb24KICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZW07IGJ1dCBBbmRyb3Rpb24gb24gdGhlIGNvbnRyYXJ5IGV4YWN0ZWQgdmVuZ2VhbmNlIGZyb20gdGhlaXIgcGVyc29ucywKICAgICAgICAgICAgICAgICAgICBhcyBpZiB0aGV5IGhhZCBiZWVuIGJvbmQtc2xhdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBjb3JydXB0CiAgICAgICAgICAgICAgICAgICAgYW5kIHNlbGZpc2ggd2FzIGhpcyBhdHRpdHVkZSB0b3dhcmRzIHlvdSB0aGF0IGhlIHRob3VnaHQgdGhhdCBoaXMgb3duIGZhdGhlciwKICAgICAgICAgICAgICAgICAgICBpbXByaXNvbmVkIGJ5IHRoZSBTdGF0ZSBmb3IgbW9uZXlzIGR1ZSwgaGFkIGEgcmlnaHQgdG8gZXNjYXBlLCB3aXRob3V0IHBheW1lbnQKICAgICAgICAgICAgICAgICAgICBhbmQgd2l0aG91dCB0cmlhbCwgYnV0IHRoYXQgYW55IG90aGVyIGNpdGl6ZW4sIG5vdCBoYXZpbmcgdGhlIG1lYW5zIHRvIHBheSwKICAgICAgICAgICAgICAgICAgICBtaWdodCBiZSBkcmFnZ2VkIGZyb20gaGlzIG93biBob21lIHRvIHByaXNvbi4gQW5kIHRoZW4sIG9uIHRoZSB0b3Agb2YgYWxsIHRoaXMsCiAgICAgICAgICAgICAgICAgICAgYXMgdGhvdWdoIGhlIGNvdWxkIGRvIHdoYXRldmVyIGhlIGxpa2VkLCBoZSBkaXN0cmFpbmVkIHVwb24gU2lub3BlIGFuZAogICAgICAgICAgICAgICAgICAgIFBoYW5vc3RyYXRlLCB3aG8gd2VyZSBwcm9zdGl0dXRlcyBjZXJ0YWlubHksIGJ1dCBvd2VkIG5vIHByb3BlcnR5LXRheC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5TaG91bGQgYW55b25lIHBvc3NpYmx5IHRoaW5rIHRoYXQgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3b21lbiB3ZXJlIGZpdHRpbmcgcGVvcGxlIHRvIHN1ZmZlciwgeWV0IGFzc3VyZWRseSBpdCB3YXMgbm90IGEgZml0dGluZwogICAgICAgICAgICAgICAgICAgIHByb2NlZHVyZeKAlHRoYXQgbWVuIHNob3VsZCBiZSBzbyBwdWZmZWQgdXAgYnkgYSBjaGFuY2Ugb3Bwb3J0dW5pdHkgYXMKICAgICAgICAgICAgICAgICAgICB0byBtYXJjaCBpbnRvIGhvdXNlcyBhbmQgY2Fycnkgb2ZmIHRoZSBmdXJuaXR1cmUgb2YgcGVvcGxlIHdobyBhcmUgbm90IGluIGRlYnQuCiAgICAgICAgICAgICAgICAgICAgRm9yIG9uZSBjb3VsZCBwb2ludCB0byBtYW55IHdobyBhcmUgYW5kIGhhdmUgYmVlbiDigJxmaXR0aW5nCiAgICAgICAgICAgICAgICAgICAgcGVyc29uc+KAnSBmb3Igc3VjaCB0cmVhdG1lbnQuIEJ1dCBzdXJlbHkgc3VjaCBpcyBub3QgdGhlIGxhbmd1YWdlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXR1dGVzIG9yIG9mIHRoZSBwcmluY2lwbGVzIG9mIHRoZSBjb25zdGl0dXRpb24sIHdoaWNoIGl0IGlzIHlvdXIgZHV0eSB0bwogICAgICAgICAgICAgICAgICAgIHVwaG9sZC4gSW4gdGhlbSB3ZSBmaW5kIHBpdHksIHBhcmRvbiwgZXZlcnl0aGluZyB0aGF0IGJlY29tZXMgZnJlZSBjaXRpemVucy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5UbyBhbGwgc3VjaCBmZWVsaW5ncyB0aGUgZGVmZW5kYW50IGlzIG9mCiAgICAgICAgICAgICAgICAgICAgY291cnNlIGEgc3RyYW5nZXIgYnkgYmlydGggYW5kIGJyZWVkaW5nLiBNYW55IGFyZSB0aGUgb3V0cmFnZXMgYW5kIGluc3VsdHMgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGhhcyBoYWQgdG8gc3VibWl0IHRvIHdoZW4gY29uc29ydGluZyB3aXRoIG1lbiB3aG8gaGFkIG5vIGxvdmUgZm9yIGhpbSBidXQKICAgICAgICAgICAgICAgICAgICBjb3VsZCBwYXkgaGlzIHByaWNlLiBGb3Igc3VjaCBpbnN1bHRzLCBBbmRyb3Rpb24sIGl0IHdvdWxkIGhhdmUgYmVlbiByaWdodCB0bwogICAgICAgICAgICAgICAgICAgIHZlbnQgeW91ciBzcGl0ZSwgbm90IG9uIHRoZSBuZXh0IGNpdGl6ZW4geW91IG1lZXQsIG5vdCBvbiB0aGUgd29tZW4gd2hvIGZvbGxvdwogICAgICAgICAgICAgICAgICAgIHlvdXIgb3duIHByb2Zlc3Npb24sIGJ1dCBvbiB0aGUgZmF0aGVyIHdobyBnYXZlIHlvdSBzdWNoIGEgYnJpbmdpbmcgdXAuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBhcmUgc2VyaW91cyBvZmZlbmNlcywgY29udHJhcnkgdG8gZXZlcnkgc3RhdHV0ZSwgaGUgd2lsbCBub3QgYmUgYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIGRlbnk7IGJ1dCBoZSBpcyBzbyBpbXB1ZGVudCB0aGF0IGluIHRoZSBBc3NlbWJseSwgY29udHJpdmluZyBhbHdheXMgYW4KICAgICAgICAgICAgICAgICAgICBhbnRpY2lwYXRpb24gb2YgaGlzIGRlZmVuY2UgYWdhaW5zdCB0aGlzIGluZGljdG1lbnQsIGhlIGRhcmVkIHRvIHNheSB0aGF0IGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgaW50ZXJlc3RzIGFuZCBmb3IgeW91ciBzYWtlIHRoYXQgaGUgaGFkIGRyYXduIGRvd24gZW5taXR5IG9uIGhpbXNlbGYgYW5kCiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdyBpbiBkZXNwZXJhdGUgcGVyaWwuIEJ1dCBJIHdhbnQgdG8gcHJvdmUgdG8geW91LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IGhlIGhhcyBuZXZlciBzdWZmZXJlZCwgbm9yIGlzCiAgICAgICAgICAgICAgICAgICAgbGlrZWx5IHRvIHN1ZmZlciwgYW55IGluY29udmVuaWVuY2UgYXQgYWxsIHRocm91Z2ggaGlzIHNlcnZpY2VzIHRvIHlvdSwgYnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICBmb3IgaGlzIGFib21pbmFibGUgYW5kIG1vbnN0cm91cyB3aWNrZWRuZXNzIGhlIGhhcyBoaXRoZXJ0byBub3QgcGFpZCB0aGUKICAgICAgICAgICAgICAgICAgICBwZW5hbHR5LCBidXQgd2lsbCBwYXkgaXQgbm93LCBpZiB5b3Ugb24geW91ciBwYXJ0IGRvIHdoYXQgaXMgcmlnaHQuIDwvdHJhbnNsYXRpb24+"
translation['22.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5Db25zaWRlciB0aGlzIHBvaW50LiBXaGF0IGRpZCBoZSB1bmRlcnRha2UgdG8gZG8gZm9yCiAgICAgICAgICAgICAgICAgICAgeW91LCBhbmQgd2hhdCBkaWQgeW91IGFwcG9pbnQgaGltIHRvIGRvPyBUbyBjb2xsZWN0IG1vbmV5cy4gQW55dGhpbmcgZWxzZQogICAgICAgICAgICAgICAgICAgIGJlc2lkZXM/IE5vdCBhIHNpbmdsZSB0aGluZyEgVmVyeSB3ZWxsOyBJIHdpbGwgcmVtaW5kIHlvdSBvZiB0aGUgaXRlbXMgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMuIEhlIGNvbGxlY3RlZCBmcm9tIExlcHRpbmVzIG9mIENvZWxlIHRoaXJ0eS1mb3VyIGRyYWNobWFzLCBmcm9tCiAgICAgICAgICAgICAgICAgICAgVGhlb3hlbnVzIG9mIEFsb3BlY2Ugc2V2ZW50eSBkcmFjaG1hcyBvciBhIHRyaWZsZSBtb3JlLCBhbmQgZnJvbSBDYWxsaWNyYXRlcywKICAgICAgICAgICAgICAgICAgICB0aGUgc29uIG9mIEV1cGhlcnVzLCBhbmQgZnJvbSB0aGUgeW91bmcgc29uIG9mIFRlbGVzdGVzLCB3aG9zZSBuYW1lIEkgY2Fubm90CiAgICAgICAgICAgICAgICAgICAgZ2l2ZSB5b3XigJRidXQgd2l0aG91dCBnb2luZyBpbnRvIGRldGFpbHMsIG9mIGFsbCB0aG9zZSBmcm9tIHdob20gaGUKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgbW9uZXksIEkgZG91YnQgaWYgYW55b25lIG93ZWQgbW9yZSB0aGFuIGEgbWluYS4gPC90cmFuc2xhdGlvbj4="
translation['22.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGRvIHlvdSBzdXBwb3NlIHRoYXQgYWxsIHRoZXNlIG1lbiBhcmUgaGlzIGludmV0ZXJhdGUKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzIG1lcmVseSBiZWNhdXNlIGhlIGNvbGxlY3RlZCB0aGlzIG1vbmV5IGZyb20gdGhlbT8gSXMgaXQgbm90IHJhdGhlcgogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgaGUgc2FpZCBvZiBvbmUgb2YgdGhlbSwgaW4gdGhlIGhlYXJpbmcgb2YgYWxsIG9mIHlvdSBpbiB0aGUgQXNzZW1ibHksCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3YXMgYSBzbGF2ZSBhbmQgYm9ybiBvZiBzbGF2ZXMgYW5kIG91Z2h0IGJ5IHJpZ2h0cyB0byBwYXkgdGhlCiAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0aW9uIG9mIG9uZS1zaXh0aCB3aXRoIHRoZSByZXNpZGVudCBhbGllbnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIG1ldG9lY2kgcGFpZCB0YXggb24gb25lLXNpeHRoIG9mIHRoZWlyIGNhcGl0YWw7IGJ1dAogICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJseSwgYXMgTXIuIFdheXRlIGhhcyBzdWdnZXN0ZWQsIHRoZXkgcGFpZCB0aGUgc2FtZSBxdW90YXMgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIHBsdXMgYW4gYWRkaXRpb25hbCBjaGFyZ2Ugb2Ygb25lLXNpeHRoLjwvbm90ZT47IGFuZCBvZiBhbm90aGVyIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgY2hpbGRyZW4gYnkgYSBoYXJsb3Q7IG9mIHRoaXMgbWFuIHRoYXQgaGlzIGZhdGhlciBoYWQgcHJvc3RpdHV0ZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmOyBvZiB0aGF0IG1hbiB0aGF0IGhpcyBtb3RoZXIgaGFkIGJlZW4gb24gdGhlIHN0cmVldHM7IHRoYXQgaGUgd2FzIG1ha2luZwogICAgICAgICAgICAgICAgICAgIGFuIGludmVudG9yeSBvZiBvbmUgbWFuJ3MgcGVjdWxhdGlvbnMgZnJvbSB0aGUgc3RhcnQgb2YgaGlzIGNhcmVlciwgdGhhdCBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgaGFkIGRvbmUgdGhpcyBvciB0aGF0LCBhbmQgdGhhdCBhIHRoaXJkIGhhZCBjb21taXR0ZWQgZXZlcnkgY29uY2VpdmFibGUKICAgICAgICAgICAgICAgICAgICBjcmltZeKAlHNsYW5kZXJpbmcgdGhlbSBhbGwgaW4gdHVybj8gPC90cmFuc2xhdGlvbj4="
translation['22.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5JCiAgICAgICAgICAgICAgICAgICAgZmVlbCBzdXJlIHRoYXQgb2YgYWxsIHdob20gaGUgaGFzIGFidXNlZCBpbiBoaXMgY3VwcywgZWFjaCBvbmUgbG9va2VkIHVwb24gdGhlCiAgICAgICAgICAgICAgICAgICAgdGF4IGFzIGEgbmVjZXNzYXJ5IGl0ZW0gb2YgZXhwZW5kaXR1cmUsIGJ1dCBoYXMgYmVlbiBkZWVwbHkgd291bmRlZCBieSBhbGwgdGhlc2UKICAgICAgICAgICAgICAgICAgICBpbmRpZ25pdGllcyBhbmQgaW5zdWx0cy4gSSBmZWVsIHN1cmUgdG9vIHRoYXQgaGUgd2FzIGVsZWN0ZWQgYnkgeW91IHRvIGNvbGxlY3QKICAgICAgICAgICAgICAgICAgICBtb25leSBkdWUsIGFuZCBub3QgdG8gcmVwcm9hY2ggZXZlcnkgbWFuIHdpdGggaGlzIHByaXZhdGUgbWlzZm9ydHVuZXMgYW5kIHNvCiAgICAgICAgICAgICAgICAgICAgbWFrZSB0aGVtIHB1YmxpYy4gRm9yIGlmIHRoZSBjaGFyZ2VzIHdlcmUgdHJ1ZSwgQW5kcm90aW9uIO+8iGFuZCB3ZSBhbGwKICAgICAgICAgICAgICAgICAgICBoYXZlIG91ciB1bmRlc2lyYWJsZSBleHBlcmllbmNlc++8iSwgeW91IGhhZCBubyByaWdodCB0byBwdWJsaXNoIHRoZW07CiAgICAgICAgICAgICAgICAgICAgYW5kIGlmIHlvdSBpbnZlbnRlZCB0aGVtIHdpdGhvdXQgYW55IGF1dGhvcml0eSwgaXMgYW55IHB1bmlzaG1lbnQgdG9vIGxpZ2h0IGZvcgogICAgICAgICAgICAgICAgICAgIHlvdT8gPC90cmFuc2xhdGlvbj4="
translation['22.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIGlzIHlldCBhbm90aGVyIHByb29mIHRoYXQgd2lsbAogICAgICAgICAgICAgICAgICAgIGNvbnZpbmNlIHlvdSB0aGF0IHRoZXkgYWxsIGhhdGUgaGltLCBub3QgYmVjYXVzZSBvZiB0aGUgY29sbGVjdGlvbiwgYnV0IGZvciBoaXMKICAgICAgICAgICAgICAgICAgICBhY3RzIG9mIGRydW5rZW4gaW5zb2xlbmNlLiBTYXR5cnVzLCB0aGUgc3VwZXJpbnRlbmRlbnQgb2YgdGhlIGRvY2steWFyZHMsCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGVkIGZvciB5b3Ugbm90IHNldmVuLCBidXQgdGhpcnR5LWZvdXIgdGFsZW50cyBmcm9tIHRoZXNlIHZlcnkgc2FtZSBtZW4sCiAgICAgICAgICAgICAgICAgICAgYW5kIHVzZWQgdGhlIG1vbmV5IHRvIGVxdWlwIHRoZSBzaGlwcyB0aGF0IHdlcmUgcHV0IGluIGNvbW1pc3Npb247IGFuZCBoZSBjYW4KICAgICAgICAgICAgICAgICAgICB0ZWxsIHlvdSB0aGF0IGhlIGhhcyBtYWRlIG5vIGVuZW1pZXMgaW4gY29uc2VxdWVuY2UsIGFuZCB0aGF0IG5vbmUgb2YgdGhvc2UgZnJvbQogICAgICAgICAgICAgICAgICAgIHdob20gaGUgbGV2aWVkIHRoZSB0YXhlcyBpcyBhdCBvcGVuIHdhciB3aXRoIGhpbS4gTmF0dXJhbGx5ISBIZSwgSSBzdXBwb3NlLAogICAgICAgICAgICAgICAgICAgIHNpbXBseSBkaXNjaGFyZ2VkIHRoZSBkdXR5IGFzc2lnbmVkIHRvIGhpbSwgYnV0IHlvdSBpbiB5b3VyIHdhbnRvbiwgaGVhZHN0cm9uZwogICAgICAgICAgICAgICAgICAgIGVmZnJvbnRlcnksIGJlaW5nIGFybWVkIHdpdGggYXV0aG9yaXR5LCB0aG91Z2h0IGZpdCB0byB0ZXJzZSB3aXRoIGZvdWwgYW5kIGx5aW5nCiAgICAgICAgICAgICAgICAgICAgcmVwcm9hY2hlcyBtZW4gd2hvIGhhZCBzcGVudCBsYXJnZSBzdW1zIG9uIHRoZSBTdGF0ZSwgYmV0dGVyIG1lbiB0aGFuIHlvdXJzZWxmCiAgICAgICAgICAgICAgICAgICAgYW5kIG9mIGJldHRlciBiaXJ0aC4gPC90cmFuc2xhdGlvbj4="
translation['22.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBhcmUgdGhlIGp1cnkKICAgICAgICAgICAgICAgICAgICB0byBiZWxpZXZlIHRoYXQgeW91IGRpZCBpdCBhbGwgZm9yIHRoZWlyIHNha2VzPyBBcmUgdGhleSB0byBtYWtlIHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICByZXNwb25zaWJsZSBmb3IgeW91ciBhY3RzIG9mIGNhbGxvdXMgd2lja2VkbmVzcz8gVGhleSBvdWdodCBpbiBqdXN0aWNlIHRvIGRldGVzdAogICAgICAgICAgICAgICAgICAgIHlvdSBhbGwgdGhlIG1vcmUgZm9yIHRoaXMgcmF0aGVyIHRoYW4gcHJvdGVjdCB5b3UuIEZvciB0aGUgbWFuIHdobyBpcyBhY3RpbmcgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIFN0YXRlIG91Z2h0IHRvIGltaXRhdGUgdGhlIHNwaXJpdCBvZiB0aGUgU3RhdGUsIGFuZCB5b3UsIEF0aGVuaWFucywgb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBlbmNvdXJhZ2Ugc3VjaCBtZW4gYW5kIGhhdGUgbWVuIGxpa2UgdGhlIGRlZmVuZGFudC4gRm9yIHRob3VnaCB5b3UgYXJlIHByb2JhYmx5CiAgICAgICAgICAgICAgICAgICAgYXdhcmUgb2YgaXQsIEkgbXVzdCBub25lIHRoZSBsZXNzIHRlbGwgeW91IHRoaXM6IHdoYXRldmVyIHNvcnQgb2YgbWVuIHlvdSBhcmUKICAgICAgICAgICAgICAgICAgICBzZWVuIHRvIGhvbm9yIGFuZCBwcm90ZWN0LCB5b3Ugd2lsbCBiZSB0aG91Z2h0IHRvIGJlIGxpa2UgdGhlbSB5b3Vyc2VsdmVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSByZXN0IG9mIHRoaXMgc3BlZWNoIGlzIGFsbW9zdCBlbnRpcmVseQogICAgICAgICAgICAgICAgICAgICAgICByZXBlYXRlZCBpbiB0aGF0IGFnYWluc3QgVGltb2NyYXRlcywgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNC4xNzIiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI0LjE3Mi0xODY8L2JpYmw+Ljwvbm90ZT4gSG93ZXZlciwgSSB3aWxsIG1ha2UgaXQgcXVpdGUgY2xlYXIgdG8geW91CiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBtb3JlIGFkbyB0aGF0IGhlIGRpZCBub3QgY2Fycnkgb3V0IHRoZXNlIGV4YWN0aW9ucyBmb3IgeW91ciBiZW5lZml0IGF0CiAgICAgICAgICAgICAgICAgICAgYWxsLiBJZiBoZSB3ZXJlIGFza2VkIHdoZXRoZXIsIGluIGhpcyBvcGluaW9uLCB0aGUgZ3JlYXRlciBpbmp1cnkgaXMgZG9uZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjb21tb24gd2VhbHRoIGJ5IHRpbGxlcnMgb2YgdGhlIHNvaWwsIHdobyBsaXZlIGZydWdhbGx5LCBidXQsIGJlY2F1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY29zdCBvZiBtYWludGFpbmluZyB0aGVpciBjaGlsZHJlbiwgb3Igb2YgaG91c2Vob2xkIGV4cGVuc2VzLCBvciBvZiBvdGhlciBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBidXJkZW5zLCBhcmUgYmVoaW5kaGFuZCB3aXRoIHRoZWlyIHRheGVzLCBvciBieSBwZW9wbGUgd2hvIHBsdW5kZXIgYW5kIHNxdWFuZGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vbmV5IG9mIHdpbGxpbmcgdGF4cGF5ZXJzIGFuZCB0aGUgcmV2ZW51ZSB0aGF0IGNvbWVzIGZyb20gb3VyIGFsbGllcywgSSBhbQogICAgICAgICAgICAgICAgICAgIHN1cmUgdGhhdCwgZm9yIGFsbCBoaXMgaGFyZGlob29kLCBoZSB3b3VsZCBuZXZlciBoYXZlIHRoZSBhdWRhY2l0eSB0byByZXBseSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGZhaWwgdG8gY29udHJpYnV0ZSB0aGVpciBvd24gbW9uZXkgYXJlIHdvcnNlIHRyYW5zZ3Jlc3NvcnMgdGhhbiB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyBlbWJlenpsZSBwdWJsaWMgbW9uZXkuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjQuMTcyIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNC4xNzItMTg2PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['22.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGlzIHRoZSByZWFzb24sCiAgICAgICAgICAgICAgICAgICAgeW91IGFib21pbmFibGUgd3JldGNoLCB0aGF0IHRob3VnaCB5b3UgaGF2ZSB0YWtlbiBwYXJ0IGluIHB1YmxpYyBsaWZlIGZvciBtb3JlCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGlydHkgeWVhcnMsIGFuZCB0aG91Z2ggZHVyaW5nIHRoYXQgdGltZSBtYW55IGNvbW1hbmRlcnMgaGF2ZSBkZWZyYXVkZWQKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9ud2VhbHRoLCBhbmQgbWFueSBwb2xpdGljaWFucyBhcyB3ZWxsLCB3aG8gaGF2ZSBiZWVuIHRyaWVkIGluIHRoaXMKICAgICAgICAgICAgICAgICAgICBjb3VydCwgYW5kIHRob3VnaCBzb21lIG9mIHRoZW0gaGF2ZSBzdWZmZXJlZCBkZWF0aCBmb3IgdGhlaXIgY3JpbWVzLCBhbmQgb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBzbGlwcGVkIGF3YXkgaW50byBleGlsZSwgeW91IG5ldmVyIG9uY2UgYXBwZWFyZWQgYXMgcHJvc2VjdXRvciBvZiBhbnkgb2YKICAgICAgICAgICAgICAgICAgICB0aGVtIG9yIGV4cHJlc3NlZCBhbnkgaW5kaWduYXRpb24gYXQgdGhlIHdyb25ncyBvZiB0aGUgY2l0eSwgYm9sZCBhbmQgY2xldmVyCiAgICAgICAgICAgICAgICAgICAgc3BlYWtlciB0aG91Z2ggeW91IGFyZSwgYnV0IG1hZGUgeW91ciBmaXJzdCBleGhpYml0aW9uIG9mIGFueGlldHkgZm9yIG91cgogICAgICAgICAgICAgICAgICAgIHdlbGZhcmUgb24gYW4gb2NjYXNpb24gdGhhdCBjYWxsZWQgZm9yIGhhcnNoIHRyZWF0bWVudCBvZiBhIGdyZWF0IG1hbnkgcGVvcGxlPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5EbyB5b3Ugd2lzaCBtZSB0byB0ZWxsIHlvdSB0aGUgcmVhc29uLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4/IFtIZSBoYXMgaGlzCiAgICAgICAgICAgICAgICAgICAgc2hhcmUgaW4gdGhlIHByb2NlZWRzIG9mIGNlcnRhaW4gaW5pcXVpdGllcywgYW5kIGhlIGFsc28gZ2V0cyBoaXMgcGlja2luZ3MgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBjb2xsZWN0aW9uIG9mIHJldmVudWUuIEluIGhpcyBpbnNhdGlhYmxlIGdyZWVkIGhlIHJlYXBzIGEgZG91YmxlIGhhcnZlc3QKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBTdGF0ZS4gTm93IGl0IGlzIG5vdCBhbiBlYXNpZXIgbWF0dGVyIHRvIG1ha2UgZW5lbWllcyBvZiBhIG11bHRpdHVkZSBvZgogICAgICAgICAgICAgICAgICAgIHBldHR5IG9mZmVuZGVycyB0aGFuIG9mIGEgZmV3IGJpZyBvZmZlbmRlcnM7IG5laXRoZXIgb2YgY291cnNlIGlzIGl0IGEgbW9yZQogICAgICAgICAgICAgICAgICAgIHBvcHVsYXIgdGhpbmcgdG8gaGF2ZSBhbiBleWUgZm9yIHRoZSBzaW5zIG9mIHRoZSBtYW55IHRoYW4gZm9yIHRoZSBzaW5zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGZldy4gSG93ZXZlciwgdGhlIHJlYXNvbiBpcyB3aGF0IEkgYW0gdGVsbGluZyB5b3UuXSBIZSBrbm93cyBpbmRlZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGlzIG9uZSBvZiB0aGVtLCBvbmUgb2YgdGhlIGNyaW1pbmFscywgYnV0IGhlIHRob3VnaHQgeW91IGJlbmVhdGggaGlzCiAgICAgICAgICAgICAgICAgICAgbm90aWNlOyBhbmQgdGhhdCB3YXMgd2h5IGhlIHRyZWF0ZWQgeW91IGluIHRoaXMgd2F5LiA8L3RyYW5zbGF0aW9uPg=="
translation['22.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5JZiB5b3UgaGFkIGNvbmZlc3NlZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCB5b3UgYXJlIGEgbmF0aW9uIG9mIHNsYXZlcyBhbmQgbm90IG9mIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBjbGFpbSBlbXBpcmUgb3ZlciBvdGhlcnMsIHlvdSB3b3VsZCBuZXZlciBoYXZlIHB1dCB1cCB3aXRoIHRoZSBpbnN1bHRzIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgcmVwZWF0ZWRseSBvZmZlcmVkIHlvdSBpbiB0aGUgbWFya2V0cGxhY2UsIGJpbmRpbmcgYW5kIGFycmVzdGluZyBhbGllbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMgYWxpa2UsIGJhd2xpbmcgZnJvbSB0aGUgcGxhdGZvcm0gaW4gdGhlIEFzc2VtYmx5LCBjYWxsaW5nIG1lbiBzbGF2ZXMKICAgICAgICAgICAgICAgICAgICBhbmQgc2xhdmUtYm9ybiB3aG8gd2VyZSBiZXR0ZXIgbWVuIHRoYW4gaGltc2VsZiBhbmQgb2YgYmV0dGVyIGJpcnRoLCBhbmQgYXNraW5nCiAgICAgICAgICAgICAgICAgICAgaWYgdGhlIGphaWwgd2FzIGJ1aWx0IGZvciBubyBvYmplY3QuIEkgc2hvdWxkIGNlcnRhaW5seSBzYXkgaXQgd2FzLCBpZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGRhbmNlZCBoaXMgd2F5IG91dCBvZiBpdCwgZmV0dGVycyBhbmQgYWxsLCBhdCB0aGUgcHJvY2Vzc2lvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBEaW9ueXNpYS4gQWxsIGhpcyBvdGhlciBvdXRyYWdlcyBpdCB3b3VsZCBiZSBpbXBvc3NpYmxlIHRvIHJlbGF0ZTsgdGhleSBhcmUgdG9vCiAgICAgICAgICAgICAgICAgICAgbnVtZXJvdXMuIEZvciBhbGwgb2YgdGhlbSB0YWtlbiB0b2dldGhlciB5b3UgbXVzdCBleGFjdCB2ZW5nZWFuY2UgdG9kYXksIGFuZAogICAgICAgICAgICAgICAgICAgIG1ha2UgYW4gZXhhbXBsZSBvZiBoaW0gdG8gdGVhY2ggdGhlIHJlc3QgdG8gYmVoYXZlIHdpdGggbW9yZSByZXN0cmFpbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WWVzLCBpdCBtYXkKICAgICAgICAgICAgICAgICAgICBiZSBzYWlkLCB0aGlzIGlzIHRoZSBzb3J0IG9mIG1hbiBoZSB3YXMgaW4gaGlzIHB1YmxpYyBjb25kdWN0LCBidXQgdGhlcmUgYXJlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgdGhpbmdzIHdoaWNoIGhlIGhhcyBtYW5hZ2VkIHdpdGggY3JlZGl0LiBPbiB0aGUgY29udHJhcnksIGluIGV2ZXJ5IHJlc3BlY3QKICAgICAgICAgICAgICAgICAgICBoaXMgYmVoYXZpb3IgdG93YXJkcyBoaXMgZmVsbG93LWNpdGl6ZW5zIGhhcyBiZWVuIHN1Y2ggdGhhdCB0aGUgc3RvcnkgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBoZWFyZCBpcyB0aGUgbGVhc3Qgb2YgdGhlIHJlYXNvbnMgeW91IGhhdmUgZm9yIGhhdGluZyBoaW0uIFdoYXQgZG8geW91IHdpc2ggbWUKICAgICAgICAgICAgICAgICAgICB0byBtZW50aW9uPyBIb3cgaGUg4oCccmVwYWlyZWTigJ0gdGhlIHByb2Nlc3Npb25hbCBvcm5hbWVudHM/CiAgICAgICAgICAgICAgICAgICAgSG93IGhlIGJyb2tlIHVwIHRoZSBjcm93bnM/IEhpcyBzdWNjZXNzIGFzIGEgbWFudWZhY3R1cmVyIG9mIHNhdWNlcnM/IFdoeSwgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgcGVyZm9ybWFuY2VzIGFsb25lLCB0aG91Z2ggaGUgaGFkIGNvbW1pdHRlZCBubyBvdGhlciBmcmF1ZCBvbiB0aGUgY2l0eSwgaXQKICAgICAgICAgICAgICAgICAgICBzZWVtcyB0byBtZSBoZSBkZXNlcnZlcyBub3Qgb25lIGJ1dCB0aHJlZSBzZW50ZW5jZXMgb2YgZGVhdGg7IGZvciBoZSBpcyBndWlsdHkKICAgICAgICAgICAgICAgICAgICBvZiBzYWNyaWxlZ2UsIG9mIGltcGlldHksIG9mIGVtYmV6emxlbWVudCwgb2YgZXZlcnkgbW9uc3Ryb3VzIGNyaW1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZ3JlYXRlciBwYXJ0IG9mIHRoZSBzcGVlY2ggYnkgd2hpY2ggaGUgdGhyZXcgZHVzdAogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgZXllcyBJIHdpbGwgbGVhdmUgdW5ub3RpY2VkOyBidXQsIGJ5IGFsbGVnaW5nIHRoYXQgdGhlIGxlYXZlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBjcm93bnMgd2VyZSByb3R0ZW4gd2l0aCBhZ2UgYW5kIGZhbGxpbmcgb2ZmLOKAlGFzIHRob3VnaCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICB2aW9sZXQtbGVhdmVzIG9yIHJvc2UtbGVhdmVzLCBub3QgbGVhdmVzIG1hZGUgb2YgZ29sZOKAlGhlIHBlcnN1YWRlZCB5b3UKICAgICAgICAgICAgICAgICAgICB0byBtZWx0IHRoZW0gZG93bi4gQW5kIHRoZW4sIGluIHByb3ZpZGluZyBmb3IgdGhlIGNvbGxlY3Rpb24gb2YgdGF4ZXMsIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHB1dCBpbiBhIGNsYXVzZSB0aGF0IHRoZSBwdWJsaWMgYWNjb3VudGFudCBzaG91bGQgYXR0ZW5kLiBUaGF0IHdhcyB2ZXJ5IGhvbmVzdAogICAgICAgICAgICAgICAgICAgIG9mIGhpbTsgb25seSBldmVyeSB0YXhwYXllciB3YXMgY2VydGFpbiB0byBjaGVjayB0aGUgYWNjb3VudHMuIEJ1dCBpbiBkZWFsaW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgY3Jvd25zIHRoYXQgaGUgd2FzIHRvIGJyZWFrIHVwLCBoZSBsZWZ0IG91dCB0aGF0IHZlcnkgcHJvcGVyCiAgICAgICAgICAgICAgICAgICAgcmVndWxhdGlvbjsgb25lIGFuZCB0aGUgc2FtZSBtYW4gd2FzIG9yYXRvciwgZ29sZHNtaXRoLCBidXNpbmVzcyBtYW5hZ2VyLCBhbmQKICAgICAgICAgICAgICAgICAgICBhdWRpdG9yIG9mIGFjY291bnRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['22.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaWYgeW91LCBzaXIsIGhhZAogICAgICAgICAgICAgICAgICAgIGNsYWltZWQgb3VyIGVudGlyZSBjb25maWRlbmNlIGluIGFsbCB5b3VyIHB1YmxpYyBidXNpbmVzcywgeW91ciBkaXNob25lc3R5IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGhhdmUgYmVlbiBlcXVhbGx5IG1hbmlmZXN0OyBidXQsIHNlZWluZyB0aGF0IGluIHRoZSBtYXR0ZXIgb2YgdGhlIHRheGVzIHlvdQogICAgICAgICAgICAgICAgICAgIGxhaWQgZG93biB0aGUganVzdCBwcmluY2lwbGUgdGhhdCB0aGUgY2l0eSBtdXN0IHRydXN0LCBub3QgeW91LCBidXQgaGVyIG93bgogICAgICAgICAgICAgICAgICAgIHNlcnZhbnRzLCBhbmQgdGhlbiwgd2hlbiB5b3UgdG9vayB1cCBhbm90aGVyIGpvYiBhbmQgd2VyZSB0YW1wZXJpbmcgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBjb25zZWNyYXRlZCBwbGF0ZSwgc29tZSBvZiBpdCBkZWRpY2F0ZWQgYmVmb3JlIHdlIHdlcmUgYm9ybiwgeW91IGZvcmdvdCB0bwogICAgICAgICAgICAgICAgICAgIHByb3ZpZGUgdGhlIHByZWNhdXRpb24gdGhhdCB3YXMgdGFrZW4gYXQgeW91ciBvd24gaW5zdGFuY2UgaW4gcmVzcGVjdCBvZiB0aGUgdGF4CiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbiwgaXMgaXQgbm90IHBlcmZlY3RseSBjbGVhciB3aGF0IHlvdSB3ZXJlIGFpbWluZyBhdD8gT2YgY291cnNlIGl0IGlzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgY29uc2lkZXIgdGhvc2UgZ2xvcmlvdXMgYW5kCiAgICAgICAgICAgICAgICAgICAgZW52aWFibGUgaW5zY3JpcHRpb25zIHRoYXQgaGUgaGFzIG9ibGl0ZXJhdGVkIGZvciBhbGwgdGltZSwgYW5kIHRoZSBzdHJhbmdlIGFuZAogICAgICAgICAgICAgICAgICAgIGJsYXNwaGVtb3VzIGluc2NyaXB0aW9ucyB0aGF0IGhlIGhhcyB3cml0dGVuIGluIHRoZWlyIHN0ZWFkLiBZb3UgYWxsLCBJIHN1cHBvc2UsCiAgICAgICAgICAgICAgICAgICAgdXNlZCB0byBzZWUgdGhlIHdvcmRzIHdyaXR0ZW4gdW5kZXIgdGhlIGNpcmNsZXRzIG9mIHRoZSBjcm93bnM6IOKAnFRoZQogICAgICAgICAgICAgICAgICAgIEFsbGllcyB0byB0aGUgQXRoZW5pYW4gUGVvcGxlIGZvciB2YWxvciBhbmQgcmlnaHRlb3VzbmVzcyzigJ0gb3IKICAgICAgICAgICAgICAgICAgICDigJxUaGUgQWxsaWVzIHRvIHRoZSBHb2RkZXNzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYSBwcml6ZSBvZiB2aWN0b3J54oCdOyBvciwgZnJvbSB0aGUgc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgIHN0YXRlcyBvZiB0aGUgYWxsaWFuY2UsIOKAnFN1Y2gtYW5kLXN1Y2ggYSBDaXR5IHRvIHRoZSBQZW9wbGUgYnkgd2hvbQogICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBkZWxpdmVyZWQs4oCdIG9yLCDigJxUaGUgbGliZXJhdGVkCiAgICAgICAgICAgICAgICAgICAgRXVib2VhbnMs4oCdIGZvciBleGFtcGxlLCDigJxjcm93biB0aGUgUGVvcGxl4oCdOyBvcgogICAgICAgICAgICAgICAgICAgIGFnYWluLCDigJw8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBzZWEtZmlnaHQgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMu4oCdIFN1Y2gsIEkgc2F5LCB3ZXJlIHRoZSBpbnNjcmlwdGlvbnMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgY3Jvd25zLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['22.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHdlcmUgdG9rZW5zIG9mIGVtdWxhdGlvbgogICAgICAgICAgICAgICAgICAgIGFuZCBob25vcmFibGUgYW1iaXRpb247IGJ1dCBub3cgdGhleSBoYXZlIHZhbmlzaGVkIHdpdGggdGhlIGRlc3RydWN0aW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNyb3ducywgYW5kIHRoZSBzYXVjZXJzIHdoaWNoIHRoYXQgbGV3ZCBmZWxsb3cgaGFzIGhhZCBtYWRlIGluIHRoZWlyIHBsYWNlIGJlYXIKICAgICAgICAgICAgICAgICAgICB0aGUgaW5zY3JpcHRpb24sIOKAnE1hZGUgYnkgZGlyZWN0aW9uIG9mIEFuZHJvdGlvbi7igJ0gQW5kIHNvCiAgICAgICAgICAgICAgICAgICAgdGhlIG5hbWUgb2YgYSBtYW4gd2hvbSB0aGUgbGF3cyBmb3JiaWQgdG8gZW50ZXIgb3VyIHRlbXBsZXMgaW4gcGVyc29uIGJlY2F1c2Ugb2YKICAgICAgICAgICAgICAgICAgICBoaXMgcHJvc3RpdHV0aW9uLCBoYXMgYmVlbiBpbnNjcmliZWQgb24gdGhlIGN1cHMgaW4gdGhvc2UgdGVtcGxlcy4gSnVzdCBsaWtlIHRoZQogICAgICAgICAgICAgICAgICAgIG9sZCBpbnNjcmlwdGlvbnMsIGlzIGl0IG5vdD8gYW5kIGFuIGVxdWFsIGluY2VudGl2ZSB0byBhbWJpdGlvbj8gPC90cmFuc2xhdGlvbj4="
translation['22.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5bWW91IG1heSwgdGhlbiwgbWFyayB0aHJlZSBzY2FuZGFsb3VzIGNyaW1lcwogICAgICAgICAgICAgICAgICAgIGNvbW1pdHRlZCBieSB0aGVzZSBwZXJzb25zLiBUaGV5IGhhdmUgcm9iYmVkIHRoZSBHb2RkZXNzIG9mIGhlciBjcm93bnMuIFRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIGV4dGluZ3Vpc2hlZCBpbiB0aGUgY2l0eSB0aGF0IHNwaXJpdCBvZiBlbXVsYXRpb24gdGhhdCBzcHJhbmcgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHMgd2hpY2ggdGhlIGNyb3ducywgd2hpbGUgaW4gYmVpbmcsIGNvbW1lbW9yYXRlZC4gVGhleSBoYXZlIGRlcHJpdmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGRvbm9ycyBvZiBhIGdyZWF0IGhvbm9yLOKAlHRoZSBjcmVkaXQgb2YgZ3JhdGl0dWRlIGZvciBiZW5lZml0cwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkLiBBZnRlciB0aGlzIGxvbmcgc2VyaWVzIG9mIGV2aWwgZGVlZHMgdGhleSBoYXZlIGdyb3duIHNvIGNhbGxvdXMgYW5kIHNvCiAgICAgICAgICAgICAgICAgICAgYXVkYWNpb3VzIHRoYXQgdGhleSByZWNhbGwgdGhvc2UgY3JpbWVzIGFzIGFkbWlyYWJsZSBleGFtcGxlcyBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGFkbWluaXN0cmF0aW9uLCBzbyB0aGF0IG9uZSBvZiB0aGVtIGV4cGVjdHMgeW91IHRvIGFjcXVpdCBoaW0gZm9yIHRoZSBzYWtlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyLCBhbmQgdGhlIG90aGVyIHNpdHMgYnkgaGlzIHNpZGUgYW5kIGRvZXMgbm90IHNpbmsgaW50byB0aGUgZ3JvdW5kIGZvcgogICAgICAgICAgICAgICAgICAgIHNoYW1lIGF0IGhpcyBjb25kdWN0Ll0gPC90cmFuc2xhdGlvbj4="
translation['22.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Qgb25seSBpcyBoZQogICAgICAgICAgICAgICAgICAgIGxvc3QgdG8gc2hhbWUgd2hlbiBtb25leSBpcyBpbiBxdWVzdGlvbiwgYnV0IGhlIGlzIHNvIGR1bGwtd2l0dGVkIHRoYXQgaGUgY2Fubm90CiAgICAgICAgICAgICAgICAgICAgc2VlIHRoYXQgY3Jvd25zIGFyZSBhIHN5bWJvbCBvZiBtZXJpdCwgYnV0IHNhdWNlcnMgYW5kIHRoZSBsaWtlIG9ubHkgb2Ygd2VhbHRoOwogICAgICAgICAgICAgICAgICAgIHRoYXQgZXZlcnkgY3Jvd24sIGhvdyBldmVyIHNtYWxsLCBpbXBsaWVzIHRoZSBzYW1lIHJlZ2FyZCBmb3IgaG9ub3IgYXMgaWYgaXQKICAgICAgICAgICAgICAgICAgICB3ZXJlIGxhcmdlLiB0aGF0IGRyaW5raW5nLWN1cHMgYW5kIGNlbnNlcnMsIGlmIHZlcnkgbnVtZXJvdXMsIGF0dGFjaCB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIG93bmVycyBhIHNvcnQgb2YgcmVwdXRhdGlvbiBmb3Igd2VhbHRoLCBidXQgdGhhdCwgaWYgYSBtYW4gdGFrZXMgcHJpZGUgaW4KICAgICAgICAgICAgICAgICAgICB0cmlmbGVzLCBpbnN0ZWFkIG9mIHdpbm5pbmcgc29tZSBob25vciBieSB0aGVtLCBoZSBpcyBkaXNkYWluZWQgYXMgYSBtYW4gb2YKICAgICAgICAgICAgICAgICAgICB2dWxnYXIgdGFzdGVzLiBUaGlzIG1hbiwgdGhlbiwgaGFzIGRlc3Ryb3llZCB0aGUgcG9zc2Vzc2lvbnMgb2YgaG9ub3IsIGFuZCBtYWRlCiAgICAgICAgICAgICAgICAgICAgdGhlIHBvc3Nlc3Npb25zIG9mIHdlYWx0aCBtZWFuIGFuZCB1bndvcnRoeSBvZiB5b3VyIGRpZ25pdHkuIDwvdHJhbnNsYXRpb24+"
translation['22.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBpcyBhbm90aGVyIHRoaW5nIHRoYXQgaGUgZGlkIG5vdCB1bmRlcnN0YW5kLCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFuIGRlbW9jcmFjeSwgbmV2ZXIgZWFnZXIgdG8gYWNxdWlyZSByaWNoZXMsIGNvdmV0ZWQgZ2xvcnkgbW9yZSB0aGFuIGFueQogICAgICAgICAgICAgICAgICAgIG90aGVyIHBvc3Nlc3Npb24gaW4gdGhlIHdvcmxkLiBIZXJlIGlzIHRoZSBwcm9vZjogb25jZSB0aGV5IHBvc3Nlc3NlZCBncmVhdGVyCiAgICAgICAgICAgICAgICAgICAgd2VhbHRoIHRoYW4gYW55IG90aGVyIEhlbGxlbmljIHBlb3BsZSwgYnV0IHRoZXkgc3BlbnQgaXQgYWxsIGZvciBsb3ZlIG9mIGhvbm9yOwogICAgICAgICAgICAgICAgICAgIHRoZXkgbGFpZCB0aGVpciBwcml2YXRlIGZvcnR1bmVzIHVuZGVyIGNvbnRyaWJ1dGlvbiwgYW5kIHJlY29pbGVkIGZyb20gbm8gcGVyaWwKICAgICAgICAgICAgICAgICAgICBmb3IgZ2xvcnkncyBzYWtlLiBIZW5jZSB0aGUgUGVvcGxlIGluaGVyaXRzIHBvc3Nlc3Npb25zIHRoYXQgd2lsbCBuZXZlciBkaWU7IG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIG9uZSBoYW5kIHRoZSBtZW1vcnkgb2YgdGhlaXIgYWNoaWV2ZW1lbnRzLCBvbiB0aGUgb3RoZXIsIHRoZSBiZWF1dHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWVtb3JpYWxzIHNldCB1cCBpbiB0aGVpciBob25vciwgeW9uZGVyIFByb3B5bGFlYSwgdGhlIFBhcnRoZW5vbiwgdGhlIHBvcnRpY29lcywKICAgICAgICAgICAgICAgICAgICB0aGUgZG9ja3Ms4oCUbm90IGEgY291cGxlIG9mIGp1Z3MsIG9yIHRocmVlIG9yIGZvdXIgYml0cyBvZiBnb2xkIHBsYXRlLAogICAgICAgICAgICAgICAgICAgIHdlaWdoaW5nIGEgcG91bmQgYXBpZWNlLCB3aGljaCB5b3UsIEFuZHJvdGlvbiwgd2lsbCBwcm9wb3NlIHRvIG1lbHQgZG93biBhZ2FpbiwKICAgICAgICAgICAgICAgICAgICB3aGVuZXZlciB0aGUgd2hpbSB0YWtlcyB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['22.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5UbyBkZWRpY2F0ZSB0aG9zZQogICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5ncyB0aGV5IGRpZCBub3QgdGl0aGUgdGhlbXNlbHZlcywgbm9yIGZ1bGZpbCB0aGUgaW1wcmVjYXRpb25zIG9mIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZW5lbWllcyBieSBkb3VibGluZyB0aGUgaW5jb21lLXRheCwgbm9yIHdhcyB0aGVpciBwb2xpY3kgZXZlciBndWlkZWQgYnkgc3VjaAogICAgICAgICAgICAgICAgICAgIGFkdmlzZXJzIGFzIHlvdS4gTm87IHRoZXkgY29ucXVlcmVkIHRoZWlyIGVuZW1pZXMsIHRoZXkgZnVsZmlsbGVkIHRoZSBwcmF5ZXJzIG9mCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgc291bmQtaGVhcnRlZCBtYW4gYnkgZXN0YWJsaXNoaW5nIGNvbmNvcmQgdGhyb3VnaG91dCB0aGUgY2l0eTsgYW5kIHNvIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlcXVlYXRoZWQgdG8gdXMgdGhlaXIgaW1wZXJpc2hhYmxlIGdsb3J5LCBhbmQgZXhjbHVkZWQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJrZXQtcGxhY2UgbWVuIHdob3NlIGhhYml0cyBvZiBsaWZlIHdlcmUgd2hhdCB5b3VycyBoYXZlIGFsd2F5cyBiZWVuLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.78'] = ""
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5NZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIGJlZyB0aGF0IG5vbmUgb2YgeW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBpbWFnaW5lIHRoYXQgSSBoYXZlIGNvbWUgaGVyZSB0byBhcnJhaWduIHRoZSBkZWZlbmRhbnQgQXJpc3RvY3JhdGVzIGZyb20KICAgICAgICAgICAgICAgICAgICBhbnkgbW90aXZlIG9mIHByaXZhdGUgbWFsaWNlLCBvciB0aGF0IEkgYW0gdGhydXN0aW5nIG15c2VsZiBzbyBlYWdlcmx5IGludG8gYQogICAgICAgICAgICAgICAgICAgIHF1YXJyZWwgYmVjYXVzZSBJIGhhdmUgZGV0ZWN0ZWQgc29tZSBzbWFsbCBhbmQgdHJpdmlhbCBibHVuZGVyLCBidXQgaWYgbXkKICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQgYW5kIG15IHZpZXdzIGFyZSBhdCBhbGwgcmlnaHQsIHRoZSBwdXJwb3NlIG9mIGFsbCBteSBleGVydGlvbnMgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGNhc2UgaXMgdGhhdCB5b3UgbWF5IGhvbGQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3Mjg1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcyODUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4gc2VjdXJlbHksIGFuZCBtYXkgbm90IGZvciB0aGUgc2Vjb25kIHRpbWUgYmUgY2hlYXRlZAogICAgICAgICAgICAgICAgICAgIG91dCBvZiB0aGUgcG9zc2Vzc2lvbiBvZiB0aGF0IGNvdW50cnkuIDwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPklmLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIGl0IGlzIHlvdXIgZGVzaXJlIHRvIGxlYXJuIHRoZSB0cnV0aCBhYm91dCB0aGlzIGJ1c2luZXNzLCBhbmQgdG8gZ2l2ZSBhCiAgICAgICAgICAgICAgICAgICAgcmlnaHRlb3VzIGFuZCBsZWdpdGltYXRlIHZlcmRpY3Qgb24gdGhlIGluZGljdG1lbnQsIHlvdSBtdXN0IG5vdCBjb25maW5lIHlvdXIKICAgICAgICAgICAgICAgICAgICBhdHRlbnRpb24gdG8gdGhlIG1lcmUgcGhyYXNpbmcgb2YgdGhlIGRlY3JlZSwgYnV0IGFsc28gdGFrZSBpbnRvIGNvbnNpZGVyYXRpb24KICAgICAgICAgICAgICAgICAgICBpdHMgcHJvYmFibGUgY29uc2VxdWVuY2VzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5IYWQgaXQgYmVlbiBwb3NzaWJsZQogICAgICAgICAgICAgICAgICAgIGZvciB5b3UsIGF0IGEgZmlyc3QgaGVhcmluZywgdG8gZGlzY292ZXIgdGhlIHRyaWNrIHRoYXQgaGFkIGJlZW4gcGxheWVkLCB5b3UKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3QsIHBlcmhhcHMsIGhhdmUgYmVlbiBkZWNlaXZlZCBhdCB0aGUgb3V0c2V0OyA8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCwgaW5hc211Y2ggYXMgb25lIG9mIG91ciBncmlldmFuY2VzIGlzIHRoYXQgY2VydGFpbgogICAgICAgICAgICAgICAgICAgIHBlcnNvbnMgbWFrZSBzcGVlY2hlcyBhbmQgbW92ZSByZXNvbHV0aW9ucyBkZXNpZ25lZCB0byBhdmVydCB5b3VyIHN1c3BpY2lvbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgcHV0IHlvdSBvZmYgeW91ciBndWFyZCwgeW91IG11c3Qgbm90IGJlIGdyZWF0bHkgYXN0b25pc2hlZCBpZiB3ZSBjb252aW5jZSB5b3UKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgZGVjcmVlIGFsc28gaXMgc28gd29yZGVkIHRoYXQsIHdoaWxlIGFwcGFyZW50bHkgb2ZmZXJpbmcgc29tZSBwZXJzb25hbAogICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gdG8gQ2hhcmlkZW11cywgaXQgcmVhbGx5IHJvYnMgb3VyIGNpdHkgb2YgYW4gaG9uZXN0IGFuZCBlZmZlY3RpdmUKICAgICAgICAgICAgICAgICAgICBzYWZlZ3VhcmQgZm9yIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDM0NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwMzQ1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3Ugd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIHdlbGwgYWR2aXNlZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdG8KICAgICAgICAgICAgICAgICAgICBncmFudCBtZSB5b3VyIGF0dGVudGlvbiwgYW5kIGdpdmUgYSBmYXZvcmFibGUgaGVhcmluZyB0byB3aGF0IEkgaGF2ZSB0byBzYXkuIEkKICAgICAgICAgICAgICAgICAgICBhbSBub3Qgb25lIG9mIHRoZSBvcmF0b3JzIHdobyB3b3JyeSB5b3U7IEkgYW0gbm90IG9uZSBvZiB0aGUgcG9saXRpY2lhbnMgd2hvCiAgICAgICAgICAgICAgICAgICAgZW5qb3kgeW91ciBjb25maWRlbmNlOyB5ZXQgSSB1bmRlcnRha2UgdG8gY29udmluY2UgeW91IG9mIHRoZSBpbXBvcnRhbmNlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjsgYW5kIHRoZXJlZm9yZSwgaWYgeW91IHdpbGwgY29vcGVyYXRlIHdpdGggbWUgdG8gdGhlIGJlc3Qgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIHBvd2VyIGFuZCBsaXN0ZW4gdG8gbWUgd2l0aCBnb29kd2lsbCwgeW91IHdpbGwgYXZlcnQgdGhpcyBwZXJpbCwgYW5kIGF0IHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgdGltZSB5b3Ugd2lsbCBvdmVyY29tZSB0aGUgcmVsdWN0YW5jZSBvZiBhbnkgb2YgdXMgcGxhaW4gY2l0aXplbnMgd2hvIG1heQogICAgICAgICAgICAgICAgICAgIGJlbGlldmUgaGltc2VsZiBhYmxlIHRvIGRvIHRoZSBTdGF0ZSBhIGdvb2QgdHVybi4gQW5kIGhlIHdpbGwgc28gYmVsaWV2ZSwgaWYKICAgICAgICAgICAgICAgICAgICBvbmx5IGhlIGlzIHNhdGlzZmllZCB0aGF0IGl0IGlzIG5vdCBkaWZmaWN1bHQgdG8gZ2V0IGEgaGVhcmluZyBpbiB0aGlzIGNvdXJ0OwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRob3VnaCBhdCBwcmVzZW50IG1hbnkgb2YKICAgICAgICAgICAgICAgICAgICB1cyzigJRpbmV4cGVydCBzcGVha2VycywgcGVyaGFwcywgYW5kIHlldCBiZXR0ZXIgbWVuIHRoYW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZXhwZXJ0c+KAlHNvIGRyZWFkIHRoaXMgb3JkZWFsIHRoYXQgdGhleSBuZXZlciB0aGluayBldmVuIG9mIGV4YW1pbmluZwogICAgICAgICAgICAgICAgICAgIGFueSBwdWJsaWMgcXVlc3Rpb24uIFlvdSBtYXkgYmUgc3VyZSB0aGF0IEkgZm9yIG9uZSwgYXMgSGVhdmVuIGlzIG15IHdpdG5lc3MsCiAgICAgICAgICAgICAgICAgICAgd291bGQgbmV2ZXIgaGF2ZSBkYXJlZCB0byBsYXkgdGhpcyBpbmRpY3RtZW50LCBpZiBJIGhhZCBub3QgdGhvdWdodCBpdCBlbnRpcmVseQogICAgICAgICAgICAgICAgICAgIGRpc2hvbm9yYWJsZSB0aGF0IGF0IHRoaXMgdGltZSwgd2hlbiBJIHNlZSBwZW9wbGUgZW5nYWdlZCBpbiBhIHByb2plY3QgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGlzYWR2YW50YWdlIG9mIG91ciBjb21tb253ZWFsdGgsIEkgc2hvdWxkIGhvbGQgbXkgcGVhY2UsIGFuZCBjbG9zZSBteQogICAgICAgICAgICAgICAgICAgIGxpcHMs4oCUSSB3aG8sIG9uIGEgZm9ybWVyIG9jY2FzaW9uLCB3aGVuIEkgc2FpbGVkIGZvciB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MzgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYzOCI+SGVsbGVzcG9udDwvcGxhY2VOYW1lPiBpbiBjb21tYW5kIG9mIGEgd2FyLWdhbGxleSwgc3Bva2UKICAgICAgICAgICAgICAgICAgICBvdXQgYW5kIGRlbm91bmNlZCBjZXJ0YWluIG1lbiB3aG8sIGluIG15IGp1ZGdlbWVudCwgd2VyZSBkb2luZyB5b3Ugd3JvbmcuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGFtIG5vdAogICAgICAgICAgICAgICAgICAgIGlnbm9yYW50IHRoYXQgQ2hhcmlkZW11cyBpcyByZWdhcmRlZCBieSBzb21lIGFzIGEgYmVuZWZhY3RvciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIEJ1dCBpZiBJIGNhbiBmaW5kIGFiaWxpdHkgdG8gdGVsbAogICAgICAgICAgICAgICAgICAgIHlvdSB3aGF0IEkgbWVhbiwgYW5kIHdoYXQgSSBrbm93IGhpbSB0byBoYXZlIGRvbmUsIEkgaG9wZSB0byBwcm92ZSB0aGF0LCBzbyBmYXIKICAgICAgICAgICAgICAgICAgICBmcm9tIGJlaW5nIG91ciBiZW5lZmFjdG9yLCBoZSBpcyBwYXJ0aWN1bGFybHkgaWxsLWRpc3Bvc2VkIHRvIHVzLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIGV4YWN0bHkgdGhlIHdyb25nIGNvbmNlcHRpb24gaGFzIGJlZW4gZm9ybWVkIG9mIGhpcyBjaGFyYWN0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['23.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPklmLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUgbW9zdCBzZXJpb3VzIG9mZmVuY2UgY29tbWl0dGVkIGJ5IEFyaXN0b2NyYXRlcyBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHRoYXQgaW4gaGlzIGRlY3JlZSBoZSB3YXMgc28gc29saWNpdG91cyBmb3IgdGhlIHNhZmV0eSBvZiBzdWNoIGEgbWFuIGFzIEkKICAgICAgICAgICAgICAgICAgICB1bmRlcnRha2UgdG8gcHJvdmUgQ2hhcmlkZW11cyB0byBiZSB0aGF0IGhlIHByb3ZpZGVkIGEgc3BlY2lhbCBhbmQgaWxsZWdhbAogICAgICAgICAgICAgICAgICAgIHBlbmFsdHksIGluIGNhc2UgYW55dGhpbmcgaGFwcGVuZWQgdG8gaGltLCBJIHNob3VsZCBoYXZlIHRyaWVkIHRvIGRlYWwgd2l0aCB0aGF0CiAgICAgICAgICAgICAgICAgICAgcG9pbnQgYXQgb25jZSwgZm9yIHRoZSBwdXJwb3NlIG9mIHByb3ZpbmcgdGhhdCB0aGUgbWFuIGlzIHZlcnkgZmFyIGZyb20KICAgICAgICAgICAgICAgICAgICBkZXNlcnZpbmcgdGhlIGZhdm91ciBvZiB0aGlzIGRlY3JlZS4gVGhlcmUgaXMsIGhvd2V2ZXIsIGEgbXVjaCBncmF2ZXIgaW5pcXVpdHkKICAgICAgICAgICAgICAgICAgICBpbnZvbHZlZCBpbiB0aGUgZGVjcmVlLCBvZiB3aGljaCB5b3UgbXVzdCBmaXJzdCBiZSBpbmZvcm1lZCwgYW5kIGFnYWluc3Qgd2hpY2gKICAgICAgICAgICAgICAgICAgICB5b3UgbXVzdCB0YWtlIHByZWNhdXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['23.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBpcyBlc3NlbnRpYWwgdGhhdCBhdCB0aGUgb3V0c2V0IEkgc2hvdWxkIGV4cGxhaW4gdG8geW91IHRoZQogICAgICAgICAgICAgICAgICAgIGNpcmN1bXN0YW5jZXMgdG8gd2hpY2ggeW91IG93ZSB0aGUgc2VjdXJlIHBvc3Nlc3Npb24gb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwMzQ1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTAzNDUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4sIGZvciBpbiB0aGUgbGlnaHQgb2YgdGhhdCBrbm93bGVkZ2UKICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCBnZXQgYSBjbGVhciBwZXJjZXB0aW9uIG9mIHRoZSB3cm9uZyB0aGF0IGhhcyBiZWVuIGNvbW1pdHRlZC4gVGhlCiAgICAgICAgICAgICAgICAgICAgY2lyY3Vtc3RhbmNlcywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYXJlCiAgICAgICAgICAgICAgICAgICAgdGhlc2UuIE9uIHRoZSBkZW1pc2Ugb2YgQ290eXMgdGhyZWUgcGVyc29ucyBpbnN0ZWFkIG9mIG9uZSBiZWNhbWUga2luZ3Mgb2YKICAgICAgICAgICAgICAgICAgICBUaHJhY2XigJRCZXJpc2FkZXMsIEFtYWRvY3VzLCBhbmQgQ2Vyc29ibGVwdGVzOyBhbmQgdGhlIG5hdHVyYWwgcmVzdWx0CiAgICAgICAgICAgICAgICAgICAgd2FzIHRoYXQgdGhleSBjb21wZXRlZCB3aXRoIG9uZSBhbm90aGVyIGFuZCB0aGF0IHRoZXkgYWxsIGZsYXR0ZXJlZCB5b3UgYW5kCiAgICAgICAgICAgICAgICAgICAgY291cnRlZCB5b3VyIGZhdm91ci4gPC90cmFuc2xhdGlvbj4="
translation['23.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGNlcnRhaW4gcGVyc29ucyB3aG8gd2FudGVkIHRvIHB1dCBhCiAgICAgICAgICAgICAgICAgICAgc3RvcCB0byB0aGF0IHN0YXRlIG9mIGFmZmFpcnMsIHRvIGdldCByaWQgb2YgdGhlIG90aGVyIGtpbmdzLCBhbmQgdG8gcHV0CiAgICAgICAgICAgICAgICAgICAgQ2Vyc29ibGVwdGVzIGluIHBvc3Nlc3Npb24gb2YgYW4gdW5kaXZpZGVkIG1vbmFyY2h5LCBjb250cml2ZWQgdG8gZXF1aXAKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHdpdGggdGhpcyBwcm92aXNpb25hbCByZXNvbHV0aW9uLiBJZiBvbmUgbGlzdGVuZWQgb25seSB0byB0aGUKICAgICAgICAgICAgICAgICAgICB3b3JkaW5nLCB0aGV5IHdlcmUgZmFyIGZyb20gYXBwZWFyaW5nIHRvIHB1cnN1ZSBhbnkgc3VjaCBwdXJwb3NlOyBhbmQgeWV0IHN1Y2gKICAgICAgICAgICAgICAgICAgICB3YXMgaW4gZmFjdCB0aGVpciBtYWluIG9iamVjdCwgYXMgSSB3aWxsIHByb2NlZWQgdG8gZXhwbGFpbi4gPC90cmFuc2xhdGlvbj4="
translation['23.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgZGVhdGggb2YgQmVyaXNhZGVzLCBvbmUgb2YgdGhlIHRocmVlIGtpbmdzLAogICAgICAgICAgICAgICAgICAgIENlcnNvYmxlcHRlcywgaW4gdmlvbGF0aW9uIG9mIGEgc3dvcm4gdHJlYXR5IGNvbmNsdWRlZCB3aXRoIHlvdSwgYmVnYW4gdG8gbGV2eQogICAgICAgICAgICAgICAgICAgIHdhciB1cG9uIHRoZSBzb25zIG9mIEJlcmlzYWRlcyBhbmQgdXBvbiBBbWFkb2N1czsgYW5kIGl0IHdhcyBhdCBvbmNlIGZvcmVzZWVuCiAgICAgICAgICAgICAgICAgICAgdGhhdCBBdGhlbm9kb3J1cyB3b3VsZCBjb21lIHRvIHRoZSBhaWQgb2YgdGhlIHNvbnMgb2YgQmVyaXNhZGVzLCBhbmQgU2ltb24gYW5kCiAgICAgICAgICAgICAgICAgICAgQmlhbm9yIHRvIHRoYXQgb2YgQW1hZG9jdXMsIHRoZSBmb3JtZXIgYmVpbmcgcmVsYXRlZCBieSBtYXJyaWFnZSB0byBCZXJpc2FkZXMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHR3byBsYXR0ZXIgdG8gQW1hZG9jdXMuIDwvdHJhbnNsYXRpb24+"
translation['23.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseQogICAgICAgICAgICAgICAgICAgIHRoZSBwZXJzb25zIEkgaGF2ZSBtZW50aW9uZWQgYmVnYW4gdG8gY29uc2lkZXIgYnkgd2hhdCBtZWFucyB0aG9zZSBjb21tYW5kZXJzCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgYmUgY29tcGVsbGVkIHRvIHJlbWFpbiBpbmFjdGl2ZSwgc28gdGhhdCwgdGhlIHJpdmFsIHByaW5jZXMgYmVpbmcKICAgICAgICAgICAgICAgICAgICBmcmllbmRsZXNzLCBDaGFyaWRlbXVzLCB3aG8gd2FzIHN0cml2aW5nIHRvIHdpbiB0aGUgbW9uYXJjaHkgZm9yIENlcnNvYmxlcHRlcywKICAgICAgICAgICAgICAgICAgICBtaWdodCBtYWtlIGhpbXNlbGYgbWFzdGVyIG9mIHRoZSBzaXR1YXRpb24uIFRoZSBmaXJzdCBwbGFuIHdhcyB0byBnZXQgYSBkZWNyZWUKICAgICAgICAgICAgICAgICAgICBlbmFjdGVkIGJ5IHlvdSwgbWFraW5nIGFueSBtYW4gd2hvIHNob3VsZCBraWxsIENoYXJpZGVtdXMgbGlhYmxlIHRvIGFycmVzdDsgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlY29uZCB3YXMgdGhhdCBDaGFyaWRlbXVzIHNob3VsZCByZWNlaXZlIGZyb20geW91IGEgZ2VuZXJhbCdzIGNvbW1pc3Npb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbmVpdGhlciBTaW1vbiBub3IgQmlhbm9yLCBib3RoIG9mIHdob20KICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBhZG1pdHRlZCB0byB5b3VyIGNpdGl6ZW5zaGlwLCBhbmQgd2hvIHdlcmUsIGFwYXJ0IGZyb20gdGhhdCwgdGhvcm91Z2hseQogICAgICAgICAgICAgICAgICAgIHdlbGwgYWZmZWN0ZWQgdG93YXJkcyB5b3UsIHdhcyBsaWtlbHkgdG8gdGFrZSB0aGUgZmllbGQgYWdhaW5zdCBhIGdlbmVyYWwgb2YKICAgICAgICAgICAgICAgICAgICB5b3VycyB3aGlsZSBBdGhlbm9kb3J1cywgYW4gQXRoZW5pYW4gY2l0aXplbiBieSBiaXJ0aHJpZ2h0LCB3b3VsZCBuZXZlciBkcmVhbSBvZgogICAgICAgICAgICAgICAgICAgIGRvaW5nIHNvLCBub3Igd291bGQgaGUgaW5jdXIgdGhlIGNyaW1pbmFsIGNoYXJnZSBzZXQgdXAgYnkgdGhlIGRlY3JlZSwgd2hpY2gKICAgICAgICAgICAgICAgICAgICB3b3VsZCBjZXJ0YWlubHkgYmUgYnJvdWdodCBhZ2FpbnN0IHRob3NlIGNvbW1hbmRlcnMsIGlmIGFueXRoaW5nIGhhcHBlbmVkIHRvCiAgICAgICAgICAgICAgICAgICAgQ2hhcmlkZW11cy4gQnkgdGhlc2UgbWVhbnMsIHRoZSBraW5ncyBiZWluZyBkZW51ZGVkIG9mIGFsbGllcywgYW5kIGltcHVuaXR5CiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZSBmb3IgdGhlbXNlbHZlcywgdGhleSBob3BlZCBlYXNpbHkgdG8gZHJpdmUgdGhlbSBvdXQgYW5kIHNlaXplIHRoZQogICAgICAgICAgICAgICAgICAgIG1vbmFyY2h5LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5PZiBzdWNoIGludGVudGlvbnMgYW5kIG9mIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhcnRpZmljZXMgdGhleSBhcmUgYWNjdXNlZCBieSB0aGUgZXZpZGVuY2Ugb2YgZmFjdHM7IGZvciwgYXQgdGhlIG1vbWVudCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBiZWdhbiBob3N0aWxpdGllcywgQXJpc3RvbWFjaHVzIG9mIEFsb3BlY2UgdmlzaXRlZCB5b3UgYXMgdGhlaXIgYW1iYXNzYWRvciwKICAgICAgICAgICAgICAgICAgICBhbmQgaW4gaGlzIG9yYXRpb24gYmVmb3JlIHRoZSBhc3NlbWJseSwgbm90IGNvbnRlbnQgd2l0aCBjb21tZW5kaW5nIENlcnNvYmxlcHRlcwogICAgICAgICAgICAgICAgICAgIGFuZCBDaGFyaWRlbXVzIGFuZCBlbmxhcmdpbmcgb24gdGhlaXIgZ2VuZXJvdXMgc2VudGltZW50cyB0b3dhcmRzIHlvdSwKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5oZSBkZWNsYXJlZCB0aGF0IENoYXJpZGVtdXMgd2FzIHRoZSBvbmx5CiAgICAgICAgICAgICAgICAgICAgbWFuIGluIHRoZSB3b3JsZCB3aG8gY291bGQgcmVjb3ZlciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4gZm9yIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIGFkdmlzZWQgeW91IHRvIGFwcG9pbnQgaGltIGFzIGdlbmVyYWwuIEJ1dCB0aGlzCiAgICAgICAgICAgICAgICAgICAgcHJlbGltaW5hcnkgcmVzb2x1dGlvbiBoYWQgYWxyZWFkeSBiZWVuIGRyYWZ0ZWQgYW5kIHByZWNvbmNlcnRlZCBieSB0aGVtLCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQsIGlmIHlvdSBzaG91bGQgYmUgY2FwdGl2YXRlZCBieSB0aGUgcHJvbWlzZXMgYW5kIGV4cGVjdGF0aW9ucyB3aGljaAogICAgICAgICAgICAgICAgICAgIEFyaXN0b21hY2h1cyBoZWxkIG91dCB0byB5b3UsIGl0IG1pZ2h0IGJlIHJhdGlmaWVkIHRoZXJlIGFuZCB0aGVuIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIEFzc2VtYmx5LCBhbmQgbm8gaW1wZWRpbWVudCBtaWdodCByZW1haW4uIDwvdHJhbnNsYXRpb24+"
translation['23.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQKICAgICAgICAgICAgICAgICAgICB3aGF0IG1vcmUgaW5nZW5pb3VzIGFuZCBjdW5uaW5nIGRldmljZSBjb3VsZCB0aGVzZSBtZW4gaGF2ZSBjb25jb2N0ZWQgdG8gb2J0YWluCiAgICAgICAgICAgICAgICAgICAgdGhlIGV4cHVsc2lvbiBvZiB0aGUgb3RoZXIga2luZ3MsIGFuZCB0aGUgc3ViamVjdGlvbiBvZiB0aGUgd2hvbGUgcmVhbG0gdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9uYXJjaCB3aG9tIHRoZXkgcHJlZmVycmVkLCB0aGFuIHdoZW4gdGhleSBpbnRpbWlkYXRlZCB0aGUgY29tbWFuZGVycyB3aG8gd291bGQKICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UgaGF2ZSBzdXBwb3J0ZWQgdGhlIHR3byByaXZhbHMsIGFuZCBwdXQgdGhlbSBvbiB0aGVpciBndWFyZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBzcGl0ZWZ1bCBhY2N1c2F0aW9uIHdoaWNoIHRoZXkgbWlnaHQgcmVhc29uYWJseSBleHBlY3QgdG8gZW5jb3VudGVyIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIG9wZXJhdGlvbiBvZiB0aGlzIGRlY3JlZTsgYW5kIHdoZW4gb24gdGhlIG90aGVyIGhhbmQgdGhleSBjb25mZXJyZWQgdXBvbiB0aGUgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIHdhcyBzY2hlbWluZyB0byBnZXQgdGhlIG1vbmFyY2h5IGZvciBvbmUga2luZywgYW5kIHdhcyBsYXlpbmcgcGxhbnMgZW50aXJlbHkKICAgICAgICAgICAgICAgICAgICBvcHBvc2VkIHRvIHlvdXIgaW50ZXJlc3RzLCBzdWNoIGFtcGxlIGxpY2VuY2UgdG8gcHJvY2VlZCB3aXRob3V0IGZlYXI/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm9yIGlzIGl0CiAgICAgICAgICAgICAgICAgICAgb25seSB0aGVzZSBjb25zaWRlcmF0aW9ucyB0aGF0IHByb3ZlIHRoYXQgc3VjaCB3YXMgdGhlIHB1cnBvc2UgZm9yIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb24gd2FzIG1vdmVkOiB0aGUgZGVjcmVlIGl0c2VsZiBzdXBwbGllcyBldmlkZW5jZSBvZiBncmVhdCB3ZWlnaHQuIEFmdGVyCiAgICAgICAgICAgICAgICAgICAgZHJhZnRpbmcgdGhlIHdvcmRzIOKAnGlmIGFueSBwZXJzb24gcHV0IENoYXJpZGVtdXMgdG8gZGVhdGgs4oCdCiAgICAgICAgICAgICAgICAgICAgYW5kIG9taXR0aW5nIGFueSBwcm92aXNvIG9mIHdoYXQgQ2hhcmlkZW11cyBtaWdodCBiZSBkb2luZywgd2hldGhlciBmb3Igb3IKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHlvdXIgYWR2YW50YWdlLCB0aGUgbW92ZXIgZm9ydGh3aXRoIGFkZGVkLCDigJxoZSBzaGFsbCBiZSBsaWFibGUKICAgICAgICAgICAgICAgICAgICB0byBzZWl6dXJlIGFuZCByZW1vdmFsIGZyb20gdGhlIHRlcnJpdG9yeSBvZiBvdXIgYWxsaWVzLuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['23.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgbm8gbWFuIHdobyBpcyBhbiBlbmVteSBvZiBvdXJzIGFzIHdlbGwgYXMgb2YKICAgICAgICAgICAgICAgICAgICBDaGFyaWRlbXVzIHdpbGwgZXZlciBlbnRlciBhbGxpZWQgdGVycml0b3J5LCB3aGV0aGVyIGhlIGhhcyBwdXQgaGltIHRvIGRlYXRoIG9yCiAgICAgICAgICAgICAgICAgICAgbm90LCBhbmQgdGhlcmVmb3JlIGl0IGlzIG5vdCBhZ2FpbnN0IHN1Y2ggbWVuIHRoYXQgdGhpcyByZXRyaWJ1dGlvbiBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIGRpcmVjdGVkLiBUaGUgbWFuIHdobyB3aWxsIGJlIGFsYXJtZWQgYnkgdGhpcyBkZWNyZWUsIGFuZCB3aWxsIGJlIG9uIGhpcyBndWFyZAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgYmUgY29taW5nIG91ciBjZXJ0YWluIGVuZW15LCBpcyBvbmUgd2hvIGlzIGEgZnJpZW5kIG9mIG91cnMsIGFuZCBhbHNvIGFuCiAgICAgICAgICAgICAgICAgICAgZW5lbXkgb2YgaGlzLCBpZiBoZSBzaG91bGQgYXR0ZW1wdCBhbnl0aGluZyBpbmltaWNhbCB0byB1cy4gQW5kIHRoYXQgbWFuIGlzCiAgICAgICAgICAgICAgICAgICAgQXRoZW5vZG9ydXMsIG9yIFNpbW9uLCBvciBCaWFub3IsIGtpbmdzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiwgb3IgYW55IG90aGVyIG1hbiB3aG8gbWF5IHdpc2ggdG8gbGF5IHlvdSB1bmRlcgogICAgICAgICAgICAgICAgICAgIG9ibGlnYXRpb24gYnkgcmVzdHJhaW5pbmcgQ2hhcmlkZW11cyB3aGVuIGhlIGlzIHRyeWluZyB0byBhY3QgaW4gb3Bwb3NpdGlvbiB0bwogICAgICAgICAgICAgICAgICAgIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['23.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhcmUgdGhlIHB1cnBvc2VzIGZvcgogICAgICAgICAgICAgICAgICAgIHdoaWNoIHRoZSBwcm92aXNpb25hbCByZXNvbHV0aW9uIHdhcyBtb3ZlZCwgaW4gdGhlIGhvcGUgdGhhdCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHJhdGlmaWVkIGJ5IGEgZGVsdWRlZCBBc3NlbWJseTsgYW5kIHN1Y2ggdGhlIHJlYXNvbnMgd2h5IHdlLCBkZXNpcmluZyB0bwogICAgICAgICAgICAgICAgICAgIGZydXN0cmF0ZSBpdHMgcmF0aWZpY2F0aW9uLCBoYXZlIGJyb3VnaHQgdGhpcyBwcmVzZW50IGluZGljdG1lbnQuIEFzIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHVuZGVydGFrZW4gdG8gcHJvdmUgdGhyZWUgcHJvcG9zaXRpb25zLOKAlGZpcnN0IHRoYXQgdGhlIGRlY3JlZSBpcwogICAgICAgICAgICAgICAgICAgIHVuY29uc3RpdHV0aW9uYWwsIHNlY29uZGx5IHRoYXQgaXQgaXMgaW5qdXJpb3VzIHRvIHRoZSBjb21tb24gd2VhbCwgYW5kIHRoaXJkbHkKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBwZXJzb24gaW4gd2hvc2UgZmF2b3VyIGl0IGhhcyBiZWVuIG1vdmVkIGlzIHVud29ydGh5IG9mIHN1Y2gKICAgICAgICAgICAgICAgICAgICBwcml2aWxlZ2Us4oCUaXQgaXMsIHBlcmhhcHMsIGZhaXIgdGhhdCBJIHNob3VsZCBhbGxvdyB5b3UsIHdobyBhcmUgdG8KICAgICAgICAgICAgICAgICAgICBoZWFyIG1lLCB0byBjaG9vc2Ugd2hhdCB5b3Ugd2lzaCB0byBoZWFyIGZpcnN0LCBhbmQgc2Vjb25kLCBhbmQgbGFzdC4gPC90cmFuc2xhdGlvbj4="
translation['23.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5Db25zaWRlciB3aGF0IHlvdSBwcmVmZXIsIHRoYXQgSSBtYXkgYmVnaW4gd2l0aAogICAgICAgICAgICAgICAgICAgIHRoYXQu4oCUWW91IHdpc2ggbWUgdG8gZGVhbCBmaXJzdCB3aXRoIHRoZSBpbGxlZ2FsaXR5PyBWZXJ5IHdlbGw7IEkgd2lsbAogICAgICAgICAgICAgICAgICAgIGRvIHNvLiBUaGVyZSBpcyBhIGZhdm91ciB3aGljaCBJIG5vdCBvbmx5IGFzayBidXQgY2xhaW0gZnJvbSB5b3UKICAgICAgICAgICAgICAgICAgICBhbGws4oCUd2l0aCBqdXN0aWNlLCBhcyBJIGFtIGluY2xpbmVkIHRvIHRoaW5rLiBJIGJlZyB0aGF0IG5vbmUgb2YgeW91LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRha2luZyBhIHBhcnRpc2FuCiAgICAgICAgICAgICAgICAgICAgdmlldywgYmVjYXVzZSB5b3UgaGF2ZSBiZWVuIGRlY2VpdmVkIGluIENoYXJpZGVtdXMgYW5kIGxvb2sgb24gaGltIGFzIGEKICAgICAgICAgICAgICAgICAgICBiZW5lZmFjdG9yLCB3aWxsIGdpdmUgYW4gdW5mcmllbmRseSBoZWFyaW5nIHRvIG15IHJlbWFya3Mgb24gdGhlIHBvaW50IG9mIGxhdy4KICAgICAgICAgICAgICAgICAgICBEbyBub3QsIGZvciB0aGF0IHJlYXNvbiwgcm9iIHlvdXJzZWx2ZXMgb2YgdGhlIHBvd2VyIHRvIGNhc3QgYW4gaG9uZXN0IHZvdGUsIGFuZAogICAgICAgICAgICAgICAgICAgIG1lIG9mIHRoZSByaWdodCB0byBwcmVzZW50IG15IHdob2xlIGNhc2UgYXMgSSB0aGluayBmaXQuIFlvdSBtdXN0IGxpc3RlbiB0byBtZQogICAgICAgICAgICAgICAgICAgIGluIHRoZSBtYW5uZXIgZm9sbG93aW5nLOKAlGFuZCBvYnNlcnZlIGhvdyBmYWlybHkgSSB3aWxsIHB1dCBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgYW0gZGlzY3Vzc2luZyB0aGUgcG9pbnQgb2YgbGF3LCB5b3UKICAgICAgICAgICAgICAgICAgICBtdXN0IGRpc3JlZ2FyZCB0aGUgcGVyc29uLCBhbmQgdGhlIGNoYXJhY3RlciBvZiB0aGUgcGVyc29uLCBpbiB3aG9zZSBmYXZvdXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGhhcyBiZWVuIHByb3Bvc2VkLCBhbmQgYXR0ZW5kIHRvIHRoZSBxdWVzdGlvbiB3aGV0aGVyIGl0IGlzIGxlZ2FsIG9yCiAgICAgICAgICAgICAgICAgICAgaWxsZWdhbCzigJR0aGF0IGFuZCB0aGF0IGFsb25lLiBXaGVuIEkgYW0gYnJpbmdpbmcgdGhlIG1hbidzIGRlZWRzIGhvbWUKICAgICAgICAgICAgICAgICAgICB0byBoaW0sIGFuZCByZWxhdGluZyBpbiB3aGF0IGZhc2hpb24geW91IGhhdmUgYmVlbiBvdmVycmVhY2hlZCBieSBoaW0sIHlvdSBtdXN0CiAgICAgICAgICAgICAgICAgICAgbG9vayBvbmx5IGF0IHRoZSB0cmFuc2FjdGlvbnMs4oCUZG8gSSByZWxhdGUgdGhlbSBhY2N1cmF0ZWx5IG9yIHVudHJ1bHk/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBJIGlucXVpcmUgd2hldGhlciBvciBub3QgdGhlCiAgICAgICAgICAgICAgICAgICAgZW5hY3RtZW50IG9mIHRoaXMgZGVjcmVlIGlzIGNvbmR1Y2l2ZSB0byB0aGUgcHVibGljIGdvb2QsIGRpc21pc3MgZXZlcnl0aGluZwogICAgICAgICAgICAgICAgICAgIGVsc2UgYW5kIHdhdGNoIG15IHJlYXNvbmluZyBvbiB0aGF0IHBvaW50LOKAlGlzIGl0IHNvdW5kIG9yIHVuc291bmQ/CiAgICAgICAgICAgICAgICAgICAgTGlzdGVuIHRvIG1lIGluIHRoYXQgbWFubmVyLCBhbmQgeW91IHdpbGwgZ2V0IGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2Ygd2hhdCB5b3UKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBrbm93LCBieSBsb29raW5nIGF0IG9uZSBxdWVzdGlvbiBhdCBhIHRpbWUsIGluc3RlYWQgb2YgaW5xdWlyaW5nIGludG8KICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIGlzc3VlcyBhdCBvbmNlLCB3aGlsZSBJIHNoYWxsIGhhdmUgbm8gZGlmZmljdWx0eSBpbiBleHBsYWluaW5nIHdoYXQgSQogICAgICAgICAgICAgICAgICAgIG1lYW4uIE9uIGV2ZXJ5IHRvcGljIG15IHJlbWFya3Mgc2hhbGwgYmUgYnJpZWYuIDwvdHJhbnNsYXRpb24+"
translation['23.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRha2UgYW5kIHJlYWQgdGhlIGFjdHVhbCBzdGF0dXRlcywgdGhhdAogICAgICAgICAgICAgICAgICAgIEkgbWF5IHByb3ZlIHRoZXJlYnkgdGhlIGlsbGVnYWxpdHkgb2YgdGhlaXIgcHJvcG9zYWwuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iT25lIG9mIHRoZSBMYXdzIG9mIHRoZSBBcmVvcGFndXMgQ29uY2VybmluZyBIb21pY2lkZSI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T25lIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgTGF3cyBvZiB0aGUgQXJlb3BhZ3VzIENvbmNlcm5pbmcgSG9taWNpZGU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgQ291bmNpbCBvZiB0aGUgQXJlb3BhZ3VzIHNoYWxsIHRha2UgY29nbml6YW5jZSBpbiBjYXNlcwogICAgICAgICAgICAgICAgICAgICAgICBvZiBob21pY2lkZSwgb2YgaW50ZW50aW9uYWwgd291bmRpbmcsIG9mIGFyc29uLCBhbmQgb2YgcG9pc29uaW5nLCBpZiBhIG1hbgogICAgICAgICAgICAgICAgICAgICAgICBraWxsIGFub3RoZXIgYnkgZ2l2aW5nIHBvaXNvbi48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9uZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIExhd3Mgb2YgdGhlIEFyZW9wYWd1cyBDb25jZXJuaW5nIEhvbWljaWRlPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIENvdW5jaWwgb2YgdGhlIEFyZW9wYWd1cyBzaGFsbCB0YWtlIGNvZ25pemFuY2UgaW4gY2FzZXMKICAgICAgICAgICAgICAgICAgICAgICAgb2YgaG9taWNpZGUsIG9mIGludGVudGlvbmFsIHdvdW5kaW5nLCBvZiBhcnNvbiwgYW5kIG9mIHBvaXNvbmluZywgaWYgYSBtYW4KICAgICAgICAgICAgICAgICAgICAgICAga2lsbCBhbm90aGVyIGJ5IGdpdmluZyBwb2lzb24uPC90cmFuc2xhdGlvbj4="
translation['23.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcCB0aGVyZS4gWW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBoZWFyZCB0aGUgc3RhdHV0ZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIHlvdSBoYXZlIGFsc28gaGVhcmQgdGhlIGRlY3JlZS4gTGV0IG1lIHRlbGwgeW91IGhvdwogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIG1vcmUgcmVhZGlseSBncmFzcCB0aGUgYXJndW1lbnRzIG9uIHRoZSBxdWVzdGlvbiBvZiBpbGxlZ2FsaXR5LgogICAgICAgICAgICAgICAgICAgIENvbnNpZGVyIHRoZSBzdGF0dXMgb2YgdGhlIHBlcnNvbiBpbiB3aG9zZSBmYXZvdXIgdGhlIGRlY3JlZSBoYXMgYmVlbiBwcm9wb3NlZDoKICAgICAgICAgICAgICAgICAgICBpcyBoZSBhbiBhbGllbiwgYSByZXNpZGVudCBhbGllbiwgb3IgYSBjaXRpemVuPyBJZiB3ZSBjYWxsIGhpbSBhIHJlc2lkZW50IGFsaWVuLAogICAgICAgICAgICAgICAgICAgIHdlIHNoYWxsIG5vdCBiZSB0ZWxsaW5nIHRoZSB0cnV0aDsgYW5kIGlmIHdlIGNhbGwgaGltIGFuIGFsaWVuLCB3ZSBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgIGRvaW5nIGhpbSB3cm9uZywgZm9yIGl0IGlzIG9ubHkgZmFpciB0byBoaW0gdG8gYWRtaXQgdGhlIHZhbGlkaXR5IG9mIHRoYXQgZ3JhY2UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcGVvcGxlIGJ5IHdoaWNoIGhlIHdhcyBtYWRlIGEgY2l0aXplbi4gSXQgc2VlbXMsIHRoZW4sIHRoYXQgd2UgbXVzdCB0cmVhdAogICAgICAgICAgICAgICAgICAgIGhpbSBhcyBhIGNpdGl6ZW4gaW4gb3VyIGFyZ3VtZW50cy4gPC90cmFuc2xhdGlvbj4="
translation['23.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgSSBiZWcKICAgICAgICAgICAgICAgICAgICB5b3UgdG8gb2JzZXJ2ZSBob3cgY2FuZGlkbHkgYW5kIGhvbmVzdGx5IEkgYW0gZ29pbmcgdG8gdHJlYXQgdGhlIHF1ZXN0aW9uOyBmb3IgSQogICAgICAgICAgICAgICAgICAgIGFzc2lnbiBoaW0gdG8gdGhhdCBjbGFzcyB3aGljaCBlbnRpdGxlcyBoaW0gdG8gdGhlIGdyZWF0ZXN0IHJlc3BlY3QsIHRob3VnaCBJIGRvCiAgICAgICAgICAgICAgICAgICAgZGVueSBoaXMgcmlnaHQgdG8gYWNxdWlyZSBpbGxlZ2FsbHkgcHJpdmlsZWdlcyBub3QgZW5qb3llZCBieSB1cyB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMgYnkgYmlydGhyaWdodCzigJR0aGUgcHJpdmlsZWdlcywgSSBtZWFuLCB3aGljaCB0aGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgaGFzIHNwZWNpZmllZCBpbiB0aGlzIGRlY3JlZS4gSW4gdGhlIHN0YXR1dGUgaXQgaXMgcHJvdmlkZWQgdGhhdCB0aGUgQ291bmNpbAogICAgICAgICAgICAgICAgICAgIHNoYWxsIHRha2UgY29nbml6YW5jZSBvZiBob21pY2lkZSwgaW50ZW50aW9uYWwgd291bmRpbmcsIGFyc29uLCBhbmQgcG9pc29uaW5nLAogICAgICAgICAgICAgICAgICAgIGlmIGEgbWFuIGtpbGxzIGFub3RoZXIgYnkgZ2l2aW5nIGhpbSBwb2lzb24uIDwvdHJhbnNsYXRpb24+"
translation['23.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbGVnaXNsYXRvciwgd2hpbGUgaGUgcHJlc3VtZXMgdGhlIGtpbGxpbmcsIGhhcyBuZXZlcnRoZWxlc3MgZGlyZWN0ZWQgYQogICAgICAgICAgICAgICAgICAgIGp1ZGljaWFsIGlucXVpcnkgYmVmb3JlIHNwZWNpZnlpbmcgd2hhdCBpcyB0byBiZSBkb25lIHRvIHRoZSBjdWxwcml0LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVyZWJ5IGhhcyBzaG93biBhIGp1c3QgcmVzcGVjdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZm9yIHRoZSByZWxpZ2lvdXMgZmVlbGluZyBvZiB0aGUgd2hvbGUgY2l0eS4gSSBzYXkgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgY2l0eSwgYmVjYXVzZSBpdCBpcyBpbXBvc3NpYmxlIHRoYXQgYWxsIG9mIHlvdSBzaG91bGQga25vdyB3aG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuc2xheWVyIGlzLiBIZSB0aG91Z2h0IGl0IHNjYW5kYWxvdXMgdG8gZ2l2ZSBjcmVkaXQgdG8gc3VjaCBhY2N1c2F0aW9ucywgd2hlbgogICAgICAgICAgICAgICAgICAgIG1hZGUsIHdpdGhvdXQgYSB0cmlhbDsgYW5kIGhlIGNvbmNlaXZlZCB0aGF0LCBpbmFzbXVjaCBhcyB0aGUgYXZlbmdpbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZXIgaXMgaW4gb3VyIGhhbmRzLCB3ZSBvdWdodCB0byBiZSBpbmZvcm1lZCBhbmQgc2F0aXNmaWVkIGJ5IGFyZ3VtZW50IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgYWNjdXNlZCBpcyBndWlsdHksIGZvciB0aGVuIGNvbnNjaWVuY2UgcGVybWl0cyB1cyB0byBpbmZsaWN0IHB1bmlzaG1lbnQKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8ga25vd2xlZGdlLCBidXQgbm90IGJlZm9yZS4gPC90cmFuc2xhdGlvbj4="
translation['23.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciBoZSBhcmd1ZWQgdGhhdCBiZWZvcmUgdGhlIHRyaWFsIGlzIGhlbGQgc3VjaCBleHByZXNzaW9ucyBhcwogICAgICAgICAgICAgICAgICAgIOKAnGlmIGEgbWFuIGtpbGws4oCdIOKAnGlmIGEgbWFuIHJvYiBhCiAgICAgICAgICAgICAgICAgICAgdGVtcGxlLOKAnSDigJxpZiBhIG1hbiBjb21taXQgdHJlYXNvbizigJ0gYW5kIHRoZSBsaWtlLAogICAgICAgICAgICAgICAgICAgIGFyZSBtZXJlbHkgcGhyYXNlcyBvZiBhY2N1c2F0aW9uOiB0aGV5IGJlY29tZSBkZWZpbml0aW9ucyBvZiBjcmltZSBvbmx5IGFmdGVyCiAgICAgICAgICAgICAgICAgICAgdHJpYWwgYW5kIGNvbnZpY3Rpb24uIFRvIGEgZm9ybXVsYSBvZiBhY2N1c2F0aW9uIGhlIHRob3VnaHQgaXQgcHJvcGVyIHRvIGF0dGFjaAogICAgICAgICAgICAgICAgICAgIG5vdCBwdW5pc2htZW50LCBidXQgb25seSB0cmlhbDsgYW5kIHRoZXJlZm9yZSwgd2hlbiBlbmFjdGluZyB0aGF0LCBpZiBvbmUgbWFuCiAgICAgICAgICAgICAgICAgICAga2lsbGVkIGFub3RoZXIsIHRoZSBDb3VuY2lsIHNob3VsZCB0YWtlIGNvZ25pemFuY2UsIGhlIGRpZCBub3QgbGF5IGRvd24gd2hhdAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBiZSBkb25lIHRvIHRoZSBjdWxwcml0IGlmIGZvdW5kIGd1aWx0eS4gPC90cmFuc2xhdGlvbj4="
translation['23.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5TbyBtdWNoIGZvciB0aGUgbGVnaXNsYXRvcjsgYnV0IHdoYXQgb2YgdGhlIGF1dGhvciBvZiB0aGUgZGVjcmVlPwogICAgICAgICAgICAgICAgICAgIOKAnElmIGFueSBtYW4ga2lsbCBDaGFyaWRlbXVzLOKAnSBoZSBzYXlzLiBTbyBoZSBkZWZpbmVzIHRoZQogICAgICAgICAgICAgICAgICAgIGluanVyeSBpbiB0aGUgc2FtZSBwaHJhc2UsIOKAnGlmIGFueSBtYW4ga2lsbCzigJ0gYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaXNsYXRvcjsgYnV0IHRoZSBzZXF1ZWwgaXMgbm90IHRoZSBzYW1lLiBIZSBzdHJ1Y2sgb3V0IHN1Ym1pc3Npb24gdG8gdHJpYWwsCiAgICAgICAgICAgICAgICAgICAgYW5kIG1hZGUgdGhlIGN1bHByaXQgbGlhYmxlIHRvIGltbWVkaWF0ZSBzZWl6dXJlOyBoZSBwYXNzZWQgYnkgdGhlIHRyaWJ1bmFsCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGVkIGJ5IGxhdywgYW5kIGhhbmRlZCBvdmVyIHRvIHRoZSBhY2N1c2VycywgdG8gYmUgZGVhbHQgd2l0aCBhcyB0aGV5CiAgICAgICAgICAgICAgICAgICAgY2hvc2UsIGEgbWFuIHVudHJpZWQsIGEgbWFuIHdob3NlIGd1aWx0IGlzIG5vdCB5ZXQgcHJvdmVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZXkgaGF2ZSBnb3QgaGltLCB0aGV5IGFyZSB0byBiZSBhbGxvd2VkIHRvIHRvcnR1cmUKICAgICAgICAgICAgICAgICAgICBoaW0sIG9yIG1hbHRyZWF0IGhpbSwgb3IgZXh0b3J0IG1vbmV5IGZyb20gaGltLiBZZXQgdGhlIG5leHQgZW5zdWluZyBzdGF0dXRlCiAgICAgICAgICAgICAgICAgICAgZGlyZWN0bHkgYW5kIGRpc3RpbmN0bHkgZm9yYmlkcyBzdWNoIHRyZWF0bWVudCBldmVuIG9mIG1lbiBjb252aWN0ZWQgYW5kIHByb3ZlZAogICAgICAgICAgICAgICAgICAgIHRvIGJlIG11cmRlcmVycy4gUmVhZCB0byB0aGUganVyeSB0aGUgc3RhdHV0ZSB0aGF0IGZvbGxvd3MuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBzaGFsbCBiZSBsYXdmdWwgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpbGw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+aS5lLiBpZiB0aGV5IHJlc2lzdCBjYXB0dXJlLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICAgICAgbXVyZGVyZXJzIGluIG91ciBvd24gdGVycml0b3J5LCBvciB0byBhcnJlc3QgdGhlbSBhcyBkaXJlY3RlZCBvbiB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR1cm5pbmctdGFibGUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNvbG9uJ3MgbGF3cyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNjcmliZWQgb24gc3F1YXJlIHRhYmxldHMsIGF0dGFjaGVkIO+8iGJ5IGhpbmdlcz/vvIkgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuIHVwcmlnaHQgcG9zdC4gVGhlc2UgcG9zdHMgc3Rvb2QgaW4gdGhlIEFnb3JhLCBhY2Nlc3NpYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGwuPC9ub3RlPiBidXQgbm90IHRvIG1hbHRyZWF0IG9yIGFtZXJjZSB0aGVtLCBvbiBwZW5hbHR5IG9mIGEgcGF5bWVudAogICAgICAgICAgICAgICAgICAgICAgICBvZiB0d2ljZSB0aGUgZGFtYWdlIGluZmxpY3RlZC4gVGhlIEFyY2hvbnMsIGFjY29yZGluZyB0byB0aGVpciBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIGp1cmlzZGljdGlvbnMsIHNoYWxsIGJyaW5nIGNhc2VzIGludG8gY291cnQ7IGZvciBhbnkgbWFuIHdobyBzbyBkZXNpcmVzIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgY291cnQgb2YgSGVsaWFlYSBzaGFsbCBhZGp1ZGljYXRlLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgc2hhbGwgYmUgbGF3ZnVsIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBraWxsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPmkuZS4gaWYgdGhleSByZXNpc3QgY2FwdHVyZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIG11cmRlcmVycyBpbiBvdXIgb3duIHRlcnJpdG9yeSwgb3IgdG8gYXJyZXN0IHRoZW0gYXMgZGlyZWN0ZWQgb24gdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dXJuaW5nLXRhYmxlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Tb2xvbidzIGxhd3Mgd2VyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zY3JpYmVkIG9uIHNxdWFyZSB0YWJsZXRzLCBhdHRhY2hlZCDvvIhieSBoaW5nZXM/77yJIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbiB1cHJpZ2h0IHBvc3QuIFRoZXNlIHBvc3RzIHN0b29kIGluIHRoZSBBZ29yYSwgYWNjZXNzaWJsZSB0bwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsLjwvbm90ZT4gYnV0IG5vdCB0byBtYWx0cmVhdCBvciBhbWVyY2UgdGhlbSwgb24gcGVuYWx0eSBvZiBhIHBheW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdHdpY2UgdGhlIGRhbWFnZSBpbmZsaWN0ZWQuIFRoZSBBcmNob25zLCBhY2NvcmRpbmcgdG8gdGhlaXIgc2V2ZXJhbAogICAgICAgICAgICAgICAgICAgICAgICBqdXJpc2RpY3Rpb25zLCBzaGFsbCBicmluZyBjYXNlcyBpbnRvIGNvdXJ0OyBmb3IgYW55IG1hbiB3aG8gc28gZGVzaXJlcyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNvdXJ0IG9mIEhlbGlhZWEgc2hhbGwgYWRqdWRpY2F0ZS48L3RyYW5zbGF0aW9uPg=="
translation['23.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBhbmQgSSBiZWcKICAgICAgICAgICAgICAgICAgICB5b3UgdG8gZXhhbWluZSBpdCBhbmQgb2JzZXJ2ZSBob3cgYWRtaXJhYmx5IGFuZCBtb3N0IHJpZ2h0ZW91c2x5IGl0IGlzIGZyYW1lZCBieQogICAgICAgICAgICAgICAgICAgIHRoZSBsZWdpc2xhdG9yLiBIZSB1c2VzIHRoZSB0ZXJtIOKAnG11cmRlcmVyc+KAnTsgYnV0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHBsYWNlIHlvdSBzZWUgdGhhdCBieSBtdXJkZXJlciBoZSBtZWFucyBhIG1hbiBmb3VuZCBndWlsdHkgYnkgdmVyZGljdDsgZm9yCiAgICAgICAgICAgICAgICAgICAgbm8gbWFuIGNvbWVzIHVuZGVyIHRoYXQgZGVzaWduYXRpb24gdW50aWwgaGUgaGFzIGJlZW4gY29udmljdGVkIGFuZCBmb3VuZAogICAgICAgICAgICAgICAgICAgIGd1aWx0eS4gPC90cmFuc2xhdGlvbj4="
translation['23.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IGlzIG1hZGUgY2xlYXIgYm90aCBpbiB0aGUgZWFybGllcgogICAgICAgICAgICAgICAgICAgIHN0YXR1dGUgYW5kIGluIHRoaXMgb25lOyBmb3IgaW4gdGhlIGZvcm1lciwgYWZ0ZXIgdGhlIHdvcmRzIOKAnGlmIGFueQogICAgICAgICAgICAgICAgICAgIG1hbiBraWxsLOKAnSB0aGUgbGVnaXNsYXRvciBkaXJlY3RzIHRoZSBDb3VuY2lsIHRvIHRha2UgY29nbml6YW5jZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgaGVyZSwgYWZ0ZXIgZGVzaWduYXRpbmcgdGhlIG1hbiBhcyDigJx0aGUgbXVyZGVyZXIs4oCdIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGRpcmVjdGVkIHdoYXQgaXMgdG8gYmUgZG9uZSB0byBoaW0uIFRoYXQgaXMgdG8gc2F5LCB3aGVuIGl0IGlzIGEgcXVlc3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICBhY2N1c2F0aW9uLCBoZSBoYXMgb3JkZXJlZCBhIHRyaWFsLCBidXQgd2hlbiB0aGUgY3VscHJpdCwgYmVpbmcgZm91bmQgZ3VpbHR5LCBpcwogICAgICAgICAgICAgICAgICAgIGxpYWJsZSB0byB0aGlzIGRlc2lnbmF0aW9uLCBoZSBoYXMgc3BlY2lmaWVkIHRoZSBwZW5hbHR5LiBUaGVyZWZvcmUgaGUgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgc3BlYWtpbmcgb25seSBvZiBwZXJzb25zIGZvdW5kIGd1aWx0eS4gV2VsbCwgd2hhdCBkb2VzIGhlIGRpcmVjdD8gVGhhdCBpdCBzaGFsbAogICAgICAgICAgICAgICAgICAgIGJlIGxhd2Z1bCB0byBraWxsIHRoZW0gYW5kIHRvIHB1dCB0aGVtIHVuZGVyIGFycmVzdC4gPC90cmFuc2xhdGlvbj4="
translation['23.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5Eb2VzIGhlIHNheSB0aGF0IHRoZXkgYXJlIHRvIGJlIHRha2VuIHRvIHRoZSBob3VzZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dG9yLCBvciBhcyBoZSBwbGVhc2VzPyBObywgaW5kZWVkLiBIb3cgYXJlIHRoZXkgdG8gYmUgYXJyZXN0ZWQ/CiAgICAgICAgICAgICAgICAgICAg4oCcQXMgZGlyZWN0ZWQgb24gdGhlIGZpcnN0IHR1cm5pbmctdGFibGUs4oCdIGlzIHRoZSBwaHJhc2U7IGFuZAogICAgICAgICAgICAgICAgICAgIHlvdSBhbGwga25vdyB3aGF0IHRoYXQgbWVhbnMuIFRoZSBqdWRpY2lhbCBhcmNob25zIGFyZSB0aGVyZSBhdXRob3JpemVkIHRvCiAgICAgICAgICAgICAgICAgICAgcHVuaXNoIHdpdGggZGVhdGggcGVyc29ucyB3aG8gaGF2ZSBnb25lIGludG8gZXhpbGUgb24gYSBjaGFyZ2Ugb2YgbXVyZGVyLiBPbmx5CiAgICAgICAgICAgICAgICAgICAgbGFzdCB5ZWFyIHlvdSBhbGwgc2F3IHRoZSBjdWxwcml0IHdobyB3YXMgYXJyZXN0ZWQgYnkgdGhlbSBpbiB0aGUgQXNzZW1ibHkuIEl0CiAgICAgICAgICAgICAgICAgICAgaXMgdG8gdGhlIGFyY2hvbnMsIHRoZW4sIHRoYXQgdGhlIG11cmRlcmVyIGlzIHRvIGJlIHRha2VuIG9uIGFycmVzdDsgPC90cmFuc2xhdGlvbj4="
translation['23.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhhdCBkaWZmZXJzIGZyb20gYmVpbmcgdGFrZW4gdG8gdGhlIGhvdXNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3NlY3V0b3IgaW4gdGhpcyByZXNwZWN0LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LOKAlHRoYXQgdGhlIGNhcHRvciB3aG8gY2FycmllcyBhIG1hbiB0byB0aGUKICAgICAgICAgICAgICAgICAgICBqdWRnZXMgZ2l2ZXMgY29udHJvbCBvZiB0aGUgbWFsZWZhY3RvciB0byB0aGUgbGF3cywgd2hpbGUgdGhlIGNhcHRvciB3aG8gdGFrZXMKICAgICAgICAgICAgICAgICAgICBoaW0gaG9tZSBnaXZlcyBzdWNoIGNvbnRyb2wgdG8gaGltc2VsZi4gSW4gdGhlIGZvcm1lciBjYXNlIHB1bmlzaG1lbnQgaXMKICAgICAgICAgICAgICAgICAgICBzdWZmZXJlZCBhcyB0aGUgbGF3IGVuam9pbnM7IGluIHRoZSBsYXR0ZXIsIGFzIHRoZSBjYXB0b3IgcGxlYXNlczsgYW5kIG9mIGNvdXJzZQogICAgICAgICAgICAgICAgICAgIGl0IG1ha2VzIGEgdmFzdCBkaWZmZXJlbmNlIHdoZXRoZXIgdGhlIHJldHJpYnV0aW9uIGlzIGNvbnRyb2xsZWQgYnkgdGhlIGxhdyBvcgogICAgICAgICAgICAgICAgICAgIGJ5IGEgcHJpdmF0ZSBlbmVteS4gPC90cmFuc2xhdGlvbj4="
translation['23.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz7igJxOb3QgdG8gbWFsdHJlYXQKICAgICAgICAgICAgICAgICAgICBvciBhbWVyY2Us4oCdIHNheXMgdGhlIHN0YXR1dGUuIFdoYXQgZG9lcyB0aGF0IG1lYW4/IEV2ZXJ5IG9uZSwgSSBhbQogICAgICAgICAgICAgICAgICAgIHN1cmUsIHVuZGVyc3RhbmRzIHRoYXQgbm90IHRvIG1hbHRyZWF0IG1lYW5zIHRoYXQgdGhlcmUgaXMgdG8gYmUgbm8gc2NvdXJnaW5nLAogICAgICAgICAgICAgICAgICAgIG5vIGJpbmRpbmcgbm9yIGFueXRoaW5nIGxpa2UgdGhhdCwgYW5kIHRoYXQgbm90IHRvIGFtZXJjZSBtZWFucyBub3QgdG8gZXh0b3J0CiAgICAgICAgICAgICAgICAgICAgYmxvb2QtbW9uZXksIGZvciB0aGUgYW5jaWVudHMgY2FsbGVkIGZpbmluZyBhbWVyY2VtZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3RlIHRoYXQgaW4gdGhpcyBtYW5uZXIgdGhlIGxhdyBsYXlzIGRvd24gbm90IG9ubHkgaG93IHRoZQogICAgICAgICAgICAgICAgICAgIG11cmRlcmVyIG9yIGNvbnZpY3QgaXMgdG8gYmUgcHVuaXNoZWQsIGJ1dCBhbHNvIHdoZXJlLCBmb3IgaXQgc3BlY2lmaWVzIHRoZQogICAgICAgICAgICAgICAgICAgIGNvdW50cnkgb2YgdGhlIHBlcnNvbiBpbmp1cmVkLCBhbmQgaXQgZGlyZWN0bHkgcHJlc2NyaWJlcyB0aGF0IHRoZSBwZW5hbHR5IGlzIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgaW5mbGljdGVkIGluIHRoYXQgd2F5IGFuZCBpbiBubyBvdGhlciwgaW4gdGhhdCBwbGFjZSBhbmQgaW4gbm8gb3RoZXIuIFlldCB0aGUKICAgICAgICAgICAgICAgICAgICBhdXRob3Igb2YgdGhlIGRlY3JlZSBpcyBmYXIgaW5kZWVkIGZyb20gbWFraW5nIHRoaXMgZGlzdGluY3Rpb24s4oCUaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzIGFyZSBleGFjdGx5IGNvbnRyYXJ5LiBBZnRlciB0aGUgd29yZHMsIOKAnGlmIGFueW9uZSBzaGFsbCBraWxsCiAgICAgICAgICAgICAgICAgICAgQ2hhcmlkZW11cyzigJ0gaGUgYWRkcywg4oCcaGUgc2hhbGwgYmUgbGlhYmxlIHRvIHNlaXp1cmUKICAgICAgICAgICAgICAgICAgICBldmVyeXdoZXJlLuKAneKAlCA8L3RyYW5zbGF0aW9uPg=="
translation['23.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGRvIHlvdQogICAgICAgICAgICAgICAgICAgIG1lYW4sIHNpcj8gVGhlIGxhd3MgZG8gbm90IGFsbG93IGV2ZW4gY29udmljdGVkIGNyaW1pbmFscyB0byBiZSBhcnJlc3RlZAogICAgICAgICAgICAgICAgICAgIGVsc2V3aGVyZSB0aGFuIGluIG91ciBvd24gY291bnRyeSwgYW5kIGRvIHlvdSBwcm9wb3NlIHRoYXQgYSBtYW4gc2hhbGwgYmUgbGlhYmxlCiAgICAgICAgICAgICAgICAgICAgdG8gc2VpenVyZSB3aXRob3V0IHRyaWFsIGluIGFueSBhbGxpZWQgdGVycml0b3J5PyBBbmQgd2hlbiB0aGUgbGF3cyBmb3JiaWQKICAgICAgICAgICAgICAgICAgICBzZWl6dXJlIGV2ZW4gaW4gb3VyIG93biB0ZXJyaXRvcnksIGRvIHlvdSBwZXJtaXQgc2VpenVyZT8gSW5kZWVkLCBpbiBtYWtpbmcgYQogICAgICAgICAgICAgICAgICAgIG1hbiBsaWFibGUgdG8gc2VpenVyZSB5b3UgaGF2ZSBwZXJtaXR0ZWQgZXZlcnl0aGluZyB0aGF0IHRoZSBsYXcgaGFzCiAgICAgICAgICAgICAgICAgICAgZm9yYmlkZGVuLOKAlGV4dG9ydGlvbiBvZiBibG9vZC1tb25leSwgbWFsdHJlYXRtZW50IGFuZCBtaXN1c2FnZSBvZiBhCiAgICAgICAgICAgICAgICAgICAgbGl2aW5nIG1hbiwgcHJpdmF0ZSBjdXN0b2R5IGFuZCBwcml2YXRlIGV4ZWN1dGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['23.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3cgY291bGQgYSBtYW4gYmUgY29udmljdGVkIG9mIGEgbW9yZSBjbGVhcmx5CiAgICAgICAgICAgICAgICAgICAgdW5jb25zdGl0dXRpb25hbCBwcm9wb3NhbCwgb3Igb2YgZHJhZnRpbmcgYSByZXNvbHV0aW9uIG1vcmUgb3V0cmFnZW91c2x5IHRoYW4gaW4KICAgICAgICAgICAgICAgICAgICB0aGlzIGZhc2hpb24/IFlvdSBoYWQgdHdvIHBocmFzZXMgYXQgeW91ciBkaXNwb3NhbDog4oCcaWYgYW55IG1hbgogICAgICAgICAgICAgICAgICAgIGtpbGws4oCdIGRpcmVjdGVkIGFnYWluc3QgYSBwZXJzb24gdW5kZXIgYWNjdXNhdGlvbiwgYW5kIOKAnGlmCiAgICAgICAgICAgICAgICAgICAgYW55IG1hbiBiZSBhIG11cmRlcmVyLCBkaXJlY3RlZCBhZ2FpbnN0IGEgY3VscHJpdCBmb3VuZCBndWlsdHk7IHlldCBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24geW91IGFkb3B0ZWQgdGhlIGV4cHJlc3Npb24gdGhhdCBhcHBsaWVzIHRvIGEgbWFuIGFjY3VzZWQsIHdoaWxlIHlvdQogICAgICAgICAgICAgICAgICAgIHByb3Bvc2UgZm9yIHVudHJpZWQgY3VscHJpdHMgYSBwZW5hbHR5IHdoaWNoIHRoZSBsYXcgZG9lcyBub3QgcGVybWl0IGV2ZW4gYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBjb252aWN0aW9uLiBZb3UgaGF2ZSBlbGltaW5hdGVkIHRoZSBpbnRlcm1lZGlhdGUgcHJvY2VzcywgZm9yIGJldHdlZW4gYWNjdXNhdGlvbgogICAgICAgICAgICAgICAgICAgIGFuZCBjb252aWN0aW9uIGNvbWVzIGEgdHJpYWwu4oCUVGhlcmUgaXMgbm90IGEgd29yZCBhYm91dCB0cmlhbCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWUgcHJvcG9zZWQgYnkgdGhlIGRlZmVuZGFudC4gPC90cmFuc2xhdGlvbj4="
translation['23.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgc3RhdHV0ZXMgdGhhdCBjb21lIG5leHQgaW4gb3JkZXIuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnkgbWFuIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbGwgYSBtdXJkZXJlciwgb3Igc2hhbGwgY2F1c2UgaGltIHRvIGJlIGtpbGxlZCwgc28gbG9uZyBhcyB0aGUgbXVyZGVyZXIKICAgICAgICAgICAgICAgICAgICAgICAgYWJzZW50cyBoaW1zZWxmIGZyb20gdGhlIGZyb250aWVyLW1hcmtldCwgdGhlIGdhbWVzLCBhbmQgdGhlIEFtcGhpY3R5b25pYwogICAgICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2VzLCBoZSBzaGFsbCBiZSBsaWFibGUgdG8gdGhlIHNhbWUgcGVuYWx0eSBhcyBpZiBoZSBraWxsZWQgYW4KICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gY2l0aXplbjthbmQgdGhlIENyaW1pbmFsIENvdXJ0IHNoYWxsIGFkanVkaWNhdGUuPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnkgbWFuIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbGwgYSBtdXJkZXJlciwgb3Igc2hhbGwgY2F1c2UgaGltIHRvIGJlIGtpbGxlZCwgc28gbG9uZyBhcyB0aGUgbXVyZGVyZXIKICAgICAgICAgICAgICAgICAgICAgICAgYWJzZW50cyBoaW1zZWxmIGZyb20gdGhlIGZyb250aWVyLW1hcmtldCwgdGhlIGdhbWVzLCBhbmQgdGhlIEFtcGhpY3R5b25pYwogICAgICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2VzLCBoZSBzaGFsbCBiZSBsaWFibGUgdG8gdGhlIHNhbWUgcGVuYWx0eSBhcyBpZiBoZSBraWxsZWQgYW4KICAgICAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gY2l0aXplbjthbmQgdGhlIENyaW1pbmFsIENvdXJ0IHNoYWxsIGFkanVkaWNhdGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBtdXN0IGJlIGluZm9ybWVkLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBvZiB0aGUgaW50ZW50aW9uIHdpdGggd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnaXNsYXRvciBlbmFjdGVkIHRoaXMgc3RhdHV0ZS4gWW91IHdpbGwgZmluZCB0aGF0IGFsbCBoaXMgcHJvdmlzaW9ucyB3ZXJlCiAgICAgICAgICAgICAgICAgICAgY2F1dGlvdXMgYW5kIGFncmVlYWJsZSB0byB0aGUgc3Bpcml0IG9mIHRoZSBsYXcuIDwvdHJhbnNsYXRpb24+"
translation['23.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz7igJ1JZiBhbnkgbWFuLOKAnCBoZSBzYXlzLCBzaGFsbCBraWxsIGEKICAgICAgICAgICAgICAgICAgICBtdXJkZXJlciwgb3Igc2hhbGwgY2F1c2UgaGltIHRvIGJlIGtpbGxlZCwgc28gbG9uZyBhcyBoZSBhYnNlbnRzIGhpbXNlbGYgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBmcm9udGllci1tYXJrZXQsIHRoZSBnYW1lcywgYW5kIHRoZSBBbXBoaWN0eW9uaWMgc2FjcmlmaWNlcywgaGUgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICBsaWFibGUgdG8gdGhlIHNhbWUgcGVuYWx0eSBhcyBpZiBoZSBraWxsZWQgYW4gQXRoZW5pYW4gY2l0aXplbjsgYW5kIHRoZSBDcmltaW5hbAogICAgICAgICAgICAgICAgICAgIENvdXJ0IHNoYWxsIGFkanVkaWNhdGUu4oCdIFdoYXQgZG9lcyB0aGlzIG1lYW4/IEluIGhpcyBvcGluaW9uIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIGp1c3QgdGhhdCwgaWYgYSBtYW4gd2hvIGhhZCBnb25lIGludG8gZXhpbGUsIHdoZW4gY29udmljdGVkIG9uIGEgY2hhcmdlIG9mCiAgICAgICAgICAgICAgICAgICAgbXVyZGVyLCBzaG91bGQgbWFrZSBnb29kIGhpcyBmbGlnaHQgYW5kIGVzY2FwZSwgaGUgc2hvdWxkIGJlIGV4Y2x1ZGVkIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSBvZiB0aGUgbXVyZGVyZWQgbWFuOyBidXQgdGhhdCBpdCB3YXMgbm90IHJpZ2h0ZW91cyB0byBwdXQgaGltIHRvIGRlYXRoCiAgICAgICAgICAgICAgICAgICAgYW55d2hlcmUgYW5kIGV2ZXJ5d2hlcmUuIEhpcyB2aWV3IHdhcyB0aGF0LCBpZiB3ZSBwdXQgdG8gZGVhdGggcGVvcGxlIHdobyBoYXZlCiAgICAgICAgICAgICAgICAgICAgZ29uZSBpbnRvIGV4aWxlIGVsc2V3aGVyZSwgb3RoZXJzIHdpbGwgcHV0IHRvIGRlYXRoIHBlb3BsZSB3aG8gaGF2ZSBjb21lIGludG8KICAgICAgICAgICAgICAgICAgICBleGlsZSBoZXJlOyA8L3RyYW5zbGF0aW9uPg=="
translation['23.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhhdCwgaW4gdGhhdCBldmVudCwgdGhlIG9ubHkKICAgICAgICAgICAgICAgICAgICBjaGFuY2Ugb2Ygc2FsdmF0aW9uIGxlZnQgZm9yIGFsbCB0aG9zZSB3aG8gYXJlIHVuZm9ydHVuYXRlIHdpbGwgYmUgZGVzdHJveWVkLAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgdG8gc2F5LCB0aGUgcG93ZXIgb2YgbWlncmF0aW5nIGZyb20gdGhlIGNvdW50cnkgb2YgdGhvc2Ugd2hvbSB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBpbmp1cmVkIHRvIGEgY291bnRyeSB3aGVyZSBubyBvbmUgaGFzIGJlZW4gd3JvbmdlZCBieSB0aGVtLCBhbmQgdGhlcmUgZHdlbGxpbmcKICAgICAgICAgICAgICAgICAgICBpbiBzZWN1cml0eS4gVG8gYXZlcnQgdGhhdCBtaXNmb3J0dW5lLCBhbmQgdG8gcHJldmVudCBhbiBlbmRsZXNzIHN1Y2Nlc3Npb24gb2YKICAgICAgICAgICAgICAgICAgICByZXRyaWJ1dGlvbnMsIGhlIHdyb3RlOiDigJxpZiBhbnkgbWFuIGtpbGwgYSBtdXJkZXJlciwgc28gbG9uZyBhcyBoZQogICAgICAgICAgICAgICAgICAgIGFic2VudHMgaGltc2VsZiBmcm9tIHRoZSBmcm9udGllci1tYXJrZXQs4oCd4oCUbWVhbmluZyB0aGVyZWJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbmZpbmVzIG9mIHRoZSBtYW4ncyBvd24gY291bnRyeS4gSXQgd2FzIHRoZXJlLCBJIHN1cHBvc2UsIHRoYXQgaW4gb2xkCiAgICAgICAgICAgICAgICAgICAgdGltZXMgYm9yZGVyZXJzIG9mIG91ciBvd24gYW5kIG5laWdoYm9yaW5nIGNvdW50cmllcyB1c2VkIHRvIGZvcmdhdGhlcjsgYW5kIHNvCiAgICAgICAgICAgICAgICAgICAgaGUgc3BlYWtzIG9mIGEg4oCcZnJvbnRpZXItbWFya2V0LuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['23.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5PciB0YWtlIHRoZSB3b3Jkcywg4oCcZnJvbSBBbXBoaWN0eW9uaWMKICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2VzLuKAnSBXaHkgZGlkIGhlIGFsc28gZXhjbHVkZSB0aGUgbXVyZGVyZXIgZnJvbSB0aGVtPyBIZSBkZWJhcnMKICAgICAgICAgICAgICAgICAgICB0aGUgb2ZmZW5kZXIgZnJvbSBldmVyeXRoaW5nIGluIHdoaWNoIHRoZSBkZWNlYXNlZCB1c2VkIHRvIHBhcnRpY2lwYXRlIGluIGhpcwogICAgICAgICAgICAgICAgICAgIGxpZmV0aW1lOyBmaXJzdCBmcm9tIGhpcyBvd24gY291bnRyeSBhbmQgZnJvbSBhbGwgdGhpbmdzIHRoZXJlaW4sIHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICBwZXJtaXR0ZWQgb3Igc2FjcmVkLCBhc3NpZ25pbmcgdGhlIGZyb250aWVyLW1hcmtldCBhcyB0aGUgYm91bmRhcnkgZnJvbSB3aGljaCBoZQogICAgICAgICAgICAgICAgICAgIGRlY2xhcmVzIGhpbSBleGNsdWRlZDsgYW5kIHNlY29uZGx5IGZyb20gdGhlIG9ic2VydmFuY2VzIGF0IEFtcGhpY3R5b25pYwogICAgICAgICAgICAgICAgICAgIGFzc2VtYmxpZXMsIGJlY2F1c2UgdGhlIGRlY2Vhc2VkLCBpZiBhIEhlbGxlbmUsIGFsc28gdG9vayBwYXJ0IHRoZXJlaW4uCiAgICAgICAgICAgICAgICAgICAg4oCcQW5kIGZyb20gdGhlIGdhbWVzLOKAneKAlHdoeSBmcm9tIHRoZSBnYW1lcz8gQmVjYXVzZQogICAgICAgICAgICAgICAgICAgIHRoZSBhdGhsZXRpYyBjb250ZXN0cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDA3NCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDc0Ij5IZWxsYXM8L3BsYWNlTmFtZT4gYXJlCiAgICAgICAgICAgICAgICAgICAgb3BlbiB0byBhbGwgbWVuLOKAlHRoZSBzdWZmZXJlciB3YXMgY29uY2VybmVkIGluIHRoZW0gYmVjYXVzZSBldmVyeWJvZHkKICAgICAgICAgICAgICAgICAgICB3YXMgY29uY2VybmVkIGluIHRoZW07IHRoZXJlZm9yZSB0aGUgbXVyZGVyZXIgbXVzdCBhYnNlbnQgaGltc2VsZi4gPC90cmFuc2xhdGlvbj4="
translation['23.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSB0aGUgbGF3IGV4Y2x1ZGVzIHRoZSBtdXJkZXJlciBmcm9tIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHBsYWNlczsgYnV0IGlmIGFueW9uZSBwdXRzIGhpbSB0byBkZWF0aCBlbHNld2hlcmUsIG91dHNpZGUgdGhlIHBsYWNlcwogICAgICAgICAgICAgICAgICAgIHNwZWNpZmllZCwgdGhlIHNhbWUgcmV0cmlidXRpb24gaXMgcHJvdmlkZWQgYXMgd2hlbiBhbiBBdGhlbmlhbiBpcyBzbGFpbi4gSGUgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IGRlc2NyaWJlIHRoZSBmdWdpdGl2ZSBieSB0aGUgbmFtZSBvZiB0aGUgY2l0eSwgZm9yIGluIHRoYXQgbmFtZSBoZSBoYXMgbm8KICAgICAgICAgICAgICAgICAgICBwYXJ0LCBidXQgYnkgdGhhdCBvZiB0aGUgYWN0IGZvciB3aGljaCBoZSBpcyBjaGFyZ2VhYmxlLiBBY2NvcmRpbmdseSBoZSBzYXlzOgogICAgICAgICAgICAgICAgICAgIOKAnGlmIGFueSBtYW4ga2lsbCB0aGUgbXVyZGVyZXI74oCdIGFuZCBhZnRlcndhcmRzLCB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2NyaWJlZCB0aGUgcGxhY2VzIGZyb20gd2hpY2ggdGhlIG1hbiBpcyBkZWJhcnJlZCwgaGUgaW50cm9kdWNlcyB0aGUgbmFtZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBDaXR5IGZvciB0aGUgbGF3ZnVsIGFzc2lnbm1lbnQgb2YgcHVuaXNobWVudDog4oCcaGUgc2hhbGwgYmUgbGlhYmxlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgcGVuYWx0eSBhcyBpZiBoZSBraWxsZWQgYW4gQXRoZW5pYW4u4oCdIEdlbnRsZW1lbiwgdGhhdAogICAgICAgICAgICAgICAgICAgIHBocmFzZSBpcyB2ZXJ5IGRpZmZlcmVudCBmcm9tIHRoZSB3b3JkaW5nIG9mIHRoZSBkZWNyZWUgYmVmb3JlIHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgaXMgaXQgbm90IHNjYW5kYWxvdXMgdG8gcHJvcG9zZSB0aGUgc3VycmVuZGVyIG9mCiAgICAgICAgICAgICAgICAgICAgbWVuIHdob20gdGhlIGxhdyBoYXMgcGVybWl0dGVkIHRvIGdvIGludG8gZXhpbGUgYW5kIHRvIGxpdmUgaW4gc2VjdXJpdHksCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgdGhleSBhYnNlbnQgdGhlbXNlbHZlcyBmcm9tIHRoZSBwbGFjZXMgSSBoYXZlIG1lbnRpb25lZCwgYW5kIHRvIHJvYgogICAgICAgICAgICAgICAgICAgIHRoZW0gb2YgdGhhdCBiZW5lZml0IG9mIG1lcmN5IHdoaWNoIHRoZSB1bmZvcnR1bmF0ZSBtYXkganVzdGx5IGNsYWltIGZyb20gdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gYXJlIHVuY29uY2VybmVkIGluIHRoZWlyIGNyaW1lcywgYWx0aG91Z2gsIGluIG91ciBpZ25vcmFuY2Ugb2YgdGhlIGZ1dHVyZQogICAgICAgICAgICAgICAgICAgIGRlc3Rpbnkgb2YgZXZlcnkgbWFuLCBpdCBpcyB1bmNlcnRhaW4gZm9yIHdoaWNoIG9mIHVzIHRoYXQgYmVuZWZpdCBpcyBpbiBzdG9yZT8KICAgICAgICAgICAgICAgICAgICBJbiB0aGlzIGNhc2UsIGlmIHRoZSBtYW4gd2hvIHNsYXlzIENoYXJpZGVtdXMg77yIc3VwcG9zaW5nIHRoZSB0aGluZwogICAgICAgICAgICAgICAgICAgIHJlYWxseSB0byBoYXBwZW7vvIkgaXMgc2xhaW4gaW4gaGlzIHR1cm4gYnkgbWVuIHdobyBjYXB0dXJlIGhpbSBhcyBhbgogICAgICAgICAgICAgICAgICAgIG91dGNhc3QsIGFmdGVyIGhlIGhhcyBnb25lIGludG8gZXhpbGUsIGFuZCB3aGlsZSBoZSBhYnNlbnRzIGhpbXNlbGYgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFjZXMgc3BlY2lmaWVkIGluIHRoZSBsYXcsIHRoZXkgd2lsbCBiZSBsaWFibGUgdG8gYSBjaGFyZ2Ugb2YKICAgICAgICAgICAgICAgICAgICBibG9vZGd1aWx0aW5lc3Ms4oCUYW5kIHNvIHdpbGwgeW91LCBzaXIuIDwvdHJhbnNsYXRpb24+"
translation['23.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgd3JpdHRlbjog4oCcaWYgYW55IG1hbiBzaGFsbCBjYXVzZSB0byBiZQogICAgICAgICAgICAgICAgICAgIGtpbGxlZCzigJ0gYW5kIHlvdSB3aWxsIGhhdmUgY2F1c2VkLCBiZWNhdXNlIGl0IGlzIHlvdSB3aG8gaGF2ZSBncmFudGVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGxpY2VuY2UgaW1wbGllZCBpbiB5b3VyIGRlY3JlZS4gVGhlcmVmb3JlIGlmLCB3aGVuIHRoZSBldmVudCBoYXMgaGFwcGVuZWQsCiAgICAgICAgICAgICAgICAgICAgd2UgbGV0IHlvdSBhbmQgeW91ciBmcmllbmRzIGdvIGZyZWUsIHdlIHNoYWxsIGJlIGxpdmluZyBpbiB0aGUgc29jaWV0eSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB1bmhvbHksIGFuZCBvbiB0aGUgb3RoZXIgaGFuZCwgaWYgd2UgcHJvc2VjdXRlLCB3ZSBzaGFsbCBiZSBjb25zdHJhaW5lZCB0byBhY3QKICAgICAgICAgICAgICAgICAgICBpbiBvcHBvc2l0aW9uIHRvIG91ciBvd24gcmVzb2x1dGlvbi7igJRHZW50bGVtZW4sIGlzIGl0IGEgdHJpZmxpbmcgb3IgYQogICAgICAgICAgICAgICAgICAgIGNhc3VhbCByZWFzb24gdGhhdCB5b3UgaGF2ZSBmb3IgYW5udWxsaW5nIHRoaXMgZGVjcmVlPyA8L3RyYW5zbGF0aW9uPg=="
translation['23.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgbmV4dCBzdGF0dXRlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IlN0YXR1dGUiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN0YXR1dGU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgbWFuIG91dHNpZGUgdGhlIGZyb250aWVyIHB1cnN1ZSBvciB2aW9sZW50bHkgc2VpemUgdGhlIHBlcnNvbiBvZiBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgaG9taWNpZGUgd2hvIGhhcyBxdWl0dGVkIHRoZSBjb3VudHJ5LCBhbmQgd2hvc2UgZ29vZHMgYXJlIG5vdCBjb25maXNjYXRlLCBoZQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBpbmN1ciB0aGUgc2FtZSBwZW5hbHR5IGFzIGlmIGhlIHNvIGFjdGVkIHdpdGhpbiBvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yeS48L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN0YXR1dGU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgbWFuIG91dHNpZGUgdGhlIGZyb250aWVyIHB1cnN1ZSBvciB2aW9sZW50bHkgc2VpemUgdGhlIHBlcnNvbiBvZiBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgaG9taWNpZGUgd2hvIGhhcyBxdWl0dGVkIHRoZSBjb3VudHJ5LCBhbmQgd2hvc2UgZ29vZHMgYXJlIG5vdCBjb25maXNjYXRlLCBoZQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBpbmN1ciB0aGUgc2FtZSBwZW5hbHR5IGFzIGlmIGhlIHNvIGFjdGVkIHdpdGhpbiBvdXIgb3duCiAgICAgICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yeS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGVyZSBpcyBhbm90aGVyIGxhdywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaHVtYW5lbHkgYW5kIGV4Y2VsbGVudGx5CiAgICAgICAgICAgICAgICAgICAgZW5hY3RlZDsgYW5kIHRoaXMgbGF3IHRoZSBkZWZlbmRhbnQgc2hhbGwgaW4gbGlrZSBtYW5uZXIgYmUgcHJvdmVkIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICB0cmFuc2dyZXNzZWQuIDwvdHJhbnNsYXRpb24+"
translation['23.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz7igJxJZiBhbnkKICAgICAgICAgICAgICAgICAgICBtYW4s4oCdIGl0IGJlZ2lucywgYW5kIHRoZW4sIOKAnGFueSBob21pY2lkZSB3aG8gaGFzIHF1aXR0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSBhbmQgd2hvc2UgZ29vZHMgYXJlIG5vdCBjb25maXNjYXRlLOKAnSBtZWFuaW5nIGFueSBtYW4gd2hvIGhhcwogICAgICAgICAgICAgICAgICAgIG1pZ3JhdGVkIGJ5IHJlYXNvbiBvZiBpbnZvbHVudGFyeSBtYW5zbGF1Z2h0ZXIuIFRoYXQgaXMgcXVpdGUgY2xlYXIsIGJlY2F1c2UgaXQKICAgICAgICAgICAgICAgICAgICBzcGVha3Mgb2YgdGhvc2Ugd2hvIGhhdmUg4oCccXVpdHRlZCB0aGUgY291bnRyeSzigJ0gbm90IG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhdmUgZ29uZSBpbnRvIGV4aWxlLCBhbmQgYmVjYXVzZSBpdCBzcGVjaWZpZXMgcGVyc29ucyDigJx3aG9zZQogICAgICAgICAgICAgICAgICAgIGdvb2RzIGFyZSBub3QgY29uZmlzY2F0ZSzigJ0gZm9yIHRoZSBwcm9wZXJ0eSBvZiB3aWxsZnVsIG11cmRlcmVycyBpcwogICAgICAgICAgICAgICAgICAgIGZvcmZlaXRlZCB0byB0aGUgU3RhdGUuIFRoZSBsZWdpc2xhdG9yLCBJIHNheSwgaXMgc3BlYWtpbmcgb2YgaW52b2x1bnRhcnkKICAgICAgICAgICAgICAgICAgICBvZmZlbmRlcnMuIFRvIHdoYXQgcHVycG9ydD8gPC90cmFuc2xhdGlvbj4="
translation['23.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5JZiB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgIHB1cnN1ZWQgb3IgdmlvbGVudGx5IHNlaXplZCwgaGUgc2F5cywg4oCcb3V0c2lkZSB0aGUKICAgICAgICAgICAgICAgICAgICBmcm9udGllci7igJ0gV2hhdCBpcyB0aGUgc2lnbmlmaWNhbmNlIG9mIOKAnG91dHNpZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgZnJvbnRpZXLigJ0/IEZvciBhbGwgaG9taWNpZGVzIGFsaWtlIHRoZSDigJxmcm9udGllcuKAnQogICAgICAgICAgICAgICAgICAgIGltcGxpZXMgZXhjbHVzaW9uIGZyb20gdGhlIGNvdW50cnkgb2YgdGhlIHBlcnNvbiBzbGFpbi4gRnJvbSB0aGF0IGNvdW50cnkgaGUKICAgICAgICAgICAgICAgICAgICBwZXJtaXRzIHRoZW0gdG8gYmUgcHVyc3VlZCBhbmQgc2VpemVkOyBidXQgb3V0c2lkZSBvZiBpdCBoZSBwZXJtaXRzIG5laXRoZXIKICAgICAgICAgICAgICAgICAgICBzZWl6dXJlIG5vciBwdXJzdWl0LiBGb3IgYW55b25lIHdobyBjb250cmF2ZW5lcyB0aGlzIHJ1bGUgaGUgb3JkZXJzIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgcHVuaXNobWVudCBhcyBpZiBoZSBoYWQgZG9uZSB0aGUgbWFuIHdyb25nIGF0IGhvbWUsIGluIHRoZSB3b3JkcywKICAgICAgICAgICAgICAgICAgICDigJxzaGFsbCBpbmN1ciB0aGUgc2FtZSBwZW5hbHR5IGFzIGlmIGhlIGhhZCBzbyBhY3RlZCBhdAogICAgICAgICAgICAgICAgICAgIGhvbWUu4oCdIDwvdHJhbnNsYXRpb24+"
translation['23.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgc3VwcG9zZSB0aGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgQXJpc3RvY3JhdGVzIHdlcmUgYXNrZWQs4oCUeW91IG11c3Qgbm90IHRoaW5rIGl0IGEgc2lsbHkKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbuKAlGZpcnN0IGlmIGhlIGtub3dzIHdoZXRoZXIgQ2hhcmlkZW11cyB3aWxsIGJlIGtpbGxlZCBieQogICAgICAgICAgICAgICAgICAgIHNvbWVvbmUsIG9yIHdpbGwgZGllIGluIHNvbWUgb3RoZXIgd2F5LiBIZSB3b3VsZCByZXBseSwgSSB0YWtlIGl0LCB0aGF0IGhlIGRvZXMKICAgICAgICAgICAgICAgICAgICBub3Qga25vdy4gSG93ZXZlciwgd2Ugd2lsbCBwcmVzdW1lIHRoYXQgc29tZWJvZHkgd2lsbCBraWxsIGhpbS4gTmV4dCBxdWVzdGlvbjoKICAgICAgICAgICAgICAgICAgICB3aWxsIHRoZSBtYW4gd2hvIGlzIHRvIGRvIGl0IGJlIGEgdm9sdW50YXJ5IG9yIGFuIGludm9sdW50YXJ5IGFnZW50LCBhbiBhbGllbiBvcgogICAgICAgICAgICAgICAgICAgIGEgY2l0aXplbizigJRkbyB5b3Uga25vdywgQXJpc3RvY3JhdGVzPyBZb3UgY2Fubm90IHNheSB0aGF0IHlvdSBkbyBrbm93LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIG9mIGNvdXJzZSB5b3Ugb3VnaHQgdG8gaGF2ZSBzdXBwbGllZAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHBhcnRpY3VsYXJzLCBhbmQgd3JpdHRlbiwg4oCcaWYgYW55IG1hbiwgd2hldGhlciBhbGllbiBvciBjaXRpemVuLAogICAgICAgICAgICAgICAgICAgIHNoYWxsIGtpbGwsIHdpdGggb3Igd2l0aG91dCBpbnRlbnRpb24sIHJpZ2h0ZnVsbHkgb3Igd3JvbmdmdWxseSzigJ0gaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciB0aGF0IGFueSBtYW4gc29ldmVyLCBieSB3aG9tIHRoZSBkZWVkIHNob3VsZCBoYXZlIGJlZW4gZG9uZSwgbWlnaHQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGhpcyBkZXNlcnRzIGFjY29yZGluZyB0byBsYXc7IGJ1dCBhc3N1cmVkbHksIGFmdGVyIG1lcmVseSBuYW1pbmcgYW4KICAgICAgICAgICAgICAgICAgICBhY2N1c2F0aW9uLCB5b3Ugb3VnaHQgbm90IHRvIGhhdmUgYWRkZWQsIOKAnGhlIHNoYWxsIGJlIGxpYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHNlaXp1cmUu4oCdIFdoYXQgYm91bmRhcnkgaGF2ZSB5b3UgbGVmdCBpbiB0aGlzIGNsYXVzZT8gPC90cmFuc2xhdGlvbj4="
translation['23.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgdGhlIGxhdyBkaXN0aW5jdGx5IHByb3ZpZGVzIHRoYXQgYmV5b25kIHRoZQogICAgICAgICAgICAgICAgICAgIGZyb250aWVyIGEgbWFuIHNoYWxsIG5vdCBiZSBwdXJzdWVkLCB3aGVyZWFzIHlvdSBwZXJtaXQgaGltIHRvIGJlIHNlaXplZAogICAgICAgICAgICAgICAgICAgIGFueXdoZXJlLiBCZXlvbmQgdGhlIGZyb250aWVyIHRoZSBsYXcgZm9yYmlkcyBub3Qgb25seSBwdXJzdWl0IGJ1dCBhbHNvIHNlaXp1cmU7CiAgICAgICAgICAgICAgICAgICAgYW5kIHlldCBhY2NvcmRpbmcgdG8geW91ciBkZWNyZWUgYW55b25lIHdobyBjaG9vc2VzIHdpbGwgdGFrZSBhcyBhbiBvdXRjYXN0IGFuZAogICAgICAgICAgICAgICAgICAgIGZvcmNpYmx5IHNlaXplIGEgbWFuIHdobyBoYXMgc2xhaW4gd2l0aG91dCBpbnRlbnRpb24sIGFuZCBjYXJyeSBoaW0gYnkgdmlvbGVuY2UKICAgICAgICAgICAgICAgICAgICBpbnRvIHRoZSBjb3VudHJ5IG9mIHRoZSBzbGFpbiBtYW4uIEFyZSB5b3Ugbm90IHRyZWF0aW5nIGh1bWFuIGNvbmR1Y3QKICAgICAgICAgICAgICAgICAgICBpbmRpc2NyaW1pbmF0ZWx5LCBhbmQgaWdub3JpbmcgdGhlIG1vdGl2ZXMgYWNjb3JkaW5nIHRvIHdoaWNoIGEgZ2l2ZW4gYWN0IGlzCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHZpcnR1b3VzIG9yIGltbW9yYWw/4oCUIDwvdHJhbnNsYXRpb24+"
translation['23.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5PYnNlcnZlLCBnZW50bGVtZW4sIHRoYXQgdGhpcyBpcyBhIHVuaXZlcnNhbCBkaXN0aW5jdGlvbjogaXQgZG9lcyBub3QgYXBwbHkKICAgICAgICAgICAgICAgICAgICBvbmx5IHRvIHF1ZXN0aW9ucyBvZiBob21pY2lkZS4g4oCcSWYgYSBtYW4gc3RyaWtlIGFub3RoZXIsIGdpdmluZyB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBibG93LOKAnSBzYXlzIHRoZSBsYXcuIFRoZSBpbXBsaWNhdGlvbiBpcyB0aGF0IGhlIGlzIG5vdCBndWlsdHksCiAgICAgICAgICAgICAgICAgICAgaWYgdGhlIGJsb3cgd2FzIGRlZmVuc2l2ZS4g4oCcSWYgYSBtYW4gcmV2aWxlCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlcizigJ3igJTigJx3aXRoIGZhbHNlIGhvb2RzLOKAnSB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgYWRkcywgaW1wbHlpbmcgdGhhdCwgaWYgaGUgc3BlYWtzIHRoZSB0cnV0aCwgaGUgaXMganVzdGlmaWVkLiDigJxJZiBhCiAgICAgICAgICAgICAgICAgICAgbWFuIHNsYXkgYW5vdGhlciB3aXRoIG1hbGljZSBhZm9yZXRob3VnaHQs4oCd4oCUaW5kaWNhdGluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IHRoZSBzYW1lIHRoaW5nIGlmIGhlIGRvZXMgaXQgdW5pbnRlbnRpb25hbGx5LiDigJxJZiBhIG1hbgogICAgICAgICAgICAgICAgICAgIGluanVyZXMgYW5vdGhlciB3aXRoIGludGVudGlvbiwgd3JvbmdmdWxseS7igJ0gRXZlcnl3aGVyZSB3ZSBzaGFsbCBmaW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCBpcyB0aGUgbW90aXZlIHRoYXQgZml4ZXMgdGhlIGNoYXJhY3RlciBvZiB0aGUgYWN0LiBCdXQgbm90IHdpdGggeW91OiB5b3UKICAgICAgICAgICAgICAgICAgICBzYXksIHdpdGhvdXQgcXVhbGlmaWNhdGlvbiwg4oCcaWYgYW55IG1hbiBzbGF5IENoYXJpZGVtdXMsIGhlIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgc2VpemVkLOKAnSB0aG91Z2ggaGUgZG8gaXQgdW53aXR0aW5nbHksIG9yIHJpZ2h0ZW91c2x5LCBvciBpbgogICAgICAgICAgICAgICAgICAgIHNlbGYtZGVmZW5jZSwgb3IgZm9yIGEgcHVycG9zZSBwZXJtaXR0ZWQgYnkgbGF3LCBvciBpbiBhbnkgd2F5IHdoYXRzb2V2ZXIuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0dXRlIHRoYXQgY29tZXMgbmV4dC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vIG1hbiBzaGFsbCBiZSBsaWFibGUgdG8gcHJvY2VlZGluZ3MgZm9yIG11cmRlciBiZWNhdXNlIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxheXMgaW5mb3JtYXRpb24gYWdhaW5zdCBleGlsZXMsIGlmIGFueSBzdWNoIGV4aWxlIHJldHVybiB0byBhIHByb2hpYml0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2UuPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5ObyBtYW4gc2hhbGwgYmUgbGlhYmxlIHRvIHByb2NlZWRpbmdzIGZvciBtdXJkZXIgYmVjYXVzZSBoZQogICAgICAgICAgICAgICAgICAgICAgICBsYXlzIGluZm9ybWF0aW9uIGFnYWluc3QgZXhpbGVzLCBpZiBhbnkgc3VjaCBleGlsZSByZXR1cm4gdG8gYSBwcm9oaWJpdGVkCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIHN0YXR1dGUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGxpa2UgYWxsIHRoZSBvdGhlciBleGNlcnB0cyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhdyBvZiBob21pY2lkZSB3aGljaCBJIGhhdmUgY2l0ZWQgZm9yIGNvbXBhcmlzb24sIGlzIGEgc3RhdHV0ZSBvZiBEcmFjbzsKICAgICAgICAgICAgICAgICAgICBhbmQgeW91IG11c3QgcGF5IGF0dGVudGlvbiB0byBoaXMgbWVhbmluZy4g4oCcTm8gbWFuIGlzIHRvIGJlIGxpYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHByb3NlY3V0aW9uIGZvciBtdXJkZXIgZm9yIGxheWluZyBpbmZvcm1hdGlvbiBhZ2FpbnN0IG1hbnNsYXllcnMgd2hvIHJldHVybiBmcm9tCiAgICAgICAgICAgICAgICAgICAgZXhpbGUgaWxsZWdhbGx5LuKAnSBIZXJlaW4gaGUgZXhoaWJpdHMgdHdvIHByaW5jaXBsZXMgb2YganVzdGljZSwgYm90aAogICAgICAgICAgICAgICAgICAgIG9mIHdoaWNoIGhhdmUgYmVlbiB0cmFuc2dyZXNzZWQgYnkgdGhlIGRlZmVuZGFudCBpbiBoaXMgZGVjcmVlLiBJbiB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgdGhvdWdoIGhlIGFsbG93cyBpbmZvcm1hdGlvbiB0byBiZSBsYWlkIGFnYWluc3QgdGhlIGhvbWljaWRlLCBoZSBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIGFsbG93IGhpbSB0byBiZSBzZWl6ZWQgYW5kIGNhcnJpZWQgb2ZmOyBhbmQgc2Vjb25kbHksIGhlIGFsbG93cyBpdCBvbmx5IGlmIGFuCiAgICAgICAgICAgICAgICAgICAgZXhpbGUgcmV0dXJucywgbm90IHRvIGFueSBwbGFjZSwgYnV0IHRvIGEgcHJvaGliaXRlZCBwbGFjZS4gPC90cmFuc2xhdGlvbj4="
translation['23.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlIHByb2hpYml0ZWQgcGxhY2UgaXMgdGhlIGNpdHkgZnJvbSB3aGljaCBoZSBoYXMgZ29uZQogICAgICAgICAgICAgICAgICAgIGludG8gZXhpbGUuIFRoYXQgdGhlIGxhdyBtYWtlcyB2ZXJ5IGNsZWFyIGluZGVlZCB3aGVuIGl0IHNheXMsIOKAnGlmIGFueQogICAgICAgICAgICAgICAgICAgIG1hbiByZXR1cm4s4oCd4oCUYSB3b3JkIHRoYXQgY2Fubm90IGJlIHVzZWQgaW4gcmVsYXRpb24gdG8gYW55CiAgICAgICAgICAgICAgICAgICAgb3RoZXIgY2l0eSBleGNlcHQgdGhhdCBmcm9tIHdoaWNoIGhlIGhhcyBmbGVkOyBmb3Igb2YgY291cnNlIGEgbWFuIGNhbm5vdCByZXR1cm4KICAgICAgICAgICAgICAgICAgICBmcm9tIGV4aWxlIHRvIGEgcGxhY2UgZnJvbSB3aGljaCBoZSB3YXMgbmV2ZXIgZXhwZWxsZWQuIFdoYXQgaXMgYWxsb3dlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0dXRlIGlzIGFuIGluZm9ybWF0aW9uLCBhbmQgdGhhdCBvbmx5IGluIGNhc2Ugb2YgcmV0dXJuIHRvIGEgcHJvaGliaXRlZAogICAgICAgICAgICAgICAgICAgIHBsYWNlOyB3aGVyZWFzIEFyaXN0b2NyYXRlcyBoYXMgcHJvcG9zZWQgdGhhdCBhIG1hbiBzaGFsbCBiZSBsaWFibGUgdG8gc2VpenVyZQogICAgICAgICAgICAgICAgICAgIGV2ZW4gaW4gcGxhY2VzIHdoZXJlIHRoZSBsYXcgZG9lcyBub3QgZm9yYmlkIGhpbSB0byB0YWtlIHJlZnVnZS4gPC90cmFuc2xhdGlvbj4="
translation['23.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1dGUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhIG1hbiBraWxsIGFub3RoZXIgdW5pbnRlbnRpb25hbGx5IGluIGFuIGF0aGxldGljIGNvbnRlc3QsIG9yCiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJjb21pbmcgaGltIGluIGEgZmlnaHQgb24gdGhlIGhpZ2h3YXksIG9yIHVud2l0dGluZ2x5IGluIGJhdHRsZSwgb3IgaW4KICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJjb3Vyc2Ugd2l0aCBoaXMgd2lmZSwgb3IgbW90aGVyLCBvciBzaXN0ZXIsIG9yIGRhdWdodGVyLCBvciBjb25jdWJpbmUKICAgICAgICAgICAgICAgICAgICAgICAga2VwdCBmb3IgcHJvY3JlYXRpb24gb2YgbGVnaXRpbWF0ZSBjaGlsZHJlbiwgaGUgc2hhbGwgbm90IGdvIGludG8gZXhpbGUgYXMgYQogICAgICAgICAgICAgICAgICAgICAgICBtYW5zbGF5ZXIgb24gdGhhdCBhY2NvdW50LjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgYSBtYW4ga2lsbCBhbm90aGVyIHVuaW50ZW50aW9uYWxseSBpbiBhbiBhdGhsZXRpYyBjb250ZXN0LCBvcgogICAgICAgICAgICAgICAgICAgICAgICBvdmVyY29taW5nIGhpbSBpbiBhIGZpZ2h0IG9uIHRoZSBoaWdod2F5LCBvciB1bndpdHRpbmdseSBpbiBiYXR0bGUsIG9yIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyY291cnNlIHdpdGggaGlzIHdpZmUsIG9yIG1vdGhlciwgb3Igc2lzdGVyLCBvciBkYXVnaHRlciwgb3IgY29uY3ViaW5lCiAgICAgICAgICAgICAgICAgICAgICAgIGtlcHQgZm9yIHByb2NyZWF0aW9uIG9mIGxlZ2l0aW1hdGUgY2hpbGRyZW4sIGhlIHNoYWxsIG5vdCBnbyBpbnRvIGV4aWxlIGFzIGEKICAgICAgICAgICAgICAgICAgICAgICAgbWFuc2xheWVyIG9uIHRoYXQgYWNjb3VudC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWFueQogICAgICAgICAgICAgICAgICAgIHN0YXR1dGVzIGhhdmUgYmVlbiB2aW9sYXRlZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaW4gdGhlIGRyYWZ0aW5nIG9mIHRoaXMgZGVjcmVlLCBidXQgbm9uZSBtb3JlIGdyYXZlbHkKICAgICAgICAgICAgICAgICAgICB0aGFuIHRoYXQgd2hpY2ggaGFzIGp1c3QgYmVlbiByZWFkLiBUaG91Z2ggdGhlIGxhdyBzbyBjbGVhcmx5IGdpdmVzIHBlcm1pc3Npb24KICAgICAgICAgICAgICAgICAgICB0byBzbGF5LCBhbmQgc3RhdGVzIHVuZGVyIHdoYXQgY29uZGl0aW9ucywgdGhlIGRlZmVuZGFudCBpZ25vcmVzIGFsbCB0aG9zZQogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMsIGFuZCBoYXMgZHJhd24gaGlzIHBlbmFsIGNsYXVzZSB3aXRob3V0IGFueSBzdWdnZXN0aW9uIGFzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbm5lciBvZiB0aGUgc2xheWluZy4gPC90cmFuc2xhdGlvbj4="
translation['23.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgbWFyayBob3cKICAgICAgICAgICAgICAgICAgICByaWdodGVvdXNseSBhbmQgYWRtaXJhYmx5IHRoZXNlIGRpc3RpbmN0aW9ucyBhcmUgc2V2ZXJhbGx5IGRlZmluZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3Z2l2ZXIgd2hvIGRlZmluZWQgdGhlbSBvcmlnaW5hbGx5LiDigJxJZiBhIG1hbiBraWxsIGFub3RoZXIgaW4gYW4KICAgICAgICAgICAgICAgICAgICBhdGhsZXRpYyBjb250ZXN0LOKAnSBoZSBkZWNsYXJlZCBoaW0gdG8gYmUgbm90IGd1aWx0eSwgZm9yIHRoaXMgcmVhc29uLAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFkIHJlZ2FyZCBub3QgdG8gdGhlIGV2ZW50IGJ1dCB0byB0aGUgaW50ZW50aW9uIG9mIHRoZSBhZ2VudC4gVGhhdAogICAgICAgICAgICAgICAgICAgIGludGVudGlvbiBpcywgbm90IHRvIGtpbGwgaGlzIG1hbiwgYnV0IHRvIHZhbnF1aXNoIGhpbSB1bnNsYWluLiBJZiB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBjb21iYXRhbnQgd2FzIHRvbyB3ZWFrIHRvIHN1cHBvcnQgdGhlIHN0cnVnZ2xlIGZvciB2aWN0b3J5LCBoZSBjb25zaWRlcmVkIGhpbQogICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpYmxlIGZvciBoaXMgb3duIGZhdGUsIGFuZCB0aGVyZWZvcmUgcHJvdmlkZWQgbm8gcmV0cmlidXRpb24gb24gaGlzCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudC4gPC90cmFuc2xhdGlvbj4="
translation['23.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2Fpbiwg4oCcaWYgaW4gYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgdW53aXR0aW5nbHnigJ3igJR0aGUgbWFuIHdobyBzbyBzbGF5cyBpcyBmcmVlIG9mCiAgICAgICAgICAgICAgICAgICAgYmxvb2RndWlsdGluZXNzLiBHb29kOiBJZiBJIGhhdmUgZGVzdHJveWVkIGEgbWFuIHN1cHBvc2luZyBoaW0gdG8gYmUgb25lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZW15LCBJIGRlc2VydmUsIG5vdCB0byBzdGFuZCB0cmlhbCwgYnV0IHRvIGJlIGZvcmdpdmVuLiDigJxPciBpbgogICAgICAgICAgICAgICAgICAgIGludGVyY291cnNlIHdpdGggaGlzIHdpZmUsIG9yIG1vdGhlciwgb3Igc2lzdGVyLCBvciBkYXVnaHRlciwgb3IgY29uY3ViaW5lIGtlcHQKICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIHByb2NyZWF0aW9uIG9mIGxlZ2l0aW1hdGUgY2hpbGRyZW4u4oCdIEhlIGxldHMgdGhlIG1hbiB3aG8gc2xheXMKICAgICAgICAgICAgICAgICAgICBvbmUgc28gdHJlYXRpbmcgYW55IG9mIHRoZXNlIHdvbWVuIGdvIHNjb3QtZnJlZTsgYW5kIHRoYXQgYWNxdWl0dGFsLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpcyB0aGUgbW9zdCByaWdodGVvdXMgb2YKICAgICAgICAgICAgICAgICAgICBhbGwuIDwvdHJhbnNsYXRpb24+"
translation['23.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5XaHk/IEJlY2F1c2UgaW4gdGhlIGRlZmVuY2Ugb2YgdGhvc2UgZm9yCiAgICAgICAgICAgICAgICAgICAgd2hvc2Ugc2FrZSB3ZSBmaWdodCBvdXIgZW5lbWllcywgdG8gc2F2ZSB0aGVtIGZyb20gaW5kaWduaXR5IGFuZCBsaWNlbnRpb3VzbmVzcywKICAgICAgICAgICAgICAgICAgICBoZSBwZXJtaXR0ZWQgdXMgdG8gc2xheSBldmVuIG91ciBmcmllbmRzLCBpZiB0aGV5IGluc3VsdCB0aGVtIGFuZCBkZWZpbGUgdGhlbSBpbgogICAgICAgICAgICAgICAgICAgIGRlZmlhbmNlIG9mIGxhdy4gTWVuIGFyZSBub3Qgb3VyIGZyaWVuZHMgYW5kIG91ciBmb2VzIGJ5IG5hdHVyYWwgZ2VuZXJhdGlvbjoKICAgICAgICAgICAgICAgICAgICB0aGV5IGFyZSBtYWRlIHN1Y2ggYnkgdGhlaXIgb3duIGFjdGlvbnM7IGFuZCB0aGUgbGF3IGdpdmVzIHVzIGZyZWVkb20gdG8KICAgICAgICAgICAgICAgICAgICBjaGFzdGlzZSBhcyBlbmVtaWVzIHRob3NlIHdob3NlIGFjdHMgYXJlIGhvc3RpbGUuIFdoZW4gdGhlcmUgYXJlIHNvIG1hbnkKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zIHRoYXQganVzdGlmeSB0aGUgc2xheWluZyBvZiBhbnlvbmUgZWxzZSwgaXQgaXMgbW9uc3Ryb3VzIHRoYXQgdGhhdAogICAgICAgICAgICAgICAgICAgIG1hbiBzaG91bGQgYmUgdGhlIG9ubHkgbWFuIGluIHRoZSB3b3JsZCB3aG9tLCBldmVuIHVuZGVyIHRob3NlIGNvbmRpdGlvbnMsIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgdW5sYXdmdWwgdG8gc2xheS4gPC90cmFuc2xhdGlvbj4="
translation['23.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5MZXQgdXMgc3VwcG9zZSB0aGF0IGEKICAgICAgICAgICAgICAgICAgICBmYXRlIHRoYXQgaGFzIGRvdWJ0bGVzcyBiZWZhbGxlbiBvdGhlcnMgYmVmb3JlIG5vdyBzaG91bGQgYmVmYWxsCiAgICAgICAgICAgICAgICAgICAgaGlt4oCUdGhhdCBoZSBzaG91bGQgd2l0aGRyYXcgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4gYW5kIGNvbWUgYW5kIGxpdmUgc29tZXdoZXJlIGluIGEgY2l2aWxpemVkIGNvbW11bml0eTsKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCwgdGhvdWdoIG5vIGxvbmdlciBlbmpveWluZyB0aGUgbGljZW5jZSB1bmRlciB3aGljaCBoZSBub3cgY29tbWl0cyBtYW55CiAgICAgICAgICAgICAgICAgICAgaWxsZWdhbGl0aWVzLCBoZSBzaG91bGQgYmUgZHJpdmVuIGJ5IGhpcyBoYWJpdHMgYW5kIGhpcyBsdXN0cyB0byBhdHRlbXB0IHRoZQogICAgICAgICAgICAgICAgICAgIHNvcnQgb2YgYmVoYXZpb3IgSSBoYXZlIG1lbnRpb25lZCwgd2lsbCBub3QgYSBtYW4gYmUgb2JsaWdlZCB0byBhbGxvdyBoaW1zZWxmIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgaW5zdWx0ZWQgYnkgQ2hhcmlkZW11cyBpbiBzaWxlbmNlPyBJdCB3aWxsIG5vdCBiZSBzYWZlIHRvIHB1dCBoaW0gdG8gZGVhdGgsCiAgICAgICAgICAgICAgICAgICAgbm9yLCBieSByZWFzb24gb2YgdGhpcyBkZWNyZWUsIHRvIG9idGFpbiB0aGUgc2F0aXNmYWN0aW9uIHByb3ZpZGVkIGJ5IGxhdy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5JZiBhbnlvbmUgaW50ZXJydXB0cyBtZSB3aXRoIGEgcXVlc3Rpb24sCiAgICAgICAgICAgICAgICAgICAg4oCcQW5kIHdoZXJlLCBwcmF5LCBhcmUgc3VjaCB0aGluZ3MgbGlrZWx5IHRvIGhhcHBlbj/igJ0gdGhlcmUKICAgICAgICAgICAgICAgICAgICBpcyBub3RoaW5nIHRvIHByZXZlbnQgbWUgZnJvbSBhc2tpbmcsIOKAnEFuZCB3aG8gaXMgbGlrZWx5IHRvIGtpbGwKICAgICAgICAgICAgICAgICAgICBDaGFyaWRlbXVzP+KAnSBXZWxsLCB3ZSBuZWVkIG5vdCBnbyBpbnRvIHRob3NlIHF1ZXN0aW9uczsgb25seSwgaW5hc211Y2gKICAgICAgICAgICAgICAgICAgICBhcyB0aGUgZGVjcmVlIG5vdyBvbiB0cmlhbCByZWZlcnMsIG5vdCB0byBhbnkgcGFzdCB0cmFuc2FjdGlvbiwgYnV0IHRvIHNvbWV0aGluZwogICAgICAgICAgICAgICAgICAgIG9mIHdoaWNoIG5vYm9keSBrbm93cyB3aGV0aGVyIGl0IHdpbGwgaGFwcGVuIG9yIG5vdCwgbGV0IHRoZSB1bmNlcnRhaW50eSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmdXR1cmUgYmUgY29tbW9uIGdyb3VuZCB0byBib3RoIHNpZGVzOyBsZXQgdXMsIGFzIG1hbmtpbmQgYXJlIHdvbnQsIGFkanVzdCBvdXIKICAgICAgICAgICAgICAgICAgICBleHBlY3RhdGlvbnMgdGhlcmV0bywgYW5kIGNvbnNpZGVyIHRoZSBtYXR0ZXIgb24gdGhlIHByZXN1bXB0aW9uIHRoYXQgYm90aCB0aGUKICAgICAgICAgICAgICAgICAgICBvbmUgY29udGluZ2VuY3kgYW5kIHRoZSBvdGhlciBtYXkgcG9zc2libHkgaGFwcGVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgaWYgeW91IGFubnVsIHRoZSBkZWNyZWUsIHNob3VsZCBhbnl0aGluZyBoYXBwZW4gdG8KICAgICAgICAgICAgICAgICAgICBDaGFyaWRlbXVzLCB0aGUgbGVnaXRpbWF0ZSBtZWFucyBvZiBhdmVuZ2luZyBoaW0gYXJlIHN0aWxsIHRoZXJlLiBPbiB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBoYW5kLCBpZiB5b3UgbGV0IGl0IHN0YW5kLCBhbmQgaWYgYmVmb3JlIGhlIGRpZXMgaGUgbWFsdHJlYXRzIGFueSBtYW4sIHRoZSBtYW4KICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGluc3VsdHMgaGFzIGJlZW4gZGVmcmF1ZGVkIG9mIGhpcyBsZWdhbCByZW1lZHkuIFRoZXJlZm9yZSBvbiBldmVyeQogICAgICAgICAgICAgICAgICAgIGdyb3VuZCB0aGUgZGVjcmVlIGlzIGNvbnRyYXJ5IHRvIGxhdywgYW5kIG91Z2h0IHRvIGJlIGFubnVsbGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgbmV4dAogICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXRlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgYW55IG1hbiB3aGlsZSB2aW9sZW50bHkgYW5kIGlsbGVnYWxseSBzZWl6aW5nIGFub3RoZXIgc2hhbGwgYmUgc2xhaW4KICAgICAgICAgICAgICAgICAgICAgICAgc3RyYWlnaHR3YXkgaW4gc2VsZi1kZWZlbmNlLCB0aGVyZSBzaGFsbCBiZSBubyBwZW5hbHR5IGZvciBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgZGVhdGguPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnkgbWFuIHdoaWxlIHZpb2xlbnRseSBhbmQgaWxsZWdhbGx5IHNlaXppbmcgYW5vdGhlciBzaGFsbCBiZSBzbGFpbgogICAgICAgICAgICAgICAgICAgICAgICBzdHJhaWdodHdheSBpbiBzZWxmLWRlZmVuY2UsIHRoZXJlIHNoYWxsIGJlIG5vIHBlbmFsdHkgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBkZWF0aC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGVyZSBhcmUgb3RoZXIgY29uZGl0aW9ucyBvZgogICAgICAgICAgICAgICAgICAgIGxhd2Z1bCBob21pY2lkZS4gSWYgYW55IG1hbiwgd2hpbGUgdmlvbGVudGx5IGFuZCBpbGxlZ2FsbHkgc2VpemluZyBhbm90aGVyLAogICAgICAgICAgICAgICAgICAgIHNoYWxsIGJlIHN0cmFpZ2h0d2F5IHNsYWluIGluIHNlbGYtZGVmZW5jZSwgdGhlIGxlZ2lzbGF0b3Igb3JkYWlucyB0aGF0IHRoZXJlCiAgICAgICAgICAgICAgICAgICAgc2hhbGwgYmUgbm8gcGVuYWx0eSBmb3IgaGlzIGRlYXRoLiBJIGJlZyB5b3UgdG8gb2JzZXJ2ZSB0aGUgd2lzZG9tIG9mIHRoaXMgbGF3LgogICAgICAgICAgICAgICAgICAgIEJ5IGFkZGluZyB0aGUgd29yZCDigJxzdHJhaWdodHdheeKAnSBhZnRlciBpbmRpY2F0aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMgb2YgbGF3ZnVsIGhvbWljaWRlLCB0aGUgbGVnaXNsYXRvciBoYXMgZXhjbHVkZWQgYW55IGxvbmcKICAgICAgICAgICAgICAgICAgICBwcmVtZWRpdGF0aW9uIG9mIGluanVyeSBhbmQgYnkgdGhlIGV4cHJlc3Npb24sIOKAnGluCiAgICAgICAgICAgICAgICAgICAgc2VsZi1kZWZlbmNlLOKAnSBoZSBtYWtlcyBpdCBjbGVhciB0aGF0IGhlIGlzIGdpdmluZyBpbmR1bGdlbmNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGFjdHVhbCBzdWZmZXJlciwgYW5kIHRvIG5vIG90aGVyIG1hbi4gVGh1cyB0aGUgbGF3IHBlcm1pdHMgaG9taWNpZGUgaW4gaW1tZWRpYXRlCiAgICAgICAgICAgICAgICAgICAgc2VsZi1kZWZlbmNlOyBidXQgQXJpc3RvY3JhdGVzIGhhcyBtYWRlIG5vIHN1Y2ggZXhjZXB0aW9uLiBIZSBzYXlzLCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgcXVhbGlmaWNhdGlvbiwg4oCcaWYgYW55b25lIGV2ZXIga2lsbHMs4oCd4oCUdGhhdCBpcywKICAgICAgICAgICAgICAgICAgICBldmVuIGlmIGhlIGtpbGwgcmlnaHRlb3VzbHksIG9yIGFzIHRoZSBsYXdzIHBlcm1pdC4gPC90cmFuc2xhdGlvbj4="
translation['23.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5JIHNoYWxsIGJlIHRvbGQgdGhhdCB0aGlzIGlzIGEgcXVpYmJsZSBvZiBvdXJzOyB3aG8gd2lsbAogICAgICAgICAgICAgICAgICAgIGV2ZXIgYmUg4oCcdmlvbGVudGx5IGFuZCBpbGxlZ2FsbHkgc2VpemVk4oCdIGJ5IENoYXJpZGVtdXM/CiAgICAgICAgICAgICAgICAgICAgRXZlcnlib2R5LiBTdXJlbHkgeW91IGFyZSBhd2FyZSB0aGF0IGFueSBtYW4gd2hvIGhhcyB0cm9vcHMgYXQgY29tbWFuZCBsYXlzCiAgICAgICAgICAgICAgICAgICAgaGFuZHMgb24gd2hvbXNvZXZlciBoZSB0aGlua3MgaGUgY2FuIG92ZXJwb3dlciwgZGVtYW5kaW5nIHJhbnNvbS4gSGVhdmVuIGFuZAogICAgICAgICAgICAgICAgICAgIEVhcnRoISBJcyBpdCBub3QgbW9uc3Ryb3VzLCBpcyBpdCBub3QgbWFuaWZlc3RseSBjb250cmFyeSB0byBsYXcs4oCUSSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCBtZWFuIG1lcmVseSB0byB0aGUgc3RhdHV0ZSBsYXcgYnV0IHRvIHRoZSB1bndyaXR0ZW4gbGF3IG9mIG91ciBjb21tb24KICAgICAgICAgICAgICAgICAgICBodW1hbml0eSzigJR0aGF0IEkgc2hvdWxkIG5vdCBiZSBwZXJtaXR0ZWQgdG8gZGVmZW5kIG15c2VsZiBhZ2FpbnN0IG9uZQogICAgICAgICAgICAgICAgICAgIHdobyB2aW9sZW50bHkgc2VpemVzIG15IGdvb2RzIGFzIHRob3VnaCBJIHdlcmUgYW4gZW5lbXk/IEFuZCB0aGF0IHdpbGwgYmUgc28sIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlIHNsYXlpbmcgb2YgQ2hhcmlkZW11cyBpcyBmb3JiaWRkZW4gZXZlbiBvbiB0aG9zZSB0ZXJtcyzigJRpZiBldmVuCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIGhlIGJlIGluaXF1aXRvdXNseSBwbHVuZGVyaW5nIGFub3RoZXIgbWFuJ3MgcHJvcGVydHksIGhpcyBzbGF5ZXIgaXMgdG8gYmUKICAgICAgICAgICAgICAgICAgICBsaWFibGUgdG8gc2VpenVyZSwgdGhvdWdoIHRoZSBzdGF0dXRlIG9yZGFpbnMgdGhhdCBoZSB3aG8gdGFrZXMgbGlmZSB1bmRlciBzdWNoCiAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9ucyBzaGFsbCBoYXZlIGltcHVuaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgbmV4dCBzdGF0dXRlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hvc29ldmVyLCB3aGV0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhdGUgb3IgcHJpdmF0ZSBjaXRpemVuLCBzaGFsbCBjYXVzZSB0aGlzIG9yZGluYW5jZSB0byBiZSBmcnVzdHJhdGVkLAogICAgICAgICAgICAgICAgICAgICAgICBvciBzaGFsbCBhbHRlciB0aGUgc2FtZSwgc2hhbGwgYmUgZGlzZnJhbmNoaXNlZCB3aXRoIGhpcyBjaGlsZHJlbiBhbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hvc29ldmVyLCB3aGV0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIG1hZ2lzdHJhdGUgb3IgcHJpdmF0ZSBjaXRpemVuLCBzaGFsbCBjYXVzZSB0aGlzIG9yZGluYW5jZSB0byBiZSBmcnVzdHJhdGVkLAogICAgICAgICAgICAgICAgICAgICAgICBvciBzaGFsbCBhbHRlciB0aGUgc2FtZSwgc2hhbGwgYmUgZGlzZnJhbmNoaXNlZCB3aXRoIGhpcyBjaGlsZHJlbiBhbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Zb3UgaGF2ZSBoZWFyZCB0aGUgc3RhdHV0ZSwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBkZWNsYXJpbmcgaW4gcGxhaW4KICAgICAgICAgICAgICAgICAgICB0ZXJtcyB0aGF0IOKAnHdob3NvZXZlciwgd2hldGhlciBtYWdpc3RyYXRlIG9yIHByaXZhdGUgY2l0aXplbiwgc2hhbGwKICAgICAgICAgICAgICAgICAgICBjYXVzZSB0aGlzIG9yZGluYW5jZSB0byBiZSBmcnVzdHJhdGVkIG9yIHNoYWxsIGFsdGVyIHRoZSBzYW1lLCBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgIGRpc2ZyYW5jaGlzZWQgd2l0aCBoaXMgY2hpbGRyZW4gYW5kIGhpcyBwcm9wZXJ0eS7igJ0gRG8geW91IHRoZW4gY291bnQKICAgICAgICAgICAgICAgICAgICB0aGlzIGEgdHJpZmxpbmcgb3Igd29ydGhsZXNzIHByZWNhdXRpb24gdGFrZW4gYnkgdGhlIGF1dGhvciBvZiB0aGUgc3RhdHV0ZSB0bwogICAgICAgICAgICAgICAgICAgIHNlY3VyZSBpdHMgdmFsaWRpdHksIGFuZCB0byBzYXZlIGl0IGZyb20gYmVpbmcgZWl0aGVyIGZydXN0cmF0ZWQgb3IgYWx0ZXJlZD8gWWV0CiAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmVuZGFudCBBcmlzdG9jcmF0ZXMsIHdpdGggdmVyeSBsaXR0bGUgcmVnYXJkIGZvciB0aGUgbGF3Z2l2ZXIsIGlzIHRyeWluZwogICAgICAgICAgICAgICAgICAgIGJvdGggdG8gYWx0ZXIgaXQgYW5kIHRvIGZydXN0cmF0ZSBpdC4gRm9yIHN1cmVseSwgdG8gcGVybWl0IHB1bmlzaG1lbnQgb3V0c2lkZQogICAgICAgICAgICAgICAgICAgIHRoZSBlc3RhYmxpc2hlZCB0cmlidW5hbHMgYW5kIGJleW9uZCB0aGUgbGltaXRzIG9mIHRoZSBwcm9oaWJpdGVkIGFyZWFzLCBvciB0bwogICAgICAgICAgICAgICAgICAgIHJvYiBwZW9wbGUgb2YgdGhlIHJpZ2h0IG9mIGZhaXIgaGVhcmluZywgYW5kIG1ha2UgdGhlbSBvdXRjYXN0c+KAlHdoYXQKICAgICAgICAgICAgICAgICAgICBpcyB0aGF0IGJ1dCBhbHRlcmF0aW9uPyBUbyBkcmFmdCBhIHNlcmllcyBvZiBjbGF1c2VzLCBhbGwgb2YgdGhlbSBleGFjdGx5CiAgICAgICAgICAgICAgICAgICAgY29udHJhZGljdGluZyB0aGUgcHJvdmlzaW9ucyBvZiB0aGUgc3RhdHV0ZS1ib29r4oCUd2hhdCBpcyB0aGF0IGJ1dAogICAgICAgICAgICAgICAgICAgIGZydXN0cmF0aW9uPyA8L3RyYW5zbGF0aW9uPg=="
translation['23.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVzaWRlcyB0aGUgbGF3cyBjaXRlZCwgaGUgaGFzIHZpb2xhdGVkIG1hbnkgb3RoZXIgc3RhdHV0ZXMsIHdoaWNoIHdlIGhhdmUgbm90CiAgICAgICAgICAgICAgICAgICAgcHV0IG9uIHRoZSBzY2hlZHVsZSBiZWNhdXNlIHRoZXkgYXJlIHNvIG51bWVyb3VzLiBJIG9mZmVyIGEgc3VtbWFyeSBzdGF0ZW1lbnQuCiAgICAgICAgICAgICAgICAgICAgVGFrZSB0aGUgbGF3cyB3aGljaCBkZWFsIHdpdGggY291cnRzIG9mIGhvbWljaWRlLCBhbmQgd2hpY2ggb3JkZXIgdGhlIGNvbnRlbmRpbmcKICAgICAgICAgICAgICAgICAgICBwYXJ0aWVzIHRvIHN1bW1vbiBvbmUgYW5vdGhlciwgb3IgdG8gdGVuZGVyIGV2aWRlbmNlLCBvciB0byB0YWtlIHRoZWlyIG9hdGhzLCBvcgogICAgICAgICAgICAgICAgICAgIHdoaWNoIGdpdmUgdGhlbSBhbnkgb3RoZXIgZGlyZWN0aW9uOyBoZSBoYXMgdmlvbGF0ZWQgZXZlcnkgb25lIG9mIHRoZW07IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGRyYWZ0ZWQgdGhpcyBkZWNyZWUgaW4gY29udHJhdmVudGlvbiBvZiB0aGVtIGFsbC4gV2hhdCBvdGhlciBhY2NvdW50IGNhbiBvbmUKICAgICAgICAgICAgICAgICAgICBnaXZlLCB3aGVuIHRoZXJlIGlzIG5vIHN1bW1vbnMsIG5vIGV2aWRlbmNlIGJ5IHdpdG5lc3NlcyBvZiB0aGUgZmFjdCwgbm8KICAgICAgICAgICAgICAgICAgICBvYXRoLXRha2luZyzigJR3aGVuIHRoZSBwZW5hbHR5IGZvbGxvd3Mgb24gdGhlIGhlZWxzIG9mIHRoZSBhY2N1c2F0aW9uLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IGEgcGVuYWx0eSBmb3JiaWRkZW4gYnkgdGhlIGxhd3M/IFlldCBhbGwgdGhlIHByb2NlZWRpbmdzIEkgaGF2ZSBuYW1lZAogICAgICAgICAgICAgICAgICAgIGFyZSBpbiB1c2UsIGFzIG9yZGVyZWQgYnkgc3RhdHV0ZSwgYXQgZml2ZSBkaWZmZXJlbnQgdHJpYnVuYWxzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVzZSBmaXZlIGNvdXJ0cyBzYXQgcmVzcGVjdGl2ZWx5IG9uIHRoZSBBcmVvcGFndXM7IGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBQYWxsYWRpdW0gb3IgdGVtcGxlIG9mIFBhbGxhczsgYXQgdGhlIERlbHBoaW5pdW0gb3IgdGVtcGxlIG9mIEFwb2xsbwogICAgICAgICAgICAgICAgICAgICAgICBEZWxwaGluaXVzOyBpbiBQaHJlYXR0bywgYSBwYXJ0IG9mIHRoZSBQZWlyYWV1cyBieSB0aGUgc2hvcmU7IGFuZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgUHJ5dGFuZXVtIG9yIGNpdHktaGFsbCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi48L3RyYW5zbGF0aW9uPg=="
translation['23.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz7igJRZZXMsIGJ1dCzigJRzb21lb25lIHdpbGwKICAgICAgICAgICAgICAgICAgICBzYXks4oCUdGhvc2UgdHJpYnVuYWxzIGFyZSB3b3J0aGxlc3MgYW5kIHVuZmFpcmx5IGNvbnN0aXR1dGVkLCB3aGVyZWFzCiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3Bvc2FscyBvZiB0aGUgZGVmZW5kYW50IGFyZSByaWdodGVvdXMgYW5kIGFkbWlyYWJsZS7igJRJIGRlbnkgaXQuCiAgICAgICAgICAgICAgICAgICAgSSBzYXkgdGhhdCBvZiBhbGwgdGhlIHByb3Bvc2FscyBldmVyIGxhaWQgYmVmb3JlIHlvdSBJIGtub3cgb2Ygbm9uZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZW91cyB0aGFuIHRoaXMgZGVjcmVlLCBhbmQgdGhhdCBvZiBhbGwgdGhlIHRyaWJ1bmFscyB0byBiZSBmb3VuZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSB3b3JsZCB0aGVyZSBhcmUgbm9uZSB0aGF0IGNhbiBiZSBzaG93biB0byBiZSBtb3JlIHZlbmVyYWJsZSBvciBtb3JlCiAgICAgICAgICAgICAgICAgICAgcmlnaHRlb3VzIHRoYW4gb3Vycy4gSSBkZXNpcmUgdG8gc3BlYWsgYnJpZWZseSBvZiBjZXJ0YWluIHRydXRocywgdGhlIHJlbGF0aW9uCiAgICAgICAgICAgICAgICAgICAgb2Ygd2hpY2ggcmVmbGVjdHMgY3JlZGl0IGFuZCBob25vciB1cG9uIHRoZSBjaXR5LCBhbmQgd2hpY2ggeW91IHdpbGwgYmUKICAgICAgICAgICAgICAgICAgICBncmF0aWZpZWQgdG8gaGVhci4gSSB3aWxsIGJlZ2luIHdpdGggYSBzdGF0ZW1lbnQgd2hpY2ggeW91IHdpbGwgZmluZCBlc3BlY2lhbGx5CiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3RpdmUsIGZpcnN0IHJlZmVycmluZyB0byB0aGUgZnJlZSBnaWZ0IHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gY29uZmVycmVkCiAgICAgICAgICAgICAgICAgICAgdXBvbiBDaGFyaWRlbXVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgd2FzIHdlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aG8gbWFkZQogICAgICAgICAgICAgICAgICAgIENoYXJpZGVtdXMgYSBjaXRpemVuLCBhbmQgYnkgdGhhdCBnaWZ0IGJlc3Rvd2VkIHVwb24gaGltIGEgc2hhcmUgaW4gb3VyIGNpdmlsCiAgICAgICAgICAgICAgICAgICAgYW5kIHJlbGlnaW91cyBvYnNlcnZhbmNlcywgaW4gb3VyIGxlZ2FsIHJpZ2h0cywgYW5kIGluIGV2ZXJ5dGhpbmcgaW4gd2hpY2ggd2UKICAgICAgICAgICAgICAgICAgICBvdXJzZWx2ZXMgcGFydGljaXBhdGUuIFRoZXJlIGFyZSBtYW55IGluc3RpdHV0aW9ucyBvZiBvdXJzIHRoZSBsaWtlIG9mIHdoaWNoIGFyZQogICAgICAgICAgICAgICAgICAgIG5vdCB0byBiZSBmb3VuZCBlbHNld2hlcmUsIGJ1dCBhbW9uZyB0aGVtIG9uZSBlc3BlY2lhbGx5IHBlY3VsaWFyIHRvIG91cnNlbHZlcwogICAgICAgICAgICAgICAgICAgIGFuZCB2ZW5lcmFibGUs4oCUSSBtZWFuIHRoZSBDb3VydCBvZiBBcmVvcGFndXMuIENvbmNlcm5pbmcgdGhhdCBDb3VydCBJCiAgICAgICAgICAgICAgICAgICAgY291bGQgcmVsYXRlIGEgZ3JlYXRlciBudW1iZXIgb2Ygbm9ibGUgc3RvcmllcywgaW4gcGFydCB0cmFkaXRpb25hbCBhbmQKICAgICAgICAgICAgICAgICAgICBsZWdlbmRhcnksIGluIHBhcnQgY2VydGlmaWVkIGJ5IG91ciBvd24gcGVyc29uYWwgdGVzdGltb255LCB0aGFuIGNvdWxkIGJlIHRvbGQKICAgICAgICAgICAgICAgICAgICBvZiBhbnkgb3RoZXIgdHJpYnVuYWwuIEl0IGlzIHdvcnRoIHlvdXIgd2hpbGUgdG8gbGlzdGVuIHRvIG9uZSBvciB0d28gb2YgdGhlbSBieQogICAgICAgICAgICAgICAgICAgIHdheSBvZiBpbGx1c3RyYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['23.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCwgdGhlbiwgaW4gYW5jaWVudAogICAgICAgICAgICAgICAgICAgIHRpbWVzLCBhcyB3ZSBhcmUgdG9sZCBieSB0cmFkaXRpb24sIGluIHRoaXMgY291cnQgYWxvbmUgdGhlIGdvZHMgY29uZGVzY2VuZGVkCiAgICAgICAgICAgICAgICAgICAgYm90aCB0byByZW5kZXIgYW5kIHRvIGRlbWFuZCBzYXRpc2ZhY3Rpb24gZm9yIGhvbWljaWRlLCBhbmQgdG8gc2l0IGluIGp1ZGdlbWVudAogICAgICAgICAgICAgICAgICAgIHVwb24gY29udGVuZGluZyBsaXRpZ2FudHMs4oCUUG9zZWlkb24sIGFjY29yZGluZyB0byB0aGUgbGVnZW5kLCBkZWlnbmluZwogICAgICAgICAgICAgICAgICAgIHRvIGRlbWFuZCBqdXN0aWNlIGZyb20gQXJlcyBvbiBiZWhhbGYgb2YgaGlzIHNvbiBIYWxpcnJvdGhpdXMsIGFuZCB0aGUgdHdlbHZlCiAgICAgICAgICAgICAgICAgICAgZ29kcyB0byBhZGp1ZGljYXRlIGJldHdlZW4gdGhlIEV1bWVuaWRlcyBhbmQgT3Jlc3Rlcy4gVGhlc2UgYXJlIGFuY2llbnQgc3RvcmllczsKICAgICAgICAgICAgICAgICAgICBsZXQgdXMgcGFzcyB0byBhIGxhdGVyIGRhdGUuIFRoaXMgaXMgdGhlIG9ubHkgdHJpYnVuYWwgd2hpY2ggbm8gZGVzcG90LCBubwogICAgICAgICAgICAgICAgICAgIG9saWdhcmNoeSwgbm8gZGVtb2NyYWN5LCBoYXMgZXZlciBkYXJlZCB0byBkZXByaXZlIG9mIGl0cyBqdXJpc2RpY3Rpb24gaW4gY2FzZXMKICAgICAgICAgICAgICAgICAgICBvZiBtdXJkZXIsIGFsbCBtZW4gYWdyZWVpbmcgdGhhdCBpbiBzdWNoIGNhc2VzIG5vIGp1cmlzcHJ1ZGVuY2Ugb2YgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgZGV2aXNpbmcgY291bGQgYmUgbW9yZSBlZmZlY3RpdmUgdGhhbiB0aGF0IHdoaWNoIGhhcyBiZWVuIGRldmlzZWQgaW4gdGhpcyBjb3VydC4KICAgICAgICAgICAgICAgICAgICBJbiBhZGRpdGlvbiB0byB0aGVzZSBncmVhdCBtZXJpdHMsIGhlcmUsIGFuZCBoZXJlIGFsb25lLCBubyBjb252aWN0ZWQgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgYW5kIG5vIGRlZmVhdGVkIHByb3NlY3V0b3IgaGFzIGV2ZXIgbWFkZSBnb29kIGFueSBjb21wbGFpbnQgYWdhaW5zdCB0aGUganVzdGljZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSB2ZXJkaWN0IGdpdmVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgc28sIGluIGRlZmlhbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBzYWZlZ3VhcmQgb2YganVzdGljZSwgYW5kIG9mIHRoZSBsYXdmdWwgcGVuYWx0aWVzIHRoYXQgaXQgYXdhcmRzLCB0aGUKICAgICAgICAgICAgICAgICAgICBhdXRob3Igb2YgdGhpcyBkZWNyZWUgaGFzIG9mZmVyZWQgdG8gQ2hhcmlkZW11cyBhIGZyZWUgbGljZW5jZSB0byBkbyB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgbGlrZXMgYXMgbG9uZyBhcyBoZSBsaXZlcywgYW5kIHRvIGhpcyBmcmllbmRzIHRoZSByaWdodCBvZiB2aW5kaWN0aXZlCiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRpb24gd2hlbiBoZSBpcyBkZWFkLiBGb3IgbG9vayBhdCBpdCBpbiB0aGlzIGxpZ2h0LiBZb3UgYXJlIGFsbCBvZiBjb3Vyc2UKICAgICAgICAgICAgICAgICAgICBhd2FyZSB0aGF0IGluIHRoZSBBcmVvcGFndXMsIHdoZXJlIHRoZSBsYXcgYm90aCBwZXJtaXRzIGFuZCBlbmpvaW5zIHRoZSB0cmlhbCBvZgogICAgICAgICAgICAgICAgICAgIGhvbWljaWRlLCBmaXJzdCwgZXZlcnkgbWFuIHdobyBicmluZ3MgYWNjdXNhdGlvbiBvZiBzdWNoIGEgY3JpbWUgbXVzdCBtYWtlIG9hdGgKICAgICAgICAgICAgICAgICAgICBieSBpbnZva2luZyBkZXN0cnVjdGlvbiB1cG9uIGhpbXNlbGYsIGhpcyBraW5kcmVkLCBhbmQgaGlzIGhvdXNlaG9sZDsgPC90cmFuc2xhdGlvbj4="
translation['23.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5zZWNvbmRseSwgdGhhdCBoZSBtdXN0IG5vdCB0cmVhdCB0aGlzIG9hdGggYXMgYW4KICAgICAgICAgICAgICAgICAgICBvcmRpbmFyeSBvYXRoLCBidXQgYXMgb25lIHdoaWNoIG5vIG1hbiBzd2VhcnMgZm9yIGFueSBvdGhlciBwdXJwb3NlOyBmb3IgaGUKICAgICAgICAgICAgICAgICAgICBzdGFuZHMgb3ZlciB0aGUgZW50cmFpbHMgb2YgYSBib2FyLCBhIHJhbSwgYW5kIGEgYnVsbCwgYW5kIHRoZXkgbXVzdCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBzbGF1Z2h0ZXJlZCBieSB0aGUgbmVjZXNzYXJ5IG9mZmljZXJzIGFuZCBvbiB0aGUgZGF5cyBhcHBvaW50ZWQsIHNvIHRoYXQgaW4KICAgICAgICAgICAgICAgICAgICByZXNwZWN0IGJvdGggb2YgdGhlIHRpbWUgYW5kIG9mIHRoZSBmdW5jdGlvbmFyaWVzIGV2ZXJ5IHJlcXVpcmVtZW50IG9mIHNvbGVtbml0eQogICAgICAgICAgICAgICAgICAgIGhhcyBiZWVuIHNhdGlzZmllZC4gRXZlbiB0aGVuIHRoZSBwZXJzb24gd2hvIGhhcyBzd29ybiB0aGlzIHRyZW1lbmRvdXMgb2F0aCBkb2VzCiAgICAgICAgICAgICAgICAgICAgbm90IGdhaW4gaW1tZWRpYXRlIGNyZWRlbmNlOyBhbmQgaWYgYW55IGZhbHNlaG9vZCBpcyBicm91Z2h0IGhvbWUgdG8gaGltLCBoZQogICAgICAgICAgICAgICAgICAgIHdpbGwgY2FycnkgYXdheSB3aXRoIGhpbSB0byBoaXMgY2hpbGRyZW4gYW5kIGhpcyBraW5kcmVkIHRoZSBzdGFpbiBvZgogICAgICAgICAgICAgICAgICAgIHBlcmp1cnks4oCUYnV0IGdhaW4gbm90aGluZy4gPC90cmFuc2xhdGlvbj4="
translation['23.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgb24KICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgaGFuZCwgaGUgaXMgYmVsaWV2ZWQgdG8gYmUgbGF5aW5nIGEganVzdCBjaGFyZ2UsIGFuZCBpZiBoZSBwcm92ZXMgdGhlCiAgICAgICAgICAgICAgICAgICAgYWNjdXNlZCBndWlsdHkgb2YgbXVyZGVyLCBldmVuIHRoZW4gaGUgaGFzIG5vIHBvd2VyIG92ZXIgdGhlIGNvbnZpY3RlZCBjcmltaW5hbDsKICAgICAgICAgICAgICAgICAgICBvbmx5IHRoZSBsYXdzIGFuZCB0aGUgYXBwb2ludGVkIG9mZmljZXJzIGhhdmUgcG93ZXIgb3ZlciB0aGUgbWFuIGZvciBwdW5pc2htZW50LgogICAgICAgICAgICAgICAgICAgIFRoZSBwcm9zZWN1dG9yIGlzIHBlcm1pdHRlZCB0byBzZWUgaGltIHN1ZmZlcmluZyB0aGUgcGVuYWx0eSBhd2FyZGVkIGJ5IGxhdywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpcyBhbGwuIFN1Y2ggYXJlIHRoZSBwcm9zZWN1dG9yJ3MgcmlnaHRzLiBBcyBmb3IgdGhlIGRlZmVuZGFudCwgdGhlIHJ1bGVzCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpcyBvYXRoIGFyZSB0aGUgc2FtZSwgYnV0IGhlIGlzIGZyZWUgdG8gd2l0aGRyYXcgYWZ0ZXIgbWFraW5nIGhpcyBmaXJzdAogICAgICAgICAgICAgICAgICAgIHNwZWVjaCwgYW5kIG5laXRoZXIgdGhlIHByb3NlY3V0b3IsIG5vciB0aGUganVkZ2VzLCBub3IgYW55IG90aGVyIG1hbiwgaGFzCiAgICAgICAgICAgICAgICAgICAgYXV0aG9yaXR5IHRvIHN0b3AgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgd2h5IGlzIHRoYXQgc28sIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPj8gQmVjYXVzZSB0aGV5IHdobwogICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsbHkgb3JkYWluZWQgdGhlc2UgY3VzdG9tcywgd2hvZXZlciB0aGV5IHdlcmUsIGhlcm9lcyBvciBnb2RzLCBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgdHJlYXQgZXZpbCBmb3J0dW5lIHdpdGggc2V2ZXJpdHksIGJ1dCBodW1hbmVseSBhbGxldmlhdGVkIGl0cyBjYWxhbWl0aWVzLCBzbyBmYXIKICAgICAgICAgICAgICAgICAgICBhcyB0aGV5IGhvbmVzdGx5IGNvdWxkLiBBbGwgdGhvc2UgcmVndWxhdGlvbnMsIHNvIG5vYmx5IGFuZCBlcXVpdGFibHkgY29uY2VpdmVkLAogICAgICAgICAgICAgICAgICAgIHRoZSBhdXRob3Igb2YgdGhlIGRlY3JlZSBub3cgaW4gcXVlc3Rpb24gaGFzIG1hbmlmZXN0bHkgaW5mcmluZ2VkLCBmb3Igbm90IGEKICAgICAgICAgICAgICAgICAgICBzaW5nbGUgc2hyZWQgb2YgdGhlbSBpcyB0byBiZSBmb3VuZCBpbiBoaXMgZGVjcmVlLuKAlFRoYXQgaXMgbXkgZmlyc3QKICAgICAgICAgICAgICAgICAgICBwb2ludDogaGVyZSBpcyBvbmUgdHJpYnVuYWwgd2hvc2Ugd3JpdHRlbiBsYXdzIGFuZCB1bndyaXR0ZW4gdXNhZ2VzIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGNvbnRyYXZlbmVkIGluIGRyYWZ0aW5nIGhpcyBkZWNyZWUuIDwvdHJhbnNsYXRpb24+"
translation['23.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2Vjb25kbHksIHRoZXJlIGlzIGFub3RoZXIgdHJpYnVuYWwsIHRoZSBjb3VydCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBQYWxsYWRpdW0sIGZvciB0aGUgdHJpYWwgb2YgaW52b2x1bnRhcnkgaG9taWNpZGU7IGFuZCBpdCBzaGFsbCBiZSBzaG93biB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgbnVsbGlmaWVzIHRoYXQgdHJpYnVuYWwgYWxzbywgYW5kIHRyYW5zZ3Jlc3NlcyB0aGUgbGF3cyB0aGVyZSBvYnNlcnZlZC4gSGVyZQogICAgICAgICAgICAgICAgICAgIGFsc28gdGhlIG9yZGVyIGlzIGZpcnN0IHRoZSBvYXRoLXRha2luZywgc2Vjb25kbHkgdGhlIHBsZWFkaW5ncywgYW5kIHRoaXJkbHkgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjaXNpb24gb2YgdGhlIGNvdXJ0OyBhbmQgbm90IG9uZSBvZiB0aGVzZSBwcm9jZXNzZXMgaXMgZm91bmQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50J3MgZGVjcmVlLiBJZiB0aGUgY3VscHJpdCBiZSBjb252aWN0ZWQsIGFuZCBmb3VuZCB0byBoYXZlIGNvbW1pdHRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBhY3QsIG5laXRoZXIgdGhlIHByb3NlY3V0b3Igbm9yIGFueSBvdGhlciBwZXJzb24gaGFzIGFueSBhdXRob3JpdHkgb3ZlciBoaW0sIGJ1dAogICAgICAgICAgICAgICAgICAgIG9ubHkgdGhlIGxhdy4gQW5kIHdoYXQgZG9lcyB0aGUgbGF3IGVuam9pbj8gPC90cmFuc2xhdGlvbj4="
translation['23.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0IHRoZSBtYW4gd2hvIGlzIGNvbnZpY3RlZCBvZiBpbnZvbHVudGFyeSBob21pY2lkZSBzaGFsbCwgb24gY2VydGFpbgogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBkYXlzLCBsZWF2ZSB0aGUgY291bnRyeSBieSBhIHByZXNjcmliZWQgcm91dGUsIGFuZCByZW1haW4gaW4gZXhpbGUKICAgICAgICAgICAgICAgICAgICB1bnRpbCBoZSBpcyByZWNvbmNpbGVkIHRvIG9uZSBvZiB0aGUgcmVsYXRpdmVzIG9mIHRoZSBkZWNlYXNlZC4gVGhlbiB0aGUgbGF3CiAgICAgICAgICAgICAgICAgICAgcGVybWl0cyBoaW0gdG8gcmV0dXJuLCBub3QgY2FzdWFsbHksIGJ1dCBpbiBhIGNlcnRhaW4gbWFubmVyOyBpdCBpbnN0cnVjdHMgaGltCiAgICAgICAgICAgICAgICAgICAgdG8gbWFrZSBzYWNyaWZpY2UgYW5kIHRvIHB1cmlmeSBoaW1zZWxmLCBhbmQgZ2l2ZXMgb3RoZXIgZGlyZWN0aW9ucyBmb3IgaGlzCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdC4gSW4gYWxsIHRoZXNlIHByb3Zpc2lvbnMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoZSBsYXcgaXMgcmlnaHQuIDwvdHJhbnNsYXRpb24+"
translation['23.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5JdAogICAgICAgICAgICAgICAgICAgIGlzIGp1c3QgdG8gYWxsb3QgYSBsZXNzZXIgcGVuYWx0eSBmb3IgaW52b2x1bnRhcnkgdGhhbiBmb3Igd2lsbGZ1bCBob21pY2lkZTsgaXQKICAgICAgICAgICAgICAgICAgICBpcyBxdWl0ZSByaWdodCwgYmVmb3JlIG9yZGVyaW5nIGEgbWFuIHRvIGdvIGludG8gZXhpbGUsIHRvIHByb3ZpZGUgZm9yIGhpcyBzYWZlCiAgICAgICAgICAgICAgICAgICAgZGVwYXJ0dXJlOyBhbmQgdGhlIHByb3Zpc2lvbnMgZm9yIHRoZSByZWluc3RhdGVtZW50IG9mIHRoZSByZXR1cm5pbmcgZXhpbGUsIGZvcgogICAgICAgICAgICAgICAgICAgIGhpcyBwdXJpZmljYXRpb24gYnkgY3VzdG9tYXJ5IHJpdGVzLCBhbmQgc28gZm9ydGgsIGFyZSBleGNlbGxlbnQuIFdlbGwsIGV2ZXJ5b25lCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2Ugb3JkaW5hbmNlcywgc28gcmlnaHRlb3VzbHkgZW5hY3RlZCBieSB0aGUgb3JpZ2luYWwgbGVnaXNsYXRvcnMsIGhhcwogICAgICAgICAgICAgICAgICAgIGJlZW4gdHJhbnNncmVzc2VkIGJ5IHRoZSBkZWZlbmRhbnQgaW4gZHJhZnRpbmcgaGlzIGRlY3JlZS4gU28gd2UgaGF2ZSBub3cgdHdvCiAgICAgICAgICAgICAgICAgICAgdHJpYnVuYWxzLCBvZiBncmVhdCBhbnRpcXVpdHkgYW5kIGhpZ2ggY2hhcmFjdGVyLCBhbmQgdXNhZ2VzIGhhbmRlZCBkb3duIGZyb20KICAgICAgICAgICAgICAgICAgICB0aW1lIGltbWVtb3JpYWwsIHdoaWNoIGhlIGhhcyBpbnNvbGVudGx5IG92ZXJyaWRkZW4uIDwvdHJhbnNsYXRpb24+"
translation['23.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVzaWRlcyB0aGVzZSB0d28gdHJpYnVuYWxzCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgYWxzbyBhIHRoaXJkLCB3aG9zZSB1c2FnZXMgYXJlIHN0aWxsIG1vcmUgc2FjcmVkIGFuZCBhd2UtaW5zcGlyaW5nLCBmb3IKICAgICAgICAgICAgICAgICAgICBjYXNlcyBpbiB3aGljaCBhIG1hbiBhZG1pdHMgdGhlIGFjdCBvZiBzbGF5aW5nLCBidXQgcGxlYWRzIHRoYXQgaGUgc2xldwogICAgICAgICAgICAgICAgICAgIGxhd2Z1bGx5LiBUaGF0IGlzIHRoZSBjb3VydCBoZWxkIGF0IHRoZSBEZWxwaGluaXVtLiBJdCBhcHBlYXJzIHRvIG1lLCBnZW50bGVtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUganVyeSwgdGhhdCB0aGUgZmlyc3QgaW5xdWlyeSBtYWRlIGJ5IHRob3NlIHdobyBvcmlnaW5hbGx5IGRlZmluZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgcnVsZXMgb2YganVyaXNwcnVkZW5jZSBpbiB0aGVzZSBtYXR0ZXJzIHdhcywgd2hldGhlciB3ZSBhcmUgdG8gcmVnYXJkIG5vIGFjdCBvZgogICAgICAgICAgICAgICAgICAgIGhvbWljaWRlIGFzIHJpZ2h0ZW91cywgb3Igd2hldGhlciBhbnkga2luZCBvZiBob21pY2lkZSBpcyB0byBiZSBhY2NvdW50ZWQKICAgICAgICAgICAgICAgICAgICByaWdodGVvdXM7IGFuZCB0aGF0LCBhcmd1aW5nIHRoYXQgT3Jlc3RlcywgaGF2aW5nIHNsYWluIGhpcyBvd24gbW90aGVyLAogICAgICAgICAgICAgICAgICAgIGNvbmZlc3NpbmcgdGhlIGZhY3QsIGFuZCBmaW5kaW5nIGdvZHMgdG8gYWRqdWRnZSBoaXMgY2FzZSwgd2FzIGFjcXVpdHRlZCwgdGhleQogICAgICAgICAgICAgICAgICAgIGZvcm1lZCB0aGUgb3BpbmlvbiB0aGF0IHRoZXJlIGlzIHN1Y2ggdGhpbmcgYXMganVzdGlmaWFibGUKICAgICAgICAgICAgICAgICAgICBob21pY2lkZSzigJRmb3IgZ29kcyBjb3VsZCBub3QgaGF2ZSBnaXZlbiBhbiB1bmp1c3QgdmVyZGljdC4gSGF2aW5nCiAgICAgICAgICAgICAgICAgICAgZm9ybWVkIHRoaXMgb3BpbmlvbiwgdGhleSBpbW1lZGlhdGVseSBzZXQgZG93biBpbiB3cml0aW5nIGFuIGV4YWN0IGRlZmluaXRpb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgY29uZGl0aW9ucyB1bmRlciB3aGljaCBob21pY2lkZSBpcyBsYXdmdWwuIDwvdHJhbnNsYXRpb24+"
translation['23.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGVmZW5kYW50LCBob3dldmVyLCBhZG1pdHRlZCBubyBleGNlcHRpb247IGhlIHNpbXBseSBtYWtlcyBhbiBvdXRjYXN0IG9mCiAgICAgICAgICAgICAgICAgICAgYW55IG1hbiB3aG8ga2lsbHMgQ2hhcmlkZW11cywgZXZlbiB0aG91Z2ggaGUga2lsbCBoaW0ganVzdGx5IG9yIGFzIHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgcGVybWl0LiBBbmQgeWV0IHRvIGV2ZXJ5IGFjdCBhbmQgdG8gZXZlcnkgd29yZCBvbmUgb2YgdHdvIGVwaXRoZXRzIGlzCiAgICAgICAgICAgICAgICAgICAgYXBwbGljYWJsZTogaXQgaXMgZWl0aGVyIGp1c3Qgb3IgdW5qdXN0LiBUbyBubyBhY3QgYW5kIHRvIG5vIHdvcmQgY2FuIGJvdGggdGhlc2UKICAgICAgICAgICAgICAgICAgICBlcGl0aGV0cyBiZSBhcHBsaWVkIGF0IHRoZSBzYW1lIHRpbWUsIGZvciBob3cgY2FuIHRoZSBzYW1lIGFjdCBhdCB0aGUgc2FtZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgYmUgYm90aCBqdXN0IGFuZCBub3QganVzdD8gRXZlcnkgYWN0IGlzIGJyb3VnaHQgdG8gdGhlIHRlc3QgYXMgaGF2aW5nIHRoZSBvbmUgb3IKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgb2YgdGhlc2UgcXVhbGl0aWVzOyBpZiBpdCBiZSBmb3VuZCB0byBoYXZlIHRoZSBxdWFsaXR5IG9mIGluanVzdGljZSwKICAgICAgICAgICAgICAgICAgICBpdCBpcyBhZGp1ZGdlZCB0byBiZSB3aWNrZWQsIGlmIG9mIGp1c3RpY2UsIHRvIGJlIGdvb2QgYW5kIGhvbmVzdC7igJRCdXQKICAgICAgICAgICAgICAgICAgICB5b3UsIHNpciwgdXNlZCBuZWl0aGVyIHF1YWxpZmljYXRpb24gd2hlbiB5b3Ugd3JvdGUgdGhlIHdvcmRzLCDigJxpZiBhbnkKICAgICAgICAgICAgICAgICAgICBtYW4ga2lsbC7igJ0gWW91IG5hbWVkIHRoZSBtZXJlIGFjY3VzYXRpb24sIHdpdGhvdXQgYW55IGRlZmluaXRpb24sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZW4gaW1tZWRpYXRlbHkgYWRkZWQsIOKAnGxldCBoaW0gYmUgbGlhYmxlIHRvIHNlaXp1cmUu4oCdCiAgICAgICAgICAgICAgICAgICAgVGhlcmVieSB5b3UgaGF2ZSBldmlkZW50bHkgaWdub3JlZCB0aGlzIHRyaWJ1bmFsIGFuZCBpdHMgdXNhZ2VzIGFzIHdlbGwgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgdHdvLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgaXMgYWxzbyBhIGZvdXJ0aCB0cmlidW5hbCwgdGhhdCBhdCB0aGUgUHJ5dGFuZXVtLiBJdHMgZnVuY3Rpb24gaXMgdGhhdCwKICAgICAgICAgICAgICAgICAgICBpZiBhIG1hbiBpcyBzdHJ1Y2sgYnkgYSBzdG9uZSwgb3IgYSBwaWVjZSBvZiB3b29kIG9yIGlyb24sIG9yIGFueXRoaW5nIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBzb3J0LCBmYWxsaW5nIHVwb24gaGltLCBhbmQgaWYgc29tZW9uZSwgd2l0aG91dCBrbm93aW5nIHdobyB0aHJldyBpdCwga25vd3MgYW5kCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2VzIHRoZSBpbXBsZW1lbnQgb2YgaG9taWNpZGUsIGhlIHRha2VzIHByb2NlZWRpbmdzIGFnYWluc3QgdGhlc2UKICAgICAgICAgICAgICAgICAgICBpbXBsZW1lbnRzIGluIHRoYXQgY291cnQuIFdlbGwsIGlmIGl0IGlzIG5vdCByaWdodGVvdXMgdG8gZGVueSBhIHRyaWFsIGV2ZW4gdG8gYQogICAgICAgICAgICAgICAgICAgIGxpZmVsZXNzIGFuZCBzZW5zZWxlc3MgdGhpbmcsIHRoZSBvYmplY3Qgb2Ygc28gZ3JhdmUgYW4gYWNjdXNhdGlvbiwgYXNzdXJlZGx5IGl0CiAgICAgICAgICAgICAgICAgICAgaXMgaW1waW91cyBhbmQgb3V0cmFnZW91cyB0aGF0IGEgbWFuIHdobyBtYXkgcG9zc2libHkgYmUgbm90IGd1aWx0eSwgYW5kIHdobyBpbgogICAgICAgICAgICAgICAgICAgIGFueSBjYXNlLOKAlGFuZCBJIHdpbGwgYXNzdW1lIGhpbSB0byBiZSBndWlsdHks4oCUaXMgYSBodW1hbgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGVuZG93ZWQgYnkgZm9ydHVuZSB3aXRoIHRoZSBzYW1lIG5hdHVyZSBhcyBvdXJzZWx2ZXMsIHNob3VsZCBiZSBtYWRlIGFuCiAgICAgICAgICAgICAgICAgICAgb3V0Y2FzdCBvbiBzdWNoIGEgY2hhcmdlIHdpdGhvdXQgYSBoZWFyaW5nIGFuZCB3aXRob3V0IGEgdmVyZGljdC4gPC90cmFuc2xhdGlvbj4="
translation['23.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlbiB0aGVyZSBpcyBhIGZpZnRoCiAgICAgICAgICAgICAgICAgICAgdHJpYnVuYWwgd2hpY2ggaGUgaGFzIG92ZXJydWxlZCzigJRhbmQgSSBiZWcgeW91IHRvIHRha2Ugbm90ZSBvZiBpdHMKICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI7IEkgbWVhbiB0aGUgY291cnQgaGVsZCBpbiB0aGUgcHJlY2luY3Qgb2YgUGhyZWF0dG8uIEluIHRoYXQgY291cnQsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhlIGxhdyBvcmRlcnMgZXZlcnkgbWFuCiAgICAgICAgICAgICAgICAgICAgc3RhbmQgaGlzIHRyaWFsIHdobywgaGF2aW5nIGdvbmUgaW50byBleGlsZSBvbiBhIGNoYXJnZSBvZiB1bmludGVudGlvbmFsCiAgICAgICAgICAgICAgICAgICAgaG9taWNpZGUsIGFuZCBiZWluZyBzdGlsbCB1bnJlY29uY2lsZWQgdG8gdGhlIHBlcnNvbnMgd2hvIHByb2N1cmVkIGhpcwogICAgICAgICAgICAgICAgICAgIGJhbmlzaG1lbnQsIGluY3VycyBhIGZ1cnRoZXIgY2hhcmdlIG9mIHdpbGxmdWwgbXVyZGVyLiBUaGUgYXV0aG9yIG9mIHRoZSBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgcnVsZXMgb2YgY291cnQgZGlkIG5vdCBsZXQgc3VjaCBhIG1hbiBhbG9uZSwgb24gdGhlIGdyb3VuZCB0aGF0IGhlIHdhcyB1bmFibGUgdG8KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBub3IgZGlkIGhlLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhlIG1hbiBoYWQgYWxyZWFkeSBjb21taXR0ZWQgYSBsaWtlIG9mZmVuY2UsIHRyZWF0IHRoZSBzaW1pbGFyaXR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGFjY3VzYXRpb24gYXMgcHJvb2YgcG9zaXRpdmUgYWdhaW5zdCBoaW07IDwvdHJhbnNsYXRpb24+"
translation['23.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz5oZSBmb3VuZCBhIHdheSBvZiBzYXRpc2Z5aW5nIHRoZSByZXF1aXJlbWVudHMgb2YgcmVsaWdpb24gd2l0aG91dCBkZXByaXZpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgY3VscHJpdCBvZiBhIGZhaXIgaGVhcmluZyBhbmQgYSB0cmlhbC4gSG93IGRpZCBoZSBtYW5hZ2UgaXQ/IEhlIGNvbnZleWVkIHRoZQogICAgICAgICAgICAgICAgICAgIGp1ZGdlcyB3aG8gd2VyZSB0byBzaXQgdG8gYSBwbGFjZSB0byB3aGljaCB0aGUgYWNjdXNlZCB3YXMgYWJsZSB0byByZXBhaXIsCiAgICAgICAgICAgICAgICAgICAgYXBwb2ludGluZyBhIHBsYWNlIHdpdGhpbiB0aGUgY291bnRyeSBidXQgb24gdGhlIHNlYS1jb2FzdCwga25vd24gYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlY2luY3Qgb2YgUGhyZWF0dG8uIFRoZSBjdWxwcml0IGFwcHJvYWNoZXMgdGhlIHNob3JlIGluIGEgdmVzc2VsLCBhbmQgbWFrZXMKICAgICAgICAgICAgICAgICAgICBoaXMgc3BlZWNoIHdpdGhvdXQgbGFuZGluZywgd2hpbGUgdGhlIGp1ZGdlcyBsaXN0ZW4gdG8gaGltIGFuZCBnaXZlIGp1ZGdlbWVudCBvbgogICAgICAgICAgICAgICAgICAgIHNob3JlLiBJZiBmb3VuZCBndWlsdHksIHRoZSBtYW4gc3VmZmVycyB0aGUgcGVuYWx0eSBvZiB3aWxsZnVsIG11cmRlciBhcyBoZQogICAgICAgICAgICAgICAgICAgIGRlc2VydmVzOyBpZiBhY3F1aXR0ZWQsIGhlIGdvZXMgaGlzIHdheSBzY290LWZyZWUgaW4gcmVzcGVjdCBvZiB0aGF0IGNoYXJnZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgc3RpbGwgc3ViamVjdCB0byBwdW5pc2htZW50IGZvciB0aGUgZWFybGllciBob21pY2lkZS4gPC90cmFuc2xhdGlvbj4="
translation['23.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgd2l0aCB3aGF0IG9iamVjdCBoYXZlIHRoZXNlIHJlZ3VsYXRpb25zIGJlZW4gbWFkZSBzbwogICAgICAgICAgICAgICAgICAgIGNhcmVmdWxseT8gVGhlIG1hbiB3aG8gZHJldyB0aGVtIHVwIGFjY291bnRlZCBpdCBlcXVhbGx5IGlycmVsaWdpb3VzIHRvIGxldCBzbGlwCiAgICAgICAgICAgICAgICAgICAgdGhlIGd1aWx0eSwgYW5kIHRvIGNhc3Qgb3V0IHRoZSBpbm5vY2VudCBiZWZvcmUgdHJpYWwuIEJ1dCBpZiBzdWNoIGdyZWF0IHBhaW5zCiAgICAgICAgICAgICAgICAgICAgYXJlIHRha2VuIGluIHRoZSBjYXNlIG9mIHBlcnNvbnMgYWxyZWFkeSBhZGp1ZGdlZCB0byBiZSBob21pY2lkZXMsIHRvIGVuc3VyZSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGVtIGEgaGVhcmluZywgYSB0cmlhbCwgYW5kIGZhaXIgdHJlYXRtZW50IGluIGV2ZXJ5IHJlc3BlY3QgdXBvbiBhbnkgc3Vic2VxdWVudAogICAgICAgICAgICAgICAgICAgIGFjY3VzYXRpb24sIHN1cmVseSBpdCBpcyBtb3N0IG91dHJhZ2VvdXMgdG8gcHJvdmlkZSB0aGF0IGEgbWFuIHdobyBoYXMgbm90IHlldAogICAgICAgICAgICAgICAgICAgIGJlZW4gZm91bmQgZ3VpbHR5LCBhbmQgb2Ygd2hvbSBpdCBpcyBzdGlsbCB1bmRlY2lkZWQgd2hldGhlciBoZSBjb21taXR0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgYWN0IG9yIG5vdCwgYW5kIHdoZXRoZXIgdGhlIGFjdCB3YXMgaW52b2x1bnRhcnkgb3Igd2lsbGZ1bCwgc2hvdWxkIGJlIGhhbmRlZAogICAgICAgICAgICAgICAgICAgIG92ZXIgdG8gdGhlIG1lcmN5IG9mIGhpcyBhY2N1c2Vycy4gPC90cmFuc2xhdGlvbj4="
translation['23.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gYWRkaXRpb24gdG8gYWxsIHRoZXNlIHByb3Zpc2lvbnMgZm9yIGxlZ2FsIHJlZHJlc3MKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBhIHNpeHRoLCB3aGljaCB0aGUgZGVmZW5kYW50IGhhcyBlcXVhbGx5IGRlZmllZCBpbiBoaXMgZGVjcmVlLiBTdXBwb3NlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIG1hbiBpcyBpZ25vcmFudCBvZiBhbGwgdGhlIHByb2Nlc3NlcyBJIGhhdmUgbWVudGlvbmVkLCBvciB0aGF0IHRoZSBwcm9wZXIKICAgICAgICAgICAgICAgICAgICB0aW1lIGZvciB0YWtpbmcgc3VjaCBwcm9jZWVkaW5ncyBoYXMgZWxhcHNlZCwgdGhhdCBmb3IgYW55IG90aGVyIHJlYXNvbnMgaGUgZG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCBjaG9vc2UgdG8gcHJvc2VjdXRlIGJ5IHRob3NlIG1ldGhvZHM7IGlmIGhlIHNlZXMgdGhlIGhvbWljaWRlIGZyZXF1ZW50aW5nCiAgICAgICAgICAgICAgICAgICAgcGxhY2VzIG9mIHdvcnNoaXAgb3IgdGhlIG1hcmtldCwgaGUgbWF5IGFycmVzdCBoaW0gYW5kIHRha2UgaGltIHRvIGphaWw7IGJ1dAogICAgICAgICAgICAgICAgICAgIG5vdCwgYXMgeW91IGhhdmUgcGVybWl0dGVkLCB0byBoaXMgb3duIGhvdXNlIG9yIHdoZXJldmVyIGhlIGNob29zZXMuIFdoZW4gdW5kZXIKICAgICAgICAgICAgICAgICAgICBhcnJlc3QgaGUgd2lsbCBzdWZmZXIgbm8gaW5qdXJ5IGluIGphaWwgdW50aWwgYWZ0ZXIgaGlzIHRyaWFsOyBidXQsIGlmIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgZm91bmQgZ3VpbHR5LCBoZSB3aWxsIGJlIHB1bmlzaGVkIHdpdGggZGVhdGguIE9uIHRoZSBvdGhlciBoYW5kLCBpZiB0aGUgcGVyc29uCiAgICAgICAgICAgICAgICAgICAgd2hvIGFycmVzdGVkIGhpbSBkb2VzIG5vdCBnZXQgYSBmaWZ0aCBwYXJ0IG9mIHRoZSB2b3RlcywgaGUgd2lsbCBiZSBmaW5lZCBhCiAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQgZHJhY2htYXMuIDwvdHJhbnNsYXRpb24+"
translation['23.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcHJvcG9zYWxzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBhcmUgcXVpdGUgZGlmZmVyZW50OiB0aGUgYWNjdXNlciBpcyB0byBwcm9zZWN1dGUgd2l0aG91dCByaXNrLCB0aGUKICAgICAgICAgICAgICAgICAgICBjdWxwcml0IHRvIGJlIGdpdmVuIHVwIGluY29udGluZW50bHkgYW5kIHdpdGhvdXQgdHJpYWw7IGFuZCBpZiBhbnkgcGVyc29uLCBvcgogICAgICAgICAgICAgICAgICAgIGluZGVlZCBhbnkgZW50aXJlIGNpdHksIHNoYWxsIGludGVydmVuZSB0byBwcmV2ZW50IHRoZSBkZXN0cnVjdGlvbiBvZiBhbGwgdGhvc2UKICAgICAgICAgICAgICAgICAgICB1c2FnZXMgd2hpY2ggSSBoYXZlIGRlc2NyaWJlZCBhbmQgdGhlIG92ZXJ0aHJvdyBvZiBhbGwgdGhlIHRyaWJ1bmFscyBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBtZW50aW9uZWQ7IHRyaWJ1bmFscyBpbnRyb2R1Y2VkIGJ5IHRoZSBnb2RzIGFuZCBmcmVxdWVudGVkIGJ5IG1hbmtpbmQgZnJvbSB0aGF0CiAgICAgICAgICAgICAgICAgICAgZGF5IHRvIHRoaXMs4oCUYW5kIHRvIHJlc2N1ZSB0aGUgdmljdGltcyBvZiBvdXRyYWdlIGFuZCBsYXdsZXNzCiAgICAgICAgICAgICAgICAgICAgdmlvbGVuY2UsIGhlIHByb3Bvc2VzIHRoYXQgYW55IHN1Y2ggcGVyc29uIHNoYWxsIGJlIGJhbm5lZDsgZm9yIGhpbSBhbHNvIGhlCiAgICAgICAgICAgICAgICAgICAgYWxsb3dzIG5vIGhlYXJpbmcgYW5kIG5vIHRyaWFsLCBidXQgcHVuaXNoZXMgaGltIGluc3RhbnRseSBhbmQgd2l0aG91dCB0cmlhbC4KICAgICAgICAgICAgICAgICAgICBDb3VsZCBhbnkgZGVjcmVlIGJlIG1vcmUgbW9uc3Ryb3VzIGFuZCBtb3JlIHVuY29uc3RpdHV0aW9uYWw/IDwvdHJhbnNsYXRpb24+"
translation['23.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGF2ZSB3ZSBhbnkgc3RhdHV0ZSBsZWZ0PyAuIC4KICAgICAgICAgICAgICAgICAgICAuIExldCBtZSBzZWUgaXQuIC4gLiAuIC4gWWVzLCB0aGF0IGlzIHRoZSBvbmU7IHJlYWQgaXQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnkgbWFuIGRpZSBhCiAgICAgICAgICAgICAgICAgICAgICAgIHZpb2xlbnQgZGVhdGgsIGhpcyBraW5zbWVuIG1heSB0YWtlIGFuZCBob2xkIGhvc3RhZ2VzIGluIHJlc3BlY3Qgb2Ygc3VjaAogICAgICAgICAgICAgICAgICAgICAgICBkZWF0aCwgdW50aWwgdGhleSBlaXRoZXIgc3VibWl0IHRvIHRyaWFsIGZvciBibG9vZGd1aWx0aW5lc3MsIG9yIHN1cnJlbmRlcgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgYWN0dWFsIG1hbnNsYXllcnMuIFRoaXMgcmlnaHQgaXMgbGltaXRlZCB0byB0aHJlZSBob3N0YWdlcyBhbmQgbm8KICAgICAgICAgICAgICAgICAgICAgICAgbW9yZS48L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGFueSBtYW4gZGllIGEKICAgICAgICAgICAgICAgICAgICAgICAgdmlvbGVudCBkZWF0aCwgaGlzIGtpbnNtZW4gbWF5IHRha2UgYW5kIGhvbGQgaG9zdGFnZXMgaW4gcmVzcGVjdCBvZiBzdWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGRlYXRoLCB1bnRpbCB0aGV5IGVpdGhlciBzdWJtaXQgdG8gdHJpYWwgZm9yIGJsb29kZ3VpbHRpbmVzcywgb3Igc3VycmVuZGVyCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhY3R1YWwgbWFuc2xheWVycy4gVGhpcyByaWdodCBpcyBsaW1pdGVkIHRvIHRocmVlIGhvc3RhZ2VzIGFuZCBubwogICAgICAgICAgICAgICAgICAgICAgICBtb3JlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XZSBoYXZlIG1hbnkgd2VsbC1jb25jZWl2ZWQKICAgICAgICAgICAgICAgICAgICBsYXdzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBidXQgSSBhbQogICAgICAgICAgICAgICAgICAgIGluY2xpbmVkIHRvIHRoaW5rIHRoYXQgdGhpcyBzdGF0dXRlIGlzIGFzIHdpc2UgYW5kIGp1c3QgYXMgYW55IG9mIHRoZW0uIE9ic2VydmUKICAgICAgICAgICAgICAgICAgICB0aGUgc3Bpcml0IG9mIGVxdWl0eSBhbmQgdGhlIHJlbWFya2FibGUgaHVtYW5pdHkgd2l0aCB3aGljaCBpdCBpcyBkcmF3biB1cC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz7igJxJZiBhbnkgbWFuIGRpZSBhIHZpb2xlbnQKICAgICAgICAgICAgICAgICAgICBkZWF0aCzigJ0gc2F5cyB0aGUgbGVnaXNsYXRvci4gRmlyc3QsIGJ5IGFkZGluZyB0aGUgZXBpdGhldAogICAgICAgICAgICAgICAgICAgIOKAnHZpb2xlbnQs4oCdIGhlIGhhcyBnaXZlbiBhbiBpbmRpY2F0aW9uIGJ5IHdoaWNoIHdlIHVuZGVyc3RhbmQKICAgICAgICAgICAgICAgICAgICBoaXMgbWVhbmluZyB0byBiZSwg4oCcaWYgYSBtYW4gZGllIHdyb25nZnVsbHku4oCdIOKAnEhpcwogICAgICAgICAgICAgICAgICAgIGtpbnNtZW4gbWF5IHRha2UgYW5kIGhvbGQgaG9zdGFnZXMgaW4gcmVzcGVjdCBvZiBzdWNoIGRlYXRoLCB1bnRpbCB0aGV5IGVpdGhlcgogICAgICAgICAgICAgICAgICAgIHN1Ym1pdCB0byB0cmlhbCBmb3IgYmxvb2RndWlsdGluZXNzLCBvciBzdXJyZW5kZXIgdGhlIGFjdHVhbAogICAgICAgICAgICAgICAgICAgIG1hbnNsYXllcnMu4oCdIFlvdSB3aWxsIG5vdGUgd2hhdCBhbiBhZG1pcmFibGUgcHJvdmlzaW9uIHRoaXMgaXMuIEhlCiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZXMgdGhlIGhvc3RhZ2VzLCBpbiB0aGUgZmlyc3QgaW5zdGFuY2UsIHRvIHN0YW5kIHRyaWFsOyBhbmQgdGhlbiBpZiB0aGV5CiAgICAgICAgICAgICAgICAgICAgcmVmdXNlLCBoZSBlbmpvaW5zIHRoZW0gdG8gZ2l2ZSB1cCB0aGUgbXVyZGVyZXJzOyBidXQsIGlmIHRoZXkgZGVjbGluZSBib3RoCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgZHV0aWVzLCBoZSBhZGRzIHRoYXQgdGhlIHJpZ2h0IHRvIGhvbGQgaG9zdGFnZXMgaXMgbGltaXRlZCB0byB0aHJlZSBhbmQgbm8KICAgICAgICAgICAgICAgICAgICBtb3JlLiBUaGUgd2hvbGUgb2YgdGhpcyBzdGF0dXRlIGlzIGRlZmllZCBpbiB0aGUgd29yZGluZyBvZiB0aGUgZGVjcmVlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIHdoZW4gd3JpdGluZyB0aGUKICAgICAgICAgICAgICAgICAgICB3b3Jkcywg4oCcaWYgYW55IG1hbiBzaGFsbCBraWxsLOKAnSBoZSBkaWQgbm90IGFkZAogICAgICAgICAgICAgICAgICAgIOKAnHdyb25nZnVsbHks4oCdIG9yIOKAnHZpb2xlbnRseSzigJ0gb3IgYW55CiAgICAgICAgICAgICAgICAgICAgcXVhbGlmaWNhdGlvbiBhdCBhbGwuIFNlY29uZGx5IGhlIHByb3Bvc2VzIHRoYXQgdGhlIGN1bHByaXQgc2hhbGwgYmUgbGlhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgc2VpenVyZSBpbnN0YW50bHkgYW5kIGJlZm9yZSBhbnkgY2xhaW0gb2YgcmVkcmVzcyBoYXMgYmVlbiBtYWRlLiBGdXJ0aGVybW9yZSwKICAgICAgICAgICAgICAgICAgICB3aGlsZSB0aGUgc3RhdHV0ZSBvcmRhaW5zIHRoYXQsIGlmIHRoZSBwZXJzb25zIGluIHdob3NlIGhvdXNlIHRoZSBkZWF0aCB0b29rCiAgICAgICAgICAgICAgICAgICAgcGxhY2Ugd2lsbCBuZWl0aGVyIHN1Ym1pdCB0byB0cmlhbCBub3IgZ2l2ZSB1cCB0aGUgcGVycGV0cmF0b3JzLCBhcyBtYW55IGFzCiAgICAgICAgICAgICAgICAgICAgdGhyZWUgbWF5IGJlIGRldGFpbmVkIGFzIGhvc3RhZ2VzLCA8L3RyYW5zbGF0aW9uPg=="
translation['23.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz5BcmlzdG9jcmF0ZXMgZGlzbWlzc2VzIHRob3NlIHBlcnNvbnMgc2NvdC1mcmVlLCBhbmQgdGFrZXMgbm8gYWNjb3VudCBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIsIGJ1dCBwcm9wb3NlcyB0byBwdXQgdW5kZXIgYSBiYW4gdGhvc2Ugd2hvLCBpbiBvYmVkaWVuY2UgdG8gdGhhdCBjb21tb24KICAgICAgICAgICAgICAgICAgICBsYXcgb2YgbWFua2luZCB3aGljaCBlbmpvaW5zIGhvc3BpdGFsaXR5IHRvIGEgZnVnaXRpdmUsIGhhdmUgaGFyYm9yZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY3VscHJpdCwgd2hvLCBhcyBJIHdpbGwgYXNzdW1lLCBoYXMgYWxyZWFkeSBnb25lIGludG8gZXhpbGUsIGlmIHRoZXkgcmVmdXNlIHRvCiAgICAgICAgICAgICAgICAgICAgc3VycmVuZGVyIHRoZWlyIHN1cHBsaWFudC4gVGh1cywgYnkgb21pdHRpbmcgdG8gc3BlY2lmeSB0aGUgbW9kZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBob21pY2lkZSwgYnkgbm90IHByb3ZpZGluZyBmb3IgYSB0cmlhbCwgYnkgb21pdHRpbmcgdGhlIGNsYWltIG9mIHJlZHJlc3MsIGJ5CiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGluZyBhcnJlc3QgaW4gYW55IHBsYWNlIHdoYXRzb2V2ZXIsIGJ5IHB1bmlzaGluZyB0aG9zZSB3aG8gaGFyYm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGZ1Z2l0aXZlLCBhbmQgYnkgbm90IHB1bmlzaGluZyB0aG9zZSBpbiB3aG9zZSBob3VzZSB0aGUgZGVhdGggdG9vawogICAgICAgICAgICAgICAgICAgIHBsYWNlLOKAlGluIGV2ZXJ5IHJlc3BlY3QgSSBzYXkgdGhhdCBoaXMgcHJvcG9zYWwgaXMgaW4gbWFuaWZlc3QKICAgICAgICAgICAgICAgICAgICBjb250cmF2ZW50aW9uIG9mIHRoaXMgc3RhdHV0ZSBhbHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgbmV4dCBvbmUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BbmQgaXQgc2hhbGwgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhd2Z1bCB0byBwcm9wb3NlIGEgc3RhdHV0ZSBkaXJlY3RlZCBhZ2FpbnN0IGFuIGluZGl2aWR1YWwsIHVubGVzcyB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgICAgICBhcHBseSB0byBhbGwgQXRoZW5pYW5zLjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIGl0IHNoYWxsIG5vdCBiZQogICAgICAgICAgICAgICAgICAgICAgICBsYXdmdWwgdG8gcHJvcG9zZSBhIHN0YXR1dGUgZGlyZWN0ZWQgYWdhaW5zdCBhbiBpbmRpdmlkdWFsLCB1bmxlc3MgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHkgdG8gYWxsIEF0aGVuaWFucy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHN0YXR1dGUKICAgICAgICAgICAgICAgICAgICBqdXN0IHJlYWQgaXMgbm90LCBsaWtlIHRoZSBvdGhlcnMsIHRha2VuIGZyb20gdGhlIExhd3Mgb2YgSG9taWNpZGUsIGJ1dCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGp1c3QgYXMgZ29vZOKAlGFzIGdvb2QgYXMgZXZlciBsYXcgd2FzLiBUaGUgbWFuIHdobyBpbnRyb2R1Y2VkIGl0IHdhcyBvZgogICAgICAgICAgICAgICAgICAgIG9waW5pb24gdGhhdCwgYXMgZXZlcnkgY2l0aXplbiBoYXMgYW4gZXF1YWwgc2hhcmUgaW4gY2l2aWwgcmlnaHRzLCBzbyBldmVyeWJvZHkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgaGF2ZSBhbiBlcXVhbCBzaGFyZSBpbiB0aGUgbGF3czsgYW5kIHRoZXJlZm9yZSBoZSBtb3ZlZCB0aGF0IGl0IHNob3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBiZSBsYXdmdWwgdG8gcHJvcG9zZSBhIGxhdyBhZmZlY3RpbmcgYW55IGluZGl2aWR1YWwsIHVubGVzcyB0aGUgc2FtZSBhcHBsaWVkCiAgICAgICAgICAgICAgICAgICAgdG8gYWxsIEF0aGVuaWFucy4gTm93IHNlZWluZyB0aGF0IGl0IGlzIGFncmVlZCB0aGF0IHRoZSBkcmFmdGluZyBvZiBkZWNyZWVzIG11c3QKICAgICAgICAgICAgICAgICAgICBjb25mb3JtIHRvIHRoZSBsYXcsIGEgbWFuIHdobyBkcmF3cyBhIGRlY3JlZSBmb3IgdGhlIHNwZWNpYWwgYmVuZWZpdCBvZgogICAgICAgICAgICAgICAgICAgIENoYXJpZGVtdXMsIHN1Y2ggYXMgaXMgbm90IGFwcGxpY2FibGUgdG8gYWxsIHRoZSByZXN0IG9mIHlvdSwgbXVzdCBldmlkZW50bHkgYmUKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgYSBwcm9wb3NhbCBpbiBkZWZpYW5jZSBvZiB0aGlzIHN0YXR1dGUgYWxzbzsgb2YgY291cnNlIHdoYXQgaXQgaXMKICAgICAgICAgICAgICAgICAgICB1bmxhd2Z1bCB0byBwdXQgaW50byBhIHN0YXR1dGUgY2Fubm90IGxlZ2l0aW1hdGVseSBiZSBwdXQgaW50byBhIGRlY3JlZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBuZXh0IHN0YXR1dGUs4oCUb3IgaXMgdGhhdCBhbGwgb2YgdGhlbT88cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vIGRlY3JlZSBlaXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIENvdW5jaWwgb3Igb2YgdGhlIEFzc2VtYmx5IHNoYWxsIGhhdmUgc3VwZXJpb3IgYXV0aG9yaXR5IHRvIGEKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHV0ZS48L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vIGRlY3JlZSBlaXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIENvdW5jaWwgb3Igb2YgdGhlIEFzc2VtYmx5IHNoYWxsIGhhdmUgc3VwZXJpb3IgYXV0aG9yaXR5IHRvIGEKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHV0ZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UHV0IGl0IGRvd24u4oCUSSB0YWtlCiAgICAgICAgICAgICAgICAgICAgaXQsIGdlbnRsZW1lbiwgdGhhdCBhIHZlcnkgc2hvcnQgYW5kIGVhc3kgYXJndW1lbnQgd2lsbCBzZXJ2ZSBtZSB0byBwcm92ZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhpcyBzdGF0dXRlIGhhcyBiZWVuIHZpb2xhdGVkIGluIHRoZSBkcmFmdGluZyBvZiB0aGUgZGVjcmVlLiBXaGVuIHRoZXJlIGFyZSBzbwogICAgICAgICAgICAgICAgICAgIG1hbnkgc3RhdHV0ZXMsIGFuZCB3aGVuIGEgbWFuIG1ha2VzIGEgbW90aW9uIHRoYXQgY29udHJhdmVuZXMgZXZlcnkgb25lIG9mIHRoZW0sCiAgICAgICAgICAgICAgICAgICAgYW5kIGluY29ycG9yYXRlcyBhIHByaXZhdGUgdHJhbnNhY3Rpb24gaW4gYSBkZWNyZWUsIGhvdyBjYW4gYW55b25lIGRlbnkgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGlzIGNsYWltaW5nIGZvciBoaXMgZGVjcmVlIGF1dGhvcml0eSBzdXBlcmlvciB0byB0aGF0IG9mIGEgc3RhdHV0ZT8gPC90cmFuc2xhdGlvbj4="
translation['23.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkgd2lzaCB0byBjaXRlIGZvcgogICAgICAgICAgICAgICAgICAgIHlvdXIgaW5mb3JtYXRpb24gb25lIG9yIHR3byBkZWNyZWVzIGRyYXduIGluIGZhdm91ciBvZiBnZW51aW5lIGJlbmVmYWN0b3JzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1vbndlYWx0aCwgdG8gc2F0aXNmeSB5b3UgdGhhdCBpdCBpcyBlYXN5IHRvIGZyYW1lIHN1Y2ggdGhpbmdzIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBpbmp1c3RpY2UsIHdoZW4gdGhleSBhcmUgZHJhd24gZm9yIHRoZSBleHByZXNzIHB1cnBvc2Ugb2YgZG9pbmcgaG9ub3IgdG8gYSBtYW4sCiAgICAgICAgICAgICAgICAgICAgYW5kIG9mIGFkbWl0dGluZyBoaW0gdG8gYSBzaGFyZSBvZiBvdXIgb3duIHByaXZpbGVnZXMsIGFuZCB3aGVuLCB1bmRlciB0aGUKICAgICAgICAgICAgICAgICAgICBwcmV0ZW5jZSBvZiBkb2luZyBzbywgdGhlcmUgaXMgbm8gbWFsaWNpb3VzIGFuZCBmcmF1ZHVsZW50CiAgICAgICAgICAgICAgICAgICAgaW50ZW50aW9uLuKAlFJlYWQgdGhlc2UgZGVjcmVlcy7igJRUbyBzYXZlIHlvdSBhIGxvbmcgaGVhcmluZywKICAgICAgICAgICAgICAgICAgICB0aGUgY2xhdXNlcyBjb3JyZXNwb25kaW5nIHRvIHRoYXQgZm9yIHdoaWNoIEkgYW0gcHJvc2VjdXRpbmcgdGhlIGRlZmVuZGFudCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBleHRyYWN0ZWQgZnJvbSB0aGUgc2V2ZXJhbCBkZWNyZWVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWVzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IHNlZSwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCB0aGV5IGhhdmUgYWxsIGRyYXduCiAgICAgICAgICAgICAgICAgICAgdGhlbSBpbiB0aGUgc2FtZSBmYXNoaW9uLiBGb3IgaW5zdGFuY2U6IOKAnFRoZXJlIHNoYWxsIGJlIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgcmVkcmVzcyBmb3IgaGltIGFzIGlmIHRoZSBwZXJzb24gc2xhaW4gd2VyZSBhbiBBdGhlbmlhbi7igJ0gSGVyZSwKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IHRhbXBlcmluZyB3aXRoIHlvdXIgZXhpc3RpbmcgbGF3cyByZXNwZWN0aW5nIHN1Y2ggb2ZmZW5jZXMsIHRoZXkgZW5oYW5jZQogICAgICAgICAgICAgICAgICAgIHRoZSBkaWduaXR5IG9mIHRob3NlIGxhd3MgYnkgbWFraW5nIGl0IGFuIGFjdCBvZiBncmFjZSB0byBhbGxvdyBhIHNoYXJlIGluIHRoZW0KICAgICAgICAgICAgICAgICAgICB0byBvdGhlcnMuIE5vdCBzbyBBcmlzdG9jcmF0ZXM6IGhlIGRvZXMgaGlzIHZlcnkgYmVzdCB0byBkcmFnIHRoZSBsYXdzIHRocm91Z2gKICAgICAgICAgICAgICAgICAgICB0aGUgbWlyZTsgYW55aG93LCBoZSB0cmllZCB0byBjb21wb3NlIHNvbWV0aGluZyBvZiBoaXMgb3duLCBhcyB0aG91Z2ggdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgd29ydGggbm90aGluZzsgYW5kIGhlIG1ha2VzIGxpZ2h0IGV2ZW4gb2YgdGhhdCBhY3Qgb2YgZ3JhY2Ugd2hpY2ggeW91IGJlc3Rvd2VkCiAgICAgICAgICAgICAgICAgICAgeW91ciBjaXRpemVuc2hpcCB1cG9uIENoYXJpZGVtdXMuIEZvciB3aGVuIGhlIGFzc3VtZXMgdGhhdCB5b3Ugc3RpbGwgb3dlIHRoZSBtYW4KICAgICAgICAgICAgICAgICAgICBhIGRlYnQgb2YgZ3JhdGl0dWRlLCBhbmQgaGFzIHByb3Bvc2VkIHRoYXQgeW91IHNob3VsZCBwcm90ZWN0IGhpbSBpbnRvIHRoZQogICAgICAgICAgICAgICAgICAgIGJhcmdhaW4sIHNvIHRoYXQgaGUgbWF5IGRvIGp1c3Qgd2hhdCBoZSBsaWtlcyB3aXRoIGltcHVuaXR5LCBkb2VzIG5vdCBzdWNoCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdCBtZXJpdCBteSBkZXNjcmlwdGlvbj8gPC90cmFuc2xhdGlvbj4="
translation['23.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBhbSB3ZWxsIGF3YXJlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0LCBhbHRob3VnaCBBcmlzdG9jcmF0ZXMgd2lsbCBiZSBxdWl0ZSB1bmFibGUgdG8KICAgICAgICAgICAgICAgICAgICBkaXNwcm92ZSB0aGUgY2hhcmdlIG9mIGZyYW1pbmcgaGlzIGRlY3JlZSBpbiBvcGVuIGRlZmlhbmNlIG9mIHRoZSBsYXdzLCBoZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbWFrZSBhbiBhdHRlbXB0IHRvIHNodWZmbGUgYXdheSB0aGUgbW9zdCBzZXJpb3VzIHBhcnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYWNjdXNhdGlvbizigJRuYW1lbHksIHRoYXQgZnJvbSBiZWdpbm5pbmcgdG8gZW5kIG9mIGhpcyBkZWNyZWUgaGUgZG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCBvcmRlciBhbnkgdHJpYWwgb2YgYSB2ZXJ5IGdyYXZlIGluZGljdG1lbnQuIE9uIHRoYXQgcG9pbnQgSSBkbyBub3QgdGhpbmsgSQogICAgICAgICAgICAgICAgICAgIG5lZWQgc2F5IG11Y2g7IGJ1dCBJIHdpbGwgcHJvdmUgY2xlYXJseSBmcm9tIHRoZSBhY3R1YWwgcGhyYXNpbmcgb2YgdGhlIGRlY3JlZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGltc2VsZiBkb2VzIG5vdCBzdXBwb3NlIHRoYXQgdGhlIG1hbiBhY2N1c2VkIHdpbGwgZ2V0IGFueSB0cmlhbCBhdCBhbGwuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgd29yZHMgYXJlOiDigJxJZiBhbnkgbWFuIGtpbGwKICAgICAgICAgICAgICAgICAgICBDaGFyaWRlbXVzLCBoZSBzaGFsbCBiZSBsaWFibGUgdG8gc2VpenVyZTsgYW5kIGlmIGFueSBwZXJzb24gb3IgYW55IGNpdHkgcmVzY3VlCiAgICAgICAgICAgICAgICAgICAgaGltLCB0aGV5IHNoYWxsIGJlIHB1dCB1bmRlciBiYW4s4oCd4oCUbm90IG1lcmVseSBpbiBjYXNlIHRoZXkKICAgICAgICAgICAgICAgICAgICByZWZ1c2UgdG8gZ2l2ZSB1cCBmb3IgdHJpYWwgdGhlIG1hbiB0aGV5IGhhdmUgcmVzY3VlZCwgYnV0IGFic29sdXRlbHkgYW5kCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBtb3JlIGFkby4gQW5kIHlldCBpZiBoZSB3ZXJlIHBlcm1pdHRpbmcgaW5zdGVhZCBvZiBkaXNhbGxvd2luZyBhIHRyaWFsLAogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIGhhdmUgbWFkZSB0aGUgcGVuYWwgY2xhdXNlIGFnYWluc3QgdGhlIHJlc2N1ZXJzIGNvbmRpdGlvbmFsIHVwb24gdGhlaXIKICAgICAgICAgICAgICAgICAgICBub3QgZ2l2aW5nIHVwIGZvciB0cmlhbCB0aGUgcGVyc29uIHJlc2N1ZWQuIDwvdHJhbnNsYXRpb24+"
translation['23.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBkYXJlIHNheSB0aGF0IGhlIHdpbGwgdXNlIHRoZSBmb2xsb3dpbmcKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCwgYW5kIHRoYXQgaGUgd2lsbCB0cnkgdmVyeSBoYXJkIHRvIG1pc2xlYWQgeW91IG9uIHRoaXMgcG9pbnQuIFRoZQogICAgICAgICAgICAgICAgICAgIGRlY3JlZSwgaGUgd2lsbCB1cmdlLCBpcyBpbnZhbGlkIGJlY2F1c2UgaXQgaXMgbWVyZWx5IGEgcHJvdmlzaW9uYWwKICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QW4gb3JkZXIgb2YgQ291bmNpbCBub3QgdmFsaWQKICAgICAgICAgICAgICAgICAgICAgICAgdW50aWwgY29uZmlybWVkIGJ5IHRoZSB2b3RlIG9mIHRoZSBBc3NlbWJseS48L25vdGU+IGFuZCB0aGUgbGF3IHByb3ZpZGVzCiAgICAgICAgICAgICAgICAgICAgdGhhdCByZXNvbHV0aW9ucyBvZiB0aGUgQ291bmNpbCBzaGFsbCBiZSBpbiBmb3JjZSBmb3Igb25lIHllYXIgb25seTsgdGhlcmVmb3JlLAogICAgICAgICAgICAgICAgICAgIGlmIHlvdSBhY3F1aXQgaGltIHRvZGF5LCB0aGUgY29tbW9ud2VhbHRoIGNhbiB0YWtlIG5vIGhhcm0gaW4gcmVzcGVjdCBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBkZWNyZWUuIDwvdHJhbnNsYXRpb24+"
translation['23.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz5JIHRoaW5rIHlvdXIgcmVqb2luZGVyIHRvIHRoYXQKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudCBzaG91bGQgYmUgdGhhdCB0aGUgZGVmZW5kYW50J3MgcHVycG9zZSBpbiBkcmFmdGluZyB0aGUgZGVjcmVlIHdhcywgbm90CiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCBzaG91bGQgYmUgaW5vcGVyYXRpdmUgYW5kIGhhdmUgbm8gZGlzYWdyZWVhYmxlIHJlc3VsdHMs4oCUZm9yIGl0CiAgICAgICAgICAgICAgICAgICAgd2FzIG9wZW4gdG8gaGltIG5vdCB0byBkcmFmdCBpdCBhdCBhbGwsIGlmIGhlIGhhZCB3aXNoZWQgdG8gY29uc3VsdCB0aGUgYmVzdAogICAgICAgICAgICAgICAgICAgIGFkdmFudGFnZSBvZiB0aGUgY29tbW9ud2VhbHRoO+KAlGJ1dCB0aGF0IHlvdSBtaWdodCBiZSBtaXNsZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbiBwZW9wbGUgbWlnaHQgYmUgZW5hYmxlZCB0byBjYXJyeSB0aHJvdWdoIHByb2plY3RzIG9wcG9zZWQgdG8geW91cgogICAgICAgICAgICAgICAgICAgIGludGVyZXN0cy4gVGhhdCB0aGUgZGVjcmVlIGhhcyBiZWVuIGNoYWxsZW5nZWQsIHRoYXQgaXRzIG9wZXJhdGlvbiBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIGRlbGF5ZWQsIGFuZCB0aGF0IGl0IGhhcyBub3cgYmVjb21lIGludmFsaWQsIHlvdSBvd2UgdG8gdXM7IGFuZCBpdCBpcwogICAgICAgICAgICAgICAgICAgIHByZXBvc3Rlcm91cyB0aGF0IHRoZSB2ZXJ5IHJlYXNvbnMgdGhhdCBvdWdodCB0byBtYWtlIHlvdSBncmF0ZWZ1bCB0byB1cyBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZSBhdmFpbGFibGUgYXMgcmVhc29ucyBmb3IgYWNxdWl0dGluZyBvdXIgb3Bwb25lbnRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciB0aGUgcXVlc3Rpb24gaXMgbm90IHNvIHNpbXBsZSBhcyBzb21lIHN1cHBvc2UuIElmCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2VyZSBubyBvdGhlciBtYW4gbGlrZWx5IHRvIHByb3Bvc2UgZGVjcmVlcyBsaWtlIGhpcyB3aXRob3V0IHJlZ2FyZCB0bwogICAgICAgICAgICAgICAgICAgIHlvdXIgaW50ZXJlc3RzLCB0aGUgbWF0dGVyIG1pZ2h0LCBwZXJoYXBzLCBiZSBhIHNpbXBsZSBvbmUuIEJ1dCBpbiBmYWN0IHRoZXJlCiAgICAgICAgICAgICAgICAgICAgYXJlIG1hbnkgc3VjaDsgYW5kIHRoYXQgaXMgd2h5IGl0IGlzIG5vdCByaWdodCB0aGF0IHlvdSBzaG91bGQgcmVmdXNlIHRvIGFubnVsCiAgICAgICAgICAgICAgICAgICAgdGhpcyBkZWNyZWUuIElmIGl0IGlzIHByb25vdW5jZWQgZmxhd2xlc3MsIHdobyB3aWxsIG5vdCBtb3ZlIGRlY3JlZXMgaW4gZnV0dXJlCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBtaXNnaXZpbmc/IFdobyB3aWxsIHJlZnVzZSB0byBwdXQgdGhlbSB0byB0aGUgdm90ZT8gV2hvIHdpbGwgaW1wZWFjaAogICAgICAgICAgICAgICAgICAgIHRoZW0/IFdoYXQgeW91IGhhdmUgdG8gdGFrZSBpbnRvIGFjY291bnQgaXMsIG5vdCB0aGF0IHRoaXMgZGVjcmVlIGhhcyBiZWNvbWUKICAgICAgICAgICAgICAgICAgICBpbnZhbGlkIGJ5IGxhcHNlIG9mIHRpbWUsIGJ1dCB0aGF0LCBpZiB5b3Ugbm93IGdpdmUganVkZ2VtZW50IGZvciB0aGUgZGVmZW5kYW50LAogICAgICAgICAgICAgICAgICAgIGJ5IHRoYXQgdmVyZGljdCB5b3Ugd2lsbCBiZSBvZmZlcmluZyBpbXB1bml0eSB0byBldmVyeSBtYW4gd2hvIG1heSBoZXJlYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB3aXNoIHRvIGRvIHlvdSBhIG1pc2NoaWVmLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgYWxzbyBvY2N1cnMgdG8gbXkgbWluZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBBcmlzdG9jcmF0ZXMsIGhhdmluZyBubwogICAgICAgICAgICAgICAgICAgIHN0cmFpZ2h0Zm9yd2FyZCBvciBob25lc3QgZGVmZW5jZSwgbm9yIGluZGVlZCBhbnkgZGVmZW5jZSBhdCBhbGwsIHRvIG9mZmVyLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgcmVzb3J0IHRvIHN1Y2ggZmFsbGFjaW91cyBhcmd1bWVudHMgYXMgdGhpcyzigJR0aGF0IG1hbnkgc2ltaWxhciBkZWNyZWVzCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIG1hZGUgYmVmb3JlIG5vdyBpbiBmYXZvdXIgb2YgbWFueSBwZXJzb25zLiBUaGF0IGlzIG5vIHByb29mLAogICAgICAgICAgICAgICAgICAgIGdlbnRsZW1lbiwgb2YgdGhlIGxlZ2FsaXR5IG9mIGhpcyBvd24gcHJvcG9zYWwuIFRoZXJlIGFyZSBtYW55IHByZXRlbmNlcyBieQogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSBoYXZlIG9mdGVuIGJlZW4gbWlzbGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZSwgc3VwcG9zZSB0aGF0IG9uZSBvZiB0aG9zZSBkZWNyZWVzIHdoaWNoIGhhdmUgaW4gZmFjdCBiZWVuIGRpc2FsbG93ZWQKICAgICAgICAgICAgICAgICAgICBoYWQgbmV2ZXIgYmVlbiBpbXBlYWNoZWQgaW4gdGhpcyBDb3VydC4gSXQgd291bGQgY2VydGFpbmx5IGhhdmUgYmVlbiBvcGVyYXRpdmU7CiAgICAgICAgICAgICAgICAgICAgbmV2ZXJ0aGVsZXNzIGl0IHdvdWxkIGhhdmUgYmVlbiBtb3ZlZCBjb250cmFyeSB0byBsYXcuIE9yIHN1cHBvc2UgdGhhdCBhIGRlY3JlZSwKICAgICAgICAgICAgICAgICAgICBiZWluZyBpbXBlYWNoZWQsIHdhcyBwcm9ub3VuY2VkIGZsYXdsZXNzLCBiZWNhdXNlIHRoZSBwcm9zZWN1dG9ycywgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgY29sbHVzaXZlbHkgb3IgdGhyb3VnaCBpbmNvbXBldGVuY2UsIGhhZCBmYWlsZWQgdG8gbWFrZSBnb29kIHRoZWlyIGNhc2U6IHRoYXQKICAgICAgICAgICAgICAgICAgICBmYWlsdXJlIGRvZXMgbm90IG1ha2UgaXQgbGVnYWwuIFRoZW4gdGhlIGp1cm9ycyBkbyBub3QgZ2l2ZSBjb25zY2llbnRpb3VzCiAgICAgICAgICAgICAgICAgICAgdmVyZGljdHM/IFllcywgdGhleSBkbzsgSSB3aWxsIGV4cGxhaW4gaG93LiBUaGV5IGFyZSBzd29ybiB0byBkZWNpZGUgdG8gdGhlIGJlc3QKICAgICAgICAgICAgICAgICAgICBvZiBhbiBob25lc3QganVkZ2VtZW50OyBidXQgdGhlIHZpZXcgdGhhdCBjb21tZW5kcyBpdHNlbGYgdG8gdGhlaXIganVkZ2VtZW50IGlzCiAgICAgICAgICAgICAgICAgICAgZ3VpZGVkIGJ5IHRoZSBzcGVlY2hlcyB0byB3aGljaCB0aGV5IGxpc3RlbiwgYW5kLCBpbmFzbXVjaCBhcyB0aGV5IGNhc3QgdGhlaXIKICAgICAgICAgICAgICAgICAgICB2b3RlcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhhdCB2aWV3LCB0aGV5IGFyZSB0cnVlIHRvIHRoZWlyIG9hdGguIDwvdHJhbnNsYXRpb24+"
translation['23.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz5FdmVyeSBtYW4ga2VlcHMgaGlzIG9hdGggd2hvIGRvZXMgbm90LCB0aHJvdWdoIHNwaXRlCiAgICAgICAgICAgICAgICAgICAgb3IgZmF2b3VyIG9yIG90aGVyIGRpc2hvbmVzdCBtb3RpdmUsIHZvdGUgYWdhaW5zdCBoaXMgYmV0dGVyIGp1ZGdlbWVudC4gU3VwcG9zZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgZG9lcyBub3QgYXBwcmVoZW5kIHNvbWUgcG9pbnQgdGhhdCBpcyBleHBsYWluZWQgdG8gaGltLCBoZSBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIGRlc2VydmUgdG8gYmUgcHVuaXNoZWQgZm9yIGhpcyBsYWNrIG9mIGludGVsbGlnZW5jZS4gVGhlIG1hbiB3aG8gaXMgYW1lbmFibGUgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgY3Vyc2UgaXMgdGhlIGFkdm9jYXRlIHdobyBkZWNlaXZlcyBhbmQgbWlzbGVhZHMgdGhlIGp1cnkuIFRoYXQgaXMgd2h5LCBhdAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IG1lZXRpbmcsIHRoZSBjcmllciBwcm9ub3VuY2VzIGEgY29tbWluYXRpb24sIG5vdCB1cG9uIHRob3NlIHdobyBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBtaXNsZWQsIGJ1dCB1cG9uIHdob3NvZXZlciBtYWtlcyBhIG1pc2xlYWRpbmcgc3BlZWNoIHRvIHRoZSBDb3VuY2lsLCBvciB0byB0aGUKICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSwgb3IgdG8gdGhlIENvdXJ0LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QgbGlzdGVuIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvb2YgdGhhdCB0aGUgdGhpbmcgaGFzIGhhcHBlbmVkLCBidXQgb25seSB0byBwcm9vZiB0aGF0IGl0IG91Z2h0IHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICBoYXBwZW5lZC4gRG8gbm90IGxldCB0aGVtIHRlbGwgeW91IHRoYXQgdGhvc2Ugb2xkIGRlY3JlZXMgd2VyZSB1cGhlbGQgYnkgb3RoZXIKICAgICAgICAgICAgICAgICAgICBqdXJpZXM7IGFzayB0aGVtIHRvIHNhdGlzZnkgeW91IHRoYXQgdGhlaXIgcGxlYSBmb3IgdGhpcyBkZWNyZWUgaXMgZmFpcmVyIHRoYW4KICAgICAgICAgICAgICAgICAgICBvdXJzLiBGYWlsaW5nIHRoYXQsIEkgZG8gbm90IHRoaW5rIHRoYXQgeW91IG91Z2h0IHRvIGdpdmUgZ3JlYXRlciB3ZWlnaHQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVsdXNpb25zIG9mIG90aGVycyB0aGFuIHRvIHlvdXIgb3duIGp1ZGdlbWVudC4gPC90cmFuc2xhdGlvbj4="
translation['23.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgSSBjYW5ub3QgYnV0IHRoaW5rIHRoYXQgdGhlcmUgaXMgc29tZXRoaW5nIHVuY29tbW9ubHkgaW1wdWRlbnQgaW4KICAgICAgICAgICAgICAgICAgICBzdWNoIGEgcGxlYSBhcyB0aGF0IG90aGVyIHBlb3BsZSBoYXZlIGJlZm9yZSBub3cgZ290IGRlY3JlZXMgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIHNvcnQu4oCUSWYsIHNpciwgYW4gaWxsZWdhbCBhY3QgaGFzIGFscmVhZHkgYmVlbiBkb25lLCBhbmQgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBpbWl0YXRlZCB0aGF0IGFjdCwgdGhhdCBpcyBubyByZWFzb24gd2h5IHlvdSBzaG91bGQgYmUgYWNxdWl0dGVkLiBPbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb250cmFyeSwgaXQgaXMgYW4gYWRkaXRpb25hbCByZWFzb24gd2h5IHlvdSBzaG91bGQgYmUgY29udmljdGVkLiBJZiBvbmUgb2YgdGhlbQogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIGZvdW5kIGd1aWx0eSwgeW91IHdvdWxkIG5ldmVyIGhhdmUgbW92ZWQgb3VyIGRlY3JlZSBhbmQgc2ltaWxhcmx5CiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciB3aWxsIGJlIGRldGVycmVkLCBpZiB5b3UgYXJlIGZvdW5kIGd1aWx0eSB0b2RheS4gPC90cmFuc2xhdGlvbj4="
translation['23.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgc2F5IHRoYXQgSSBkbyBub3QgZXhwZWN0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBBcmlzdG9jcmF0ZXMgd2lsbCBiZSBhYmxlIHRvIGRlbnkgdGhhdCBoZSBoYXMgbW92ZWQgYSBkZWNyZWUgaW4gb3BlbgogICAgICAgICAgICAgICAgICAgIHZpb2xhdGlvbiBvZiBhbGwgdGhlIGxhd3M7IGJ1dCBiZWZvcmUgbm93LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIGhhdmUgc2VlbiBhIG1hbiBjb250ZXN0aW5nIGFuCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudCBmb3IgaWxsZWdhbCBtZWFzdXJlcywgd2hvLCB0aG91Z2ggY29udmljdGVkIGJ5IGxhdywgbWFkZSBhbiBhdHRlbXB0CiAgICAgICAgICAgICAgICAgICAgdG8gYXJndWUgdGhhdCBoaXMgcHJvcG9zYWwgaGFkIGJlZW4gdG8gdGhlIHB1YmxpYyBhZHZhbnRhZ2UsIGFuZCBpbnNpc3RlZAogICAgICAgICAgICAgICAgICAgIHN0cm9uZ2x5IG9uIHRoYXQgcG9pbnQs4oCUYSBzaW1wbGUtbWluZGVkIGFyZ3VtZW50LCBzdXJlbHksIGlmIGl0IHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBhbiBpbXB1ZGVudCBvbmUuIDwvdHJhbnNsYXRpb24+"
translation['23.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+QWRtaXQgYSBtYW4ncwogICAgICAgICAgICAgICAgICAgIHByb3Bvc2l0aW9uIHRvIGJlIGluIGV2ZXJ5IG90aGVyIHJlc3BlY3QgYWR2YW50YWdlb3VzOyBpdCBpcyBzdGlsbAogICAgICAgICAgICAgICAgICAgIGRpc2FkdmFudGFnZW91cyBpbiBzbyBmYXIgYXMgaGUgYmVncyB5b3UsIHdobyBhcmUgc3dvcm4gdG8gZ2l2ZSBqdWRnZW1lbnQKICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gbGF3LCB0byByYXRpZnkgYSBkZWNyZWUgd2hpY2ggaGUgaGltc2VsZiBjYW5ub3QgcHJvdmUgdG8gaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgaG9uZXN0bHkgZHJhd24sIHNlZWluZyB0aGF0IGV2ZXJ5IG1hbiBpcyBib3VuZCB0byBzZXQgdGhlIGhpZ2hlc3QgdmFsdWUgdXBvbgogICAgICAgICAgICAgICAgICAgIGZpZGVsaXR5IHRvIGhpcyBvYXRoLiBBdCB0aGUgc2FtZSB0aW1lIHRoZSBwbGVhLCB0aG91Z2ggaW1wZXJ0aW5lbnQsIGhhcyByZWFzb24KICAgICAgICAgICAgICAgICAgICBpbiBpdDsgYnV0IG5vdCBhIHJlYXNvbiB3aGljaCBBcmlzdG9jcmF0ZXMgd2lsbCBiZSBhYmxlIHRvIHN1Ym1pdCB0byB5b3UuCiAgICAgICAgICAgICAgICAgICAgRW50aXJlbHkgb3Bwb3NlZCBhcyBoaXMgZGVjcmVlIGlzIHRvIHRoZSBsYXdzLCBpdCBpcyBub3QgbGVzcyBwZXJuaWNpb3VzIHRoYW4KICAgICAgICAgICAgICAgICAgICBpbGxlZ2FsLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdCBpcyB0aGUgcG9pbnQgd2hpY2ggSSB3aXNoIG5vdwogICAgICAgICAgICAgICAgICAgIHRvIG1ha2UgZ29vZCB0byB5b3U7IGFuZCwgaW4gb3JkZXIgdG8gZG8gd2hhdCBJIHdpc2ggaW4gYXMgZmV3IHdvcmRzIGFzCiAgICAgICAgICAgICAgICAgICAgcG9zc2libGUsIHdpbGwgY2l0ZSBhbiBpbGx1c3RyYXRpb24gdGhhdCBpcyB3ZWxsIGtub3duIHRvIHlvdSBhbGwuIFlvdSBhcmUgYXdhcmUKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IGlzIGZvciB0aGUgYWR2YW50YWdlIG9mIEF0aGVucyB0aGF0IG5laXRoZXIgdGhlIFRoZWJhbnMgbm9yIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIHNob3VsZCBiZSBwb3dlcmZ1bDsgdGhhdCB0aGUgVGhlYmFucyBzaG91bGQgYmUgY291bnRlcmJhbGFuY2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIFBob2NpYW5zLCBhbmQgdGhlIExhY2VkYWVtb25pYW5zIGJ5IG90aGVyIGNvbW11bml0aWVzOyBiZWNhdXNlLCB3aGVuIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICB0aGUgcG9zaXRpb24gb2YgYWZmYWlycywgeW91IGFyZSB0aGUgc3Ryb25nZXN0IG5hdGlvbiwgYW5kIGNhbiBkd2VsbCBpbgogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+WW91IG11c3QsIHRoZW4sIHRha2UgdGhlIHZpZXcgdGhhdAogICAgICAgICAgICAgICAgICAgIGZvciB0aG9zZSBvZiBvdXIgZmVsbG93LWNpdGl6ZW5zIHdobyBsaXZlIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IHRoZSBzYW1lIGNvbmRpdGlvbiBpcyBhZHZhbnRhZ2VvdXMsIHRoYXQgaXMsIHRoYXQgbm8KICAgICAgICAgICAgICAgICAgICBvbmUgbWFuIHNoYWxsIGJlIGFsbC1wb3dlcmZ1bCBhbW9uZyB0aGUgVGhyYWNpYW5zLiBJbiBmYWN0IHRoZSBxdWFycmVscyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBUaHJhY2lhbnMsIGFuZCB0aGVpciBqZWFsb3VzeSBvZiBvbmUgYW5vdGhlciwgYWZmb3JkIHRoZSBiZXN0IGFuZCBtb3N0CiAgICAgICAgICAgICAgICAgICAgdHJ1c3R3b3J0aHkgZ3VhcmFudGVlIG9mIHRoZSBzYWZldHkgb2YgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3Mjg1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcyODUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4uIE5vdyB0aGUgZGVjcmVlIGJlZm9yZSB1cywgYnkgb2ZmZXJpbmcgc2VjdXJpdHkgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbWluaXN0ZXIgd2hvIGNvbnRyb2xzIHRoZSBhZmZhaXJzIG9mIENlcnNvYmxlcHRlcywgYW5kIGJ5IHB1dHRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVycyBvZiB0aGUgb3RoZXIga2luZ3MgaW4gaW1taW5lbnQgZmVhciBvZiBiZWluZyBhY2N1c2VkIG9mIGNyaW1lLCBtYWtlcwogICAgICAgICAgICAgICAgICAgIHRob3NlIGtpbmdzIHdlYWssIGFuZCB0aGUga2luZyB3aG8gc3RhbmRzIGJ5IGhpbXNlbGYgc3Ryb25nLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.104'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoYXQgeW91IG1heSBub3QgYmUgcXVpdGUgc3VycHJpc2VkIHRvIGhlYXIgdGhhdCBkZWNyZWVzCiAgICAgICAgICAgICAgICAgICAgbWFkZSBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaGF2ZSBzbyBwb3dlcmZ1bCBhbgogICAgICAgICAgICAgICAgICAgIGVmZmVjdCwgSSB3aWxsIHJlbWluZCB5b3Ugb2YgYSBwaWVjZSBvZiBoaXN0b3J5IHdpdGhpbiB0aGUga25vd2xlZGdlIG9mIGFsbCBvZgogICAgICAgICAgICAgICAgICAgIHlvdS4gQWZ0ZXIgdGhlIHJldm9sdDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5JbiAzNjE7IFNlZSBHcm90ZSwgY2hhcC4KICAgICAgICAgICAgICAgICAgICAgICAgODAuPC9ub3RlPiBvZiBNaWx0b2N5dGhlcyBhZ2FpbnN0IENvdHlzLCB3aGVuIHRoZSB3YXIgaGFkIGFscmVhZHkgbGFzdGVkIGEKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmFibGUgdGltZSwgd2hlbiBFcmdvcGhpbHVzIGhhZCBiZWVuIHN1cGVyc2VkZWQsIGFuZCBBdXRvY2xlcyB3YXMgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgcG9pbnQgb2Ygc2FpbGluZyB0byB0YWtlIGNvbW1hbmQsIGEgZGVjcmVlIHdhcyBwcm9wb3NlZCBoZXJlIGluIHN1Y2ggdGVybXMgdGhhdAogICAgICAgICAgICAgICAgICAgIE1pbHRvY3l0aGVzIHdpdGhkcmV3IGluIGFsYXJtLCBzdXBwb3NpbmcgdGhhdCB5b3Ugd2VyZSBub3Qgd2VsbCBkaXNwb3NlZCB0b3dhcmRzCiAgICAgICAgICAgICAgICAgICAgaGltLCBhbmQgQ290eXMgZ2FpbmVkIHBvc3Nlc3Npb24gb2YgdGhlIFNhY3JlZCBNb3VudGFpbiBhbmQgaXRzIHRyZWFzdXJlcy4gTm93CiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZSB0aGF0IGxhdGVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIEF1dG9jbGVzIHdhcyBwdXQgb24gaGlzIHRyaWFsIGZvciBoYXZpbmcgYnJvdWdodCBNaWx0b2N5dGhlcyB0byBydWluLAogICAgICAgICAgICAgICAgICAgIHRoZSB0aW1lIGZvciBpbmRpY3RpbmcgdGhlIGF1dGhvciBvZiB0aGUgZGVjcmVlIHdhcyBwYXN0OyBhbmQsIHNvIGZhciBhcwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2FzIGNvbmNlcm5lZCwgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3MgaGFkIGNvbWUgdG8gZ3JpZWYuIDwvdHJhbnNsYXRpb24+"
translation['23.105'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+RXZlbiBzbyB0b2RheSwgaWYKICAgICAgICAgICAgICAgICAgICB5b3UgZG8gbm90IGFubnVsIHRoaXMgZGVjcmVlLCB0aGUga2luZ3MgYW5kIHRoZWlyIGNvbW1hbmRlcnMgd2lsbCBiZSBpbW1lbnNlbHkKICAgICAgICAgICAgICAgICAgICBkaXNjb3VyYWdlZC4gVGhleSB3aWxsIHJlZ2FyZCB0aGVtc2VsdmVzIGFzIGFsdG9nZXRoZXIgc2xpZ2h0ZWQsIGFuZCB3aWxsCiAgICAgICAgICAgICAgICAgICAgaW1hZ2luZSB0aGF0IHlvdXIgZmF2b3VyIGlzIGluY2xpbmluZyB0b3dhcmRzIENlcnNvYmxlcHRlcy4gTm93IHN1cHBvc2UgdGhhdCBvbgogICAgICAgICAgICAgICAgICAgIHRoaXMgYXNzdW1wdGlvbiB0aGV5IHN1cnJlbmRlciB0aGVpciByb3lhbHR5LCB3aGVuZXZlciBDZXJzb2JsZXB0ZXMgc2VpemVzCiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdHkgYW5kIGF0dGFja3MgdGhlbTsgYW5kIGFnYWluIG9ic2VydmUgd2hhdCB3aWxsIGhhcHBlbi7igJQKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.106'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+SW4gaGVhdmVuJ3MgbmFtZSwgdGVsbCBtZSB0aGlzLiBJZgogICAgICAgICAgICAgICAgICAgIENlcnNvYmxlcHRlcyBhdHRhY2tzIHVzLOKAlGFuZCBoZSBpcyBtb3JlIGxpa2VseSB0aGFuIG5vdCB0byBkbyBzbywgd2hlbgogICAgICAgICAgICAgICAgICAgIGhlIGhhcyB0aGUgcG93ZXIs4oCUc2hhbGwgd2Ugbm90IGhhdmUgcmVjb3Vyc2UgdG8gdGhvc2Uga2luZ3M/IFNoYWxsIHdlCiAgICAgICAgICAgICAgICAgICAgbm90IHRyeSB0byByZWR1Y2UgaGltIHRocm91Z2ggdGhlbT8gVmVyeSB3ZWxsOyB0aGVuIHN1cHBvc2UgdGhleSByZXBseToKICAgICAgICAgICAgICAgICAgICDigJxBdGhlbmlhbnMsIHNvIGZhciBmcm9tIGhlbHBpbmcgdXMgd2hlbiB3ZSB3ZXJlIGlsbC10cmVhdGVkLCB5b3UgbWFkZQogICAgICAgICAgICAgICAgICAgIHVzIGdyaWV2b3VzbHkgYWZyYWlkIG9mIGRlZmVuZGluZyBvdXJzZWx2ZXMsIGZvciB5b3UgaXNzdWVkIGEgZGVjcmVlIHRoYXQgYW55b25lCiAgICAgICAgICAgICAgICAgICAgd2hvIHNob3VsZCBraWxsIHRoZSBtYW4gd2hvIHdhcyB3b3JraW5nIGFnYWluc3QgeW91ciBpbnRlcmVzdHMgYW5kIG91cnMgYWxpa2UsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGxpYWJsZSB0byBzZWl6dXJlLiBUaGVyZWZvcmUgeW91IGhhdmUgbm8gcmlnaHQgdG8gY2FsbCB1cG9uIHVzIHRvIGhlbHAKICAgICAgICAgICAgICAgICAgICB5b3UgaW4gYSBtYXR0ZXIgd2hpY2ggeW91IG1pc21hbmFnZWQgZm9yIHVzIGFzIHdlbGwgYXMgZm9yCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbHZlcy7igJ0gVGVsbCBtZSB0aGlzLCBJIHNheTogd2lsbCBub3QgdGhleSBoYXZlIHRoZSBiZXN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50PyBJIHRoaW5rIHNvLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.107'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFnYWluLCBpdCBjYW5ub3QgcG9zc2libHkgYmUgYWxsZWdlZCB0aGF0IGl0IHdhcyBuYXR1cmFsIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3Ugc2hvdWxkIGJlIGhvb2R3aW5rZWQgYW5kIG1pc2xlZC4gRm9yIGV2ZW4gdGhvdWdoIHlvdSBoYWQgbm8gb3RoZXIgYmFzaXMgb2YKICAgICAgICAgICAgICAgICAgICBjYWxjdWxhdGlvbiwgZXZlbiB0aG91Z2ggeW91IHdlcmUgdW5hYmxlIG9mIHlvdXJzZWx2ZXMgdG8gZ3Jhc3AgdGhlIHN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgYWZmYWlycywgeW91IGhhZCBiZWZvcmUgeW91ciBleWVzIHRoZSBleGFtcGxlIG9mIHRob3NlIHBlb3BsZSBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4uIFdoYXQgaGFzIFBoaWxpcCBkb25lIGZvciB0aGVtPwogICAgICAgICAgICAgICAgICAgIEFuZCBob3cgYXJlIHRoZXkgdHJlYXRpbmcgaGltPyBIZSByZXN0b3JlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwNDgxNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDA0ODE0Ij5Qb3RpZGFlYTwvcGxhY2VOYW1lPiB0byB0aGVtLCBub3QgYXQgYSB0aW1lIHdoZW4gaGUgd2FzIG5vIGxvbmdlciBhYmxlIHRvCiAgICAgICAgICAgICAgICAgICAga2VlcCB0aGVtIG91dCwgYXMgQ2Vyc29ibGVwdGVzIHJlc3RvcmVkIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPiB0byB5b3U7IG5vLOKAlGFmdGVyIHNwZW5kaW5nIGEgZ3JlYXQgZGVhbAogICAgICAgICAgICAgICAgICAgIG9mIG1vbmV5IG9uIGhpcyB3YXIgd2l0aCB5b3UsIHdoZW4gaGUgaGFkIHRha2VuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw2MDA0ODE0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDYwMDQ4MTQiPlBvdGlkYWVhPC9wbGFjZU5hbWU+LCBhbmQgY291bGQgaGF2ZSBrZXB0IGl0IGlmIGhlIGNob3NlLCBoZSBtYWRlIHRoZW0gYQogICAgICAgICAgICAgICAgICAgIHByZXNlbnQgb2YgdGhlIHBsYWNlLCB3aXRob3V0IGV2ZW4gYXR0ZW1wdGluZyBhbnkgb3RoZXIgY291cnNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.108'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBzbyBsb25nIGFzIHRoZXkgc2F3IHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgbm90IHRvbyBwb3dlcmZ1bCB0byBiZSB0cnVzdGVkLCB0aGV5IHdlcmUgaGlzIGFsbGllcyBhbmQgZm91Z2h0IHVzIG9uIGhpcwogICAgICAgICAgICAgICAgICAgIGFjY291bnQsIHdoZW4gdGhleSBmb3VuZCB0aGF0IGhpcyBzdHJlbmd0aCBoYWQgZ3Jvd24gdG9vIGdyZWF0IGZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgIGNvbmZpZGVuY2UsIHRoZXkgZGlkIG5vdCBtYWtlIGEgZGVjcmVlIHRoYXQgd2hvc29ldmVyIHNob3VsZCBraWxsIGFueSBtYW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaGFkIGhlbHBlZCB0byBjb25zb2xpZGF0ZSBQaGlsaXAncyBwb3dlciBzaG91bGQgYmUgbGlhYmxlIHRvIHNlaXp1cmUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY291bnRyeSBvZiB0aGVpciBhbGxpZXMuIDwvdHJhbnNsYXRpb24+"
translation['23.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+Tm8sIGluZGVlZDsgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgbWFkZSBmcmllbmRzaGlwLCBhbmQgcHJvbWlzZSB0byBtYWtlIGFsbGlhbmNlLCB3aXRoIHlvdSzigJR5b3Ugd2hvCiAgICAgICAgICAgICAgICAgICAgb2YgYWxsIG1lbiBpbiB0aGUgd29ybGQgd291bGQgYmUgbW9zdCBkZWxpZ2h0ZWQgdG8ga2lsbCBQaGlsaXAncyBmcmllbmRzIG9yIGV2ZW4KICAgICAgICAgICAgICAgICAgICBQaGlsaXAgaGltc2VsZi4gV2hlbiBtZXJlIE9seW50aGlhbnMga25vdyBob3cgdG8gcHJvdmlkZSBmb3IgdGhlIG1vcnJvdywgd2lsbAogICAgICAgICAgICAgICAgICAgIG5vdCB5b3UsIHdobyBhcmUgQXRoZW5pYW5zLCBkbyBsaWtld2lzZT8gSXQgaXMgZGlzY3JlZGl0YWJsZSB0aGF0IHlvdSwgd2hvIGhhdmUKICAgICAgICAgICAgICAgICAgICBhIHJlcHV0YXRpb24gZm9yIHN1cGVyaW9yIGFiaWxpdHkgaW4gcG9saXRpY2FsIGRlbGliZXJhdGlvbiwgc2hvdWxkIGJlIGNvbnZpY3RlZAogICAgICAgICAgICAgICAgICAgIG9mIGEgZHVsbGVyIHBlcmNlcHRpb24gb2YgeW91ciBvd24gYWR2YW50YWdlIHRoYW4gT2x5bnRoaWFucy4gPC90cmFuc2xhdGlvbj4="
translation['23.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgYW0gaW5mb3JtZWQgdGhhdAogICAgICAgICAgICAgICAgICAgIEFyaXN0b2NyYXRlcyB3aWxsIGFsc28gc2F5IHNvbWV0aGluZyB0byB0aGUgc2FtZSBlZmZlY3QgYXMgYSBzcGVlY2ggb25jZSBtYWRlIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIEFzc2VtYmx5IGJ5IEFyaXN0b21hY2h1cyzigJR0aGF0IGl0IGlzIGluY29uY2VpdmFibGUgdGhhdAogICAgICAgICAgICAgICAgICAgIENlcnNvYmxlcHRlcyB3b3VsZCBldmVyIGRlbGliZXJhdGVseSBwcm92b2tlIHlvdXIgZW5taXR5IGJ5IHRyeWluZyB0byByb2IgeW91IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+LCBiZWNhdXNlLCBldmVuIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHRha2UgaXQgYW5kIGhvbGQgaXQsIGl0IHdpbGwgYmUgb2Ygbm8gdXNlIHRvIGhpbS4gSW5kZWVkIHdoZW4gdGhhdAogICAgICAgICAgICAgICAgICAgIGNvdW50cnkgaXMgbm90IGF0IHdhciwgaXRzIHJldmVudWUgaXMgbm8gbW9yZSB0aGFuIHRoaXJ0eSB0YWxlbnRzLCBhbmQgd2hlbiBpdAogICAgICAgICAgICAgICAgICAgIGlzIGF0IHdhciwgbm90IGEgc2luZ2xlIHRhbGVudC4gT24gdGhlIG90aGVyIGhhbmQgdGhlIHJldmVudWUgb2YgaGlzIHBvcnRzLAogICAgICAgICAgICAgICAgICAgIHdoaWNoLCBpbiB0aGUgZXZlbnQgc3VwcG9zZWQsIHdvdWxkIGJlIGJsb2NrYWRlZCwgaXMgbW9yZSB0aGFuIHR3byBodW5kcmVkCiAgICAgICAgICAgICAgICAgICAgdGFsZW50cy4gVGhleSB3b25kZXIs4oCUYXMgdGhleSB3aWxsIHB1dCBpdCzigJR3aGF0IGhlIGNvdWxkCiAgICAgICAgICAgICAgICAgICAgcG9zc2libHkgbWVhbiBieSBwcmVmZXJyaW5nIHNtYWxsIHJldHVybnMgYW5kIGEgd2FyIHdpdGggeW91LCB3aGVuIGhlIG1pZ2h0IGdldAogICAgICAgICAgICAgICAgICAgIGxhcmdlciByZXR1cm5zIGFuZCBiZSB5b3VyIGZyaWVuZC4gPC90cmFuc2xhdGlvbj4="
translation['23.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBJIGFtIGF0IG5vIGxvc3MgZm9yIHBsZW50eSBvZiBpbnN0YW5jZXMgaW4gdGhlIGxpZ2h0CiAgICAgICAgICAgICAgICAgICAgb2Ygd2hpY2ggYSBtYW4gbWlnaHQgcmVhc29uYWJseSBiZSBza2VwdGljYWwsIGluc3RlYWQgb2YgcHV0dGluZyBoaXMgdHJ1c3QgaW4KICAgICAgICAgICAgICAgICAgICB0aG9zZSBvcmF0b3JzLCBhbmQgYWxsb3dpbmcgQ2Vyc29ibGVwdGVzIHRvIGJlY29tZSBhIHBvdGVudGF0ZS4gSG93ZXZlciwgSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgY29udGVudCB3aXRoIHRoZSBpbnN0YW5jZSB0aGF0IGxpZXMgbmVhcmVzdCB0byBoYW5kLiBPZiBjb3Vyc2UsIGdlbnRsZW1lbiwKICAgICAgICAgICAgICAgICAgICB5b3UgYWxsIGtub3cgdGhhdCBNYWNlZG9uaWFuLCBQaGlsaXAuIEl0IHdhcyBjZXJ0YWlubHkgbW9yZSBwcm9maXRhYmxlIGZvciBoaW0KICAgICAgICAgICAgICAgICAgICB0byBkcmF3IHRoZSByZXZlbnVlcyBvZiBhbGwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDY2NjciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwNjY2NyI+TWFjZWRvbmlhPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgaW4gc2FmZXR5LCB0aGFuIHRoZSByZXZlbnVlIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiB3aXRoIHJpc2tzIGF0dGFjaGVkOyBhbmQgbW9yZSBhZ3JlZWFibGUgdG8gaGF2ZSB5b3UsCiAgICAgICAgICAgICAgICAgICAgaGlzIGhlcmVkaXRhcnkgZnJpZW5kcywgb24gaGlzIHNpZGUsIHRoYW4gdGhlIFRoZXNzYWxpYW5zIHdobyBvbmNlIGVqZWN0ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgb3duIGZhdGhlci4gPC90cmFuc2xhdGlvbj4="
translation['23.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+QXBhcnQgZnJvbSB0aGF0LCBpdCBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBvYnNlcnZlZCB0aGF0IHlvdSwgQXRoZW5pYW5zLCBuZXZlciB5ZXQgYmV0cmF5ZWQgYW55IG9mIHlvdXIgZnJpZW5kcywgd2hpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgVGhlc3NhbGlhbnMgaGF2ZSBiZXRyYXllZCBldmVyeSBvbmUgb2YgdGhlaXJzLiBOZXZlcnRoZWxlc3MsIGluIHNwaXRlIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHRoYXQsIHlvdSBzZWUgdGhhdCBoZSBoYXMgZGVsaWJlcmF0ZWx5IGNob3NlbiBzbWFsbCBnYWlucywgZmFpdGhsZXNzIGZyaWVuZHMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGJpZyByaXNrcywgaW4gcHJlZmVyZW5jZSB0byBhIGxpZmUgb2Ygc2VjdXJpdHkuIDwvdHJhbnNsYXRpb24+"
translation['23.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHdoYXQgY2FuIGJlIHRoZSByZWFzb24/IEZvciB0aGUgbG9naWMgb2YgdGhlIHRoaW5nIGlzCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbmx5IG5vdCBzbyB2ZXJ5IG9idmlvdXMuIFRoZSB0cnV0aCBpcywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCB0aGVyZSBhcmUgdHdvIHRoaW5ncyB0aGF0IGFyZQogICAgICAgICAgICAgICAgICAgIGV4Y2VsbGVudCBmb3IgZXZlcnlib2R5OiBnb29kIGx1Y2ssIHRoZSBjaGllZmVzdCBhbmQgZ3JlYXRlc3Qgb2YgZ29vZHMsIGFuZCBnb29kCiAgICAgICAgICAgICAgICAgICAgY291bnNlbCwgaW5mZXJpb3IgdG8gZ29vZCBsdWNrLCBidXQgZ3JlYXRlciB0aGFuIGFueSBvdGhlcjsgYnV0IG1lbiBkbyBub3QgZ2V0CiAgICAgICAgICAgICAgICAgICAgYm90aCB0aGVzZSBnb29kIHRoaW5ncyBhdCBvbmNlLCBhbmQgbm8gc3VjY2Vzc2Z1bCBtYW4gc2V0cyBhbnkgbGltaXQgb3IgZW5kIHRvCiAgICAgICAgICAgICAgICAgICAgaGlzIGRlc2lyZSB0byBnZXQgbW9yZS4gQW5kIHRoYXQgaXMgd2h5IG1lbiwgaW4gdGhlIGRlc2lyZSBmb3IgbW9yZSwgc28gb2Z0ZW4KICAgICAgICAgICAgICAgICAgICB0aHJvdyBhd2F5IHdoYXQgdGhleSBhbHJlYWR5IGhhdmUuIDwvdHJhbnNsYXRpb24+"
translation['23.114'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoYXQKICAgICAgICAgICAgICAgICAgICBuZWVkIHRvIG5hbWUgUGhpbGlwLCBvciBhbnkgb3RoZXIgbWFuPyBXaHksIENlcnNvYmxlcHRlcycgb3duIGZhdGhlciwgQ290eXMsCiAgICAgICAgICAgICAgICAgICAgd2hlbmV2ZXIgaGUgaGFkIGEgcXVhcnJlbCBvbiBoYW5kLCB1c2VkIHRvIHNlbmQgaGlzIGFtYmFzc2Fkb3JzLCBhbmQgd2FzIHJlYWR5CiAgICAgICAgICAgICAgICAgICAgdG8gZG8gYW55dGhpbmcsIGFuZCB0aGVuIGhlIGNvdWxkIHNlZSB0aGF0IGJlaW5nIGF0IHdhciB3aXRoIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiB3YXMgcXVpdGUgdW5wcm9maXRhYmxlLiBCdXQsIGFzIHNvb24KICAgICAgICAgICAgICAgICAgICBhcyBoZSBoYWQgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBhdCBoaXMgY29tbWFuZCwgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBvY2N1cHkgY2l0aWVzLCBkbyBtaXNjaGllZiwgZGlzY2hhcmdlIGhpcyBkcnVua2VuIGZ1cnksIGZpcnN0IG9uIGhpbXNlbGYsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZW4gb24gdXM7IGhlIG11c3QgbmVlZHMgc3VianVnYXRlIHRoZSB3aG9sZSBjb3VudHJ5OyB0aGVyZSB3YXMgbm8gZGVhbGluZwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIGZlbGxvdy4gRm9yIGV2ZXJ5Ym9keSB3aG8gYXR0ZW1wdHMgaW1wcm9wZXIgZW50ZXJwcmlzZXMgZm9yIHRoZSBzYWtlIG9mCiAgICAgICAgICAgICAgICAgICAgYWdncmFuZGl6ZW1lbnQgaXMgYXB0IHRvIGxvb2ssIG5vdCB0byB0aGUgZGlmZmljdWx0aWVzIG9mIGhpcyB0YXNrLCBidXQgdG8gd2hhdAogICAgICAgICAgICAgICAgICAgIGhlIHdpbGwgYWNoaWV2ZSBpZiBzdWNjZXNzZnVsLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.115'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTUiIHVuaXQ9InNlY3Rpb24iIC8+TXkgb3duCiAgICAgICAgICAgICAgICAgICAgb3BpbmlvbiwgdGhlbiwgaXMgdGhhdCB5b3VyIHBvbGljeSBzaG91bGQgYmUgZmFzaGlvbmVkIGluIHN1Y2ggYSB3YXkgdGhhdCwgaWYKICAgICAgICAgICAgICAgICAgICBDZXJzb2JsZXB0ZXMnIHZpZXdzIGluIHJlZ2FyZCB0byB5b3UgYXJlIHdoYXQgdGhleSBzaG91bGQgYmUsIGhlIHNoYWxsIG5vdCBiZQogICAgICAgICAgICAgICAgICAgIHVuanVzdGx5IHRyZWF0ZWQgYnkgeW91LCBidXQgdGhhdCwgaWYgaGUgaXMgc28gdW5yZWFzb25hYmxlIGFzIHRvIHRyZWF0IHlvdQogICAgICAgICAgICAgICAgICAgIHVuanVzdGx5LCBoZSBtYXkgbm90IGJlIHRvbyBzdHJvbmcgdG8gYmUgcHVuaXNoZWQuIEkgd2lsbCByZWFkIHRvIHlvdSB0aGUgbGV0dGVyCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggQ2Vyc29ibGVwdGVzIHNlbnQgYXQgdGhlIHRpbWUgb2YgdGhlIHJldm9sdCBvZiBNaWx0b2N5dGhlcywgYW5kIGFsc28gdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWNoLCB3aGVuIHRoZSB3aG9sZSBraW5nZG9tIHdhcyBoaXMsIGhlIHNlbnQgdG8gVGltb21hY2h1cyBiZWZvcmUgc2VpemluZyB5b3VyCiAgICAgICAgICAgICAgICAgICAgICAgIG91dHBvc3RzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxldHRlcnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXJzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.116'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlcmUgaXMgYQogICAgICAgICAgICAgICAgICAgIHdhcm5pbmcsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoaWNoLCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGJlIGd1aWRlZCBieSBtZSwgeW91IHdpbGwgYmVhciBpbiBtaW5kOyBhbmQsIHJlbWVtYmVyaW5nIGFsc28gdGhhdCwKICAgICAgICAgICAgICAgICAgICB3aGVuIFBoaWxpcCB3YXMgYmVzaWVnaW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgaGUgcHJldGVuZGVkIHRvIGJlIGRvaW5nIHNvIGluIG9yZGVyIHRvIGhhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgcGxhY2Ugb3ZlciB0byB5b3UsIGJ1dCB0aGF0LCB3aGVuIGhlIGhhZCBnb3QgaXQsIGhlIGFubmV4ZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDQ4MTQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwNDgxNCI+UG90aWRhZWE8L3BsYWNlTmFtZT4gaW50byB0aGUgYmFyZ2FpbiwgeW91IHdpbGwgc2ggdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIHNvcnQgb2YgYXNzdXJhbmNlIHRoYXQsIGFjY29yZGluZyB0byB0aGUgc3RvcnksIFBoaWxvY3JhdGVzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICBFcGhpYWx0ZXMsIG9uY2Ugb3Bwb3NlZCB0byB0aGUgTGFjZWRhZW1vbmlhbnMuIDwvdHJhbnNsYXRpb24+"
translation['23.117'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTciIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCB0aGF0LCB3aGVuIHRoZSBMYWNlZGFlbW9uaWFucyB3ZXJlIHRyeWluZyB0byBvdmVycmVhY2ggaGltLCBhbmQKICAgICAgICAgICAgICAgICAgICBvZmZlcmVkIGFueSBhc3N1cmFuY2UgaGUgd2FzIHdpbGxpbmcgdG8gYWNjZXB0LCBQaGlsb2NyYXRlcyByZXBsaWVkIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgb25seSBwb3NzaWJsZSBhc3N1cmFuY2Ugd291bGQgYmUgdGhhdCB0aGV5IHNob3VsZCBzYXRpc2Z5IGhpbSB0aGF0LCBpZiB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIGEgbWluZCB0byBpbmp1cmUgaGltLCB0aGV5IHdvdWxkIG5vdCBoYXZlIHRoZSBwb3dlcjsg4oCcZm9yLOKAnQogICAgICAgICAgICAgICAgICAgIGhlIGFkZGVkLCDigJxJIGFtIHF1aXRlIGNlcnRhaW4gdGhhdCB5b3Ugd2lsbCBhbHdheXMgaGF2ZSB0aGUgbWluZCwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgY2FuIGJlIG5vIGFzc3VyYW5jZSBzbyBsb25nIGFzIHlvdSBoYXZlIHRoZSBwb3dlci7igJ0KICAgICAgICAgICAgICAgICAgICBUaGF0LOKAlGlmIHlvdSB3aWxsIGxldCBtZSBhZHZpc2UgeW91LOKAlGlzIHRoZSBzb3J0IG9mCiAgICAgICAgICAgICAgICAgICAgYXNzdXJhbmNlIHRoYXQgeW91IHdpbGwgaG9sZCBhZ2FpbnN0IHRoaXMgVGhyYWNpYW4uIElmIGhlIGV2ZXIgYmVjYW1lIG1hc3RlciBvZgogICAgICAgICAgICAgICAgICAgIGFsbCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4sIHlvdSBuZWVkIG5vdCBpbnF1aXJlIHdoYXQKICAgICAgICAgICAgICAgICAgICBoaXMgc2VudGltZW50cyB0b3dhcmQgeW91IHdvdWxkIGJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.118'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgaXQgaXMgZW50aXJlbHkgdGhlIGFjdCBvZiBpbnNhbmUgbWVuCiAgICAgICAgICAgICAgICAgICAgdG8gY29tcG9zZSBzdWNoIGRlY3JlZXMsIG9yIHRvIGJlc3RvdyBzdWNoIGZhdm91cnMgYXMgdGhpcywgbWF5IGVhc2lseSBiZQogICAgICAgICAgICAgICAgICAgIGxlYXJuZWQgZnJvbSBtYW55IGV4YW1wbGVzLiBJIGFtIHN1cmUsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgeW91IGFsbCBrbm93IGFzIHdlbGwgYXMgSSBkbyB0aGF0IHlvdSBvbmNlCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0ZWQgQ290eXMgb3ZlciB5b25kZXIgdG8geW91ciBjaXRpemVuc2hpcCwgZXZpZGVudGx5IGJlY2F1c2UgeW91IHJlZ2FyZGVkCiAgICAgICAgICAgICAgICAgICAgaGltIGF0IHRoZSB0aW1lIGFzIGEgc2luY2VyZSB3ZWxsLXdpc2hlci4gSW5kZWVkLCB5b3UgZGVjb3JhdGVkIGhpbSB3aXRoIGdvbGRlbgogICAgICAgICAgICAgICAgICAgIGNyb3duczsgYW5kIHlvdSB3b3VsZCBuZXZlciBoYXZlIGRvbmUgdGhhdCwgaWYgeW91IGhhZCB0aG91Z2h0IGhpbSB5b3VyIGVuZW15LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.119'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTkiIHVuaXQ9InNlY3Rpb24iIC8+TmV2ZXJ0aGVsZXNzLCB3aGVuIGhlIHdhcyBhIHdpY2tlZCwKICAgICAgICAgICAgICAgICAgICB1bnByaW5jaXBsZWQgbWFuLCBhbmQgd2FzIGRvaW5nIHlvdSBzZXJpb3VzIGluanVyeSwgeW91IHRyZWF0ZWQgdGhlIG1lbiB3aG8gcHV0CiAgICAgICAgICAgICAgICAgICAgaGltIHRvIGRlYXRoLCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+UHl0aG88L3N1cm5hbWU+PC9wZXJzTmFtZT4gYW5kIEhlcmFjbGVpZGVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5QeXRobzwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjMxOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzE4Ij5BZW5vczwvcGxhY2VOYW1lPiwgYXMgYmVuZWZhY3RvcnMsIG1hZGUgdGhlbQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zLCBhbmQgZGVjb3JhdGVkIHRoZW0gd2l0aCBjcm93bnMgb2YgZ29sZC4gTm93IHN1cHBvc2UgdGhhdCwgYXQgdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBkaXNwb3NpdGlvbiBvZiBDb3R5cyB3YXMgdGhvdWdodCB0byBiZSBmcmllbmRseSwgaXQgaGFkIGJlZW4gcHJvcG9zZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IGFueSBvbmUgd2hvIGtpbGxlZCBDb3R5cyBzaG91bGQgYmUgZ2l2ZW4gdXAgZm9yIHB1bmlzaG1lbnQsIHdvdWxkIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gdXAgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlB5dGhvPC9zdXJuYW1lPjwvcGVyc05hbWU+IGFuZCBoaXMgYnJvdGhlcj8gT3IKICAgICAgICAgICAgICAgICAgICB3b3VsZCB5b3UsIGluIGRlZmlhbmNlIG9mIHRoZSBkZWNyZWUsIGhhdmUgZ2l2ZW4gdGhlbSB5b3VyIGNpdGl6ZW5zaGlwLCBhbmQKICAgICAgICAgICAgICAgICAgICBob25vcmVkIHRoZW0gYXMgYmVuZWZhY3RvcnM/IDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5QeXRobzwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['23.120'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjAiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHRoZXJlIHdhcwogICAgICAgICAgICAgICAgICAgIEFsZXhhbmRlciBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gMzY4IEFsZXhhbmRlciwgdHlyYW50IG9mIFBoZXJhZSwgZGV0YWluZWQgUGVsb3BpZGFzIGFzIGEKICAgICAgICAgICAgICAgICAgICAgICAgaG9zdGFnZS4gVGhpcyBsZWQgdG8gdGhlIFRoZWJhbiBpbnZhc2lvbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMTM5OSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAxMzk5Ij5UaGVzc2FseTwvcGxhY2VOYW1lPi48L25vdGU+IEF0IHRoZSB0aW1lIHdoZW4gaGUgaGFkIGltcHJpc29uZWQKICAgICAgICAgICAgICAgICAgICBQZWxvcGlkYXMsIGFuZCB3YXMgaG9sZGluZyBoaW0gY2FwdGl2ZSwgd2hlbiBoZSB3YXMgdGhlIG1vc3QgYml0dGVyIGVuZW15IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZWJhbnMsIHdoZW4gaGlzIGZlZWxpbmdzIHRvd2FyZHMgeW91IHdlcmUgc28gZnJhdGVybmFsIHRoYXQgaGUgYXBwbGllZCB0byB5b3UKICAgICAgICAgICAgICAgICAgICBmb3IgYSBjb21tYW5kZXIsIHdoZW4geW91IGdhdmUgYWlkIHRvIGhpcyBhcm1zLCB3aGVuIGl0IHdhcyBBbGV4YW5kZXIgaGVyZSBhbmQKICAgICAgICAgICAgICAgICAgICBBbGV4YW5kZXIgdGhlcmUs4oCUd2h5LCBncmFjaW91cyBoZWF2ZW5zISBpZiBhbnlib2R5IGhhZCBtb3ZlZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hvZXZlciBraWxsZWQgQWxleGFuZGVyIHNob3VsZCBiZSBsaWFibGUgdG8gc2VpenVyZSwgd291bGQgaXQgaGF2ZSBiZWVuIHNhZmUKICAgICAgICAgICAgICAgICAgICBmb3IgYW55IG1hbiB0byB0cnkgdG8gZ2l2ZSBoaW0gZHVlIHB1bmlzaG1lbnQgZm9yIGhpcyBzdWJzZXF1ZW50IHZpb2xlbmNlIGFuZAogICAgICAgICAgICAgICAgICAgIGJydXRhbGl0eT8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDEzOTkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMTM5OSI+VGhlc3NhbHk8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['23.121'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoeSBuZWVkIG9uZSB0YWxrIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGluc3RhbmNlcz8gVGFrZSBQaGlsaXAsIHdobyBpcyBub3cgYWNjb3VudGVkIG91ciB2ZXJ5IHdvcnN0IGVuZW15LiBBdCB0aGUKICAgICAgICAgICAgICAgICAgICB0aW1lIHdoZW4sIGhhdmluZyBjYXVnaHQgc29tZSBvZiBvdXIgY2l0aXplbnMgaW4gdGhlIGFjdCBvZiB0cnlpbmcgdG8gcmVzdG9yZQogICAgICAgICAgICAgICAgICAgIEFyZ2FldXMsIGhlIHJlbGVhc2VkIHRoZW0gYW5kIG1hZGUgZ29vZCBhbGwgdGhlaXIgbG9zc2VzLCB3aGVuIGhlIHByb2Zlc3NlZCBpbiBhCiAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiBtZXNzYWdlIHRoYXQgaGUgd2FzIHJlYWR5IHRvIGZvcm0gYW4gYWxsaWFuY2Ugd2l0aCB1cywgYW5kIHRvIHJlbmV3IGhpcwogICAgICAgICAgICAgICAgICAgIGFuY2VzdHJhbCBhbWl0eSwgaWYgYXQgdGhhdCB0aW1lIGhlIGhhZCBhc2tlZCB1cyBmb3IgdGhpcyBmYXZvdXIsIGFuZCBpZiBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgbWVuIGhlIGhhZCByZWxlYXNlZCBoYWQgcHJvcG9zZWQgdGhhdCDigJx3aG9ldmVyIHNoYWxsIGtpbGwKICAgICAgICAgICAgICAgICAgICBQaGlsaXDigJ0gc2hvdWxkIGJlIGxpYWJsZSB0byBzZWl6dXJlLCBhIGZpbmUgaW5zdWx0IHdlIHNob3VsZCBoYXZlIGhhZAogICAgICAgICAgICAgICAgICAgIHRvIHN3YWxsb3chIDwvdHJhbnNsYXRpb24+"
translation['23.122'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjIiIHVuaXQ9InNlY3Rpb24iIC8+RG8geW91IG5vdCBzZWUsIGdlbnRsZW1lbiwgZG8geW91CiAgICAgICAgICAgICAgICAgICAgbm90IHVuZGVyc3RhbmQsIGhvdyB5b3Ugd291bGQgaGF2ZSBiZWVuIGNoYXJnZWFibGUgd2l0aCBzaGVlciBsdW5hY3kgaW4gZXZlcnkKICAgICAgICAgICAgICAgICAgICBvbmUgb2YgdGhlc2UgaW5zdGFuY2VzLCBpZiB5b3UgaGFkIGNhcnJpZWQgYnkgdm90ZSBhbnkgc3VjaCByZXNvbHV0aW9uIGFzIHRoaXM/CiAgICAgICAgICAgICAgICAgICAgSSBzYXkgaXQgaXMgbm90IHRoZSBwYXJ0IG9mIHNhbmUgbWVuIGVpdGhlciB0byBwdXQgc3VjaCBjb25maWRlbmNlIGluIGEgbWFuLAogICAgICAgICAgICAgICAgICAgIHdoZW5ldmVyIHRoZXkgaW1hZ2luZSBoaW0gdG8gYmUgZnJpZW5kbHksIGFzIHRvIGRlcHJpdmUgdGhlbXNlbHZlcyBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBkZWZlbmNlIGFnYWluc3QgcG9zc2libGUgYWdncmVzc2lvbiwgb3IsIG9uIHRoZSBvdGhlciBoYW5kLCB3aGVuIHRoZXkgcmVnYXJkCiAgICAgICAgICAgICAgICAgICAgYW55b25lIGFzIGFuIGVuZW15LCB0byBoYXRlIGhpbSBzbyBmaWVyY2VseSB0aGF0LCBpZiBoZSBldmVyIHdhbnRzIHRvIHJlZm9ybSBhbmQKICAgICAgICAgICAgICAgICAgICBiZSB0aGVpciBmcmllbmQsIHRoZXkgaGF2ZSB0YWtlbiBpdCBvdXQgb2YgaGlzIHBvd2VyIHRvIGRvIHNvLiBCdXQgd2Ugc2hvdWxkLCBJCiAgICAgICAgICAgICAgICAgICAgdGhpbmssIGNhcnJ5IGJvdGggb3VyIGZyaWVuZHNoaXAgYW5kIG91ciBoYXRyZWQgb25seSBzbyBmYXIgYXMgbm90IHRvIGV4Y2VlZCB0aGUKICAgICAgICAgICAgICAgICAgICBkdWUgbWVhc3VyZSBpbiBlaXRoZXIgY2FzZS4gPC90cmFuc2xhdGlvbj4="
translation['23.123'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZvciBteSBwYXJ0LCBJIGNhbm5vdCBzZWUgd2h5IGV2ZXJ5Ym9keSB3aG8gaGFzIGFueSBzb3J0IG9mCiAgICAgICAgICAgICAgICAgICAgY2xhaW0gdG8gYmUgeW91ciBiZW5lZmFjdG9yIHNob3VsZCBub3QgZXhwZWN0IHRvIGdldCB0aGlzIGZhdm91ciwgaWYgeW91IGJlc3RvdwogICAgICAgICAgICAgICAgICAgIGl0IHVwb24gQ2hhcmlkZW11cyzigJRTaW1vbiwgZm9yIGV4YW1wbGUsIGlmIHlvdSB3YW50IGEgbmFtZSwgb3IgQmlhbm9yLAogICAgICAgICAgICAgICAgICAgIG9yIEF0aGVub2RvcnVzLCBvciB0aG91c2FuZHMgbW9yZS4gTm87IGlmIHdlIG1ha2UgdGhlIHNhbWUgZGVjcmVlIGluIGZhdm91ciBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSBjb21wYW55LCB3ZSBzaGFsbCB1bmNvbnNjaW91c2x5IG1ha2Ugb3Vyc2VsdmVzIGEgYm9keWd1YXJkIGZvciBldmVyeQogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGVtLCBsaWtlIGpvYmJpbmcgbWVyY2VuYXJpZXM7IGJ1dCBpZiB3ZSBkbyBpdCBmb3Igb25lIGJ1dCBub3QgZm9yCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlciwgdGhvc2Ugd2hvIGFyZSBkaXNhcHBvaW50ZWQgd2lsbCBoYXZlIGEgcmlnaHQgdG8gY29tcGxhaW4uIDwvdHJhbnNsYXRpb24+"
translation['23.124'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IGp1c3Qgc3VwcG9zZSB0aGF0IE1lbmVzdHJhdHVzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRXJldHJpYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRXJldHJpYSI+RXJldHJpYTwvcGxhY2VOYW1lPiB3ZXJlIHRvIHJlcXVpcmUgdXMgdG8gbWFrZSB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIGRlY3JlZSBmb3IgaGltLCBvciBQaGF5bGx1cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNDAwMzk2MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw0MDAzOTYzIj5QaG9jaXM8L3BsYWNlTmFtZT4sIG9yIGFueSBvdGhlciBhdXRvY3JhdCzigJRhbmQgSSBuZWVkIG5vdCBzYXkKICAgICAgICAgICAgICAgICAgICB0aGF0IHdlIG9mdGVuIG1ha2UgZnJpZW5kcywgdG8gc2VydmUgb3VyIG9jY2FzaW9ucywgd2l0aCBtYW55IHN1Y2gKICAgICAgICAgICAgICAgICAgICBwZW9wbGUs4oCUYXJlIHdlIHRvIHZvdGUgZGVjcmVlcyBmb3IgYWxsIG9mIHRoZW0sIG9yIGFyZSB3ZSBub3Q/IFlvdQogICAgICAgICAgICAgICAgICAgIHNheSwgWWVzLiBUaGVuIHdoYXQgZGVjZW50IGV4Y3VzZSBzaGFsbCB3ZSBoYXZlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpZiwgd2hpbGUgYXNzZXJ0aW5nIG91cnNlbHZlcyBhcwogICAgICAgICAgICAgICAgICAgIHRoZSBjaGFtcGlvbnMgb2YgYWxsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDc0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwNzQiPkhlbGxhczwvcGxhY2VOYW1lPiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjYXVzZSBvZiBsaWJlcnR5LCB3ZSBtYWtlIG91ciBhcHBlYXJhbmNlIGFzIHllb21lbiBvZiB0aGUgZ3VhcmQgdG8gbWVuIHdobwogICAgICAgICAgICAgICAgICAgIG1haW50YWluIHRyb29wcyBvbiB0aGVpciBvd24gYWNjb3VudCB0byBrZWVwIGRvd24gdGhlIHBvcHVsYWNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['23.125'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjUiIHVuaXQ9InNlY3Rpb24iIC8+SWYgd2Ugb3VnaHQsIHRob3VnaCBJIHNheSB3ZSBvdWdodCBub3QsIHRvIGdyYW50CiAgICAgICAgICAgICAgICAgICAgc3VjaCBhIGZhdm91ciB0byBhbnlvbmUsIGxldCBpdCBiZSBldmVuIGluIHRoZSBmaXJzdCBpbnN0YW5jZSB0byB0aGUgbWFuIHdobyBoYXMKICAgICAgICAgICAgICAgICAgICBuZXZlciBkb25lIHVzIHdyb25nOyBzZWNvbmRseSwgdG8gdGhlIG1hbiB3aG8gd2lsbCBuZXZlciBoYXZlIHRoZSBwb3dlciwgdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgaGUgaGF2ZSB0aGUgd2lsbCwgdG8gaW5qdXJlIHVzOyBhbmQgZmluYWxseSB0aGUgbWFuIHdobyBpcyBrbm93biBieSBldmVyeW9uZSB0bwogICAgICAgICAgICAgICAgICAgIGJlIHNlZWtpbmcgaXQgZm9yIGhpcyBvd24gcHJvdGVjdGlvbiwgYW5kIG5vdCBpbiB0aGUgaG9wZSBvZiBtYWx0cmVhdGluZyBoaXMKICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnMgd2l0aCBpbXB1bml0eeKAlGl0IGlzIHRvIGhpbSB0cnVseSB0aGF0IGl0IHNob3VsZCBiZSBnaXZlbi4gSQogICAgICAgICAgICAgICAgICAgIHdpbGwgc3BhcmUgeW91IHRoZSBwcm9vZiB0aGF0IENoYXJpZGVtdXMgaXMgbmVpdGhlciBhIG1hbiB2b2lkIG9mIG9mZmVuY2UKICAgICAgICAgICAgICAgICAgICB0b3dhcmRzIHVzLCBub3Igb25lIHdobywgZm9yIGhpcyBvd24gc2FmZXR5LCB0cmllcyB0byB3aW4geW91ciBzdXBwb3J0OyBidXQgSSBkbwogICAgICAgICAgICAgICAgICAgIGFzayB5b3UgdG8gbGlzdGVuIHRvIG1lIHdoZW4gSSBkZWNsYXJlIHRoYXQgaGUgaXMgbm90IGV2ZW4gb25lIHdobyBjYW4gYmUKICAgICAgICAgICAgICAgICAgICB0cnVzdGVkIGZvciB0aGUgZnV0dXJlLCBhbmQgdG8gY29uc2lkZXIgY2FyZWZ1bGx5IHdoZXRoZXIgbXkgYXJndW1lbnQgaXMgc291bmQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.126'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIG15CiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBldmVyeW9uZQogICAgICAgICAgICAgICAgICAgIHdobyBkZXNpcmVzIHRvIGJlY29tZSBhbiBBdGhlbmlhbiBjaXRpemVuLCBiZWNhdXNlIGhlIGhhcyBmYWxsZW4gaW4gbG92ZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgb3VyIGN1c3RvbXMgYW5kIGxhd3MsIHdpbGwgbWFrZSBoaXMgaG9tZSBpbiBvdXIgbWlkc3QsIGFzIHNvb24gYXMgaGUgcmVjZWl2ZXMKICAgICAgICAgICAgICAgICAgICBvdXIgZnJhbmNoaXNlLCBhbmQgd2lsbCBlbmpveSBoaXMgc2hhcmUgaW4gdGhlIGFkdmFudGFnZXMgaGUgY292ZXRlZC4gQnV0IGFzIGZvcgogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBhcmUgbm90IG1vdmVkIGJ5IGFueSBkZXNpcmUgb3IgZW11bGF0aW9uIG9mIHRob3NlIGluc3RpdHV0aW9ucywgYnV0CiAgICAgICAgICAgICAgICAgICAgdmFsdWUgb25seSB0aGUgYWR2YW50YWdlIHRoZXkgZGVyaXZlIGZyb20gdGhlIGNyZWRpdCBvZiBiZWluZyBkaXN0aW5ndWlzaGVkIGJ5CiAgICAgICAgICAgICAgICAgICAgeW91LCBJIGZhbmN5LCBpbmRlZWQgSSBhbSBxdWl0ZSBjZXJ0YWluLCB0aGF0IGFzIHNvb24gYXMgdGhleSBkaXNjZXJuIGEgcHJvc3BlY3QKICAgICAgICAgICAgICAgICAgICBvZiBsYXJnZXIgYWR2YW50YWdlIGVsc2V3aGVyZSwgdGhleSB3aWxsIGRldm90ZSB0aGVpciBhdHRlbnRpb24gdG8gdGhhdAogICAgICAgICAgICAgICAgICAgIHByb3NwZWN0LCB3aXRob3V0IHRoZSBsZWFzdCBjb25jZXJuIGZvciB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['23.127'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGV4YW1wbGUsIHRvIG1ha2UgY2xlYXIgdG8geW91IG15IHB1cnBvc2UgaW4gc2F5aW5nIHRoaXMsIHdoZW4gdGhhdCBtYW4KICAgICAgICAgICAgICAgICAgICA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+UHl0aG88L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGhhdmluZyBqdXN0IGtpbGxlZCBDb3R5cywKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IHRoaW5rIGl0IHNhZmUgdG8gdGFrZSBoaXMgY2hhbmNlIG9mIGEgcGxhY2Ugb2YgcmVmdWdlLCBoZSBjYW1lIHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICBhcHBsaWVkIGZvciB5b3VyIGNpdGl6ZW5zaGlwLCBhbmQgdGhvdWdodCB5b3UgdGhlIGZpbmVzdCBwZW9wbGUgaW4gdGhlIHdvcmxkLgogICAgICAgICAgICAgICAgICAgIEJ1dCBub3cgdGhhdCBoZSB0aGlua3MgcmVsYXRpb25zIHdpdGggUGhpbGlwIG1vcmUgYWR2YW50YWdlb3VzIHRvIGhpbSwgaGUgdGFrZXMKICAgICAgICAgICAgICAgICAgICBQaGlsaXAncyBzaWRlLCB3aXRob3V0IHRoZSBzbGlnaHRlc3QgcmVnYXJkIGZvciB5b3UuIE5vLCBtZW4gb2YgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlB5dGhvPC9zdXJuYW1lPjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsgd2hlbiBtZW4gZ2l2ZSB0aGVpciBsaXZlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBwdXJzdWl0IG9mIHRoZWlyIG93biBhbWJpdGlvbnMsIEkgc2F5IHRoYXQgdGhlcmUgaXMgbm8gc3RhYmlsaXR5IGFuZCBubyBob25lc3R5CiAgICAgICAgICAgICAgICAgICAgdG8gYmUgZm91bmQgaW4gdGhlbS4gRXZlcnkgc2Vuc2libGUgbWFuIG11c3QgZ2V0IHRoZSBiZXR0ZXIgb2Ygc3VjaCBwZW9wbGUgYnkKICAgICAgICAgICAgICAgICAgICB3YXJ5IGNvbmR1Y3Q6IGhlIHNob3VsZCBub3QgYmVnaW4gYnkgdHJ1c3RpbmcgYW5kIGVuZCBieSBkZW5vdW5jaW5nIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.128'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjgiIHVuaXQ9InNlY3Rpb24iIC8+QXRoZW5pYW5zLCBpZiB3ZSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBhc3N1bWUs4oCUdGhvdWdoIGl0IGlzIHRoZSByZXZlcnNlIG9mIHRoZSB0cnV0aCzigJR0aGF0CiAgICAgICAgICAgICAgICAgICAgQ2hhcmlkZW11cyBoaW1zZWxmIGhhcyBiZWVuLCBpcyBzdGlsbCwgYW5kIHdpbGwgcmVtYWluIGRldm90ZWQgdG8gdXMsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgd2lsbCBuZXZlciBlbnRlcnRhaW4gYW55IG90aGVyIHNlbnRpbWVudCwgaXQgaXMgbm90IGEgd2hpdCB0aGUgbW9yZSB3aXNlIHRvCiAgICAgICAgICAgICAgICAgICAgcGFzcyBzdWNoIGRlY3JlZXMgZm9yIGhpbS4gSWYgaGUgaGFkIGFjY2VwdGVkIHRoZSBzZWN1cml0eSBvZmZlcmVkIGJ5IHRoZSBkZWNyZWUKICAgICAgICAgICAgICAgICAgICBmb3IgYW55IG90aGVyIHB1cnBvc2UgdGhhbiB0aGUgaW50ZXJlc3RzIG9mIENlcnNvYmxlcHRlcywgdGhlIGRhbmdlciB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBsZXNzOyBidXQsIGluIGZhY3QsIEkgZmluZCBvbiBhIGNhbGN1bGF0aW9uIG9mIHByb2JhYmlsaXRpZXMgdGhhdCB0aGUgbWFuCiAgICAgICAgICAgICAgICAgICAgZm9yIHdob3NlIGJlbmVmaXQgaGUgd2lsbCB0dXJuIHRvIGFjY291bnQgdGhlIGFkdmFudGFnZSBnaXZlbiBieSB0aGUgZGVjcmVlIGlzCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBlcXVhbGx5IHVud29ydGh5IG9mIGhpcyBjb25maWRlbmNlIGFuZCBvZiBvdXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.129'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9ic2VydmUgaG93IGhvbmVzdGx5IEkKICAgICAgICAgICAgICAgICAgICBleGFtaW5lIHRoZSBzZXZlcmFsIHBvaW50cywgYW5kIGhvdyBlbnRpcmVseSByZWFzb25hYmxlIGFyZSBteSBhcHByZWhlbnNpb25zLiBJCiAgICAgICAgICAgICAgICAgICAgbG9vayBhdCBDb3R5cywgYW5kIEkgZmluZCB0aGF0IGhlIHdhcyByZWxhdGVkIGJ5IG1hcnJpYWdlIHRvIElwaGljcmF0ZXMgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBkZWdyZWUgYXMgQ2Vyc29ibGVwdGVzIHRvIENoYXJpZGVtdXM7IGFuZCB0aGF0IHRoZSBhY2hpZXZlbWVudHMgb2YKICAgICAgICAgICAgICAgICAgICBJcGhpY3JhdGVzIG9uIGJlaGFsZiBvZiBDb3R5cyB3ZXJlIGZhciBtb3JlIGltcG9ydGFudCBhbmQgbWVyaXRvcmlvdXMgdGhhbgogICAgICAgICAgICAgICAgICAgIGFueXRoaW5nIHRoYXQgQ2hhcmlkZW11cyBoYXMgZG9uZSBmb3IgQ2Vyc29ibGVwdGVzLiBMZXQgdXMgY29uc2lkZXIgaXQgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIHdheS4gPC90cmFuc2xhdGlvbj4="
translation['23.130'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzAiIHVuaXQ9InNlY3Rpb24iIC8+Tm8gZG91YnQgeW91IHJlbWVtYmVyLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IElwaGljcmF0ZXMgd2FzIGEgdmVyeQogICAgICAgICAgICAgICAgICAgIGZvcnR1bmF0ZSBtYW4sIHdpdGggaGlzIGJyb256ZSBlZmZpZ3ksIGhpcyBmcmVlIGJvYXJkIGF0IHRoZSBUb3duIEhhbGwsIGFuZAogICAgICAgICAgICAgICAgICAgIG90aGVyIGdyYW50cyBhbmQgZGlzdGluY3Rpb25zLiBOZXZlcnRoZWxlc3MgaGUgaGFkIHRoZSBjb3VyYWdlIHRvIGZpZ2h0IGEgYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgYXQgc2VhIGFnYWluc3Qgb3VyIGNvbW1hbmRlcnMgaW4gZGVmZW5jZSBvZiBDb3R5cywgc2V0dGluZyBhIGhpZ2hlciB2YWx1ZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBzYWx2YXRpb24gb2YgdGhhdCBraW5nIHRoYW4gdXBvbiBhbGwgdGhlIGhvbm9ycyBoZSBlbmpveWVkIGluIHlvdXIgY2l0eS4gSWYgeW91cgogICAgICAgICAgICAgICAgICAgIHJlc2VudG1lbnQgaGFkIG5vdCBiZWVuIG1vcmUgcmVzdHJhaW5lZCB0aGFuIGhpcyBpbXBldHVvc2l0eSwgbm90aGluZyBjb3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgc2F2ZWQgaGltIGZyb20gYmVpbmcgdGhlIG1vc3QgbWlzZXJhYmxlIG9mIG1hbmtpbmQuIDwvdHJhbnNsYXRpb24+"
translation['23.131'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gc3BpdGUgb2YgdGhhdCwgd2hlbiBDb3R5cywgd2hvIG93ZWQgaGlzIGRlbGl2ZXJhbmNlIHRvCiAgICAgICAgICAgICAgICAgICAgSXBoaWNyYXRlcywgYW5kIGhhZCBoYWQgcHJhY3RpY2FsIGV4cGVyaWVuY2Ugb2YgaGlzIGxveWFsdHksIGJlbGlldmVkIGhpbXNlbGYgdG8KICAgICAgICAgICAgICAgICAgICBiZSBwZXJtYW5lbnRseSBvdXQgb2YgZGFuZ2VyLCBoZSB0b29rIG5vIHBhaW5zIHRvIHJld2FyZCBoaW0sIGFuZCBuZXZlciBzaG93ZWQKICAgICAgICAgICAgICAgICAgICB5b3UgYW55IGNpdmlsaXR5IHRocm91Z2ggaGlzIGFnZW5jeSBpbiB0aGUgaG9wZSBvZiB3aW5uaW5nIGZvcmdpdmVuZXNzIGZvciBoaXMKICAgICAgICAgICAgICAgICAgICBwYXN0IGNvbmR1Y3QuIE9uIHRoZSBjb250cmFyeSwgaGUgY2xhaW1lZCBoaXMgaGVscCBpbiBiZXNpZWdpbmcgdGhlIHJlc3Qgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIHN0cm9uZ2hvbGRzLCA8L3RyYW5zbGF0aW9uPg=="
translation['23.132'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kLCBvbiBoaXMgcmVmdXNhbCwgaGUgbWFkZSBhbgogICAgICAgICAgICAgICAgICAgIGF0dGFjayBpbiBwZXJzb24gb24gdGhlIHN0cm9uZ2hvbGRzLCB0YWtpbmcgd2l0aCBoaW0gdGhlIGZvcmNlcyBjb2xsZWN0ZWQgYnkKICAgICAgICAgICAgICAgICAgICBJcGhpY3JhdGVzIGFzIHdlbGwgYXMgaGlzIGJhcmJhcmlhbiB0cm9vcHMsIGFuZCBlbmdhZ2luZyB0aGUgc2VydmljZXMgb2YKICAgICAgICAgICAgICAgICAgICBDaGFyaWRlbXVzLiBIZSByZWR1Y2VkIElwaGljcmF0ZXMgdG8gc3VjaCBoZWxwbGVzc25lc3MgdGhhdCBoZSB3aXRoZHJldyB0bwogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFudGlzc2EiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFudGlzc2EiPkFudGlzc2E8L3BsYWNlTmFtZT4sIGFuZCBhZnRlcndhcmRzIHRvCiAgICAgICAgICAgICAgICAgICAgRHJ5cywgYW5kIGxpdmVkIHRoZXJlOyBmb3IgaGUgZGlkIG5vdCB0aGluayBoZSBjb3VsZCBob25vcmFibHkgcmV0dXJuIHRvIHlvdSwKICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGhhZCBzbGlnaHRlZCBmb3IgdGhlIHNha2Ugb2YgYSBUaHJhY2lhbiBhbmQgYSBiYXJiYXJpYW4uIE9uIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIGhhbmQsIGhlIHRob3VnaHQgaXQgZGFuZ2Vyb3VzIHRvIHJlbWFpbiBhdCB0aGUgY291cnQgb2YgYSBraW5nIHdob20gaGUgaGFkIGZvdW5kCiAgICAgICAgICAgICAgICAgICAgc28gbmVnbGlnZW50IG9mIGhpcyBzYWZldHkuIDwvdHJhbnNsYXRpb24+"
translation['23.133'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHN1cHBvc2UsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCBDZXJzb2JsZXB0ZXMgYWxzbywKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgaGlzIHBvd2VyIGVuaGFuY2VkIGJ5IHRoZSBpbW11bml0eSB0aGF0IGlzIGJlaW5nIHByb2N1cmVkIGZvciBDaGFyaWRlbXVzLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBkaXNkYWluIHRoYXQgbWFuLCBhbmQgaW5pdGlhdGUgcGxvdHMgYW5kIGRpc3R1cmJhbmNlcyBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgeW91LOKAlGFyZSB5b3UgY29udGVudCwgYXMgbG9uZyBhcyBDaGFyaWRlbXVzIGlzIG1pc2xlZCwgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGZ1cm5pc2hlZCB0aGUgVGhyYWNpYW4gd2l0aCBzdHJlbmd0aCB0byBmaWdodCB5b3U/IEkgaG9wZSBub3QhIEhlcmUgaXMgdGhlIHZpZXcKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgdGhpbmsgdGhlIGp1c3Qgb25lOiBpZiBDaGFyaWRlbXVzIG1ha2VzIGl0IGhpcyBidXNpbmVzcyB0byBnZXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBkZWNyZWVzLCBhZnRlciBwZXJjZWl2aW5nIGFuZCBmb3Jlc2VlaW5nIHRoYXQgcGVyaWwsIHlvdSBtdXN0IGRpc3RydXN0IGhpbSBhcyBhbgogICAgICAgICAgICAgICAgICAgIGludHJpZ3Vlci4gPC90cmFuc2xhdGlvbj4="
translation['23.134'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIG90aGVyIGhhbmQsIGlmIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGZhaWxlZCB0byBkaXNjZXJuIHRoZSBwZXJpbCwgdGhlIG1vcmUgeW91IGNyZWRpdCBoaW0gd2l0aCBnb29kIGludGVudGlvbnMsIHRoZQogICAgICAgICAgICAgICAgICAgIG1vcmUgZm9yZXRob3VnaHQgeW91IHNob3VsZCBleGVyY2lzZSBmb3IgaGlzIHNha2UgYXMgd2VsbCBhcyB5b3VyIG93bi4gSG9uZXN0CiAgICAgICAgICAgICAgICAgICAgZnJpZW5kcyBzaG91bGQgbm90IGJlc3RvdyB1cG9uIHRoZWlyIHdlbGwtd2lzaGVycyBzdWNoIGZhdm91cnMgYXMgd2lsbCBicmluZwogICAgICAgICAgICAgICAgICAgIGRpc2FzdGVyIHRvIGJvdGggYWxpa2UsIGJ1dCBzaG91bGQgcmF0aGVyIGNvb3BlcmF0ZSBpbiBhbnkgYWN0aW9uIHRoYXQgdGVuZHMgdG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBjb21tb24gYWR2YW50YWdlOyBhbmQgd2hlbiBhIG1hbiBpcyBtb3JlIGZhci1zaWdodGVkIHRoYW4gaGlzIGZyaWVuZCwgaGUKICAgICAgICAgICAgICAgICAgICBzaG91bGQgb3JkZXIgdGhpbmdzIGZvciB0aGUgYmVzdCwgYW5kIG5vdCB0cmVhdCB0aGUgZ3JhdGlmaWNhdGlvbiBvZiB0aGUgbW9tZW50CiAgICAgICAgICAgICAgICAgICAgYXMgb2YgbW9yZSB2YWx1ZSB0aGFuIGFsbCBmdXR1cmUgdGltZS4gPC90cmFuc2xhdGlvbj4="
translation['23.135'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1vcmVvdmVyLCBJIGNhbm5vdCBkaXNjb3ZlciBvbiByZWZsZWN0aW9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCBDZXJzb2JsZXB0ZXMsIHRob3VnaCBib3RoIGJhcmJhcm91cyBhbmQgZmFpdGhsZXNzLCBpcyBsaWtlbHkgdG8gdGFrZSBhbnkKICAgICAgICAgICAgICAgICAgICBwYWlucyBub3QgdG8gaW5qdXJlIENoYXJpZGVtdXMgc28gc2VyaW91c2x5OyBmb3Igd2hlbiBJIGxvb2sgYmFja3dhcmRzIGFuZAogICAgICAgICAgICAgICAgICAgIG9ic2VydmUgdGhlIGFkdmFudGFnZXMgb2Ygd2hpY2ggQ290eXMgd2FzIGdvaW5nIHRvIGRlcHJpdmUgSXBoaWNyYXRlcyB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNsaWdodGVzdCBjb25zaWRlcmF0aW9uIGZvciBoaW0sIEkgcmVhbGx5IGNhbm5vdCB0aGluayB0aGF0IENlcnNvYmxlcHRlcwogICAgICAgICAgICAgICAgICAgIHdvdWxkIHRyb3VibGUgaGltc2VsZiBhYm91dCB0aGUgbG9zc2VzIHRoYXQgd2lsbCBmYWxsIG9uIENoYXJpZGVtdXMuIDwvdHJhbnNsYXRpb24+"
translation['23.136'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzYiIHVuaXQ9InNlY3Rpb24iIC8+Q290eXMgZXhwZWN0ZWQgdG8gcm9iIElwaGljcmF0ZXMgb2YgaG9ub3JzLCBvZgogICAgICAgICAgICAgICAgICAgIG1haW50ZW5hbmNlLCBvZiBzdGF0dWVzLCBvZiB0aGUgY291bnRyeSB0aGF0IG1hZGUgaGltIGEgbWFuIHRvIGJlIGVudmllZCwgSSBtYXkKICAgICAgICAgICAgICAgICAgICBhbG1vc3Qgc2F5IG9mIGV2ZXJ5dGhpbmcgdGhhdCBtYWRlIGxpZmUgd29ydGggbGl2aW5nOyB5ZXQgaGUgaGFkIG5vIHNjcnVwbGUuCiAgICAgICAgICAgICAgICAgICAgQnV0LCByZWFsbHksIHdoYXQgaXMgdGhlcmUgb2Ygd2hpY2ggdGhpcyBtYW4gc2hvdWxkIGJlIGFueGlvdXMgbm90IHRvIGRlcHJpdmUKICAgICAgICAgICAgICAgICAgICBDaGFyaWRlbXVzPyBIZSBoYXMgbm8gcG9zc2Vzc2lvbnMgd2hhdHNvZXZlciBpbiB5b3VyIGNpdHks4oCUbmVpdGhlcgogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLCBub3IgYSBzdGF0dWUsIG5vciBraW5kcmVkLCBub3IgYW55dGhpbmcgZWxzZS4gPC90cmFuc2xhdGlvbj4="
translation['23.137'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzciIHVuaXQ9InNlY3Rpb24iIC8+SWYgQ2Vyc29ibGVwdGVzIGlzIGJ5IG5hdHVyZSBub3QgYSBtYW4gb2YgaGlzIHdvcmQsIGlmIGhlIGlzCiAgICAgICAgICAgICAgICAgICAganVzdGx5IGRpc3RydXN0ZWQgYmVjYXVzZSBvZiBoaXMgcGFzdCBiZWhhdmlvciwgYW5kIGlmIHRoZXJlIGlzIG5vdGhpbmcgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgcG9saXRpY2FsIHNpdHVhdGlvbiB0aGF0IHNob3VsZCBpbmR1Y2UgaGltLCBldmVuIGFnYWluc3QgaGlzIGp1ZGdlbWVudCBhbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyLCB0byBwcm9tb3RlIHRoZSB3ZWxmYXJlIG9mIENoYXJpZGVtdXMsIGZvciB3aGF0IHJlYXNvbiBzaG91bGQgd2UsIGluCiAgICAgICAgICAgICAgICAgICAgc2hlZXIgYWJzb2x1dGUgc3R1cGlkaXR5LCBoZWxwIGhpbSB0byBhY2NvbXBsaXNoIGhpcyBkZXNpcmVzLCBldmVuIHRvIG91ciBvd24KICAgICAgICAgICAgICAgICAgICBkZXRyaW1lbnQ/IEkgc2VlIG5vIHJlYXNvbi4gPC90cmFuc2xhdGlvbj4="
translation['23.138'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFwYXJ0IHRoZW4gZnJvbSB0aGUgZmFjdCB0aGF0IHRoaXMgZGVjcmVlIGRvZXMgbm90IGZ1cnRoZXIgb3VyCiAgICAgICAgICAgICAgICAgICAgcG9saWN5LCB5b3UgbXVzdCBiZSB3YXJuZWQgdGhhdCwgYXMgcmVnYXJkcyByZXB1dGF0aW9uIGFsc28sIGl0IGRvZXMgbm90IGZ1cnRoZXIKICAgICAgICAgICAgICAgICAgICB0aGUgaW50ZXJlc3Qgb2Ygb3VyIGNpdHkgdG8gYmUga25vd24gdG8gaGF2ZSBlbmFjdGVkIGFueXRoaW5nIG9mIHRoZSBzb3J0LiBJZiwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGUgZGVjcmVlIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgbWFkZSBmb3IgdGhlIGJlbmVmaXQgb2YgYSBtYW4gZHdlbGxpbmcgaW4gYSBmcmVlIHN0YXRlLCBhbmQgbGl2aW5nIHVuZGVyIGl0cwogICAgICAgICAgICAgICAgICAgIGxhd3MgYXMgYSBmcmVlIGNpdGl6ZW4sIGl0IHdvdWxkIGhhdmUgYmVlbiBsZXNzIGRpc2NyZWRpdGFibGUsIHRob3VnaCBzdGlsbAogICAgICAgICAgICAgICAgICAgIHVud2FycmFudGVkOyBidXQgaW4gZmFjdCBpdCBoYXMgYmVlbiBtYWRlIGZvciBDaGFyaWRlbXVzLCBhIG1hbiBub3QgZG9taWNpbGVkIGluCiAgICAgICAgICAgICAgICAgICAgYW55IGZyZWUgc3RhdGUgYXQgYWxsLCBidXQgY29tbWFuZGluZyBhbiBhcm15IGZvciBhIFRocmFjaWFuIGFuZCBhbiBhdXRvY3JhdCwKICAgICAgICAgICAgICAgICAgICBhbmQgbWFsdHJlYXRpbmcgcGVvcGxlIGJ5IHJveWFsIGF1dGhvcml0eS4gPC90cmFuc2xhdGlvbj4="
translation['23.139'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzkiIHVuaXQ9InNlY3Rpb24iIC8+WW91IGNhbm5vdCBidXQga25vdyBob3cgYWxsIHRoZXNlIG1lcmNlbmFyeSBvZmZpY2VycyBzZWl6ZSB1cG9uIGZyZWUgSGVsbGVuaWMKICAgICAgICAgICAgICAgICAgICBjaXRpZXMsIGFuZCB0cnkgdG8gZG9taW5hdGUgdGhlbS4gVGhleSBtYXJjaCBhYm91dCB0aHJvdWdoIGNvdW50cnkgYWZ0ZXIgY291bnRyeQogICAgICAgICAgICAgICAgICAgIGFzIHRoZSBjb21tb24gZW5lbWllcywgaWYgdGhlIHRydXRoIG11c3QgYmUgdG9sZCwgb2YgZXZlcnkgbWFuIHdob3NlIHdpc2ggaXMgdG8KICAgICAgICAgICAgICAgICAgICByZXNpZGUgY29uc3RpdHV0aW9uYWxseSBhbmQgYXMgYSBmcmVlIG1hbiBpbiBoaXMgb3duIGZhdGhlcmxhbmQuIE1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGlzIGl0IGNyZWRpdGFibGUgdG8geW91LAogICAgICAgICAgICAgICAgICAgIGlzIGl0IGRpZ25pZmllZCwgdGhhdCB5b3Ugc2hvdWxkIGJlIGtub3duIHRvIGhhdmUgY2FycmllZCBhIG1lYXN1cmUgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gb2YgYSBmZWxsb3cgd2hvLCB0byBzYXRpc2Z5IGhpcyBncmVlZCwgaXMgcmVhZHkgdG8gZmFsbCBmb3VsIG9mCiAgICAgICAgICAgICAgICAgICAgYW55Ym9keSB3aG8gY29tZXMgaGlzIHdheSwgYW5kIHRvIGhhdmUgZ2l2ZW4gbm90aWNlIG9mIGV4cHVsc2lvbiBmcm9tIHlvdXIKICAgICAgICAgICAgICAgICAgICBhbGxpYW5jZSB0byB0aGUgZGVmZW5kZXJzIG9mIHRoZWlyIG93biBpbmRlcGVuZGVuY2U/IDwvdHJhbnNsYXRpb24+"
translation['23.140'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDAiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG15IHBhcnQsIEkgY2Fubm90IHJlZ2FyZCBzdWNoIGFjdGlvbiBhcyBjb25zaXN0ZW50IHdpdGgKICAgICAgICAgICAgICAgICAgICB5b3VyIGhvbm9yIG9yIHlvdXIgZ29vZCBmYW1lLiBJdCBtdXN0IGJlIGRpc2NyZWRpdGFibGUsIGZpcnN0IHRvIGRlbm91bmNlIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIGZvciBnaXZpbmcgd3JpdHRlbiBsaWNlbmNlIHRvIHRoZSBLaW5nIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAwMjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDAyMzEiPlBlcnNpYTwvcGxhY2VOYW1lPiB0byBkbyB3aGF0IGhlIGxpa2VzIHRvIHRoZSBIZWxsZW5pYwogICAgICAgICAgICAgICAgICAgIGluaGFiaXRhbnRzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMDAwMDA0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDEwMDAwMDQiPkFzaWE8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkJ5IHRoZSBQZWFjZSBvZiBBbnRhbGNpZGFzLCAzODcuPC9ub3RlPiBhbmQgdGhlbiB0byBwdXQKICAgICAgICAgICAgICAgICAgICBFdXJvcGVhbiBIZWxsZW5lcywgYW5kIGV2ZXJ5Ym9keSB3aG9tIENoYXJpZGVtdXMgdGhpbmtzIGhlIGNhbiBvdmVycG93ZXIsIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIG1lcmN5IG9mIENlcnNvYmxlcHRlcy4gQW5kIHRoYXQgaXMgcHJlY2lzZWx5IHRoZSBlZmZlY3Qgb2YgdGhpcyBkZWNyZWUsIHdoZW4gbm8KICAgICAgICAgICAgICAgICAgICBkaXN0aW5jdGlvbiBpcyBkcmF3biBhcyB0byB3aGF0IGhpcyBnZW5lcmFsIG1heSBvciBtYXkgbm90IGRvLCBidXQgd2hlbiBhbGwgd2hvCiAgICAgICAgICAgICAgICAgICAgcmVzaXN0IGhpcyBhdHRhY2tzIGFyZSBtZW5hY2VkIHdpdGggc3VjaCB0ZXJyb3JzLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.141'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHRoZSBuZXh0IHBsYWNlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIHdvdWxkIGxpa2UgdG8gcmVsYXRlIGEKICAgICAgICAgICAgICAgICAgICBwaWVjZSBvZiBoaXN0b3J5LCB3aGljaCB3aWxsIG1ha2UgaXQgc3RpbGwgbW9yZSBldmlkZW50IHRvIHlvdSB0aGF0IGl0IGlzIHlvdXIKICAgICAgICAgICAgICAgICAgICBib3VuZGVuIGR1dHkgdG8gYWJyb2dhdGUgdGhpcyBkZWNyZWUuIE9uY2UgdXBvbiBhIHRpbWUsIG9uIGEgY2VydGFpbiBvY2Nhc2lvbiwKICAgICAgICAgICAgICAgICAgICB5b3UgZ2F2ZSB5b3VyIGNpdGl6ZW5zaGlwIHRvIEFyaW9iYXJ6YW5lcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2F0cmFwIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjEzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MTMiPlBocnlnaWE8L3BsYWNlTmFtZT4uIFRoZSBkYXRlIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbWUgdGltZSBiZXR3ZWVuIDM2OCBhbmQgMzYyLjwvbm90ZT4gYW5kIGFsc28sIG9uIGhpcyBhY2NvdW50LCB0bwogICAgICAgICAgICAgICAgICAgIFBoaWxpc2N1cyzigJRqdXN0IGFzIHlvdSBoYXZlIHJlY2VudGx5IGdpdmVuIGl0IHRvIENoYXJpZGVtdXMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHNha2Ugb2YgQ2Vyc29ibGVwdGVzLiBQaGlsaXNjdXMsIHdobyByZXNlbWJsZWQgQ2hhcmlkZW11cyBpbiBoaXMgY2hvaWNlIG9mIGEKICAgICAgICAgICAgICAgICAgICBjYXJlZXIsIGJlZ2FuIHRvIHVzZSB0aGUgcG93ZXIgb2YgQXJpb2JhcnphbmVzIGJ5IG9jY3VweWluZyBIZWxsZW5pYyBjaXRpZXMuIEhlCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZCB0aGVtIGFuZCBjb21taXR0ZWQgbWFueSBvdXRyYWdlcywgbXV0aWxhdGluZyBmcmVlLWJvcm4gYm95cywgaW5zdWx0aW5nCiAgICAgICAgICAgICAgICAgICAgd29tZW4sIGFuZCBiZWhhdmluZyBpbiBnZW5lcmFsIGFzIHlvdSB3b3VsZCBleHBlY3QgYSBtYW4sIHdobyBoYWQgYmVlbiBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgdXAgd2hlcmUgdGhlcmUgd2VyZSBubyBsYXdzLCBhbmQgbm9uZSBvZiB0aGUgYWR2YW50YWdlcyBvZiBhIGZyZWUgY29uc3RpdHV0aW9uLAogICAgICAgICAgICAgICAgICAgIHRvIGJlaGF2ZSBpZiBoZSBhdHRhaW5lZCB0byBwb3dlci4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2MTMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjYxMyI+UGhyeWdpYTwvcGxhY2VOYW1lPi4gVGhlIGRhdGUgaXMKICAgICAgICAgICAgICAgICAgICAgICAgc29tZSB0aW1lIGJldHdlZW4gMzY4IGFuZCAzNjIuPC90cmFuc2xhdGlvbj4="
translation['23.142'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoZXJlCiAgICAgICAgICAgICAgICAgICAgd2VyZSB0d28gbWVuIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNTc5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI1NzkiPkxhbXBzYWN1czwvcGxhY2VOYW1lPiwgb25lIG5hbWVkCiAgICAgICAgICAgICAgICAgICAgVGhlcnNhZ29yYXMgYW5kIHRoZSBvdGhlciBFeGVjZXN0dXMsIHdobyBoYWQgZm9ybWVkIHZpZXdzIGFib3V0IHR5cmFubnkgdmVyeQogICAgICAgICAgICAgICAgICAgIG11Y2ggbGlrZSB0aG9zZSB0aGF0IHByZXZhaWwgaGVyZS4gVGhlc2UgbWVuIHB1dCBQaGlsaXNjdXMgdG8gZGVhdGgsIGFzIGhlCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWQsIGJlY2F1c2UgdGhleSBmZWx0IGl0IHRoZWlyIGR1dHkgdG8gbGliZXJhdGUgdGhlaXIgb3duIGZhdGhlcmxhbmQuIE5vdwogICAgICAgICAgICAgICAgICAgIHN1cHBvc2UgdGhhdCBvbmUgb2YgdGhvc2Ugb3JhdG9ycyB3aG8gc3Bva2Ugb24gYmVoYWxmIG9mIFBoaWxpc2N1cywgYXQgYSB0aW1lCiAgICAgICAgICAgICAgICAgICAgd2hlbiBoZSB3YXMgcGF5bWFzdGVyIG9mIHRoZSBtZXJjZW5hcmllcyBhdCBQZXJpbnRodXMsIHdoZW4gaGUgaGVsZCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4sIGFuZCB3YXMgdGhlIG1vc3QKICAgICAgICAgICAgICAgICAgICBwb3dlcmZ1bCBvZiB2aWNlcm95cywgaGFkIHRoZW4sIGxpa2UgQXJpc3RvY3JhdGVzIHRvZGF5LCBtb3ZlZCBhIHJlc29sdXRpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIHdob3NvZXZlciBraWxsZWQgUGhpbGlzY3VzIHNob3VsZCBiZSBsaWFibGUgdG8gc2VpenVyZSBpbiBhbGxpZWQgdGVycml0b3J5LiBJCiAgICAgICAgICAgICAgICAgICAgZW50cmVhdCB5b3UgdG8gcmVmbGVjdCB1cG9uIHRoZSBkZXB0aCBvZiBpZ25vbWlueSB0byB3aGljaCBvdXIgY2l0eSB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgZmFsbGVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.143'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcnNhZ29yYXMgYW5kIEV4ZWNlc3R1cyBjYW1lIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjcyIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzIiPkxlc2JvczwvcGxhY2VOYW1lPiBhbmQgbGl2ZWQgdGhlcmUuIFdlbGwsIGlmCiAgICAgICAgICAgICAgICAgICAgYW55IHNvbiBvciBhbnkgZnJpZW5kIG9mIFBoaWxpc2N1cyBoYWQgbGFpZCBoYW5kcyBvbiB0aGVtLCB0aGV5IHdvdWxkIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGdpdmVuIHVwIHRvIGp1c3RpY2UgaW4gcHVyc3VhbmNlIG9mIHlvdXIgZGVjcmVlOyBhbmQgYXNzdXJlZGx5IHlvdSB3b3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBndWlsdHkgb2YgYSBzaGFtZWZ1bCBhbmQgYSBzY2FuZGFsb3VzIGFjdCBpZiwgd2hpbGUgb3N0ZW50YXRpb3VzbHkgc2V0dGluZwogICAgICAgICAgICAgICAgICAgIHVwIGJyb256ZSBzdGF0dWVzIG9mIHRoZSBtZW4gd2hvIHBlcmZvcm1lZCBhIHNpbWlsYXIgZmVhdCBpbiB5b3VyIG93biBjaXR5LCBhbmQKICAgICAgICAgICAgICAgICAgICBsb2FkaW5nIHRoZW0gd2l0aCB1bnBhcmFsbGVsZWQgaG9ub3JzLCB5b3UgaGFkIGNvbmRlbW5lZCB0byBvdXRsYXdyeSB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBpbiBzb21lIG90aGVyIGNvdW50cnkgaGFkIGV4aGliaXRlZCB0aGUgc2VsZnNhbWUgc3Bpcml0IG9mIHBhdHJpb3Rpc20uIEkgYW0gZ2xhZAogICAgICAgICAgICAgICAgICAgIHRvIHNheSB0aGF0LCBpbiB0aGUgY2FzZSBvZiBQaGlsaXNjdXMsIGl0IHdhcyBub3QgeW91ciBmYXRlIHRvIGJlIGVuc25hcmVkIGFuZAogICAgICAgICAgICAgICAgICAgIHRvIGluY3VyIHRoYXQgZ3JlYXQgZGlzaG9ub3I7IGJ1dCBpbiB0aGUgcHJlc2VudCBjYXNlLCBpZiB5b3Ugd2lsbCBoZWVkIG15CiAgICAgICAgICAgICAgICAgICAgd2FybmluZywgeW91IHdpbGwgYmUgdmVyeSBjYXJlZnVsOyBmb3IsIGlmIHRoZXJlIGlzIG5vIGxpbWl0aW5nIGNsYXVzZSBhbmQgaWYKICAgICAgICAgICAgICAgICAgICB0aGUgcGhyYXNlIOKAnHdob3NvZXZlciBzaGFsbCBraWxsIENoYXJpZGVtdXPigJ0gaXMgdW5xdWFsaWZpZWQsCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgcXVpdGUgcG9zc2libGUgdGhhdCB0aGUgb3V0Y29tZSB3aWxsIGJlIHN1Y2ggYXMgSSBoYXZlIGRlc2NyaWJlZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.144'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk15IG5leHQKICAgICAgICAgICAgICAgICAgICBwdXJwb3NlIGlzIGJyaWVmbHkgdG8gZXhhbWluZSB0aGUgcGFzdCBoaXN0b3J5IG9mIENoYXJpZGVtdXMsIGFuZCB0byB1bm1hc2sgdGhlCiAgICAgICAgICAgICAgICAgICAgZXh0cmFvcmRpbmFyeSBhdWRhY2l0eSBvZiBoaXMgZmxhdHRlcmVycy4gSSBwbGVkZ2UgbXlzZWxmIHNpbXBseSB0bwogICAgICAgICAgICAgICAgICAgIHRoaXMs4oCUYW5kIEkgaG9wZSBubyBvbmUgd2lsbCB0YWtlIG15IHBsZWRnZSBpbiBiYWQKICAgICAgICAgICAgICAgICAgICBwYXJ0LOKAlHRoYXQgSSB3aWxsIHNhdGlzZnkgeW91LCBub3Qgb25seSB0aGF0IGhlIGlzIHVud29ydGh5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3RlY3Rpb24gcHJvcG9zZWQgYnkgdGhlIGRlZmVuZGFudCwgYnV0IHRoYXQgaGUgZGVzZXJ2ZXMgdG8gYmUgbW9zdCBzZXZlcmVseQogICAgICAgICAgICAgICAgICAgIHB1bmlzaGVkLCBpZiBjaGFzdGlzZW1lbnQgaXMganVzdGx5IGR1ZSB0byB0aG9zZSB3aG8gd2lzaCB5b3UgaWxsLCBhbmQgY2hlYXQKICAgICAgICAgICAgICAgICAgICB5b3UsIGFuZCBhcmUgYWx3YXlzIHRyeWluZyB0byB0aHdhcnQgeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.145'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDUiIHVuaXQ9InNlY3Rpb24iIC8+SQogICAgICAgICAgICAgICAgICAgIGRhcmUgc2F5IHRoYXQgc29tZSBvZiB5b3UsIHJlZmxlY3RpbmcgdGhhdCB0aGUgZmVsbG93IGhhcyBmaXJzdCBiZWVuIG1hZGUgYQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW4sIGFuZCB0aGVyZWFmdGVyIGhhcyBiZWVuIGRlY29yYXRlZCB3aXRoIGNyb3ducyBvZiBnb2xkLCBhcmUgYXN0b25pc2hlZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgaGFzIGJlZW4gc3VjaCBhbiBlYXN5IHRhc2sgdG8gZGVsdWRlIHlvdSBzbyBjb21wbGV0ZWx5LiBXZWxsLCB5b3UgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgcXVpdGUgc3VyZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gZGVsdWRlZDsgYW5kIEkgd2lsbCBleHBsYWluIHdoeSBzdWNoIGEgcmVzdWx0IHdhcyB0byBiZSBleHBlY3RlZC4gWW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBwbGVudHkgb2YgZ29vZCBqdWRnZW1lbnQ7IGJ1dCB5b3UgZG8gbm90IGFwcGx5IGl0IHBlcnNpc3RlbnRseS4gPC90cmFuc2xhdGlvbj4="
translation['23.146'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDYiIHVuaXQ9InNlY3Rpb24iIC8+SSBtZWFuIHRoaXMsIGZvciBpbnN0YW5jZTogc3VwcG9zZSB5b3Ugd2VyZSBhc2tlZAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHlvdSByZWdhcmQgYXMgdGhlIG1vc3QgdW5wcmluY2lwbGVkIGJyZWVkIG9mIGNpdGl6ZW5zIHlvdSBoYXZlOyB5b3Ugd291bGQKICAgICAgICAgICAgICAgICAgICBub3QgbmFtZSB0aGUgZmFybWVycywgb3IgdGhlIHRyYWRlcnMsIG9yIHRoZSBzaWx2ZXItbWluZXJzLCBvciBhbnkgY2xhc3MgbGlrZQogICAgICAgICAgICAgICAgICAgIHRob3NlLCBidXQgaWYgYW55IG9uZSBuYW1lZCB0aGUgcGVvcGxlIHdobyBtYWtlIHNwZWVjaGVzIGFuZCBtb3ZlIHJlc29sdXRpb25zCiAgICAgICAgICAgICAgICAgICAgZm9yIGhpcmUsIEkgYW0gc3VyZSB0aGF0IHlvdXIgYXNzZW50IHdvdWxkIGJlIHVuYW5pbW91cy4gU28gZmFyIHlvdXIganVkZ2VtZW50CiAgICAgICAgICAgICAgICAgICAgaXMgZXhjZWxsZW50OyBidXQgaXQgaXMgbm8gbG9uZ2VyIHNvdW5kIGluIHRoZSBzZXF1ZWwuIDwvdHJhbnNsYXRpb24+"
translation['23.147'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDciIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGl0IGlzIG9uIHRoZSB2ZXJ5IHBlb3BsZSB3aG9tIHlvdSByZWdhcmQgYXMgbW9zdAogICAgICAgICAgICAgICAgICAgIHVucHJpbmNpcGxlZCB0aGF0IHlvdSByZWx5IGZvciBhIHJpZ2h0IG9waW5pb24gb2YgYSBtYW4ncyBjaGFyYWN0ZXIgYW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBkZXNjcmliZSB0aGlzIG9yIHRoYXQgbWFuIGFzIHZpcnR1b3VzIG9yIHdpY2tlZCwgbm90IHdoZW4gdGhlIGRlc2NyaXB0aW9uIGlzCiAgICAgICAgICAgICAgICAgICAgaG9uZXN0IGFuZCB0cnVlLCBidXQgd2hlbiBpdCBicmluZ3MgbW9uZXkgaW50byB0aGVpciBvd24gcG9ja2V0cy4gQW5kIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICB3aGF0IHRoZSBvcmF0b3JzIGhhdmUgY29uc3RhbnRseSBkb25lIGluIHJlc3BlY3Qgb2YgQ2hhcmlkZW11cywgYXMgeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBhZ3JlZSB3aGVuIEkgaGF2ZSBnaXZlbiB5b3UgYW4gYWNjb3VudCBvZiBoaXMgcGFzdCBjYXJlZXIuIDwvdHJhbnNsYXRpb24+"
translation['23.148'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgZG8gbm90IHJlY2tvbiBhbW9uZyBoaXMKICAgICAgICAgICAgICAgICAgICBtaXNkZWVkcyB0aG9zZSBjYW1wYWlnbnMgb2YgaGlzIGVhcmx5IGxpZmUsIGluIHdoaWNoIGhlIHNlcnZlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhcyBhIHNsaW5nZXIgb3IKICAgICAgICAgICAgICAgICAgICBsaWdodC1pbmZhbnRyeSBtYW47IG5vciB0aGF0IGhlIG9uY2Ugb3duZWQgYSBwaXJhdGljYWwgc2hpcCBhbmQgcHJleWVkIG9uIHlvdXIKICAgICAgICAgICAgICAgICAgICBhbGxpZXMuIEJ1dCBJIHBhc3MgdGhlc2UgdGhpbmdzIGJ5LiBBbmQgZm9yIHdoYXQgcmVhc29uPyBCZWNhdXNlLCBnZW50bGVtZW4sCiAgICAgICAgICAgICAgICAgICAgaGFyZCBuZWNlc3NpdHkgZG9lcyBhd2F5IHdpdGggYWxsIGNvbnNpZGVyYXRpb24gb2Ygd2hhdCBhbnlvbmUgc2hvdWxkIG9yIHNob3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBkbzsgYW5kIHRoZXJlZm9yZSBpbiBzdWNoIG1hdHRlcnMgYSBjYW5kaWQgZXhhbWluZXIgbXVzdCBub3QgYmUgdG9vCiAgICAgICAgICAgICAgICAgICAgZmFzdGlkaW91cy4gQnV0IGxldCBtZSB0ZWxsIHlvdSBvZiB0aGUgbWlzY2hpZWYgaGUgZGlkIHRvIHlvdSBhdCB0aGUgb3V0c2V0IG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIGNhcmVlciBhcyBhIG1lcmNlbmFyeSBvZmZpY2VyIHdpdGggdHJvb3BzIHVuZGVyIGhpcyBjb21tYW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.149'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDkiIHVuaXQ9InNlY3Rpb24iIC8+Rmlyc3Qgb2YgYWxsLCBoZSB3YXMgaGlyZWQgYnkgSXBoaWNyYXRlcywgYW5kIGRyZXcKICAgICAgICAgICAgICAgICAgICBwYXkgaW4gaGlzIGFybXkgZm9yIG1vcmUgdGhhbiB0aHJlZSB5ZWFycy4gV2hlbiB5b3UgaGFkIGNhc2hpZXJlZCBJcGhpY3JhdGVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBkaXNwYXRjaGVkIFRpbW90aGV1cyBhcyBjb21tYW5kZXItaW4tY2hpZWYgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+IGFuZCB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NyI+Q2hlcnNvbmVzdXM8L3BsYWNlTmFtZT4sIHRoZSBtYW4ncyBmaXJzdCBwZXJmb3JtYW5jZSB3YXMKICAgICAgICAgICAgICAgICAgICB0byBzdXJyZW5kZXIgdG8gdGhlIEFtcGhpcG9saXRhbnMgdGhvc2UgaG9zdGFnZXMgb2YgdGhlaXJzIHdob20gSXBoaWNyYXRlcyBoYWQKICAgICAgICAgICAgICAgICAgICB0YWtlbiBmcm9tIEhhcnBhbHVzLCBhbmQgcHV0IHVuZGVyIGhpcyBjYXJlLCBhbHRob3VnaCB5b3UgaGFkIG9yZGVyZWQgdGhlbSB0byBiZQogICAgICAgICAgICAgICAgICAgIGNvbnZleWVkIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gVGhhdCBhY3QKICAgICAgICAgICAgICAgICAgICBwcmV2ZW50ZWQgeW91IGZyb20gb2NjdXB5aW5nIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPi4gU2Vjb25kbHksIHdoZW4gVGltb3RoZXVzIGluIGhpcyB0dXJuIHdhbnRlZCB0byBoaXJlCiAgICAgICAgICAgICAgICAgICAgaGltIGFuZCBoaXMgdHJvb3BzLCBoZSByZWZ1c2VkIHRoZSBlbmdhZ2VtZW50LCBhbmQgcmVwYWlyZWQgYnkgc2VhIHRvIENvdHlzLAogICAgICAgICAgICAgICAgICAgIHRha2luZyB3aXRoIGhpbSB5b3VyIGxpZ2h0IGdhbGxleXMsIHRob3VnaCBoZSB3YXMgcGVyZmVjdGx5IHdlbGwgYXdhcmUgdGhhdAogICAgICAgICAgICAgICAgICAgIENvdHlzIHdhcyB0aGUgbW9zdCBiaXR0ZXIgZW5lbXkgeW91IGhhZCBpbiB0aGUgd29ybGQuIDwvdHJhbnNsYXRpb24+"
translation['23.150'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTAiIHVuaXQ9InNlY3Rpb24iIC8+U3Vic2VxdWVudGx5LCBhZnRlciB0aGUgZGVjaXNpb24gb2YgVGltb3RoZXVzIHRvIHRha2UgdGhlCiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9ucyBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPgogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aG9zZSBhZ2FpbnN0IHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBmaW5kaW5nIHRoYXQgdGhlcmUgd2FzIG5vIG1pc2NoaWVmIGhlIGNvdWxkIGRvIHlvdSBpbiB0aGF0IGNvdW50cnksIGhlIGFnYWluCiAgICAgICAgICAgICAgICAgICAgaGlyZWQgaGltc2VsZiBvdXQs4oCUdGhpcyB0aW1lIHRvIHRoZSBPbHludGhpYW5zLCB3aG8gd2VyZSB5b3VyIGVuZW1pZXMKICAgICAgICAgICAgICAgICAgICBhbmQgd2VyZSB0aGVuIGhvbGRpbmcgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LiBIZSBzZXQgc2FpbCBmcm9tIENhcmRpYSBmb3IgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LCB3aXRoIHRoZSBpbnRlbnRpb24gb2YKICAgICAgICAgICAgICAgICAgICBmaWdodGluZyBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYnV0IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIHZveWFnZSBoZSB3YXMgY2FwdHVyZWQgYnkgb3VyIGZsZWV0LiBCdXQgaW4gdmlldyBvZiB0aGUgbmVlZHMgb2YgdGhlIGhvdXIsIGFuZAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgbWVyY2VuYXJpZXMgd2VyZSB3YW50ZWQgZm9yIHRoZSB3YXIgYWdhaW5zdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4sIGluc3RlYWQgb2YgYmVpbmcgcHVuaXNoZWQKICAgICAgICAgICAgICAgICAgICBmb3IgaGlzIHJlZnVzYWwgdG8gZGVsaXZlciB0aGUgaG9zdGFnZXMsIGFuZCBmb3IgZGVzZXJ0aW5nIHdpdGggdGhlIGxpZ2h0CiAgICAgICAgICAgICAgICAgICAgZ2FsbGV5cyB0byB5b3VyIGVuZW15IENvdHlzLCBndWFyYW50ZWVzIHdlcmUgZXhjaGFuZ2VkLCBhbmQgaGUgZW50ZXJlZCB0aGUKICAgICAgICAgICAgICAgICAgICBjYW1wYWlnbiBhcyB5b3VyIGF1eGlsaWFyeS4gPC90cmFuc2xhdGlvbj4="
translation['23.151'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgb3VnaHQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gZ3JhdGVmdWwgdG8geW91IGJlY2F1c2UgaGlzIGxpZmUgd2FzIHNwYXJlZCB3aGVuIGhlIG1pZ2h0IGp1c3RseSBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBwdXQgdG8gZGVhdGg7IGJ1dCBpbnN0ZWFkIG9mIHRoYXQgdGhlIGNpdHksIGFzIHRob3VnaCBzaGUgb3dlZCBncmF0aXR1ZGUgdG8gaGltLAogICAgICAgICAgICAgICAgICAgIGhhcyBiZXN0b3dlZCB1cG9uIGhpbSBjcm93bnMgYW5kIGZyYW5jaGlzZSBhbmQgZmF2b3VycyBrbm93biB0byB5b3UKICAgICAgICAgICAgICAgICAgICBhbGwu4oCUVG8gcHJvdmUgdGhlIHRydXRoIG9mIHRoZXNlIGFsbGVnYXRpb25zLCBwbGVhc2UgcmVhZCB0aGUgZGVjcmVlCiAgICAgICAgICAgICAgICAgICAgcmVzcGVjdGluZyB0aGUgaG9zdGFnZXMsIHRoZSBkaXNwYXRjaCBvZiBJcGhpY3JhdGVzLCB0aGUgZGlzcGF0Y2ggb2YgVGltb3RoZXVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBsYXN0bHkgdGhpcyBkZXBvc2l0aW9uLuKAlFlvdSB3aWxsIGZpbmQgdGhhdCB3aGF0IEkgYW0gdGVsbGluZyB5b3UKICAgICAgICAgICAgICAgICAgICBpcyBub3QgbWVyZSBnb3NzaXAgYW5kIHJlY3JpbWluYXRpb24sIGJ1dCB0aGUgcGxhaW4gdHJ1dGgu4oCUUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXJzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXJzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.152'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBoYXZlIGhlYXJkCiAgICAgICAgICAgICAgICAgICAgdGhlIGV2aWRlbmNlIG9mIHRoZSBkaXNwYXRjaCBhbmQgdGhlIGRlcG9zaXRpb24sIHByb3ZpbmcgdGhhdCBhdCB0aGUgb3V0c2V0CiAgICAgICAgICAgICAgICAgICAgQ2hhcmlkZW11cyBzb2xkIGhpcyBzZXJ2aWNlcyB0byBhIGNvdW50cnkgd2hlcmUgaGUgZXhwZWN0ZWQgdG8gZmlnaHQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHlvdSwgdGhvdWdoIGhlIGhhZCB0aGUgY2hvaWNlIG9mIG1hbnkgb3RoZXIgbWFya2V0czsgdGhhdCBsYXRlciwgZmluZGluZyB0aGF0IGluCiAgICAgICAgICAgICAgICAgICAgdGhhdCBjb3VudHJ5IGhlIGNvdWxkIGRvIHlvdSBubyBoYXJtLCBoZSBzYWlsZWQgYmFjayB0byBhIHBsYWNlIHdoZXJlIGhlIGhhZCBhCiAgICAgICAgICAgICAgICAgICAgY2hhbmNlIG9mIG9wZXJhdGluZyBhZ2FpbnN0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsKICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCBoZSB3YXMgdGhlIGNoaWVmIGNhdXNlIG9mIHlvdXIgZmFpbHVyZSB0byB0YWtlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPi4gU3VjaCB3ZXJlIHRoZSBlYXJseQogICAgICAgICAgICAgICAgICAgIGV4cGxvaXRzIG9mIENoYXJpZGVtdXMuIFlvdSBtdXN0IG5vdyBsb29rIGF0IGhpcyBsYXRlciBjb25kdWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.153'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFmdGVyIGEgY2VydGFpbiBsYXBzZQogICAgICAgICAgICAgICAgICAgIG9mIHRpbWUsIHdoZW4gdGhlIHdhciB3aXRoIENvdHlzIGhhZCBhbHJlYWR5IGJyb2tlbiBvdXQsIGhlIHNlbnQgYSBsZXR0ZXIgdG8KICAgICAgICAgICAgICAgICAgICB5b3U7IG9yIHJhdGhlciwgbm90IHRvIHlvdSBidXQgdG8gQ2VwaGlzb2RvdHVzLCBmb3IsIGJlaW5nIGNvbnNjaW91cyBvZiBoaXMKICAgICAgICAgICAgICAgICAgICB0cmFuc2dyZXNzaW9ucywgaGUgd2FzIHZlcnkgbXVjaCBvZiB0aGUgb3BpbmlvbiB0aGF0IHRoZSBiZWd1aWxlbWVudCBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2FzIGEgdGFzayBiZXlvbmQgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIHBvd2Vycy4gSW4gdGhpcyBsZXR0ZXIgaGUgdW5kZXJ0b29rIHRvIHJlY292ZXIgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+IGZvciA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT47IGJ1dCBoaXMgcmVhbCBpbnRlbnRpb24gd2FzIGV4YWN0bHkgdGhlIG9wcG9zaXRlLiBZb3UKICAgICAgICAgICAgICAgICAgICBtdXN0IGJlIGluZm9ybWVkIG9mIHRoZSBuYXR1cmUgb2YgdGhpcyBlcGlzdG9sYXJ5IHRyYW5zYWN0aW9uLOKAlGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IGEgbG9uZyBzdG9yeeKAlGFuZCBzbyBnZXQgYW4gaW5zaWdodCBpbnRvIHRoZSBmYXNoaW9uIG9mIHRoaXMgbWFuJ3MKICAgICAgICAgICAgICAgICAgICBkZWFsaW5ncyB3aXRoIHlvdSBmcm9tIGZpcnN0IHRvIGxhc3QuIDwvdHJhbnNsYXRpb24+"
translation['23.154'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTQiIHVuaXQ9InNlY3Rpb24iIC8+QmVpbmcKICAgICAgICAgICAgICAgICAgICBhdCB0aGF0IHRpbWUgZGlzY2hhcmdlZCBmcm9tIHRoZSBzZXJ2aWNlIG9mIFRpbW90aGV1cywgaGUgd2l0aGRyZXcgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEFtcGhpcG9saXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEFtcGhpcG9saXMiPkFtcGhpcG9saXM8L3BsYWNlTmFtZT4sIGNyb3NzZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RyYWl0cyB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sMTAwMDAwNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiwxMDAwMDA0Ij5Bc2lhPC9wbGFjZU5hbWU+LCBhbmQgdGhlcmUsIGJlY2F1c2Ugb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcmVjZW50IGFycmVzdCBvZiBBcnRhYmF6dXMgYnkgQXV0b3BocmFkYXRlcywgaGUgaGlyZWQgb3V0IGhpcyBmb3JjZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiB0byB0aGUgc29ucy1pbi1sYXcgb2YgQXJ0YWJhenVzLiBIZSBoYWQgdGFrZW4gYW5kIGdpdmVuIHBsZWRnZXMsIGJ1dCBoZQogICAgICAgICAgICAgICAgICAgIGlnbm9yZWQgYW5kIGJyb2tlIGhpcyBvYXRocywgYW5kLCBmaW5kaW5nIHRoZSBpbmhhYml0YW50cyBvZiB0aGUgY291bnRyeSwgd2hvCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0aGV5IHdlcmUgZGVhbGluZyB3aXRoIGEgZnJpZW5kLCBvZmYgdGhlaXIgZ3VhcmQsIGhlIHNlaXplZCB0aGVpciB0b3ducywKICAgICAgICAgICAgICAgICAgICBTY2Vwc2lzLCBDZWJyZW4sIGFuZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjMyOSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzI5Ij5JbGl1bTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['23.155'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTUiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIHRha2VuIHBvc3Nlc3Npb24gb2YgdGhlc2Ugc3Ryb25naG9sZHMsIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGEgbWlzYWR2ZW50dXJlIGludG8gd2hpY2ggZXZlbiBhbiBvcmRpbmFyeSBwZXJzb24sIG5vdCB0byBzYXkgYSBtYW4gY2FsbGluZwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgYSBjb21tYW5kZXIsIGNvdWxkIG5ldmVyIGhhdmUgYmx1bmRlcmVkLiBBbHRob3VnaCBoZSBoZWxkIG5vIHBvc2l0aW9uIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlYS1jb2FzdCwgYW5kIGhhZCBubyBtZWFucyBvZiBzdXBwbHlpbmcgaGlzIHRyb29wcyB3aXRoIHByb3Zpc2lvbnMsIGFuZAogICAgICAgICAgICAgICAgICAgIGFsdGhvdWdoIGhlIGhhZCBubyBmb29kIGluIHRoZSB0b3ducywgaGUgcmVtYWluZWQgd2l0aGluIHRoZSB3YWxscywgaW5zdGVhZCBvZgogICAgICAgICAgICAgICAgICAgIGxvb3RpbmcgdGhlIHRvd25zIGFuZCBtYWtpbmcgb2ZmIGluIHB1cnN1YW5jZSBvZiBoaXMgaW50ZW50aW9uIHRvIGRvIG1pc2NoaWVmLgogICAgICAgICAgICAgICAgICAgIEJ1dCBBcnRhYmF6dXMsIGhhdmluZyBiZWVuIHJlbGVhc2VkIGJ5IEF1dG9waHJhZGF0ZXMsIGNvbGxlY3RlZCBhbiBhcm15LCBhbmQKICAgICAgICAgICAgICAgICAgICBhcHBlYXJlZCBvbiB0aGUgc2NlbmU7IGFuZCBoZSBjb3VsZCBkcmF3IHN1cHBsaWVzIGZyb20gdGhlIGZyaWVuZGx5IGNvdW50cmllcyBvZgogICAgICAgICAgICAgICAgICAgIHVwcGVyIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjEzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MTMiPlBocnlnaWE8L3BsYWNlTmFtZT4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE2NjMxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTY2MzEiPkx5ZGlhPC9wbGFjZU5hbWU+LCBhbmQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY3NjAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjc2MCI+UGFwaGxhZ29uaWE8L3BsYWNlTmFtZT4sIHdoaWxlIGZvciBDaGFyaWRlbXVzIG5vdGhpbmcgcmVtYWluZWQgYnV0IHRvIHN0YW5kCiAgICAgICAgICAgICAgICAgICAgYSBzaWVnZS4gPC90cmFuc2xhdGlvbj4="
translation['23.156'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTYiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSByZWFsaXplZCB3aGF0IHRyb3VibGUgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgaW4sIGFuZCBjYW1lIHRvIHRoZSBjb25jbHVzaW9uIHRoYXQgaGUgd291bGQgYmUgcmVkdWNlZCBieSBmYW1pbmUsIGlmIGJ5IG5vCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgbWVhbnMsIGhlIG1hZGUgdGhlIGRpc2NvdmVyeSwgd2hldGhlciBieSBzdWdnZXN0aW9uIG9yIGJ5IGhpcyBvd24gd2l0cywKICAgICAgICAgICAgICAgICAgICB0aGF0IGhpcyBvbmx5IGNoYW5jZSBvZiBzYWx2YXRpb24gbGF5IHdoZXJlIHRoZXJlIGlzIHNhbHZhdGlvbiBmb3IgZXZlcnlib2R5LgogICAgICAgICAgICAgICAgICAgIEFuZCB3aGVyZSBpcyB0aGF0PyBJbiB5b3VyIGdvb2QtbmF0dXJlLCBpZiB0aGF0IGlzIHRoZSByaWdodCB0ZXJtLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LOKAlG9yIGNhbGwgaXQKICAgICAgICAgICAgICAgICAgICB3aGF0IHlvdSB3aWxsLiBIYXZpbmcgcmVhY2hlZCB0aGF0IGNvbmNsdXNpb24sIGhlIGRpc3BhdGNoZWQgdGhlIGxldHRlciB0bwogICAgICAgICAgICAgICAgICAgIHlvdSzigJRhbmQgaXQgaXMgd29ydGggeW91ciB3aGlsZSB0byBoZWFyIGl0IHJlYWQuIEhpcyBkZXNpcmUgd2FzLCBieQogICAgICAgICAgICAgICAgICAgIG1lYW5zIG9mIGEgcHJvbWlzZSB0byByZWNvdmVyIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPiBmb3IgeW91LCBhbmQgb24gdGhlIHByZXRlbmNlIHRoYXQgc3VjaCB3YXMgYWxzbyB0aGUKICAgICAgICAgICAgICAgICAgICB3aXNoIG9mIENlcGhpc29kb3R1cywgYXMgYW4gZW5lbXkgb2YgQ290eXMgYW5kIElwaGljcmF0ZXMsIHRvIGdldCBhIHN1cHBseSBvZgogICAgICAgICAgICAgICAgICAgIGdhbGxleXMgZnJvbSB5b3UsIGFuZCBzbyBzY3V0dGxlIHNhZmVseSBvdXQgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPi4gPC90cmFuc2xhdGlvbj4="
translation['23.157'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTciIHVuaXQ9InNlY3Rpb24iIC8+RG8geW91IHJlbWVtYmVyIHRoZQogICAgICAgICAgICAgICAgICAgIGltbWVkaWF0ZSBzZXF1ZWwsIGJ5IHdoaWNoIHRoZSB0cmljayB3YXMgZXhwb3NlZCBpbiB0aGUgdmVyeSBhY3Q/IE1lbW5vbiBhbmQKICAgICAgICAgICAgICAgICAgICBNZW50b3IsIHRoZSBzb25zLWluLWxhdyBvZiBBcnRhYmF6dXMsIHdlcmUgeW91bmcgbWVuLCBlbmpveWluZyB1bmV4cGVjdGVkIGdvb2QKICAgICAgICAgICAgICAgICAgICBmb3J0dW5lIGJ5IHRoZWlyIHJlbGF0aW9uc2hpcCB0byBBcnRhYmF6dXMuIFdoYXQgdGhleSB3YW50ZWQgd2FzIHRvIGdvdmVybiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5IHBlYWNlYWJseSB3aXRob3V0IGRlbGF5LCBhbmQgdG8gd2luIGRpc3RpbmN0aW9uIHdpdGhvdXQgd2FyZmFyZSBhbmQKICAgICAgICAgICAgICAgICAgICBwZXJpbC4gQWNjb3JkaW5nbHksIHRoZXkgcGVyc3VhZGVkIEFydGFiYXp1cyB0byBmb3JnbyBoaXMgdmVuZ2VhbmNlIHVwb24KICAgICAgICAgICAgICAgICAgICBDaGFyaWRlbXVzLCBhbmQgdG8gc2VuZCBoaW0gb2ZmIHVuZGVyIGFuIGFybWlzdGljZSwgYWR2aXNpbmcgaGltIHRoYXQgeW91IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgQ2hhcmlkZW11cyBhY3Jvc3Mgd2l0aCBvciB3aXRob3V0IGhpcyBjb25zZW50OiBoZSBjb3VsZCBub3QgcG9zc2libHkgc3RvcAogICAgICAgICAgICAgICAgICAgIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['23.158'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTgiIHVuaXQ9InNlY3Rpb24iIC8+SGF2aW5nIGdhaW5lZCB0aGlzIHVuYWNjb3VudGFibGUgYW5kCiAgICAgICAgICAgICAgICAgICAgdW5mb3Jlc2VlbiBkZWxpdmVyYW5jZSwgQ2hhcmlkZW11cyBjcm9zc2VkIHRoZSBzZWEgdG8gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+IHdpdGhvdXQgeW91ciBhdXRob3JpdHkgYnkgcmVhc29uCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGFybWlzdGljZTsgYnV0IHRoZW4sIHNvIGZhciBmcm9tIGF0dGFja2luZyBDb3R5cyzigJRhbHRob3VnaCBoZQogICAgICAgICAgICAgICAgICAgIGhhZCB0b2xkIHlvdSBpbiBoaXMgbGV0dGVyIHRoYXQgQ290eXMgd291bGQgbm90IHJlcGVsIGhpcyBhdHRhY2ss4oCUYW5kCiAgICAgICAgICAgICAgICAgICAgc28gZmFyIGZyb20gaGVscGluZyB5b3UgdG8gcmVjb3ZlciB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NyI+Q2hlcnNvbmVzdXM8L3BsYWNlTmFtZT4sIGhlIGVudGVyZWQgdGhlIHNlcnZpY2Ugb2YgQ290eXMgb25jZSBtb3JlLCBhbmQKICAgICAgICAgICAgICAgICAgICBiZWdhbiB0byBiZWxlYWd1ZXIgeW91ciBsYXN0IHJlbWFpbmluZyBzdHJvbmdob2xkcywgQ3JpdGhvdGUgYW5kIEVsYWV1cy4gWW91CiAgICAgICAgICAgICAgICAgICAgd2lsbCBmaW5kIHByb29mIGluIGhpcyByb3V0ZSBhY3Jvc3MgdGhlIHN0cmFpdHMgdGhhdCBoZSBoYWQgYWxyZWFkeSBkZWNpZGVkIG9uCiAgICAgICAgICAgICAgICAgICAgdGhpcyBhY3Rpb24gYXQgdGhlIHRpbWUgd2hlbiBoZSB3YXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwMDQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDAwNCI+QXNpYTwvcGxhY2VOYW1lPiBhbmQgd2FzIHNlbmRpbmcgeW91IHRoZSBsZXR0ZXIsIGFuZCB0aGVyZWZvcmUgdGhhdCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBjaGVhdGluZyB5b3U7IGZvciBoZSBjcm9zc2VkIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDAwMzEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMDAzMSI+QWJ5ZHVzPC9wbGFjZU5hbWU+LCBhIHBsYWNlIGFsd2F5cyBob3N0aWxlIHRvIHlvdSwgYW5kIHRoZSBiYXNlIGZyb20gd2hpY2gKICAgICAgICAgICAgICAgICAgICBTZXN0dXMgd2FzIGNhcHR1cmVkLCB0byBTZXN0dXMsIHdoaWNoIHdhcyBpbiB0aGUgcG9zc2Vzc2lvbiBvZiBDb3R5cy4gPC90cmFuc2xhdGlvbj4="
translation['23.159'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTkiIHVuaXQ9InNlY3Rpb24iIC8+WWV0IHlvdSBtdXN0IG5vdCBpbWFnaW5lIHRoYXQgZWl0aGVyIHRoZSBBYnlkZW5lcyBvcgogICAgICAgICAgICAgICAgICAgIHRoZSBwZW9wbGUgYXQgU2VzdHVzIHdvdWxkIGhhdmUgYWRtaXR0ZWQgaGltLCBhZnRlciB0aGF0IGxldHRlciBoYWQgYmVlbiBzZW50IHRvCiAgICAgICAgICAgICAgICAgICAgeW91LCBpZiB0aGV5IGhhZCBub3QgYmVlbiBhd2FyZSB0aGF0IGhlIHdhcyBjaGVhdGluZyB5b3UsIG9yIGlmIHRoZXkgaGFkIG5vdAogICAgICAgICAgICAgICAgICAgIGJlZW4gYWN0dWFsbHkgcGFydGllcyB0byB0aGUgZGVjZXB0aW9uLiBUaGV5IHdhbnRlZCB5b3UgdG8gcHJvdmlkZSBhIHNhZmUKICAgICAgICAgICAgICAgICAgICBwYXNzYWdlIGZvciB0aGUgdHJvb3BzLCBhbmQgdGhlbiwgYWZ0ZXIgdGhlIHBhc3NhZ2UsIHRvIGdldCB0aGUgdXNlIG9mIHRoZW0gZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3duIHB1cnBvc2VzOyBhcyBpbiBmYWN0IHRoZXkgZGlkLCB3aGVuIEFydGFiYXp1cyBoYWQgZ3JhbnRlZCBhCiAgICAgICAgICAgICAgICAgICAgc2FmZS1jb25kdWN0LuKAlFRvIHByb3ZlIHRoYXQgc3VjaCBhcmUgdGhlIGZhY3RzIHJlYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbGV0dGVycyzigJRJIG1lYW4gdGhlIGxldHRlciBzZW50IGJ5IENoYXJpZGVtdXMsIGFuZCB0aG9zZSB0aGF0IGNhbWUKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBhdXRob3JpdGllcyBpbiB0aGUgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTIwNTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMjA1NyI+Q2hlcnNvbmVzdXM8L3BsYWNlTmFtZT4u4oCUWW91IHdpbGwgbGVhcm4gZnJvbSB0aGVtIHRoYXQgdGhlIGZhY3RzIGFyZQogICAgICAgICAgICAgICAgICAgICAgICBzby7igJRSZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxldHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.160'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9ic2VydmUgZnJvbQogICAgICAgICAgICAgICAgICAgIGFuZCB0byB3aGF0IHBvaW50cyBoZSBjcm9zc2VkIHRoZSBzdHJhaXRzOyBpdCB3YXMgZnJvbSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMDAzMSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwMDMxIj5BYnlkdXM8L3BsYWNlTmFtZT4gdG8gU2VzdHVzLiBEbyB5b3Ugc3VwcG9zZSB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIEFieWRlbmVzIGFuZCB0aGUgU2VzdGlhbnMgd291bGQgaGF2ZSBhZG1pdHRlZCBoaW0sIGlmIHRoZXkgaGFkIG5vdCBiZWVuIHByaXZ5IHRvCiAgICAgICAgICAgICAgICAgICAgaGlzIGZyYXVkLCB3aGVuIGhlIHNlbnQgeW91IHRoYXQgbGV0dGVyP+KAlE5vdyByZWFkIHRvIHRoZSBqdXJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGxldHRlciBpdHNlbGYu4oCUT2JzZXJ2ZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2l0aCB3aGF0IGV4dHJhdmFnYW5jZSBvZiBzZWxmLWNvbW1lbmRhdGlvbiBoZSB3cm90ZSB0bwogICAgICAgICAgICAgICAgICAgIHlvdSwgdGVsbGluZyB5b3UgaGUgaGFkIGRvbmUgdGhpcywgYW5kIHVuZGVydGFraW5nIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQu4oCUUmVhZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.161'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkEgYmVhdXRpZnVsCiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLCBpcyBpdCBub3QsIGdlbnRsZW1lbj8gT25lIGZvciB3aGljaCB5b3UgY291bGQgbm90IGhhdmUgYmVlbiB0b28KICAgICAgICAgICAgICAgICAgICBncmF0ZWZ1bCzigJRpZiBvbmx5IGl0IGhhZCBiZWVuIHRydWUhIEJ1dCBpbiBmYWN0IGhlIHdyb3RlIGl0IHRvCiAgICAgICAgICAgICAgICAgICAgZGVjZWl2ZSwgd2hlbiBoZSBoYWQgbm8gZXhwZWN0YXRpb24gb2YgYW4gYXJtaXN0aWNlOyBidXQgd2hlbiBoZSBoYWQgZ290IGhpcwogICAgICAgICAgICAgICAgICAgIGFybWlzdGljZSzigJRyZWFkIHdoYXQgaGUgZGlkIHRoZW4uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGV0dGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNvLCBhZnRlciB0aGUgZ2VudGxlbWFuIHdobyB1bmRlcnRvb2sgdG8KICAgICAgICAgICAgICAgICAgICByZWNvdmVyIG91ciBsb3N0IGZvcnRyZXNzZXMgaGFkIHBhc3NlZCB0aGUgc3RyYWl0cywgdGhlIGdvdmVybm9yIG9mIENyaXRob3RlCiAgICAgICAgICAgICAgICAgICAgaW5mb3JtcyB1cyB0aGF0IG91ciByZW1haW5pbmcgcG9zc2Vzc2lvbnMgYXJlIGluIGdyZWF0ZXIgZGFuZ2VyIHRoYW4KICAgICAgICAgICAgICAgICAgICBldmVyLuKAlFNob3cgbWUgYW5vdGhlciBsZXR0ZXIsIGFuZCB0aGVuIHJlYWQgYSBiaXQgb2YgaXQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGV0dGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgYSBwYXNzYWdlIGZyb20gYW5vdGhlci48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.162'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBzZWUgaG93CiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IGNvbWVzIGluIGZyb20gZXZlcnkgcXVhcnRlciB0aGF0LCB3aGVuIGhlIGNyb3NzZWQgdGhlIHN0cmFpdHMsIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBtYXJjaGluZyB0byBhdHRhY2sgQ290eXMgYnV0IHRvIGpvaW4gQ290eXMgaW4gYXR0YWNraW5nIHVzLiBOb3cgaGVyZSBpcyBqdXN0CiAgICAgICAgICAgICAgICAgICAgb25lIGxldHRlciBtb3JlIHRoYXQgeW91IG11c3QgcmVhZDsgYnV0IG5ldmVyIG1pbmQgdGhlIHJlc3QuIEZvciBpdCBoYXMsIEkKICAgICAgICAgICAgICAgICAgICBzdXBwb3NlLCBiZWNvbWUgcXVpdGUgY2xlYXIgbm93IHRoYXQgaGUgaGFzIGNoZWF0ZWQgeW91LiBSZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxldHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5TdG9wLiBOb3cgcmVmbGVjdCBob3csIGFmdGVyIHdyaXRpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIHJlY292ZXIgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+LCBoZQogICAgICAgICAgICAgICAgICAgIHRvb2sgdGhlIHBheSBvZiB5b3VyIGVuZW1pZXMsIGFuZCB0cmllZCB0byByb2IgeW91IG9mIHlvdXIgcmVtYWluaW5nIHBvc3Nlc3Npb25zCiAgICAgICAgICAgICAgICAgICAgdGhlcmU7IGFuZCBob3csIGFmdGVyIHdyaXRpbmcgdGhhdCBBbGV4YW5kZXIgaGFkIHNlbnQgZW52b3lzIHRvIGhpbSBidXQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGhhZCByZWZ1c2VkIHRvIHNlZSB0aGVtLCBoZSB3YXMgZm91bmQgYmVoYXZpbmcgZXhhY3RseSBsaWtlIEFsZXhhbmRlcidzCiAgICAgICAgICAgICAgICAgICAgZmlsaWJ1c3RlcnMuIFNvIG11Y2ggZm9yIHlvdXIgc2luZ2xlLW1pbmRlZCB3ZWxsLXdpc2hlcjsgdGhlIG1hbiB3aG8gaXMKICAgICAgICAgICAgICAgICAgICBpbmNhcGFibGUgb2Ygd3JpdGluZyBsaWVzIG9yIHByYWN0aXNpbmcgZGVjZWl0ISA8L3RyYW5zbGF0aW9uPg=="
translation['23.163'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFsdGhvdWdoLCB0aGVuLCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGFidW5kYW50bHkgY2xlYXIgdGhhdCB0aGVyZSBpcyBub3QgYSBzaW5jZXJlIHdvcmQgaW4gYWxsIGhpcyBwcm9mZXNzaW9ucyBvZgogICAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB5ZXQsIGlmIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgbm90IGFscmVhZHkgY2xlYXIgZnJvbSB0aGVzZSBmYWN0cywgaXQgd2lsbCBiZSBtb3JlIGV2aWRlbnQgaW4gdGhlIGxpZ2h0IG9mCiAgICAgICAgICAgICAgICAgICAgbGF0ZXIgZXZlbnRzLiBDb3R5cywgSSBhbSBnbGFkIHRvIHNheSzigJRmb3IgaGUgd2FzIHlvdXIgZW5lbXksIGFuZCBhCiAgICAgICAgICAgICAgICAgICAgYmFkIG1hbizigJR3YXMga2lsbGVkIGJ5IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5QeXRobzwvc3VybmFtZT48L3BlcnNOYW1lPjsKICAgICAgICAgICAgICAgICAgICBDZXJzb2JsZXB0ZXMsIHRoZSBwcmVzZW50IGtpbmcsIHdhcyBhIG1lcmUgYm95LCBhbmQgc28gd2VyZSBhbGwgdGhlIHNvbnMgb2YKICAgICAgICAgICAgICAgICAgICBDb3R5czsgYW5kIENoYXJpZGVtdXMgaGFkIGdvdCBjb250cm9sIG9mIGFmZmFpcnMsIGJlY2F1c2UgaGUgd2FzIG9uIHRoZSBzcG90IGFuZAogICAgICAgICAgICAgICAgICAgIGhhZCBhIGZvcmNlIGF0IGhpcyBiYWNrLiBDZXBoaXNvZG90dXMsIHRoZSBtYW4gdG8gd2hvbSBoZSBzZW50IHRoZSBmYW1vdXMKICAgICAgICAgICAgICAgICAgICBsZXR0ZXIsIGhhZCBhcnJpdmVkIGluIGNvbW1hbmQgb2YgYW4gYXJteSwgYW5kIHNvIGhhZCB0aGUgZ2FsbGV5cywgd2hpY2ggd2VyZSB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgcmVzY3VlZCBoaW0sIGV2ZW4gd2l0aG91dCB0aGUgY29uc2VudCBvZiBBcnRhYmF6dXMsIHdoZW4gaGlzIGRlbGl2ZXJhbmNlCiAgICAgICAgICAgICAgICAgICAgd2FzIGluIGRvdWJ0LiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+UHl0aG88L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['23.164'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHdoYXQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdhcyB0aGUgY29uZHVjdCBwcm9wZXIgZm9yIGEgcmVhbGx5CiAgICAgICAgICAgICAgICAgICAgc2luZ2xlLW1pbmRlZCBhbmQgZnJpZW5kbHkgcGVyc29uLCBhZnRlciB0aGUgYXJyaXZhbCBvZiBhCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVyLOKAlG5vdCBvbmUgb2YgdGhvc2UgbWVuIHdob20gaGUgbWlnaHQgaGF2ZSBjYWxsZWQgamVhbG91cyBvZgogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYsIGJ1dCB0aGUgcmVjaXBpZW50IG9mIGhpcyBsZXR0ZXIsIGEgbWFuIHdob20gaGUgaGFkIGNob3NlbiBvdXQgb2YgYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhcyBoaXMgc3BlY2lhbAogICAgICAgICAgICAgICAgICAgIGZyaWVuZCzigJR3aXRoIENvdHlzIGluIGhpcyBncmF2ZSwgYW5kIGhpbXNlbGYgaW4gc3VwcmVtZSBwb3dlcj8gV2FzIGl0CiAgICAgICAgICAgICAgICAgICAgbm90IHRvIHJlc3RvcmUgeW91ciB0ZXJyaXRvcnkgdGhlcmUgYW5kIHRoZW4/IFRvIGNvb3BlcmF0ZSB3aXRoIHlvdSBpbgogICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGluZyB0aGUga2luZyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4/IFRvCiAgICAgICAgICAgICAgICAgICAgZW1icmFjZSB0aGUgb3Bwb3J0dW5pdHkgb2YgZXhoaWJpdGluZyBoaXMgZnJpZW5kbHkgZGlzcG9zaXRpb24gdG93YXJkcyB5b3UgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBzYXksIHllcy4gPC90cmFuc2xhdGlvbj4="
translation['23.165'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjUiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgaXMgdGhhdCB3aGF0IGhlIGRpZD8KICAgICAgICAgICAgICAgICAgICBCeSBubyBtZWFucy4gRm9yIHNldmVuIHdob2xlIG1vbnRocyBoZSBwZXJzaXN0ZWQgaW4gbWFraW5nIHdhciBvbiB1cywgb3Blbmx5CiAgICAgICAgICAgICAgICAgICAgZGlzcGxheWluZyBoaXMgaG9zdGlsaXR5IGFuZCB3aXRoaG9sZGluZyBldmVuIHRoZSBsYW5ndWFnZSBvZiBnb29kd2lsbC4gQXQgdGhlCiAgICAgICAgICAgICAgICAgICAgb3V0c2V0IHdlIHRvb2sgYW5jaG9yYWdlIGF0IFBlcmludGh1cyB3aXRoIG9ubHkgdGVuIHNoaXBzLCBoYXZpbmcgaGVhcmQgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBpbiB0aGUgbmVpZ2hib3Job29kLCBhbmQgaG9waW5nIHRvIG1lZXQgaGltIGFuZCB0YWxrIG1hdHRlcnMgb3Zlci4gSGUgd2FpdGVkCiAgICAgICAgICAgICAgICAgICAgdGlsbCBvdXIgbWVuIHdlcmUgaGF2aW5nIHRoZWlyIGJyZWFrZmFzdCwgYW5kIHRoZW4gdHJpZWQgdG8gdGFrZSBvdXIgc2hpcHMsCiAgICAgICAgICAgICAgICAgICAga2lsbGVkIGEgbnVtYmVyIG9mIG91ciBzYWlsb3JzLCBhbmQgaHVudGVkIGV2ZXJ5IG1hbiBvZiB0aGVtIGludG8gdGhlIHNlYSB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGlzIGNhdmFscnkgYW5kIGxpZ2h0IGluZmFudHJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.166'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjYiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXJ3YXJkcywKICAgICAgICAgICAgICAgICAgICB3aGVuIHdlIHNldCBzYWls4oCULG5vLCBpdCB3YXMgbm90IHRvIGF0dGFjayBhbnkgcGFydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjc1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNzU2Ij5UaHJhY2U8L3BsYWNlTmFtZT4sIG9yIGFueSBmb3J0cmVzcyB0aGVyZS4gRm9yIHRoaXMgYXQKICAgICAgICAgICAgICAgICAgICBsZWFzdCBubyBtYW4gY2FuIHNheTog4oCcQWgsIHllczsgaGUgZGlkIGRvIGEgbGl0dGxlCiAgICAgICAgICAgICAgICAgICAgZGFtYWdlLOKAlGluIHNlbGYtZGVmZW5jZSwgeW91IGtub3csIGFuZCB0byBwcm90ZWN0IGhpbXNlbGYu4oCdCiAgICAgICAgICAgICAgICAgICAgVGhhdCBpcyBub3QgdHJ1ZTsgd2UgbmV2ZXIgd2VudCB0byBhbnkgcGxhY2UgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+OyB3ZSB3ZW50IHRvIEFsb3BlY29ubmVzdXMsIGFuZCB0aGF0IGlzIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPiBhbmQgdXNlZCB0byBiZWxvbmcgdG8KICAgICAgICAgICAgICAgICAgICB5b3Us4oCUYSBoZWFkbGFuZCBydW5uaW5nIG91dCB0b3dhcmRzIEltYnJvcywgYSBsb25nIHdheSBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPjsgYSBwbGFjZSBzd2FybWluZyB3aXRoIHJvYmJlcnMgYW5kCiAgICAgICAgICAgICAgICAgICAgcGlyYXRlcy4gPC90cmFuc2xhdGlvbj4="
translation['23.167'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjciIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB3ZSBnb3QgdGhlcmUsIGFuZCB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYmVzaWVnaW5nIHRoZXNlIGdlbnRyeSwgaGUgbWFyY2hlZCByaWdodCBhY3Jvc3MgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+LOKAlHlvdXIgcHJvcGVydHksIGV2ZXJ5IHlhcmQgb2YKICAgICAgICAgICAgICAgICAgICBpdCzigJRhdHRhY2tlZCB1cywgYW5kIHRyaWVkIHRvIHJlc2N1ZSB0aGUgcm9iYmVycyBhbmQgcGlyYXRlcy4gSGUgdG9vawogICAgICAgICAgICAgICAgICAgIHVwIGhpcyBwb3NpdGlvbiwgYW5kIHBlcnN1YWRlZCBvciBjb25zdHJhaW5lZCB5b3VyIGNvbW1hbmRlciBub3QgdG8gc2VydmUgeW91cgogICAgICAgICAgICAgICAgICAgIGludGVyZXN0cywgaW5zdGVhZCBvZiBsZXR0aW5nIGhpbXNlbGYgYmUgcGVyc3VhZGVkIGJ5IGhpbSB0byBjYXJyeSBvdXQgc29tZSBwYXJ0CiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGNvdmVuYW50IGFuZCB1bmRlcnRha2luZzsgYW5kIHRoZW4gaGUgbXVzdCBuZWVkcyBkcmF3IHVwIHRoYXQgY29udmVudGlvbgogICAgICAgICAgICAgICAgICAgIHdpdGggQ2VwaGlzb2RvdHVzLCBieSB3aGljaCB5b3Ugd2VyZSBzbyBkZWVwbHkgYW5ub3llZCBhbmQgZXhhc3BlcmF0ZWQgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBkaXNtaXNzZWQgeW91ciBjb21tYW5kZXIsIGFuZCBmaW5lZCBoaW0gZml2ZSB0YWxlbnRzLCBhbmQgdGhlcmUgd2FzIGEgbWFqb3JpdHkKICAgICAgICAgICAgICAgICAgICBvZiB0aHJlZSB2b3RlcyBvbmx5IGFnYWluc3QgYSBzZW50ZW5jZSBvZiBkZWF0aC4gPC90cmFuc2xhdGlvbj4="
translation['23.168'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjgiIHVuaXQ9InNlY3Rpb24iIC8+V2h5LCB3aGF0IGEgcHJlcG9zdGVyb3VzIGFic3VyZGl0eSBhIG1hbiBtdXN0IGFjY291bnQgdGhpcywKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3aGVuIGZvciBvbmUgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgdHJhbnNhY3Rpb24gaGUgc2VlcyBvbmUgbWFuIHB1bmlzaGVkIHdpdGggc3VjaCBzZXZlcml0eSBhcyBhIGNyaW1pbmFsLCBhbmQKICAgICAgICAgICAgICAgICAgICBhbm90aGVyIGdsb3JpZmllZCBhcyBhIGJlbmVmYWN0b3IgZnJvbSB0aGF0IGRheSB0byB0aGlzITxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGUgdHJ1dGggb2YgbXkgbmFycmF0aXZlLCB5b3UgYXJlLCBvZiBjb3Vyc2UsIG15CiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIGluIHJlZ2FyZCB0byB0aGUgZmF0ZSBvZiB0aGUgY29tbWFuZGVyOyBmb3IgaXQgd2FzIHlvdSB3aG8gdHJpZWQgaGltLAogICAgICAgICAgICAgICAgICAgIGNhc2hpZXJlZCBoaW0sIHJlcHJpbWFuZGVkIGhpbTthbGwgdGhpcyBpcyB3aXRoaW4geW91ciBrbm93bGVkZ2UuIEluIHJlc3BlY3Qgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgaW5jaWRlbnRzIGF0IFBlcmludGh1cyBhbmQgQWxvcGVjb25uZXN1cywgcGxlYXNlIGNhbGwgdGhlIHNoaXBzJyBjYXB0YWlucyBhcwogICAgICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.169'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlYWZ0ZXIsCiAgICAgICAgICAgICAgICAgICAgd2hlbiBDZXBoaXNvZG90dXMgaGFkIGJlZW4gZGlzY2hhcmdlZCBmcm9tIGhpcyBjb21tYW5kLCBhbmQgeW91IGhlbGQgdGhlIHZpZXcKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjb252ZW50aW9uIG1hZGUgd2l0aCBoaW0gd2FzIGltcHJvcGVyIGFuZCB1bmZhaXIsIE1pbHRvY3l0aGVzLCB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBjb25zaXN0ZW50bHkgd2VsbC1hZmZlY3RlZCB0byB5b3UsIHdhcyBiZXRyYXllZCBieSBTbWljeXRoaW9uLCBhbmQgZmVsbAogICAgICAgICAgICAgICAgICAgIGludG8gdGhlIGhhbmRzIG9mIG91ciBob25lc3QgZnJpZW5kLiBLbm93aW5nIHRoYXQgdGhlIG1hbidzIGxpZmUgd291bGQgYmUgc3BhcmVkCiAgICAgICAgICAgICAgICAgICAgaWYgaGUgd2VyZSB0YWtlbiB0byBDZXJzb2JsZXB0ZXMs4oCUZm9yIGtpbGxpbmcgb25lIGFub3RoZXIgaXMgbm90CiAgICAgICAgICAgICAgICAgICAgY3VzdG9tYXJ5IGFtb25nIHRoZSBUaHJhY2lhbnMs4oCUQ2hhcmlkZW11cyBoYW5kZWQgaGltIG92ZXIgdG8geW91cgogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMgdGhlIENhcmRpYW5zLiBUaGV5IHRvb2sgTWlsdG9jeXRoZXMgYW5kIGhpcyBzb24sIHB1dCBvdXQgaW4gYSBzaGlwIHRvCiAgICAgICAgICAgICAgICAgICAgZGVlcCB3YXRlciwgY3V0IHRoZSBib3kncyB0aHJvYXQsIGFuZCB0aGVuIHRocmV3IHRoZSBmYXRoZXIgb3ZlcmJvYXJkLCBhZnRlciBoZQogICAgICAgICAgICAgICAgICAgIGhhZCB3aXRuZXNzZWQgdGhlIG11cmRlciBvZiBoaXMgc29uLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.170'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzAiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UKICAgICAgICAgICAgICAgICAgICBhdHJvY2l0aWVzIG1vdmVkIHRoZSB3aG9sZSBwb3B1bGF0aW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiB0byByZXNlbnRtZW50OyBCZXJpc2FkZXMgYW5kIEFtYWRvY3VzIG1hZGUgYSBjb2FsaXRpb247CiAgICAgICAgICAgICAgICAgICAgYW5kIEF0aGVub2RvcnVzLCByZWNvZ25pemluZyBhIGZhdm9yYWJsZSBvcHBvcnR1bml0eSwgZm9ybWVkIGFsbGlhbmNlIHdpdGggdGhlbSwKICAgICAgICAgICAgICAgICAgICBhbmQgc28gd2FzIGluIGEgcG9zaXRpb24gdG8gbWFrZSB3YXIuIFRoZW4gQ2Vyc29ibGVwdGVzIHRvb2sgZnJpZ2h0LCBhbmQKICAgICAgICAgICAgICAgICAgICBBdGhlbm9kb3J1cyBwcm9wb3NlZCBhIGNvbnZlbnRpb24sIHVuZGVyIHdoaWNoIGhlIGNvbXBlbGxlZCBDZXJzb2JsZXB0ZXMgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIGEgc3dvcm4gZW5nYWdlbWVudCB3aXRoIHlvdSBhbmQgd2l0aCB0aGUgb3RoZXIgcHJpbmNlcyB0aGF0IHRoZSBraW5nZG9tIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBzaG91bGQgYmUgaGVsZCBpbiBjb21tb24sCiAgICAgICAgICAgICAgICAgICAgYW5kIGRpdmlkZWQgYW1vbmcgdGhlIHRocmVlLCBhbmQgdGhhdCB0aGV5IHNob3VsZCBhbGwgcmVzdG9yZSB0byB5b3UgeW91cgogICAgICAgICAgICAgICAgICAgIHRlcnJpdG9yeS4gPC90cmFuc2xhdGlvbj4="
translation['23.171'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIGVsZWN0aW9uIG9mIG1hZ2lzdHJhdGVzIHlvdQogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBDaGFicmlhcyB0byBjb21tYW5kIGluIHRoYXQgY2FtcGFpZ247IGJ1dCB1bmx1Y2tpbHkgQXRoZW5vZG9ydXMKICAgICAgICAgICAgICAgICAgICBkaXNiYW5kZWQgaGlzIGFybXksIGJlY2F1c2UgaGUgaGFkIG5vIG1vbmV5IGZyb20geW91LCBhbmQgbm8gcmVzb3VyY2VzIGZvcgogICAgICAgICAgICAgICAgICAgIGNhcnJ5aW5nIG9uIHdhcjsgYW5kIENoYWJyaWFzIHN0YXJ0ZWQgb24gaGlzIGV4cGVkaXRpb24gd2l0aCBvbmx5IG9uZSBzaGlwLiBBbmQKICAgICAgICAgICAgICAgICAgICBob3cgZG9lcyB0aGlzIG1hbiBDaGFyaWRlbXVzIHR1cm4gaGlzIGNvYXQ/IEhlIHJlcHVkaWF0ZXMgaGlzIHN3b3JuIGNvdmVuYW50CiAgICAgICAgICAgICAgICAgICAgd2l0aCBBdGhlbm9kb3J1cywgcGVyc3VhZGVzIENlcnNvYmxlcHRlcyB0byBkaXNjbGFpbSBpdCwgYW5kIHByb3Bvc2VzIG5ldyB0ZXJtcwogICAgICAgICAgICAgICAgICAgIHRvIENoYWJyaWFzLOKAlHRlcm1zIG1vcmUgbW9uc3Ryb3VzIHRoYW4gdGhvc2UgbWFkZSB3aXRoIENlcGhpc29kb3R1cy4KICAgICAgICAgICAgICAgICAgICBDaGFicmlhcyB3YXMgb2JsaWdlZCB0byBhY3F1aWVzY2UsIEkgc3VwcG9zZSBiZWNhdXNlIGhlIGhhZCBubyBmb3JjZSBhdCBoaXMKICAgICAgICAgICAgICAgICAgICBiYWNrLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.172'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgbmV3cyByZWFjaGVkIHlvdSwgYSBncmVhdCBtYW55CiAgICAgICAgICAgICAgICAgICAgc3BlZWNoZXMgd2VyZSBtYWRlIGluIHRoZSBBc3NlbWJseTsgdGhlIGNvbnZlbnRpb25zIHdlcmUgcmVhZCBhbmQgY29tcGFyZWQ7IGFuZCwKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGFueSByZXNwZWN0IGZvciBDaGFicmlhcydzIGdvb2QgbmFtZSBvciBmb3IgYW55IG9mIGhpcyBzdXBwb3J0ZXJzLCB5b3UKICAgICAgICAgICAgICAgICAgICBpbiB5b3VyIHR1cm4gY2FuY2VsbGVkIHRoZSBuZXcgY29udmVudGlvbiwgYW5kIHJlc29sdmVkLCBvbiB0aGUgbW90aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgR2xhdWNvLCB0byBlbGVjdCB0ZW4gY2l0aXplbnMgYXMgYW1iYXNzYWRvcnMuIElmIENlcnNvYmxlcHRlcyB3b3VsZCBhYmlkZSBieSBoaXMKICAgICAgICAgICAgICAgICAgICBjb3ZlbmFudCB3aXRoIEF0aGVub2RvcnVzLCB0aGV5IHdlcmUgdG8gbWFrZSBoaW0gcmVuZXcgaGlzIG9hdGg7aWYgbm90LCB0aGV5CiAgICAgICAgICAgICAgICAgICAgd2VyZSB0byBhY2NlcHQgdGhlIG9hdGhzIG9mIHRoZSB0d28ga2luZ3MsIGFuZCBjb25jZXJ0IG1lYXN1cmVzIGZvciBtYWtpbmcgd2FyCiAgICAgICAgICAgICAgICAgICAgb24gaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.173'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGFtYmFzc2Fkb3JzIHRvb2sgdGhlaXIgZGVwYXJ0dXJlOwogICAgICAgICAgICAgICAgICAgIGJ1dCBieSBtZXJlIGxhcHNlIG9mIHRpbWUgdGhlIGJ1c2luZXNzIGNhbWUgdG8gc3VjaCBhIHBhc3MsIHdpdGggdGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgZGF3ZGxpbmcgYW5kIHJlZnVzaW5nIHRvIHRha2UgYW55IHBsYWluLCBob25lc3QgYWN0aW9uIGluIHlvdXIgc2VydmljZSwgdGhhdCB3ZQogICAgICAgICAgICAgICAgICAgIHNlbnQgYSByZWxpZWYgZXhwZWRpdGlvbiB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4sIGFuZAogICAgICAgICAgICAgICAgICAgIENoYXJlcywgb24gcmV0dXJuaW5nIHdpdGggaGlzIG1lcmNlbmFyaWVzLCB3YXMgc2VudCBvdXQgYnkgeW91IHRvIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPiBhcyBwbGVuaXBvdGVudGlhcnkuIFNvIENoYXJpZGVtdXMKICAgICAgICAgICAgICAgICAgICBvbmNlIG1vcmUgZHJhZnRzIGEgbmV3IGNvbnZlbnRpb24gd2l0aCBDaGFyZXMsIHN1cHBvcnRlZCBieSBBdGhlbm9kb3J1cyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgdHdvIGtpbmdzOiBoZXJlIGl0IGlzLOKAlHRoZSBiZXN0IGFuZCBtb3N0IGVxdWl0YWJsZSBvZiB0aGUgbG90LiBIZSBoYXMKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgaGltc2VsZiBieSBoaXMgY29uZHVjdCBvZiBseWluZyBpbiB3YWl0IGZvciBvcHBvcnR1bml0aWVzIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyB0aGVyZSBpcyBubyB1cHJpZ2h0bmVzcywKICAgICAgICAgICAgICAgICAgICBubyBlcXVpdHksIGluIGhpcyBwb2xpY3kuIDwvdHJhbnNsYXRpb24+"
translation['23.174'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB5b3Ugc2VlIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBpcyB5b3VyIGZyaWVuZCBvbmx5IG9uIGluZHVjZW1lbnQsIGFuZCB0aGF0IGhpcyBlc3RpbWF0ZSBvZiB5b3VyIHN0cmVuZ3RoIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIG1lYXN1cmUgb2YgaGlzIGdvb2R3aWxsLCBkbyB5b3UgcmVhbGx5IHRoaW5rIGl0IHlvdXIgZHV0eSB0byBhbGxvdyBoaW0gdG8gYmUKICAgICAgICAgICAgICAgICAgICBwb3dlcmZ1bCzigJRhbmQgcG93ZXJmdWwgdGhyb3VnaCB5b3U/IElmIHRoYXQgaXMgeW91ciBvcGluaW9uLCBpdCBpcwogICAgICAgICAgICAgICAgICAgICAgICB3cm9uZy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gc2F0aXNmeSB5b3UgdGhhdCBJIGFtIHRlbGxpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIHBsZWFzZSB0YWtlIHRoZSBsZXR0ZXIgdGhhdCBjYW1lIGFmdGVyIHRoZSBmaXJzdCBjb252ZW50aW9uLCBhbmQgdGhlbiB0aGUKICAgICAgICAgICAgICAgICAgICBsZXR0ZXIgZnJvbSBCZXJpc2FkZXMu4oCUWW91IHdpbGwgYmUgaGVscGVkIGJ5IHRoZXNlIGRvY3VtZW50cyB0byBhCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgY29uY2x1c2lvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBhbHNvIHRoZSBsZXR0ZXIgb2YgQmVyaXNhZGVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxldHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.175'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBhbGxpYW5jZQogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHR3byBraW5ncyB3YXMgY29uY2x1ZGVkIGluIHRoaXMgbWFubmVyIGFmdGVyIHRoZSBmcmF1ZCBlZmZlY3RlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBjb252ZW50aW9uIHdpdGggQ2VwaGlzb2RvdHVzLiBBdCB0aGF0IHRpbWUgTWlsdG9jeXRoZXMgaGFkIGJlZW4gZ290IHJpZCBvZiwgYW5kCiAgICAgICAgICAgICAgICAgICAgQ2hhcmlkZW11cyB3YXMga25vd24gYnkgaGlzIGNvbmR1Y3QgdG8gYmUgYW4gZW5lbXkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OyBmb3Igc3VyZWx5IGEgbWFuIHdobywgaGF2aW5nIGdvdAogICAgICAgICAgICAgICAgICAgIGludG8gaGlzIHBvd2VyIG9uZSBrbm93biB0byBoaW0gYXMgdGhlIG1vc3QgbG95YWwgZnJpZW5kIHlvdSBoYWQgaW4gYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiwgcHV0IGhpbSBpbnRvIHRoZSBoYW5kcyBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgZW5lbWllcyB0aGUgQ2FyZGlhbnMsIHdhcyBvc3RlbnRhdGlvdXNseSBkaXNwbGF5aW5nIGhpcyBncmVhdCBob3N0aWxpdHkKICAgICAgICAgICAgICAgICAgICB0b3dhcmRzIHlvdS7igJRSZWFkIHRoZSBjb252ZW50aW9uIHdoaWNoIENlcnNvYmxlcHRlcyBtYWRlIGxhdGVyLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIGFmcmFpZCBvZiB3YXIgd2l0aCB0aGUgVGhyYWNpYW5zIGFuZCB3aXRoIEF0aGVub2RvcnVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNvbnZlbnRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db252ZW50aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZlbnRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.176'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXNlIGFyZSB0aGUKICAgICAgICAgICAgICAgICAgICB0ZXJtcyB0aGF0IENoYXJpZGVtdXMgZHJhZnRlZCwgYW5kIHRoaXMgaXMgdGhlIGNvbnZlbnRpb24gaGUgc2lnbmVkLiBIZSBzd29yZQogICAgICAgICAgICAgICAgICAgIHRoZSBvYXRoIHRvIHdoaWNoIHlvdSBoYXZlIGxpc3RlbmVkOyBidXQgYXMgc29vbiBhcyBoZSBzYXcgdGhhdCB0aGUgZm9yY2VzIG9mCiAgICAgICAgICAgICAgICAgICAgQXRoZW5vZG9ydXMgaGFkIGJlZW4gZGlzYmFuZGVkLCBhbmQgdGhhdCBDaGFicmlhcyBoYWQgY29tZSB3aXRoIG9ubHkgb25lIGdhbGxleSwKICAgICAgICAgICAgICAgICAgICBoZSBkaWQgbm90IGdpdmUgdXAgdG8geW91IHRoZSBzb24gb2YgSXBoaWFkZXM7IGhlIGRpZCBub3QgZnVsZmlsIGFueSBvdGhlciBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBzd29ybiBwcm9taXNlczsgaGUgcmVwdWRpYXRlZCBldmVyeSBvdGhlciBhcnRpY2xlIG9mIHRoZSBjb252ZW50aW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICBkcmV3IHVwIHRoZSBjb252ZW50aW9uIEkgaGF2ZSBoZXJlLuKAlFRoYXQgaXMgaXQ7IHBsZWFzZSB0YWtlIGFuZCByZWFkCiAgICAgICAgICAgICAgICAgICAgICAgIGl0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkNvbnZlbnRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db252ZW50aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbnZlbnRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.177'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9ic2VydmUgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGNsYWltZWQgdGhlIHJpZ2h0IHRvIHRha2UgdGhlIHBvcnQtZHVlcyBhbmQgdGhlIHRlbi1wZXItY2VudCBjdXN0b21zLWR1dGllczsKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGFnYWluIHRhbGtlZCBhcyB0aG91Z2ggdGhlIHdob2xlIGNvdW50cnkgYmVsb25nZWQgdG8gaGltLCByZXF1aXJpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBkdXRpZXMgc2hvdWxkIGJlIHVuZGVyIHRoZSBjb250cm9sIG9mIGhpcyBvd24gY3VzdG9tLWhvdXNlIG9mZmljZXJzOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0LCB0aG91Z2ggaGUgaGFkIHRha2VuIGhpcyBvYXRoIHRvIEF0aGVub2RvcnVzIHRoYXQgaGUgd291bGQgc3VycmVuZGVyIHRoZQogICAgICAgICAgICAgICAgICAgIHNvbiBvZiBJcGhpYWRlcywgdGhlIGhvc3RhZ2Ugd2hvbSBoZSBoZWxkIG9uIGJlaGFsZiBvZiBTZXN0dXMsIGhlIG5vdyBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIGV2ZW4gcHJvbWlzZSB0byBzdXJyZW5kZXIgaGltLuKAlFRha2UgdGhlIGRlY3JlZSB3aGljaCB0aGUgQXRoZW5pYW5zCiAgICAgICAgICAgICAgICAgICAgYWRvcHRlZCBpbiB0aGlzIGVtZXJnZW5jeS4gUmVhZCBpdC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZWNyZWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.178'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlcmUgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbGV0dGVyIHNlbnQgYnkgQ2Vyc29ibGVwdGVzIGxhdGVyLCBhZnRlciB0aGUgYXJyaXZhbCBvZiB0aGUgYW1iYXNzYWRvcnMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LOKAlGhlIHdvdWxkIGFncmVlIHRvCiAgICAgICAgICAgICAgICAgICAgbm90aGluZyB0aGF0IHdhcyBmYWlyOyBhbmQgaGVyZSBpcyB0aGUgbGV0dGVyIHNlbnQgYnkgdGhlIG90aGVycy7igJRSZWFkCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0byB0aGUganVyeS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMZXR0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGV0dGVyPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHJlYWQgdGhlIGxldHRlciBmcm9tIHRoZSB0d28KICAgICAgICAgICAgICAgICAgICBraW5ncy7igJRDb25zaWRlciB3aGV0aGVyIHlvdSByZWFsbHkgdGhpbmsgdGhhdCB0aGV5IGFyZSBtYWtpbmcgbm8KICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxhaW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxldHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5NZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBsb29rIGF0IHRoaXMgc2VlLXNhdyBvZiB2aWxsYWlueSBhbmQgcGVyZmlkeSwgYW5kIHRyeQogICAgICAgICAgICAgICAgICAgIHRvIHVuZGVyc3RhbmQgaXQuIEZpcnN0IGhlIHdhcyBtYWx0cmVhdGluZyBDZXBoaXNvZG90dXM7IHRoZW4gaGUgc3RvcHBlZCwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIGhlIHdhcyBhZnJhaWQgb2YgQXRoZW5vZG9ydXMuIEFub3RoZXIgdGltZSBoZSB0cmllZCB0byBtYWx0cmVhdAogICAgICAgICAgICAgICAgICAgIENoYWJyaWFzOyBjaGFuZ2VkIGhpcyBtaW5kLCBhbmQgYWdyZWVkIHdpdGggQ2hhcmVzLiBIZSBhbHdheXMgYWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaW5jb25zaXN0ZW50bHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldpdGggPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DOtc+Azr/hvbfOt866zrU8L2ZvcmVpZ24+LCB3aGljaCBEaW5kLiBrZXB0IGJ1dCBDb2JldCByaWdodGx5IGJyYWNrZXRzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcGhyYXNlIHdvdWxkIG1lYW4g4oCcaGUgaGFzIHR1cm5lZCBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHVwc2lkZS1kb3duLOKAnSBhcyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMzYiIHZhbGlkPSJ5ZXMiPkRlbS4gOS4zNjwvYmlibD48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgZXZlciBsaWtlIGFuIGhvbmVzdCwgc3RyYWlnaHRmb3J3YXJkIG1hbi4gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DOtc+Azr/hvbfOt866zrU8L2ZvcmVpZ24+LCB3aGljaCBEaW5kLiBrZXB0IGJ1dCBDb2JldCByaWdodGx5IGJyYWNrZXRzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcGhyYXNlIHdvdWxkIG1lYW4g4oCcaGUgaGFzIHR1cm5lZCBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHVwc2lkZS1kb3duLOKAnSBhcyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDkuMzYiIHZhbGlkPSJ5ZXMiPkRlbS4gOS4zNjwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['23.179'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNpbmNlIHRoYXQgdGltZSwgc28gbG9uZyBhcyB5b3UgaGFkIGZvcmNlcwogICAgICAgICAgICAgICAgICAgIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjYzOCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjM4Ij5IZWxsZXNwb250PC9wbGFjZU5hbWU+LCBoZSBoYXMgY29udGludWFsbHkKICAgICAgICAgICAgICAgICAgICBmbGF0dGVyZWQgeW91IGFuZCBjb3plbmVkIHlvdTsgYnV0IGFzIHNvb24gYXMgaGUgZm91bmQgdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjM4IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2MzgiPkhlbGxlc3BvbnQ8L3BsYWNlTmFtZT4gZGVudWRlZCBvZiB5b3VyIGZvcmNlcywgaGUgdHJpZWQgdG8KICAgICAgICAgICAgICAgICAgICBicmVhayBhbmQgdG8gZGV0aHJvbmUgdGhlIHR3byBraW5ncywgYW5kIHRvIGJyaW5nIHRoZSB3aG9sZSBraW5nZG9tIHVuZGVyIGhpcwogICAgICAgICAgICAgICAgICAgIG93biB0aHVtYiwga25vd2luZyBieSBleHBlcmllbmNlIHRoYXQsIHVudGlsIGhlIGhhZCBlamVjdGVkIHRoZW0sIGhlIGNvdWxkIG5vdAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmx5IHJldm9rZSBhbnkgcGFydCBvZiBoaXMgYWdyZWVtZW50IHdpdGggeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.180'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODAiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBtb3JlIGV4cGVkaXRpb3VzIGZ1bGZpbGxtZW50IG9mIHRoaXMgcHVycG9zZSwgaGUKICAgICAgICAgICAgICAgICAgICBwcm9jdXJlZCBmcm9tIHlvdSBhIGRlY3JlZSBzbyB3b3JkZWQgdGhhdCwgaWYgaXQgaGFkIGJlZW4gcmF0aWZpZWQsIGFzIGl0IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIGJ1dCBmb3IgdXMgYW5kIGZvciB0aGlzIGluZGljdG1lbnQsIHRoZSB0d28ga2luZ3Mgd291bGQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgaW5pcXVpdG91c2x5IHRyZWF0ZWQgaW4gdGhlIGV5ZXMgb2YgdGhlIHdvcmxkLCB0aGUgY29tbWFuZGVycyBvZiB0aGVpciBhcm1pZXMsCiAgICAgICAgICAgICAgICAgICAgQmlhbm9yLCBTaW1vbiwgQXRoZW5vZG9ydXMsIHdvdWxkIGhhdmUgcmVtYWluZWQgaW5hY3RpdmUgdGhyb3VnaCBmZWFyIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHNwaXRlZnVsIHByb3NlY3V0aW9uIGF1dGhvcml6ZWQgYnkgdGhlIGRlY3JlZSwgYW5kIHRoZSBtYW4gd2hvIHRvb2sgYWR2YW50YWdlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBsaWNlbmNlLCBhbmQgYnJvdWdodCB0aGUgd2hvbGUga2luZ2RvbSBpbnRvIHN1YmplY3Rpb24sIHdvdWxkIGhhdmUgYmVjb21lCiAgICAgICAgICAgICAgICAgICAgYW5kIHJlbWFpbmVkIGFuIGVuZW15LCBhbmQgYSBwb3dlcmZ1bCBlbmVteSwgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.181'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZvciBhIGJhc2Ugb2Ygb3BlcmF0aW9ucyzigJRvbiB3aGljaCBoZSBoYXMgY29uc3RhbnRseQogICAgICAgICAgICAgICAgICAgIGtlcHQgaGlzIGV5ZXMs4oCUaGUgaGFzIHRoZSBjaXR5IG9mIHRoZSBDYXJkaWFucy4gSW4gYWxsIGhpcyBjb252ZW50aW9ucwogICAgICAgICAgICAgICAgICAgIGhlIGhhcyBoYWQgdGhhdCBjaXR5IHJlc2VydmVkIHRvIGhpbXNlbGYsIGFuZCBpbiB0aGUgZW5kIGhlIG9wZW5seSBzdG9sZSBpdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgeW91LiBZZXQgd2h5IHNob3VsZCBtZW4gd2hvIGhhZCBlbnRpcmVseSBnb3QgcmlkIG9mIGFueSB1bmp1c3QgZmVlbGluZ3MgdG93YXJkCiAgICAgICAgICAgICAgICAgICAgdXMsIGFuZCBoYWQgcmVzb2x2ZWQgY2FuZGlkbHkgYW5kIHdpdGggZW50aXJlIHNpbmNlcml0eSB0byBiZSBmcmllbmRseSB0byB1cywKICAgICAgICAgICAgICAgICAgICBoYXZlIGxlZnQgdGhlbXNlbHZlcyBhIGNvbnZlbmllbnQgYmFzZSBvZiBvcGVyYXRpb25zIGZvciBhIHdhciBhZ2FpbnN0IHVzPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.182'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODIiIHVuaXQ9InNlY3Rpb24iIC8+SSBhbSBzdXJlIHRoYXQgeW91IGFsbAogICAgICAgICAgICAgICAgICAgIGtub3cs4oCUdGhvc2Ugb2YgeW91IHdobyBoYXZlIHZpc2l0ZWQgdGhlIHBsYWNlIGtub3cgZm9yIGNlcnRhaW4sIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSByZXN0IGJ5IGhlYXJpbmcgdGhlaXIgcmVwb3J0LOKAlHRoYXQsIHRoZSBjb25kaXRpb24gb2YgQ2FyZGlhIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpdCBpcywgaWYgdGhlIHJlbGF0aW9ucyBvZiBDZXJzb2JsZXB0ZXMgd2l0aCB0aGUgVGhyYWNpYW5zIGV2ZXIgYmVjb21lCiAgICAgICAgICAgICAgICAgICAgZmF2b3JhYmxlLCBoZSBpcyBhYmxlIGF0IHR3ZW50eS1mb3VyIGhvdXJzJyBub3RpY2UgdG8gaW52YWRlIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPiBxdWl0ZSBzYWZlbHkuIEluZGVlZCBieSBpdHMKICAgICAgICAgICAgICAgICAgICBzaXR1YXRpb24gdGhlIGNpdHkgb2YgdGhlIENhcmRpYW5zIG9jY3VwaWVzIGEgcG9zaXRpb24gaW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTciPkNoZXJzb25lc3VzPC9wbGFjZU5hbWU+IGluIHJlbGF0aW9uIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPiBhbmFsb2dvdXMgdG8gdGhlIHBvc2l0aW9uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQ2hhbGNpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQ2hhbGNpcyI+Q2hhbGNpczwvcGxhY2VOYW1lPiBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc3Ij5FdWJvZWE8L3BsYWNlTmFtZT4gaW4gcmVsYXRpb24gdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI2ODMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjY4MyI+Qm9lb3RpYTwvcGxhY2VOYW1lPi4gVGhvc2Ugb2YgeW91IHdobyBrbm93IGl0cyBzaXR1YXRpb24gY2Fubm90IGJlIHVuYXdhcmUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgYWR2YW50YWdlIGZvciB0aGUgc2FrZSBvZiB3aGljaCBoZSBoYXMgYWNxdWlyZWQgaXQgZm9yIGhpbXNlbGYsIGFuZCBoYXMKICAgICAgICAgICAgICAgICAgICB0YWtlbiBncmVhdCBwYWlucyB0byBrZWVwIGl0IG91dCBvZiBvdXIgaGFuZHMuIDwvdHJhbnNsYXRpb24+"
translation['23.183'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODMiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgbm90IHlvdXIgZHV0eSB0byBoZWxwIGhpbSB0byBzZWN1cmUgdGhpcyBhZHZhbnRhZ2UgYWdhaW5zdCB5b3Vyc2VsdmVzOwogICAgICAgICAgICAgICAgICAgIHlvdSBtdXN0IHRod2FydCBoaW0gdG8gdGhlIHZlcnkgYmVzdCBvZiB5b3VyIHBvd2VyLCBhbmQgY29uc2lkZXIgaG93IHRvIHByZXZlbnQKICAgICAgICAgICAgICAgICAgICBpdCwgZm9yIGhlIGhhcyBtYWRlIGl0IHF1aXRlIGNsZWFyIHRoYXQgaGUgaXMgbm90IHRoZSBtYW4gdG8gbGV0IHNsaXAgYW55CiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb24gd2hhdHNvZXZlci4gSW4gZmFjdCwgd2hlbiBQaGlsaXAgY2FtZSB0byA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1hcm9uZWlhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxNYXJvbmVpYSI+TWFyb25laWE8L3BsYWNlTmFtZT4sIGhlIHNlbnQgQXBvbGxvbmlkZXMgdG8gaGltLCBhbmQKICAgICAgICAgICAgICAgICAgICBnYXZlIHBsZWRnZXMgYm90aCB0byBoaW0gYW5kIHRvIFBhbW1lbmVzOyBhbmQgaWYgQW1hZG9jdXMsIHdobyBoYWQgY29udHJvbCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjb3VudHJ5LCBoYWQgbm90IGZvcmJpZGRlbiBQaGlsaXAgdG8gc2V0IGZvb3QgdGhlcmUsIHRoZXJlIHdhcyBub3RoaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgcHJldmVudCBvdXIgYmVpbmcgYXQgd2FyIGJ5IHRoaXMgdGltZSB3aXRoIHRoZSBDYXJkaWFucyBhbmQgd2l0aAogICAgICAgICAgICAgICAgICAgIENlcnNvYmxlcHRlcy7igJRUbyBwcm92ZSB0aGF0IHRoaXMgc3RhdGVtZW50IG9mIG1pbmUgaXMgdHJ1ZSwgdGFrZQogICAgICAgICAgICAgICAgICAgIENoYXJlcycgbGV0dGVyLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxldHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxldHRlcjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MZXR0ZXI8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.184'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHZpZXcgb2YKICAgICAgICAgICAgICAgICAgICB0aGVzZSBmYWN0cyB5b3Ugb3VnaHQgdG8gZGlzdHJ1c3QgaGltLCBpbnN0ZWFkIG9mIGxvc2luZyB5b3VyIHdpdHMgYW5kIGdpdmluZwogICAgICAgICAgICAgICAgICAgIGhpbSB5b3VyIGF0dGVudGlvbiBhcyBhIGJlbmVmYWN0b3IuIFRoZXJlIGlzIG5vIHJlYXNvbiB3aHkgeW91IHNob3VsZCBvd2UgaGltCiAgICAgICAgICAgICAgICAgICAgZ3JhdGl0dWRlIGZvciB0aG9zZSBkZWNlaXRmdWwgcHJvZmVzc2lvbnMgb2YgZnJpZW5kc2hpcCB3aGljaCBoZSBvZmZlcnMgdW5kZXIKICAgICAgICAgICAgICAgICAgICBjb21wdWxzaW9uLCBub3IgZm9yIHRoZSBzbWFsbCBzdW1zIHdoaWNoIGhlIGxheXMgb3V0IGZvciB0aGUgYmVuZWZpdCBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgY29tbWFuZGVycyBhbmQgcG9saXRpY2lhbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxpdC4KICAgICAgICAgICAgICAgICAgICAgICAg4oCcb3JhdG9ycyzigJ0gYnV0IHRoZSB3b3JkIGhhcyBzb21ldGltZXMgdGhlIGRlcm9nYXRvcnkKICAgICAgICAgICAgICAgICAgICAgICAgaW1wbGljYXRpb24gb2Yg4oCccHJvZmVzc2lvbmFsIHBvbGl0aWNpYW5zLuKAnTwvbm90ZT4KICAgICAgICAgICAgICAgICAgICB0aGVyZWJ5IGNvbnRyaXZpbmcgdG8gZ2V0IHZvdGVzIG9mIHRoYW5rcyB0byBoaW1zZWxmIHN1Ym1pdHRlZCB0byB5b3UuIFlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZmFyIGJldHRlciBjYXVzZSB0byByZXNlbnQgdGhvc2UgZWZmb3J0cyB0byBkbyB5b3UgaGFybSwgd2hpY2ggd2Uga25vdyBoaW0gdG8gYmUKICAgICAgICAgICAgICAgICAgICBtYWtpbmcgaW4gZXZlcnkgcGxhY2Ugd2hlcmUgaGUgaGFzIHdvbiB0aGUgcG93ZXIgb2YgYWN0aW5nIGFzIGhlIHBsZWFzZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.185'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODUiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIG90aGVyIHBlcnNvbnMgd2hvIGhhdmUgZXZlciByZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIGFueSBmYXZvdXIgZnJvbSB5b3UgaGF2ZSBiZWVuIGhvbm9yZWQgZm9yIGJlbmVmaXRzIGNvbmZlcnJlZCBvbiB5b3U7IENoYXJpZGVtdXMKICAgICAgICAgICAgICAgICAgICBpcyB0aGUgb25lIGFuZCBvbmx5IG1hbiB3aG8gaXMgaG9ub3JlZCBmb3IgdGhlIGltcG90ZW5jZSBvZiBoaXMgZWZmb3J0cyB0byBkbwogICAgICAgICAgICAgICAgICAgIHlvdSBoYXJtLiBXaHksIHRvIHN1Y2ggYSBmZWxsb3cgZXhlbXB0aW9uIGZyb20gdGhlIHB1bmlzaG1lbnQgaGUgaGFkIGp1c3RseQogICAgICAgICAgICAgICAgICAgIGVhcm5lZCB3YXMgYSBoYW5kc29tZSBncmF0dWl0eSEgQnV0IHRoYXQgaXMgbm90IHRoZSB2aWV3IG9mIHRoZSBwb2xpdGljaWFuczsgbm8sCiAgICAgICAgICAgICAgICAgICAgbWFrZSBoaW0gYSBjaXRpemVuLCBkdWIgaGltIGJlbmVmYWN0b3Is4oCUaGVyZSBhcmUgY3Jvd25zIGFuZAogICAgICAgICAgICAgICAgICAgIHByZXNlbnRzLOKAlGluIHJldHVybiBmb3IgdGhvc2UgcHJpdmF0ZSBkb2xlcyBvZiBoaXMhIFRoZSByZXN0IG9mIHlvdQogICAgICAgICAgICAgICAgICAgIGFyZSBndWxsZWQsIGFuZCBzaXQgdGhlcmUgd29uZGVyaW5nIHdoYXQgaXMgZ29pbmcgb24uIDwvdHJhbnNsYXRpb24+"
translation['23.186'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kLCB0byBjcm93biBhbGwsIHRvZGF5IHRoZXkgd291bGQgaGF2ZSBhcHBvaW50ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvdGVjdG9ycyBieSB0aGlzIHJlc29sdXRpb24sIGlmIHdlIGhhZCBub3QgbGFpZCB0aGUgcHJlc2VudCBpbmRpY3RtZW50LCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9ud2VhbHRoIHdvdWxkIGhhdmUgZG9uZSBkdXR5IGFzIGhpcyBoaXJlZCBzZXJ2YW50IGFuZCBsYWNrZXksIGtlZXBpbmcKICAgICAgICAgICAgICAgICAgICBndWFyZCBvdmVyIGEgQ2hhcmlkZW11cyEgQSBwcmV0dHkgYnVzaW5lc3MsIGlzIGl0IG5vdD8gSGVhdmVuIGhlbHAgdXMhIHRvIHRoaW5rCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIG1hbiwgd2hvIG9uY2Ugc2hvdWxkZXJlZCBhIHBpa2UgZm9yIGhpcmUgaW4gdGhlIHNlcnZpY2Ugb2YgeW91ciBlbmVtaWVzLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBub3cgYmUgc2VlbiBwcm90ZWN0ZWQgYnkgeW91ciBkZWNyZWUhIDwvdHJhbnNsYXRpb24+"
translation['23.187'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyBwZXJoYXBzIEkgbWF5IGJlIGFza2VkIGZvciB3aGF0IHJlYXNvbgogICAgICAgICAgICAgICAgICAgIEksIHdobyBoYWQgc3VjaCBleGFjdCBrbm93bGVkZ2Ugb2YgdGhlc2UgZG9pbmdzLCBhbmQgaGFkIGdpdmVuIGNsb3NlIGF0dGVudGlvbgogICAgICAgICAgICAgICAgICAgIHRvIHNvbWUgb2YgaGlzIG1pc2RlZWRzLCBsZXQgdGhlbSBhbGwgcGFzczsgd2h5IEkgZGlkIG5vdCBvYmplY3QgZWl0aGVyIHdoZW4geW91CiAgICAgICAgICAgICAgICAgICAgbWFkZSBoaW0gYSBjaXRpemVuIG9yIHdoZW4geW91IGdhdmUgaGltIGEgdm90ZSBvZiB0aGFua3M7IHdoeSwgaW4gc2hvcnQsIEkgZm91bmQKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHRvIHNheSBhdCBhbnkgdGltZSBlYXJsaWVyIHRoYW4gdGhlIHBhc3Npbmcgb2YgdGhpcyBkZWNyZWUuIE1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIEkgd2lsbCB0ZWxsIHlvdSB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSB0cnV0aC4gSSBrbmV3IHRoYXQgaGUgd2FzIHVuZGVzZXJ2aW5nOyBJIHdhcyBwcmVzZW50IHdoZW4gaGUgYXNrZWQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBmYXZvdXJzOyBJIG1hZGUgbm8gb2JqZWN0aW9uLiBJIGFkbWl0IGl0LiA8L3RyYW5zbGF0aW9uPg=="
translation['23.188'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODgiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCB3YXMgdGhlIHJlYXNvbj8gSW4gdGhlIGZpcnN0IHBsYWNlLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIGltYWdpbmVkIHRoYXQgYSBncmVhdCBtYW55IG1lbgogICAgICAgICAgICAgICAgICAgIGdsaWJseSB0ZWxsaW5nIGxpZXMgYWJvdXQgaGltIHdvdWxkIG92ZXJwb3dlciBvbmUgbWFuLCBuYW1lbHkgbXlzZWxmLCB0ZWxsaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHRydXRoIGFsb25lLiBUaGVuIGFzIGZvciB0aGUgZmF2b3VycyB0aGF0IGhlIHdvbiBieSBtaXNsZWFkaW5nIHlvdSwgSQogICAgICAgICAgICAgICAgICAgIHNvbGVtbmx5IHByb3Rlc3QgdGhhdCBpdCBuZXZlciBlbnRlcmVkIG15IGhlYWQgdG8gZ3J1ZGdlIGhpbSBhbnkgb25lIG9mIHRoZW0uIEkKICAgICAgICAgICAgICAgICAgICBjb3VsZCBub3Qgc2VlIHRoYXQgeW91IHdvdWxkIGJ1ZmZlciBhbnkgdmVyeSBncmlldm91cyBjYWxhbWl0eSwgaWYgeW91IGZvcmdhdmUgYQogICAgICAgICAgICAgICAgICAgIG1hbiB3aG8gaGFkIGRvbmUgeW91IG11Y2ggd3JvbmcsIGFuZCBzbyBlbmNvdXJhZ2VkIGhpbSB0byBkbyB5b3UgZ29vZCBzZXJ2aWNlIGluCiAgICAgICAgICAgICAgICAgICAgZnV0dXJlLiBCb3RoIHRoZXNlIGNvbnNpZGVyYXRpb25zIGFwcGxpZWQgdG8gdGhlIGdyYW50IG9mIGNpdGl6ZW5zaGlwIGFuZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBncmFudCBvZiBhIGNyb3duLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.189'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdywgd2hlbiBJIHBlcmNlaXZlCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBpcyBjb250cml2aW5nIGEgbmV3IHBsYW4gYnkgd2hpY2gsIGlmIG9ubHkgaGUgY2FuIHByb3ZpZGUgaGltc2VsZiB3aXRoCiAgICAgICAgICAgICAgICAgICAgYWdlbnRzIGhlcmUgdG8gbWlzbGVhZCB5b3Ugb24gaGlzIGJlaGFsZiwgb3VyIGZyaWVuZHMgYWJyb2FkLCB3aG8gYXJlIHJlYWR5IHRvCiAgICAgICAgICAgICAgICAgICAgc2VydmUgeW91IGFuZCB0byBzdG9wIGhpbSBmcm9tIGFjdGluZyBhZ2FpbnN0IHlvdSzigJRJIG1lYW4gc3VjaCBtZW4gYXMKICAgICAgICAgICAgICAgICAgICBBdGhlbm9kb3J1cywgU2ltb24sIEFyY2hlYml1cyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEJ5emFudGl1bSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnl6YW50aXVtIj5CeXphbnRpdW08L3BsYWNlTmFtZT4sIHRoZSB0d28ga2luZ3Mgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LOKAlHdpbGwgYWxsIGZpbmQgaXQgb3V0IG9mIHRoZWlyIHBvd2VyIHRvIG9wcG9zZQogICAgICAgICAgICAgICAgICAgIG9yIHRvIHRod2FydCBoaW0sIGF0IHN1Y2ggYSB0aW1lIEkgY29tZSBpbnRvIGNvdXJ0IGFuZCBkZW5vdW5jZSBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['23.190'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTAiIHVuaXQ9InNlY3Rpb24iIC8+SSBjb25jZWl2ZSB0aGF0IHRvIHNwZWFrIGFnYWluc3QgZ3JhbnRzIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgbWlnaHQgYWNjZXB0IHdpdGhvdXQgYmVpbmcgbGlrZWx5IHRvIGRvIHNlcmlvdXMgaW5qdXJ5IHRvIHRoZSBTdGF0ZSwgaXMgdGhlIGFjdAogICAgICAgICAgICAgICAgICAgIG9mIG9uZSB3aG8gaGFzIGVpdGhlciBhIHByaXZhdGUgZ3JpZXZhbmNlIG9yIHRoZSBzcGlyaXQgb2YgYW4gaW5mb3JtZXIsIGJ1dCB0aGF0CiAgICAgICAgICAgICAgICAgICAgdG8gc2V0IG15c2VsZiBpbiBvcHBvc2l0aW9uIHRvIGEgcHJvamVjdCBieSB3aGljaCBoZSB3YXMgY29uY2VydGluZyB2ZXJ5IHNlcmlvdXMKICAgICAgICAgICAgICAgICAgICBkZXRyaW1lbnQgdG8gdGhlIGNvbW1vbndlYWx0aCBpcyB0aGUgYWN0IG9mIGFuIGhvbmVzdCBtYW4gYW5kIGEgcGF0cmlvdGljCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbi4gVGhhdCBpcyB3aHkgSSB3YXMgc2lsZW50IHRoZW4gYW5kIHNwZWFrIG5vdy4gPC90cmFuc2xhdGlvbj4="
translation['23.191'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZXJlIGlzIGFub3RoZXIgcGxlYSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIHNvcnQgYnkgd2hpY2ggdGhleSBob3BlIHRvIGxlYWQgeW91IG9mZiB0aGUgdHJhY2suIOKAnENlcnNvYmxlcHRlcwogICAgICAgICAgICAgICAgICAgIGFuZCBDaGFyaWRlbXVzLOKAnSB0aGV5IHdpbGwgc2F5LCDigJxkaWQgcGVyaGFwcyBvcHBvc2UKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGF0IGEgdGltZSB3aGVuIHRoZXkgd2VyZQogICAgICAgICAgICAgICAgICAgIHVuZnJpZW5kbHk7IGJ1dCBub3cgdGhleSBhcmUgb3VyIGZyaWVuZHMsIGFuZCB3aXNoIHRvIGJlIHVzZWZ1bCBmcmllbmRzLiBXZQogICAgICAgICAgICAgICAgICAgIHJlYWxseSBtdXN0IG5vdCBiZSB2aW5kaWN0aXZlLiBXaGVuIHdlIHdlcmUgcmVzY3VpbmcgdGhlIExhY2VkYWVtb25pYW5zLCB3ZQogICAgICAgICAgICAgICAgICAgIGRpc21pc3NlZCBmcm9tIG91ciBtaW5kcyB0aGUgaW5qdXJpZXMgdGhleSBoYWQgZG9uZSB0byB1cyBhcyBlbmVtaWVzOyBzbyB0b28KICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBUaGViYW5zLCBhbmQsIHF1aXRlIHJlY2VudGx5LCB3aXRoIHRoZSBFdWJvZWFucy7igJ0gPC90cmFuc2xhdGlvbj4="
translation['23.192'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTIiIHVuaXQ9InNlY3Rpb24iIC8+4oCUQnV0IEkgaG9sZCB0aGF0IHRoaXMgcGxlYSB3b3VsZCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICByaWdodGx5IG9mZmVyZWQsIGlmIHRoZXkgaGFkIG9mZmVyZWQgaXQgb24gc29tZSBvY2Nhc2lvbiB3aGVuIGFuIGV4cGVkaXRpb24gaW4KICAgICAgICAgICAgICAgICAgICByZWxpZWYgb2YgQ2Vyc29ibGVwdGVzIGFuZCBDaGFyaWRlbXVzIGhhZCBiZWVuIHByb3Bvc2VkLCBhbmQgd2Ugd2VyZSB0cnlpbmcgdG8KICAgICAgICAgICAgICAgICAgICBibG9jayBpdC4gQnV0LCBhcyB3ZSBoYXZlIGhlcmUgbm8gc3VjaCBvY2Nhc2lvbiBhbmQgbm8gc3VjaCBwcm9wb3NhbCwgYnV0IG9ubHkKICAgICAgICAgICAgICAgICAgICB0aGUgYXJndW1lbnQgb2YgbWVuIHRyeWluZyB0byBtYWtlIENlcnNvYmxlcHRlcyBtb3JlIHBvd2VyZnVsIHRoYW4gaGUgZGVzZXJ2ZXMKICAgICAgICAgICAgICAgICAgICBieSBtZWFucyBvZiBhbiBpbW11bml0eSByZWNlaXZlZCBmcm9tIHlvdSBieSBoaXMgZ2VuZXJhbHMsIEkgcmVnYXJkIHRoZWlyIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIGFzIGRhbmdlcm91cy4gSXQgaXMgbm90IGZhaXIsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoYXQgdGhlIHBsZWFzIG9mIG1lbiBzZWVraW5nIGRlbGl2ZXJhbmNlIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIG9mZmVyZWQgdG8geW91IGluIGp1c3RpZmljYXRpb24gb2YgbWVuIHdob3NlIG9iamVjdCBpcyB0aGUgcG93ZXIgdG8gZG8geW91CiAgICAgICAgICAgICAgICAgICAgd3JvbmcuIDwvdHJhbnNsYXRpb24+"
translation['23.193'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTMiIHVuaXQ9InNlY3Rpb24iIC8+QXBhcnQgZnJvbSB0aGF0LCBpZiBoZSBoYWQgaW5qdXJlZCB5b3UKICAgICAgICAgICAgICAgICAgICBhcyBhbiBlbmVteSwgYnV0IGhhZCBiZWVuIHJlZm9ybWVkIGFmdGVyIGNsYWltaW5nIHRvIGJlIHlvdXIgZnJpZW5kLCBzdWNoIGFuCiAgICAgICAgICAgICAgICAgICAgZXhjdXNlIG1pZ2h0LCBwZXJoYXBzLCBoYXZlIGJlZW4gYWNjZXB0YWJsZTsgYnV0LCBpbmFzbXVjaCBhcyB0aGF0IGlzIG5vdCBzbywKICAgICAgICAgICAgICAgICAgICBhbmQgYXMgbW9zdCBvZiBoaXMgZGVjZXB0aW9ucyBmYWxsIGFmdGVyIHRoZSBkYXRlIG9mIGhpcyBwcm9mZXNzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kc2hpcCwgeW91IG91Z2h0IHRvIGRpc3RydXN0IGhpbSBmb3IgaGlzIGxhdGVyLCBpZiBub3QgdG8gZGlzbGlrZSBoaW0gZm9yCiAgICAgICAgICAgICAgICAgICAgaGlzIGVhcmxpZXIsIGNvbmR1Y3QuIFdpdGggcmVnYXJkLCBob3dldmVyLCB0byBub3QgYmVpbmcKICAgICAgICAgICAgICAgICAgICDigJx2aW5kaWN0aXZlLOKAnSBJIGhhdmUgdGhpcyB0byBzYXkuIFRoZSB2aW5kaWN0aXZlIG1hbiBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvIGh1bnRzIHVwIGdyaWV2YW5jZXMgaW4gb3JkZXIgdG8gaW5mbGljdCBpbmp1cnk7IHRoZSBtYW4gd2hvIGJlYXJzIHRoZW0KICAgICAgICAgICAgICAgICAgICBpbiBtaW5kIGluIG9yZGVyIHRvIGJlIG9uIGhpcyBndWFyZCBhbmQgbm90IHN1ZmZlciBpbmp1cnksIGlzIGEgcmVhc29uYWJsZSBtYW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.194'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBlcmhhcHMKICAgICAgICAgICAgICAgICAgICB0aGV5IHdpbGwgbWFrZSBhIHN1Z2dlc3Rpb24gb2YgdGhpcyBzb3J0OiB0aGUgbWFuIGhhcyBub3cgZW1iYXJrZWQgb24gYSBjb3Vyc2UKICAgICAgICAgICAgICAgICAgICBvZiBmcmllbmRzaGlwLCBhbmQgcmVhbGx5IHdhbnRzIHRvIGRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhIGdvb2QgdHVybjsgaWYgd2UgY29uZGVtbiB0aGUgZGVjcmVlLCB3ZSBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgIGRpc2NvdXJhZ2luZyBoaW0sIGFuZCBmaWxsaW5nIGhpbSB3aXRoIG1pc3RydXN0IG9mIHVzLiBXZWxsLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBteSBhdHRpdHVkZSBpcyB0aGlzOyBwbGVhc2UKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciBpdC4gSWYgaGUgd2VyZSBvdXIgZnJpZW5kIGhvbmVzdGx5IGFuZCBpbiBhbGwgc2luY2VyaXR5LCBpZiBoZSByZWFsbHkKICAgICAgICAgICAgICAgICAgICBkaWQgaW50ZW5kIHRvIGRvIHVzIGFsbCBtYW5uZXIgb2YgZ29vZCwgZXZlbiB0aGVuIEkgc2hvdWxkIG5vdCB0aGluayB0aGlzCiAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgd29ydGh5IG9mIHlvdXIgYXR0ZW50aW9uLiBJbiBteSBqdWRnZW1lbnQgdGhlcmUgaXMgbm8gbWFuIHdobyBjb3VsZAogICAgICAgICAgICAgICAgICAgIHBvc3NpYmx5IGRvIHlvdSBzbyBtdWNoIHNlcnZpY2UgdGhhdCBmb3IgaGlzIHNha2UgeW91IG91Z2h0IHRvIHBlcmp1cmUKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzIGFuZCB2b3RlIGFnYWluc3QgcHJvdmVuIGp1c3RpY2UuIDwvdHJhbnNsYXRpb24+"
translation['23.195'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTUiIHVuaXQ9InNlY3Rpb24iIC8+U2VlaW5nIHRoYXQgaGUgaXMgY29udmljdGVkIG9mIGRlY2VpdCBhbmQgcGVycGV0dWFsIGRpc2hvbmVzdHks4oCUdm90ZQogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgaGltLCBhbmQgb25lIG9mIHR3byBkZXNpcmFibGUgcmVzdWx0cyBtdXN0IGZvbGxvdy4gRWl0aGVyIGhlIHdpbGwKICAgICAgICAgICAgICAgICAgICBhYmFuZG9uIGhpcyBpbXBvc3R1cmVzIG9uIHRoZSBncm91bmQgdGhhdCB0aGV5IGNhbiBubyBsb25nZXIgZXNjYXBlIGRldGVjdGlvbiwKICAgICAgICAgICAgICAgICAgICBvciBlbHNlLCBpZiBpdCBpcyBoaXMgZGVzaXJlIHRvIGJlIHJlYWxseSBvbiBnb29kIHRlcm1zIHdpdGggdXMsIGhlIHdpbGwgbWFrZSBhCiAgICAgICAgICAgICAgICAgICAgZ2VudWluZSBlZmZvcnQgdG8gc2VydmUgdXMgd2VsbCwgaGF2aW5nIGRpc2NvdmVyZWQgdGhhdCBoZSBjYW4gbm8gbG9uZ2VyCiAgICAgICAgICAgICAgICAgICAgYWNjb21wbGlzaCBoaXMgcHVycG9zZXMgYnkgY2hpY2FuZXJ5LiBGb3IgdGhhdCByZWFzb24gYWxvbmUsIGlmIGZvciBubyBvdGhlciwKICAgICAgICAgICAgICAgICAgICB5b3Ugd2lsbCBkbyB3ZWxsIHRvIGdpdmUgeW91ciB2ZXJkaWN0IGFnYWluc3QgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.196'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IGlzIGFsc28gb3Bwb3J0dW5lLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0byBpbnF1aXJlIGhvdyBvdXIKICAgICAgICAgICAgICAgICAgICBmb3JlZmF0aGVycyBiZXN0b3dlZCBkaXN0aW5jdGlvbnMgYW5kIHJld2FyZHMgdXBvbiBnZW51aW5lIGJlbmVmYWN0b3JzLCB3aGV0aGVyCiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIGNpdGl6ZW5zIG9yIHN0cmFuZ2Vycy4gSWYgeW91IGZpbmQgdGhlaXIgcHJhY3RpY2UgYmV0dGVyIHRoYW4geW91cnMsCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgZG8gd2VsbCB0byBmb2xsb3cgdGhlaXIgZXhhbXBsZTsgaWYgeW91IHByZWZlciB5b3VyIG93biwgaXQgcmVzdHMgd2l0aAogICAgICAgICAgICAgICAgICAgIHlvdSB0byBjb250aW51ZSBpdC4gVGFrZSBmaXJzdCBUaGVtaXN0b2NsZXMsIHdobyB3b24gdGhlIG5hdmFsIHZpY3RvcnkgYXQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDIzNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjM0MCI+U2FsYW1pczwvcGxhY2VOYW1lPiwgTWlsdGlhZGVzLCB3aG8gY29tbWFuZGVkCiAgICAgICAgICAgICAgICAgICAgYXQgTWFyYXRob24sIGFuZCBtYW55IG90aGVycywgd2hvc2UgYWNoaWV2ZW1lbnRzIHdlcmUgbm90IG9uIGEgbGV2ZWwgd2l0aCB0aG9zZQogICAgICAgICAgICAgICAgICAgIG9mIG91ciBjb21tYW5kZXJzIHRvZGF5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5CeSDigJxub3QKICAgICAgICAgICAgICAgICAgICAgICAgZXF1YWzigJ0gRGVtb3N0aGVuZXMgc2VlbXMgaGVyZSB0byBtZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnHN1cGVyaW9yLuKAnTwvbm90ZT4gT3VyIGFuY2VzdG9ycyBkaWQgbm90IHB1dCB1cCBicm9uemUKICAgICAgICAgICAgICAgICAgICBzdGF0dWVzIG9mIHRoZXNlIG1lbiwgbm9yIGRpZCB0aGV5IGNhcnJ5IHRoZWlyIHJlZ2FyZCBmb3IgdGhlbSB0byBleHRyZW1lcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.197'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTciIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhleSB3ZXJlIG5vdCBncmF0ZWZ1bCB0byB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBoYWQgc2VydmVkIHRoZW0gd2VsbD8gWWVzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGV5IHdlcmUgdmVyeSBncmF0ZWZ1bDsgdGhleSBzaG93ZWQgdGhlaXIgZ3JhdGl0dWRlIGluCiAgICAgICAgICAgICAgICAgICAgYSBtYW5uZXIgdGhhdCB3YXMgZXF1YWxseSBjcmVkaXRhYmxlIHRvIHRoZW1zZWx2ZXMgYW5kIHRoZSByZWNpcGllbnRzLiBUaGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICBhbGwgbWVuIG9mIG1lcml0LCBidXQgdGhleSBjaG9zZSB0aG9zZSBtZW4gdG8gbGVhZCB0aGVtOyBhbmQgdG8gbWVuIG9mIHNvYnJpZXR5LAogICAgICAgICAgICAgICAgICAgIHdobyBoYXZlIGEga2VlbiBleWUgZm9yIHJlYWxpdGllcywgYmVpbmcgcmFpc2VkIHRvIHRoZSBwcmltYWN5IG9mIGEgYnJhdmUgYW5kCiAgICAgICAgICAgICAgICAgICAgbm9ibGUgcGVvcGxlIGlzIGEgZmFyIGdyZWF0ZXIgZGlzdGluY3Rpb24gdGhhbiBhbnkgZWZmaWd5IG9mIGJyb256ZS4gPC90cmFuc2xhdGlvbj4="
translation['23.198'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTgiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHRydXRoIGlzLCBnZW50bGVtZW4sIHRoYXQgdGhleSB3b3VsZCBub3Qgcm9iCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBvZiB0aGVpciBvd24gc2hhcmUgaW4gYW55IG9mIHRob3NlIGFuY2llbnQgYWNoaWV2ZW1lbnRzOyBhbmQgbm8gbWFuCiAgICAgICAgICAgICAgICAgICAgd291bGQgc2F5IHRoYXQgdGhlIGJhdHRsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjM0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyMzQwIj5TYWxhbWlzPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgYmVsb25nZWQgdG8gVGhlbWlzdG9jbGVzLOKAlGl0IHdhcyB0aGUgYmF0dGxlIG9mIHRoZSBBdGhlbmlhbnM7IG9yIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgdmljdG9yeSBhdCBNYXJhdGhvbiBiZWxvbmdlZCB0byBNaWx0aWFkZXMs4oCUaXQgd2FzIHRoZSB2aWN0b3J5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1vbndlYWx0aC4gQnV0IHRvZGF5LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpdCBpcyBjb21tb25seSBzYWlkIHRoYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA4ODYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDg4NiI+Q29yY3lyYTwvcGxhY2VOYW1lPiB3YXMgY2FwdHVyZWQgYnkgVGltb3RoZXVzLCB0aGF0IHRoZSBTcGFydGFuIGJhdHRhbGlvbgogICAgICAgICAgICAgICAgICAgIHdhcyBjdXQgdG8gcGllY2VzIGJ5IElwaGljcmF0ZXMsIHRoYXQgdGhlIG5hdmFsIHZpY3Rvcnkgb2ZmIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEyMDUzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTIwNTMiPk5heG9zPC9wbGFjZU5hbWU+IHdhcyB3b24gYnkgQ2hhYnJpYXMuIEl0IHJlYWxseSBsb29rcyBhcwogICAgICAgICAgICAgICAgICAgIHRob3VnaCB5b3UgZGlzY2xhaW1lZCBhbnkgbWVyaXQgZm9yIHRob3NlIGZlYXRzIG9mIGFybXMgYnkgdGhlIGV4dHJhdmFnYW50CiAgICAgICAgICAgICAgICAgICAgZmF2b3VycyB0aGF0IHlvdSBsYXZpc2ggb24gdGhlIHNldmVyYWwgY29tbWFuZGVycy4gPC90cmFuc2xhdGlvbj4="
translation['23.199'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRodXMgdGhleSBkaXN0cmlidXRlZCByZXdhcmRzCiAgICAgICAgICAgICAgICAgICAgd2l0aGluIHRoZSBjaXR5IHJpZ2h0ZW91c2x5IGFuZCB0byB0aGUgcHVibGljIGFkdmFudGFnZTsgd2UgZG8gaXQgdGhlIHdyb25nIHdheS4KICAgICAgICAgICAgICAgICAgICBCdXQgd2hhdCBhYm91dCB0aG9zZSBiZXN0b3dlZCBvbiBzdHJhbmdlcnM/IFdoZW4gTWVubyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDc5NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwNzk3Ij5QaGFyc2FsdXM8L3BsYWNlTmFtZT4gaGFkIGdpdmVuIHVzIHR3ZWx2ZSB0YWxlbnRzIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICB3YXIgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFaW9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFaW9uIj5FaW9uPC9wbGFjZU5hbWU+IG5lYXIgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBbXBoaXBvbGlzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBbXBoaXBvbGlzIj5BbXBoaXBvbGlzPC9wbGFjZU5hbWU+LCBhbmQgaGFkIHJlaW5mb3JjZWQgdXMgd2l0aAogICAgICAgICAgICAgICAgICAgIHRocmVlIGh1bmRyZWQgb2YgaGlzIG93biBtb3VudGVkIHNlcmZzLCB0aGV5IGRpZCBub3QgcGFzcyBhIGRlY3JlZSB0aGF0IHdob2V2ZXIKICAgICAgICAgICAgICAgICAgICBzbGV3IE1lbm8gc2hvdWxkIGJlIGxpYWJsZSB0byBzZWl6dXJlOyB0aGV5IG1hZGUgaGltIGEgY2l0aXplbiwgYW5kIHRob3VnaHQgdGhhdAogICAgICAgICAgICAgICAgICAgIGRpc3RpbmN0aW9uIGFkZXF1YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.200'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDAiIHVuaXQ9InNlY3Rpb24iIC8+T3IgdGFrZSBQZXJkaWNjYXMsIHdobwogICAgICAgICAgICAgICAgICAgIHdhcyByZWlnbmluZyBpbiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwNjY2NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDA2NjY3Ij5NYWNlZG9uaWE8L3BsYWNlTmFtZT4gYXQgdGhlIHRpbWUKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgUGVyc2lhbiBpbnZhc2lvbiwgYW5kIHdobyBkZXN0cm95ZWQgdGhlIFBlcnNpYW5zIG9uIHRoZWlyIHJldHJlYXQgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLFBsYXRhZWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLFBsYXRhZWEiPlBsYXRhZWE8L3BsYWNlTmFtZT4sIGFuZCBtYWRlIHRoZSBkZWZlYXQgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgS2luZyBpcnJlcGFyYWJsZS4gVGhleSBkaWQgbm90IHJlc29sdmUgdGhhdCBhbnkgbWFuIHNob3VsZCBiZSBsaWFibGUgdG8KICAgICAgICAgICAgICAgICAgICBzZWl6dXJlIHdobyBraWxsZWQgUGVyZGljY2FzLCB0aGUgbWFuIHdobyBmb3Igb3VyIHNha2UgaGFkIHByb3Zva2VkIHRoZSBlbm1pdHkKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgZ3JlYXQgS2luZzsgdGhleSBnYXZlIGhpbSBvdXIgY2l0aXplbnNoaXAsIGFuZCB0aGF0IHdhcyBhbGwuIFRoZSB0cnV0aCBpcwogICAgICAgICAgICAgICAgICAgIHRoYXQgaW4gdGhvc2UgZGF5cyB0byBiZSBtYWRlIGEgY2l0aXplbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2FzIGFuIGhvbm9yIHNvIHByZWNpb3VzIGluIHRoZSBleWVzIG9mIHRoZSB3b3JsZCB0aGF0LAogICAgICAgICAgICAgICAgICAgIHRvIGVhcm4gdGhhdCBmYXZvdXIgYWxvbmUsIG1lbiB3ZXJlIHJlYWR5IHRvIHJlbmRlciB0byB5b3UgdGhvc2UgbWVtb3JhYmxlCiAgICAgICAgICAgICAgICAgICAgc2VydmljZXMuIFRvZGF5IGl0IGlzIHNvIHdvcnRobGVzcyB0aGF0IG5vdCBhIGZldyBtZW4gd2hvIGhhdmUgYWxyZWFkeSByZWNlaXZlZAogICAgICAgICAgICAgICAgICAgIGl0IGhhdmUgd3JvdWdodCB3b3JzZSBtaXNjaGllZiB0byB5b3UgdGhhbiB5b3VyIGRlY2xhcmVkIGVuZW1pZXMuIDwvdHJhbnNsYXRpb24+"
translation['23.201'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IG9ubHkgdGhpcyBndWVyZG9uIG9mIHRoZSBjb21tb24gd2VhbHRoIGJ1dCBhbGwKICAgICAgICAgICAgICAgICAgICB5b3VyIGhvbm9ycyBoYXZlIGJlZW4gZHJhZ2dlZCB0aHJvdWdoIHRoZSBtaXJlIGFuZCBtYWRlIGNvbnRlbXB0aWJsZSBieSB0aG9zZQogICAgICAgICAgICAgICAgICAgIGV4ZWNyYWJsZSBhbmQgZ29kLWZvcnNha2VuIHBvbGl0aWNpYW5zLCB3aG8gbWFrZSBwcm9wb3NhbHMgbGlrZSB0aGlzIG9uIHN1Y2gKICAgICAgICAgICAgICAgICAgICBlYXN5IHRlcm1zOyBtZW4gd2hvLCBpbiB0aGVpciBpbm9yZGluYXRlIGx1c3Qgb2YgZGlzaG9uZXN0IGdhaW4sIHB1dCB1cCBob25vcnMKICAgICAgICAgICAgICAgICAgICBhbmQgY2l2aWMgcmV3YXJkcyBmb3Igc2FsZSwgbGlrZSBodWNrc3RlcnMgdmVuZGluZyBhbmQgY2hlYXBlbmluZyB0aGVpciBwaXRpZnVsLAogICAgICAgICAgICAgICAgICAgIHRydW1wZXJ5IG1lcmNoYW5kaXNlLCBhbmQgc3VwcGx5IGEgaG9zdCBvZiBidXllcnMgYXQgZml4ZWQgcHJpY2VzIHdpdGggYW55CiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIHRoZXkgd2FudC4gPC90cmFuc2xhdGlvbj4="
translation['23.202'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHRoZSBmaXJzdCBwbGFjZSzigJRsZXQgbWUgbWVudGlvbiB0aGUgbGF0ZXN0CiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UgZmlyc3Qs4oCUdGhleSBub3Qgb25seSBjbGFpbWVkIHRoYXQgQXJpb2JhcnphbmVzIGFuZCBoaXMgdHdvCiAgICAgICAgICAgICAgICAgICAgc29ucyBkZXNlcnZlZCBldmVyeXRoaW5nIHRoZXkgY2hvc2UgdG8gYXNrIGZvciwgYnV0IHRoZXkgYXNzb2NpYXRlZCB3aXRoIGhpbSB0d28KICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDYwMDAwMzAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNjAwMDAzMCI+QWJ5ZHVzPC9wbGFjZU5hbWU+LCB1bnByaW5jaXBsZWQgZmVsbG93cywKICAgICAgICAgICAgICAgICAgICBhbmQgYml0dGVyIGVuZW1pZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIFBoaWxpc2N1cyBhbmQgQWdhdnVzLiBBZ2Fpbiwgd2hlbiBUaW1vdGhldXMgd2FzIGhlbGQgdG8gaGF2ZSBzZXJ2ZWQgeW91ciBuZWVkcwogICAgICAgICAgICAgICAgICAgIGluIHNvbWUgd2F5LCBiZXNpZGVzIGNvbmZlcnJpbmcgb24gaGltIGFsbCBtYW5uZXIgb2YgZ3JlYXQgcmV3YXJkcywgdGhleQogICAgICAgICAgICAgICAgICAgIGFzc29jaWF0ZWQgd2l0aCBoaW0gUGhyYXNpZXJpZGVzIGFuZCBQb2x5c3RoZW5lcywgd2hvIHdlcmUgbm90IGV2ZW4gZnJlZS1ib3JuLAogICAgICAgICAgICAgICAgICAgIGJ1dCB3ZXJlIGJsYWNrZ3VhcmRzIHdob3NlIGNvbmR1Y3QgaGFkIGJlZW4gc3VjaCBhcyBhbnkgbWFuIG9mIGdvb2QgZmVlbGluZyB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgbG90aCB0byBkZXNjcmliZS4gPC90cmFuc2xhdGlvbj4="
translation['23.203'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDMiIHVuaXQ9InNlY3Rpb24iIC8+RmluYWxseSBvbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgb2NjYXNpb24sIHdoaWxlIGRlbWFuZGluZyBmb3IgQ2Vyc29ibGVwdGVzIGFueSBob25vcnMgdGhleSB0aG91Z2h0IHByb3BlciwgYW5kCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgY29uY2VudHJhdGluZyBvbiB0aGF0LCB0aGV5IGF0dGFjaGVkIHR3byBvdGhlciBuYW1lcyB0byBoaXMuIE9uZSBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBtYW4gb2Ygd2hvc2UgbWFueSBtaXNkZWVkcyB5b3UgaGF2ZSBqdXN0IGhlYXJkIHRoZSBzdG9yeS4gVGhlIG90aGVyIGlzIG5hbWVkCiAgICAgICAgICAgICAgICAgICAgRXVkZXJjZXMsIGJ1dCBub2JvZHkgaW4gdGhlIHdpZGUgd29ybGQga25vd3Mgd2hvIGhlIGlzLiBZb3Ugc2VlIHRoZSByZXN1bHQsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjogaG9ub3JzIHRoYXQgd2VyZSBvbmNlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXQgbm93IGFwcGVhciB0cmlmbGluZzsgYW5kIHRoZSBwcmFjdGljZSBpcyBhZHZhbmNpbmcgZXZlciBmYXJ0aGVyIGFuZAogICAgICAgICAgICAgICAgICAgIGZhcnRoZXIuIFRoZSBvbGQgcmV3YXJkcyBubyBsb25nZXIgc3VmZmljZSwgYW5kIHRoZXkgYXJlIG5vdCBpbiB0aGUgbGVhc3QKICAgICAgICAgICAgICAgICAgICBncmF0ZWZ1bCBmb3IgdGhlbSwgdW5sZXNzIHlvdSB3aWxsIGFsc28gcHJvdGVjdCB0aGVpciBwZXJzb25zLCBtYW4gYnkgbWFuLCBvciBzbwogICAgICAgICAgICAgICAgICAgIGl0IHNlZW1zLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.204'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZvcgogICAgICAgICAgICAgICAgICAgIHRoaXMgcHJvZ3Jlc3MgYWxvbmcgdGhlIHJvYWQgb2YgZGlzaG9ub3IsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGlmIEkgYW0gdG8gdGVsbCB0aGUgdHJ1dGggaW4gYWxsIGNhbmRvciwgbm9ib2R5IGlzIG1vcmUKICAgICAgICAgICAgICAgICAgICB0byBibGFtZSB0aGFuIHlvdXJzZWx2ZXMuIFlvdSBhcmUgbm8gbG9uZ2VyIHdpbGxpbmcgdG8gYnJpbmcgbWFsZWZhY3RvcnMgdG8KICAgICAgICAgICAgICAgICAgICBqdXN0aWNlOiByZXRyaWJ1dGlvbiBoYXMgZGlzYXBwZWFyZWQgZnJvbSBvdXIgY2l0eS4gWWV0IGNvbnNpZGVyIGhvdyBvdXIKICAgICAgICAgICAgICAgICAgICBhbmNlc3RvcnMgY2FzdGlnYXRlZCB0aG9zZSB3aG8gaGFkIGRvbmUgdGhlbSB3cm9uZywgYW5kIGFzayB3aGV0aGVyIHRoZWlyIHdheQogICAgICAgICAgICAgICAgICAgIHdhcyBub3QgYmV0dGVyIHRoYW4geW91cnMuIDwvdHJhbnNsYXRpb24+"
translation['23.205'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGV5IGNhdWdodAogICAgICAgICAgICAgICAgICAgIFRoZW1pc3RvY2xlcyBwcmVzdW1wdHVvdXNseSBzZXR0aW5nIGhpbXNlbGYgYWJvdmUgdGhlIHBlb3BsZSwgdGhleSBiYW5pc2hlZCBoaW0KICAgICAgICAgICAgICAgICAgICBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIGZvdW5kIGhpbSBndWlsdHkgb2YKICAgICAgICAgICAgICAgICAgICBzaWRpbmcgd2l0aCB0aGUgTWVkZXMuIEJlY2F1c2UgQ2ltb24gaGFkIGRpc2xvY2F0ZWQgdGhlIGFuY2VzdHJhbCBjb25zdGl0dXRpb24KICAgICAgICAgICAgICAgICAgICBieSBoaXMgcGVyc29uYWwgZWZmb3J0cywgdGhleSBhY3F1aXR0ZWQgaGltIGJ5IGEgbWFqb3JpdHkgb2YgdGhyZWUgdm90ZXMgb25seSBvbgogICAgICAgICAgICAgICAgICAgIHRoZSBjYXBpdGFsIGNoYXJnZSwgYW5kIG1hZGUgaGltIHBheSBmaWZ0eSB0YWxlbnRzLiBTdWNoIHdhcyB0aGVpciBhdHRpdHVkZSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBtZW4gd2hvIGhhZCByZW5kZXJlZCB0aG9zZSBzaWduYWwgc2VydmljZXMuIEFuZCB0aGV5IHdlcmUgcmlnaHQ7IHRoZXkgd291bGQKICAgICAgICAgICAgICAgICAgICBub3Qgc2VsbCB0byB0aG9zZSBtZW4gdGhlaXIgb3duIGZyZWVkb20gYW5kIHRoZWlyIHByaWRlIGluIHRoZWlyIG93bgogICAgICAgICAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk9yLCBpZiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJTPgc6zz4nOvTwvZm9yZWlnbj4gaXMsIGFzIHNvbWUgdGFrZSBpdCwgZ2VuaXRpdmUgb2YgcHJpY2UsCiAgICAgICAgICAgICAgICAgICAgICAgIOKAnHNlbGwgdGhlaXIgZnJlZWRvbSBhbmQgdGhlaXIgcHJpZGUgdG8gdGhvc2UgbWVuIGluIHJldHVybiBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgYWNoaWV2ZW1lbnRzLuKAnTwvbm90ZT4gdGhleSBob25vcmVkIHRoZW0gYXMgbG9uZyBhcyB0aGV5IGRpZAogICAgICAgICAgICAgICAgICAgIHJpZ2h0LCBidXQgcmVzaXN0ZWQgdGhlbSB3aGVuIHRoZXkgdHJpZWQgdG8gZG8gd3JvbmcuIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8lM+BzrPPic69PC9mb3JlaWduPiBpcywgYXMgc29tZSB0YWtlIGl0LCBnZW5pdGl2ZSBvZiBwcmljZSwKICAgICAgICAgICAgICAgICAgICAgICAg4oCcc2VsbCB0aGVpciBmcmVlZG9tIGFuZCB0aGVpciBwcmlkZSB0byB0aG9zZSBtZW4gaW4gcmV0dXJuIGZvcgogICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBhY2hpZXZlbWVudHMu4oCdPC90cmFuc2xhdGlvbj4="
translation['23.206'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDYiIHVuaXQ9InNlY3Rpb24iIC8+WW91LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhY3F1aXQgbWVuIHdobyBoYXZlIGNvbW1pdHRlZCB0aGUgZ3JhdmVzdCBjcmltZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgYXJlIGNsZWFybHkgcHJvdmVkIGd1aWx0eSwgaWYgdGhleSB0cmVhdCB5b3UgdG8gb25lIG9yIHR3byBwbGVhc2FudHJpZXMsIG9yIGlmIGEKICAgICAgICAgICAgICAgICAgICBmZXcgYWR2b2NhdGVzIGNob3NlbiBmcm9tIHRoZWlyIG93biB0cmliZSBhc2sgeW91IHRvIGJlIHNvIGdvb2QuIElmIGV2ZXIgeW91IGRvCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgdGhlbSBpbiBndWlsdHksIHlvdSBhc3Nlc3MgdGhlIHBlbmFsdHkgYXQgZml2ZS1hbmQtdHdlbnR5IGRyYWNobWFzLiBJbgogICAgICAgICAgICAgICAgICAgIHRob3NlIG9sZCB0aW1lcyB0aGUgU3RhdGUgd2FzIHdlYWx0aHkgYW5kIHNwbGVuZGlkLCBidXQgaW4gcHJpdmF0ZSBsaWZlIG5vIG1hbgogICAgICAgICAgICAgICAgICAgIGhlbGQgaGlzIGhlYWQgaGlnaGVyIHRoYW4gdGhlIG11bHRpdHVkZS4gPC90cmFuc2xhdGlvbj4="
translation['23.207'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDciIHVuaXQ9InNlY3Rpb24iIC8+SGVyZQogICAgICAgICAgICAgICAgICAgIGlzIHRoZSBwcm9vZjogaWYgYW55IG9mIHlvdSBrbm93IHRoZSBzb3J0IG9mIGhvdXNlIHRoYXQgVGhlbWlzdG9jbGVzIG9yCiAgICAgICAgICAgICAgICAgICAgTWlsdGlhZGVzIG9yIGFueSBvZiB0aG9zZSBkaXN0aW5ndWlzaGVkIG1lbiBvZiBvbGQgbGl2ZWQgaW4sIHlvdSBtYXkgb2JzZXJ2ZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgaXMgbm8gZ3JhbmRlciB0aGFuIHRoZSBjb21tb24gcnVuIG9mIGhvdXNlcy4gT24gdGhlIG90aGVyIGhhbmQsIGJvdGggdGhlCiAgICAgICAgICAgICAgICAgICAgc3RydWN0dXJlIGFuZCB0aGUgZXF1aXBtZW50IG9mIHRoZWlyIFB1YmxpYyBidWlsZGluZ3Mgd2VyZSBvbiBzdWNoIGEgc2NhbGUgYW5kCiAgICAgICAgICAgICAgICAgICAgb2Ygc3VjaCBxdWFsaXR5IHRoYXQgbm8gb3Bwb3J0dW5pdHkgb2Ygc3VycGFzc2luZyB0aGVtIHdhcyBsZWZ0IHRvIGNvbWluZwogICAgICAgICAgICAgICAgICAgIGdlbmVyYXRpb25zLiBXaXRuZXNzIHRob3NlIGdhdGUtaG91c2VzLCBkb2NrcywgcG9ydGljb2VzLCB0aGUgZ3JlYXQgaGFyYm9yLCBhbmQKICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIGVkaWZpY2VzIHdpdGggd2hpY2ggeW91IHNlZSBvdXIgY2l0eSBhZG9ybmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['23.208'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDgiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvZGF5IGV2ZXJ5IG1hbiB3aG8gdGFrZXMgcGFydCBpbiBwdWJsaWMgbGlmZSBlbmpveXMKICAgICAgICAgICAgICAgICAgICBzdWNoIHN1cGVyZmx1aXR5IG9mIHdlYWx0aCB0aGF0IHNvbWUgb2YgdGhlbSBoYXZlIGJ1aWx0IHByaXZhdGUgZHdlbGxpbmctaG91c2VzCiAgICAgICAgICAgICAgICAgICAgbW9yZSBtYWduaWZpY2VudCB0aGFuIG1hbnkgcHVibGljIGJ1aWxkaW5nczsgYW5kIG90aGVycyBoYXZlIGJvdWdodCBsYXJnZXIKICAgICAgICAgICAgICAgICAgICBlc3RhdGVzIHRoYW4gYWxsIHlvdSBwZW9wbGUgaW4gdGhpcyBjb3VydCBwb3NzZXNzIGJldHdlZW4geW91OyB3aGlsZSwgYXMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHB1YmxpYyBidWlsZGluZ3MgdGhhdCB5b3UgcHV0IHVwIGFuZCB3aGl0ZXdhc2gsIEkgYW0gYXNoYW1lZCB0byBzYXkgaG93IG1lYW4gYW5kCiAgICAgICAgICAgICAgICAgICAgc2hhYmJ5IHRoZXkgYXJlLiBDYW4geW91IG5hbWUgYW55dGhpbmcgdGhhdCB5b3UgaGF2ZSBhY3F1aXJlZCBhbmQgdGhhdCB5b3Ugd2lsbAogICAgICAgICAgICAgICAgICAgIGJlcXVlYXRoIHRvIHBvc3Rlcml0eSwgYXMgdGhleSBiZXF1ZWF0aGVkIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMjA1NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEyMDU3Ij5DaGVyc29uZXN1czwvcGxhY2VOYW1lPiwgYW5kIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQW1waGlwb2xpcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQW1waGlwb2xpcyI+QW1waGlwb2xpczwvcGxhY2VOYW1lPiwgYW5kIHRoZSBnbG9yeSBvZiBub2JsZSBleHBsb2l0cz8gVGhhdCBnbG9yeQogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGxpa2UgdGhlc2UgYXJlIHNxdWFuZGVyaW5nIGFzIGZhc3QgYXMgdGhleSBjYW4s4oCUYnV0IHRoZXkKICAgICAgICAgICAgICAgICAgICBjYW5ub3QgYW5uaWhpbGF0ZSBpdCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsKICAgICAgICAgICAgICAgICAgICBhbmQgd2Uga25vdyB3aHkuIDwvdHJhbnNsYXRpb24+"
translation['23.209'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDkiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhvc2UgZGF5cyBBcmlzdGVpZGVzIGhhZAogICAgICAgICAgICAgICAgICAgIGZ1bGwgY29udHJvbCBvZiB0aGUgYXNzZXNzbWVudCBvZiB0aGUgdHJpYnV0ZSwgYnV0IGhpcyBvd24gZm9ydHVuZSB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgaW5jcmVhc2VkIGJ5IGEgc2luZ2xlIHNoaWxsaW5nOyBhbmQgd2hlbiBoZSBkaWVkIGhlIHdhcyBhY3R1YWxseSBidXJpZWQgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHVibGljIGV4cGVuc2UuIFdoZW5ldmVyIHlvdSB3YW50ZWQgYW55dGhpbmcsIHlvdSBoYWQgbW9yZSBtb25leSBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgdHJlYXN1cnkgdGhhbiBhbnkgb3RoZXIgSGVsbGVuaWMgcGVvcGxlLCBpbnNvbXVjaCB0aGF0IHlvdSBhbHdheXMgc3RhcnRlZCBvbiBhbnkKICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uIHdpdGggcGF5IGZvciB0aGUgZnVsbCBwZXJpb2QgbmFtZWQgaW4gdGhlIGRlY3JlZSBhdXRob3JpemluZyBzdWNoCiAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbi4gTm93LCB3aGlsZSB0aGUgYWRtaW5pc3RyYXRvcnMgb2YgcHVibGljIGFmZmFpcnMgaGF2ZSByaXNlbiBmcm9tCiAgICAgICAgICAgICAgICAgICAgcG92ZXJ0eSB0byBhZmZsdWVuY2UsIGFuZCBhcmUgcHJvdmlkZWQgd2l0aCBhbXBsZSBtYWludGVuYW5jZSBmb3IgYSBsb25nIHRpbWUgdG8KICAgICAgICAgICAgICAgICAgICBjb21lLCB5b3UgaGF2ZSBub3QgZW5vdWdoIG1vbmV5IGxhaWQgYnkgZm9yIGEgc2luZ2xlIGRheSdzIGV4cGVuZGl0dXJlLCBhbmQgd2hlbgogICAgICAgICAgICAgICAgICAgIHNvbWV0aGluZyBtdXN0IGJlIGRvbmUsIHlvdSBhcmUgYXQgb25jZSB3aXRob3V0IHRoZSBtZWFucyBvZiBkb2luZyBpdC4gVGhlCiAgICAgICAgICAgICAgICAgICAgbmF0aW9uIHdhcyB0aGVuIHRoZSBtYXN0ZXIsIGFzIGl0IGlzIG5vdyB0aGUgc2VydmFudCwgb2YgdGhlIHBvbGl0aWNpYW5zLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.210'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTAiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZhdWx0IGxpZXMgd2l0aCB0aGUgYXV0aG9ycyBvZiBzdWNoCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlcyBhcyB0aGlzLCB3aG8gaGF2ZSB0cmFpbmVkIHlvdSB0byB0aGluayB2ZXJ5IGxpdHRsZSBvZiB5b3Vyc2VsdmVzLCBhbmQgYQogICAgICAgICAgICAgICAgICAgIGdyZWF0IGRlYWwgb2Ygb25lIG9yIHR3byBpbmRpdmlkdWFscy4gU28gdGhleSBhcmUgdGhlIGluaGVyaXRvcnMgb2YgeW91ciByZW5vd24KICAgICAgICAgICAgICAgICAgICBhbmQgb2YgeW91ciBwb3NzZXNzaW9uczsgeW91IGdldCBubyBiZW5lZml0IGZyb20gdGhhdCBpbmhlcml0YW5jZSEgWW91IGFyZSB0aGUKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgb2YgdGhlIHByb3NwZXJpdHkgb2Ygb3RoZXJzLCBhbmQgcGFydGljaXBhdGUgaW4gbm90aGluZyBidXQgZGVsdXNpb25zLgogICAgICAgICAgICAgICAgICAgIEFoLCBob3cgbG91ZCB3b3VsZCBiZSB0aGUgbGFtZW50YXRpb24gb2YgdGhvc2UgZ3JlYXQgbWVuIHdobyBsYWlkIGRvd24gdGhlaXIKICAgICAgICAgICAgICAgICAgICBsaXZlcyBmb3IgZ2xvcnkgYW5kIGZvciBsaWJlcnR5LCBhbmQgbGVmdCBiZWhpbmQgdGhlbSB0aGUgbW9udW1lbnRzIG9mIG1hbnkKICAgICAgICAgICAgICAgICAgICBub2JsZSBhY2hpZXZlbWVudHMsIGlmIHRoZXkgY291bGQgc2VlIGhvdyB0b2RheSB0aGUgcHJvZ3Jlc3Mgb2Ygb3VyIGNpdHkgaGFzCiAgICAgICAgICAgICAgICAgICAgZW5kZWQgaW4gdGhlIGZvcm0gYW5kIHJhbmsgb2YgYSBkZXBlbmRhbnQsIGFuZCB0aGF0IHRoZSBxdWVzdGlvbiBvZiB0aGUgaG91cgogICAgICAgICAgICAgICAgICAgIGlz4oCUd2hldGhlciBDaGFyaWRlbXVzIGlzIGVudGl0bGVkIHRvIHBlcnNvbmFsIHByb3RlY3Rpb24hIENoYXJpZGVtdXMhCiAgICAgICAgICAgICAgICAgICAgSGVhdmVuIGhlbHAgdXMhIDwvdHJhbnNsYXRpb24+"
translation['23.211'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCB0aGUgcmVhbGx5IHNjYW5kYWxvdXMgdGhpbmcgaXMsIG5vdCB0aGF0IG91ciBjb3Vuc2VscyBhcmUgaW5mZXJpb3IgdG8KICAgICAgICAgICAgICAgICAgICB0aG9zZSBvZiBvdXIgYW5jZXN0b3JzLCB3aG8gc3VycGFzc2VkIGFsbCBtYW5raW5kIGluIHZpcnR1ZSwgYnV0IHRoYXQgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICB3b3JzZSB0aGFuIHRob3NlIG9mIGFsbCBvdGhlciBuYXRpb25zLiBJcyBpdCBub3QgZGlzY3JlZGl0YWJsZSB0aGF0LCB3aGVyZWFzIHRoZQogICAgICAgICAgICAgICAgICAgIEFlZ2luZXRhbnMgeW9uZGVyLCB3aG8gaW5oYWJpdCB0aGF0IGluc2lnbmlmaWNhbnQgaXNsYW5kLCBhbmQgaGF2ZSBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgdG8gYmUgcHJvdWQgb2YsIGhhdmUgbmV2ZXIgdG8gdGhpcyBkYXkgZ2l2ZW4gdGhlaXIgY2l0aXplbnNoaXAgdG8KICAgICAgICAgICAgICAgICAgICBMYW1waXMsIHRoZSBsYXJnZXN0IHNoaXAtb3duZXIgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDEwMDAwNzQiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTAwMDA3NCI+SGVsbGFzPC9wbGFjZU5hbWU+LCB3aG8gZml0dGVkIG91dCB0aGVpciBjaXR5IGFuZCB0aGVpciBzZWFwb3J0LCBidXQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlbHVjdGFudGx5IHJld2FyZGVkIGhpbSBtZXJlbHkgd2l0aCBleGVtcHRpb24gZnJvbSB0aGUgYWxpZW4tdGF4OyA8L3RyYW5zbGF0aW9uPg=="
translation['23.212'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTIiIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCB3aGVyZWFzIHRob3NlIGRldGVzdGFibGUgTWVnYXJpYW5zIGFyZSBzbwogICAgICAgICAgICAgICAgICAgIG9ic2Vzc2VkIHdpdGggdGhlaXIgb3duIGRpZ25pdHkgdGhhdCwgd2hlbiB0aGUgTGFjZWRhZW1vbmlhbnMgc2VudCBhbmQgb3JkZXJlZAogICAgICAgICAgICAgICAgICAgIHRoZW0gdG8gYWRtaXQgdG8gdGhlaXIgY2l0aXplbnNoaXAgSGVybW8sIHRoZSBwaWxvdCwgd2hvLCBzZXJ2aW5nIHdpdGggTHlzYW5kZXIsCiAgICAgICAgICAgICAgICAgICAgY2FwdHVyZWQgdHdvIGh1bmRyZWQgd2FyLWdhbGxleXMgb24gdGhlIG9jY2FzaW9uIG9mIG91ciBkaXNhc3RlciBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNjAwMDA3MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw2MDAwMDcwIj5BZWdvc3BvdGFtaTwvcGxhY2VOYW1lPiwgdGhleSByZXBsaWVkIHRoYXQgdGhleSB3b3VsZCBtYWtlCiAgICAgICAgICAgICAgICAgICAgaGltIGEgTWVnYXJpYW4gd2hlbiB0aGV5IHNhdyB0aGF0IHRoZSBMYWNlZGFlbW9uaWFucyBoYWQgbWFkZSBoaW0gYSBTcGFydGFuOwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.213'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTMiIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCB3aGVyZWFzIHRoZSBwZW9wbGUgb2YgT3JldXMsIHdobwogICAgICAgICAgICAgICAgICAgIGluaGFiaXQgb25seSBhIGZvdXJ0aCBwYXJ0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBkZWFsaW5nIHdpdGggdGhpcyB2ZXJ5IENoYXJpZGVtdXMsIHdob3NlIG1vdGhlciBiZWxvbmdzIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgY2l0eSzigJRJIHdpbGwgbm90IG1lbnRpb24gd2hvIGhpcyBmYXRoZXIgaXMgb3Igd2hlcmUgaGUgY29tZXMgZnJvbSwgZm9yCiAgICAgICAgICAgICAgICAgICAgaXQgaXMgbm90IHdvcnRoIHdoaWxlIHRvIG1ha2UgdW5uZWNlc3NhcnkgaW5xdWlyaWVzIGFib3V0IHRoZSBtYW4s4oCUc28KICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhpbXNlbGYgY29udHJpYnV0ZWQgb25lLWhhbGYgb2YgdGhlIGJpcnRoLXF1YWxpZmljYXRpb24sIGhhdmUgbmV2ZXIgdG8KICAgICAgICAgICAgICAgICAgICB0aGlzIGRheSB0aG91Z2h0IGZpdCB0byBtYWtlIHVwIHRoZSBvdGhlciBtb2lldHksIGFuZCB0byB0aGlzIHZlcnkgZGF5IGhlIGlzIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGJhc3RhcmRzJyBsaXN0LCBqdXN0IGFzIGhlcmUgYmFzdGFyZHMgYXJlIHJlZ2lzdGVyZWQgYXQKICAgICAgICAgICAgICAgICAgICBDeW5vc2FyZ2VzLOKAlCA8L3RyYW5zbGF0aW9uPg=="
translation['23.214'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTQiIHVuaXQ9InNlY3Rpb24iIC8+d2lsbCB5b3UsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFmdGVyIGdpdmluZyBoaW0geW91cgogICAgICAgICAgICAgICAgICAgIGZ1bGwgZnJhbmNoaXNlIGFuZCBob25vcmluZyBoaW0gd2l0aCBvdGhlciBkaXN0aW5jdGlvbnMs4oCUd2lsbCB5b3UKICAgICAgICAgICAgICAgICAgICBiZXN0b3cgdXBvbiBoaW0gdGhpcyBpbW11bml0eSBpbnRvIHRoZSBiYXJnYWluPyBGb3Igd2hhdD8gV2hhdCBzaGlwcyBoYXMgaGUKICAgICAgICAgICAgICAgICAgICB0YWtlbiBmb3IgeW91LCB0byBjYXVzZSB0aGUgbWVuIHdobyBoYXZlIGxvc3QgdGhlbSB0byBwbG90IGFnYWluc3QgaGltPyBXaGF0CiAgICAgICAgICAgICAgICAgICAgY2l0eSBoYXMgaGUgY2FwdHVyZWQgYW5kIGhhbmRlZCBvdmVyIHRvIHlvdT8gV2hhdCBwZXJpbHMgaGFzIGhlIGVuY291bnRlcmVkIGluCiAgICAgICAgICAgICAgICAgICAgeW91ciBkZWZlbmNlPyBXaGVuIGhhcyBoZSBjaG9zZW4geW91ciBlbmVtaWVzIGFzIGhpcyBvd24/IE5vIG1hbiBjYW4gdGVsbCB5b3UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.215'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJlZm9yZSBJCiAgICAgICAgICAgICAgICAgICAgbGVhdmUgdGhlIHRyaWJ1bmUsIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgSSB3aXNoIHRvIGFkZCBzb21lIGJyaWVmIG9ic2VydmF0aW9ucwogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlIHN0YXR1dGVzIHRoYXQgd2UgaGF2ZSBhZGR1Y2VkLiBJZiB5b3Ugd2lsbCBiZWFyIHRoZW0gaW4gbWluZCwgSSB0aGluawogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91IHdpbGwga2VlcCBhIGJldHRlciBsb29rLW91dCBmb3IgYW55IGF0dGVtcHRzIHRoZXNlIG1lbiBtYXkgbWFrZSB0bwogICAgICAgICAgICAgICAgICAgIGNham9sZSBhbmQgbWlzbGVhZCB5b3UuIFRoZSBmaXJzdCBzdGF0dXRlIGV4cHJlc3NseSBvcmRhaW5zIHRoYXQsIGlmIGFueSBtYW4KICAgICAgICAgICAgICAgICAgICBzbGF5IGFub3RoZXIsIHRoZSBBcmVvcGFndXMgc2hhbGwgdGFrZSBjb2duaXphbmNlLiBBcmlzdG9jcmF0ZXMgcHJvcG9zZXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHN1Y2ggYSBtYW5zbGF5ZXIgc2hhbGwgYmUgbGlhYmxlIHRvIHNlaXp1cmUgd2l0aG91dCBtb3JlIGFkby4gTWFyayB0aGF0CiAgICAgICAgICAgICAgICAgICAgY2FyZWZ1bGx5LCBhbmQgcmVtZW1iZXIgdGhhdCB0byBtYWtlIGEgbWFuIGFuIG91dGxhdyB3aXRob3V0IHRyaWFsIGlzIGV4YWN0bHkKICAgICAgICAgICAgICAgICAgICB0aGUgb3Bwb3NpdGUgb2YgdHJ5aW5nIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['23.216'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNlY29uZAogICAgICAgICAgICAgICAgICAgIHN0YXR1dGUgZm9yYmlkcyBwZXJzb25hbCBtYWx0cmVhdG1lbnQgb3IgZXh0b3J0aW9uIGV2ZW4gaW4gdGhlIGNhc2Ugb2YgYQogICAgICAgICAgICAgICAgICAgIGNvbnZpY3RlZCBob21pY2lkZS4gQXJpc3RvY3JhdGVzLCBieSBtYWtpbmcgaGltIGxpYWJsZSB0byBzZWl6dXJlLCBoYXMgcGVybWl0dGVkCiAgICAgICAgICAgICAgICAgICAgc3VjaCBtaXN1c2FnZTsgZm9yIGl0IHdpbGwgYmUgY29tcGV0ZW50IGZvciBjYXB0b3JzIHRvIHRyZWF0IHRoZSBtYW4gYXMgdGhleQogICAgICAgICAgICAgICAgICAgIHdpbGwuIFRoZSBzdGF0dXRlIHByb3ZpZGVzIHRoYXQgdGhlIGN1bHByaXQgc2hhbGwgYmUgY29udmV5ZWQgdG8gdGhlIGp1ZGdlcywKICAgICAgICAgICAgICAgICAgICBldmVuIHRob3VnaCBhcnJlc3RlZCBpbiB0aGUgY291bnRyeSBvZiBoaXMgdmljdGltLiBIZSBhbGxvd3MgdGhlIGhvbWljaWRlIG9uCiAgICAgICAgICAgICAgICAgICAgc2VpenVyZSB0byBiZSB0YWtlbiB0byB0aGUgaG91c2Ugb2YgdGhlIHByb3NlY3V0b3IsIGV2ZW4gdGhvdWdoIHRoZSBjYXB0dXJlIGJlCiAgICAgICAgICAgICAgICAgICAgZWZmZWN0ZWQgaW4gZm9yZWlnbiBwYXJ0cy4gPC90cmFuc2xhdGlvbj4="
translation['23.217'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTciIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgYXJlIGNlcnRhaW4KICAgICAgICAgICAgICAgICAgICBpbmp1cmllcyBmb3Igd2hpY2ggdGhlIHN0YXR1dGUgcGVybWl0cyBsaWZlIHRvIGJlIHRha2VuLiBBcmlzdG9jcmF0ZXMsIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aG91Z2ggdGhlIGxpZmUgYmUgdGFrZW4gaW4gc3VjaCBjaXJjdW1zdGFuY2VzLCBtYWtlcyBubyByZXNlcnZhdGlvbiwgYnV0CiAgICAgICAgICAgICAgICAgICAgcGVybWl0cyBhIG1hbiB3aG9tIHRoZSBsYXdzIHJlbGVhc2Ugd2l0aG91dCBwZW5hbHR5IHRvIGJlIGhhbmRlZCBvdmVyIGZvcgogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQuIFdoZW4gYSBtYW4gaGFzIHN1ZmZlcmVkIHRoaXMgbWlzZm9ydHVuZSwgdGhlIGxhdyBlbmpvaW5zIHRoYXQKICAgICAgICAgICAgICAgICAgICBzYXRpc2ZhY3Rpb24gYmUgZmlyc3QgY2xhaW1lZC4gSW4gZGVmaWFuY2Ugb2YgdGhpcyBsYXcgaGUgcHJvcG9zZXMgbm8gdHJpYWwsCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kcyBubyByZWRyZXNzIGZyb20gdGhlIHBlcnNvbnMgb24gd2hvbSBoZSBoYXMgc3VjaCBjbGFpbSwgYnV0IGRlY2xhcmVzCiAgICAgICAgICAgICAgICAgICAgaW5jb250aW5lbnRseSB0aGF0IHRoZSBtYW4gaXMgbGlhYmxlIHRvIHNlaXp1cmUsIGFuZCBwdXRzIHVuZGVyIGFuIGltbWVkaWF0ZSBiYW4KICAgICAgICAgICAgICAgICAgICBhbnlvbmUgd2hvIHRyaWVzIHRvIHJlc2N1ZSBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['23.218'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTgiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHN0YXR1dGUKICAgICAgICAgICAgICAgICAgICBwcm92aWRlcyB0aGF0IG5vdCBtb3JlIHRoYW4gdGhyZWUgaG9zdGFnZXMgbWF5IGJlIHRha2VuIGZyb20gdGhlIHBlb3BsZSB3aXRoCiAgICAgICAgICAgICAgICAgICAgd2hvbSB0aGUgb2ZmZW5kZXIgbGl2ZXMsIGlmIHRoZXkgcmVmdXNlIHRvIGdpdmUgc2F0aXNmYWN0aW9uLiBUaGUgZGVmZW5kYW50IHB1dHMKICAgICAgICAgICAgICAgICAgICB1bmRlciBiYW4gd2l0aG91dCBtb3JlIGFkbyB3aG9zb2V2ZXIgcmVzY3VlcyB0aGUgYWNjdXNlZCBmcm9tIGhpcyBjYXB0b3JzCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBoZSBpcyB1bndpbGxpbmcgdG8gc3VycmVuZGVyIGhpbSBiZWZvcmUganVkZ2VtZW50LiBUaGUgc3RhdHV0ZSBmb3JiaWRzCiAgICAgICAgICAgICAgICAgICAgYW55b25lIHRvIGludHJvZHVjZSBhIG5ldyBsYXcgd2l0aG91dCBtYWtpbmcgaXQgYXBwbGljYWJsZSB0byBhbGwgbWVuIGFsaWtlOyBoZQogICAgICAgICAgICAgICAgICAgIGNvbXBvc2VzIGEgc3BlY2lhbCBkZWNyZWUgaW4gZmF2b3VyIG9mIGEgcGFydGljdWxhciBtYW4uIFRoZSBzdGF0dXRlIGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgcGVybWl0IGFueSBkZWNyZWUgdG8gb3ZlcnJpZGUgdGhlIGxhdy4gVGhlIHJlbGV2YW50IGxhd3MgYXJlIG1hbnksIGJ1dAogICAgICAgICAgICAgICAgICAgIEFyaXN0b2NyYXRlcyBhbm51bHMgdGhlbSBhbGwgYW5kIG1ha2VzIGEgbWVyZSBkZWNyZWUgc3VwcmVtZS4gPC90cmFuc2xhdGlvbj4="
translation['23.219'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJlYXIgYWxsIHRoaXMgaW4gbWluZCBhbmQKICAgICAgICAgICAgICAgICAgICBtZW1vcnkgc28gbG9uZyBhcyB5b3Ugc2l0IGluIHRoYXQgYm94LiBEaXNtaXNzIGFsbCB0aGUgZmFsbGFjaW91cyByZWFzb25zIHRoZXkKICAgICAgICAgICAgICAgICAgICB3aWxsIGFsbGVnZTsgZG8gbm90IGFsbG93IHRoZW0gdG8gYmUgdXR0ZXJlZC4gVGVsbCB0aGVtIHRvIHNob3cgeW91IHRoZSBjbGF1c2UKICAgICAgICAgICAgICAgICAgICBpbiB3aGljaCBoZSBoYXMgcHJvcG9zZWQgYSB0cmlhbCwgb3IgdGhlIGNsYXVzZSB0aGF0IHB1bmlzaGVzIGEgbWFuIGR1bHkKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgb2YgbXVyZGVyLiBJZiBoZSBoYWQgcHJvdmlkZWQgZm9yIHRoZSBkdWUgcHVuaXNobWVudCBvZiBhIG1hbiB0cmllZAogICAgICAgICAgICAgICAgICAgIGFuZCBmb3VuZCBndWlsdHkgZWxzZXdoZXJlLCBvciBpZiBoZSBoYWQgaGltc2VsZiBwcm9wb3NlZCBhIHRyaWFsIHRvIGRldGVybWluZQogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgaG9taWNpZGUgaGFzIGJlZW4gY29tbWl0dGVkIG9yIG5vdCwgYW5kIGlmIHNvIHdoZXRoZXIganVzdGlmaWFibHkgb3IKICAgICAgICAgICAgICAgICAgICBub3QsIGhlIHdvdWxkIGhhdmUgZG9uZSBubyB3cm9uZy4gPC90cmFuc2xhdGlvbj4="
translation['23.220'] = ""
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGRvIG5vdCB0aGluaywKICAgICAgICAgICAgICAgICAgICBnZW50bGVtZW4gb2YgdGhlIGp1cnksIHRoYXQgZXZlbiBUaW1vY3JhdGVzIGNhbiBsYXkgdGhlIGJsYW1lIG9mIHRoZSBwcmVzZW50CiAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRpb24gdXBvbiBhbnlvbmUgZWxzZTogaGUgaGFzIGJyb3VnaHQgaXQgb24gaGltc2VsZi4gTW92ZWQgYnkgZGVzaXJlIHRvCiAgICAgICAgICAgICAgICAgICAgZGVwcml2ZSB0aGUgU3RhdGUgb2YgYSBsYXJnZSBzdW0gb2YgbW9uZXksIGhlIGhhcyBtb3N0IGlsbGVnYWxseSBpbnRyb2R1Y2VkIGEKICAgICAgICAgICAgICAgICAgICBsYXcgd2hpY2ggaXMgYm90aCBpbmV4cGVkaWVudCBhbmQgaW5pcXVpdG91cy4gWW91IHNoYWxsIHByZXNlbnRseSBsZWFybiBpbgogICAgICAgICAgICAgICAgICAgIGRldGFpbCwgaWYgeW91IHdpbGwgbGlzdGVuIHRvIG1lLCBpbiBob3cgbWFueSByZXNwZWN0cyB0aGlzIGxhdywgaWYgcmF0aWZpZWQsCiAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBpbmp1cmlvdXMgYW5kIGRldHJpbWVudGFsIHRvIHRoZSBjb21tb24gd2VhbDsgYnV0IHRoZXJlIGlzIG9uZSByZXN1bHQsCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vc3QgaW1wb3J0YW50IGFuZCB0aGUgbW9zdCBvYnZpb3VzIHRoYXQgSSBjYW4gbmFtZSwgd2hpY2ggSSBzaGFsbCBub3QKICAgICAgICAgICAgICAgICAgICBoZXNpdGF0ZSB0byBwdXQgYmVmb3JlIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNpc2lvbiB0aGF0IHlvdSBwcm9ub3VuY2Ugb24gb2F0aCBvbiBldmVyeSBxdWVzdGlvbiB3aGljaCBpcyBhbm51bGxlZCBhbmQgbWFkZQogICAgICAgICAgICAgICAgICAgIHdvcnRobGVzcyBieSB0aGUgbGF3IHByb3Bvc2VkIGJ5IHRoZSBkZWZlbmRhbnQ7IGFuZCBoaXMgb2JqZWN0IGlzIG5vdCBhbnkgcHVibGljCiAgICAgICAgICAgICAgICAgICAgYmVuZWZpdCB0byB0aGUgU3RhdGUs4oCUdGhhdCBpcyBpbXBvc3NpYmxlLCBmb3IgaGlzIGxhdyByb2JzIHRob3NlCiAgICAgICAgICAgICAgICAgICAgQ291cnRzIG9mIEp1c3RpY2UsIHdoaWNoIGFyZSB0aGUgcGlsbGFycyBvZiB0aGUgY29uc3RpdHV0aW9uLCBvZiBhbGwgcG93ZXIgdG8KICAgICAgICAgICAgICAgICAgICBpbXBvc2UgdGhlIGFkZGl0aW9uYWwgcGVuYWx0aWVzIGF0dGFjaGVkIGJ5IHRoZSBsYXdzIHRvCiAgICAgICAgICAgICAgICAgICAgdHJhbnNncmVzc2lvbnMs4oCUYnV0IHRoYXQgY2VydGFpbiBvZiB0aG9zZSBtZW4gd2hvIGhhdmUgbG9uZyBiYXR0ZW5lZAogICAgICAgICAgICAgICAgICAgIG9uIHlvdXIgc3Vic3RhbmNlIGFuZCBwaWxsYWdlZCB5b3VyIHByb3BlcnR5IG1heSBub3QgZXZlbiByZWZ1bmQgbW9uZXlzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZXJlIG9wZW5seSBjYXVnaHQgaW4gdGhlIGFjdCBvZiBlbWJlenpsaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFsc28gaXQgaXMgc28gbXVjaCBlYXNpZXIgdG8gY3VycnkgZmF2b3VyIHByaXZhdGVseSB3aXRoCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbiBwZXJzb25zIHRoYW4gdG8gc3RhbmQgdXAgaW4gZGVmZW5jZSBvZiB5b3VyIHJpZ2h0cyB0aGF0LCB3aGlsZQogICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXMgaGFzIHRoZWlyIGZlZSBpbiBoaXMgcG9ja2V0LCBhbmQgbmV2ZXIgaW50cm9kdWNlZCBoaXMgbGF3IHVudGlsIGhlCiAgICAgICAgICAgICAgICAgICAgZ290IGl0LCBJLHNvIGZhciBmcm9tIGdldHRpbmcgYW55IHJld2FyZCBmcm9tIHlvdSwgYW0gcmlza2luZyBhIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYXMgaW4geW91ciBkZWZlbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgaXQgaXMgdGhlIGNvbW1vbiBwcmFjdGljZSBvZiB0aG9zZSB3aG8gdGFrZSB1cCBhbnkgcGllY2Ugb2YKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgYnVzaW5lc3MgdG8gaW5mb3JtIHlvdSB0aGF0IHRoZSBtYXR0ZXIgb24gd2hpY2ggdGhleSBoYXBwZW4gdG8gYmUgbWFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgc3BlZWNoZXMgaXMgbW9zdCBtb21lbnRvdXMsIGFuZCB3b3J0aHkgb2YgeW91ciBiZXN0IGF0dGVudGlvbi4gQnV0IGlmIHRoYXQKICAgICAgICAgICAgICAgICAgICBjbGFpbSBoYXMgZXZlciBiZWVuIG1hZGUgd2l0aCBwcm9wcmlldHksIEkgdGhpbmsgdGhhdCBJIGFtIGVudGl0bGVkIHRvIG1ha2UgaXQKICAgICAgICAgICAgICAgICAgICBub3cuIDwvdHJhbnNsYXRpb24+"
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBJIHN1cHBvc2UgdGhhdCBubyBtYW4gbGl2aW5nIHdpbGwKICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUgdGhlIHByb3NwZXJpdHkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LAogICAgICAgICAgICAgICAgICAgIGhlciBsaWJlcnR5LCBoZXIgcG9wdWxhciBnb3Zlcm5tZW50LCB0byBhbnl0aGluZyByYXRoZXIgdGhhbiB0byB0aGUgbGF3cy4gV2VsbCwKICAgICAgICAgICAgICAgICAgICB0aGUgcXVlc3Rpb24gZm9yIHlvdSB0b2RheSBpcyB0aGlzOiBzaGFsbCBhbGwgdGhlIGxhd3MgdGhhdCB5b3UgaGF2ZSBlbmFjdGVkIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSByZXN0cmFpbnQgb2YgZXZpbC1kb2VycyBiZSBpbnZhbGlkYXRlZCwgYW5kIHRoaXMgbGF3IGFsb25lIGJlIHZhbGlkOyBvcgogICAgICAgICAgICAgICAgICAgIHNoYWxsIHRoaXMgbGF3IGJlIGFubnVsbGVkIGFuZCB0aGUgcmVzdCBhbGxvd2VkIHRvIHJlbWFpbj8gVGhhdCwgdG8gcHV0IGl0IGluCiAgICAgICAgICAgICAgICAgICAgYnJpZWYgc3VtbWFyeSwgaXMgdGhlIGlzc3VlIHRoYXQgeW91IGhhdmUgdG8gZGV0ZXJtaW5lIHRvZGF5LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgdG8gZm9yZXN0YWxsIGFueSBzdXJwcmlzZQogICAgICAgICAgICAgICAgICAgIHlvdSBtYXkgZmVlbCB0aGF0IEksIHdobyBjYW4gY2xhaW0gdG8gaGF2ZSBoaXRoZXJ0byBsaXZlZCBhIHF1aWV0IGxpZmUsIHNob3VsZAogICAgICAgICAgICAgICAgICAgIG5vdyBiZSBtYWtpbmcgbXkgYXBwZWFyYW5jZSBpbiBhY3Rpb25zIGF0IGxhdyBhbmQgcHVibGljIHByb3NlY3V0aW9ucywgSSBkZXNpcmUKICAgICAgICAgICAgICAgICAgICB0byBvZmZlciBhIGJyaWVmIGV4cGxhbmF0aW9uLCB3aGljaCB3aWxsIG5vdCBiZSBpcnJlbGV2YW50IHRvIHRoZSBpc3N1ZS4gTWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgSSBvbmNlIGZlbGwgb3V0IHdpdGggYQogICAgICAgICAgICAgICAgICAgIHdvcnRobGVzcywgcXVhcnJlbHNvbWUsIHVucHJpbmNpcGxlZCBmZWxsb3csIHdpdGggd2hvbSBpbiB0aGUgZW5kIHRoZSB3aG9sZSBjaXR5CiAgICAgICAgICAgICAgICAgICAgYWxzbyBmZWxsIG91dCzigJRJIG1lYW4gQW5kcm90aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ5CiAgICAgICAgICAgICAgICAgICAgdGhpcyBtYW4gSSB3YXMgZmFyIG1vcmUgZ3JpZXZvdXNseSB3cm9uZ2VkIHRoYW4gRXVjdGVtb24sIGluYXNtdWNoIGFzIEV1Y3RlbW9uCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQgdGhlIGxvc3Mgb2Ygc29tZSBtb25leSwgYnV0IEksIGlmIGhlIGhhZCBtYWRlIGdvb2QgaGlzIGF0dGFjayB1cG9uIG1lLAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIGxvc3QgbXkgbGlmZSBhcyB3ZWxsIGFzIG15IHByb3BlcnR5OyBpbmRlZWQsIGV2ZW4gdGhlIGNvbW1vbgogICAgICAgICAgICAgICAgICAgIHByaXZpbGVnZSBvZiBhbiBlYXN5IGV4aXQgZnJvbSBsaWZlIHdvdWxkIGhhdmUgYmVlbiBkZW5pZWQgbWUuIEhlIGFjY3VzZWQgbWUgb2YKICAgICAgICAgICAgICAgICAgICBhIGNyaW1lIHdoaWNoIGEgbWFuIG9mIGdvb2QgZmVlbGluZyB3b3VsZCBiZSBsb2F0aCBldmVuIHRvIG1lbnRpb24s4oCUb2YKICAgICAgICAgICAgICAgICAgICBoYXZpbmcga2lsbGVkIG15IG93biBmYXRoZXI7IGhlIGNvbmNvY3RlZCBhbiBpbmRpY3RtZW50IGZvciBpbXBpZXR5LCBhbmQgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIG1lIHRvIHRyaWFsLiBBdCB0aGF0IHRyaWFsIGhlIGZhaWxlZCB0byBnZXQgYSBmaWZ0aCBwYXJ0IG9mIHRoZSB2b3RlcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5LCBhbmQgd2FzIGZpbmVkIGEgdGhvdXNhbmQgZHJhY2htYXMuIEkgd2FzIGRlc2VydmVkbHkgYWNxdWl0dGVkLCBmb3Igd2hpY2ggSQogICAgICAgICAgICAgICAgICAgIHRoYW5rIGZpcnN0IHRoZSBnb2RzLCBhbmQgc2Vjb25kbHkgdGhvc2Ugb2YgeW91IHdobyB3ZXJlIG9uIHRoZSBqdXJ5OyA8L3RyYW5zbGF0aW9uPg=="
translation['24.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB0aGUgbWFuIHdobyBoYWQgd2lja2VkbHkgYnJvdWdodCBtZSB0byB0aGF0IHBhc3MgSQogICAgICAgICAgICAgICAgICAgIGFjY291bnRlZCBhbiBlbmVteSB3aXRoIHdob20gSSBjb3VsZCBtYWtlIG5vIHRlcm1zLiBXaGVuIEkgZGlzY292ZXJlZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGRlZnJhdWRlZCB0aGUgd2hvbGUgY29tbW9ud2VhbHRoIGluIHRoZSBjb2xsZWN0aW9uIG9mIHRoZSBwcm9wZXJ0eS10YXggYW5kCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIG1hbnVmYWN0dXJlIG9mIHByb2Nlc3Npb25hbCB1dGVuc2lscywgYW5kIHRoYXQgaGUgaGVsZCBhbmQgcmVmdXNlZCB0bwogICAgICAgICAgICAgICAgICAgIHJlc3RvcmUgYSBncmVhdCBkZWFsIG9mIG1vbmV5IGJlbG9uZ2luZyB0byB0aGUgR29kZGVzcywgdGhlIEhlcm9lcywgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIFN0YXRlLCBJIHByb2NlZWRlZCBhZ2FpbnN0IGhpbSB3aXRoIHRoZSBhaWQgb2YgRXVjdGVtb24sIHRoaW5raW5nIGl0IGEgZmF2b3JhYmxlCiAgICAgICAgICAgICAgICAgICAgb3Bwb3J0dW5pdHkgZm9yIGRvaW5nIHRoZSBTdGF0ZSBhIHNlcnZpY2UsIGFuZCBhdCB0aGUgc2FtZSB0aW1lIGdldHRpbmcKICAgICAgICAgICAgICAgICAgICBzYXRpc2ZhY3Rpb24gZm9yIHRoZSB3cm9uZ3MgSSBoYWQgc3VmZmVyZWQuIE15IHB1cnBvc2Ugd291bGQgbmF0dXJhbGx5IGJlIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBhY2NvbXBsaXNoIG15IGRlc2lyZSwgYW5kIHRoYXQgaGUgc2hvdWxkIGdldCBoaXMgZGVzZXJ0cy4gPC90cmFuc2xhdGlvbj4="
translation['24.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmYWN0cyB3ZXJlIGluZGlzcHV0YWJsZTsgdGhlIENvdW5jaWwgY29uZGVtbmVkCiAgICAgICAgICAgICAgICAgICAgaGltOyB0aGUgQXNzZW1ibHkgc3BlbnQgYSB3aG9sZSBkYXkgb3ZlciB0aGUgY2FzZTsgdHdvIGp1cmllcywgZWFjaCBhCiAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQtYW5kLW9uZSBzdHJvbmcsIGJyb3VnaHQgaW4gdGhlaXIgdmVyZGljdDsgYW5kIHRoZW4sIHdoZW4gdGhlcmUgd2FzIG5vCiAgICAgICAgICAgICAgICAgICAgc3VidGVyZnVnZSBsZWZ0IGJ5IHdoaWNoIHlvdSBjb3VsZCBiZSBrZXB0IG91dCBvZiB5b3VyIG1vbmV5LCB0aGlzIG1hbgogICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXMsIHdpdGggdGhlIG1vc3QgaW5zb2xlbnQgY29udGVtcHQgb2YgdGhlIHdob2xlIHByb2NlZWRpbmcsIHByb3Bvc2VzCiAgICAgICAgICAgICAgICAgICAgdGhpcyBsYXcs4oCUYSBsYXcgYnkgd2hpY2ggaGUgcm9icyB0aGUgZ29kcyBvZiB0aGVpciBjb25zZWNyYXRlZAogICAgICAgICAgICAgICAgICAgIHRyZWFzdXJlIGFuZCB0aGUgY2l0eSBvZiBoZXIganVzdCBkdWVzLCBpbnZhbGlkYXRlcyB0aGUganVkZ2VtZW50cyBwcm9ub3VuY2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgdGhlIENvdW5jaWwsIHRoZSBBc3NlbWJseSwgYW5kIHRoZSBDb3VydHMgb2YgSnVzdGljZSwgYW5kIGhhcyBnaXZlbiBmcmVlIGxpY2VuY2UKICAgICAgICAgICAgICAgICAgICB0byBldmVyeWJvZHkgdG8gcGx1bmRlciB0aGUgdHJlYXN1cnkuIDwvdHJhbnNsYXRpb24+"
translation['24.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHdyb25ncyB3ZSBzYXcgb25seSBvbmUgd2F5IG9mIGVzY2FwZSwgdGhhdCBpcywgaWYgd2UgY291bGQgYWJyb2dhdGUgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3IGJ5IGluZGljdGluZyBpdCBhbmQgYnJpbmdpbmcgaXQgYmVmb3JlIHRoaXMgY291cnQuIEkgd2lsbCB0aGVyZWZvcmUgYnJpZWZseQogICAgICAgICAgICAgICAgICAgIHJlY291bnQgdGhlIGZhY3RzIGZyb20gdGhlIG91dHNldCwgaW4gb3JkZXIgdGhhdCB5b3UgbWF5IG1vcmUgcmVhZGlseSBncmFzcCwgYW5kCiAgICAgICAgICAgICAgICAgICAgZm9sbG93IHN0ZXAgYnkgc3RlcCwgdGhlIG1hbmlmb2xkIGluaXF1aXRpZXMgaW52b2x2ZWQgaW4gdGhlIGxhdyBpdHNlbGYuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QSBkZWNyZWUKICAgICAgICAgICAgICAgICAgICB3YXMgbW92ZWQgYnkgQXJpc3RvcGhvbiBpbiB0aGUgQXNzZW1ibHksIGFwcG9pbnRpbmcgYSBjb21taXNzaW9uIG9mIGlucXVpcnksIGFuZAogICAgICAgICAgICAgICAgICAgIGRpcmVjdGluZyBhbnlvbmUsIHdobyBrbmV3IG9mIGFueSBzYWNyZWQgb3IgcHVibGljIG1vbmV5IGluIHByaXZhdGUgaGFuZHMsIHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBpbmZvcm1hdGlvbiB0byB0aGUgY29tbWlzc2lvbi4gVGhlcmV1cG9uIEV1Y3RlbW9uIGxhaWQgYW4gaW5mb3JtYXRpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIEFyY2hlYml1cyBhbmQgTHlzaXRoZWlkZXMsIHdobyBoYWQgc2VydmVkIGFzIG5hdmFsIGNhcHRhaW5zLCBoZWxkIHByb3BlcnR5CiAgICAgICAgICAgICAgICAgICAgY2FwdHVyZWQgaW4gYSBzaGlwIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAxMjQxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDEyNDEiPk5hdWNyYXRpczwvcGxhY2VOYW1lPiB0byB0aGUKICAgICAgICAgICAgICAgICAgICB2YWx1ZSBvZiBuaW5lIHRhbGVudHMgYW5kIHRoaXJ0eSBtaW5hcy4gSGUgYXBwcm9hY2hlZCB0aGUgQ291bmNpbCwgYW5kIGEKICAgICAgICAgICAgICAgICAgICBwcm92aXNpb25hbCByZXNvbHV0aW9uIHdhcyBkcmFmdGVkLiBTdWJzZXF1ZW50bHkgdGhlIEFzc2VtYmx5IG1ldCwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZSB2b3RlZCBpbiBmYXZvdXIgb2YgZnVydGhlciBpbnF1aXJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIEV1Y3RlbW9uIHN0b29kIHVwLCBhbmQgaW4gdGhlIGNvdXJzZSBvZiBoaXMgc3BlZWNoIHRvbGQgeW91IHRoZSB3aG9sZQogICAgICAgICAgICAgICAgICAgIHN0b3J5OiBob3cgdGhlIHNoaXAgaW4gcXVlc3Rpb24gd2FzIHRha2VuIGJ5IHRoZSBnYWxsZXkgdGhhdCB3YXMgY29udmV5aW5nCiAgICAgICAgICAgICAgICAgICAgTWVsYW5vcHVzLCBHbGF1Y2V0ZXMsIGFuZCBBbmRyb3Rpb24gb24gdGhlaXIgZW1iYXNzeSB0byBNYXVzb2x1cywgaG93IHRoZSBvd25lcnMKICAgICAgICAgICAgICAgICAgICBwcmVzZW50ZWQgdGhlaXIgcGV0aXRpb24sIGFuZCBob3cgeW91IHZvdGVkIHRoYXQgdGhlIGdvb2RzIHdlcmUgZW5lbXkgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgdGltZSBvZiBjYXB0dXJlLiBIZSByZW1pbmRlZCB5b3Ugb2YgdGhlIHN0YXR1dGVzIGJ5IHdoaWNoIGluIHN1Y2gKICAgICAgICAgICAgICAgICAgICBjaXJjdW1zdGFuY2VzIHRoZSBwcm9wZXJ0eSBiZWxvbmdzIHRvIHRoZSBTdGF0ZS4gPC90cmFuc2xhdGlvbj4="
translation['24.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgYWxsIHRob3VnaHQgdGhhdCB3aGF0IGhlIHNhaWQgd2FzIGp1c3QuIEFuZHJvdGlvbiwKICAgICAgICAgICAgICAgICAgICBHbGF1Y2V0ZXMsIGFuZCBNZWxhbm9wdXMgc3ByYW5nIHRvIHRoZWlyIGZlZXQs4oCUYW5kIGhlcmUgeW91IG1heSBqdWRnZQogICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgSSBhbSB0ZWxsaW5nIHRoZSB0cnV0aCzigJRtYWRlIG5vaXN5LCBpbmRpZ25hbnQsIGFidXNpdmUKICAgICAgICAgICAgICAgICAgICBzcGVlY2hlcywgZXhvbmVyYXRlZCB0aGUgY2FwdGFpbnMsIGFkbWl0dGVkIHRoYXQgdGhlIG1vbmV5IHdhcyBpbiB0aGVpciBoYW5kcywKICAgICAgICAgICAgICAgICAgICBhbmQgYXNrZWQgdGhhdCB0aGUgaW5xdWlyeSBzaG91bGQgcHJvY2VlZCBhdCB0aGVpciBvd24gaG91c2VzLiBZb3UgbGlzdGVuZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGVtOyBhbmQsIHdoZW4gdGhlaXIgY2xhbW9yIGhhZCBzdWJzaWRlZCwgRXVjdGVtb24gb2ZmZXJlZCBhIHByb3Bvc2FsLCB0aGUKICAgICAgICAgICAgICAgICAgICBmYWlyZXN0IHRoYXQgY291bGQgcG9zc2libHkgYmUgbWFkZSwgdGhhdCB5b3Ugc2hvdWxkIGRlbWFuZCBwYXltZW50IGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgY2FwdGFpbnMsIHRoYXQgdGhleSBzaG91bGQgYXBwbHkgaW4gdHVybiB0byB0aGUgbWVuIGluIHBvc3Nlc3Npb24sIGFuZCB0aGF0IGFueQogICAgICAgICAgICAgICAgICAgIGRpc3B1dGUgYXMgdG8gbGlhYmlsaXR5IHNob3VsZCBiZSBhZGp1ZGljYXRlZCwgdGhlIGxvc2VyIG9mIHN1Y2ggYWN0aW9uIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgaW5kZWJ0ZWQgdG8gdGhlIFN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGNoYWxsZW5nZSB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWU7IGl0IGlzIGJyb3VnaHQgYmVmb3JlIHRoaXMgQ291cnQ7IGFuZCB0byBjdXQgdGhlIHN0b3J5IHNob3J0LCBpdCB3YXMgaGVsZAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGxlZ2FsLCBhbmQgZXNjYXBlZCBjb25kZW1uYXRpb24uIE5vdyB3aGF0IHNob3VsZCBoYXZlIGJlZW4gdGhlIHNlcXVlbD8gVGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUgc2hvdWxkIGhhdmUgZ290IHRoZSBtb25leSwgYW5kIHRoZSBlbWJlenpsZXIgc2hvdWxkIGhhdmUgYmVlbiBwdW5pc2hlZDsKICAgICAgICAgICAgICAgICAgICBidXQgYXNzdXJlZGx5IHRoZXJlIHdhcyBubyBuZWVkIG9mIGFueSBuZXcgc3RhdHV0ZSB3aGF0c29ldmVyLiBTbyBmYXIgbm8gd3JvbmcKICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBkb25lIHRvIHlvdSBieSBUaW1vY3JhdGVzLCB0aGUgZGVmZW5kYW50IGluIHRoaXMgY2FzZTsgYnV0IGFmdGVyd2FyZHMKICAgICAgICAgICAgICAgICAgICBoZSB0b29rIG92ZXIgcmVzcG9uc2liaWxpdHkgZm9yIGV2ZXJ5dGhpbmcgdGhhdCBJIGhhdmUgcmVjb3VudGVkLCBhbmQgaXQgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIHNob3duIHRoYXQgdGhlIHdob2xlIG9mIHlvdXIgaW5qdXJpZXMgYXJlIGR1ZSB0byBoaW0uIEhlIG1hZGUgaGltc2VsZiB0aGUgaGlyZWQKICAgICAgICAgICAgICAgICAgICBhZ2VudCBvZiB0aGUgYXJ0aWZpY2VzIGFuZCBpbXBvc3R1cmVzIG9mIHRoZXNlIG1lbiwgYW5kLCBieSB0aGF0IG9mZmVyIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHNlcnZpY2VzLCBhcyBJIHdpbGwgcHJvdmUgdG8geW91ciBzYXRpc2ZhY3Rpb24sIGhlIHRvb2sgdXBvbiBoaW1zZWxmIHRoZSBidXJkZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGVpciBpbmlxdWl0aWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0byBiZWdpbiB3aXRoLCBJCiAgICAgICAgICAgICAgICAgICAgbXVzdCByZW1pbmQgeW91IG9mIGRhdGVzLCBhbmQgb2YgdGhlIGNvbmp1bmN0dXJlIGF0IHdoaWNoIGhlIHByb3Bvc2VkIGhpcyBuZXcKICAgICAgICAgICAgICAgICAgICBsYXc7IGFuZCBpbmRlZWQgaXQgd2lsbCBiZSBhcHBhcmVudCB0aGF0IGhlIHdhcyBpbXBlcnRpbmVudGx5IGxhdWdoaW5nIGluIHlvdXIKICAgICAgICAgICAgICAgICAgICBmYWNlcy4gSXQgd2FzIHRoZSBtb250aCBvZiBTY2lyb3Bob3Jpb24gd2hlbiB0aG9zZSBtZW4gbG9zdCB0aGUgYWN0aW9uIHRoZXkKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGFnYWluc3QgRXVjdGVtb24uIFRoZW4gdGhleSBoaXJlZCB0aGlzIG1hbiwgYW5kLCB3aXRob3V0IG1ha2luZyB0aGUKICAgICAgICAgICAgICAgICAgICBsZWFzdCBwcmVwYXJhdGlvbiB0byBzYXRpc2Z5IHlvdXIgY2xhaW0sIHRoZXkgcHV0IHVwIHNvbWUgbmV3c21vbmdlcnMgdG8gdGVsbAogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBpbiB0aGUgbWFya2V0LXBsYWNlIHRoYXQgdGhleSB3ZXJlIHJlYWR5IHRvIHBheSB0aGUgYmFyZSBhbW91bnQgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVidCwgYnV0IHRoYXQgdGhleSByZWFsbHkgY291bGQgbm90IGFmZm9yZCB0byBwYXkgaXQgdHdpY2Ugb3Zlci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjQuODIiIHZhbGlkPSJ5ZXMiPkRlbS4gMjQuODI8L2JpYmw+CiAgICAgICAgICAgICAgICAgICAgICAgIGJlbG93Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI0LjgyIiB2YWxpZD0ieWVzIj5EZW0uIDI0LjgyPC9iaWJsPgogICAgICAgICAgICAgICAgICAgICAgICBiZWxvdy48L3RyYW5zbGF0aW9uPg=="
translation['24.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBhIG1lcmUgbWFub2V1dnJlLCB3aXRoIGJhbnRlciB0aHJvd24KICAgICAgICAgICAgICAgICAgICBpbuKAlGEgZGV2aWNlIHRvIGRpdmVydCBhdHRlbnRpb24gZnJvbSB0aGUgZW5hY3RtZW50IG9mIHRoaXMgbGF3LiBUaGF0CiAgICAgICAgICAgICAgICAgICAgaXQgd2FzIHNvLCB3ZSBoYXZlIHRoZSB0ZXN0aW1vbnkgb2YgcGxhaW4gZmFjdDogYWxsIHRoZSB0aW1lIHRoZXkgbmV2ZXIgcGFpZAogICAgICAgICAgICAgICAgICAgIG92ZXIgYSBzaGlsbGluZyBvZiB0aGUgbW9uZXksIHdoaWxlIHRoZXkgZGlzYW5udWxsZWQgbW9zdCBvZiB0aGUgZXN0YWJsaXNoZWQKICAgICAgICAgICAgICAgICAgICBsYXdzIGJ5IGEgc2luZ2xlIHN0YXR1dGUsIGFuZCB0aGF0IHRoZSBtb3N0IGRpc2dyYWNlZnVsIGFuZCBzY2FuZGFsb3VzIGV2ZXIKICAgICAgICAgICAgICAgICAgICBlbmFjdGVkIGluIHlvdXIgYXNzZW1ibHkuIDwvdHJhbnNsYXRpb24+"
translation['24.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVmb3JlIHNwZWFraW5nIG9mIHRoZSBsYXcgdGhhdCBJIGhhdmUgaW5kaWN0ZWQsIEkgd2lzaCB0byBnaXZlCiAgICAgICAgICAgICAgICAgICAgeW91IGEgYnJpZWYgYWNjb3VudCBvZiB0aGUgZXhpc3Rpbmcgc3RhdHV0ZXMgdW5kZXIgd2hpY2ggaW5kaWN0bWVudHMgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIGtpbmQgYXJlIGxhaWQ7IGZvciBhZnRlciBoZWFyaW5nIHRoaXMgYWNjb3VudCB5b3Ugd2lsbCBmaW5kIHRoZSBpbmZvcm1hdGlvbgogICAgICAgICAgICAgICAgICAgIHVzZWZ1bCBmb3IgdGhlIHJlc3Qgb2YgbXkgc3BlZWNoLiBJbiBvdXIgbGF3cyBhdCBwcmVzZW50IGluIGZvcmNlLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBldmVyeSBjb25kaXRpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIG11c3QgYmUgb2JzZXJ2ZWQgd2hlbiBuZXcgc3RhdHV0ZXMgYXJlIHRvIGJlIGVuYWN0ZWQgaXMgbGFpZCBkb3duIGNsZWFybHkgYW5kCiAgICAgICAgICAgICAgICAgICAgd2l0aCBwcmVjaXNpb24uIDwvdHJhbnNsYXRpb24+"
translation['24.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCBvZiBhbGwsIHRoZXJlIGlzIGEKICAgICAgICAgICAgICAgICAgICBwcmVzY3JpYmVkIHRpbWUgZm9yIGxlZ2lzbGF0aW9uOyBidXQgZXZlbiBhdCB0aGUgcHJvcGVyIHRpbWUgYSBtYW4gaXMgbm90CiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGVkIHRvIHByb3Bvc2UgaGlzIGxhdyBqdXN0IGFzIGhlIHBsZWFzZXMuIEhlIGlzIGRpcmVjdGVkLCBpbiB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgdG8gcHV0IGl0IGluIHdyaXRpbmcgYW5kIHBvc3QgaXQgaW4gZnJvbnQgb2YgdGhlIEhlcm9lcyBmb3IgZXZlcnlvbmUgdG8KICAgICAgICAgICAgICAgICAgICBzZWUuIFRoZW4gaXQgaXMgb3JkYWluZWQgdGhhdCB0aGUgbGF3IG11c3QgYmUgb2YgdW5pdmVyc2FsIGFwcGxpY2F0aW9uLCBhbmQgYWxzbwogICAgICAgICAgICAgICAgICAgIHRoYXQgbGF3cyBvZiBjb250cmFyeSBwdXJwb3J0IG11c3QgYmUgcmVwZWFsZWQ7IGFuZCB0aGVyZSBhcmUgb3RoZXIgZGlyZWN0aW9ucwogICAgICAgICAgICAgICAgICAgIHdpdGggd2hpY2ggSSBkbyBub3QgdGhpbmsgSSBuZWVkIHRyb3VibGUgeW91IG5vdy4gSWYgYSBtYW4gZGlzb2JleXMgYW55IG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9ucywgYW55b25lIHdobyBjaG9vc2VzIGlzIGVtcG93ZXJlZCB0byBpbmRpY3QgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaWYgVGltb2NyYXRlcyBoYWQgbm90IGJlZW4gbGlhYmxlIHRvIHByb3NlY3V0aW9uIG9uCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgY291bnQsIGlmIGhlIGhhZCBub3QgY29udHJhdmVuZWQgZXZlcnkgb25lIG9mIHRoZXNlIGRpcmVjdGlvbnMgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIGludHJvZHVjZWQgaGlzIGxhdywgYSBzaW5nbGUgY2hhcmdlLCB3aGF0ZXZlciBpdCBtaWdodCBiZSwgd291bGQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgcHJlZmVycmVkIGFnYWluc3QgaGltOyBidXQsIGFzIHRoZSBtYXR0ZXIgc3RhbmRzLCBJIGFtIGNvbXBlbGxlZCB0byB0YWtlIHRoZQogICAgICAgICAgICAgICAgICAgIHBvaW50cyBvbmUgYnkgb25lIGFuZCBhZGRyZXNzIHlvdSBvbiBlYWNoIGluIGl0cyB0dXJuLiBJIHdpbGwgdGhlcmVmb3JlIHRha2UgaGlzCiAgICAgICAgICAgICAgICAgICAgZmlyc3Qgb2ZmZW5jZSBmaXJzdCwgdGhhdCBpcywgdGhhdCBoZSB0cmllZCB0byBsZWdpc2xhdGUgaW4gZGVmaWFuY2Ugb2YgYWxsIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXR1dGVzLiBBZnRlcndhcmRzIEkgd2lsbCBkZWFsIGluIHR1cm4gd2l0aCBhbnkgb3RoZXIgdG9waWMgb24gd2hpY2ggeW91IGFyZQogICAgICAgICAgICAgICAgICAgIHdpbGxpbmcgdG8gaGVhciBtZS7igJRQbGVhc2UgdGFrZSB0aGUgc3RhdHV0ZXMs4oCUaGVyZSB0aGV5CiAgICAgICAgICAgICAgICAgICAgYXJlLOKAlGFuZCByZWFkIHRoZW0u4oCUWW91IHdpbGwgZmluZCB0aGF0IGhlIGhhcyBub3Qgc2F0aXNmaWVkCiAgICAgICAgICAgICAgICAgICAgYW55IG9uZSByZXF1aXJlbWVudC4gSSBhc2sgeW91ciBhdHRlbnRpb24sIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdHV0ZXMgYXMgdGhleSBhcmUgcmVhZC4gPC90cmFuc2xhdGlvbj4="
translation['24.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJSYXRpZmljYXRpb24gb2YgTGF3cyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmF0aWZpY2F0aW9uIG9mIExhd3M8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiB0aGUgZmlyc3QgcHJlc2lkZW5jeSBhbmQgb24gdGhlIGVsZXZlbnRoIGRheQogICAgICAgICAgICAgICAgICAgICAgICB0aGVyZW9mLCBpbiB0aGUgQXNzZW1ibHksIHRoZSBIZXJhbGQgaGF2aW5nIHJlYWQgcHJheWVycywgYSB2b3RlIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIHRha2VuIG9uIHRoZSBsYXdzLCB0byB3aXQsIGZpcnN0IHVwb24gbGF3cyByZXNwZWN0aW5nIHRoZSBDb3VuY2lsLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kbHkgdXBvbiBnZW5lcmFsIHN0YXR1dGVzLCBhbmQgdGhlbiB1cG9uIHN0YXR1dGVzIGVuYWN0ZWQgZm9yIHRoZSBuaW5lCiAgICAgICAgICAgICAgICAgICAgICAgIEFyY2hvbnMsIGFuZCB0aGVuIHVwb24gbGF3cyBhZmZlY3Rpbmcgb3RoZXIgYXV0aG9yaXRpZXMuIFRob3NlIHdobyBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCB3aXRoIHRoZSBsYXdzIHJlc3BlY3RpbmcgdGhlIENvdW5jaWwgc2hhbGwgaG9sZCB1cCB0aGVpciBoYW5kcwogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCwgYW5kIHRoZW4gdGhvc2Ugd2hvIGFyZSBub3QgY29udGVudDsgYW5kIGluIGxpa2UgbWFubmVyIGluIHJlc3BlY3Qgb2YKICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbCBzdGF0dXRlcy4gQWxsIHZvdGluZyB1cG9uIGxhd3Mgc2hhbGwgYmUgaW4gYWNjb3JkYW5jZSB3aXRoIGxhd3MKICAgICAgICAgICAgICAgICAgICAgICAgYWxyZWFkeSBpbiBmb3JjZS48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJhdGlmaWNhdGlvbiBvZiBMYXdzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gdGhlIGZpcnN0IHByZXNpZGVuY3kgYW5kIG9uIHRoZSBlbGV2ZW50aCBkYXkKICAgICAgICAgICAgICAgICAgICAgICAgdGhlcmVvZiwgaW4gdGhlIEFzc2VtYmx5LCB0aGUgSGVyYWxkIGhhdmluZyByZWFkIHByYXllcnMsIGEgdm90ZSBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICB0YWtlbiBvbiB0aGUgbGF3cywgdG8gd2l0LCBmaXJzdCB1cG9uIGxhd3MgcmVzcGVjdGluZyB0aGUgQ291bmNpbCwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZGx5IHVwb24gZ2VuZXJhbCBzdGF0dXRlcywgYW5kIHRoZW4gdXBvbiBzdGF0dXRlcyBlbmFjdGVkIGZvciB0aGUgbmluZQogICAgICAgICAgICAgICAgICAgICAgICBBcmNob25zLCBhbmQgdGhlbiB1cG9uIGxhd3MgYWZmZWN0aW5nIG90aGVyIGF1dGhvcml0aWVzLiBUaG9zZSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgd2l0aCB0aGUgbGF3cyByZXNwZWN0aW5nIHRoZSBDb3VuY2lsIHNoYWxsIGhvbGQgdXAgdGhlaXIgaGFuZHMKICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QsIGFuZCB0aGVuIHRob3NlIHdobyBhcmUgbm90IGNvbnRlbnQ7IGFuZCBpbiBsaWtlIG1hbm5lciBpbiByZXNwZWN0IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWwgc3RhdHV0ZXMuIEFsbCB2b3RpbmcgdXBvbiBsYXdzIHNoYWxsIGJlIGluIGFjY29yZGFuY2Ugd2l0aCBsYXdzCiAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHkgaW4gZm9yY2UuPC90cmFuc2xhdGlvbj4="
translation['24.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPklmIGFueSBsYXcgYWxyZWFkeSBpbgogICAgICAgICAgICAgICAgICAgICAgICBmb3JjZSBiZSByZWplY3RlZCBvbiBzaG93IG9mIGhhbmRzLCB0aGUgcHJlc2lkZW50cyBpbiB3aG9zZSB0ZXJtIG9mIG9mZmljZQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdm90aW5nIHRha2VzIHBsYWNlIHNoYWxsIGFwcG9pbnQgdGhlIGxhc3Qgb2YgdGhlIHRocmVlIG1lZXRpbmdzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBBc3NlbWJseSBmb3IgdGhlIGNvbnNpZGVyYXRpb24gb2YgbGF3cyBzbyByZWplY3RlZC4gVGhlIGNvbW1pc3Npb25lcnMgd2hvCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNpZGUgYnkgbG90IGF0IHRoZSBBc3NlbWJseSBhcmUgcmVxdWlyZWQsIGltbWVkaWF0ZWx5IGFmdGVyIHJlbGlnaW91cwogICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhbmNlcywgdG8gcHV0IHRoZSBxdWVzdGlvbiByZXNwZWN0aW5nIHRoZSBzZXNzaW9ucyBvZiB0aGUgTGVnaXNsYXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWl0dGVlLCBhbmQgcmVzcGVjdGluZyB0aGUgZnVuZCBmcm9tIHdoaWNoIHRoZWlyIGZlZXMgYXJlIHRvIGJlIHBhaWQuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICBMZWdpc2xhdGl2ZSBDb21taXR0ZWUgc2hhbGwgY29uc2lzdCBvZiBwZXJzb25zIHdobyBoYXZlIHRha2VuIHRoZSBqdWRpY2lhbAogICAgICAgICAgICAgICAgICAgICAgICBvYXRoLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPklmIHRoZSBQcmVzaWRlbnRzIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBjb252ZW5lIHRoZSBBc3NlbWJseSBhY2NvcmRpbmcgdG8gdGhlIHdyaXR0ZW4gcmVndWxhdGlvbnMsIG9yIGlmIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjb21taXNzaW9uZXJzIGRvIG5vdCBwdXQgdGhlIHF1ZXN0aW9uLCBlYWNoIHByZXNpZGVudCBzaGFsbCBmb3JmZWl0IG9uZQogICAgICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBkcmFjaG1hcyBvZiBzYWNyZWQgbW9uZXkgdG8gQXRoZW5hLCBhbmQgZWFjaCBjb21taXNzaW9uZXIgc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgZm9yZmVpdCBmb3J0eSBkcmFjaG1hcyBvZiBzYWNyZWQgbW9uZXkgdG8gQXRoZW5hLCBhbmQgaW5mb3JtYXRpb24gdGhlcmVvZgogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBiZSBsYWlkIGJlZm9yZSB0aGUgSnVkZ2VzIGluIHN1Y2ggbWFubmVyIGFzIHdoZW4gYSBtYW4gaG9sZHMgb2ZmaWNlCiAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIGluIGRlYnQgdG8gdGhlIHRyZWFzdXJ5OyBhbmQgdGhlIEp1ZGdlcyBzaGFsbCBicmluZyBiZWZvcmUgdGhlIENvdXJ0CiAgICAgICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgbGF3IGFsbCBwZXJzb25zIGFnYWluc3Qgd2hvbSBzdWNoIGluZm9ybWF0aW9uIGlzIGxhaWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyd2lzZSB0aGV5IHNoYWxsIG5vdCBiZSByYWlzZWQgdG8gdGhlIENvdW5jaWwgb2YgQXJlb3BhZ3VzLCBhcwogICAgICAgICAgICAgICAgICAgICAgICBvYnN0cnVjdGluZyB0aGUgcmVjdGlmaWNhdGlvbiBvZiB0aGUgc3RhdHV0ZXMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPkJlZm9yZSB0aGUgbWVldGluZyBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQXNzZW1ibHkgYW55IEF0aGVuaWFuIGNpdGl6ZW4gd2hvIHdpc2hlcyBzaGFsbCB3cml0ZSBkb3duIHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkIGJ5IGhpbSBhbmQgZXhoaWJpdCB0aGUgc2FtZSBpbiBmcm9udCBvZiB0aGUgRXBvbnltb3VzIEhlcm9lcywgdG8KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVuZCB0aGF0IHRoZSBQZW9wbGUgbWF5IHZvdGUgb24gdGhlIHF1ZXN0aW9uIG9mIHRoZSB0aW1lIGFsbG93ZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIExlZ2lzbGF0aXZlIENvbW1pdHRlZSB3aXRoIGR1ZSByZWdhcmQgdG8gdGhlIHRvdGFsIG51bWJlciBvZiBsYXdzIHByb3Bvc2VkLgogICAgICAgICAgICAgICAgICAgICAgICBXaG9zb2V2ZXIgcHJvcG9zZXMgYSBuZXcgc3RhdHV0ZSBzaGFsbCB3cml0ZSBpdCBvbiBhIHdoaXRlIGhvYXJkIGFuZCBleGhpYml0CiAgICAgICAgICAgICAgICAgICAgICAgIGl0IGluIGZyb250IG9mIHRoZSBIZXJvZXMgb24gZXZlcnkgZGF5IHVudGlsIHRoZSBtZWV0aW5nIG9mIHRoZSBBc3NlbWJseS4gT24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVsZXZlbnRoIGRheSBvZiB0aGUgbW9udGggSGVjYXRvbWJhZW9uIHRoZSBwZW9wbGUgc2hhbGwgZWxlY3QgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd2hvbGUgYm9keSBvZiBjaXRpemVucyBmaXZlIHBlcnNvbnMgdG8gc3BlYWsgaW4gZGVmZW5jZSBvZiBsYXdzIHByb3Bvc2VkIGZvcgogICAgICAgICAgICAgICAgICAgICAgICByZXBlYWwgYmVmb3JlIHRoZSBMZWdpc2xhdGl2ZSBDb21taXR0ZWUuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgYXJlIGFsbAogICAgICAgICAgICAgICAgICAgIG9sZC1lc3RhYmxpc2hlZCBsYXdzLCBnZW50bGVtZW4gb2YgdGhlIGp1cnk7IHRoZXkgaGF2ZSBiZWVuIHJlcGVhdGVkbHkgdGVzdGVkCiAgICAgICAgICAgICAgICAgICAgYW5kIGZvdW5kIGFkdmFudGFnZW91cyB0byB5b3UsIGFuZCBubyBtYW4gZXZlciBkZW5pZWQgdGhhdCB0aGV5IHdlcmUKICAgICAgICAgICAgICAgICAgICB3ZWxsLWNvbmNlaXZlZC4gTmF0dXJhbGx5OyBmb3IgdGhlcmUgaXMgbm90aGluZyBvZmZlbnNpdmUgb3IgdmlvbGVudCBvcgogICAgICAgICAgICAgICAgICAgIG9saWdhcmNoaWNhbCBpbiB0aGVpciBwcm92aXNpb25zOyB0aGV5IG9yZGVyIGJ1c2luZXNzIHRvIGJlIGRvbmUgaW4gYSBjb3VydGVvdXMsCiAgICAgICAgICAgICAgICAgICAgZGVtb2NyYXRpYyBzcGlyaXQuIDwvdHJhbnNsYXRpb24+"
translation['24.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgZmlyc3QgcGxhY2UsIHRoZXkKICAgICAgICAgICAgICAgICAgICBlbnRydXN0ZWQgdG8geW91IGNpdGl6ZW5zIHRoZSBkZWNpc2lvbiB3aGV0aGVyIGEgbmV3IGxhdyBpcyB0byBiZSBpbnRyb2R1Y2VkIG9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGV4aXN0aW5nIGxhd3MganVkZ2VkIHNhdGlzZmFjdG9yeS4gVGhlbiwgaWYgeW91ciB2b3RlIGlzIGluIGZhdm91ciBvZgogICAgICAgICAgICAgICAgICAgIGludHJvZHVjdGlvbiwgdGhleSBkaWQgbm90IG9yZGVyIGltbWVkaWF0ZSBlbmFjdG1lbnQsIGJ1dCBhcHBvaW50ZWQgdGhlIG5leHQKICAgICAgICAgICAgICAgICAgICBhc3NlbWJseSBidXQgb25lLCBhbmQgZXZlbiBhdCB0aGF0IGFzc2VtYmx5LCB0aGV5IGRvIG5vdCBwZXJtaXQgeW91IHRvCiAgICAgICAgICAgICAgICAgICAgbGVnaXNsYXRlLCBidXQgb25seSB0byBjb25zaWRlciB0aGUgdGVybXMgb24gd2hpY2ggdGhlIExlZ2lzbGF0aXZlIENvbW1pdHRlZQogICAgICAgICAgICAgICAgICAgIHNoYWxsIHNpdC4gSW4gdGhlIGludGVydmVuaW5nIHRpbWUgdGhleSBpbnN0cnVjdGVkIHBlcnNvbnMgd2lzaGluZyB0byBpbnRyb2R1Y2UKICAgICAgICAgICAgICAgICAgICBsYXdzIHRvIGV4aGliaXQgdGhlbSBpbiBmcm9udCBvZiB0aGUgSGVyb2VzLCBzbyB0aGF0IGFueW9uZSB3aG8gY2hvb3NlcyBtYXkKICAgICAgICAgICAgICAgICAgICBpbnNwZWN0IHRoZW0sIGFuZCwgaWYgaGUgZGlzY292ZXJzIGFueXRoaW5nIGluanVyaW91cyB0byB0aGUgcHVibGljIGludGVyZXN0LAogICAgICAgICAgICAgICAgICAgIG1heSBpbmZvcm0geW91IGFuZCBoYXZlIHRpbWUgdG8gc3BlYWsgYWdhaW5zdCB0aGUgbGF3cy4gPC90cmFuc2xhdGlvbj4="
translation['24.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIG9mIGFsbCB0aGVzZSBydWxlcyB0aGUgZGVmZW5kYW50IFRpbW9jcmF0ZXMgaGFzIG5vdAogICAgICAgICAgICAgICAgICAgIG9ic2VydmVkIG9uZS4gSGUgbmV2ZXIgZXhoaWJpdGVkIGhpcyBsYXc7IGhlIGdhdmUgbm8gb25lIGEgY2hhbmNlIHRvIHJlYWQgaXQgYW5kCiAgICAgICAgICAgICAgICAgICAgb3Bwb3NlIGl0OyBub3IgZGlkIGhlIHdhaXQgZm9yIGFueSBvZiB0aGUgZGF0ZXMgYXBwb2ludGVkIGJ5IHN0YXR1dGUuIFRoZQogICAgICAgICAgICAgICAgICAgIGFzc2VtYmx5IGF0IHdoaWNoIHlvdXIgdm90ZSB3YXMgdGFrZW4gZmVsbCBvbiB0aGUgZWxldmVudGggb2YgSGVjYXRvbWJhZW9uLCBhbmQKICAgICAgICAgICAgICAgICAgICBoZSBpbnRyb2R1Y2VkIGhpcyBsYXcgb24gdGhlIHR3ZWxmdGgsIHRoZSB2ZXJ5IG5leHQgZGF5LCBhbHRob3VnaCBpdCB3YXMgYSBmZWFzdAogICAgICAgICAgICAgICAgICAgIG9mIENyb25vcyBhbmQgdGhlIENvdW5jaWwgdGhlcmVmb3JlIHN0b29kIGFkam91cm5lZDsgZm9yIGhlIGhhZCBjb250cml2ZWQsIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgaGVscCBvZiBwZXJzb25zIHdob3NlIGludGVudGlvbnMgYXJlIHVuZnJpZW5kbHkgdG8geW91LCB0byBnZXQgYnkgZGVjcmVlIGEKICAgICAgICAgICAgICAgICAgICBzaXR0aW5nIG9mIHRoZSBMZWdpc2xhdGl2ZSBDb21taXR0ZWUsIG9uIGFuIGV4Y3VzZSBhZmZvcmRlZCBieSB0aGUgUGFuYXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICBGZXN0aXZhbC4gPC90cmFuc2xhdGlvbj4="
translation['24.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5JIHdpc2ggdG8gcmVhZCB0byB5b3UgdGhlIGRlY3JlZQogICAgICAgICAgICAgICAgICAgIHRoYXQgd2FzIGFkb3B0ZWQgb24gZGl2aXNpb24sIHRvIHNob3cgeW91IHRoYXQgdGhlIHdob2xlIGJ1c2luZXNzIHdhcyBtYW5hZ2VkIGJ5CiAgICAgICAgICAgICAgICAgICAgY29sbHVzaW9uLCBhbmQgbm90aGluZyB3YXMgbGVmdCB0byBjaGFuY2Uu4oCUVGFrZSB0aGUgZGVjcmVlLCBzaXIsIGFuZAogICAgICAgICAgICAgICAgICAgIHJlYWQgaXQgdG8gdGhlIGp1cnkuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVjcmVlIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWU8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5EdXJpbmcgdGhlIGZpcnN0IHByZXNpZGVuY3ksIG5hbWVseSwgdGhhdCBvZiB0aGUgUGFuZGlvbmlkCiAgICAgICAgICAgICAgICAgICAgICAgIFRyaWJlLCBhbmQgb24gdGhlIGVsZXZlbnRoIGRheSBvZiB0aGF0IHByZXNpZGVuY3ksIGl0IHdhcyBtb3ZlZCBieSBFcGljcmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCwgaW4gb3JkZXIgdGhhdCB0aGUgc2FjcmlmaWNlcyBtYXkgYmUgb2ZmZXJlZCwgdGhhdCBwcm92aXNpb24gbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGFkZXF1YXRlLCBhbmQgdGhhdCBhbnkgbGFjayBvZiBmdW5kcyBmb3IgdGhlIFBhbmF0aGVuaWFuIEZlc3RpdmFsIG1heSBiZQogICAgICAgICAgICAgICAgICAgICAgICBtYWRlIGdvb2QsIHRoZSBQcmVzaWRlbnRzIG9mIHRoZSBQYW5kaW9uaWQgVHJpYmUgZG8gdG9tb3Jyb3cgc2V0IHVwIGEKICAgICAgICAgICAgICAgICAgICAgICAgTGVnaXNsYXRpdmUgQ29tbWl0dGVlLCBhbmQgdGhhdCBzdWNoIExlZ2lzbGF0aXZlIENvbW1pdHRlZSBkbyBjb25zaXN0IG9mIG9uZQogICAgICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBhbmQgb25lIGNpdGl6ZW5zIHdobyBoYXZlIHRha2VuIHRoZSBvYXRoLCBhbmQgdGhhdCB0aGUgQ291bmNpbAogICAgICAgICAgICAgICAgICAgICAgICBjby1vcGVyYXRlIHRoZXJld2l0aCBpbiBsZWdpc2xhdGl2ZSBidXNpbmVzcy48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY3JlZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkR1cmluZyB0aGUgZmlyc3QgcHJlc2lkZW5jeSwgbmFtZWx5LCB0aGF0IG9mIHRoZSBQYW5kaW9uaWQKICAgICAgICAgICAgICAgICAgICAgICAgVHJpYmUsIGFuZCBvbiB0aGUgZWxldmVudGggZGF5IG9mIHRoYXQgcHJlc2lkZW5jeSwgaXQgd2FzIG1vdmVkIGJ5IEVwaWNyYXRlcwogICAgICAgICAgICAgICAgICAgICAgICB0aGF0LCBpbiBvcmRlciB0aGF0IHRoZSBzYWNyaWZpY2VzIG1heSBiZSBvZmZlcmVkLCB0aGF0IHByb3Zpc2lvbiBtYXkgYmUKICAgICAgICAgICAgICAgICAgICAgICAgYWRlcXVhdGUsIGFuZCB0aGF0IGFueSBsYWNrIG9mIGZ1bmRzIGZvciB0aGUgUGFuYXRoZW5pYW4gRmVzdGl2YWwgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgICAgIG1hZGUgZ29vZCwgdGhlIFByZXNpZGVudHMgb2YgdGhlIFBhbmRpb25pZCBUcmliZSBkbyB0b21vcnJvdyBzZXQgdXAgYQogICAgICAgICAgICAgICAgICAgICAgICBMZWdpc2xhdGl2ZSBDb21taXR0ZWUsIGFuZCB0aGF0IHN1Y2ggTGVnaXNsYXRpdmUgQ29tbWl0dGVlIGRvIGNvbnNpc3Qgb2Ygb25lCiAgICAgICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIGFuZCBvbmUgY2l0aXplbnMgd2hvIGhhdmUgdGFrZW4gdGhlIG9hdGgsIGFuZCB0aGF0IHRoZSBDb3VuY2lsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvLW9wZXJhdGUgdGhlcmV3aXRoIGluIGxlZ2lzbGF0aXZlIGJ1c2luZXNzLjwvdHJhbnNsYXRpb24+"
translation['24.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T2JzZXJ2ZSwgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlIGlzIHJlYWQsIGhvdyBpbmdlbmlvdXNseSB0aGUgbWFuIHdobyBkcmFmdGVkIGl0LCB1bmRlciBhIHByZXRleHQgb2YKICAgICAgICAgICAgICAgICAgICBmaW5hbmNlIGFuZCB0aGUgdXJnZW5jeSBvZiB0aGUgRmVzdGl2YWwsIGNhbmNlbGxlZCB0aGUgZGF0ZSBmaXhlZCBieSBzdGF0dXRlLAogICAgICAgICAgICAgICAgICAgIGFuZCBwdXQgaW4gaGlzIG93biBkYXRlLOKAlHRoYXQgdGhleSBzaG91bGQgbGVnaXNsYXRlCiAgICAgICAgICAgICAgICAgICAg4oCcdG8tbW9ycm93LuKAnSBJIHByb3Rlc3QgdGhhdCBoaXMgaW50ZW50aW9uIHdhcywgbm90IHRoYXQKICAgICAgICAgICAgICAgICAgICBzb21ldGhpbmcgYmVsb25naW5nIHRvIHRoZSBGZXN0aXZhbCBzaG91bGQgYmUgZG9uZSBhcyBoYW5kc29tZWx5IGFzIHBvc3NpYmxlLAogICAgICAgICAgICAgICAgICAgIGZvciBpbiBmYWN0IHRoZXJlIHdhcyBub3RoaW5nIGxlZnQgdG8gYmUgZG9uZSwgYW5kIG5vIGZpbmFuY2lhbCBkZWZpY2llbmN5IHRvIGJlCiAgICAgICAgICAgICAgICAgICAgbWFkZSBnb29kOyBidXQgdGhhdCB0aGlzIGxhdyBvZiB0aGVpcnMsIHRoZSBzdWJqZWN0IG9mIHRoZSBwcmVzZW50IHRyaWFsLCBtaWdodAogICAgICAgICAgICAgICAgICAgIGJlIGVuYWN0ZWQgYW5kIGNvbWUgaW50byBmb3JjZSB3aXRob3V0IGFueSBsaXZpbmcgbWFuIGhhdmluZyB3aW5kIG9mIGl0CiAgICAgICAgICAgICAgICAgICAgYmVmb3JlaGFuZCBvciBvZmZlcmluZyBvcHBvc2l0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHByb29mOiB3aGVuIHRoZSBMZWdpc2xhdGl2ZSBDb21taXR0ZWUgd2FzIGluIHNlc3Npb24sIG5vYm9keSBpbnRyb2R1Y2VkIGFueSBsYXcsCiAgICAgICAgICAgICAgICAgICAgZ29vZCBvciBiYWQsIGluIHJlc3BlY3Qgb2YgdGhlIGJ1c2luZXNzIHNwZWNpZmllZCwgdGhhdCBpcywgb2YgZmluYW5jaWFsCiAgICAgICAgICAgICAgICAgICAgcHJvdmlzaW9uIGZvciB0aGUgUGFuYXRoZW5pYW4gRmVzdGl2YWwsIGJ1dCB0aGlzIG1hbiBUaW1vY3JhdGVzIGNvb2xseSBhbmQKICAgICAgICAgICAgICAgICAgICBxdWlldGx5IHByb2NlZWRlZCB0byBsZWdpc2xhdGUgYWJvdXQgbWF0dGVycyB0aGF0IGxheSBvdXRzaWRlIHRoZSB0ZXJtcyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNyZWUsIGFuZCB3ZXJlIGZvcmJpZGRlbiBieSBzdGF0dXRlLiBIZSBhc3N1bWVkIHRoYXQgdGhlIGRhdGUgc3BlY2lmaWVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGRlY3JlZSB3YXMgbW9yZSBhdXRob3JpdGF0aXZlIHRoYW4gdGhlIGRhdGUgcHJlc2NyaWJlZCBieSBsYXc7IGFuZCwgd2hpbGUgeW91CiAgICAgICAgICAgICAgICAgICAgd2VyZSBhbGwgaG9saWRheW1ha2luZywgYW5kIHRob3VnaCB0aGVyZSBpcyBhIHN0YW5kaW5nIGxhdyB0aGF0IGF0IHN1Y2ggYSB0aW1lCiAgICAgICAgICAgICAgICAgICAgd2Ugc2hhbGwgZG8gb25lIGFub3RoZXIgbm8gd3JvbmcgZWl0aGVyIGluIHByaXZhdGUgb3IgcHVibGljIGxpZmUgbm9yIHRyYW5zYWN0CiAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3MgdGhhdCBkb2VzIG5vdCBjb25jZXJuIHRoZSBGZXN0aXZhbCwgaGUgd2FzIG5vdCBpbiB0aGUgbGVhc3QgYWZyYWlkIG9mCiAgICAgICAgICAgICAgICAgICAgbWFraW5nIGFuIGV4aGliaXRpb24gb2YgaGltc2VsZiBieSBkb2luZyB3cm9uZywgbm90IHRvIHRoaXMgb3IgdGhhdCBwZXJzb24sIGJ1dAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSB3aG9sZSBjb21tdW5pdHkuIDwvdHJhbnNsYXRpb24+"
translation['24.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgd2FzIGl0IG5vdAogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VvdXMgdGhhdCwgd2VsbCBrbm93aW5nIHRoYXQgdGhlIHN0YXR1dGVzIHdoaWNoIHlvdSBoZWFyZCByZWFkIGp1c3Qgbm93CiAgICAgICAgICAgICAgICAgICAgd2VyZSBzdGlsbCBpbiBmb3JjZSwgd2VsbCBrbm93aW5nIGFsc28gdGhhdCBhbm90aGVyIGxhdyBkZWNsYXJlcyB0aGF0IG5vIGRlY3JlZSwKICAgICAgICAgICAgICAgICAgICBldmVuIHRob3VnaCBpbiBpdHNlbGYgY29uc3RpdHV0aW9uYWwsIHNoYWxsIGhhdmUgaGlnaGVyIGF1dGhvcml0eSB0aGFuIGEKICAgICAgICAgICAgICAgICAgICBzdGF0dXRlLCBoZSBzaG91bGQgZHJhZnQgYW5kIHByb3Bvc2UgdG8geW91IGEgbmV3IGxhdywgaW4gdmlydHVlIG9mIGEgZGVjcmVlCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgYXMgaGUgd2FzIGZ1bGx5IGF3YXJlLCBoYWQgYmVlbiBtb3ZlZCBpbiBkZWZpYW5jZSBvZiB0aGUgbGF3cz8gPC90cmFuc2xhdGlvbj4="
translation['24.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5XYXMgaXQgbm90IGF0cm9jaW91cyB0aGF0LCB3aGVuIHRoZSBTdGF0ZSBoYWQgZ3JhbnRlZAogICAgICAgICAgICAgICAgICAgIHRvIHVzIGluZGl2aWR1YWxseSBzZWN1cml0eSBhZ2FpbnN0IGFueSBkaXNhZ3JlZWFibGUgb3Igb2ZmZW5zaXZlIHRyZWF0bWVudCBhdAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGltZSwgYnkgZGVjbGFyaW5nIGEgcmVsaWdpb3VzIGhvbGlkYXksIHRoZSBTdGF0ZSBpdHNlbGYgc2hvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBvYnRhaW5lZCBubyBzdWNoIGltbXVuaXR5IGZyb20gVGltb2NyYXRlcywgYnV0LCBkdXJpbmcgdGhhdCB2ZXJ5IGhvbGlkYXksIHNob3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBzdWJqZWN0ZWQgdG8gbW9zdCBncmlldm91cyBpbGwtdHJlYXRtZW50PyBIb3csIGluZGVlZCwgY291bGQgYW55CiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBwZXJzb24gaWxsLXRyZWF0IHRoZSBTdGF0ZSBtb3JlIGdyYXZlbHkgdGhhbiBieSBzdWJ2ZXJ0aW5nIHRoZSBsYXdzIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIFN0YXRlIGlzIGFkbWluaXN0ZXJlZD8gPC90cmFuc2xhdGlvbj4="
translation['24.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCBUaW1vY3JhdGVzIGhhcyBkb25lIG5vdGhpbmcgdGhhdCBoZSBvdWdodCB0byBoYXZlCiAgICAgICAgICAgICAgICAgICAgZG9uZSwgbm90aGluZyB0aGF0IHRoZSBsYXdzIGV4cHJlc3NseSBlbmpvaW4sIG1heSBiZSBjb25jbHVkZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyYXRpb24gb2Ygd2hhdCBJIGhhdmUgYWxyZWFkeSBzYWlkOyBhbmQgYmVmb3JlIGxvbmcgeW91IHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgc2F0aXNmaWVkLCBwb2ludCBieSBwb2ludCwgdGhhdCBoZSB0cmFuc2dyZXNzZWQgbm90IG1lcmVseSBpbiBzbyBmYXIgYXMgaGUKICAgICAgICAgICAgICAgICAgICBpZ25vcmVkIHRoZSBkYXRlcyBmaXhlZCBieSBzdGF0dXRlLCBhbmQgZW50aXJlbHkgYW5udWxsZWQgeW91ciByaWdodCBvZgogICAgICAgICAgICAgICAgICAgIGRlbGliZXJhdGUgY29uc2lkZXJhdGlvbiwgYnkgYXR0ZW1wdGluZyB0byBsZWdpc2xhdGUgZHVyaW5nIHRoZSBob2xpZGF5LCBidXQKICAgICAgICAgICAgICAgICAgICBhbHNvIGluIHRoaXMgcmVzcGVjdCzigJR0aGF0IHRoZSBsYXcgaGUgaW50cm9kdWNlZCBpcyBpbmNvbnNpc3RlbnQgd2l0aAogICAgICAgICAgICAgICAgICAgIGFsbCBleGlzdGluZyBzdGF0dXRlcy7igJRCdXQgZmlyc3QgdGFrZSBhbmQgcmVhZCB0aGUgc3RhdHV0ZSBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBoZXJlLCB3aGljaCBleHByZXNzbHkgZm9yYmlkcyB0aGUgaW50cm9kdWN0aW9uIG9mIGFueSBjb25mbGljdGluZyBsYXcsIGFuZAogICAgICAgICAgICAgICAgICAgIGF1dGhvcml6ZXMgYW4gaW5kaWN0bWVudCBpZiBzdWNoIGEgbGF3IHNob3VsZCBoYXZlIGJlZW4gaW50cm9kdWNlZC4gPC90cmFuc2xhdGlvbj4="
translation['24.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IHNoYWxsIG5vdCBoZSBsYXdmdWwgdG8gcmVwZWFsIGFueSBlc3RhYmxpc2hlZCBsYXcgZXhjZXB0CiAgICAgICAgICAgICAgICAgICAgICAgIGF0IGEgTGVnaXNsYXRpdmUgQ29tbWl0dGVlOyBhbmQgdGhlbiBhbnkgQXRoZW5pYW4gY2l0aXplbiBtYXkgbW92ZSBmb3Igc3VjaAogICAgICAgICAgICAgICAgICAgICAgICByZXBlYWwgb25seSBvbiBjb25kaXRpb24gdGhhdCBoZSBwcm9wb3NlcyBhIGxhdyB0byBiZSBzdWJzdGl0dXRlZCBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhdyBzbyByZXBlYWxlZC4gVGhlIENvbW1pc3Npb25lcnMgc2hhbGwgdGFrZSBhIHNob3cgb2YgaGFuZHMgdXBvbiBzdWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGxhd3MsIGluIHRoZSBmaXJzdCBpbnN0YW5jZSB1cG9uIHRoZSBlc3RhYmxpc2hlZCBsYXcsIHdoZXRoZXIgaXQgYXBwZWFyIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGFkdmFudGFnZW91cyB0byB0aGUgQXRoZW5pYW4gZGVtb2NyYWN5IG9yIG5vdCwgYW5kIGFmdGVyd2FyZHMgdXBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbGF3IHByb3Bvc2VkLiBBbmQgd2hpY2hldmVyIGxhdyBpcyBhcHByb3ZlZCBvbiBkaXZpc2lvbiBieSB0aGUgTGVnaXNsYXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWl0dGVlIHNoYWxsIHRoZW4gYmUgb3BlcmF0aXZlLiBJdCBzaGFsbCBub3QgYmUgbGF3ZnVsIHRvIGludHJvZHVjZSBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgbGF3IGNvbnRyYXJ5IHRvIGV4aXN0aW5nIGxhd3M7IGFuZCBpZiBhbnkgcGVyc29uIGhhdmluZyByZXBlYWxlZCBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgbGF3IHByb3Bvc2VzIGluIHN1YnN0aXR1dGlvbiBhbm90aGVyIGxhdyB0aGF0IGlzIGVpdGhlcgogICAgICAgICAgICAgICAgICAgICAgICBkaXNhZHZhbnRhZ2VvdXMgdG8gdGhlIEF0aGVuaWFuIGRlbW9jcmFjeSBvciBjb250cmFyeSB0byBhbnkgZXN0YWJsaXNoZWQKICAgICAgICAgICAgICAgICAgICAgICAgbGF3LCBhbiBpbmRpY3RtZW50IHNoYWxsIGxpZSBhZ2FpbnN0IGhpbSBhY2NvcmRpbmcgdG8gdGhlIGxhdyBtYWRlIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCBpbiB0aGUgY2FzZSBvZiB0aGUgcHJvcG9zZXIgb2YgYSBkaXNhZHZhbnRhZ2VvdXMgbGF3LjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgc2hhbGwgbm90IGhlIGxhd2Z1bCB0byByZXBlYWwgYW55IGVzdGFibGlzaGVkIGxhdyBleGNlcHQKICAgICAgICAgICAgICAgICAgICAgICAgYXQgYSBMZWdpc2xhdGl2ZSBDb21taXR0ZWU7IGFuZCB0aGVuIGFueSBBdGhlbmlhbiBjaXRpemVuIG1heSBtb3ZlIGZvciBzdWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhbCBvbmx5IG9uIGNvbmRpdGlvbiB0aGF0IGhlIHByb3Bvc2VzIGEgbGF3IHRvIGJlIHN1YnN0aXR1dGVkIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbGF3IHNvIHJlcGVhbGVkLiBUaGUgQ29tbWlzc2lvbmVycyBzaGFsbCB0YWtlIGEgc2hvdyBvZiBoYW5kcyB1cG9uIHN1Y2gKICAgICAgICAgICAgICAgICAgICAgICAgbGF3cywgaW4gdGhlIGZpcnN0IGluc3RhbmNlIHVwb24gdGhlIGVzdGFibGlzaGVkIGxhdywgd2hldGhlciBpdCBhcHBlYXIgdG8KICAgICAgICAgICAgICAgICAgICAgICAgYmUgYWR2YW50YWdlb3VzIHRvIHRoZSBBdGhlbmlhbiBkZW1vY3JhY3kgb3Igbm90LCBhbmQgYWZ0ZXJ3YXJkcyB1cG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBsYXcgcHJvcG9zZWQuIEFuZCB3aGljaGV2ZXIgbGF3IGlzIGFwcHJvdmVkIG9uIGRpdmlzaW9uIGJ5IHRoZSBMZWdpc2xhdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICBDb21taXR0ZWUgc2hhbGwgdGhlbiBiZSBvcGVyYXRpdmUuIEl0IHNoYWxsIG5vdCBiZSBsYXdmdWwgdG8gaW50cm9kdWNlIGFueQogICAgICAgICAgICAgICAgICAgICAgICBsYXcgY29udHJhcnkgdG8gZXhpc3RpbmcgbGF3czsgYW5kIGlmIGFueSBwZXJzb24gaGF2aW5nIHJlcGVhbGVkIGFueQogICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZyBsYXcgcHJvcG9zZXMgaW4gc3Vic3RpdHV0aW9uIGFub3RoZXIgbGF3IHRoYXQgaXMgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FkdmFudGFnZW91cyB0byB0aGUgQXRoZW5pYW4gZGVtb2NyYWN5IG9yIGNvbnRyYXJ5IHRvIGFueSBlc3RhYmxpc2hlZAogICAgICAgICAgICAgICAgICAgICAgICBsYXcsIGFuIGluZGljdG1lbnQgc2hhbGwgbGllIGFnYWluc3QgaGltIGFjY29yZGluZyB0byB0aGUgbGF3IG1hZGUgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkIGluIHRoZSBjYXNlIG9mIHRoZSBwcm9wb3NlciBvZiBhIGRpc2FkdmFudGFnZW91cyBsYXcuPC90cmFuc2xhdGlvbj4="
translation['24.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3LiBPdXIgY2l0eSBwb3NzZXNzZXMgbWFueSBleGNlbGxlbnQgbGF3cywgYnV0IGluIG15IGp1ZGdlbWVudCB0aGVyZSBpcwogICAgICAgICAgICAgICAgICAgIG5vdCBvbmUgdGhhdCBoYXMgYmVlbiBmcmFtZWQgaW4gYSBtb3JlIHByYWlzZXdvcnRoeSBtYW5uZXIgdGhhbiB0aGlzLiBPYnNlcnZlIGluCiAgICAgICAgICAgICAgICAgICAgd2hhdCBhbiBlcXVpdGFibGUgYW5kIHRob3JvdWdobHkgZGVtb2NyYXRpYyBzcGlyaXQgaXQgaXMgZW5hY3RlZC4gSXQgZm9yYmlkcyB0aGUKICAgICAgICAgICAgICAgICAgICBpbnRyb2R1Y3Rpb24gb2YgYW55dGhpbmcgcmVwdWduYW50IHRvIGV4aXN0aW5nIGxhd3MsIGV4Y2VwdCBhZnRlciBhYnJvZ2F0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGxhdyBwcmV2aW91c2x5IGVuYWN0ZWQuIFdoYXQgaXMgdGhlIHB1cnBvc2U/IEZpcnN0LCB0byBlbmFibGUgYSBqdXJ5IHRvIGdpdmUKICAgICAgICAgICAgICAgICAgICBhIGp1c3QgYW5kIGNvbnNjaWVudGlvdXMgdmVyZGljdDsgPC90cmFuc2xhdGlvbj4="
translation['24.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5mb3IsIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2VyZSB0d28gaW5jb25zaXN0ZW50IGxhd3MsIGFuZCBpZiB0d28gbGl0aWdhbnRzIHdlcmUgY29udGVuZGluZyBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgY291cnQsIHdoZXRoZXIgaW4gYSBwdWJsaWMgb3IgYSBwcml2YXRlIGRpc3B1dGUsIGFuZCBpZiBlYWNoIG9mIHRoZW0sIGJ5IGNpdGluZwogICAgICAgICAgICAgICAgICAgIGEgZGlmZmVyZW50IGxhdywgY2xhaW1lZCB5b3VyIHZlcmRpY3QsIHlvdSBjb3VsZCBub3Qgb2YgY291cnNlIGdpdmUganVkZ2VtZW50IGluCiAgICAgICAgICAgICAgICAgICAgZmF2b3VyIG9mIGJvdGggb2YgdGhlbSzigJR0aGF0IGlzIGFic3VyZCzigJRub3IgY291bGQgeW91IGdpdmUKICAgICAgICAgICAgICAgICAgICB5b3VyIHZlcmRpY3QgZm9yIGVpdGhlciB3aXRob3V0IGJyZWFraW5nIHlvdXIgb2F0aCwgYmVjYXVzZSBzdWNoIGEgZGVjaXNpb24KICAgICAgICAgICAgICAgICAgICBjb250cmF2ZW5lcyB0aGUgb3Bwb3NpdGUgbGF3LCB3aGljaCBpcyBlcXVhbGx5IHZhbGlkLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBhIHNhZmVndWFyZCBhZ2FpbnN0IHN1Y2ggYSBkaWxlbW1hIHRoZSBsYXdnaXZlciBtYWRlIHRoaXMKICAgICAgICAgICAgICAgICAgICBwcm92aXNpb24gaW4geW91ciBpbnRlcmVzdC4gSGUgYWxzbyB3aXNoZWQgdG8gbWFrZSB5b3UgdGhlIGVzdGFibGlzaGVkIGd1YXJkaWFucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBsYXcsIHdlbGwga25vd2luZyB0aGF0IHRoZSBvdGhlciBzYWZlZ3VhcmRzIHByb3ZpZGVkIGJ5IGhpbSBtYXkgYmUgZXZhZGVkCiAgICAgICAgICAgICAgICAgICAgaW4gbWFueSB3YXlzLiBUaGUgYWR2b2NhdGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkZpdmUgYWR2b2NhdGVzIHdlcmUKICAgICAgICAgICAgICAgICAgICAgICAgb2ZmaWNpYWxseSBhcHBvaW50ZWQgdG8gZGVmZW5kIGluIHRoZSBjb3VydCBvZiBIZWxpYXN0cyBhbnkgbGF3IHdoaWNoIGl0IHdhcwogICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZCB0byByZXBlYWwuPC9ub3RlPiBhcHBvaW50ZWQgYnkgeW91LCBmb3IgaW5zdGFuY2UsIG1heSBiZSBwZXJzdWFkZWQKICAgICAgICAgICAgICAgICAgICB0byBob2xkIHRoZWlyIHBlYWNlLiBIZSBlbmpvaW5lZCB0aGUgZXhoaWJpdGlvbiBvZiBhIHByb3Bvc2VkIGxhdyB0aGF0IHdlIG1heQogICAgICAgICAgICAgICAgICAgIGFsbCBoYXZlIGtub3dsZWRnZSBvZiBpdCBiZWZvcmVoYW5kOyBidXQgaXQgbWF5IGhhcHBlbiB0aGF0IGl0IGlzIHVub2JzZXJ2ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gd291bGQgb3Bwb3NlIGl0IGlmIHRoZXkga25ldyBpbiB0aW1lLCBhbmQgdGhhdCB0aGUgcmVzdCByZWFkIGl0CiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBhdHRlbnRpb24uIDwvdHJhbnNsYXRpb24+"
translation['24.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGl0IG1heSBiZSBvYmplY3RlZCwgaXQKICAgICAgICAgICAgICAgICAgICBpcyBvcGVuIHRvIGFueW9uZSB0byBpbmRpY3QgdGhlIGxhdywgYXMgSSBoYXZlIGRvbmUgb24gdGhpcyBvY2Nhc2lvbi4gV2VsbCwgZXZlbgogICAgICAgICAgICAgICAgICAgIGluIHRoYXQgZXZlbnQgdGhlIFN0YXRlIGlzIG91dHdpdHRlZCBpZiBhIG1hbiBnZXRzIHRoZSBwcm9zZWN1dG9yIHRvIHN0YW5kCiAgICAgICAgICAgICAgICAgICAgYXNpZGUuIFdoYXQsIHRoZW4sIGlzIHRoZSBvbmx5IGhvbmVzdCBhbmQgdHJ1c3R3b3J0aHkgc2FmZWd1YXJkIG9mIHRoZSBsYXc/IFlvdSwKICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9uIHBlb3BsZS4gSXQgaXMgYmV5b25kIHRoZSBwb3dlciBvZiBtb3J0YWwgbWFuIHRvIHRha2UgYXdheSBmcm9tIHlvdQogICAgICAgICAgICAgICAgICAgIHRoZSByaWdodCB0byBkZXRlcm1pbmUgYW5kIHRvIGFwcHJvdmUgdGhlIGJlc3QgcG9saWN5LiBObyBtYW4sIGJ5IGdldHRpbmcgeW91IHRvCiAgICAgICAgICAgICAgICAgICAgc3RhbmQgYXNpZGUsIG9yIGJ5IGJyaWJpbmcgeW91LCBjYW4gZXZlciBpbmR1Y2UgeW91IHRvIHN1YnN0aXR1dGUgYSBiYWQgbGF3IGZvcgogICAgICAgICAgICAgICAgICAgIGEgZ29vZCBvbmUuIDwvdHJhbnNsYXRpb24+"
translation['24.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgdGhlIGxhd2dpdmVyIGFudGljaXBhdGVzCiAgICAgICAgICAgICAgICAgICAgZXZlcnkgYXZlbnVlIG9mIGluaXF1aXR5LCB0aHdhcnRpbmcgdGhlIHBsYW5zIGFuZCBmb3JiaWRkaW5nIHRoZSBhZHZhbmNlIG9mIG1lbgogICAgICAgICAgICAgICAgICAgIHdob3NlIGludGVudGlvbnMgYXJlIGhvc3RpbGUgdG8geW91LiBBbGwgdGhlc2UgcHJlY2F1dGlvbnMsIHNvIGFkbWlyYWJseSBhbmQgc28KICAgICAgICAgICAgICAgICAgICByaWdodGVvdXNseSBlbmFjdGVkLCBUaW1vY3JhdGVzIGhhcyBzdWJ2ZXJ0ZWQgYW5kIG9ibGl0ZXJhdGVkLCBzbyBmYXIgYXMgaW4gaGltCiAgICAgICAgICAgICAgICAgICAgbGF5OyBoZSBoYXMgaW50cm9kdWNlZCBhIGxhdyByZXB1Z25hbnQgdG8gYWxsIG9yIG5lYXJseSBhbGwgdGhlIGV4aXN0aW5nCiAgICAgICAgICAgICAgICAgICAgc3RhdHV0ZXMsIHdpdGhvdXQgcmVhZGluZyBhbnkgZm9yIGNvbXBhcmlzb24sIHdpdGhvdXQgcmVwZWFsaW5nIGFueSwgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGxlYXZpbmcgeW91IHRoZSByaWdodCBvZiBjaG9pY2UsIHdpdGhvdXQgdGFraW5nIGFueSBvdGhlciBvZiB0aGUgc3RlcHMgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyByZXF1aXJlZCB0byB0YWtlLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBzdXBwb3NlIHRoYXQgeW91IGFyZSBhbGwgc2F0aXNmaWVkIHRoYXQgaGUgaXMgYW1lbmFibGUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgaW5kaWN0bWVudCwgYXMgaGF2aW5nIGludHJvZHVjZWQgYSBsYXcgdGhhdCBjb250cmF2ZW5lcyBleGlzdGluZyBzdGF0dXRlczsgYnV0LAogICAgICAgICAgICAgICAgICAgIHRvIHNob3cgeW91IHRoZSBjaGFyYWN0ZXIgb2YgdGhlIGxhd3MgaGUgaGFzIGNvbnRyYXZlbmVkIGFuZCBvZiB0aGUgbGF3IGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGludHJvZHVjZWQsIHRoZSBjbGVyayB3aWxsIHJlYWQgdG8geW91LCBmaXJzdCBoaXMgbmV3IGxhdywgYW5kIHRoZW4gdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgbGF3cyB0byB3aGljaCBpdCBpcyByZXB1Z25hbnQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3IG9mIFRpbW9jcmF0ZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGltb2NyYXRlczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkR1cmluZyB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2lkZW5jeSwgbmFtZWx5LCB0aGF0IG9mIHRoZSBQYW5kaW9uaWQgVHJpYmUsIGFuZCBvbiB0aGUgdHdlbGZ0aCBkYXkgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBwcmVzaWRlbmN5LCBpdCB3YXMgbW92ZWQgYnkgVGltb2NyYXRlcyB0aGF0LCBpZiB0aGUgYWRkaXRpb25hbCBwZW5hbHR5CiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGltcHJpc29ubWVudCBoYXMgYmVlbiBvciBzaGFsbCBoZXJlYWZ0ZXIgYmUgaW5mbGljdGVkIGluIHB1cnN1YW5jZSBvZiBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgbGF3IG9yIGRlY3JlZSB1cG9uIGFueSBwZXJzb24gaW4gZGVidCB0byB0aGUgdHJlYXN1cnksIGl0IHNoYWxsIGJlIGNvbXBldGVudAogICAgICAgICAgICAgICAgICAgICAgICBmb3IgaGltIG9yIGZvciBhbnkgb3RoZXIgcGVyc29uIG9uIGhpcyBiZWhhbGYgdG8gbm9taW5hdGUgYXMgc3VyZXRpZXMgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZWJ0IHN1Y2ggcGVyc29ucyBhcyBzaGFsbCBiZSBhcHByb3ZlZCBieSB2b3RlIG9mIHRoZSBBc3NlbWJseSwgb24gYW4KICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJ0YWtpbmcgdG8gcGF5IGluIGZ1bGwgdGhlIGFtb3VudCBpbiB3aGljaCBoZSB3YXMgaW5kZWJ0ZWQuIFRoZQogICAgICAgICAgICAgICAgICAgICAgICBDb21taXNzaW9uZXJzIGFyZSByZXF1aXJlZCB0byBwdXQgdGhlIHF1ZXN0aW9uIHdoZW5zb2V2ZXIgYW55IGRlYnRvciB3aXNoZXMKICAgICAgICAgICAgICAgICAgICAgICAgdG8gbm9taW5hdGUgc3VyZXRpZXMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5EdXJpbmcgdGhlIGZpcnN0CiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNpZGVuY3ksIG5hbWVseSwgdGhhdCBvZiB0aGUgUGFuZGlvbmlkIFRyaWJlLCBhbmQgb24gdGhlIHR3ZWxmdGggZGF5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgcHJlc2lkZW5jeSwgaXQgd2FzIG1vdmVkIGJ5IFRpbW9jcmF0ZXMgdGhhdCwgaWYgdGhlIGFkZGl0aW9uYWwgcGVuYWx0eQogICAgICAgICAgICAgICAgICAgICAgICBvZiBpbXByaXNvbm1lbnQgaGFzIGJlZW4gb3Igc2hhbGwgaGVyZWFmdGVyIGJlIGluZmxpY3RlZCBpbiBwdXJzdWFuY2Ugb2YgYW55CiAgICAgICAgICAgICAgICAgICAgICAgIGxhdyBvciBkZWNyZWUgdXBvbiBhbnkgcGVyc29uIGluIGRlYnQgdG8gdGhlIHRyZWFzdXJ5LCBpdCBzaGFsbCBiZSBjb21wZXRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGhpbSBvciBmb3IgYW55IG90aGVyIHBlcnNvbiBvbiBoaXMgYmVoYWxmIHRvIG5vbWluYXRlIGFzIHN1cmV0aWVzIGZvcgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZGVidCBzdWNoIHBlcnNvbnMgYXMgc2hhbGwgYmUgYXBwcm92ZWQgYnkgdm90ZSBvZiB0aGUgQXNzZW1ibHksIG9uIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVydGFraW5nIHRvIHBheSBpbiBmdWxsIHRoZSBhbW91bnQgaW4gd2hpY2ggaGUgd2FzIGluZGVidGVkLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWlzc2lvbmVycyBhcmUgcmVxdWlyZWQgdG8gcHV0IHRoZSBxdWVzdGlvbiB3aGVuc29ldmVyIGFueSBkZWJ0b3Igd2lzaGVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIG5vbWluYXRlIHN1cmV0aWVzLjwvdHJhbnNsYXRpb24+"
translation['24.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJjb250aW51ZWQiPlRoZSBkZWJ0b3Igd2hvIGhhcwogICAgICAgICAgICAgICAgICAgICAgICBnaXZlbiBzdXJldGllcyBzaGFsbCBiZSByZWxlYXNlZCBmcm9tIHRoZSBwZW5hbHR5IG9mIGltcHJpc29ubWVudCBvbiBwYXltZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBTdGF0ZSBvZiB0aGUgbW9uZXksIGluIHJlc3BlY3Qgb2Ygd2hpY2ggaGUgZ2F2ZSBzdWNoIHN1cmV0aWVzOyBidXQgaWYKICAgICAgICAgICAgICAgICAgICAgICAgYXQgdGhlIHRpbWUgb2YgdGhlIG5pbnRoIHByZXNpZGVuY3kgbmVpdGhlciBoZSBub3IgaGlzIHN1cmV0aWVzIHNoYWxsIGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgcGFpZCBpbiB0aGUgbW9uZXksIHRoZSBtYW4gd2hvIGdhdmUgc3VyZXRpZXMgc2hhbGwgYmUgaW1wcmlzb25lZCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IG9mIHRoZSBzdXJldGllcyBzaGFsbCBiZSBjb25maXNjYXRlZC4gQnV0IGluIHRoZSBjYXNlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRheC1mYXJtZXJzLCB0aGVpciBzdXJldGllcywgYW5kIHRoZWlyIGNvbGxlY3RvcnMsIGFuZCBvZiB0aGUgbGVzc2VlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBsZWFzYWJsZSByZXZlbnVlcyBhbmQgdGhlaXIgc3VyZXRpZXMsIHRoZSBTdGF0ZSBtYXkgZXhhY3QgcGF5bWVudCBhY2NvcmRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGVzdGFibGlzaGVkIGxhd3MuIElmIGFueSBtYW4gaW5jdXIgZGVidCBkdXJpbmcgdGhlIG5pbnRoIHByZXNpZGVuY3kKICAgICAgICAgICAgICAgICAgICAgICAgaGUgc2hhbGwgcGF5IGluIGZ1bGwgZHVyaW5nIHRoZSBuaW50aCBvciB0aGUgdGVudGggcHJlc2lkZW5jeSBvZiB0aGUgbmV4dAogICAgICAgICAgICAgICAgICAgICAgICBlbnN1aW5nIHllYXIuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3LCBhbmQgSSBiZWcgeW91IHRvIGJlYXIgaW4gbWluZCB0aGlzIHBocmFzZSwg4oCcaWYgdGhlIGFkZGl0aW9uYWwKICAgICAgICAgICAgICAgICAgICBwZW5hbHR5IG9mIGltcHJpc29ubWVudCBoYXMgYmVlbiBvciBzaGFsbCBoZXJlYWZ0ZXIgYmUgaW5mbGljdGVkLOKAnSBhbmQKICAgICAgICAgICAgICAgICAgICBhbHNvIHRoYXQgaGUgZXhjZXB0cyBmcm9tIHRoZSBvcGVyYXRpb24gb2YgaGlzIGxhdyB0YXgtZmFybWVycyBhbmQgbGVzc2VlcyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVpciBzdXJldGllcy4gVGhlIGxhdyBhcyBhIHdob2xlLCBidXQgdGhvc2UgcHJvdmlzaW9ucyBtb3JlIGVzcGVjaWFsbHksIGlzCiAgICAgICAgICAgICAgICAgICAgY29udHJhcnkgdG8gYWxsIGV4aXN0aW5nIHN0YXR1dGVzLiBUaGF0IHlvdSB3aWxsIHJlY29nbml6ZSB3aGVuIHlvdSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZWQgdG8gdGhlIGFjdHVhbCBsYXdzLuKAlFJlYWQuIDwvdHJhbnNsYXRpb24+"
translation['24.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1vdmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGJ5IERpb2NsZXM6IHRoYXQgbGF3cyBlbmFjdGVkIHVuZGVyIGRlbW9jcmF0aWMgZ292ZXJubWVudCBiZWZvcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hvbnNoaXAgb2YgRXVjbGVpZGVzIGFuZCBhbGwgbGF3cyB0aGF0IHdlcmUgZW5hY3RlZCBkdXJpbmcgdGhlIGFyY2hvbnNoaXAKICAgICAgICAgICAgICAgICAgICAgICAgb2YgRXVjbGVpZGVzIGFuZCBhcmUgb24gcmVjb3JkIHNoYWxsIGJlIGluIGZvcmNlLiBMYXdzIGVuYWN0ZWQgYWZ0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hvbnNoaXAgb2YgRXVjbGVpZGVzIG9yIGxhd3MgdGhhdCBzaGFsbCBoZXJlYWZ0ZXIgYmUgZW5hY3RlZCBzaGFsbCBiZSBpbgogICAgICAgICAgICAgICAgICAgICAgICBmb3JjZSBhcyBmcm9tIHRoZSBkYXkgb2YgdGhlaXIgc2V2ZXJhbCBlbmFjdG1lbnQsIHVubGVzcyBhIGNsYXVzZSBiZQogICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRlZCBkZWZpbmluZyB0aGUgZGF0ZSBvZiB0aGVpciBmaXJzdCBjb21pbmcgaW50byBmb3JjZS4gVGhlIENsZXJrIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBDb3VuY2lsIHNoYWxsIGFmZml4IGhpcyBtYXJrIHRvIGFsbCBsYXdzIG5vdyBlc3RhYmxpc2hlZCB3aXRoaW4gdGhpcnR5CiAgICAgICAgICAgICAgICAgICAgICAgIGRheXM7IGFuZCBoZXJlYWZ0ZXIgd2hvc29ldmVyIGlzIGFjdGluZyBhcyBjbGVyayBzaGFsbCBmb3J0aHdpdGggbWFrZSBhIG5vdGUKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgbGF3IGlzIGluIGZvcmNlIGFzIGZyb20gdGhlIGRhdGUgb2YgZW5hY3RtZW50LjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW92ZWQKICAgICAgICAgICAgICAgICAgICAgICAgYnkgRGlvY2xlczogdGhhdCBsYXdzIGVuYWN0ZWQgdW5kZXIgZGVtb2NyYXRpYyBnb3Zlcm5tZW50IGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYXJjaG9uc2hpcCBvZiBFdWNsZWlkZXMgYW5kIGFsbCBsYXdzIHRoYXQgd2VyZSBlbmFjdGVkIGR1cmluZyB0aGUgYXJjaG9uc2hpcAogICAgICAgICAgICAgICAgICAgICAgICBvZiBFdWNsZWlkZXMgYW5kIGFyZSBvbiByZWNvcmQgc2hhbGwgYmUgaW4gZm9yY2UuIExhd3MgZW5hY3RlZCBhZnRlciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYXJjaG9uc2hpcCBvZiBFdWNsZWlkZXMgb3IgbGF3cyB0aGF0IHNoYWxsIGhlcmVhZnRlciBiZSBlbmFjdGVkIHNoYWxsIGJlIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlIGFzIGZyb20gdGhlIGRheSBvZiB0aGVpciBzZXZlcmFsIGVuYWN0bWVudCwgdW5sZXNzIGEgY2xhdXNlIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZGVkIGRlZmluaW5nIHRoZSBkYXRlIG9mIHRoZWlyIGZpcnN0IGNvbWluZyBpbnRvIGZvcmNlLiBUaGUgQ2xlcmsgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIENvdW5jaWwgc2hhbGwgYWZmaXggaGlzIG1hcmsgdG8gYWxsIGxhd3Mgbm93IGVzdGFibGlzaGVkIHdpdGhpbiB0aGlydHkKICAgICAgICAgICAgICAgICAgICAgICAgZGF5czsgYW5kIGhlcmVhZnRlciB3aG9zb2V2ZXIgaXMgYWN0aW5nIGFzIGNsZXJrIHNoYWxsIGZvcnRod2l0aCBtYWtlIGEgbm90ZQogICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBsYXcgaXMgaW4gZm9yY2UgYXMgZnJvbSB0aGUgZGF0ZSBvZiBlbmFjdG1lbnQuPC90cmFuc2xhdGlvbj4="
translation['24.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGV4aXN0aW5nCiAgICAgICAgICAgICAgICAgICAgbGF3cyBhcmUgZXhjZWxsZW50LCBnZW50bGVtZW4gb2YgdGhlIGp1cnk7IGJ1dCB0aGUgbGF3IGp1c3QgcmVhZCBoYXMgZGVmaW5lZAogICAgICAgICAgICAgICAgICAgIHRoZW0sIGlmIEkgbWF5IHNvIHB1dCBpdCwgYW5kIGdpdmVuIHRoZW0gbmV3IGF1dGhvcml0eS4gSXQgb3JkYWlucyB0aGF0IGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgc3RhdHV0ZSBzaGFsbCBiZSBvcGVyYXRpdmUgYXMgZnJvbSB0aGUgZGF0ZSBvZiBlbmFjdG1lbnQsIHVubGVzcyBhbnkgZGF0ZSBpcwogICAgICAgICAgICAgICAgICAgIGFwcGVuZGVkLCBhbmQsIGluIHRoYXQgY2FzZSwgdGhhdCB0aGUgc3BlY2lmaWVkIGRhdGUgc2hhbGwgbWFyayB0aGUgYmVnaW5uaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgaXRzIG9wZXJhdGlvbi4gVGhlIHJlYXNvbiBpcyB0aGF0IGEgY2xhdXNlIGhhZCBiZWVuIGFwcGVuZGVkIHRvIG1hbnkgc3RhdHV0ZXMsCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGVmZmVjdCB0aGF0IOKAnHRoaXMgbGF3IHNoYWxsIGJlIGluIGZvcmNlIGZyb20gdGhlIHRpbWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbmV4dCBlbnN1aW5nIGFyY2hvbi7igJ0gQnV0IHRoZSBtYW4gd2hvLCB0byBjb25maXJtIHN1Y2ggc3RhdHV0ZXMsCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWQgdGhlIHN0YXR1dGUgdGhhdCBoYXMganVzdCBiZWVuIHJlYWQsIGRpZCBub3QsIGluIGRyYWZ0aW5nIGhpcyBsYXcgYXQgYQogICAgICAgICAgICAgICAgICAgIGxhdGVyIGRhdGUsIHRoaW5rIGl0IHJpZ2h0IHRvIGNhcnJ5IGJhY2sgdG8gdGhlaXIgZGF0ZXMgb2YgZW5hY3RtZW50IHRob3NlIGxhd3MKICAgICAgICAgICAgICAgICAgICB3aG9zZSBvcGVyYXRpb24gaGFkIGJlZW4gZGVmZXJyZWQgdG8gYSBkYXRlIGxhdGVyIHRoYW4gdGhlaXIgZW5hY3RtZW50LCBhbmQgc28KICAgICAgICAgICAgICAgICAgICBtYWtlIHRoZW0gb3BlcmF0aXZlIGVhcmxpZXIgdGhhbiB0aGVpciBzZXZlcmFsIGF1dGhvcnMgaW50ZW5kZWQuIDwvdHJhbnNsYXRpb24+"
translation['24.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgbXVzdCB0aGVyZWZvcmUgb2JzZXJ2ZSBob3cgY29udHJhcnkgdG8gdGhhdAogICAgICAgICAgICAgICAgICAgIHN0YXR1dGUgaXMgdGhlIGxhdyB0aGF0IFRpbW9jcmF0ZXMgaGFzIHByb3Bvc2VkLiBUaGUgc3RhdHV0ZSBvcmRhaW5zIHRoYXQgZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGRhdGUgc3BlY2lmaWVkIG9yIHRoZSBkYXRlIG9mIGVuYWN0bWVudCBzaGFsbCBob2xkIGdvb2Q7IFRpbW9jcmF0ZXMgd3JpdGVzLAogICAgICAgICAgICAgICAgICAgIOKAnGlmIHRoZSBwZW5hbHR5IGhhcyBiZWVuIGluZmxpY3RlZCzigJ0gcmVmZXJyaW5nIHRvIHBhc3QKICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbnMuIEhlIGRpZCBub3QgZXZlbiBkZWZpbmUgdGhlIGluaXRpYWwgZGF0ZSBieSBuYW1pbmcgYW4gYXJjaG9uc2hpcDsKICAgICAgICAgICAgICAgICAgICBuYXksIGhlIGhhcyBtYWRlIGhpcyBsYXcgb3BlcmF0aXZlIG5vdCBtZXJlbHkgYmVmb3JlIHRoZSBkYXRlIG9mIGVuYWN0bWVudCwgYnV0CiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIGFueSBvZiB1cyB3ZXJlIGJvcm4sIGZvciBoZSBoYXMgaW5jbHVkZWQgYWxsIHBhc3QgdGltZSB3aXRob3V0IGFueQogICAgICAgICAgICAgICAgICAgIGxpbWl0YXRpb24u4oCUWW91ciBkdXR5LCBUaW1vY3JhdGVzLCB3YXMgZWl0aGVyIG5vdCB0byBjb21wb3NlIHlvdXIgbGF3LAogICAgICAgICAgICAgICAgICAgIG9yIHRvIHJlcGVhbCB0aGUgb3RoZXIgb25lOyB5b3UgaGFkIG5vIHJpZ2h0IHRvIHRocm93IHRoZSB3aG9sZSBidXNpbmVzcyBpbnRvCiAgICAgICAgICAgICAgICAgICAgY29uZnVzaW9uIGZvciB0aGUgZnVydGhlcmFuY2Ugb2YgeW91ciBvd24gcHVycG9zZXMuIFJlYWQgYW5vdGhlciBsYXcuIDwvdHJhbnNsYXRpb24+"
translation['24.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPiAuIC4gLiAuIG5vciBpbiByZXNwZWN0IG9mIGRpc2ZyYW5jaGlzZWQgY2l0aXplbnMsIGZvcgogICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JhdGlvbiBvZiB0aGVpciBmcmFuY2hpc2UsIG5vciBpbiByZXNwZWN0IG9mIHBlcnNvbnMgaW5kZWJ0ZWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIEdvZHMgb3IgdG8gdGhlIHRyZWFzdXJ5IG9mIHRoZSBBdGhlbmlhbnMsIGZvciByZW1pc3Npb24gb3IgY29tcG9zaXRpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGVidCwgdW5sZXNzIHBlcm1pc3Npb24gYmUgZ3JhbnRlZCBieSBub3QgbGVzcyB0aGFuIHNpeCB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVucyBnaXZpbmcgYW4gYWZmaXJtYXRpdmUgdm90ZSBieSBiYWxsb3QuIEluIHRoYXQgZXZlbnQgaXQgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgbGF3ZnVsIHRvIHB1dCB0aGUgcXVlc3Rpb24gaW4gc3VjaCBtYW5uZXIgYXMgdGhlIENvdW5jaWwgYW5kIHRoZSBBc3NlbWJseQogICAgICAgICAgICAgICAgICAgICAgICBhcHByb3ZlLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+IC4gLiAuIC4gbm9yIGluIHJlc3BlY3Qgb2YgZGlzZnJhbmNoaXNlZCBjaXRpemVucywgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RvcmF0aW9uIG9mIHRoZWlyIGZyYW5jaGlzZSwgbm9yIGluIHJlc3BlY3Qgb2YgcGVyc29ucyBpbmRlYnRlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgR29kcyBvciB0byB0aGUgdHJlYXN1cnkgb2YgdGhlIEF0aGVuaWFucywgZm9yIHJlbWlzc2lvbiBvciBjb21wb3NpdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGVpciBkZWJ0LCB1bmxlc3MgcGVybWlzc2lvbiBiZSBncmFudGVkIGJ5IG5vdCBsZXNzIHRoYW4gc2l4IHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zIGdpdmluZyBhbiBhZmZpcm1hdGl2ZSB2b3RlIGJ5IGJhbGxvdC4gSW4gdGhhdCBldmVudCBpdCBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICBsYXdmdWwgdG8gcHV0IHRoZSBxdWVzdGlvbiBpbiBzdWNoIG1hbm5lciBhcyB0aGUgQ291bmNpbCBhbmQgdGhlIEFzc2VtYmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGFwcHJvdmUuPC90cmFuc2xhdGlvbj4="
translation['24.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGVyZSBpcyBhbm90aGVyCiAgICAgICAgICAgICAgICAgICAgbGF3IHdoaWNoIGZvcmJpZHMgYW55IHByb3Bvc2FsIGluIHJlc3BlY3Qgb2YgZGlzZnJhbmNoaXNlZCBvciBpbmRlYnRlZCBwZXJzb25zLAogICAgICAgICAgICAgICAgICAgIGZvciByZW1pc3Npb24gb3IgY29tcG9zaXRpb24sIHRvIGJlIG1hZGUgb3IgcHV0IHRvIHRoZSB2b3RlLCBleGNlcHQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBwZXJtaXNzaW9uIGdyYW50ZWQsIGFuZCB0aGF0IG9ubHkgaWYgYXQgbGVhc3Qgc2l4IHRob3VzYW5kIGNpdGl6ZW5zIGhhdmUgdm90ZWQKICAgICAgICAgICAgICAgICAgICBheWUuIEJ1dCBUaW1vY3JhdGVzIGV4cHJlc3NseSBwcm9wb3NlZCB0aGF0LCBpZiB0aGUgYWRkaXRpb25hbCBwZW5hbHR5IG9mCiAgICAgICAgICAgICAgICAgICAgaW1wcmlzb25tZW50IGhhcyBiZWVuIGluZmxpY3RlZCBvbiBhbnkgZGVidG9yLCBoZSBzaGFsbCBoYXZlIHJlbWlzc2lvbiBvbgogICAgICAgICAgICAgICAgICAgIHByb2R1Y3Rpb24gb2Ygc3VyZXRpZXMsIHdpdGhvdXQgYW55IHByZWxpbWluYXJ5IHJlc29sdXRpb24gaGF2aW5nIGJlZW4gY2FycmllZCwKICAgICAgICAgICAgICAgICAgICBvciBhbnkgcGVybWlzc2lvbiBncmFudGVkIGZvciBzdWNoIGEgcmVzb2x1dGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['24.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5FdmVuIHdoZW4gYSBtYW4gaGFzIGdvdCBoaXMgcGVybWlzc2lvbiwgdGhlIGxhdyBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIGFsbG93IGhpbSB0byBkbyB0aGUgYnVzaW5lc3MgYXMgaGUgY2hvb3NlcywgYnV0IGFzIHRoZSBDb3VuY2lsIGFuZCB0aGUgQXNzZW1ibHkKICAgICAgICAgICAgICAgICAgICBhcHByb3ZlLiBUaW1vY3JhdGVzIHdhcyBub3Qgc2F0aXNmaWVkIHdpdGggdGhlIHNpbXBsZSB0cmFuc2dyZXNzaW9uIG9mIG1ha2luZwogICAgICAgICAgICAgICAgICAgIGhpcyBwcm9wb3NhbCBhbmQgaW50cm9kdWNpbmcgaGlzIGxhdyBvbiB0aGUgbWF0dGVycyBpbiBxdWVzdGlvbiB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgcGVybWlzc2lvbiBncmFudGVkOyBoZSB3ZW50IGZ1cnRoZXIgYW5kLCB3aXRob3V0IGxheWluZyBhbnkgcHJvcG9zaXRpb24gYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgdGhlIENvdW5jaWwgb3IgYmVmb3JlIHRoZSBBc3NlbWJseSwgb24gdGhlIHNseSwgd2hlbiB0aGUgQ291bmNpbCBzdG9vZAogICAgICAgICAgICAgICAgICAgIGFkam91cm5lZCwgYW5kIGV2ZXJ5Ym9keSB3YXMgaG9saWRheS1tYWtpbmcgaW4gaG9ub3Igb2YgdGhlIGZlc3RpdmFsLCBoZSBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgaW4gaGlzIGJpbGwgc3VycmVwdGl0aW91c2x5LuKAlCA8L3RyYW5zbGF0aW9uPg=="
translation['24.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsCiAgICAgICAgICAgICAgICAgICAgaWYgeW91ciBpbnRlbnRpb25zIGhhZCBiZWVuIGhvbmVzdCwgVGltb2NyYXRlcywga25vd2luZyBhcyB5b3UgZGlkIHRoZSBzdGF0dXRlCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSBoYXZlIHJlYWQsIGl0IHdhcyB5b3VyIGR1dHksIGZpcnN0IHRvIG1ha2Ugd3JpdHRlbiByZXF1ZXN0IGZvciBhdWRpZW5jZQogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aGUgQ291bmNpbCwgdGhlbiB0byBjb25mZXIgd2l0aCB0aGUgQXNzZW1ibHksIGFuZCBhZnRlciB0aGF0LCBpZiB0aGUKICAgICAgICAgICAgICAgICAgICB3aG9sZSBib2R5IG9mIGNpdGl6ZW5zIGhhZCBhcHByb3ZlZCwgdG8gY29tcG9zZSBhbmQgYnJpbmcgaW4geW91ciBiaWxsIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgaW4gcXVlc3Rpb24sIGFuZCBldmVuIHRoZW4gdG8gd2FpdCBmb3IgdGhlIGRhdGVzIHByZXNjcmliZWQgYnkgbGF3LCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQsIGRvaW5nIGJ1c2luZXNzIGluIHRoYXQgZmFzaGlvbiwgZXZlbiB0aG91Z2ggYW55b25lIHRyaWVkIHRvIHNob3cKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdXIgbGF3IHdhcyBkaXNhZHZhbnRhZ2VvdXMgdG8gdGhlIFN0YXRlLCB5b3UgbWlnaHQgbm90IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIHN1c3BlY3RlZCBvZiBtYWxpY2lvdXMgaW50ZW50aW9uLCBidXQgb25seSBvZiB0aGUgbWlzZm9ydHVuZSBvZiBlcnJvbmVvdXMKICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['24.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBpdCBpcywgYnkgdGhydXN0aW5nIHlvdXIgbGF3CiAgICAgICAgICAgICAgICAgICAgaW50byB0aGUgc3RhdHV0ZS1ib29rIGNsYW5kZXN0aW5lbHksIGhhc3RpbHksIGFuZCBpbGxlZ2FsbHksIHlvdSBoYXZlIHN0cmlwcGVkCiAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgb2YgYWxsIGNsYWltIHRvIGluZHVsZ2VuY2U7IGZvciBpbmR1bGdlbmNlIGJlbG9uZ3MgdG8gdGhvc2Ugd2hvIG9mZmVuZAogICAgICAgICAgICAgICAgICAgIHVud2l0dGluZ2x5LCBub3QgdG8gdGhvc2Ugd2hvIGhhdmUgY29uY2VydGVkIGEgcGxvdCwgYXMgeW91IGFyZSBjb252aWN0ZWQgb2YKICAgICAgICAgICAgICAgICAgICBkb2luZy4gSG93ZXZlciwgSSBzaGFsbCBoYXZlIGEgd29yZCB0byBzYXkgb24gdGhhdCBwb2ludCBwcmVzZW50bHkuCiAgICAgICAgICAgICAgICAgICAgTWVhbnRpbWUs4oCUcmVhZCB0aGUgbmV4dCBsYXcuIDwvdHJhbnNsYXRpb24+"
translation['24.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGFueSBwZXJzb24KICAgICAgICAgICAgICAgICAgICAgICAgbWFrZSBwZXRpdGlvbiB0byB0aGUgQ291bmNpbCBvciB0byB0aGUgQXNzZW1ibHkgaW4gcmVzcGVjdCBvZiBhbnkgc2VudGVuY2UKICAgICAgICAgICAgICAgICAgICAgICAgb2YgYSBDb3VydCBvZiBKdXN0aWNlIG9yIG9mIHRoZSBDb3VuY2lsIG9yIG9mIHRoZSBBc3NlbWJseSwgaWYgdGhlIHBlcnNvbgogICAgICAgICAgICAgICAgICAgICAgICB3aG8gaGFzIGJlZW4gZmluZWQgaGltc2VsZiBtYWtlIHBldGl0aW9uIGJlZm9yZSBoZSBoYXMgcGFpZCB0aGUgZmluZSwgYW4KICAgICAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24gc2hhbGwgbGllIGFnYWluc3QgaGltIGluIHRoZSBzYW1lIG1hbm5lciBhcyB3aGVuIGEgcGVyc29uIHNpdHMKICAgICAgICAgICAgICAgICAgICAgICAgb24gYSBqdXJ5IGJlaW5nIGluZGVidGVkIHRvIHRoZSB0cmVhc3VyeTsgYW5kIGlmIGFub3RoZXIgcGVyc29uIG1ha2UKICAgICAgICAgICAgICAgICAgICAgICAgcGV0aXRpb24gb24gYmVoYWxmIG9mIHRoZSBwZXJzb24gZmluZWQsIGhpcyB3aG9sZSBwcm9wZXJ0eSBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICBjb25maXNjYXRlZDsgYW5kIGlmIGFueSBDb21taXNzaW9uZXIgc2hhbGwgYWxsb3cgdGhlIHF1ZXN0aW9uIHRvIGJlIHB1dCBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgYW55b25lLCB3aGV0aGVyIGZvciB0aGUgcGVyc29uIGZpbmVkIG9yIGZvciBhbm90aGVyIG9uIGhpcyBiZWhhbGYsIGhlIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGRpc2ZyYW5jaGlzZWQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnkgcGVyc29uCiAgICAgICAgICAgICAgICAgICAgICAgIG1ha2UgcGV0aXRpb24gdG8gdGhlIENvdW5jaWwgb3IgdG8gdGhlIEFzc2VtYmx5IGluIHJlc3BlY3Qgb2YgYW55IHNlbnRlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIGEgQ291cnQgb2YgSnVzdGljZSBvciBvZiB0aGUgQ291bmNpbCBvciBvZiB0aGUgQXNzZW1ibHksIGlmIHRoZSBwZXJzb24KICAgICAgICAgICAgICAgICAgICAgICAgd2hvIGhhcyBiZWVuIGZpbmVkIGhpbXNlbGYgbWFrZSBwZXRpdGlvbiBiZWZvcmUgaGUgaGFzIHBhaWQgdGhlIGZpbmUsIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uIHNoYWxsIGxpZSBhZ2FpbnN0IGhpbSBpbiB0aGUgc2FtZSBtYW5uZXIgYXMgd2hlbiBhIHBlcnNvbiBzaXRzCiAgICAgICAgICAgICAgICAgICAgICAgIG9uIGEganVyeSBiZWluZyBpbmRlYnRlZCB0byB0aGUgdHJlYXN1cnk7IGFuZCBpZiBhbm90aGVyIHBlcnNvbiBtYWtlCiAgICAgICAgICAgICAgICAgICAgICAgIHBldGl0aW9uIG9uIGJlaGFsZiBvZiB0aGUgcGVyc29uIGZpbmVkLCBoaXMgd2hvbGUgcHJvcGVydHkgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlzY2F0ZWQ7IGFuZCBpZiBhbnkgQ29tbWlzc2lvbmVyIHNoYWxsIGFsbG93IHRoZSBxdWVzdGlvbiB0byBiZSBwdXQgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGFueW9uZSwgd2hldGhlciBmb3IgdGhlIHBlcnNvbiBmaW5lZCBvciBmb3IgYW5vdGhlciBvbiBoaXMgYmVoYWxmLCBoZSBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICBiZSBkaXNmcmFuY2hpc2VkLjwvdHJhbnNsYXRpb24+"
translation['24.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgYSBsb25nCiAgICAgICAgICAgICAgICAgICAgdGFzaywgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBpZiB3ZSBhcmUgdG8gc3BlYWsgb2YgYWxsIHRoZSBsYXdzIHRvIHdoaWNoIHRoZQogICAgICAgICAgICAgICAgICAgIHByb3Bvc2FscyBpbnRyb2R1Y2VkIGJ5IHRoZSBkZWZlbmRhbnQgYXJlIHJlcHVnbmFudDsgYnV0IGlmIGFueSBsYXcgZGVzZXJ2ZXMKICAgICAgICAgICAgICAgICAgICBkaXNjdXNzaW9uIGl0IGlzIHN1cmVseSB0aGF0IHdoaWNoIHRoZSBjbGVyayBoYXMganVzdCByZWFkLiBUaGUgYXV0aG9yIG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICBsYXcga25ldyBob3cga2luZC1oZWFydGVkIGFuZCBpbmR1bGdlbnQgeW91IEF0aGVuaWFucyBhcmU7IGhlIGNvdWxkIHNlZSB0aGF0IGluCiAgICAgICAgICAgICAgICAgICAgbWFueSBpbnN0YW5jZXMgeW91IGhhZCBhbHJlYWR5IHN1ZmZlcmVkIHNlcmlvdXMgZGV0cmltZW50IGJ5IHlvdXIgb3duIGFjdAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2Ugb2YgdGhhdCBlYXN5IGRpc3Bvc2l0aW9uOyA8L3RyYW5zbGF0aW9uPg=="
translation['24.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIHdpc2hpbmcgdG8gbGVhdmUgbm8gZXhjdXNlIGZvciBwdWJsaWMgbG9zc2VzLCBoZSBkZWNsYXJlZCBpdCB3cm9uZ2Z1bAogICAgICAgICAgICAgICAgICAgIHRoYXQgbWVuIHdobyBoYWQgYmVlbiBjb252aWN0ZWQgb2YgbWlzY29uZHVjdCBieSBwcm9jZXNzIGFuZCBqdWRnZW1lbnQgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBzYW5jdGlvbiBvZiBsYXcgc2hvdWxkIGVuam95IHRoZSBiZW5lZml0IG9mIHlvdXIgZ29vZC1uYXR1cmUsIGZhbGxpbmcgYmFjayB1cG9uCiAgICAgICAgICAgICAgICAgICAgcHJheWVycyBhbmQgc29saWNpdGF0aW9uIGluIHRoZWlyIGRpc3RyZXNzLiBBY2NvcmRpbmdseSBoZSBzdHJpY3RseSBmb3JiYWRlCiAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHRoZSBjdWxwcml0IGhpbXNlbGYgb3IgYW55b25lIGVsc2UgdG8gc3VwcGxpY2F0ZSB5b3Ugb3IgbWFrZSBzcGVlY2hlcwogICAgICAgICAgICAgICAgICAgIHVwb24gc3VjaCBjb21wbGFpbnRzOyB0aGV5IG11c3QgZG8gd2hhdCBqdXN0aWNlIGRlbWFuZHMgaW4gc2lsZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['24.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaWYgeW91IHdlcmUgYXNrZWQgZm9yIHdob20geW91IHdvdWxkIG1vcmUKICAgICAgICAgICAgICAgICAgICBuYXR1cmFsbHkgZG8gYSBzZXJ2aWNlLCBmb3IgdGhvc2Ugd2hvIGJlZyB5b3Ugb3IgZm9yIHRob3NlIHdobyBiaWQgeW91LCBJIGFtCiAgICAgICAgICAgICAgICAgICAgc3VyZSB5b3Ugd291bGQgcmVwbHksIGZvciB0aG9zZSB3aG8gYmVnOyBmb3IgdGhlIGZvcm1lciBzZXJ2aWNlIGlzIHRoZSBvdXRjb21lCiAgICAgICAgICAgICAgICAgICAgb2Yga2luZGxpbmVzcywgdGhlIGxhdHRlciBvZiBjb3dhcmRpY2UuIFdlbGwsIHRoZSBsYXdzLCBhbGwgb2YgdGhlbSwgY29tbWFuZCB5b3UKICAgICAgICAgICAgICAgICAgICB0byBkbyB5b3VyIGR1dHk7IHN1cHBsaWFudHMgYmVnIHlvdSB0byBkbyBhIGZhdm91ci4gVGhlbiB3aGVyZSBzdXBwbGljYXRpb24gaXMKICAgICAgICAgICAgICAgICAgICBmb3JiaWRkZW4sIGNhbiBpdCBiZSBwZXJtaXNzaWJsZSB0byBpbnRyb2R1Y2UgYSBsYXcgdGhhdCBjb250YWlucyBhIGNvbW1hbmQ/IEkKICAgICAgICAgICAgICAgICAgICB0aGluayBub3QuIEluIGNhc2VzIGluIHdoaWNoIHlvdSBjb25jZWl2ZWQgaXQgdG8gYmUgeW91ciBkdXR5IGV2ZW4gdG8gcmVmdXNlCiAgICAgICAgICAgICAgICAgICAgZmF2b3VycywgaXQgaXMgc2hhbWVmdWwgdGhhdCB5b3Ugc2hvdWxkIGFsbG93IHRoZSBkZXNpcmVzIG9mIGNlcnRhaW4gcGVvcGxlIHRvCiAgICAgICAgICAgICAgICAgICAgYmUgZnVsZmlsbGVkIGFnYWluc3QgeW91ciB3aWxsLuKAlFJlYWQgdGhlIHN0YXR1dGUgdGhhdCBjb21lcyBuZXh0IGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIuIDwvdHJhbnNsYXRpb24+"
translation['24.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW4gdGhlcmUgaGFzIGJlZW4gYQogICAgICAgICAgICAgICAgICAgICAgICBwcmlvciBqdWRnZW1lbnQgYXVkaXQgb3IgYWRqdWRpY2F0aW9uIGFib3V0IGFueSBtYXR0ZXIgaW4gYSBjb3VydCBvZiBsYXcsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXRoZXIgaW4gYSBwdWJsaWMgb3IgYSBwcml2YXRlIHN1aXQsIG9yIHdoZXJlIHRoZSBTdGF0ZSBoYXMgYmVlbiB2ZW5kb3IsCiAgICAgICAgICAgICAgICAgICAgICAgIG5vbmUgb2YgdGhlIG1hZ2lzdHJhdGVzIG1heSBicmluZyB0aGUgbWF0dGVyIGludG8gY291cnQgb3IgcHV0IGFueSBxdWVzdGlvbgogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgdm90ZSwgbm9yIHNoYWxsIHRoZXkgcGVybWl0IGFueSBhY2N1c2F0aW9uIGZvcmJpZGRlbiBieSBsYXcuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuIHRoZXJlIGhhcyBiZWVuIGEKICAgICAgICAgICAgICAgICAgICAgICAgcHJpb3IganVkZ2VtZW50IGF1ZGl0IG9yIGFkanVkaWNhdGlvbiBhYm91dCBhbnkgbWF0dGVyIGluIGEgY291cnQgb2YgbGF3LAogICAgICAgICAgICAgICAgICAgICAgICB3aGV0aGVyIGluIGEgcHVibGljIG9yIGEgcHJpdmF0ZSBzdWl0LCBvciB3aGVyZSB0aGUgU3RhdGUgaGFzIGJlZW4gdmVuZG9yLAogICAgICAgICAgICAgICAgICAgICAgICBub25lIG9mIHRoZSBtYWdpc3RyYXRlcyBtYXkgYnJpbmcgdGhlIG1hdHRlciBpbnRvIGNvdXJ0IG9yIHB1dCBhbnkgcXVlc3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHZvdGUsIG5vciBzaGFsbCB0aGV5IHBlcm1pdCBhbnkgYWNjdXNhdGlvbiBmb3JiaWRkZW4gYnkgbGF3LjwvdHJhbnNsYXRpb24+"
translation['24.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2h5LCBpdCBsb29rcwogICAgICAgICAgICAgICAgICAgIGFzIHRob3VnaCBUaW1vY3JhdGVzIHdlcmUgY29tcGlsaW5nIGV2aWRlbmNlIG9mIGhpcyBvd24gdHJhbnNncmVzc2lvbnM7IGZvciBhdAogICAgICAgICAgICAgICAgICAgIHRoZSB2ZXJ5IG91dHNldCBvZiBoaXMgbGF3IGhlIG1ha2VzIGEgcHJvcG9zYWwgZXhhY3RseSBjb250cmFyeSB0byB0aGVzZQogICAgICAgICAgICAgICAgICAgIHByb3Zpc2lvbnMuIFRoZSBsZWdpc2xhdG9yIGRvZXMgbm90IHBlcm1pdCBhbnkgcXVlc3Rpb24gb25jZSBkZWNpZGVkIGJ5CiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50IG9mIHRoZSBjb3VydCB0byBiZSBwdXQgYSBzZWNvbmQgdGltZTsgdGhlIGxhdyBvZiBUaW1vY3JhdGVzIHJlYWRzCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgaWYgYW55IHBlbmFsdHkgaGFzIGJlZW4gaW5mbGljdGVkIG9uIGEgbWFuIGluIHB1cnN1YW5jZSBvZiBhIGxhdyBvciBhCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlLCB0aGUgQXNzZW1ibHkgbXVzdCByZWNvbnNpZGVyIHRoZSBtYXR0ZXIgZm9yIGhpbSwgaW4gb3JkZXIgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWNpc2lvbiBvZiB0aGUgY291cnQgbWF5IGJlIG92ZXJydWxlZCwgYW5kIHN1cmV0aWVzIHB1dCBpbiBieSB0aGUgcGVyc29uCiAgICAgICAgICAgICAgICAgICAgYW1lcmNlZC4gVGhlIHN0YXR1dGUgZm9yYmlkcyBhbnkgbWFnaXN0cmF0ZSBldmVuIHRvIHB1dCB0aGUgcXVlc3Rpb24gY29udHJhcnkgdG8KICAgICAgICAgICAgICAgICAgICB0aGVzZSBwcm92aXNpb25zOyBUaW1vY3JhdGVzIHByb3Bvc2VzIHRoYXQsIGlmIHN1cmV0aWVzIGFyZSBub21pbmF0ZWQsIHRoZQogICAgICAgICAgICAgICAgICAgIENvbW1pc3Npb25lcnMgc2hhbGwgYmUgb2JsaWdlZCB0byBzdWJtaXQgdGhlaXIgbmFtZXMsIGFuZCBhZGRzIHRoZSBwaHJhc2UsCiAgICAgICAgICAgICAgICAgICAg4oCcd2hlbmV2ZXIgYW55IGRlYnRvciB3aXNoZXMu4oCd4oCUIDwvdHJhbnNsYXRpb24+"
translation['24.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5SZWFkIGFub3RoZXIgc3RhdHV0ZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkp1ZGdlbWVudHMgYW5kIGF3YXJkcwogICAgICAgICAgICAgICAgICAgICAgICBnaXZlbiB1bmRlciB0aGUgbGF3IHdoaWxlIHRoZSBnb3Zlcm5tZW50IHdhcyBkZW1vY3JhdGljIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkLjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SnVkZ2VtZW50cyBhbmQgYXdhcmRzCiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuIHVuZGVyIHRoZSBsYXcgd2hpbGUgdGhlIGdvdmVybm1lbnQgd2FzIGRlbW9jcmF0aWMgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vLCBzYXlzIFRpbW9jcmF0ZXM7IHRoZXkgc2hhbGwKICAgICAgICAgICAgICAgICAgICBub3QgYmUgdmFsaWQsIGF0IGxlYXN0IHdoZW4gdGhlIHBlbmFsdHkgb2YgaW1wcmlzb25tZW50IGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9zZWQu4oCUUHJvY2VlZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBhY3RzIGRvbmUgYW5kIGp1ZGdlbWVudHMgZGVsaXZlcmVkIGR1cmluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdGltZSBvZiB0aGUgVGhpcnR5IFR5cmFudHMsIHdoZXRoZXIgaW4gcHJpdmF0ZSBvciBwdWJsaWMgc3VpdHMsIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgYWN0cyBkb25lIGFuZCBqdWRnZW1lbnRzIGRlbGl2ZXJlZCBkdXJpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUgb2YgdGhlIFRoaXJ0eSBUeXJhbnRzLCB3aGV0aGVyIGluIHByaXZhdGUgb3IgcHVibGljIHN1aXRzLCBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkLjwvdHJhbnNsYXRpb24+"
translation['24.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcC4gVGVsbCBtZTsKICAgICAgICAgICAgICAgICAgICBoZWFyaW5nIHRoYXQsIHdoYXQgd291bGQgYWxsIG9mIHlvdSBuYW1lIGFzIHRoZSBtb3N0IHRlcnJpYmxlIG1pc2ZvcnR1bmU/QWdhaW5zdAogICAgICAgICAgICAgICAgICAgIHdoYXQgd291bGQgeW91IHByYXkgbW9zdCBlYXJuZXN0bHk/IEkgc3VwcG9zZSB0aGF0IHlvdXIgcHJheWVyIHdvdWxkIGJlIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGUgb2YgdGhpbmdzIHVuZGVyIHRoZSBUaGlydHkgVHlyYW50cyBzaG91bGQgbmV2ZXIgcmVjdXIuIEFueWhvdywgdGhhdCwgYXMgSQogICAgICAgICAgICAgICAgICAgIHVuZGVyc3RhbmQgaXQsIGlzIHRoZSBtaXNmb3J0dW5lIGFnYWluc3Qgd2hpY2ggdGhpcyBzdGF0dXRlIHByb3ZpZGVzLCBieQogICAgICAgICAgICAgICAgICAgIG9yZGFpbmluZyB0aGF0IHRoZSBhY3RzIG9mIHRoYXQgdGltZSBzaGFsbCBiZSBpbnZhbGlkLiBXZWxsLCB0aGUgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgY29uZGVtbnMgYXMgaWxsZWdhbCBhY3RzIGRvbmUgdW5kZXIgcG9wdWxhciBnb3Zlcm5tZW50LCBleGFjdGx5IGFzIHlvdSBjb25kZW1uZWQKICAgICAgICAgICAgICAgICAgICB0aGUgYWN0cyBvZiB0aGUgdHlyYW5ueTsgb3IgYXQgbGVhc3QgaGUgbWFrZXMgdGhlbSBlcXVhbGx5IGludmFsaWQuIDwvdHJhbnNsYXRpb24+"
translation['24.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHdoYXQgYXJlIHdlIHRvIHNheSBmb3Igb3Vyc2VsdmVzLCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpZiB3ZSBhbGxvdyB0aGlzIGxhdyB0bwogICAgICAgICAgICAgICAgICAgIGJlIGNvbmZpcm1lZD8gVGhhdCBvdXIgdHJpYnVuYWxzLCBjb21wb3NlZCB1bmRlciBwb3B1bGFyIGdvdmVybm1lbnQgb2YgbWVuIHdobwogICAgICAgICAgICAgICAgICAgIGhhdmUgdGFrZW4gdGhlIGp1ZGljaWFsIG9hdGgsIGFyZSBndWlsdHkgb2YgdGhlIHNhbWUgaW5pcXVpdGllcyBhcyB0aGUgdHJpYnVuYWxzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIFRoaXJ0eSBUeXJhbnRzPyBQcmVwb3N0ZXJvdXMhIFRoYXQgdGhleSBnaXZlIHJpZ2h0ZW91cyBqdWRnZW1lbnRzPyBUaGVuCiAgICAgICAgICAgICAgICAgICAgd2hhdCByZWFzb24gY2FuIHdlIGFsbGVnZSBmb3IgZW5hY3RpbmcgYSBsYXcgdG8gcmV2ZXJzZSB0aG9zZSBqdWRnZW1lbnRzPyBVbmxlc3MKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgd2UgcGxlYWQgdGhhdCB3ZSB3ZXJlIG91dCBvZiBvdXIgbWluZHMuIFdlIGhhdmUgbm8gb3RoZXIgZXhjdXNlIHRvCiAgICAgICAgICAgICAgICAgICAgb2ZmZXIu4oCUIDwvdHJhbnNsYXRpb24+"
translation['24.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5SZWFkIGFub3RoZXIgc3RhdHV0ZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vciBzaGFsbCBpdCBiZQogICAgICAgICAgICAgICAgICAgICAgICBsYXdmdWwgdG8gcHJvcG9zZSBhIGxhdyBhcHBseWluZyB0byBhIHBhcnRpY3VsYXIgbWFuLCB1bmxlc3MgdGhlIHNhbWUgYmUKICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYWJsZSB0byBhbGwgQXRoZW5pYW4gY2l0aXplbnMsIGV4Y2VwdCBieSB0aGUgdm90ZXMgb2Ygbm90IGxlc3MgdGhhbgogICAgICAgICAgICAgICAgICAgICAgICBzaXggdGhvdXNhbmQgY2l0aXplbnMgdm90aW5nIGluIHRoZSBhZmZpcm1hdGl2ZSBieSBiYWxsb3QuPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3Igc2hhbGwgaXQgYmUKICAgICAgICAgICAgICAgICAgICAgICAgbGF3ZnVsIHRvIHByb3Bvc2UgYSBsYXcgYXBwbHlpbmcgdG8gYSBwYXJ0aWN1bGFyIG1hbiwgdW5sZXNzIHRoZSBzYW1lIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2FibGUgdG8gYWxsIEF0aGVuaWFuIGNpdGl6ZW5zLCBleGNlcHQgYnkgdGhlIHZvdGVzIG9mIG5vdCBsZXNzIHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgc2l4IHRob3VzYW5kIGNpdGl6ZW5zIHZvdGluZyBpbiB0aGUgYWZmaXJtYXRpdmUgYnkgYmFsbG90LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBmb3JiaWRzIHRoZSBpbnRyb2R1Y3Rpb24gb2YgYW55IGxhdyB0aGF0IGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgYWZmZWN0IGFsbCBjaXRpemVucyBhbGlrZSzigJRhbiBpbmp1bmN0aW9uIGNvbmNlaXZlZCBpbiB0aGUgdHJ1ZSBzcGlyaXQKICAgICAgICAgICAgICAgICAgICBvZiBkZW1vY3JhY3kuIEFzIGV2ZXJ5IG1hbiBoYXMgYW4gZXF1YWwgc2hhcmUgaW4gdGhlIGNvbnN0aXR1dGlvbiBnZW5lcmFsbHksIHNvCiAgICAgICAgICAgICAgICAgICAgdGhpcyBzdGF0dXRlIGFzc2VydHMgaGlzIGVxdWFsIHNoYXJlIGluIHRoZSBsYXdzLiBZb3Uga25vdyBhcyB3ZWxsIGFzIEkgZG8gZm9yCiAgICAgICAgICAgICAgICAgICAgd2hvc2Ugc2FrZSBUaW1vY3JhdGVzIGludHJvZHVjZWQgaGlzIGxhdzsgYnV0LCBsZWF2aW5nIHRob3NlIG5hbWVzIG91dCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbiwgd2UgaGF2ZSBoaXMgb3duIGFkbWlzc2lvbiB0aGF0IGhpcyBsYXcgaXMgbm90IG9mIHVuaXZlcnNhbAogICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uLCBmb3IgaGUgYWRkZWQgYSBjbGF1c2UgZXhjZXB0aW5nIGZyb20gaXRzIG9wZXJhdGlvbiB0YXgtZmFybWVycywKICAgICAgICAgICAgICAgICAgICBsZXNzZWVzLCBhbmQgdGhlaXIgc3VyZXRpZXMu4oCUV2hlbiwgc2lyLCB0aGVyZSBhcmUgY2VydGFpbiBwZXJzb25zIHdob20KICAgICAgICAgICAgICAgICAgICB5b3UgaGF2ZSBwdXQgb3V0c2lkZSB5b3VyIGxhdywgeW91IGNhbm5vdCBjbGFpbSB0aGF0IHlvdSBoYXZlIG1hZGUgdGhlIHNhbWUgbGF3CiAgICAgICAgICAgICAgICAgICAgZm9yIGFsbCBhbGlrZS4gPC90cmFuc2xhdGlvbj4="
translation['24.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlcmUgaXMgYW5vdGhlciB0aGluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgeW91IGNhbm5vdCBzYXks4oCUIHRoYXQgb2YgYWxsIHBlcnNvbnMgcHVuaXNoZWQgYnkgaW1wcmlzb25tZW50IHRheAogICAgICAgICAgICAgICAgICAgIGZhcm1lcnMgYXJlIHRoZSBncmVhdGVzdCBvZmZlbmRlcnMgYW5kIGRvIHVzIHRoZSBncmF2ZXN0IHdyb25nLCBhbmQgdGhhdCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgd2h5IHlvdSBkbyBub3QgZ2l2ZSB0aGVtIHRoZSBiZW5lZml0IG9mIHlvdXIgbGF3LiBTdXJlbHkgbWVuIHdobyBhcmUgdHJhaXRvcnMgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgY29tbW9ud2VhbHRoLCBtZW4gd2hvIG1hbHRyZWF0IHRoZWlyIG93biBwYXJlbnRzLCBtZW4gd2hvIGVudGVyIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcmtldC1wbGFjZSB3aXRoIHVuY2xlYW4gaGFuZHMsIG9mZmVuZCBmYXIgbW9yZSBoZWlub3VzbHk7IGFuZCBhbGwgdGhvc2UKICAgICAgICAgICAgICAgICAgICBjcmltaW5hbHMgYXJlIHRocmVhdGVuZWQgd2l0aCBpbXByaXNvbm1lbnQgYnkgdGhlIHN0YW5kaW5nIGxhd3MsIHdoaWxlIHlvdXIgbGF3CiAgICAgICAgICAgICAgICAgICAgb2ZmZXJzIHRoZW0gaW5zdGFudCByZWxlYXNlLiBCdXQgaGVyZSBhZ2FpbiB5b3UgcmV2ZWFsIHRoZSBtZW4gaW4gd2hvc2UgZmF2b3VyCiAgICAgICAgICAgICAgICAgICAgeW91IG1vdmVkIHlvdXIgbGF3LiBUaGV5IGdvdCBpbnRvIG91ciBkZWJ0IG5vdCBieSB0YXgtZmFybWluZywgYnV0IGJ5CiAgICAgICAgICAgICAgICAgICAgZW1iZXp6bGluZywgb3IgcmF0aGVyIGJ5IHBsdW5kZXJpbmcsIG91ciBtb25leTsgYW5kIHRoYXQsIEkgd2FycmFudCB5b3UsIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHRydWUgcmVhc29uIHdoeSB5b3UgaGFkIG5vIGNvbnNpZGVyYXRpb24gZm9yIHRoZSB0YXgtZmFybWVycy4gPC90cmFuc2xhdGlvbj4="
translation['24.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWFueSBvdGhlciBleGNlbGxlbnQgc3RhdHV0ZXMKICAgICAgICAgICAgICAgICAgICBtaWdodCBiZSBjaXRlZCwgYWxsIGNvbnRyYWRpY3RlZCBieSB0aGUgbGF3IGhlIGhhcyBwcm9wb3NlZC4gSG93ZXZlciwgaWYgSQogICAgICAgICAgICAgICAgICAgIGRpc2N1c3MgZXZlcnkgb25lIG9mIHRoZW0sIEkgc2hhbGwsIHBlcmhhcHMsIGJlIHJvYmJlZCBvZiBteSBjaGFuY2Ugb2YgYXJndWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIGxhdyBpcyBhbHRvZ2V0aGVyIGRpc2FkdmFudGFnZW91cyB0byB0aGUgY2l0aXplbnMuIE9uIHRoZSBvdGhlciBoYW5kLAogICAgICAgICAgICAgICAgICAgIGV2ZW4gaWYgaXQgaXMgcmVwdWduYW50IHRvIG9uZSBvbmx5IG9mIHRoZSBleGlzdGluZyBsYXdzLCB5b3UgY2FuIGhhdmUgbm8gZG91YnQKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IGlzIG9wZW4gdG8gdGhlIGluZGljdG1lbnQuIFdoYXQsIHRoZW4sIGlzIG15IGRlY2lzaW9uPyBUbyBwYXNzIG92ZXIgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIG90aGVyIGxhd3MsIGJ1dCB0byBkaXNjdXNzIG9uZSBsYXcgcHJvcG9zZWQgb24gYSBmb3JtZXIgb2NjYXNpb24gYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IGhpbXNlbGYsIGJlZm9yZSBJIHByb2NlZWQgdG8gdGhhdCBwYXJ0IG9mIG15IGFjY3VzYXRpb24gaW4gd2hpY2ggSQogICAgICAgICAgICAgICAgICAgIGFsbGVnZSB0aGF0IHRoZSBsYXcsIGlmIG9wZXJhdGl2ZSwgd2lsbCBiZSBtb3N0IGluanVyaW91cyB0byB0aGUgY29tbW9ud2VhbHRoLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBoYXZlIGludHJvZHVjZWQgYSBsYXcgY29udHJhcnkgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyBvZiBvdGhlcnMgaXMgYSBzZXJpb3VzIG9mZmVuY2UsIGJ1dCBvbmUgd2hpY2ggcmVxdWlyZXMgYWNjdXNhdGlvbiBieQogICAgICAgICAgICAgICAgICAgIHNvbWVvbmUgZWxzZTsgYnV0LCB3aGVuIGEgbWFuIGxlZ2lzbGF0ZXMgaW4gb3Bwb3NpdGlvbiB0byBhIGZvcm1lciBlbmFjdG1lbnQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgb3duLCBoZSBpcyByZWFsbHkgbWFraW5nIGhpbXNlbGYgaGlzIG93biBhY2N1c2VyLiBUbyBzaG93IHlvdSB0aGF0IHN1Y2ggaXMKICAgICAgICAgICAgICAgICAgICByZWFsbHkgdGhlIGNhc2UsIHRoZSBjbGVyayB3aWxsIHJlYWQgdG8geW91IHRoZSBhY3R1YWwgbGF3IHByb3Bvc2VkIGJ5IGhpbSwKICAgICAgICAgICAgICAgICAgICB3aGlsZSBJIGhvbGQgbXkgcGVhY2Uu4oCUUmVhZC4gPC90cmFuc2xhdGlvbj4="
translation['24.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk1vdmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXM6IGlmIGFueSBBdGhlbmlhbiBjaXRpemVucyBhcmUgbm93IGluIGphaWwgb3Igc2hhbGwgaGVyZWFmdGVyIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGltcHJpc29uZWQgb24gaW1wZWFjaG1lbnQgYnkgdGhlIENvdW5jaWwsIGlmIHRoZSBqdWRnZW1lbnQgYWdhaW5zdCBzdWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHByaXNvbmVycyBiZSBub3QgZGVsaXZlcmVkIHRvIHRoZSBKdWRnZXMgYnkgdGhlIFNlY3JldGFyeSBvZiB0aGUgUHJlc2lkZW5jeQogICAgICAgICAgICAgICAgICAgICAgICBpbiBwdXJzdWFuY2Ugb2YgdGhlIGxhdyBvZiBpbXBlYWNobWVudCwgYmUgaXQgZW5hY3RlZCB0aGF0IHRoZSBFbGV2ZW4gc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgYnJpbmcgdGhlbSBiZWZvcmUgdGhlIENvdXJ0IHdpdGhpbiB0aGlydHkgZGF5cyBvZiB0aGUgZGF5IG9uIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZSB0aGVtIGludG8gY3VzdG9keSwgdW5sZXNzIHByZXZlbnRlZCBieSBwdWJsaWMgYnVzaW5lc3MsIGFuZCwgaWYgc28KICAgICAgICAgICAgICAgICAgICAgICAgcHJldmVudGVkLCBhcyBzb29uIGFzIHBvc3NpYmxlLiBBbnkgQXRoZW5pYW4gcXVhbGlmaWVkIGFzIGEgcHJvc2VjdXRvciBtYXkKICAgICAgICAgICAgICAgICAgICAgICAgcHJvc2VjdXRlLiBJZiB0aGUgY3VscHJpdCBiZSBjb252aWN0ZWQsIHRoZSBDb3VydCBvZiBIZWxpYWVhIHNoYWxsIGFzc2VzcwogICAgICAgICAgICAgICAgICAgICAgICBzdWNoIHBlbmFsdHksIHBlY3VuaWFyeSBvciBvdGhlcndpc2UsIGFzIGhlIGFwcGVhcnMgdG8gZGVzZXJ2ZS4gSWYgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHBlbmFsdHkgYXNzZXNzZWQgYmUgcGVjdW5pYXJ5LCBoZSBzaGFsbCBiZSBpbXByaXNvbmVkIHVudGlsIGhlIGhhcyBwYWlkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBmdWxsIGFtb3VudCBvZiB0aGUgZmluZSBpbmZsaWN0ZWQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Nb3ZlZCBieQogICAgICAgICAgICAgICAgICAgICAgICBUaW1vY3JhdGVzOiBpZiBhbnkgQXRoZW5pYW4gY2l0aXplbnMgYXJlIG5vdyBpbiBqYWlsIG9yIHNoYWxsIGhlcmVhZnRlciBiZQogICAgICAgICAgICAgICAgICAgICAgICBpbXByaXNvbmVkIG9uIGltcGVhY2htZW50IGJ5IHRoZSBDb3VuY2lsLCBpZiB0aGUganVkZ2VtZW50IGFnYWluc3Qgc3VjaAogICAgICAgICAgICAgICAgICAgICAgICBwcmlzb25lcnMgYmUgbm90IGRlbGl2ZXJlZCB0byB0aGUgSnVkZ2VzIGJ5IHRoZSBTZWNyZXRhcnkgb2YgdGhlIFByZXNpZGVuY3kKICAgICAgICAgICAgICAgICAgICAgICAgaW4gcHVyc3VhbmNlIG9mIHRoZSBsYXcgb2YgaW1wZWFjaG1lbnQsIGJlIGl0IGVuYWN0ZWQgdGhhdCB0aGUgRWxldmVuIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGJyaW5nIHRoZW0gYmVmb3JlIHRoZSBDb3VydCB3aXRoaW4gdGhpcnR5IGRheXMgb2YgdGhlIGRheSBvbiB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VpdmUgdGhlbSBpbnRvIGN1c3RvZHksIHVubGVzcyBwcmV2ZW50ZWQgYnkgcHVibGljIGJ1c2luZXNzLCBhbmQsIGlmIHNvCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCwgYXMgc29vbiBhcyBwb3NzaWJsZS4gQW55IEF0aGVuaWFuIHF1YWxpZmllZCBhcyBhIHByb3NlY3V0b3IgbWF5CiAgICAgICAgICAgICAgICAgICAgICAgIHByb3NlY3V0ZS4gSWYgdGhlIGN1bHByaXQgYmUgY29udmljdGVkLCB0aGUgQ291cnQgb2YgSGVsaWFlYSBzaGFsbCBhc3Nlc3MKICAgICAgICAgICAgICAgICAgICAgICAgc3VjaCBwZW5hbHR5LCBwZWN1bmlhcnkgb3Igb3RoZXJ3aXNlLCBhcyBoZSBhcHBlYXJzIHRvIGRlc2VydmUuIElmIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwZW5hbHR5IGFzc2Vzc2VkIGJlIHBlY3VuaWFyeSwgaGUgc2hhbGwgYmUgaW1wcmlzb25lZCB1bnRpbCBoZSBoYXMgcGFpZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZnVsbCBhbW91bnQgb2YgdGhlIGZpbmUgaW5mbGljdGVkLjwvdHJhbnNsYXRpb24+"
translation['24.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhlYXIgdGhhdCwKICAgICAgICAgICAgICAgICAgICBnZW50bGVtZW4gb2YgdGhlIGp1cnk/4oCUUmVhZCB0aG9zZSB3b3JkcyBhZ2Fpbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIHRoZSBwZW5hbHR5CiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2Vzc2VkIGJlIHBlY3VuaWFyeSBoZSBzaGFsbCBiZSBpbXByaXNvbmVkIHVudGlsIGhlIGhhcyBwYWlkIHRoZSBmdWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudOKAlDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgdGhlIHBlbmFsdHkKICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXNzZWQgYmUgcGVjdW5pYXJ5IGhlIHNoYWxsIGJlIGltcHJpc29uZWQgdW50aWwgaGUgaGFzIHBhaWQgdGhlIGZ1bGwKICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW504oCUPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgd2lsbAogICAgICAgICAgICAgICAgICAgIGRvLuKAlENvdWxkIGEgbWFuIHBvc3NpYmx5IHByb3Bvc2UgdHdvIG1vcmUgY29udHJhZGljdG9yeSBlbmFjdG1lbnRzCiAgICAgICAgICAgICAgICAgICAgdGhhbiB0aGVzZSzigJR0aGF0IGNvbnZpY3RlZCBtYWxlZmFjdG9ycyBzaGFsbCBiZSBrZXB0IGluIGphaWwgdW50aWwKICAgICAgICAgICAgICAgICAgICB0aGV5IGhhdmUgcGFpZCB0aGVpciBmaW5lcywgYW5kIHRoYXQgdGhlc2Ugc2FtZSBtYWxlZmFjdG9ycyBtYXkgcHV0IGluIHN1cmV0aWVzLAogICAgICAgICAgICAgICAgICAgIGJ1dCBtdXN0IG5vdCBiZSBpbXByaXNvbmVkLiBIZXJlLCB0aGVuLCBpcyBhbiBhY2N1c2F0aW9uIGJyb3VnaHQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXMgYnkgVGltb2NyYXRlcywgbm90IGJ5IERpb2RvcnVzIG5vciBieSBhbnkgb3RoZXIgb2YgdGhlIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgbXVsdGl0dWRlIG9mIGNpdGl6ZW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgZnJvbSB3aGF0IGdhaW4gZG8KICAgICAgICAgICAgICAgICAgICB5b3UgdGhpbmsgdGhhdCBzdWNoIGEgbWFuIHdvdWxkIHJlc3RyYWluIGhpcyBoYW5kLCBvciB3aGF0IHdvdWxkIGhlIGhlc2l0YXRlIHRvCiAgICAgICAgICAgICAgICAgICAgZG8gZm9yIGx1Y3JlJ3Mgc2FrZSwgd2hlbiBoZSBkaWQgbm90IGRpc2RhaW4gdG8gbGVnaXNsYXRlIGluIGNvbnRyYWRpY3Rpb24gb2YKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmLCB0aG91Z2ggdGhlIGxhd3MgZm9yYmlkIGNvbnRyYWRpY3Rpb24gZXZlbiBvZiBvdGhlcnM/IEl0IHNlZW1zIHRvIG1lCiAgICAgICAgICAgICAgICAgICAgdGhhdCwgc28gZmFyIGFzIGVmZnJvbnRlcnkgZ29lcywgc3VjaCBhIG1hbiBpcyByZWFkeSB0byBkbyBhbnl0aGluZy4gSW5hc211Y2gsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBhcyB0aGUgbGF3cyBwcm92aWRlIHRoYXQgZXZpbCBkb2VycyBvZiBvdGhlciBraW5kcyBzaGFsbCB1cG9uCiAgICAgICAgICAgICAgICAgICAgY29uZmVzc2lvbiBiZSBwdW5pc2hlZCB3aXRob3V0IHRyaWFsLCB5b3UsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGhhdmUgYSByaWdodCB0byBnaXZlIHlvdXIgdmVyZGljdAogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhpcyBtYW4gd2l0aG91dCBhbGxvd2luZyBoaW0gdG8gc3BlYWsgb3IgZ2l2aW5nIGhpbSBhIGhlYXJpbmcsIG5vdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaGFzIGJlZW4gY2F1Z2h0IGluIHRoZSBhY3Qgb2YgbWFsdHJlYXRpbmcgdGhlIGxhd3M7IGZvciBieSBwcm9wb3NpbmcgdGhpcyBsYXcKICAgICAgICAgICAgICAgICAgICBpbiBjb250cmF2ZW50aW9uIG9mIHRoZSBmb3JtZXIgbGF3LCBoZSBoYXMgcGxlYWRlZCBndWlsdHkuIDwvdHJhbnNsYXRpb24+"
translation['24.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGUgbGF3IGhlIGhhcyBwcm9wb3NlZAogICAgICAgICAgICAgICAgICAgIGlzIGNvbnRyYXJ5IHRvIHRoZSBzdGF0dXRlcyBqdXN0IHJlYWQsIHRvIHRob3NlIHdoaWNoIEkgY2l0ZWQgYmVmb3JlLCBhbmQsIEkgbWF5CiAgICAgICAgICAgICAgICAgICAgYWxtb3N0IHNheSwgdG8gZXZlcnkgbGF3IGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICBpcyBub3csIEkgc3VwcG9zZSwgbWFuaWZlc3QgdG8gZXZlcnkgb25lIG9mIHlvdS4gSSByZWFsbHkgd29uZGVyIHdoYXQgaGUgd2lsbAogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhlIGZhY2UgdG8gc2F5IGFib3V0IHRob3NlIHN0YXR1dGVzLiBIZSBjYW5ub3Qgc2hvdyB0aGF0IGhpcyBsYXcgZG9lcyBub3QKICAgICAgICAgICAgICAgICAgICBjb250cmFkaWN0IHRoZSBvdGhlcnM7IGFuZCBoZSB3aWxsIG5vdCBiZSBhYmxlIHRvIGNvbnZpbmNlIHlvdSB0aGF0IGhlIGlzIGEKICAgICAgICAgICAgICAgICAgICBzaW1wbGUgbGF5bWFuIHdobyBkaWQgbm90IGtub3cgd2hhdCBoZSB3YXMgZG9pbmcgdGhyb3VnaCBsYWNrIG9mIGV4cGVyaWVuY2UsCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBmb3IgYSBsb25nIHRpbWUgcGFzdCBoZSBoYXMgYmVlbiBjZWxlYnJhdGVkIGZvciBjb21wb3NpbmcgYW5kCiAgICAgICAgICAgICAgICAgICAgaW50cm9kdWNpbmcgbGF3cyBhdCBzbyBtdWNoIGFwaWVjZS4gTW9yZW92ZXIsIHRoZXJlIGlzIGFub3RoZXIgY291cnNlIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICBub3Qgb3BlbiB0byBoaW06IDwvdHJhbnNsYXRpb24+"
translation['24.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5oZSBjYW5ub3QgYWRtaXQgdGhhdCBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBkb25lIHdyb25nIGFuZCB0aGVuIHBsZWFkIHRoYXQgaGUgZGVzZXJ2ZXMgZm9yZ2l2ZW5lc3M7IGZvciBpdCBpcyBxdWl0ZSBjbGVhcgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgZGlkIG5vdCBwcm9wb3NlIGhpcyBsYXcgdW53aWxsaW5nbHksIG9yIHRvIGhlbHAgdGhlIGRpc3RyZXNzZWQsIG9yIGhpcwogICAgICAgICAgICAgICAgICAgIG93biBmYW1pbHksIG9yIHBlb3BsZSB3aG8gaGF2ZSBhIGNsYWltIHVwb24gaGltLiBIZSBkaWQgaXQgYnkgaW50ZW50aW9uLCBvbgogICAgICAgICAgICAgICAgICAgIGJlaGFsZiBvZiBtZW4gd2hvIGhhdmUgZG9uZSB5b3UgYSBncmF2ZSBpbmp1cnksIGFuZCB3aG8gYXJlIGluIG5vIHdheSByZWxhdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgaGltLOKAlHVubGVzcyBoZSBwcmV0ZW5kcyB0aGF0IHBheW1lbnQgb2Ygd2FnZXMgaXMgYSBib25kIG9mIGtpbnNoaXAuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aWxsIG5vdwogICAgICAgICAgICAgICAgICAgIGRvIG15IGJlc3QgdG8gcHJvdmUgdGhhdCB0aGUgbGF3IGhlIGludHJvZHVjZWQgaXMgdW5hY2NlcHRhYmxlIGFuZAogICAgICAgICAgICAgICAgICAgIGRpc2FkdmFudGFnZW91cyB0byB0aGUgY2l0aXplbnMuIEkgcHJlc3VtZSB0aGF0IHlvdSB3aWxsIGFsbCBhZ3JlZSB3aXRoIG1lIHRoYXQKICAgICAgICAgICAgICAgICAgICBhIHJlYWxseSB3aG9sZXNvbWUgbGF3LCBzdWNoIGFzIGlzIGNhbGN1bGF0ZWQgdG8gYmVuZWZpdCB0aGUgcGVvcGxlLCBvdWdodCwgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgZmlyc3QgcGxhY2UsIHRvIGJlIGRyYXduIHNpbXBseSBhbmQgaW50ZWxsaWdpYmx5LCBub3QgaW4gc3VjaCB0ZXJtcyB0aGF0IG9uZQogICAgICAgICAgICAgICAgICAgIG1hbiB0aGlua3MgaXQgbWVhbnMgdGhpcyBhbmQgYW5vdGhlciB0aGF0OyBhbmQsIHNlY29uZGx5LCB0aGF0IHRoZSBwcm9jZWVkaW5ncwogICAgICAgICAgICAgICAgICAgIHByZXNjcmliZWQgYnkgdGhlIGxhdyBvdWdodCB0byBiZSBwcmFjdGljYWJsZSwgZm9yIGlmIGEgbGF3LCB0aG91Z2ggd2VsbC1tZWFudCwKICAgICAgICAgICAgICAgICAgICB3ZXJlIHRvIGVuam9pbiB3aGF0IGlzIGltcG9zc2libGUsIGl0IHdvdWxkIGJlIGF0dGVtcHRpbmcgdGhlIHdvcmsgbm90IG9mIGEgbGF3LAogICAgICAgICAgICAgICAgICAgIGJ1dCBvZiBhIHByYXllci4gPC90cmFuc2xhdGlvbj4="
translation['24.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaXQgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgcGxhaW5seSBhcHBlYXIgdGhhdCBpdCBkb2VzIG5vdCBvZmZlciBhbiBlYXN5IHRpbWUgdG8gYW55IHdyb25nZG9lci4gRm9yIGlmCiAgICAgICAgICAgICAgICAgICAgYW55b25lIHN1cHBvc2VzIHRoYXQgaW5kdWxnZW50IGxhd3MgYXJlIHRoZSBtYXJrIG9mIHBvcHVsYXIgZ292ZXJubWVudCwgbGV0IGhpbQogICAgICAgICAgICAgICAgICAgIGFzayB0aGlzIGZ1cnRoZXIgcXVlc3Rpb246IHRvIHdob20gYXJlIHRoZXkgdG8gYmUgaW5kdWxnZW50PyBJZiBoZSB3aWxsIGxvb2sgYXQKICAgICAgICAgICAgICAgICAgICB0aGUgbWF0dGVyIHJpZ2h0bHksIGhlIHdpbGwgZmluZCB0aGF0IHRoZSBhbnN3ZXIgaXMsIHRvIHBlcnNvbnMgd2hvIGFyZSBnb2luZyB0bwogICAgICAgICAgICAgICAgICAgIGJlIHRyaWVkLCBub3QgdG8gcGVyc29ucyBhbHJlYWR5IGNvbnZpY3RlZC4gRm9yIG9mIHRoZSBmb3JtZXIgd2UgbWF5IHNheSB0aGF0IGl0CiAgICAgICAgICAgICAgICAgICAgaXMgc3RpbGwgdW5jZXJ0YWluIHdoZXRoZXIgdGhleSBoYXZlIGJlZW4gdW5qdXN0bHkgY2FsdW1uaWF0ZWQ7IGJ1dCB0aGUgbGF0dGVyCiAgICAgICAgICAgICAgICAgICAgY2FuIG5vIGxvbmdlciBwbGVhZCB0aGF0IHRoZXkgYXJlIG5vdCBldmlsLWRvZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaXQgc2hhbGwgYmUgbWFkZSBjbGVhciB0aGF0IHRoZSBsYXcgYmVmb3JlIHVzIGV4aGliaXRzCiAgICAgICAgICAgICAgICAgICAgbm9uZSBvZiB0aGUgdHJhaXRzIEkgaGF2ZSBlbnVtZXJhdGVkLCBidXQgdGhlIHZlcnkgb3Bwb3NpdGUsIHRha2luZyB0aGVtIG9uZSBieQogICAgICAgICAgICAgICAgICAgIG9uZS4gVGhlcmUgYXJlIG1hbnkgd2F5cyBpbiB3aGljaCBJIG1pZ2h0IG1ha2UgZ29vZCB0aGF0IHN0YXRlbWVudDsgdGhlIGJlc3QKICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIHRvIGdvIHRocm91Z2ggdGhlIGxhdyBpdHNlbGYsIHBocmFzZSBieSBwaHJhc2UuIEl0IGlzIG5vdCBhIGxhdwogICAgICAgICAgICAgICAgICAgIHdlbGwtY29uY2VpdmVkIGluIHBhcnRzLCBhbmQgZGVmZWN0aXZlIGluIHBhcnRzOyBmcm9tIGJlZ2lubmluZyB0byBlbmQsIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3Qgc3lsbGFibGUgdG8gdGhlIGxhc3QsIGl0IGlzIGVuYWN0ZWQgdG8geW91ciBkZXRyaW1lbnQu4oCUCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2xlcmsgc2hhbGwgdGFrZSB0aGUgYWN0dWFsCiAgICAgICAgICAgICAgICAgICAgbWFudXNjcmlwdCwgYW5kIHJlYWQgdGhlIGxhdyB0byB0aGUganVyeSBhcyBmYXIgYXMgdGhlIGVuZCBvZiB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBzZWN0aW9uLuKAlFRoYXQgaXMgdGhlIGVhc2llc3Qgd2F5IGZvciBtZSB0byBleHBsYWluLCBhbmQgZm9yIHlvdSB0bwogICAgICAgICAgICAgICAgICAgIGFwcHJlaGVuZCwgd2hhdCBJIG1lYW4uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3IG9mIFRpbW9jcmF0ZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGltb2NyYXRlczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkR1cmluZyB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2lkZW5jeSwgbmFtZWx5LCB0aGF0IG9mIHRoZSBQYW5kaW9uaWQgVHJpYmUsIG9uIHRoZSB0d2VsZnRoIGRheSBvZiB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNpZGVuY3ksIHRoZSBxdWVzdGlvbiB3YXMgcHV0IGJ5IEFyaXN0b2NsZXMgb2YgTXlycmhpbnVzLCBvbmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIENvbW1pc3Npb25lcnM6IG1vdmVkIGJ5IFRpbW9jcmF0ZXMsIHRoYXQgaWYgdGhlIGFkZGl0aW9uYWwgcGVuYWx0eSBvZgogICAgICAgICAgICAgICAgICAgICAgICBpbXByaXNvbm1lbnQgaGFzIGJlZW4gb3Igc2hhbGwgaGVyZWFmdGVyIGJlIGluZmxpY3RlZCBpbiBwdXJzdWFuY2Ugb2YgYW55CiAgICAgICAgICAgICAgICAgICAgICAgIGxhdyBvciBkZWNyZWUgdXBvbiBhbnkgcGVyc29uIGluIGRlYnQgdG8gdGhlIHRyZWFzdXJ5LCBpdCBzaGFsbCBiZSBjb21wZXRlbnQKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGhpbSBvciBmb3IgYW55IHBlcnNvbiBvbiBoaXMgYmVoYWxmIHRvIG5vbWluYXRlIGFzIHN1cmV0aWVzIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGVidOKAlDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3IG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1vY3JhdGVzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RHVyaW5nIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgICAgICBwcmVzaWRlbmN5LCBuYW1lbHksIHRoYXQgb2YgdGhlIFBhbmRpb25pZCBUcmliZSwgb24gdGhlIHR3ZWxmdGggZGF5IG9mIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2lkZW5jeSwgdGhlIHF1ZXN0aW9uIHdhcyBwdXQgYnkgQXJpc3RvY2xlcyBvZiBNeXJyaGludXMsIG9uZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWlzc2lvbmVyczogbW92ZWQgYnkgVGltb2NyYXRlcywgdGhhdCBpZiB0aGUgYWRkaXRpb25hbCBwZW5hbHR5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGltcHJpc29ubWVudCBoYXMgYmVlbiBvciBzaGFsbCBoZXJlYWZ0ZXIgYmUgaW5mbGljdGVkIGluIHB1cnN1YW5jZSBvZiBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgbGF3IG9yIGRlY3JlZSB1cG9uIGFueSBwZXJzb24gaW4gZGVidCB0byB0aGUgdHJlYXN1cnksIGl0IHNoYWxsIGJlIGNvbXBldGVudAogICAgICAgICAgICAgICAgICAgICAgICBmb3IgaGltIG9yIGZvciBhbnkgcGVyc29uIG9uIGhpcyBiZWhhbGYgdG8gbm9taW5hdGUgYXMgc3VyZXRpZXMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBkZWJ04oCUPC90cmFuc2xhdGlvbj4="
translation['24.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3RvcDsgeW91IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgcmVhZCBpdCBjbGF1c2UgYnkgY2xhdXNlIHByZXNlbnRseS4gVGhpcywgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBpcyB2ZXJ5IG5lYXJseQogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IHNjYW5kYWxvdXMgcHJvdmlzaW9uIG9mIHRoZSB3aG9sZSBzdGF0dXRlLiBJIGRvIG5vdCB0aGluayB0aGF0IGFueQogICAgICAgICAgICAgICAgICAgIG90aGVyIG1hbiwgd2hlbiBpbnRyb2R1Y2luZyBhIGxhdyBmb3IgdGhlIHVzZSBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLCBldmVyCiAgICAgICAgICAgICAgICAgICAgdmVudHVyZWQgdXBvbiBhbiBhdHRlbXB0IHRvIHJlc2NpbmQganVkZ2VtZW50cyBwYXNzZWQgdW5kZXIgZWFybGllciBzdGF0dXRlcy4KICAgICAgICAgICAgICAgICAgICBZZXQgdGhhdCBpcyB3aGF0IHRoZSBkZWZlbmRhbnQgVGltb2NyYXRlcyBoYXMgZG9uZSB3aXRob3V0IHNoYW1lIGFuZCBldmVuCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBjb25jZWFsbWVudCwgaW5zZXJ0aW5nIHRoZXNlIHBsYWluIHdvcmRzOiDigJxpZiB0aGUgYWRkaXRpb25hbAogICAgICAgICAgICAgICAgICAgIHBlbmFsdHkgb2YgaW1wcmlzb25tZW50IGhhcyBiZWVuIG9yIHNoYWxsIGhlcmVhZnRlciBiZSBpbmZsaWN0ZWQgaW4gcHVyc3VhbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgYW55IGxhdyBvciBkZWNyZWUgdXBvbiBhbnkgcGVyc29uIGluIGRlYnQgdG8gdGhlIHRyZWFzdXJ5LuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['24.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5JZiBoZSBoYWQgbWVyZWx5IGFkdmlzZWQgdXMgb2YgdGhlIHJpZ2h0IGNvdXJzZSBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgZnV0dXJlLCB0aGVyZSB3b3VsZCBoYXZlIGJlZW4gbm8gaGFybSBpbiBpdCBidXQsIHdoZW4gYSBjb3VydCBvZiBqdXN0aWNlIGhhcwogICAgICAgICAgICAgICAgICAgIGdpdmVuIGl0cyB2ZXJkaWN0IGFuZCBkZXRlcm1pbmVkIHRoZSBpc3N1ZSwgaXMgaXQgbm90IG91dHJhZ2VvdXMgdG8gaW50cm9kdWNlIGEKICAgICAgICAgICAgICAgICAgICBsYXcgYnkgd2hpY2ggdGhhdCB2ZXJkaWN0IGlzIHRvIGJlIHJlc2NpbmRlZD8gSXQgaXMgYXMgdGhvdWdoLCBhZnRlciBhbGxvd2luZwogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgb2YgVGltb2NyYXRlcyB0byBiZWNvbWUgb3BlcmF0aXZlLCBzb21lb25lIHNob3VsZCBkcmFmdCBhIHNlY29uZCBsYXcgdG8KICAgICAgICAgICAgICAgICAgICB0aGlzIGVmZmVjdDog4oCcaWYgYW55IHBlcnNvbnMgYmVpbmcgaW5kZWJ0ZWQsIGFuZCBoYXZpbmcgaGFkIHRoZQogICAgICAgICAgICAgICAgICAgIGZ1cnRoZXIgcGVuYWx0eSBvZiBpbXByaXNvbm1lbnQgcGFzc2VkIHVwb24gdGhlbSwgc2hhbGwgaGF2ZSBwdXQgaW4gc3VyZXRpZXMgYXMKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3IGRpcmVjdHMsIHRoZXkgc2hhbGwgbm90IGJlIGVudGl0bGVkIHRvIHN1Y2ggYmFpbCwgYW5kIGl0IHNoYWxsIG5vdCBiZQogICAgICAgICAgICAgICAgICAgIGxhd2Z1bCBoZXJlYWZ0ZXIgdG8gcmVsZWFzZSBhbnlvbmUgb24gYmFpbC7igJ0gPC90cmFuc2xhdGlvbj4="
translation['24.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz5JIHN1cHBvc2UgdGhhdCBubyBtYW4gaW4gaGlzIHNlbnNlcyB3b3VsZCBkbyBzdWNoIGEgdGhpbmc7CiAgICAgICAgICAgICAgICAgICAgYW5kIHlvdSwgc2lyLCB3ZXJlIGd1aWx0eSB3aGVuIHlvdSB0cmllZCB0byBhbm51bCB0aG9zZSBvdGhlciBwcm92aXNpb25zLiBGb3IgaWYKICAgICAgICAgICAgICAgICAgICBoZSB0aG91Z2h0IGl0IGEgZmFpciB0aGluZyB0byBkbywgaGlzIHByb3BlciBjb3Vyc2Ugd2FzIHRvIGludHJvZHVjZSBhIGxhdwogICAgICAgICAgICAgICAgICAgIGdvdmVybmluZyBmdXR1cmUgdHJhbnNhY3Rpb25zOyBub3QgdG8gbHVtcCB0b2dldGhlciBhbGwgb2ZmZW5jZXMsIHBhc3QgYW5kCiAgICAgICAgICAgICAgICAgICAgZnV0dXJlLCBwcm92ZW4gYW5kIHVucHJvdmVuLCBhbmQgdGhlbiByZWdpc3RlciBhbiBpbmRpc2NyaW1pbmF0ZSBqdWRnZW1lbnQgdXBvbgogICAgICAgICAgICAgICAgICAgIGFsbCB0b2dldGhlci4gU3VyZWx5IGl0IGlzIG91dHJhZ2VvdXMgdGhhdCBtZW4gd2hvIGhhdmUgYWxyZWFkeSBiZWVuIGNvbnZpY3RlZAogICAgICAgICAgICAgICAgICAgIG9mIG9mZmVuY2VzIGFnYWluc3QgdGhlIGNvbW1vbiB3ZWFsIHNob3VsZCBiZSBkZWVtZWQgd29ydGh5IG9mIHRoZSBzYW1lIGp1ZGljaWFsCiAgICAgICAgICAgICAgICAgICAgdHJlYXRtZW50IGFzIG1lbiBvZiB3aG9tIGl0IGlzIG5vdCB5ZXQga25vd24gd2hldGhlciB0aGV5IHdpbGwgZXZlciBkbyBhbnl0aGluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgZGVzZXJ2ZXMgcHJvc2VjdXRpb24/IDwvdHJhbnNsYXRpb24+"
translation['24.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIHdlIG1heSBkaXNjZXJuIGhvdyBtb25zdHJvdXNseSBoZSBoYXMgYWN0ZWQgaW4gbWFraW5nCiAgICAgICAgICAgICAgICAgICAgaGlzIGxhdyByZXRyb3NwZWN0aXZlLCBieSBhc2tpbmcgb3Vyc2VsdmVzIHdoYXQgaXMgdGhlIHJlYWwgZGlmZmVyZW5jZSBiZXR3ZWVuCiAgICAgICAgICAgICAgICAgICAgZ292ZXJubWVudCBieSBsYXcgYW5kIG9saWdhcmNoeTsgYW5kIHdoeSB3ZSByZWdhcmQgdGhvc2Ugd2hvIHByZWZlciB0byBsaXZlCiAgICAgICAgICAgICAgICAgICAgdW5kZXIgbGF3cyBhcyBob25lc3QsIHNvYmVyLW1pbmRlZCBwZXJzb25zLCBhbmQgdGhvc2Ugd2hvIHN1Ym1pdCB0byBvbGlnYXJjaGljYWwKICAgICAgICAgICAgICAgICAgICBydWxlIGFzIGNvd2FyZHMgYW5kIHNsYXZlcy4gPC90cmFuc2xhdGlvbj4="
translation['24.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgb3V0c3RhbmRpbmcKICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbmNlIHlvdSB3aWxsIGZpbmQgdG8gYmUgcmVhbGx5IHRoaXM6IHVuZGVyIG9saWdhcmNoaWNhbCBnb3Zlcm5tZW50CiAgICAgICAgICAgICAgICAgICAgZXZlcnlib2R5IGlzIGVudGl0bGVkIHRvIHVuZG8gdGhlIHBhc3QsIGFuZCB0byBwcmVzY3JpYmUgZnV0dXJlIHRyYW5zYWN0aW9ucwogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byBoaXMgb3duIHBsZWFzdXJlOyB3aGVyZWFzIHRoZSBsYXdzIG9mIGEgZnJlZSBzdGF0ZSBwcmVzY3JpYmUgd2hhdAogICAgICAgICAgICAgICAgICAgIHNoYWxsIGJlIGRvbmUgaW4gdGhlIGZ1dHVyZSwgc3VjaCBsYXdzIGhhdmluZyBiZWVuIGVuYWN0ZWQgYnkgY29udmluY2luZyBwZW9wbGUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgd2lsbCBiZSBiZW5lZmljaWFsIHRvIHRob3NlIHdobyBsaXZlIHVuZGVyIHRoZW0uIFRpbW9jcmF0ZXMgaG93ZXZlciwKICAgICAgICAgICAgICAgICAgICBsZWdpc2xhdGluZyBpbiBhIGRlbW9jcmF0aWNhbGx5IGdvdmVybmVkIGNpdHksIGhhcyBpbnRyb2R1Y2VkIGludG8gaGlzIGxhdyB0aGUKICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJpc3RpYyBpbmlxdWl0eSBvZiBvbGlnYXJjaHk7IGFuZCBpbiBkZWFsaW5nIHdpdGggcGFzdCB0cmFuc2FjdGlvbnMgaGFzCiAgICAgICAgICAgICAgICAgICAgcHJlc3VtZWQgdG8gY2xhaW0gZm9yIGhpbXNlbGYgYW4gYXV0aG9yaXR5IGhpZ2hlciB0aGFuIHRoYXQgb2YgdGhlIGNvbnZpY3RpbmcKICAgICAgICAgICAgICAgICAgICBqdXJ5LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm9yIGlzCiAgICAgICAgICAgICAgICAgICAgdGhpcyB0aGUgb25seSBleGFtcGxlIG9mIGhpcyBhcnJvZ2FuY2UuIEl0IGlzIGZ1cnRoZXIgZW5hY3RlZCB0aGF0IOKAnGlmCiAgICAgICAgICAgICAgICAgICAgaGVyZWFmdGVyIHRoZSBhZGRpdGlvbmFsIHBlbmFsdHkgb2YgaW1wcmlzb25tZW50IHNoYWxsIGhhdmUgYmVlbiBpbXBvc2VkLCB0aGUKICAgICAgICAgICAgICAgICAgICBwcmlzb25lciBtYXkgYmUgcmVsZWFzZWQgb24gcHJvZHVjaW5nIHN1cmV0aWVzIGZvciBwYXltZW50IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGZpbmUu4oCdIElmIGhlIHJlYWxseSB0aG91Z2h0IGltcHJpc29ubWVudCBzdWNoIGEgZHJlYWRmdWwgaW5mbGljdGlvbiwKICAgICAgICAgICAgICAgICAgICBoaXMgcHJvcGVyIGNvdXJzZSB3YXMgdG8gZW5hY3QgdGhhdCBubyBtYW4gd2hvIHByb2R1Y2VzIHN1cmV0aWVzIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgY29tbWl0dGVkIHRvIHByaXNvbjsgYnV0IG5vdCwgaGF2aW5nIGZpcnN0IGZvdW5kIHRoYXQgeW91IGhhdmUgcGFzc2VkIHNlbnRlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgaW1wcmlzb25tZW50IGFuZCBzbyBpbmN1cnJlZCB0aGUgcmVzZW50bWVudCBvZiB0aGUgY29udmljdCwgdGhlbiB0byBnaXZlIGhpbQogICAgICAgICAgICAgICAgICAgIGEgZGlzY2hhcmdlIG9uIGJhaWwuIEluIGZhY3QsIGhlIGhhcyBpbnRyb2R1Y2VkIGhpcyBsYXcgaW4gdGhpcyBmYXNoaW9uIGJ5IHdheQogICAgICAgICAgICAgICAgICAgIG9mIGFkdmVydGlzaW5nIGhpbXNlbGYgYXMgb25lIHdobyB3aWxsLCBvbiBoaXMgb3duIGF1dGhvcml0eSwgcmVsZWFzZSBwcmlzb25lcnMsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHlvdSBtYXkgaGF2ZSBkZWNpZGVkIHRvIGtlZXAgdGhlbSBpbiBqYWlsLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz5DYW4gYW55b25lIHNlZSBhbnkgcHVibGljIGFkdmFudGFnZSBpbiBhIGxhdyB0aGF0IGlzIHRvCiAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGUgdGhlIGRlY2lzaW9ucyBvZiBhIGNvdXJ0IG9mIGp1c3RpY2UsIGFuZCB0aGF0IHJlcXVpcmVzIHVuc3dvcm4gcGVyc29ucwogICAgICAgICAgICAgICAgICAgIHRvIGNhbmNlbCB0aGUganVkZ2VtZW50cyBvZiBzd29ybiBqdXJpZXMgPyBJIGhvcGUgbm90LiBJdCBpcyBjbGVhciB0aGF0IHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBvZiBUaW1vY3JhdGVzIGhhcyBib3RoIHRoZXNlIGZhdWx0czsgYW5kIGlmIHlvdSBoYXZlLCBlYWNoIG9uZSBvZiB5b3UsIGFueQogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCBmb3IgdGhlIGNvbnN0aXR1dGlvbiwgb3IgaWYgeW91IGNsYWltIGF1dGhvcml0eSBmb3IgeW91ciBvd24gZGVjaXNpb24gb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcXVlc3Rpb25zIG9uIHdoaWNoIHlvdSBnaXZlIHlvdXIgdmVyZGljdCB1bmRlciBvYXRoLCB5b3UgbXVzdCBhYnJvZ2F0ZSBhIGxhdwogICAgICAgICAgICAgICAgICAgIGxpa2UgdGhpcywgYW5kIG5vdCBwZXJtaXQgaXQgdG8gYmUgbWFkZSB2YWxpZCB0b2RheS4gPC90cmFuc2xhdGlvbj4="
translation['24.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgd2FzIG5vdCBzYXRpc2ZpZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3lpbmcgdGhlIGF1dGhvcml0eSBvZiB0aGlzIGNvdXJ0IGluIHJlc3BlY3Qgb2YgYWRkaXRpb25hbCBwZW5hbHRpZXMsIGJ1dAogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGZpbmQgdGhhdCBldmVuIHRoZSBwcm9jZWVkaW5ncyB3aGljaCBoZSBoYXMgcHJlc2NyaWJlZCBpbiBoaXMgbGF3LCBhbmQKICAgICAgICAgICAgICAgICAgICBpbXBvc2VkIHVwb24gY3VscHJpdHMgd2hvIGhhdmUgYmVlbiBjb25kZW1uZWQsIGhhdmUgbm90IGJlZW4gZHJhZnRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgaG9uZXN0eSBhbmQgc2luY2VyaXR5LCBidXQgYXMgdGhvdWdoIGhpcyBtYWluIHB1cnBvc2Ugd2FzIHRvIG1pc2xlYWQgYW5kCiAgICAgICAgICAgICAgICAgICAgb3ZlcnJlYWNoIHlvdS4gT2JzZXJ2ZSB0aGUgcGhyYXNpbmc6IOKAnE1vdmVkIGJ5IFRpbW9jcmF0ZXMgdGhhdCwgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbCBwZW5hbHR5IG9mIGltcHJpc29ubWVudCBoYXMgYmVlbiBvciBzaGFsbCBoZXJlYWZ0ZXIgYmUgaW5mbGljdGVkIGluCiAgICAgICAgICAgICAgICAgICAgcHVyc3VhbmNlIG9mIGFueSBsYXcgb3IgZGVjcmVlIHVwb24gYW55IHBlcnNvbiBpbiBkZWJ0IHRvIHRoZSB0cmVhc3VyeSwgaXQgc2hhbGwKICAgICAgICAgICAgICAgICAgICBiZSBjb21wZXRlbnQgZm9yIGhpbSBvciBmb3IgYW55IG90aGVyIHBlcnNvbiBvbiBoaXMgYmVoYWxmIHRvIG5vbWluYXRlIGFzCiAgICAgICAgICAgICAgICAgICAgc3VyZXRpZXMgZm9yIHRoZSBkZWJ0IHN1Y2ggcGVyc29ucyBhcyBzaGFsbCBiZSBhcHByb3ZlZCBvbiB2b3RlIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIEFzc2VtYmx5LuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['24.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5TZWUgd2hhdCBhIGxvbmcgc3RyaWRlIGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIHRha2VuIGZyb20gdGhlIGNvdXJ0IG9mIGp1c3RpY2UgYW5kIGl0cyBzZW50ZW5jZXMhIEV2ZW4gdG8gdGhlIEFzc2VtYmx5OyBmb3IKICAgICAgICAgICAgICAgICAgICBoZSBzdGVhbHMgdGhlIHBlcnNvbiBvZiB0aGUgY3JpbWluYWwsIGFzIHdlbGwgYXMgdGhlIHJpZ2h0IHRvIGhhbmQgaGltIG92ZXIgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgRWxldmVuLiBXaGF0IG1hZ2lzdHJhdGUgd2lsbCBldmVyIGhhbmQgb3ZlciB0aGUgZGVsaW5xdWVudD8gV2hhdCBtZW1iZXIgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgRWxldmVuIHdpbGwgZXZlciBhY2NlcHQgY3VzdG9keT8gVGhlIG9yZGVyIG9mIFRpbW9jcmF0ZXMgaXMgdGhhdCBzdXJldGllcwogICAgICAgICAgICAgICAgICAgIGFyZSB0byBiZSBub21pbmF0ZWQgaW4gdGhlIEFzc2VtYmx5OyBpdCBpcyBpbXBvc3NpYmxlIGZvciB0aGUgQXNzZW1ibHkgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIENvdXJ0cyB0byBiZSBpbiBzZXNzaW9uIG9uIHRoZSBzYW1lIGRheTsgYW5kIHRoZXJlIGlzIG5vIGluanVuY3Rpb24gdG8ga2VlcCB0aGUKICAgICAgICAgICAgICAgICAgICBtYW4gaW4gY3VzdG9keSB1bnRpbCBoZSBoYXMgbmFtZWQgaGlzIHN1cmV0aWVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgc2hvdWxkIGhlIGhhdmUgYmVlbiBhZnJhaWQgdG8gYWRkIGEgZGlzdGluY3QgaW5qdW5jdGlvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAg4oCcdGhlIG1hZ2lzdHJhdGUgc2hhbGwga2VlcCB0aGUgZGVsaW5xdWVudCBpbiBjdXN0b2R5IHVudGlsIGhlIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBwdXQgaW4gaGlzIHN1cmV0aWVz4oCdPyBJcyBub3QgdGhhdCBxdWl0ZSBmYWlyPyBJIGFtIHN1cmUgeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBhbGwgc2F5IHllcy4gV291bGQgaXQgaGF2ZSBiZWVuIGNvbnRyYXJ5IHRvIGFueSBzdGF0dXRlID8gTm8sIGluZGVlZDsgaXQgd291bGQKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gdGhlIG9ubHkgY2xhdXNlIHRoYXQgZG9lcyBjb25mb3JtIHRvIHRoZSBzdGF0dXRlcy4gVGhlbiB3aGF0IHdhcyBoaXMKICAgICAgICAgICAgICAgICAgICByZWFzb24/IFRoZXJlIGlzIG5vIGRpc2NvdmVyYWJsZSByZWFzb24gZXhjZXB0IHRoaXMs4oCUdGhhdCBoaXMgcHVycG9zZQogICAgICAgICAgICAgICAgICAgIHdhcyBub3QgdG8gaGVscCBidXQgdG8gb2JzdHJ1Y3QgdGhlIHB1bmlzaG1lbnQgb2YgY3JpbWluYWxzIGNvbmRlbW5lZCBieSB5b3UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCwgaG93CiAgICAgICAgICAgICAgICAgICAgZG9lcyBpdCBnbyBvbj8g4oCcVG8gbm9taW5hdGUgc3VyZXRpZXMgb24gYW4gdW5kZXJ0YWtpbmcgdG8gcGF5IGluIGZ1bGwKICAgICAgICAgICAgICAgICAgICB0aGUgYW1vdW50IGluIHdoaWNoIGhlIHdhcyBpbmRlYnRlZC7igJ0gSGVyZSBhZ2FpbiBoZSBoYXMgc3RvbGVuIGF3YXkKICAgICAgICAgICAgICAgICAgICB0aGUgcmlnaHQgb2YgdGhlIHNhY3JlZCBmdW5kcyB0byBhIHRlbmZvbGQgcGF5bWVudCwgYW5kIG9uZS1oYWxmIG9mIHRoZSBjbGFpbSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjaXZpbCB0cmVhc3VyeSwgaW4gY2FzZXMgd2hlcmUgZG91YmxlIHBheW1lbnQgaXMgcmVxdWlyZWQgYnkgbGF3LiBBbmQgaG93CiAgICAgICAgICAgICAgICAgICAgZG9lcyBoZSBtYW5hZ2UgdGhhdD8gQnkgd3JpdGluZyDigJx0aGUgYW1vdW504oCdIGluc3RlYWQgb2YKICAgICAgICAgICAgICAgICAgICDigJx0aGUgcGVuYWx0eSzigJ0gYW5kIOKAnGluIHdoaWNoIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGluZGVidGVk4oCdIGluc3RlYWQgb2Yg4oCcd2hpY2ggaGFzIGFjY3J1ZWQu4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGlmZmVyZW5jZSBpcyB0aGlzOiBpZiBoZSBoYWQgcHJvcG9zZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHN1cmV0aWVzIHNob3VsZCBiZSBhcHBvaW50ZWQgdG8gZ3VhcmFudGVlIHRoZSBwYXltZW50IG9mIHRoZSBhY2NydWluZwogICAgICAgICAgICAgICAgICAgIHBlbmFsdHksIGhlIHdvdWxkIGhhdmUgZW1icmFjZWQgaW4gaGlzIGVuYWN0bWVudCB0aGUgc3RhdHV0ZXMgdW5kZXIgd2hpY2gKICAgICAgICAgICAgICAgICAgICBjZXJ0YWluIGRlYnRzIGFyZSBkb3VibGVkLCBhbmQgb3RoZXJzIG11bHRpcGxpZWQgYnkgdGVuOyBhbmQgc28gdGhlIGRlYnRvciB3b3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBvYmxpZ2VkIG5vdCBvbmx5IHRvIHBheSBpbiBmdWxsIHRoZSBhbW91bnQgb2YgdGhlIGRlYnQgYXMgcmVjb3JkZWQsCiAgICAgICAgICAgICAgICAgICAgYnV0IGFsc28gdG8gbGlxdWlkYXRlIHRoZSBwZW5hbCBwYXltZW50cyBsZWdhbGx5IGFkZGVkIHRoZXJldG8uIEFzIGl0IGlzLCBieSB0aGUKICAgICAgICAgICAgICAgICAgICB3b3JkcyDigJxub21pbmF0ZSBzdXJldGllcyBvbiBhbiB1bmRlcnRha2luZyB0byBwYXkgaW4gZnVsbCB0aGUgYW1vdW50CiAgICAgICAgICAgICAgICAgICAgaW4gd2hpY2ggaGUgd2FzIGluZGVidGVkLOKAnSBoZSBtYWtlcyB0aGUgcGF5bWVudCBkZXBlbmQgb24gdGhlIHBsYWludAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgZG9jdW1lbnRzIHVwb24gd2hpY2ggdGhlIHNldmVyYWwgZGVsaW5xdWVudHMgd2VyZSBicm91Z2h0IHRvIHRyaWFsOyBhbmQKICAgICAgICAgICAgICAgICAgICBpbiB0aG9zZSBkb2N1bWVudHMgb25seSB0aGUgb3JpZ2luYWwgYW1vdW50IG9mIHRoZSBkZWJ0IGlzIHJlY29yZGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4sIGFmdGVyIG1ha2luZwogICAgICAgICAgICAgICAgICAgIHN1Y2ggYSBiaWcgaG9sZSBpbiB0aGUgbGF3cyBieSBqdWdnbGluZyB3aXRoIHdvcmRzLCBoZSBhZGRzOiDigJx0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWlzc2lvbmVyczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNC4yMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjQuMjI8L2JpYmw+IGFib3ZlLjwvbm90ZT4gYXJlIHJlcXVpcmVkIHRvIHB1dCB0aGUgcXVlc3Rpb24gd2hlbnNvZXZlcgogICAgICAgICAgICAgICAgICAgIGFueSBkZWJ0b3Igd2lzaGVzIHRvIG5vbWluYXRlIHN1cmV0aWVzLOKAnSBmb3IgcmlnaHQgdGhyb3VnaCBoaXMgbGF3IGhlCiAgICAgICAgICAgICAgICAgICAgdGhpbmtzIGl0IGhpcyBidXNpbmVzcyB0byByZXNjdWUgdGhlIGNyaW1pbmFsIHdobyBoYXMgYmVlbiBjb252aWN0ZWQgaW4gdGhpcwogICAgICAgICAgICAgICAgICAgIGNvdXJ0LiBCeSBhbGxvd2luZyB0aGUgbm9taW5hdGlvbiBvZiBzdXJldGllcyB0byB0YWtlIHBsYWNlIGF0IHRoZSBwbGVhc3VyZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBkZWxpbnF1ZW50LCBoZSBwdXRzIGl0IGludG8gaGlzIHBvd2VyIG5ldmVyIHRvIHBheSwgYW5kIG5ldmVyIHRvIGdvIHRvCiAgICAgICAgICAgICAgICAgICAgcHJpc29uLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI0LjIyIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNC4yMjwvYmlibD4gYWJvdmUuPC90cmFuc2xhdGlvbj4="
translation['24.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz5PZiBjb3Vyc2UgaGUgd2lsbCBwdXQgZm9yd2FyZCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICBzdHJhdywgYW5kIGJ5IHRoZSB0aW1lIHlvdSBoYXZlIHJlamVjdGVkIHRoZW0sIGhlIHdpbGwgYmUgb3V0IG9mIHlvdXIgcmVhY2guIEZvcgogICAgICAgICAgICAgICAgICAgIGlmIGFueW9uZSBkZW1hbmRzIGhpcyByZXRlbnRpb24gaW4gamFpbCBmb3IgZmFpbGluZyB0byBwcm9kdWNlIHN1cmV0aWVzLCBoZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgcmVwbHkgdGhhdCBoZSBoYXMgZG9uZSBzbywgYW5kIGludGVuZHMgdG8gZG8gc287IGFuZCB0aGVuIGhlIHdpbGwgcG9pbnQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdHV0ZSBvZiBUaW1vY3JhdGVzLCB3aGljaCBiaWRzIGhpbSBub21pbmF0ZSBzdXJldGllcyB3aGVuZXZlciBoZSBsaWtlcywgYnV0CiAgICAgICAgICAgICAgICAgICAgc2F5cyBub3RoaW5nIGFib3V0IGN1c3RvZHkgaW4gdGhlIG1lYW50aW1lLCB3aGljaCBnaXZlcyBubyBpbnN0cnVjdGlvbiBmb3IKICAgICAgICAgICAgICAgICAgICBpbXByaXNvbm1lbnQgaW4gY2FzZSB5b3UgcmVqZWN0IHRoZSBzdXJldGllcywgd2hpY2ggaXMsIGluIHNob3J0LCBhIHNvcnQgb2YKICAgICAgICAgICAgICAgICAgICB1bml2ZXJzYWwgdGFsaXNtYW4gZm9yIHdvdWxkLWJlIGV2aWwtZG9lcnMuIDwvdHJhbnNsYXRpb24+"
translation['24.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcVGhlIGRlYnRvciB3aG8gaGFzIGdpdmVuCiAgICAgICAgICAgICAgICAgICAgc3VyZXRpZXMs4oCdIGhlIGdvZXMgb24sIOKAnHNoYWxsIGJlIHJlbGVhc2VkIGZyb20gdGhlIHBlbmFsdHkKICAgICAgICAgICAgICAgICAgICBvZiBpbXByaXNvbm1lbnQgb24gcGF5bWVudCB0byB0aGUgU3RhdGUgb2YgdGhlIG1vbmV5IGluIHJlc3BlY3Qgb2Ygd2hpY2ggaGUgZ2F2ZQogICAgICAgICAgICAgICAgICAgIHN1cmV0aWVzLuKAnSBIZXJlIGFnYWluIGhlIHBlcnNpc3RlZCBpbiB0aGUgdHJpY2sgSSBtZW50aW9uZWQganVzdCBub3c7CiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIG5vdCBmb3Jnb3R0ZW4gaXQ7IGhlIGVuYWN0ZWQgdGhhdCB0aGUgbWFuIHNoYWxsIGJlIHJlbGVhc2VkIGZyb20gcHJpc29uCiAgICAgICAgICAgICAgICAgICAgb24gcGF5bWVudCwgbm90IG9mIHRoZSBhY2NydWluZyBwZW5hbHR5LCBidXQgb2YgdGhlIG9yaWdpbmFsIGRlYnQuIDwvdHJhbnNsYXRpb24+"
translation['24.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcQnV0IGlmIGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHRpbWUgb2YgdGhlIG5pbnRoIHByZXNpZGVuY3kgbmVpdGhlciBoZSBub3IgaGlzIHN1cmV0aWVzIHNoYWxsIGhhdmUgcGFpZCBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBtb25leSwgdGhlIG1hbiB3aG8gZ2F2ZSBzdXJldGllcyBzaGFsbCBiZSBpbXByaXNvbmVkLCBhbmQgdGhlIHByb3BlcnR5IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1cmV0aWVzIHNoYWxsIGJlIGNvbmZpc2NhdGVkLuKAnSBJbiB0aGlzIGZpbmFsIGNsYXVzZSwgeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBmaW5kLCBoZSBoYXMgYXQgbGFzdCBiZWNvbWUgdGhlIGFjY3VzZXIgb2YgaGlzIG93biBpbmlxdWl0aWVzIGluIHRoZSBmdWxsZXN0CiAgICAgICAgICAgICAgICAgICAgc2Vuc2UuIEhlIGRpZCBub3QgZm9yYmlkIGltcHJpc29ubWVudCBvbiB0aGUgYnJvYWQgZ3JvdW5kIHRoYXQgdG8gaW1wcmlzb24gYQogICAgICAgICAgICAgICAgICAgIGZyZWUgY2l0aXplbiBpcyBzb21ldGhpbmcgc2hhbWVmdWwgb3IgdGVycmlibGU7IGJ1dCBoZSBzdG9sZSBmcm9tIHlvdSB5b3VyCiAgICAgICAgICAgICAgICAgICAgY2hhbmNlIG9mIGNhdGNoaW5nIHlvdXIgY3JpbWluYWwgaW4gdGhlIHBsYWNlIHdoZXJlIGhlIGlzLCBhbmQgc28gaGUgbGVmdCB0bwogICAgICAgICAgICAgICAgICAgIHlvdSwgd2hvIGFyZSB0aGUgcGFydHkgYWdncmlldmVkLCB0aGUgZW1wdHkgbmFtZSBvZiByZXRyaWJ1dGlvbiwgYnV0IHJvYmJlZCB5b3UKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcmVhbGl0eS4gV2l0aG91dCB5b3VyIGNvbnNlbnQgaGUgZ2F2ZSBhIGRpc2NoYXJnZSB0byBwZW9wbGUgd2hvIGZvcmNpYmx5CiAgICAgICAgICAgICAgICAgICAgYXBwcm9wcmlhdGUgeW91ciBtb25leTsgYW5kIGhlIHdhcyB3aXRoaW4gYW4gYWNlIG9mIGFkZGluZyBhIGNsYXVzZSBlbmFibGluZyBhbgogICAgICAgICAgICAgICAgICAgIGFjdGlvbiBhdCBsYXcgYWdhaW5zdCB0aGUganVyaWVzIHRoYXQgaGFkIGltcG9zZWQgdGhlIHBlbmFsdHkgb2YgaW1wcmlzb25tZW50LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IG9mIGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBvYmplY3Rpb25hYmxlIGVuYWN0bWVudHMgb2YgaGlzIGxhdywgdGhhdCBvZiB3aGljaCBJIHdpbGwgbm93IHNwZWFrIGRlc2VydmVzCiAgICAgICAgICAgICAgICAgICAgb3VyIG1vc3QgdmVoZW1lbnQgaW5kaWduYXRpb24uIEZyb20gYmVnaW5uaW5nIHRvIGVuZCBpdCBpcyBhZGRyZXNzZWQgdG8KICAgICAgICAgICAgICAgICAgICBkZWxpbnF1ZW50cyB3aG8gcHV0IGluIHN1cmV0aWVzOyBidXQgdGhlcmUgaXMgbmVpdGhlciBwcm9zZWN1dGlvbiBub3IgcGVuYWx0eQogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgbWFuIHdobyBvZmZlcnMgbm8gc3VyZXRpZXMsIGdvb2Qgb3IgYmFkLCBidXQgc2ltcGx5IGRlZmllcyB5b3UuIEZvciB0aGF0CiAgICAgICAgICAgICAgICAgICAgbWFuIGhlIGhhcyBwcm92aWRlZCB0aGUgZnVsbGVzdCBpbWFnaW5hYmxlIGltcHVuaXR5LiBUaGUgZGF5cyBvZiBncmFjZSwgZGVmaW5lZAogICAgICAgICAgICAgICAgICAgIGFzIGV4dGVuZGluZyB0byB0aGUgbmludGggcHJlc2lkZW5jeSwgaGUgb2ZmZXJzIHRvIHRoZSBtYW4gd2hvIGhhcyBwdXQgaW4gYmFpbC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Ugd2lsbCBzZWUgdGhlIHBvaW50IGJ5IG9ic2VydmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgYWRkcyBhIGNsYXVzZSB0byB0aGUgZWZmZWN0IHRoYXQgdGhlIHByb3BlcnR5IG9mIHRoZSBzdXJldGllcyBzaGFsbCBiZQogICAgICAgICAgICAgICAgICAgIGNvbmZpc2NhdGVkLCBpZiB0aGV5IGRvIG5vdCBwYXkgdGhlIGRlYnQgaW4gZnVsbC4gWWVzLCBidXQgc3VwcG9zZSBhIG1hbiBoYXMgbm90CiAgICAgICAgICAgICAgICAgICAgbmFtZWQgYW55IHN1cmV0aWVzLOKAlHRoZW4gb2YgY291cnNlIHRoZXJlIGFyZSBubyBzdXJldGllcyB0byBwdW5pc2guIEhlCiAgICAgICAgICAgICAgICAgICAgY29tcGVscyB0aGUgQ29tbWlzc2lvbmVycywgbWVuIGNob3NlbiBmb3IgdGhhdCBvZmZpY2UgYnkgbG90IGZyb20gdGhlIHJhbmtzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNpdGl6ZW5zLCB0byBhY2NlcHQgc3VyZXRpZXMgd2hlbmV2ZXIgbmFtZWQ7IGJ1dCBvbiBtZW4gd2hvIGRlZnJhdWQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9ud2VhbHRoIGhlIGltcG9zZXMgbm8gc29ydCBvZiBjb21wdWxzaW9uLOKAlGhlIHRyZWF0cyB0aGVtIGFzCiAgICAgICAgICAgICAgICAgICAgYmVuZWZhY3RvcnMsIGFuZCBnaXZlcyB0aGVtIHRoZSByaWdodCB0byBjaG9vc2Ugd2hldGhlciB0aGV5IHdpbGwgYmUgcHVuaXNoZWQgb3IKICAgICAgICAgICAgICAgICAgICBub3QuIDwvdHJhbnNsYXRpb24+"
translation['24.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q291bGQgYW55CiAgICAgICAgICAgICAgICAgICAgY29uY2VpdmFibGUgc3RhdHV0ZSBiZSBtb3JlIHVuc291bmQgb3IgbW9yZSBvcHBvc2VkIHRvIHlvdXIgaW50ZXJlc3RzPyBGaXJzdCwgaXQKICAgICAgICAgICAgICAgICAgICBlbmpvaW5zIHRoZSByZXZlcnNhbCBvZiB5b3VyIGp1ZGdlbWVudHMgaW4gY2FzZXMgbG9uZyBhZ28gZGVjaWRlZDsgYW5kIHNlY29uZGx5LAogICAgICAgICAgICAgICAgICAgIGluIGNhc2VzIHN0aWxsIHRvIGJlIHRyaWVkLCB3aGlsZSBpbnN0cnVjdGluZyBzd29ybiBqdXJvcnMgdG8gaW5mbGljdCBwZW5hbHRpZXMsCiAgICAgICAgICAgICAgICAgICAgaXQgbWFrZXMgdGhvc2UgcGVuYWx0aWVzIGlub3BlcmF0aXZlLiBGdXJ0aGVyLCBpdCBlbmZyYW5jaGlzZXMgc3RhdGUtZGVidG9ycyB3aG8KICAgICAgICAgICAgICAgICAgICBkbyBub3QgZGlzY2hhcmdlIHRoZWlyIGxpYWJpbGl0aWVzLCBhbmQsIGluIGdlbmVyYWwsIGl0IG1ha2VzIGFuIGV4aGliaXRpb24gb2YKICAgICAgICAgICAgICAgICAgICB5b3UganVyb3JzIGFzIG1lbiB3aG9zZSBvYXRocywgd2hvc2UgcGVuYWx0aWVzLCB3aG9zZSB2ZXJkaWN0cywgd2hvc2UgY2Vuc3VyZXMsCiAgICAgICAgICAgICAgICAgICAgd2hvc2UgYWN0cywgaW4gc2hvcnQsIGFyZSBhbGwgdXR0ZXJseSBmdXRpbGUuIEZvciBteSBwYXJ0LCBJIGNvbmNlaXZlIHRoYXQgaWYKICAgICAgICAgICAgICAgICAgICB0aGUgYXV0aG9yIG9mIHRoZSBzdGF0dXRlIGhhZCBiZWVuIENyaXRpYXMgb2YgdGhlIFRoaXJ0eSBUeXJhbnRzLCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGhhcmRseSBoYXZlIGZyYW1lZCBhbmQgaW50cm9kdWNlZCBpdCBpbiBhbnkgb3RoZXIgZmFzaGlvbiB0aGFuIHRoaXMuIDwvdHJhbnNsYXRpb24+"
translation['24.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB0aGluayB0aGF0IHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgZWFzaWx5IGJlIGNvbnZpbmNlZCB0aGF0IHRoaXMgbGF3IHVwc2V0cyB0aGUgY29uc3RpdHV0aW9uLCB0aHJvd3MgcHVibGljCiAgICAgICAgICAgICAgICAgICAgYnVzaW5lc3MgaW50byBjb25mdXNpb24sIGFuZCBkZW51ZGVzIHRoZSBjb21tb253ZWFsdGggb2YgbWFueSBob25vcmFibGUKICAgICAgICAgICAgICAgICAgICBhbWJpdGlvbnMuIEZvciB5b3UgY2Fubm90IGJlIHVuY29uc2Npb3VzIHRoYXQgb3VyIGNpdHkgaGFzIG9mdGVuIG93ZWQgaGVyIHNhZmV0eQogICAgICAgICAgICAgICAgICAgIHRvIHRoZSB3YXJsaWtlIGFkdmVudHVyZXMgb2Ygb3VyIG5hdnkgYW5kIG91ciBsYW5kIGZvcmNlczsgYW5kIHRoYXQgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBmcmVxdWVudGx5IHBlcmZvcm1lZCBnbG9yaW91cyBhY2hpZXZlbWVudHMgaW4gdGhlIGRlbGl2ZXJhbmNlLCBvciB0aGUKICAgICAgICAgICAgICAgICAgICBjaGFzdGlzZW1lbnQsIG9yIHRoZSByZWNvbmNpbGlhdGlvbiwgb2Ygb3RoZXIgY2l0aWVzLiBXaGF0IGRvIEkgaW5mZXI/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHN1Y2Nlc3NlcyBjb3VsZCBvbmx5IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIG9yZ2FuaXplZCBieSB0aGUgYWlkIG9mIHRob3NlIGRlY3JlZXMgYW5kIGxhd3MgdW5kZXIgd2hpY2ggeW91IGxldnkKICAgICAgICAgICAgICAgICAgICBjb250cmlidXRpb25zIG9uIHNvbWUgY2l0aXplbnMsIGFuZCByZXF1aXJlIG90aGVycyB0byBmdXJuaXNoIHdhci1nYWxsZXlzOyBiaWQKICAgICAgICAgICAgICAgICAgICBzb21lIHRvIHNlcnZlIGluIHRoZSBuYXZ5LCBhbmQgb3RoZXJzIHRvIHBlcmZvcm0gdGhlaXIgc2V2ZXJhbCBkdXRpZXMuIFdpdGggdGhhdAogICAgICAgICAgICAgICAgICAgIG9iamVjdCwgdGhlcmVmb3JlLCB5b3UgaW1wYW5lbCBqdXJpZXMsIGFuZCBwdW5pc2ggdGhlIGluc3Vib3JkaW5hdGUgd2l0aAogICAgICAgICAgICAgICAgICAgIGltcHJpc29ubWVudC4gTm93IG1hcmsgaG93IHRoaXMgZ2FsbGFudCBnZW50bGVtYW4ncyBzdGF0dXRlIHZpdGlhdGVzIGFuZCBtYWtlcwogICAgICAgICAgICAgICAgICAgIGhhdm9jIG9mIGFsbCB0aGF0IGJ1c2luZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgY2xhdXNlIHJlYWRzLAogICAgICAgICAgICAgICAgICAgIHlvdSByZW1lbWJlcjog4oCcaWYgdGhlIHBlbmFsdHkgb2YgaW1wcmlzb25tZW50IGhhcyBiZWVuIG9yIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgaGVyZWFmdGVyIGJlIGluZmxpY3RlZCB1cG9uIGFueSBkZWJ0b3IsIGhlIHNoYWxsLCBvbiBub21pbmF0aW5nIHN1cmV0aWVzIG9uIGFuCiAgICAgICAgICAgICAgICAgICAgdW5kZXJ0YWtpbmcgdG8gcGF5IHRoZSBtb25leSBkdXJpbmcgdGhlIG5pbnRoIHByZXNpZGVuY3ksIGJlIHJlbGVhc2VkIGZyb20KICAgICAgICAgICAgICAgICAgICBpbXByaXNvbm1lbnQu4oCdIFRoZW4gd2hlcmUgYXJlIG91ciByZXNvdXJjZXM/IEhvdyBzaGFsbCBhbnkgZXhwZWRpdGlvbgogICAgICAgICAgICAgICAgICAgIGJlIGRpc3BhdGNoZWQ/IEhvdyBzaGFsbCB3ZSBjb2xsZWN0IHdheXMgYW5kIG1lYW5zLCBpZiBldmVyeSBkZWZhdWx0ZXIgbm9taW5hdGVzCiAgICAgICAgICAgICAgICAgICAgc3VyZXRpZXMgdW5kZXIgdGhpcyBtYW4ncyBhY3QgaW5zdGVhZCBvZiBkaXNjaGFyZ2luZyBoaXMgb2JsaWdhdGlvbj8gPC90cmFuc2xhdGlvbj4="
translation['24.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz5JIHByZXN1bWUgdGhhdCBvdXIgcmVwbHkgdG8gdGhlIEhlbGxlbmljIHdvcmxkIHdpbGwKICAgICAgICAgICAgICAgICAgICBiZTog4oCcV2UgaGF2ZSBhIGxhdyBoZXJlLOKAlHRoZSBzdGF0dXRlIG9mIFRpbW9jcmF0ZXMuIEtpbmRseQogICAgICAgICAgICAgICAgICAgIHdhaXQgdGlsbCB0aGUgbmludGggcHJlc2lkZW5jeTsgdGhlbiBhZnRlciB0aGF0IHdlIHdpbGwgc3RhcnQu4oCdIE5vCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgZXhjdXNlIGlzIGxlZnQuIEFuZCBpZiB5b3UgaGF2ZSB0byBmaWdodCBpbiBzZWxmLWRlZmVuY2UsIGRvIHlvdSByZWFsbHkKICAgICAgICAgICAgICAgICAgICB0aGluayB0aGF0IHRoZSBlbmVteSB3aWxsIHdhaXQgZm9yIHRoZSBldmFzaW9ucyBhbmQgcm9ndWVyaWVzIG9mIGV2ZXJ5IHNjb3VuZHJlbAogICAgICAgICAgICAgICAgICAgIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPj8gSWYgb3VyIGNpdHkgZW5hY3RzIGxhd3MKICAgICAgICAgICAgICAgICAgICBmb3IgaGVyIG93biBkaXNjb21maXR1cmUsIGxhd3MgZXhhY3RseSBjb250cmFyeSB0byBoZXIgb3duIGludGVyZXN0cywgZG8geW91CiAgICAgICAgICAgICAgICAgICAgdGhpbmsgc2hlIHdpbGwgZXZlciBiZSBhYmxlIHRvIHBsYXkgaGVyIHRydWUgcGFydCBpbiB0aGUgd29ybGQ/IDwvdHJhbnNsYXRpb24+"
translation['24.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz5NZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB3ZSBtYXkgd2VsbCBiZSBzYXRpc2ZpZWQgaWYsIHdpdGggZXZlcnl0aGluZyBpbiBnb29kCiAgICAgICAgICAgICAgICAgICAgb3JkZXIsIGFuZCB3aXRoIG5vIHN1Y2ggbGF3IGFzIHRoaXMsIHdlIGhvbGQgYWR2YW50YWdlIG92ZXIgb3VyIGVuZW1pZXMsIGtlZXAKICAgICAgICAgICAgICAgICAgICBwYWNlIHdpdGggdGhlIHN3aWZ0IGVtZXJnZW5jaWVzIGFuZCBzdWRkZW4gY2hhbmNlcyBvZiB3YXJmYXJlLCBhbmQgYXJlIG5ldmVyCiAgICAgICAgICAgICAgICAgICAgYmVoaW5kaGFuZC7igJRCdXQgaWYgeW91LCBzaXIsIGRpc3Rpbmd1aXNoIHlvdXJzZWxmIGFzIHRoZSBhdXRob3Igb2YgYQogICAgICAgICAgICAgICAgICAgIGxhdyB0aGF0IG1ha2VzIGhhdm9jIG9mIGV2ZXJ5dGhpbmcgYnkgd2hpY2ggb3VyIGNpdHkgaGFzIGVhcm5lZCB0aGUgcmVzcGVjdCBhbmQKICAgICAgICAgICAgICAgICAgICBhZG1pcmF0aW9uIG9mIHRoZSB3b3JsZCwgaXMgdGhlcmUgYW55IHB1bmlzaG1lbnQgdGhhdCB5b3UgZG8gbm90IGRlc2VydmUgdG8KICAgICAgICAgICAgICAgICAgICBzdWZmZXI/IDwvdHJhbnNsYXRpb24+"
translation['24.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TW9yZW92ZXIsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBzaGF0dGVycyBvdXIgZmluYW5jaWFsIHN5c3RlbSwgYm90aCBzYWNyZWQgYW5kIGNpdmlsOyBhbmQgSSB3aWxsIHRlbGwgeW91IGhvdy4KICAgICAgICAgICAgICAgICAgICBZb3UgaGF2ZSBhIGxhdyBpbiBvcGVyYXRpb24sIGFzIGdvb2QgYSBsYXcgYXMgZXZlciB3YXMgZW5hY3RlZCwgdGhhdCBob2xkZXJzIG9mCiAgICAgICAgICAgICAgICAgICAgc2FjcmVkIG9yIGNpdmlsIG1vbmV5cyBzaGFsbCBwYXkgdGhlIG1vbmV5IGluIHRvIHRoZSBDb3VuY2lsIGhvdXNlLCBhbmQgdGhhdCwKICAgICAgICAgICAgICAgICAgICBmYWlsaW5nIHN1Y2ggcGF5bWVudCwgdGhlIENvdW5jaWwgc2hhbGwgcmVjb3ZlciB0aGUgbW9uZXkgYnkgZW5mb3JjaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXR1dGVzIGFwcGxpY2FibGUgdG8gdGF4LWZhcm1lcnM7IDwvdHJhbnNsYXRpb24+"
translation['24.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgb24KICAgICAgICAgICAgICAgICAgICB0aGF0IGxhdyB0aGUgYWRtaW5pc3RyYXRpb24gb2YgdGhlIHRyZWFzdXJ5IGRlcGVuZHMuIFRoYXQgaXMgdGhlIGxhdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgZW5zdXJlcyB0aGUgc3VwcGxlbWVudGFyeSBzdXBwbHkgZm9yIHRoZSBleHBlbnNlcyBvZiBtZWV0aW5ncyBvZiB0aGUgQXNzZW1ibHksCiAgICAgICAgICAgICAgICAgICAgcmVsaWdpb3VzIHNlcnZpY2VzLCB0aGUgQ291bmNpbCwgdGhlIGNhdmFscnksIGFuZCBzbyBmb3J0aCwgYmVjYXVzZSB0aGUgcmV2ZW51ZQogICAgICAgICAgICAgICAgICAgIGZyb20gdGF4YXRpb24gaXMgbm90IHN1ZmZpY2llbnQgZm9yIGN1cnJlbnQgZXhwZW5zZXMsIGFuZCB3aGF0IHdlIGNhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgc3VwcGxlbWVudGFyeSBwYXltZW50cyBhcmUgbWFkZSB1bmRlciB0aGUgY29uc3RyYWludCBvZiB0aGF0IGxhdy4gPC90cmFuc2xhdGlvbj4="
translation['24.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz5JdCBmb2xsb3dzIHRoYXQgdGhlIHdob2xlIGJ1c2luZXNzIG9mIHRoZSBTdGF0ZSBtdXN0CiAgICAgICAgICAgICAgICAgICAgZ28gdG8gcmFjayBhbmQgcnVpbiB3aGVuLCB0aGUgcGF5bWVudHMgb24gYWNjb3VudCBvZiB0YXhhdGlvbiBiZWluZwogICAgICAgICAgICAgICAgICAgIGluc3VmZmljaWVudCwgdGhlcmUgaXMgYSBsYXJnZSBkZWZpY2llbmN5LCB3aGVuIHRoYXQgZGVmaWNpZW5jeSBjYW5ub3QgYmUgbWFkZQogICAgICAgICAgICAgICAgICAgIHVwIHVudGlsIHRvd2FyZHMgdGhlIGVuZCBvZiB0aGUgeWVhciwgYW5kIHdoZW4sIGFzIHJlZ2FyZHMgdGhlIHN1cHBsZW1lbnRhcnkKICAgICAgICAgICAgICAgICAgICBwYXltZW50cywgbmVpdGhlciB0aGUgQ291bmNpbCBub3IgdGhlIGxhdy1jb3VydHMgaGF2ZSBhdXRob3JpdHkgdG8gaW1wcmlzb24KICAgICAgICAgICAgICAgICAgICBkZWZhdWx0ZXJzLCBpZiB0aGV5IHB1dCBpbiBzdXJldGllcyB1bnRpbCB0aGUgbmludGggcHJlc2lkZW5jeS4gPC90cmFuc2xhdGlvbj4="
translation['24.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGFyZSB3ZSB0byBkbyBmb3IgdGhlIGZpcnN0IGVpZ2h0ID8gVGVsbCB1cyB0aGlzLAogICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXM6IGFyZSB3ZSBuZXZlciB0byBtZWV0IGFuZCBkZWxpYmVyYXRlPyBJZiBzbywgc2hhbGwgd2Ugc3RpbGwgYmUgbGl2aW5nCiAgICAgICAgICAgICAgICAgICAgdW5kZXIgcG9wdWxhciBnb3Zlcm5tZW50PyBTaGFsbCB0aGVyZSBiZSBubyBzZXNzaW9ucyBvZiB0aGUgY291cnRzLCBjaXZpbCBvcgogICAgICAgICAgICAgICAgICAgIGNyaW1pbmFsPyBJZiBzbywgd2hhdCBzZWN1cml0eSB3aWxsIHRoZXJlIGJlIGZvciBjb21wbGFpbmFudHM/IFNoYWxsIHRoZSBDb3VuY2lsCiAgICAgICAgICAgICAgICAgICAgbm90IGF0dGVuZCBhdCB0aGVpciBvZmZpY2UgdG8gdHJhbnNhY3QgdGhlaXIgbGVnYWwgYnVzaW5lc3M/IElmIHNvLCB3aGF0IHJlbWFpbnMKICAgICAgICAgICAgICAgICAgICBidXQgY29tcGxldGUgZGlzb3JnYW5pemF0aW9uPyBZb3UgbmF5IHJlcGx5IHRoYXQgd2Ugc2hhbGwgZ28gb24gd2l0aG91dCBwYXltZW50CiAgICAgICAgICAgICAgICAgICAgb2YgZmVlcy4gVGhlbiBpcyBpdCBub3QgbW9uc3Ryb3VzIHRoYXQgdGhlIEFzc2VtYmx5LCB0aGUgQ291bmNpbCwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGxhdy1jb3VydHMgbXVzdCBnbyB1bnBhaWQgZm9yIHRoZSBzYWtlIG9mIGEgc3RhdHV0ZSB3aGljaCB5b3Ugd2VyZSBwYWlkIHRvCiAgICAgICAgICAgICAgICAgICAgaW50cm9kdWNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['24.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+WW91IG91Z2h0IGF0IGxlYXN0IHRvIGhhdmUgYWRkZWQgYQogICAgICAgICAgICAgICAgICAgIGNsYXVzZSwgYXMgeW91IGRpZCBpbiBkZWFsaW5nIHdpdGggdGhlIHRheC1mYXJtZXJzIGFuZCB0aGVpciBzdXJldGllcywgdGhhdAogICAgICAgICAgICAgICAgICAgIOKAnGlmIGluIGFueSBvdGhlciBzdGF0dXRlIG9yIGRlY3JlZSBpdCBpcyBwcm92aWRlZCB0aGF0IHRoZSBkZWJ0cyBvZgogICAgICAgICAgICAgICAgICAgIGFueSBkZWZhdWx0ZXIgbWF5IGJlIHJlY292ZXJlZCBhcyBpbiB0aGUgY2FzZSBvZiB0YXgtZmFybWVycywgcmVjb3ZlcnkgZnJvbSBzdWNoCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdGVycyBzaGFsbCBiZSBlZmZlY3RlZCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGV4aXN0aW5nIGxhd3Mu4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+4oCUQnV0IGluIGZhY3QgaGUgd2VudCBvdXQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgd2F5IHRvIGF2b2lkIHRoZSBzdGF0dXRlcyBvZiB0YXgtZmFybWluZzsgYW5kLCBiZWNhdXNlIEV1Y3RlbW9uJ3MgZGVjcmVlIGRpZAogICAgICAgICAgICAgICAgICAgIGF1dGhvcml6ZSByZWNvdmVyeSBmcm9tIGxvc2VycyBvZiBzdWl0cyBhY2NvcmRpbmcgdG8gdGhvc2Ugc3RhdHV0ZXMsIGZvciB0aGF0CiAgICAgICAgICAgICAgICAgICAgdmVyeSByZWFzb24gaGUgb21pdHRlZCB0byBhZGQgdGhlIGNsYXVzZS4gSW4gdGhhdCBtYW5uZXIsIGJ5IGNhbmNlbGxpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcgcHVuaXNobWVudCBvZiBwdWJsaWMgZGVmYXVsdGVycyB3aXRob3V0IHN1YnN0aXR1dGluZyBhbnkgb3RoZXIsIGhlCiAgICAgICAgICAgICAgICAgICAgbWFrZXMgaGF2b2Mgb2YgYWxsIG91ciBidXNpbmVzcyzigJR0aGUgQXNzZW1ibHksIHRoZSBjYXZhbHJ5LCB0aGUKICAgICAgICAgICAgICAgICAgICBDb3VuY2lsLCB0aGUgc2FjcmVkIGZ1bmRzLCB0aGUgY2l2aWwgcmV2ZW51ZS4gQW5kIGZvciB0aGF0IG9mZmVuY2UsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGlmIHlvdSBhcmUgd2lzZSBtZW4sIGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBjaGFzdGlzZWQgYW5kIHRyZWF0ZWQgYXMgaGUgZGVzZXJ2ZXMsIGFuZCBzbyBtYWRlIGFuIGV4YW1wbGUgdG8gZGV0ZXIKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgZnJvbSBicmluZ2luZyBpbiBzdWNoIGxhd3MuIDwvdHJhbnNsYXRpb24+"
translation['24.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdCBvbmx5LCB0aGVuLCBkb2VzIGhlIGRlcHJpdmUgdGhlIGNvdXJ0IG9mIGF1dGhvcml0eQogICAgICAgICAgICAgICAgICAgIGluIHJlc3BlY3Qgb2Ygc3VwcGxlbWVudGFyeSBwYXltZW50cywgb2ZmZXIgaW1tdW5pdHkgdG8gZGVmcmF1ZGVycyBvZiB0aGUgU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgY3JpcHBsZSBvdXIgbmF0aW9uYWwgc2VydmljZSwgYW5kIHVuZGVybWluZSBvdXIgZmluYW5jaWFsIHN5c3RlbSwgYnV0IGFsc28sIGJ5CiAgICAgICAgICAgICAgICAgICAgYWJyb2dhdGluZyB0aGUgcGVuYWx0aWVzIGltcG9zZWQgYnkgdGhlIGV4aXN0aW5nIHN0YXR1dGVzLCBoZSBoYXMgZW5hY3RlZCBoaXMKICAgICAgICAgICAgICAgICAgICBsYXcgZm9yIHRoZSBiZW5lZml0IG9mIHN3aW5kbGVycywgcGFycmljaWRlcywgYW5kIHNoaXJrZXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHN0YXR1dGVzIGVuYWN0ZWQgYnkgU29sb24sIGEgdmVyeSBkaWZmZXJlbnQgbGVnaXNsYXRvcgogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGRlZmVuZGFudCwgcHJvdmlkZWQgdGhhdCBpZiBhIG1hbiBpcyBjb252aWN0ZWQgb2YgdGhlZnQsIGFuZCBub3QKICAgICAgICAgICAgICAgICAgICBwdW5pc2hlZCB3aXRoIGRlYXRoLCBoZSBzaGFsbCBzdWZmZXIgaW1wcmlzb25tZW50OyB0aGF0IGlmIGEgbWFuIGZvdW5kIGd1aWx0eSBvZgogICAgICAgICAgICAgICAgICAgIGlsbC10cmVhdGluZyBoaXMgcGFyZW50cyBpbnRydWRlcyB1cG9uIHRoZSBtYXJrZXQtcGxhY2UsIGhlIHNoYWxsIGdvIHRvIGphaWw7CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgaWYgYSBtYW4sIGhhdmluZyBiZWVuIGNvbnZpY3RlZCBvZiBzaGlya2luZyBtaWxpdGFyeSBzZXJ2aWNlLCBiZWhhdmVzCiAgICAgICAgICAgICAgICAgICAgYXMgdGhvdWdoIGhlIHdlcmUgbm90IGRpc2ZyYW5jaGlzZWQsIGhlIGFsc28gc2hhbGwgYmUgaW1wcmlzb25lZC4gVGltb2NyYXRlcwogICAgICAgICAgICAgICAgICAgIGdpdmVzIGltcHVuaXR5IHRvIGFsbCB0aGVzZSBvZmZlbmRlcnMsIGZvciBoZSBhYm9saXNoZXMgaW1wcmlzb25tZW50IGlmIHRoZXkgcHV0CiAgICAgICAgICAgICAgICAgICAgaW4gYmFpbC4gPC90cmFuc2xhdGlvbj4="
translation['24.104'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmVmb3JlLCBpbiBteSBqdWRnZW1lbnQKICAgICAgICAgICAgICAgICAgICDvvIlhbmQgdGhvdWdoIHlvdSBtYXkgdGhpbmsgd2hhdCBJIGFtIGdvaW5nIHRvIHNheSByYXRoZXIgY29hcnNlLCBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBzYXkgaXQgd2l0aG91dCBoZXNpdGF0aW9u77yILCBoZSBkZXNlcnZlcywgb24gdGhhdCB2ZXJ5IGFjY291bnQsIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcHVuaXNoZWQgd2l0aCBkZWF0aCwgc28gdGhhdCBoZSBtYXkgcGFzcyB0aGlzIGxhdyBpbiBIZWxsIGZvciB0aGUgYmVuZWZpdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICB3aWNrZWQsIGFuZCBsZWF2ZSB1cyB3aG8gYXJlIHN0aWxsIGFsaXZlIGluIHRoZSBjb250aW51ZWQgZW5qb3ltZW50IG9mIG91ciBob2x5CiAgICAgICAgICAgICAgICAgICAgYW5kIHJpZ2h0ZW91cyBsYXdzLuKAlFJlYWQgYWxzbyB0aGUgbGF3cyBJIGhhdmUgbWVudGlvbmVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.105'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3Ij48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXdzIENvbmNlcm5pbmcgVGhlZnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYWx0cmVhdG1lbnQgb2YgUGFyZW50cywgYW5kIERlc2VydGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGEgbWFuIGhhcyByZWNvdmVyZWQgdGhlIHByb3BlcnR5IGxvc3QsIHRoZSBwZW5hbHR5IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIHR3aWNlIHRoZSB2YWx1ZSBvZiBzdWNoIHByb3BlcnR5OyBpZiBoZSBoYXMgbm90IHJlY292ZXJlZCBpdCwgdGVuIHRpbWVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB2YWx1ZSBpbiBhZGRpdGlvbiB0byB0aGUgbGF3ZnVsIGFtZXJjZW1lbnQuIFRoZSB0aGllZiBzaGFsbCBiZSBrZXB0IGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzdG9ja3MgZm9yIGZpdmUgZGF5cyBhbmQgZml2ZSBuaWdodHMsIGlmIGFuIGFkZGl0aW9uYWwgcGVuYWx0eSBpcwogICAgICAgICAgICAgICAgICAgICAgICBhd2FyZGVkIGJ5IHRoZSBjb3VydDsgYW5kIHN1Y2ggYWRkaXRpb25hbCBwZW5hbHR5IG1heSBiZSBwcm9wb3NlZCBieSBhbnlvbmUsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdGhlIHF1ZXN0aW9uIG9mIHNlbnRlbmNlIGlzIHJhaXNlZC7igJRJZiBhbnkgbWFuIGJlIHB1dCB1bmRlcgogICAgICAgICAgICAgICAgICAgICAgICBhcnJlc3QgYWZ0ZXIgYmVpbmcgZm91bmQgZ3VpbHR5IG9mIGlsbC10cmVhdGluZyBoaXMgcGFyZW50cyBvciBvZiBzaGlya2luZwogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLCBvciBmb3IgZW50ZXJpbmcgYW55IGZvcmJpZGRlbiBwbGFjZSBhZnRlciBub3RpY2Ugb2Ygb3V0bGF3cnksIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBFbGV2ZW4gc2hhbGwgcHV0IGhpbSBpbnRvIHByaXNvbiBhbmQgYnJpbmcgaGltIGJlZm9yZSB0aGUgQ291cnQgb2YgSGVsaWFlYSwKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGFueSBwZXJzb24gYmVpbmcgYSBsYXdmdWwgcHJvc2VjdXRvciBtYXkgcHJvc2VjdXRlIGhpbS4gSWYgaGUgYmUgZm91bmQKICAgICAgICAgICAgICAgICAgICAgICAgZ3VpbHR5LCB0aGUgQ291cnQgc2hhbGwgZGV0ZXJtaW5lIHdoYXQgcGVuYWx0eSwgY29ycG9yYWwgb3IgcGVjdW5pYXJ5LCBoZQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBzdWZmZXI7IGFuZCBpZiB0aGUgcGVuYWx0eSBiZSBwZWN1bmlhcnksIGhlIHNoYWxsIGJlIGtlcHQgaW4gcHJpc29uCiAgICAgICAgICAgICAgICAgICAgICAgIHVudGlsIGhlIGhhcyBwYWlkIHRoZSBmaW5lLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3cyBDb25jZXJuaW5nIFRoZWZ0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFsdHJlYXRtZW50IG9mIFBhcmVudHMsIGFuZCBEZXNlcnRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhIG1hbiBoYXMgcmVjb3ZlcmVkIHRoZSBwcm9wZXJ0eSBsb3N0LCB0aGUgcGVuYWx0eSBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICBiZSB0d2ljZSB0aGUgdmFsdWUgb2Ygc3VjaCBwcm9wZXJ0eTsgaWYgaGUgaGFzIG5vdCByZWNvdmVyZWQgaXQsIHRlbiB0aW1lcwogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdmFsdWUgaW4gYWRkaXRpb24gdG8gdGhlIGxhd2Z1bCBhbWVyY2VtZW50LiBUaGUgdGhpZWYgc2hhbGwgYmUga2VwdCBpbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgc3RvY2tzIGZvciBmaXZlIGRheXMgYW5kIGZpdmUgbmlnaHRzLCBpZiBhbiBhZGRpdGlvbmFsIHBlbmFsdHkgaXMKICAgICAgICAgICAgICAgICAgICAgICAgYXdhcmRlZCBieSB0aGUgY291cnQ7IGFuZCBzdWNoIGFkZGl0aW9uYWwgcGVuYWx0eSBtYXkgYmUgcHJvcG9zZWQgYnkgYW55b25lLAogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBxdWVzdGlvbiBvZiBzZW50ZW5jZSBpcyByYWlzZWQu4oCUSWYgYW55IG1hbiBiZSBwdXQgdW5kZXIKICAgICAgICAgICAgICAgICAgICAgICAgYXJyZXN0IGFmdGVyIGJlaW5nIGZvdW5kIGd1aWx0eSBvZiBpbGwtdHJlYXRpbmcgaGlzIHBhcmVudHMgb3Igb2Ygc2hpcmtpbmcKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZSwgb3IgZm9yIGVudGVyaW5nIGFueSBmb3JiaWRkZW4gcGxhY2UgYWZ0ZXIgbm90aWNlIG9mIG91dGxhd3J5LCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgRWxldmVuIHNoYWxsIHB1dCBoaW0gaW50byBwcmlzb24gYW5kIGJyaW5nIGhpbSBiZWZvcmUgdGhlIENvdXJ0IG9mIEhlbGlhZWEsCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBhbnkgcGVyc29uIGJlaW5nIGEgbGF3ZnVsIHByb3NlY3V0b3IgbWF5IHByb3NlY3V0ZSBoaW0uIElmIGhlIGJlIGZvdW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGd1aWx0eSwgdGhlIENvdXJ0IHNoYWxsIGRldGVybWluZSB3aGF0IHBlbmFsdHksIGNvcnBvcmFsIG9yIHBlY3VuaWFyeSwgaGUKICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgc3VmZmVyOyBhbmQgaWYgdGhlIHBlbmFsdHkgYmUgcGVjdW5pYXJ5LCBoZSBzaGFsbCBiZSBrZXB0IGluIHByaXNvbgogICAgICAgICAgICAgICAgICAgICAgICB1bnRpbCBoZSBoYXMgcGFpZCB0aGUgZmluZS48L3RyYW5zbGF0aW9uPg=="
translation['24.106'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk11Y2ggYWxpa2UKICAgICAgICAgICAgICAgICAgICB0aGVzZSB0d28gbGVnaXNsYXRvcnMsIFNvbG9uIGFuZCBUaW1vY3JhdGVzLOKAlGFyZSB0aGV5IG5vdCwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPj8gU29sb24gYWltcyBhdCB0aGUKICAgICAgICAgICAgICAgICAgICByZWZvcm1hdGlvbiBvZiB0aGUgbGl2aW5nIGFuZCBvZiB0aGUgdW5ib3JuOyBUaW1vY3JhdGVzIHBvaW50cyB0aGUgc2NvdW5kcmVscyBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBwYXN0IHRvIGEgcm9hZCBieSB3aGljaCB0aGV5IG1heSBlc2NhcGUganVzdGljZSwgYW5kIGludmVudHMgYSBzY2hlbWUgb2YKICAgICAgICAgICAgICAgICAgICBpbXB1bml0eSBmb3IgbWFsZWZhY3RvcnMgcHJlc2VudCBhbmQgbWFsZWZhY3RvcnMgdG8gY29tZSwgcHJvdmlkaW5nIGRlbGl2ZXJhbmNlCiAgICAgICAgICAgICAgICAgICAgYW5kIHJlcHJpZXZlIGZvciBwYXN0LCBwcmVzZW50LCBhbmQgZnV0dXJlIHNpbm5lcnMgYWxpa2UuIDwvdHJhbnNsYXRpb24+"
translation['24.107'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+4oCUV2hhdCBhZGVxdWF0ZSBzYXRpc2ZhY3Rpb24gY2FuIHlvdSByZW5kZXIsIG9yIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hhdCBwdW5pc2htZW50IGNhbiB5b3UgYmUgcHVuaXNoZWQgYXMgeW91IGRlc2VydmUsIHlvdSB3aG8sIHRvIHNheSBub3RoaW5nIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlc3QsIHN1YnZlcnQgdGhlIGxhd3MgdGhhdCBwcm90ZWN0IG9sZCBhZ2UsIHRoYXQgY29tcGVsIHRoZSBtYWludGVuYW5jZSBvZgogICAgICAgICAgICAgICAgICAgIHBhcmVudHMgaW4gdGhlaXIgbGlmZXRpbWUsIGFuZCBlbnN1cmUgdGhhdCB0aGV5IHNoYWxsIGJlIGhvbm9yZWQgd2l0aCBkdWUKICAgICAgICAgICAgICAgICAgICBvYnNlcnZhbmNlIHdoZW4gdGhleSBkaWU/IEhvdyBjYW4geW91IGVzY2FwZSBiZWluZyBhZGp1ZGdlZCB0aGUgYmFzZXN0IG9mCiAgICAgICAgICAgICAgICAgICAgbWFua2luZCwgeW91IHJlcHJvYmF0ZSwgd2hvIG9wZW5seSBhY2NvdW50IHRoaWV2ZXMgYW5kIHNjb3VuZHJlbHMgYW5kIHNoaXJrZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgbW9yZSB2YWx1ZSB0aGFuIHlvdXIgZmF0aGVybGFuZCwgYW5kIGZvciB0aGVpciBzYWtlIGJyaW5nIGluIGEgbGF3IHRvIG91cgogICAgICAgICAgICAgICAgICAgIGRldHJpbWVudD8gPC90cmFuc2xhdGlvbj4="
translation['24.108'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdwogICAgICAgICAgICAgICAgICAgIEkgcHJvcG9zZSB0byByZWNrb24gdXAgaG93IEkgaGF2ZSBmdWxmaWxsZWQgdGhlIHByb21pc2VzIEkgbWFkZSBhdCB0aGUgb3V0c2V0IG9mCiAgICAgICAgICAgICAgICAgICAgbXkgYWRkcmVzcy4gSSB1bmRlcnRvb2sgdG8gcHJvdmUgdGhhdCBoZSBpcyBhbWVuYWJsZSB0byB0aGUgaW5kaWN0bWVudCBpbiBldmVyeQogICAgICAgICAgICAgICAgICAgIHJlc3BlY3QsIGZpcnN0LCBiZWNhdXNlIGhlIGxlZ2lzbGF0ZWQgaWxsZWdhbGx5OyBzZWNvbmRseSwgYmVjYXVzZSBoaXMgcHJvcG9zYWxzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBjb250cmFyeSB0byBleGlzdGluZyBzdGF0dXRlczsgYW5kIHRoaXJkbHksIGJlY2F1c2UgdGhleSB3ZXJlIGluanVyaW91cyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjb21tb253ZWFsdGguIFdlbGwsIHlvdSBoYXZlIG5vdyBoZWFyZCB0aGUgc3RhdHV0ZXMsIGFuZCB3aGF0IHRoZXkgZW5qb2luCiAgICAgICAgICAgICAgICAgICAgdXBvbiB0aGUgYXV0aG9yIG9mIGEgbmV3IGxhdzsgYW5kIGFnYWluIEkgaGF2ZSBzYXRpc2ZpZWQgeW91IHRoYXQgdGhlIGRlZmVuZGFudAogICAgICAgICAgICAgICAgICAgIGhhcyBub3Qgb2JzZXJ2ZWQgYW55IG9uZSBvZiB0aG9zZSBpbmp1bmN0aW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['24.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlciwgeW91IGhhdmUgYWxzbyBoZWFyZCB0aGUgc3RhdHV0ZXMgd2l0aCB3aGljaCB0aGUgZGVmZW5kYW50J3MgbGF3IGlzCiAgICAgICAgICAgICAgICAgICAgbWFuaWZlc3RseSBhdCB2YXJpYW5jZTsgYW5kIHlvdSBhcmUgYXdhcmUgdGhhdCBoZSBoYXMgaW50cm9kdWNlZCBpdCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgcmVwZWFsIG9mIHRob3NlIHN0YXR1dGVzLiBBbmQgeW91IGhhdmUgY2VydGFpbmx5IGhlYXJkIHRoYXQgdGhlIGxhdyBpcwogICAgICAgICAgICAgICAgICAgIGRldHJpbWVudGFsLCBmb3IgSSBoYXZlIG9ubHkganVzdCBsZWZ0IG9mZiB0ZWxsaW5nIHlvdSBzby4gVGhlcmVmb3JlIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgdW5xdWVzdGlvbmFibHkgZ3VpbHR5IG9uIGV2ZXJ5IGNvdW50LCBhbmQgaW4gbm90aGluZyBoYXMgaGUgc2hvd24gY29uc2lkZXJhdGlvbgogICAgICAgICAgICAgICAgICAgIG9yIHNjcnVwbGU7IGJ1dCwgYXMgaXQgc2VlbXMgdG8gbWUsIGlmIGFueXRoaW5nIGVsc2UgaGFkIGJlZW4gZm9yYmlkZGVuIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nIHN0YXR1dGVzLCBoZSB3b3VsZCBoYXZlIGRvbmUgdGhhdCBhcyB3ZWxsLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZyb20gZXZlcnkgcG9pbnQgb2YgdmlldyBpdAogICAgICAgICAgICAgICAgICAgIGlzIGNsZWFyIHRoYXQgaGUgZnJhbWVkIGhpcyBwcm9wb3NhbHMgd2l0aCBhIHNpbmlzdGVyIHB1cnBvc2UsIGFuZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmZW5kcyBvZiBtYWxpY2UgcHJlcGVuc2UgYW5kIG5vdCBieSBlcnJvciBvZiBqdWRnZW1lbnQsIGVzcGVjaWFsbHkgYXMgdGhlCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIG9mIGhpcyBsYXcgaXMgcHJlc2VydmVkIGRvd24gdG8gdGhlIHZlcnkgbGFzdCBzeWxsYWJsZS4gSGUgcHJvcG9zZWQKICAgICAgICAgICAgICAgICAgICBub3RoaW5nIHRoYXQgd2FzIHJpZ2h0LCBub3RoaW5nIGxpa2VseSB0byBiZSBzZXJ2aWNlYWJsZSB0byB5b3UsIGV2ZW4KICAgICAgICAgICAgICAgICAgICB1bmludGVudGlvbmFsbHkuIFN1cmVseSB5b3UgYXJlIGJvdW5kIHRvIGFiaG9yIGFuZCB0byBwdW5pc2ggYSBtYW4gd2hvIGhhZCBubwogICAgICAgICAgICAgICAgICAgIHRob3VnaHQgZm9yIHdyb25ncyBkb25lIHRvIHRoZSBwZW9wbGUsIGJ1dCBlbmFjdGVkIGxhd3MgZm9yIHRoZSBiZW5lZml0IG9mIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2hvIGhhdmUgaW5qdXJlZCB5b3UgYmVmb3JlIGFuZCB3aWxsIGluanVyZSB5b3UgYWdhaW4uIDwvdHJhbnNsYXRpb24+"
translation['24.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+R2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBJIGFtIGFtYXplZCBhdCB0aGUgbWFuJ3MgZWZmcm9udGVyeS4KICAgICAgICAgICAgICAgICAgICBUbyB0aGluayB0aGF0LCB3aGVuIGhlIGFuZCBBbmRyb3Rpb24gd2VyZSBpbiBvZmZpY2UsIGhlIG5ldmVyIGhhZCBhbnkgY29tcGFzc2lvbgogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZ3JlYXQgYm9keSBvZiB5b3VyIGZlbGxvdy1jaXRpemVucywgd2hvIHdlcmUgZXhoYXVzdGVkIHdpdGggcGF5aW5nCiAgICAgICAgICAgICAgICAgICAgaW5jb21lLXRheCwgYW5kIHRoYXQgdGhlbiB3aGVuIEFuZHJvdGlvbiB3YXMgY2FsbGVkIHVwb24gdG8gcmVmdW5kIG1vbmV5LCBib3RoCiAgICAgICAgICAgICAgICAgICAgc2FjcmVkIGFuZCBjaXZpbCwgd2hpY2ggaGUgaGFkIGxvbmcgYmVmb3JlIHN0b2xlbiBmcm9tIHRoZSBTdGF0ZSwgaGUgbXVzdCBuZWVkcwogICAgICAgICAgICAgICAgICAgIHByb3Bvc2UgYSBsYXcgdG8gZGVwcml2ZSB5b3Ugb2YgdGhlIGRvdWJsZSByZXBheW1lbnQgb2YgY2l2aWwsIGFuZCB0aGUgdGVuZm9sZAogICAgICAgICAgICAgICAgICAgIHJlcGF5bWVudCBvZiBzYWNyZWQsIGxpYWJpbGl0aWVzISBUaHVzIHRoZSB3aG9sZSBtYXNzIG9mIHlvdSBjaXRpemVucyBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIGF0dGFja2VkIGJ5IGEgbWFuIHdobyB3YXMgaW1tZWRpYXRlbHkgYWZ0ZXJ3YXJkcyB0byBwcmV0ZW5kIHRoYXQgaGUgaGFkIGZyYW1lZAogICAgICAgICAgICAgICAgICAgIGhpcyBsYXcgYXMgYSBmcmllbmQgb2YgdGhlIHBlb3BsZS4gPC90cmFuc2xhdGlvbj4="
translation['24.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gbXkKICAgICAgICAgICAgICAgICAgICB2aWV3LCBubyBwdW5pc2htZW50IGNvdWxkIGJlIHRvbyBzZXZlcmUgZm9yIGEgbWFuIHdobywgd2hlbiBzb21lIG1hcmtldC1jbGVyaywKICAgICAgICAgICAgICAgICAgICBvciBzdHJlZXQtaW5zcGVjdG9yLCBvciBqdWRnZSBvZiBhIGxvY2FsIGNvdXJ0LOKAlHNvbWUgcG9vciwgdW5za2lsbGVkCiAgICAgICAgICAgICAgICAgICAgbWFuLCB3aXRob3V0IGV4cGVyaWVuY2UsIGFuZCBhcHBvaW50ZWQgdG8gaGlzIG9mZmljZSBieSBsb3Qs4oCUaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBmb3VuZCBndWlsdHkgb2YgcGVjdWxhdGlvbiBhdCB0aGUgYXVkaXRzLCBkZW1hbmRzIGZyb20gaGltIGEgdGVuZm9sZAogICAgICAgICAgICAgICAgICAgIHJlc3RpdHV0aW9uLCBhbmQgaGFzIG5vIG5ldyBsYXcgdG8gcHJvcG9zZSBmb3IgdGhlIHJlbGllZiBvZiBzdWNoIGRlbGlucXVlbnRzLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGVuLCB3aGVuIGFtYmFzc2Fkb3JzLCBlbGVjdGVkIGJ5IHZvdGUgb2YgdGhlIHBlb3BsZSwgbWVuIG9mIHN1YnN0YW5jZSwKICAgICAgICAgICAgICAgICAgICBoYXZlIGVtYmV6emxlZCBhbmQgbG9uZyByZXRhaW5lZCBsYXJnZSBzdW1zIG9mIG1vbmV5LCB0aGUgcHJvcGVydHkgaW4gcGFydCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSB0ZW1wbGVzLCBpbiBwYXJ0IG9mIHRoZSB0cmVhc3VyeSwgaXMgYXQgZ3JlYXQgcGFpbnMgdG8gaW52ZW50IGZvciB0aGVtIGEgd2F5CiAgICAgICAgICAgICAgICAgICAgb2YgZXNjYXBlIGZyb20gcGVuYWx0aWVzIG9yZGFpbmVkIGJvdGggYnkgZGVjcmVlIGFuZCBieSBzdGF0dXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBTb2xvbiwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LOKAlGFuZAogICAgICAgICAgICAgICAgICAgIGV2ZW4gVGltb2NyYXRlcyBjYW5ub3QgcHJldGVuZCB0byBiZSBhIGxlZ2lzbGF0b3Igb2YgdGhlIHNhbWUgY2FsaWJyZSBhcwogICAgICAgICAgICAgICAgICAgIFNvbG9uLOKAlHNvIGZhciBmcm9tIHByb3ZpZGluZyBzdWNoIGRlZmF1bHRlcnMgd2l0aCB0aGUgbWVhbnMgb2YKICAgICAgICAgICAgICAgICAgICBzd2luZGxpbmcgaW4gc2VjdXJpdHksIGFjdHVhbGx5IGludHJvZHVjZWQgYSBsYXcgdG8gZW5zdXJlIHRoYXQgdGhleSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBlaXRoZXIgcmVmcmFpbiBmcm9tIGNyaW1lIG9yIGJlIGFkZXF1YXRlbHkgcHVuaXNoZWQuIEZvciBhIHRoZWZ0IGluIGRheS10aW1lIG9mCiAgICAgICAgICAgICAgICAgICAgbW9yZSB0aGFuIGZpZnR5IGRyYWNobWFzIGEgbWFuIG1pZ2h0IGJlIGFycmVzdGVkIHN1bW1hcmlseSBhbmQgcHV0IGludG8gY3VzdG9keQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBFbGV2ZW4uIElmIGhlIHN0b2xlIGFueXRoaW5nLCBob3dldmVyIHNtYWxsLCBieSBuaWdodCwgdGhlIHBlcnNvbgogICAgICAgICAgICAgICAgICAgIGFnZ3JpZXZlZCBtaWdodCBsYXdmdWxseSBwdXJzdWUgYW5kIGtpbGwgb3Igd291bmQgaGltLCBvciBlbHNlIHB1dCBoaW0gaW50byB0aGUKICAgICAgICAgICAgICAgICAgICBoYW5kcyBvZiB0aGUgRWxldmVuLCBhdCBoaXMgb3duIG9wdGlvbi4gQSBtYW4gZm91bmQgZ3VpbHR5IG9mIGFuIG9mZmVuY2UgZm9yCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggYXJyZXN0IGlzIGxhd2Z1bCB3YXMgbm90IGFsbG93ZWQgdG8gcHV0IGluIGJhaWwgYW5kIHJlZnVuZCB0aGUgc3RvbGVuCiAgICAgICAgICAgICAgICAgICAgbW9uZXk7IG5vLCB0aGUgcGVuYWx0eSB3YXMgZGVhdGguIDwvdHJhbnNsYXRpb24+"
translation['24.114'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTQiIHVuaXQ9InNlY3Rpb24iIC8+T3Igc3VwcG9zZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgc3RvbGUgYSBjbG9haywgb3IgYW4gb2lsLWZsYXNrLCBvciBhbnkgc3VjaCB0cmlmbGUsIGZyb20gdGhlIEx5Y2V1bSwgb3IKICAgICAgICAgICAgICAgICAgICB0aGUgQWNhZGVteSwgb3IgQ3lub3Nhcmdlcywgb3IgYW55IHV0ZW5zaWwgZnJvbSB0aGUgZ3ltbmFzaWEgb3IgdGhlIGhhcmJvcnMsCiAgICAgICAgICAgICAgICAgICAgYWJvdmUgdGhlIHZhbHVlIG9mIHRlbiBkcmFjaG1hcywgZm9yIHN1Y2ggdGhlZnRzIGFsc28gU29sb24gZW5hY3RlZCB0aGUgY2FwaXRhbAogICAgICAgICAgICAgICAgICAgIHBlbmFsdHkuIElmIGEgbWFuIHdhcyBmb3VuZCBndWlsdHkgb24gYSBwcml2YXRlIHByb3NlY3V0aW9uIGZvciB0aGVmdCwgd2hpbGUgdGhlCiAgICAgICAgICAgICAgICAgICAgbm9ybWFsIHBlbmFsdHkgd2FzIGRvdWJsZSByZXBhcmF0aW9uLCB0aGUgY291cnQgd2FzIGVtcG93ZXJlZCB0byBhZGQgdG8gdGhlIGZpbmUKICAgICAgICAgICAgICAgICAgICB0aGUgZXh0cmEgcGVuYWx0eSBvZiBpbXByaXNvbm1lbnQgZm9yIGZpdmUgZGF5cyBhbmQgYXMgbWFueSBuaWdodHMsIHNvIHRoYXQKICAgICAgICAgICAgICAgICAgICBldmVyeWJvZHkgbWlnaHQgc2VlIHRoZSB0aGllZiBpbiBqYWlsLiBZb3UgaGVhcmQgdGhvc2UgbGF3cyByZWFkIG5vdCBsb25nIGFnby4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.115'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTUiIHVuaXQ9InNlY3Rpb24iIC8+U29sb24ncyB2aWV3IHdhcyB0aGF0IHRoZSBkb2VyIG9mCiAgICAgICAgICAgICAgICAgICAgaW5mYW1vdXMgZGVlZHMgb3VnaHQgbm90IHRvIGdldCBvZmYgd2l0aCBtZXJlIHJlcGF5bWVudCBvZiB0aGUgbW9uZXkgc3RvbGVuOyBmb3IKICAgICAgICAgICAgICAgICAgICBpdCBzZWVtZWQgdG8gaGltIHRoYXQgdGhlcmUgd291bGQgYmUgbm8gbGFjayBvZiB0aGlldmVzIG9uIHN1Y2gKICAgICAgICAgICAgICAgICAgICB0ZXJtcyzigJRpZiB0aGV5IGhhZCB0aGUgY2hhbmNlIG9mIGtlZXBpbmcgdGhlaXIgYm9vdHkgaWYgdW5kZXRlY3RlZCwKICAgICAgICAgICAgICAgICAgICBhbmQgb2Ygc2ltcGx5IHJlc3RvcmluZyBpdCBpZiBjYXVnaHQuIFRoZXkgbXVzdCBwYXkgZG91YmxlOyB0aGV5IG11c3QgYmUKICAgICAgICAgICAgICAgICAgICBpbXByaXNvbmVkIGFzIHdlbGwgYXMgZmluZWQsIGFuZCBzbyBsaXZlIGluIGRpc2dyYWNlIGZvciB0aGUgcmVzdCBvZiB0aGVpcgogICAgICAgICAgICAgICAgICAgIGxpdmVzLiBOb3Qgc28gVGltb2NyYXRlczsgaGUgbWFkZSBhcnJhbmdlbWVudHMgZm9yIGEgc2ltcGxlLCBpbnN0ZWFkIG9mIGEKICAgICAgICAgICAgICAgICAgICBkb3VibGUsIHJlcGFyYXRpb24sIGFuZCBmb3Igbm8gc29ydCBvZiBhZGRpdGlvbmFsIHBlbmFsdHkuIDwvdHJhbnNsYXRpb24+"
translation['24.116'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTYiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIHdhcyBoZSBjb250ZW50IHRvIGJlIGd1aWx0eSBvZiB0aGlzIGluaXF1aXR5IGluIHJlc3BlY3QKICAgICAgICAgICAgICAgICAgICBvZiBmdXR1cmUgb2ZmZW5jZXMgb25seTsgaGUgcmVsZWFzZWQgZXZlbiB0aGUgbWFuIHdobyBoYWQgYWxyZWFkeSBjb21taXR0ZWQgaGlzCiAgICAgICAgICAgICAgICAgICAgY3JpbWUsIGFuZCBhbHJlYWR5IGJlZW4gcHVuaXNoZWQuIEksIGhvd2V2ZXIsIHVzZWQgdG8gc3VwcG9zZSB0aGF0IGxlZ2lzbGF0b3JzCiAgICAgICAgICAgICAgICAgICAgd2VyZSBjb25jZXJuZWQgd2l0aCB0aGUgZnV0dXJlLCBtYWtpbmcgbGF3cyB0byBkaXJlY3QgaG93IHBlb3BsZSBzaG91bGQgYmVoYXZlLAogICAgICAgICAgICAgICAgICAgIGhvdyBldmVyeSB0aGluZyBzaG91bGQgaGUgbWFuYWdlZCwgYW5kIHdoYXQgc2hvdWxkIGJlIHRoZSBwcm9wZXIgcGVuYWx0aWVzIGZvcgogICAgICAgICAgICAgICAgICAgIGRpZmZlcmVudCB0cmFuc2dyZXNzaW9ucy4gVGhhdCBpcyB3aGF0IGlzIG1lYW50IGJ5IG1ha2luZyB0aGUgbGF3cyB0aGUgc2FtZSBmb3IKICAgICAgICAgICAgICAgICAgICBhbGwgY2l0aXplbnMuIFRvIGZyYW1lIHN0YXR1dGVzIGZvciBwYXN0IHRyYW5zYWN0aW9ucyBpcyBub3QgdG8gbGVnaXNsYXRlLCBidXQKICAgICAgICAgICAgICAgICAgICB0byByZXNjdWUgbWFsZWZhY3RvcnMuIDwvdHJhbnNsYXRpb24+"
translation['24.117'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTciIHVuaXQ9InNlY3Rpb24iIC8+WW91IG1heSBqdWRnZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hhdCBJIGFtIHRlbGxpbmcgeW91IGlzIHRydWUgYnkgcmVmbGVjdGluZyB0aGF0LCBpZiBFdWN0ZW1vbiBoYWQgYmVlbiBjb252aWN0ZWQKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgY2hhcmdlIG9mIGlsbGVnYWwgbGVnaXNsYXRpb24sIFRpbW9jcmF0ZXMgd291bGQgbmV2ZXIgaGF2ZSBwcm9wb3NlZCBoaXMKICAgICAgICAgICAgICAgICAgICBsYXcsIGFuZCB0aGUgU3RhdGUgd291bGQgbmV2ZXIgaGF2ZSB3YW50ZWQgaGlzIGxhdzsgaGlzIGZyaWVuZHMgd291bGQgaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgY29udGVudCB0byBwbHVuZGVyIHRoZSBwcm9wZXJ0eSBvZiB0aGUgU3RhdGUsIHdpdGhvdXQgYW55IGNvbmNlcm4gZm9yIG90aGVyCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlLiBCdXQgaW4gZmFjdCBFdWN0ZW1vbiB3YXMgYWNxdWl0dGVkIGFuZCB0aGVyZWZvcmUgVGltb2NyYXRlcyBkZW1hbmRzIHRoYXQKICAgICAgICAgICAgICAgICAgICB5b3VyIGRlY2lzaW9uLCB0aGUganVkZ2VtZW50IG9mIHRoZSBjb3VydCwgYW5kIGV2ZXJ5IG90aGVyIHN0YXR1dGUgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRlZCwgYW5kIHRoYXQgaGUgYW5kIGhpcyBsYXcgc2hhbGwgYWxvbmUgYmUgYXV0aG9yaXRhdGl2ZS4gPC90cmFuc2xhdGlvbj4="
translation['24.118'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTgiIHVuaXQ9InNlY3Rpb24iIC8+4oCUQW5kIHlldCwgVGltb2NyYXRlcywgbGF3cyB3aGljaCBhcmUgc3RpbGwKICAgICAgICAgICAgICAgICAgICBhdXRob3JpdGF0aXZlIGhhdmUgZ2l2ZW4gc3VwcmVtZSBhdXRob3JpdHkgdG8gdGhlIGdlbnRsZW1lbiBvZiB0aGUganVyeS4gVGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyBwZXJtaXQgdGhlbSwgYWZ0ZXIgaGVhcmluZyB0aGUgY2FzZSwgdG8gYWRqdXN0IHRoZWlyIGNvbmRlbW5hdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBvZmZlbmRlciB0byB0aGVpciB2aWV3IG9mIHRoZSBncmF2aXR5IG9mIHRoZSBvZmZlbmNlOyBsaWdodCBmb3IgbGlnaHQsIGhlYXZ5IGZvcgogICAgICAgICAgICAgICAgICAgIGhlYXZ5LiBXaGVuZXZlciB0aGUgcGhyYXNlIGlzLCDigJx3aGF0IHBlbmFsdHksIGNvcnBvcmFsIG9yIHBlY3VuaWFyeSwKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgYXdhcmRlZCzigJ0gdGhlIGF3YXJkIGlzIGF0IHRoZSBkaXNjcmV0aW9uIG9mIHRoZSBqdXJ5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.119'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTkiIHVuaXQ9InNlY3Rpb24iIC8+WW91LCB0aGVuLCBhYm9saXNoIHRoZSBjb3Jwb3JhbCBwZW5hbHR5CiAgICAgICAgICAgICAgICAgICAgYnkgcmVtaXR0aW5nIGltcHJpc29ubWVudC4gRm9yIHdob20/IEZvciB0aGlldmVzIGFuZCB0ZW1wbGUtcm9iYmVycywgZm9yCiAgICAgICAgICAgICAgICAgICAgcGFycmljaWRlcywgbXVyZGVyZXJzLCBzaGlya2VycywgYW5kIGRlc2VydGVycy4gQWxsIHN1Y2ggbWVuIHlvdSBwcm90ZWN0IGJ5IHlvdXIKICAgICAgICAgICAgICAgICAgICBsYXcuIEFuZCB5ZXQgZG9lcyBub3QgYSBtYW4gd2hvLCB1bmRlciBhIGZyZWUgY29uc3RpdHV0aW9uLCBsZWdpc2xhdGVzLCBub3QgdG8KICAgICAgICAgICAgICAgICAgICBwcm90ZWN0IHRoZSB0ZW1wbGVzLCBub3QgdG8gcHJvdGVjdCB0aGUgcGVvcGxlLCBidXQgdG8gcHJvdGVjdCBzdWNoIHBlb3BsZSBhcyBJCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBuYW1lZCwgZGVzZXJ2ZSB0byBzdWZmZXIgdGhlIGV4dHJlbWUgcGVuYWx0eT8gPC90cmFuc2xhdGlvbj4="
translation['24.120'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjAiIHVuaXQ9InNlY3Rpb24iIC8+4oCUQ2VydGFpbmx5IGhlIGNhbm5vdCBkZW55IHRoYXQgc3VjaCBwZW9wbGUgb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byBiZSwgYW5kIHRoYXQgdGhlIGxhd3MgbWFrZSB0aGVtLCBsaWFibGUgdG8gdGhlIGhlYXZpZXN0IHB1bmlzaG1lbnRzLiBOZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgY2FuIGhlIGRlbnkgdGhhdCB0aGUgbWVuIGZvciB3aG9zZSBwcm90ZWN0aW9uIGhlIGhhcyBpbnZlbnRlZCBoaXMgbGF3IGFyZQogICAgICAgICAgICAgICAgICAgIHRoaWV2ZXMgYW5kIHRlbXBsZS1yb2JiZXJzOyBmb3IgdGhlIGhhdmUgcm9iYmVkIHRoZSB0ZW1wbGVzIG9mIHRoZSB0ZW4gcGVyIGNlbnQKICAgICAgICAgICAgICAgICAgICBkdWUgdG8gQXRoZW5hIGFuZCBvZiB0aGUgdHdvIHBlciBjZW50IGR1ZSB0byB0aGUgb3RoZXIgZ29kczsgdGhleSBrZWVwIHRoZSBtb25leQogICAgICAgICAgICAgICAgICAgIGluIHRoZWlyIG93biBwb2NrZXRzIGluc3RlYWQgb2YgbWFraW5nIHJlc3RpdHV0aW9uLCBhbmQgdGhleSBoYXZlIHN0b2xlbiB0aGUKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgc2hhcmUsIHdoaWNoIGJlbG9uZ2VkIHRvIHlvdS4gVGhlaXIgc2FjcmlsZWdlIGRpZmZlcnMgZnJvbSBvdGhlciBmb3JtcyBvZgogICAgICAgICAgICAgICAgICAgIHNhY3JpbGVnZSB0byB0aGlzIGV4dGVudCzigJR0aGF0IHRoZXkgbmV2ZXIgZXZlbiBwYWlkIHRoZSBtb25leSBpbnRvIHRoZQogICAgICAgICAgICAgICAgICAgIEFjcm9wb2xpcyBhcyB0aGV5IG91Z2h0LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.121'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgSGVhdmVuIGlzIG15CiAgICAgICAgICAgICAgICAgICAgd2l0bmVzcywgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBJIGJlbGlldmUgQW5kcm90aW9uIGJlY2FtZSB0aGUgdmljdGltIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBhcnJvZ2FudCwgb3ZlcmJlYXJpbmcgdGVtcGVyLCBub3QgYnkgYWNjaWRlbnQsIGJ1dCBieSB0aGUgdmlzaXRhdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBnb2RzLCB0byB0aGUgZW5kIHRoYXQsIGFzIHRoZSBtdXRpbGF0b3JzIG9mIHRoZSBzdGF0dWUgb2YgVmljdG9yeSBwZXJpc2hlZCBieQogICAgICAgICAgICAgICAgICAgIHRoZWlyIG93biBoYW5kcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Tm90aGluZyBpcyBrbm93biBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGluY2lkZW50Ljwvbm90ZT4gc28gdGhlc2UgbWVuIHNob3VsZCBwZXJpc2ggYnkgbGl0aWdhdGlvbiBhbW9uZyB0aGVtc2VsdmVzLAogICAgICAgICAgICAgICAgICAgIGFuZCBzaG91bGQgZWl0aGVyIG1ha2UgdGVuZm9sZCByZXN0aXR1dGlvbiwgYXMgdGhlIGxhd3MgZGlyZWN0LCBvciBiZSBjYXN0IGludG8KICAgICAgICAgICAgICAgICAgICBwcmlzb24uIDwvdHJhbnNsYXRpb24+"
translation['24.122'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbGlrZSB0byBtYWtlIGFuIG9ic2VydmF0aW9uIGFib3V0IGhpcyBsYXcgd2hpY2ggb2NjdXJyZWQgdG8gbXkgbWluZCB3aGlsZQogICAgICAgICAgICAgICAgICAgIEkgd2FzIHNwZWFraW5nIGFib3V0IHRoZXNlIG1hdHRlcnMs4oCUc29tZXRoaW5nIHF1aXRlIG91dCBvZiB0aGUgY29tbW9uLAogICAgICAgICAgICAgICAgICAgIGluZGVlZCBzdXJwcmlzaW5nbHkgc28uIFRoZSBkZWZlbmRhbnQsIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgaGFzIHByb3Bvc2VkIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGUgcGVuYWx0eSBpbmZsaWN0ZWQgdXBvbiBmYXJtZXJzIG9mIHRheGVzLCBpZiB0aGV5IGRpZCBub3QgcGF5IHRoZWlyIGR1ZXMsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGJlIGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgZWFybGllciBzdGF0dXRlcywgaW4gd2hpY2ggdGhlIHBlbmFsdHkgcHJvdmlkZWQKICAgICAgICAgICAgICAgICAgICBpcyBpbXByaXNvbm1lbnQgYW5kIGRvdWJsZSByZXN0aXR1dGlvbiBmb3IgbWVuIHdobywgaW4gY29uc2VxdWVuY2Ugb2YgbG9zc2VzIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgY29udHJhY3QsIG1pZ2h0IHBvc3NpYmx5IGRvIHRoZSBTdGF0ZSBhIHdyb25nIHVuaW50ZW50aW9uYWxseS4gT24gdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgaGFuZCwgaGUgYWJvbGlzaGVzIGltcHJpc29ubWVudCBmb3IgbWVuIHdobyBzdGVhbCB0aGUgcHJvcGVydHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUgYW5kIHJvYiB0aGUgdGVtcGxlcyBvZiB0aGUgR29kZGVzcy7igJRJZiB5b3UgdGVsbCB1cywgVGltb2NyYXRlcywKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBsYXR0ZXIgYXJlIGd1aWx0eSBvZiBhIGxlc3Mgc2VyaW91cyBvZmZlbmNlIHRoYW4gdGhlIGZvcm1lciwgeW91IG11c3QKICAgICAgICAgICAgICAgICAgICBhZG1pdCB0aGF0IHlvdSBhcmUgb3V0IG9mIHlvdXIgc2Vuc2VzOyBhbmQgaWYgeW91IHRoaW5rIHRoZWlyIG9mZmVuY2UgbW9yZQogICAgICAgICAgICAgICAgICAgIHNlcmlvdXMsIGFzIGluZGVlZCBpdCBpcywgYW5kIHlldCByZWxlYXNlIHRoZW0gYW5kIHJlZnVzZSB0byByZWxlYXNlIHRoZSBvdGhlcnMsCiAgICAgICAgICAgICAgICAgICAgaXMgaXQgbm90IGV2aWRlbnQgdGhhdCB5b3UgaGF2ZSBzb2xkIHlvdXIgc2VydmljZXMgdG8gdGhlc2UgbWVuIGZvciBhIGJyaWJlPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.123'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFub3RoZXIKICAgICAgICAgICAgICAgICAgICByZW1hcmsgd29ydGggbWFraW5nLCBnZW50bGVtZW4gb2YgdGhlIGp1cnksIGlzIHRoYXQgeW91IGFyZSBmYXIgbW9yZSBtYWduYW5pbW91cwogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhlIHBvbGl0aWNpYW5zLiBBbnlob3cgeW91IGRvIG5vdCByZXBlYWwgdGhlIGhhcnNoIGVuYWN0bWVudHMgbWFkZSBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbW1vbiBwZW9wbGUs4oCUYWdhaW5zdCB0aG9zZSwgZm9yIGluc3RhbmNlLCB3aG8gdGFrZSBmZWVzIGZyb20KICAgICAgICAgICAgICAgICAgICBib3RoIHBhcnRpZXMsIG9yIGF0dGVuZCB0aGUgQXNzZW1ibHkgb3Igc2l0IG9uIGEganVyeSB3aGlsZSBpbiBkZWJ0IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHRyZWFzdXJ5LCBvciBkbyBhbnl0aGluZyBlbHNlIGZvcmJpZGRlbiBieSB0aGUgbGF3cyzigJRhbHRob3VnaCB5b3Uga25vdwogICAgICAgICAgICAgICAgICAgIHRoYXQgYW55IG1hbiB3aG8gY29tbWl0cyBvbmUgb2YgdGhlc2Ugb2ZmZW5jZXMgbWF5IGRvIHNvIGJlY2F1c2UgaGUgaXMgcG9vci4gWW91CiAgICAgICAgICAgICAgICAgICAgZG8gbm90IGVuYWN0IGxhd3MgdG8gZ2l2ZSBsaWJlcnR5IG9mIHRyYW5zZ3Jlc3Npb24sIGJ1dCByYXRoZXIgdG8gdGFrZSBpdCBhd2F5LgogICAgICAgICAgICAgICAgICAgIFRoZXksIG9uIHRoZSBvdGhlciBoYW5kLCBtYWtlIGxhd3MgdG8gcmVzY3VlIGZyb20gcHVuaXNobWVudCBwZXJzb25zIGd1aWx0eSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBtb3N0IGluZmFtb3VzIGFuZCBvdXRyYWdlb3VzIG1pc2NvbmR1Y3QuIDwvdHJhbnNsYXRpb24+"
translation['24.124'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZW4gaW4gcHJpdmF0ZSB0aGV5IHRhbGsgaW5zdWx0aW5nbHkgYWJvdXQgeW91LCBhcyB0aG91Z2ggdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgc3VwZXJpb3IgcGVyc29ucywgdGhvdWdoIHRoZXkgYXJlIHJlYWxseSBiZWhhdmluZyBsaWtlIGlsbC1jb25kaXRpb25lZCwKICAgICAgICAgICAgICAgICAgICB1bmdyYXRlZnVsIHNlcnZhbnRzLiBTZXJ2YW50cyB3aG8gaGF2ZSBiZWVuIG1hbnVtaXR0ZWQsIHlvdSBrbm93LCBnZW50bGVtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgYXJlIG5ldmVyIGdyYXRlZnVsIHRvIHRoZWlyIG1hc3RlcnMgZm9yIHRoZWlyIGxpYmVyYXRpb24sIGJ1dCBoYXRlCiAgICAgICAgICAgICAgICAgICAgdGhlbSBtb3JlIGJpdHRlcmx5IHRoYW4gdGhleSBoYXRlIGFueW9uZSBlbHNlLCBhcyBzaGFyaW5nIGluIHRoZSBzZWNyZXQgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBmb3JtZXIgc2Vydml0dWRlLiBJbiB0aGUgc2FtZSBzcGlyaXQgcG9saXRpY2lhbnMgYXJlIG5vdCBzYXRpc2ZpZWQgd2l0aCBoYXZpbmcKICAgICAgICAgICAgICAgICAgICByaXNlbiBmcm9tIHBvdmVydHkgdG8gYWZmbHVlbmNlIGF0IHRoZSBleHBlbnNlIG9mIHRoZSBDaXR5LCBidXQgY2FsdW1uaWF0ZSB0aGUKICAgICAgICAgICAgICAgICAgICBjb21tb24gcGVvcGxlLOKAlGJlY2F1c2UgdGhlIGNvbW1vbiBwZW9wbGUga25vdyB3aGF0IHRoZWlyIHN0eWxlIG9mIGxpZmUKICAgICAgICAgICAgICAgICAgICB3YXMgd2hlbiB0aGV5IHdlcmUgeW91bmcgYW5kIHBvb3IuIDwvdHJhbnNsYXRpb24+"
translation['24.125'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkJ1dCBpdCB3b3VsZCBwZXJoYXBzLCBhcyBoZSBtYXkgc3VnZ2VzdCwgaGF2ZSBiZWVuIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBzaGFtZSBmb3IgQW5kcm90aW9uIHRvIGJlIHNlbnQgdG8gcHJpc29uLCBvciBmb3IgR2xhdWNldGVzLCBvciBNZWxhbm9wdXMuCiAgICAgICAgICAgICAgICAgICAgTm8sIGluZGVlZCwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5ISBJdCB3aWxsIGJlIGEgZmFyIGdyZWF0ZXIgc2hhbWUgaWYgYW4gaW5qdXJlZAogICAgICAgICAgICAgICAgICAgIGFuZCBpbnN1bHRlZCBjb21tb253ZWFsdGggc2hhbGwgZXhhY3Qgbm8gcmV0cmlidXRpb24gZm9yIHRoZSBHb2RkZXNzIG9yIGZvcgogICAgICAgICAgICAgICAgICAgIGl0c2VsZi4gRG9lcyBub3QgaW1wcmlzb25tZW50IHJ1biBpbiBBbmRyb3Rpb24ncyBmYW1pbHk/IFdoeSwgeW91IGtub3cKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzIHRoYXQgaGlzIGZhdGhlciBvZnRlbiB3ZW50IHRvIGphaWwgZm9yIGZpdmUgeWVhcnMgYXQgYSBzdHJldGNoOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVuIGhlIHdhcyBub3QgZGlzY2hhcmdlZOKAlGhlIHJhbiBhd2F5LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.126'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjYiIHVuaXQ9InNlY3Rpb24iIC8+T3IgaGFzIGhlIGVhcm5lZCBmb3JnaXZlbmVzcyBieSBoaXMgY29uZHVjdCBpbiB5b3V0aD8gV2h5LAogICAgICAgICAgICAgICAgICAgIGhlIGRlc2VydmVzIGltcHJpc29ubWVudCBmb3IgdGhhdCBjb25kdWN0IGp1c3QgYXMgbXVjaCBhcyBmb3IgaGlzIGVtYmV6emxlbWVudHMuCiAgICAgICAgICAgICAgICAgICAgRG8geW91IG1lYW4gYmVjYXVzZSBoZSBmcmVxdWVudGVkIHRoZSBtYXJrZXQtcGxhY2UgYmVmb3JlIGhlIHdhcyBxdWFsaWZpZWQsIGFuZAogICAgICAgICAgICAgICAgICAgIHdpdGggaGlzIG93biBoYW5kcyBoYWxlZCBtZW4gb2YgcmVzcGVjdGFibGUgbGlmZSBmcm9tIHRoZSBtYXJrZXQtcGxhY2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgamFpbD8gQnV0IHRoZXJlIGlzIE1lbGFub3B1cywgeW91IHNheSwgYW5kIHdoYXQgYSBkcmVhZGZ1bCB0aGluZyBpdCB3b3VsZCBiZSBpZgogICAgICAgICAgICAgICAgICAgIE1lbGFub3B1cyB3ZXJlIGNvbW1pdHRlZCB0byBwcmlzb24gdG9kYXkhIDwvdHJhbnNsYXRpb24+"
translation['24.127'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjciIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgYWJvdXQgaGlzIGZhdGhlciBJIHdpbGwgc2F5IG5vdGhpbmcgZGlzcmVzcGVjdGZ1bDsgdGhvdWdoIEkgY291bGQgdGVsbAogICAgICAgICAgICAgICAgICAgIHlvdSBhIGxvbmcgc3RvcnkgYWJvdXQgdGhpZXZpbmcs4oCUaG93ZXZlciwgc28gZmFyIGFzIEkgYW0gY29uY2VybmVkLAogICAgICAgICAgICAgICAgICAgIGxldCBoaXMgZmF0aGVyIGJlIHdvcnRoeSBvZiBhbGwgdGhlIGNvbXBsaW1lbnRzIHRoYXQgVGltb2NyYXRlcyBtYXkgbGF2aXNoIHVwb24KICAgICAgICAgICAgICAgICAgICBoaW0uIEJ1dCBzdXBwb3NlIHRoYXQgdGhlIHNvbiBvZiB0aGlzIHZpcnR1b3VzIGZhdGhlciB3YXMgaGltc2VsZiBhIHJhc2NhbCBhbmQgYQogICAgICAgICAgICAgICAgICAgIHRoaWVmOyBzdXBwb3NlIHRoYXQgaGUgb25jZSBwYWlkIGEgZmluZSBvZiB0aHJlZSB0YWxlbnRzIG9uIGNvbnZpY3Rpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgdHJlYXNvbjsgc3VwcG9zZSB0aGF0LCBhZnRlciBoZSBoYWQgc2F0IGluIHRoZSBBbGxpZWQgQ29uZ3Jlc3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBTZWNvbmQgQXRoZW5pYW4gQ29uZmVkZXJhY3ksIGFzIHJlZm9ybWVkIGluIDM3Ny48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdXJ0IGZvdW5kIGhpbSBndWlsdHkgb2YgZW1iZXp6bGVtZW50LCBhbmQgb3JkZXJlZCBoaW0gdG8gbWFrZSB0ZW5mb2xkCiAgICAgICAgICAgICAgICAgICAgcmVzdGl0dXRpb247IHN1cHBvc2UgdGhhdCBoZSBwbGF5ZWQgZmFsc2Ugd2hlbiBoZSB3ZW50IG9uIGVtYmFzc3kgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTY4MzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNjgzMyI+RWd5cHQ8L3BsYWNlTmFtZT47IHN1cHBvc2UgdGhhdCBoZSBzd2luZGxlZCBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlcnPigJRkb2VzIGhlIG5vdCBkZXNlcnZlIGltcHJpc29ubWVudCBhbGwgdGhlIG1vcmUgaWYgaGlzIGZhdGhlcgogICAgICAgICAgICAgICAgICAgIHdhcyB2aXJ0dW91cywgYW5kIGhlIGlzIHdoYXQgaGUgaXM/IEZvciBteSBwYXJ0LCBJIGZhbmN5IHRoYXQsIGlmIExhY2hlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZmF0aGVyIG9mIE1lbGFub3B1czsgcHJvYmFibHkgbm90IHRoZQogICAgICAgICAgICAgICAgICAgICAgICB3ZWxsLWtub3duIGdlbmVyYWwgd2hvIGZlbGwgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNYW50aW5lYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWFudGluZWEiPk1hbnRpbmVhPC9wbGFjZU5hbWU+LCA0MTguPC9ub3RlPiByZWFsbHkgd2FzIHZpcnR1b3VzIGFuZCBwYXRyaW90aWMsIGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGhpbXNlbGYgaGF2ZSBzZW50IGhpcyBkZWdlbmVyYXRlIHNvbiB0byBqYWlsIGZvciBpbXBsaWNhdGluZyBoaW0gaW4gc3VjaAogICAgICAgICAgICAgICAgICAgIGluZmFtb3VzIHNjYW5kYWxzLiBIb3dldmVyLCBsZXQgdXMgcGFzcyBNZWxhbm9wdXMgYnksIGFuZCBmaXggb3VyIGdhemUgdXBvbgogICAgICAgICAgICAgICAgICAgIEdsYXVjZXRlcy4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNYW50aW5lYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWFudGluZWEiPk1hbnRpbmVhPC9wbGFjZU5hbWU+LCA0MTguPC90cmFuc2xhdGlvbj4="
translation['24.128'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjgiIHVuaXQ9InNlY3Rpb24iIC8+V2FzIG5vdCBoZSB0aGUgbWFuIHdobyBmaXJzdCByYW4KICAgICAgICAgICAgICAgICAgICBhd2F5IHRvIERlY2VsZWlhLCBhbmQsIHdpdGggRGVjZWxlaWEgYXMgaGlzIGJhc2UsIG92ZXJyYW4gYW5kIGhhcnJpZWQgeW91cgogICAgICAgICAgICAgICAgICAgIGNvdW50cnk/IEJ1dCB5b3UgYWxsIGtub3cgdGhhdC4gV2FzIGl0IG5vdCBoZSB3aG8gc2NydXB1bG91c2x5IHBhaWQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgU3BhcnRhbiBnb3Zlcm5vciBhdCB0aGF0IHBsYWNlIHRpdGhlcyBkdWUgdXBvbiB5b3VyIHdpdmVzIGFuZCBjaGlsZHJlbiBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlIHJlc3Qgb2YgaGlzIGJvb3R5OyA8L3RyYW5zbGF0aW9uPg=="
translation['24.129'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjkiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHlldCwgd2hlbiB5b3UgaGFkCiAgICAgICAgICAgICAgICAgICAgaG9ub3JlZCBoaW0gd2l0aCB0aGUgb2ZmaWNlIG9mIGFtYmFzc2Fkb3IsIHJvYmJlZCB0aGUgR29kZGVzcyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gb2YgaGVyIHRpdGhlIG9mIHRoZSBwbHVuZGVyIGhlIHRvb2sKICAgICAgICAgICAgICAgICAgICBmcm9tIHlvdXIgZW5lbWllcz8gV2FzIGl0IG5vdCBoZSB3aG8sIGJlaW5nIGFwcG9pbnRlZCB0cmVhc3VyZXIgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgQWNyb3BvbGlzLCBzdG9sZSBmcm9tIHRoYXQgcGxhY2UgdGhvc2UgcHJpemVzIG9mIHZpY3Rvcnkgd2hpY2ggb3VyIGFuY2VzdG9ycwogICAgICAgICAgICAgICAgICAgIGNhcnJpZWQgb2ZmIGZyb20gdGhlIGJhcmJhcmlhbnMsIHRoZSB0aHJvbmUgd2l0aCBzaWx2ZXIgZmVldCwgYW5kIE1hcmRvbml1cydzCiAgICAgICAgICAgICAgICAgICAgc2NpbWl0YXIsIHdoaWNoIHdlaWdoZWQgdGhyZWUgaHVuZHJlZCBkYXJpY3M/IFRoZXNlIGV4cGxvaXRzLCBob3dldmVyLCBhcmUgc28KICAgICAgICAgICAgICAgICAgICBjZWxlYnJhdGVkIHRoYXQgdGhleSBhcmUga25vd24gdG8gZXZlcnlib2R5LiBCdXQgaW4gZXZlcnl0aGluZyBlbHNlIGlzIGhlIG5vdCBhCiAgICAgICAgICAgICAgICAgICAgbWFuIG9mIHZpb2xlbmNlPyBBeWUsIGhlIGhhcyBubyBlcXVhbCBmb3IgdGhhdC4gPC90cmFuc2xhdGlvbj4="
translation['24.130'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzAiIHVuaXQ9InNlY3Rpb24iIC8+SXMgaXQgcmlnaHQsIHRoZW4sIHRoYXQgeW91IHNob3VsZCBkZWFsIHRlbmRlcmx5IHdpdGggYW55CiAgICAgICAgICAgICAgICAgICAgb25lIG9mIHRoZW0sIGFuZCBkaXNyZWdhcmQgZm9yIHRoZWlyIHNha2VzIHRoZSB0aXRoZXMgb2YgQXRoZW5hIG9yIHRoZSBkb3VibGUKICAgICAgICAgICAgICAgICAgICByZXBheW1lbnQgb2YgcHVibGljIG1vbmV5cz8gSXMgaXQgcmlnaHQgdG8gbGVhdmUgdW5wdW5pc2hlZCB0aGUgbWFuIHdobyBpcwogICAgICAgICAgICAgICAgICAgIGV4ZXJ0aW5nIGhpbXNlbGYgdG8gc2F2ZSB0aGVtPyBXaGF0IGlzIHRoZXJlLCBnZW50bGVtZW4sIHRvIHByZXZlbnQgZXZlcnlib2R5CiAgICAgICAgICAgICAgICAgICAgdHVybmluZyBrbmF2ZSwgaWYga25hdmVyeSBpcyB0byBiZSBwcm9maXRhYmxlPyBOb3RoaW5nIHRoYXQgSSBjYW4gc2VlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.131'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBtdXN0CiAgICAgICAgICAgICAgICAgICAgcHVuaXNoIGNyaW1lLCBub3QgZW5jb3VyYWdlIGl0IGJ5IHlvdXIgb3duIHRlYWNoaW5nLiBEbyBub3QgbGV0IHRoZW0gbWFrZSBhCiAgICAgICAgICAgICAgICAgICAgZ3JpZXZhbmNlIG9mIGdvaW5nIHRvIHByaXNvbiB3aXRoIHlvdXIgbW9uZXkgaW4gdGhlaXIgcG9ja2V0cywgYnV0IGJyaW5nIHRoZW0KICAgICAgICAgICAgICAgICAgICB1bmRlciB0aGUgeW9rZSBvZiBsYXcuIFBlb3BsZSBjb252aWN0ZWQgdW5kZXIgdGhlIGFsaWVuIGFjdHMgZG8gbm90IHRoaW5rCiAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcyBhZ2dyaWV2ZWQgd2hlbiB0aGV5IGFyZSBrZXB0IGluIHlvbmRlciBidWlsZGluZzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ov+G8tM66zrfOvM6xPC9mb3JlaWduPiBpcyBhIGNvbW1vbgogICAgICAgICAgICAgICAgICAgICAgICBldXBoZW1pc20gZm9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zrXPg868z4nPhOG9tc+BzrnOv869PC9mb3JlaWduPi4gVGhlcmUgc2VlbXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIG9ubHkgb25lIHByaXNvbiBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFuZCB0aGlzIHBhc3NhZ2Ugc3VnZ2VzdHMgdGhhdCBpdCB3YXMgaW4gdmlldyBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQWdvcmE7IGJ1dCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhM6/4b27z4Thv7M8L2ZvcmVpZ24+IGlzIG5vdCBuZWNlc3NhcmlseQogICAgICAgICAgICAgICAgICAgICAgICBkZWljdGljLjwvbm90ZT4gdW50aWwgdGhlIHRyaWFsIGZvciBmYWxzZSBldmlkZW5jZSBpcyBvdmVyOyB0aGV5IHNpbXBseSBzdGF5CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2l0aG91dCBleHBlY3RpbmcgdG8gZ2V0IHRoZSBmcmVlZG9tIG9mIHRoZSBzdHJlZXRzIGJ5IHB1dHRpbmcgaW4gYmFpbC4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zr/hvLTOus63zrzOsTwvZm9yZWlnbj4gaXMgYSBjb21tb24KICAgICAgICAgICAgICAgICAgICAgICAgZXVwaGVtaXNtIGZvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OtM61z4POvM+Jz4ThvbXPgc65zr/OvTwvZm9yZWlnbj4uIFRoZXJlIHNlZW1zIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBvbmx5IG9uZSBwcmlzb24gYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBhbmQgdGhpcyBwYXNzYWdlIHN1Z2dlc3RzIHRoYXQgaXQgd2FzIGluIHZpZXcgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIEFnb3JhOyBidXQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4TOv+G9u8+E4b+zPC9mb3JlaWduPiBpcyBub3QgbmVjZXNzYXJpbHkKICAgICAgICAgICAgICAgICAgICAgICAgZGVpY3RpYy48L3RyYW5zbGF0aW9uPg=="
translation['24.132'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNvbW1vbndlYWx0aCwgaGF2aW5nIGRlY2lkZWQgdG8KICAgICAgICAgICAgICAgICAgICBkaXN0cnVzdCB0aGVtLCBkaWQgbm90IGNob29zZSB0byBiZSBjaGVhdGVkIG9mIHJldHJpYnV0aW9uIGJ5IHRoZSBwcm9jZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgcHV0dGluZyBpbiBiYWlsLCBidXQgcHJlZmVycmVkIHRoYXQgdGhleSBzaG91bGQgc3RheSBpbiBhIHBsYWNlIHdoZXJlIG1hbnkKICAgICAgICAgICAgICAgICAgICBnZW51aW5lIEF0aGVuaWFucyBoYXZlIHNvam91cm5lZC4gWWV0LiBwZW9wbGUgaGF2ZSBiZWVuIGltcHJpc29uZWQgdGhlcmUgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgbm93IGJvdGggZm9yIGRlYnQgYW5kIG9uIGp1ZGdlbWVudCwgYW5kIGhhdmUgdGFrZW4gaXQgcXVpZXRseS4gUGVyaGFwcyBpdCBpcwogICAgICAgICAgICAgICAgICAgIHJhdGhlciBpbnZpZGlvdXMgdG8gbWVudGlvbiBuYW1lcywgYnV0IEkgY2Fubm90IGhlbHAgZ2l2aW5nIHlvdSBhIGxpc3QgZm9yCiAgICAgICAgICAgICAgICAgICAgY29tcGFyaXNvbiB3aXRoIHRoZSBtZW4gYmVmb3JlIHlvdS4gPC90cmFuc2xhdGlvbj4="
translation['24.133'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzMiIHVuaXQ9InNlY3Rpb24iIC8+SSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbm90IG1lbnRpb24gdmVyeSBhbmNpZW50IGluc3RhbmNlcywgb3IgYW55IGVhcmxpZXIgdGhhbiB0aGUgYXJjaG9uc2hpcCBvZgogICAgICAgICAgICAgICAgICAgICAgICBFdWNsZWlkZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgQi5DLjwvbm90ZT47IGJ1dCBJIG11c3Qgb2JzZXJ2ZSB0aGF0IG1hbnkgbWVuLCB3aG8gaW4gdGhlaXIgb3duIGdlbmVyYXRpb24KICAgICAgICAgICAgICAgICAgICB3ZXJlIGhpZ2hseSBlc3RlZW1lZCBmb3IgdGhlaXIgZWFybGllciBjb25kdWN0LCB3ZXJlIG5ldmVydGhlbGVzcyBtb3N0IHNldmVyZWx5CiAgICAgICAgICAgICAgICAgICAgdHJlYXRlZCBieSB0aGUgUGVvcGxlIGZvciB0aGUgb2ZmZW5jZXMgb2YgdGhlaXIgbGF0ZXIgbGlmZS4gVGhlIGNvbW1vbndlYWx0aCB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgY29udGVudCB3aXRoIGEgcGVyaW9kIG9mIGhvbmVzdHkgZm9sbG93ZWQgYnkga25hdmVyeSwgYnV0IGV4cGVjdGVkCiAgICAgICAgICAgICAgICAgICAgdW5pbnRlcnJ1cHRlZCBob25lc3R5IGluIHB1YmxpYyBkZWFsaW5ncy4gVGhlIHByZXZpb3VzIGhvbmVzdHkgb2Ygc3VjaCBhIHBlcnNvbgogICAgICAgICAgICAgICAgICAgIHdhcyBub3QsIGluIHRoZWlyIHZpZXcsIGF0dHJpYnV0YWJsZSB0byBpbm5hdGUgdmlydHVlOyBpdCB3YXMgcGFydCBvZiBhIHNjaGVtZQogICAgICAgICAgICAgICAgICAgIHRvIGF0dHJhY3QgY29uZmlkZW5jZS4gPGRhdGUgYXV0aG5hbWU9Ii00MDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MDMiPjQwMzwvZGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgQi5DLjwvdHJhbnNsYXRpb24+"
translation['24.134'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIHRoZQogICAgICAgICAgICAgICAgICAgIGFyY2hvbnNoaXAgb2YgRXVjbGVpZGVzLCBnZW50bGVtZW4gb2YgdGhlIGp1cnksIGZpcnN0LCB5b3UgYWxsIHJlbWVtYmVyIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgd2VsbC1rbm93biBUaHJhc3lidWx1cyBvZiBDb2x5dHR1cyB3YXMgdHdpY2UgaW1wcmlzb25lZCBhbmQgY29uZGVtbmVkIGF0IGJvdGgKICAgICAgICAgICAgICAgICAgICBoaXMgdHJpYWxzIGJlZm9yZSB0aGUgQXNzZW1ibHk7IGFuZCB5ZXQgaGUgd2FzIG9uZSBvZiB0aGUgaGVyb2VzIG9mIHRoZSBtYXJjaAogICAgICAgICAgICAgICAgICAgIGZyb20gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQaHlsZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGh5bGUiPlBoeWxlPC9wbGFjZU5hbWU+IGFuZCBQZWlyYWV1cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VG8gZW5kIHRoZSBydWxlIG9mIHRoZSBUaGlydHkgVHlyYW50cy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgVGhlbiB0aGVyZSB3YXMgUGhpbGVwc2l1cyBvZiBMYW1wdHJhLiBOZXh0IHRha2UgQWd5cnJoaXVzIG9mIENvbHl0dHVzLCBhIGdvb2QKICAgICAgICAgICAgICAgICAgICBtYW4sIGEgbGliZXJhbCBwb2xpdGljaWFuLCBhbmQgYW4gYXJkZW50IGRlZmVuZGVyIG9mIHBvcHVsYXIgcmlnaHRzOyA8L3RyYW5zbGF0aW9uPg=="
translation['24.135'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzUiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHlldCBldmVuIGhlIGFkbWl0dGVkIHRoYXQgdGhlIGxhd3MgbXVzdCBiZSBhcwogICAgICAgICAgICAgICAgICAgIGJpbmRpbmcgdXBvbiBoaW0gYXMgdXBvbiBwZW9wbGUgd2l0aG91dCBpbmZsdWVuY2UsIGFuZCBoZSBzdGF5ZWQgaW4gdGhhdAogICAgICAgICAgICAgICAgICAgIGJ1aWxkaW5nIGZvciBtYW55IHllYXJzLCB1bnRpbCBoZSBoYWQgcmVwYWlkIHRoZSBtb25leSBpbiBoaXMgcG9zc2Vzc2lvbiB3aGljaAogICAgICAgICAgICAgICAgICAgIHdhcyBhZGp1ZGdlZCB0byBiZSBwdWJsaWMgcHJvcGVydHk7IG5vciBkaWQgQ2FsbGlzdHJhdHVzLCB3aG8gd2FzIGluIHBvd2VyLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aG8gd2FzIGhpcyBuZXBoZXcsIHRyeSB0byBtYWtlIG5ldyBsYXdzIHRvIG1lZXQgaGlzIHBhcnRpY3VsYXIgY2FzZS4gT3IgdGFrZQogICAgICAgICAgICAgICAgICAgIE15cm9uaWRlczsgaGUgd2FzIHRoZSBzb24gb2YgdGhhdCBBcmNoaW51cyB3aG8gb2NjdXBpZWQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxQaHlsZSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsUGh5bGUiPlBoeWxlPC9wbGFjZU5hbWU+LCBhbmQgd2hvbSwgYWZ0ZXIgdGhlIGdvZHMsIHdlIGhhdmUKICAgICAgICAgICAgICAgICAgICBjaGllZmx5IHRvIHRoYW5rIGZvciB0aGUgcmVzdG9yYXRpb24gb2YgcG9wdWxhciBnb3Zlcm5tZW50LCBhbmQgd2hvIGhhZCBhY2hpZXZlZAogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3Mgb24gbWFueSBvY2Nhc2lvbnMgYm90aCBhcyBzdGF0ZXNtYW4gYW5kIGFzIGNvbW1hbmRlci4gPC90cmFuc2xhdGlvbj4="
translation['24.136'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzYiIHVuaXQ9InNlY3Rpb24iIC8+SW4gc3BpdGUgb2YgdGhlaXIgbWVyaXRzLCB0aGVzZSBtZW4gYWxsIHN1Ym1pdHRlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdzLiBBZ2FpbiwgdGhlIHRyZWFzdXJlcnMgb2YgQXRoZW5hIGFuZCBvZiB0aGUgb3RoZXIgZ29kcywgZHVyaW5nIHdob3NlIHRlcm0KICAgICAgICAgICAgICAgICAgICB0aGUgSW5uZXIgVHJlYXN1cnkgd2FzIGJ1cm5lZCBkb3duLCB3ZXJlIGxvZGdlZCBpbiB5b25kZXIgYnVpbGRpbmcgcGVuZGluZyB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRyaWFsOyBzbyB0b28gd2VyZSB0aGUgcGVyc29ucyBzdXNwZWN0ZWQgb2YgdGhlIGNvcm4tbWFya2V0IGZyYXVkcywgYW5kIG1hbnkKICAgICAgICAgICAgICAgICAgICBvdGhlcnMsIGdlbnRsZW1lbiBvZiB0aGUganVyeSzigJRhbGwgYmV0dGVyIG1lbiB0aGFuIEFuZHJvdGlvbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.137'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzciIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBpZiBpdCB3YXMgcmlnaHQgdGhhdCBmb3IgdGhlbSB0aGUKICAgICAgICAgICAgICAgICAgICBvbGQtZXN0YWJsaXNoZWQgbGF3cyBzaG91bGQgYmUgb3BlcmF0aXZlLCBhbmQgdGhhdCB0aGV5IHNob3VsZCBiZSBwdW5pc2hlZCBpbgogICAgICAgICAgICAgICAgICAgIGFjY29yZGFuY2Ugd2l0aCB0aGUgZXhpc3RpbmcgbGF3cywgY2FuIGl0IGJlIHJpZ2h0IHRoYXQgZm9yIHRoZSBzYWtlIG9mCiAgICAgICAgICAgICAgICAgICAgQW5kcm90aW9uLCBHbGF1Y2V0ZXMsIGFuZCBNZWxhbm9wdXMsIGEgYnJhbmQtbmV3IHN0YXR1dGUgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgbWFkZSzigJRmb3IgbWVuIHdobyBoYXZlIGJlZW4gZm91bmQgZ3VpbHR5IGFuZCBjb25kZW1uZWQgYnkgdmVyZGljdCBpbgogICAgICAgICAgICAgICAgICAgIHB1cnN1YW5jZSBvZiBvbGQtZXN0YWJsaXNoZWQgbGF3cywgYW5kIHdobyBhcmUgZGVjbGFyZWQgdG8gYmUgZGV0YWluaW5nIHNhY3JlZAogICAgICAgICAgICAgICAgICAgIGFuZCBwdWJsaWMgbW9uZXlzPyBXaWxsIG5vdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4KICAgICAgICAgICAgICAgICAgICBiZSBhIGxhdWdoaW5nLXN0b2NrIGlmIHNoZSBpcyBkaXNjb3ZlcmVkIGVuYWN0aW5nIGxhd3MgZm9yIHRoZSBkZWxpdmVyYW5jZSBvZgogICAgICAgICAgICAgICAgICAgIHRlbXBsZSByb2JiZXJzPyA8L3RyYW5zbGF0aW9uPg=="
translation['24.138'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzgiIHVuaXQ9InNlY3Rpb24iIC8+U28gSSBzaG91bGQgc2F5LiBUaGVuIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIHRvbGVyYXRlIGFueSBpbnN1bHQgdG8geW91cnNlbHZlcyBvciB0byB0aGUgU3RhdGUuIFJlbWVtYmVyIGhvdywgbm8gbG9uZ2VyIGFnbwogICAgICAgICAgICAgICAgICAgIHRoYW4gdGhlIGFyY2hvbnNoaXAgb2YgRXZhbmRlciwgeW91IHB1dCBFdWRlbXVzIG9mIEN5ZGF0aGVuYWV1bSB0byBkZWF0aCwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIHlvdSBoZWxkIGhpbSB0byBoYXZlIHByb3Bvc2VkIGFuIG9iamVjdGlvbmFibGUgc3RhdHV0ZTsgYW5kIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgd2VyZSB3aXRoaW4gYW4gYWNlIGFsc28gb2YgcHV0dGluZyB0byBkZWF0aCBQaGlsaXAsIHRoZSBzb24gb2YgUGhpbGlwIHRoZQogICAgICAgICAgICAgICAgICAgIHNoaXAtb3duZXIsIGJ1dCwgYnkgYSB2ZXJ5IHNtYWxsIG1ham9yaXR5LCB5b3UgYWNjZXB0ZWQgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGNvdW50ZXItYXNzZXNzbWVudCBvZiB0aGUgcGVuYWx0eSwgYW5kIG1hZGUgaGltIHBheSBhIHZlcnkgaGVhdnkgZmluZS4gVHJlYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IHRvZGF5IGluIHRoZSBzYW1lIHNwaXJpdCBvZiBzZXZlcml0eS4gQW5kIHRoZXJlIGlzIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmF0aW9uIGZvciB5b3UgdG8gYmVhciBpbiBtaW5kLOKAlGhvdyBpbmp1cmlvdXNseSB5b3Ugd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gdHJlYXRlZCBieSBUaW1vY3JhdGVzLCBpZiBoZSBhbG9uZSBoYWQgYmVlbiB5b3VyIGFtYmFzc2Fkb3IuIEkgcmVhbGx5CiAgICAgICAgICAgICAgICAgICAgYmVsaWV2ZSB0aGF0IHRoZXJlIGlzIG5vdGhpbmcgZnJvbSB3aGljaCBzdWNoIGEgZmVsbG93IHdvdWxkIGhhdmUga2VwdCBoaXMKICAgICAgICAgICAgICAgICAgICBoYW5kcy4gSGF2ZSByZWdhcmQgYWxzbyB0byB0aGUgZGlzcG9zaXRpb24gb2YgdGhlIG1hbjsgZm9yIHRoZSBsYXcgd2hpY2ggaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgaGFkIHRoZSBhdWRhY2l0eSB0byBwcm9wb3NlIGlzIHNpZ25pZmljYW50IG9mIGhpcyBjaGFyYWN0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['24.139'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMzkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgc2hvdWxkIGxpa2UsIGdlbnRsZW1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCB0byBnaXZlIHlvdSBhIGRlc2NyaXB0aW9uIG9mIHRoZSBtZXRob2Qgb2YgbGVnaXNsYXRpb24gYW1vbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgTG9jcmlhbnMuIEl0IHdpbGwgZG8geW91IG5vIGhhcm0gdG8gaGVhciBhbiBleGFtcGxlLCBlc3BlY2lhbGx5IG9uZSBzZXQgYnkgYQogICAgICAgICAgICAgICAgICAgIHdlbGwtZ292ZXJuZWQgY29tbXVuaXR5LiBJbiB0aGF0IGNvdW50cnkgdGhlIHBlb3BsZSBhcmUgc28gc3Ryb25nbHkgb2Ygb3BpbmlvbgogICAgICAgICAgICAgICAgICAgIHRoYXQgaXQgaXMgcmlnaHQgdG8gb2JzZXJ2ZSBvbGQtZXN0YWJsaXNoZWQgbGF3cywgdG8gcHJlc2VydmUgdGhlIGluc3RpdHV0aW9ucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZWlyIGZvcmVmYXRoZXJzLCBhbmQgbmV2ZXIgdG8gbGVnaXNsYXRlIGZvciB0aGUgZ3JhdGlmaWNhdGlvbiBvZiB3aGltcywgb3IKICAgICAgICAgICAgICAgICAgICBmb3IgYSBjb21wcm9taXNlIHdpdGggdHJhbnNncmVzc2lvbiwgdGhhdCBpZiBhIG1hbiB3aXNoZXMgdG8gcHJvcG9zZSBhIG5ldyBsYXcsCiAgICAgICAgICAgICAgICAgICAgaGUgbGVnaXNsYXRlcyB3aXRoIGEgaGFsdGVyIHJvdW5kIGhpcyBuZWNrLiBJZiB0aGUgbGF3IGlzIGFjY2VwdGVkIGFzIGdvb2QgYW5kCiAgICAgICAgICAgICAgICAgICAgYmVuZWZpY2lhbCwgdGhlIHByb3Bvc2VyIGRlcGFydHMgd2l0aCBoaXMgbGlmZSwgYnV0LCBpZiBub3QsIHRoZSBoYWx0ZXIgaXMgZHJhd24KICAgICAgICAgICAgICAgICAgICB0aWdodCwgYW5kIGhlIGlzIGEgZGVhZCBtYW4uIDwvdHJhbnNsYXRpb24+"
translation['24.140'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDAiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdmVyeSB0cnV0aAogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIG5vdCBib2xkIGVub3VnaCB0byBwcm9wb3NlIG5ldyBsYXdzLCBidXQgcHVuY3R1YWxseSBvYmV5IHRoZSBvbGQgb25lcy4KICAgICAgICAgICAgICAgICAgICBBbmQsIGR1cmluZyBxdWl0ZSBhIGxvbmcgc2VyaWVzIG9mIHllYXJzLCB3ZSBhcmUgdG9sZCwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LAogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBoYXZlIGVuYWN0ZWQgb25seSBvbmUgbmV3IHN0YXR1dGUuIFRoZXkgaGFkIGEgbGF3IGluIHRoYXQgY291bnRyeQogICAgICAgICAgICAgICAgICAgIHRoYXQsIGlmIGFueSBvbmUgZGVzdHJveWVkIGhpcyBuZWlnaGJvcidzIGV5ZSwgaGUgbXVzdCBzdWJtaXQgdG8gdGhlIGRlc3RydWN0aW9uCiAgICAgICAgICAgICAgICAgICAgb2Ygb25lIG9mIGhpcyBvd24gZXllczsgYW5kIHRoZXJlIHdhcyBubyBhbHRlcm5hdGl2ZSBvZiBhIGZpbmUuIFRoZSBzdG9yeSBnb2VzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIG1hbiwgd2hvc2UgZW5lbXkgaGFkIG9ubHkgb25lIGV5ZSwgdGhyZWF0ZW5lZCB0byBrbm9jayB0aGF0IG9uZSBleWUgb3V0LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.141'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG9uZS1leWVkIG1hbiB3YXMgbXVjaCBwZXJ0dXJiZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgdGhyZWF0LCBhbmQsIHJlZmxlY3RpbmcgdGhhdCBoaXMgbGlmZSB3b3VsZCBub3QgYmUgd29ydGgga2VlcGluZyBhZnRlciBzdWNoCiAgICAgICAgICAgICAgICAgICAgYSBsb3NzIGFzIHRoYXQsIGhlIHBsdWNrZWQgdXAgY291cmFnZSwgYXMgd2UgYXJlIHRvbGQsIHRvIGludHJvZHVjZSBhIGxhdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hvc29ldmVyIHN0cnVjayBvdXQgdGhlIGV5ZSBvZiBhIG1hbiB3aG8gaGFkIG9ubHkgb25lLCBzaG91bGQgc3VibWl0IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGxvc3Mgb2YgYm90aCBoaXMgb3duIGV5ZXMsIGluIG9yZGVyIHRoYXQgYm90aCBtaWdodCBzdWZmZXIgdGhlIHNhbWUgYWZmbGljdGlvbi4KICAgICAgICAgICAgICAgICAgICBBbmQgdGhhdCwgYWNjb3JkaW5nIHRvIHRoZSBzdG9yeSwgaXMgdGhlIG9ubHkgbmV3IHN0YXR1dGUgYWRvcHRlZCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBMb2NyaWFucyBmb3IgbW9yZSB0aGFuIHR3byBodW5kcmVkIHllYXJzLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.142'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0CiAgICAgICAgICAgICAgICAgICAgaW4gdGhpcyBjaXR5LCBnZW50bGVtZW4gb2YgdGhlIGp1cnksIG91ciBwb2xpdGljaWFucyByYXJlbHkgbGV0IGEgbW9udGggZ28gYnkKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGxlZ2lzbGF0aW5nIHRvIHN1aXQgdGhlaXIgcHJpdmF0ZSBlbmRzLiBXaGVuIGluIG9mZmljZSB0aGV5IGFyZSBhbHdheXMKICAgICAgICAgICAgICAgICAgICBoYWxpbmcgcHJpdmF0ZSBjaXRpemVucyB0byBqYWlsOyBidXQgdGhleSBkaXNhcHByb3ZlIG9mIHRoZSBhcHBsaWNhdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBzYW1lIG1lYXN1cmUgb2YganVzdGljZSB0byB0aGVtc2VsdmVzLiBUaGV5IGFyYml0cmFyaWx5IHJlcGVhbCB0aG9zZSB3ZWxsLXRyaWVkCiAgICAgICAgICAgICAgICAgICAgbGF3cyBvZiBTb2xvbiwgZW5hY3RlZCBieSB0aGVpciBmb3JlZmF0aGVycywgYW5kIGV4cGVjdCB5b3UgdG8gb2JleSBsYXdzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgb3duLCBwcm9wb3NlZCB0byB0aGUgZGV0cmltZW50IG9mIHRoZSBjb21tdW5pdHkuIDwvdHJhbnNsYXRpb24+"
translation['24.143'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDMiIHVuaXQ9InNlY3Rpb24iIC8+SWYsIHRoZW4sIHlvdSBkZWNsaW5lIHRvIHB1bmlzaCB0aGUgbWVuIGJlZm9yZSB5b3UsIGluIGEKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGxpdHRsZSB0aW1lIHRoZSBQZW9wbGUgd2lsbCBiZSBpbiBzbGF2ZXJ5IHRvIHRob3NlIGJlYXN0cyBvZiBwcmV5LiBCdXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIHN1cmUsIGdlbnRsZSBtZW4gb2YgdGhlIGp1cnksIHRoYXQsIGlmIHlvdSBhcmUgcmVhbGx5IHZlcnkgYW5ncnkgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZW0sIHRoZWlyIGZlcm9jaXR5IHdpbGwgc29vbiBiZSBtaXRpZ2F0ZWQuIElmIG5vdCwgeW91IHdpbGwgaGF2ZSBwbGVudHkgb2YKICAgICAgICAgICAgICAgICAgICBydWZmaWFucyB0byBpbnN1bHQgeW91IHVuZGVyIHByZXRlbmNlIG9mIHBhdHJpb3RpYyBmZXJ2b3IuIDwvdHJhbnNsYXRpb24+"
translation['24.144'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCBtZSBub3cgc2F5IGEgd29yZCwKICAgICAgICAgICAgICAgICAgICBnZW50bGVtZW4gb2YgdGhlIGp1cnksIGFib3V0IHRoZSBzdGF0dXRlIHdoaWNoLCBhcyBJIGFtIGluZm9ybWVkLCBoZSBpbnRlbmRzIHRvCiAgICAgICAgICAgICAgICAgICAgY2l0ZSBhcyBhIHByZWNlZGVudCBhbmQgd2hpY2ggaGUgd2lsbCBjbGFpbSB0byBoYXZlIGZvbGxvd2VkIGluIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbC4gSSBtZWFuIHRoZSBzdGF0dXRlIHdoaWNoIGNvbnRhaW5zIHRoZXNlIHdvcmRzOiDigJxOb3Igd2lsbCBJCiAgICAgICAgICAgICAgICAgICAgaW1wcmlzb24gYW55IEF0aGVuaWFuIGNpdGl6ZW4gd2hvIG9mZmVycyB0aHJlZSBzdXJldGllcyB0YXhlZCBpbiB0aGUgc2FtZSBjbGFzcwogICAgICAgICAgICAgICAgICAgIGFzIGhpbXNlbGYsIGV4Y2VwdCBhbnkgcGVyc29uIGZvdW5kIGd1aWx0eSBvZiBjb25zcGlyaW5nIHRvIGJldHJheSB0aGUgY2l0eSBvcgogICAgICAgICAgICAgICAgICAgIHRvIHN1YnZlcnQgcG9wdWxhciBnb3Zlcm5tZW50LCBvciBhbnkgdGF4LWZhcm1lciBvciBoaXMgc3VyZXR5IG9yIGNvbGxlY3RvcgogICAgICAgICAgICAgICAgICAgIGJlaW5nIGluIGRlZmF1bHQu4oCdIExpc3RlbiB0byBteSByZXBseS4gPC90cmFuc2xhdGlvbj4="
translation['24.145'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDUiIHVuaXQ9InNlY3Rpb24iIC8+SSB3aWxsIHNheSBub3RoaW5nIGFib3V0IEFuZHJvdGlvbiBoaW1zZWxmIGRyYWdnaW5nIHBlb3BsZQogICAgICAgICAgICAgICAgICAgIHRvIHByaXNvbiBhbmQgcHV0dGluZyB0aGVtIGluIGlyb25zIGFmdGVyIHRoZSBlbmFjdG1lbnQgb2YgdGhpcyBsYXcsIGJ1dCBJIG11c3QKICAgICAgICAgICAgICAgICAgICBpbmZvcm0geW91IHRvIHdob20gaXQgcmVhbGx5IGFwcGxpZXMuIFRoaXMgc3RhdHV0ZSwgZ2VudGxlbWVuIG9mIHRoZSBKdXJ5LCBpcwogICAgICAgICAgICAgICAgICAgIG5vdCBpbnRlbmRlZCBmb3IgdGhlIHByb3RlY3Rpb24gb2YgcGVvcGxlIHdobyBoYXZlIHN0b29kIHRoZWlyIHRyaWFsIGFuZCBhcmd1ZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciBjYXNlLCBidXQgZm9yIHRob3NlIHdobyBhcmUgc3RpbGwgdW50cmllZCBhbmQgaXRzIHB1cnBvc2UgaXMgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgc2hhbGwgbm90IHBsZWFkIGF0IGEgZGlzYWR2YW50YWdlLCBvciBldmVuIHdpdGhvdXQgYW55IHByZXBhcmF0aW9uIGF0IGFsbCwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIHRoZXkgaGF2ZSBiZWVuIHNlbnQgdG8gamFpbC4gQnV0IFRpbW9jcmF0ZXMgaXMgZ29pbmcgdG8gc3BlYWsgdG8geW91IG9mCiAgICAgICAgICAgICAgICAgICAgcmVndWxhdGlvbnMgbWFkZSBmb3IgdW50cmllZCBjdWxwcml0cywgYXMgdGhvdWdoIHRoZXkgaGFkIGJlZW4gZnJhbWVkIHRvIGluY2x1ZGUKICAgICAgICAgICAgICAgICAgICBldmVyeWJvZHkuIDwvdHJhbnNsYXRpb24+"
translation['24.146'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDYiIHVuaXQ9InNlY3Rpb24iIC8+TGV0IG1lIGdpdmUgeW91IGEgcHJvb2YgdGhhdCBteQogICAgICAgICAgICAgICAgICAgIGFjY291bnQgb2YgdGhlIG1hdHRlciBpcyBjb3JyZWN0LiBJdCB3b3VsZCBub3QgaGF2ZSBiZWVuIGxhd2Z1bDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5pLmUuIGlmLCBhcyBUaW1vY3JhdGVzIGNvbnRlbmRzLCBpbXByaXNvbm1lbnQgd2FzIHJlcHVnbmFudAogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc3Bpcml0IG9mIEF0aGVuaWFuIGxhdywgdGhlIGxhdyB3b3VsZCBub3QgaGF2ZSBnaXZlbiB5b3UgdGhlIG9wdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBvZiBpbXBvc2luZyBjb3Jwb3JhbCBvciBwZWN1bmlhcnkgcHVuaXNobWVudC48L25vdGU+IGZvciB5b3UsIGdlbnRsZW1lbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBqdXJ5LCB0byBhc3Nlc3MgYW55IHBlbmFsdHksIGNvcnBvcmFsIG9yIHBlY3VuaWFyeSxmb3IgaW1wcmlzb25tZW50IGlzIGEKICAgICAgICAgICAgICAgICAgICBjb3Jwb3JhbCBwdW5pc2htZW50LCBhbmQgdGhlcmVmb3JlIHlvdSBjb3VsZCBub3QgaGF2ZSBpbmZsaWN0ZWQgaXQgYXMgYSBwZW5hbHR5LAogICAgICAgICAgICAgICAgICAgIG5vciBjb3VsZCBpdCBoYXZlIGJlZW4gcHJvdmlkZWQgYnkgc3RhdHV0ZSwgaW4gY2FzZXMgd2hlcmUgaW5mb3JtYXRpb24gaXMgbGFpZAogICAgICAgICAgICAgICAgICAgIG9yIHN1bW1hcnkgYXJyZXN0IGlzIGFsbG93ZWQsIHRoYXQg4oCcdGhlIEVsZXZlbiBzaGFsbCBwdXQgaW4gdGhlIHN0b2NrcwogICAgICAgICAgICAgICAgICAgIGFueSBtYW4gYWdhaW5zdCB3aG9tIGluZm9ybWF0aW9uIGlzIGxhaWQsIG9yIHdobyBoYXMgYmVlbiBhcnJlc3RlZCzigJ0KICAgICAgICAgICAgICAgICAgICBpZiBpdCBoYWQgYmVlbiB1bmxhd2Z1bCB0byBpbXByaXNvbiBhbnkgb2ZmZW5kZXJzIG90aGVyIHRoYW4gdGhvc2Ugd2hvIGNvbnNwaXJlCiAgICAgICAgICAgICAgICAgICAgdG8gYmV0cmF5IHRoZSBjb21tb253ZWFsdGgsIG9yIHRvIG92ZXJ0aHJvdyBwb3B1bGFyIGdvdmVybm1lbnQsIG9yIHRheC1mYXJtZXJzCiAgICAgICAgICAgICAgICAgICAgd2hvIGRvIG5vdCBzYXRpc2Z5IHRoZWlyIGNvbnRyYWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.147'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyBzdGFuZCB5b3UgbXVzdCBhY2NlcHQgdGhlc2UgZmFjdHMgYXMgcHJvdmluZyB0aGF0IGltcHJpc29ubWVudCBpcwogICAgICAgICAgICAgICAgICAgIGxhd2Z1bCwgb3RoZXJ3aXNlIHBlbmFsIHNlbnRlbmNlcyB3b3VsZCBhdCBvbmNlIGhhdmUgYmVlbiBlbnRpcmVseSBpbm9wZXJhdGl2ZS4KICAgICAgICAgICAgICAgICAgICBJbiB0aGUgc2Vjb25kIHBsYWNlLCBnZW50bGVtZW4gb2YgdGhlIGp1cnksIHRoZSBmb3JtdWxhLCDigJxJIHdpbGwgbm90CiAgICAgICAgICAgICAgICAgICAgaW1wcmlzb24gYW55IEF0aGVuaWFuIGNpdGl6ZW4s4oCdIGlzIG5vdCBpbiBpdHNlbGYgYSBzdGF0dXRlOyBpdCBpcwogICAgICAgICAgICAgICAgICAgIG1lcmVseSBhIHBocmFzZSBpbiB0aGUgd3JpdHRlbiBvYXRoIHRha2VuIGJ5IHRoZSBDb3VuY2lsLCB0byBwcmV2ZW50IHBvbGl0aWNpYW5zCiAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSBpbiB0aGUgQ291bmNpbCBmcm9tIGNhYmFsbGluZyB0byBjb21taXQgYW55IGNpdGl6ZW4gdG8gcHJpc29uLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.148'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDgiIHVuaXQ9InNlY3Rpb24iIC8+U29sb24gdGhlcmVmb3JlLCB3aXNoaW5nIHRvIGRlcHJpdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgQ291bmNpbCBvZiBhdXRob3JpdHkgdG8gaW1wcmlzb24sIGluY2x1ZGVkIHRoaXMgZm9ybXVsYSBpbiB0aGUgQ291bmNpbGxvcnMnCiAgICAgICAgICAgICAgICAgICAgb2F0aDsgYnV0IGhlIGRpZCBub3QgaW5jbHVkZSBpdCBpbiB0aGUganVkaWNpYWwgb2F0aC4gSGUgdGhvdWdodCBpdCByaWdodCB0aGF0IGEKICAgICAgICAgICAgICAgICAgICBDb3VydCBvZiBKdXN0aWNlIHNob3VsZCBoYXZlIHVubGltaXRlZCBhdXRob3JpdHksIGFuZCB0aGF0IHRoZSBjb252aWN0ZWQKICAgICAgICAgICAgICAgICAgICBjcmltaW5hbCBzaG91bGQgc3VibWl0IHRvIGFueSBwdW5pc2htZW50IG9yZGVyZWQgYnkgdGhlIGNvdXJ0LiBUbyBtYWtlIGdvb2QgdGhpcwogICAgICAgICAgICAgICAgICAgIHZpZXcgdGhlIGNsZXJrIHdpbGwgcmVhZCB0aGUganVkaWNpYWwgb2F0aCBvZiB0aGUgQ291cnQgb2YgSGVsaWFlYS4gUmVhZC4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.149'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNDkiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iVGhlIE9hdGggb2YgdGhlIEhlbGlhc3RzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgT2F0aCBvZiB0aGUgSGVsaWFzdHM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JCiAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgZ2l2ZSB2ZXJkaWN0IGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgc3RhdHV0ZXMgYW5kIGRlY3JlZXMgb2YgdGhlIFBlb3BsZQogICAgICAgICAgICAgICAgICAgICAgICBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gYW5kIG9mIHRoZSBDb3VuY2lsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEZpdmUtaHVuZHJlZC4gSSB3aWxsIG5vdCB2b3RlIGZvciB0eXJhbm55IG9yIG9saWdhcmNoeS4gSWYgYW55IG1hbiB0cnkgdG8KICAgICAgICAgICAgICAgICAgICAgICAgc3VidmVydCB0aGUgQXRoZW5pYW4gZGVtb2NyYWN5IG9yIG1ha2UgYW55IHNwZWVjaCBvciBhbnkgcHJvcG9zYWwgaW4KICAgICAgICAgICAgICAgICAgICAgICAgY29udHJhdmVudGlvbiB0aGVyZW9mIEkgd2lsbCBub3QgY29tcGx5LiBJIHdpbGwgbm90IGFsbG93IHByaXZhdGUgZGVidHMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgYmUgY2FuY2VsbGVkLCBub3IgbGFuZHMgbm9yIGhvdXNlcyBiZWxvbmdpbmcgdG8gQXRoZW5pYW4gY2l0aXplbnMgdG8gYmUKICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXN0cmlidXRlZC4gSSB3aWxsIG5vdCByZXN0b3JlIGV4aWxlcyBvciBwZXJzb25zIHVuZGVyIHNlbnRlbmNlIG9mIGRlYXRoLgogICAgICAgICAgICAgICAgICAgICAgICBJIHdpbGwgbm90IGV4cGVsLCBub3Igc3VmZmVyIGFub3RoZXIgdG8gZXhwZWwsIHBlcnNvbnMgaGVyZSByZXNpZGVudCBpbgogICAgICAgICAgICAgICAgICAgICAgICBjb250cmF2ZW50aW9uIG9mIHRoZSBzdGF0dXRlcyBhbmQgZGVjcmVlcyBvZiB0aGUgQXRoZW5pYW4gUGVvcGxlIG9yIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBDb3VuY2lsLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIE9hdGggb2YgdGhlIEhlbGlhc3RzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SQogICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGdpdmUgdmVyZGljdCBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIHN0YXR1dGVzIGFuZCBkZWNyZWVzIG9mIHRoZSBQZW9wbGUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGFuZCBvZiB0aGUgQ291bmNpbCBvZgogICAgICAgICAgICAgICAgICAgICAgICBGaXZlLWh1bmRyZWQuIEkgd2lsbCBub3Qgdm90ZSBmb3IgdHlyYW5ueSBvciBvbGlnYXJjaHkuIElmIGFueSBtYW4gdHJ5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnZlcnQgdGhlIEF0aGVuaWFuIGRlbW9jcmFjeSBvciBtYWtlIGFueSBzcGVlY2ggb3IgYW55IHByb3Bvc2FsIGluCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYXZlbnRpb24gdGhlcmVvZiBJIHdpbGwgbm90IGNvbXBseS4gSSB3aWxsIG5vdCBhbGxvdyBwcml2YXRlIGRlYnRzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNhbmNlbGxlZCwgbm9yIGxhbmRzIG5vciBob3VzZXMgYmVsb25naW5nIHRvIEF0aGVuaWFuIGNpdGl6ZW5zIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlzdHJpYnV0ZWQuIEkgd2lsbCBub3QgcmVzdG9yZSBleGlsZXMgb3IgcGVyc29ucyB1bmRlciBzZW50ZW5jZSBvZiBkZWF0aC4KICAgICAgICAgICAgICAgICAgICAgICAgSSB3aWxsIG5vdCBleHBlbCwgbm9yIHN1ZmZlciBhbm90aGVyIHRvIGV4cGVsLCBwZXJzb25zIGhlcmUgcmVzaWRlbnQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgY29udHJhdmVudGlvbiBvZiB0aGUgc3RhdHV0ZXMgYW5kIGRlY3JlZXMgb2YgdGhlIEF0aGVuaWFuIFBlb3BsZSBvciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgQ291bmNpbC48L3RyYW5zbGF0aW9uPg=="
translation['24.150'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTAiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj5JIHdpbGwgbm90IGNvbmZpcm0KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGFwcG9pbnRtZW50IHRvIGFueSBvZmZpY2Ugb2YgYW55IHBlcnNvbiBzdGlsbCBzdWJqZWN0IHRvIGF1ZGl0IGluCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BlY3Qgb2YgYW55IG90aGVyIG9mZmljZSwgdG8gd2l0IHRoZSBvZmZpY2VzIG9mIHRoZSBuaW5lIEFyY2hvbnMgb3Igb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFJlY29yZGVyIG9yIGFueSBvdGhlciBvZmZpY2UgZm9yIHdoaWNoIGEgYmFsbG90IGlzIHRha2VuIG9uIHRoZSBzYW1lIGRheQogICAgICAgICAgICAgICAgICAgICAgICBhcyBmb3IgdGhlIG5pbmUgQXJjaG9ucywgb3IgdGhlIG9mZmljZSBvZiBNYXJzaGFsLCBvciBhbWJhc3NhZG9yLCBvciBtZW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIEFsbGllZCBDb25ncmVzcy4gSSB3aWxsIG5vdCBzdWZmZXIgdGhlIHNhbWUgbWFuIHRvIGhvbGQgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICAgICAgb2ZmaWNlIHR3aWNlLCBvciB0d28gb2ZmaWNlcyBpbiB0aGUgc2FtZSB5ZWFyLiBJIHdpbGwgbm90IHRha2UgYnJpYmVzIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BlY3Qgb2YgbXkganVkaWNpYWwgYWN0aW9uLCBub3Igc2hhbGwgYW55IG90aGVyIG1hbiBvciB3b21hbiBhY2NlcHQKICAgICAgICAgICAgICAgICAgICAgICAgYnJpYmVzIGZvciBtZSB3aXRoIG15IGtub3dsZWRnZSBieSBhbnkgc3VidGVyZnVnZSBvciB0cmljawogICAgICAgICAgICAgICAgICAgICAgICB3aGF0c29ldmVyLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.151'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTEiIHVuaXQ9InNlY3Rpb24iIC8+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iY29udGludWVkIj5JIGFtIG5vdCBsZXNzIHRoYW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcnR5IHllYXJzIG9sZC4gSSB3aWxsIGdpdmUgaW1wYXJ0aWFsIGhlYXJpbmcgdG8gcHJvc2VjdXRvciBhbmQgZGVmZW5kYW50CiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWtlLCBhbmQgSSB3aWxsIGdpdmUgbXkgdmVyZGljdCBzdHJpY3RseSBvbiB0aGUgY2hhcmdlIG5hbWVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dGlvbi4gVGhlIGp1cm9yIHNoYWxsIHN3ZWFyIGJ5IFpldXMsIFBvc2VpZG9uLCBhbmQgRGVtZXRlciwgYW5kIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGludm9rZSBkZXN0cnVjdGlvbiB1cG9uIGhpbXNlbGYgYW5kIGhpcyBob3VzZWhvbGQgaWYgaGUgaW4gYW55IHdheQogICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2dyZXNzIHRoaXMgb2F0aCwgYW5kIHNoYWxsIHByYXkgdGhhdCBoaXMgcHJvc3Blcml0eSBtYXkgZGVwZW5kIHVwb24gaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIGxveWFsIG9ic2VydmFuY2UgdGhlcmVvZi48L3F1b3RlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgb2F0aCwKICAgICAgICAgICAgICAgICAgICBnZW50bGVtZW4gb2YgdGhlIGp1cnksIGRvZXMgbm90IGNvbnRhaW4gdGhlIHdvcmRzIOKAnEkgd2lsbCBub3QgaW1wcmlzb24KICAgICAgICAgICAgICAgICAgICBhbnkgQXRoZW5pYW4gY2l0aXplbi7igJ0gVGhlIGNvdXJ0cyBhbG9uZSBkZWNpZGUgZXZlcnkgcXVlc3Rpb24gYnJvdWdodAogICAgICAgICAgICAgICAgICAgIHRvIHRyaWFsOyBhbmQgdGhleSBoYXZlIGZ1bGwgYXV0aG9yaXR5IHRvIHBhc3Mgc2VudGVuY2Ugb2YgaW1wcmlzb25tZW50LCBvciBhbnkKICAgICAgICAgICAgICAgICAgICBvdGhlciBzZW50ZW5jZSB0aGV5IHBsZWFzZS4gPC90cmFuc2xhdGlvbj4="
translation['24.152'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgeW91IGFyZSBlbXBvd2VyZWQgdG8gcGFzcyBzZW50ZW5jZSBvZiBpbXByaXNvbm1lbnQgSSBwcm92ZQogICAgICAgICAgICAgICAgICAgIGJ5IHRoaXMgYXJndW1lbnQ7IGFuZCBJIHRha2UgaXQgdGhhdCBldmVyeWJvZHkgd2lsbCBhZ3JlZSB0aGF0IHRvIGludmFsaWRhdGUKICAgICAgICAgICAgICAgICAgICBqdWRpY2lhbCBkZWNpc2lvbnMgaXMgbW9uc3Ryb3VzLCBpbXBpb3VzLCBhbmQgc3VidmVyc2l2ZSBvZiBwb3B1bGFyIGdvdmVybm1lbnQuCiAgICAgICAgICAgICAgICAgICAgT3VyIGNvbW1vbndlYWx0aCwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCBpcyBhZG1pbmlzdGVyZWQgYnkgbGF3cyBhbmQgYnkgdm90ZXMgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgcGVvcGxlOyBhbmQgaWYgb25jZSBkZWNpc2lvbnMgYnkgdm90ZSBhcmUgcmVwZWFsZWQgYnkgYSBuZXcgbGF3LCB3aGVyZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgYmUgdGhlIGVuZCBvZiBpdD8gQ2FuIHdlIGp1c3RseSBjYWxsIHRoaXMgdGhpbmcgYSBsYXc/IElzIGl0IG5vdCByYXRoZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgbmVnYXRpb24gb2YgbGF3PyBEb2VzIG5vdCBzdWNoIGEgbGF3Z2l2ZXIgbWVyaXQgb3VyIHN0cm9uZ2VzdCByZXNlbnRtZW50PwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.153'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTMiIHVuaXQ9InNlY3Rpb24iIC8+SW5kZWVkIGluIG15IHZpZXcgaGUgbWVyaXRzIHRoZSBzZXZlcmVzdAogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQsIG5vdCBtZXJlbHkgZm9yIHByb3Bvc2luZyB0aGlzIGxhdywgYnV0IGZvciByZXZlYWxpbmcgdG8gZXZlcnlvbmUKICAgICAgICAgICAgICAgICAgICBlbHNlIGEgbWV0aG9kIG9mIGRlc3Ryb3lpbmcgdGhlIGNvdXJ0cyBvZiBKdXN0aWNlLCByZXN0b3JpbmcgZXhpbGVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBpbnRyb2R1Y2luZyBldmVyeSBzb3J0IG9mIGF0cm9jaXR5LiBJZiB0aGUgYXV0aG9yIG9mIHRoaXMgbGF3IGdvZXMgb24gaGlzIHdheQogICAgICAgICAgICAgICAgICAgIHJlam9pY2luZywgd2hhdCBpcyB0aGVyZSwgZ2VudGxlbWVuIG9mIHRoZSBqdXJ5LCB0byBwcmV2ZW50IGFub3RoZXIgbWFuIGZyb20KICAgICAgICAgICAgICAgICAgICBjb21pbmcgZm9yd2FyZCB0byBvdmVydGhyb3cgb3VyIG1vc3QgcG93ZXJmdWwgaW5zdGl0dXRpb25zIHdpdGggYSBmcmVzaCBzdGF0dXRlPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.154'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gbXkgb3Bpbmlvbiwgbm90aGluZy4gSSBoYXZlIGJlZW4gdG9sZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaW4gdGltZSBwYXN0IHBvcHVsYXIgZ292ZXJubWVudCB3YXMgb3ZlcnRocm93biBpbiB0aGlzIHdheSwgd2hlbgogICAgICAgICAgICAgICAgICAgIGluZGljdG1lbnRzIGZvciBpbGxlZ2FsIGxlZ2lzbGF0aW9uIHdlcmUgYWJvbGlzaGVkLCBhbmQgY291cnRzIG9mIGp1c3RpY2Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHN0cmlwcGVkIG9mIGF1dGhvcml0eS4gU29tZW9uZSBtYXkgcGVyaGFwcyBvYmplY3QgdGhhdCwgd2hlbiBJIHRhbGsgb2YKICAgICAgICAgICAgICAgICAgICBzdWJ2ZXJ0aW5nIHBvcHVsYXIgZ292ZXJubWVudCwgSSBhbSBpZ25vcmluZyB0aGUgZGlmZmVyZW5jZSBvZiBjb25kaXRpb25zCiAgICAgICAgICAgICAgICAgICAgYmV0d2VlbiB0aGF0IHRpbWUgYW5kIHRoaXMuIFllcywgYnV0IG5vIG1hbiBvdWdodCBldmVuIHRvIGRyb3AgdGhlIHNlZWQgb2Ygc3VjaAogICAgICAgICAgICAgICAgICAgIGEgcG9saWN5IGluIG91ciBjb21tb253ZWFsdGgsIHRob3VnaCBmb3IgdGhlIG1vbWVudCBpdCBtYXkgbm90IGdlcm1pbmF0ZTsgcmF0aGVyCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGV2ZXJ5IG1hbiB3aG8gYnkgd29yZCBvciBkZWVkIGF0dGVtcHRzIGFueXRoaW5nIG9mIHRoZSBraW5kIGJlIGJyb3VnaHQgdG8KICAgICAgICAgICAgICAgICAgICBqdXN0aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.155'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IGlzCiAgICAgICAgICAgICAgICAgICAgYWxzbyBwcm9wZXIgdGhhdCB5b3Ugc2hvdWxkIGJlIGluZm9ybWVkIGhvdyBjcmFmdGlseSBoZSBsYWlkIGhpcyBwbGFucyB0byBpbmp1cmUKICAgICAgICAgICAgICAgICAgICB5b3UuIEhhdmluZyBvYnNlcnZlZCB0aGF0IGV2ZXJ5Ym9keSwgd2hldGhlciBpbiBwdWJsaWMgbGlmZSBvciBvdXRzaWRlIGl0LAogICAgICAgICAgICAgICAgICAgIGNvbnN0YW50bHkgYXR0cmlidXRlcyBhbGwgdGhlIHByb3NwZXJpdHkgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHRvIGhlciBsYXdzLCBoZSBiZWdhbiB0byBjb25zaWRlciBob3cgaGUgY291bGQgZGVzdHJveQogICAgICAgICAgICAgICAgICAgIHRob3NlIGxhd3Mgd2l0aG91dCBkZXRlY3Rpb24sIGFuZCBob3csIGV2ZW4gaWYgY2F1Z2h0IGluIHRoZSBhY3QsIGhlIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgdGhvdWdodCB0byBoYXZlIGRvbmUgbm90aGluZyBmb3JtaWRhYmxlIG9yIHByZXN1bXB0dW91cy4gPC90cmFuc2xhdGlvbj4="
translation['24.156'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTYiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaW52ZW50ZWQgdGhlIG1ldGhvZCB3aGljaCBoZSBoYXMgYWN0dWFsbHkgZW1wbG95ZWQsIHRoYXQKICAgICAgICAgICAgICAgICAgICBvZiBvdmVydGhyb3dpbmcgb2xkIGxhd3MgYnkgYSBuZXcgb25lLCBpbiB0aGUgaG9wZSB0aGF0IGhpcyBpbmlxdWl0aWVzIG1pZ2h0IGJlCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpYmVkIGFzIHByZXNlcnZhdGl2ZS4gSXQgaXMgdHJ1ZSB0aGF0IHRoZSBjaXR5IGlzIHByZXNlcnZlZCBieSBsYXdzOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgdGhpbmcgaGUgaW50cm9kdWNlZCwgdGhvdWdoIHdpZGVseSBkaWZmZXJlbnQgZnJvbSBvdGhlciBsYXdzLCBjZXJ0YWlubHkgd2FzCiAgICAgICAgICAgICAgICAgICAgYSBsYXcuIEhlIHNhdyB0aGF0IHRoZSBiZW5lZmljZW50IGFzc29jaWF0aW9ucyBvZiB0aGF0IG5hbWUgd2VyZSBib3VuZCB0byB3aW4KICAgICAgICAgICAgICAgICAgICB5b3VyIGFwcHJvdmFsOyBhbmQgaGUgZGlkIG5vdCBjaG9vc2UgdG8gc2VlIHRoYXQgaW4gaXRzIGFjdHVhbCBlZmZlY3QgaXQgd291bGQKICAgICAgICAgICAgICAgICAgICBiZSBmb3VuZCB2ZXJ5IGRpZmZlcmVudC4gPC90cmFuc2xhdGlvbj4="
translation['24.157'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTciIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRlbGwgbWUKICAgICAgICAgICAgICAgICAgICB0aGlzLOKAlGlzIHRoZXJlIGFueSBjaGFpcm1hbiBvciBhbnkgcHJlc2lkZW50IHdobyB3b3VsZCBldmVyIGhhdmUgcHV0CiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHZvdGUgdGhlIHByb3Bvc2FscyBjb250YWluZWQgaW4gaGlzIGxhdz8gSSBzaG91bGQgc2F5LCBub25lLiBUaGVuIGhvdyBkaWQKICAgICAgICAgICAgICAgICAgICB0aGUgdGhpbmcgc2xpcCB0aHJvdWdoPyBIZSBnYXZlIHRoZSBuYW1lIG9mIGxhdyB0byBoaXMgb3duIGtuYXZlcmllcy4gRm9yIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIGRvIG5vdCBpbmp1cmUgeW91IGFydGxlc3NseSBvciBjYXN1YWxseSwgYnV0IGRlbGliZXJhdGVseSBhbmQgb2Ygc2V0CiAgICAgICAgICAgICAgICAgICAgcHVycG9zZTsgYW5kIEkgZG8gbm90IG1lYW4gdGhlc2UgbWVuIGFsb25lLCBidXQgYSBncmVhdCBjb21wYW55IG9mIHBvbGl0aWNpYW5zLAogICAgICAgICAgICAgICAgICAgIHdobyB3aWxsIHNob3J0bHkgYXBwZWFyIGFuZCByZWluZm9yY2UgdGhlIGRlZmVuY2Us4oCUbm90LCBJIG5lZWQgaGFyZGx5CiAgICAgICAgICAgICAgICAgICAgc2F5LCBiZWNhdXNlIHRoZXkgd2FudCB0byBvYmxpZ2UgVGltb2NyYXRlcyzigJR3aHkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgdGhleT/igJRidXQgYmVjYXVzZSBldmVyeSBtYW4gb2YgdGhlbSBpbWFnaW5lcyB0aGF0IFRpbW9jcmF0ZXMnIGxhdyB3aWxsCiAgICAgICAgICAgICAgICAgICAgc2VydmUgaGlzIG93biBwdXJwb3Nlcy4gQXMgdGhlc2UgcGVvcGxlLCB0aGVuLCByYWxseSByb3VuZCBvbmUgYW5vdGhlciB0byB5b3VyCiAgICAgICAgICAgICAgICAgICAgcHJlanVkaWNlLCBzbyBpdCBpcyB5b3VyIGJ1c2luZXNzIHRvIHJhbGx5IHJvdW5kIHlvdXJzZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['24.158'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTgiIHVuaXQ9InNlY3Rpb24iIC8+U29tZWJvZHkgYXNrZWQgaGltIGZvciB3aGF0IHB1cnBvc2UgaGUgaGFkIGNob3NlbiB0byBicmluZwogICAgICAgICAgICAgICAgICAgIGZvcndhcmQgc3VjaCBhIHByb3Bvc2FsLCBhbmQgdHJpZWQgdG8gZXhwbGFpbiB0byBoaW0gdGhhdCBoZSBoYWQgYSBkaWZmaWN1bHQKICAgICAgICAgICAgICAgICAgICB0YXNrIGJlZm9yZSBoaW0gaW4gdGhpcyB0cmlhbC4gSGlzIHJlcGx5IHdhczog4oCcWW91IHRhbGsgbGlrZSBhIGZvb2wuCiAgICAgICAgICAgICAgICAgICAgQW5kcm90aW9uIHdpbGwgYmUgdGhlcmUgdG8gaGVscCBtZTsgYW5kIGhlIGhhcyB0aG91Z2h0IG91dCBhdCBsZWlzdXJlIHN1Y2ggZmluZQogICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cyBvbiBldmVyeSBwb2ludCwgdGhhdCBJIGFtIHF1aXRlIGNlcnRhaW4gdGhhdCBubyBoYXJtIHdpbGwgY29tZSB0byBtZQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhpcyBpbmRpY3RtZW50LuKAnSA8L3RyYW5zbGF0aW9uPg=="
translation['24.159'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNTkiIHVuaXQ9InNlY3Rpb24iIC8+SSBhbSBzaW1wbHkKICAgICAgICAgICAgICAgICAgICBhbWF6ZWQgYXQgdGhlIGVmZnJvbnRlcnkgb2YgdGhlIHBhaXIgb2YgdGhlbSzigJRvZiBUaW1vY3JhdGVzLCBpZiBoZQogICAgICAgICAgICAgICAgICAgIGNhbGxzIEFuZHJvdGlvbiwgYW5kIG9mIEFuZHJvdGlvbiwgaWYgaGUgYXBwZWFycyBhbmQgc3BlYWtzIGZvciB0aGUgZGVmZW5jZTsKICAgICAgICAgICAgICAgICAgICBmb3IsIG9mIGNvdXJzZSwgeW91IHdpbGwgdGhlbiBoYXZlIHRoZSBjbGVhcmVzdCB0ZXN0aW1vbnkgdGhhdCBUaW1vY3JhdGVzCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWQgaGlzIGxhdyBmb3IgdGhlIHNwZWNpYWwgYmVuZWZpdCBvZiBBbmRyb3Rpb24sIG5vdCBhcyBhIGxhdyBvZiBnZW5lcmFsCiAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb24uIE5ldmVydGhlbGVzcywgaXQgd2lsbCBiZSB1c2VmdWwgdG8geW91IHRvIGhlYXIgYSBicmllZiBhY2NvdW50IG9mCiAgICAgICAgICAgICAgICAgICAgQW5kcm90aW9uJ3MgcG9saXRpY2FsIHBlcmZvcm1hbmNlcywgaW5jbHVkaW5nIHRob3NlIGluIHdoaWNoIHRoZSBkZWZlbmRhbnQgdG9vawogICAgICAgICAgICAgICAgICAgIHBhcnQsIGFuZCBmb3Igd2hpY2ggaGUsIG5vIGxlc3MgdGhhbiB0aGUgb3RoZXIsIHNob3VsZCBiZSB0aGUganVzdCBvYmplY3Qgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGRldGVzdGF0aW9uLiBJIHdpbGwgdGVsbCB5b3Ugbm90aGluZyB0aGF0IHlvdSBoYXZlIGhlYXJkIGFscmVhZHksIHVubGVzcwogICAgICAgICAgICAgICAgICAgIGluZGVlZCBhbnkgb2YgeW91IHdlcmUgaW4gY291cnQgYXQgdGhlIHRyaWFscyBvZiBFdWN0ZW1vbi4gPC90cmFuc2xhdGlvbj4="
translation['24.160'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkxldCB1cyBmaXJzdCBvZiBhbGwgaW5xdWlyZQogICAgICAgICAgICAgICAgICAgIGludG8gdGhlIGV4cGxvaXQgb24gd2hpY2ggaGUgY2hpZWZseSBwcmlkZXMgaGltc2VsZizigJRoaXMgY29sbGVjdGlvbiBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBtb25leSB3aGljaCBoZSBleHRyYWN0ZWQgZnJvbSBhbGwgb2YgeW91LCB3aXRoIHRoZSBoZWxwIG9mIHRoaXMgaG9ub3JhYmxlCiAgICAgICAgICAgICAgICAgICAgZ2VudGxlbWFuLiBIYXZpbmcgYWNjdXNlZCBFdWN0ZW1vbiBvZiByZXRhaW5pbmcgcmV2ZW51ZSBtb25leSBpbiBoaXMgb3duIGhhbmRzLAogICAgICAgICAgICAgICAgICAgIGhlIHByb21pc2VkIHRoYXQgaGUgd291bGQgZWl0aGVyIG1ha2UgZ29vZCB0aGUgY2hhcmdlLCBvciBwYXkgdGhlIG1vbmV5IG91dCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBvd24gcG9ja2V0OyBhbmQgb24gdGhhdCBwcmV0ZXh0IGhlIHR1cm5lZCBvdXQgYSBtYWdpc3RyYXRlIGFwcG9pbnRlZCBieSBsb3QsCiAgICAgICAgICAgICAgICAgICAgYW5kIGluc2ludWF0ZWQgaGltc2VsZiBpbnRvIHRoZSB0YXgtY29sbGVjdGluZyBidXNpbmVzcy4gSGUgYWxzbyBwcm9wb3NlZCB0aGUKICAgICAgICAgICAgICAgICAgICBhcHBvaW50bWVudCBvZiBUaW1vY3JhdGVzLCBwbGVhZGluZyBoaXMgb3duIGlsbC1oZWFsdGg7IOKAnEkgc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICBnbGFkIG9mIGhpcyBoZWxwIGluIHRoZSB3b3JrIG9mIHRoZSBvZmZpY2Us4oCdIGhlIHNhaWQuIDwvdHJhbnNsYXRpb24+"
translation['24.161'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbWFkZSBhIHNwZWVjaCB0byB0aGUgcGVvcGxlIG9uIHRoYXQgb2NjYXNpb24sCiAgICAgICAgICAgICAgICAgICAgYWR2aXNpbmcgeW91IHRoYXQgeW91IGhhZCB0aGUgY2hvaWNlIG9mIHRocmVlIGNvdXJzZXMsIGVpdGhlciB0byBicmVhayB1cCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW9uYWwgcGxhdGUsIG9yIHRvIHBheSB5b3VyIHRheGVzIG92ZXIgYWdhaW4sIG9yIHRvIHJlY292ZXIgYXJyZWFycyBmcm9tCiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdGVycy4gWW91IG5hdHVyYWxseSBwcmVmZXJyZWQgdG8gY29sbGVjdCB5b3VyIGRlYnRzOyBhbmQgYXMgYnkgdmlydHVlIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIHByb21pc2VzIGhlIGhhZCB0aGUgdXBwZXIgaGFuZCwgYW5kIGVuam95ZWQgc3BlY2lhbCBwb3dlcnMgdG8gc3VpdCB0aGUKICAgICAgICAgICAgICAgICAgICBlbWVyZ2VuY3ksIGhlIGRpZCBub3QgdGhpbmsgcHJvcGVyIHRvIG9ic2VydmUgdGhlIHN0YXR1dGVzIG1hZGUgYW5kIHByb3ZpZGVkIGZvcgogICAgICAgICAgICAgICAgICAgIHN1Y2ggYnVzaW5lc3MsIG5vciwgaWYgaGUgY29uc2lkZXJlZCB0aGVtIHVuc2F0aXNmYWN0b3J5LCB0byBwcm9wb3NlIG5ldyBvbmVzLgogICAgICAgICAgICAgICAgICAgIEluc3RlYWQgb2YgdGhhdCwgaGUgbW92ZWQgYXQgdGhlIEFzc2VtYmx5IHNvbWUgdHJ1Y3VsZW50IGFuZCB1bmNvbnN0aXR1dGlvbmFsCiAgICAgICAgICAgICAgICAgICAgZGVjcmVlcywgYW5kIHVzZWQgdGhvc2UgZGVjcmVlcyBmb3Igam9iYmVyeSwgd2l0aCBUaW1vY3JhdGVzIGFzIGhpcyBqYWNrYWwuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.162'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjIiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCB0aGUgaGVscCBvZiB0aGlzIG1hbiBoZSBoYXMgc3RvbGVuIGEKICAgICAgICAgICAgICAgICAgICBncmVhdCBkZWFsIG9mIHlvdXIgcHJvcGVydHksIGZvciBoZSBoYWQgaW5jbHVkZWQgaW4gaGlzIGRlY3JlZSBhbiBvcmRlciB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHBvbGljZS1tYWdpc3RyYXRlcywgdGhlIHJlY2VpdmVycywgYW5kIHRoZWlyIGNsZXJrcywgc2hvdWxkIGFsbCBmb2xsb3cgaGlzCiAgICAgICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zLiBUYWtpbmcgdGhlc2Ugb2ZmaWNlcnMgd2l0aCBoaW0sIGhlIHByb2NlZWRlZCB0byBpbnZhZGUgeW91cgogICAgICAgICAgICAgICAgICAgIGR3ZWxsaW5nLWhvdXNlczsgYW5kIHlvdSwgVGltb2NyYXRlcywgd2VyZSB0aGUgb25seSBvbmUgb2YgaGlzIGNvbGxlYWd1ZXMsCiAgICAgICAgICAgICAgICAgICAgdGhvdWdoIHRoZXJlIHdlcmUgdGVuIG9mIHRoZW0sIHdobyB3ZW50IHdpdGggaGltLiBBbmQgbGV0IG5vIG9uZSBzdXBwb3NlIHRoYXQgSQogICAgICAgICAgICAgICAgICAgIGFtIGhpbnRpbmcgdGhhdCBwYXltZW50IG91Z2h0IG5vdCB0byBiZSBleGFjdGVkIGZyb20gZGVmYXVsdGVycy4gSXQgb3VnaHQ7IGJ1dAogICAgICAgICAgICAgICAgICAgIGhvdz8gQXMgdGhlIGxhdyBkaXJlY3RzLCBhbmQgZGlzaW50ZXJlc3RlZGx5OyB0aGF0IGlzIHRoZSBkZW1vY3JhdGljIHdheS4gTWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IGdvdCBmYXIgbGVzcyBiZW5lZml0CiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgZml2ZSB0YWxlbnRzIHRoYXQgdGhpcyBtYW4gY29sbGVjdGVkLCB0aGFuIGluanVyeSBmcm9tIHRoZSBwcmFjdGljZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGludHJvZHVjZWQgaW50byB5b3VyIGdvdmVybm1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['24.163'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yCiAgICAgICAgICAgICAgICAgICAgaWYgeW91IGNhcmUgdG8gaW5xdWlyZSB3aHkgYSBtYW4gd291bGQgcmF0aGVyIGxpdmUgdW5kZXIgZGVtb2NyYWN5IHRoYW4gdW5kZXIKICAgICAgICAgICAgICAgICAgICBvbGlnYXJjaHksIHlvdSB3aWxsIGZpbmQgdGhhdCB0aGUgbW9zdCBvYnZpb3VzIHJlYXNvbiBpcyB0aGF0IHVuZGVyIGRlbW9jcmFjeQogICAgICAgICAgICAgICAgICAgIHRoaW5ncyBhcmUgZG9uZSBtb3JlIGNvbnNpZGVyYXRlbHkuIEkgd2lsbCBub3QgaW5zaXN0IHRoYXQgdGhlIGNvbmR1Y3Qgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4gd2FzIG1vcmUgb3V0cmFnZW91cyBhbmQgaW50b2xlcmFibGUgdGhhbiB1bmRlciBhbnkgb2xpZ2FyY2h5LCBubyBtYXR0ZXIKICAgICAgICAgICAgICAgICAgICB3aGVyZS4gQnV0IHRha2Ugb3VyIG93biBjaXR5OiBhdCB3aGF0IHRpbWUgd2FzIHRoZSBncmVhdGVzdCBzZXZlcml0eSBwcmFjdGlzZWQKICAgICAgICAgICAgICAgICAgICBoZXJlPyBJIGFtIHN1cmUgeW91IHdpbGwgYWxsIHJlcGx5LCBpbiB0aGUgZGF5cyBvZiB0aGUgVGhpcnR5IFR5cmFudHMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.164'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCwgZXZlbiBhdCB0aGF0IHRpbWUsIGFzIHdlIGFyZQogICAgICAgICAgICAgICAgICAgIHRvbGQsIG5vIG1hbiB3aG8gaGFkIGNvbmNlYWxlZCBoaW1zZWxmIGluIGhpcyBvd24gaG91c2Ugd2FzIGRlcHJpdmVkIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5OyBpbmRlZWQsIHRoZSBwYXJ0aWN1bGFyIGNoYXJnZSBicm91Z2h0IGFnYWluc3QgdGhlIFRoaXJ0eSBpcyB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICB3cm9uZ2Z1bGx5IGNhcnJpZWQgbWVuIHRvIGphaWwgZnJvbSB0aGUgbWFya2V0LXBsYWNlLiBCdXQgdGhlc2UgbWVuIGNhcnJpZWQKICAgICAgICAgICAgICAgICAgICB0aGVpciBhdHJvY2l0eSB0byBmYXIgZ3JlYXRlciBsZW5ndGhzIHRoYW4gdGhhdCwgaW5zb211Y2ggdGhhdCwgdW5kZXIgZGVtb2NyYXRpYwogICAgICAgICAgICAgICAgICAgIGdvdmVybm1lbnQsIHRoZXkgbWFkZSBldmVyeSBtYW4ncyBob3VzZSBoaXMgcHJpc29uLCBicmluZ2luZyB0aGUgcG9saWNlIGludG8gb3VyCiAgICAgICAgICAgICAgICAgICAgdmVyeSBob21lcy4gPC90cmFuc2xhdGlvbj4="
translation['24.165'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCBkbyB5b3UgdGhpbmsgb2YgdGhpcywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPj8gQSBwb29yIG1hbiwgb3IsIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgb2YgdGhhdCwgYSByaWNoIG1hbiwgd2hvIGhhZCBzcGVudCBhIGdyZWF0IGRlYWwgYW5kIHdhcywgcGVyaGFwcywgaW4gYQogICAgICAgICAgICAgICAgICAgIGNlcnRhaW4gc2Vuc2Ugc2hvcnQgb2YgbW9uZXksIHdhcyBub3Qgb25seSBhZnJhaWQgdG8gc2hvdyBoaW1zZWxmIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcmtldC1wbGFjZSwgYnV0IGZvdW5kIGl0IHVuc2FmZSBldmVuIHRvIHN0YXkgYXQgaG9tZS4gQW5kIHRvIHRoaW5rIHRoYXQKICAgICAgICAgICAgICAgICAgICBBbmRyb3Rpb24gd2FzIHJlc3BvbnNpYmxlIGZvciB0aG9zZSBmZWFycyzigJRBbmRyb3Rpb24sIHdob3NlIHBhc3QgbGlmZQogICAgICAgICAgICAgICAgICAgIGFuZCBjb25kdWN0IGRpc3F1YWxpZnkgaGltIGZvciBzZWVraW5nIHNhdGlzZmFjdGlvbiBhdCBsYXcgZXZlbiBmb3IgaGltc2VsZiwKICAgICAgICAgICAgICAgICAgICBtdWNoIG1vcmUgZm9yIGltcG9zaW5nIFByb3BlcnR5LXRheGVzIGZvciB0aGUgU3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['24.166'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjYiIHVuaXQ9InNlY3Rpb24iIC8+SWYgYW55b25lIGFza2VkIGhpbSzigJRvciBhc2tlZCB5b3UsIFRpbW9jcmF0ZXMsIHRoZQogICAgICAgICAgICAgICAgICAgIGFwb2xvZ2lzdCBhbmQgYWJldHRvciBvZiB0aGF0IGdhbmcs4oCUd2hldGhlciBvdXIgcHJvcGVydHkgb3Igb3VyCiAgICAgICAgICAgICAgICAgICAgcGVyc29ucyBhcmUgYW1lbmFibGUgdG8gdGF4YXRpb24sIHlvdSB3b3VsZCByZXBseSwgaWYgeW91IGNob3NlIHRvIHRlbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIG91ciBwcm9wZXJ0eSwgYmVjYXVzZSBpdCBpcyBmcm9tIG91ciBwcm9wZXJ0eSB0aGF0IHdlIHBheS4gVGhlbiB3aHksIHlvdQogICAgICAgICAgICAgICAgICAgIHVucGFyYWxsZWxlZCBzY291bmRyZWxzLCBpbnN0ZWFkIG9mIGNvbmZpc2NhdGluZyBlc3RhdGVzIGFuZCBob3VzZXMsIGFuZCBwdXR0aW5nCiAgICAgICAgICAgICAgICAgICAgdGhlbSBvbiB0aGUgc2NoZWR1bGUsIGRpZCB5b3UgaW1wcmlzb24gYW5kIG1hbHRyZWF0IG1lbiB3aG8gd2VyZSBmdWxsIGNpdGl6ZW5zLAogICAgICAgICAgICAgICAgICAgIGFzIHdlbGwgYXMgdGhvc2UgdW5oYXBweSBhbGllbnMsIHdob20geW91IHRyZWF0ZWQgbW9yZSBvdXRyYWdlb3VzbHkgdGhhbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgb3duIGRvbWVzdGljIHNsYXZlcz8gPC90cmFuc2xhdGlvbj4="
translation['24.167'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjciIHVuaXQ9InNlY3Rpb24iIC8+SWYsIGdlbnRsZW1lbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5LCB5b3Ugd2lsbCB0dXJuIG92ZXIgaW4geW91ciBtaW5kcyB0aGUgcXVlc3Rpb24gd2hhdCBpcyB0aGUgZGlmZmVyZW5jZQogICAgICAgICAgICAgICAgICAgIGJldHdlZW4gYmVpbmcgYSBzbGF2ZSBhbmQgYmVpbmcgYSBmcmVlIG1hbiwgeW91IHdpbGwgZmluZCB0aGF0IHRoZSBiaWdnZXN0CiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZSBpcyB0aGF0IHRoZSBib2R5IG9mIGEgc2xhdmUgaXMgbWFkZSByZXNwb25zaWJsZSBmb3IgYWxsIGhpcyBtaXNkZWVkcywKICAgICAgICAgICAgICAgICAgICB3aGVyZWFzIGNvcnBvcmFsIHB1bmlzaG1lbnQgaXMgdGhlIGxhc3QgcGVuYWx0eSB0byBpbmZsaWN0IG9uIGEgZnJlZSBtYW4uIFRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIHJldmVyc2VkIHRoYXQgcHJpbmNpcGxlLCBhbmQgYXBwbGllZCBwdW5pc2htZW50IHRvIHRoZSBib2RpZXMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICB2aWN0aW1zLCBhcyB0aG91Z2ggdGhleSB3ZXJlIGJvbmRzZXJ2YW50cy4gPC90cmFuc2xhdGlvbj4="
translation['24.168'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kcm90aW9uJ3MgYmVoYXZpb3IgdG93YXJkcyB5b3Ugd2FzIHNvIHVuZmFpciBhbmQgc28gZ3JlZWR5IHRoYXQsIHdoaWxzdAogICAgICAgICAgICAgICAgICAgIGFwcHJvdmluZyB0aGUgY29uZHVjdCBvZiBoaXMgb3duIGZhdGhlciwgd2hvIGhhZCBiZWVuIGNvbmZpbmVkIGluIGphaWwgZm9yIGEKICAgICAgICAgICAgICAgICAgICBkZWJ0IHRvIHRoZSBTdGF0ZSBhbmQgbWFkZSBoaXMgZXNjYXBlIHdpdGhvdXQgcGF5bWVudCBvciB0cmlhbCwgaGUgdGhvdWdodCBpdAogICAgICAgICAgICAgICAgICAgIHF1aXRlIHByb3BlciB0aGF0IGFueSBvdGhlciBjaXRpemVuLCB3aG8gd2FzIHVuYWJsZSB0byBwYXkgb3V0IG9mIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMsIHNob3VsZCBiZSBkcmFnZ2VkIGJ5IGhpbSBmcm9tIGhpcyBob21lIHRvIHRoZSBqYWlsIGFuZCB0aGVyZQogICAgICAgICAgICAgICAgICAgIGltcHJpc29uZWQuIDwvdHJhbnNsYXRpb24+"
translation['24.169'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNjkiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIFRpbW9jcmF0ZXMsIGF0IHRoZSB0aW1lIHdoZW4KICAgICAgICAgICAgICAgICAgICBoZSB3YXMgbGV2eWluZyBkb3VibGUgcGF5bWVudCwgd291bGQgbmV2ZXIgaGF2ZSBjb25zZW50ZWQgdG8gYWNjZXB0IGJhaWwsIEkgZG8KICAgICAgICAgICAgICAgICAgICBub3Qgc2F5IHRpbGwgdGhlIG5pbnRoIHByZXNpZGVuY3ksIGJ1dCBldmVuIGZvciBhIHNpbmdsZSBkYXksIGZyb20gYW55IG9mIHVzCiAgICAgICAgICAgICAgICAgICAgY29tbW9uIHBlb3BsZTsgd2UgbXVzdCBlaXRoZXIgcGF5IGRvd24gdGhlIG1vbmV5IG9yIGluY29udGluZW50bHkgYmUgbG9kZ2VkIGluCiAgICAgICAgICAgICAgICAgICAgcHJpc29uLiBIZSB1c2VkIHRvIGhhbmQgb3ZlciB0byB0aGUgcG9saWNlIGV2ZW4gYSBtYW4gd2hvIGhhZCBuZXZlciBiZWVuCiAgICAgICAgICAgICAgICAgICAgY29uZGVtbmVkIGluIGFueSBjb3VydC4gWWV0IHRvZGF5IGhlIGhhcyBkYXJlZCwgdGFraW5nIGZ1bGwgcmVzcG9uc2liaWxpdHksIHRvCiAgICAgICAgICAgICAgICAgICAgaW50cm9kdWNlIGEgbGF3IHRvIGVuYWJsZSBwZXJzb25zIG9uIHdob20geW91IGhhdmUgcGFzc2VkIHNlbnRlbmNlLCB0byBnbyB3aGVyZQogICAgICAgICAgICAgICAgICAgIHRoZXkgd2lsbCBpbiBmcmVlZG9tLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.170'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5ldmVydGhlbGVzcyB0aGV5IHdpbGwgYWxsZWdlIHRoYXQgYm90aCB0aGVuIGFuZCBub3cgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYWN0aW5nIGluIHlvdXIgaW50ZXJlc3RzLiBXaWxsIHlvdSB0aGVuIGFjY2VwdCB0aGVpciBleHBsb2l0cyBhcyBkdWUgdG8gemVhbCBpbgogICAgICAgICAgICAgICAgICAgIHlvdXIgaW50ZXJlc3RzPyBPciB3aWxsIHlvdSBpbmR1bGdlbnRseSB0b2xlcmF0ZSB0aGUgaGFuZGl3b3JrIG9mIHRoZWlyIGF1ZGFjaXR5CiAgICAgICAgICAgICAgICAgICAgYW5kIHdpY2tlZG5lc3M/IE5vLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+OwogICAgICAgICAgICAgICAgICAgIHlvdSBvdWdodCB0byBhYmhvciBzdWNoIG1lbiByYXRoZXIgdGhhbiBsaWJlcmF0ZSB0aGVtLiBIZSB3aG8gY2xhaW1zIHlvdXIKICAgICAgICAgICAgICAgICAgICBpbmR1bGdlbmNlIGFzIGhhdmluZyBhY3RlZCBmb3IgdGhlIGdvb2Qgb2YgdGhlIGNvbW1vbndlYWx0aCBtdXN0IGJlIHNob3duIHRvCiAgICAgICAgICAgICAgICAgICAgcG9zc2VzcyB0aGUgc3Bpcml0IG9mIHRoZSBjb21tb24gd2VhbHRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.171'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzEiIHVuaXQ9InNlY3Rpb24iIC8+VGhhdAogICAgICAgICAgICAgICAgICAgIHNwaXJpdCBpcyBhIHNwaXJpdCBvZiBjb21wYXNzaW9uIGZvciB0aGUgaGVscGxlc3MsIGFuZCBvZiByZXNpc3RhbmNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGludGltaWRhdGlvbiBvZiB0aGUgc3Ryb25nIGFuZCBwb3dlcmZ1bDsgaXQgZG9lcyBub3QgaW5zcGlyZSBicnV0YWwgdHJlYXRtZW50IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHBvcHVsYWNlLCBhbmQgc3Vic2VydmllbmNlIHRvIHRoZSBwb3RlbnRhdGVzIG9mIHRoZSBkYXku4oCUQW5kIHN1Y2gKICAgICAgICAgICAgICAgICAgICBpcyB5b3VyIGNvbmR1Y3QsIFRpbW9jcmF0ZXM7IGFuZCB0aGVyZWZvcmUgdGhlIGp1cnkgd2lsbCBoYXZlIGJldHRlciByZWFzb24gdG8KICAgICAgICAgICAgICAgICAgICByZWZ1c2UgeW91IGEgaGVhcmluZyBhbmQgY29uZGVtbiB5b3UgdG8gZGVhdGggdGhhbiB0byBhY3F1aXQgeW91IGZvciB0aGUgc2FrZSBvZgogICAgICAgICAgICAgICAgICAgIEFuZHJvdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['24.172'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhvd2V2ZXIsIEkgd2lsbCBtYWtlIGl0IHF1aXRlIGNsZWFyIHRvIHlvdSB3aXRob3V0IG1vcmUgYWRvIHRoYXQgdGhleSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgY2Fycnkgb3V0IHRob3NlIGV4YWN0aW9ucyBmb3IgeW91ciBiZW5lZml0LiBJZiB0aGV5IHdlcmUgYXNrZWQgd2hldGhlciwgaW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICBvcGluaW9uLCB0aGUgZ3JlYXRlciBpbmp1cnkgaXMgZG9uZSB0byB0aGUgY29tbW9ud2VhbHRoIGJ5IHRpbGxlcnMgb2YgdGhlIHNvaWwsCiAgICAgICAgICAgICAgICAgICAgd2hvIGxpdmUgZnJ1Z2FsbHksIGJ1dCwgYmVjYXVzZSBvZiB0aGUgY29zdCBvZiBtYWludGFpbmluZyB0aGVpciBjaGlsZHJlbiwgb3Igb2YKICAgICAgICAgICAgICAgICAgICBob3VzZWhvbGQgZXhwZW5zZXMsIG9yIG9mIG90aGVyIHB1YmxpYyBidXJkZW5zLCBhcmUgYmVoaW5kaGFuZCB3aXRoIHRoZWlyIHRheGVzLAogICAgICAgICAgICAgICAgICAgIG9yIGJ5IHBlb3BsZSB3aG8gcGx1bmRlciBhbmQgc3F1YW5kZXIgdGhlIG1vbmV5IG9mIHdpbGxpbmcgdGF4cGF5ZXJzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXZlbnVlIHRoYXQgY29tZXMgZnJvbSBvdXIgYWxsaWVzLCBJIGFtIHN1cmUgdGhhdCwgZm9yIGFsbCB0aGVpciBoYXJkaWhvb2QsCiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3VsZCBuZXZlciBoYXZlIHRoZSBhdWRhY2l0eSB0byByZXBseSB0aGF0IHRob3NlIHdobyBmYWlsIHRvIGNvbnRyaWJ1dGUKICAgICAgICAgICAgICAgICAgICB0aGVpciBvd24gbW9uZXkgYXJlIHdvcnNlIHRyYW5zZ3Jlc3NvcnMgdGhhbiB0aG9zZSB3aG8gZW1iZXp6bGUgcHVibGljIG1vbmV5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.173'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzMiIHVuaXQ9InNlY3Rpb24iIC8+4oCUV2hhdCB0aGVuIGlzIHRoZSByZWFzb24sCiAgICAgICAgICAgICAgICAgICAgVGltb2NyYXRlcyBhbmQgQW5kcm90aW9uLCB0aGF0LCB0aG91Z2ggb25lIG9mIHlvdSBoYXMgdGFrZW4gcGFydCBpbiBwdWJsaWMgbGlmZQogICAgICAgICAgICAgICAgICAgIGZvciBtb3JlIHRoYW4gdGhpcnR5IHllYXJzLCB0aG91Z2ggZHVyaW5nIHRoYXQgdGltZSBtYW55IGNvbW1hbmRlcnMgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlZnJhdWRlZCB0aGUgY29tbW9ud2VhbHRoLCBhbmQgbWFueSBwb2xpdGljaWFucyBhcyB3ZWxsLCB3aG8gaGF2ZSBiZWVuIHRyaWVkIGluCiAgICAgICAgICAgICAgICAgICAgdGhpcyBjb3VydCwgYW5kIHRob3VnaCBzb21lIG9mIHRoZW0gaGF2ZSBzdWZmZXJlZCBkZWF0aCBmb3IgdGhlaXIgY3JpbWVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgaGF2ZSBjb25kZW1uZWQgdGhlbXNlbHZlcyBieSBzbGlwcGluZyBhd2F5IGFuZCBkaXNhcHBlYXJpbmcgYWx0b2dldGhlciwKICAgICAgICAgICAgICAgICAgICBuZWl0aGVyIG9mIHlvdSBldmVyIG9uY2UgYXBwZWFyZWQgYXMgcHJvc2VjdXRvciBvZiB0aG9zZSBvZmZlbmRlcnMsIG9yIGV4cHJlc3NlZAogICAgICAgICAgICAgICAgICAgIGFueSBpbmRpZ25hdGlvbiBhdCB0aGUgd3JvbmdzIG9mIHRoZSBjaXR5LCBidXQgbWFkZSB5b3VyIGZpcnN0IGV4aGliaXRpb24gb2YKICAgICAgICAgICAgICAgICAgICBhbnhpZXR5IGZvciBvdXIgd2VsZmFyZSBpbiBhbiBhZmZhaXIgd2hpY2ggaW52b2x2ZWQgaGFyc2ggdHJlYXRtZW50IG9mIGEgZ3JlYXQKICAgICAgICAgICAgICAgICAgICBtYW55IHBlb3BsZT8gPC90cmFuc2xhdGlvbj4="
translation['24.174'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzQiIHVuaXQ9InNlY3Rpb24iIC8+4oCURG8geW91IHdpc2ggbWUgdG8KICAgICAgICAgICAgICAgICAgICB0ZWxsIHlvdSB0aGUgcmVhc29uLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+PwogICAgICAgICAgICAgICAgICAgIFRoZXNlIG1lbiBzaGFyZSBpbiB0aGUgZnJhdWRzIHRoYXQgY2VydGFpbiBwZXJzb25zIHByYWN0aXNlIG9uIHlvdSwgYW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBhbHNvIGdldCB0aGVpciBwaWNraW5ncyBmcm9tIHRoZSBjb2xsZWN0aW9uIG9mIHJldmVudWUuIEluIHRoZWlyIGluc2F0aWFibGUKICAgICAgICAgICAgICAgICAgICBncmVlZCB0aGV5IHJlYXAgYSBkb3VibGUgaGFydmVzdCBmcm9tIHRoZSBTdGF0ZS4gRm9yIGl0IGlzIG5vdCBhbiBlYXNpZXIgbWF0dGVyCiAgICAgICAgICAgICAgICAgICAgdG8gbWFrZSBlbmVtaWVzIG9mIGEgbXVsdGl0dWRlIG9mIHBldHR5IG9mZmVuZGVycyB0aGFuIG9mIGEgZmV3IGJpZyBvZmZlbmRlcnM7CiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBvZiBjb3Vyc2UgaXMgaXQgYSBtb3JlIHBvcHVsYXIgdGhpbmcgdG8gaGF2ZSBhbiBleWUgZm9yIHRoZSBzaW5zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbnkgdGhhbiBmb3IgdGhlIHNpbnMgb2YgdGhlIGZldy4gPC90cmFuc2xhdGlvbj4="
translation['24.175'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwKICAgICAgICAgICAgICAgICAgICB0aGUgcmVhc29uIGlzIHdoYXQgSSBhbSB0ZWxsaW5nIHlvdS4gWW91IG11c3QsIHRoZXJlZm9yZSwgdGFrZSB0aGVzZSBmYWN0cyBpbnRvCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCwgYW5kLCBiZWFyaW5nIGluIG1pbmQgdGhlaXIgc2V2ZXJhbCBtaXNkZWVkcywgcHVuaXNoIGV2ZXJ5IG9uZSBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAgYXMgc29vbiBhcyB5b3UgaGF2ZSBjYXVnaHQgaGltLiBOZXZlciBtaW5kIGhvdyBsb25nIGFnbyB0aGUgb2ZmZW5jZSB3YXMKICAgICAgICAgICAgICAgICAgICBjb21taXR0ZWQ7IGNvbnNpZGVyIG9ubHkgd2hldGhlciB0aGV5IGNvbW1pdHRlZCBpdC4gSWYgeW91IGFyZSBpbmR1bGdlbnQgdG9kYXkKICAgICAgICAgICAgICAgICAgICB0byBjcmltZXMgdGhhdCBhcm91c2VkIHlvdXIgaW5kaWduYXRpb24gdGhlbiwgaXQgd2lsbCBsb29rIGFzIHRob3VnaCB5b3UKICAgICAgICAgICAgICAgICAgICBzZW50ZW5jZWQgdGhlbSB0byByZXBheSB0aGUgbW9uZXkgYmVjYXVzZSB5b3Ugd2VyZSBhbmdyeSwgbm90IGJlY2F1c2UgeW91CiAgICAgICAgICAgICAgICAgICAgc3VmZmVyZWQgYW55IHdyb25nLiBGb3IgdG8gZG8gc29tZXRoaW5nIHNwaXRlZnVsIG9uIHRoZSBzcHVyIG9mIHRoZSBtb21lbnQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbWFuIHdobyBoYXMgaHVydCB5b3UgaXMgYSBzeW1wdG9tIG9mIGFuZ2VyOyBpZiB5b3UgYXJlIHJlYWxseSBhZ2dyaWV2ZWQsIHlvdQogICAgICAgICAgICAgICAgICAgIHdhaXQgdGlsbCB5b3UgaGF2ZSB0aGUgbWFsZWZhY3RvciBhdCB5b3VyIG1lcmN5LCBhbmQgdGhlbiBwdW5pc2ggaGltLiBZb3UgbXVzdAogICAgICAgICAgICAgICAgICAgIG5vdCBsZXQgaXQgYmUgaW5mZXJyZWQgZnJvbSB5b3VyIHBsYWNhYmlsaXR5IHRvZGF5IHRoYXQgeW91IGRpc3JlZ2FyZGVkIHlvdXIKICAgICAgICAgICAgICAgICAgICBvYXRocyBhbmQgZ3JhdGlmaWVkIGFuIHVuanVzdCBwYXNzaW9uIHRoZW4uIFlvdSBvdWdodCB0byBkZXRlc3QgdGhlbTsgeW91IG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdG8gYmUgaW1wYXRpZW50IG9mIHRoZSBzb3VuZCBvZiB0aGUgdm9pY2Ugb2YgZWl0aGVyIG9mIHRob3NlIHR3byBtZW4sIHdob3NlCiAgICAgICAgICAgICAgICAgICAgcHVibGljIGNvbmR1Y3QgaGFzIGJlZW4gd2hhdCBJIGRlc2NyaWJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.176'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlllcywgYnV0LCBpbiBzcGl0ZSBvZiB0aG9zZSBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBkZWxpbnF1ZW5jaWVzLCB0aGVyZSB3YXMsIGl0IG1heSBiZSBzYWlkLCBvdGhlciBidXNpbmVzcyB3aGljaCB0aGV5IG1hbmFnZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIGNyZWRpdC4gT24gdGhlIGNvbnRyYXJ5LCBpbiBldmVyeSByZXNwZWN0IHRoZWlyIGJlaGF2aW9yIHRvd2FyZHMgdGhlaXIKICAgICAgICAgICAgICAgICAgICBmZWxsb3ctY2l0aXplbnMgaGFzIGJlZW4gc3VjaCB0aGF0IHRoZSBzdG9yeSB5b3UgaGF2ZSBoZWFyZCBpcyB0aGUgbGVhc3Qgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVhc29ucyB5b3UgaGF2ZSBmb3IgaGF0aW5nIHRoZW0uIFdoYXQgZG8geW91IHdpc2ggbWUgdG8gbWVudGlvbj8gSG93IHRoZXkKICAgICAgICAgICAgICAgICAgICByZXBhaXJlZCB0aGUgcHJvY2Vzc2lvbmFsIG9ybmFtZW50cz8gSG93IHRoZXkgYnJva2UgdXAgdGhlIGNyb3ducz8gVGhlaXIgc3VjY2VzcwogICAgICAgICAgICAgICAgICAgIGFzIG1hbnVmYWN0dXJlcnMgb2Ygc2F1Y2Vycz8gPC90cmFuc2xhdGlvbj4="
translation['24.177'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzciIHVuaXQ9InNlY3Rpb24iIC8+V2h5LCBmb3IgdGhvc2UKICAgICAgICAgICAgICAgICAgICBwZXJmb3JtYW5jZXMgYWxvbmUsIHRob3VnaCB0aGV5IGhhZCBjb21taXR0ZWQgbm8gb3RoZXIgZnJhdWQgb24gdGhlIENpdHksIGl0CiAgICAgICAgICAgICAgICAgICAgc2VlbXMgdG8gbWUgdGhhdCB0aGV5IGRlc2VydmUgbm90IG9uZSBidXQgdGhyZWUgc2VudGVuY2VzIG9mIGRlYXRoOyBmb3IgdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICBndWlsdHkgb2Ygc2FjcmlsZWdlLCBvZiBpbXBpZXR5LCBvZiBlbWJlenpsZW1lbnQsIG9mIGV2ZXJ5IG1vbnN0cm91cyBjcmltZS4gVGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlciBwYXJ0LCB0aGVuLCBvZiB0aGUgc3BlZWNoIGJ5IHdoaWNoIEFuZHJvdGlvbiB0aHJldyBkdXN0IGluIHlvdXIgZXllcyBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBsZWF2ZSB1bm5vdGljZWQ7IGJ1dCwgYnkgYWxsZWdpbmcgdGhhdCB0aGUgbGVhdmVzIG9mIHRoZSBjcm93bnMgd2VyZSByb3R0ZW4KICAgICAgICAgICAgICAgICAgICB3aXRoIGFnZSBhbmQgZmFsbGluZyBvZmYs4oCUYXMgdGhvdWdoIHRoZXkgd2VyZSB2aW9sZXQtbGVhdmVzIG9yCiAgICAgICAgICAgICAgICAgICAgcm9zZS1sZWF2ZXMsIG5vdCBsZWF2ZXMgbWFkZSBvZiBnb2xk4oCUaGUgcGVyc3VhZGVkIHlvdSB0byBtZWx0IHRoZW0KICAgICAgICAgICAgICAgICAgICBkb3duLiBCZWluZyBhcHBvaW50ZWQgdG8gcGVyZm9ybSB0aGF0IG9wZXJhdGlvbiwgaGUgY2hvc2UgYXMgaGlzIGFzc2lzdGFudAogICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXMsIHRoZSBjb25zdGFudCBwYXJ0bmVyIG9mIGhpcyBtaXNkZWVkcy4gPC90cmFuc2xhdGlvbj4="
translation['24.178'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZW4sIGluIHByb3ZpZGluZyBmb3IgdGhlIGNvbGxlY3Rpb24gb2YgdGF4ZXMsIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHB1dCBpbiBhIGNsYXVzZSB0aGF0IHRoZSBwdWJsaWMgYWNjb3VudGFudCBzaG91bGQgYXR0ZW5kLiBUaGF0IHdhcyB2ZXJ5IGhvbmVzdAogICAgICAgICAgICAgICAgICAgIG9mIGhpbTsgb25seSBldmVyeSB0YXhwYXllciB3YXMgY2VydGFpbiB0byBjaGVjayB0aGUgYWNjb3VudHMuIEJ1dCBpbiBkZWFsaW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgY3Jvd25zIHRoYXQgaGUgd2FzIHRvIGJyZWFrIHVwLCBoZSBsZWZ0IG91dCB0aGF0IHZlcnkgcHJvcGVyCiAgICAgICAgICAgICAgICAgICAgcmVndWxhdGlvbjsgaGUgd2FzIGhpbXNlbGYgb3JhdG9yLCBnb2xkc21pdGgsIGJ1c2luZXNzLW1hbmFnZXIsIGFuZCBhdWRpdG9yIG9mCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMuIDwvdHJhbnNsYXRpb24+"
translation['24.179'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNzkiIHVuaXQ9InNlY3Rpb24iIC8+4oCUTm93IGlmIHlvdSwgc2lyLCBoYWQKICAgICAgICAgICAgICAgICAgICBjbGFpbWVkIG91ciBlbnRpcmUgY29uZmlkZW5jZSBpbiBhbGwgeW91ciBwdWJsaWMgYnVzaW5lc3MsIHlvdXIgZGlzaG9uZXN0eSB3b3VsZAogICAgICAgICAgICAgICAgICAgIG5vdCBoYXZlIGJlZW4gZXF1YWxseSBtYW5pZmVzdDsgYnV0LCBzZWVpbmcgdGhhdCBpbiB0aGUgbWF0dGVyIG9mIHRoZSB0YXhlcyB5b3UKICAgICAgICAgICAgICAgICAgICBsYWlkIGRvd24gdGhlIGp1c3QgcHJpbmNpcGxlIHRoYXQgdGhlIENpdHkgbXVzdCB0cnVzdCwgbm90IHlvdSwgYnV0IGhlciBvd24KICAgICAgICAgICAgICAgICAgICBzZXJ2YW50cywgYW5kIHRoZW4sIHdoZW4geW91IHRvb2sgdXAgYW5vdGhlciBqb2IsIGFuZCB3ZXJlIHRhbXBlcmluZyB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIGNvbnNlY3JhdGVkIHBsYXRlLCBzb21lIG9mIGl0IGRlZGljYXRlZCBiZWZvcmUgd2Ugd2VyZSBib3JuLCB5b3UgZm9yZ290IHRvCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZSB0aGUgcHJlY2F1dGlvbiB0aGF0IHdhcyB0YWtlbiBhdCB5b3VyIG93biBpbnN0YW5jZSBpbiByZXNwZWN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHRheC1jb2xsZWN0aW9uLCBpcyBpdCBub3QgcGVyZmVjdGx5IGNsZWFyIHdoYXQgeW91IHdlcmUgYWltaW5nIGF0PyBPZiBjb3Vyc2UgaXQKICAgICAgICAgICAgICAgICAgICBpcy4gPC90cmFuc2xhdGlvbj4="
translation['24.180'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODAiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGNvbnNpZGVyIHRob3NlIGdsb3Jpb3VzIGFuZAogICAgICAgICAgICAgICAgICAgIG11Y2gtYWRtaXJlZCBpbnNjcmlwdGlvbnMgdGhhdCBoZSBoYXMgb2JsaXRlcmF0ZWQgZm9yIGFsbCB0aW1lLCBhbmQgdGhlIHN0cmFuZ2UKICAgICAgICAgICAgICAgICAgICBhbmQgYmxhc3BoZW1vdXMgaW5zY3JpcHRpb25zIHRoYXQgaGUgaGFzIHdyaXR0ZW4gaW4gdGhlaXIgc3RlYWQuIFlvdSBhbGwsIEkKICAgICAgICAgICAgICAgICAgICBzdXBwb3NlLCB1c2VkIHRvIHNlZSB0aGUgd29yZHMgd3JpdHRlbiB1bmRlciB0aGUgY2lyY2xldHMgb2YgdGhlIGNyb3duczoKICAgICAgICAgICAgICAgICAgICDigJxUaGUgQWxsaWVzIGNyb3duZWQgdGhlIFBlb3BsZSBmb3IgdmFsb3IgYW5kIHJpZ2h0ZW91c25lc3Ms4oCdCiAgICAgICAgICAgICAgICAgICAgb3Ig4oCcVGhlIEFsbGllcyBkZWRpY2F0ZWQgdG8gdGhlIEdvZGRlc3Mgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGEgcHJpemUgb2YgdmljdG9yeeKAnTsgb3IsCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgc2V2ZXJhbCBzdGF0ZXMgb2YgdGhlIEFsbGlhbmNlLCDigJxTdWNoLWFuZC1zdWNoIGEgY2l0eSBjcm93bmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIFBlb3BsZSBieSB3aG9tIHRoZXkgd2VyZSBkZWxpdmVyZWQs4oCdIG9yIOKAnFRoZSBsaWJlcmF0ZWQKICAgICAgICAgICAgICAgICAgICBFdWJvZWFucyzigJ0gZm9yIGV4YW1wbGUsIOKAnGNyb3duZWQgdGhlIFBlb3BsZSzigJ0gb3IKICAgICAgICAgICAgICAgICAgICBhZ2FpbiDigJw8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBzZWEtZmlnaHQgd2l0aCB0aGUgTGFjZWRhZW1vbmlhbnMs4oCdIOKAnENoYWJyaWFzIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgc2VhLWZpZ2h0IG9mZiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDM5MDkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMzkwOSI+TmF4b3M8L3BsYWNlTmFtZT4u4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.181'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgSSBzYXksIHdlcmUgdGhlIGluc2NyaXB0aW9ucyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBjcm93bnMuIFRoZXkgd2VyZSB0b2tlbnMgb2YgZW11bGF0aW9uIGFuZCBob25vcmFibGUgYW1iaXRpb247IGJ1dCBub3cgdGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgdmFuaXNoZWQgd2l0aCB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIGNyb3ducywgYW5kIHRoZSBzYXVjZXJzIHdoaWNoIHRoYXQgbGV3ZAogICAgICAgICAgICAgICAgICAgIGZlbGxvdyBoYXMgaGFkIG1hZGUgaW4gdGhlaXIgcGxhY2UgYmVhciB0aGUgaW5zY3JpcHRpb24g4oCcIE1hZGUgYnkKICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gb2YgQW5kcm90aW9uLuKAnSBBbmQgc28gb3VyIHRlbXBsZXMgY29udGFpbiBnb2xkIHBsYXRlIG1hcmtlZAogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIG5hbWUgb2YgYSBtYW4gd2hvbSB0aGUgbGF3cyBmb3JiaWQgdG8gZW50ZXIgdGhvc2UgdGVtcGxlcyBpbiBwZXJzb24KICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIG9mIGhpcyBmaWx0aHkgbGlmZS4gSnVzdCBsaWtlIHRoZSBvbGQgaW5zY3JpcHRpb25zLOKAlElzIGl0CiAgICAgICAgICAgICAgICAgICAgbm90P+KAlGFuZCB0aGUgc2FtZSBpbmNlbnRpdmUgdG8geW91ciBhbWJpdGlvbnMhIDwvdHJhbnNsYXRpb24+"
translation['24.182'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODIiIHVuaXQ9InNlY3Rpb24iIC8+WW91IG1heSwgdGhlbiwgbWFyayB0aHJlZSBzY2FuZGFsb3VzIGNyaW1lcyBjb21taXR0ZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aGVzZSBwZXJzb25zLiBUaGV5IGhhdmUgcm9iYmVkIHRoZSBHb2RkZXNzIG9mIGhlciBjcm93bnMuIFRoZXkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGV4dGluZ3Vpc2hlZCBpbiB0aGUgQ2l0eSB0aGF0IHNwaXJpdCBvZiBlbXVsYXRpb24gdGhhdCBzcHJhbmcgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBhY2hpZXZlbWVudHMgd2hpY2ggdGhlIGNyb3ducywgd2hpbGUgaW4gYmVpbmcsIGNvbW1lbW9yYXRlZC4gVGhleSBoYXZlIGRlcHJpdmVkCiAgICAgICAgICAgICAgICAgICAgdGhlIGRvbm9ycyBvZiBhIGdyZWF0IGhvbm9yLOKAlHRoZSBjcmVkaXQgb2YgZ3JhdGl0dWRlIGZvciBiZW5lZml0cwogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkLiBBbmQgYWZ0ZXIgdGhpcyBsb25nIHNlcmllcyBvZiBldmlsIGRlZWRzIHRoZXkgaGF2ZSBncm93biBzbyBjYWxsb3VzCiAgICAgICAgICAgICAgICAgICAgYW5kIHNvIGF1ZGFjaW91cyB0aGF0IG9uZSBvZiB0aGVtIGV4cGVjdHMgeW91IHRvIGFjcXVpdCBoaW0gZm9yIHRoZSBzYWtlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIG90aGVyLCBhbmQgdGhlIG90aGVyIHNpdHMgYnkgaGlzIHNpZGUgYW5kIGRvZXMgbm90IHNpbmsgaW50byB0aGUgZ3JvdW5kIGZvcgogICAgICAgICAgICAgICAgICAgIHNoYW1lIGF0IGhpcyBjb25kdWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.183'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODMiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IG9ubHkgaXMgaGUgbG9zdCB0bwogICAgICAgICAgICAgICAgICAgIHNoYW1lIHdoZW4gbW9uZXkgaXMgaW4gcXVlc3Rpb24sIGJ1dCBoZSBpcyBzbyBkdWxsLXdpdHRlZCB0aGF0IGhlIGNhbm5vdCBzZWUKICAgICAgICAgICAgICAgICAgICB0aGF0IGNyb3ducyBhcmUgYSBzeW1ib2wgb2YgbWVyaXQsIGJ1dCBzYXVjZXJzIGFuZCB0aGUgbGlrZSBvbmx5IG9mIHdlYWx0aDsgdGhhdAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IGNyb3duLCBob3dldmVyIHNtYWxsLCBpbXBsaWVzIHRoZSBzYW1lIHJlZ2FyZCBmb3IgaG9ub3IgYXMgaWYgaXQgd2VyZQogICAgICAgICAgICAgICAgICAgIGxhcmdlOyB0aGF0IGRyaW5raW5nLWN1cHMgYW5kIGNlbnNlcnMgYW5kIHN1Y2ggcG9zc2Vzc2lvbnMsIGlmIHZlcnkgbnVtZXJvdXMsCiAgICAgICAgICAgICAgICAgICAgYXR0YWNoIHRvIHRoZWlyIG93bmVycyBhIHNvcnQgb2YgcmVwdXRhdGlvbiBmb3Igd2VhbHRoOyBidXQsIGlmIGEgbWFuIHRha2VzCiAgICAgICAgICAgICAgICAgICAgcHJpZGUgaW4gdHJpZmxlcywgaW5zdGVhZCBvZiB3aW5uaW5nIHNvbWUgaG9ub3IgYnkgdGhlbSwgaGUgaXMgZGlzZGFpbmVkIGFzIGEKICAgICAgICAgICAgICAgICAgICBtYW4gb2YgdnVsZ2FyIHRhc3Rlcy4gVGhpcyBtYW4sIHRoZW4sIGFmdGVyIGRlc3Ryb3lpbmcgdGhlIHBvc3Nlc3Npb25zIG9mIGhvbm9yLAogICAgICAgICAgICAgICAgICAgIGhhcyBtYWRlIHRoZSBwb3NzZXNzaW9ucyBvZiB3ZWFsdGggbWVhbiBhbmQgdW53b3J0aHkgb2YgeW91ciBkaWduaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.184'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgaXMgYW5vdGhlciB0aGluZyB0aGF0IGhlIGRpZCBub3QgdW5kZXJzdGFuZCwKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBBdGhlbmlhbiBkZW1vY3JhY3ksIG5ldmVyIGVhZ2VyIHRvIGFjcXVpcmUgcmljaGVzLCBjb3ZldGVkIGdsb3J5IG1vcmUKICAgICAgICAgICAgICAgICAgICB0aGFuIGFueSBvdGhlciBwb3NzZXNzaW9uIGluIHRoZSB3b3JsZC4gSGVyZSBpcyB0aGUgcHJvb2Y6IG9uY2UgdGhleSBwb3NzZXNzZWQKICAgICAgICAgICAgICAgICAgICBncmVhdGVyIHdlYWx0aCB0aGFuIGFueSBvdGhlciBIZWxsZW5pYyBwZW9wbGUsIGJ1dCB0aGV5IHNwZW50IGl0IGFsbCBmb3IgbG92ZSBvZgogICAgICAgICAgICAgICAgICAgIGhvbm9yOyB0aGV5IGxhaWQgdGhlaXIgcHJpdmF0ZSBmb3J0dW5lcyB1bmRlciBjb250cmlidXRpb24sIGFuZCByZWNvaWxlZCBmcm9tIG5vCiAgICAgICAgICAgICAgICAgICAgcGVyaWwgZm9yIGdsb3J5J3Mgc2FrZS4gSGVuY2UgdGhlIFBlb3BsZSBpbmhlcml0cyBwb3NzZXNzaW9ucyB0aGF0IHdpbGwgbmV2ZXIKICAgICAgICAgICAgICAgICAgICBkaWU7IG9uIHRoZSBvbmUgaGFuZCB0aGUgbWVtb3J5IG9mIHRoZWlyIGFjaGlldmVtZW50cywgb24gdGhlIG90aGVyLCB0aGUgYmVhdXR5CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIG1lbW9yaWFscyBzZXQgdXAgaW4gdGhlaXIgaG9ub3Is4oCUeW9uZGVyIEdhdGUtaG91c2VzLCB0aGUKICAgICAgICAgICAgICAgICAgICBQYXJ0aGVub24sIHRoZSBwb3J0aWNvZXMsIHRoZSBkb2Nrc+KAlG5vdCBhIGNvdXBsZSBvZiBqdWdzLCBvciB0aHJlZSBvcgogICAgICAgICAgICAgICAgICAgIGZvdXIgYml0cyBvZiBnb2xkIHBsYXRlLCB3ZWlnaGluZyBhIHBvdW5kIGFwaWVjZSwgd2hpY2ggeW91LCBUaW1vY3JhdGVzLCB3aWxsCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zZSB0byBtZWx0IGRvd24gYWdhaW4gd2hlbmV2ZXIgdGhlIHdoaW0gdGFrZXMgeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['24.185'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODUiIHVuaXQ9InNlY3Rpb24iIC8+VG8gZGVkaWNhdGUgdGhvc2UgYnVpbGRpbmdzIHRoZXkgZGlkIG5vdCB0aXRoZSB0aGVtc2VsdmVzLAogICAgICAgICAgICAgICAgICAgIG5vciBmdWxmaWwgdGhlIGltcHJlY2F0aW9ucyBvZiB0aGVpciBlbmVtaWVzIGJ5IGRvdWJsaW5nIHRoZSBpbmNvbWUtdGF4OyBub3Igd2FzCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcG9saWN5IGV2ZXIgZ3VpZGVkIGJ5IHN1Y2ggYWR2aXNlcnMgYXMgeW91LiBObywgdGhleSBjb25xdWVyZWQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBlbmVtaWVzLCB0aGV5IGZ1bGZpbGxlZCB0aGUgcHJheWVycyBvZiBldmVyeSBzb3VuZC1oZWFydGVkIG1hbiBieSBlc3RhYmxpc2hpbmcKICAgICAgICAgICAgICAgICAgICBjb25jb3JkIHRocm91Z2hvdXQgdGhlIGNpdHksIGFuZCBzbyB0aGV5IGhhdmUgYmVxdWVhdGhlZCB0byB1cyB0aGVpcgogICAgICAgICAgICAgICAgICAgIGltcGVyaXNoYWJsZSBnbG9yeSxhbmQgZXhjbHVkZWQgZnJvbSB0aGUgbWFya2V0cGxhY2UgbWVuIHdob3NlIGhhYml0cyBvZiBsaWZlCiAgICAgICAgICAgICAgICAgICAgd2VyZSB3aGF0IHlvdXJzIGhhdmUgYWx3YXlzIGJlZW4uIDwvdHJhbnNsYXRpb24+"
translation['24.186'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHlvdSwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBoYXZlIGdyb3duIHNvCiAgICAgICAgICAgICAgICAgICAgZXh0cmVtZWx5IGdvb2QtbmF0dXJlZCBhbmQgcGxpYWJsZSwgdGhhdCwgd2l0aCB0aG9zZSBleGFtcGxlcyBldmVyIGJlZm9yZSB5b3UsCiAgICAgICAgICAgICAgICAgICAgeW91IGRvIG5vdCBpbWl0YXRlIHRoZW0s4oCUYW5kIEFuZHJvdGlvbiBpcyB0aGUgcmVwYWlyZXIgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIHByb2Nlc3Npb25hbCBwbGF0ZS4gQW5kcm90aW9uISBHcmFjaW91cyBIZWF2ZW5zISBEbyB5b3UgdGhpbmsgaW1waWV0eSBjb3VsZCBnbwogICAgICAgICAgICAgICAgICAgIGZ1cnRoZXIgdGhhbiB0aGF0PyBJIGhvbGQgdGhhdCB0aGUgbWFuIHdobyBpcyB0byBlbnRlciB0aGUgaG9seSBwbGFjZXMsIHRvIGxheQogICAgICAgICAgICAgICAgICAgIGhhbmRzIG9uIHRoZSB2ZXNzZWxzIG9mIGx1c3RyYXRpb24gYW5kIHRoZSBzYWNyaWZpY2lhbCBiYXNrZXRzLCBhbmQgdG8gYmVjb21lCiAgICAgICAgICAgICAgICAgICAgdGhlIGRpcmVjdG9yIG9mIGRpdmluZSB3b3JzaGlwLCBvdWdodCBub3QgdG8gYmUgcHVyZSBmb3IgYSBwcmVzY3JpYmVkIG51bWJlciBvZgogICAgICAgICAgICAgICAgICAgIGRheXMgb25seSBoaXMgd2hvbGUgbGlmZSBzaG91bGQgaGF2ZSBiZWVuIGtlcHQgcHVyZSBvZiB0aGUgaGFiaXRzIHRoYXQgaGF2ZQogICAgICAgICAgICAgICAgICAgIHBvbGx1dGVkIHRoZSBsaWZlIG9mIEFuZHJvdGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['24.187'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9mIEFuZHJvdGlvbiBJIG1heSBzcGVhayBhdCBncmVhdGVyIGxlbmd0aCBoZXJlYWZ0ZXIuIEFzCiAgICAgICAgICAgICAgICAgICAgZm9yIHdoYXQgaGUgd2lsbCBzYXkgaW4gc3VwcG9ydCBvZiBUaW1vY3JhdGVzLCBJIGhhdmUgc3RpbGwgbXVjaCBtb3JlIHRvIHNheSwKICAgICAgICAgICAgICAgICAgICBidXQgSSB3aWxsIHJlZnJhaW4uIEkgYW0gc3VyZSB0aGF0IGhlIHdpbGwgbm90IGJlIGFibGUgdG8gZGVueSB0aGF0IHRoaXMgbGF3IGlzCiAgICAgICAgICAgICAgICAgICAgdW5kZXNpcmFibGUsIHRoYXQgaXQgd2FzIGludHJvZHVjZWQgdW5jb25zdGl0dXRpb25hbGx5LCBhbmQgdGhhdCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGluaXF1aXRvdXMgaW4gZXZlcnkgcmVzcGVjdDsgYnV0IEkgdW5kZXJzdGFuZCB0aGF0IGhlIGFsbGVnZXMgdGhhdCB0aGUgbW9uZXkgaGFzCiAgICAgICAgICAgICAgICAgICAgbm93IGJlZW4gcGFpZCBpbiBmdWxsIGJ5IEFuZHJvdGlvbiwgR2xhdWNldGVzLCBhbmQgTWVsYW5vcHVzLCBhbmQgdGhhdCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGJlIG1vc3QgaW5mYW1vdXNseSB0cmVhdGVkIGlmLCB3aGVuIHRoZSBwZW9wbGUgb24gd2hvc2UgYmVoYWxmIGhlIGlzIGFjY3VzZWQgb2YKICAgICAgICAgICAgICAgICAgICBwcm9wb3NpbmcgaGlzIGxhdyBoYXZlIG1hZGUgZnVsbCByZXN0aXR1dGlvbiwgaGUgc2hvdWxkIG5ldmVydGhlbGVzcyBiZQogICAgICAgICAgICAgICAgICAgIGNvbnZpY3RlZC4gPC90cmFuc2xhdGlvbj4="
translation['24.188'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODgiIHVuaXQ9InNlY3Rpb24iIC8+SW4gbXkganVkZ2VtZW50LCBpdCBpcyBub3Qgb3BlbiB0bwogICAgICAgICAgICAgICAgICAgIGhpbSB0byBtYWtlIHRoZSBzbGlnaHRlc3QgdXNlIG9mIHRoYXQgcGxlYS7igJRJZiB5b3UsIHNpciwgYWRtaXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBkaWQgYnJpbmcgaW4geW91ciBsYXcgb24gYmVoYWxmIG9mIHRoZSBwZXJzb25zIHdobywgYXMgeW91IHNheSwgaGF2ZSBub3cKICAgICAgICAgICAgICAgICAgICBkb25lIHRoZWlyIGR1dHksIHlvdSBtdXN0IGNsZWFybHkgYmUgZm91bmQgZ3VpbHR5IG9uIHRoaXMgY291bnQs4oCUdGhhdAogICAgICAgICAgICAgICAgICAgIHN0YXR1dGVzIHN0aWxsIHZhbGlkIGRpc3RpbmN0bHkgZm9yYmlkIHlvdSB0byBpbnRyb2R1Y2UgYSBsYXcgdGhhdCBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIGFwcGx5IGVxdWFsbHkgdG8gZXZlcnkgY2l0aXplbjsgYW5kIHRoZSBqdXJ5IGhhdmUgc3dvcm4gdG8gZ2l2ZSBqdWRnZW1lbnQgaW4KICAgICAgICAgICAgICAgICAgICBhY2NvcmRhbmNlIHdpdGggdGhvc2Ugc3RhdHV0ZXMuIDwvdHJhbnNsYXRpb24+"
translation['24.189'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxODkiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIG90aGVyCiAgICAgICAgICAgICAgICAgICAgaGFuZCwgaWYgeW91IHNheSB0aGF0IHlvdSBsZWdpc2xhdGVkIGZvciB0aGUgZ2VuZXJhbCBnb29kLCB5b3UgbXVzdCBub3QgcGxlYWQKICAgICAgICAgICAgICAgICAgICB0aGUgcGF5bWVudCBtYWRlIGJ5IHRoZXNlIG1lbizigJRpdCBoYXMgbm90aGluZyB0byBkbyB3aXRoIHlvdXIKICAgICAgICAgICAgICAgICAgICBsYXcs4oCUeW91IG11c3QgcHJvdmUgdGhhdCB0aGUgbGF3IGl0c2VsZiBpcyBhY2NlcHRhYmxlIGFuZCB3ZWxsCiAgICAgICAgICAgICAgICAgICAgY29uY2VpdmVkLiBUaGF0IGlzIHRoZSBtb3RpdmUgeW91IGFsbGVnZTsgdGhhdCBpcyB3aGF0IEkgZGVueSwgYW5kIGhhdmUKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUgaW5kaWN0ZWQgeW91OyB0aGF0IGlzIHRoZSBpc3N1ZSB3aGljaCB0aGUganVyeSBpcyB0bwogICAgICAgICAgICAgICAgICAgIGRlY2lkZS7igJRJIHNob3VsZCwgaW5kZWVkLCBoYXZlIG5vIGRpZmZpY3VsdHkgaW4gcHJvdmluZyB0aGF0IHJlc3BlY3QKICAgICAgICAgICAgICAgICAgICBmb3IgbGF3IGlzIGJ5IG5vIG1lYW5zIHRoZSByZWFzb24gd2h5IHRoZXNlIHBlcnNvbnMgaGF2ZSBwYWlkIHRoZWlyIGRlYnQ7IGJ1dCBhcwogICAgICAgICAgICAgICAgICAgIHRoYXQgaXMgbm90IHRoZSBxdWVzdGlvbiBvbiB3aGljaCB0aGUganVyeSBoYXZlIHRvIHZvdGUsIHdoeSB0cm91YmxlIHRoZW0gYnkKICAgICAgICAgICAgICAgICAgICBkaXNjdXNzaW5nIGl0IG5vdz8gPC90cmFuc2xhdGlvbj4="
translation['24.190'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhlIHdpbGwgbm90LCBJIHN1cHBvc2UsIHNwYXJlIHlvdSB0aGUgYXJndW1lbnQgdGhhdCBpdCB3b3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHZlcnkgaGFyZCBvbiBoaW0gdG8gYmUgcHVuaXNoZWQgZm9yIHByb3Bvc2luZyB0aGF0IG5vIEF0aGVuaWFuIGNpdGl6ZW4gc2hhbGwgYmUKICAgICAgICAgICAgICAgICAgICBzZW50IHRvIGphaWw7IGFuZCB0aGF0IGl0IGlzIGZvciB0aGUgYmVuZWZpdCBtb3JlIGVzcGVjaWFsbHkgb2YgcGVvcGxlIHdpdGhvdXQKICAgICAgICAgICAgICAgICAgICBpbmZsdWVuY2UgdGhhdCBsYXdzIHNob3VsZCBiZSBhcyBtZXJjaWZ1bCBhbmQgaHVtYW5lIGFzIHBvc3NpYmxlLiBUbyBhdm9pZCBiZWluZwogICAgICAgICAgICAgICAgICAgIGxlZCBhc3RyYXksIHlvdSB3aWxsIGRvIHdlbGwgdG8gbGlzdGVuIHRvIGEgYnJpZWYgcmVqb2luZGVyIHRvIHRoYXQgcGxlYS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.191'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHdoZW4gaGUgdXNlcyB0aGUgcGhyYXNlLAogICAgICAgICAgICAgICAgICAgIOKAnHRoYXQgbm8gQXRoZW5pYW4gY2l0aXplbiBzaGFsbCBiZSBzZW50IHRvIGphaWws4oCdIGRvIG5vdAogICAgICAgICAgICAgICAgICAgIGZvcmdldCB0aGF0IGhlIGlzIGx5aW5nLiBUaGF0IGlzIG5vdCBoaXMgcHJvcG9zYWw7IGl0IGlzIHRoYXQgeW91IGp1cm9ycyBzaGFsbAogICAgICAgICAgICAgICAgICAgIGxvc2UgeW91ciBjb250cm9sIG92ZXIgcGVuYWx0aWVzLiBIZSBpcyB0cnlpbmcgdG8gZXN0YWJsaXNoIHRoZSByaWdodCBvZiBhcHBlYWwKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGEgdmVyZGljdCByZXR1cm5lZCBvbiBvYXRoLCBhZnRlciBhcmd1bWVudCBhbmQgdHJpYWwuIERvIG5vdCBsZXQgaGltCiAgICAgICAgICAgICAgICAgICAgcGljayBvdXQgb2YgaGlzIGxhdyBhbmQgcmVhZCBhIGZldyBwaHJhc2VzIHRoYXQgaGF2ZSBhIGJlbmV2b2xlbnQgc291bmQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZWFyIGxldCBoaW0gcHJvZHVjZSB0aGUgd2hvbGUgc3RhdHV0ZSwgY2xhdXNlIGJ5IGNsYXVzZSwgYW5kIGFsbG93IHlvdSB0bwogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIGl0cyBlZmZlY3RzLiBZb3Ugd2lsbCBmaW5kIHRoYXQgaXQgaXMgd2hhdCBJIGRlc2NyaWJlLCBub3Qgd2hhdCBoZQogICAgICAgICAgICAgICAgICAgIHByZXRlbmRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.192'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTIiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHdpdGggcmVnYXJkIHRvIHRoZSBwbGVhIHRoYXQKICAgICAgICAgICAgICAgICAgICBtZXJjaWZ1bCBhbmQgaHVtYW5lIGxhd3MgYXJlIGdvb2QgZm9yIHRoZSBjb21tb24gcGVvcGxlLCB5b3UgbXVzdCBjb25zaWRlciB0aGlzLgogICAgICAgICAgICAgICAgICAgIFRoZXJlIGFyZSB0d28gc29ydHMgb2YgcHJvYmxlbXMsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdpdGggd2hpY2ggdGhlIGxhd3Mgb2YgYWxsIG5hdGlvbnMgYXJlIGNvbmNlcm5lZC4KICAgICAgICAgICAgICAgICAgICBGaXJzdCwgd2hhdCBhcmUgdGhlIHByaW5jaXBsZXMgdW5kZXIgd2hpY2ggd2UgYXNzb2NpYXRlIHdpdGggb25lIGFub3RoZXIsIGhhdmUKICAgICAgICAgICAgICAgICAgICBkZWFsaW5ncyB3aXRoIG9uZSBhbm90aGVyLCBkZWZpbmUgdGhlIG9ibGlnYXRpb25zIG9mIHByaXZhdGUgbGlmZSwgYW5kLCBpbgogICAgICAgICAgICAgICAgICAgIGdlbmVyYWwsIG9yZGVyIG91ciBzb2NpYWwgcmVsYXRpb25zPyBTZWNvbmRseSwgd2hhdCBhcmUgdGhlIGR1dGllcyB0aGF0IGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgbWFuIGFtb25nIHVzIG93ZXMgdG8gdGhlIGNvbW1vbndlYWx0aCwgaWYgaGUgY2hvb3NlcyB0byB0YWtlIHBhcnQgaW4gcHVibGljIGxpZmUKICAgICAgICAgICAgICAgICAgICBhbmQgcHJvZmVzc2VzIGFueSBjb25jZXJuIGZvciB0aGUgU3RhdGU/IDwvdHJhbnNsYXRpb24+"
translation['24.193'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93CiAgICAgICAgICAgICAgICAgICAgaXQgaXMgdG8gdGhlIGFkdmFudGFnZSBvZiB0aGUgY29tbW9uIHBlb3BsZSB0aGF0IGxhd3Mgb2YgdGhlIGZvcm1lciBjYXRlZ29yeSwKICAgICAgICAgICAgICAgICAgICBsYXdzIG9mIHByaXZhdGUgaW50ZXJjb3Vyc2UsIHNoYWxsIGJlIGRpc3Rpbmd1aXNoZWQgYnkgY2xlbWVuY3kgYW5kIGh1bWFuaXR5LiBPbgogICAgICAgICAgICAgICAgICAgIHRoZSBvdGhlciBoYW5kIGl0IGlzIHRvIHlvdXIgY29tbW9uIGFkdmFudGFnZSB0aGF0IGxhd3Mgb2YgdGhlIHNlY29uZCBjbGFzcywgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3cyB0aGF0IGdvdmVybiBvdXIgcmVsYXRpb25zIHRvIHRoZSBTdGF0ZSwgc2hhbGwgYmUgdHJlbmNoYW50IGFuZCBwZXJlbXB0b3J5LAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UsIGlmIHRoZXkgYXJlIHNvLCBwb2xpdGljaWFucyB3aWxsIG5vdCBkbyBzbyBtdWNoIGhhcm0gdG8gdGhlIGNvbW1vbmFsdHkuCiAgICAgICAgICAgICAgICAgICAgVGhlcmVmb3JlLCB3aGVuIGhlIG1ha2VzIHVzZSBvZiB0aGlzIHBsZWEsIHJlZnV0ZSBpdCBieSB0ZWxsaW5nIGhpbSB0aGF0IGhlIGlzCiAgICAgICAgICAgICAgICAgICAgaW50cm9kdWNpbmcgY2xlbWVuY3ksIG5vdCBpbnRvIHRoZSBsYXdzIHRoYXQgYmVuZWZpdCB5b3UsIGJ1dCBpbnRvIHRoZSBsYXdzIHRoYXQKICAgICAgICAgICAgICAgICAgICBpbnRpbWlkYXRlIHBvbGl0aWNpYW5zLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.194'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IHdvdWxkIHRha2UgYSBsb25nIHNwZWVjaCB0byBwcm92ZSwgcG9pbnQgYnkgcG9pbnQsIHRoYXQKICAgICAgICAgICAgICAgICAgICBldmVyeXRoaW5nIGhlIHdpbGwgc2F5IHdpbGwgYmUgaW50ZW5kZWQgdG8gaG9vZHdpbmsgYW5kIG1pc2xlYWQgeW91LiBNb3N0IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHRvcGljcyBJIHdpbGwgcGFzcyBvdmVyLCBidXQgSSB3aWxsIG1lbnRpb24gb25lIGxlYWRpbmcgcG9pbnQgd2hpY2ggeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBiZWFyIGluIG1pbmQuIFdhdGNoIGFsbCBoaXMgcGxlYXMsIGhvd2V2ZXIgdmFyaW91cywgYW5kIHNlZSBpZiBoZSB3aWxsIGJlIGFibGUKICAgICAgICAgICAgICAgICAgICB0byBhZHZhbmNlIG9uZSB0byBwcm92ZSBoaXMgY29udGVudGlvbiB0aGF0IGEgbGVnaXNsYXRvciBtYXkganVzdGx5IG1ha2UgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBvcmRpbmFuY2UgZm9yIGJ5Z29uZSBpc3N1ZXMsIGFscmVhZHkgZGV0ZXJtaW5lZCwgYXMgZm9yIGNhc2VzIHlldCB0byBjb21lLgogICAgICAgICAgICAgICAgICAgIEV2ZXJ5IGNsYXVzZSBvZiBoaXMgbGF3IGlzIGluZmFtb3VzIGFuZCBvdXRyYWdlb3VzOyBidXQgdGhhdCBwcm92aXNpb24gaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBvdXRyYWdlb3VzIGFuZCB1bmNvbnN0aXR1dGlvbmFsIG9mIGFsbC4gPC90cmFuc2xhdGlvbj4="
translation['24.195'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0LCBpZiBuZWl0aGVyIHRoZSBkZWZlbmRhbnQgbm9yIGFueSBvdGhlciBtYW4gY2FuIG1ha2UgZ29vZCB0aGF0IGNvbnRlbnRpb24sCiAgICAgICAgICAgICAgICAgICAgeW91IG11c3QgY2xlYXJseSByZWNvZ25pemUgdGhhdCB5b3UgYXJlIGJlaW5nIGRlbHVkZWQsIGFuZCB5b3UgbXVzdCBhc2sKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzIGhvdyBpdCBldmVyIG9jY3VycmVkIHRvIGhpcyBtaW5kIHRvIGxlZ2lzbGF0ZSBpbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgZmFzaGlvbi7igJRZb3UgZGlkIG5vdCBicmluZyBpbiB5b3VyIGxhdyBncmF0dWl0b3VzbHksIFRpbW9jcmF0ZXMuIE5vLAogICAgICAgICAgICAgICAgICAgIGluZGVlZCEgZmFyIGZyb20gaXQuIFlvdSBjYW4gb2ZmZXIgbm8gZXhjdXNlIGZvciBkYXJpbmcgdG8gaW50cm9kdWNlIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIG1lYXN1cmUsIGV4Y2VwdCB0aGF0IGN1cnNlZCBncmVlZGluZXNzIG9mIHlvdXJzLiBOb3Qgb25lIG9mIHRoZXNlIG1lbiBpcyB5b3VyCiAgICAgICAgICAgICAgICAgICAga2luc21hbiwgb3IgYSBtZW1iZXIgb2YgeW91ciBob3VzZWhvbGQsIG9yIGhhcyBhbnkgbmF0dXJhbCBjbGFpbSBvbiB5b3UuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.196'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTYiIHVuaXQ9InNlY3Rpb24iIC8+Tm9yIGNhbiB5b3UgcGxlYWQgdGhhdCB5b3UgdG9vawogICAgICAgICAgICAgICAgICAgIGNvbXBhc3Npb24gb24gaWxsLXVzZWQgbWVuLCBhbmQgdGhlcmVmb3JlIHJlc29sdmVkIHRvIGhlbHAgdGhlbS4gVGhhdCBsb25nIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgZGF0ZSB0aGV5IHNob3VsZCByZXN0b3JlIG1vbmV5IGJlbG9uZ2luZyB0byB0aGUgY2l0aXplbnMsIHJlbHVjdGFudGx5LAogICAgICAgICAgICAgICAgICAgIHVud2lsbGluZ2x5LCBhbmQgYWZ0ZXIgY29udmljdGlvbiBpbiB0aHJlZSBjb3VydHMgb2YganVzdGljZSzigJR5b3UKICAgICAgICAgICAgICAgICAgICBjZXJ0YWlubHkgbmV2ZXIgdGhvdWdodCB0aGF0IGlsbC11c2FnZS4gVGhhdCBtZWFucyBpbGwtY29uZHVjdCwgYW5kIHNob3VsZAogICAgICAgICAgICAgICAgICAgIHJhdGhlciBwcm92b2tlIG91ciBpbmRpZ25hdGlvbiB0aGFuIGluY2xpbmUgdXMgdG8gcGl0eS4gTm9yIGRvIHlvdSB0YWtlIHBpdHkgb24KICAgICAgICAgICAgICAgICAgICB0aGVtIGJlY2F1c2UgYSBodW1hbmUgYW5kIGNvbnNpZGVyYXRlIGRpc3Bvc2l0aW9uIGlzIGEgcGVjdWxpYXIgdHJhaXQgb2YgeW91cgogICAgICAgICAgICAgICAgICAgIGNoYXJhY3Rlci4gPC90cmFuc2xhdGlvbj4="
translation['24.197'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTciIHVuaXQ9InNlY3Rpb24iIC8+Q29tcGFzc2lvbiBmb3IgQW5kcm90aW9uLAogICAgICAgICAgICAgICAgICAgIEdsYXVjZXRlcywgYW5kIE1lbGFub3B1cywgYmVjYXVzZSB0aGV5IGhhdmUgdG8gcmVwYXkgc3RvbGVuIG1vbmV5LCBzaG93cyBhCiAgICAgICAgICAgICAgICAgICAgdGVtcGVyIHF1aXRlIGRpZmZlcmVudCBmcm9tIHlvdXIgcmVmdXNhbCBvZiBjb21wYXNzaW9uIHRvIGV2ZXJ5b25lIG9mIHRoZSBtYW55CiAgICAgICAgICAgICAgICAgICAgcGVyc29ucyBoZXJlIHByZXNlbnQsIGFuZCBvZiBhbGwgdGhlIG90aGVyIGNpdGl6ZW5zLCB3aG9zZSBob3VzZXMgeW91IGludmFkZWQKICAgICAgICAgICAgICAgICAgICB3aXRoIHBvbGljZS1tYWdpc3RyYXRlcywgcmVjZWl2ZXJzLCBhbmQgY2xlcmtzIGF0IHlvdXIgaGVlbHM7IHdpdGggZGVtb2xpc2hpbmcKICAgICAgICAgICAgICAgICAgICB0aGVpciBmcm9udC1kb29ycywgZHJhZ2dpbmcgdGhlaXIgYmVkLWNsb3RoZXMgZnJvbSB1bmRlciB0aGVtLCBhbmQgbGV2eWluZwogICAgICAgICAgICAgICAgICAgIGRpc3RyYWludCBvbiBhIG1hbidzIG1haWRzZXJ2YW50LCBpZiBoZSB3YXMgbGl2aW5nIHdpdGggaGVyOyBhbmQgdGhhdCBpcyBob3cgeW91CiAgICAgICAgICAgICAgICAgICAgYW5kIEFuZHJvdGlvbiB3ZXJlIGVtcGxveWVkIGZvciBhIHdob2xlIHR3ZWx2ZS1tb250aC4gPC90cmFuc2xhdGlvbj4="
translation['24.198'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTgiIHVuaXQ9InNlY3Rpb24iIC8+4oCUWWVzLCBpdCB3YXMgeW91IGNpdGl6ZW5zIHdobyB3ZXJlIHRoZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgaW5mYW1vdXNseSBpbGwtdXNlZDvigJRhbmQgYXMgZm9yIHlvdSwgeW91IHJlcHJvYmF0ZSwgeW91IGhhZCBmYXIgbW9yZQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiB0byBwaXR5IHlvdXIgZmVsbG93LWNpdGl6ZW5zLCB3aG8sIHRoYW5rcyB0byB5b3Ugc3BlZWNoLW1ha2VycywgbmV2ZXIgZ2V0CiAgICAgICAgICAgICAgICAgICAgYSBtb21lbnQncyByZXNwaXRlIGZyb20gdGF4cGF5aW5nLiBFdmVuIHRoYXQgaXMgbm90IGVub3VnaCB0aGV5IGFyZSBjb21wZWxsZWQgdG8KICAgICAgICAgICAgICAgICAgICBwYXkgZG91YmxlLCBjb21wZWxsZWQgYnkgeW91IGFuZCBBbmRyb3Rpb24sIHdobyBuZXZlciBwYWlkIGluY29tZS10YXggaW4geW91cgogICAgICAgICAgICAgICAgICAgIGxpdmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.199'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOTkiIHVuaXQ9InNlY3Rpb24iIC8+4oCUQW5kIHlldCB0aGlzIGZlbGxvdyB3YXMgc28KICAgICAgICAgICAgICAgICAgICBzZWxmLWNvbmZpZGVudCzigJRhcyB0aG91Z2ggaGUgY291bGQgbmV2ZXIgYmUgYnJvdWdodCB0byBqdXN0aWNlIGZvciBoaXMKICAgICAgICAgICAgICAgICAgICBkb2luZ3Ms4oCUdGhhdCwgd2l0aCB0ZW4gY29sbGVhZ3VlcyBpbiBvZmZpY2UsIGhlIGFsb25lIGpvaW5lZCBBbmRyb3Rpb24KICAgICAgICAgICAgICAgICAgICBpbiBtYWtpbmcgaGlzIHJldHVybi4gWWVzIGluZGVlZDsgZ3JhdHVpdG91c2x5IGFuZCBmcm9tIHB1cmVseSB1bnNlbGZpc2gKICAgICAgICAgICAgICAgICAgICBtb3RpdmVzLCBUaW1vY3JhdGVzIHByb3Zva2VzIHlvdXIgaG9zdGlsaXR5LCBpbnRyb2R1Y2luZyBsYXdzIHRoYXQgY29udHJhZGljdAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5IHN0YXR1dGUsIGFuZCB0aGF0IGV2ZW4sIHRvIGNyb3duIGFsbCwgY29udHJhZGljdCBhIHN0YXR1dGUgb2YgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIG1ha2luZyEgQnkgb3VyIExhZHksIEkgdGhpbmsgdGhhdCBldmVuIHlvdSBtdXN0IHJlY29nbml6ZSBoaXMgZ2VuZXJvc2l0eSEKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.200'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgd2lsbCBub3cKICAgICAgICAgICAgICAgICAgICB0ZWxsIHlvdSwgd2l0aG91dCBhbnkgaGVzaXRhdGlvbiwgc29tZXRoaW5nIHRoYXQsIGluIG15IG9waW5pb24sIGRlc2VydmVzIHlvdXIKICAgICAgICAgICAgICAgICAgICBzdGVybmVzdCBpbmRpZ25hdGlvbi4gTWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB3aGlsZSBoZSBpcyBkb2luZyBhbGwgdGhpcyBmb3IgbW9uZXksIHdoaWxlIGhlIGhhcywgdG8gdGVsbCB0aGUgdHJ1dGgsCiAgICAgICAgICAgICAgICAgICAgZGVsaWJlcmF0ZWx5IGFkb3B0ZWQgdGhlIHByb2Zlc3Npb24gb2YgcGFpZCBhZ2VudCwgaGUgZG9lcyBub3Qgc3BlbmQgaGlzCiAgICAgICAgICAgICAgICAgICAgZWFybmluZ3Mgb24gcHVycG9zZXMgdGhhdCBtaWdodCBjbGFpbSB0aGUgaW5kdWxnZW5jZSBvZiBhbnlvbmUgd2hvIGhlYXJkIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbS4gV2hhdCBwdXJwb3NlcyBkbyBJIG1lYW4/IFdlbGwsIGdlbnRsZW1lbiBvZiB0aGUganVyeSwgdGhlIGRlZmVuZGFudCdzCiAgICAgICAgICAgICAgICAgICAgZmF0aGVyIGlzIGluIGRlYnQgdG8gdGhlIFRyZWFzdXJ5LiBJIGRvIG5vdCBtZW50aW9uIHRoYXQgYnkgd2F5IG9mIHJlcHJvYWNoLCBidXQKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlIEkgY2Fubm90IGhlbHAgaXQuIEFuZCB0aGlzIGR1dGlmdWwgc29uIGFsbG93cyBoaW0gdG8gcmVtYWluIGluIGRlYnQhCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.201'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBpcyBhIG1hbiB3aG8gaXMgZ29pbmcgdG8gaW5oZXJpdAogICAgICAgICAgICAgICAgICAgIGRpc2ZyYW5jaGlzZW1lbnQsIGlmIGFueXRoaW5nIGhhcHBlbnMgdG8gaGlzIGZhdGhlciwgYW5kIHlldCBkb2VzIG5vdCB0aGluawogICAgICAgICAgICAgICAgICAgIHByb3BlciB0byBwYXkgdGhlIGRlYnQsIGJ1dCBwcmVmZXJzIHRvIHBvY2tldCB0aGUgcHJvZml0IG9mIGhpcyBtZWFubmVzcyBzbyBsb25nCiAgICAgICAgICAgICAgICAgICAgYXMgaGlzIGZhdGhlciBsaXZlcy4gSXMgc3VjaCBhIG1hbiBsaWtlbHkgdG8ga2VlcCBoaXMgaGFuZHMgb2ZmCiAgICAgICAgICAgICAgICAgICAgYW55dGhpbmc/4oCURm9yIHlvdXIgb3duIGZhdGhlciB5b3UgaGF2ZSBubyBjb21wYXNzaW9uOyB5b3UgZG8gbm90IHRoaW5rCiAgICAgICAgICAgICAgICAgICAgaGltIGlsbC11c2VkIGJlY2F1c2UsIHdoaWxlIHlvdSBhcmUgZ2V0dGluZyB5b3VyIHBpY2tpbmdzIGFuZCBtYWtpbmcgeW91cgogICAgICAgICAgICAgICAgICAgIHByb2ZpdHMgb3V0IG9mIHRoZSB0YXhlcyB5b3UgdXNlZCB0byBjb2xsZWN0LCBvdXQgb2YgdGhlIGRlY3JlZXMgeW91IG1vdmUsIG91dAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBsYXdzIHlvdSBpbnRyb2R1Y2UsIGhlIGlzIGxvc2luZyBoaXMgY2l0aXplbi1yaWdodHMgZm9yIGxhY2sgb2YgYQogICAgICAgICAgICAgICAgICAgIHRyaWZsaW5nIHN1bSBvZiBtb25leS4gQW5kIHlldCB5b3UgY2FsbCB5b3Vyc2VsZiBhIGNvbXBhc3Npb25hdGUgbWFuISA8L3RyYW5zbGF0aW9uPg=="
translation['24.202'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDIiIHVuaXQ9InNlY3Rpb24iIC8+4oCUQWgsIGJ1dCBoZSB3YXMgYSBnb29kIG1hbmFnZXIgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgIHNpc3Rlci4gV2h5LCBpZiBoZSBoYWQgY29tbWl0dGVkIG5vIG90aGVyIGNyaW1lLCBoZSBkZXNlcnZlcyBkZXN0cnVjdGlvbiBvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgYWNjb3VudCBhbG9uZS4gSGUgaGFzIG5vdCBnaXZlbiBoZXIgaW4gbWFycmlhZ2UsIGhlIGhhcyBzb2xkIGhlci4gQW4gZW5lbXkgb2YKICAgICAgICAgICAgICAgICAgICB5b3VycyBmcm9tIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwODg2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA4ODYiPkNvcmN5cmE8L3BsYWNlTmFtZT4sIG9uZSBvZiB0aGUgZmFjdGlvbgogICAgICAgICAgICAgICAgICAgIG5vdyBpbiBwb3dlciB0aGVyZSwgdXNlZCB0byBsb2RnZSBhdCBoaXMgaG91c2Ugd2hlbmV2ZXIgaGUgY2FtZSBoZXJlIG9uIGVtYmFzc3ksCiAgICAgICAgICAgICAgICAgICAgYW5kIHdhbnRlZCB0byBoYXZlIGhpcyBzaXN0ZXIs4oCUSSB3aWxsIG5vdCBzYXkgb24gd2hhdCB0ZXJtcy4gSGUgdG9vawogICAgICAgICAgICAgICAgICAgIHRoZSBtYW4ncyBtb25leSwgYW5kIGhlIGhhcyBnaXZlbiBoaW0gdGhlIGdpcmw7IGFuZCBzaGUgaXMgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA4ODYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDg4NiI+Q29yY3lyYTwvcGxhY2VOYW1lPiB0byB0aGlzIGRheS4gPC90cmFuc2xhdGlvbj4="
translation['24.203'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDMiIHVuaXQ9InNlY3Rpb24iIC8+QSBtYW4gd2hvIHByZXRlbmRzIHRvIGhhdmUgZ2l2ZW4gaGlzIHNpc3RlciBpbiBtYXJyaWFnZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgaGFzIHJlYWxseSBzb2xkIGhlciBmb3IgZXhwb3J0OyBhIG1hbiB3aG8gc3VwcG9ydHMgaGlzIGZhdGhlcidzIG9sZCBhZ2UgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgbWFubmVyIHlvdSBrbm93OyBhIHRvYWQtZWF0ZXIgd2hvIGRyYWZ0cyBkZWNyZWVzIGFuZCBkb2VzIHBvbGl0aWNhbCBqb2JzIGZvcgogICAgICAgICAgICAgICAgICAgIGhpcmUs4oCUbm93IHRoYXQgeW91IGhhdmUgY2F1Z2h0IGhpbSwgd2lsbCB5b3Ugbm90IG1ha2UgYW4gZW5kIG9mIGhpbT8KICAgICAgICAgICAgICAgICAgICBJZiBub3QsIHdlIHNoYWxsIHRoaW5rLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCB0aGF0IHlvdSBsaWtlIGxhd3N1aXRzIGFuZCB2ZXhhdGlvbnMsIGFuZCB0aGF0IHlvdSBkbwogICAgICAgICAgICAgICAgICAgIG5vdCB3YW50IHRvIGJlIHF1aXQgb2Ygc2NvdW5kcmVscy4gPC90cmFuc2xhdGlvbj4="
translation['24.204'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgYW0gc3VyZSB0aGF0IHlvdSB3b3VsZCBhbGwgYWdyZWUsIGlmIGFza2VkLCB0aGF0IGFsbAogICAgICAgICAgICAgICAgICAgIGV2aWwtZG9lcnMgb3VnaHQgdG8gYmUgcHVuaXNoZWQ7IGJ1dCBJIHdpbGwgdHJ5IHRvIHNhdGlzZnkgeW91IHRoYXQgdGhpcwogICAgICAgICAgICAgICAgICAgIG1hbGVmYWN0b3IgaW4gcGFydGljdWxhciBkZXNlcnZlcyBwdW5pc2htZW50IGZvciBpbnRyb2R1Y2luZyBhIGxhdyBkZXRyaW1lbnRhbAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBjb21tb24gcGVvcGxlLiBBIHRoaWVmLCBvciBhIGN1dHB1cnNlLCBvciBhbnkgcm9ndWUgb2YgdGhhdCBzb3J0LCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBwbGFjZSByZWFsbHkgaW5qdXJlcyBvbmx5IHRoZSBtYW4gd2hvIGVuY291bnRlcnMgaGltOyBpdCBpcyBvdXQgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgcG93ZXIgdG8gc3RyaXAgZXZlcnlib2R5LCBvciBzdGVhbCBldmVyeWJvZHkncyBwcm9wZXJ0eTsgYW5kIGluIHRoZSBzZWNvbmQKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgaGUgYnJpbmdzIGRpc2dyYWNlIG9uIG5vIG9uZSdzIHJlcHV0YXRpb24gb3IgbWFubmVyIG9mIGxpZmUgYnV0IGhpcyBvd24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.205'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGlmIGEgbWFuIGludHJvZHVjZXMgYSBsYXcgYnkgd2hpY2gKICAgICAgICAgICAgICAgICAgICB1bmxpbWl0ZWQgbGljZW5zZSBhbmQgaW1tdW5pdHkgaXMgZ3JhbnRlZCB0byB0aG9zZSB3aG8gc2VlayB0byBkZWZyYXVkIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZmVsbG93LWNpdGl6ZW5zLCBoZSBpcyBndWlsdHkgaW4gcmVzcGVjdCBvZiB0aGUgd2hvbGUgY2l0eSwgYW5kIGhlIGJyaW5ncwogICAgICAgICAgICAgICAgICAgIGRpc2dyYWNlIHVwb24gZXZlcnlib2R5OyBmb3IgYW4gaW5mYW1vdXMgc3RhdHV0ZSwgd2hlbiByYXRpZmllZCwgaXMgYSBkaXNjcmVkaXQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgZ292ZXJubWVudCB0aGF0IGVuYWN0ZWQgaXQgYW5kIGFuIGluanVyeSB0byBldmVyeW9uZSB3aG8gbGl2ZXMgdW5kZXIgaXQuCiAgICAgICAgICAgICAgICAgICAgV2lsbCB5b3Ugbm90LCB0aGVuLCBwdW5pc2gsIHdoZW4geW91IGhhdmUgY2F1Z2h0IGhpbSwgYSBtYW4gd2hvIGlzIGRvaW5nIGhpcwogICAgICAgICAgICAgICAgICAgIHV0bW9zdCB0byBpbmp1cmUgeW91LCBhbmQgdG8gcG9sbHV0ZSB5b3Ugd2l0aCBpbmZhbXk/IElmIG5vdCwgd2hhdCBleGN1c2Ugd2lsbAogICAgICAgICAgICAgICAgICAgIHlvdSBoYXZlPyA8L3RyYW5zbGF0aW9uPg=="
translation['24.206'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGJlc3Qgd2F5IHRvIGFzY2VydGFpbiB3aXRoIHdoYXQKICAgICAgICAgICAgICAgICAgICBmYXItcmVhY2hpbmcgZGVzaWducyBoZSBoYXMgZnJhbWVkIGhpcyBsYXcsIGFuZCBob3cgaW5pbWljYWwgdGhvc2UgZGVzaWducyBhcmUKICAgICAgICAgICAgICAgICAgICB0byB0aGUgZXN0YWJsaXNoZWQgY29uc3RpdHV0aW9uLCBpcyB0byByZWZsZWN0IHRoYXQgdGhpcyBpcyBqdXN0IHRoZSB3YXkgdGhhdAogICAgICAgICAgICAgICAgICAgIGFsbCBjb25zcGlyYXRvcnMgYmVnaW4sIHdoZW4gdGhleSBhcmUgdHJ5aW5nIHRvIG92ZXJ0aHJvdyBkZW1vY3JhY3kgYnkKICAgICAgICAgICAgICAgICAgICBpbm5vdmF0aW9ucyzigJR0aGV5IGZpcnN0IG9mIGFsbCByZWxlYXNlIGFsbCB3aG8gd2VyZSBmb3JtZXJseSBieSBsYXcKICAgICAgICAgICAgICAgICAgICBzdWZmZXJpbmcgdGhpcyBwZW5hbHR5IGZvciBzb21lIG9mZmVuY2UuIDwvdHJhbnNsYXRpb24+"
translation['24.207'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDciIHVuaXQ9InNlY3Rpb24iIC8+RG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCB0aGlzIG1hbiwgdGhlbiwgZGVzZXJ2ZSwgaWYgcG9zc2libGUsIG5vdCBvbmUgYnV0IHRocmVlIHNlbnRlbmNlcyBvZiBkZWF0aCwKICAgICAgICAgICAgICAgICAgICBiZWNhdXNlLCBzdGFuZGluZyBieSBoaW1zZWxmLCBhbmQgb2YgY291cnNlIHdpdGggbm8gZXhwZWN0YXRpb24gb2YgY3J1c2hpbmcgeW91LAogICAgICAgICAgICAgICAgICAgIGJ1dCByYXRoZXIgb2YgbWVldGluZyBoaXMgb3duIGRvb20gaW4gdGhpcyBjb3VydCwgaWYgeW91IGRvIGp1c3RpY2UgYXMgeW91CiAgICAgICAgICAgICAgICAgICAgb3VnaHQsIGhlIG5ldmVydGhlbGVzcyBpbWl0YXRlZCB0aGF0IGNyaW1lLCBhbmQgYXR0ZW1wdGVkIHRvIHJlbGVhc2UgbWVuIHdob20KICAgICAgICAgICAgICAgICAgICB0aGUgdHJpYnVuYWxzIGhhdmUgaW1wcmlzb25lZCwgYnkgaGlzIGltcHVkZW50IGVuYWN0bWVudCB0aGF0IGlmIHRoZSBwZW5hbHR5IG9mCiAgICAgICAgICAgICAgICAgICAgaW1wcmlzb25tZW50IGhhcyBhbHJlYWR5IGJlZW4gaW5mbGljdGVkLCBvciBpZiB5b3UgaGVyZWFmdGVyIGluZmxpY3QgaXQsIHVwb24KICAgICAgICAgICAgICAgICAgICBhbnkgbWFuLCB0aGF0IG1hbiBzaGFsbCBiZSBkaXNjaGFyZ2VkIGZyb20gcHJpc29uPyA8L3RyYW5zbGF0aW9uPg=="
translation['24.208'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDgiIHVuaXQ9InNlY3Rpb24iIC8+U3VwcG9zZSB0aGF0IGluIGEgbW9tZW50J3MgdGltZSB5b3Ugd2VyZSB0byBoZWFyIGFuIG91dGNyeQogICAgICAgICAgICAgICAgICAgIGhhcmQgYnkgdGhpcyBjb3VydCwgYW5kIHN1cHBvc2UgdGhhdCB5b3Ugd2VyZSB0b2xkIHRoYXQgdGhlIGphaWwgaGFkIGJlZW4gdGhyb3duCiAgICAgICAgICAgICAgICAgICAgb3BlbiBhbmQgdGhhdCB0aGUgcHJpc29uZXJzIHdlcmUgZXNjYXBpbmcsIHRoZXJlIGlzIG5vdCBhIG1hbiwgaG93ZXZlciBvbGQgb3IKICAgICAgICAgICAgICAgICAgICBob3dldmVyIGFwYXRoZXRpYywgd2hvIHdvdWxkIG5vdCByYWxseSB0byB0aGUgcmVzY3VlIHRvIHRoZSB1dG1vc3Qgb2YgaGlzIHBvd2VyLgogICAgICAgICAgICAgICAgICAgIEFuZCBpZiBzb21lb25lIGNhbWUgZm9yd2FyZCBhbmQgaW5mb3JtZWQgeW91IHRoYXQgdGhlIG1hbiB3aG8gaGFkIGxldCB0aGVtIG91dAogICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgZGVmZW5kYW50LCBoZSB3b3VsZCBiZSBpbmNvbnRpbmVudGx5IGFycmVzdGVkIGFuZCBleGVjdXRlZCB3aXRob3V0IGEKICAgICAgICAgICAgICAgICAgICBoZWFyaW5nLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.209'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMDkiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgeW91IGhvbGQgaW4geW91ciBwb3dlciB0b2RheSB0aGlzCiAgICAgICAgICAgICAgICAgICAgbWFuLCB3aG8gaGFzIG5vdCBkb25lIHRoYXQgZGVlZCBpbiBzZWNyZXQsIGJ1dCBhZnRlciBiZWd1aWxpbmcgYW5kIGRlY2VpdmluZyB5b3UKICAgICAgICAgICAgICAgICAgICBoYXMgb3Blbmx5IGVuYWN0ZWQgYSBsYXcgdGhhdCBkb2VzIG5vdCBtZXJlbHkgdGhyb3cgb3BlbiBidXQgZGVtb2xpc2hlcyB0aGUKICAgICAgICAgICAgICAgICAgICBwcmlzb24sIGFuZCB0aGF0IGluY2x1ZGVzIGluIHRoYXQgZGVzdHJ1Y3Rpb24gdGhlIGNvdXJ0cyBvZiBqdXN0aWNlIGFzIHdlbGwuIEZvcgogICAgICAgICAgICAgICAgICAgIG9mIHdoYXQgdXNlIGFyZSBlaXRoZXIgY291cnRzIG9yIHByaXNvbnMsIGlmIHBlcnNvbnMgc2VudGVuY2VkIHRvIGltcHJpc29ubWVudAogICAgICAgICAgICAgICAgICAgIGFyZSBzZXQgZnJlZSwgYW5kIGlmIHlvdSBhcmUgdG8gZ2V0IG5vIGJlbmVmaXQgZnJvbSBhbnkgc3VjaCBzZW50ZW5jZQogICAgICAgICAgICAgICAgICAgIGhlbmNlZm9yd2FyZD8gPC90cmFuc2xhdGlvbj4="
translation['24.210'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTAiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBvdWdodCBhbHNvIHRvIGNvbnNpZGVyIHRoaXMgcG9pbnQsIHRoYXQgbWFueSBIZWxsZW5pYyBuYXRpb25zIGhhdmUgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICByZXNvbHZlZCBieSB2b3RlIHRvIGFkb3B0IHlvdXIgbGF3czsgYW5kIGluIHRoaXMgeW91IHRha2UgYW4gaG9ub3JhYmxlIHByaWRlLAogICAgICAgICAgICAgICAgICAgIG5hdHVyYWxseTsgZm9yIHRoZXJlIHNlZW1zIHRvIG1lIHRvIGJlIHRydXRoIGluIGFuIG9ic2VydmF0aW9uIG9uY2UgbWFkZSwgYXMgd2UKICAgICAgICAgICAgICAgICAgICBhcmUgdG9sZCwgaW4gdGhpcyBjb3VydCwgdGhhdCBhbGwgd2lzZSBtZW4gcmVnYXJkIGxhd3MgYXMgdGhlIGNoYXJhY3RlciBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBTdGF0ZS4gVGhlcmVmb3JlIHdlIHNob3VsZCB0YWtlIHBhaW5zIHRoYXQgdGhleSBiZSBhY2NvdW50ZWQgYXMgZ29vZCBhcwogICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlLCBhbmQgd2Ugc2hvdWxkIHB1bmlzaCB0aG9zZSB3aG8gZGViYXNlIGFuZCBwZXJ2ZXJ0IHRoZW07IGZvciwgaWYgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSBpbXBhaXJlZCBieSB5b3VyIG5lZ2xlY3QsIHlvdSB3aWxsIGxvc2UgdGhhdCBoaWdoIGRpc3RpbmN0aW9uLCBhbmQgd2lsbAogICAgICAgICAgICAgICAgICAgIGNyZWF0ZSBhbiB1bmZhdm9yYWJsZSByZXB1dGF0aW9uIGZvciB5b3VyIGNpdHkuIDwvdHJhbnNsYXRpb24+"
translation['24.211'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTEiIHVuaXQ9InNlY3Rpb24iIC8+SWYgeW91IGFyZSBqdXN0aWZpZWQgaW4gcHJhaXNpbmcgU29sb24gYW5kIERyYWNvLCBhbHRob3VnaAogICAgICAgICAgICAgICAgICAgIHlvdSBjYW4gY3JlZGl0IG5laXRoZXIgb2YgdGhlbSB3aXRoIGFueSBwdWJsaWMgc2VydmljZSBleGNlcHQgdGhhdCB0aGV5IGVuYWN0ZWQKICAgICAgICAgICAgICAgICAgICBiZW5lZmljaWFsIGFuZCB3ZWxsLWNvbmNlaXZlZCBzdGF0dXRlcywgaXQgaXMgc3VyZWx5IHJpZ2h0IHRoYXQgeW91IHNob3VsZCB2aXNpdAogICAgICAgICAgICAgICAgICAgIG1lbiB3aG9zZSBlbmFjdG1lbnRzIGFyZSBjb250cmFyeSB0byB0aGUgc3Bpcml0IG9mIHRob3NlIGxhd2dpdmVycyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaW5kaWduYXRpb24gYW5kIGNoYXN0aXNlbWVudC4gQnV0IGFzIHRvIFRpbW9jcmF0ZXMgSSBrbm93IHRoYXQgaGUgYnJvdWdodCBpbgogICAgICAgICAgICAgICAgICAgIHRoaXMgbGF3IGNoaWVmbHkgZm9yIGhpcyBwcml2YXRlIGFkdmFudGFnZSwgYmVjYXVzZSBoZSBmZWx0IHRoYXQgbWFueSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBwb2xpdGljYWwgYWN0cyBpbiB5b3VyIGNpdHkgZGVzZXJ2ZSBpbXByaXNvbm1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['24.212'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgd291bGQgYWxzbyBsaWtlIHRvIHJlcGVhdAogICAgICAgICAgICAgICAgICAgIHRvIHlvdSBhIHNheWluZyBhdHRyaWJ1dGVkIHRvIFNvbG9uLCB3aGVuIGhlIHdhcyBwcm9zZWN1dGluZyBhIG1hbiB3aG8gaGFkCiAgICAgICAgICAgICAgICAgICAgY2FycmllZCBhbiB1bmRlc2lyYWJsZSBsYXcuIFdlIGFyZSB0b2xkIHRoYXQsIGFmdGVyIHN0YXRpbmcgaGlzIG90aGVyIGNoYXJnZXMsCiAgICAgICAgICAgICAgICAgICAgaGUgb2JzZXJ2ZWQgdGhhdCBpbiBhbGwsIG9yIG5lYXJseSBhbGwsIHN0YXRlcyB0aGVyZSBpcyBhIGxhdyB0aGF0IHRoZSBwZW5hbHR5CiAgICAgICAgICAgICAgICAgICAgZm9yIGFueSBtYW4gd2hvIGRlYmFzZXMgdGhlIGN1cnJlbmN5IGlzIGRlYXRoLiBIZSBwcm9jZWVkZWQgdG8gYXNrIHRoZSBqdXJ5CiAgICAgICAgICAgICAgICAgICAgd2hldGhlciB0aGV5IHRob3VnaHQgdGhhdCBhIGp1c3QgYW5kIGdvb2QgbGF3OyA8L3RyYW5zbGF0aW9uPg=="
translation['24.213'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHdoZW4gdGhlIGp1cnkgcmVwbGllZCB0aGF0IHRoZXkgZGlkLCBoZSBzYWlkIHRoYXQgaW4gaGlzIG9waW5pb24gbW9uZXkgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBpbnZlbnRlZCBieSBwcml2YXRlIHBlcnNvbnMgZm9yIHByaXZhdGUgdHJhbnNhY3Rpb25zLCBidXQgbGF3cyB3ZXJlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW5jeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgcGxheSB1cG9uIHdvcmRzIGJldHdlZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs694b25zrzOv8+CPC9mb3JlaWduPiDigJxsYXfigJ0gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7OveG9uc68zrnPg868zrE8L2ZvcmVpZ24+IOKAnGNvaW7igJ0gaXMKICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZSB0byByZW5kZXIgaW4gRW5nbGlzaC48L25vdGU+IG9mIHRoZSBTdGF0ZTsgYW5kIHRoZXJlZm9yZSBpZiBhIG1hbgogICAgICAgICAgICAgICAgICAgIGRlYmFzZWQgdGhhdCBjdXJyZW5jeSwgYW5kIGludHJvZHVjZWQgY291bnRlcmZlaXQsIHRoZSBqdXJ5IGhhZCBncmF2ZXIgcmVhc29uIHRvCiAgICAgICAgICAgICAgICAgICAgYWJob3IgYW5kIHB1bmlzaCB0aGF0IG1hbiB0aGFuIG9uZSB3aG8gZGViYXNlZCB0aGUgY3VycmVuY3kgb2YgcHJpdmF0ZSBjaXRpemVucy4KICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zr3hvbnOvM6/z4I8L2ZvcmVpZ24+IOKAnGxhd+KAnSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs694b25zrzOuc+DzrzOsTwvZm9yZWlnbj4g4oCcY29pbuKAnSBpcwogICAgICAgICAgICAgICAgICAgICAgICBpbXBvc3NpYmxlIHRvIHJlbmRlciBpbiBFbmdsaXNoLjwvdHJhbnNsYXRpb24+"
translation['24.214'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTQiIHVuaXQ9InNlY3Rpb24iIC8+Qnkgd2F5IG9mIHByb29mIHRoYXQgaXQgaXMgYSBtb3JlIGhlaW5vdXMKICAgICAgICAgICAgICAgICAgICBjcmltZSB0byBkZWJhc2UgbGF3cyB0aGFuIHNpbHZlciBjb2luYWdlLCBoZSBhZGRlZCB0aGF0IG1hbnkgc3RhdGVzIHRoYXQgdXNlCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCBjb25jZWFsbWVudCBzaWx2ZXIgYWxsb3llZCB3aXRoIGNvcHBlciBhbmQgbGVhZCBhcmUgc2FmZSBhbmQgc291bmQgYW5kCiAgICAgICAgICAgICAgICAgICAgc3VmZmVyIG5vIGhhcm0gdGhlcmVieTsgYnV0IHRoYXQgbm8gbmF0aW9uIHRoYXQgdXNlcyBiYWQgbGF3cyBvciBwZXJtaXRzIHRoZQogICAgICAgICAgICAgICAgICAgIGRlYmFzZW1lbnQgb2YgZXhpc3RpbmcgbGF3cyBoYXMgZXZlciBlc2NhcGVkIHRoZSBjb25zZXF1ZW5jZS4gTm93IHRoYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgYWNjdXNhdGlvbiB0byB3aGljaCBUaW1vY3JhdGVzIHN0YW5kcyBvcGVuIHRvZGF5LCBhbmQgaGUgbWF5IGp1c3RseSByZWNlaXZlIGZyb20KICAgICAgICAgICAgICAgICAgICB5b3UgdGhlIHB1bmlzaG1lbnQgdGhhdCBpcyBhZGVxdWF0ZSB0byBoaXMgZ3VpbHQuIDwvdHJhbnNsYXRpb24+"
translation['24.215'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoaWxlLCB0aGVyZWZvcmUsIHlvdSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZSBpbmRpZ25hbnQgd2l0aCBldmVyeSBtYW4gd2hvIGJyaW5ncyBpbiBzaGFtZWZ1bCBhbmQgd2lja2VkIGxhd3MsIHlvdXIKICAgICAgICAgICAgICAgICAgICBpbmRpZ25hdGlvbiBvdWdodCBjaGllZmx5IHRvIGJlIGRpcmVjdGVkIGFnYWluc3QgdGhvc2Ugd2hvIHZpdGlhdGUgdGhlIGxhd3MgdXBvbgogICAgICAgICAgICAgICAgICAgIHdoaWNoIGRlcGVuZHMgdGhlIGdyZWF0bmVzcywgb3IgdGhlIHdlYWtuZXNzLCBvZiB0aGUgY29tbW9ud2VhbHRoLiBBbmQgd2hhdCBhcmUKICAgICAgICAgICAgICAgICAgICB0aGV5PyBUaGUgbGF3cyB0aGF0IGF2ZW5nZSB5b3UgdXBvbiBldmlsLWRvZXJzLCBhbmQgYWxsIHRoZSBsYXdzIHRoYXQgY29uZmVyCiAgICAgICAgICAgICAgICAgICAgY2VydGFpbiBob25vcnMgb24gdGhlIHdlbGwtY29uZHVjdGVkLiA8L3RyYW5zbGF0aW9uPg=="
translation['24.216'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTYiIHVuaXQ9InNlY3Rpb24iIC8+SWYgYWxsCiAgICAgICAgICAgICAgICAgICAgbWVuIGFsaWtlIHdlcmUgemVhbG91cyB0byBzZXJ2ZSB0aGUgY29tbXVuaXR5LCBiZWNhdXNlIHRoZXkgaGFkIGJlY29tZSBhbWJpdGlvdXMKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgaG9ub3JzIGFuZCByZXdhcmRzIG9mIHN1Y2ggc2VydmljZSwgYW5kIGlmIGFsbCB3ZXJlIHRvIHJlY29pbCBmcm9tCiAgICAgICAgICAgICAgICAgICAgbm94aW91cyBhY3RzLCB0aHJvdWdoIGZlYXIgb2YgdGhlIHBhaW5zIGFuZCBwZW5hbHRpZXMgZW5hY3RlZCBmb3IgbWFsZWZhY3RvcnMsCiAgICAgICAgICAgICAgICAgICAgY291bGQgYW55dGhpbmcgcHJldmVudCBvdXIgY29tbW9ud2VhbHRoIGZyb20gYmVjb21pbmcgdmVyeSBncmVhdD8gRG9lcyBub3QKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHBvc3Nlc3MgbW9yZSB3YXIgZ2FsbGV5cwogICAgICAgICAgICAgICAgICAgIHRoYW4gYW55IG90aGVyIEhlbGxlbmljIGNpdHk/IElzIHNoZSBub3QgcmljaCBpbiBpbmZhbnRyeSBhbmQgY2F2YWxyeSwgaW4KICAgICAgICAgICAgICAgICAgICByZXZlbnVlLCBpbiBtaWxpdGFyeSBwb3NpdGlvbnMsIGluIGhhcmJvcnM/IEFuZCBob3cgYXJlIHRob3NlIHBvc3Nlc3Npb25zCiAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVkIGFuZCBjb25zb2xpZGF0ZWQ/IEJ5IHRoZSBsYXdzOyBmb3IgdGhleSBhcmUgcHJvZml0YWJsZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjb21tdW5pdHkgb25seSBzbyBsb25nIGFzIG91ciBwdWJsaWMgY29uZHVjdCBjb25mb3JtcyB0byB0aGUgbGF3cy4gPC90cmFuc2xhdGlvbj4="
translation['24.217'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMTciIHVuaXQ9InNlY3Rpb24iIC8+SWYgY29uZGl0aW9ucyB3ZXJlIHJldmVyc2VkLCBpZiB0aGVyZSB3ZXJlIG5vCiAgICAgICAgICAgICAgICAgICAgcmVjb21wZW5zZSBmb3IgdGhlIHZpcnR1b3VzLCBpZiBldmlsLWRvZXJzIHdlcmUgdG8gZW5qb3kgYWxsIHRoZSBpbW11bml0eSB0aGF0CiAgICAgICAgICAgICAgICAgICAgVGltb2NyYXRlcyBoYXMgc291Z2h0IHRvIGVuYWN0LCB3aGF0IHV0dGVyIGNvbmZ1c2lvbiB3b3VsZCBiZSB0aGUgbmF0dXJhbAogICAgICAgICAgICAgICAgICAgIHJlc3VsdCEgRm9yIHlvdSBtYXkgYmUgcXVpdGUgc3VyZSB0aGF0IGZyb20gdGhlc2UgcG9zc2Vzc2lvbnMgdGhhdCBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBlbnVtZXJhdGVkLCBldmVuIGlmIHRoZXkgd2VyZSB0d2ljZSBhcyBncmVhdCBhcyB0aGV5IG5vdyBhcmUsIHlvdSB3b3VsZCBub3QgdGhlbgogICAgICAgICAgICAgICAgICAgIGdldCBhbiBhdG9tIG9mIGFkdmFudGFnZS4gVGhlcmVmb3JlIHRoZSBkZWZlbmRhbnQgaXMgcHJvdmVkIHRvIGJlIHN0cml2aW5nIHRvIGRvCiAgICAgICAgICAgICAgICAgICAgeW91IHdyb25nIGluIHJlc3BlY3Qgb2YgdGhhdCBsYXcgYnkgd2hpY2ggcHVuaXNobWVudHMgYXJlIHByb3ZpZGVkIGZvciB3b3VsZC1iZQogICAgICAgICAgICAgICAgICAgIGNyaW1pbmFscy4gPC90cmFuc2xhdGlvbj4="
translation['24.218'] = ""
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5HZW50bGVtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgYXMgSSBzYXQgaGVyZSBmb3IgYSBsb25nIHRpbWUgYW5kIGxpc3RlbmVkIHdpdGggeW91IHRvIHRoZSBzcGVlY2ggb2YKICAgICAgICAgICAgICAgICAgICBMeWN1cmd1cyBmb3IgdGhlIHByb3NlY3V0aW9uLCBJIHRob3VnaHQgaXQgaW4gZ2VuZXJhbCBhbiBleGNlbGxlbnQgc3BlZWNoOyBidXQKICAgICAgICAgICAgICAgICAgICB3aGVuIEkgb2JzZXJ2ZWQgaGltIHVuZHVseSBleGVydGluZyBoaW1zZWxmLCBJIHdhcyBzdXJwcmlzZWQgdGhhdCBoZSBzaG91bGQgbm90CiAgICAgICAgICAgICAgICAgICAgcmVhbGl6ZSB0aGF0IHRoZSBzdHJlbmd0aCBvZiBvdXIgY2FzZSBkb2VzIG5vdCByZWFsbHkgZGVwZW5kIG9uIHRoZSBhcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhcyB1c2VkIG9yIHRoYXQgSSBhbSBnb2luZyB0byB1c2UsIGJ1dCBvbiB0aGUgZGlzcG9zaXRpb24gb2YgZWFjaAogICAgICAgICAgICAgICAgICAgIGp1cnltYW4gZWl0aGVyIHRvIGJlIGluZGlnbmFudCBhdCB3aWNrZWRuZXNzIG9yIHRvIGNvbmRvbmUgaXQuIDwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBteXNlbGYsIEkgYWRtaXQgaXQgd2FzIG91ciBkdXR5IHRvIHVuZGVydGFrZSB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9zZWN1dGlvbiBhbmQgdG8gZGVsaXZlciBmdWxsIHNwZWVjaGVzIGluIGFjY29yZGFuY2Ugd2l0aCBjdXN0b20gYW5kIGZvciB5b3VyCiAgICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb247IGJ1dCBJIGZlZWwgdGhhdCB0aGUgY2FzZSBoYXMgYmVlbiBhbHJlYWR5IGRlY2lkZWQgYnkgZWFjaCBvbmUgb2YKICAgICAgICAgICAgICAgICAgICB5b3UgaW4gaGlzIGlubW9zdCBjb25zY2llbmNlLCBhbmQgdGhhdCBub3csIGlmIHRoZSBtYWpvcml0eSBvZiB5b3UgYXJlIG1lbgogICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VkIHRvIGFkbWlyZSBhbmQgcHJvdGVjdCByYXNjYWxzLCBhbGwgb3VyIGRlY2xhbWF0aW9uIHdpbGwgYmUgd2FzdGVkLCBidXQKICAgICAgICAgICAgICAgICAgICBpZiB5b3UgYXJlIGRpc3Bvc2VkIHRvIGhhdGUgdGhlbSwgdGhlbiB0aGlzIG1hbiwgcGxlYXNlIEdvZCEgc2hhbGwgcGF5IHRoZQogICAgICAgICAgICAgICAgICAgIHBlbmFsdHkuIDwvdHJhbnNsYXRpb24+"
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaG91Z2gKICAgICAgICAgICAgICAgICAgICBtdWNoIGhhcyBiZWVuIHNhaWQsIGFuZCBhbGwgb2YgaXQgd2VsbCBzYWlkLCBJIHNoYWxsIG5vdCBzY3J1cGxlIHRvIHB1dCBteSBvd24KICAgICAgICAgICAgICAgICAgICB2aWV3cyBiZWZvcmUgeW91LCBiZWNhdXNlIHRoZSBwcmVzZW50IHN1aXQgc2VlbXMgdG8gbWUgcXVpdGUgZGlmZmVyZW50IGZyb20gYWxsCiAgICAgICAgICAgICAgICAgICAgb3RoZXJzLiBKdXN0IGNvbnNpZGVyLiBUbyBhbGwgb3VyIGNvdXJ0cyB0aGUganVyaWVzIGNvbWUgdG8gbGVhcm4gZnJvbSBwbGFpbnRpZmYKICAgICAgICAgICAgICAgICAgICBhbmQgZGVmZW5kYW50IHRoZSBmYWN0cyB1cG9uIHdoaWNoIHRoZXkgYXJlIHRvIGdpdmUgdGhlaXIgdm90ZXMsIGFuZCBlYWNoCiAgICAgICAgICAgICAgICAgICAgbGl0aWdhbnQgY29tZXMgdG8gcHJvdmUgdGhhdCB0aGUgbGVnYWwgcmlnaHQgaXMgc3Ryb25nIG9uIGhpcyBzaWRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBob3cgc3RhbmRzIGl0IHdpdGggdGhlIHByZXNlbnQgdHJpYWw/IFlvdSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgdG8gZ2l2ZSB0aGUgdmVyZGljdCBoYXZlIGNvbWUgaGVyZSBrbm93aW5nIGJldHRlciB0aGFuIHdlLCB0aGUgYWNjdXNlcnMsIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGlzIG1hbiwgc2luY2UgaGUgaXMgYSBzdGF0ZS1kZWJ0b3IgYW5kIHJlZ2lzdGVyZWQgYXMgc3VjaCBpbiB0aGUgQWNyb3BvbGlzLAogICAgICAgICAgICAgICAgICAgIGhhcyBubyByaWdodCB0byBzcGVhayBhdCBhbGw7IHNvIHRoYXQgZWFjaCBvZiB5b3UgaXMgaW4gdGhlIHBvc2l0aW9uIG9mIGFuCiAgICAgICAgICAgICAgICAgICAgYWNjdXNlciwga25vd2luZyB0aGUgZmFjdHMgYW5kIG5vdCBuZWVkaW5nIHRvIGJlIHRvbGQgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZGVmZW5kYW50IGlzIGhlcmUgd2l0aCBub3RoaW5nIHdoYXRldmVyIHRvIHN1cHBvcnQKICAgICAgICAgICAgICAgICAgICBoaXMgYWNxdWl0dGFsLCB3aXRoIG5vIHNvdW5kIHBsZWEgYmFzZWQgb24gdGhlIGZhY3RzLCB3aXRoIG5vIHBhc3QgcmVjb3JkIG9mIGEKICAgICAgICAgICAgICAgICAgICBkZWNlbnQgbGlmZSwgd2l0aCBub3QgYSBzaW5nbGUgcG9pbnQgaW4gaGlzIGZhdm91ci4gSGUgaW1hZ2luZXMgdGhhdCBoZSBtYXkgYmUKICAgICAgICAgICAgICAgICAgICBzYXZlZCBieSB3aGF0IHdvdWxkIGhhdmUgZnJpZ2h0ZW5lZCBhbnlvbmUgZWxzZSwgdGhvdWdoIGlubm9jZW50OyBmb3IgaGUgYmFzZXMKICAgICAgICAgICAgICAgICAgICB0aGUgaG9wZSBvZiBoaXMgYWNxdWl0dGFsIG9uIHRoZSBlbm9ybWl0eSBvZiBoaXMgd2lja2VkbmVzcy4gPC90cmFuc2xhdGlvbj4="
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIGJlaW5nIHNvLCBpdCBzZWVtcyB0byBtZQogICAgICAgICAgICAgICAgICAgIHRoYXQgb25lIHdvdWxkIG5vdCBiZSB3cm9uZyBpbiBzYXlpbmcgdGhhdCwgd2hpbGUgQXJpc3RvZ2VpdG9uIGlzIG9uIGhpcyB0cmlhbCwKICAgICAgICAgICAgICAgICAgICBpdCBpcyB5b3VyIGNoYXJhY3RlciB0aGF0IGlzIGJlaW5nIHRlc3RlZCwgeW91ciByZXB1dGF0aW9uIHRoYXQgaXMgYXQgc3Rha2UuIEZvcgogICAgICAgICAgICAgICAgICAgIGlmIHlvdSBtYWtlIGl0IHF1aXRlIGNsZWFyIHRoYXQgeW91IGFyZSBhbmdyeSBhdCBzdWNoIHBhdGVudCBhbmQgZ3Jvc3Mgb2ZmZW5jZXMKICAgICAgICAgICAgICAgICAgICBhbmQgYXJlIGRldGVybWluZWQgdG8gcHVuaXNoIHRoZW0sIHRoZW4gaXQgd2lsbCBiZSBzZWVuIHRoYXQgeW91IGhhdmUgY29tZSBoZXJlCiAgICAgICAgICAgICAgICAgICAgdG8gcGxheSB5b3VyIHRydWUgcGFydCBhcyBqdWRnZXMgYW5kIGd1YXJkaWFucyBvZiB0aGUgbGF3LiA8L3RyYW5zbGF0aW9uPg=="
translation['25.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiBzb21lIG90aGVyIG1vdGl2ZSBwcmV2YWlscywgc29tZSBtb3RpdmUgd2hpY2ggbm9uZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGNhcmUgdG8gY29uZmVzcywgYnV0IHdoaWNoIHlvdXIgdm90ZXMgd2lsbCBiZXRyYXksIHRoZW4gSSBhbSBhZnJhaWQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRvIHNvbWUgeW91IHdpbGwgYXBwZWFyIHRvIGJlIHBsYXlpbmcgdGhlIHBhcnQgb2YgdHJhaW5lcnMgb2YgYW55IGNpdGl6ZW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaGFzIGEgdGFzdGUgZm9yIHdpY2tlZG5lc3MuIEZvciBldmVyeSBiYWQgbWFuIGlzIGluIGhpbXNlbGYgd2VhazsgaGUgb25seQogICAgICAgICAgICAgICAgICAgIGJlY29tZXMgc3Ryb25nIGJ5IHlvdXIgY291bnRlbmFuY2UgYW5kIHN1cHBvcnQuIFdob2V2ZXIgd2lucyB0aGF0IHN1cHBvcnQgZmluZHMKICAgICAgICAgICAgICAgICAgICBpbiBpdCBoaXMgYWR2YW50YWdlIGFuZCBoaXMgc3RyZW5ndGg7IHRvIHlvdSB3aG8gZ2l2ZSB0aGF0IHN1cHBvcnQsIGl0IGlzIGEKICAgICAgICAgICAgICAgICAgICBzb3VyY2Ugb2Ygc2hhbWUuIDwvdHJhbnNsYXRpb24+"
translation['25.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgYmVmb3JlIEkgc3BlYWsgb2YgdGhlIHByaXZhdGUgYWZmYWlycyBvZiB0aGUgZGVmZW5kYW50LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBJIHNob3VsZCBsaWtlIHlvdSBzZXJpb3VzbHkgYnV0CiAgICAgICAgICAgICAgICAgICAgYnJpZWZseSB0byBjYWxjdWxhdGUgaG93IG11Y2ggc2hhbWUgYW5kIGRpc2NyZWRpdCBpcyBicm91Z2h0IHVwb24gb3VyIGNpdHkgYnkKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtb25zdGVycywgb2Ygd2hvbSB0aGUgZGVmZW5kYW50IGlzIGF0IG9uY2UgdGhlIG1pZG1vc3QsIHRoZSBmaXJzdCwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGxhc3QuIDwvdHJhbnNsYXRpb24+"
translation['25.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRvIG1lbnRpb24gb25seSBvbmUgbWF0dGVyOyB0aGV5IG1vdW50CiAgICAgICAgICAgICAgICAgICAgdGhlIHBsYXRmb3JtIGluIHRoZSBBc3NlbWJseSwgd2hlcmUgeW91IGxvb2sgdG8geW91ciBvcmF0b3JzIHRvIGV4cGxhaW4gdGhlaXIKICAgICAgICAgICAgICAgICAgICBwb2xpY3ksIG5vdCB0byBmbGF1bnQgdGhlaXIgd2lja2VkbmVzczsgdGhleSBjb21lIGVxdWlwcGVkIHdpdGggYSBoYXJkZW5lZAogICAgICAgICAgICAgICAgICAgIGZyb250LCBhIHJhdWNvdXMgdm9pY2UsIGZhbHNlIGNoYXJnZXMsIGludGltaWRhdGlvbiwgc2hhbWVsZXNzbmVzcywgYW5kIGFsbCBzdWNoCiAgICAgICAgICAgICAgICAgICAgZ2lmdHMgYXMgdGhlc2UsIHRoYW4gd2hpY2ggb25lIGNvdWxkIG5hbWUgbm8gcXVhbGl0aWVzIG1vcmUgaG9zdGlsZSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzcGlyaXQgb2YgZGViYXRlIG5vciwgSSB0aGlua+KAlHNvIEhlYXZlbiBoZWxwIG1lIeKAlG1vcmUKICAgICAgICAgICAgICAgICAgICBkaXNjcmVkaXRhYmxlLiBCeSB0aGVzZSB2aWxlIHRyaWNrcyB0aGV5IGdhaW4gc3VwcmVtYWN5IG92ZXIgYWxsIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICByZXNwZWN0YWJsZSBpbiB0aGUgU3RhdGUsIG92ZXIgdGhlIGxhd3MsIHRoZSBjb21taXR0ZWVzLCB0aGUgY291cnNlIG9mIHB1YmxpYwogICAgICAgICAgICAgICAgICAgIGJ1c2luZXNzLCBhbmQgdGhlIG1haW50ZW5hbmNlIG9mIG9yZGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaWYKICAgICAgICAgICAgICAgICAgICB0aGF0IGlzIHdoYXQgeW91IHdhbnQsIGlmIHRoZWlyIHByYWN0aWNlIGFjY29yZHMgd2l0aCB5b3VyIGlkZWFzLCB3ZSBtdXN0IGp1c3QKICAgICAgICAgICAgICAgICAgICBsZXQgdGhlbSBnbyB0aGVpciBvd24gd2F5OyBidXQgaWYgeW91IHRoaW5rIHRoYXQgZXZlbiBhdCB0aGUgZWxldmVudGggaG91ciB5b3UKICAgICAgICAgICAgICAgICAgICBvdWdodCB0byBwdXQgYWxsIHRoaXMgcmlnaHQsIGFuZCByZWZvcm0gd2hhdCBoYXMgYmVlbiBhbGxvd2VkIHRvIGdvIHRvbyBmYXIsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhcyBiZWVuIGRpc2dyYWNlZnVsbHkgbWlzZGlyZWN0ZWQgYnkgdGhlc2UgbWVuLCB5b3UgbXVzdCB0b2RheSBhdmVydCB5b3VyIGV5ZXMKICAgICAgICAgICAgICAgICAgICBmcm9tIGFsbCBzdWNoIHByYWN0aWNlcyBhbmQgZ2l2ZSBhIHJpZ2h0ZW91cyB2ZXJkaWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['25.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgbXVzdCBtYWduaWZ5IHRoZSBHb2RkZXNzIG9mIE9yZGVyIHdobyBsb3ZlcyB3aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgcmlnaHQgYW5kIHByZXNlcnZlcyBldmVyeSBjaXR5IGFuZCBldmVyeSBsYW5kOyBhbmQgYmVmb3JlIHlvdSBjYXN0IHlvdXIgdm90ZXMsCiAgICAgICAgICAgICAgICAgICAgZWFjaCBqdXJ5bWFuIG11c3QgcmVmbGVjdCB0aGF0IGhlIGlzIGJlaW5nIHdhdGNoZWQgYnkgaGFsbG93ZWQgYW5kIGluZXhvcmFibGUKICAgICAgICAgICAgICAgICAgICBKdXN0aWNlLCB3aG8sIGFzIE9ycGhldXMsIHRoYXQgcHJvcGhldCBvZiBvdXIgbW9zdCBzYWNyZWQgbXlzdGVyaWVzLCB0ZWxscyB1cywKICAgICAgICAgICAgICAgICAgICBzaXRzIGJlc2lkZSB0aGUgdGhyb25lIG9mIFpldXMgYW5kIG92ZXJzZWVzIGFsbCB0aGUgd29ya3Mgb2YgbWVuLiBFYWNoIG11c3Qga2VlcAogICAgICAgICAgICAgICAgICAgIHdhdGNoIGFuZCB3YXJkIGxlc3QgaGUgc2hhbWUgdGhhdCBnb2RkZXNzLCBmcm9tIHdob20gZXZlcnlvbmUgdGhhdCBpcyBjaG9zZW4gYnkKICAgICAgICAgICAgICAgICAgICBsb3QgZGVyaXZlcyBoaXMgbmFtZSBvZiBqdXJvciwgYmVjYXVzZSBoZSBoYXMgdGhpcyBkYXkgcmVjZWl2ZWQgYSBzYWNyZWQgdHJ1c3QKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBsYXdzLCBmcm9tIHRoZSBjb25zdGl0dXRpb24sIGZyb20gdGhlIGZhdGhlcmxhbmQs4oCUdGhlIGR1dHkgb2YKICAgICAgICAgICAgICAgICAgICBndWFyZGluZyBhbGwgdGhhdCBpcyBmYWlyIGFuZCByaWdodCBhbmQgYmVuZWZpY2lhbCBpbiBvdXIgY2l0eS4gPC90cmFuc2xhdGlvbj4="
translation['25.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgeW91IGRvIG5vdCBjaGVyaXNoIHRoYXQgdGVtcGVyLCBpZiB5b3UgY29tZQogICAgICAgICAgICAgICAgICAgIGhlcmUgYW5kIHRha2Ugc2VhdHMgd2l0aCB5b3VyIHVzdWFsIGVhc3kgZ29vZCBuYXR1cmUsIEkgYW0gYWZyYWlkIHRoYXQgdGhlIGNhc2UKICAgICAgICAgICAgICAgICAgICBtYXkgYmUgcmV2ZXJzZWQsIGFuZCB0aGF0IHdlIHdobyBzZWVtIHRvIGFjY3VzZSBBcmlzdG9nZWl0b24gbWF5IGJlIGZvdW5kIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgYWNjdXNpbmcgeW91OyBmb3IgdGhlIG1vcmUgY29udmluY2luZ2x5IHdlIHByb3ZlIGhpcyBndWlsdCB3aXRob3V0IGFyb3VzaW5nIHlvdXIKICAgICAgICAgICAgICAgICAgICBpbnRlcmVzdCwgdGhlIGdyZWF0ZXIgd2lsbCBiZSB5b3VyIHNoYW1lLiBCdXQgZW5vdWdoIG9mIHRoYXQgc3ViamVjdCEgPC90cmFuc2xhdGlvbj4="
translation['25.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgSSBzaGFsbCBjZXJ0YWlubHkgdGVsbCB5b3UgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGggd2l0aCB0aGUgdXRtb3N0IGZyYW5rbmVzcy4gV2hlbiBJIHNhdyB5b3UgaW4gdGhlIEFzc2VtYmx5IGluZGljYXRpbmcgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvcG9zaW5nIG1lIGFzIHRoZSBhY2N1c2VyIG9mIEFyaXN0b2dlaXRvbiwgSSB3YXMgdHJvdWJsZWQsIGFuZCBJIGNhbGwgSGVhdmVuCiAgICAgICAgICAgICAgICAgICAgdG8gd2l0bmVzcyB0aGF0IEkgZGlkIG5vdCByZWxpc2ggdGhlIHRhc2suIEZvciBJIHdhcyBub3QgdW5hd2FyZSB0aGF0IGhlIHdobwogICAgICAgICAgICAgICAgICAgIHBsYXlzIHN1Y2ggYSBwYXJ0IGluIHlvdXIgY291cnRzIHN1ZmZlcnMgZm9yIGl0IGluIHRoZSBlbmQsIG5vdCBwZXJoYXBzIHNvIGFzIHRvCiAgICAgICAgICAgICAgICAgICAgZmVlbCBpdCBhdCBvbmNlLCBidXQgaWYgaGUgdW5kZXJ0YWtlcyBtYW55IHN1Y2ggdGFza3MgYW5kIHBlcnNldmVyZXMgaW4gdGhlbSwKICAgICAgICAgICAgICAgICAgICBoaXMgY2hhcmFjdGVyIHdpbGwgc29vbiBiZSByZWNvZ25pemVkLiBJIHRob3VnaHQgaXQsIGhvd2V2ZXIsIG15IGR1dHkgdG8gYWNjZWRlCiAgICAgICAgICAgICAgICAgICAgdG8geW91ciB3aXNoZXMuIDwvdHJhbnNsYXRpb24+"
translation['25.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGFzIHJlZ2FyZHMgdGhlIGxheWluZyBvZiB0aGUgaW5qdW5jdGlvbiBhbmQgdGhlIGxlZ2FsIHBvaW50cywgSSBjb25zaWRlcmVkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBMeWN1cmd1cyB3b3VsZCBkZWFsIGFkZXF1YXRlbHkgd2l0aCB0aGVtOyBhbmQgSSBhbHNvIHNhdyB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIHByb2R1Y2luZyB3aXRuZXNzZXMgdG8gdGhlIHdpY2tlZG5lc3Mgb2YgdGhlIGRlZmVuZGFudC4gQnV0IEkgcmVzb2x2ZWQgdG8gZGV2b3RlCiAgICAgICAgICAgICAgICAgICAgbXkgc3BlZWNoIHRvIHRob3NlIHBvaW50cyB3aGljaCBvdWdodCBhbHdheXMgdG8gYmUgY29uc2lkZXJlZCBhbmQgZXhhbWluZWQgYnkKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gYXJlIGRlbGliZXJhdGluZyBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBTdGF0ZSBhbmQgb2YgdGhlIGxhd3M7IGFuZCBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBub3cgcHJvY2VlZCB0byBkZWFsIHdpdGggdGhvc2UgcG9pbnRzLiBCdXQgZG8geW91LCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBpbiBIZWF2ZW4ncyBuYW1lIGdyYW50IG1lIHRoZQogICAgICAgICAgICAgICAgICAgIHByaXZpbGVnZSBvZiBhZGRyZXNzaW5nIHlvdSBvbiB0aGVzZSB0b3BpY3MgaW4gdGhlIHdheSB0aGF0IHN1aXRzIG15IG5hdHVyYWwKICAgICAgICAgICAgICAgICAgICBiZW50IGFuZCB0aGUgc2NoZW1lIG9mIG15IHNwZWVjaCwgZm9yIGluZGVlZCBJIGNvdWxkIG5vdCBzcGVhayBpbiBhbnkgb3RoZXIgd2F5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgbGlmZSBvZiBtZW4sIEF0aGVuaWFucywgd2hldGhlciB0aGV5IGR3ZWxsIGluIGEgbGFyZ2Ugc3RhdGUgb3IgYSBzbWFsbCBvbmUsIGlzCiAgICAgICAgICAgICAgICAgICAgZ292ZXJuZWQgYnkgbmF0dXJlIGFuZCBieSB0aGUgbGF3cy4gT2YgdGhlc2UsIG5hdHVyZSBpcyBzb21ldGhpbmcgaXJyZWd1bGFyIGFuZAogICAgICAgICAgICAgICAgICAgIGluY2FsY3VsYWJsZSwgYW5kIHBlY3VsaWFyIHRvIGVhY2ggaW5kaXZpZHVhbDsgYnV0IHRoZSBsYXdzIGFyZSBzb21ldGhpbmcKICAgICAgICAgICAgICAgICAgICB1bml2ZXJzYWwsIGRlZmluaXRlLCBhbmQgdGhlIHNhbWUgZm9yIGFsbC4gTm93IG5hdHVyZSwgaWYgaXQgYmUgZXZpbCwgb2Z0ZW4KICAgICAgICAgICAgICAgICAgICBjaG9vc2VzIHdyb25nLCBhbmQgdGhhdCBpcyB3aHkgeW91IHdpbGwgZmluZCBtZW4gb2YgYW4gZXZpbCBuYXR1cmUgY29tbWl0dGluZwogICAgICAgICAgICAgICAgICAgIGVycm9ycy4gPC90cmFuc2xhdGlvbj4="
translation['25.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIGxhd3MgZGVzaXJlIHdoYXQgaXMganVzdCBhbmQKICAgICAgICAgICAgICAgICAgICBob25vcmFibGUgYW5kIHNhbHV0YXJ5OyB0aGV5IHNlZWsgZm9yIGl0LCBhbmQgd2hlbiB0aGV5IGZpbmQgaXQsIHRoZXkgc2V0IGl0CiAgICAgICAgICAgICAgICAgICAgZm9ydGggYXMgYSBnZW5lcmFsIGNvbW1hbmRtZW50LCBlcXVhbCBhbmQgaWRlbnRpY2FsIGZvciBhbGwuIFRoZSBsYXcgaXMgdGhhdAogICAgICAgICAgICAgICAgICAgIHdoaWNoIGFsbCBtZW4gb3VnaHQgdG8gb2JleSBmb3IgbWFueSByZWFzb25zLCBidXQgYWJvdmUgYWxsIGJlY2F1c2UgZXZlcnkgbGF3IGlzCiAgICAgICAgICAgICAgICAgICAgYW4gaW52ZW50aW9uIGFuZCBnaWZ0IG9mIHRoZSBnb2RzLCBhIHRlbmV0IG9mIHdpc2UgbWVuLCBhIGNvcnJlY3RpdmUgb2YgZXJyb3JzCiAgICAgICAgICAgICAgICAgICAgdm9sdW50YXJ5IGFuZCBpbnZvbHVudGFyeSwgYW5kIGEgZ2VuZXJhbCBjb3ZlbmFudCBvZiB0aGUgd2hvbGUgU3RhdGUsIGluCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkYW5jZSB3aXRoIHdoaWNoIGFsbCBtZW4gaW4gdGhhdCBTdGF0ZSBvdWdodCB0byByZWd1bGF0ZSB0aGVpciBsaXZlcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhhdCBBcmlzdG9nZWl0b24gaGFzIGJlZW4gY29udmljdGVkCiAgICAgICAgICAgICAgICAgICAgb24gYWxsIHRoZSBoZWFkcyBvZiB0aGUgaW5mb3JtYXRpb24sIGFuZCB0aGF0IGhlIGhhcyBub3QgYSBzaW5nbGUKICAgICAgICAgICAgICAgICAgICBjb3VudGVyLWFyZ3VtZW50IHdvcnRoIGNvbnNpZGVyaW5nLCBjYW4gYmUgZWFzaWx5IHByb3ZlZC4gRm9yIHRoZXJlIGFyZSB0d28KICAgICAgICAgICAgICAgICAgICBvYmplY3RzLCBtZW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBmb3Igd2hpY2gKICAgICAgICAgICAgICAgICAgICBhbGwgbGF3cyBhcmUgZnJhbWVk4oCUdG8gZGV0ZXIgYW55IG1hbiBmcm9tIGRvaW5nIHdoYXQgaXMgd3JvbmcsIGFuZCwgYnkKICAgICAgICAgICAgICAgICAgICBwdW5pc2hpbmcgdGhlIHRyYW5zZ3Jlc3NvciwgdG8gbWFrZSB0aGUgcmVzdCBiZXR0ZXIgbWVuOyBhbmQgaXQgd2lsbCBiZSBzaG93bgogICAgICAgICAgICAgICAgICAgIHRoYXQgYm90aCB0aGVzZSBvYmplY3RzIHdpbGwgYmUgc2VjdXJlZCBieSB0aGUgcHVuaXNobWVudCBvZiB0aGUgZGVmZW5kYW50LiBGb3IKICAgICAgICAgICAgICAgICAgICBieSBoaXMgb3JpZ2luYWwgdHJhbnNncmVzc2lvbnMgaGUgaGFzIGluY3VycmVkIHRoZSBkdWUgcGVuYWx0aWVzLCBhbmQgZm9yIGhpcwogICAgICAgICAgICAgICAgICAgIHJlZnVzYWwgdG8gYWNxdWllc2NlIGluIHRoZW0gaGUgaXMgbm93IGJyb3VnaHQgaW50byBjb3VydCB0byByZWNlaXZlIHlvdXIKICAgICAgICAgICAgICAgICAgICBwdW5pc2htZW50OyBzbyB0aGF0IG5vIG9uZSBoYXMgYW55IGV4Y3VzZSBsZWZ0IGZvciBhY3F1aXR0aW5nIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['25.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm9yIGlzIGl0IHBvc3NpYmxlIHRvCiAgICAgICAgICAgICAgICAgICAgc2F5LCDigJxBZnRlciBhbGwsIHRoZXNlIHRoaW5ncyBkbyBubyBoYXJtIHRvIHRoZSBTdGF0ZS7igJ0gSQogICAgICAgICAgICAgICAgICAgIHdpbGwgbm90IGR3ZWxsIG9uIHRoZSBmYWN0IHRoYXQgYWxsIHRoZSBmaW5lcyBkdWUgdG8gdGhlIFN0YXRlIGFyZSBsb3N0LCBpZiB5b3UKICAgICAgICAgICAgICAgICAgICBhZG1pdCBoaXMgc29waGlzdHJpZXMsIG9yIHRoYXQgaWYgd2UgbXVzdCBmb3JnaXZlIGFueSBvZiBvdXIgZGVidG9ycywgaXQgb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byBiZSB0aGUgbW9zdCBkZWNlbnQgYW5kIHJlc3BlY3RhYmxlIGFuZCB0aG9zZSB3aG8gaGF2ZSBiZWVuIGZpbmVkIG9uIHRoZSBsZWFzdAogICAgICAgICAgICAgICAgICAgIHNlcmlvdXMgY2hhcmdlcywgbm90IHRoZSBncmVhdGVzdCB2aWxsYWluIG9mIGFsbCwgd2hvIGhhcyBjb21taXR0ZWQgbW9zdAogICAgICAgICAgICAgICAgICAgIG9mZmVuY2VzIGFuZCBpbmN1cnJlZCB0aGUgbW9zdCBkZXNlcnZlZCBmaW5lcyBvbiB0aGUgbW9zdCBzZXJpb3VzIGNoYXJnZXMuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hhdCBjb3VsZCBiZSBtb3JlIHNlcmlvdXMgdGhhbgogICAgICAgICAgICAgICAgICAgIGNoaWNhbmVyeSBhbmQgYnJlYWNoIG9mIHRoZSBjb25zdGl0dXRpb24sIGZvciBib3RoIG9mIHdoaWNoIHRoZSBkZWZlbmRhbnQgaGFzCiAgICAgICAgICAgICAgICAgICAgYmVlbiBjb25kZW1uZWQ/IE5vciB3aWxsIEkgdXJnZSB0aGF0IGV2ZW4gaWYgeW91IGxldCBvZmYgYWxsIG90aGVyIG9mZmVuZGVycywgaXQKICAgICAgICAgICAgICAgICAgICBpcyBzdXJlbHkgd3JvbmcgdG8gZ2l2ZSB3YXkgdG8gb25lIHdobyByZXNvcnRzIHRvIGZvcmNlLCBmb3IgdGhhdCBpcyBzdXJlbHkgYW4KICAgICAgICAgICAgICAgICAgICBvdXRyYWdlLiBJIHdhaXZlIHN1Y2ggY29uc2lkZXJhdGlvbnMgYXMgdGhlc2U7IGJ1dCBJIGRvIHRoaW5rIHRoYXQgSSBjYW4gY2xlYXJseQogICAgICAgICAgICAgICAgICAgIHByb3ZlIHRvIHlvdSB0aGF0IHRoZSBkZWZlbmRhbnQncyBleGFtcGxlIGNvbmZvdW5kcyBhbmQgZGVzdHJveXMgYWxsIG9yZGVyIGluCiAgICAgICAgICAgICAgICAgICAgbGF3IGFuZCBpbiBnb3Zlcm5tZW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['25.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBzaGFsbCBzYXkgbm90aGluZyBub3ZlbCBvciBleHRyYXZhZ2FudCBvciBwZWN1bGlhciwgYnV0IG9ubHkKICAgICAgICAgICAgICAgICAgICB3aGF0IHlvdSBhbGwga25vdyB0byBiZSB0cnVlIGFzIHdlbGwgYXMgSSBkby4gRm9yIGlmIGFueSBvZiB5b3UgY2FyZXMgdG8gaW5xdWlyZQogICAgICAgICAgICAgICAgICAgIHdoYXQgaXMgdGhlIG1vdGl2ZS1wb3dlciB0aGF0IGNhbGxzIHRvZ2V0aGVyIHRoZSBDb3VuY2lsLCBkcmF3cyB0aGUgcGVvcGxlIGludG8KICAgICAgICAgICAgICAgICAgICB0aGUgQXNzZW1ibHksIGZpbGxzIHRoZSBsYXctY291cnRzLCBtYWtlcyB0aGUgb2xkIG9mZmljaWFscyByZXNpZ24gcmVhZGlseSB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBuZXcsIGFuZCBlbmFibGVzIHRoZSB3aG9sZSBsaWZlIG9mIHRoZSBTdGF0ZSB0byBiZSBjYXJyaWVkIG9uIGFuZCBwcmVzZXJ2ZWQsCiAgICAgICAgICAgICAgICAgICAgaGUgd2lsbCBmaW5kIHRoYXQgaXQgaXMgdGhlIGxhd3MgYW5kIHRoZSBvYmVkaWVuY2UgdGhhdCBhbGwgbWVuIHlpZWxkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3M7IHNpbmNlLCBpZiBvbmNlIHRoZXkgd2VyZSBkb25lIGF3YXkgd2l0aCBhbmQgZXZlcnkgbWFuIHdlcmUgZ2l2ZW4gbGljZW5jZQogICAgICAgICAgICAgICAgICAgIHRvIGRvIGFzIGhlIGxpa2VkLCBub3Qgb25seSBkb2VzIHRoZSBjb25zdGl0dXRpb24gdmFuaXNoLCBidXQgb3VyIGxpZmUgd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgZGlmZmVyIGZyb20gdGhhdCBvZiB0aGUgYmVhc3RzIG9mIHRoZSBmaWVsZC4gPC90cmFuc2xhdGlvbj4="
translation['25.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3Ugc2VlIHdoYXQgdGhlIGRlZmVuZGFudCBpcywgd2hlbiB0aGUgbGF3cyBhcmUgaW4gZm9yY2U6IHdoYXQgZG8geW91IHRoaW5rCiAgICAgICAgICAgICAgICAgICAgaGUgd291bGQgZG8sIGlmIHRoZSBsYXdzIHdlcmUgZG9uZSBhd2F5IHdpdGg/IFNpbmNlIHRoZW4gaXQgaXMgYWRtaXR0ZWQgdGhhdCwKICAgICAgICAgICAgICAgICAgICBuZXh0IGFmdGVyIHRoZSBnb2RzLCB0aGUgbGF3cyBwcmVzZXJ2ZSB0aGUgU3RhdGUsIGl0IGlzIHRoZSBkdXR5IG9mIGFsbCBvZiB5b3UKICAgICAgICAgICAgICAgICAgICB0byBhY3QganVzdCBhcyBpZiB5b3Ugd2VyZSBzaXR0aW5nIGhlcmUgbWFraW5nIHVwIGEgY29udHJpYnV0aW9uIHRvIHlvdXIKICAgICAgICAgICAgICAgICAgICAgICAgY2x1Yi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DOu863z4HPic+EzrHhvbc8L2ZvcmVpZ24+IHNlZW1zIHRvIG1lYW4gZWl0aGVyIHRob3NlIHdobyBwYXkgdGhlIGNvbnRyaWJ1dGlvbgogICAgICAgICAgICAgICAgICAgICAgICBvciB0aG9zZSB3aG8gc2VlIHRoYXQgaXQgaXMgcGFpZC48L25vdGU+IElmIGEgbWFuIG9iZXlzIHRoZSBsYXdzLCByZXNwZWN0CiAgICAgICAgICAgICAgICAgICAgYW5kIGNvbW1lbmQgaGltIGZvciBwYXlpbmcgaGlzIGNvbnRyaWJ1dGlvbiBpbiBmdWxsIHRvIHRoZSB3ZWxmYXJlIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGZhdGhlcmxhbmQ7IGlmIGhlIGRpc29iZXlzIHRoZW0sIHB1bmlzaCBoaW0uIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+AzrvOt8+Bz4nPhM6x4b23PC9mb3JlaWduPiBzZWVtcyB0byBtZWFuIGVpdGhlciB0aG9zZSB3aG8gcGF5IHRoZSBjb250cmlidXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgb3IgdGhvc2Ugd2hvIHNlZSB0aGF0IGl0IGlzIHBhaWQuPC90cmFuc2xhdGlvbj4="
translation['25.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZXZlcnl0aGluZyBkb25lIGF0IHRoZSBiaWRkaW5nIG9mIHRoZSBsYXdzIGlzIGEgY29udHJpYnV0aW9uIG1hZGUgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUgYW5kIHRoZSBjb21tdW5pdHkuIFdob2V2ZXIgbGVhdmVzIGl0IHVucGFpZCwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaXMgZGVwcml2aW5nIHlvdSBvZiBtYW55IGdyZWF0LAogICAgICAgICAgICAgICAgICAgIGhvbm9yYWJsZSwgYW5kIGdsb3Jpb3VzIGJlbmVmaXRzLCB3aGljaCBoZSBpcyBkZXN0cm95aW5nIHRvIHRoZSBiZXN0IG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGFiaWxpdHkuIDwvdHJhbnNsYXRpb24+"
translation['25.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5PbmUgb3IgdHdvIG9mIHRoZXNlIGJlbmVmaXRzIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIG5hbWUgZm9yIHRoZSBzYWtlIG9mIGV4YW1wbGUsIGNob29zaW5nIHRoZSBiZXN0IGtub3duLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgQ291bmNpbCBvZiB0aGUgRml2ZSBIdW5kcmVkLCB0aGFua3MgdG8gdGhpcyBiYXJyaWVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgd29vZGVuIGxhdHRpY2Utd29yayBkb29yd2F5LCBnaXZpbmcgYWRtaXNzaW9uCiAgICAgICAgICAgICAgICAgICAgICAgIHRocm91Z2ggdGhlIGJhciB0byB0aGUgY291bmNpbC1jaGFtYmVyIG9yIGxhdy1jb3VydC4gVGhlIGNvcnJlc3BvbmRpbmcgTGF0LgogICAgICAgICAgICAgICAgICAgICAgICB0ZXJtIGlzIGNhbmNlbGlpLjwvbm90ZT4gZnJhaWwgYXMgaXQgaXMsIGlzIG1hc3RlciBvZiBpdHMgb3duIHNlY3JldHMsIGFuZAogICAgICAgICAgICAgICAgICAgIG5vIHByaXZhdGUgY2l0aXplbiBjYW4gZW50ZXIgaXQuIFRoZSBDb3VuY2lsIG9mIHRoZSBBcmVvcGFndXMsIHdoZW4gaXQgc2l0cwogICAgICAgICAgICAgICAgICAgIHJvcGVkIG9mZiBpbiB0aGUgS2luZydzIFBvcnRpY28sIGVuam95cyBjb21wbGV0ZSBmcmVlZG9tIGZyb20gZGlzdHVyYmFuY2UsIGFuZAogICAgICAgICAgICAgICAgICAgIGFsbCBtZW4gaG9sZCBhbG9vZi4gPC90cmFuc2xhdGlvbj4="
translation['25.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlIG1hZ2lzdHJhdGVzIHdobwogICAgICAgICAgICAgICAgICAgIGFyZSBjaG9zZW4gZnJvbSB5b3UgYnkgbG90LCBhcyBzb29uIGFzIHRoZSBhdHRlbmRhbnQgY3JpZXMg4oCcU3RyYW5nZXJzCiAgICAgICAgICAgICAgICAgICAgbXVzdCB3aXRoZHJhdyzigJ0gY29udHJvbCB0aGUgbGF3cyB3aGljaCB0aGV5IHdlcmUgYXBwb2ludGVkIHRvCiAgICAgICAgICAgICAgICAgICAgYWRtaW5pc3RlciBhbmQgY2Fubm90IGJlIGRpc3R1cmJlZCBieSB0aGUgbW9zdCB1bnJ1bHkuIFRoZXJlIGFyZSB0aG91c2FuZHMgb2YKICAgICAgICAgICAgICAgICAgICBvdGhlciBiZW5lZml0cy4gQWxsIHRoZSBub2JsZSBhbmQgcmV2ZXJlbmQgcXVhbGl0aWVzIHRoYXQgYWRvcm4gYW5kIHByZXNlcnZlIG91cgogICAgICAgICAgICAgICAgICAgIGNpdHks4oCUc29icmlldHksIG9yZGVybGluZXNzLCB0aGUgcmVzcGVjdCBvZiB5b3VyIHlvdW5nZXIgbWVuIGZvcgogICAgICAgICAgICAgICAgICAgIHBhcmVudHMgYW5kIGVsZGVyc+KAlGhvbGQgdGhlaXIgb3duLCBiYWNrZWQgYnkgdGhlIGxhd3MsIGFnYWluc3QgdGhlCiAgICAgICAgICAgICAgICAgICAgYmFzZSBxdWFsaXRpZXMgb2YgaW5kZWNlbmN5LCBhdWRhY2l0eSwgYW5kIHNoYW1lbGVzc25lc3MuIEZvciB2aWNlIGlzIHZpZ29yb3VzLAogICAgICAgICAgICAgICAgICAgIGRhcmluZywgYW5kIGdyYXNwaW5nOyBvbiB0aGUgb3RoZXIgaGFuZCBwcm9iaXR5IGlzIHBlYWNlZnVsLCByZXRpcmluZywgaW5hY3RpdmUsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRlcnJpYmx5IGxpYWJsZSB0byBjb21lIG9mZiBzZWNvbmQtYmVzdC4gVGhlcmVmb3JlIHRob3NlIG9mIHlvdSB3aG8gc2l0IHVwb24KICAgICAgICAgICAgICAgICAgICBqdXJpZXMgb3VnaHQgdG8gcHJvdGVjdCBhbmQgc3RyZW5ndGhlbiB0aGUgbGF3cywgZm9yIHdpdGggdGhlIGhlbHAgb2YgdGhlIGxhd3MKICAgICAgICAgICAgICAgICAgICB0aGUgZ29vZCBvdmVyY29tZSB0aGUgYmFkLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5JZiBub3QsIGFsbCBpcwogICAgICAgICAgICAgICAgICAgIGRpc3NvbHZlZCwgYnJva2VuIHVwLCBjb25mb3VuZGVkLCBhbmQgdGhlIGNpdHkgYmVjb21lcyB0aGUgcHJleSBvZiB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIHByb2ZsaWdhdGUgYW5kIHNoYW1lbGVzcy4gRm9yIHRlbGwgbWUgdGhpcywgaW4gSGVhdmVuJ3MgbmFtZTsgaWYgZXZlcnlvbmUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eSBjb3BpZWQgdGhlIGF1ZGFjaXR5IGFuZCBzaGFtZWxlc3NuZXNzIG9mIEFyaXN0b2dlaXRvbiBhbmQgYXJndWVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbWUgd2F5IGFzIGhlLCB0aGF0IGluIGEgZGVtb2NyYWN5IGEgbWFuIGhhcyBhbiB1bmxpbWl0ZWQgcmlnaHQgdG8gc2F5IGFuZCBkbwogICAgICAgICAgICAgICAgICAgIHdoYXRldmVyIGhlIGxpa2VzLCBhcyBsb25nIGFzIGhlIGRvZXMgbm90IGNhcmUgd2hhdCByZXB1dGF0aW9uIHN1Y2ggY29uZHVjdCB3aWxsCiAgICAgICAgICAgICAgICAgICAgYnJpbmcgaGltLCBhbmQgdGhhdCBubyBvbmUgd2lsbCBwdXQgaGltIHRvIGRlYXRoIGF0IG9uY2UgZm9yIGFueSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBtaXNkb2luZ3M7IDwvdHJhbnNsYXRpb24+"
translation['25.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5pZiwgYWN0aW5nIG9uIHRoaXMgcHJpbmNpcGxlLCB0aGUKICAgICAgICAgICAgICAgICAgICBjaXRpemVuIHJlamVjdGVkIGF0IHRoZSBiYWxsb3Qgb3IgYXQgdGhlIGVsZWN0aW9uIHNob3VsZCBwdXQgaGltc2VsZiBvbiBhbgogICAgICAgICAgICAgICAgICAgIGVxdWFsaXR5IHdpdGggdGhlIGNob3NlbiBjaXRpemVuOyBpZiwgaW4gYSB3b3JkLCBuZWl0aGVyIHlvdW5nIG5vciBvbGQgc2hvdWxkIGRvCiAgICAgICAgICAgICAgICAgICAgaGlzIGR1dHksIGJ1dCBlYWNoIG1hbiwgYmFuaXNoaW5nIGFsbCBkaXNjaXBsaW5lIGZyb20gbGlmZSwgc2hvdWxkIHJlZ2FyZCBoaXMKICAgICAgICAgICAgICAgICAgICBvd24gd2lzaCBhcyBsYXcsIGFzIGF1dGhvcml0eSwgYXMgYWxsIGluIGFsbOKAlGlmLCBJIHNheSwgd2Ugc2hvdWxkIGFjdAogICAgICAgICAgICAgICAgICAgIGxpa2UgdGhpcywgY291bGQgdGhlIGdvdmVybm1lbnQgY29udGludWUgdG8gYmUgY2FycmllZCBvbj8gV2hhdD8gV291bGQgdGhlIGxhd3MKICAgICAgICAgICAgICAgICAgICBiZSBhbnkgbG9uZ2VyIHZhbGlkPyBXaGF0IHZpb2xlbmNlLCBpbnNvbGVuY2UgYW5kIGxhd2xlc3NuZXNzIHRoZXJlIHdvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaG91dCB0aGUgY2l0eSBldmVyeSBkYXkhIFdoYXQgc2N1cnJpbGl0eSBpbnN0ZWFkIG9mIG91ciBwcmVzZW50IGRlY2VuY3kgb2YKICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSBhbmQgYmVoYXZpb3IhIDwvdHJhbnNsYXRpb24+"
translation['25.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgbmVlZCBvbmUgcmVwZWF0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBvcmRlciBpcyBldmVyeXdoZXJlIG1haW50YWluZWQgYnkgdGhlIGxhd3MgYW5kIGJ5IG9iZWRpZW5jZSB0byB0aGUgbGF3cz8KICAgICAgICAgICAgICAgICAgICBZb3UgeW91cnNlbHZlcyBoYXZlIHRoZSBzb2xlIHJpZ2h0IG9mIGp1ZGdpbmcgb3VyIGNhc2UsIHRob3VnaCBldmVyeSBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgIHdhcyBpbiB0aGUgYmFsbG90IGFuZCBhbGwsIEkgYW0gc3VyZSwgd2FudGVkIHRvIGJlIGFsbG90dGVkIHRvIHRoaXMgY291cnQuIFdoeQogICAgICAgICAgICAgICAgICAgIGlzIHRoaXM/IEJlY2F1c2UgYnkgbG90IHlvdSB3ZXJlIGNob3NlbiBhbmQgdGhlbiBhc3NpZ25lZCB0byB0aGlzIGNhc2UuIFRob3NlCiAgICAgICAgICAgICAgICAgICAgYXJlIHRoZSBpbnN0cnVjdGlvbnMgb2YgdGhlIGxhdy4gQW5kIHRoZW4gd2lsbCB5b3UsIHdobyBvd2UgeW91ciBwcmVzZW5jZSBoZXJlCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGxhd3MsIGFsbG93IGEgbWFuLCB3aG8gZmxvdXRzIHRoZSBsYXdzIGJ5IHdvcmQgYW5kIGRlZWQsIHRvIGVzY2FwZSBmcm9tCiAgICAgICAgICAgICAgICAgICAgeW91ciBncmFzcD8gV2lsbCBub25lIG9mIHlvdSBzaG93IGFuZ2VyIG9yIGJpdHRlcm5lc3MgYXQgdGhpcyBzaGFtZWxlc3MKICAgICAgICAgICAgICAgICAgICBydWZmaWFuJ3MgZGVmaWFuY2Ugb2YgdGhlIGxhd3M/IDwvdHJhbnNsYXRpb24+"
translation['25.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VmlsZXN0IG9mIGFsbCBsaXZpbmcgbWVuISBTaHV0IG91dCBmcm9tIHlvdXIgcmlnaHQgb2YKICAgICAgICAgICAgICAgICAgICBzcGVlY2gsIG5vdCBieSBiYXJyaWVycyBvciBkb29ycyB3aGljaCBhbnkgbWFuIG1pZ2h0IGJyZWFrIG9wZW4sIGJ1dCBieSBzbyBtYW55CiAgICAgICAgICAgICAgICAgICAgaGVhdnkgcGVuYWx0aWVzLCB3aGljaCBhcmUgcmVnaXN0ZXJlZCBpbiB0aGUgdGVtcGxlIG9mIHRoZSBHb2RkZXNzLCB5b3UgYXJlCiAgICAgICAgICAgICAgICAgICAgdHJ5aW5nIHRvIGZvcmNlIHlvdXIgd2F5IGluIGFuZCB0byBhcHByb2FjaCB0aG9zZSBwcmVjaW5jdHMgZnJvbSB3aGljaCB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIGV4Y2x1ZGUgeW91LiBEZWJhcnJlZCBieSBldmVyeSByaWdodCB0aGF0IGhvbGRzIGdvb2QgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LCBieSB0aGUgZGVjaXNpb25zIG9mIHRocmVlCiAgICAgICAgICAgICAgICAgICAgdHJpYnVuYWxzLCBieSB0aGUgcmVnaXN0ZXJzIG9mIHRoZSBhcmNob25zIGFuZCBvZiB0aGUgY29sbGVjdG9ycyBvZiB0YXhlcywgYnkKICAgICAgICAgICAgICAgICAgICB0aGUgaW5kaWN0bWVudCBmb3Igd3JvbmdmdWwgZW50cnkgaW4gd2hpY2ggeW91IHlvdXJzZWxmIGFyZSB0aGUgcGxhaW50aWZmLAogICAgICAgICAgICAgICAgICAgIGN1cmJlZCwgSSBtaWdodCBhbG1vc3Qgc2F5LCBieSBjaGFpbnMgb2Ygc3RlZWwsIHlvdSB3cmlnZ2xlIGFuZCBmb3JjZSB5b3VyIHdheQogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggYWxsIGFuZCBpbWFnaW5lIHRoYXQgYnkgd2VhdmluZyBleGN1c2VzIGFuZCB0cnVtcGluZyB1cCBmYWxzZSBjaGFyZ2VzCiAgICAgICAgICAgICAgICAgICAgeW91IGNhbiBvdmVydHVybiBhbGwgdGhlIHByaW5jaXBsZXMgb2YganVzdGljZS4gPC90cmFuc2xhdGlvbj4="
translation['25.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aWxsLCBob3dldmVyLCBieSBhIGNsZWFyIGFuZCBmb3JjaWJsZQogICAgICAgICAgICAgICAgICAgIGV4YW1wbGUgc2hvdyB0aGUganVyeSB0aGF0IHRoZXkgb3VnaHQgbm90IHRvIG92ZXJsb29rIHN1Y2ggY29uZHVjdDsgbm8sIG5vdCBpbiBhCiAgICAgICAgICAgICAgICAgICAgc2luZ2xlIHBhcnRpY3VsYXIuIEltYWdpbmUgZm9yIGEgbW9tZW50IHRoYXQgc29tZW9uZSBwcm9wb3NlZCB0aGF0IHNwZWFrZXJzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIEFzc2VtYmx5IHNob3VsZCBiZSBjb25maW5lZCB0byB0aGUgeW91bmdlc3QgY2l0aXplbnMsIG9yIHRvIHRoZSByaWNoZXN0LCBvcgogICAgICAgICAgICAgICAgICAgIHRvIHRob3NlIHdobyBoYWQgcGVyZm9ybWVkIGEgcHVibGljIHNlcnZpY2UsIG9yIHRvIHNvbWUgc2ltaWxhciBjYXRlZ29yeS4gSSBhbQogICAgICAgICAgICAgICAgICAgIHN1cmUgeW91IHdvdWxkIGhhdmUgaGltIHB1dCB0byBkZWF0aCBmb3IgdHJ5aW5nIHRvIG92ZXJ0aHJvdyB0aGUgZGVtb2NyYWN5LiBBbmQKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgeW91IHdvdWxkIGJlIGp1c3RpZmllZC4gPC90cmFuc2xhdGlvbj4="
translation['25.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgYW55IG9uZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHByb3Bvc2FscyBpcyBsZXNzIGRhbmdlcm91cyB0aGFuIGlmIGl0IHdlcmUgcHJvcG9zZWQgdGhhdCBzcGVha2VycyBzaG91bGQKICAgICAgICAgICAgICAgICAgICBiZWxvbmcgdG8gb25lIG9mIHRoZSBjbGFzc2VzIHRvIHdoaWNoIHRoZSBkZWZlbmRhbnQKICAgICAgICAgICAgICAgICAgICBiZWxvbmdz4oCUbGF3LWJyZWFrZXJzLCBqYWlsLWJpcmRzLCBzb25zIG9mIGNyaW1pbmFscyBwdXQgdG8gZGVhdGggYnkKICAgICAgICAgICAgICAgICAgICB0aGUgcGVvcGxlLCBjaXRpemVucyBkaXNxdWFsaWZpZWQgYWZ0ZXIgb2J0YWluaW5nIG9mZmljZSBieSBsb3QsIHB1YmxpYyBkZWJ0b3JzLAogICAgICAgICAgICAgICAgICAgIG1lbiB0b3RhbGx5IGRpc2ZyYW5jaGlzZWQsIG9yIG1lbiB3aG8gYnkgcmVwdXRlIGFuZCBpbiBmYWN0IGFyZSB1dHRlciByYXNjYWxzLgogICAgICAgICAgICAgICAgICAgIEFsbCB0aGVzZSBkZXNjcmlwdGlvbnMgZml0IHRoZSBkZWZlbmRhbnQgYW5kIGFwcGx5IHRvIHRob3NlIHdobyByZXNlbWJsZSBoaW0gaW4KICAgICAgICAgICAgICAgICAgICBkaXNwb3NpdGlvbi4gSSB0aGluaywgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGRlc2VydmVzIGRlYXRoIGJvdGggZm9yIHdoYXQgaGUgaXMgZG9pbmcgbm93IGFuZCBtdWNoIG1vcmUsIG9yIGF0IGxlYXN0CiAgICAgICAgICAgICAgICAgICAgbm8gbGVzcywgZm9yIHdoYXQgaGUgb2J2aW91c2x5IHdpbGwgZG8sIGlmIGhlIGdldHMgdGhlIHBvd2VyIGFuZCBvcHBvcnR1bml0eQogICAgICAgICAgICAgICAgICAgIGZyb20geW91OyB3aGljaCBIZWF2ZW4gZm9yZmVuZCEgPC90cmFuc2xhdGlvbj4="
translation['25.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBhbHNvCiAgICAgICAgICAgICAgICAgICAgc3RyYW5nZSBpZiBhbnlvbmUgb2YgeW91IGlzIGlnbm9yYW50IHRoYXQgZm9yIG5vdGhpbmcgdGhhdCBpcyBob25vcmFibGUgb3IKICAgICAgICAgICAgICAgICAgICB1c2VmdWwgb3Igd29ydGh5IG9mIG91ciBjaXR5IGlzIGhlIG9mIGFueSB1c2UuIE1heSBaZXVzIGFuZCBhbGwgdGhlIGdvZHMgZ3JhbnQKICAgICAgICAgICAgICAgICAgICB0aGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBtYXkgbmV2ZXIgYmUgc28gc2hvcnQgb2YKICAgICAgICAgICAgICAgICAgICByZWFsIG1lbiB0aGF0IGFueSBob25vcmFibGUgdGFzayBzaG91bGQgaGF2ZSB0byBiZSBwZXJmb3JtZWQgYnkgYW4gQXJpc3RvZ2VpdG9uIQogICAgICAgICAgICAgICAgICAgIFdlIG91Z2h0IHRvIHByYXkgSGVhdmVuIHRoYXQgdGhlIG9jY2FzaW9uIG1heSBuZXZlciBhcmlzZSBmb3Igd2hpY2ggc3VjaCBhCiAgICAgICAgICAgICAgICAgICAgbW9uc3RlciBjb3VsZCBiZSBmb3VuZCB1c2VmdWwuIEJ1dCBzaG91bGQgaXQgcG9zc2libHkgYXJpc2UsIGl0IHdvdWxkIGJlIGEKICAgICAgICAgICAgICAgICAgICBncmVhdGVyIGJsZXNzaW5nIGZvciB0aGUgY2l0eSB0aGF0IHRob3NlIHdobyB3aXNoIGZvciBpdHMgZmFsbCBzaG91bGQgbGFjayB0aGUKICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50IG9mIHRoZWlyIGRlc2lnbnMgdGhhbiB0aGF0IHRoaXMgZmVsbG93IHNob3VsZCBiZSByZWxlYXNlZCBhbmQgcmVhZHkKICAgICAgICAgICAgICAgICAgICB0byB0aGVpciBoYW5kLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hhdCBmYXRhbCBvciBkYW5nZXJvdXMgYWN0CiAgICAgICAgICAgICAgICAgICAgd2lsbCBoZSBzaHJpbmsgZnJvbSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPizigJR0aGlzIHBvbGx1dGVkIHdyZXRjaCwgaW5mZWN0ZWQgd2l0aCBoZXJlZGl0YXJ5CiAgICAgICAgICAgICAgICAgICAgaGF0cmVkIG9mIGRlbW9jcmFjeT8gV2hhdCBvdGhlciBtYW4gd291bGQgc29vbmVyIG92ZXJ0aHJvdyB0aGUgU3RhdGUsIGlmCiAgICAgICAgICAgICAgICAgICAgb25seeKAlHdoaWNoIEhlYXZlbiBmb3JiaWQh4oCUaGUgc2hvdWxkIGdhaW4gdGhlIHBvd2VyPyBEbyB5b3UKICAgICAgICAgICAgICAgICAgICBub3Qgc2VlIHRoYXQgaGlzIGNoYXJhY3RlciBhbmQgaGlzIHBvbGljeSBhcmUgbm90IGd1aWRlZCBieSByZWFzb24gb3IgYnkKICAgICAgICAgICAgICAgICAgICBzZWxmLXJlc3BlY3QsIGJ1dCBieSByZWNrbGVzc25lc3M/PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldlIGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3QgZXF1aXZhbGVudCBmb3IgdGhpcyBHcmVlayB3b3JkOyDigJxtb3JhbCBpbnNhbml0eeKAnQogICAgICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBzdWdnZXN0ZWQuIFJlYWQgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPjE2dGggPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhcmFjdGVyPC90aXRsZT5vZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlb3BocmFzdHVzPC9iaWJsPiB3aXRoIEplYmIncyBjb21tZW50YXJ5Ljwvbm90ZT4gT3IgcmF0aGVyLCBoaXMgcG9saWN5CiAgICAgICAgICAgICAgICAgICAgaXMgc2hlZXIgcmVja2xlc3NuZXNzLiBOb3cgdGhhdCBpcyB0aGUgdmVyeSB3b3JzdCBxdWFsaXR5IGZvciBpdHMgcG9zc2Vzc29yLAogICAgICAgICAgICAgICAgICAgIHRlcnJpYmx5IGRhbmdlcm91cyBmb3IgZXZlcnlvbmUgZWxzZSwgYW5kIGZvciB0aGUgU3RhdGUgaW50b2xlcmFibGUuIEZvciB0aGUKICAgICAgICAgICAgICAgICAgICByZWNrbGVzcyBtYW4gaGFzIGxvc3QgYWxsIGNvbnRyb2wgb2YgaGltc2VsZiwgYWxsIGhvcGUgb2YgcmF0aW9uYWwgc2FmZXR5LCBhbmQKICAgICAgICAgICAgICAgICAgICBjYW4gb25seSBiZSBzYXZlZCwgaWYgYXQgYWxsLCBieSBzb21lIHVuZXhwZWN0ZWQgYW5kIGluY2FsY3VsYWJsZSBhY2NpZGVudC4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+MTZ0aCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFyYWN0ZXI8L3RpdGxlPm9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGVvcGhyYXN0dXM8L2JpYmw+IHdpdGggSmViYidzIGNvbW1lbnRhcnkuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhcmFjdGVyPC90aXRsZT5vZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlb3BocmFzdHVzPC90cmFuc2xhdGlvbj4="
translation['25.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5XaG8sIHRoZW4sIHRoYXQgaXMgd2lzZSB3b3VsZCBiaW5kIHVwIGhpcwogICAgICAgICAgICAgICAgICAgIG93biBvciBoaXMgY291bnRyeSdzIGludGVyZXN0cyB3aXRoIHRoaXMgZmFpbGluZz8gV2hvIHdvdWxkIG5vdCBzaHVuIGl0IGFzIGZhcgogICAgICAgICAgICAgICAgICAgIGFzIHBvc3NpYmxlLCBhbmQga2VlcCBpdHMgcG9zc2Vzc29yIGF0IGFybSdzIGxlbmd0aCwgdGhhdCBoZSBtYXkgbm90IGJlIGludm9sdmVkCiAgICAgICAgICAgICAgICAgICAgaW4gaXQgZXZlbiBhZ2FpbnN0IGhpcyB3aWxsPyBQYXRyaW90aWMgc3RhdGVzbWVuLCBBdGhlbmlhbnMsIG91Z2h0IHRvIHNlZWsgb3V0CiAgICAgICAgICAgICAgICAgICAgc29tZSBhZHZpc2VyIHdobyB3aWxsIGNvbnRyaWJ1dGUsIG5vdCByZWNrbGVzc25lc3MsIGJ1dCBpbnRlbGxpZ2VuY2UsIHNvdW5kCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50LCBhbmQgYW1wbGUgZm9yZXRob3VnaHQ7IGZvciB0aGVzZSBxdWFsaXRpZXMgY29uZHVjdCBhbGwgbWVuIHRvCiAgICAgICAgICAgICAgICAgICAgaGFwcGluZXNzOyB0aGUgb3RoZXIgbGVhZHMgdG8gdGhhdCBnb2FsIGZvciB3aGljaCBBcmlzdG9nZWl0b24gaXMgYm91bmQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4KICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmluZyB0aGlzIHF1ZXN0aW9uLCBsb29rIG5vdCBhdCBteSBzcGVlY2gsIGJ1dCBhdCB0aGUgZ2VuZXJhbCBjaGFyYWN0ZXIKICAgICAgICAgICAgICAgICAgICBvZiBtYW5raW5kLiBBbGwgb3VyIGNpdGllcyBjb250YWluIHNocmluZXMgYW5kIHRlbXBsZXMgb2YgYWxsIHRoZSBnb2RzLCBhbmQKICAgICAgICAgICAgICAgICAgICBhbW9uZyB0aGVtIGlzIG9uZSBvZiBBdGhlbmEsIE91ciBMYWR5IG9mIEZvcmV0aG91Z2h0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgZ29kZGVzcyB3aXRoIGEgdGVtcGxlIGF0IHRoZSBlbnRyYW5jZSB0byB0aGUgcHJlY2luY3RzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsbyBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLERlbHBoaSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsRGVscGhpIj5EZWxwaGk8L3BsYWNlTmFtZT4gd2FzIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8iM644b21zr3OtyDOoM+Bzr/Ovc6x4b23zrE8L2ZvcmVpZ24+LCB3aG9tIHRoZSA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+UHl0aG88L3N1cm5hbWU+PC9wZXJzTmFtZT4gYWRkcmVzc2VzIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FdW1lbmlkZXM8L3RpdGxlPiDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaC4gRXVtLiAyMSIgdmFsaWQ9InllcyI+QWVzY2guIEV1bS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxPC9iaWJsPiBhbmQgdG8gd2hvbSBDcm9lc3VzIG9mZmVyZWQgYSBnb2xkZW4gc2hpZWxkIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gMS45MiIgdmFsaWQ9InllcyI+SGR0LiAxLjkyPC9iaWJsPu+8iS4gUGVyaGFwcyBieSBwb3B1bGFyIGV0eW1vbG9neQogICAgICAgICAgICAgICAgICAgICAgICBzaGUgYmVjYW1lIHRoZSBnb2RkZXNzIG9mIFByb3ZpZGVuY2UsIHdoaWNoIHRpdGxlIHNoZSBpcyBuYW1lZCBhbHNvIGluCiAgICAgICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjEwOCIgdmFsaWQ9InllcyI+QWVzY2hpbi4KICAgICAgICAgICAgICAgICAgICAgICAgMy4xMDg8L2JpYmw+77yJLiBQYXVzYW5pYXMgbWVudGlvbnMgYm90aCB0aXRsZXMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gOS4xMC4yIiB2YWxpZD0ieWVzIj5QYXVzLiA5LjEwLjI8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxMC44LjYiIHZhbGlkPSJ5ZXMiPlBhdXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMC44LjY8L2JpYmw+77yJLjwvbm90ZT4gd29yc2hpcHBlZCBhcyBhIGJlbmVmaWNlbnQgYW5kIHBvd2VyZnVsCiAgICAgICAgICAgICAgICAgICAgZ29kZGVzcywgYW5kIGNsb3NlIHRvIHRoZSB0ZW1wbGUgb2YgQXBvbGxvIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRGVscGhpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEZWxwaGkiPkRlbHBoaTwvcGxhY2VOYW1lPiB3YXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byIzrjhvbXOvc63IM6gz4HOv869zrHhvbfOsTwvZm9yZWlnbj4sIHdob20gdGhlIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5QeXRobzwvc3VybmFtZT48L3BlcnNOYW1lPiBhZGRyZXNzZXMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5QeXRobzwvc3VybmFtZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FdW1lbmlkZXM8L3RpdGxlPiDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaC4gRXVtLiAyMSIgdmFsaWQ9InllcyI+QWVzY2guIEV1bS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDIxPC9iaWJsPiBhbmQgdG8gd2hvbSBDcm9lc3VzIG9mZmVyZWQgYSBnb2xkZW4gc2hpZWxkIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gMS45MiIgdmFsaWQ9InllcyI+SGR0LiAxLjkyPC9iaWJsPu+8iS4gUGVyaGFwcyBieSBwb3B1bGFyIGV0eW1vbG9neQogICAgICAgICAgICAgICAgICAgICAgICBzaGUgYmVjYW1lIHRoZSBnb2RkZXNzIG9mIFByb3ZpZGVuY2UsIHdoaWNoIHRpdGxlIHNoZSBpcyBuYW1lZCBhbHNvIGluCiAgICAgICAgICAgICAgICAgICAgICAgIEFlc2NoaW5lcyDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBZXNjaGluLiAzLjEwOCIgdmFsaWQ9InllcyI+QWVzY2hpbi4KICAgICAgICAgICAgICAgICAgICAgICAgMy4xMDg8L2JpYmw+77yJLiBQYXVzYW5pYXMgbWVudGlvbnMgYm90aCB0aXRsZXMg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gOS4xMC4yIiB2YWxpZD0ieWVzIj5QYXVzLiA5LjEwLjI8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAxMC44LjYiIHZhbGlkPSJ5ZXMiPlBhdXMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMC44LjY8L2JpYmw+77yJLjxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsRGVscGhpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxEZWxwaGkiPkRlbHBoaTwvcGxhY2VOYW1lPiwgaW1tZWRpYXRlbHkgYXMgeW91IGVudGVyIHRoZSBwcmVjaW5jdHMsIHNoZSBoYXMgYSBsYXJnZQogICAgICAgICAgICAgICAgICAgIGFuZCBiZWF1dGlmdWwgdGVtcGxlLiBBcG9sbG8sIGEgZ29kIGFuZCBwcm9waGV0IGJvdGgsIGtub3dzIHdoYXQgaXMgYmVzdC4gQnV0CiAgICAgICAgICAgICAgICAgICAgdGhlcmUgaXMgbm8gdGVtcGxlIG9mIFJlY2tsZXNzbmVzcyBvciBvZiBTaGFtZWxlc3NuZXNzLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5PZiBKdXN0aWNlIHRvbyBhbmQgT3JkZXIgYW5kIE1vZGVzdHkgYWxsIG1lbiBoYXZlIHNocmluZXMsCiAgICAgICAgICAgICAgICAgICAgc29tZSwgdGhlIGZhaXJlc3QgYW5kIGhvbGllc3QsIGluIHRoZSB2ZXJ5IGhlYXJ0IGFuZCBzb3VsIG9mIGVhY2ggbWFuLCBhbmQKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgYnVpbHQgZm9yIHRoZSBjb21tb24gd29yc2hpcCBvZiBhbGwuIEJ1dCBub25lIGlzIHJhaXNlZCB0byBTaGFtZWxlc3NuZXNzCiAgICAgICAgICAgICAgICAgICAgb3IgQ2hpY2FuZXJ5IG9yIFBlcmp1cnkgb3IgSW5ncmF0aXR1ZGXigJRhbGwgcXVhbGl0aWVzIG9mIHRoZSBkZWZlbmRhbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IEkga25vdwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2lsbCBhdm9pZCB0aGUgc3RyYWlnaHQgYW5kIGhvbmVzdCBwYXRoIG9mIGRlZmVuY2UsIGFuZCB3aWxsIHRha2UgYQogICAgICAgICAgICAgICAgICAgIGRldmlvdXMgY291cnNlLCBhYnVzaW5nLCBzbGFuZGVyaW5nLCBhbmQgdGhyZWF0ZW5pbmcgdG8gcHJvc2VjdXRlLCBhcnJlc3QsCiAgICAgICAgICAgICAgICAgICAgaW1wcmlzb24sIGFuZCB0aGUgbGlrZS4gQnV0IGhlIHdpbGwgZmluZCBhbGwgdGhpcyBmdXRpbGUsIGlmIHlvdSBkdWx5IGF0dGVuZCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBjYXNlOyBmb3Igd2hpY2ggb2YgdGhlc2UgdHJpY2tzIGhhcyBub3QgYmVlbiBleHBvc2VkIG92ZXIgYW5kIG92ZXIgYWdhaW4/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwYXNzIG92ZXIgb3RoZXIgb2NjYXNpb25zLCBzZXZlbiB0aW1lcywKICAgICAgICAgICAgICAgICAgICBBcmlzdG9nZWl0b24sIGhhdmUgeW91IGluZGljdGVkIG1lLCB3aGVuIHlvdSBoYWQgdGFrZW4gdGhlIHBheSBvZiBQaGlsaXAncwogICAgICAgICAgICAgICAgICAgIGFnZW50cywgYW5kIHR3aWNlIHlvdSBhY2N1c2VkIG1lIGF0IG15IGF1ZGl0LiBBcyBhIG1lcmUgbW9ydGFsIEkgcGF5IG15IHJlc3BlY3RzCiAgICAgICAgICAgICAgICAgICAgdG8gTmVtZXNpcywgYW5kIEkgYW0gZGVlcGx5IGdyYXRlZnVsIGJvdGggdG8gdGhlIGdvZHMgYW5kIHRvIGFsbCB0aGUgY2l0aXplbnMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGZvciB0aGVpciBwcm90ZWN0aW9uLiBCdXQKICAgICAgICAgICAgICAgICAgICBhcyBmb3IgeW91LCBpdCB3YXMgbmV2ZXIgb25jZSBmb3VuZCB0aGF0IHlvdSBoYWQgc3Bva2VuIHRoZSB0cnV0aDsgeW91IHdlcmUKICAgICAgICAgICAgICAgICAgICBhbHdheXMgY29udmljdGVkIG9mIGNoaWNhbmVyeS4gSWYsIHRoZW4sIHRoZXNlIGdlbnRsZW1lbiBtYWtlIHRoZSBsYXdzIGludmFsaWQKICAgICAgICAgICAgICAgICAgICBieSBhY3F1aXR0aW5nIHlvdSB0b2RheSwgd2lsbCB5b3UgY29udmljdCBtZSBub3c/IE9uIHdoYXQgY2hhcmdlPyA8L3RyYW5zbGF0aW9uPg=="
translation['25.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5JIGFzayB0aGUganVyeSB0byByZWZsZWN0LiBGb3IgdHdvIHllYXJzIGhlIGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW5nIGhpcyBjbGFpbSB0byBhZGRyZXNzIHlvdSwgdGhvdWdoIGl0IGlzIGlsbGVnYWwgZm9yIGhpbSB0byBkbyBzbzsgYnV0CiAgICAgICAgICAgICAgICAgICAgaGUgc3BlYWtzIGFsbCB0aGUgc2FtZS4gQWxsIHRoYXQgdGltZSBoZSBzYXcgdGhlIFN0YXRlIGluanVyZWQgYnkgdGhlIHdyZXRjaGVkCiAgICAgICAgICAgICAgICAgICAgUGhvY2lkZXMsIGJ5IHRoZSBjb3BwZXJzbWl0aCBmcm9tIFBlaXJhZXVzLCBieSB0aGUgdGFubmVyLCBhbmQgYnkgYWxsIHRoZSBvdGhlcnMKICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIGhhcyBhY2N1c2VkIGluIHlvdXIgY291cnRzOyBidXQgaGFkIGhlIG5vIGV5ZXMgZm9yIG1lLCB0aGUgb3JhdG9yIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aG9tIGhlIHdhcyBhdCBvcGVuIHdhciwgb3IgZm9yIEx5Y3VyZ3VzLCBvciBmb3IgdGhlIG90aGVyIG9yYXRvcnMgYWJvdXQgd2hvbSBoZQogICAgICAgICAgICAgICAgICAgIHdpbGwgaGF2ZSBzbyBtdWNoIHRvIHNheSBwcmVzZW50bHk/IFlldCBlaXRoZXIgd2F5IGhlIGRlc2VydmVzIGRlYXRoOyBpbiB0aGUgb25lCiAgICAgICAgICAgICAgICAgICAgY2FzZSwgaWYgaGUgaGFkIGEgY2hhcmdlIGFnYWluc3QgdXMgdGhhdCBoZSBjb3VsZCBwcm92ZSwgYnV0IHBhc3NlZCBpdCBvdmVyIHRvCiAgICAgICAgICAgICAgICAgICAgYXNzYWlsIHByaXZhdGUgY2l0aXplbnMsIG9yIG9uIHRoZSBvdGhlciBoYW5kLCBpZiBoZSBoYXMgbm8gY2hhcmdlIGFnYWluc3QgdXMsCiAgICAgICAgICAgICAgICAgICAgYnV0IHdhbnRzIHRvIGRlY2VpdmUgYW5kIGhvb2R3aW5rIHlvdSBieSBoaXMgc3RhdGVtZW50cy4gPC90cmFuc2xhdGlvbj4="
translation['25.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5JZiB0aGVyZSByZWFsbHkgaXMgaW4gb3VyIGNpdHkgYSBtYW4gd2hvc2UgZGlzcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICBwcm9tcHRzIGhpbSBkaWxpZ2VudGx5IHRvIHNlYXJjaCBmb3Igc29tZW9uZSByZWFkeSB0byBhY2N1c2UgYW5kIGJsYWNrbWFpbAogICAgICAgICAgICAgICAgICAgIG90aGVycywgYnV0IHdobyBkb2VzIG5vdCB0cm91YmxlIGhpbXNlbGYgYWJvdXQgdGhlIGp1c3RpY2Ugb3IgaW5qdXN0aWNlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNoYXJnZXMsIGhlIGNvdWxkIG5vdCBmaW5kIGFuIGFnZW50IGxlc3MgZml0dGVkIGZvciBoaXMgcHVycG9zZSB0aGFuIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudC4gQW5kIHdoeT8gQmVjYXVzZSBvbmUgd2hvIGlzIHByZXBhcmVkIHRvIGFjY3VzZSBvdGhlcnMgYW5kIGJyaW5nIHRoZW0KICAgICAgICAgICAgICAgICAgICBhbGwgdG8gdHJpYWwsIG91Z2h0IHRvIGJlIGhpbXNlbGYgdW5pbXBlYWNoYWJsZSwgc28gdGhhdCBoaXMgdmljdGltcyBtYXkgbm90CiAgICAgICAgICAgICAgICAgICAgZXNjYXBlIHRocm91Z2ggaGlzIG93biB3aWNrZWRuZXNzLiBCdXQgbm8gb25lIGluIHRoZSBjaXR5IGhhcyBhIHJlY29yZCBvZiBtb3JlCiAgICAgICAgICAgICAgICAgICAgbnVtZXJvdXMgYW5kIG1vcmUgc2VyaW91cyBjcmltZXMgdGhhbiB0aGUgZGVmZW5kYW50LiA8L3RyYW5zbGF0aW9uPg=="
translation['25.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHdoYXQgaXMgdGhlIGRlZmVuZGFudD8KICAgICAgICAgICAgICAgICAgICDigJxIZSBpcyB0aGUgd2F0Y2ggZG9nIG9mIHRoZSBkZW1vY3JhY3ks4oCdIGNyeSBoaXMgZnJpZW5kcy4KICAgICAgICAgICAgICAgICAgICBZZXMsIGJ1dCB3aGF0IHNvcnQgb2YgZG9nPyBPbmUgdGhhdCBuZXZlciBzbmFwcyBhdCB0aG9zZSB3aG9tIGhlIGFjY3VzZXMgb2YKICAgICAgICAgICAgICAgICAgICBiZWluZyB3b2x2ZXMsIGJ1dCBoaW1zZWxmIGRldm91cnMgdGhlIHNoZWVwIGhlIHByZXRlbmRzIHRvIGd1YXJkLiBUbyB3aGljaCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBvcmF0b3JzIGhhcyBoZSBkb25lIHNvIG11Y2ggaGFybSBhcyB0byB0aGUgcHJpdmF0ZSBjaXRpemVucyBhZ2FpbnN0IHdob20gaGUKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBjb252aWN0ZWQgb2YgbW92aW5nIHVubGF3ZnVsIGRlY3JlZXM/IFdoYXQgc3RhdGVzbWFuIGhhcyBoZSBicm91Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgdHJpYWwsIHNpbmNlIGhlIGFnYWluIHRvb2sgdG8gcHVibGljIHNwZWFraW5nPyBOb3QgYSBzaW5nbGUgb25lLWJ1dCBwbGVudHkgb2YKICAgICAgICAgICAgICAgICAgICBwcml2YXRlIGNpdGl6ZW5zLiBCdXQgdGhleSBzYXkgdGhhdCBkb2dzIHdobyB0YXN0ZSBtdXR0b24gb3VnaHQgdG8gYmUgY3V0IHRvCiAgICAgICAgICAgICAgICAgICAgYml0czsgc28gdGhlIHNvb25lciBoZSBpcyBjdXQgdXAgdGhlIGJldHRlci4gPC90cmFuc2xhdGlvbj4="
translation['25.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaGUgc2VydmVzIG5vIHB1cnBvc2UgdGhhdCBoZSBjbGFpbXMgdG8gc2VydmUsIGJ1dCBoZQogICAgICAgICAgICAgICAgICAgIGhhcyB0dXJuZWQgaGlzIGF0dGVudGlvbiB0byBhbiBhYm9taW5hYmxlIGFuZCBkaXNndXN0aW5nIHRyaWNrLiBJbiB0aGUgQXNzZW1ibHkKICAgICAgICAgICAgICAgICAgICBoZSByZWNrbGVzc2x5IGFidXNlcyBhbmQgYXR0YWNrcyBhbGwgYWxpa2UsIGFuZCBmb3IgYWxsIHRoZSBtaXNyZXByZXNlbnRhdGlvbnMKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHRodXMgZm9pc3RzIHVwb24geW91IGNvbGxlY3RpdmVseSwgaGUgZ2V0cyBoaXMgcmVtdW5lcmF0aW9uIGZyb20gZWFjaCBvZgogICAgICAgICAgICAgICAgICAgIHlvdSBzZXBhcmF0ZWx5LCB3aGVuIGhlIGRlc2NlbmRzIGZyb20gdGhlIHBsYXRmb3JtLCBieSB0aHJlYXRlbmluZyBwcm9zZWN1dGlvbgogICAgICAgICAgICAgICAgICAgIGFuZCBieSBkZW1hbmRpbmcgYW5kIGV4dG9ydGluZyBtb25leS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RWRpdG9ycwogICAgICAgICAgICAgICAgICAgICAgICBjb25mZXNzIHRoZW1zZWx2ZXMgdW5hYmxlIHRvIHVuZGVyc3RhbmQgdGhlIGRyaWZ0IG9mIHRoaXMgc2VudGVuY2UuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIE5vdCBmcm9tIHRoZSBvcmF0b3JzLCB5b3UgbWF5IGJlIHN1cmU6IHRoZXkga25vdyBob3cgdG8gdGhyb3cgbXVkIGJhY2sgYXQgaGltOgogICAgICAgICAgICAgICAgICAgIGJ1dCBmcm9tIHRoZSBpbmV4cGVyaWVuY2VkIHByaXZhdGUgY2l0aXplbnMsIGFzIHRob3NlIGtub3cgd2hvIGhhdmUgZmVsdCBoaXMKICAgICAgICAgICAgICAgICAgICBibG93cy4gPC90cmFuc2xhdGlvbj4="
translation['25.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0CiAgICAgICAgICAgICAgICAgICAgcGVyaGFwcywgd2hpbGUgYWRtaXR0aW5nIHRoZSB0cnV0aCBvZiB0aGlzLCB5b3Ugd2lsbCBzYXkgdGhhdCB5b3UgY29uc2lkZXIgaGltIGEKICAgICAgICAgICAgICAgICAgICB1c2VmdWwgc2VydmFudCBvZiB0aGUgU3RhdGUsIHNvIHRoYXQgd2UgbXVzdCBvdmVybG9vayBhbGwgdGhpcyBhbmQgc3BhcmUgaGltLgogICAgICAgICAgICAgICAgICAgIE1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoZW4geW91IGhhdmUgaGFkCiAgICAgICAgICAgICAgICAgICAgcHJhY3RpY2FsIGV4cGVyaWVuY2Ugb2Ygc29tZXRoaW5nLCB5b3Ugc2hvdWxkIG5ldmVyIHRha2UgYSBtZXJlbHkgdGhlb3JldGljYWwKICAgICAgICAgICAgICAgICAgICB2aWV3IG9mIGl0LiBUaGlzIG1hbiBoYWQgbm8gZGVhbGluZ3Mgd2l0aCB5b3UgaW4gdGhlIGZpdmUgeWVhcnMgd2hlbiBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBkZXByaXZlZCBvZiB0aGUgcmlnaHQgdG8gYWRkcmVzcyB5b3UuIFdlbGwsIHdobyBpbiBhbGwgdGhhdCB0aW1lIHJlZ3JldHRlZCBoaW0/CiAgICAgICAgICAgICAgICAgICAgV2hhdCBuZWdsZWN0IG9mIHRoZSBjaXR5J3MgaW50ZXJlc3RzIGhhcyBhbnlvbmUgb2JzZXJ2ZWQgaW4gY29uc2VxdWVuY2Ugb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgYWJzZW5jZSwgb3Igd2hhdCBpbXByb3ZlbWVudCBub3cgdGhhdCBoZSBpcyBhbGxvd2VkIHRvIHNwZWFrPyBPbiB0aGUgY29udHJhcnksCiAgICAgICAgICAgICAgICAgICAgaXQgc2VlbXMgdG8gbWUgdGhhdCBhcyBsb25nIGFzIGhlIGRpZCBub3QgY29tZSBiZWZvcmUgeW91LCB0aGUgY2l0eSBoYWQgcmVzcGl0ZQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHRyb3VibGVzIHRoYXQgaGUgY2F1c2VkIHRvIGV2ZXJ5b25lLCBidXQgc2luY2UgaGUgc3RhcnRlZCBoaXMgaGFyYW5ndWVzCiAgICAgICAgICAgICAgICAgICAgYWdhaW4sIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpcyBpbiBhIHN0YXRlIG9mIHNpZWdlCiAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgZmFjdGlvdXMgYW5kIHVucnVseSBzcGVlY2hlcyB0aGF0IGhlIGRlbGl2ZXJzIGF0IGV2ZXJ5IG1lZXRpbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQXNzZW1ibHkuIDwvdHJhbnNsYXRpb24+"
translation['25.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SQogICAgICAgICAgICAgICAgICAgIHdpbGwgbm93IHRyZW5jaCB1cG9uIGEgZGFuZ2Vyb3VzIHRvcGljIGFuZCBvZmZlciBzb21lIHJlbWFya3MgdG8gdGhvc2Ugd2hvLCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGVzZSByZWFzb25zLCBhZG1pcmUgaGltLiBIb3cgc3VjaCBwZXJzb25zIG91Z2h0IHRvIGJlIHJlZ2FyZGVkLCB5b3Ugc2hhbGwKICAgICAgICAgICAgICAgICAgICBqdWRnZSBmb3IgeW91cnNlbHZlczsgSSB3aWxsIHNheSBub3RoaW5nIG15c2VsZiwgZXhjZXB0IHRoYXQgdGhleSBhcmUgbm90IHdpc2UKICAgICAgICAgICAgICAgICAgICBpbiB0YWtpbmcgaGlzIHBhcnQuIE5vdyBvZiB5b3Ugd2hvIGFyZSBoZXJlIGluIGNvdXJ0LCBJIGFzc3VtZSB0aGF0IHRoaXMgZG9lcwogICAgICAgICAgICAgICAgICAgIG5vdCBhcHBseSB0byBhbnk6IGl0IGlzIG9ubHkgZmFpciwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgYW5kIGhvbm9yYWJsZSBhbmQgcHJvcGVyIHRoYXQgSSBzaG91bGQgYm90aCBzYXkgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhpbmsgdGhhdCBvZiB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['25.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb2YgdGhlIHJlc3Qgb2Ygb3VyCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnPigJR0byBjb25maW5lIHRoZSByZXByb2FjaCB0byBhcyBmZXcgYXMgcG9zc2libGXigJRoaXMKICAgICAgICAgICAgICAgICAgICBwdXBpbCwgb3IsIGlmIHlvdSBsaWtlLCBoaXMgdGVhY2hlciwgUGhpbG9jcmF0ZXMgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxFbGV1c2lzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxFbGV1c2lzIj5FbGV1c2lzPC9wbGFjZU5hbWU+LCBpcyB0aGUgb25seSBvbmUgd2hvbSBJIGFjY291bnQgYXMKICAgICAgICAgICAgICAgICAgICBzdWNoLCBub3QgYXMgaWYgdGhlcmUgd2VyZSBub3QgbW9yZSDvvIhmb3IgSSB3b3VsZCB0aGF0IG5vIG9uZSBlbHNlIGZvdW5kCiAgICAgICAgICAgICAgICAgICAgc2F0aXNmYWN0aW9uIGluIEFyaXN0b2dlaXRvbu+8iSwgYnV0IEkgaGF2ZSBubyByaWdodCBwdWJsaWNseSB0byBicmluZyBhCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlIGFnYWluc3Qgb3RoZXIgY2l0aXplbnMgd2hpY2ggSSBzaHJpbmsgZnJvbSBicmluZ2luZyBhZ2FpbnN0IHlvdS4gTW9yZW92ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgYXJndW1lbnQsIHRob3VnaCBpdCBhcHBsaWVzIHRvIG9uZSBtYW4gYWxvbmUsIHdpbGwgaGF2ZSB0aGUgc2FtZSBmb3JjZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aWxsIG5vdAogICAgICAgICAgICAgICAgICAgIGRpc2N1c3MgdG9vIG1pbnV0ZWx5IHdoYXQgY2hhcmFjdGVyIHdlIG11c3QgYXNzaWduIHRvIGFuIGFkbWlyZXIgb2YKICAgICAgICAgICAgICAgICAgICBBcmlzdG9nZWl0b24sIGZvciBmZWFyIGxlc3QgSSBzaG91bGQgYmUgY29tbWl0dGVkIHRvIGEgbG9uZyB0aXJhZGUgb2YKICAgICAgICAgICAgICAgICAgICB2aXR1cGVyYXRpb24uIEJ1dCBvbmUgdGhpbmcgSSB3aWxsIHNheS4gSWYgQXJpc3RvZ2VpdG9uIGlzIGluIHBsYWluIGxhbmd1YWdlIGEKICAgICAgICAgICAgICAgICAgICByYXNjYWxseSBhbmQgbWFsaWNpb3VzIGJsYWNrbWFpbGVyLCB0aGUgc29ydCBvZiBtYW4gaW4gZmFjdCB0aGF0IGhlIHByb2Zlc3NlcyB0bwogICAgICAgICAgICAgICAgICAgIGJlLCB0aGVuIHlvdSBoYXZlIG15IGhlYXJ0eSBjb25zZW50LCBQaGlsb2NyYXRlcywgdG8gc3VwcG9ydCBvbmUgd2hvIHNvIGNsb3NlbHkKICAgICAgICAgICAgICAgICAgICByZXNlbWJsZXMgeW91OyBiZWNhdXNlLCBpZiBldmVyeSBvbmUgZWxzZSBkb2VzIGhpcyBkdXR5IGFuZCB1cGhvbGRzIHRoZSBsYXcsIEkKICAgICAgICAgICAgICAgICAgICBkbyBub3QgdGhpbmsgdGhhdCB5b3VyIGF0dGl0dWRlIHdpbGwgcHJvZHVjZSBhbnkgZWZmZWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['25.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgaGUgaXMgYSBqb2JiZXIgYW5kIHBlZGxhciBhbmQgcmV0YWlsLWRlYWxlciBpbgogICAgICAgICAgICAgICAgICAgIHdpY2tlZG5lc3MsIGlmIGhlIGhhcyBhbGwgYnV0IHNvbGQgYnkgc2NhbGUgYW5kIGJhbGFuY2UgZXZlcnkgYWN0aW9uIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIHdob2xlIGxpZmUsIHdoeSwgeW91IHNpbGx5IGZlbGxvdywgZG8geW91IGVnZyBoaW0gb24/IFN1cmVseSBhIGNvb2sgaGFzIG5vIHVzZQogICAgICAgICAgICAgICAgICAgIGZvciBhIGtuaWZlIHRoYXQgZG9lcyBub3QgY3V0LCBhbmQgaW4gdGhlIHNhbWUgd2F5IGEgbWFuIHdobyB3YW50cyBieSBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgZWZmb3J0cyB0byBjYXVzZSB0cm91YmxlIGFuZCBhbm5veWFuY2UgdG8gZXZlcnlib2R5IGhhcyBubyB1c2UgZm9yIGEgYmxhY2ttYWlsZXIKICAgICAgICAgICAgICAgICAgICB3aG8gaXMgcmVhZHkgdG8gc2VsbCBzdWNoIHNlcnZpY2VzLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5UaGF0LCBJCiAgICAgICAgICAgICAgICAgICAgbWF5IHRlbGwgeW91LCBpcyB0aGUgc29ydCBvZiBtYW4gdGhlIGRlZmVuZGFudCBpcywgdGhvdWdoIHlvdSBub3cgaXQgYWxyZWFkeS4KICAgICAgICAgICAgICAgICAgICBZb3UgcmVtZW1iZXIgaG93IGhlIHNvbGQgdGhlIGltcGVhY2htZW50IG9mIEhlZ2Vtb24uIFlvdSBrbm93IGhvdyBoZSB0aHJldyB1cAogICAgICAgICAgICAgICAgICAgIGhpcyBicmllZiBhZ2FpbnN0IERlbWFkZXMuIEF0IHRoZSB0cmlhbCBvZiBBZ2F0aG9uLCB0aGUgb2xpdmUtbWVyY2hhbnQsIGEgZGF5IG9yCiAgICAgICAgICAgICAgICAgICAgdHdvIGFnbywgaGUgYmVsbG93ZWQgYW5kIHJhbnRlZCBhbmQgY3JpZWQg4oCcSGEtaGEh4oCdIGFuZCB0aHJldwogICAgICAgICAgICAgICAgICAgIHRoZSBBc3NlbWJseSBpbnRvIGNvbmZ1c2lvbiwgc2F5aW5nIGl0IHdhcyBhIGNhc2UgZm9yIHRoZSByYWNrOyBhbmQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICBwb2NrZXRpbmcgc29tZSB0cmlmbGUgb3Igb3RoZXIsIHRob3VnaCBoZSB3YXMgcHJlc2VudCBhdCBoaXMgYWNxdWl0dGFsLCBoZSBrZXB0CiAgICAgICAgICAgICAgICAgICAgaGlzIG1vdXRoIHNodXQuIEhlIGhlbGQgdGhlIHRocmVhdCBvZiBpbXBlYWNobWVudCBvdmVyIERlbW9jbGVzJyBoZWFkLCBhbmQgd2hhdAogICAgICAgICAgICAgICAgICAgIGRpZCBoZSBtYWtlIG9mIGl0PyBUaGVyZSBhcmUgdGhvdXNhbmRzIG9mIG90aGVyIGNhc2VzLiBJIHNob3VsZCBmaW5kIGl0IGEgdGFzawogICAgICAgICAgICAgICAgICAgIHRvIG1lbnRpb24gdGhlbSBhbGwsIGJ1dCB5b3UsIHdobyB3ZXJlIGhpcyBqYWNrYWwsIG11c3QgaGF2ZSBub3RlcyBvZiB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHdoYXQgbWFuLCBiZSBoZSBnb29kIG9yIGJhZCwgd2FudHMgdG8KICAgICAgICAgICAgICAgICAgICBzcGFyZSBzdWNoIGEgZmVsbG93PyBXaHkgc3BhcmUgb25lIHdobyBpcyB0aGUgYmV0cmF5ZXIgb2YgdGhvc2Ugd2hvIHJlc2VtYmxlCiAgICAgICAgICAgICAgICAgICAgaGltLCBhbmQgdGhlIGZvZSwgYnkgaW5zdGluY3QgYW5kIGJ5IGluaGVyaXRhbmNlLCBvZiBnb29kIG1lbjsgdW5sZXNzIG9uZSB0aGlua3MKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBTdGF0ZSBzaG91bGQgcHJlc2VydmUsIGFzIGEgZmFybWVyIG1pZ2h0IGRvLCB0aGUgc2VlZCBhbmQgc3RvY2sgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYmxhY2ttYWlsZXIgYW5kIHJhc2NhbD8gQnV0IHRoYXQgd291bGQgYmUgYSBkaXNncmFjZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPjsgeWVzLCBieSBIZWF2ZW4hIGFuZCBJIGFjY291bnQgaXQgYW4KICAgICAgICAgICAgICAgICAgICBpbXBpZXR5IHRvby4gSSBjYW5ub3QgYmVsaWV2ZSB0aGF0IHlvdXIgYW5jZXN0b3JzIGJ1aWx0IHlvdSB0aGVzZSBsYXctY291cnRzIGFzCiAgICAgICAgICAgICAgICAgICAgYSBob3RiZWQgZm9yIHJvZ3VlcyBvZiB0aGlzIHNvcnQsIGJ1dCByYXRoZXIgdG8gZW5hYmxlIHlvdSB0byBjaGVjayBhbmQgY2hhc3Rpc2UKICAgICAgICAgICAgICAgICAgICB0aGVtLCB1bnRpbCBubyBtYW4gc2hhbGwgYWRtaXJlIG9yIGNvdmV0IHZpY2UuIDwvdHJhbnNsYXRpb24+"
translation['25.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RGVwcmF2aXR5IG1heSBwcm92ZSBhIGRpZmZpY3VsdCB0aGluZyB0bwogICAgICAgICAgICAgICAgICAgIGNoZWNrLiBXaGVuIEFyaXN0b2dlaXRvbiwgZm9yIGFja25vd2xlZGdlZCBtaXNkZWVkcywgaXMgb25seSBub3cgb24gaGlzIHRyaWFsCiAgICAgICAgICAgICAgICAgICAgYW5kIGhhcyBub3QgYmVlbiBwdXQgdG8gZGVhdGggbG9uZyBhZ28sIHdoYXQgaXMgb25lIHRvIGRvIG9yIHNheT8gSGlzIHdpY2tlZG5lc3MKICAgICAgICAgICAgICAgICAgICBoYXMgcmVhY2hlZCBzdWNoIGEgcGl0Y2ggdGhhdCBhZnRlciBpbmZvcm1hdGlvbiBoYWQgYmVlbiBsYWlkIGFnYWluc3QgaGltLCBoZQogICAgICAgICAgICAgICAgICAgIGRpZCBub3QgY2Vhc2UgdG8gYmx1c3RlciBhbmQgYmxhY2ttYWlsIGFuZCB0aHJlYXRlbjsgYW5kIGJlY2F1c2UgdGhlIGdlbmVyYWxzLAogICAgICAgICAgICAgICAgICAgIHRvIHdob20geW91IGhhdmUgZW50cnVzdGVkIHRoZSBtb3N0IGltcG9ydGFudCBpbnRlcmVzdHMsIHJlZnVzZWQgdG8gZ2l2ZSBoaW0KICAgICAgICAgICAgICAgICAgICBtb25leSwgaGUgc2FpZCB0aGF0IHRoZXkgZGlkIG5vdCBkZXNlcnZlIHRvIGJlIGFwcG9pbnRlZCBpbnNwZWN0b3JzIG9mIGxhdHJpbmVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGFmZnJvbnQgZGlkIG5vdCB0b3VjaCB0aGUKICAgICAgICAgICAgICAgICAgICBnZW5lcmFsc+KAlG5vLCBmb3IgdGhleSBjb3VsZCBoYXZlIHNpbGVuY2VkIGhpcyBhYnVzZSBieSBwYXlpbmcgaGltIGEKICAgICAgICAgICAgICAgICAgICB0cmlmbGluZyBzdW0sIGJ1dCBpdCB3YXMgYSBncm9zcyBpbnN1bHQgdG8geW91ciBhY3Rpb24gYXMgZWxlY3RvcnMgYW5kIGEgcHJvb2YKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgb3duIGRlcHJhdml0eS4gVGhlIG9mZmljaWFscyBjaG9zZW4gYnkgbG90IGhlIHdvcnJpZWQgd2l0aCBoaXMgZGVtYW5kcywKICAgICAgICAgICAgICAgICAgICBleHRvcnRpbmcgbW9uZXkgZnJvbSB0aGVtIGFuZCBzcGFyaW5nIHRoZW0gbm8gaW5zdWx0LiBBbmQgbm93IGhpcyBsYXRlc3QgZXhwbG9pdAogICAgICAgICAgICAgICAgICAgIGlzIHRvIHN0aXIgdXAgY29uZnVzaW9uIGFuZCBkaXNzZW5zaW9uIGFtb25nIHVzIGFsbCBieSBwdWJsaXNoaW5nIGZhbHNlIGxldHRlcnMsCiAgICAgICAgICAgICAgICAgICAgZm9yIGhlIHdhcyBib3JuIHRvIGJlIHRoZSBiYW5lIG9mIGFsbCBtZW4sIGFuZCBoaXMgY2hhcmFjdGVyIGlzIGNsZWFybHkgc2hvd24gYnkKICAgICAgICAgICAgICAgICAgICBoaXMgbGlmZS4gPC90cmFuc2xhdGlvbj4="
translation['25.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SnVzdAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyLiBUaGVyZSBhcmUgc29tZXRoaW5nIGxpa2UgdHdlbnR5IHRob3VzYW5kIGNpdGl6ZW5zIGluIGFsbC4gRXZlcnkgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgb25lIG9mIHRoZW0gZnJlcXVlbnRzIHRoZSBtYXJrZXQtcGxhY2Ugb24gc29tZSBidXNpbmVzcyDvvIh5b3UgbWF5IGJlCiAgICAgICAgICAgICAgICAgICAgc3VyZe+8iSwgZWl0aGVyIHB1YmxpYyBvciBwcml2YXRlLiBOb3Qgc28gdGhlIGRlZmVuZGFudC4gSGUgY2Fubm90IHBvaW50CiAgICAgICAgICAgICAgICAgICAgdG8gYW55IGRlY2VudCBvciBob25vcmFibGUgYnVzaW5lc3MgaW4gd2hpY2ggaGUgaGFzIHNwZW50IGhpcyBsaWZlOyBoZSBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIHVzZSBoaXMgdGFsZW50cyBpbiB0aGUgc2VydmljZSBvZiB0aGUgU3RhdGU7IGhlIGlzIG5vdCBlbmdhZ2VkIGluIGEgcHJvZmVzc2lvbgogICAgICAgICAgICAgICAgICAgIG9yIGluIGFncmljdWx0dXJlIG9yIGluIGFueSBvdGhlciBidXNpbmVzczsgaGUgdGFrZXMgbm8gcGFydCBpbiBhbnkgY2hhcml0YWJsZQogICAgICAgICAgICAgICAgICAgIG9yIHNvY2lhbCBvcmdhbml6YXRpb246IDwvdHJhbnNsYXRpb24+"
translation['25.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgaGUgbWFrZXMgaGlzIHdheQogICAgICAgICAgICAgICAgICAgIHRocm91Z2ggdGhlIG1hcmtldC1wbGFjZSBsaWtlIGEgc25ha2Ugb3IgYSBzY29ycGlvbiB3aXRoIHN0aW5nIGVyZWN0LCBkYXJ0aW5nCiAgICAgICAgICAgICAgICAgICAgaGl0aGVyIGFuZCB0aGl0aGVyLCBvbiB0aGUgbG9vay1vdXQgZm9yIHNvbWVvbmUgb24gd2hvbSBoZSBjYW4gY2FsbCBkb3duCiAgICAgICAgICAgICAgICAgICAgZGlzYXN0ZXIgb3IgY2FsdW1ueSBvciBtaXNjaGllZiBvZiBzb21lIHNvcnQsIG9yIHdob20gaGUgY2FuIHRlcnJpZnkgdGlsbCBoZQogICAgICAgICAgICAgICAgICAgIGV4dG9ydHMgbW9uZXkgZnJvbSBoaW0uIEhlIG5ldmVyIGNhbGxzIGF0IHRoZSBiYXJiZXIncyBvciB0aGUgcGVyZnVtZXIncyBvciBhbnkKICAgICAgICAgICAgICAgICAgICBvdGhlciBzaG9wIGluIHRoZSBjaXR5LiBIZSBpcyBpbXBsYWNhYmxlLCByZXN0bGVzcywgdW5zb2NpYWJsZTsgaGUgaGFzIG5vCiAgICAgICAgICAgICAgICAgICAgY2hhcml0eSwgbm8gZnJpZW5kbGluZXNzLCBub25lIG9mIHRoZSBmZWVsaW5ncyBvZiBhIGRlY2VudCBodW1hbiBiZWluZzsgaGUgaXMKICAgICAgICAgICAgICAgICAgICBhdHRlbmRlZCBieSB0aG9zZSBjb21wYW5pb25zIHdob20gcGFpbnRlcnMgY291cGxlIHdpdGggdGhlIGRhbW5lZCBzb3VscyBpbgogICAgICAgICAgICAgICAgICAgIGhlbGzigJRieSBNYWxlZGljdGlvbiwgRXZpbC1zcGVha2luZywgRW52eSwgRmFjdGlvbiwgRGlzc2Vuc2lvbi4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiwgdGhlbiwgd2hvIGlzIGxpa2VseSB0byBmaW5kIG5vCiAgICAgICAgICAgICAgICAgICAgbWVyY3kgZnJvbSB0aGUgcG93ZXJzIGJlbG93LCBidXQgdG8gYmUgdGhydXN0IG91dCBhbW9uZyB0aGUgaW1waW91cyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwcmF2aXR5IG9mIGhpcyBsaWZl4oCUdGhpcyBtYW4sIHdoZW4geW91IGhhdmUgY2F1Z2h0IGhpbSBkb2luZyB3cm9uZywKICAgICAgICAgICAgICAgICAgICB3aWxsIHlvdSBub3Qgb25seSBkZWNsaW5lIHRvIHB1bmlzaCwgYnV0IGFjdHVhbGx5IGRpc21pc3MgaGltIHdpdGggZ3JlYXRlcgogICAgICAgICAgICAgICAgICAgIHJld2FyZHMgdGhhbiB5b3Ugd291bGQgYmVzdG93IG9uIHlvdXIgYmVuZWZhY3RvcnM/IEZvciB3aGF0IGRlZmF1bHRlciB0byB0aGUKICAgICAgICAgICAgICAgICAgICB0cmVhc3VyeSBoYXZlIHlvdSBldmVyIGFsbG93ZWQgdG8gZW5qb3kgZnVsbCByaWdodHMsIHVubGVzcyBoZSBwYWlkIGhpcyBkZWJ0PwogICAgICAgICAgICAgICAgICAgIE5vdCBvbmUhIFRoZW4gZG8gbm90IGdyYW50IHRoaXMgZmF2b3VyIHRvIHRoZSBkZWZlbmRhbnQgbm93LCBidXQgcHVuaXNoIGhpbSBhbmQKICAgICAgICAgICAgICAgICAgICBtYWtlIGhpbSBhIHdhcm5pbmcgdG8gdGhlIG90aGVycy4gPC90cmFuc2xhdGlvbj4="
translation['25.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHNlcXVlbCB0b28sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGlzIHdvcnRoIGhlYXJpbmcuIFdoYXQgeW91IGhhdmUganVzdCBoZWFyZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgTHljdXJndXMgaXMgc2VyaW91cywgb3IsIHJhdGhlciwgaW1wb3NzaWJsZSB0byBleGFnZ2VyYXRlLCBidXQgdGhlIHJlc3Qgd2lsbCBiZQogICAgICAgICAgICAgICAgICAgIGZvdW5kIHRvIHJpdmFsIGl0IGFuZCB0byBiZSBvZiB0aGUgc2FtZSBjaGFyYWN0ZXIuIE5vdCBjb250ZW50IHdpdGggYWJhbmRvbmluZwogICAgICAgICAgICAgICAgICAgIGhpcyBmYXRoZXIgaW4gcHJpc29uIHdoZW4gaGUgcXVpdHRlZCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEVyZXRyaWEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEVyZXRyaWEiPkVyZXRyaWE8L3BsYWNlTmFtZT4sIGFzIHlvdSBoYXZlIGhlYXJkIGZyb20gUGhhZWRydXMsIHRoaXMgdW5uYXR1cmFsCiAgICAgICAgICAgICAgICAgICAgcnVmZmlhbiByZWZ1c2VkIHRvIGJ1cnkgaGltIHdoZW4gaGUgZGllZCwgYW5kIHdvdWxkIG5vdCByZWZ1bmQgdGhlIGV4cGVuc2VzIHRvCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGRpZCBidXJ5IGhpbSwgYnV0IGFjdHVhbGx5IGJyb3VnaHQgYSBsYXctc3VpdCBhZ2FpbnN0IHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['25.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgY29udGVudCB3aXRoIG9mZmVyaW5nIHZpb2xlbmNlIHRvIGhpcyBtb3RoZXIsIGFzCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUganVzdCBoZWFyZCBmcm9tIHdpdG5lc3NlcywgaGUgYWN0dWFsbHkgc29sZCBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgc2lzdGVy4oCUbm90IGluZGVlZCBhIHNpc3RlciBieSB0aGUgc2FtZSBmYXRoZXIsIGJ1dCBoaXMgbW90aGVyJ3MKICAgICAgICAgICAgICAgICAgICBkYXVnaHRlciwgd2hhdGV2ZXIgaGVyIHBhcmVudGFnZSDvvIhmb3IgSSBwYXNzIHRoYXQKICAgICAgICAgICAgICAgICAgICBiee+8ieKAlHllcywgc29sZCBoaXMgc2lzdGVyIGZvciBleHBvcnQsIGFzIGlzIHN0YXRlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBpbmRpY3RtZW50IG9mIHRoZSBhY3Rpb24gd2hpY2ggd2FzIGJyb3VnaHQgYWdhaW5zdCBoaW0gb24gdGhlc2UgZ3JvdW5kcyBieSBoaXMKICAgICAgICAgICAgICAgICAgICBnb29kIGJyb3RoZXIgaGVyZSwgd2hvIGluIHRoZSBwcmVzZW50IGFjdGlvbiB3aWxsIGhlbHAgdG8gZGVmZW5kIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['25.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWxsIHRoaXMgaXMgYmFkCiAgICAgICAgICAgICAgICAgICAgZW5vdWdoLCBIZWF2ZW4ga25vd3M7IGJ1dCB5b3Ugc2hhbGwgaGVhciBhbm90aGVyIGRyZWFkZnVsIHBlcmZvcm1hbmNlLiBPbiB0aGUKICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbiB3aGVuIGhlIGJyb2tlIHByaXNvbiBhbmQgcmFuIGF3YXksIGhlIHZpc2l0ZWQgYSBjZXJ0YWluIHdvbWFuIG5hbWVkCiAgICAgICAgICAgICAgICAgICAgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPlpvYmlhPC9zdXJuYW1lPjwvcGVyc05hbWU+LCB3aXRoIHdob20gaGUgaGFkIHByb2JhYmx5CiAgICAgICAgICAgICAgICAgICAgY29oYWJpdGVkIGF0IG9uZSB0aW1lLiBTaGUga2VwdCBoaW0gaW4gc2FmZSBoaWRpbmcgZHVyaW5nIHRoZSBmaXJzdCBmZXcgZGF5cywKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSBwb2xpY2Ugd2VyZSBzZWFyY2hpbmcgYW5kIGFkdmVydGlzaW5nIGZvciBoaW0sIGFuZCB0aGVuIHNoZSBnYXZlIGhpbQogICAgICAgICAgICAgICAgICAgIGVpZ2h0IGRyYWNobWFzIGpvdXJuZXktbW9uZXkgYW5kIGEgdHVuaWMgYW5kIGEgY2xvYWsgYW5kIHBhY2tlZCBoaW0gb2ZmIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5ab2JpYTwvc3VybmFtZT48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE1lZ2FyYSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4uIDwvdHJhbnNsYXRpb24+"
translation['25.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoaXMgc2FtZSB3b21hbiwgd2hvIGhhZCBiZWVuIHN1Y2ggYSBiZW5lZmFjdHJlc3MsCiAgICAgICAgICAgICAgICAgICAgY29tcGxhaW5lZCB0byBoaW0sIHNlZWluZyB0aGF0IGhlIHdhcyBnaXZpbmcgaGltc2VsZiBhaXJzIGFuZCBtYWtpbmcgYSBncmVhdAogICAgICAgICAgICAgICAgICAgIHNob3cgaGVyZSBhbW9uZyB5b3UsIGFuZCB3aGVuIHNoZSByZW1pbmRlZCBoaW0gb2YgaGVyIHNlcnZpY2VzIGFuZCBjbGFpbWVkIHNvbWUKICAgICAgICAgICAgICAgICAgICByZWNvbXBlbnNlLCBvbiB0aGUgZmlyc3Qgb2NjYXNpb24gaGUgY3VmZmVkIGhlciBhbmQgdGhyZWF0ZW5lZCBoZXIgYW5kIHR1cm5lZAogICAgICAgICAgICAgICAgICAgIGhlciBvdXQgb2YgaGlzIGhvdXNlLiBCdXQgd2hlbiBzaGUgcGVyc2lzdGVkIGFuZCwgd29tYW4tbGlrZSwgd2VudCBhYm91dCBhbW9uZwogICAgICAgICAgICAgICAgICAgIGhlciBhY3F1YWludGFuY2Ugd2l0aCBjb21wbGFpbnRzIG9mIGhpcyBjb25kdWN0LCBoZSBzZWl6ZWQgaGVyIHdpdGggaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGhhbmRzIGFuZCBkcmFnZ2VkIGhlciBvZmYgdG8gdGhlIGF1Y3Rpb24tcm9vbSBhdCB0aGUgYWxpZW5zJyByZWdpc3RyeSwgYW5kIGlmCiAgICAgICAgICAgICAgICAgICAgaGVyIHRheCBoYWQgbm90IGhhcHBlbmVkIHRvIGJlIGR1bHkgcGFpZCwgc2hlIHdvdWxkIGhhdmUgYmVlbiBwdXQgdXAgZm9yIHNhbGUsCiAgICAgICAgICAgICAgICAgICAgdGhhbmtzIHRvIHRoaXMgbWFuIHdobyBvd2VkIGhpcyBzYWZldHkgdG8gaGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwcm92ZSB0aGUgdHJ1dGggb2YgdGhpcyBzdGF0ZW1lbnQsIHBsZWFzZSBjYWxsIHRoZSBtYW4gd2hvIGJ1cmllZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQncyBmYXRoZXIgd2l0aG91dCBwYXltZW50LCBhbmQgYWxzbyB0aGUgYXJiaXRyYXRvciBpbiB0aGUgYWN0aW9uIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgdGhlIHdpdG5lc3MgaGVyZSBpbiBjb3VydCBicm91Z2h0IGFnYWluc3QgaGltIGZvciB0aGUgc2FsZSBvZiBoaXMgc2lzdGVyLCBhbmQKICAgICAgICAgICAgICAgICAgICBwcm9kdWNlIHRoZSBpbmRpY3RtZW50LiBCdXQgZmlyc3Qgb2YgYWxsIHBsZWFzZSBzdW1tb24gdGhlIHByb3RlY3RvciBvZiBab2JpYSwKICAgICAgICAgICAgICAgICAgICB3aG8gZ2F2ZSBoaW0gc2hlbHRlciwgYW5kIHRoZSBzYWxlLWNvbW1pc3Npb25lcnMgYmVmb3JlIHdob20gaGUgY2FycmllZCBoZXIuIFlvdQogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMganVzdCBub3cgZXhwcmVzc2VkIHlvdXIgaW5kaWduYXRpb24gYXQgaGlzIGFjY3VzaW5nIHRoZSBtYW4gd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dGVkIHRvd2FyZHMgaGlzIGRlZmVuY2UuIEF0aGVuaWFucywgaGUgaXMgYW4gdW5jbGVhbiBiZWFzdDsgaGlzIHRvdWNoIGlzCiAgICAgICAgICAgICAgICAgICAgcG9sbHV0aW9uLiBSZWFkIHRoZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdCBwZW5hbHR5IGlzCiAgICAgICAgICAgICAgICAgICAgYWRlcXVhdGUgZm9yIGEgbWFuIHdobyBoYXMgY29tbWl0dGVkIHN1Y2ggb2ZmZW5jZXM/IFdoYXQgcmV0cmlidXRpb24gZG9lcyBoZQogICAgICAgICAgICAgICAgICAgIGRlc2VydmU/IFRvIG15IHRoaW5raW5nIGRlYXRoIGlzIHRvbyBsaWdodCBhIHNlbnRlbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T25lIG1vcmUgaW5zdGFuY2UsIHRoZW4sIG9mCiAgICAgICAgICAgICAgICAgICAgaGlzIHByaXZhdGUgY3JpbWVzLCBhbmQgSSB3aWxsIHBhc3Mgb3ZlciB0aGUgcmVzdC4gQmVmb3JlIEFyaXN0b2dlaXRvbiB3YXMKICAgICAgICAgICAgICAgICAgICByZWxlYXNlZCwgYSBtYW4gb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxUYW5hZ3JhIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxUYW5hZ3JhIj5UYW5hZ3JhPC9wbGFjZU5hbWU+IHdhcwogICAgICAgICAgICAgICAgICAgIHRocm93biBpbnRvIHRoZSBwcmlzb24gdW50aWwgaGUgY291bGQgZmluZCBiYWlsLiBBcmlzdG9nZWl0b24gYWNjb3N0cyBoaW0gYW5kLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIGNoYXR0aW5nIG9uIHNvbWUgdG9waWMgb3Igb3RoZXIsIGZpbGNoZXMgdGhlIHBvY2tldC1ib29rIHRoYXQgaGUgaGFkIG9uCiAgICAgICAgICAgICAgICAgICAgaGltOyBhbmQgd2hlbiB0aGUgbWFuIGNoYXJnZWQgaGltIHdpdGggdGhlIHRoZWZ0IGFuZCBtYWRlIGEgdG8tZG8gYWJvdXQgaXQsCiAgICAgICAgICAgICAgICAgICAgc2F5aW5nIHRoYXQgbm8gb25lIGVsc2UgY291bGQgaGF2ZSB0YWtlbiBpdCwgaGUgc28gZmFyIGZvcmdvdCBhbGwgZGVjZW5jeSB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgdHJpZWQgdG8gc3RyaWtlIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['25.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIFRhbmFncmFuLCBhCiAgICAgICAgICAgICAgICAgICAgZnJlc2gtY2F1Z2h0IGZpc2gsIHdhcyBnZXR0aW5nIHRoZSBiZXR0ZXIgb2YgdGhlIGRlZmVuZGFudCwgd2hvIHdhcyB0aG9yb3VnaGx5CiAgICAgICAgICAgICAgICAgICAgcGlja2xlZCwgaGF2aW5nIGJlZW4gbG9uZyBpbiBqYWlsLiBTbyB3aGVuIGl0IGNhbWUgdG8gdGhpcywgaGUgc3dhbGxvd3MgdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgbWFuJ3Mgbm9zZS4gVGhlbiB0aGUgdW5mb3J0dW5hdGUgdmljdGltIG9mIHRoaXMgb3V0cmFnZSBhYmFuZG9uZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgc2VhcmNoIGZvciBoaXMgcG9ja2V0LWJvb2ssIHdoaWNoIHdhcyBhZnRlcndhcmRzIGZvdW5kIGluIGEgY2hlc3Qgb2Ygd2hpY2ggdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IHBvc3Nlc3NlZCB0aGUga2V5LiBBZnRlciB0aGF0IHRoZSBpbm1hdGVzIG9mIHRoZSBwcmlzb24gcGFzc2VkIGEKICAgICAgICAgICAgICAgICAgICByZXNvbHV0aW9uIG5vdCB0byBzaGFyZSBmaXJlIG9yIGxpZ2h0LCBmb29kIG9yIGRyaW5rIHdpdGggaGltLCBub3QgdG8gcmVjZWl2ZQogICAgICAgICAgICAgICAgICAgIGFueXRoaW5nIGZyb20gaGltLCBub3QgdG8gZ2l2ZSBoaW0gYW55dGhpbmcuIDwvdHJhbnNsYXRpb24+"
translation['25.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5UbyBwcm92ZSB0aGUgdHJ1dGggb2YgbXkgc3RhdGVtZW50cywgcGxlYXNlIGNhbGwgdGhlIG1hbiB3aG9zZSBub3NlIHRoaXMKICAgICAgICAgICAgICAgICAgICBtb25zdGVyIGJpdCBvZmYgYW5kIHN3YWxsb3dlZC48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT5XaGF0IGEgZmluZSBwZXJmb3JtYW5jZSBmb3IgeW91ciBwb3B1bGFyIG9yYXRvciEgV2hhdCBhIHByaXZpbGVnZSB0bwogICAgICAgICAgICAgICAgICAgIGhlYXIgd29yZHMgb2Ygd2lzZG9tIGZyb20gYSBtYW4gd2l0aCBzdWNoIGEgcmVjb3JkIGFzIHRoaXMhIE5vdyByZWFkIGFsc28gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlY2lvdXMgcmVzb2x1dGlvbiB0aGF0IHdhcyBwYXNzZWQgYWJvdXQgaGltLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IlJlc29sdXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZXNvbHV0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlc29sdXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXJlIHlvdSBub3QKICAgICAgICAgICAgICAgICAgICBhc2hhbWVkIHRoZW4sIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGlmIHRoZQogICAgICAgICAgICAgICAgICAgIG1lbiB3aG8gaGFkIGJlZW4gdGhyb3duIGludG8gcHJpc29uIGZvciB2aWxsYWlueSBhbmQgdmljZSB0aG91Z2h0IGhpbSBzbyBtdWNoCiAgICAgICAgICAgICAgICAgICAgbW9yZSB2aWxsYWlub3VzIHRoYW4gdGhlbSBzZWx2ZXMgdGhhdCB0aGV5IGZvcmJhZGUgYWxsIGludGVyY291cnNlIHdpdGggaGltLAogICAgICAgICAgICAgICAgICAgIHdoaWxlIHlvdSBhcmUgcmVhZHkgdG8gYWRtaXQgaGltIHRvIGludGVyY291cnNlIHdpdGggeW91cnNlbHZlcywgdGhvdWdoIHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgaGF2ZSBwbGFjZWQgaGltIG91dHNpZGUgdGhlIHBhbGUgb2YgdGhlIGNvbnN0aXR1dGlvbj8gV2hhdCBkaWQgeW91IGZpbmQgdG8KICAgICAgICAgICAgICAgICAgICBjb21tZW5kIGluIGhpcyBsaWZlIG9yIGNvbmR1Y3Q/IFdoaWNoIG9mIGFsbCBoaXMgYWN0aW9ucyBoYXMgZmFpbGVkIHRvIG1vdmUgeW91cgogICAgICAgICAgICAgICAgICAgIGluZGlnbmF0aW9uPyBJcyBoZSBub3QgaW1waW91cywgYmxvb2QtdGhpcnN0eSwgdW5jbGVhbiwgYW5kIGEgYmxhY2sgbWFpbGVyPwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QW5kIHlldCwgaW4KICAgICAgICAgICAgICAgICAgICBzcGl0ZSBvZiBoaXMgcGVyZm9ybWFuY2VzIGFuZCBoaXMgY2hhcmFjdGVyLCBoZSBtaXNzZXMgbm8gb3Bwb3J0dW5pdHkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgQXNzZW1ibHkgb2YgYmVsbG93aW5nLCDigJxJLCBvbmx5IEksIGFtIHlvdXIgc2luY2VyZSB3ZWxsLXdpc2hlci4gQWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugb3RoZXJzIGFyZSBpbiBhIGNhYmFsLiBZb3UgYXJlIGJldHJheWVkLiBNeSBwYXRyaW90aXNtIGlzIGFsbCB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIGxlZnQu4oCdIEkgc2hvdWxkIGxpa2UgdG8gZXhhbWluZSB0aGUgc291cmNlIGFuZCBvcmlnaW4gb2YgdGhpcyBncmVhdAogICAgICAgICAgICAgICAgICAgIGFuZCB3b25kZXJmdWwgcGF0cmlvdGlzbSBvZiBoaXMsIHNvIHRoYXQsIGlmIGl0IGlzIGFzIGhlIHNheXMsIHlvdSBtYXkgdHJ1c3QgaXQKICAgICAgICAgICAgICAgICAgICBhbmQgYmVuZWZpdCBieSBpdDsgYnV0IGlmIG5vdCwgdGhhdCB5b3UgbWF5IGJlIG9uIHlvdXIgZ3VhcmQuIDwvdHJhbnNsYXRpb24+"
translation['25.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5CZWNhdXNlIHlvdSBjb25kZW1uZWQgaGlzIGZhdGhlciB0byBkZWF0aCBhbmQgc29sZCBoaXMKICAgICAgICAgICAgICAgICAgICBtb3RoZXIgd2hlbiBzaGUgd2FzIGZvdW5kIGd1aWx0eSBvZiBkZWZyYXVkaW5nIGhlciBlbWFuY2lwYXRvciwgZG8geW91IHN1cHBvc2UKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoYXQgbWFrZXMgaGltIHdlbGwtZGlzcG9zZWQgdG8geW91PyBCeSBaZXVzIGFuZCBhbGwgdGhlIGdvZHMsIHRoYXQgaXMKICAgICAgICAgICAgICAgICAgICBhYnN1cmQuIEZvciBpZiBoZSBpcyB3ZWxsLWRpc3Bvc2VkIHRvd2FyZHMgZmF0aGVyIGFuZCBtb3RoZXIsIGFuZCBzbyBvYnNlcnZlcwogICAgICAgICAgICAgICAgICAgIHRoZSBncmVhdCBsYXcgb2YgbmF0dXJlLCB3aGljaCBpcyBsYWlkIGRvd24gYWxpa2UgZm9yIG1hbiBhbmQgYmVhc3QsIHRoYXQgYWxsCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIGxvdmUgdGhlaXIgcGFyZW50cywgPC90cmFuc2xhdGlvbj4="
translation['25.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz50aGVuIGhlIG11c3QKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IGJlIGlsbC1kaXNwb3NlZCB0byB0aG9zZSB3aG8gaGF2ZSBkZXN0cm95ZWQgdGhlbSBhbmQgdG8gdGhlaXIgbGF3cyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVpciBjb25zdGl0dXRpb24uIEJ1dCBpZiBoZSBoYXMgbm8gcmVnYXJkIGZvciB0aGVzZSB0aGluZ3MsIEkgc2hvdWxkIGxpa2UgdG8KICAgICAgICAgICAgICAgICAgICBrbm93IHdobyB0aGF0IHNlZXMgaG93IGhlIGhhcyByZW5vdW5jZWQgYWxsIGFmZmVjdGlvbiBmb3IgaGlzIHBhcmVudHMsIGNhbgogICAgICAgICAgICAgICAgICAgIGJlbGlldmUgaW4gaGlzIHByZXRlbmRlZCB6ZWFsIGZvciB0aGUgcGVvcGxlOyBmb3IgdGhlIG1hbiB3aG8gbmVnbGVjdHMgaGlzCiAgICAgICAgICAgICAgICAgICAgcGFyZW50cyBJIHJlZ2FyZCBhcyB1bndvcnRoeSBvZiB0cnVzdCBhbmQgaGF0ZWZ1bCBhbGlrZSB0byBnb2RzIGFuZCBtZW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSSBzaGFsbCBiZSB0b2xkIGl0IGlzIGJlY2F1c2UgeW91CiAgICAgICAgICAgICAgICAgICAgY29uZGVtbmVkIGhpbSBvbiBpbmZvcm1hdGlvbiBsYWlkIGFuZCB0d2ljZSBwdXQgaGltIGFuZCBoaXMgYnJvdGhlciBpbnRvIHByaXNvbjsKICAgICAgICAgICAgICAgICAgICBpdCBpcyBmb3IgdGhpcyByZWFzb24gdGhhdCBoZSBpcyB5b3VyIHdlbGwtd2lzaGVyLiBCdXQgdGhhdCB0b28gaXMgcmlkaWN1bG91cy4KICAgICAgICAgICAgICAgICAgICBPciBiZWNhdXNlIHlvdSBkaXNxdWFsaWZpZWQgaGltIGZvciB0aGUgb2ZmaWNlIHRvIHdoaWNoIGhlIGhhZCBiZWVuIGFsbG90dGVkPyBPcgogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgeW91IGZvdW5kIGhpbSBndWlsdHkgb2YgYSBicmVhY2ggb2YgdGhlIGNvbnN0aXR1dGlvbj8gT3IgYmVjYXVzZSB5b3UKICAgICAgICAgICAgICAgICAgICBmaW5lZCBoaW0gdGVuIHRhbGVudHM/IE9yIGJlY2F1c2UgeW91IGhhYml0dWFsbHkgcG9pbnQgdGhlIGZpbmdlciBvZiBzY29ybiBhdAogICAgICAgICAgICAgICAgICAgIGhpbSBhcyB0aGUgdmlsZXN0IG9mIGFsbCBtZW4gaW4gdGhlIHdvcmxkPyA8L3RyYW5zbGF0aW9uPg=="
translation['25.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5PcgogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UsIGFzIGxvbmcgYXMgdGhlIHByZXNlbnQgbGF3cyBhbmQgY29uc3RpdHV0aW9uIHN0YW5kLCBoZSBjYW5ub3QgY2xlYXIKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIG9mIHRoZXNlIHJlcHJvYWNoZXM/IFRoZW4gd2h5IGlzIGhlIHdlbGwtZGlzcG9zZWQgdG8geW91PyBJdCBpcyBiZWNhdXNlLAogICAgICAgICAgICAgICAgICAgIGluIGhpcyBvd24gd29yZHMsIGhlIGlzIGltcHVkZW50LiBXaHkgaXMgdGhlIGltcHVkZW50IG1hbiBzbyBjYWxsZWQgc2F2ZQogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UsIGJlaW5nIGxvc3QgdG8gYSBzZW5zZSBvZiBzaGFtZSwgaGUgZGFyZXMgdG8gc3RhdGUgd2hhdCBpcyBub3QsIGFuZAogICAgICAgICAgICAgICAgICAgIG5ldmVyIHdpbGwgYmUsIHRydWU/IEFuZCB0aGF0IGlzIHByZWNpc2VseSB3aGF0IHRoZSBkZWZlbmRhbnQgZG9lcy4gPC90cmFuc2xhdGlvbj4="
translation['25.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoZXJlIGFyZSBzb21lCiAgICAgICAgICAgICAgICAgICAgZmFjdHMgYWJvdXQgdGhlIGluZm9ybWF0aW9uIGxhaWQgYWdhaW5zdCBoaW0gd2hpY2ggTHljdXJndXMgc2VlbXMgdG8gaGF2ZSBwYXNzZWQKICAgICAgICAgICAgICAgICAgICBvdmVyLCBidXQgd2hpY2ggSSBoYWQgYmV0dGVyIGxheSBiZWZvcmUgeW91OyBmb3IgSSB0aGluayB5b3Ugc2hvdWxkIGV4YW1pbmUgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50IGFuZCB0aGUgcmlnaHRzIG9mIHRoZSBwcmVzZW50IGNhc2UgYXMgY2FyZWZ1bGx5IGFzIHlvdSB3b3VsZAogICAgICAgICAgICAgICAgICAgIHNjcnV0aW5pemUgYSBwcml2YXRlIGRlYnQuIFN1cHBvc2UgdGhlbiB0aGF0IEEgYWNjdXNlZCBCIG9mIG93aW5nIGhpbSBtb25leSwgYW5kCiAgICAgICAgICAgICAgICAgICAgQiBkZW5pZWQgaXQuIElmIHRoZSByZWdpc3RlcmVkIHRlcm1zIG9mIHRoZSBsb2FuIHdlcmUgc3RpbGwgdG8gYmUgcmVhZCwgb3IgaWYKICAgICAgICAgICAgICAgICAgICB0aGUgcGlsbGFycyB3aGljaCBtYXJrZWQgdGhlIG1vcnRnYWdlZCBwcm9wZXJ0eSB3ZXJlIHN0aWxsIHN0YW5kaW5nLCB5b3Ugd291bGQKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IHJlZ2FyZCBhcyBpbXB1ZGVudCB0aGUgbWFuIHdobyBkZW5pZWQgdGhlIHRyYW5zYWN0aW9uOyBidXQgaWYgaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgc2hvd24gdGhhdCB0aGVzZSBwcm9vZnMgbm8gbG9uZ2VyIGV4aXN0ZWQsIHRoZW4geW91IHdvdWxkIHJlZ2FyZCB0aGUgYWNjdXNlciBhcwogICAgICAgICAgICAgICAgICAgIGltcHVkZW50LiBUaGF0IGlzIG5hdHVyYWwuIDwvdHJhbnNsYXRpb24+"
translation['25.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCBvZgogICAgICAgICAgICAgICAgICAgIEFyaXN0b2dlaXRvbidzIGRlYnQgdG8gdGhlIFN0YXRlIHRoZSB0ZXJtcyBzdGlsbCBleGlzdCwgbmFtZWx5IHRoZSBsYXdzIHVuZGVyCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggYWxsIGRlZmF1bHRlcnMgYXJlIHJlZ2lzdGVyZWQ7IGFuZCB0aGUgcGlsbGFyIGlzIHRoZSB3b29kZW4gdGFibGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3IGRlcG9zaXRlZCBpbiB0aGUgdGVtcGxlIG9mIHRoZSBHb2RkZXNzLiBOb3cgaWYgdGhlc2UgaGF2ZSBiZWVuIGRlc3Ryb3llZCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGUgZGVidCB3aXBlZCBvdXQsIHdlIGFyZSB0YWxraW5nIG5vbnNlbnNlLCBvciByYXRoZXIgdGVsbGluZyBsaWVzOyBidXQgaWYgdGhleQogICAgICAgICAgICAgICAgICAgIGFyZSBzdGlsbCBpbiBleGlzdGVuY2UgYW5kIHdpbGwgcmVtYWluIHZhbGlkIHVudGlsIGhlIHBheXMgaGlzIGRlYnQsIHRoZW4gdGhlcmUKICAgICAgICAgICAgICAgICAgICBpcyBubyB0cnV0aCBpbiBoaXMgcGxlYSwgYnV0IGhlIGlzIGNvbW1pdHRpbmcgYSBzZXJpb3VzIGNyaW1lIGluIHRyeWluZyB0bwogICAgICAgICAgICAgICAgICAgIHN1cHByZXNzIHRoZSByaWdodHMgb2YgdGhlIFN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgcG9pbnQgdG8gYmUgYXJndWVkIGFuZCBkZWNpZGVkIGlzIG5vdCB3aGV0aGVyIGFsbCBoaXMgZGVidHMgYXJlIHVucGFpZCwgYnV0CiAgICAgICAgICAgICAgICAgICAgd2hldGhlciBoZSBpcyBzdGlsbCBpbiBkZWJ0LiBPdGhlcndpc2UgaXQgd291bGQgYmUgaGFyZCBvbiB0aG9zZSB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXJlZCBmb3IgYSBkZWJ0IG9mIG9uZSBkcmFjaG1hLCBpZiB0aGVpciBpbmRlYnRlZG5lc3MgaXMgdG8gdGVsbCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlbSwgYmVjYXVzZSB0aGV5IGhhdmUgZG9uZSBzb21lIHRyaWZsaW5nIHdyb25nIG9yIGV2ZW4gbm8gd3JvbmcgYXQgYWxsLAogICAgICAgICAgICAgICAgICAgIHdoZXJlYXMgaWYgYSBtYW4gaGFzIGNvbW1pdHRlZCBzZXJpb3VzIHdyb25ncywgaGUgaXMgdG8gcmVnYWluIGhpcyBjaXZpYyByaWdodHMKICAgICAgICAgICAgICAgICAgICBieSBwYXlpbmcgb25lIG9yIHR3byBpbnN0YWxtZW50cy4gTW9yZW92ZXIsIHRoZXJlIGFyZSB0aHJlZSBkaXN0aW5jdCBkZWJ0cwogICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWQgYW5kIGZvcm1pbmcgdGhlIGdyb3VuZCBvZiB0aGUgaW5mb3JtYXRpb24uIFR3byBBcmlzdG9nZWl0b24gaGFzCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZCBpbiB0aGUgcmVnaXN0ZXI7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBkZWZlbmRhbnQgYWRtaXR0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlc2UgdHdvIGRlYnRzIGJ5IG1vcnRnYWdpbmcgaGlzIGxhbmQgZm9yIHRoZW0uPC9ub3RlPiB0aGUgdGhpcmQgaGUgaGFzIG5vdAogICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWQsIGJ1dCBoZSBpcyBwcm9zZWN1dGluZyBBcmlzdG8gb2YgQWxvcGVjZSBmb3IgbWFsaWNpb3VzIGVudHJ5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+4oCcWWVzLOKAnSBzYXlzIGhlLCDigJxmb3IgaGUgaGFzIHJlZ2lzdGVyZWQgbXkgbmFtZQogICAgICAgICAgICAgICAgICAgIGFzIGEgZGVidG9yIHVuanVzdGx5LuKAnSBPZiBjb3Vyc2UgaXQgaXMgZXZpZGVudCB0aGF0IHlvdSBoYXZlIGEgcmlnaHQKICAgICAgICAgICAgICAgICAgICB0byBzYXRpc2ZhY3Rpb24gZm9yIHRoaXM7IGJ1dCB0aGVuIHlvdSBvdWdodCBmaXJzdCB0byBnaXZlIHNhdGlzZmFjdGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICBhYmlkZSBieSB0aGUgcGVuYWx0eSB5b3UgaGF2ZSBicm91Z2h0IG9uIHlvdXJzZWxmLiBPciBhZ2FpbiwgZm9yIHdoYXQgZG8geW91CiAgICAgICAgICAgICAgICAgICAgZXhwZWN0IHRvIG9idGFpbiBzYXRpc2ZhY3Rpb24/IElmIHlvdSBhcmUgYXQgbGliZXJ0eSB0byBkbyBldmVyeXRoaW5nIHRoYXQgb3RoZXIKICAgICAgICAgICAgICAgICAgICBjaXRpemVucyBkbywgaG93IGFyZSB5b3Ugd3JvbmdlZD8gPC90cmFuc2xhdGlvbj4="
translation['25.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5JIGJlZyB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJ5IGluIEhlYXZlbidzIG5hbWUgdG8gY29uc2lkZXIgdGhpcyBwb2ludCBhbHNvLiBJZiBoZSBjb252aWN0cyBBcmlzdG8gb2YKICAgICAgICAgICAgICAgICAgICBtYWxpY2lvdXMgaW50ZW50LCB3aGF0IHdpbGwgaXQgbWVhbj8gSGlzIG5hbWUsIG9mIGNvdXJzZSwgd2lsbCBiZSBlcmFzZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgQXJpc3RvJ3Mgc3Vic3RpdHV0ZWQsIGJlY2F1c2UgdGhhdCBpcyB0aGUgbGF3LiBHb29kISBUaGVuIGhlbmNlZm9yd2FyZCB3aWxsIHRoaXMKICAgICAgICAgICAgICAgICAgICBtYW4sIHdob3NlIG5hbWUgaGFzIGJlZW4gZXJhc2VkLCBiZSBhIFN0YXRlLWRlYnRvciwgYW5kIHdpbGwgdGhlIG90aGVyIG1hbiwKICAgICAgICAgICAgICAgICAgICByZWdpc3RlcmVkIGFzIGEgZGVidG9yLCByZXRhaW4gaGlzIGZ1bGwgY2l0aXplbnNoaXA/IFRoYXQgaXMgd2hhdCBmb2xsb3dzIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZW5kYW50J3MgY2xhaW0sIGZvciBpZiBoZSBpcyBub3QgYSBkZWJ0b3Igd2hlbiBoaXMgbmFtZSBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIHJlZ2lzdGVyZWQsIHRoZW4sIHdoZW4gaGlzIG5hbWUgaGFzIGJlZW4gZXJhc2VkLCBoZSB3aWxsIG9idmlvdXNseSBiZSBhIGRlYnRvci4KICAgICAgICAgICAgICAgICAgICBCdXQgdGhhdCBpcyBhYnNvbHV0ZWx5IHVudHJ1ZS4gTm87IHdoZW4gaGlzIG5hbWUgaXMgZXJhc2VkLCB0aGVuIGhlIHdpbGwgYmUgbm8KICAgICAgICAgICAgICAgICAgICBsb25nZXIgYSBkZWJ0b3IuIEluIHRoYXQgY2FzZSB0aGUgZGVmZW5kYW50IGlzIGEgZGVidG9yIG5vdy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VG8gdGhlIHJlYWRlciB3aG8gZmFpbHMgdG8gZm9sbG93IHRoZSBhcmd1bWVudCBvZiB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFncmFwaCBpdCBtYXkgcGVyaGFwcyBvY2N1ciB0aGF0IHRoZSBqdXJ5IHdlcmUgbm90IGludGVuZGVkIHRvIGZvbGxvdyBpdAogICAgICAgICAgICAgICAgICAgICAgICBlaXRoZXIuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW47IGlmCiAgICAgICAgICAgICAgICAgICAgQXJpc3RvIGlzIGFjcXVpdHRlZCwgdG8gd2hvbSBpcyB0aGUgU3RhdGUgdG8gbG9vayBmb3IgY29tcGVuc2F0aW9uIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQncyBpbGxlZ2FsIGFjdHM/IEFuZCB3aGF0IGFib3V0IHRoZSBtZW4gd2hvc2UgZXhlY3V0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgIGltcHJpc29ubWVudCBoZSB0cmllcyB0byBwcm9jdXJlLCBhcyBoZSBidXN0bGVzIHRvIGFuZCBmcm8gaW4gdGhlIGNvdXJ0PyBIb3cKICAgICAgICAgICAgICAgICAgICB3aWxsIHRoZXkgcmVjb3ZlciB0aGVpciBsaXZlcyBvciBlc2NhcGUgZnJvbSB0aGUgc3VmZmVyaW5ncyB0aGV5IGhhdmUgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgIGVuZHVyZWQ/IEZvciB0aGlzIG1hbiwgdG8gd2hvbSB0aGUgbGF3cyByZWZ1c2UgYSBzaGFyZSBpbiBvdXIgY29tbW9uIGV2ZXJ5ZGF5CiAgICAgICAgICAgICAgICAgICAgcHJpdmlsZWdlcywgaXMgdGhlIGNhdXNlIG9mIGludG9sZXJhYmxlIHdyb25ncyB0byBvdGhlcnMgYnkgbWV0aG9kcyB0aGF0IGFyZQogICAgICAgICAgICAgICAgICAgIG5laXRoZXIgY29ycmVjdCBub3IgY29uc3RpdHV0aW9uYWwgbm9yIGNvbnZlbmllbnQuIDwvdHJhbnNsYXRpb24+"
translation['25.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgc2VlIGFsbCB0aGlzLCBJIHdvbmRlciB3aGF0IG1lYW5pbmcgeW91IGF0dGFjaCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBwaHJhc2Ug4oCcdXBzaWRlIGRvd24u4oCdIElzIGl0IGZvciB0aGUgZWFydGggdG8gYmUgdXAgdGhlcmUgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIHN0YXJzIGRvd24gaGVyZT8gVGhhdCBpcyBpbXBvc3NpYmxlLCBhbmQgbGV0IHVzIGhvcGUgaXQgYWx3YXlzIHdpbGwgYmUuIEJ1dAogICAgICAgICAgICAgICAgICAgIHdoZW4gdGhvc2Ugd2hvIGhhdmUgbm8gcmlnaHRzIGVuam95IHJpZ2h0cyBhdCB5b3VyIHBsZWFzdXJlLCB3aGVuIHZpbGxhaW55IGlzCiAgICAgICAgICAgICAgICAgICAgaG9ub3JlZCBhbmQgdmlydHVlIHNwdXJuZWQsIHdoZW4ganVzdGljZSBhbmQgZXhwZWRpZW5jeSBhcmUgc2FjcmlmaWNlZCB0bwogICAgICAgICAgICAgICAgICAgIHBlcnNvbmFsIHNwaXRlLCB0aGVuIHdlIG11c3Qgc3VwcG9zZSB0aGF0IHRoZSB1bml2ZXJzZSBoYXMgaW5kZWVkIGJlZW4gdHVybmVkCiAgICAgICAgICAgICAgICAgICAgdXBzaWRlIGRvd24uIDwvdHJhbnNsYXRpb24+"
translation['25.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SQogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVmb3JlIG5vdyBzZWVuIG1lbiBvbiB0aGVpciB0cmlhbCwgd2hvIHdlcmUgYmVpbmcgY29udmljdGVkIGJ5IHRoZSBhY3R1YWwKICAgICAgICAgICAgICAgICAgICBmYWN0cyBhbmQgd2VyZSB1bmFibGUgdG8gcHJvdmUgdGhlaXIgaW5ub2NlbmNlLCB0YWtpbmcgcmVmdWdlIHNvbWUgb2YgdGhlbSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSByZXNwZWN0YWJpbGl0eSBhbmQgbW9kZXJhdGlvbiBvZiB0aGVpciBsaXZlcywgb3RoZXJzIGluIHRoZSBhY2hpZXZlbWVudHMgb3IKICAgICAgICAgICAgICAgICAgICBwdWJsaWMgc2VydmljZXMgb2YgdGhlaXIgYW5jZXN0b3JzLCBvciBpbiBzaW1pbGFyIHBsZWFzLCBieSB3aGljaCB0aGV5IHN1Y2NlZWRlZAogICAgICAgICAgICAgICAgICAgIGluIG1vdmluZyB0aGVpciBqdWRnZXMgdG8gY29tcGFzc2lvbiBhbmQgZ29vZHdpbGwuIEJ1dCBJIGNhbm5vdCBzZWUgdGhhdCBhbnkgb25lCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlc2UgdG9waWNzIG9mZmVycyBhbiBlYXN5IHBhdGggZm9yIHRoZSBkZWZlbmRhbnQ7IHRoZXJlIGlzIG5vdGhpbmcgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgaGltIGJ1dCBwcmVjaXBpY2VzLCByYXZpbmVzLCBhbmQgZ3VsZnMuIDwvdHJhbnNsYXRpb24+"
translation['25.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0CiAgICAgICAgICAgICAgICAgICAgdHJ1ZSBwbGVhIGNhbiBoZSBmaW5kPyBTb21ldGhpbmcgcGVyaGFwcyB0aGF0IGhpcyBmYXRoZXIgZGlkPyBCdXQgeW91IHlvdXJzZWx2ZXMKICAgICAgICAgICAgICAgICAgICBjb25kZW1uZWQgdGhhdCBmYXRoZXIgdG8gZGVhdGggaW4gdGhlc2UgdmVyeSBjb3VydHMgYXMgYSBkZXRlY3RlZCByYXNjYWwgd2hvCiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWQgaGlzIGRvb20uIE9yIHBlcmhhcHMsIGlmIHRoZXJlIGlzIGEgZGlmZmljdWx0eSBhYm91dCBoaXMgZmF0aGVyLCBoZQogICAgICAgICAgICAgICAgICAgIHdpbGwgYXBwZWFsIHRvIHRoZSBzb2JyaWV0eSBhbmQgcmVzcGVjdGFiaWxpdHkgb2YgaGlzIG93biBsaWZlLiBXaGF0IGxpZmU/IFdoZXJlCiAgICAgICAgICAgICAgICAgICAgaGFzIGhlIGxpdmVkIGl0PyBGb3IgdGhlIGxpZmUgdGhhdCB5b3UgaGF2ZSBhbGwgc2VlbiBoaW0gbGVhZGluZyBpcyBub3Qgb2YgdGhhdAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz7igJxCdXQsIG15IGRlYXIgc2lyLCBoZQogICAgICAgICAgICAgICAgICAgIHdpbGwgcmVseSBvbiBwdWJsaWMgc2VydmljZXMu4oCdIFdoZW4gYW5kIHdoZXJlIHBlcmZvcm1lZD8gSGlzIGZhdGhlcidzPwogICAgICAgICAgICAgICAgICAgIFdoeSwgdGhlcmUgYXJlIG5vbmUuIEhpcyBvd24/IFlvdSB3aWxsIGZpbmQgcmVjb3JkIG9mIGRlbGF0aW9ucywgYXJyZXN0cywKICAgICAgICAgICAgICAgICAgICBpbmZvcm1hdGlvbnPigJRidXQgbm8gc2VydmljZXMuIE9yIHBlcmhhcHMsIHB1dHRpbmcgdGhlc2UgYXNpZGUsIGhpcwogICAgICAgICAgICAgICAgICAgIG51bWVyb3VzIGFuZCBoaWdobHkgcmVzcGVjdGFibGUga2luc21lbiB3aWxsIGNvbWUgZm9yd2FyZCBhbmQgYmVnIGhpbSBvZmYuIEJ1dAogICAgICAgICAgICAgICAgICAgIHRoZXJlIGFyZSBub25lIGFuZCBuZXZlciB3ZXJlLiBIb3cgY291bGQgdGhlcmUgYmUsIHdoZW4gaGUgaXMgbm90IGV2ZW4gYQogICAgICAgICAgICAgICAgICAgIGZyZWUtYm9ybiBjaXRpemVuPyA8L3RyYW5zbGF0aW9uPg=="
translation['25.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz5ObzsgSSBhbSB3cm9uZy4gSGUgaGFzIGEKICAgICAgICAgICAgICAgICAgICBicm90aGVyLCB3aG8gaXMgcHJlc2VudCBoZXJlIGluIGNvdXJ0IGFuZCB3aG8gYnJvdWdodCB0aGF0IHByZWNpb3VzIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgaGltLiBXaGF0IG5lZWQgdG8gc2F5IGFueXRoaW5nIGFib3V0IGhpbT8gSGUgaXMgb3duIGJyb3RoZXIgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50LCBib3JuIG9mIHRoZSBzYW1lIGZhdGhlciBhbmQgbW90aGVyLCBhbmQsIHRvIGFkZCB0byBoaXMgbWlzZm9ydHVuZXMsCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgaGlzIHR3aW4uIEl0IHdhcyB0aGlzIGJyb3RoZXLigJRJIHBhc3Mgb3ZlciB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICBmYWN0c+KAlHdobyBnb3QgcG9zc2Vzc2lvbiBvZiB0aGUgZHJ1Z3MgYW5kIGNoYXJtcyBmcm9tIHRoZSBzZXJ2YW50IG9mCiAgICAgICAgICAgICAgICAgICAgVGhlb3JpcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTE3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMTczIj5MZW1ub3M8L3BsYWNlTmFtZT4sIHRoZSBmaWx0aHkgc29yY2VyZXNzCiAgICAgICAgICAgICAgICAgICAgd2hvbSB5b3UgcHV0IHRvIGRlYXRoIG9uIHRoYXQgYWNjb3VudCB3aXRoIGFsbCBoZXIgZmFtaWx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['25.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz5TaGUgZ2F2ZSBpbmZvcm1hdGlvbiBhZ2FpbnN0IGhlciBtaXN0cmVzcywgYW5kIHRoaXMgcmFzY2FsCiAgICAgICAgICAgICAgICAgICAgaGFzIGhhZCBjaGlsZHJlbiBieSBoZXIsIGFuZCB3aXRoIGhlciBoZWxwIGhlIHBsYXlzIGp1Z2dsaW5nIHRyaWNrcyBhbmQKICAgICAgICAgICAgICAgICAgICBwcm9mZXNzZXMgdG8gY3VyZSBmaXRzLCBiZWluZyBoaW1zZWxmIHN1YmplY3QgdG8gZml0cyBvZiB3aWNrZWRuZXNzIG9mIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAga2luZC4gU28gdGhpcyBpcyB0aGUgbWFuIHdobyB3aWxsIGJlZyBoaW0gb2ZmISBUaGlzIHBvaXNvbmVyLCB0aGlzIHB1YmxpYyBwZXN0LAogICAgICAgICAgICAgICAgICAgIHdob20gYW55IG1hbiB3b3VsZCBiYW4gYXQgc2lnaHQgYXMgYW4gZXZpbCBvbWVuIHJhdGhlciB0aGFuIGNob29zZSB0byBhY2Nvc3QKICAgICAgICAgICAgICAgICAgICBoaW0sIGFuZCB3aG8gaGFzIHByb25vdW5jZWQgaGltc2VsZiB3b3J0aHkgb2YgZGVhdGggYnkgYnJpbmdpbmcgc3VjaCBhbiBhY3Rpb24uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hhdCBoZWxwLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIHJlbWFpbnMgZm9yIGhpbSwgQXRoZW5pYW5zPyBUaGUgaGVscCwgSSBzdXBwb3NlLCB0aGF0IGNvbWVzIHRvIGFsbAogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudHMgYWxpa2UgZnJvbSB0aGUgbmF0dXJhbCB0ZW1wZXIgb2YgdGhlIGp1cnksIHRoZSBoZWxwIHRoYXQgbm8gbWFuIG9uCiAgICAgICAgICAgICAgICAgICAgaGlzIHRyaWFsIHByb3ZpZGVzIGZvciBoaW1zZWxmLCBidXQgdGhhdCBlYWNoIG9mIHlvdSBicmluZ3Mgd2l0aCBoaW0gZnJvbSBob21lCiAgICAgICAgICAgICAgICAgICAgdG8gdGhlIGNvdXJ04oCUSSBtZWFuIHBpdHksIHBhcmRvbiwgYmVuZXZvbGVuY2UuIEJ1dCBvZiBzdWNoIGhlbHAKICAgICAgICAgICAgICAgICAgICByZWxpZ2lvbiBhbmQganVzdGljZSBhbGlrZSBkZW1hbmQgdGhhdCB0aGlzIHVuY2xlYW4gd3JldGNoIHNob3VsZCByZWNlaXZlIG5vCiAgICAgICAgICAgICAgICAgICAgc2hhcmUuIFdoeT8gQmVjYXVzZSB3aGF0ZXZlciBsYXcgZWFjaCBtYW4ncyBuYXR1cmUgcHJvbXB0cyBoaW0gdG8gYXBwbHkgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgbmVpZ2hib3JzLCB0aGF0IGxhdyBpdCBpcyBvbmx5IGZhaXIgdGhhdCB0aGV5IHNob3VsZCBhcHBseSB0byBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['25.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGxhdyBkbyB5b3UgdGhpbmsgQXJpc3RvZ2VpdG9uIGFwcGxpZXMgdG8gYWxsCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgbWVuLCBhbmQgd2hhdCBhcmUgaGlzIHdpc2hlcyBjb25jZXJuaW5nIHRoZW0/IERvZXMgaGUgd2lzaCB0byBzZWUgdGhlbQogICAgICAgICAgICAgICAgICAgIGVuam95aW5nIHByb3NwZXJpdHksIGhhcHBpbmVzcyBhbmQgZ29vZCBmYW1lPyBJZiBzbywgd2hhdCBiZWNvbWVzIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGxpdmVsaWhvb2Q/IEZvciBoZSB0aHJpdmVzIG9uIHRoZSBtaXNmb3J0dW5lcyBvZiBvdGhlcnMuIFRoZXJlZm9yZSBoZSBsaWtlcyB0bwogICAgICAgICAgICAgICAgICAgIHNlZSBldmVyeW9uZSBpbnZvbHZlZCBpbiB0cmlhbHMsIGxhd3N1aXRzIGFuZCB2aWxlIGNoYXJnZXMuIFRoYXQgaXMgdGhlIGNyb3AgaGUKICAgICAgICAgICAgICAgICAgICBzb3dzOyB0aGF0IGlzIHRoZSB0cmFkZSBoZSBwbGllcy4gTWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgd2hhdCBzb3J0IG9mIG1hbiBkZXNlcnZlcyB0byBiZSBjYWxsZWQgdGhlIGNvbXBsZXRlCiAgICAgICAgICAgICAgICAgICAgdmlsbGFpbiwgdGhlIHRocmljZS1hY2N1cnNlZCwgdGhlIGNvbW1vbiBmb2UsIHRoZSB1bml2ZXJzYWwgZW5lbXksIGFnYWluc3Qgd2hvbQogICAgICAgICAgICAgICAgICAgIG9uZSBwcmF5cyB0aGF0IHRoZSBlYXJ0aCBtYXkgbmVpdGhlciB5aWVsZCBoaW0gZnJ1aXQgbm9yIHJlY2VpdmUgaGltIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgZGVhdGg/IElzIGl0IG5vdCBzdWNoIGEgbWFuIGFzIHRoaXM/IFRoYXQgaXMgbXkgb3Bpbmlvbi4gPC90cmFuc2xhdGlvbj4="
translation['25.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IHBhcmRvbiwgd2hhdCBwaXR5IGRpZCB0aGUgdmljdGltcyBvZiBoaXMgYmxhY2ttYWlsCiAgICAgICAgICAgICAgICAgICAgb2J0YWluIGZyb20gaGltLCB0aGUgbWVuIHdob3NlIGV4ZWN1dGlvbiBoZSB3YXMgYWx3YXlzIGRlbWFuZGluZyBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgY291cnRz4oCUeWVzLCBldmVuIGJlZm9yZSB0aGUgZmlyc3QgdmVyZGljdCB3YXMgZGVjaWRlZD88bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGp1cnkgdm90ZWQgZmlyc3Qgb24gdGhlIHF1ZXN0aW9uIG9mIGd1aWx0eSBvcgogICAgICAgICAgICAgICAgICAgICAgICBub3QgZ3VpbHR5LCBhbmQgc2Vjb25kbHkgb24gdGhlIHBlbmFsdHksIGlmIGd1aWx0eS48L25vdGU+IFRob3NlIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB3aG9tIHRoaXMgd3JldGNoIHNob3dlZCBzdWNoIGNydWVsdHkgYW5kIGJpdHRlcm5lc3Mgd2VyZSBzYXZlZCBmcm9tIGRlYXRoIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0ZW91cyBjb25kdWN0IG9mIHRob3NlIG9mIHlvdSB3aG8gaGFkIGJlZW4gYWxsb3R0ZWQgdG8gdHJ5IHRoZWlyIGNhc2UsIHdobwogICAgICAgICAgICAgICAgICAgIGFjcXVpdHRlZCB0aGUgbWVuIGhlIHdhcyBmYWxzZWx5IGFjY3VzaW5nIGFuZCB3aXRoaGVsZCBmcm9tIGhpbSB0aGUgbmVjZXNzYXJ5CiAgICAgICAgICAgICAgICAgICAgZmlmdGggcGFydCBvZiB0aGUgdm90ZXMuIDwvdHJhbnNsYXRpb24+"
translation['25.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGlzIGJpdHRlcm5lc3MsCiAgICAgICAgICAgICAgICAgICAgY3J1ZWx0eSBhbmQgYmxvb2QtdGhpcnN0aW5lc3Mgd2VyZSBkaXNwbGF5ZWQgYW5kIHByb3ZlZC4gVGhlIHNpZ2h0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIG9mIHNvbWUgb2YgdGhlIGRlZmVuZGFudHMgYW5kIHRoZWlyIGFnZWQgbW90aGVycyBzdGFuZGluZyBpbiBjb3VydCBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgbW92ZSBoaW0gdG8gcGl0eT8gQW5kIGRvIHlvdSwgQXJpc3RvZ2VpdG9uLCBsb29rIGZvciBwYXJkb24/IFdoZW5jZT8gRnJvbQogICAgICAgICAgICAgICAgICAgIHdob20/IEFyZSB5b3VyIGNoaWxkcmVuIHRvIGJlIHBpdGllZD8gRmFyIGZyb20gaXQuIFlvdSBoYXZlIHlvdXJzZWxmIHRocm93biBhd2F5CiAgICAgICAgICAgICAgICAgICAgdGhlaXIgcmlnaHQgdG8gcGl0eTsgbmF5LCB5b3UgaGF2ZSBkZXN0cm95ZWQgaXQgb25jZSBmb3IgYWxsLiBEbyBub3QgdGhlbiBzZWVrCiAgICAgICAgICAgICAgICAgICAgYW5jaG9yYWdlIGluIGhhcmJvcnMgdGhhdCB5b3UgaGF2ZSB5b3Vyc2VsZiBibG9ja2VkIHVwIGFuZCBmaWxsZWQgd2l0aCBzdGFrZXM7CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoYXQgaXMgdW5mYWlyLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgeW91IGhlYXJkIHRoZSBzbGFuZGVyb3VzIGxhbmd1YWdlIHRoYXQgaGUgdXNlZCBhZ2FpbnN0IHlvdSwKICAgICAgICAgICAgICAgICAgICBhcyBoZSBwYXJhZGVkIHRoZSBtYXJrZXQtcGxhY2UsIHlvdSB3b3VsZCBoYXRlIGhpbSBldmVuIG1vcmUgdGhhbiB5b3UgZG8sIGFuZAogICAgICAgICAgICAgICAgICAgIHdpdGgganVzdGljZS4gRm9yIGhlIHNheXMgdGhlcmUgYXJlIG1hbnkgbWVuIGluIGRlYnQgdG8gdGhlIHRyZWFzdXJ5LCBhbmQgYWxsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlbSBpbiB0aGUgc2FtZSBjYXNlIGFzIGhpbXNlbGYuIEkgYWRtaXQgdGhhdCB0aGVzZSB1bmZvcnR1bmF0ZSBtZW4gYXJlCiAgICAgICAgICAgICAgICAgICAg4oCcbWFueSzigJ0gdGhvdWdoIHRoZXJlIGFyZSBidXQgYSBjb3VwbGUgb2YgdGhlbTsgZm9yIGV2ZXJ5CiAgICAgICAgICAgICAgICAgICAgc3RhdGUtZGVidG9yIGlzIG9uZSB0b28gbWFueSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TGl0LgogICAgICAgICAgICAgICAgICAgICAgICDigJxUaGV5IGFyZSBtb3JlIGJ5IGV2ZXJ5b25lIHRoYW4gaXMgcmlnaHQu4oCdPC9ub3RlPiBhbmQgbm8KICAgICAgICAgICAgICAgICAgICBvdGhlcnMgb3VnaHQgdG8gYmUgaW4gZGVidCB0byB0aGUgU3RhdGUuIEJ1dCBJIHNvbGVtbmx5IHN3ZWFyIHRoYXQgdGhlaXIgY2FzZSBpcwogICAgICAgICAgICAgICAgICAgIG5vdCB0aGUgc2FtZSBhcyB0aGUgZGVmZW5kYW50J3MsIG5vciBhbnl0aGluZyBsaWtlIGl0LCBidXQgcXVpdGUgdGhlIGNvbnRyYXJ5LgogICAgICAgICAgICAgICAgICAgIExvb2sgYXQgaXQgaW4gdGhpcyB3YXkuIDwvdHJhbnNsYXRpb24+"
translation['25.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZG8gbm90IGltYWdpbmUsCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLCB0aGF0IEkgYW0gZGViYXRpbmcgdGhlIHBvaW50IHdpdGggeW91LCBhcyBpZiB5b3Ugd2VyZSBkZWJ0b3JzIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHRyZWFzdXJ5LiBUaGF0IGlzIG5vdCBzbywgYW5kIEkgaG9wZSBpdCBuZXZlciBtYXkgYmU7IGl0IGlzIG5vIGlkZWEgb2YgbWluZS4gQnV0CiAgICAgICAgICAgICAgICAgICAgaWYgYW55IG9mIHlvdSBoYXMgYSBmcmllbmQgb3IgYWNxdWFpbnRhbmNlIGFtb25nIHRoZSBkZWJ0b3JzLCBJIHByb3Bvc2UgdG8gc2hvdwogICAgICAgICAgICAgICAgICAgIHlvdSB0aGF0IGZvciB0aGF0IGZyaWVuZCdzIHNha2UgaGUgb3VnaHQgdG8gaGF0ZSB0aGUgZGVmZW5kYW50LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5NeSBmaXJzdCByZWFzb24gaXMgdGhhdCBob25lc3QgZm9saywgd2hvIGFyZSBoYW1wZXJlZCBieQogICAgICAgICAgICAgICAgICAgIHNlY3VyaXR5IGZvciBvdGhlcnMgYW5kIGtpbmQgb2ZmaWNlcyBhbmQgcHJpdmF0ZSBkZWJ0cyBpbnZvbHZpbmcgbm8gd3JvbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgU3RhdGUsIGJ1dCB3aG8gaGFwcGVuIHRvIGhhdmUgYmVlbiB1bmx1Y2t5LCBhcmUgcGxhY2VkIGJ5IGhpbSBpbiB0aGUgc2FtZQogICAgICAgICAgICAgICAgICAgIGluZmFtb3VzIGNhdGVnb3J5IGFzIGhpbXNlbGYsIGNvbnRyYXJ5IHRvIHdoYXQgaXMgcmlnaHQgYW5kIGZpdHRpbmcuIDwvdHJhbnNsYXRpb24+"
translation['25.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHlvdSwgQXJpc3RvZ2VpdG9uLCB3ZXJlIGNvbnZpY3RlZCBvZiBhIGJyZWFjaCBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBjb25zdGl0dXRpb24gZm9yIGhhdmluZyBtb3ZlZCB0aGF0IHRocmVlIGNpdGl6ZW5zIHNob3VsZCBiZSBleGVjdXRlZCB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgdHJpYWwsIGFuZCB5b3UgZXNjYXBlZCB3aXRoIGEgZmluZSwgdGhvdWdoIHlvdSBvdWdodCB0byBoYXZlIHN1ZmZlcmVkIHRoZQogICAgICAgICAgICAgICAgICAgIGV4dHJlbWUgcGVuYWx0eSwgdGhlcmUgaXMgbm8gcGFyYWxsZWwsIG5vdCB0aGUgc2xpZ2h0ZXN0LCBiZXR3ZWVuIHlvdXIgY2FzZSBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IG9mIGEgbWFuIHdobyBoYXMgZ29uZSBiYWlsIGZvciBhIGZyaWVuZCBhbmQgdGhlbiBmaW5kcyBoaW1zZWxmIHVuYWJsZSB0bwogICAgICAgICAgICAgICAgICAgIHBheSBhbiB1bmV4cGVjdGVkIGZpbmUuIE15IHNlY29uZCByZWFzb24gaXMgdGhhdCB0aGUgYm9uZCBvZiBtdXR1YWwga2luZG5lc3MsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggeW91IHlvdXJzZWx2ZXMgbmF0dXJhbGx5IHByZXNlcnZlIHRvd2FyZHMgb25lIGFub3RoZXIsIGlzIGJyb2tlbiBhbmQKICAgICAgICAgICAgICAgICAgICBkZXN0cm95ZWQgYnkgQXJpc3RvZ2VpdG9uLCBhcyBmYXIgYXMgaW4gaGltIGxpZXMuIFlvdSB3aWxsIHVuZGVyc3RhbmQgdGhpcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgd2hhdCBJIGFtIGdvaW5nIHRvIHNheS4gRm9yIHlvdSwgQXRoZW5pYW5zLCBvYnNlcnZpbmcgd2hhdCBJIGhhdmUgY2FsbGVkIHRoZQogICAgICAgICAgICAgICAgICAgIG5hdHVyYWwgYm9uZCBvZiBtdXR1YWwga2luZG5lc3MsIGxpdmUgYXMgYSBjb3Jwb3JhdGUgYm9keSBpbiB0aGlzIGNpdHkganVzdCBhcwogICAgICAgICAgICAgICAgICAgIGZhbWlsaWVzIGxpdmUgaW4gdGhlaXIgcHJpdmF0ZSBob21lcy4gPC90cmFuc2xhdGlvbj4="
translation['25.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3cgdGhlbgogICAgICAgICAgICAgICAgICAgIGRvIHN1Y2ggZmFtaWxpZXMgbGl2ZT8gV2hlcmUgdGhlcmUgaXMgYSBmYXRoZXIgYW5kIGdyb3duLXVwIHNvbnMgYW5kIHBvc3NpYmx5CiAgICAgICAgICAgICAgICAgICAgYWxzbyBncmFuZGNoaWxkcmVuLCB0aGVyZSBhcmUgYm91bmQgdG8gYmUgbWFueSBkaXZlcmdlbnQgd2lzaGVzOyBmb3IgeW91dGggYW5kCiAgICAgICAgICAgICAgICAgICAgYWdlIGRvIG5vdCB0YWxrIG9yIGFjdCBpbiB0aGUgc2FtZSB3YXkuIE5ldmVydGhlbGVzcyB3aGF0ZXZlciB0aGUgeW91bmcgbWVuIGRvLAogICAgICAgICAgICAgICAgICAgIGlmIHRoZXkgYXJlIG1vZGVzdCwgdGhleSBkbyBpbiBzdWNoIGEgd2F5IGFzIHRvIGF2b2lkIG5vdGljZTsgb3IgaWYgdGhpcyBpcwogICAgICAgICAgICAgICAgICAgIGltcG9zc2libGUsIGF0IGFueSByYXRlIHRoZXkgbWFrZSBpdCB0aGF0IHN1Y2ggd2FzIHRoZWlyIGludGVudGlvbi4gVGhlIGVsZGVycwogICAgICAgICAgICAgICAgICAgIGluIHRoZWlyIHR1cm4sIGlmIHRoZXkgc2VlIGFueSBsYWNrIG9mIG1vZGVyYXRpb24gaW4gc3BlbmRpbmcgb3IgZHJpbmtpbmcgb3IKICAgICAgICAgICAgICAgICAgICBhbXVzZW1lbnQsIG1hbmFnZSB0byBzZWUgaXQgd2l0aG91dCBzaG93aW5nIHRoYXQgdGhleSBoYXZlIHNlZW4gaXQuIFRoZSByZXN1bHQKICAgICAgICAgICAgICAgICAgICBpcyB0aGF0IGV2ZXJ5dGhpbmcgdGhhdCB0aGVpciB2YXJpb3VzIG5hdHVyZXMgc3VnZ2VzdCBpcyBkb25lLCBhbmQgZG9uZQogICAgICAgICAgICAgICAgICAgIHNhdGlzZmFjdG9yaWx5LiA8L3RyYW5zbGF0aW9uPg=="
translation['25.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhhdCBpcyBqdXN0IGhvdyB5b3UsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgbGl2ZSBpbiB0aGlzIGNvbW11bml0eSBvbgogICAgICAgICAgICAgICAgICAgIGh1bWFuZSBhbmQgYnJvdGhlcmx5IHByaW5jaXBsZXMsIG9uZSBjbGFzcyB3YXRjaGluZyB0aGUgcHJvY2VlZGluZ3Mgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgdW5mb3J0dW5hdGUgaW4gc3VjaCBhIHdheSB0aGF0LCBhcyB0aGUgc2F5aW5nIHJ1bnMsIOKAnHNlZWluZywgdGhleSBzZWUKICAgICAgICAgICAgICAgICAgICBub3Q7IGhlYXJpbmcsIGRvIG5vdCBoZWFy4oCdOyB3aGlsZSB0aGUgb3RoZXJzIGJ5IHRoZWlyIGJlaGF2aW9yIHNob3cKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXkgYXJlIGJvdGggb24gdGhlaXIgZ3VhcmQgYW5kIGFsaXZlIHRvIGEgc2Vuc2Ugb2Ygc2hhbWUuIEhlbmNlIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGF0IGdlbmVyYWwgaGFybW9ueSwgd2hpY2ggaXMgdGhlIHNvdXJjZSBvZiBhbGwgb3VyIGJsZXNzaW5ncywgaXMgZmlybWx5CiAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoZWQgaW4gb3VyIGNpdHkuIDwvdHJhbnNsYXRpb24+"
translation['25.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSBmZWVsaW5ncywgc28KICAgICAgICAgICAgICAgICAgICBoYXBwaWx5IGltcGxhbnRlZCBpbiB5b3VyIG5hdHVyZSBhbmQgeW91ciBoYWJpdHMsIEFyaXN0b2dlaXRvbiB3b3VsZCBjaGFuZ2UgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlIGFuZCBvdmVydHVybi4gV2hhdCBldmVyeSBvdGhlciBjaXRpemVuIGRvZXMgd2l0aCBhcyBsaXR0bGUgbm9pc2UgYXMKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSwgaGUgcGVyZm9ybXMsIG9uZSBtaWdodCBhbG1vc3Qgc2F5LCB3aXRoIGEgcGVhbCBvZiBiZWxscyBodW5nIGFib3V0IGhpcwogICAgICAgICAgICAgICAgICAgIG5lY2suIE5laXRoZXIgdGhlIHByZXNpZGVudCBub3IgdGhlIGNyaWVyIG5vciB0aGUgY2hhaXJtYW4gbm9yIHRoZSB0cmliZSBvbiBkdXR5CiAgICAgICAgICAgICAgICAgICAgY2FuIGNvbnRyb2wgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz5TbyB3aGVuIGFueSBvZiB5b3UsIGFubm95ZWQKICAgICAgICAgICAgICAgICAgICBhdCBoaXMgb3V0cmFnZW91cyBjb25kdWN0LCBjcmllcywg4oCcVG8gdGhpbmsgdGhhdCBoZSBzaG91bGQgYWN0IGxpa2UKICAgICAgICAgICAgICAgICAgICB0aGlzLCBhbmQgaGUgYSBkZWJ0b3IgdG8gdGhlIHRyZWFzdXJ5IeKAnSB0aGUgcmVwbHkgaXMsIOKAnFdoYXQhCiAgICAgICAgICAgICAgICAgICAgSXMgbm90IFNvLWFuZC1zbyBhIGRlYnRvciB0b28/4oCd4oCUZWFjaCBtYW4gc3VnZ2VzdGluZyBoaXMKICAgICAgICAgICAgICAgICAgICBwZXJzb25hbCBlbmVteS4gVGh1cyBoaXMgd2lja2VkbmVzcyBpcyB0aGUgY2F1c2Ugb2YgdGhlIHNjYW5kYWxzIHdoaWNoIGFyZQogICAgICAgICAgICAgICAgICAgIGNpcmN1bGF0ZWQgYWJvdXQgbWVuIHdobyBkbyBub3QgcmVzZW1ibGUgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['25.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmVmb3JlIHRoZSBvbmUgdGhpbmcgbGVmdCwgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgZm9yIHRob3NlIHdobyB3aXNoIHRvCiAgICAgICAgICAgICAgICAgICAgZ2V0IHJpZCBvZiB0aGlzIG1hbiwgbm93IHRoYXQgdGhleSBjYW4gY2hhcmdlIGhpbSB3aXRoIGEgY2xlYXIgYW5kIG1hbmlmZXN0CiAgICAgICAgICAgICAgICAgICAgb2ZmZW5jZSBhZ2FpbnN0IHRoZSBsYXdzLCBpcywgaWYgcG9zc2libGUsIHRvIHB1bmlzaCBoaW0gd2l0aCBkZWF0aCwgb3IsIGlmIG5vdCwKICAgICAgICAgICAgICAgICAgICB0byBpbXBvc2Ugc3VjaCBhIG1vbmV5IGZpbmUgYXMgaGUgd2lsbCBub3QgYmUgYWJsZSB0byBwYXkuIEZvciBkZXBlbmQgdXBvbiBpdCwKICAgICAgICAgICAgICAgICAgICB0aGVyZSBpcyBubyBvdGhlciB3YXkgdG8gYmUgcmlkIG9mIGhpbS4gPC90cmFuc2xhdGlvbj4="
translation['25.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZwogICAgICAgICAgICAgICAgICAgIG90aGVyIG1lbiwgQXRoZW5pYW5zLCB5b3UgbWF5IHNlZSB0aGUgYmVzdCBhbmQgbW9zdCByZXNwZWN0YWJsZSByZWFkeSBhdCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9tcHRpbmcgb2YgbmF0dXJlIHRvIGRvIHdoYXQgaXMgcmlnaHQ7IHRob3NlIHdobyBhcmUgd29yc2UgbWVuLCBidXQgYXJlIG5vdAogICAgICAgICAgICAgICAgICAgIGNsYXNzZWQgYXMgdGhlIHZlcnkgYmFkLCBhcmUgY2FyZWZ1bCBvZiBvZmZlbmRpbmcsIGJlY2F1c2UgdGhleSBhcmUgYWZyYWlkIG9mCiAgICAgICAgICAgICAgICAgICAgeW91IGFuZCBhcmUgc2Vuc2l0aXZlIHRvIGRpc2dyYWNlIGFuZCByZXByb2FjaDsgdGhlIHV0dGVybHkgd2lja2VkLCB0aGUgbW9yYWwKICAgICAgICAgICAgICAgICAgICBsZXBlcnMsIGFzIHdlIGNhbGwgdGhlbSwgYXJlIHNhaWQgdG8gYmUgdGF1Z2h0IHdpc2RvbSBvbmx5IGJ5IHN1ZmZlcmluZy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgaGVyZSBpcyBBcmlzdG9nZWl0b24sIHdobyBoYXMgc28gZmFyCiAgICAgICAgICAgICAgICAgICAgb3V0c3RyaXBwZWQgYWxsIG1lbiBpbiB3aWNrZWRuZXNzIHRoYXQgaGlzIHB1bmlzaG1lbnRzIGhhdmUgbm90IGRpc2NpcGxpbmVkIGhpbQogICAgICAgICAgICAgICAgICAgIGFuZCBoZSBpcyBvbmNlIG1vcmUgZGV0ZWN0ZWQgaW4gdGhlIHNhbWUgaWxsZWdhbCBhbmQgcmFwYWNpb3VzIGFjdHMuIEFsc28gaGUgaXMKICAgICAgICAgICAgICAgICAgICB0aGUgbW9yZSBkZXNlcnZpbmcgb2YgeW91ciBhbmdlciBub3cgdGhhbiBiZWZvcmUsIGluYXNtdWNoIGFzIHByZXZpb3VzbHkgaXQgd2FzCiAgICAgICAgICAgICAgICAgICAgb25seSBieSBtb3ZpbmcgZGVjcmVlcyB0aGF0IGhlIHZlbnR1cmVkIHRvIHRyYW5zZ3Jlc3MgdGhlIGxhd3MsIGJ1dCBub3cgaGUKICAgICAgICAgICAgICAgICAgICB0cmFuc2dyZXNzZXMgdGhlbSBpbiBldmVyeSBwb3NzaWJsZSB3YXnigJRieSBhY2N1c2F0aW9ucywgYnkgcHVibGljCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoZXMsIGJ5IGNhbHVtbmllcywgYnkgZGVtYW5kaW5nIHRoZSBkZWF0aCBwZW5hbHR5LCBieSBpbXBlYWNoaW5nIGFuZAogICAgICAgICAgICAgICAgICAgIG1hbGlnbmluZyB0aGUgZnVsbHkgcXVhbGlmaWVkIGNpdGl6ZW5zLCB3aGVuIGhlIGhpbXNlbGYgaXMgYSBzdGF0ZS1kZWJ0b3IuIEZvcgogICAgICAgICAgICAgICAgICAgIG5vdGhpbmcgaXMgbW9yZSBhYm9taW5hYmxlIHRoYW4gdGhhdC4gPC90cmFuc2xhdGlvbj4="
translation['25.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHksCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgdG8gYWRtb25pc2ggc3VjaCBhIGZlbGxvdyBpcyBtYWRuZXNzLiBBIG1hbiB3aG8gbmV2ZXIgeWllbGRlZCBvciBzaHJhbmsKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIHN0b3JtIG9mIHByb3Rlc3Qgd2l0aCB3aGljaCB0aGUgd2hvbGUgQXNzZW1ibHkgYWRtb25pc2hlcyB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBvZmZlbmQgaXQsIHdvdWxkIHJlYWRpbHkgaGVlZCB0aGUgcHJvdGVzdCBvZiBhbiBpbmRpdmlkdWFsISBIaXMgY2FzZSBpcwogICAgICAgICAgICAgICAgICAgIGluY3VyYWJsZSwgbWVuIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgcXVpdGUKICAgICAgICAgICAgICAgICAgICBpbmN1cmFibGUuIEp1c3QgYXMgcGh5c2ljaWFucywgd2hlbiB0aGV5IGRldGVjdCBhIGNhbmNlciBvciBhbiB1bGNlciBvciBzb21lCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgaW5jdXJhYmxlIGdyb3d0aCwgY2F1dGVyaXplIGl0IG9yIGN1dCBpdCBhd2F5LCBzbyB5b3Ugb3VnaHQgYWxsIHRvIHVuaXRlCiAgICAgICAgICAgICAgICAgICAgaW4gZXh0ZXJtaW5hdGluZyB0aGlzIG1vbnN0ZXIuIENhc3QgaGltIG91dCBvZiB5b3VyIGNpdHk7IGRlc3Ryb3kgaGltLiBUYWtlIHlvdXIKICAgICAgICAgICAgICAgICAgICBwcmVjYXV0aW9ucyBpbiB0aW1lIGFuZCBkbyBub3Qgd2FpdCBmb3IgdGhlIGV2aWwgY29uc2VxdWVuY2VzLCB3aGljaCBJIHByYXkgbWF5CiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgZmFsbCBlaXRoZXIgb24gaW5kaXZpZHVhbHMgb3Igb24gdGhlIGNvbW11bml0eS4gPC90cmFuc2xhdGlvbj4="
translation['25.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz5MZXQgbWUgcHV0IGl0IGluIHRoaXMgd2F5LiBQZXJoYXBzIG5vbmUgb2YgeW91IGhhcyBldmVyIGJlZW4KICAgICAgICAgICAgICAgICAgICBiaXR0ZW4gYnkgYW4gYWRkZXIgb3IgYSB0YXJhbnR1bGEsIGFuZCBJIGhvcGUgaGUgbmV2ZXIgbWF5IGJlLiBBbGwgdGhlIHNhbWUsCiAgICAgICAgICAgICAgICAgICAgd2hlbmV2ZXIgeW91IHNlZSBzdWNoIGNyZWF0dXJlcywgeW91IHByb21wdGx5IGtpbGwgdGhlbSBhbGwuIEluIGp1c3QgdGhlIHNhbWUKICAgICAgICAgICAgICAgICAgICB3YXksIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIHdoZW5ldmVyIHlvdSBzZWUKICAgICAgICAgICAgICAgICAgICBhIGZhbHNlIGFjY3VzZXIsIGEgbWFuIHdpdGggdGhlIHZlbm9tIG9mIGEgdmlwZXIgaW4gaGlzIG5hdHVyZSwgZG8gbm90IHdhaXQgZm9yCiAgICAgICAgICAgICAgICAgICAgaGltIHRvIGJpdGUgb25lIG9mIHlvdSwgYnV0IGFsd2F5cyBsZXQgdGhlIG1hbiB3aG8gY29tZXMgYWNyb3NzIGhpbSBleGFjdAogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQuIDwvdHJhbnNsYXRpb24+"
translation['25.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+THljdXJndXMgZGlkIHdlbGwgdG8gY2FsbCBBdGhlbmEgYW5kIHRoZSBNb3RoZXIgb2YgdGhlIGdvZHMgdG8gd2l0bmVzcy4gQnV0IEkKICAgICAgICAgICAgICAgICAgICB3aWxsIGludm9rZSB5b3VyIGFuY2VzdG9ycyBhbmQgdGhlIHZpcnR1ZXMgb2YgeW91ciBhbmNlc3RvcnMsIHdob3NlIG1lbW9yeSB0aW1lCiAgICAgICAgICAgICAgICAgICAgaGFzIG5vdCBlZmZhY2VkLiBJdCBpcyByaWdodCB0aGF0IEkgc2hvdWxkIGRvIHNvOyBmb3IgdGhlaXIgcG9saWN5IHdhcyBub3QgdG8KICAgICAgICAgICAgICAgICAgICBsZW5kIHRoZW1zZWx2ZXMgdG8gY29vcGVyYXRpb24gd2l0aCB0aGUgd29yc3Qgb2YgcmFzY2FscyBhbmQgZmFsc2UgYWNjdXNlcnMsIG5vdAogICAgICAgICAgICAgICAgICAgIHRvIGZvc3RlciB0aGUgbXV0dWFsIGplYWxvdXN5IHRoYXQgbHVya3Mgd2l0aGluIGRvb3JzLCBidXQgdG8gaG9ub3IgdGhvc2UgcHVibGljCiAgICAgICAgICAgICAgICAgICAgYW5kIHByaXZhdGUgbWVuIHdobyB3ZXJlIHdpc2UgYW5kIGdvb2QsIGFuZCB0byBsb2F0aGUgYW5kIGNoYXN0aXNlIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHdlcmUgd2lja2VkIGFuZCB1bnNjcnVwdWxvdXM7IGFuZCB0aGF0IHdhcyBob3cgdGhleSBhbGwgYmVjYW1lIGNvbXBldGl0b3JzIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpdmFscnkgb2Ygbm9ibGUgZGVlZHMuIDwvdHJhbnNsYXRpb24+"
translation['25.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T25lIG1vcmUgdGhpbmcgSSBoYXZlIHRvIHNheSBiZWZvcmUgSSBzaXQgZG93bi4gWW91IHdpbGwgc29vbgogICAgICAgICAgICAgICAgICAgIGJlIGxlYXZpbmcgdGhpcyBjb3VydC1ob3VzZSwgYW5kIHlvdSB3aWxsIGJlIHdhdGNoZWQgYnkgdGhlIGJ5c3RhbmRlcnMsIGJvdGgKICAgICAgICAgICAgICAgICAgICBhbGllbnMgYW5kIGNpdGl6ZW5zOyB0aGV5IHdpbGwgc2NhbiBlYWNoIG9uZSBhcyBoZSBhcHBlYXJzLCBhbmQgZGV0ZWN0IGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbG9va3MgdGhvc2Ugd2hvIGhhdmUgdm90ZWQgZm9yIGFjcXVpdHRhbC4gV2hhdCB3aWxsIHlvdSBoYXZlIHRvIHNheSBmb3IKICAgICAgICAgICAgICAgICAgICB5b3Vyc2VsdmVzLCBBdGhlbmlhbnMsIGlmIHlvdSBlbWVyZ2UgYWZ0ZXIgYmV0cmF5aW5nIHRoZSBsYXdzPyBXaXRoIHdoYXQKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uLCB3aXRoIHdoYXQgbG9vayB3aWxsIHlvdSByZXR1cm4gdGhlaXIgZ2F6ZT8gPC90cmFuc2xhdGlvbj4="
translation['25.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3cgd2lsbCB5b3UgbWFrZSB5b3VyIHdheSB0byB0aGUgU2FuY3R1YXJ5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBNb3RoZXItZ29kZGVzcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+V2hlcmUgY29waWVzIG9mIGFsbCBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBsYXdzIHdlcmUgZGVwb3NpdGVkIGZvciByZWZlcmVuY2UuPC9ub3RlPiBpZiB5b3Ugd2lzaCB0byBkbyBzbz8gRm9yIHN1cmVseQogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIG5ldmVyIGdvIGluZGl2aWR1YWxseSB0byBjb25zdWx0IHRoZSBsYXdzIGFzIGlmIHRoZXkgd2VyZSBzdGlsbCB2YWxpZCwKICAgICAgICAgICAgICAgICAgICB1bmxlc3MgeW91IGhhdmUgbm93IGNvbGxlY3RpdmVseSBjb25maXJtZWQgdGhlbSBiZWZvcmUgeW91IGRlcGFydC4gSG93IG9uIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IG9mIGVhY2ggbW9udGggd2lsbCB5b3UgY2xpbWIgdGhlIEFjcm9wb2xpcyBhbmQgcHJheSBmb3IgYmxlc3NpbmdzIG9uIHRoZQogICAgICAgICAgICAgICAgICAgIFN0YXRlIGFuZCBvbiB5b3Vyc2VsdmVzLCB3aGVuIHRoZSBkZWZlbmRhbnQgYW5kIGhpcyB3b3J0aHkgZmF0aGVyIGFyZSByZWdpc3RlcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXJlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNS40IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNS40PC9iaWJsPi48L25vdGU+IGFuZCB5b3UgaGF2ZSBnaXZlbiB5b3VyIHZlcmRpY3QgY2xlYW4gYWdhaW5zdCB5b3VyCiAgICAgICAgICAgICAgICAgICAgb2F0aHMgYW5kIHRoZSBkb2N1bWVudHMgdGhlcmUgcHJlc2VydmVkPyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI1LjQiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI1LjQ8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['25.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+T3IKICAgICAgICAgICAgICAgICAgICB3aGF0IHdpbGwgeW91IHNheSwgQXRoZW5pYW5zLCB3aGF0IHdpbGwgeW91IHNheSwgaWYgc29tZW9uZSBkZXRlY3RzIGFuZAogICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9ucyB0aG9zZSBvZiB5b3Ugd2hvIGhhdmUgdm90ZWQgZm9yIGFjcXVpdHRhbD8gV2hhdCB3aWxsIHlvdSBhbnN3ZXI/IFRoYXQKICAgICAgICAgICAgICAgICAgICB5b3Ugd2VyZSBzYXRpc2ZpZWQgd2l0aCBoaW0/IEJ1dCB3aG8gd2lsbCBkYXJlIHRvIHNheSB0aGF0PyBXaG8gd2lsbCBjaG9vc2UgdG8KICAgICAgICAgICAgICAgICAgICBpbmhlcml0IHRoaXMgZmVsbG93J3Mgd2lja2VkbmVzcywgd2l0aCB0aGUgZXhlY3JhdGlvbiBhbmQgaW5mYW15IHRoYXQgaXQKICAgICAgICAgICAgICAgICAgICBlbnRhaWxzPyBXaWxsIGVhY2ggb2YgeW91IGRlbnkgdGhhdCBoZSBhY3F1aXR0ZWQgaGltPyBJbiB0aGF0IGNhc2UgeW91IHdpbGwgaGF2ZQogICAgICAgICAgICAgICAgICAgIHRvIGludm9rZSBhIGN1cnNlIG9uIHRoZSBhY3F1aXR0ZXJzLCBhcyBhIGd1YXJhbnRlZSBmcm9tIGVhY2ggb2YgeW91IHRoYXQgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgbm90IGhpbXNlbGYgb25lIG9mIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['25.101'] = ""
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JdCBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgIGNvbmNsdXNpdmVseSBwcm92ZWQsIG1lbiBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZGVmZW5kYW50LCBBcmlzdG9nZWl0b24sIGlzIGEgc3RhdGUtZGVidG9yIGFuZCBkaXNmcmFuY2hpc2VkLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBsYXdzIGV4cHJlc3NseSBmb3JiaWQgYWxsIHN1Y2ggdG8gYWRkcmVzcyB0aGUgQXNzZW1ibHkuIEJ1dCBpdCBpcyB5b3VyIGR1dHkKICAgICAgICAgICAgICAgICAgICB0byByZXN0cmFpbiBhbmQgY2hlY2sgYWxsIGxhdy1icmVha2VycywgYnV0IGVzcGVjaWFsbHkgdGhvc2Ugd2hvIGhvbGQgb2ZmaWNlIGFuZAogICAgICAgICAgICAgICAgICAgIHRha2UgcGFydCBpbiBwdWJsaWMgYWZmYWlycywgPC90cmFuc2xhdGlvbj4="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJlY2F1c2Ugc3VjaCBtZW4KICAgICAgICAgICAgICAgICAgICB0ZW5kIHRvIGluanVyZSB0aGUgY29tbXVuaXR5LCBpZiB0aGV5IGFyZSB1bnByaW5jaXBsZWQsIGFuZCBvbiB0aGUgb3RoZXIgaGFuZCB0bwogICAgICAgICAgICAgICAgICAgIGNvbmZlciB0aGUgZ3JlYXRlc3QgYmVuZWZpdCB1cG9uIGl0LCBpZiB0aGV5IGFyZSBob25lc3QgbWVuIGFuZCB3aWxsaW5nIHRvIGFiaWRlCiAgICAgICAgICAgICAgICAgICAgYnkgdGhlIGxhd3MuIElmIHlvdSBvbmNlIGFsbG93IHRob3NlIHdobyBhZG1pbmlzdGVyIGFueSBwYXJ0IG9mIG91ciBwdWJsaWMKICAgICAgICAgICAgICAgICAgICBhZmZhaXJzIHRvIGJyZWFrIHRoZSBsYXdzIGFuZCBvdmVycmlkZSB0aGUgZXN0YWJsaXNoZWQgcHJpbmNpcGxlcyBvZiBqdXN0aWNlLAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5b25lIHdobyBoYXMgYSBzdGFrZSBpbiB0aGUgY291bnRyeSBpcyBib3VuZCB0byBzdWZmZXIgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgIHdpY2tlZG5lc3MuIDwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBqdXN0IGFzIG9uIGEgdm95YWdlIGFuIGVycm9yCiAgICAgICAgICAgICAgICAgICAgY29tbWl0dGVkIGJ5IGEgY29tbW9uIHNhaWxvciBjYXVzZXMgbGl0dGxlIGRhbWFnZSwgYnV0LCB3aGVuIHRoZSBoZWxtc21hbiBpcyBhdAogICAgICAgICAgICAgICAgICAgIGZhdWx0LCBoZSBicmluZ3MgZGlzYXN0ZXIgb24gZXZlcnlvbmUgYWJvYXJkLCBzbyB0aGUgZmF1bHRzIG9mIHByaXZhdGUgcGVyc29ucwogICAgICAgICAgICAgICAgICAgIGNhdXNlIGxvc3Mgbm90IHNvIG11Y2ggdG8gdGhlIGdlbmVyYWwgcHVibGljIGFzIHRvIHRoZW1zZWx2ZXMsIHdoaWxlIHRoZSBmYXVsdHMKICAgICAgICAgICAgICAgICAgICBvZiBydWxlcnMgYW5kIHN0YXRlc21lbiBjb21lIGhvbWUgdG8gYWxsIGNpdGl6ZW5zIGFsaWtlLiA8L3RyYW5zbGF0aW9uPg=="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoYXQgd2FzIHdoeSBTb2xvbiBvcmRhaW5lZCB0aGF0IHRoZSBwZW5hbHRpZXMgZm9yIHByaXZhdGUKICAgICAgICAgICAgICAgICAgICBjaXRpemVucyBzaG91bGQgYmUgc2xvdywgYnV0IGZvciBtYWdpc3RyYXRlcyBhbmQgcG9saXRpY2FsIGxlYWRlcnMgc3dpZnQsCiAgICAgICAgICAgICAgICAgICAgYXNzdW1pbmcgdGhhdCBmcm9tIHRoZSBmb3JtZXIgb25lIGNhbiBnZXQgc2F0aXNmYWN0aW9uIGV2ZW4gYWZ0ZXIgc29tZSBkZWxheSwKICAgICAgICAgICAgICAgICAgICBidXQgdGhhdCBvbmUgY2Fubm90IHdhaXQgZm9yIHRoZSBsYXR0ZXIsIGJlY2F1c2UgdGhlcmUgd2lsbCBiZSBubyBwcm9zcGVjdCBvZgogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQgaWYgdGhlIGNvbnN0aXR1dGlvbiBpcyBkZXN0cm95ZWQuIE5vIG9uZSB3aWxsIGJlIHNvIGltcHVkZW50IG9yIHNvCiAgICAgICAgICAgICAgICAgICAgcHJldGVudGlvdXMgdGhhdCBoZSB3aWxsIGF0dGVtcHQgdG8gZ2FpbnNheSB0aGVzZSBwcmluY2lwbGVzLCBleGNlcHQKICAgICAgICAgICAgICAgICAgICBBcmlzdG9nZWl0b24gaGVyZSB3aXRoIGhpcyByZWNrbGVzcyB3aWNrZWRuZXNzLiBPbiB0aGUgY29udHJhcnkgd2Ugc2hhbGwgZmluZAogICAgICAgICAgICAgICAgICAgIHRoYXQsIHdoZW4gb25jZSB5b3UgaGF2ZSBnaXZlbiBhbiBhZHZlcnNlIHZlcmRpY3QsIGFsbCBtYWdpc3RyYXRlcyBhbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgc3RhdGVzbWVuIGFjY2VwdCB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBvbiB0aGUgb25lIGhhbmQsCiAgICAgICAgICAgICAgICAgICAgd2hlbmV2ZXIgYW55IG9mZmljaWFscyBoYXZlIGJlZW4gcmVqZWN0ZWQgYnkgdm90ZSwgdGhleSBpbnN0YW50bHkgY2Vhc2UgdG8gaG9sZAogICAgICAgICAgICAgICAgICAgIG9mZmljZSBhbmQgYXJlIHN0cmlwcGVkIG9mIHRoZWlyIG9mZmljaWFsIGNyb3duczsgYW5kIG9uIHRoZSBvdGhlciBoYW5kLCBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAganVkaWNpYWwgYXJjaG9ucyB3aG8gYXJlIGRpc3F1YWxpZmllZCBmb3IgcHJvbW90aW9uIHRvIHRoZSBBcmVvcGFndXMgZm9yYmVhciB0bwogICAgICAgICAgICAgICAgICAgIGZvcmNlIHRoZWlyIHdheSBpbiBhbmQgc3VibWl0IGh1bWJseSB0byB5b3VyIGRlY2lzaW9uLiBBbmQgdGhpcyBpcyBvbmx5CiAgICAgICAgICAgICAgICAgICAgcmVhc29uYWJsZTsgZm9yIGp1c3QgYXMgdGhleSBiZWxpZXZlIHRoYXQgcHJpdmF0ZSBjaXRpemVucyBvdWdodCB0byBvYmV5IHRoZW0KICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgYXJlIHJ1bGVycywgc28gd2hlbiB0aGV5IGluIHRoZWlyIHR1cm4gZGVzY2VuZCB0byB0aGUgcmFuayBvZiBwcml2YXRlCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbnMsIHRoZXkgb3VnaHQgdG8gc3VibWl0IHRvIHRoZSBsYXdzLCB3aGljaCBhcmUgdGhlIHJlYWwgcnVsZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIFN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['26.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBhbGwgdGhlIHN0YXRlc21lbiwgaWYgeW91IHdpbGwKICAgICAgICAgICAgICAgICAgICBwYXNzIHRoZW0gaW4gcmV2aWV3IGZyb20gdGhlIGVhcmxpZXN0IHRpbWVzLCBjYW4gYmUgcHJvdmVkIHRvIGhhdmUgc3VibWl0dGVkIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgd2F5IHRvIHlvdXIgY29uc3RpdHV0aW9uYWwgZGVjcmVlcy4gSXQgaXMgc2FpZCB0aGF0IEFyaXN0ZWlkZXMgd2FzCiAgICAgICAgICAgICAgICAgICAgYmFuaXNoZWQgYnkgeW91ciBhbmNlc3RvcnMgYW5kIGxpdmVkIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMDg3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTEwODciPkFlZ2luYTwvcGxhY2VOYW1lPiB0aWxsIHRoZSBwZW9wbGUgcmVjYWxsZWQgaGltLCBhbmQgdGhhdCBNaWx0aWFkZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgUGVyaWNsZXMsIGJlaW5nIGZpbmVkIHRoaXJ0eSBhbmQgZmlmdHkgdGFsZW50cyByZXNwZWN0aXZlbHksIGRpZCBub3QgdHJ5IHRvCiAgICAgICAgICAgICAgICAgICAgaGFyYW5ndWUgdGhlIHBlb3BsZSB1bnRpbCB0aGV5IGhhZCBwYWlkIGluIGZ1bGwuIDwvdHJhbnNsYXRpb24+"
translation['26.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdvdWxkIGJlIGEgbW9zdCBzY2FuZGFsb3VzIHN0YXRlIG9mIHRoaW5ncyBpZiwgd2hpbGUgdGhlc2UgbWVuLCB0byB3aG9tIHlvdQogICAgICAgICAgICAgICAgICAgIHdlcmUgaW5kZWJ0ZWQgZm9yIHNvIG1hbnkgc2VydmljZXMsIHdlcmUgbm90IGFsbG93ZWQgdG8gZG8gYW55dGhpbmcgY29udHJhcnkgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIGVzdGFibGlzaGVkIGxhd3MsIHRoaXMgbWFuLCB3aG8gaGFzIG5ldmVyIGRvbmUgeW91IGEgc2luZ2xlIGdvb2Qgc2VydmljZSwKICAgICAgICAgICAgICAgICAgICBidXQgaGFzIGNvbW1pdHRlZCBhIHByb2RpZ2lvdXMgbnVtYmVyIG9mIG9mZmVuY2VzLCBzaG91bGQgYmUgZm91bmQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGF0IHlvdXIgaGFuZHMsIHNvIHJlYWRpbHkgYW5kIHNvIGNvbnRyYXJ5IHRvIGp1c3RpY2UgYW5kIGV4cGVkaWVuY3ksCiAgICAgICAgICAgICAgICAgICAgdGhlIHJpZ2h0IHRvIHRyYW5zZ3Jlc3MgdGhlIGxhd3MuIEFuZCB3aHkgYXBwZWFsIHRvIGFuY2llbnQgaGlzdG9yeT8gQ291bnQgdXAKICAgICAgICAgICAgICAgICAgICB0aGUgbWVuIG9mIHlvdXIgb3duIGRheXMgYW5kIHNlZSBpZiBhbnlvbmUgaGFzIGV2ZXIgYmVlbiBmb3VuZCBzbyBzaGFtZWxlc3MuIEEKICAgICAgICAgICAgICAgICAgICBjYXJlZnVsIHNjcnV0aW55IHdpbGwgbm90IHJldmVhbCBhIHNpbmdsZSBpbnN0YW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['26.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBhcGFydCBmcm9tIGFsbCB0aGlzLCB3aGVuZXZlciBhIG1hbiBsb2RnZXMgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICBqdWRpY2lhbCBBcmNob25zIGFuIG9iamVjdGlvbiBhZ2FpbnN0IGEgZGVjcmVlIG9yIGxhdywgdGhhdCBsYXcgb3IgZGVjcmVlIGlzCiAgICAgICAgICAgICAgICAgICAgaW52YWxpZCBhbmQgdGhlIG1vdmVyIG9yIHByb3Bvc2VyIGhhcyBub3QgdGhlIGltcHVkZW5jZSB0byBlbXBsb3kgdmlvbGVuY2UsIGJ1dAogICAgICAgICAgICAgICAgICAgIGxveWFsbHkgYWNjZXB0cyB5b3VyIGRlY2lzaW9uLCBldmVuIGlmIGhlIGlzIHRoZSBmb3JlbW9zdCBvcmF0b3Igb3IKICAgICAgICAgICAgICAgICAgICBhZG1pbmlzdHJhdG9yIGluIHlvdXIgY2l0eS4gWWV0IGlzIGl0IG5vdCBhYnN1cmQgdGhhdCwgd2hpbGUgZGVjcmVlcyBwYXNzZWQgYnkKICAgICAgICAgICAgICAgICAgICB5b3UgaW4gZnVsbCBhc3NlbWJseSBhcyBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGxhd3Mgc2hvdWxkIGJlIGludmFsaWQsIHlvdQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBpbWFnaW5lIHRoYXQgeW91IG91Z2h0IHRvIG1ha2UgdGhlIHdoaW0gb2YgQXJpc3RvZ2VpdG9uIHRvIGZsb3V0IHRoZSBsYXdzCiAgICAgICAgICAgICAgICAgICAgbW9yZSBhdXRob3JpdGF0aXZlIHRoYW4gdGhlIGxhd3MgdGhlbXNlbHZlcz8gPC90cmFuc2xhdGlvbj4="
translation['26.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BZ2Fpbiwgd2hlbiBhIHBsYWludGlmZiBmYWlscyB0byBvYnRhaW4gYQogICAgICAgICAgICAgICAgICAgIGZpZnRoIHBhcnQgb2YgdGhlIHZvdGVzLCBpbiBjYXNlcyB3aGVyZSB0aGUgbGF3cyBmb3JiaWQgaGltIGhlbmNlZm9yd2FyZCB0bwogICAgICAgICAgICAgICAgICAgIGluZGljdCBhbnlvbmUgb3IgYXJyZXN0IGhpbSBvciBnaXZlIGhpbSBpbnRvIGN1c3RvZHksIGluIHRoZSBzYW1lIHdheSBub25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhvc2UgbGlhYmxlIHRvIHRoZXNlIGRpc3F1YWxpZmljYXRpb25zIGV2ZXIgZHJlYW1zIG9mIGRlZnlpbmcgdGhlbS4gQnV0IGZvcgogICAgICAgICAgICAgICAgICAgIEFyaXN0b2dlaXRvbiwgaXQgc2VlbXMsIGFuZCBmb3IgQXJpc3RvZ2VpdG9uIGFsb25lLCBubyBjb3VydCwgbm8gbGF3IGhhcwogICAgICAgICAgICAgICAgICAgIGF1dGhvcml0eSBoaWdoZXIgdGhhbiBoaXMgb3duIGNhcHJpY2UuIDwvdHJhbnNsYXRpb24+"
translation['26.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5OZWl0aGVyCiAgICAgICAgICAgICAgICAgICAgeW91IG5vciB5b3VyIGFuY2VzdG9ycyBldmVyIHJlcGVudGVkIG9mIG9ic2VydmluZyB0aGVzZSBydWxlcywgZm9yIGl0IGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHNhbHZhdGlvbiBvZiBkZW1vY3JhY3kgdGhhdCBpdCBvdmVyY29tZXMgaXRzIGVuZW1pZXMgZWl0aGVyIGJ5IGdvb2QgY291bnNlbCBvcgogICAgICAgICAgICAgICAgICAgIGJ5IGFybXMsIGJ1dCBzdWJtaXRzIHRvIGl0cyBsYXdzIGVpdGhlciBieSBmcmVlIGNob2ljZSBvciB1bmRlciBjb25zdHJhaW50OyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoaXMgcHJpbmNpcGxlIGlzIHNvdW5kLCBpcyBhbGxvd2VkIGV2ZW4gYnkgdGhlIGRlZmVuZGFudCBoaW1zZWxmLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWZ0ZXIgdGhlIGRpc2FzdGVycyB0byB0aGUgR3JlZWsKICAgICAgICAgICAgICAgICAgICBmb3JjZXMgYXQgQ2hhZXJvbmVpYSwgd2hlbiB0aGUgdmVyeSBmb3VuZGF0aW9ucyBvZiBvdXIgU3RhdGUgd2VyZSB0aHJlYXRlbmVkCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgdXRtb3N0IGRhbmdlciwgd2hlbiBIeXBlcmVpZGVzIHByb3Bvc2VkIHRoYXQgdGhlIGRpc2ZyYW5jaGlzZWQgY2l0aXplbnMKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgcmVpbnN0YXRlZCBpbiBvcmRlciB0aGF0LCBpZiBhbnkgc3VjaCBkYW5nZXIgc2hvdWxkIG1lbmFjZSBvdXIgU3RhdGUsCiAgICAgICAgICAgICAgICAgICAgYWxsIGNsYXNzZXMgbWlnaHQgdW5pdGUgd2hvbGVoZWFydGVkbHkgaW4gdGhlIHN0cnVnZ2xlIGZvciBsaWJlcnR5LCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQgaW5kaWN0ZWQgdGhpcyBkZWNyZWUgYXMgdW5jb25zdGl0dXRpb25hbCBhbmQgY29uZHVjdGVkIGhpcyBjYXNlIGluCiAgICAgICAgICAgICAgICAgICAgY291cnQuIDwvdHJhbnNsYXRpb24+"
translation['26.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXMgaXQgbm90IG1vbnN0cm91cyB0aGF0LCB3aGVyZSB0aGUKICAgICAgICAgICAgICAgICAgICBzYWZldHkgb2YgdGhlIFN0YXRlIGlzIGludm9sdmVkLCB0aGUgZGVmZW5kYW50IHNob3VsZCBhbGxvdyBub25lIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGZlbGxvdy1jaXRpemVucyB0byBvYnRhaW4gZW5mcmFuY2hpc2VtZW50LCBidXQgc2hvdWxkIGNsYWltIHRoYXQgc2FtZSBmYXZvdXIKICAgICAgICAgICAgICAgICAgICBmcm9tIHlvdSBhbGwsIGluIG9yZGVyIHRvIGNvdmVyIGhpcyBvd24gbGF3bGVzc25lc3M/IFlldCB0aGUgZm9ybWVyIHZvdGUsCiAgICAgICAgICAgICAgICAgICAgQXJpc3RvZ2VpdG9uLCB3YXMgZmFyIG1vcmUgbGF3ZnVsIGFuZCBlcXVpdGFibGUgdGhhbiB0aGUgdm90ZSB3aGljaCB5b3Ugbm93CiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSB0aGUganVyb3JzIHRvIGNhc3QgaW4geW91ciBmYXZvdXIuIDwvdHJhbnNsYXRpb24+"
translation['26.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICB0aGUgb25lIHdhcyBmYWlyIGFuZCBlcXVhbCBmb3IgYWxsIGNpdGl6ZW5zIGFsaWtlLCBidXQgdGhpcyBpcyB1bmZhaXIgYW5kIGJyaW5ncwogICAgICAgICAgICAgICAgICAgIHByb2ZpdCB0byB5b3UgYWxvbmUgb2YgYWxsIHRoZSBwZW9wbGUgb2YgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+LiBUaGUgZmlyc3Qgd2FzIGludGVuZGVkIHRvIHByZXZlbnQgYSBwZWFjZSBieSB3aGljaCBvbmUKICAgICAgICAgICAgICAgICAgICBtYW4gd291bGQgaGF2ZSBiZWVuIHB1dCBpbiBjb250cm9sIG9mIHRoZSB3aG9sZSBnb3Zlcm5tZW50OyB0aGUgZWZmZWN0IG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICB2b3RlIHdpbGwgYmUgdGhhdCB5b3UgaGF2ZSByZWNlaXZlZCBhdXRob3JpdHkgdG8gdHJhbnNncmVzcyB3aXRoIGltcHVuaXR5IHRoZQogICAgICAgICAgICAgICAgICAgIGRlY2lzaW9ucyBvZiB0aGUganVyeSBhbmQgdGhlIGxhd3MgaGFuZGVkIGRvd24gYnkgb3VyIGFuY2VzdG9yc+KAlHRvIGRvLAogICAgICAgICAgICAgICAgICAgIGluIGZhY3QsIHdoYXRldmVyIHlvdSBwbGVhc2UuIDwvdHJhbnNsYXRpb24+"
translation['26.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5JIHNob3VsZCBsaWtlIHRvCiAgICAgICAgICAgICAgICAgICAgYXNrIGhpbSB3aGV0aGVyIGhpcyBpbmRpY3RtZW50IG9mIHRoZSBkZWNyZWUgd2FzIGxhd2Z1bCBhbmQgcmlnaHQgb3Igb24gdGhlCiAgICAgICAgICAgICAgICAgICAgb3RoZXIgaGFuZCB1bmp1c3QgYW5kIGlsbGVnYWwuIEZvciBpZiB0aGUgaW5kaWN0bWVudCB3YXMgaW5leHBlZGllbnQgYW5kIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGUgaW50ZXJlc3RzIG9mIHRoZSBwZW9wbGUsIG9uIHRoYXQgdmVyeSBncm91bmQgaGUgcmljaGx5IGRlc2VydmVzIGRlYXRoOyBidXQKICAgICAgICAgICAgICAgICAgICBpZiBpdCB3YXMgdXNlZnVsIGFuZCBhZHZhbnRhZ2VvdXMgdG8gdGhlIG1ham9yaXR5LCB3aHksIHByYXksIGRvIHlvdSBub3cgaW5zaXN0CiAgICAgICAgICAgICAgICAgICAgb24gdGhlIGp1cnkgZ2l2aW5nIGEgdmVyZGljdCB3aGljaCBpcyBjb250cmFyeSB0byB5b3VyIGluZGljdG1lbnQ/IE5vOyB5b3VyCiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGluZ3MgdGhlbiB3ZXJlIHVuanVzdCBhbmQgbm93IGFyZSBuZWl0aGVyIGxhd2Z1bCBub3IgYmVuZWZpY2lhbCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjaXRpemVucy4gPC90cmFuc2xhdGlvbj4="
translation['26.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5JIGNhbiBzZWUgdGhhdCB5b3UsIG1lbiBvZgogICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGFyZSBvZiB0aGlzIG9waW5pb24gaW4KICAgICAgICAgICAgICAgICAgICB5b3VyIG93biBiZWhhbGYsIGZvciB5b3UgaGF2ZSBlcmUgbm93IGRlY2lkZWQgbWFueSBzdWNoCiAgICAgICAgICAgICAgICAgICAg4oCcaW5mb3JtYXRpb25z4oCdIGxhaWQgYWdhaW5zdCBwcml2YXRlIG1lbi4gWWV0IGlzIGl0IG5vdCBhbGwKICAgICAgICAgICAgICAgICAgICB3cm9uZyB0aGF0IGluIHlvdXIgb3duIGNhc2UgeW91IHNob3VsZCBzbyBzY3J1cHVsb3VzbHkgZXhhbWluZSB0aGUgbGF3cywgYnV0IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhc2Ugb2YgdGhlc2UgbWlzY2hpZWYtbWFrZXJzLCB3aG8gYW5ub3kgZXZlcnlvbmUgYWxpa2UgYW5kIHByZXRlbmQgdG8gYmUKICAgICAgICAgICAgICAgICAgICBzdXBlcmlvciB0byB0aGUgcmVzdCwgeW91IHNob3VsZCBkaXNwbGF5IHN1Y2ggaW5kaWZmZXJlbmNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['26.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgaW1wb3NzaWJsZSB0aGF0IGFueSBvZgogICAgICAgICAgICAgICAgICAgIHlvdSBhcmUgb2Ygb3BpbmlvbiB0aGF0IHRoaW5ncyBvdWdodCB0byBiZSBhcyBJIHNheSwgYnV0IHRoYXQsIGJlY2F1c2Ugb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVjb3JvdXMgYmVoYXZpb3Igb2YgQXJpc3RvZ2VpdG9uIGFuZCBoaXMgdXNlZnVsbmVzcyB0byB5b3UsIHlvdSBvdWdodCB0byB3aW5rCiAgICAgICAgICAgICAgICAgICAgZXZlbiBhdCBoaXMgdmlvbGF0aW9uIG9mIHRoZSBsYXdzLiBJIHRoaW5rIEx5Y3VyZ3VzIGluIGhpcyBzcGVlY2ggaGFzCiAgICAgICAgICAgICAgICAgICAgc2F0aXNmYWN0b3JpbHkgcHJvdmVkIHRoYXQgdGhlIGRlZmVuZGFudCBpcyBhbiB1bnNjcnVwdWxvdXMgbWFuIGFuZCBoYXMgYW4KICAgICAgICAgICAgICAgICAgICBleHRyYW9yZGluYXJ5IGZhY3VsdHkgZm9yIGluanVzdGljZTsgYW5kIHRoYXQgaGUgaXMgbm90IGEgdXNlZnVsIGNpdGl6ZW4sIGFueW9uZQogICAgICAgICAgICAgICAgICAgIGNhbiBzZWUgZnJvbSBoaXMgcHVibGljIHBlcmZvcm1hbmNlcy4gPC90cmFuc2xhdGlvbj4="
translation['26.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hvbQogICAgICAgICAgICAgICAgICAgIGhhcyBoZSBicm91Z2h0IGludG8gY291cnQgdGhhdCBoZSBzdWNjZWVkZWQgaW4gY29udmljdGluZyBvbiB0aGUgY2hhcmdlcyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgbGFpZCBhZ2FpbnN0IGhpbT8gT3Igd2hhdCBzb3VyY2Ugb2YgcmV2ZW51ZSBoYXMgaGUgcHJvdmlkZWQgZm9yIHlvdT8gT3Igd2hhdAogICAgICAgICAgICAgICAgICAgIGRlY3JlZSBoYXMgaGUgZXZlciBkcmFmdGVkIHRoYXQgeW91IHdlcmUgbm90IGFmdGVyd2FyZHMgZ2xhZCB0byBkaXNvd24/IFRoZQogICAgICAgICAgICAgICAgICAgIHRydXRoIGlzLCBoZSBpcyBzbyB0YWN0bGVzcywgc28gdW4tR3JlZWsgaW4gaGlzIHRlbXBlcmFtZW50LCB0aGF0IHdoZW4gaGUgc2VlcwogICAgICAgICAgICAgICAgICAgIHlvdSBzb21ld2hhdCBhbmdyeSB3aXRoIGFueW9uZSBhbmQgcmF0aGVyIG1vcmUgZXhhc3BlcmF0ZWQgdGhhbiB0aGUgb2NjYXNpb24KICAgICAgICAgICAgICAgICAgICBjYWxscyBmb3IsIGhlIGF0IG9uY2UgYW50aWNpcGF0ZXMgeW91ciB3aXNoZXMgaW4gdGhlIG1vbWVudCBvZiB5b3VyIHdyYXRoIGFuZCBzbwogICAgICAgICAgICAgICAgICAgIG9wcG9zZXMgeW91ciBpbnRlcmVzdHMuIDwvdHJhbnNsYXRpb24+"
translation['26.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYSBzdGF0ZXNtYW4sCiAgICAgICAgICAgICAgICAgICAgYWN0aW5nIG9uIHlvdXIgYmVoYWxmLCBvdWdodCBub3QgdG8gZm9sbG93IHVwIHRoZSBoYXN0eSBzZW50aW1lbnRzIHRoYXQKICAgICAgICAgICAgICAgICAgICBhY2NvbXBhbnkgeW91ciBhbmdlciwgYnV0IHNob3VsZCBiZSBndWlkZWQgYnkgcmVhc29ucywgYnkgZXZlbnRzLCBieSB0aGUKICAgICAgICAgICAgICAgICAgICBvcHBvcnR1bml0aWVzIHRoYXQgcHJlc2VudCB0aGVtc2VsdmVzLiBGb3Igc2VudGltZW50cyBhcmUgd29udCB0byBjaGFuZ2UKICAgICAgICAgICAgICAgICAgICBxdWlja2x5LCBidXQgcmVhc29ucyB0byBzdWJzaXN0IGZvciBhIGxvbmdlciBwZXJpb2QuIFBheWluZyBubyByZWdhcmQgdG8gdGhpcwogICAgICAgICAgICAgICAgICAgIHRoZSBkZWZlbmRhbnQgZGV0ZWN0cyB0aGUgc2VjcmV0IHdlYWtuZXNzIG9mIGNvbW11bml0eSwgc28gdGhhdCB0aGUgc2FtZSBwb2xpY3kKICAgICAgICAgICAgICAgICAgICBpcyBib3VuZCB0byBiZSByYXRpZmllZCBvbmUgZGF5IGFuZCByZXBlYWxlZCB0aGUgbmV4dC4gPC90cmFuc2xhdGlvbj4="
translation['26.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QnV0IHBlcmhhcHMgYmVjYXVzZSB0aGUgcm9sZQogICAgICAgICAgICAgICAgICAgIGhlIGFkb3B0cyBpcyB0byByYWlsIGF0IGV2ZXJ5b25lLCB0byBzaG91dCBwZW9wbGUgZG93biBhbmQgZmluZCBmYXVsdCB3aXRoIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgc3BlZWNoZXMsIHRoZXJlZm9yZSBpdCBpcyBjb252ZW5pZW50IGluIHRoZXNlIHRpbWVzIHRvIHByb3RlY3QgaGltLiBHZW50bGVtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgSSBzd2VhciBieSB0aGUgZ29kZGVzcyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gdGhhdCB3aGF0IHRha2VzIHBsYWNlIG9uIHRoZSBodXN0aW5ncyBpcyBhIGRpc2dyYWNlIHRvCiAgICAgICAgICAgICAgICAgICAgb3VyIGNpdHksIGFuZCBpdCBpcyB0aHJvdWdoIHRoZSByZWNrbGVzc25lc3Mgb2Ygc3VjaCBzcGVha2VycyB0aGF0IHBvbGl0aWNhbAogICAgICAgICAgICAgICAgICAgIGxpZmUgaXMgbm93IGRpc2NyZWRpdGVkIHdpdGggYWxsIGRlY2VudCBjaXRpemVucy4gQnV0IGlmIGFueSBvZiB5b3UgaGFwcGVuIHRvCiAgICAgICAgICAgICAgICAgICAgbGlrZSB0aGF0IHNvcnQgb2YgdGhpbmcsIHlvdSB3aWxsIG5ldmVyIHdhbnQgZm9yIHN1Y2ggcGVyZm9ybWVycy4gV2h5LCBldmVuIG5vdwogICAgICAgICAgICAgICAgICAgIHRoZSBwbGF0Zm9ybSBzd2FybXMgd2l0aCB0aGVtLiBGb3IgdG8gcGljayBob2xlcyBpbiB0aGUgY291bnNlbCBvZmZlcmVkIGlzIG5vdAogICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdCwgYnV0IGl0IGlzIGRpZmZpY3VsdCB0byBhZHZpc2UgeW91IGFuZCBwZXJzdWFkZSB5b3UgdG8gcGFzcyBhbnkKICAgICAgICAgICAgICAgICAgICBpbmRpc3BlbnNhYmxlIHJlc29sdXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['26.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaWYgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgbm90IGFscmVhZHkgZGVjZWl2ZWQgeW91IGJ5IHVzaW5nIHRoZXNlIHNhbWUgYXJndW1lbnRzLCB3aGVuIGhlIHdhcyBvbiB0cmlhbAogICAgICAgICAgICAgICAgICAgIGF0IHRoZSBlYXJsaWVyIGluZm9ybWF0aW9uLCBldmVuIHNvIGl0IHdvdWxkIG5vdCBiZSBqdXN0IHRvIG1ha2UgYW55IGNvbmNlc3Npb24KICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byB0aGUgZXhpc3RpbmcgbGF3czsgZm9yIHlvdSBtdXN0IG5vdCBhbGxvdyBzb21lIHBlcnNvbnMgdG8gYnJlYWsgdGhlCiAgICAgICAgICAgICAgICAgICAgbGF3IGFuZCBpbnNpc3Qgb24gdGhlIHJlc3Qgb2JleWluZyBpdC4gWWV0IGp1c3QgcG9zc2libHkgaXQgbWlnaHQgdGhlbiBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBtb3JlIHJlYXNvbmFibGUgdG8gdHJ1c3QgaGltIGFuZCBncmFudCBoaW0gcHJpdmlsZWdlcyBhbmQgc2FjcmlmaWNlIHNvbWUgb2YKICAgICAgICAgICAgICAgICAgICB0aGVzZSBwcmluY2lwbGVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['26.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgeW91IGhhZCBsZXQgaGltCiAgICAgICAgICAgICAgICAgICAgb2ZmLCBhZG1pdHRlZGx5IGluIGhvcGUgb2YgYW1lbmRtZW50LCBhbmQgdGhlbiBzaG9ydGx5IGFmdGVyIGhhZCB0byBwdW5pc2ggdGhlCiAgICAgICAgICAgICAgICAgICAgc2FtZSBtYW4gYWdhaW4gZm9yIHNwZWFraW5nIGFuZCBhY3RpbmcgYWdhaW5zdCB0aGUgYmVzdCBpbnRlcmVzdHMgb2YgdGhlIGNpdHksCiAgICAgICAgICAgICAgICAgICAgd2hhdCByZWFzb25hYmxlIGV4Y3VzZSBpcyBsZWZ0IHlvdSBpZiB5b3UgYXJlIGEgc2Vjb25kIHRpbWUgaG9vZHdpbmtlZD8gV2hlbiB5b3UKICAgICAgICAgICAgICAgICAgICBoYXZlIHRyaWVkIGhpbSBieSBkZWVkcywgd2h5IG5lZWQgeW91IHRydXN0IGhpcyB3b3Jkcz8gSW4gY2FzZXMgd2hlcmUgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBub3QgeWV0IGFuIGFjY3VyYXRlIHRlc3QgcmVhZHkgdG8gaGFuZCwgaXQgbWF5IHBlcmhhcHMgYmUgbmVjZXNzYXJ5IHRvIGp1ZGdlIGJ5CiAgICAgICAgICAgICAgICAgICAgd29yZHMuIDwvdHJhbnNsYXRpb24+"
translation['26.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGZvciBteXNlbGYsIEkgYW0gYW1hemVkIHRoYXQgdGhlcmUKICAgICAgICAgICAgICAgICAgICBhcmUgbWVuIHNvIGNvbnN0aXR1dGVkIHRoYXQsIHRob3VnaCB0aGV5IGRlcG9zaXQgcHJpdmF0ZSBwcm9wZXJ0eSB3aXRoIHRob3NlCiAgICAgICAgICAgICAgICAgICAgb25seSB3aG9zZSBwYXN0IHJlY29yZCBzaG93cyB0aGVtIHRvIGJlIGhvbmVzdCwgdGhleSBlbnRydXN0IHB1YmxpYyBhZmZhaXJzIHRvCiAgICAgICAgICAgICAgICAgICAgbWVuIHdobyBoYXZlIGJlZW4gYWRtaXR0ZWRseSBwcm92ZWQgdW5zY3J1cHVsb3VzLiBObyBvbmUgd291bGQgZHJlYW0gb2Ygc2V0dGluZwogICAgICAgICAgICAgICAgICAgIGEgc29ycnkgbW9uZ3JlbCB0byBndWFyZCBhIGZsb2NrOyB5ZXQgc29tZSBwZW9wbGUgc2F5IHRoYXQsIHRvIGtlZXAgd2F0Y2ggb24KICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gYWRtaW5pc3RlciB0aGUgU3RhdGUsIG9uZSBuZWVkIG9ubHkgZW1wbG95IHRoZSBmaXJzdCBjb21lcnMsIG1lbiB3aG8KICAgICAgICAgICAgICAgICAgICBwcmV0ZW5kIHRvIGRldGVjdCBkZWxpbnF1ZW50cywgYnV0IG5lZWQgdGhlIG1vc3QgY2FyZWZ1bCB3YXRjaGluZyB0aGVtc2VsdmVzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgeW91IGFyZQogICAgICAgICAgICAgICAgICAgIHdpc2UsIHlvdSB3aWxsIGJlYXIgdGhpcyBpbiBtaW5kLiBUdXJuIGEgZGVhZiBlYXIgdG8gdGhvc2Ugd2hvIHByb2Zlc3MgdG8gYmUKICAgICAgICAgICAgICAgICAgICBkZXZvdGVkIHRvIHlvdSwgYW5kIHRha2UgeW91ciBvd24gcHJlY2F1dGlvbnMgdG8gZW5zdXJlIHRoYXQgeW91IGdyYW50IHRvIG5vIG9uZQogICAgICAgICAgICAgICAgICAgIHRoZSBwb3dlciB0byBtYWtlIHlvdXIgbGF3cyBudWxsIGFuZCB2b2lkLCBlc3BlY2lhbGx5IHRvIG5vIG9uZSBvZiB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICBwcmV0ZW5kIHRvIGJlIGFibGUgdG8gc3BlYWsgYW5kIGxlZ2lzbGF0ZSBpbiB0aGUgaW50ZXJlc3RzIG9mIHRoZSBtYXNzZXMuIEl0IGlzCiAgICAgICAgICAgICAgICAgICAgcHJlcG9zdGVyb3VzIHRoYXQgeW91ciBhbmNlc3RvcnMgZmFjZWQgZGVhdGggdG8gc2F2ZSB0aGUgbGF3cyBmcm9tIGRlc3RydWN0aW9uLAogICAgICAgICAgICAgICAgICAgIGJ1dCB0aGF0IHlvdSBkbyBub3QgZXZlbiBwdW5pc2ggdGhvc2Ugd2hvIGhhdmUgb2ZmZW5kZWQgYWdhaW5zdCB0aGUgbGF3czsgdGhhdAogICAgICAgICAgICAgICAgICAgIHlvdSBzZXQgdXAgaW4gdGhlIG1hcmtldC1wbGFjZSBhIGJyb256ZSBzdGF0dWUgb2YgU29sb24sIHdobyBmcmFtZWQgdGhlIGxhd3MsCiAgICAgICAgICAgICAgICAgICAgYnV0IHNob3cgeW91cnNlbHZlcyByZWdhcmRsZXNzIG9mIHRob3NlIHZlcnkgbGF3cyBmb3IgdGhlIHNha2Ugb2Ygd2hpY2ggaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgc3VjaCBleGNlcHRpb25hbCBob25vci4gPC90cmFuc2xhdGlvbj4="
translation['26.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5JcyBpdCBub3QgYW4KICAgICAgICAgICAgICAgICAgICBhYnN1cmQgc2l0dWF0aW9uIHRoYXQgeW91IHNob3VsZCBieSBsZWdpc2xhdGluZyBleHByZXNzIHlvdXIgYW5nZXIgYWdhaW5zdCB0aGUKICAgICAgICAgICAgICAgICAgICBjcmltaW5hbHMsIGJ1dCwgd2hlbiB5b3UgaGF2ZSBjYXVnaHQgYW55IG9mIHRoZW0gcmVkLWhhbmRlZCwgc2hvdWxkIHByb2NlZWQgdG8KICAgICAgICAgICAgICAgICAgICBsZXQgdGhlbSBnbyB1bnNjYXRoZWQ/IFRoYXQgdGhlIGxhd2dpdmVyLCBhIHNpbmdsZSBpbmRpdmlkdWFsLCBzaG91bGQgb24geW91cgogICAgICAgICAgICAgICAgICAgIGJlaGFsZiBpbmN1ciB0aGUgaG9zdGlsaXR5IG9mIGFsbCB0aGUgd29ydGhsZXNzLCBidXQgdGhhdCB5b3UgeW91cnNlbHZlcywKICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ZWQgdG9nZXRoZXIgdG8gZGVmZW5kIHlvdXIgb3duIGludGVyZXN0cywgc2hvdWxkIG5vdCBldmVuIGRpc3BsYXkgeW91cgogICAgICAgICAgICAgICAgICAgIGhhdHJlZCBvZiB0aGUgd2lja2VkLCBidXQgc2hvdWxkIGJlIG92ZXJwb3dlcmVkIGJ5IHRoZSB3aWNrZWRuZXNzIG9mIGEgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbD8gVGhhdCB5b3Ugc2hvdWxkIGhhdmUgZml4ZWQgZGVhdGggYXMgdGhlIHBlbmFsdHkgaWYgYW55b25lIGNpdGVzIGEKICAgICAgICAgICAgICAgICAgICBsYXcgd2hpY2ggZG9lcyBub3QgZXhpc3QsIGFuZCB5ZXQgc2hvdWxkIGFsbG93IG1lbiB0byBlc2NhcGUgdW5wdW5pc2hlZCB3aG8KICAgICAgICAgICAgICAgICAgICByZWR1Y2UgdGhlIGV4aXN0aW5nIGxhd3MgdG8gdGhlIGxldmVsIG9mIGxhd3Mgd2hpY2ggZG8gbm90IGV4aXN0PyA8L3RyYW5zbGF0aW9uPg=="
translation['26.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHN1cmVzdCB3YXkgdG8KICAgICAgICAgICAgICAgICAgICByZWFsaXplIHRoZSBibGVzc2luZyBvZiBvYmVkaWVuY2UgdG8gdGhlIGVzdGFibGlzaGVkIGxhd3MsIGFuZCB0aGUgY3Vyc2Ugb2YKICAgICAgICAgICAgICAgICAgICBkZXNwaXNpbmcgYW5kIGRpc29iZXlpbmcgdGhlbSwgaXMgdG8gcHV0IGJlZm9yZSB5b3VyIGV5ZXMgYW5kIGV4YW1pbmUgc2VwYXJhdGVseQogICAgICAgICAgICAgICAgICAgIHRoZSBhZHZhbnRhZ2VzIHRoYXQgeW91IGRlcml2ZSBmcm9tIHRoZSBsYXdzIGFuZCB0aGUgcmVzdWx0cyBvZiBsYXdsZXNzbmVzcy4gRm9yCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgZmluZCB0aGF0IHRoZSBmcnVpdHMgb2YgbGF3bGVzc25lc3MgYXJlIG1hZG5lc3MsIGludGVtcGVyYW5jZSBhbmQKICAgICAgICAgICAgICAgICAgICBncmVlZCwgYnV0IGZyb20gdGhlIGxhd3MgY29tZSB3aXNkb20sIHNvYnJpZXR5IGFuZCBqdXN0aWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['26.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIGNsZWFybHkgc28sIGJlY2F1c2Ugd2UgY2FuIHNlZSB0aGF0IHRob3NlIGNpdGllcyBhcmUKICAgICAgICAgICAgICAgICAgICBiZXN0IG9yZGVyZWQgd2hpY2ggaGF2ZSBnaXZlbiBiaXJ0aCB0byB0aGUgYmVzdCBsYXdnaXZlcnMuIEZvciBhcyB0aGUgZGlzdGVtcGVycwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBib2R5IGFyZSBhcnJlc3RlZCBieSB0aGUgZGlzY292ZXJpZXMgb2YgcGh5c2ljaWFucywgc28gc2F2YWdlcnkgaXMKICAgICAgICAgICAgICAgICAgICBleHBlbGxlZCBmcm9tIHRoZSBzb3VsIGJ5IHRoZSB3aXNlIHB1cnBvc2VzIG9mIHRoZSBsZWdpc2xhdG9yLiBUbyBzdW0gdXAgd2UKICAgICAgICAgICAgICAgICAgICBzaGFsbCBmaW5kIG5vdGhpbmcgdmVuZXJhYmxlIG9yIGFkbWlyYWJsZSB3aGljaCBpcyBub3QgYXNzb2NpYXRlZCB3aXRoIGxhdywKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.27'] = ""
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBBcGhvYnVzLCBtZW4KICAgICAgICAgICAgICAgICAgICBvZiB0aGUganVyeSwgaGFkIGJlZW4gd2lsbGluZyB0byBkbyB3aGF0IGlzIGZhaXIsIG9yIHRvIHN1Ym1pdCB0aGUgbWF0dGVycyBpbgogICAgICAgICAgICAgICAgICAgIGRpc3B1dGUgYmV0d2VlbiB1cyB0byB0aGUgYXJiaXRyYXRpb24gb2YgZnJpZW5kcywgdGhlcmUgd291bGQgYmUgbm8gb2NjYXNpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgYSB0cm91Ymxlc29tZSBsYXdzdWl0OyBmb3IgSSBzaG91bGQgaGF2ZSBiZWVuIHNhdGlzZmllZCB0byBhYmlkZSBieSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uLCBhbmQgd2Ugc2hvdWxkIGhhdmUgaGFkIG5vIGNvbnRyb3ZlcnN5IHdpdGggaGltLiBTaW5jZSwgaG93ZXZlciwgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlZCB0byBsZXQgdGhvc2Ugd2VsbCBhY3F1YWludGVkIHdpdGggb3VyIGFmZmFpcnMgZ2l2ZSBhIGRlY2lzaW9uLCBhbmQgaGFzCiAgICAgICAgICAgICAgICAgICAgY29tZSBiZWZvcmUgeW91LCB3aG8gaGF2ZSBubyBhY2N1cmF0ZSBrbm93bGVkZ2Ugb2YgdGhlbSwgaXQgbXVzdCBiZSBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgY291cnQgdGhhdCBJIHRyeSB0byB3aW4gZnJvbSBoaW0gd2hhdCBpcyBteSBkdWUuIDwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkga25vdyB3ZWxsLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgaXQgaXMgYSBoYXJkIHRhc2sgdG8gZW50ZXIgaW50byBhIGNvbnRlc3QKICAgICAgICAgICAgICAgICAgICBpbiB3aGljaCBhbGwgbXkgZm9ydHVuZSBpcyBhdCBzdGFrZSB3aXRoIG1lbiB3aG8gYXJlIGFibGUgc3BlYWtlcnMgYW5kIGNsZXZlciBpbgogICAgICAgICAgICAgICAgICAgIHByZXBhcmluZyB0aGVpciBjYXNlLCB3aGlsZSBJIGJlY2F1c2Ugb2YgbXkgeW91dGggYW0gd2hvbGx5IHdpdGhvdXQgZXhwZXJpZW5jZQogICAgICAgICAgICAgICAgICAgIGluIGFmZmFpcnMuIFlldCBuZXZlcnRoZWxlc3MsIGFsdGhvdWdoIHRoZXkgaGF2ZSBldmVyeSBhZHZhbnRhZ2Ugb3ZlciBtZSwgSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgc3Ryb25nIGhvcGVzIHRoYXQgSSBzaGFsbCBvYnRhaW4ganVzdGljZSBpbiB5b3VyIGNvdXJ0LCBhbmQgdGhhdCwgYXMgZmFyIGF0CiAgICAgICAgICAgICAgICAgICAgbGVhc3QgYXMgcmVsYXRpbmcgdGhlIGZhY3RzLCBJIHNoYWxsIG15c2VsZiBzcGVhayB3ZWxsIGVub3VnaCB0byBlbnN1cmUgdGhhdCBub3QKICAgICAgICAgICAgICAgICAgICBhIHNpbmdsZSBkZXRhaWwgc2hhbGwgZXNjYXBlIHlvdSwgYW5kIHRoYXQgeW91IHdpbGwgbm90IGJlIGluIHRoZSBkYXJrIHJlZ2FyZGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBtYXR0ZXJzIGNvbmNlcm5pbmcgd2hpY2ggeW91IGFyZSB0byBjYXN0IHlvdXIgdm90ZS4gPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkkgYmVnIG9mIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCB0byBnaXZlIG1lIGEgZmF2b3JhYmxlCiAgICAgICAgICAgICAgICAgICAgaGVhcmluZywgYW5kLCBpZiB5b3UganVkZ2UgdGhhdCBJIGhhdmUgYmVlbiB3cm9uZ2VkLCB0byByZW5kZXIgbWUgdGhlIGFpZCB3aGljaAogICAgICAgICAgICAgICAgICAgIGlzIG15IGR1ZS4gSSBzaGFsbCBtYWtlIG15IHNwZWVjaCBhcyBicmllZiBhcyBwb3NzaWJsZSwgYW5kIHNoYWxsIGJlZ2luIGJ5CiAgICAgICAgICAgICAgICAgICAgZW5kZWF2b3JpbmcgdG8gaW5mb3JtIHlvdSBvZiB0aGUgZmFjdHMgZnJvbSB3aGljaCB5b3Ugd2lsbCBtb3N0IHJlYWRpbHkKICAgICAgICAgICAgICAgICAgICB1bmRlcnN0YW5kIHRoZSBjYXNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5EZW1vc3RoZW5lcywgbXkgZmF0aGVyLCBtZW4gb2YgdGhlIGp1cnksIGxlZnQgYXQgaGlzIGRlYXRoIGFuCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlIG9mIG5lYXJseSBmb3VydGVlbiB0YWxlbnRzLCBhIHNvbiwgbXlzZWxmLCBhZ2VkIHNldmVuLCBhbmQgbXkgc2lzdGVyLAogICAgICAgICAgICAgICAgICAgIGFnZWQgZml2ZSwgYW5kIGhpcyB3aWRvdywgb3VyIG1vdGhlciwgd2hvIGhhZCBicm91Z2h0IGhpbSBhIGZvcnR1bmUgb2YgZmlmdHkKICAgICAgICAgICAgICAgICAgICBtaW5hZS4gSGUgaGFkIHRha2VuIHRob3VnaHQgZm9yIG91ciB3ZWxmYXJlLCBhbmQsIHdoZW4gaGUgd2FzIGFib3V0IHRvIGRpZSwgcHV0CiAgICAgICAgICAgICAgICAgICAgYWxsIHRoaXMgcHJvcGVydHkgaW4gdGhlIGhhbmRzIG9mIHRoZSBkZWZlbmRhbnQsIEFwaG9idXMsIGFuZCBEZW1vcGhvbiwgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgRGVtbywgbmVwaGV3cyBvZiBoaXMsIG9uZSBieSBoaXMgYnJvdGhlciwgdGhlIG90aGVyIGJ5IGhpcyBzaXN0ZXIsIGFuZCBvZgogICAgICAgICAgICAgICAgICAgIFRoZXJpcHBpZGVzIG9mIFBhZWFuaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBhZWFuaWEgd2FzIGEgZGVtZSBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgdHJpYmUgUGFuZGlvbmlzLjwvbm90ZT4gd2hvIHdhcyBub3QgYSByZWxhdGl2ZSwgYnV0IGhhZCBiZWVuIGhpcyBmcmllbmQKICAgICAgICAgICAgICAgICAgICBmcm9tIGJveWhvb2QuIDwvdHJhbnNsYXRpb24+"
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIFRoZXJpcHBpZGVzIGhlIGdhdmUgdGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3Qgb24gc2V2ZW50eSBtaW5hZSBvZiBteSBwcm9wZXJ0eSwgdG8gYmUgZW5qb3llZCBieSBoaW0gdW50aWwgSSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBjb21lIG9mIGFnZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGEgeW91dGgsIG9uIHJlYWNoaW5nIHRoZSBhZ2Ugb2YgZWlnaHRlZW4sIHdhcywgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgYW4gb2ZmaWNpYWwgZXhhbWluYXRpb24g77yIPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrTOv866zrnOvM6xz4PhvbfOsTwvZm9yZWlnbj7vvIksIGR1bHkgZW50ZXJlZCBvbiB0aGUgbGlzdCBvZiB0aGUgbWVtYmVycyBvZgogICAgICAgICAgICAgICAgICAgICAgICBoaXMgdHJpYmUsIGFuZCBhc3N1bWVkIHRoZSBzdGF0dXMgYW5kIHRoZSBkdXRpZXMgb2YgYSBjaXRpemVuLjwvbm90ZT4gaW4KICAgICAgICAgICAgICAgICAgICBvcmRlciB0aGF0IGF2YXJpY2UgbWlnaHQgbm90IHRlbXB0IGhpbSB0byBtaXNtYW5hZ2UgbXkgYWZmYWlycy4gVG8gRGVtb3Bob24gaGUKICAgICAgICAgICAgICAgICAgICBnYXZlIG15IHNpc3RlciB3aXRoIGEgZG93cnkgb2YgdHdvIHRhbGVudHMsIHRvIGJlIHBhaWQgYXQgb25jZSwgYW5kIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGRlZmVuZGFudCBoaW1zZWxmIGhlIGdhdmUgb3VyIG1vdGhlciB3aXRoIGEgZG93cnkgb2YgZWlnaHR5IG1pbmFlLCBhbmQgdGhlIHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgdG8gdXNlIG15IGhvdXNlIGFuZCBmdXJuaXR1cmUuIEhpcyB0aG91Z2h0IHdhcyB0aGF0LCBpZiBoZSBzaG91bGQgdW5pdGUgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4gdG8gbWUgYnkgc3RpbGwgY2xvc2VyIHRpZXMsIHRoZXkgd291bGQgbG9vayBhZnRlciBteSBpbnRlcmVzdHMgdGhlIGJldHRlcgogICAgICAgICAgICAgICAgICAgIGJlY2F1c2Ugb2YgdGhpcyBhZGRlZCBib25kIG9mIGtpbnNoaXAuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBhIHlvdXRoLCBvbiByZWFjaGluZyB0aGUgYWdlIG9mIGVpZ2h0ZWVuLCB3YXMsIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgICAgIGFuIG9mZmljaWFsIGV4YW1pbmF0aW9uIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs60zr/Ous65zrzOsc+D4b23zrE8L2ZvcmVpZ24+77yJLCBkdWx5IGVudGVyZWQgb24gdGhlIGxpc3Qgb2YgdGhlIG1lbWJlcnMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgaGlzIHRyaWJlLCBhbmQgYXNzdW1lZCB0aGUgc3RhdHVzIGFuZCB0aGUgZHV0aWVzIG9mIGEgY2l0aXplbi48L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dAogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1lbiwgd2hvIHRvb2sgYXQgb25jZSB0aGVpciBvd24gbGVnYWNpZXMgZnJvbSB0aGUgZXN0YXRlLCBhbmQgYXMgbXkKICAgICAgICAgICAgICAgICAgICBndWFyZGlhbnMgYWRtaW5pc3RlcmVkIGFsbCB0aGUgcmVtYWluZGVyIGZvciB0ZW4geWVhcnMsIGhhdmUgcm9iYmVkIG1lIG9mIG15CiAgICAgICAgICAgICAgICAgICAgZW50aXJlIGZvcnR1bmUgZXhjZXB0IHRoZSBob3VzZSwgYW5kIGZvdXJ0ZWVuIHNsYXZlcyBhbmQgdGhpcnR5IHNpbHZlciBtaW5hZSwKICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IGhhdmUgaGFuZGVkIG92ZXIgdG8gbWXigJRhbW91bnRpbmcgaW4gYWxsIHRvIGFib3V0IHNldmVudHkKICAgICAgICAgICAgICAgICAgICBtaW5hZS4gPC90cmFuc2xhdGlvbj4="
translation['27.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMsIG1lbiBvZiB0aGUganVyeSwgdG8gcHV0IGl0IGFzCiAgICAgICAgICAgICAgICAgICAgYnJpZWZseSBhcyBwb3NzaWJsZSwgaXMgYSBzdW1taW5nIHVwIG9mIHRoZSB3cm9uZ3MgdGhleSBoYXZlIGRvbmUgbWUuIEJ1dCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmYWN0IHRoYXQgdGhlIGFtb3VudCBvZiBwcm9wZXJ0eSBsZWZ0IGJ5IG15IGZhdGhlciB3YXMgYXMgbXVjaCBhcyBJIGhhdmUgc3RhdGVkCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgbWVuIHRoZW1zZWx2ZXMgaGF2ZSBwcm92ZWQgdGhlIG1vc3QgY29udmluY2luZyB3aXRuZXNzZXMsIGZvciBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdGF4LWNvbXBhbnk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RWFjaCBvZiB0aGUgdGVuIEF0aGVuaWFuIHRyaWJlcwogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCBvbmUgaHVuZHJlZCBhbmQgdHdlbnR5IG1lbiBhcyB0aGVpciByaWNoZXN0IG1lbWJlcnMuIFRoZXNlIHR3ZWx2ZQogICAgICAgICAgICAgICAgICAgICAgICBodW5kcmVkIG1lbiB3ZXJlIGRpdmlkZWQgaW50byB0d2VudHkgZ3JvdXBzIG9mIHNpeHR5IGVhY2gg77yIY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Pg8+FzrzOvM6/z4HhvbfOsc65PC9mb3JlaWduPu+8iSwgYW5kIGZyb20gdGhlbQogICAgICAgICAgICAgICAgICAgICAgICBjZXJ0YWluIG1lbiB3ZXJlIGRlc2lnbmF0ZWQgdG8gYmVhciB0aGUgYnVyZGVucyBvZiBwdWJsaWMgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICDvvIh0aGUgdHJlaXJhcmNoeSwgY2hvcmVnaWEsIGV0Yy7vvIkgYW5kIG9mIHRoZSBzcGVjaWFsCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LXRheCBpbXBvc2VkIGluIHRpbWUgb2YgbmVlZC48L25vdGU+IHRoZXkgYWdyZWVkIG9uIG15IGJlaGFsZiB0byBhCiAgICAgICAgICAgICAgICAgICAgdGF4IG9mIGZpdmUgaHVuZHJlZCBkcmFjaG1hZSBvbiBldmVyeSB0d2VudHktZml2ZSBtaW5hZTxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs+Dz4XOvM68zr/PgeG9t86xzrk8L2ZvcmVpZ24+77yJLCBhbmQgZnJvbSB0aGVtCiAgICAgICAgICAgICAgICAgICAgICAgIGNlcnRhaW4gbWVuIHdlcmUgZGVzaWduYXRlZCB0byBiZWFyIHRoZSBidXJkZW5zIG9mIHB1YmxpYyBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iHRoZSB0cmVpcmFyY2h5LCBjaG9yZWdpYSwgZXRjLu+8iSBhbmQgb2YgdGhlIHNwZWNpYWwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHktdGF4IGltcG9zZWQgaW4gdGltZSBvZiBuZWVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHdhcyBhIHRheCBvZiAyMCBwZXJjZW50IG9mIHRoZSBtYW4ncyBlbnRpcmUgcHJvcGVydHksCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB3YXMgdGhlIG1heGltdW0uPC9ub3RlPuKAlGEgdGF4IGVxdWFsIHRvIHRoYXQgcGFpZCBieSBUaW1vdGhldXMsCiAgICAgICAgICAgICAgICAgICAgc29uIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTIzMDI5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjMwMjkiPkNvbm9uPC9wbGFjZU5hbWU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaW1vdGhldXMgd2FzIG9uZSBvZiB0aGUgbGVhZGluZyBjaXRpemVucyBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4uIEhpcyBmYXRoZXIsIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiwxMTIzMDI5IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDExMjMwMjkiPkNvbm9uPC9wbGFjZU5hbWU+LCB3YXMgdGhlIGZhbW91cyBnZW5lcmFsIHdobyBpbiAzOTUKICAgICAgICAgICAgICAgICAgICAgICAgaGFkIGRlc3Ryb3llZCB0aGUgTGFjZWRlbW9uaWFuIGZsZWV0IGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDAzNzU3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDM3NTciPkNuaWRvczwvcGxhY2VOYW1lPi48L25vdGU+IGFuZCB0aG9zZSBwb3NzZXNzaW5nIHRoZSBsYXJnZXN0IGZvcnR1bmVzLgogICAgICAgICAgICAgICAgICAgIEhvd2V2ZXIsIEkgaGFkIGJldHRlciBpbmZvcm0geW91IGluIGRldGFpbCB3aGF0IHBvcnRpb25zIG9mIHRoZSBwcm9wZXJ0eSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjaW5nIGEgcHJvZml0IGFuZCB3aGF0IHdlcmUgdW5wcm9kdWN0aXZlLCBhbmQgd2hhdCB3ZXJlIHRoZWlyIHJlc3BlY3RpdmUKICAgICAgICAgICAgICAgICAgICB2YWx1ZXM7IGZvciB3aGVuIHlvdSBoYXZlIGFjY3VyYXRlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyB0aGVzZSBtYXR0ZXJzLCB5b3Ugd2lsbAogICAgICAgICAgICAgICAgICAgIGtub3cgdGhhdCBvZiBhbGwgd2hvIGhhdmUgZXZlciBhY3RlZCBhcyB0cnVzdGVlcyBub25lIGhhdmUgc28gc2hhbWVsZXNzbHkgYW5kIHNvCiAgICAgICAgICAgICAgICAgICAgb3Blbmx5IHBsdW5kZXJlZCBhbiBlc3RhdGUgYXMgdGhlc2UgbWVuIGhhdmUgcGx1bmRlcmVkIG91cnMuIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPi4gSGlzIGZhdGhlciwgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjMwMjkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyMzAyOSI+Q29ub248L3BsYWNlTmFtZT4sIHdhcyB0aGUgZmFtb3VzIGdlbmVyYWwgd2hvIGluIDM5NQogICAgICAgICAgICAgICAgICAgICAgICBoYWQgZGVzdHJveWVkIHRoZSBMYWNlZGVtb25pYW4gZmxlZXQgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDUwMDM3NTciIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNTAwMzc1NyI+Q25pZG9zPC9wbGFjZU5hbWU+LjwvdHJhbnNsYXRpb24+"
translation['27.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkkgc2hhbGwgcHJvZHVjZSB3aXRuZXNzZXMgdG8gcHJvdmUsIGZpcnN0LCB0aGF0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIHRheC1jb21wYW55IHRoZXkgYWdyZWVkIG9uIG15IGJlaGFsZiB0byBiZSB0YXhlZCB0byB0aGUgYW1vdW50IHdoaWNoIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHN0YXRlZCwgYW5kLCBuZXh0LCB0aGF0IG15IGZhdGhlciBkaWQgbm90IGxlYXZlIG1lIGEgcG9vciBtYW4sIG5vciBvbmUKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW5nIGFuIGVzdGF0ZSBvZiBtZXJlbHkgc2V2ZW50eSBtaW5hZS4gT24gdGhlIGNvbnRyYXJ5LCBteSBlc3RhdGUgd2FzIHNvCiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXJhYmxlIHRoYXQgdGhlc2UgbWVuIHdlcmUgdGhlbXNlbHZlcyB1bmFibGUgdG8gaGlkZSBpdHMgdmFsdWUgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZXNlIHdvcmRzIHdlcmUgYWRkcmVzc2VkIHRvIHRoZSBjbGVyayBvZiB0aGUgY291cnQuPC9ub3RlPiBwbGVhc2UsIGFuZAogICAgICAgICAgICAgICAgICAgIHJlYWQgdGhpcyBkZXBvc2l0aW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Gcm9tIHRoaXMKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBpdCBpcyBjbGVhciB3aGF0IHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgd2FzLiBUaHJlZSB0YWxlbnRzIGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHRheCBvbiBhbiBlc3RhdGUgb2YgZmlmdGVlbiwgYW5kIHRoaXMgdGF4IHRoZXkgc2F3IGZpdCB0byBwYXkuIEJ1dCB5b3Ugd2lsbCBzZWUKICAgICAgICAgICAgICAgICAgICB0aGlzIG1vcmUgY2xlYXJseSBpZiB5b3UgaGVhciB3aGF0IHRoZSBwcm9wZXJ0eSB3YXMuIE15IGZhdGhlciwgbWVuIG9mIHRoZSBqdXJ5LAogICAgICAgICAgICAgICAgICAgIGxlZnQgdHdvIGZhY3RvcmllcywgYm90aCBkb2luZyBhIGxhcmdlIGJ1c2luZXNzLiBPbmUgd2FzIGEgc3dvcmQtbWFudWZhY3RvcnksCiAgICAgICAgICAgICAgICAgICAgZW1wbG95aW5nIHRoaXJ0eS10d28gb3IgdGhpcnR5LXRocmVlIHNsYXZlcywgbW9zdCBvZiB0aGVtIHdvcnRoIGZpdmUgb3Igc2l4CiAgICAgICAgICAgICAgICAgICAgbWluYWUgZWFjaCBhbmQgbm9uZSB3b3J0aCBsZXNzIHRoYW4gdGhyZWUgbWluYWUuIEZyb20gdGhlc2UgbXkgZmF0aGVyIHJlY2VpdmVkIGEKICAgICAgICAgICAgICAgICAgICBjbGVhciBpbmNvbWUgb2YgdGhpcnR5IG1pbmFlIGVhY2ggeWVhci4gVGhlIG90aGVyIHdhcyBhIHNvZmEtbWFudWZhY3RvcnksCiAgICAgICAgICAgICAgICAgICAgZW1wbG95aW5nIHR3ZW50eSBzbGF2ZXMsIGdpdmVuIHRvIG15IGZhdGhlciBhcyBzZWN1cml0eSBmb3IgYSBkZWJ0IG9mIGZvcnR5CiAgICAgICAgICAgICAgICAgICAgbWluYWUuIFRoZXNlIGJyb3VnaHQgaGltIGluIGEgY2xlYXIgaW5jb21lIG9mIHR3ZWx2ZSBtaW5hZS4gSW4gbW9uZXkgaGUgbGVmdCBhcwogICAgICAgICAgICAgICAgICAgIG11Y2ggYXMgYSB0YWxlbnQsIGxvYW5lZCBhdCB0aGUgcmF0ZSBvZiBhIGRyYWNobWEgYSBtb250aCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QSBkcmFjaG1hLCB0aGF0IGlzLCBvbiBlYWNoIG1pbmEuIFRoaXMg77yIMTIKICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudO+8iSB3YXMgdGhlIG5vcm1hbCByYXRlIG9mIGludGVyZXN0IG9uIHdlbGwtc2VjdXJlZAogICAgICAgICAgICAgICAgICAgICAgICBsb2Fucy48L25vdGU+IHRoZSBpbnRlcmVzdCBvZiB3aGljaCBhbW91bnRlZCB0byBtb3JlIHRoYW4gc2V2ZW4gbWluYWUgYQogICAgICAgICAgICAgICAgICAgIHllYXIuIDwvdHJhbnNsYXRpb24+"
translation['27.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgYW1vdW50IG9mIHByb2R1Y3RpdmUKICAgICAgICAgICAgICAgICAgICBjYXBpdGFsIHdoaWNoIG15IGZhdGhlciBsZWZ0LCBhcyB0aGVzZSBtZW4gd2lsbCB0aGVtc2VsdmVzIGFkbWl0LCB0aGUgcHJpbmNpcGFsCiAgICAgICAgICAgICAgICAgICAgYW1vdW50aW5nIHRvIGZvdXIgdGFsZW50cyBhbmQgZml2ZSB0aG91c2FuZCBkcmFjaG1hZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gbWVyY2FudGlsZSBhZmZhaXJzIHRoZSBHcmVla3Mgb2Z0ZW4gcHJlZmVycmVkIHRvIHJlY2tvbiBpbgogICAgICAgICAgICAgICAgICAgICAgICB0aG91c2FuZHMgb2YgZHJhY2htYWUgaW5zdGVhZCBvZiB0ZW5zIG9mIG1pbmFlLjwvbm90ZT4gYW5kIHRoZSBwcm9jZWVkcyB0bwogICAgICAgICAgICAgICAgICAgIGZpZnR5IG1pbmFlIGVhY2ggeWVhci4gQmVzaWRlcyB0aGlzLCBoZSBsZWZ0IGl2b3J5IGFuZCBpcm9uLCB1c2VkIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGZhY3RvcnksIGFuZCB3b29kIGZvciBzb2Zhcywgd29ydGggYWJvdXQgZWlnaHR5IG1pbmFlOyBhbmQgZ2FsbDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHdhcyBvYnRhaW5lZCBmcm9tIHRoZSBvYWstYXBwbGUgYW5kIHdhcyB1c2VkIGZvcgogICAgICAgICAgICAgICAgICAgICAgICBzdGFpbmluZyB3b29kIG9yIGl2b3J5Ljwvbm90ZT4gYW5kIGNvcHBlciwgd2hpY2ggaGUgaGFkIGJvdWdodCBmb3Igc2V2ZW50eQogICAgICAgICAgICAgICAgICAgIG1pbmFlOyBmdXJ0aGVybW9yZSwgYSBob3VzZSB3b3J0aCB0aHJlZSB0aG91c2FuZCBkcmFjaG1hZSwgYW5kIGZ1cm5pdHVyZSBhbmQKICAgICAgICAgICAgICAgICAgICBwbGF0ZSwgYW5kIG15IG1vdGhlcidzIGpld2VscnkgYW5kIGFwcGFyZWwgYW5kIG9ybmFtZW50cywgd29ydGggaW4gYWxsIHRlbgogICAgICAgICAgICAgICAgICAgIHRob3VzYW5kIGRyYWNobWFlLCBhbmQgaW4gdGhlIGhvdXNlIGVpZ2h0eSBtaW5hZSBpbiBzaWx2ZXIuIDwvdHJhbnNsYXRpb24+"
translation['27.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5UbyB0aGVzZSBzdW1zIGxlZnQgYnkgaGltIGF0IGhvbWUgd2UgbXVzdCBhZGQgc2V2ZW50eSBtaW5hZSwKICAgICAgICAgICAgICAgICAgICBhIG1hcml0aW1lIGxvYW4gdG8gWHV0aHVzOyB0d2VudHktZm91ciBodW5kcmVkIGRyYWNobWFlIGluIHRoZSBiYW5rIG9mIFBhc2lvbiwKICAgICAgICAgICAgICAgICAgICBzaXggaHVuZHJlZCBpbiB0aGF0IG9mIFB5bGFkZXMsIHNpeHRlZW4gaHVuZHJlZCBpbiB0aGUgaGFuZHMgb2YgRGVtb21lbGVzLCBzb24KICAgICAgICAgICAgICAgICAgICBvZiBEZW1vbiwgYW5kIGFib3V0IGEgdGFsZW50IGxvYW5lZCB3aXRob3V0IGludGVyZXN0IGluIHN1bXMgb2YgdHdvIGh1bmRyZWQgb3IKICAgICAgICAgICAgICAgICAgICB0aHJlZSBodW5kcmVkIGRyYWNobWFlLiBUaGUgdG90YWwgb2YgdGhlc2UgbGFzdCBzdW1zIGFtb3VudHMgdG8gbW9yZSB0aGFuIGVpZ2h0CiAgICAgICAgICAgICAgICAgICAgdGFsZW50cyBhbmQgZmlmdHkgbWluYWUsIGFuZCB0aGUgd2hvbGUgdGFrZW4gdG9nZXRoZXIgeW91IHdpbGwgZmluZCBvbgogICAgICAgICAgICAgICAgICAgIGV4YW1pbmF0aW9uIHRvIGNvbWUgdG8gYWJvdXQgZm91cnRlZW4gdGFsZW50cy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U3RyaWN0bHksIHRoaXJ0ZWVuIHRhbGVudHMgYW5kIGZvcnR5LXNpeCBtaW5hZTsgc2VlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBJbnRyb2R1Y3Rpb24uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcywgdGhlbiwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIHdhcyB0aGUgYW1vdW50IG9mIHByb3BlcnR5IGxlZnQgYnkgbXkgZmF0aGVyLiBIb3cgbXVjaCBvZiBpdCBoYXMKICAgICAgICAgICAgICAgICAgICBiZWVuIHNxdWFuZGVyZWQsIGhvdyBtdWNoIHRoZXkgaGF2ZSBzZXZlcmFsbHkgdGFrZW4sIGFuZCBvZiBob3cgbXVjaCB0aGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICBqb2ludGx5IHJvYmJlZCBtZSwgaXQgaXMgaW1wb3NzaWJsZSB0byB0ZWxsIGluIHRoZSB0aW1lPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxpdGVyYWxseSwg4oCcd2F0ZXIs4oCdIHRoZSB0aW1lIGFsbG90dGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIGVhY2ggc3BlYWtlciBiZWluZyBtZWFzdXJlZCBieSBhIHdhdGVyLWNsb2NrLjwvbm90ZT4gYWxsb3R0ZWQgdG8gb25lIHBsZWEuIEkKICAgICAgICAgICAgICAgICAgICBtdXN0IGRpc2N1c3MgZWFjaCBvbmUgb2YgdGhlc2UgcXVlc3Rpb25zIHNlcGFyYXRlbHkuIEkgcGFzcyBvdmVyIHRoZSBxdWVzdGlvbiBhcwogICAgICAgICAgICAgICAgICAgIHRvIHdoYXQgcHJvcGVydHkgb2YgbWluZSBEZW1vcGhvbiBvciBUaGVyaXBwaWRlcyBhcmUgaG9sZGluZy4gSXQgd2lsbCBiZSB0aW1lCiAgICAgICAgICAgICAgICAgICAgZW5vdWdoIHRvIGRpc2N1c3MgdGhpcyB3aGVuIEkgYnJpbmcgaW4gbXkgYWNjdXNhdGlvbnMgYWdhaW5zdCB0aGVtLiBJIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgc3BlYWsgdG8geW91IG5vdyBvZiB0aGUgZGVmZW5kYW50IGFuZCBzaGFsbCBzdGF0ZSB3aGF0IGhpcyBjb2xsZWFndWVzIHByb3ZlIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBoYXMgaW4gaGlzIGhhbmRzLCBhbmQgd2hhdCBJIGtub3cgaGUgaGFzIHRha2VuLiBJbiB0aGUgZmlyc3QgcGxhY2UgSSBzaGFsbAogICAgICAgICAgICAgICAgICAgIHNob3cgdGhhdCBoZSBoYXMgdGhlIG1hcnJpYWdlLXBvcnRpb24sIHRoZSBlaWdodHkgbWluYWUsIGFuZCBhZnRlciB0aGF0IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgdGFrZSB1cCB0aGUgb3RoZXIgbWF0dGVycyBhbmQgZGlzY3VzcyB0aGVtIHdpdGggdGhlIHV0bW9zdCBicmV2aXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['27.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW1tZWRpYXRlbHkgYWZ0ZXIgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIncyBkZWF0aCB0aGUgZGVmZW5kYW50IGNhbWUgYW5kIGR3ZWx0IGluIHRoZSBob3VzZSBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHdpbGwsIGFuZCB0b29rIHBvc3Nlc3Npb24gb2YgbXkgbW90aGVyJ3MgamV3ZWxzIGFuZCB0aGUgcGxhdGUuIEluIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgaGUgcmVjZWl2ZWQgdGhlIGVxdWl2YWxlbnQgb2YgYWJvdXQgZmlmdHkgbWluYWUuIEZ1cnRoZXJtb3JlLCBoZSByZWNlaXZlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgVGhlcmlwcGlkZXMgYW5kIERlbW9waG9uIHRoZSBwcm9jZWVkcyBvZiB0aGUgc2FsZSBvZiB0aGUgc2xhdmVzIHVudGlsIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIG1hZGUgdXAgdGhlIGZ1bGwgYW1vdW50IG9mIHRoZSBtYXJyaWFnZS1wb3J0aW9uLCBlaWdodHkgbWluYWU7IDwvdHJhbnNsYXRpb24+"
translation['27.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYWZ0ZXIgZ2V0dGluZyB0aGlzLCB3aGVuIGhlIHdhcyBhYm91dCB0byBzZXQgc2FpbCBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTA4ODYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMDg4NiI+Q29yY3lyYTwvcGxhY2VOYW1lPiBhcyB0cmllcmFyY2gsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGluIGNvbW1hbmQgb2YgYSB0cmlyZW1lIHdoaWNoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGVxdWlwcGVkIGZvciBzZXJ2aWNlLjwvbm90ZT4gaGUgc2VudCBUaGVyaXBwaWRlcyBhIHdyaXR0ZW4KICAgICAgICAgICAgICAgICAgICBhY2tub3dsZWRnZW1lbnQgdGhhdCBoZSBoYWQgdGhlc2Ugc3VtcyBpbiBoaXMgcG9zc2Vzc2lvbiwgYW5kIGFkbWl0dGVkIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgcmVjZWl2ZWQgdGhlIG1hcnJpYWdlLXBvcnRpb24uIE9mIHRoZXNlIG1hdHRlcnMgRGVtb3Bob24gYW5kIFRoZXJpcHBpZGVzLAogICAgICAgICAgICAgICAgICAgIGhpcyBjby10cnVzdGVlcywgYXJlIHdpdG5lc3NlcywgYW5kLCBiZXNpZGVzIHRoaXMsIGhpcyBvd24gYWNrbm93bGVkZ2VtZW50IG9mCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHJlY2VpdmVkIHRoZXNlIG1vbmV5cyBpcyBhdHRlc3RlZCBieSBEZW1vY2hhcmVzLCBvZiBMZXVjb25pb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxldWNvbmlvbiwgb3IgTGV1Y29ub2UsIHdhcyBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIExvZW50aXMuPC9ub3RlPiB3aG8gaXMgdGhlIGh1c2JhbmQgb2YgbXkgYXVudCwgYW5kIGJ5IG1hbnkgb3RoZXIgd2l0bmVzc2VzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBpdCBwcm92ZWQgdGhhdCBBcGhvYnVzLCB0aG91Z2ggaGUKICAgICAgICAgICAgICAgICAgICBoYWQgaGVyIGZvcnR1bmUsIHdvdWxkIG5vdCBtYWludGFpbiBteSBtb3RoZXIsIGFuZCByZWZ1c2VkIHRvIGxldCB0aGUgcHJvcGVydHksCiAgICAgICAgICAgICAgICAgICAgY2hvb3NpbmcgcmF0aGVyIHRvIGFkbWluaXN0ZXIgaXQgaGltc2VsZiBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICAgIGd1YXJkaWFucywgRGVtb2NoYXJlcyByZW1vbnN0cmF0ZWQgd2l0aCBoaW0gYWJvdXQgdGhlIG1hdHRlcjsgYW5kIEFwaG9idXMsIHdoZW4KICAgICAgICAgICAgICAgICAgICBoZSBoYWQgaGVhcmQgaGltLCBuZWl0aGVyIGRlbmllZCB0aGF0IGhlIGhhZCB0aGUgbW9uZXkgbm9yIHdheGVkIGluZGlnbmFudCBhcwogICAgICAgICAgICAgICAgICAgIG9uZSB3aG8gaGFkIHJlY2VpdmVkIG5vdGhpbmcsIGJ1dCBhZG1pdHRlZCB0aGUgZmFjdCwgYW5kIHNhaWQgdGhhdCBoZSB3YXMgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAgYSBsaXR0bGUgZGlzcHV0ZSB3aXRoIG15IG1vdGhlciBhYm91dCBoZXIgamV3ZWxzLCBhbmQgdGhhdCwgd2hlbiBoZSBoYWQgc2V0dGxlZAogICAgICAgICAgICAgICAgICAgIHRoaXMgbWF0dGVyLCBoZSB3b3VsZCBhY3QgcmVnYXJkaW5nIHRoZSBtYWludGVuYW5jZSBhbmQgYWxsIGVsc2UgaW4gc3VjaCBhIHdheQogICAgICAgICAgICAgICAgICAgIHRoYXQgSSBzaG91bGQgaGF2ZSBubyBncm91bmQgZm9yIGNvbXBsYWludC4gPC90cmFuc2xhdGlvbj4="
translation['27.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsIGlmIGl0IGJlIHNob3duIHRoYXQgaGUgbWFkZSB0aGVzZSBhZG1pc3Npb25zIGJlZm9yZSBEZW1vY2hhcmVzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBvdGhlcnMgd2hvIHdlcmUgcHJlc2VudDsgdGhhdCBoZSByZWNlaXZlZCBmcm9tIERlbW9waG9uIGFuZCBUaGVyaXBwaWRlcyB0aGUKICAgICAgICAgICAgICAgICAgICBtb25leSBhY2NydWluZyBmcm9tIHRoZSBzYWxlIG9mIHRoZSBzbGF2ZXMgaW4gcGFydCBzZXR0bGVtZW50IG9mIHRoZSBtYXJyaWFnZQogICAgICAgICAgICAgICAgICAgIHBvcnRpb247IHRoYXQgaGUgZ2F2ZSB0byBoaXMgY28tdHJ1c3RlZXMgYSB3cml0dGVuIGFja25vd2xlZGdlbWVudCB0aGF0IGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIHRoZSBwb3J0aW9uOyBhbmQgdGhhdCBoZSBvY2N1cGllZCB0aGUgaG91c2UgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGRlYXRoCiAgICAgICAgICAgICAgICAgICAgb2YgbXkgZmF0aGVyOyB3aWxsIGl0IG5vdCBiZSBjbGVhcuKAlHRoZSBtYXR0ZXIgYmVpbmcgYWRtaXR0ZWQgYnkKICAgICAgICAgICAgICAgICAgICBldmVyeWJvZHnigJR0aGF0IGhlIGhhcyByZWNlaXZlZCB0aGUgcG9ydGlvbiwgdGhlIGVpZ2h0eSBtaW5hZSwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBoaXMgZGVuaWFsIG9mIGhhdmluZyByZWNlaXZlZCBpdCBpcyBhIHBpZWNlIG9mIHNoYW1lbGVzcyBpbXB1ZGVuY2U/IDwvdHJhbnNsYXRpb24+"
translation['27.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCB3aGF0IEkKICAgICAgICAgICAgICAgICAgICBzYXkgaXMgdHJ1ZSwgdGFrZSBhbmQgcmVhZCB0aGUgZGVwb3NpdGlvbnMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZSBkb3dyeSwgdGhlbiwgaGUgZ290IGluIHRoaXMgd2F5LCBhbmQKICAgICAgICAgICAgICAgICAgICBrZXB0LiBCdXQgaW4gdGhlIGV2ZW50IG9mIGhpcyBub3QgbWFycnlpbmcgbXkgbW90aGVyIHRoZSBsYXcgZGVjbGFyZXMgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIG93ZXMgbWUgdGhlIGFtb3VudCBvZiB0aGUgZG93cnkgd2l0aCBpbnRlcmVzdCBhdCBuaW5lIG9ib2xzIGEgbW9udGguPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGF0IDE4IHBlcmNlbnQuPC9ub3RlPiBIb3dldmVyLCBJIHNldCBpdAogICAgICAgICAgICAgICAgICAgIGRvd24gYXQgYSBkcmFjaG1hIGEgbW9udGggb25seS4gVGhpcyBjb21lcywgaWYgb25lIGFkZHMgdGhlIHByaW5jaXBsZSBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3QgZm9yIHRlbiB5ZWFycywgdG8gYWJvdXQgdGhyZWUgdGFsZW50cy4gPC90cmFuc2xhdGlvbj4="
translation['27.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1vbmV5IEkgaGF2ZSB0aHVzIHNob3duIHlvdSB0aGF0IGhlIHJlY2VpdmVkIGFuZCB0aGF0IGhlIGNvbmZlc3NlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZSBvZiBhIGhvc3Qgb2Ygd2l0bmVzc2VzIHRoYXQgaGUgaGFkIGl0LiBUaGVuIGhlIGhhcyBhbHNvIGluIGhpcwogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb24gdGhpcnR5IG1pbmFlIGJlc2lkZXMsIHdoaWNoIGhlIHJlY2VpdmVkIGFzIHRoZSByZXZlbnVlIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdG9yeSwgYW5kIG9mIHdoaWNoIGhlIGhhcyB0cmllZCB0byBkZWZyYXVkIG1lIGluIHRoZSBtb3N0IHNoYW1lbGVzcyBtYW5uZXIKICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZS4gTXkgZmF0aGVyIGxlZnQgbWUgYSByZXZlbnVlIG9mIHRoaXJ0eSBtaW5hZSBhY2NydWluZyBmcm9tIHRoZSBmYWN0b3J5OwogICAgICAgICAgICAgICAgICAgIGFuZCBhZnRlciB0aGUgc2FsZSBieSB0aGVzZSBtZW4gb2Ygb25lLWhhbGYgb2YgdGhlIHNsYXZlcywgSSBzaG91bGQgcmVjZWl2ZSB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wb3J0aW9uYXRlIHN1bSBvZiBmaWZ0ZWVuIG1pbmFlLiA8L3RyYW5zbGF0aW9uPg=="
translation['27.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyaXBwaWRlcywgaG93ZXZlciwgd2hvIGhhZCBjaGFyZ2Ugb2YgdGhlIHNsYXZlcyBmb3Igc2V2ZW4geWVhcnMsIGhhcwogICAgICAgICAgICAgICAgICAgIHN1Ym1pdHRlZCBhbiBhY2NvdW50IG9mIGVsZXZlbiBtaW5hZSBhIHllYXIsIGZvdXIgbWluYWUgYSB5ZWFyIGxlc3MgdGhhbiBpdAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBoYXZlIGJlZW47IGFuZCB0aGUgZGVmZW5kYW50IHdobyBoYWQgY2hhcmdlIG9mIHRoZSBidXNpbmVzcyBhdCB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBmb3IgdHdvIHllYXJzIHNob3dzIG5vIHByb2ZpdCB3aGF0ZXZlciwgYnV0IHNheXMgc29tZXRpbWVzIHRoYXQgdGhlIGZhY3Rvcnkgd2FzCiAgICAgICAgICAgICAgICAgICAgaWRsZSwgYW5kIHNvbWV0aW1lcyB0aGF0IGhlIHdhcyBub3QgaGltc2VsZiB0aGUgbWFuYWdlciwgYnV0IHRoYXQgdGhlIGZvcmVtYW4sCiAgICAgICAgICAgICAgICAgICAgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiwgYSBmcmVlZG1hbiBvZiBvdXJzLCBoYWQKICAgICAgICAgICAgICAgICAgICBjaGFyZ2Ugb2YgaXQsIGFuZCB0aGF0IEkgc2hvdWxkIGxvb2sgZm9yIGFuIGFjY291bnRpbmcgZnJvbSBoaW0uIElmIGhlIHBlcnNpc3RzCiAgICAgICAgICAgICAgICAgICAgZXZlbiBub3cgaW4gbWFraW5nIGFueSBvZiB0aGVzZSBzdGF0ZW1lbnRzIGhlIHdpbGwgZWFzaWx5IGJlIGNvbnZpY3RlZCBvZgogICAgICAgICAgICAgICAgICAgIGZhbHNlaG9vZC4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['27.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5JZiBoZSBkZWNsYXJlcyB0aGF0IHRoZSBmYWN0b3J5IHdhcwogICAgICAgICAgICAgICAgICAgIGlkbGUsIHlldCBoZSBoYXMgaGltc2VsZiByZW5kZXJlZCBhbiBhY2NvdW50IG9mIG1vbmV5IGV4cGVuZGVkLCBub3Qgb24KICAgICAgICAgICAgICAgICAgICBwcm92aXNpb25zIGZvciB0aGUgbWVuLCBidXQgZm9yIHRoZWlyIHdvcmvigJRpdm9yeSBmb3IgdGhlIHRyYWRlLAogICAgICAgICAgICAgICAgICAgIHN3b3JkaGFuZGxlcywgYW5kIG90aGVyIHN1cHBsaWVz4oCUaW5kaWNhdGluZyB0aGF0IHRoZSB3b3JrbWVuIHdlcmUKICAgICAgICAgICAgICAgICAgICBidXN5LiBGdXJ0aGVybW9yZSwgaGUgY2hhcmdlcyBtZSB3aXRoIG1vbmV5IHdoaWNoIGhlIGhhcyBwYWlkIHRvIFRoZXJpcHBpZGVzIGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSBoaXJlIG9mIHRocmVlIHNsYXZlcyBvZiBoaXMgd2hvIHdlcmUgaW4gbXkgZmFjdG9yeS4gWWV0IGlmIG5vIHdvcmsgd2FzIGJlaW5nCiAgICAgICAgICAgICAgICAgICAgZG9uZSwgVGhlcmlwcGlkZXMgc2hvdWxkIGhhdmUgcmVjZWl2ZWQgbm8gcGF5LCBub3Igc2hvdWxkIHRoZXNlIGV4cGVuZGl0dXJlcwogICAgICAgICAgICAgICAgICAgIGhhdmUgYmVlbiBjaGFyZ2VkIHRvIG1lLiA8L3RyYW5zbGF0aW9uPg=="
translation['27.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgaWYgaGUgYWxsZWdlcwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHdvcmsgd2FzIGRvbmUsIGJ1dCB0aGF0IHRoZXJlIHdhcyBubyBtYXJrZXQgZm9yIGdvb2RzIG1hbnVmYWN0dXJlZCwgaGUKICAgICAgICAgICAgICAgICAgICBvdWdodCBhdCBhbnkgcmF0ZSB0byBzaG93IHRoYXQgaGUgaGFzIGRlbGl2ZXJlZCB0byBtZSB0aGVzZSBnb29kcywgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZSB3aXRuZXNzZXMgaW4gd2hvc2UgcHJlc2VuY2UgaGUgZGVsaXZlcmVkIHRoZW0uIFNlZWluZyB0aGF0IGhlIGhhcyBkb25lCiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBvZiB0aGVzZSB0aGluZ3MsIGhvdyBjYW4geW91IGRvdWJ0IHRoYXQgaGUgaXMga2VlcGluZyB0aGlydHkgbWluYWUsIHRoZQogICAgICAgICAgICAgICAgICAgIHR3byB5ZWFycycgaW5jb21lIGZyb20gdGhlIGZhY3RvcnksIHNpbmNlIHRoZSBidXNpbmVzcyBoYXMgc28gbWFuaWZlc3RseSBiZWVuCiAgICAgICAgICAgICAgICAgICAgY2FycmllZCBvbj8gPC90cmFuc2xhdGlvbj4="
translation['27.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgaG93ZXZlciwgaGUgc2hhbGwgbWFrZSBub25lIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugc3RhdGVtZW50cywgYnV0IHNoYWxsIGFzc2VydCB0aGF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gaGFkIGNoYXJnZSBvZiBldmVyeXRoaW5nLCBob3cgY2FuIHlvdSBiZWxpZXZlIGhpbSwgd2hlbgogICAgICAgICAgICAgICAgICAgIGhlIGFsbGVnZXMgdGhhdCBoZSBoaW1zZWxmIG1hZGUgdGhlIGRpc2J1cnNlbWVudHMgYW1vdW50aW5nIHRvIG1vcmUgdGhhbiBmaXZlCiAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCBkcmFjaG1hZSwgYnV0IHRoYXQgYW55IHByb2ZpdHMgd2hpY2ggYWNjcnVlZCBhcmUgaW4gdGhlIGhhbmRzIG9mCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+PyBGb3IgbXkgcGFydCwgSSB0aGluayBpdAogICAgICAgICAgICAgICAgICAgIGxpa2VseSB0aGF0IHRoZSB2ZXJ5IG9wcG9zaXRlIGlzIHRoZSBjYXNlLCBzdXBwb3NpbmcgdGhhdCA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gYWN0dWFsbHkgZGlkIGhhdmUgY2hhcmdlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHdvcmss4oCUdGhhdCBoZSBtYWRlIHRoZSBkaXNidXJzZW1lbnRzLCBhbmQgdGhhdCBBcGhvYnVzIHJlY2VpdmVkIHRoZQogICAgICAgICAgICAgICAgICAgIHByb2ZpdHMsIGlmIHdlIG1heSBkcmF3IGFueSBjb25jbHVzaW9uIGZyb20gdGhlIGdlbmVyYWwgY2hhcmFjdGVyIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBzaGFtZWxlc3NuZXNzIG9mIHRoZSBtYW4uPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSBub3cgYW5kIHJlYWQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucyB0byB0aGUganVyeS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgdGhpcnR5CiAgICAgICAgICAgICAgICAgICAgbWluYWUsIHRoZW4sIGhlIGhhcyByZWNlaXZlZCBmcm9tIHRoZSBmYWN0b3J5LCBhbmQgdGhlIGludGVyZXN0IG9uIHRoZW0gZm9yCiAgICAgICAgICAgICAgICAgICAgZWlnaHQgeWVhcnM7IGFuZCBpZiBvbmUgc2V0cyB0aGlzIGRvd24gYXQgdGhlIHJhdGUgb2YgYSBkcmFjaG1hIG9ubHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGF0IDEyIHBlcmNlbnQsIGluc3RlYWQgb2YgMTggcGVyY2VudCwKICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggd2FzIG5vcm1hbCBpbiB0aGUgY2FzZSBvZiBtYXJyaWFnZS1wb3J0aW9ucy48L25vdGU+IGl0IHdpbGwgbWFrZQogICAgICAgICAgICAgICAgICAgIHRoaXJ0eSBtaW5hZSBtb3JlLiBUaGVzZSBzdW1zIGhlIGhhcyBoaW1zZWxmIGVtYmV6emxlZCwgYW5kLCBpZiB0aGV5IGJlIGFkZGVkIHRvCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hcnJpYWdlLXBvcnRpb24sIHRoZSB0b3RhbCBpcyBhYm91dCBmb3VyIHRhbGVudHMsIHByaW5jaXBhbCBhbmQgaW50ZXJlc3QKICAgICAgICAgICAgICAgICAgICBjb21iaW5lZC4gTm93IEkgc2hhbGwgZ28gb24gdG8gc2hvdyB5b3Ugd2hhdCBzdW1zIGhlIGhhcyBlbWJlenpsZWQgaW4KICAgICAgICAgICAgICAgICAgICBjb25qdW5jdGlvbiB3aXRoIGhpcyBjby10cnVzdGVlcywgYW5kIHdoYXQgc3VtcyBoZSBhc3NlcnRzIHdlcmUgbmV2ZXIgbGVmdCBieSBteQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBhdCBhbGwuIDwvdHJhbnNsYXRpb24+"
translation['27.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCwgcmVnYXJkaW5nIHRoZSB0d2VudHkKICAgICAgICAgICAgICAgICAgICBzb2ZhLW1ha2VycywgZ2l2ZW4gdG8gbXkgZmF0aGVyIGFzIHNlY3VyaXR5IGZvciBhIGRlYnQgb2YgZm9ydHkgbWluYWUsIHdob20gbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgY2VydGFpbmx5IGxlZnQgYmVoaW5kIGhpbSBhdCBoaXMgZGVhdGgsIGJ1dCBvZiB3aG9tIHRoZXNlIG1lbiBzaG93IG5vdCBhCiAgICAgICAgICAgICAgICAgICAgdHJhY2XigJRsZXQgbWUgcHJvdmUgdG8geW91IHdpdGggd2hhdCB1dHRlciBzaGFtZWxlc3NuZXNzIGFuZCBob3cgb3Blbmx5CiAgICAgICAgICAgICAgICAgICAgdGhleSBhcmUgc2Vla2luZyB0byBjaGVhdCBtZSBvZiB0aGVzZS4gVGhhdCB0aGVzZSBzbGF2ZXMgd2VyZSBsZWZ0IGJ5IG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIGluIHRoZSBob3VzZSB0aGV5IGFsbCBhZG1pdCwgYW5kIHRoYXQgdGhleSBicm91Z2h0IGhpbSBpbiBhbiBpbmNvbWUgb2YgdHdlbHZlCiAgICAgICAgICAgICAgICAgICAgbWluYWUgZXZlcnkgeWVhci4gWWV0IHRoZXNlIG1lbiByZXBvcnQgbm8gcmVjZWlwdHMgYXMgaGF2aW5nIGNvbWUgaW4gdG8gbXkKICAgICAgICAgICAgICAgICAgICBjcmVkaXQgZnJvbSB0aGVtIGluIHRlbiB5ZWFycywgYW5kIEFwaG9idXMgcmVja29ucyB1cCBhIHRvdGFsIGV4cGVuZGl0dXJlIG9uCiAgICAgICAgICAgICAgICAgICAgdGhlbSBvZiBuZWFybHkgYSB0aG91c2FuZCBkcmFjaG1hZS4gVG8gc3VjaCBhIHBpdGNoIG9mIGVmZnJvbnRlcnkgaGFzIGhlIGNvbWUhCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlc2Ugc2xhdmVzIHRoZW1zZWx2ZXMsIHVwb24gd2hvbSBoZQogICAgICAgICAgICAgICAgICAgIGFsbGVnZXMgdGhhdCBoZSBoYXMgZXhwZW5kZWQgdGhlIG1vbmV5LCB0aGV5IGhhdmUgbmV2ZXIgaGFuZGVkIG92ZXIgdG8gbWUuIE9uCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnRyYXJ5LCB0aGV5IHRlbGwgdGhlIGlkbGVzdCB0YWxlIGltYWdpbmFibGUsIHRvIHRoZSBlZmZlY3QgdGhhdCB0aGUgbWFuCiAgICAgICAgICAgICAgICAgICAgd2hvIHBsZWRnZWQgdGhlIHNsYXZlcyB0byBteSBmYXRoZXIgaXMgdGhlIHZpbGVzdCBzb3J0IG9mIGEgZmVsbG93LCB3aG8gaGFzIGxlZnQKICAgICAgICAgICAgICAgICAgICBtYW55IGZyaWVuZGx5IGxvYW5zPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJTPgc6xzr3Ov8+CPC9mb3JlaWduPiwgb3JpZ2luYWxseSBhIG1lYWwgdG8gd2hpY2ggZWFjaCBjb250cmlidXRlZCBoaXMgZHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRpb24sIGNhbWUgbm90IHVubmF0dXJhbGx5IHRvIG1lYW4gYSDigJxjbHVi4oCdIHRvIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGVhY2ggbWVtYmVyIGNvbnRyaWJ1dGVkLCBhbmQgZnJvbSB3aGljaCBoZSBjb3VsZCBjbGFpbSBoZWxwLCBpZiBuZWVkIGFyb3NlLgogICAgICAgICAgICAgICAgICAgICAgICBUaGVuIGl0IHdhcyBhbHNvIHVzZWQsIGFzIGhlcmUsIG9mIHRoZSDigJxjb250cmlidXRpb27igJ0gb3IKICAgICAgICAgICAgICAgICAgICAgICAgYmV0dGVyLCB0aGUg4oCcbG9hbizigJ0gbWFkZSB0byBzdWNoIG1lbWJlcnMuPC9ub3RlPiB1bnBhaWQsCiAgICAgICAgICAgICAgICAgICAgYW5kIHdobyBpcyBvdmVyd2hlbG1lZCB3aXRoIGRlYnQ7IGFuZCB0byBwcm92ZSB0aGlzIGFnYWluc3QgaGltIHRoZXkgaGF2ZSBjYWxsZWQKICAgICAgICAgICAgICAgICAgICBhIGxhcmdlIG51bWJlciBvZiB3aXRuZXNzZXMuIEJ1dCBhcyBmb3IgdGhlIHNsYXZlc+KAlHdobyBnb3QgdGhlbTsgaG93CiAgICAgICAgICAgICAgICAgICAgdGhleSB3ZW50IG91dCBvZiB0aGUgaG91c2U7IHdobyB0b29rIHRoZW0gYXdheTsgb3IgaW4gd2hhdCBzdWl0IHRoZXkgbG9zdCB0aGVtCiAgICAgICAgICAgICAgICAgICAgYnkganVkZ2VtZW50LCB0aGV5IGFyZSB1bmFibGUgdG8gc2F5LiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJTPgc6xzr3Ov8+CPC9mb3JlaWduPiwgb3JpZ2luYWxseSBhIG1lYWwgdG8gd2hpY2ggZWFjaCBjb250cmlidXRlZCBoaXMgZHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRpb24sIGNhbWUgbm90IHVubmF0dXJhbGx5IHRvIG1lYW4gYSDigJxjbHVi4oCdIHRvIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIGVhY2ggbWVtYmVyIGNvbnRyaWJ1dGVkLCBhbmQgZnJvbSB3aGljaCBoZSBjb3VsZCBjbGFpbSBoZWxwLCBpZiBuZWVkIGFyb3NlLgogICAgICAgICAgICAgICAgICAgICAgICBUaGVuIGl0IHdhcyBhbHNvIHVzZWQsIGFzIGhlcmUsIG9mIHRoZSDigJxjb250cmlidXRpb27igJ0gb3IKICAgICAgICAgICAgICAgICAgICAgICAgYmV0dGVyLCB0aGUg4oCcbG9hbizigJ0gbWFkZSB0byBzdWNoIG1lbWJlcnMuPC90cmFuc2xhdGlvbj4="
translation['27.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQsIGlmCiAgICAgICAgICAgICAgICAgICAgdGhlcmUgd2VyZSBhbnkgdHJ1dGggaW4gd2hhdCB0aGV5IGFsbGVnZSB0aGV5IHdvdWxkIG5vdCBiZSBicmluZ2luZyBmb3J3YXJkCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIHRvIHByb3ZlIHRoaXMgbWFuJ3MgdmlsZSBjaGFyYWN0ZXIg77yId2l0aCB3aGljaCBJIGhhdmUgbm8KICAgICAgICAgICAgICAgICAgICBjb25jZXJu77yJLCBidXQgd291bGQgYmUgaG9sZGluZyBvbiB0byB0aGUgc2xhdmVzLCBvciB3b3VsZCBzaG93IHdobyB0b29rCiAgICAgICAgICAgICAgICAgICAgdGhlbSwgYW5kIHdvdWxkIGhhdmUgbGVmdCBub3Qgb25lIG9mIHRoZW0gb3V0IG9mIHNpZ2h0LiBCdXQgYXMgaXQgaXMsIHRob3VnaAogICAgICAgICAgICAgICAgICAgIHRoZXkgYWRtaXQgdGhhdCB0aGUgc2xhdmVzIHdlcmUgbGVmdCBieSBteSBmYXRoZXIsIGFuZCB0aG91Z2ggdGhleSB0b29rCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiB0aGVtIGFuZCBlbmpveWVkIHRoZSBwcm9maXRzIGZyb20gdGhlbSBmb3IgdGVuIHllYXJzLCB0aGV5IGhhdmUgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgbW9zdCBydXRobGVzcyBtYW5uZXIgcG9zc2libGUgZG9uZSBhd2F5IHdpdGggdGhlIHdob2xlIGZhY3RvcnkuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGggaW4gdGhpcywgdGFrZSwKICAgICAgICAgICAgICAgICAgICBwbGVhc2UsIGFuZCByZWFkIHRoZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCwgbW9yZW92ZXIsCiAgICAgICAgICAgICAgICAgICAgTW9lcmlhZGVzIHdhcyBub3Qgd2l0aG91dCByZXNvdXJjZXMgYW5kIHRoYXQgbXkgZmF0aGVyIGRpZCBub3QgYWN0IGZvb2xpc2hseSBpbgogICAgICAgICAgICAgICAgICAgIG1ha2luZyB0aGUgY29udHJhY3Qgd2l0aCBoaW0gYWJvdXQgdGhlIHNsYXZlcywgSSB3aWxsIHNob3cgeW91IGJ5IHRoZSBjbGVhcmVzdAogICAgICAgICAgICAgICAgICAgIHByb29mLiBGb3IgYWZ0ZXIgQXBob2J1cyB0b29rIGludG8gaGlzIG93biBoYW5kcyB0aGUgZmFjdG9yeSBhcyB5b3UgaGF2ZQogICAgICAgICAgICAgICAgICAgIHlvdXJzZWx2ZXMgaGVhcmQgZnJvbSB0aGUgd2l0bmVzc2VzLCB3aGVuIGl0IHdhcyBoaXMgZHV0eSBhcyBteSBndWFyZGlhbiB0bwogICAgICAgICAgICAgICAgICAgIHByZXZlbnQgYW55b25lIGVsc2UgZnJvbSBhZHZhbmNpbmcgbW9uZXkgb24gdGhlIHNhbWUgc2VjdXJpdHksIGhlIGhpbXNlbGYgbG9hbmVkCiAgICAgICAgICAgICAgICAgICAgdG8gTW9lcmlhZGVzIG9uIHRoZSBzZWN1cml0eSBvZiB0aGVzZSBzYW1lIHNsYXZlcyB0aGUgc3VtIG9mIGZpdmUgaHVuZHJlZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlLCB3aGljaCBoZSBhZG1pdHMgaGUgaGFzIGR1bHkgcmVjb3ZlcmVkIGZyb20gaGltIGluIGZ1bGwuIDwvdHJhbnNsYXRpb24+"
translation['27.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGlzIGl0IG5vdCBvdXRyYWdlb3VzIHRoYXQgd2Ugd2hvIG1hZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpb3IgbG9hbiBzaG91bGQsIGJlc2lkZXMgaGF2aW5nIHJlY2VpdmVkIG5vIHByb2ZpdCBmcm9tIHRoZSBzbGF2ZXMsIGhhdmUgbG9zdAogICAgICAgICAgICAgICAgICAgIG91ciBzZWN1cml0eSwgd2hpbGUgdGhpcyBmZWxsb3csIHdobyBsb2FuZWQgbW9uZXkgb24gc2VjdXJpdHkgYmVsb25naW5nIHRvIHVzLAogICAgICAgICAgICAgICAgICAgIGFuZCB3aG9zZSBsb2FuIHdhcyBzbyBsb25nIHN1YnNlcXVlbnQgdG8gb3Vycywgc2hvdWxkIGZyb20gZnVuZHMgdGhhdCB3ZXJlIG91cnMKICAgICAgICAgICAgICAgICAgICBoYXZlIHJlY292ZXJlZCBib3RoIHByaW5jaXBhbCBhbmQgaW50ZXJlc3QsIGFuZCBoYXZlIHN1ZmZlcmVkIG5vIGxvc3Mgd2hhdGV2ZXI/CiAgICAgICAgICAgICAgICAgICAgVG8gcHJvdmUgdGhhdCB3aGF0IEkgc2F5IGlzIHRydWUsIHRha2UgdGhlIGRlcG9zaXRpb24gYW5kIHJlYWQgaXQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q29uc2lkZXIgbm93IG9mCiAgICAgICAgICAgICAgICAgICAgaG93IGxhcmdlIGEgc3VtIHRoZXkgYXJlIGRlZnJhdWRpbmcgbWUgaW4gdGhlIG1hdHRlciBvZiB0aGVzZSBzb2ZhLW1ha2VyczogdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpbmNpcGFsIGFsb25lLCBmb3J0eSBtaW5hZSwgYW5kIGludGVyZXN0IHVwb24gaXQgZm9yIHRlbiB5ZWFycywgdHdvIHRhbGVudHM7CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZXkgb2J0YWluZWQgZnJvbSB0aGUgc2xhdmVzIGEgcHJvZml0IG9mIHR3ZWx2ZSBtaW5hZSBlYWNoIHllYXIuIElzIHRoaXMgYQogICAgICAgICAgICAgICAgICAgIHRyaWZsaW5nIHN1bSBkcmF3biBmcm9tIHNvbWUgb2JzY3VyZSBzb3VyY2UsIHdoaWNoIG1pZ2h0IGVhc2lseSBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBtaXNjYWxjdWxhdGVkLCBvciBoYXZlIHRoZXkgbm90IG1hbmlmZXN0bHkgcm9iYmVkIG1lIG9mIG5lYXJseSB0aHJlZQogICAgICAgICAgICAgICAgICAgICAgICB0YWxlbnRzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlN0cmljdGx5LCB0d28gdGFsZW50cyBhbmQgZm9ydHkKICAgICAgICAgICAgICAgICAgICAgICAgbWluYWUuIFNlZSB0aGUgdGFibGUgb24gcC4gMTEuPC9ub3RlPj8gT2YgdGhpcyBzdW0gd2hpY2ggdGhleSBoYXZlIGpvaW50bHkKICAgICAgICAgICAgICAgICAgICBzY2F0dGVyZWQgdG8gdGhlIHdpbmRzLCBpdCBpcyBzdXJlbHkgcmlnaHQgdGhhdCBJIHNob3VsZCByZWNvdmVyIGEgdGhpcmQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBkZWZlbmRhbnQuIDwvdHJhbnNsYXRpb24+"
translation['27.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnVydGhlcm1vcmUsIG1lbiBvZiB0aGUganVyeSwgdGhleSBoYXZlIGRlYWx0IGluIG11Y2ggdGhlIHNhbWUgd2F5IHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgaXZvcnkgYW5kIGlyb24gd2hpY2ggd2VyZSBsZWZ0IG1lLiBUaGV5IGRvIG5vdCBwcm9kdWNlIHRoZW0uIFlldCBpdCBpcwogICAgICAgICAgICAgICAgICAgIGltcG9zc2libGUgdGhhdCBvbmUgd2hvIHBvc3Nlc3NlZCBzbyBtYW55IHNvZmEtbWFrZXJzIGFuZCBzbyBtYW55IHN3b3JkLW1ha2VycwogICAgICAgICAgICAgICAgICAgIHNob3VsZCBub3QgYWxzbyBoYXZlIGxlZnQgaXJvbiBhbmQgaXZvcnkuIFRoZXNlIHRoaW5ncyBtdXN0IGhhdmUgYmVlbiBhdmFpbGFibGUsCiAgICAgICAgICAgICAgICAgICAgZm9yIHdoYXQgY291bGQgdGhlIHNsYXZlcyBoYXZlIHByb2R1Y2VkIHdpdGhvdXQgdGhlc2UgbWF0ZXJpYWxzPyA8L3RyYW5zbGF0aW9uPg=="
translation['27.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIHRob3VnaCBteSBmYXRoZXIgcG9zc2Vzc2VkIG1vcmUgdGhhbiBmaWZ0eQogICAgICAgICAgICAgICAgICAgIHNsYXZlcyBhbmQgY29uZHVjdGVkIHR3byBmYWN0b3JpZXMsIG9uZSBvZiB3aGljaCBlYXNpbHkgY29uc3VtZWQgdHdvIG1pbmFlIHdvcnRoCiAgICAgICAgICAgICAgICAgICAgb2YgaXZvcnkgcGVyIG1vbnRoIGZvciB0aGUgc29mYXMsIHdoaWxlIHRoZSBzd29yZC1mYWN0b3J5IGNvbnN1bWVkIGFzIG11Y2ggbW9yZSwKICAgICAgICAgICAgICAgICAgICBhbmQgaXJvbiBiZXNpZGVzLCB0aGVzZSBtZW4gZGVjbGFyZSB0aGF0IGhlIGxlZnQgbm8gaXZvcnkgYW5kIG5vIGlyb247IHRvIHN1Y2ggYQogICAgICAgICAgICAgICAgICAgIHBpdGNoIG9mIHNoYW1lbGVzc25lc3MgaGF2ZSB0aGV5IGNvbWUhIDwvdHJhbnNsYXRpb24+"
translation['27.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgZmFjdHMgYWxvbmUgaXQgaXMgZWFzeSB0byBzZWUgdGhhdCBubyBjcmVkZW5jZSBpcyB0byBiZSBnaXZlbiB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudHM7IGJ1dCB0aGF0IG15IGZhdGhlciBhY3R1YWxseSBkaWQgbGVhdmUgc3VjaCBhbiBhbW91bnQgb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbHMgYXMgbm90IG9ubHkgdG8gc3VmZmljZSBmb3IgaGlzIG93biB3b3JrbWVuIHRvIHVzZSBpbiB0aGVpciB0cmFkZSwgYnV0CiAgICAgICAgICAgICAgICAgICAgYWxzbyBmb3Igc2FsZSB0byBhbnlvbmUgZWxzZSB3aG8gd2lzaGVkIHRvIGJ1eSwgaXMgbWFkZSBjbGVhciBieSB0aGUgZmFjdCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaGltc2VsZiBkdXJpbmcgaGlzIGxpZmV0aW1lIHVzZWQgdG8gc2VsbCB0aGVzZSBtYXRlcmlhbHMsIGFuZCB0aGF0IGFmdGVyIGhpcwogICAgICAgICAgICAgICAgICAgIGRlYXRoIERlbW9waG9uIGFuZCB0aGUgZGVmZW5kYW50IGNvbnRpbnVlZCB0byBzZWxsIHRoZW0gZnJvbSBvdXQgbXkgaG91c2UgdG8KICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aXNoaW5nIHRvIGJ1eS4gPC90cmFuc2xhdGlvbj4="
translation['27.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGhvdyBsYXJnZSBtdXN0CiAgICAgICAgICAgICAgICAgICAgb25lIHN1cHBvc2UgdGhlIHF1YW50aXR5IGxlZnQgYnkgbXkgZmF0aGVyIHRvIGhhdmUgYmVlbiwgd2hlbiBpdCBpcyBzaG93biB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgc3VmZmljZWQgZm9yIHN1Y2ggZXh0ZW5zaXZlIGZhY3RvcmllcywgYW5kIHRvIGhhdmUgYmVlbiBzb2xkIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGd1YXJkaWFucyBiZXNpZGVzPyBXYXMgaXQgYSBzbWFsbCBhbW91bnQsIG9yIG5vdCByYXRoZXIgbXVjaCBtb3JlIHRoYW4gSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJnZWQ/PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2Ugbm93IHRoZXNlIGRlcG9zaXRpb25zIGFuZCByZWFkCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0byB0aGUganVyeS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T2YgdGhpcyBpdm9yeSwgeW91IHNlZSwgdGhlcmUgaXMgbW9yZQogICAgICAgICAgICAgICAgICAgIHRoYW4gYSB0YWxlbnQncyB3b3J0aCBvZiB3aGljaCB0aGV5IG1ha2Ugbm8gcmVwb3J04oCUbmVpdGhlciBvZiB0aGUgcmF3CiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwgbm9yIG9mIHRoZSBmaW5pc2hlZCBwcm9kdWN0LiBObzsgdGhpcyBhbHNvIHRoZXkgaGF2ZSB1dHRlcmx5IGFuZAogICAgICAgICAgICAgICAgICAgIGFic29sdXRlbHkgbWFkZSBhd2F5IHdpdGguIDwvdHJhbnNsYXRpb24+"
translation['27.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnVydGhlcm1vcmUsIG1lbiBvZiB0aGUganVyeSwgSSBzaGFsbCBwcm92ZSB0byB5b3UgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBhY2NvdW50IHdoaWNoIHRoZXkgcmVuZGVyLCBhbmQgZnJvbSB0aGUgcmVjZWlwdHMgYWRtaXR0ZWQgYnkgdGhlbXNlbHZlcywgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHRocmVlIG1lbiBoYXZlIGluIHRoZWlyIHBvc3Nlc3Npb24gbW9yZSB0aGFuIGVpZ2h0IHRhbGVudHMgb2YgbXkgbW9uZXksCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgb2YgdGhpcyBhbW91bnQgQXBob2J1cyBoYXMgc2VwYXJhdGVseSB0YWtlbiB0aHJlZSB0YWxlbnRzIGFuZCBvbmUKICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBkcmFjaG1hZS4gSSBzaGFsbCBzZXQgZG93biBzZXBhcmF0ZWx5IGF0IGEgaGlnaGVyIGZpZ3VyZSB0aGFuIHRoZXkgZG8KICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzIHRoZSBtb25leXMgdGhleSBoYXZlIGV4cGVuZGVkLCBhbmQgc2hhbGwgZGVkdWN0IGFsbCB0aGUgc3VtcyB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBwYWlkIG1lLCB0aGF0IHlvdSBtYXkgc2VlIHRoZSB1dHRlciBzaGFtZWxlc3NuZXNzIG9mIHRoZWlyIGF0dGVtcHRzLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGNvbmZlc3MgdG8gaGF2ZSByZWNlaXZlZCBmcm9tIG15CiAgICAgICAgICAgICAgICAgICAgZXN0YXRlLCBBcGhvYnVzIG9uZSBodW5kcmVkIGFuZCBlaWdodCBtaW5hZSDvvIhiZXNpZGVzIHdoYXQgSSBzaGFsbCBub3cKICAgICAgICAgICAgICAgICAgICBzaG93IHRvIGJlIGluIGhpcyBoYW5kc++8iTsgVGhlcmlwcGlkZXMgdHdvIHRhbGVudHM7IGFuZCBEZW1vcGhvbgogICAgICAgICAgICAgICAgICAgIGVpZ2h0eS1zZXZlbiBtaW5hZS4gVGhpcyBtYWtlcyBhbHRvZ2V0aGVyIGZpdmUgdGFsZW50cyBhbmQgZmlmdGVlbiBtaW5hZS4gT2YKICAgICAgICAgICAgICAgICAgICB0aGlzIHN1bSB0aGVyZSBhcmUgbmVhcmx5IHNldmVudHktc2V2ZW4gbWluYWUsIHRoZSBpbmNvbWUgZnJvbSB0aGUgc2xhdmVzLCB3aGljaAogICAgICAgICAgICAgICAgICAgIHdlcmUgbm90IHJlY2VpdmVkIGFsbCBhdCBvbmNlLCBhbmQgYSBsaXR0bGUgbGVzcyB0aGFuIGZvdXIgdGFsZW50cyBvZiB3aGljaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgZ290IHBvc3Nlc3Npb24gaW1tZWRpYXRlbHkuIE5vdywgaWYgeW91IGFkZCB0byB0aGlzIGxhc3Qgc3VtIHRoZSBpbnRlcmVzdCBmb3IKICAgICAgICAgICAgICAgICAgICB0ZW4geWVhcnMsIHJlY2tvbmVkIGF0IGEgZHJhY2htYSBvbmx5PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0IDEyIHBlcmNlbnQsIGFzIGFib3ZlLiBEZW1vc3RoZW5lcyBpcyBsaWJlcmFsIGluZGVlZCBpbiBoaXMgYWxsb3dhbmNlcy4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGVudGlyZSBzdW0gb2Ygc2V2ZW50eS1zZXZlbiBtaW5hZSBpcyBjcm9zc2VkIG9mZiBhcyBiYWxhbmNlZCBieQogICAgICAgICAgICAgICAgICAgICAgICBleHBlbmRpdHVyZXM7IHRoZSBpbnRlcmVzdCBvbiBmb3VyIHRhbGVudHMgZm9yIHRlbiB5ZWFycyBpcyBzZXQgZG93biBhcyBmb3VyCiAgICAgICAgICAgICAgICAgICAgICAgIHRhbGVudHMgZm9ydHkgbWluYWUsIGluc3RlYWQgb2YgZm91ciB0YWxlbnRzIGZvcnR5LWVpZ2h0IG1pbmFlLCBzbyB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCBhbW91bnQgYmVjb21lcyBlaWdodCB0YWxlbnRzIGFuZCBmb3J0eSBtaW5hZS4gRnJvbSB0aGlzIHRoZXJlIGFyZQogICAgICAgICAgICAgICAgICAgICAgICBkZWR1Y3RlZCB0aGUgbW9uZXlzIHBhaWQgdG8gaGltIO+8iHRoaXJ0eS1vbmUgbWluYWXvvIkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRob3NlIHBhaWQgaW4gdGF4ZXMg77yIc2V0IGRvd24gYXMgdGhpcnR5IG1pbmFlLCBpbnN0ZWFkIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGVpZ2h0ZWVu77yJIGFuZCB0aGUgYmFsYW5jZSDvvIhyb3VnaGx5LCBlaWdodCB0YWxlbnRzIGxlc3Mgb25lCiAgICAgICAgICAgICAgICAgICAgICAgIHRhbGVudO+8iSwgaXMgcmVja29uZWQgYXMgc2V2ZW4gdGFsZW50cy48L25vdGU+IHlvdSB3aWxsIGZpbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSwgcHJpbmNpcGFsIGFuZCBpbnRlcmVzdCwgYW1vdW50cyB0byBlaWdodCB0YWxlbnRzIGFuZCBmb3VyIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYWUuIDwvdHJhbnNsYXRpb24+"
translation['27.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoZSBzZXZlbnR5LXNldmVuIG1pbmFlLCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9maXRzIG9mIHRoZSBmYWN0b3J5LCB0aGUgY29zdCBvZiBtYWludGVuYW5jZSBvZiB0aGUgbWVuIG11c3QgYmUgZGVkdWN0ZWQsIGZvcgogICAgICAgICAgICAgICAgICAgIFRoZXJpcHBpZGVzIGV4cGVuZGVkIGZvciB0aGlzIHNldmVuIG1pbmFlIGEgeWVhciwgYW5kIEkgYWRtaXQgaGF2aW5nIHJlY2VpdmVkCiAgICAgICAgICAgICAgICAgICAgdGh1cyBtdWNoLiBUaHVzIHRoZXkgZXhwZW5kZWQgb24gb3VyIGJlaGFsZiBpbiB0aGUgdGVuIHllYXJzIHNldmVudHkgbWluYWUgZm9yCiAgICAgICAgICAgICAgICAgICAgbWFpbnRlbmFuY2U7IHRvIHRoaXMgSSBhZGQgdGhlIGJhbGFuY2UsIHNldmVuIGh1bmRyZWQgZHJhY2htYWUsIGFuZCB0aHVzIGNyZWRpdAogICAgICAgICAgICAgICAgICAgIHRoZW0gd2l0aCBhIGxhcmdlciBleHBlbmRpdHVyZSB0aGFuIHRoZXkgZG8gdGhlbXNlbHZlcy4gVGhlcmUgbXVzdCBhbHNvIGJlCiAgICAgICAgICAgICAgICAgICAgZGVkdWN0ZWQgZnJvbSB0aGUgZWlnaHQgdGFsZW50cyBhbmQgbW9yZSB0aGUgc3VtIHRoZXkgaGFuZGVkIG92ZXIgdG8gbWUgd2hlbiBJCiAgICAgICAgICAgICAgICAgICAgY2FtZSBvZiBhZ2UsIGFuZCB0aGUgdGF4ZXMgd2hpY2ggdGhleSBoYXZlIHBhaWQgdG8gdGhlIHN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['27.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGVmZW5kYW50IGFuZCBUaGVyaXBwaWRlcyBwYWlkIG1lIHRoaXJ0eS1vbmUgbWluYWUsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXkgY29tcHV0ZSB0aGF0IHRoZXkgaGF2ZSBwYWlkIGVpZ2h0ZWVuIG1pbmFlIGluIHRheGVzLiBJIHdpbGwgZ28gYmV5b25kIHRoZW0KICAgICAgICAgICAgICAgICAgICBhbmQgd2lsbCBtYWtlIHRoaXMgc3VtIHRoaXJ0eSBtaW5hZSwgdGhhdCB0aGV5IG1heSBoYXZlIG5vdCBhIHdvcmQgdG8gc2F5IGluCiAgICAgICAgICAgICAgICAgICAgcHJvdGVzdC4gV2VsbCwgdGhlbiwgaWYgeW91IHRha2UgYXdheSBvbmUgdGFsZW50IGZyb20gdGhlIGVpZ2h0LCBzZXZlbiBhcmUgbGVmdCwKICAgICAgICAgICAgICAgICAgICB3aGljaCwgYWNjb3JkaW5nIHRvIHRoZWlyIG93biBhZG1pc3Npb25zIG9mIHJlY2VpcHRzLCB0aGV5IG11c3QgbmVjZXNzYXJpbHkgaGF2ZQogICAgICAgICAgICAgICAgICAgIGluIHRoZWlyIHBvc3Nlc3Npb24uIFRoaXMgc3VtLCB0aGVuLCBldmVuIGlmIHRoZXkgcm9iIG1lIG9mIGV2ZXJ5dGhpbmcgZWxzZSBhbmQKICAgICAgICAgICAgICAgICAgICBkZW55IHRoYXQgdGhleSBoYXZlIGl0LCB0aGV5IG91Z2h0IGF0IGxlYXN0IHRvIGhhdmUgcGFpZCBtZSwgc2VlaW5nIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIGFkbWl0IGhhdmluZyByZWNlaXZlZCBpdCBmcm9tIG15IGVzdGF0ZS4gPC90cmFuc2xhdGlvbj4="
translation['27.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICB3aGF0IGlzIGl0IHRoYXQgdGhleSBkbz8gVGhleSByZXBvcnQgbm8gcmV0dXJuIGluIGludGVyZXN0IGZvciB0aGlzIG1vbmV5LCBhbmQKICAgICAgICAgICAgICAgICAgICB0ZWxsIG1lIHRoYXQgdGhleSBoYXZlIGV4cGVuZGVkIHRoZSBlbnRpcmUgcHJpbmNpcGFsIHRvZ2V0aGVyIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgc2V2ZW50eS1zZXZlbiBtaW5hZTsgYW5kIERlbW9waG9uIGhhcywgbW9yZW92ZXIsIGFjdHVhbGx5IHNldCBtZSBkb3duIGFzCiAgICAgICAgICAgICAgICAgICAgaW5kZWJ0ZWQgdG8gaGltLiBJcyBub3QgdGhpcyBhYnNvbHV0ZSBhbmQgYmFyZWZhY2VkIGVmZnJvbnRlcnk/IElzIGl0IG5vdCB0aGUKICAgICAgICAgICAgICAgICAgICB2ZXJ5IGV4Y2VzcyBvZiBvdXRyYWdlb3VzIHJhcGFjaXR5PyBXaGF0IGlzIHRoZSBtZWFuaW5nIG9mIG91dHJhZ2VvdXMsIGlmCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyBwdXNoZWQgdG8gdGhpcyBleHRyZW1lIGFyZSBub3QgdG8gYmUgc28gY2FsbGVkPyA8L3RyYW5zbGF0aW9uPg=="
translation['27.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZGVmZW5kYW50LCB0aGVuLCBmb3IgaGlzIG93biBwYXJ0LCBzaW5jZSBoZSBhZG1pdHMKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcmVjZWl2ZWQgb25lIGh1bmRyZWQgYW5kIGVpZ2h0IG1pbmFlLCBoYXMgaW4gaGlzIHBvc3Nlc3Npb24gdGhlc2UgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGludGVyZXN0IG9uIHRoZW0gZm9yIHRlbiB5ZWFycywgaW4gYWxsIGFib3V0IHRocmVlIHRhbGVudHMgYW5kIG9uZSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgICAgICBkcmFjaG1hZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gcHJvb2YgdGhhdCB3aGF0IEkgc2F5IGlzCiAgICAgICAgICAgICAgICAgICAgdHJ1ZeKAlHRoYXQgZWFjaCBvbmUgb2YgdGhlbSBpbiB0aGUgYWNjb3VudCBvZiBoaXMgZ3VhcmRpYW5zaGlwIGFkbWl0cwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFzIHJlY2VpdmVkIHRoZSBtb25leSwgYnV0IGNsYWltcyB0byBoYXZlIHNwZW50IGl0IGFsbOKAlHRha2UKICAgICAgICAgICAgICAgICAgICB0aGUgZGVwb3NpdGlvbnMgYW5kIHJlYWQgdGhlbS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB0aGluaywgbWVuIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1cnksIHRoYXQgeW91IGhhdmUgbm93IGJlZW4gZnVsbHkgaW5mb3JtZWQgcmVnYXJkaW5nIHRoZSB0aGVmdCBhbmQKICAgICAgICAgICAgICAgICAgICB3cm9uZ2RvaW5ncyBvZiBlYWNoIG9mIHRoZXNlIG1lbi4gWW91IHdvdWxkLCBob3dldmVyLCBoYXZlIGhhZCBtb3JlIGV4YWN0CiAgICAgICAgICAgICAgICAgICAga25vd2xlZGdlIG9mIHRoZSBtYXR0ZXIsIGlmIHRoZXkgaGFkIGJlZW4gd2lsbGluZyB0byBnaXZlIHVwIHRvIG1lIHRoZSB3aWxsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggbXkgZmF0aGVyIGxlZnQ7IGZvciBpdCBjb250YWluZWQg77yIc28gbXkgbW90aGVyIHRlbGxzIG1l77yJCiAgICAgICAgICAgICAgICAgICAgYSBzdGF0ZW1lbnQgb2YgYWxsIHRoZSBwcm9wZXJ0eSB0aGF0IG15IGZhdGhlciBsZWZ0LCBhbG9uZyB3aXRoIGluc3RydWN0aW9ucwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyB0aGUgZnVuZHMgZnJvbSB3aGljaCB0aGVzZSBtZW4gd2VyZSB0byB0YWtlIHdoYXQgaGFkIGJlZW4gZ2l2ZW4gdGhlbSwKICAgICAgICAgICAgICAgICAgICBhbmQgcmVnYXJkaW5nIHRoZSBsZXR0aW5nIG9mIHRoZSBwcm9wZXJ0eS4gPC90cmFuc2xhdGlvbj4="
translation['27.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQKICAgICAgICAgICAgICAgICAgICBhcyBpdCBpcywgb24gbXkgZGVtYW5kaW5nIGl0LCB0aGV5IGFkbWl0IHRoYXQgdGhlcmUgd2FzIGEgd2lsbCwgYnV0IHRoZXkgZG8gbm90CiAgICAgICAgICAgICAgICAgICAgcHJvZHVjZSBpdDsgYW5kIHRoZXkgdGFrZSB0aGlzIGNvdXJzZSBiZWNhdXNlIHRoZXkgZG8gbm90IHdhbnQgdG8gbWFrZSBrbm93biB0aGUKICAgICAgICAgICAgICAgICAgICBhbW91bnQgb2YgdGhlIHByb3BlcnR5IHdoaWNoIHdhcyBsZWZ0LCBhbmQgd2hpY2ggdGhleSBoYXZlIGVtYmV6emxlZCwgYW5kIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGVuZCB0aGF0IHRoZXkgbWF5IG5vdCBhcHBlYXIgdG8gaGF2ZSByZWNlaXZlZCB0aGVpciBsZWdhY2llc+KAlGFzIHRob3VnaAogICAgICAgICAgICAgICAgICAgIHRoZXkgd291bGQgbm90IGVhc2lseSBiZSBjb252aWN0ZWQgYnkgdGhlIGZhY3RzIHRoZW1zZWx2ZXMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2Ugbm93LCBhbmQgcmVhZCB0aGVtIHRoZSBldmlkZW5jZSBvZiB0aG9zZSBpbiB3aG9zZSBwcmVzZW5jZQogICAgICAgICAgICAgICAgICAgIHRoZXkgbWFkZSB0aGVpciBhbnN3ZXJzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcyBtYW48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+4oCcVGhpcyBtYW7igJ0gYXBwZWFycyB0byByZWZlcgogICAgICAgICAgICAgICAgICAgICAgICB0byBUaGVyaXBwaWRlcy48L25vdGU+IGRlY2xhcmVzIHRoYXQgYSB3aWxsIHdhcyBtYWRlIGFuZCB0ZXN0aWZpZXMgdGhhdCBpbgogICAgICAgICAgICAgICAgICAgIGl0IHRoZSB0d28gdGFsZW50cyB3ZXJlIGdpdmVuIHRvIERlbW9waG9uLCBhbmQgdGhlIGVpZ2h0eSBtaW5hZSB0byBBcGhvYnVzOyBidXQKICAgICAgICAgICAgICAgICAgICBoZSBkZWNsYXJlcyB0aGVyZSB3YXMgbm8gYWRkaXRpb25hbCBjbGF1c2UgcmVnYXJkaW5nIHRoZSBzZXZlbnR5IG1pbmFlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgVGhlcmlwcGlkZXMgcmVjZWl2ZWQsIG9yIHJlZ2FyZGluZyB0aGUgYW1vdW50IG9mIHRoZSBwcm9wZXJ0eSBiZXF1ZWF0aGVkLCBvcgogICAgICAgICAgICAgICAgICAgIGluc3RydWN0aW9ucyBhcyB0byB0aGUgbGV0dGluZyBvZiBpdDsgZm9yIGl0IHdhcyBub3QgdG8gaGlzIGludGVyZXN0IHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICB0aGVzZSBmdXJ0aGVyIGFkbWlzc2lvbnMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyB0YWtlIHRoZSBhbnN3ZXIgb2YKICAgICAgICAgICAgICAgICAgICB0aGUgZGVmZW5kYW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgYWxzbwogICAgICAgICAgICAgICAgICAgIGRlY2xhcmVzIHRoYXQgdGhlIHdpbGwgd2FzIG1hZGUsIGFuZCB0aGF0IHRoZSBtb25leSBhY2NydWluZyBmcm9tIHRoZSBjb3BwZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIGdhbGwgd2FzIGR1bHkgcGFpZCB0byBUaGVyaXBwaWRlcywgd2hpY2ggVGhlcmlwcGlkZXMgZGVuaWVzOyBhbmQgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICB0d28gdGFsZW50cyB3ZXJlIHBhaWQgdG8gRGVtb3Bob247IGJ1dCBpbiByZWdhcmQgdG8gdGhlIG1vbmV5IGdpdmVuIHRvIGhpbXNlbGYsCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgaGUgYWRtaXRzIHRoYXQgdGhlIGNsYXVzZSB3YXMgd3JpdHRlbiBpbiB0aGUgd2lsbCwgaGUgZGVjbGFyZXMgdGhhdCBoZSBkaWQKICAgICAgICAgICAgICAgICAgICBub3QgYXNzZW50IHRvIGl0LCBpbiBvcmRlciB0aGF0IGhlIG1heSBub3QgYXBwZWFyIHRvIGhhdmUgcmVjZWl2ZWQgaXQuIEJ1dCBhcyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBhbW91bnQgb2YgdGhlIGVzdGF0ZSBoZSwgdG9vLCByZXZlYWxzIGFic29sdXRlbHkgbm90aGluZywgbm9yIGFzIHRvIGxldHRpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHkuIEZvciBpdCB3YXMgbm90IHRvIGhpcyBpbnRlcmVzdCBlaXRoZXIgdG8gbWFrZSB0aGVzZSBmdXJ0aGVyCiAgICAgICAgICAgICAgICAgICAgYWRtaXNzaW9ucy4gPC90cmFuc2xhdGlvbj4="
translation['27.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYW1vdW50IG9mIHRoZSBwcm9wZXJ0eSB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2FzIGxlZnQgaXMsIGhvd2V2ZXIsIG5vbmUgdGhlIGxlc3MgY2xlYXIg77yIdGhvdWdoIHRoZXNlIG1lbiBzZWVrIHRvCiAgICAgICAgICAgICAgICAgICAgY29uY2VhbCBpdO+8iSBmcm9tIHRoZSB0ZXJtcyBvZiB0aGUgd2lsbCwgaW4gYWNjb3JkYW5jZSB3aXRoIHdoaWNoIHRoZXkKICAgICAgICAgICAgICAgICAgICBzdGF0ZSB0aGF0IHN1Y2ggbGFyZ2Ugc3VtcyB3ZXJlIGdpdmVuIHRvIHRoZW0gc2V2ZXJhbGx5LiBXaGVuIGEgbWFuIG91dCBvZiBmb3VyCiAgICAgICAgICAgICAgICAgICAgdGFsZW50cyBhbmQgdGhyZWUgdGhvdXNhbmQgZHJhY2htYWUgaGFzIGdpdmVuIHRvIHR3byBvZiB0aGVzZSBtZW4gdGhyZWUgdGFsZW50cwogICAgICAgICAgICAgICAgICAgIGFuZCB0d28gdGhvdXNhbmQgZHJhY2htYWUgYXMgbWFycmlhZ2UtcG9ydGlvbnMsIGFuZCB0byB0aGUgdGhpcmQgdGhlIGludGVyZXN0IG9uCiAgICAgICAgICAgICAgICAgICAgc2V2ZW50eSBtaW5hZSwgaXQgaXMgY2xlYXIsIEkgZmFuY3ksIHRoYXQgaGUgdG9vayB0aGVzZSBzdW1zLCBub3QgZnJvbSBhIHNtYWxsCiAgICAgICAgICAgICAgICAgICAgZXN0YXRlLCBidXQgZnJvbSBvbmUgYmVxdWVhdGhlZCB0byBtZSBvZiBtb3JlIHRoYW4gZG91YmxlIHRoaXMgYW1vdW50LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IsIEkgdGFrZSBpdCwgaGUgd291bGQgbm90IHdpc2ggdG8gbGVhdmUKICAgICAgICAgICAgICAgICAgICBtZSwgaGlzIHNvbiwgaW4gcG92ZXJ0eSwgYW5kIGJlIGVhZ2VyIGZ1cnRoZXIgdG8gZW5yaWNoIHRoZXNlIG1lbiwgd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IHdlYWx0aHkuIE5vOyBpdCB3YXMgYmVjYXVzZSBvZiB0aGUgc2l6ZSBvZiB0aGUgZXN0YXRlIGxlZnQgdG8gbWUgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIGdhdmUgdG8gVGhlcmlwcGlkZXMgdGhlIGludGVyZXN0IG9uIGEgc3VtIHNvIGNvbnNpZGVyYWJsZSwgYW5kIHRvIERlbW9waG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgdHdvIHRhbGVudHPigJR0aG91Z2ggaGUgd2FzIG5vdCB5ZXQgdG8gbWFycnkgbXkKICAgICAgICAgICAgICAgICAgICBzaXN0ZXLigJRpbiBvcmRlciB0byBhY2NvbXBsaXNoIG9uZSBvciB0aGUgb3RoZXIgb2YgdHdvIGVuZHM6IGVpdGhlciBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGJ5IGhpcyBnaWZ0cyBlbmNvdXJhZ2UgdGhlbSB0byBhY3QgdGhlIG1vcmUgaG9ub3JhYmx5IGluIHRoZSBndWFyZGlhbnNoaXAsCiAgICAgICAgICAgICAgICAgICAgb3IsIGlmIHRoZXkgc2hvdWxkIHByb3ZlIGRpc2hvbmVzdCwgdGhleSB3b3VsZCBtZWV0IHdpdGggbm8gbGVuaWVuY3kgYXQgeW91cgogICAgICAgICAgICAgICAgICAgIGhhbmRzLCBzZWVpbmcgdGhhdCwgYWZ0ZXIgYmVpbmcgc28gbGliZXJhbGx5IHRyZWF0ZWQsIHRoZXkgc2lubmVkIHNvIGdyaWV2b3VzbHkKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['27.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIG5vdywgdGhlIGRlZmVuZGFudCwgd2hvIGluCiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb24gdG8gbXkgbW90aGVyJ3MgbWFycmlhZ2UtcG9ydGlvbiBoYXMgdGFrZW4gdGhlIGZlbWFsZSBzZXJ2YW50cywgYW5kIGhhcwogICAgICAgICAgICAgICAgICAgIGxpdmVkIGluIHRoZSBob3VzZSwgd2hlbiBpdCBiZWNvbWVzIG5lY2Vzc2FyeSB0byByZW5kZXIgYW4gYWNjb3VudCBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMsIHNheXMgaGUgaXMgYnVzeSB3aXRoIGhpcyBvd24gYWZmYWlyczsgYW5kIGhlIGhhcyBjb21lIHRvIHN1Y2ggYSBwaXRjaAogICAgICAgICAgICAgICAgICAgIG9mIHJhcGFjaW91c25lc3MsIHRoYXQgaGUgaGFzIGV2ZW4gY2hlYXRlZCBteSBpbnN0cnVjdG9ycyBvZiB0aGVpciBmZWVzLCBhbmQgaGFzCiAgICAgICAgICAgICAgICAgICAgbGVmdCB1bnBhaWQgc29tZSBvZiB0aGUgdGF4ZXMsIGFsdGhvdWdoIGhlIGNoYXJnZXMgbWUgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50cy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSB0aGVzZSBkZXBvc2l0aW9ucyB0b28sIGFuZCByZWFkCiAgICAgICAgICAgICAgICAgICAgdGhlbSB0byB0aGUganVyeS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['27.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93IGNvdWxkIG9uZQogICAgICAgICAgICAgICAgICAgIHNob3cgbW9yZSBjbGVhcmx5IHRoYXQgaGUgaGFzIG1hZGUgaGF2b2Mgb2YgdGhlIHdob2xlIGVzdGF0ZSwgc3BhcmluZyBub3RoaW5nLAogICAgICAgICAgICAgICAgICAgIGhvd2V2ZXIgc21hbGwsIHRoYW4gYnkgcHJvdmluZywgYXMgSSBoYXZlIGRvbmUgYnkgc28gbWFueSB3aXRuZXNzZXMgYW5kIHByb29mcywKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGFkbWl0dGVkIGhhdmluZyByZWNlaXZlZCB0aGUgbWFycmlhZ2UtcG9ydGlvbiwgYW5kIHRoYXQgaGUgYWNrbm93bGVkZ2VkCiAgICAgICAgICAgICAgICAgICAgaW4gd3JpdGluZyB0byB0aGUgZ3VhcmRpYW5zIHRoYXQgaGUgaGFkIGl0OyB0aGF0IGhlIGVuam95ZWQgdGhlIHByb2ZpdHMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdG9yeSwgYnV0IG1ha2VzIHJlcG9ydCBvZiBub25lOyA8L3RyYW5zbGF0aW9uPg=="
translation['27.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IG9mIG91cgogICAgICAgICAgICAgICAgICAgIG90aGVyIGVmZmVjdHMgaGUgaGFzIHNvbGQgc29tZSB3aXRob3V0IHBheWluZyB0byB1cyB0aGUgcHJvY2VlZHMsIHdoaWxlIG90aGVycwogICAgICAgICAgICAgICAgICAgIGhlIGhhcyB0YWtlbiB0byBoaW1zZWxmIGFuZCBoaWRkZW47IHRoYXQgYWNjb3JkaW5nIHRvIHRoZSBhY2NvdW50IHdoaWNoIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgcmVuZGVyZWQsIGhlIGhhcyBlbWJlenpsZWQgbGFyZ2Ugc3VtczsgdGhhdCBpbiBhZGRpdGlvbiB0byBhbGwgdGhpcyBoZQogICAgICAgICAgICAgICAgICAgIGhhcyBtYWRlIGF3YXkgd2l0aCB0aGUgd2lsbCwgc29sZCB0aGUgc2xhdmVzLCBhbmQgaW4gYWxsIG90aGVyIHJlc3BlY3RzIGhhcwogICAgICAgICAgICAgICAgICAgIGFkbWluaXN0ZXJlZCB0aGUgZXN0YXRlIGFzIG5vdCBldmVuIHRoZSBiaXR0ZXJlc3QgZW5lbWllcyB3b3VsZCBoYXZlIGRvbmU/IEkgZG8KICAgICAgICAgICAgICAgICAgICBub3Qgc2VlIGhvdyBhbnlvbmUgY291bGQgcHJvdmUgdGhlIG1hdHRlciBtb3JlIGNsZWFybHkuIDwvdHJhbnNsYXRpb24+"
translation['27.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGUgaGFkIHRoZSBhdWRhY2l0eSB0byBzYXkKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIGFyYml0cmF0b3I8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHB1YmxpYyBhcmJpdHJhdG9ycyBhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IHdlcmUgY2hvc2VuIGZyb20gYQogICAgICAgICAgICAgICAgICAgICAgICBib2R5IG9mIGNpdGl6ZW5zIG9mIGFkdmFuY2VkIGFnZS4gVG8gb25lIG9yIGFub3RoZXIgb2YgdGhlc2UgbWVuCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iHNlbGVjdGVkIGJ5IGxvdO+8iSB0aGUgbWFnaXN0cmF0ZSB3b3VsZCByZWZlciBjaXZpbCBjYXNlcwogICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdHJpYWwgaW4gaG9wZXMgb2YgYnJpbmdpbmcgYWJvdXQgYSBzZXR0bGVtZW50IG9mIHRoZSBwb2ludHMgYXQgaXNzdWUKICAgICAgICAgICAgICAgICAgICAgICAgb3V0IG9mIGNvdXJ0Ljwvbm90ZT4gdGhhdCBoZSBoYWQgcGFpZCBtYW55IGRlYnRzIGZvciBtZSBvdXQgb2YgdGhlIGVzdGF0ZSB0bwogICAgICAgICAgICAgICAgICAgIERlbW9waG9uIGFuZCBUaGVyaXBwaWRlcywgaGlzIGZlbGxvdy1ndWFyZGlhbnMsIGFuZCB0aGF0IHRoZXkgcmVjZWl2ZWQgYSBsYXJnZQogICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgbXkgcHJvcGVydHksIHlldCBuZWl0aGVyIG9mIHRoZXNlIGZhY3RzIHdhcyBoZSBhYmxlIHRvIHByb3ZlLiBIZSBkaWQgbm90CiAgICAgICAgICAgICAgICAgICAgc2hvdyBieSB0aGUgYm9va3MgdGhhdCBteSBmYXRoZXIgbGVmdCBtZSBpbiBkZWJ0LCBub3IgaGFzIGhlIGJyb3VnaHQgZm9yd2FyZCBhcwogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyB0aGUgbWVuIHdob20gaGUgc2F5cyBoZSBwYWlkOyBub3IsIGFnYWluLCBpcyB0aGUgYW1vdW50IG9mIG1vbmV5IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgaGUgY2hhcmdlZCBhZ2FpbnN0IGhpcyBmZWxsb3ctZ3VhcmRpYW5zIGVxdWFsIHRvIHRoZSBhbW91bnQgd2hpY2ggaGUgaXMgc2hvd24gdG8KICAgICAgICAgICAgICAgICAgICBoYXZlIHJlY2VpdmVkIGhpbXNlbGYuIE9uIHRoZSBjb250cmFyeSwgaXQgaXMgbXVjaCBsZXNzLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gd2VyZSBjaG9zZW4gZnJvbSBhCiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgb2YgY2l0aXplbnMgb2YgYWR2YW5jZWQgYWdlLiBUbyBvbmUgb3IgYW5vdGhlciBvZiB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICAgICAg77yIc2VsZWN0ZWQgYnkgbG9077yJIHRoZSBtYWdpc3RyYXRlIHdvdWxkIHJlZmVyIGNpdmlsIGNhc2VzCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0cmlhbCBpbiBob3BlcyBvZiBicmluZ2luZyBhYm91dCBhIHNldHRsZW1lbnQgb2YgdGhlIHBvaW50cyBhdCBpc3N1ZQogICAgICAgICAgICAgICAgICAgICAgICBvdXQgb2YgY291cnQuPC90cmFuc2xhdGlvbj4="
translation['27.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBhcmJpdHJhdG9yIHF1ZXN0aW9uZWQgaGltIGFib3V0IGVhY2ggb2YgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzLCBhbmQgYXNrZWQgaGltIHdoZXRoZXIgaGUgaGFkIG1hbmFnZWQgaGlzIG93biBlc3RhdGUgZnJvbSB0aGUgaW50ZXJlc3QKICAgICAgICAgICAgICAgICAgICBvciBoYWQgc3BlbnQgdGhlIHByaW5jaXBhbCwgYW5kIHdoZXRoZXIsaWYgaGUgaGFkIGJlZW4gdW5kZXIgZ3VhcmRpYW5zaGlwLCBoZQogICAgICAgICAgICAgICAgICAgIHdvdWxkIGhhdmUgYWNjZXB0ZWQgYW4gYWNjb3VudCBvZiB0aGlzIHNvcnQgZnJvbSBoaXMgZ3VhcmRpYW5zIG9yIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBkZW1hbmRlZCB0aGF0IHRoZSBtb25leSBiZSBkdWx5IHBhaWQgdG8gaGltIHdpdGggdGhlIGFjY3J1ZWQgaW50ZXJlc3QsIGhlIG1hZGUKICAgICAgICAgICAgICAgICAgICBubyBhbnN3ZXIgdG8gdGhlc2UgcXVlc3Rpb25zLCBidXQgdGVuZGVyZWQgbWUgYSBjaGFsbGVuZ2U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGNoYWxsZW5nZSB3YXMgb2Z0ZW4gdXNlZCBpbiBBdGhlbmlhbiBsYXdzdWl0cy4gSGVyZQogICAgICAgICAgICAgICAgICAgICAgICBBcGhvYnVzIHZpcnR1YWxseSBvZmZlcnMgRGVtb3N0aGVuZXMgYSBjb21wcm9taXNlLCBmaXhpbmcgdGhlIHZhbHVlIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBlc3RhdGUgYXQgdGVuIHRhbGVudHMgaW5zdGVhZCBvZiB0aGlydHkuIFNvbWV0aW1lcyB0aGUgY2hhbGxlbmdlcgogICAgICAgICAgICAgICAgICAgICAgICDigJxkYXJlc+KAnSBoaXMgb3Bwb25lbnQgdG8gZ2l2ZSBhbiBvYXRoLCBvciB0byBvZmZlciBhCiAgICAgICAgICAgICAgICAgICAgICAgIHNsYXZlIGZvciB0b3J0dXJlLjwvbm90ZT4gdG8gdGhlIGVmZmVjdCB0aGF0IGhlIHdhcyByZWFkeSB0byBzaG93IHRoYXQgbXkKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSB3YXMgd29ydGggdGVuIHRhbGVudHMsIGFuZCBzYWlkIHRoYXQsIGlmIGl0IGZlbGwgc2hvcnQgb2YgdGhpcyBhbW91bnQsCiAgICAgICAgICAgICAgICAgICAgaGUgd291bGQgaGltc2VsZiBtYWtlIHVwIHRoZSBkaWZmZXJlbmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['27.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuCiAgICAgICAgICAgICAgICAgICAgSSBiYWRlIGhpbSBwcm92ZSB0aGlzIHRvIHRoZSBhcmJpdHJhdG9yLCBoZSBkaWQgbm90IGRvIHNvLCBub3IgZGlkIGhlIHNob3cgdGhhdAogICAgICAgICAgICAgICAgICAgIGhpcyBmZWxsb3ctZ3VhcmRpYW5zIGhhZCBwYWlkIG1lIO+8iGZvciBpZiBoZSBoYWQsIHRoZSBhcmJpdHJhdG9yIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGhhdmUgZ2l2ZW4ganVkZ2VtZW50IGFnYWluc3QgaGlt77yJOyBidXQgaGUgcHV0IGluIGEgcGllY2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgZXZpZGVuY2U8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHNwZWFrZXIgd291bGQgaGF2ZSB0aGUganVyeQogICAgICAgICAgICAgICAgICAgICAgICB0aGluayB0aGF0IHRoZSBiaXQgb2YgZXZpZGVuY2UgaW4gcXVlc3Rpb24gaXMgdW53b3J0aHkgb2YgZnVydGhlcgogICAgICAgICAgICAgICAgICAgICAgICBub3RpY2UuPC9ub3RlPiBvZiBhIHNvcnQgcmVnYXJkaW5nIHdoaWNoIGhlIHdpbGwgdHJ5IHRvIGZpbmQgc29tZXRoaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHNheS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgZXZlbiBub3cgaGUgc3RpbGwgdHJpZXMgdG8gYXNzZXJ0IHRoYXQKICAgICAgICAgICAgICAgICAgICBJIGFtIGluIHBvc3Nlc3Npb24gb2YgcHJvcGVydHksIGFzayBoaW0gd2hvIGhhbmRlZCBpdCBvdmVyIHRvIG1lLCBhbmQgZGVtYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBwcm9kdWNlIHdpdG5lc3NlcyB0byBwcm92ZSBlYWNoIHN0YXRlbWVudC4gPC90cmFuc2xhdGlvbj4="
translation['27.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5JZiBoZSBkZWNsYXJlcyB0aGF0IGl0IGlzIG15IHBvc3Nlc3Npb24gaW4gdGhpcyBzZW5zZSwgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIHJlY2tvbnMgdXAgd2hhdCBpcyBpbiB0aGUgaGFuZHMgb2YgZWl0aGVyIG9mIHRoZSB0cnVzdGVlcywgaXQgd2lsbCBiZSBjbGVhcgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgYWNjb3VudHMgZm9yIG9ubHkgYSB0aGlyZCBwYXJ0LCBhbmQgc3RpbGwgZG9lcyBub3QgcHJvdmUgdGhhdCBJIGhhdmUKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIG9mIGl0LiBGb3IgYXMgSSBoYXZlIGNvbnZpY3RlZCB0aGUgZGVmZW5kYW50IG9mIGhhdmluZyBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIHRoZSBsYXJnZSBhbW91bnQgSSBoYXZlIHN0YXRlZCwgSSBzaGFsbCBhbHNvIHByb3ZlIHRoYXQgZWFjaCBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAgaGFzIG5vdCBsZXNzIHRoYW4gaGUuIFRoaXMgc3RhdGVtZW50LCB0aGVyZWZvcmUsIHdpbGwgbm90IGhlbHAgaGltLiBObzsgaGUgbXVzdAogICAgICAgICAgICAgICAgICAgIHNob3cgdGhhdCBlaXRoZXIgaGUgb3IgaGlzIGZlbGxvdy10cnVzdGVlcyByZWFsbHkgaGFuZGVkIHRoZSBtb25leSBvdmVyIHRvIG1lLgogICAgICAgICAgICAgICAgICAgIElmIGhlIGZhaWxzIHRvIHByb3ZlIHRoaXMsIHdoeSBzaG91bGQgeW91IHBheSBhbnkgYXR0ZW50aW9uIHRvIGhpcyBjaGFsbGVuZ2U/IEhlCiAgICAgICAgICAgICAgICAgICAgc3RpbGwgZG9lcyBub3QgcHJvdmUgdGhhdCBJIGhhdmUgdGhlIG1vbmV5LiA8L3RyYW5zbGF0aW9uPg=="
translation['27.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVpbmcgc29yZWx5IGF0IGEgbG9zcyB0byBleHBsYWluIGFueSBvZgogICAgICAgICAgICAgICAgICAgIHRoZXNlIG1hdHRlcnMgYmVmb3JlIHRoZSBhcmJpdHJhdG9yLCBhbmQgYmVpbmcgY29udmljdGVkIG9uIGVhY2ggcG9pbnQsIGp1c3QgYXMKICAgICAgICAgICAgICAgICAgICBoZSBpcyBub3cgYmVmb3JlIHlvdSwgaGUgaGFkIHRoZSBhdWRhY2l0eSB0byBtYWtlIGFuIG91dHJhZ2VvdXNseSBmYWxzZQogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudCwgdG8gdGhlIGVmZmVjdCB0aGF0IG15IGZhdGhlciBsZWZ0IG1lIGZvdXIgdGFsZW50cyBidXJpZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JvdW5kLCBhbmQgdGhhdCBoZSBoYWQgcHV0IG15IG1vdGhlciBpbiBjaGFyZ2Ugb2YgdGhlbS4gSGUgbWFkZSB0aGlzIHN0YXRlbWVudAogICAgICAgICAgICAgICAgICAgIGluIG9yZGVyIHRoYXQsIGlmIEkgc2hvdWxkIGFzc3VtZSB0aGF0IGhlIHdvdWxkIHJlcGVhdCBpdCBoZXJlLCBJIG1pZ2h0IHdhc3RlIG15CiAgICAgICAgICAgICAgICAgICAgdGltZSBpbiByZWZ1dGluZyBpdCwgd2hlbiBJIG91Z2h0IHRvIGJlIHByZWZlcnJpbmcgdGhlIHJlc3Qgb2YgbXkgY2hhcmdlcwogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgaGltOyBvciBpZiBJIHNob3VsZCBwYXNzIGl0IG92ZXIsIG5vdCBleHBlY3RpbmcgaGltIHRvIHJlcGVhdCBpdCwgdGhlbgogICAgICAgICAgICAgICAgICAgIGhlIGhpbXNlbGYgbWlnaHQgbm93IGJyaW5nIGl0IHVwLCBpbiB0aGUgaG9wZSB0aGF0IEksIGJ5IHNlZW1pbmcgdG8gYmUgcmljaCwKICAgICAgICAgICAgICAgICAgICBtaWdodCBtZWV0IHdpdGggbGVzcyBjb21wYXNzaW9uIGZyb20geW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['27.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQKICAgICAgICAgICAgICAgICAgICBoZSB3aG8gZGFyZWQgdG8gbWFrZSBzdWNoIGEgc3RhdGVtZW50IHB1dCBpbiBubyBldmlkZW5jZSB0byBwcm92ZSBpdCwgYnV0IHJlbGllZAogICAgICAgICAgICAgICAgICAgIG9uIGhpcyBiYXJlIHdvcmQsIGFzIHRob3VnaCB5b3Ugd291bGQgbGlnaHRseSBnaXZlIGhpbSBjcmVkZW5jZS4gV2hlbiBvbmUgYXNrcwogICAgICAgICAgICAgICAgICAgIGhpbSB1cG9uIHdoYXQgaGUgaGFzIHNwZW50IHNvIG11Y2ggb2YgbXkgbW9uZXksIGhlIHNheXMgaGUgaGFzIHBhaWQgZGVidHMgZm9yCiAgICAgICAgICAgICAgICAgICAgbWUsIGFuZCBzbyByZXByZXNlbnRzIG1lIGFzIHBvb3I7IHlldCwgd2hlbiBpdCBwbGVhc2VzIGhpbSwgaGUgbWFrZXMgbWUgcmljaCwgYXMKICAgICAgICAgICAgICAgICAgICBpdCBzZWVtcywgc2VlaW5nIHRoYXQgbXkgZmF0aGVyIGxlZnQgc3VjaCBhIHN1bSBvZiBtb25leSBpbiB0aGUgaG91c2UuIEl0IGlzCiAgICAgICAgICAgICAgICAgICAgZWFzeSB0byBzZWUsIGhvd2V2ZXIsIGZyb20gbWFueSBjb25zaWRlcmF0aW9ucyB0aGF0IGhlIGlzIGx5aW5nLCBhbmQgdGhhdCB0aGVyZQogICAgICAgICAgICAgICAgICAgIGlzIG5vIGJhc2lzIG9mIGZhY3QgaW4gdGhpcyBzdG9yeS4gPC90cmFuc2xhdGlvbj4="
translation['27.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgaGFkIG5vIGNvbmZpZGVuY2UgaW4gdGhlc2UgbWVuLCBpdCBpcyBwbGFpbiB0aGF0IGhlIHdvdWxkIG5laXRoZXIgaGF2ZQogICAgICAgICAgICAgICAgICAgIGVudHJ1c3RlZCB0byB0aGVtIHRoZSByZXN0IG9mIGhpcyBwcm9wZXJ0eSwgbm9yLCBpZiBoZSBoYWQgbGVmdCB0aGlzIG1vbmV5IGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHdheSBhbGxlZ2VkLCB3b3VsZCBoZSBoYXZlIHRvbGQgdGhlbSBvZiBpdC4gSXQgd291bGQgaGF2ZSBiZWVuIHRoZSBoZWlnaHQgb2YKICAgICAgICAgICAgICAgICAgICBtYWRuZXNzIHRvIHRlbGwgdGhlbSBvZiBoaWRkZW4gdHJlYXN1cmUsIHdoZW4gaGUgd2FzIG5vdCBnb2luZyB0byBtYWtlIHRoZW0KICAgICAgICAgICAgICAgICAgICB0cnVzdGVlcyBldmVuIG9mIGhpcyB2aXNpYmxlIHByb3BlcnR5LiBCdXQgaWYgaGUgaGFkIGNvbmZpZGVuY2UgaW4gdGhlbSwgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBub3QsIEkgdGFrZSBpdCwgaGF2ZSBnaXZlbiBpbnRvIHRoZWlyIGhhbmRzIHRoZSBidWxrIG9mIGhpcyBwcm9wZXJ0eSwgYW5kCiAgICAgICAgICAgICAgICAgICAgbm90IGhhdmUgcHV0IHRoZW0gaW4gY29udHJvbCBvZiB0aGlzLiBOb3Igd291bGQgaGUgaGF2ZSBlbnRydXN0ZWQgdGhpcyByZW1haW5kZXIKICAgICAgICAgICAgICAgICAgICB0byBteSBtb3RoZXIgdG8ga2VlcCwgYW5kIHRoZW4gaGF2ZSBnaXZlbiBoZXIgaGVyc2VsZiBpbiBtYXJyaWFnZSB0byB0aGlzIG1hbgogICAgICAgICAgICAgICAgICAgIHdobyB3YXMgb25lIG9mIHRoZSBndWFyZGlhbnMuIEZvciBpdCBpcyBub3QgcmVhc29uYWJsZSB0aGF0IGhlIHNob3VsZCBzZWVrIHRvCiAgICAgICAgICAgICAgICAgICAgc2VjdXJlIHRoZSBtb25leSB0aHJvdWdoIG15IG1vdGhlciwgYW5kIHlldCB0byBwdXQgb25lIG9mIHRoZSBtZW4gd2hvbSBoZQogICAgICAgICAgICAgICAgICAgIGRpc3RydXN0ZWQgaW4gY29udHJvbCBib3RoIG9mIGhlciBhbmQgb2YgaXQuIDwvdHJhbnNsYXRpb24+"
translation['27.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaWYgdGhlcmUgd2VyZSBhbnkgdHJ1dGggaW4gYWxsIHRoaXMsIGRvIHlvdSBzdXBwb3NlIEFwaG9idXMgd291bGQKICAgICAgICAgICAgICAgICAgICBub3QgaGF2ZSB0YWtlbiBteSBtb3RoZXIgdG8gd2lmZSwgYmVxdWVhdGhlZCB0byBoaW0gYXMgc2hlIHdhcyBieSBteSBmYXRoZXI/IEhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGFscmVhZHkgdGFrZW4gaGVyIG1hcnJpYWdlLXBvcnRpb27igJR0aGUgZWlnaHR5IG1pbmFl4oCUYXMKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggaGUgd2VyZSBnb2luZyB0byBtYXJyeSBoZXI7IGJ1dCBoZSBzdWJzZXF1ZW50bHkgbWFycmllZCB0aGUgZGF1Z2h0ZXIgb2YKICAgICAgICAgICAgICAgICAgICBQaGlsb25pZGVzIG9mIE1lbGl0ZTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5NZWxpdGUgd2FzIGEgZGVtZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgdHJpYmUgQ2Vjcm9waXMuPC9ub3RlPiBCdXQgaWYgdGhlcmUgaGFkIGJlZW4gZm91ciB0YWxlbnRzIGluIHRoZSBob3VzZSBhbmQKICAgICAgICAgICAgICAgICAgICBpbiBoZXIgY3VzdG9keSwgYXMgaGUgYWxsZWdlcywgZG9uJ3QgeW91IGltYWdpbmUgaGUgd291bGQgaGF2ZSByYWNlZCB0byBnZXQKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uIGJvdGggb2YgaGVyIGFuZCBvZiB0aGVtPyA8L3RyYW5zbGF0aW9uPg=="
translation['27.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5Xb3VsZCBoZQogICAgICAgICAgICAgICAgICAgIGhhdmUgam9pbmVkIHdpdGggaGlzIGNvLXRydXN0ZWVzIGluIHNvIHNoYW1lZnVsbHkgcGx1bmRlcmluZyBteSB2aXNpYmxlCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksIHdoaWNoIG1hbnkgb2YgeW91IGtuZXcgaGFkIGJlZW4gbGVmdCBtZSwgYW5kIGhhdmUgcmVmcmFpbmVkLCB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIHRoZSBjaGFuY2UsIGZyb20gc2VpemluZyBhIGZ1bmQgdG8gdGhlIGV2aWRlbmNlIG9mIHdoaWNoIHlvdSB3b3VsZCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBhYmxlIHRvIHRlc3RpZnk/IFdobyBjYW4gYmVsaWV2ZSB0aGlzPyBJdCBpcyBpbXBvc3NpYmxlLCBtZW4gb2YgdGhlIGp1cnk7IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgaW1wb3NzaWJsZS4gTm87IG15IGZhdGhlciBlbnRydXN0ZWQgdG8gdGhlc2UgbWVuIGFsbCB0aGUgcHJvcGVydHkgd2hpY2ggaGUgbGVmdCwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGRlZmVuZGFudCB3aWxsIHRlbGwgdGhpcyBzdG9yeSwgdGhhdCBJIG1heSBtZWV0IHdpdGggbGVzcyBjb21wYXNzaW9uCiAgICAgICAgICAgICAgICAgICAgZnJvbSB5b3UuIDwvdHJhbnNsYXRpb24+"
translation['27.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SQogICAgICAgICAgICAgICAgICAgIGhhdmUgbWFueSBvdGhlciBjaGFyZ2VzIHRvIG1ha2UgYWdhaW5zdCBoaW0sIGJ1dCBzdW1taW5nIHRoZW0gYWxsIHVwIGluIG9uZSwgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgYnJlYWsgZG93biBldmVyeSBkZWZlbmNlIG9mIGhpcy4gSGUgY291bGQgaGF2ZSBhdm9pZGVkIGFsbCB0aGlzIHRyb3VibGUsCiAgICAgICAgICAgICAgICAgICAgaGFkIGhlIGxldCB0aGUgZXN0YXRlIGluIGFjY29yZGFuY2Ugd2l0aCB0aGVzZSBsYXdzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlIHRoZSBsYXdzIGFuZCByZWFkIHRoZW0uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3cyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhd3M8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3czwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHRoZSBjYXNlIG9mIEFudGlkb3J1cywgYXMgYSByZXN1bHQgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgcHJvcGVydHkgaGF2aW5nIGJlZW4gbGV0IGluIGFjY29yZGFuY2Ugd2l0aCB0aGVzZSBsYXdzLCB0aGVyZSB3YXMgZ2l2ZW4gb3ZlcgogICAgICAgICAgICAgICAgICAgIHRvIGhpbSwgYXQgdGhlIGVuZCBvZiBzaXggeWVhcnMsIGFuIGVzdGF0ZSBvZiBzaXggdGFsZW50cyBhbmQgbW9yZSBmcm9tIGFuCiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwgYW1vdW50IG9mIHRocmVlIHRhbGVudHMgYW5kIHRocmVlIHRob3VzYW5kIGRyYWNobWFlOyBhbmQgdGhpcyBzb21lIG9mCiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgc2VlbiB3aXRoIHlvdXIgb3duIGV5ZXM7IGZvciBUaGVvZ2VuZXMgb2YgUHJvYmFsaW50aHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5Qcm9iYWxpbnRodXMgd2FzIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgUGFuZGlvbmlzLjwvbm90ZT4gd2hvIGxlYXNlZCB0aGUgZXN0YXRlLCBjb3VudGVkIG91dCB0aGF0IHN1bSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXJrZXQtcGxhY2UuIDwvdHJhbnNsYXRpb24+"
translation['27.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaW4gbXkgY2FzZSwgZm91cnRlZW4gdGFsZW50cwogICAgICAgICAgICAgICAgICAgIGluIHRlbiB5ZWFycywgd2hlbiBjb25zaWRlcmF0aW9uIGlzIGdpdmVuIHRvIHRoZSB0aW1lIGFuZCB0aGUgdGVybXMgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgbGVhc2UsIG91Z2h0IHRvIGhhdmUgYmVlbiBtb3JlIHRoYW4gdHJlYmxlZC4gQXNrIGhpbSB3aHkgaGUgZGlkIG5vdCBkbyB0aGlzLiBJZgogICAgICAgICAgICAgICAgICAgIGhlIGRlY2xhcmVzIHRoYXQgaXQgd2FzIGJldHRlciBub3QgdG8gbGV0IHRoZSBlc3RhdGUsIGxldCBoaW0gc2hvdywgbm90IHRoYXQgaXQKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiBkb3VibGVkIG9yIHRyZWJsZWQsIGJ1dCB0aGF0IHRoZSBtZXJlIHByaW5jaXBhbCBoYXMgYmVlbiBwYWlkIGJhY2sgdG8KICAgICAgICAgICAgICAgICAgICBtZSBpbiBmdWxsLiBCdXQgaWYgb3V0IG9mIGZvdXJ0ZWVuIHRhbGVudHMgdGhleSBoYXZlIGhhbmRlZCBvdmVyIHRvIG1lIG5vdCBldmVuCiAgICAgICAgICAgICAgICAgICAgc2V2ZW50eSBtaW5hZSwgYW5kIG9uZSBvZiB0aGVtIGhhcyBhY3R1YWxseSByZWNvcmRlZCBtZSBhcyBpbiBoaXMgZGVidCwgaG93IGNhbgogICAgICAgICAgICAgICAgICAgIGl0IGJlIHJpZ2h0IHRvIGFjY2VwdCBhbnkgd29yZCB0aGV5IHNheT8gSXQgaXMgc3VyZWx5IGltcG9zc2libGUuIDwvdHJhbnNsYXRpb24+"
translation['27.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2VlaW5nIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ydHVuZSBsZWZ0IG1lIHdhcyBvZiBzbyBncmVhdCB2YWx1ZSwgYXMgeW91IGhlYXJkIGF0IHRoZSBiZWdpbm5pbmcsIHRoZSB0aGlyZAogICAgICAgICAgICAgICAgICAgIHBhcnQgb2YgaXQgYnJpbmdpbmcgaW4gYW4gaW5jb21lIG9mIGZpZnR5IG1pbmFlLCB0aGVzZSBtZW4sIGFsYmVpdCBpbnNhdGlhdGUgaW4KICAgICAgICAgICAgICAgICAgICB0aGVpciBncmVlZCwgZXZlbiBpZiB0aGV5IHJlZnVzZWQgdG8gbGV0IHRoZSBwcm9wZXJ0eSwgbWlnaHQgb3V0IG9mIHRoaXMgaW5jb21lCiAgICAgICAgICAgICAgICAgICAgYW5kIGxlYXZpbmcgdGhlIHByaW5jaXBhbCB1bnRvdWNoZWQsIGhhdmUgbWFpbnRhaW5lZCB1cywgcGFpZCB0aGUgdGF4ZXMgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGUsIGFuZCBzYXZlZCB0aGUgcmVzaWR1ZS4gPC90cmFuc2xhdGlvbj4="
translation['27.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcmVzdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlc3RhdGXigJRhbiBhbW91bnQgdHdpY2UgYXMgbGFyZ2XigJR0aGV5IG1pZ2h0IGhhdmUgaW52ZXN0ZWQKICAgICAgICAgICAgICAgICAgICBwcm9maXRhYmx5LCBhbmQsIGlmIGdyZWVkeSBmb3IgbW9uZXksIGhhdmUgdGFrZW4gYSByZWFzb25hYmxlIGFtb3VudCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzLCBhbmQgaGF2ZSBpbmNyZWFzZWQgbXkgZXN0YXRlIGZyb20gdGhlIGluY29tZSwgYmVzaWRlcyBrZWVwaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHByaW5jaXBhbCBpbnRhY3QuIFlldCB0aGV5IGRpZCBub3RoaW5nIG9mIHRoZSBzb3J0LiBJbnN0ZWFkLCBieSBzZWxsaW5nIHRvIG9uZQogICAgICAgICAgICAgICAgICAgIGFub3RoZXIgdGhlIG1vc3QgdmFsdWFibGUgb2YgdGhlIHNsYXZlcyBhbmQgYnkgYWJzb2x1dGVseSBkb2luZyBhd2F5IHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdCwgdGhleSBkZXN0cm95ZWQgdGhlIGV4aXN0aW5nIHNvdXJjZSBvZiBteSBpbmNvbWUgYW5kIHNlY3VyZWQgYSBjb25zaWRlcmFibGUKICAgICAgICAgICAgICAgICAgICBvbmUgZm9yIHRoZW1zZWx2ZXMgYXQgbXkgY29zdC4gPC90cmFuc2xhdGlvbj4="
translation['27.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgdGFrZW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHJlc3QgdGh1cyBzaGFtZWZ1bGx5LCB0aGV5IHVuaXRlIGluIG1haW50YWluaW5nIHRoYXQgbW9yZSB0aGFuIGhhbGYgb2YKICAgICAgICAgICAgICAgICAgICBteSBwcm9wZXJ0eSB3YXMgbmV2ZXIgbGVmdCB0byBtZSBhdCBhbGwuIFRoZXkgaGF2ZSByZW5kZXJlZCBhbiBhY2NvdW50IGFzIHRob3VnaAogICAgICAgICAgICAgICAgICAgIHRoZSBlc3RhdGUgd2VyZSBvbmUgb2YgZml2ZSB0YWxlbnRzIG9ubHk7IHRoZXkgZG8gbm90IHByb2R1Y2UgdGhlIHByaW5jaXBhbCwKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggcmVwb3J0aW5nIG5vIGluY29tZSBmcm9tIGl0LCBidXQgaGF2ZSB0aGUgaW1wdWRlbmNlIHRvIHRlbGwgbWUgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBjYXBpdGFsIGl0c2VsZiBoYXMgYmVlbiBleHBlbmRlZC4gQW5kIGZvciB0aGlzIGF1ZGFjaXR5IHRoZXkgZmVlbCBubyBzaGFtZSEKICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0LCBwcmF5LCB3b3VsZCBoYXZlIGJlZW4gbXkgcGxpZ2h0LCBpZgogICAgICAgICAgICAgICAgICAgIEkgaGFkIGNvbnRpbnVlZCBsb25nZXIgYXMgdGhlaXIgd2FyZD8gVGhleSB3b3VsZCBoYXZlIGhhcmQgd29yayB0byB0ZWxsLiBGb3IKICAgICAgICAgICAgICAgICAgICB3aGVuLCBhZnRlciB0aGUgbGFwc2Ugb2YgdGVuIHllYXJzLCBJIGhhdmUgcmVjb3ZlcmVkIHNvIGxpdHRsZSBmcm9tIHR3byBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiwgYW5kIGJ5IHRoZSB0aGlyZCBhbSBldmVuIHNldCBkb3duIGFzIGEgZGVidG9yLCBoYXZlIEkgbm90IGdvb2QgZ3JvdW5kIGZvcgogICAgICAgICAgICAgICAgICAgIGluZGlnbmF0aW9uPyBOYXksIGl0IGlzIHdob2xseSBjbGVhci4gSWYgSSBoYWQgYmVlbiBsZWZ0IGFuIG9ycGhhbiBvZiBhIHllYXIKICAgICAgICAgICAgICAgICAgICBvbGQsIGFuZCBoYWQgYmVlbiBzaXggeWVhcnMgbG9uZ2VyIHVuZGVyIHRoZWlyIGd1YXJkaWFuc2hpcCwgSSBzaG91bGQgbmV2ZXIgaGF2ZQogICAgICAgICAgICAgICAgICAgIHJlY292ZXJlZCBldmVuIHRoZSBwaXRpZnVsIGFtb3VudHMgSSBub3cgaGF2ZS4gRm9yLCBpZiB0aGUgZXhwZW5kaXR1cmVzIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIG1hZGUgd2VyZSBqdXN0aWZpYWJsZSwgdGhlIHN1bXMgdGhleSBoYXZlIGhhbmRlZCBvdmVyIHRvIG1lIHdvdWxkIG5vdCBoYXZlCiAgICAgICAgICAgICAgICAgICAgbGFzdGVkIHNpeCB5ZWFycywgYnV0IHRoZXkgd291bGQgZWl0aGVyIGhhdmUgaGFkIHRvIHN1cHBvcnQgbWUgdGhlbXNlbHZlcyBvciB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgbGV0IG1lIHBlcmlzaCBmcm9tIGh1bmdlci4gPC90cmFuc2xhdGlvbj4="
translation['27.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgaXMgaXQgbm90CiAgICAgICAgICAgICAgICAgICAgYW4gb3V0cmFnZSwgaWYgZXN0YXRlcyBsZWZ0IHRvIG90aGVycyBvZiBhIHZhbHVlIG9mIG9uZSBvciB0d28gdGFsZW50cyBoYXZlIGFzIGEKICAgICAgICAgICAgICAgICAgICByZXN1bHQgb2YgbGV0dGluZyBiZWVuIGRvdWJsZWQgb3IgdHJlYmxlZCwgc28gdGhhdCB0aGUgb3duZXJzIGhhdmUgYmVlbiBjYWxsZWQKICAgICAgICAgICAgICAgICAgICB1cG9uIGZvciBzdGF0ZSBzZXJ2aWNlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgdGhleSBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NlZCBhbW9uZyB0aGUgd2VhbHRoeSBjaXRpemVucy4gU2VlIG5vdGUgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hPC9lbXBoPiBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3LjciIHZhbGlkPSJ5ZXMiPkRlbS4gMjcuNzwvYmlibD4sIGFib3ZlLjwvbm90ZT4gd2hpbGUgbWluZSwgd2hpY2ggaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICB3b250IHRvIGVxdWlwIHRyaXJlbWVzIGFuZCB0byBtYWtlIGxhcmdlIGNvbnRyaWJ1dGlvbnMgaW4gdGF4ZXMsIHdpbGwgYmUgdW5hYmxlCiAgICAgICAgICAgICAgICAgICAgdG8gY29udHJpYnV0ZSBldmVuIHNtYWxsIHN1bXMgdGhhbmtzIHRvIHRoZSBzaGFtZWxlc3MgYWN0cyBvZiB0aGVzZSBtZW4/IFdoYXQKICAgICAgICAgICAgICAgICAgICB3b3JkcyBhcmUgZ3Jvc3MgZW5vdWdoIHRvIGRlc2NyaWJlIHRoZWlyIGNvbmR1Y3Q/IFRoZXkgaGF2ZSBkb25lIGF3YXkgd2l0aCB0aGUKICAgICAgICAgICAgICAgICAgICB3aWxsLCB0aGlua2luZyB0byBhdm9pZCBkaXNjb3ZlcnksIHRoZWlyIG93biBlc3RhdGVzIHRoZXkgaGF2ZSBhZG1pbmlzdGVyZWQgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBpbmNvbWUsIGFuZCBoYXZlIGdyZWF0bHkgaW5jcmVhc2VkIHRoZWlyIGNhcGl0YWwgYnkgZHJhd2luZyB1cG9uIG15IGZ1bmRzLAogICAgICAgICAgICAgICAgICAgIHdoaWxlLCBhcyBmb3IgbXkgb3duIGVzdGF0ZSwgdGhleSBoYXZlIGRlc3Ryb3llZCBteSBlbnRpcmUgY2FwaXRhbCwgYXMgaWYgaW4KICAgICAgICAgICAgICAgICAgICByZXF1aXRhbCBmb3Igc29tZSBncmlldm91cyB3cm9uZyB3ZSBoYWQgZG9uZSB0aGVtLiA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmE8L2VtcGg+IG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNyIgdmFsaWQ9InllcyI+RGVtLiAyNy43PC9iaWJsPiwgYWJvdmUuPC90cmFuc2xhdGlvbj4="
translation['27.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UsIG9uIHlvdXIgcGFydCwgZG8gbm90IGFjdCB0aHVzIGV2ZW4gdG93YXJkIHRob3NlIHdobyBzaW4KICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHlvdTogd2hlbiB5b3UgZ2l2ZSBqdWRnZW1lbnQgYWdhaW5zdCBhbnkgb2YgdGhlbSwgeW91IGRvIG5vdCB0YWtlIGF3YXkKICAgICAgICAgICAgICAgICAgICBhbGwgdGhhdCB0aGV5IGhhdmUsIGJ1dCBpbiBwaXR5IGZvciB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4geW91IGxlYXZlIHNvbWV0aGluZwogICAgICAgICAgICAgICAgICAgIGV2ZW4gdG8gdGhlc2UuIEJ1dCB0aGVzZSBtZW4gYXJlIHNvIGRpZmZlcmVudCBmcm9tIHlvdSB0aGF0LCBhbHRob3VnaCB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGxlZ2FjaWVzIGZyb20gdXMgdG8gbWFrZSB0aGVtIGFkbWluaXN0ZXIgdGhlaXIgdHJ1c3QgZmFpdGhmdWxseSwgdGhleQogICAgICAgICAgICAgICAgICAgIGhhdmUgZG9uZSB1cyB0aGVzZSBvdXRyYWdlb3VzIHdyb25ncy4gVGhleSBmZWx0IG5vIHRvdWNoIG9mIHNoYW1lIGZvciB0aGVpcgogICAgICAgICAgICAgICAgICAgIHJ1dGhsZXNzbmVzcyB0b3dhcmQgbXkgc2lzdGVyLCB3aG8sIHRob3VnaCBteSBmYXRoZXIgbGVmdCB0d28gdGFsZW50cyBhcyB0aGUKICAgICAgICAgICAgICAgICAgICBkb3dyeSBkdWUgaGVyLCB3aWxsIG5vdyBnZXQgbm8gZml0dGluZyBwb3J0aW9uLiBOYXksIHRoZXkgaGF2ZSByZWNrZWQgbm90aGluZyBvZgogICAgICAgICAgICAgICAgICAgIGtpbnNoaXAsIGFzIHRob3VnaCB0aGV5IGhhZCBiZWVuIGxlZnQgdG8gdXMsIG5vdCBhcyBmcmllbmRzIGFuZCBraW5zZm9saywgYnV0IGFzCiAgICAgICAgICAgICAgICAgICAgYml0dGVyZXN0IGVuZW1pZXMuIDwvdHJhbnNsYXRpb24+"
translation['27.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIG15c2VsZiwgSSBhbSB0aGUgbW9zdCB3cmV0Y2hlZCBvZiBtZW4uIEkgYW0gaGVscGxlc3MgYm90aAogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgbXkgc2lzdGVyIGEgcG9ydGlvbiBhbmQgdG8gbWFpbnRhaW4gbXlzZWxmLiBCZXNpZGVzIHRoaXMsIHRoZSBzdGF0ZSBpcwogICAgICAgICAgICAgICAgICAgIHByZXNzaW5nIG1lIGhhcmQsIGRlbWFuZGluZyB0YXhlcywgYW5kIHdpdGggcmlnaHQsIGZvciBteSBmYXRoZXIgbGVmdCBtZSBhbgogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSBsYXJnZSBlbm91Z2ggdG8gcGF5IHRoZW07IGJ1dCB0aGVzZSBtZW4gaGF2ZSB0YWtlbiBhbGwgdGhlIG1vbmV5IGxlZnQgbWUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93LCBpbiBzZWVraW5nIHRvIHJlY292ZXIgd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIG1pbmUsIEkgaGF2ZSBjb21lIGludG8gdGhlIGdyZWF0ZXN0IHBlcmlsOyBmb3IgaWYgdGhlIGRlZmVuZGFudCBpcyBhY3F1aXR0ZWQKICAgICAgICAgICAgICAgICAgICDvvIh3aGljaCBoZWF2ZW4gZm9yYmlkIe+8iSBJIHNoYWxsIGhhdmUgdG8gcGF5IG9uZS1zaXh0aCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHBsYWludGlmZiBpbiBhIHByaXZhdGUgc3VpdCB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgd2FzIHNvIGZhciBmcm9tIGJlaW5nIGFibGUgdG8gcHJvdmUgaGlzIGNhc2UgdGhhdCBoZSBkaWQgbm90IHJlY2VpdmUgYSBmaWZ0aAogICAgICAgICAgICAgICAgICAgICAgICBwYXJ0IG9mIHRoZSB2b3Rlcywgd2FzIHN1YmplY3QgdG8gYSBmaW5lIG9mIG9uZS1zaXh0aCBvZiB0aGUgZGFtYWdlcyBjbGFpbWVkCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iGFuIG9ib2wgZm9yIGVhY2ggZHJhY2htYe+8iS4gRmFpbHVyZSB0byBwYXkgZW50YWlsZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxvc3Mgb2YgY2l2aWMgcmlnaHRzLiBDb21wYXJlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjguMTgiIHZhbGlkPSJ5ZXMiPkRlbS4gMjguMTg8L2JpYmw+LCBlbmQuCiAgICAgICAgICAgICAgICAgICAgICAgIEluIHRoZSBjYXNlIG9mIEFwaG9idXMsIHRoZSBhbW91bnQgZm9yIHdoaWNoIGhlIHdvdWxkIGJlIGhlbGQgbGlhYmxlLCBpZiBoZQogICAgICAgICAgICAgICAgICAgICAgICBsb3N0IHN1aXQsIHdvdWxkIGJlIGZpeGVkIGJ5IHRoZSBjb3VydC48L25vdGU+IG9uZSBodW5kcmVkIG1pbmFlLiBUaGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQsIGlmIHlvdSBnaXZlIGp1ZGdlbWVudCBhZ2FpbnN0IGhpbSwgd2lsbCBiZSBsaWFibGUgZm9yIGEgc3VtIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgZGV0ZXJtaW5lZCwgYW5kIHdpbGwgbWFrZSBwYXltZW50LCBub3Qgb3V0IG9mIGhpcyBvd24gZnVuZHMsIGJ1dCBvdXQgb2YgbWluZTsKICAgICAgICAgICAgICAgICAgICB3aGlsZSBpbiBteSBjYXNlIHRoZSBzdW0gaXMgZml4ZWQsIHNvIHRoYXQgSSBzaGFsbCBub3Qgb25seSBoYXZlIGJlZW4gcm9iYmVkIG9mCiAgICAgICAgICAgICAgICAgICAgbXkgaW5oZXJpdGFuY2UsIGJ1dCBzaGFsbCBhbHNvIGxvc2UgbXkgY2l2aWMgcmlnaHRzLCB1bmxlc3MgeW91IG5vdyB0YWtlIHBpdHkgb24KICAgICAgICAgICAgICAgICAgICBtZS4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyOC4xOCIgdmFsaWQ9InllcyI+RGVtLiAyOC4xODwvYmlibD4sIGVuZC4KICAgICAgICAgICAgICAgICAgICAgICAgSW4gdGhlIGNhc2Ugb2YgQXBob2J1cywgdGhlIGFtb3VudCBmb3Igd2hpY2ggaGUgd291bGQgYmUgaGVsZCBsaWFibGUsIGlmIGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxvc3Qgc3VpdCwgd291bGQgYmUgZml4ZWQgYnkgdGhlIGNvdXJ0LjwvdHJhbnNsYXRpb24+"
translation['27.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5JIGJlZyB5b3UsIHRoZXJlZm9yZSwgbWVuIG9mIHRoZSBqdXJ5LCBJCiAgICAgICAgICAgICAgICAgICAgZW50cmVhdCwgSSBpbXBsb3JlIHlvdSwgdG8gcmVtZW1iZXIgdGhlIGxhd3MgYW5kIHRoZSBvYXRocyB3aGljaCB5b3UgdG9vayBhcwogICAgICAgICAgICAgICAgICAgIGp1cm9ycywgdG8gcmVuZGVyIG1lIHRoZSBhaWQgdGhhdCBpcyBteSBkdWUsIGFuZCBub3QgdG8gY291bnQgdGhlIHBsZWFzIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBtYW4gb2YgaGlnaGVyIHdvcnRoIHRoYW4gbWluZS4gSXQgaXMgeW91ciBkdXR5IHRvIHNob3cgcGl0eSwgbm90IHRvd2FyZCB0aGUKICAgICAgICAgICAgICAgICAgICBndWlsdHksIGJ1dCB0b3dhcmQgdGhvc2UgaW4gdW5tZXJpdGVkIG1pc2ZvcnR1bmU7IG5vdCB1cG9uIHRob3NlIHdobyBzbyBjcnVlbGx5CiAgICAgICAgICAgICAgICAgICAgcm9iIGFub3RoZXIgb2YgaGlzIGdvb2RzLCBidXQgdXBvbiBtZSwgd2hvIGhhdmUgZm9yIHNvIGxvbmcgYSB0aW1lIGJlZW4gZGVwcml2ZWQKICAgICAgICAgICAgICAgICAgICBvZiBteSBpbmhlcml0YW5jZSBhbmQgdHJlYXRlZCB3aXRoIG91dHJhZ2UgYnkgdGhlc2UgbWVuLCBhbmQgd2hvIGFtIG5vdyBpbgogICAgICAgICAgICAgICAgICAgIGRhbmdlciBvZiBsb3NpbmcgbXkgY2l2aWMgcmlnaHRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['27.69'] = ""
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5PZiB0aGUgbWFueQogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VvdXMgbGllcyB3aGljaCBBcGhvYnVzIHV0dGVyZWQgaW4gaGlzIGFkZHJlc3MgdG8geW91LCBJIHNoYWxsIHRyeSB0bwogICAgICAgICAgICAgICAgICAgIHJlZnV0ZSBmaXJzdCwgdGhhdCBvbmUgYXQgd2hpY2ggSSBmZWx0IGdyZWF0ZXIgaW5kaWduYXRpb24gdGhhbiBhdCBhbnl0aGluZyBlbHNlCiAgICAgICAgICAgICAgICAgICAgaGUgc2FpZC4gRm9yIGhlIGRlY2xhcmVkIHRoYXQgbXkgZ3JhbmRmYXRoZXIgd2FzIGEgZGVidG9yIHRvIHRoZSBzdGF0ZSwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBmb3IgdGhpcyByZWFzb24gbXkgZmF0aGVyIHdvdWxkIG5vdCBoYXZlIHRoZSBwcm9wZXJ0eSBsZXQsIGZvciBmZWFyIG9mIHRoZSByaXNrcwogICAgICAgICAgICAgICAgICAgIGhlIHdvdWxkIHJ1bi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByb3BlcnR5IHdvdWxkIGJlIGxldCBhdCBhCiAgICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyBoZWFyaW5nIGJlZm9yZSB0aGUgQXJjaG9uLCBhbmQgaXRzIHZhbHVlIGNvdWxkIG5vdCBiZSBjb25jZWFsZWQuIElmLAogICAgICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIHRoZSBlbGRlciBEZW1vc3RoZW5lcywgYXMgdGhlIGhlaXIgb2YgR3lsb24sIHdhcyBpbmRlYnRlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUsIHRoZSBwcm9wZXJ0eSBtaWdodCBiZSBjb25maXNjYXRlZCB0byBzYXRpc2Z5IHRoZSBkZWJ0Ljwvbm90ZT4gVGhpcyBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBwcmV0ZW5jZSBoZSB1c2VzOyBidXQgaGUgYnJvdWdodCBmb3J3YXJkIG5vIHByb29mIHRoYXQgbXkgZ3JhbmRmYXRoZXIgZGllZAogICAgICAgICAgICAgICAgICAgIGluZGVidGVkIHRvIHRoZSBzdGF0ZS4gSGUgZGlkIGludHJvZHVjZSBldmlkZW5jZSB0aGF0IGhlIGJlY2FtZSBhIHN0YXRlLWRlYnRvciwKICAgICAgICAgICAgICAgICAgICBidXQgaGUgd2FpdGVkIHVudGlsIHRoZSBsYXN0IGRheSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QWxsIGRvY3VtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgY2l0YXRpb25zIG9mIHN0YXR1dGVzLCBldGMuLCBwZXJ0YWluaW5nIHRvIHRoZSBjYXNlIGhhZCB0byBiZSBzdWJtaXR0ZWQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgd3JpdHRlbiBmb3JtIGJlZm9yZSB0aGUgc3VpdCB3YXMgY2FsbGVkLiBUaGV5IHdlcmUgdGhlbiBzZWFsZWQgaW4gYSBib3gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+H4b+Wzr3Ov8+CPC9mb3JlaWduPu+8iSwgd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgbWlnaHQgbm90IGJlIG9wZW5lZCB1bnRpbCB0aGUgZG9jdW1lbnRzIGluIHF1ZXN0aW9uIHdlcmUgd2FudGVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmlhbC4gQnkgd2FpdGluZyB1bnRpbCB0aGUgbGFzdCBkYXkgdG8gZmlsZSB0aGlzIHBhcnRpY3VsYXIgYml0IG9mIGV2aWRlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIEFwaG9idXMgcHJldmVudGVkIERlbW9zdGhlbmVzIGZyb20gZmlsaW5nIGFueSBkb2N1bWVudHMgdG8gY29tYmF0IGl0LiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgbGF0dGVyIHdhcyB0aGVyZWZvcmUg4oCcZW5zbmFyZWQgYnkgbGFjayBvZiB0aW1l4oCdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI4LjIiIHZhbGlkPSJ5ZXMiPkRlbS4gMjguMjwvYmlibD7vvIkuPC9ub3RlPiBhbmQKICAgICAgICAgICAgICAgICAgICBrZXB0IHRoaXMgZXZpZGVuY2UgZm9yIGhpcyBzZWNvbmQgc3BlZWNoLCB0aGlua2luZyB0aGF0IGJ5IGl0IGhlIHdvdWxkIGJlIGFibGUKICAgICAgICAgICAgICAgICAgICB0byBnaXZlIGEgbWFsaWNpb3VzIHR1cm4gdG8gdGhlIG1hdHRlci4gU28sIGlmIGhlIHJlYWRzIGl0LCBnaXZlIGNsb3NlIGhlZWQuCiAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8kM+H4b+Wzr3Ov8+CPC9mb3JlaWduPu+8iSwgd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgbWlnaHQgbm90IGJlIG9wZW5lZCB1bnRpbCB0aGUgZG9jdW1lbnRzIGluIHF1ZXN0aW9uIHdlcmUgd2FudGVkIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmlhbC4gQnkgd2FpdGluZyB1bnRpbCB0aGUgbGFzdCBkYXkgdG8gZmlsZSB0aGlzIHBhcnRpY3VsYXIgYml0IG9mIGV2aWRlbmNlCiAgICAgICAgICAgICAgICAgICAgICAgIEFwaG9idXMgcHJldmVudGVkIERlbW9zdGhlbmVzIGZyb20gZmlsaW5nIGFueSBkb2N1bWVudHMgdG8gY29tYmF0IGl0LiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgbGF0dGVyIHdhcyB0aGVyZWZvcmUg4oCcZW5zbmFyZWQgYnkgbGFjayBvZiB0aW1l4oCdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI4LjIiIHZhbGlkPSJ5ZXMiPkRlbS4gMjguMjwvYmlibD7vvIkuPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB5b3Ugd2lsbCBmaW5kIHRoYXQgdGhlIGV2aWRlbmNlIGFkZHVjZWQKICAgICAgICAgICAgICAgICAgICBwcm92ZXMgbm90IHRoYXQgbXkgZ3JhbmRmYXRoZXIgaXMgYSBzdGF0ZS1kZWJ0b3IsIGJ1dCB0aGF0IGhlIHdhcyBvbmUuIEkgc2hhbGwKICAgICAgICAgICAgICAgICAgICB1bmRlcnRha2UgZmlyc3QgdG8gcmVmdXRlIHRoaXMgY2hhcmdlIG9mIHdoaWNoIGhlIHRoaW5rcyB0byBtYWtlIHNvIG11Y2gsIGFuZAogICAgICAgICAgICAgICAgICAgIHdoaWNoIHdlIGRlY2xhcmUgdG8gYmUgZmFsc2UuIElmIEkgaGFkIGJlZW4gYWJsZSB0byBkbyBzbywgYW5kIGhhZCBub3QgYmVlbiB0aHVzCiAgICAgICAgICAgICAgICAgICAgZW5zbmFyZWQgYnkgbGFjayBvZiB0aW1lLCBJIHNob3VsZCBoYXZlIGJyb3VnaHQgZm9yd2FyZCB3aXRuZXNzZXMgdG8gcHJvdmUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZSBtb25leSB3YXMgcGFpZCBpbiBmdWxsLCBhbmQgdGhhdCBldmVyeXRoaW5nIHdhcyBzZXR0bGVkIGJldHdlZW4gbXkKICAgICAgICAgICAgICAgICAgICBncmFuZGZhdGhlciBhbmQgdGhlIHN0YXRlOyBhcyBpdCBpcywgSSBzaGFsbCBzaG93IGJ5IHN0cm9uZyBwcm9vZnMgdGhhdCBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgaW5kZWJ0ZWQgYXQgdGhlIHRpbWUgb2YgaGlzIGRlYXRoLCBhbmQgdGhhdCB3ZSBpbmN1cnJlZCBubyByaXNrcyBpbiBsZXR0aW5nCiAgICAgICAgICAgICAgICAgICAgb3VyIHdlYWx0aCBiZSBrbm93bi4gPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiB0aGUgZmlyc3QgcGxhY2UgRGVtb2NoYXJlcywgd2hvIG1hcnJpZWQgbXkgbW90aGVyJ3Mgc2lzdGVyLAogICAgICAgICAgICAgICAgICAgIGEgZGF1Z2h0ZXIgb2YgR3lsb24sIGhhcyBub3QgY29uY2VhbGVkIGhpcyBwcm9wZXJ0eSwgYnV0IGFjdHMgYXMgY2hvcmVndXMgYW5kIGFzCiAgICAgICAgICAgICAgICAgICAgdHJpZXJhcmNoLCBhbmQgcGVyZm9ybXMgb3RoZXIgcHVibGljIHNlcnZpY2VzLCB3aXRob3V0IGFueSBmZWFyIG9mIHN1Y2gKICAgICAgICAgICAgICAgICAgICBjb25zZXF1ZW5jZXMuIEluIHRoZSBzZWNvbmQgcGxhY2UsIG15IGZhdGhlciB2b2x1bnRhcmlseSByZXZlYWxlZCB0aGUgcmVzdCBvZgogICAgICAgICAgICAgICAgICAgIGhpcyBwcm9wZXJ0eSwgYW5kIGluIHBhcnRpY3VsYXIgdGhlIGZvdXIgdGFsZW50cyBhbmQgdGhyZWUgdGhvdXNhbmQgZHJhY2htYWUsCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlc2UgbWVuIGJ5IHRoZWlyIGFjY3VzYXRpb25zIGFnYWluc3Qgb25lIGFub3RoZXIgYWRtaXQgdG8gaGF2ZSBiZWVuCiAgICAgICAgICAgICAgICAgICAgbWVudGlvbmVkIGluIHRoZSB3aWxsLCBhbmQgdG8gaGF2ZSBiZWVuIHJlY2VpdmVkIGJ5IHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBBcGhvYnVzIGhpbXNlbGYgaW4gY29uanVuY3Rpb24gd2l0aCBoaXMKICAgICAgICAgICAgICAgICAgICBjby10cnVzdGVlcyByZXZlYWxlZCB0byB0aGUgc3RhdGUgdGhlIGFtb3VudCBvZiB0aGUgcHJvcGVydHkgbGVmdCBtZSwgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIGFwcG9pbnRlZCBtZSBsZWFkZXIgb2YgdGhlIHRheC1ncm91cCBhbmQgdGhhdCBhdCBubyBsb3cgcmF0aW5nLCBidXQgYXQgb25lIHNvCiAgICAgICAgICAgICAgICAgICAgaGlnaCBhcyB0byBlbnRhaWwgYSBwYXltZW50IG9mIGZpdmUgaHVuZHJlZCBkcmFjaG1hZSBvbiBlYWNoIHR3ZW50eS1maXZlCiAgICAgICAgICAgICAgICAgICAgICAgIG1pbmFlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy43IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNy43PC9iaWJsPiwgd2l0aCB0aGUgbm90ZXMuPC9ub3RlPiBBbmQgeWV0LCBpZiB0aGVyZSB3ZXJlIGFueSB0cnV0aCBpbgogICAgICAgICAgICAgICAgICAgIHdoYXQgaGUgc2F5cywgaGUgd291bGQgbm90IGhhdmUgYWN0ZWQgdGh1cywgYnV0IHdvdWxkIGhhdmUgdGFrZW4gZXZlcnkKICAgICAgICAgICAgICAgICAgICBwcmVjYXV0aW9uLiBCdXQsIGFzIGl0IGlzLCBEZW1vY2hhcmVzLCBhbmQgbXkgZmF0aGVyLCBhbmQgdGhlc2UgbWVuIHRoZW1zZWx2ZXMKICAgICAgICAgICAgICAgICAgICBoYXZlIG1hbmlmZXN0bHkgbGV0IHRoZWlyIHdlYWx0aCBiZSBrbm93bjsgdGhleSBwbGFpbmx5IGZlYXJlZCBubyBzdWNoIHJpc2sgYXMKICAgICAgICAgICAgICAgICAgICB0aGF0IG9mIHdoaWNoIGhlIHNwZWFrcy4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy43IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNy43PC9iaWJsPiwgd2l0aCB0aGUgbm90ZXMuPC90cmFuc2xhdGlvbj4="
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5TdHJhbmdlc3Qgb2YgYWxsIGlzIGl0IHRoYXQsIHRob3VnaCB0aGV5IGFsbGVnZSB0aGF0IG15IGZhdGhlcgogICAgICAgICAgICAgICAgICAgIHdvdWxkIG5vdCBwZXJtaXQgdGhlbSB0byBsZXQgdGhlIHByb3BlcnR5LCB0aGV5IHNob3VsZCBuZXZlciBwcm9kdWNlIHRoaXMgd2lsbAogICAgICAgICAgICAgICAgICAgIGZyb20gd2hpY2ggb25lIGNvdWxkIGhhdmUgbGVhcm5lZCB0aGUgdHJ1dGgsIGFuZCB0aGF0IGhhdmluZyBkZXN0cm95ZWQgc28KICAgICAgICAgICAgICAgICAgICBpbXBvcnRhbnQgYSBwaWVjZSBvZiBldmlkZW5jZSwgdGhleSBzaG91bGQgZXhwZWN0IHlvdSB0byBiZWxpZXZlIHRoZW0gb24gdGhlaXIKICAgICAgICAgICAgICAgICAgICBtZXJlIHdvcmQuIEl0IHdhcyB0aGVpciBkdXR5IG9uIHRoZSBjb250cmFyeSwgYXMgc29vbiBhcyBteSBmYXRoZXIgZGllZCwgdG8gY2FsbAogICAgICAgICAgICAgICAgICAgIGluIGEgbnVtYmVyIG9mIHdpdG5lc3NlcyBhbmQgdG8gYmlkIHRoZW0gc2VhbCB0aGUgd2lsbCwgc28gdGhhdCwgaW4gY2FzZSBhbnkKICAgICAgICAgICAgICAgICAgICBkaXNwdXRlIHNob3VsZCBhcmlzZSwgaXQgd291bGQgaGF2ZSBiZWVuIHBvc3NpYmxlIHRvIHJlZmVyIHRvIHRoZSB3cml0aW5nCiAgICAgICAgICAgICAgICAgICAgaXRzZWxmLCBhbmQgc28gbGVhcm4gdGhlIHdob2xlIHRydXRoLiA8L3RyYW5zbGF0aW9uPg=="
translation['28.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgYXMKICAgICAgICAgICAgICAgICAgICBpdCBpcywgdGhleSB0aG91Z2h0IHByb3BlciB0byBoYXZlIHNvbWUgb3RoZXIgcGFwZXJzIHNlYWxlZCwgaW4gd2hpY2ggbWFueSBpdGVtcwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBwcm9wZXJ0eSBsZWZ0IHdlcmUgbm90IGluc2NyaWJlZOKAlHBhcGVycyB3aGljaCB3ZXJlIG1lcmUKICAgICAgICAgICAgICAgICAgICBtZW1vcmFuZGE7IGJ1dCB0aGUgd2lsbCBpdHNlbGYsIHdoaWNoIGdhdmUgdGhlbSBwb3NzZXNzaW9uIG9mIHRoZSBwYXBlcnMgdG8KICAgICAgICAgICAgICAgICAgICB3aGljaCB0aGV5IGFmZml4ZWQgdGhlaXIgc2VhbHMsIGFuZCBhbGwgdGhlIHJlc3Qgb2YgdGhlIHByb3BlcnR5LCBhbmQgd2hpY2gKICAgICAgICAgICAgICAgICAgICBhY3F1aXR0ZWQgdGhlbSBvZiBhbGwgcmVzcG9uc2liaWxpdHkgZm9yIG5vdCBsZXR0aW5nIHRoZSBlc3RhdGUsIHRoZXkgZGlkIG5vdAogICAgICAgICAgICAgICAgICAgIHNlYWwsIG5vciB5ZXQgcHJvZHVjZS4gWW91IG91Z2h0IHByZXN1bWFibHkgdG8gYmVsaWV2ZSB0aGVtIGluIGFueXRoaW5nIHRoZXkgc2F5CiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdGhpcyBtYXR0ZXIuIDwvdHJhbnNsYXRpb24+"
translation['28.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JLCBmb3IgbXkgcGFydCwgY2Fubm90IHVuZGVyc3RhbmQgd2hhdCBpdCBpcyB0aGV5IG1lYW4uIE15CiAgICAgICAgICAgICAgICAgICAgZmF0aGVyLCB0aGV5IHNheSwgd291bGQgbm90IHN1ZmZlciB0aGVtIHRvIGxldCB0aGUgZXN0YXRlLCBvciB0byBkaXNjbG9zZSB0aGUKICAgICAgICAgICAgICAgICAgICB2YWx1ZSBvZiB0aGUgcHJvcGVydHkuIFRvIG1lLCBkbyB5b3UgbWVhbiwgb3IgdG8gdGhlIHN0YXRlPyBRdWl0ZSB0aGUgY29udHJhcnk6CiAgICAgICAgICAgICAgICAgICAgeW91IGhhdmUgcGxhaW5seSBkaXNjbG9zZWQgaXQgdG8gdGhlIHN0YXRlLCBidXQgaGF2ZSBoaWRkZW4gaXQgYWJzb2x1dGVseSBmcm9tCiAgICAgICAgICAgICAgICAgICAgbWUuIFlvdSBoYXZlIG5vdCBldmVuIHJldmVhbGVkIHRoZSBmdW5kIHdoaWNoIHdhcyB0aGUgYmFzaXMgZm9yIHlvdXIgYXNzZXNzbWVudAogICAgICAgICAgICAgICAgICAgIGluIHRoZSBwYXltZW50IG9mIHRoZSBwcm9wZXJ0eS10YXguIFNob3cgbWUgdGhpcyBmdW5kLiBXaGF0IHdhcyBpdD8gV2hlcmUgZGlkCiAgICAgICAgICAgICAgICAgICAgeW91IGRlbGl2ZXIgaXQgb3ZlciB0byBtZSwgYW5kIGluIHdob3NlIHByZXNlbmNlPyA8L3RyYW5zbGF0aW9uPg=="
translation['28.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBmb3VyIHRhbGVudHMgYW5kIHRocmVlIHRob3VzYW5kIGRyYWNobWFlLCB5b3UKICAgICAgICAgICAgICAgICAgICByZWNlaXZlZCB0aGUgdHdvIHRhbGVudHMgYW5kIGVpZ2h0eSBtaW5hZSwgc28gdGhhdCB5b3UgZGlkIG5vdCBpbmNsdWRlIGV2ZW4KICAgICAgICAgICAgICAgICAgICB0aGVzZSBpbiB0aGUgcmV0dXJuIHlvdSBtYWRlIG9uIG15IGJlaGFsZiB0byB0aGUgcHVibGljIHRyZWFzdXJ5OyBmb3IgYXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRpbWUgdGhleSB3ZXJlIHlvdXIgcHJvcGVydHkuIEJ1dCB0aGUgaG91c2UgYW5kIHRoZSBmb3VydGVlbiBzbGF2ZXMgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHRoaXJ0eSBtaW5hZSB3aGljaCB5b3UgZ2F2ZSBvdmVyIGludG8gbXkgaGFuZHMsIGNvdWxkIG5vdCBoYXZlIGJlZW4gYXNzZXNzZWQgYXQKICAgICAgICAgICAgICAgICAgICBhbnkgc3VjaCBzdW0gYXMgdGhhdCB3aGljaCB5b3UgYWdyZWVkIHRvIHBheSB0byB0aGUgdGF4LWdyb3VwLiA8L3RyYW5zbGF0aW9uPg=="
translation['28.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPk5heTsgaXQgaXMgYWJzb2x1dGVseSBjZXJ0YWluIHRoYXQgdGhlIHByb3BlcnR5IGxlZnQgYnkgbXkKICAgICAgICAgICAgICAgICAgICBmYXRoZXIgd2FzIG11Y2ggbW9yZSB0aGFuIHRoaXMsIGFuZCB0aGF0IGl0IGlzIGFsbCBpbiB5b3VyIHBvc3Nlc3Npb24uIEl0IGlzCiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB5b3UgYXJlIHBsYWlubHkgcHJvdmVkIHRvIGhhdmUgbWFkZSBoYXZvYyBvZiBpdCB0aGF0IHlvdSBoYXZlIHRoZQogICAgICAgICAgICAgICAgICAgIGF1ZGFjaXR5IHRvIG1ha2UgdXAgc3VjaCBmYWxzZWhvb2RzLiBTb21ldGltZXMgeW91IHJlZmVyIHRoZSByZXNwb25zaWJpbGl0eSB0bwogICAgICAgICAgICAgICAgICAgIG9uZSBhbm90aGVyOyBhZ2FpbiB5b3UgbXV0dWFsbHkgYWNjdXNlIG9uZSBhbm90aGVyIG9mIGhhdmluZyByZWNlaXZlZCBmdW5kczsgeW91CiAgICAgICAgICAgICAgICAgICAgY2xhaW0gdG8gaGF2ZSByZWNlaXZlZCBidXQgbGl0dGxlLCB5ZXQgeW91IGhhdmUgbWFkZSByZXBvcnRzIG9mIGxhcmdlCiAgICAgICAgICAgICAgICAgICAgZXhwZW5kaXR1cmVzLiA8L3RyYW5zbGF0aW9uPg=="
translation['28.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5Zb3UgaGF2ZSBhY3RlZCBqb2ludGx5IGFzIG15CiAgICAgICAgICAgICAgICAgICAgZ3VhcmRpYW5zLCBidXQgdGhlcmVhZnRlciB5b3Ugc2NoZW1lIGVhY2ggb25lIGZvciBoaW1zZWxmLiBUaGUgd2lsbCBmcm9tIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2UgY291bGQgaGF2ZSBsZWFybmVkIHRoZSB0cnV0aCBhYm91dCBldmVyeXRoaW5nIHlvdSBoYXZlIG1hZGUgdG8gZGlzYXBwZWFyOyBhbmQKICAgICAgICAgICAgICAgICAgICBpdCBhcHBlYXJzIHRoYXQgeW91IGFyZSBuZXZlciBpbiBhZ3JlZW1lbnQgd2hlbiB5b3Ugc3BlYWsgb2Ygb25lCiAgICAgICAgICAgICAgICAgICAgICAgIGFub3RoZXIuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2UgdGhlIGRlcG9zaXRpb25zIGFuZCByZWFkIHRoZW0KICAgICAgICAgICAgICAgICAgICBhbGwgaW4gdHVybiB0byB0aGUganVyeSwgdGhhdCB0aGV5IG1heSBiZWFyIGluIG1pbmQgdGhlIHRlc3RpbW9ueSB0aGF0IGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBhbmQgdGhlIHN0YXRlbWVudHMgdGhhdCBoYXZlIGJlZW4gbWFkZSwgYW5kIHNvIHJlYWNoIGEgbW9yZSBjb3JyZWN0CiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICB0aGUgYXNzZXNzbWVudCB0byB3aGljaCB0aGVzZSBtZW4gY29uc2VudGVkIGluIG15IG5hbWUsIHBsYWNpbmcgbXkgZXN0YXRlIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGNsYXNzIG9mIHRob3NlIHBvc3Nlc3NpbmcgZmlmdGVlbiB0YWxlbnRzLCB3aGVyZWFzIHRoZSBwcm9wZXJ0eSB3aGljaCB0aGUgdGhyZWUKICAgICAgICAgICAgICAgICAgICB0b2dldGhlciBoYXZlIGhhbmRlZCBvdmVyIHRvIG1lIGlzIG5vdCB3b3J0aCBzZXZlbnR5IG1pbmFlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZSBuZXh0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIGRvd3J5LCBoaXMgcG9zc2Vzc2lvbiBvZiB3aGljaCBpcwogICAgICAgICAgICAgICAgICAgIHByb3ZlZCBieSB0aGUgdGVzdGltb255IG9mIHRoZSB0cnVzdGVlcyBhbmQgb2Ygb3RoZXJzIHRvIHdob20gaGUgY29uZmVzc2VkIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBoYWQgcmVjZWl2ZWQgaXQsIGhlIGhhcyBuZXZlciBwYWlkIGJhY2ssIG5vciBoYXMgaGUgZnVybmlzaGVkCiAgICAgICAgICAgICAgICAgICAgICAgIG1haW50ZW5hbmNlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlIHRoZSBvdGhlcnMgYW5kIHJlYWQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlbS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIHR3byB5ZWFycwogICAgICAgICAgICAgICAgICAgIGhlIGNvbmR1Y3RlZCB0aGUgYnVzaW5lc3Mgb2YgdGhlIGZhY3RvcnkgYW5kIHBhaWQgdG8gVGhlcmlwcGlkZXMgdGhlIGhpcmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgc2xhdmVzLCBidXQgdG8gbWUsIHRob3VnaCBoZSB0b29rIHRoZSBwcm9maXRzIGZvciB0d28geWVhcnMsIGFtb3VudGluZyB0byB0aGlydHkKICAgICAgICAgICAgICAgICAgICBtaW5hZSwgaGUgaGFzIHR1cm5lZCBvdmVyIG5laXRoZXIgdGhhdCBzdW0gbm9yIHRoZSBpbnRlcmVzdCB1cG9uIGl0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlIGFuZCByZWFkIHRoZSBuZXh0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVzZSBzbGF2ZXMgdGhlIGRlZmVuZGFudCB0b29rIHRvCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgdG9nZXRoZXIgd2l0aCBhbGwgdGhlIG90aGVyIHRoaW5ncyBnaXZlbiB0byB1cyBhcyBzdXJldHkgd2l0aCB0aGVtLiBIZQogICAgICAgICAgICAgICAgICAgIGhhcyByZWNrb25lZCB1cCBzbyBoZWF2eSBhbiBvdXRsYXkgZm9yIHRoZWlyIG1haW50ZW5hbmNlLCBidXQgYWJzb2x1dGVseSBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgYXMgcHJvZml0IGZyb20gdGhlbTsgYW5kIHRoZSBtZW4gdGhlbXNlbHZlcyBoZSBoYXMgbWFkZSB0byB2YW5pc2gsIHRob3VnaCB0aGV5CiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBpbiBhIGNsZWFyIHByb2ZpdCBvZiB0d2VsdmUgbWluYWUgZWFjaCB5ZWFyLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZSBuZXh0LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgc2VsbGluZwogICAgICAgICAgICAgICAgICAgIHRoaXMgaXZvcnkgYW5kIGlyb24sIGhlIGRlY2xhcmVzIHRoYXQgbm9uZSBoYWQgYmVlbiBsZWZ0IG1lLCBidXQgdHJpZXMgdG8KICAgICAgICAgICAgICAgICAgICBkZWZyYXVkIG1lIG9mIHRoZSB2YWx1ZSBvZiB0aGVzZSBhcnRpY2xlcyBhbHNvLCBhYm91dCBhIHRhbGVudC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGVzZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlc2UgdGhyZWUgdGFsZW50cyBhbmQgb25lIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYWUgaGUgaGFzIGluIGhpcyBoYW5kcyBiZXNpZGVzIHRoZSByZXN04oCUZml2ZSB0YWxlbnRzIG9mIGNhcGl0YWwKICAgICAgICAgICAgICAgICAgICBvZiB3aGljaCBoZSBoYXMgdGFrZW4gcG9zc2Vzc2lvbi4gQWRkaW5nIHRoZSBpbnRlcmVzdCwgaWYgb25lIHJlY2tvbnMgaXQgYXQgYQogICAgICAgICAgICAgICAgICAgIGRyYWNobWEgYSBtb250aCBvbmx5LCBoZSBob2xkcyBtb3JlIHRoYW4gdGVuIHRhbGVudHMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlJlYWQgdGhlIG5leHQgb25lcy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGl0ZW1zIHdlcmUgd3JpdHRlbiBpbiB0aGUgd2lsbCwgYW5kIHdlcmUgcmVjZWl2ZWQgYnkgdGhlbSwgaXMgcHJvdmVkIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IGFnYWluc3Qgb25lIGFub3RoZXIuIEJ1dCBBcGhvYnVzLCB0aG91Z2ggYWRtaXR0aW5nIHRoYXQgaGUgd2FzIHNlbnQKICAgICAgICAgICAgICAgICAgICBmb3IgYnkgbXkgZmF0aGVyLCBhbmQgdGhvdWdoIGhlIGNhbWUgdG8gdGhlIGhvdXNlLCBkZWNsYXJlcyB0aGF0IGhlIGRpZCBub3QgY29tZQogICAgICAgICAgICAgICAgICAgIGludG8gdGhlIHByZXNlbmNlIG9mIG15IGZhdGhlciwgd2hvIGhhZCBzZW50IGZvciBoaW0sIG5vciBlbnRlciBpbnRvIGFueQogICAgICAgICAgICAgICAgICAgIGFncmVlbWVudCBpbiByZWdhcmQgdG8gdGhlc2UgbWF0dGVycywgYnV0IG1lcmVseSBoZWFyZCBEZW1vcGhvbiByZWFkIGEgZG9jdW1lbnQKICAgICAgICAgICAgICAgICAgICBhbmQgVGhlcmlwcGlkZXMgc2F5IHRoYXQgbXkgZmF0aGVyIG1hZGUgdGhlc2UgYXJyYW5nZW1lbnRzOyB3aGVyZWFzIGluIGZhY3QgaGUKICAgICAgICAgICAgICAgICAgICB3YXMgdGhlIGZpcnN0IHRvIGdvIGluIGFuZCBoYWQgYWdyZWVkIHdpdGggbXkgZmF0aGVyIHRvIGNhcnJ5IG91dCBpbiBhbGwKICAgICAgICAgICAgICAgICAgICByZXNwZWN0cyBwcmVjaXNlbHkgd2hhdCBoZSB3cm90ZSBpbiBoaXMgd2lsbC4gPC90cmFuc2xhdGlvbj4="
translation['28.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgbXkgZmF0aGVyLCBtZW4gb2YgdGhlIGp1cnksIHdoZW4gaGUgc2F3IHRoYXQgaGUgd2FzIG5vdCB0byByZWNvdmVyIGZyb20KICAgICAgICAgICAgICAgICAgICBoaXMgc2lja25lc3MsIGNhbGxlZCB0b2dldGhlciB0aGVzZSB0aHJlZSBtZW4sIGFuZCBjYXVzaW5nIGhpcyBicm90aGVyIERlbW9uIHRvCiAgICAgICAgICAgICAgICAgICAgc2l0IHdpdGggdGhlbSBieSBoaXMgc2lkZSwgcGxhY2VkIG91ciBwZXJzb25zIGluIHRoZWlyIGhhbmRzLCBjYWxsaW5nIHVzIGEKICAgICAgICAgICAgICAgICAgICBzYWNyZWQgZGVwb3NpdC4gTXkgc2lzdGVyIGhlIGdhdmUgdG8gRGVtb3Bob24gd2l0aCBhIGRvd3J5IG9mIHR3byB0YWxlbnRzIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgcGFpZCBhdCBvbmNlLCBhbmQgYmV0cm90aGVkIGhlciB0byBoaW0gaW4gbWFycmlhZ2U7IG1lLCB0b2dldGhlciB3aXRoIG15CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHksIGhlIGNvbW1pdHRlZCB0byB0aGUgY2FyZSBvZiB0aGVtIGFsbCBpbiBjb21tb24sIGNoYXJnaW5nIHRoZW0gdG8gbGV0CiAgICAgICAgICAgICAgICAgICAgdGhlIHByb3BlcnR5LCBhbmQgYnkgdGhlaXIgam9pbnQgZWZmb3J0cyB0byBwcmVzZXJ2ZSB0aGUgZXN0YXRlIGZvciBtZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgc2FtZSB0aW1lIGhlIGdhdmUgdG8gVGhlcmlwcGlkZXMKICAgICAgICAgICAgICAgICAgICB0aGUgc2V2ZW50eSBtaW5hZSwgYW5kIGJldHJvdGhlZCBteSBtb3RoZXIgdG8gdGhlIGRlZmVuZGFudCB3aXRoIGhlciBwb3J0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgZWlnaHR5IG1pbmFlLCBhbmQgcGxhY2VkIG1lIG9uIGhpcyBrbmVlcy4gVG8gYWxsIHRoaXMgQXBob2J1cywgdGhlIG1vc3QgaW1waW91cwogICAgICAgICAgICAgICAgICAgIG9mIG1lbiwgaGFzIHBhaWQgbm8gaGVlZCwgYWx0aG91Z2ggdGhlc2Ugd2VyZSB0aGUgdGVybXMgdXBvbiB3aGljaCBoZSBiZWNhbWUKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzZWQgb2YgbXkgZXN0YXRlLiBOYXksIGFmdGVyIGpvaW5pbmcgd2l0aCBoaXMgY28tdHJ1c3RlZXMgaW4gcm9iYmluZyBtZSBvZgogICAgICAgICAgICAgICAgICAgIGV2ZXJ5dGhpbmcsIGhlIHdpbGwgbm93IGNsYWltIHlvdXIgY29tcGFzc2lvbiwgYWx0aG91Z2ggd2hhdCBoZSB3aXRoIHRoZSB0d28KICAgICAgICAgICAgICAgICAgICBvdGhlcnMgaGFzIHBhaWQgYmFjayB0byBtZSBkb2VzIG5vdCBhbW91bnQgZXZlbiB0byBzZXZlbnR5IG1pbmFlLCBhbmQgZXZlbiB0aGlzCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgcGxvdHRpbmcgdG8gZ2V0IGJhY2sgYWdhaW4uIDwvdHJhbnNsYXRpb24+"
translation['28.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBJCiAgICAgICAgICAgICAgICAgICAgd2FzIG9uIHRoZSBwb2ludCBvZiBpbnN0aXR1dGluZyB0aGlzIHN1aXQgYWdhaW5zdCB0aGVtIHRoZXkgYXR0YWNrZWQgbWUgYnkKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYW4gZXhjaGFuZ2Ugb2YgZXN0YXRlcyB0ZW5kZXJlZCBtZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGUgaW4gdGhlIGludHJvZHVjdGlvbiB0byA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3IiB2YWxpZD0ieWVzIj5EZW0uIDI3PC9iaWJsPi48L25vdGU+IGluCiAgICAgICAgICAgICAgICAgICAgb3JkZXIgdGhhdCwgaWYgSSBhY2NlcHRlZCBpdCwgSSBtaWdodCBub3QgYmUgYWxsb3dlZCB0byBwdXJzdWUgbXkgYWN0aW9uIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgdGhlbSw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3IiB2YWxpZD0ieWVzIj5EZW0uIDI3PC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgdGhleSBob3BlZCB0aGF0IHRoZSBleGNoYW5nZQogICAgICAgICAgICAgICAgICAgICAgICBvZiBwcm9wZXJ0aWVzLCBpZiBjYXJyaWVkIG91dCwgd291bGQgdHJhbnNmZXIgdG8gVGhyYXN5bG9jaHVzIGFsc28gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYWltcyBvZiBEZW1vc3RoZW5lcyBhZ2FpbnN0IHRoZW0sIGFuZCBzbyBkZWJhciB0aGUgbGF0dGVyIGZyb20gdGFraW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1cnRoZXIgYWN0aW9uLjwvbm90ZT4gc2luY2Ug77yIdGhleSB0aG91Z2h077yJIHRoaXMgc3VpdAogICAgICAgICAgICAgICAgICAgIHdvdWxkIHRoZW4gYmVsb25nIHRvIHRoZSBvbmUgdGVuZGVyaW5nIHRoZSBleGNoYW5nZTsgYW5kIGlmIEkgZGlkIG5vdCBkbyBzbywgSQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHVuZGVydGFrZSB0aGUgc2VydmljZSB3aXRoIHNsZW5kZXIgbWVhbnMsIGFuZCBzbyBiZSBhYnNvbHV0ZWx5IHJ1aW5lZC4gSW4KICAgICAgICAgICAgICAgICAgICB0aGlzIG1hdHRlciBUaHJhc3lsb2NodXMgb2YgQW5hZ3lydXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhyYXN5bG9jaHVzIHdhcyB0aGUgYnJvdGhlciBvZiB0aGUgTWVpZGlhcyBhZ2FpbnN0IHdob20gRGVtb3N0aGVuZXMKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBhY3Rpb24gZm9yIGFzc2F1bHQg77yIc2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgMjE8L2JpYmw+77yJLiBBbmFneXJ1cyB3YXMgYSBkZW1lIG9mIHRoZSB0cmliZSBFcmVjdGhlaXMuPC9ub3RlPiB3YXMKICAgICAgICAgICAgICAgICAgICB0aGVpciB0b29sLiBJLCB3aXRoIG5vIHRob3VnaHQgb2YgdGhlIGNvbnNlcXVlbmNlcywgYWNjZXB0ZWQgdGhlIGV4Y2hhbmdlIHdpdGgKICAgICAgICAgICAgICAgICAgICBoaW0sIGJ1dCBleGNsdWRlZCBoaW0gZnJvbSB0aGUgcHJlbWlzZXMgaG9waW5nIHRvIHdpbiBhIGNvdXJ0IGRlY2lzaW9uLDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjEiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgMjE8L2JpYmw+77yJLiBBbmFneXJ1cyB3YXMgYSBkZW1lIG9mIHRoZSB0cmliZSBFcmVjdGhlaXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklmIHRoZSBleGNoYW5nZSBvZiBwcm9wZXJ0aWVzIHdhcyBhY2NlcHRlZCwKICAgICAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHBhcnR5IGhhZCB0aGUgcmlnaHQgdG8gZW50ZXIgYW5kIHNlYXJjaCB0aGUgaG91c2UgYW5kIGxhbmQgb2YgZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBvdGhlci4gRGVtb3N0aGVuZXMgZGVuaWVzIHRoaXMgcmlnaHQgdG8gVGhyYXN5bG9jaHVzLCBob3BpbmcgdGhhdCBoZSBtaWdodAogICAgICAgICAgICAgICAgICAgICAgICB3aW4gYSBkZWNpc2lvbiBmcm9tIHRoZSBnZW5lcmFscywgYmVmb3JlIHdob20gc3VjaCBjYXNlcyB3ZXJlIGhlYXJkLCBhcyB0bwogICAgICAgICAgICAgICAgICAgICAgICB3aGV0aGVyIG9yIG5vdCBoaXMgY2xhaW0gYWdhaW5zdCBoaXMgZ3VhcmRpYW5zIHdvdWxkIHBhc3MgdG8gVGhyYXN5bG9jaHVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2V0aGVyIHdpdGggaGlzIHZpc2libGUgcHJvcGVydHkuIEZyb20gdGhlIG9yYXRpb24gYWdhaW5zdCBNZWlkaWFzIHdlCiAgICAgICAgICAgICAgICAgICAgICAgIGxlYXJuIHRoYXQgTWVpZGlhcyBhbmQgVGhyYXN5bG9jaHVzIGNhbWUgam9pbnRseSB0byBEZW1vc3RoZW5lcycgaG91c2UsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIGdyZWF0IHZpb2xlbmNlIGZvcmNlZCB0aGVtc2VsdmVzIGV2ZW4gaW50byB0aGUgd29tZW4ncyBhcGFydG1lbnRzCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZm9yZSB0aGV5IHdlcmUgZmluYWxseSBlamVjdGVkLjwvbm90ZT4gYnV0LCBmYWlsaW5nIG9mIHRoaXMsIGFuZCBiZWluZwogICAgICAgICAgICAgICAgICAgIGhhcmQgcHJlc3NlZCBmb3IgdGltZSwgcmF0aGVyIHRoYW4gYmUgZm9yY2VkIHRvIGdpdmUgdXAgbXkgc3VpdCwgSSBtb3J0Z2FnZWQgbXkKICAgICAgICAgICAgICAgICAgICBob3VzZSBhbmQgYWxsIG15IHByb3BlcnR5LCBhbmQgcGFpZCB0aGUgY29zdCBvZiB0aGUgc2VydmljZSBpbiBxdWVzdGlvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHNlcnZpY2Ugd2FzIHRoZSB0cmllcmFyY2h5LCBhbmQgdGhlIGNvc3QKICAgICAgICAgICAgICAgICAgICAgICAgZW50YWlsZWQgYW1vdW50ZWQgdG8gdHdlbnR5IG1pbmFlLjwvbm90ZT4gYmVpbmcgZWFnZXIgdG8gYnJpbmcgYmVmb3JlIHlvdSBteQogICAgICAgICAgICAgICAgICAgIHN1aXQgYWdhaW5zdCB0aGVzZSBtZW4uIDwvdHJhbnNsYXRpb24+"
translation['28.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXMgbm90IHRoZSB3cm9uZyBJIGhhdmUgc3VmZmVyZWQgZnJvbSB0aGUgYmVnaW5uaW5nIGdyZWF0CiAgICAgICAgICAgICAgICAgICAgaW5kZWVkLCBhbmQgZ3JlYXQgdGhlIGhhcm0gdGhleSBhcmUgc3RyaXZpbmcgdG8gZG8gbWUgbm93LCBiZWNhdXNlIEkgc2VlayB0bwogICAgICAgICAgICAgICAgICAgIG9idGFpbiByZWRyZXNzPyBXaG8gb2YgeW91IHdvdWxkIG5vdCByaWdodGx5IGZlZWwgaW5kaWduYXRpb24gYWdhaW5zdCB0aGlzIG1hbgogICAgICAgICAgICAgICAgICAgIGFuZCBwaXR5IGZvciBtZSwgc2VlaW5nIHRoYXQgdG8gdGhlIGVzdGF0ZSBvZiBtb3JlIHRoYW4gdGVuIHRhbGVudHMgd2hpY2ggaGUKICAgICAgICAgICAgICAgICAgICBpbmhlcml0ZWQgdGhlcmUgaGFzIGJlZW4gYWRkZWQgbXkgb3duIG9mIHN1Y2ggY29uc2lkZXJhYmxlIHNpemUsIHdoaWxlIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIG5vdCBvbmx5IGJlZW4gZGVmcmF1ZGVkIG9mIG15IGluaGVyaXRhbmNlLCBidXQgYW0gYnkgdGhlIHJhc2NhbGl0eSBvZiB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICBiZWluZyByb2JiZWQgZXZlbiBvZiB3aGF0IHRoZXkgaGF2ZSBub3cgcmVwYWlkIG1lPyBUbyB3aGF0IGFyZSB3ZSB0byB0dXJuLCBpZgogICAgICAgICAgICAgICAgICAgIHlvdSBnaXZlIGEgZGlmZmVyZW50IGRlY2lzaW9uIHJlZ2FyZGluZyB0aGVtPyBUbyB0aGUgZ29vZHMgbW9ydGdhZ2VkIHRvIG91cgogICAgICAgICAgICAgICAgICAgIGNyZWRpdG9ycz8gQnV0IHRoZXkgYmVsb25nIHRvIHRoZSBob2xkZXJzIG9mIHRoZSBtb3J0Z2FnZS4gVG8gd2hhdCBpcyBsZWZ0IGFmdGVyCiAgICAgICAgICAgICAgICAgICAgdGhlIGNyZWRpdG9ycyBhcmUgcGFpZD8gQnV0IHRoYXQgYmVjb21lcyB0aGUgcHJvcGVydHkgb2YgdGhlIGRlZmVuZGFudCwgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgY29uZGVtbiBtZSB0byBwYXkgYW4gb2JvbCBvbiBlYWNoIGRyYWNobWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZQogICAgICAgICAgICAgICAgICAgICAgICBub3RlIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNjciIHZhbGlkPSJ5ZXMiPkRlbS4gMjcuNjc8L2JpYmw+LiBUaGUgZW50aXJlIHByb3BlcnR5IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwbGFpbnRpZmYgd291bGQgYmUgZXhoYXVzdGVkIGluIHBheW1lbnQgb2YgdGhlIGRhbWFnZXMgaW1wb3NlZC48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy42NyIgdmFsaWQ9InllcyI+RGVtLiAyNy42NzwvYmlibD4uIFRoZSBlbnRpcmUgcHJvcGVydHkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWludGlmZiB3b3VsZCBiZSBleGhhdXN0ZWQgaW4gcGF5bWVudCBvZiB0aGUgZGFtYWdlcyBpbXBvc2VkLjwvdHJhbnNsYXRpb24+"
translation['28.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5EbyBub3QsIG1lbiBvZiB0aGUganVyeSwgYmUgdG8gdXMgdGhlIGNhdXNlIG9mCiAgICAgICAgICAgICAgICAgICAgc3VjaCBkZWVwIGRpc3RyZXNzOyBkbyBub3QgYWxsb3cgbXkgbW90aGVyLCBteSBzaXN0ZXIgYW5kIG15c2VsZiB0byBzdWZmZXIKICAgICAgICAgICAgICAgICAgICB1bmRlc2VydmVkIG1pc2ZvcnR1bmVzLiBJdCB3YXMgbm90IHRvIHByb3NwZWN0cyBzdWNoIGFzIHRoZXNlIHRoYXQgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgbGVmdCB1cy4gTmF5LCBteSBzaXN0ZXIgd2FzIHRvIGJlIHRoZSB3aWZlIG9mIERlbW9waG9uIHdpdGggYSBkb3dyeSBvZiB0d28KICAgICAgICAgICAgICAgICAgICB0YWxlbnRzLCBteSBtb3RoZXIgdGhlIHdpZmUgb2YgdGhpcyBtb3N0IHJ1dGhsZXNzIG9mIGFsbCBtZW4gd2l0aCBhIGRvd3J5IG9mCiAgICAgICAgICAgICAgICAgICAgZWlnaHR5IG1pbmFlLCBhbmQgSSBhcyBteSBmYXRoZXIncyBzdWNjZXNzb3Igd2FzIHRvIHBlcmZvcm0gc3RhdGUgc2VydmljZXMgYXMgaGUKICAgICAgICAgICAgICAgICAgICBoYWQgZG9uZS4gPC90cmFuc2xhdGlvbj4="
translation['28.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5TdWNjb3IgdXMsIHRoZW4sIHN1Y2NvciB1cywgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIHNha2Ugb2YganVzdGljZSwgZm9yIHlvdXIgb3duIHNha2VzLCBmb3Igb3VycywgYW5kIGZvciBteSBkZWFkIGZhdGhlcidzIHNha2UuCiAgICAgICAgICAgICAgICAgICAgU2F2ZSB1czsgaGF2ZSBjb21wYXNzaW9uIG9uIHVzIHNpbmNlIHRoZXNlLCBvdXIgcmVsYXRpdmVzLCBoYXZlIGZlbHQgbm8KICAgICAgICAgICAgICAgICAgICBjb21wYXNzaW9uLiBJdCBpcyB0byB5b3UgdGhhdCB3ZSBoYXZlIGZsZWQgZm9yIHByb3RlY3Rpb24uIEkgYmVzZWVjaCB5b3UsIEkKICAgICAgICAgICAgICAgICAgICBpbXBsb3JlIHlvdSBieSB5b3VyIGNoaWxkcmVuLCBieSB5b3VyIHdpdmVzLCBieSBhbGwgdGhlIGdvb2QgdGhpbmdzIHlvdSBwb3NzZXNzLgogICAgICAgICAgICAgICAgICAgIFNvIG1heSBoZWF2ZW4gZ2l2ZSB5b3Ugam95IG9mIHRoZW0sIGRvIG5vdCBsb29rIHVwb24gbWUgd2l0aCBpbmRpZmZlcmVuY2Ugbm9yCiAgICAgICAgICAgICAgICAgICAgY2F1c2UgbXkgbW90aGVyLCBkZXByaXZlZCBvZiB0aGUgaG9wZXMgaW4gbGlmZSB0aGF0IGFyZSBsZWZ0IGhlciwgdG8gc3VmZmVyIGEKICAgICAgICAgICAgICAgICAgICBsb3QgdW53b3J0aHkgb2YgaGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['28.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5TaGUgbm93IHRoaW5rcyB0aGF0IHNoZQogICAgICAgICAgICAgICAgICAgIGlzIHRvIHdlbGNvbWUgbWUgaG9tZSBhZnRlciBJIGhhdmUgd29uIGEganVzdCB2ZXJkaWN0IGZyb20geW91LCBhbmQgdGhhdCBteQogICAgICAgICAgICAgICAgICAgIHNpc3RlciB3aWxsIG5vdCBiZSBwb3J0aW9ubGVzcy4gQnV0LCBpZiB5b3UgZGVjaWRlIGFkdmVyc2VseSDvvIh3aGljaCBtYXkKICAgICAgICAgICAgICAgICAgICBoZWF2ZW4gZm9yZmVuZO+8iSB3aGF0LCB0aGluayB5b3UsIHdpbGwgYmUgaGVyIGFuZ3Vpc2ggb2Ygc291bCB3aGVuIHNoZQogICAgICAgICAgICAgICAgICAgIHNlZXMgbWUgbm90IG9ubHkgcm9iYmVkIG9mIG15IHBhdHJpbW9ueSwgYnV0IGRpc2VuZnJhbmNoaXNlZCBhcyB3ZWxsLCBhbmQgaGFzIG5vCiAgICAgICAgICAgICAgICAgICAgaG9wZSB0aGF0IG15IHNpc3RlciB3aWxsIGZpbmQgYW4gZXN0YWJsaXNobWVudCB0aGF0IGJlZml0cyBoZXIgc3RhdGlvbiBiZWNhdXNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHBvdmVydHkgdGhhdCB3aWxsIGJlIG91cnM/IDwvdHJhbnNsYXRpb24+"
translation['28.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5JIGhhdmUgbm90CiAgICAgICAgICAgICAgICAgICAgZGVzZXJ2ZWQsIG1lbiBvZiB0aGUganVyeSwgdG8gZmFpbCBvZiBqdXN0aWNlIGF0IHlvdXIgaGFuZHMsIG5vciBoYXMgQXBob2J1cwogICAgICAgICAgICAgICAgICAgIGRlc2VydmVkIHRoYXQgaGUgc2hvdWxkIHJldGFpbiBhbGwgdGhlIG1vbmV5IHRoYXQgaGUgaGFzIHdyb25nZnVsbHkgdGFrZW4uCiAgICAgICAgICAgICAgICAgICAgUmVnYXJkaW5nIG15c2VsZiwgZXZlbiB0aG91Z2ggeW91IGhhdmUgYXMgeWV0IGhhZCBubyBleHBlcmllbmNlIHRvIHByb3ZlIHdoYXQKICAgICAgICAgICAgICAgICAgICBtYW5uZXIgb2YgbWFuIEkgYW0gaW4gbXkgcmVsYXRpb25zIHRvIHlvdSwgeWV0IGl0IGlzIGZhaXIgdG8gZXhwZWN0IHRoYXQgSSBzaGFsbAogICAgICAgICAgICAgICAgICAgIG5vdCBiZSB3b3JzZSB0aGFuIG15IGZhdGhlcjsgYnV0IG9mIHRoaXMgbWFuIHlvdSBoYXZlIGhhZCBleHBlcmllbmNlLCBhbmQgeW91CiAgICAgICAgICAgICAgICAgICAga25vdyB3ZWxsIHRoYXQsIHRob3VnaCBoZSBpbmhlcml0ZWQgYSBsYXJnZSBlc3RhdGUsIGhlIGhhcyBzaG93biBubyBnZW5lcm9zaXR5CiAgICAgICAgICAgICAgICAgICAgdG93YXJkIHlvdSwgYnV0IGhhcyBiZWVuIHByb3ZlbiB0byBiZSBhIGRlZnJhdWRlciBvZiBvdGhlcnMuIDwvdHJhbnNsYXRpb24+"
translation['28.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TG9vaywgdGhlbiwgdG8gdGhpcywgYW5kIGJlYXIKICAgICAgICAgICAgICAgICAgICBpbiBtaW5kIHRoZSBvdGhlciBmYWN0czsgYW5kIHRoZW4gY2FzdCB5b3VyIHZvdGUgb24gdGhlIHNpZGUgb2YganVzdGljZS4gWW91CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBldmlkZW5jZSB0aGF0IGlzIGFkZXF1YXRlLCBldmlkZW5jZSBmcm9tIHdpdG5lc3NlcywgZnJvbSBkZXBvc2l0aW9ucywgZnJvbQogICAgICAgICAgICAgICAgICAgIHByb2JhYmlsaXRpZXMsIGZyb20gdGhlIHN0YXRlbWVudHMgb2YgdGhlc2UgbWVuIHRoZW1zZWx2ZXMgd2hvIGFja25vd2xlZGdlIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IHRvb2sgcG9zc2Vzc2lvbiBvZiBteSBlbnRpcmUgZXN0YXRlLiBUaGV5IHNheSB0aGV5IGhhdmUgc3BlbnQgaXQsIGJ1dCB0aGV5CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBub3Qgc3BlbnQgaXQ7IHRoZXkgaGF2ZSBpdCBhbGwgaW4gdGhlaXIgb3duIHBvc3Nlc3Npb24uIDwvdHJhbnNsYXRpb24+"
translation['28.24'] = "PHRyYW5zbGF0aW9uPjxkaXYxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIG9yZz0idW5pZm9ybSIgc2FtcGxlPSJjb21wbGV0ZSIgdHlwZT0ic3BlZWNoIj4KICAgICAgICAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdhaW5zdCBBcGhvYnVzIDM8L2hlYWQ+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgSSB3ZXJlIG5vdAogICAgICAgICAgICAgICAgICAgIGNvbnNjaW91cywgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IGluIGEgZm9ybWVyIHN1aXQgYWdhaW5zdCBBcGhvYnVzIEkgaGFkIHJlYWRpbHkKICAgICAgICAgICAgICAgICAgICDvvIhzbyBhYnNvbHV0ZWx5IG1hbmlmZXN0IHdlcmUgaGlzIHdyb25nZG9pbmdz77yJIGNvbnZpY3RlZCBoaW0gb2YKICAgICAgICAgICAgICAgICAgICBsaWVzIGdyZWF0ZXIgYW5kIG1vcmUgb3V0cmFnZW91cyB0aGFuIHRoZXNlIHdoaWNoIGhlIG5vdyB1dHRlcnMsIEkgc2hvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBncmF2ZSBkb3VidHMgb2YgbXkgYWJpbGl0eSB0byBzaG93IGhvdyBoZSBzZWVrcyB0byBsZWFkIHlvdSBhc3RyYXkgaW4gcmVnYXJkIHRvCiAgICAgICAgICAgICAgICAgICAgZWFjaCBvbmUgb2YgdGhlbS4gQXMgaXQgaXMsIGhvd2V2ZXIg77yIYmUgaXQgc2FpZCB3aXRoIHRoZSBmYXZvciBvZgogICAgICAgICAgICAgICAgICAgIGhlYXZlbu+8iSwgaWYgeW91IHByb3ZlIGZhaXIgYW5kIGltcGFydGlhbCBoZWFyZXJzLCBJIGhhdmUgc3Ryb25nIGhvcGVzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3Ugd2lsbCBiZWNvbWUgYXMgZnVsbHkgYXdhcmUgb2YgdGhlIHNoYW1lbGVzc25lc3Mgb2YgdGhpcyBtYW4gYXMgd2VyZSB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJvcnMgaW4gdGhlIGZvcm1lciB0cmlhbC4gSWYgdGhlIGNhc2UgcmVxdWlyZWQgZWxvcXVlbmNlIG9yIGNsZXZlcm5lc3MgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBzaHJpbmsgdGhyb3VnaCBkaXN0cnVzdCBvZiBteSB5b3V0aDsgYnV0LCBhcyBtYXR0ZXJzIGFyZSwgSSBuZWVkIG1lcmVseQogICAgICAgICAgICAgICAgICAgIHBvaW50IG91dCBhbmQgcmVoZWFyc2UgdG8geW91IHdoYXQgdGhlIHBsYWludGlmZidzIGNvbmR1Y3QgdG93YXJkIHVzIGhhcyBiZWVuLgogICAgICAgICAgICAgICAgICAgIEZyb20gdGhpcyBpdCB3aWxsIGJlIGVhc3ksIEkgdGhpbmssIGZvciBhbGwgb2YgeW91IHRvIGRldGVybWluZSB3aGljaCBvZiB1cyBpcwogICAgICAgICAgICAgICAgICAgIHRoZSB2aWxsYWluLiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JCiAgICAgICAgICAgICAgICAgICAga25vdyB0aGF0IHRoZSBwbGFpbnRpZmYgaGFzIGluc3RpdHV0ZWQgdGhpcyBzdWl0LCBub3QgYmVjYXVzZSBoZSBiZWxpZXZlcyBoZSBjYW4KICAgICAgICAgICAgICAgICAgICBjb252aWN0IGFueW9uZSBvZiBoYXZpbmcgYm9ybmUgZmFsc2Ugd2l0bmVzcyBhZ2FpbnN0IGhpbSwgYnV0IGJlY2F1c2UgaGUgdGhpbmtzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgbGFyZ2UgYW1vdW50IG9mIGRhbWFnZXMgd2hpY2ggaGUgd2FzIGNvbmRlbW5lZCB0byBwYXkgd2lsbCBnaXZlIHJpc2UgdG8KICAgICAgICAgICAgICAgICAgICBhIGZlZWxpbmcgb2YgcHJlanVkaWNlIGFnYWluc3QgbWUsIGFuZCBvZiBjb21wYXNzaW9uIHRvd2FyZCBoaW1zZWxmLiBGb3IgdGhpcwogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBoZSBpcyBub3cgc2Vla2luZyB0byBkZWZlbmQgaGltc2VsZiBhZ2FpbnN0IGNoYXJnZXMgbWFkZSBpbiBhIHN1aXQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhhcyBhbHJlYWR5IGJlZW4gZGVjaWRlZCwgcmVnYXJkaW5nIHdoaWNoIGhlIGhhZCBhdCB0aGUgdGltZSBubyByZWFzb25hYmxlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSB0byBtYWtlLiBJLCBmb3IgbXkgcGFydCwgbWVuIG9mIHRoZSBqdXJ5LCBpZiBJIGhhZCBwcm9jZWVkZWQgdG8gZXhlY3V0ZQogICAgICAgICAgICAgICAgICAgIHRoZSBqdWRnZW1lbnQgYWdhaW5zdCBoaW0gYW5kIGhhZCBiZWVuIHVud2lsbGluZyB0byBtYWtlIGFueSByZWFzb25hYmxlCiAgICAgICAgICAgICAgICAgICAgY29uY2Vzc2lvbiwgc2hvdWxkIGV2ZW4gc28gaGF2ZSBkb25lIG5vIHdyb25nIGluIGV4YWN0aW5nIHRoZSBkYW1hZ2VzIGF3YXJkZWQgYnkKICAgICAgICAgICAgICAgICAgICB5b3VyIGRlY2lzaW9uOyBidXQgZm9yIGFsbCB0aGF0IGl0IG1pZ2h0IGhhdmUgYmVlbiBzYWlkIHRoYXQgSSBoYWQgc2hvd24gdW5kdWUKICAgICAgICAgICAgICAgICAgICBydXRobGVzc25lc3MgYW5kIGVubWl0eSB0b3dhcmQgYSBtYW4gd2hvIGlzIGEgcmVsYXRpdmUgaW4gZGVwcml2aW5nIGhpbSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBoaXMgcHJvcGVydHkuIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGFzIGl0IGlzLCB0aGUgcHJlY2lzZQogICAgICAgICAgICAgICAgICAgIGNvbnRyYXJ5IGlzIHRoZSB0cnV0aC4gVGhpcyBtYW4gd2l0aCBoaXMgY28tdHJ1c3RlZXMgaGFzIHJvYmJlZCBtZSBvZiBteSBlbnRpcmUKICAgICAgICAgICAgICAgICAgICBwYXRyaW1vbnksIGFuZCwgZXZlbiBhZnRlciBiZWluZyBjbGVhcmx5IGNvbnZpY3RlZCBpbiB5b3VyIGNvdXJ0LCBoZSBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIGhpbXNlbGYgb2JsaWdlZCB0byBkbyBhbnl0aGluZyByZWFzb25hYmxlLiBPbiB0aGUgY29udHJhcnkgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgZGlzcGVyc2VkIGhpcyBwcm9wZXJ0eSwgZ2l2aW5nIGhpcyBmYXJtLWJ1aWxkaW5ncyB0byBBZXNpdXMgYW5kIGhpcyBmYXJtIHRvCiAgICAgICAgICAgICAgICAgICAgT25ldG9yLCBhZ2FpbnN0IHdob20gaGUgaGFzIGZvcmNlZCBtZSB0byBlbmdhZ2UgaW4gYSB0cm91Ymxlc29tZSBsYXdzdWl0LiBIZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgc3RyaXBwZWQgdGhlIGhvdXNlIG9mIGl0cyBmdXJuaXR1cmUsIHRvb2sgYXdheSB0aGUgc2xhdmVzLCBkZXN0cm95ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgd2luZS12YXQsIHRvcmUgb2ZmIHRoZSBkb29ycywgYW5kIGFsbCBidXQgc2V0IGZpcmUgdG8gdGhlIGhvdXNlIGl0c2VsZjsgdGhlbiBoZQogICAgICAgICAgICAgICAgICAgIG1hZGUgb2ZmIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4sIHdoZXJlIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIHNldHRsZWQgYW5kIHBhaWQgdGhlIGFsaWVuJ3MgdGF4LiBZb3Ugd291bGQsIHRoZXJlZm9yZSwgd2l0aCBiZXR0ZXIgZ3JvdW5kCiAgICAgICAgICAgICAgICAgICAgbG9hdGhlIHRoaXMgbWFuIGZvciBkZWVkcyBsaWtlIHRoZXNlLCB0aGFuIGp1ZGdlIG1lIGd1aWx0eSBvZiB1bmR1ZSBzZXZlcml0eS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVnYXJkaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHJhcGFjaXR5IGFuZCB2aWxlIGNoYXJhY3RlciBvZiB0aGUgcGxhaW50aWZmIEkgcHVycG9zZSB0byBzcGVhayBhdCBsZW5ndGgKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgeW91IGxhdGVyIG9uLCB0aG91Z2ggd2hhdCB5b3UgaGF2ZSBldmVuIG5vdyBoZWFyZCBnaXZlcyB5b3UgYSBmYWlyIGlkZWEKICAgICAgICAgICAgICAgICAgICBvZiBpdC4gQnV0IEkgc2hhbGwgbm93IHVuZGVydGFrZSB0byBzaG93IHlvdSwgdGhhdCB0aGUgdGVzdGltb255IHdoaWNoIGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4sIGFib3V0IHdoaWNoIHlvdSBhcmUgZ29pbmcgdG8gY2FzdCB5b3VyIHZvdGVzLCBpcyB0cnVlLiBCdXQgb25lIHJlcXVlc3QgSQogICAgICAgICAgICAgICAgICAgIG1ha2Ugb2YgeW91LCBtZW4gb2YgdGhlIGp1cnksIGFuZCBpdCBpcyBhIHJlYXNvbmFibGUgb25l4oCUdGhhdCB5b3Ugd2lsbAogICAgICAgICAgICAgICAgICAgIGdpdmUgdXMgYm90aCBhIGZhaXIgaGVhcmluZy4gVGhpcyBpcyBhcyBtdWNoIGluIHlvdXIgaW50ZXJlc3QgYXMgaW4gbWluZSwgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgYWNjdXJhdGUgeW91ciBrbm93bGVkZ2Ugb2YgdGhlIGZhY3RzLCB0aGUgbW9yZSBqdXN0IGFuZCBpbiBoYXJtb255IHdpdGgKICAgICAgICAgICAgICAgICAgICB5b3VyIG9hdGhzIHdpbGwgYmUgdGhlIHZvdGUgeW91IHdpbGwgY2FzdCByZWdhcmRpbmcgdGhlbS4gPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkkgc2hhbGwgc2hvdyB0aGF0IEFwaG9idXMgaGFzIG5vdCBvbmx5IGFja25vd2xlZGdlZAogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiB0byBiZSBhIGZyZWVtYW4sIGJ1dCBoYXMKICAgICAgICAgICAgICAgICAgICBldmVuIHByb3ZlZCBpdCBieSBoaXMgYWN0aW9uczsgdGhhdCwgZnVydGhlcm1vcmUsIGFib3V0IHRoaXMgbWF0dGVyIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGRlY2xpbmVkIHRoZSBhYnNvbHV0ZWx5IHN1cmUgdGVzdCBieSB0b3J0dXJlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGhpZ2ggdmFsdWUgYXR0cmlidXRlZCBieSB0aGUgR3JlZWtzIHRvIGV2aWRlbmNlIGV4dHJhY3RlZCBmcm9tIGEgc2xhdmUKICAgICAgICAgICAgICAgICAgICAgICAgYnkgdG9ydHVyZSBzZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzAuMzciIHZhbGlkPSJ5ZXMiPkRlbS4gMzAuMzc8L2JpYmw+LCBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIFJoLiAxLjE1IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBSaC4gMS4xNTwvYmlibD48L25vdGU+IGFuZCBkb2VzIG5vdCB3aXNoCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSB0aGUgdHJ1dGggYnJvdWdodCB0byBsaWdodCB0aGF0IG9uIHRoZSBjb250cmFyeSBoZSBoYXMgcmVjb3Vyc2UgdG8KICAgICAgICAgICAgICAgICAgICB0cmlja2VyeSwgYnJpbmdzIGZvcndhcmQgZmFsc2Ugd2l0bmVzc2VzLCBhbmQgYnkgaGlzIG93biB3b3JkcyBkaXN0b3J0cyB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCByZWdhcmRpbmcgd2hhdCBoYXMgdGFrZW4gcGxhY2UuIFNvIHN0cm9uZyBhbmQgc28gcGxhaW4gaXMgdGhlIGV2aWRlbmNlIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSBzaGFsbCBwcm92ZSB0aGVzZSBzdGF0ZW1lbnRzIHRoYXQgeW91IHdpbGwgYWxsIHNlZSBjbGVhcmx5IHRoYXQgaXQgaXMgSQogICAgICAgICAgICAgICAgICAgIHdobyBhbSBzcGVha2luZyB0aGUgdHJ1dGgsIGFuZCB0aGF0IGhlIGhhcyB1dHRlcmVkIG5vdCBhIHdvcmQgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgY3JlZGVuY2UuIEkgc2hhbGwgYmVnaW4gYXQgYSBwb2ludCB3aGljaCB3aWxsIG1ha2UgaXQgZWFzaWVzdCBmb3IgeW91IHRvIGxlYXJuCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3RzLCBhbmQgZm9yIG1lIHRvIGluc3RydWN0IHlvdSByZWdhcmRpbmcgdGhlbSBpbiB0aGUgYnJpZWZlc3QgdGltZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBpbnN0aXR1dGVkCiAgICAgICAgICAgICAgICAgICAgc3VpdCwgbWVuIG9mIHRoZSBqdXJ5LCBhZ2FpbnN0IERlbW9waG9uLCBUaGVyaXBwaWRlcyBhbmQgdGhlIHBsYWludGlmZiBmb3IKICAgICAgICAgICAgICAgICAgICBicmVhY2ggb2YgdHJ1c3QgaW4gdGhlaXIgZ3VhcmRpYW5zaGlwLCBmb3IgSSBoYWQgYmVlbiBkZWZyYXVkZWQgYnkgdGhlbSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBteSBpbmhlcml0YW5jZS4gV2hlbiBteSBzdWl0IGFnYWluc3QgQXBob2J1cyBpbiB0aGUgZmlyc3QgaW5zdGFuY2UgY2FtZSB1cCBmb3IKICAgICAgICAgICAgICAgICAgICB0cmlhbCwgSSBwcm92ZWQgY2xlYXJseSB0byB0aGUganVyeSwgYXMgSSBzaGFsbCBwcm92ZSB0byB5b3UsIHRoYXQgaGUsIGluCiAgICAgICAgICAgICAgICAgICAgY29uanVuY3Rpb24gd2l0aCB0aGUgb3RoZXJzLCBoYWQgcm9iYmVkIG1lIG9mIGFsbCB0aGUgcHJvcGVydHkgdGhhdCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGxlZnQgbWU7IGFuZCBJIHJlbGllZCB1cG9uIG5vIGZhbHNlIHRlc3RpbW9ueS4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgaXMgYSBjbGVhciBwcm9vZiBvZiB0aGlzLiBBIGhvc3Qgb2YgZGVwb3NpdGlvbnMgd2FzIHJlYWQgYXQgdGhlIHRyaWFsLAogICAgICAgICAgICAgICAgICAgIHNvbWUgb2YgdGhlIGRlcG9uZW50cyBkZWNsYXJpbmcgdGhhdCB0aGV5IGhhZCBnaXZlbiB0byB0aGUgcGxhaW50aWZmIHByb3BlcnR5IG9mCiAgICAgICAgICAgICAgICAgICAgbWluZSwgb3RoZXJzIHRoYXQgaGUgaGFkIHJlY2VpdmVkIHN1Y2ggcHJvcGVydHkgaW4gdGhlaXIgcHJlc2VuY2UsIHN0aWxsIG90aGVycwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBoYWQgcHVyY2hhc2VkIGdvb2RzIGZyb20gaGltLCBhbmQgcGFpZCBoaW0gdGhlIHByaWNlOyB5ZXQgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlZCBub3QgYSBzaW5nbGUgb25lIG9mIHRoZXNlIHdpdGggYmVhcmluZyBmYWxzZSB0ZXN0aW1vbnkuIEhlIGhhcyBkYXJlZCB0bwogICAgICAgICAgICAgICAgICAgIGF0dGFjayB0aGlzIG9uZSBwaWVjZSBvZiB0ZXN0aW1vbnksIGFuZCBpdCBhbG9uZSwgYWx0aG91Z2ggaW4gaXQgaGUgY2Fubm90IHNob3cKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXJlIHdhcyBtZW50aW9uIGV2ZW4gb2Ygb25lIHNpbmdsZSBkcmFjaG1hLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBmb3IgdGhlIGNvbXB1dGF0aW9uIG9mIHRoZSBzdW1zIG9mIHdoaWNoIEkgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICByb2JiZWQsIEkgcmVsaWVkIG5vdCBzbyBtdWNoIG9uIHRoaXMgbWFuJ3MgdGVzdGltb255LCBmb3IgdGhlcmUgd2FzIG5vIG1lbnRpb24KICAgICAgICAgICAgICAgICAgICBvZiBtb25leSBpbiBpdCwgYnV0IG9uIHRoZSBzZXZlcmFsIHN0YXRlbWVudHMgb2YgdGhlIG90aGVycywgYWdhaW5zdCB3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWludGlmZiBoYXMgbWFkZSBubyBjaGFyZ2VzLiBUaGVyZWZvcmUgdGhlIGp1cnltZW4gd2hvIGF0IHRoYXQgdGltZSBoZWFyZCBteQogICAgICAgICAgICAgICAgICAgIHBsZWEsIG5vdCBvbmx5IGZvdW5kIGhpbSBndWlsdHksIGJ1dCBmaXhlZCB0aGUgZGFtYWdlcyBhdCB0aGUgZnVsbCBhbW91bnQgc3RhdGVkCiAgICAgICAgICAgICAgICAgICAgaW4gbXkgY29tcGxhaW50LiBXaHkgd2FzIGl0LCB0aGVuLCB0aGF0IGhlIHBhc3NlZCBvdmVyIHRoZSBvdGhlciB3aXRuZXNzZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgc3VlZCB0aGUgZGVmZW5kYW50IGFsb25lPyBJIHdpbGwgdGVsbCB5b3UuIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz5JbgogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCB0byBhbGwgdGhlIHdpdG5lc3NlcyB3aG8gdGVzdGlmaWVkIHRoYXQgaGUgaGFkIHJlY2VpdmVkIHRoZSBtb25leSwgaGUKICAgICAgICAgICAgICAgICAgICBrbmV3IHRoYXQgdGhlIG1vcmUgZGlzY3Vzc2lvbiB0aGVyZSBzaG91bGQgYmUgb3ZlciBlYWNoIHNlcGFyYXRlIHBvaW50LCB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIGNvbnZpbmNpbmdseSB3b3VsZCBoZSBiZSBjb252aWN0ZWQgb2YgcG9zc2Vzc2luZyBpdCwgYW5kIHRoaXMgd2FzIGJvdW5kIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhc2UgaW4gYSB0cmlhbCBmb3IgZmFsc2Ugd2l0bmVzczsgZm9yIHRoZSBhY2N1c2F0aW9ucyB3aGljaCBJIHRoZW4gbWFkZQogICAgICAgICAgICAgICAgICAgIGFsb25nIHdpdGggYWxsIHRoZSBvdGhlcnMgaW4gYSBzbWFsbCBwYXJ0IG9mIHRoZSB0aW1lIGFsbG90dGVkIG1lLCBJIHNob3VsZCBub3cKICAgICAgICAgICAgICAgICAgICBkaXNjdXNzIHNldmVyYWxseSBhbmQgaW4gZGV0YWlsIGluIHRoZSB0aW1lIG9mIGFuIGVudGlyZSBzcGVlY2g7IDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+d2hlcmVhcywgaWYgaGUgYXR0YWNrZWQgYW4gYW5zd2VyIGdpdmVuLCBoZSB0aG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBhcyBoZSBoYWQgbWFkZSBhbiBhZG1pc3Npb24gYmVmb3JlLCBzbyBub3cgaXQgd291bGQgYmUgaW4gaGlzIHBvd2VyIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICBhIGRlbmlhbC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGluIGF0dGFja2luZyB0aGUgdGVzdGltb255IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZXBvbmVudCBoZSB3b3VsZCBkZW55IGhpcyBvd24gcHJldmlvdXMgYWRtaXNzaW9ucy48L25vdGU+IFRoYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVhc29uIHdoeSBoZSBhdHRhY2tzIHRoZSB0ZXN0aW1vbnkgb2YgdGhpcyB3aXRuZXNzLCB0aGUgdHJ1dGggb2Ygd2hvc2UKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkgSSBtZWFuIHRvIHByb3ZlIGNvbmNsdXNpdmVseSB0byB5b3UgYWxsLCBub3Qgb24gdGhlIGJhc2lzIG9mCiAgICAgICAgICAgICAgICAgICAgcHJvYmFiaWxpdGllcywgb3Igb2YgYXJndW1lbnRzIG1hZGUgdXAgdG8gZml0IHRoZSBvY2Nhc2lvbiwgYnV0IGJ5IHJlYXNvbmluZwogICAgICAgICAgICAgICAgICAgIHdoaWNoLCBJIGFtIHN1cmUsIHdpbGwgYXBwcm92ZSBpdHNlbGYgdG8geW91IGFsbCBhcyBqdXN0IGFuZCBmYWlyLiBMaXN0ZW4sIGFuZAogICAgICAgICAgICAgICAgICAgIGp1ZGdlLiA8bWlsZXN0b25lIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBrbmV3LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgdGhhdCBJIHNob3VsZCBmaW5kIHRoZSB3aG9sZSBjb250ZXN0IGNlbnRyaW5nIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gaW5zZXJ0ZWQgaW4gdGhlIHJlY29yZCwgYW5kIHRoYXQgaXQgd291bGQgYmUgcmVnYXJkaW5nIHRoZSB0cnV0aCBvcgogICAgICAgICAgICAgICAgICAgIGZhbHNlaG9vZCBvZiB0aGlzIHRoYXQgeW91IHdvdWxkIGNhc3QgeW91ciB2b3RlcywgYW5kIEkgdGhlcmVmb3JlIGRldGVybWluZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBmaXJzdCBzdGVwIGZvciBtZSB0byB0YWtlIHdhcyB0byBvZmZlciBBcGhvYnVzIGEgY2hhbGxlbmdlLiBXaGF0LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGRpZCBJIGRvPyBJIG9mZmVyZWQgdG8gc3VycmVuZGVyIHRvIGhpbSBmb3IgZXhhbWluYXRpb24gYnkgdG9ydHVyZSBhIHNsYXZlIHdobwogICAgICAgICAgICAgICAgICAgIGtuZXcgaG93IHRvIHJlYWQgYW5kIHdyaXRlLCBhbmQgd2hvIGhhZCBiZWVuIHByZXNlbnQgd2hlbiBBcGhvYnVzIG1hZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgYWRtaXNzaW9uIGluIHF1ZXN0aW9uLCBhbmQgd2hvIHdyb3RlIGRvd24gdGhlIHN0YXRlbWVudCBvZiB0aGUgd2l0bmVzcy4gVGhpcyBtYW4KICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBvcmRlcmVkIGJ5IG1lIG5vdCB0byB1c2UgYW55IGZyYXVkIG9yIHRyaWNrZXJ5LCBub3IgdG8gd3JpdGUgZG93biBzb21lCiAgICAgICAgICAgICAgICAgICAgYW5kIHN1cHByZXNzIG90aGVycyBvZiB0aGUgc3RhdGVtZW50cyBtYWRlIGJ5IHRoZSBwbGFpbnRpZmYgcmVnYXJkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgYXQgaXNzdWUsIGJ1dCBzaW1wbHkgdG8gd3JpdGUgdGhlIGFic29sdXRlIHRydXRoLCBhbmQgd2hhdCBBcGhvYnVzCiAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgc2FpZC4gPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGJldHRlciBvcHBvcnR1bml0eSBjb3VsZAogICAgICAgICAgICAgICAgICAgIGhlIGhhdmUgaGFkIG9mIGNvbnZpY3RpbmcgdXMgb2YgZmFsc2Vob29kIHRoYW4gYnkgcHV0dGluZyBteSBzbGF2ZSB0byB0b3J0dXJlPwogICAgICAgICAgICAgICAgICAgIEJ1dCBBcGhvYnVzIGtuZXcgYmV0dGVyIHRoYW4gYW55b25lIGVsc2UgdGhhdCB0aGUgc2xhdmUgaGFkIGJvcm5lIHRydWUKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnksIGFuZCB0aGVyZWZvcmUgaGUgZGVjbGluZWQgdGhlIHRlc3QuIEFuZCBpbiB0cnV0aCBpdCBpcyBub3Qgb25lIG9yIHR3bwogICAgICAgICAgICAgICAgICAgIG9ubHkgd2hvIGtub3cgdGhlc2UgZmFjdHM7IHRoZSBjaGFsbGVuZ2Ugd2FzIG5vdCBtYWRlIGluIHNlY3JldCwgYnV0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1pZHN0IG9mIHRoZSBhZ29yYSB3aGVyZSBtYW55IHdlcmUgcHJlc2VudC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNhbGwsCiAgICAgICAgICAgICAgICAgICAgcGxlYXNlLCB0aGUgd2l0bmVzc2VzIHRvIHRoZXNlIGZhY3RzLjxxdW90ZSB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZmVsbG93IGlzCiAgICAgICAgICAgICAgICAgICAgc28gY3VubmluZywgYW5kIHNvIHJlYWR5IHRvIHByZXRlbmQgaWdub3JhbmNlIG9mIHdoYXQgaXMgcmlnaHQsIHRoYXQsIGFsdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgcHJlc3NpbmcgYSBzdWl0IGZvciBmYWxzZSB3aXRuZXNzLCBhbmQgYWx0aG91Z2ggeW91IGFyZSB0byBjYXN0IHlvdXIgdm90ZXMKICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgdGhpcywgYW5kIGhhdmUgc3dvcm4gc28gdG8gZG8sIGhlIHJlZnVzZWQgdGhlIHByb2ZmZXJlZCBleGFtaW5hdGlvbiBieQogICAgICAgICAgICAgICAgICAgIHRvcnR1cmUgaW4gcmVnYXJkIHRvIHRoZSB0ZXN0aW1vbnkg77yIdGhlIHBvaW50IHRvIHdoaWNoIGhlIHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGV2b3RlZCBoaXMgYXJndW1lbnTvvIksIGFuZCBkZWNsYXJlcyB0aGF0IGhlIHJlcXVpcmVzIHRoZSBzbGF2ZSB0byBiZQogICAgICAgICAgICAgICAgICAgIGdpdmVuIHVwIGZvciB0ZXN0aW5nIGluIHJlZ2FyZCB0byBvdGhlciBtYXR0ZXJzLiBJbiB0aGlzIGhlIGlzIGx5aW5nLiA8bWlsZXN0b25lIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPklzIGl0IG5vdCBpbmRlZWQgbW9uc3Ryb3VzIHRoYXQgaGUgc2hvdWxkIGNsYWltIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBpcyBiZWluZyBvdXRyYWdlb3VzbHkgdHJlYXRlZCBieSBteSByZWZ1c2FsIG9mIGhpcyBkZW1hbmQgdG8gaGF2ZSBkZWxpdmVyZWQKICAgICAgICAgICAgICAgICAgICB0byBoaW0gZm9yIHRvcnR1cmUgYSBmcmVlbWFuIO+8iGZvciBzdWNoIEkgc2hhbGwgY29uY2x1c2l2ZWx5IHByb3ZlCiAgICAgICAgICAgICAgICAgICAgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IHRvIGJl77yJLCBhbmQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbm90IGNvbnNpZGVyIHRoYXQgbXkgd2l0bmVzc2VzIGFyZSBiZWluZyBvdXRyYWdlb3VzbHkgdHJlYXRlZCwgd2hlbiBJCiAgICAgICAgICAgICAgICAgICAgb2ZmZXIgaGltIG9uZSB3aG8gaXMgYWRtaXR0ZWRseSBhIHNsYXZlLCB0byBiZSB0ZXN0ZWQgYnkgdG9ydHVyZSByZWdhcmRpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnksIGFuZCBoZSByZWZ1c2VzPyBGb3IgaGUgc3VyZWx5IGNhbm5vdCBtYWludGFpbiB0aGlzLCB0aGF0IGZvciBzb21lCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycywgd2hpY2ggaGUgaGltc2VsZiBkZXNpcmVzLCB0b3J0dXJlIGlzIGEgY2VydGFpbiB0ZXN0LCBhbmQgZm9yIG90aGVycwogICAgICAgICAgICAgICAgICAgIG5vdC4gPG1pbGVzdG9uZSBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZ1cnRoZXJtb3JlLCBtZW4gb2YgdGhlIGp1cnksIHRoZSBmaXJzdCB3aXRuZXNzIHRvIGdpdmUgdGhpcyB0ZXN0aW1vbnkgd2FzCiAgICAgICAgICAgICAgICAgICAgQWVzaXVzLCB0aGUgYnJvdGhlciBvZiB0aGUgcGxhaW50aWZmLiBIZSBub3cgZGVuaWVzIGl0LCBiZWNhdXNlIGhlIGhhcyBhbGxpZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGluIHRoZSBzdWl0IHdpdGggQXBob2J1czsgYnV0IGF0IHRoYXQgdGltZSBoZSBnYXZlIHRoaXMgdGVzdGltb255IGFsb25nCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgb3RoZXIgd2l0bmVzc2VzLCBmb3IgaGUgaGFkIG5vIGRlc2lyZSB0byBwZXJqdXJlIGhpbXNlbGYsIG9yIHRvIHN1ZmZlcgogICAgICAgICAgICAgICAgICAgIHRoZSBwZW5hbHR5IHdoaWNoIHdvdWxkIHN0cmFpZ2h0d2F5IGZvbGxvdy4gU3VyZWx5IG5vdywgaWYgSSBoYWQgYmVlbiBnZXR0aW5nIHVwCiAgICAgICAgICAgICAgICAgICAgZmFsc2UgdGVzdGltb255LCBJIHNob3VsZCBub3QgaGF2ZSBwdXQgdGhpcyBtYW4gaW4gbXkgbGlzdCBvZiB3aXRuZXNzZXMsIHNlZWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIG1vcmUgaW50aW1hdGUgd2l0aCBBcGhvYnVzIHRoYW4gd2l0aCBhbnlvbmUgZWxzZSBpbiB0aGUgd29ybGQsIGFuZAogICAgICAgICAgICAgICAgICAgIGtub3dpbmcgdGhhdCBoZSB3YXMgZ29pbmcgdG8gcGxlYWQgZm9yIGhpbSBpbiB0aGUgc3VpdCwgYW5kIHRoYXQgaGUgd2FzIGFuCiAgICAgICAgICAgICAgICAgICAgYWR2ZXJzYXJ5IG9mIG15IG93bi4gSXQgaXMgbm90IHJlYXNvbmFibGUgdGhhdCBvbmUgc2hvdWxkIGNhbGwgYXMgd2l0bmVzcyB0byBhCiAgICAgICAgICAgICAgICAgICAgZmFsc2Ugc3RhdGVtZW50IG9uZSB3aG8gaXMgYW4gb3Bwb25lbnQgb2YgaGlzIG93biwgYW5kIGEgYnJvdGhlciBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcnkuIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+SSBoYXZlIG1hbnkgd2l0bmVzc2VzIHRvIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMsIGFuZCBjaXJjdW1zdGFudGlhbCBwcm9vZnMgbm8gZmV3ZXIgaW4gbnVtYmVyIHRoYW4gdGhlIHdpdG5lc3Nlcy4gSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgcGxhY2UsIGlmIGhlIGRpZCBub3QgaW4gdmVyeSB0cnV0aCBnaXZlIHRoaXMgdGVzdGltb255LCBoZSB3b3VsZCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBkZW55aW5nIGl0IG5vdywgYnV0IHdvdWxkIGhhdmUgZG9uZSBzbyBhdCBvbmNlIGluIHRoZSBjb3VydHJvb20sIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbiB3YXMgcmVhZCwgZm9yIGl0IHdvdWxkIGhhdmUgYW5zd2VyZWQgaGlzIHB1cnBvc2UgYmV0dGVyIHRoZW4gdGhhbgogICAgICAgICAgICAgICAgICAgIG5vdy4gSW4gdGhlIHNlY29uZCBwbGFjZSBBZXNpdXMgd291bGQgbm90IGhhdmUga2VwdCBxdWlldCwgYnV0IHdvdWxkIGhhdmUgc3VlZAogICAgICAgICAgICAgICAgICAgIG1lIGZvciBkYW1hZ2VzLCBpZiB3aXRob3V0IGNhdXNlIEkgaGFkIG1hZGUgaGltIGxpYWJsZSB0byBhIGNoYXJnZSBvZiBiZWFyaW5nCiAgICAgICAgICAgICAgICAgICAgZmFsc2Ugd2l0bmVzcyBhZ2FpbnN0IGhpcyBicm90aGVyLCBhIGNoYXJnZSBvbiB3aGljaCBtZW4gcnVuIHRoZSByaXNrIGJvdGggb2YKICAgICAgICAgICAgICAgICAgICBkYW1hZ2VzIGluIG1vbmV5IGFuZCB0aGUgbG9zcyBvZiBjaXRpemVuc2hpcC4gPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgaW4gc2Vla2luZyB0byBicmluZyB0aGUgdHJ1dGggb2YgdGhlIG1hdHRlciB0byBsaWdodCwgaGUgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlbWFuZGVkIG9mIG1lIHRoZSBzbGF2ZSB3aG8gd3JvdGUgdGhlIGRlcG9zaXRpb25zLCBpbiBvcmRlciB0aGF0LCBpZiBJIHJlZnVzZWQKICAgICAgICAgICAgICAgICAgICB0byBnaXZlIGhpbSB1cCwgSSBtaWdodCBzZWVtIHRvIGhhdmUgbm8ganVzdCBncm91bmQgZm9yIG15IHN0YXRlbWVudHMuIEJ1dCwgYXMKICAgICAgICAgICAgICAgICAgICBpdCBpcywgc28gZmFyIGZyb20gZG9pbmcgYW55dGhpbmcgb2YgdGhlIHNvcnQsIGhlIHJlZnVzZWQgdG8gYWNjZXB0IHRoZSBzbGF2ZQogICAgICAgICAgICAgICAgICAgIGZvciB0b3J0dXJlLCB3aGVuIEksIG9uIGhpcyBkZW5pYWwgdGhhdCBoZSBoYWQgZ2l2ZW4gdGhlIGV2aWRlbmNlLCBvZmZlcmVkIGhpbS4KICAgICAgICAgICAgICAgICAgICBTbyBwbGFpbiBpcyBpdCB0aGF0IHJlZ2FyZGluZyB0aGlzIG1hdHRlciB0b28gYm90aCBoZSBhbmQgQXBob2J1cyBhcyB3ZWxsIHdlcmUKICAgICAgICAgICAgICAgICAgICBhbGlrZSB1bndpbGxpbmcgdG8gaGF2ZSByZWNvdXJzZSB0byB0b3J0dXJlLiA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBteSB3b3JkcyBhcmUgdHJ1ZSwgdGhhdCBhZnRlcgogICAgICAgICAgICAgICAgICAgIEFlc2l1cyBoYWQgZ2l2ZW4gaGlzIHRlc3RpbW9ueSB3aXRoIHRoZSBvdGhlciB3aXRuZXNzZXMsIGhlIG1hZGUgbm8gZGVuaWFsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3QsIHdoZW4sIHN0YW5kaW5nIGJ5IHRoZSBwbGFpbnRpZmYncyBzaWRlIGluIHRoZSBjb3VydHJvb20sIGhlIGhlYXJkIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gcmVhZCwgYW5kIHRoYXQsIHdoZW4gSSBvZmZlcmVkIHRoZSBzbGF2ZSB0byB0aGVtIHRvIGJlIHF1ZXN0aW9uZWQgYnkKICAgICAgICAgICAgICAgICAgICB0b3J0dXJlIHJlZ2FyZGluZyBhbGwgdGhlc2UgbWF0dGVycywgaGUgcmVmdXNlZCB0byBhY2NlcHQgdGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmZXLigJRyZWdhcmRpbmcgZWFjaCBvZiB0aGVzZSBwb2ludHMgc2V2ZXJhbGx5IEkgc2hhbGwgcHJvZHVjZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3Nlcy4gUGxlYXNlIGNhbGwgdGhlbSBoZXJlLjxxdW90ZSB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHdpc2ggbm93IHRvCiAgICAgICAgICAgICAgICAgICAgc2V0IGZvcnRoIHRvIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCB3aGF0IEkgY29uc2lkZXIgYSBzdHJvbmdlciBwcm9vZiB0aGFuIGFsbAogICAgICAgICAgICAgICAgICAgIHRob3NlIHRoYXQgaGF2ZSBiZWVuIG1lbnRpb25lZCwgdG8gc2hvdyB0aGF0IHRoZSBwbGFpbnRpZmYgZGlkIGdpdmUgdGhpcyBhbnN3ZXIuCiAgICAgICAgICAgICAgICAgICAgV2hlbiwgZGVzcGl0ZSB0aGUgYWRtaXNzaW9ucyB3aGljaCBoZSBpcyBwcm92ZWQgdG8gaGF2ZSBtYWRlLCBoZSBkZW1hbmRlZCBvZiBtZQogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiBmb3IgdG9ydHVyZSwgSSB3YXMgc28KICAgICAgICAgICAgICAgICAgICBlYWdlciB0byBzaG93IG9uIHRoZSBzcG90IHRoYXQgdGhpcywgdG9vLCB3YXMgYSBzdWJ0ZXJmdWdlIG9uIGhpcyBwYXJ0LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hhdCBkbyB5b3UgdGhpbmsgSSBkaWQ/IDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+SSBzdW1tb25lZCBBcGhvYnVzIHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBldmlkZW5jZSBhZ2FpbnN0IERlbW8sIGhpcyB1bmNsZSBhbmQgYSBwYXJ0bmVyIGluIGhpcyBjcmltZXMuIEkgd3JvdGUgb3V0CiAgICAgICAgICAgICAgICAgICAgdGhlIHRlc3RpbW9ueSB3aGljaCBoZSBub3cgYXR0YWNrcyBhcyBmYWxzZSBhbmQgb3JkZXJlZCBoaW0gdG8gbWFrZSBhIGRlcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICB0byBpdC4gQXQgZmlyc3QgaGUgYnJhemVubHkgcmVmdXNlZCwgYnV0IHdoZW4gdGhlIGFyYml0cmF0b3IgYmFkZSBoaW0gZGVwb3NlLCBvcgogICAgICAgICAgICAgICAgICAgIGRlbnkgdGhlIGZhY3QgdW5kZXIgb2F0aCwgaGUgZGVwb3NlZCwgc29yZWx5IGFnYWluc3QgaGlzIHdpbGwuIEFuZCB5ZXQgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuIHdhcyBhIHNsYXZlLCBhbmQgaGFkIG5vdCBiZWVuIGFscmVhZHkgYWRtaXR0ZWQgYnkgQXBob2J1cyBoZXJlIHRvIGJlIGZyZWUsCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpbiB0aGUgd29ybGQgaW5kdWNlZCBoaW0gdG8gbWFrZSB0aGlzIGRlcG9zaXRpb24/IFdoeSBkaWQgaGUgbm90IGRlbnkgaXQgb24KICAgICAgICAgICAgICAgICAgICBvYXRoLCBhbmQgc28gZ2V0IGZyZWUgb2YgdGhlIGFmZmFpcj8gPG1pbGVzdG9uZSBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5QcmF5IG5vdGUKICAgICAgICAgICAgICAgICAgICB0aGF0IGluIHJlZ2FyZCB0byB0aGlzIG1hdHRlciBhbHNvIEkgd2FzIHJlYWR5IHRvIGdpdmUgb3ZlciB0byBoaW0gZm9yIHRvcnR1cmUKICAgICAgICAgICAgICAgICAgICB0aGUgc2xhdmUgd2hvIGhhZCB3cml0dGVuIHRoZSBkZXBvc2l0aW9uLCB3aG8gd291bGQga25vdyBoaXMgb3duIGhhbmR3cml0aW5nLAogICAgICAgICAgICAgICAgICAgIGFuZCB3aG8gY2xlYXJseSByZW1lbWJlcmVkIHRoYXQgQXBob2J1cyBoYWQgbWFkZSB0aGUgZGVwb3NpdGlvbi4gSSB3YXMgcmVhZHkgdG8KICAgICAgICAgICAgICAgICAgICBkbyB0aGlzLCBub3QgZm9yIHdhbnQgb2Ygd2l0bmVzc2VzIHdobyB3ZXJlIHByZXNlbnQsIGZvciB0aGVyZSB3ZXJlIHNvbWU7IGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQgaGUgbWlnaHQgbm90IGFjY3VzZSB0aGVzZSBtZW4gb2YgZ2l2aW5nIGZhbHNlIHRlc3RpbW9ueSwgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0IG9mIHRoZSB0b3J0dXJlIG1pZ2h0IHN1cHBvcnQgdGhlbS4gWWV0IGl0IGlzIG5vdCBmYWlyIHRvIGNvbmRlbW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIG9uIGhpcyBhY2NvdW50LiBUaGV5IGFsb25lIG9mIG1lbiB3aG8gaGF2ZSBhcyB5ZXQgc3Rvb2QgdHJpYWwgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgeW91IGNhbiBzaG93IHRoYXQgdGhlIHBsYWludGlmZiBoaW1zZWxmIGhhcyBib3JuZSB3aXRuZXNzIHRvIHRoZWlyIHRlc3RpbW9ueSBhcwogICAgICAgICAgICAgICAgICAgIHRvIHRoZXNlIG1hdHRlcnMuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIHRha2UgdGhlIGNoYWxsZW5nZSBhbmQgdGhlIGRlcG9zaXRpb24uPHF1b3RlIHR5cGU9IkNoYWxsZW5nZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHF1b3RlIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnYWwgdGVzdHMgd2hpY2ggaGUgaGFzIHJlZnVzZWQsIGFuZCBzbyBudW1lcm91cyB0aGUgcHJvb2ZzIGJ5IHdoaWNoIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgc2hvd24gdG8gYmUgYWN0aW5nIHdpdGggbWFsaWNlIGFuZCBpbnNpbmNlcml0eTsgeWV0IGhlIGRlbWFuZHMgdGhhdCB5b3UgcHV0CiAgICAgICAgICAgICAgICAgICAgY3JlZGVuY2UgaW4gaGlzIG93biB3aXRuZXNzZXMsIGFuZCBoZSBzbGFuZGVycyBtaW5lLCBhbmQgZGVjbGFyZXMgdGhhdCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBpcyBmYWxzZS48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgd2lzaCBub3cgdG8gc3BlYWsgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyIG9uIHRoZSBiYXNpcyBvZiBwcm9iYWJpbGl0aWVzLiBJIGFtIGNlcnRhaW4gdGhhdCB5b3Ugd291bGQgYWxsIGFncmVlIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gZ2l2ZSBmYWxzZSB0ZXN0aW1vbnkgYXJlIGxlZCB0byBkbyBzbyBieSBicmliZXMgdGhyb3VnaCBzdHJlc3Mgb2YKICAgICAgICAgICAgICAgICAgICBwb3ZlcnR5LCBvciBieSBmcmllbmRzaGlwLCBvciBlbHNlIGJ5IGVubWl0eSB0b3dhcmQgdGhlIG9wcG9zaXRlIHBhcnR5IGluIHRoZQogICAgICAgICAgICAgICAgICAgIHN1aXQuIDxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IG5vIG9uZSBvZiB0aGVzZSByZWFzb25zIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBsZWQgdGhlIG1lbiB0byB0ZXN0aWZ5IGluIG15IGZhdm9yLiBOb3QgZnJpZW5kc2hpcDsgaG93IGNvdWxkIHRoYXQgYmUsIHNlZWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBhcmUgbm90IGVuZ2FnZWQgaW4gdGhlIHNhbWUgcHVyc3VpdHMsIG5vciBhcmUgdGhleSBvZiBsaWtlIGFnZSwgSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbm90IHNheSB3aXRoIG1lLCBidXQgd2l0aCBvbmUgYW5vdGhlcj8gTm90IGVubWl0eSBhZ2FpbnN0IG15IGFkdmVyc2FyeSwgdGhhdCBpcwogICAgICAgICAgICAgICAgICAgIHBsYWluOyBmb3Igb25lIG9mIHRoZW0gaXMgaGlzIGJyb3RoZXIgYW5kIHBsZWFkcyBvbiBoaXMgc2lkZTsgUGhhbnVzIGlzIGEgY2xvc2UKICAgICAgICAgICAgICAgICAgICBmcmllbmQgYW5kIGEgbWVtYmVyIG9mIHRoZSBzYW1lIHRyaWJlOyBhbmQgUGhpbGlwIGlzIG5laXRoZXIgZnJpZW5kIG5vciBlbmVteSwKICAgICAgICAgICAgICAgICAgICBzbyB0aGF0IHRoaXMgbW90aXZlLCB0b28sIGNhbm5vdCBiZSBqdXN0bHkgY2hhcmdlZCBhZ2FpbnN0IHRoZW0uIDxtaWxlc3RvbmUgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIG5vIG9uZSBjb3VsZCBzYXkgdGhhdCBwb3ZlcnR5IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBncm91bmQsIGZvciB0aGV5IGFsbCBwb3NzZXNzIG1lYW5zIHNvIGFtcGxlIHRoYXQgdGhleSB3aWxsaW5nbHkgYXNzdW1lIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cGVuc2Ugb2YgcHVibGljIHNlcnZpY2VzLCBhbmQgZGlzY2hhcmdlIHdoYXRldmVyIGR1dGllcyBhcmUgbGFpZCB1cG9uIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgQmVzaWRlcyBhbGwgdGhpcywgdGhleSBhcmUgd2VsbCBrbm93biB0byB5b3UsIGFuZCB5b3Uga25vdyBub3RoaW5nIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZGlzY3JlZGl0OyBmb3IgdGhleSBhcmUgd29ydGh5IGNpdGl6ZW5zLiBZZXQsIGlmIHRoZXkgYXJlIG5vdCBwb29yLCBub3IgZW5lbWllcwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBwbGFpbnRpZmYsIG5vciBmcmllbmRzIG9mIG1pbmUsIGhvdyBjYW4gaXQgYmUgcmlnaHQgdG8gc3VzcGVjdCB0aGVtIG9mCiAgICAgICAgICAgICAgICAgICAgYmVhcmluZyBmYWxzZSB3aXRuZXNzPyBJIGNlcnRhaW5seSBkbyBub3Qga25vdy4gPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk15IG9wcG9uZW50IHdhcyBhd2FyZSBvZiBhbGwgdGhpcywgYW5kIGtuZXcKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgdGhhbiBhbnlib2R5IGVsc2UgdGhhdCB0aGVpciB0ZXN0aW1vbnkgd2FzIHRydWUsIGJ1dCBub25ldGhlbGVzcyBoZQogICAgICAgICAgICAgICAgICAgIGJyaW5ncyBmb3J3YXJkIGEgbWFsaWNpb3VzIGNoYXJnZSBhZ2FpbnN0IHRoZW0sIGFuZCBub3Qgb25seSBkZWNsYXJlcyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBtYWtlIHRoZSBzdGF0ZW1lbnQgd2hpY2ggSSBoYXZlIHByb3ZlZCBpbiB0aGUgbW9zdCBjb25jbHVzaXZlIG1hbm5lcgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgZGlkIG1ha2UsIGJ1dCBldmVuIGFzc2VydHMgdGhhdCB0aGUgbWFuLCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGlzIGluIGZhY3QgYSBzbGF2ZS4gSSB3aXNoIGluIGEgdmVyeSBmZXcgd29yZHMgdG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IGluIHRoaXMsIHRvbywgaGUgaXMgbHlpbmcuIEkgd2FzIHJlYWR5LCBtZW4gb2YgdGhlIGp1cnksIHJlZ2FyZGluZyB0aGlzCiAgICAgICAgICAgICAgICAgICAgcG9pbnQgYWxzbyB0byBnaXZlIG92ZXIgdG8gaGltIHRvIGJlIHRlc3RlZCBieSB0b3J0dXJlIG15IGZlbWFsZSBzbGF2ZXMsIHdobwogICAgICAgICAgICAgICAgICAgIHJlbWVtYmVyIHRoYXQgbXkgZmF0aGVyIG9uIGhpcyBkZWF0aC1iZWQgc2V0IHRoaXMgbWFuIGZyZWUuIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcyB0aGlzLCBteSBtb3RoZXIgd2FzIHJlYWR5IHRvIGNhbGwgdG8gaGVyIHNpZGUgbXkKICAgICAgICAgICAgICAgICAgICBzaXN0ZXIgYW5kIG15c2VsZiwgYW5kIHN3ZWFyLCB3aXRoIGltcHJlY2F0aW9ucyBvbiBvdXIgaGVhZHMgaWYgc2hlIHNwb2tlCiAgICAgICAgICAgICAgICAgICAgZmFsc2VseeKAlHdlIHdlcmUgaGVyIG9ubHkgY2hpbGRyZW4sIGFuZCBpdCB3YXMgZm9yIG91ciBzYWtlcyB0aGF0IHNoZQogICAgICAgICAgICAgICAgICAgIGdhdmUgaGVyc2VsZiB1cCB0byBhIGxpZmUgb2Ygd2lkb3dob29k4oCUdGhhdCBteSBmYXRoZXIgd2hlbiBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBhYm91dCB0byBkaWUgaGFkIHNldCB0aGlzIG1hbiBmcmVlLCBhbmQgdGhhdCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gd2FzIHJlZ2FyZGVkIGJ5IHVzIGFzIGZyZWUgdGhlcmVhZnRlci4gTGV0IG5vIG9uZSBvZiB5b3UKICAgICAgICAgICAgICAgICAgICBhc3N1bWUgdGhhdCBzaGUgd291bGQgaGF2ZSBiZWVuIHdpbGxpbmcgdG8gbWFrZSB0aGlzIG9hdGggd2l0aCBpbXByZWNhdGlvbnMgb24KICAgICAgICAgICAgICAgICAgICBvdXIgaGVhZHMgaWYgc2hlIGhhZCBub3Qga25vd24gd2VsbCB0aGF0IHdoYXQgc2hlIHdhcyB0byBzd2VhciB0byB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZS48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNvbWUgbm93LCB0byBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgdHJ1dGggYW5kIHRoYXQgd2Ugd2VyZSByZWFkeSB0byBkbyB0aGVzZSB0aGluZ3MsIGNhbGwgdGhlIHdpdG5lc3NlcwogICAgICAgICAgICAgICAgICAgICAgICB0aGVyZXRvLjxxdW90ZSB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5TbyBtYW55IHdlcmUKICAgICAgICAgICAgICAgICAgICB0aGUganVzdCBhcmd1bWVudHMgd2UgaGFkIHRvIHVyZ2UsIGFuZCBzbyByZWFkeSB3ZXJlIHdlIHRvIGhhdmUgcmVjb3Vyc2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBpbmZhbGxpYmxlIHRlc3RzIHJlZ2FyZGluZyB0aGUgdGVzdGltb255IGdpdmVuOyBhbmQgeWV0IHRoZSBwbGFpbnRpZmYKICAgICAgICAgICAgICAgICAgICBldmFkZXMgYWxsIHRoZXNlLCBhbmQgZmFuY2llcyB0aGF0IGJ5IHNsYW5kZXJpbmcgbWUgcmVnYXJkaW5nIHRoZSB0cmlhbCB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhcyBhbHJlYWR5IHRha2VuIHBsYWNlLCBhbmQgYnJpbmdpbmcgYWNjdXNhdGlvbnMgYWdhaW5zdCBtZSwgaGUgY2FuIGluZHVjZSB5b3UKICAgICAgICAgICAgICAgICAgICB0byBjb252aWN0IHRoZSB3aXRuZXNzLOKAlGEgcGllY2Ugb2YgdHJpY2tlcnkgdGhlIG1vc3QgdW5mYWlyIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IHJhcGFjaW91cyBpbWFnaW5hYmxlLiA8bWlsZXN0b25lIG49IjI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYXMgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIHN1Ym9ybmVkIG1lbiB0byBiZWFyIGZhbHNlIHdpdG5lc3MgYWJvdXQgdGhlc2UgbWF0dGVycywgaGF2aW5nIGFzIGNvLXdvcmtlcnMgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlci1pbi1sYXcgT25ldG9yLCBhbmQgVGltb2NyYXRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGltb2NyYXRlczogcG9zc2libHkgdGhlIHNhbWUgYXMgdGhlIFRpbW9jcmF0ZXMgYWdhaW5zdCB3aG9tIERlbW9zdGhlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJlZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNCIgdmFsaWQ9InllcyI+RGVtLiAyNDwvYmlibD48L25vdGU+OyB3ZSBoYWQgbm8gZm9yZXdhcm5pbmcgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzLCBhbmQgc3VwcG9zZWQgdGhhdCB0aGUgY29udGVzdCB3b3VsZCBiZSByZWdhcmRpbmcgdGhlIGRlcG9zaXRpb24gYWxvbmUsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSBoYXZlIG5vdCBjb21lIHByZXBhcmVkIHdpdGggd2l0bmVzc2VzIHJlZ2FyZGluZyB0aGUgZ3VhcmRpYW5zaGlwCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMuIE5ldmVydGhlbGVzcywgZGVzcGl0ZSB0aGUgZmVsbG93J3MgdHJpY2tlcnksIEkgdGhpbmsgdGhhdCwgc2ltcGx5IGJ5CiAgICAgICAgICAgICAgICAgICAgcmVjaXRpbmcgdGhlIGZhY3RzLCBJIHNoYWxsIGVhc2lseSBjb252aW5jZSB5b3UgdGhhdCBubyBtYW4gd2FzIGV2ZXIgbW9yZSBqdXN0bHkKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgdGhhbiBoZS4gPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm90IGJlY2F1c2UgSQogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgdG8gYWxsb3cgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IHRvIGJlIHB1dCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSB0b3J0dXJlLCBub3IgYmVjYXVzZSBoZSBoaW1zZWxmIGFkbWl0dGVkIHRoZSBtYW4gdG8gYmUgYSBmcmVlbWFuLCBub3IgeWV0CiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGVzZSB3aXRuZXNzZXMgZ2F2ZSB0aGVpciB0ZXN0aW1vbnk7IGJ1dCBiZWNhdXNlIGhlIHdhcyBwcm92ZWQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHRha2VuIHBvc3Nlc3Npb24gb2YgbGFyZ2Ugc3VtcyBiZWxvbmdpbmcgdG8gbWUsIGFuZCBiZWNhdXNlIGhlIGRpZCBub3QgbGV0IHRoZQogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSwgdGhvdWdoIHRoZSBsYXdzIHNvIG9yZGVyZWQgYW5kIG15IGZhdGhlciBoYWQgc28gZGlyZWN0ZWQgaW4gaGlzIHdpbGwsIGFzCiAgICAgICAgICAgICAgICAgICAgSSBzaGFsbCBwbGFpbmx5IHNob3cgeW91LiBGb3IgdGhlc2Ugd2VyZSB0aGluZ3MgdGhhdCBhbnlvbmUgY291bGQgc2VlLCB0aGUgbGF3cywKICAgICAgICAgICAgICAgICAgICBuYW1lbHksIGFuZCB0aGUgYW1vdW50IG9mIG15IHByb3BlcnR5IHdoaWNoIHRoZXNlIG1lbiBoYWQgdGFrZW4gYXMgcGx1bmRlcjsgYnV0CiAgICAgICAgICAgICAgICAgICAgYXMgZm9yIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiwgbm9ib2R5IGtuZXcgZXZlbiB3aG8KICAgICAgICAgICAgICAgICAgICBoZSB3YXMuIFlvdSB3aWxsIHNlZSBmcm9tIHRoZSBjaGFyZ2VzIGJyb3VnaHQgYWdhaW5zdCBBcGhvYnVzIHRoYXQgdGhlc2UgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgYXJlIHNvLiA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgd2hlbiBJIGluc3RpdHV0ZWQgbXkgc3VpdCBhZ2FpbnN0IGhpbSBjb25jZXJuaW5nIGhpcwogICAgICAgICAgICAgICAgICAgIGd1YXJkaWFuc2hpcCwgSSBkaWQgbm90IGZpeCB0aGUgZGFtYWdlcyBhdCBhIGx1bXAgc3VtLCBhcyBvbmUgYnJpbmdpbmcgZm9yd2FyZCBhCiAgICAgICAgICAgICAgICAgICAgYmFzZWxlc3MgY2hhcmdlIG91dCBvZiBtYWxpY2Ugd291bGQgaGF2ZSBkb25lLCBidXQgc3BlY2lmaWVkIGVhY2ggaXRlbSwgc3RhdGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBzb3VyY2Ugb2YgZWFjaCwgdGhlIHByZWNpc2UgYW1vdW50LCBhbmQgdGhlIHBlcnNvbiBmcm9tIHdob20gaXQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICByZWNlaXZlZC4gSW4gbm8gY2FzZSBkaWQgSSBhZGQgbWVudGlvbiBvZiA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gYXMgaGF2aW5nIGtub3dsZWRnZSBvZiBhbnkgb2YgdGhlc2UgbWF0dGVycy4gPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5IZW5jZSB0aGlzIGlzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNvbXBsYWludDoKICAgICAgICAgICAgICAgICAgICDigJxEZW1vc3RoZW5lcyBtYWtlcyB0aGUgZm9sbG93aW5nIGNoYXJnZXMgYWdhaW5zdCBBcGhvYnVzLiBBcGhvYnVzIGhhcwogICAgICAgICAgICAgICAgICAgIGluIGhpcyBwb3NzZXNzaW9uIG1vbmV5cyBvZiBtaW5lLCByZWNlaXZlZCBieSBoaW0gaW4gaGlzIGNhcGFjaXR5IGFzIGd1YXJkaWFuLAogICAgICAgICAgICAgICAgICAgIGFzIGZvbGxvd3M6IGVpZ2h0eSBtaW5hZSwgd2hpY2ggaGUgcmVjZWl2ZWQgYXMgdGhlIG1hcnJpYWdlLXBvcnRpb24gb2YgbXkgbW90aGVyCiAgICAgICAgICAgICAgICAgICAgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiBteSBmYXRoZXIncyB3aWxsLuKAnSBUaGlzIGlzIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzdW1zIG9mIHdoaWNoIEkgY2xhaW0gdG8gaGF2ZSBiZWVuIGRlZnJhdWRlZC4gTm93IHdoYXQgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uIG9mIHRoZSB3aXRuZXNzZXM/IOKAnFRoYXQgdGhleSB3ZXJlIHByZXNlbnQgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3IsIE5vdGhhcmNodXMsIHdoZW4gQXBob2J1cyBhZG1pdHRlZCB0aGF0IDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiB3YXMgYSBmcmVlbWFuLCBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIGVtYW5jaXBhdGVkIGJ5IHRoZSBmYXRoZXIgb2YgRGVtb3N0aGVuZXMu4oCdIDxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2lkZXIgbm93IGZvciB5b3Vyc2VsdmVzIHdoZXRoZXIgaW4geW91ciBqdWRnZW1lbnQgdGhlcmUKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBhbiBvcmF0b3IsIG9yIHNvcGhpc3Qgb3IgbWFnaWNpYW4gc28gd29uZHJvdXNseSBjbGV2ZXIgaW4gc3BlYWtpbmcgYXMKICAgICAgICAgICAgICAgICAgICBieSBtZWFucyBvZiB0aGlzIHRlc3RpbW9ueSB0byBjb252aW5jZSBhbnkgbWFuIG9uIGVhcnRoIHRoYXQgQXBob2J1cyBpcyBpbgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb24gb2YgdGhlIG1hcnJpYWdlLXBvcnRpb24gb2YgdGhlIHNwZWFrZXIncyBtb3RoZXIuIFdoYXQgaW4gaGVhdmVuJ3MKICAgICAgICAgICAgICAgICAgICBuYW1lIHdvdWxkIGhlIHNheT8g4oCcQXBob2J1cyBoYXMgYWRtaXR0ZWQgdGhhdCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gaXMgYSBmcmVlbWFuLuKAnSBBbmQgd2h5IG9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhY2NvdW50IGlzIGhlIGFueSB0aGUgbW9yZSBpbiBwb3NzZXNzaW9uIG9mIHRoZSBtYXJyaWFnZS1wb3J0aW9uPyBUaGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgd291bGQgc3VyZWx5IG5vdCBzZWVtIHRvIHByb3ZlIGl0LiA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBob3cgd2FzIGl0IHByb3ZlZD8gSW4gdGhlIGZpcnN0IHBsYWNlLCBUaGVyaXBwaWRlcywgaGlzIGNvLXRydXN0ZWUsCiAgICAgICAgICAgICAgICAgICAgdGVzdGlmaWVkIHRoYXQgaGUgaGFkIGdpdmVuIGhpbSB0aGUgbW9uZXkuIFNlY29uZGx5LCBEZW1vLCBoaXMgdW5jbGUsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXN0IG9mIHRoZSB3aXRuZXNzZXMgd2hvIHdlcmUgcHJlc2VudCwgdGVzdGlmaWVkIHRoYXQgaGUgYWdyZWVkIHRvIHN1cHBseSBteQogICAgICAgICAgICAgICAgICAgIG1vdGhlciB3aXRoIG1haW50ZW5hbmNlLCBhcyBiZWluZyBpbiBwb3NzZXNzaW9uIG9mIGhlciBwb3J0aW9uLiBBZ2FpbnN0IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIGhlIGhhcyBsb2RnZWQgbm8gY2hhcmdlcywgcGxhaW5seSBiZWNhdXNlIGhlIGtuZXcgdGhhdCB0aGVpciB0ZXN0aW1vbnkgd2FzCiAgICAgICAgICAgICAgICAgICAgdHJ1ZS4gQmVzaWRlcyB0aGlzLCBteSBtb3RoZXIgd2FzIHJlYWR5IHRvIGNhbGwgdG8gaGVyIHNpZGUgbXkgc2lzdGVyIGFuZAogICAgICAgICAgICAgICAgICAgIG15c2VsZiwgYW5kIHN3ZWFyIHdpdGggaW1wcmVjYXRpb25zIG9uIG91ciBoZWFkcywgaWYgc2hlIHNwb2tlIGZhbHNlbHksIHRoYXQKICAgICAgICAgICAgICAgICAgICBBcGhvYnVzIGhhZCByZWNlaXZlZCBoZXIgbWFycmlhZ2UtcG9ydGlvbiBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zIG9mIG15IGZhdGhlcidzCiAgICAgICAgICAgICAgICAgICAgd2lsbC4gPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5TaGFsbCB3ZSwgdGhlbiwgc2F5LCBvciBzaGFsbCB3ZSBub3QsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoYXMgcG9zc2Vzc2lvbiBvZiB0aGVzZSBlaWdodHkgbWluYWU/IEFuZCB3YXMgaXQgb24gdGhlIGV2aWRlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd2l0bmVzc2VzIGhlcmUgb3Igb2YgdGhvc2UgdGhhdCBoZSB3YXMgY29udmljdGVkPyBJIHRoaW5rIGl0IHdhcyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBvZiB0cnV0aC4gSGUgaGFzIGVuam95ZWQgdGhlIGludGVyZXN0IG9uIHRoaXMgc3VtIGZvciB0ZW4geWVhcnMsIGFuZAogICAgICAgICAgICAgICAgICAgIGV2ZW4gdGhvdWdoIGp1ZGdlbWVudCBoYXMgYmVlbiBnaXZlbiBhZ2FpbnN0IGhpbSwgY2Fubm90IGJyaW5nIGhpbXNlbGYgdG8gcGF5IGl0CiAgICAgICAgICAgICAgICAgICAgYmFjay4gRGVzcGl0ZSB0aGlzLCBoZSBkZWNsYXJlcyB0aGF0IGhlIGhhcyBiZWVuIG91dHJhZ2VvdXNseSB0cmVhdGVkIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgbG9zdCB0aGUgc3VpdCBieSByZWFzb24gb2YgdGhlc2Ugd2l0bmVzc2VzLiBZZXQgbm90IG9uZSBvZiB0aGVtIHRlc3RpZmllZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFkIHJlY2VpdmVkIHRoZSBtYXJyaWFnZS1wb3J0aW9uLiA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQgdG8gdGhlIG1hcml0aW1lIGxvYW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5XaXRoIHJlZmVyZW5jZSB0byB0aGVzZSBpdGVtcyBzZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjciIHZhbGlkPSJ5ZXMiPkRlbS4gMjc8L2JpYmw+PC9ub3RlPiB0aGUgc29mYS1tYWtlcnMsIGFuZCB0aGUgaXJvbiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgaXZvcnkgdGhhdCB3ZXJlIGxlZnQgbWUsIGFuZCBteSBzaXN0ZXIncyBtYXJyaWFnZS1wb3J0aW9uLCBhdCB0aGUgcHVybG9pbmluZyBvZgogICAgICAgICAgICAgICAgICAgIHdoaWNoIEFwaG9idXMgY29ubml2ZWQgaW4gb3JkZXIgdG8gc2VjdXJlIGZvciBoaW1zZWxmIHRoZSByaWdodCB0byB0YWtlIHdoYXRldmVyCiAgICAgICAgICAgICAgICAgICAgaGUgcGxlYXNlZCBvZiBteSBnb29kcywgbGlzdGVuLCBhbmQgc2VlIGhvdyBqdXN0IHdhcyB0aGUgdmVyZGljdCBnaXZlbiBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgaGltLCBhbmQgaG93IGFic3VyZCBpdCB3b3VsZCBoYXZlIGJlZW4gdG8gZXhhbWluZSA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gYnkgdG9ydHVyZSByZWdhcmRpbmcgYW55IG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycy4gPG1pbGVzdG9uZSBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZvciBhcwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZHMgdGhlIHB1cmxvaW5pbmcgb2YgZnVuZHMgYXQgd2hpY2ggeW91IGNvbm5pdmVkIHRoZXJlIGlzIGEgbGF3IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2x5IGRlY2xhcmVzIHRoYXQgeW91IGFyZSByZXNwb25zaWJsZSBmb3IgdGhlbSBleGFjdGx5IGFzIGlmIHlvdSBoYWQgdGhlbQogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgb3duIHBvc3Nlc3Npb24uIFNvIHdoYXQgaGFzIHRoZSBsYXcgdG8gZG8gd2l0aCB0aGUgdGVzdGluZyBvZiBhIHNsYXZlIGJ5CiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZT8gQnV0IGluIHRoZSBtYXR0ZXIgb2YgdGhlIG1hcml0aW1lIGxvYW4geW91IG1hZGUgY29tbW9uIGNhdXNlIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgWHV0aHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gdGhlIGludmVudG9yeSBvZiB0aGUgZXN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIgb2YgRGVtb3N0aGVuZXMsIGdpdmVuIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3IiB2YWxpZD0ieWVzIj5EZW0uIDI3PC9iaWJsPiwgdGhlcmUKICAgICAgICAgICAgICAgICAgICAgICAgaXMgbWVudGlvbiBvZiBhIGJvdHRvbXJ5IGxvYW4gdG8gWHV0aHVzLCBhbW91bnRpbmcgdG8gc2V2ZW50eSBtaW5hZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgZGl2aWRlZCB0aGUgbW9uZXkgd2l0aCBoaW0sIGFuZCBkZXN0cm95ZWQgdGhlIGNvbnRyYWN0LCBhbmQgbm93IHRoYXQgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZCBldmVyeXRoaW5nIHRvIHN1aXQgeW91ciB3aXNoLCBhbmQgaGF2ZSBkb25lIGF3YXkgd2l0aCB0aGUgZG9jdW1lbnRhcnkKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSDvvIhhcyBEZW1vIHRlc3RpZmllZCBhZ2FpbnN0IHlvde+8iSwgeW91IGhhdmUgcmVjb3Vyc2UgdG8KICAgICAgICAgICAgICAgICAgICB0cmlja2VyeSwgYW5kIGVuZGVhdm9yIHRvIG1pc2xlYWQgdGhlc2UgZ2VudGxlbWVuLiA8bWlsZXN0b25lIG49IjM3IiB1bml0PSJzZWN0aW9uIiAvPlJlZ2FyZGluZyB0aGUgc29mYS1tYWtlcnMsIGlmIHlvdSB0b29rIG1vbmV5LCBhbmQgbWFkZSBsYXJnZQogICAgICAgICAgICAgICAgICAgIHByb2ZpdHMgZm9yIHlvdXJzZWxmIGJ5IG1ha2luZyBsb2FucyBvbiBzZWN1cml0eSB0aGF0IHdhcyBtaW5l4oCUeW91LAogICAgICAgICAgICAgICAgICAgIHdobyBzaG91bGQgcmF0aGVyIGhhdmUgcHJldmVudGVkIG90aGVycyBmcm9tIGRvaW5nIHNv4oCUYW5kIGZpbmFsbHkgbWFkZQogICAgICAgICAgICAgICAgICAgIGF3YXkgd2l0aCB0aGUgc2xhdmVzIGFsdG9nZXRoZXIsIHdoYXQsIHByYXksIGNhbiB0aGUgd2l0bmVzc2VzIGRvIGluIHlvdXIKICAgICAgICAgICAgICAgICAgICBiZWhhbGY/IFRoZXNlIG1lbiBhdCBhbnkgcmF0ZSBoYXZlIG5vdCB0ZXN0aWZpZWQgdGhhdCB5b3UgYWRtaXR0ZWQgbGVuZGluZyBtb25leQogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBzZWN1cml0eSBvZiBteSBzbGF2ZXMsIGFuZCB0aGF0IHlvdSBhcHByb3ByaWF0ZWQgdGhlIHNsYXZlcyB0byB5b3Vyc2VsZi4KICAgICAgICAgICAgICAgICAgICBPbiB0aGUgY29udHJhcnksIGl0IHdhcyB5b3Ugd2hvIGFja25vd2xlZGdlZCB0aGlzIGluIHlvdXIgYWNjb3VudCwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyB0ZXN0aWZpZWQgdG8gdGhlIGZhY3QgYWdhaW5zdCB5b3UuIDxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgbG9vayB5b3UsIGFzIHRvIHRoZSBpdm9yeSBhbmQgaXJvbiwgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhpcyB0byBzYXk6IGFsbCB0aGUgc2xhdmVzIG9mIHRoZSBob3VzZWhvbGQga25vdyB0aGF0IHRoZSBwbGFpbnRpZmYgdXNlZAogICAgICAgICAgICAgICAgICAgIHRvIHNlbGwgdGhlc2UgYXJ0aWNsZXMuIEkgYW0gcmVhZHkgbm93LCBhcyBJIHdhcyB0aGVuLCB0byBnaXZlIG92ZXIgdG8gaGltIGFueQogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGVzZSBzbGF2ZXMgd2hvbSBoZSBtYXkgY2hvb3NlIHRvIGJlIGV4YW1pbmVkIGJ5IHRvcnR1cmUuIElmIHRoZW4sIGhlCiAgICAgICAgICAgICAgICAgICAgYWxsZWdlcyB0aGF0IEkgcmVmdXNlIHRvIHN1cnJlbmRlciB0aGUgbWFuIHdobyBoYXMga25vd2xlZGdlIG9mIHRoZSBmYWN0cywgYW5kCiAgICAgICAgICAgICAgICAgICAgb2ZmZXIgaGltIG90aGVycyB3aG8gaGF2ZSBubyBzdWNoIGtub3dsZWRnZSwgaGUgd2lsbCBidXQgc2hvdyB0aGF0IGhlIG91Z2h0IGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBtb3JlIHRvIGhhdmUgYWNjZXB0ZWQgbXkgb2ZmZXIuIEZvciBpZiB0aG9zZSB3aG9tIEkgb2ZmZXJlZCB0byBoaW0gYXMgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAga25vd2xlZGdlIG9mIHRoZSBmYWN0cywgZGVjbGFyZWQgdGhhdCBoZSBoYWQgbm9uZSBvZiB0aGVzZSBhcnRpY2xlcyBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uLCBoZSB3b3VsZCBvZiBjb3Vyc2UgaGF2ZSBiZWVuIGFjcXVpdHRlZCBvZiB0aGUgY2hhcmdlLiA8bWlsZXN0b25lIG49IjM5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3RoaW5nIG9mIHRoZSBzb3J0IGlzIHRoZSB0cnV0aC4gSXQgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJvdmVkIHBhc3QgYWxsIHF1ZXN0aW9uIHRoYXQgaGUgaGFkIHNvbGQgdGhlIGdvb2RzLCBhbmQgYXBwcm9wcmlhdGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHByb2ZpdHMuIFRoZXJlZm9yZSwgaGUgcGFzc2VkIG92ZXIgdGhvc2Ugd2hvIHdlcmUgYWRtaXR0ZWRseSBzbGF2ZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGRlbWFuZGVkIHRoYXQgYSBmcmVlbWFuIGJlIGV4YW1pbmVkIGJ5IHRvcnR1cmUsIHdob20gaXQgd291bGQgaGF2ZSBiZWVuIGEgY3JpbWUKICAgICAgICAgICAgICAgICAgICBmb3IgbWUgdG8gc3VycmVuZGVyOyBmb3IgaXQgd2FzIG5vdCBoaXMgcHVycG9zZSB0aGF0IGhlIHNob3VsZCBzaWZ0IG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIsIGJ1dCB0aGF0IGhlIG1pZ2h0IG1ha2UgYSBzcGVjaW91cyBhcmd1bWVudCBvdXQgb2YgdGhlIGZhY3QgdGhhdCBoaXMKICAgICAgICAgICAgICAgICAgICBkZW1hbmQgd2FzIHJlZnVzZWQuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWdhcmRpbmcsIHRoZXJlZm9yZSwgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgZmFjdHMsIGZpcnN0IHRoZSBtYXJyaWFnZS1wb3J0aW9uLCB0aGVuIGhpcyBjb25uaXZhbmNlIHdpdGggZnJhdWQsIHRoZW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHJlc3QsIHRoZXJlIHNoYWxsIGJlIHJlYWQgdG8geW91IHRoZSBsYXdzIGFuZCB0aGUgZGVwb3NpdGlvbnMsIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGhhdmUgZnVsbCBrbm93bGVkZ2UuPHF1b3RlIHR5cGU9Ikxhd3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+TGF3czwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48cXVvdGUgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdCBvbmx5IGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgZmFjdHMgYWxyZWFkeSBhZGR1Y2VkIGNhbiB5b3Ugc2VlIHRoYXQgQXBob2J1cyB3YXMgbm90IGluIGFueSByZXNwZWN0CiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgcHJlanVkaWNlZCBieSBteSByZWZ1c2FsIHRvIGdpdmUgdGhlIG1hbiB1cCBmb3IgdG9ydHVyZSwgYnV0IGFsc28gZnJvbQogICAgICAgICAgICAgICAgICAgIGEgY29uc2lkZXJhdGlvbiBvZiB0aGUgbWF0dGVyIGl0c2VsZi4gTGV0IHVzIHN1cHBvc2UgdGhhdCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gaXMgYmVpbmcgcmFja2VkIHVwb24gdGhlIHdoZWVsLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciB3aGF0IEFwaG9idXMgd291bGQgbW9zdCB3aXNoIGhpbSB0byBzYXkuIFdvdWxkIGl0IG5vdCBiZSB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBhd2FyZSB0aGF0IHRoZSBwbGFpbnRpZmYgaGFkIGFueSBvZiB0aGUgcHJvcGVydHkgaW4gaGlzIHBvc3Nlc3Npb24/IFdlbGwsCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZSBoZSBzYXlzIHNvLiBEb2VzIHRoYXQgcHJvdmUgdGhhdCB0aGUgcGxhaW50aWZmIGhhcyBub25lPyBGYXIgZnJvbSBpdDsKICAgICAgICAgICAgICAgICAgICBmb3IgSSBwcm9kdWNlZCBtZW4gd2hvIGtuZXcsIG1lbiB3aG8gcGFpZCBoaW0gdGhlIG1vbmV5LCBtZW4gd2hvIHdlcmUgcHJlc2VudCBpbgogICAgICAgICAgICAgICAgICAgIHBlcnNvbiwgYXMgd2l0bmVzc2VzLiBJdCBpcyBjb252aW5jaW5nIHByb29mLCBub3QgaWYgb25lIGlzIGlnbm9yYW50IHRoYXQgYSBtYW4KICAgICAgICAgICAgICAgICAgICBoYXMgc29tZXRoaW5nIGluIGhpcyBwb3NzZXNzaW9uIO+8iGZvciB0aGVyZSBtaWdodCBiZSBtYW55CiAgICAgICAgICAgICAgICAgICAgc3VjaO+8iSwgYnV0IGlmIG9uZSBrbm93cyB0aGF0IGhlIGhhcyBpdC4gPG1pbGVzdG9uZSBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb2YgdGhlIG1hbnkgd2l0bmVzc2VzIHdobyB0ZXN0aWZpZWQgYWdhaW5zdCB5b3UsIHdoYXQKICAgICAgICAgICAgICAgICAgICBvbmUgaGF2ZSB5b3Ugc3VlZCBmb3IgZmFsc2UgdGVzdGltb255PyBUZWxsIHVzLiBCdXQgeW91IGNhbm5vdC4gWWV0IHlvdSBwbGFpbmx5CiAgICAgICAgICAgICAgICAgICAgY29udmljdCB5b3Vyc2VsZiwgYW5kIHByb3ZlIHRoYXQgeW91IGxpZSB3aGVuIHlvdSBkZWNsYXJlIHRoYXQgeW91IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VvdXNseSB0cmVhdGVkLCBhbmQgdGhhdCB5b3UgbG9zdCB0aGUgc3VpdCB1bmp1c3RseSwgYmVjYXVzZSB0aGlzIG1hbiB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgZ2l2ZW4gdXAgdG8geW914oCUeW91IHdobyBtYWRlIG5vIGNoYXJnZSBvZiBnaXZpbmcgZmFsc2UgdGVzdGltb255CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgd2l0bmVzc2VzIHdobyB0ZXN0aWZpZWQgdGhhdCB5b3UgcmVjZWl2ZWQgYW5kIGhhZCBpbiB5b3VyIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHksIGNvbmNlcm5pbmcgd2hpY2ggeW91IGRlbWFuZGVkIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiBmb3IgdG9ydHVyZSB0byBwcm92ZSB0aGF0IGl0IHdhcyBuZXZlciBsZWZ0IHVzLiBJZiB5b3UKICAgICAgICAgICAgICAgICAgICBoYWQgcmVhbGx5IGJlZW4gd3JvbmdlZCwgaXQgd291bGQgaGF2ZSBiZWVuIG1vcmUgZml0dGluZyB0byBwcm9jZWVkIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGVtLiBCdXQgeW91IHdlcmUgbm90IHdyb25nZWQsIGFuZCBhcmUgYnJpbmdpbmcgYSBiYXNlbGVzcyBzdWl0IG91dCBvZiBtYWxpY2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZSBhcmUKICAgICAgICAgICAgICAgICAgICBtYW55IHBvaW50cyBmcm9tIHdoaWNoIG9uZSBtYXkgc2VlIHlvdXIgcmFzY2FsaXR5LCBidXQgbW9zdCBvZiBhbGwgaWYgb25lIGhlYXJzCiAgICAgICAgICAgICAgICAgICAgaG93IHlvdSBhY3RlZCByZWdhcmRpbmcgdGhlIHdpbGwuIEZvciBhbHRob3VnaCBteSBmYXRoZXIsIG1lbiBvZiB0aGUganVyeSwgd3JvdGUKICAgICAgICAgICAgICAgICAgICBhIHdpbGwgY29udGFpbmluZyBhbiBpbnZlbnRvcnkgb2YgYWxsIHRoYXQgaGUgbGVmdCwgd2l0aCBpbnN0cnVjdGlvbnMgZm9yCiAgICAgICAgICAgICAgICAgICAgbGV0dGluZyB0aGUgcHJvcGVydHksIHRoaXMgd2lsbCBBcGhvYnVzIG5ldmVyIGdhdmUgdXAgdG8gbWUsIGxlc3QgSSBzaG91bGQgbGVhcm4KICAgICAgICAgICAgICAgICAgICBmcm9tIGl0IHRoZSB2YWx1ZSBvZiB0aGUgZXN0YXRlLCBhbmQgYWRtaXR0ZWQgcG9zc2Vzc2luZyBvbmx5IHRob3NlIGl0ZW1zIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2VyZSBzbyB3ZWxsIGtub3duIHRoYXQgaGUgY291bGQgbm90IGRlbnkgdGhhdCBoZSBoYWQgdGhlbS4gPG1pbGVzdG9uZSBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgd2lsbCwgYWNjb3JkaW5nIHRvIGhpcyBzdGF0ZW1lbnQsIGNvbnRhaW5lZCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHByb3Zpc2lvbnM6IHRoYXQgRGVtb3Bob24gc2hvdWxkIGF0IG9uY2UgcmVjZWl2ZSB0d28gdGFsZW50cywgYW5kIHNob3VsZCBtYXJyeQogICAgICAgICAgICAgICAgICAgIG15IHNpc3RlciB3aGVuIHNoZSBzaG91bGQgY29tZSBvZiBhZ2Ug77yIdGhpcyB3b3VsZCBiZSBpbiB0ZW4KICAgICAgICAgICAgICAgICAgICB5ZWFyc++8iTsgdGhhdCBBcGhvYnVzIGhpbXNlbGYgc2hvdWxkIGhhdmUgZWlnaHR5IG1pbmFlIHdpdGggbXkgbW90aGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgaG91c2UgdG8gbGl2ZSBpbjsgYW5kIHRoYXQgVGhlcmlwcGlkZXMgc2hvdWxkIGVuam95IHRoZSBpbnRlcmVzdCBvbgogICAgICAgICAgICAgICAgICAgIHNldmVudHkgbWluYWUgdW50aWwgSSBzaG91bGQgcmVhY2ggbWFuaG9vZC4gQWxsIHRoZSByZXN0IG9mIHRoZSBwcm9wZXJ0eSBsZWZ0IHRvCiAgICAgICAgICAgICAgICAgICAgbWUgYXBhcnQgZnJvbSB0aGVzZSBpdGVtcywgYW5kIHRoZSBjbGF1c2UgcmVnYXJkaW5nIHRoZSBsZXR0aW5nIG9mIHRoZSBlc3RhdGUsCiAgICAgICAgICAgICAgICAgICAgaGUgc3VwcHJlc3NlZCBmcm9tIHRoZSB3aWxsLCBub3QgdGhpbmtpbmcgdGhhdCBpdCB3YXMgdG8gaGlzIGludGVyZXN0IHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIHNob3VsZCBiZSBtYWRlIGtub3duIGluIHlvdXIgY291cnQuIDxtaWxlc3RvbmUgbj0iNDQiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgc2luY2UgaXQgd2FzIGFkbWl0dGVkIGJ5IEFwaG9idXMgaGltc2VsZiB0aGF0IG15IGZhdGhlciBvbiBoaXMKICAgICAgICAgICAgICAgICAgICBkZWF0aC1iZWQgZ2F2ZSB0byBlYWNoIG9mIHRoZXNlIG1lbiBzdWNoIGxhcmdlIHN1bXMgb2YgbW9uZXksIHRoZSBqdXJ5bWVuIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGZvcm1lciB0cmlhbCBjb25zaWRlcmVkIHRoZXNlIGFkbWlzc2lvbnMgdG8gYmUgYSBwcm9vZiBvZiB0aGUgc2l6ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlc3RhdGUuIEZvciB3aGVuIGEgbWFuIGdhdmUgb3V0IG9mIGhpcyBlc3RhdGUgZm91ciB0YWxlbnRzIGFuZCB0aHJlZSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlIGJ5IHdheSBvZiBtYXJyaWFnZS1wb3J0aW9uIGFuZCBsZWdhY3ksIGl0IHdhcyBwbGFpbiB0aGF0IGhlIHRvb2sgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzdW1zLCBub3QgZnJvbSBhIHNtYWxsIGVzdGF0ZSwgYnV0IGZyb20gb25lIO+8iGJlcXVlYXRoZWQgdG8gbWXvvIkKICAgICAgICAgICAgICAgICAgICBvZiBtb3JlIHRoYW4gZG91YmxlIHRoaXMgYW1vdW50LiA8bWlsZXN0b25lIG49IjQ1IiB1bml0PSJzZWN0aW9uIiAvPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZvbGxvd2luZyBwYXNzYWdlIHVwIHRvIHRoZSBtaWRkbGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gaXMgcmVwZWF0ZWQgYWxtb3N0IHZlcmJhdGltIGZyb20gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNDUiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI3LjQ1PC9iaWJsPjwvbm90ZT4gRm9yIGl0IGNhbm5vdCBiZSBzdXBwb3NlZCB0aGF0IGhlIHdvdWxkIHdpc2ggdG8KICAgICAgICAgICAgICAgICAgICBsZWF2ZSBtZSwgaGlzIHNvbiwgaW4gcG92ZXJ0eSwgYW5kIGJlIGVhZ2VyIGZ1cnRoZXIgdG8gZW5yaWNoIHRoZXNlIG1lbiwgd2hvCiAgICAgICAgICAgICAgICAgICAgd2VyZSBhbHJlYWR5IHdlYWx0aHkuIE5vOyBpdCB3YXMgYmVjYXVzZSBvZiB0aGUgc2l6ZSBvZiB0aGUgZXN0YXRlIGxlZnQgdG8gbWUKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGdhdmUgdG8gVGhlcmlwcGlkZXMgdGhlIGludGVyZXN0IG9uIHNldmVudHkgbWluYWUsIGFuZCB0byBEZW1vcGhvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHR3byB0YWxlbnRz4oCUdGhvdWdoIGhlIHdhcyBub3QgeWV0IHRvIG1hcnJ5IG15IHNpc3Rlci4gVGhlc2UKICAgICAgICAgICAgICAgICAgICBtb25leXMgaXQgaGFzIGJlZW4gcHJvdmVkIHRoYXQgQXBob2J1cyBuZXZlciBnYXZlIG92ZXIgdG8gbWUsIG5vciBldmVuIGFuIGFtb3VudAogICAgICAgICAgICAgICAgICAgIHNsaWdodGx5IGxlc3MuIFBhcnQgb2YgaXQgaGUgc2FpZCBoZSBoYWQgc3BlbnQsIHBhcnQgaGUgaGFkIG5ldmVyIHJlY2VpdmVkLCBwYXJ0CiAgICAgICAgICAgICAgICAgICAgaGUga25ldyBub3RoaW5nIGFib3V0LCBwYXJ0IHdhcyBpbiB0aGUgaGFuZHMgb2Ygc28tYW5kLXNvLCBwYXJ0IHdhcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBob3VzZSwgYW5kIG9mIHBhcnQgaGUgY291bGQgc2F5IGFueXRoaW5nIGV4Y2VwdCB3aGVuIGFuZCB3aGVyZSBoZSBoYWQgcGFpZCBpdAogICAgICAgICAgICAgICAgICAgIG92ZXIuIDxtaWxlc3RvbmUgbj0iNDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5BcyB0byBoaXMKICAgICAgICAgICAgICAgICAgICBzdG9yeSBvZiBtb25leSBsZWZ0IGluIHRoZSBob3VzZSBJIHNoYWxsIGNsZWFybHkgcHJvdmUgdG8geW91IHRoYXQgaGUgaXMgbHlpbmcuCiAgICAgICAgICAgICAgICAgICAgVGhpcyBhcmd1bWVudCBoZSBzcGVjaW91c2x5IGludHJvZHVjZWQsIHdoZW4gaXQgaGFkIGJlY29tZSBjbGVhciB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IHdhcyBsYXJnZSBhbmQgd2FzIHVuYWJsZSB0byBzaG93IHRoYXQgaGUgaGFkIHBhaWQgaXQgYmFjaywgaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IG1pZ2h0IGFwcGVhciBhIHJlYXNvbmFibGUgaW5mZXJlbmNlIHRoYXQgSSB3YXMgd3JvbmdmdWxseSBzZWVraW5nIHRvCiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlciB3aGF0IHdhcyBhbHJlYWR5IGluIG15IHBvc3Nlc3Npb24uIDxtaWxlc3RvbmUgbj0iNDciIHVuaXQ9InNlY3Rpb24iIC8+PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHBhc3NhZ2UgcmVwZWF0cyB2ZXJ5IGNsb3NlbHkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlIG9mIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3LjU1IiB2YWxpZD0ieWVzIj5EZW0uIDI3LjU1LTU3PC9iaWJsPjwvbm90ZT4gSWYgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vIGNvbmZpZGVuY2UgaW4gdGhlc2UgbWVuIGl0IGlzIHBsYWluIHRoYXQgaGUgd291bGQgbmVpdGhlciBoYXZlIGVudHJ1c3RlZAogICAgICAgICAgICAgICAgICAgIHRoZW0gd2l0aCB0aGUgcmVzdCBvZiBoaXMgcHJvcGVydHksIG5vciwgaWYgaGUgaGFkIGxlZnQgdGhpcyBtb25leSBpbiB0aGUgd2F5CiAgICAgICAgICAgICAgICAgICAgYWxsZWdlZCwgd291bGQgaGUgaGF2ZSB0b2xkIHRoZW0gb2YgaXQuIEhvdywgdGhlbiwgZG8gdGhleSBrbm93IGFib3V0IGl0PyBCdXQsCiAgICAgICAgICAgICAgICAgICAgaWYgaGUgaGFkIGNvbmZpZGVuY2UgaW4gdGhlbSwgaGUgd291bGQgbm90LCBJIHRha2UgaXQsIGhhdmUgZ2l2ZW4gaW50byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhhbmRzIHRoZSBidWxrIG9mIGhpcyBwcm9wZXJ0eSwgYW5kIG5vdCBoYXZlIHB1dCB0aGVtIGluIGNoYXJnZSBvZiB0aGUgcmVzdC4gTm9yCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGUgaGF2ZSBlbnRydXN0ZWQgdGhpcyByZW1haW5kZXIgdG8gbXkgbW90aGVyIHRvIGtlZXAgYW5kIHRoZW4gaGF2ZQogICAgICAgICAgICAgICAgICAgIHBsZWRnZWQgaGVyIGhlcnNlbGYgaW4gbWFycmlhZ2UgdG8gdGhpcyBtYW4sIHdobyB3YXMgb25lIG9mIHRoZSBndWFyZGlhbnMuIEZvcgogICAgICAgICAgICAgICAgICAgIGl0IGlzIG5vdCByZWFzb25hYmxlIHRoYXQgaGUgc2hvdWxkIHNlZWsgdG8gbWFrZSB0aGUgbW9uZXkgc2VjdXJlIHRocm91Z2ggaGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB5ZXQgcHV0IG9uZSBvZiB0aGUgbWVuIHdob20gaGUgZGlzdHJ1c3RlZCBpbiBjb250cm9sIGJvdGggb2YgaGVyIGFuZCBvZiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaWYgdGhlcmUgd2VyZSBhbnkgdHJ1dGggaW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhpcywgZG8geW91IHN1cHBvc2UgdGhhdCBBcGhvYnVzIHdvdWxkIG5vdCBoYXZlIHRha2VuIG15IG1vdGhlciB0byB3aWZlLAogICAgICAgICAgICAgICAgICAgIGJlcXVlYXRoZWQgdG8gaGltIGFzIHNoZSB3YXMgYnkgbXkgZmF0aGVyPyBIZSBoYWQgYWxyZWFkeSB0YWtlbiBoZXIKICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZS1wb3J0aW9u4oCUdGhlIGVpZ2h0eSBtaW5hZeKAlGFzIHRob3VnaCBoZSB3ZXJlIGdvaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgbWFycnkgaGVyOyBidXQgaGUgc3Vic2VxdWVudGx5IG1hcnJpZWQgdGhlIGRhdWdodGVyIG9mIFBoaWxvbmlkZXMgb2YgTWVsaXRlLAogICAgICAgICAgICAgICAgICAgIGZyb20gbW90aXZlcyBvZiBhdmFyaWNlLCBpbiBvcmRlciB0aGF0LCBpbiBhZGRpdGlvbiB0byB3aGF0IGhlIGhhZCByZWNlaXZlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdXMsIGhlIG1pZ2h0IGdldCBmcm9tIGhpbSBvdGhlciBlaWdodHkgbWluYWUuIEJ1dCwgaWYgdGhlcmUgaGFkIGJlZW4gZm91cgogICAgICAgICAgICAgICAgICAgIHRhbGVudHMgaW4gdGhlIGhvdXNlLCBhbmQgaW4gaGVyIGN1c3RvZHksIGFzIGhlIGFsbGVnZXMsIGRvbid0IHlvdSBpbWFnaW5lIGhlCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSByYWNlZCB0byBnZXQgcG9zc2Vzc2lvbiBib3RoIG9mIGhlciBhbmQgb2YgdGhlbT8gPG1pbGVzdG9uZSBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5Xb3VsZCBoZSBoYXZlIGpvaW5lZCB3aXRoIGhpcyBjby10cnVzdGVlcyBpbiBzbyBzaGFtZWZ1bGx5CiAgICAgICAgICAgICAgICAgICAgcGx1bmRlcmluZyBteSB2aXNpYmxlIHByb3BlcnR5LCB3aGljaCBtYW55IG9mIHlvdSBrbmV3IGhhZCBiZWVuIGxlZnQgbWUsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhdmUgcmVmcmFpbmVkLCB3aGVuIGhlIGhhZCB0aGUgY2hhbmNlLCBmcm9tIHNlaXppbmcgYSBmdW5kIHRvIHRoZSBleGlzdGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3Ugd291bGQgbm90IGJlIGFibGUgdG8gdGVzdGlmeT8gV2hvIGNhbiBiZWxpZXZlIHRoaXM/IEl0IGlzIGltcG9zc2libGUsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5OyBpdCBpcyBpbXBvc3NpYmxlLiBObzsgYWxsIHRoZSBtb25leSB3aGljaCBteSBmYXRoZXIgbGVmdCB3YXMKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgYnVyaWVkIG9uIHRoZSBkYXkgb24gd2hpY2ggaXQgY2FtZSBpbnRvIHRoZSBoYW5kcyBvZiB0aGVzZSBtZW47IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQsIG5vdCBiZWluZyBhYmxlIHRvIHRlbGwgd2hlbiBhbmQgd2hlcmUgaGUgcGFpZCBiYWNrIGFueSBvZiBpdCwgbWFrZXMKICAgICAgICAgICAgICAgICAgICB1c2Ugb2YgdGhlc2UgYXJndW1lbnRzLCBob3BpbmcgdGhhdCBJIG1heSBzZWVtIHRvIGJlIGEgcmljaCBtYW4sIGFuZCBzbyBtZWV0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBubyBjb21wYXNzaW9uIGZyb20geW91LiA8bWlsZXN0b25lIG49IjUwIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlIG1hbnkgb3RoZXIgY2hhcmdlcyB0byBtYWtlIGFnYWluc3QgaGltLCBidXQgSSBoYXZlIG5vdAogICAgICAgICAgICAgICAgICAgIHRoZSByaWdodCB0byBzcGVhayBvZiB0aGUgaW5qdXJpZXMgSSBteXNlbGYgaGF2ZSBzdWZmZXJlZCwgd2hlbiB0aGUgd2l0bmVzcyBpcwogICAgICAgICAgICAgICAgICAgIGluIGRhbmdlciBvZiBsb3NpbmcgaGlzIGNpdmljIHJpZ2h0cy4gU3RpbGwgSSB3aXNoIHRvIHJlYWQgdG8geW91IGEgY2hhbGxlbmdlLAogICAgICAgICAgICAgICAgICAgIGZvciB5b3Ugd2lsbCBrbm93LCB3aGVuIHlvdSBoYXZlIGhlYXJkIGl0LCB0aGF0IHRoZSB0ZXN0aW1vbnkgd2FzIHRydWUsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgQXBob2J1cywgd2hvIG5vdyBkZWNsYXJlcyB0aGF0IGhlIGRlbWFuZHMgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IHRvIGJlIGV4YW1pbmVkIGFib3V0IGFsbCB0aGUgbWF0dGVycyBpbnZvbHZlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdWl0LCBhdCBmaXJzdCBkZW1hbmRlZCBoaW0gb25seSBpbiByZWdhcmQgdG8gYSBxdWVzdGlvbiBvZiB0aGlydHkgbWluYWU7IGFuZCwKICAgICAgICAgICAgICAgICAgICBmdXJ0aGVybW9yZSwgdGhhdCBoZSBoYXMgYmVlbiBwdXQgdG8gbm8gZGlzYWR2YW50YWdlIGJlY2F1c2Ugb2YgdGhlIHRlc3RpbW9ueS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSwgaW4gbXkgZGVzaXJlIHRvIHJlZnV0ZSBoaW0gaW4gZXZlcnkKICAgICAgICAgICAgICAgICAgICBwYXJ0aWN1bGFyLCBhbmQgaW4gbXkgYXR0ZW1wdCB0byBtYWtlIGNsZWFyIHRvIHlvdSBoaXMgdHJpY2tzIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICB2aWxsYWluaWVzLCBhc2tlZCBoaW0gaG93IGxhcmdlIHRoZSBzdW0gd2FzIHJlZ2FyZGluZyB3aGljaCBoZSBkZW1hbmRlZCB0bwogICAgICAgICAgICAgICAgICAgIGV4YW1pbmUgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+LCBhcyBvbmUgd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZSBvZiB0aGUgZmFjdHMuIFRvIHRoaXMgaGUgcmVwbGllZCBmYWxzZWx5LCB0aGF0IGl0IHdhcyBpbiByZWdhcmQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgYW1vdW50LiDigJxXZWxsIHRoZW4s4oCdIHNhaWQgSSwg4oCcYXMgdG8gdGhpcyBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBnaXZlIHVwIHRvIHlvdSBmb3IgZXhhbWluYXRpb24gYnkgdG9ydHVyZSB0aGUgc2xhdmUgd2hvIGhhcyB0aGUgY29weSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgY2hhbGxlbmdlIHRvIG1lLiA8bWlsZXN0b25lIG49IjUyIiB1bml0PSJzZWN0aW9uIiAvPklmLCB3aGVuIEkgaGF2ZSBnaXZlbgogICAgICAgICAgICAgICAgICAgIG9hdGggdGhhdCB5b3UgYWNrbm93bGVkZ2VkIHRoZSBtYW4gdG8gYmUgZnJlZSwgYW5kIHRoYXQgeW91IHNvIHRlc3RpZmllZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgRGVtbywgeW91IHdpbGwgc3dlYXIgdG8gdGhlIGNvbnRyYXJ5IHdpdGggaW1wcmVjYXRpb25zIHVwb24geW91ciBkYXVnaHRlciwgSQogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgdG8geW91IHRoZSBlbnRpcmUgc3VtLCBmb3Igd2hpY2ggeW91IHNoYWxsIGJlIHNob3duIGJ5IHRoZSBleGFtaW5hdGlvbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzbGF2ZSB0byBoYXZlIGF0IHRoZSBmaXJzdCBkZW1hbmRlZCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT47IGFuZCB0aGUgZGFtYWdlcyB3aGljaCB5b3Ugd2VyZSBjb25kZW1uZWQgdG8gcGF5IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgYmUgbGVzc2VuZWQgYnkgdGh1cyBtdWNo4oCUdGhhdCBpcywgYnkgdGhlIGFtb3VudCBpbiByZWdhcmQgdG8gd2hpY2ggeW91CiAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+LCB0byB0aGUgZW5kIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIGZvdW5kIHRvIGhhdmUgYmVlbiBwdXQgdG8gbm8gZGlzYWR2YW50YWdlIGJ5IHRoZSB3aXRuZXNzZXMu4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNTMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjaGFsbGVuZ2UgSSBtYWRlIHRvIGhpbSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZSBvZiBtYW55IHdpdG5lc3NlczsgYnV0IGhlIHNhaWQgaGUgY291bGQgbm90IGFjY2VwdCBpdC4gWWV0LCBpZiBhIG1hbgogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgdG8gZ2l2ZSB0aGlzIGp1ZGdlbWVudCBpbiBoaXMgb3duIGZhdm9yLCBob3cgY2FuIGl0IGJlIHJpZ2h0IGZvciB5b3UsCiAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSB1cG9uIHlvdXIgb2F0aHMsIHRvIGdpdmUgY3JlZGVuY2UgdG8gaGlzIHdvcmRzIGFuZCBjb252aWN0IHRoZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcywgYW5kIG5vdCByYXRoZXIgdG8gcmVnYXJkIHRoaXMgbWFuIGFzIHRoZSBtb3N0IHNoYW1lbGVzcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBodW1hbmtpbmQ/PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IG15IHdvcmRzIGFyZSB0cnVlLAogICAgICAgICAgICAgICAgICAgIGNhbGwgdGhlIHdpdG5lc3NlcyB0byB0aGVzZSBmYWN0cy48cXVvdGUgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjU0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RG8gbm90IHN1cHBvc2UKICAgICAgICAgICAgICAgICAgICB0aGF0IHdoaWxlIEkgd2FzIHJlYWR5IHRvIHRha2UgdGhpcyBjb3Vyc2UsIHRoZSB3aXRuZXNzZXMgZGlkIG5vdCBob2xkIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgb3Bpbmlvbi4gTm87IHRoZXkgdG9vIHdlcmUgcmVhZHkgdG8gcGxhY2UgdGhlaXIgY2hpbGRyZW4gYnkgdGhlaXIgc2lkZSwgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgY29uZmlybWF0aW9uIG9mIHRoZSB0ZXN0aW1vbnkgdGhleSBoYWQgZ2l2ZW4sIHRvIHRha2UgYW4gb2F0aCB3aXRoIGltcHJlY2F0aW9ucwogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlbSwgaWYgdGhleSBzd29yZSBmYWxzZWx5LiBCdXQgQXBob2J1cyBkaWQgbm90IHNlZSBmaXQgdG8gYWxsb3cgYW4gb2F0aAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGdpdmVuIGVpdGhlciB0byB0aGVtIG9yIHRvIG1lLiBJbnN0ZWFkLCBoZSByZXN0cyBoaXMgY2FzZSBvbiBhcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICBzdWJ0bHkgcGxhbm5lZCBhbmQgb24gd2l0bmVzc2VzIGFjY3VzdG9tZWQgdG8gcGVyanVyeSwgYW5kIHRoaW5rcyB0aGVyZWJ5IGVhc2lseQogICAgICAgICAgICAgICAgICAgIHRvIG1pc2xlYWQgeW91LiBTbyB0YWtlIGFuZCByZWFkIHRvIHRoZSBqdXJ5IHRoaXMgZGVwb3NpdGlvbiBhbHNvLjxxdW90ZSB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhvdyBjb3VsZCBvbmUKICAgICAgICAgICAgICAgICAgICBwcm92ZSBtb3JlIGNsZWFybHkgdGhhbiBJIGhhdmUgcHJvdmVkIHRoYXQgd2UgYXJlIHRoZSBvYmplY3Qgb2YgYSBtYWxpY2lvdXMKICAgICAgICAgICAgICAgICAgICBjaGFyZ2U7IHRoYXQgdGhlIGV2aWRlbmNlIGJyb3VnaHQgZm9yd2FyZCBhZ2FpbnN0IG15IG9wcG9uZW50IGlzIHRydWU7IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGlzIGNvbmRlbW5hdGlvbiB3YXMganVzdD8gSSBoYXZlIHNob3duIHRoYXQgaGUgcmVmdXNlZCB0byBleGFtaW5lIGJ5IHRvcnR1cmUKICAgICAgICAgICAgICAgICAgICB0aGUgc2xhdmUgd2hvIHdyb3RlIHRoZSB0ZXN0aW1vbnkgcmVnYXJkaW5nIHRoZSB2ZXJ5IHRoaW5ncyB0byB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICB0ZXN0aWZpZWQ7IHRoYXQgaGlzIGJyb3RoZXIsIEFlc2l1cywgaGFzIGF0dGVzdGVkIHRoZSBmYWN0cyB3aGljaCBoZSBvbiBoaXMgcGFydAogICAgICAgICAgICAgICAgICAgIGRlY2xhcmVzIHRvIGJlIGZhbHNlOyA8bWlsZXN0b25lIG49IjU2IiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgQXBob2J1cyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgaGFzLCBhdCBteSBzdW1tb25zLCBnaXZlbiBhZ2FpbnN0IERlbW8sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EZW1vIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBub3QgYWN0dWFsbHkgYSB0cnVzdGVlLCBidXQgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjguMTUiIHZhbGlkPSJ5ZXMiPkRlbS4gMjguMTU8L2JpYmw+IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlZCB0aGF0IHRoZSBlbGRlciBEZW1vc3RoZW5lcyBoYWQgY2FsbGVkIGhpbSB0byBiZSBwcmVzZW50LCB3aGVuLCBvbiBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgZGVhdGgtYmVkLCBoZSBoYWQgZW50cnVzdGVkIGhpcyBhZmZhaXJzIGFuZCB0aGUgZ3VhcmRpYW5zaGlwIG9mIGhpcyBjaGlsZHJlbgogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgdGhyZWUgbmFtZWQgYXMgdHJ1c3RlZXMuIEhlIHdhcyB0aGUgZmF0aGVyIG9mIERlbW9waG9uLCBhbmQgaGFkIHZlcnkKICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libHkgdGFrZW4gcGFydCBpbiB0aGUgbWFuYWdlbWVudCBvZiB0aGUgdHJ1c3QuIEFub3RoZXIgYWx0ZXJuYXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGlvbiBpcyB0aGF0IERlbW9zdGhlbmVzIG1heSBoYXZlIGluc3RpdHV0ZWQgc3VpdCBhZ2FpbnN0IERlbW8gb24KICAgICAgICAgICAgICAgICAgICAgICAgcXVpdGUgb3RoZXIgZ3JvdW5kcyBvZiB3aGljaCB3ZSBoYXZlIG5vIGtub3dsZWRnZS4gVGhpcyBjb21wbGljYXRlZCBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIGFibHkgZGlzY3Vzc2VkIGJ5IENhbGhvdW4sIDx0aXRsZT5sLmMuPC90aXRsZT4gcHAuIDg4IGZmLjwvbm90ZT4gaGlzCiAgICAgICAgICAgICAgICAgICAgdW5jbGUgYW5kIGNvLXRydXN0ZWUsIHRoZSBzYW1lIHRlc3RpbW9ueSBhcyB0aGUgd2l0bmVzc2VzIHdob20gaGUgaXMgc3Vpbmc7IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSByZWZ1c2VkIHRvIGV4YW1pbmUgbXkgd29tZW4tc2VydmFudHMgYXMgdG8gdGhlIGZhY3Qgb2YgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IGJlaW5nIGEgZnJlZW1hbjsgdGhhdCBteSBvd24gbW90aGVyCiAgICAgICAgICAgICAgICAgICAgd2FzIHJlYWR5IHRvIGdpdmUgYW4gb2F0aCByZWdhcmRpbmcgdGhlc2UgbWF0dGVycyB3aXRoIGltcHJlY2F0aW9ucyB1cG9uIHVzOwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgcmVmdXNlZCB0byBhY2NlcHQgZm9yIGV4YW1pbmF0aW9uIGFueSBvbmUgb2YgbXkgb3RoZXIgc2xhdmVzIHdobyBrbmV3CiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBjaXJjdW1zdGFuY2VzIGJldHRlciB0aGFuIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiBkaWQ7IHRoYXQgaGUgaGFzIG5vdCBicm91Z2h0IGEgY2hhcmdlIG9mIGZhbHNlIHdpdG5lc3MKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGFueSBvbmUgb2YgdGhvc2Ugd2hvIHRlc3RpZmllZCB0aGF0IGhlIGhhZCB0aGUgbW9uZXk7IDxtaWxlc3RvbmUgbj0iNTciIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCBoZSBkaWQgbm90IGdpdmUgb3ZlciB0aGUgd2lsbCwgbm9yIGxldCB0aGUgaG91c2UsCiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggdGhlIGxhd3Mgc28gYmFkZTsgYW5kIGZpbmFsbHkgdGhhdCBoZSBkaWQgbm90IHNlZSBmaXQgdG8gZ2l2ZSBhbiBvYXRoLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSB3aXRuZXNzZXMgYW5kIEkgbXlzZWxmIGhhZCBzd29ybiwgd2hlcmVieSBoZSBjb3VsZCBoYXZlIHNlY3VyZWQKICAgICAgICAgICAgICAgICAgICByZWxlYXNlIHRvIHRoZSBhbW91bnQgb2YgdGhlIHN1bXMgcmVnYXJkaW5nIHdoaWNoIGhlIGhhZCBkZW1hbmRlZCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gZm9yIHRvcnR1cmUuIEJ5IGhlYXZlbiwgSSBjZXJ0YWlubHkKICAgICAgICAgICAgICAgICAgICBjb3VsZCB0aGluayBvZiBubyBiZXR0ZXIgd2F5IHRoYW4gdGhpcyB0byBlc3RhYmxpc2ggdGhlc2UgZmFjdHMuIFlldCwgcGxhaW4gYXMKICAgICAgICAgICAgICAgICAgICBpdCBpcyB0aGF0IGhlIGZhbHNlbHkgYXR0YWNrcyB0aGUgd2l0bmVzc2VzOyB0aGF0IGhlIHN1ZmZlcnMgbm8gZGFtYWdlIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMgYWRkdWNlZDsgdGhhdCBoZSB3YXMganVzdGx5IGNvbmRlbW5lZDsgaGUgc3RpbGwgdHJpZXMgdG8gYnJhemVuIGl0IG91dC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5JZiBpdCB3ZXJlIG5vdCB0aGF0IGhlIHVzZXMgaGlzIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSBhZnRlciBoYXZpbmcgYXQgdGhlIG91dHNldCBiZWVuIGp1ZGdlZCB0byBiZSBpbiB0aGUgd3JvbmcgYnkgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIGJ5IHRoZSBhcmJpdHJhdG9yLCB0aGVyZSB3b3VsZCBiZSBsZXNzIHJlYXNvbiB0byB3b25kZXIgYXQgYWxsIHRoaXMuCiAgICAgICAgICAgICAgICAgICAgQnV0IHRoZSBmYWN0IGlzLCB0aGF0IGFmdGVyIHBlcnN1YWRpbmcgbWUgdG8gcmVmZXIgdGhlIG1hdHRlciB0byBBcmNoZW5ldXMgYW5kCiAgICAgICAgICAgICAgICAgICAgRHJhY29udGlkZXMgYW5kIFBoYW51cyDvvIh0aGUgbGFzdCBvZiB3aG9tIGhlIGlzIG5vdyBzdWluZyBvbiBhIGNoYXJnZSBvZgogICAgICAgICAgICAgICAgICAgIGdpdmluZyBmYWxzZSB3aXRuZXNz77yJLCBoZSByZWplY3RlZCB0aGVtIO+8iGhhdmluZyBoZWFyZCB0aGVtIHNheQogICAgICAgICAgICAgICAgICAgIHRoYXQsIGlmIHRoZXkgZGVjaWRlZCBvbiBvYXRoLCB0aGV5IHdvdWxkIGNvbmRlbW4gaGlzIGNvbmR1Y3QgYXMKICAgICAgICAgICAgICAgICAgICBndWFyZGlhbu+8iSwgYW5kIGFwcGVhcmVkIGJlZm9yZSB0aGUgb2ZmaWNpYWwgYXJiaXRyYXRvciwgd2hvLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIEFwaG9idXMgd2FzIHVuYWJsZSB0byBjbGVhciBoaW1zZWxmIGZyb20gdGhlIGNoYXJnZXMgd2hpY2ggSSBicm91Z2h0LCBnYXZlCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50IGFnYWluc3QgaGltLiA8bWlsZXN0b25lIG49IjU5IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBqdXJ5LCB0byB3aG9tIGhlCiAgICAgICAgICAgICAgICAgICAgdGhlbiBhcHBlYWxlZCwgaGF2aW5nIGhlYXJkIHRoZSBjYXNlLCBnYXZlIHRoZSBzYW1lIGRlY2lzaW9uIHRoYXQgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIHRoZSBhcmJpdHJhdG9yIGhhZCBnaXZlbiwgYW5kIGZpeGVkIHRoZSBkYW1hZ2VzIGF0IHRlbiB0YWxlbnRzLiBUaGlzCiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCwgaGVhdmVuIGtub3dzLCBiZWNhdXNlIGhlIGhhZCBhZG1pdHRlZCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gdG8gYmUgYSBmcmVlbWFuIO+8iGZvciB0aGlzIHdhcyBub3RoaW5nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHBvaW5077yJLCBidXQgYmVjYXVzZSwgYSBmb3J0dW5lIG9mIGZpZnRlZW4gdGFsZW50cyBoYXZpbmcgYmVlbiBsZWZ0IG1lLAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBub3QgbGV0IHRoZSBwcm9wZXJ0eTsgYmVjYXVzZSBmdXJ0aGVyLCBoZSB3aXRoIGhpcyBjby10cnVzdGVlcyBoYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuYWdlbWVudCBvZiB0aGUgZXN0YXRlIGZvciB0ZW4geWVhcnMsIGFuZCBhZ3JlZWQgb24gYmVoYWxmIG9mIG1lLCBhIGNoaWxkLCB0bwogICAgICAgICAgICAgICAgICAgIHBheSBhIHByb3BlcnR5LXRheCBhdCB0aGUgcmF0ZSBvZiBmaXZlIG1pbmFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGVzIDxlbXBoPmI8L2VtcGg+IGFuZCA8ZW1waD5jPC9lbXBoPiBvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy43IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNy43PC9iaWJsPjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjYwIiB1bml0PSJzZWN0aW9uIiAvPnRoZSBzYW1lIHJhdGUgYXQgd2hpY2ggVGltb3RoZXVzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiwgYW5kIHRob3NlIHBvc3Nlc3NpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbGFyZ2VzdCBmb3J0dW5lcyB3ZXJlIGFzc2Vzc2VkOyBhbmQgYmVjYXVzZSwgYWZ0ZXIgYWRtaW5pc3RlcmluZyBmb3Igc28gbG9uZyBhbgogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSwgb24gd2hpY2ggaGUgdm9sdW50YXJpbHkgY2hvc2UgdG8gcGF5IHNvIGhpZ2ggYSB0YXgsIGhlIHR1cm5lZCBvdmVyIHRvCiAgICAgICAgICAgICAgICAgICAgbWUsIGFzIHRoZSBhbW91bnQgZHVlIGZyb20gaGltLCBwcm9wZXJ0eSBub3QgZXZlbiBvZiB0aGUgdmFsdWUgb2YgdHdlbnR5IG1pbmFlLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyB0b2dldGhlciB3aXRoIHRob3NlIG90aGVycyByb2JiZWQgbWUgb2YgbXkgd2hvbGUgZXN0YXRlLCBwcmluY2lwYWwgYXMKICAgICAgICAgICAgICAgICAgICB3ZWxsIGFzIGludGVyZXN0LiBUaGUganVyeW1lbiwgdGhlcmVmb3JlLCBhbHRob3VnaCB0aGV5IGFsbG93ZWQgaW50ZXJlc3Qgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgcHJvcGVydHkgYXQgdGhlIGxvd2VzdCByYXRlLCBhbmQgbm90IHRoYXQgYXQgd2hpY2ggZXN0YXRlcyBhcmUgb3JkaW5hcmlseQogICAgICAgICAgICAgICAgICAgIGxldCwgZm91bmQgdGhhdCB0aGVzZSBtZW4gaGFkIHJvYmJlZCBtZSBvZiBtb3JlIHRoYW4gdGhpcnR5IHRhbGVudHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZ2x5IGZpeGVkIHRoZSBkYW1hZ2VzIGFnYWluc3QgQXBob2J1cyBhdCB0ZW4gdGFsZW50cy48L3A+CiAgICAgICAgICAgIDwvZGl2MT4KCiAgICAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWdhaW5zdCBBcGhvYnVzIDM8L2hlYWQ+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgSSB3ZXJlIG5vdAogICAgICAgICAgICAgICAgICAgIGNvbnNjaW91cywgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IGluIGEgZm9ybWVyIHN1aXQgYWdhaW5zdCBBcGhvYnVzIEkgaGFkIHJlYWRpbHkKICAgICAgICAgICAgICAgICAgICDvvIhzbyBhYnNvbHV0ZWx5IG1hbmlmZXN0IHdlcmUgaGlzIHdyb25nZG9pbmdz77yJIGNvbnZpY3RlZCBoaW0gb2YKICAgICAgICAgICAgICAgICAgICBsaWVzIGdyZWF0ZXIgYW5kIG1vcmUgb3V0cmFnZW91cyB0aGFuIHRoZXNlIHdoaWNoIGhlIG5vdyB1dHRlcnMsIEkgc2hvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBncmF2ZSBkb3VidHMgb2YgbXkgYWJpbGl0eSB0byBzaG93IGhvdyBoZSBzZWVrcyB0byBsZWFkIHlvdSBhc3RyYXkgaW4gcmVnYXJkIHRvCiAgICAgICAgICAgICAgICAgICAgZWFjaCBvbmUgb2YgdGhlbS4gQXMgaXQgaXMsIGhvd2V2ZXIg77yIYmUgaXQgc2FpZCB3aXRoIHRoZSBmYXZvciBvZgogICAgICAgICAgICAgICAgICAgIGhlYXZlbu+8iSwgaWYgeW91IHByb3ZlIGZhaXIgYW5kIGltcGFydGlhbCBoZWFyZXJzLCBJIGhhdmUgc3Ryb25nIGhvcGVzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB5b3Ugd2lsbCBiZWNvbWUgYXMgZnVsbHkgYXdhcmUgb2YgdGhlIHNoYW1lbGVzc25lc3Mgb2YgdGhpcyBtYW4gYXMgd2VyZSB0aGUKICAgICAgICAgICAgICAgICAgICBqdXJvcnMgaW4gdGhlIGZvcm1lciB0cmlhbC4gSWYgdGhlIGNhc2UgcmVxdWlyZWQgZWxvcXVlbmNlIG9yIGNsZXZlcm5lc3MgSQogICAgICAgICAgICAgICAgICAgIHNob3VsZCBzaHJpbmsgdGhyb3VnaCBkaXN0cnVzdCBvZiBteSB5b3V0aDsgYnV0LCBhcyBtYXR0ZXJzIGFyZSwgSSBuZWVkIG1lcmVseQogICAgICAgICAgICAgICAgICAgIHBvaW50IG91dCBhbmQgcmVoZWFyc2UgdG8geW91IHdoYXQgdGhlIHBsYWludGlmZidzIGNvbmR1Y3QgdG93YXJkIHVzIGhhcyBiZWVuLgogICAgICAgICAgICAgICAgICAgIEZyb20gdGhpcyBpdCB3aWxsIGJlIGVhc3ksIEkgdGhpbmssIGZvciBhbGwgb2YgeW91IHRvIGRldGVybWluZSB3aGljaCBvZiB1cyBpcwogICAgICAgICAgICAgICAgICAgIHRoZSB2aWxsYWluLiA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JCiAgICAgICAgICAgICAgICAgICAga25vdyB0aGF0IHRoZSBwbGFpbnRpZmYgaGFzIGluc3RpdHV0ZWQgdGhpcyBzdWl0LCBub3QgYmVjYXVzZSBoZSBiZWxpZXZlcyBoZSBjYW4KICAgICAgICAgICAgICAgICAgICBjb252aWN0IGFueW9uZSBvZiBoYXZpbmcgYm9ybmUgZmFsc2Ugd2l0bmVzcyBhZ2FpbnN0IGhpbSwgYnV0IGJlY2F1c2UgaGUgdGhpbmtzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgbGFyZ2UgYW1vdW50IG9mIGRhbWFnZXMgd2hpY2ggaGUgd2FzIGNvbmRlbW5lZCB0byBwYXkgd2lsbCBnaXZlIHJpc2UgdG8KICAgICAgICAgICAgICAgICAgICBhIGZlZWxpbmcgb2YgcHJlanVkaWNlIGFnYWluc3QgbWUsIGFuZCBvZiBjb21wYXNzaW9uIHRvd2FyZCBoaW1zZWxmLiBGb3IgdGhpcwogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBoZSBpcyBub3cgc2Vla2luZyB0byBkZWZlbmQgaGltc2VsZiBhZ2FpbnN0IGNoYXJnZXMgbWFkZSBpbiBhIHN1aXQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhhcyBhbHJlYWR5IGJlZW4gZGVjaWRlZCwgcmVnYXJkaW5nIHdoaWNoIGhlIGhhZCBhdCB0aGUgdGltZSBubyByZWFzb25hYmxlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSB0byBtYWtlLiBJLCBmb3IgbXkgcGFydCwgbWVuIG9mIHRoZSBqdXJ5LCBpZiBJIGhhZCBwcm9jZWVkZWQgdG8gZXhlY3V0ZQogICAgICAgICAgICAgICAgICAgIHRoZSBqdWRnZW1lbnQgYWdhaW5zdCBoaW0gYW5kIGhhZCBiZWVuIHVud2lsbGluZyB0byBtYWtlIGFueSByZWFzb25hYmxlCiAgICAgICAgICAgICAgICAgICAgY29uY2Vzc2lvbiwgc2hvdWxkIGV2ZW4gc28gaGF2ZSBkb25lIG5vIHdyb25nIGluIGV4YWN0aW5nIHRoZSBkYW1hZ2VzIGF3YXJkZWQgYnkKICAgICAgICAgICAgICAgICAgICB5b3VyIGRlY2lzaW9uOyBidXQgZm9yIGFsbCB0aGF0IGl0IG1pZ2h0IGhhdmUgYmVlbiBzYWlkIHRoYXQgSSBoYWQgc2hvd24gdW5kdWUKICAgICAgICAgICAgICAgICAgICBydXRobGVzc25lc3MgYW5kIGVubWl0eSB0b3dhcmQgYSBtYW4gd2hvIGlzIGEgcmVsYXRpdmUgaW4gZGVwcml2aW5nIGhpbSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBoaXMgcHJvcGVydHkuIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsIGFzIGl0IGlzLCB0aGUgcHJlY2lzZQogICAgICAgICAgICAgICAgICAgIGNvbnRyYXJ5IGlzIHRoZSB0cnV0aC4gVGhpcyBtYW4gd2l0aCBoaXMgY28tdHJ1c3RlZXMgaGFzIHJvYmJlZCBtZSBvZiBteSBlbnRpcmUKICAgICAgICAgICAgICAgICAgICBwYXRyaW1vbnksIGFuZCwgZXZlbiBhZnRlciBiZWluZyBjbGVhcmx5IGNvbnZpY3RlZCBpbiB5b3VyIGNvdXJ0LCBoZSBkb2VzIG5vdAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIGhpbXNlbGYgb2JsaWdlZCB0byBkbyBhbnl0aGluZyByZWFzb25hYmxlLiBPbiB0aGUgY29udHJhcnkgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgZGlzcGVyc2VkIGhpcyBwcm9wZXJ0eSwgZ2l2aW5nIGhpcyBmYXJtLWJ1aWxkaW5ncyB0byBBZXNpdXMgYW5kIGhpcyBmYXJtIHRvCiAgICAgICAgICAgICAgICAgICAgT25ldG9yLCBhZ2FpbnN0IHdob20gaGUgaGFzIGZvcmNlZCBtZSB0byBlbmdhZ2UgaW4gYSB0cm91Ymxlc29tZSBsYXdzdWl0LiBIZQogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgc3RyaXBwZWQgdGhlIGhvdXNlIG9mIGl0cyBmdXJuaXR1cmUsIHRvb2sgYXdheSB0aGUgc2xhdmVzLCBkZXN0cm95ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgd2luZS12YXQsIHRvcmUgb2ZmIHRoZSBkb29ycywgYW5kIGFsbCBidXQgc2V0IGZpcmUgdG8gdGhlIGhvdXNlIGl0c2VsZjsgdGhlbiBoZQogICAgICAgICAgICAgICAgICAgIG1hZGUgb2ZmIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsTWVnYXJhIiBrZXk9InBlcnNldXMsTWVnYXJhIj5NZWdhcmE8L3BsYWNlTmFtZT4sIHdoZXJlIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIHNldHRsZWQgYW5kIHBhaWQgdGhlIGFsaWVuJ3MgdGF4LiBZb3Ugd291bGQsIHRoZXJlZm9yZSwgd2l0aCBiZXR0ZXIgZ3JvdW5kCiAgICAgICAgICAgICAgICAgICAgbG9hdGhlIHRoaXMgbWFuIGZvciBkZWVkcyBsaWtlIHRoZXNlLCB0aGFuIGp1ZGdlIG1lIGd1aWx0eSBvZiB1bmR1ZSBzZXZlcml0eS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVnYXJkaW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHJhcGFjaXR5IGFuZCB2aWxlIGNoYXJhY3RlciBvZiB0aGUgcGxhaW50aWZmIEkgcHVycG9zZSB0byBzcGVhayBhdCBsZW5ndGgKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgeW91IGxhdGVyIG9uLCB0aG91Z2ggd2hhdCB5b3UgaGF2ZSBldmVuIG5vdyBoZWFyZCBnaXZlcyB5b3UgYSBmYWlyIGlkZWEKICAgICAgICAgICAgICAgICAgICBvZiBpdC4gQnV0IEkgc2hhbGwgbm93IHVuZGVydGFrZSB0byBzaG93IHlvdSwgdGhhdCB0aGUgdGVzdGltb255IHdoaWNoIGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4sIGFib3V0IHdoaWNoIHlvdSBhcmUgZ29pbmcgdG8gY2FzdCB5b3VyIHZvdGVzLCBpcyB0cnVlLiBCdXQgb25lIHJlcXVlc3QgSQogICAgICAgICAgICAgICAgICAgIG1ha2Ugb2YgeW91LCBtZW4gb2YgdGhlIGp1cnksIGFuZCBpdCBpcyBhIHJlYXNvbmFibGUgb25l4oCUdGhhdCB5b3Ugd2lsbAogICAgICAgICAgICAgICAgICAgIGdpdmUgdXMgYm90aCBhIGZhaXIgaGVhcmluZy4gVGhpcyBpcyBhcyBtdWNoIGluIHlvdXIgaW50ZXJlc3QgYXMgaW4gbWluZSwgZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vcmUgYWNjdXJhdGUgeW91ciBrbm93bGVkZ2Ugb2YgdGhlIGZhY3RzLCB0aGUgbW9yZSBqdXN0IGFuZCBpbiBoYXJtb255IHdpdGgKICAgICAgICAgICAgICAgICAgICB5b3VyIG9hdGhzIHdpbGwgYmUgdGhlIHZvdGUgeW91IHdpbGwgY2FzdCByZWdhcmRpbmcgdGhlbS4gPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkkgc2hhbGwgc2hvdyB0aGF0IEFwaG9idXMgaGFzIG5vdCBvbmx5IGFja25vd2xlZGdlZAogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiB0byBiZSBhIGZyZWVtYW4sIGJ1dCBoYXMKICAgICAgICAgICAgICAgICAgICBldmVuIHByb3ZlZCBpdCBieSBoaXMgYWN0aW9uczsgdGhhdCwgZnVydGhlcm1vcmUsIGFib3V0IHRoaXMgbWF0dGVyIGhlIGhhcwogICAgICAgICAgICAgICAgICAgIGRlY2xpbmVkIHRoZSBhYnNvbHV0ZWx5IHN1cmUgdGVzdCBieSB0b3J0dXJlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+T24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGhpZ2ggdmFsdWUgYXR0cmlidXRlZCBieSB0aGUgR3JlZWtzIHRvIGV2aWRlbmNlIGV4dHJhY3RlZCBmcm9tIGEgc2xhdmUKICAgICAgICAgICAgICAgICAgICAgICAgYnkgdG9ydHVyZSBzZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMzAuMzciIHZhbGlkPSJ5ZXMiPkRlbS4gMzAuMzc8L2JpYmw+LCBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIFJoLiAxLjE1IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBSaC4gMS4xNTwvYmlibD48L25vdGU+IGFuZCBkb2VzIG5vdCB3aXNoCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSB0aGUgdHJ1dGggYnJvdWdodCB0byBsaWdodCB0aGF0IG9uIHRoZSBjb250cmFyeSBoZSBoYXMgcmVjb3Vyc2UgdG8KICAgICAgICAgICAgICAgICAgICB0cmlja2VyeSwgYnJpbmdzIGZvcndhcmQgZmFsc2Ugd2l0bmVzc2VzLCBhbmQgYnkgaGlzIG93biB3b3JkcyBkaXN0b3J0cyB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCByZWdhcmRpbmcgd2hhdCBoYXMgdGFrZW4gcGxhY2UuIFNvIHN0cm9uZyBhbmQgc28gcGxhaW4gaXMgdGhlIGV2aWRlbmNlIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSBzaGFsbCBwcm92ZSB0aGVzZSBzdGF0ZW1lbnRzIHRoYXQgeW91IHdpbGwgYWxsIHNlZSBjbGVhcmx5IHRoYXQgaXQgaXMgSQogICAgICAgICAgICAgICAgICAgIHdobyBhbSBzcGVha2luZyB0aGUgdHJ1dGgsIGFuZCB0aGF0IGhlIGhhcyB1dHRlcmVkIG5vdCBhIHdvcmQgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgY3JlZGVuY2UuIEkgc2hhbGwgYmVnaW4gYXQgYSBwb2ludCB3aGljaCB3aWxsIG1ha2UgaXQgZWFzaWVzdCBmb3IgeW91IHRvIGxlYXJuCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3RzLCBhbmQgZm9yIG1lIHRvIGluc3RydWN0IHlvdSByZWdhcmRpbmcgdGhlbSBpbiB0aGUgYnJpZWZlc3QgdGltZS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBpbnN0aXR1dGVkCiAgICAgICAgICAgICAgICAgICAgc3VpdCwgbWVuIG9mIHRoZSBqdXJ5LCBhZ2FpbnN0IERlbW9waG9uLCBUaGVyaXBwaWRlcyBhbmQgdGhlIHBsYWludGlmZiBmb3IKICAgICAgICAgICAgICAgICAgICBicmVhY2ggb2YgdHJ1c3QgaW4gdGhlaXIgZ3VhcmRpYW5zaGlwLCBmb3IgSSBoYWQgYmVlbiBkZWZyYXVkZWQgYnkgdGhlbSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBteSBpbmhlcml0YW5jZS4gV2hlbiBteSBzdWl0IGFnYWluc3QgQXBob2J1cyBpbiB0aGUgZmlyc3QgaW5zdGFuY2UgY2FtZSB1cCBmb3IKICAgICAgICAgICAgICAgICAgICB0cmlhbCwgSSBwcm92ZWQgY2xlYXJseSB0byB0aGUganVyeSwgYXMgSSBzaGFsbCBwcm92ZSB0byB5b3UsIHRoYXQgaGUsIGluCiAgICAgICAgICAgICAgICAgICAgY29uanVuY3Rpb24gd2l0aCB0aGUgb3RoZXJzLCBoYWQgcm9iYmVkIG1lIG9mIGFsbCB0aGUgcHJvcGVydHkgdGhhdCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIGxlZnQgbWU7IGFuZCBJIHJlbGllZCB1cG9uIG5vIGZhbHNlIHRlc3RpbW9ueS4gPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgaXMgYSBjbGVhciBwcm9vZiBvZiB0aGlzLiBBIGhvc3Qgb2YgZGVwb3NpdGlvbnMgd2FzIHJlYWQgYXQgdGhlIHRyaWFsLAogICAgICAgICAgICAgICAgICAgIHNvbWUgb2YgdGhlIGRlcG9uZW50cyBkZWNsYXJpbmcgdGhhdCB0aGV5IGhhZCBnaXZlbiB0byB0aGUgcGxhaW50aWZmIHByb3BlcnR5IG9mCiAgICAgICAgICAgICAgICAgICAgbWluZSwgb3RoZXJzIHRoYXQgaGUgaGFkIHJlY2VpdmVkIHN1Y2ggcHJvcGVydHkgaW4gdGhlaXIgcHJlc2VuY2UsIHN0aWxsIG90aGVycwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBoYWQgcHVyY2hhc2VkIGdvb2RzIGZyb20gaGltLCBhbmQgcGFpZCBoaW0gdGhlIHByaWNlOyB5ZXQgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlZCBub3QgYSBzaW5nbGUgb25lIG9mIHRoZXNlIHdpdGggYmVhcmluZyBmYWxzZSB0ZXN0aW1vbnkuIEhlIGhhcyBkYXJlZCB0bwogICAgICAgICAgICAgICAgICAgIGF0dGFjayB0aGlzIG9uZSBwaWVjZSBvZiB0ZXN0aW1vbnksIGFuZCBpdCBhbG9uZSwgYWx0aG91Z2ggaW4gaXQgaGUgY2Fubm90IHNob3cKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXJlIHdhcyBtZW50aW9uIGV2ZW4gb2Ygb25lIHNpbmdsZSBkcmFjaG1hLiA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBmb3IgdGhlIGNvbXB1dGF0aW9uIG9mIHRoZSBzdW1zIG9mIHdoaWNoIEkgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICByb2JiZWQsIEkgcmVsaWVkIG5vdCBzbyBtdWNoIG9uIHRoaXMgbWFuJ3MgdGVzdGltb255LCBmb3IgdGhlcmUgd2FzIG5vIG1lbnRpb24KICAgICAgICAgICAgICAgICAgICBvZiBtb25leSBpbiBpdCwgYnV0IG9uIHRoZSBzZXZlcmFsIHN0YXRlbWVudHMgb2YgdGhlIG90aGVycywgYWdhaW5zdCB3aG9tIHRoZQogICAgICAgICAgICAgICAgICAgIHBsYWludGlmZiBoYXMgbWFkZSBubyBjaGFyZ2VzLiBUaGVyZWZvcmUgdGhlIGp1cnltZW4gd2hvIGF0IHRoYXQgdGltZSBoZWFyZCBteQogICAgICAgICAgICAgICAgICAgIHBsZWEsIG5vdCBvbmx5IGZvdW5kIGhpbSBndWlsdHksIGJ1dCBmaXhlZCB0aGUgZGFtYWdlcyBhdCB0aGUgZnVsbCBhbW91bnQgc3RhdGVkCiAgICAgICAgICAgICAgICAgICAgaW4gbXkgY29tcGxhaW50LiBXaHkgd2FzIGl0LCB0aGVuLCB0aGF0IGhlIHBhc3NlZCBvdmVyIHRoZSBvdGhlciB3aXRuZXNzZXMgYW5kCiAgICAgICAgICAgICAgICAgICAgc3VlZCB0aGUgZGVmZW5kYW50IGFsb25lPyBJIHdpbGwgdGVsbCB5b3UuIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz5JbgogICAgICAgICAgICAgICAgICAgIHJlZ2FyZCB0byBhbGwgdGhlIHdpdG5lc3NlcyB3aG8gdGVzdGlmaWVkIHRoYXQgaGUgaGFkIHJlY2VpdmVkIHRoZSBtb25leSwgaGUKICAgICAgICAgICAgICAgICAgICBrbmV3IHRoYXQgdGhlIG1vcmUgZGlzY3Vzc2lvbiB0aGVyZSBzaG91bGQgYmUgb3ZlciBlYWNoIHNlcGFyYXRlIHBvaW50LCB0aGUgbW9yZQogICAgICAgICAgICAgICAgICAgIGNvbnZpbmNpbmdseSB3b3VsZCBoZSBiZSBjb252aWN0ZWQgb2YgcG9zc2Vzc2luZyBpdCwgYW5kIHRoaXMgd2FzIGJvdW5kIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgdGhlIGNhc2UgaW4gYSB0cmlhbCBmb3IgZmFsc2Ugd2l0bmVzczsgZm9yIHRoZSBhY2N1c2F0aW9ucyB3aGljaCBJIHRoZW4gbWFkZQogICAgICAgICAgICAgICAgICAgIGFsb25nIHdpdGggYWxsIHRoZSBvdGhlcnMgaW4gYSBzbWFsbCBwYXJ0IG9mIHRoZSB0aW1lIGFsbG90dGVkIG1lLCBJIHNob3VsZCBub3cKICAgICAgICAgICAgICAgICAgICBkaXNjdXNzIHNldmVyYWxseSBhbmQgaW4gZGV0YWlsIGluIHRoZSB0aW1lIG9mIGFuIGVudGlyZSBzcGVlY2g7IDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9InNlY3Rpb24iIC8+d2hlcmVhcywgaWYgaGUgYXR0YWNrZWQgYW4gYW5zd2VyIGdpdmVuLCBoZSB0aG91Z2h0CiAgICAgICAgICAgICAgICAgICAgdGhhdCBhcyBoZSBoYWQgbWFkZSBhbiBhZG1pc3Npb24gYmVmb3JlLCBzbyBub3cgaXQgd291bGQgYmUgaW4gaGlzIHBvd2VyIHRvIG1ha2UKICAgICAgICAgICAgICAgICAgICBhIGRlbmlhbC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGluIGF0dGFja2luZyB0aGUgdGVzdGltb255IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZXBvbmVudCBoZSB3b3VsZCBkZW55IGhpcyBvd24gcHJldmlvdXMgYWRtaXNzaW9ucy48L25vdGU+IFRoYXQgaXMgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVhc29uIHdoeSBoZSBhdHRhY2tzIHRoZSB0ZXN0aW1vbnkgb2YgdGhpcyB3aXRuZXNzLCB0aGUgdHJ1dGggb2Ygd2hvc2UKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnkgSSBtZWFuIHRvIHByb3ZlIGNvbmNsdXNpdmVseSB0byB5b3UgYWxsLCBub3Qgb24gdGhlIGJhc2lzIG9mCiAgICAgICAgICAgICAgICAgICAgcHJvYmFiaWxpdGllcywgb3Igb2YgYXJndW1lbnRzIG1hZGUgdXAgdG8gZml0IHRoZSBvY2Nhc2lvbiwgYnV0IGJ5IHJlYXNvbmluZwogICAgICAgICAgICAgICAgICAgIHdoaWNoLCBJIGFtIHN1cmUsIHdpbGwgYXBwcm92ZSBpdHNlbGYgdG8geW91IGFsbCBhcyBqdXN0IGFuZCBmYWlyLiBMaXN0ZW4sIGFuZAogICAgICAgICAgICAgICAgICAgIGp1ZGdlLiA8bWlsZXN0b25lIG49IjExIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBrbmV3LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgdGhhdCBJIHNob3VsZCBmaW5kIHRoZSB3aG9sZSBjb250ZXN0IGNlbnRyaW5nIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gaW5zZXJ0ZWQgaW4gdGhlIHJlY29yZCwgYW5kIHRoYXQgaXQgd291bGQgYmUgcmVnYXJkaW5nIHRoZSB0cnV0aCBvcgogICAgICAgICAgICAgICAgICAgIGZhbHNlaG9vZCBvZiB0aGlzIHRoYXQgeW91IHdvdWxkIGNhc3QgeW91ciB2b3RlcywgYW5kIEkgdGhlcmVmb3JlIGRldGVybWluZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBmaXJzdCBzdGVwIGZvciBtZSB0byB0YWtlIHdhcyB0byBvZmZlciBBcGhvYnVzIGEgY2hhbGxlbmdlLiBXaGF0LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGRpZCBJIGRvPyBJIG9mZmVyZWQgdG8gc3VycmVuZGVyIHRvIGhpbSBmb3IgZXhhbWluYXRpb24gYnkgdG9ydHVyZSBhIHNsYXZlIHdobwogICAgICAgICAgICAgICAgICAgIGtuZXcgaG93IHRvIHJlYWQgYW5kIHdyaXRlLCBhbmQgd2hvIGhhZCBiZWVuIHByZXNlbnQgd2hlbiBBcGhvYnVzIG1hZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgYWRtaXNzaW9uIGluIHF1ZXN0aW9uLCBhbmQgd2hvIHdyb3RlIGRvd24gdGhlIHN0YXRlbWVudCBvZiB0aGUgd2l0bmVzcy4gVGhpcyBtYW4KICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBvcmRlcmVkIGJ5IG1lIG5vdCB0byB1c2UgYW55IGZyYXVkIG9yIHRyaWNrZXJ5LCBub3IgdG8gd3JpdGUgZG93biBzb21lCiAgICAgICAgICAgICAgICAgICAgYW5kIHN1cHByZXNzIG90aGVycyBvZiB0aGUgc3RhdGVtZW50cyBtYWRlIGJ5IHRoZSBwbGFpbnRpZmYgcmVnYXJkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgYXQgaXNzdWUsIGJ1dCBzaW1wbHkgdG8gd3JpdGUgdGhlIGFic29sdXRlIHRydXRoLCBhbmQgd2hhdCBBcGhvYnVzCiAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgc2FpZC4gPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGJldHRlciBvcHBvcnR1bml0eSBjb3VsZAogICAgICAgICAgICAgICAgICAgIGhlIGhhdmUgaGFkIG9mIGNvbnZpY3RpbmcgdXMgb2YgZmFsc2Vob29kIHRoYW4gYnkgcHV0dGluZyBteSBzbGF2ZSB0byB0b3J0dXJlPwogICAgICAgICAgICAgICAgICAgIEJ1dCBBcGhvYnVzIGtuZXcgYmV0dGVyIHRoYW4gYW55b25lIGVsc2UgdGhhdCB0aGUgc2xhdmUgaGFkIGJvcm5lIHRydWUKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnksIGFuZCB0aGVyZWZvcmUgaGUgZGVjbGluZWQgdGhlIHRlc3QuIEFuZCBpbiB0cnV0aCBpdCBpcyBub3Qgb25lIG9yIHR3bwogICAgICAgICAgICAgICAgICAgIG9ubHkgd2hvIGtub3cgdGhlc2UgZmFjdHM7IHRoZSBjaGFsbGVuZ2Ugd2FzIG5vdCBtYWRlIGluIHNlY3JldCwgYnV0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1pZHN0IG9mIHRoZSBhZ29yYSB3aGVyZSBtYW55IHdlcmUgcHJlc2VudC48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNhbGwsCiAgICAgICAgICAgICAgICAgICAgcGxlYXNlLCB0aGUgd2l0bmVzc2VzIHRvIHRoZXNlIGZhY3RzLjxxdW90ZSB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGUgZmVsbG93IGlzCiAgICAgICAgICAgICAgICAgICAgc28gY3VubmluZywgYW5kIHNvIHJlYWR5IHRvIHByZXRlbmQgaWdub3JhbmNlIG9mIHdoYXQgaXMgcmlnaHQsIHRoYXQsIGFsdGhvdWdoCiAgICAgICAgICAgICAgICAgICAgaGUgaXMgcHJlc3NpbmcgYSBzdWl0IGZvciBmYWxzZSB3aXRuZXNzLCBhbmQgYWx0aG91Z2ggeW91IGFyZSB0byBjYXN0IHlvdXIgdm90ZXMKICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgdGhpcywgYW5kIGhhdmUgc3dvcm4gc28gdG8gZG8sIGhlIHJlZnVzZWQgdGhlIHByb2ZmZXJlZCBleGFtaW5hdGlvbiBieQogICAgICAgICAgICAgICAgICAgIHRvcnR1cmUgaW4gcmVnYXJkIHRvIHRoZSB0ZXN0aW1vbnkg77yIdGhlIHBvaW50IHRvIHdoaWNoIGhlIHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgZGV2b3RlZCBoaXMgYXJndW1lbnTvvIksIGFuZCBkZWNsYXJlcyB0aGF0IGhlIHJlcXVpcmVzIHRoZSBzbGF2ZSB0byBiZQogICAgICAgICAgICAgICAgICAgIGdpdmVuIHVwIGZvciB0ZXN0aW5nIGluIHJlZ2FyZCB0byBvdGhlciBtYXR0ZXJzLiBJbiB0aGlzIGhlIGlzIGx5aW5nLiA8bWlsZXN0b25lIG49IjE0IiB1bml0PSJzZWN0aW9uIiAvPklzIGl0IG5vdCBpbmRlZWQgbW9uc3Ryb3VzIHRoYXQgaGUgc2hvdWxkIGNsYWltIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBpcyBiZWluZyBvdXRyYWdlb3VzbHkgdHJlYXRlZCBieSBteSByZWZ1c2FsIG9mIGhpcyBkZW1hbmQgdG8gaGF2ZSBkZWxpdmVyZWQKICAgICAgICAgICAgICAgICAgICB0byBoaW0gZm9yIHRvcnR1cmUgYSBmcmVlbWFuIO+8iGZvciBzdWNoIEkgc2hhbGwgY29uY2x1c2l2ZWx5IHByb3ZlCiAgICAgICAgICAgICAgICAgICAgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IHRvIGJl77yJLCBhbmQKICAgICAgICAgICAgICAgICAgICBzaG91bGQgbm90IGNvbnNpZGVyIHRoYXQgbXkgd2l0bmVzc2VzIGFyZSBiZWluZyBvdXRyYWdlb3VzbHkgdHJlYXRlZCwgd2hlbiBJCiAgICAgICAgICAgICAgICAgICAgb2ZmZXIgaGltIG9uZSB3aG8gaXMgYWRtaXR0ZWRseSBhIHNsYXZlLCB0byBiZSB0ZXN0ZWQgYnkgdG9ydHVyZSByZWdhcmRpbmcgdGhlaXIKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnksIGFuZCBoZSByZWZ1c2VzPyBGb3IgaGUgc3VyZWx5IGNhbm5vdCBtYWludGFpbiB0aGlzLCB0aGF0IGZvciBzb21lCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycywgd2hpY2ggaGUgaGltc2VsZiBkZXNpcmVzLCB0b3J0dXJlIGlzIGEgY2VydGFpbiB0ZXN0LCBhbmQgZm9yIG90aGVycwogICAgICAgICAgICAgICAgICAgIG5vdC4gPG1pbGVzdG9uZSBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZ1cnRoZXJtb3JlLCBtZW4gb2YgdGhlIGp1cnksIHRoZSBmaXJzdCB3aXRuZXNzIHRvIGdpdmUgdGhpcyB0ZXN0aW1vbnkgd2FzCiAgICAgICAgICAgICAgICAgICAgQWVzaXVzLCB0aGUgYnJvdGhlciBvZiB0aGUgcGxhaW50aWZmLiBIZSBub3cgZGVuaWVzIGl0LCBiZWNhdXNlIGhlIGhhcyBhbGxpZWQKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGluIHRoZSBzdWl0IHdpdGggQXBob2J1czsgYnV0IGF0IHRoYXQgdGltZSBoZSBnYXZlIHRoaXMgdGVzdGltb255IGFsb25nCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgb3RoZXIgd2l0bmVzc2VzLCBmb3IgaGUgaGFkIG5vIGRlc2lyZSB0byBwZXJqdXJlIGhpbXNlbGYsIG9yIHRvIHN1ZmZlcgogICAgICAgICAgICAgICAgICAgIHRoZSBwZW5hbHR5IHdoaWNoIHdvdWxkIHN0cmFpZ2h0d2F5IGZvbGxvdy4gU3VyZWx5IG5vdywgaWYgSSBoYWQgYmVlbiBnZXR0aW5nIHVwCiAgICAgICAgICAgICAgICAgICAgZmFsc2UgdGVzdGltb255LCBJIHNob3VsZCBub3QgaGF2ZSBwdXQgdGhpcyBtYW4gaW4gbXkgbGlzdCBvZiB3aXRuZXNzZXMsIHNlZWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgd2FzIG1vcmUgaW50aW1hdGUgd2l0aCBBcGhvYnVzIHRoYW4gd2l0aCBhbnlvbmUgZWxzZSBpbiB0aGUgd29ybGQsIGFuZAogICAgICAgICAgICAgICAgICAgIGtub3dpbmcgdGhhdCBoZSB3YXMgZ29pbmcgdG8gcGxlYWQgZm9yIGhpbSBpbiB0aGUgc3VpdCwgYW5kIHRoYXQgaGUgd2FzIGFuCiAgICAgICAgICAgICAgICAgICAgYWR2ZXJzYXJ5IG9mIG15IG93bi4gSXQgaXMgbm90IHJlYXNvbmFibGUgdGhhdCBvbmUgc2hvdWxkIGNhbGwgYXMgd2l0bmVzcyB0byBhCiAgICAgICAgICAgICAgICAgICAgZmFsc2Ugc3RhdGVtZW50IG9uZSB3aG8gaXMgYW4gb3Bwb25lbnQgb2YgaGlzIG93biwgYW5kIGEgYnJvdGhlciBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcnkuIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9InNlY3Rpb24iIC8+SSBoYXZlIG1hbnkgd2l0bmVzc2VzIHRvIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMsIGFuZCBjaXJjdW1zdGFudGlhbCBwcm9vZnMgbm8gZmV3ZXIgaW4gbnVtYmVyIHRoYW4gdGhlIHdpdG5lc3Nlcy4gSW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgcGxhY2UsIGlmIGhlIGRpZCBub3QgaW4gdmVyeSB0cnV0aCBnaXZlIHRoaXMgdGVzdGltb255LCBoZSB3b3VsZCBub3QgYmUKICAgICAgICAgICAgICAgICAgICBkZW55aW5nIGl0IG5vdywgYnV0IHdvdWxkIGhhdmUgZG9uZSBzbyBhdCBvbmNlIGluIHRoZSBjb3VydHJvb20sIHdoZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbiB3YXMgcmVhZCwgZm9yIGl0IHdvdWxkIGhhdmUgYW5zd2VyZWQgaGlzIHB1cnBvc2UgYmV0dGVyIHRoZW4gdGhhbgogICAgICAgICAgICAgICAgICAgIG5vdy4gSW4gdGhlIHNlY29uZCBwbGFjZSBBZXNpdXMgd291bGQgbm90IGhhdmUga2VwdCBxdWlldCwgYnV0IHdvdWxkIGhhdmUgc3VlZAogICAgICAgICAgICAgICAgICAgIG1lIGZvciBkYW1hZ2VzLCBpZiB3aXRob3V0IGNhdXNlIEkgaGFkIG1hZGUgaGltIGxpYWJsZSB0byBhIGNoYXJnZSBvZiBiZWFyaW5nCiAgICAgICAgICAgICAgICAgICAgZmFsc2Ugd2l0bmVzcyBhZ2FpbnN0IGhpcyBicm90aGVyLCBhIGNoYXJnZSBvbiB3aGljaCBtZW4gcnVuIHRoZSByaXNrIGJvdGggb2YKICAgICAgICAgICAgICAgICAgICBkYW1hZ2VzIGluIG1vbmV5IGFuZCB0aGUgbG9zcyBvZiBjaXRpemVuc2hpcC4gPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgaW4gc2Vla2luZyB0byBicmluZyB0aGUgdHJ1dGggb2YgdGhlIG1hdHRlciB0byBsaWdodCwgaGUgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlbWFuZGVkIG9mIG1lIHRoZSBzbGF2ZSB3aG8gd3JvdGUgdGhlIGRlcG9zaXRpb25zLCBpbiBvcmRlciB0aGF0LCBpZiBJIHJlZnVzZWQKICAgICAgICAgICAgICAgICAgICB0byBnaXZlIGhpbSB1cCwgSSBtaWdodCBzZWVtIHRvIGhhdmUgbm8ganVzdCBncm91bmQgZm9yIG15IHN0YXRlbWVudHMuIEJ1dCwgYXMKICAgICAgICAgICAgICAgICAgICBpdCBpcywgc28gZmFyIGZyb20gZG9pbmcgYW55dGhpbmcgb2YgdGhlIHNvcnQsIGhlIHJlZnVzZWQgdG8gYWNjZXB0IHRoZSBzbGF2ZQogICAgICAgICAgICAgICAgICAgIGZvciB0b3J0dXJlLCB3aGVuIEksIG9uIGhpcyBkZW5pYWwgdGhhdCBoZSBoYWQgZ2l2ZW4gdGhlIGV2aWRlbmNlLCBvZmZlcmVkIGhpbS4KICAgICAgICAgICAgICAgICAgICBTbyBwbGFpbiBpcyBpdCB0aGF0IHJlZ2FyZGluZyB0aGlzIG1hdHRlciB0b28gYm90aCBoZSBhbmQgQXBob2J1cyBhcyB3ZWxsIHdlcmUKICAgICAgICAgICAgICAgICAgICBhbGlrZSB1bndpbGxpbmcgdG8gaGF2ZSByZWNvdXJzZSB0byB0b3J0dXJlLiA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBteSB3b3JkcyBhcmUgdHJ1ZSwgdGhhdCBhZnRlcgogICAgICAgICAgICAgICAgICAgIEFlc2l1cyBoYWQgZ2l2ZW4gaGlzIHRlc3RpbW9ueSB3aXRoIHRoZSBvdGhlciB3aXRuZXNzZXMsIGhlIG1hZGUgbm8gZGVuaWFsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3QsIHdoZW4sIHN0YW5kaW5nIGJ5IHRoZSBwbGFpbnRpZmYncyBzaWRlIGluIHRoZSBjb3VydHJvb20sIGhlIGhlYXJkIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gcmVhZCwgYW5kIHRoYXQsIHdoZW4gSSBvZmZlcmVkIHRoZSBzbGF2ZSB0byB0aGVtIHRvIGJlIHF1ZXN0aW9uZWQgYnkKICAgICAgICAgICAgICAgICAgICB0b3J0dXJlIHJlZ2FyZGluZyBhbGwgdGhlc2UgbWF0dGVycywgaGUgcmVmdXNlZCB0byBhY2NlcHQgdGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmZXLigJRyZWdhcmRpbmcgZWFjaCBvZiB0aGVzZSBwb2ludHMgc2V2ZXJhbGx5IEkgc2hhbGwgcHJvZHVjZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3Nlcy4gUGxlYXNlIGNhbGwgdGhlbSBoZXJlLjxxdW90ZSB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMTkiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHdpc2ggbm93IHRvCiAgICAgICAgICAgICAgICAgICAgc2V0IGZvcnRoIHRvIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCB3aGF0IEkgY29uc2lkZXIgYSBzdHJvbmdlciBwcm9vZiB0aGFuIGFsbAogICAgICAgICAgICAgICAgICAgIHRob3NlIHRoYXQgaGF2ZSBiZWVuIG1lbnRpb25lZCwgdG8gc2hvdyB0aGF0IHRoZSBwbGFpbnRpZmYgZGlkIGdpdmUgdGhpcyBhbnN3ZXIuCiAgICAgICAgICAgICAgICAgICAgV2hlbiwgZGVzcGl0ZSB0aGUgYWRtaXNzaW9ucyB3aGljaCBoZSBpcyBwcm92ZWQgdG8gaGF2ZSBtYWRlLCBoZSBkZW1hbmRlZCBvZiBtZQogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiBmb3IgdG9ydHVyZSwgSSB3YXMgc28KICAgICAgICAgICAgICAgICAgICBlYWdlciB0byBzaG93IG9uIHRoZSBzcG90IHRoYXQgdGhpcywgdG9vLCB3YXMgYSBzdWJ0ZXJmdWdlIG9uIGhpcyBwYXJ0LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgd2hhdCBkbyB5b3UgdGhpbmsgSSBkaWQ/IDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9InNlY3Rpb24iIC8+SSBzdW1tb25lZCBBcGhvYnVzIHRvCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSBldmlkZW5jZSBhZ2FpbnN0IERlbW8sIGhpcyB1bmNsZSBhbmQgYSBwYXJ0bmVyIGluIGhpcyBjcmltZXMuIEkgd3JvdGUgb3V0CiAgICAgICAgICAgICAgICAgICAgdGhlIHRlc3RpbW9ueSB3aGljaCBoZSBub3cgYXR0YWNrcyBhcyBmYWxzZSBhbmQgb3JkZXJlZCBoaW0gdG8gbWFrZSBhIGRlcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICB0byBpdC4gQXQgZmlyc3QgaGUgYnJhemVubHkgcmVmdXNlZCwgYnV0IHdoZW4gdGhlIGFyYml0cmF0b3IgYmFkZSBoaW0gZGVwb3NlLCBvcgogICAgICAgICAgICAgICAgICAgIGRlbnkgdGhlIGZhY3QgdW5kZXIgb2F0aCwgaGUgZGVwb3NlZCwgc29yZWx5IGFnYWluc3QgaGlzIHdpbGwuIEFuZCB5ZXQgaWYgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuIHdhcyBhIHNsYXZlLCBhbmQgaGFkIG5vdCBiZWVuIGFscmVhZHkgYWRtaXR0ZWQgYnkgQXBob2J1cyBoZXJlIHRvIGJlIGZyZWUsCiAgICAgICAgICAgICAgICAgICAgd2hhdCBpbiB0aGUgd29ybGQgaW5kdWNlZCBoaW0gdG8gbWFrZSB0aGlzIGRlcG9zaXRpb24/IFdoeSBkaWQgaGUgbm90IGRlbnkgaXQgb24KICAgICAgICAgICAgICAgICAgICBvYXRoLCBhbmQgc28gZ2V0IGZyZWUgb2YgdGhlIGFmZmFpcj8gPG1pbGVzdG9uZSBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5QcmF5IG5vdGUKICAgICAgICAgICAgICAgICAgICB0aGF0IGluIHJlZ2FyZCB0byB0aGlzIG1hdHRlciBhbHNvIEkgd2FzIHJlYWR5IHRvIGdpdmUgb3ZlciB0byBoaW0gZm9yIHRvcnR1cmUKICAgICAgICAgICAgICAgICAgICB0aGUgc2xhdmUgd2hvIGhhZCB3cml0dGVuIHRoZSBkZXBvc2l0aW9uLCB3aG8gd291bGQga25vdyBoaXMgb3duIGhhbmR3cml0aW5nLAogICAgICAgICAgICAgICAgICAgIGFuZCB3aG8gY2xlYXJseSByZW1lbWJlcmVkIHRoYXQgQXBob2J1cyBoYWQgbWFkZSB0aGUgZGVwb3NpdGlvbi4gSSB3YXMgcmVhZHkgdG8KICAgICAgICAgICAgICAgICAgICBkbyB0aGlzLCBub3QgZm9yIHdhbnQgb2Ygd2l0bmVzc2VzIHdobyB3ZXJlIHByZXNlbnQsIGZvciB0aGVyZSB3ZXJlIHNvbWU7IGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQgaGUgbWlnaHQgbm90IGFjY3VzZSB0aGVzZSBtZW4gb2YgZ2l2aW5nIGZhbHNlIHRlc3RpbW9ueSwgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0IG9mIHRoZSB0b3J0dXJlIG1pZ2h0IHN1cHBvcnQgdGhlbS4gWWV0IGl0IGlzIG5vdCBmYWlyIHRvIGNvbmRlbW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIG9uIGhpcyBhY2NvdW50LiBUaGV5IGFsb25lIG9mIG1lbiB3aG8gaGF2ZSBhcyB5ZXQgc3Rvb2QgdHJpYWwgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgeW91IGNhbiBzaG93IHRoYXQgdGhlIHBsYWludGlmZiBoaW1zZWxmIGhhcyBib3JuZSB3aXRuZXNzIHRvIHRoZWlyIHRlc3RpbW9ueSBhcwogICAgICAgICAgICAgICAgICAgIHRvIHRoZXNlIG1hdHRlcnMuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGgsIHRha2UgdGhlIGNoYWxsZW5nZSBhbmQgdGhlIGRlcG9zaXRpb24uPHF1b3RlIHR5cGU9IkNoYWxsZW5nZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHF1b3RlIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnYWwgdGVzdHMgd2hpY2ggaGUgaGFzIHJlZnVzZWQsIGFuZCBzbyBudW1lcm91cyB0aGUgcHJvb2ZzIGJ5IHdoaWNoIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgc2hvd24gdG8gYmUgYWN0aW5nIHdpdGggbWFsaWNlIGFuZCBpbnNpbmNlcml0eTsgeWV0IGhlIGRlbWFuZHMgdGhhdCB5b3UgcHV0CiAgICAgICAgICAgICAgICAgICAgY3JlZGVuY2UgaW4gaGlzIG93biB3aXRuZXNzZXMsIGFuZCBoZSBzbGFuZGVycyBtaW5lLCBhbmQgZGVjbGFyZXMgdGhhdCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBpcyBmYWxzZS48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgd2lzaCBub3cgdG8gc3BlYWsgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyIG9uIHRoZSBiYXNpcyBvZiBwcm9iYWJpbGl0aWVzLiBJIGFtIGNlcnRhaW4gdGhhdCB5b3Ugd291bGQgYWxsIGFncmVlIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aG9zZSB3aG8gZ2l2ZSBmYWxzZSB0ZXN0aW1vbnkgYXJlIGxlZCB0byBkbyBzbyBieSBicmliZXMgdGhyb3VnaCBzdHJlc3Mgb2YKICAgICAgICAgICAgICAgICAgICBwb3ZlcnR5LCBvciBieSBmcmllbmRzaGlwLCBvciBlbHNlIGJ5IGVubWl0eSB0b3dhcmQgdGhlIG9wcG9zaXRlIHBhcnR5IGluIHRoZQogICAgICAgICAgICAgICAgICAgIHN1aXQuIDxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IG5vIG9uZSBvZiB0aGVzZSByZWFzb25zIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBsZWQgdGhlIG1lbiB0byB0ZXN0aWZ5IGluIG15IGZhdm9yLiBOb3QgZnJpZW5kc2hpcDsgaG93IGNvdWxkIHRoYXQgYmUsIHNlZWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBhcmUgbm90IGVuZ2FnZWQgaW4gdGhlIHNhbWUgcHVyc3VpdHMsIG5vciBhcmUgdGhleSBvZiBsaWtlIGFnZSwgSSB3aWxsCiAgICAgICAgICAgICAgICAgICAgbm90IHNheSB3aXRoIG1lLCBidXQgd2l0aCBvbmUgYW5vdGhlcj8gTm90IGVubWl0eSBhZ2FpbnN0IG15IGFkdmVyc2FyeSwgdGhhdCBpcwogICAgICAgICAgICAgICAgICAgIHBsYWluOyBmb3Igb25lIG9mIHRoZW0gaXMgaGlzIGJyb3RoZXIgYW5kIHBsZWFkcyBvbiBoaXMgc2lkZTsgUGhhbnVzIGlzIGEgY2xvc2UKICAgICAgICAgICAgICAgICAgICBmcmllbmQgYW5kIGEgbWVtYmVyIG9mIHRoZSBzYW1lIHRyaWJlOyBhbmQgUGhpbGlwIGlzIG5laXRoZXIgZnJpZW5kIG5vciBlbmVteSwKICAgICAgICAgICAgICAgICAgICBzbyB0aGF0IHRoaXMgbW90aXZlLCB0b28sIGNhbm5vdCBiZSBqdXN0bHkgY2hhcmdlZCBhZ2FpbnN0IHRoZW0uIDxtaWxlc3RvbmUgbj0iMjQiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIG5vIG9uZSBjb3VsZCBzYXkgdGhhdCBwb3ZlcnR5IHdhcyB0aGUKICAgICAgICAgICAgICAgICAgICBncm91bmQsIGZvciB0aGV5IGFsbCBwb3NzZXNzIG1lYW5zIHNvIGFtcGxlIHRoYXQgdGhleSB3aWxsaW5nbHkgYXNzdW1lIHRoZQogICAgICAgICAgICAgICAgICAgIGV4cGVuc2Ugb2YgcHVibGljIHNlcnZpY2VzLCBhbmQgZGlzY2hhcmdlIHdoYXRldmVyIGR1dGllcyBhcmUgbGFpZCB1cG9uIHRoZW0uCiAgICAgICAgICAgICAgICAgICAgQmVzaWRlcyBhbGwgdGhpcywgdGhleSBhcmUgd2VsbCBrbm93biB0byB5b3UsIGFuZCB5b3Uga25vdyBub3RoaW5nIHRvIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZGlzY3JlZGl0OyBmb3IgdGhleSBhcmUgd29ydGh5IGNpdGl6ZW5zLiBZZXQsIGlmIHRoZXkgYXJlIG5vdCBwb29yLCBub3IgZW5lbWllcwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBwbGFpbnRpZmYsIG5vciBmcmllbmRzIG9mIG1pbmUsIGhvdyBjYW4gaXQgYmUgcmlnaHQgdG8gc3VzcGVjdCB0aGVtIG9mCiAgICAgICAgICAgICAgICAgICAgYmVhcmluZyBmYWxzZSB3aXRuZXNzPyBJIGNlcnRhaW5seSBkbyBub3Qga25vdy4gPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk15IG9wcG9uZW50IHdhcyBhd2FyZSBvZiBhbGwgdGhpcywgYW5kIGtuZXcKICAgICAgICAgICAgICAgICAgICBiZXR0ZXIgdGhhbiBhbnlib2R5IGVsc2UgdGhhdCB0aGVpciB0ZXN0aW1vbnkgd2FzIHRydWUsIGJ1dCBub25ldGhlbGVzcyBoZQogICAgICAgICAgICAgICAgICAgIGJyaW5ncyBmb3J3YXJkIGEgbWFsaWNpb3VzIGNoYXJnZSBhZ2FpbnN0IHRoZW0sIGFuZCBub3Qgb25seSBkZWNsYXJlcyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgZGlkIG5vdCBtYWtlIHRoZSBzdGF0ZW1lbnQgd2hpY2ggSSBoYXZlIHByb3ZlZCBpbiB0aGUgbW9zdCBjb25jbHVzaXZlIG1hbm5lcgogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgZGlkIG1ha2UsIGJ1dCBldmVuIGFzc2VydHMgdGhhdCB0aGUgbWFuLCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGlzIGluIGZhY3QgYSBzbGF2ZS4gSSB3aXNoIGluIGEgdmVyeSBmZXcgd29yZHMgdG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IGluIHRoaXMsIHRvbywgaGUgaXMgbHlpbmcuIEkgd2FzIHJlYWR5LCBtZW4gb2YgdGhlIGp1cnksIHJlZ2FyZGluZyB0aGlzCiAgICAgICAgICAgICAgICAgICAgcG9pbnQgYWxzbyB0byBnaXZlIG92ZXIgdG8gaGltIHRvIGJlIHRlc3RlZCBieSB0b3J0dXJlIG15IGZlbWFsZSBzbGF2ZXMsIHdobwogICAgICAgICAgICAgICAgICAgIHJlbWVtYmVyIHRoYXQgbXkgZmF0aGVyIG9uIGhpcyBkZWF0aC1iZWQgc2V0IHRoaXMgbWFuIGZyZWUuIDxtaWxlc3RvbmUgbj0iMjYiIHVuaXQ9InNlY3Rpb24iIC8+QmVzaWRlcyB0aGlzLCBteSBtb3RoZXIgd2FzIHJlYWR5IHRvIGNhbGwgdG8gaGVyIHNpZGUgbXkKICAgICAgICAgICAgICAgICAgICBzaXN0ZXIgYW5kIG15c2VsZiwgYW5kIHN3ZWFyLCB3aXRoIGltcHJlY2F0aW9ucyBvbiBvdXIgaGVhZHMgaWYgc2hlIHNwb2tlCiAgICAgICAgICAgICAgICAgICAgZmFsc2VseeKAlHdlIHdlcmUgaGVyIG9ubHkgY2hpbGRyZW4sIGFuZCBpdCB3YXMgZm9yIG91ciBzYWtlcyB0aGF0IHNoZQogICAgICAgICAgICAgICAgICAgIGdhdmUgaGVyc2VsZiB1cCB0byBhIGxpZmUgb2Ygd2lkb3dob29k4oCUdGhhdCBteSBmYXRoZXIgd2hlbiBoZSB3YXMKICAgICAgICAgICAgICAgICAgICBhYm91dCB0byBkaWUgaGFkIHNldCB0aGlzIG1hbiBmcmVlLCBhbmQgdGhhdCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gd2FzIHJlZ2FyZGVkIGJ5IHVzIGFzIGZyZWUgdGhlcmVhZnRlci4gTGV0IG5vIG9uZSBvZiB5b3UKICAgICAgICAgICAgICAgICAgICBhc3N1bWUgdGhhdCBzaGUgd291bGQgaGF2ZSBiZWVuIHdpbGxpbmcgdG8gbWFrZSB0aGlzIG9hdGggd2l0aCBpbXByZWNhdGlvbnMgb24KICAgICAgICAgICAgICAgICAgICBvdXIgaGVhZHMgaWYgc2hlIGhhZCBub3Qga25vd24gd2VsbCB0aGF0IHdoYXQgc2hlIHdhcyB0byBzd2VhciB0byB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZS48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNvbWUgbm93LCB0byBwcm92ZSB0aGF0IEkgYW0gc3BlYWtpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgdHJ1dGggYW5kIHRoYXQgd2Ugd2VyZSByZWFkeSB0byBkbyB0aGVzZSB0aGluZ3MsIGNhbGwgdGhlIHdpdG5lc3NlcwogICAgICAgICAgICAgICAgICAgICAgICB0aGVyZXRvLjxxdW90ZSB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5TbyBtYW55IHdlcmUKICAgICAgICAgICAgICAgICAgICB0aGUganVzdCBhcmd1bWVudHMgd2UgaGFkIHRvIHVyZ2UsIGFuZCBzbyByZWFkeSB3ZXJlIHdlIHRvIGhhdmUgcmVjb3Vyc2UgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCBpbmZhbGxpYmxlIHRlc3RzIHJlZ2FyZGluZyB0aGUgdGVzdGltb255IGdpdmVuOyBhbmQgeWV0IHRoZSBwbGFpbnRpZmYKICAgICAgICAgICAgICAgICAgICBldmFkZXMgYWxsIHRoZXNlLCBhbmQgZmFuY2llcyB0aGF0IGJ5IHNsYW5kZXJpbmcgbWUgcmVnYXJkaW5nIHRoZSB0cmlhbCB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhcyBhbHJlYWR5IHRha2VuIHBsYWNlLCBhbmQgYnJpbmdpbmcgYWNjdXNhdGlvbnMgYWdhaW5zdCBtZSwgaGUgY2FuIGluZHVjZSB5b3UKICAgICAgICAgICAgICAgICAgICB0byBjb252aWN0IHRoZSB3aXRuZXNzLOKAlGEgcGllY2Ugb2YgdHJpY2tlcnkgdGhlIG1vc3QgdW5mYWlyIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBtb3N0IHJhcGFjaW91cyBpbWFnaW5hYmxlLiA8bWlsZXN0b25lIG49IjI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoYXMgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIHN1Ym9ybmVkIG1lbiB0byBiZWFyIGZhbHNlIHdpdG5lc3MgYWJvdXQgdGhlc2UgbWF0dGVycywgaGF2aW5nIGFzIGNvLXdvcmtlcnMgaGlzCiAgICAgICAgICAgICAgICAgICAgYnJvdGhlci1pbi1sYXcgT25ldG9yLCBhbmQgVGltb2NyYXRlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGltb2NyYXRlczogcG9zc2libHkgdGhlIHNhbWUgYXMgdGhlIFRpbW9jcmF0ZXMgYWdhaW5zdCB3aG9tIERlbW9zdGhlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJlZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNCIgdmFsaWQ9InllcyI+RGVtLiAyNDwvYmlibD48L25vdGU+OyB3ZSBoYWQgbm8gZm9yZXdhcm5pbmcgb2YKICAgICAgICAgICAgICAgICAgICB0aGlzLCBhbmQgc3VwcG9zZWQgdGhhdCB0aGUgY29udGVzdCB3b3VsZCBiZSByZWdhcmRpbmcgdGhlIGRlcG9zaXRpb24gYWxvbmUsIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSBoYXZlIG5vdCBjb21lIHByZXBhcmVkIHdpdGggd2l0bmVzc2VzIHJlZ2FyZGluZyB0aGUgZ3VhcmRpYW5zaGlwCiAgICAgICAgICAgICAgICAgICAgYWNjb3VudHMuIE5ldmVydGhlbGVzcywgZGVzcGl0ZSB0aGUgZmVsbG93J3MgdHJpY2tlcnksIEkgdGhpbmsgdGhhdCwgc2ltcGx5IGJ5CiAgICAgICAgICAgICAgICAgICAgcmVjaXRpbmcgdGhlIGZhY3RzLCBJIHNoYWxsIGVhc2lseSBjb252aW5jZSB5b3UgdGhhdCBubyBtYW4gd2FzIGV2ZXIgbW9yZSBqdXN0bHkKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgdGhhbiBoZS4gPG1pbGVzdG9uZSBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm90IGJlY2F1c2UgSQogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgdG8gYWxsb3cgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IHRvIGJlIHB1dCB0bwogICAgICAgICAgICAgICAgICAgIHRoZSB0b3J0dXJlLCBub3IgYmVjYXVzZSBoZSBoaW1zZWxmIGFkbWl0dGVkIHRoZSBtYW4gdG8gYmUgYSBmcmVlbWFuLCBub3IgeWV0CiAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSB0aGVzZSB3aXRuZXNzZXMgZ2F2ZSB0aGVpciB0ZXN0aW1vbnk7IGJ1dCBiZWNhdXNlIGhlIHdhcyBwcm92ZWQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIHRha2VuIHBvc3Nlc3Npb24gb2YgbGFyZ2Ugc3VtcyBiZWxvbmdpbmcgdG8gbWUsIGFuZCBiZWNhdXNlIGhlIGRpZCBub3QgbGV0IHRoZQogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSwgdGhvdWdoIHRoZSBsYXdzIHNvIG9yZGVyZWQgYW5kIG15IGZhdGhlciBoYWQgc28gZGlyZWN0ZWQgaW4gaGlzIHdpbGwsIGFzCiAgICAgICAgICAgICAgICAgICAgSSBzaGFsbCBwbGFpbmx5IHNob3cgeW91LiBGb3IgdGhlc2Ugd2VyZSB0aGluZ3MgdGhhdCBhbnlvbmUgY291bGQgc2VlLCB0aGUgbGF3cywKICAgICAgICAgICAgICAgICAgICBuYW1lbHksIGFuZCB0aGUgYW1vdW50IG9mIG15IHByb3BlcnR5IHdoaWNoIHRoZXNlIG1lbiBoYWQgdGFrZW4gYXMgcGx1bmRlcjsgYnV0CiAgICAgICAgICAgICAgICAgICAgYXMgZm9yIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiwgbm9ib2R5IGtuZXcgZXZlbiB3aG8KICAgICAgICAgICAgICAgICAgICBoZSB3YXMuIFlvdSB3aWxsIHNlZSBmcm9tIHRoZSBjaGFyZ2VzIGJyb3VnaHQgYWdhaW5zdCBBcGhvYnVzIHRoYXQgdGhlc2UgdGhpbmdzCiAgICAgICAgICAgICAgICAgICAgYXJlIHNvLiA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgd2hlbiBJIGluc3RpdHV0ZWQgbXkgc3VpdCBhZ2FpbnN0IGhpbSBjb25jZXJuaW5nIGhpcwogICAgICAgICAgICAgICAgICAgIGd1YXJkaWFuc2hpcCwgSSBkaWQgbm90IGZpeCB0aGUgZGFtYWdlcyBhdCBhIGx1bXAgc3VtLCBhcyBvbmUgYnJpbmdpbmcgZm9yd2FyZCBhCiAgICAgICAgICAgICAgICAgICAgYmFzZWxlc3MgY2hhcmdlIG91dCBvZiBtYWxpY2Ugd291bGQgaGF2ZSBkb25lLCBidXQgc3BlY2lmaWVkIGVhY2ggaXRlbSwgc3RhdGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBzb3VyY2Ugb2YgZWFjaCwgdGhlIHByZWNpc2UgYW1vdW50LCBhbmQgdGhlIHBlcnNvbiBmcm9tIHdob20gaXQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICByZWNlaXZlZC4gSW4gbm8gY2FzZSBkaWQgSSBhZGQgbWVudGlvbiBvZiA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gYXMgaGF2aW5nIGtub3dsZWRnZSBvZiBhbnkgb2YgdGhlc2UgbWF0dGVycy4gPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5IZW5jZSB0aGlzIGlzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNvbXBsYWludDoKICAgICAgICAgICAgICAgICAgICDigJxEZW1vc3RoZW5lcyBtYWtlcyB0aGUgZm9sbG93aW5nIGNoYXJnZXMgYWdhaW5zdCBBcGhvYnVzLiBBcGhvYnVzIGhhcwogICAgICAgICAgICAgICAgICAgIGluIGhpcyBwb3NzZXNzaW9uIG1vbmV5cyBvZiBtaW5lLCByZWNlaXZlZCBieSBoaW0gaW4gaGlzIGNhcGFjaXR5IGFzIGd1YXJkaWFuLAogICAgICAgICAgICAgICAgICAgIGFzIGZvbGxvd3M6IGVpZ2h0eSBtaW5hZSwgd2hpY2ggaGUgcmVjZWl2ZWQgYXMgdGhlIG1hcnJpYWdlLXBvcnRpb24gb2YgbXkgbW90aGVyCiAgICAgICAgICAgICAgICAgICAgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiBteSBmYXRoZXIncyB3aWxsLuKAnSBUaGlzIGlzIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzdW1zIG9mIHdoaWNoIEkgY2xhaW0gdG8gaGF2ZSBiZWVuIGRlZnJhdWRlZC4gTm93IHdoYXQgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uIG9mIHRoZSB3aXRuZXNzZXM/IOKAnFRoYXQgdGhleSB3ZXJlIHByZXNlbnQgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3IsIE5vdGhhcmNodXMsIHdoZW4gQXBob2J1cyBhZG1pdHRlZCB0aGF0IDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiB3YXMgYSBmcmVlbWFuLCBoYXZpbmcgYmVlbgogICAgICAgICAgICAgICAgICAgIGVtYW5jaXBhdGVkIGJ5IHRoZSBmYXRoZXIgb2YgRGVtb3N0aGVuZXMu4oCdIDxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2lkZXIgbm93IGZvciB5b3Vyc2VsdmVzIHdoZXRoZXIgaW4geW91ciBqdWRnZW1lbnQgdGhlcmUKICAgICAgICAgICAgICAgICAgICBjb3VsZCBiZSBhbiBvcmF0b3IsIG9yIHNvcGhpc3Qgb3IgbWFnaWNpYW4gc28gd29uZHJvdXNseSBjbGV2ZXIgaW4gc3BlYWtpbmcgYXMKICAgICAgICAgICAgICAgICAgICBieSBtZWFucyBvZiB0aGlzIHRlc3RpbW9ueSB0byBjb252aW5jZSBhbnkgbWFuIG9uIGVhcnRoIHRoYXQgQXBob2J1cyBpcyBpbgogICAgICAgICAgICAgICAgICAgIHBvc3Nlc3Npb24gb2YgdGhlIG1hcnJpYWdlLXBvcnRpb24gb2YgdGhlIHNwZWFrZXIncyBtb3RoZXIuIFdoYXQgaW4gaGVhdmVuJ3MKICAgICAgICAgICAgICAgICAgICBuYW1lIHdvdWxkIGhlIHNheT8g4oCcQXBob2J1cyBoYXMgYWRtaXR0ZWQgdGhhdCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gaXMgYSBmcmVlbWFuLuKAnSBBbmQgd2h5IG9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhY2NvdW50IGlzIGhlIGFueSB0aGUgbW9yZSBpbiBwb3NzZXNzaW9uIG9mIHRoZSBtYXJyaWFnZS1wb3J0aW9uPyBUaGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgd291bGQgc3VyZWx5IG5vdCBzZWVtIHRvIHByb3ZlIGl0LiA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBob3cgd2FzIGl0IHByb3ZlZD8gSW4gdGhlIGZpcnN0IHBsYWNlLCBUaGVyaXBwaWRlcywgaGlzIGNvLXRydXN0ZWUsCiAgICAgICAgICAgICAgICAgICAgdGVzdGlmaWVkIHRoYXQgaGUgaGFkIGdpdmVuIGhpbSB0aGUgbW9uZXkuIFNlY29uZGx5LCBEZW1vLCBoaXMgdW5jbGUsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICByZXN0IG9mIHRoZSB3aXRuZXNzZXMgd2hvIHdlcmUgcHJlc2VudCwgdGVzdGlmaWVkIHRoYXQgaGUgYWdyZWVkIHRvIHN1cHBseSBteQogICAgICAgICAgICAgICAgICAgIG1vdGhlciB3aXRoIG1haW50ZW5hbmNlLCBhcyBiZWluZyBpbiBwb3NzZXNzaW9uIG9mIGhlciBwb3J0aW9uLiBBZ2FpbnN0IHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIGhlIGhhcyBsb2RnZWQgbm8gY2hhcmdlcywgcGxhaW5seSBiZWNhdXNlIGhlIGtuZXcgdGhhdCB0aGVpciB0ZXN0aW1vbnkgd2FzCiAgICAgICAgICAgICAgICAgICAgdHJ1ZS4gQmVzaWRlcyB0aGlzLCBteSBtb3RoZXIgd2FzIHJlYWR5IHRvIGNhbGwgdG8gaGVyIHNpZGUgbXkgc2lzdGVyIGFuZAogICAgICAgICAgICAgICAgICAgIG15c2VsZiwgYW5kIHN3ZWFyIHdpdGggaW1wcmVjYXRpb25zIG9uIG91ciBoZWFkcywgaWYgc2hlIHNwb2tlIGZhbHNlbHksIHRoYXQKICAgICAgICAgICAgICAgICAgICBBcGhvYnVzIGhhZCByZWNlaXZlZCBoZXIgbWFycmlhZ2UtcG9ydGlvbiBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zIG9mIG15IGZhdGhlcidzCiAgICAgICAgICAgICAgICAgICAgd2lsbC4gPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5TaGFsbCB3ZSwgdGhlbiwgc2F5LCBvciBzaGFsbCB3ZSBub3QsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoYXMgcG9zc2Vzc2lvbiBvZiB0aGVzZSBlaWdodHkgbWluYWU/IEFuZCB3YXMgaXQgb24gdGhlIGV2aWRlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd2l0bmVzc2VzIGhlcmUgb3Igb2YgdGhvc2UgdGhhdCBoZSB3YXMgY29udmljdGVkPyBJIHRoaW5rIGl0IHdhcyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBvZiB0cnV0aC4gSGUgaGFzIGVuam95ZWQgdGhlIGludGVyZXN0IG9uIHRoaXMgc3VtIGZvciB0ZW4geWVhcnMsIGFuZAogICAgICAgICAgICAgICAgICAgIGV2ZW4gdGhvdWdoIGp1ZGdlbWVudCBoYXMgYmVlbiBnaXZlbiBhZ2FpbnN0IGhpbSwgY2Fubm90IGJyaW5nIGhpbXNlbGYgdG8gcGF5IGl0CiAgICAgICAgICAgICAgICAgICAgYmFjay4gRGVzcGl0ZSB0aGlzLCBoZSBkZWNsYXJlcyB0aGF0IGhlIGhhcyBiZWVuIG91dHJhZ2VvdXNseSB0cmVhdGVkIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgbG9zdCB0aGUgc3VpdCBieSByZWFzb24gb2YgdGhlc2Ugd2l0bmVzc2VzLiBZZXQgbm90IG9uZSBvZiB0aGVtIHRlc3RpZmllZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFkIHJlY2VpdmVkIHRoZSBtYXJyaWFnZS1wb3J0aW9uLiA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQgdG8gdGhlIG1hcml0aW1lIGxvYW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5XaXRoIHJlZmVyZW5jZSB0byB0aGVzZSBpdGVtcyBzZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjciIHZhbGlkPSJ5ZXMiPkRlbS4gMjc8L2JpYmw+PC9ub3RlPiB0aGUgc29mYS1tYWtlcnMsIGFuZCB0aGUgaXJvbiBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgaXZvcnkgdGhhdCB3ZXJlIGxlZnQgbWUsIGFuZCBteSBzaXN0ZXIncyBtYXJyaWFnZS1wb3J0aW9uLCBhdCB0aGUgcHVybG9pbmluZyBvZgogICAgICAgICAgICAgICAgICAgIHdoaWNoIEFwaG9idXMgY29ubml2ZWQgaW4gb3JkZXIgdG8gc2VjdXJlIGZvciBoaW1zZWxmIHRoZSByaWdodCB0byB0YWtlIHdoYXRldmVyCiAgICAgICAgICAgICAgICAgICAgaGUgcGxlYXNlZCBvZiBteSBnb29kcywgbGlzdGVuLCBhbmQgc2VlIGhvdyBqdXN0IHdhcyB0aGUgdmVyZGljdCBnaXZlbiBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgaGltLCBhbmQgaG93IGFic3VyZCBpdCB3b3VsZCBoYXZlIGJlZW4gdG8gZXhhbWluZSA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gYnkgdG9ydHVyZSByZWdhcmRpbmcgYW55IG9mIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycy4gPG1pbGVzdG9uZSBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkZvciBhcwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZHMgdGhlIHB1cmxvaW5pbmcgb2YgZnVuZHMgYXQgd2hpY2ggeW91IGNvbm5pdmVkIHRoZXJlIGlzIGEgbGF3IHdoaWNoCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2x5IGRlY2xhcmVzIHRoYXQgeW91IGFyZSByZXNwb25zaWJsZSBmb3IgdGhlbSBleGFjdGx5IGFzIGlmIHlvdSBoYWQgdGhlbQogICAgICAgICAgICAgICAgICAgIGluIHlvdXIgb3duIHBvc3Nlc3Npb24uIFNvIHdoYXQgaGFzIHRoZSBsYXcgdG8gZG8gd2l0aCB0aGUgdGVzdGluZyBvZiBhIHNsYXZlIGJ5CiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZT8gQnV0IGluIHRoZSBtYXR0ZXIgb2YgdGhlIG1hcml0aW1lIGxvYW4geW91IG1hZGUgY29tbW9uIGNhdXNlIHdpdGgKICAgICAgICAgICAgICAgICAgICAgICAgWHV0aHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SW4gdGhlIGludmVudG9yeSBvZiB0aGUgZXN0YXRlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmYXRoZXIgb2YgRGVtb3N0aGVuZXMsIGdpdmVuIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3IiB2YWxpZD0ieWVzIj5EZW0uIDI3PC9iaWJsPiwgdGhlcmUKICAgICAgICAgICAgICAgICAgICAgICAgaXMgbWVudGlvbiBvZiBhIGJvdHRvbXJ5IGxvYW4gdG8gWHV0aHVzLCBhbW91bnRpbmcgdG8gc2V2ZW50eSBtaW5hZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgZGl2aWRlZCB0aGUgbW9uZXkgd2l0aCBoaW0sIGFuZCBkZXN0cm95ZWQgdGhlIGNvbnRyYWN0LCBhbmQgbm93IHRoYXQgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZCBldmVyeXRoaW5nIHRvIHN1aXQgeW91ciB3aXNoLCBhbmQgaGF2ZSBkb25lIGF3YXkgd2l0aCB0aGUgZG9jdW1lbnRhcnkKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSDvvIhhcyBEZW1vIHRlc3RpZmllZCBhZ2FpbnN0IHlvde+8iSwgeW91IGhhdmUgcmVjb3Vyc2UgdG8KICAgICAgICAgICAgICAgICAgICB0cmlja2VyeSwgYW5kIGVuZGVhdm9yIHRvIG1pc2xlYWQgdGhlc2UgZ2VudGxlbWVuLiA8bWlsZXN0b25lIG49IjM3IiB1bml0PSJzZWN0aW9uIiAvPlJlZ2FyZGluZyB0aGUgc29mYS1tYWtlcnMsIGlmIHlvdSB0b29rIG1vbmV5LCBhbmQgbWFkZSBsYXJnZQogICAgICAgICAgICAgICAgICAgIHByb2ZpdHMgZm9yIHlvdXJzZWxmIGJ5IG1ha2luZyBsb2FucyBvbiBzZWN1cml0eSB0aGF0IHdhcyBtaW5l4oCUeW91LAogICAgICAgICAgICAgICAgICAgIHdobyBzaG91bGQgcmF0aGVyIGhhdmUgcHJldmVudGVkIG90aGVycyBmcm9tIGRvaW5nIHNv4oCUYW5kIGZpbmFsbHkgbWFkZQogICAgICAgICAgICAgICAgICAgIGF3YXkgd2l0aCB0aGUgc2xhdmVzIGFsdG9nZXRoZXIsIHdoYXQsIHByYXksIGNhbiB0aGUgd2l0bmVzc2VzIGRvIGluIHlvdXIKICAgICAgICAgICAgICAgICAgICBiZWhhbGY/IFRoZXNlIG1lbiBhdCBhbnkgcmF0ZSBoYXZlIG5vdCB0ZXN0aWZpZWQgdGhhdCB5b3UgYWRtaXR0ZWQgbGVuZGluZyBtb25leQogICAgICAgICAgICAgICAgICAgIG9uIHRoZSBzZWN1cml0eSBvZiBteSBzbGF2ZXMsIGFuZCB0aGF0IHlvdSBhcHByb3ByaWF0ZWQgdGhlIHNsYXZlcyB0byB5b3Vyc2VsZi4KICAgICAgICAgICAgICAgICAgICBPbiB0aGUgY29udHJhcnksIGl0IHdhcyB5b3Ugd2hvIGFja25vd2xlZGdlZCB0aGlzIGluIHlvdXIgYWNjb3VudCwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyB0ZXN0aWZpZWQgdG8gdGhlIGZhY3QgYWdhaW5zdCB5b3UuIDxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgbG9vayB5b3UsIGFzIHRvIHRoZSBpdm9yeSBhbmQgaXJvbiwgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgdGhpcyB0byBzYXk6IGFsbCB0aGUgc2xhdmVzIG9mIHRoZSBob3VzZWhvbGQga25vdyB0aGF0IHRoZSBwbGFpbnRpZmYgdXNlZAogICAgICAgICAgICAgICAgICAgIHRvIHNlbGwgdGhlc2UgYXJ0aWNsZXMuIEkgYW0gcmVhZHkgbm93LCBhcyBJIHdhcyB0aGVuLCB0byBnaXZlIG92ZXIgdG8gaGltIGFueQogICAgICAgICAgICAgICAgICAgIG9uZSBvZiB0aGVzZSBzbGF2ZXMgd2hvbSBoZSBtYXkgY2hvb3NlIHRvIGJlIGV4YW1pbmVkIGJ5IHRvcnR1cmUuIElmIHRoZW4sIGhlCiAgICAgICAgICAgICAgICAgICAgYWxsZWdlcyB0aGF0IEkgcmVmdXNlIHRvIHN1cnJlbmRlciB0aGUgbWFuIHdobyBoYXMga25vd2xlZGdlIG9mIHRoZSBmYWN0cywgYW5kCiAgICAgICAgICAgICAgICAgICAgb2ZmZXIgaGltIG90aGVycyB3aG8gaGF2ZSBubyBzdWNoIGtub3dsZWRnZSwgaGUgd2lsbCBidXQgc2hvdyB0aGF0IGhlIG91Z2h0IGFsbAogICAgICAgICAgICAgICAgICAgIHRoZSBtb3JlIHRvIGhhdmUgYWNjZXB0ZWQgbXkgb2ZmZXIuIEZvciBpZiB0aG9zZSB3aG9tIEkgb2ZmZXJlZCB0byBoaW0gYXMgaGF2aW5nCiAgICAgICAgICAgICAgICAgICAga25vd2xlZGdlIG9mIHRoZSBmYWN0cywgZGVjbGFyZWQgdGhhdCBoZSBoYWQgbm9uZSBvZiB0aGVzZSBhcnRpY2xlcyBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9uLCBoZSB3b3VsZCBvZiBjb3Vyc2UgaGF2ZSBiZWVuIGFjcXVpdHRlZCBvZiB0aGUgY2hhcmdlLiA8bWlsZXN0b25lIG49IjM5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3RoaW5nIG9mIHRoZSBzb3J0IGlzIHRoZSB0cnV0aC4gSXQgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGJlZW4gcHJvdmVkIHBhc3QgYWxsIHF1ZXN0aW9uIHRoYXQgaGUgaGFkIHNvbGQgdGhlIGdvb2RzLCBhbmQgYXBwcm9wcmlhdGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHByb2ZpdHMuIFRoZXJlZm9yZSwgaGUgcGFzc2VkIG92ZXIgdGhvc2Ugd2hvIHdlcmUgYWRtaXR0ZWRseSBzbGF2ZXMsIGFuZAogICAgICAgICAgICAgICAgICAgIGRlbWFuZGVkIHRoYXQgYSBmcmVlbWFuIGJlIGV4YW1pbmVkIGJ5IHRvcnR1cmUsIHdob20gaXQgd291bGQgaGF2ZSBiZWVuIGEgY3JpbWUKICAgICAgICAgICAgICAgICAgICBmb3IgbWUgdG8gc3VycmVuZGVyOyBmb3IgaXQgd2FzIG5vdCBoaXMgcHVycG9zZSB0aGF0IGhlIHNob3VsZCBzaWZ0IG91dCB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIsIGJ1dCB0aGF0IGhlIG1pZ2h0IG1ha2UgYSBzcGVjaW91cyBhcmd1bWVudCBvdXQgb2YgdGhlIGZhY3QgdGhhdCBoaXMKICAgICAgICAgICAgICAgICAgICBkZW1hbmQgd2FzIHJlZnVzZWQuPG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWdhcmRpbmcsIHRoZXJlZm9yZSwgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgZmFjdHMsIGZpcnN0IHRoZSBtYXJyaWFnZS1wb3J0aW9uLCB0aGVuIGhpcyBjb25uaXZhbmNlIHdpdGggZnJhdWQsIHRoZW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHJlc3QsIHRoZXJlIHNoYWxsIGJlIHJlYWQgdG8geW91IHRoZSBsYXdzIGFuZCB0aGUgZGVwb3NpdGlvbnMsIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGhhdmUgZnVsbCBrbm93bGVkZ2UuPHF1b3RlIHR5cGU9Ikxhd3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+TGF3czwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48cXVvdGUgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGU+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdCBvbmx5IGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgZmFjdHMgYWxyZWFkeSBhZGR1Y2VkIGNhbiB5b3Ugc2VlIHRoYXQgQXBob2J1cyB3YXMgbm90IGluIGFueSByZXNwZWN0CiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgcHJlanVkaWNlZCBieSBteSByZWZ1c2FsIHRvIGdpdmUgdGhlIG1hbiB1cCBmb3IgdG9ydHVyZSwgYnV0IGFsc28gZnJvbQogICAgICAgICAgICAgICAgICAgIGEgY29uc2lkZXJhdGlvbiBvZiB0aGUgbWF0dGVyIGl0c2VsZi4gTGV0IHVzIHN1cHBvc2UgdGhhdCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gaXMgYmVpbmcgcmFja2VkIHVwb24gdGhlIHdoZWVsLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciB3aGF0IEFwaG9idXMgd291bGQgbW9zdCB3aXNoIGhpbSB0byBzYXkuIFdvdWxkIGl0IG5vdCBiZSB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBhd2FyZSB0aGF0IHRoZSBwbGFpbnRpZmYgaGFkIGFueSBvZiB0aGUgcHJvcGVydHkgaW4gaGlzIHBvc3Nlc3Npb24/IFdlbGwsCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZSBoZSBzYXlzIHNvLiBEb2VzIHRoYXQgcHJvdmUgdGhhdCB0aGUgcGxhaW50aWZmIGhhcyBub25lPyBGYXIgZnJvbSBpdDsKICAgICAgICAgICAgICAgICAgICBmb3IgSSBwcm9kdWNlZCBtZW4gd2hvIGtuZXcsIG1lbiB3aG8gcGFpZCBoaW0gdGhlIG1vbmV5LCBtZW4gd2hvIHdlcmUgcHJlc2VudCBpbgogICAgICAgICAgICAgICAgICAgIHBlcnNvbiwgYXMgd2l0bmVzc2VzLiBJdCBpcyBjb252aW5jaW5nIHByb29mLCBub3QgaWYgb25lIGlzIGlnbm9yYW50IHRoYXQgYSBtYW4KICAgICAgICAgICAgICAgICAgICBoYXMgc29tZXRoaW5nIGluIGhpcyBwb3NzZXNzaW9uIO+8iGZvciB0aGVyZSBtaWdodCBiZSBtYW55CiAgICAgICAgICAgICAgICAgICAgc3VjaO+8iSwgYnV0IGlmIG9uZSBrbm93cyB0aGF0IGhlIGhhcyBpdC4gPG1pbGVzdG9uZSBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb2YgdGhlIG1hbnkgd2l0bmVzc2VzIHdobyB0ZXN0aWZpZWQgYWdhaW5zdCB5b3UsIHdoYXQKICAgICAgICAgICAgICAgICAgICBvbmUgaGF2ZSB5b3Ugc3VlZCBmb3IgZmFsc2UgdGVzdGltb255PyBUZWxsIHVzLiBCdXQgeW91IGNhbm5vdC4gWWV0IHlvdSBwbGFpbmx5CiAgICAgICAgICAgICAgICAgICAgY29udmljdCB5b3Vyc2VsZiwgYW5kIHByb3ZlIHRoYXQgeW91IGxpZSB3aGVuIHlvdSBkZWNsYXJlIHRoYXQgeW91IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VvdXNseSB0cmVhdGVkLCBhbmQgdGhhdCB5b3UgbG9zdCB0aGUgc3VpdCB1bmp1c3RseSwgYmVjYXVzZSB0aGlzIG1hbiB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgZ2l2ZW4gdXAgdG8geW914oCUeW91IHdobyBtYWRlIG5vIGNoYXJnZSBvZiBnaXZpbmcgZmFsc2UgdGVzdGltb255CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgd2l0bmVzc2VzIHdobyB0ZXN0aWZpZWQgdGhhdCB5b3UgcmVjZWl2ZWQgYW5kIGhhZCBpbiB5b3VyIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHksIGNvbmNlcm5pbmcgd2hpY2ggeW91IGRlbWFuZGVkIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiBmb3IgdG9ydHVyZSB0byBwcm92ZSB0aGF0IGl0IHdhcyBuZXZlciBsZWZ0IHVzLiBJZiB5b3UKICAgICAgICAgICAgICAgICAgICBoYWQgcmVhbGx5IGJlZW4gd3JvbmdlZCwgaXQgd291bGQgaGF2ZSBiZWVuIG1vcmUgZml0dGluZyB0byBwcm9jZWVkIGFnYWluc3QKICAgICAgICAgICAgICAgICAgICB0aGVtLiBCdXQgeW91IHdlcmUgbm90IHdyb25nZWQsIGFuZCBhcmUgYnJpbmdpbmcgYSBiYXNlbGVzcyBzdWl0IG91dCBvZiBtYWxpY2UuCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNDIiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVyZSBhcmUKICAgICAgICAgICAgICAgICAgICBtYW55IHBvaW50cyBmcm9tIHdoaWNoIG9uZSBtYXkgc2VlIHlvdXIgcmFzY2FsaXR5LCBidXQgbW9zdCBvZiBhbGwgaWYgb25lIGhlYXJzCiAgICAgICAgICAgICAgICAgICAgaG93IHlvdSBhY3RlZCByZWdhcmRpbmcgdGhlIHdpbGwuIEZvciBhbHRob3VnaCBteSBmYXRoZXIsIG1lbiBvZiB0aGUganVyeSwgd3JvdGUKICAgICAgICAgICAgICAgICAgICBhIHdpbGwgY29udGFpbmluZyBhbiBpbnZlbnRvcnkgb2YgYWxsIHRoYXQgaGUgbGVmdCwgd2l0aCBpbnN0cnVjdGlvbnMgZm9yCiAgICAgICAgICAgICAgICAgICAgbGV0dGluZyB0aGUgcHJvcGVydHksIHRoaXMgd2lsbCBBcGhvYnVzIG5ldmVyIGdhdmUgdXAgdG8gbWUsIGxlc3QgSSBzaG91bGQgbGVhcm4KICAgICAgICAgICAgICAgICAgICBmcm9tIGl0IHRoZSB2YWx1ZSBvZiB0aGUgZXN0YXRlLCBhbmQgYWRtaXR0ZWQgcG9zc2Vzc2luZyBvbmx5IHRob3NlIGl0ZW1zIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgd2VyZSBzbyB3ZWxsIGtub3duIHRoYXQgaGUgY291bGQgbm90IGRlbnkgdGhhdCBoZSBoYWQgdGhlbS4gPG1pbGVzdG9uZSBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgd2lsbCwgYWNjb3JkaW5nIHRvIGhpcyBzdGF0ZW1lbnQsIGNvbnRhaW5lZCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHByb3Zpc2lvbnM6IHRoYXQgRGVtb3Bob24gc2hvdWxkIGF0IG9uY2UgcmVjZWl2ZSB0d28gdGFsZW50cywgYW5kIHNob3VsZCBtYXJyeQogICAgICAgICAgICAgICAgICAgIG15IHNpc3RlciB3aGVuIHNoZSBzaG91bGQgY29tZSBvZiBhZ2Ug77yIdGhpcyB3b3VsZCBiZSBpbiB0ZW4KICAgICAgICAgICAgICAgICAgICB5ZWFyc++8iTsgdGhhdCBBcGhvYnVzIGhpbXNlbGYgc2hvdWxkIGhhdmUgZWlnaHR5IG1pbmFlIHdpdGggbXkgbW90aGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgaG91c2UgdG8gbGl2ZSBpbjsgYW5kIHRoYXQgVGhlcmlwcGlkZXMgc2hvdWxkIGVuam95IHRoZSBpbnRlcmVzdCBvbgogICAgICAgICAgICAgICAgICAgIHNldmVudHkgbWluYWUgdW50aWwgSSBzaG91bGQgcmVhY2ggbWFuaG9vZC4gQWxsIHRoZSByZXN0IG9mIHRoZSBwcm9wZXJ0eSBsZWZ0IHRvCiAgICAgICAgICAgICAgICAgICAgbWUgYXBhcnQgZnJvbSB0aGVzZSBpdGVtcywgYW5kIHRoZSBjbGF1c2UgcmVnYXJkaW5nIHRoZSBsZXR0aW5nIG9mIHRoZSBlc3RhdGUsCiAgICAgICAgICAgICAgICAgICAgaGUgc3VwcHJlc3NlZCBmcm9tIHRoZSB3aWxsLCBub3QgdGhpbmtpbmcgdGhhdCBpdCB3YXMgdG8gaGlzIGludGVyZXN0IHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIHNob3VsZCBiZSBtYWRlIGtub3duIGluIHlvdXIgY291cnQuIDxtaWxlc3RvbmUgbj0iNDQiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgc2luY2UgaXQgd2FzIGFkbWl0dGVkIGJ5IEFwaG9idXMgaGltc2VsZiB0aGF0IG15IGZhdGhlciBvbiBoaXMKICAgICAgICAgICAgICAgICAgICBkZWF0aC1iZWQgZ2F2ZSB0byBlYWNoIG9mIHRoZXNlIG1lbiBzdWNoIGxhcmdlIHN1bXMgb2YgbW9uZXksIHRoZSBqdXJ5bWVuIGF0IHRoZQogICAgICAgICAgICAgICAgICAgIGZvcm1lciB0cmlhbCBjb25zaWRlcmVkIHRoZXNlIGFkbWlzc2lvbnMgdG8gYmUgYSBwcm9vZiBvZiB0aGUgc2l6ZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBlc3RhdGUuIEZvciB3aGVuIGEgbWFuIGdhdmUgb3V0IG9mIGhpcyBlc3RhdGUgZm91ciB0YWxlbnRzIGFuZCB0aHJlZSB0aG91c2FuZAogICAgICAgICAgICAgICAgICAgIGRyYWNobWFlIGJ5IHdheSBvZiBtYXJyaWFnZS1wb3J0aW9uIGFuZCBsZWdhY3ksIGl0IHdhcyBwbGFpbiB0aGF0IGhlIHRvb2sgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzdW1zLCBub3QgZnJvbSBhIHNtYWxsIGVzdGF0ZSwgYnV0IGZyb20gb25lIO+8iGJlcXVlYXRoZWQgdG8gbWXvvIkKICAgICAgICAgICAgICAgICAgICBvZiBtb3JlIHRoYW4gZG91YmxlIHRoaXMgYW1vdW50LiA8bWlsZXN0b25lIG49IjQ1IiB1bml0PSJzZWN0aW9uIiAvPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZvbGxvd2luZyBwYXNzYWdlIHVwIHRvIHRoZSBtaWRkbGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gaXMgcmVwZWF0ZWQgYWxtb3N0IHZlcmJhdGltIGZyb20gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNDUiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI3LjQ1PC9iaWJsPjwvbm90ZT4gRm9yIGl0IGNhbm5vdCBiZSBzdXBwb3NlZCB0aGF0IGhlIHdvdWxkIHdpc2ggdG8KICAgICAgICAgICAgICAgICAgICBsZWF2ZSBtZSwgaGlzIHNvbiwgaW4gcG92ZXJ0eSwgYW5kIGJlIGVhZ2VyIGZ1cnRoZXIgdG8gZW5yaWNoIHRoZXNlIG1lbiwgd2hvCiAgICAgICAgICAgICAgICAgICAgd2VyZSBhbHJlYWR5IHdlYWx0aHkuIE5vOyBpdCB3YXMgYmVjYXVzZSBvZiB0aGUgc2l6ZSBvZiB0aGUgZXN0YXRlIGxlZnQgdG8gbWUKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGdhdmUgdG8gVGhlcmlwcGlkZXMgdGhlIGludGVyZXN0IG9uIHNldmVudHkgbWluYWUsIGFuZCB0byBEZW1vcGhvbiB0aGF0CiAgICAgICAgICAgICAgICAgICAgb24gdGhlIHR3byB0YWxlbnRz4oCUdGhvdWdoIGhlIHdhcyBub3QgeWV0IHRvIG1hcnJ5IG15IHNpc3Rlci4gVGhlc2UKICAgICAgICAgICAgICAgICAgICBtb25leXMgaXQgaGFzIGJlZW4gcHJvdmVkIHRoYXQgQXBob2J1cyBuZXZlciBnYXZlIG92ZXIgdG8gbWUsIG5vciBldmVuIGFuIGFtb3VudAogICAgICAgICAgICAgICAgICAgIHNsaWdodGx5IGxlc3MuIFBhcnQgb2YgaXQgaGUgc2FpZCBoZSBoYWQgc3BlbnQsIHBhcnQgaGUgaGFkIG5ldmVyIHJlY2VpdmVkLCBwYXJ0CiAgICAgICAgICAgICAgICAgICAgaGUga25ldyBub3RoaW5nIGFib3V0LCBwYXJ0IHdhcyBpbiB0aGUgaGFuZHMgb2Ygc28tYW5kLXNvLCBwYXJ0IHdhcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBob3VzZSwgYW5kIG9mIHBhcnQgaGUgY291bGQgc2F5IGFueXRoaW5nIGV4Y2VwdCB3aGVuIGFuZCB3aGVyZSBoZSBoYWQgcGFpZCBpdAogICAgICAgICAgICAgICAgICAgIG92ZXIuIDxtaWxlc3RvbmUgbj0iNDYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5BcyB0byBoaXMKICAgICAgICAgICAgICAgICAgICBzdG9yeSBvZiBtb25leSBsZWZ0IGluIHRoZSBob3VzZSBJIHNoYWxsIGNsZWFybHkgcHJvdmUgdG8geW91IHRoYXQgaGUgaXMgbHlpbmcuCiAgICAgICAgICAgICAgICAgICAgVGhpcyBhcmd1bWVudCBoZSBzcGVjaW91c2x5IGludHJvZHVjZWQsIHdoZW4gaXQgaGFkIGJlY29tZSBjbGVhciB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgIHByb3BlcnR5IHdhcyBsYXJnZSBhbmQgd2FzIHVuYWJsZSB0byBzaG93IHRoYXQgaGUgaGFkIHBhaWQgaXQgYmFjaywgaW4gb3JkZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGl0IG1pZ2h0IGFwcGVhciBhIHJlYXNvbmFibGUgaW5mZXJlbmNlIHRoYXQgSSB3YXMgd3JvbmdmdWxseSBzZWVraW5nIHRvCiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlciB3aGF0IHdhcyBhbHJlYWR5IGluIG15IHBvc3Nlc3Npb24uIDxtaWxlc3RvbmUgbj0iNDciIHVuaXQ9InNlY3Rpb24iIC8+PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHBhc3NhZ2UgcmVwZWF0cyB2ZXJ5IGNsb3NlbHkgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlIG9mIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3LjU1IiB2YWxpZD0ieWVzIj5EZW0uIDI3LjU1LTU3PC9iaWJsPjwvbm90ZT4gSWYgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vIGNvbmZpZGVuY2UgaW4gdGhlc2UgbWVuIGl0IGlzIHBsYWluIHRoYXQgaGUgd291bGQgbmVpdGhlciBoYXZlIGVudHJ1c3RlZAogICAgICAgICAgICAgICAgICAgIHRoZW0gd2l0aCB0aGUgcmVzdCBvZiBoaXMgcHJvcGVydHksIG5vciwgaWYgaGUgaGFkIGxlZnQgdGhpcyBtb25leSBpbiB0aGUgd2F5CiAgICAgICAgICAgICAgICAgICAgYWxsZWdlZCwgd291bGQgaGUgaGF2ZSB0b2xkIHRoZW0gb2YgaXQuIEhvdywgdGhlbiwgZG8gdGhleSBrbm93IGFib3V0IGl0PyBCdXQsCiAgICAgICAgICAgICAgICAgICAgaWYgaGUgaGFkIGNvbmZpZGVuY2UgaW4gdGhlbSwgaGUgd291bGQgbm90LCBJIHRha2UgaXQsIGhhdmUgZ2l2ZW4gaW50byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhhbmRzIHRoZSBidWxrIG9mIGhpcyBwcm9wZXJ0eSwgYW5kIG5vdCBoYXZlIHB1dCB0aGVtIGluIGNoYXJnZSBvZiB0aGUgcmVzdC4gTm9yCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGUgaGF2ZSBlbnRydXN0ZWQgdGhpcyByZW1haW5kZXIgdG8gbXkgbW90aGVyIHRvIGtlZXAgYW5kIHRoZW4gaGF2ZQogICAgICAgICAgICAgICAgICAgIHBsZWRnZWQgaGVyIGhlcnNlbGYgaW4gbWFycmlhZ2UgdG8gdGhpcyBtYW4sIHdobyB3YXMgb25lIG9mIHRoZSBndWFyZGlhbnMuIEZvcgogICAgICAgICAgICAgICAgICAgIGl0IGlzIG5vdCByZWFzb25hYmxlIHRoYXQgaGUgc2hvdWxkIHNlZWsgdG8gbWFrZSB0aGUgbW9uZXkgc2VjdXJlIHRocm91Z2ggaGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB5ZXQgcHV0IG9uZSBvZiB0aGUgbWVuIHdob20gaGUgZGlzdHJ1c3RlZCBpbiBjb250cm9sIGJvdGggb2YgaGVyIGFuZCBvZiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaWYgdGhlcmUgd2VyZSBhbnkgdHJ1dGggaW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhpcywgZG8geW91IHN1cHBvc2UgdGhhdCBBcGhvYnVzIHdvdWxkIG5vdCBoYXZlIHRha2VuIG15IG1vdGhlciB0byB3aWZlLAogICAgICAgICAgICAgICAgICAgIGJlcXVlYXRoZWQgdG8gaGltIGFzIHNoZSB3YXMgYnkgbXkgZmF0aGVyPyBIZSBoYWQgYWxyZWFkeSB0YWtlbiBoZXIKICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZS1wb3J0aW9u4oCUdGhlIGVpZ2h0eSBtaW5hZeKAlGFzIHRob3VnaCBoZSB3ZXJlIGdvaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgbWFycnkgaGVyOyBidXQgaGUgc3Vic2VxdWVudGx5IG1hcnJpZWQgdGhlIGRhdWdodGVyIG9mIFBoaWxvbmlkZXMgb2YgTWVsaXRlLAogICAgICAgICAgICAgICAgICAgIGZyb20gbW90aXZlcyBvZiBhdmFyaWNlLCBpbiBvcmRlciB0aGF0LCBpbiBhZGRpdGlvbiB0byB3aGF0IGhlIGhhZCByZWNlaXZlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdXMsIGhlIG1pZ2h0IGdldCBmcm9tIGhpbSBvdGhlciBlaWdodHkgbWluYWUuIEJ1dCwgaWYgdGhlcmUgaGFkIGJlZW4gZm91cgogICAgICAgICAgICAgICAgICAgIHRhbGVudHMgaW4gdGhlIGhvdXNlLCBhbmQgaW4gaGVyIGN1c3RvZHksIGFzIGhlIGFsbGVnZXMsIGRvbid0IHlvdSBpbWFnaW5lIGhlCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSByYWNlZCB0byBnZXQgcG9zc2Vzc2lvbiBib3RoIG9mIGhlciBhbmQgb2YgdGhlbT8gPG1pbGVzdG9uZSBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5Xb3VsZCBoZSBoYXZlIGpvaW5lZCB3aXRoIGhpcyBjby10cnVzdGVlcyBpbiBzbyBzaGFtZWZ1bGx5CiAgICAgICAgICAgICAgICAgICAgcGx1bmRlcmluZyBteSB2aXNpYmxlIHByb3BlcnR5LCB3aGljaCBtYW55IG9mIHlvdSBrbmV3IGhhZCBiZWVuIGxlZnQgbWUsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhdmUgcmVmcmFpbmVkLCB3aGVuIGhlIGhhZCB0aGUgY2hhbmNlLCBmcm9tIHNlaXppbmcgYSBmdW5kIHRvIHRoZSBleGlzdGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3Ugd291bGQgbm90IGJlIGFibGUgdG8gdGVzdGlmeT8gV2hvIGNhbiBiZWxpZXZlIHRoaXM/IEl0IGlzIGltcG9zc2libGUsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5OyBpdCBpcyBpbXBvc3NpYmxlLiBObzsgYWxsIHRoZSBtb25leSB3aGljaCBteSBmYXRoZXIgbGVmdCB3YXMKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgYnVyaWVkIG9uIHRoZSBkYXkgb24gd2hpY2ggaXQgY2FtZSBpbnRvIHRoZSBoYW5kcyBvZiB0aGVzZSBtZW47IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQsIG5vdCBiZWluZyBhYmxlIHRvIHRlbGwgd2hlbiBhbmQgd2hlcmUgaGUgcGFpZCBiYWNrIGFueSBvZiBpdCwgbWFrZXMKICAgICAgICAgICAgICAgICAgICB1c2Ugb2YgdGhlc2UgYXJndW1lbnRzLCBob3BpbmcgdGhhdCBJIG1heSBzZWVtIHRvIGJlIGEgcmljaCBtYW4sIGFuZCBzbyBtZWV0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBubyBjb21wYXNzaW9uIGZyb20geW91LiA8bWlsZXN0b25lIG49IjUwIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlIG1hbnkgb3RoZXIgY2hhcmdlcyB0byBtYWtlIGFnYWluc3QgaGltLCBidXQgSSBoYXZlIG5vdAogICAgICAgICAgICAgICAgICAgIHRoZSByaWdodCB0byBzcGVhayBvZiB0aGUgaW5qdXJpZXMgSSBteXNlbGYgaGF2ZSBzdWZmZXJlZCwgd2hlbiB0aGUgd2l0bmVzcyBpcwogICAgICAgICAgICAgICAgICAgIGluIGRhbmdlciBvZiBsb3NpbmcgaGlzIGNpdmljIHJpZ2h0cy4gU3RpbGwgSSB3aXNoIHRvIHJlYWQgdG8geW91IGEgY2hhbGxlbmdlLAogICAgICAgICAgICAgICAgICAgIGZvciB5b3Ugd2lsbCBrbm93LCB3aGVuIHlvdSBoYXZlIGhlYXJkIGl0LCB0aGF0IHRoZSB0ZXN0aW1vbnkgd2FzIHRydWUsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgQXBob2J1cywgd2hvIG5vdyBkZWNsYXJlcyB0aGF0IGhlIGRlbWFuZHMgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IHRvIGJlIGV4YW1pbmVkIGFib3V0IGFsbCB0aGUgbWF0dGVycyBpbnZvbHZlZCBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdWl0LCBhdCBmaXJzdCBkZW1hbmRlZCBoaW0gb25seSBpbiByZWdhcmQgdG8gYSBxdWVzdGlvbiBvZiB0aGlydHkgbWluYWU7IGFuZCwKICAgICAgICAgICAgICAgICAgICBmdXJ0aGVybW9yZSwgdGhhdCBoZSBoYXMgYmVlbiBwdXQgdG8gbm8gZGlzYWR2YW50YWdlIGJlY2F1c2Ugb2YgdGhlIHRlc3RpbW9ueS4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSwgaW4gbXkgZGVzaXJlIHRvIHJlZnV0ZSBoaW0gaW4gZXZlcnkKICAgICAgICAgICAgICAgICAgICBwYXJ0aWN1bGFyLCBhbmQgaW4gbXkgYXR0ZW1wdCB0byBtYWtlIGNsZWFyIHRvIHlvdSBoaXMgdHJpY2tzIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICB2aWxsYWluaWVzLCBhc2tlZCBoaW0gaG93IGxhcmdlIHRoZSBzdW0gd2FzIHJlZ2FyZGluZyB3aGljaCBoZSBkZW1hbmRlZCB0bwogICAgICAgICAgICAgICAgICAgIGV4YW1pbmUgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+LCBhcyBvbmUgd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZSBvZiB0aGUgZmFjdHMuIFRvIHRoaXMgaGUgcmVwbGllZCBmYWxzZWx5LCB0aGF0IGl0IHdhcyBpbiByZWdhcmQgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgYW1vdW50LiDigJxXZWxsIHRoZW4s4oCdIHNhaWQgSSwg4oCcYXMgdG8gdGhpcyBJCiAgICAgICAgICAgICAgICAgICAgd2lsbCBnaXZlIHVwIHRvIHlvdSBmb3IgZXhhbWluYXRpb24gYnkgdG9ydHVyZSB0aGUgc2xhdmUgd2hvIGhhcyB0aGUgY29weSBvZgogICAgICAgICAgICAgICAgICAgIHlvdXIgY2hhbGxlbmdlIHRvIG1lLiA8bWlsZXN0b25lIG49IjUyIiB1bml0PSJzZWN0aW9uIiAvPklmLCB3aGVuIEkgaGF2ZSBnaXZlbgogICAgICAgICAgICAgICAgICAgIG9hdGggdGhhdCB5b3UgYWNrbm93bGVkZ2VkIHRoZSBtYW4gdG8gYmUgZnJlZSwgYW5kIHRoYXQgeW91IHNvIHRlc3RpZmllZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgRGVtbywgeW91IHdpbGwgc3dlYXIgdG8gdGhlIGNvbnRyYXJ5IHdpdGggaW1wcmVjYXRpb25zIHVwb24geW91ciBkYXVnaHRlciwgSQogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgdG8geW91IHRoZSBlbnRpcmUgc3VtLCBmb3Igd2hpY2ggeW91IHNoYWxsIGJlIHNob3duIGJ5IHRoZSBleGFtaW5hdGlvbgogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzbGF2ZSB0byBoYXZlIGF0IHRoZSBmaXJzdCBkZW1hbmRlZCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT47IGFuZCB0aGUgZGFtYWdlcyB3aGljaCB5b3Ugd2VyZSBjb25kZW1uZWQgdG8gcGF5IHNoYWxsCiAgICAgICAgICAgICAgICAgICAgYmUgbGVzc2VuZWQgYnkgdGh1cyBtdWNo4oCUdGhhdCBpcywgYnkgdGhlIGFtb3VudCBpbiByZWdhcmQgdG8gd2hpY2ggeW91CiAgICAgICAgICAgICAgICAgICAgZGVtYW5kZWQgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+LCB0byB0aGUgZW5kIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIGZvdW5kIHRvIGhhdmUgYmVlbiBwdXQgdG8gbm8gZGlzYWR2YW50YWdlIGJ5IHRoZSB3aXRuZXNzZXMu4oCdCiAgICAgICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgbj0iNTMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjaGFsbGVuZ2UgSSBtYWRlIHRvIGhpbSBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZSBvZiBtYW55IHdpdG5lc3NlczsgYnV0IGhlIHNhaWQgaGUgY291bGQgbm90IGFjY2VwdCBpdC4gWWV0LCBpZiBhIG1hbgogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgdG8gZ2l2ZSB0aGlzIGp1ZGdlbWVudCBpbiBoaXMgb3duIGZhdm9yLCBob3cgY2FuIGl0IGJlIHJpZ2h0IGZvciB5b3UsCiAgICAgICAgICAgICAgICAgICAgd2hvIGFyZSB1cG9uIHlvdXIgb2F0aHMsIHRvIGdpdmUgY3JlZGVuY2UgdG8gaGlzIHdvcmRzIGFuZCBjb252aWN0IHRoZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcywgYW5kIG5vdCByYXRoZXIgdG8gcmVnYXJkIHRoaXMgbWFuIGFzIHRoZSBtb3N0IHNoYW1lbGVzcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBodW1hbmtpbmQ/PG1pbGVzdG9uZSBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IG15IHdvcmRzIGFyZSB0cnVlLAogICAgICAgICAgICAgICAgICAgIGNhbGwgdGhlIHdpdG5lc3NlcyB0byB0aGVzZSBmYWN0cy48cXVvdGUgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjU0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RG8gbm90IHN1cHBvc2UKICAgICAgICAgICAgICAgICAgICB0aGF0IHdoaWxlIEkgd2FzIHJlYWR5IHRvIHRha2UgdGhpcyBjb3Vyc2UsIHRoZSB3aXRuZXNzZXMgZGlkIG5vdCBob2xkIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgb3Bpbmlvbi4gTm87IHRoZXkgdG9vIHdlcmUgcmVhZHkgdG8gcGxhY2UgdGhlaXIgY2hpbGRyZW4gYnkgdGhlaXIgc2lkZSwgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgY29uZmlybWF0aW9uIG9mIHRoZSB0ZXN0aW1vbnkgdGhleSBoYWQgZ2l2ZW4sIHRvIHRha2UgYW4gb2F0aCB3aXRoIGltcHJlY2F0aW9ucwogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlbSwgaWYgdGhleSBzd29yZSBmYWxzZWx5LiBCdXQgQXBob2J1cyBkaWQgbm90IHNlZSBmaXQgdG8gYWxsb3cgYW4gb2F0aAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGdpdmVuIGVpdGhlciB0byB0aGVtIG9yIHRvIG1lLiBJbnN0ZWFkLCBoZSByZXN0cyBoaXMgY2FzZSBvbiBhcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICBzdWJ0bHkgcGxhbm5lZCBhbmQgb24gd2l0bmVzc2VzIGFjY3VzdG9tZWQgdG8gcGVyanVyeSwgYW5kIHRoaW5rcyB0aGVyZWJ5IGVhc2lseQogICAgICAgICAgICAgICAgICAgIHRvIG1pc2xlYWQgeW91LiBTbyB0YWtlIGFuZCByZWFkIHRvIHRoZSBqdXJ5IHRoaXMgZGVwb3NpdGlvbiBhbHNvLjxxdW90ZSB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhvdyBjb3VsZCBvbmUKICAgICAgICAgICAgICAgICAgICBwcm92ZSBtb3JlIGNsZWFybHkgdGhhbiBJIGhhdmUgcHJvdmVkIHRoYXQgd2UgYXJlIHRoZSBvYmplY3Qgb2YgYSBtYWxpY2lvdXMKICAgICAgICAgICAgICAgICAgICBjaGFyZ2U7IHRoYXQgdGhlIGV2aWRlbmNlIGJyb3VnaHQgZm9yd2FyZCBhZ2FpbnN0IG15IG9wcG9uZW50IGlzIHRydWU7IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGlzIGNvbmRlbW5hdGlvbiB3YXMganVzdD8gSSBoYXZlIHNob3duIHRoYXQgaGUgcmVmdXNlZCB0byBleGFtaW5lIGJ5IHRvcnR1cmUKICAgICAgICAgICAgICAgICAgICB0aGUgc2xhdmUgd2hvIHdyb3RlIHRoZSB0ZXN0aW1vbnkgcmVnYXJkaW5nIHRoZSB2ZXJ5IHRoaW5ncyB0byB3aGljaCBoZSBoYWQKICAgICAgICAgICAgICAgICAgICB0ZXN0aWZpZWQ7IHRoYXQgaGlzIGJyb3RoZXIsIEFlc2l1cywgaGFzIGF0dGVzdGVkIHRoZSBmYWN0cyB3aGljaCBoZSBvbiBoaXMgcGFydAogICAgICAgICAgICAgICAgICAgIGRlY2xhcmVzIHRvIGJlIGZhbHNlOyA8bWlsZXN0b25lIG49IjU2IiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgQXBob2J1cyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgaGFzLCBhdCBteSBzdW1tb25zLCBnaXZlbiBhZ2FpbnN0IERlbW8sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EZW1vIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBub3QgYWN0dWFsbHkgYSB0cnVzdGVlLCBidXQgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjguMTUiIHZhbGlkPSJ5ZXMiPkRlbS4gMjguMTU8L2JpYmw+IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlZCB0aGF0IHRoZSBlbGRlciBEZW1vc3RoZW5lcyBoYWQgY2FsbGVkIGhpbSB0byBiZSBwcmVzZW50LCB3aGVuLCBvbiBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgZGVhdGgtYmVkLCBoZSBoYWQgZW50cnVzdGVkIGhpcyBhZmZhaXJzIGFuZCB0aGUgZ3VhcmRpYW5zaGlwIG9mIGhpcyBjaGlsZHJlbgogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgdGhyZWUgbmFtZWQgYXMgdHJ1c3RlZXMuIEhlIHdhcyB0aGUgZmF0aGVyIG9mIERlbW9waG9uLCBhbmQgaGFkIHZlcnkKICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libHkgdGFrZW4gcGFydCBpbiB0aGUgbWFuYWdlbWVudCBvZiB0aGUgdHJ1c3QuIEFub3RoZXIgYWx0ZXJuYXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGlvbiBpcyB0aGF0IERlbW9zdGhlbmVzIG1heSBoYXZlIGluc3RpdHV0ZWQgc3VpdCBhZ2FpbnN0IERlbW8gb24KICAgICAgICAgICAgICAgICAgICAgICAgcXVpdGUgb3RoZXIgZ3JvdW5kcyBvZiB3aGljaCB3ZSBoYXZlIG5vIGtub3dsZWRnZS4gVGhpcyBjb21wbGljYXRlZCBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIGFibHkgZGlzY3Vzc2VkIGJ5IENhbGhvdW4sIDx0aXRsZT5sLmMuPC90aXRsZT4gcHAuIDg4IGZmLjwvbm90ZT4gaGlzCiAgICAgICAgICAgICAgICAgICAgdW5jbGUgYW5kIGNvLXRydXN0ZWUsIHRoZSBzYW1lIHRlc3RpbW9ueSBhcyB0aGUgd2l0bmVzc2VzIHdob20gaGUgaXMgc3Vpbmc7IHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSByZWZ1c2VkIHRvIGV4YW1pbmUgbXkgd29tZW4tc2VydmFudHMgYXMgdG8gdGhlIGZhY3Qgb2YgPHBlcnNOYW1lPjxzdXJuYW1lIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IGJlaW5nIGEgZnJlZW1hbjsgdGhhdCBteSBvd24gbW90aGVyCiAgICAgICAgICAgICAgICAgICAgd2FzIHJlYWR5IHRvIGdpdmUgYW4gb2F0aCByZWdhcmRpbmcgdGhlc2UgbWF0dGVycyB3aXRoIGltcHJlY2F0aW9ucyB1cG9uIHVzOwogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgcmVmdXNlZCB0byBhY2NlcHQgZm9yIGV4YW1pbmF0aW9uIGFueSBvbmUgb2YgbXkgb3RoZXIgc2xhdmVzIHdobyBrbmV3CiAgICAgICAgICAgICAgICAgICAgYWxsIHRoZSBjaXJjdW1zdGFuY2VzIGJldHRlciB0aGFuIDxwZXJzTmFtZT48c3VybmFtZSBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiBkaWQ7IHRoYXQgaGUgaGFzIG5vdCBicm91Z2h0IGEgY2hhcmdlIG9mIGZhbHNlIHdpdG5lc3MKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IGFueSBvbmUgb2YgdGhvc2Ugd2hvIHRlc3RpZmllZCB0aGF0IGhlIGhhZCB0aGUgbW9uZXk7IDxtaWxlc3RvbmUgbj0iNTciIHVuaXQ9InNlY3Rpb24iIC8+dGhhdCBoZSBkaWQgbm90IGdpdmUgb3ZlciB0aGUgd2lsbCwgbm9yIGxldCB0aGUgaG91c2UsCiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggdGhlIGxhd3Mgc28gYmFkZTsgYW5kIGZpbmFsbHkgdGhhdCBoZSBkaWQgbm90IHNlZSBmaXQgdG8gZ2l2ZSBhbiBvYXRoLAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSB3aXRuZXNzZXMgYW5kIEkgbXlzZWxmIGhhZCBzd29ybiwgd2hlcmVieSBoZSBjb3VsZCBoYXZlIHNlY3VyZWQKICAgICAgICAgICAgICAgICAgICByZWxlYXNlIHRvIHRoZSBhbW91bnQgb2YgdGhlIHN1bXMgcmVnYXJkaW5nIHdoaWNoIGhlIGhhZCBkZW1hbmRlZCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gZm9yIHRvcnR1cmUuIEJ5IGhlYXZlbiwgSSBjZXJ0YWlubHkKICAgICAgICAgICAgICAgICAgICBjb3VsZCB0aGluayBvZiBubyBiZXR0ZXIgd2F5IHRoYW4gdGhpcyB0byBlc3RhYmxpc2ggdGhlc2UgZmFjdHMuIFlldCwgcGxhaW4gYXMKICAgICAgICAgICAgICAgICAgICBpdCBpcyB0aGF0IGhlIGZhbHNlbHkgYXR0YWNrcyB0aGUgd2l0bmVzc2VzOyB0aGF0IGhlIHN1ZmZlcnMgbm8gZGFtYWdlIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMgYWRkdWNlZDsgdGhhdCBoZSB3YXMganVzdGx5IGNvbmRlbW5lZDsgaGUgc3RpbGwgdHJpZXMgdG8gYnJhemVuIGl0IG91dC4KICAgICAgICAgICAgICAgICAgICAgICAgPG1pbGVzdG9uZSBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5JZiBpdCB3ZXJlIG5vdCB0aGF0IGhlIHVzZXMgaGlzIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSBhZnRlciBoYXZpbmcgYXQgdGhlIG91dHNldCBiZWVuIGp1ZGdlZCB0byBiZSBpbiB0aGUgd3JvbmcgYnkgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIGJ5IHRoZSBhcmJpdHJhdG9yLCB0aGVyZSB3b3VsZCBiZSBsZXNzIHJlYXNvbiB0byB3b25kZXIgYXQgYWxsIHRoaXMuCiAgICAgICAgICAgICAgICAgICAgQnV0IHRoZSBmYWN0IGlzLCB0aGF0IGFmdGVyIHBlcnN1YWRpbmcgbWUgdG8gcmVmZXIgdGhlIG1hdHRlciB0byBBcmNoZW5ldXMgYW5kCiAgICAgICAgICAgICAgICAgICAgRHJhY29udGlkZXMgYW5kIFBoYW51cyDvvIh0aGUgbGFzdCBvZiB3aG9tIGhlIGlzIG5vdyBzdWluZyBvbiBhIGNoYXJnZSBvZgogICAgICAgICAgICAgICAgICAgIGdpdmluZyBmYWxzZSB3aXRuZXNz77yJLCBoZSByZWplY3RlZCB0aGVtIO+8iGhhdmluZyBoZWFyZCB0aGVtIHNheQogICAgICAgICAgICAgICAgICAgIHRoYXQsIGlmIHRoZXkgZGVjaWRlZCBvbiBvYXRoLCB0aGV5IHdvdWxkIGNvbmRlbW4gaGlzIGNvbmR1Y3QgYXMKICAgICAgICAgICAgICAgICAgICBndWFyZGlhbu+8iSwgYW5kIGFwcGVhcmVkIGJlZm9yZSB0aGUgb2ZmaWNpYWwgYXJiaXRyYXRvciwgd2hvLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIEFwaG9idXMgd2FzIHVuYWJsZSB0byBjbGVhciBoaW1zZWxmIGZyb20gdGhlIGNoYXJnZXMgd2hpY2ggSSBicm91Z2h0LCBnYXZlCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50IGFnYWluc3QgaGltLiA8bWlsZXN0b25lIG49IjU5IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBqdXJ5LCB0byB3aG9tIGhlCiAgICAgICAgICAgICAgICAgICAgdGhlbiBhcHBlYWxlZCwgaGF2aW5nIGhlYXJkIHRoZSBjYXNlLCBnYXZlIHRoZSBzYW1lIGRlY2lzaW9uIHRoYXQgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIHRoZSBhcmJpdHJhdG9yIGhhZCBnaXZlbiwgYW5kIGZpeGVkIHRoZSBkYW1hZ2VzIGF0IHRlbiB0YWxlbnRzLiBUaGlzCiAgICAgICAgICAgICAgICAgICAgd2FzIG5vdCwgaGVhdmVuIGtub3dzLCBiZWNhdXNlIGhlIGhhZCBhZG1pdHRlZCA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gdG8gYmUgYSBmcmVlbWFuIO+8iGZvciB0aGlzIHdhcyBub3RoaW5nIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHBvaW5077yJLCBidXQgYmVjYXVzZSwgYSBmb3J0dW5lIG9mIGZpZnRlZW4gdGFsZW50cyBoYXZpbmcgYmVlbiBsZWZ0IG1lLAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBub3QgbGV0IHRoZSBwcm9wZXJ0eTsgYmVjYXVzZSBmdXJ0aGVyLCBoZSB3aXRoIGhpcyBjby10cnVzdGVlcyBoYWQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFuYWdlbWVudCBvZiB0aGUgZXN0YXRlIGZvciB0ZW4geWVhcnMsIGFuZCBhZ3JlZWQgb24gYmVoYWxmIG9mIG1lLCBhIGNoaWxkLCB0bwogICAgICAgICAgICAgICAgICAgIHBheSBhIHByb3BlcnR5LXRheCBhdCB0aGUgcmF0ZSBvZiBmaXZlIG1pbmFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGVzIDxlbXBoPmI8L2VtcGg+IGFuZCA8ZW1waD5jPC9lbXBoPiBvbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy43IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNy43PC9iaWJsPjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIG49IjYwIiB1bml0PSJzZWN0aW9uIiAvPnRoZSBzYW1lIHJhdGUgYXQgd2hpY2ggVGltb3RoZXVzLCBzb24gb2YKICAgICAgICAgICAgICAgICAgICA8cGVyc05hbWU+PHN1cm5hbWUgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiwgYW5kIHRob3NlIHBvc3Nlc3NpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbGFyZ2VzdCBmb3J0dW5lcyB3ZXJlIGFzc2Vzc2VkOyBhbmQgYmVjYXVzZSwgYWZ0ZXIgYWRtaW5pc3RlcmluZyBmb3Igc28gbG9uZyBhbgogICAgICAgICAgICAgICAgICAgIGVzdGF0ZSwgb24gd2hpY2ggaGUgdm9sdW50YXJpbHkgY2hvc2UgdG8gcGF5IHNvIGhpZ2ggYSB0YXgsIGhlIHR1cm5lZCBvdmVyIHRvCiAgICAgICAgICAgICAgICAgICAgbWUsIGFzIHRoZSBhbW91bnQgZHVlIGZyb20gaGltLCBwcm9wZXJ0eSBub3QgZXZlbiBvZiB0aGUgdmFsdWUgb2YgdHdlbnR5IG1pbmFlLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyB0b2dldGhlciB3aXRoIHRob3NlIG90aGVycyByb2JiZWQgbWUgb2YgbXkgd2hvbGUgZXN0YXRlLCBwcmluY2lwYWwgYXMKICAgICAgICAgICAgICAgICAgICB3ZWxsIGFzIGludGVyZXN0LiBUaGUganVyeW1lbiwgdGhlcmVmb3JlLCBhbHRob3VnaCB0aGV5IGFsbG93ZWQgaW50ZXJlc3Qgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgcHJvcGVydHkgYXQgdGhlIGxvd2VzdCByYXRlLCBhbmQgbm90IHRoYXQgYXQgd2hpY2ggZXN0YXRlcyBhcmUgb3JkaW5hcmlseQogICAgICAgICAgICAgICAgICAgIGxldCwgZm91bmQgdGhhdCB0aGVzZSBtZW4gaGFkIHJvYmJlZCBtZSBvZiBtb3JlIHRoYW4gdGhpcnR5IHRhbGVudHMsIGFuZAogICAgICAgICAgICAgICAgICAgIGFjY29yZGluZ2x5IGZpeGVkIHRoZSBkYW1hZ2VzIGFnYWluc3QgQXBob2J1cyBhdCB0ZW4gdGFsZW50cy48L3A+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBJIHdlcmUgbm90CiAgICAgICAgICAgICAgICAgICAgY29uc2Npb3VzLCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgaW4gYSBmb3JtZXIgc3VpdCBhZ2FpbnN0IEFwaG9idXMgSSBoYWQgcmVhZGlseQogICAgICAgICAgICAgICAgICAgIO+8iHNvIGFic29sdXRlbHkgbWFuaWZlc3Qgd2VyZSBoaXMgd3Jvbmdkb2luZ3PvvIkgY29udmljdGVkIGhpbSBvZgogICAgICAgICAgICAgICAgICAgIGxpZXMgZ3JlYXRlciBhbmQgbW9yZSBvdXRyYWdlb3VzIHRoYW4gdGhlc2Ugd2hpY2ggaGUgbm93IHV0dGVycywgSSBzaG91bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGdyYXZlIGRvdWJ0cyBvZiBteSBhYmlsaXR5IHRvIHNob3cgaG93IGhlIHNlZWtzIHRvIGxlYWQgeW91IGFzdHJheSBpbiByZWdhcmQgdG8KICAgICAgICAgICAgICAgICAgICBlYWNoIG9uZSBvZiB0aGVtLiBBcyBpdCBpcywgaG93ZXZlciDvvIhiZSBpdCBzYWlkIHdpdGggdGhlIGZhdm9yIG9mCiAgICAgICAgICAgICAgICAgICAgaGVhdmVu77yJLCBpZiB5b3UgcHJvdmUgZmFpciBhbmQgaW1wYXJ0aWFsIGhlYXJlcnMsIEkgaGF2ZSBzdHJvbmcgaG9wZXMKICAgICAgICAgICAgICAgICAgICB0aGF0IHlvdSB3aWxsIGJlY29tZSBhcyBmdWxseSBhd2FyZSBvZiB0aGUgc2hhbWVsZXNzbmVzcyBvZiB0aGlzIG1hbiBhcyB3ZXJlIHRoZQogICAgICAgICAgICAgICAgICAgIGp1cm9ycyBpbiB0aGUgZm9ybWVyIHRyaWFsLiBJZiB0aGUgY2FzZSByZXF1aXJlZCBlbG9xdWVuY2Ugb3IgY2xldmVybmVzcyBJCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIHNocmluayB0aHJvdWdoIGRpc3RydXN0IG9mIG15IHlvdXRoOyBidXQsIGFzIG1hdHRlcnMgYXJlLCBJIG5lZWQgbWVyZWx5CiAgICAgICAgICAgICAgICAgICAgcG9pbnQgb3V0IGFuZCByZWhlYXJzZSB0byB5b3Ugd2hhdCB0aGUgcGxhaW50aWZmJ3MgY29uZHVjdCB0b3dhcmQgdXMgaGFzIGJlZW4uCiAgICAgICAgICAgICAgICAgICAgRnJvbSB0aGlzIGl0IHdpbGwgYmUgZWFzeSwgSSB0aGluaywgZm9yIGFsbCBvZiB5b3UgdG8gZGV0ZXJtaW5lIHdoaWNoIG9mIHVzIGlzCiAgICAgICAgICAgICAgICAgICAgdGhlIHZpbGxhaW4uIDwvdHJhbnNsYXRpb24+"
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JCiAgICAgICAgICAgICAgICAgICAga25vdyB0aGF0IHRoZSBwbGFpbnRpZmYgaGFzIGluc3RpdHV0ZWQgdGhpcyBzdWl0LCBub3QgYmVjYXVzZSBoZSBiZWxpZXZlcyBoZSBjYW4KICAgICAgICAgICAgICAgICAgICBjb252aWN0IGFueW9uZSBvZiBoYXZpbmcgYm9ybmUgZmFsc2Ugd2l0bmVzcyBhZ2FpbnN0IGhpbSwgYnV0IGJlY2F1c2UgaGUgdGhpbmtzCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgbGFyZ2UgYW1vdW50IG9mIGRhbWFnZXMgd2hpY2ggaGUgd2FzIGNvbmRlbW5lZCB0byBwYXkgd2lsbCBnaXZlIHJpc2UgdG8KICAgICAgICAgICAgICAgICAgICBhIGZlZWxpbmcgb2YgcHJlanVkaWNlIGFnYWluc3QgbWUsIGFuZCBvZiBjb21wYXNzaW9uIHRvd2FyZCBoaW1zZWxmLiBGb3IgdGhpcwogICAgICAgICAgICAgICAgICAgIHJlYXNvbiBoZSBpcyBub3cgc2Vla2luZyB0byBkZWZlbmQgaGltc2VsZiBhZ2FpbnN0IGNoYXJnZXMgbWFkZSBpbiBhIHN1aXQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhhcyBhbHJlYWR5IGJlZW4gZGVjaWRlZCwgcmVnYXJkaW5nIHdoaWNoIGhlIGhhZCBhdCB0aGUgdGltZSBubyByZWFzb25hYmxlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5jZSB0byBtYWtlLiBJLCBmb3IgbXkgcGFydCwgbWVuIG9mIHRoZSBqdXJ5LCBpZiBJIGhhZCBwcm9jZWVkZWQgdG8gZXhlY3V0ZQogICAgICAgICAgICAgICAgICAgIHRoZSBqdWRnZW1lbnQgYWdhaW5zdCBoaW0gYW5kIGhhZCBiZWVuIHVud2lsbGluZyB0byBtYWtlIGFueSByZWFzb25hYmxlCiAgICAgICAgICAgICAgICAgICAgY29uY2Vzc2lvbiwgc2hvdWxkIGV2ZW4gc28gaGF2ZSBkb25lIG5vIHdyb25nIGluIGV4YWN0aW5nIHRoZSBkYW1hZ2VzIGF3YXJkZWQgYnkKICAgICAgICAgICAgICAgICAgICB5b3VyIGRlY2lzaW9uOyBidXQgZm9yIGFsbCB0aGF0IGl0IG1pZ2h0IGhhdmUgYmVlbiBzYWlkIHRoYXQgSSBoYWQgc2hvd24gdW5kdWUKICAgICAgICAgICAgICAgICAgICBydXRobGVzc25lc3MgYW5kIGVubWl0eSB0b3dhcmQgYSBtYW4gd2hvIGlzIGEgcmVsYXRpdmUgaW4gZGVwcml2aW5nIGhpbSBvZiBhbGwKICAgICAgICAgICAgICAgICAgICBoaXMgcHJvcGVydHkuIDwvdHJhbnNsYXRpb24+"
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCwgYXMgaXQgaXMsIHRoZSBwcmVjaXNlCiAgICAgICAgICAgICAgICAgICAgY29udHJhcnkgaXMgdGhlIHRydXRoLiBUaGlzIG1hbiB3aXRoIGhpcyBjby10cnVzdGVlcyBoYXMgcm9iYmVkIG1lIG9mIG15IGVudGlyZQogICAgICAgICAgICAgICAgICAgIHBhdHJpbW9ueSwgYW5kLCBldmVuIGFmdGVyIGJlaW5nIGNsZWFybHkgY29udmljdGVkIGluIHlvdXIgY291cnQsIGhlIGRvZXMgbm90CiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXIgaGltc2VsZiBvYmxpZ2VkIHRvIGRvIGFueXRoaW5nIHJlYXNvbmFibGUuIE9uIHRoZSBjb250cmFyeSBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBkaXNwZXJzZWQgaGlzIHByb3BlcnR5LCBnaXZpbmcgaGlzIGZhcm0tYnVpbGRpbmdzIHRvIEFlc2l1cyBhbmQgaGlzIGZhcm0gdG8KICAgICAgICAgICAgICAgICAgICBPbmV0b3IsIGFnYWluc3Qgd2hvbSBoZSBoYXMgZm9yY2VkIG1lIHRvIGVuZ2FnZSBpbiBhIHRyb3VibGVzb21lIGxhd3N1aXQuIEhlCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiBzdHJpcHBlZCB0aGUgaG91c2Ugb2YgaXRzIGZ1cm5pdHVyZSwgdG9vayBhd2F5IHRoZSBzbGF2ZXMsIGRlc3Ryb3llZCB0aGUKICAgICAgICAgICAgICAgICAgICB3aW5lLXZhdCwgdG9yZSBvZmYgdGhlIGRvb3JzLCBhbmQgYWxsIGJ1dCBzZXQgZmlyZSB0byB0aGUgaG91c2UgaXRzZWxmOyB0aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgbWFkZSBvZmYgdG8gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxNZWdhcmEiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLE1lZ2FyYSI+TWVnYXJhPC9wbGFjZU5hbWU+LCB3aGVyZSBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBzZXR0bGVkIGFuZCBwYWlkIHRoZSBhbGllbidzIHRheC4gWW91IHdvdWxkLCB0aGVyZWZvcmUsIHdpdGggYmV0dGVyIGdyb3VuZAogICAgICAgICAgICAgICAgICAgIGxvYXRoZSB0aGlzIG1hbiBmb3IgZGVlZHMgbGlrZSB0aGVzZSwgdGhhbiBqdWRnZSBtZSBndWlsdHkgb2YgdW5kdWUgc2V2ZXJpdHkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWdhcmRpbmcKICAgICAgICAgICAgICAgICAgICB0aGUgcmFwYWNpdHkgYW5kIHZpbGUgY2hhcmFjdGVyIG9mIHRoZSBwbGFpbnRpZmYgSSBwdXJwb3NlIHRvIHNwZWFrIGF0IGxlbmd0aAogICAgICAgICAgICAgICAgICAgIGJlZm9yZSB5b3UgbGF0ZXIgb24sIHRob3VnaCB3aGF0IHlvdSBoYXZlIGV2ZW4gbm93IGhlYXJkIGdpdmVzIHlvdSBhIGZhaXIgaWRlYQogICAgICAgICAgICAgICAgICAgIG9mIGl0LiBCdXQgSSBzaGFsbCBub3cgdW5kZXJ0YWtlIHRvIHNob3cgeW91LCB0aGF0IHRoZSB0ZXN0aW1vbnkgd2hpY2ggaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBnaXZlbiwgYWJvdXQgd2hpY2ggeW91IGFyZSBnb2luZyB0byBjYXN0IHlvdXIgdm90ZXMsIGlzIHRydWUuIEJ1dCBvbmUgcmVxdWVzdCBJCiAgICAgICAgICAgICAgICAgICAgbWFrZSBvZiB5b3UsIG1lbiBvZiB0aGUganVyeSwgYW5kIGl0IGlzIGEgcmVhc29uYWJsZSBvbmXigJR0aGF0IHlvdSB3aWxsCiAgICAgICAgICAgICAgICAgICAgZ2l2ZSB1cyBib3RoIGEgZmFpciBoZWFyaW5nLiBUaGlzIGlzIGFzIG11Y2ggaW4geW91ciBpbnRlcmVzdCBhcyBpbiBtaW5lLCBmb3IKICAgICAgICAgICAgICAgICAgICB0aGUgbW9yZSBhY2N1cmF0ZSB5b3VyIGtub3dsZWRnZSBvZiB0aGUgZmFjdHMsIHRoZSBtb3JlIGp1c3QgYW5kIGluIGhhcm1vbnkgd2l0aAogICAgICAgICAgICAgICAgICAgIHlvdXIgb2F0aHMgd2lsbCBiZSB0aGUgdm90ZSB5b3Ugd2lsbCBjYXN0IHJlZ2FyZGluZyB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkkgc2hhbGwgc2hvdyB0aGF0IEFwaG9idXMgaGFzIG5vdCBvbmx5IGFja25vd2xlZGdlZAogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gdG8gYmUgYSBmcmVlbWFuLCBidXQgaGFzCiAgICAgICAgICAgICAgICAgICAgZXZlbiBwcm92ZWQgaXQgYnkgaGlzIGFjdGlvbnM7IHRoYXQsIGZ1cnRoZXJtb3JlLCBhYm91dCB0aGlzIG1hdHRlciBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBkZWNsaW5lZCB0aGUgYWJzb2x1dGVseSBzdXJlIHRlc3QgYnkgdG9ydHVyZSw8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5PbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgaGlnaCB2YWx1ZSBhdHRyaWJ1dGVkIGJ5IHRoZSBHcmVla3MgdG8gZXZpZGVuY2UgZXh0cmFjdGVkIGZyb20gYSBzbGF2ZQogICAgICAgICAgICAgICAgICAgICAgICBieSB0b3J0dXJlIHNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDMwLjM3IiB2YWxpZD0ieWVzIj5EZW0uIDMwLjM3PC9iaWJsPiwgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIFJoLiAxLjE1IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBSaC4gMS4xNTwvYmlibD48L25vdGU+IGFuZCBkb2VzIG5vdCB3aXNoCiAgICAgICAgICAgICAgICAgICAgdG8gaGF2ZSB0aGUgdHJ1dGggYnJvdWdodCB0byBsaWdodCB0aGF0IG9uIHRoZSBjb250cmFyeSBoZSBoYXMgcmVjb3Vyc2UgdG8KICAgICAgICAgICAgICAgICAgICB0cmlja2VyeSwgYnJpbmdzIGZvcndhcmQgZmFsc2Ugd2l0bmVzc2VzLCBhbmQgYnkgaGlzIG93biB3b3JkcyBkaXN0b3J0cyB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCByZWdhcmRpbmcgd2hhdCBoYXMgdGFrZW4gcGxhY2UuIFNvIHN0cm9uZyBhbmQgc28gcGxhaW4gaXMgdGhlIGV2aWRlbmNlIGJ5CiAgICAgICAgICAgICAgICAgICAgd2hpY2ggSSBzaGFsbCBwcm92ZSB0aGVzZSBzdGF0ZW1lbnRzIHRoYXQgeW91IHdpbGwgYWxsIHNlZSBjbGVhcmx5IHRoYXQgaXQgaXMgSQogICAgICAgICAgICAgICAgICAgIHdobyBhbSBzcGVha2luZyB0aGUgdHJ1dGgsIGFuZCB0aGF0IGhlIGhhcyB1dHRlcmVkIG5vdCBhIHdvcmQgd29ydGh5IG9mCiAgICAgICAgICAgICAgICAgICAgY3JlZGVuY2UuIEkgc2hhbGwgYmVnaW4gYXQgYSBwb2ludCB3aGljaCB3aWxsIG1ha2UgaXQgZWFzaWVzdCBmb3IgeW91IHRvIGxlYXJuCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3RzLCBhbmQgZm9yIG1lIHRvIGluc3RydWN0IHlvdSByZWdhcmRpbmcgdGhlbSBpbiB0aGUgYnJpZWZlc3QgdGltZS4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzMC4zNyIgdmFsaWQ9InllcyI+RGVtLiAzMC4zNzwvYmlibD4sIGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBSaC4gMS4xNSIgdmFsaWQ9InllcyI+QXJpc3RvdC4gUmguIDEuMTU8L2JpYmw+PC90cmFuc2xhdGlvbj4="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGluc3RpdHV0ZWQKICAgICAgICAgICAgICAgICAgICBzdWl0LCBtZW4gb2YgdGhlIGp1cnksIGFnYWluc3QgRGVtb3Bob24sIFRoZXJpcHBpZGVzIGFuZCB0aGUgcGxhaW50aWZmIGZvcgogICAgICAgICAgICAgICAgICAgIGJyZWFjaCBvZiB0cnVzdCBpbiB0aGVpciBndWFyZGlhbnNoaXAsIGZvciBJIGhhZCBiZWVuIGRlZnJhdWRlZCBieSB0aGVtIG9mIGFsbAogICAgICAgICAgICAgICAgICAgIG15IGluaGVyaXRhbmNlLiBXaGVuIG15IHN1aXQgYWdhaW5zdCBBcGhvYnVzIGluIHRoZSBmaXJzdCBpbnN0YW5jZSBjYW1lIHVwIGZvcgogICAgICAgICAgICAgICAgICAgIHRyaWFsLCBJIHByb3ZlZCBjbGVhcmx5IHRvIHRoZSBqdXJ5LCBhcyBJIHNoYWxsIHByb3ZlIHRvIHlvdSwgdGhhdCBoZSwgaW4KICAgICAgICAgICAgICAgICAgICBjb25qdW5jdGlvbiB3aXRoIHRoZSBvdGhlcnMsIGhhZCByb2JiZWQgbWUgb2YgYWxsIHRoZSBwcm9wZXJ0eSB0aGF0IGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgbGVmdCBtZTsgYW5kIEkgcmVsaWVkIHVwb24gbm8gZmFsc2UgdGVzdGltb255LiA8L3RyYW5zbGF0aW9uPg=="
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgaXMgYSBjbGVhciBwcm9vZiBvZiB0aGlzLiBBIGhvc3Qgb2YgZGVwb3NpdGlvbnMgd2FzIHJlYWQgYXQgdGhlIHRyaWFsLAogICAgICAgICAgICAgICAgICAgIHNvbWUgb2YgdGhlIGRlcG9uZW50cyBkZWNsYXJpbmcgdGhhdCB0aGV5IGhhZCBnaXZlbiB0byB0aGUgcGxhaW50aWZmIHByb3BlcnR5IG9mCiAgICAgICAgICAgICAgICAgICAgbWluZSwgb3RoZXJzIHRoYXQgaGUgaGFkIHJlY2VpdmVkIHN1Y2ggcHJvcGVydHkgaW4gdGhlaXIgcHJlc2VuY2UsIHN0aWxsIG90aGVycwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBoYWQgcHVyY2hhc2VkIGdvb2RzIGZyb20gaGltLCBhbmQgcGFpZCBoaW0gdGhlIHByaWNlOyB5ZXQgaGUgaGFzCiAgICAgICAgICAgICAgICAgICAgY2hhcmdlZCBub3QgYSBzaW5nbGUgb25lIG9mIHRoZXNlIHdpdGggYmVhcmluZyBmYWxzZSB0ZXN0aW1vbnkuIEhlIGhhcyBkYXJlZCB0bwogICAgICAgICAgICAgICAgICAgIGF0dGFjayB0aGlzIG9uZSBwaWVjZSBvZiB0ZXN0aW1vbnksIGFuZCBpdCBhbG9uZSwgYWx0aG91Z2ggaW4gaXQgaGUgY2Fubm90IHNob3cKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZXJlIHdhcyBtZW50aW9uIGV2ZW4gb2Ygb25lIHNpbmdsZSBkcmFjaG1hLiA8L3RyYW5zbGF0aW9uPg=="
translation['29.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgZm9yIHRoZSBjb21wdXRhdGlvbiBvZiB0aGUgc3VtcyBvZiB3aGljaCBJIGhhZCBiZWVuCiAgICAgICAgICAgICAgICAgICAgcm9iYmVkLCBJIHJlbGllZCBub3Qgc28gbXVjaCBvbiB0aGlzIG1hbidzIHRlc3RpbW9ueSwgZm9yIHRoZXJlIHdhcyBubyBtZW50aW9uCiAgICAgICAgICAgICAgICAgICAgb2YgbW9uZXkgaW4gaXQsIGJ1dCBvbiB0aGUgc2V2ZXJhbCBzdGF0ZW1lbnRzIG9mIHRoZSBvdGhlcnMsIGFnYWluc3Qgd2hvbSB0aGUKICAgICAgICAgICAgICAgICAgICBwbGFpbnRpZmYgaGFzIG1hZGUgbm8gY2hhcmdlcy4gVGhlcmVmb3JlIHRoZSBqdXJ5bWVuIHdobyBhdCB0aGF0IHRpbWUgaGVhcmQgbXkKICAgICAgICAgICAgICAgICAgICBwbGVhLCBub3Qgb25seSBmb3VuZCBoaW0gZ3VpbHR5LCBidXQgZml4ZWQgdGhlIGRhbWFnZXMgYXQgdGhlIGZ1bGwgYW1vdW50IHN0YXRlZAogICAgICAgICAgICAgICAgICAgIGluIG15IGNvbXBsYWludC4gV2h5IHdhcyBpdCwgdGhlbiwgdGhhdCBoZSBwYXNzZWQgb3ZlciB0aGUgb3RoZXIgd2l0bmVzc2VzIGFuZAogICAgICAgICAgICAgICAgICAgIHN1ZWQgdGhlIGRlZmVuZGFudCBhbG9uZT8gSSB3aWxsIHRlbGwgeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['29.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkluCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkIHRvIGFsbCB0aGUgd2l0bmVzc2VzIHdobyB0ZXN0aWZpZWQgdGhhdCBoZSBoYWQgcmVjZWl2ZWQgdGhlIG1vbmV5LCBoZQogICAgICAgICAgICAgICAgICAgIGtuZXcgdGhhdCB0aGUgbW9yZSBkaXNjdXNzaW9uIHRoZXJlIHNob3VsZCBiZSBvdmVyIGVhY2ggc2VwYXJhdGUgcG9pbnQsIHRoZSBtb3JlCiAgICAgICAgICAgICAgICAgICAgY29udmluY2luZ2x5IHdvdWxkIGhlIGJlIGNvbnZpY3RlZCBvZiBwb3NzZXNzaW5nIGl0LCBhbmQgdGhpcyB3YXMgYm91bmQgdG8gYmUKICAgICAgICAgICAgICAgICAgICB0aGUgY2FzZSBpbiBhIHRyaWFsIGZvciBmYWxzZSB3aXRuZXNzOyBmb3IgdGhlIGFjY3VzYXRpb25zIHdoaWNoIEkgdGhlbiBtYWRlCiAgICAgICAgICAgICAgICAgICAgYWxvbmcgd2l0aCBhbGwgdGhlIG90aGVycyBpbiBhIHNtYWxsIHBhcnQgb2YgdGhlIHRpbWUgYWxsb3R0ZWQgbWUsIEkgc2hvdWxkIG5vdwogICAgICAgICAgICAgICAgICAgIGRpc2N1c3Mgc2V2ZXJhbGx5IGFuZCBpbiBkZXRhaWwgaW4gdGhlIHRpbWUgb2YgYW4gZW50aXJlIHNwZWVjaDsgPC90cmFuc2xhdGlvbj4="
translation['29.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz53aGVyZWFzLCBpZiBoZSBhdHRhY2tlZCBhbiBhbnN3ZXIgZ2l2ZW4sIGhlIHRob3VnaHQKICAgICAgICAgICAgICAgICAgICB0aGF0IGFzIGhlIGhhZCBtYWRlIGFuIGFkbWlzc2lvbiBiZWZvcmUsIHNvIG5vdyBpdCB3b3VsZCBiZSBpbiBoaXMgcG93ZXIgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIGEgZGVuaWFsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBpbiBhdHRhY2tpbmcgdGhlIHRlc3RpbW9ueSBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZGVwb25lbnQgaGUgd291bGQgZGVueSBoaXMgb3duIHByZXZpb3VzIGFkbWlzc2lvbnMuPC9ub3RlPiBUaGF0IGlzIHRoZQogICAgICAgICAgICAgICAgICAgIHJlYXNvbiB3aHkgaGUgYXR0YWNrcyB0aGUgdGVzdGltb255IG9mIHRoaXMgd2l0bmVzcywgdGhlIHRydXRoIG9mIHdob3NlCiAgICAgICAgICAgICAgICAgICAgdGVzdGltb255IEkgbWVhbiB0byBwcm92ZSBjb25jbHVzaXZlbHkgdG8geW91IGFsbCwgbm90IG9uIHRoZSBiYXNpcyBvZgogICAgICAgICAgICAgICAgICAgIHByb2JhYmlsaXRpZXMsIG9yIG9mIGFyZ3VtZW50cyBtYWRlIHVwIHRvIGZpdCB0aGUgb2NjYXNpb24sIGJ1dCBieSByZWFzb25pbmcKICAgICAgICAgICAgICAgICAgICB3aGljaCwgSSBhbSBzdXJlLCB3aWxsIGFwcHJvdmUgaXRzZWxmIHRvIHlvdSBhbGwgYXMganVzdCBhbmQgZmFpci4gTGlzdGVuLCBhbmQKICAgICAgICAgICAgICAgICAgICBqdWRnZS4gPC90cmFuc2xhdGlvbj4="
translation['29.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBrbmV3LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgdGhhdCBJIHNob3VsZCBmaW5kIHRoZSB3aG9sZSBjb250ZXN0IGNlbnRyaW5nIGFib3V0IHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gaW5zZXJ0ZWQgaW4gdGhlIHJlY29yZCwgYW5kIHRoYXQgaXQgd291bGQgYmUgcmVnYXJkaW5nIHRoZSB0cnV0aCBvcgogICAgICAgICAgICAgICAgICAgIGZhbHNlaG9vZCBvZiB0aGlzIHRoYXQgeW91IHdvdWxkIGNhc3QgeW91ciB2b3RlcywgYW5kIEkgdGhlcmVmb3JlIGRldGVybWluZWQKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBmaXJzdCBzdGVwIGZvciBtZSB0byB0YWtlIHdhcyB0byBvZmZlciBBcGhvYnVzIGEgY2hhbGxlbmdlLiBXaGF0LCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGRpZCBJIGRvPyBJIG9mZmVyZWQgdG8gc3VycmVuZGVyIHRvIGhpbSBmb3IgZXhhbWluYXRpb24gYnkgdG9ydHVyZSBhIHNsYXZlIHdobwogICAgICAgICAgICAgICAgICAgIGtuZXcgaG93IHRvIHJlYWQgYW5kIHdyaXRlLCBhbmQgd2hvIGhhZCBiZWVuIHByZXNlbnQgd2hlbiBBcGhvYnVzIG1hZGUgdGhlCiAgICAgICAgICAgICAgICAgICAgYWRtaXNzaW9uIGluIHF1ZXN0aW9uLCBhbmQgd2hvIHdyb3RlIGRvd24gdGhlIHN0YXRlbWVudCBvZiB0aGUgd2l0bmVzcy4gVGhpcyBtYW4KICAgICAgICAgICAgICAgICAgICBoYWQgYmVlbiBvcmRlcmVkIGJ5IG1lIG5vdCB0byB1c2UgYW55IGZyYXVkIG9yIHRyaWNrZXJ5LCBub3IgdG8gd3JpdGUgZG93biBzb21lCiAgICAgICAgICAgICAgICAgICAgYW5kIHN1cHByZXNzIG90aGVycyBvZiB0aGUgc3RhdGVtZW50cyBtYWRlIGJ5IHRoZSBwbGFpbnRpZmYgcmVnYXJkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgYXQgaXNzdWUsIGJ1dCBzaW1wbHkgdG8gd3JpdGUgdGhlIGFic29sdXRlIHRydXRoLCBhbmQgd2hhdCBBcGhvYnVzCiAgICAgICAgICAgICAgICAgICAgYWN0dWFsbHkgc2FpZC4gPC90cmFuc2xhdGlvbj4="
translation['29.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGF0IGJldHRlciBvcHBvcnR1bml0eSBjb3VsZAogICAgICAgICAgICAgICAgICAgIGhlIGhhdmUgaGFkIG9mIGNvbnZpY3RpbmcgdXMgb2YgZmFsc2Vob29kIHRoYW4gYnkgcHV0dGluZyBteSBzbGF2ZSB0byB0b3J0dXJlPwogICAgICAgICAgICAgICAgICAgIEJ1dCBBcGhvYnVzIGtuZXcgYmV0dGVyIHRoYW4gYW55b25lIGVsc2UgdGhhdCB0aGUgc2xhdmUgaGFkIGJvcm5lIHRydWUKICAgICAgICAgICAgICAgICAgICB0ZXN0aW1vbnksIGFuZCB0aGVyZWZvcmUgaGUgZGVjbGluZWQgdGhlIHRlc3QuIEFuZCBpbiB0cnV0aCBpdCBpcyBub3Qgb25lIG9yIHR3bwogICAgICAgICAgICAgICAgICAgIG9ubHkgd2hvIGtub3cgdGhlc2UgZmFjdHM7IHRoZSBjaGFsbGVuZ2Ugd2FzIG5vdCBtYWRlIGluIHNlY3JldCwgYnV0IGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1pZHN0IG9mIHRoZSBhZ29yYSB3aGVyZSBtYW55IHdlcmUgcHJlc2VudC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Q2FsbCwKICAgICAgICAgICAgICAgICAgICBwbGVhc2UsIHRoZSB3aXRuZXNzZXMgdG8gdGhlc2UgZmFjdHMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGZlbGxvdyBpcwogICAgICAgICAgICAgICAgICAgIHNvIGN1bm5pbmcsIGFuZCBzbyByZWFkeSB0byBwcmV0ZW5kIGlnbm9yYW5jZSBvZiB3aGF0IGlzIHJpZ2h0LCB0aGF0LCBhbHRob3VnaAogICAgICAgICAgICAgICAgICAgIGhlIGlzIHByZXNzaW5nIGEgc3VpdCBmb3IgZmFsc2Ugd2l0bmVzcywgYW5kIGFsdGhvdWdoIHlvdSBhcmUgdG8gY2FzdCB5b3VyIHZvdGVzCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkaW5nIHRoaXMsIGFuZCBoYXZlIHN3b3JuIHNvIHRvIGRvLCBoZSByZWZ1c2VkIHRoZSBwcm9mZmVyZWQgZXhhbWluYXRpb24gYnkKICAgICAgICAgICAgICAgICAgICB0b3J0dXJlIGluIHJlZ2FyZCB0byB0aGUgdGVzdGltb255IO+8iHRoZSBwb2ludCB0byB3aGljaCBoZSBzaG91bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRldm90ZWQgaGlzIGFyZ3VtZW5077yJLCBhbmQgZGVjbGFyZXMgdGhhdCBoZSByZXF1aXJlcyB0aGUgc2xhdmUgdG8gYmUKICAgICAgICAgICAgICAgICAgICBnaXZlbiB1cCBmb3IgdGVzdGluZyBpbiByZWdhcmQgdG8gb3RoZXIgbWF0dGVycy4gSW4gdGhpcyBoZSBpcyBseWluZy4gPC90cmFuc2xhdGlvbj4="
translation['29.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5JcyBpdCBub3QgaW5kZWVkIG1vbnN0cm91cyB0aGF0IGhlIHNob3VsZCBjbGFpbSB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgaXMgYmVpbmcgb3V0cmFnZW91c2x5IHRyZWF0ZWQgYnkgbXkgcmVmdXNhbCBvZiBoaXMgZGVtYW5kIHRvIGhhdmUgZGVsaXZlcmVkCiAgICAgICAgICAgICAgICAgICAgdG8gaGltIGZvciB0b3J0dXJlIGEgZnJlZW1hbiDvvIhmb3Igc3VjaCBJIHNoYWxsIGNvbmNsdXNpdmVseSBwcm92ZQogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gdG8gYmXvvIksIGFuZAogICAgICAgICAgICAgICAgICAgIHNob3VsZCBub3QgY29uc2lkZXIgdGhhdCBteSB3aXRuZXNzZXMgYXJlIGJlaW5nIG91dHJhZ2VvdXNseSB0cmVhdGVkLCB3aGVuIEkKICAgICAgICAgICAgICAgICAgICBvZmZlciBoaW0gb25lIHdobyBpcyBhZG1pdHRlZGx5IGEgc2xhdmUsIHRvIGJlIHRlc3RlZCBieSB0b3J0dXJlIHJlZ2FyZGluZyB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSwgYW5kIGhlIHJlZnVzZXM/IEZvciBoZSBzdXJlbHkgY2Fubm90IG1haW50YWluIHRoaXMsIHRoYXQgZm9yIHNvbWUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzLCB3aGljaCBoZSBoaW1zZWxmIGRlc2lyZXMsIHRvcnR1cmUgaXMgYSBjZXJ0YWluIHRlc3QsIGFuZCBmb3Igb3RoZXJzCiAgICAgICAgICAgICAgICAgICAgbm90LiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['29.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnVydGhlcm1vcmUsIG1lbiBvZiB0aGUganVyeSwgdGhlIGZpcnN0IHdpdG5lc3MgdG8gZ2l2ZSB0aGlzIHRlc3RpbW9ueSB3YXMKICAgICAgICAgICAgICAgICAgICBBZXNpdXMsIHRoZSBicm90aGVyIG9mIHRoZSBwbGFpbnRpZmYuIEhlIG5vdyBkZW5pZXMgaXQsIGJlY2F1c2UgaGUgaGFzIGFsbGllZAogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgaW4gdGhlIHN1aXQgd2l0aCBBcGhvYnVzOyBidXQgYXQgdGhhdCB0aW1lIGhlIGdhdmUgdGhpcyB0ZXN0aW1vbnkgYWxvbmcKICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBvdGhlciB3aXRuZXNzZXMsIGZvciBoZSBoYWQgbm8gZGVzaXJlIHRvIHBlcmp1cmUgaGltc2VsZiwgb3IgdG8gc3VmZmVyCiAgICAgICAgICAgICAgICAgICAgdGhlIHBlbmFsdHkgd2hpY2ggd291bGQgc3RyYWlnaHR3YXkgZm9sbG93LiBTdXJlbHkgbm93LCBpZiBJIGhhZCBiZWVuIGdldHRpbmcgdXAKICAgICAgICAgICAgICAgICAgICBmYWxzZSB0ZXN0aW1vbnksIEkgc2hvdWxkIG5vdCBoYXZlIHB1dCB0aGlzIG1hbiBpbiBteSBsaXN0IG9mIHdpdG5lc3Nlcywgc2VlaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSB3YXMgbW9yZSBpbnRpbWF0ZSB3aXRoIEFwaG9idXMgdGhhbiB3aXRoIGFueW9uZSBlbHNlIGluIHRoZSB3b3JsZCwgYW5kCiAgICAgICAgICAgICAgICAgICAga25vd2luZyB0aGF0IGhlIHdhcyBnb2luZyB0byBwbGVhZCBmb3IgaGltIGluIHRoZSBzdWl0LCBhbmQgdGhhdCBoZSB3YXMgYW4KICAgICAgICAgICAgICAgICAgICBhZHZlcnNhcnkgb2YgbXkgb3duLiBJdCBpcyBub3QgcmVhc29uYWJsZSB0aGF0IG9uZSBzaG91bGQgY2FsbCBhcyB3aXRuZXNzIHRvIGEKICAgICAgICAgICAgICAgICAgICBmYWxzZSBzdGF0ZW1lbnQgb25lIHdobyBpcyBhbiBvcHBvbmVudCBvZiBoaXMgb3duLCBhbmQgYSBicm90aGVyIG9mIGhpcwogICAgICAgICAgICAgICAgICAgIGFkdmVyc2FyeS4gPC90cmFuc2xhdGlvbj4="
translation['29.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5JIGhhdmUgbWFueSB3aXRuZXNzZXMgdG8gdGhlc2UKICAgICAgICAgICAgICAgICAgICBmYWN0cywgYW5kIGNpcmN1bXN0YW50aWFsIHByb29mcyBubyBmZXdlciBpbiBudW1iZXIgdGhhbiB0aGUgd2l0bmVzc2VzLiBJbiB0aGUKICAgICAgICAgICAgICAgICAgICBmaXJzdCBwbGFjZSwgaWYgaGUgZGlkIG5vdCBpbiB2ZXJ5IHRydXRoIGdpdmUgdGhpcyB0ZXN0aW1vbnksIGhlIHdvdWxkIG5vdCBiZQogICAgICAgICAgICAgICAgICAgIGRlbnlpbmcgaXQgbm93LCBidXQgd291bGQgaGF2ZSBkb25lIHNvIGF0IG9uY2UgaW4gdGhlIGNvdXJ0cm9vbSwgd2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9uIHdhcyByZWFkLCBmb3IgaXQgd291bGQgaGF2ZSBhbnN3ZXJlZCBoaXMgcHVycG9zZSBiZXR0ZXIgdGhlbiB0aGFuCiAgICAgICAgICAgICAgICAgICAgbm93LiBJbiB0aGUgc2Vjb25kIHBsYWNlIEFlc2l1cyB3b3VsZCBub3QgaGF2ZSBrZXB0IHF1aWV0LCBidXQgd291bGQgaGF2ZSBzdWVkCiAgICAgICAgICAgICAgICAgICAgbWUgZm9yIGRhbWFnZXMsIGlmIHdpdGhvdXQgY2F1c2UgSSBoYWQgbWFkZSBoaW0gbGlhYmxlIHRvIGEgY2hhcmdlIG9mIGJlYXJpbmcKICAgICAgICAgICAgICAgICAgICBmYWxzZSB3aXRuZXNzIGFnYWluc3QgaGlzIGJyb3RoZXIsIGEgY2hhcmdlIG9uIHdoaWNoIG1lbiBydW4gdGhlIHJpc2sgYm90aCBvZgogICAgICAgICAgICAgICAgICAgIGRhbWFnZXMgaW4gbW9uZXkgYW5kIHRoZSBsb3NzIG9mIGNpdGl6ZW5zaGlwLiA8L3RyYW5zbGF0aW9uPg=="
translation['29.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgaW4gc2Vla2luZyB0byBicmluZyB0aGUgdHJ1dGggb2YgdGhlIG1hdHRlciB0byBsaWdodCwgaGUgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGRlbWFuZGVkIG9mIG1lIHRoZSBzbGF2ZSB3aG8gd3JvdGUgdGhlIGRlcG9zaXRpb25zLCBpbiBvcmRlciB0aGF0LCBpZiBJIHJlZnVzZWQKICAgICAgICAgICAgICAgICAgICB0byBnaXZlIGhpbSB1cCwgSSBtaWdodCBzZWVtIHRvIGhhdmUgbm8ganVzdCBncm91bmQgZm9yIG15IHN0YXRlbWVudHMuIEJ1dCwgYXMKICAgICAgICAgICAgICAgICAgICBpdCBpcywgc28gZmFyIGZyb20gZG9pbmcgYW55dGhpbmcgb2YgdGhlIHNvcnQsIGhlIHJlZnVzZWQgdG8gYWNjZXB0IHRoZSBzbGF2ZQogICAgICAgICAgICAgICAgICAgIGZvciB0b3J0dXJlLCB3aGVuIEksIG9uIGhpcyBkZW5pYWwgdGhhdCBoZSBoYWQgZ2l2ZW4gdGhlIGV2aWRlbmNlLCBvZmZlcmVkIGhpbS4KICAgICAgICAgICAgICAgICAgICBTbyBwbGFpbiBpcyBpdCB0aGF0IHJlZ2FyZGluZyB0aGlzIG1hdHRlciB0b28gYm90aCBoZSBhbmQgQXBob2J1cyBhcyB3ZWxsIHdlcmUKICAgICAgICAgICAgICAgICAgICBhbGlrZSB1bndpbGxpbmcgdG8gaGF2ZSByZWNvdXJzZSB0byB0b3J0dXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['29.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBteSB3b3JkcyBhcmUgdHJ1ZSwgdGhhdCBhZnRlcgogICAgICAgICAgICAgICAgICAgIEFlc2l1cyBoYWQgZ2l2ZW4gaGlzIHRlc3RpbW9ueSB3aXRoIHRoZSBvdGhlciB3aXRuZXNzZXMsIGhlIG1hZGUgbm8gZGVuaWFsIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGZhY3QsIHdoZW4sIHN0YW5kaW5nIGJ5IHRoZSBwbGFpbnRpZmYncyBzaWRlIGluIHRoZSBjb3VydHJvb20sIGhlIGhlYXJkIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb24gcmVhZCwgYW5kIHRoYXQsIHdoZW4gSSBvZmZlcmVkIHRoZSBzbGF2ZSB0byB0aGVtIHRvIGJlIHF1ZXN0aW9uZWQgYnkKICAgICAgICAgICAgICAgICAgICB0b3J0dXJlIHJlZ2FyZGluZyBhbGwgdGhlc2UgbWF0dGVycywgaGUgcmVmdXNlZCB0byBhY2NlcHQgdGhlCiAgICAgICAgICAgICAgICAgICAgb2ZmZXLigJRyZWdhcmRpbmcgZWFjaCBvZiB0aGVzZSBwb2ludHMgc2V2ZXJhbGx5IEkgc2hhbGwgcHJvZHVjZQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3Nlcy4gUGxlYXNlIGNhbGwgdGhlbSBoZXJlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IldpdG5lc3NlcyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdyB0bwogICAgICAgICAgICAgICAgICAgIHNldCBmb3J0aCB0byB5b3UsIG1lbiBvZiB0aGUganVyeSwgd2hhdCBJIGNvbnNpZGVyIGEgc3Ryb25nZXIgcHJvb2YgdGhhbiBhbGwKICAgICAgICAgICAgICAgICAgICB0aG9zZSB0aGF0IGhhdmUgYmVlbiBtZW50aW9uZWQsIHRvIHNob3cgdGhhdCB0aGUgcGxhaW50aWZmIGRpZCBnaXZlIHRoaXMgYW5zd2VyLgogICAgICAgICAgICAgICAgICAgIFdoZW4sIGRlc3BpdGUgdGhlIGFkbWlzc2lvbnMgd2hpY2ggaGUgaXMgcHJvdmVkIHRvIGhhdmUgbWFkZSwgaGUgZGVtYW5kZWQgb2YgbWUKICAgICAgICAgICAgICAgICAgICA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IGZvciB0b3J0dXJlLCBJIHdhcyBzbwogICAgICAgICAgICAgICAgICAgIGVhZ2VyIHRvIHNob3cgb24gdGhlIHNwb3QgdGhhdCB0aGlzLCB0b28sIHdhcyBhIHN1YnRlcmZ1Z2Ugb24gaGlzIHBhcnQsIHRoYXQKICAgICAgICAgICAgICAgICAgICB3aGF0IGRvIHlvdSB0aGluayBJIGRpZD8gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['29.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5JIHN1bW1vbmVkIEFwaG9idXMgdG8KICAgICAgICAgICAgICAgICAgICBnaXZlIGV2aWRlbmNlIGFnYWluc3QgRGVtbywgaGlzIHVuY2xlIGFuZCBhIHBhcnRuZXIgaW4gaGlzIGNyaW1lcy4gSSB3cm90ZSBvdXQKICAgICAgICAgICAgICAgICAgICB0aGUgdGVzdGltb255IHdoaWNoIGhlIG5vdyBhdHRhY2tzIGFzIGZhbHNlIGFuZCBvcmRlcmVkIGhpbSB0byBtYWtlIGEgZGVwb3NpdGlvbgogICAgICAgICAgICAgICAgICAgIHRvIGl0LiBBdCBmaXJzdCBoZSBicmF6ZW5seSByZWZ1c2VkLCBidXQgd2hlbiB0aGUgYXJiaXRyYXRvciBiYWRlIGhpbSBkZXBvc2UsIG9yCiAgICAgICAgICAgICAgICAgICAgZGVueSB0aGUgZmFjdCB1bmRlciBvYXRoLCBoZSBkZXBvc2VkLCBzb3JlbHkgYWdhaW5zdCBoaXMgd2lsbC4gQW5kIHlldCBpZiB0aGUKICAgICAgICAgICAgICAgICAgICBtYW4gd2FzIGEgc2xhdmUsIGFuZCBoYWQgbm90IGJlZW4gYWxyZWFkeSBhZG1pdHRlZCBieSBBcGhvYnVzIGhlcmUgdG8gYmUgZnJlZSwKICAgICAgICAgICAgICAgICAgICB3aGF0IGluIHRoZSB3b3JsZCBpbmR1Y2VkIGhpbSB0byBtYWtlIHRoaXMgZGVwb3NpdGlvbj8gV2h5IGRpZCBoZSBub3QgZGVueSBpdCBvbgogICAgICAgICAgICAgICAgICAgIG9hdGgsIGFuZCBzbyBnZXQgZnJlZSBvZiB0aGUgYWZmYWlyPyA8L3RyYW5zbGF0aW9uPg=="
translation['29.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5QcmF5IG5vdGUKICAgICAgICAgICAgICAgICAgICB0aGF0IGluIHJlZ2FyZCB0byB0aGlzIG1hdHRlciBhbHNvIEkgd2FzIHJlYWR5IHRvIGdpdmUgb3ZlciB0byBoaW0gZm9yIHRvcnR1cmUKICAgICAgICAgICAgICAgICAgICB0aGUgc2xhdmUgd2hvIGhhZCB3cml0dGVuIHRoZSBkZXBvc2l0aW9uLCB3aG8gd291bGQga25vdyBoaXMgb3duIGhhbmR3cml0aW5nLAogICAgICAgICAgICAgICAgICAgIGFuZCB3aG8gY2xlYXJseSByZW1lbWJlcmVkIHRoYXQgQXBob2J1cyBoYWQgbWFkZSB0aGUgZGVwb3NpdGlvbi4gSSB3YXMgcmVhZHkgdG8KICAgICAgICAgICAgICAgICAgICBkbyB0aGlzLCBub3QgZm9yIHdhbnQgb2Ygd2l0bmVzc2VzIHdobyB3ZXJlIHByZXNlbnQsIGZvciB0aGVyZSB3ZXJlIHNvbWU7IGJ1dCBpbgogICAgICAgICAgICAgICAgICAgIG9yZGVyIHRoYXQgaGUgbWlnaHQgbm90IGFjY3VzZSB0aGVzZSBtZW4gb2YgZ2l2aW5nIGZhbHNlIHRlc3RpbW9ueSwgYW5kIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0IG9mIHRoZSB0b3J0dXJlIG1pZ2h0IHN1cHBvcnQgdGhlbS4gWWV0IGl0IGlzIG5vdCBmYWlyIHRvIGNvbmRlbW4gdGhlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzIG9uIGhpcyBhY2NvdW50LiBUaGV5IGFsb25lIG9mIG1lbiB3aG8gaGF2ZSBhcyB5ZXQgc3Rvb2QgdHJpYWwgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgeW91IGNhbiBzaG93IHRoYXQgdGhlIHBsYWludGlmZiBoaW1zZWxmIGhhcyBib3JuZSB3aXRuZXNzIHRvIHRoZWlyIHRlc3RpbW9ueSBhcwogICAgICAgICAgICAgICAgICAgIHRvIHRoZXNlIG1hdHRlcnMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZyB0aGUKICAgICAgICAgICAgICAgICAgICB0cnV0aCwgdGFrZSB0aGUgY2hhbGxlbmdlIGFuZCB0aGUgZGVwb3NpdGlvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDaGFsbGVuZ2UiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaGFsbGVuZ2U8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U3VjaCBhcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgbGVnYWwgdGVzdHMgd2hpY2ggaGUgaGFzIHJlZnVzZWQsIGFuZCBzbyBudW1lcm91cyB0aGUgcHJvb2ZzIGJ5IHdoaWNoIGhlIGlzCiAgICAgICAgICAgICAgICAgICAgc2hvd24gdG8gYmUgYWN0aW5nIHdpdGggbWFsaWNlIGFuZCBpbnNpbmNlcml0eTsgeWV0IGhlIGRlbWFuZHMgdGhhdCB5b3UgcHV0CiAgICAgICAgICAgICAgICAgICAgY3JlZGVuY2UgaW4gaGlzIG93biB3aXRuZXNzZXMsIGFuZCBoZSBzbGFuZGVycyBtaW5lLCBhbmQgZGVjbGFyZXMgdGhhdCB0aGVpcgogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBpcyBmYWxzZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdyB0byBzcGVhayBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBtYXR0ZXIgb24gdGhlIGJhc2lzIG9mIHByb2JhYmlsaXRpZXMuIEkgYW0gY2VydGFpbiB0aGF0IHlvdSB3b3VsZCBhbGwgYWdyZWUgdGhhdAogICAgICAgICAgICAgICAgICAgIHRob3NlIHdobyBnaXZlIGZhbHNlIHRlc3RpbW9ueSBhcmUgbGVkIHRvIGRvIHNvIGJ5IGJyaWJlcyB0aHJvdWdoIHN0cmVzcyBvZgogICAgICAgICAgICAgICAgICAgIHBvdmVydHksIG9yIGJ5IGZyaWVuZHNoaXAsIG9yIGVsc2UgYnkgZW5taXR5IHRvd2FyZCB0aGUgb3Bwb3NpdGUgcGFydHkgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc3VpdC4gPC90cmFuc2xhdGlvbj4="
translation['29.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgbm8gb25lIG9mIHRoZXNlIHJlYXNvbnMgd291bGQgaGF2ZQogICAgICAgICAgICAgICAgICAgIGxlZCB0aGUgbWVuIHRvIHRlc3RpZnkgaW4gbXkgZmF2b3IuIE5vdCBmcmllbmRzaGlwOyBob3cgY291bGQgdGhhdCBiZSwgc2VlaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IGFyZSBub3QgZW5nYWdlZCBpbiB0aGUgc2FtZSBwdXJzdWl0cywgbm9yIGFyZSB0aGV5IG9mIGxpa2UgYWdlLCBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBub3Qgc2F5IHdpdGggbWUsIGJ1dCB3aXRoIG9uZSBhbm90aGVyPyBOb3QgZW5taXR5IGFnYWluc3QgbXkgYWR2ZXJzYXJ5LCB0aGF0IGlzCiAgICAgICAgICAgICAgICAgICAgcGxhaW47IGZvciBvbmUgb2YgdGhlbSBpcyBoaXMgYnJvdGhlciBhbmQgcGxlYWRzIG9uIGhpcyBzaWRlOyBQaGFudXMgaXMgYSBjbG9zZQogICAgICAgICAgICAgICAgICAgIGZyaWVuZCBhbmQgYSBtZW1iZXIgb2YgdGhlIHNhbWUgdHJpYmU7IGFuZCBQaGlsaXAgaXMgbmVpdGhlciBmcmllbmQgbm9yIGVuZW15LAogICAgICAgICAgICAgICAgICAgIHNvIHRoYXQgdGhpcyBtb3RpdmUsIHRvbywgY2Fubm90IGJlIGp1c3RseSBjaGFyZ2VkIGFnYWluc3QgdGhlbS4gPC90cmFuc2xhdGlvbj4="
translation['29.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgbm8gb25lIGNvdWxkIHNheSB0aGF0IHBvdmVydHkgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGdyb3VuZCwgZm9yIHRoZXkgYWxsIHBvc3Nlc3MgbWVhbnMgc28gYW1wbGUgdGhhdCB0aGV5IHdpbGxpbmdseSBhc3N1bWUgdGhlCiAgICAgICAgICAgICAgICAgICAgZXhwZW5zZSBvZiBwdWJsaWMgc2VydmljZXMsIGFuZCBkaXNjaGFyZ2Ugd2hhdGV2ZXIgZHV0aWVzIGFyZSBsYWlkIHVwb24gdGhlbS4KICAgICAgICAgICAgICAgICAgICBCZXNpZGVzIGFsbCB0aGlzLCB0aGV5IGFyZSB3ZWxsIGtub3duIHRvIHlvdSwgYW5kIHlvdSBrbm93IG5vdGhpbmcgdG8gdGhlaXIKICAgICAgICAgICAgICAgICAgICBkaXNjcmVkaXQ7IGZvciB0aGV5IGFyZSB3b3J0aHkgY2l0aXplbnMuIFlldCwgaWYgdGhleSBhcmUgbm90IHBvb3IsIG5vciBlbmVtaWVzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHBsYWludGlmZiwgbm9yIGZyaWVuZHMgb2YgbWluZSwgaG93IGNhbiBpdCBiZSByaWdodCB0byBzdXNwZWN0IHRoZW0gb2YKICAgICAgICAgICAgICAgICAgICBiZWFyaW5nIGZhbHNlIHdpdG5lc3M/IEkgY2VydGFpbmx5IGRvIG5vdCBrbm93LiA8L3RyYW5zbGF0aW9uPg=="
translation['29.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TXkgb3Bwb25lbnQgd2FzIGF3YXJlIG9mIGFsbCB0aGlzLCBhbmQga25ldwogICAgICAgICAgICAgICAgICAgIGJldHRlciB0aGFuIGFueWJvZHkgZWxzZSB0aGF0IHRoZWlyIHRlc3RpbW9ueSB3YXMgdHJ1ZSwgYnV0IG5vbmV0aGVsZXNzIGhlCiAgICAgICAgICAgICAgICAgICAgYnJpbmdzIGZvcndhcmQgYSBtYWxpY2lvdXMgY2hhcmdlIGFnYWluc3QgdGhlbSwgYW5kIG5vdCBvbmx5IGRlY2xhcmVzIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IG1ha2UgdGhlIHN0YXRlbWVudCB3aGljaCBJIGhhdmUgcHJvdmVkIGluIHRoZSBtb3N0IGNvbmNsdXNpdmUgbWFubmVyCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBkaWQgbWFrZSwgYnV0IGV2ZW4gYXNzZXJ0cyB0aGF0IHRoZSBtYW4sIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGlzIGluIGZhY3QgYSBzbGF2ZS4gSSB3aXNoIGluIGEgdmVyeSBmZXcgd29yZHMgdG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IGluIHRoaXMsIHRvbywgaGUgaXMgbHlpbmcuIEkgd2FzIHJlYWR5LCBtZW4gb2YgdGhlIGp1cnksIHJlZ2FyZGluZyB0aGlzCiAgICAgICAgICAgICAgICAgICAgcG9pbnQgYWxzbyB0byBnaXZlIG92ZXIgdG8gaGltIHRvIGJlIHRlc3RlZCBieSB0b3J0dXJlIG15IGZlbWFsZSBzbGF2ZXMsIHdobwogICAgICAgICAgICAgICAgICAgIHJlbWVtYmVyIHRoYXQgbXkgZmF0aGVyIG9uIGhpcyBkZWF0aC1iZWQgc2V0IHRoaXMgbWFuIGZyZWUuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['29.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5CZXNpZGVzIHRoaXMsIG15IG1vdGhlciB3YXMgcmVhZHkgdG8gY2FsbCB0byBoZXIgc2lkZSBteQogICAgICAgICAgICAgICAgICAgIHNpc3RlciBhbmQgbXlzZWxmLCBhbmQgc3dlYXIsIHdpdGggaW1wcmVjYXRpb25zIG9uIG91ciBoZWFkcyBpZiBzaGUgc3Bva2UKICAgICAgICAgICAgICAgICAgICBmYWxzZWx54oCUd2Ugd2VyZSBoZXIgb25seSBjaGlsZHJlbiwgYW5kIGl0IHdhcyBmb3Igb3VyIHNha2VzIHRoYXQgc2hlCiAgICAgICAgICAgICAgICAgICAgZ2F2ZSBoZXJzZWxmIHVwIHRvIGEgbGlmZSBvZiB3aWRvd2hvb2TigJR0aGF0IG15IGZhdGhlciB3aGVuIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGFib3V0IHRvIGRpZSBoYWQgc2V0IHRoaXMgbWFuIGZyZWUsIGFuZCB0aGF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gd2FzIHJlZ2FyZGVkIGJ5IHVzIGFzIGZyZWUgdGhlcmVhZnRlci4gTGV0IG5vIG9uZSBvZiB5b3UKICAgICAgICAgICAgICAgICAgICBhc3N1bWUgdGhhdCBzaGUgd291bGQgaGF2ZSBiZWVuIHdpbGxpbmcgdG8gbWFrZSB0aGlzIG9hdGggd2l0aCBpbXByZWNhdGlvbnMgb24KICAgICAgICAgICAgICAgICAgICBvdXIgaGVhZHMgaWYgc2hlIGhhZCBub3Qga25vd24gd2VsbCB0aGF0IHdoYXQgc2hlIHdhcyB0byBzd2VhciB0byB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgdHJ1ZS48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Db21lIG5vdywgdG8gcHJvdmUgdGhhdCBJIGFtIHNwZWFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHRydXRoIGFuZCB0aGF0IHdlIHdlcmUgcmVhZHkgdG8gZG8gdGhlc2UgdGhpbmdzLCBjYWxsIHRoZSB3aXRuZXNzZXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlcmV0by48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['29.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28gbWFueSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIGp1c3QgYXJndW1lbnRzIHdlIGhhZCB0byB1cmdlLCBhbmQgc28gcmVhZHkgd2VyZSB3ZSB0byBoYXZlIHJlY291cnNlIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIG1vc3QgaW5mYWxsaWJsZSB0ZXN0cyByZWdhcmRpbmcgdGhlIHRlc3RpbW9ueSBnaXZlbjsgYW5kIHlldCB0aGUgcGxhaW50aWZmCiAgICAgICAgICAgICAgICAgICAgZXZhZGVzIGFsbCB0aGVzZSwgYW5kIGZhbmNpZXMgdGhhdCBieSBzbGFuZGVyaW5nIG1lIHJlZ2FyZGluZyB0aGUgdHJpYWwgd2hpY2gKICAgICAgICAgICAgICAgICAgICBoYXMgYWxyZWFkeSB0YWtlbiBwbGFjZSwgYW5kIGJyaW5naW5nIGFjY3VzYXRpb25zIGFnYWluc3QgbWUsIGhlIGNhbiBpbmR1Y2UgeW91CiAgICAgICAgICAgICAgICAgICAgdG8gY29udmljdCB0aGUgd2l0bmVzcyzigJRhIHBpZWNlIG9mIHRyaWNrZXJ5IHRoZSBtb3N0IHVuZmFpciBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgbW9zdCByYXBhY2lvdXMgaW1hZ2luYWJsZS4gPC90cmFuc2xhdGlvbj4="
translation['29.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgaGFzIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICBzdWJvcm5lZCBtZW4gdG8gYmVhciBmYWxzZSB3aXRuZXNzIGFib3V0IHRoZXNlIG1hdHRlcnMsIGhhdmluZyBhcyBjby13b3JrZXJzIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXItaW4tbGF3IE9uZXRvciwgYW5kIFRpbW9jcmF0ZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGltb2NyYXRlczogcG9zc2libHkgdGhlIHNhbWUgYXMgdGhlIFRpbW9jcmF0ZXMgYWdhaW5zdCB3aG9tIERlbW9zdGhlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJlZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI0IiB2YWxpZD0ieWVzIj5EZW0uIDI0PC9iaWJsPjwvbm90ZT47IHdlIGhhZCBubyBmb3Jld2FybmluZyBvZgogICAgICAgICAgICAgICAgICAgIHRoaXMsIGFuZCBzdXBwb3NlZCB0aGF0IHRoZSBjb250ZXN0IHdvdWxkIGJlIHJlZ2FyZGluZyB0aGUgZGVwb3NpdGlvbiBhbG9uZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlIGhhdmUgbm90IGNvbWUgcHJlcGFyZWQgd2l0aCB3aXRuZXNzZXMgcmVnYXJkaW5nIHRoZSBndWFyZGlhbnNoaXAKICAgICAgICAgICAgICAgICAgICBhY2NvdW50cy4gTmV2ZXJ0aGVsZXNzLCBkZXNwaXRlIHRoZSBmZWxsb3cncyB0cmlja2VyeSwgSSB0aGluayB0aGF0LCBzaW1wbHkgYnkKICAgICAgICAgICAgICAgICAgICByZWNpdGluZyB0aGUgZmFjdHMsIEkgc2hhbGwgZWFzaWx5IGNvbnZpbmNlIHlvdSB0aGF0IG5vIG1hbiB3YXMgZXZlciBtb3JlIGp1c3RseQogICAgICAgICAgICAgICAgICAgIGNvbnZpY3RlZCB0aGFuIGhlLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI0IiB2YWxpZD0ieWVzIj5EZW0uIDI0PC9iaWJsPjwvdHJhbnNsYXRpb24+"
translation['29.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm90IGJlY2F1c2UgSQogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgdG8gYWxsb3cgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiB0byBiZSBwdXQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgdG9ydHVyZSwgbm9yIGJlY2F1c2UgaGUgaGltc2VsZiBhZG1pdHRlZCB0aGUgbWFuIHRvIGJlIGEgZnJlZW1hbiwgbm9yIHlldAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgdGhlc2Ugd2l0bmVzc2VzIGdhdmUgdGhlaXIgdGVzdGltb255OyBidXQgYmVjYXVzZSBoZSB3YXMgcHJvdmVkIHRvIGhhdmUKICAgICAgICAgICAgICAgICAgICB0YWtlbiBwb3NzZXNzaW9uIG9mIGxhcmdlIHN1bXMgYmVsb25naW5nIHRvIG1lLCBhbmQgYmVjYXVzZSBoZSBkaWQgbm90IGxldCB0aGUKICAgICAgICAgICAgICAgICAgICBlc3RhdGUsIHRob3VnaCB0aGUgbGF3cyBzbyBvcmRlcmVkIGFuZCBteSBmYXRoZXIgaGFkIHNvIGRpcmVjdGVkIGluIGhpcyB3aWxsLCBhcwogICAgICAgICAgICAgICAgICAgIEkgc2hhbGwgcGxhaW5seSBzaG93IHlvdS4gRm9yIHRoZXNlIHdlcmUgdGhpbmdzIHRoYXQgYW55b25lIGNvdWxkIHNlZSwgdGhlIGxhd3MsCiAgICAgICAgICAgICAgICAgICAgbmFtZWx5LCBhbmQgdGhlIGFtb3VudCBvZiBteSBwcm9wZXJ0eSB3aGljaCB0aGVzZSBtZW4gaGFkIHRha2VuIGFzIHBsdW5kZXI7IGJ1dAogICAgICAgICAgICAgICAgICAgIGFzIGZvciA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIG5vYm9keSBrbmV3IGV2ZW4gd2hvCiAgICAgICAgICAgICAgICAgICAgaGUgd2FzLiBZb3Ugd2lsbCBzZWUgZnJvbSB0aGUgY2hhcmdlcyBicm91Z2h0IGFnYWluc3QgQXBob2J1cyB0aGF0IHRoZXNlIHRoaW5ncwogICAgICAgICAgICAgICAgICAgIGFyZSBzby4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['29.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgd2hlbiBJIGluc3RpdHV0ZWQgbXkgc3VpdCBhZ2FpbnN0IGhpbSBjb25jZXJuaW5nIGhpcwogICAgICAgICAgICAgICAgICAgIGd1YXJkaWFuc2hpcCwgSSBkaWQgbm90IGZpeCB0aGUgZGFtYWdlcyBhdCBhIGx1bXAgc3VtLCBhcyBvbmUgYnJpbmdpbmcgZm9yd2FyZCBhCiAgICAgICAgICAgICAgICAgICAgYmFzZWxlc3MgY2hhcmdlIG91dCBvZiBtYWxpY2Ugd291bGQgaGF2ZSBkb25lLCBidXQgc3BlY2lmaWVkIGVhY2ggaXRlbSwgc3RhdGluZwogICAgICAgICAgICAgICAgICAgIHRoZSBzb3VyY2Ugb2YgZWFjaCwgdGhlIHByZWNpc2UgYW1vdW50LCBhbmQgdGhlIHBlcnNvbiBmcm9tIHdob20gaXQgaGFkIGJlZW4KICAgICAgICAgICAgICAgICAgICByZWNlaXZlZC4gSW4gbm8gY2FzZSBkaWQgSSBhZGQgbWVudGlvbiBvZiA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IGFzIGhhdmluZyBrbm93bGVkZ2Ugb2YgYW55IG9mIHRoZXNlIG1hdHRlcnMuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['29.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5IZW5jZSB0aGlzIGlzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGNvbXBsYWludDoKICAgICAgICAgICAgICAgICAgICDigJxEZW1vc3RoZW5lcyBtYWtlcyB0aGUgZm9sbG93aW5nIGNoYXJnZXMgYWdhaW5zdCBBcGhvYnVzLiBBcGhvYnVzIGhhcwogICAgICAgICAgICAgICAgICAgIGluIGhpcyBwb3NzZXNzaW9uIG1vbmV5cyBvZiBtaW5lLCByZWNlaXZlZCBieSBoaW0gaW4gaGlzIGNhcGFjaXR5IGFzIGd1YXJkaWFuLAogICAgICAgICAgICAgICAgICAgIGFzIGZvbGxvd3M6IGVpZ2h0eSBtaW5hZSwgd2hpY2ggaGUgcmVjZWl2ZWQgYXMgdGhlIG1hcnJpYWdlLXBvcnRpb24gb2YgbXkgbW90aGVyCiAgICAgICAgICAgICAgICAgICAgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSB0ZXJtcyBvZiBteSBmYXRoZXIncyB3aWxsLuKAnSBUaGlzIGlzIHRoZSBmaXJzdAogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzdW1zIG9mIHdoaWNoIEkgY2xhaW0gdG8gaGF2ZSBiZWVuIGRlZnJhdWRlZC4gTm93IHdoYXQgd2FzIHRoZQogICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uIG9mIHRoZSB3aXRuZXNzZXM/IOKAnFRoYXQgdGhleSB3ZXJlIHByZXNlbnQgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3IsIE5vdGhhcmNodXMsIHdoZW4gQXBob2J1cyBhZG1pdHRlZCB0aGF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gd2FzIGEgZnJlZW1hbiwgaGF2aW5nIGJlZW4KICAgICAgICAgICAgICAgICAgICBlbWFuY2lwYXRlZCBieSB0aGUgZmF0aGVyIG9mIERlbW9zdGhlbmVzLuKAnSA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['29.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Db25zaWRlciBub3cgZm9yIHlvdXJzZWx2ZXMgd2hldGhlciBpbiB5b3VyIGp1ZGdlbWVudCB0aGVyZQogICAgICAgICAgICAgICAgICAgIGNvdWxkIGJlIGFuIG9yYXRvciwgb3Igc29waGlzdCBvciBtYWdpY2lhbiBzbyB3b25kcm91c2x5IGNsZXZlciBpbiBzcGVha2luZyBhcwogICAgICAgICAgICAgICAgICAgIGJ5IG1lYW5zIG9mIHRoaXMgdGVzdGltb255IHRvIGNvbnZpbmNlIGFueSBtYW4gb24gZWFydGggdGhhdCBBcGhvYnVzIGlzIGluCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiB0aGUgbWFycmlhZ2UtcG9ydGlvbiBvZiB0aGUgc3BlYWtlcidzIG1vdGhlci4gV2hhdCBpbiBoZWF2ZW4ncwogICAgICAgICAgICAgICAgICAgIG5hbWUgd291bGQgaGUgc2F5PyDigJxBcGhvYnVzIGhhcyBhZG1pdHRlZCB0aGF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gaXMgYSBmcmVlbWFuLuKAnSBBbmQgd2h5IG9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhY2NvdW50IGlzIGhlIGFueSB0aGUgbW9yZSBpbiBwb3NzZXNzaW9uIG9mIHRoZSBtYXJyaWFnZS1wb3J0aW9uPyBUaGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgd291bGQgc3VyZWx5IG5vdCBzZWVtIHRvIHByb3ZlIGl0LiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['29.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaG93IHdhcyBpdCBwcm92ZWQ/IEluIHRoZSBmaXJzdCBwbGFjZSwgVGhlcmlwcGlkZXMsIGhpcyBjby10cnVzdGVlLAogICAgICAgICAgICAgICAgICAgIHRlc3RpZmllZCB0aGF0IGhlIGhhZCBnaXZlbiBoaW0gdGhlIG1vbmV5LiBTZWNvbmRseSwgRGVtbywgaGlzIHVuY2xlLCBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgcmVzdCBvZiB0aGUgd2l0bmVzc2VzIHdobyB3ZXJlIHByZXNlbnQsIHRlc3RpZmllZCB0aGF0IGhlIGFncmVlZCB0byBzdXBwbHkgbXkKICAgICAgICAgICAgICAgICAgICBtb3RoZXIgd2l0aCBtYWludGVuYW5jZSwgYXMgYmVpbmcgaW4gcG9zc2Vzc2lvbiBvZiBoZXIgcG9ydGlvbi4gQWdhaW5zdCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiBoZSBoYXMgbG9kZ2VkIG5vIGNoYXJnZXMsIHBsYWlubHkgYmVjYXVzZSBoZSBrbmV3IHRoYXQgdGhlaXIgdGVzdGltb255IHdhcwogICAgICAgICAgICAgICAgICAgIHRydWUuIEJlc2lkZXMgdGhpcywgbXkgbW90aGVyIHdhcyByZWFkeSB0byBjYWxsIHRvIGhlciBzaWRlIG15IHNpc3RlciBhbmQKICAgICAgICAgICAgICAgICAgICBteXNlbGYsIGFuZCBzd2VhciB3aXRoIGltcHJlY2F0aW9ucyBvbiBvdXIgaGVhZHMsIGlmIHNoZSBzcG9rZSBmYWxzZWx5LCB0aGF0CiAgICAgICAgICAgICAgICAgICAgQXBob2J1cyBoYWQgcmVjZWl2ZWQgaGVyIG1hcnJpYWdlLXBvcnRpb24gYWNjb3JkaW5nIHRvIHRoZSB0ZXJtcyBvZiBteSBmYXRoZXIncwogICAgICAgICAgICAgICAgICAgIHdpbGwuIDwvdHJhbnNsYXRpb24+"
translation['29.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5TaGFsbCB3ZSwgdGhlbiwgc2F5LCBvciBzaGFsbCB3ZSBub3QsCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBoYXMgcG9zc2Vzc2lvbiBvZiB0aGVzZSBlaWdodHkgbWluYWU/IEFuZCB3YXMgaXQgb24gdGhlIGV2aWRlbmNlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlc2Ugd2l0bmVzc2VzIGhlcmUgb3Igb2YgdGhvc2UgdGhhdCBoZSB3YXMgY29udmljdGVkPyBJIHRoaW5rIGl0IHdhcyBvbiB0aGUKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSBvZiB0cnV0aC4gSGUgaGFzIGVuam95ZWQgdGhlIGludGVyZXN0IG9uIHRoaXMgc3VtIGZvciB0ZW4geWVhcnMsIGFuZAogICAgICAgICAgICAgICAgICAgIGV2ZW4gdGhvdWdoIGp1ZGdlbWVudCBoYXMgYmVlbiBnaXZlbiBhZ2FpbnN0IGhpbSwgY2Fubm90IGJyaW5nIGhpbXNlbGYgdG8gcGF5IGl0CiAgICAgICAgICAgICAgICAgICAgYmFjay4gRGVzcGl0ZSB0aGlzLCBoZSBkZWNsYXJlcyB0aGF0IGhlIGhhcyBiZWVuIG91dHJhZ2VvdXNseSB0cmVhdGVkIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgbG9zdCB0aGUgc3VpdCBieSByZWFzb24gb2YgdGhlc2Ugd2l0bmVzc2VzLiBZZXQgbm90IG9uZSBvZiB0aGVtIHRlc3RpZmllZAogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgaGFkIHJlY2VpdmVkIHRoZSBtYXJyaWFnZS1wb3J0aW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['29.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQgdG8gdGhlIG1hcml0aW1lIGxvYW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPldpdGggcmVmZXJlbmNlIHRvIHRoZXNlIGl0ZW1zIHNlZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3IiB2YWxpZD0ieWVzIj5EZW0uIDI3PC9iaWJsPjwvbm90ZT4gdGhlIHNvZmEtbWFrZXJzLCBhbmQgdGhlIGlyb24gYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGl2b3J5IHRoYXQgd2VyZSBsZWZ0IG1lLCBhbmQgbXkgc2lzdGVyJ3MgbWFycmlhZ2UtcG9ydGlvbiwgYXQgdGhlIHB1cmxvaW5pbmcgb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCBBcGhvYnVzIGNvbm5pdmVkIGluIG9yZGVyIHRvIHNlY3VyZSBmb3IgaGltc2VsZiB0aGUgcmlnaHQgdG8gdGFrZSB3aGF0ZXZlcgogICAgICAgICAgICAgICAgICAgIGhlIHBsZWFzZWQgb2YgbXkgZ29vZHMsIGxpc3RlbiwgYW5kIHNlZSBob3cganVzdCB3YXMgdGhlIHZlcmRpY3QgZ2l2ZW4gYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIGhpbSwgYW5kIGhvdyBhYnN1cmQgaXQgd291bGQgaGF2ZSBiZWVuIHRvIGV4YW1pbmUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNyIgdmFsaWQ9InllcyI+RGVtLiAyNzwvYmlibD48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvcGVyc05hbWU+IGJ5IHRvcnR1cmUgcmVnYXJkaW5nIGFueSBvZiB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['29.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIGFzCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkcyB0aGUgcHVybG9pbmluZyBvZiBmdW5kcyBhdCB3aGljaCB5b3UgY29ubml2ZWQgdGhlcmUgaXMgYSBsYXcgd2hpY2gKICAgICAgICAgICAgICAgICAgICBleHByZXNzbHkgZGVjbGFyZXMgdGhhdCB5b3UgYXJlIHJlc3BvbnNpYmxlIGZvciB0aGVtIGV4YWN0bHkgYXMgaWYgeW91IGhhZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgaW4geW91ciBvd24gcG9zc2Vzc2lvbi4gU28gd2hhdCBoYXMgdGhlIGxhdyB0byBkbyB3aXRoIHRoZSB0ZXN0aW5nIG9mIGEgc2xhdmUgYnkKICAgICAgICAgICAgICAgICAgICB0b3J0dXJlPyBCdXQgaW4gdGhlIG1hdHRlciBvZiB0aGUgbWFyaXRpbWUgbG9hbiB5b3UgbWFkZSBjb21tb24gY2F1c2Ugd2l0aAogICAgICAgICAgICAgICAgICAgICAgICBYdXRodXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkluIHRoZSBpbnZlbnRvcnkgb2YgdGhlIGVzdGF0ZSBvZgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmF0aGVyIG9mIERlbW9zdGhlbmVzLCBnaXZlbiBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3IiB2YWxpZD0ieWVzIj5EZW0uIDI3PC9iaWJsPiwgdGhlcmUKICAgICAgICAgICAgICAgICAgICAgICAgaXMgbWVudGlvbiBvZiBhIGJvdHRvbXJ5IGxvYW4gdG8gWHV0aHVzLCBhbW91bnRpbmcgdG8gc2V2ZW50eSBtaW5hZS48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgZGl2aWRlZCB0aGUgbW9uZXkgd2l0aCBoaW0sIGFuZCBkZXN0cm95ZWQgdGhlIGNvbnRyYWN0LCBhbmQgbm93IHRoYXQgeW91IGhhdmUKICAgICAgICAgICAgICAgICAgICBhcnJhbmdlZCBldmVyeXRoaW5nIHRvIHN1aXQgeW91ciB3aXNoLCBhbmQgaGF2ZSBkb25lIGF3YXkgd2l0aCB0aGUgZG9jdW1lbnRhcnkKICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSDvvIhhcyBEZW1vIHRlc3RpZmllZCBhZ2FpbnN0IHlvde+8iSwgeW91IGhhdmUgcmVjb3Vyc2UgdG8KICAgICAgICAgICAgICAgICAgICB0cmlja2VyeSwgYW5kIGVuZGVhdm9yIHRvIG1pc2xlYWQgdGhlc2UgZ2VudGxlbWVuLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3IiB2YWxpZD0ieWVzIj5EZW0uIDI3PC9iaWJsPiwgdGhlcmUKICAgICAgICAgICAgICAgICAgICAgICAgaXMgbWVudGlvbiBvZiBhIGJvdHRvbXJ5IGxvYW4gdG8gWHV0aHVzLCBhbW91bnRpbmcgdG8gc2V2ZW50eSBtaW5hZS48L3RyYW5zbGF0aW9uPg=="
translation['29.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5SZWdhcmRpbmcgdGhlIHNvZmEtbWFrZXJzLCBpZiB5b3UgdG9vayBtb25leSwgYW5kIG1hZGUgbGFyZ2UKICAgICAgICAgICAgICAgICAgICBwcm9maXRzIGZvciB5b3Vyc2VsZiBieSBtYWtpbmcgbG9hbnMgb24gc2VjdXJpdHkgdGhhdCB3YXMgbWluZeKAlHlvdSwKICAgICAgICAgICAgICAgICAgICB3aG8gc2hvdWxkIHJhdGhlciBoYXZlIHByZXZlbnRlZCBvdGhlcnMgZnJvbSBkb2luZyBzb+KAlGFuZCBmaW5hbGx5IG1hZGUKICAgICAgICAgICAgICAgICAgICBhd2F5IHdpdGggdGhlIHNsYXZlcyBhbHRvZ2V0aGVyLCB3aGF0LCBwcmF5LCBjYW4gdGhlIHdpdG5lc3NlcyBkbyBpbiB5b3VyCiAgICAgICAgICAgICAgICAgICAgYmVoYWxmPyBUaGVzZSBtZW4gYXQgYW55IHJhdGUgaGF2ZSBub3QgdGVzdGlmaWVkIHRoYXQgeW91IGFkbWl0dGVkIGxlbmRpbmcgbW9uZXkKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgc2VjdXJpdHkgb2YgbXkgc2xhdmVzLCBhbmQgdGhhdCB5b3UgYXBwcm9wcmlhdGVkIHRoZSBzbGF2ZXMgdG8geW91cnNlbGYuCiAgICAgICAgICAgICAgICAgICAgT24gdGhlIGNvbnRyYXJ5LCBpdCB3YXMgeW91IHdobyBhY2tub3dsZWRnZWQgdGhpcyBpbiB5b3VyIGFjY291bnQsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgdGVzdGlmaWVkIHRvIHRoZSBmYWN0IGFnYWluc3QgeW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['29.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGxvb2sgeW91LCBhcyB0byB0aGUgaXZvcnkgYW5kIGlyb24sIEkKICAgICAgICAgICAgICAgICAgICBoYXZlIHRoaXMgdG8gc2F5OiBhbGwgdGhlIHNsYXZlcyBvZiB0aGUgaG91c2Vob2xkIGtub3cgdGhhdCB0aGUgcGxhaW50aWZmIHVzZWQKICAgICAgICAgICAgICAgICAgICB0byBzZWxsIHRoZXNlIGFydGljbGVzLiBJIGFtIHJlYWR5IG5vdywgYXMgSSB3YXMgdGhlbiwgdG8gZ2l2ZSBvdmVyIHRvIGhpbSBhbnkKICAgICAgICAgICAgICAgICAgICBvbmUgb2YgdGhlc2Ugc2xhdmVzIHdob20gaGUgbWF5IGNob29zZSB0byBiZSBleGFtaW5lZCBieSB0b3J0dXJlLiBJZiB0aGVuLCBoZQogICAgICAgICAgICAgICAgICAgIGFsbGVnZXMgdGhhdCBJIHJlZnVzZSB0byBzdXJyZW5kZXIgdGhlIG1hbiB3aG8gaGFzIGtub3dsZWRnZSBvZiB0aGUgZmFjdHMsIGFuZAogICAgICAgICAgICAgICAgICAgIG9mZmVyIGhpbSBvdGhlcnMgd2hvIGhhdmUgbm8gc3VjaCBrbm93bGVkZ2UsIGhlIHdpbGwgYnV0IHNob3cgdGhhdCBoZSBvdWdodCBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgbW9yZSB0byBoYXZlIGFjY2VwdGVkIG15IG9mZmVyLiBGb3IgaWYgdGhvc2Ugd2hvbSBJIG9mZmVyZWQgdG8gaGltIGFzIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGtub3dsZWRnZSBvZiB0aGUgZmFjdHMsIGRlY2xhcmVkIHRoYXQgaGUgaGFkIG5vbmUgb2YgdGhlc2UgYXJ0aWNsZXMgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiwgaGUgd291bGQgb2YgY291cnNlIGhhdmUgYmVlbiBhY3F1aXR0ZWQgb2YgdGhlIGNoYXJnZS4gPC90cmFuc2xhdGlvbj4="
translation['29.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbm90aGluZyBvZiB0aGUgc29ydCBpcyB0aGUgdHJ1dGguIEl0IHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBiZWVuIHByb3ZlZCBwYXN0IGFsbCBxdWVzdGlvbiB0aGF0IGhlIGhhZCBzb2xkIHRoZSBnb29kcywgYW5kIGFwcHJvcHJpYXRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9maXRzLiBUaGVyZWZvcmUsIGhlIHBhc3NlZCBvdmVyIHRob3NlIHdobyB3ZXJlIGFkbWl0dGVkbHkgc2xhdmVzLCBhbmQKICAgICAgICAgICAgICAgICAgICBkZW1hbmRlZCB0aGF0IGEgZnJlZW1hbiBiZSBleGFtaW5lZCBieSB0b3J0dXJlLCB3aG9tIGl0IHdvdWxkIGhhdmUgYmVlbiBhIGNyaW1lCiAgICAgICAgICAgICAgICAgICAgZm9yIG1lIHRvIHN1cnJlbmRlcjsgZm9yIGl0IHdhcyBub3QgaGlzIHB1cnBvc2UgdGhhdCBoZSBzaG91bGQgc2lmdCBvdXQgdGhlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVyLCBidXQgdGhhdCBoZSBtaWdodCBtYWtlIGEgc3BlY2lvdXMgYXJndW1lbnQgb3V0IG9mIHRoZSBmYWN0IHRoYXQgaGlzCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kIHdhcyByZWZ1c2VkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWdhcmRpbmcsIHRoZXJlZm9yZSwgYWxsCiAgICAgICAgICAgICAgICAgICAgdGhlc2UgZmFjdHMsIGZpcnN0IHRoZSBtYXJyaWFnZS1wb3J0aW9uLCB0aGVuIGhpcyBjb25uaXZhbmNlIHdpdGggZnJhdWQsIHRoZW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhlIHJlc3QsIHRoZXJlIHNoYWxsIGJlIHJlYWQgdG8geW91IHRoZSBsYXdzIGFuZCB0aGUgZGVwb3NpdGlvbnMsIHRoYXQgeW91CiAgICAgICAgICAgICAgICAgICAgbWF5IGhhdmUgZnVsbCBrbm93bGVkZ2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3cyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhd3M8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3czwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm90IG9ubHkgZnJvbQogICAgICAgICAgICAgICAgICAgIHRoZSBmYWN0cyBhbHJlYWR5IGFkZHVjZWQgY2FuIHlvdSBzZWUgdGhhdCBBcGhvYnVzIHdhcyBub3QgaW4gYW55IHJlc3BlY3QKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBwcmVqdWRpY2VkIGJ5IG15IHJlZnVzYWwgdG8gZ2l2ZSB0aGUgbWFuIHVwIGZvciB0b3J0dXJlLCBidXQgYWxzbyBmcm9tCiAgICAgICAgICAgICAgICAgICAgYSBjb25zaWRlcmF0aW9uIG9mIHRoZSBtYXR0ZXIgaXRzZWxmLiBMZXQgdXMgc3VwcG9zZSB0aGF0IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gaXMgYmVpbmcgcmFja2VkIHVwb24gdGhlIHdoZWVsLCBhbmQKICAgICAgICAgICAgICAgICAgICBjb25zaWRlciB3aGF0IEFwaG9idXMgd291bGQgbW9zdCB3aXNoIGhpbSB0byBzYXkuIFdvdWxkIGl0IG5vdCBiZSB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIG5vdCBhd2FyZSB0aGF0IHRoZSBwbGFpbnRpZmYgaGFkIGFueSBvZiB0aGUgcHJvcGVydHkgaW4gaGlzIHBvc3Nlc3Npb24/IFdlbGwsCiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZSBoZSBzYXlzIHNvLiBEb2VzIHRoYXQgcHJvdmUgdGhhdCB0aGUgcGxhaW50aWZmIGhhcyBub25lPyBGYXIgZnJvbSBpdDsKICAgICAgICAgICAgICAgICAgICBmb3IgSSBwcm9kdWNlZCBtZW4gd2hvIGtuZXcsIG1lbiB3aG8gcGFpZCBoaW0gdGhlIG1vbmV5LCBtZW4gd2hvIHdlcmUgcHJlc2VudCBpbgogICAgICAgICAgICAgICAgICAgIHBlcnNvbiwgYXMgd2l0bmVzc2VzLiBJdCBpcyBjb252aW5jaW5nIHByb29mLCBub3QgaWYgb25lIGlzIGlnbm9yYW50IHRoYXQgYSBtYW4KICAgICAgICAgICAgICAgICAgICBoYXMgc29tZXRoaW5nIGluIGhpcyBwb3NzZXNzaW9uIO+8iGZvciB0aGVyZSBtaWdodCBiZSBtYW55CiAgICAgICAgICAgICAgICAgICAgc3VjaO+8iSwgYnV0IGlmIG9uZSBrbm93cyB0aGF0IGhlIGhhcyBpdC4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['29.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgb2YgdGhlIG1hbnkgd2l0bmVzc2VzIHdobyB0ZXN0aWZpZWQgYWdhaW5zdCB5b3UsIHdoYXQKICAgICAgICAgICAgICAgICAgICBvbmUgaGF2ZSB5b3Ugc3VlZCBmb3IgZmFsc2UgdGVzdGltb255PyBUZWxsIHVzLiBCdXQgeW91IGNhbm5vdC4gWWV0IHlvdSBwbGFpbmx5CiAgICAgICAgICAgICAgICAgICAgY29udmljdCB5b3Vyc2VsZiwgYW5kIHByb3ZlIHRoYXQgeW91IGxpZSB3aGVuIHlvdSBkZWNsYXJlIHRoYXQgeW91IGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIG91dHJhZ2VvdXNseSB0cmVhdGVkLCBhbmQgdGhhdCB5b3UgbG9zdCB0aGUgc3VpdCB1bmp1c3RseSwgYmVjYXVzZSB0aGlzIG1hbiB3YXMKICAgICAgICAgICAgICAgICAgICBub3QgZ2l2ZW4gdXAgdG8geW914oCUeW91IHdobyBtYWRlIG5vIGNoYXJnZSBvZiBnaXZpbmcgZmFsc2UgdGVzdGltb255CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgd2l0bmVzc2VzIHdobyB0ZXN0aWZpZWQgdGhhdCB5b3UgcmVjZWl2ZWQgYW5kIGhhZCBpbiB5b3VyIHBvc3Nlc3Npb24KICAgICAgICAgICAgICAgICAgICB0aGUgcHJvcGVydHksIGNvbmNlcm5pbmcgd2hpY2ggeW91IGRlbWFuZGVkIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gZm9yIHRvcnR1cmUgdG8gcHJvdmUgdGhhdCBpdCB3YXMgbmV2ZXIgbGVmdCB1cy4gSWYgeW91CiAgICAgICAgICAgICAgICAgICAgaGFkIHJlYWxseSBiZWVuIHdyb25nZWQsIGl0IHdvdWxkIGhhdmUgYmVlbiBtb3JlIGZpdHRpbmcgdG8gcHJvY2VlZCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgdGhlbS4gQnV0IHlvdSB3ZXJlIG5vdCB3cm9uZ2VkLCBhbmQgYXJlIGJyaW5naW5nIGEgYmFzZWxlc3Mgc3VpdCBvdXQgb2YgbWFsaWNlLgogICAgICAgICAgICAgICAgICAgICAgICA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['29.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgYXJlCiAgICAgICAgICAgICAgICAgICAgbWFueSBwb2ludHMgZnJvbSB3aGljaCBvbmUgbWF5IHNlZSB5b3VyIHJhc2NhbGl0eSwgYnV0IG1vc3Qgb2YgYWxsIGlmIG9uZSBoZWFycwogICAgICAgICAgICAgICAgICAgIGhvdyB5b3UgYWN0ZWQgcmVnYXJkaW5nIHRoZSB3aWxsLiBGb3IgYWx0aG91Z2ggbXkgZmF0aGVyLCBtZW4gb2YgdGhlIGp1cnksIHdyb3RlCiAgICAgICAgICAgICAgICAgICAgYSB3aWxsIGNvbnRhaW5pbmcgYW4gaW52ZW50b3J5IG9mIGFsbCB0aGF0IGhlIGxlZnQsIHdpdGggaW5zdHJ1Y3Rpb25zIGZvcgogICAgICAgICAgICAgICAgICAgIGxldHRpbmcgdGhlIHByb3BlcnR5LCB0aGlzIHdpbGwgQXBob2J1cyBuZXZlciBnYXZlIHVwIHRvIG1lLCBsZXN0IEkgc2hvdWxkIGxlYXJuCiAgICAgICAgICAgICAgICAgICAgZnJvbSBpdCB0aGUgdmFsdWUgb2YgdGhlIGVzdGF0ZSwgYW5kIGFkbWl0dGVkIHBvc3Nlc3Npbmcgb25seSB0aG9zZSBpdGVtcyB3aGljaAogICAgICAgICAgICAgICAgICAgIHdlcmUgc28gd2VsbCBrbm93biB0aGF0IGhlIGNvdWxkIG5vdCBkZW55IHRoYXQgaGUgaGFkIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['29.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgd2lsbCwgYWNjb3JkaW5nIHRvIGhpcyBzdGF0ZW1lbnQsIGNvbnRhaW5lZCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHByb3Zpc2lvbnM6IHRoYXQgRGVtb3Bob24gc2hvdWxkIGF0IG9uY2UgcmVjZWl2ZSB0d28gdGFsZW50cywgYW5kIHNob3VsZCBtYXJyeQogICAgICAgICAgICAgICAgICAgIG15IHNpc3RlciB3aGVuIHNoZSBzaG91bGQgY29tZSBvZiBhZ2Ug77yIdGhpcyB3b3VsZCBiZSBpbiB0ZW4KICAgICAgICAgICAgICAgICAgICB5ZWFyc++8iTsgdGhhdCBBcGhvYnVzIGhpbXNlbGYgc2hvdWxkIGhhdmUgZWlnaHR5IG1pbmFlIHdpdGggbXkgbW90aGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgaG91c2UgdG8gbGl2ZSBpbjsgYW5kIHRoYXQgVGhlcmlwcGlkZXMgc2hvdWxkIGVuam95IHRoZSBpbnRlcmVzdCBvbgogICAgICAgICAgICAgICAgICAgIHNldmVudHkgbWluYWUgdW50aWwgSSBzaG91bGQgcmVhY2ggbWFuaG9vZC4gQWxsIHRoZSByZXN0IG9mIHRoZSBwcm9wZXJ0eSBsZWZ0IHRvCiAgICAgICAgICAgICAgICAgICAgbWUgYXBhcnQgZnJvbSB0aGVzZSBpdGVtcywgYW5kIHRoZSBjbGF1c2UgcmVnYXJkaW5nIHRoZSBsZXR0aW5nIG9mIHRoZSBlc3RhdGUsCiAgICAgICAgICAgICAgICAgICAgaGUgc3VwcHJlc3NlZCBmcm9tIHRoZSB3aWxsLCBub3QgdGhpbmtpbmcgdGhhdCBpdCB3YXMgdG8gaGlzIGludGVyZXN0IHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIHNob3VsZCBiZSBtYWRlIGtub3duIGluIHlvdXIgY291cnQuIDwvdHJhbnNsYXRpb24+"
translation['29.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBzaW5jZSBpdCB3YXMgYWRtaXR0ZWQgYnkgQXBob2J1cyBoaW1zZWxmIHRoYXQgbXkgZmF0aGVyIG9uIGhpcwogICAgICAgICAgICAgICAgICAgIGRlYXRoLWJlZCBnYXZlIHRvIGVhY2ggb2YgdGhlc2UgbWVuIHN1Y2ggbGFyZ2Ugc3VtcyBvZiBtb25leSwgdGhlIGp1cnltZW4gYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ybWVyIHRyaWFsIGNvbnNpZGVyZWQgdGhlc2UgYWRtaXNzaW9ucyB0byBiZSBhIHByb29mIG9mIHRoZSBzaXplIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGVzdGF0ZS4gRm9yIHdoZW4gYSBtYW4gZ2F2ZSBvdXQgb2YgaGlzIGVzdGF0ZSBmb3VyIHRhbGVudHMgYW5kIHRocmVlIHRob3VzYW5kCiAgICAgICAgICAgICAgICAgICAgZHJhY2htYWUgYnkgd2F5IG9mIG1hcnJpYWdlLXBvcnRpb24gYW5kIGxlZ2FjeSwgaXQgd2FzIHBsYWluIHRoYXQgaGUgdG9vayB0aGVzZQogICAgICAgICAgICAgICAgICAgIHN1bXMsIG5vdCBmcm9tIGEgc21hbGwgZXN0YXRlLCBidXQgZnJvbSBvbmUg77yIYmVxdWVhdGhlZCB0byBtZe+8iQogICAgICAgICAgICAgICAgICAgIG9mIG1vcmUgdGhhbiBkb3VibGUgdGhpcyBhbW91bnQuIDwvdHJhbnNsYXRpb24+"
translation['29.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGZvbGxvd2luZyBwYXNzYWdlIHVwIHRvIHRoZSBtaWRkbGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gaXMgcmVwZWF0ZWQgYWxtb3N0IHZlcmJhdGltIGZyb20gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy40NSIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjcuNDU8L2JpYmw+PC9ub3RlPiBGb3IgaXQgY2Fubm90IGJlIHN1cHBvc2VkIHRoYXQgaGUgd291bGQgd2lzaCB0bwogICAgICAgICAgICAgICAgICAgIGxlYXZlIG1lLCBoaXMgc29uLCBpbiBwb3ZlcnR5LCBhbmQgYmUgZWFnZXIgZnVydGhlciB0byBlbnJpY2ggdGhlc2UgbWVuLCB3aG8KICAgICAgICAgICAgICAgICAgICB3ZXJlIGFscmVhZHkgd2VhbHRoeS4gTm87IGl0IHdhcyBiZWNhdXNlIG9mIHRoZSBzaXplIG9mIHRoZSBlc3RhdGUgbGVmdCB0byBtZQogICAgICAgICAgICAgICAgICAgIHRoYXQgaGUgZ2F2ZSB0byBUaGVyaXBwaWRlcyB0aGUgaW50ZXJlc3Qgb24gc2V2ZW50eSBtaW5hZSwgYW5kIHRvIERlbW9waG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBvbiB0aGUgdHdvIHRhbGVudHPigJR0aG91Z2ggaGUgd2FzIG5vdCB5ZXQgdG8gbWFycnkgbXkgc2lzdGVyLiBUaGVzZQogICAgICAgICAgICAgICAgICAgIG1vbmV5cyBpdCBoYXMgYmVlbiBwcm92ZWQgdGhhdCBBcGhvYnVzIG5ldmVyIGdhdmUgb3ZlciB0byBtZSwgbm9yIGV2ZW4gYW4gYW1vdW50CiAgICAgICAgICAgICAgICAgICAgc2xpZ2h0bHkgbGVzcy4gUGFydCBvZiBpdCBoZSBzYWlkIGhlIGhhZCBzcGVudCwgcGFydCBoZSBoYWQgbmV2ZXIgcmVjZWl2ZWQsIHBhcnQKICAgICAgICAgICAgICAgICAgICBoZSBrbmV3IG5vdGhpbmcgYWJvdXQsIHBhcnQgd2FzIGluIHRoZSBoYW5kcyBvZiBzby1hbmQtc28sIHBhcnQgd2FzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIGhvdXNlLCBhbmQgb2YgcGFydCBoZSBjb3VsZCBzYXkgYW55dGhpbmcgZXhjZXB0IHdoZW4gYW5kIHdoZXJlIGhlIGhhZCBwYWlkIGl0CiAgICAgICAgICAgICAgICAgICAgb3Zlci4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy40NSIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjcuNDU8L2JpYmw+PC90cmFuc2xhdGlvbj4="
translation['29.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXMgdG8gaGlzCiAgICAgICAgICAgICAgICAgICAgc3Rvcnkgb2YgbW9uZXkgbGVmdCBpbiB0aGUgaG91c2UgSSBzaGFsbCBjbGVhcmx5IHByb3ZlIHRvIHlvdSB0aGF0IGhlIGlzIGx5aW5nLgogICAgICAgICAgICAgICAgICAgIFRoaXMgYXJndW1lbnQgaGUgc3BlY2lvdXNseSBpbnRyb2R1Y2VkLCB3aGVuIGl0IGhhZCBiZWNvbWUgY2xlYXIgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSB3YXMgbGFyZ2UgYW5kIHdhcyB1bmFibGUgdG8gc2hvdyB0aGF0IGhlIGhhZCBwYWlkIGl0IGJhY2ssIGluIG9yZGVyCiAgICAgICAgICAgICAgICAgICAgdGhhdCBpdCBtaWdodCBhcHBlYXIgYSByZWFzb25hYmxlIGluZmVyZW5jZSB0aGF0IEkgd2FzIHdyb25nZnVsbHkgc2Vla2luZyB0bwogICAgICAgICAgICAgICAgICAgIHJlY292ZXIgd2hhdCB3YXMgYWxyZWFkeSBpbiBteSBwb3NzZXNzaW9uLiA8L3RyYW5zbGF0aW9uPg=="
translation['29.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBwYXNzYWdlIHJlcGVhdHMgdmVyeSBjbG9zZWx5IHRoZQogICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSBvZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDI3LjU1IiB2YWxpZD0ieWVzIj5EZW0uIDI3LjU1LTU3PC9iaWJsPjwvbm90ZT4gSWYgbXkgZmF0aGVyCiAgICAgICAgICAgICAgICAgICAgaGFkIG5vIGNvbmZpZGVuY2UgaW4gdGhlc2UgbWVuIGl0IGlzIHBsYWluIHRoYXQgaGUgd291bGQgbmVpdGhlciBoYXZlIGVudHJ1c3RlZAogICAgICAgICAgICAgICAgICAgIHRoZW0gd2l0aCB0aGUgcmVzdCBvZiBoaXMgcHJvcGVydHksIG5vciwgaWYgaGUgaGFkIGxlZnQgdGhpcyBtb25leSBpbiB0aGUgd2F5CiAgICAgICAgICAgICAgICAgICAgYWxsZWdlZCwgd291bGQgaGUgaGF2ZSB0b2xkIHRoZW0gb2YgaXQuIEhvdywgdGhlbiwgZG8gdGhleSBrbm93IGFib3V0IGl0PyBCdXQsCiAgICAgICAgICAgICAgICAgICAgaWYgaGUgaGFkIGNvbmZpZGVuY2UgaW4gdGhlbSwgaGUgd291bGQgbm90LCBJIHRha2UgaXQsIGhhdmUgZ2l2ZW4gaW50byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhhbmRzIHRoZSBidWxrIG9mIGhpcyBwcm9wZXJ0eSwgYW5kIG5vdCBoYXZlIHB1dCB0aGVtIGluIGNoYXJnZSBvZiB0aGUgcmVzdC4gTm9yCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGUgaGF2ZSBlbnRydXN0ZWQgdGhpcyByZW1haW5kZXIgdG8gbXkgbW90aGVyIHRvIGtlZXAgYW5kIHRoZW4gaGF2ZQogICAgICAgICAgICAgICAgICAgIHBsZWRnZWQgaGVyIGhlcnNlbGYgaW4gbWFycmlhZ2UgdG8gdGhpcyBtYW4sIHdobyB3YXMgb25lIG9mIHRoZSBndWFyZGlhbnMuIEZvcgogICAgICAgICAgICAgICAgICAgIGl0IGlzIG5vdCByZWFzb25hYmxlIHRoYXQgaGUgc2hvdWxkIHNlZWsgdG8gbWFrZSB0aGUgbW9uZXkgc2VjdXJlIHRocm91Z2ggaGVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB5ZXQgcHV0IG9uZSBvZiB0aGUgbWVuIHdob20gaGUgZGlzdHJ1c3RlZCBpbiBjb250cm9sIGJvdGggb2YgaGVyIGFuZCBvZiBpdC4KICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy41NSIgdmFsaWQ9InllcyI+RGVtLiAyNy41NS01NzwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['29.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaWYgdGhlcmUgd2VyZSBhbnkgdHJ1dGggaW4KICAgICAgICAgICAgICAgICAgICBhbGwgdGhpcywgZG8geW91IHN1cHBvc2UgdGhhdCBBcGhvYnVzIHdvdWxkIG5vdCBoYXZlIHRha2VuIG15IG1vdGhlciB0byB3aWZlLAogICAgICAgICAgICAgICAgICAgIGJlcXVlYXRoZWQgdG8gaGltIGFzIHNoZSB3YXMgYnkgbXkgZmF0aGVyPyBIZSBoYWQgYWxyZWFkeSB0YWtlbiBoZXIKICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZS1wb3J0aW9u4oCUdGhlIGVpZ2h0eSBtaW5hZeKAlGFzIHRob3VnaCBoZSB3ZXJlIGdvaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgbWFycnkgaGVyOyBidXQgaGUgc3Vic2VxdWVudGx5IG1hcnJpZWQgdGhlIGRhdWdodGVyIG9mIFBoaWxvbmlkZXMgb2YgTWVsaXRlLAogICAgICAgICAgICAgICAgICAgIGZyb20gbW90aXZlcyBvZiBhdmFyaWNlLCBpbiBvcmRlciB0aGF0LCBpbiBhZGRpdGlvbiB0byB3aGF0IGhlIGhhZCByZWNlaXZlZCBmcm9tCiAgICAgICAgICAgICAgICAgICAgdXMsIGhlIG1pZ2h0IGdldCBmcm9tIGhpbSBvdGhlciBlaWdodHkgbWluYWUuIEJ1dCwgaWYgdGhlcmUgaGFkIGJlZW4gZm91cgogICAgICAgICAgICAgICAgICAgIHRhbGVudHMgaW4gdGhlIGhvdXNlLCBhbmQgaW4gaGVyIGN1c3RvZHksIGFzIGhlIGFsbGVnZXMsIGRvbid0IHlvdSBpbWFnaW5lIGhlCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSByYWNlZCB0byBnZXQgcG9zc2Vzc2lvbiBib3RoIG9mIGhlciBhbmQgb2YgdGhlbT8gPC90cmFuc2xhdGlvbj4="
translation['29.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz5Xb3VsZCBoZSBoYXZlIGpvaW5lZCB3aXRoIGhpcyBjby10cnVzdGVlcyBpbiBzbyBzaGFtZWZ1bGx5CiAgICAgICAgICAgICAgICAgICAgcGx1bmRlcmluZyBteSB2aXNpYmxlIHByb3BlcnR5LCB3aGljaCBtYW55IG9mIHlvdSBrbmV3IGhhZCBiZWVuIGxlZnQgbWUsIGFuZAogICAgICAgICAgICAgICAgICAgIGhhdmUgcmVmcmFpbmVkLCB3aGVuIGhlIGhhZCB0aGUgY2hhbmNlLCBmcm9tIHNlaXppbmcgYSBmdW5kIHRvIHRoZSBleGlzdGVuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3Ugd291bGQgbm90IGJlIGFibGUgdG8gdGVzdGlmeT8gV2hvIGNhbiBiZWxpZXZlIHRoaXM/IEl0IGlzIGltcG9zc2libGUsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5OyBpdCBpcyBpbXBvc3NpYmxlLiBObzsgYWxsIHRoZSBtb25leSB3aGljaCBteSBmYXRoZXIgbGVmdCB3YXMKICAgICAgICAgICAgICAgICAgICBpbmRlZWQgYnVyaWVkIG9uIHRoZSBkYXkgb24gd2hpY2ggaXQgY2FtZSBpbnRvIHRoZSBoYW5kcyBvZiB0aGVzZSBtZW47IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQsIG5vdCBiZWluZyBhYmxlIHRvIHRlbGwgd2hlbiBhbmQgd2hlcmUgaGUgcGFpZCBiYWNrIGFueSBvZiBpdCwgbWFrZXMKICAgICAgICAgICAgICAgICAgICB1c2Ugb2YgdGhlc2UgYXJndW1lbnRzLCBob3BpbmcgdGhhdCBJIG1heSBzZWVtIHRvIGJlIGEgcmljaCBtYW4sIGFuZCBzbyBtZWV0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBubyBjb21wYXNzaW9uIGZyb20geW91LiA8L3RyYW5zbGF0aW9uPg=="
translation['29.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlIG1hbnkgb3RoZXIgY2hhcmdlcyB0byBtYWtlIGFnYWluc3QgaGltLCBidXQgSSBoYXZlIG5vdAogICAgICAgICAgICAgICAgICAgIHRoZSByaWdodCB0byBzcGVhayBvZiB0aGUgaW5qdXJpZXMgSSBteXNlbGYgaGF2ZSBzdWZmZXJlZCwgd2hlbiB0aGUgd2l0bmVzcyBpcwogICAgICAgICAgICAgICAgICAgIGluIGRhbmdlciBvZiBsb3NpbmcgaGlzIGNpdmljIHJpZ2h0cy4gU3RpbGwgSSB3aXNoIHRvIHJlYWQgdG8geW91IGEgY2hhbGxlbmdlLAogICAgICAgICAgICAgICAgICAgIGZvciB5b3Ugd2lsbCBrbm93LCB3aGVuIHlvdSBoYXZlIGhlYXJkIGl0LCB0aGF0IHRoZSB0ZXN0aW1vbnkgd2FzIHRydWUsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgQXBob2J1cywgd2hvIG5vdyBkZWNsYXJlcyB0aGF0IGhlIGRlbWFuZHMgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiB0byBiZSBleGFtaW5lZCBhYm91dCBhbGwgdGhlIG1hdHRlcnMgaW52b2x2ZWQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgc3VpdCwgYXQgZmlyc3QgZGVtYW5kZWQgaGltIG9ubHkgaW4gcmVnYXJkIHRvIGEgcXVlc3Rpb24gb2YgdGhpcnR5IG1pbmFlOyBhbmQsCiAgICAgICAgICAgICAgICAgICAgZnVydGhlcm1vcmUsIHRoYXQgaGUgaGFzIGJlZW4gcHV0IHRvIG5vIGRpc2FkdmFudGFnZSBiZWNhdXNlIG9mIHRoZSB0ZXN0aW1vbnkuCiAgICAgICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['29.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgSSwgaW4gbXkgZGVzaXJlIHRvIHJlZnV0ZSBoaW0gaW4gZXZlcnkKICAgICAgICAgICAgICAgICAgICBwYXJ0aWN1bGFyLCBhbmQgaW4gbXkgYXR0ZW1wdCB0byBtYWtlIGNsZWFyIHRvIHlvdSBoaXMgdHJpY2tzIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICB2aWxsYWluaWVzLCBhc2tlZCBoaW0gaG93IGxhcmdlIHRoZSBzdW0gd2FzIHJlZ2FyZGluZyB3aGljaCBoZSBkZW1hbmRlZCB0bwogICAgICAgICAgICAgICAgICAgIGV4YW1pbmUgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiwgYXMgb25lIHdobyBoYWQKICAgICAgICAgICAgICAgICAgICBrbm93bGVkZ2Ugb2YgdGhlIGZhY3RzLiBUbyB0aGlzIGhlIHJlcGxpZWQgZmFsc2VseSwgdGhhdCBpdCB3YXMgaW4gcmVnYXJkIHRvIHRoZQogICAgICAgICAgICAgICAgICAgIHdob2xlIGFtb3VudC4g4oCcV2VsbCB0aGVuLOKAnSBzYWlkIEksIOKAnGFzIHRvIHRoaXMgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgZ2l2ZSB1cCB0byB5b3UgZm9yIGV4YW1pbmF0aW9uIGJ5IHRvcnR1cmUgdGhlIHNsYXZlIHdobyBoYXMgdGhlIGNvcHkgb2YKICAgICAgICAgICAgICAgICAgICB5b3VyIGNoYWxsZW5nZSB0byBtZS4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['29.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgd2hlbiBJIGhhdmUgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBvYXRoIHRoYXQgeW91IGFja25vd2xlZGdlZCB0aGUgbWFuIHRvIGJlIGZyZWUsIGFuZCB0aGF0IHlvdSBzbyB0ZXN0aWZpZWQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIERlbW8sIHlvdSB3aWxsIHN3ZWFyIHRvIHRoZSBjb250cmFyeSB3aXRoIGltcHJlY2F0aW9ucyB1cG9uIHlvdXIgZGF1Z2h0ZXIsIEkKICAgICAgICAgICAgICAgICAgICByZWxlYXNlIHRvIHlvdSB0aGUgZW50aXJlIHN1bSwgZm9yIHdoaWNoIHlvdSBzaGFsbCBiZSBzaG93biBieSB0aGUgZXhhbWluYXRpb24KICAgICAgICAgICAgICAgICAgICBvZiB0aGUgc2xhdmUgdG8gaGF2ZSBhdCB0aGUgZmlyc3QgZGVtYW5kZWQgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPjsgYW5kIHRoZSBkYW1hZ2VzIHdoaWNoIHlvdSB3ZXJlIGNvbmRlbW5lZCB0byBwYXkgc2hhbGwKICAgICAgICAgICAgICAgICAgICBiZSBsZXNzZW5lZCBieSB0aHVzIG11Y2jigJR0aGF0IGlzLCBieSB0aGUgYW1vdW50IGluIHJlZ2FyZCB0byB3aGljaCB5b3UKICAgICAgICAgICAgICAgICAgICBkZW1hbmRlZCA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIHRvIHRoZSBlbmQgdGhhdCB5b3UKICAgICAgICAgICAgICAgICAgICBtYXkgYmUgZm91bmQgdG8gaGF2ZSBiZWVuIHB1dCB0byBubyBkaXNhZHZhbnRhZ2UgYnkgdGhlIHdpdG5lc3Nlcy7igJ0KICAgICAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['29.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGNoYWxsZW5nZSBJIG1hZGUgdG8gaGltIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHByZXNlbmNlIG9mIG1hbnkgd2l0bmVzc2VzOyBidXQgaGUgc2FpZCBoZSBjb3VsZCBub3QgYWNjZXB0IGl0LiBZZXQsIGlmIGEgbWFuCiAgICAgICAgICAgICAgICAgICAgcmVmdXNlZCB0byBnaXZlIHRoaXMganVkZ2VtZW50IGluIGhpcyBvd24gZmF2b3IsIGhvdyBjYW4gaXQgYmUgcmlnaHQgZm9yIHlvdSwKICAgICAgICAgICAgICAgICAgICB3aG8gYXJlIHVwb24geW91ciBvYXRocywgdG8gZ2l2ZSBjcmVkZW5jZSB0byBoaXMgd29yZHMgYW5kIGNvbnZpY3QgdGhlCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzLCBhbmQgbm90IHJhdGhlciB0byByZWdhcmQgdGhpcyBtYW4gYXMgdGhlIG1vc3Qgc2hhbWVsZXNzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIGh1bWFua2luZD88bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCBteSB3b3JkcyBhcmUgdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBjYWxsIHRoZSB3aXRuZXNzZXMgdG8gdGhlc2UgZmFjdHMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RG8gbm90IHN1cHBvc2UKICAgICAgICAgICAgICAgICAgICB0aGF0IHdoaWxlIEkgd2FzIHJlYWR5IHRvIHRha2UgdGhpcyBjb3Vyc2UsIHRoZSB3aXRuZXNzZXMgZGlkIG5vdCBob2xkIHRoZSBzYW1lCiAgICAgICAgICAgICAgICAgICAgb3Bpbmlvbi4gTm87IHRoZXkgdG9vIHdlcmUgcmVhZHkgdG8gcGxhY2UgdGhlaXIgY2hpbGRyZW4gYnkgdGhlaXIgc2lkZSwgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgY29uZmlybWF0aW9uIG9mIHRoZSB0ZXN0aW1vbnkgdGhleSBoYWQgZ2l2ZW4sIHRvIHRha2UgYW4gb2F0aCB3aXRoIGltcHJlY2F0aW9ucwogICAgICAgICAgICAgICAgICAgIHVwb24gdGhlbSwgaWYgdGhleSBzd29yZSBmYWxzZWx5LiBCdXQgQXBob2J1cyBkaWQgbm90IHNlZSBmaXQgdG8gYWxsb3cgYW4gb2F0aAogICAgICAgICAgICAgICAgICAgIHRvIGJlIGdpdmVuIGVpdGhlciB0byB0aGVtIG9yIHRvIG1lLiBJbnN0ZWFkLCBoZSByZXN0cyBoaXMgY2FzZSBvbiBhcmd1bWVudHMKICAgICAgICAgICAgICAgICAgICBzdWJ0bHkgcGxhbm5lZCBhbmQgb24gd2l0bmVzc2VzIGFjY3VzdG9tZWQgdG8gcGVyanVyeSwgYW5kIHRoaW5rcyB0aGVyZWJ5IGVhc2lseQogICAgICAgICAgICAgICAgICAgIHRvIG1pc2xlYWQgeW91LiBTbyB0YWtlIGFuZCByZWFkIHRvIHRoZSBqdXJ5IHRoaXMgZGVwb3NpdGlvbiBhbHNvLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93IGNvdWxkIG9uZQogICAgICAgICAgICAgICAgICAgIHByb3ZlIG1vcmUgY2xlYXJseSB0aGFuIEkgaGF2ZSBwcm92ZWQgdGhhdCB3ZSBhcmUgdGhlIG9iamVjdCBvZiBhIG1hbGljaW91cwogICAgICAgICAgICAgICAgICAgIGNoYXJnZTsgdGhhdCB0aGUgZXZpZGVuY2UgYnJvdWdodCBmb3J3YXJkIGFnYWluc3QgbXkgb3Bwb25lbnQgaXMgdHJ1ZTsgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBoaXMgY29uZGVtbmF0aW9uIHdhcyBqdXN0PyBJIGhhdmUgc2hvd24gdGhhdCBoZSByZWZ1c2VkIHRvIGV4YW1pbmUgYnkgdG9ydHVyZQogICAgICAgICAgICAgICAgICAgIHRoZSBzbGF2ZSB3aG8gd3JvdGUgdGhlIHRlc3RpbW9ueSByZWdhcmRpbmcgdGhlIHZlcnkgdGhpbmdzIHRvIHdoaWNoIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIHRlc3RpZmllZDsgdGhhdCBoaXMgYnJvdGhlciwgQWVzaXVzLCBoYXMgYXR0ZXN0ZWQgdGhlIGZhY3RzIHdoaWNoIGhlIG9uIGhpcyBwYXJ0CiAgICAgICAgICAgICAgICAgICAgZGVjbGFyZXMgdG8gYmUgZmFsc2U7IDwvdHJhbnNsYXRpb24+"
translation['29.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IEFwaG9idXMgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGhhcywgYXQgbXkgc3VtbW9ucywgZ2l2ZW4gYWdhaW5zdCBEZW1vLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EZW1vIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBub3QgYWN0dWFsbHkgYSB0cnVzdGVlLCBidXQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyOC4xNSIgdmFsaWQ9InllcyI+RGVtLiAyOC4xNTwvYmlibD4gaXQgaXMKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVkIHRoYXQgdGhlIGVsZGVyIERlbW9zdGhlbmVzIGhhZCBjYWxsZWQgaGltIHRvIGJlIHByZXNlbnQsIHdoZW4sIG9uIGhpcwogICAgICAgICAgICAgICAgICAgICAgICBkZWF0aC1iZWQsIGhlIGhhZCBlbnRydXN0ZWQgaGlzIGFmZmFpcnMgYW5kIHRoZSBndWFyZGlhbnNoaXAgb2YgaGlzIGNoaWxkcmVuCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSB0aHJlZSBuYW1lZCBhcyB0cnVzdGVlcy4gSGUgd2FzIHRoZSBmYXRoZXIgb2YgRGVtb3Bob24sIGFuZCBoYWQgdmVyeQogICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJseSB0YWtlbiBwYXJ0IGluIHRoZSBtYW5hZ2VtZW50IG9mIHRoZSB0cnVzdC4gQW5vdGhlciBhbHRlcm5hdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aW9uIGlzIHRoYXQgRGVtb3N0aGVuZXMgbWF5IGhhdmUgaW5zdGl0dXRlZCBzdWl0IGFnYWluc3QgRGVtbyBvbgogICAgICAgICAgICAgICAgICAgICAgICBxdWl0ZSBvdGhlciBncm91bmRzIG9mIHdoaWNoIHdlIGhhdmUgbm8ga25vd2xlZGdlLiBUaGlzIGNvbXBsaWNhdGVkIHByb2JsZW0KICAgICAgICAgICAgICAgICAgICAgICAgaXMgYWJseSBkaXNjdXNzZWQgYnkgQ2FsaG91biwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bC5jLjwvdGl0bGU+IHBwLiA4OCBmZi48L25vdGU+IGhpcwogICAgICAgICAgICAgICAgICAgIHVuY2xlIGFuZCBjby10cnVzdGVlLCB0aGUgc2FtZSB0ZXN0aW1vbnkgYXMgdGhlIHdpdG5lc3NlcyB3aG9tIGhlIGlzIHN1aW5nOyB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgcmVmdXNlZCB0byBleGFtaW5lIG15IHdvbWVuLXNlcnZhbnRzIGFzIHRvIHRoZSBmYWN0IG9mIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjguMTUiIHZhbGlkPSJ5ZXMiPkRlbS4gMjguMTU8L2JpYmw+IGl0IGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlZCB0aGF0IHRoZSBlbGRlciBEZW1vc3RoZW5lcyBoYWQgY2FsbGVkIGhpbSB0byBiZSBwcmVzZW50LCB3aGVuLCBvbiBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgZGVhdGgtYmVkLCBoZSBoYWQgZW50cnVzdGVkIGhpcyBhZmZhaXJzIGFuZCB0aGUgZ3VhcmRpYW5zaGlwIG9mIGhpcyBjaGlsZHJlbgogICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgdGhyZWUgbmFtZWQgYXMgdHJ1c3RlZXMuIEhlIHdhcyB0aGUgZmF0aGVyIG9mIERlbW9waG9uLCBhbmQgaGFkIHZlcnkKICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libHkgdGFrZW4gcGFydCBpbiB0aGUgbWFuYWdlbWVudCBvZiB0aGUgdHJ1c3QuIEFub3RoZXIgYWx0ZXJuYXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdGlvbiBpcyB0aGF0IERlbW9zdGhlbmVzIG1heSBoYXZlIGluc3RpdHV0ZWQgc3VpdCBhZ2FpbnN0IERlbW8gb24KICAgICAgICAgICAgICAgICAgICAgICAgcXVpdGUgb3RoZXIgZ3JvdW5kcyBvZiB3aGljaCB3ZSBoYXZlIG5vIGtub3dsZWRnZS4gVGhpcyBjb21wbGljYXRlZCBwcm9ibGVtCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIGFibHkgZGlzY3Vzc2VkIGJ5IENhbGhvdW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPmwuYy48L3RpdGxlPiBwcC4gODggZmYuPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiBiZWluZyBhIGZyZWVtYW47IHRoYXQgbXkgb3duIG1vdGhlcgogICAgICAgICAgICAgICAgICAgIHdhcyByZWFkeSB0byBnaXZlIGFuIG9hdGggcmVnYXJkaW5nIHRoZXNlIG1hdHRlcnMgd2l0aCBpbXByZWNhdGlvbnMgdXBvbiB1czsKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIHJlZnVzZWQgdG8gYWNjZXB0IGZvciBleGFtaW5hdGlvbiBhbnkgb25lIG9mIG15IG90aGVyIHNsYXZlcyB3aG8ga25ldwogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUgY2lyY3Vtc3RhbmNlcyBiZXR0ZXIgdGhhbiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gZGlkOyB0aGF0IGhlIGhhcyBub3QgYnJvdWdodCBhIGNoYXJnZSBvZiBmYWxzZSB3aXRuZXNzCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBhbnkgb25lIG9mIHRob3NlIHdobyB0ZXN0aWZpZWQgdGhhdCBoZSBoYWQgdGhlIG1vbmV5OyA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+TWlseWFzPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['29.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz50aGF0IGhlIGRpZCBub3QgZ2l2ZSBvdmVyIHRoZSB3aWxsLCBub3IgbGV0IHRoZSBob3VzZSwKICAgICAgICAgICAgICAgICAgICBhbHRob3VnaCB0aGUgbGF3cyBzbyBiYWRlOyBhbmQgZmluYWxseSB0aGF0IGhlIGRpZCBub3Qgc2VlIGZpdCB0byBnaXZlIGFuIG9hdGgsCiAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIHdpdG5lc3NlcyBhbmQgSSBteXNlbGYgaGFkIHN3b3JuLCB3aGVyZWJ5IGhlIGNvdWxkIGhhdmUgc2VjdXJlZAogICAgICAgICAgICAgICAgICAgIHJlbGVhc2UgdG8gdGhlIGFtb3VudCBvZiB0aGUgc3VtcyByZWdhcmRpbmcgd2hpY2ggaGUgaGFkIGRlbWFuZGVkIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5NaWx5YXM8L3N1cm5hbWU+PC9wZXJzTmFtZT4gZm9yIHRvcnR1cmUuIEJ5IGhlYXZlbiwgSSBjZXJ0YWlubHkKICAgICAgICAgICAgICAgICAgICBjb3VsZCB0aGluayBvZiBubyBiZXR0ZXIgd2F5IHRoYW4gdGhpcyB0byBlc3RhYmxpc2ggdGhlc2UgZmFjdHMuIFlldCwgcGxhaW4gYXMKICAgICAgICAgICAgICAgICAgICBpdCBpcyB0aGF0IGhlIGZhbHNlbHkgYXR0YWNrcyB0aGUgd2l0bmVzc2VzOyB0aGF0IGhlIHN1ZmZlcnMgbm8gZGFtYWdlIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgICAgZmFjdHMgYWRkdWNlZDsgdGhhdCBoZSB3YXMganVzdGx5IGNvbmRlbW5lZDsgaGUgc3RpbGwgdHJpZXMgdG8gYnJhemVuIGl0IG91dC4KICAgICAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['29.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5JZiBpdCB3ZXJlIG5vdCB0aGF0IGhlIHVzZXMgaGlzIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSBhZnRlciBoYXZpbmcgYXQgdGhlIG91dHNldCBiZWVuIGp1ZGdlZCB0byBiZSBpbiB0aGUgd3JvbmcgYnkgaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMgYW5kIGJ5IHRoZSBhcmJpdHJhdG9yLCB0aGVyZSB3b3VsZCBiZSBsZXNzIHJlYXNvbiB0byB3b25kZXIgYXQgYWxsIHRoaXMuCiAgICAgICAgICAgICAgICAgICAgQnV0IHRoZSBmYWN0IGlzLCB0aGF0IGFmdGVyIHBlcnN1YWRpbmcgbWUgdG8gcmVmZXIgdGhlIG1hdHRlciB0byBBcmNoZW5ldXMgYW5kCiAgICAgICAgICAgICAgICAgICAgRHJhY29udGlkZXMgYW5kIFBoYW51cyDvvIh0aGUgbGFzdCBvZiB3aG9tIGhlIGlzIG5vdyBzdWluZyBvbiBhIGNoYXJnZSBvZgogICAgICAgICAgICAgICAgICAgIGdpdmluZyBmYWxzZSB3aXRuZXNz77yJLCBoZSByZWplY3RlZCB0aGVtIO+8iGhhdmluZyBoZWFyZCB0aGVtIHNheQogICAgICAgICAgICAgICAgICAgIHRoYXQsIGlmIHRoZXkgZGVjaWRlZCBvbiBvYXRoLCB0aGV5IHdvdWxkIGNvbmRlbW4gaGlzIGNvbmR1Y3QgYXMKICAgICAgICAgICAgICAgICAgICBndWFyZGlhbu+8iSwgYW5kIGFwcGVhcmVkIGJlZm9yZSB0aGUgb2ZmaWNpYWwgYXJiaXRyYXRvciwgd2hvLCBzaW5jZQogICAgICAgICAgICAgICAgICAgIEFwaG9idXMgd2FzIHVuYWJsZSB0byBjbGVhciBoaW1zZWxmIGZyb20gdGhlIGNoYXJnZXMgd2hpY2ggSSBicm91Z2h0LCBnYXZlCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50IGFnYWluc3QgaGltLiA8L3RyYW5zbGF0aW9uPg=="
translation['29.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUganVyeSwgdG8gd2hvbSBoZQogICAgICAgICAgICAgICAgICAgIHRoZW4gYXBwZWFsZWQsIGhhdmluZyBoZWFyZCB0aGUgY2FzZSwgZ2F2ZSB0aGUgc2FtZSBkZWNpc2lvbiB0aGF0IGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBmcmllbmRzIGFuZCB0aGUgYXJiaXRyYXRvciBoYWQgZ2l2ZW4sIGFuZCBmaXhlZCB0aGUgZGFtYWdlcyBhdCB0ZW4gdGFsZW50cy4gVGhpcwogICAgICAgICAgICAgICAgICAgIHdhcyBub3QsIGhlYXZlbiBrbm93cywgYmVjYXVzZSBoZSBoYWQgYWRtaXR0ZWQgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48L3BlcnNOYW1lPiB0byBiZSBhIGZyZWVtYW4g77yIZm9yIHRoaXMgd2FzIG5vdGhpbmcgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcG9pbnTvvIksIGJ1dCBiZWNhdXNlLCBhIGZvcnR1bmUgb2YgZmlmdGVlbiB0YWxlbnRzIGhhdmluZyBiZWVuIGxlZnQgbWUsCiAgICAgICAgICAgICAgICAgICAgaGUgaGFkIG5vdCBsZXQgdGhlIHByb3BlcnR5OyBiZWNhdXNlIGZ1cnRoZXIsIGhlIHdpdGggaGlzIGNvLXRydXN0ZWVzIGhhZCB0aGUKICAgICAgICAgICAgICAgICAgICBtYW5hZ2VtZW50IG9mIHRoZSBlc3RhdGUgZm9yIHRlbiB5ZWFycywgYW5kIGFncmVlZCBvbiBiZWhhbGYgb2YgbWUsIGEgY2hpbGQsIHRvCiAgICAgICAgICAgICAgICAgICAgcGF5IGEgcHJvcGVydHktdGF4IGF0IHRoZSByYXRlIG9mIGZpdmUgbWluYWUsPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPk1pbHlhczwvc3VybmFtZT48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGVzIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YjwvZW1waD4gYW5kIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YzwvZW1waD4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy43IiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNy43PC9iaWJsPjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmI8L2VtcGg+IGFuZCA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmM8L2VtcGg+IG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMjcuNyIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjcuNzwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['29.60'] = ""
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHNob3VsZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgYmVlbiBtb3N0IGdsYWQsIG1lbiBvZiB0aGUganVyeSwgaGFkIHRoZSBkaWZmZXJlbmNlIHdoaWNoIEkgaGF2ZSBoYWQgd2l0aAogICAgICAgICAgICAgICAgICAgIEFwaG9idXMsIGFuZCBhbHNvIHRoYXQgaW4gd2hpY2ggSSBhbSBub3cgaW52b2x2ZWQgd2l0aCB0aGlzIG1hbiBPbmV0b3IsIGhpcwogICAgICAgICAgICAgICAgICAgIGJyb3RoZXItaW4tbGF3LCBub3QgY29tZSBhYm91dC4gQWNjb3JkaW5nbHksIEkgbWFkZSB0byB0aGVtIGJvdGggbWFueSBmYWlyCiAgICAgICAgICAgICAgICAgICAgb2ZmZXJzLCBidXQgSSBoYXZlIGJlZW4gdW5hYmxlIHRvIHNlY3VyZSBhbnkgcmVhc29uYWJsZSBhY3Rpb24gZnJvbSBlaXRoZXIgb2YKICAgICAgICAgICAgICAgICAgICB0aGVtLiBPbiB0aGUgY29udHJhcnksIEkgaGF2ZSBmb3VuZCB0aGlzIG1hbiBmYXIgaGFyZGVyIHRvIGRlYWwgd2l0aCwgYW5kIG1vcmUKICAgICAgICAgICAgICAgICAgICB3b3J0aHkgb2YgcHVuaXNobWVudCB0aGFuIHRoZSBvdGhlci4gPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZQogICAgICAgICAgICAgICAgICAgIGNhc2Ugb2YgQXBob2J1cywgSSBoZWxkIHRoYXQgaGlzIGNvbnRyb3ZlcnN5IHdpdGggbWUgc2hvdWxkIGJlIHNldHRsZWQgYW1vbmcgb3VyCiAgICAgICAgICAgICAgICAgICAgZnJpZW5kcywgYW5kIG5vdCBjb21lIHRvIHRyaWFsIGJlZm9yZSB5b3UsIGJ1dCBJIGNvdWxkIG5vdCBwZXJzdWFkZSBoaW0uIEJ1dAogICAgICAgICAgICAgICAgICAgIHRoaXMgbWFuLCB3aGVuIEkgYmFkZSBoaW0gYWN0IGFzIGp1ZGdlIGluIGhpcyBvd24gY2FzZSwgdGhhdCBoZSBtaWdodCBub3QgcmlzayBhCiAgICAgICAgICAgICAgICAgICAgdHJpYWwgYmVmb3JlIHlvdSwgdHJlYXRlZCBtZSB3aXRoIHN1Y2ggY29udGVtcHQsIHRoYXQgbm90IG9ubHkgZGlkIGhlIG5vdCB0aGluawogICAgICAgICAgICAgICAgICAgIGZpdCB0byBnaXZlIG1lIGEgaGVhcmluZywgYnV0IEkgd2FzIGV2ZW4gaW4gdGhlIG1vc3Qgb3V0cmFnZW91cyBtYW5uZXIgZHJpdmVuCiAgICAgICAgICAgICAgICAgICAgb2ZmIHRoZSBsYW5kLCB3aGljaCBiZWxvbmdlZCB0byBBcGhvYnVzLCB3aGVuIGhlIGxvc3QgaGlzIHN1aXQgdG8gbWUuIDwvdHJhbnNsYXRpb24+"
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlLCB0aGVyZWZvcmUsIGhlIGpvaW5zIHdpdGggaGlzIGJyb3RoZXItaW4tbGF3IGluCiAgICAgICAgICAgICAgICAgICAgc2Vla2luZyB0byBkZXByaXZlIG1lIG9mIHdoYXQgaXMgbWluZSwgYW5kIGhhcyBjb21lIGJlZm9yZSB5b3UsIHRydXN0aW5nIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1lYXN1cmVzIGhlIGhhcyBjb25jb2N0ZWQsIHRoZXJlIGlzIG5vIG90aGVyIGNvdXJzZSBvcGVuIHRvIG1lIHRoYW4gdG8gdHJ5IGluCiAgICAgICAgICAgICAgICAgICAgeW91ciBjb3VydCB0byBnZXQganVzdGljZSBmcm9tIGhpbS4gSSBrbm93IHdlbGwsIG1lbiBvZiB0aGUganVyeSwgdGhhdCBJIGhhdmUgdG8KICAgICAgICAgICAgICAgICAgICBjb250ZW5kIGFnYWluc3QgYXJndW1lbnRzIGNyYWZ0aWx5IHByZXBhcmVkLCBhbmQgYWdhaW5zdCB3aXRuZXNzZXMgd2hvIGFyZSBnb2luZwogICAgICAgICAgICAgICAgICAgIHRvIGdpdmUgZmFsc2UgdGVzdGltb255OyBuZXZlcnRoZWxlc3MgSSB0aGluayB0aGF0IEkgc2hhbGwgaGF2ZSBzdWNoIGFuCiAgICAgICAgICAgICAgICAgICAgYWR2YW50YWdlIG92ZXIgaGltIGJlY2F1c2Ugb2YgdGhlIGp1c3RpY2Ugb2YgbXkgY2F1c2UsIDwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoYXQsIGV2ZW4gaWYgYW55IG9uZSBvZiB5b3UgaGVyZXRvZm9yZSB0aG91Z2h0IGhpbSBhbgogICAgICAgICAgICAgICAgICAgIGhvbmVzdCBtYW4sIGhlIHdpbGwgbGVhcm4gZnJvbSB0aGUgZGVmZW5kYW50J3MgYWN0cyB0b3dhcmQgbWUgdGhhdCBldmVuIGluIHRpbWUKICAgICAgICAgICAgICAgICAgICBwYXN0IGhlIGhhcyBiZWVuLCB3aXRob3V0IHlvdXIga25vd2luZyBpdCwgdGhlIGJhc2VzdCBhbmQgbW9zdCB1bnJpZ2h0ZW91cyBvZgogICAgICAgICAgICAgICAgICAgIG1lbi4gSSBzaGFsbCBzaG93LCBuYW1lbHksIHRoYXQgaGUgaGFzIG5vdCBvbmx5IG5ldmVyIHBhaWQgdGhlIG1hcnJpYWdlLXBvcnRpb24sCiAgICAgICAgICAgICAgICAgICAgdG8gc2VjdXJlIHdoaWNoIGhlIGFsbGVnZXMgdGhhdCB0aGUgbGFuZCBoYXMgYmVlbiBtb3J0Z2FnZWQsIGJ1dCBmcm9tIHRoZSB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgc3RhcnQgaGFzIHNjaGVtZWQgdG8gZGVmcmF1ZCBtZSBvZiBteSByaWdodHM7IHRoYXQsIGZ1cnRoZXIsIHRoZSBsYWR5LCBvbiB3aG9zZQogICAgICAgICAgICAgICAgICAgIGJlaGFsZiBoZSBkcm92ZSBtZSBmcm9tIHRoZSBsYW5kIGluIHF1ZXN0aW9uLCBoYXMgbm90IGJlZW4gZGl2b3JjZWQgYXQgYWxsOwogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IGhlIGlzIG5vdyBzY3JlZW5pbmcgQXBob2J1cywgYW5kCiAgICAgICAgICAgICAgICAgICAgc3RhbmRpbmcgdGhpcyB0cmlhbCB3aXRoIHRoZSBwdXJwb3NlIG9mIGRlcHJpdmluZyBtZSBvZiB3aGF0IGlzIG1pbmUuIFRoaXMgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIHNob3cgYnkgc3VjaCBzdHJvbmcgYW5kIG1hbmlmZXN0IHByb29mcywgdGhhdCB5b3Ugd2lsbCBzZWUgaG93IGp1c3QgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvcGVyIGl0IGlzIHRoYXQgSSBoYXZlIGluc3RpdHV0ZWQgdGhpcyBhY3Rpb24gYWdhaW5zdCBoaW0uIEkgc2hhbGwgY29tbWVuY2UKICAgICAgICAgICAgICAgICAgICB3aXRoIG1hdHRlcnMgd2hpY2ggd2lsbCBiZXN0IGVuYWJsZSB5b3UgdG8gZ3Jhc3AgdGhlIGZhY3RzIG9mIHRoZSBjYXNlLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JbiBjb21tb24KICAgICAgICAgICAgICAgICAgICB3aXRoIG1hbnkgb3RoZXJzIG9mIHRoZSBBdGhlbmlhbnMsIG1lbiBvZiB0aGUganVyeSwgdGhpcyBtYW4gd2FzIHdlbGwgYXdhcmUgdGhhdAogICAgICAgICAgICAgICAgICAgIG15IGd1YXJkaWFucyB3ZXJlIHByb3ZpbmcgZmFsc2UgdG8gdGhlaXIgdHJ1c3QuIEluZGVlZCwgaXQgYmVjYW1lIGNsZWFyIHZlcnkKICAgICAgICAgICAgICAgICAgICBlYXJseSB0aGF0IEkgd2FzIGJlaW5nIHdyb25nZWQsIHNvIG1hbnkgd2VyZSB0aGUgZGlzY3Vzc2lvbnMgYW5kIGFyZ3VtZW50cwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyBteSBhZmZhaXJzIGhlbGQgYmVmb3JlIHRoZSBhcmNob24gYW5kIGJlZm9yZSBvdGhlciBvZmZpY2lhbHMuIEZvciB0aGUKICAgICAgICAgICAgICAgICAgICB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgbGVmdCBtZSB3YXMgd2VsbCBrbm93biwgYW5kIGl0IHdhcyBwcmV0dHkgY2xlYXIgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBhZG1pbmlzdHJhdG9ycyB3ZXJlIGxlYXZpbmcgaXQgdW5sZXQgaW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IGhhdmUgdGhlIHVzZSBvZgogICAgICAgICAgICAgICAgICAgIHRoZSBtb25leSB0aGVtc2VsdmVzLiBUaGVyZSB3YXMgbm90IGEgc2luZ2xlIG9uZSwgdGhlcmVmb3JlLCBhbW9uZyB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICByZWFsaXplZCB3aGF0IHdhcyBnb2luZyBvbiwgd2hvIGRpZCBub3QgZXhwZWN0IHRoYXQgSSBzaG91bGQgb2J0YWluIGEganVkZ2VtZW50CiAgICAgICAgICAgICAgICAgICAgZm9yIGRhbWFnZXMgZnJvbSB0aGVzZSBtZW4sIGFzIHNvb24gYXMgSSBzaG91bGQgYXR0YWluIG15IG1ham9yaXR5LiA8L3RyYW5zbGF0aW9uPg=="
translation['30.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRob3NlIHdobyBmcm9tIGZpcnN0IHRvIGxhc3QgaGVsZCB0aGlzIG9waW5pb24KICAgICAgICAgICAgICAgICAgICB3ZXJlIFRpbW9jcmF0ZXMgYW5kIE9uZXRvci4gT2YgdGhpcyBJIGNhbiBnaXZlIHlvdSB0aGUgc3Ryb25nZXN0IG9mIHByb29mcy4gRm9yCiAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmVuZGFudCB3aXNoZWQgdG8gZ2l2ZSBoaXMgc2lzdGVyIGluIG1hcnJpYWdlIHRvIEFwaG9idXMsIHNlZWluZyB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIGdvdCBpbnRvIGhpcyBoYW5kcyBoaXMgb3duIHBhdHJpbW9ueSBhbmQgbWluZSDvvIh3aGljaCB3YXMgbm90CiAgICAgICAgICAgICAgICAgICAgaW5jb25zaWRlcmFibGXvvIkgYXMgd2VsbDsgYnV0IGhlIGhhZCBub3QgY29uZmlkZW5jZSBlbm91Z2ggaW4gaGltIHRvCiAgICAgICAgICAgICAgICAgICAgYWJhbmRvbiBoZXIgbWFycmlhZ2UtcG9ydGlvbi4gSXQgd2FzIGFzIGlmIGhlIGZlbHQsIGZvcnNvb3RoLCB0aGF0IHRoZSBwcm9wZXJ0eQogICAgICAgICAgICAgICAgICAgIG9mIGd1YXJkaWFucyB3YXMgYSBzZWN1cml0eSBmb3IgdGhlaXIgd2FyZHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICByZW1hcmsgaXMgc2FyY2FzdGljLiBEZW1vc3RoZW5lcyByZXByZXNlbnRzIE9uZXRvciBhcyBmZWFyaW5nIGxlc3QgdGhlIHN1aXQKICAgICAgICAgICAgICAgICAgICAgICAgb2YgRGVtb3N0aGVuZXMgYWdhaW5zdCBBcGhvYnVzIG1pZ2h0IG1ha2UgaXQgcXVlc3Rpb25hYmxlIHdoZXRoZXIgdGhlIGxhdHRlcgogICAgICAgICAgICAgICAgICAgICAgICB3b3VsZCBiZSBpbiBhIHBvc2l0aW9uIHRvIHJlcGF5IHRoZSBtYXJyaWFnZS1wb3J0aW9uLCBpZiBjYWxsZWQgdXBvbiB0byBkbwogICAgICAgICAgICAgICAgICAgICAgICBzby48L25vdGU+IEhlIGRpZCwgaG93ZXZlciwgZ2l2ZSBoaW0gaGlzIHNpc3RlciwgYnV0IHRoZSBwb3J0aW9uLAogICAgICAgICAgICAgICAgICAgIFRpbW9jcmF0ZXMsIHdobyBoYWQgYmVlbiBoZXIgZm9ybWVyIGh1c2JhbmQsIGFncmVlZCB0byBrZWVwIGFzIGEgbG9hbiB3aXRoCiAgICAgICAgICAgICAgICAgICAgaW50ZXJlc3QgYXQgdGhlIHJhdGUgb2YgZml2ZSBvYm9scy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgYXQKICAgICAgICAgICAgICAgICAgICAgICAgMTAgcGVyY2VudCwgaW5zdGVhZCBvZiB0aGUgb3JkaW5hcnkgMTggcGVyY2VudC48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gSSBoYWQgd29uIG15IHN1aXQgYWdhaW5zdCBBcGhvYnVzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1hdHRlciBvZiB0aGUgZ3VhcmRpYW5zaGlwIGFuZCBoZSBzdGlsbCByZWZ1c2VkIHRvIG1ha2UgYW55IGp1c3Qgc2V0dGxlbWVudCwKICAgICAgICAgICAgICAgICAgICBPbmV0b3IgZGlkIG5vdCBldmVuIHRyeSB0byBzZXR0bGUgb3VyIGRpc3B1dGUsIGJ1dCwgYWxsZWdpbmcgdGhhdCBoaXMgc2lzdGVyIGhhZAogICAgICAgICAgICAgICAgICAgIGJlZW4gZGl2b3JjZWQsIGFuZCB0aGF0IGhlIHdhcyB1bmFibGUgdG8gZ2V0IGJhY2sgaGVyIG1hcnJpYWdlLXBvcnRpb24sIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgaGFkIHBhaWQg77yIYWx0aG91Z2ggaGUgaGFkIG5vdCBwYWlkIGl0LCBhbmQgaXQgd2FzIGV2ZW4gdGhlbiBpbiBoaXMKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW9u77yJLCBkZWNsYXJlZCB0aGF0IGhlIGhhZCB0YWtlbiBhIG1vcnRnYWdlIG9uIHRoZSBsYW5kLCBhbmQgaGFkCiAgICAgICAgICAgICAgICAgICAgdGhlIGVmZnJvbnRlcnkgdG8gZXhwZWwgbWUgZnJvbSBpdDsgc3VjaCB3YXMgaGlzIGNvbnRlbXB0IGZvciBtZSwgYW5kIGZvciB5b3UsCiAgICAgICAgICAgICAgICAgICAgYW5kIGZvciB0aGUgbGF3cyB3aGljaCB3ZXJlIGluIGZvcmNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['30.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgYXJlIHRoZSBmYWN0cyBiZWNhdXNlIG9mIHdoaWNoIGhlIGlzIGRlZmVuZGFudCBpbiB0aGUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgIHN1aXQsIGFuZCByZWdhcmRpbmcgd2hpY2ggeW91IGFyZSB0byBjYXN0IHlvdXIgdm90ZS4gSSBzaGFsbCBicmluZyBmb3J3YXJkCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzc2VzLCBhbmQgaW4gdGhlIGZpcnN0IGluc3RhbmNlIFRpbW9jcmF0ZXMgaGltc2VsZiwgd2hvIHdpbGwgdGVzdGlmeSB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgYWdyZWVkIHRvIGhvbGQgdGhlIGRvd3J5IGFzIGEgbG9hbiwgYW5kIHRoYXQgaGUgY29udGludWVkIHRvIHBheSBpbnRlcmVzdCBvbgogICAgICAgICAgICAgICAgICAgIGl0IHRvIEFwaG9idXMgYWNjb3JkaW5nIHRvIHRoZSBhZ3JlZW1lbnQ7IGFsc28gdGhhdCBBcGhvYnVzIGhpbXNlbGYgYWNrbm93bGVkZ2VkCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSByZWNlaXZlZCB0aGUgaW50ZXJlc3QgZnJvbSBUaW1vY3JhdGVzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlIHRoZSBkZXBvc2l0aW9ucy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb25zPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RnJvbSB0aGUgdmVyeQogICAgICAgICAgICAgICAgICAgIGZpcnN0LCB5b3Ugc2VlLCBpdCBpcyBhZG1pdHRlZCB0aGF0IHRoZSBkb3dyeSB3YXMgbm90IHBhaWQgdG8gQXBob2J1cywgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBoZSBkaWQgbm90IGdldCBpdCB1bmRlciBoaXMgY29udHJvbC4gQW5kIGl0IHNlZW1zIHZlcnkgcHJvYmFibGUgdGhhdCBvbiBhY2NvdW50CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGZhY3RzIHdoaWNoIEkgaGF2ZSBtZW50aW9uZWQsIHRoZXkgY2hvc2UgdG8gY29udGludWUgYXMgZGVidG9ycyBmb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZG93cnksIHJhdGhlciB0aGFuIHRvIGhhdmUgaXQgaW52b2x2ZWQgaW4gdGhlIGVzdGF0ZSBvZiBBcGhvYnVzIHdoaWNoIHdhcyBzdXJlCiAgICAgICAgICAgICAgICAgICAgdG8gYmUgc28gc2VyaW91c2x5IGVuZGFuZ2VyZWQuIEZvciBpdCBpcyBpbXBvc3NpYmxlIGZvciB0aGVtIHRvIGNsYWltIHRoYXQKICAgICAgICAgICAgICAgICAgICBwb3ZlcnR5IHByZXZlbnRlZCB0aGVpciBwYXlpbmcgaXQgb3ZlciBhdCBvbmNlLCBzaW5jZSBUaW1vY3JhdGVzIGhhcyBhbiBlc3RhdGUKICAgICAgICAgICAgICAgICAgICBvZiBtb3JlIHRoYW4gdGVuIHRhbGVudHMsIGFuZCBPbmV0b3Igb25lIG9mIG1vcmUgdGhhbiB0aGlydHk7IHNvIHRoaXMgY2Fubm90CiAgICAgICAgICAgICAgICAgICAgaGF2ZSBiZWVuIHRoZSByZWFzb24gd2h5IHRoZXkgaGF2ZSBub3QgbWFkZSBhbiBpbW1lZGlhdGUgcGF5bWVudC4gPC90cmFuc2xhdGlvbj4="
translation['30.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgY2FuIHRoZXkgY2xhaW0gdGhhdCB0aGV5IGhhZCBwcm9wZXJ0eSBpbmRlZWQsIGJ1dAogICAgICAgICAgICAgICAgICAgIG5vIHJlYWR5IG1vbmV5LCBvciB0aGF0IHRoZSBsYWR5IHdhcyBhIHdpZG93LCBhbmQgdGhhdCB0aGV5IHRoZXJlZm9yZSBoYXN0ZW5lZAogICAgICAgICAgICAgICAgICAgIHRvIGNvbmNsdWRlIG1hdHRlcnMgd2l0aG91dCBhdCBvbmNlIHBheWluZyBoZXIgcG9ydGlvbi4gRm9yIHRoZXNlIG1lbiBhcmUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgaGFiaXQgb2YgbGVuZGluZyBjb25zaWRlcmFibGUgc3VtcyB0byBvdGhlcnMsIGFuZCBtb3Jlb3ZlciwgdGhlIGxhZHkgd2FzIG5vdCBhCiAgICAgICAgICAgICAgICAgICAgd2lkb3csIGJ1dCB3aGVuIHRoZXkgZ2F2ZSBoZXIgaW4gbWFycmlhZ2UsIGl0IHdhcyBmcm9tIHRoZSBob3VzZSBvZiBUaW1vY3JhdGVzLAogICAgICAgICAgICAgICAgICAgIHdoZXJlIHNoZSB3YXMgbGl2aW5nIHdpdGggaGltIGFzIGhpcyB3aWZlOyBzbyB0aGF0IHRoZXJlIGlzIG5vIHJlYXNvbmFibGUgZ3JvdW5kCiAgICAgICAgICAgICAgICAgICAgd2h5IG9uZSBzaG91bGQgYWNjZXB0IHRoaXMgZXhjdXNlIGVpdGhlci4gPC90cmFuc2xhdGlvbj4="
translation['30.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVyLCBtZW4gb2YgdGhlIGp1cnksIEkgdGhpbmsgeW91IHdvdWxkIGFsbCBhZ3JlZSB0byB0aGlzLCB0aGF0LCBpbgogICAgICAgICAgICAgICAgICAgIGFycmFuZ2luZyBhIG1hdHRlciBvZiB0aGlzIHNvcnQsIGFueW9uZSB3b3VsZCBjaG9vc2UgdG8gYm9ycm93IG1vbmV5IG9mIGFub3RoZXIsCiAgICAgICAgICAgICAgICAgICAgcmF0aGVyIHRoYW4gZmFpbCB0byBwYXkgdGhlIGRvd3J5IHRvIGhpcyBzaXN0ZXIncyBodXNiYW5kLiBGb3IgaWYgYSBtYW4gZG9lcyBub3QKICAgICAgICAgICAgICAgICAgICBzZXR0bGUgdGhpcyBtYXR0ZXIgaGUgYmVjb21lcyBhIGRlYnRvciwgcmVnYXJkaW5nIHdob20gaXQgaXMgdW5jZXJ0YWluIHdoZXRoZXIKICAgICAgICAgICAgICAgICAgICBoZSB3aWxsIG1lZXQgaGlzIGp1c3Qgb2JsaWdhdGlvbnMgb3Igbm90OyBidXQgaWYgdG9nZXRoZXIgd2l0aCB0aGUgbGFkeSBoZSBnaXZlcwogICAgICAgICAgICAgICAgICAgIGFsc28gd2hhdCBpcyBoZXJzLCBoZSBiZWNvbWVzIGEga2luc21hbiBhbmQgYSBicm90aGVyLWluLWxhdywgPC90cmFuc2xhdGlvbj4="
translation['30.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgaGUgaXMgbm90IHVuZGVyIGFueSBzdXNwaWNpb24sIHNpbmNlIGhlIGhhcyBkb25lIGFsbAogICAgICAgICAgICAgICAgICAgIHRoYXQganVzdGljZSBkZW1hbmRlZC4gU2VlaW5nIHRoYXQgdGhlIG1hdHRlciBzdGFuZHMgdGh1cywgYW5kIHRoYXQgdGhleSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgbm90IGZvcmNlZCBieSBhIHNpbmdsZSBvbmUgb2YgdGhlIGNhdXNlcyB3aGljaCBJIGhhdmUgbWVudGlvbmVkIHRvIGxldCB0aGlzIGRlYnQKICAgICAgICAgICAgICAgICAgICBzdGFuZCwgYW5kIGNvdWxkIG5vdCBoYXZlIGRlc2lyZWQgdG8gZG8gc28sIGl0IGlzIG5vdCBwb3NzaWJsZSB0byBzdWdnZXN0IGFueQogICAgICAgICAgICAgICAgICAgIG90aGVyIGV4Y3VzZSBmb3Igbm9uLXBheW1lbnQuIEl0IG11c3QgYmUgZm9yIHRoZSByZWFzb24gd2hpY2ggSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgbWVudGlvbmVk4oCUdGhhdCB0aGV5IGRpZCBub3QgdHJ1c3QgQXBob2J1cyBlbm91Z2ggdG8gcGF5IGhpbSB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgZG93cnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRvIHVuZGVyc3RhbmQgdGhlIGFyZ3VtZW50IG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBzcGVlY2ggdGhlIHJlYWRlciBzaG91bGQgYmVhciBpbiBtaW5kIGNlcnRhaW4gZmFjdHMgcmVnYXJkaW5nIHRoZSBBdGhlbmlhbgogICAgICAgICAgICAgICAgICAgICAgICBsYXdzIGNvbmNlcm5pbmcgbWFycmlhZ2UgYW5kIGRpdm9yY2UuIFRvIG1ha2UgYSBtYXJyaWFnZSBsZWdhbCBhdCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaXQgd2FzIG5lY2Vzc2FyeSB0aGF0IGJvdGggYnJpZGUKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGJyaWRlZ3Jvb20gYmUgb2YgcHVyZSBBdGhlbmlhbiBzdG9jaywgYW5kIHRoYXQgdGhlIGJyaWRlIGJlIGdpdmVuIGF3YXkKICAgICAgICAgICAgICAgICAgICAgICAgYnkgaGVyIGZhdGhlciwgb3IsIGlmIHNoZSBoYWQgbm8gZmF0aGVyIGxpdmluZywgYnkgaGVyIG5lYXJlc3QgbWFsZSByZWxhdGl2ZQogICAgICAgICAgICAgICAgICAgICAgICDvvIhoZXIgZ3VhcmRpYW4gb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrrhvbvPgc65zr/PgjwvZm9yZWlnbj7vvIkuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBtYXJyaWFnZS1jb250cmFjdCB3YXMgYmV0d2VlbiB0aGUgYnJpZGVncm9vbSBhbmQgdGhpcyBndWFyZGlhbiwgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBtYXJyaWFnZS1wb3J0aW9uIHdhcyBwYWlkIGJ5IHRoZSBndWFyZGlhbiB0byB0aGUgYnJpZGVncm9vbS4gSW4gdGhlIGNhc2Ugb2YKICAgICAgICAgICAgICAgICAgICAgICAgT25ldG9yJ3Mgc2lzdGVyIERlbW9zdGhlbmVzIGFzc2VydHMgdGhhdCB0aGUgcG9ydGlvbiB3YXMgbm90IHBhaWQgb3V0cmlnaHQKICAgICAgICAgICAgICAgICAgICAgICAgdG8gQXBob2J1cywgYnV0IHdhcyByZXRhaW5lZCBieSBoZXIgZm9ybWVyIGh1c2JhbmQsIFRpbW9jcmF0ZXMsIHdobyB3YXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgcGF5IGludGVyZXN0IG9uIGl0IGF0IDEwIHBlcmNlbnQuIFRoZSBodXNiYW5kIG1pZ2h0IGRpdm9yY2UgaGlzIHdpZmUsIGJ1dCBoZQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgcmVxdWlyZWQgdG8gc2VuZCBoZXIgYmFjayB0byBoZXIgZ3VhcmRpYW4gd2l0aCBoZXIgcGVyc29uYWwgZWZmZWN0cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgaGVyIHBvcnRpb24sIG9yIHRvIHBheSBpbnRlcmVzdCBvbiB0aGUgcG9ydGlvbiwgbm9ybWFsbHkgYXQgMTggcGVyY2VudCB1bnRpbAogICAgICAgICAgICAgICAgICAgICAgICBpdCB3YXMgcGFpZC4gSGlzIGFjdGlvbiBpbiBzZW5kaW5nIGF3YXkgaGlzIHdpZmUgd2FzIHRlY2huaWNhbGx5IGNhbGxlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4DhvbnPgM61zrzPiM65z4I8L2ZvcmVpZ24+LiBPbiB0aGUgb3RoZXIgaGFuZCB0aGUgd2lmZQogICAgICAgICAgICAgICAgICAgICAgICBtaWdodCBsZWF2ZSBoZXIgaHVzYmFuZCB3aXRoIGhpcyBjb25zZW50LCBvciBmb3IgY2F1c2UuIElmIHRoZSBodXNiYW5kJ3MKICAgICAgICAgICAgICAgICAgICAgICAgY29uc2VudCBjb3VsZCBub3QgYmUgb2J0YWluZWQsIHRoZSB3b21hbiBwcmVzZW50ZWQgaGVyc2VsZiBiZWZvcmUgdGhlIGFyY2hvbgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgc3RhdGVkIGhlciBjYXNlLiBUaGUgYWN0LCB0YWtlbiBvbiBoZXIgaW5pdGlhdGl2ZSwgd2FzIHRlcm1lZCA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvIDPgOG9uc67zrXOuc+IzrnPgjwvZm9yZWlnbj4sIGFuZCBpbiB0aGlzIGNhc2UsIHRvbywgaGVyIHBvcnRpb24KICAgICAgICAgICAgICAgICAgICAgICAgd2VudCB3aXRoIGhlci48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+IGl0IHdhcyBuZWNlc3NhcnkgdGhhdCBib3RoIGJyaWRlCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBicmlkZWdyb29tIGJlIG9mIHB1cmUgQXRoZW5pYW4gc3RvY2ssIGFuZCB0aGF0IHRoZSBicmlkZSBiZSBnaXZlbiBhd2F5CiAgICAgICAgICAgICAgICAgICAgICAgIGJ5IGhlciBmYXRoZXIsIG9yLCBpZiBzaGUgaGFkIG5vIGZhdGhlciBsaXZpbmcsIGJ5IGhlciBuZWFyZXN0IG1hbGUgcmVsYXRpdmUKICAgICAgICAgICAgICAgICAgICAgICAg77yIaGVyIGd1YXJkaWFuIG9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs664b27z4HOuc6/z4I8L2ZvcmVpZ24+77yJLgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgbWFycmlhZ2UtY29udHJhY3Qgd2FzIGJldHdlZW4gdGhlIGJyaWRlZ3Jvb20gYW5kIHRoaXMgZ3VhcmRpYW4sIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UtcG9ydGlvbiB3YXMgcGFpZCBieSB0aGUgZ3VhcmRpYW4gdG8gdGhlIGJyaWRlZ3Jvb20uIEluIHRoZSBjYXNlIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIE9uZXRvcidzIHNpc3RlciBEZW1vc3RoZW5lcyBhc3NlcnRzIHRoYXQgdGhlIHBvcnRpb24gd2FzIG5vdCBwYWlkIG91dHJpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIEFwaG9idXMsIGJ1dCB3YXMgcmV0YWluZWQgYnkgaGVyIGZvcm1lciBodXNiYW5kLCBUaW1vY3JhdGVzLCB3aG8gd2FzIHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHBheSBpbnRlcmVzdCBvbiBpdCBhdCAxMCBwZXJjZW50LiBUaGUgaHVzYmFuZCBtaWdodCBkaXZvcmNlIGhpcyB3aWZlLCBidXQgaGUKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIHJlcXVpcmVkIHRvIHNlbmQgaGVyIGJhY2sgdG8gaGVyIGd1YXJkaWFuIHdpdGggaGVyIHBlcnNvbmFsIGVmZmVjdHMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGhlciBwb3J0aW9uLCBvciB0byBwYXkgaW50ZXJlc3Qgb24gdGhlIHBvcnRpb24sIG5vcm1hbGx5IGF0IDE4IHBlcmNlbnQgdW50aWwKICAgICAgICAgICAgICAgICAgICAgICAgaXQgd2FzIHBhaWQuIEhpcyBhY3Rpb24gaW4gc2VuZGluZyBhd2F5IGhpcyB3aWZlIHdhcyB0ZWNobmljYWxseSBjYWxsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG8gM+A4b25z4DOtc68z4jOuc+CPC9mb3JlaWduPi4gT24gdGhlIG90aGVyIGhhbmQgdGhlIHdpZmUKICAgICAgICAgICAgICAgICAgICAgICAgbWlnaHQgbGVhdmUgaGVyIGh1c2JhbmQgd2l0aCBoaXMgY29uc2VudCwgb3IgZm9yIGNhdXNlLiBJZiB0aGUgaHVzYmFuZCdzCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNlbnQgY291bGQgbm90IGJlIG9idGFpbmVkLCB0aGUgd29tYW4gcHJlc2VudGVkIGhlcnNlbGYgYmVmb3JlIHRoZSBhcmNob24KICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHN0YXRlZCBoZXIgY2FzZS4gVGhlIGFjdCwgdGFrZW4gb24gaGVyIGluaXRpYXRpdmUsIHdhcyB0ZXJtZWQgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byAz4DhvbnOu861zrnPiM65z4I8L2ZvcmVpZ24+LCBhbmQgaW4gdGhpcyBjYXNlLCB0b28sIGhlciBwb3J0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIHdlbnQgd2l0aCBoZXIuPC90cmFuc2xhdGlvbj4="
translation['30.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlCiAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoZWQgdGhpcyBwb2ludCwgdGhlbiwgaW4gdGhpcyB3YXkgYmV5b25kIGFsbCBjb250cm92ZXJzeTsgYW5kIEkgdGhpbmsgSQogICAgICAgICAgICAgICAgICAgIHNoYWxsIGVhc2lseSBkZW1vbnN0cmF0ZSBmcm9tIHRoZSBmYWN0cyB0aGVtc2VsdmVzIHRoYXQgdGhleSBkaWQgbm90IHBheSB0aGUKICAgICAgICAgICAgICAgICAgICBwb3J0aW9uIHN1YnNlcXVlbnRseSBlaXRoZXI7IHNvIHRoYXQgaXQgd2lsbCBiZSBjbGVhciB0byB5b3UgdGhhdCBldmVuIGlmIHRoZXkKICAgICAgICAgICAgICAgICAgICB3aXRoaGVsZCB0aGUgbW9uZXksIG5vdCBmb3IgdGhlIHJlYXNvbnMgSSBoYXZlIG1lbnRpb25lZCwgYnV0IHdpdGggdGhlIGludGVudGlvbgogICAgICAgICAgICAgICAgICAgIG9mIHNwZWVkeSBwYXltZW50LCB0aGV5IHdvdWxkIG5ldmVyIGFjdHVhbGx5IGhhdmUgcGFpZCBpdCwgb3IgbGV0IGl0IHNsaXAgb3V0IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgaGFuZHM7IHdpdGggc3VjaCB1cmdlbmN5IGRpZCB0aGUgY2FzZSBwcmVzcyB1cG9uIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['30.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3YXMgYW4gaW50ZXJ2YWwgb2YgdHdvIHllYXJzIGJldHdlZW4gdGhlIG1hcnJpYWdlIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvbWFuIGFuZCB0aGVpciBkZWNsYXJhdGlvbiB0aGF0IHRoZSBkaXZvcmNlIGhhZCB0YWtlbiBwbGFjZS4gU2hlIHdhcwogICAgICAgICAgICAgICAgICAgIG1hcnJpZWQgaW4gdGhlIGFyY2hvbnNoaXAgb2YgUG9seXplbHVzLCBpbiB0aGUgbW9udGggb2YgU2Npcm9waG9yaW9uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBpbiBKdW5lIDM2Ni48L25vdGU+IGFuZCB0aGUgZGl2b3JjZSB3YXMKICAgICAgICAgICAgICAgICAgICByZWdpc3RlcmVkIGluIHRoZSBtb250aCBvZiBQb3NlaWRvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgaW4KICAgICAgICAgICAgICAgICAgICAgICAgRGVjZW1iZXIgMzY0Ljwvbm90ZT4gaW4gdGhlIGFyY2hvbnNoaXAgb2YgVGltb2NyYXRlcy4gSSwgb24gbXkgcGFydCwgd2FzCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0ZWQgdG8gY2l0aXplbnNoaXA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5iPC9lbXBoPiwKICAgICAgICAgICAgICAgICAgICAgICAgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy41IiB2YWxpZD0ieWVzIj5EZW0uIDI3LjU8L2JpYmw+LCBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDQyLjIiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLiA0Mi4yPC9iaWJsPjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICBpbW1lZGlhdGVseSBhZnRlciB0aGUgbWFycmlhZ2UsIGxhaWQgbXkgY2hhcmdlcywgYW5kIGRlbWFuZGVkIGFuIGFjY291bnRpbmc7CiAgICAgICAgICAgICAgICAgICAgYW5kLCBmaW5kaW5nIHRoYXQgSSB3YXMgYmVpbmcgcm9iYmVkIG9mIGFsbCBteSBwcm9wZXJ0eSwgaW5zdGl0dXRlZCBteSBzdWl0CiAgICAgICAgICAgICAgICAgICAgdW5kZXIgdGhlIGxhc3QtbWVudGlvbmVkIGFyY2hvbi4gPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5iPC9lbXBoPiwKICAgICAgICAgICAgICAgICAgICAgICAgb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAyNy41IiB2YWxpZD0ieWVzIj5EZW0uIDI3LjU8L2JpYmw+LCBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvdC4gQXRoLiBQb2wuIDQyLjIiIHZhbGlkPSJ5ZXMiPkFyaXN0b3QuIEF0aC4gUG9sLiA0Mi4yPC9iaWJsPjwvdHJhbnNsYXRpb24+"
translation['30.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2hvcnRuZXNzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRpbWUgbWFrZXMgdGhlIGNvbnRpbnVhbmNlIG9mIHRoZSBkZWJ0IGluIGFjY29yZGFuY2Ugd2l0aCB0aGUgYWdyZWVtZW50CiAgICAgICAgICAgICAgICAgICAgbm90IHVubGlrZWx5LCBidXQgaXQgaXMgaW5jcmVkaWJsZSB0aGF0IGl0IHNob3VsZCBoYXZlIGJlZW4gcGFpZC4gRm9yIGRvIHlvdQogICAgICAgICAgICAgICAgICAgIHN1cHBvc2UgdGhhdCB0aGUgZGVmZW5kYW50IGhlcmUsIGEgbWFuIHdobyBhdCB0aGUgZmlyc3QgY2hvc2UgdG8gb3dlIHRoZSBtb25leQogICAgICAgICAgICAgICAgICAgIGFuZCB0byBwYXkgaW50ZXJlc3Qgb24gaXQsIGluIG9yZGVyIHRoYXQgaGlzIHNpc3RlcidzIGRvd3J5IG1pZ2h0IG5vdCBiZQogICAgICAgICAgICAgICAgICAgIGplb3BhcmRpemVkIGFsb25nIHdpdGggdGhlIHJlc3Qgb2YgaGVyIGh1c2JhbmQncyBwcm9wZXJ0eSwgd291bGQgaGF2ZSBwYWlkIGl0CiAgICAgICAgICAgICAgICAgICAgd2hlbiBzdWl0IGhhZCBhbHJlYWR5IGJlZW4gaW5zdGl0dXRlZCBhZ2FpbnN0IHRoYXQgaHVzYmFuZD8gV2h5LCBldmVuIGlmIGhlIGhhZAogICAgICAgICAgICAgICAgICAgIGF0IHRoZSBmaXJzdCB0cnVzdGVkIGhpbSB3aXRoIHRoZSBtb25leSwgaGUgd291bGQgdGhlbiBhdCBvbmNlIGhhdmUgc291Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgcmVjb3ZlciBpdC4gTm8sIG1lbiBvZiB0aGUganVyeTsgdGhlIHN1cHBvc2l0aW9uIGlzLCBJIHByZXN1bWUsIGltcG9zc2libGUuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSB3b21hbiBtYXJyaWVkIGF0IHRoZSB0aW1lIEkgbWVudGlvbjsgdGhhdCBpbiB0aGUgaW50ZXJpbSBBcGhvYnVzIGFuZCBJCiAgICAgICAgICAgICAgICAgICAgaGFkIGFscmVhZHkgZ29uZSB0byBsYXc7IGFuZCB0aGF0IHRob3NlIG1lbiBkaWQgbm90IHJlZ2lzdGVyIHRoZSBkaXZvcmNlIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgYXJjaG9uIHVudGlsIGFmdGVyIEkgaGFkIGluc3RpdHV0ZWQgbXkgc3VpdCwgdGFrZSwgcGxlYXNlLCB0aGVzZSBkZXBvc2l0aW9ucwogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyBlYWNoIHBvaW50LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5BZnRlciB0aGlzIGFyY2hvbiBjYW1lIENlcGhpc29kb3J1cyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVuIENoaW9uLiBEdXJpbmcgdGhlaXIgdGVybSBvZiBvZmZpY2UsIGhhdmluZyBiZWVuIGFkbWl0dGVkIHRvIGNpdGl6ZW5zaGlwLCBJCiAgICAgICAgICAgICAgICAgICAgY29udGludWVkIHRvIHByZXNzIG15IGNoYXJnZXMsIGFuZCBpbiB0aGUgYXJjaG9uc2hpcCBvZiBUaW1vY3JhdGVzIEkgYmVnYW4gbXkKICAgICAgICAgICAgICAgICAgICAgICAgc3VpdC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSB0aGlzIGRlcG9zaXRpb24sIHBsZWFzZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBhbHNvIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaXMgY2xlYXIsIHRoZW4sIGZyb20gdGhlIGV2aWRlbmNlCiAgICAgICAgICAgICAgICAgICAgYWRkdWNlZCB0aGF0IGl0IGlzIG5vdCBiZWNhdXNlIHRoZXkgaGF2ZSBwYWlkIHRoZSBkb3dyeSwgYnV0IGJlY2F1c2UgdGhleSB3aXNoCiAgICAgICAgICAgICAgICAgICAgdG8gc2F2ZSBoaXMgcHJvcGVydHkgZm9yIEFwaG9idXMsIHRoYXQgdGhleSBoYXZlIGhhZCB0aGUgYXVkYWNpdHkgdG8gYWN0IGFzIHRoZXkKICAgICAgICAgICAgICAgICAgICBoYXZlIGRvbmUuIEZvciB3aGVuIGluIHNvIHNob3J0IGEgdGltZSB0aGV5IGFsbGVnZSB0aGF0IHRoZXkgb3dlZCB0aGUgbW9uZXk7CiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHBhaWQgaXQ7IHRoYXQgdGhlIHdvbWFuIHdhcyBkaXZvcmNlZCBhbmQgY291bGQgbm90IHJlY292ZXIgdGhlIGRvd3J5OwogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoZXkgdG9vayBhIG1vcnRnYWdlIG9uIHRoZSBsYW5kOyBob3cgY2FuIGl0IGJlIG90aGVyIHRoYW4gY2xlYXIgdGhhdAogICAgICAgICAgICAgICAgICAgIHRoZXkgYXJlIGFjdGluZyBpbiBjb2xsdXNpb24gaW4gdGhlaXIgYXR0ZW1wdCB0byBkZWZyYXVkIG1lIG9mIHRoZSBkYW1hZ2VzCiAgICAgICAgICAgICAgICAgICAgYXdhcmRlZCBtZSBieSB5b3U/IDwvdHJhbnNsYXRpb24+"
translation['30.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5JIHNoYWxsIG5vdyBlbmRlYXZvciB0bwogICAgICAgICAgICAgICAgICAgIHByb3ZlIHRvIHlvdSBmcm9tIHRoZSBhbnN3ZXJzIGdpdmVuIGJ5IHRoZSBkZWZlbmRhbnQgaGltc2VsZiwgYW5kIGJ5IFRpbW9jcmF0ZXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIEFwaG9idXMsIHRoYXQgaXQgaXMgaW1wb3NzaWJsZSB0aGF0IHRoZSBkb3dyeSBzaG91bGQgaGF2ZSBiZWVuIHBhaWQuIEZvciwKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGp1cnksIEkgcXVlc3Rpb25lZCBlYWNoIG9mIHRoZXNlIG1lbiBpbiB0aGUgcHJlc2VuY2Ugb2YgbWFueQogICAgICAgICAgICAgICAgICAgIHdpdG5lc3Nlcy4gSSBhc2tlZCBPbmV0b3IgYW5kIFRpbW9jcmF0ZXMgd2hldGhlciBhbnkgd2l0bmVzc2VzIHdlcmUgcHJlc2VudCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBwYWlkIHRoZSBkb3dyeSwgYW5kIEFwaG9idXMgaGltc2VsZiB3aGV0aGVyIGFueSB3ZXJlIHByZXNlbnQgd2hlbiBoZQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkIGl0OyA8L3RyYW5zbGF0aW9uPg=="
translation['30.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhleSBhbGwgYW5zd2VyZWQgc2V2ZXJhbGx5CiAgICAgICAgICAgICAgICAgICAgdGhhdCBubyB3aXRuZXNzIHdhcyBwcmVzZW50LCBidXQgdGhhdCBBcGhvYnVzIGdvdCBpdCBmcm9tIHRoZW0gYnkgaW5zdGFsbWVudHMsCiAgICAgICAgICAgICAgICAgICAgaW4gc3VjaCBzdW1zIGFzIGhlIG5lZWRlZCBmcm9tIHRpbWUgdG8gdGltZS4gQW5kIHlldCBjYW4gYW55IG9uZSBvZiB5b3UgYmVsaWV2ZQogICAgICAgICAgICAgICAgICAgIHRoaXMsIHRoYXQsIHdoZW4gdGhlIGRvd3J5IHdhcyBhIHRhbGVudCwgT25ldG9yIGFuZCBUaW1vY3JhdGVzIHB1dCBzbyBsYXJnZSBhCiAgICAgICAgICAgICAgICAgICAgc3VtIGludG8gdGhlIGhhbmRzIG9mIEFwaG9idXMgd2l0aG91dCB3aXRuZXNzZXM/IFdoeSwgaW4gcGF5aW5nIGhpbSBtb25leSwgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgbm90IHNheSBpbiB0aGlzIG1hbm5lciwgYnV0IGV2ZW4gaW4gdGhlIHByZXNlbmNlIG9mIG1hbnkgd2l0bmVzc2VzLCBvbmUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIHRha2VuIGV2ZXJ5IHBvc3NpYmxlIHByZWNhdXRpb248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TW9yZQogICAgICAgICAgICAgICAgICAgICAgICBsaXRlcmFsbHksIOKAnG9uZSB3b3VsZCBoYXZlIGJlZW4gcmFzaCB0byBoYXZlIHRydXN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaGltLuKAnTwvbm90ZT4gaW4gb3JkZXIsIGlmIGEgZGlzcHV0ZSBzaG91bGQgYXJpc2UsIHRvIGJlIGFibGUKICAgICAgICAgICAgICAgICAgICByZWFkaWx5IHRvIHJlY292ZXIgaW4geW91ciBjb3VydCB3aGF0IHdhcyBkdWUuIDwvdHJhbnNsYXRpb24+"
translation['30.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5ObyBtYW4sIGluIGNvbmNsdWRpbmcgYSB0cmFuc2FjdGlvbiBvZiBzdWNoIGltcG9ydGFuY2UsIEkgd2lsbCBub3Qgc2F5IHdpdGgKICAgICAgICAgICAgICAgICAgICBzdWNoIGEgbWFuIGFzIEFwaG9idXMsIGJ1dCB3aXRoIGFueWJvZHkgd2hhdGV2ZXIsIHdvdWxkIGhhdmUgYWN0ZWQgd2l0aG91dCBhCiAgICAgICAgICAgICAgICAgICAgd2l0bmVzcy4gVGhpcyBpcyB0aGUgcmVhc29uIHdoeSB3ZSBjZWxlYnJhdGUgbWFycmlhZ2UtZmVhc3RzIGFuZCBjYWxsIHRvZ2V0aGVyCiAgICAgICAgICAgICAgICAgICAgb3VyIGNsb3Nlc3QgZnJpZW5kcyBhbmQgcmVsYXRpb25zLCBiZWNhdXNlIHdlIGFyZSBkZWFsaW5nIHdpdGggbm8gbGlnaHQgYWZmYWlyLAogICAgICAgICAgICAgICAgICAgIGJ1dCBhcmUgZW50cnVzdGluZyB0byB0aGUgY2FyZSBvZiBvdGhlcnMgdGhlIGxpdmVzIG9mIG91ciBzaXN0ZXJzIGFuZCBkYXVnaHRlcnMsCiAgICAgICAgICAgICAgICAgICAgZm9yIHdob20gd2Ugc2VlayB0aGUgZ3JlYXRlc3QgcG9zc2libGUgc2VjdXJpdHkuIDwvdHJhbnNsYXRpb24+"
translation['30.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcHJlc3VtcHRpb24gaXMsIHRoZW4sIHRoYXQgdGhlIGRlZmVuZGFudCBtYWRlIHRoZQogICAgICAgICAgICAgICAgICAgIHNldHRsZW1lbnQgaW4gdGhlIHByZXNlbmNlIG9mIHRoZSBzYW1lIHdpdG5lc3NlcyBiZWZvcmUgd2hvbSBoZSBoYWQgYWRtaXR0ZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5kZWJ0ZWRuZXNzIGFuZCBwcm9taXNlZCB0byBwYXkgdGhlIGludGVyZXN0LCBpZiBoZSByZWFsbHkgZGlkIHBheSB0aGUgZG93cnkgdG8KICAgICAgICAgICAgICAgICAgICBBcGhvYnVzLiBGb3IsIGlmIGhlIGhhZCBhY3RlZCBpbiB0aGlzIHdheSwgaGUgd291bGQgaGF2ZSBjbGVhcmVkIGhpbXNlbGYgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgd2hvbGUgbWF0dGVyOyBidXQgYnkgcGF5aW5nIGhpbSB3aGVuIHRoZXkgd2VyZSBhbG9uZSwgaGUgd291bGQgaGF2ZSBsZWZ0IHRob3NlCiAgICAgICAgICAgICAgICAgICAgaW4gd2hvc2UgcHJlc2VuY2UgaGUgaGFkIG1hZGUgdGhlIGFncmVlbWVudCBhcyB3aXRuZXNzZXMgdGhhdCBoZSB3YXMgc3RpbGwgYQogICAgICAgICAgICAgICAgICAgIGRlYnRvci4gPC90cmFuc2xhdGlvbj4="
translation['30.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5BcyBpdCB3YXMsIHRoZXkgY291bGQgbm90IGluZHVjZSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGZyaWVuZHMsIHdobyB3ZXJlIG1vcmUgaG9uZXN0IG1lbiB0aGFuIHRoZW1zZWx2ZXMsIHRvIGJlYXIgd2l0bmVzcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBwYXltZW50IG9mIHRoZSBtb25leSwgYW5kIHRoZXkgdGhvdWdodCB0aGF0LCBpZiB0aGV5IHByb2R1Y2VkIG90aGVyIHdpdG5lc3NlcywKICAgICAgICAgICAgICAgICAgICBub3QgcmVsYXRlZCB0byB0aGVtLCB5b3Ugd291bGQgbm90IGJlbGlldmUgdGhlbS4gQWdhaW4sIGlmIHRoZXkgc2FpZCB0aGUgcGF5bWVudAogICAgICAgICAgICAgICAgICAgIGhhZCBiZWVuIG1hZGUgYWxsIGF0IG9uY2UsIHRoZXkga25ldyB0aGF0IHdlIHNob3VsZCBkZW1hbmQgZm9yIGV4YW1pbmF0aW9uIGJ5CiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZSB0aGUgc2xhdmVzIHdobyBoYWQgYnJvdWdodCB0aGUgbW9uZXkuIFRoZXNlLCBpZiB0aGUgcGF5bWVudCBoYWQgbm90IGJlZW4KICAgICAgICAgICAgICAgICAgICBtYWRlLCB0aGV5IHdvdWxkIGhhdmUgcmVmdXNlZCB0byBnaXZlIHVwLCBhbmQgc28gdGhleSB3b3VsZCBoYXZlIGJlZW4gY29udmljdGVkCiAgICAgICAgICAgICAgICAgICAgb2YgZnJhdWQuIEJ1dCBpZiB0aGV5IG1haW50YWluZWQgdGhhdCB0aGV5IGhhZCBwYWlkIHRoZSBtb25leSB3aXRob3V0IHdpdG5lc3NlcwogICAgICAgICAgICAgICAgICAgIGluIHRoZSBtYW5uZXIgYWxsZWdlZCwgdGhleSB0aG91Z2h0IHRvIGVzY2FwZSBkZXRlY3Rpb24uIDwvdHJhbnNsYXRpb24+"
translation['30.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhpcyByZWFzb24gdGhleSB3ZXJlIGRyaXZlbiB0aHJvdWdoIHN0cmVzcyBvZiBuZWNlc3NpdHkKICAgICAgICAgICAgICAgICAgICB0byBtYWtlIHVwIHRoaXMgZmFsc2Ugc3RvcnkuIEJ5IHN1Y2ggdHJpY2tzIGFuZCBwaWVjZXMgb2YgdmlsbGFpbnksIHdoaWxlIGhvcGluZwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgdG8gcGFzcyBmb3Igc2ltcGxlIGZvbGssIHRoZXkgdGhpbmsgdGhleSB3aWxsIGVhc2lseSBkZWNlaXZlIHlvdTsKICAgICAgICAgICAgICAgICAgICB3aGVyZWFzIGluIHRoZSBzbGlnaHRlc3QgbWF0dGVyIGFmZmVjdGluZyB0aGVpciBpbnRlcmVzdCB0aGV5IGFjdGVkLCBub3Qgd2l0aAogICAgICAgICAgICAgICAgICAgIHNpbXBsaWNpdHksIGJ1dCB3aXRoIGV2ZXJ5IHBvc3NpYmxlIHByZWNhdXRpb24uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRha2Ugbm93IHRoZSBkZXBvc2l0aW9ucyBvZiB0aGUgcGVyc29ucyBpbiB3aG9zZSBwcmVzZW5jZSB0aGV5IGdhdmUgdGhlaXIKICAgICAgICAgICAgICAgICAgICBhbnN3ZXJzLCBhbmQgcmVhZCB0aGVtIHRvIHRoZSBqdXJ5LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LCBtZW4gb2YgdGhlCiAgICAgICAgICAgICAgICAgICAganVyeSwgSSBzaGFsbCBwcm92ZSB0byB5b3UgdGhhdCB0aGUgd29tYW4gbWFkZSBhIG1lcmVseSBub21pbmFsIGRpdm9yY2UsIGJ1dCB3YXMKICAgICAgICAgICAgICAgICAgICBpbiByZWFsaXR5IGxpdmluZyB3aXRoIEFwaG9idXMgYXMgaGlzIHdpZmUuIEkgdGhpbmsgdGhhdCwgaWYgeW91IGFyZSB0aG9yb3VnaGx5CiAgICAgICAgICAgICAgICAgICAgY29udmluY2VkIG9mIHRoaXMsIHlvdSB3aWxsIGJlIG1vcmUgaW5jbGluZWQgdG8gZGlzdHJ1c3QgdGhlc2UgbWVuLCBhbmQgdG8gZ2l2ZQogICAgICAgICAgICAgICAgICAgIG1lIHRoZSBhaWQgdGhhdCBpcyBteSBkdWUuIE9mIHNvbWUgb2YgdGhlIGZhY3RzIEkgc2hhbGwgcHJvZHVjZSB3aXRuZXNzZXM6CiAgICAgICAgICAgICAgICAgICAgb3RoZXJzIEkgc2hhbGwgZXN0YWJsaXNoIGJ5IHN0cm9uZyBwcmVzdW1wdGlvbnMgYW5kIGJ5IGFkZXF1YXRlIHByb29mcy4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEkgc2F3LCBtZW4gb2YgdGhlIGp1cnksIHRoYXQgYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGUgd29tYW4ncyBkaXZvcmNlIGhhZCBiZWVuIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYXJjaG9uLCBhbmQgYWZ0ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50J3MgZGVjbGFyYXRpb24gdGhhdCBoZSBoYWQgdGFrZW4gYSBtb3J0Z2FnZSBvbiB0aGUgZmFybSB0byBzZWN1cmUgaGVyCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UtcG9ydGlvbiwgQXBob2J1cyBjb250aW51ZWQgdG8gaG9sZCBhbmQgdGlsbCB0aGUgbGFuZCBqdXN0IGFzIGJlZm9yZSwKICAgICAgICAgICAgICAgICAgICBhbmQgdG8gZHdlbGwgd2l0aCBoaXMgd2lmZSwgSSBrbmV3IHdlbGwgdGhhdCBhbGwgdGhpcyB3YXMgZmljdGlvbiBhbmQgYSBwcmV0ZW5jZQogICAgICAgICAgICAgICAgICAgIHRvIGNvdmVyIHVwIHRoZSBmYWN0cy4gPC90cmFuc2xhdGlvbj4="
translation['30.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2lzaGluZyB0byBtYWtlCiAgICAgICAgICAgICAgICAgICAgdGhpcyBjbGVhciB0byB5b3UgYWxsLCBJIGRlZW1lZCBpdCByaWdodCB0byBjb252aWN0IGhpbSBpbiB0aGUgcHJlc2VuY2Ugb2YKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMsIGluIGNhc2UgaGUgc2hvdWxkIGRlbnkgdGhhdCBtYXR0ZXJzIGFyZSBhcyBJIGhhdmUgc3RhdGVkOyBhbmQgSQogICAgICAgICAgICAgICAgICAgIG9mZmVyZWQgdG8gaGltIGZvciB0b3J0dXJlIGEgc2xhdmUgd2hvIGtuZXcgd2VsbCBhbGwgdGhlIGZhY3Rz4oCUb25lCiAgICAgICAgICAgICAgICAgICAgd2hvbSBJIGhhZCB0YWtlbiBmcm9tIGFtb25nIHRob3NlIG9mIEFwaG9idXMsIHNpbmNlIGhlIGhhZCBub3QgcGFpZCB0aGUgZGFtYWdlcwogICAgICAgICAgICAgICAgICAgIHdpdGhpbiB0aGUgdGltZSBmaXhlZCBieSBsYXcuIFdoZW4gSSBtYWRlIHRoaXMgZGVtYW5kLCBPbmV0b3IgZGVjbGluZWQgdG8gcHV0CiAgICAgICAgICAgICAgICAgICAgdGhlIHNsYXZlIHRvIHRvcnR1cmUgYXMgdG8gdGhlIHF1ZXN0aW9uIG9mIGhpcyBzaXN0ZXIncyBsaXZpbmcgd2l0aCBBcGhvYnVzOwogICAgICAgICAgICAgICAgICAgIGFuZCwgYXMgdG8gQXBob2J1cydzIHRpbGxpbmcgdGhlIGxhbmQsIHRoZSBmYWN0IHdhcyB0b28gcGxhaW4gdG8gYmUgZGVuaWVkLCBzbwogICAgICAgICAgICAgICAgICAgIGhlIGNvbmZlc3NlZCBpdC4gPC90cmFuc2xhdGlvbj4="
translation['30.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3IgYXJlIHRoZXNlIHRoZSBvbmx5IHByb29mcwogICAgICAgICAgICAgICAgICAgIHdoaWNoIG1ha2UgaXQgZWFzeSB0byBzZWUgdGhhdCBBcGhvYnVzIGNvbnRpbnVlZCB0byBsaXZlIHdpdGggaGlzIHdpZmUgYW5kIHRvCiAgICAgICAgICAgICAgICAgICAgcG9zc2VzcyB0aGUgbGFuZCB1cCB0byB0aGUgdGltZSB3aGVuIHRoZSBzdWl0IHdhcyBiZWd1bjsgaXQgaXMgcGxhaW4gYWxzbyBmcm9tCiAgICAgICAgICAgICAgICAgICAgdGhlIHdheSBpbiB3aGljaCBoZSBkZWFsdCB3aXRoIHRoZSBsYW5kIGFmdGVyIGp1ZGdlbWVudCB3YXMgZ2l2ZW4gYWdhaW5zdCBoaW0uCiAgICAgICAgICAgICAgICAgICAgRm9yLCBhcyB0aG91Z2ggdGhlIHByb3BlcnR5IGhhZCBub3QgYmVlbiBtb3J0Z2FnZWQsIGJ1dCB3YXMgdG8gYmVsb25nIHRvIG1lCiAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZSBjb3VydCdzIGRlY2lzaW9uLCBoZSBtYWRlIG9mZiB3aXRoIGV2ZXJ5dGhpbmcgdGhhdCBjb3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGNhcnJpZWQgYXdheeKAlHRoZSBwcm9kdWNlLCBhbmQgYWxsIHRoZSBmYXJtIGltcGxlbWVudHMsIGV4Y2VwdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZS10YW5rcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlc2Ugd2VyZSB1bmRlcmdyb3VuZCwgYXMKICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFycyBmcm9tIHRoZSBwaHJhc2UgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DOu+G9tM69IM+E4b+2zr0g4byQzrPOs8614b23z4nOvTwvZm9yZWlnbj4KICAgICAgICAgICAgICAgICAgICAgICAgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzMC4zMCIgdmFsaWQ9InllcyI+RGVtLiAzMC4zMDwvYmlibD4uPC9ub3RlPiBXaGF0IGhlIGNvdWxkIG5vdCB0YWtlCiAgICAgICAgICAgICAgICAgICAgYXdheSBoZSBuZWNlc3NhcmlseSBsZWZ0IGJlaGluZCwgc28gdGhhdCBPbmV0b3Igd2FzIG5vdyBhdCBsaWJlcnR5IHRvIGxheSBjbGFpbQogICAgICAgICAgICAgICAgICAgIG1lcmVseSB0byB0aGUgYmFyZSBsYW5kLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PgM674b20zr0gz4Thv7bOvSDhvJDOs86zzrXhvbfPic69PC9mb3JlaWduPgogICAgICAgICAgICAgICAgICAgICAgICBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDMwLjMwIiB2YWxpZD0ieWVzIj5EZW0uIDMwLjMwPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['30.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5JdCBpcyBhbiBvdXRyYWdlLAogICAgICAgICAgICAgICAgICAgIHRob3VnaCwgdGhhdCBvbmUgb2YgdGhlbSBzaG91bGQgc2F5IHRoYXQgdGhlIGxhbmQgd2FzIG1vcnRnYWdlZCB0byBoaW0sIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vcnRnYWdvciBpcyB0byBiZSBzZWVuIGN1bHRpdmF0aW5nIGl0OyB0aGF0IGhlIHNob3VsZCBjbGFpbSB0aGF0IGhpcyBzaXN0ZXIKICAgICAgICAgICAgICAgICAgICBoYXMgbGVmdCBoZXIgaHVzYmFuZCwgd2hlbiBoZSBpcyBzaG93biB0byBoYXZlIHJlZnVzZWQgdG8gYWNjZXB0IHRoZSB0ZXN0IGJ5CiAgICAgICAgICAgICAgICAgICAgdG9ydHVyZSByZWdhcmRpbmcgdGhpcyB2ZXJ5IHBvaW50OyBhbmQgdGhhdCB0aGUgb25lIHdobyBpcyBub3QgbGl2aW5nIHdpdGggaGlzCiAgICAgICAgICAgICAgICAgICAgd2lmZSDvvIhhcyBPbmV0b3IgY2xhaW1z77yJIHNob3VsZCBjYXJyeSBvZmYgYWxsIHRoZSBwcm9kdWNlIGFuZAogICAgICAgICAgICAgICAgICAgIGltcGxlbWVudHMgZnJvbSB0aGUgZmFybSwgd2hpbGUgdGhlIG1hbiBhY3RpbmcgYXMgZ3VhcmRpYW4gZm9yIHRoZSBkaXZvcmNlZAogICAgICAgICAgICAgICAgICAgIHdvbWFuLCB0byBzZWN1cmUgd2hvc2UgcG9ydGlvbiBoZSBjbGFpbXMgdG8gaGF2ZSB0YWtlbiBhIG1vcnRnYWdlIG9uIHRoZSBsYW5kLAogICAgICAgICAgICAgICAgICAgIHBsYWlubHkgc2hvd3Mgbm8gYW5nZXIgYXQgYSBzaW5nbGUgb25lIG9mIHRoZXNlIGFjdHMsIGJ1dCB0YWtlcyBldmVyeXRoaW5nCiAgICAgICAgICAgICAgICAgICAgcXVpZXRseS4gPC90cmFuc2xhdGlvbj4="
translation['30.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5JcyB0aGUgd2hvbGUgdGhpbmcgbm90IGFic29sdXRlbHkKICAgICAgICAgICAgICAgICAgICBjbGVhcj8gSXMgaXQgbm90IGNvbmZlc3NlZGx5IGEgc2NoZW1lIHRvIHByb3RlY3QgQXBob2J1cz8gT25lIGNlcnRhaW5seSB3b3VsZCBzbwogICAgICAgICAgICAgICAgICAgIGRlY2xhcmUsIGlmIGhlIGR1bHkgY29uc2lkZXJlZCBlYWNoIG9uZSBvZiB0aGUgZmFjdHMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdywgdG8gcHJvdmUgdGhhdCB0aGUgZGVmZW5kYW50IGFja25vd2xlZGdlZCB0aGF0IEFwaG9idXMKICAgICAgICAgICAgICAgICAgICBmYXJtZWQgdGhlIGxhbmQgdXAgdG8gdGhlIHRpbWUgb2YgdGhlIGNvbW1lbmNlbWVudCBvZiBteSBhY3Rpb24gYWdhaW5zdCBoaW07CiAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSByZWZ1c2VkIHRoZSBpbnF1aXJ5IGJ5IHRvcnR1cmUgYXMgdG8gaGlzIHNpc3RlcidzIGNvbnRpbnVpbmcgdG8gbGl2ZQogICAgICAgICAgICAgICAgICAgIHdpdGggQXBob2J1czsgYW5kIHRoYXQgdGhlIGZhcm0gd2FzIHN0cmlwcGVkIGFmdGVyIHRoZSBjb3VydCdzIGRlY2lzaW9uIG9mCiAgICAgICAgICAgICAgICAgICAgZXZlcnl0aGluZyBzYXZlIHdoYXQgd2FzIGF0dGFjaGVkIHRvIHRoZSBzb2lsOyB0YWtlIHRoZXNlIGRlcG9zaXRpb25zLCBhbmQgcmVhZAogICAgICAgICAgICAgICAgICAgICAgICB0aGVtLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWx0aG91Z2ggSSBoYXZlCiAgICAgICAgICAgICAgICAgICAgc28gbWFueSBwcm9vZnMgcmVhZHkgdG8gaGFuZCBpdCBpcyBPbmV0b3IgaGltc2VsZiB3aG8gbW9zdCBjb252aW5jaW5nbHkgc2hvd2VkCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgZGl2b3JjZSB3YXMgbm90IGEgZ2VudWluZSBvbmUuIEhlLCB3aG8gc2hvdWxkIGhhdmUgZmVsdCBvdXRyYWdlZCwgd2hlbiwKICAgICAgICAgICAgICAgICAgICBhZnRlciBwYXlpbmcgdGhlIGRvd3J5LCBhcyBoZSBjbGFpbXMsIGhlIGdvdCBiYWNrLCBub3QgdGhlIG1vbmV5LCBidXQgYSBmYXJtCiAgICAgICAgICAgICAgICAgICAgd2hvc2UgdGl0bGUgd2FzIHVuZGVyIGRpc3B1dGUs4oCUdGhpcyB2ZXJ5IG1hbiwgYXMgdGhvdWdoIGhlIGhhZCBoYWQgbm8KICAgICAgICAgICAgICAgICAgICBxdWFycmVsLCBhbmQgd2VyZSBpbiBubyB3YXkgYmVpbmcgd3JvbmdlZCwgYnV0IGFzIHRob3VnaCBoZSB3ZXJlIG9uIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgaW50aW1hdGUgdGVybXMgcG9zc2libGUgd2l0aCBBcGhvYnVzLCBwbGVhZGVkIGZvciB0aGUgbGF0dGVyIGluIHRoZSBzdWl0IHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBicm91Z2h0IGFnYWluc3QgaGltISBBcyBmb3IgbXlzZWxmLCB0aG91Z2ggSSBoYWQgZG9uZSBoaW0gbm8gY29uY2VpdmFibGUgaW5qdXJ5LAogICAgICAgICAgICAgICAgICAgIGhlIGxlYWd1ZWQgd2l0aCBBcGhvYnVzLCBhbmQgc291Z2h0IGJ5IGV2ZXJ5IG1lYW5zIGluIGhpcyBwb3dlciB0byBqb2luIGluCiAgICAgICAgICAgICAgICAgICAgcm9iYmluZyBtZSBvZiBteSBwYXRyaW1vbnksIHdoaWxlIGZvciBBcGhvYnVzLCB3aG9tIGhlIHNob3VsZCBoYXZlIHJlZ2FyZGVkIGFzIGEKICAgICAgICAgICAgICAgICAgICBzdHJhbmdlciwgaWYgdGhlcmUgaXMgYW55IHRydXRoIGluIHRoZWlyIHByZXNlbnQgc3RvcnksIGhlIHNvdWdodCB0byBhY3F1aXJlCiAgICAgICAgICAgICAgICAgICAgcG9zc2Vzc2lvbiBvZiBteSBwcm9wZXJ0eSBpbiBhZGRpdGlvbiB0byB3aGF0IGhlIGFscmVhZHkgaGFkLiA8L3RyYW5zbGF0aW9uPg=="
translation['30.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Igd2FzIGl0IG9ubHkgYXQgdGhlIHRyaWFsIHRoYXQgaGUgYWN0ZWQgdGh1cywgYnV0IGFmdGVyCiAgICAgICAgICAgICAgICAgICAganVkZ2VtZW50IGhhZCBiZWVuIHJlbmRlcmVkIGFnYWluc3QgQXBob2J1cywgaGUgZ290IHVwIGJlZm9yZSB0aGUgY291cnQgYW5kCiAgICAgICAgICAgICAgICAgICAgYmVnZ2VkIHRoZSBqdXJ5bWVuLCBiZXNlZWNoaW5nIGFuZCBpbXBsb3JpbmcgdGhlbSBvbiBiZWhhbGYgb2YgQXBob2J1cyB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGVhcnMgaW4gaGlzIGV5ZXMsIHRvIGZpeCB0aGUgZGFtYWdlcyBhdCBhIHRhbGVudCwgYW5kIG9mZmVyZWQgaGltc2VsZiBhcyBzdXJldHkKICAgICAgICAgICAgICAgICAgICBmb3IgdGhpcyBhbW91bnQuIFRoZXNlIGZhY3RzIGFyZSBhZG1pdHRlZCBvbiBhbGwgaGFuZHMuIFRob3NlIHdobyB3ZXJlIHRoZW4KICAgICAgICAgICAgICAgICAgICBzZXJ2aW5nIG9uIHRoZSBqdXJ5IGluIHRoZSBjb3VydHJvb20gYW5kIG1hbnkgb2YgdGhlIGJ5c3RhbmRlcnMga25vdyB0aGVtIHdlbGwuCiAgICAgICAgICAgICAgICAgICAgTmV2ZXJ0aGVsZXNzIEkgd2lsbCBwcm9kdWNlIHdpdG5lc3Nlcy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgcmVhZCB0aGlzIGRlcG9zaXRpb24uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QmVzaWRlcyBhbGwKICAgICAgICAgICAgICAgICAgICB0aGlzLCBtZW4gb2YgdGhlIGp1cnksIHRoZXJlIGlzIHN0cm9uZyBldmlkZW5jZSBmcm9tIHdoaWNoIGl0IGlzIGVhc3kgdG8gc2VlCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgd29tYW4gaW4gcmVhbGl0eSBjb250aW51ZWQgdG8gbGl2ZSB3aXRoIEFwaG9idXMgYW5kIGV2ZW4gdXAgdG8gdGhlCiAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBkYXkgaGFzIG5vdCBzZXBhcmF0ZWQgZnJvbSBoaW0uIEluIGZhY3QsIHRoaXMgd29tYW4sIGJlZm9yZSBzaGUgY2FtZSB0bwogICAgICAgICAgICAgICAgICAgIEFwaG9idXMsIHdhcyBub3QgdW53ZWRkZWQgZm9yIG9uZSBzaW5nbGUgZGF5LCBidXQgbGVmdCBoZXIgbGl2aW5nIGh1c2JhbmQsCiAgICAgICAgICAgICAgICAgICAgVGltb2NyYXRlcywgdG8gY29tZSBhbmQgbGl2ZSB3aXRoIEFwaG9idXM7IGFuZCBub3cgZHVyaW5nIHRoZSBzcGFjZSBvZiB0aHJlZQogICAgICAgICAgICAgICAgICAgIHllYXJzIHNoZSBoYXMgbWFuaWZlc3RseSBtYXJyaWVkIG5vIG9uZSBlbHNlLiBDYW4gYW55b25lIGJlbGlldmUgdGhhdCBzaGUgdGhlbgogICAgICAgICAgICAgICAgICAgIHdlbnQgZGlyZWN0bHkgZnJvbSBodXNiYW5kIHRvIGh1c2JhbmQsIGluIG9yZGVyIHRvIGF2b2lkIGxpdmluZyBhcyBhIHdpZG93LCBidXQKICAgICAgICAgICAgICAgICAgICB0aGF0IG5vdywgc3VwcG9zaW5nIHNoZSBoYXMgcmVhbGx5IGxlZnQgaGVyIGh1c2JhbmQsIHNoZSB3b3VsZCBoYXZlIGVuZHVyZWQgdG8KICAgICAgICAgICAgICAgICAgICByZW1haW4gYSB3aWRvdyBmb3Igc28gbG9uZyB3aGVuIHNoZSBtaWdodCBoYXZlIG1hcnJpZWQgc29tZW9uZSBlbHNlLCBzZWVpbmcgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlciBicm90aGVyIHBvc3Nlc3NlZCBzbyBsYXJnZSBhIGZvcnR1bmUsIGFuZCBzaGUgaGVyc2VsZiB3YXMgc28geW91bmc/CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBpcyBubyB0cnV0aCBpbiBpdCwgbWVuIG9mIHRoZSBqdXJ5OwogICAgICAgICAgICAgICAgICAgIHlvdSBjYW5ub3QgYmVsaWV2ZSBpdC4gSXQgaXMgYSBwdXJlIGZpY3Rpb24uIE5vOyB0aGUgd29tYW4gaXMgbGl2aW5nIG9wZW5seSB3aXRoCiAgICAgICAgICAgICAgICAgICAgQXBob2J1cywgYW5kIG1ha2VzIG5vIHNlY3JldCBvZiB0aGUgbWF0dGVyLiBJIHNoYWxsIGJyaW5nIGJlZm9yZSB5b3UgdGhlCiAgICAgICAgICAgICAgICAgICAgZXZpZGVuY2Ugb2YgUGFzaXBob24sIHdobyBjYXJlZCBmb3IgaGVyIHdoZW4gc2hlIHdhcyBpbGwsIGFuZCB3aG8gc2F3IEFwaG9idXMKICAgICAgICAgICAgICAgICAgICBzaXR0aW5nIGJ5IGhlciBzaWRlIGluIHRoaXMgdmVyeSB5ZWFyLCB3aGVuIG15IHN1aXQgYWdhaW5zdCB0aGUgZGVmZW5kYW50IGhhZAogICAgICAgICAgICAgICAgICAgIGFscmVhZHkgYmVlbiBpbnN0aXR1dGVkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlIFBhc2lwaG9uJ3MKICAgICAgICAgICAgICAgICAgICAgICAgZGVwb3NpdGlvbi48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBrbmV3LCBtZW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGUganVyeSwgdGhhdCB0aGUgZGVmZW5kYW50LCBpbW1lZGlhdGVseSBvbiB0aGUgY29uY2x1c2lvbiBvZiB0aGUgc3VpdCwgaGFkCiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgdGhlIGdvb2RzIGZyb20gdGhlIGhvdXNlIG9mIEFwaG9idXMsIGFuZCBoYWQgY29tZSBpbnRvIGNvbnRyb2wgb2YgaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgYW5kIGFsbCBteSBlc3RhdGUgYXMgd2VsbCwgYW5kIEkga25ldywgZnVydGhlciwgdGhhdCBiZXlvbmQgYWxsIGRvdWJ0CiAgICAgICAgICAgICAgICAgICAgdGhlIHdvbWFuIHdhcyBsaXZpbmcgd2l0aCBBcGhvYnVzLiBJIHRoZXJlZm9yZSBkZW1hbmRlZCBvZiBPbmV0b3IgdGhyZWUgZmVtYWxlCiAgICAgICAgICAgICAgICAgICAgc2xhdmVzLCB3aG8ga25ldyB0aGF0IHRoZSB3b21hbiB3YXMgbGl2aW5nIHdpdGggQXBob2J1cyBhbmQgdGhhdCB0aGUgZWZmZWN0cwogICAgICAgICAgICAgICAgICAgIHdlcmUgaW4gdGhlIGhhbmRzIG9mIHRoZXNlIG1lbiwgaW4gb3JkZXIgdGhhdCB3ZSBtaWdodCBub3QgaGF2ZSBtZXJlIHN0YXRlbWVudHMKICAgICAgICAgICAgICAgICAgICBidXQgdGhhdCB0aGUgbWF0dGVycyBtaWdodCBiZSBlc3RhYmxpc2hlZCBieSBwcm9vZiBmcm9tIHRoZSB0b3J0dXJlLiA8L3RyYW5zbGF0aW9uPg=="
translation['30.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgT25ldG9yLCB3aGVuIEkgbWFkZSB0aGlzIGNoYWxsZW5nZSB0byBoaW0sIGFuZAogICAgICAgICAgICAgICAgICAgIGFsbCB0aG9zZSBwcmVzZW50IGRlY2xhcmVkIHRoYXQgbXkgcHJvcG9zYWwgd2FzIGp1c3QsIHJlZnVzZWQgdG8gaGF2ZSByZWNvdXJzZQogICAgICAgICAgICAgICAgICAgIHRvIHRoaXMgY2VydGFpbiB0ZXN0LCBidXQsIGFzIHRob3VnaCB0aGVyZSB3ZXJlIG90aGVyIGFuZCBzdXJlciBwcm9vZnMgcmVnYXJkaW5nCiAgICAgICAgICAgICAgICAgICAgc3VjaCBtYXR0ZXJzIHRoYW4gdG9ydHVyZSBhbmQgdGVzdGltb255LCBoZSBwcm9kdWNlZCBubyB3aXRuZXNzZXMgdG8gcHJvdmUgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGhhZCBwYWlkIHRoZSBkb3dyeSwgbm9yIHdvdWxkIGhlIGdpdmUgdXAgZm9yIHRvcnR1cmUgdGhlIGZlbWFsZSBzbGF2ZXMgd2hvCiAgICAgICAgICAgICAgICAgICAga25ldyB0aGUgZmFjdCwgdG8gcHJvdmUgdGhhdCBoaXMgc2lzdGVyIHdhcyBub3QgbGl2aW5nIHdpdGggQXBob2J1czsgYW5kLAogICAgICAgICAgICAgICAgICAgIGJlY2F1c2UgSSBtYWRlIHRoaXMgZGVtYW5kIG9mIGhpbSwgaGUgaW4gYW4gb3V0cmFnZW91cyBhbmQgaW5zdWx0aW5nIG1hbm5lcgogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgdG8gbGV0IG1lIHRhbGsgdG8gaGltLiBDb3VsZCB0aGVyZSBiZSBhIG1hbiBtb3JlIGltcG9zc2libGUgdG8gZGVhbCB3aXRoCiAgICAgICAgICAgICAgICAgICAgdGhhbiBoZSwgb3IgbW9yZSByZWFkeSB0byBwcmV0ZW5kIGlnbm9yYW5jZSBvZiB3aGF0IGlzIHJpZ2h0PyBUYWtlIHRoZSBjaGFsbGVuZ2UKICAgICAgICAgICAgICAgICAgICBpdHNlbGYgYW5kIHJlYWQgaXQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ2hhbGxlbmdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IG9uIHlvdXIKICAgICAgICAgICAgICAgICAgICBwYXJ0IGhvbGQgdGhhdCBpbiBib3RoIHByaXZhdGUgYW5kIHB1YmxpYyBtYXR0ZXJzIHRoZSB0b3J0dXJlIGlzIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY2VydGFpbiBvZiBhbGwgbWV0aG9kcyBvZiBwcm9vZiwgYW5kIHdoZW4gc2xhdmVzIGFuZCBmcmVlbWVuIGFyZSBib3RoIGF2YWlsYWJsZSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHRydXRoIG9mIGEgbWF0dGVyIGlzIHRvIGJlIHNvdWdodCBvdXQsIHlvdSBtYWtlIG5vIHVzZSBvZiB0aGUgdGVzdGltb255CiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGZyZWVtZW4sIGJ1dCBzZWVrIHRvIGFzY2VydGFpbiB0aGUgdHJ1dGggYnkgdG9ydHVyaW5nIHRoZSBzbGF2ZXM7IGFuZAogICAgICAgICAgICAgICAgICAgIHZlcnkgcHJvcGVybHksIG1lbiBvZiB0aGUganVyeS4gRm9yIG9mIHdpdG5lc3NlcyB3aG8gaGF2ZSBnaXZlbiB0ZXN0aW1vbnkgdGhlcmUKICAgICAgICAgICAgICAgICAgICBoYXZlIGJlZW4gc29tZSBlcmUgbm93IHdobyBoYXZlIGJlZW4gdGhvdWdodCBub3QgdG8gdGVsbCB0aGUgdHJ1dGg7IGJ1dCBvZgogICAgICAgICAgICAgICAgICAgIHNsYXZlcyBwdXQgdG8gdGhlIHRvcnR1cmUgbm8gb25lIGhhcyBldmVyIGJlZW4gY29udmljdGVkIG9mIGdpdmluZyBmYWxzZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueS4gPC90cmFuc2xhdGlvbj4="
translation['30.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5ZZXQgT25ldG9yLCBhZnRlciByZWZ1c2luZyBhIHRlc3QKICAgICAgICAgICAgICAgICAgICBzbyBmYWlyLCBhbmQgcmVqZWN0aW5nIHByb29mcyBzbyBjbGVhciBhbmQgc28gY29udmluY2luZywgd2lsbCBwcm9kdWNlIEFwaG9idXMKICAgICAgICAgICAgICAgICAgICBhbmQgVGltb2NyYXRlcyBhcyB3aXRuZXNzZXMsIHRoZSBvbmUgdGhhdCBoZSBoYXMgcGFpZCB0aGUgZG93cnksIGFuZCB0aGUgb3RoZXIKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhcyByZWNlaXZlZCBpdCwgYW5kIHdpbGwgZGVtYW5kIHRoYXQgeW91IGJlbGlldmUgaGltLCB3aGVuIGhlIHByZXRlbmRzCiAgICAgICAgICAgICAgICAgICAgdGhhdCBoaXMgdHJhbnNhY3Rpb25zIHdpdGggdGhlbSB3ZXJlIHdpdGhvdXQgd2l0bmVzc2VzLiBGb3Igc3VjaCBzaW1wbGV0b25zIGRvZXMKICAgICAgICAgICAgICAgICAgICBoZSB0YWtlIHlvdS4gPC90cmFuc2xhdGlvbj4="
