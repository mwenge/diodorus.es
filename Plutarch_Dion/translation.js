var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3ZSBuZWVkIG5vdCB3b25kZXIgdGhhdCwgaW4gdGhlIHBlcmZvcm1hbmNlIG9mIGFjdGlvbnMgdGhhdCB3ZXJlIG9mdGVuIGtpbmRyZWQgYW5kIGFsaWtlLCB0aGV5IGJvcmUgd2l0bmVzcyB0byB0aGUgZG9jdHJpbmUgb2YgdGhlaXIgdGVhY2hlciBpbiB2aXJ0dWUsIHRoYXQgd2lzZG9tIGFuZCBqdXN0aWNlIG11c3QgYmUgdW5pdGVkIHdpdGggcG93ZXIgYW5kIGdvb2QgZm9ydHVuZSBpZiBwdWJsaWMgY2FyZWVycyBhcmUgdG8gdGFrZSBvbiBiZWF1dHkgYXMgd2VsbCBhcyBncmFuZGV1ci4gRm9yIGFzIEhpcHBvbWFjaHVzIHRoZSB0cmFpbmVyIHVzZWQgdG8gZGVjbGFyZSB0aGF0IGhlIGNvdWxkIHJlY29nbml6ZSBoaXMgcHVwaWxzIGZyb20gYWZhciBldmVuIHRob3VnaCB0aGV5IHdlcmUgYnV0IGNhcnJ5aW5nIG1lYXQgZnJvbSB0aGUgbWFya2V0LXBsYWNlLCBzbyBpdCBpcyBuYXR1cmFsIHRoYXQgdGhlIHByaW5jaXBsZXMgb2YgdGhvc2Ugd2hvIGhhdmUgYmVlbiB0cmFpbmVkIGFsaWtlIHNob3VsZCBwZXJtZWF0ZSB0aGVpciBhY3Rpb25zOyBpbmR1Y2luZyBpbiB0aGVzZSBhIHNpbWlsYXIgcmh5dGhtIGFuZCBoYXJtb255IGFsb25nIHdpdGggdGhlaXIgcHJvcHJpZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgZm9ydHVuZXMgb2YgdGhlIHR3byBtZW4sIHdoaWNoIHdlcmUgdGhlIHNhbWUgaW4gd2hhdCBiZWZlbGwgdGhlbSByYXRoZXIgdGhhbiBpbiB3aGF0IHRoZXkgZWxlY3RlZCB0byBkbywgbWFrZSB0aGVpciBsaXZlcyBhbGlrZS4gRm9yIGJvdGggd2VyZSBjdXQgb2ZmIHVudGltZWx5LCB3aXRob3V0IGJlaW5nIGFibGUgdG8gYWNoaWV2ZSB0aGUgb2JqZWN0cyB0byB3aGljaCB0aGV5IGhhZCBkZXRlcm1pbmVkIHRvIGRldm90ZSB0aGUgZnJ1aXRzIG9mIHRoZWlyIG1hbnkgYW5kIGdyZWF0IHN0cnVnZ2xlcy4gQnV0IHRoZSBtb3N0IHdvbmRlcmZ1bCB0aGluZyBvZiBhbGwgd2FzIHRoYXQgSGVhdmVuIGdhdmUgdG8gYm90aCBhbiBpbnRpbWF0aW9uIG9mIHRoZWlyIGFwcHJvYWNoaW5nIGRlYXRoLCBieSB0aGUgdmlzaWJsZSBhcHBlYXJhbmNlIHRvIGVhY2ggYWxpa2Ugb2YgYW4gaWxsLWJvZGluZyBzcGVjdHJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHRoZXJlIGFyZSB0aG9zZSB3aG8gZGVueSBzdWNoIHRoaW5ncyBhbmQgc2F5IHRoYXQgbm8gbWFuIGluIGhpcyByaWdodCBtaW5kIHdhcyBldmVyIHZpc2l0ZWQgYnkgYSBzcGVjdHJlIG9yIGFuIGFwcGFyaXRpb24gZnJvbSBIZWF2ZW4sIGJ1dCB0aGF0IGxpdHRsZSBjaGlsZHJlbiBhbmQgZm9vbGlzaCB3b21lbiBhbmQgbWVuIGRlcmFuZ2VkIGJ5IHNpY2tuZXNzLCBpbiBzb21lIGFiZXJyYXRpb24gb2Ygc3Bpcml0IG9yIGRpc3RlbXBlciBvZiBib2R5LCBoYXZlIGluZHVsZ2VkIGluIGVtcHR5IGFuZCBzdHJhbmdlIGltYWdpbmluZ3MsIGJlY2F1c2UgdGhleSBoYWQgdGhlIGV2aWwgZ2VuaXVzIG9mIHN1cGVyc3RpdGlvbiBpbiB0aGVtc2VsdmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgRGlvbiBhbmQgQnJ1dHVzLCBtZW4gb2Ygc29saWQgdW5kZXJzdGFuZGluZyBhbmQgcGhpbG9zb3BoaWMgdHJhaW5pbmcgYW5kIG5vdCBlYXNpbHkgY2FzdCBkb3duIG9yIG92ZXJwb3dlcmVkIGJ5IGFueXRoaW5nIHRoYXQgaGFwcGVuZWQgdG8gdGhlbSwgd2VyZSBzbyBhZmZlY3RlZCBieSBhIHNwZWN0cmUgdGhhdCB0aGV5IGFjdHVhbGx5IHRvbGQgb3RoZXJzIGFib3V0IGl0LCBJIGRvIG5vdCBrbm93IGJ1dCB3ZSBzaGFsbCBiZSBjb21wZWxsZWQgdG8gYWNjZXB0IHRoYXQgbW9zdCBleHRyYW9yZGluYXJ5IGRvY3RyaW5lIG9mIHRoZSBvbGRlc3QgdGltZXMsIHRoYXQgbWVhbiBhbmQgbWFsaWduYW50IHNwaXJpdHMsIGluIGVudnkgb2YgZ29vZCBtZW4gYW5kIG9wcG9zaXRpb24gdG8gdGhlaXIgbm9ibGUgZGVlZHMsIHRyeSB0byBjb25mb3VuZCBhbmQgdGVycmlmeSB0aGVtLCBjYXVzaW5nIHRoZWlyIHZpcnR1ZSB0byByb2NrIGFuZCB0b3R0ZXIsIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmluIG9yZGVyIHRoYXQgdGhleSBtYXkgbm90IGNvbnRpbnVlIGVyZWN0IGFuZCBpbnZpb2xhdGUgaW4gdGhlIHBhdGggb2YgaG9ub3VyIGFuZCBzbyBhdHRhaW4gYSBiZXR0ZXIgcG9ydGlvbiBhZnRlciBkZWF0aCB0aGFuIHRoZSBzcGlyaXRzIHRoZW1zZWx2ZXMuIEJ1dCB0aGlzIHN1YmplY3QgbXVzdCBiZSByZXNlcnZlZCBmb3IgZGlzY3Vzc2lvbiBlbHNld2hlcmUsIGFuZCBpbiB0aGlzLCB0aGUgdHdlbGZ0aCBib29rPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIDx0aXRsZT5QZXJpY2xlczwvdGl0bGU+IHdhcyBwYXJ0IG9mIHRoZSB0ZW50aCAiYm9vayIgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZXIuIDIuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gMzwvYmlibD4pLCB0aGUgRGVtb3N0aGVuZXMgcGFydCBvZiB0aGUgZmlmdGggKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEZW0uIDMuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaWkuIDE8L2JpYmw+KS4gVGhlIG9yZGluYXJ5IGFycmFuZ2VtZW50IG9mIHRoZSA8dGl0bGU+TGl2ZXM8L3RpdGxlPiBwdXJlbHkgYXJiaXRyYXJ5Ljwvbm90ZT4gb2YgbXkgUGFyYWxsZWwgTGl2ZXMsIEkgc2hhbGwgYmVnaW4gd2l0aCB0aGF0IG9mIHRoZSBlbGRlciBtYW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhlIGZvcnR1bmVzIG9mIHRoZSB0d28gbWVuLCB3aGljaCB3ZXJlIHRoZSBzYW1lIGluIHdoYXQgYmVmZWxsIHRoZW0gcmF0aGVyIHRoYW4gaW4gd2hhdCB0aGV5IGVsZWN0ZWQgdG8gZG8sIG1ha2UgdGhlaXIgbGl2ZXMgYWxpa2UuIEZvciBib3RoIHdlcmUgY3V0IG9mZiB1bnRpbWVseSwgd2l0aG91dCBiZWluZyBhYmxlIHRvIGFjaGlldmUgdGhlIG9iamVjdHMgdG8gd2hpY2ggdGhleSBoYWQgZGV0ZXJtaW5lZCB0byBkZXZvdGUgdGhlIGZydWl0cyBvZiB0aGVpciBtYW55IGFuZCBncmVhdCBzdHJ1Z2dsZXMuIEJ1dCB0aGUgbW9zdCB3b25kZXJmdWwgdGhpbmcgb2YgYWxsIHdhcyB0aGF0IEhlYXZlbiBnYXZlIHRvIGJvdGggYW4gaW50aW1hdGlvbiBvZiB0aGVpciBhcHByb2FjaGluZyBkZWF0aCwgYnkgdGhlIHZpc2libGUgYXBwZWFyYW5jZSB0byBlYWNoIGFsaWtlIG9mIGFuIGlsbC1ib2Rpbmcgc3BlY3RyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlcmUgYXJlIHRob3NlIHdobyBkZW55IHN1Y2ggdGhpbmdzIGFuZCBzYXkgdGhhdCBubyBtYW4gaW4gaGlzIHJpZ2h0IG1pbmQgd2FzIGV2ZXIgdmlzaXRlZCBieSBhIHNwZWN0cmUgb3IgYW4gYXBwYXJpdGlvbiBmcm9tIEhlYXZlbiwgYnV0IHRoYXQgbGl0dGxlIGNoaWxkcmVuIGFuZCBmb29saXNoIHdvbWVuIGFuZCBtZW4gZGVyYW5nZWQgYnkgc2lja25lc3MsIGluIHNvbWUgYWJlcnJhdGlvbiBvZiBzcGlyaXQgb3IgZGlzdGVtcGVyIG9mIGJvZHksIGhhdmUgaW5kdWxnZWQgaW4gZW1wdHkgYW5kIHN0cmFuZ2UgaW1hZ2luaW5ncywgYmVjYXVzZSB0aGV5IGhhZCB0aGUgZXZpbCBnZW5pdXMgb2Ygc3VwZXJzdGl0aW9uIGluIHRoZW1zZWx2ZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpZiBEaW9uIGFuZCBCcnV0dXMsIG1lbiBvZiBzb2xpZCB1bmRlcnN0YW5kaW5nIGFuZCBwaGlsb3NvcGhpYyB0cmFpbmluZyBhbmQgbm90IGVhc2lseSBjYXN0IGRvd24gb3Igb3ZlcnBvd2VyZWQgYnkgYW55dGhpbmcgdGhhdCBoYXBwZW5lZCB0byB0aGVtLCB3ZXJlIHNvIGFmZmVjdGVkIGJ5IGEgc3BlY3RyZSB0aGF0IHRoZXkgYWN0dWFsbHkgdG9sZCBvdGhlcnMgYWJvdXQgaXQsIEkgZG8gbm90IGtub3cgYnV0IHdlIHNoYWxsIGJlIGNvbXBlbGxlZCB0byBhY2NlcHQgdGhhdCBtb3N0IGV4dHJhb3JkaW5hcnkgZG9jdHJpbmUgb2YgdGhlIG9sZGVzdCB0aW1lcywgdGhhdCBtZWFuIGFuZCBtYWxpZ25hbnQgc3Bpcml0cywgaW4gZW52eSBvZiBnb29kIG1lbiBhbmQgb3Bwb3NpdGlvbiB0byB0aGVpciBub2JsZSBkZWVkcywgdHJ5IHRvIGNvbmZvdW5kIGFuZCB0ZXJyaWZ5IHRoZW0sIGNhdXNpbmcgdGhlaXIgdmlydHVlIHRvIHJvY2sgYW5kIHRvdHRlciwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmluIG9yZGVyIHRoYXQgdGhleSBtYXkgbm90IGNvbnRpbnVlIGVyZWN0IGFuZCBpbnZpb2xhdGUgaW4gdGhlIHBhdGggb2YgaG9ub3VyIGFuZCBzbyBhdHRhaW4gYSBiZXR0ZXIgcG9ydGlvbiBhZnRlciBkZWF0aCB0aGFuIHRoZSBzcGlyaXRzIHRoZW1zZWx2ZXMuIEJ1dCB0aGlzIHN1YmplY3QgbXVzdCBiZSByZXNlcnZlZCBmb3IgZGlzY3Vzc2lvbiBlbHNld2hlcmUsIGFuZCBpbiB0aGlzLCB0aGUgdHdlbGZ0aCBib29rPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UGVyaWNsZXM8L3RpdGxlPiB3YXMgcGFydCBvZiB0aGUgdGVudGggImJvb2siICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQZXIuIDIuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gMzwvYmlibD4pLCB0aGUgRGVtb3N0aGVuZXMgcGFydCBvZiB0aGUgZmlmdGggKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERlbS4gMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gMTwvYmlibD4pLiBUaGUgb3JkaW5hcnkgYXJyYW5nZW1lbnQgb2YgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxpdmVzPC90aXRsZT4gcHVyZWx5IGFyYml0cmFyeS48L25vdGU+IG9mIG15IFBhcmFsbGVsIExpdmVzLCBJIHNoYWxsIGJlZ2luIHdpdGggdGhhdCBvZiB0aGUgZWxkZXIgbWFuLgoJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QZXJpY2xlczwvdGl0bGU+IHdhcyBwYXJ0IG9mIHRoZSB0ZW50aCAiYm9vayIgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gMi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpLiAzPC9iaWJsPiksIHRoZSBEZW1vc3RoZW5lcyBwYXJ0IG9mIHRoZSBmaWZ0aCAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGVtLiAzLjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAxPC9iaWJsPikuIFRoZSBvcmRpbmFyeSBhcnJhbmdlbWVudCBvZiB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGl2ZXM8L3RpdGxlPiBwdXJlbHkgYXJiaXRyYXJ5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RGlvbnlzaXVzIHRoZSBFbGRlciwgYWZ0ZXIgYXNzdW1pbmcgdGhlIHJlaW5zIG9mIGdvdmVybm1lbnQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNDA1IEIuQy48L25vdGU+IGF0IG9uY2UgbWFycmllZCB0aGUgZGF1Z2h0ZXIgb2YgSGVybW9jcmF0ZXMgdGhlIFN5cmFjdXNhbi4gQnV0IHNoZSwgc2luY2UgdGhlIHR5cmFubnkgd2FzIG5vdCB5ZXQgc2VjdXJlbHkgZXN0YWJsaXNoZWQsIHdhcyB0ZXJyaWJseSBhbmQgb3V0cmFnZW91c2x5IGFidXNlZCBpbiBoZXIgcGVyc29uIGJ5IHRoZSBzZWRpdGlvdXMgU3lyYWN1c2FucywgYW5kIGluIGNvbnNlcXVlbmNlIHB1dCBhbiBlbmQgdG8gaGVyIG93biBsaWZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIERpb255c2l1cywgYWZ0ZXIgcmVzdW1pbmcgdGhlIHBvd2VyIGFuZCBtYWtpbmcgaGltc2VsZiBzdHJvbmcgYWdhaW4sIG1hcnJpZWQgdHdvIHdpdmVzIGF0IG9uY2UsIG9uZSBmcm9tIExvY3JpLCB3aG9zZSBuYW1lIHdhcyBEb3JpcywgdGhlIG90aGVyIGEgbmF0aXZlIG9mIHRoZSBjaXR5LCBBcmlzdG9tYWNoZSwgZGF1Z2h0ZXIgb2YgSGlwcGFyaW51cywgd2hvIHdhcyBhIGxlYWRpbmcgbWFuIGluIFN5cmFjdXNlLCBhbmQgaGFkIGJlZW4gYSBjb2xsZWFndWUgb2YgRGlvbnlzaXVzIHdoZW4gaGUgd2FzIGZpcnN0IGNob3NlbiBnZW5lcmFsIHdpdGggZnVsbCBwb3dlcnMgZm9yIHRoZSB3YXIuIEl0IGlzIHNhaWQgdGhhdCBoZSBtYXJyaWVkIGJvdGggd2l2ZXMgb24gb25lIGRheSwgYW5kIHRoYXQgbm8gbWFuIGV2ZXIga25ldyB3aXRoIHdoaWNoIG9mIHRoZSB0d28gaGUgZmlyc3QgY29uc29ydGVkLCBidXQgdGhhdCBldmVyIGFmdGVyIGhlIGNvbnRpbnVlZCB0byBkZXZvdGUgaGltc2VsZiBhbGlrZSB0byBlYWNoOyBpdCB3YXMgdGhlaXIgY3VzdG9tIHRvIHN1cCB3aXRoIGhpbSB0b2dldGhlciwgYW5kIHRoZXkgc2hhcmVkIGhpcyBiZWQgYXQgbmlnaHQgYnkgdHVybnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIHBlb3BsZSBvZiBTeXJhY3VzZSB3aXNoZWQgdGhhdCB0aGVpciBjb3VudHJ5d29tYW4gc2hvdWxkIGJlIGhvbm91cmVkIGFib3ZlIHRoZSBzdHJhbmdlcjsgYnV0IERvcmlzIGhhZCB0aGUgZ29vZCBmb3J0dW5lIHRvIGJlY29tZSBhIG1vdGhlciBmaXJzdCwgYW5kIGJ5IHByZXNlbnRpbmcgRGlvbnlzaXVzIHdpdGggaGlzIGVsZGVzdCBzb24gc2hlIGF0b25lZCBmb3IgaGVyIGZvcmVpZ24gYmlydGguIEFyaXN0b21hY2hlLCBvbiB0aGUgY29udHJhcnksIHdhcyBmb3IgYSBsb25nIHRpbWUgYSBiYXJyZW4gd2lmZSwgYWx0aG91Z2ggRGlvbnlzaXVzIHdhcyBkZXNpcm91cyB0byBoYXZlIGNoaWxkcmVuIGJ5IGhlcjsgYXQgYW55IHJhdGUsIGhlIGFjY3VzZWQgdGhlIG1vdGhlciBvZiBoaXMgTG9jcmlhbiB3aWZlIG9mIGdpdmluZyBBcmlzdG9tYWNoZSBkcnVncyB0byBwcmV2ZW50IGNvbmNlcHRpb24sIGFuZCBwdXQgaGVyIHRvIGRlYXRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5EaW9ueXNpdXMgdGhlIEVsZGVyLCBhZnRlciBhc3N1bWluZyB0aGUgcmVpbnMgb2YgZ292ZXJubWVudCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDQwNSBCLkMuPC9ub3RlPiBhdCBvbmNlIG1hcnJpZWQgdGhlIGRhdWdodGVyIG9mIEhlcm1vY3JhdGVzIHRoZSBTeXJhY3VzYW4uIEJ1dCBzaGUsIHNpbmNlIHRoZSB0eXJhbm55IHdhcyBub3QgeWV0IHNlY3VyZWx5IGVzdGFibGlzaGVkLCB3YXMgdGVycmlibHkgYW5kIG91dHJhZ2VvdXNseSBhYnVzZWQgaW4gaGVyIHBlcnNvbiBieSB0aGUgc2VkaXRpb3VzIFN5cmFjdXNhbnMsIGFuZCBpbiBjb25zZXF1ZW5jZSBwdXQgYW4gZW5kIHRvIGhlciBvd24gbGlmZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gRGlvbnlzaXVzLCBhZnRlciByZXN1bWluZyB0aGUgcG93ZXIgYW5kIG1ha2luZyBoaW1zZWxmIHN0cm9uZyBhZ2FpbiwgbWFycmllZCB0d28gd2l2ZXMgYXQgb25jZSwgb25lIGZyb20gTG9jcmksIHdob3NlIG5hbWUgd2FzIERvcmlzLCB0aGUgb3RoZXIgYSBuYXRpdmUgb2YgdGhlIGNpdHksIEFyaXN0b21hY2hlLCBkYXVnaHRlciBvZiBIaXBwYXJpbnVzLCB3aG8gd2FzIGEgbGVhZGluZyBtYW4gaW4gU3lyYWN1c2UsIGFuZCBoYWQgYmVlbiBhIGNvbGxlYWd1ZSBvZiBEaW9ueXNpdXMgd2hlbiBoZSB3YXMgZmlyc3QgY2hvc2VuIGdlbmVyYWwgd2l0aCBmdWxsIHBvd2VycyBmb3IgdGhlIHdhci4gSXQgaXMgc2FpZCB0aGF0IGhlIG1hcnJpZWQgYm90aCB3aXZlcyBvbiBvbmUgZGF5LCBhbmQgdGhhdCBubyBtYW4gZXZlciBrbmV3IHdpdGggd2hpY2ggb2YgdGhlIHR3byBoZSBmaXJzdCBjb25zb3J0ZWQsIGJ1dCB0aGF0IGV2ZXIgYWZ0ZXIgaGUgY29udGludWVkIHRvIGRldm90ZSBoaW1zZWxmIGFsaWtlIHRvIGVhY2g7IGl0IHdhcyB0aGVpciBjdXN0b20gdG8gc3VwIHdpdGggaGltIHRvZ2V0aGVyLCBhbmQgdGhleSBzaGFyZWQgaGlzIGJlZCBhdCBuaWdodCBieSB0dXJucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIHBlb3BsZSBvZiBTeXJhY3VzZSB3aXNoZWQgdGhhdCB0aGVpciBjb3VudHJ5d29tYW4gc2hvdWxkIGJlIGhvbm91cmVkIGFib3ZlIHRoZSBzdHJhbmdlcjsgYnV0IERvcmlzIGhhZCB0aGUgZ29vZCBmb3J0dW5lIHRvIGJlY29tZSBhIG1vdGhlciBmaXJzdCwgYW5kIGJ5IHByZXNlbnRpbmcgRGlvbnlzaXVzIHdpdGggaGlzIGVsZGVzdCBzb24gc2hlIGF0b25lZCBmb3IgaGVyIGZvcmVpZ24gYmlydGguIEFyaXN0b21hY2hlLCBvbiB0aGUgY29udHJhcnksIHdhcyBmb3IgYSBsb25nIHRpbWUgYSBiYXJyZW4gd2lmZSwgYWx0aG91Z2ggRGlvbnlzaXVzIHdhcyBkZXNpcm91cyB0byBoYXZlIGNoaWxkcmVuIGJ5IGhlcjsgYXQgYW55IHJhdGUsIGhlIGFjY3VzZWQgdGhlIG1vdGhlciBvZiBoaXMgTG9jcmlhbiB3aWZlIG9mIGdpdmluZyBBcmlzdG9tYWNoZSBkcnVncyB0byBwcmV2ZW50IGNvbmNlcHRpb24sIGFuZCBwdXQgaGVyIHRvIGRlYXRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgRGlvbiB3YXMgYSBicm90aGVyIG9mIEFyaXN0b21hY2hlLCBhbmQgYXQgZmlyc3Qgd2FzIGhvbm91cmVkIGJlY2F1c2Ugb2YgaGlzIHNpc3RlcjsgYWZ0ZXJ3YXJkcywgaG93ZXZlciwgaGUgZ2F2ZSBwcm9vZiBvZiBoaXMgd2lzZG9tLCBhbmQgd2FzIHByZXNlbnRseSBiZWxvdmVkIGJ5IHRoZSB0eXJhbnQgZm9yIGhpcyBvd24gc2FrZS4gSW4gYWRkaXRpb24gdG8gYWxsIGhpcyBvdGhlciBmYXZvdXJzLCBEaW9ueXNpdXMgb3JkZXJlZCBoaXMgdHJlYXN1cmVycyB0byBnaXZlIERpb24gd2hhdGV2ZXIgaGUgYXNrZWQsIGFsdGhvdWdoIHRoZXkgd2VyZSB0byB0ZWxsIERpb255c2l1cyBvbiB0aGUgc2FtZSBkYXkgd2hhdCB0aGV5IGhhZCBnaXZlbi4gQnV0IHRob3VnaCBEaW9uIHdhcyBldmVuIGJlZm9yZSBvZiBhIGxvZnR5IGNoYXJhY3RlciwgbWFnbmFuaW1vdXMsIGFuZCBtYW5seSwgaGUgYWR2YW5jZWQgc3RpbGwgbW9yZSBpbiB0aGVzZSBoaWdoIHF1YWxpdGllcyB3aGVuLCBieSBzb21lIGRpdmluZSBnb29kIGZvcnR1bmUsIFBsYXRvIGNhbWUgdG8gU2ljaWx5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDM4OCBCLkMuLCBpZiB0aGlzIGZpcnN0IHZpc2l0IGlzIG5vdCBhIG15dGguPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIG5vdCBvZiBtYW4ncyBkZXZpc2luZywgYnV0IHNvbWUgaGVhdmVubHkgcG93ZXIsIGFzIGl0IHdvdWxkIHNlZW0sIGxheWluZyBmYXIgaW4gYWR2YW5jZSBvZiB0aGUgdGltZSBhIGZvdW5kYXRpb24gZm9yIHRoZSBsaWJlcnR5IG9mIFN5cmFjdXNlLCBhbmQgZGV2aXNpbmcgYSBzdWJ2ZXJzaW9uIG9mIHR5cmFubnksIGJyb3VnaHQgUGxhdG8gZnJvbSBJdGFseSB0byBTeXJhY3VzZSBhbmQgbWFkZSBEaW9uIGhpcyBkaXNjaXBsZS4gRGlvbiB3YXMgdGhlbiBxdWl0ZSB5b3VuZywgYnV0IG9mIGFsbCB0aGUgY29tcGFuaW9ucyBvZiBQbGF0byBoZSB3YXMgYnkgZmFyIHRoZSBxdWlja2VzdCB0byBsZWFybiBhbmQgdGhlIHJlYWRpZXN0IHRvIGFuc3dlciB0aGUgY2FsbCBvZiB2aXJ0dWUsIGFzIFBsYXRvIGhpbXNlbGYgaGFzIHdyaXR0ZW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA3LjMyNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5FcGlzdC48L3RpdGxlPiB2aWkuIHAuIDMyNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGFzIGV2ZW50cyB0ZXN0aWZ5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhvdWdoIGhlIGhhZCBiZWVuIHJlYXJlZCBpbiBoYWJpdHMgb2Ygc3VibWlzc2lvbiB1bmRlciBhIHR5cmFudCwgYW5kIHRob3VnaCBoZSB3YXMgZnVsbHkgYWNjdXN0b21lZCB0byBhIGxpZmUgdGhhdCB3YXMgc3Vic2VydmllbnQgYW5kIHRpbW9yb3VzLCBhcyB3ZWxsIGFzIHRvIG9zdGVudGF0aW91cyBzZXJ2aWNlIGF0IGNvdXJ0IGFuZCB2dWxnYXIgbHV4dXJ5IGFuZCBhIHJlZ2ltZW4gdGhhdCBjb3VudHMgcGxlYXN1cmVzIGFuZCBleGNlc3NlcyBhcyB0aGUgaGlnaGVzdCBnb29kLCBuZXZlcnRoZWxlc3MsIGFzIHNvb24gYXMgaGUgZ290IGEgdGFzdGUgb2YgYSByYXRpb25hbCBwaGlsb3NvcGh5IHdoaWNoIGxlZCB0aGUgd2F5IHRvIHZpcnR1ZSwgaGlzIHNvdWwgd2FzIHNwZWVkaWx5IG9uIGZpcmU7IGFuZCBzaW5jZSBoZSB2ZXJ5IGFydGxlc3NseSBhbmQgaW1wdWxzaXZlbHkgZXhwZWN0ZWQsIGZyb20gaGlzIG93biByZWFkeSBvYmVkaWVuY2UgdG8gdGhlIGNhbGwgb2YgaGlnaGVyIHRoaW5ncywgdGhhdCB0aGUgc2FtZSBhcmd1bWVudHMgd291bGQgaGF2ZSBhIGxpa2UgcGVyc3Vhc2l2ZSBmb3JjZSB3aXRoIERpb255c2l1cywgaGUgZWFybmVzdGx5IHNldCB0byB3b3JrIGFuZCBhdCBsYXN0IGJyb3VnaHQgaXQgdG8gcGFzcyB0aGF0IHRoZSB0eXJhbnQsIGluIGEgbGVpc3VyZSBob3VyLCBzaG91bGQgbWVldCBQbGF0byBhbmQgaGVhciBoaW0gZGlzY291cnNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIERpb24gd2FzIGEgYnJvdGhlciBvZiBBcmlzdG9tYWNoZSwgYW5kIGF0IGZpcnN0IHdhcyBob25vdXJlZCBiZWNhdXNlIG9mIGhpcyBzaXN0ZXI7IGFmdGVyd2FyZHMsIGhvd2V2ZXIsIGhlIGdhdmUgcHJvb2Ygb2YgaGlzIHdpc2RvbSwgYW5kIHdhcyBwcmVzZW50bHkgYmVsb3ZlZCBieSB0aGUgdHlyYW50IGZvciBoaXMgb3duIHNha2UuIEluIGFkZGl0aW9uIHRvIGFsbCBoaXMgb3RoZXIgZmF2b3VycywgRGlvbnlzaXVzIG9yZGVyZWQgaGlzIHRyZWFzdXJlcnMgdG8gZ2l2ZSBEaW9uIHdoYXRldmVyIGhlIGFza2VkLCBhbHRob3VnaCB0aGV5IHdlcmUgdG8gdGVsbCBEaW9ueXNpdXMgb24gdGhlIHNhbWUgZGF5IHdoYXQgdGhleSBoYWQgZ2l2ZW4uIEJ1dCB0aG91Z2ggRGlvbiB3YXMgZXZlbiBiZWZvcmUgb2YgYSBsb2Z0eSBjaGFyYWN0ZXIsIG1hZ25hbmltb3VzLCBhbmQgbWFubHksIGhlIGFkdmFuY2VkIHN0aWxsIG1vcmUgaW4gdGhlc2UgaGlnaCBxdWFsaXRpZXMgd2hlbiwgYnkgc29tZSBkaXZpbmUgZ29vZCBmb3J0dW5lLCBQbGF0byBjYW1lIHRvIFNpY2lseS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFib3V0IDM4OCBCLkMuLCBpZiB0aGlzIGZpcnN0IHZpc2l0IGlzIG5vdCBhIG15dGguPC9ub3RlPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIG5vdCBvZiBtYW4ncyBkZXZpc2luZywgYnV0IHNvbWUgaGVhdmVubHkgcG93ZXIsIGFzIGl0IHdvdWxkIHNlZW0sIGxheWluZyBmYXIgaW4gYWR2YW5jZSBvZiB0aGUgdGltZSBhIGZvdW5kYXRpb24gZm9yIHRoZSBsaWJlcnR5IG9mIFN5cmFjdXNlLCBhbmQgZGV2aXNpbmcgYSBzdWJ2ZXJzaW9uIG9mIHR5cmFubnksIGJyb3VnaHQgUGxhdG8gZnJvbSBJdGFseSB0byBTeXJhY3VzZSBhbmQgbWFkZSBEaW9uIGhpcyBkaXNjaXBsZS4gRGlvbiB3YXMgdGhlbiBxdWl0ZSB5b3VuZywgYnV0IG9mIGFsbCB0aGUgY29tcGFuaW9ucyBvZiBQbGF0byBoZSB3YXMgYnkgZmFyIHRoZSBxdWlja2VzdCB0byBsZWFybiBhbmQgdGhlIHJlYWRpZXN0IHRvIGFuc3dlciB0aGUgY2FsbCBvZiB2aXJ0dWUsIGFzIFBsYXRvIGhpbXNlbGYgaGFzIHdyaXR0ZW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTC4gNy4zMjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC48L3RpdGxlPiB2aWkuIHAuIDMyNy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGFzIGV2ZW50cyB0ZXN0aWZ5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDcuMzI3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4gdmlpLiBwLiAzMjcuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC48L3RpdGxlPiB2aWkuIHAuIDMyNy48L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aG91Z2ggaGUgaGFkIGJlZW4gcmVhcmVkIGluIGhhYml0cyBvZiBzdWJtaXNzaW9uIHVuZGVyIGEgdHlyYW50LCBhbmQgdGhvdWdoIGhlIHdhcyBmdWxseSBhY2N1c3RvbWVkIHRvIGEgbGlmZSB0aGF0IHdhcyBzdWJzZXJ2aWVudCBhbmQgdGltb3JvdXMsIGFzIHdlbGwgYXMgdG8gb3N0ZW50YXRpb3VzIHNlcnZpY2UgYXQgY291cnQgYW5kIHZ1bGdhciBsdXh1cnkgYW5kIGEgcmVnaW1lbiB0aGF0IGNvdW50cyBwbGVhc3VyZXMgYW5kIGV4Y2Vzc2VzIGFzIHRoZSBoaWdoZXN0IGdvb2QsIG5ldmVydGhlbGVzcywgYXMgc29vbiBhcyBoZSBnb3QgYSB0YXN0ZSBvZiBhIHJhdGlvbmFsIHBoaWxvc29waHkgd2hpY2ggbGVkIHRoZSB3YXkgdG8gdmlydHVlLCBoaXMgc291bCB3YXMgc3BlZWRpbHkgb24gZmlyZTsgYW5kIHNpbmNlIGhlIHZlcnkgYXJ0bGVzc2x5IGFuZCBpbXB1bHNpdmVseSBleHBlY3RlZCwgZnJvbSBoaXMgb3duIHJlYWR5IG9iZWRpZW5jZSB0byB0aGUgY2FsbCBvZiBoaWdoZXIgdGhpbmdzLCB0aGF0IHRoZSBzYW1lIGFyZ3VtZW50cyB3b3VsZCBoYXZlIGEgbGlrZSBwZXJzdWFzaXZlIGZvcmNlIHdpdGggRGlvbnlzaXVzLCBoZSBlYXJuZXN0bHkgc2V0IHRvIHdvcmsgYW5kIGF0IGxhc3QgYnJvdWdodCBpdCB0byBwYXNzIHRoYXQgdGhlIHR5cmFudCwgaW4gYSBsZWlzdXJlIGhvdXIsIHNob3VsZCBtZWV0IFBsYXRvIGFuZCBoZWFyIGhpbSBkaXNjb3Vyc2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBtZWV0aW5nIHRoZSBnZW5lcmFsIHN1YmplY3Qgd2FzIGh1bWFuIHZpcnR1ZSwgYW5kIG1vc3Qgb2YgdGhlIGRpc2N1c3Npb24gdHVybmVkIHVwb24gbWFubGluZXNzLiBBbmQgd2hlbiBQbGF0byBzZXQgZm9ydGggdGhhdCB0eXJhbnRzIGxlYXN0IG9mIGFsbCBtZW4gaGFkIHRoaXMgcXVhbGl0eSwgYW5kIHRoZW4sIHRyZWF0aW5nIG9mIGp1c3RpY2UsIG1haW50YWluZWQgdGhhdCB0aGUgbGlmZSBvZiB0aGUganVzdCB3YXMgYmxlc3NlZCwgd2hpbGUgdGhhdCBvZiB0aGUgdW5qdXN0IHdhcyB3cmV0Y2hlZCwgdGhlIHR5cmFudCwgYXMgaWYgY29udmljdGVkIGJ5IGhpcyBhcmd1bWVudHMsIHdvdWxkIG5vdCBsaXN0ZW4gdG8gdGhlbSwgYW5kIHdhcyB2ZXhlZCB3aXRoIHRoZSBhdWRpZW5jZSBiZWNhdXNlIHRoZXkgYWRtaXJlZCB0aGUgc3BlYWtlciBhbmQgd2VyZSBjaGFybWVkIGJ5IGhpcyB1dHRlcmFuY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCBsYXN0IGhlIGdvdCBleGNlZWRpbmdseSBhbmdyeSBhbmQgYXNrZWQgdGhlIHBoaWxvc29waGVyIHdoeSBoZSBoYWQgY29tZSB0byBTaWNpbHkuIEFuZCB3aGVuIFBsYXRvIHNhaWQgdGhhdCBoZSB3YXMgY29tZSB0byBzZWVrIGEgdmlydHVvdXMgbWFuLCB0aGUgdHlyYW50IGFuc3dlcmVkIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIGJ5IHRoZSBnb2RzLCBpdCBhcHBlYXJzIHRoYXQgeW91IGhhdmUgbm90IHlldCBmb3VuZCBzdWNoIGFuIG9uZS48L3E+IERpb24gdGhvdWdodCB0aGF0IHRoaXMgd2FzIHRoZSBlbmQgb2YgaGlzIGFuZ2VyLCBhbmQgYXMgUGxhdG8gd2FzIGVhZ2VyIGZvciBpdCwgc2VudCBoaW0gYXdheSB1cG9uIGEgdHJpcmVtZSwgd2hpY2ggd2FzIGNvbnZleWluZyBQb2xsaXMgdGhlIFNwYXJ0YW4gdG8gR3JlZWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgRGlvbnlzaXVzIHByaXZpbHkgcmVxdWVzdGVkIFBvbGxpcyB0byBraWxsIFBsYXRvIG9uIHRoZSB2b3lhZ2UsIGlmIGl0IHdlcmUgaW4gYW55IHdheSBwb3NzaWJsZSwgYnV0IGlmIG5vdCwgYXQgYWxsIGV2ZW50cyB0byBzZWxsIGhpbSBpbnRvIHNsYXZlcnk7IGZvciBoZSB3b3VsZCB0YWtlIG5vIGhhcm0sIGJ1dCB3b3VsZCBiZSBxdWl0ZSBhcyBoYXBweSwgYmVpbmcgYSBqdXN0IG1hbiwgZXZlbiBpZiBoZSBzaG91bGQgYmVjb21lIGEgc2xhdmUuIFBvbGxpcywgdGhlcmVmb3JlLCBhcyB3ZSBhcmUgdG9sZCwgY2FycmllZCBQbGF0byB0byBBZWdpbmEgYW5kIHRoZXJlIHNvbGQgaGltOyBmb3IgdGhlIEFlZ2luZXRhbnMgd2VyZSBhdCB3YXIgd2l0aCB0aGUgQXRoZW5pYW5zIGFuZCBoYWQgbWFkZSBhIGRlY3JlZSB0aGF0IGFueSBBdGhlbmlhbiB0YWtlbiBvbiB0aGUgaXNsYW5kIHNob3VsZCBiZSBwdXQgdXAgZm9yIHNhbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIG1lZXRpbmcgdGhlIGdlbmVyYWwgc3ViamVjdCB3YXMgaHVtYW4gdmlydHVlLCBhbmQgbW9zdCBvZiB0aGUgZGlzY3Vzc2lvbiB0dXJuZWQgdXBvbiBtYW5saW5lc3MuIEFuZCB3aGVuIFBsYXRvIHNldCBmb3J0aCB0aGF0IHR5cmFudHMgbGVhc3Qgb2YgYWxsIG1lbiBoYWQgdGhpcyBxdWFsaXR5LCBhbmQgdGhlbiwgdHJlYXRpbmcgb2YganVzdGljZSwgbWFpbnRhaW5lZCB0aGF0IHRoZSBsaWZlIG9mIHRoZSBqdXN0IHdhcyBibGVzc2VkLCB3aGlsZSB0aGF0IG9mIHRoZSB1bmp1c3Qgd2FzIHdyZXRjaGVkLCB0aGUgdHlyYW50LCBhcyBpZiBjb252aWN0ZWQgYnkgaGlzIGFyZ3VtZW50cywgd291bGQgbm90IGxpc3RlbiB0byB0aGVtLCBhbmQgd2FzIHZleGVkIHdpdGggdGhlIGF1ZGllbmNlIGJlY2F1c2UgdGhleSBhZG1pcmVkIHRoZSBzcGVha2VyIGFuZCB3ZXJlIGNoYXJtZWQgYnkgaGlzIHV0dGVyYW5jZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGxhc3QgaGUgZ290IGV4Y2VlZGluZ2x5IGFuZ3J5IGFuZCBhc2tlZCB0aGUgcGhpbG9zb3BoZXIgd2h5IGhlIGhhZCBjb21lIHRvIFNpY2lseS4gQW5kIHdoZW4gUGxhdG8gc2FpZCB0aGF0IGhlIHdhcyBjb21lIHRvIHNlZWsgYSB2aXJ0dW91cyBtYW4sIHRoZSB0eXJhbnQgYW5zd2VyZWQgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZWxsLCBieSB0aGUgZ29kcywgaXQgYXBwZWFycyB0aGF0IHlvdSBoYXZlIG5vdCB5ZXQgZm91bmQgc3VjaCBhbiBvbmUuPC9xPiBEaW9uIHRob3VnaHQgdGhhdCB0aGlzIHdhcyB0aGUgZW5kIG9mIGhpcyBhbmdlciwgYW5kIGFzIFBsYXRvIHdhcyBlYWdlciBmb3IgaXQsIHNlbnQgaGltIGF3YXkgdXBvbiBhIHRyaXJlbWUsIHdoaWNoIHdhcyBjb252ZXlpbmcgUG9sbGlzIHRoZSBTcGFydGFuIHRvIEdyZWVjZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBEaW9ueXNpdXMgcHJpdmlseSByZXF1ZXN0ZWQgUG9sbGlzIHRvIGtpbGwgUGxhdG8gb24gdGhlIHZveWFnZSwgaWYgaXQgd2VyZSBpbiBhbnkgd2F5IHBvc3NpYmxlLCBidXQgaWYgbm90LCBhdCBhbGwgZXZlbnRzIHRvIHNlbGwgaGltIGludG8gc2xhdmVyeTsgZm9yIGhlIHdvdWxkIHRha2Ugbm8gaGFybSwgYnV0IHdvdWxkIGJlIHF1aXRlIGFzIGhhcHB5LCBiZWluZyBhIGp1c3QgbWFuLCBldmVuIGlmIGhlIHNob3VsZCBiZWNvbWUgYSBzbGF2ZS4gUG9sbGlzLCB0aGVyZWZvcmUsIGFzIHdlIGFyZSB0b2xkLCBjYXJyaWVkIFBsYXRvIHRvIEFlZ2luYSBhbmQgdGhlcmUgc29sZCBoaW07IGZvciB0aGUgQWVnaW5ldGFucyB3ZXJlIGF0IHdhciB3aXRoIHRoZSBBdGhlbmlhbnMgYW5kIGhhZCBtYWRlIGEgZGVjcmVlIHRoYXQgYW55IEF0aGVuaWFuIHRha2VuIG9uIHRoZSBpc2xhbmQgc2hvdWxkIGJlIHB1dCB1cCBmb3Igc2FsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gc3BpdGUgb2YgYWxsIHRoaXMsIERpb24gc3Rvb2QgaW4gbm8gbGVzcyBob25vdXIgYW5kIGNyZWRpdCB3aXRoIERpb255c2l1cyB0aGFuIGJlZm9yZSwgYnV0IGhhZCB0aGUgbWFuYWdlbWVudCBvZiB0aGUgbW9zdCBpbXBvcnRhbnQgZW1iYXNzaWVzLCBhcywgZm9yIGluc3RhbmNlLCB3aGVuIGhlIHdhcyBCZW50IHRvIENhcnRoYWdlIGFuZCB3b24gZ3JlYXQgYWRtaXJhdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHR5cmFudCBhbHNvIGJvcmUgd2l0aCBoaXMgZnJlZWRvbSBvZiBzcGVlY2gsIGFuZCBEaW9uIHdhcyBhbG1vc3QgdGhlIG9ubHkgb25lIHdobyBzcG9rZSBoaXMgbWluZCBmZWFybGVzc2x5LCBhcywgZm9yIGV4YW1wbGUsIHdoZW4gaGUgcmVidWtlZCBEaW9ueXNpdXMgZm9yIHdoYXQgaGUgc2FpZCBhYm91dCBHZWxvbi4gVGhlIHR5cmFudCB3YXMgcmlkaWN1bGluZyB0aGUgZ292ZXJubWVudCBvZiBHZWxvbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5HZWxvbiBoYWQgYmVlbiB0eXJhbnQgb2YgU3lyYWN1c2UgNDg1LTQ3OCBCLkMuPC9ub3RlPiBhbmQgd2hlbiBoZSBzYWlkIHRoYXQgR2Vsb24gaGltc2VsZiwgdHJ1ZSB0byBoaXMgbmFtZSwgYmVjYW1lIHRoZSA8ZW1waD5sYXVnaGluZy1zdG9jazwvZW1waD4gKAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Z2Vsb3M8L3E+KSBvZiBTaWNpbHksIHRoZSByZXN0IG9mIGhpcyBoZWFyZXJzIHByZXRlbmRlZCB0byBhZG1pcmUgdGhlIGpva2UsIGJ1dCBEaW9uIHdhcyBkaXNndXN0ZWQgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLCB0aG91IGFydCBub3cgdHlyYW50IGJlY2F1c2UgbWVuIHRydXN0ZWQgdGhlZSBmb3IgR2Vsb24ncyBzYWtlOyBidXQgbm8gbWFuIGhlcmVhZnRlciB3aWxsIGJlIHRydXN0ZWQgZm9yIHRoeSBzYWtlLjwvcT4gRm9yLCBhcyBhIG1hdHRlciBvZiBmYWN0LCBHZWxvbiBzZWVtcyB0byBoYXZlIG1hZGUgYSBjaXR5IHVuZGVyIGFic29sdXRlIHJ1bGUgYSB2ZXJ5IGZhaXIgdGhpbmcgdG8gbG9vayB1cG9uLCBidXQgRGlvbnlzaXVzIGEgdmVyeSBzaGFtZWZ1bCB0aGluZy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHNwaXRlIG9mIGFsbCB0aGlzLCBEaW9uIHN0b29kIGluIG5vIGxlc3MgaG9ub3VyIGFuZCBjcmVkaXQgd2l0aCBEaW9ueXNpdXMgdGhhbiBiZWZvcmUsIGJ1dCBoYWQgdGhlIG1hbmFnZW1lbnQgb2YgdGhlIG1vc3QgaW1wb3J0YW50IGVtYmFzc2llcywgYXMsIGZvciBpbnN0YW5jZSwgd2hlbiBoZSB3YXMgQmVudCB0byBDYXJ0aGFnZSBhbmQgd29uIGdyZWF0IGFkbWlyYXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0eXJhbnQgYWxzbyBib3JlIHdpdGggaGlzIGZyZWVkb20gb2Ygc3BlZWNoLCBhbmQgRGlvbiB3YXMgYWxtb3N0IHRoZSBvbmx5IG9uZSB3aG8gc3Bva2UgaGlzIG1pbmQgZmVhcmxlc3NseSwgYXMsIGZvciBleGFtcGxlLCB3aGVuIGhlIHJlYnVrZWQgRGlvbnlzaXVzIGZvciB3aGF0IGhlIHNhaWQgYWJvdXQgR2Vsb24uIFRoZSB0eXJhbnQgd2FzIHJpZGljdWxpbmcgdGhlIGdvdmVybm1lbnQgb2YgR2Vsb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5HZWxvbiBoYWQgYmVlbiB0eXJhbnQgb2YgU3lyYWN1c2UgNDg1LTQ3OCBCLkMuPC9ub3RlPiBhbmQgd2hlbiBoZSBzYWlkIHRoYXQgR2Vsb24gaGltc2VsZiwgdHJ1ZSB0byBoaXMgbmFtZSwgYmVjYW1lIHRoZSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmxhdWdoaW5nLXN0b2NrPC9lbXBoPiAoCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmdlbG9zPC9xPikgb2YgU2ljaWx5LCB0aGUgcmVzdCBvZiBoaXMgaGVhcmVycyBwcmV0ZW5kZWQgdG8gYWRtaXJlIHRoZSBqb2tlLCBidXQgRGlvbiB3YXMgZGlzZ3VzdGVkIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW5kZWVkLCB0aG91IGFydCBub3cgdHlyYW50IGJlY2F1c2UgbWVuIHRydXN0ZWQgdGhlZSBmb3IgR2Vsb24ncyBzYWtlOyBidXQgbm8gbWFuIGhlcmVhZnRlciB3aWxsIGJlIHRydXN0ZWQgZm9yIHRoeSBzYWtlLjwvcT4gRm9yLCBhcyBhIG1hdHRlciBvZiBmYWN0LCBHZWxvbiBzZWVtcyB0byBoYXZlIG1hZGUgYSBjaXR5IHVuZGVyIGFic29sdXRlIHJ1bGUgYSB2ZXJ5IGZhaXIgdGhpbmcgdG8gbG9vayB1cG9uLCBidXQgRGlvbnlzaXVzIGEgdmVyeSBzaGFtZWZ1bCB0aGluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5EaW9ueXNpdXMgaGFkIHRocmVlIGNoaWxkcmVuIGJ5IGhpcyBMb2NyaWFuIHdpZmUsIGFuZCBmb3VyIGJ5IEFyaXN0b21hY2hlLCB0d28gb2Ygd2hvbSB3ZXJlIGRhdWdodGVycywgU29waHJvc3luZSBhbmQgQXJldGUuIFNvcGhyb3N5bmUgYmVjYW1lIHRoZSB3aWZlIG9mIGhpcyBzb24gRGlvbnlzaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRGlvIDMuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBBcmV0ZSBvZiBoaXMgYnJvdGhlciBUaGVhcmlkZXMsIGJ1dCBhZnRlciB0aGUgZGVhdGggb2YgVGhlYXJpZGVzLCBBcmV0ZSBiZWNhbWUgdGhlIHdpZmUgb2YgRGlvbiwgaGVyIHVuY2xlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHdoZW4gRGlvbnlzaXVzIHdhcyBzaWNrIGFuZCBzZWVtZWQgbGlrZWx5IHRvIGRpZSwgRGlvbiB0cmllZCB0byBjb25mZXIgd2l0aCBoaW0gaW4gdGhlIGludGVyZXN0cyBvZiBoaXMgY2hpbGRyZW4gYnkgQXJpc3RvbWFjaGUsIGJ1dCB0aGUgcGh5c2ljaWFucywgd2hvIHdpc2hlZCB0byBpbmdyYXRpYXRlIHRoZW1zZWx2ZXMgd2l0aCB0aGUgaGVpciBhcHBhcmVudCwgd291bGQgbm90IHBlcm1pdCBpdDsgbW9yZW92ZXIsIGFjY29yZGluZyB0byBUaW1hZXVzLCB3aGVuIHRoZSBzaWNrIG1hbiBhc2tlZCBmb3IgYSBzbGVlcGluZyBwb3Rpb24sIHRoZXkgZ2F2ZSBoaW0gb25lIHRoYXQgcm9iYmVkIGhpbSBvZiBoaXMgc2Vuc2VzIGFuZCBtYWRlIGRlYXRoIGZvbGxvdyBzbGVlcC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAzNjcgQi5DLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5EaW9ueXNpdXMgaGFkIHRocmVlIGNoaWxkcmVuIGJ5IGhpcyBMb2NyaWFuIHdpZmUsIGFuZCBmb3VyIGJ5IEFyaXN0b21hY2hlLCB0d28gb2Ygd2hvbSB3ZXJlIGRhdWdodGVycywgU29waHJvc3luZSBhbmQgQXJldGUuIFNvcGhyb3N5bmUgYmVjYW1lIHRoZSB3aWZlIG9mIGhpcyBzb24gRGlvbnlzaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyAzLjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgQXJldGUgb2YgaGlzIGJyb3RoZXIgVGhlYXJpZGVzLCBidXQgYWZ0ZXIgdGhlIGRlYXRoIG9mIFRoZWFyaWRlcywgQXJldGUgYmVjYW1lIHRoZSB3aWZlIG9mIERpb24sIGhlciB1bmNsZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gMy4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgd2hlbiBEaW9ueXNpdXMgd2FzIHNpY2sgYW5kIHNlZW1lZCBsaWtlbHkgdG8gZGllLCBEaW9uIHRyaWVkIHRvIGNvbmZlciB3aXRoIGhpbSBpbiB0aGUgaW50ZXJlc3RzIG9mIGhpcyBjaGlsZHJlbiBieSBBcmlzdG9tYWNoZSwgYnV0IHRoZSBwaHlzaWNpYW5zLCB3aG8gd2lzaGVkIHRvIGluZ3JhdGlhdGUgdGhlbXNlbHZlcyB3aXRoIHRoZSBoZWlyIGFwcGFyZW50LCB3b3VsZCBub3QgcGVybWl0IGl0OyBtb3Jlb3ZlciwgYWNjb3JkaW5nIHRvIFRpbWFldXMsIHdoZW4gdGhlIHNpY2sgbWFuIGFza2VkIGZvciBhIHNsZWVwaW5nIHBvdGlvbiwgdGhleSBnYXZlIGhpbSBvbmUgdGhhdCByb2JiZWQgaGltIG9mIGhpcyBzZW5zZXMgYW5kIG1hZGUgZGVhdGggZm9sbG93IHNsZWVwLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMzY3IEIuQy48L25vdGU+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGluIHRoZSBmaXJzdCBjb25mZXJlbmNlIGhlbGQgYmV0d2VlbiB0aGUgeW91bmcgRGlvbnlzaXVzIGFuZCBoaXMgZnJpZW5kcywgRGlvbiBkaXNjb3Vyc2VkIHVwb24gdGhlIG5lZWRzIG9mIHRoZSBzaXR1YXRpb24gaW4gc3VjaCBhIG1hbm5lciB0aGF0IGhpcyB3aXNkb20gbWFkZSBhbGwgdGhlIHJlc3QgYXBwZWFyIGNoaWxkcmVuLCBhbmQgaGlzIGJvbGRuZXNzIG9mIHNwZWVjaCBtYWRlIHRoZW0gc2VlbSBtZXJlIHNsYXZlcyBvZiB0eXJhbm55LCB3aG8gd2VyZSB3b250IHRvIGdpdmUgdGhlaXIgY291bnNlbHMgdGltb3JvdXNseSBhbmQgaWdub2JseSB0byBncmF0aWZ5IHRoZSB5b3VuZyBtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IG1vc3QgYW1hemVkIHRoZW0gaW4gdGhlaXIgZmVhciBvZiB0aGUgcGVyaWwgdGhhdCB0aHJlYXRlbmVkIHRoZSByZWFsbSBmcm9tIENhcnRoYWdlLCB3YXMgRGlvbidzIHByb21pc2UgdGhhdCwgaWYgRGlvbnlzaXVzIHdhbnRlZCBwZWFjZSwgaGUgd291bGQgc2FpbCBhdCBvbmNlIHRvIEFmcmljYSBhbmQgcHV0IGEgc3RvcCB0byB0aGUgd2FyIG9uIHRoZSBiZXN0IHRlcm1zIHBvc3NpYmxlOyBidXQgaWYgd2FyIHdhcyB0aGUga2luZydzIGRlc2lyZSwgaGUgaGltc2VsZiB3b3VsZCBmdXJuaXNoIGhpbSB3aXRoIGZpZnR5IHN3aWZ0IHRyaXJlbWVzIGZvciB0aGUgd2FyLCBhbmQgbWFpbnRhaW4gdGhlbSBhdCBoaXMgb3duIGNvc3RzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGluIHRoZSBmaXJzdCBjb25mZXJlbmNlIGhlbGQgYmV0d2VlbiB0aGUgeW91bmcgRGlvbnlzaXVzIGFuZCBoaXMgZnJpZW5kcywgRGlvbiBkaXNjb3Vyc2VkIHVwb24gdGhlIG5lZWRzIG9mIHRoZSBzaXR1YXRpb24gaW4gc3VjaCBhIG1hbm5lciB0aGF0IGhpcyB3aXNkb20gbWFkZSBhbGwgdGhlIHJlc3QgYXBwZWFyIGNoaWxkcmVuLCBhbmQgaGlzIGJvbGRuZXNzIG9mIHNwZWVjaCBtYWRlIHRoZW0gc2VlbSBtZXJlIHNsYXZlcyBvZiB0eXJhbm55LCB3aG8gd2VyZSB3b250IHRvIGdpdmUgdGhlaXIgY291bnNlbHMgdGltb3JvdXNseSBhbmQgaWdub2JseSB0byBncmF0aWZ5IHRoZSB5b3VuZyBtYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGF0IG1vc3QgYW1hemVkIHRoZW0gaW4gdGhlaXIgZmVhciBvZiB0aGUgcGVyaWwgdGhhdCB0aHJlYXRlbmVkIHRoZSByZWFsbSBmcm9tIENhcnRoYWdlLCB3YXMgRGlvbidzIHByb21pc2UgdGhhdCwgaWYgRGlvbnlzaXVzIHdhbnRlZCBwZWFjZSwgaGUgd291bGQgc2FpbCBhdCBvbmNlIHRvIEFmcmljYSBhbmQgcHV0IGEgc3RvcCB0byB0aGUgd2FyIG9uIHRoZSBiZXN0IHRlcm1zIHBvc3NpYmxlOyBidXQgaWYgd2FyIHdhcyB0aGUga2luZydzIGRlc2lyZSwgaGUgaGltc2VsZiB3b3VsZCBmdXJuaXNoIGhpbSB3aXRoIGZpZnR5IHN3aWZ0IHRyaXJlbWVzIGZvciB0aGUgd2FyLCBhbmQgbWFpbnRhaW4gdGhlbSBhdCBoaXMgb3duIGNvc3RzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkRpb255c2l1cywgdGhlbiwgd2FzIGdyZWF0bHkgYXN0b25pc2hlZCBhdCBoaXMgbWFnbmFuaW1pdHkgYW5kIGRlbGlnaHRlZCB3aXRoIGhpcyBhcmRvdXI7IGJ1dCB0aGUgb3RoZXIgY291cnRpZXJzLCB0aGlua2luZyB0aGVtc2VsdmVzIHB1dCBvdXQgb2YgY291bnRlbmFuY2UgYnkgRGlvbidzIGdlbmVyb3NpdHkgYW5kIGh1bWJsZWQgYnkgaGlzIHBvd2VyLCBiZWdhbiBob3N0aWxpdGllcyBmb3J0aHdpdGgsIGFuZCBzYWlkIGV2ZXJ5dGhpbmcgdGhleSBjb3VsZCB0byBlbWJpdHRlciB0aGUgeW91bmcga2luZyBhZ2FpbnN0IGhpbSwgYWNjdXNpbmcgaGltIG9mIHN0ZWFsaW5nIGludG8gdGhlIHBvc2l0aW9uIG9mIHR5cmFudCBieSBtZWFucyBvZiBoaXMgcG93ZXIgb24gdGhlIHNlYSwgYW5kIG9mIHVzaW5nIGhpcyBzaGlwcyB0byBkaXZlcnQgdGhlIHBvd2VyIGludG8gdGhlIGhhbmRzIG9mIHRoZSBjaGlsZHJlbiBvZiBBcmlzdG9tYWNoZSwgd2hvIHdlcmUgaGlzIG5lcGhld3MgYW5kIG5pZWNlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzdHJvbmdlc3QgYW5kIG1vc3QgYXBwYXJlbnQgZ3JvdW5kcyBmb3IgdGhlaXIgZW52eSBhbmQgaGF0cmVkIG9mIGhpbSBsYXkgaW4gdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBoaXMgd2F5IG9mIGxpZmUgYW5kIHRoZWlycywgYW5kIGluIGhpcyByZWZ1c2FsIHRvIG1pbmdsZSB3aXRoIG90aGVycy4gRm9yIGZyb20gdGhlIHZlcnkgb3V0c2V0IHRoZXkgb2J0YWluZWQgY29udmVyc2UgYW5kIGludGltYWN5IHdpdGggYSB0eXJhbnQgd2hvIHdhcyB5b3VuZyBhbmQgaGFkIGJlZW4gYmFkbHkgcmVhcmVkIGJ5IG1lYW5zIG9mIHBsZWFzdXJlcyBhbmQgZmxhdHRlcmllcywgYW5kIHdlcmUgZXZlciBjb250cml2aW5nIGZvciBoaW0gc3VuZHJ5IGFtb3VycywgaWRsZSBhbXVzZW1lbnRzIHdpdGggd2luZSBhbmQgd29tZW4sIGFuZCBvdGhlciB1bnNlZW1seSBwYXN0aW1lcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyB3YXkgdGhlIHR5cmFubnksIGJlaW5nIHNvZnRlbmVkLCBsaWtlIGlyb24gaW4gdGhlIGZpcmUsIGFwcGVhcmVkIHRvIGl0cyBzdWJqZWN0cyB0byBiZSBraW5kbHksIGFuZCBncmFkdWFsbHkgcmVtaXR0ZWQgaXRzIGV4Y2Vzc2l2ZSBjcnVlbHR5LCB0aG91Z2ggaXRzIGVkZ2Ugd2FzIGJsdW50ZWQgbm90IHNvIG11Y2ggYnkgYW55IGNsZW1lbmN5IGluIHRoZSBzb3ZlcmVpZ24gYXMgYnkgaGlzIGxvdmUgb2YgZWFzZS4gQXMgYSBjb25zZXF1ZW5jZSwgdGhlIGxheGl0eSBvZiB0aGUgeW91bmcga2luZyBnYWluZWQgZ3JvdW5kIGxpdHRsZSBieSBsaXR0bGUsIHVudGlsIGF0IGxhc3QgdGhvc2UgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hZGFtYW50aW5lIGJvbmRzPC9xPiB3aXRoIHdoaWNoIHRoZSBlbGRlciBEaW9ueXNpdXMgc2FpZCBoZSBoYWQgbGVmdCB0aGUgbW9uYXJjaHkgZmFzdGVuZWQsIHdlcmUgbWVsdGVkIGFuZCBkZXN0cm95ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBzYWlkIHRoYXQgdGhlIHlvdW5nIGtpbmcgb25jZSBrZXB0IHVwIGEgZHJpbmtpbmcgYm91dCBmb3IgbmluZXR5IGNvbnNlY3V0aXZlIGRheXMgZnJvbSBpdHMgYmVnaW5uaW5nLCBhbmQgdGhhdCBkdXJpbmcgdGhpcyB0aW1lIGhpcyBjb3VydCBnYXZlIG5vIGFjY2VzcyBvciBhZG1pc3Npb24gdG8gbWVuIG9yIG1hdHRlcnMgb2YgY29uc2VxdWVuY2UsIGJ1dCBkcnVua2VubmVzcyBhbmQgcmFpbGxlcnkgYW5kIG11c2ljIGFuZCBkYW5jaW5nIGFuZCBidWZmb29uZXJ5IGhlbGQgZnVsbCBzd2F5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5EaW9ueXNpdXMsIHRoZW4sIHdhcyBncmVhdGx5IGFzdG9uaXNoZWQgYXQgaGlzIG1hZ25hbmltaXR5IGFuZCBkZWxpZ2h0ZWQgd2l0aCBoaXMgYXJkb3VyOyBidXQgdGhlIG90aGVyIGNvdXJ0aWVycywgdGhpbmtpbmcgdGhlbXNlbHZlcyBwdXQgb3V0IG9mIGNvdW50ZW5hbmNlIGJ5IERpb24ncyBnZW5lcm9zaXR5IGFuZCBodW1ibGVkIGJ5IGhpcyBwb3dlciwgYmVnYW4gaG9zdGlsaXRpZXMgZm9ydGh3aXRoLCBhbmQgc2FpZCBldmVyeXRoaW5nIHRoZXkgY291bGQgdG8gZW1iaXR0ZXIgdGhlIHlvdW5nIGtpbmcgYWdhaW5zdCBoaW0sIGFjY3VzaW5nIGhpbSBvZiBzdGVhbGluZyBpbnRvIHRoZSBwb3NpdGlvbiBvZiB0eXJhbnQgYnkgbWVhbnMgb2YgaGlzIHBvd2VyIG9uIHRoZSBzZWEsIGFuZCBvZiB1c2luZyBoaXMgc2hpcHMgdG8gZGl2ZXJ0IHRoZSBwb3dlciBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgY2hpbGRyZW4gb2YgQXJpc3RvbWFjaGUsIHdobyB3ZXJlIGhpcyBuZXBoZXdzIGFuZCBuaWVjZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc3Ryb25nZXN0IGFuZCBtb3N0IGFwcGFyZW50IGdyb3VuZHMgZm9yIHRoZWlyIGVudnkgYW5kIGhhdHJlZCBvZiBoaW0gbGF5IGluIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gaGlzIHdheSBvZiBsaWZlIGFuZCB0aGVpcnMsIGFuZCBpbiBoaXMgcmVmdXNhbCB0byBtaW5nbGUgd2l0aCBvdGhlcnMuIEZvciBmcm9tIHRoZSB2ZXJ5IG91dHNldCB0aGV5IG9idGFpbmVkIGNvbnZlcnNlIGFuZCBpbnRpbWFjeSB3aXRoIGEgdHlyYW50IHdobyB3YXMgeW91bmcgYW5kIGhhZCBiZWVuIGJhZGx5IHJlYXJlZCBieSBtZWFucyBvZiBwbGVhc3VyZXMgYW5kIGZsYXR0ZXJpZXMsIGFuZCB3ZXJlIGV2ZXIgY29udHJpdmluZyBmb3IgaGltIHN1bmRyeSBhbW91cnMsIGlkbGUgYW11c2VtZW50cyB3aXRoIHdpbmUgYW5kIHdvbWVuLCBhbmQgb3RoZXIgdW5zZWVtbHkgcGFzdGltZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoaXMgd2F5IHRoZSB0eXJhbm55LCBiZWluZyBzb2Z0ZW5lZCwgbGlrZSBpcm9uIGluIHRoZSBmaXJlLCBhcHBlYXJlZCB0byBpdHMgc3ViamVjdHMgdG8gYmUga2luZGx5LCBhbmQgZ3JhZHVhbGx5IHJlbWl0dGVkIGl0cyBleGNlc3NpdmUgY3J1ZWx0eSwgdGhvdWdoIGl0cyBlZGdlIHdhcyBibHVudGVkIG5vdCBzbyBtdWNoIGJ5IGFueSBjbGVtZW5jeSBpbiB0aGUgc292ZXJlaWduIGFzIGJ5IGhpcyBsb3ZlIG9mIGVhc2UuIEFzIGEgY29uc2VxdWVuY2UsIHRoZSBsYXhpdHkgb2YgdGhlIHlvdW5nIGtpbmcgZ2FpbmVkIGdyb3VuZCBsaXR0bGUgYnkgbGl0dGxlLCB1bnRpbCBhdCBsYXN0IHRob3NlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5hZGFtYW50aW5lIGJvbmRzPC9xPiB3aXRoIHdoaWNoIHRoZSBlbGRlciBEaW9ueXNpdXMgc2FpZCBoZSBoYWQgbGVmdCB0aGUgbW9uYXJjaHkgZmFzdGVuZWQsIHdlcmUgbWVsdGVkIGFuZCBkZXN0cm95ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBzYWlkIHRoYXQgdGhlIHlvdW5nIGtpbmcgb25jZSBrZXB0IHVwIGEgZHJpbmtpbmcgYm91dCBmb3IgbmluZXR5IGNvbnNlY3V0aXZlIGRheXMgZnJvbSBpdHMgYmVnaW5uaW5nLCBhbmQgdGhhdCBkdXJpbmcgdGhpcyB0aW1lIGhpcyBjb3VydCBnYXZlIG5vIGFjY2VzcyBvciBhZG1pc3Npb24gdG8gbWVuIG9yIG1hdHRlcnMgb2YgY29uc2VxdWVuY2UsIGJ1dCBkcnVua2VubmVzcyBhbmQgcmFpbGxlcnkgYW5kIG11c2ljIGFuZCBkYW5jaW5nIGFuZCBidWZmb29uZXJ5IGhlbGQgZnVsbCBzd2F5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkRpb24sIHRoZW4sIGFzIHdhcyBuYXR1cmFsLCB3YXMgb2Jub3hpb3VzIHRvIHRoZXNlIG1lbiwgc2luY2UgaGUgaW5kdWxnZWQgaW4gbm8gcGxlYXN1cmUgb3IgeW91dGhmdWwgZm9sbHkuIEFuZCBzbyB0aGV5IHRyaWVkIHRvIGNhbHVtbmlhdGUgaGltIGJ5IGFjdHVhbGx5IGdpdmluZyB0byBoaXMgdmlydHVlcyBwbGF1c2libGUgbmFtZXMgb2YgdmljZXM7IGZvciBpbnN0YW5jZSwgdGhleSBjYWxsZWQgaGlzIGRpZ25pdHkgaGF1Z2h0aW5lc3MsIGFuZCBoaXMgYm9sZG5lc3Mgb2Ygc3BlZWNoIHNlbGYtd2lsbC4gRXZlbiB3aGVuIGhlIGFkbW9uaXNoZWQsIGhlIHdhcyB0aG91Z2h0IHRvIGRlbm91bmNlLCBhbmQgd2hlbiBoZSB3b3VsZCBub3Qgc2hhcmUgbWVuJ3Mgc2lucywgdG8gZGVzcGlzZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGluIHZlcnkgdHJ1dGggaGlzIGNoYXJhY3RlciBoYWQgbmF0dXJhbGx5IGEgY2VydGFpbiBtYWplc3R5LCB0b2dldGhlciB3aXRoIGEgaGFyc2huZXNzIHRoYXQgcmVwZWxsZWQgaW50ZXJjb3Vyc2UgYW5kIHdhcyBoYXJkIHRvIGRlYWwgd2l0aC4gRm9yIG5vdCBvbmx5IHRvIGEgbWFuIHdobyB3YXMgeW91bmcgYW5kIHdob3NlIGVhcnMgaGFkIGJlZW4gY29ycnVwdGVkIGJ5IGZsYXR0ZXJ5IHdhcyBoZSBhbiB1bnBsZWFzYW50IGFuZCBpcmtzb21lIGFzc29jaWF0ZSwgYnV0IG1hbnkgYWxzbyB3aG8gd2VyZSBpbnRpbWF0ZSB3aXRoIGhpbSBhbmQgd2hvIGxvdmVkIHRoZSBzaW1wbGljaXR5IGFuZCBub2JpbGl0eSBvZiBoaXMgZGlzcG9zaXRpb24sIHdlcmUgYXB0IHRvIGZpbmQgZmF1bHQgd2l0aCB0aGUgbWFubmVyIG9mIGhpcyBpbnRlcmNvdXJzZSB3aXRoIG1lbiwgb24gdGhlIGdyb3VuZCB0aGF0IGhlIGRlYWx0IHdpdGggdGhvc2Ugd2hvIHNvdWdodCBoaXMgYWlkIG1vcmUgcnVkZWx5IGFuZCBoYXJzaGx5IHRoYW4gd2FzIG5lZWRmdWwgaW4gcHVibGljIGxpZmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgaGVhZCBQbGF0byBhbHNvIGFmdGVyd2FyZHMgd3JvdGUgdG8gaGltLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTC4gNC4zMjBhIiB2YWxpZD0ieWVzIj5FcGlzdC4gaXYuPC9iaWJsPiBhZCBmaW4uPC9ub3RlPiBpbiBhIHRvbmUgYWxtb3N0IHByb3BoZXRpYywgdGhhdCBoZSBzaG91bGQgYmUgb24gaGlzIGd1YXJkIGFnYWluc3Qgc2VsZi13aWxsLCB3aGljaCB3YXMgYSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvbXBhbmlvbiBvZiBzb2xpdHVkZS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMTUuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Db3Jpb2xhbnVzPC90aXRsZT4sIHh2LiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBIb3dldmVyLCBhdCB0aGlzIHRpbWUsIHRob3VnaCBjaXJjdW1zdGFuY2VzIGxlZCBtZW4gdG8gdGhpbmsgaGltIG9mIG1vcmUgdmFsdWUgdGhhbiBhbnkgb25lIGVsc2UsIGFuZCB0aGUgb25seSBvciB0aGUgY2hpZWYgc3VwcG9ydGVyIGFuZCBndWFyZGlhbiBvZiB0aGUgc3Rvcm0tdG9zc2VkIHR5cmFubnksIGhlIGtuZXcgdGhhdCBpdCB3YXMgbm90IG91dCBvZiBnb29kd2lsbCwgYnV0IGFnYWluc3QgdGhlIHdpc2hlcyBvZiB0aGUgdHlyYW50IGFuZCBvd2luZyB0byBoaXMgbmVlZHMsIHRoYXQgaGUgd2FzIGZpcnN0IGFuZCBncmVhdGVzdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5EaW9uLCB0aGVuLCBhcyB3YXMgbmF0dXJhbCwgd2FzIG9ibm94aW91cyB0byB0aGVzZSBtZW4sIHNpbmNlIGhlIGluZHVsZ2VkIGluIG5vIHBsZWFzdXJlIG9yIHlvdXRoZnVsIGZvbGx5LiBBbmQgc28gdGhleSB0cmllZCB0byBjYWx1bW5pYXRlIGhpbSBieSBhY3R1YWxseSBnaXZpbmcgdG8gaGlzIHZpcnR1ZXMgcGxhdXNpYmxlIG5hbWVzIG9mIHZpY2VzOyBmb3IgaW5zdGFuY2UsIHRoZXkgY2FsbGVkIGhpcyBkaWduaXR5IGhhdWdodGluZXNzLCBhbmQgaGlzIGJvbGRuZXNzIG9mIHNwZWVjaCBzZWxmLXdpbGwuIEV2ZW4gd2hlbiBoZSBhZG1vbmlzaGVkLCBoZSB3YXMgdGhvdWdodCB0byBkZW5vdW5jZSwgYW5kIHdoZW4gaGUgd291bGQgbm90IHNoYXJlIG1lbidzIHNpbnMsIHRvIGRlc3Bpc2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB2ZXJ5IHRydXRoIGhpcyBjaGFyYWN0ZXIgaGFkIG5hdHVyYWxseSBhIGNlcnRhaW4gbWFqZXN0eSwgdG9nZXRoZXIgd2l0aCBhIGhhcnNobmVzcyB0aGF0IHJlcGVsbGVkIGludGVyY291cnNlIGFuZCB3YXMgaGFyZCB0byBkZWFsIHdpdGguIEZvciBub3Qgb25seSB0byBhIG1hbiB3aG8gd2FzIHlvdW5nIGFuZCB3aG9zZSBlYXJzIGhhZCBiZWVuIGNvcnJ1cHRlZCBieSBmbGF0dGVyeSB3YXMgaGUgYW4gdW5wbGVhc2FudCBhbmQgaXJrc29tZSBhc3NvY2lhdGUsIGJ1dCBtYW55IGFsc28gd2hvIHdlcmUgaW50aW1hdGUgd2l0aCBoaW0gYW5kIHdobyBsb3ZlZCB0aGUgc2ltcGxpY2l0eSBhbmQgbm9iaWxpdHkgb2YgaGlzIGRpc3Bvc2l0aW9uLCB3ZXJlIGFwdCB0byBmaW5kIGZhdWx0IHdpdGggdGhlIG1hbm5lciBvZiBoaXMgaW50ZXJjb3Vyc2Ugd2l0aCBtZW4sIG9uIHRoZSBncm91bmQgdGhhdCBoZSBkZWFsdCB3aXRoIHRob3NlIHdobyBzb3VnaHQgaGlzIGFpZCBtb3JlIHJ1ZGVseSBhbmQgaGFyc2hseSB0aGFuIHdhcyBuZWVkZnVsIGluIHB1YmxpYyBsaWZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgaGVhZCBQbGF0byBhbHNvIGFmdGVyd2FyZHMgd3JvdGUgdG8gaGltLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDQuMzIwYSIgdmFsaWQ9InllcyI+RXBpc3QuIGl2LjwvYmlibD4gYWQgZmluLjwvbm90ZT4gaW4gYSB0b25lIGFsbW9zdCBwcm9waGV0aWMsIHRoYXQgaGUgc2hvdWxkIGJlIG9uIGhpcyBndWFyZCBhZ2FpbnN0IHNlbGYtd2lsbCwgd2hpY2ggd2FzIGEgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA0LjMyMGEiIHZhbGlkPSJ5ZXMiPkVwaXN0LiBpdi48L2JpYmw+IGFkIGZpbi48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNvbXBhbmlvbiBvZiBzb2xpdHVkZS48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDb3IuIDE1LjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3Jpb2xhbnVzPC90aXRsZT4sIHh2LiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBIb3dldmVyLCBhdCB0aGlzIHRpbWUsIHRob3VnaCBjaXJjdW1zdGFuY2VzIGxlZCBtZW4gdG8gdGhpbmsgaGltIG9mIG1vcmUgdmFsdWUgdGhhbiBhbnkgb25lIGVsc2UsIGFuZCB0aGUgb25seSBvciB0aGUgY2hpZWYgc3VwcG9ydGVyIGFuZCBndWFyZGlhbiBvZiB0aGUgc3Rvcm0tdG9zc2VkIHR5cmFubnksIGhlIGtuZXcgdGhhdCBpdCB3YXMgbm90IG91dCBvZiBnb29kd2lsbCwgYnV0IGFnYWluc3QgdGhlIHdpc2hlcyBvZiB0aGUgdHlyYW50IGFuZCBvd2luZyB0byBoaXMgbmVlZHMsIHRoYXQgaGUgd2FzIGZpcnN0IGFuZCBncmVhdGVzdC4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ29yLiAxNS40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29yaW9sYW51czwvdGl0bGU+LCB4di4gNC48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvcmlvbGFudXM8L3RpdGxlPiwgeHYuIDQuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Db25zaWRlcmluZywgdGhlbiwgdGhhdCBhIHJlYXNvbiBmb3IgdGhpcyBsYXkgaW4gdGhlIHR5cmFudCdzIHdhbnQgb2YgZWR1Y2F0aW9uLCBoZSBzb3VnaHQgdG8gZW5nYWdlIGhpbSBpbiBsaWJlcmFsIHN0dWRpZXMsIGFuZCB0byBnaXZlIGhpbSBhIHRhc3RlIG9mIHN1Y2ggbGl0ZXJhdHVyZSBhbmQgc2NpZW5jZSBhcyBmb3JtZWQgdGhlIGNoYXJhY3RlciwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBjZWFzZSB0byBiZSBhZnJhaWQgb2YgdmlydHVlLCBhbmQgYmVjb21lIGFjY3VzdG9tZWQgdG8gdGFrZSBkZWxpZ2h0IGluIHdoYXQgd2FzIGhpZ2ggYW5kIG5vYmxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYnkgbmF0dXJlIERpb255c2l1cyBkaWQgbm90IGJlbG9uZyB0byB0aGUgd29yc3QgY2xhc3Mgb2YgdHlyYW50cywgYnV0IGhpcyBmYXRoZXIsIGZlYXJpbmcgdGhhdCBpZiBoZSBzaG91bGQgZ2V0IHdpc2RvbSBhbmQgYXNzb2NpYXRlIHdpdGggbWVuIG9mIHNlbnNlLCBoZSB3b3VsZCBwbG90IGFnYWluc3QgaGltIGFuZCByb2IgaGltIG9mIGhpcyBwb3dlciwgdXNlZCB0byBrZWVwIGhpbSBjbG9zZWx5IHNodXQgdXAgYXQgaG9tZSwgd2hlcmUsIHRocm91Z2ggbGFjayBvZiBhc3NvY2lhdGlvbiB3aXRoIG90aGVycyBhbmQgaW4gaWdub3JhbmNlIG9mIGFmZmFpcnMsIGFzIHdlIGFyZSB0b2xkLCBoZSBtYWRlIGxpdHRsZSB3YWdnb25zIGFuZCBsYW1wc3RhbmRzIGFuZCB3b29kZW4gY2hhaXJzIGFuZCB0YWJsZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZWxkZXIgRGlvbnlzaXVzIHdhcyBzbyBkaXN0cnVzdGZ1bCBhbmQgc3VzcGljaW91cyB0b3dhcmRzIGV2ZXJ5IGJvZHksIGFuZCBoaXMgZmVhciBsZWQgaGltIHRvIGJlIHNvIG11Y2ggb24gaGlzIGd1YXJkLCB0aGF0IGhlIHdvdWxkIG5vdCBldmVuIGhhdmUgaGlzIGhhaXIgY3V0IHdpdGggYmFyYmVycycgc2Npc3NvcnMsIGJ1dCBhIGhhaXJkcmVzc2VyIHdvdWxkIGNvbWUgYW5kIHNpbmdlIGhpcyBsb2NrcyB3aXRoIGEgbGl2ZSBjb2FsLiBOZWl0aGVyIGhpcyBicm90aGVyIG5vciBoaXMgc29uIGNvdWxkIHZpc2l0IGhpbSBpbiBoaXMgYXBhcnRtZW50IHdlYXJpbmcgYW55IGNsb3RoZXMgdGhleSBwbGVhc2VkLCBidXQgZXZlcnkgb25lIGhhZCB0byB0YWtlIG9mZiBoaXMgb3duIGFwcGFyZWwgYmVmb3JlIGVudGVyaW5nIGFuZCBwdXQgb24gYW5vdGhlciwgYWZ0ZXIgdGhlIGd1YXJkcyBoYWQgc2VlbiBoaW0gc3RyaXBwZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlLCB3aGVuIGhpcyBicm90aGVyIExlcHRpbmVzIHdhcyBkZXNjcmliaW5nIHRvIGhpbSB0aGUgbmF0dXJlIG9mIGEgcGxhY2UsIGFuZCBkcmV3IHRoZSBwbGFuIG9mIGl0IG9uIHRoZSBncm91bmQgd2l0aCBhIHNwZWFyIHdoaWNoIGhlIHRvb2sgZnJvbSBvbmUgb2YgaGlzIGJvZHktZ3VhcmRzLCBoZSB3YXMgZXh0cmVtZWx5IGFuZ3J5IHdpdGggaGltLCBhbmQgaGFkIHRoZSBtYW4gd2hvIGdhdmUgaGltIHRoZSBzcGVhciBwdXQgdG8gZGVhdGguIEhlIHVzZWQgdG8gc2F5LCB0b28sIHRoYXQgaGUgd2FzIG9uIGhpcyBndWFyZCBhZ2FpbnN0IGhpcyBmcmllbmRzIHdobyB3ZXJlIG1lbiBvZiBzZW5zZSwgYmVjYXVzZSBoZSBrbmV3IHRoYXQgdGhleSB3b3VsZCByYXRoZXIgYmUgdHlyYW50cyB0aGFuIHN1YmplY3RzIG9mIGEgdHlyYW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgc2xldyBNYXJzeWFzLCBvbmUgb2YgdGhvc2Ugd2hvbSBoZSBoYWQgYWR2YW5jZWQgdG8gcG9zaXRpb25zIG9mIGhpZ2ggY29tbWFuZCwgZm9yIGhhdmluZyBkcmVhbWVkIHRoYXQgaGUga2lsbGVkIGhpbSwgZGVjbGFyaW5nIHRoYXQgdGhpcyB2aXNpb24gbXVzdCBoYXZlIHZpc2l0ZWQgaGlzIHNsZWVwIGJlY2F1c2UgaW4gaGlzIHdha2luZyBob3VycyBoZSBoYWQgcHVycG9zZWQgYW5kIHBsYW5uZWQgc3VjaCBhIGRlZWQuIFllcywgdGhlIG1hbiB3aG8gd2FzIGFuZ3J5IHdpdGggUGxhdG8gYmVjYXVzZSBoZSB3b3VsZCBub3QgcHJvbm91bmNlIGhpbSB0aGUgbW9zdCB2YWxpYW50IG1hbiBhbGl2ZSwgaGFkIGEgc3Bpcml0IGFzIHRpbW9yb3VzIGFzIHRoaXMsIGFuZCBzbyBmdWxsIG9mIGFsbCB0aGUgZXZpbHMgaW5kdWNlZCBieSBjb3dhcmRpY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Db25zaWRlcmluZywgdGhlbiwgdGhhdCBhIHJlYXNvbiBmb3IgdGhpcyBsYXkgaW4gdGhlIHR5cmFudCdzIHdhbnQgb2YgZWR1Y2F0aW9uLCBoZSBzb3VnaHQgdG8gZW5nYWdlIGhpbSBpbiBsaWJlcmFsIHN0dWRpZXMsIGFuZCB0byBnaXZlIGhpbSBhIHRhc3RlIG9mIHN1Y2ggbGl0ZXJhdHVyZSBhbmQgc2NpZW5jZSBhcyBmb3JtZWQgdGhlIGNoYXJhY3RlciwgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBjZWFzZSB0byBiZSBhZnJhaWQgb2YgdmlydHVlLCBhbmQgYmVjb21lIGFjY3VzdG9tZWQgdG8gdGFrZSBkZWxpZ2h0IGluIHdoYXQgd2FzIGhpZ2ggYW5kIG5vYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBieSBuYXR1cmUgRGlvbnlzaXVzIGRpZCBub3QgYmVsb25nIHRvIHRoZSB3b3JzdCBjbGFzcyBvZiB0eXJhbnRzLCBidXQgaGlzIGZhdGhlciwgZmVhcmluZyB0aGF0IGlmIGhlIHNob3VsZCBnZXQgd2lzZG9tIGFuZCBhc3NvY2lhdGUgd2l0aCBtZW4gb2Ygc2Vuc2UsIGhlIHdvdWxkIHBsb3QgYWdhaW5zdCBoaW0gYW5kIHJvYiBoaW0gb2YgaGlzIHBvd2VyLCB1c2VkIHRvIGtlZXAgaGltIGNsb3NlbHkgc2h1dCB1cCBhdCBob21lLCB3aGVyZSwgdGhyb3VnaCBsYWNrIG9mIGFzc29jaWF0aW9uIHdpdGggb3RoZXJzIGFuZCBpbiBpZ25vcmFuY2Ugb2YgYWZmYWlycywgYXMgd2UgYXJlIHRvbGQsIGhlIG1hZGUgbGl0dGxlIHdhZ2dvbnMgYW5kIGxhbXBzdGFuZHMgYW5kIHdvb2RlbiBjaGFpcnMgYW5kIHRhYmxlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZWxkZXIgRGlvbnlzaXVzIHdhcyBzbyBkaXN0cnVzdGZ1bCBhbmQgc3VzcGljaW91cyB0b3dhcmRzIGV2ZXJ5IGJvZHksIGFuZCBoaXMgZmVhciBsZWQgaGltIHRvIGJlIHNvIG11Y2ggb24gaGlzIGd1YXJkLCB0aGF0IGhlIHdvdWxkIG5vdCBldmVuIGhhdmUgaGlzIGhhaXIgY3V0IHdpdGggYmFyYmVycycgc2Npc3NvcnMsIGJ1dCBhIGhhaXJkcmVzc2VyIHdvdWxkIGNvbWUgYW5kIHNpbmdlIGhpcyBsb2NrcyB3aXRoIGEgbGl2ZSBjb2FsLiBOZWl0aGVyIGhpcyBicm90aGVyIG5vciBoaXMgc29uIGNvdWxkIHZpc2l0IGhpbSBpbiBoaXMgYXBhcnRtZW50IHdlYXJpbmcgYW55IGNsb3RoZXMgdGhleSBwbGVhc2VkLCBidXQgZXZlcnkgb25lIGhhZCB0byB0YWtlIG9mZiBoaXMgb3duIGFwcGFyZWwgYmVmb3JlIGVudGVyaW5nIGFuZCBwdXQgb24gYW5vdGhlciwgYWZ0ZXIgdGhlIGd1YXJkcyBoYWQgc2VlbiBoaW0gc3RyaXBwZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvbmNlLCB3aGVuIGhpcyBicm90aGVyIExlcHRpbmVzIHdhcyBkZXNjcmliaW5nIHRvIGhpbSB0aGUgbmF0dXJlIG9mIGEgcGxhY2UsIGFuZCBkcmV3IHRoZSBwbGFuIG9mIGl0IG9uIHRoZSBncm91bmQgd2l0aCBhIHNwZWFyIHdoaWNoIGhlIHRvb2sgZnJvbSBvbmUgb2YgaGlzIGJvZHktZ3VhcmRzLCBoZSB3YXMgZXh0cmVtZWx5IGFuZ3J5IHdpdGggaGltLCBhbmQgaGFkIHRoZSBtYW4gd2hvIGdhdmUgaGltIHRoZSBzcGVhciBwdXQgdG8gZGVhdGguIEhlIHVzZWQgdG8gc2F5LCB0b28sIHRoYXQgaGUgd2FzIG9uIGhpcyBndWFyZCBhZ2FpbnN0IGhpcyBmcmllbmRzIHdobyB3ZXJlIG1lbiBvZiBzZW5zZSwgYmVjYXVzZSBoZSBrbmV3IHRoYXQgdGhleSB3b3VsZCByYXRoZXIgYmUgdHlyYW50cyB0aGFuIHN1YmplY3RzIG9mIGEgdHlyYW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBzbGV3IE1hcnN5YXMsIG9uZSBvZiB0aG9zZSB3aG9tIGhlIGhhZCBhZHZhbmNlZCB0byBwb3NpdGlvbnMgb2YgaGlnaCBjb21tYW5kLCBmb3IgaGF2aW5nIGRyZWFtZWQgdGhhdCBoZSBraWxsZWQgaGltLCBkZWNsYXJpbmcgdGhhdCB0aGlzIHZpc2lvbiBtdXN0IGhhdmUgdmlzaXRlZCBoaXMgc2xlZXAgYmVjYXVzZSBpbiBoaXMgd2FraW5nIGhvdXJzIGhlIGhhZCBwdXJwb3NlZCBhbmQgcGxhbm5lZCBzdWNoIGEgZGVlZC4gWWVzLCB0aGUgbWFuIHdobyB3YXMgYW5ncnkgd2l0aCBQbGF0byBiZWNhdXNlIGhlIHdvdWxkIG5vdCBwcm9ub3VuY2UgaGltIHRoZSBtb3N0IHZhbGlhbnQgbWFuIGFsaXZlLCBoYWQgYSBzcGlyaXQgYXMgdGltb3JvdXMgYXMgdGhpcywgYW5kIHNvIGZ1bGwgb2YgYWxsIHRoZSBldmlscyBpbmR1Y2VkIGJ5IGNvd2FyZGljZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB0eXJhbnQncyBzb24sIGFzIEkgaGF2ZSBzYWlkLCBEaW9uIHNhdyB0byBiZSBkd2FyZmVkIGFuZCBkZWZvcm1lZCBpbiBjaGFyYWN0ZXIgZnJvbSBoaXMgbGFjayBvZiBlZHVjYXRpb24sIGFuZCB0aGVyZWZvcmUgZXhob3J0ZWQgaGltIHRvIGFwcGx5IGhpbXNlbGYgdG8gc3R1ZHksIGFuZCB0byB1c2UgZXZlcnkgZW50cmVhdHkgd2l0aCB0aGUgZmlyc3Qgb2YgcGhpbG9zb3BoZXJzIHRvIGNvbWUgdG8gU2ljaWx5LCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQsIHdoZW4gaGUgY2FtZSwgdG8gYmVjb21lIGhpcyBkaXNjaXBsZSwgaW4gb3JkZXIgdGhhdCBoaXMgY2hhcmFjdGVyIG1pZ2h0IGJlIHJlZ3VsYXRlZCBieSB0aGUgcHJpbmNpcGxlcyBvZiB2aXJ0dWUsIGFuZCB0aGF0IGhlIG1pZ2h0IGJlIGNvbmZvcm1lZCB0byB0aGF0IGRpdmluZXN0IGFuZCBtb3N0IGJlYXV0aWZ1bCBtb2RlbCBvZiBhbGwgYmVpbmcsIGluIG9iZWRpZW5jZSB0byB3aG9zZSBkaXJlY3Rpb24gdGhlIHVuaXZlcnNlIGlzc3VlcyBmcm9tIGRpc29yZGVyIGludG8gb3JkZXI7IGluIHRoaXMgd2F5IGhlIHdvdWxkIHByb2N1cmUgZ3JlYXQgaGFwcGluZXNzIGZvciBoaW1zZWxmLCBhbmQgZ3JlYXQgaGFwcGluZXNzIGZvciBoaXMgcGVvcGxlLCBhbmQgdGhhdCBvYmVkaWVuY2Ugd2hpY2ggdGhleSBub3cgcmVuZGVyZWQgZGVqZWN0ZWRseSBhbmQgdW5kZXIgdGhlIGNvbXB1bHNpb24gb2YgaGlzIGF1dGhvcml0eSwgdGhpcyBoaXMgbW9kZXJhdGlvbiBhbmQganVzdGljZSB3b3VsZCBiYXNlIHVwb24gZ29vZHdpbGwgYW5kIGEgZmlsaWFsIHNwaXJpdCwgYW5kIGhlIHdvdWxkIGJlY29tZSBhIGtpbmcgaW5zdGVhZCBvZiBhIHR5cmFudC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFkYW1hbnRpbmUgYm9uZHM8L3E+IG9mIHNvdmVyZWlnbnR5IHdlcmUgbm90LCBhcyBoaXMgZmF0aGVyIHVzZWQgdG8gc2F5LCBmZWFyIGFuZCBmb3JjZSBhbmQgYSBtdWx0aXR1ZGUgb2Ygc2hpcHMgYW5kIG51bWJlcmxlc3MgYmFyYmFyaWFuIGJvZHktZ3VhcmRzLCBidXQgZ29vZHdpbGwgYW5kIGFyZG91ciBhbmQgZmF2b3VyIGVuZ2VuZGVyZWQgYnkgdmlydHVlIGFuZCBqdXN0aWNlOyB0aGVzZSwgdGhvdWdoIHRoZXkgd2VyZSBtb3JlIGZsZXhpYmxlIHRoYW4gdGhlIGJvbmRzIG9mIHNldmVyaXR5IGFuZCBoYXJzaG5lc3MsIHdlcmUgc3Ryb25nZXIgdG8gbWFpbnRhaW4gYSBsYXN0aW5nIGxlYWRlcnNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIGFsbCB0aGlzLCBpdCB3YXMgbWVhbiBhbmQgc3Bpcml0bGVzcyBpbiBhIHJ1bGVyLCB3aGlsZSBoaXMgYm9keSB3YXMgbWFnbmlmaWNlbnRseSBjbG90aGVkIGFuZCBoaXMgaGFiaXRhdGlvbiByZXNwbGVuZGVudCB3aXRoIGx1eHVyaW91cyBmdXJuaXNoaW5ncywgdG8gYmUgbm8gbW9yZSBtYWplc3RpYyBpbiBoaXMgaW50ZXJjb3Vyc2UgYW5kIGNvbnZlcnNhdGlvbiB0aGFuIGFuIG9yZGluYXJ5IG1hbiwgYW5kIG5vdCB0byBpbnNpc3QgdGhhdCB0aGUgcm95YWwgcGFsYWNlIG9mIGhpcyBzb3VsIHNob3VsZCBiZSBhZG9ybmVkIGluIG1lZXQgYW5kIHJveWFsIGZhc2hpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB0eXJhbnQncyBzb24sIGFzIEkgaGF2ZSBzYWlkLCBEaW9uIHNhdyB0byBiZSBkd2FyZmVkIGFuZCBkZWZvcm1lZCBpbiBjaGFyYWN0ZXIgZnJvbSBoaXMgbGFjayBvZiBlZHVjYXRpb24sIGFuZCB0aGVyZWZvcmUgZXhob3J0ZWQgaGltIHRvIGFwcGx5IGhpbXNlbGYgdG8gc3R1ZHksIGFuZCB0byB1c2UgZXZlcnkgZW50cmVhdHkgd2l0aCB0aGUgZmlyc3Qgb2YgcGhpbG9zb3BoZXJzIHRvIGNvbWUgdG8gU2ljaWx5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCwgd2hlbiBoZSBjYW1lLCB0byBiZWNvbWUgaGlzIGRpc2NpcGxlLCBpbiBvcmRlciB0aGF0IGhpcyBjaGFyYWN0ZXIgbWlnaHQgYmUgcmVndWxhdGVkIGJ5IHRoZSBwcmluY2lwbGVzIG9mIHZpcnR1ZSwgYW5kIHRoYXQgaGUgbWlnaHQgYmUgY29uZm9ybWVkIHRvIHRoYXQgZGl2aW5lc3QgYW5kIG1vc3QgYmVhdXRpZnVsIG1vZGVsIG9mIGFsbCBiZWluZywgaW4gb2JlZGllbmNlIHRvIHdob3NlIGRpcmVjdGlvbiB0aGUgdW5pdmVyc2UgaXNzdWVzIGZyb20gZGlzb3JkZXIgaW50byBvcmRlcjsgaW4gdGhpcyB3YXkgaGUgd291bGQgcHJvY3VyZSBncmVhdCBoYXBwaW5lc3MgZm9yIGhpbXNlbGYsIGFuZCBncmVhdCBoYXBwaW5lc3MgZm9yIGhpcyBwZW9wbGUsIGFuZCB0aGF0IG9iZWRpZW5jZSB3aGljaCB0aGV5IG5vdyByZW5kZXJlZCBkZWplY3RlZGx5IGFuZCB1bmRlciB0aGUgY29tcHVsc2lvbiBvZiBoaXMgYXV0aG9yaXR5LCB0aGlzIGhpcyBtb2RlcmF0aW9uIGFuZCBqdXN0aWNlIHdvdWxkIGJhc2UgdXBvbiBnb29kd2lsbCBhbmQgYSBmaWxpYWwgc3Bpcml0LCBhbmQgaGUgd291bGQgYmVjb21lIGEga2luZyBpbnN0ZWFkIG9mIGEgdHlyYW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmFkYW1hbnRpbmUgYm9uZHM8L3E+IG9mIHNvdmVyZWlnbnR5IHdlcmUgbm90LCBhcyBoaXMgZmF0aGVyIHVzZWQgdG8gc2F5LCBmZWFyIGFuZCBmb3JjZSBhbmQgYSBtdWx0aXR1ZGUgb2Ygc2hpcHMgYW5kIG51bWJlcmxlc3MgYmFyYmFyaWFuIGJvZHktZ3VhcmRzLCBidXQgZ29vZHdpbGwgYW5kIGFyZG91ciBhbmQgZmF2b3VyIGVuZ2VuZGVyZWQgYnkgdmlydHVlIGFuZCBqdXN0aWNlOyB0aGVzZSwgdGhvdWdoIHRoZXkgd2VyZSBtb3JlIGZsZXhpYmxlIHRoYW4gdGhlIGJvbmRzIG9mIHNldmVyaXR5IGFuZCBoYXJzaG5lc3MsIHdlcmUgc3Ryb25nZXIgdG8gbWFpbnRhaW4gYSBsYXN0aW5nIGxlYWRlcnNoaXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBiZXNpZGVzIGFsbCB0aGlzLCBpdCB3YXMgbWVhbiBhbmQgc3Bpcml0bGVzcyBpbiBhIHJ1bGVyLCB3aGlsZSBoaXMgYm9keSB3YXMgbWFnbmlmaWNlbnRseSBjbG90aGVkIGFuZCBoaXMgaGFiaXRhdGlvbiByZXNwbGVuZGVudCB3aXRoIGx1eHVyaW91cyBmdXJuaXNoaW5ncywgdG8gYmUgbm8gbW9yZSBtYWplc3RpYyBpbiBoaXMgaW50ZXJjb3Vyc2UgYW5kIGNvbnZlcnNhdGlvbiB0aGFuIGFuIG9yZGluYXJ5IG1hbiwgYW5kIG5vdCB0byBpbnNpc3QgdGhhdCB0aGUgcm95YWwgcGFsYWNlIG9mIGhpcyBzb3VsIHNob3VsZCBiZSBhZG9ybmVkIGluIG1lZXQgYW5kIHJveWFsIGZhc2hpb24uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNpbmNlIERpb24gZnJlcXVlbnRseSBnYXZlIGhpbSBzdWNoIGFkdmljZSwgYW5kIGFydGZ1bGx5IG1pbmdsZWQgd2l0aCBpdCBzb21lIG9mIFBsYXRvJ3MgZG9jdHJpbmVzLCBEaW9ueXNpdXMgd2FzIHNlaXplZCB3aXRoIGEga2VlbiBhbmQgZXZlbiBmcmVuemllZCBwYXNzaW9uIGZvciB0aGUgdGVhY2hpbmdzIGFuZCBjb21wYW5pb25zaGlwIG9mIFBsYXRvLiBBdCBvbmNlLCB0aGVuLCBtYW55IGxldHRlcnMgYmVnYW4gdG8gY29tZSB0byBBdGhlbnMgZnJvbSBEaW9ueXNpdXMsIGFuZCBtYW55IGluanVuY3Rpb25zIGZyb20gRGlvbiwgYXMgd2VsbCBhcyBvdGhlcnMgZnJvbSB0aGUgUHl0aGFnb3JlYW4gcGhpbG9zb3BoZXJzIG9mIEl0YWx5LCBhbGwgb2Ygd2hvbSB1cmdlZCBQbGF0byB0byBjb21lIGFuZCBnZXQgY29udHJvbCBvZiBhIHlvdXRoZnVsIHNvdWwgbm93IHRvc3NlZCBhYm91dCBvbiBhIHNlYSBvZiBncmVhdCBhdXRob3JpdHkgYW5kIHBvd2VyLCBhbmQgc3RlYWR5IGl0IGJ5IGhpcyB3ZWlnaHR5IHJlYXNvbmluZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBsYXRvLCBhY2NvcmRpbmdseSwgYXMgaGUgdGVsbHMgdXMgaGltc2VsZiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDcuMzI4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkVwaXN0LjwvdGl0bGU+IHZpaS4gcC4gMzI4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBvdXQgb2Ygc2hhbWUgbW9yZSB0aGFuIGFueSB0aGluZyBlbHNlLCBsZXN0IG1lbiBzaG91bGQgdGhpbmsgaGltIG5vdGhpbmcgYnV0IHRoZW9yeSBhbmQgdW53aWxsaW5nIHRvIHRha2UgYW55IGFjdGlvbjsgYW5kIGZ1cnRoZXIsIGJlY2F1c2UgaGUgZXhwZWN0ZWQgdGhhdCBieSB0aGUgcHVyaWZpY2F0aW9uIG9mIG9uZSBtYW4sIHdobyB3YXMsIGFzIGl0IHdlcmUsIGEgY29udHJvbGxpbmcgZmFjdG9yLCBoZSB3b3VsZCBjdXJlIGFsbCBTaWNpbHkgb2YgaGVyIGRpc3RlbXBlcnMsIHlpZWxkZWQgdG8gdGhlc2UgcmVxdWVzdHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2luY2UgRGlvbiBmcmVxdWVudGx5IGdhdmUgaGltIHN1Y2ggYWR2aWNlLCBhbmQgYXJ0ZnVsbHkgbWluZ2xlZCB3aXRoIGl0IHNvbWUgb2YgUGxhdG8ncyBkb2N0cmluZXMsIERpb255c2l1cyB3YXMgc2VpemVkIHdpdGggYSBrZWVuIGFuZCBldmVuIGZyZW56aWVkIHBhc3Npb24gZm9yIHRoZSB0ZWFjaGluZ3MgYW5kIGNvbXBhbmlvbnNoaXAgb2YgUGxhdG8uIEF0IG9uY2UsIHRoZW4sIG1hbnkgbGV0dGVycyBiZWdhbiB0byBjb21lIHRvIEF0aGVucyBmcm9tIERpb255c2l1cywgYW5kIG1hbnkgaW5qdW5jdGlvbnMgZnJvbSBEaW9uLCBhcyB3ZWxsIGFzIG90aGVycyBmcm9tIHRoZSBQeXRoYWdvcmVhbiBwaGlsb3NvcGhlcnMgb2YgSXRhbHksIGFsbCBvZiB3aG9tIHVyZ2VkIFBsYXRvIHRvIGNvbWUgYW5kIGdldCBjb250cm9sIG9mIGEgeW91dGhmdWwgc291bCBub3cgdG9zc2VkIGFib3V0IG9uIGEgc2VhIG9mIGdyZWF0IGF1dGhvcml0eSBhbmQgcG93ZXIsIGFuZCBzdGVhZHkgaXQgYnkgaGlzIHdlaWdodHkgcmVhc29uaW5ncy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBsYXRvLCBhY2NvcmRpbmdseSwgYXMgaGUgdGVsbHMgdXMgaGltc2VsZiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA3LjMyOCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXN0LjwvdGl0bGU+IHZpaS4gcC4gMzI4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBvdXQgb2Ygc2hhbWUgbW9yZSB0aGFuIGFueSB0aGluZyBlbHNlLCBsZXN0IG1lbiBzaG91bGQgdGhpbmsgaGltIG5vdGhpbmcgYnV0IHRoZW9yeSBhbmQgdW53aWxsaW5nIHRvIHRha2UgYW55IGFjdGlvbjsgYW5kIGZ1cnRoZXIsIGJlY2F1c2UgaGUgZXhwZWN0ZWQgdGhhdCBieSB0aGUgcHVyaWZpY2F0aW9uIG9mIG9uZSBtYW4sIHdobyB3YXMsIGFzIGl0IHdlcmUsIGEgY29udHJvbGxpbmcgZmFjdG9yLCBoZSB3b3VsZCBjdXJlIGFsbCBTaWNpbHkgb2YgaGVyIGRpc3RlbXBlcnMsIHlpZWxkZWQgdG8gdGhlc2UgcmVxdWVzdHMuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDcuMzI4IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4gdmlpLiBwLiAzMjguPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC48L3RpdGxlPiB2aWkuIHAuIDMyOC48cCBjbGFzcz0idHJhbnNsYXRpb24iPkJ1dCB0aGUgZW5lbWllcyBvZiBEaW9uLCBhZnJhaWQgb2YgdGhlIGFsdGVyYXRpb24gaW4gRGlvbnlzaXVzLCBwZXJzdWFkZWQgaGltIHRvIHJlY2FsbCBmcm9tIGV4aWxlIFBoaWxpc3R1cywgYSBtYW4gdmVyc2VkIGluIGxldHRlcnMgYW5kIGFjcXVhaW50ZWQgd2l0aCB0aGUgd2F5cyBvZiB0eXJhbnRzLCB0aGF0IHRoZXkgbWlnaHQgaGF2ZSBpbiBoaW0gYSBjb3VudGVycG9pc2UgdG8gUGxhdG8gYW5kIHBoaWxvc29waHkuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIFBoaWxpc3R1cyBhdCB0aGUgb3V0c2V0IGhhZCBtb3N0IHplYWxvdXNseSBhc3Npc3RlZCBpbiBlc3RhYmxpc2hpbmcgdGhlIHR5cmFubnksIGFuZCBmb3IgYSBsb25nIHRpbWUgd2FzIGNvbW1hbmRlciBvZiB0aGUgZ2Fycmlzb24gdGhhdCBndWFyZGVkIHRoZSBjaXRhZGVsLiBUaGVyZSB3YXMgYSBzdG9yeSwgdG9vLCB0aGF0IGhlIHdhcyB2ZXJ5IGludGltYXRlIHdpdGggdGhlIG1vdGhlciBvZiB0aGUgZWxkZXIgRGlvbnlzaXVzLCBhbmQgdGhhdCB0aGUgdHlyYW50IHdhcyBub3Qgd2hvbGx5IGlnbm9yYW50IG9mIHRoZSBmYWN0LiBCdXQgd2hlbiBMZXB0aW5lcywgd2hvIGhhZCB0d28gZGF1Z2h0ZXJzIGJ5IGEgd29tYW4gd2hvbSBoZSBoYWQgY29ycnVwdGVkIHdoZW4gc2hlIHdhcyBsaXZpbmcgd2l0aCBhbm90aGVyIG1hbiBhbmQgdGhlbiB0YWtlbiB0byB3aWZlLCBnYXZlIG9uZSBvZiB0aGVtIHRvIFBoaWxpc3R1cyB3aXRob3V0IHNvIG11Y2ggYXMgdGVsbGluZyBEaW9ueXNpdXMsIHRoZSB0eXJhbnQgd2FzIHdyb3RoLCBwdXQgdGhlIHdpZmUgb2YgTGVwdGluZXMgaW50byBmZXR0ZXJzIGFuZCBwcmlzb24sIGFuZCBiYW5pc2hlZCBQaGlsaXN0dXMgZnJvbSBTaWNpbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpc3R1cyB0b29rIHJlZnVnZSB3aXRoIHNvbWUgZnJpZW5kcyBpbiBBZHJpYSwgYW5kIHRoZXJlLCBpdCB3b3VsZCBzZWVtLCBpbiBoaXMgbGVpc3VyZSwgY29tcG9zZWQgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgaGlzdG9yeS4gRm9yIGhlIGRpZCBub3QgcmV0dXJuIHRvIFN5cmFjdXNlIHdoaWxlIHRoZSBlbGRlciBEaW9ueXNpdXMgd2FzIGFsaXZlLCBidXQgYWZ0ZXIgaGlzIGRlYXRoLCBhcyBJIGhhdmUgc2FpZCwgdGhlIGVudnkgd2hpY2ggdGhlIG90aGVyIGNvdXJ0aWVycyBmZWx0IHRvd2FyZHMgRGlvbiBicm91Z2h0IGFib3V0IGhpcyByZWNhbGw7IHRoZXkgdGhvdWdodCBoaW0gYSBtb3JlIHN1aXRhYmxlIG1hbiBmb3IgdGhlaXIgcHVycG9zZXMsIGFuZCBhIHN0YXVuY2hlciBmcmllbmQgb2YgdGhlIHR5cmFubnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBQaGlsaXN0dXMgYXQgdGhlIG91dHNldCBoYWQgbW9zdCB6ZWFsb3VzbHkgYXNzaXN0ZWQgaW4gZXN0YWJsaXNoaW5nIHRoZSB0eXJhbm55LCBhbmQgZm9yIGEgbG9uZyB0aW1lIHdhcyBjb21tYW5kZXIgb2YgdGhlIGdhcnJpc29uIHRoYXQgZ3VhcmRlZCB0aGUgY2l0YWRlbC4gVGhlcmUgd2FzIGEgc3RvcnksIHRvbywgdGhhdCBoZSB3YXMgdmVyeSBpbnRpbWF0ZSB3aXRoIHRoZSBtb3RoZXIgb2YgdGhlIGVsZGVyIERpb255c2l1cywgYW5kIHRoYXQgdGhlIHR5cmFudCB3YXMgbm90IHdob2xseSBpZ25vcmFudCBvZiB0aGUgZmFjdC4gQnV0IHdoZW4gTGVwdGluZXMsIHdobyBoYWQgdHdvIGRhdWdodGVycyBieSBhIHdvbWFuIHdob20gaGUgaGFkIGNvcnJ1cHRlZCB3aGVuIHNoZSB3YXMgbGl2aW5nIHdpdGggYW5vdGhlciBtYW4gYW5kIHRoZW4gdGFrZW4gdG8gd2lmZSwgZ2F2ZSBvbmUgb2YgdGhlbSB0byBQaGlsaXN0dXMgd2l0aG91dCBzbyBtdWNoIGFzIHRlbGxpbmcgRGlvbnlzaXVzLCB0aGUgdHlyYW50IHdhcyB3cm90aCwgcHV0IHRoZSB3aWZlIG9mIExlcHRpbmVzIGludG8gZmV0dGVycyBhbmQgcHJpc29uLCBhbmQgYmFuaXNoZWQgUGhpbGlzdHVzIGZyb20gU2ljaWx5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpc3R1cyB0b29rIHJlZnVnZSB3aXRoIHNvbWUgZnJpZW5kcyBpbiBBZHJpYSwgYW5kIHRoZXJlLCBpdCB3b3VsZCBzZWVtLCBpbiBoaXMgbGVpc3VyZSwgY29tcG9zZWQgdGhlIGdyZWF0ZXIgcGFydCBvZiBoaXMgaGlzdG9yeS4gRm9yIGhlIGRpZCBub3QgcmV0dXJuIHRvIFN5cmFjdXNlIHdoaWxlIHRoZSBlbGRlciBEaW9ueXNpdXMgd2FzIGFsaXZlLCBidXQgYWZ0ZXIgaGlzIGRlYXRoLCBhcyBJIGhhdmUgc2FpZCwgdGhlIGVudnkgd2hpY2ggdGhlIG90aGVyIGNvdXJ0aWVycyBmZWx0IHRvd2FyZHMgRGlvbiBicm91Z2h0IGFib3V0IGhpcyByZWNhbGw7IHRoZXkgdGhvdWdodCBoaW0gYSBtb3JlIHN1aXRhYmxlIG1hbiBmb3IgdGhlaXIgcHVycG9zZXMsIGFuZCBhIHN0YXVuY2hlciBmcmllbmQgb2YgdGhlIHR5cmFubnkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlBoaWxpc3R1cywgdGhlbiwgYXMgc29vbiBhcyBoZSBoYWQgcmV0dXJuZWQsIHdhcyBpbiBjbG9zZSB0b3VjaCB3aXRoIHRoZSB0eXJhbm55OyBhbmQgdGhlcmUgd2VyZSBvdGhlcnMgYWxzbyB3aG8gYnJvdWdodCBzbGFuZGVycyBhbmQgYWNjdXNhdGlvbnMgYWdhaW5zdCBEaW9uIHRvIHRoZSB0eXJhbnQsIGFsbGVnaW5nIHRoYXQgaGUgaGFkIGJlZW4gaW4gY29uZmVyZW5jZSB3aXRoIFRoZW9kb3RlcyBhbmQgSGVyYWNsZWlkZXMgY29uY2VybmluZyBhIHN1YnZlcnNpb24gb2YgdGhlIGdvdmVybm1lbnQuIEZvciBEaW9uIGhhZCBob3BlcywgYXMgaXQgc2VlbXMgbGlrZWx5LCB0aGF0IGJ5IG1lYW5zIG9mIHRoZSB2aXNpdCBvZiBQbGF0byBoZSBjb3VsZCBtaXRpZ2F0ZSB0aGUgYXJyb2dhbmNlIGFuZCBleGNlc3NpdmUgc2V2ZXJpdHkgb2YgdGhlIHR5cmFubnksIGFuZCBjb252ZXJ0IERpb255c2l1cyBpbnRvIGEgZml0IGFuZCBsYXdmdWwgcnVsZXI7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpZiBEaW9ueXNpdXMgc2hvdWxkIG9wcG9zZSBoaXMgZWZmb3J0cyBhbmQgcmVmdXNlIHRvIGJlIHNvZnRlbmVkLCBoZSBoYWQgZGV0ZXJtaW5lZCB0byBkZXBvc2UgaGltIGFuZCByZXN0b3JlIHRoZSBjaXZpbCBwb3dlciB0byB0aGUgU3lyYWN1c2FuIHBlb3BsZTsgbm90IHRoYXQgaGUgYXBwcm92ZWQgb2YgYSBkZW1vY3JhY3ksIGJ1dCBoZSB0aG91Z2h0IGl0IGFsdG9nZXRoZXIgYmV0dGVyIHRoYW4gYSB0eXJhbm55IGluIGxhY2sgb2YgYSBzb3VuZCBhbmQgaGVhbHRoeSBhcmlzdG9jcmFjeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGhpbGlzdHVzLCB0aGVuLCBhcyBzb29uIGFzIGhlIGhhZCByZXR1cm5lZCwgd2FzIGluIGNsb3NlIHRvdWNoIHdpdGggdGhlIHR5cmFubnk7IGFuZCB0aGVyZSB3ZXJlIG90aGVycyBhbHNvIHdobyBicm91Z2h0IHNsYW5kZXJzIGFuZCBhY2N1c2F0aW9ucyBhZ2FpbnN0IERpb24gdG8gdGhlIHR5cmFudCwgYWxsZWdpbmcgdGhhdCBoZSBoYWQgYmVlbiBpbiBjb25mZXJlbmNlIHdpdGggVGhlb2RvdGVzIGFuZCBIZXJhY2xlaWRlcyBjb25jZXJuaW5nIGEgc3VidmVyc2lvbiBvZiB0aGUgZ292ZXJubWVudC4gRm9yIERpb24gaGFkIGhvcGVzLCBhcyBpdCBzZWVtcyBsaWtlbHksIHRoYXQgYnkgbWVhbnMgb2YgdGhlIHZpc2l0IG9mIFBsYXRvIGhlIGNvdWxkIG1pdGlnYXRlIHRoZSBhcnJvZ2FuY2UgYW5kIGV4Y2Vzc2l2ZSBzZXZlcml0eSBvZiB0aGUgdHlyYW5ueSwgYW5kIGNvbnZlcnQgRGlvbnlzaXVzIGludG8gYSBmaXQgYW5kIGxhd2Z1bCBydWxlcjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpZiBEaW9ueXNpdXMgc2hvdWxkIG9wcG9zZSBoaXMgZWZmb3J0cyBhbmQgcmVmdXNlIHRvIGJlIHNvZnRlbmVkLCBoZSBoYWQgZGV0ZXJtaW5lZCB0byBkZXBvc2UgaGltIGFuZCByZXN0b3JlIHRoZSBjaXZpbCBwb3dlciB0byB0aGUgU3lyYWN1c2FuIHBlb3BsZTsgbm90IHRoYXQgaGUgYXBwcm92ZWQgb2YgYSBkZW1vY3JhY3ksIGJ1dCBoZSB0aG91Z2h0IGl0IGFsdG9nZXRoZXIgYmV0dGVyIHRoYW4gYSB0eXJhbm55IGluIGxhY2sgb2YgYSBzb3VuZCBhbmQgaGVhbHRoeSBhcmlzdG9jcmFjeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIGNvbmRpdGlvbiBvZiBhZmZhaXJzIHdoZW4gUGxhdG8gY2FtZSB0byBTaWNpbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U29vbiBhZnRlciAzNjggQi5DLjwvbm90ZT4gYW5kIGluIHRoZSBmaXJzdCBpbnN0YW5jZXMgaGUgbWV0IHdpdGggYXN0b25pc2hpbmcgZnJpZW5kbGluZXNzIGFuZCBob25vdXIuIEZvciBhIHJveWFsIGNoYXJpb3QsIG1hZ25pZmljZW50bHkgYWRvcm5lZCwgYXdhaXRlZCBoaW0gYXMgaGUgbGVmdCBoaXMgdHJpcmVtZSwgYW5kIHRoZSB0eXJhbnQgb2ZmZXJlZCBhIHNhY3JpZmljZSBvZiB0aGFua3NnaXZpbmcgZm9yIHRoZSBncmVhdCBibGVzc2luZyB0aGF0IGhhZCBiZWVuIGJlc3Rvd2VkIHVwb24gaGlzIGdvdmVybm1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbW9kZXN0eSB0aGF0IGNoYXJhY3Rlcml6ZWQgaGlzIGJhbnF1ZXRzLCB0aGUgZGVjb3J1bSBvZiB0aGUgY291cnRpZXJzLCBhbmQgdGhlIG1pbGRuZXNzIG9mIHRoZSB0eXJhbnQgaGltc2VsZiBpbiBhbGwgaGlzIGRlYWxpbmdzIHdpdGggdGhlIHB1YmxpYywgaW5zcGlyZWQgdGhlIGNpdGl6ZW5zIHdpdGggbWFydmVsbG91cyBob3BlcyBvZiBoaXMgcmVmb3JtYXRpb24uIFRoZXJlIHdhcyBhbHNvIHNvbWV0aGluZyBsaWtlIGEgZ2VuZXJhbCBydXNoIGZvciBsZXR0ZXJzIGFuZCBwaGlsb3NvcGh5LCBhbmQgdGhlIHBhbGFjZSB3YXMgZmlsbGVkIHdpdGggZHVzdCwgYXMgdGhleSBzYXksIG93aW5nIHRvIHRoZSBtdWx0aXR1ZGUgb2YgZ2VvbWV0cmljaWFucyB0aGVyZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5HZW9tZXRyaWNhbCBmaWd1cmVzIHdlcmUgdHJhY2VkIGluIGxvb3NlIHNhbmQgc3RyZXduIHVwb24gdGhlIGZsb29yLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBhIGZldyBkYXlzIGhhZCBwYXNzZWQsIHRoZXJlIHdhcyBvbmUgb2YgdGhlIGN1c3RvbWFyeSBzYWNyaWZpY2VzIG9mIHRoZSBjb3VudHJ5IGluIHRoZSBwYWxhY2UgZ3JvdW5kczsgYW5kIHdoZW4gdGhlIGhlcmFsZCwgYXMgd2FzIHRoZSBjdXN0b20sIHByYXllZCB0aGF0IHRoZSB0eXJhbm55IG1pZ2h0IGFiaWRlIHVuc2hha2VuIGZvciBtYW55IGdlbmVyYXRpb25zLCBpdCBpcyBzYWlkIHRoYXQgRGlvbnlzaXVzLCB3aG8gd2FzIHN0YW5kaW5nIG5lYXIsIGNyaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlN0b3AgY3Vyc2luZyB1cyE8L3E+IFRoaXMgcXVpdGUgdmV4ZWQgUGhpbGlzdHVzIGFuZCBoaXMgcGFydHksIHdobyB0aG91Z2h0IHRoYXQgdGltZSBhbmQgZmFtaWxpYXJpdHkgd291bGQgcmVuZGVyIFBsYXRvJ3MgaW5mbHVlbmNlIGFsbW9zdCBpcnJlc2lzdGlibGUsIGlmIG5vdywgYWZ0ZXIgYSBicmllZiBpbnRpbWFjeSwgaGUgaGFkIHNvIGFsdGVyZWQgYW5kIHRyYW5zZm9ybWVkIHRoZSBzZW50aW1lbnRzIG9mIHRoZSB5b3V0aGZ1bCBwcmluY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB3YXMgdGhlIGNvbmRpdGlvbiBvZiBhZmZhaXJzIHdoZW4gUGxhdG8gY2FtZSB0byBTaWNpbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Tb29uIGFmdGVyIDM2OCBCLkMuPC9ub3RlPiBhbmQgaW4gdGhlIGZpcnN0IGluc3RhbmNlcyBoZSBtZXQgd2l0aCBhc3RvbmlzaGluZyBmcmllbmRsaW5lc3MgYW5kIGhvbm91ci4gRm9yIGEgcm95YWwgY2hhcmlvdCwgbWFnbmlmaWNlbnRseSBhZG9ybmVkLCBhd2FpdGVkIGhpbSBhcyBoZSBsZWZ0IGhpcyB0cmlyZW1lLCBhbmQgdGhlIHR5cmFudCBvZmZlcmVkIGEgc2FjcmlmaWNlIG9mIHRoYW5rc2dpdmluZyBmb3IgdGhlIGdyZWF0IGJsZXNzaW5nIHRoYXQgaGFkIGJlZW4gYmVzdG93ZWQgdXBvbiBoaXMgZ292ZXJubWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgbW9kZXN0eSB0aGF0IGNoYXJhY3Rlcml6ZWQgaGlzIGJhbnF1ZXRzLCB0aGUgZGVjb3J1bSBvZiB0aGUgY291cnRpZXJzLCBhbmQgdGhlIG1pbGRuZXNzIG9mIHRoZSB0eXJhbnQgaGltc2VsZiBpbiBhbGwgaGlzIGRlYWxpbmdzIHdpdGggdGhlIHB1YmxpYywgaW5zcGlyZWQgdGhlIGNpdGl6ZW5zIHdpdGggbWFydmVsbG91cyBob3BlcyBvZiBoaXMgcmVmb3JtYXRpb24uIFRoZXJlIHdhcyBhbHNvIHNvbWV0aGluZyBsaWtlIGEgZ2VuZXJhbCBydXNoIGZvciBsZXR0ZXJzIGFuZCBwaGlsb3NvcGh5LCBhbmQgdGhlIHBhbGFjZSB3YXMgZmlsbGVkIHdpdGggZHVzdCwgYXMgdGhleSBzYXksIG93aW5nIHRvIHRoZSBtdWx0aXR1ZGUgb2YgZ2VvbWV0cmljaWFucyB0aGVyZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkdlb21ldHJpY2FsIGZpZ3VyZXMgd2VyZSB0cmFjZWQgaW4gbG9vc2Ugc2FuZCBzdHJld24gdXBvbiB0aGUgZmxvb3IuPC9ub3RlPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgZmV3IGRheXMgaGFkIHBhc3NlZCwgdGhlcmUgd2FzIG9uZSBvZiB0aGUgY3VzdG9tYXJ5IHNhY3JpZmljZXMgb2YgdGhlIGNvdW50cnkgaW4gdGhlIHBhbGFjZSBncm91bmRzOyBhbmQgd2hlbiB0aGUgaGVyYWxkLCBhcyB3YXMgdGhlIGN1c3RvbSwgcHJheWVkIHRoYXQgdGhlIHR5cmFubnkgbWlnaHQgYWJpZGUgdW5zaGFrZW4gZm9yIG1hbnkgZ2VuZXJhdGlvbnMsIGl0IGlzIHNhaWQgdGhhdCBEaW9ueXNpdXMsIHdobyB3YXMgc3RhbmRpbmcgbmVhciwgY3JpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdG9wIGN1cnNpbmcgdXMhPC9xPiBUaGlzIHF1aXRlIHZleGVkIFBoaWxpc3R1cyBhbmQgaGlzIHBhcnR5LCB3aG8gdGhvdWdodCB0aGF0IHRpbWUgYW5kIGZhbWlsaWFyaXR5IHdvdWxkIHJlbmRlciBQbGF0bydzIGluZmx1ZW5jZSBhbG1vc3QgaXJyZXNpc3RpYmxlLCBpZiBub3csIGFmdGVyIGEgYnJpZWYgaW50aW1hY3ksIGhlIGhhZCBzbyBhbHRlcmVkIGFuZCB0cmFuc2Zvcm1lZCB0aGUgc2VudGltZW50cyBvZiB0aGUgeW91dGhmdWwgcHJpbmNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHRoZXJlZm9yZSBubyBsb25nZXIgYWJ1c2VkIERpb24gb25lIGJ5IG9uZSBhbmQgc2VjcmV0bHksIGJ1dCBhbGwgdG9nZXRoZXIgYW5kIG9wZW5seSwgc2F5aW5nIHRoYXQgaGUgd2FzIG1hbmlmZXN0bHkgZW5jaGFudGluZyBhbmQgYmV3aXRjaGluZyBEaW9ueXNpdXMgd2l0aCBQbGF0bydzIGRvY3RyaW5lcywgaW4gb3JkZXIgdGhhdCB0aGUgdHlyYW50IG1pZ2h0IG9mIGhpcyBvd24gYWNjb3JkIHJlbGlucXVpc2ggYW5kIGdpdmUgdXAgdGhlIHBvd2VyLCB3aGljaCBEaW9uIHdvdWxkIHRoZW4gYXNzdW1lIGFuZCBkZXZvbHZlIHVwb24gdGhlIGNoaWxkcmVuIG9mIEFyaXN0b21hY2hlLCB3aG9zZSB1bmNsZSBoZSB3YXMuIEFuZCBzb21lIHByZXRlbmRlZCB0byBiZSBpbmRpZ25hbnQgdGhhdCB0aGUgQXRoZW5pYW5zLCB3aG8gaW4gZm9ybWVyIHRpbWVzIGhhZCBzYWlsZWQgdG8gU2ljaWx5IHdpdGggbGFyZ2UgbGFuZCBhbmQgc2VhIGZvcmNlcywgYnV0IGhhZCBwZXJpc2hlZCB1dHRlcmx5IHdpdGhvdXQgdGFraW5nIFN5cmFjdXNlLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5zaG91bGQgbm93LCBieSBtZWFucyBvZiBvbmUgc29waGlzdCwgb3ZlcnRocm93IHRoZSB0eXJhbm55IG9mIERpb255c2l1cywgYnkgcGVyc3VhZGluZyBoaW0gdG8gZGlzbWlzcyBoaXMgdGVuIHRob3VzYW5kIGJvZHktZ3VhcmRzLCBhbmQgYWJhbmRvbiBoaXMgZm91ciBodW5kcmVkIHRyaXJlbWVzIGFuZCBoaXMgdGVuIHRob3VzYW5kIGhvcnNlbWVuIGFuZCBoaXMgbWFueSB0aW1lcyB0aGF0IG51bWJlciBvZiBtZW4tYXQtYXJtcywgaW4gb3JkZXIgdG8gc2VlayBpbiBBY2FkZW1pYyBwaGlsb3NvcGh5IGZvciBhIG15c3RlcmlvdXMgZ29vZCwgYW5kIG1ha2UgZ2VvbWV0cnkgaGlzIGd1aWRlIHRvIGhhcHBpbmVzcywgc3VycmVuZGVyaW5nIHRoZSBoYXBwaW5lc3MgdGhhdCB3YXMgYmFzZWQgb24gZG9taW5pb24gYW5kIHdlYWx0aCBhbmQgbHV4dXJ5IHRvIERpb24gYW5kIERpb24ncyBuZXBoZXdzIGFuZCBuaWVjZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB0aGVyZWZvcmUgbm8gbG9uZ2VyIGFidXNlZCBEaW9uIG9uZSBieSBvbmUgYW5kIHNlY3JldGx5LCBidXQgYWxsIHRvZ2V0aGVyIGFuZCBvcGVubHksIHNheWluZyB0aGF0IGhlIHdhcyBtYW5pZmVzdGx5IGVuY2hhbnRpbmcgYW5kIGJld2l0Y2hpbmcgRGlvbnlzaXVzIHdpdGggUGxhdG8ncyBkb2N0cmluZXMsIGluIG9yZGVyIHRoYXQgdGhlIHR5cmFudCBtaWdodCBvZiBoaXMgb3duIGFjY29yZCByZWxpbnF1aXNoIGFuZCBnaXZlIHVwIHRoZSBwb3dlciwgd2hpY2ggRGlvbiB3b3VsZCB0aGVuIGFzc3VtZSBhbmQgZGV2b2x2ZSB1cG9uIHRoZSBjaGlsZHJlbiBvZiBBcmlzdG9tYWNoZSwgd2hvc2UgdW5jbGUgaGUgd2FzLiBBbmQgc29tZSBwcmV0ZW5kZWQgdG8gYmUgaW5kaWduYW50IHRoYXQgdGhlIEF0aGVuaWFucywgd2hvIGluIGZvcm1lciB0aW1lcyBoYWQgc2FpbGVkIHRvIFNpY2lseSB3aXRoIGxhcmdlIGxhbmQgYW5kIHNlYSBmb3JjZXMsIGJ1dCBoYWQgcGVyaXNoZWQgdXR0ZXJseSB3aXRob3V0IHRha2luZyBTeXJhY3VzZSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnNob3VsZCBub3csIGJ5IG1lYW5zIG9mIG9uZSBzb3BoaXN0LCBvdmVydGhyb3cgdGhlIHR5cmFubnkgb2YgRGlvbnlzaXVzLCBieSBwZXJzdWFkaW5nIGhpbSB0byBkaXNtaXNzIGhpcyB0ZW4gdGhvdXNhbmQgYm9keS1ndWFyZHMsIGFuZCBhYmFuZG9uIGhpcyBmb3VyIGh1bmRyZWQgdHJpcmVtZXMgYW5kIGhpcyB0ZW4gdGhvdXNhbmQgaG9yc2VtZW4gYW5kIGhpcyBtYW55IHRpbWVzIHRoYXQgbnVtYmVyIG9mIG1lbi1hdC1hcm1zLCBpbiBvcmRlciB0byBzZWVrIGluIEFjYWRlbWljIHBoaWxvc29waHkgZm9yIGEgbXlzdGVyaW91cyBnb29kLCBhbmQgbWFrZSBnZW9tZXRyeSBoaXMgZ3VpZGUgdG8gaGFwcGluZXNzLCBzdXJyZW5kZXJpbmcgdGhlIGhhcHBpbmVzcyB0aGF0IHdhcyBiYXNlZCBvbiBkb21pbmlvbiBhbmQgd2VhbHRoIGFuZCBsdXh1cnkgdG8gRGlvbiBhbmQgRGlvbidzIG5lcGhld3MgYW5kIG5pZWNlcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgYSBjb25zZXF1ZW5jZSBvZiBhbGwgdGhpcywgRGlvbnlzaXVzIGJlY2FtZSBhdCBmaXJzdCBzdXNwaWNpb3VzLCBhbmQgYWZ0ZXJ3YXJkcyBtb3JlIG9wZW5seSBhbmdyeSBhbmQgaG9zdGlsZSwgYW5kIGp1c3QgdGhlbiBhIGNlcnRhaW4gbGV0dGVyIHdhcyBzZWNyZXRseSBicm91Z2h0IHRvIGhpbSwgd2hpY2ggRGlvbiBoYWQgd3JpdHRlbiB0byB0aGUgQ2FydGhhZ2luaWFuIG9mZmljaWFscywgdXJnaW5nIHRoZW0sIHdoZW5ldmVyIHRoZXkgc2hvdWxkIHRyZWF0IHdpdGggRGlvbnlzaXVzIGZvciBwZWFjZSwgbm90IHRvIGhvbGQgdGhlaXIgaW50ZXJ2aWV3IHdpdGhvdXQgaW5jbHVkaW5nIGhpbSwgc2luY2UgaGUgd291bGQgaGVscCB0aGVtIHRvIGFycmFuZ2UgZXZlcnl0aGluZyBzZWN1cmVseS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBsZXR0ZXIgRGlvbnlzaXVzIHJlYWQgdG8gUGhpbGlzdHVzLCBhbmQgYWZ0ZXIgY29uc3VsdGluZyB3aXRoIGhpbSwgYWNjb3JkaW5nIHRvIFRpbWFldXMsIGhlIGJlZ3VpbGVkIERpb24gYnkgYSBmZWlnbmVkIHJlY29uY2lsaWF0aW9uLiBUaGF0IGlzLCBhZnRlciBtb2RlcmF0ZSBwcm90ZXN0YXRpb25zIGFuZCBhIGRlY2xhcmF0aW9uIHRoYXQgdGhlaXIgcXVhcnJlbCB3YXMgYXQgYW4gZW5kLCBoZSBsZWQgaGltIG9mZiBhbG9uZSBiZW5lYXRoIHRoZSBhY3JvcG9saXMgZG93biB0byB0aGUgc2VhLCBhbmQgdGhlbiBzaG93ZWQgaGltIHRoZSBsZXR0ZXIgYW5kIGFjY3VzZWQgaGltIG9mIGNvbnNwaXJpbmcgd2l0aCB0aGUgQ2FydGhhZ2luaWFucyBhZ2FpbnN0IGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gRGlvbiB3aXNoZWQgdG8gZGVmZW5kIGhpbXNlbGYsIGhlIHdvdWxkIG5vdCBzdWZmZXIgaXQsIGJ1dCBhdCBvbmNlIHBsYWNlZCBoaW0sIGp1c3QgYXMgaGUgd2FzLCBvbiBib2FyZCBhIHNtYWxsIGJvYXQsIGFuZCBjb21tYW5kZWQgdGhlIHNhaWxvcnMgaW4gaXQgdG8gc2V0IGhpbSBhc2hvcmUgaW4gSXRhbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGEgY29uc2VxdWVuY2Ugb2YgYWxsIHRoaXMsIERpb255c2l1cyBiZWNhbWUgYXQgZmlyc3Qgc3VzcGljaW91cywgYW5kIGFmdGVyd2FyZHMgbW9yZSBvcGVubHkgYW5ncnkgYW5kIGhvc3RpbGUsIGFuZCBqdXN0IHRoZW4gYSBjZXJ0YWluIGxldHRlciB3YXMgc2VjcmV0bHkgYnJvdWdodCB0byBoaW0sIHdoaWNoIERpb24gaGFkIHdyaXR0ZW4gdG8gdGhlIENhcnRoYWdpbmlhbiBvZmZpY2lhbHMsIHVyZ2luZyB0aGVtLCB3aGVuZXZlciB0aGV5IHNob3VsZCB0cmVhdCB3aXRoIERpb255c2l1cyBmb3IgcGVhY2UsIG5vdCB0byBob2xkIHRoZWlyIGludGVydmlldyB3aXRob3V0IGluY2x1ZGluZyBoaW0sIHNpbmNlIGhlIHdvdWxkIGhlbHAgdGhlbSB0byBhcnJhbmdlIGV2ZXJ5dGhpbmcgc2VjdXJlbHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbGV0dGVyIERpb255c2l1cyByZWFkIHRvIFBoaWxpc3R1cywgYW5kIGFmdGVyIGNvbnN1bHRpbmcgd2l0aCBoaW0sIGFjY29yZGluZyB0byBUaW1hZXVzLCBoZSBiZWd1aWxlZCBEaW9uIGJ5IGEgZmVpZ25lZCByZWNvbmNpbGlhdGlvbi4gVGhhdCBpcywgYWZ0ZXIgbW9kZXJhdGUgcHJvdGVzdGF0aW9ucyBhbmQgYSBkZWNsYXJhdGlvbiB0aGF0IHRoZWlyIHF1YXJyZWwgd2FzIGF0IGFuIGVuZCwgaGUgbGVkIGhpbSBvZmYgYWxvbmUgYmVuZWF0aCB0aGUgYWNyb3BvbGlzIGRvd24gdG8gdGhlIHNlYSwgYW5kIHRoZW4gc2hvd2VkIGhpbSB0aGUgbGV0dGVyIGFuZCBhY2N1c2VkIGhpbSBvZiBjb25zcGlyaW5nIHdpdGggdGhlIENhcnRoYWdpbmlhbnMgYWdhaW5zdCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIERpb24gd2lzaGVkIHRvIGRlZmVuZCBoaW1zZWxmLCBoZSB3b3VsZCBub3Qgc3VmZmVyIGl0LCBidXQgYXQgb25jZSBwbGFjZWQgaGltLCBqdXN0IGFzIGhlIHdhcywgb24gYm9hcmQgYSBzbWFsbCBib2F0LCBhbmQgY29tbWFuZGVkIHRoZSBzYWlsb3JzIGluIGl0IHRvIHNldCBoaW0gYXNob3JlIGluIEl0YWx5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHByb2NlZWRpbmcsIHdoaWNoIHNlZW1lZCB0byBtZW4gYSBjcnVlbCBvbmUsIHRoZSB3b21lbiBpbiB0aGUgaG91c2Vob2xkIG9mIHRoZSB0eXJhbnQgcHV0IG9uIG1vdXJuaW5nLCBidXQgdGhlIGNpdGl6ZW5zIG9mIFN5cmFjdXNlIHdlcmUgY2hlZXJlZCBieSB0aGUgZXhwZWN0YXRpb24gb2YgYSByZXZvbHV0aW9uIGFuZCBhIHNwZWVkeSBjaGFuZ2UgaW4gdGhlIGdvdmVybm1lbnQsIHNpbmNlIERpb24ncyB0cmVhdG1lbnQgY2F1c2VkIHN1Y2ggYSBjb21tb3Rpb24gYW5kIHRoZSByZXN0IG9mIHRoZSBjb3VydGllcnMgZGlzdHJ1c3RlZCB0aGUgdHlyYW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5EaW9ueXNpdXMgc2F3IHRoaXMgYW5kIHdhcyBhZnJhaWQsIGFuZCBzb3VnaHQgdG8gY29uc29sZSB0aGUgZnJpZW5kcyBvZiBEaW9uIGFuZCB0aGUgd29tZW4gYnkgc2F5aW5nIHRoYXQgaGUgaGFkIG5vdCBzZW50IERpb24gaW50byBleGlsZSwgYnV0IHVwb24gYSBqb3VybmV5LCBpbiBvcmRlciB0aGF0IGhpcyB3cmF0aCBhdCB0aGUgbWFuJ3Mgc2VsZi13aWxsIHdoZW4gYXQgaG9tZSBtaWdodCBub3QgZHJpdmUgaGltIHRvIGRvIGhpbSBzb21lIHdvcnNlIHdyb25nLiBIZSBhbHNvIGhhbmRlZCBvdmVyIHR3byBzaGlwcyB0byB0aGUga2luc21lbiBvZiBEaW9uIGFuZCBiYWRlIHRoZW0gdG8gcHV0IG9uIGJvYXJkIHdoYXRldmVyIHByb3BlcnR5IGFuZCBzZXJ2YW50cyBvZiBEaW9uJ3MgdGhleSBwbGVhc2VkIGFuZCBjb252ZXkgdGhlbSB0byBoaW0gaW4gUGVsb3Bvbm5lc3VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIERpb24gaGFkIGdyZWF0IHJpY2hlcyBhbmQgYW4gYWxtb3N0IHByaW5jZWx5IHNwbGVuZG91ciBvZiBhcHBvaW50bWVudCBpbiBoaXMgd2F5IG9mIGxpdmluZywgYW5kIHRoaXMgaGlzIGZyaWVuZHMgZ290IHRvZ2V0aGVyIGFuZCBjb252ZXllZCB0byBoaW0uIEJlc2lkZXMsIG1hbnkgb3RoZXIgdGhpbmdzIHdlcmUgc2VudCB0byBoaW0gZnJvbSB0aGUgd29tZW4gb2YgdGhlIGNvdXJ0IGFuZCBmcm9tIGhpcyBhZGhlcmVudHMsIHNvIHRoYXQsIGFzIGZhciBhcyB3ZWFsdGggYW5kIHJpY2hlcyB3ZW50LCBoZSB3YXMgYSBicmlsbGlhbnQgZmlndXJlIGFtb25nIHRoZSBHcmVla3MsIHRvIHdob20gdGhlIGFmZmx1ZW5jZSBvZiB0aGUgZXhpbGUgZ2F2ZSBzb21lIGlkZWEgb2YgdGhlIHBvd2VyIG9mIHRoZSB0eXJhbnQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBwcm9jZWVkaW5nLCB3aGljaCBzZWVtZWQgdG8gbWVuIGEgY3J1ZWwgb25lLCB0aGUgd29tZW4gaW4gdGhlIGhvdXNlaG9sZCBvZiB0aGUgdHlyYW50IHB1dCBvbiBtb3VybmluZywgYnV0IHRoZSBjaXRpemVucyBvZiBTeXJhY3VzZSB3ZXJlIGNoZWVyZWQgYnkgdGhlIGV4cGVjdGF0aW9uIG9mIGEgcmV2b2x1dGlvbiBhbmQgYSBzcGVlZHkgY2hhbmdlIGluIHRoZSBnb3Zlcm5tZW50LCBzaW5jZSBEaW9uJ3MgdHJlYXRtZW50IGNhdXNlZCBzdWNoIGEgY29tbW90aW9uIGFuZCB0aGUgcmVzdCBvZiB0aGUgY291cnRpZXJzIGRpc3RydXN0ZWQgdGhlIHR5cmFudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRpb255c2l1cyBzYXcgdGhpcyBhbmQgd2FzIGFmcmFpZCwgYW5kIHNvdWdodCB0byBjb25zb2xlIHRoZSBmcmllbmRzIG9mIERpb24gYW5kIHRoZSB3b21lbiBieSBzYXlpbmcgdGhhdCBoZSBoYWQgbm90IHNlbnQgRGlvbiBpbnRvIGV4aWxlLCBidXQgdXBvbiBhIGpvdXJuZXksIGluIG9yZGVyIHRoYXQgaGlzIHdyYXRoIGF0IHRoZSBtYW4ncyBzZWxmLXdpbGwgd2hlbiBhdCBob21lIG1pZ2h0IG5vdCBkcml2ZSBoaW0gdG8gZG8gaGltIHNvbWUgd29yc2Ugd3JvbmcuIEhlIGFsc28gaGFuZGVkIG92ZXIgdHdvIHNoaXBzIHRvIHRoZSBraW5zbWVuIG9mIERpb24gYW5kIGJhZGUgdGhlbSB0byBwdXQgb24gYm9hcmQgd2hhdGV2ZXIgcHJvcGVydHkgYW5kIHNlcnZhbnRzIG9mIERpb24ncyB0aGV5IHBsZWFzZWQgYW5kIGNvbnZleSB0aGVtIHRvIGhpbSBpbiBQZWxvcG9ubmVzdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgRGlvbiBoYWQgZ3JlYXQgcmljaGVzIGFuZCBhbiBhbG1vc3QgcHJpbmNlbHkgc3BsZW5kb3VyIG9mIGFwcG9pbnRtZW50IGluIGhpcyB3YXkgb2YgbGl2aW5nLCBhbmQgdGhpcyBoaXMgZnJpZW5kcyBnb3QgdG9nZXRoZXIgYW5kIGNvbnZleWVkIHRvIGhpbS4gQmVzaWRlcywgbWFueSBvdGhlciB0aGluZ3Mgd2VyZSBzZW50IHRvIGhpbSBmcm9tIHRoZSB3b21lbiBvZiB0aGUgY291cnQgYW5kIGZyb20gaGlzIGFkaGVyZW50cywgc28gdGhhdCwgYXMgZmFyIGFzIHdlYWx0aCBhbmQgcmljaGVzIHdlbnQsIGhlIHdhcyBhIGJyaWxsaWFudCBmaWd1cmUgYW1vbmcgdGhlIEdyZWVrcywgdG8gd2hvbSB0aGUgYWZmbHVlbmNlIG9mIHRoZSBleGlsZSBnYXZlIHNvbWUgaWRlYSBvZiB0aGUgcG93ZXIgb2YgdGhlIHR5cmFudC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIFBsYXRvLCBEaW9ueXNpdXMgYXQgb25jZSByZW1vdmVkIGhpbSB0byB0aGUgYWNyb3BvbGlzLCB3aGVyZSBoZSBjb250cml2ZWQgdG8gZ2l2ZSBoaW0gYSBndWFyZCBvZiBob25vdXIgdW5kZXIgcHJldGVuY2Ugb2YgaG9zcGl0YWJsZSBraW5kbmVzcywgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBub3QgYWNjb21wYW55IERpb24gYW5kIGJlYXIgd2l0bmVzcyB0byBoaXMgd3JvbmdzLiBCdXQgYWZ0ZXIgdGltZSBhbmQgaW50ZXJjb3Vyc2UgaGFkIGFjY3VzdG9tZWQgRGlvbnlzaXVzIHRvIHRvbGVyYXRlIGhpcyBzb2NpZXR5IGFuZCBkaXNjb3Vyc2UsIGp1c3QgYXMgYSB3aWxkIGJlYXN0IGxlYXJucyB0byBoYXZlIGRlYWxpbmdzIHdpdGggbWVuLCBoZSBjb25jZWl2ZWQgYSBwYXNzaW9uIGZvciBoaW0gdGhhdCB3YXMgd29ydGh5IG9mIGEgdHlyYW50LCBkZW1hbmRpbmcgdGhhdCBoZSBhbG9uZSBzaG91bGQgaGF2ZSBoaXMgbG92ZSByZXR1cm5lZCBieSBQbGF0byBhbmQgYmUgYWRtaXJlZCBiZXlvbmQgYWxsIG90aGVycywgYW5kIGhlIHdhcyByZWFkeSB0byBlbnRydXN0IFBsYXRvIHdpdGggdGhlIGFkbWluaXN0cmF0aW9uIG9mIHRoZSB0eXJhbm55IGlmIG9ubHkgaGUgd291bGQgbm90IHNldCBoaXMgZnJpZW5kc2hpcCBmb3IgRGlvbiBhYm92ZSB0aGF0IHdoaWNoIGhlIGhhZCBmb3IgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoaXMgcGFzc2lvbiBvZiBoaXMgd2FzIGEgY2FsYW1pdHkgZm9yIFBsYXRvLCBmb3IgdGhlIHR5cmFudCB3YXMgbWFkIHdpdGggamVhbG91c3ksIGFzIGRlc3BlcmF0ZSBsb3ZlcnMgYXJlLCBhbmQgaW4gYSBzaG9ydCBzcGFjZSBvZiB0aW1lIHdvdWxkIG9mdGVuIGJlIGFuZ3J5IHdpdGggaGltIGFuZCBhcyBvZnRlbiBiZWcgdG8gYmUgcmVjb25jaWxlZDsgZm9yIGhlIHdhcyBleHRyYXZhZ2FudGx5IGVhZ2VyIHRvIGhlYXIgaGlzIGRvY3RyaW5lcyBhbmQgc2hhcmUgaW4gaGlzIHBoaWxvc29waGljYWwgcHVyc3VpdHMsIGJ1dCBoZSBkcmVhZGVkIHRoZSBjZW5zdXJlIG9mIHRob3NlIHdobyB0cmllZCB0byBkaXZlcnQgaGltIGZyb20gdGhpcyBjb3Vyc2UgYXMgbGlrZWx5IHRvIGNvcnJ1cHQgaGltLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIFBsYXRvLCBEaW9ueXNpdXMgYXQgb25jZSByZW1vdmVkIGhpbSB0byB0aGUgYWNyb3BvbGlzLCB3aGVyZSBoZSBjb250cml2ZWQgdG8gZ2l2ZSBoaW0gYSBndWFyZCBvZiBob25vdXIgdW5kZXIgcHJldGVuY2Ugb2YgaG9zcGl0YWJsZSBraW5kbmVzcywgaW4gb3JkZXIgdGhhdCBoZSBtaWdodCBub3QgYWNjb21wYW55IERpb24gYW5kIGJlYXIgd2l0bmVzcyB0byBoaXMgd3JvbmdzLiBCdXQgYWZ0ZXIgdGltZSBhbmQgaW50ZXJjb3Vyc2UgaGFkIGFjY3VzdG9tZWQgRGlvbnlzaXVzIHRvIHRvbGVyYXRlIGhpcyBzb2NpZXR5IGFuZCBkaXNjb3Vyc2UsIGp1c3QgYXMgYSB3aWxkIGJlYXN0IGxlYXJucyB0byBoYXZlIGRlYWxpbmdzIHdpdGggbWVuLCBoZSBjb25jZWl2ZWQgYSBwYXNzaW9uIGZvciBoaW0gdGhhdCB3YXMgd29ydGh5IG9mIGEgdHlyYW50LCBkZW1hbmRpbmcgdGhhdCBoZSBhbG9uZSBzaG91bGQgaGF2ZSBoaXMgbG92ZSByZXR1cm5lZCBieSBQbGF0byBhbmQgYmUgYWRtaXJlZCBiZXlvbmQgYWxsIG90aGVycywgYW5kIGhlIHdhcyByZWFkeSB0byBlbnRydXN0IFBsYXRvIHdpdGggdGhlIGFkbWluaXN0cmF0aW9uIG9mIHRoZSB0eXJhbm55IGlmIG9ubHkgaGUgd291bGQgbm90IHNldCBoaXMgZnJpZW5kc2hpcCBmb3IgRGlvbiBhYm92ZSB0aGF0IHdoaWNoIGhlIGhhZCBmb3IgaGltLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhpcyBwYXNzaW9uIG9mIGhpcyB3YXMgYSBjYWxhbWl0eSBmb3IgUGxhdG8sIGZvciB0aGUgdHlyYW50IHdhcyBtYWQgd2l0aCBqZWFsb3VzeSwgYXMgZGVzcGVyYXRlIGxvdmVycyBhcmUsIGFuZCBpbiBhIHNob3J0IHNwYWNlIG9mIHRpbWUgd291bGQgb2Z0ZW4gYmUgYW5ncnkgd2l0aCBoaW0gYW5kIGFzIG9mdGVuIGJlZyB0byBiZSByZWNvbmNpbGVkOyBmb3IgaGUgd2FzIGV4dHJhdmFnYW50bHkgZWFnZXIgdG8gaGVhciBoaXMgZG9jdHJpbmVzIGFuZCBzaGFyZSBpbiBoaXMgcGhpbG9zb3BoaWNhbCBwdXJzdWl0cywgYnV0IGhlIGRyZWFkZWQgdGhlIGNlbnN1cmUgb2YgdGhvc2Ugd2hvIHRyaWVkIHRvIGRpdmVydCBoaW0gZnJvbSB0aGlzIGNvdXJzZSBhcyBsaWtlbHkgdG8gY29ycnVwdCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMganVuY3R1cmUsIGhvd2V2ZXIsIGEgd2FyIGJyb2tlIG91dCwgYW5kIGhlIHNlbnQgUGxhdG8gYXdheSwgcHJvbWlzaW5nIGhpbSB0aGF0IGluIHRoZSBzdW1tZXIgaGUgd291bGQgc3VtbW9uIERpb24gaG9tZS4gVGhpcyBwcm9taXNlLCBpbmRlZWQsIGhlIGltbWVkaWF0ZWx5IGJyb2tlLCBidXQgaGUga2VwdCBzZW5kaW5nIHRvIERpb24gdGhlIHJldmVudWVzIGZyb20gaGlzIHByb3BlcnR5LCBhbmQgYXNrZWQgUGxhdG8gdG8gcGFyZG9uIGhpcyBwb3N0cG9uZW1lbnQgb2YgdGhlIHRpbWUgb2YgRGlvbidzIHJlY2FsbCwgYmVjYXVzZSBvZiB0aGUgd2FyOyBhcyBzb29uIGFzIHBlYWNlIHdhcyBtYWRlIGhlIHdvdWxkIHN1bW1vbiBEaW9uIGhvbWUsIGFuZCBoZSBhc2tlZCBoaW0gdG8gYmUgcXVpZXQsIGFuZCB0byBhdHRlbXB0IG5vIHJldm9sdXRpb24sIGFuZCB0byBzYXkgbm8gZXZpbCBvZiBoaW0gdG8gdGhlIEdyZWVrcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMganVuY3R1cmUsIGhvd2V2ZXIsIGEgd2FyIGJyb2tlIG91dCwgYW5kIGhlIHNlbnQgUGxhdG8gYXdheSwgcHJvbWlzaW5nIGhpbSB0aGF0IGluIHRoZSBzdW1tZXIgaGUgd291bGQgc3VtbW9uIERpb24gaG9tZS4gVGhpcyBwcm9taXNlLCBpbmRlZWQsIGhlIGltbWVkaWF0ZWx5IGJyb2tlLCBidXQgaGUga2VwdCBzZW5kaW5nIHRvIERpb24gdGhlIHJldmVudWVzIGZyb20gaGlzIHByb3BlcnR5LCBhbmQgYXNrZWQgUGxhdG8gdG8gcGFyZG9uIGhpcyBwb3N0cG9uZW1lbnQgb2YgdGhlIHRpbWUgb2YgRGlvbidzIHJlY2FsbCwgYmVjYXVzZSBvZiB0aGUgd2FyOyBhcyBzb29uIGFzIHBlYWNlIHdhcyBtYWRlIGhlIHdvdWxkIHN1bW1vbiBEaW9uIGhvbWUsIGFuZCBoZSBhc2tlZCBoaW0gdG8gYmUgcXVpZXQsIGFuZCB0byBhdHRlbXB0IG5vIHJldm9sdXRpb24sIGFuZCB0byBzYXkgbm8gZXZpbCBvZiBoaW0gdG8gdGhlIEdyZWVrcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBQbGF0byB0cmllZCB0byBlZmZlY3QsIGFuZCBrZXB0IERpb24gd2l0aCBoaW0gaW4gdGhlIEFjYWRlbXksIHdoZXJlIGhlIHR1cm5lZCBoaXMgYXR0ZW50aW9uIHRvIHBoaWxvc29waHkuIERpb24gZHdlbHQgaW4gdGhlIHVwcGVyIGNpdHkgb2YgQXRoZW5zPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnVwcGVyIGNpdHksPC9xPiBhcyBkaXN0aW5ndWlzaGVkIGZyb20gdGhlIFBpcmFldXMuPC9ub3RlPiB3aXRoIENhbGxpcHB1cywgb25lIG9mIGhpcyBhY3F1YWludGFuY2VzLCBidXQgZm9yIGRpdmVyc2lvbiBoZSBib3VnaHQgYSBjb3VudHJ5LXBsYWNlLCBhbmQgYWZ0ZXJ3YXJkcywgd2hlbiBoZSBzYWlsZWQgdG8gU2ljaWx5LCBoZSBnYXZlIHRoaXMgdG8gU3BldXNpcHB1cywgd2hvIHdhcyBoaXMgbW9zdCBpbnRpbWF0ZSBmcmllbmQgYXQgQXRoZW5zLiBGb3IgUGxhdG8gZGVzaXJlZCB0aGF0IERpb24ncyBkaXNwb3NpdGlvbiBzaG91bGQgYmUgdGVtcGVyZWQgYW5kIHN3ZWV0ZW5lZCBieSBhc3NvY2lhdGlvbiB3aXRoIG1lbiBvZiBjaGFybWluZyBwcmVzZW5jZSB3aG8gaW5kdWxnZWQgc2Vhc29uYWJseSBpbiBncmFjZWZ1bCBwbGVhc2FudHJpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdWNoIGEgbWFuIHdhcyBTcGV1c2lwcHVzOyB3aGVyZWZvcmUgVGltb24sIGluIGhpcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNpbGxpLDwvcT4gc3Bva2Ugb2YgaGltIGFzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Z29vZCBhdCBhIGplc3QuPC9xPiBBbmQgd2hlbiBQbGF0byBoaW1zZWxmIHdhcyBjYWxsZWQgdXBvbiB0byBmdXJuaXNoIGEgY2hvcnVzIG9mIGJveXMsIERpb24gaGFkIHRoZSBjaG9ydXMgdHJhaW5lZCBhbmQgZGVmcmF5ZWQgYWxsIHRoZSBleHBlbnNlIG9mIGl0cyBtYWludGVuYW5jZSwgYW5kIFBsYXRvIGVuY291cmFnZWQgaW4gaGltIHN1Y2ggYW4gYW1iaXRpb24gdG8gcGxlYXNlIHRoZSBBdGhlbmlhbnMsIG9uIHRoZSBncm91bmQgdGhhdCBpdCB3b3VsZCBwcm9jdXJlIGdvb2R3aWxsIGZvciBEaW9uIHJhdGhlciB0aGFuIGZhbWUgZm9yIGhpbXNlbGYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBQbGF0byB0cmllZCB0byBlZmZlY3QsIGFuZCBrZXB0IERpb24gd2l0aCBoaW0gaW4gdGhlIEFjYWRlbXksIHdoZXJlIGhlIHR1cm5lZCBoaXMgYXR0ZW50aW9uIHRvIHBoaWxvc29waHkuIERpb24gZHdlbHQgaW4gdGhlIHVwcGVyIGNpdHkgb2YgQXRoZW5zPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj51cHBlciBjaXR5LDwvcT4gYXMgZGlzdGluZ3Vpc2hlZCBmcm9tIHRoZSBQaXJhZXVzLjwvbm90ZT4gd2l0aCBDYWxsaXBwdXMsIG9uZSBvZiBoaXMgYWNxdWFpbnRhbmNlcywgYnV0IGZvciBkaXZlcnNpb24gaGUgYm91Z2h0IGEgY291bnRyeS1wbGFjZSwgYW5kIGFmdGVyd2FyZHMsIHdoZW4gaGUgc2FpbGVkIHRvIFNpY2lseSwgaGUgZ2F2ZSB0aGlzIHRvIFNwZXVzaXBwdXMsIHdobyB3YXMgaGlzIG1vc3QgaW50aW1hdGUgZnJpZW5kIGF0IEF0aGVucy4gRm9yIFBsYXRvIGRlc2lyZWQgdGhhdCBEaW9uJ3MgZGlzcG9zaXRpb24gc2hvdWxkIGJlIHRlbXBlcmVkIGFuZCBzd2VldGVuZWQgYnkgYXNzb2NpYXRpb24gd2l0aCBtZW4gb2YgY2hhcm1pbmcgcHJlc2VuY2Ugd2hvIGluZHVsZ2VkIHNlYXNvbmFibHkgaW4gZ3JhY2VmdWwgcGxlYXNhbnRyaWVzLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dXBwZXIgY2l0eSw8L3E+IGFzIGRpc3Rpbmd1aXNoZWQgZnJvbSB0aGUgUGlyYWV1cy48L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzdWNoIGEgbWFuIHdhcyBTcGV1c2lwcHVzOyB3aGVyZWZvcmUgVGltb24sIGluIGhpcyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U2lsbGksPC9xPiBzcG9rZSBvZiBoaW0gYXMgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmdvb2QgYXQgYSBqZXN0LjwvcT4gQW5kIHdoZW4gUGxhdG8gaGltc2VsZiB3YXMgY2FsbGVkIHVwb24gdG8gZnVybmlzaCBhIGNob3J1cyBvZiBib3lzLCBEaW9uIGhhZCB0aGUgY2hvcnVzIHRyYWluZWQgYW5kIGRlZnJheWVkIGFsbCB0aGUgZXhwZW5zZSBvZiBpdHMgbWFpbnRlbmFuY2UsIGFuZCBQbGF0byBlbmNvdXJhZ2VkIGluIGhpbSBzdWNoIGFuIGFtYml0aW9uIHRvIHBsZWFzZSB0aGUgQXRoZW5pYW5zLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaXQgd291bGQgcHJvY3VyZSBnb29kd2lsbCBmb3IgRGlvbiByYXRoZXIgdGhhbiBmYW1lIGZvciBoaW1zZWxmLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5EaW9uIHVzZWQgdG8gdmlzaXQgdGhlIG90aGVyIGNpdGllcyBhbHNvLCB3aGVyZSBoZSBzaGFyZWQgdGhlIGxlaXN1cmUgYW5kIGZlc3RhbCBlbmpveW1lbnRzIG9mIHRoZSBub2JsZXN0IGFuZCBtb3N0IHN0YXRlc21hbmxpa2UgbWVuLCBtYW5pZmVzdGluZyBpbiBoaXMgY29uZHVjdCB3aXRoIHRoZW0gbm90aGluZyB0aGF0IHdhcyBydWRlIG9yIGFycm9nYW50IG9yIGVmZmVtaW5hdGUsIGJ1dCByYXRoZXIgZ3JlYXQgbW9kZXJhdGlvbiwgdmlydHVlLCBhbmQgbWFubGluZXNzLCBhbmQgYSBiZWNvbWluZyBkZXZvdGlvbiB0byBsZXR0ZXJzIGFuZCBwaGlsb3NvcGh5LiBUaGlzIHByb2N1cmVkIGhpbSB0aGUgZW11bG91cyBnb29kd2lsbCBvZiBhbGwgbWVuLCBhbmQgZGVjcmVlcyBvZiBwdWJsaWMgaG9ub3VycyBmcm9tIHRoZSBjaXRpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBMYWNlZGFlbW9uaWFucyBldmVuIG1hZGUgaGltIGEgY2l0aXplbiBvZiBTcGFydGEsIHdpdGhvdXQgYW55IHJlZ2FyZCBmb3IgdGhlIGFuZ2VyIG9mIERpb255c2l1cywgYWx0aG91Z2ggYXQgdGhhdCB0aW1lIHRoZSB0eXJhbnQgd2FzIHRoZWlyIHplYWxvdXMgYWxseSBhZ2FpbnN0IHRoZSBUaGViYW5zLiBBbmQgaXQgaXMgcmVsYXRlZCB0aGF0IERpb24gb25jZSB3ZW50IHRvIHBheSBhIHZpc2l0IHRvIFB0b2VvZG9ydXMgdGhlIE1lZ2FyaWFuLCB1cG9uIGhpcyBpbnZpdGF0aW9uLiBOb3cgUHRvZW9kb3J1cywgaXQgd291bGQgc2VlbSwgd2FzIG9uZSBvZiB0aGUgd2VhbHRoeSBhbmQgaW5mbHVlbnRpYWwgbWVuIG9mIHRoZSBjaXR5OyAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2hlbiwgdGhlcmVmb3JlLCBEaW9uIHNhdyBhIGNyb3dkIG9mIHBlb3BsZSBhdCBoaXMgZG9vciwgYW5kIGEgcHJlc3Mgb2YgYnVzaW5lc3MsIHdoaWNoIG1hZGUgaGltIGRpZmZpY3VsdCBvZiBhY2Nlc3MgYW5kIGhhcmQgdG8gY29tZSBhdCwgaGUgdHVybmVkIHRvIGhpcyBmcmllbmRzLCB3aG8gd2VyZSB2ZXhlZCBhbmQgaW5kaWduYW50IGF0IGl0LCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHkgc2hvdWxkIHdlIGJsYW1lIHRoaXMgbWFuPyBGb3Igd2Ugb3Vyc2VsdmVzIHVzZWQgdG8gZG8ganVzdCBzbyBpbiBTeXJhY3VzZS48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkRpb24gdXNlZCB0byB2aXNpdCB0aGUgb3RoZXIgY2l0aWVzIGFsc28sIHdoZXJlIGhlIHNoYXJlZCB0aGUgbGVpc3VyZSBhbmQgZmVzdGFsIGVuam95bWVudHMgb2YgdGhlIG5vYmxlc3QgYW5kIG1vc3Qgc3RhdGVzbWFubGlrZSBtZW4sIG1hbmlmZXN0aW5nIGluIGhpcyBjb25kdWN0IHdpdGggdGhlbSBub3RoaW5nIHRoYXQgd2FzIHJ1ZGUgb3IgYXJyb2dhbnQgb3IgZWZmZW1pbmF0ZSwgYnV0IHJhdGhlciBncmVhdCBtb2RlcmF0aW9uLCB2aXJ0dWUsIGFuZCBtYW5saW5lc3MsIGFuZCBhIGJlY29taW5nIGRldm90aW9uIHRvIGxldHRlcnMgYW5kIHBoaWxvc29waHkuIFRoaXMgcHJvY3VyZWQgaGltIHRoZSBlbXVsb3VzIGdvb2R3aWxsIG9mIGFsbCBtZW4sIGFuZCBkZWNyZWVzIG9mIHB1YmxpYyBob25vdXJzIGZyb20gdGhlIGNpdGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBMYWNlZGFlbW9uaWFucyBldmVuIG1hZGUgaGltIGEgY2l0aXplbiBvZiBTcGFydGEsIHdpdGhvdXQgYW55IHJlZ2FyZCBmb3IgdGhlIGFuZ2VyIG9mIERpb255c2l1cywgYWx0aG91Z2ggYXQgdGhhdCB0aW1lIHRoZSB0eXJhbnQgd2FzIHRoZWlyIHplYWxvdXMgYWxseSBhZ2FpbnN0IHRoZSBUaGViYW5zLiBBbmQgaXQgaXMgcmVsYXRlZCB0aGF0IERpb24gb25jZSB3ZW50IHRvIHBheSBhIHZpc2l0IHRvIFB0b2VvZG9ydXMgdGhlIE1lZ2FyaWFuLCB1cG9uIGhpcyBpbnZpdGF0aW9uLiBOb3cgUHRvZW9kb3J1cywgaXQgd291bGQgc2VlbSwgd2FzIG9uZSBvZiB0aGUgd2VhbHRoeSBhbmQgaW5mbHVlbnRpYWwgbWVuIG9mIHRoZSBjaXR5OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuLCB0aGVyZWZvcmUsIERpb24gc2F3IGEgY3Jvd2Qgb2YgcGVvcGxlIGF0IGhpcyBkb29yLCBhbmQgYSBwcmVzcyBvZiBidXNpbmVzcywgd2hpY2ggbWFkZSBoaW0gZGlmZmljdWx0IG9mIGFjY2VzcyBhbmQgaGFyZCB0byBjb21lIGF0LCBoZSB0dXJuZWQgdG8gaGlzIGZyaWVuZHMsIHdobyB3ZXJlIHZleGVkIGFuZCBpbmRpZ25hbnQgYXQgaXQsIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5IHNob3VsZCB3ZSBibGFtZSB0aGlzIG1hbj8gRm9yIHdlIG91cnNlbHZlcyB1c2VkIHRvIGRvIGp1c3Qgc28gaW4gU3lyYWN1c2UuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgdGltZSB3ZW50IG9uLCBEaW9ueXNpdXMgYmVjYW1lIGplYWxvdXMgb2YgRGlvbiBhbmQgYWZyYWlkIG9mIGhpcyBwb3B1bGFyaXR5IGFtb25nIHRoZSBHcmVla3MuIEhlIHRoZXJlZm9yZSBzdG9wcGVkIHNlbmRpbmcgaGltIGhpcyByZXZlbnVlcywgYW5kIGhhbmRlZCBoaXMgZXN0YXRlIG92ZXIgdG8gaGlzIG93biBwcml2YXRlIHN0ZXdhcmRzLiBIb3dldmVyLCB3aXRoIGEgZGVzaXJlIHRvIG1ha2UgaGVhZCBhZ2FpbnN0IHRoZSBiYWQgcmVwdXRlIHdoaWNoIGhlIGhhZCBhbHNvIHdvbiBhbW9uZyB0aGUgcGhpbG9zb3BoZXJzIG9uIFBsYXRvJ3MgYWNjb3VudCwgaGUgYXNzZW1ibGVkIGF0IGhpcyBjb3VydCBtYW55IG1lbiB3aXRoIGEgcmVwdXRhdGlvbiBmb3IgbGVhcm5pbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB3YXMgYW1iaXRpb3VzIHRvIHN1cnBhc3MgdGhlbSBhbGwgaW4gZGlzY3Vzc2lvbiwgYW5kIHdhcyB0aGVyZWZvcmUgZHJpdmVuIHRvIHVzZSBpbmFwdGx5IHdoYXQgaGUgaGFkIGltcGVyZmVjdGx5IGxlYXJuZWQgZnJvbSBQbGF0by4gU28gaGUgeWVhcm5lZCBvbmNlIG1vcmUgZm9yIHRoYXQgcGhpbG9zb3BoZXIsIGFuZCByZXByb2FjaGVkIGhpbXNlbGYgZm9yIG5vdCBoYXZpbmcgdXRpbGl6ZWQgaGlzIHByZXNlbmNlIHRvIGxlYXJuIGFsbCB0aGF0IGhlIHNob3VsZCBoYXZlIGxlYXJuZWQuIEFuZCBzaW5jZSwgbGlrZSBhIHR5cmFudCwgaGUgd2FzIGFsd2F5cyBleHRyYXZhZ2FudCBpbiBoaXMgZGVzaXJlcyBhbmQgaGVhZHN0cm9uZyBpbiBhbGwgdGhhdCBoZSB1bmRlcnRvb2ssIGhlIHNldCBvdXQgYXQgb25jZSB0byBzZWN1cmUgUGxhdG8sIGFuZCwgbGVhdmluZyBubyBzdG9uZSB1bnR1cm5lZCwgcGVyc3VhZGVkIEFyY2h5dGFzIGFuZCBoaXMgZmVsbG93IFB5dGhhZ29yZWFucyB0byBiZWNvbWUgc3VyZXRpZXMgZm9yIGhpcyBhZ3JlZW1lbnRzLCBhbmQgdG8gc3VtbW9uIFBsYXRvOyBmb3IgaXQgd2FzIHRocm91Z2ggUGxhdG8sIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhhdCBoZSBoYWQgZW50ZXJlZCBpbnRvIGZyaWVuZGx5IHJlbGF0aW9ucyB3aXRoIHRoZXNlIHBoaWxvc29waGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhleSBzZW50IEFyY2hlZGVtdXMgdG8gUGxhdG8sIGFuZCBEaW9ueXNpdXMgYWxzbyBzZW50IGEgdHJpcmVtZSBmb3IgaGltLCBhbmQgZnJpZW5kcyB0byBlbnRyZWF0IGhpcyByZXR1cm4uIEhlIGFsc28gd3JvdGUgdG8gaGltIGhpbXNlbGYgaW4gY2xlYXIgYW5kIGV4cHJlc3MgdGVybXMsIHNheWluZyB0aGF0IG5vIG1lcmN5IHNob3VsZCBiZSBzaG93biB0byBEaW9uIHVubGVzcyBQbGF0byB3ZXJlIHBlcnN1YWRlZCB0byBjb21lIHRvIFNpY2lseTsgYnV0IGlmIGhlIHdlcmUgcGVyc3VhZGVkLCBldmVyeSBtZXJjeS4gRGlvbiBhbHNvIHJlY2VpdmVkIG1hbnkgaW5qdW5jdGlvbnMgZnJvbSBoaXMgd2lmZSBhbmQgc2lzdGVyLCB0aGF0IGhlIHNob3VsZCBiZWcgUGxhdG8gdG8gbGlzdGVuIHRvIERpb255c2l1cyBhbmQgbm90IGFmZm9yZCBoaW0gYW4gZXhjdXNlIGZvciBmdXJ0aGVyIHNldmVyaXR5LiBUaHVzIGl0IHdhcywgdGhlbiwgdGhhdCBQbGF0bywgYXMgaGUgaGltc2VsZiBzYXlzLCAKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj5jYW1lIGZvciB0aGUgdGhpcmQgdGltZSB0byB0aGUgc3RyYWl0cyBvZiBTY3lsbGEsCgkJCQkJCgkJCQkJPGw+VGhhdCBoZSBtaWdodCBvbmNlIG1vcmUgbWVhc3VyZSBiYWNrIGhpcyB3YXkgdG88L2w+CgkJCQkJICAgICAgICAgIDxsPmZlbGwgQ2hhcnliZGlzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxMi40MjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleTwvdGl0bGU+LCB4aWkuIDQyODwvYmlibD4sIHdpdGggc2xpZ2h0IGFkYXB0YXRpb24gZnJvbSB0aGUgZmlyc3QgcGVyc29uLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIHRpbWUgd2VudCBvbiwgRGlvbnlzaXVzIGJlY2FtZSBqZWFsb3VzIG9mIERpb24gYW5kIGFmcmFpZCBvZiBoaXMgcG9wdWxhcml0eSBhbW9uZyB0aGUgR3JlZWtzLiBIZSB0aGVyZWZvcmUgc3RvcHBlZCBzZW5kaW5nIGhpbSBoaXMgcmV2ZW51ZXMsIGFuZCBoYW5kZWQgaGlzIGVzdGF0ZSBvdmVyIHRvIGhpcyBvd24gcHJpdmF0ZSBzdGV3YXJkcy4gSG93ZXZlciwgd2l0aCBhIGRlc2lyZSB0byBtYWtlIGhlYWQgYWdhaW5zdCB0aGUgYmFkIHJlcHV0ZSB3aGljaCBoZSBoYWQgYWxzbyB3b24gYW1vbmcgdGhlIHBoaWxvc29waGVycyBvbiBQbGF0bydzIGFjY291bnQsIGhlIGFzc2VtYmxlZCBhdCBoaXMgY291cnQgbWFueSBtZW4gd2l0aCBhIHJlcHV0YXRpb24gZm9yIGxlYXJuaW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSB3YXMgYW1iaXRpb3VzIHRvIHN1cnBhc3MgdGhlbSBhbGwgaW4gZGlzY3Vzc2lvbiwgYW5kIHdhcyB0aGVyZWZvcmUgZHJpdmVuIHRvIHVzZSBpbmFwdGx5IHdoYXQgaGUgaGFkIGltcGVyZmVjdGx5IGxlYXJuZWQgZnJvbSBQbGF0by4gU28gaGUgeWVhcm5lZCBvbmNlIG1vcmUgZm9yIHRoYXQgcGhpbG9zb3BoZXIsIGFuZCByZXByb2FjaGVkIGhpbXNlbGYgZm9yIG5vdCBoYXZpbmcgdXRpbGl6ZWQgaGlzIHByZXNlbmNlIHRvIGxlYXJuIGFsbCB0aGF0IGhlIHNob3VsZCBoYXZlIGxlYXJuZWQuIEFuZCBzaW5jZSwgbGlrZSBhIHR5cmFudCwgaGUgd2FzIGFsd2F5cyBleHRyYXZhZ2FudCBpbiBoaXMgZGVzaXJlcyBhbmQgaGVhZHN0cm9uZyBpbiBhbGwgdGhhdCBoZSB1bmRlcnRvb2ssIGhlIHNldCBvdXQgYXQgb25jZSB0byBzZWN1cmUgUGxhdG8sIGFuZCwgbGVhdmluZyBubyBzdG9uZSB1bnR1cm5lZCwgcGVyc3VhZGVkIEFyY2h5dGFzIGFuZCBoaXMgZmVsbG93IFB5dGhhZ29yZWFucyB0byBiZWNvbWUgc3VyZXRpZXMgZm9yIGhpcyBhZ3JlZW1lbnRzLCBhbmQgdG8gc3VtbW9uIFBsYXRvOyBmb3IgaXQgd2FzIHRocm91Z2ggUGxhdG8sIGluIHRoZSBmaXJzdCBwbGFjZSwgdGhhdCBoZSBoYWQgZW50ZXJlZCBpbnRvIGZyaWVuZGx5IHJlbGF0aW9ucyB3aXRoIHRoZXNlIHBoaWxvc29waGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZXkgc2VudCBBcmNoZWRlbXVzIHRvIFBsYXRvLCBhbmQgRGlvbnlzaXVzIGFsc28gc2VudCBhIHRyaXJlbWUgZm9yIGhpbSwgYW5kIGZyaWVuZHMgdG8gZW50cmVhdCBoaXMgcmV0dXJuLiBIZSBhbHNvIHdyb3RlIHRvIGhpbSBoaW1zZWxmIGluIGNsZWFyIGFuZCBleHByZXNzIHRlcm1zLCBzYXlpbmcgdGhhdCBubyBtZXJjeSBzaG91bGQgYmUgc2hvd24gdG8gRGlvbiB1bmxlc3MgUGxhdG8gd2VyZSBwZXJzdWFkZWQgdG8gY29tZSB0byBTaWNpbHk7IGJ1dCBpZiBoZSB3ZXJlIHBlcnN1YWRlZCwgZXZlcnkgbWVyY3kuIERpb24gYWxzbyByZWNlaXZlZCBtYW55IGluanVuY3Rpb25zIGZyb20gaGlzIHdpZmUgYW5kIHNpc3RlciwgdGhhdCBoZSBzaG91bGQgYmVnIFBsYXRvIHRvIGxpc3RlbiB0byBEaW9ueXNpdXMgYW5kIG5vdCBhZmZvcmQgaGltIGFuIGV4Y3VzZSBmb3IgZnVydGhlciBzZXZlcml0eS4gVGh1cyBpdCB3YXMsIHRoZW4sIHRoYXQgUGxhdG8sIGFzIGhlIGhpbXNlbGYgc2F5cywgCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj5jYW1lIGZvciB0aGUgdGhpcmQgdGltZSB0byB0aGUgc3RyYWl0cyBvZiBTY3lsbGEsCgkJCQkJCgkJCQkJPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGF0IGhlIG1pZ2h0IG9uY2UgbW9yZSBtZWFzdXJlIGJhY2sgaGlzIHdheSB0bzwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5mZWxsIENoYXJ5YmRpcy48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+CiAgICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhhdCBoZSBtaWdodCBvbmNlIG1vcmUgbWVhc3VyZSBiYWNrIGhpcyB3YXkgdG88L2w+CgkJCQkJICAgICAgICAgIDxsIGNsYXNzPSJ0cmFuc2xhdGlvbiI+ZmVsbCBDaGFyeWJkaXMuPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxMi40MjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHhpaS4gNDI4PC9iaWJsPiwgd2l0aCBzbGlnaHQgYWRhcHRhdGlvbiBmcm9tIHRoZSBmaXJzdCBwZXJzb24uPC9ub3RlPgoJCQkgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxMi40MjgiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5PC90aXRsZT4sIHhpaS4gNDI4PC9iaWJsPiwgd2l0aCBzbGlnaHQgYWRhcHRhdGlvbiBmcm9tIHRoZSBmaXJzdCBwZXJzb24uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCB4aWkuIDQyODxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBhcnJpdmFsIGZpbGxlZCBEaW9ueXNpdXMgd2l0aCBncmVhdCBqb3ksIGFuZCB0aGUgU2ljaWxpYW5zIGFnYWluIHdpdGggZ3JlYXQgaG9wZTsgdGhleSBhbGwgcHJheWVkIGFuZCBsYWJvdXJlZCB6ZWFsb3VzbHkgdGhhdCBQbGF0byBtaWdodCB0cml1bXBoIG92ZXIgUGhpbGlzdHVzLCBhbmQgcGhpbG9zb3BoeSBvdmVyIHR5cmFubnkuIFRoZSB3b21lbiBhbHNvIHdlcmUgdmVyeSBlYXJuZXN0IGluIGhpcyBiZWhhbGYsIGFuZCBEaW9ueXNpdXMgZ2F2ZSBoaW0gYSBzcGVjaWFsIHRva2VuIG9mIGhpcyB0cnVzdCwgd2hpY2ggbm8gb25lIGVsc2UgaGFkLCBpbiB0aGUgcHJpdmlsZWdlIG9mIGNvbWluZyBpbnRvIGhpcyBwcmVzZW5jZSB3aXRob3V0IGJlaW5nIHNlYXJjaGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgdHlyYW50IG9mZmVyZWQgaGltLCB0b28sIHByZXNlbnRzIG9mIG1vbmV5LCBtdWNoIG1vbmV5IGFuZCBtYW55IHRpbWVzLCBidXQgUGxhdG8gd291bGQgbm90IGFjY2VwdCB0aGVtLiBXaGVyZXVwb24gQXJpc3RpcHB1cyBvZiBDeXJlbmUsIHdobyB3YXMgcHJlc2VudCBvbiBvbmUgb2YgdGhlc2Ugb2NjYXNpb25zLCBzYWlkIHRoYXQgRGlvbnlzaXVzIHdhcyBzYWZlbHkgbXVuaWZpY2VudDsgZm9yIGhlIG9mZmVyZWQgbGl0dGxlIHRvIG1lbiBsaWtlIGhpbSwgd2hvIHdhbnRlZCBtb3JlLCBidXQgbXVjaCB0byBQbGF0bywgd2hvIHdvdWxkIHRha2Ugbm90aGluZy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGFycml2YWwgZmlsbGVkIERpb255c2l1cyB3aXRoIGdyZWF0IGpveSwgYW5kIHRoZSBTaWNpbGlhbnMgYWdhaW4gd2l0aCBncmVhdCBob3BlOyB0aGV5IGFsbCBwcmF5ZWQgYW5kIGxhYm91cmVkIHplYWxvdXNseSB0aGF0IFBsYXRvIG1pZ2h0IHRyaXVtcGggb3ZlciBQaGlsaXN0dXMsIGFuZCBwaGlsb3NvcGh5IG92ZXIgdHlyYW5ueS4gVGhlIHdvbWVuIGFsc28gd2VyZSB2ZXJ5IGVhcm5lc3QgaW4gaGlzIGJlaGFsZiwgYW5kIERpb255c2l1cyBnYXZlIGhpbSBhIHNwZWNpYWwgdG9rZW4gb2YgaGlzIHRydXN0LCB3aGljaCBubyBvbmUgZWxzZSBoYWQsIGluIHRoZSBwcml2aWxlZ2Ugb2YgY29taW5nIGludG8gaGlzIHByZXNlbmNlIHdpdGhvdXQgYmVpbmcgc2VhcmNoZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB0eXJhbnQgb2ZmZXJlZCBoaW0sIHRvbywgcHJlc2VudHMgb2YgbW9uZXksIG11Y2ggbW9uZXkgYW5kIG1hbnkgdGltZXMsIGJ1dCBQbGF0byB3b3VsZCBub3QgYWNjZXB0IHRoZW0uIFdoZXJldXBvbiBBcmlzdGlwcHVzIG9mIEN5cmVuZSwgd2hvIHdhcyBwcmVzZW50IG9uIG9uZSBvZiB0aGVzZSBvY2Nhc2lvbnMsIHNhaWQgdGhhdCBEaW9ueXNpdXMgd2FzIHNhZmVseSBtdW5pZmljZW50OyBmb3IgaGUgb2ZmZXJlZCBsaXR0bGUgdG8gbWVuIGxpa2UgaGltLCB3aG8gd2FudGVkIG1vcmUsIGJ1dCBtdWNoIHRvIFBsYXRvLCB3aG8gd291bGQgdGFrZSBub3RoaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgZmlyc3QgYWN0cyBvZiBraW5kbmVzcywgaG93ZXZlciwgUGxhdG8gaW50cm9kdWNlZCB0aGUgc3ViamVjdCBvZiBEaW9uLCBhbmQgdGhlbiB0aGVyZSB3ZXJlIHBvc3Rwb25lbWVudHMgYXQgZmlyc3Qgb24gdGhlIHBhcnQgb2YgRGlvbnlzaXVzLCBhbmQgYWZ0ZXJ3YXJkcyBmYXVsdGZpbmRpbmdzIGFuZCBkaXNhZ3JlZW1lbnRzLiBUaGVzZSB3ZXJlIHVubm90aWNlZCBieSBvdXRzaWRlcnMsIHNpbmNlIERpb255c2l1cyB0cmllZCB0byBjb25jZWFsIHRoZW0sIGFuZCBzb3VnaHQgYnkgdGhlIHJlc3Qgb2YgaGlzIGtpbmQgYXR0ZW50aW9ucyBhbmQgaG9ub3VyYWJsZSB0cmVhdG1lbnQgdG8gZHJhdyBQbGF0byBhd2F5IGZyb20gaGlzIGdvb2R3aWxsIHRvd2FyZHMgRGlvbi4gQW5kIGV2ZW4gUGxhdG8gaGltc2VsZiBkaWQgbm90IGF0IGZpcnN0IHJldmVhbCB0aGUgdHlyYW50J3MgcGVyZmlkeSBhbmQgZmFsc2Vob29kLCBidXQgYm9yZSB3aXRoIGl0IGFuZCBkaXNzZW1ibGVkIGhpcyByZXNlbnRtZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hpbGUgbWF0dGVycyBzdG9vZCB0aHVzIGJldHdlZW4gdGhlbSwgYW5kIG5vIG9uZSBrbmV3IG9mIGl0LCBhcyB0aGV5IHN1cHBvc2VkLCBIZWxpY29uIG9mIEN5emljdXMsIG9uZSBvZiBQbGF0bydzIGludGltYXRlcywgcHJlZGljdGVkIGFuIGVjbGlwc2Ugb2YgdGhlIHN1bi4gVGhpcyB0b29rIHBsYWNlIGFzIGhlIGhhZCBwcmVkaWN0ZWQsIGluIGNvbnNlcXVlbmNlIG9mIHdoaWNoIGhlIHdhcyBhZG1pcmVkIGJ5IHRoZSB0eXJhbnQgYW5kIHByZXNlbnRlZCB3aXRoIGEgdGFsZW50IG9mIHNpbHZlci4gVGhlcmV1cG9uIEFyaXN0aXBwdXMsIGplc3Rpbmcgd2l0aCB0aGUgcmVzdCBvZiB0aGUgcGhpbG9zb3BoZXJzLCBzYWlkIHRoYXQgaGUgaGltc2VsZiBhbHNvIGNvdWxkIHByZWRpY3Qgc29tZXRoaW5nIHN0cmFuZ2UuIEFuZCB3aGVuIHRoZXkgYmVzb3VnaHQgaGltIHRvIHRlbGwgd2hhdCBpdCB3YXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgdGhlbiw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBwcmVkaWN0IHRoYXQgZXJlIGxvbmcgUGxhdG8gYW5kIERpb255c2l1cyB3aWxsIGJlY29tZSBlbmVtaWVzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBsYXN0IERpb255c2l1cyBzb2xkIHRoZSBlc3RhdGUgb2YgRGlvbiBhbmQgYXBwcm9wcmlhdGVkIHRoZSBtb25leSwgYW5kIHJlbW92aW5nIFBsYXRvIGZyb20gaGlzIGxvZGdpbmcgaW4gdGhlIHBhbGFjZSBnYXJkZW4sIHB1dCBoaW0gaW4gY2hhcmdlIG9mIGhpcyBtZXJjZW5hcmllcywgd2hvIGhhZCBsb25nIGhhdGVkIHRoZSBwaGlsb3NvcGhlciBhbmQgc291Z2h0IHRvIGtpbGwgaGltLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgd2FzIHRyeWluZyB0byBwZXJzdWFkZSBEaW9ueXNpdXMgdG8gcmVub3VuY2UgdGhlIHR5cmFubnkgYW5kIGxpdmUgd2l0aG91dCBhIGJvZHlndWFyZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBmaXJzdCBhY3RzIG9mIGtpbmRuZXNzLCBob3dldmVyLCBQbGF0byBpbnRyb2R1Y2VkIHRoZSBzdWJqZWN0IG9mIERpb24sIGFuZCB0aGVuIHRoZXJlIHdlcmUgcG9zdHBvbmVtZW50cyBhdCBmaXJzdCBvbiB0aGUgcGFydCBvZiBEaW9ueXNpdXMsIGFuZCBhZnRlcndhcmRzIGZhdWx0ZmluZGluZ3MgYW5kIGRpc2FncmVlbWVudHMuIFRoZXNlIHdlcmUgdW5ub3RpY2VkIGJ5IG91dHNpZGVycywgc2luY2UgRGlvbnlzaXVzIHRyaWVkIHRvIGNvbmNlYWwgdGhlbSwgYW5kIHNvdWdodCBieSB0aGUgcmVzdCBvZiBoaXMga2luZCBhdHRlbnRpb25zIGFuZCBob25vdXJhYmxlIHRyZWF0bWVudCB0byBkcmF3IFBsYXRvIGF3YXkgZnJvbSBoaXMgZ29vZHdpbGwgdG93YXJkcyBEaW9uLiBBbmQgZXZlbiBQbGF0byBoaW1zZWxmIGRpZCBub3QgYXQgZmlyc3QgcmV2ZWFsIHRoZSB0eXJhbnQncyBwZXJmaWR5IGFuZCBmYWxzZWhvb2QsIGJ1dCBib3JlIHdpdGggaXQgYW5kIGRpc3NlbWJsZWQgaGlzIHJlc2VudG1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBtYXR0ZXJzIHN0b29kIHRodXMgYmV0d2VlbiB0aGVtLCBhbmQgbm8gb25lIGtuZXcgb2YgaXQsIGFzIHRoZXkgc3VwcG9zZWQsIEhlbGljb24gb2YgQ3l6aWN1cywgb25lIG9mIFBsYXRvJ3MgaW50aW1hdGVzLCBwcmVkaWN0ZWQgYW4gZWNsaXBzZSBvZiB0aGUgc3VuLiBUaGlzIHRvb2sgcGxhY2UgYXMgaGUgaGFkIHByZWRpY3RlZCwgaW4gY29uc2VxdWVuY2Ugb2Ygd2hpY2ggaGUgd2FzIGFkbWlyZWQgYnkgdGhlIHR5cmFudCBhbmQgcHJlc2VudGVkIHdpdGggYSB0YWxlbnQgb2Ygc2lsdmVyLiBUaGVyZXVwb24gQXJpc3RpcHB1cywgamVzdGluZyB3aXRoIHRoZSByZXN0IG9mIHRoZSBwaGlsb3NvcGhlcnMsIHNhaWQgdGhhdCBoZSBoaW1zZWxmIGFsc28gY291bGQgcHJlZGljdCBzb21ldGhpbmcgc3RyYW5nZS4gQW5kIHdoZW4gdGhleSBiZXNvdWdodCBoaW0gdG8gdGVsbCB3aGF0IGl0IHdhcywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHRoZW4sPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBwcmVkaWN0IHRoYXQgZXJlIGxvbmcgUGxhdG8gYW5kIERpb255c2l1cyB3aWxsIGJlY29tZSBlbmVtaWVzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGxhc3QgRGlvbnlzaXVzIHNvbGQgdGhlIGVzdGF0ZSBvZiBEaW9uIGFuZCBhcHByb3ByaWF0ZWQgdGhlIG1vbmV5LCBhbmQgcmVtb3ZpbmcgUGxhdG8gZnJvbSBoaXMgbG9kZ2luZyBpbiB0aGUgcGFsYWNlIGdhcmRlbiwgcHV0IGhpbSBpbiBjaGFyZ2Ugb2YgaGlzIG1lcmNlbmFyaWVzLCB3aG8gaGFkIGxvbmcgaGF0ZWQgdGhlIHBoaWxvc29waGVyIGFuZCBzb3VnaHQgdG8ga2lsbCBoaW0sIG9uIHRoZSBncm91bmQgdGhhdCBoZSB3YXMgdHJ5aW5nIHRvIHBlcnN1YWRlIERpb255c2l1cyB0byByZW5vdW5jZSB0aGUgdHlyYW5ueSBhbmQgbGl2ZSB3aXRob3V0IGEgYm9keWd1YXJkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgd2hlbiBBcmNoeXRhcyBhbmQgaGlzIGZlbGxvdyBQeXRoYWdvcmVhbnMgbGVhcm5lZCB0aGF0IFBsYXRvIHdhcyBpbiBzdWNoIHBlcmlsLCB0aGV5IHF1aWNrbHkgc2VudCBhIGdhbGxleSB3aXRoIGFuIGVtYmFzc3ksIGRlbWFuZGluZyBoaW0gZnJvbSBEaW9ueXNpdXMgYW5kIGRlY2xhcmluZyB0aGF0IFBsYXRvIGhhZCB0YWtlbiB0aGVtIGZvciBzdXJldGllcyBvZiBoaXMgc2FmZXR5IHdoZW4gaGUgc2FpbGVkIHRvIFN5cmFjdXNlLiBEaW9ueXNpdXMgc291Z2h0IHRvIGRpc3Byb3ZlIGhpcyBlbm1pdHkgdG8gUGxhdG8gYnkgZ2l2aW5nIGJhbnF1ZXRzIGluIGhpcyBob25vdXIgYW5kIG1ha2luZyBraW5kIHByb3Zpc2lvbnMgZm9yIGhpcyBqb3VybmV5LCBhbmQgd2VudCBzbyBmYXIgYXMgdG8gc2F5IHNvbWV0aGluZyBsaWtlIHRoaXMgdG8gaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc3VwcG9zZSwgUGxhdG8sIHRob3Ugd2lsdCBicmluZyBtYW55IGRpcmUgYWNjdXNhdGlvbnMgYWdhaW5zdCBtZSB0byB0aGUgZWFycyBvZiB5b3VyIGZlbGxvdyBwaGlsb3NvcGhlcnMuPC9xPiBUbyB0aGlzIFBsYXRvIGFuc3dlcmVkIHdpdGggYSBzbWlsZTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZWF2ZW4gZm9yYmlkIHRoYXQgdGhlcmUgc2hvdWxkIGJlIHN1Y2ggYSBkZWFydGggb2YgdG9waWNzIGZvciBkaXNjdXNzaW9uIGluIHRoZSBBY2FkZW15IHRoYXQgYW55IG9uZSBtZW50aW9uIHRoZWUuPC9xPiBTdWNoLCB0aGV5IHNheSwgd2FzIHRoZSBkaXNtaXNzYWwgb2YgUGxhdG87IFBsYXRvJ3Mgb3duIHdvcmRzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTC4gNy4zNDkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RXBpc3QuPC90aXRsZT4gdmlpLiBwLiAzNDkgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaG93ZXZlciwgZG8gbm90IGVudGlyZWx5IGFncmVlIHdpdGggdGhpcyBhY2NvdW50LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHdoZW4gQXJjaHl0YXMgYW5kIGhpcyBmZWxsb3cgUHl0aGFnb3JlYW5zIGxlYXJuZWQgdGhhdCBQbGF0byB3YXMgaW4gc3VjaCBwZXJpbCwgdGhleSBxdWlja2x5IHNlbnQgYSBnYWxsZXkgd2l0aCBhbiBlbWJhc3N5LCBkZW1hbmRpbmcgaGltIGZyb20gRGlvbnlzaXVzIGFuZCBkZWNsYXJpbmcgdGhhdCBQbGF0byBoYWQgdGFrZW4gdGhlbSBmb3Igc3VyZXRpZXMgb2YgaGlzIHNhZmV0eSB3aGVuIGhlIHNhaWxlZCB0byBTeXJhY3VzZS4gRGlvbnlzaXVzIHNvdWdodCB0byBkaXNwcm92ZSBoaXMgZW5taXR5IHRvIFBsYXRvIGJ5IGdpdmluZyBiYW5xdWV0cyBpbiBoaXMgaG9ub3VyIGFuZCBtYWtpbmcga2luZCBwcm92aXNpb25zIGZvciBoaXMgam91cm5leSwgYW5kIHdlbnQgc28gZmFyIGFzIHRvIHNheSBzb21ldGhpbmcgbGlrZSB0aGlzIHRvIGhpbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc3VwcG9zZSwgUGxhdG8sIHRob3Ugd2lsdCBicmluZyBtYW55IGRpcmUgYWNjdXNhdGlvbnMgYWdhaW5zdCBtZSB0byB0aGUgZWFycyBvZiB5b3VyIGZlbGxvdyBwaGlsb3NvcGhlcnMuPC9xPiBUbyB0aGlzIFBsYXRvIGFuc3dlcmVkIHdpdGggYSBzbWlsZTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlYXZlbiBmb3JiaWQgdGhhdCB0aGVyZSBzaG91bGQgYmUgc3VjaCBhIGRlYXJ0aCBvZiB0b3BpY3MgZm9yIGRpc2N1c3Npb24gaW4gdGhlIEFjYWRlbXkgdGhhdCBhbnkgb25lIG1lbnRpb24gdGhlZS48L3E+IFN1Y2gsIHRoZXkgc2F5LCB3YXMgdGhlIGRpc21pc3NhbCBvZiBQbGF0bzsgUGxhdG8ncyBvd24gd29yZHMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gTC4gNy4zNDkiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC48L3RpdGxlPiB2aWkuIHAuIDM0OSBmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBob3dldmVyLCBkbyBub3QgZW50aXJlbHkgYWdyZWUgd2l0aCB0aGlzIGFjY291bnQuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDcuMzQ5IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4gdmlpLiBwLiAzNDkgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXN0LjwvdGl0bGU+IHZpaS4gcC4gMzQ5IGYuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERpb24gd2FzIHZleGVkIGJ5IGFsbCB0aGlzLCBhbmQgc2hvcnRseSBhZnRlcndhcmRzIGJlY2FtZSBhbHRvZ2V0aGVyIGhvc3RpbGUgd2hlbiBoZSBsZWFybmVkIGhvdyBoaXMgd2lmZSBoYWQgYmVlbiB0cmVhdGVkLCBvbiB3aGljaCBtYXR0ZXIgUGxhdG8gYWxzbyBzcG9rZSBjb3ZlcnRseSBpbiBhIGxldHRlciB0byBEaW9ueXNpdXMuIFRoZSBjYXNlIHdhcyBhcyBmb2xsb3dzLiBBZnRlciB0aGUgZXhwdWxzaW9uIG9mIERpb24gYW5kIHdoZW4gRGlvbnlzaXVzIHdhcyBzZW5kaW5nIFBsYXRvIGJhY2ssPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSBmaXJzdCB0aW1lOyBjZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyAxNi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGUgYmFkZSBoaW0gbGVhcm4gZnJvbSBEaW9uIGNvbmZpZGVudGlhbGx5IHdoZXRoZXIgaGUgd291bGQgb3Bwb3NlIGhpcyB3aWZlJ3MgbWFycnlpbmcgYW5vdGhlciBtYW47IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGVyZSB3YXMgYSByZXBvcnQsIHdoZXRoZXIgdHJ1ZSBvciBjb25jb2N0ZWQgYnkgRGlvbidzIGVuZW1pZXMsIHRoYXQgaGlzIG1hcnJpYWdlIGhhZCBub3QgcHJvdmVkIGFncmVlYWJsZSB0byBoaW0sIGFuZCB0aGF0IGhlIGRpZCBub3QgbGl2ZSBoYXJtb25pb3VzbHkgd2l0aCBoaXMgd2lmZS4gQWNjb3JkaW5nbHksIGFmdGVyIFBsYXRvIGNhbWUgdG8gQXRoZW5zIGFuZCBoYWQgY29uZmVycmVkIHdpdGggRGlvbiBhYm91dCBldmVyeXRoaW5nLCBoZSB3cm90ZSBhIGxldHRlciB0byB0aGUgdHlyYW50IHdoaWNoIHNwb2tlIG9mIG90aGVyIG1hdHRlcnMgaW4gYSB3YXkgdGhhdCB3YXMgY2xlYXIgdG8gYW55Ym9keSwgYnV0IG9mIHRoaXMgcGFydGljdWxhciBtYXR0ZXIgaW4gbGFuZ3VhZ2UgdGhhdCBjb3VsZCBiZSB1bmRlcnN0b29kIGJ5IERpb255c2l1cyBhbG9uZSwgc2F5aW5nIHRoYXQgaGUgaGFkIHRhbGtlZCB3aXRoIERpb24gYWJvdXQgdGhhdCBidXNpbmVzcywgYW5kIHRoYXQgRGlvbiB3b3VsZCBldmlkZW50bHkgYmUgZXhjZWVkaW5nbHkgYW5ncnkgaWYgRGlvbnlzaXVzIHNob3VsZCBjYXJyeSBpdCB0aHJvdWdoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8dGl0bGU+RXBpc3QuPC90aXRsZT4geGlpaS4gcC4gMzYyIGFkIGZpbi48L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBhcyBsb25nIGFzIHRoZXJlIHdlcmUgbWFueSBob3BlcyBvZiBhIHJlY29uY2lsaWF0aW9uLCB0aGUgdHlyYW50IHRvb2sgbm8gdmlvbGVudCBtZWFzdXJlcyB3aXRoIGhpcyBzaXN0ZXIsIGJ1dCBzdWZmZXJlZCBoZXIgdG8gY29udGludWUgbGl2aW5nIHdpdGggRGlvbidzIHlvdW5nIHNvbjsgd2hlbiwgaG93ZXZlciwgdGhlIGVzdHJhbmdlbWVudCB3YXMgY29tcGxldGUsIGFuZCBQbGF0bywgd2hvIGhhZCBjb21lIHRvIFNpY2lseSBhIHNlY29uZCB0aW1lLCBoYWQgYmVlbiBzZW50IGF3YXkgaW4gZW5taXR5LCB0aGVuIGhlIGdhdmUgQXJldGUgaW4gbWFycmlhZ2UsIGFnYWluc3QgaGVyIHdpbGwsIHRvIFRpbW9jcmF0ZXMsIG9uZSBvZiBoaXMgZnJpZW5kcy4gQW5kIGluIHRoaXMgYWN0aW9uLCBhdCBsZWFzdCwgaGUgZGlkIG5vdCBpbWl0YXRlIHRoZSByZWFzb25hYmxlbmVzcyBvZiBoaXMgZmF0aGVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IERpb24gd2FzIHZleGVkIGJ5IGFsbCB0aGlzLCBhbmQgc2hvcnRseSBhZnRlcndhcmRzIGJlY2FtZSBhbHRvZ2V0aGVyIGhvc3RpbGUgd2hlbiBoZSBsZWFybmVkIGhvdyBoaXMgd2lmZSBoYWQgYmVlbiB0cmVhdGVkLCBvbiB3aGljaCBtYXR0ZXIgUGxhdG8gYWxzbyBzcG9rZSBjb3ZlcnRseSBpbiBhIGxldHRlciB0byBEaW9ueXNpdXMuIFRoZSBjYXNlIHdhcyBhcyBmb2xsb3dzLiBBZnRlciB0aGUgZXhwdWxzaW9uIG9mIERpb24gYW5kIHdoZW4gRGlvbnlzaXVzIHdhcyBzZW5kaW5nIFBsYXRvIGJhY2ssPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIGZpcnN0IHRpbWU7IGNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gMTYuMyIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGhlIGJhZGUgaGltIGxlYXJuIGZyb20gRGlvbiBjb25maWRlbnRpYWxseSB3aGV0aGVyIGhlIHdvdWxkIG9wcG9zZSBoaXMgd2lmZSdzIG1hcnJ5aW5nIGFub3RoZXIgbWFuOyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyAxNi4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciB0aGVyZSB3YXMgYSByZXBvcnQsIHdoZXRoZXIgdHJ1ZSBvciBjb25jb2N0ZWQgYnkgRGlvbidzIGVuZW1pZXMsIHRoYXQgaGlzIG1hcnJpYWdlIGhhZCBub3QgcHJvdmVkIGFncmVlYWJsZSB0byBoaW0sIGFuZCB0aGF0IGhlIGRpZCBub3QgbGl2ZSBoYXJtb25pb3VzbHkgd2l0aCBoaXMgd2lmZS4gQWNjb3JkaW5nbHksIGFmdGVyIFBsYXRvIGNhbWUgdG8gQXRoZW5zIGFuZCBoYWQgY29uZmVycmVkIHdpdGggRGlvbiBhYm91dCBldmVyeXRoaW5nLCBoZSB3cm90ZSBhIGxldHRlciB0byB0aGUgdHlyYW50IHdoaWNoIHNwb2tlIG9mIG90aGVyIG1hdHRlcnMgaW4gYSB3YXkgdGhhdCB3YXMgY2xlYXIgdG8gYW55Ym9keSwgYnV0IG9mIHRoaXMgcGFydGljdWxhciBtYXR0ZXIgaW4gbGFuZ3VhZ2UgdGhhdCBjb3VsZCBiZSB1bmRlcnN0b29kIGJ5IERpb255c2l1cyBhbG9uZSwgc2F5aW5nIHRoYXQgaGUgaGFkIHRhbGtlZCB3aXRoIERpb24gYWJvdXQgdGhhdCBidXNpbmVzcywgYW5kIHRoYXQgRGlvbiB3b3VsZCBldmlkZW50bHkgYmUgZXhjZWVkaW5nbHkgYW5ncnkgaWYgRGlvbnlzaXVzIHNob3VsZCBjYXJyeSBpdCB0aHJvdWdoLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXN0LjwvdGl0bGU+IHhpaWkuIHAuIDM2MiBhZCBmaW4uPC9ub3RlPiAKCQkJCSAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4geGlpaS4gcC4gMzYyIGFkIGZpbi48L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgYXMgbG9uZyBhcyB0aGVyZSB3ZXJlIG1hbnkgaG9wZXMgb2YgYSByZWNvbmNpbGlhdGlvbiwgdGhlIHR5cmFudCB0b29rIG5vIHZpb2xlbnQgbWVhc3VyZXMgd2l0aCBoaXMgc2lzdGVyLCBidXQgc3VmZmVyZWQgaGVyIHRvIGNvbnRpbnVlIGxpdmluZyB3aXRoIERpb24ncyB5b3VuZyBzb247IHdoZW4sIGhvd2V2ZXIsIHRoZSBlc3RyYW5nZW1lbnQgd2FzIGNvbXBsZXRlLCBhbmQgUGxhdG8sIHdobyBoYWQgY29tZSB0byBTaWNpbHkgYSBzZWNvbmQgdGltZSwgaGFkIGJlZW4gc2VudCBhd2F5IGluIGVubWl0eSwgdGhlbiBoZSBnYXZlIEFyZXRlIGluIG1hcnJpYWdlLCBhZ2FpbnN0IGhlciB3aWxsLCB0byBUaW1vY3JhdGVzLCBvbmUgb2YgaGlzIGZyaWVuZHMuIEFuZCBpbiB0aGlzIGFjdGlvbiwgYXQgbGVhc3QsIGhlIGRpZCBub3QgaW1pdGF0ZSB0aGUgcmVhc29uYWJsZW5lc3Mgb2YgaGlzIGZhdGhlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBlbGRlciB0eXJhbnQgYWxzbywgYXMgaXQgd291bGQgYXBwZWFyLCBoYWQgYSBzaXN0ZXIsIFRoZXN0ZSwgd2hvc2UgaHVzYmFuZCwgUG9seXhlbnVzLCBoYWQgYmVjb21lIGhpcyBlbmVteS4gV2hlbiwgdGhlcmVmb3JlLCBQb2x5eGVudXMgd2FzIG1vdmVkIGJ5IGZlYXIgdG8gcnVuIGF3YXkgYW5kIGdvIGludG8gZXhpbGUgZnJvbSBTaWNpbHksIHRoZSB0eXJhbnQgc2VudCBmb3IgaGlzIHNpc3RlciBhbmQgdXBicmFpZGVkIGhlciBiZWNhdXNlIHNoZSBoYWQgYmVlbiBwcml2eSB0byBoZXIgaHVzYmFuZCdzIGZsaWdodCBhbmQgaGFkIG5vdCB0b2xkIGhlciBicm90aGVyIGFib3V0IGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2hlLCB3aXRob3V0IGNvbnN0ZXJuYXRpb24sIGFuZCwgaW5kZWVkLCB3aXRob3V0IGZlYXIsIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9zdCB0aG91IHRoaW5rIG1lLCBEaW9ueXNpdXMsIHN1Y2ggYSBtZWFuIGFuZCBjb3dhcmRseSB3aWZlIHRoYXQsIGhhZCBJIGtub3duIGJlZm9yZWhhbmQgb2YgbXkgaHVzYmFuZCdzIGZsaWdodCwgSSB3b3VsZCBub3QgaGF2ZSBzYWlsZWQgb2ZmIHdpdGggaGltIGFuZCBzaGFyZWQgaGlzIGZvcnR1bmVzPyBJbmRlZWQsIEkgZGlkIG5vdCBrbm93IGFib3V0IGl0OyBzaW5jZSBpdCB3b3VsZCBoYXZlIGJlZW4gd2VsbCBmb3IgbWUgdG8gYmUgY2FsbGVkIHRoZSB3aWZlIG9mIFBvbHl4ZW51cyB0aGUgZXhpbGUsIHJhdGhlciB0aGFuIHRoZSBzaXN0ZXIgb2YgRGlvbnlzaXVzIHRoZSB0eXJhbnQuPC9xPiBUaGUgdHlyYW50IGlzIHNhaWQgdG8gaGF2ZSBhZG1pcmVkIFRoZXN0ZSBmb3IgdGhpcyBib2xkIHNwZWVjaC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSBTeXJhY3VzYW5zIGFsc28gYWRtaXJlZCB0aGUgdmlydHVlIG9mIHRoZSB3b21hbiwgc28gdGhhdCBldmVuIGFmdGVyIHRoZSBkaXNzb2x1dGlvbiBvZiB0aGUgdHlyYW5ueSBzaGUgcmV0YWluZWQgdGhlIGhvbm91cnMgYW5kIHNlcnZpY2VzIHBhaWQgdG8gcm95YWx0eSwgYW5kIHdoZW4gc2hlIGRpZWQsIHRoZSBjaXRpemVucywgYnkgcHVibGljIGNvbnNlbnQsIGF0dGVuZGVkIGhlciBmdW5lcmFsLiBUaGlzIGlzIGEgZGlncmVzc2lvbiwgaXQgaXMgdHJ1ZSwgYnV0IG5vdCBhIHVzZWxlc3Mgb25lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgZWxkZXIgdHlyYW50IGFsc28sIGFzIGl0IHdvdWxkIGFwcGVhciwgaGFkIGEgc2lzdGVyLCBUaGVzdGUsIHdob3NlIGh1c2JhbmQsIFBvbHl4ZW51cywgaGFkIGJlY29tZSBoaXMgZW5lbXkuIFdoZW4sIHRoZXJlZm9yZSwgUG9seXhlbnVzIHdhcyBtb3ZlZCBieSBmZWFyIHRvIHJ1biBhd2F5IGFuZCBnbyBpbnRvIGV4aWxlIGZyb20gU2ljaWx5LCB0aGUgdHlyYW50IHNlbnQgZm9yIGhpcyBzaXN0ZXIgYW5kIHVwYnJhaWRlZCBoZXIgYmVjYXVzZSBzaGUgaGFkIGJlZW4gcHJpdnkgdG8gaGVyIGh1c2JhbmQncyBmbGlnaHQgYW5kIGhhZCBub3QgdG9sZCBoZXIgYnJvdGhlciBhYm91dCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaGUsIHdpdGhvdXQgY29uc3Rlcm5hdGlvbiwgYW5kLCBpbmRlZWQsIHdpdGhvdXQgZmVhciwgcmVwbGllZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvc3QgdGhvdSB0aGluayBtZSwgRGlvbnlzaXVzLCBzdWNoIGEgbWVhbiBhbmQgY293YXJkbHkgd2lmZSB0aGF0LCBoYWQgSSBrbm93biBiZWZvcmVoYW5kIG9mIG15IGh1c2JhbmQncyBmbGlnaHQsIEkgd291bGQgbm90IGhhdmUgc2FpbGVkIG9mZiB3aXRoIGhpbSBhbmQgc2hhcmVkIGhpcyBmb3J0dW5lcz8gSW5kZWVkLCBJIGRpZCBub3Qga25vdyBhYm91dCBpdDsgc2luY2UgaXQgd291bGQgaGF2ZSBiZWVuIHdlbGwgZm9yIG1lIHRvIGJlIGNhbGxlZCB0aGUgd2lmZSBvZiBQb2x5eGVudXMgdGhlIGV4aWxlLCByYXRoZXIgdGhhbiB0aGUgc2lzdGVyIG9mIERpb255c2l1cyB0aGUgdHlyYW50LjwvcT4gVGhlIHR5cmFudCBpcyBzYWlkIHRvIGhhdmUgYWRtaXJlZCBUaGVzdGUgZm9yIHRoaXMgYm9sZCBzcGVlY2guIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGUgU3lyYWN1c2FucyBhbHNvIGFkbWlyZWQgdGhlIHZpcnR1ZSBvZiB0aGUgd29tYW4sIHNvIHRoYXQgZXZlbiBhZnRlciB0aGUgZGlzc29sdXRpb24gb2YgdGhlIHR5cmFubnkgc2hlIHJldGFpbmVkIHRoZSBob25vdXJzIGFuZCBzZXJ2aWNlcyBwYWlkIHRvIHJveWFsdHksIGFuZCB3aGVuIHNoZSBkaWVkLCB0aGUgY2l0aXplbnMsIGJ5IHB1YmxpYyBjb25zZW50LCBhdHRlbmRlZCBoZXIgZnVuZXJhbC4gVGhpcyBpcyBhIGRpZ3Jlc3Npb24sIGl0IGlzIHRydWUsIGJ1dCBub3QgYSB1c2VsZXNzIG9uZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGlzIHRpbWUgb24gRGlvbiB0dXJuZWQgaGlzIHRob3VnaHRzIHRvIHdhci4gV2l0aCB0aGlzIFBsYXRvIGhpbXNlbGYgd291bGQgaGF2ZSBub3RoaW5nIHRvIGRvLCBvdXQgb2YgcmVzcGVjdCBmb3IgaGlzIHRpZSBvZiBob3NwaXRhbGl0eSB3aXRoIERpb255c2l1cywgYW5kIGJlY2F1c2Ugb2YgaGlzIGFnZS4gQnV0IFNwZXVzaXBwdXMgYW5kIHRoZSByZXN0IG9mIGhpcyBjb21wYW5pb25zIGNvLW9wZXJhdGVkIHdpdGggRGlvbiBhbmQgYmVzb3VnaHQgaGltIHRvIGZyZWUgU2ljaWx5LCB3aGljaCBzdHJldGNoZWQgb3V0IGhlciBhcm1zIHRvIGhpbSBhbmQgZWFnZXJseSBhd2FpdGVkIGhpcyBjb21pbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIFBsYXRvIHdhcyB0YXJyeWluZyBpbiBTeXJhY3VzZSwgU3BldXNpcHB1cywgYXMgaXQgd291bGQgYXBwZWFyLCBtaW5nbGVkIG1vcmUgd2l0aCBpdHMgcGVvcGxlIGFuZCBsZWFybmVkIHRvIGtub3cgdGhlaXIgc2VudGltZW50czsgYW5kIHRob3VnaCBhdCBmaXJzdCB0aGV5IHdlcmUgYWZyYWlkIG9mIGhpcyBib2xkbmVzcyBvZiBzcGVlY2gsIHRoaW5raW5nIGl0IGEgdHJhcCBzZXQgZm9yIHRoZW0gYnkgdGhlIHR5cmFudCwgeWV0IGluIHRpbWUgdGhleSBjYW1lIHRvIHRydXN0IGhpbS4gRm9yIGFsbCBub3cgc3Bva2UgaW4gdGhlIHNhbWUgc3RyYWluLCBiZWdnaW5nIGFuZCBleGhvcnRpbmcgRGlvbiB0byBjb21lIHdpdGhvdXQgc2hpcHMgbWVuLWF0LWFybXMsIG9yIGhvcnNlczsgaGUgd2FzIHNpbXBseSB0byBjb21lIGhpbXNlbGYgaW4gYSBzbWFsbCBib2F0LCBhbmQgbGVuZCB0aGUgU2ljaWxpYW5zIGhpcyBwZXJzb24gYW5kIGhpcyBuYW1lIGFnYWluc3QgRGlvbnlzaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5FbmNvdXJhZ2VkIGJ5IHRoaXMgaW5mb3JtYXRpb24gZnJvbSBTcGV1c2lwcHVzLCBEaW9uIGNvbGxlY3RlZCBtZXJjZW5hcmllcyBzZWNyZXRseSBhbmQgYnkgdGhlIGFnZW5jeSBvZiBvdGhlcnMsIGNvbmNlYWxpbmcgaGlzIHB1cnBvc2UuIEhlIHdhcyBhc3Npc3RlZCBhbHNvIGJ5IG1hbnkgc3RhdGVzbWVuIGFuZCBwaGlsb3NvcGhlcnMsIHN1Y2ggYXMgRXVkZW11cyB0aGUgQ3lwcmlhbiwgb24gd2hvc2UgZGVhdGggQXJpc3RvdGxlIHdyb3RlIGhpcyBkaWFsb2d1ZSAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk9uIHRoZSBTb3VsLDwvcT4gYW5kIFRpbW9uaWRlcyB0aGUgTGV1Y2FkaWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgdGhleSBlbmxpc3RlZCBvbiBoaXMgc2lkZSBNaWx0YXMgdGhlIFRoZXNzYWxpYW4gYWxzbywgd2hvIHdhcyBhIHNlZXIgYW5kIGhhZCBzdHVkaWVkIGluIHRoZSBBY2FkZW15LiBCdXQgb2YgdGhvc2Ugd2hvIGhhZCBiZWVuIGJhbmlzaGVkIGJ5IHRoZSB0eXJhbnQsIGFuZCB0aGVyZSB3ZXJlIG5vdCBsZXNzIHRoYW4gYSB0aG91c2FuZCBvZiB0aGVtLCBvbmx5IHR3ZW50eS1maXZlIHRvb2sgcGFydCBpbiB0aGUgZXhwZWRpdGlvbjsgdGhlIHJlc3QgcGxheWVkIHRoZSBjb3dhcmQgYW5kIGFiYW5kb25lZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJlbmRlenZvdXMgd2FzIHRoZSBpc2xhbmQgb2YgWmFjeW50aHVzLCBhbmQgaGVyZSB0aGUgc29sZGllcnMgd2VyZSBhc3NlbWJsZWQuIFRoZXkgbnVtYmVyZWQgZmV3ZXIgdGhhbiBlaWdodCBodW5kcmVkLCBidXQgdGhleSB3ZXJlIGFsbCB3ZWxsIGtub3duIGluIGNvbnNlcXVlbmNlIG9mIG1hbnkgZ3JlYXQgY2FtcGFpZ25zLCB0aGVpciBib2RpZXMgd2VyZSBleGNlcHRpb25hbGx5IHdlbGwgdHJhaW5lZCwgd2hpbGUgaW4gZXhwZXJpZW5jZSBhbmQgZGFyaW5nIHRoZXkgaGFkIG5vIGVxdWFscyBpbiB0aGUgd29ybGQsIGFuZCB3ZXJlIGNhcGFibGUgb2YgaW5jaXRpbmcgYW5kIGluZmxhbWluZyB0byBzaGFyZSB0aGVpciBwcm93ZXNzIGFsbCB0aGUgaG9zdCB3aGljaCBEaW9uIGV4cGVjdGVkIHRvIGhhdmUgaW4gU2ljaWx5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGlzIHRpbWUgb24gRGlvbiB0dXJuZWQgaGlzIHRob3VnaHRzIHRvIHdhci4gV2l0aCB0aGlzIFBsYXRvIGhpbXNlbGYgd291bGQgaGF2ZSBub3RoaW5nIHRvIGRvLCBvdXQgb2YgcmVzcGVjdCBmb3IgaGlzIHRpZSBvZiBob3NwaXRhbGl0eSB3aXRoIERpb255c2l1cywgYW5kIGJlY2F1c2Ugb2YgaGlzIGFnZS4gQnV0IFNwZXVzaXBwdXMgYW5kIHRoZSByZXN0IG9mIGhpcyBjb21wYW5pb25zIGNvLW9wZXJhdGVkIHdpdGggRGlvbiBhbmQgYmVzb3VnaHQgaGltIHRvIGZyZWUgU2ljaWx5LCB3aGljaCBzdHJldGNoZWQgb3V0IGhlciBhcm1zIHRvIGhpbSBhbmQgZWFnZXJseSBhd2FpdGVkIGhpcyBjb21pbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIFBsYXRvIHdhcyB0YXJyeWluZyBpbiBTeXJhY3VzZSwgU3BldXNpcHB1cywgYXMgaXQgd291bGQgYXBwZWFyLCBtaW5nbGVkIG1vcmUgd2l0aCBpdHMgcGVvcGxlIGFuZCBsZWFybmVkIHRvIGtub3cgdGhlaXIgc2VudGltZW50czsgYW5kIHRob3VnaCBhdCBmaXJzdCB0aGV5IHdlcmUgYWZyYWlkIG9mIGhpcyBib2xkbmVzcyBvZiBzcGVlY2gsIHRoaW5raW5nIGl0IGEgdHJhcCBzZXQgZm9yIHRoZW0gYnkgdGhlIHR5cmFudCwgeWV0IGluIHRpbWUgdGhleSBjYW1lIHRvIHRydXN0IGhpbS4gRm9yIGFsbCBub3cgc3Bva2UgaW4gdGhlIHNhbWUgc3RyYWluLCBiZWdnaW5nIGFuZCBleGhvcnRpbmcgRGlvbiB0byBjb21lIHdpdGhvdXQgc2hpcHMgbWVuLWF0LWFybXMsIG9yIGhvcnNlczsgaGUgd2FzIHNpbXBseSB0byBjb21lIGhpbXNlbGYgaW4gYSBzbWFsbCBib2F0LCBhbmQgbGVuZCB0aGUgU2ljaWxpYW5zIGhpcyBwZXJzb24gYW5kIGhpcyBuYW1lIGFnYWluc3QgRGlvbnlzaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkVuY291cmFnZWQgYnkgdGhpcyBpbmZvcm1hdGlvbiBmcm9tIFNwZXVzaXBwdXMsIERpb24gY29sbGVjdGVkIG1lcmNlbmFyaWVzIHNlY3JldGx5IGFuZCBieSB0aGUgYWdlbmN5IG9mIG90aGVycywgY29uY2VhbGluZyBoaXMgcHVycG9zZS4gSGUgd2FzIGFzc2lzdGVkIGFsc28gYnkgbWFueSBzdGF0ZXNtZW4gYW5kIHBoaWxvc29waGVycywgc3VjaCBhcyBFdWRlbXVzIHRoZSBDeXByaWFuLCBvbiB3aG9zZSBkZWF0aCBBcmlzdG90bGUgd3JvdGUgaGlzIGRpYWxvZ3VlIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiB0aGUgU291bCw8L3E+IGFuZCBUaW1vbmlkZXMgdGhlIExldWNhZGlhbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCB0aGV5IGVubGlzdGVkIG9uIGhpcyBzaWRlIE1pbHRhcyB0aGUgVGhlc3NhbGlhbiBhbHNvLCB3aG8gd2FzIGEgc2VlciBhbmQgaGFkIHN0dWRpZWQgaW4gdGhlIEFjYWRlbXkuIEJ1dCBvZiB0aG9zZSB3aG8gaGFkIGJlZW4gYmFuaXNoZWQgYnkgdGhlIHR5cmFudCwgYW5kIHRoZXJlIHdlcmUgbm90IGxlc3MgdGhhbiBhIHRob3VzYW5kIG9mIHRoZW0sIG9ubHkgdHdlbnR5LWZpdmUgdG9vayBwYXJ0IGluIHRoZSBleHBlZGl0aW9uOyB0aGUgcmVzdCBwbGF5ZWQgdGhlIGNvd2FyZCBhbmQgYWJhbmRvbmVkIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZW5kZXp2b3VzIHdhcyB0aGUgaXNsYW5kIG9mIFphY3ludGh1cywgYW5kIGhlcmUgdGhlIHNvbGRpZXJzIHdlcmUgYXNzZW1ibGVkLiBUaGV5IG51bWJlcmVkIGZld2VyIHRoYW4gZWlnaHQgaHVuZHJlZCwgYnV0IHRoZXkgd2VyZSBhbGwgd2VsbCBrbm93biBpbiBjb25zZXF1ZW5jZSBvZiBtYW55IGdyZWF0IGNhbXBhaWducywgdGhlaXIgYm9kaWVzIHdlcmUgZXhjZXB0aW9uYWxseSB3ZWxsIHRyYWluZWQsIHdoaWxlIGluIGV4cGVyaWVuY2UgYW5kIGRhcmluZyB0aGV5IGhhZCBubyBlcXVhbHMgaW4gdGhlIHdvcmxkLCBhbmQgd2VyZSBjYXBhYmxlIG9mIGluY2l0aW5nIGFuZCBpbmZsYW1pbmcgdG8gc2hhcmUgdGhlaXIgcHJvd2VzcyBhbGwgdGhlIGhvc3Qgd2hpY2ggRGlvbiBleHBlY3RlZCB0byBoYXZlIGluIFNpY2lseS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIGluZGVlZCwgd2hlbiB0aGVzZSBtZW4gaGVhcmQgdGhhdCB0aGVpciBleHBlZGl0aW9uIHdhcyBkaXJlY3RlZCBhZ2FpbnN0IERpb255c2l1cyBhbmQgU2ljaWx5LCB0aGV5IHdlcmUgZnVsbCBvZiBjb25zdGVybmF0aW9uIGFuZCBkZW5vdW5jZWQgdGhlIGVudGVycHJpc2UsIGRlY2xhcmluZyB0aGF0IERpb24sIGluIGEgbWFkIGZyZW56eSBvZiBhbmdlciwgb3IgaW4gZGVzcGFpciwgd2FzIHBsdW5naW5nIGludG8gZGVzcGVyYXRlIHVuZGVydGFraW5nczsgdGhleSB3ZXJlIGFsc28gZW5yYWdlZCBhdCB0aGVpciBvd24gbGVhZGVycyBhbmQgcmVjcnVpdGluZyBvZmZpY2VycyBmb3Igbm90IGhhdmluZyB0b2xkIHRoZW0gYXQgdGhlIHZlcnkgb3V0c2V0IGFib3V0IHRoZSB3YXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIERpb24gYWRkcmVzc2VkIHRoZW0sIHNldHRpbmcgZm9ydGggaW4gZGV0YWlsIHRoZSB1bnNvdW5kIGNvbmRpdGlvbiBvZiB0aGUgdHlyYW5ueSwgYW5kIGRlY2xhcmluZyB0aGF0IGhlIHdhcyB0YWtpbmcgdGhlbSwgbm90IGFzIHNvbGRpZXJzLCBidXQgYXMgY29tbWFuZGVycyBvZiB0aGUgU3lyYWN1c2FucyBhbmQgdGhlIHJlc3Qgb2YgdGhlIFNpY2lsaWFucywgd2hvIGhhZCBsb25nIGJlZW4gcmVhZHkgZm9yIGEgcmV2b2x0OyBhbmQgd2hlbiwgYWZ0ZXIgRGlvbiwgQWxjaW1lbmVzLCB3aG8gd2FzIGFuIEFjaGFlYW4gb2YgdGhlIGhpZ2hlc3QgYmlydGggYW5kIHJlcHV0YXRpb24gYW5kIGEgbWVtYmVyIG9mIHRpbWUgZXhwZWRpdGlvbiwgaGFkIGFyZ3VlZCB3aXRoIHRoZW0sIHRoZXkgd2VyZSBwZXJzdWFkZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIGluZGVlZCwgd2hlbiB0aGVzZSBtZW4gaGVhcmQgdGhhdCB0aGVpciBleHBlZGl0aW9uIHdhcyBkaXJlY3RlZCBhZ2FpbnN0IERpb255c2l1cyBhbmQgU2ljaWx5LCB0aGV5IHdlcmUgZnVsbCBvZiBjb25zdGVybmF0aW9uIGFuZCBkZW5vdW5jZWQgdGhlIGVudGVycHJpc2UsIGRlY2xhcmluZyB0aGF0IERpb24sIGluIGEgbWFkIGZyZW56eSBvZiBhbmdlciwgb3IgaW4gZGVzcGFpciwgd2FzIHBsdW5naW5nIGludG8gZGVzcGVyYXRlIHVuZGVydGFraW5nczsgdGhleSB3ZXJlIGFsc28gZW5yYWdlZCBhdCB0aGVpciBvd24gbGVhZGVycyBhbmQgcmVjcnVpdGluZyBvZmZpY2VycyBmb3Igbm90IGhhdmluZyB0b2xkIHRoZW0gYXQgdGhlIHZlcnkgb3V0c2V0IGFib3V0IHRoZSB3YXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIERpb24gYWRkcmVzc2VkIHRoZW0sIHNldHRpbmcgZm9ydGggaW4gZGV0YWlsIHRoZSB1bnNvdW5kIGNvbmRpdGlvbiBvZiB0aGUgdHlyYW5ueSwgYW5kIGRlY2xhcmluZyB0aGF0IGhlIHdhcyB0YWtpbmcgdGhlbSwgbm90IGFzIHNvbGRpZXJzLCBidXQgYXMgY29tbWFuZGVycyBvZiB0aGUgU3lyYWN1c2FucyBhbmQgdGhlIHJlc3Qgb2YgdGhlIFNpY2lsaWFucywgd2hvIGhhZCBsb25nIGJlZW4gcmVhZHkgZm9yIGEgcmV2b2x0OyBhbmQgd2hlbiwgYWZ0ZXIgRGlvbiwgQWxjaW1lbmVzLCB3aG8gd2FzIGFuIEFjaGFlYW4gb2YgdGhlIGhpZ2hlc3QgYmlydGggYW5kIHJlcHV0YXRpb24gYW5kIGEgbWVtYmVyIG9mIHRpbWUgZXhwZWRpdGlvbiwgaGFkIGFyZ3VlZCB3aXRoIHRoZW0sIHRoZXkgd2VyZSBwZXJzdWFkZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3cgbWlkc3VtbWVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjM1NyBCLkMuPC9ub3RlPiB0aGUgRXRlc2lhbiB3aW5kczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPldpbmRzIGJsb3dpbmcgc3RlYWRpbHkgZnJvbSB0aGUgTm9ydGggZHVyaW5nIHRoZSBzdW1tZXIuPC9ub3RlPiBwcmV2YWlsZWQgYXQgc2VhLCBhbmQgdGhlIG1vb24gd2FzIGF0IHRoZSBmdWxsLiBEaW9uIGhhZCBwcmVwYXJlZCBhIG1hZ25pZmljZW50IHNhY3JpZmljZSB0byBBcG9sbG8sIGFuZCBtYXJjaGVkIGluIHNvbGVtbiBwcm9jZXNzaW9uIHRvIHRoZSB0ZW1wbGUgd2l0aCBoaXMgc29sZGllcnMsIHdobyB3ZXJlIGFycmF5ZWQgaW4gZnVsbCBhcm1vdXIuIEFmdGVyIHRoZSBzYWNyaWZpY2UsIGhlIGdhdmUgdGhlbSBhIGJhbnF1ZXQgaW4gdGhlIHN0YWRpdW0gb2YgdGhlIFphY3ludGhpYW5zLCB3aGVyZSwgYXMgdGhleSByZWNsaW5lZCBvbiB0aGVpciBjb3VjaGVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz50aGV5IHdvbmRlcmVkIGF0IHRoZSBzcGxlbmRvdXIgb2YgdGhlIGdvbGQgYW5kIHNpbHZlciBiZWFrZXJzLCBhbmQgb2YgdGhlIHRhYmxlcywgZm9yIGl0IHBhc3NlZCB0aGUgbGltaXRzIHNldCBieSBhIHByaXZhdGUgbWFuJ3MgZm9ydHVuZTsgdGhleSByZWFzb25lZCwgdG9vLCB0aGF0IGEgbWFuIHdobyB3YXMgYWxyZWFkeSBwYXN0IGhpcyBwcmltZSBhbmQgd2FzIG1hc3RlciBvZiBzdWNoIGdyZWF0IGFmZmx1ZW5jZSwgd291bGQgbm90IGVuZ2FnZSBpbiBoYXphcmRvdXMgZW50ZXJwcmlzZXMgdW5sZXNzIGhlIGhhZCBzb2xpZCBob3BlcyBvZiBzdWNjZXNzLCBhbmQgZnJpZW5kcyBvdmVyIHRoZXJlIHdobyBvZmZlcmVkIGhpbSB1bmJvdW5kZWQgcmVzb3VyY2VzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3cgbWlkc3VtbWVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MzU3IEIuQy48L25vdGU+IHRoZSBFdGVzaWFuIHdpbmRzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5XaW5kcyBibG93aW5nIHN0ZWFkaWx5IGZyb20gdGhlIE5vcnRoIGR1cmluZyB0aGUgc3VtbWVyLjwvbm90ZT4gcHJldmFpbGVkIGF0IHNlYSwgYW5kIHRoZSBtb29uIHdhcyBhdCB0aGUgZnVsbC4gRGlvbiBoYWQgcHJlcGFyZWQgYSBtYWduaWZpY2VudCBzYWNyaWZpY2UgdG8gQXBvbGxvLCBhbmQgbWFyY2hlZCBpbiBzb2xlbW4gcHJvY2Vzc2lvbiB0byB0aGUgdGVtcGxlIHdpdGggaGlzIHNvbGRpZXJzLCB3aG8gd2VyZSBhcnJheWVkIGluIGZ1bGwgYXJtb3VyLiBBZnRlciB0aGUgc2FjcmlmaWNlLCBoZSBnYXZlIHRoZW0gYSBiYW5xdWV0IGluIHRoZSBzdGFkaXVtIG9mIHRoZSBaYWN5bnRoaWFucywgd2hlcmUsIGFzIHRoZXkgcmVjbGluZWQgb24gdGhlaXIgY291Y2hlcywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnRoZXkgd29uZGVyZWQgYXQgdGhlIHNwbGVuZG91ciBvZiB0aGUgZ29sZCBhbmQgc2lsdmVyIGJlYWtlcnMsIGFuZCBvZiB0aGUgdGFibGVzLCBmb3IgaXQgcGFzc2VkIHRoZSBsaW1pdHMgc2V0IGJ5IGEgcHJpdmF0ZSBtYW4ncyBmb3J0dW5lOyB0aGV5IHJlYXNvbmVkLCB0b28sIHRoYXQgYSBtYW4gd2hvIHdhcyBhbHJlYWR5IHBhc3QgaGlzIHByaW1lIGFuZCB3YXMgbWFzdGVyIG9mIHN1Y2ggZ3JlYXQgYWZmbHVlbmNlLCB3b3VsZCBub3QgZW5nYWdlIGluIGhhemFyZG91cyBlbnRlcnByaXNlcyB1bmxlc3MgaGUgaGFkIHNvbGlkIGhvcGVzIG9mIHN1Y2Nlc3MsIGFuZCBmcmllbmRzIG92ZXIgdGhlcmUgd2hvIG9mZmVyZWQgaGltIHVuYm91bmRlZCByZXNvdXJjZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciB0aGUgbGliYXRpb25zIGFuZCB0aGUgY3VzdG9tYXJ5IHByYXllcnMsIHRoZSBtb29uIHdhcyBlY2xpcHNlZC4gTm93LCB0byBEaW9uIHRoaXMgd2FzIG5vdGhpbmcgYXN0b25pc2hpbmcsIGZvciBoZSBrbmV3IHRoYXQgZWNsaXBzZXMgcmVjdXJyZWQgYXQgcmVndWxhciBpbnRlcnZhbHMsIGFuZCB0aGF0IHRoZSBzaGFkb3cgcHJvamVjdGVkIG9uIHRoZSBtb29uIHdhcyBjYXVzZWQgYnkgdGhlIGludGVycG9zaXRpb24gb2YgdGhlIGVhcnRoIGJldHdlZW4gaGVyIGFuZCB0aGUgc3VuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgdGhlIHNvbGRpZXJzLCB3aG8gd2VyZSBncmVhdGx5IGRpc3R1cmJlZCwgbmVlZGVkIHNvbWUgZW5jb3VyYWdlbWVudCwgTWlsdGFzIHRoZSBzZWVyIHN0b29kIHVwIGFtb25nc3QgdGhlbSBhbmQgYmFkZSB0aGVtIGJlIG9mIGdvb2QgY2hlZXIsIGFuZCBleHBlY3QgdGhlIGJlc3QgcmVzdWx0czsgZm9yIHRoZSBkaXZpbmUgcG93ZXJzIGluZGljYXRlZCBhbiBlY2xpcHNlIG9mIHNvbWV0aGluZyB0aGF0IHdhcyBub3cgcmVzcGxlbmRlbnQ7IGJ1dCBub3RoaW5nIHdhcyBtb3JlIHJlc3BsZW5kZW50IHRoYW4gdGhlIHR5cmFubnkgb2YgRGlvbnlzaXVzLCBhbmQgaXQgd2FzIHRoZSByYWRpYW5jZSBvZiB0aGlzIHdoaWNoIHRoZXkgd291bGQgZXh0aW5ndWlzaCBhcyBzb29uIGFzIHRoZXkgcmVhY2hlZCBTaWNpbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaW50ZXJwcmV0YXRpb24sIHRoZW4sIE1pbHRhcyBtYWRlIHB1YmxpYyBmb3IgYWxsIHRvIGtub3c7IGJ1dCB0aGF0IG9mIHRoZSBiZWVzLCB3aGljaCB3ZXJlIHNlZW4gc2V0dGxpbmcgaW4gc3dhcm1zIHVwb24gdGhlIHN0ZXJucyBvZiBEaW9uJ3MgdHJhbnNwb3J0cywgaGUgdG9sZCBwcml2YXRlbHkgdG8gaGltIGFuZCBoaXMgZnJpZW5kcywgZXhwcmVzc2luZyBhIGZlYXIgdGhhdCBoaXMgdW5kZXJ0YWtpbmdzIHdvdWxkIHRocml2ZSBhdCB0aGUgb3V0c2V0LCBidXQgYWZ0ZXIgYSBzaG9ydCBzZWFzb24gb2YgZmxvd2VyaW5nIHdvdWxkIHdpdGhlciBhd2F5LiBJdCBpcyBzYWlkIHRoYXQgRGlvbnlzaXVzIGFsc28gaGFkIG1hbnkgcG9ydGVudG91cyBzaWducyBmcm9tIEhlYXZlbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW4gZWFnbGUgc25hdGNoZWQgYSBsYW5jZSBmcm9tIG9uZSBvZiBoaXMgYm9keS1ndWFyZHMsIGNhcnJpZWQgaXQgYWxvZnQsIGFuZCB0aGVuIGxldCBpdCBkcm9wIGludG8gdGhlIHNlYS4gIEZ1cnRoZXJtb3JlLCB0aGUgd2F0ZXIgb2YgdGhlIHNlYSB3aGljaCB3YXNoZWQgdGhlIGJhc2Ugb2YgdGhlIGFjcm9wb2xpcyB3YXMgc3dlZXQgYW5kIHBvdGFibGUgZm9yIGEgd2hvbGUgZGF5LCBhcyBhbGwgd2hvIHRhc3RlZCBpdCBjb3VsZCBzZWUuIEFnYWluLCBwaWdzIHdlcmUgbGl0dGVyZWQgZm9yIGhpbSB3aGljaCB3ZXJlIHBlcmZlY3QgaW4gdGhlaXIgb3RoZXIgcGFydHMsIGJ1dCBoYWQgbm8gZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB0aGUgc2VlcnMgZGVjbGFyZWQgdG8gYmUgYSBzaWduIG9mIGRpc29iZWRpZW5jZSBhbmQgcmViZWxsaW9uLCBzaW5jZSwgYXMgdGhleSBzYWlkLCB0aGUgY2l0aXplbnMgd291bGQgbm8gbG9uZ2VyIGxpc3RlbiB0byB0aGUgY29tbWFuZHMgb2YgdGhlIHR5cmFudDsgdGhlIHN3ZWV0bmVzcyBvZiB0aGUgc2VhLXdhdGVyIGluZGljYXRlZCBmb3IgdGhlIFN5cmFjdXNhbnMgYSBjaGFuZ2UgZnJvbSBncmlldm91cyBhbmQgb3BwcmVzc2l2ZSB0aW1lcyB0byBjb21mb3J0YWJsZSBjaXJjdW1zdGFuY2VzOyBhbiBlYWdsZSwgbW9yZW92ZXIsIHdhcyBzZXJ2YW50IG9mIFpldXMsIGFuZCBhIHNwZWFyLCBhbiBlbWJsZW0gb2YgYXV0aG9yaXR5IGFuZCBwb3dlciwgd2hlcmVmb3JlIHRoaXMgcHJvZGlneSBzaG93ZWQgdGhhdCB0aGUgZ3JlYXRlc3Qgb2YgdGhlIGdvZHMgZGVzaXJlZCB0aGUgdXR0ZXIgZGlzc29sdXRpb24gb2YgdGhlIHR5cmFubnkuIFN1Y2gsIGF0IGFsbCBldmVudHMsIGlzIHRoZSBhY2NvdW50IHdoaWNoIFRoZW9wb21wdXMgaGFzIGdpdmVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIHRoZSBsaWJhdGlvbnMgYW5kIHRoZSBjdXN0b21hcnkgcHJheWVycywgdGhlIG1vb24gd2FzIGVjbGlwc2VkLiBOb3csIHRvIERpb24gdGhpcyB3YXMgbm90aGluZyBhc3RvbmlzaGluZywgZm9yIGhlIGtuZXcgdGhhdCBlY2xpcHNlcyByZWN1cnJlZCBhdCByZWd1bGFyIGludGVydmFscywgYW5kIHRoYXQgdGhlIHNoYWRvdyBwcm9qZWN0ZWQgb24gdGhlIG1vb24gd2FzIGNhdXNlZCBieSB0aGUgaW50ZXJwb3NpdGlvbiBvZiB0aGUgZWFydGggYmV0d2VlbiBoZXIgYW5kIHRoZSBzdW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSB0aGUgc29sZGllcnMsIHdobyB3ZXJlIGdyZWF0bHkgZGlzdHVyYmVkLCBuZWVkZWQgc29tZSBlbmNvdXJhZ2VtZW50LCBNaWx0YXMgdGhlIHNlZXIgc3Rvb2QgdXAgYW1vbmdzdCB0aGVtIGFuZCBiYWRlIHRoZW0gYmUgb2YgZ29vZCBjaGVlciwgYW5kIGV4cGVjdCB0aGUgYmVzdCByZXN1bHRzOyBmb3IgdGhlIGRpdmluZSBwb3dlcnMgaW5kaWNhdGVkIGFuIGVjbGlwc2Ugb2Ygc29tZXRoaW5nIHRoYXQgd2FzIG5vdyByZXNwbGVuZGVudDsgYnV0IG5vdGhpbmcgd2FzIG1vcmUgcmVzcGxlbmRlbnQgdGhhbiB0aGUgdHlyYW5ueSBvZiBEaW9ueXNpdXMsIGFuZCBpdCB3YXMgdGhlIHJhZGlhbmNlIG9mIHRoaXMgd2hpY2ggdGhleSB3b3VsZCBleHRpbmd1aXNoIGFzIHNvb24gYXMgdGhleSByZWFjaGVkIFNpY2lseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaW50ZXJwcmV0YXRpb24sIHRoZW4sIE1pbHRhcyBtYWRlIHB1YmxpYyBmb3IgYWxsIHRvIGtub3c7IGJ1dCB0aGF0IG9mIHRoZSBiZWVzLCB3aGljaCB3ZXJlIHNlZW4gc2V0dGxpbmcgaW4gc3dhcm1zIHVwb24gdGhlIHN0ZXJucyBvZiBEaW9uJ3MgdHJhbnNwb3J0cywgaGUgdG9sZCBwcml2YXRlbHkgdG8gaGltIGFuZCBoaXMgZnJpZW5kcywgZXhwcmVzc2luZyBhIGZlYXIgdGhhdCBoaXMgdW5kZXJ0YWtpbmdzIHdvdWxkIHRocml2ZSBhdCB0aGUgb3V0c2V0LCBidXQgYWZ0ZXIgYSBzaG9ydCBzZWFzb24gb2YgZmxvd2VyaW5nIHdvdWxkIHdpdGhlciBhd2F5LiBJdCBpcyBzYWlkIHRoYXQgRGlvbnlzaXVzIGFsc28gaGFkIG1hbnkgcG9ydGVudG91cyBzaWducyBmcm9tIEhlYXZlbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuIGVhZ2xlIHNuYXRjaGVkIGEgbGFuY2UgZnJvbSBvbmUgb2YgaGlzIGJvZHktZ3VhcmRzLCBjYXJyaWVkIGl0IGFsb2Z0LCBhbmQgdGhlbiBsZXQgaXQgZHJvcCBpbnRvIHRoZSBzZWEuICBGdXJ0aGVybW9yZSwgdGhlIHdhdGVyIG9mIHRoZSBzZWEgd2hpY2ggd2FzaGVkIHRoZSBiYXNlIG9mIHRoZSBhY3JvcG9saXMgd2FzIHN3ZWV0IGFuZCBwb3RhYmxlIGZvciBhIHdob2xlIGRheSwgYXMgYWxsIHdobyB0YXN0ZWQgaXQgY291bGQgc2VlLiBBZ2FpbiwgcGlncyB3ZXJlIGxpdHRlcmVkIGZvciBoaW0gd2hpY2ggd2VyZSBwZXJmZWN0IGluIHRoZWlyIG90aGVyIHBhcnRzLCBidXQgaGFkIG5vIGVhcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgdGhlIHNlZXJzIGRlY2xhcmVkIHRvIGJlIGEgc2lnbiBvZiBkaXNvYmVkaWVuY2UgYW5kIHJlYmVsbGlvbiwgc2luY2UsIGFzIHRoZXkgc2FpZCwgdGhlIGNpdGl6ZW5zIHdvdWxkIG5vIGxvbmdlciBsaXN0ZW4gdG8gdGhlIGNvbW1hbmRzIG9mIHRoZSB0eXJhbnQ7IHRoZSBzd2VldG5lc3Mgb2YgdGhlIHNlYS13YXRlciBpbmRpY2F0ZWQgZm9yIHRoZSBTeXJhY3VzYW5zIGEgY2hhbmdlIGZyb20gZ3JpZXZvdXMgYW5kIG9wcHJlc3NpdmUgdGltZXMgdG8gY29tZm9ydGFibGUgY2lyY3Vtc3RhbmNlczsgYW4gZWFnbGUsIG1vcmVvdmVyLCB3YXMgc2VydmFudCBvZiBaZXVzLCBhbmQgYSBzcGVhciwgYW4gZW1ibGVtIG9mIGF1dGhvcml0eSBhbmQgcG93ZXIsIHdoZXJlZm9yZSB0aGlzIHByb2RpZ3kgc2hvd2VkIHRoYXQgdGhlIGdyZWF0ZXN0IG9mIHRoZSBnb2RzIGRlc2lyZWQgdGhlIHV0dGVyIGRpc3NvbHV0aW9uIG9mIHRoZSB0eXJhbm55LiBTdWNoLCBhdCBhbGwgZXZlbnRzLCBpcyB0aGUgYWNjb3VudCB3aGljaCBUaGVvcG9tcHVzIGhhcyBnaXZlbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNvbGRpZXJzIG9mIERpb24gZmlsbGVkIHR3byBtZXJjaGFudC1zaGlwcywgYW5kIGEgdGhpcmQgdHJhbnNwb3J0IG9mIHNtYWxsIHNpemUsIHRvZ2V0aGVyIHdpdGggdHdvIHRoaXJ0eS1vYXJlZCBnYWxsZXlzLCBhY2NvbXBhbmllZCB0aGVzZS4gIE1vcmVvdmVyLCBiZXNpZGVzIHRoZSBhcm1zIHdoaWNoIGhpcyBzb2xkaWVycyBoYWQsIERpb24gY2FycmllZCB0d28gdGhvdXNhbmQgc2hpZWxkcywgbWlzc2lsZXMgYW5kIHNwZWFycyBpbiBncmVhdCBudW1iZXJzLCBhbmQgYSBib3VuZGxlc3Mgc3RvcmUgb2YgcHJvdmlzaW9ucywgdGhhdCB0aGV5IG1pZ2h0IHN1ZmZlciBubyBsYWNrIGFzIHRoZXkgdHJhdmVyc2VkIHRoZSBoaWdoIHNlYS4gRm9yIHRoZXkgcHV0IHRoZW1zZWx2ZXMgZW50aXJlbHkgYXQgdGhlIG1lcmN5IG9mIHdpbmRzIGFuZCBzZWEgZHVyaW5nIHRoZWlyIHZveWFnZSwgYmVjYXVzZSB0aGV5IHdlcmUgYWZyYWlkIG9mIHRoZSBjb2FzdCwgYW5kIGxlYXJuZWQgdGhhdCBQaGlsaXN0dXMgd2FzIHdhdGNoaW5nIGZvciB0aGVtIHdpdGggYSBmbGVldCBhdCBJYXB5Z2lhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBzYWlsaW5nIHdpdGggYSBsaWdodCBhbmQgZ2VudGxlIGJyZWV6ZSBmb3IgdHdlbHZlIGRheXMsIG9uIHRoZSB0aGlydGVlbnRoIHRoZXkgcmVhY2hlZCBQYWNoeW51cywgYSBoZWFkbGFuZCBvZiBTaWNpbHkuIEhlcmUgUHJvdHVzIHRoZWlyIHBpbG90IHVyZ2VkIHRoZW0gdG8gZGlzZW1iYXJrIHdpdGggYWxsIHNwZWVkLCBzaW5jZSwgaWYgdGhleSBzaG91bGQgYmUgZm9yY2VkIGF3YXkgZnJvbSB0aGUgc2hvcmUsIGFuZCBzaG91bGQgcmVsaW5xdWlzaCB0aGUgaGVhZGxhbmQgd2hpY2ggdGhleSBoYWQgZ2FpbmVkLCB0aGV5IHdvdWxkIGJlIHRvc3NlZCBhYm91dCBvbiB0aGUgaGlnaCBzZWEgZm9yIG1hbnkgZGF5cyBhbmQgbmlnaHRzLCBhd2FpdGluZyBhIHNvdXRoIHdpbmQgaW4gdGhlIHN1bW1lciBzZWFzb24uIEJ1dCBEaW9uLCBmZWFyaW5nIHRvIGRpc2VtYmFyayBuZWFyIHRoZSBlbmVteSwgYW5kIHdpc2hpbmcgdG8gbGFuZCBmYXJ0aGVyIGFsb25nIHRoZSBjb2FzdCwgc2FpbGVkIHBhc3QgUGFjaHludXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiBhIGJvaXN0ZXJvdXMgd2luZCBmcm9tIHRoZSBub3J0aCBydXNoZWQgZG93biB1cG9uIHRoZW0sIHJhaXNlZCBhIGdyZWF0IHNlYSwgYW5kIGRyb3ZlIHRoZSBzaGlwcyBhd2F5IGZyb20gU2ljaWx5LCB3aGlsZSBmbGFzaGVzIG9mIGxpZ2h0bmluZyBhbmQgcGVhbHMgb2YgdGh1bmRlciwgbm93IHRoYXQgQXJjdHVydXMgd2FzIGp1c3QgcmlzaW5nLCBjb25zcGlyZWQgdG8gcG91ciBkb3duIGZyb20gdGhlIGhlYXZlbnMgYSBncmVhdCBzdG9ybSBvZiBmdXJpb3VzIHJhaW4uIFRoZSBzYWlsb3JzIHdlcmUgY29uZm91bmRlZCBieSB0aGlzIGFuZCBkcml2ZW4gZnJvbSB0aGVpciBjb3Vyc2UsIHVudGlsIG9uIGEgc3VkZGVuIHRoZXkgc2F3IHRoYXQgdGhlaXIgc2hpcHMgd2VyZSBkcml2aW5nIHdpdGggdGhlIHNlYSB1cG9uIENlcmNpbmEsIG9mZiB0aGUgY29hc3Qgb2YgQWZyaWNhLCBhdCBhIHBvaW50IHdoZXJlIHRoZSBpc2xhbmQgcHJlc2VudGVkIHRoZSByb3VnaGVzdCBhbmQgbW9zdCBwcmVjaXBpdG91cyBzaG9yZSBmb3IgdGhlaXIgYXBwcm9hY2guIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBhIG5hcnJvdyBlc2NhcGUgZnJvbSBiZWluZyBjYXN0IGFzaG9yZSBhbmQgZGFzaGVkIHRvIHBpZWNlcyBvbiB0aGUgcm9ja3MsIHRoZXkgcGxpZWQgdGhlaXIgcHVudGluZy1wb2xlcyBhbmQgZm9yY2VkIHRoZWlyIHdheSBhbG9uZyB3aXRoIGdyZWF0IGRpZmZpY3VsdHksIHVudGlsIHRoZSBzdG9ybSBhYmF0ZWQsIHdoZW4gdGhleSBsZWFybmVkIGZyb20gYSB2ZXNzZWwgd2hpY2ggdGhleSBzcG9rZSB0aGF0IHRoZXkgd2VyZSBhdCB3aGF0IHdlcmUgY2FsbGVkIHRoZSBIZWFkcyBvZiB0aGUgR3JlYXQgU3lydGlzLiBBbmQgbm93IHRoZXkgd2VyZSBkaXNoZWFydGVuZWQgYnkgdGhlIGNhbG0gaW4gd2hpY2ggdGhleSBmb3VuZCB0aGVtc2VsdmVzLCBhbmQgd2VyZSBkcmlmdGluZyB1cCBhbmQgZG93biwgd2hlbiBhIGdlbnRsZSBzb3V0aGVybHkgYnJlZXplIHdhcyB3YWZ0ZWQgdG8gdGhlbSBmcm9tIHRoZSBsYW5kLCBhbHRob3VnaCB0aGV5IHdlcmUgYnkgbm8gbWVhbnMgZXhwZWN0aW5nIGEgc291dGggd2luZCBhbmQgY291bGQgbm90IGJlbGlldmUgaW4gdGhlIGNoYW5nZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TGl0dGxlIGJ5IGxpdHRsZSwgaG93ZXZlciwgdGhlIHdpbmQgZnJlc2hlbmVkIGFuZCBncmV3IHN0cm9uZywgc28gdGhhdCB0aGV5IHNwcmVhZCBhbGwgdGhlIHNhaWwgdGhleSBoYWQsIGFuZCBwcmF5aW5nIHRvIHRoZSBnb2RzLCBmbGVkIG92ZXIgdGhlIHNlYSBmcm9tIEFmcmljYSB0b3dhcmRzIFNpY2lseS4gRm9yIGZpdmUgZGF5cyB0aGV5IHJhbiBzd2lmdGx5IG9uLCBhbmQgY2FtZSB0byBhbmNob3IgYXQgTWlub2EsIGEgbGl0dGxlIHRvd24gaW4gdGhhdCBwYXJ0IG9mIFNpY2lseSB3aGljaCB0aGUgQ2FydGhhZ2luaWFucyBjb250cm9sbGVkLiBOb3csIGl0IGNoYW5jZWQgdGhhdCBTeW5hbHVzLCB0aGUgQ2FydGhhZ2luaWFuIGNvbW1hbmRlciwgd2FzIGluIHRoZSBwbGFjZSwgYW5kIGhlIHdhcyBhIGd1ZXN0LWZyaWVuZCBvZiBEaW9uJ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3Qga25vd2luZyBvZiBEaW9uJ3MgcHJlc2VuY2Ugb3Igb2YgaGlzIGV4cGVkaXRpb24sIGhlIHRyaWVkIHRvIHByZXZlbnQgaGlzIHNvbGRpZXJzIGZyb20gbGFuZGluZy4gVGhlc2UsIGhvd2V2ZXIsIHJ1c2hlZCBvbiBzaG9yZSB3aXRoIHRoZWlyIGFybXMsIGFuZCBhbHRob3VnaCB0aGV5IGtpbGxlZCBubyBvbmUsIHNpbmNlIERpb24gaGFkIGZvcmJpZGRlbiBpdCBiZWNhdXNlIG9mIGhpcyBmcmllbmRzaGlwIHdpdGggdGhlIENhcnRoYWdpbmlhbiwgdGhleSBwdXQgdGhlaXIgb3Bwb25lbnRzIHRvIGZsaWdodCwgZGFzaGVkIGludG8gdGhlIHBsYWNlIHdpdGggdGhlIGZ1Z2l0aXZlcywgYW5kIGNhcHR1cmVkIGl0LiBCdXQgYXMgc29vbiBhcyB0aGUgdHdvIGNvbW1hbmRlcnMgaGFkIG1ldCBhbmQgZ3JlZXRlZCBvbmUgYW5vdGhlciwgRGlvbiByZXN0b3JlZCB0aGUgY2l0eSB0byBTeW5hbHVzLCB3aXRob3V0IGRvaW5nIGl0IGFueSBoYXJtLCBhbmQgU3luYWx1cyBlbnRlcnRhaW5lZCB0aGUgc29sZGllcnMgYW5kIHN1cHBsaWVkIERpb24gd2l0aCB3aGF0IGhlIHdhbnRlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNvbGRpZXJzIG9mIERpb24gZmlsbGVkIHR3byBtZXJjaGFudC1zaGlwcywgYW5kIGEgdGhpcmQgdHJhbnNwb3J0IG9mIHNtYWxsIHNpemUsIHRvZ2V0aGVyIHdpdGggdHdvIHRoaXJ0eS1vYXJlZCBnYWxsZXlzLCBhY2NvbXBhbmllZCB0aGVzZS4gIE1vcmVvdmVyLCBiZXNpZGVzIHRoZSBhcm1zIHdoaWNoIGhpcyBzb2xkaWVycyBoYWQsIERpb24gY2FycmllZCB0d28gdGhvdXNhbmQgc2hpZWxkcywgbWlzc2lsZXMgYW5kIHNwZWFycyBpbiBncmVhdCBudW1iZXJzLCBhbmQgYSBib3VuZGxlc3Mgc3RvcmUgb2YgcHJvdmlzaW9ucywgdGhhdCB0aGV5IG1pZ2h0IHN1ZmZlciBubyBsYWNrIGFzIHRoZXkgdHJhdmVyc2VkIHRoZSBoaWdoIHNlYS4gRm9yIHRoZXkgcHV0IHRoZW1zZWx2ZXMgZW50aXJlbHkgYXQgdGhlIG1lcmN5IG9mIHdpbmRzIGFuZCBzZWEgZHVyaW5nIHRoZWlyIHZveWFnZSwgYmVjYXVzZSB0aGV5IHdlcmUgYWZyYWlkIG9mIHRoZSBjb2FzdCwgYW5kIGxlYXJuZWQgdGhhdCBQaGlsaXN0dXMgd2FzIHdhdGNoaW5nIGZvciB0aGVtIHdpdGggYSBmbGVldCBhdCBJYXB5Z2lhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHNhaWxpbmcgd2l0aCBhIGxpZ2h0IGFuZCBnZW50bGUgYnJlZXplIGZvciB0d2VsdmUgZGF5cywgb24gdGhlIHRoaXJ0ZWVudGggdGhleSByZWFjaGVkIFBhY2h5bnVzLCBhIGhlYWRsYW5kIG9mIFNpY2lseS4gSGVyZSBQcm90dXMgdGhlaXIgcGlsb3QgdXJnZWQgdGhlbSB0byBkaXNlbWJhcmsgd2l0aCBhbGwgc3BlZWQsIHNpbmNlLCBpZiB0aGV5IHNob3VsZCBiZSBmb3JjZWQgYXdheSBmcm9tIHRoZSBzaG9yZSwgYW5kIHNob3VsZCByZWxpbnF1aXNoIHRoZSBoZWFkbGFuZCB3aGljaCB0aGV5IGhhZCBnYWluZWQsIHRoZXkgd291bGQgYmUgdG9zc2VkIGFib3V0IG9uIHRoZSBoaWdoIHNlYSBmb3IgbWFueSBkYXlzIGFuZCBuaWdodHMsIGF3YWl0aW5nIGEgc291dGggd2luZCBpbiB0aGUgc3VtbWVyIHNlYXNvbi4gQnV0IERpb24sIGZlYXJpbmcgdG8gZGlzZW1iYXJrIG5lYXIgdGhlIGVuZW15LCBhbmQgd2lzaGluZyB0byBsYW5kIGZhcnRoZXIgYWxvbmcgdGhlIGNvYXN0LCBzYWlsZWQgcGFzdCBQYWNoeW51cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiBhIGJvaXN0ZXJvdXMgd2luZCBmcm9tIHRoZSBub3J0aCBydXNoZWQgZG93biB1cG9uIHRoZW0sIHJhaXNlZCBhIGdyZWF0IHNlYSwgYW5kIGRyb3ZlIHRoZSBzaGlwcyBhd2F5IGZyb20gU2ljaWx5LCB3aGlsZSBmbGFzaGVzIG9mIGxpZ2h0bmluZyBhbmQgcGVhbHMgb2YgdGh1bmRlciwgbm93IHRoYXQgQXJjdHVydXMgd2FzIGp1c3QgcmlzaW5nLCBjb25zcGlyZWQgdG8gcG91ciBkb3duIGZyb20gdGhlIGhlYXZlbnMgYSBncmVhdCBzdG9ybSBvZiBmdXJpb3VzIHJhaW4uIFRoZSBzYWlsb3JzIHdlcmUgY29uZm91bmRlZCBieSB0aGlzIGFuZCBkcml2ZW4gZnJvbSB0aGVpciBjb3Vyc2UsIHVudGlsIG9uIGEgc3VkZGVuIHRoZXkgc2F3IHRoYXQgdGhlaXIgc2hpcHMgd2VyZSBkcml2aW5nIHdpdGggdGhlIHNlYSB1cG9uIENlcmNpbmEsIG9mZiB0aGUgY29hc3Qgb2YgQWZyaWNhLCBhdCBhIHBvaW50IHdoZXJlIHRoZSBpc2xhbmQgcHJlc2VudGVkIHRoZSByb3VnaGVzdCBhbmQgbW9zdCBwcmVjaXBpdG91cyBzaG9yZSBmb3IgdGhlaXIgYXBwcm9hY2guIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhZnRlciBhIG5hcnJvdyBlc2NhcGUgZnJvbSBiZWluZyBjYXN0IGFzaG9yZSBhbmQgZGFzaGVkIHRvIHBpZWNlcyBvbiB0aGUgcm9ja3MsIHRoZXkgcGxpZWQgdGhlaXIgcHVudGluZy1wb2xlcyBhbmQgZm9yY2VkIHRoZWlyIHdheSBhbG9uZyB3aXRoIGdyZWF0IGRpZmZpY3VsdHksIHVudGlsIHRoZSBzdG9ybSBhYmF0ZWQsIHdoZW4gdGhleSBsZWFybmVkIGZyb20gYSB2ZXNzZWwgd2hpY2ggdGhleSBzcG9rZSB0aGF0IHRoZXkgd2VyZSBhdCB3aGF0IHdlcmUgY2FsbGVkIHRoZSBIZWFkcyBvZiB0aGUgR3JlYXQgU3lydGlzLiBBbmQgbm93IHRoZXkgd2VyZSBkaXNoZWFydGVuZWQgYnkgdGhlIGNhbG0gaW4gd2hpY2ggdGhleSBmb3VuZCB0aGVtc2VsdmVzLCBhbmQgd2VyZSBkcmlmdGluZyB1cCBhbmQgZG93biwgd2hlbiBhIGdlbnRsZSBzb3V0aGVybHkgYnJlZXplIHdhcyB3YWZ0ZWQgdG8gdGhlbSBmcm9tIHRoZSBsYW5kLCBhbHRob3VnaCB0aGV5IHdlcmUgYnkgbm8gbWVhbnMgZXhwZWN0aW5nIGEgc291dGggd2luZCBhbmQgY291bGQgbm90IGJlbGlldmUgaW4gdGhlIGNoYW5nZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkxpdHRsZSBieSBsaXR0bGUsIGhvd2V2ZXIsIHRoZSB3aW5kIGZyZXNoZW5lZCBhbmQgZ3JldyBzdHJvbmcsIHNvIHRoYXQgdGhleSBzcHJlYWQgYWxsIHRoZSBzYWlsIHRoZXkgaGFkLCBhbmQgcHJheWluZyB0byB0aGUgZ29kcywgZmxlZCBvdmVyIHRoZSBzZWEgZnJvbSBBZnJpY2EgdG93YXJkcyBTaWNpbHkuIEZvciBmaXZlIGRheXMgdGhleSByYW4gc3dpZnRseSBvbiwgYW5kIGNhbWUgdG8gYW5jaG9yIGF0IE1pbm9hLCBhIGxpdHRsZSB0b3duIGluIHRoYXQgcGFydCBvZiBTaWNpbHkgd2hpY2ggdGhlIENhcnRoYWdpbmlhbnMgY29udHJvbGxlZC4gTm93LCBpdCBjaGFuY2VkIHRoYXQgU3luYWx1cywgdGhlIENhcnRoYWdpbmlhbiBjb21tYW5kZXIsIHdhcyBpbiB0aGUgcGxhY2UsIGFuZCBoZSB3YXMgYSBndWVzdC1mcmllbmQgb2YgRGlvbidzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3Qga25vd2luZyBvZiBEaW9uJ3MgcHJlc2VuY2Ugb3Igb2YgaGlzIGV4cGVkaXRpb24sIGhlIHRyaWVkIHRvIHByZXZlbnQgaGlzIHNvbGRpZXJzIGZyb20gbGFuZGluZy4gVGhlc2UsIGhvd2V2ZXIsIHJ1c2hlZCBvbiBzaG9yZSB3aXRoIHRoZWlyIGFybXMsIGFuZCBhbHRob3VnaCB0aGV5IGtpbGxlZCBubyBvbmUsIHNpbmNlIERpb24gaGFkIGZvcmJpZGRlbiBpdCBiZWNhdXNlIG9mIGhpcyBmcmllbmRzaGlwIHdpdGggdGhlIENhcnRoYWdpbmlhbiwgdGhleSBwdXQgdGhlaXIgb3Bwb25lbnRzIHRvIGZsaWdodCwgZGFzaGVkIGludG8gdGhlIHBsYWNlIHdpdGggdGhlIGZ1Z2l0aXZlcywgYW5kIGNhcHR1cmVkIGl0LiBCdXQgYXMgc29vbiBhcyB0aGUgdHdvIGNvbW1hbmRlcnMgaGFkIG1ldCBhbmQgZ3JlZXRlZCBvbmUgYW5vdGhlciwgRGlvbiByZXN0b3JlZCB0aGUgY2l0eSB0byBTeW5hbHVzLCB3aXRob3V0IGRvaW5nIGl0IGFueSBoYXJtLCBhbmQgU3luYWx1cyBlbnRlcnRhaW5lZCB0aGUgc29sZGllcnMgYW5kIHN1cHBsaWVkIERpb24gd2l0aCB3aGF0IGhlIHdhbnRlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoYXQgbW9zdCBvZiBhbGwgZW5jb3VyYWdlZCB0aGVtIHdhcyB0aGUgYWNjaWRlbnRhbCBhYnNlbmNlIG9mIERpb255c2l1cyBmcm9tIFN5cmFjdXNlOyBmb3IgaXQgY2hhbmNlZCB0aGF0IGhlIGhhZCByZWNlbnRseSBzYWlsZWQgd2l0aCBlaWdodHkgc2hpcHMgdG8gSXRhbHkuIFRoZXJlZm9yZSwgZXZlbiB0aG91Z2ggRGlvbiB1cmdlZCBoaXMgc29sZGllcnMgdG8gcmVjcnVpdCB0aGVtc2VsdmVzIGhlcmUgYWZ0ZXIgdGhlaXIgbG9uZyBoYXJkc2hpcHMgb24gdGhlIHNlYSwgdGhleSB3b3VsZCBub3QgY29uc2VudCB0byBpdCwgc28gZWFnZXIgd2VyZSB0aGV5IG9mIHRoZW1zZWx2ZXMgdG8gc2VpemUgdGhlaXIgb3Bwb3J0dW5pdHksIGJ1dCB1cmdlZCBoaW0gdG8gbGVhZCB0aGVtIHRvd2FyZHMgU3lyYWN1c2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBkZXBvc2l0ZWQgaGlzIHN1cGVyZmx1b3VzIGFybXMgYW5kIGJhZ2dhZ2UgdGhlcmUsIGFza2VkIFN5bmFsdXMgdG8gc2VuZCB0aGVtIHRvIGhpbSBhcyBvcHBvcnR1bml0eSBvZmZlcmVkLCBhbmQgbWFyY2hlZCBhZ2FpbnN0IFN5cmFjdXNlLiBBcyBoZSB3YXMgb24gaGlzIHdheSB0aGl0aGVyLCBmaXJzdCBoZSB3YXMgam9pbmVkIGJ5IHR3byBodW5kcmVkIGhvcnNlbWVuIGJlbG9uZ2luZyB0byB0aGUgQWdyaWdlbnRpbmVzIHdobyBkd2VsdCBhYm91dCBFY25vbXVtLCBhbmQgdGhlbiBieSBtZW4gb2YgR2VsYS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoYXQgbW9zdCBvZiBhbGwgZW5jb3VyYWdlZCB0aGVtIHdhcyB0aGUgYWNjaWRlbnRhbCBhYnNlbmNlIG9mIERpb255c2l1cyBmcm9tIFN5cmFjdXNlOyBmb3IgaXQgY2hhbmNlZCB0aGF0IGhlIGhhZCByZWNlbnRseSBzYWlsZWQgd2l0aCBlaWdodHkgc2hpcHMgdG8gSXRhbHkuIFRoZXJlZm9yZSwgZXZlbiB0aG91Z2ggRGlvbiB1cmdlZCBoaXMgc29sZGllcnMgdG8gcmVjcnVpdCB0aGVtc2VsdmVzIGhlcmUgYWZ0ZXIgdGhlaXIgbG9uZyBoYXJkc2hpcHMgb24gdGhlIHNlYSwgdGhleSB3b3VsZCBub3QgY29uc2VudCB0byBpdCwgc28gZWFnZXIgd2VyZSB0aGV5IG9mIHRoZW1zZWx2ZXMgdG8gc2VpemUgdGhlaXIgb3Bwb3J0dW5pdHksIGJ1dCB1cmdlZCBoaW0gdG8gbGVhZCB0aGVtIHRvd2FyZHMgU3lyYWN1c2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBkZXBvc2l0ZWQgaGlzIHN1cGVyZmx1b3VzIGFybXMgYW5kIGJhZ2dhZ2UgdGhlcmUsIGFza2VkIFN5bmFsdXMgdG8gc2VuZCB0aGVtIHRvIGhpbSBhcyBvcHBvcnR1bml0eSBvZmZlcmVkLCBhbmQgbWFyY2hlZCBhZ2FpbnN0IFN5cmFjdXNlLiBBcyBoZSB3YXMgb24gaGlzIHdheSB0aGl0aGVyLCBmaXJzdCBoZSB3YXMgam9pbmVkIGJ5IHR3byBodW5kcmVkIGhvcnNlbWVuIGJlbG9uZ2luZyB0byB0aGUgQWdyaWdlbnRpbmVzIHdobyBkd2VsdCBhYm91dCBFY25vbXVtLCBhbmQgdGhlbiBieSBtZW4gb2YgR2VsYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSByZXBvcnQgb2YgaGlzIGRvaW5ncyBxdWlja2x5IGZsZXcgdG8gU3lyYWN1c2UsIHdoZXJlIFRpbW9jcmF0ZXMsIHdobyBoYWQgbWFycmllZCBEaW9uJ3Mgd2lmZSwgdGhlIHNpc3RlciBvZiBEaW9ueXNpdXMsIGFuZCB3aG8gc3Rvb2QgYXQgdGhlIGhlYWQgb2YgdGhlIHR5cmFudCdzIGZyaWVuZHMgbm93IGxlZnQgaW4gdGhlIGNpdHksIHNwZWVkaWx5IHNlbnQgb2ZmIGEgbWVzc2VuZ2VyIHRvIERpb255c2l1cyB3aXRoIGxldHRlcnMgYW5ub3VuY2luZyB0aGUgYXJyaXZhbCBvZiBEaW9uLiBIZSBoaW1zZWxmLCBtb3Jlb3ZlciwgdG9vayBzdGVwcyB0byBwcmV2ZW50IGFueSBkaXN0dXJiYW5jZXMgb3IgdHVtdWx0cyBpbiB0aGUgY2l0eSwgd2hlcmUgYWxsIHdlcmUgZ3JlYXRseSBleGNpdGVkLCBidXQgYXMgeWV0IGtlcHQgcXVpZXQgb3dpbmcgdG8gdGhlaXIgZGlzdHJ1c3QgYW5kIGZlYXIuIEJ1dCBhIHN0cmFuZ2UgbWlzZm9ydHVuZSBiZWZlbGwgdGhlIG1hbiB3aG8gaGFkIGJlZW4gc2VudCB3aXRoIHRoZSBsZXR0ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoZSBoYWQgY3Jvc3NlZCB0byBJdGFseSBhbmQgcGFzc2VkIHRocm91Z2ggdGhlIHRlcnJpdG9yeSBvZiBSaGVnaXVtLCBhbmQgYXMgaGUgd2FzIGhhc3RlbmluZyBvbiB0byBEaW9ueXNpdXMgYXQgQ2F1bG9uaWEsIGhlIG1ldCBvbmUgb2YgaGlzIGFjcXVhaW50YW5jZXMgd2hvIHdhcyBjYXJyeWluZyBhbiBhbmltYWwgdGhhdCBoYWQgYmVlbiByZWNlbnRseSBzYWNyaWZpY2VkLCBhbmQgYWZ0ZXIgYWNjZXB0aW5nIGZyb20gaGltIGEgcG9ydGlvbiBvZiB0aGUgZmxlc2gsIHdlbnQgb24gaGlzIHdheSB3aXRoIGFsbCBzcGVlZC4gQnV0IGFmdGVyIHRyYXZlbGxpbmcgcGFydCBvZiB0aGUgbmlnaHQsIGhlIHdhcyBjb21wZWxsZWQgYnkgd2VhcmluZXNzIHRvIHRha2UgYSBsaXR0bGUgc2xlZXAsIGFuZCBsYXkgZG93biwganVzdCBhcyBoZSB3YXMsIGluIGEgd29vZCBieSB0aGUgc2lkZSBvZiB0aGUgcm9hZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBhIHdvbGYgY2FtZSB0byB0aGUgc3BvdCwgYXR0cmFjdGVkIGJ5IHRoZSBzY2VudCwgYW5kIHNlaXppbmcgdGhlIGZsZXNoIHdoaWNoIGhhZCBiZWVuIGZhc3RlbmVkIHRvIHRoZSB3YWxsZXQgaW4gd2hpY2ggdGhlIG1hbiBoYWQgaGlzIGxldHRlcnMsIHdlbnQgb2ZmIHdpdGggaXQgYW5kIHRoZSB3YWxsZXQgdG9vLiBXaGVuIHRoZSBtYW4gYXdva2UgYW5kIHBlcmNlaXZlZCB3aGF0IGhhZCBoYXBwZW5lZCwgaGUgd2FuZGVyZWQgYWJvdXQgYSBsb25nIHRpbWUgaW4gc2VhcmNoIG9mIHdoYXQgaGUgaGFkIGxvc3QsIGJ1dCBjb3VsZCBub3QgZmluZCBpdCwgYW5kIHRoZXJlZm9yZSBkZXRlcm1pbmVkIG5vdCB0byBnbyB0byB0aGUgdHlyYW50IHdpdGhvdXQgdGhlIGxldHRlcnMsIGJ1dCB0byBydW4gYXdheSBhbmQgZGlzYXBwZWFyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcmVwb3J0IG9mIGhpcyBkb2luZ3MgcXVpY2tseSBmbGV3IHRvIFN5cmFjdXNlLCB3aGVyZSBUaW1vY3JhdGVzLCB3aG8gaGFkIG1hcnJpZWQgRGlvbidzIHdpZmUsIHRoZSBzaXN0ZXIgb2YgRGlvbnlzaXVzLCBhbmQgd2hvIHN0b29kIGF0IHRoZSBoZWFkIG9mIHRoZSB0eXJhbnQncyBmcmllbmRzIG5vdyBsZWZ0IGluIHRoZSBjaXR5LCBzcGVlZGlseSBzZW50IG9mZiBhIG1lc3NlbmdlciB0byBEaW9ueXNpdXMgd2l0aCBsZXR0ZXJzIGFubm91bmNpbmcgdGhlIGFycml2YWwgb2YgRGlvbi4gSGUgaGltc2VsZiwgbW9yZW92ZXIsIHRvb2sgc3RlcHMgdG8gcHJldmVudCBhbnkgZGlzdHVyYmFuY2VzIG9yIHR1bXVsdHMgaW4gdGhlIGNpdHksIHdoZXJlIGFsbCB3ZXJlIGdyZWF0bHkgZXhjaXRlZCwgYnV0IGFzIHlldCBrZXB0IHF1aWV0IG93aW5nIHRvIHRoZWlyIGRpc3RydXN0IGFuZCBmZWFyLiBCdXQgYSBzdHJhbmdlIG1pc2ZvcnR1bmUgYmVmZWxsIHRoZSBtYW4gd2hvIGhhZCBiZWVuIHNlbnQgd2l0aCB0aGUgbGV0dGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhlIGhhZCBjcm9zc2VkIHRvIEl0YWx5IGFuZCBwYXNzZWQgdGhyb3VnaCB0aGUgdGVycml0b3J5IG9mIFJoZWdpdW0sIGFuZCBhcyBoZSB3YXMgaGFzdGVuaW5nIG9uIHRvIERpb255c2l1cyBhdCBDYXVsb25pYSwgaGUgbWV0IG9uZSBvZiBoaXMgYWNxdWFpbnRhbmNlcyB3aG8gd2FzIGNhcnJ5aW5nIGFuIGFuaW1hbCB0aGF0IGhhZCBiZWVuIHJlY2VudGx5IHNhY3JpZmljZWQsIGFuZCBhZnRlciBhY2NlcHRpbmcgZnJvbSBoaW0gYSBwb3J0aW9uIG9mIHRoZSBmbGVzaCwgd2VudCBvbiBoaXMgd2F5IHdpdGggYWxsIHNwZWVkLiBCdXQgYWZ0ZXIgdHJhdmVsbGluZyBwYXJ0IG9mIHRoZSBuaWdodCwgaGUgd2FzIGNvbXBlbGxlZCBieSB3ZWFyaW5lc3MgdG8gdGFrZSBhIGxpdHRsZSBzbGVlcCwgYW5kIGxheSBkb3duLCBqdXN0IGFzIGhlIHdhcywgaW4gYSB3b29kIGJ5IHRoZSBzaWRlIG9mIHRoZSByb2FkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gYSB3b2xmIGNhbWUgdG8gdGhlIHNwb3QsIGF0dHJhY3RlZCBieSB0aGUgc2NlbnQsIGFuZCBzZWl6aW5nIHRoZSBmbGVzaCB3aGljaCBoYWQgYmVlbiBmYXN0ZW5lZCB0byB0aGUgd2FsbGV0IGluIHdoaWNoIHRoZSBtYW4gaGFkIGhpcyBsZXR0ZXJzLCB3ZW50IG9mZiB3aXRoIGl0IGFuZCB0aGUgd2FsbGV0IHRvby4gV2hlbiB0aGUgbWFuIGF3b2tlIGFuZCBwZXJjZWl2ZWQgd2hhdCBoYWQgaGFwcGVuZWQsIGhlIHdhbmRlcmVkIGFib3V0IGEgbG9uZyB0aW1lIGluIHNlYXJjaCBvZiB3aGF0IGhlIGhhZCBsb3N0LCBidXQgY291bGQgbm90IGZpbmQgaXQsIGFuZCB0aGVyZWZvcmUgZGV0ZXJtaW5lZCBub3QgdG8gZ28gdG8gdGhlIHR5cmFudCB3aXRob3V0IHRoZSBsZXR0ZXJzLCBidXQgdG8gcnVuIGF3YXkgYW5kIGRpc2FwcGVhci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RGlvbnlzaXVzLCB0aGVyZWZvcmUsIHdhcyBkZXN0aW5lZCB0byBsZWFybiBvZiB0aGUgd2FyIGluIFNpY2lseSBsYXRlIGFuZCBmcm9tIG90aGVyIHNvdXJjZXM7IGJ1dCBtZWFud2hpbGUsIGFzIERpb24gcHJvY2VlZGVkIG9uIGhpcyBtYXJjaCwgaGUgd2FzIGpvaW5lZCBieSB0aGUgQ2FtYXJpbmFlYW5zLCBhbmQgbm8gc21hbGwgbXVsdGl0dWRlIG9mIHRoZSBydXJhbCBTeXJhY3VzYW5zIHJldm9sdGVkIGFuZCBzd2VsbGVkIGhpcyByYW5rcy4gTW9yZW92ZXIsIHRoZSBMZW9udGluZXMgYW5kIENhbXBhbmlhbnMgd2hvIHdlcmUgZ3VhcmRpbmcgRXBpcG9sYWU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgcGxhdGVhdSB3ZXN0IG9mIHRoZSBjaXR5IG9mIFN5cmFjdXNlLiBTZWUgdGhlIG5vdGUgb24gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE5pYy4gMTcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5OaWNpYXM8L3RpdGxlPiwgeHZpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2l0aCBUaW1vY3JhdGVzLCBpbiBjb25zZXF1ZW5jZSBvZiBhIGZhbHNlIHJlcG9ydCB3aGljaCBEaW9uIHNlbnQgdG8gdGhlbSB0aGF0IGhlIHdvdWxkIGF0dGFjayB0aGVpciBjaXRpZXMgZmlyc3QsIGRlc2VydGVkIFRpbW9jcmF0ZXMgYW5kIHdlbnQgb2ZmIHRvIGFzc2lzdCB0aGVpciBvd24gcGVvcGxlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBuZXdzIG9mIHRoaXMgd2FzIGJyb3VnaHQgdG8gRGlvbiBhcyBoZSBsYXkgZW5jYW1wZWQgbmVhciBBY3JhZSwgaGUgcm91c2VkIHVwIGhpcyBzb2xkaWVycyB3aGlsZSBpdCB3YXMgc3RpbGwgbmlnaHQgYW5kIGNhbWUgdG8gdGhlIHJpdmVyIEFuYXB1cywgd2hpY2ggaXMgdGVuIGZ1cmxvbmdzIGRpc3RhbnQgZnJvbSB0aGUgY2l0eS4gVGhlcmUgaGUgaGFsdGVkIGFuZCBzYWNyaWZpY2VkIGJ5IHRoZSByaXZlciwgYWRkcmVzc2luZyBoaXMgcHJheWVycyB0byB0aGUgcmlzaW5nIHN1biwgYW5kIG9uIHRoZSBpbnN0YW50IHRoZSBzb290aHNheWVycyBkZWNsYXJlZCB0aGF0IHRoZSBnb2RzIHByb21pc2VkIGhpbSB2aWN0b3J5LiBXaGVuLCB0b28sIHRoZSBhdWRpZW5jZSBiZWhlbGQgRGlvbiB3aXRoIGEgd3JlYXRoIG9uIGhpcyBoZWFkIGZvciB0aGUgc2FjcmlmaWNlLCB3aXRoIG9uZSBpbXB1bHNlIHRoZXkgYWxsIGNyb3duZWQgdGhlbXNlbHZlcyB3aXRoIHdyZWF0aHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vIGZld2VyIHRoYW4gZml2ZSB0aG91c2FuZCBtZW4gaGFkIGpvaW5lZCBoaW0gb24gdGhlIG1hcmNoLCBhbmQgdGhvdWdoIHRoZXkgd2VyZSB3cmV0Y2hlZGx5IGFybWVkIHdpdGggc3VjaCB3ZWFwb25zIGFzIGNhbWUgdG8gaGFuZCwgdGhlaXIgZW50aHVzaWFzbSBtYWRlIHVwIGZvciB0aGVpciBsYWNrIG9mIGVxdWlwbWVudCwgc28gdGhhdCB3aGVuIERpb24gZ2F2ZSB0aGUgd29yZCB0aGV5IGFkdmFuY2VkIG9uIHRoZSBydW4sIGV4aG9ydGluZyBvbmUgYW5vdGhlciB3aXRoIGpveWZ1bCBzaG91dHMgdG8gd2luIHRoZWlyIGxpYmVydHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RGlvbnlzaXVzLCB0aGVyZWZvcmUsIHdhcyBkZXN0aW5lZCB0byBsZWFybiBvZiB0aGUgd2FyIGluIFNpY2lseSBsYXRlIGFuZCBmcm9tIG90aGVyIHNvdXJjZXM7IGJ1dCBtZWFud2hpbGUsIGFzIERpb24gcHJvY2VlZGVkIG9uIGhpcyBtYXJjaCwgaGUgd2FzIGpvaW5lZCBieSB0aGUgQ2FtYXJpbmFlYW5zLCBhbmQgbm8gc21hbGwgbXVsdGl0dWRlIG9mIHRoZSBydXJhbCBTeXJhY3VzYW5zIHJldm9sdGVkIGFuZCBzd2VsbGVkIGhpcyByYW5rcy4gTW9yZW92ZXIsIHRoZSBMZW9udGluZXMgYW5kIENhbXBhbmlhbnMgd2hvIHdlcmUgZ3VhcmRpbmcgRXBpcG9sYWU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBwbGF0ZWF1IHdlc3Qgb2YgdGhlIGNpdHkgb2YgU3lyYWN1c2UuIFNlZSB0aGUgbm90ZSBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeHZpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2l0aCBUaW1vY3JhdGVzLCBpbiBjb25zZXF1ZW5jZSBvZiBhIGZhbHNlIHJlcG9ydCB3aGljaCBEaW9uIHNlbnQgdG8gdGhlbSB0aGF0IGhlIHdvdWxkIGF0dGFjayB0aGVpciBjaXRpZXMgZmlyc3QsIGRlc2VydGVkIFRpbW9jcmF0ZXMgYW5kIHdlbnQgb2ZmIHRvIGFzc2lzdCB0aGVpciBvd24gcGVvcGxlcy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgeHZpaS4gMS48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pY2lhczwvdGl0bGU+LCB4dmlpLiAxLjwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gbmV3cyBvZiB0aGlzIHdhcyBicm91Z2h0IHRvIERpb24gYXMgaGUgbGF5IGVuY2FtcGVkIG5lYXIgQWNyYWUsIGhlIHJvdXNlZCB1cCBoaXMgc29sZGllcnMgd2hpbGUgaXQgd2FzIHN0aWxsIG5pZ2h0IGFuZCBjYW1lIHRvIHRoZSByaXZlciBBbmFwdXMsIHdoaWNoIGlzIHRlbiBmdXJsb25ncyBkaXN0YW50IGZyb20gdGhlIGNpdHkuIFRoZXJlIGhlIGhhbHRlZCBhbmQgc2FjcmlmaWNlZCBieSB0aGUgcml2ZXIsIGFkZHJlc3NpbmcgaGlzIHByYXllcnMgdG8gdGhlIHJpc2luZyBzdW4sIGFuZCBvbiB0aGUgaW5zdGFudCB0aGUgc29vdGhzYXllcnMgZGVjbGFyZWQgdGhhdCB0aGUgZ29kcyBwcm9taXNlZCBoaW0gdmljdG9yeS4gV2hlbiwgdG9vLCB0aGUgYXVkaWVuY2UgYmVoZWxkIERpb24gd2l0aCBhIHdyZWF0aCBvbiBoaXMgaGVhZCBmb3IgdGhlIHNhY3JpZmljZSwgd2l0aCBvbmUgaW1wdWxzZSB0aGV5IGFsbCBjcm93bmVkIHRoZW1zZWx2ZXMgd2l0aCB3cmVhdGhzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vIGZld2VyIHRoYW4gZml2ZSB0aG91c2FuZCBtZW4gaGFkIGpvaW5lZCBoaW0gb24gdGhlIG1hcmNoLCBhbmQgdGhvdWdoIHRoZXkgd2VyZSB3cmV0Y2hlZGx5IGFybWVkIHdpdGggc3VjaCB3ZWFwb25zIGFzIGNhbWUgdG8gaGFuZCwgdGhlaXIgZW50aHVzaWFzbSBtYWRlIHVwIGZvciB0aGVpciBsYWNrIG9mIGVxdWlwbWVudCwgc28gdGhhdCB3aGVuIERpb24gZ2F2ZSB0aGUgd29yZCB0aGV5IGFkdmFuY2VkIG9uIHRoZSBydW4sIGV4aG9ydGluZyBvbmUgYW5vdGhlciB3aXRoIGpveWZ1bCBzaG91dHMgdG8gd2luIHRoZWlyIGxpYmVydHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgU3lyYWN1c2FucyBpbiB0aGUgY2l0eSwgdGhlIG1lbiBvZiBub3RlIGFuZCBjdWx0aXZhdGlvbiwgaW4gZnJlc2ggYXBwYXJlbCwgd2VudCB0byBtZWV0IHRoZW0gYXQgdGhlIGdhdGVzLCB3aGlsZSB0aGUgbXVsdGl0dWRlIHNldCB1cG9uIHRoZSB0eXJhbnQncyBmcmllbmRzIGFuZCBzZWl6ZWQgdGhvc2UgY2FsbGVkIHRhbGUtYmVhcmVycywgd2lja2VkIG1lbiB3aG9tIHRoZSBnb2RzIGhhdGVkLCB3aG8gd2VudCB1cCBhbmQgZG93biBpbiB0aGUgY2l0eSBidXNpbHkgbWluZ2xpbmcgd2l0aCB0aGUgU3lyYWN1c2FucyBhbmQgcmVwb3J0aW5nIHRvIHRoZSB0eXJhbnQgdGhlIHNlbnRpbWVudHMgYW5kIHV0dGVyYW5jZXMgb2YgZXZlcnkgb25lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSwgdGhlbiwgd2VyZSB0aGUgZmlyc3QgdG8gc3VmZmVyIHJldHJpYnV0aW9uLCBiZWluZyBiZWF0ZW4gdG8gZGVhdGggYnkgdGhvc2Ugd2hvIGNhbWUgdXBvbiB0aGVtOyBidXQgVGltb2NyYXRlcywgdW5hYmxlIHRvIGpvaW4gdGhlIGdhcnJpc29uIG9mIHRoZSBhY3JvcG9saXMsIHRvb2sgaG9yc2UgYW5kIGRhc2hlZCBvdXQgb2YgdGhlIGNpdHksIGFuZCBhcyBoZSBmbGVkLCBmaWxsZWQgZXZlcnl0aGluZyB3aXRoIGZlYXIgYW5kIGNvbmZ1c2lvbiwgZXhhZ2dlcmF0aW5nIHRoZSBzdHJlbmd0aCBvZiBEaW9uLCB0aGF0IGhlIG1pZ2h0IG5vdCBiZSB0aG91Z2h0IHRvIGhhdmUgYWJhbmRvbmVkIHRoZSBjaXR5IHRocm91Z2ggZmVhciBvZiBhbnkgdHJpdmlhbCBkYW5nZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSBEaW9uIGRyZXcgbmVhciB0aGUgY2l0eSBhbmQgd2FzIHByZXNlbnRseSBzZWVuLCBsZWFkaW5nIHRoZSB3YXkgaGltc2VsZiBpbiBicmlsbGlhbnQgYXJtb3VyLCB3aXRoIGhpcyBicm90aGVyIE1lZ2FjbGVzIG9uIG9uZSBzaWRlIG9mIGhpbSwgYW5kIG9uIHRoZSBvdGhlciwgQ2FsbGlwcHVzIHRoZSBBdGhlbmlhbiwgYm90aCBjcm93bmVkIHdpdGggZ2FybGFuZHMuIEEgaHVuZHJlZCBvZiBoaXMgbWVyY2VuYXJpZXMgZm9sbG93ZWQgRGlvbiBhcyBhIGJvZHktZ3VhcmQsIGFuZCBoaXMgb2ZmaWNlcnMgbGVkIHRoZSByZXN0IGluIGdvb2Qgb3JkZXIsIHRoZSBTeXJhY3VzYW5zIGxvb2tpbmcgb24gYW5kIHdlbGNvbWluZyBhcyBpdCB3ZXJlIGEgc2FjcmVkIHJlbGlnaW91cyBwcm9jZXNzaW9uIGZvciB0aGUgcmV0dXJuIG9mIGxpYmVydHkgYW5kIGRlbW9jcmFjeSBpbnRvIHRoZSBjaXR5LCBhZnRlciBhbiBhYnNlbmNlIG9mIGZvcnR5LWVpZ2h0IHllYXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSBTeXJhY3VzYW5zIGluIHRoZSBjaXR5LCB0aGUgbWVuIG9mIG5vdGUgYW5kIGN1bHRpdmF0aW9uLCBpbiBmcmVzaCBhcHBhcmVsLCB3ZW50IHRvIG1lZXQgdGhlbSBhdCB0aGUgZ2F0ZXMsIHdoaWxlIHRoZSBtdWx0aXR1ZGUgc2V0IHVwb24gdGhlIHR5cmFudCdzIGZyaWVuZHMgYW5kIHNlaXplZCB0aG9zZSBjYWxsZWQgdGFsZS1iZWFyZXJzLCB3aWNrZWQgbWVuIHdob20gdGhlIGdvZHMgaGF0ZWQsIHdobyB3ZW50IHVwIGFuZCBkb3duIGluIHRoZSBjaXR5IGJ1c2lseSBtaW5nbGluZyB3aXRoIHRoZSBTeXJhY3VzYW5zIGFuZCByZXBvcnRpbmcgdG8gdGhlIHR5cmFudCB0aGUgc2VudGltZW50cyBhbmQgdXR0ZXJhbmNlcyBvZiBldmVyeSBvbmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCB0aGVuLCB3ZXJlIHRoZSBmaXJzdCB0byBzdWZmZXIgcmV0cmlidXRpb24sIGJlaW5nIGJlYXRlbiB0byBkZWF0aCBieSB0aG9zZSB3aG8gY2FtZSB1cG9uIHRoZW07IGJ1dCBUaW1vY3JhdGVzLCB1bmFibGUgdG8gam9pbiB0aGUgZ2Fycmlzb24gb2YgdGhlIGFjcm9wb2xpcywgdG9vayBob3JzZSBhbmQgZGFzaGVkIG91dCBvZiB0aGUgY2l0eSwgYW5kIGFzIGhlIGZsZWQsIGZpbGxlZCBldmVyeXRoaW5nIHdpdGggZmVhciBhbmQgY29uZnVzaW9uLCBleGFnZ2VyYXRpbmcgdGhlIHN0cmVuZ3RoIG9mIERpb24sIHRoYXQgaGUgbWlnaHQgbm90IGJlIHRob3VnaHQgdG8gaGF2ZSBhYmFuZG9uZWQgdGhlIGNpdHkgdGhyb3VnaCBmZWFyIG9mIGFueSB0cml2aWFsIGRhbmdlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSBEaW9uIGRyZXcgbmVhciB0aGUgY2l0eSBhbmQgd2FzIHByZXNlbnRseSBzZWVuLCBsZWFkaW5nIHRoZSB3YXkgaGltc2VsZiBpbiBicmlsbGlhbnQgYXJtb3VyLCB3aXRoIGhpcyBicm90aGVyIE1lZ2FjbGVzIG9uIG9uZSBzaWRlIG9mIGhpbSwgYW5kIG9uIHRoZSBvdGhlciwgQ2FsbGlwcHVzIHRoZSBBdGhlbmlhbiwgYm90aCBjcm93bmVkIHdpdGggZ2FybGFuZHMuIEEgaHVuZHJlZCBvZiBoaXMgbWVyY2VuYXJpZXMgZm9sbG93ZWQgRGlvbiBhcyBhIGJvZHktZ3VhcmQsIGFuZCBoaXMgb2ZmaWNlcnMgbGVkIHRoZSByZXN0IGluIGdvb2Qgb3JkZXIsIHRoZSBTeXJhY3VzYW5zIGxvb2tpbmcgb24gYW5kIHdlbGNvbWluZyBhcyBpdCB3ZXJlIGEgc2FjcmVkIHJlbGlnaW91cyBwcm9jZXNzaW9uIGZvciB0aGUgcmV0dXJuIG9mIGxpYmVydHkgYW5kIGRlbW9jcmFjeSBpbnRvIHRoZSBjaXR5LCBhZnRlciBhbiBhYnNlbmNlIG9mIGZvcnR5LWVpZ2h0IHllYXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBEaW9uIGhhZCBlbnRlcmVkIHRoZSBjaXR5IGJ5IHRoZSBUZW1lbml0aWQgZ2F0ZSwgaGUgc3RvcHBlZCB0aGUgbm9pc2Ugb2YgdGhlIHBlb3BsZSBieSBhIGJsYXN0IG9mIHRoZSB0cnVtcGV0LCBhbmQgbWFkZSBwcm9jbGFtYXRpb24gdGhhdCBEaW9uIGFuZCBNZWdhY2xlcywgd2hvIHdlcmUgY29tZSB0byBvdmVydGhyb3cgdGhlIHR5cmFubnksIGRlY2xhcmVkIHRoZSBTeXJhY3VzYW5zIGFuZCB0aGUgcmVzdCBvZiB0aGUgU2ljaWxpYW5zIGZyZWUgZnJvbSB0aGUgdHlyYW50LiBUaGVuLCB3aXNoaW5nIHRvIGhhcmFuZ3VlIHRoZSBwZW9wbGUgaGltc2VsZiwgaGUgd2VudCB1cCB0aHJvdWdoIHRoZSBBY2hyYWRpbmEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gZXh0ZW5zaW9uIG9mIHRoZSBjaXR5LCBjb3ZlcmluZyB0aGUgZWFzdGVybiBwYXJ0IG9mIHRoZSBwbGF0ZWF1IG9mIEVwaXBvbGFlLjwvbm90ZT4gd2hpbGUgb24gZWl0aGVyIHNpZGUgb2YgdGhlIHN0cmVldCB0aGUgU3lyYWN1c2FucyBzZXQgb3V0IHRhYmxlcyBhbmQgc2FjcmlmaWNpYWwgbWVhdHMgYW5kIG1peGluZy1ib3dscywgYW5kIGFsbCwgYXMgaGUgY2FtZSB0byB0aGVtLCBwZWx0ZWQgaGltIHdpdGggZmxvd2VycywgYW5kIGFkZHJlc3NlZCBoaW0gd2l0aCB2b3dzIGFuZCBwcmF5ZXJzIGFzIGlmIGhlIHdlcmUgYSBnb2QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgc3Rvb2QgYmVsb3cgdGhlIGFjcm9wb2xpcyBhbmQgdGhlIFBlbnRhcHlsYSBhIHRhbGwgYW5kIGNvbnNwaWN1b3VzIHN1bi1kaWFsLCB3aGljaCBEaW9ueXNpdXMgaGFkIHNldCB1cC4gTW91bnRlZCB1cG9uIHRoaXMsIERpb24gaGFyYW5ndWVkIHRoZSBjaXRpemVucyBhbmQgZXhob3J0ZWQgdGhlbSB0byBhc3NlcnQgdGhlaXIgbGliZXJ0eS4gQW5kIHRoZXksIGluIHRoZWlyIGpveSBhbmQgYWZmZWN0aW9uLCBtYWRlIERpb24gYW5kIE1lZ2FjbGVzIGdlbmVyYWxzIHdpdGggYWJzb2x1dGUgcG93ZXJzLCBhbmQgYmVzaWRlcywgYXQgdGhlaXIgd2lzaCBhbmQgZW50cmVhdHksIGNob3NlIHR3ZW50eSBjb2xsZWFndWVzIHRvIGhvbGQgb2ZmaWNlIHdpdGggdGhlbSwgaGFsZiBvZiB3aG9tIHdlcmUgb2YgdGhvc2Ugd2hvIGhhZCBjb21lIGJhY2sgZnJvbSBleGlsZSB3aXRoIERpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBzb290aHNheWVycywgbW9yZW92ZXIsIGl0IHNlZW1lZCBhIG1vc3QgaGFwcHkgb21lbiwgdGhhdCBEaW9uLCB3aGVuIGhlIGhhcmFuZ3VlZCB0aGUgcGVvcGxlLCBoYWQgcHV0IHVuZGVyIGhpcyBmZWV0IHRoZSBhbWJpdGlvdXMgbW9udW1lbnQgb2YgdGhlIHR5cmFudDsgYnV0IGJlY2F1c2UgaXQgd2FzIGEgc3VuLWRpYWwgdXBvbiB3aGljaCBoZSBzdG9vZCB3aGVuIGhlIHdhcyBlbGVjdGVkIGdlbmVyYWwsIHRoZXkgZmVhcmVkIHRoYXQgaGlzIGVudGVycHJpc2UgbWlnaHQgdW5kZXJnbyBzb21lIHNwZWVkeSBjaGFuZ2Ugb2YgZm9ydHVuZS4gQWZ0ZXIgdGhpcywgRGlvbiBjYXB0dXJlZCBFcGlwb2xhZSBhbmQgc2V0IGZyZWUgdGhlIGNpdGl6ZW5zIHdobyB3ZXJlIGltcHJpc29uZWQgdGhlcmU7IHRoZW4gaGUgd2FsbGVkIG9mZiB0aGUgYWNyb3BvbGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgc2V2ZW50aCBkYXkgRGlvbnlzaXVzIHB1dCBpbiB3aXRoIGhpcyBmbGVldCBhbmQgZW50ZXJlZCB0aGUgYWNyb3BvbGlzLCBhbmQgd2FnZ29ucyBicm91Z2h0IERpb24gdGhlIGFybW91ciBhbmQgd2VhcG9ucyB3aGljaCBoZSBoYWQgbGVmdCB3aXRoIFN5bmFsdXMuIFRoZXNlIGhlIGRpc3RyaWJ1dGVkIGFtb25nIHRoZSBjaXRpemVucyBhcyBmYXIgYXMgdGhleSB3b3VsZCBnbywgYW5kIGFsbCB0aGUgcmVzdCBlcXVpcHBlZCB0aGVtc2VsdmVzIGFzIGJlc3QgdGhleSBjb3VsZCBhbmQgemVhbG91c2x5IG9mZmVyZWQgdGhlaXIgc2VydmljZXMgYXMgbWVuLWF0LWFybXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgRGlvbiBoYWQgZW50ZXJlZCB0aGUgY2l0eSBieSB0aGUgVGVtZW5pdGlkIGdhdGUsIGhlIHN0b3BwZWQgdGhlIG5vaXNlIG9mIHRoZSBwZW9wbGUgYnkgYSBibGFzdCBvZiB0aGUgdHJ1bXBldCwgYW5kIG1hZGUgcHJvY2xhbWF0aW9uIHRoYXQgRGlvbiBhbmQgTWVnYWNsZXMsIHdobyB3ZXJlIGNvbWUgdG8gb3ZlcnRocm93IHRoZSB0eXJhbm55LCBkZWNsYXJlZCB0aGUgU3lyYWN1c2FucyBhbmQgdGhlIHJlc3Qgb2YgdGhlIFNpY2lsaWFucyBmcmVlIGZyb20gdGhlIHR5cmFudC4gVGhlbiwgd2lzaGluZyB0byBoYXJhbmd1ZSB0aGUgcGVvcGxlIGhpbXNlbGYsIGhlIHdlbnQgdXAgdGhyb3VnaCB0aGUgQWNocmFkaW5hLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gZXh0ZW5zaW9uIG9mIHRoZSBjaXR5LCBjb3ZlcmluZyB0aGUgZWFzdGVybiBwYXJ0IG9mIHRoZSBwbGF0ZWF1IG9mIEVwaXBvbGFlLjwvbm90ZT4gd2hpbGUgb24gZWl0aGVyIHNpZGUgb2YgdGhlIHN0cmVldCB0aGUgU3lyYWN1c2FucyBzZXQgb3V0IHRhYmxlcyBhbmQgc2FjcmlmaWNpYWwgbWVhdHMgYW5kIG1peGluZy1ib3dscywgYW5kIGFsbCwgYXMgaGUgY2FtZSB0byB0aGVtLCBwZWx0ZWQgaGltIHdpdGggZmxvd2VycywgYW5kIGFkZHJlc3NlZCBoaW0gd2l0aCB2b3dzIGFuZCBwcmF5ZXJzIGFzIGlmIGhlIHdlcmUgYSBnb2QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgc3Rvb2QgYmVsb3cgdGhlIGFjcm9wb2xpcyBhbmQgdGhlIFBlbnRhcHlsYSBhIHRhbGwgYW5kIGNvbnNwaWN1b3VzIHN1bi1kaWFsLCB3aGljaCBEaW9ueXNpdXMgaGFkIHNldCB1cC4gTW91bnRlZCB1cG9uIHRoaXMsIERpb24gaGFyYW5ndWVkIHRoZSBjaXRpemVucyBhbmQgZXhob3J0ZWQgdGhlbSB0byBhc3NlcnQgdGhlaXIgbGliZXJ0eS4gQW5kIHRoZXksIGluIHRoZWlyIGpveSBhbmQgYWZmZWN0aW9uLCBtYWRlIERpb24gYW5kIE1lZ2FjbGVzIGdlbmVyYWxzIHdpdGggYWJzb2x1dGUgcG93ZXJzLCBhbmQgYmVzaWRlcywgYXQgdGhlaXIgd2lzaCBhbmQgZW50cmVhdHksIGNob3NlIHR3ZW50eSBjb2xsZWFndWVzIHRvIGhvbGQgb2ZmaWNlIHdpdGggdGhlbSwgaGFsZiBvZiB3aG9tIHdlcmUgb2YgdGhvc2Ugd2hvIGhhZCBjb21lIGJhY2sgZnJvbSBleGlsZSB3aXRoIERpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBzb290aHNheWVycywgbW9yZW92ZXIsIGl0IHNlZW1lZCBhIG1vc3QgaGFwcHkgb21lbiwgdGhhdCBEaW9uLCB3aGVuIGhlIGhhcmFuZ3VlZCB0aGUgcGVvcGxlLCBoYWQgcHV0IHVuZGVyIGhpcyBmZWV0IHRoZSBhbWJpdGlvdXMgbW9udW1lbnQgb2YgdGhlIHR5cmFudDsgYnV0IGJlY2F1c2UgaXQgd2FzIGEgc3VuLWRpYWwgdXBvbiB3aGljaCBoZSBzdG9vZCB3aGVuIGhlIHdhcyBlbGVjdGVkIGdlbmVyYWwsIHRoZXkgZmVhcmVkIHRoYXQgaGlzIGVudGVycHJpc2UgbWlnaHQgdW5kZXJnbyBzb21lIHNwZWVkeSBjaGFuZ2Ugb2YgZm9ydHVuZS4gQWZ0ZXIgdGhpcywgRGlvbiBjYXB0dXJlZCBFcGlwb2xhZSBhbmQgc2V0IGZyZWUgdGhlIGNpdGl6ZW5zIHdobyB3ZXJlIGltcHJpc29uZWQgdGhlcmU7IHRoZW4gaGUgd2FsbGVkIG9mZiB0aGUgYWNyb3BvbGlzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBzZXZlbnRoIGRheSBEaW9ueXNpdXMgcHV0IGluIHdpdGggaGlzIGZsZWV0IGFuZCBlbnRlcmVkIHRoZSBhY3JvcG9saXMsIGFuZCB3YWdnb25zIGJyb3VnaHQgRGlvbiB0aGUgYXJtb3VyIGFuZCB3ZWFwb25zIHdoaWNoIGhlIGhhZCBsZWZ0IHdpdGggU3luYWx1cy4gVGhlc2UgaGUgZGlzdHJpYnV0ZWQgYW1vbmcgdGhlIGNpdGl6ZW5zIGFzIGZhciBhcyB0aGV5IHdvdWxkIGdvLCBhbmQgYWxsIHRoZSByZXN0IGVxdWlwcGVkIHRoZW1zZWx2ZXMgYXMgYmVzdCB0aGV5IGNvdWxkIGFuZCB6ZWFsb3VzbHkgb2ZmZXJlZCB0aGVpciBzZXJ2aWNlcyBhcyBtZW4tYXQtYXJtcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIERpb255c2l1cyBzZW50IGVudm95cyBwcml2YXRlbHkgdG8gRGlvbiBhbmQgdHJpZWQgdG8gbWFrZSB0ZXJtcyB3aXRoIGhpbTsgdGhlbiwgd2hlbiBEaW9uIGJhZGUgaGltIGNvbmZlciBwdWJsaWNseSB3aXRoIHRoZSBTeXJhY3VzYW5zLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhleSB3ZXJlIGEgZnJlZSBwZW9wbGUsIHRoZSBlbnZveXMgYnJvdWdodCBnZW5lcm91cyBwcm9wb3NpdGlvbnMgZnJvbSB0aGUgdHlyYW50LCB3aG8gcHJvbWlzZWQgc3VjaCBtb2RlcmF0ZSB0YXhlcyBhbmQgZWFzeSBtaWxpdGFyeSBzZXJ2aWNlIGFzIHRoZSBwZW9wbGUgdGhlbXNlbHZlcyBzaG91bGQgYWdyZWUgdG8gYnkgdm90ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2Ugb2ZmZXJzIHdlcmUgZGVyaWRlZCBieSB0aGUgU3lyYWN1c2FucywgYW5kIERpb24gbWFkZSBhbnN3ZXIgdG8gdGhlIGVudm95cyB0aGF0IERpb255c2l1cyB3YXMgbm90IHRvIGNvbmZlciB3aXRoIHRoZW0gdW5sZXNzIGhlIHJlbm91bmNlZCBoaXMgc292ZXJlaWdudHk7IGJ1dCBvbiBoaXMgcmVub3VuY2luZyB0aGlzLCBEaW9uIHdvdWxkIGhpbXNlbGYgcHJvY3VyZSBpbW11bml0eSBmb3IgaGltLCBhbmQgYW55IG90aGVyIHJlYXNvbmFibGUgcHJpdmlsZWdlIHRoYXQgd2FzIGluIGhpcyBwb3dlciwgbWluZGZ1bCBvZiB0aGUgY2xvc2UgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlbS4gVGhlc2UgY29uZGl0aW9ucyBEaW9ueXNpdXMgYXBwcm92ZWQsIGFuZCBhZ2FpbiBzZW50IGVudm95cywgYmlkZGluZyBzb21lIG9mIHRoZSBTeXJhY3VzYW5zIHRvIGNvbWUgdG8gdGhlIGFjcm9wb2xpcywgd2hlcmUsIGJvdGggcGFydGllcyBtYWtpbmcgY29uY2Vzc2lvbnMsIGhlIHdvdWxkIGNvbmZlciB3aXRoIHRoZW0gY29uY2VybmluZyB0aGUgY29tbW9uIGdvb2QuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBtZW4gd2VyZSBzZW50IHRvIGhpbSB3aG9tIERpb24gYXBwcm92ZWQuIEFuZCBmcmVxdWVudCByZXBvcnRzIGNhbWUgdG8gdGhlIFN5cmFjdXNhbnMgZnJvbSB0aGUgY2l0YWRlbCB0aGF0IERpb255c2l1cyB3b3VsZCByZW5vdW5jZSB0aGUgdHlyYW5ueSwgYW5kIHdvdWxkIGRvIHRoaXMgdG8gcGxlYXNlIGhpbXNlbGYgcmF0aGVyIHRoYW4gRGlvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIERpb255c2l1cyBzZW50IGVudm95cyBwcml2YXRlbHkgdG8gRGlvbiBhbmQgdHJpZWQgdG8gbWFrZSB0ZXJtcyB3aXRoIGhpbTsgdGhlbiwgd2hlbiBEaW9uIGJhZGUgaGltIGNvbmZlciBwdWJsaWNseSB3aXRoIHRoZSBTeXJhY3VzYW5zLCBvbiB0aGUgZ3JvdW5kIHRoYXQgdGhleSB3ZXJlIGEgZnJlZSBwZW9wbGUsIHRoZSBlbnZveXMgYnJvdWdodCBnZW5lcm91cyBwcm9wb3NpdGlvbnMgZnJvbSB0aGUgdHlyYW50LCB3aG8gcHJvbWlzZWQgc3VjaCBtb2RlcmF0ZSB0YXhlcyBhbmQgZWFzeSBtaWxpdGFyeSBzZXJ2aWNlIGFzIHRoZSBwZW9wbGUgdGhlbXNlbHZlcyBzaG91bGQgYWdyZWUgdG8gYnkgdm90ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG9mZmVycyB3ZXJlIGRlcmlkZWQgYnkgdGhlIFN5cmFjdXNhbnMsIGFuZCBEaW9uIG1hZGUgYW5zd2VyIHRvIHRoZSBlbnZveXMgdGhhdCBEaW9ueXNpdXMgd2FzIG5vdCB0byBjb25mZXIgd2l0aCB0aGVtIHVubGVzcyBoZSByZW5vdW5jZWQgaGlzIHNvdmVyZWlnbnR5OyBidXQgb24gaGlzIHJlbm91bmNpbmcgdGhpcywgRGlvbiB3b3VsZCBoaW1zZWxmIHByb2N1cmUgaW1tdW5pdHkgZm9yIGhpbSwgYW5kIGFueSBvdGhlciByZWFzb25hYmxlIHByaXZpbGVnZSB0aGF0IHdhcyBpbiBoaXMgcG93ZXIsIG1pbmRmdWwgb2YgdGhlIGNsb3NlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZW0uIFRoZXNlIGNvbmRpdGlvbnMgRGlvbnlzaXVzIGFwcHJvdmVkLCBhbmQgYWdhaW4gc2VudCBlbnZveXMsIGJpZGRpbmcgc29tZSBvZiB0aGUgU3lyYWN1c2FucyB0byBjb21lIHRvIHRoZSBhY3JvcG9saXMsIHdoZXJlLCBib3RoIHBhcnRpZXMgbWFraW5nIGNvbmNlc3Npb25zLCBoZSB3b3VsZCBjb25mZXIgd2l0aCB0aGVtIGNvbmNlcm5pbmcgdGhlIGNvbW1vbiBnb29kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBtZW4gd2VyZSBzZW50IHRvIGhpbSB3aG9tIERpb24gYXBwcm92ZWQuIEFuZCBmcmVxdWVudCByZXBvcnRzIGNhbWUgdG8gdGhlIFN5cmFjdXNhbnMgZnJvbSB0aGUgY2l0YWRlbCB0aGF0IERpb255c2l1cyB3b3VsZCByZW5vdW5jZSB0aGUgdHlyYW5ueSwgYW5kIHdvdWxkIGRvIHRoaXMgdG8gcGxlYXNlIGhpbXNlbGYgcmF0aGVyIHRoYW4gRGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgdGhpcyB3YXMgYSB0cmVhY2hlcm91cyBwcmV0ZW5jZSBvbiB0aGUgcGFydCBvZiB0aGUgdHlyYW50LCBhbmQgYSBwaWVjZSBvZiBrbmF2ZXJ5IGRpcmVjdGVkIGFnYWluc3QgdGhlIFN5cmFjdXNhbnMuIEZvciBoZSBrZXB0IGluIGNsb3NlIGN1c3RvZHkgdGhlIGRlcHV0YXRpb24gdGhhdCBjYW1lIHRvIGhpbSBmcm9tIHRoZSBjaXR5LCBhbmQgdG93YXJkcyBtb3JuaW5nIHBsaWVkIGhpcyBtZXJjZW5hcmllcyB3aXRoIHN0cm9uZyB3aW5lIGFuZCBzZW50IHRoZW0gb24gYSBkYXNoIGFnYWluc3QgdGhlIHNpZWdlLXdhbGwgYWJvdXQgdGhlIGFjcm9wb2xpcy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYXR0YWNrIHdhcyB1bmV4cGVjdGVkLCBhbmQgdGhlIEJhcmJhcmlhbnMsIHdpdGggZ3JlYXQgYm9sZG5lc3MgYW5kIGxvdWQgdHVtdWx0LCBiZWdhbiB0byB0ZWFyIGRvd24gdGhlIGNyb3NzLXdhbGwgYW5kIGF0dGFjayB0aGUgU3lyYWN1c2Fucywgc28gdGhhdCBubyBvbmUgZGFyZWQgdG8gc3RhbmQgb24gdGhlIGRlZmVuc2l2ZSwgZXhjZXB0IHRoZSBtZXJjZW5hcmllcyBvZiBEaW9uLCB3aG8gZmlyc3Qgbm90aWNlZCB0aGUgZGlzdHVyYmFuY2UgYW5kIGNhbWUgdG8gdGhlIHJlc2N1ZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGV2ZW4gdGhlc2Uga25ldyBub3QgaG93IHRvIHJlbmRlciBhaWQsIG5vciBjb3VsZCB0aGV5IGhlYXIgd2hhdCB3YXMgc2FpZCB0byB0aGVtLCBvd2luZyB0byB0aGUgc2hvdXRzIGFuZCB3aWxkIG1vdmVtZW50cyBvZiB0aGUgZnVnaXRpdmUgU3lyYWN1c2Fucywgd2hvIG1pbmdsZWQgY29uZnVzZWRseSB3aXRoIHRoZW0gYW5kIGJyb2tlIHRocm91Z2ggdGhlaXIgcmFua3MuIEJ1dCBhdCBsYXN0IERpb24sIHNpbmNlIG5vIG9uZSBjb3VsZCBoZWFyIGhpcyBvcmRlcnMsIHdpc2hpbmcgdG8gc2hvdyBieSBoaXMgZXhhbXBsZSB3aGF0IHNob3VsZCBiZSBkb25lIGNoYXJnZWQgZm9yZW1vc3QgaW50byB0aGUgQmFyYmFyaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGVyZSBhcm9zZSBhYm91dCBoaW0gYSBmaWVyY2UgYW5kIGRyZWFkZnVsIGJhdHRsZSwgc2luY2UgaGUgd2FzIHJlY29nbml6ZWQgYnkgdGhlIGVuZW15IGFzIHdlbGwgYXMgYnkgaGlzIGZyaWVuZHMsIGFuZCBhbGwgcnVzaGVkIHRvd2FyZHMgaGltIGF0IHRoZSBzYW1lIHRpbWUgd2l0aCBsb3VkIHNob3V0cy4gSGUgd2FzIG5vdywgYnkgcmVhc29uIG9mIGhpcyBhZ2UsIHRvbyB1bndpZWxkeSBmb3Igc3VjaCBzdHJ1Z2dsZXMsIGJ1dCBoZSB3aXRoc3Rvb2QgYW5kIGN1dCBkb3duIGhpcyBhc3NhaWxhbnRzIHdpdGggdmlnb3VyIGFuZCBjb3VyYWdlIHVudGlsIGhlIHdhcyB3b3VuZGVkIGluIHRoZSBoYW5kIHdpdGggYSBsYW5jZTsgYmVzaWRlcywgaGlzIGJyZWFzdHBsYXRlIGhhcmRseSBzdWZmaWNlZCB0byByZXNpc3QgdGhlIG90aGVyIG1pc3NpbGVzIGFuZCBoYW5kLXRvLWhhbmQgdGhydXN0cywgYW5kIGhlIHdhcyBzbWl0dGVuIHRocm91Z2ggaGlzIHNoaWVsZCBieSBtYW55IHNwZWFycyBhbmQgbGFuY2VzLCBhbmQgd2hlbiB0aGVzZSB3ZXJlIGJyb2tlbiBvZmYgaGUgZmVsbCB0byB0aGUgZ3JvdW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBhZnRlciBoZSBoYWQgYmVlbiBzbmF0Y2hlZCBhd2F5IGJ5IGhpcyBzb2xkaWVycywgaGUgcHV0IFRpbW9uaWRlcyBpbiBjb21tYW5kIG9mIHRoZXNlLCB3aGlsZSBoZSBoaW1zZWxmLCBtb3VudGluZyBhIGhvcnNlLCByb2RlIGFib3V0IHRoZSBjaXR5IHJhbGx5aW5nIHRoZSBmbHlpbmcgU3lyYWN1c2FucywgYW5kIGJyaW5naW5nIHVwIGEgZGV0YWNobWVudCBvZiBoaXMgbWVyY2VuYXJpZXMgd2hvIHdlcmUgZ3VhcmRpbmcgQWNocmFkaW5hLCBsZWQgdGhlbSBhZ2FpbnN0IHRoZSBCYXJiYXJpYW5zLOKAlGZyZXNoIGFuZCBlYWdlciByZXNlcnZlcyBhZ2FpbnN0IGEgd29ybi1vdXQgZm9lLCBhbmQgb25lIHRoYXQgYWxyZWFkeSBkZXNwYWlyZWQgb2YgaGlzIGNhdXNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSBoYWQgZXhwZWN0ZWQgYXQgdGhlaXIgZmlyc3Qgb25zZXQgdG8gb3ZlcnJ1biBhbmQgb2NjdXB5IHRoZSB3aG9sZSBjaXR5LCBhbmQgbm93IHRoYXQgdGhleSBoYWQgdW5leHBlY3RlZGx5IGVuY291bnRlcmVkIG1lbiB3aG8gY291bGQgc21pdGUgYW5kIGZpZ2h0LCB0aGV5IHJldGlyZWQgdG93YXJkcyB0aW1lIGFjcm9wb2xpcy4gQnV0IGFzIHRoZXkgZ2F2ZSBncm91bmQsIHRoZSBHcmVla3MgcHJlc3NlZCBhbGwgdGhlIGhhcmRlciB1cG9uIHRoZW0sIHNvIHRoYXQgdGhleSB0dXJuZWQgdGhlaXIgYmFja3MgYW5kIHdlcmUgZHJpdmVuIGludG8gdGhlIHNoZWx0ZXIgb2YgdGhlIGNpdGFkZWw7IHRoZXkgaGFkIHNsYWluIHNldmVudHktZm91ciBvZiBEaW9uJ3MgbWVuLCBhbmQgaGFkIGxvc3QgbWFueSBvZiB0aGVpciBvd24gbnVtYmVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBhdHRhY2sgd2FzIHVuZXhwZWN0ZWQsIGFuZCB0aGUgQmFyYmFyaWFucywgd2l0aCBncmVhdCBib2xkbmVzcyBhbmQgbG91ZCB0dW11bHQsIGJlZ2FuIHRvIHRlYXIgZG93biB0aGUgY3Jvc3Mtd2FsbCBhbmQgYXR0YWNrIHRoZSBTeXJhY3VzYW5zLCBzbyB0aGF0IG5vIG9uZSBkYXJlZCB0byBzdGFuZCBvbiB0aGUgZGVmZW5zaXZlLCBleGNlcHQgdGhlIG1lcmNlbmFyaWVzIG9mIERpb24sIHdobyBmaXJzdCBub3RpY2VkIHRoZSBkaXN0dXJiYW5jZSBhbmQgY2FtZSB0byB0aGUgcmVzY3VlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBldmVuIHRoZXNlIGtuZXcgbm90IGhvdyB0byByZW5kZXIgYWlkLCBub3IgY291bGQgdGhleSBoZWFyIHdoYXQgd2FzIHNhaWQgdG8gdGhlbSwgb3dpbmcgdG8gdGhlIHNob3V0cyBhbmQgd2lsZCBtb3ZlbWVudHMgb2YgdGhlIGZ1Z2l0aXZlIFN5cmFjdXNhbnMsIHdobyBtaW5nbGVkIGNvbmZ1c2VkbHkgd2l0aCB0aGVtIGFuZCBicm9rZSB0aHJvdWdoIHRoZWlyIHJhbmtzLiBCdXQgYXQgbGFzdCBEaW9uLCBzaW5jZSBubyBvbmUgY291bGQgaGVhciBoaXMgb3JkZXJzLCB3aXNoaW5nIHRvIHNob3cgYnkgaGlzIGV4YW1wbGUgd2hhdCBzaG91bGQgYmUgZG9uZSBjaGFyZ2VkIGZvcmVtb3N0IGludG8gdGhlIEJhcmJhcmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlcmUgYXJvc2UgYWJvdXQgaGltIGEgZmllcmNlIGFuZCBkcmVhZGZ1bCBiYXR0bGUsIHNpbmNlIGhlIHdhcyByZWNvZ25pemVkIGJ5IHRoZSBlbmVteSBhcyB3ZWxsIGFzIGJ5IGhpcyBmcmllbmRzLCBhbmQgYWxsIHJ1c2hlZCB0b3dhcmRzIGhpbSBhdCB0aGUgc2FtZSB0aW1lIHdpdGggbG91ZCBzaG91dHMuIEhlIHdhcyBub3csIGJ5IHJlYXNvbiBvZiBoaXMgYWdlLCB0b28gdW53aWVsZHkgZm9yIHN1Y2ggc3RydWdnbGVzLCBidXQgaGUgd2l0aHN0b29kIGFuZCBjdXQgZG93biBoaXMgYXNzYWlsYW50cyB3aXRoIHZpZ291ciBhbmQgY291cmFnZSB1bnRpbCBoZSB3YXMgd291bmRlZCBpbiB0aGUgaGFuZCB3aXRoIGEgbGFuY2U7IGJlc2lkZXMsIGhpcyBicmVhc3RwbGF0ZSBoYXJkbHkgc3VmZmljZWQgdG8gcmVzaXN0IHRoZSBvdGhlciBtaXNzaWxlcyBhbmQgaGFuZC10by1oYW5kIHRocnVzdHMsIGFuZCBoZSB3YXMgc21pdHRlbiB0aHJvdWdoIGhpcyBzaGllbGQgYnkgbWFueSBzcGVhcnMgYW5kIGxhbmNlcywgYW5kIHdoZW4gdGhlc2Ugd2VyZSBicm9rZW4gb2ZmIGhlIGZlbGwgdG8gdGhlIGdyb3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGhlIGhhZCBiZWVuIHNuYXRjaGVkIGF3YXkgYnkgaGlzIHNvbGRpZXJzLCBoZSBwdXQgVGltb25pZGVzIGluIGNvbW1hbmQgb2YgdGhlc2UsIHdoaWxlIGhlIGhpbXNlbGYsIG1vdW50aW5nIGEgaG9yc2UsIHJvZGUgYWJvdXQgdGhlIGNpdHkgcmFsbHlpbmcgdGhlIGZseWluZyBTeXJhY3VzYW5zLCBhbmQgYnJpbmdpbmcgdXAgYSBkZXRhY2htZW50IG9mIGhpcyBtZXJjZW5hcmllcyB3aG8gd2VyZSBndWFyZGluZyBBY2hyYWRpbmEsIGxlZCB0aGVtIGFnYWluc3QgdGhlIEJhcmJhcmlhbnMs4oCUZnJlc2ggYW5kIGVhZ2VyIHJlc2VydmVzIGFnYWluc3QgYSB3b3JuLW91dCBmb2UsIGFuZCBvbmUgdGhhdCBhbHJlYWR5IGRlc3BhaXJlZCBvZiBoaXMgY2F1c2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IGhhZCBleHBlY3RlZCBhdCB0aGVpciBmaXJzdCBvbnNldCB0byBvdmVycnVuIGFuZCBvY2N1cHkgdGhlIHdob2xlIGNpdHksIGFuZCBub3cgdGhhdCB0aGV5IGhhZCB1bmV4cGVjdGVkbHkgZW5jb3VudGVyZWQgbWVuIHdobyBjb3VsZCBzbWl0ZSBhbmQgZmlnaHQsIHRoZXkgcmV0aXJlZCB0b3dhcmRzIHRpbWUgYWNyb3BvbGlzLiBCdXQgYXMgdGhleSBnYXZlIGdyb3VuZCwgdGhlIEdyZWVrcyBwcmVzc2VkIGFsbCB0aGUgaGFyZGVyIHVwb24gdGhlbSwgc28gdGhhdCB0aGV5IHR1cm5lZCB0aGVpciBiYWNrcyBhbmQgd2VyZSBkcml2ZW4gaW50byB0aGUgc2hlbHRlciBvZiB0aGUgY2l0YWRlbDsgdGhleSBoYWQgc2xhaW4gc2V2ZW50eS1mb3VyIG9mIERpb24ncyBtZW4sIGFuZCBoYWQgbG9zdCBtYW55IG9mIHRoZWlyIG93biBudW1iZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB2aWN0b3J5IHdhcyBhIGJyaWxsaWFudCBvbmUsIGFuZCB0aGUgU3lyYWN1c2FucyByZXdhcmRlZCBEaW9uJ3MgbWVyY2VuYXJpZXMgd2l0aCBhIGh1bmRyZWQgbWluYXMsIHdoaWxlIHRoZSBtZXJjZW5hcmllcyBob25vdXJlZCBEaW9uIHdpdGggYSB3cmVhdGggb2YgZ29sZC4gQW5kIG5vdyBoZXJhbGRzIGNhbWUgZG93biBmcm9tIERpb255c2l1cyBicmluZ2luZyBsZXR0ZXJzIHRvIERpb24gZnJvbSB0aGUgd29tZW4gb2YgaGlzIGZhbWlseS4gVGhlcmUgd2FzIGFsc28gb25lIGFkZHJlc3NlZCBvdXRzaWRlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRvIGhpcyBmYXRoZXIsIGZyb20gSGlwcGFyaW51czwvcT47IGZvciB0aGlzIHdhcyB0aGUgbmFtZSBvZiBEaW9uJ3Mgc29uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaW1hZXVzLCBpdCBpcyB0cnVlLCBzYXlzIGhlIHdhcyBjYWxsZWQgQXJldGFldXMsIGZyb20gaGlzIG1vdGhlciBBcmV0ZTsgYnV0IG9uIHRoaXMgcG9pbnQgYXQgbGVhc3QsIGluIG15IG9waW5pb24sIFRpbW9uaWRlcyBpcyByYXRoZXIgdG8gYmUgdHJ1c3RlZCwgd2hvIHdhcyBhIGZyaWVuZCBhbmQgZmVsbG93LXNvbGRpZXIgb2YgRGlvbidzLiBXZWxsLCB0aGVuLCB0aGUgcmVzdCBvZiB0aGUgbGV0dGVycyB3ZXJlIHJlYWQgYWxvdWQgdG8gdGhlIFN5cmFjdXNhbnMsIGFuZCBjb250YWluZWQgbWFueSBzdXBwbGljYXRpb25zIGFuZCBlbnRyZWF0aWVzIGZyb20gdGhlIHdvbWVuOyBidXQgdGhhdCB3aGljaCBwdXJwb3J0ZWQgdG8gYmUgZnJvbSBEaW9uJ3Mgc29uLCB0aGUgcGVvcGxlIHdvdWxkIG5vdCBhbGxvdyB0byBiZSBvcGVuZWQgaW4gcHVibGljLiBEaW9uLCBob3dldmVyLCBpbnNpc3RlZCB1cG9uIGl0LCBhbmQgb3BlbmVkIHRoZSBsZXR0ZXIuIEl0IHdhcyBmcm9tIERpb255c2l1cywgd2hvIG5vbWluYWxseSBhZGRyZXNzZWQgaGltc2VsZiB0byBEaW9uLCBidXQgcmVhbGx5IHRvIHRoZSBTeXJhY3VzYW5zOyBhbmQgaXQgaGFkIHRoZSBmb3JtIG9mIGVudHJlYXR5IGFuZCBqdXN0aWZpY2F0aW9uLCBidXQgd2FzIGNhbGN1bGF0ZWQgdG8gYnJpbmcgb2RpdW0gb24gRGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXJlIHdlcmUgcmVtaW5kZXJzIG9mIGhpcyB6ZWFsb3VzIHNlcnZpY2VzIGluIGJlaGFsZiBvZiB0aGUgdHlyYW5ueSwgYW5kIHRocmVhdHMgYWdhaW5zdCB0aGUgcGVyc29ucyBvZiBoaXMgZGVhcmVzdCBvbmVzLCBoaXMgc2lzdGVyLCBjaGlsZHJlbiwgYW5kIHdpZmU7IHRoZXJlIHdlcmUgYWxzbyBkaXJlIGluanVuY3Rpb25zIGNvdXBsZWQgd2l0aCBsYW1lbnRhdGlvbnMsIGFuZCwgd2hhdCBhZmZlY3RlZCBoaW0gbW9zdCBvZiBhbGwsIGEgZGVtYW5kIHRoYXQgaGUgc2hvdWxkIG5vdCBhYm9saXNoLCBidXQgYXNzdW1lLCB0aGUgdHlyYW5ueTsgdGhhdCBoZSBzaG91bGQgbm90IGdpdmUgbGliZXJ0eSB0byBtZW4gd2hvIGhhdGVkIGhpbSBhbmQgd291bGQgbmV2ZXIgZm9yZ2V0IHRoZWlyIHdyb25ncywgYnV0IHRha2UgdGhlIHBvd2VyIGhpbXNlbGYsIGFuZCB0aGVyZWJ5IGFzc3VyZSBoaXMgZnJpZW5kcyBhbmQga2luZHJlZCBvZiB0aGVpciBzYWZldHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHZpY3Rvcnkgd2FzIGEgYnJpbGxpYW50IG9uZSwgYW5kIHRoZSBTeXJhY3VzYW5zIHJld2FyZGVkIERpb24ncyBtZXJjZW5hcmllcyB3aXRoIGEgaHVuZHJlZCBtaW5hcywgd2hpbGUgdGhlIG1lcmNlbmFyaWVzIGhvbm91cmVkIERpb24gd2l0aCBhIHdyZWF0aCBvZiBnb2xkLiBBbmQgbm93IGhlcmFsZHMgY2FtZSBkb3duIGZyb20gRGlvbnlzaXVzIGJyaW5naW5nIGxldHRlcnMgdG8gRGlvbiBmcm9tIHRoZSB3b21lbiBvZiBoaXMgZmFtaWx5LiBUaGVyZSB3YXMgYWxzbyBvbmUgYWRkcmVzc2VkIG91dHNpZGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UbyBoaXMgZmF0aGVyLCBmcm9tIEhpcHBhcmludXM8L3E+OyBmb3IgdGhpcyB3YXMgdGhlIG5hbWUgb2YgRGlvbidzIHNvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRpbWFldXMsIGl0IGlzIHRydWUsIHNheXMgaGUgd2FzIGNhbGxlZCBBcmV0YWV1cywgZnJvbSBoaXMgbW90aGVyIEFyZXRlOyBidXQgb24gdGhpcyBwb2ludCBhdCBsZWFzdCwgaW4gbXkgb3BpbmlvbiwgVGltb25pZGVzIGlzIHJhdGhlciB0byBiZSB0cnVzdGVkLCB3aG8gd2FzIGEgZnJpZW5kIGFuZCBmZWxsb3ctc29sZGllciBvZiBEaW9uJ3MuIFdlbGwsIHRoZW4sIHRoZSByZXN0IG9mIHRoZSBsZXR0ZXJzIHdlcmUgcmVhZCBhbG91ZCB0byB0aGUgU3lyYWN1c2FucywgYW5kIGNvbnRhaW5lZCBtYW55IHN1cHBsaWNhdGlvbnMgYW5kIGVudHJlYXRpZXMgZnJvbSB0aGUgd29tZW47IGJ1dCB0aGF0IHdoaWNoIHB1cnBvcnRlZCB0byBiZSBmcm9tIERpb24ncyBzb24sIHRoZSBwZW9wbGUgd291bGQgbm90IGFsbG93IHRvIGJlIG9wZW5lZCBpbiBwdWJsaWMuIERpb24sIGhvd2V2ZXIsIGluc2lzdGVkIHVwb24gaXQsIGFuZCBvcGVuZWQgdGhlIGxldHRlci4gSXQgd2FzIGZyb20gRGlvbnlzaXVzLCB3aG8gbm9taW5hbGx5IGFkZHJlc3NlZCBoaW1zZWxmIHRvIERpb24sIGJ1dCByZWFsbHkgdG8gdGhlIFN5cmFjdXNhbnM7IGFuZCBpdCBoYWQgdGhlIGZvcm0gb2YgZW50cmVhdHkgYW5kIGp1c3RpZmljYXRpb24sIGJ1dCB3YXMgY2FsY3VsYXRlZCB0byBicmluZyBvZGl1bSBvbiBEaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3ZXJlIHJlbWluZGVycyBvZiBoaXMgemVhbG91cyBzZXJ2aWNlcyBpbiBiZWhhbGYgb2YgdGhlIHR5cmFubnksIGFuZCB0aHJlYXRzIGFnYWluc3QgdGhlIHBlcnNvbnMgb2YgaGlzIGRlYXJlc3Qgb25lcywgaGlzIHNpc3RlciwgY2hpbGRyZW4sIGFuZCB3aWZlOyB0aGVyZSB3ZXJlIGFsc28gZGlyZSBpbmp1bmN0aW9ucyBjb3VwbGVkIHdpdGggbGFtZW50YXRpb25zLCBhbmQsIHdoYXQgYWZmZWN0ZWQgaGltIG1vc3Qgb2YgYWxsLCBhIGRlbWFuZCB0aGF0IGhlIHNob3VsZCBub3QgYWJvbGlzaCwgYnV0IGFzc3VtZSwgdGhlIHR5cmFubnk7IHRoYXQgaGUgc2hvdWxkIG5vdCBnaXZlIGxpYmVydHkgdG8gbWVuIHdobyBoYXRlZCBoaW0gYW5kIHdvdWxkIG5ldmVyIGZvcmdldCB0aGVpciB3cm9uZ3MsIGJ1dCB0YWtlIHRoZSBwb3dlciBoaW1zZWxmLCBhbmQgdGhlcmVieSBhc3N1cmUgaGlzIGZyaWVuZHMgYW5kIGtpbmRyZWQgb2YgdGhlaXIgc2FmZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGFsbCB0aGlzIGhhZCBiZWVuIHJlYWQgYWxvdWQsIGl0IGRpZCBub3Qgb2NjdXIgdG8gdGhlIFN5cmFjdXNhbnMsIGFzIGl0IHNob3VsZCBoYXZlIGRvbmUsIHRvIGJlIGFzdG9uaXNoZWQgYXQgdGhlIGZpcm1uZXNzIGFuZCBtYWduYW5pbWl0eSBvZiBEaW9uLCB3aG8gd2FzIHJlc2lzdGluZyBpbiBiZWhhbGYgb2YgaG9ub3VyIGFuZCBqdXN0aWNlIHN1Y2ggc3Ryb25nIGNsYWltcyBvZiByZWxhdGlvbnNoaXAsIGJ1dCB0aGV5IGZvdW5kIG9jY2FzaW9uIGZvciBzdXNwZWN0aW5nIGFuZCBmZWFyaW5nIGhpbSwgb24gdGhlIGdyb3VuZCB0aGF0IGhlIHdhcyB1bmRlciBhIHN0cm9uZyBuZWNlc3NpdHkgb2Ygc3BhcmluZyBEaW9ueXNpdXMsIGFuZCBhdCBvbmNlIHR1cm5lZCB0aGVpciBleWVzIHRvd2FyZHMgb3RoZXIgbGVhZGVycy4gQW5kIHBhcnRpY3VsYXJseSwgd2hlbiB0aGV5IGxlYXJuZWQgdGhhdCBIZXJhY2xlaWRlcyB3YXMgcHV0dGluZyBpbiB0byB0aGUgaGFyYm91ciwgdGhleSB3ZXJlIGFsbCBleGNpdGVtZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIEhlcmFjbGVpZGVzIHdhcyBvbmUgb2YgdGhlIGV4aWxlcywgYSBtYW4gb2YgbWlsaXRhcnkgY2FwYWNpdHkgYW5kIHdlbGwga25vd24gZm9yIHRoZSBjb21tYW5kcyB3aGljaCBoZSBoYWQgaGVsZCB1bmRlciB0aGUgdHlyYW50cywgYnV0IGlycmVzb2x1dGUsIGZpY2tsZSwgYW5kIGxlYXN0IHRvIGJlIHJlbGllZCB1cG9uIGFzIHBhcnRuZXIgaW4gYW4gZW50ZXJwcmlzZSBpbnZvbHZpbmcgcG93ZXIgYW5kIGdsb3J5LiBIZSBoYWQgcXVhcnJlbGxlZCB3aXRoIERpb24gaW4gUGVsb3Bvbm5lc3VzLCBhbmQgaGFkIHJlc29sdmVkIHRvIHNhaWwgb24gaGlzIG93biBhY2NvdW50IGFuZCB3aXRoIGhpcyBvd24gZmxlZXQgYWdhaW5zdCB0aGUgdHlyYW50OyBidXQgd2hlbiBoZSByZWFjaGVkIFN5cmFjdXNlLCB3aXRoIHNldmVuIHRyaXJlbWVzIGFuZCB0aHJlZSB0cmFuc3BvcnRzLCBoZSBmb3VuZCBEaW9ueXNpdXMgb25jZSBtb3JlIGJlbGVhZ3VlcmVkLCBhbmQgdGhlIFN5cmFjdXNhbnMgZWxhdGVkIHdpdGggdmljdG9yeS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlbiwgaGUgc291Z2h0IHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUsIGhhdmluZyBhIGNlcnRhaW4gbmF0dXJhbCBnaWZ0IG9mIHBlcnN1YWRpbmcgYW5kIG1vdmluZyBhIHBvcHVsYWNlIHRoYXQgc2Vla3MgdG8gYmUgY291cnRlZCwgYW5kIHdpbm5pbmcgdGhlbSBvdmVyIHRvIGhpcyBmb2xsb3dpbmcgYWxsIHRoZSBtb3JlIGVhc2lseSBiZWNhdXNlIHRoZXkgd2VyZSByZXBlbGxlZCBieSB0aGUgZ3Jhdml0eSBvZiBEaW9uLiBUaGlzIHRoZXkgcmVzZW50ZWQgYXMgc2V2ZXJlIGFuZCBvdXQgb2YgcGxhY2UgaW4gYSBwdWJsaWMgbWFuLCBiZWNhdXNlIHRoZWlyIHBvd2VyIGhhZCBnaXZlbiB0aGVtIGxpY2Vuc2UgYW5kIGJvbGRuZXNzLCBhbmQgdGhleSB3aXNoZWQgdG8gYmUgZmxhdHRlcmVkIGJ5IHBvcHVsYXIgbGVhZGVycyBiZWZvcmUgdGhleSB3ZXJlIHJlYWxseSBhIHBlb3BsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhbGwgdGhpcyBoYWQgYmVlbiByZWFkIGFsb3VkLCBpdCBkaWQgbm90IG9jY3VyIHRvIHRoZSBTeXJhY3VzYW5zLCBhcyBpdCBzaG91bGQgaGF2ZSBkb25lLCB0byBiZSBhc3RvbmlzaGVkIGF0IHRoZSBmaXJtbmVzcyBhbmQgbWFnbmFuaW1pdHkgb2YgRGlvbiwgd2hvIHdhcyByZXNpc3RpbmcgaW4gYmVoYWxmIG9mIGhvbm91ciBhbmQganVzdGljZSBzdWNoIHN0cm9uZyBjbGFpbXMgb2YgcmVsYXRpb25zaGlwLCBidXQgdGhleSBmb3VuZCBvY2Nhc2lvbiBmb3Igc3VzcGVjdGluZyBhbmQgZmVhcmluZyBoaW0sIG9uIHRoZSBncm91bmQgdGhhdCBoZSB3YXMgdW5kZXIgYSBzdHJvbmcgbmVjZXNzaXR5IG9mIHNwYXJpbmcgRGlvbnlzaXVzLCBhbmQgYXQgb25jZSB0dXJuZWQgdGhlaXIgZXllcyB0b3dhcmRzIG90aGVyIGxlYWRlcnMuIEFuZCBwYXJ0aWN1bGFybHksIHdoZW4gdGhleSBsZWFybmVkIHRoYXQgSGVyYWNsZWlkZXMgd2FzIHB1dHRpbmcgaW4gdG8gdGhlIGhhcmJvdXIsIHRoZXkgd2VyZSBhbGwgZXhjaXRlbWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgSGVyYWNsZWlkZXMgd2FzIG9uZSBvZiB0aGUgZXhpbGVzLCBhIG1hbiBvZiBtaWxpdGFyeSBjYXBhY2l0eSBhbmQgd2VsbCBrbm93biBmb3IgdGhlIGNvbW1hbmRzIHdoaWNoIGhlIGhhZCBoZWxkIHVuZGVyIHRoZSB0eXJhbnRzLCBidXQgaXJyZXNvbHV0ZSwgZmlja2xlLCBhbmQgbGVhc3QgdG8gYmUgcmVsaWVkIHVwb24gYXMgcGFydG5lciBpbiBhbiBlbnRlcnByaXNlIGludm9sdmluZyBwb3dlciBhbmQgZ2xvcnkuIEhlIGhhZCBxdWFycmVsbGVkIHdpdGggRGlvbiBpbiBQZWxvcG9ubmVzdXMsIGFuZCBoYWQgcmVzb2x2ZWQgdG8gc2FpbCBvbiBoaXMgb3duIGFjY291bnQgYW5kIHdpdGggaGlzIG93biBmbGVldCBhZ2FpbnN0IHRoZSB0eXJhbnQ7IGJ1dCB3aGVuIGhlIHJlYWNoZWQgU3lyYWN1c2UsIHdpdGggc2V2ZW4gdHJpcmVtZXMgYW5kIHRocmVlIHRyYW5zcG9ydHMsIGhlIGZvdW5kIERpb255c2l1cyBvbmNlIG1vcmUgYmVsZWFndWVyZWQsIGFuZCB0aGUgU3lyYWN1c2FucyBlbGF0ZWQgd2l0aCB2aWN0b3J5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZW4sIGhlIHNvdWdodCB0byB3aW4gdGhlIGZhdm91ciBvZiB0aGUgbXVsdGl0dWRlLCBoYXZpbmcgYSBjZXJ0YWluIG5hdHVyYWwgZ2lmdCBvZiBwZXJzdWFkaW5nIGFuZCBtb3ZpbmcgYSBwb3B1bGFjZSB0aGF0IHNlZWtzIHRvIGJlIGNvdXJ0ZWQsIGFuZCB3aW5uaW5nIHRoZW0gb3ZlciB0byBoaXMgZm9sbG93aW5nIGFsbCB0aGUgbW9yZSBlYXNpbHkgYmVjYXVzZSB0aGV5IHdlcmUgcmVwZWxsZWQgYnkgdGhlIGdyYXZpdHkgb2YgRGlvbi4gVGhpcyB0aGV5IHJlc2VudGVkIGFzIHNldmVyZSBhbmQgb3V0IG9mIHBsYWNlIGluIGEgcHVibGljIG1hbiwgYmVjYXVzZSB0aGVpciBwb3dlciBoYWQgZ2l2ZW4gdGhlbSBsaWNlbnNlIGFuZCBib2xkbmVzcywgYW5kIHRoZXkgd2lzaGVkIHRvIGJlIGZsYXR0ZXJlZCBieSBwb3B1bGFyIGxlYWRlcnMgYmVmb3JlIHRoZXkgd2VyZSByZWFsbHkgYSBwZW9wbGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0byBiZWdpbiB3aXRoLCB0aGV5IGhlbGQgYW4gYXNzZW1ibHkgb2YgdGhlaXIgb3duIGNhbGxpbmcsIGFuZCBjaG9zZSBIZXJhY2xlaWRlcyBhZG1pcmFsLiBCdXQgRGlvbiBjYW1lIGZvcndhcmQgYW5kIHByb3Rlc3RlZCB0aGF0IGluIGdpdmluZyB0aGlzIG9mZmljZSB0byBIZXJhY2xlaWRlcywgdGhleSBoYWQgZG9uZSBhd2F5IHdpdGggdGhhdCB3aGljaCB0aGV5IGhhZCBiZWZvcmUgZ2l2ZW4gdG8gaGltLCBmb3IgaGUgd291bGQgbm8gbG9uZ2VyIGJlIGdlbmVyYWwgd2l0aCBhYnNvbHV0ZSBwb3dlcnMgaWYgYW5vdGhlciBzaG91bGQgaGF2ZSBjb21tYW5kIG9mIHRpbWUgbmF2eS4gVGhlbiB0aGUgU3lyYWN1c2FucyByZWx1Y3RhbnRseSByZXZva2VkIHRoZSBhcHBvaW50bWVudCBvZiBIZXJhY2xlaWRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIGhhZCBiZWVuIGRvbmUsIERpb24gc3VtbW9uZWQgSGVyYWNsZWlkZXMgdG8gaGlzIGhvdXNlIGFuZCBnZW50bHkgcmVwcm9hY2hlZCBoaW0sIG9uIHRoZSBncm91bmQgdGhhdCBoZSB3YXMgbm90IGFjdGluZyB3ZWxsIG9yIHdpc2VseSBpbiBxdWFycmVsbGluZyB3aXRoIGhpbSBmb3IgaG9ub3VycyBhdCBhIGNyaXNpcyB3aGVyZSBhIHNsaWdodCBpbXB1bHNlIG1pZ2h0IHJ1aW4gdGhlaXIgY2F1c2UuIFRoZW4gaGUgaGltc2VsZiBjYWxsZWQgYSBmcmVzaCBhc3NlbWJseSBhbmQgYXBwb2ludGVkIEhlcmFjbGVpZGVzIGFkbWlyYWwsIGFuZCBwZXJzdWFkZWQgdGhlIGNpdGl6ZW5zIHRvIGdpdmUgaGltIGEgYm9keS1ndWFyZCwgbGlrZSBoaXMgb3duLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiB3b3JkIGFuZCBtaWVuLCBub3csIEhlcmFjbGVpZGVzIHBhaWQgY291cnQgdG8gRGlvbiwgYWNrbm93bGVkZ2VkIGhpcyB0aGFua3MgdG8gaGltLCBhbmQgYXR0ZW5kZWQgc3VibWlzc2l2ZWx5IHVwb24gaGltLCBwZXJmb3JtaW5nIGhpcyBjb21tYW5kczsgYnV0IGluIHNlY3JldCBoZSBwZXJ2ZXJ0ZWQgYW5kIHN0aXJyZWQgdXAgdGhlIG11bHRpdHVkZSBhbmQgdGhlIHJldm9sdXRpb25hcmllcywgYW5kIGVuY29tcGFzc2VkIERpb24gd2l0aCBkaXN0dXJiYW5jZXMgd2hpY2ggcmVkdWNlZCBoaW0gdG8gdXR0ZXIgcGVycGxleGl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGlmIGhlIGFkdmlzZWQgdG8gbGV0IERpb255c2l1cyBsZWF2ZSB0aGUgY2l0YWRlbCB1bmRlciBhIHRydWNlLCBoZSB3b3VsZCBiZSBjaGFyZ2VkIHdpdGggc3BhcmluZyBhbmQgcHJlc2VydmluZyBoaW07IGFuZCBpZiwgd2lzaGluZyB0byBnaXZlIG5vIG9mZmVuY2UsIGhlIHNpbXBseSBjb250aW51ZWQgdGhlIHNpZWdlLCBpdCB3b3VsZCBiZSBzYWlkIHRoYXQgaGUgd2FzIHByb3RyYWN0aW5nIHRoZSB3YXIsIGluIG9yZGVyIHRoYXQgaGUgbWlnaHQgdGhlIGxvbmdlciBiZSBpbiBjb21tYW5kIGFuZCBvdmVyYXdlIHRoZSBjaXRpemVucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRvIGJlZ2luIHdpdGgsIHRoZXkgaGVsZCBhbiBhc3NlbWJseSBvZiB0aGVpciBvd24gY2FsbGluZywgYW5kIGNob3NlIEhlcmFjbGVpZGVzIGFkbWlyYWwuIEJ1dCBEaW9uIGNhbWUgZm9yd2FyZCBhbmQgcHJvdGVzdGVkIHRoYXQgaW4gZ2l2aW5nIHRoaXMgb2ZmaWNlIHRvIEhlcmFjbGVpZGVzLCB0aGV5IGhhZCBkb25lIGF3YXkgd2l0aCB0aGF0IHdoaWNoIHRoZXkgaGFkIGJlZm9yZSBnaXZlbiB0byBoaW0sIGZvciBoZSB3b3VsZCBubyBsb25nZXIgYmUgZ2VuZXJhbCB3aXRoIGFic29sdXRlIHBvd2VycyBpZiBhbm90aGVyIHNob3VsZCBoYXZlIGNvbW1hbmQgb2YgdGltZSBuYXZ5LiBUaGVuIHRoZSBTeXJhY3VzYW5zIHJlbHVjdGFudGx5IHJldm9rZWQgdGhlIGFwcG9pbnRtZW50IG9mIEhlcmFjbGVpZGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyBoYWQgYmVlbiBkb25lLCBEaW9uIHN1bW1vbmVkIEhlcmFjbGVpZGVzIHRvIGhpcyBob3VzZSBhbmQgZ2VudGx5IHJlcHJvYWNoZWQgaGltLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGUgd2FzIG5vdCBhY3Rpbmcgd2VsbCBvciB3aXNlbHkgaW4gcXVhcnJlbGxpbmcgd2l0aCBoaW0gZm9yIGhvbm91cnMgYXQgYSBjcmlzaXMgd2hlcmUgYSBzbGlnaHQgaW1wdWxzZSBtaWdodCBydWluIHRoZWlyIGNhdXNlLiBUaGVuIGhlIGhpbXNlbGYgY2FsbGVkIGEgZnJlc2ggYXNzZW1ibHkgYW5kIGFwcG9pbnRlZCBIZXJhY2xlaWRlcyBhZG1pcmFsLCBhbmQgcGVyc3VhZGVkIHRoZSBjaXRpemVucyB0byBnaXZlIGhpbSBhIGJvZHktZ3VhcmQsIGxpa2UgaGlzIG93bi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIHdvcmQgYW5kIG1pZW4sIG5vdywgSGVyYWNsZWlkZXMgcGFpZCBjb3VydCB0byBEaW9uLCBhY2tub3dsZWRnZWQgaGlzIHRoYW5rcyB0byBoaW0sIGFuZCBhdHRlbmRlZCBzdWJtaXNzaXZlbHkgdXBvbiBoaW0sIHBlcmZvcm1pbmcgaGlzIGNvbW1hbmRzOyBidXQgaW4gc2VjcmV0IGhlIHBlcnZlcnRlZCBhbmQgc3RpcnJlZCB1cCB0aGUgbXVsdGl0dWRlIGFuZCB0aGUgcmV2b2x1dGlvbmFyaWVzLCBhbmQgZW5jb21wYXNzZWQgRGlvbiB3aXRoIGRpc3R1cmJhbmNlcyB3aGljaCByZWR1Y2VkIGhpbSB0byB1dHRlciBwZXJwbGV4aXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpZiBoZSBhZHZpc2VkIHRvIGxldCBEaW9ueXNpdXMgbGVhdmUgdGhlIGNpdGFkZWwgdW5kZXIgYSB0cnVjZSwgaGUgd291bGQgYmUgY2hhcmdlZCB3aXRoIHNwYXJpbmcgYW5kIHByZXNlcnZpbmcgaGltOyBhbmQgaWYsIHdpc2hpbmcgdG8gZ2l2ZSBubyBvZmZlbmNlLCBoZSBzaW1wbHkgY29udGludWVkIHRoZSBzaWVnZSwgaXQgd291bGQgYmUgc2FpZCB0aGF0IGhlIHdhcyBwcm90cmFjdGluZyB0aGUgd2FyLCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IHRoZSBsb25nZXIgYmUgaW4gY29tbWFuZCBhbmQgb3ZlcmF3ZSB0aGUgY2l0aXplbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2FzIGEgY2VydGFpbiBTb3NpcywgYSBtYW4gd2hvc2UgYmFzZW5lc3MgYW5kIGltcHVkZW5jZSBnYXZlIGhpbSByZW5vd24gaW4gU3lyYWN1c2UsIHdoZXJlIGl0IHdhcyB0aG91Z2h0IHRoYXQgYWJ1bmRhbmNlIG9mIGxpYmVydHkgY291bGQgb25seSBiZSBzaG93biBieSBzdWNoIGxpY2Vuc2Ugb2Ygc3BlZWNoIGFzIGhpcy4gVGhpcyBtYW4sIHdpdGggaG9zdGlsZSBkZXNpZ25zIHVwb24gRGlvbiwgZmlyc3Qgcm9zZSBpbiBhaW0gYXNzZW1ibHkgYW5kIHJvdW5kbHkgYWJ1c2VkIHRoZSBTeXJhY3VzYW5zIGZvciBub3QgY29tcHJlaGVuZGluZyB0aGF0IHRoZXkgaGFkIG1lcmVseSBleGNoYW5nZWQgYSBzdHVwaWQgYW5kIGRydW5rZW4gdHlyYW50IGZvciBhIHdhdGNoZnVsIGFuZCBzb2JlciBtYXN0ZXI7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgdGh1cyBkZWNsYXJlZCBoaW1zZWxmIGFuIG9wZW4gZW5lbXkgb2YgRGlvbiwgaGUgbGVmdCB0aGUgYXNzZW1ibHkuIE5leHQsIG9uIHRoZSBmb2xsb3dpbmcgZGF5IGhlIHdhcyBzZWVuIHJ1bm5pbmcgdGhyb3VnaCB0aGUgY2l0eSBuYWtlZCwgaGlzIGhlYWQgYW5kIGZhY2UgY292ZXJlZCB3aXRoIGJsb29kLCBhcyB0aG91Z2ggaGUgd2VyZSB0cnlpbmcgdG8gZXNjYXBlIHB1cnN1aXQuIEluIHRoaXMgY29uZGl0aW9uIGhlIGRhc2hlZCBpbnRvIHRoZSBhc3NlbWJseSBhbmQgdG9sZCB0aGUgcGVvcGxlIHRoZXJlIHRoYXQgaGUgaGFkIGJlZW4gc2V0IHVwb24gYnkgRGlvbidzIG1lcmNlbmFyaWVzLCBhbmQgc2hvd2VkIHRoZW0gaGlzIGhlYWQgd2l0aCBpdHMgd291bmRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBmb3VuZCBtYW55IHRvIHNoYXJlIGhpcyByZXNlbnRtZW50IGFuZCB0YWtlIHNpZGVzIHdpdGggaGltIGFnYWluc3QgRGlvbiwgd2hvLCB0aGV5IHNhaWQsIHdhcyBjb21taXR0aW5nIGRpcmUgYWN0cyBvZiB0eXJhbm55LCBpZiBieSBtdXJkZXIgYW5kIHBlcmlsIG9mIGxpZmUgaGUgc291Z2h0IHRvIHJvYiB0aGUgY2l0aXplbnMgb2YgdGhlaXIgZnJlZSBzcGVlY2guIEhvd2V2ZXIsIGFsdGhvdWdoIHRoZSBhc3NlbWJseSBoYWQgYmVjb21lIGNvbmZ1c2VkIGFuZCB0dW11bHR1b3VzLCBEaW9uIGNhbWUgZm9yd2FyZCBhbmQgc2hvd2VkIGluIGhpcyBvd24gZGVmZW5jZSB0aGF0IFNvc2lzIHdhcyBhIGJyb3RoZXIgb2Ygb25lIG9mIHRoZSBib2R5LWd1YXJkcyBvZiBEaW9ueXNpdXMsIGFuZCBoYWQgYmVlbiBpbmR1Y2VkIGJ5IGhpbSB0byByYWlzZSBjb25mdXNpb24gYW5kIGZhY3Rpb24gYW1vbmcgdGhlIGNpdGl6ZW5zLCBzaW5jZSB0aGVyZSB3YXMgbm8gc2FmZXR5IGZvciBEaW9ueXNpdXMgZXhjZXB0IGluIHRoZWlyIG11dHVhbCBkaXN0cnVzdCBhbmQgZGlzc2Vuc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHNhbWUgdGltZSwgdG9vLCB0aGUgcGh5c2ljaWFucyBleGFtaW5lZCB0aGUgd291bmQgb2YgU29zaXMgYW5kIGRpc2NvdmVyZWQgdGhhdCBpdCBoYWQgYmVlbiBtYWRlIGJ5IHJhenVyZSByYXRoZXIgdGhhbiBieSBhIGRvd25yaWdodCBibG93LiBGb3IgdGhlIGJsb3dzIG9mIGEgc3dvcmQsIGJ5IHJlYXNvbiBvZiBpdHMgd2VpZ2h0LCBtYWtlIHdvdW5kcyB0aGF0IGFyZSBkZWVwZXN0IGluIHRoZSBtaWRkbGUsIGJ1dCB0aGF0IG9mIFNvc2lzIHdhcyBzaGFsbG93IGFsbCBhbG9uZywgYW5kIGludGVybWl0dGVudCwgYXMgd291bGQgYmUgbmF0dXJhbCBpZiBoZSBzdG9wcGVkIGhpcyB3b3JrIG9uIGFjY291bnQgb2YgcGFpbiwgYW5kIHRoZW4gYmVnYW4gaXQgYWdhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIGNlcnRhaW4gd2VsbCBrbm93biBwZXJzb25zIGJyb3VnaHQgYSByYXpvciB0byB0aGUgYXNzZW1ibHksIGFuZCBzdGF0ZWQgdGhhdCBhcyB0aGV5IHdlcmUgd2Fsa2luZyBhbG9uZyB0aGUgc3RyZWV0LCBTb3NpcyBtZXQgdGhlbSwgYWxsIGJsb29keSwgYW5kIGRlY2xhcmluZyB0aGF0IGhlIHdhcyBydW5uaW5nIGF3YXkgZnJvbSBEaW9uJ3MgbWVyY2VuYXJpZXMsIGJ5IHdob20gaGUgaGFkIGp1c3QgYmVlbiB3b3VuZGVkOyBhdCBvbmNlLCB0aGVuLCB0aGV5IHJhbiBhZnRlciB0aGVtLCBhbmQgZm91bmQgbm8gb25lLCBidXQgc2F3IGEgcmF6b3IgbHlpbmcgdW5kZXIgYSBob2xsb3cgcm9jayBpbiB0aGUgcXVhcnRlciBmcm9tIHdoaWNoIFNvc2lzIGhhZCBiZWVuIHNlZW4gdG8gY29tZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSB3YXMgYSBjZXJ0YWluIFNvc2lzLCBhIG1hbiB3aG9zZSBiYXNlbmVzcyBhbmQgaW1wdWRlbmNlIGdhdmUgaGltIHJlbm93biBpbiBTeXJhY3VzZSwgd2hlcmUgaXQgd2FzIHRob3VnaHQgdGhhdCBhYnVuZGFuY2Ugb2YgbGliZXJ0eSBjb3VsZCBvbmx5IGJlIHNob3duIGJ5IHN1Y2ggbGljZW5zZSBvZiBzcGVlY2ggYXMgaGlzLiBUaGlzIG1hbiwgd2l0aCBob3N0aWxlIGRlc2lnbnMgdXBvbiBEaW9uLCBmaXJzdCByb3NlIGluIGFpbSBhc3NlbWJseSBhbmQgcm91bmRseSBhYnVzZWQgdGhlIFN5cmFjdXNhbnMgZm9yIG5vdCBjb21wcmVoZW5kaW5nIHRoYXQgdGhleSBoYWQgbWVyZWx5IGV4Y2hhbmdlZCBhIHN0dXBpZCBhbmQgZHJ1bmtlbiB0eXJhbnQgZm9yIGEgd2F0Y2hmdWwgYW5kIHNvYmVyIG1hc3RlcjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgdGh1cyBkZWNsYXJlZCBoaW1zZWxmIGFuIG9wZW4gZW5lbXkgb2YgRGlvbiwgaGUgbGVmdCB0aGUgYXNzZW1ibHkuIE5leHQsIG9uIHRoZSBmb2xsb3dpbmcgZGF5IGhlIHdhcyBzZWVuIHJ1bm5pbmcgdGhyb3VnaCB0aGUgY2l0eSBuYWtlZCwgaGlzIGhlYWQgYW5kIGZhY2UgY292ZXJlZCB3aXRoIGJsb29kLCBhcyB0aG91Z2ggaGUgd2VyZSB0cnlpbmcgdG8gZXNjYXBlIHB1cnN1aXQuIEluIHRoaXMgY29uZGl0aW9uIGhlIGRhc2hlZCBpbnRvIHRoZSBhc3NlbWJseSBhbmQgdG9sZCB0aGUgcGVvcGxlIHRoZXJlIHRoYXQgaGUgaGFkIGJlZW4gc2V0IHVwb24gYnkgRGlvbidzIG1lcmNlbmFyaWVzLCBhbmQgc2hvd2VkIHRoZW0gaGlzIGhlYWQgd2l0aCBpdHMgd291bmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGZvdW5kIG1hbnkgdG8gc2hhcmUgaGlzIHJlc2VudG1lbnQgYW5kIHRha2Ugc2lkZXMgd2l0aCBoaW0gYWdhaW5zdCBEaW9uLCB3aG8sIHRoZXkgc2FpZCwgd2FzIGNvbW1pdHRpbmcgZGlyZSBhY3RzIG9mIHR5cmFubnksIGlmIGJ5IG11cmRlciBhbmQgcGVyaWwgb2YgbGlmZSBoZSBzb3VnaHQgdG8gcm9iIHRoZSBjaXRpemVucyBvZiB0aGVpciBmcmVlIHNwZWVjaC4gSG93ZXZlciwgYWx0aG91Z2ggdGhlIGFzc2VtYmx5IGhhZCBiZWNvbWUgY29uZnVzZWQgYW5kIHR1bXVsdHVvdXMsIERpb24gY2FtZSBmb3J3YXJkIGFuZCBzaG93ZWQgaW4gaGlzIG93biBkZWZlbmNlIHRoYXQgU29zaXMgd2FzIGEgYnJvdGhlciBvZiBvbmUgb2YgdGhlIGJvZHktZ3VhcmRzIG9mIERpb255c2l1cywgYW5kIGhhZCBiZWVuIGluZHVjZWQgYnkgaGltIHRvIHJhaXNlIGNvbmZ1c2lvbiBhbmQgZmFjdGlvbiBhbW9uZyB0aGUgY2l0aXplbnMsIHNpbmNlIHRoZXJlIHdhcyBubyBzYWZldHkgZm9yIERpb255c2l1cyBleGNlcHQgaW4gdGhlaXIgbXV0dWFsIGRpc3RydXN0IGFuZCBkaXNzZW5zaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSBzYW1lIHRpbWUsIHRvbywgdGhlIHBoeXNpY2lhbnMgZXhhbWluZWQgdGhlIHdvdW5kIG9mIFNvc2lzIGFuZCBkaXNjb3ZlcmVkIHRoYXQgaXQgaGFkIGJlZW4gbWFkZSBieSByYXp1cmUgcmF0aGVyIHRoYW4gYnkgYSBkb3ducmlnaHQgYmxvdy4gRm9yIHRoZSBibG93cyBvZiBhIHN3b3JkLCBieSByZWFzb24gb2YgaXRzIHdlaWdodCwgbWFrZSB3b3VuZHMgdGhhdCBhcmUgZGVlcGVzdCBpbiB0aGUgbWlkZGxlLCBidXQgdGhhdCBvZiBTb3NpcyB3YXMgc2hhbGxvdyBhbGwgYWxvbmcsIGFuZCBpbnRlcm1pdHRlbnQsIGFzIHdvdWxkIGJlIG5hdHVyYWwgaWYgaGUgc3RvcHBlZCBoaXMgd29yayBvbiBhY2NvdW50IG9mIHBhaW4sIGFuZCB0aGVuIGJlZ2FuIGl0IGFnYWluLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJlc2lkZXMsIGNlcnRhaW4gd2VsbCBrbm93biBwZXJzb25zIGJyb3VnaHQgYSByYXpvciB0byB0aGUgYXNzZW1ibHksIGFuZCBzdGF0ZWQgdGhhdCBhcyB0aGV5IHdlcmUgd2Fsa2luZyBhbG9uZyB0aGUgc3RyZWV0LCBTb3NpcyBtZXQgdGhlbSwgYWxsIGJsb29keSwgYW5kIGRlY2xhcmluZyB0aGF0IGhlIHdhcyBydW5uaW5nIGF3YXkgZnJvbSBEaW9uJ3MgbWVyY2VuYXJpZXMsIGJ5IHdob20gaGUgaGFkIGp1c3QgYmVlbiB3b3VuZGVkOyBhdCBvbmNlLCB0aGVuLCB0aGV5IHJhbiBhZnRlciB0aGVtLCBhbmQgZm91bmQgbm8gb25lLCBidXQgc2F3IGEgcmF6b3IgbHlpbmcgdW5kZXIgYSBob2xsb3cgcm9jayBpbiB0aGUgcXVhcnRlciBmcm9tIHdoaWNoIFNvc2lzIGhhZCBiZWVuIHNlZW4gdG8gY29tZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgdGhlIGNhc2Ugb2YgU29zaXMgd2FzIGFscmVhZHkgZGVzcGVyYXRlOyBidXQgd2hlbiwgaW4gYWRkaXRpb24gdG8gdGhlc2UgcHJvb2ZzLCBoaXMgc2VydmFudHMgdGVzdGlmaWVkIHRoYXQgd2hpbGUgaXQgd2FzIHN0aWxsIG5pZ2h0IGhlIGhhZCBsZWZ0IHRoZSBob3VzZSBhbG9uZSBhbmQgY2FycnlpbmcgdGhlIHJhem9yLCBEaW9uJ3MgYWNjdXNlcnMgd2l0aGRyZXcsIGFuZCB0aGUgcGVvcGxlLCBhZnRlciBjb25kZW1uaW5nIFNvc2lzIHRvIGRlYXRoLCB3ZXJlIHJlY29uY2lsZWQgd2l0aCBEaW9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgdGhlIGNhc2Ugb2YgU29zaXMgd2FzIGFscmVhZHkgZGVzcGVyYXRlOyBidXQgd2hlbiwgaW4gYWRkaXRpb24gdG8gdGhlc2UgcHJvb2ZzLCBoaXMgc2VydmFudHMgdGVzdGlmaWVkIHRoYXQgd2hpbGUgaXQgd2FzIHN0aWxsIG5pZ2h0IGhlIGhhZCBsZWZ0IHRoZSBob3VzZSBhbG9uZSBhbmQgY2FycnlpbmcgdGhlIHJhem9yLCBEaW9uJ3MgYWNjdXNlcnMgd2l0aGRyZXcsIGFuZCB0aGUgcGVvcGxlLCBhZnRlciBjb25kZW1uaW5nIFNvc2lzIHRvIGRlYXRoLCB3ZXJlIHJlY29uY2lsZWQgd2l0aCBEaW9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGV5IHdlcmUgbm9uZSB0aGUgbGVzcyBzdXNwaWNpb3VzIG9mIGhpcyBtZXJjZW5hcmllcywgYW5kIGVzcGVjaWFsbHkgc28sIG5vdyB0aGF0IG1vc3Qgb2YgdGhlIHN0cnVnZ2xlcyBhZ2FpbnN0IHRoZSB0eXJhbnQgd2VyZSBjYXJyaWVkIG9uIGF0IHNlYSwgc2luY2UgUGhpbGlzdHVzIGhhZCBjb21lIGZyb20gSWFweWdpYSB3aXRoIGEgbGFyZ2UgbnVtYmVyIG9mIHRyaXJlbWVzIHRvIGhlbHAgRGlvbnlzaXVzOyBhbmQgc2luY2UgdGhlIG1lcmNlbmFyaWVzIHdlcmUgbWVuLWF0LWFybXMsIHRoZXkgdGhvdWdodCB0aGVtIG9mIG5vIGZ1cnRoZXIgdXNlIGZvciB0aGUgd2FyLCBuYXksIHRoZXkgZmVsdCB0aGF0IGV2ZW4gdGhlc2UgdHJvb3BzIHdlcmUgZGVwZW5kZW50IGZvciBwcm90ZWN0aW9uIHVwb24gdGhlIGNpdGl6ZW5zIHRoZW1zZWx2ZXMsIHdobyB3ZXJlIHNlYW1lbiwgYW5kIGRlcml2ZWQgdGhlaXIgcG93ZXIgZnJvbSB0aGVpciBmbGVldC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZXkgd2VyZSBzdGlsbCBtb3JlIGVsYXRlZCBieSBhIHN1Y2Nlc3NmdWwgZW5nYWdlbWVudCBhdCBzZWEsIGluIHdoaWNoIHRoZXkgZGVmZWF0ZWQgUGhpbGlzdHVzLCBhbmQgdGhlbiB0cmVhdGVkIGhpbSBpbiBhIGJhcmJhcm91cyBhbmQgc2F2YWdlIGZhc2hpb24uIEVwaG9ydXMsIGl0IGlzIHRydWUsIHNheXMgdGhhdCB3aGVuIGhpcyBzaGlwIHdhcyBjYXB0dXJlZCwgUGhpbGlzdHVzIHNsZXcgaGltc2VsZjsgYnV0IFRpbW9uaWRlcywgd2hvIHdhcyBlbmdhZ2VkIHdpdGggRGlvbiBpbGwgYWxsIHRoZSBldmVudHMgb2YgdGhpcyB3YXIgZnJvbSB0aGUgdmVyeSBmaXJzdCwgaW4gd3JpdGluZyB0byBTcGV1c2lwcHVzIHRoZSBwaGlsb3NvcGhlciwgcmVsYXRlcyB0aGF0IFBoaWxpc3R1cyB3YXMgdGFrZW4gYWxpdmUgYWZ0ZXIgaGlzIHRyaXJlbWUgaGFkIHJ1biBhZ3JvdW5kLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhhdCB0aGUgU3lyYWN1c2FucywgdG8gYmVnaW4gd2l0aCwgc3RyaXBwZWQgb2ZmIGhpcyBicmVhc3QtcGxhdGUgYW5kIGV4cG9zZWQgaGlzIGJvZHksIG5ha2VkLCB0byBpbnN1bHQgYW5kIGFidXNlLCBhbHRob3VnaCBoZSB3YXMgbm93IGFuIG9sZCBtYW47IHRoZW4sIHRoYXQgdGhleSBjdXQgb2ZmIGhpcyBoZWFkLCBhbmQgZ2F2ZSBoaXMgYm9keSB0byB0aGUgYm95cyBvZiB0aGUgY2l0eSwgd2l0aCBvcmRlcnMgdG8gZHJhZyBpdCB0aHJvdWdoIEFjaHJhZGluYSBhbmQgdGhyb3cgaXQgaW50byB0aGUgc3RvbmUgcXVhcnJpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBUaW1hZXVzLCBlbmxhcmdpbmcgdXBvbiB0aGVzZSBpbmRpZ25pdGllcywgc2F5cyB0aGF0IHRoZSBib3lzIHRpZWQgYSByb3BlIHRvIHRoZSBsYW1lIGxlZyBvZiB0aGUgZGVhZCBQaGlsaXN0dXMgYW5kIGRyYWdnZWQgaGlzIGJvZHkgdGhyb3VnaCB0aGUgY2l0eSwgd2hpbGUgYWxsIHRoZSBTeXJhY3VzYW5zIG1vY2tlZCBhbmQgamVlcmVkIGFzIHRoZXkgc2F3IGRyYXduIGFib3V0IGJ5IHRoZSBsZWcgdGhlIG1hbiB3aG8gaGFkIHNhaWQgdG8gRGlvbnlzaXVzIHRoYXQgaGUgbXVzdCBub3QgcnVuIGF3YXkgZnJvbSBoaXMgdHlyYW5ueSBvbiBhIHN3aWZ0IGhvcnNlLCBidXQgd2FpdCB1bnRpbCBoZSB3YXMgZHJhZ2dlZCBmcm9tIGl0IGJ5IHRoZSBsZWcuIEFuZCB5ZXQgUGhpbGlzdHVzIGhhcyBzdGF0ZWQgZXhwbGljaXRseSB0aGF0IHRoaXMgd2FzIHNhaWQgdG8gRGlvbnlzaXVzIGJ5IGFub3RoZXIsIGFuZCBub3QgYnkgaGltc2VsZi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZXkgd2VyZSBub25lIHRoZSBsZXNzIHN1c3BpY2lvdXMgb2YgaGlzIG1lcmNlbmFyaWVzLCBhbmQgZXNwZWNpYWxseSBzbywgbm93IHRoYXQgbW9zdCBvZiB0aGUgc3RydWdnbGVzIGFnYWluc3QgdGhlIHR5cmFudCB3ZXJlIGNhcnJpZWQgb24gYXQgc2VhLCBzaW5jZSBQaGlsaXN0dXMgaGFkIGNvbWUgZnJvbSBJYXB5Z2lhIHdpdGggYSBsYXJnZSBudW1iZXIgb2YgdHJpcmVtZXMgdG8gaGVscCBEaW9ueXNpdXM7IGFuZCBzaW5jZSB0aGUgbWVyY2VuYXJpZXMgd2VyZSBtZW4tYXQtYXJtcywgdGhleSB0aG91Z2h0IHRoZW0gb2Ygbm8gZnVydGhlciB1c2UgZm9yIHRoZSB3YXIsIG5heSwgdGhleSBmZWx0IHRoYXQgZXZlbiB0aGVzZSB0cm9vcHMgd2VyZSBkZXBlbmRlbnQgZm9yIHByb3RlY3Rpb24gdXBvbiB0aGUgY2l0aXplbnMgdGhlbXNlbHZlcywgd2hvIHdlcmUgc2VhbWVuLCBhbmQgZGVyaXZlZCB0aGVpciBwb3dlciBmcm9tIHRoZWlyIGZsZWV0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IHdlcmUgc3RpbGwgbW9yZSBlbGF0ZWQgYnkgYSBzdWNjZXNzZnVsIGVuZ2FnZW1lbnQgYXQgc2VhLCBpbiB3aGljaCB0aGV5IGRlZmVhdGVkIFBoaWxpc3R1cywgYW5kIHRoZW4gdHJlYXRlZCBoaW0gaW4gYSBiYXJiYXJvdXMgYW5kIHNhdmFnZSBmYXNoaW9uLiBFcGhvcnVzLCBpdCBpcyB0cnVlLCBzYXlzIHRoYXQgd2hlbiBoaXMgc2hpcCB3YXMgY2FwdHVyZWQsIFBoaWxpc3R1cyBzbGV3IGhpbXNlbGY7IGJ1dCBUaW1vbmlkZXMsIHdobyB3YXMgZW5nYWdlZCB3aXRoIERpb24gaWxsIGFsbCB0aGUgZXZlbnRzIG9mIHRoaXMgd2FyIGZyb20gdGhlIHZlcnkgZmlyc3QsIGluIHdyaXRpbmcgdG8gU3BldXNpcHB1cyB0aGUgcGhpbG9zb3BoZXIsIHJlbGF0ZXMgdGhhdCBQaGlsaXN0dXMgd2FzIHRha2VuIGFsaXZlIGFmdGVyIGhpcyB0cmlyZW1lIGhhZCBydW4gYWdyb3VuZCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IHRoZSBTeXJhY3VzYW5zLCB0byBiZWdpbiB3aXRoLCBzdHJpcHBlZCBvZmYgaGlzIGJyZWFzdC1wbGF0ZSBhbmQgZXhwb3NlZCBoaXMgYm9keSwgbmFrZWQsIHRvIGluc3VsdCBhbmQgYWJ1c2UsIGFsdGhvdWdoIGhlIHdhcyBub3cgYW4gb2xkIG1hbjsgdGhlbiwgdGhhdCB0aGV5IGN1dCBvZmYgaGlzIGhlYWQsIGFuZCBnYXZlIGhpcyBib2R5IHRvIHRoZSBib3lzIG9mIHRoZSBjaXR5LCB3aXRoIG9yZGVycyB0byBkcmFnIGl0IHRocm91Z2ggQWNocmFkaW5hIGFuZCB0aHJvdyBpdCBpbnRvIHRoZSBzdG9uZSBxdWFycmllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBUaW1hZXVzLCBlbmxhcmdpbmcgdXBvbiB0aGVzZSBpbmRpZ25pdGllcywgc2F5cyB0aGF0IHRoZSBib3lzIHRpZWQgYSByb3BlIHRvIHRoZSBsYW1lIGxlZyBvZiB0aGUgZGVhZCBQaGlsaXN0dXMgYW5kIGRyYWdnZWQgaGlzIGJvZHkgdGhyb3VnaCB0aGUgY2l0eSwgd2hpbGUgYWxsIHRoZSBTeXJhY3VzYW5zIG1vY2tlZCBhbmQgamVlcmVkIGFzIHRoZXkgc2F3IGRyYXduIGFib3V0IGJ5IHRoZSBsZWcgdGhlIG1hbiB3aG8gaGFkIHNhaWQgdG8gRGlvbnlzaXVzIHRoYXQgaGUgbXVzdCBub3QgcnVuIGF3YXkgZnJvbSBoaXMgdHlyYW5ueSBvbiBhIHN3aWZ0IGhvcnNlLCBidXQgd2FpdCB1bnRpbCBoZSB3YXMgZHJhZ2dlZCBmcm9tIGl0IGJ5IHRoZSBsZWcuIEFuZCB5ZXQgUGhpbGlzdHVzIGhhcyBzdGF0ZWQgZXhwbGljaXRseSB0aGF0IHRoaXMgd2FzIHNhaWQgdG8gRGlvbnlzaXVzIGJ5IGFub3RoZXIsIGFuZCBub3QgYnkgaGltc2VsZi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFRpbWFldXMsIGZpbmRpbmcgYSBmYWlyIGV4Y3VzZSBmb3IgaGlzIGFuaW1vc2l0eSBpbiB0aGUgemVhbCBhbmQgZmlkZWxpdHkgd2hpY2ggUGhpbGlzdHVzIHNob3dlZCBpbiBiZWhhbGYgb2YgdGhlIHR5cmFubnksIGdsdXRzIGhpbXNlbGYgd2l0aCB0aGUgc2xhbmRlcnMgYWdhaW5zdCBoaW0uIE5vdywgdGhvc2Ugd2hvIHdlcmUgd3JvbmdlZCBieSBQaGlsaXN0dXMgd2hpbGUgaGUgbGl2ZWQgbWF5IHBlcmhhcHMgYmUgcGFyZG9uZWQgZm9yIGNhcnJ5aW5nIHRoZWlyIHJlc2VudG1lbnQgdG8gdGhlIGxlbmd0aCBvZiBtYWx0cmVhdGluZyBoaXMgdW5jb25zY2lvdXMgYm9keTsgYnV0IHRob3NlIHdobyBpbiBsYXRlciB0aW1lcyB3cml0ZSBoaXN0b3JpZXMgb2YgdGhhdCBwZXJpb2QsIGFuZCB3aG8gd2VyZSBub3QgaGFybWVkIGJ5IGhpcyBsaWZlLCBidXQgYXZhaWwgdGhlbXNlbHZlcyBvZiBoaXMgd3JpdGluZ3MsIG93ZSBpdCB0byBoaXMgcmVwdXRhdGlvbiBub3QgdG8gcmVwcm9hY2ggaGltLCBpbiBpbnNvbGVudCBhbmQgc2N1cnJpbG91cyBsYW5ndWFnZSwgZm9yIGNhbGFtaXRpZXMgaW4gd2hpY2ggZm9ydHVuZSBtYXkgaW52b2x2ZSBldmVuIHRoZSBiZXN0IG9mIG1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgRXBob3J1cyBhbHNvIGlzIHVuc291bmQgaW4gaGVhcGluZyBwcmFpc2VzIHVwb24gUGhpbGlzdHVzOyBmb3IsIGFsdGhvdWdoIGhlIGlzIG1vc3Qgc2tpbGZ1bCBpbiBmdXJuaXNoaW5nIHVuanVzdCBkZWVkcyBhbmQgYmFzZSBuYXR1cmVzIHdpdGggc3BlY2lvdXMgbW90aXZlcywgYW5kIGluIGRpc2NvdmVyaW5nIGRlY29yb3VzIG5hbWVzIGZvciB0aGVtLCBzdGlsbCwgZXZlbiBoZSwgd2l0aCBhbGwgaGlzIGFydGlmaWNlLCBjYW5ub3QgZXh0cmljYXRlIGhpbXNlbGYgZnJvbSB0aGUgY2hhcmdlIG9mIGhhdmluZyBiZWVuIHRoZSBncmVhdGVzdCBsb3ZlciBvZiB0eXJhbnRzIGFsaXZlLCBhbmQgbW9yZSB0aGFuIGFueSBvbmUgZWxzZSBhbHdheXMgYW4gZW11bG91cyBhZG1pcmVyIG9mIGx1eHVyeSwgcG93ZXIsIHdlYWx0aCwgYW5kIG1hcnJpYWdlIGFsbGlhbmNlcyBvZiB0eXJhbnRzLiBWZXJpbHksIGhlIHdobyBuZWl0aGVyIHByYWlzZXMgdGhlIGNvbmR1Y3Qgb2YgUGhpbGlzdHVzLCBub3IgZ2xvYXRzIGluc3VsdGluZ2x5IG92ZXIgaGlzIG1pc2ZvcnR1bmVzLCB0YWtlcyB0aGUgZml0dGVzdCBjb3Vyc2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFRpbWFldXMsIGZpbmRpbmcgYSBmYWlyIGV4Y3VzZSBmb3IgaGlzIGFuaW1vc2l0eSBpbiB0aGUgemVhbCBhbmQgZmlkZWxpdHkgd2hpY2ggUGhpbGlzdHVzIHNob3dlZCBpbiBiZWhhbGYgb2YgdGhlIHR5cmFubnksIGdsdXRzIGhpbXNlbGYgd2l0aCB0aGUgc2xhbmRlcnMgYWdhaW5zdCBoaW0uIE5vdywgdGhvc2Ugd2hvIHdlcmUgd3JvbmdlZCBieSBQaGlsaXN0dXMgd2hpbGUgaGUgbGl2ZWQgbWF5IHBlcmhhcHMgYmUgcGFyZG9uZWQgZm9yIGNhcnJ5aW5nIHRoZWlyIHJlc2VudG1lbnQgdG8gdGhlIGxlbmd0aCBvZiBtYWx0cmVhdGluZyBoaXMgdW5jb25zY2lvdXMgYm9keTsgYnV0IHRob3NlIHdobyBpbiBsYXRlciB0aW1lcyB3cml0ZSBoaXN0b3JpZXMgb2YgdGhhdCBwZXJpb2QsIGFuZCB3aG8gd2VyZSBub3QgaGFybWVkIGJ5IGhpcyBsaWZlLCBidXQgYXZhaWwgdGhlbXNlbHZlcyBvZiBoaXMgd3JpdGluZ3MsIG93ZSBpdCB0byBoaXMgcmVwdXRhdGlvbiBub3QgdG8gcmVwcm9hY2ggaGltLCBpbiBpbnNvbGVudCBhbmQgc2N1cnJpbG91cyBsYW5ndWFnZSwgZm9yIGNhbGFtaXRpZXMgaW4gd2hpY2ggZm9ydHVuZSBtYXkgaW52b2x2ZSBldmVuIHRoZSBiZXN0IG9mIG1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIEVwaG9ydXMgYWxzbyBpcyB1bnNvdW5kIGluIGhlYXBpbmcgcHJhaXNlcyB1cG9uIFBoaWxpc3R1czsgZm9yLCBhbHRob3VnaCBoZSBpcyBtb3N0IHNraWxmdWwgaW4gZnVybmlzaGluZyB1bmp1c3QgZGVlZHMgYW5kIGJhc2UgbmF0dXJlcyB3aXRoIHNwZWNpb3VzIG1vdGl2ZXMsIGFuZCBpbiBkaXNjb3ZlcmluZyBkZWNvcm91cyBuYW1lcyBmb3IgdGhlbSwgc3RpbGwsIGV2ZW4gaGUsIHdpdGggYWxsIGhpcyBhcnRpZmljZSwgY2Fubm90IGV4dHJpY2F0ZSBoaW1zZWxmIGZyb20gdGhlIGNoYXJnZSBvZiBoYXZpbmcgYmVlbiB0aGUgZ3JlYXRlc3QgbG92ZXIgb2YgdHlyYW50cyBhbGl2ZSwgYW5kIG1vcmUgdGhhbiBhbnkgb25lIGVsc2UgYWx3YXlzIGFuIGVtdWxvdXMgYWRtaXJlciBvZiBsdXh1cnksIHBvd2VyLCB3ZWFsdGgsIGFuZCBtYXJyaWFnZSBhbGxpYW5jZXMgb2YgdHlyYW50cy4gVmVyaWx5LCBoZSB3aG8gbmVpdGhlciBwcmFpc2VzIHRoZSBjb25kdWN0IG9mIFBoaWxpc3R1cywgbm9yIGdsb2F0cyBpbnN1bHRpbmdseSBvdmVyIGhpcyBtaXNmb3J0dW5lcywgdGFrZXMgdGhlIGZpdHRlc3QgY291cnNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgZGVhdGggb2YgUGhpbGlzdHVzLCBEaW9ueXNpdXMgc2VudCB0byBEaW9uIG9mZmVyaW5nIHRvIHN1cnJlbmRlciB0byBoaW0gdGhlIGFjcm9wb2xpcywgaGlzIG11bml0aW9ucyBvZiB3YXIsIGFuZCBoaXMgbWVyY2VuYXJpZXMsIHdpdGggZml2ZSBtb250aHMnIGZ1bGwgcGF5IGZvciB0aGVzZSwgYW5kIGRlbWFuZGluZyBmb3IgaGltc2VsZiB0aGUgcHJpdmlsZWdlIG9mIHJldGlyaW5nIHVubW9sZXN0ZWQgaW50byBJdGFseSwgYW5kIG9mIGVuam95aW5nIGR1cmluZyBoaXMgcmVzaWRlbmNlIHRoZXJlIHRoZSByZXZlbnVlcyBvZiBHeWFydGEsIGEgbGFyZ2UgYW5kIHJpY2ggdHJhY3QgaW4gdGhlIHRlcnJpdG9yeSBvZiBTeXJhY3VzZSwgZXh0ZW5kaW5nIGZyb20gdGhlIHNlYSB0byB0aGUgaW50ZXJpb3Igb2YgdGhlIGlzbGFuZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RGlvbiwgaG93ZXZlciwgd291bGQgbm90IGFjY2VwdCB0aGVzZSB0ZXJtcywgYnV0IGJhZGUgaGltIGFwcGx5IHRvIHRoZSBTeXJhY3VzYW5zLCBhbmQgdGhlc2UsIGhvcGluZyB0byB0YWtlIERpb255c2l1cyBhbGl2ZSwgZHJvdmUgYXdheSBoaXMgYW1iYXNzYWRvcnMuIFVwb24gdGhpcywgdGhlIHR5cmFudCBoYW5kZWQgb3ZlciB0aGUgY2l0YWRlbCB0byBBcG9sbG9jcmF0ZXMsIGhpcyBlbGRlc3Qgc29uLCB3aGlsZSBoZSBoaW1zZWxmLCBhZnRlciB3YXRjaGluZyBmb3IgYSBmYXZvdXJhYmxlIHdpbmQgYW5kIHB1dHRpbmcgb24gYm9hcmQgaGlzIHNoaXBzIHRoZSBwZXJzb25zIGFuZCBwcm9wZXJ0eSB0aGF0IGhlIGhlbGQgbW9zdCBkZWFyLCBlbHVkZWQgdGhlIHZpZ2lsYW5jZSBvZiBIZXJhY2xlaWRlcyB0aGUgYWRtaXJhbCwgYW5kIHNhaWxlZCBvZmYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGRlYXRoIG9mIFBoaWxpc3R1cywgRGlvbnlzaXVzIHNlbnQgdG8gRGlvbiBvZmZlcmluZyB0byBzdXJyZW5kZXIgdG8gaGltIHRoZSBhY3JvcG9saXMsIGhpcyBtdW5pdGlvbnMgb2Ygd2FyLCBhbmQgaGlzIG1lcmNlbmFyaWVzLCB3aXRoIGZpdmUgbW9udGhzJyBmdWxsIHBheSBmb3IgdGhlc2UsIGFuZCBkZW1hbmRpbmcgZm9yIGhpbXNlbGYgdGhlIHByaXZpbGVnZSBvZiByZXRpcmluZyB1bm1vbGVzdGVkIGludG8gSXRhbHksIGFuZCBvZiBlbmpveWluZyBkdXJpbmcgaGlzIHJlc2lkZW5jZSB0aGVyZSB0aGUgcmV2ZW51ZXMgb2YgR3lhcnRhLCBhIGxhcmdlIGFuZCByaWNoIHRyYWN0IGluIHRoZSB0ZXJyaXRvcnkgb2YgU3lyYWN1c2UsIGV4dGVuZGluZyBmcm9tIHRoZSBzZWEgdG8gdGhlIGludGVyaW9yIG9mIHRoZSBpc2xhbmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRpb24sIGhvd2V2ZXIsIHdvdWxkIG5vdCBhY2NlcHQgdGhlc2UgdGVybXMsIGJ1dCBiYWRlIGhpbSBhcHBseSB0byB0aGUgU3lyYWN1c2FucywgYW5kIHRoZXNlLCBob3BpbmcgdG8gdGFrZSBEaW9ueXNpdXMgYWxpdmUsIGRyb3ZlIGF3YXkgaGlzIGFtYmFzc2Fkb3JzLiBVcG9uIHRoaXMsIHRoZSB0eXJhbnQgaGFuZGVkIG92ZXIgdGhlIGNpdGFkZWwgdG8gQXBvbGxvY3JhdGVzLCBoaXMgZWxkZXN0IHNvbiwgd2hpbGUgaGUgaGltc2VsZiwgYWZ0ZXIgd2F0Y2hpbmcgZm9yIGEgZmF2b3VyYWJsZSB3aW5kIGFuZCBwdXR0aW5nIG9uIGJvYXJkIGhpcyBzaGlwcyB0aGUgcGVyc29ucyBhbmQgcHJvcGVydHkgdGhhdCBoZSBoZWxkIG1vc3QgZGVhciwgZWx1ZGVkIHRoZSB2aWdpbGFuY2Ugb2YgSGVyYWNsZWlkZXMgdGhlIGFkbWlyYWwsIGFuZCBzYWlsZWQgb2ZmLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZXJhY2xlaWRlcyB3YXMgbm93IHN0b3JtaWx5IGRlbm91bmNlZCBieSB0aGUgY2l0aXplbnMsIHdoZXJldXBvbiBoZSBpbmR1Y2VkIEhpcHBvLCBvbmUgb2YgdGhlaXIgbGVhZGVycywgdG8gbWFrZSBwcm9wb3NhbHMgdG8gdGhlIHBlb3BsZSBmb3IgYSBkaXN0cmlidXRpb24gb2YgbGFuZCwgdXJnaW5nIHRoYXQgbGliZXJ0eSB3YXMgYmFzZWQgb24gZXF1YWxpdHksIGFuZCBzbGF2ZXJ5IG9uIHRoZSBwb3ZlcnR5IG9mIHRob3NlIHdobyBoYWQgbmF1Z2h0LiBTdXBwb3J0aW5nIEhpcHBvLCBhbmQgaGVhZGluZyBhIGZhY3Rpb24gd2hpY2ggb3ZlcndoZWxtZWQgdGhlIG9wcG9zaXRpb24gb2YgRGlvbiwgSGVyYWNsZWlkZXMgcGVyc3VhZGVkIHRoZSBTeXJhY3VzYW5zIHRvIHZvdGUgdGhpcyBtZWFzdXJlLCB0byBkZXByaXZlIHRoZSBtZXJjZW5hcmllcyBvZiB0aGVpciBwYXksIGFuZCB0byBlbGVjdCBvdGhlciBnZW5lcmFscywgdGh1cyByaWRkaW5nIHRoZW1zZWx2ZXMgb2YgdGhlIHNldmVudGllcyBvZiBEaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TbyB0aGUgcGVvcGxlLCBhdHRlbXB0aW5nLCBhcyBpdCB3ZXJlLCB0byBzdGFuZCBhdCBvbmNlIHVwb24gdGhlaXIgZmVldCBhZnRlciB0aGVpciBsb25nIHNpY2tuZXNzIG9mIHR5cmFubnksIGFuZCB0byBhY3QgdGhlIHBhcnQgb2YgaW5kZXBlbmRlbmNlIG91dCBvZiBzZWFzb24sIHN0dW1ibGVkIGluIHRoZWlyIHVuZGVydGFraW5ncywgYW5kIHlldCBoYXRlZCBEaW9uLCB3aG8sIGxpa2UgYSBwaHlzaWNpYW4sIHdpc2hlZCB0byBzdWJqZWN0IHRoZSBjaXR5IHRvIGEgc3RyaWN0IGFuZCB0ZW1wZXJhdGUgcmVnaW1lbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlcmFjbGVpZGVzIHdhcyBub3cgc3Rvcm1pbHkgZGVub3VuY2VkIGJ5IHRoZSBjaXRpemVucywgd2hlcmV1cG9uIGhlIGluZHVjZWQgSGlwcG8sIG9uZSBvZiB0aGVpciBsZWFkZXJzLCB0byBtYWtlIHByb3Bvc2FscyB0byB0aGUgcGVvcGxlIGZvciBhIGRpc3RyaWJ1dGlvbiBvZiBsYW5kLCB1cmdpbmcgdGhhdCBsaWJlcnR5IHdhcyBiYXNlZCBvbiBlcXVhbGl0eSwgYW5kIHNsYXZlcnkgb24gdGhlIHBvdmVydHkgb2YgdGhvc2Ugd2hvIGhhZCBuYXVnaHQuIFN1cHBvcnRpbmcgSGlwcG8sIGFuZCBoZWFkaW5nIGEgZmFjdGlvbiB3aGljaCBvdmVyd2hlbG1lZCB0aGUgb3Bwb3NpdGlvbiBvZiBEaW9uLCBIZXJhY2xlaWRlcyBwZXJzdWFkZWQgdGhlIFN5cmFjdXNhbnMgdG8gdm90ZSB0aGlzIG1lYXN1cmUsIHRvIGRlcHJpdmUgdGhlIG1lcmNlbmFyaWVzIG9mIHRoZWlyIHBheSwgYW5kIHRvIGVsZWN0IG90aGVyIGdlbmVyYWxzLCB0aHVzIHJpZGRpbmcgdGhlbXNlbHZlcyBvZiB0aGUgc2V2ZW50aWVzIG9mIERpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZSBwZW9wbGUsIGF0dGVtcHRpbmcsIGFzIGl0IHdlcmUsIHRvIHN0YW5kIGF0IG9uY2UgdXBvbiB0aGVpciBmZWV0IGFmdGVyIHRoZWlyIGxvbmcgc2lja25lc3Mgb2YgdHlyYW5ueSwgYW5kIHRvIGFjdCB0aGUgcGFydCBvZiBpbmRlcGVuZGVuY2Ugb3V0IG9mIHNlYXNvbiwgc3R1bWJsZWQgaW4gdGhlaXIgdW5kZXJ0YWtpbmdzLCBhbmQgeWV0IGhhdGVkIERpb24sIHdobywgbGlrZSBhIHBoeXNpY2lhbiwgd2lzaGVkIHRvIHN1YmplY3QgdGhlIGNpdHkgdG8gYSBzdHJpY3QgYW5kIHRlbXBlcmF0ZSByZWdpbWVuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyB0aGV5IG1ldCBpbiBhc3NlbWJseSB0byBhc3NpZ24gbmV3IGNvbW1hbmRzLCB0aGUgdGltZSBiZWluZyBtaWRzdW1tZXIsIGV4dHJhb3JkaW5hcnkgcGVhbHMgb2YgdGh1bmRlciBhbmQgZXZpbCBwb3J0ZW50cyBmcm9tIHRoZSBoZWF2ZW5zIG9jY3VycmVkIGZvciBmaWZ0ZWVuIGRheXMgdG9nZXRoZXIsIGFuZCBkaXNwZXJzZWQgdGhlIHBlb3BsZSwgd2hvc2Ugc3VwZXJzdGl0aW91cyBmZWFycyBwcmV2ZW50ZWQgdGhlbSBmcm9tIGFwcG9pbnRpbmcgb3RoZXIgZ2VuZXJhbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuLCBhZnRlciB3YWl0aW5nIGZvciBzZXR0bGVkIGZhaXIgd2VhdGhlciwgdGhlIHBvcHVsYXIgbGVhZGVycyB3ZXJlIHByb2NlZWRpbmcgdG8gaG9sZCB0aGUgZWxlY3Rpb25zLCBhIGRyYXVnaHQtb3gsIHdobyB3YXMgcXVpdGUgYWNjdXN0b21lZCB0byBjcm93ZHMsIGJ1dCBub3cgZm9yIHNvbWUgcmVhc29uIG9yIG90aGVyIGdvdCBhbmdyeSBhdCBoaXMgZHJpdmVyIGFuZCBicm9rZSBhd2F5IGZyb20gdGhlIHlva2UsIG1hZGUgYSBkYXNoIGZvciB0aGUgdGhlYXRyZSwgYW5kIGF0IG9uY2UgZGlzcGVyc2VkIGFuZCBzY2F0dGVyZWQgdGhlIHBlb3BsZSBpbiBkaXNvcmRlcmx5IGZsaWdodDsgdGhlbiBoZSByYW4sIHBsdW5naW5nIGFuZCB0aHJvd2luZyBldmVyeXRoaW5nIGludG8gY29uZnVzaW9uLCBvdmVyIGFzIG11Y2ggb2YgdGhlIHJlc3Qgb2YgdGhlIGNpdHkgYXMgdGhlIGVuZW15IGFmdGVyd2FyZHMgb2NjdXBpZWQuIEhvd2V2ZXIsIHRoZSBTeXJhY3VzYW5zIHBhaWQgbm8gaGVlZCB0byBhbGwgdGhpcywgYnV0IGVsZWN0ZWQgdHdlbnR5LWZpdmUgZ2VuZXJhbHMsIG9uZSBvZiB3aG9tIHdhcyBIZXJhY2xlaWRlczsgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+dGhleSBhbHNvIHNlbnQgc2VjcmV0bHkgYW5kIHdpdGhvdXQgaGlzIGtub3dsZWRnZSB0byBEaW9uJ3MgbWVyY2VuYXJpZXMsIGFuZCB0cmllZCB0byBnZXQgdGhlbSB0byBsZWF2ZSBoaXMgc2VydmljZSBhbmQgY29tZSBvdmVyIHRvIHRoZWlyIHNpZGUsIHByb21pc2luZyB0aGVtIGV2ZW4gYW4gZXF1YWxpdHkgb2YgY2l2aWMgcmlnaHRzLiBUaGV5LCBob3dldmVyLCB3b3VsZCBub3QgbGlzdGVuIHRvIHRoZXNlIHByb3Bvc2FscywgYnV0IHNob3dpbmcgZmlkZWxpdHkgYW5kIHplYWwsIHRvb2sgdGhlaXIgd2VhcG9ucyBpbiB0aGVpciBoYW5kcywgcHV0IERpb24gaW4gdGhlaXIgbWlkc3QsIGVuY29tcGFzc2VkIGhpbSBhYm91dCwgYW5kIHRyaWVkIHRvIGNvbmR1Y3QgaGltIG91dCBvZiB0aGUgY2l0eSwgZG9pbmcgdmlvbGVuY2UgdG8gbm8gb25lLCBidXQgcm91bmRseSByZXZpbGluZyB0aG9zZSB3aG9tIHRoZXkgZW5jb3VudGVyZWQgZm9yIHRoZWlyIGJhc2UgaW5ncmF0aXR1ZGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGNpdGl6ZW5zLCBzZWVpbmcgdGhhdCB0aGUgbWVyY2VuYXJpZXMgd2VyZSBmZXcgaW4gbnVtYmVyIGFuZCBkaWQgbm90IG9mZmVyIHRvIGF0dGFjaywgZGVzcGlzZWQgdGhlbSwgYW5kIGhhdmluZyBiZWNvbWUgZmFyIG1vcmUgbnVtZXJvdXMgdGhhbiB0aGV5LCBzZXQgdXBvbiB0aGVtLCB0aGlua2luZyB0byBvdmVycG93ZXIgdGhlbSBlYXNpbHkgYmVmb3JlIHRoZXkgZ290IG91dCBvZiB0aGUgY2l0eSwgYW1pZCBzbGF5IHRoZW0gYWxsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgdGhleSBtZXQgaW4gYXNzZW1ibHkgdG8gYXNzaWduIG5ldyBjb21tYW5kcywgdGhlIHRpbWUgYmVpbmcgbWlkc3VtbWVyLCBleHRyYW9yZGluYXJ5IHBlYWxzIG9mIHRodW5kZXIgYW5kIGV2aWwgcG9ydGVudHMgZnJvbSB0aGUgaGVhdmVucyBvY2N1cnJlZCBmb3IgZmlmdGVlbiBkYXlzIHRvZ2V0aGVyLCBhbmQgZGlzcGVyc2VkIHRoZSBwZW9wbGUsIHdob3NlIHN1cGVyc3RpdGlvdXMgZmVhcnMgcHJldmVudGVkIHRoZW0gZnJvbSBhcHBvaW50aW5nIG90aGVyIGdlbmVyYWxzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuLCBhZnRlciB3YWl0aW5nIGZvciBzZXR0bGVkIGZhaXIgd2VhdGhlciwgdGhlIHBvcHVsYXIgbGVhZGVycyB3ZXJlIHByb2NlZWRpbmcgdG8gaG9sZCB0aGUgZWxlY3Rpb25zLCBhIGRyYXVnaHQtb3gsIHdobyB3YXMgcXVpdGUgYWNjdXN0b21lZCB0byBjcm93ZHMsIGJ1dCBub3cgZm9yIHNvbWUgcmVhc29uIG9yIG90aGVyIGdvdCBhbmdyeSBhdCBoaXMgZHJpdmVyIGFuZCBicm9rZSBhd2F5IGZyb20gdGhlIHlva2UsIG1hZGUgYSBkYXNoIGZvciB0aGUgdGhlYXRyZSwgYW5kIGF0IG9uY2UgZGlzcGVyc2VkIGFuZCBzY2F0dGVyZWQgdGhlIHBlb3BsZSBpbiBkaXNvcmRlcmx5IGZsaWdodDsgdGhlbiBoZSByYW4sIHBsdW5naW5nIGFuZCB0aHJvd2luZyBldmVyeXRoaW5nIGludG8gY29uZnVzaW9uLCBvdmVyIGFzIG11Y2ggb2YgdGhlIHJlc3Qgb2YgdGhlIGNpdHkgYXMgdGhlIGVuZW15IGFmdGVyd2FyZHMgb2NjdXBpZWQuIEhvd2V2ZXIsIHRoZSBTeXJhY3VzYW5zIHBhaWQgbm8gaGVlZCB0byBhbGwgdGhpcywgYnV0IGVsZWN0ZWQgdHdlbnR5LWZpdmUgZ2VuZXJhbHMsIG9uZSBvZiB3aG9tIHdhcyBIZXJhY2xlaWRlczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZXkgYWxzbyBzZW50IHNlY3JldGx5IGFuZCB3aXRob3V0IGhpcyBrbm93bGVkZ2UgdG8gRGlvbidzIG1lcmNlbmFyaWVzLCBhbmQgdHJpZWQgdG8gZ2V0IHRoZW0gdG8gbGVhdmUgaGlzIHNlcnZpY2UgYW5kIGNvbWUgb3ZlciB0byB0aGVpciBzaWRlLCBwcm9taXNpbmcgdGhlbSBldmVuIGFuIGVxdWFsaXR5IG9mIGNpdmljIHJpZ2h0cy4gVGhleSwgaG93ZXZlciwgd291bGQgbm90IGxpc3RlbiB0byB0aGVzZSBwcm9wb3NhbHMsIGJ1dCBzaG93aW5nIGZpZGVsaXR5IGFuZCB6ZWFsLCB0b29rIHRoZWlyIHdlYXBvbnMgaW4gdGhlaXIgaGFuZHMsIHB1dCBEaW9uIGluIHRoZWlyIG1pZHN0LCBlbmNvbXBhc3NlZCBoaW0gYWJvdXQsIGFuZCB0cmllZCB0byBjb25kdWN0IGhpbSBvdXQgb2YgdGhlIGNpdHksIGRvaW5nIHZpb2xlbmNlIHRvIG5vIG9uZSwgYnV0IHJvdW5kbHkgcmV2aWxpbmcgdGhvc2Ugd2hvbSB0aGV5IGVuY291bnRlcmVkIGZvciB0aGVpciBiYXNlIGluZ3JhdGl0dWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIGNpdGl6ZW5zLCBzZWVpbmcgdGhhdCB0aGUgbWVyY2VuYXJpZXMgd2VyZSBmZXcgaW4gbnVtYmVyIGFuZCBkaWQgbm90IG9mZmVyIHRvIGF0dGFjaywgZGVzcGlzZWQgdGhlbSwgYW5kIGhhdmluZyBiZWNvbWUgZmFyIG1vcmUgbnVtZXJvdXMgdGhhbiB0aGV5LCBzZXQgdXBvbiB0aGVtLCB0aGlua2luZyB0byBvdmVycG93ZXIgdGhlbSBlYXNpbHkgYmVmb3JlIHRoZXkgZ290IG91dCBvZiB0aGUgY2l0eSwgYW1pZCBzbGF5IHRoZW0gYWxsLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IERpb24sIHNlZWluZyB0aGF0IGZvcnR1bmUgY29tcGVsbGVkIGhpbSBlaXRoZXIgdG8gZmlnaHQgYWdhaW5zdCBoaXMgZmVsbG93IGNpdGl6ZW5zIG9yIHBlcmlzaCB3aXRoIGhpcyBtZXJjZW5hcmllcywgZmVydmVudGx5IGJlc291Z2h0IHRoZSBTeXJhY3VzYW5zLCBzdHJldGNoaW5nIG91dCBoaXMgaGFuZHMgdG8gdGhlbSwgYW5kIHBvaW50aW5nIG91dCB0byB0aGVtIHRoZSBhY3JvcG9saXMsIHdoaWNoIHdhcyBmdWxsIG9mIGVuZW1pZXMgcGVlcmluZyBvdmVyIHRoZSB3YWxscyBhbmQgd2F0Y2hpbmcgd2hhdCB3YXMgZ29pbmcgb24gYmVsb3c7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBzaW5jZSBubyBlbnRyZWF0aWVzIGNvdWxkIHN0YXkgdGhlIG9uc2V0IG9mIHRoZSBtdWx0aXR1ZGVzLCBhbmQgdGhlIGNpdHksIGxpa2UgYSBzaGlwIGF0IHNlYSwgd2FzIGF0IHRoZSBtZXJjeSBvZiB0aGUgYmxhc3RzIG9mIGl0cyBkZW1hZ29ndWVzLCBoZSBvcmRlcmVkIGhpcyBtZXJjZW5hcmllcyBub3QgdG8gbWFrZSBhIGNoYXJnZSwgYnV0IHNpbXBseSB0byBydW4gdG93YXJkcyB0aGVpciBhc3NhaWxhbnRzIHdpdGggbG91ZCBjcmllcyBhbmQgYnJhbmRpc2hpbmcgb2Ygd2VhcG9uczsgd2hpY2ggYmVpbmcgZG9uZSwgbm90IGEgU3lyYWN1c2FuIHN0b29kIGhpcyBncm91bmQsIGJ1dCBhbGwgcHJvbXB0bHkgdG9vayB0byBmbGlnaHQgYWxvbmcgdGhlIHN0cmVldHMsIHdoZXJlIG5vbmUgcHVyc3VlZCB0aGVtLiBGb3IgRGlvbiBpbW1lZGlhdGVseSBvcmRlcmVkIGhpcyBtZW4gdG8gd2hlZWwgYWJvdXQsIGFuZCBsZWQgdGhlbSBmb3J0aCB0byBMZW9udGluaS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBEaW9uLCBzZWVpbmcgdGhhdCBmb3J0dW5lIGNvbXBlbGxlZCBoaW0gZWl0aGVyIHRvIGZpZ2h0IGFnYWluc3QgaGlzIGZlbGxvdyBjaXRpemVucyBvciBwZXJpc2ggd2l0aCBoaXMgbWVyY2VuYXJpZXMsIGZlcnZlbnRseSBiZXNvdWdodCB0aGUgU3lyYWN1c2Fucywgc3RyZXRjaGluZyBvdXQgaGlzIGhhbmRzIHRvIHRoZW0sIGFuZCBwb2ludGluZyBvdXQgdG8gdGhlbSB0aGUgYWNyb3BvbGlzLCB3aGljaCB3YXMgZnVsbCBvZiBlbmVtaWVzIHBlZXJpbmcgb3ZlciB0aGUgd2FsbHMgYW5kIHdhdGNoaW5nIHdoYXQgd2FzIGdvaW5nIG9uIGJlbG93OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBzaW5jZSBubyBlbnRyZWF0aWVzIGNvdWxkIHN0YXkgdGhlIG9uc2V0IG9mIHRoZSBtdWx0aXR1ZGVzLCBhbmQgdGhlIGNpdHksIGxpa2UgYSBzaGlwIGF0IHNlYSwgd2FzIGF0IHRoZSBtZXJjeSBvZiB0aGUgYmxhc3RzIG9mIGl0cyBkZW1hZ29ndWVzLCBoZSBvcmRlcmVkIGhpcyBtZXJjZW5hcmllcyBub3QgdG8gbWFrZSBhIGNoYXJnZSwgYnV0IHNpbXBseSB0byBydW4gdG93YXJkcyB0aGVpciBhc3NhaWxhbnRzIHdpdGggbG91ZCBjcmllcyBhbmQgYnJhbmRpc2hpbmcgb2Ygd2VhcG9uczsgd2hpY2ggYmVpbmcgZG9uZSwgbm90IGEgU3lyYWN1c2FuIHN0b29kIGhpcyBncm91bmQsIGJ1dCBhbGwgcHJvbXB0bHkgdG9vayB0byBmbGlnaHQgYWxvbmcgdGhlIHN0cmVldHMsIHdoZXJlIG5vbmUgcHVyc3VlZCB0aGVtLiBGb3IgRGlvbiBpbW1lZGlhdGVseSBvcmRlcmVkIGhpcyBtZW4gdG8gd2hlZWwgYWJvdXQsIGFuZCBsZWQgdGhlbSBmb3J0aCB0byBMZW9udGluaS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBsZWFkZXJzIG9mIHRoZSBTeXJhY3VzYW5zLCBub3cgdGhhdCB0aGV5IHdlcmUgYmVjb21lIGEgbGF1Z2hpbmctc3RvY2sgZm9yIHRoZSB3b21lbiwgc291Z2h0IHRvIHJlZGVlbSB0aGVpciBkaXNncmFjZSwgYXJtZWQgdGhlIGNpdGl6ZW5zIGFnYWluLCBhbmQgcHVyc3VlZCBhZnRlciBEaW9uLiBUaGV5IGNhbWUgdXBvbiBoaW0gYXMgaGUgd2FzIGNyb3NzaW5nIGEgcml2ZXIsIGFuZCB0aGVpciBob3JzZW1lbiByb2RlIHVwIGZvciBhIHNraXJtaXNoOyBidXQgd2hlbiB0aGV5IHNhdyB0aGF0IGhlIG5vIGxvbmdlciBib3JlIHdpdGggdGhlaXIgZmF1bHRzIGluIGEgbWlsZCBhbmQgcGF0ZXJuYWwgc3Bpcml0LCBidXQgd2FzIGFuZ3JpbHkgd2hlZWxpbmcgaGlzIG1lcmNlbmFyaWVzIGFib3V0IGFuZCBwdXR0aW5nIHRoZW0gaW4gYmF0dGxlIGFycmF5LCB0aGV5IGJyb2tlIGludG8gYSBtb3JlIGRpc2dyYWNlZnVsIGZsaWdodCB0aGFuIGJlZm9yZSwgYW5kIHJldGlyZWQgaW50byB0aGUgY2l0eSwgd2l0aCB0aGUgbG9zcyBvZiBhIGZldyBtZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbGVhZGVycyBvZiB0aGUgU3lyYWN1c2Fucywgbm93IHRoYXQgdGhleSB3ZXJlIGJlY29tZSBhIGxhdWdoaW5nLXN0b2NrIGZvciB0aGUgd29tZW4sIHNvdWdodCB0byByZWRlZW0gdGhlaXIgZGlzZ3JhY2UsIGFybWVkIHRoZSBjaXRpemVucyBhZ2FpbiwgYW5kIHB1cnN1ZWQgYWZ0ZXIgRGlvbi4gVGhleSBjYW1lIHVwb24gaGltIGFzIGhlIHdhcyBjcm9zc2luZyBhIHJpdmVyLCBhbmQgdGhlaXIgaG9yc2VtZW4gcm9kZSB1cCBmb3IgYSBza2lybWlzaDsgYnV0IHdoZW4gdGhleSBzYXcgdGhhdCBoZSBubyBsb25nZXIgYm9yZSB3aXRoIHRoZWlyIGZhdWx0cyBpbiBhIG1pbGQgYW5kIHBhdGVybmFsIHNwaXJpdCwgYnV0IHdhcyBhbmdyaWx5IHdoZWVsaW5nIGhpcyBtZXJjZW5hcmllcyBhYm91dCBhbmQgcHV0dGluZyB0aGVtIGluIGJhdHRsZSBhcnJheSwgdGhleSBicm9rZSBpbnRvIGEgbW9yZSBkaXNncmFjZWZ1bCBmbGlnaHQgdGhhbiBiZWZvcmUsIGFuZCByZXRpcmVkIGludG8gdGhlIGNpdHksIHdpdGggdGhlIGxvc3Mgb2YgYSBmZXcgbWVuLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgTGVvbnRpbmVzIHJlY2VpdmVkIERpb24gd2l0aCBzcGxlbmRpZCBob25vdXJzLCB0b29rIGhpcyBtZXJjZW5hcmllcyBpbnRvIHRoZWlyIHNlcnZpY2UsIGFuZCBnYXZlIHRoZW0gY2l2aWMgcmlnaHRzOyB0aGV5IGFsc28gc2VudCBhbiBlbWJhc3N5IHRvIHRoZSBTeXJhY3VzYW5zIHdpdGggYSBkZW1hbmQgdGhhdCB0aGV5IHNob3VsZCBkbyB0aGUgbWVyY2VuYXJpZXMganVzdGljZS4gVGhlIFN5cmFjdXNhbnMsIGhvd2V2ZXIsIHNlbnQgZW52b3lzIHRvIGRlbm91bmNlIERpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGFsbCB0aGUgY29uZmVkZXJhdGVzIGhhZCBhc3NlbWJsZWQgYXQgTGVvbnRpbmkgYW5kIGRpc2N1c3NlZCB0aGUgbWF0dGVyLCBpdCB3YXMgZGVjaWRlZCB0aGF0IHRoZSBTeXJhY3VzYW5zIHdlcmUgaW4gdGhlIHdyb25nLiBCeSB0aGlzIGRlY2lzaW9uIG9mIHRoZWlyIGNvbmZlZGVyYXRlcywgaG93ZXZlciwgdGhlIFN5cmFjdXNhbnMgd291bGQgbm90IGFiaWRlLCBiZWluZyBub3cgaW5zb2xlbnQgYW5kIGZ1bGwgb2YgcHJpZGUgYmVjYXVzZSB0aGV5IHdlcmUgc3ViamVjdCB0byBubyBvbmUsIGJ1dCBoYWQgZ2VuZXJhbHMgd2hvIHdlcmUgaW4gc2xhdmlzaCBmZWFyIG9mIHRoZSBwZW9wbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIExlb250aW5lcyByZWNlaXZlZCBEaW9uIHdpdGggc3BsZW5kaWQgaG9ub3VycywgdG9vayBoaXMgbWVyY2VuYXJpZXMgaW50byB0aGVpciBzZXJ2aWNlLCBhbmQgZ2F2ZSB0aGVtIGNpdmljIHJpZ2h0czsgdGhleSBhbHNvIHNlbnQgYW4gZW1iYXNzeSB0byB0aGUgU3lyYWN1c2FucyB3aXRoIGEgZGVtYW5kIHRoYXQgdGhleSBzaG91bGQgZG8gdGhlIG1lcmNlbmFyaWVzIGp1c3RpY2UuIFRoZSBTeXJhY3VzYW5zLCBob3dldmVyLCBzZW50IGVudm95cyB0byBkZW5vdW5jZSBEaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGFsbCB0aGUgY29uZmVkZXJhdGVzIGhhZCBhc3NlbWJsZWQgYXQgTGVvbnRpbmkgYW5kIGRpc2N1c3NlZCB0aGUgbWF0dGVyLCBpdCB3YXMgZGVjaWRlZCB0aGF0IHRoZSBTeXJhY3VzYW5zIHdlcmUgaW4gdGhlIHdyb25nLiBCeSB0aGlzIGRlY2lzaW9uIG9mIHRoZWlyIGNvbmZlZGVyYXRlcywgaG93ZXZlciwgdGhlIFN5cmFjdXNhbnMgd291bGQgbm90IGFiaWRlLCBiZWluZyBub3cgaW5zb2xlbnQgYW5kIGZ1bGwgb2YgcHJpZGUgYmVjYXVzZSB0aGV5IHdlcmUgc3ViamVjdCB0byBubyBvbmUsIGJ1dCBoYWQgZ2VuZXJhbHMgd2hvIHdlcmUgaW4gc2xhdmlzaCBmZWFyIG9mIHRoZSBwZW9wbGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHRoZXJlIHB1dCBpbiBhdCB0aGUgY2l0eSB0cmlyZW1lcyBmcm9tIERpb255c2l1cywgdW5kZXIgdGhlIGNvbW1hbmQgb2YgTnlwc2l1cyB0aGUgTmVhcG9saXRhbiwgd2hvIGJyb3VnaHQgZm9vZCBhbmQgbW9uZXkgZm9yIHRoZSBiZWxlYWd1ZXJlZCBnYXJyaXNvbiBvZiB0aGUgYWNyb3BvbGlzLiBJbiBhIG5hdmFsIGJhdHRsZSB0aGF0IGVuc3VlZCB0aGUgU3lyYWN1c2FucyB3ZXJlIGluZGVlZCB2aWN0b3Jpb3VzLCBhbmQgY2FwdHVyZWQgZm91ciBvZiB0aGUgdHlyYW50J3Mgc2hpcHMsIGJ1dCB0aGV5IHdlcmUgbWFkZSB3YW50b24gYnkgdGhlaXIgdmljdG9yeSwgYW5kIGluIHRoZWlyIHV0dGVyIGxhY2sgb2YgZGlzY2lwbGluZSB0dXJuZWQgdGhlaXIgcmVqb2ljaW5nIGludG8gZHJpbmtpbmctYm91dHMgYW5kIG1hZCBjYXJvdXNhbHMsIGFuZCB3ZXJlIHNvIG5lZ2xlY3RmdWwgb2YgdGhlaXIgcmVhbCBpbnRlcmVzdHMgdGhhdCwgd2hlbiB0aGV5IHRob3VnaHQgdGhlbXNlbHZlcyBhbHJlYWR5IGluIHBvc3Nlc3Npb24gb2YgdGhlIGFjcm9wb2xpcywgdGhleSBhY3R1YWxseSBsb3N0IGJvdGggaXQgYW5kIHRoZWlyIGNpdHkgYmVzaWRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIE55cHNpdXMsIHNlZWluZyBubyBzYXZpbmcgcmVtbmFudCBpbiB0aGUgY2l0eSwgYnV0IHRoZSBtdWx0aXR1ZGUgZ2l2ZW4gb3ZlciB0byBtdXNpYyBhbmQgcmV2ZWxyeSBmcm9tIGRhd24gdGlsbCBtaWRuaWdodCwgYW5kIHRoZWlyIGdlbmVyYWxzIGRlbGlnaHRlZCB3aXRoIHRoaXMgZmVzdGl2aXR5IGFuZCByZWx1Y3RhbnQgdG8gdXNlIGNvbXB1bHNpb24gd2l0aCBtZW4gaW4gdGhlaXIgY3VwcywgbWFkZSB0aGUgYmVzdCB1c2Ugb2YgaGlzIG9wcG9ydHVuaXR5IGFuZCBhdHRhY2tlZCB0aGVpciBzaWVnZS13b3JrcywgYW5kIGhhdmluZyBtYXN0ZXJlZCB0aGVzZSBhbmQgYnJva2VuIHRoZW0gZG93biwgaGUgbGV0IGhpcyBCYXJiYXJpYW5zIGxvb3NlIHVwb24gdGhlIGNpdHksIGJpZGRpbmcgdGhlbSB0cmVhdCB0aG9zZSB3aG9tIHRoZXkgZW5jb3VudGVyZWQgYXMgdGhleSBjb3VsZCBhbmQgd291bGQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlF1aWNrbHksIHRoZW4sIHdlcmUgdGhlIFN5cmFjdXNhbnMgYXdhcmUgb2YgdGhlIG1pc2NoaWVmLCBidXQgc2xvd2x5IGFuZCB3aXRoIGRpZmZpY3VsdHkgZGlkIHRoZXkgcmFsbHkgdG8gb3Bwb3NlIGl0LCBzbyB1dHRlcmx5IGRpc3RyYWN0ZWQgd2VyZSB0aGV5LiBGb3IgaXQgd2FzIGEgc2FjayBvZiB0aGUgY2l0eSB0aGF0IHdhcyBub3cgZ29pbmcgb24sIGl0cyBtZW4gYmVpbmcgc2xhaW4sIGl0cyB3YWxscyB0b3JuIGRvd24sIGFuZCBpdHMgd29tZW4gYW5kIGNoaWxkcmVuIGRyYWdnZWQgc2hyaWVraW5nIHRvIHRoZSBhY3JvcG9saXMsIHdoaWxlIGl0cyBnZW5lcmFscyBnYXZlIHVwIGFsbCBmb3IgbG9zdCBhbmQgd2VyZSB1bmFibGUgdG8gZW1wbG95IHRoZSBjaXRpemVucyBhZ2FpbnN0IHRoZSBlbmVteSwgd2hvIHdlcmUgZXZlcnl3aGVyZSBpbmV4dHJpY2FibHkgbWluZ2xlZCB3aXRoIHRoZW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgdGhlcmUgcHV0IGluIGF0IHRoZSBjaXR5IHRyaXJlbWVzIGZyb20gRGlvbnlzaXVzLCB1bmRlciB0aGUgY29tbWFuZCBvZiBOeXBzaXVzIHRoZSBOZWFwb2xpdGFuLCB3aG8gYnJvdWdodCBmb29kIGFuZCBtb25leSBmb3IgdGhlIGJlbGVhZ3VlcmVkIGdhcnJpc29uIG9mIHRoZSBhY3JvcG9saXMuIEluIGEgbmF2YWwgYmF0dGxlIHRoYXQgZW5zdWVkIHRoZSBTeXJhY3VzYW5zIHdlcmUgaW5kZWVkIHZpY3RvcmlvdXMsIGFuZCBjYXB0dXJlZCBmb3VyIG9mIHRoZSB0eXJhbnQncyBzaGlwcywgYnV0IHRoZXkgd2VyZSBtYWRlIHdhbnRvbiBieSB0aGVpciB2aWN0b3J5LCBhbmQgaW4gdGhlaXIgdXR0ZXIgbGFjayBvZiBkaXNjaXBsaW5lIHR1cm5lZCB0aGVpciByZWpvaWNpbmcgaW50byBkcmlua2luZy1ib3V0cyBhbmQgbWFkIGNhcm91c2FscywgYW5kIHdlcmUgc28gbmVnbGVjdGZ1bCBvZiB0aGVpciByZWFsIGludGVyZXN0cyB0aGF0LCB3aGVuIHRoZXkgdGhvdWdodCB0aGVtc2VsdmVzIGFscmVhZHkgaW4gcG9zc2Vzc2lvbiBvZiB0aGUgYWNyb3BvbGlzLCB0aGV5IGFjdHVhbGx5IGxvc3QgYm90aCBpdCBhbmQgdGhlaXIgY2l0eSBiZXNpZGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBOeXBzaXVzLCBzZWVpbmcgbm8gc2F2aW5nIHJlbW5hbnQgaW4gdGhlIGNpdHksIGJ1dCB0aGUgbXVsdGl0dWRlIGdpdmVuIG92ZXIgdG8gbXVzaWMgYW5kIHJldmVscnkgZnJvbSBkYXduIHRpbGwgbWlkbmlnaHQsIGFuZCB0aGVpciBnZW5lcmFscyBkZWxpZ2h0ZWQgd2l0aCB0aGlzIGZlc3Rpdml0eSBhbmQgcmVsdWN0YW50IHRvIHVzZSBjb21wdWxzaW9uIHdpdGggbWVuIGluIHRoZWlyIGN1cHMsIG1hZGUgdGhlIGJlc3QgdXNlIG9mIGhpcyBvcHBvcnR1bml0eSBhbmQgYXR0YWNrZWQgdGhlaXIgc2llZ2Utd29ya3MsIGFuZCBoYXZpbmcgbWFzdGVyZWQgdGhlc2UgYW5kIGJyb2tlbiB0aGVtIGRvd24sIGhlIGxldCBoaXMgQmFyYmFyaWFucyBsb29zZSB1cG9uIHRoZSBjaXR5LCBiaWRkaW5nIHRoZW0gdHJlYXQgdGhvc2Ugd2hvbSB0aGV5IGVuY291bnRlcmVkIGFzIHRoZXkgY291bGQgYW5kIHdvdWxkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlF1aWNrbHksIHRoZW4sIHdlcmUgdGhlIFN5cmFjdXNhbnMgYXdhcmUgb2YgdGhlIG1pc2NoaWVmLCBidXQgc2xvd2x5IGFuZCB3aXRoIGRpZmZpY3VsdHkgZGlkIHRoZXkgcmFsbHkgdG8gb3Bwb3NlIGl0LCBzbyB1dHRlcmx5IGRpc3RyYWN0ZWQgd2VyZSB0aGV5LiBGb3IgaXQgd2FzIGEgc2FjayBvZiB0aGUgY2l0eSB0aGF0IHdhcyBub3cgZ29pbmcgb24sIGl0cyBtZW4gYmVpbmcgc2xhaW4sIGl0cyB3YWxscyB0b3JuIGRvd24sIGFuZCBpdHMgd29tZW4gYW5kIGNoaWxkcmVuIGRyYWdnZWQgc2hyaWVraW5nIHRvIHRoZSBhY3JvcG9saXMsIHdoaWxlIGl0cyBnZW5lcmFscyBnYXZlIHVwIGFsbCBmb3IgbG9zdCBhbmQgd2VyZSB1bmFibGUgdG8gZW1wbG95IHRoZSBjaXRpemVucyBhZ2FpbnN0IHRoZSBlbmVteSwgd2hvIHdlcmUgZXZlcnl3aGVyZSBpbmV4dHJpY2FibHkgbWluZ2xlZCB3aXRoIHRoZW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHRoZSBjaXR5IHdhcyBpbiB0aGlzIHBsaWdodCBhbmQgdGhlIEFjaHJhZGluYSBpbiBpbW1pbmVudCBwZXJpbCwgYWxsIGtuZXcgd2hvIHdhcyB0aGUgb25seSBtYW4gbGVmdCB1cG9uIHdob20gdGhleSBjb3VsZCBmYXN0ZW4gdGhlaXIgaG9wZXMsIGJ1dCBubyBvbmUgc3Bva2UgaGlzIG5hbWUsIGJlY2F1c2UgdGhleSB3ZXJlIGFzaGFtZWQgb2YgdGhlaXIgaW5ncmF0aXR1ZGUgYW5kIGZvbGx5IHRvd2FyZHMgRGlvbi4gSG93ZXZlciwgbm93IHRoYXQgbmVjZXNzaXR5IGNvbnN0cmFpbmVkIHRoZW0sIHNvbWUgb2YgdGhlIGFsbGllcyBhbmQgaG9yc2VtZW4gY3JpZWQgb3V0IHRoYXQgRGlvbiBhbmQgaGlzIFBlbG9wb25uZXNpYW5zIHNob3VsZCBiZSBzdW1tb25lZCBmcm9tIExlb250aW5pLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIHRoaXMgdmVudHVyZSB3YXMgbWFkZSBhbmQgdGhlIG5hbWUgaGVhcmQsIHRoZSBTeXJhY3VzYW5zIGZlbGwgdG8gc2hvdXRpbmcgYW5kIHdlZXBpbmcgZm9yIGpveTsgdGhleSBwcmF5ZWQgdGhhdCBEaW9uIG1pZ2h0IGFwcGVhciB1cG9uIHRoZSBzY2VuZSwgYW5kIHllYXJuZWQgZm9yIHRoZSBzaWdodCBvZiBoaW0sIGFuZCBjYWxsZWQgdG8gbWluZCBoaXMgYXJkb3VyIGFuZCB2aWdvdXIgaW4gdGhlIHByZXNlbmNlIG9mIGRhbmdlciwgcmVtZW1iZXJpbmcgdGhhdCBoZSB3YXMgbm90IG9ubHkgdW5kYXVudGVkIGhpbXNlbGYsIGJ1dCBtYWRlIHRoZW0gYWxzbyBib2xkIGFuZCBmZWFybGVzcyBpbiBlbmdhZ2luZyB0aGVpciBlbmVtaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbW1lZGlhdGVseSwgdGhlcmVmb3JlLCB0aGV5IHNlbnQgYSBkZWxlZ2F0aW9uIHRvIGhpbSwgQXJjaG9uaWRlcyBhbmQgVGVsZXNpZGVzIGZyb20gdGhlIGFsbGllcywgYW5kIEhlbGxhbmljdXMgd2l0aCBmb3VyIG90aGVycyBmcm9tIHRoZSBob3JzZW1lbi4gVGhlc2UsIHNlbmRpbmcgdGhlaXIgaG9yc2VzIG92ZXIgdGhlIHJvYWQgYXQgZnVsbCBnYWxsb3AsIGNhbWUgdG8gTGVvbnRpbmkganVzdCBhcyB0aGUgc3VuIHdhcyBzZXR0aW5nLiBUaGVuLCBsZWFwaW5nIGZyb20gdGhlaXIgaG9yc2VzIGFuZCB0aHJvd2luZyB0aGVtc2VsdmVzIGF0IHRoZSBmZWV0IG9mIERpb24gZmlyc3Qgb2YgYWxsLCB3aXRoIHN0cmVhbWluZyBleWVzIHRoZXkgdG9sZCBoaW0gdGhlIGNhbGFtaXRpZXMgb2YgdGhlIFN5cmFjdXNhbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSwgdG9vLCBzb21lIG9mIHRoZSBMZW9udGluZXMgY2FtZSB1cCBhbmQgbWFueSBvZiB0aGUgUGVsb3Bvbm5lc2lhbnMgZ2F0aGVyZWQgYWJvdXQgRGlvbiwgY29uamVjdHVyaW5nIGZyb20gdGhlIGhhc3RlIGFuZCBzdXBwbGlhbnQgYWRkcmVzcyBvZiB0aGUgbWVuIHRoYXQgc29tZXRoaW5nIHF1aXRlIGV4dHJhb3JkaW5hcnkgd2FzIHRoZSBtYXR0ZXIuIEF0IG9uY2UsIHRoZW4sIERpb24gbGVkIGhpcyB2aXNpdG9ycyB0byB0aGUgcGxhY2Ugb2YgYXNzZW1ibHksIHRoZSBwZW9wbGUgZWFnZXJseSBnYXRoZXJlZCB0aGVyZSwgQXJjaG9uaWRlcyBhbmQgSGVsbGFuaWN1cyB3aXRoIHRoZWlyIGNvbXBhbmlvbnMgY2FtZSBiZWZvcmUgdGhlbSwgcmVwb3J0ZWQgdG8gdGhlbSBicmllZmx5IHRoZSBncmVhdCBkaXNhc3RlciwgYW5kIGNhbGxlZCB1cG9uIHRoZSBtZXJjZW5hcmllcyB0byBwdXQgYXdheSB0aGVpciBmZWVsaW5ncyBvZiByZXNlbnRtZW50IGFuZCBjb21lIHRvIHRoZSBhaWQgb2YgdGhlIFN5cmFjdXNhbnMsIHNpbmNlIHRob3NlIHdobyBoYWQgd3JvbmdlZCB0aGVtIGhhZCBzdWZmZXJlZCBhIGhlYXZpZXIgcHVuaXNobWVudCB0aGFuIHRob3NlIHdobyBoYWQgYmVlbiB3cm9uZ2VkIHdvdWxkIGhhdmUgdGhvdWdodCBpdCByaWdodCB0byBleGFjdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhlIGNpdHkgd2FzIGluIHRoaXMgcGxpZ2h0IGFuZCB0aGUgQWNocmFkaW5hIGluIGltbWluZW50IHBlcmlsLCBhbGwga25ldyB3aG8gd2FzIHRoZSBvbmx5IG1hbiBsZWZ0IHVwb24gd2hvbSB0aGV5IGNvdWxkIGZhc3RlbiB0aGVpciBob3BlcywgYnV0IG5vIG9uZSBzcG9rZSBoaXMgbmFtZSwgYmVjYXVzZSB0aGV5IHdlcmUgYXNoYW1lZCBvZiB0aGVpciBpbmdyYXRpdHVkZSBhbmQgZm9sbHkgdG93YXJkcyBEaW9uLiBIb3dldmVyLCBub3cgdGhhdCBuZWNlc3NpdHkgY29uc3RyYWluZWQgdGhlbSwgc29tZSBvZiB0aGUgYWxsaWVzIGFuZCBob3JzZW1lbiBjcmllZCBvdXQgdGhhdCBEaW9uIGFuZCBoaXMgUGVsb3Bvbm5lc2lhbnMgc2hvdWxkIGJlIHN1bW1vbmVkIGZyb20gTGVvbnRpbmkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIHNvb24gYXMgdGhpcyB2ZW50dXJlIHdhcyBtYWRlIGFuZCB0aGUgbmFtZSBoZWFyZCwgdGhlIFN5cmFjdXNhbnMgZmVsbCB0byBzaG91dGluZyBhbmQgd2VlcGluZyBmb3Igam95OyB0aGV5IHByYXllZCB0aGF0IERpb24gbWlnaHQgYXBwZWFyIHVwb24gdGhlIHNjZW5lLCBhbmQgeWVhcm5lZCBmb3IgdGhlIHNpZ2h0IG9mIGhpbSwgYW5kIGNhbGxlZCB0byBtaW5kIGhpcyBhcmRvdXIgYW5kIHZpZ291ciBpbiB0aGUgcHJlc2VuY2Ugb2YgZGFuZ2VyLCByZW1lbWJlcmluZyB0aGF0IGhlIHdhcyBub3Qgb25seSB1bmRhdW50ZWQgaGltc2VsZiwgYnV0IG1hZGUgdGhlbSBhbHNvIGJvbGQgYW5kIGZlYXJsZXNzIGluIGVuZ2FnaW5nIHRoZWlyIGVuZW1pZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkltbWVkaWF0ZWx5LCB0aGVyZWZvcmUsIHRoZXkgc2VudCBhIGRlbGVnYXRpb24gdG8gaGltLCBBcmNob25pZGVzIGFuZCBUZWxlc2lkZXMgZnJvbSB0aGUgYWxsaWVzLCBhbmQgSGVsbGFuaWN1cyB3aXRoIGZvdXIgb3RoZXJzIGZyb20gdGhlIGhvcnNlbWVuLiBUaGVzZSwgc2VuZGluZyB0aGVpciBob3JzZXMgb3ZlciB0aGUgcm9hZCBhdCBmdWxsIGdhbGxvcCwgY2FtZSB0byBMZW9udGluaSBqdXN0IGFzIHRoZSBzdW4gd2FzIHNldHRpbmcuIFRoZW4sIGxlYXBpbmcgZnJvbSB0aGVpciBob3JzZXMgYW5kIHRocm93aW5nIHRoZW1zZWx2ZXMgYXQgdGhlIGZlZXQgb2YgRGlvbiBmaXJzdCBvZiBhbGwsIHdpdGggc3RyZWFtaW5nIGV5ZXMgdGhleSB0b2xkIGhpbSB0aGUgY2FsYW1pdGllcyBvZiB0aGUgU3lyYWN1c2Fucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlByZXNlbnRseSwgdG9vLCBzb21lIG9mIHRoZSBMZW9udGluZXMgY2FtZSB1cCBhbmQgbWFueSBvZiB0aGUgUGVsb3Bvbm5lc2lhbnMgZ2F0aGVyZWQgYWJvdXQgRGlvbiwgY29uamVjdHVyaW5nIGZyb20gdGhlIGhhc3RlIGFuZCBzdXBwbGlhbnQgYWRkcmVzcyBvZiB0aGUgbWVuIHRoYXQgc29tZXRoaW5nIHF1aXRlIGV4dHJhb3JkaW5hcnkgd2FzIHRoZSBtYXR0ZXIuIEF0IG9uY2UsIHRoZW4sIERpb24gbGVkIGhpcyB2aXNpdG9ycyB0byB0aGUgcGxhY2Ugb2YgYXNzZW1ibHksIHRoZSBwZW9wbGUgZWFnZXJseSBnYXRoZXJlZCB0aGVyZSwgQXJjaG9uaWRlcyBhbmQgSGVsbGFuaWN1cyB3aXRoIHRoZWlyIGNvbXBhbmlvbnMgY2FtZSBiZWZvcmUgdGhlbSwgcmVwb3J0ZWQgdG8gdGhlbSBicmllZmx5IHRoZSBncmVhdCBkaXNhc3RlciwgYW5kIGNhbGxlZCB1cG9uIHRoZSBtZXJjZW5hcmllcyB0byBwdXQgYXdheSB0aGVpciBmZWVsaW5ncyBvZiByZXNlbnRtZW50IGFuZCBjb21lIHRvIHRoZSBhaWQgb2YgdGhlIFN5cmFjdXNhbnMsIHNpbmNlIHRob3NlIHdobyBoYWQgd3JvbmdlZCB0aGVtIGhhZCBzdWZmZXJlZCBhIGhlYXZpZXIgcHVuaXNobWVudCB0aGFuIHRob3NlIHdobyBoYWQgYmVlbiB3cm9uZ2VkIHdvdWxkIGhhdmUgdGhvdWdodCBpdCByaWdodCB0byBleGFjdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgbWVzc2VuZ2VycyBoYWQgbWFkZSBhbiBlbmQgb2Ygc3BlYWtpbmcsIHRoZXJlIHdhcyBhIHByb2ZvdW5kIHNpbGVuY2UgaW4gdGhlIHRoZWF0cmU7IHRoZW4gRGlvbiByb3NlIGFuZCBiZWdhbiB0byBzcGVhaywgYnV0IGNvcGlvdXMgdGVhcnMgY2hlY2tlZCBoaXMgdXR0ZXJhbmNlOyBoaXMgbWVyY2VuYXJpZXMsIGhvd2V2ZXIsIHN5bXBhdGhpemVkIHdpdGggaGltIGFuZCBiYWRlIGhpbSB0YWtlIGhlYXJ0LiBBY2NvcmRpbmdseSwgYWZ0ZXIgaGUgaGFkIHJlY292ZXJlZCBhIGxpdHRsZSBmcm9tIGhpcyBncmllZiwgaGUgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NZW4gb2YgUGVsb3Bvbm5lc3VzIGFuZCBhbGxpZXMsIEkgaGF2ZSBicm91Z2h0IHlvdSB0b2dldGhlciBoZXJlIHRvIGRlbGliZXJhdGUgdXBvbiB5b3VyIG93biBjb3Vyc2Ugb2YgYWN0aW9uLiAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIG1lLCBpdCBpcyBub3QgbWVldCB0aGF0IEkgc2hvdWxkIGNvbnN1bHQgbXkgb3duIGludGVyZXN0cyBub3cgdGhhdCBTeXJhY3VzZSBpcyBwZXJpc2hpbmcsIGJ1dCBpZiBJIGNhbm5vdCBzYXZlIGhlciwgSSBzaGFsbCByZXR1cm4gdG8gc2VlayBhIGdyYXZlIGFtaWQgdGhlIGJsYXppbmcgcnVpbnMgb2YgbXkgbmF0aXZlIGNpdHkuIEJ1dCB5b3UsIGlmIHlvdSBhcmUgd2lsbGluZyBldmVuIG5vdywgYWZ0ZXIgYWxsIHRoYXQgaGFzIHBhc3NlZCwgdG8gY29tZSB0byBvdXIgaGVscCwgd2hvIGFyZSB0aGUgbW9zdCBmb29saXNoIGFuZCB0aGUgbW9zdCB1bmZvcnR1bmF0ZSBvZiBtZW4sIHByYXkgcmVzdG9yZSB0aGUgY2l0eSBvZiBTeXJhY3VzZSBhbmQgdGhlIHdvcmsgb2YgeW91ciBvd24gaGFuZHMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3lyYWN1c2Ugd2FzIGNvbG9uaXplZCBmcm9tIENvcmludGgsIGluIFBlbG9wb25uZXN1cy48L25vdGU+IElmLCBob3dldmVyLCBpbiB5b3VyIGRpc3BsZWFzdXJlIGF0IHRoZSBTeXJhY3VzYW5zLCB5b3Ugc2hhbGwgbGVhdmUgdGhlbSB0byB0aGVpciBmYXRlLCBhdCBsZWFzdCBmb3IgeW91ciBmb3JtZXIgYnJhdmVyeSBhbmQgemVhbCBpbiBteSBiZWhhbGYgbWF5IHlvdSBvYnRhaW4gYSB3b3J0aHkgcmV3YXJkIGZyb20gdGhlIGdvZHMsIGFuZCBtYXkgeW91IHRoaW5rIG9mIERpb24gYXMgb25lIHdobyBhYmFuZG9uZWQgbmVpdGhlciB5b3Ugd2hlbiB5b3Ugd2VyZSB3cm9uZ2VkLCBub3IsIGFmdGVyd2FyZHMsIGhpcyBmZWxsb3cgY2l0aXplbnMgd2hlbiB0aGV5IHdlcmUgaW4gZGlzdHJlc3MuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgbWVzc2VuZ2VycyBoYWQgbWFkZSBhbiBlbmQgb2Ygc3BlYWtpbmcsIHRoZXJlIHdhcyBhIHByb2ZvdW5kIHNpbGVuY2UgaW4gdGhlIHRoZWF0cmU7IHRoZW4gRGlvbiByb3NlIGFuZCBiZWdhbiB0byBzcGVhaywgYnV0IGNvcGlvdXMgdGVhcnMgY2hlY2tlZCBoaXMgdXR0ZXJhbmNlOyBoaXMgbWVyY2VuYXJpZXMsIGhvd2V2ZXIsIHN5bXBhdGhpemVkIHdpdGggaGltIGFuZCBiYWRlIGhpbSB0YWtlIGhlYXJ0LiBBY2NvcmRpbmdseSwgYWZ0ZXIgaGUgaGFkIHJlY292ZXJlZCBhIGxpdHRsZSBmcm9tIGhpcyBncmllZiwgaGUgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1lbiBvZiBQZWxvcG9ubmVzdXMgYW5kIGFsbGllcywgSSBoYXZlIGJyb3VnaHQgeW91IHRvZ2V0aGVyIGhlcmUgdG8gZGVsaWJlcmF0ZSB1cG9uIHlvdXIgb3duIGNvdXJzZSBvZiBhY3Rpb24uIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBtZSwgaXQgaXMgbm90IG1lZXQgdGhhdCBJIHNob3VsZCBjb25zdWx0IG15IG93biBpbnRlcmVzdHMgbm93IHRoYXQgU3lyYWN1c2UgaXMgcGVyaXNoaW5nLCBidXQgaWYgSSBjYW5ub3Qgc2F2ZSBoZXIsIEkgc2hhbGwgcmV0dXJuIHRvIHNlZWsgYSBncmF2ZSBhbWlkIHRoZSBibGF6aW5nIHJ1aW5zIG9mIG15IG5hdGl2ZSBjaXR5LiBCdXQgeW91LCBpZiB5b3UgYXJlIHdpbGxpbmcgZXZlbiBub3csIGFmdGVyIGFsbCB0aGF0IGhhcyBwYXNzZWQsIHRvIGNvbWUgdG8gb3VyIGhlbHAsIHdobyBhcmUgdGhlIG1vc3QgZm9vbGlzaCBhbmQgdGhlIG1vc3QgdW5mb3J0dW5hdGUgb2YgbWVuLCBwcmF5IHJlc3RvcmUgdGhlIGNpdHkgb2YgU3lyYWN1c2UgYW5kIHRoZSB3b3JrIG9mIHlvdXIgb3duIGhhbmRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlN5cmFjdXNlIHdhcyBjb2xvbml6ZWQgZnJvbSBDb3JpbnRoLCBpbiBQZWxvcG9ubmVzdXMuPC9ub3RlPiBJZiwgaG93ZXZlciwgaW4geW91ciBkaXNwbGVhc3VyZSBhdCB0aGUgU3lyYWN1c2FucywgeW91IHNoYWxsIGxlYXZlIHRoZW0gdG8gdGhlaXIgZmF0ZSwgYXQgbGVhc3QgZm9yIHlvdXIgZm9ybWVyIGJyYXZlcnkgYW5kIHplYWwgaW4gbXkgYmVoYWxmIG1heSB5b3Ugb2J0YWluIGEgd29ydGh5IHJld2FyZCBmcm9tIHRoZSBnb2RzLCBhbmQgbWF5IHlvdSB0aGluayBvZiBEaW9uIGFzIG9uZSB3aG8gYWJhbmRvbmVkIG5laXRoZXIgeW91IHdoZW4geW91IHdlcmUgd3JvbmdlZCwgbm9yLCBhZnRlcndhcmRzLCBoaXMgZmVsbG93IGNpdGl6ZW5zIHdoZW4gdGhleSB3ZXJlIGluIGRpc3RyZXNzLjwvcT4KCQkJICAgICAgPC90cmFuc2xhdGlvbj4="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBtZSwgaXQgaXMgbm90IG1lZXQgdGhhdCBJIHNob3VsZCBjb25zdWx0IG15IG93biBpbnRlcmVzdHMgbm93IHRoYXQgU3lyYWN1c2UgaXMgcGVyaXNoaW5nLCBidXQgaWYgSSBjYW5ub3Qgc2F2ZSBoZXIsIEkgc2hhbGwgcmV0dXJuIHRvIHNlZWsgYSBncmF2ZSBhbWlkIHRoZSBibGF6aW5nIHJ1aW5zIG9mIG15IG5hdGl2ZSBjaXR5LiBCdXQgeW91LCBpZiB5b3UgYXJlIHdpbGxpbmcgZXZlbiBub3csIGFmdGVyIGFsbCB0aGF0IGhhcyBwYXNzZWQsIHRvIGNvbWUgdG8gb3VyIGhlbHAsIHdobyBhcmUgdGhlIG1vc3QgZm9vbGlzaCBhbmQgdGhlIG1vc3QgdW5mb3J0dW5hdGUgb2YgbWVuLCBwcmF5IHJlc3RvcmUgdGhlIGNpdHkgb2YgU3lyYWN1c2UgYW5kIHRoZSB3b3JrIG9mIHlvdXIgb3duIGhhbmRzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3lyYWN1c2Ugd2FzIGNvbG9uaXplZCBmcm9tIENvcmludGgsIGluIFBlbG9wb25uZXN1cy48L25vdGU+IElmLCBob3dldmVyLCBpbiB5b3VyIGRpc3BsZWFzdXJlIGF0IHRoZSBTeXJhY3VzYW5zLCB5b3Ugc2hhbGwgbGVhdmUgdGhlbSB0byB0aGVpciBmYXRlLCBhdCBsZWFzdCBmb3IgeW91ciBmb3JtZXIgYnJhdmVyeSBhbmQgemVhbCBpbiBteSBiZWhhbGYgbWF5IHlvdSBvYnRhaW4gYSB3b3J0aHkgcmV3YXJkIGZyb20gdGhlIGdvZHMsIGFuZCBtYXkgeW91IHRoaW5rIG9mIERpb24gYXMgb25lIHdobyBhYmFuZG9uZWQgbmVpdGhlciB5b3Ugd2hlbiB5b3Ugd2VyZSB3cm9uZ2VkLCBub3IsIGFmdGVyd2FyZHMsIGhpcyBmZWxsb3cgY2l0aXplbnMgd2hlbiB0aGV5IHdlcmUgaW4gZGlzdHJlc3MuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgaGUgd2FzIHN0aWxsIHNwZWFraW5nLCB0aGUgbWVyY2VuYXJpZXMgc3ByYW5nIHRvIHRoZWlyIGZlZXQgd2l0aCBzaG91dHMgYW5kIGJhZGUgaGltIGxlYWQgdGhlbSBzcGVlZGlseSB0byB0aGUgY2l0eSdzIHJlbGllZiwgd2hpbGUgdGhlIFN5cmFjdXNhbiBlbnZveXMgZW1icmFjZWQgdGhlbSBwYXNzaW9uYXRlbHksIGludm9raW5nIG1hbnkgYmxlc3NpbmdzIGZyb20gdGhlIGdvZHMgdXBvbiBEaW9uLCBhbmQgbWFueSB1cG9uIGhpcyBtZXJjZW5hcmllcy4gQW5kIHdoZW4gdGhlIHR1bXVsdCB3YXMgYWxsYXllZCwgRGlvbiBvcmRlcmVkIGhpcyBtZW4gdG8gZ28gdG8gdGhlaXIgcXVhcnRlcnMgYW5kIG1ha2UgdGhlbXNlbHZlcyByZWFkeSwgYW5kLCBhZnRlciB0YWtpbmcgc3VwcGVyLCB0byBjb21lIHdpdGggdGhlaXIgYXJtcyB0byB0aGF0IHZlcnkgcGxhY2UsIGZvciBoZSB3YXMgZGV0ZXJtaW5lZCB0byBnbyB0byB0aGUgcmVzY3VlIGJ5IG5pZ2h0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGhlIHdhcyBzdGlsbCBzcGVha2luZywgdGhlIG1lcmNlbmFyaWVzIHNwcmFuZyB0byB0aGVpciBmZWV0IHdpdGggc2hvdXRzIGFuZCBiYWRlIGhpbSBsZWFkIHRoZW0gc3BlZWRpbHkgdG8gdGhlIGNpdHkncyByZWxpZWYsIHdoaWxlIHRoZSBTeXJhY3VzYW4gZW52b3lzIGVtYnJhY2VkIHRoZW0gcGFzc2lvbmF0ZWx5LCBpbnZva2luZyBtYW55IGJsZXNzaW5ncyBmcm9tIHRoZSBnb2RzIHVwb24gRGlvbiwgYW5kIG1hbnkgdXBvbiBoaXMgbWVyY2VuYXJpZXMuIEFuZCB3aGVuIHRoZSB0dW11bHQgd2FzIGFsbGF5ZWQsIERpb24gb3JkZXJlZCBoaXMgbWVuIHRvIGdvIHRvIHRoZWlyIHF1YXJ0ZXJzIGFuZCBtYWtlIHRoZW1zZWx2ZXMgcmVhZHksIGFuZCwgYWZ0ZXIgdGFraW5nIHN1cHBlciwgdG8gY29tZSB3aXRoIHRoZWlyIGFybXMgdG8gdGhhdCB2ZXJ5IHBsYWNlLCBmb3IgaGUgd2FzIGRldGVybWluZWQgdG8gZ28gdG8gdGhlIHJlc2N1ZSBieSBuaWdodC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzb2xkaWVycyBvZiBEaW9ueXNpdXMgYXQgU3lyYWN1c2UsIGFzIGxvbmcgYXMgaXQgd2FzIGRheSwgZGlkIG11Y2ggbWlzY2hpZWYgdG8gdGhlIGNpdHk7IHdoZW4gbmlnaHQgY2FtZSwgaG93ZXZlciwgdGhleSByZXRpcmVkIHRvIHRoZSBhY3JvcG9saXMsIGhhdmluZyBsb3N0IHNvbWUgZmV3IG9mIHRoZWlyIG51bWJlci4gVXBvbiB0aGlzLCB0aGUgcG9wdWxhciBsZWFkZXJzIG9mIHRoZSBTeXJhY3VzYW5zIHBsdWNrZWQgdXAgY291cmFnZSwgYW5kIGluIHRoZSBob3BlIHRoYXQgdGhlIGVuZW15IHdvdWxkIHJlc3QgY29udGVudCB3aXRoIHdoYXQgdGhleSBoYWQgZG9uZSwgZXhob3J0ZWQgdGhlIGNpdGl6ZW5zIG9uY2UgbW9yZSB0byBpZ25vcmUgRGlvbiwgYW5kIGlmIGhlIHNob3VsZCBjb21lIHVwIHdpdGggaGlzIG1lcmNlbmFyaWVzLCBub3QgdG8gYWRtaXQgdGhlbSwgbm9yIHlpZWxkIHByZWNlZGVuY2UgdG8gdGhlbSBhcyBzdXBlcmlvciBpbiBwb2ludCBvZiBicmF2ZXJ5LCBidXQgdG8gc2F2ZSB0aGVpciBjaXR5IGFuZCB0aGVpciBsaWJlcnR5IGJ5IHRoZWlyIG93biBlZmZvcnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgZnJlc2ggbWVzc2VuZ2VycyB3ZXJlIHNlbnQgdG8gRGlvbiwgc29tZSBmcm9tIHRoZSBnZW5lcmFscyBmb3JiaWRkaW5nIGhpcyBhZHZhbmNlLCBidXQgb3RoZXJzIGZyb20gdGhlIGhvcnNlbWVuIGFuZCBtb3JlIHJlcHV0YWJsZSBjaXRpemVucyB1cmdpbmcgaGltIHRvIGhhc3RlbiBpdC4gRm9yIHRoaXMgcmVhc29uIGhlIGNhbWUgbWFyY2hpbmcgb24gbm93IHNsb3dseSwgYW5kIG5vdyBhdCB0b3Agc3BlZWQuIEFzIHRoZSBuaWdodCBhZHZhbmNlZCB0aGUgZW5lbWllcyBvZiBEaW9uIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgZ2F0ZXMgaW4gb3JkZXIgdG8gc2h1dCBoaW0gb3V0LCBidXQgTnlwc2l1cywgc2VuZGluZyBoaXMgbWVyY2VuYXJpZXMgb25jZSBtb3JlIGZyb20gdGhlIGNpdGFkZWwgaW4gZ3JlYXRlciBudW1iZXJzIGFuZCB3aXRoIG1vcmUgaW1wZXR1b3NpdHkgdGhhbiBiZWZvcmUsIHRvcmUgZG93biBhdCBvbmNlIHRoZSBlbnRpcmUgc2llZ2Utd2FsbCwgYW5kIG92ZXJyYW4gYW5kIHNhY2tlZCB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGVyZSB3YXMgYSBzbGF1Z2h0ZXIgbm90IG9ubHkgb2YgbWVuLCBidXQgYWxzbyBvZiB3b21lbiBhbmQgY2hpbGRyZW47IHRoZXJlIHdhcyBsaXR0bGUgaGFsaW5nIGF3YXkgb2YgcHJpc29uZXJzLCBidXQgYSBncmVhdCBkZXN0cnVjdGlvbiBvZiBhbGwgYWxpa2UuIEZvciBzaW5jZSBEaW9ueXNpdXMgbm93IGRlc3BhaXJlZCBvZiBoaXMgY2F1c2UgYW5kIGZpZXJjZWx5IGhhdGVkIHRoZSBTeXJhY3VzYW5zLCBoZSB3aXNoZWQgdG8gbWFrZSB0aGVpciBjaXR5IGFzIGl0IHdlcmUgYSB0b21iIGZvciBoaXMgZmFsbGluZyB0eXJhbm55LiBTbyBoaXMgc29sZGllcnMsIGZvcmVzdGFsbGluZyB0aGUgc3VjY291ciB3aGljaCBEaW9uIHdhcyBicmluZ2luZywgcmVzb3J0ZWQgdG8gdGhlIHNwZWVkaWVzdCBkZXN0cnVjdGlvbiBhbmQgYW5uaWhpbGF0aW9uIG9mIGV2ZXJ5dGhpbmcgYnkgYnVybmluZywgc2V0dGluZyBmaXJlIHRvIHdoYXQgd2FzIG5lYXIgdGhlbSB3aXRoIHRoZSBicmFuZHMgYW5kIHRvcmNoZXMgaW4gdGhlaXIgaGFuZHMsIGFuZCBzY2F0dGVyaW5nIGZpZXJ5IGFycm93cyBmcm9tIHRoZWlyIGJvd3MgYW1vbmcgdGhlIHJlbW90ZXIgcGFydHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRoZSBTeXJhY3VzYW5zIGZsZWQsIHNvbWUgd2VyZSBvdmVydGFrZW4gYW5kIHNsYWluIGluIHRoZSBzdHJlZXRzLCBhbmQgdGhvc2Ugd2hvIHNvdWdodCBjb3ZlciBpbiB0aGVpciBob3VzZXMgd2VyZSBkcml2ZW4gb3V0IGFnYWluIGJ5IHRoZSBmaXJlLCBtYW55IGJ1aWxkaW5ncyBiZWluZyBub3cgYS1ibGF6ZSBhbmQgZmFsbGluZyB1cG9uIHRob3NlIHdobyB3ZXJlIHJ1bm5pbmcgYWJvdXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzb2xkaWVycyBvZiBEaW9ueXNpdXMgYXQgU3lyYWN1c2UsIGFzIGxvbmcgYXMgaXQgd2FzIGRheSwgZGlkIG11Y2ggbWlzY2hpZWYgdG8gdGhlIGNpdHk7IHdoZW4gbmlnaHQgY2FtZSwgaG93ZXZlciwgdGhleSByZXRpcmVkIHRvIHRoZSBhY3JvcG9saXMsIGhhdmluZyBsb3N0IHNvbWUgZmV3IG9mIHRoZWlyIG51bWJlci4gVXBvbiB0aGlzLCB0aGUgcG9wdWxhciBsZWFkZXJzIG9mIHRoZSBTeXJhY3VzYW5zIHBsdWNrZWQgdXAgY291cmFnZSwgYW5kIGluIHRoZSBob3BlIHRoYXQgdGhlIGVuZW15IHdvdWxkIHJlc3QgY29udGVudCB3aXRoIHdoYXQgdGhleSBoYWQgZG9uZSwgZXhob3J0ZWQgdGhlIGNpdGl6ZW5zIG9uY2UgbW9yZSB0byBpZ25vcmUgRGlvbiwgYW5kIGlmIGhlIHNob3VsZCBjb21lIHVwIHdpdGggaGlzIG1lcmNlbmFyaWVzLCBub3QgdG8gYWRtaXQgdGhlbSwgbm9yIHlpZWxkIHByZWNlZGVuY2UgdG8gdGhlbSBhcyBzdXBlcmlvciBpbiBwb2ludCBvZiBicmF2ZXJ5LCBidXQgdG8gc2F2ZSB0aGVpciBjaXR5IGFuZCB0aGVpciBsaWJlcnR5IGJ5IHRoZWlyIG93biBlZmZvcnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBmcmVzaCBtZXNzZW5nZXJzIHdlcmUgc2VudCB0byBEaW9uLCBzb21lIGZyb20gdGhlIGdlbmVyYWxzIGZvcmJpZGRpbmcgaGlzIGFkdmFuY2UsIGJ1dCBvdGhlcnMgZnJvbSB0aGUgaG9yc2VtZW4gYW5kIG1vcmUgcmVwdXRhYmxlIGNpdGl6ZW5zIHVyZ2luZyBoaW0gdG8gaGFzdGVuIGl0LiBGb3IgdGhpcyByZWFzb24gaGUgY2FtZSBtYXJjaGluZyBvbiBub3cgc2xvd2x5LCBhbmQgbm93IGF0IHRvcCBzcGVlZC4gQXMgdGhlIG5pZ2h0IGFkdmFuY2VkIHRoZSBlbmVtaWVzIG9mIERpb24gdG9vayBwb3NzZXNzaW9uIG9mIHRoZSBnYXRlcyBpbiBvcmRlciB0byBzaHV0IGhpbSBvdXQsIGJ1dCBOeXBzaXVzLCBzZW5kaW5nIGhpcyBtZXJjZW5hcmllcyBvbmNlIG1vcmUgZnJvbSB0aGUgY2l0YWRlbCBpbiBncmVhdGVyIG51bWJlcnMgYW5kIHdpdGggbW9yZSBpbXBldHVvc2l0eSB0aGFuIGJlZm9yZSwgdG9yZSBkb3duIGF0IG9uY2UgdGhlIGVudGlyZSBzaWVnZS13YWxsLCBhbmQgb3ZlcnJhbiBhbmQgc2Fja2VkIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgdGhlcmUgd2FzIGEgc2xhdWdodGVyIG5vdCBvbmx5IG9mIG1lbiwgYnV0IGFsc28gb2Ygd29tZW4gYW5kIGNoaWxkcmVuOyB0aGVyZSB3YXMgbGl0dGxlIGhhbGluZyBhd2F5IG9mIHByaXNvbmVycywgYnV0IGEgZ3JlYXQgZGVzdHJ1Y3Rpb24gb2YgYWxsIGFsaWtlLiBGb3Igc2luY2UgRGlvbnlzaXVzIG5vdyBkZXNwYWlyZWQgb2YgaGlzIGNhdXNlIGFuZCBmaWVyY2VseSBoYXRlZCB0aGUgU3lyYWN1c2FucywgaGUgd2lzaGVkIHRvIG1ha2UgdGhlaXIgY2l0eSBhcyBpdCB3ZXJlIGEgdG9tYiBmb3IgaGlzIGZhbGxpbmcgdHlyYW5ueS4gU28gaGlzIHNvbGRpZXJzLCBmb3Jlc3RhbGxpbmcgdGhlIHN1Y2NvdXIgd2hpY2ggRGlvbiB3YXMgYnJpbmdpbmcsIHJlc29ydGVkIHRvIHRoZSBzcGVlZGllc3QgZGVzdHJ1Y3Rpb24gYW5kIGFubmloaWxhdGlvbiBvZiBldmVyeXRoaW5nIGJ5IGJ1cm5pbmcsIHNldHRpbmcgZmlyZSB0byB3aGF0IHdhcyBuZWFyIHRoZW0gd2l0aCB0aGUgYnJhbmRzIGFuZCB0b3JjaGVzIGluIHRoZWlyIGhhbmRzLCBhbmQgc2NhdHRlcmluZyBmaWVyeSBhcnJvd3MgZnJvbSB0aGVpciBib3dzIGFtb25nIHRoZSByZW1vdGVyIHBhcnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['44.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRoZSBTeXJhY3VzYW5zIGZsZWQsIHNvbWUgd2VyZSBvdmVydGFrZW4gYW5kIHNsYWluIGluIHRoZSBzdHJlZXRzLCBhbmQgdGhvc2Ugd2hvIHNvdWdodCBjb3ZlciBpbiB0aGVpciBob3VzZXMgd2VyZSBkcml2ZW4gb3V0IGFnYWluIGJ5IHRoZSBmaXJlLCBtYW55IGJ1aWxkaW5ncyBiZWluZyBub3cgYS1ibGF6ZSBhbmQgZmFsbGluZyB1cG9uIHRob3NlIHdobyB3ZXJlIHJ1bm5pbmcgYWJvdXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk93aW5nIHRvIHRoaXMgZGlzYXN0ZXIgbW9yZSB0aGFuIHRvIGFueSB0aGluZyBlbHNlLCB0aGUgY2l0eSB3YXMgdGhyb3duIG9wZW4gdG8gRGlvbiBieSB1bmFuaW1vdXMgY29uc2VudC4gRm9yIGhlIHdhcyBubyBsb25nZXIgbWFyY2hpbmcgaW4gaGFzdGUsIHNpbmNlIGhlIGhhZCBoZWFyZCB0aGF0IHRoZSBlbmVteSBoYWQgc2h1dCB0aGVtc2VsdmVzIHVwIGluIHRoZSBhY3JvcG9saXMuIEJ1dCBhcyB0aGUgZGF5IGFkdmFuY2VkLCBmaXJzdCwgaG9yc2VtZW4gbWV0IGhpbSB3aXRoIHRpZGluZ3Mgb2YgdGhlIHNlY29uZCBjYXB0dXJlIG9mIHRoZSBjaXR5OyBuZXh0LCBldmVuIHNvbWUgb2YgaGlzIG9wcG9uZW50cyBjYW1lIHdpdGggZW50cmVhdGllcyB0aGF0IGhlIHdvdWxkIGhhc3RlbiBoaXMgbWFyY2guIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhcyB0aGUgbWlzY2hpZWYgZ3JldyB3b3JzZSwgSGVyYWNsZWlkZXMgc2VudCBvdXQgaGlzIGJyb3RoZXIsIGFuZCB0aGVuIFRoZW9kb3RlcyBoaXMgdW5jbGUsIGJlZ2dpbmcgRGlvbiB0byBoZWxwIHRoZW0sIHNpbmNlIG5vIG9uZSBub3cgcmVzaXN0ZWQgdGhlIGVuZW15LCBoZSBoaW1zZWxmIHdhcyB3b3VuZGVkLCBhbmQgdGhlIGNpdHkgd2FzIGFsbW9zdCBkZW1vbGlzaGVkIGFuZCBjb25zdW1lZCBieSBmaXJlLiBXaGVuIHRoZXNlIGFtYXppbmcgbWVzc2FnZXMgcmVhY2hlZCBEaW9uLCBoZSB3YXMgc3RpbGwgc2l4dHkgZnVybG9uZ3MgZGlzdGFudCBmcm9tIHRoZSBjaXR5IGdhdGVzOyBidXQgYWZ0ZXIgdGVsbGluZyBoaXMgbWVyY2VuYXJpZXMgb2YgdGhlIGNpdHkncyBwZXJpbCBhbmQgZXhob3J0aW5nIHRoZW0sIGhlIGxlZCBoaXMgYXJteSB0b3dhcmRzIHRoZSBjaXR5LCBubyBsb25nZXIgaW4gbWFyY2hpbmcgc3RlcCwgYnV0IG9uIHRoZSBydW4sIHdoaWxlIG9uZSBtZXNzZW5nZXIgYWZ0ZXIgYW5vdGhlciBtZXQgaGltIGFuZCBiZWdnZWQgaGltIHRvIGhhc3Rlbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIG1lcmNlbmFyaWVzIGFkdmFuY2luZyB3aXRoIGFzdG9uaXNoaW5nIHNwZWVkIGFuZCBhcmRvdXIsIGhlIGJ1cnN0IHRocm91Z2ggdGhlIGdhdGVzIGludG8gd2hhdCB3YXMgY2FsbGVkIHRoZSBIZWNhdG9tcGVkb24sIGFuZCBhdCBvbmNlIHNlbnQgaGlzIGxpZ2h0LWFybWVkIHRyb29wcyB0byBjaGFyZ2UgdXBvbiB0aGUgZW5lbXksIGluIG9yZGVyIHRoYXQgdGhlIFN5cmFjdXNhbnMgbWlnaHQgdGFrZSBjb3VyYWdlIGF0IHRoZSBzaWdodCBoZSBhbHNvIG1hcnNoYWxsZWQgaGlzIG1lbi1hdC1hcm1zIGluIHBlcnNvbiwgdG9nZXRoZXIgd2l0aCB0aG9zZSBvZiB0aGUgY2l0aXplbnMgd2hvIGtlcHQgcnVubmluZyB1cCBhbmQgZm9ybWluZyB3aXRoIHRoZW0sIGRpdmlkaW5nIGhpcyBjb21tYW5kcyBhbmQgZm9ybWluZyBjb21wYW5pZXMgaW4gY29sdW1uLCB0aGF0IGhlIG1pZ2h0IG1ha2UgYSBtb3JlIGZvcm1pZGFibGUgYXR0YWNrIGZyb20gbWFueSBwb2ludHMgYXQgb25jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T3dpbmcgdG8gdGhpcyBkaXNhc3RlciBtb3JlIHRoYW4gdG8gYW55IHRoaW5nIGVsc2UsIHRoZSBjaXR5IHdhcyB0aHJvd24gb3BlbiB0byBEaW9uIGJ5IHVuYW5pbW91cyBjb25zZW50LiBGb3IgaGUgd2FzIG5vIGxvbmdlciBtYXJjaGluZyBpbiBoYXN0ZSwgc2luY2UgaGUgaGFkIGhlYXJkIHRoYXQgdGhlIGVuZW15IGhhZCBzaHV0IHRoZW1zZWx2ZXMgdXAgaW4gdGhlIGFjcm9wb2xpcy4gQnV0IGFzIHRoZSBkYXkgYWR2YW5jZWQsIGZpcnN0LCBob3JzZW1lbiBtZXQgaGltIHdpdGggdGlkaW5ncyBvZiB0aGUgc2Vjb25kIGNhcHR1cmUgb2YgdGhlIGNpdHk7IG5leHQsIGV2ZW4gc29tZSBvZiBoaXMgb3Bwb25lbnRzIGNhbWUgd2l0aCBlbnRyZWF0aWVzIHRoYXQgaGUgd291bGQgaGFzdGVuIGhpcyBtYXJjaC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhcyB0aGUgbWlzY2hpZWYgZ3JldyB3b3JzZSwgSGVyYWNsZWlkZXMgc2VudCBvdXQgaGlzIGJyb3RoZXIsIGFuZCB0aGVuIFRoZW9kb3RlcyBoaXMgdW5jbGUsIGJlZ2dpbmcgRGlvbiB0byBoZWxwIHRoZW0sIHNpbmNlIG5vIG9uZSBub3cgcmVzaXN0ZWQgdGhlIGVuZW15LCBoZSBoaW1zZWxmIHdhcyB3b3VuZGVkLCBhbmQgdGhlIGNpdHkgd2FzIGFsbW9zdCBkZW1vbGlzaGVkIGFuZCBjb25zdW1lZCBieSBmaXJlLiBXaGVuIHRoZXNlIGFtYXppbmcgbWVzc2FnZXMgcmVhY2hlZCBEaW9uLCBoZSB3YXMgc3RpbGwgc2l4dHkgZnVybG9uZ3MgZGlzdGFudCBmcm9tIHRoZSBjaXR5IGdhdGVzOyBidXQgYWZ0ZXIgdGVsbGluZyBoaXMgbWVyY2VuYXJpZXMgb2YgdGhlIGNpdHkncyBwZXJpbCBhbmQgZXhob3J0aW5nIHRoZW0sIGhlIGxlZCBoaXMgYXJteSB0b3dhcmRzIHRoZSBjaXR5LCBubyBsb25nZXIgaW4gbWFyY2hpbmcgc3RlcCwgYnV0IG9uIHRoZSBydW4sIHdoaWxlIG9uZSBtZXNzZW5nZXIgYWZ0ZXIgYW5vdGhlciBtZXQgaGltIGFuZCBiZWdnZWQgaGltIHRvIGhhc3Rlbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBtZXJjZW5hcmllcyBhZHZhbmNpbmcgd2l0aCBhc3RvbmlzaGluZyBzcGVlZCBhbmQgYXJkb3VyLCBoZSBidXJzdCB0aHJvdWdoIHRoZSBnYXRlcyBpbnRvIHdoYXQgd2FzIGNhbGxlZCB0aGUgSGVjYXRvbXBlZG9uLCBhbmQgYXQgb25jZSBzZW50IGhpcyBsaWdodC1hcm1lZCB0cm9vcHMgdG8gY2hhcmdlIHVwb24gdGhlIGVuZW15LCBpbiBvcmRlciB0aGF0IHRoZSBTeXJhY3VzYW5zIG1pZ2h0IHRha2UgY291cmFnZSBhdCB0aGUgc2lnaHQgaGUgYWxzbyBtYXJzaGFsbGVkIGhpcyBtZW4tYXQtYXJtcyBpbiBwZXJzb24sIHRvZ2V0aGVyIHdpdGggdGhvc2Ugb2YgdGhlIGNpdGl6ZW5zIHdobyBrZXB0IHJ1bm5pbmcgdXAgYW5kIGZvcm1pbmcgd2l0aCB0aGVtLCBkaXZpZGluZyBoaXMgY29tbWFuZHMgYW5kIGZvcm1pbmcgY29tcGFuaWVzIGluIGNvbHVtbiwgdGhhdCBoZSBtaWdodCBtYWtlIGEgbW9yZSBmb3JtaWRhYmxlIGF0dGFjayBmcm9tIG1hbnkgcG9pbnRzIGF0IG9uY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGFkIG1hZGUgdGhlc2UgcHJlcGFyYXRpb25zIGFuZCBoYWQgcHJheWVkIHRvIHRoZSBnb2RzLCBhbmQgd2FzIHNlZW4gbGVhZGluZyBoaXMgZm9yY2VzIHRocm91Z2ggdGhlIGNpdHkgYWdhaW5zdCB0aGUgZW5lbXksIHNob3V0cyBvZiBqb3kgYW5kIGxvdWQgYmF0dGxlLWNyaWVzIG1pbmdsZWQgd2l0aCBwcmF5ZXJzIGFuZCBzdXBwbGljYXRpb25zIHdlcmUgcmFpc2VkIGJ5IHRoZSBTeXJhY3VzYW5zLCB3aG8gY2FsbGVkIERpb24gdGhlaXIgc2F2aW91ciBhbmQgZ29kLCBhbmQgaGlzIG1lcmNlbmFyaWVzIHRoZWlyIGJyZXRocmVuIGFuZCBmZWxsb3cgY2l0aXplbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBubyBvbmUgd2FzIHNvIGZvbmQgb2Ygc2VsZiBvciBmb25kIG9mIGxpZmUgaW4gdGhhdCBlbWVyZ2VuY3kgYXMgbm90IHRvIHNob3cgaGltc2VsZiBtb3JlIGFueGlvdXMgYWJvdXQgRGlvbiBhbG9uZSB0aGFuIGFib3V0IGFsbCB0aGUgcmVzdCwgYXMgaGUgbWFyY2hlZCBhdCB0aGVpciBoZWFkIHRvIG1lZXQgdGhlIGRhbmdlciwgdGhyb3VnaCBibG9vZCBhbmQgZmlyZSBhbmQgdGhlIG1hc3Mgb2YgZGVhZCBib2RpZXMgbHlpbmcgaW4gdGhlIHN0cmVldHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgbWFkZSB0aGVzZSBwcmVwYXJhdGlvbnMgYW5kIGhhZCBwcmF5ZWQgdG8gdGhlIGdvZHMsIGFuZCB3YXMgc2VlbiBsZWFkaW5nIGhpcyBmb3JjZXMgdGhyb3VnaCB0aGUgY2l0eSBhZ2FpbnN0IHRoZSBlbmVteSwgc2hvdXRzIG9mIGpveSBhbmQgbG91ZCBiYXR0bGUtY3JpZXMgbWluZ2xlZCB3aXRoIHByYXllcnMgYW5kIHN1cHBsaWNhdGlvbnMgd2VyZSByYWlzZWQgYnkgdGhlIFN5cmFjdXNhbnMsIHdobyBjYWxsZWQgRGlvbiB0aGVpciBzYXZpb3VyIGFuZCBnb2QsIGFuZCBoaXMgbWVyY2VuYXJpZXMgdGhlaXIgYnJldGhyZW4gYW5kIGZlbGxvdyBjaXRpemVucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBubyBvbmUgd2FzIHNvIGZvbmQgb2Ygc2VsZiBvciBmb25kIG9mIGxpZmUgaW4gdGhhdCBlbWVyZ2VuY3kgYXMgbm90IHRvIHNob3cgaGltc2VsZiBtb3JlIGFueGlvdXMgYWJvdXQgRGlvbiBhbG9uZSB0aGFuIGFib3V0IGFsbCB0aGUgcmVzdCwgYXMgaGUgbWFyY2hlZCBhdCB0aGVpciBoZWFkIHRvIG1lZXQgdGhlIGRhbmdlciwgdGhyb3VnaCBibG9vZCBhbmQgZmlyZSBhbmQgdGhlIG1hc3Mgb2YgZGVhZCBib2RpZXMgbHlpbmcgaW4gdGhlIHN0cmVldHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SXQgd2FzIHRydWUsIGluZGVlZCwgdGhhdCB0aGUgZW5lbXkgcHJlc2VudGVkIGEgZm9ybWlkYWJsZSBhcHBlYXJhbmNlLCBmb3IgdGhleSBoYWQgYmVjb21lIGFsdG9nZXRoZXIgc2F2YWdlLCBhbmQgaGFkIGRyYXduIHRoZW1zZWx2ZXMgdXAgYWxvbmcgdGhlIGRlbW9saXNoZWQgc2llZ2Utd2FsbCwgd2hpY2ggbWFkZSB0aGUgYXBwcm9hY2ggdG8gdGhlbSBkaWZmaWN1bHQgYW5kIGhhcmQgdG8gZm9yY2U7IGJ1dCB0aGUgcGVyaWwgZnJvbSB0aGUgZmlyZSBkaXN0dXJiZWQgdGhlIG1lcmNlbmFyaWVzIG9mIERpb24gbW9yZSwgYW5kIG1hZGUgdGhlaXIgcHJvZ3Jlc3MgYXJkdW91cy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSB3ZXJlIHN1cnJvdW5kZWQgb24gYWxsIHNpZGVzIGJ5IGdsb3dpbmcgZmxhbWVzIHdoaWNoIHdlcmUgc3ByZWFkaW5nIGFtb25nIHRoZSBob3VzZXM7IHRoZXkgdHJvZCB1cG9uIGJsYXppbmcgcnVpbnMgYW5kIHJhbiBhdCB0aGUgcmlzayBvZiB0aGVpciBsaXZlcyB1bmRlciBmYWxsaW5nIGZyYWdtZW50cyBvZiBncmVhdCBzaXplOyB0aGV5IG1hZGUgdGhlaXIgd2F5IHRocm91Z2ggY2xvdWRzIG9mIGR1c3QgYW5kIHNtb2tlOyBhbmQgeWV0IHRoZXkgdHJpZWQgdG8ga2VlcCB0b2dldGhlciBhbmQgbm90IGJyZWFrIHRoZWlyIHJhbmtzLiBNb3Jlb3Zlciwgd2hlbiB0aGV5IGpvaW5lZCBiYXR0bGUgd2l0aCB0aGUgZW5lbXksIG9ubHkgYSBmZXcgb24gZWFjaCBzaWRlIGNvdWxkIGZpZ2h0IGF0IGNsb3NlIHF1YXJ0ZXJzLCBzbyBuYXJyb3cgYW5kIHVuZXZlbiB3YXMgdGhlIHBsYWNlOyBidXQgdGhlIFN5cmFjdXNhbnMgZW5jb3VyYWdlZCB0aGVtIHdpdGggZWFnZXIgc2hvdXRzLCBhbmQgTnlwc2l1cyBhbmQgaGlzIG1lbiB3ZXJlIG92ZXJwb3dlcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3N0IG9mIHRoZW0gZmxlZCBiYWNrIGludG8gdGhlIGFjcm9wb2xpcywgd2hpY2ggd2FzIG5lYXIsIGFuZCBzbyBzYXZlZCB0aGVtc2VsdmVzOyBidXQgdGhvc2Ugd2hvIHdlcmUgbGVmdCBvdXRzaWRlIGFuZCBzY2F0dGVyZWQgaGl0aGVyIGFuZCB0aGl0aGVyLCB3ZXJlIHB1cnN1ZWQgYW5kIHNsYWluIGJ5IHRoZSBtZXJjZW5hcmllcy4gTm8gaW1tZWRpYXRlIGVuam95bWVudCBvZiB0aGVpciB2aWN0b3J5LCBob3dldmVyLCBhbmQgbm9uZSBvZiB0aGUgZ2xhZCBjb25ncmF0dWxhdGlvbnMgYmVmaXR0aW5nIHNvIGdyZWF0IGFuIGFjaGlldmVtZW50IHdlcmUgcG9zc2libGUgZm9yIHRoZSBTeXJhY3VzYW5zIGluIHRoYXQgZW1lcmdlbmN5OyB0aGV5IHR1cm5lZCB0aGVpciBhdHRlbnRpb24gdG8gdGhlaXIgYnVybmluZyBob3VzZXMsIGFuZCBvbmx5IGJ5IHRvaWxpbmcgYWxsIG5pZ2h0IGRpZCB0aGV5IHN1Y2NlZWQgaW4gcHV0dGluZyBvdXQgdGhlIGZpcmUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['46.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IHdlcmUgc3Vycm91bmRlZCBvbiBhbGwgc2lkZXMgYnkgZ2xvd2luZyBmbGFtZXMgd2hpY2ggd2VyZSBzcHJlYWRpbmcgYW1vbmcgdGhlIGhvdXNlczsgdGhleSB0cm9kIHVwb24gYmxhemluZyBydWlucyBhbmQgcmFuIGF0IHRoZSByaXNrIG9mIHRoZWlyIGxpdmVzIHVuZGVyIGZhbGxpbmcgZnJhZ21lbnRzIG9mIGdyZWF0IHNpemU7IHRoZXkgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCBjbG91ZHMgb2YgZHVzdCBhbmQgc21va2U7IGFuZCB5ZXQgdGhleSB0cmllZCB0byBrZWVwIHRvZ2V0aGVyIGFuZCBub3QgYnJlYWsgdGhlaXIgcmFua3MuIE1vcmVvdmVyLCB3aGVuIHRoZXkgam9pbmVkIGJhdHRsZSB3aXRoIHRoZSBlbmVteSwgb25seSBhIGZldyBvbiBlYWNoIHNpZGUgY291bGQgZmlnaHQgYXQgY2xvc2UgcXVhcnRlcnMsIHNvIG5hcnJvdyBhbmQgdW5ldmVuIHdhcyB0aGUgcGxhY2U7IGJ1dCB0aGUgU3lyYWN1c2FucyBlbmNvdXJhZ2VkIHRoZW0gd2l0aCBlYWdlciBzaG91dHMsIGFuZCBOeXBzaXVzIGFuZCBoaXMgbWVuIHdlcmUgb3ZlcnBvd2VyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['46.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlbSBmbGVkIGJhY2sgaW50byB0aGUgYWNyb3BvbGlzLCB3aGljaCB3YXMgbmVhciwgYW5kIHNvIHNhdmVkIHRoZW1zZWx2ZXM7IGJ1dCB0aG9zZSB3aG8gd2VyZSBsZWZ0IG91dHNpZGUgYW5kIHNjYXR0ZXJlZCBoaXRoZXIgYW5kIHRoaXRoZXIsIHdlcmUgcHVyc3VlZCBhbmQgc2xhaW4gYnkgdGhlIG1lcmNlbmFyaWVzLiBObyBpbW1lZGlhdGUgZW5qb3ltZW50IG9mIHRoZWlyIHZpY3RvcnksIGhvd2V2ZXIsIGFuZCBub25lIG9mIHRoZSBnbGFkIGNvbmdyYXR1bGF0aW9ucyBiZWZpdHRpbmcgc28gZ3JlYXQgYW4gYWNoaWV2ZW1lbnQgd2VyZSBwb3NzaWJsZSBmb3IgdGhlIFN5cmFjdXNhbnMgaW4gdGhhdCBlbWVyZ2VuY3k7IHRoZXkgdHVybmVkIHRoZWlyIGF0dGVudGlvbiB0byB0aGVpciBidXJuaW5nIGhvdXNlcywgYW5kIG9ubHkgYnkgdG9pbGluZyBhbGwgbmlnaHQgZGlkIHRoZXkgc3VjY2VlZCBpbiBwdXR0aW5nIG91dCB0aGUgZmlyZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBpdCB3YXMgZGF5LCBub3Qgb25lIG9mIHRoZSBvdGhlciBwb3B1bGFyIGxlYWRlcnMgd291bGQgcmVtYWluIGluIHRoZSBjaXR5LCBidXQgcGFzc2VkIGp1ZGdlbWVudCBvbiB0aGVtc2VsdmVzIGJ5IHRha2luZyB0byBmbGlnaHQ7IEhlcmFjbGVpZGVzIGFuZCBUaGVvZG90ZXMsIGhvd2V2ZXIsIGNhbWUgb2YgdGhlaXIgb3duIGFjY29yZCBhbmQgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyB0byBEaW9uLCBhY2tub3dsZWRnaW5nIHRoYXQgdGhleSBoYWQgZG9uZSB3cm9uZywgYW5kIGJlZ2dpbmcgaGltIHRvIHRyZWF0IHRoZW0gYmV0dGVyIHRoYW4gdGhleSBoYWQgdHJlYXRlZCBoaW07IGl0IHdhcyBtZWV0LCB0aGV5IHNhaWQsIHRoYXQgRGlvbiwgd2hvIHdhcyB0aGVpciBzdXBlcmlvciBpbiBldmVyeSBvdGhlciB2aXJ0dWUsIHNob3VsZCBhbHNvIHNob3cgaGltc2VsZiBhIGJldHRlciBtYXN0ZXIgb2YgaGlzIGFuZ2VyIHRoYW4gaGlzIHVuZ3JhdGVmdWwgZm9lcywgd2hvIHdlcmUgbm93IGNvbWUgY29uZmVzc2luZyB0aGF0IGluIHRoZSB2ZXJ5IHF1YWxpdHkgdG8gd2hpY2ggdGhleSBoYWQgZm9ybWVybHkgZGlzcHV0ZWQgaGlzIGNsYWltLCBuYW1lbHksIHZpcnR1ZSwgdGhleSB3ZXJlIGhpcyBpbmZlcmlvcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCBIZXJhY2xlaWRlcyBhbmQgVGhlb2RvdGVzIHRodXMgYmVzb3VnaHQgRGlvbiwgaGlzIGZyaWVuZHMgZXhob3J0ZWQgaGltIG5vdCB0byBzcGFyZSBzdWNoIGJhc2UgYW5kIGVudmlvdXMgbWVuLCBidXQgdG8gZ2l2ZSBIZXJhY2xlaWRlcyBvdmVyIHRvIHRoZSBtZXJjeSBvZiBoaXMgc29sZGllcnMsIGFuZCB0byByaWQgdGhlIGNvbW1vbndlYWx0aCBvZiB0aGUgaHVudCBmb3IgbW9iLWZhdm91ciwgd2hpY2gsIG5vIGxlc3MgdGhhbiB0eXJhbm55LCB3YXMgYSByYWdpbmcgZGlzdGVtcGVyLiBCdXQgRGlvbiB0cmllZCB0byBzb2Z0ZW4gdGhlaXIgcmVzZW50bWVudCwgc2F5aW5nIHRoYXQgd2hpbGUgb3RoZXIgZ2VuZXJhbHMgdHJhaW5lZCB0aGVtc2VsdmVzIG1vc3RseSBmb3IgYXJtcyBhbmQgd2FyLCBoZSBoaW1zZWxmIGhhZCBzdHVkaWVkIGZvciBhIGxvbmcgdGltZSBpbiB0aGUgQWNhZGVteSBob3cgdG8gY29ucXVlciBhbmdlciwgZW52eSwgYW5kIGFsbCBjb250ZW50aW91c25lc3M7IGFuZCBpdCB3YXMgbm8gbWFuaWZlc3RhdGlvbiBvZiBzdWNoIHNlbGYtbWFzdGVyeSwgaGUgc2FpZCwgd2hlbiBvbmUgd2FzIGtpbmQgdG8gZnJpZW5kcyBhbmQgYmVuZWZhY3RvcnMsIGJ1dCB3aGVuIG9uZSB3aG8gaGFkIGJlZW4gd3JvbmdlZCB3YXMgbWVyY2lmdWwgYW5kIG1pbGQgdG93YXJkcyB0aGUgZXJyaW5nOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5iZXNpZGVzLCBoZSB3aXNoZWQgbWVuIHRvIHNlZSB0aGF0IGhlIHdhcyBzdXBlcmlvciB0byBIZXJhY2xlaWRlcywgbm90IHNvIG11Y2ggaW4gcG93ZXIgYW5kIHdpc2RvbSwgYXMgaW4gZ29vZG5lc3MgYW5kIGp1c3RpY2U7IGZvciB0aGVyZWluIGxheSByZWFsIHN1cGVyaW9yaXR5OyB3aGVyZWFzIHN1Y2Nlc3NlcyBpbiB3YXIsIGV2ZW4gdGhvdWdoIHRoZXkgaGFkIHRvIGJlIHNoYXJlZCB3aXRoIG5vIG1hbiwgbXVzdCBhdCBsZWFzdCBiZSBzaGFyZWQgd2l0aCBmb3J0dW5lLiBNb3Jlb3ZlciwgaWYgZW52eSBsZWQgSGVyYWNsZWlkZXMgdG8gYmUgZmFpdGhsZXNzIGFuZCBiYXNlLCBzdXJlbHkgYW5nZXIgbXVzdCBub3QgZHJpdmUgRGlvbiB0byBzdWxseSBoaXMgdmlydHVlOyBmb3IgYWx0aG91Z2ggdGFraW5nIHZlbmdlYW5jZSBmb3IgYSB3cm9uZyB3YXMgaW4gdGhlIGV5ZXMgb2YgdGhlIGxhdyBtb3JlIGp1c3QgdGhhbiB0aGUgZG9pbmcgb2YgdGhlIHdyb25nIHVucHJvdm9rZWQsIGJ5IG5hdHVyZSBpdCBzcHJhbmcgZnJvbSBvbmUgYW5kIHRoZSBzYW1lIHdlYWtuZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgYmFzZW5lc3MgaW4gYSBtYW4sIGV2ZW4gdGhvdWdoIGl0IGJlIGEgZ3JpZXZvdXMgdGhpbmcsIHdhcyBub3Qgc28gYWx0b2dldGhlciBzYXZhZ2UgYW5kIG9ic3RpbmF0ZSB0aGF0IGl0IGNvdWxkIG5vdCBiZSBjb25xdWVyZWQgYnkgZnJlcXVlbnQgYmVuZWZhY3Rpb25zIGFuZCBhbHRlcmVkIGJ5IGEgc2Vuc2Ugb2YgZ3JhdGl0dWRlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBpdCB3YXMgZGF5LCBub3Qgb25lIG9mIHRoZSBvdGhlciBwb3B1bGFyIGxlYWRlcnMgd291bGQgcmVtYWluIGluIHRoZSBjaXR5LCBidXQgcGFzc2VkIGp1ZGdlbWVudCBvbiB0aGVtc2VsdmVzIGJ5IHRha2luZyB0byBmbGlnaHQ7IEhlcmFjbGVpZGVzIGFuZCBUaGVvZG90ZXMsIGhvd2V2ZXIsIGNhbWUgb2YgdGhlaXIgb3duIGFjY29yZCBhbmQgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyB0byBEaW9uLCBhY2tub3dsZWRnaW5nIHRoYXQgdGhleSBoYWQgZG9uZSB3cm9uZywgYW5kIGJlZ2dpbmcgaGltIHRvIHRyZWF0IHRoZW0gYmV0dGVyIHRoYW4gdGhleSBoYWQgdHJlYXRlZCBoaW07IGl0IHdhcyBtZWV0LCB0aGV5IHNhaWQsIHRoYXQgRGlvbiwgd2hvIHdhcyB0aGVpciBzdXBlcmlvciBpbiBldmVyeSBvdGhlciB2aXJ0dWUsIHNob3VsZCBhbHNvIHNob3cgaGltc2VsZiBhIGJldHRlciBtYXN0ZXIgb2YgaGlzIGFuZ2VyIHRoYW4gaGlzIHVuZ3JhdGVmdWwgZm9lcywgd2hvIHdlcmUgbm93IGNvbWUgY29uZmVzc2luZyB0aGF0IGluIHRoZSB2ZXJ5IHF1YWxpdHkgdG8gd2hpY2ggdGhleSBoYWQgZm9ybWVybHkgZGlzcHV0ZWQgaGlzIGNsYWltLCBuYW1lbHksIHZpcnR1ZSwgdGhleSB3ZXJlIGhpcyBpbmZlcmlvcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3VnaCBIZXJhY2xlaWRlcyBhbmQgVGhlb2RvdGVzIHRodXMgYmVzb3VnaHQgRGlvbiwgaGlzIGZyaWVuZHMgZXhob3J0ZWQgaGltIG5vdCB0byBzcGFyZSBzdWNoIGJhc2UgYW5kIGVudmlvdXMgbWVuLCBidXQgdG8gZ2l2ZSBIZXJhY2xlaWRlcyBvdmVyIHRvIHRoZSBtZXJjeSBvZiBoaXMgc29sZGllcnMsIGFuZCB0byByaWQgdGhlIGNvbW1vbndlYWx0aCBvZiB0aGUgaHVudCBmb3IgbW9iLWZhdm91ciwgd2hpY2gsIG5vIGxlc3MgdGhhbiB0eXJhbm55LCB3YXMgYSByYWdpbmcgZGlzdGVtcGVyLiBCdXQgRGlvbiB0cmllZCB0byBzb2Z0ZW4gdGhlaXIgcmVzZW50bWVudCwgc2F5aW5nIHRoYXQgd2hpbGUgb3RoZXIgZ2VuZXJhbHMgdHJhaW5lZCB0aGVtc2VsdmVzIG1vc3RseSBmb3IgYXJtcyBhbmQgd2FyLCBoZSBoaW1zZWxmIGhhZCBzdHVkaWVkIGZvciBhIGxvbmcgdGltZSBpbiB0aGUgQWNhZGVteSBob3cgdG8gY29ucXVlciBhbmdlciwgZW52eSwgYW5kIGFsbCBjb250ZW50aW91c25lc3M7IGFuZCBpdCB3YXMgbm8gbWFuaWZlc3RhdGlvbiBvZiBzdWNoIHNlbGYtbWFzdGVyeSwgaGUgc2FpZCwgd2hlbiBvbmUgd2FzIGtpbmQgdG8gZnJpZW5kcyBhbmQgYmVuZWZhY3RvcnMsIGJ1dCB3aGVuIG9uZSB3aG8gaGFkIGJlZW4gd3JvbmdlZCB3YXMgbWVyY2lmdWwgYW5kIG1pbGQgdG93YXJkcyB0aGUgZXJyaW5nOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['47.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJlc2lkZXMsIGhlIHdpc2hlZCBtZW4gdG8gc2VlIHRoYXQgaGUgd2FzIHN1cGVyaW9yIHRvIEhlcmFjbGVpZGVzLCBub3Qgc28gbXVjaCBpbiBwb3dlciBhbmQgd2lzZG9tLCBhcyBpbiBnb29kbmVzcyBhbmQganVzdGljZTsgZm9yIHRoZXJlaW4gbGF5IHJlYWwgc3VwZXJpb3JpdHk7IHdoZXJlYXMgc3VjY2Vzc2VzIGluIHdhciwgZXZlbiB0aG91Z2ggdGhleSBoYWQgdG8gYmUgc2hhcmVkIHdpdGggbm8gbWFuLCBtdXN0IGF0IGxlYXN0IGJlIHNoYXJlZCB3aXRoIGZvcnR1bmUuIE1vcmVvdmVyLCBpZiBlbnZ5IGxlZCBIZXJhY2xlaWRlcyB0byBiZSBmYWl0aGxlc3MgYW5kIGJhc2UsIHN1cmVseSBhbmdlciBtdXN0IG5vdCBkcml2ZSBEaW9uIHRvIHN1bGx5IGhpcyB2aXJ0dWU7IGZvciBhbHRob3VnaCB0YWtpbmcgdmVuZ2VhbmNlIGZvciBhIHdyb25nIHdhcyBpbiB0aGUgZXllcyBvZiB0aGUgbGF3IG1vcmUganVzdCB0aGFuIHRoZSBkb2luZyBvZiB0aGUgd3JvbmcgdW5wcm92b2tlZCwgYnkgbmF0dXJlIGl0IHNwcmFuZyBmcm9tIG9uZSBhbmQgdGhlIHNhbWUgd2Vha25lc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['47.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBiYXNlbmVzcyBpbiBhIG1hbiwgZXZlbiB0aG91Z2ggaXQgYmUgYSBncmlldm91cyB0aGluZywgd2FzIG5vdCBzbyBhbHRvZ2V0aGVyIHNhdmFnZSBhbmQgb2JzdGluYXRlIHRoYXQgaXQgY291bGQgbm90IGJlIGNvbnF1ZXJlZCBieSBmcmVxdWVudCBiZW5lZmFjdGlvbnMgYW5kIGFsdGVyZWQgYnkgYSBzZW5zZSBvZiBncmF0aXR1ZGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHVzaW5nIHN1Y2ggYXJndW1lbnRzIGFzIHRoZXNlLCBEaW9uIHNldCBIZXJhY2xlaWRlcyBhbmQgVGhlb2RvdGVzIGZyZWUuIFRoZW4gdHVybmluZyBoaXMgYXR0ZW50aW9uIHRvIHRoZSBzaWVnZS13YWxsLCBoZSBiYWRlIGVhY2ggb25lIG9mIHRoZSBTeXJhY3VzYW5zIHRvIGN1dCBhIHN0YWtlIGFuZCBsYXkgaXQgZG93biBuZWFyIHRoZSB3b3JrcywgYW5kIHNldHRpbmcgaGlzIG1lcmNlbmFyaWVzIHRvIHRoZSB0YXNrIGFsbCBuaWdodCwgd2hpbGUgdGhlIFN5cmFjdXNhbnMgd2VyZSByZXN0aW5nLCBoZSBzdWNjZWVkZWQgaW4gZmVuY2luZyBvZmYgdGhlIGFjcm9wb2xpcywgc28gdGhhdCB3aGVuIGRheSBjYW1lIHRoZSBjaXRpemVucyBhbmQgdGhlIGVuZW15IGFsaWtlIHdlcmUgYW1hemVkIHRvIHNlZSB3aXRoIHdoYXQgc3BlZWQgdGhlIHdvcmsgaGFkIGJlZW4gYWNjb21wbGlzaGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhbHNvIGJ1cmllZCB0aGUgZGVhZCBTeXJhY3VzYW5zLCByYW5zb21lZCB0aG9zZSB3aG8gaGFkIGJlZW4gdGFrZW4gcHJpc29uZXJzLCBhbHRob3VnaCB0aGV5IHdlcmUgZnVsbHkgdHdvIHRob3VzYW5kIGluIG51bWJlciwgYW5kIHRoZW4gaGVsZCBhbiBhc3NlbWJseS4gSGVyZSBIZXJhY2xlaWRlcyBjYW1lIGZvcndhcmQgd2l0aCBhIG1vdGlvbiB0aGF0IERpb24gc2hvdWxkIGJlIGNob3NlbiBnZW5lcmFsIHdpdGggYWJzb2x1dGUgcG93ZXJzIGJ5IGxhbmQgYW5kIHNlYS4gVGhlIGFyaXN0b2NyYWN5IGFwcHJvdmVkIG9mIHRoaXMgbW90aW9uIGFuZCB1cmdlZCB0aGUgYXBwb2ludG1lbnQ7IGJ1dCB0aGUgbW9iIG9mIHNhaWxvcnMgYW5kIGRheS1sYWJvdXJlcnMgdHVtdWx0dW91c2x5IG9wcG9zZWQgaXQsIGJlaW5nIHZleGVkIHRoYXQgSGVyYWNsZWlkZXMgc2hvdWxkIGxvc2UgaGlzIG9mZmljZSBvZiBhZG1pcmFsLCBhbmQgY29uc2lkZXJpbmcgaGltLCBldmVuIHRob3VnaCBnb29kIGZvciBub3RoaW5nIGluIG90aGVyIHdheXMsIGF0IGxlYXN0IGFsdG9nZXRoZXIgbW9yZSBhIG1hbiBvZiB0aGUgcGVvcGxlIHRoYW4gRGlvbiBhbmQgbW9yZSB1bmRlciB0aGUgY29udHJvbCBvZiB0aGUgbXVsdGl0dWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHBvaW50IERpb24geWllbGRlZCB0byB0aGVtLCBhbmQgcmVzdG9yZWQgdGhlIGNvbW1hbmQgYnkgc2VhIHRvIEhlcmFjbGVpZGVzOyBidXQgd2hlbiB0aGV5IGluc2lzdGVkIHVwb24gdGhlIHJlZGlzdHJpYnV0aW9uIG9mIGxhbmQgYW5kIGhvdXNlcywgaGUgb3Bwb3NlZCB0aGVtIGFuZCByZXBlYWxlZCB0aGVpciBmb3JtZXIgZGVjcmVlcyBvbiB0aGlzIGhlYWQsIHRoZXJlYnkgd2lubmluZyB0aGVpciBkaXNwbGVhc3VyZS4gV2hlcmVmb3JlIEhlcmFjbGVpZGVzIGF0IG9uY2UgcmVuZXdlZCBoaXMgbWFjaGluYXRpb25zLCBhbmQsIHdoZW4gaGUgd2FzIHN0YXRpb25lZCBhdCBNZXNzYW5hLCBhcnRmdWxseSB0cmllZCB0byBleGFzcGVyYXRlIGFnYWluc3QgRGlvbiB0aGUgc29sZGllcnMgYW5kIHNhaWxvcnMgd2hvIGhhZCBzYWlsZWQgdGhpdGhlciB3aXRoIGhpbSwgZGVjbGFyaW5nIHRoYXQgRGlvbiBpbnRlbmRlZCB0byBtYWtlIGhpbXNlbGYgdHlyYW50OyBidXQgaGUgaGltc2VsZiB3YXMgYWxsIHRoZSB3aGlsZSBtYWtpbmcgc2VjcmV0IGNvbXBhY3RzIHdpdGggRGlvbnlzaXVzIHRocm91Z2ggdGhlIGFnZW5jeSBvZiBQaGFyYXggdGhlIFNwYXJ0YW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyB3YXMgc3VzcGVjdGVkIGJ5IHRoZSBiZXR0ZXIgY2xhc3Mgb2YgU3lyYWN1c2FucywgdGhlcmUgd2FzIGRpc3NlbnNpb24gaW4gdGhlIGFybXksIGFuZCB0aGVyZWZvcmUgcGVycGxleGl0eSBhbmQgd2FudCBvZiBwcm92aXNpb25zIGluIFN5cmFjdXNlLCBzbyB0aGF0IERpb24gd2FzIGFsdG9nZXRoZXIgYXQgYSBsb3NzIHdoYXQgdG8gZG8sIGFuZCB3YXMgYmxhbWVkIGJ5IGhpcyBmcmllbmRzIGZvciBoYXZpbmcgc3RyZW5ndGhlbmVkIGFnYWluc3QgaGltc2VsZiBhIG1hbiBzbyBwZXJ2ZXJzZSBhbmQgc28gY29ycnVwdGVkIGJ5IGVudnkgYW5kIGJhc2VuZXNzIGFzIEhlcmFjbGVpZGVzIHdhcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdXNpbmcgc3VjaCBhcmd1bWVudHMgYXMgdGhlc2UsIERpb24gc2V0IEhlcmFjbGVpZGVzIGFuZCBUaGVvZG90ZXMgZnJlZS4gVGhlbiB0dXJuaW5nIGhpcyBhdHRlbnRpb24gdG8gdGhlIHNpZWdlLXdhbGwsIGhlIGJhZGUgZWFjaCBvbmUgb2YgdGhlIFN5cmFjdXNhbnMgdG8gY3V0IGEgc3Rha2UgYW5kIGxheSBpdCBkb3duIG5lYXIgdGhlIHdvcmtzLCBhbmQgc2V0dGluZyBoaXMgbWVyY2VuYXJpZXMgdG8gdGhlIHRhc2sgYWxsIG5pZ2h0LCB3aGlsZSB0aGUgU3lyYWN1c2FucyB3ZXJlIHJlc3RpbmcsIGhlIHN1Y2NlZWRlZCBpbiBmZW5jaW5nIG9mZiB0aGUgYWNyb3BvbGlzLCBzbyB0aGF0IHdoZW4gZGF5IGNhbWUgdGhlIGNpdGl6ZW5zIGFuZCB0aGUgZW5lbXkgYWxpa2Ugd2VyZSBhbWF6ZWQgdG8gc2VlIHdpdGggd2hhdCBzcGVlZCB0aGUgd29yayBoYWQgYmVlbiBhY2NvbXBsaXNoZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gYnVyaWVkIHRoZSBkZWFkIFN5cmFjdXNhbnMsIHJhbnNvbWVkIHRob3NlIHdobyBoYWQgYmVlbiB0YWtlbiBwcmlzb25lcnMsIGFsdGhvdWdoIHRoZXkgd2VyZSBmdWxseSB0d28gdGhvdXNhbmQgaW4gbnVtYmVyLCBhbmQgdGhlbiBoZWxkIGFuIGFzc2VtYmx5LiBIZXJlIEhlcmFjbGVpZGVzIGNhbWUgZm9yd2FyZCB3aXRoIGEgbW90aW9uIHRoYXQgRGlvbiBzaG91bGQgYmUgY2hvc2VuIGdlbmVyYWwgd2l0aCBhYnNvbHV0ZSBwb3dlcnMgYnkgbGFuZCBhbmQgc2VhLiBUaGUgYXJpc3RvY3JhY3kgYXBwcm92ZWQgb2YgdGhpcyBtb3Rpb24gYW5kIHVyZ2VkIHRoZSBhcHBvaW50bWVudDsgYnV0IHRoZSBtb2Igb2Ygc2FpbG9ycyBhbmQgZGF5LWxhYm91cmVycyB0dW11bHR1b3VzbHkgb3Bwb3NlZCBpdCwgYmVpbmcgdmV4ZWQgdGhhdCBIZXJhY2xlaWRlcyBzaG91bGQgbG9zZSBoaXMgb2ZmaWNlIG9mIGFkbWlyYWwsIGFuZCBjb25zaWRlcmluZyBoaW0sIGV2ZW4gdGhvdWdoIGdvb2QgZm9yIG5vdGhpbmcgaW4gb3RoZXIgd2F5cywgYXQgbGVhc3QgYWx0b2dldGhlciBtb3JlIGEgbWFuIG9mIHRoZSBwZW9wbGUgdGhhbiBEaW9uIGFuZCBtb3JlIHVuZGVyIHRoZSBjb250cm9sIG9mIHRoZSBtdWx0aXR1ZGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['48.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgcG9pbnQgRGlvbiB5aWVsZGVkIHRvIHRoZW0sIGFuZCByZXN0b3JlZCB0aGUgY29tbWFuZCBieSBzZWEgdG8gSGVyYWNsZWlkZXM7IGJ1dCB3aGVuIHRoZXkgaW5zaXN0ZWQgdXBvbiB0aGUgcmVkaXN0cmlidXRpb24gb2YgbGFuZCBhbmQgaG91c2VzLCBoZSBvcHBvc2VkIHRoZW0gYW5kIHJlcGVhbGVkIHRoZWlyIGZvcm1lciBkZWNyZWVzIG9uIHRoaXMgaGVhZCwgdGhlcmVieSB3aW5uaW5nIHRoZWlyIGRpc3BsZWFzdXJlLiBXaGVyZWZvcmUgSGVyYWNsZWlkZXMgYXQgb25jZSByZW5ld2VkIGhpcyBtYWNoaW5hdGlvbnMsIGFuZCwgd2hlbiBoZSB3YXMgc3RhdGlvbmVkIGF0IE1lc3NhbmEsIGFydGZ1bGx5IHRyaWVkIHRvIGV4YXNwZXJhdGUgYWdhaW5zdCBEaW9uIHRoZSBzb2xkaWVycyBhbmQgc2FpbG9ycyB3aG8gaGFkIHNhaWxlZCB0aGl0aGVyIHdpdGggaGltLCBkZWNsYXJpbmcgdGhhdCBEaW9uIGludGVuZGVkIHRvIG1ha2UgaGltc2VsZiB0eXJhbnQ7IGJ1dCBoZSBoaW1zZWxmIHdhcyBhbGwgdGhlIHdoaWxlIG1ha2luZyBzZWNyZXQgY29tcGFjdHMgd2l0aCBEaW9ueXNpdXMgdGhyb3VnaCB0aGUgYWdlbmN5IG9mIFBoYXJheCB0aGUgU3BhcnRhbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['48.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyB3YXMgc3VzcGVjdGVkIGJ5IHRoZSBiZXR0ZXIgY2xhc3Mgb2YgU3lyYWN1c2FucywgdGhlcmUgd2FzIGRpc3NlbnNpb24gaW4gdGhlIGFybXksIGFuZCB0aGVyZWZvcmUgcGVycGxleGl0eSBhbmQgd2FudCBvZiBwcm92aXNpb25zIGluIFN5cmFjdXNlLCBzbyB0aGF0IERpb24gd2FzIGFsdG9nZXRoZXIgYXQgYSBsb3NzIHdoYXQgdG8gZG8sIGFuZCB3YXMgYmxhbWVkIGJ5IGhpcyBmcmllbmRzIGZvciBoYXZpbmcgc3RyZW5ndGhlbmVkIGFnYWluc3QgaGltc2VsZiBhIG1hbiBzbyBwZXJ2ZXJzZSBhbmQgc28gY29ycnVwdGVkIGJ5IGVudnkgYW5kIGJhc2VuZXNzIGFzIEhlcmFjbGVpZGVzIHdhcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBQaGFyYXggd2FzIGVuY2FtcGVkIGF0IE5lYXBvbGlzLCBpbiB0aGUgdGVycml0b3J5IG9mIEFncmlnZW50dW0sIGFuZCB0aGl0aGVyIERpb24gbGVkIGZvcnRoIHRoZSBTeXJhY3VzYW5zLiBEaW9uIHdpc2hlZCB0byBzZXR0bGUgdGhlIGlzc3VlIGJldHdlZW4gdGhlbSBhdCBhIGxhdGVyIG9wcG9ydHVuaXR5LCBidXQgSGVyYWNsZWlkZXMgYW5kIGhpcyBzYWlsb3JzIGtlcHQgY3J5aW5nIG91dCBhZ2FpbnN0IGhpbSwgc2F5aW5nIHRoYXQgaGlzIHdpc2ggd2FzIG5vdCB0byBkZWNpZGUgdGhlIHdhciBieSBhIGJhdHRsZSwgYnV0IHRvIGhhdmUgaXQgbGFzdCBmb3JldmVyLCB0aGF0IGhlIG1pZ2h0IHJlbWFpbiBpbiBwb3dlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIHRoZXJlZm9yZSBmb3JjZWQgaW50byBhbiBlbmdhZ2VtZW50LCBhbmQgd2FzIHdvcnN0ZWQuIFNpbmNlLCBob3dldmVyLCB0aGUgZGVmZWF0IG9mIGhpcyBtZW4gd2FzIG5vdCBzZXZlcmUsIGJ1dCBkdWUgbW9yZSB0byB0aGVpciBvd24gc2VkaXRpb3VzIGRpc29yZGVycyB0aGFuIHRvIHRoZSBlbmVteSwgRGlvbiBhZ2FpbiBwcmVwYXJlZCBmb3IgYmF0dGxlIGFuZCBkcmV3IHVwIGhpcyBmb3JjZXMsIHBlcnN1YWRpbmcgYW5kIGVuY291cmFnaW5nIHRoZW0uIEJ1dCBpbiB0aGUgZXZlbmluZyB3b3JkIHdhcyBicm91Z2h0IHRvIGhpbSB0aGF0IEhlcmFjbGVpZGVzIHdpdGggaGlzIGZsZWV0IHdhcyBzYWlsaW5nIGZvciBTeXJhY3VzZSwgZGV0ZXJtaW5lZCB0byBvY2N1cHkgdGhlIGNpdHkgYW5kIHNodXQgRGlvbiBhbmQgaGlzIGFybXkgb3V0IG9mIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbW1lZGlhdGVseSwgdGhlcmVmb3JlLCBoZSB0b29rIHdpdGggaGltIGhpcyBtb3N0IGluZmx1ZW50aWFsIGFuZCB6ZWFsb3VzIHN1cHBvcnRlcnMgYW5kIHJvZGUgYWxsIG5pZ2h0LCBhbmQgYWJvdXQgbmluZSBvJ2Nsb2NrIG5leHQgZGF5IHdhcyBhdCB0aGUgZ2F0ZXMgb2YgdGhlIGNpdHksIGhhdmluZyBjb3ZlcmVkIHNldmVuIGh1bmRyZWQgZnVybG9uZ3MuIEJ1dCBIZXJhY2xlaWRlcywgd2hvLCBpbiBzcGl0ZSBvZiBhbGwgaGlzIGVmZm9ydHMsIGFycml2ZWQgdG9vIGxhdGUgd2l0aCBoaXMgc2hpcHMsIHB1dCBvdXQgdG8gc2VhIGFnYWluLCBhbmQgYmVpbmcgd2l0aG91dCBkZWZpbml0ZSBwbGFucywgZmVsbCBpbiB3aXRoIEdhZXN5bHVzIHRoZSBTcGFydGFuLCB3aG8gaW5zaXN0ZWQgdGhhdCBoZSB3YXMgc2FpbGluZyBmcm9tIFNwYXJ0YSB0byB0YWtlIGNvbW1hbmQgb2YgdGhlIFNpY2lsaWFucywgYXMgR3lsaXBwdXMgaGFkIGZvcm1lcmx5IGRvbmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiAxOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk5pY2lhczwvdGl0bGU+LCBjaGFwdGVycyB4aXguIGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmFjbGVpZGVzLCBhY2NvcmRpbmdseSwgZ2xhZGx5IHRvb2sgdXAgdGhpcyBtYW4sIGF0dGFjaGVkIGhpbSB0byBoaW1zZWxmIGxpa2UgYW4gYW11bGV0LCBhcyBpdCB3ZXJlIGFnYWluc3QgdGhlIGluZmx1ZW5jZSBvZiBEaW9uLCBhbmQgc2hvd2VkIGhpbSB0byBoaXMgY29uZmVkZXJhdGVzOyB0aGVuLCBzZWNyZXRseSBzZW5kaW5nIGEgaGVyYWxkIHRvIFN5cmFjdXNlLCBoZSBvcmRlcmVkIHRoZSBjaXRpemVucyB0byByZWNlaXZlIHRoZWlyIFNwYXJ0YW4gY29tbWFuZGVyLiBEaW9uLCBob3dldmVyLCBtYWRlIGFuc3dlciB0aGF0IHRoZSBTeXJhY3VzYW5zIGhhZCBjb21tYW5kZXJzIGVub3VnaCwgYW5kIHRoYXQgaWYgdGhlaXIgc2l0dWF0aW9uIGFic29sdXRlbHkgcmVxdWlyZWQgYSBTcGFydGFuIGFsc28sIGhlIGhpbXNlbGYgd2FzIHRoZSBtYW4sIHNpbmNlIGhlIGhhZCBiZWVuIG1hZGUgYSBjaXRpemVuIG9mIFNwYXJ0YS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmV1cG9uIEdhZXN5bHVzIGdhdmUgdXAgaGlzIHByZXRlbnNpb25zIHRvIHRoZSBjb21tYW5kLCBhbmQgc2FpbGluZyB0byBEaW9uLCBlZmZlY3RlZCBhIHJlY29uY2lsaWF0aW9uIGJldHdlZW4gaGltIGFuZCBIZXJhY2xlaWRlcywgd2hvIHRvb2sgb2F0aHMgYW5kIG1hZGUgdGhlIG1vc3Qgc29sZW1uIHBsZWRnZXMsIGluIHN1cHBvcnQgb2Ygd2hpY2ggR2Flc3lsdXMgaGltc2VsZiBzd29yZSB0aGF0IGhlIHdvdWxkIGF2ZW5nZSBEaW9uIGFuZCBwdW5pc2ggSGVyYWNsZWlkZXMgaWYgaGUgd29ya2VkIGFueSBtb3JlIG1pc2NoaWVmLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBQaGFyYXggd2FzIGVuY2FtcGVkIGF0IE5lYXBvbGlzLCBpbiB0aGUgdGVycml0b3J5IG9mIEFncmlnZW50dW0sIGFuZCB0aGl0aGVyIERpb24gbGVkIGZvcnRoIHRoZSBTeXJhY3VzYW5zLiBEaW9uIHdpc2hlZCB0byBzZXR0bGUgdGhlIGlzc3VlIGJldHdlZW4gdGhlbSBhdCBhIGxhdGVyIG9wcG9ydHVuaXR5LCBidXQgSGVyYWNsZWlkZXMgYW5kIGhpcyBzYWlsb3JzIGtlcHQgY3J5aW5nIG91dCBhZ2FpbnN0IGhpbSwgc2F5aW5nIHRoYXQgaGlzIHdpc2ggd2FzIG5vdCB0byBkZWNpZGUgdGhlIHdhciBieSBhIGJhdHRsZSwgYnV0IHRvIGhhdmUgaXQgbGFzdCBmb3JldmVyLCB0aGF0IGhlIG1pZ2h0IHJlbWFpbiBpbiBwb3dlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyB0aGVyZWZvcmUgZm9yY2VkIGludG8gYW4gZW5nYWdlbWVudCwgYW5kIHdhcyB3b3JzdGVkLiBTaW5jZSwgaG93ZXZlciwgdGhlIGRlZmVhdCBvZiBoaXMgbWVuIHdhcyBub3Qgc2V2ZXJlLCBidXQgZHVlIG1vcmUgdG8gdGhlaXIgb3duIHNlZGl0aW91cyBkaXNvcmRlcnMgdGhhbiB0byB0aGUgZW5lbXksIERpb24gYWdhaW4gcHJlcGFyZWQgZm9yIGJhdHRsZSBhbmQgZHJldyB1cCBoaXMgZm9yY2VzLCBwZXJzdWFkaW5nIGFuZCBlbmNvdXJhZ2luZyB0aGVtLiBCdXQgaW4gdGhlIGV2ZW5pbmcgd29yZCB3YXMgYnJvdWdodCB0byBoaW0gdGhhdCBIZXJhY2xlaWRlcyB3aXRoIGhpcyBmbGVldCB3YXMgc2FpbGluZyBmb3IgU3lyYWN1c2UsIGRldGVybWluZWQgdG8gb2NjdXB5IHRoZSBjaXR5IGFuZCBzaHV0IERpb24gYW5kIGhpcyBhcm15IG91dCBvZiBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkltbWVkaWF0ZWx5LCB0aGVyZWZvcmUsIGhlIHRvb2sgd2l0aCBoaW0gaGlzIG1vc3QgaW5mbHVlbnRpYWwgYW5kIHplYWxvdXMgc3VwcG9ydGVycyBhbmQgcm9kZSBhbGwgbmlnaHQsIGFuZCBhYm91dCBuaW5lIG8nY2xvY2sgbmV4dCBkYXkgd2FzIGF0IHRoZSBnYXRlcyBvZiB0aGUgY2l0eSwgaGF2aW5nIGNvdmVyZWQgc2V2ZW4gaHVuZHJlZCBmdXJsb25ncy4gQnV0IEhlcmFjbGVpZGVzLCB3aG8sIGluIHNwaXRlIG9mIGFsbCBoaXMgZWZmb3J0cywgYXJyaXZlZCB0b28gbGF0ZSB3aXRoIGhpcyBzaGlwcywgcHV0IG91dCB0byBzZWEgYWdhaW4sIGFuZCBiZWluZyB3aXRob3V0IGRlZmluaXRlIHBsYW5zLCBmZWxsIGluIHdpdGggR2Flc3lsdXMgdGhlIFNwYXJ0YW4sIHdobyBpbnNpc3RlZCB0aGF0IGhlIHdhcyBzYWlsaW5nIGZyb20gU3BhcnRhIHRvIHRha2UgY29tbWFuZCBvZiB0aGUgU2ljaWxpYW5zLCBhcyBHeWxpcHB1cyBoYWQgZm9ybWVybHkgZG9uZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTmljLiAxOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TmljaWFzPC90aXRsZT4sIGNoYXB0ZXJzIHhpeC4gZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOaWMuIDE5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OaWNpYXM8L3RpdGxlPiwgY2hhcHRlcnMgeGl4LiBmZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk5pY2lhczwvdGl0bGU+LCBjaGFwdGVycyB4aXguIGZmLjwvdHJhbnNsYXRpb24+"
translation['49.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlcmFjbGVpZGVzLCBhY2NvcmRpbmdseSwgZ2xhZGx5IHRvb2sgdXAgdGhpcyBtYW4sIGF0dGFjaGVkIGhpbSB0byBoaW1zZWxmIGxpa2UgYW4gYW11bGV0LCBhcyBpdCB3ZXJlIGFnYWluc3QgdGhlIGluZmx1ZW5jZSBvZiBEaW9uLCBhbmQgc2hvd2VkIGhpbSB0byBoaXMgY29uZmVkZXJhdGVzOyB0aGVuLCBzZWNyZXRseSBzZW5kaW5nIGEgaGVyYWxkIHRvIFN5cmFjdXNlLCBoZSBvcmRlcmVkIHRoZSBjaXRpemVucyB0byByZWNlaXZlIHRoZWlyIFNwYXJ0YW4gY29tbWFuZGVyLiBEaW9uLCBob3dldmVyLCBtYWRlIGFuc3dlciB0aGF0IHRoZSBTeXJhY3VzYW5zIGhhZCBjb21tYW5kZXJzIGVub3VnaCwgYW5kIHRoYXQgaWYgdGhlaXIgc2l0dWF0aW9uIGFic29sdXRlbHkgcmVxdWlyZWQgYSBTcGFydGFuIGFsc28sIGhlIGhpbXNlbGYgd2FzIHRoZSBtYW4sIHNpbmNlIGhlIGhhZCBiZWVuIG1hZGUgYSBjaXRpemVuIG9mIFNwYXJ0YS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['49.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiBHYWVzeWx1cyBnYXZlIHVwIGhpcyBwcmV0ZW5zaW9ucyB0byB0aGUgY29tbWFuZCwgYW5kIHNhaWxpbmcgdG8gRGlvbiwgZWZmZWN0ZWQgYSByZWNvbmNpbGlhdGlvbiBiZXR3ZWVuIGhpbSBhbmQgSGVyYWNsZWlkZXMsIHdobyB0b29rIG9hdGhzIGFuZCBtYWRlIHRoZSBtb3N0IHNvbGVtbiBwbGVkZ2VzLCBpbiBzdXBwb3J0IG9mIHdoaWNoIEdhZXN5bHVzIGhpbXNlbGYgc3dvcmUgdGhhdCBoZSB3b3VsZCBhdmVuZ2UgRGlvbiBhbmQgcHVuaXNoIEhlcmFjbGVpZGVzIGlmIGhlIHdvcmtlZCBhbnkgbW9yZSBtaXNjaGllZi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyB0aGUgU3lyYWN1c2FucyBkaXNjaGFyZ2VkIHRoZWlyIGZsZWV0LCBzaW5jZSBpdCB3YXMgb2Ygbm8gdXNlLCB3aGlsZSBpdCBpbnZvbHZlZCBncmVhdCBvdXRsYXlzIGZvciB0aGUgY3Jld3MsIGFuZCBjYXVzZWQgZGlzc2Vuc2lvbiBhbW9uZyB0aGVpciBjb21tYW5kZXJzOyB0aGV5IGFsc28gbGFpZCBzaWVnZSB0byB0aGUgY2l0YWRlbCBhZnRlciB0aGV5IGhhZCBmaW5pc2hlZCBidWlsZGluZyB0aGUgd2FsbCB0aGF0IGVuY2xvc2VkIGl0LiBObyBvbmUgY2FtZSB0byB0aGUgaGVscCBvZiB0aGUgYmVzaWVnZWQsIHByb3Zpc2lvbnMgZmFpbGVkIHRoZW0sIGFuZCB0aGUgbWVyY2VuYXJpZXMgYmVjYW1lIG11dGlub3VzLCBzbyB0aGF0IHRoZSBzb24gb2YgRGlvbnlzaXVzIGdhdmUgdXAgaGlzIGNhdXNlIGZvciBsb3N0IGFuZCBtYWRlIHRlcm1zIHdpdGggRGlvbi4gVGhlIGNpdGFkZWwgaGUgaGFuZGVkIG92ZXIgdG8gaGltIHRvZ2V0aGVyIHdpdGggdGhlIGFybXMgYW5kIG90aGVyIGVxdWlwbWVudCB0aGVyZSwgd2hpbGUgaGUgaGltc2VsZiwgdGFraW5nIGhpcyBtb3RoZXIgYW5kIHNpc3RlcnMgYW5kIG1hbm5pbmcgZml2ZSB0cmlyZW1lcywgc2FpbGVkIGF3YXkgdG8gaGlzIGZhdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RGlvbiBhbGxvd2VkIGhpbSB0byBkZXBhcnQgaW4gc2FmZXR5LCBhbmQgbm8gb25lIHdobyB3YXMgdGhlbiBpbiBTeXJhY3VzZSBtaXNzZWQgdGhhdCBzaWdodCwgbmF5LCB0aGV5IGNhbGxlZCB1cG9uIHRoZSBhYnNlbnQgb25lcyBhbHNvLCBwaXR5aW5nIHRoZW0gYmVjYXVzZSB0aGV5IGNvdWxkIG5vdCBiZWhvbGQgdGhpcyBkYXkgYW5kIHRoZSByaXNpbmcgb2YgdGhlIHN1biB1cG9uIGEgZnJlZSBTeXJhY3VzZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHNpbmNlLCBhbW9uZyB0aGUgaWxsdXN0cmF0aW9ucyBtZW4gZ2l2ZSBvZiB0aGUgbXV0YXRpb25zIG9mIGZvcnR1bmUsIHRoZSBleHB1bHNpb24gb2YgRGlvbnlzaXVzIGlzIHN0aWxsIHRvIHRoaXMgZGF5IHRoZSBzdHJvbmdlc3QgYW5kIHBsYWluZXN0LCB3aGF0IGpveSBtdXN0IHdlIHN1cHBvc2UgdGhvc2UgbWVuIHRoZW1zZWx2ZXMgdGhlbiBmZWx0LCBhbmQgaG93IGdyZWF0IGEgcHJpZGUsIHdobywgd2l0aCB0aGUgZmV3ZXN0IHJlc291cmNlcywgb3Zlci10aHJldyB0aGUgZ3JlYXRlc3QgdHlyYW5ueSB0aGF0IGV2ZXIgd2FzIQoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['50.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyB0aGUgU3lyYWN1c2FucyBkaXNjaGFyZ2VkIHRoZWlyIGZsZWV0LCBzaW5jZSBpdCB3YXMgb2Ygbm8gdXNlLCB3aGlsZSBpdCBpbnZvbHZlZCBncmVhdCBvdXRsYXlzIGZvciB0aGUgY3Jld3MsIGFuZCBjYXVzZWQgZGlzc2Vuc2lvbiBhbW9uZyB0aGVpciBjb21tYW5kZXJzOyB0aGV5IGFsc28gbGFpZCBzaWVnZSB0byB0aGUgY2l0YWRlbCBhZnRlciB0aGV5IGhhZCBmaW5pc2hlZCBidWlsZGluZyB0aGUgd2FsbCB0aGF0IGVuY2xvc2VkIGl0LiBObyBvbmUgY2FtZSB0byB0aGUgaGVscCBvZiB0aGUgYmVzaWVnZWQsIHByb3Zpc2lvbnMgZmFpbGVkIHRoZW0sIGFuZCB0aGUgbWVyY2VuYXJpZXMgYmVjYW1lIG11dGlub3VzLCBzbyB0aGF0IHRoZSBzb24gb2YgRGlvbnlzaXVzIGdhdmUgdXAgaGlzIGNhdXNlIGZvciBsb3N0IGFuZCBtYWRlIHRlcm1zIHdpdGggRGlvbi4gVGhlIGNpdGFkZWwgaGUgaGFuZGVkIG92ZXIgdG8gaGltIHRvZ2V0aGVyIHdpdGggdGhlIGFybXMgYW5kIG90aGVyIGVxdWlwbWVudCB0aGVyZSwgd2hpbGUgaGUgaGltc2VsZiwgdGFraW5nIGhpcyBtb3RoZXIgYW5kIHNpc3RlcnMgYW5kIG1hbm5pbmcgZml2ZSB0cmlyZW1lcywgc2FpbGVkIGF3YXkgdG8gaGlzIGZhdGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['50.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkRpb24gYWxsb3dlZCBoaW0gdG8gZGVwYXJ0IGluIHNhZmV0eSwgYW5kIG5vIG9uZSB3aG8gd2FzIHRoZW4gaW4gU3lyYWN1c2UgbWlzc2VkIHRoYXQgc2lnaHQsIG5heSwgdGhleSBjYWxsZWQgdXBvbiB0aGUgYWJzZW50IG9uZXMgYWxzbywgcGl0eWluZyB0aGVtIGJlY2F1c2UgdGhleSBjb3VsZCBub3QgYmVob2xkIHRoaXMgZGF5IGFuZCB0aGUgcmlzaW5nIG9mIHRoZSBzdW4gdXBvbiBhIGZyZWUgU3lyYWN1c2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['50.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzaW5jZSwgYW1vbmcgdGhlIGlsbHVzdHJhdGlvbnMgbWVuIGdpdmUgb2YgdGhlIG11dGF0aW9ucyBvZiBmb3J0dW5lLCB0aGUgZXhwdWxzaW9uIG9mIERpb255c2l1cyBpcyBzdGlsbCB0byB0aGlzIGRheSB0aGUgc3Ryb25nZXN0IGFuZCBwbGFpbmVzdCwgd2hhdCBqb3kgbXVzdCB3ZSBzdXBwb3NlIHRob3NlIG1lbiB0aGVtc2VsdmVzIHRoZW4gZmVsdCwgYW5kIGhvdyBncmVhdCBhIHByaWRlLCB3aG8sIHdpdGggdGhlIGZld2VzdCByZXNvdXJjZXMsIG92ZXItdGhyZXcgdGhlIGdyZWF0ZXN0IHR5cmFubnkgdGhhdCBldmVyIHdhcyEKCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQXBvbGxvY3JhdGVzIGhhZCBzYWlsZWQgYXdheSwgYW5kIHdoZW4gRGlvbiB3YXMgb24gaGlzIHdheSB0byB0aGUgYWNyb3BvbGlzLCB0aGUgd29tZW4gY291bGQgbm90IHJlc3RyYWluIHRoZW1zZWx2ZXMgbm9yIGF3YWl0IGhpcyBlbnRyYW5jZSwgYnV0IHJhbiBvdXQgdG8gdGhlIGdhdGVzLCBBcmlzdG9tYWNoZSBsZWFkaW5nIERpb24ncyBzb24sIHdoaWxlIEFyZXRlIGZvbGxvd2VkIGFmdGVyIHRoZW0gaW4gdGVhcnMsIGFuZCBhdCBhIGxvc3MgaG93IHRvIGdyZWV0IGFuZCBhZGRyZXNzIGhlciBodXNiYW5kIG5vdyB0aGF0IHNoZSBoYWQgbGl2ZWQgd2l0aCBhbm90aGVyIG1hbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgRGlvbiBoYWQgZ3JlZXRlZCBoaXMgc2lzdGVyIGZpcnN0LCBhbmQgdGhlbiBoaXMgbGl0dGxlIHNvbiwgQXJpc3RvbWFjaGUgbGVkIEFyZXRlIHRvIGhpbSwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2Ugd2VyZSB1bmhhcHB5LCBEaW9uLCB3aGlsZSB0aG91IHdhc3QgaW4gZXhpbGU7IGJ1dCBub3cgdGhhdCB0aG91IGFydCBjb21lIGFuZCBhcnQgdmljdG9yaW91cywgdGhvdSBoYXN0IHRha2VuIGF3YXkgb3VyIHNvcnJvdyBmcm9tIGFsbCBvZiB1cywgZXhjZXB0IGZyb20gdGhpcyB3b21hbiBhbG9uZSwgd2hvbSBJIHdhcyBzbyB1bmZvcnR1bmF0ZSBhcyB0byBzZWUgZm9yY2VkIHRvIHdlZCBhbm90aGVyIHdoaWxlIHRob3Ugd2FzdCBzdGlsbCBhbGl2ZS4gU2luY2UsIHRoZW4sIGZvcnR1bmUgaGFzIG1hZGUgdGhlZSBvdXIgbG9yZCBhbmQgbWFzdGVyLCBob3cgd2lsdCB0aG91IGp1ZGdlIG9mIHRoZSBjb21wdWxzaW9uIGxhaWQgdXBvbiBoZXI/IElzIGl0IGFzIGhlciB1bmNsZSBvciBhcyBoZXIgaHVzYmFuZCB0aGF0IHNoZSBpcyB0byBncmVldCB0aGVlPzwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TbyBzcGFrZSBBcmlzdG9tYWNoZSwgYW5kIERpb24sIGJ1cnN0aW5nIGludG8gdGVhcnMsIGVtYnJhY2VkIGhpcyB3aWZlIGZvbmRseSwgZ2F2ZSBoZXIgaGlzIHNvbiwgYW5kIGJhZGUgaGVyIGdvIHRvIGhpcyBvd24gaG91c2UgYW5kIHRoZXJlIGhlIGhpbXNlbGYgYWxzbyBkd2VsdCwgYWZ0ZXIgaGUgaGFkIHB1dCB0aGUgY2l0YWRlbCBpbiBjaGFyZ2Ugb2YgdGhlIFN5cmFjdXNhbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['51.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQXBvbGxvY3JhdGVzIGhhZCBzYWlsZWQgYXdheSwgYW5kIHdoZW4gRGlvbiB3YXMgb24gaGlzIHdheSB0byB0aGUgYWNyb3BvbGlzLCB0aGUgd29tZW4gY291bGQgbm90IHJlc3RyYWluIHRoZW1zZWx2ZXMgbm9yIGF3YWl0IGhpcyBlbnRyYW5jZSwgYnV0IHJhbiBvdXQgdG8gdGhlIGdhdGVzLCBBcmlzdG9tYWNoZSBsZWFkaW5nIERpb24ncyBzb24sIHdoaWxlIEFyZXRlIGZvbGxvd2VkIGFmdGVyIHRoZW0gaW4gdGVhcnMsIGFuZCBhdCBhIGxvc3MgaG93IHRvIGdyZWV0IGFuZCBhZGRyZXNzIGhlciBodXNiYW5kIG5vdyB0aGF0IHNoZSBoYWQgbGl2ZWQgd2l0aCBhbm90aGVyIG1hbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['51.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIERpb24gaGFkIGdyZWV0ZWQgaGlzIHNpc3RlciBmaXJzdCwgYW5kIHRoZW4gaGlzIGxpdHRsZSBzb24sIEFyaXN0b21hY2hlIGxlZCBBcmV0ZSB0byBoaW0sIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2Ugd2VyZSB1bmhhcHB5LCBEaW9uLCB3aGlsZSB0aG91IHdhc3QgaW4gZXhpbGU7IGJ1dCBub3cgdGhhdCB0aG91IGFydCBjb21lIGFuZCBhcnQgdmljdG9yaW91cywgdGhvdSBoYXN0IHRha2VuIGF3YXkgb3VyIHNvcnJvdyBmcm9tIGFsbCBvZiB1cywgZXhjZXB0IGZyb20gdGhpcyB3b21hbiBhbG9uZSwgd2hvbSBJIHdhcyBzbyB1bmZvcnR1bmF0ZSBhcyB0byBzZWUgZm9yY2VkIHRvIHdlZCBhbm90aGVyIHdoaWxlIHRob3Ugd2FzdCBzdGlsbCBhbGl2ZS4gU2luY2UsIHRoZW4sIGZvcnR1bmUgaGFzIG1hZGUgdGhlZSBvdXIgbG9yZCBhbmQgbWFzdGVyLCBob3cgd2lsdCB0aG91IGp1ZGdlIG9mIHRoZSBjb21wdWxzaW9uIGxhaWQgdXBvbiBoZXI/IElzIGl0IGFzIGhlciB1bmNsZSBvciBhcyBoZXIgaHVzYmFuZCB0aGF0IHNoZSBpcyB0byBncmVldCB0aGVlPzwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['51.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIHNwYWtlIEFyaXN0b21hY2hlLCBhbmQgRGlvbiwgYnVyc3RpbmcgaW50byB0ZWFycywgZW1icmFjZWQgaGlzIHdpZmUgZm9uZGx5LCBnYXZlIGhlciBoaXMgc29uLCBhbmQgYmFkZSBoZXIgZ28gdG8gaGlzIG93biBob3VzZSBhbmQgdGhlcmUgaGUgaGltc2VsZiBhbHNvIGR3ZWx0LCBhZnRlciBoZSBoYWQgcHV0IHRoZSBjaXRhZGVsIGluIGNoYXJnZSBvZiB0aGUgU3lyYWN1c2Fucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGF0IGhpcyBlbnRlcnByaXNlIGhhZCBiZWVuIHNvIHN1Y2Nlc3NmdWwsIGhlIHRob3VnaHQgaXQgbm90IHJpZ2h0IHRvIGVuam95IGhpcyBwcmVzZW50IGdvb2QgZm9ydHVuZSBiZWZvcmUgZGlzdHJpYnV0aW5nIHRoYW5rcyB0byBoaXMgZnJpZW5kcywgcmV3YXJkcyB0byBoaXMgYWxsaWVzLCBhbmQgcGFydGljdWxhcmx5IHRvIGhpcyBBdGhlbmlhbiBhc3NvY2lhdGVzIGFuZCB0byBoaXMgbWVyY2VuYXJpZXMgc29tZSBtYXJrIG9mIGtpbmRuZXNzIGFuZCBob25vdXIsIGhpcyBnZW5lcm9zaXR5IGxlYWRpbmcgaGltIGJleW9uZCBoaXMgcmVzb3VyY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgZm9yIGhpbXNlbGYsIGhlIGxpdmVkIHdpdGggc2ltcGxpY2l0eSBhbmQgbW9kZXJhdGlvbiBvbiB3aGF0IGhlIGhhZCwgYW5kIG1lbiB3b25kZXJlZCBhdCBoaW0gYmVjYXVzZSwgd2hpbGUgaGlzIHN1Y2Nlc3NlcyBkcmV3IHVwb24gaGltIHRoZSBleWVzIG5vdCBvbmx5IG9mIFNpY2lseSBhbmQgQ2FydGhhZ2UsIGJ1dCBhbHNvIG9mIGFsbCBIZWxsYXMsIGFuZCB3aGlsZSBoZSB3YXMgcmVnYXJkZWQgYnkgdGhlIHBlb3BsZSBvZiB0aGF0IHRpbWUgYXMgdGhlIGdyZWF0ZXN0IG9mIGxpdmluZyBtZW4sIGFuZCB3YXMgdGhvdWdodCB0byBiZSBibGVzc2VkIHdpdGggY291cmFnZSBhbmQgZ29vZCBmb3J0dW5lIGJleW9uZCBhbnkgb3RoZXIgY29tbWFuZGVyLCBoZSB3YXMgbmV2ZXJ0aGVsZXNzIHNvIG1vZGVzdCBpbiBoaXMgZHJlc3MsIGhpcyBhdHRlbmRhbmNlLCBhbmQgaGlzIHRhYmxlLCBqdXN0IGFzIHRob3VnaCBoZSB3ZXJlIG1lc3Npbmcgd2l0aCBQbGF0byBpbiB0aGUgQWNhZGVteSwgYW5kIG5vdCBsaXZpbmcgYW1vbmcgY2FwdGFpbnMgb2YgbWVyY2VuYXJpZXMgYW5kIHBhaWQgc29sZGllcnMsIHdobyBmaW5kIGluIHRoZWlyIGRhaWx5IGZlYXN0aW5ncywgYW5kIG90aGVyIGVuam95bWVudHMsIGEgc29sYWNlIGZvciB0aGVpciB0b2lscyBhbmQgcGVyaWxzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5QbGF0bywgaW5kZWVkLCB3cm90ZSB0byBoaW08bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDQuMzIwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkVwaXN0LjwvdGl0bGU+IGl2LiBwLiAzMjA8L2JpYmw+OiA8Zm9yZWlnbiBsYW5nPSJncmVlayI+4b2lz4PPhM61IM+Ezr/hvbrPgiDhvJDOviDhvIHPgOG9sc+DzrfPgiDPhOG/hs+CIM6/4bywzrrOv8+FzrzhvbPOvc63z4IgzrXhvLDPgiDhvJXOvc6xIM+E4b25z4DOv869IOG8gM+Azr/Oss674b2zz4DOtc65zr0sIM66zrHhvbYg4byQzr0gzrzhvbHOu865z4PPhM6xIM+Az4HhvbjPgiDPg+G9syw8L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvbm90ZT4gdGhhdCB0aGUgZXllcyBvZiBhbGwgdGhlIHdvcmxkIHdlcmUgbm93IGZpeGVkIHVwb24gaGltIGFsb25lLCBidXQgRGlvbiBoaW1zZWxmLCBhcyBpdCB3b3VsZCBzZWVtLCBrZXB0IGhpcyBleWVzIGZpeGVkIHVwb24gb25lIHNwb3QgaW4gb25lIGNpdHksIG5hbWVseSwgdGhlIEFjYWRlbXksIGFuZCBjb25zaWRlcmVkIHRoYXQgaGlzIHNwZWN0YXRvcnMgYW5kIGp1ZGdlcyB0aGVyZSBhZG1pcmVkIG5laXRoZXIgZ3JlYXQgZXhwbG9pdHMgbm9yIGJvbGRuZXNzIG5vciB2aWN0b3JpZXMsIGJ1dCB3YXRjaGVkIHRvIHNlZSBvbmx5IHdoZXRoZXIgaGUgbWFkZSBhIGRpc2NyZWV0IGFuZCBkZWNvcm91cyB1c2Ugb2YgaGlzIGdvb2QgZm9ydHVuZSwgYW5kIHNob3dlZCBoaW1zZWxmIG1vZGVzdCBpbiBoaXMgaGlnaCBlc3RhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGUgbWFkZSBpdCBhIHBvaW50IG5vdCB0byByZW1pdCBvciByZWxheCBhdCBhbGwgdGhlIGdyYXZpdHkgb2YgaGlzIG1hbm5lcnMgb3IgaGlzIGhhdWdodGluZXNzIGluIGRlYWxpbmcgd2l0aCB0aGUgcGVvcGxlLCBhbHRob3VnaCBoaXMgc2l0dWF0aW9uIGNhbGxlZCBmb3IgYSBncmFjaW91cyBkZW1lYW5vdXIsIGFuZCBhbHRob3VnaCBQbGF0bywgYXMgSSBoYXZlIHNhaWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyA4LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd3JvdGUgYW5kIHdhcm5lZCBoaW0gdGhhdCBzZWxmLXdpbGwgd2FzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YSBjb21wYW5pb24gb2Ygc29saXR1ZGUuPC9xPiBCdXQgaGUgc2VlbXMgdG8gaGF2ZSBiZWVuIG9mIGEgdGVtcGVyIG5hdHVyYWxseSBhdmVyc2UgdG8gZ3JhY2lvdXNuZXNzLCBhbmQsIGJlc2lkZXMsIGhlIHdhcyBhbWJpdGlvdXMgdG8gY3VyYiB0aGUgU3lyYWN1c2Fucywgd2hvIHdlcmUgZ2l2ZW4gdG8gZXhjZXNzaXZlIGxpY2Vuc2UgYW5kIGx1eHVyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['52.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyB0aGF0IGhpcyBlbnRlcnByaXNlIGhhZCBiZWVuIHNvIHN1Y2Nlc3NmdWwsIGhlIHRob3VnaHQgaXQgbm90IHJpZ2h0IHRvIGVuam95IGhpcyBwcmVzZW50IGdvb2QgZm9ydHVuZSBiZWZvcmUgZGlzdHJpYnV0aW5nIHRoYW5rcyB0byBoaXMgZnJpZW5kcywgcmV3YXJkcyB0byBoaXMgYWxsaWVzLCBhbmQgcGFydGljdWxhcmx5IHRvIGhpcyBBdGhlbmlhbiBhc3NvY2lhdGVzIGFuZCB0byBoaXMgbWVyY2VuYXJpZXMgc29tZSBtYXJrIG9mIGtpbmRuZXNzIGFuZCBob25vdXIsIGhpcyBnZW5lcm9zaXR5IGxlYWRpbmcgaGltIGJleW9uZCBoaXMgcmVzb3VyY2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['52.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBmb3IgaGltc2VsZiwgaGUgbGl2ZWQgd2l0aCBzaW1wbGljaXR5IGFuZCBtb2RlcmF0aW9uIG9uIHdoYXQgaGUgaGFkLCBhbmQgbWVuIHdvbmRlcmVkIGF0IGhpbSBiZWNhdXNlLCB3aGlsZSBoaXMgc3VjY2Vzc2VzIGRyZXcgdXBvbiBoaW0gdGhlIGV5ZXMgbm90IG9ubHkgb2YgU2ljaWx5IGFuZCBDYXJ0aGFnZSwgYnV0IGFsc28gb2YgYWxsIEhlbGxhcywgYW5kIHdoaWxlIGhlIHdhcyByZWdhcmRlZCBieSB0aGUgcGVvcGxlIG9mIHRoYXQgdGltZSBhcyB0aGUgZ3JlYXRlc3Qgb2YgbGl2aW5nIG1lbiwgYW5kIHdhcyB0aG91Z2h0IHRvIGJlIGJsZXNzZWQgd2l0aCBjb3VyYWdlIGFuZCBnb29kIGZvcnR1bmUgYmV5b25kIGFueSBvdGhlciBjb21tYW5kZXIsIGhlIHdhcyBuZXZlcnRoZWxlc3Mgc28gbW9kZXN0IGluIGhpcyBkcmVzcywgaGlzIGF0dGVuZGFuY2UsIGFuZCBoaXMgdGFibGUsIGp1c3QgYXMgdGhvdWdoIGhlIHdlcmUgbWVzc2luZyB3aXRoIFBsYXRvIGluIHRoZSBBY2FkZW15LCBhbmQgbm90IGxpdmluZyBhbW9uZyBjYXB0YWlucyBvZiBtZXJjZW5hcmllcyBhbmQgcGFpZCBzb2xkaWVycywgd2hvIGZpbmQgaW4gdGhlaXIgZGFpbHkgZmVhc3RpbmdzLCBhbmQgb3RoZXIgZW5qb3ltZW50cywgYSBzb2xhY2UgZm9yIHRoZWlyIHRvaWxzIGFuZCBwZXJpbHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlBsYXRvLCBpbmRlZWQsIHdyb3RlIHRvIGhpbTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDQuMzIwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4gaXYuIHAuIDMyMDwvYmlibD46IDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPuG9pc+Dz4TOtSDPhM6/4b26z4Ig4byQzr4g4byBz4DhvbHPg863z4Igz4Thv4bPgiDOv+G8sM66zr/Phc684b2zzr3Ot8+CIM614bywz4Ig4byVzr3OsSDPhOG9uc+Azr/OvSDhvIDPgM6/zrLOu+G9s8+AzrXOuc69LCDOus6x4b22IOG8kM69IM684b2xzrvOuc+Dz4TOsSDPgM+B4b24z4Igz4PhvbMsPC9mb3JlaWduPgogICAgICAgICAgICA8L25vdGU+IHRoYXQgdGhlIGV5ZXMgb2YgYWxsIHRoZSB3b3JsZCB3ZXJlIG5vdyBmaXhlZCB1cG9uIGhpbSBhbG9uZSwgYnV0IERpb24gaGltc2VsZiwgYXMgaXQgd291bGQgc2VlbSwga2VwdCBoaXMgZXllcyBmaXhlZCB1cG9uIG9uZSBzcG90IGluIG9uZSBjaXR5LCBuYW1lbHksIHRoZSBBY2FkZW15LCBhbmQgY29uc2lkZXJlZCB0aGF0IGhpcyBzcGVjdGF0b3JzIGFuZCBqdWRnZXMgdGhlcmUgYWRtaXJlZCBuZWl0aGVyIGdyZWF0IGV4cGxvaXRzIG5vciBib2xkbmVzcyBub3IgdmljdG9yaWVzLCBidXQgd2F0Y2hlZCB0byBzZWUgb25seSB3aGV0aGVyIGhlIG1hZGUgYSBkaXNjcmVldCBhbmQgZGVjb3JvdXMgdXNlIG9mIGhpcyBnb29kIGZvcnR1bmUsIGFuZCBzaG93ZWQgaGltc2VsZiBtb2Rlc3QgaW4gaGlzIGhpZ2ggZXN0YXRlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDQuMzIwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RXBpc3QuPC90aXRsZT4gaXYuIHAuIDMyMDwvYmlibD46IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXN0LjwvdGl0bGU+IGl2LiBwLiAzMjA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvaXPg8+EzrUgz4TOv+G9us+CIOG8kM6+IOG8gc+A4b2xz4POt8+CIM+E4b+Gz4Igzr/hvLDOus6/z4XOvOG9s869zrfPgiDOteG8sM+CIOG8lc69zrEgz4ThvbnPgM6/zr0g4byAz4DOv86yzrvhvbPPgM61zrnOvSwgzrrOseG9tiDhvJDOvSDOvOG9sc67zrnPg8+EzrEgz4DPgeG9uM+CIM+D4b2zLDwvZm9yZWlnbj4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['52.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGUgbWFkZSBpdCBhIHBvaW50IG5vdCB0byByZW1pdCBvciByZWxheCBhdCBhbGwgdGhlIGdyYXZpdHkgb2YgaGlzIG1hbm5lcnMgb3IgaGlzIGhhdWdodGluZXNzIGluIGRlYWxpbmcgd2l0aCB0aGUgcGVvcGxlLCBhbHRob3VnaCBoaXMgc2l0dWF0aW9uIGNhbGxlZCBmb3IgYSBncmFjaW91cyBkZW1lYW5vdXIsIGFuZCBhbHRob3VnaCBQbGF0bywgYXMgSSBoYXZlIHNhaWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBEaW8gOC4zIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHZpaWkuIDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdyb3RlIGFuZCB3YXJuZWQgaGltIHRoYXQgc2VsZi13aWxsIHdhcyAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIERpbyA4LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdmlpaS4gMy48L2JpYmw+CiAgICAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YSBjb21wYW5pb24gb2Ygc29saXR1ZGUuPC9xPiBCdXQgaGUgc2VlbXMgdG8gaGF2ZSBiZWVuIG9mIGEgdGVtcGVyIG5hdHVyYWxseSBhdmVyc2UgdG8gZ3JhY2lvdXNuZXNzLCBhbmQsIGJlc2lkZXMsIGhlIHdhcyBhbWJpdGlvdXMgdG8gY3VyYiB0aGUgU3lyYWN1c2Fucywgd2hvIHdlcmUgZ2l2ZW4gdG8gZXhjZXNzaXZlIGxpY2Vuc2UgYW5kIGx1eHVyeS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEhlcmFjbGVpZGVzIG9uY2UgbW9yZSBzZXQgaGltc2VsZiBpbiBvcHBvc2l0aW9uIHRvIGhpbS4gVG8gYmVnaW4gd2l0aCwgd2hlbiBoZSB3YXMgaW52aXRlZCBieSBEaW9uIHRvIGF0dGVuZCB0aGUgY291bmNpbCwgaGUgcmVmdXNlZCB0byBjb21lLCBzYXlpbmcgdGhhdCBhcyBhIG1hbiBpbiBwcml2YXRlIHN0YXRpb24gaGUgd291bGQgbWVldCBpbiBhc3NlbWJseSB3aXRoIHRoZSBvdGhlciBjaXRpemVucy4gIE5leHQsIGhlIHB1YmxpY2x5IGRlbm91bmNlZCBEaW9uIGZvciBub3QgZGVtb2xpc2hpbmcgdGhlIGNpdGFkZWwsIGFuZCBmb3IgY2hlY2tpbmcgdGhlIHBlb3BsZSB3aGVuIHRoZXkgc2V0IG91dCB0byBvcGVuIHRoZSB0b21iIG9mIERpb255c2l1cyBhbmQgY2FzdCBvdXQgaGlzIGRlYWQgYm9keSwgYW5kIGZvciBzZW5kaW5nIHRvIENvcmludGggZm9yIGNvdW5zZWxsb3JzIGFuZCBjb2xsZWFndWVzIGluIHRoZSBnb3Zlcm5tZW50LCB0aGVyZWJ5IHNob3dpbmcgY29udGVtcHQgZm9yIGhpcyBmZWxsb3cgY2l0aXplbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBmYWN0IERpb24gZGlkIHNlbmQgZm9yIGFzc2lzdGFuY2UgdG8gdGhlIENvcmludGhpYW5zLCBob3BpbmcgdGhlIG1vcmUgZWFzaWx5IHRvIGVzdGFibGlzaCB0aGUgY2l2aWwgcG9saXR5IHdoaWNoIGhlIGhhZCBpbiBtaW5kIGlmIHRoZXkgd2VyZSBhdCBoaXMgc2lkZS4gQW5kIGhlIGhhZCBpdCBpbiBtaW5kIHRvIHB1dCBhIGN1cmIgdXBvbiB1bm1peGVkIGRlbW9jcmFjeSBpbiBTeXJhY3VzZSwgcmVnYXJkaW5nIGl0IGFzIG5vdCBhIGNpdmlsIHBvbGl0eSwgYnV0IHJhdGhlciwgaW4gdGhlIHdvcmRzIG9mIFBsYXRvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA1NTdkIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlJlcHVibGljPC90aXRsZT4sIHZpaWkuIHAuIDU1NyBkLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+YmF6YWFyIG9mIHBvbGl0aWVzPC9xPjsgYWxzbyB0byBlc3RhYmxpc2ggYW5kIHNldCBpbiBvcmRlciBhIG1peHR1cmUgb2YgZGVtb2NyYWN5IGFuZCByb3lhbHR5LCBzb21ld2hhdCBhZnRlciB0aGUgU3BhcnRhbiBhbmQgQ3JldGFuIGZhc2hpb24sIHdoZXJlaW4gYW4gYXJpc3RvY3JhY3kgc2hvdWxkIHByZXNpZGUsIGFuZCBhZG1pbmlzdGVyIHRoZSBtb3N0IGltcG9ydGFudCBhZmZhaXJzOyBmb3IgaGUgc2F3IHRoYXQgdGhlIENvcmludGhpYW5zIGhhZCBhIHBvbGl0eSB3aGljaCBsZWFuZWQgdG93YXJkcyBvbGlnYXJjaHksIGFuZCB0aGF0IHRoZXkgdHJhbnNhY3RlZCBsaXR0bGUgcHVibGljIGJ1c2luZXNzIGluIHRoZWlyIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEhlcmFjbGVpZGVzIG9uY2UgbW9yZSBzZXQgaGltc2VsZiBpbiBvcHBvc2l0aW9uIHRvIGhpbS4gVG8gYmVnaW4gd2l0aCwgd2hlbiBoZSB3YXMgaW52aXRlZCBieSBEaW9uIHRvIGF0dGVuZCB0aGUgY291bmNpbCwgaGUgcmVmdXNlZCB0byBjb21lLCBzYXlpbmcgdGhhdCBhcyBhIG1hbiBpbiBwcml2YXRlIHN0YXRpb24gaGUgd291bGQgbWVldCBpbiBhc3NlbWJseSB3aXRoIHRoZSBvdGhlciBjaXRpemVucy4gIE5leHQsIGhlIHB1YmxpY2x5IGRlbm91bmNlZCBEaW9uIGZvciBub3QgZGVtb2xpc2hpbmcgdGhlIGNpdGFkZWwsIGFuZCBmb3IgY2hlY2tpbmcgdGhlIHBlb3BsZSB3aGVuIHRoZXkgc2V0IG91dCB0byBvcGVuIHRoZSB0b21iIG9mIERpb255c2l1cyBhbmQgY2FzdCBvdXQgaGlzIGRlYWQgYm9keSwgYW5kIGZvciBzZW5kaW5nIHRvIENvcmludGggZm9yIGNvdW5zZWxsb3JzIGFuZCBjb2xsZWFndWVzIGluIHRoZSBnb3Zlcm5tZW50LCB0aGVyZWJ5IHNob3dpbmcgY29udGVtcHQgZm9yIGhpcyBmZWxsb3cgY2l0aXplbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['53.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBmYWN0IERpb24gZGlkIHNlbmQgZm9yIGFzc2lzdGFuY2UgdG8gdGhlIENvcmludGhpYW5zLCBob3BpbmcgdGhlIG1vcmUgZWFzaWx5IHRvIGVzdGFibGlzaCB0aGUgY2l2aWwgcG9saXR5IHdoaWNoIGhlIGhhZCBpbiBtaW5kIGlmIHRoZXkgd2VyZSBhdCBoaXMgc2lkZS4gQW5kIGhlIGhhZCBpdCBpbiBtaW5kIHRvIHB1dCBhIGN1cmIgdXBvbiB1bm1peGVkIGRlbW9jcmFjeSBpbiBTeXJhY3VzZSwgcmVnYXJkaW5nIGl0IGFzIG5vdCBhIGNpdmlsIHBvbGl0eSwgYnV0IHJhdGhlciwgaW4gdGhlIHdvcmRzIG9mIFBsYXRvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIFJlcC4gNTU3ZCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlJlcHVibGljPC90aXRsZT4sIHZpaWkuIHAuIDU1NyBkLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxhdC4gUmVwLiA1NTdkIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UmVwdWJsaWM8L3RpdGxlPiwgdmlpaS4gcC4gNTU3IGQuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5SZXB1YmxpYzwvdGl0bGU+LCB2aWlpLiBwLiA1NTcgZC48cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmJhemFhciBvZiBwb2xpdGllczwvcT47IGFsc28gdG8gZXN0YWJsaXNoIGFuZCBzZXQgaW4gb3JkZXIgYSBtaXh0dXJlIG9mIGRlbW9jcmFjeSBhbmQgcm95YWx0eSwgc29tZXdoYXQgYWZ0ZXIgdGhlIFNwYXJ0YW4gYW5kIENyZXRhbiBmYXNoaW9uLCB3aGVyZWluIGFuIGFyaXN0b2NyYWN5IHNob3VsZCBwcmVzaWRlLCBhbmQgYWRtaW5pc3RlciB0aGUgbW9zdCBpbXBvcnRhbnQgYWZmYWlyczsgZm9yIGhlIHNhdyB0aGF0IHRoZSBDb3JpbnRoaWFucyBoYWQgYSBwb2xpdHkgd2hpY2ggbGVhbmVkIHRvd2FyZHMgb2xpZ2FyY2h5LCBhbmQgdGhhdCB0aGV5IHRyYW5zYWN0ZWQgbGl0dGxlIHB1YmxpYyBidXNpbmVzcyBpbiB0aGVpciBhc3NlbWJseSBvZiB0aGUgcGVvcGxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgc2luY2UgaGUgZXhwZWN0ZWQgdGhhdCB0aGVzZSBtZWFzdXJlcyB3b3VsZCBmaW5kIHRoZWlyIGNoaWVmIG9wcG9uZW50IGluIEhlcmFjbGVpZGVzLCBhbmQgc2luY2UgdGhlIG1hbiB3YXMgaW4gZXZlcnkgd2F5IHR1cmJ1bGVudCwgZmlja2xlLCBhbmQgc2VkaXRpb3VzLCBoZSBub3cgeWllbGRlZCB0byB0aG9zZSB3aG8gaGFkIGxvbmcgd2lzaGVkIHRvIGtpbGwgaGltLCBidXQgd2hvbSBoZSBoYWQgaGl0aGVydG8gcmVzdHJhaW5lZDsgc28gdGhleSBtYWRlIHRoZWlyIHdheSBpbnRvIHRoZSBob3VzZSBvZiBIZXJhY2xlaWRlcyBhbmQgc2xldyBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBkZWF0aCB3YXMga2Vlbmx5IHJlc2VudGVkIGJ5IHRoZSBTeXJhY3VzYW5zOyBidXQgbmV2ZXJ0aGVsZXNzLCB3aGVuIERpb24gZ2F2ZSBoaW0gYSBzcGxlbmRpZCBmdW5lcmFsLCBmb2xsb3dlZCB0aGUgYm9keSB0byBpdHMgZ3JhdmUgd2l0aCBoaXMgYXJteSwgYW5kIHRoZW4gZGlzY291cnNlZCB0byB0aGVtIHVwb24gdGhlIG1hdHRlciwgdGhleSBjYW1lIHRvIHNlZSB0aGF0IGl0IHdhcyBpbXBvc3NpYmxlIGZvciB0aGUgY2l0eSB0byBiZSBmcmVlIGZyb20gdHVtdWx0cyB3aGlsZSBIZXJhY2xlaWRlcyBhbmQgRGlvbiB0b2dldGhlciBjb25kdWN0ZWQgaXRzIGFmZmFpcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['53.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBzaW5jZSBoZSBleHBlY3RlZCB0aGF0IHRoZXNlIG1lYXN1cmVzIHdvdWxkIGZpbmQgdGhlaXIgY2hpZWYgb3Bwb25lbnQgaW4gSGVyYWNsZWlkZXMsIGFuZCBzaW5jZSB0aGUgbWFuIHdhcyBpbiBldmVyeSB3YXkgdHVyYnVsZW50LCBmaWNrbGUsIGFuZCBzZWRpdGlvdXMsIGhlIG5vdyB5aWVsZGVkIHRvIHRob3NlIHdobyBoYWQgbG9uZyB3aXNoZWQgdG8ga2lsbCBoaW0sIGJ1dCB3aG9tIGhlIGhhZCBoaXRoZXJ0byByZXN0cmFpbmVkOyBzbyB0aGV5IG1hZGUgdGhlaXIgd2F5IGludG8gdGhlIGhvdXNlIG9mIEhlcmFjbGVpZGVzIGFuZCBzbGV3IGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['53.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBkZWF0aCB3YXMga2Vlbmx5IHJlc2VudGVkIGJ5IHRoZSBTeXJhY3VzYW5zOyBidXQgbmV2ZXJ0aGVsZXNzLCB3aGVuIERpb24gZ2F2ZSBoaW0gYSBzcGxlbmRpZCBmdW5lcmFsLCBmb2xsb3dlZCB0aGUgYm9keSB0byBpdHMgZ3JhdmUgd2l0aCBoaXMgYXJteSwgYW5kIHRoZW4gZGlzY291cnNlZCB0byB0aGVtIHVwb24gdGhlIG1hdHRlciwgdGhleSBjYW1lIHRvIHNlZSB0aGF0IGl0IHdhcyBpbXBvc3NpYmxlIGZvciB0aGUgY2l0eSB0byBiZSBmcmVlIGZyb20gdHVtdWx0cyB3aGlsZSBIZXJhY2xlaWRlcyBhbmQgRGlvbiB0b2dldGhlciBjb25kdWN0ZWQgaXRzIGFmZmFpcnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmUgd2FzIGEgY2VydGFpbiBjb21yYWRlIG9mIERpb24ncyBuYW1lZCBDYWxsaXBwdXMsIGFuIEF0aGVuaWFuLCB3aG8sIGFzIFBsYXRvIHNheXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA2LjMyMmMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RXBpc3QuPC90aXRsZT4gdmkuIHAuIDMzMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGFkIGJlY29tZSBpbnRpbWF0ZWx5IGFjcXVhaW50ZWQgd2l0aCBoaW0sIG5vdCBhcyBhIGZlbGxvdyBwdXBpbCBpbiBwaGlsb3NvcGh5LCBidXQgaW4gY29uc2VxdWVuY2Ugb2YgaW5pdGlhdGlvbiBpbnRvIHRoZSBteXN0ZXJpZXMgYW5kIHRoZSByZWN1cnJlbnQgY29tcmFkZXNoaXAgd2hpY2ggdGhpcyBicm91Z2h0LiBIZSB0b29rIHBhcnQgaW4gRGlvbidzIGV4cGVkaXRpb24gYW5kIHdhcyBoZWxkIGluIGhvbm91ciBieSBoaW0sIHNvIHRoYXQgaGUgZXZlbiBlbnRlcmVkIFN5cmFjdXNlIHdpdGggaGltIGF0IHRoZSBoZWFkIG9mIGFsbCBoaXMgY29tcmFkZXMsIHdpdGggYSBnYXJsYW5kIG9uIGhpcyBoZWFkLCBhZnRlciB3aW5uaW5nIGdsb3Jpb3VzIGRpc3RpbmN0aW9uIGluIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdyB0aGF0IHRoZSBjaGllZiBhbmQgbm9ibGVzdCBmcmllbmRzIG9mIERpb24gaGFkIGJlZW4gY29uc3VtZWQgYXdheSBieSB0aGUgd2FyLCBhbmQgSGVyYWNsZWlkZXMgd2FzIGRlYWQsIGhlIHNhdyB0aGF0IHRoZSBwZW9wbGUgb2YgU3lyYWN1c2Ugd2VyZSB3aXRob3V0IGEgbGVhZGVyLCBhbmQgdGhhdCBoZSBoaW1zZWxmIHdhcyB2ZXJ5IG11Y2ggaW4gZmF2b3VyIHdpdGggRGlvbidzIHNvbGRpZXJzLiBUaGVyZWZvcmUsIHNob3dpbmcgaGltc2VsZiB0aGUgdmlsZXN0IG9mIG1lbiwgYW5kIGFsdG9nZXRoZXIgZXhwZWN0aW5nIHRoYXQgaGUgd291bGQgaGF2ZSBTaWNpbHkgYXMgYSByZXdhcmQgZm9yIG11cmRlcmluZyBoaXMgZnJpZW5kLCBhbmQsIGFzIHNvbWUgc2F5LCBoYXZpbmcgcmVjZWl2ZWQgdHdlbnR5IHRhbGVudHMgZnJvbSB0aGUgZW5lbXkgdG8gcGF5IGhpbSBmb3IgZG9pbmcgdGhlIG11cmRlciwgaGUgYnJpYmVkIHNvbWUgb2YgRGlvbidzIG1lcmNlbmFyaWVzIGludG8gYSBjb25zcGlyYWN5IGFnYWluc3QgaGltLCBiZWdpbm5pbmcgaGlzIHdvcmsgaW4gYSBtb3N0IG1hbGljaW91cyBhbmQgcmFzY2FsbHkgbWFubmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgd2FzIGFsd2F5cyByZXBvcnRpbmcgdG8gRGlvbiB2YXJpb3VzIHNwZWVjaGVzIG9mIGhpcyBzb2xkaWVycyBhZ2FpbnN0IGhpbSwgZWl0aGVyIGFjdHVhbGx5IHV0dGVyZWQgb3IgZmFicmljYXRlZCBieSBoaW1zZWxmLCBhbmQgaW4gdGhpcyB3YXkgd29uIGhpcyBjb25maWRlbmNlLCBhbmQgd2FzIGF1dGhvcml6ZWQgdG8gbWVldCBzZWNyZXRseSB3aXRoIHdob20gaGUgd291bGQgYW5kIHRhbGsgZnJlZWx5IHdpdGggdGhlbSBhZ2FpbnN0IERpb24sIGluIG9yZGVyIHRoYXQgbm8gbHVya2luZyBtYWxjb250ZW50cyBtaWdodCByZW1haW4gdW5kaXNjb3ZlcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGlzIG1lYW5zIENhbGxpcHB1cyBzdWNjZWVkZWQgaW4gcXVpY2tseSBkaXNjb3ZlcmluZyBhbmQgYmFuZGluZyB0b2dldGhlciB0aGUgZXZpbC1taW5kZWQgYW5kIGRpc2NvbnRlbnRlZCBjaXRpemVucywgYW5kLCB3aGVuZXZlciBhbnkgb25lIHdobyBoYWQgcmVwdWxzZWQgaGlzIG92ZXJ0dXJlcyB0b2xkIERpb24gYWJvdXQgdGhlbSwgRGlvbiB3YXMgbm90IGRpc3R1cmJlZCBub3IgdmV4ZWQsIGJ1dCBhc3N1bWVkIHRoYXQgQ2FsbGlwcHVzIHdhcyBtZXJlbHkgY2Fycnlpbmcgb3V0IGhpcyBpbmp1bmN0aW9ucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['54.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZSB3YXMgYSBjZXJ0YWluIGNvbXJhZGUgb2YgRGlvbidzIG5hbWVkIENhbGxpcHB1cywgYW4gQXRoZW5pYW4sIHdobywgYXMgUGxhdG8gc2F5cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGF0LiBMLiA2LjMyMmMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC48L3RpdGxlPiB2aS4gcC4gMzMzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBoYWQgYmVjb21lIGludGltYXRlbHkgYWNxdWFpbnRlZCB3aXRoIGhpbSwgbm90IGFzIGEgZmVsbG93IHB1cGlsIGluIHBoaWxvc29waHksIGJ1dCBpbiBjb25zZXF1ZW5jZSBvZiBpbml0aWF0aW9uIGludG8gdGhlIG15c3RlcmllcyBhbmQgdGhlIHJlY3VycmVudCBjb21yYWRlc2hpcCB3aGljaCB0aGlzIGJyb3VnaHQuIEhlIHRvb2sgcGFydCBpbiBEaW9uJ3MgZXhwZWRpdGlvbiBhbmQgd2FzIGhlbGQgaW4gaG9ub3VyIGJ5IGhpbSwgc28gdGhhdCBoZSBldmVuIGVudGVyZWQgU3lyYWN1c2Ugd2l0aCBoaW0gYXQgdGhlIGhlYWQgb2YgYWxsIGhpcyBjb21yYWRlcywgd2l0aCBhIGdhcmxhbmQgb24gaGlzIGhlYWQsIGFmdGVyIHdpbm5pbmcgZ2xvcmlvdXMgZGlzdGluY3Rpb24gaW4gYmF0dGxlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYXQuIEwuIDYuMzIyYyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwaXN0LjwvdGl0bGU+IHZpLiBwLiAzMzMuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5FcGlzdC48L3RpdGxlPiB2aS4gcC4gMzMzLjwvdHJhbnNsYXRpb24+"
translation['54.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3cgdGhhdCB0aGUgY2hpZWYgYW5kIG5vYmxlc3QgZnJpZW5kcyBvZiBEaW9uIGhhZCBiZWVuIGNvbnN1bWVkIGF3YXkgYnkgdGhlIHdhciwgYW5kIEhlcmFjbGVpZGVzIHdhcyBkZWFkLCBoZSBzYXcgdGhhdCB0aGUgcGVvcGxlIG9mIFN5cmFjdXNlIHdlcmUgd2l0aG91dCBhIGxlYWRlciwgYW5kIHRoYXQgaGUgaGltc2VsZiB3YXMgdmVyeSBtdWNoIGluIGZhdm91ciB3aXRoIERpb24ncyBzb2xkaWVycy4gVGhlcmVmb3JlLCBzaG93aW5nIGhpbXNlbGYgdGhlIHZpbGVzdCBvZiBtZW4sIGFuZCBhbHRvZ2V0aGVyIGV4cGVjdGluZyB0aGF0IGhlIHdvdWxkIGhhdmUgU2ljaWx5IGFzIGEgcmV3YXJkIGZvciBtdXJkZXJpbmcgaGlzIGZyaWVuZCwgYW5kLCBhcyBzb21lIHNheSwgaGF2aW5nIHJlY2VpdmVkIHR3ZW50eSB0YWxlbnRzIGZyb20gdGhlIGVuZW15IHRvIHBheSBoaW0gZm9yIGRvaW5nIHRoZSBtdXJkZXIsIGhlIGJyaWJlZCBzb21lIG9mIERpb24ncyBtZXJjZW5hcmllcyBpbnRvIGEgY29uc3BpcmFjeSBhZ2FpbnN0IGhpbSwgYmVnaW5uaW5nIGhpcyB3b3JrIGluIGEgbW9zdCBtYWxpY2lvdXMgYW5kIHJhc2NhbGx5IG1hbm5lci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['54.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3YXMgYWx3YXlzIHJlcG9ydGluZyB0byBEaW9uIHZhcmlvdXMgc3BlZWNoZXMgb2YgaGlzIHNvbGRpZXJzIGFnYWluc3QgaGltLCBlaXRoZXIgYWN0dWFsbHkgdXR0ZXJlZCBvciBmYWJyaWNhdGVkIGJ5IGhpbXNlbGYsIGFuZCBpbiB0aGlzIHdheSB3b24gaGlzIGNvbmZpZGVuY2UsIGFuZCB3YXMgYXV0aG9yaXplZCB0byBtZWV0IHNlY3JldGx5IHdpdGggd2hvbSBoZSB3b3VsZCBhbmQgdGFsayBmcmVlbHkgd2l0aCB0aGVtIGFnYWluc3QgRGlvbiwgaW4gb3JkZXIgdGhhdCBubyBsdXJraW5nIG1hbGNvbnRlbnRzIG1pZ2h0IHJlbWFpbiB1bmRpc2NvdmVyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['54.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoaXMgbWVhbnMgQ2FsbGlwcHVzIHN1Y2NlZWRlZCBpbiBxdWlja2x5IGRpc2NvdmVyaW5nIGFuZCBiYW5kaW5nIHRvZ2V0aGVyIHRoZSBldmlsLW1pbmRlZCBhbmQgZGlzY29udGVudGVkIGNpdGl6ZW5zLCBhbmQsIHdoZW5ldmVyIGFueSBvbmUgd2hvIGhhZCByZXB1bHNlZCBoaXMgb3ZlcnR1cmVzIHRvbGQgRGlvbiBhYm91dCB0aGVtLCBEaW9uIHdhcyBub3QgZGlzdHVyYmVkIG5vciB2ZXhlZCwgYnV0IGFzc3VtZWQgdGhhdCBDYWxsaXBwdXMgd2FzIG1lcmVseSBjYXJyeWluZyBvdXQgaGlzIGluanVuY3Rpb25zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyB0aGUgcGxvdCB3YXMgcmlwZW5pbmcsIERpb24gc2F3IGFuIGFwcGFyaXRpb24gb2YgZ3JlYXQgc2l6ZSBhbmQgcG9ydGVudG91cyBhc3BlY3QuIEhlIHdhcyBzaXR0aW5nIGxhdGUgaW4gdGhlIGRheSBpbiB0aGUgdmVzdGlidWxlIG9mIGhpcyBob3VzZSwgYWxvbmUgYW5kIGxvc3QgaW4gdGhvdWdodCwgd2hlbiBzdWRkZW5seSBhIG5vaXNlIHdhcyBoZWFyZCBhdCB0aGUgb3RoZXIgZW5kIG9mIHRoZSBjb2xvbm5hZGUsIGFuZCB0dXJuaW5nIGhpcyBnYXplIGluIHRoYXQgZGlyZWN0aW9uIGhlIHNhdyAoZm9yIGl0IHdhcyBub3QgeWV0IGRhcmspIGEgd29tYW4gb2YgbG9mdHkgc3RhdHVyZSwgaW4gZ2FyYiBhbmQgY291bnRlbmFuY2UgZXhhY3RseSBsaWtlIGEgdHJhZ2ljIEZ1cnksIHN3ZWVwaW5nIHRoZSBob3VzZSB3aXRoIGEgc29ydCBvZiBicm9vbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIHRlcnJpYmx5IHNob2NrZWQsIGFuZCwgYmVjb21pbmcgYXBwcmVoZW5zaXZlLCBzdW1tb25lZCBoaXMgZnJpZW5kcywgdG9sZCB0aGVtIHdoYXQgaGUgaGFkIHNlZW4sIGFuZCBiZWdnZWQgdGhlbSB0byByZW1haW4gYW5kIHNwZW5kIHRoZSBuaWdodCB3aXRoIGhpbSwgYmVpbmcgYWx0b2dldGhlciBiZXNpZGUgaGltc2VsZiwgYW5kIGZlYXJpbmcgdGhhdCBpZiBoZSB3ZXJlIGxlZnQgYWxvbmUgdGhlIHBvcnRlbnQgd291bGQgYXBwZWFyIHRvIGhpbSBhZ2Fpbi4gVGhpcywgaW5kZWVkLCBkaWQgbm90IG9jY3VyIGEgc2Vjb25kIHRpbWUuIEJ1dCBhIGZldyBkYXlzIGFmdGVyd2FyZHMgaGlzIHNvbiwgd2hvIHdhcyBoYXJkbHkgYSBib3kgYW55IG1vcmUsIGluIGEgZml0IG9mIGFuZ3J5IGRpc3BsZWFzdXJlIGNhdXNlZCBieSBzb21lIHRyaXZpYWwgYW5kIGNoaWxkaXNoIGdyaWV2YW5jZSwgdGhyZXcgaGltc2VsZiBoZWFkbG9uZyBmcm9tIHRoZSByb29mIGFuZCB3YXMga2lsbGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['55.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgdGhlIHBsb3Qgd2FzIHJpcGVuaW5nLCBEaW9uIHNhdyBhbiBhcHBhcml0aW9uIG9mIGdyZWF0IHNpemUgYW5kIHBvcnRlbnRvdXMgYXNwZWN0LiBIZSB3YXMgc2l0dGluZyBsYXRlIGluIHRoZSBkYXkgaW4gdGhlIHZlc3RpYnVsZSBvZiBoaXMgaG91c2UsIGFsb25lIGFuZCBsb3N0IGluIHRob3VnaHQsIHdoZW4gc3VkZGVubHkgYSBub2lzZSB3YXMgaGVhcmQgYXQgdGhlIG90aGVyIGVuZCBvZiB0aGUgY29sb25uYWRlLCBhbmQgdHVybmluZyBoaXMgZ2F6ZSBpbiB0aGF0IGRpcmVjdGlvbiBoZSBzYXcgKGZvciBpdCB3YXMgbm90IHlldCBkYXJrKSBhIHdvbWFuIG9mIGxvZnR5IHN0YXR1cmUsIGluIGdhcmIgYW5kIGNvdW50ZW5hbmNlIGV4YWN0bHkgbGlrZSBhIHRyYWdpYyBGdXJ5LCBzd2VlcGluZyB0aGUgaG91c2Ugd2l0aCBhIHNvcnQgb2YgYnJvb20uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['55.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyB0ZXJyaWJseSBzaG9ja2VkLCBhbmQsIGJlY29taW5nIGFwcHJlaGVuc2l2ZSwgc3VtbW9uZWQgaGlzIGZyaWVuZHMsIHRvbGQgdGhlbSB3aGF0IGhlIGhhZCBzZWVuLCBhbmQgYmVnZ2VkIHRoZW0gdG8gcmVtYWluIGFuZCBzcGVuZCB0aGUgbmlnaHQgd2l0aCBoaW0sIGJlaW5nIGFsdG9nZXRoZXIgYmVzaWRlIGhpbXNlbGYsIGFuZCBmZWFyaW5nIHRoYXQgaWYgaGUgd2VyZSBsZWZ0IGFsb25lIHRoZSBwb3J0ZW50IHdvdWxkIGFwcGVhciB0byBoaW0gYWdhaW4uIFRoaXMsIGluZGVlZCwgZGlkIG5vdCBvY2N1ciBhIHNlY29uZCB0aW1lLiBCdXQgYSBmZXcgZGF5cyBhZnRlcndhcmRzIGhpcyBzb24sIHdobyB3YXMgaGFyZGx5IGEgYm95IGFueSBtb3JlLCBpbiBhIGZpdCBvZiBhbmdyeSBkaXNwbGVhc3VyZSBjYXVzZWQgYnkgc29tZSB0cml2aWFsIGFuZCBjaGlsZGlzaCBncmlldmFuY2UsIHRocmV3IGhpbXNlbGYgaGVhZGxvbmcgZnJvbSB0aGUgcm9vZiBhbmQgd2FzIGtpbGxlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgRGlvbiB3YXMgdGh1cyBoZWF2aWx5IGFmZmxpY3RlZCwgQ2FsbGlwcHVzIHdhcyBhbGwgdGhlIG1vcmUgaW50ZW50IHVwb24gaGlzIHBsb3QsIGFuZCBzcHJlYWQgYSByZXBvcnQgYW1vbmcgdGhlIFN5cmFjdXNhbnMgdGhhdCBEaW9uLCBiZWluZyBub3cgY2hpbGRsZXNzLCBoYWQgbWFkZSB1cCBoaXMgbWluZCB0byBzZW5kIGZvciBBcG9sbG9jcmF0ZXMsIHRoZSBzb24gb2YgRGlvbnlzaXVzLCBhbmQgbWFrZSBoaW0gaGlzIHN1Y2Nlc3Nvciwgc2luY2UgaGUgd2FzIGhpcyB3aWZlJ3MgbmVwaGV3IGFuZCBoaXMgc2lzdGVyJ3MgZ3JhbmRzb24uIEFuZCBwcmVzZW50bHkgYm90aCBEaW9uIGFuZCBoaXMgd2lmZSBhbmQgc2lzdGVyIGJlZ2FuIHRvIHN1c3BlY3Qgd2hhdCB3YXMgZ29pbmcgb24sIGFuZCBpbmZvcm1hdGlvbiBvZiB0aGUgcGxvdCBjYW1lIHRvIHRoZW0gZnJvbSBldmVyeSBxdWFydGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgRGlvbiwgYXMgaXQgd291bGQgc2VlbSwgYmVpbmcgaW4gZGlzdHJlc3MgYXQgdGhlIGZhdGUgb2YgSGVyYWNsZWlkZXMsIGFuZCBzdWZmZXJpbmcgY29udGludWFsIHZleGF0aW9uIGFuZCBkZXByZXNzaW9uIGF0IHRob3VnaHQgb2YgdGhlIG1hbidzIG11cmRlciwgd2hpY2ggaGUgcmVnYXJkZWQgYXMgYSBzdGFpbiB1cG9uIGhpcyBsaWZlIGFuZCBhY3Rpb25zLCBkZWNsYXJlZCB0aGF0IGhlIHdhcyByZWFkeSBub3cgdG8gZGllIG1hbnkgZGVhdGhzIGFuZCB0byBzdWZmZXIgYW55IG9uZSB3aG8gd2lzaGVkIHRvIHNsYXkgaGltLCBpZiBpdCB3YXMgZ29pbmcgdG8gYmUgbmVjZXNzYXJ5IGZvciBoaW0gdG8gbGl2ZSBvbiBoaXMgZ3VhcmQsIG5vdCBvbmx5IGFnYWluc3QgaGlzIGVuZW1pZXMsIGJ1dCBhbHNvIGFnYWluc3QgaGlzIGZyaWVuZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['56.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgRGlvbiB3YXMgdGh1cyBoZWF2aWx5IGFmZmxpY3RlZCwgQ2FsbGlwcHVzIHdhcyBhbGwgdGhlIG1vcmUgaW50ZW50IHVwb24gaGlzIHBsb3QsIGFuZCBzcHJlYWQgYSByZXBvcnQgYW1vbmcgdGhlIFN5cmFjdXNhbnMgdGhhdCBEaW9uLCBiZWluZyBub3cgY2hpbGRsZXNzLCBoYWQgbWFkZSB1cCBoaXMgbWluZCB0byBzZW5kIGZvciBBcG9sbG9jcmF0ZXMsIHRoZSBzb24gb2YgRGlvbnlzaXVzLCBhbmQgbWFrZSBoaW0gaGlzIHN1Y2Nlc3Nvciwgc2luY2UgaGUgd2FzIGhpcyB3aWZlJ3MgbmVwaGV3IGFuZCBoaXMgc2lzdGVyJ3MgZ3JhbmRzb24uIEFuZCBwcmVzZW50bHkgYm90aCBEaW9uIGFuZCBoaXMgd2lmZSBhbmQgc2lzdGVyIGJlZ2FuIHRvIHN1c3BlY3Qgd2hhdCB3YXMgZ29pbmcgb24sIGFuZCBpbmZvcm1hdGlvbiBvZiB0aGUgcGxvdCBjYW1lIHRvIHRoZW0gZnJvbSBldmVyeSBxdWFydGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['56.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBEaW9uLCBhcyBpdCB3b3VsZCBzZWVtLCBiZWluZyBpbiBkaXN0cmVzcyBhdCB0aGUgZmF0ZSBvZiBIZXJhY2xlaWRlcywgYW5kIHN1ZmZlcmluZyBjb250aW51YWwgdmV4YXRpb24gYW5kIGRlcHJlc3Npb24gYXQgdGhvdWdodCBvZiB0aGUgbWFuJ3MgbXVyZGVyLCB3aGljaCBoZSByZWdhcmRlZCBhcyBhIHN0YWluIHVwb24gaGlzIGxpZmUgYW5kIGFjdGlvbnMsIGRlY2xhcmVkIHRoYXQgaGUgd2FzIHJlYWR5IG5vdyB0byBkaWUgbWFueSBkZWF0aHMgYW5kIHRvIHN1ZmZlciBhbnkgb25lIHdobyB3aXNoZWQgdG8gc2xheSBoaW0sIGlmIGl0IHdhcyBnb2luZyB0byBiZSBuZWNlc3NhcnkgZm9yIGhpbSB0byBsaXZlIG9uIGhpcyBndWFyZCwgbm90IG9ubHkgYWdhaW5zdCBoaXMgZW5lbWllcywgYnV0IGFsc28gYWdhaW5zdCBoaXMgZnJpZW5kcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhbGxpcHB1cywgc2VlaW5nIHRoYXQgdGhlIHdvbWVuIHdlcmUgaW52ZXN0aWdhdGluZyB0aGUgbWF0dGVyIGNhcmVmdWxseSwgYW5kIHRha2luZyBhbGFybSwgY2FtZSB0byB0aGVtIHdpdGggZGVuaWFscyBhbmQgaW4gdGVhcnMgYW5kIG9mZmVyaW5nIHRvIGdpdmUgdGhlbSB3aGF0ZXZlciBwbGVkZ2Ugb2YgZmlkZWxpdHkgdGhleSBkZXNpcmVkLiBTbyB0aGV5IHJlcXVpcmVkIGhpbSB0byBzd2VhciB0aGUgZ3JlYXQgb2F0aC4gVGhpcyB3YXMgZG9uZSBpbiB0aGUgZm9sbG93aW5nIG1hbm5lci4gVGhlIG9uZSB3aG8gZ2l2ZXMgdGhpcyBwbGVkZ2UgZ29lcyBkb3duIGludG8gdGhlIHNhbmN0dWFyeSBvZiBEZW1ldGVyIGFuZCBQZXJzZXBob25lLCB3aGVyZSwgYWZ0ZXIgY2VydGFpbiBzYWNyZWQgcml0ZXMgaGF2ZSBiZWVuIHBlcmZvcm1lZCwgaGUgcHV0cyBvbiB0aGUgcHVycGxlIHZlc3RtZW50IG9mIHRoZSBnb2RkZXNzLCB0YWtlcyBhIGJsYXppbmcgdG9yY2ggaW4gaGlzIGhhbmQsIGFuZCByZWNpdGVzIHRoZSBvYXRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyBDYWxsaXBwdXMgZGlkLCBhbmQgcmVjaXRlZCB0aGUgb2F0aDsgYnV0IGhlIG1hZGUgc3VjaCBhIG1vY2tlcnkgb2YgdGhlIHJvZHMgYXMgdG8gd2FpdCBmb3IgdGhlIGZlc3RpdmFsIG9mIHRoZSBnb2RkZXNzIGJ5IHdob20gaGUgaGFkIHN3b3JuLCB0aGUgQ29yZWlhLCBhbmQgdGhlbiB0byBkbyB0aGUgbXVyZGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjM1MyBCLkMuPC9ub3RlPiAgQW5kIHlldCBpdCBpcyBwb3NzaWJsZSB0aGF0IGhlIHRvb2sgbm8gYWNjb3VudCBvZiB0aGUgZGF5LCBzaW5jZSBoZSBrbmV3IHRoYXQgdGhlIGdvZGRlc3Mgd291bGQgaGF2ZSBiZWVuIHV0dGVybHkgb3V0cmFnZWQgZXZlbiBpZiBhdCBhbm90aGVyIHRpbWUgaGVyIG15c3RpYyB3ZXJlIHNsYWluIGJ5IGhpcyBteXN0YWdvZ3VlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkltcGx5aW5nIHRoYXQgQ2FsbGlwcHVzIGhhZCBoaW1zZWxmIGluaXRpYXRlZCBEaW9uIGludG8gdGhlIG15c3RlcmllcyBvZiBEZW1ldGVyLjwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['56.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWxsaXBwdXMsIHNlZWluZyB0aGF0IHRoZSB3b21lbiB3ZXJlIGludmVzdGlnYXRpbmcgdGhlIG1hdHRlciBjYXJlZnVsbHksIGFuZCB0YWtpbmcgYWxhcm0sIGNhbWUgdG8gdGhlbSB3aXRoIGRlbmlhbHMgYW5kIGluIHRlYXJzIGFuZCBvZmZlcmluZyB0byBnaXZlIHRoZW0gd2hhdGV2ZXIgcGxlZGdlIG9mIGZpZGVsaXR5IHRoZXkgZGVzaXJlZC4gU28gdGhleSByZXF1aXJlZCBoaW0gdG8gc3dlYXIgdGhlIGdyZWF0IG9hdGguIFRoaXMgd2FzIGRvbmUgaW4gdGhlIGZvbGxvd2luZyBtYW5uZXIuIFRoZSBvbmUgd2hvIGdpdmVzIHRoaXMgcGxlZGdlIGdvZXMgZG93biBpbnRvIHRoZSBzYW5jdHVhcnkgb2YgRGVtZXRlciBhbmQgUGVyc2VwaG9uZSwgd2hlcmUsIGFmdGVyIGNlcnRhaW4gc2FjcmVkIHJpdGVzIGhhdmUgYmVlbiBwZXJmb3JtZWQsIGhlIHB1dHMgb24gdGhlIHB1cnBsZSB2ZXN0bWVudCBvZiB0aGUgZ29kZGVzcywgdGFrZXMgYSBibGF6aW5nIHRvcmNoIGluIGhpcyBoYW5kLCBhbmQgcmVjaXRlcyB0aGUgb2F0aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['56.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzIENhbGxpcHB1cyBkaWQsIGFuZCByZWNpdGVkIHRoZSBvYXRoOyBidXQgaGUgbWFkZSBzdWNoIGEgbW9ja2VyeSBvZiB0aGUgcm9kcyBhcyB0byB3YWl0IGZvciB0aGUgZmVzdGl2YWwgb2YgdGhlIGdvZGRlc3MgYnkgd2hvbSBoZSBoYWQgc3dvcm4sIHRoZSBDb3JlaWEsIGFuZCB0aGVuIHRvIGRvIHRoZSBtdXJkZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4zNTMgQi5DLjwvbm90ZT4gIEFuZCB5ZXQgaXQgaXMgcG9zc2libGUgdGhhdCBoZSB0b29rIG5vIGFjY291bnQgb2YgdGhlIGRheSwgc2luY2UgaGUga25ldyB0aGF0IHRoZSBnb2RkZXNzIHdvdWxkIGhhdmUgYmVlbiB1dHRlcmx5IG91dHJhZ2VkIGV2ZW4gaWYgYXQgYW5vdGhlciB0aW1lIGhlciBteXN0aWMgd2VyZSBzbGFpbiBieSBoaXMgbXlzdGFnb2d1ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkltcGx5aW5nIHRoYXQgQ2FsbGlwcHVzIGhhZCBoaW1zZWxmIGluaXRpYXRlZCBEaW9uIGludG8gdGhlIG15c3RlcmllcyBvZiBEZW1ldGVyLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSBoYWQgY29uc3BpcmVkIHRvIGRvIHRoZSBkZWVkLCBhbmQgYXMgRGlvbiB3YXMgc2l0dGluZyB3aXRoIGhpcyBmcmllbmRzIGluIGFuIGFwYXJ0bWVudCBjb250YWluaW5nIGNvdWNoZXMgZm9yIGVudGVydGFpbm1lbnQsIHNvbWUgb2YgdGhlIGNvbnNwaXJhdG9ycyBpbnZlc3RlZCB0aGUgaG91c2Ugb3V0c2lkZSwgd2hpbGUgb3RoZXJzIHN0b29kIGF0IHRoZSBkb29ycyBhbmQgd2luZG93cyBvZiB0aGUgYXBhcnRtZW50LiBUaGUgYWN0dWFsIGFzc2Fzc2lucywgd2hvIHdlcmUgWmFjeW50aGlhbnMsIGNhbWUgaW4gdW5hcm1lZCBhbmQgd2l0aG91dCB0aGVpciBjbG9ha3MuIFRoZW4gYXQgdGhlIHNhbWUgdGltZSB0aG9zZSBvdXRzaWRlIGNsb3NlZCB0aGUgZG9vcnMgYW5kIGhlbGQgdGhlbSBmYXN0LCB3aGlsZSB0aG9zZSBpbnNpZGUgZmVsbCB1cG9uIERpb24gYW5kIHRyaWVkIHRvIHN0cmFuZ2xlIGFuZCBjcnVzaCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgbWFkZSBubyBoZWFkd2F5LCBob3dldmVyLCBhbmQgY2FsbGVkIGZvciBhIHN3b3JkOyBidXQgbm8gb25lIHZlbnR1cmVkIHRvIG9wZW4gdGhlIGRvb3IuIEZvciBEaW9uJ3MgY29tcGFuaW9ucyBpbnNpZGUgd2VyZSBtYW55IGluIG51bWJlcjsgYnV0IGVhY2ggb2YgdGhlbSB0aG91Z2h0IHRoYXQgYnkgYWJhbmRvbmluZyBEaW9uIHRvIGhpcyBmYXRlIGhlIHdvdWxkIHNhdmUgaGlzIG93biBsaWZlLCBhbmQgc28gbm8gb25lIHZlbnR1cmVkIHRvIGhlbHAgaGltLiBBZnRlciBzb21lIGRlbGF5LCBMeWNvbiB0aGUgU3lyYWN1c2FuIGhhbmRlZCB0aHJvdWdoIHRoZSB3aW5kb3cgdG8gb25lIG9mIHRoZSBaYWN5bnRoaWFucyBhIHNob3J0c3dvcmQsIGFuZCB3aXRoIHRoaXMgdGhleSBjdXQgRGlvbidzIHRocm9hdCBhcyBpZiBoZSBoYWQgYmVlbiBhIHZpY3RpbSBhdCB0aGUgYWx0YXI7IGhlIGhhZCBsb25nIHNpbmNlIGJlZW4gb3ZlcnBvd2VyZWQgYW5kIHdhcyBxdWl2ZXJpbmcgYmVmb3JlIHRoZSBzdHJva2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRvbywgdGhleSBjYXN0IGhpcyBzaXN0ZXIgaW50byBwcmlzb24sIHRvZ2V0aGVyIHdpdGggaGlzIHdpZmUsIHdobyB3YXMgYmlnIHdpdGggY2hpbGQuIEhpcyB3aWZlIGhhZCBhIG1vc3Qgd3JldGNoZWQgY29uZmluZW1lbnQsIGFuZCBnYXZlIGJpcnRoIGluIHRoZSBwcmlzb24gdG8gYSBtYWxlIGNoaWxkLCB3aGljaCB0aGUgd29tZW4gdmVudHVyZWQgdG8gcmVhciwgd2l0aCB0aGUgY29uc2VudCBvZiB0aGVpciBndWFyZHMsIGFuZCBhbGwgdGhlIG1vcmUgYmVjYXVzZSBDYWxsaXBwdXMgd2FzIGFscmVhZHkgaW52b2x2ZWQgaW4gZ3JlYXQgdHJvdWJsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['57.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSBoYWQgY29uc3BpcmVkIHRvIGRvIHRoZSBkZWVkLCBhbmQgYXMgRGlvbiB3YXMgc2l0dGluZyB3aXRoIGhpcyBmcmllbmRzIGluIGFuIGFwYXJ0bWVudCBjb250YWluaW5nIGNvdWNoZXMgZm9yIGVudGVydGFpbm1lbnQsIHNvbWUgb2YgdGhlIGNvbnNwaXJhdG9ycyBpbnZlc3RlZCB0aGUgaG91c2Ugb3V0c2lkZSwgd2hpbGUgb3RoZXJzIHN0b29kIGF0IHRoZSBkb29ycyBhbmQgd2luZG93cyBvZiB0aGUgYXBhcnRtZW50LiBUaGUgYWN0dWFsIGFzc2Fzc2lucywgd2hvIHdlcmUgWmFjeW50aGlhbnMsIGNhbWUgaW4gdW5hcm1lZCBhbmQgd2l0aG91dCB0aGVpciBjbG9ha3MuIFRoZW4gYXQgdGhlIHNhbWUgdGltZSB0aG9zZSBvdXRzaWRlIGNsb3NlZCB0aGUgZG9vcnMgYW5kIGhlbGQgdGhlbSBmYXN0LCB3aGlsZSB0aG9zZSBpbnNpZGUgZmVsbCB1cG9uIERpb24gYW5kIHRyaWVkIHRvIHN0cmFuZ2xlIGFuZCBjcnVzaCBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['57.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgbWFkZSBubyBoZWFkd2F5LCBob3dldmVyLCBhbmQgY2FsbGVkIGZvciBhIHN3b3JkOyBidXQgbm8gb25lIHZlbnR1cmVkIHRvIG9wZW4gdGhlIGRvb3IuIEZvciBEaW9uJ3MgY29tcGFuaW9ucyBpbnNpZGUgd2VyZSBtYW55IGluIG51bWJlcjsgYnV0IGVhY2ggb2YgdGhlbSB0aG91Z2h0IHRoYXQgYnkgYWJhbmRvbmluZyBEaW9uIHRvIGhpcyBmYXRlIGhlIHdvdWxkIHNhdmUgaGlzIG93biBsaWZlLCBhbmQgc28gbm8gb25lIHZlbnR1cmVkIHRvIGhlbHAgaGltLiBBZnRlciBzb21lIGRlbGF5LCBMeWNvbiB0aGUgU3lyYWN1c2FuIGhhbmRlZCB0aHJvdWdoIHRoZSB3aW5kb3cgdG8gb25lIG9mIHRoZSBaYWN5bnRoaWFucyBhIHNob3J0c3dvcmQsIGFuZCB3aXRoIHRoaXMgdGhleSBjdXQgRGlvbidzIHRocm9hdCBhcyBpZiBoZSBoYWQgYmVlbiBhIHZpY3RpbSBhdCB0aGUgYWx0YXI7IGhlIGhhZCBsb25nIHNpbmNlIGJlZW4gb3ZlcnBvd2VyZWQgYW5kIHdhcyBxdWl2ZXJpbmcgYmVmb3JlIHRoZSBzdHJva2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['57.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRvbywgdGhleSBjYXN0IGhpcyBzaXN0ZXIgaW50byBwcmlzb24sIHRvZ2V0aGVyIHdpdGggaGlzIHdpZmUsIHdobyB3YXMgYmlnIHdpdGggY2hpbGQuIEhpcyB3aWZlIGhhZCBhIG1vc3Qgd3JldGNoZWQgY29uZmluZW1lbnQsIGFuZCBnYXZlIGJpcnRoIGluIHRoZSBwcmlzb24gdG8gYSBtYWxlIGNoaWxkLCB3aGljaCB0aGUgd29tZW4gdmVudHVyZWQgdG8gcmVhciwgd2l0aCB0aGUgY29uc2VudCBvZiB0aGVpciBndWFyZHMsIGFuZCBhbGwgdGhlIG1vcmUgYmVjYXVzZSBDYWxsaXBwdXMgd2FzIGFscmVhZHkgaW52b2x2ZWQgaW4gZ3JlYXQgdHJvdWJsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIG91dHNldCwgaW5kZWVkLCBhZnRlciBoZSBoYWQga2lsbGVkIERpb24sIENhbGxpcHB1cyB3YXMgYSBnbG9yaW91cyBwZXJzb25hZ2UsIGFuZCBoYWQgU3lyYWN1c2UgaW4gaGlzIHBvd2VyLiBIZSBhY3R1YWxseSB3cm90ZSBsZXR0ZXIgdG8gdGhlIGNpdHkgb2YgQXRoZW5zLCB3aGljaCwgbmV4dCB0byB0aGUgZ29kcywgaGUgb3VnaHQgdG8gaGF2ZSBoZWxkIGluIGF3ZSBhbmQgZmVhciBhZnRlciBzZXR0aW5nIGhpcyBoYW5kcyB0byBzbyBncmVhdCBhIHBvbGx1dGlvbi4gQnV0IGl0IGFwcGVhcnMgdG8gYmUgdHJ1bHkgc2FpZCBvZiB0aGF0IGNpdHkgdGhhdCB0aGUgZ29vZCBtZW4gd2hvbSBzaGUgYnJlZWRzIGFyZSBvZiB0aGUgaGlnaGVzdCBleGNlbGxlbmNlLCBhbmQgdGhlIGJhZCBtZW4gb2YgdGhlIG1vc3QgZGVzcGljYWJsZSBiYXNlbmVzcywganVzdCBhcyBoZXIgc29pbCBwcm9kdWNlcyBzd2VldGVzdCBob25leSBhbmQgZGVhZGxpZXN0IGhlbWxvY2suIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIENhbGxpcHB1cyBkaWQgbm90IGxvbmcgcmVtYWluIGEgc2NhbmRhbCB0byBmb3J0dW5lIGFuZCB0aGUgZ29kcywgYXMgdGhvdWdoIHRoZXkgaGFkIG5vIGV5ZXMgZm9yIGEgbWFuIHdobyB3b24gbGVhZGVyc2hpcCBhbmQgcG93ZXIgYnkgc28gZ3JlYXQgaW1waWV0eSwgYnV0IHNwZWVkaWx5IHBhaWQgYSBmaXR0aW5nIHBlbmFsdHkuIEZvciBvbiBzZXR0aW5nIG91dCB0byB0YWtlIENhdGFuYSwgaGUgYXQgb25jZSBsb3N0IFN5cmFjdXNlOyBhdCB3aGljaCB0aW1lLCBhcyB0aGV5IHNheSwgaGUgcmVtYXJrZWQgdGhhdCBoZSBoYWQgbG9zdCBhIGNpdHkgYW5kIGdvdCBhIGNoZWVzZS1ncmF0ZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXBwYXJlbnRseSB0aGUgbWVhbmluZyBpbiBTaWNpbGlhbiBHcmVlaywgb2YgdGhlIHdvcmQgQ2F0YW5hLiBDYWxsaXBwdXMgbWFpbnRhaW5lZCBoaW1zZWxmIGluIFN5cmFjdXNlIG9ubHkgdGhpcnRlZW4gbW9udGhzLjwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIGF0dGFja2VkIE1lc3NhbmEgYW5kIGxvc3QgbW9zdCBvZiBoaXMgc29sZGllcnMsIGFtb25nIHdob20gd2VyZSB0aGUgbXVyZGVyZXJzIG9mIERpb247IGFuZCBzaW5jZSBubyBjaXR5IGluIFNpY2lseSB3b3VsZCByZWNlaXZlIGhpbSwgYnV0IGFsbCBoYXRlZCBhbmQgc3B1cm5lZCBoaW0sIGhlIHRvb2sgcG9zc2Vzc2lvbiBvZiBSaGVnaXVtLiBCdXQgdGhlcmUsIGJlaW5nIGluIHN0cmFpdGVuZWQgY2lyY3Vtc3RhbmNlcyBhbmQgdW5hYmxlIHRvIHN1cHBvcnQgaGlzIG1lcmNlbmFyaWVzIHByb3Blcmx5LCBoZSB3YXMgcHV0IHRvIGRlYXRoIGJ5IExlcHRpbmVzIGFuZCBQb2x5cGVyY2hvbiwgd2hvLCBhcyBmb3J0dW5lIHdvdWxkIGhhdmUgaXQsIHVzZWQgdGhlIHNob3J0c3dvcmQgd2l0aCB3aGljaCBEaW9uIGFsc28gd2FzIHNhaWQgdG8gaGF2ZSBiZWVuIHNtaXR0ZW4uIEFuZCBpdCB3YXMga25vd24gYnkgaXRzIHNpemUsIHdoaWNoIHdhcyBzaG9ydCwgYWZ0ZXIgdGhlIFNwYXJ0YW4gZmFzaGlvbiwgYW5kIGJ5IHRoZSBzdHlsZSBvZiBpdHMgd29ya21hbnNoaXAsIGJlaW5nIGRlbGljYXRlbHkgYW5kIGN1bm5pbmdseSB3cm91Z2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoLCB0aGVuLCB3YXMgdGhlIHBlbmFsdHkgd2hpY2ggQ2FsbGlwcHVzIHBhaWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIG91dHNldCwgaW5kZWVkLCBhZnRlciBoZSBoYWQga2lsbGVkIERpb24sIENhbGxpcHB1cyB3YXMgYSBnbG9yaW91cyBwZXJzb25hZ2UsIGFuZCBoYWQgU3lyYWN1c2UgaW4gaGlzIHBvd2VyLiBIZSBhY3R1YWxseSB3cm90ZSBsZXR0ZXIgdG8gdGhlIGNpdHkgb2YgQXRoZW5zLCB3aGljaCwgbmV4dCB0byB0aGUgZ29kcywgaGUgb3VnaHQgdG8gaGF2ZSBoZWxkIGluIGF3ZSBhbmQgZmVhciBhZnRlciBzZXR0aW5nIGhpcyBoYW5kcyB0byBzbyBncmVhdCBhIHBvbGx1dGlvbi4gQnV0IGl0IGFwcGVhcnMgdG8gYmUgdHJ1bHkgc2FpZCBvZiB0aGF0IGNpdHkgdGhhdCB0aGUgZ29vZCBtZW4gd2hvbSBzaGUgYnJlZWRzIGFyZSBvZiB0aGUgaGlnaGVzdCBleGNlbGxlbmNlLCBhbmQgdGhlIGJhZCBtZW4gb2YgdGhlIG1vc3QgZGVzcGljYWJsZSBiYXNlbmVzcywganVzdCBhcyBoZXIgc29pbCBwcm9kdWNlcyBzd2VldGVzdCBob25leSBhbmQgZGVhZGxpZXN0IGhlbWxvY2suIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIENhbGxpcHB1cyBkaWQgbm90IGxvbmcgcmVtYWluIGEgc2NhbmRhbCB0byBmb3J0dW5lIGFuZCB0aGUgZ29kcywgYXMgdGhvdWdoIHRoZXkgaGFkIG5vIGV5ZXMgZm9yIGEgbWFuIHdobyB3b24gbGVhZGVyc2hpcCBhbmQgcG93ZXIgYnkgc28gZ3JlYXQgaW1waWV0eSwgYnV0IHNwZWVkaWx5IHBhaWQgYSBmaXR0aW5nIHBlbmFsdHkuIEZvciBvbiBzZXR0aW5nIG91dCB0byB0YWtlIENhdGFuYSwgaGUgYXQgb25jZSBsb3N0IFN5cmFjdXNlOyBhdCB3aGljaCB0aW1lLCBhcyB0aGV5IHNheSwgaGUgcmVtYXJrZWQgdGhhdCBoZSBoYWQgbG9zdCBhIGNpdHkgYW5kIGdvdCBhIGNoZWVzZS1ncmF0ZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BcHBhcmVudGx5IHRoZSBtZWFuaW5nIGluIFNpY2lsaWFuIEdyZWVrLCBvZiB0aGUgd29yZCBDYXRhbmEuIENhbGxpcHB1cyBtYWludGFpbmVkIGhpbXNlbGYgaW4gU3lyYWN1c2Ugb25seSB0aGlydGVlbiBtb250aHMuPC9ub3RlPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['58.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgYXR0YWNrZWQgTWVzc2FuYSBhbmQgbG9zdCBtb3N0IG9mIGhpcyBzb2xkaWVycywgYW1vbmcgd2hvbSB3ZXJlIHRoZSBtdXJkZXJlcnMgb2YgRGlvbjsgYW5kIHNpbmNlIG5vIGNpdHkgaW4gU2ljaWx5IHdvdWxkIHJlY2VpdmUgaGltLCBidXQgYWxsIGhhdGVkIGFuZCBzcHVybmVkIGhpbSwgaGUgdG9vayBwb3NzZXNzaW9uIG9mIFJoZWdpdW0uIEJ1dCB0aGVyZSwgYmVpbmcgaW4gc3RyYWl0ZW5lZCBjaXJjdW1zdGFuY2VzIGFuZCB1bmFibGUgdG8gc3VwcG9ydCBoaXMgbWVyY2VuYXJpZXMgcHJvcGVybHksIGhlIHdhcyBwdXQgdG8gZGVhdGggYnkgTGVwdGluZXMgYW5kIFBvbHlwZXJjaG9uLCB3aG8sIGFzIGZvcnR1bmUgd291bGQgaGF2ZSBpdCwgdXNlZCB0aGUgc2hvcnRzd29yZCB3aXRoIHdoaWNoIERpb24gYWxzbyB3YXMgc2FpZCB0byBoYXZlIGJlZW4gc21pdHRlbi4gQW5kIGl0IHdhcyBrbm93biBieSBpdHMgc2l6ZSwgd2hpY2ggd2FzIHNob3J0LCBhZnRlciB0aGUgU3BhcnRhbiBmYXNoaW9uLCBhbmQgYnkgdGhlIHN0eWxlIG9mIGl0cyB3b3JrbWFuc2hpcCwgYmVpbmcgZGVsaWNhdGVseSBhbmQgY3VubmluZ2x5IHdyb3VnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2gsIHRoZW4sIHdhcyB0aGUgcGVuYWx0eSB3aGljaCBDYWxsaXBwdXMgcGFpZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BcyBmb3IgQW5kcm9tYWNoZSBhbmQgQXJldGUsIHdoZW4gdGhleSB3ZXJlIHJlbGVhc2VkIGZyb20gcHJpc29uLCB0aGV5IHdlcmUgdGFrZW4gdXAgYnkgSGljZXRhcyB0aGUgU3lyYWN1c2FuLCB3aG8gaGFkIGJlZW4gb25lIG9mIERpb24ncyBmcmllbmRzLCBhbmQgd2hvIHdhcyB0aG91Z2h0IHRvIGJlIGZhaXRoZnVsbHkgYW5kIGhvbm91cmFibHkgZGlzcG9zZWQgdG93YXJkcyB0aGVtLiBBZnRlcndhcmRzLCBoYXZpbmcgYmVlbiBwZXJzdWFkZWQgYnkgdGhlIGVuZW1pZXMgb2YgRGlvbiwgaGUgZ290IGEgc2hpcCByZWFkeSBmb3IgdGhlbSwgcHJldGVuZGluZyB0aGF0IHRoZXkgd2VyZSB0byBiZSBzZW50IGludG8gUGVsb3Bvbm5lc3VzLCBhbmQgb3JkZXJlZCB0aGUgc2FpbG9ycywgZHVyaW5nIHRoZSB2b3lhZ2UsIHRvIGN1dCB0aGVpciB0aHJvYXRzIGFuZCBjYXN0IHRoZW0gaW50byB0aGUgc2VhLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgdGhleSB3ZXJlIHRocm93biBvdmVyYm9hcmQgYWxpdmUsIGFuZCB0aGUgbGl0dGxlIGJveSB3aXRoIHRoZW0uIEJ1dCBIaWNldGFzIGFsc28gbWV0IHdpdGggYSBwdW5pc2htZW50IHdvcnRoeSBvZiBoaXMgY3JpbWVzLiBGb3IgaGUgaGltc2VsZiB3YXMgY2FwdHVyZWQgYnkgVGltb2xlb24gYW5kIHB1dCB0byBkZWF0aCwgYW5kIHRoZSBTeXJhY3VzYW5zLCB0byBhdmVuZ2UgRGlvbiwgc2xldyBoaXMgdHdvIGRhdWdodGVycyBhbHNvOyBvZiB3aGljaCB0aGluZ3MgSSBoYXZlIHdyaXR0ZW4gYXQgbGVuZ3RoIGluIG15IExpZmUgb2YgVGltb2xlb24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBUaW0uIDMyLjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXJzIHh4eGlpLjwvYmlibD4gYW5kPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFRpbS4gMzMuMSIgdmFsaWQ9InllcyI+IHh4eGlpaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
