var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb21lIHdyaXRlcnMgc3RhdGUgdGhhdCB0aGUgZmlyc3QgbWVtYmVycyBvZiB0aGUgZmFtaWx5IHdlcmUgY2FsbGVkIEZvZGlpIGluIGFuY2llbnQgdGltZXMsIGZyb20gdGhlaXIgcHJhY3RpY2Ugb2YgdGFraW5nIHdpbGQgYmVhc3RzIGluIHBpdGZhbGxzLiBGb3IgZG93biB0byB0aGUgcHJlc2VudCB0aW1lIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Zm9zc2FlPC9mb3JlaWduPgogICAgICAgICAgICA8L3E+IGlzIHRoZSBMYXRpbiBmb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Zm9zc2FlPC9mb3JlaWduPgogICAgICAgICAgICA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmRpdGNoZXM8L2VtcGg+LCBhbmQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5mb2RlcmU8L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvcT4gZm9yIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmZvZGVyZTwvZm9yZWlnbj4KICAgICAgICAgICAgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj50byBkaWc8L2VtcGg+LiBJbiBjb3Vyc2Ugb2YgdGltZSwgYnkgYSBjaGFuZ2Ugb2YgdHdvIGxldHRlcnMsIHRoZXkgd2VyZSBjYWxsZWQgRmFiaWkuIFRoaXMgZmFtaWx5IHByb2R1Y2VkIG1hbnkgZ3JlYXQgbWVuLCBhbmQgZnJvbSBSdWxsdXMsIHRoZSBncmVhdGVzdCBvZiB0aGVtLCBhbmQgb24gdGhpcyBhY2NvdW50IGNhbGxlZCBNYXhpbXVzIGJ5IHRoZSBSb21hbnMsIHRoZSBGYWJpdXMgTWF4aW11cyBvZiB3aG9tIHdlIG5vdyB3cml0ZSB3YXMgZm91cnRoIGluIGRlc2NlbnQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCB0aGUgc3VybmFtZSBvZiBWZXJydWNvc3VzIGZyb20gYSBwaHlzaWNhbCBwZWN1bGlhcml0eSwgbmFtZWx5LCBhIHNtYWxsIHdhcnQgZ3Jvd2luZyBhYm92ZSBoaXMgbGlwIGFuZCB0aGF0IG9mIE92aWN1bGEsIHdoaWNoIHNpZ25pZmllcyA8ZW1waD5MYW1ia2luPC9lbXBoPiwgd2FzIGdpdmVuIGhpbSBiZWNhdXNlIG9mIHRoZSBnZW50bGVuZXNzIGFuZCBncmF2aXR5IG9mIGhpcyBuYXR1cmUgd2hlbiBoZSB3YXMgeWV0IGEgY2hpbGQuIEluZGVlZCwgdGhlIGNhbG1uZXNzIGFuZCBzaWxlbmNlIG9mIGhpcyBkZW1lYW5vdXIsIHRoZSBncmVhdCBjYXV0aW9uIHdpdGggd2hpY2ggaGUgaW5kdWxnZWQgaW4gY2hpbGRpc2ggcGxlYXN1cmVzLCB0aGUgc2xvd25lc3MgYW5kIGRpZmZpY3VsdHkgd2l0aCB3aGljaCBoZSBsZWFybmVkIGhpcyBsZXNzb25zLCBhbmQgaGlzIGNvbnRlbnRlZCBzdWJtaXNzaXZuZXNzIGluIGRlYWxpbmcgd2l0aCBoaXMgY29tcmFkZXMsIGxlZCB0aG9zZSB3aG8ga25ldyBoaW0gc3VwZXJmaWNpYWxseSB0byBzdXNwZWN0IGhpbSBvZiBzb21ldGhpbmcgbGlrZSBmb29saXNobmVzcyBhbmQgc3R1cGlkaXR5LiBPbmx5IGEgZmV3IGRpc2Nlcm5lZCB0aGUgaW5leG9yYWJsZSBmaXJtbmVzcyBpbiB0aGUgZGVwdGggb2YgaGlzIHNvdWwsIGFuZCB0aGUgbWFnbmFuaW1vdXMgYW5kIGxlb25pbmUgcXVhbGl0aWVzIG9mIGhpcyBuYXR1cmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb29uLCBhcyB0aW1lIHdlbnQgb24gYW5kIGhlIHdhcyByb3VzZWQgYnkgdGhlIGRlbWFuZHMgb2YgYWN0aXZlIGxpZmUsIGhlIG1hZGUgaXQgY2xlYXIgZXZlbiB0byB0aGUgbXVsdGl0dWRlIHRoYXQgaGlzIHNlZW1pbmcgbGFjayBvZiBlbmVyZ3kgd2FzIG9ubHkgbGFjayBvZiBwYXNzaW9uLCB0aGF0IGhpcyBjYXV0aW9uIHdhcyBwcnVkZW5jZSwgYW5kIHRoYXQgaGlzIG5ldmVyIGJlaW5nIHF1aWNrIG5vciBldmVuIGVhc3kgdG8gbW92ZSBtYWRlIGhpbSBhbHdheXMgc3RlYWRmYXN0IGFuZCBzdXJlLiBIZSBzYXcgdGhhdCB0aGUgY29uZHVjdCBvZiB0aGUgc3RhdGUgd2FzIGEgZ3JlYXQgdGFzaywgYW5kIHRoYXQgd2FycyBtdXN0IGJlIG1hbnk7IGhlIHRoZXJlZm9yZSB0cmFpbmVkIGhpcyBib2R5IGZvciB0aGUgd2FycyAobmF0dXJlJ3Mgb3duIGFybW91ciwgYXMgaXQgd2VyZSksIGFuZCBoaXMgc3BlZWNoIGFzIGFuIGluc3RydW1lbnQgb2YgcGVyc3Vhc2lvbiB3aXRoIHRoZSBwZW9wbGUsIGdpdmluZyBpdCBhIGZvcm0gcmlnaHQgd2VsbCBiZWZpdHRpbmcgaGlzIG1hbm5lciBvZiBsaWZlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaGFkIG5vIGFmZmVjdGF0aW9uLCBub3IgYW55IGVtcHR5LCBmb3JlbnNpYyBncmFjZSwgYnV0IGFuIGltcG9ydCBvZiBwZWN1bGlhciBkaWduaXR5LCByZW5kZXJlZCB3ZWlnaHR5IGJ5IGFuIGFidW5kYW5jZSBvZiBtYXhpbXMuIFRoZXNlLCB0aGV5IHNheSwgbW9zdCByZXNlbWJsZWQgdGhvc2Ugd2hpY2ggVGh1Y3lkaWRlcyBlbXBsb3lzLiBBbmQgYSBzcGVlY2ggb2YgaGlzIGlzIGFjdHVhbGx5IHByZXNlcnZlZCwgd2hpY2ggd2FzIHByb25vdW5jZWQgYnkgaGltIGJlZm9yZSB0aGUgcGVvcGxlIGluIGV1bG9neSBvZiBoaXMgc29uLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRvIGZyLiA0Ij5DaWNlcm8sIDx0aXRsZT5DYXRvIE1haW9yPC90aXRsZT4sIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdobyBkaWVkIGNvbnN1bC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCB0aGUgc3VybmFtZSBvZiBWZXJydWNvc3VzIGZyb20gYSBwaHlzaWNhbCBwZWN1bGlhcml0eSwgbmFtZWx5LCBhIHNtYWxsIHdhcnQgZ3Jvd2luZyBhYm92ZSBoaXMgbGlwIGFuZCB0aGF0IG9mIE92aWN1bGEsIHdoaWNoIHNpZ25pZmllcyA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPkxhbWJraW48L2VtcGg+LCB3YXMgZ2l2ZW4gaGltIGJlY2F1c2Ugb2YgdGhlIGdlbnRsZW5lc3MgYW5kIGdyYXZpdHkgb2YgaGlzIG5hdHVyZSB3aGVuIGhlIHdhcyB5ZXQgYSBjaGlsZC4gSW5kZWVkLCB0aGUgY2FsbW5lc3MgYW5kIHNpbGVuY2Ugb2YgaGlzIGRlbWVhbm91ciwgdGhlIGdyZWF0IGNhdXRpb24gd2l0aCB3aGljaCBoZSBpbmR1bGdlZCBpbiBjaGlsZGlzaCBwbGVhc3VyZXMsIHRoZSBzbG93bmVzcyBhbmQgZGlmZmljdWx0eSB3aXRoIHdoaWNoIGhlIGxlYXJuZWQgaGlzIGxlc3NvbnMsIGFuZCBoaXMgY29udGVudGVkIHN1Ym1pc3Npdm5lc3MgaW4gZGVhbGluZyB3aXRoIGhpcyBjb21yYWRlcywgbGVkIHRob3NlIHdobyBrbmV3IGhpbSBzdXBlcmZpY2lhbGx5IHRvIHN1c3BlY3QgaGltIG9mIHNvbWV0aGluZyBsaWtlIGZvb2xpc2huZXNzIGFuZCBzdHVwaWRpdHkuIE9ubHkgYSBmZXcgZGlzY2VybmVkIHRoZSBpbmV4b3JhYmxlIGZpcm1uZXNzIGluIHRoZSBkZXB0aCBvZiBoaXMgc291bCwgYW5kIHRoZSBtYWduYW5pbW91cyBhbmQgbGVvbmluZSBxdWFsaXRpZXMgb2YgaGlzIG5hdHVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb29uLCBhcyB0aW1lIHdlbnQgb24gYW5kIGhlIHdhcyByb3VzZWQgYnkgdGhlIGRlbWFuZHMgb2YgYWN0aXZlIGxpZmUsIGhlIG1hZGUgaXQgY2xlYXIgZXZlbiB0byB0aGUgbXVsdGl0dWRlIHRoYXQgaGlzIHNlZW1pbmcgbGFjayBvZiBlbmVyZ3kgd2FzIG9ubHkgbGFjayBvZiBwYXNzaW9uLCB0aGF0IGhpcyBjYXV0aW9uIHdhcyBwcnVkZW5jZSwgYW5kIHRoYXQgaGlzIG5ldmVyIGJlaW5nIHF1aWNrIG5vciBldmVuIGVhc3kgdG8gbW92ZSBtYWRlIGhpbSBhbHdheXMgc3RlYWRmYXN0IGFuZCBzdXJlLiBIZSBzYXcgdGhhdCB0aGUgY29uZHVjdCBvZiB0aGUgc3RhdGUgd2FzIGEgZ3JlYXQgdGFzaywgYW5kIHRoYXQgd2FycyBtdXN0IGJlIG1hbnk7IGhlIHRoZXJlZm9yZSB0cmFpbmVkIGhpcyBib2R5IGZvciB0aGUgd2FycyAobmF0dXJlJ3Mgb3duIGFybW91ciwgYXMgaXQgd2VyZSksIGFuZCBoaXMgc3BlZWNoIGFzIGFuIGluc3RydW1lbnQgb2YgcGVyc3Vhc2lvbiB3aXRoIHRoZSBwZW9wbGUsIGdpdmluZyBpdCBhIGZvcm0gcmlnaHQgd2VsbCBiZWZpdHRpbmcgaGlzIG1hbm5lciBvZiBsaWZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBoYWQgbm8gYWZmZWN0YXRpb24sIG5vciBhbnkgZW1wdHksIGZvcmVuc2ljIGdyYWNlLCBidXQgYW4gaW1wb3J0IG9mIHBlY3VsaWFyIGRpZ25pdHksIHJlbmRlcmVkIHdlaWdodHkgYnkgYW4gYWJ1bmRhbmNlIG9mIG1heGltcy4gVGhlc2UsIHRoZXkgc2F5LCBtb3N0IHJlc2VtYmxlZCB0aG9zZSB3aGljaCBUaHVjeWRpZGVzIGVtcGxveXMuIEFuZCBhIHNwZWVjaCBvZiBoaXMgaXMgYWN0dWFsbHkgcHJlc2VydmVkLCB3aGljaCB3YXMgcHJvbm91bmNlZCBieSBoaW0gYmVmb3JlIHRoZSBwZW9wbGUgaW4gZXVsb2d5IG9mIGhpcyBzb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBDYXRvIGZyLiA0Ij5DaWNlcm8sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWFpb3I8L3RpdGxlPiwgNC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hvIGRpZWQgY29uc3VsLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIENhdG8gZnIuIDQiPkNpY2VybywgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNYWlvcjwvdGl0bGU+LCA0LjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNYWlvcjwvdGl0bGU+LCA0LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZpcnN0PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjMzIEIuQy48L25vdGU+IG9mIHRoZSBmaXZlIGNvbnN1bHNoaXBzIGluIHdoaWNoIGhlIHNlcnZlZCBicm91Z2h0IGhpbSB0aGUgaG9ub3VyIG9mIGEgdHJpdW1waCBvdmVyIHRoZSBMaWd1cmlhbnMuIFRoZXNlIHdlcmUgZGVmZWF0ZWQgYnkgaGltIGluIGJhdHRsZSwgd2l0aCBoZWF2eSBsb3NzLCBhbmQgcmV0aXJlZCBpbnRvIHRoZSBBbHBzLCB3aGVyZSB0aGV5IGNlYXNlZCBwbHVuZGVyaW5nIGFuZCBoYXJyeWluZyB0aGUgcGFydHMgb2YgSXRhbHkgbmV4dCB0byB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSGFubmliYWwgbm93IGJ1cnN0IGludG8gSXRhbHksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjE4IEIuQy48L25vdGU+IGFuZCB3YXMgYXQgZmlyc3QgdmljdG9yaW91cyBpbiBiYXR0bGUgYXQgdGhlIHJpdmVyIFRyZWJpYS4gVGhlbiBoZSBtYXJjaGVkIHRocm91Z2ggVHVzY2FueSwgcmF2YWdpbmcgdGhlIGNvdW50cnksIGFuZCBzbW90ZSBSb21lIHdpdGggZGlyZSBjb25zdGVybmF0aW9uIGFuZCBmZWFyLiBTaWducyBhbmQgcG9ydGVudHMgb2NjdXJyZWQsIHNvbWUgZmFtaWxpYXIgdG8gdGhlIFJvbWFucywgbGlrZSBwZWFscyBvZiB0aHVuZGVyLCBvdGhlcnMgd2hvbGx5IHN0cmFuZ2UgYW5kIHF1aXRlIGV4dHJhb3JkaW5hcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgaXQgd2FzIHNhaWQgdGhhdCBzaGllbGRzIHN3ZWF0ZWQgYmxvb2QsIHRoYXQgZWFycyBvZiBjb3JuIHdlcmUgY3V0IGF0IEFudGl1bSB3aXRoIGJsb29kIHVwb24gdGhlbSwgdGhhdCBibGF6aW5nLCBmaWVyeSBzdG9uZXMgZmVsbCBmcm9tIG9uIGhpZ2gsIGFuZCB0aGF0IHRoZSBwZW9wbGUgb2YgRmFsZXJpaSBzYXcgdGhlIGhlYXZlbnMgb3BlbiBhbmQgbWFueSB0YWJsZXRzIGZhbGwgZG93biBhbmQgc2NhdHRlciB0aGVtc2VsdmVzIGFicm9hZCwgYW5kIHRoYXQgb24gb25lIG9mIHRoZXNlIHdhcyB3cml0dGVuIGluIGxldHRlcnMgcGxhaW4gdG8gc2VlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1hcnMgbm93IGJyYW5kaXNoZXRoIGhpcyB3ZWFwb25zLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiIGxhbmc9ImxhIj5NYXVvcnMgdGVsdW0gc3V1bSBjb25jdXRpdDwvcT4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDEuPC9iaWJsPu+8iTwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29uc3VsLCBHYWl1cyBGbGFtaW5pdXMsIHdhcyBkYXVudGVkIGJ5IG5vbmUgb2YgdGhlc2UgdGhpbmdzLCBmb3IgaGUgd2FzIGEgbWFuIG9mIGEgZmllcnkgYW5kIGFtYml0aW91cyBuYXR1cmUsIGFuZCBiZXNpZGVzLCBoZSB3YXMgZWxhdGVkIGJ5IGdyZWF0IHN1Y2Nlc3NlcyB3aGljaCBoZSBoYWQgd29uIGJlZm9yZSB0aGlzLCBpbiBhIG1hbm5lciBjb250cmFyeSB0byBhbGwgZXhwZWN0YXRpb24uIEhlIGhhZCwgbmFtZWx5LCBhbHRob3VnaCB0aGUgc2VuYXRlIGRpc3NlbnRlZCBmcm9tIGhpcyBwbGFuLCBhbmQgaGlzIGNvbGxlYWd1ZSB2aW9sZW50bHkgb3Bwb3NlZCBpdCwgam9pbmVkIGJhdHRsZSB3aXRoIHRoZSBHYXVscyBhbmQgZGVmZWF0ZWQgdGhlbS4gRmFiaXVzIGFsc28gd2FzIGxlc3MgZGlzdHVyYmVkIGJ5IHRoZSBzaWducyBhbmQgcG9ydGVudHMsIGJlY2F1c2UgaGUgdGhvdWdodCBpdCB3b3VsZCBiZSBhYnN1cmQsIGFsdGhvdWdoIHRoZXkgaGFkIGdyZWF0IGVmZmVjdCB1cG9uIG1hbnkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGxlYXJuZWQgaG93IGZldyBpbiBudW1iZXIgdGhlIGVuZW15IHdlcmUsIGFuZCBob3cgZ3JlYXQgd2FzIHRoZWlyIGxhY2sgb2YgcmVzb3VyY2VzLCBoZSBleGhvcnRlZCB0aGUgUm9tYW5zIHRvIGJpZGUgdGhlaXIgdGltZSwgYW5kIG5vdCB0byBnaXZlIGJhdHRsZSB0byBhIG1hbiB3aG8gd2llbGRlZCBhbiBhcm15IHRyYWluZWQgYnkgbWFueSBjb250ZXN0cyBmb3IgdGhpcyB2ZXJ5IGlzc3VlLCBidXQgdG8gc2VuZCBhaWQgdG8gdGhlaXIgYWxsaWVzLCB0byBrZWVwIHRoZWlyIHN1YmplY3QgY2l0aWVzIHdlbGwgaW4gaGFuZCwgYW5kIHRvIHN1ZmZlciB0aGUgY3VsbWluYXRpbmcgdmlnb3VyIG9mIEhhbm5pYmFsIHRvIHNpbmsgYW5kIGV4cGlyZSBvZiBpdHNlbGYsIGxpa2UgYSBmbGFtZSB0aGF0IGZsYXJlcyB1cCBmcm9tIHNjYW50IGFuZCBzbGlnaHQgbWF0ZXJpYWwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmlyc3Q8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIzMyBCLkMuPC9ub3RlPiBvZiB0aGUgZml2ZSBjb25zdWxzaGlwcyBpbiB3aGljaCBoZSBzZXJ2ZWQgYnJvdWdodCBoaW0gdGhlIGhvbm91ciBvZiBhIHRyaXVtcGggb3ZlciB0aGUgTGlndXJpYW5zLiBUaGVzZSB3ZXJlIGRlZmVhdGVkIGJ5IGhpbSBpbiBiYXR0bGUsIHdpdGggaGVhdnkgbG9zcywgYW5kIHJldGlyZWQgaW50byB0aGUgQWxwcywgd2hlcmUgdGhleSBjZWFzZWQgcGx1bmRlcmluZyBhbmQgaGFycnlpbmcgdGhlIHBhcnRzIG9mIEl0YWx5IG5leHQgdG8gdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBIYW5uaWJhbCBub3cgYnVyc3QgaW50byBJdGFseSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIxOCBCLkMuPC9ub3RlPiBhbmQgd2FzIGF0IGZpcnN0IHZpY3RvcmlvdXMgaW4gYmF0dGxlIGF0IHRoZSByaXZlciBUcmViaWEuIFRoZW4gaGUgbWFyY2hlZCB0aHJvdWdoIFR1c2NhbnksIHJhdmFnaW5nIHRoZSBjb3VudHJ5LCBhbmQgc21vdGUgUm9tZSB3aXRoIGRpcmUgY29uc3Rlcm5hdGlvbiBhbmQgZmVhci4gU2lnbnMgYW5kIHBvcnRlbnRzIG9jY3VycmVkLCBzb21lIGZhbWlsaWFyIHRvIHRoZSBSb21hbnMsIGxpa2UgcGVhbHMgb2YgdGh1bmRlciwgb3RoZXJzIHdob2xseSBzdHJhbmdlIGFuZCBxdWl0ZSBleHRyYW9yZGluYXJ5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgaXQgd2FzIHNhaWQgdGhhdCBzaGllbGRzIHN3ZWF0ZWQgYmxvb2QsIHRoYXQgZWFycyBvZiBjb3JuIHdlcmUgY3V0IGF0IEFudGl1bSB3aXRoIGJsb29kIHVwb24gdGhlbSwgdGhhdCBibGF6aW5nLCBmaWVyeSBzdG9uZXMgZmVsbCBmcm9tIG9uIGhpZ2gsIGFuZCB0aGF0IHRoZSBwZW9wbGUgb2YgRmFsZXJpaSBzYXcgdGhlIGhlYXZlbnMgb3BlbiBhbmQgbWFueSB0YWJsZXRzIGZhbGwgZG93biBhbmQgc2NhdHRlciB0aGVtc2VsdmVzIGFicm9hZCwgYW5kIHRoYXQgb24gb25lIG9mIHRoZXNlIHdhcyB3cml0dGVuIGluIGxldHRlcnMgcGxhaW4gdG8gc2VlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWFycyBub3cgYnJhbmRpc2hldGggaGlzIHdlYXBvbnMuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiIGxhbmc9ImxhIj5NYXVvcnMgdGVsdW0gc3V1bSBjb25jdXRpdDwvcT4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjIuMSIgdmFsaWQ9InllcyI+TGl2eSwgeHhpaS4gMS48L2JpYmw+77yJPC9ub3RlPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIiBsYW5nPSJsYSI+TWF1b3JzIHRlbHVtIHN1dW0gY29uY3V0aXQ8L3E+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDEuPC9iaWJsPu+8iTwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb25zdWwsIEdhaXVzIEZsYW1pbml1cywgd2FzIGRhdW50ZWQgYnkgbm9uZSBvZiB0aGVzZSB0aGluZ3MsIGZvciBoZSB3YXMgYSBtYW4gb2YgYSBmaWVyeSBhbmQgYW1iaXRpb3VzIG5hdHVyZSwgYW5kIGJlc2lkZXMsIGhlIHdhcyBlbGF0ZWQgYnkgZ3JlYXQgc3VjY2Vzc2VzIHdoaWNoIGhlIGhhZCB3b24gYmVmb3JlIHRoaXMsIGluIGEgbWFubmVyIGNvbnRyYXJ5IHRvIGFsbCBleHBlY3RhdGlvbi4gSGUgaGFkLCBuYW1lbHksIGFsdGhvdWdoIHRoZSBzZW5hdGUgZGlzc2VudGVkIGZyb20gaGlzIHBsYW4sIGFuZCBoaXMgY29sbGVhZ3VlIHZpb2xlbnRseSBvcHBvc2VkIGl0LCBqb2luZWQgYmF0dGxlIHdpdGggdGhlIEdhdWxzIGFuZCBkZWZlYXRlZCB0aGVtLiBGYWJpdXMgYWxzbyB3YXMgbGVzcyBkaXN0dXJiZWQgYnkgdGhlIHNpZ25zIGFuZCBwb3J0ZW50cywgYmVjYXVzZSBoZSB0aG91Z2h0IGl0IHdvdWxkIGJlIGFic3VyZCwgYWx0aG91Z2ggdGhleSBoYWQgZ3JlYXQgZWZmZWN0IHVwb24gbWFueS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGxlYXJuZWQgaG93IGZldyBpbiBudW1iZXIgdGhlIGVuZW15IHdlcmUsIGFuZCBob3cgZ3JlYXQgd2FzIHRoZWlyIGxhY2sgb2YgcmVzb3VyY2VzLCBoZSBleGhvcnRlZCB0aGUgUm9tYW5zIHRvIGJpZGUgdGhlaXIgdGltZSwgYW5kIG5vdCB0byBnaXZlIGJhdHRsZSB0byBhIG1hbiB3aG8gd2llbGRlZCBhbiBhcm15IHRyYWluZWQgYnkgbWFueSBjb250ZXN0cyBmb3IgdGhpcyB2ZXJ5IGlzc3VlLCBidXQgdG8gc2VuZCBhaWQgdG8gdGhlaXIgYWxsaWVzLCB0byBrZWVwIHRoZWlyIHN1YmplY3QgY2l0aWVzIHdlbGwgaW4gaGFuZCwgYW5kIHRvIHN1ZmZlciB0aGUgY3VsbWluYXRpbmcgdmlnb3VyIG9mIEhhbm5pYmFsIHRvIHNpbmsgYW5kIGV4cGlyZSBvZiBpdHNlbGYsIGxpa2UgYSBmbGFtZSB0aGF0IGZsYXJlcyB1cCBmcm9tIHNjYW50IGFuZCBzbGlnaHQgbWF0ZXJpYWwuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RmxhbWluaXVzLCBob3dldmVyLCB3YXMgbm90IHBlcnN1YWRlZCwgYnV0IGRlY2xhcmVkIHRoYXQgaGUgd291bGQgbm90IHN1ZmZlciB0aGUgd2FyIHRvIGJlIGJyb3VnaHQgbmVhciBSb21lLCBhbmQgdGhhdCBoZSB3b3VsZCBub3QsIGxpa2UgQ2FtaWxsdXMgb2Ygb2xkLCBmaWdodCBpbiB0aGUgY2l0eSBmb3IgdGhlIGNpdHkncyBkZWZlbmNlLiBBY2NvcmRpbmdseSwgaGUgb3JkZXJlZCB0aGUgdHJpYnVuZXMgdG8gbGVhZCB0aGUgYXJteSBmb3J0aC4gQnV0IGFzIEZsYW1pbml1cyBoaW1zZWxmIHNwcmFuZyB1cG9uIGhpcyBob3JzZSwgZm9yIG5vIGFwcGFyZW50IHJlYXNvbiwgYW5kIHVuYWNjb3VudGFibHksIHRoZSBhbmltYWwgd2FzIHNlaXplZCB3aXRoIHF1aXZlcmluZyBmcmlnaHQsIGFuZCBoZSB3YXMgdGhyb3duIGFuZCBmZWxsIGhlYWQgZm9yZW1vc3QgdG8gdGhlIGdyb3VuZC4gTmV2ZXJ0aGVsZXNzLCBoZSBpbiBubyB3aXNlIGRlc2lzdGVkIGZyb20gaGlzIHB1cnBvc2UsIGJ1dCBzaW5jZSBoZSBoYWQgc2V0IG91dCBhdCB0aGUgYmVnaW5uaW5nIHRvIGZhY2UgSGFubmliYWwsIGRyZXcgdXAgaGlzIGZvcmNlcyBuZWFyIHRoZSBsYWtlIGNhbGxlZCBUaHJhc3ltZW7DqTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRhcnNpbWVuZSwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsYi4gMy44MiIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpaS4gODI8L2JpYmw+OyBUcmFzaW1lbnVzLCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyMi40IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGlpLiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBpbiBUdXNjYW55LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GbGFtaW5pdXMsIGhvd2V2ZXIsIHdhcyBub3QgcGVyc3VhZGVkLCBidXQgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBub3Qgc3VmZmVyIHRoZSB3YXIgdG8gYmUgYnJvdWdodCBuZWFyIFJvbWUsIGFuZCB0aGF0IGhlIHdvdWxkIG5vdCwgbGlrZSBDYW1pbGx1cyBvZiBvbGQsIGZpZ2h0IGluIHRoZSBjaXR5IGZvciB0aGUgY2l0eSdzIGRlZmVuY2UuIEFjY29yZGluZ2x5LCBoZSBvcmRlcmVkIHRoZSB0cmlidW5lcyB0byBsZWFkIHRoZSBhcm15IGZvcnRoLiBCdXQgYXMgRmxhbWluaXVzIGhpbXNlbGYgc3ByYW5nIHVwb24gaGlzIGhvcnNlLCBmb3Igbm8gYXBwYXJlbnQgcmVhc29uLCBhbmQgdW5hY2NvdW50YWJseSwgdGhlIGFuaW1hbCB3YXMgc2VpemVkIHdpdGggcXVpdmVyaW5nIGZyaWdodCwgYW5kIGhlIHdhcyB0aHJvd24gYW5kIGZlbGwgaGVhZCBmb3JlbW9zdCB0byB0aGUgZ3JvdW5kLiBOZXZlcnRoZWxlc3MsIGhlIGluIG5vIHdpc2UgZGVzaXN0ZWQgZnJvbSBoaXMgcHVycG9zZSwgYnV0IHNpbmNlIGhlIGhhZCBzZXQgb3V0IGF0IHRoZSBiZWdpbm5pbmcgdG8gZmFjZSBIYW5uaWJhbCwgZHJldyB1cCBoaXMgZm9yY2VzIG5lYXIgdGhlIGxha2UgY2FsbGVkIFRocmFzeW1lbsOpPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UYXJzaW1lbmUsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMy44MiIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpaS4gODI8L2JpYmw+OyBUcmFzaW1lbnVzLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGluIFR1c2NhbnkuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMy44MiIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpaS4gODI8L2JpYmw+OyBUcmFzaW1lbnVzLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBzb2xkaWVycyBvZiBib3RoIGFybWllcyBoYWQgZW5nYWdlZCwgYXQgdGhlIHZlcnkgY3Jpc2lzIG9mIHRoZSBiYXR0bGUsIGFuIGVhcnRocXVha2Ugb2NjdXJyZWQsIGJ5IHdoaWNoIGNpdGllcyB3ZXJlIG92ZXJ0aHJvd24sIHJpdmVycyBkaXZlcnRlZCBmcm9tIHRoZWlyIGNoYW5uZWxzLCBhbmQgZnJhZ21lbnRzIG9mIGNsaWZmcyB0b3JuIGF3YXkuIEFuZCB5ZXQsIGFsdGhvdWdoIHRoZSBkaXNhc3RlciB3YXMgc28gdmlvbGVudCwgbm8gb25lIG9mIHRoZSBjb21iYXRhbnRzIG5vdGljZWQgaXQgYXQgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5GbGFtaW5pdXMgaGltc2VsZiwgdGhlbiwgd2hpbGUgZGlzcGxheWluZyBtYW55IGRlZWRzIG9mIGRhcmluZyBhbmQgcHJvd2VzcywgZmVsbCwgYW5kIHJvdW5kIGFib3V0IGhpbSB0aGUgZmxvd2VyIG9mIGhpcyBhcm15LiBUaGUgcmVzdCB3ZXJlIHJvdXRlZCB3aXRoIG11Y2ggc2xhdWdodGVyLiBGaWZ0ZWVuIHRob3VzYW5kIHdlcmUgY3V0IHRvIHBpZWNlcywgYW5kIGFzIG1hbnkgbW9yZSB0YWtlbiBwcmlzb25lcnMuIFRoZSBib2R5IG9mIEZsYW1pbml1cywgdG8gd2hpY2ggSGFubmliYWwgd2FzIGVhZ2VyIHRvIGdpdmUgaG9ub3VyYWJsZSBidXJpYWwgYmVjYXVzZSBvZiBoaXMgdmFsb3VyLCBjb3VsZCBub3QgYmUgZm91bmQgYW1vbmcgdGhlIGRlYWQsIGJ1dCBkaXNhcHBlYXJlZCwgbm8gb25lIGV2ZXIga25vd2luZyBob3cuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHNvbGRpZXJzIG9mIGJvdGggYXJtaWVzIGhhZCBlbmdhZ2VkLCBhdCB0aGUgdmVyeSBjcmlzaXMgb2YgdGhlIGJhdHRsZSwgYW4gZWFydGhxdWFrZSBvY2N1cnJlZCwgYnkgd2hpY2ggY2l0aWVzIHdlcmUgb3ZlcnRocm93biwgcml2ZXJzIGRpdmVydGVkIGZyb20gdGhlaXIgY2hhbm5lbHMsIGFuZCBmcmFnbWVudHMgb2YgY2xpZmZzIHRvcm4gYXdheS4gQW5kIHlldCwgYWx0aG91Z2ggdGhlIGRpc2FzdGVyIHdhcyBzbyB2aW9sZW50LCBubyBvbmUgb2YgdGhlIGNvbWJhdGFudHMgbm90aWNlZCBpdCBhdCBhbGwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZsYW1pbml1cyBoaW1zZWxmLCB0aGVuLCB3aGlsZSBkaXNwbGF5aW5nIG1hbnkgZGVlZHMgb2YgZGFyaW5nIGFuZCBwcm93ZXNzLCBmZWxsLCBhbmQgcm91bmQgYWJvdXQgaGltIHRoZSBmbG93ZXIgb2YgaGlzIGFybXkuIFRoZSByZXN0IHdlcmUgcm91dGVkIHdpdGggbXVjaCBzbGF1Z2h0ZXIuIEZpZnRlZW4gdGhvdXNhbmQgd2VyZSBjdXQgdG8gcGllY2VzLCBhbmQgYXMgbWFueSBtb3JlIHRha2VuIHByaXNvbmVycy4gVGhlIGJvZHkgb2YgRmxhbWluaXVzLCB0byB3aGljaCBIYW5uaWJhbCB3YXMgZWFnZXIgdG8gZ2l2ZSBob25vdXJhYmxlIGJ1cmlhbCBiZWNhdXNlIG9mIGhpcyB2YWxvdXIsIGNvdWxkIG5vdCBiZSBmb3VuZCBhbW9uZyB0aGUgZGVhZCwgYnV0IGRpc2FwcGVhcmVkLCBubyBvbmUgZXZlciBrbm93aW5nIGhvdy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IG9mIHRoZSBkZWZlYXQgc3VzdGFpbmVkIGF0IHRoZSBUcmViaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDIuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gbmVpdGhlciB0aGUgZ2VuZXJhbCB3aG8gd3JvdGUgbm9yIHRoZSBtZXNzZW5nZXIgd2hvIHdhcyBzZW50IHdpdGggdGhlIHRpZGluZ3MgZ2F2ZSBhIHN0cmFpZ2h0Zm9yd2FyZCBhY2NvdW50LCB0aGUgdmljdG9yeSBiZWluZyBmYWxzZWx5IGRlY2xhcmVkIHVuY2VydGFpbiBhbmQgZG91YnRmdWw7IGJ1dCBhcyBzb29uIGFzIFBvbXBvbml1cyB0aGUgcHJhZXRvciBoZWFyZCBvZiB0aGlzIHNlY29uZCBkZWZlYXQsIGhlIGNhbGxlZCBhbiBhc3NlbWJseSBvZiB0aGUgcGVvcGxlLCBmYWNlZCBpdCwgYW5kIHdpdGhvdXQgcm91bmRhYm91dCBvciBkZWNlcHRpdmUgcGhyYXNlcywgYnV0IGluIGRvd25yaWdodCBmYXNoaW9uLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1lbiBvZiBSb21lLCB3ZSBoYXZlIGJlZW4gYmVhdGVuIGluIGEgZ3JlYXQgYmF0dGxlOyBvdXIgYXJteSBoYXMgYmVlbiBjdXQgdG8gcGllY2VzOyBvdXIgY29uc3VsLCBGbGFtaW5pdXMsIGlzIGRlYWQuIFRha2UgeWUgdGhlcmVmb3JlIGNvdW5zZWwgZm9yIHlvdXIgb3duIHNhbHZhdGlvbiBhbmQgc2FmZXR5LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHNwZWVjaCBvZiBoaXMgZmVsbCBsaWtlIGEgdGVtcGVzdCB1cG9uIHRoZSBncmVhdCBzZWEgb2YgcGVvcGxlIGJlZm9yZSBoaW0sIGFuZCB0aHJldyB0aGUgY2l0eSBpbnRvIGNvbW1vdGlvbiwgbm9yIGNvdWxkIGRlbGliZXJhdGUgcmVhc29uaW5nIGhvbGQgaXRzIG93biBhbmQgc3RheSB0aGUgZ2VuZXJhbCBjb25zdGVybmF0aW9uLiBCdXQgYWxsIHdlcmUgYnJvdWdodCBhdCBsYXN0IHRvIGJlIG9mIG9uZSBtaW5kLCBuYW1lbHksIHRoYXQgdGhlIHNpdHVhdGlvbiBkZW1hbmRlZCBhIHNvbGUgYW5kIGFic29sdXRlIGF1dGhvcml0eSwgd2hpY2ggdGhleSBjYWxsIGEgZGljdGF0b3JzaGlwLCBhbmQgYSBtYW4gd2hvIHdvdWxkIHdpZWxkIHRoaXMgYXV0aG9yaXR5IHdpdGggZW5lcmd5IGFuZCB3aXRob3V0IGZlYXI7IAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgRmFiaXVzIE1heGltdXMsIGFuZCBoZSBhbG9uZSwgd2FzIHN1Y2ggYSBtYW4sIGhhdmluZyBhIHNwaXJpdCBhbmQgYSBkaWduaXR5IG9mIGNoYXJhY3RlciB0aGF0IGZ1bGx5IG1hdGNoZWQgdGhlIGdyZWF0bmVzcyBvZiB0aGUgb2ZmaWNlLCBhbmQgYmVpbmcgbW9yZW92ZXIgYXQgdGhlIHRpbWUgb2YgbGlmZSB3aGVuIGJvZGlseSB2aWdvdXIgc3RpbGwgc3VmZmljZXMgdG8gY2Fycnkgb3V0IHRoZSBjb3Vuc2VscyBvZiB0aGUgbWluZCwgYW5kIGNvdXJhZ2UgaXMgdGVtcGVyZWQgd2l0aCBwcnVkZW5jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBvZiB0aGUgZGVmZWF0IHN1c3RhaW5lZCBhdCB0aGUgVHJlYmlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMi4yIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBuZWl0aGVyIHRoZSBnZW5lcmFsIHdobyB3cm90ZSBub3IgdGhlIG1lc3NlbmdlciB3aG8gd2FzIHNlbnQgd2l0aCB0aGUgdGlkaW5ncyBnYXZlIGEgc3RyYWlnaHRmb3J3YXJkIGFjY291bnQsIHRoZSB2aWN0b3J5IGJlaW5nIGZhbHNlbHkgZGVjbGFyZWQgdW5jZXJ0YWluIGFuZCBkb3VidGZ1bDsgYnV0IGFzIHNvb24gYXMgUG9tcG9uaXVzIHRoZSBwcmFldG9yIGhlYXJkIG9mIHRoaXMgc2Vjb25kIGRlZmVhdCwgaGUgY2FsbGVkIGFuIGFzc2VtYmx5IG9mIHRoZSBwZW9wbGUsIGZhY2VkIGl0LCBhbmQgd2l0aG91dCByb3VuZGFib3V0IG9yIGRlY2VwdGl2ZSBwaHJhc2VzLCBidXQgaW4gZG93bnJpZ2h0IGZhc2hpb24sIHNhaWQ6IAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmFiLiAyLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1lbiBvZiBSb21lLCB3ZSBoYXZlIGJlZW4gYmVhdGVuIGluIGEgZ3JlYXQgYmF0dGxlOyBvdXIgYXJteSBoYXMgYmVlbiBjdXQgdG8gcGllY2VzOyBvdXIgY29uc3VsLCBGbGFtaW5pdXMsIGlzIGRlYWQuIFRha2UgeWUgdGhlcmVmb3JlIGNvdW5zZWwgZm9yIHlvdXIgb3duIHNhbHZhdGlvbiBhbmQgc2FmZXR5LjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3BlZWNoIG9mIGhpcyBmZWxsIGxpa2UgYSB0ZW1wZXN0IHVwb24gdGhlIGdyZWF0IHNlYSBvZiBwZW9wbGUgYmVmb3JlIGhpbSwgYW5kIHRocmV3IHRoZSBjaXR5IGludG8gY29tbW90aW9uLCBub3IgY291bGQgZGVsaWJlcmF0ZSByZWFzb25pbmcgaG9sZCBpdHMgb3duIGFuZCBzdGF5IHRoZSBnZW5lcmFsIGNvbnN0ZXJuYXRpb24uIEJ1dCBhbGwgd2VyZSBicm91Z2h0IGF0IGxhc3QgdG8gYmUgb2Ygb25lIG1pbmQsIG5hbWVseSwgdGhhdCB0aGUgc2l0dWF0aW9uIGRlbWFuZGVkIGEgc29sZSBhbmQgYWJzb2x1dGUgYXV0aG9yaXR5LCB3aGljaCB0aGV5IGNhbGwgYSBkaWN0YXRvcnNoaXAsIGFuZCBhIG1hbiB3aG8gd291bGQgd2llbGQgdGhpcyBhdXRob3JpdHkgd2l0aCBlbmVyZ3kgYW5kIHdpdGhvdXQgZmVhcjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPnRoYXQgRmFiaXVzIE1heGltdXMsIGFuZCBoZSBhbG9uZSwgd2FzIHN1Y2ggYSBtYW4sIGhhdmluZyBhIHNwaXJpdCBhbmQgYSBkaWduaXR5IG9mIGNoYXJhY3RlciB0aGF0IGZ1bGx5IG1hdGNoZWQgdGhlIGdyZWF0bmVzcyBvZiB0aGUgb2ZmaWNlLCBhbmQgYmVpbmcgbW9yZW92ZXIgYXQgdGhlIHRpbWUgb2YgbGlmZSB3aGVuIGJvZGlseSB2aWdvdXIgc3RpbGwgc3VmZmljZXMgdG8gY2Fycnkgb3V0IHRoZSBjb3Vuc2VscyBvZiB0aGUgbWluZCwgYW5kIGNvdXJhZ2UgaXMgdGVtcGVyZWQgd2l0aCBwcnVkZW5jZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhpcyBjb3Vyc2Ugd2FzIGFkb3B0ZWQsIGFuZCBGYWJpdXMgd2FzIGFwcG9pbnRlZCBkaWN0YXRvci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgYWJzZW5jZSBvZiBhIGNvbnN1bCwgd2hvIGFsb25lIGNvdWxkIGFwcG9pbnQgYSBkaWN0YXRvciwgdGhlIHBlb3BsZSBtYWRlIEZhYml1cyBwcm8tZGljdGF0b3IgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjgiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDguJmFtcDs8L2JpYmw+cnBhcjsuPC9ub3RlPiBIZSBoaW1zZWxmIGFwcG9pbnRlZCBNYXJjdXMgTWludWNpdXMgdG8gYmUgaGlzIE1hc3RlciBvZiBIb3JzZSwgYW5kIHRoZW4gYXQgb25jZSBhc2tlZCBwZXJtaXNzaW9uIG9mIHRoZSBzZW5hdGUgdG8gdXNlIGEgaG9yc2UgaGltc2VsZiB3aGVuIGluIHRoZSBmaWVsZC4gRm9yIHRoaXMgd2FzIG5vdCBoaXMgcmlnaHQsIGJ1dCB3YXMgZm9yYmlkZGVuIGJ5IGFuIGFuY2llbnQgbGF3LCBlaXRoZXIgYmVjYXVzZSB0aGUgUm9tYW5zIHBsYWNlZCB0aGVpciBncmVhdGVzdCBzdHJlbmd0aCBpbiB0aGVpciBpbmZhbnRyeSwgYW5kIGZvciB0aGlzIHJlYXNvbiB0aG91Z2h0IHRoYXQgdGhlaXIgY29tbWFuZGVyIG91Z2h0IHRvIGJlIHdpdGggdGhlIHBoYWxhbnggYW5kIG5vdCBsZWF2ZSBpdDsgb3IgYmVjYXVzZSB0aGV5IHdpc2hlZCwgc2luY2UgdGhlIHBvd2VyIG9mIHRoZSBvZmZpY2UgaW4gYWxsIG90aGVyIHJlc3BlY3RzIGlzIGFzIGdyZWF0IGFzIHRoYXQgb2YgYSB0eXJhbnQsIHRoYXQgaW4gdGhpcyBwb2ludCBhdCBsZWFzdCB0aGUgZGljdGF0b3Igc2hvdWxkIGJlIHBsYWlubHkgZGVwZW5kZW50IG9uIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIEZhYml1cyBoaW1zZWxmIHdhcyBtaW5kZWQgdG8gc2hvdyBmb3J0aCBhdCBvbmNlIHRoZSBtYWduaXR1ZGUgYW5kIGdyYW5kZXVyIG9mIGhpcyBvZmZpY2UsIHRoYXQgdGhlIGNpdGl6ZW5zIG1pZ2h0IGJlIG1vcmUgc3VibWlzc2l2ZSBhbmQgb2JlZGllbnQgdG8gaGlzIGNvbW1hbmRzLiBIZSB0aGVyZWZvcmUgYXBwZWFyZWQgaW4gcHVibGljIGF0dGVuZGVkIGJ5IGEgdW5pdGVkIGJhbmQgb2YgdHdlbnR5LWZvdXIgbGljdG9ycyB3aXRoIHRoZWlyIGZhc2Nlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYWNoIGNvbnN1bCB3YXMgYWxsb3dlZCB0d2VsdmUuPC9ub3RlPiBhbmQgd2hlbiB0aGUgcmVtYWluaW5nIGNvbnN1bCB3YXMgY29taW5nIHRvIG1lZXQgaGltLCBzZW50IGhpcyBhZGp1dGFudCB0byBoaW0gd2l0aCBvcmRlcnMgdG8gZGlzbWlzcyBoaXMgbGljdG9ycywgbGF5IGFzaWRlIHRoZSBpbnNpZ25pYSBvZiBoaXMgb2ZmaWNlLCBhbmQgbWVldCBoaW0gYXMgYSBwcml2YXRlIHBlcnNvbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhpcyBjb3Vyc2Ugd2FzIGFkb3B0ZWQsIGFuZCBGYWJpdXMgd2FzIGFwcG9pbnRlZCBkaWN0YXRvci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBhYnNlbmNlIG9mIGEgY29uc3VsLCB3aG8gYWxvbmUgY291bGQgYXBwb2ludCBhIGRpY3RhdG9yLCB0aGUgcGVvcGxlIG1hZGUgRmFiaXVzIHByby1kaWN0YXRvciAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyMi44IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGlpLiA4LiZhbXA7PC9iaWJsPnJwYXI7Ljwvbm90ZT4gSGUgaGltc2VsZiBhcHBvaW50ZWQgTWFyY3VzIE1pbnVjaXVzIHRvIGJlIGhpcyBNYXN0ZXIgb2YgSG9yc2UsIGFuZCB0aGVuIGF0IG9uY2UgYXNrZWQgcGVybWlzc2lvbiBvZiB0aGUgc2VuYXRlIHRvIHVzZSBhIGhvcnNlIGhpbXNlbGYgd2hlbiBpbiB0aGUgZmllbGQuIEZvciB0aGlzIHdhcyBub3QgaGlzIHJpZ2h0LCBidXQgd2FzIGZvcmJpZGRlbiBieSBhbiBhbmNpZW50IGxhdywgZWl0aGVyIGJlY2F1c2UgdGhlIFJvbWFucyBwbGFjZWQgdGhlaXIgZ3JlYXRlc3Qgc3RyZW5ndGggaW4gdGhlaXIgaW5mYW50cnksIGFuZCBmb3IgdGhpcyByZWFzb24gdGhvdWdodCB0aGF0IHRoZWlyIGNvbW1hbmRlciBvdWdodCB0byBiZSB3aXRoIHRoZSBwaGFsYW54IGFuZCBub3QgbGVhdmUgaXQ7IG9yIGJlY2F1c2UgdGhleSB3aXNoZWQsIHNpbmNlIHRoZSBwb3dlciBvZiB0aGUgb2ZmaWNlIGluIGFsbCBvdGhlciByZXNwZWN0cyBpcyBhcyBncmVhdCBhcyB0aGF0IG9mIGEgdHlyYW50LCB0aGF0IGluIHRoaXMgcG9pbnQgYXQgbGVhc3QgdGhlIGRpY3RhdG9yIHNob3VsZCBiZSBwbGFpbmx5IGRlcGVuZGVudCBvbiB0aGUgcGVvcGxlLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjIuOCIgdmFsaWQ9InllcyI+TGl2eSwgeHhpaS4gOC4mYW1wOzwvYmlibD5ycGFyOy48L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIEZhYml1cyBoaW1zZWxmIHdhcyBtaW5kZWQgdG8gc2hvdyBmb3J0aCBhdCBvbmNlIHRoZSBtYWduaXR1ZGUgYW5kIGdyYW5kZXVyIG9mIGhpcyBvZmZpY2UsIHRoYXQgdGhlIGNpdGl6ZW5zIG1pZ2h0IGJlIG1vcmUgc3VibWlzc2l2ZSBhbmQgb2JlZGllbnQgdG8gaGlzIGNvbW1hbmRzLiBIZSB0aGVyZWZvcmUgYXBwZWFyZWQgaW4gcHVibGljIGF0dGVuZGVkIGJ5IGEgdW5pdGVkIGJhbmQgb2YgdHdlbnR5LWZvdXIgbGljdG9ycyB3aXRoIHRoZWlyIGZhc2Nlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhY2ggY29uc3VsIHdhcyBhbGxvd2VkIHR3ZWx2ZS48L25vdGU+IGFuZCB3aGVuIHRoZSByZW1haW5pbmcgY29uc3VsIHdhcyBjb21pbmcgdG8gbWVldCBoaW0sIHNlbnQgaGlzIGFkanV0YW50IHRvIGhpbSB3aXRoIG9yZGVycyB0byBkaXNtaXNzIGhpcyBsaWN0b3JzLCBsYXkgYXNpZGUgdGhlIGluc2lnbmlhIG9mIGhpcyBvZmZpY2UsIGFuZCBtZWV0IGhpbSBhcyBhIHByaXZhdGUgcGVyc29uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBoZSBiZWdhbiB3aXRoIHRoZSBnb2RzLCB3aGljaCBpcyB0aGUgZmFpcmVzdCBvZiBhbGwgYmVnaW5uaW5ncywgYW5kIHNob3dlZCB0aGUgcGVvcGxlIHRoYXQgdGhlIHJlY2VudCBkaXNhc3RlciB3YXMgZHVlIHRvIHRoZSBuZWdsZWN0IGFuZCBzY29ybiB3aXRoIHdoaWNoIHRoZWlyIGdlbmVyYWwgaGFkIHRyZWF0ZWQgcmVsaWdpb3VzIHJpdGVzLCBhbmQgbm90IHRvIHRoZSBjb3dhcmRpY2Ugb2YgdGhvc2Ugd2hvIGZvdWdodCB1bmRlciBoaW0uIEhlIHRodXMgaW5kdWNlZCB0aGVtLCBpbnN0ZWFkIG9mIGZlYXJpbmcgdGhlaXIgZW5lbWllcywgdG8gcHJvcGl0aWF0ZSBhbmQgaG9ub3VyIHRoZSBnb2RzLiBJdCB3YXMgbm90IHRoYXQgaGUgZmlsbGVkIHRoZW0gd2l0aCBzdXBlcnN0aXRpb24sIGJ1dCByYXRoZXIgdGhhdCBoZSBlbWJvbGRlbmVkIHRoZWlyIHZhbG91ciB3aXRoIHBpZXR5LCBhbGxheWluZyBhbmQgcmVtb3ZpbmcgdGhlIGZlYXIgd2hpY2ggdGhlaXIgZW5lbWllcyBpbnNwaXJlZCwgd2l0aCBob3BlcyBvZiBhaWQgZnJvbSB0aGUgZ29kcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCBtb3Jlb3ZlciwgbWFueSBvZiB0aGUgc28tY2FsbGVkIFNpYnlsbGluZSBib29rcywgY29udGFpbmluZyBzZWNyZXRzIG9mIHNlcnZpY2UgdG8gdGhlIHN0YXRlLCB3ZXJlIGNvbnN1bHRlZCwgYW5kIGl0IGlzIHNhaWQgdGhhdCBzb21lIG9mIHRoZSBvcmFjdWxhciBzYXlpbmdzIHRoZXJlaW4gcHJlc2VydmVkIGNvcnJlc3BvbmRlZCB3aXRoIHRoZSBmb3J0dW5lcyBhbmQgZXZlbnRzIG9mIHRoZSB0aW1lLiBXaGF0IHdhcyB0aHVzIGFzY2VydGFpbmVkLCBob3dldmVyLCBjb3VsZCBub3QgYmUgbWFkZSBwdWJsaWMsIGJ1dCB0aGUgZGljdGF0b3IsIGluIHRoZSBwcmVzZW5jZSBvZiBhbGwgdGhlIHBlb3BsZSwgdm93ZWQgdG8gc2FjcmlmaWNlIHRvIHRoZSBnb2RzIGFuIGVudGlyZSB5ZWFyJ3MgaW5jcmVhc2UgaW4gZ29hdHMsIHN3aW5lLCBzaGVlcCwgYW5kIGNhdHRsZSwgdGhhdCBpcywgYWxsIHRoYXQgSXRhbHkncyBtb3VudGFpbnMsIHBsYWlucywgcml2ZXJzLCBhbmQgbWVhZG93cyBzaG91bGQgYnJlZWQgaW4gdGhlIGNvbWluZyBzcHJpbmcuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5WZXIgc2FjcnVtPC9mb3JlaWduPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjIuMTAiIHZhbGlkPSJ5ZXMiPkxpdnkgeHhpaS4gMTA8L2JpYmw+KS48L25vdGU+IEhlIGxpa2V3aXNlIHZvd2VkIHRvIGNlbGVicmF0ZSBhIG11c2ljYWwgYW5kIGRyYW1hdGljIGZlc3RpdmFsIGluIGhvbm91ciBvZiB0aGUgZ29kcywgd2hpY2ggc2hvdWxkIGNvc3QgdGhyZWUgaHVuZHJlZCBhbmQgdGhpcnR5LXRocmVlIHNlc3RlcnRpYSwgcGx1cyB0aHJlZSBodW5kcmVkIGFuZCB0aGlydHktdGhyZWUgZGVuYXJpaSwgcGx1cyBvbmUgdGhpcmQgb2YgYSBkZW5hcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzdW0sIGluIEdyZWVrIG1vbmV5LCBhbW91bnRzIHRvIGVpZ2h0eS10aHJlZSB0aG91c2FuZCBmaXZlIGh1bmRyZWQgYW5kIGVpZ2h0eS10aHJlZSBkcmFjaG1hcywgcGx1cyB0d28gb2JvbHMuIE5vdyB0aGUgcmVhc29uIGZvciB0aGUgZXhhY3QgcHJlc2NyaXB0aW9uIHRvIHRoaXMgcGFydGljdWxhciBudW1iZXIgaXMgaGFyZCB0byBnaXZlLCB1bmxlc3MgaXQgd2FzIHRoZXJlYnkgZGVzaXJlZCB0byBsYXVkIHRoZSBwb3dlciBvZiB0aGUgbnVtYmVyIHRocmVlLCBhcyBiZWluZyBhIHBlcmZlY3QgbnVtYmVyIGJ5IG5hdHVyZSwgdGhlIGZpcnN0IG9mIG9kZCBudW1iZXJzLCB0aGUgYmVnaW5uaW5nIG9mIHF1YW50aXR5LCBhbmQgYXMgY29udGFpbmluZyBpbiBpdHNlbGYgdGhlIGZpcnN0IGRpZmZlcmVuY2VzIGFuZCB0aGUgZWxlbWVudHMgb2YgZXZlcnkgbnVtYmVyIG1pbmdsZWQgYW5kIGJsZW5kZWQgdG9nZXRoZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGhlIGJlZ2FuIHdpdGggdGhlIGdvZHMsIHdoaWNoIGlzIHRoZSBmYWlyZXN0IG9mIGFsbCBiZWdpbm5pbmdzLCBhbmQgc2hvd2VkIHRoZSBwZW9wbGUgdGhhdCB0aGUgcmVjZW50IGRpc2FzdGVyIHdhcyBkdWUgdG8gdGhlIG5lZ2xlY3QgYW5kIHNjb3JuIHdpdGggd2hpY2ggdGhlaXIgZ2VuZXJhbCBoYWQgdHJlYXRlZCByZWxpZ2lvdXMgcml0ZXMsIGFuZCBub3QgdG8gdGhlIGNvd2FyZGljZSBvZiB0aG9zZSB3aG8gZm91Z2h0IHVuZGVyIGhpbS4gSGUgdGh1cyBpbmR1Y2VkIHRoZW0sIGluc3RlYWQgb2YgZmVhcmluZyB0aGVpciBlbmVtaWVzLCB0byBwcm9waXRpYXRlIGFuZCBob25vdXIgdGhlIGdvZHMuIEl0IHdhcyBub3QgdGhhdCBoZSBmaWxsZWQgdGhlbSB3aXRoIHN1cGVyc3RpdGlvbiwgYnV0IHJhdGhlciB0aGF0IGhlIGVtYm9sZGVuZWQgdGhlaXIgdmFsb3VyIHdpdGggcGlldHksIGFsbGF5aW5nIGFuZCByZW1vdmluZyB0aGUgZmVhciB3aGljaCB0aGVpciBlbmVtaWVzIGluc3BpcmVkLCB3aXRoIGhvcGVzIG9mIGFpZCBmcm9tIHRoZSBnb2RzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgbW9yZW92ZXIsIG1hbnkgb2YgdGhlIHNvLWNhbGxlZCBTaWJ5bGxpbmUgYm9va3MsIGNvbnRhaW5pbmcgc2VjcmV0cyBvZiBzZXJ2aWNlIHRvIHRoZSBzdGF0ZSwgd2VyZSBjb25zdWx0ZWQsIGFuZCBpdCBpcyBzYWlkIHRoYXQgc29tZSBvZiB0aGUgb3JhY3VsYXIgc2F5aW5ncyB0aGVyZWluIHByZXNlcnZlZCBjb3JyZXNwb25kZWQgd2l0aCB0aGUgZm9ydHVuZXMgYW5kIGV2ZW50cyBvZiB0aGUgdGltZS4gV2hhdCB3YXMgdGh1cyBhc2NlcnRhaW5lZCwgaG93ZXZlciwgY291bGQgbm90IGJlIG1hZGUgcHVibGljLCBidXQgdGhlIGRpY3RhdG9yLCBpbiB0aGUgcHJlc2VuY2Ugb2YgYWxsIHRoZSBwZW9wbGUsIHZvd2VkIHRvIHNhY3JpZmljZSB0byB0aGUgZ29kcyBhbiBlbnRpcmUgeWVhcidzIGluY3JlYXNlIGluIGdvYXRzLCBzd2luZSwgc2hlZXAsIGFuZCBjYXR0bGUsIHRoYXQgaXMsIGFsbCB0aGF0IEl0YWx5J3MgbW91bnRhaW5zLCBwbGFpbnMsIHJpdmVycywgYW5kIG1lYWRvd3Mgc2hvdWxkIGJyZWVkIGluIHRoZSBjb21pbmcgc3ByaW5nLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPlZlciBzYWNydW08L2ZvcmVpZ24+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjEwIiB2YWxpZD0ieWVzIj5MaXZ5IHh4aWkuIDEwPC9iaWJsPikuPC9ub3RlPiBIZSBsaWtld2lzZSB2b3dlZCB0byBjZWxlYnJhdGUgYSBtdXNpY2FsIGFuZCBkcmFtYXRpYyBmZXN0aXZhbCBpbiBob25vdXIgb2YgdGhlIGdvZHMsIHdoaWNoIHNob3VsZCBjb3N0IHRocmVlIGh1bmRyZWQgYW5kIHRoaXJ0eS10aHJlZSBzZXN0ZXJ0aWEsIHBsdXMgdGhyZWUgaHVuZHJlZCBhbmQgdGhpcnR5LXRocmVlIGRlbmFyaWksIHBsdXMgb25lIHRoaXJkIG9mIGEgZGVuYXJpdXMuIAoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VmVyIHNhY3J1bTwvZm9yZWlnbj4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjIuMTAiIHZhbGlkPSJ5ZXMiPkxpdnkgeHhpaS4gMTA8L2JpYmw+KS48L3RyYW5zbGF0aW9uPg=="
translation['4.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3VtLCBpbiBHcmVlayBtb25leSwgYW1vdW50cyB0byBlaWdodHktdGhyZWUgdGhvdXNhbmQgZml2ZSBodW5kcmVkIGFuZCBlaWdodHktdGhyZWUgZHJhY2htYXMsIHBsdXMgdHdvIG9ib2xzLiBOb3cgdGhlIHJlYXNvbiBmb3IgdGhlIGV4YWN0IHByZXNjcmlwdGlvbiB0byB0aGlzIHBhcnRpY3VsYXIgbnVtYmVyIGlzIGhhcmQgdG8gZ2l2ZSwgdW5sZXNzIGl0IHdhcyB0aGVyZWJ5IGRlc2lyZWQgdG8gbGF1ZCB0aGUgcG93ZXIgb2YgdGhlIG51bWJlciB0aHJlZSwgYXMgYmVpbmcgYSBwZXJmZWN0IG51bWJlciBieSBuYXR1cmUsIHRoZSBmaXJzdCBvZiBvZGQgbnVtYmVycywgdGhlIGJlZ2lubmluZyBvZiBxdWFudGl0eSwgYW5kIGFzIGNvbnRhaW5pbmcgaW4gaXRzZWxmIHRoZSBmaXJzdCBkaWZmZXJlbmNlcyBhbmQgdGhlIGVsZW1lbnRzIG9mIGV2ZXJ5IG51bWJlciBtaW5nbGVkIGFuZCBibGVuZGVkIHRvZ2V0aGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRodXMgZml4aW5nIHRoZSB0aG91Z2h0cyBvZiB0aGUgcGVvcGxlIHVwb24gdGhlaXIgcmVsYXRpb25zIHdpdGggSGVhdmVuLCBGYWJpdXMgbWFkZSB0aGVtIG1vcmUgY2hlZXJmdWwgcmVnYXJkaW5nIHRoZSBmdXR1cmUuIEJ1dCBoZSBoaW1zZWxmIHB1dCBhbGwgaGlzIGhvcGVzIG9mIHZpY3RvcnkgaW4gaGltc2VsZiwgYmVsaWV2aW5nIHRoYXQgSGVhdmVuIGJlc3Rvd2VkIHN1Y2Nlc3MgYnkgcmVhc29uIG9mIHdpc2RvbSBhbmQgdmFsb3VyLCBhbmQgdHVybmVkIGhpcyBhdHRlbnRpb25zIHRvIEhhbm5pYmFsLiBIZSBkaWQgbm90IHB1cnBvc2UgdG8gZmlnaHQgb3V0IHRoZSBpc3N1ZSB3aXRoIGhpbSwgYnV0IHdpc2hlZCwgaGF2aW5nIHBsZW50eSBvZiB0aW1lLCBtb25leSwgYW5kIG1lbiwgdG8gd2VhciBvdXQgYW5kIGNvbnN1bWUgZ3JhZHVhbGx5IGhpcyBjdWxtaW5hdGluZyB2aWdvdXIsIGhpcyBzY2FudHkgcmVzb3VyY2VzLCBhbmQgaGlzIHNtYWxsIGFybXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYWx3YXlzIHBpdGNoaW5nIGhpcyBjYW1wIGluIGhpbGx5IHJlZ2lvbnMgc28gYXMgdG8gYmUgb3V0IG9mIHJlYWNoIG9mIHRoZSBlbmVteSdzIGNhdmFscnksIGhlIGh1bmcgdGhyZWF0ZW5pbmdseSBvdmVyIHRoZW0uIElmIHRoZXkgc2F0IHN0aWxsLCBoZSB0b28ga2VwdCBxdWlldDsgYnV0IGlmIHRoZXkgbW92ZWQsIGhlIHdvdWxkIGZldGNoIGEgY2lyY3VpdCBkb3duIGZyb20gdGhlIGhlaWdodHMgYW5kIHNob3cgaGltc2VsZiBqdXN0IGZhciBlbm91Z2ggYXdheSB0byBhdm9pZCBiZWluZyBmb3JjZWQgdG8gZmlnaHQgYWdhaW5zdCBoaXMgd2lsbCwgYW5kIHlldCBuZWFyIGVub3VnaCB0byBtYWtlIGhpcyB2ZXJ5IGRlbGF5cyBpbnNwaXJlIHRoZSBlbmVteSB3aXRoIHRoZSBmZWFyIHRoYXQgaGUgd2FzIGdvaW5nIHRvIGdpdmUgYmF0dGxlIGF0IGxhc3QuIEJ1dCBmb3IgbWVyZWx5IGNvbnN1bWluZyB0aW1lIGluIHRoaXMgd2F5IGhlIHdhcyBnZW5lcmFsbHkgZGVzcGlzZWQgYnkgaGlzIGNvdW50cnltZW4sIGFuZCByb3VuZGx5IGFidXNlZCBldmVuIGluIGhpcyBvd24gY2FtcC4gTXVjaCBtb3JlIGRpZCBoaXMgZW5lbWllcyB0aGluayBoaW0gYSBtYW4gb2Ygbm8gY291cmFnZSBhbmQgYSBtZXJlIG5vYm9keSzigJRhbGwgZXhjZXB0IEhhbm5pYmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSwgYW5kIGhlIGFsb25lLCBjb21wcmVoZW5kZWQgdGhlIGNsZXZlcm5lc3Mgb2YgaGlzIGFudGFnb25pc3QsIGFuZCB0aGUgc3R5bGUgb2Ygd2FyZmFyZSB3aGljaCBoZSBoYWQgYWRvcHRlZC4gSGUgdGhlcmVmb3JlIG1hZGUgdXAgaGlzIG1pbmQgdGhhdCBieSBldmVyeSBwb3NzaWJsZSBkZXZpY2UgYW5kIGNvbnN0cmFpbnQgaGlzIGZvZSBtdXN0IGJlIGluZHVjZWQgdG8gZmlnaHQsIG9yIGVsc2UgdGhlIENhcnRoYWdpbmlhbnMgd2VyZSB1bmRvbmUsIHNpbmNlIHRoZXkgd2VyZSB1bmFibGUgdG8gdXNlIHRoZWlyIHdlYXBvbnMsIGluIHdoaWNoIHRoZXkgd2VyZSBzdXBlcmlvciwgYnV0IHdlcmUgc2xvd2x5IGxvc2luZyBhbmQgZXhwZW5kaW5nIHRvIG5vIHB1cnBvc2UgdGhlaXIgbWVuIGFuZCBtb25leXMsIGluIHdoaWNoIHRoZXkgd2VyZSBpbmZlcmlvci4gSGUgdGhlcmVmb3JlIHJlc29ydGVkIHRvIGV2ZXJ5IHNwZWNpZXMgb2Ygc3RyYXRlZ2ljIHRyaWNrIGFuZCBhcnRpZmljZSwgYW5kIHRyaWVkIHRoZW0gYWxsLCBzZWVraW5nLCBsaWtlIGEgY2xldmVyIGF0aGxldGUsIHRvIGdldCBhIGhvbGQgdXBvbiBoaXMgYWR2ZXJzYXJ5LiBOb3cgaGUgd291bGQgYXR0YWNrIEZhYml1cyBkaXJlY3RseSwgbm93IGhlIHdvdWxkIHNlZWsgdG8gdGhyb3cgaGlzIGZvcmNlcyBpbnRvIGNvbmZ1c2lvbiwgYW5kIG5vdyBoZSB3b3VsZCB0cnkgdG8gbGVhZCBoaW0gb2ZmIGV2ZXJ5IHdoaXRoZXIsIGluIGhpcyBkZXNpcmUgdG8gZGl2b3JjZSBoaW0gZnJvbSBoaXMgc2FmZSwgZGVmZW5zaXZlIHBsYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aHVzIGZpeGluZyB0aGUgdGhvdWdodHMgb2YgdGhlIHBlb3BsZSB1cG9uIHRoZWlyIHJlbGF0aW9ucyB3aXRoIEhlYXZlbiwgRmFiaXVzIG1hZGUgdGhlbSBtb3JlIGNoZWVyZnVsIHJlZ2FyZGluZyB0aGUgZnV0dXJlLiBCdXQgaGUgaGltc2VsZiBwdXQgYWxsIGhpcyBob3BlcyBvZiB2aWN0b3J5IGluIGhpbXNlbGYsIGJlbGlldmluZyB0aGF0IEhlYXZlbiBiZXN0b3dlZCBzdWNjZXNzIGJ5IHJlYXNvbiBvZiB3aXNkb20gYW5kIHZhbG91ciwgYW5kIHR1cm5lZCBoaXMgYXR0ZW50aW9ucyB0byBIYW5uaWJhbC4gSGUgZGlkIG5vdCBwdXJwb3NlIHRvIGZpZ2h0IG91dCB0aGUgaXNzdWUgd2l0aCBoaW0sIGJ1dCB3aXNoZWQsIGhhdmluZyBwbGVudHkgb2YgdGltZSwgbW9uZXksIGFuZCBtZW4sIHRvIHdlYXIgb3V0IGFuZCBjb25zdW1lIGdyYWR1YWxseSBoaXMgY3VsbWluYXRpbmcgdmlnb3VyLCBoaXMgc2NhbnR5IHJlc291cmNlcywgYW5kIGhpcyBzbWFsbCBhcm15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgYWx3YXlzIHBpdGNoaW5nIGhpcyBjYW1wIGluIGhpbGx5IHJlZ2lvbnMgc28gYXMgdG8gYmUgb3V0IG9mIHJlYWNoIG9mIHRoZSBlbmVteSdzIGNhdmFscnksIGhlIGh1bmcgdGhyZWF0ZW5pbmdseSBvdmVyIHRoZW0uIElmIHRoZXkgc2F0IHN0aWxsLCBoZSB0b28ga2VwdCBxdWlldDsgYnV0IGlmIHRoZXkgbW92ZWQsIGhlIHdvdWxkIGZldGNoIGEgY2lyY3VpdCBkb3duIGZyb20gdGhlIGhlaWdodHMgYW5kIHNob3cgaGltc2VsZiBqdXN0IGZhciBlbm91Z2ggYXdheSB0byBhdm9pZCBiZWluZyBmb3JjZWQgdG8gZmlnaHQgYWdhaW5zdCBoaXMgd2lsbCwgYW5kIHlldCBuZWFyIGVub3VnaCB0byBtYWtlIGhpcyB2ZXJ5IGRlbGF5cyBpbnNwaXJlIHRoZSBlbmVteSB3aXRoIHRoZSBmZWFyIHRoYXQgaGUgd2FzIGdvaW5nIHRvIGdpdmUgYmF0dGxlIGF0IGxhc3QuIEJ1dCBmb3IgbWVyZWx5IGNvbnN1bWluZyB0aW1lIGluIHRoaXMgd2F5IGhlIHdhcyBnZW5lcmFsbHkgZGVzcGlzZWQgYnkgaGlzIGNvdW50cnltZW4sIGFuZCByb3VuZGx5IGFidXNlZCBldmVuIGluIGhpcyBvd24gY2FtcC4gTXVjaCBtb3JlIGRpZCBoaXMgZW5lbWllcyB0aGluayBoaW0gYSBtYW4gb2Ygbm8gY291cmFnZSBhbmQgYSBtZXJlIG5vYm9keSzigJRhbGwgZXhjZXB0IEhhbm5pYmFsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlLCBhbmQgaGUgYWxvbmUsIGNvbXByZWhlbmRlZCB0aGUgY2xldmVybmVzcyBvZiBoaXMgYW50YWdvbmlzdCwgYW5kIHRoZSBzdHlsZSBvZiB3YXJmYXJlIHdoaWNoIGhlIGhhZCBhZG9wdGVkLiBIZSB0aGVyZWZvcmUgbWFkZSB1cCBoaXMgbWluZCB0aGF0IGJ5IGV2ZXJ5IHBvc3NpYmxlIGRldmljZSBhbmQgY29uc3RyYWludCBoaXMgZm9lIG11c3QgYmUgaW5kdWNlZCB0byBmaWdodCwgb3IgZWxzZSB0aGUgQ2FydGhhZ2luaWFucyB3ZXJlIHVuZG9uZSwgc2luY2UgdGhleSB3ZXJlIHVuYWJsZSB0byB1c2UgdGhlaXIgd2VhcG9ucywgaW4gd2hpY2ggdGhleSB3ZXJlIHN1cGVyaW9yLCBidXQgd2VyZSBzbG93bHkgbG9zaW5nIGFuZCBleHBlbmRpbmcgdG8gbm8gcHVycG9zZSB0aGVpciBtZW4gYW5kIG1vbmV5cywgaW4gd2hpY2ggdGhleSB3ZXJlIGluZmVyaW9yLiBIZSB0aGVyZWZvcmUgcmVzb3J0ZWQgdG8gZXZlcnkgc3BlY2llcyBvZiBzdHJhdGVnaWMgdHJpY2sgYW5kIGFydGlmaWNlLCBhbmQgdHJpZWQgdGhlbSBhbGwsIHNlZWtpbmcsIGxpa2UgYSBjbGV2ZXIgYXRobGV0ZSwgdG8gZ2V0IGEgaG9sZCB1cG9uIGhpcyBhZHZlcnNhcnkuIE5vdyBoZSB3b3VsZCBhdHRhY2sgRmFiaXVzIGRpcmVjdGx5LCBub3cgaGUgd291bGQgc2VlayB0byB0aHJvdyBoaXMgZm9yY2VzIGludG8gY29uZnVzaW9uLCBhbmQgbm93IGhlIHdvdWxkIHRyeSB0byBsZWFkIGhpbSBvZmYgZXZlcnkgd2hpdGhlciwgaW4gaGlzIGRlc2lyZSB0byBkaXZvcmNlIGhpbSBmcm9tIGhpcyBzYWZlLCBkZWZlbnNpdmUgcGxhbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcHVycG9zZSBvZiBGYWJpdXMsIGNvbmZpZGVudCBvZiBhIGZhdm91cmFibGUgaXNzdWUsIHJlbWFpbmVkIGNvbnNpc3RlbnQgYW5kIHVuY2hhbmdlYWJsZS4gSGUgd2FzIGFubm95ZWQsIGhvd2V2ZXIsIGJ5IGhpcyBNYXN0ZXIgb2YgSG9yc2UsIE1pbnVjaXVzLCB3aG8gd2FzIGVhZ2VyIHRvIGZpZ2h0IGFsbCBvdXQgb2Ygc2Vhc29uLCBhbmQgb3ZlciBib2xkLCBhbmQgd2hvIHNvdWdodCB0byB3aW4gYSBmb2xsb3dpbmcgaW4gdGhlIGFybXksIHdoaWNoIGhlIGZpbGxlZCB3aXRoIG1hZCBpbXBldHVvc2l0eSBhbmQgZW1wdHkgaG9wZXMuIFRoZSBzb2xkaWVycyByYWlsZWQgYXQgRmFiaXVzIGFuZCBzY29ybmZ1bGx5IGNhbGxlZCBoaW0gSGFubmliYWwncyBwZWRhZ29ndWU7IGJ1dCBNaW51Y2l1cyB0aGV5IGNvbnNpZGVyZWQgYSBncmVhdCBtYW4sIGFuZCBhIGdlbmVyYWwgd29ydGh5IG9mIFJvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgbW9yZSB0aGVyZWZvcmUgZGlkIGhlIGluZHVsZ2UgaGlzIGFycm9nYW5jZSBhbmQgYm9sZG5lc3MsIGFuZCBzY29mZmVkIGF0IHRoZWlyIGVuY2FtcG1lbnRzIG9uIHRoZSBoZWlnaHRzLCB3aGVyZSwgYXMgaGUgc2FpZCwgdGhlIGRpY3RhdG9yIHdhcyBhbHdheXMgYXJyYW5naW5nIGJlYXV0aWZ1bCB0aGVhdHJlcyBmb3IgdGhlaXIgc3BlY3RhY2xlIG9mIEl0YWx5IGxhaWQgd2FzdGUgd2l0aCBmaXJlIGFuZCBzd29yZC4gQW5kIGhlIHdvdWxkIGFzayB0aGUgZnJpZW5kcyBvZiBGYWJpdXMgd2hldGhlciBoZSB3YXMgdGFraW5nIGhpcyBhcm15IHVwIGludG8gaGVhdmVuLCBoYXZpbmcgbG9zdCBhbGwgaG9wZSBvZiBlYXJ0aCwgb3Igd2hldGhlciBoZSB3cmFwcGVkIGhpbXNlbGYgaW4gY2xvdWRzIGFuZCBtaXN0cyBtZXJlbHkgdG8gcnVuIGF3YXkgZnJvbSB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGlzIGZyaWVuZHMgcmVwb3J0ZWQgdGhpcyB0byBGYWJpdXMsIGFuZCBhZHZpc2VkIGhpbSB0byBkbyBhd2F5IHdpdGggdGhlIG9wcHJvYnJpdW0gYnkgcmlza2luZyBiYXR0bGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SW4gdGhhdCBjYXNlLCBzdXJlbHksPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2hvdWxkIGJlIGEgZ3JlYXRlciBjb3dhcmQgdGhhbiBJIGFtIG5vdyBoZWxkIHRvIGJlLCBpZiB0aHJvdWdoIGZlYXIgb2YgYWJ1c2l2ZSBqZXN0cyBJIHNob3VsZCBhYmFuZG9uIG15IGZpeGVkIHBsYW5zLiBBbmQgdmVyaWx5IHRoZSBmZWFyIHdoaWNoIG9uZSBleGVyY2lzZXMgaW4gYmVoYWxmIG9mIGhpcyBjb3VudHJ5IGlzIG5vdCBzaGFtZWZ1bDsgYnV0IHRvIGJlIGZyaWdodGVuZWQgZnJvbSBvbmUncyBjb3Vyc2UgYnkgdGhlIG9waW5pb25zIG9mIG1lbiwgYW5kIGJ5IHRoZWlyIHNsYW5kZXJvdXMgY2Vuc3VyZXMsIHRoYXQgbWFya3MgYSBtYW4gdW53b3J0aHkgb2Ygc28gaGlnaCBhbiBvZmZpY2UgYXMgdGhpcywgd2hvIG1ha2VzIGhpbXNlbGYgdGhlIHNsYXZlIG9mIHRoZSBmb29scyBvdmVyIHdob20gaGUgaXMgaW4gZHV0eSBib3VuZCB0byBiZSBsb3JkIGFuZCBtYXN0ZXIuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgcHVycG9zZSBvZiBGYWJpdXMsIGNvbmZpZGVudCBvZiBhIGZhdm91cmFibGUgaXNzdWUsIHJlbWFpbmVkIGNvbnNpc3RlbnQgYW5kIHVuY2hhbmdlYWJsZS4gSGUgd2FzIGFubm95ZWQsIGhvd2V2ZXIsIGJ5IGhpcyBNYXN0ZXIgb2YgSG9yc2UsIE1pbnVjaXVzLCB3aG8gd2FzIGVhZ2VyIHRvIGZpZ2h0IGFsbCBvdXQgb2Ygc2Vhc29uLCBhbmQgb3ZlciBib2xkLCBhbmQgd2hvIHNvdWdodCB0byB3aW4gYSBmb2xsb3dpbmcgaW4gdGhlIGFybXksIHdoaWNoIGhlIGZpbGxlZCB3aXRoIG1hZCBpbXBldHVvc2l0eSBhbmQgZW1wdHkgaG9wZXMuIFRoZSBzb2xkaWVycyByYWlsZWQgYXQgRmFiaXVzIGFuZCBzY29ybmZ1bGx5IGNhbGxlZCBoaW0gSGFubmliYWwncyBwZWRhZ29ndWU7IGJ1dCBNaW51Y2l1cyB0aGV5IGNvbnNpZGVyZWQgYSBncmVhdCBtYW4sIGFuZCBhIGdlbmVyYWwgd29ydGh5IG9mIFJvbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgbW9yZSB0aGVyZWZvcmUgZGlkIGhlIGluZHVsZ2UgaGlzIGFycm9nYW5jZSBhbmQgYm9sZG5lc3MsIGFuZCBzY29mZmVkIGF0IHRoZWlyIGVuY2FtcG1lbnRzIG9uIHRoZSBoZWlnaHRzLCB3aGVyZSwgYXMgaGUgc2FpZCwgdGhlIGRpY3RhdG9yIHdhcyBhbHdheXMgYXJyYW5naW5nIGJlYXV0aWZ1bCB0aGVhdHJlcyBmb3IgdGhlaXIgc3BlY3RhY2xlIG9mIEl0YWx5IGxhaWQgd2FzdGUgd2l0aCBmaXJlIGFuZCBzd29yZC4gQW5kIGhlIHdvdWxkIGFzayB0aGUgZnJpZW5kcyBvZiBGYWJpdXMgd2hldGhlciBoZSB3YXMgdGFraW5nIGhpcyBhcm15IHVwIGludG8gaGVhdmVuLCBoYXZpbmcgbG9zdCBhbGwgaG9wZSBvZiBlYXJ0aCwgb3Igd2hldGhlciBoZSB3cmFwcGVkIGhpbXNlbGYgaW4gY2xvdWRzIGFuZCBtaXN0cyBtZXJlbHkgdG8gcnVuIGF3YXkgZnJvbSB0aGUgZW5lbXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGlzIGZyaWVuZHMgcmVwb3J0ZWQgdGhpcyB0byBGYWJpdXMsIGFuZCBhZHZpc2VkIGhpbSB0byBkbyBhd2F5IHdpdGggdGhlIG9wcHJvYnJpdW0gYnkgcmlza2luZyBiYXR0bGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JbiB0aGF0IGNhc2UsIHN1cmVseSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHNob3VsZCBiZSBhIGdyZWF0ZXIgY293YXJkIHRoYW4gSSBhbSBub3cgaGVsZCB0byBiZSwgaWYgdGhyb3VnaCBmZWFyIG9mIGFidXNpdmUgamVzdHMgSSBzaG91bGQgYWJhbmRvbiBteSBmaXhlZCBwbGFucy4gQW5kIHZlcmlseSB0aGUgZmVhciB3aGljaCBvbmUgZXhlcmNpc2VzIGluIGJlaGFsZiBvZiBoaXMgY291bnRyeSBpcyBub3Qgc2hhbWVmdWw7IGJ1dCB0byBiZSBmcmlnaHRlbmVkIGZyb20gb25lJ3MgY291cnNlIGJ5IHRoZSBvcGluaW9ucyBvZiBtZW4sIGFuZCBieSB0aGVpciBzbGFuZGVyb3VzIGNlbnN1cmVzLCB0aGF0IG1hcmtzIGEgbWFuIHVud29ydGh5IG9mIHNvIGhpZ2ggYW4gb2ZmaWNlIGFzIHRoaXMsIHdobyBtYWtlcyBoaW1zZWxmIHRoZSBzbGF2ZSBvZiB0aGUgZm9vbHMgb3ZlciB3aG9tIGhlIGlzIGluIGR1dHkgYm91bmQgdG8gYmUgbG9yZCBhbmQgbWFzdGVyLjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBIYW5uaWJhbCBmZWxsIGludG8gYSBncmlldm91cyBlcnJvci4gSGUgd2lzaGVkIHRvIGRyYXcgaGlzIGFybXkgb2ZmIHNvbWUgZGlzdGFuY2UgYmV5b25kIEZhYml1cywgYW5kIG9jY3VweSBwbGFpbnMgYWZmb3JkaW5nIHBhc3R1cmFnZS4gSGUgdGhlcmVmb3JlIG9yZGVyZWQgaGlzIG5hdGl2ZSBndWlkZXMgdG8gY29uZHVjdCBoaW0sIGltbWVkaWF0ZWx5IGFmdGVyIHN1cHBlciwgaW50byB0aGUgZGlzdHJpY3Qgb2YgQ2FzaW51bS4gQnV0IHRoZXkgZGlkIG5vdCBoZWFyIHRoZSBuYW1lIGNvcnJlY3RseSwgb3dpbmcgdG8gaGlzIGZvcmVpZ24gd2F5IG9mIHByb25vdW5jaW5nIGl0LCBhbmQgcHJvbXB0bHkgaHVycmllZCBoaXMgZm9yY2VzIHRvIHRoZSBlZGdlIG9mIENhbXBhbmlhLCBpbnRvIHRoZSBjaXR5IGFuZCBkaXN0cmljdCBvZiBDYXNpbGludW0sIHRocm91Z2ggdGhlIG1pZHN0IG9mIHdoaWNoIGZsb3dzIGEgZGl2aWRpbmcgcml2ZXIsIGNhbGxlZCBWdWx0dXJudXMgYnkgdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJlZ2lvbiBpcyBvdGhlcndpc2UgZW5jb21wYXNzZWQgYnkgbW91bnRhaW5zLCBidXQgYSBuYXJyb3cgZGVmaWxlIG9wZW5zIG91dCB0b3dhcmRzIHRoZSBzZWEsIGluIHRoZSB2aWNpbml0eSBvZiB3aGljaCBpdCBiZWNvbWVzIG1hcnNoeSwgZnJvbSB0aGUgb3ZlcmZsb3cgb2YgdGhlIHJpdmVyLCBoYXMgaGlnaCBzYW5kLWhlYXBzLCBhbmQgdGVybWluYXRlcyBpbiBhIGJlYWNoIHdoZXJlIHRoZXJlIGlzIG5vIGFuY2hvcmFnZSBiZWNhdXNlIG9mIHRoZSBkYXNoaW5nIHdhdmVzLiBXaGlsZSBIYW5uaWJhbCB3YXMgZGVzY2VuZGluZyBpbnRvIHRoaXMgdmFsbGV5LCBGYWJpdXMsIHRha2luZyBhZHZhbnRhZ2Ugb2YgaGlzIGFjcXVhaW50YW5jZSB3aXRoIHRoZSB3YXlzLCBtYXJjaGVkIHJvdW5kIGhpbSwgYW5kIGJsb2NrZWQgdXAgdGhlIG5hcnJvdyBvdXRsZXQgd2l0aCBhIGRldGFjaG1lbnQgb2YgZm91ciB0aG91c2FuZCBoZWF2eSBpbmZhbnRyeS4gVGhlIHJlc3Qgb2YgaGlzIGFybXkgaGUgcG9zdGVkIHRvIGFkdmFudGFnZSBvbiB0aGUgcmVtYWluaW5nIGhlaWdodHMsIHdoaWxlIHdpdGggdGhlIGxpZ2h0ZXN0IGFuZCByZWFkaWVzdCBvZiBoaXMgdHJvb3BzIGhlIGZlbGwgdXBvbiB0aGUgZW5lbXkncyByZWFyLWd1YXJkLCB0aHJldyB0aGVpciB3aG9sZSBhcm15IGludG8gY29uZnVzaW9uLCBhbmQgc2xldyBhYm91dCBlaWdodCBodW5kcmVkIG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhhbm5pYmFsIG5vdyBwZXJjZWl2ZWQgdGhlIG1pc3Rha2UgaW4gaGlzIHBvc2l0aW9uLCBhbmQgaXRzIHBlcmlsLCBhbmQgY3J1Y2lmaWVkIHRoZSBuYXRpdmUgZ3VpZGVzIHdobyB3ZXJlIHJlc3BvbnNpYmxlIGZvciBpdC4gSGUgd2lzaGVkIHRvIGVmZmVjdCBhIHJldHJlYXQsIGJ1dCBkZXNwYWlyZWQgb2YgZGlzbG9kZ2luZyBoaXMgZW5lbWllcyBieSBkaXJlY3QgYXR0YWNrIGZyb20gdGhlIHBhc3NlcyBvZiB3aGljaCB0aGV5IHdlcmUgbWFzdGVycy4gQWxsIGhpcyBtZW4sIG1vcmVvdmVyLCB3ZXJlIGRpc2hlYXJ0ZW5lZCBhbmQgZmVhcmZ1bCwgdGhpbmtpbmcgdGhhdCB0aGV5IHdlcmUgc3Vycm91bmRlZCBvbiBhbGwgc2lkZXMgYnkgZGlmZmljdWx0aWVzIGZyb20gd2hpY2ggdGhlcmUgd2FzIG5vIGVzY2FwZS4gSGUgdGhlcmVmb3JlIGRldGVybWluZWQgdG8gY2hlYXQgaGlzIGVuZW1pZXMgYnkgYSB0cmljaywgdGhlIG5hdHVyZSBvZiB3aGljaCB3YXMgYXMgZm9sbG93cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBIYW5uaWJhbCBmZWxsIGludG8gYSBncmlldm91cyBlcnJvci4gSGUgd2lzaGVkIHRvIGRyYXcgaGlzIGFybXkgb2ZmIHNvbWUgZGlzdGFuY2UgYmV5b25kIEZhYml1cywgYW5kIG9jY3VweSBwbGFpbnMgYWZmb3JkaW5nIHBhc3R1cmFnZS4gSGUgdGhlcmVmb3JlIG9yZGVyZWQgaGlzIG5hdGl2ZSBndWlkZXMgdG8gY29uZHVjdCBoaW0sIGltbWVkaWF0ZWx5IGFmdGVyIHN1cHBlciwgaW50byB0aGUgZGlzdHJpY3Qgb2YgQ2FzaW51bS4gQnV0IHRoZXkgZGlkIG5vdCBoZWFyIHRoZSBuYW1lIGNvcnJlY3RseSwgb3dpbmcgdG8gaGlzIGZvcmVpZ24gd2F5IG9mIHByb25vdW5jaW5nIGl0LCBhbmQgcHJvbXB0bHkgaHVycmllZCBoaXMgZm9yY2VzIHRvIHRoZSBlZGdlIG9mIENhbXBhbmlhLCBpbnRvIHRoZSBjaXR5IGFuZCBkaXN0cmljdCBvZiBDYXNpbGludW0sIHRocm91Z2ggdGhlIG1pZHN0IG9mIHdoaWNoIGZsb3dzIGEgZGl2aWRpbmcgcml2ZXIsIGNhbGxlZCBWdWx0dXJudXMgYnkgdGhlIFJvbWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZWdpb24gaXMgb3RoZXJ3aXNlIGVuY29tcGFzc2VkIGJ5IG1vdW50YWlucywgYnV0IGEgbmFycm93IGRlZmlsZSBvcGVucyBvdXQgdG93YXJkcyB0aGUgc2VhLCBpbiB0aGUgdmljaW5pdHkgb2Ygd2hpY2ggaXQgYmVjb21lcyBtYXJzaHksIGZyb20gdGhlIG92ZXJmbG93IG9mIHRoZSByaXZlciwgaGFzIGhpZ2ggc2FuZC1oZWFwcywgYW5kIHRlcm1pbmF0ZXMgaW4gYSBiZWFjaCB3aGVyZSB0aGVyZSBpcyBubyBhbmNob3JhZ2UgYmVjYXVzZSBvZiB0aGUgZGFzaGluZyB3YXZlcy4gV2hpbGUgSGFubmliYWwgd2FzIGRlc2NlbmRpbmcgaW50byB0aGlzIHZhbGxleSwgRmFiaXVzLCB0YWtpbmcgYWR2YW50YWdlIG9mIGhpcyBhY3F1YWludGFuY2Ugd2l0aCB0aGUgd2F5cywgbWFyY2hlZCByb3VuZCBoaW0sIGFuZCBibG9ja2VkIHVwIHRoZSBuYXJyb3cgb3V0bGV0IHdpdGggYSBkZXRhY2htZW50IG9mIGZvdXIgdGhvdXNhbmQgaGVhdnkgaW5mYW50cnkuIFRoZSByZXN0IG9mIGhpcyBhcm15IGhlIHBvc3RlZCB0byBhZHZhbnRhZ2Ugb24gdGhlIHJlbWFpbmluZyBoZWlnaHRzLCB3aGlsZSB3aXRoIHRoZSBsaWdodGVzdCBhbmQgcmVhZGllc3Qgb2YgaGlzIHRyb29wcyBoZSBmZWxsIHVwb24gdGhlIGVuZW15J3MgcmVhci1ndWFyZCwgdGhyZXcgdGhlaXIgd2hvbGUgYXJteSBpbnRvIGNvbmZ1c2lvbiwgYW5kIHNsZXcgYWJvdXQgZWlnaHQgaHVuZHJlZCBvZiB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhhbm5pYmFsIG5vdyBwZXJjZWl2ZWQgdGhlIG1pc3Rha2UgaW4gaGlzIHBvc2l0aW9uLCBhbmQgaXRzIHBlcmlsLCBhbmQgY3J1Y2lmaWVkIHRoZSBuYXRpdmUgZ3VpZGVzIHdobyB3ZXJlIHJlc3BvbnNpYmxlIGZvciBpdC4gSGUgd2lzaGVkIHRvIGVmZmVjdCBhIHJldHJlYXQsIGJ1dCBkZXNwYWlyZWQgb2YgZGlzbG9kZ2luZyBoaXMgZW5lbWllcyBieSBkaXJlY3QgYXR0YWNrIGZyb20gdGhlIHBhc3NlcyBvZiB3aGljaCB0aGV5IHdlcmUgbWFzdGVycy4gQWxsIGhpcyBtZW4sIG1vcmVvdmVyLCB3ZXJlIGRpc2hlYXJ0ZW5lZCBhbmQgZmVhcmZ1bCwgdGhpbmtpbmcgdGhhdCB0aGV5IHdlcmUgc3Vycm91bmRlZCBvbiBhbGwgc2lkZXMgYnkgZGlmZmljdWx0aWVzIGZyb20gd2hpY2ggdGhlcmUgd2FzIG5vIGVzY2FwZS4gSGUgdGhlcmVmb3JlIGRldGVybWluZWQgdG8gY2hlYXQgaGlzIGVuZW1pZXMgYnkgYSB0cmljaywgdGhlIG5hdHVyZSBvZiB3aGljaCB3YXMgYXMgZm9sbG93cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZ2F2ZSBvcmRlcnMgdG8gdGFrZSBhYm91dCB0d28gdGhvdXNhbmQgb2YgdGhlIGNhdHRsZSB3aGljaCB0aGV5IGhhZCBjYXB0dXJlZCwgZmFzdGVuIHRvIGVhY2ggb2YgdGhlaXIgaG9ybnMgYSB0b3JjaCBjb25zaXN0aW5nIG9mIGEgYnVuZGxlIG9mIHdpdGhlcyBvciBmYWdnb3RzLCBhbmQgdGhlbiwgaW4gdGhlIG5pZ2h0LCBhdCBhIGdpdmVuIHNpZ25hbCwgdG8gbGlnaHQgdGhlIHRvcmNoZXMgYW5kIGRyaXZlIHRoZSBjYXR0bGUgdG93YXJkcyB0aGUgcGFzc2VzLCBhbG9uZyB0aGUgZGVmaWxlcyBndWFyZGVkIGJ5IHRoZSBlbmVteS4gQXMgc29vbiBhcyBoaXMgb3JkZXJzIGhhZCBiZWVuIG9iZXllZCwgaGUgZGVjYW1wZWQgd2l0aCB0aGUgcmVzdCBvZiBoaXMgYXJteSwgaW4gdGhlIGRhcmtuZXNzIHdoaWNoIGhhZCBub3cgY29tZSwgYW5kIGxlZCBpdCBzbG93bHkgYWxvbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjYXR0bGUsIGFzIGxvbmcgYXMgdGhlIGZpcmUgd2FzIHNsaWdodCwgYW5kIGNvbnN1bWVkIG9ubHkgdGhlIHdvb2QsIHdlbnQgb24gcXVpZXRseSwgYXMgdGhleSB3ZXJlIGRyaXZlbiwgdG93YXJkcyB0aGUgc2xvcGVzIG9mIHRoZSBtb3VudGFpbnMsIGFuZCB0aGUgc2hlcGhlcmRzIGFuZCBoZXJkc21lbiB3aG8gbG9va2VkIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyB3ZXJlIGFtYXplZCBhdCB0aGUgZmxhbWVzIGdsZWFtaW5nIG9uIHRoZSB0aXBzIG9mIHRoZWlyIGhvcm5zLiBUaGV5IHRob3VnaHQgYW4gYXJteSB3YXMgbWFyY2hpbmcgaW4gY2xvc2UgYXJyYXkgYnkgdGhlIGxpZ2h0IG9mIG1hbnkgdG9yY2hlcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGhvcm5zIGhhZCBiZWVuIGJ1cm5lZCBkb3duIHRvIHRoZSByb290cywgYW5kIHRoZSBsaXZlIGZsZXNoIGZlbHQgdGhlIGZsYW1lcywgYW5kIHRoZSBjYXR0bGUsIGF0IHRoZSBwYWluLCBzaG9vayBhbmQgdG9zc2VkIHRoZWlyIGhlYWRzLCBhbmQgc28gY292ZXJlZCBvbmUgYW5vdGhlciB3aXRoIHF1YW50aXRpZXMgb2YgZmlyZSwgdGhlbiB0aGV5IGtlcHQgbm8gb3JkZXIgaW4gdGhlaXIgZ29pbmcsIGJ1dCwgaW4gdGVycm9yIGFuZCBhbmd1aXNoLCB3ZW50IGRhc2hpbmcgZG93biB0aGUgbW91bnRhaW5zLCB0aGVpciBmb3JlaGVhZHMgYW5kIHRhaWxzIGFibGF6ZSwgYW5kIHNldHRpbmcgZmlyZSBhbHNvIHRvIG11Y2ggb2YgdGhlIGZvcmVzdCB0aHJvdWdoIHdoaWNoIHRoZXkgZmxlZC4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzLCBvZiBjb3Vyc2UsIGEgZmVhcmZ1bCBzcGVjdGFjbGUgdG8gdGhlIFJvbWFucyBndWFyZGluZyB0aGUgcGFzc2VzLiBGb3IgdGhlIGZsYW1lcyBzZWVtZWQgdG8gY29tZSBmcm9tIHRvcmNoZXMgaW4gdGhlIGhhbmRzIG9mIG1lbiB3aG8gd2VyZSBydW5uaW5nIGhpdGhlciBhbmQgdGhpdGhlciB3aXRoIHRoZW0uIFRoZXkgd2VyZSB0aGVyZWZvcmUgaW4gZ3JlYXQgY29tbW90aW9uIGFuZCBmZWFyLCBiZWxpZXZpbmcgdGhhdCB0aGUgZW5lbXkgd2VyZSBhZHZhbmNpbmcgdXBvbiB0aGVtIGZyb20gYWxsIHF1YXJ0ZXJzIGFuZCBzdXJyb3VuZGluZyB0aGVtIG9uIGV2ZXJ5IHNpZGUuIFRoZXJlZm9yZSB0aGV5IGhhZCBub3QgdGhlIGNvdXJhZ2UgdG8gaG9sZCB0aGVpciBwb3N0cywgYnV0IHdpdGhkcmV3IHRvIHRoZSBtYWluIGJvZHkgb2YgdGhlaXIgYXJteSBvbiB0aGUgaGVpZ2h0cywgYW5kIGFiYW5kb25lZCB0aGUgZGVmaWxlcy4gSW5zdGFudGx5IHRoZSBsaWdodC1hcm1lZCB0cm9vcHMgb2YgSGFubmliYWwgY2FtZSB1cCBhbmQgdG9vayBwb3NzZXNzaW9uIG9mIHRoZSBwYXNzZXMsIGFuZCB0aGUgcmVzdCBvZiBoaXMgZm9yY2VzIHByZXNlbnRseSBqb2luZWQgdGhlbSB3aXRob3V0IGFueSBmZWFyLCBhbHRob3VnaCBoZWF2aWx5IGVuY3VtYmVyZWQgd2l0aCBtdWNoIHNwb2lsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGdhdmUgb3JkZXJzIHRvIHRha2UgYWJvdXQgdHdvIHRob3VzYW5kIG9mIHRoZSBjYXR0bGUgd2hpY2ggdGhleSBoYWQgY2FwdHVyZWQsIGZhc3RlbiB0byBlYWNoIG9mIHRoZWlyIGhvcm5zIGEgdG9yY2ggY29uc2lzdGluZyBvZiBhIGJ1bmRsZSBvZiB3aXRoZXMgb3IgZmFnZ290cywgYW5kIHRoZW4sIGluIHRoZSBuaWdodCwgYXQgYSBnaXZlbiBzaWduYWwsIHRvIGxpZ2h0IHRoZSB0b3JjaGVzIGFuZCBkcml2ZSB0aGUgY2F0dGxlIHRvd2FyZHMgdGhlIHBhc3NlcywgYWxvbmcgdGhlIGRlZmlsZXMgZ3VhcmRlZCBieSB0aGUgZW5lbXkuIEFzIHNvb24gYXMgaGlzIG9yZGVycyBoYWQgYmVlbiBvYmV5ZWQsIGhlIGRlY2FtcGVkIHdpdGggdGhlIHJlc3Qgb2YgaGlzIGFybXksIGluIHRoZSBkYXJrbmVzcyB3aGljaCBoYWQgbm93IGNvbWUsIGFuZCBsZWQgaXQgc2xvd2x5IGFsb25nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjYXR0bGUsIGFzIGxvbmcgYXMgdGhlIGZpcmUgd2FzIHNsaWdodCwgYW5kIGNvbnN1bWVkIG9ubHkgdGhlIHdvb2QsIHdlbnQgb24gcXVpZXRseSwgYXMgdGhleSB3ZXJlIGRyaXZlbiwgdG93YXJkcyB0aGUgc2xvcGVzIG9mIHRoZSBtb3VudGFpbnMsIGFuZCB0aGUgc2hlcGhlcmRzIGFuZCBoZXJkc21lbiB3aG8gbG9va2VkIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyB3ZXJlIGFtYXplZCBhdCB0aGUgZmxhbWVzIGdsZWFtaW5nIG9uIHRoZSB0aXBzIG9mIHRoZWlyIGhvcm5zLiBUaGV5IHRob3VnaHQgYW4gYXJteSB3YXMgbWFyY2hpbmcgaW4gY2xvc2UgYXJyYXkgYnkgdGhlIGxpZ2h0IG9mIG1hbnkgdG9yY2hlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBob3JucyBoYWQgYmVlbiBidXJuZWQgZG93biB0byB0aGUgcm9vdHMsIGFuZCB0aGUgbGl2ZSBmbGVzaCBmZWx0IHRoZSBmbGFtZXMsIGFuZCB0aGUgY2F0dGxlLCBhdCB0aGUgcGFpbiwgc2hvb2sgYW5kIHRvc3NlZCB0aGVpciBoZWFkcywgYW5kIHNvIGNvdmVyZWQgb25lIGFub3RoZXIgd2l0aCBxdWFudGl0aWVzIG9mIGZpcmUsIHRoZW4gdGhleSBrZXB0IG5vIG9yZGVyIGluIHRoZWlyIGdvaW5nLCBidXQsIGluIHRlcnJvciBhbmQgYW5ndWlzaCwgd2VudCBkYXNoaW5nIGRvd24gdGhlIG1vdW50YWlucywgdGhlaXIgZm9yZWhlYWRzIGFuZCB0YWlscyBhYmxhemUsIGFuZCBzZXR0aW5nIGZpcmUgYWxzbyB0byBtdWNoIG9mIHRoZSBmb3Jlc3QgdGhyb3VnaCB3aGljaCB0aGV5IGZsZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcywgb2YgY291cnNlLCBhIGZlYXJmdWwgc3BlY3RhY2xlIHRvIHRoZSBSb21hbnMgZ3VhcmRpbmcgdGhlIHBhc3Nlcy4gRm9yIHRoZSBmbGFtZXMgc2VlbWVkIHRvIGNvbWUgZnJvbSB0b3JjaGVzIGluIHRoZSBoYW5kcyBvZiBtZW4gd2hvIHdlcmUgcnVubmluZyBoaXRoZXIgYW5kIHRoaXRoZXIgd2l0aCB0aGVtLiBUaGV5IHdlcmUgdGhlcmVmb3JlIGluIGdyZWF0IGNvbW1vdGlvbiBhbmQgZmVhciwgYmVsaWV2aW5nIHRoYXQgdGhlIGVuZW15IHdlcmUgYWR2YW5jaW5nIHVwb24gdGhlbSBmcm9tIGFsbCBxdWFydGVycyBhbmQgc3Vycm91bmRpbmcgdGhlbSBvbiBldmVyeSBzaWRlLiBUaGVyZWZvcmUgdGhleSBoYWQgbm90IHRoZSBjb3VyYWdlIHRvIGhvbGQgdGhlaXIgcG9zdHMsIGJ1dCB3aXRoZHJldyB0byB0aGUgbWFpbiBib2R5IG9mIHRoZWlyIGFybXkgb24gdGhlIGhlaWdodHMsIGFuZCBhYmFuZG9uZWQgdGhlIGRlZmlsZXMuIEluc3RhbnRseSB0aGUgbGlnaHQtYXJtZWQgdHJvb3BzIG9mIEhhbm5pYmFsIGNhbWUgdXAgYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgcGFzc2VzLCBhbmQgdGhlIHJlc3Qgb2YgaGlzIGZvcmNlcyBwcmVzZW50bHkgam9pbmVkIHRoZW0gd2l0aG91dCBhbnkgZmVhciwgYWx0aG91Z2ggaGVhdmlseSBlbmN1bWJlcmVkIHdpdGggbXVjaCBzcG9pbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgc3RpbGwgbmlnaHQgd2hlbiBGYWJpdXMgYmVjYW1lIGF3YXJlIG9mIHRoZSBydXNlLCBmb3Igc29tZSBvZiB0aGUgY2F0dGxlLCBpbiB0aGVpciByYW5kb20gZmxpZ2h0LCB3ZXJlIGNhcHR1cmVkIGJ5IGhpcyBtZW47IGJ1dCBoZSB3YXMgYWZyYWlkIG9mIGFtYnVzaGVzIGluIHRoZSBkYXJrbmVzcywgYW5kIHNvIGtlcHQgc3RpbGwsIHdpdGggaGlzIGZvcmNlcyB1bmRlciBhcm1zLiBXaGVuIGl0IHdhcyBkYXksIGhvd2V2ZXIsIGhlIHB1cnN1ZWQgdGhlIGVuZW15LCBhbmQgaHVuZyB1cG9uIHRoZWlyIHJlYXItZ3VhcmQsIGFuZCB0aGVyZSB3YXMgaGFuZC10by1oYW5kIGZpZ2h0aW5nIG92ZXIgZGlmZmljdWx0IGFyb3VuZCBhbmQgbXVjaCB0dW11bHQgYW5kIGNvbmZ1c2lvbi4gQXQgbGFzdCBIYW5uaWJhbCBzZW50IGJhY2sgZnJvbSBoaXMgdmFuIGEgYm9keSBvZiBTcGFuaWFyZHMs4oCUbmltYmxlLCBsaWdodC1mb290ZWQgbWVuLCBhbmQgZ29vZCBtb3VudGFpbmVlcnMsIHdobyBmZWxsIHVwb24gdGhlIGhlYXZ5LWFybWVkIFJvbWFuIGluZmFudHJ5LCBjdXQgbWFueSBvZiB0aGVtIHRvIHBpZWNlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbmUgdGhvdXNhbmQsIGFjY29yZGluZyB0byA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiAzLjk0IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgaWlpLiA5NC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGZvcmNlZCBGYWJpdXMgdG8gdHVybiBiYWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IG1vcmUgdGhhbiBldmVyIHdhcyBGYWJpdXMgdGhlIG1hcmsgZm9yIHNjb3JuIGFuZCBhYnVzZS4gSGUgaGFkIHJlbm91bmNlZCBhbGwgYm9sZCBhbmQgb3BlbiBmaWdodGluZywgd2l0aCB0aGUgaWRlYSBvZiBjb25xdWVyaW5nIEhhbm5pYmFsIGJ5IHRoZSBleGVyY2lzZSBvZiBzdXBlcmlvciBqdWRnbWVudCBhbmQgZm9yZXNpZ2h0LCBhbmQgbm93IGhlIHdhcyBjbGVhcmx5IHZhbnF1aXNoZWQgaGltc2VsZiBieSB0aGVzZSB2ZXJ5IHF1YWxpdGllcyBpbiBoaXMgZm9lLCBhbmQgb3V0LWdlbmVyYWxsZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgc3RpbGwgbmlnaHQgd2hlbiBGYWJpdXMgYmVjYW1lIGF3YXJlIG9mIHRoZSBydXNlLCBmb3Igc29tZSBvZiB0aGUgY2F0dGxlLCBpbiB0aGVpciByYW5kb20gZmxpZ2h0LCB3ZXJlIGNhcHR1cmVkIGJ5IGhpcyBtZW47IGJ1dCBoZSB3YXMgYWZyYWlkIG9mIGFtYnVzaGVzIGluIHRoZSBkYXJrbmVzcywgYW5kIHNvIGtlcHQgc3RpbGwsIHdpdGggaGlzIGZvcmNlcyB1bmRlciBhcm1zLiBXaGVuIGl0IHdhcyBkYXksIGhvd2V2ZXIsIGhlIHB1cnN1ZWQgdGhlIGVuZW15LCBhbmQgaHVuZyB1cG9uIHRoZWlyIHJlYXItZ3VhcmQsIGFuZCB0aGVyZSB3YXMgaGFuZC10by1oYW5kIGZpZ2h0aW5nIG92ZXIgZGlmZmljdWx0IGFyb3VuZCBhbmQgbXVjaCB0dW11bHQgYW5kIGNvbmZ1c2lvbi4gQXQgbGFzdCBIYW5uaWJhbCBzZW50IGJhY2sgZnJvbSBoaXMgdmFuIGEgYm9keSBvZiBTcGFuaWFyZHMs4oCUbmltYmxlLCBsaWdodC1mb290ZWQgbWVuLCBhbmQgZ29vZCBtb3VudGFpbmVlcnMsIHdobyBmZWxsIHVwb24gdGhlIGhlYXZ5LWFybWVkIFJvbWFuIGluZmFudHJ5LCBjdXQgbWFueSBvZiB0aGVtIHRvIHBpZWNlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk9uZSB0aG91c2FuZCwgYWNjb3JkaW5nIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMy45NCIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpaS4gOTQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBmb3JjZWQgRmFiaXVzIHRvIHR1cm4gYmFjay4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDMuOTQiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzLCBpaWkuIDk0LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgbW9yZSB0aGFuIGV2ZXIgd2FzIEZhYml1cyB0aGUgbWFyayBmb3Igc2Nvcm4gYW5kIGFidXNlLiBIZSBoYWQgcmVub3VuY2VkIGFsbCBib2xkIGFuZCBvcGVuIGZpZ2h0aW5nLCB3aXRoIHRoZSBpZGVhIG9mIGNvbnF1ZXJpbmcgSGFubmliYWwgYnkgdGhlIGV4ZXJjaXNlIG9mIHN1cGVyaW9yIGp1ZGdtZW50IGFuZCBmb3Jlc2lnaHQsIGFuZCBub3cgaGUgd2FzIGNsZWFybHkgdmFucXVpc2hlZCBoaW1zZWxmIGJ5IHRoZXNlIHZlcnkgcXVhbGl0aWVzIGluIGhpcyBmb2UsIGFuZCBvdXQtZ2VuZXJhbGxlZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5IYW5uaWJhbCwgbW9yZW92ZXIsIHdpc2hpbmcgdG8gaW5mbGFtZSBzdGlsbCBtb3JlIHRoZSB3cmF0aCBvZiB0aGUgUm9tYW5zIGFnYWluc3QgRmFiaXVzLCBPbiBjb21pbmcgdG8gaGlzIGZpZWxkcywgZ2F2ZSBvcmRlcnMgdG8gYnVybiBhbmQgZGVzdHJveSBldmVyeXRoaW5nIGVsc2UsIGJ1dCBoYWQgdGhlc2Ugc3BhcmVkLCBhbmQgdGhlc2UgYWxvbmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAzMy4yIiB2YWxpZD0ieWVzIj5QZXJpY2xlcywgeHh4aWlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBIZSBhbHNvIHNldCBhIGd1YXJkIG92ZXIgdGhlbSwgd2hpY2ggc3VmZmVyZWQgbm8gaGFybSB0byBiZSBkb25lIHRoZW0sIGFuZCBub3RoaW5nIHRvIGJlIHRha2VuIGZyb20gdGhlbS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoaXMgd2FzIHJlcG9ydGVkIGF0IFJvbWUsIGl0IGJyb3VnaHQgbW9yZSBvZGl1bSB1cG9uIEZhYml1cy4gVGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUgYWxzbyBrZXB0IHVwIGEgY29uc3RhbnQgZGVudW5jaWF0aW9uIG9mIGhpbSwgY2hpZWZseSBhdCB0aGUgaW5zdGlnYXRpb24gYW5kIGJlaGVzdCBvZiBNZXRpbGl1cyBub3QgdGhhdCBNZXRpbGl1cyBoYXRlZCBGYWJpdXMsIGJ1dCBoZSB3YXMgYSBraW5zbWFuIG9mIE1pbnVjaXVzLCB0aGUgTWFzdGVyIG9mIEhvcnNlLCBhbmQgdGhvdWdodCB0aGF0IHNsYW5kZXIgb2YgdGhlIG9uZSBtZWFudCBob25vdXIgYW5kIGZhbWUgZm9yIHRoZSBvdGhlci4gVGhlIHNlbmF0ZSBhbHNvIHdhcyBpbiBhbiBhbmdyeSBtb29kLCBhbmQgZm91bmQgcGFydGljdWxhciBmYXVsdCB3aXRoIEZhYml1cyBmb3IgdGhlIHRlcm1zIGhlIGhhZCBtYWRlIHdpdGggSGFubmliYWwgY29uY2VybmluZyB0aGUgcHJpc29uZXJzIG9mIHdhci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBoYWQgYWdyZWVkIGJldHdlZW4gdGhlbSB0byBleGNoYW5nZSB0aGUgY2FwdGl2ZXMgbWFuIGZvciBtYW4sIGFuZCBpZiBlaXRoZXIgcGFydHkgaGFkIG1vcmUgdGhhbiB0aGUgb3RoZXIsIHRoZSBvbmUgd2hvIHJlY292ZXJlZCB0aGVzZSB3YXMgdG8gcGF5IHR3byBodW5kcmVkIGFuZCBmaWZ0eSBkcmFjaG1hcyBwZXIgbWFuLiBBY2NvcmRpbmdseSwgYWZ0ZXIgdGhlIGV4Y2hhbmdlIG9mIG1hbiBmb3IgbWFuIHdhcyBtYWRlLCBpdCB3YXMgZm91bmQgdGhhdCBIYW5uaWJhbCBzdGlsbCBoYWQgdHdvIGh1bmRyZWQgYW5kIGZvcnR5IFJvbWFucyBsZWZ0LiBUaGUgc2VuYXRlIGRlY2lkZWQgbm90IHRvIHNlbmQgdGhlIHJhbnNvbSBtb25leSBmb3IgdGhlc2UsIGFuZCBmb3VuZCBmYXVsdCB3aXRoIEZhYml1cyBmb3IgdHJ5aW5nLCBpbiBhIG1hbm5lciB1bmJlY29taW5nIGFuZCB1bnByb2ZpdGFibGUgdG8gdGhlIHN0YXRlLCB0byByZWNvdmVyIG1lbiB3aG9zZSBjb3dhcmRpY2UgaGFkIG1hZGUgdGhlbSBhIHByZXkgdG8gdGhlIGVuZW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEZhYml1cyBoZWFyZCBvZiB0aGlzLCBoZSBib3JlIHRoZSByZXNlbnRtZW50IG9mIGhpcyBmZWxsb3ctY2l0aXplbnMgd2l0aCBlcXVhbmltaXR5LCBidXQgc2luY2UgaGUgaGFkIG5vIG1vbmV5LCBhbmQgY291bGQgbm90IGhhcmJvdXIgdGhlIHRob3VnaHQgb2YgY2hlYXRpbmcgSGFubmliYWwgYW5kIGFiYW5kb25pbmcgaGlzIGNvdW50cnltZW4gdG8gdGhlaXIgZmF0ZSwgaGUgc2VudCBoaXMgc29uIHRvIFJvbWUgd2l0aCBvcmRlcnMgdG8gc2VsbCBoaXMgZmllbGRzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDcuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBicmluZyB0aGUgbW9uZXkgdG8gaGltIGF0IG9uY2UsIGF0IGNhbXAuIFRoZSB5b3VuZyBtYW4gc29sZCB0aGUgZXN0YXRlcyBhbmQgcXVpY2tseSBtYWRlIGhpcyByZXR1cm4sIHdoZXJldXBvbiBGYWJpdXMgc2VudCB0aGUgcmFuc29tIG1vbmV5IHRvIEhhbm5pYmFsIGFuZCBnb3QgYmFjayB0aGUgcHJpc29uZXJzIG9mIHdhci4gTWFueSBvZiB0aGVzZSBhZnRlcndhcmRzIG9mZmVyZWQgdG8gcGF5IGhpbSB0aGUgcHJpY2Ugb2YgdGhlaXIgcmFuc29tLCBidXQgaW4gbm8gY2FzZSBkaWQgaGUgdGFrZSBpdCwgcmVtaXR0aW5nIGl0IHJhdGhlciBmb3IgYWxsLgoJCQk8L3A+CiAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBlci4gMzMuMiIgdmFsaWQ9InllcyI+UGVyaWNsZXMsIHh4eGlpaS4gMi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gSGUgYWxzbyBzZXQgYSBndWFyZCBvdmVyIHRoZW0sIHdoaWNoIHN1ZmZlcmVkIG5vIGhhcm0gdG8gYmUgZG9uZSB0aGVtLCBhbmQgbm90aGluZyB0byBiZSB0YWtlbiBmcm9tIHRoZW0uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUGVyLiAzMy4yIiB2YWxpZD0ieWVzIj5QZXJpY2xlcywgeHh4aWlpLiAyLjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyB3YXMgcmVwb3J0ZWQgYXQgUm9tZSwgaXQgYnJvdWdodCBtb3JlIG9kaXVtIHVwb24gRmFiaXVzLiBUaGUgdHJpYnVuZXMgb2YgdGhlIHBlb3BsZSBhbHNvIGtlcHQgdXAgYSBjb25zdGFudCBkZW51bmNpYXRpb24gb2YgaGltLCBjaGllZmx5IGF0IHRoZSBpbnN0aWdhdGlvbiBhbmQgYmVoZXN0IG9mIE1ldGlsaXVzIG5vdCB0aGF0IE1ldGlsaXVzIGhhdGVkIEZhYml1cywgYnV0IGhlIHdhcyBhIGtpbnNtYW4gb2YgTWludWNpdXMsIHRoZSBNYXN0ZXIgb2YgSG9yc2UsIGFuZCB0aG91Z2h0IHRoYXQgc2xhbmRlciBvZiB0aGUgb25lIG1lYW50IGhvbm91ciBhbmQgZmFtZSBmb3IgdGhlIG90aGVyLiBUaGUgc2VuYXRlIGFsc28gd2FzIGluIGFuIGFuZ3J5IG1vb2QsIGFuZCBmb3VuZCBwYXJ0aWN1bGFyIGZhdWx0IHdpdGggRmFiaXVzIGZvciB0aGUgdGVybXMgaGUgaGFkIG1hZGUgd2l0aCBIYW5uaWJhbCBjb25jZXJuaW5nIHRoZSBwcmlzb25lcnMgb2Ygd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGFkIGFncmVlZCBiZXR3ZWVuIHRoZW0gdG8gZXhjaGFuZ2UgdGhlIGNhcHRpdmVzIG1hbiBmb3IgbWFuLCBhbmQgaWYgZWl0aGVyIHBhcnR5IGhhZCBtb3JlIHRoYW4gdGhlIG90aGVyLCB0aGUgb25lIHdobyByZWNvdmVyZWQgdGhlc2Ugd2FzIHRvIHBheSB0d28gaHVuZHJlZCBhbmQgZmlmdHkgZHJhY2htYXMgcGVyIG1hbi4gQWNjb3JkaW5nbHksIGFmdGVyIHRoZSBleGNoYW5nZSBvZiBtYW4gZm9yIG1hbiB3YXMgbWFkZSwgaXQgd2FzIGZvdW5kIHRoYXQgSGFubmliYWwgc3RpbGwgaGFkIHR3byBodW5kcmVkIGFuZCBmb3J0eSBSb21hbnMgbGVmdC4gVGhlIHNlbmF0ZSBkZWNpZGVkIG5vdCB0byBzZW5kIHRoZSByYW5zb20gbW9uZXkgZm9yIHRoZXNlLCBhbmQgZm91bmQgZmF1bHQgd2l0aCBGYWJpdXMgZm9yIHRyeWluZywgaW4gYSBtYW5uZXIgdW5iZWNvbWluZyBhbmQgdW5wcm9maXRhYmxlIHRvIHRoZSBzdGF0ZSwgdG8gcmVjb3ZlciBtZW4gd2hvc2UgY293YXJkaWNlIGhhZCBtYWRlIHRoZW0gYSBwcmV5IHRvIHRoZSBlbmVteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gRmFiaXVzIGhlYXJkIG9mIHRoaXMsIGhlIGJvcmUgdGhlIHJlc2VudG1lbnQgb2YgaGlzIGZlbGxvdy1jaXRpemVucyB3aXRoIGVxdWFuaW1pdHksIGJ1dCBzaW5jZSBoZSBoYWQgbm8gbW9uZXksIGFuZCBjb3VsZCBub3QgaGFyYm91ciB0aGUgdGhvdWdodCBvZiBjaGVhdGluZyBIYW5uaWJhbCBhbmQgYWJhbmRvbmluZyBoaXMgY291bnRyeW1lbiB0byB0aGVpciBmYXRlLCBoZSBzZW50IGhpcyBzb24gdG8gUm9tZSB3aXRoIG9yZGVycyB0byBzZWxsIGhpcyBmaWVsZHM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDcuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBicmluZyB0aGUgbW9uZXkgdG8gaGltIGF0IG9uY2UsIGF0IGNhbXAuIFRoZSB5b3VuZyBtYW4gc29sZCB0aGUgZXN0YXRlcyBhbmQgcXVpY2tseSBtYWRlIGhpcyByZXR1cm4sIHdoZXJldXBvbiBGYWJpdXMgc2VudCB0aGUgcmFuc29tIG1vbmV5IHRvIEhhbm5pYmFsIGFuZCBnb3QgYmFjayB0aGUgcHJpc29uZXJzIG9mIHdhci4gTWFueSBvZiB0aGVzZSBhZnRlcndhcmRzIG9mZmVyZWQgdG8gcGF5IGhpbSB0aGUgcHJpY2Ugb2YgdGhlaXIgcmFuc29tLCBidXQgaW4gbm8gY2FzZSBkaWQgaGUgdGFrZSBpdCwgcmVtaXR0aW5nIGl0IHJhdGhlciBmb3IgYWxsLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDcuMiIgdmFsaWQ9InllcyI+Y2hhcHRlciB2aWkuIDIuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgaGUgd2FzIHN1bW1vbmVkIHRvIFJvbWUgYnkgdGhlIHByaWVzdHMgdG8gYXNzaXN0IGluIHN1bmRyeSBzYWNyaWZpY2VzLCBhbmQgcHV0IGhpcyBmb3JjZXMgaW4gY2hhcmdlIG9mIE1pbnVjaXVzLCB3aG8gd2FzIG5vdCB0byBnaXZlIGJhdHRsZSwgbm9yIGVuZ2FnZSB0aGUgZW5lbXkgaW4gYW55IHdheS4gU3VjaCB3ZXJlIG5vdCBvbmx5IHRoZSBjb21tYW5kcyBvZiBGYWJpdXMgYXMgZGljdGF0b3IsIGJ1dCBhbHNvIGhpcyByZWl0ZXJhdGVkIGNvdW5zZWxzIGFuZCByZXF1ZXN0cy4gVG8gYWxsIHRoZXNlIE1pbnVjaXVzIGdhdmUgbGl0dGxlIGhlZWQsIGFuZCBzdHJhaWdodHdheSBiZWdhbiB0byB0aHJlYXRlbiB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uZSBkYXkgaGUgbm90aWNlZCB0aGF0IEhhbm5pYmFsIGhhZCBzZW50IHRoZSBsYXJnZXIgcGFydCBvZiBoaXMgYXJteSBvZmYgdG8gZm9yYWdlLCB3aGVyZXVwb24gaGUgYXR0YWNrZWQgdGhlIHJlc2lkdWUsIGRyb3ZlIHRoZW0gaGVhZGxvbmcgaW5zaWRlIHRoZWlyIHRyZW5jaGVzLCBzbGV3IG1hbnkgb2YgLnRoZW0sIGFuZCBpbnNwaXJlZCB0aGVtIGFsbCB3aXRoIHRoZSBmZWFyIG9mIGJlaW5nIGhlbGQgaW4gc2llZ2UgYnkgaGltLiBXaGVuIEhhbm5pYmFsJ3MgZm9yY2VzIHdlcmUgcmV1bml0ZWQgaW4gdGhlaXIgY2FtcCwgTWludWNpdXMgZWZmZWN0ZWQgYSBzYWZlIHJldHJlYXQsIHRoZXJlYnkgZmlsbGluZyBoaW1zZWxmIHdpdGggbWVhc3VyZWxlc3MgYm9hc3RmdWxuZXNzIGFuZCBoaXMgc29sZGllcnkgd2l0aCBib2xkbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW4gZXhhZ2dlcmF0ZWQgdmVyc2lvbiBvZiB0aGUgYWZmYWlyIHNwZWVkaWx5IG1hZGUgaXRzIHdheSB0byBSb21lLCBhbmQgRmFiaXVzLCB3aGVuIGhlIGhlYXJkIGl0LCBzYWlkIGhlIHdhcyBtb3JlIGFmcmFpZCBvZiB0aGUgc3VjY2VzcyBvZiBNaW51Y2l1cyB0aGFuIGhlIHdvdWxkIGJlIG9mIGhpcyBmYWlsdXJlLiBCdXQgdGhlIHBlb3BsZSB3ZXJlIGV4YWx0ZWQgaW4gc3Bpcml0IGFuZCBqb3lmdWxseSByYW4gdG8gYSBtZWV0aW5nIGluIHRoZSBmb3J1bS4gVGhlcmUgTWV0aWxpdXMgdGhlaXIgdHJpYnVuZSBtb3VudGVkIHRoZSByb3N0cmEgYW5kIGhhcmFuZ3VlZCB0aGVtLCBleHRvbGxpbmcgTWludWNpdXMsIGJ1dCBkZW5vdW5jaW5nIEZhYml1cywgbm90IGFzIGEgd2Vha2xpbmcgbWVyZWx5LCBub3IgeWV0IGFzIGEgY293YXJkLCBidXQgYWN0dWFsbHkgYXMgYSB0cmFpdG9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBhbHNvIGluY2x1ZGVkIGluIGhpcyBhY2N1c2F0aW9ucyB0aGUgYWJsZXN0IGFuZCBmb3JlbW9zdCBtZW4gb2YgdGhlIHN0YXRlIGJlc2lkZXMuIFRoZXkgaGFkIGJyb3VnaHQgb24gdGhlIHdhciBhdCB0aGUgb3V0c2V0LCBoZSBzYWlkLCBpbiBvcmRlciB0byBjcnVzaCB0aGUgcGVvcGxlLCBhbmQgaGFkIGF0IG9uY2UgZmx1bmcgdGhlIGNpdHkgaW50byB0aGUgaGFuZHMgb2YgYSBtYW4gd2l0aCBzb2xlIGFuZCBhYnNvbHV0ZSBhdXRob3JpdHksIHRoYXQgaGUgbWlnaHQsIGJ5IGhpcyBkaWxhdG9yeSB3b3JrLCBnaXZlIEhhbm5pYmFsIGFuIGFzc3VyZWQgcG9zaXRpb24gYW5kIHRpbWUgdG8gcmVpbmZvcmNlIGhpbXNlbGYgd2l0aCBhbm90aGVyIGFybXkgZnJvbSBMaWJ5YSwgb24gdGhlIHBsZWEgdGhhdCBoZSBoYWQgSXRhbHkgaW4gaGlzIHBvd2VyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGhlIHdhcyBzdW1tb25lZCB0byBSb21lIGJ5IHRoZSBwcmllc3RzIHRvIGFzc2lzdCBpbiBzdW5kcnkgc2FjcmlmaWNlcywgYW5kIHB1dCBoaXMgZm9yY2VzIGluIGNoYXJnZSBvZiBNaW51Y2l1cywgd2hvIHdhcyBub3QgdG8gZ2l2ZSBiYXR0bGUsIG5vciBlbmdhZ2UgdGhlIGVuZW15IGluIGFueSB3YXkuIFN1Y2ggd2VyZSBub3Qgb25seSB0aGUgY29tbWFuZHMgb2YgRmFiaXVzIGFzIGRpY3RhdG9yLCBidXQgYWxzbyBoaXMgcmVpdGVyYXRlZCBjb3Vuc2VscyBhbmQgcmVxdWVzdHMuIFRvIGFsbCB0aGVzZSBNaW51Y2l1cyBnYXZlIGxpdHRsZSBoZWVkLCBhbmQgc3RyYWlnaHR3YXkgYmVnYW4gdG8gdGhyZWF0ZW4gdGhlIGVuZW15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uZSBkYXkgaGUgbm90aWNlZCB0aGF0IEhhbm5pYmFsIGhhZCBzZW50IHRoZSBsYXJnZXIgcGFydCBvZiBoaXMgYXJteSBvZmYgdG8gZm9yYWdlLCB3aGVyZXVwb24gaGUgYXR0YWNrZWQgdGhlIHJlc2lkdWUsIGRyb3ZlIHRoZW0gaGVhZGxvbmcgaW5zaWRlIHRoZWlyIHRyZW5jaGVzLCBzbGV3IG1hbnkgb2YgLnRoZW0sIGFuZCBpbnNwaXJlZCB0aGVtIGFsbCB3aXRoIHRoZSBmZWFyIG9mIGJlaW5nIGhlbGQgaW4gc2llZ2UgYnkgaGltLiBXaGVuIEhhbm5pYmFsJ3MgZm9yY2VzIHdlcmUgcmV1bml0ZWQgaW4gdGhlaXIgY2FtcCwgTWludWNpdXMgZWZmZWN0ZWQgYSBzYWZlIHJldHJlYXQsIHRoZXJlYnkgZmlsbGluZyBoaW1zZWxmIHdpdGggbWVhc3VyZWxlc3MgYm9hc3RmdWxuZXNzIGFuZCBoaXMgc29sZGllcnkgd2l0aCBib2xkbmVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuIGV4YWdnZXJhdGVkIHZlcnNpb24gb2YgdGhlIGFmZmFpciBzcGVlZGlseSBtYWRlIGl0cyB3YXkgdG8gUm9tZSwgYW5kIEZhYml1cywgd2hlbiBoZSBoZWFyZCBpdCwgc2FpZCBoZSB3YXMgbW9yZSBhZnJhaWQgb2YgdGhlIHN1Y2Nlc3Mgb2YgTWludWNpdXMgdGhhbiBoZSB3b3VsZCBiZSBvZiBoaXMgZmFpbHVyZS4gQnV0IHRoZSBwZW9wbGUgd2VyZSBleGFsdGVkIGluIHNwaXJpdCBhbmQgam95ZnVsbHkgcmFuIHRvIGEgbWVldGluZyBpbiB0aGUgZm9ydW0uIFRoZXJlIE1ldGlsaXVzIHRoZWlyIHRyaWJ1bmUgbW91bnRlZCB0aGUgcm9zdHJhIGFuZCBoYXJhbmd1ZWQgdGhlbSwgZXh0b2xsaW5nIE1pbnVjaXVzLCBidXQgZGVub3VuY2luZyBGYWJpdXMsIG5vdCBhcyBhIHdlYWtsaW5nIG1lcmVseSwgbm9yIHlldCBhcyBhIGNvd2FyZCwgYnV0IGFjdHVhbGx5IGFzIGEgdHJhaXRvci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gaW5jbHVkZWQgaW4gaGlzIGFjY3VzYXRpb25zIHRoZSBhYmxlc3QgYW5kIGZvcmVtb3N0IG1lbiBvZiB0aGUgc3RhdGUgYmVzaWRlcy4gVGhleSBoYWQgYnJvdWdodCBvbiB0aGUgd2FyIGF0IHRoZSBvdXRzZXQsIGhlIHNhaWQsIGluIG9yZGVyIHRvIGNydXNoIHRoZSBwZW9wbGUsIGFuZCBoYWQgYXQgb25jZSBmbHVuZyB0aGUgY2l0eSBpbnRvIHRoZSBoYW5kcyBvZiBhIG1hbiB3aXRoIHNvbGUgYW5kIGFic29sdXRlIGF1dGhvcml0eSwgdGhhdCBoZSBtaWdodCwgYnkgaGlzIGRpbGF0b3J5IHdvcmssIGdpdmUgSGFubmliYWwgYW4gYXNzdXJlZCBwb3NpdGlvbiBhbmQgdGltZSB0byByZWluZm9yY2UgaGltc2VsZiB3aXRoIGFub3RoZXIgYXJteSBmcm9tIExpYnlhLCBvbiB0aGUgcGxlYSB0aGF0IGhlIGhhZCBJdGFseSBpbiBoaXMgcG93ZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBGYWJpdXMgY2FtZSBmb3J3YXJkIHRvIHNwZWFrLCBidXQgd2FzdGVkIG5vIHRpbWUgb24gYSBkZWZlbmNlIG9mIGhpbXNlbGYgYWdhaW5zdCB0aGUgdHJpYnVuZS4gSGUgc2ltcGx5IHNhaWQgdGhhdCB0aGUgc2FjcmlmaWNlcyBhbmQgc2FjcmVkIHJpdGVzIG11c3QgYmUgcGVyZm9ybWVkIGFzIHF1aWNrbHkgYXMgcG9zc2libGUsIHNvIHRoYXQgaGUgbWlnaHQgcHJvY2VlZCB0byB0aGUgYXJteSBhbmQgcHVuaXNoIE1pbnVjaXVzIGZvciBlbmdhZ2luZyB0aGUgZW5lbXkgY29udHJhcnkgdG8gaGlzIG9yZGVycy4gVGhlcmV1cG9uIGEgZ3JlYXQgY29tbW90aW9uIHNwcmVhZCBzd2lmdGx5IHRocm91Z2ggdGhlIHBlb3BsZTsgdGhleSByZWFsaXplZCB0aGUgcGVyaWwgdGhhdCB0aHJlYXRlbmVkIE1pbnVjaXVzLiBGb3IgdGhlIGRpY3RhdG9yIGhhcyB0aGUgcG93ZXIgdG8gaW1wcmlzb24gYW5kIHB1dCB0byBkZWF0aCB3aXRob3V0IHRyaWFsLCBhbmQgdGhleSB0aG91Z2h0IHRoYXQgdGhlIHdyYXRoIG9mIEZhYml1cywgcHJvdm9rZWQgaW4gYSBtYW4gb2YgaGlzIGdyZWF0IGdlbnRsZW5lc3MsIHdvdWxkIGJlIHNldmVyZSBhbmQgaW1wbGFjYWJsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmVmb3JlIHRoZXkgd2VyZSBhbGwgdGVycmlmaWVkIGFuZCBoZWxkIHRoZWlyIHBlYWNlLCBleGNlcHRpbmcgb25seSBNZXRpbGl1cy4gSGUgZW5qb3llZCBpbW11bml0eSBvZiBwZXJzb24gYXMgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIChmb3IgdGhpcyBpcyB0aGUgb25seSBtYWdpc3RyYWN5IHdoaWNoIGlzIG5vdCByb2JiZWQgb2YgaXRzIHBvd2VyIGJ5IHRoZSBlbGVjdGlvbiBvZiBhIGRpY3RhdG9yOyBpdCBhYmlkZXMgd2hlbiB0aGUgcmVzdCBhcmUgYWJvbGlzaGVkPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIFBvbHliaXVzLCBpaWkuIDg3Ljwvbm90ZT4pLCBhbmQgdmVoZW1lbnRseSBjaGFyZ2VkIGFuZCBwcmF5ZWQgdGhlIHBlb3BsZSBub3QgdG8gYWJhbmRvbiBNaW51Y2l1cywgbm9yIHBlcm1pdCBoaW0gdG8gc3VmZmVyIHRoZSBmYXRlIHdoaWNoIE1hbmxpdXMgVG9ycXVhdHVzIGluZmxpY3RlZCB1cG9uIGhpcyBzb24sIHdob20gaGUgYmVoZWFkZWQgYWx0aG91Z2ggY3Jvd25lZCB3aXRoIGxhdXJlbCBmb3IgdGhlIGdyZWF0ZXN0IHByb3dlc3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNvbiBoYWQgZGlzb2JleWVkIGNvbnN1bGFyIG9yZGVycyBhbmQgZW5nYWdlZCBpbiBzaW5nbGUgY29tYmF0IHdpdGggYSBMYXRpbiwgaW4gdGhlIGdyZWF0IGJhdHRsZSBhdCB0aGUgZm9vdCBvZiBWZXN1dml1cywgMzQwIEIuQy48L25vdGU+IGJ1dCB0byBzdHJpcCBGYWJpdXMgb2YgaGlzIHR5cmFudCdzIHBvd2VyIGFuZCBlbnRydXN0IHRoZSBzdGF0ZSB0byBvbmUgd2hvIHdhcyBhYmxlIGFuZCB3aWxsaW5nIHRvIHNhdmUgaXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIEZhYml1cyBjYW1lIGZvcndhcmQgdG8gc3BlYWssIGJ1dCB3YXN0ZWQgbm8gdGltZSBvbiBhIGRlZmVuY2Ugb2YgaGltc2VsZiBhZ2FpbnN0IHRoZSB0cmlidW5lLiBIZSBzaW1wbHkgc2FpZCB0aGF0IHRoZSBzYWNyaWZpY2VzIGFuZCBzYWNyZWQgcml0ZXMgbXVzdCBiZSBwZXJmb3JtZWQgYXMgcXVpY2tseSBhcyBwb3NzaWJsZSwgc28gdGhhdCBoZSBtaWdodCBwcm9jZWVkIHRvIHRoZSBhcm15IGFuZCBwdW5pc2ggTWludWNpdXMgZm9yIGVuZ2FnaW5nIHRoZSBlbmVteSBjb250cmFyeSB0byBoaXMgb3JkZXJzLiBUaGVyZXVwb24gYSBncmVhdCBjb21tb3Rpb24gc3ByZWFkIHN3aWZ0bHkgdGhyb3VnaCB0aGUgcGVvcGxlOyB0aGV5IHJlYWxpemVkIHRoZSBwZXJpbCB0aGF0IHRocmVhdGVuZWQgTWludWNpdXMuIEZvciB0aGUgZGljdGF0b3IgaGFzIHRoZSBwb3dlciB0byBpbXByaXNvbiBhbmQgcHV0IHRvIGRlYXRoIHdpdGhvdXQgdHJpYWwsIGFuZCB0aGV5IHRob3VnaHQgdGhhdCB0aGUgd3JhdGggb2YgRmFiaXVzLCBwcm92b2tlZCBpbiBhIG1hbiBvZiBoaXMgZ3JlYXQgZ2VudGxlbmVzcywgd291bGQgYmUgc2V2ZXJlIGFuZCBpbXBsYWNhYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZXJlZm9yZSB0aGV5IHdlcmUgYWxsIHRlcnJpZmllZCBhbmQgaGVsZCB0aGVpciBwZWFjZSwgZXhjZXB0aW5nIG9ubHkgTWV0aWxpdXMuIEhlIGVuam95ZWQgaW1tdW5pdHkgb2YgcGVyc29uIGFzIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSAoZm9yIHRoaXMgaXMgdGhlIG9ubHkgbWFnaXN0cmFjeSB3aGljaCBpcyBub3Qgcm9iYmVkIG9mIGl0cyBwb3dlciBieSB0aGUgZWxlY3Rpb24gb2YgYSBkaWN0YXRvcjsgaXQgYWJpZGVzIHdoZW4gdGhlIHJlc3QgYXJlIGFib2xpc2hlZDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIFBvbHliaXVzLCBpaWkuIDg3Ljwvbm90ZT4pLCBhbmQgdmVoZW1lbnRseSBjaGFyZ2VkIGFuZCBwcmF5ZWQgdGhlIHBlb3BsZSBub3QgdG8gYWJhbmRvbiBNaW51Y2l1cywgbm9yIHBlcm1pdCBoaW0gdG8gc3VmZmVyIHRoZSBmYXRlIHdoaWNoIE1hbmxpdXMgVG9ycXVhdHVzIGluZmxpY3RlZCB1cG9uIGhpcyBzb24sIHdob20gaGUgYmVoZWFkZWQgYWx0aG91Z2ggY3Jvd25lZCB3aXRoIGxhdXJlbCBmb3IgdGhlIGdyZWF0ZXN0IHByb3dlc3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc29uIGhhZCBkaXNvYmV5ZWQgY29uc3VsYXIgb3JkZXJzIGFuZCBlbmdhZ2VkIGluIHNpbmdsZSBjb21iYXQgd2l0aCBhIExhdGluLCBpbiB0aGUgZ3JlYXQgYmF0dGxlIGF0IHRoZSBmb290IG9mIFZlc3V2aXVzLCAzNDAgQi5DLjwvbm90ZT4gYnV0IHRvIHN0cmlwIEZhYml1cyBvZiBoaXMgdHlyYW50J3MgcG93ZXIgYW5kIGVudHJ1c3QgdGhlIHN0YXRlIHRvIG9uZSB3aG8gd2FzIGFibGUgYW5kIHdpbGxpbmcgdG8gc2F2ZSBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJhYmJsZSB3ZXJlIG1vdmVkIGJ5IHN1Y2ggdXR0ZXJhbmNlcy4gVGhleSBkaWQgbm90IGRhcmUgdG8gZm9yY2UgRmFiaXVzIHRvIHJlc2lnbiBoaXMgc292ZXJlaWdudHksIHVucG9wdWxhciBhcyBoZSB3YXMsIGJ1dCB0aGV5IHZvdGVkIHRoYXQgTWludWNpdXMgc2hvdWxkIGhhdmUgYW4gZXF1YWwgc2hhcmUgaW4gdGhlIGNvbW1hbmQsIGFuZCBzaG91bGQgY29uZHVjdCB0aGUgd2FyIHdpdGggdGhlIHNhbWUgcG93ZXJzIGFzIHRoZSBkaWN0YXRvcizigJRhIHRoaW5nIHdoaWNoIGhhZCBub3QgaGFwcGVuZWQgYmVmb3JlIGluIFJvbWUuIEEgbGl0dGxlIHdoaWxlIGFmdGVyd2FyZHMsIGl0IGlzIHRydWUsIGl0IGhhcHBlbmVkIGFnYWluLCBuYW1lbHksIGFmdGVyIHRoZSBkaXNhc3RlciBhdCBDYW5uYWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDE2IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGF0IHRpbWUgTWFyY3VzIEp1bml1cyB0aGUgZGljdGF0b3Igd2FzIGluIHRoZSBmaWVsZCwgYW5kIGF0IGhvbWUgaXQgYmVjYW1lIG5lY2Vzc2FyeSB0aGF0IHRoZSBzZW5hdGUgc2hvdWxkIGJlIGZpbGxlZCB1cCwgc2luY2UgbWFueSBzZW5hdG9ycyBoYWQgcGVyaXNoZWQgaW4gdGhlIGJhdHRsZS4gVGhleSB0aGVyZWZvcmUgZWxlY3RlZCBGYWJpdXMgQnV0ZW8gYSBzZWNvbmQgZGljdGF0b3IuIEJ1dCBoZSwgYWZ0ZXIgYWN0aW5nIGluIHRoYXQgY2FwYWNpdHkgYW5kIGNob29zaW5nIHRoZSBtZW4gdG8gZmlsbCB1cCB0aGUgc2VuYXRlLCBhdCBvbmNlIGRpc21pc3NlZCBoaXMgbGljdG9ycywgZWx1ZGVkIGhpcyBlc2NvcnQsIHBsdW5nZWQgaW50byB0aGUgY3Jvd2QsIGFuZCBzdHJhaWdodHdheSB3ZW50IHVwIGFuZCBkb3duIHRoZSBmb3J1bSBhcnJhbmdpbmcgc29tZSBidXNpbmVzcyBtYXR0ZXIgb2YgaGlzIG93biBhbmQgZW5nYWdpbmcgaW4gYWZmYWlycyBsaWtlIGEgcHJpdmF0ZSBjaXRpemVuLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByYWJibGUgd2VyZSBtb3ZlZCBieSBzdWNoIHV0dGVyYW5jZXMuIFRoZXkgZGlkIG5vdCBkYXJlIHRvIGZvcmNlIEZhYml1cyB0byByZXNpZ24gaGlzIHNvdmVyZWlnbnR5LCB1bnBvcHVsYXIgYXMgaGUgd2FzLCBidXQgdGhleSB2b3RlZCB0aGF0IE1pbnVjaXVzIHNob3VsZCBoYXZlIGFuIGVxdWFsIHNoYXJlIGluIHRoZSBjb21tYW5kLCBhbmQgc2hvdWxkIGNvbmR1Y3QgdGhlIHdhciB3aXRoIHRoZSBzYW1lIHBvd2VycyBhcyB0aGUgZGljdGF0b3Is4oCUYSB0aGluZyB3aGljaCBoYWQgbm90IGhhcHBlbmVkIGJlZm9yZSBpbiBSb21lLiBBIGxpdHRsZSB3aGlsZSBhZnRlcndhcmRzLCBpdCBpcyB0cnVlLCBpdCBoYXBwZW5lZCBhZ2FpbiwgbmFtZWx5LCBhZnRlciB0aGUgZGlzYXN0ZXIgYXQgQ2FubmFlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMTYiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHZpLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmFiLiAxNiIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSBNYXJjdXMgSnVuaXVzIHRoZSBkaWN0YXRvciB3YXMgaW4gdGhlIGZpZWxkLCBhbmQgYXQgaG9tZSBpdCBiZWNhbWUgbmVjZXNzYXJ5IHRoYXQgdGhlIHNlbmF0ZSBzaG91bGQgYmUgZmlsbGVkIHVwLCBzaW5jZSBtYW55IHNlbmF0b3JzIGhhZCBwZXJpc2hlZCBpbiB0aGUgYmF0dGxlLiBUaGV5IHRoZXJlZm9yZSBlbGVjdGVkIEZhYml1cyBCdXRlbyBhIHNlY29uZCBkaWN0YXRvci4gQnV0IGhlLCBhZnRlciBhY3RpbmcgaW4gdGhhdCBjYXBhY2l0eSBhbmQgY2hvb3NpbmcgdGhlIG1lbiB0byBmaWxsIHVwIHRoZSBzZW5hdGUsIGF0IG9uY2UgZGlzbWlzc2VkIGhpcyBsaWN0b3JzLCBlbHVkZWQgaGlzIGVzY29ydCwgcGx1bmdlZCBpbnRvIHRoZSBjcm93ZCwgYW5kIHN0cmFpZ2h0d2F5IHdlbnQgdXAgYW5kIGRvd24gdGhlIGZvcnVtIGFycmFuZ2luZyBzb21lIGJ1c2luZXNzIG1hdHRlciBvZiBoaXMgb3duIGFuZCBlbmdhZ2luZyBpbiBhZmZhaXJzIGxpa2UgYSBwcml2YXRlIGNpdGl6ZW4uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGF0IHRoZXkgaGFkIGludmVzdGVkIE1pbnVjaXVzIHdpdGggdGhlIHNhbWUgcG93ZXJzIGFzIHRoZSBkaWN0YXRvciwgdGhlIHBlb3BsZSBzdXBwb3NlZCB0aGF0IHRoZSBsYXR0ZXIgd291bGQgZmVlbCBzaG9ybiBvZiBzdHJlbmd0aCBhbmQgYWx0b2dldGhlciBodW1ibGUsIGJ1dCB0aGV5IGRpZCBub3QgZXN0aW1hdGUgdGhlIG1hbiBhcmlnaHQuIEZvciBoZSBkaWQgbm90IHJlZ2FyZCB0aGVpciBtaXN0YWtlIGFzIGhpcyBvd24gY2FsYW1pdHksIGJ1dCB3YXMgbGlrZSBEaW9nZW5lcyB0aGUgd2lzZSBtYW4sIHdobywgd2hlbiBzb21lIG9uZSBzYWlkIHRvIGhpbSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGVzZSBmb2xrIGFyZSByaWRpY3VsaW5nIHlvdSw8L3E+IHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEkgYW0gbm90IHJpZGljdWxlZC48L3E+IEhlIGhlbGQgdGhhdCBvbmx5IHRob3NlIGFyZSByaWRpY3VsZWQgd2hvIGFyZSBjb25mb3VuZGVkIGJ5IHN1Y2ggdHJlYXRtZW50IGFuZCB5aWVsZCB0aGVpciBncm91bmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIEZhYml1cyBlbmR1cmVkIHRoZSBzaXR1YXRpb24gY2FsbWx5IGFuZCBlYXNpbHksIHNvIGZhciBhcyBpdCBhZmZlY3RlZCBoaW1zZWxmLCB0aGVyZWJ5IGNvbmZpcm1pbmcgdGhlIGF4aW9tIG9mIHBoaWxvc29waHkgdGhhdCBhIHNpbmNlcmVseSBnb29kIG1hbiBjYW4gbmVpdGhlciBiZSBpbnN1bHRlZCBub3IgZGlzaG9ub3VyZWQuIEJ1dCBiZWNhdXNlIGl0IGFmZmVjdGVkIHRoZSBzdGF0ZSwgaGUgd2FzIGRpc3RyZXNzZWQgYnkgdGhlIGZvbGx5IG9mIHRoZSBtdWx0aXR1ZGUuIFRoZXkgaGFkIGdpdmVuIG9wcG9ydHVuaXRpZXMgdG8gYSBtYW4gd2l0aCBhIGRpc2Vhc2VkIG1pbGl0YXJ5IGFtYml0aW9uLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgZmVhcmZ1bCBsZXN0IHRoaXMgbWFuLCB1dHRlcmx5IGNyYXplZCBieSBoaXMgZW1wdHkgZ2xvcnkgYW5kIHByZXN0aWdlLCBzaG91bGQgYnJpbmcgYWJvdXQgc29tZSBncmVhdCBkaXNhc3RlciBiZWZvcmUgaGUgY291bGQgYmUgY2hlY2tlZCwgaGUgc2V0IG91dCBpbiBhbGwgc2VjcmVjeSBmcm9tIHRoZSBjaXR5LiBXaGVuIGhlIHJlYWNoZWQgdGhlIGNhbXAsIGhlIGZvdW5kIHRoYXQgTWludWNpdXMgd2FzIG5vIGxvbmdlciB0byBiZSBlbmR1cmVkLiBIZSB3YXMgaGFyc2ggaW4gaGlzIG1hbm5lciwgcHVmZmVkIHVwIHdpdGggY29uY2VpdCwgYW5kIGRlbWFuZGVkIHRoZSBzb2xlIGNvbW1hbmQgaW4gaGlzIGR1ZSB0dXJuLiBUaGlzIEZhYml1cyB3b3VsZCBub3QgZ3JhbnQsIGZlZWxpbmcgdGhhdCB0aGUgc29sZSBjb21tYW5kIG9mIGEgcGFydCBvZiB0aGUgYXJteSB3YXMgYmV0dGVyIHRoYW4gdGhlIGNvbW1hbmQgb2YgdGhlIHdob2xlIGluIGhpcyB0dXJuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmlyc3QgYW5kIGZvdXJ0aCBsZWdpb25zIGhlIHRoZXJlZm9yZSB0b29rIGhpbXNlbGYgYW5kIGdhdmUgdGhlIHNlY29uZCBhbmQgdGhpcmQgdG8gTWludWNpdXMsIHRoZSBhbGxpZWQgZm9yY2VzIGFsc28gYmVpbmcgZXF1YWxseSBkaXZpZGVkIGJldHdlZW4gdGhlbS4gV2hlbiBNaW51Y2l1cyBwdXQgb24gbG9mdHkgYWlycyBhbmQgZXh1bHRlZCBiZWNhdXNlIHRoZSBtYWplc3R5IG9mIHRoZSBoaWdoZXN0IGFuZCBncmVhdGVzdCBvZmZpY2UgaW4gdGhlIHN0YXRlIGhhZCBiZWVuIGxvd2VyZWQgYW5kIGluc3VsdGVkIG9uIGhpcyBhY2NvdW50LCBGYWJpdXMgcmVtaW5kZWQgaGltIHRoYXQgaGlzIGNvbnRlbnRpb24gd2FzIG5vdCB3aXRoIEZhYml1cywgYnV0IHJhdGhlciwgd2VyZSBoZSB3aXNlLCB3aXRoIEhhbm5pYmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5JZiwgaG93ZXZlciwgaGUgd2FzIGJlbnQgb24gcml2YWxyeSB3aXRoIGhpcyBjb2xsZWFndWUgaW4gb2ZmaWNlLCBoZSBtdXN0IHNlZSB0byBpdCB0aGF0IHRoZSBtYW4gd2hvIGhhZCBiZWVuIHRyaXVtcGhhbnRseSBob25vdXJlZCBieSBoaXMgZmVsbG93LWNpdGl6ZW5zIHNob3VsZCBub3QgYmUgcHJvdmVkIG1vcmUgY2FyZWxlc3Mgb2YgdGhlaXIgc2FsdmF0aW9uIGFuZCBzYWZldHkgdGhhbiB0aGUgbWFuIHdobyBoYWQgYmVlbiBpbmdsb3Jpb3VzbHkgb3V0cmFnZWQgYnkgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgdGhleSBoYWQgaW52ZXN0ZWQgTWludWNpdXMgd2l0aCB0aGUgc2FtZSBwb3dlcnMgYXMgdGhlIGRpY3RhdG9yLCB0aGUgcGVvcGxlIHN1cHBvc2VkIHRoYXQgdGhlIGxhdHRlciB3b3VsZCBmZWVsIHNob3JuIG9mIHN0cmVuZ3RoIGFuZCBhbHRvZ2V0aGVyIGh1bWJsZSwgYnV0IHRoZXkgZGlkIG5vdCBlc3RpbWF0ZSB0aGUgbWFuIGFyaWdodC4gRm9yIGhlIGRpZCBub3QgcmVnYXJkIHRoZWlyIG1pc3Rha2UgYXMgaGlzIG93biBjYWxhbWl0eSwgYnV0IHdhcyBsaWtlIERpb2dlbmVzIHRoZSB3aXNlIG1hbiwgd2hvLCB3aGVuIHNvbWUgb25lIHNhaWQgdG8gaGltLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlc2UgZm9sayBhcmUgcmlkaWN1bGluZyB5b3UsPC9xPiBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IEkgYW0gbm90IHJpZGljdWxlZC48L3E+IEhlIGhlbGQgdGhhdCBvbmx5IHRob3NlIGFyZSByaWRpY3VsZWQgd2hvIGFyZSBjb25mb3VuZGVkIGJ5IHN1Y2ggdHJlYXRtZW50IGFuZCB5aWVsZCB0aGVpciBncm91bmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIEZhYml1cyBlbmR1cmVkIHRoZSBzaXR1YXRpb24gY2FsbWx5IGFuZCBlYXNpbHksIHNvIGZhciBhcyBpdCBhZmZlY3RlZCBoaW1zZWxmLCB0aGVyZWJ5IGNvbmZpcm1pbmcgdGhlIGF4aW9tIG9mIHBoaWxvc29waHkgdGhhdCBhIHNpbmNlcmVseSBnb29kIG1hbiBjYW4gbmVpdGhlciBiZSBpbnN1bHRlZCBub3IgZGlzaG9ub3VyZWQuIEJ1dCBiZWNhdXNlIGl0IGFmZmVjdGVkIHRoZSBzdGF0ZSwgaGUgd2FzIGRpc3RyZXNzZWQgYnkgdGhlIGZvbGx5IG9mIHRoZSBtdWx0aXR1ZGUuIFRoZXkgaGFkIGdpdmVuIG9wcG9ydHVuaXRpZXMgdG8gYSBtYW4gd2l0aCBhIGRpc2Vhc2VkIG1pbGl0YXJ5IGFtYml0aW9uLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBmZWFyZnVsIGxlc3QgdGhpcyBtYW4sIHV0dGVybHkgY3JhemVkIGJ5IGhpcyBlbXB0eSBnbG9yeSBhbmQgcHJlc3RpZ2UsIHNob3VsZCBicmluZyBhYm91dCBzb21lIGdyZWF0IGRpc2FzdGVyIGJlZm9yZSBoZSBjb3VsZCBiZSBjaGVja2VkLCBoZSBzZXQgb3V0IGluIGFsbCBzZWNyZWN5IGZyb20gdGhlIGNpdHkuIFdoZW4gaGUgcmVhY2hlZCB0aGUgY2FtcCwgaGUgZm91bmQgdGhhdCBNaW51Y2l1cyB3YXMgbm8gbG9uZ2VyIHRvIGJlIGVuZHVyZWQuIEhlIHdhcyBoYXJzaCBpbiBoaXMgbWFubmVyLCBwdWZmZWQgdXAgd2l0aCBjb25jZWl0LCBhbmQgZGVtYW5kZWQgdGhlIHNvbGUgY29tbWFuZCBpbiBoaXMgZHVlIHR1cm4uIFRoaXMgRmFiaXVzIHdvdWxkIG5vdCBncmFudCwgZmVlbGluZyB0aGF0IHRoZSBzb2xlIGNvbW1hbmQgb2YgYSBwYXJ0IG9mIHRoZSBhcm15IHdhcyBiZXR0ZXIgdGhhbiB0aGUgY29tbWFuZCBvZiB0aGUgd2hvbGUgaW4gaGlzIHR1cm4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBhbmQgZm91cnRoIGxlZ2lvbnMgaGUgdGhlcmVmb3JlIHRvb2sgaGltc2VsZiBhbmQgZ2F2ZSB0aGUgc2Vjb25kIGFuZCB0aGlyZCB0byBNaW51Y2l1cywgdGhlIGFsbGllZCBmb3JjZXMgYWxzbyBiZWluZyBlcXVhbGx5IGRpdmlkZWQgYmV0d2VlbiB0aGVtLiBXaGVuIE1pbnVjaXVzIHB1dCBvbiBsb2Z0eSBhaXJzIGFuZCBleHVsdGVkIGJlY2F1c2UgdGhlIG1hamVzdHkgb2YgdGhlIGhpZ2hlc3QgYW5kIGdyZWF0ZXN0IG9mZmljZSBpbiB0aGUgc3RhdGUgaGFkIGJlZW4gbG93ZXJlZCBhbmQgaW5zdWx0ZWQgb24gaGlzIGFjY291bnQsIEZhYml1cyByZW1pbmRlZCBoaW0gdGhhdCBoaXMgY29udGVudGlvbiB3YXMgbm90IHdpdGggRmFiaXVzLCBidXQgcmF0aGVyLCB3ZXJlIGhlIHdpc2UsIHdpdGggSGFubmliYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPklmLCBob3dldmVyLCBoZSB3YXMgYmVudCBvbiByaXZhbHJ5IHdpdGggaGlzIGNvbGxlYWd1ZSBpbiBvZmZpY2UsIGhlIG11c3Qgc2VlIHRvIGl0IHRoYXQgdGhlIG1hbiB3aG8gaGFkIGJlZW4gdHJpdW1waGFudGx5IGhvbm91cmVkIGJ5IGhpcyBmZWxsb3ctY2l0aXplbnMgc2hvdWxkIG5vdCBiZSBwcm92ZWQgbW9yZSBjYXJlbGVzcyBvZiB0aGVpciBzYWx2YXRpb24gYW5kIHNhZmV0eSB0aGFuIHRoZSBtYW4gd2hvIGhhZCBiZWVuIGluZ2xvcmlvdXNseSBvdXRyYWdlZCBieSB0aGVtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTWludWNpdXMgcmVnYXJkZWQgYWxsIHRoaXMgYXMgYW4gb2xkIG1hbidzIGRpc3NpbXVsYXRpb24sIGFuZCB0YWtpbmcgdGhlIGZvcmNlcyBhbGxvdHRlZCB0byBoaW0sIHdlbnQgaW50byBjYW1wIGFwYXJ0IGJ5IGhpbXNlbGYsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBtaWxlIGFuZCBhIGhhbGYgZnJvbSBGYWJpdXMsIGFjY29yZGluZyB0byA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGxiLiAzLjEwMyIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpaS4gMTAzLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGlsZSBIYW5uaWJhbCwgbm90IHVuYXdhcmUgb2Ygd2hhdCB3YXMgZ29pbmcgb24sIGtlcHQgYSB3YXRjaGZ1bCBleWUgb24gZXZlcnl0aGluZy4gTm93IHRoZXJlIHdhcyBhIGhpbGwgYmV0d2VlbiBoaW0gYW5kIHRoZSBSb21hbnMgd2hpY2ggY291bGQgYmUgb2NjdXBpZWQgd2l0aCBubyBkaWZmaWN1bHR5LCBhbmQgd2hpY2gsIGlmIG9jY3VwaWVkLCB3b3VsZCBiZSBhIHN0cm9uZyBzaXRlIGZvciBhIGNhbXAgYW5kIGluIGV2ZXJ5IHdheSBzdWZmaWNpZW50LiBUaGUgcGxhaW4gcm91bmQgYWJvdXQsIHdoZW4gdmlld2VkIGZyb20gYSBkaXN0YW5jZSwgd2FzIHBlcmZlY3RseSBzbW9vdGggYW5kIGxldmVsLCBidXQgcmVhbGx5IGhhZCBzdW5kcnkgc21hbGwgZGl0Y2hlcyBhbmQgb3RoZXIgaG9sbG93IHBsYWNlcyBpbiBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCB0aG91Z2ggaXQgd291bGQgaGF2ZSBiZWVuIHZlcnkgZWFzeSBmb3IgaGltIHRvIGdldCBwb3NzZXNzaW9uIG9mIHRoZSBoaWxsIGJ5IHN0ZWFsdGgsIEhhbm5pYmFsIGhhZCBub3QgY2FyZWQgdG8gZG8gc28sIGJ1dCBoYWQgbGVmdCBpdCBzdGFuZGluZyBiZXR3ZWVuIHRoZSB0d28gYXJtaWVzIGluIHRoZSBob3BlIHRoYXQgaXQgbWlnaHQgYnJpbmcgb24gYSBiYXR0bGUuIEJ1dCB3aGVuIGhlIHNhdyBNaW51Y2l1cyBzZXBhcmF0ZWQgZnJvbSBGYWJpdXMsIGluIHRoZSBuaWdodCBoZSBzY2F0dGVyZWQgYm9kaWVzIG9mIGhpcyBzb2xkaWVycyBhbW9uZyB0aGUgZGl0Y2hlcyBhbmQgaG9sbG93cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GaXZlIHRob3VzYW5kIGhvcnNlbWVuIGFuZCBmb290bWVuLCBhY2NvcmRpbmcgdG8gPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjIuMjgiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDI4PC9iaWJsPjsgZml2ZSB0aG91c2FuZCBsaWdodC1hcm1lZCBhbmQgb3RoZXIgaW5mYW50cnksIGFuZCBmaXZlIGh1bmRyZWQgY2F2YWxyeSwgYWNjb3JkaW5nIHRvIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDMuMTA0IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgaWlpLiAxMDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBhdCBicmVhayBvZiBkYXksIHdpdGggbm8gYXR0ZW1wdCBhdCBjb25jZWFsbWVudCwgc2VudCBhIGZldyB0byBvY2N1cHkgdGhlIGhpbGwsIHRoYXQgaGUgbWlnaHQgc2VkdWNlIE1pbnVjaXVzIGludG8gYW4gZW5nYWdlbWVudCBmb3IgaXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1pbnVjaXVzIHJlZ2FyZGVkIGFsbCB0aGlzIGFzIGFuIG9sZCBtYW4ncyBkaXNzaW11bGF0aW9uLCBhbmQgdGFraW5nIHRoZSBmb3JjZXMgYWxsb3R0ZWQgdG8gaGltLCB3ZW50IGludG8gY2FtcCBhcGFydCBieSBoaW1zZWxmLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QSBtaWxlIGFuZCBhIGhhbGYgZnJvbSBGYWJpdXMsIGFjY29yZGluZyB0byA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDMuMTAzIiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgaWlpLiAxMDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdoaWxlIEhhbm5pYmFsLCBub3QgdW5hd2FyZSBvZiB3aGF0IHdhcyBnb2luZyBvbiwga2VwdCBhIHdhdGNoZnVsIGV5ZSBvbiBldmVyeXRoaW5nLiBOb3cgdGhlcmUgd2FzIGEgaGlsbCBiZXR3ZWVuIGhpbSBhbmQgdGhlIFJvbWFucyB3aGljaCBjb3VsZCBiZSBvY2N1cGllZCB3aXRoIG5vIGRpZmZpY3VsdHksIGFuZCB3aGljaCwgaWYgb2NjdXBpZWQsIHdvdWxkIGJlIGEgc3Ryb25nIHNpdGUgZm9yIGEgY2FtcCBhbmQgaW4gZXZlcnkgd2F5IHN1ZmZpY2llbnQuIFRoZSBwbGFpbiByb3VuZCBhYm91dCwgd2hlbiB2aWV3ZWQgZnJvbSBhIGRpc3RhbmNlLCB3YXMgcGVyZmVjdGx5IHNtb290aCBhbmQgbGV2ZWwsIGJ1dCByZWFsbHkgaGFkIHN1bmRyeSBzbWFsbCBkaXRjaGVzIGFuZCBvdGhlciBob2xsb3cgcGxhY2VzIGluIGl0LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsYi4gMy4xMDMiIHZhbGlkPSJ5ZXMiPlBvbHliaXVzLCBpaWkuIDEwMy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgdGhvdWdoIGl0IHdvdWxkIGhhdmUgYmVlbiB2ZXJ5IGVhc3kgZm9yIGhpbSB0byBnZXQgcG9zc2Vzc2lvbiBvZiB0aGUgaGlsbCBieSBzdGVhbHRoLCBIYW5uaWJhbCBoYWQgbm90IGNhcmVkIHRvIGRvIHNvLCBidXQgaGFkIGxlZnQgaXQgc3RhbmRpbmcgYmV0d2VlbiB0aGUgdHdvIGFybWllcyBpbiB0aGUgaG9wZSB0aGF0IGl0IG1pZ2h0IGJyaW5nIG9uIGEgYmF0dGxlLiBCdXQgd2hlbiBoZSBzYXcgTWludWNpdXMgc2VwYXJhdGVkIGZyb20gRmFiaXVzLCBpbiB0aGUgbmlnaHQgaGUgc2NhdHRlcmVkIGJvZGllcyBvZiBoaXMgc29sZGllcnMgYW1vbmcgdGhlIGRpdGNoZXMgYW5kIGhvbGxvd3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GaXZlIHRob3VzYW5kIGhvcnNlbWVuIGFuZCBmb290bWVuLCBhY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyMi4yOCIgdmFsaWQ9InllcyI+TGl2eSwgeHhpaS4gMjg8L2JpYmw+OyBmaXZlIHRob3VzYW5kIGxpZ2h0LWFybWVkIGFuZCBvdGhlciBpbmZhbnRyeSwgYW5kIGZpdmUgaHVuZHJlZCBjYXZhbHJ5LCBhY2NvcmRpbmcgdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGxiLiAzLjEwNCIgdmFsaWQ9InllcyI+UG9seWJpdXMsIGlpaS4gMTA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBhbmQgYXQgYnJlYWsgb2YgZGF5LCB3aXRoIG5vIGF0dGVtcHQgYXQgY29uY2VhbG1lbnQsIHNlbnQgYSBmZXcgdG8gb2NjdXB5IHRoZSBoaWxsLCB0aGF0IGhlIG1pZ2h0IHNlZHVjZSBNaW51Y2l1cyBpbnRvIGFuIGVuZ2FnZW1lbnQgZm9yIGl0LgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjI4IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGlpLiAyODwvYmlibD47IGZpdmUgdGhvdXNhbmQgbGlnaHQtYXJtZWQgYW5kIG90aGVyIGluZmFudHJ5LCBhbmQgZml2ZSBodW5kcmVkIGNhdmFscnksIGFjY29yZGluZyB0byA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbGIuIDMuMTA0IiB2YWxpZD0ieWVzIj5Qb2x5Yml1cywgaWlpLiAxMDQuPC9iaWJsPgogICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyBhY3R1YWxseSBjYW1lIHRvIHBhc3MuIEZpcnN0IE1pbnVjaXVzIHNlbnQgb3V0IGhpcyBsaWdodC1hcm1lZCB0cm9vcHMsIHRoZW4gaGlzIGhvcnNlbWVuLCBhbmQgZmluYWxseSwgd2hlbiBoZSBzYXcgSGFubmliYWwgY29taW5nIHRvIHRoZSBzdXBwb3J0IG9mIGhpcyB0cm9vcHMgb24gdGhlIGhpbGwsIGhlIGRlc2NlbmRlZCBpbnRvIHRoZSBwbGFpbiB3aXRoIGFsbCBoaXMgZm9yY2VzIGluIGJhdHRsZSBhcnJheS4gSW4gYSBmaWVyY2UgYmF0dGxlIGhlIHN1c3RhaW5lZCB0aGUgZGlzY2hhcmdlIG9mIG1pc3NpbGVzIGZyb20gdGhlIGhpbGwsIGNvbWluZyB0byBjbG9zZSBxdWFydGVycyB3aXRoIHRoZSBlbmVteSB0aGVyZSBhbmQgaG9sZGluZyBoaXMgYWR2YW50YWdlLCB1bnRpbCBIYW5uaWJhbCwgc2VlaW5nIHRoYXQgaGlzIGVuZW15IHdhcyBoYXBwaWx5IGRlY2VpdmVkIGFuZCB3YXMgZXhwb3NpbmcgdGhlIHJlYXIgb2YgaGlzIGxpbmUgb2YgYmF0dGxlIHRvIHRoZSB0cm9vcHMgd2hvIGhhZCBiZWVuIHBsYWNlZCBpbiBhbWJ1c2gsIHJhaXNlZCB0aGUgc2lnbmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIGhpcyBtZW4gcm9zZSB1cCBvbiBhbGwgc2lkZXMsIGF0dGFja2VkIHdpdGggbG91ZCBjcmllcywgYW5kIHNsZXcgdGhlaXIgZm9lcyB3aG8gd2VyZSBpbiB0aGUgcmVhciByYW5rcy4gVGhlbiBpbmRlc2NyaWJhYmxlIGNvbmZ1c2lvbiBhbmQgZnJpZ2h0IHRvb2sgcG9zc2Vzc2lvbiBvZiB0aGUgUm9tYW5zLiBNaW51Y2l1cyBoaW1zZWxmIGZlbHQgYWxsIGhpcyBjb3VyYWdlIHNoYXR0ZXJlZCwgYW5kIGxvb2tlZCBhbnhpb3VzbHkgbm93IHRvIG9uZSBhbmQgbm93IHRvIGFub3RoZXIgb2YgaGlzIGNvbW1hbmRlcnMsIG5vIG9uZSBvZiB3aG9tIGRhcmVkIHRvIGhvbGQgaGlzIGdyb3VuZCwgbmF5LCBhbGwgdXJnZWQgdGhlaXIgbWVuIHRvIGZsaWdodCwgYW5kIGEgZmF0YWwgZmxpZ2h0IHRvby4gRm9yIHRoZSBOdW1pZGlhbnMsIG5vdyBtYXN0ZXJzIG9mIHRoZSBzaXR1YXRpb24sIGdhbGxvcGVkIHJvdW5kIHRoZSBwbGFpbiBhbmQgc2xldyB0aGVtIGFzIHRoZXkgc2NhdHRlcmVkIHRoZW1zZWx2ZXMgYWJvdXQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIGFjdHVhbGx5IGNhbWUgdG8gcGFzcy4gRmlyc3QgTWludWNpdXMgc2VudCBvdXQgaGlzIGxpZ2h0LWFybWVkIHRyb29wcywgdGhlbiBoaXMgaG9yc2VtZW4sIGFuZCBmaW5hbGx5LCB3aGVuIGhlIHNhdyBIYW5uaWJhbCBjb21pbmcgdG8gdGhlIHN1cHBvcnQgb2YgaGlzIHRyb29wcyBvbiB0aGUgaGlsbCwgaGUgZGVzY2VuZGVkIGludG8gdGhlIHBsYWluIHdpdGggYWxsIGhpcyBmb3JjZXMgaW4gYmF0dGxlIGFycmF5LiBJbiBhIGZpZXJjZSBiYXR0bGUgaGUgc3VzdGFpbmVkIHRoZSBkaXNjaGFyZ2Ugb2YgbWlzc2lsZXMgZnJvbSB0aGUgaGlsbCwgY29taW5nIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggdGhlIGVuZW15IHRoZXJlIGFuZCBob2xkaW5nIGhpcyBhZHZhbnRhZ2UsIHVudGlsIEhhbm5pYmFsLCBzZWVpbmcgdGhhdCBoaXMgZW5lbXkgd2FzIGhhcHBpbHkgZGVjZWl2ZWQgYW5kIHdhcyBleHBvc2luZyB0aGUgcmVhciBvZiBoaXMgbGluZSBvZiBiYXR0bGUgdG8gdGhlIHRyb29wcyB3aG8gaGFkIGJlZW4gcGxhY2VkIGluIGFtYnVzaCwgcmFpc2VkIHRoZSBzaWduYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgaGlzIG1lbiByb3NlIHVwIG9uIGFsbCBzaWRlcywgYXR0YWNrZWQgd2l0aCBsb3VkIGNyaWVzLCBhbmQgc2xldyB0aGVpciBmb2VzIHdobyB3ZXJlIGluIHRoZSByZWFyIHJhbmtzLiBUaGVuIGluZGVzY3JpYmFibGUgY29uZnVzaW9uIGFuZCBmcmlnaHQgdG9vayBwb3NzZXNzaW9uIG9mIHRoZSBSb21hbnMuIE1pbnVjaXVzIGhpbXNlbGYgZmVsdCBhbGwgaGlzIGNvdXJhZ2Ugc2hhdHRlcmVkLCBhbmQgbG9va2VkIGFueGlvdXNseSBub3cgdG8gb25lIGFuZCBub3cgdG8gYW5vdGhlciBvZiBoaXMgY29tbWFuZGVycywgbm8gb25lIG9mIHdob20gZGFyZWQgdG8gaG9sZCBoaXMgZ3JvdW5kLCBuYXksIGFsbCB1cmdlZCB0aGVpciBtZW4gdG8gZmxpZ2h0LCBhbmQgYSBmYXRhbCBmbGlnaHQgdG9vLiBGb3IgdGhlIE51bWlkaWFucywgbm93IG1hc3RlcnMgb2YgdGhlIHNpdHVhdGlvbiwgZ2FsbG9wZWQgcm91bmQgdGhlIHBsYWluIGFuZCBzbGV3IHRoZW0gYXMgdGhleSBzY2F0dGVyZWQgdGhlbXNlbHZlcyBhYm91dC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgdGhlIFJvbWFucyB3ZXJlIGluIHN1Y2ggYW4gZXZpbCBwYXNzLCBGYWJpdXMgd2FzIG5vdCB1bmF3YXJlIG9mIHRoZWlyIHBlcmlsLiBIZSBoYWQgYW50aWNpcGF0ZWQgdGhlIHJlc3VsdCwgYXMgaXQgd291bGQgc2VlbSwgYW5kIGhhZCBoaXMgZm9yY2VzIGRyYXduIHVwIHVuZGVyIGFybXMsIHdpc2VseSBsZWFybmluZyB0aGUgcHJvZ3Jlc3Mgb2YgZXZlbnRzIG5vdCBmcm9tIG1lc3NlbmdlcnMsIGJ1dCBieSBoaXMgb3duIG9ic2VydmF0aW9ucyBpbiBmcm9udCBvZiBoaXMgY2FtcC4gQWNjb3JkaW5nbHksIHdoZW4gaGUgc2F3IHRoZSBhcm15IG9mIE1pbnVjaXVzIHN1cnJvdW5kZWQgYW5kIGNvbmZvdW5kZWQsIGFuZCB3aGVuIHRoZWlyIGNyaWVzLCBhcyB0aGV5IGZlbGwgdXBvbiBoaXMgZWFycywgc2hvd2VkIGhpbSB0aGF0IHRoZXkgbm8gbG9uZ2VyIHN0b29kIHRoZWlyIGdyb3VuZCwgYnV0IHdlcmUgYWxyZWFkeSBwYW5pYy1zdHJpY2tlbiBhbmQgcm91dGVkLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5oZSBzbW90ZSBoaXMgdGhpZ2gsIGFuZCB3aXRoIGEgZGVlcCBncm9hbiBzYWlkIHRvIHRoZSBieXN0YW5kZXJzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlcmN1bGVzISBob3cgbXVjaCBzb29uZXIgdGhhbiBJIGV4cGVjdGVkLCBidXQgbGF0ZXIgdGhhbiBoaXMgb3duIHJhc2ggZWFnZXJuZXNzIGRlbWFuZGVkLCBoYXMgTWludWNpdXMgZGVzdHJveWVkIGhpbXNlbGYhPC9xPiBUaGVuIG9yZGVyaW5nIHRoZSBzdGFuZGFyZHMgdG8gYmUgc3dpZnRseSBhZHZhbmNlZCBhbmQgdGhlIGFybXkgdG8gZm9sbG93LCBoZSBjYWxsZWQgb3V0IHdpdGggYSBsb3VkIHZvaWNlOgoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93LCBteSBzb2xkaWVycywgbGV0IGV2ZXJ5IG1hbiBiZSBtaW5kZnVsIG9mIE1hcmN1cyBNaW51Y2l1cyBhbmQgcHJlc3Mgb24gdG8gaGlzIGFpZDsgZm9yIGhlIGlzIGEgYnJpbGxpYW50IG1hbiwgYW5kIGEgbG92ZXIgb2YgaGlzIGNvdW50cnkuIEFuZCBpZiBoaXMgYXJkZW50IGRlc2lyZSB0byBkcml2ZSBhd2F5IHRoZSBlbmVteSBoYXMgbGVkIGhpbSBpbnRvIGFueSBlcnJvciwgd2Ugd2lsbCBjaGFyZ2UgaGltIHdpdGggaXQgbGF0ZXIuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93IHRoYXQgdGhlIFJvbWFucyB3ZXJlIGluIHN1Y2ggYW4gZXZpbCBwYXNzLCBGYWJpdXMgd2FzIG5vdCB1bmF3YXJlIG9mIHRoZWlyIHBlcmlsLiBIZSBoYWQgYW50aWNpcGF0ZWQgdGhlIHJlc3VsdCwgYXMgaXQgd291bGQgc2VlbSwgYW5kIGhhZCBoaXMgZm9yY2VzIGRyYXduIHVwIHVuZGVyIGFybXMsIHdpc2VseSBsZWFybmluZyB0aGUgcHJvZ3Jlc3Mgb2YgZXZlbnRzIG5vdCBmcm9tIG1lc3NlbmdlcnMsIGJ1dCBieSBoaXMgb3duIG9ic2VydmF0aW9ucyBpbiBmcm9udCBvZiBoaXMgY2FtcC4gQWNjb3JkaW5nbHksIHdoZW4gaGUgc2F3IHRoZSBhcm15IG9mIE1pbnVjaXVzIHN1cnJvdW5kZWQgYW5kIGNvbmZvdW5kZWQsIGFuZCB3aGVuIHRoZWlyIGNyaWVzLCBhcyB0aGV5IGZlbGwgdXBvbiBoaXMgZWFycywgc2hvd2VkIGhpbSB0aGF0IHRoZXkgbm8gbG9uZ2VyIHN0b29kIHRoZWlyIGdyb3VuZCwgYnV0IHdlcmUgYWxyZWFkeSBwYW5pYy1zdHJpY2tlbiBhbmQgcm91dGVkLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIHNtb3RlIGhpcyB0aGlnaCwgYW5kIHdpdGggYSBkZWVwIGdyb2FuIHNhaWQgdG8gdGhlIGJ5c3RhbmRlcnM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZXJjdWxlcyEgaG93IG11Y2ggc29vbmVyIHRoYW4gSSBleHBlY3RlZCwgYnV0IGxhdGVyIHRoYW4gaGlzIG93biByYXNoIGVhZ2VybmVzcyBkZW1hbmRlZCwgaGFzIE1pbnVjaXVzIGRlc3Ryb3llZCBoaW1zZWxmITwvcT4gVGhlbiBvcmRlcmluZyB0aGUgc3RhbmRhcmRzIHRvIGJlIHN3aWZ0bHkgYWR2YW5jZWQgYW5kIHRoZSBhcm15IHRvIGZvbGxvdywgaGUgY2FsbGVkIG91dCB3aXRoIGEgbG91ZCB2b2ljZToKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm93LCBteSBzb2xkaWVycywgbGV0IGV2ZXJ5IG1hbiBiZSBtaW5kZnVsIG9mIE1hcmN1cyBNaW51Y2l1cyBhbmQgcHJlc3Mgb24gdG8gaGlzIGFpZDsgZm9yIGhlIGlzIGEgYnJpbGxpYW50IG1hbiwgYW5kIGEgbG92ZXIgb2YgaGlzIGNvdW50cnkuIEFuZCBpZiBoaXMgYXJkZW50IGRlc2lyZSB0byBkcml2ZSBhd2F5IHRoZSBlbmVteSBoYXMgbGVkIGhpbSBpbnRvIGFueSBlcnJvciwgd2Ugd2lsbCBjaGFyZ2UgaGltIHdpdGggaXQgbGF0ZXIuPC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsIHRoZW4sIGFzIHNvb24gYXMgaGUgYXBwZWFyZWQgdXBvbiB0aGUgc2NlbmUsIGhlIHJvdXRlZCBhbmQgZGlzcGVyc2VkIHRoZSBOdW1pZGlhbnMgd2hvIHdlcmUgZ2FsbG9waW5nIGFib3V0IGluIHRoZSBwbGFpbi4gVGhlbiBoZSBtYWRlIGFnYWluc3QgdGhvc2Ugd2hvIHdlcmUgYXR0YWNraW5nIHRoZSByZWFyIG9mIHRoZSBSb21hbnMgdW5kZXIgTWludWNpdXMsIGFuZCBzbGV3IHRob3NlIHdob20gaGUgZW5jb3VudGVyZWQuIEJ1dCB0aGUgcmVzdCBvZiB0aGVtLCBlcmUgdGhleSB3ZXJlIGN1dCBvZmYgYW5kIHN1cnJvdW5kZWQgaW4gdGhlaXIgb3duIHR1cm4sIGFzIHRoZSBSb21hbnMgaGFkIGJlZW4gYnkgdGhlbSwgZ2F2ZSB3YXkgYW5kIGZsZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gSGFubmliYWwsIHNlZWluZyB0aGUgdHVybiBhZmZhaXJzIGhhZCB0YWtlbiwgYW5kIEZhYml1cywgd2l0aCBhIHZpZ291ciBiZXlvbmQgaGlzIHllYXJzLCBwbG91Z2hpbmcgaGlzIHdheSB0aHJvdWdoIHRoZSBjb21iYXRhbnRzIHVwIHRvIE1pbnVjaXVzIG9uIHRoZSBoaWxsLCBwdXQgYW4gZW5kIHRvIHRoZSBiYXR0bGUsIHNpZ25hbGxlZCBhIHJldHJlYXQsIGFuZCBsZWQgaGlzIENhcnRoYWdpbmlhbnMgYmFjayB0byB0aGVpciBjYW1wLCB0aGUgUm9tYW5zIGFsc28gYmVpbmcgZ2xhZCBvZiBhIHJlc3BpdGUuIEl0IGlzIHNhaWQgdGhhdCBhcyBIYW5uaWJhbCB3aXRoZHJldywgaGUgYWRkcmVzc2VkIHRvIGhpcyBmcmllbmRzIHNvbWUgc3VjaCBwbGVhc2FudHJ5IGFzIHRoaXMgYWJvdXQgRmFiaXVzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlZlcmlseSwgZGlkIEkgbm90IG9mdGVuIHByb3BoZXN5IHRvIHlvdSB0aGF0IHRoZSBjbG91ZCB3aGljaCB3ZSBzYXcgaG92ZXJpbmcgYWJvdmUgdGhlIGhlaWdodHMgd291bGQgb25lIGRheSBidXJzdCB1cG9uIHVzIGluIGEgZHJlbmNoaW5nIGFuZCBmdXJpb3VzIHN0b3JtPzwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldlbGwgdGhlbiwgYXMgc29vbiBhcyBoZSBhcHBlYXJlZCB1cG9uIHRoZSBzY2VuZSwgaGUgcm91dGVkIGFuZCBkaXNwZXJzZWQgdGhlIE51bWlkaWFucyB3aG8gd2VyZSBnYWxsb3BpbmcgYWJvdXQgaW4gdGhlIHBsYWluLiBUaGVuIGhlIG1hZGUgYWdhaW5zdCB0aG9zZSB3aG8gd2VyZSBhdHRhY2tpbmcgdGhlIHJlYXIgb2YgdGhlIFJvbWFucyB1bmRlciBNaW51Y2l1cywgYW5kIHNsZXcgdGhvc2Ugd2hvbSBoZSBlbmNvdW50ZXJlZC4gQnV0IHRoZSByZXN0IG9mIHRoZW0sIGVyZSB0aGV5IHdlcmUgY3V0IG9mZiBhbmQgc3Vycm91bmRlZCBpbiB0aGVpciBvd24gdHVybiwgYXMgdGhlIFJvbWFucyBoYWQgYmVlbiBieSB0aGVtLCBnYXZlIHdheSBhbmQgZmxlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gSGFubmliYWwsIHNlZWluZyB0aGUgdHVybiBhZmZhaXJzIGhhZCB0YWtlbiwgYW5kIEZhYml1cywgd2l0aCBhIHZpZ291ciBiZXlvbmQgaGlzIHllYXJzLCBwbG91Z2hpbmcgaGlzIHdheSB0aHJvdWdoIHRoZSBjb21iYXRhbnRzIHVwIHRvIE1pbnVjaXVzIG9uIHRoZSBoaWxsLCBwdXQgYW4gZW5kIHRvIHRoZSBiYXR0bGUsIHNpZ25hbGxlZCBhIHJldHJlYXQsIGFuZCBsZWQgaGlzIENhcnRoYWdpbmlhbnMgYmFjayB0byB0aGVpciBjYW1wLCB0aGUgUm9tYW5zIGFsc28gYmVpbmcgZ2xhZCBvZiBhIHJlc3BpdGUuIEl0IGlzIHNhaWQgdGhhdCBhcyBIYW5uaWJhbCB3aXRoZHJldywgaGUgYWRkcmVzc2VkIHRvIGhpcyBmcmllbmRzIHNvbWUgc3VjaCBwbGVhc2FudHJ5IGFzIHRoaXMgYWJvdXQgRmFiaXVzOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VmVyaWx5LCBkaWQgSSBub3Qgb2Z0ZW4gcHJvcGhlc3kgdG8geW91IHRoYXQgdGhlIGNsb3VkIHdoaWNoIHdlIHNhdyBob3ZlcmluZyBhYm92ZSB0aGUgaGVpZ2h0cyB3b3VsZCBvbmUgZGF5IGJ1cnN0IHVwb24gdXMgaW4gYSBkcmVuY2hpbmcgYW5kIGZ1cmlvdXMgc3Rvcm0/PC9xPgoJCQkgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5YSUlJIEFmdGVyIHRoZSBiYXR0bGUsIEZhYml1cyBkZXNwb2lsZWQgYWxsIG9mIHRoZSBlbmVteSB3aG9tIGhlIGhhZCBzbGFpbiwgYW5kIHdpdGhkcmV3IHRvIGhpcyBjYW1wLCB3aXRob3V0IGluZHVsZ2luZyBpbiBhIHNpbmdsZSBoYXVnaHR5IG9yIGludmlkaW91cyB3b3JkIGFib3V0IGhpcyBjb2xsZWFndWUuIEFuZCBNaW51Y2l1cywgYXNzZW1ibGluZyBoaXMgb3duIGFybXksIHNhaWQgdG8gdGhlbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5GZWxsb3ctc29sZGllcnMsIHRvIGF2b2lkIGFsbCBtaXN0YWtlcyBpbiB0aGUgY29uZHVjdCBvZiBncmVhdCBlbnRlcnByaXNlcyBpcyBiZXlvbmQgbWFuJ3MgcG93ZXJzOyBidXQgd2hlbiBhIG1pc3Rha2UgaGFzIG9uY2UgYmVlbiBtYWRlLCB0byB1c2UgaGlzIHJldmVyc2VzIGFzIGxlc3NvbnMgZm9yIHRoZSBmdXR1cmUgaXMgdGhlIHBhcnQgb2YgYSBicmF2ZSBhbmQgc2Vuc2libGUgbWFuLiAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SSB0aGVyZWZvcmUgY29uZmVzcyB0aGF0IHdoaWxlIEkgaGF2ZSBzb21lIHNsaWdodCBjYXVzZSBvZiBjb21wbGFpbnQgYWdhaW5zdCBmb3J0dW5lLCBJIGhhdmUgbGFyZ2VyIGdyb3VuZHMgZm9yIHByYWlzaW5nIGhlci4gRm9yIHdoYXQgSSBjb3VsZCBub3QgbGVhcm4gaW4gYWxsIHRoZSB0aW1lIHRoYXQgcHJlY2VkZWQgaXQsIEkgaGF2ZSBiZWVuIHRhdWdodCBpbiB0aGUgYnJpZWYgc3BhY2Ugb2YgYSBzaW5nbGUgZGF5LCBhbmQgSSBub3cgcGVyY2VpdmUgdGhhdCBJIGFtIG5vdCBhYmxlIHRvIGNvbW1hbmQgb3RoZXJzIG15c2VsZiwgYnV0IG5lZWQgdG8gYmUgdW5kZXIgdGhlIGNvbW1hbmQgb2YgYW5vdGhlciwgYW5kIHRoYXQgSSBoYXZlIGFsbCB0aGUgd2hpbGUgYmVlbiBhbWJpdGlvdXMgdG8gcHJldmFpbCBvdmVyIG1lbiBvZiB3aG9tIHRvIGJlIG91dGRvbmUgd2VyZSBiZXR0ZXIuIE5vdyBpbiBhbGwgb3RoZXIgbWF0dGVycyB0aGUgZGljdGF0b3IgaXMgeW91ciBsZWFkZXIsIGJ1dCBpbiB0aGUgcmVuZGVyaW5nIG9mIHRoYW5rcyB0byBoaW0gSSBteXNlbGYgd2lsbCB0YWtlIHRoZSBsZWFkLCBhbmQgd2lsbCBzaG93IG15c2VsZiBmaXJzdCBpbiBmb2xsb3dpbmcgaGlzIGFkdmljZSBhbmQgZG9pbmcgaGlzIGJpZGRpbmcuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+WElJSSBBZnRlciB0aGUgYmF0dGxlLCBGYWJpdXMgZGVzcG9pbGVkIGFsbCBvZiB0aGUgZW5lbXkgd2hvbSBoZSBoYWQgc2xhaW4sIGFuZCB3aXRoZHJldyB0byBoaXMgY2FtcCwgd2l0aG91dCBpbmR1bGdpbmcgaW4gYSBzaW5nbGUgaGF1Z2h0eSBvciBpbnZpZGlvdXMgd29yZCBhYm91dCBoaXMgY29sbGVhZ3VlLiBBbmQgTWludWNpdXMsIGFzc2VtYmxpbmcgaGlzIG93biBhcm15LCBzYWlkIHRvIHRoZW06IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5GZWxsb3ctc29sZGllcnMsIHRvIGF2b2lkIGFsbCBtaXN0YWtlcyBpbiB0aGUgY29uZHVjdCBvZiBncmVhdCBlbnRlcnByaXNlcyBpcyBiZXlvbmQgbWFuJ3MgcG93ZXJzOyBidXQgd2hlbiBhIG1pc3Rha2UgaGFzIG9uY2UgYmVlbiBtYWRlLCB0byB1c2UgaGlzIHJldmVyc2VzIGFzIGxlc3NvbnMgZm9yIHRoZSBmdXR1cmUgaXMgdGhlIHBhcnQgb2YgYSBicmF2ZSBhbmQgc2Vuc2libGUgbWFuLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JIHRoZXJlZm9yZSBjb25mZXNzIHRoYXQgd2hpbGUgSSBoYXZlIHNvbWUgc2xpZ2h0IGNhdXNlIG9mIGNvbXBsYWludCBhZ2FpbnN0IGZvcnR1bmUsIEkgaGF2ZSBsYXJnZXIgZ3JvdW5kcyBmb3IgcHJhaXNpbmcgaGVyLiBGb3Igd2hhdCBJIGNvdWxkIG5vdCBsZWFybiBpbiBhbGwgdGhlIHRpbWUgdGhhdCBwcmVjZWRlZCBpdCwgSSBoYXZlIGJlZW4gdGF1Z2h0IGluIHRoZSBicmllZiBzcGFjZSBvZiBhIHNpbmdsZSBkYXksIGFuZCBJIG5vdyBwZXJjZWl2ZSB0aGF0IEkgYW0gbm90IGFibGUgdG8gY29tbWFuZCBvdGhlcnMgbXlzZWxmLCBidXQgbmVlZCB0byBiZSB1bmRlciB0aGUgY29tbWFuZCBvZiBhbm90aGVyLCBhbmQgdGhhdCBJIGhhdmUgYWxsIHRoZSB3aGlsZSBiZWVuIGFtYml0aW91cyB0byBwcmV2YWlsIG92ZXIgbWVuIG9mIHdob20gdG8gYmUgb3V0ZG9uZSB3ZXJlIGJldHRlci4gTm93IGluIGFsbCBvdGhlciBtYXR0ZXJzIHRoZSBkaWN0YXRvciBpcyB5b3VyIGxlYWRlciwgYnV0IGluIHRoZSByZW5kZXJpbmcgb2YgdGhhbmtzIHRvIGhpbSBJIG15c2VsZiB3aWxsIHRha2UgdGhlIGxlYWQsIGFuZCB3aWxsIHNob3cgbXlzZWxmIGZpcnN0IGluIGZvbGxvd2luZyBoaXMgYWR2aWNlIGFuZCBkb2luZyBoaXMgYmlkZGluZy48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkkgdGhlcmVmb3JlIGNvbmZlc3MgdGhhdCB3aGlsZSBJIGhhdmUgc29tZSBzbGlnaHQgY2F1c2Ugb2YgY29tcGxhaW50IGFnYWluc3QgZm9ydHVuZSwgSSBoYXZlIGxhcmdlciBncm91bmRzIGZvciBwcmFpc2luZyBoZXIuIEZvciB3aGF0IEkgY291bGQgbm90IGxlYXJuIGluIGFsbCB0aGUgdGltZSB0aGF0IHByZWNlZGVkIGl0LCBJIGhhdmUgYmVlbiB0YXVnaHQgaW4gdGhlIGJyaWVmIHNwYWNlIG9mIGEgc2luZ2xlIGRheSwgYW5kIEkgbm93IHBlcmNlaXZlIHRoYXQgSSBhbSBub3QgYWJsZSB0byBjb21tYW5kIG90aGVycyBteXNlbGYsIGJ1dCBuZWVkIHRvIGJlIHVuZGVyIHRoZSBjb21tYW5kIG9mIGFub3RoZXIsIGFuZCB0aGF0IEkgaGF2ZSBhbGwgdGhlIHdoaWxlIGJlZW4gYW1iaXRpb3VzIHRvIHByZXZhaWwgb3ZlciBtZW4gb2Ygd2hvbSB0byBiZSBvdXRkb25lIHdlcmUgYmV0dGVyLiBOb3cgaW4gYWxsIG90aGVyIG1hdHRlcnMgdGhlIGRpY3RhdG9yIGlzIHlvdXIgbGVhZGVyLCBidXQgaW4gdGhlIHJlbmRlcmluZyBvZiB0aGFua3MgdG8gaGltIEkgbXlzZWxmIHdpbGwgdGFrZSB0aGUgbGVhZCwgYW5kIHdpbGwgc2hvdyBteXNlbGYgZmlyc3QgaW4gZm9sbG93aW5nIGhpcyBhZHZpY2UgYW5kIGRvaW5nIGhpcyBiaWRkaW5nLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlIHdvcmRzLCBoZSBvcmRlcmVkIHRoZSBlYWdsZXMgdG8gYmUgcmFpc2VkIGFuZCBhbGwgdG8gZm9sbG93IHRoZW0sIGFuZCBsZWQgdGhlIHdheSB0byB0aGUgY2FtcCBvZiBGYWJpdXMuIFdoZW4gaGUgaGFkIGVudGVyZWQgdGhpcywgaGUgcHJvY2VlZGVkIHRvIHRoZSBnZW5lcmFsJ3MgdGVudCwgd2hpbGUgYWxsIHdlcmUgbG9zdCBpbiB3b25kZXIuIFdoZW4gRmFiaXVzIGNhbWUgZm9ydGgsIE1pbnVjaXVzIGhhZCB0aGUgc3RhbmRhcmRzIHBsYW50ZWQgaW4gZnJvbnQgb2YgaGltLCBhbmQgYWRkcmVzc2VkIGhpbSB3aXRoIGEgbG91ZCB2b2ljZSBhcyBGYXRoZXIsIHdoaWxlIGhpcyBzb2xkaWVycyBncmVldGVkIHRoZSBzb2xkaWVycyBvZiBGYWJpdXMgYXMgUGF0cm9ucywgdGhlIG5hbWUgYnkgd2hpY2ggZnJlZWRtZW4gYWRkcmVzcyB0aG9zZSB3aG8gaGF2ZSBzZXQgdGhlbSBmcmVlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHF1aWV0IHByZXZhaWxlZCwgTWludWNpdXMgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5EaWN0YXRvciwgeW91IGhhdmUgb24gdGhpcyBkYXkgd29uIHR3byB2aWN0b3JpZXMsIG9uZSBvdmVyIEhhbm5pYmFsIHRocm91Z2ggeW91ciB2YWxvdXIsIGFuZCBvbmUgb3ZlciB5b3VyIGNvbGxlYWd1ZSB0aHJvdWdoIHlvdXIgd2lzZG9tIGFuZCBraW5kbmVzcy4gQnkgdGhlIGZpcnN0IHlvdSBzYXZlZCBvdXIgbGl2ZXMsIGFuZCBieSB0aGUgc2Vjb25kIHlvdSB0YXVnaHQgdXMgYSBncmVhdCBsZXNzb24sIHZhbnF1aXNoZWQgYXMgd2Ugd2VyZSBieSBvdXIgZW5lbXkgdG8gb3VyIHNoYW1lLCBhbmQgYnkgeW91IHRvIG91ciBob25vdXIgYW5kIHNhZmV0eS4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkkgY2FsbCB5b3UgYnkgdGhlIGV4Y2VsbGVudCBuYW1lIG9mIEZhdGhlciwgYmVjYXVzZSB0aGVyZSBpcyBubyBtb3JlIGhvbm91cmFibGUgbmFtZSB3aGljaCBJIGNhbiB1c2U7IGFuZCB5ZXQgYSBmYXRoZXIncyBraW5kbmVzcyBpcyBub3Qgc28gZ3JlYXQgYXMgdGhpcyBraW5kbmVzcyBiZXN0b3dlZCBieSB5b3UuIE15IGZhdGhlciBkaWQgYnV0IGJlZ2V0IG1lLCB3aGlsZSB0byB5b3UgSSBvd2Ugbm90IG9ubHkgbXkgb3duIHNhbHZhdGlvbiwgYnV0IGFsc28gdGhhdCBvZiBhbGwgdGhlc2UgbWVuIG9mIG1pbmUuPC9xPiBTbyBzYXlpbmcsIGhlIGVtYnJhY2VkIEZhYml1cyBhbmQga2lzc2VkIGhpbSwgYW5kIHRoZSBzb2xkaWVycyBvbiBib3RoIHNpZGVzIGluIGxpa2UgbWFubmVyIGVtYnJhY2VkIGFuZCBraXNzZWQgZWFjaCBvdGhlciwgc28gdGhhdCB0aGUgY2FtcCB3YXMgZmlsbGVkIHdpdGggam95IGFuZCB0ZWFycyBvZiByZWpvaWNpbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlIHdvcmRzLCBoZSBvcmRlcmVkIHRoZSBlYWdsZXMgdG8gYmUgcmFpc2VkIGFuZCBhbGwgdG8gZm9sbG93IHRoZW0sIGFuZCBsZWQgdGhlIHdheSB0byB0aGUgY2FtcCBvZiBGYWJpdXMuIFdoZW4gaGUgaGFkIGVudGVyZWQgdGhpcywgaGUgcHJvY2VlZGVkIHRvIHRoZSBnZW5lcmFsJ3MgdGVudCwgd2hpbGUgYWxsIHdlcmUgbG9zdCBpbiB3b25kZXIuIFdoZW4gRmFiaXVzIGNhbWUgZm9ydGgsIE1pbnVjaXVzIGhhZCB0aGUgc3RhbmRhcmRzIHBsYW50ZWQgaW4gZnJvbnQgb2YgaGltLCBhbmQgYWRkcmVzc2VkIGhpbSB3aXRoIGEgbG91ZCB2b2ljZSBhcyBGYXRoZXIsIHdoaWxlIGhpcyBzb2xkaWVycyBncmVldGVkIHRoZSBzb2xkaWVycyBvZiBGYWJpdXMgYXMgUGF0cm9ucywgdGhlIG5hbWUgYnkgd2hpY2ggZnJlZWRtZW4gYWRkcmVzcyB0aG9zZSB3aG8gaGF2ZSBzZXQgdGhlbSBmcmVlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gcXVpZXQgcHJldmFpbGVkLCBNaW51Y2l1cyBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RGljdGF0b3IsIHlvdSBoYXZlIG9uIHRoaXMgZGF5IHdvbiB0d28gdmljdG9yaWVzLCBvbmUgb3ZlciBIYW5uaWJhbCB0aHJvdWdoIHlvdXIgdmFsb3VyLCBhbmQgb25lIG92ZXIgeW91ciBjb2xsZWFndWUgdGhyb3VnaCB5b3VyIHdpc2RvbSBhbmQga2luZG5lc3MuIEJ5IHRoZSBmaXJzdCB5b3Ugc2F2ZWQgb3VyIGxpdmVzLCBhbmQgYnkgdGhlIHNlY29uZCB5b3UgdGF1Z2h0IHVzIGEgZ3JlYXQgbGVzc29uLCB2YW5xdWlzaGVkIGFzIHdlIHdlcmUgYnkgb3VyIGVuZW15IHRvIG91ciBzaGFtZSwgYW5kIGJ5IHlvdSB0byBvdXIgaG9ub3VyIGFuZCBzYWZldHkuIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkkgY2FsbCB5b3UgYnkgdGhlIGV4Y2VsbGVudCBuYW1lIG9mIEZhdGhlciwgYmVjYXVzZSB0aGVyZSBpcyBubyBtb3JlIGhvbm91cmFibGUgbmFtZSB3aGljaCBJIGNhbiB1c2U7IGFuZCB5ZXQgYSBmYXRoZXIncyBraW5kbmVzcyBpcyBub3Qgc28gZ3JlYXQgYXMgdGhpcyBraW5kbmVzcyBiZXN0b3dlZCBieSB5b3UuIE15IGZhdGhlciBkaWQgYnV0IGJlZ2V0IG1lLCB3aGlsZSB0byB5b3UgSSBvd2Ugbm90IG9ubHkgbXkgb3duIHNhbHZhdGlvbiwgYnV0IGFsc28gdGhhdCBvZiBhbGwgdGhlc2UgbWVuIG9mIG1pbmUuPC9xPiBTbyBzYXlpbmcsIGhlIGVtYnJhY2VkIEZhYml1cyBhbmQga2lzc2VkIGhpbSwgYW5kIHRoZSBzb2xkaWVycyBvbiBib3RoIHNpZGVzIGluIGxpa2UgbWFubmVyIGVtYnJhY2VkIGFuZCBraXNzZWQgZWFjaCBvdGhlciwgc28gdGhhdCB0aGUgY2FtcCB3YXMgZmlsbGVkIHdpdGggam95IGFuZCB0ZWFycyBvZiByZWpvaWNpbmcuCgkJCTwvdHJhbnNsYXRpb24+"
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkkgY2FsbCB5b3UgYnkgdGhlIGV4Y2VsbGVudCBuYW1lIG9mIEZhdGhlciwgYmVjYXVzZSB0aGVyZSBpcyBubyBtb3JlIGhvbm91cmFibGUgbmFtZSB3aGljaCBJIGNhbiB1c2U7IGFuZCB5ZXQgYSBmYXRoZXIncyBraW5kbmVzcyBpcyBub3Qgc28gZ3JlYXQgYXMgdGhpcyBraW5kbmVzcyBiZXN0b3dlZCBieSB5b3UuIE15IGZhdGhlciBkaWQgYnV0IGJlZ2V0IG1lLCB3aGlsZSB0byB5b3UgSSBvd2Ugbm90IG9ubHkgbXkgb3duIHNhbHZhdGlvbiwgYnV0IGFsc28gdGhhdCBvZiBhbGwgdGhlc2UgbWVuIG9mIG1pbmUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgRmFiaXVzIGxhaWQgZG93biBoaXMgb2ZmaWNlLCBhbmQgY29uc3VscyB3ZXJlIGFnYWluIGFwcG9pbnRlZC4gVGhlIGZpcnN0IG9mIHRoZXNlIG1haW50YWluZWQgdGhlIHN0eWxlIG9mIHdhcmZhcmUgd2hpY2ggRmFiaXVzIGhhZCBvcmRhaW5lZC4gVGhleSBhdm9pZGVkIGEgcGl0Y2hlZCBiYXR0bGUgd2l0aCBIYW5uaWJhbCwgYnV0IGdhdmUgYWlkIGFuZCBzdWNjb3VyIHRvIHRoZWlyIGFsbGllcywgYW5kIHByZXZlbnRlZCB0aGVpciBmYWxsaW5nIGF3YXkuIEJ1dCB3aGVuIFRlcmVudGl1cyBWYXJybyB3YXMgZWxldmF0ZWQgdG8gdGhlIGNvbnN1bHNoaXAsIGEgbWFuIHdob3NlIGJpcnRoIHdhcyBvYnNjdXJlIGFuZCB3aG9zZSBsaWZlIHdhcyBjb25zcGljdW91cyBmb3Igc2VydmlsZSBmbGF0dGVyeSBvZiB0aGUgcGVvcGxlIGFuZCBmb3IgcmFzaG5lc3MsIGl0IHdhcyBjbGVhciB0aGF0IGluIGhpcyBpbmV4cGVyaWVuY2UgYW5kIHRlbWVyaXR5IGhlIHdvdWxkIHN0YWtlIHRoZSBlbnRpcmUgaXNzdWUgdXBvbiB0aGUgaGF6YXJkIG9mIGEgc2luZ2xlIHRocm93LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgdXNlZCB0byBzaG91dCBpbiB0aGUgYXNzZW1ibGllcyB0aGF0IHRoZSB3YXIgd291bGQgY29udGludWUgYXMgbG9uZyBhcyB0aGUgY2l0eSBlbXBsb3llZCBtZW4gbGlrZSBGYWJpdXMgYXMgaXRzIGdlbmVyYWxzOyBidXQgdGhhdCBoZSBoaW1zZWxmIHdvdWxkIGNvbnF1ZXIgdGhlIGVuZW15IHRoZSB2ZXJ5IGRheSBoZSBzYXcgdGhlbS4gQW5kIG5vdCBvbmx5IGRpZCBoZSBtYWtlIHN1Y2ggc3BlZWNoZXMsIGJ1dCBoZSBhbHNvIGFzc2VtYmxlZCBhbmQgZW5yb2xsZWQgYSBsYXJnZXIgZm9yY2UgdGhhbiB0aGUgUm9tYW5zIGhhZCBldmVyIGVtcGxveWVkIGFnYWluc3QgYW55IGVuZW15LiBFaWdodHktZWlnaHQgdGhvdXNhbmQgbWVuIHdlcmUgYXJyYXllZCBmb3IgYmF0dGxlLCB0byB0aGUgZ3JlYXQgdGVycm9yIG9mIEZhYml1cyBhbmQgYWxsIHNlbnNpYmxlIFJvbWFucy4gRm9yIHRoZXkgdGhvdWdodCB0aGVpciBjaXR5IGNvdWxkIG5vdCByZWNvdmVyIGlmIHNoZSBsb3N0IHNvIG1hbnkgbWVuIGluIHRoZSBwcmltZSBvZiBsaWZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgRmFiaXVzIGxhaWQgZG93biBoaXMgb2ZmaWNlLCBhbmQgY29uc3VscyB3ZXJlIGFnYWluIGFwcG9pbnRlZC4gVGhlIGZpcnN0IG9mIHRoZXNlIG1haW50YWluZWQgdGhlIHN0eWxlIG9mIHdhcmZhcmUgd2hpY2ggRmFiaXVzIGhhZCBvcmRhaW5lZC4gVGhleSBhdm9pZGVkIGEgcGl0Y2hlZCBiYXR0bGUgd2l0aCBIYW5uaWJhbCwgYnV0IGdhdmUgYWlkIGFuZCBzdWNjb3VyIHRvIHRoZWlyIGFsbGllcywgYW5kIHByZXZlbnRlZCB0aGVpciBmYWxsaW5nIGF3YXkuIEJ1dCB3aGVuIFRlcmVudGl1cyBWYXJybyB3YXMgZWxldmF0ZWQgdG8gdGhlIGNvbnN1bHNoaXAsIGEgbWFuIHdob3NlIGJpcnRoIHdhcyBvYnNjdXJlIGFuZCB3aG9zZSBsaWZlIHdhcyBjb25zcGljdW91cyBmb3Igc2VydmlsZSBmbGF0dGVyeSBvZiB0aGUgcGVvcGxlIGFuZCBmb3IgcmFzaG5lc3MsIGl0IHdhcyBjbGVhciB0aGF0IGluIGhpcyBpbmV4cGVyaWVuY2UgYW5kIHRlbWVyaXR5IGhlIHdvdWxkIHN0YWtlIHRoZSBlbnRpcmUgaXNzdWUgdXBvbiB0aGUgaGF6YXJkIG9mIGEgc2luZ2xlIHRocm93LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB1c2VkIHRvIHNob3V0IGluIHRoZSBhc3NlbWJsaWVzIHRoYXQgdGhlIHdhciB3b3VsZCBjb250aW51ZSBhcyBsb25nIGFzIHRoZSBjaXR5IGVtcGxveWVkIG1lbiBsaWtlIEZhYml1cyBhcyBpdHMgZ2VuZXJhbHM7IGJ1dCB0aGF0IGhlIGhpbXNlbGYgd291bGQgY29ucXVlciB0aGUgZW5lbXkgdGhlIHZlcnkgZGF5IGhlIHNhdyB0aGVtLiBBbmQgbm90IG9ubHkgZGlkIGhlIG1ha2Ugc3VjaCBzcGVlY2hlcywgYnV0IGhlIGFsc28gYXNzZW1ibGVkIGFuZCBlbnJvbGxlZCBhIGxhcmdlciBmb3JjZSB0aGFuIHRoZSBSb21hbnMgaGFkIGV2ZXIgZW1wbG95ZWQgYWdhaW5zdCBhbnkgZW5lbXkuIEVpZ2h0eS1laWdodCB0aG91c2FuZCBtZW4gd2VyZSBhcnJheWVkIGZvciBiYXR0bGUsIHRvIHRoZSBncmVhdCB0ZXJyb3Igb2YgRmFiaXVzIGFuZCBhbGwgc2Vuc2libGUgUm9tYW5zLiBGb3IgdGhleSB0aG91Z2h0IHRoZWlyIGNpdHkgY291bGQgbm90IHJlY292ZXIgaWYgc2hlIGxvc3Qgc28gbWFueSBtZW4gaW4gdGhlIHByaW1lIG9mIGxpZmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgUGF1bHVzIEFlbWlsaXVzIHdhcyB0aGUgY29sbGVhZ3VlIG9mIFRlcmVudGl1cywgYSBtYW4gb2YgZXhwZXJpZW5jZSBpbiBtYW55IHdhcnMsIGJ1dCBub3QgYWNjZXB0YWJsZSB0byB0aGUgcGVvcGxlLCBhbmQgY3J1c2hlZCBpbiBzcGlyaXQgYnkgYSBmaW5lIHdoaWNoIHRoZXkgaGFkIGltcG9zZWQgdXBvbiBoaW0uIFRoZXJlZm9yZSBGYWJpdXMgdHJpZWQgdG8gcm91c2UgYW5kIGVuY291cmFnZSBoaW0gdG8gcmVzdHJhaW4gdGhlIG1hZG5lc3Mgb2YgaGlzIGNvbGxlYWd1ZSwgc2hvd2luZyBoaW0gdGhhdCBoZSBtdXN0IHN0cnVnZ2xlIHRvIHNhdmUgaGlzIGNvdW50cnkgbm90IHNvIG11Y2ggZnJvbSBIYW5uaWJhbCBhcyBmcm9tIFRlcmVudGl1cy4gVGhlIGxhdHRlciwgaGUgc2FpZCwgd2FzIGVhZ2VyIHRvIGZpZ2h0IGJlY2F1c2UgaGUgZGlkIG5vdCBzZWUgd2hlcmUgaGlzIHN0cmVuZ3RoIGxheTsgdGhlIGZvcm1lciwgYmVjYXVzZSBoZSBzYXcgaGlzIG93biB3ZWFrbmVzcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXQgaXMgdG8gbWUsIE8gUGF1bHVzLCB0aGF0IG1vcmUgY3JlZGVuY2Ugc2hvdWxkIGJlIGdpdmVuIGluIHJlZ2FyZCB0byBIYW5uaWJhbCdzIGFmZmFpcnMsIGFuZCBJIHNvbGVtbmx5IGFzc3VyZSB5b3UgdGhhdCwgaWYgbm8gb25lIHNoYWxsIGdpdmUgaGltIGJhdHRsZSB0aGlzIHllYXIsIHRoZSAsbWFuIHdpbGwgcmVtYWluIGluIEl0YWx5IG9ubHkgdG8gcGVyaXNoLCBvciB3aWxsIGxlYXZlIGl0IGluIGZsaWdodCwgc2luY2UgZXZlbiBub3csIHdoZW4gaGUgaXMgdGhvdWdodCB0byBiZSB2aWN0b3Jpb3VzIGFuZCB0byBiZSBtYXN0ZXIgb2YgdGhlIGNvdW50cnksIG5vdCBvbmUgb2YgaGlzIGVuZW1pZXMgaGFzIGNvbWUgb3ZlciB0byBoaXMgc2lkZSwgYW5kIG5vdCBldmVuIHNvIG11Y2ggYXMgdGhlIHRoaXJkIHBhcnQgb2YgdGhlIGZvcmNlIHdoaWNoIGhlIGJyb3VnaHQgZnJvbSBob21lIGlzIHN0aWxsIGxlZnQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgUGF1bHVzIGlzIHNhaWQgdG8gaGF2ZSBhbnN3ZXJlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JZiBJIGNvbnN1bHQgbXkgb3duIGludGVyZXN0cywgTyBGYWJpdXMsIGl0IGlzIGJldHRlciBmb3IgbWUgdG8gZW5jb3VudGVyIHRoZSBzcGVhcnMgb2YgdGhlIGVuZW15IHRoYW4gdG8gZmFjZSBhZ2FpbiB0aGUgdm90ZXMgb2YgbXkgZmVsbG93LWNpdGl6ZW5zLiBCdXQgaWYgdGhlIHN0YXRlIGlzIGluIHN1Y2ggYSBwYXNzLCBJIHdpbGwgdHJ5IHRvIGJlIGEgZ29vZCBnZW5lcmFsIGluIHlvdXIgb3BpbmlvbiwgcmF0aGVyIHRoYW4gaW4gdGhhdCBvZiBhbGwgdGhlIHJlc3Qgd2hvIHNvIGZvcmNpYmx5IG9wcG9zZSB5b3UuPC9xPiBXaXRoIHRoaXMgZGV0ZXJtaW5hdGlvbiwgUGF1bHVzIHdlbnQgZm9ydGggdG8gdGhlIHdhci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgUGF1bHVzIEFlbWlsaXVzIHdhcyB0aGUgY29sbGVhZ3VlIG9mIFRlcmVudGl1cywgYSBtYW4gb2YgZXhwZXJpZW5jZSBpbiBtYW55IHdhcnMsIGJ1dCBub3QgYWNjZXB0YWJsZSB0byB0aGUgcGVvcGxlLCBhbmQgY3J1c2hlZCBpbiBzcGlyaXQgYnkgYSBmaW5lIHdoaWNoIHRoZXkgaGFkIGltcG9zZWQgdXBvbiBoaW0uIFRoZXJlZm9yZSBGYWJpdXMgdHJpZWQgdG8gcm91c2UgYW5kIGVuY291cmFnZSBoaW0gdG8gcmVzdHJhaW4gdGhlIG1hZG5lc3Mgb2YgaGlzIGNvbGxlYWd1ZSwgc2hvd2luZyBoaW0gdGhhdCBoZSBtdXN0IHN0cnVnZ2xlIHRvIHNhdmUgaGlzIGNvdW50cnkgbm90IHNvIG11Y2ggZnJvbSBIYW5uaWJhbCBhcyBmcm9tIFRlcmVudGl1cy4gVGhlIGxhdHRlciwgaGUgc2FpZCwgd2FzIGVhZ2VyIHRvIGZpZ2h0IGJlY2F1c2UgaGUgZGlkIG5vdCBzZWUgd2hlcmUgaGlzIHN0cmVuZ3RoIGxheTsgdGhlIGZvcm1lciwgYmVjYXVzZSBoZSBzYXcgaGlzIG93biB3ZWFrbmVzcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pdCBpcyB0byBtZSwgTyBQYXVsdXMsIHRoYXQgbW9yZSBjcmVkZW5jZSBzaG91bGQgYmUgZ2l2ZW4gaW4gcmVnYXJkIHRvIEhhbm5pYmFsJ3MgYWZmYWlycywgYW5kIEkgc29sZW1ubHkgYXNzdXJlIHlvdSB0aGF0LCBpZiBubyBvbmUgc2hhbGwgZ2l2ZSBoaW0gYmF0dGxlIHRoaXMgeWVhciwgdGhlICxtYW4gd2lsbCByZW1haW4gaW4gSXRhbHkgb25seSB0byBwZXJpc2gsIG9yIHdpbGwgbGVhdmUgaXQgaW4gZmxpZ2h0LCBzaW5jZSBldmVuIG5vdywgd2hlbiBoZSBpcyB0aG91Z2h0IHRvIGJlIHZpY3RvcmlvdXMgYW5kIHRvIGJlIG1hc3RlciBvZiB0aGUgY291bnRyeSwgbm90IG9uZSBvZiBoaXMgZW5lbWllcyBoYXMgY29tZSBvdmVyIHRvIGhpcyBzaWRlLCBhbmQgbm90IGV2ZW4gc28gbXVjaCBhcyB0aGUgdGhpcmQgcGFydCBvZiB0aGUgZm9yY2Ugd2hpY2ggaGUgYnJvdWdodCBmcm9tIGhvbWUgaXMgc3RpbGwgbGVmdC48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoaXMgUGF1bHVzIGlzIHNhaWQgdG8gaGF2ZSBhbnN3ZXJlZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIEkgY29uc3VsdCBteSBvd24gaW50ZXJlc3RzLCBPIEZhYml1cywgaXQgaXMgYmV0dGVyIGZvciBtZSB0byBlbmNvdW50ZXIgdGhlIHNwZWFycyBvZiB0aGUgZW5lbXkgdGhhbiB0byBmYWNlIGFnYWluIHRoZSB2b3RlcyBvZiBteSBmZWxsb3ctY2l0aXplbnMuIEJ1dCBpZiB0aGUgc3RhdGUgaXMgaW4gc3VjaCBhIHBhc3MsIEkgd2lsbCB0cnkgdG8gYmUgYSBnb29kIGdlbmVyYWwgaW4geW91ciBvcGluaW9uLCByYXRoZXIgdGhhbiBpbiB0aGF0IG9mIGFsbCB0aGUgcmVzdCB3aG8gc28gZm9yY2libHkgb3Bwb3NlIHlvdS48L3E+IFdpdGggdGhpcyBkZXRlcm1pbmF0aW9uLCBQYXVsdXMgd2VudCBmb3J0aCB0byB0aGUgd2FyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgVGVyZW50aXVzLCBpbnNpc3Rpbmcgb24gaGlzIHJpZ2h0IHRvIGNvbW1hbmQgYSBkYXkgaW4gdHVybiwgYW5kIHRoZW4gZW5jYW1waW5nIG92ZXIgYWdhaW5zdCBIYW5uaWJhbCBieSB0aGUgcml2ZXIgQXVmaWR1cyBhbWlkIHRoZSB0b3duIGNhbGxlZCBDYW5uYWUsIGF0IGJyZWFrIG9mIGRheSBwdXQgb3V0IHRoZSBzaWduYWwgZm9yIGJhdHRsZSzigJRhIHNjYXJsZXQgdHVuaWMgZGlzcGxheWVkIGFib3ZlIHRoZSBnZW5lcmFsJ3MgdGVudC4gQXQgdGhpcyBldmVudCB0aGUgQ2FydGhhZ2luaWFucyB3ZXJlIGNvbmZvdW5kZWQgYXQgZmlyc3QsIHNlZWluZyB0aGUgYm9sZG5lc3Mgb2YgdGhlIFJvbWFuIGdlbmVyYWwgYW5kIHRoZSBudW1iZXIgb2YgaGlzIGFybXksIHdoaWNoIHdhcyBtb3JlIHRoYW4gZG91YmxlIHRoZWlyIG93bi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEhhbm5pYmFsIG9yZGVyZWQgaGlzIGZvcmNlcyB0byBhcm0gZm9yIGJhdHRsZSwgd2hpbGUgaGUgaGltc2VsZjsgd2l0aCBhIGZldyBjb21wYW5pb25zLCByb2RlIHRvIHRoZSB0b3Agb2YgYSBnZW50bHkgc2xvcGluZyByaWRnZSwgZnJvbSB3aGljaCBoZSB3YXRjaGVkIGhpcyBlbmVtaWVzIGFzIHRoZXkgZm9ybWVkIGluIGJhdHRsZSBhcnJheS4gV2hlbiBvbmUgb2YgaGlzIGNvbXBhbmlvbnMsIG5hbWVkIEdpc2NvLCBhIG1hbiBvZiBoaXMgb3duIHJhbmssIHJlbWFya2VkIHRoYXQgdGhlIG51bWJlciBvZiB0aGUgZW5lbXkgYW1hemVkIGhpbSwgSGFubmliYWwgcHV0IG9uIGEgc2VyaW91cyBsb29rIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkdpc2NvLCBhbm90aGVyIHRoaW5nIGhhcyBlc2NhcGVkIHlvdXIgbm90aWNlIHdoaWNoIGlzIG1vcmUgYW1hemluZyBzdGlsbC48L3E+IEFuZCB3aGVuIEdpc2NvIGFza2VkIHdoYXQgaXQgd2FzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIHRoZSBmYWN0LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGF0IGluIGFsbCB0aGlzIG11bHRpdHVkZSB0aGVyZSBpcyBubyBvbmUgd2hvIGlzIGNhbGxlZCBHaXNjby48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGplc3QgdG9vayB0aGVtIGFsbCBieSBzdXJwcmlzZSBhbmQgc2V0IHRoZW0gbGF1Z2hpbmcsIGFuZCBhcyB0aGV5IG1hZGUgdGhlaXIgd2F5IGRvd24gZnJvbSB0aGUgcmlkZ2UsIHRoZXkgcmVwb3J0ZWQgdGhlIHBsZWFzYW50cnkgdG8gYWxsIHdobyBtZXQgdGhlbSwgc28gdGhhdCBncmVhdCBudW1iZXJzIHdlcmUgbGF1Z2hpbmcgaGVhcnRpbHksIGFuZCBIYW5uaWJhbCdzIGVzY29ydCBjb3VsZCBub3QgZXZlbiByZWNvdmVyIHRoZW1zZWx2ZXMuIFRoZSBzaWdodCBvZiB0aGlzIGluZnVzZWQgY291cmFnZSBpbnRvIHRoZSBDYXJ0aGFnaW5pYW5zLiBUaGV5IHJlYXNvbmVkIHRoYXQgdGhlaXIgZ2VuZXJhbCBtdXN0IGhhdmUgYSBtaWdodHkgY29udGVtcHQgZm9yIHRoZSBlbmVteSBpZiBoZSBsYXVnaGVkIGFuZCBqZXN0ZWQgc28gaW4gdGhlIHByZXNlbmNlIG9mIGRhbmdlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFRlcmVudGl1cywgaW5zaXN0aW5nIG9uIGhpcyByaWdodCB0byBjb21tYW5kIGEgZGF5IGluIHR1cm4sIGFuZCB0aGVuIGVuY2FtcGluZyBvdmVyIGFnYWluc3QgSGFubmliYWwgYnkgdGhlIHJpdmVyIEF1ZmlkdXMgYW1pZCB0aGUgdG93biBjYWxsZWQgQ2FubmFlLCBhdCBicmVhayBvZiBkYXkgcHV0IG91dCB0aGUgc2lnbmFsIGZvciBiYXR0bGUs4oCUYSBzY2FybGV0IHR1bmljIGRpc3BsYXllZCBhYm92ZSB0aGUgZ2VuZXJhbCdzIHRlbnQuIEF0IHRoaXMgZXZlbnQgdGhlIENhcnRoYWdpbmlhbnMgd2VyZSBjb25mb3VuZGVkIGF0IGZpcnN0LCBzZWVpbmcgdGhlIGJvbGRuZXNzIG9mIHRoZSBSb21hbiBnZW5lcmFsIGFuZCB0aGUgbnVtYmVyIG9mIGhpcyBhcm15LCB3aGljaCB3YXMgbW9yZSB0aGFuIGRvdWJsZSB0aGVpciBvd24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBIYW5uaWJhbCBvcmRlcmVkIGhpcyBmb3JjZXMgdG8gYXJtIGZvciBiYXR0bGUsIHdoaWxlIGhlIGhpbXNlbGY7IHdpdGggYSBmZXcgY29tcGFuaW9ucywgcm9kZSB0byB0aGUgdG9wIG9mIGEgZ2VudGx5IHNsb3BpbmcgcmlkZ2UsIGZyb20gd2hpY2ggaGUgd2F0Y2hlZCBoaXMgZW5lbWllcyBhcyB0aGV5IGZvcm1lZCBpbiBiYXR0bGUgYXJyYXkuIFdoZW4gb25lIG9mIGhpcyBjb21wYW5pb25zLCBuYW1lZCBHaXNjbywgYSBtYW4gb2YgaGlzIG93biByYW5rLCByZW1hcmtlZCB0aGF0IHRoZSBudW1iZXIgb2YgdGhlIGVuZW15IGFtYXplZCBoaW0sIEhhbm5pYmFsIHB1dCBvbiBhIHNlcmlvdXMgbG9vayBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkdpc2NvLCBhbm90aGVyIHRoaW5nIGhhcyBlc2NhcGVkIHlvdXIgbm90aWNlIHdoaWNoIGlzIG1vcmUgYW1hemluZyBzdGlsbC48L3E+IEFuZCB3aGVuIEdpc2NvIGFza2VkIHdoYXQgaXQgd2FzLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgdGhlIGZhY3QsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBpbiBhbGwgdGhpcyBtdWx0aXR1ZGUgdGhlcmUgaXMgbm8gb25lIHdobyBpcyBjYWxsZWQgR2lzY28uPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBqZXN0IHRvb2sgdGhlbSBhbGwgYnkgc3VycHJpc2UgYW5kIHNldCB0aGVtIGxhdWdoaW5nLCBhbmQgYXMgdGhleSBtYWRlIHRoZWlyIHdheSBkb3duIGZyb20gdGhlIHJpZGdlLCB0aGV5IHJlcG9ydGVkIHRoZSBwbGVhc2FudHJ5IHRvIGFsbCB3aG8gbWV0IHRoZW0sIHNvIHRoYXQgZ3JlYXQgbnVtYmVycyB3ZXJlIGxhdWdoaW5nIGhlYXJ0aWx5LCBhbmQgSGFubmliYWwncyBlc2NvcnQgY291bGQgbm90IGV2ZW4gcmVjb3ZlciB0aGVtc2VsdmVzLiBUaGUgc2lnaHQgb2YgdGhpcyBpbmZ1c2VkIGNvdXJhZ2UgaW50byB0aGUgQ2FydGhhZ2luaWFucy4gVGhleSByZWFzb25lZCB0aGF0IHRoZWlyIGdlbmVyYWwgbXVzdCBoYXZlIGEgbWlnaHR5IGNvbnRlbXB0IGZvciB0aGUgZW5lbXkgaWYgaGUgbGF1Z2hlZCBhbmQgamVzdGVkIHNvIGluIHRoZSBwcmVzZW5jZSBvZiBkYW5nZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBiYXR0bGUgSGFubmliYWwgcHJhY3RpY2VkIGEgZG91YmxlIHN0cmF0ZWd5LiBJbiB0aGUgZmlyc3QgcGxhY2UsIGhlIHRvb2sgYWR2YW50YWdlIG9mIHRoZSBncm91bmQgdG8gcHV0IHRoZSB3aW5kIGF0IGhpcyBiYWNrLiBUaGlzIHdpbmQgY2FtZSBkb3duIGxpa2UgYSBmaWVyeSBodXJyaWNhbmUsIGFuZCByYWlzZWQgYSBodWdlIGNsb3VkIG9mIGR1c3QgZnJvbSB0aGUgZXhwb3NlZCBhbmQgc2FuZHkgcGxhaW5zIGFuZCBkcm92ZSBpdCBvdmVyIHRoZSBDYXJ0aGFnaW5pYW4gbGluZXMgaGFyZCBpbnRvIHRoZSBmYWNlcyBvZiB0aGUgUm9tYW5zLCB3aG8gdHVybmVkIGF3YXkgdG8gYXZvaWQgaXQsIGFuZCBzbyBmZWxsIGludG8gY29uZnVzaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2Vjb25kIHBsYWNlLCBoZSBmb3JtZWQgaGlzIHRyb29wcyBhcyBmb2xsb3dzOiB0aGUgc3R1cmRpZXN0IGFuZCBtb3N0IHdhcmxpa2UgcGFydCBvZiBoaXMgZm9yY2UgaGUgc3RhdGlvbmVkIG9uIGVpdGhlciBzaWRlIG9mIHRoZSBjZW50cmUsIGFuZCBtYW5uZWQgdGhlIGNlbnRyZSBpdHNlbGYgd2l0aCBoaXMgcG9vcmVzdCBzb2xkaWVycywgaW50ZW5kaW5nIHRvIHVzZSB0aGlzIGFzIGEgd2VkZ2UganV0dGluZyBvdXQgZmFyIGluIGFkdmFuY2Ugb2YgdGhlIHJlc3Qgb2YgaGlzIGxpbmUuIEJ1dCBvcmRlcnMgd2VyZSBnaXZlbiB0byB0aGUgcGlja2VkIHRyb29wcywgd2hlbiB0aGUgUm9tYW5zIHNob3VsZCBoYXZlIGN1dCB0aGUgdHJvb3BzIGluIHRoZSBjZW50cmUgdG8gcGllY2VzLCBwdXJzdWVkIHRoZW0gaG90bHkgYXMgdGhleSByZXRyZWF0ZWQgYW5kIGZvcm1lZCBhIGRlZXAgaG9sbG93LCBhbmQgc28gZ290IHdpdGhpbiB0aGVpciBlbmVteSdzIGxpbmUgb2YgYmF0dGxlLOKAlHRoZW4gdG8gdHVybiBzaGFycGx5IGZyb20gZWl0aGVyIHNpZGUsIHNtaXRlIHRoZW0gb24gdGhlIGZsYW5rcywgYW5kIGVudmVsb3AgdGhlbSBieSBjbG9zaW5nIGluIHVwb24gdGhlaXIgcmVhci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IHdhcyB0aGlzIHdoaWNoIHNlZW1zIHRvIGhhdmUgcHJvZHVjZWQgdGltZSBncmVhdGVzdCBzbGF1Z2h0ZXIuIEZvciB0aGUgY2VudHJlIGdhdmUgd2F5IGFuZCB3YXMgZm9sbG93ZWQgYnkgdGhlIFJvbWFucyBpbiBwdXJzdWl0LCBIYW5uaWJhbCdzIGxpbmUgb2YgYmF0dGxlIHRodXMgY2hhbmdpbmcgaXRzIHNoYXBlIGludG8gdGhhdCBvZiBhIGNyZXNjZW50OyBhbmQgdGhlIGNvbW1hbmRlcnMgb2YgdGhlIHBpY2tlZCB0cm9vcHMgb24gaGlzIHdpbmdzIHdoZWVsZWQgdGhlbSBzd2lmdGx5IHRvIGxlZnQgYW5kIHJpZ2h0IGFuZCBmZWxsIHVwb24gdGhlIGV4cG9zZWQgc2lkZXMgb2YgdGhlaXIgZW5lbXksIGFsbCBvZiB3aG9tLCBleGNlcHQgdGhvc2Ugd2hvIHJldGlyZWQgYmVmb3JlIHRoZXkgd2VyZSBzdXJyb3VuZGVkLCB3ZXJlIHRoZW4gb3ZlcndoZWxtZWQgYW5kIGRlc3Ryb3llZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhlIGJhdHRsZSBIYW5uaWJhbCBwcmFjdGljZWQgYSBkb3VibGUgc3RyYXRlZ3kuIEluIHRoZSBmaXJzdCBwbGFjZSwgaGUgdG9vayBhZHZhbnRhZ2Ugb2YgdGhlIGdyb3VuZCB0byBwdXQgdGhlIHdpbmQgYXQgaGlzIGJhY2suIFRoaXMgd2luZCBjYW1lIGRvd24gbGlrZSBhIGZpZXJ5IGh1cnJpY2FuZSwgYW5kIHJhaXNlZCBhIGh1Z2UgY2xvdWQgb2YgZHVzdCBmcm9tIHRoZSBleHBvc2VkIGFuZCBzYW5keSBwbGFpbnMgYW5kIGRyb3ZlIGl0IG92ZXIgdGhlIENhcnRoYWdpbmlhbiBsaW5lcyBoYXJkIGludG8gdGhlIGZhY2VzIG9mIHRoZSBSb21hbnMsIHdobyB0dXJuZWQgYXdheSB0byBhdm9pZCBpdCwgYW5kIHNvIGZlbGwgaW50byBjb25mdXNpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZWNvbmQgcGxhY2UsIGhlIGZvcm1lZCBoaXMgdHJvb3BzIGFzIGZvbGxvd3M6IHRoZSBzdHVyZGllc3QgYW5kIG1vc3Qgd2FybGlrZSBwYXJ0IG9mIGhpcyBmb3JjZSBoZSBzdGF0aW9uZWQgb24gZWl0aGVyIHNpZGUgb2YgdGhlIGNlbnRyZSwgYW5kIG1hbm5lZCB0aGUgY2VudHJlIGl0c2VsZiB3aXRoIGhpcyBwb29yZXN0IHNvbGRpZXJzLCBpbnRlbmRpbmcgdG8gdXNlIHRoaXMgYXMgYSB3ZWRnZSBqdXR0aW5nIG91dCBmYXIgaW4gYWR2YW5jZSBvZiB0aGUgcmVzdCBvZiBoaXMgbGluZS4gQnV0IG9yZGVycyB3ZXJlIGdpdmVuIHRvIHRoZSBwaWNrZWQgdHJvb3BzLCB3aGVuIHRoZSBSb21hbnMgc2hvdWxkIGhhdmUgY3V0IHRoZSB0cm9vcHMgaW4gdGhlIGNlbnRyZSB0byBwaWVjZXMsIHB1cnN1ZWQgdGhlbSBob3RseSBhcyB0aGV5IHJldHJlYXRlZCBhbmQgZm9ybWVkIGEgZGVlcCBob2xsb3csIGFuZCBzbyBnb3Qgd2l0aGluIHRoZWlyIGVuZW15J3MgbGluZSBvZiBiYXR0bGUs4oCUdGhlbiB0byB0dXJuIHNoYXJwbHkgZnJvbSBlaXRoZXIgc2lkZSwgc21pdGUgdGhlbSBvbiB0aGUgZmxhbmtzLCBhbmQgZW52ZWxvcCB0aGVtIGJ5IGNsb3NpbmcgaW4gdXBvbiB0aGVpciByZWFyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCB3YXMgdGhpcyB3aGljaCBzZWVtcyB0byBoYXZlIHByb2R1Y2VkIHRpbWUgZ3JlYXRlc3Qgc2xhdWdodGVyLiBGb3IgdGhlIGNlbnRyZSBnYXZlIHdheSBhbmQgd2FzIGZvbGxvd2VkIGJ5IHRoZSBSb21hbnMgaW4gcHVyc3VpdCwgSGFubmliYWwncyBsaW5lIG9mIGJhdHRsZSB0aHVzIGNoYW5naW5nIGl0cyBzaGFwZSBpbnRvIHRoYXQgb2YgYSBjcmVzY2VudDsgYW5kIHRoZSBjb21tYW5kZXJzIG9mIHRoZSBwaWNrZWQgdHJvb3BzIG9uIGhpcyB3aW5ncyB3aGVlbGVkIHRoZW0gc3dpZnRseSB0byBsZWZ0IGFuZCByaWdodCBhbmQgZmVsbCB1cG9uIHRoZSBleHBvc2VkIHNpZGVzIG9mIHRoZWlyIGVuZW15LCBhbGwgb2Ygd2hvbSwgZXhjZXB0IHRob3NlIHdobyByZXRpcmVkIGJlZm9yZSB0aGV5IHdlcmUgc3Vycm91bmRlZCwgd2VyZSB0aGVuIG92ZXJ3aGVsbWVkIGFuZCBkZXN0cm95ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIGZ1cnRoZXIsIHRoYXQgYSBzdHJhbmdlIGNhbGFtaXR5IGJlZmVsbCB0aGUgUm9tYW4gY2F2YWxyeSBhbHNvLiBUaGUgaG9yc2Ugb2YgUGF1bHVzLCBhcyBpdCBhcHBlYXJzLCB3YXMgd291bmRlZCBhbmQgdGhyZXcgaGlzIHJpZGVyIG9mZiwgYW5kIG9uZSBhZnRlciBhbm90aGVyIG9mIGhpcyBhdHRlbmRhbnRzIGRpc21vdW50ZWQgYW5kIHNvdWdodCB0byBkZWZlbmQgdGhlIGNvbnN1bCBvbiBmb290LiBXaGVuIHRoZSBob3JzZW1lbiBzYXcgdGhpcywgc3VwcG9zaW5nIHRoYXQgYSBnZW5lcmFsIG9yZGVyIGhhZCBiZWVuIGdpdmVuLCB0aGV5IGFsbCBkaXNtb3VudGVkIGFuZCBlbmdhZ2VkIHRoZSBlbmVteSBvbiBmb290LiBPbiBzZWVpbmcgdGhpcywgSGFubmliYWwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGlzIG1vcmUgdG8gbXkgd2lzaCB0aGFuIGlmIHRoZXkgaGFkIGJlZW4gaGFuZGVkIG92ZXIgdG8gbWUgaW4gZmV0dGVycy48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIiBsYW5nPSJsYSI+UXVhbSBtYWxsZW0gdmluY3RvcyBtaWhpIHRyYWRlcmV0LjwvcT4gCiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjQ5IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGlpLiA0OS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc3VjaCBwYXJ0aWN1bGFycyBhcyB0aGVzZSBtYXkgYmUgZm91bmQgaW4gdGhlIGRldGFpbGVkIGhpc3RvcmllcyBvZiB0aGUgd2FyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQsIGZ1cnRoZXIsIHRoYXQgYSBzdHJhbmdlIGNhbGFtaXR5IGJlZmVsbCB0aGUgUm9tYW4gY2F2YWxyeSBhbHNvLiBUaGUgaG9yc2Ugb2YgUGF1bHVzLCBhcyBpdCBhcHBlYXJzLCB3YXMgd291bmRlZCBhbmQgdGhyZXcgaGlzIHJpZGVyIG9mZiwgYW5kIG9uZSBhZnRlciBhbm90aGVyIG9mIGhpcyBhdHRlbmRhbnRzIGRpc21vdW50ZWQgYW5kIHNvdWdodCB0byBkZWZlbmQgdGhlIGNvbnN1bCBvbiBmb290LiBXaGVuIHRoZSBob3JzZW1lbiBzYXcgdGhpcywgc3VwcG9zaW5nIHRoYXQgYSBnZW5lcmFsIG9yZGVyIGhhZCBiZWVuIGdpdmVuLCB0aGV5IGFsbCBkaXNtb3VudGVkIGFuZCBlbmdhZ2VkIHRoZSBlbmVteSBvbiBmb290LiBPbiBzZWVpbmcgdGhpcywgSGFubmliYWwgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgaXMgbW9yZSB0byBteSB3aXNoIHRoYW4gaWYgdGhleSBoYWQgYmVlbiBoYW5kZWQgb3ZlciB0byBtZSBpbiBmZXR0ZXJzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIiBsYW5nPSJsYSI+UXVhbSBtYWxsZW0gdmluY3RvcyBtaWhpIHRyYWRlcmV0LjwvcT4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjIuNDkiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDQ5LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIiBsYW5nPSJsYSI+UXVhbSBtYWxsZW0gdmluY3RvcyBtaWhpIHRyYWRlcmV0LjwvcT4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjIuNDkiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDQ5LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzdWNoIHBhcnRpY3VsYXJzIGFzIHRoZXNlIG1heSBiZSBmb3VuZCBpbiB0aGUgZGV0YWlsZWQgaGlzdG9yaWVzIG9mIHRoZSB3YXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgZm9yIHRoZSBjb25zdWxzLCBWYXJybyBnYWxsb3BlZCBvZmYgd2l0aCBhIGZldyBmb2xsb3dlcnMgdG8gdGhlIGNpdHkgb2YgVmVudXNpYSwgYnV0IFBhdWx1cywgY2F1Z2h0IGluIHRoZSBkZWVwIHN1cmdlcyBvZiB0aGF0IHBhbmljIGZsaWdodCBhbmQgY292ZXJlZCB3aXRoIG1hbnkgbWlzc2lsZXMgd2hpY2ggaHVuZyBpbiBoaXMgd291bmRzLCB3ZWlnaGVkIGRvd24gaW4gYm9keSBhbmQgc3Bpcml0IGJ5IHNvIHZhc3QgYSBtaXNmb3J0dW5lLCBzYXQgZG93biwgbGVhbmluZyBhZ2FpbnN0IGEgc3RvbmUsIGFuZCB3YWl0aW5nIGZvciBhbiBlbmVteSB0byBkaXNwYXRjaCBoaW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGhlYWQgYW5kIGZhY2Ugd2VyZSBzbyBwcm9mdXNlbHkgc21lYXJlZCB3aXRoIGJsb29kIHRoYXQgZmV3IGNvdWxkIHJlY29nbml6ZSBoaW07IGV2ZW4gaGlzIGZyaWVuZHMgYW5kIHJldGFpbmVycyBwYXNzZWQgaGltIGJ5IHdpdGhvdXQga25vd2luZyBoaW0uIE9ubHkgQ29ybmVsaXVzIExlbnR1bHVzLCBhIHlvdW5nIG1hbiBvZiB0aGUgcGF0cmljaWFuIG9yZGVyLCBzYXcgd2hvIGhlIHdhcywgYW5kIGxlYXBpbmcgZnJvbSBoaXMgaG9yc2UsIGxlZCBoaW0gdG8gUGF1bHVzIGFuZCBiZXNvdWdodCB0aGUgY29uc3VsIHRvIHRha2UgaGltIGFuZCBzYXZlIGhpbXNlbGYgZm9yIHRoZSBzYWtlIG9mIGhpcyBmZWxsb3ctY2l0aXplbnMsIHdobyBub3cgbW9yZSB0aGFuIGV2ZXIgbmVlZGVkIGEgYnJhdmUgY29tbWFuZGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUGF1bHVzIHJlamVjdGVkIHRoaXMgcHJheWVyLCBhbmQgZm9yY2VkIHRoZSB5b3V0aCwgYWxsIHRlYXJzLCB0byBtb3VudCBoaXMgaG9yc2UgYWdhaW4sIGFuZCB0aGVuIHJvc2UgdXAgYW5kIGNsYXNwZWQgaGlzIGhhbmQgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGVudHVsdXMsIHRlbGwgRmFiaXVzIE1heGltdXMsIGFuZCBiZSB0aHlzZWxmIGEgd2l0bmVzcyB0byB3aGF0IHRob3UgdGVsbGVzdCwgdGhhdCBQYXVsdXMgQWVtaWxpdXMgd2FzIHRydWUgdG8gaGlzIHByZWNlcHRzIHVwIHRvIHRoZSBlbmQsIGFuZCBicm9rZSBub3Qgb25lIG9mIHRoZSBhZ3JlZW1lbnRzIG1hZGUgd2l0aCBoaW0sIGJ1dCB3YXMgdmFucXVpc2hlZCBmaXJzdCBieSBWYXJybywgYW5kIHRoZW4gYnkgSGFubmliYWwuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldpdGggc3VjaCBpbmp1bmN0aW9ucywgaGUgc2VudCBMZW50dWx1cyBhd2F5LCB0aGVuIHRocmV3IGhpbXNlbGYgaW50byB0aGUgbWlkc3Qgb2YgdGhlIHNsYXVnaHRlciBhbmQgcGVyaXNoZWQuIEFuZCBpdCBpcyBzYWlkIHRoYXQgZmlmdHkgdGhvdXNhbmQgUm9tYW5zIGZlbGwgaW4gdGhhdCBiYXR0bGUsIHRoYXQgZm91ciB0aG91c2FuZCB3ZXJlIHRha2VuIGFsaXZlLCBhbmQgdGhhdCBhZnRlciB0aGUgYmF0dGxlIHRoZXJlIHdlcmUgY2FwdHVyZWQgaW4gYm90aCBjb25zdWxhciBjYW1wcyBubyBsZXNzIHRoYW4gdGVuIHRob3VzYW5kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhpcyBoZWFkIGFuZCBmYWNlIHdlcmUgc28gcHJvZnVzZWx5IHNtZWFyZWQgd2l0aCBibG9vZCB0aGF0IGZldyBjb3VsZCByZWNvZ25pemUgaGltOyBldmVuIGhpcyBmcmllbmRzIGFuZCByZXRhaW5lcnMgcGFzc2VkIGhpbSBieSB3aXRob3V0IGtub3dpbmcgaGltLiBPbmx5IENvcm5lbGl1cyBMZW50dWx1cywgYSB5b3VuZyBtYW4gb2YgdGhlIHBhdHJpY2lhbiBvcmRlciwgc2F3IHdobyBoZSB3YXMsIGFuZCBsZWFwaW5nIGZyb20gaGlzIGhvcnNlLCBsZWQgaGltIHRvIFBhdWx1cyBhbmQgYmVzb3VnaHQgdGhlIGNvbnN1bCB0byB0YWtlIGhpbSBhbmQgc2F2ZSBoaW1zZWxmIGZvciB0aGUgc2FrZSBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLCB3aG8gbm93IG1vcmUgdGhhbiBldmVyIG5lZWRlZCBhIGJyYXZlIGNvbW1hbmRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQYXVsdXMgcmVqZWN0ZWQgdGhpcyBwcmF5ZXIsIGFuZCBmb3JjZWQgdGhlIHlvdXRoLCBhbGwgdGVhcnMsIHRvIG1vdW50IGhpcyBob3JzZSBhZ2FpbiwgYW5kIHRoZW4gcm9zZSB1cCBhbmQgY2xhc3BlZCBoaXMgaGFuZCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxlbnR1bHVzLCB0ZWxsIEZhYml1cyBNYXhpbXVzLCBhbmQgYmUgdGh5c2VsZiBhIHdpdG5lc3MgdG8gd2hhdCB0aG91IHRlbGxlc3QsIHRoYXQgUGF1bHVzIEFlbWlsaXVzIHdhcyB0cnVlIHRvIGhpcyBwcmVjZXB0cyB1cCB0byB0aGUgZW5kLCBhbmQgYnJva2Ugbm90IG9uZSBvZiB0aGUgYWdyZWVtZW50cyBtYWRlIHdpdGggaGltLCBidXQgd2FzIHZhbnF1aXNoZWQgZmlyc3QgYnkgVmFycm8sIGFuZCB0aGVuIGJ5IEhhbm5pYmFsLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPldpdGggc3VjaCBpbmp1bmN0aW9ucywgaGUgc2VudCBMZW50dWx1cyBhd2F5LCB0aGVuIHRocmV3IGhpbXNlbGYgaW50byB0aGUgbWlkc3Qgb2YgdGhlIHNsYXVnaHRlciBhbmQgcGVyaXNoZWQuIEFuZCBpdCBpcyBzYWlkIHRoYXQgZmlmdHkgdGhvdXNhbmQgUm9tYW5zIGZlbGwgaW4gdGhhdCBiYXR0bGUsIHRoYXQgZm91ciB0aG91c2FuZCB3ZXJlIHRha2VuIGFsaXZlLCBhbmQgdGhhdCBhZnRlciB0aGUgYmF0dGxlIHRoZXJlIHdlcmUgY2FwdHVyZWQgaW4gYm90aCBjb25zdWxhciBjYW1wcyBubyBsZXNzIHRoYW4gdGVuIHRob3VzYW5kLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB2aWV3IG9mIHN1Y2ggYSBjb21wbGV0ZSBzdWNjZXNzLCBIYW5uaWJhbCdzIGZyaWVuZHMgdXJnZWQgaGltIHRvIGZvbGxvdyB1cCBoaXMgZ29vZCBmb3J0dW5lIGFuZCBkYXNoIGludG8gdGhlaXIgY2l0eSBvbiB0aGUgaGVlbHMgb2YgdGhlIGZseWluZyBlbmVteSwgYXNzdXJpbmcgaGltIGluIHRoYXQgY2FzZSB0aGF0IG9uIHRoZSBmaWZ0aCBkYXkgYWZ0ZXIgaGlzIHZpY3RvcnkgaGUgd291bGQgc3VwIG9uIHRoZSBDYXBpdG9sLiBJdCBpcyBub3QgZWFzeSB0byBzYXkgd2hhdCBjb25zaWRlcmF0aW9uIHR1cm5lZCBoaW0gZnJvbSB0aGlzIGNvdXJzZSwgbmF5LCBpdCB3b3VsZCByYXRoZXIgc2VlbSB0aGF0IGhpcyBldmlsIGdlbml1cywgb3Igc29tZSBkaXZpbml0eSwgaW50ZXJwb3NlZCB0byBpbnNwaXJlIGhpbSB3aXRoIHRoZSBoZXNpdGF0aW9uIGFuZCB0aW1pZGl0eSB3aGljaCBoZSBub3cgc2hvd2VkLiBXaGVyZWZvcmUsIGFzIHRoZXkgc2F5LCBCYXJjYSwgdGhlIENhcnRoYWdpbmlhbiwgc2FpZCB0byBoaW0gYW5ncmlseTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGNhbnN0IHdpbiBhIHZpY3RvcnksIGJ1dCB0aHkgdmljdG9yeSB0aG91IGNhbnN0IG5vdCB1c2UuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPlR1bSBNYWhhcmJhbDogCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm9uIG9tbmlhIG5pbWlydW0gZWlkZW0gZGkgZGVkZXJlOiB2aW5jZXJlIHNjaXMsIEhhbm5pYmFsLCB2aWN0b3JpYSB1dGkgbmVzY2lzLjwvcT4KICAgICAgICAgICAgICAgPC9mb3JlaWduPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjIuNTEiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aWkuIDUxLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGlzIHZpY3Rvcnkgd3JvdWdodCBhIGdyZWF0IGNoYW5nZSBpbiBoaXMgY2lyY3Vtc3RhbmNlcy4gQmVmb3JlIHRoZSBiYXR0bGUsIGhlIGhhZCBub3QgYSBjaXR5LCBub3QgYSB0cmFkaW5nLXBsYWNlLCBub3QgYSBzZWEtcG9ydCBpbiBJdGFseSwgYW5kIGNvdWxkIHdpdGggZGlmZmljdWx0eSBiYXJlbHkgc3VwcGx5IGhpcyBhcm15IHdpdGggcHJvdmlzaW9ucyBieSBmb3JhZ2luZywgc2luY2UgaGUgaGFkIG5vIHNlY3VyZSBiYXNlIG9mIHN1cHBsaWVzIGZvciB0aGUgd2FyLCBidXQgd2FuZGVyZWQgaGl0aGVyIGFuZCB0aGl0aGVyIHdpdGggaGlzIGFybXkgYXMgaWYgaXQgd2VyZSBhIGdyZWF0IGhvcmRlIG9mIHJvYmJlcnMuIEFmdGVyIHRoZSBiYXR0bGUsIGhvd2V2ZXIsIGhlIGJyb3VnaHQgYWxtb3N0IGFsbCBJdGFseSB1bmRlciBoaXMgc3dheS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9zdCBvZiBpdHMgcGVvcGxlcywgYW5kIHRoZSBsYXJnZXN0IG9mIHRoZW0gdG9vLCBjYW1lIG92ZXIgdG8gaGltIG9mIHRoZWlyIG93biBhY2NvcmQsIGFuZCBDYXB1YSwgd2hpY2ggaXMgdGhlIG1vc3QgY29uc2lkZXJhYmxlIGNpdHkgYWZ0ZXIgUm9tZSwgYXR0YWNoZWQgaGVyc2VsZiBmaXJtbHkgdG8gaGlzIGNhdXNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdmlldyBvZiBzdWNoIGEgY29tcGxldGUgc3VjY2VzcywgSGFubmliYWwncyBmcmllbmRzIHVyZ2VkIGhpbSB0byBmb2xsb3cgdXAgaGlzIGdvb2QgZm9ydHVuZSBhbmQgZGFzaCBpbnRvIHRoZWlyIGNpdHkgb24gdGhlIGhlZWxzIG9mIHRoZSBmbHlpbmcgZW5lbXksIGFzc3VyaW5nIGhpbSBpbiB0aGF0IGNhc2UgdGhhdCBvbiB0aGUgZmlmdGggZGF5IGFmdGVyIGhpcyB2aWN0b3J5IGhlIHdvdWxkIHN1cCBvbiB0aGUgQ2FwaXRvbC4gSXQgaXMgbm90IGVhc3kgdG8gc2F5IHdoYXQgY29uc2lkZXJhdGlvbiB0dXJuZWQgaGltIGZyb20gdGhpcyBjb3Vyc2UsIG5heSwgaXQgd291bGQgcmF0aGVyIHNlZW0gdGhhdCBoaXMgZXZpbCBnZW5pdXMsIG9yIHNvbWUgZGl2aW5pdHksIGludGVycG9zZWQgdG8gaW5zcGlyZSBoaW0gd2l0aCB0aGUgaGVzaXRhdGlvbiBhbmQgdGltaWRpdHkgd2hpY2ggaGUgbm93IHNob3dlZC4gV2hlcmVmb3JlLCBhcyB0aGV5IHNheSwgQmFyY2EsIHRoZSBDYXJ0aGFnaW5pYW4sIHNhaWQgdG8gaGltIGFuZ3JpbHk6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGNhbnN0IHdpbiBhIHZpY3RvcnksIGJ1dCB0aHkgdmljdG9yeSB0aG91IGNhbnN0IG5vdCB1c2UuPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5UdW0gTWFoYXJiYWw6IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm9uIG9tbmlhIG5pbWlydW0gZWlkZW0gZGkgZGVkZXJlOiB2aW5jZXJlIHNjaXMsIEhhbm5pYmFsLCB2aWN0b3JpYSB1dGkgbmVzY2lzLjwvcT4KICAgICAgICAgICAgICAgPC9mb3JlaWduPiAKICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyMi41MSIgdmFsaWQ9InllcyI+TGl2eSwgeHhpaS4gNTEuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5UdW0gTWFoYXJiYWw6IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Tm9uIG9tbmlhIG5pbWlydW0gZWlkZW0gZGkgZGVkZXJlOiB2aW5jZXJlIHNjaXMsIEhhbm5pYmFsLCB2aWN0b3JpYSB1dGkgbmVzY2lzLjwvcT4KICAgICAgICAgICAgICAgPC9mb3JlaWduPiAKICAgICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ob24gb21uaWEgbmltaXJ1bSBlaWRlbSBkaSBkZWRlcmU6IHZpbmNlcmUgc2NpcywgSGFubmliYWwsIHZpY3RvcmlhIHV0aSBuZXNjaXMuPC9xPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDIyLjUxIiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGlpLiA1MS48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaGlzIHZpY3Rvcnkgd3JvdWdodCBhIGdyZWF0IGNoYW5nZSBpbiBoaXMgY2lyY3Vtc3RhbmNlcy4gQmVmb3JlIHRoZSBiYXR0bGUsIGhlIGhhZCBub3QgYSBjaXR5LCBub3QgYSB0cmFkaW5nLXBsYWNlLCBub3QgYSBzZWEtcG9ydCBpbiBJdGFseSwgYW5kIGNvdWxkIHdpdGggZGlmZmljdWx0eSBiYXJlbHkgc3VwcGx5IGhpcyBhcm15IHdpdGggcHJvdmlzaW9ucyBieSBmb3JhZ2luZywgc2luY2UgaGUgaGFkIG5vIHNlY3VyZSBiYXNlIG9mIHN1cHBsaWVzIGZvciB0aGUgd2FyLCBidXQgd2FuZGVyZWQgaGl0aGVyIGFuZCB0aGl0aGVyIHdpdGggaGlzIGFybXkgYXMgaWYgaXQgd2VyZSBhIGdyZWF0IGhvcmRlIG9mIHJvYmJlcnMuIEFmdGVyIHRoZSBiYXR0bGUsIGhvd2V2ZXIsIGhlIGJyb3VnaHQgYWxtb3N0IGFsbCBJdGFseSB1bmRlciBoaXMgc3dheS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgaXRzIHBlb3BsZXMsIGFuZCB0aGUgbGFyZ2VzdCBvZiB0aGVtIHRvbywgY2FtZSBvdmVyIHRvIGhpbSBvZiB0aGVpciBvd24gYWNjb3JkLCBhbmQgQ2FwdWEsIHdoaWNoIGlzIHRoZSBtb3N0IGNvbnNpZGVyYWJsZSBjaXR5IGFmdGVyIFJvbWUsIGF0dGFjaGVkIGhlcnNlbGYgZmlybWx5IHRvIGhpcyBjYXVzZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3Qgb25seSwgdGhlbiwgZG9lcyBpdCB3b3JrIGdyZWF0IG1pc2NoaWVmLCBhcyBFdXJpcGlkZXMgc2F5cywgdG8gcHV0IGZyaWVuZHMgdG8gdGhlIHRlc3QsIGJ1dCBhbHNvIHBydWRlbnQgZ2VuZXJhbHMuIEZvciB0aGF0IHdoaWNoIHdhcyBjYWxsZWQgY293YXJkaWNlIGFuZCBzbHVnZ2lzaG5lc3MgaW4gRmFiaXVzIGJlZm9yZSB0aGUgYmF0dGxlLCBpbW1lZGlhdGVseSBhZnRlciB0aGUgYmF0dGxlIHdhcyB0aG91Z2h0IHRvIGJlIG5vIG1lcmUgaHVtYW4gY2FsY3VsYXRpb24sIG5heSwgcmF0aGVyLCBhIGRpdmluZSBhbmQgbWFydmVsbG91cyBpbnRlbGxpZ2VuY2UsIHNpbmNlIGl0IGxvb2tlZCBzbyBmYXIgaW50byB0aGUgZnV0dXJlIGFuZCBmb3JldG9sZCBhIGRpc2FzdGVyIHdoaWNoIGNvdWxkIGhhcmRseSBiZSBiZWxpZXZlZCBieSB0aG9zZSB3aG8gZXhwZXJpZW5jZWQgaXQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gaGltLCB0aGVyZWZvcmUsIFJvbWUgYXQgb25jZSBwbGFjZWQgaGVyIGxhc3QgaG9wZXM7IHRvIGhpcyB3aXNkb20gc2hlIGZsZWQgZm9yIHJlZnVnZSBhcyB0byB0ZW1wbGUgYW5kIGFsdGFyLCBiZWxpZXZpbmcgdGhhdCBpdCB3YXMgZmlyc3QgYW5kIGNoaWVmbHkgZHVlIHRvIGhpcyBwcnVkZW5jZSB0aGF0IGhlIHN0aWxsIHJlbWFpbmVkIGEgY2l0eSwgYW5kIHdhcyBub3QgdXR0ZXJseSBicm9rZW4gdXAsIGFzIGluIHRoZSB0cm91YmxvdXMgdGltZXMgb2YgdGhlIEdhbGxpYyBpbnZhc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHdobywgaW4gdGltZXMgb2YgYXBwYXJlbnQgc2VjdXJpdHksIGFwcGVhcmVkIGNhdXRpb3VzIGFuZCBpcnJlc29sdXRlLCB0aGVuLCB3aGVuIGFsbCB3ZXJlIHBsdW5nZWQgaW4gYm91bmRsZXNzIGdyaWVmIGFuZCBoZWxwbGVzcyBjb25mdXNpb24sIHdhcyB0aGUgb25seSBtYW4gdG8gd2FsayB0aGUgY2l0eSB3aXRoIGNhbG0gc3RlcCwgY29tcG9zZWQgY291bnRlbmFuY2UsIGFuZCBncmFjaW91cyBhZGRyZXNzLCBjaGVja2luZyBlZmZlbWluYXRlIGxhbWVudGF0aW9uLCBhbmQgcHJldmVudGluZyB0aG9zZSBmcm9tIGFzc2VtYmxpbmcgdG9nZXRoZXIgd2hvIHdlcmUgZWFnZXIgdG8gbWFrZSBwdWJsaWMgdGhlaXIgY29tbW9uIGNvbXBsYWludHMuIEhlIHBlcnN1YWRlZCB0aGUgc2VuYXRlIHRvIGNvbnZlbmUsIGhlYXJ0ZW5lZCB1cCB0aGUgbWFnaXN0cmF0ZXMsIGFuZCB3YXMgaGltc2VsZiB0aGUgc3RyZW5ndGggYW5kIHBvd2VyIG9mIGV2ZXJ5IG1hZ2lzdHJhY3ksIHNpbmNlIGFsbCBsb29rZWQgdG8gaGltIGZvciBndWlkYW5jZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGhpbSwgdGhlcmVmb3JlLCBSb21lIGF0IG9uY2UgcGxhY2VkIGhlciBsYXN0IGhvcGVzOyB0byBoaXMgd2lzZG9tIHNoZSBmbGVkIGZvciByZWZ1Z2UgYXMgdG8gdGVtcGxlIGFuZCBhbHRhciwgYmVsaWV2aW5nIHRoYXQgaXQgd2FzIGZpcnN0IGFuZCBjaGllZmx5IGR1ZSB0byBoaXMgcHJ1ZGVuY2UgdGhhdCBoZSBzdGlsbCByZW1haW5lZCBhIGNpdHksIGFuZCB3YXMgbm90IHV0dGVybHkgYnJva2VuIHVwLCBhcyBpbiB0aGUgdHJvdWJsb3VzIHRpbWVzIG9mIHRoZSBHYWxsaWMgaW52YXNpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSB3aG8sIGluIHRpbWVzIG9mIGFwcGFyZW50IHNlY3VyaXR5LCBhcHBlYXJlZCBjYXV0aW91cyBhbmQgaXJyZXNvbHV0ZSwgdGhlbiwgd2hlbiBhbGwgd2VyZSBwbHVuZ2VkIGluIGJvdW5kbGVzcyBncmllZiBhbmQgaGVscGxlc3MgY29uZnVzaW9uLCB3YXMgdGhlIG9ubHkgbWFuIHRvIHdhbGsgdGhlIGNpdHkgd2l0aCBjYWxtIHN0ZXAsIGNvbXBvc2VkIGNvdW50ZW5hbmNlLCBhbmQgZ3JhY2lvdXMgYWRkcmVzcywgY2hlY2tpbmcgZWZmZW1pbmF0ZSBsYW1lbnRhdGlvbiwgYW5kIHByZXZlbnRpbmcgdGhvc2UgZnJvbSBhc3NlbWJsaW5nIHRvZ2V0aGVyIHdobyB3ZXJlIGVhZ2VyIHRvIG1ha2UgcHVibGljIHRoZWlyIGNvbW1vbiBjb21wbGFpbnRzLiBIZSBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byBjb252ZW5lLCBoZWFydGVuZWQgdXAgdGhlIG1hZ2lzdHJhdGVzLCBhbmQgd2FzIGhpbXNlbGYgdGhlIHN0cmVuZ3RoIGFuZCBwb3dlciBvZiBldmVyeSBtYWdpc3RyYWN5LCBzaW5jZSBhbGwgbG9va2VkIHRvIGhpbSBmb3IgZ3VpZGFuY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoZSBwdXQgZ3VhcmRzIGF0IHRoZSBnYXRlcywgaW4gb3JkZXIgdG8ga2VlcCB0aGUgZnJpZ2h0ZW5lZCB0aHJvbmcgZnJvbSBhYmFuZG9uaW5nIHRoZSBjaXR5LCBhbmQgc2V0IGxpbWl0cyBvZiB0aW1lIGFuZCBwbGFjZSB0byB0aGUgbW91cm5pbmcgZm9yIHRoZSBkZWFkLCBvcmRlcmluZyBhbnkgd2hvIHdpc2hlZCB0byBpbmR1bGdlIGluIGxhbWVudGF0aW9uLCB0byBkbyBzbyBhdCBob21lIGZvciBhIHBlcmlvZCBvZiB0aGlydHkgZGF5czsgYWZ0ZXIgdGhhdCwgYWxsIG1vdXJuaW5nIG11c3QgY2Vhc2UgYW5kIHRoZSBjaXR5IGJlIHB1cmlmaWVkIG9mIHN1Y2ggcml0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSB0aGUgZmVzdGl2YWwgb2YgQ2VyZXMgZmVsbCB3aXRoaW4gdGhlc2UgZGF5cywgaXQgd2FzIGRlZW1lZCBiZXR0ZXIgdG8gcmVtaXQgZW50aXJlbHkgdGhlIHNhY3JpZmljZXMgYW5kIHRoZSBwcm9jZXNzaW9uLCByYXRoZXIgdGhhbiB0byBlbXBoYXNpemUgdGhlIG1hZ25pdHVkZSBvZiB0aGVpciBjYWxhbWl0eSBieSB0aGUgc21hbGwgbnVtYmVyIGFuZCB0aGUgZGVqZWN0aW9uIG9mIHRoZSBwYXJ0aWNpcGFudHMuIEZvciB0aGUgZ29kcycgZGVsaWdodCBpcyBpbiBob25vdXJzIHBhaWQgdGhlbSBieSB0aGUgZm9ydHVuYXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhbGwgdGhlIHJpdGVzIHdoaWNoIHRoZSBhdWd1cnMgYWR2b2NhdGVkIGZvciB0aGUgcHJvcGl0aWF0aW9uIG9mIHRoZSBnb2RzLCBvciB0byBhdmVydCBpbmF1c3BpY2lvdXMgb21lbnMsIHdlcmUgZHVseSBwZXJmb3JtZWQuIEFuZCBiZXNpZGVzLCBQaWN0b3IsIGEga2luc21hbiBvZiBGYWJpdXMsIHdhcyBzZW50IHRvIGNvbnN1bHQgdGhlIG9yYWNsZSBhdCBEZWxwaGk7IGFuZCB3aGVuIHR3byBvZiB0aGUgdmVzdGFsIHZpcmdpbnMgd2VyZSBmb3VuZCB0byBoYXZlIGJlZW4gY29ycnVwdGVkLCBvbmUgb2YgdGhlbSB3YXMgYnVyaWVkIGFsaXZlLCBhY2NvcmRpbmcgdG8gdGhlIGN1c3RvbSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTAuNCIgdmFsaWQ9InllcyI+TnVtYSwgeC4gNCBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoZSBvdGhlciBzbGV3IGhlcnNlbGYuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGhlIHB1dCBndWFyZHMgYXQgdGhlIGdhdGVzLCBpbiBvcmRlciB0byBrZWVwIHRoZSBmcmlnaHRlbmVkIHRocm9uZyBmcm9tIGFiYW5kb25pbmcgdGhlIGNpdHksIGFuZCBzZXQgbGltaXRzIG9mIHRpbWUgYW5kIHBsYWNlIHRvIHRoZSBtb3VybmluZyBmb3IgdGhlIGRlYWQsIG9yZGVyaW5nIGFueSB3aG8gd2lzaGVkIHRvIGluZHVsZ2UgaW4gbGFtZW50YXRpb24sIHRvIGRvIHNvIGF0IGhvbWUgZm9yIGEgcGVyaW9kIG9mIHRoaXJ0eSBkYXlzOyBhZnRlciB0aGF0LCBhbGwgbW91cm5pbmcgbXVzdCBjZWFzZSBhbmQgdGhlIGNpdHkgYmUgcHVyaWZpZWQgb2Ygc3VjaCByaXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzaW5jZSB0aGUgZmVzdGl2YWwgb2YgQ2VyZXMgZmVsbCB3aXRoaW4gdGhlc2UgZGF5cywgaXQgd2FzIGRlZW1lZCBiZXR0ZXIgdG8gcmVtaXQgZW50aXJlbHkgdGhlIHNhY3JpZmljZXMgYW5kIHRoZSBwcm9jZXNzaW9uLCByYXRoZXIgdGhhbiB0byBlbXBoYXNpemUgdGhlIG1hZ25pdHVkZSBvZiB0aGVpciBjYWxhbWl0eSBieSB0aGUgc21hbGwgbnVtYmVyIGFuZCB0aGUgZGVqZWN0aW9uIG9mIHRoZSBwYXJ0aWNpcGFudHMuIEZvciB0aGUgZ29kcycgZGVsaWdodCBpcyBpbiBob25vdXJzIHBhaWQgdGhlbSBieSB0aGUgZm9ydHVuYXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFsbCB0aGUgcml0ZXMgd2hpY2ggdGhlIGF1Z3VycyBhZHZvY2F0ZWQgZm9yIHRoZSBwcm9waXRpYXRpb24gb2YgdGhlIGdvZHMsIG9yIHRvIGF2ZXJ0IGluYXVzcGljaW91cyBvbWVucywgd2VyZSBkdWx5IHBlcmZvcm1lZC4gQW5kIGJlc2lkZXMsIFBpY3RvciwgYSBraW5zbWFuIG9mIEZhYml1cywgd2FzIHNlbnQgdG8gY29uc3VsdCB0aGUgb3JhY2xlIGF0IERlbHBoaTsgYW5kIHdoZW4gdHdvIG9mIHRoZSB2ZXN0YWwgdmlyZ2lucyB3ZXJlIGZvdW5kIHRvIGhhdmUgYmVlbiBjb3JydXB0ZWQsIG9uZSBvZiB0aGVtIHdhcyBidXJpZWQgYWxpdmUsIGFjY29yZGluZyB0byB0aGUgY3VzdG9tLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTAuNCIgdmFsaWQ9InllcyI+TnVtYSwgeC4gNCBmZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIHRoZSBvdGhlciBzbGV3IGhlcnNlbGYuCgkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTAuNCIgdmFsaWQ9InllcyI+TnVtYSwgeC4gNCBmZi48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IG9mIGFsbCB3YXMgdGhlIGdlbnRsZSBkaWduaXR5IG9mIHRoZSBjaXR5IHRvIGJlIGFkbWlyZWQgaW4gdGhpcywgdGhhdCB3aGVuIFZhcnJvLCB0aGUgY29uc3VsLCBjYW1lIGJhY2sgZnJvbSBoaXMgZmxpZ2h0LCBhcyBvbmUgd291bGQgY29tZSBiYWNrIGZyb20gYSBtb3N0IGlsbC1zdGFycmVkIGFuZCBkaXNncmFjZWZ1bCBleHBlcmllbmNlLCBpbiBodW1pbGl0eSBhbmQgZGVqZWN0aW9uLCB0aGUgc2VuYXRlIGFuZCB0aGUgd2hvbGUgcGVvcGxlIG1ldCBoaW0gYXQgdGhlIGdhdGVzIHdpdGggYSB3ZWxjb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbWFnaXN0cmF0ZXMgYW5kIHRoZSBjaGllZiBtZW4gb2YgdGhlIHNlbmF0ZSwgb2Ygd2hvbSBGYWJpdXMgd2FzIG9uZSwgcHJhaXNlZCBoaW0sIGFzIHNvb24gYXMgcXVpZXQgd2FzIHJlc3RvcmVkLCBiZWNhdXNlIGhlIGhhZCBub3QgZGVzcGFpcmVkIG9mIHRoZSBjaXR5IGFmdGVyIHNvIGdyZWF0IGEgbWlzZm9ydHVuZSwgYnV0IHdhcyBhdCBoYW5kIHRvIGFzc3VtZSB0aGUgcmVpbnMgb2YgZ292ZXJubWVudCwgYW5kIHRvIGVtcGxveSB0aGUgbGF3cyBhbmQgaGlzIGZlbGxvdy1jaXRpemVucyBpbiBhY2NvbXBsaXNoaW5nIHRoZSBzYWx2YXRpb24gd2hpY2ggbGF5IHdpdGhpbiB0aGVpciBwb3dlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IG9mIGFsbCB3YXMgdGhlIGdlbnRsZSBkaWduaXR5IG9mIHRoZSBjaXR5IHRvIGJlIGFkbWlyZWQgaW4gdGhpcywgdGhhdCB3aGVuIFZhcnJvLCB0aGUgY29uc3VsLCBjYW1lIGJhY2sgZnJvbSBoaXMgZmxpZ2h0LCBhcyBvbmUgd291bGQgY29tZSBiYWNrIGZyb20gYSBtb3N0IGlsbC1zdGFycmVkIGFuZCBkaXNncmFjZWZ1bCBleHBlcmllbmNlLCBpbiBodW1pbGl0eSBhbmQgZGVqZWN0aW9uLCB0aGUgc2VuYXRlIGFuZCB0aGUgd2hvbGUgcGVvcGxlIG1ldCBoaW0gYXQgdGhlIGdhdGVzIHdpdGggYSB3ZWxjb21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBtYWdpc3RyYXRlcyBhbmQgdGhlIGNoaWVmIG1lbiBvZiB0aGUgc2VuYXRlLCBvZiB3aG9tIEZhYml1cyB3YXMgb25lLCBwcmFpc2VkIGhpbSwgYXMgc29vbiBhcyBxdWlldCB3YXMgcmVzdG9yZWQsIGJlY2F1c2UgaGUgaGFkIG5vdCBkZXNwYWlyZWQgb2YgdGhlIGNpdHkgYWZ0ZXIgc28gZ3JlYXQgYSBtaXNmb3J0dW5lLCBidXQgd2FzIGF0IGhhbmQgdG8gYXNzdW1lIHRoZSByZWlucyBvZiBnb3Zlcm5tZW50LCBhbmQgdG8gZW1wbG95IHRoZSBsYXdzIGFuZCBoaXMgZmVsbG93LWNpdGl6ZW5zIGluIGFjY29tcGxpc2hpbmcgdGhlIHNhbHZhdGlvbiB3aGljaCBsYXkgd2l0aGluIHRoZWlyIHBvd2VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZXkgbGVhcm5lZCB0aGF0IEhhbm5pYmFsLCBhZnRlciB0aGUgYmF0dGxlLCBoYWQgdHVybmVkIGFzaWRlIGludG8gdGhlIG90aGVyIHBhcnRzIG9mIEl0YWx5LCB0aGV5IHBsdWNrZWQgdXAgY291cmFnZSBhbmQgc2VudCBvdXQgY29tbWFuZGVycyB3aXRoIGFybWllcy4gVGhlIG1vc3QgaWxsdXN0cmlvdXMgb2YgdGhlc2Ugd2VyZSBGYWJpdXMgTWF4aW11cyBhbmQgQ2xhdWRpdXMgTWFyY2VsbHVzLCBtZW4gd2hvIHdlcmUgc2ltaWxhcmx5IGFkbWlyZWQgZm9yIGRpcmVjdGx5IG9wcG9zaXRlIGNoYXJhY3RlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXR0ZXIsIGFzIGhhcyBiZWVuIHN0YXRlZCBpbiBoaXMgTGlmZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hcmMuIDEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgaS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2FzIGEgbWFuIG9mIHNwbGVuZGlkIGFuZCBpbXBldHVvdXMgYWN0aW9ucywgd2l0aCBhbiBhcm0gb2YgcmVhZHkgdmlnb3VyLCBhbmQgYnkgbmF0dXJlIGxpa2UgdGhlIG1lbiB3aG9tIEhvbWVyIGlzIHdvbnQgdG8gY2FsbCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvbmQgb2YgYmF0dGxlLDwvcT4gYW5kIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZWFnZXIgZm9yIHRoZSBmcmF5LjwvcT4gSGUgdGhlcmVmb3JlIGNvbmR1Y3RlZCBoaXMgZmlyc3QgZW5nYWdlbWVudHMgaW4gdGhlIHZlbnR1cmVzb21lIGFuZCByZWNrbGVzcyBzdHlsZSBvZiB3YXJmYXJlIHdoaWNoIG1ldCB0aGUgZGFyaW5nIG9mIHN1Y2ggYSBtYW4gYXMgSGFubmliYWwgd2l0aCBhbiBlcXVhbCBkYXJpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cywgb24gdGhlIGNvbnRyYXJ5LCBjbHVuZyB0byBoaXMgZmlyc3QgYW5kIGZhbW91cyBjb252aWN0aW9ucywgYW5kIGxvb2tlZCB0byBzZWUgSGFubmliYWwsIGlmIG9ubHkgbm8gb25lIGZvdWdodCB3aXRoIGhpbSBvciBoYXJhc3NlZCBoaW0sIGJlY29tZSBoaXMgb3duIHdvcnN0IGVuZW15LCB3ZWFyIGhpbXNlbGYgb3V0IGluIHRoZSB3YXIsIGFuZCBzcGVlZGlseSBsb3NlIGhpcyBoaWdoIGVmZmljaWVuY3ksIGxpa2UgYW4gYXRobGV0ZSB3aG9zZSBib2RpbHkgcG93ZXJzIGhhdmUgYmVlbiBvdmVydGF4ZWQgYW5kIGV4aGF1c3RlZC4gSXQgd2FzIGZvciB0aGVzZSByZWFzb25zLCBhcyBQb3NlaWRvbml1cyBzYXlzLCB0aGF0IHRoZSBSb21hbnMgY2FsbGVkIEZhYml1cyB0aGVpciBidWNrbGVyLCBhbmQgTWFyY2VsbHVzIHRoZWlyIHN3b3JkLCBhbmQgdGhhdCB0aGUgbWluZ2xpbmcgb2YgdGhlIGZpcm0gc3RlYWRmYXN0bmVzcyBvZiB0aGUgb25lIHdpdGggdGhlIHZlcnNhdGlsaXR5IG9mIHRoZSBvdGhlciBwcm92ZWQgdGhlIHNhbHZhdGlvbiBvZiBSb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CeSBoaXMgZnJlcXVlbnQgZW5jb3VudGVycyB3aXRoIE1hcmNlbGx1cywgd2hvc2UgY291cnNlIHdhcyBsaWtlIHRoYXQgb2YgYSBzd2lmdGx5LWZsb3dpbmcgcml2ZXIsIEhhbm5pYmFsIHNhdyBoaXMgZm9yY2VzIHNoYWtlbiBhbmQgc3dlcHQgYXdheTsgd2hpbGUgYnkgRmFiaXVzLCB3aG9zZSBjb3Vyc2Ugd2FzIHNsb3csIG5vaXNlbGVzcywgYW5kIHVuY2Vhc2luZyBpbiBpdHMgc3RlYWx0aHkgaG9zdGlsaXR5LCB0aGV5IHdlcmUgaW1wZXJjZXB0aWJseSB3b3JuIGF3YXkgYW5kIGNvbnN1bWVkLiBBbmQgZmluYWxseSBoZSB3YXMgYnJvdWdodCB0byBzdWNoIGEgcGFzcyB0aGF0IGhlIHdhcyB3b3JuIG91dCB3aXRoIGZpZ2h0aW5nIE1hcmNlbGx1cywgYW5kIGFmcmFpZCBvZiBGYWJpdXMgd2hlbiBub3QgZmlnaHRpbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGV5IGxlYXJuZWQgdGhhdCBIYW5uaWJhbCwgYWZ0ZXIgdGhlIGJhdHRsZSwgaGFkIHR1cm5lZCBhc2lkZSBpbnRvIHRoZSBvdGhlciBwYXJ0cyBvZiBJdGFseSwgdGhleSBwbHVja2VkIHVwIGNvdXJhZ2UgYW5kIHNlbnQgb3V0IGNvbW1hbmRlcnMgd2l0aCBhcm1pZXMuIFRoZSBtb3N0IGlsbHVzdHJpb3VzIG9mIHRoZXNlIHdlcmUgRmFiaXVzIE1heGltdXMgYW5kIENsYXVkaXVzIE1hcmNlbGx1cywgbWVuIHdobyB3ZXJlIHNpbWlsYXJseSBhZG1pcmVkIGZvciBkaXJlY3RseSBvcHBvc2l0ZSBjaGFyYWN0ZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsYXR0ZXIsIGFzIGhhcyBiZWVuIHN0YXRlZCBpbiBoaXMgTGlmZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAxIiB2YWxpZD0ieWVzIj5DaGFwdGVyIGkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHdhcyBhIG1hbiBvZiBzcGxlbmRpZCBhbmQgaW1wZXR1b3VzIGFjdGlvbnMsIHdpdGggYW4gYXJtIG9mIHJlYWR5IHZpZ291ciwgYW5kIGJ5IG5hdHVyZSBsaWtlIHRoZSBtZW4gd2hvbSBIb21lciBpcyB3b250IHRvIGNhbGwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAxIiB2YWxpZD0ieWVzIj5DaGFwdGVyIGkuPC9iaWJsPgogICAgICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvbmQgb2YgYmF0dGxlLDwvcT4gYW5kIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5lYWdlciBmb3IgdGhlIGZyYXkuPC9xPiBIZSB0aGVyZWZvcmUgY29uZHVjdGVkIGhpcyBmaXJzdCBlbmdhZ2VtZW50cyBpbiB0aGUgdmVudHVyZXNvbWUgYW5kIHJlY2tsZXNzIHN0eWxlIG9mIHdhcmZhcmUgd2hpY2ggbWV0IHRoZSBkYXJpbmcgb2Ygc3VjaCBhIG1hbiBhcyBIYW5uaWJhbCB3aXRoIGFuIGVxdWFsIGRhcmluZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cywgb24gdGhlIGNvbnRyYXJ5LCBjbHVuZyB0byBoaXMgZmlyc3QgYW5kIGZhbW91cyBjb252aWN0aW9ucywgYW5kIGxvb2tlZCB0byBzZWUgSGFubmliYWwsIGlmIG9ubHkgbm8gb25lIGZvdWdodCB3aXRoIGhpbSBvciBoYXJhc3NlZCBoaW0sIGJlY29tZSBoaXMgb3duIHdvcnN0IGVuZW15LCB3ZWFyIGhpbXNlbGYgb3V0IGluIHRoZSB3YXIsIGFuZCBzcGVlZGlseSBsb3NlIGhpcyBoaWdoIGVmZmljaWVuY3ksIGxpa2UgYW4gYXRobGV0ZSB3aG9zZSBib2RpbHkgcG93ZXJzIGhhdmUgYmVlbiBvdmVydGF4ZWQgYW5kIGV4aGF1c3RlZC4gSXQgd2FzIGZvciB0aGVzZSByZWFzb25zLCBhcyBQb3NlaWRvbml1cyBzYXlzLCB0aGF0IHRoZSBSb21hbnMgY2FsbGVkIEZhYml1cyB0aGVpciBidWNrbGVyLCBhbmQgTWFyY2VsbHVzIHRoZWlyIHN3b3JkLCBhbmQgdGhhdCB0aGUgbWluZ2xpbmcgb2YgdGhlIGZpcm0gc3RlYWRmYXN0bmVzcyBvZiB0aGUgb25lIHdpdGggdGhlIHZlcnNhdGlsaXR5IG9mIHRoZSBvdGhlciBwcm92ZWQgdGhlIHNhbHZhdGlvbiBvZiBSb21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ5IGhpcyBmcmVxdWVudCBlbmNvdW50ZXJzIHdpdGggTWFyY2VsbHVzLCB3aG9zZSBjb3Vyc2Ugd2FzIGxpa2UgdGhhdCBvZiBhIHN3aWZ0bHktZmxvd2luZyByaXZlciwgSGFubmliYWwgc2F3IGhpcyBmb3JjZXMgc2hha2VuIGFuZCBzd2VwdCBhd2F5OyB3aGlsZSBieSBGYWJpdXMsIHdob3NlIGNvdXJzZSB3YXMgc2xvdywgbm9pc2VsZXNzLCBhbmQgdW5jZWFzaW5nIGluIGl0cyBzdGVhbHRoeSBob3N0aWxpdHksIHRoZXkgd2VyZSBpbXBlcmNlcHRpYmx5IHdvcm4gYXdheSBhbmQgY29uc3VtZWQuIEFuZCBmaW5hbGx5IGhlIHdhcyBicm91Z2h0IHRvIHN1Y2ggYSBwYXNzIHRoYXQgaGUgd2FzIHdvcm4gb3V0IHdpdGggZmlnaHRpbmcgTWFyY2VsbHVzLCBhbmQgYWZyYWlkIG9mIEZhYml1cyB3aGVuIG5vdCBmaWdodGluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGl0IHdhcyB3aXRoIHRoZXNlIHR3byBtZW4gdGhhdCBoZSBmb3VnaHQgYWxtb3N0IGFsbCB0aGUgdGltZSwgYXMgdGhleSBoZWxkIHRoZSBvZmZpY2VzIG9mIHByYWV0b3IsIHByby1jb25zdWwsIG9yIGNvbnN1bDsgYW5kIGVhY2ggb2YgdGhlbSB3YXMgY29uc3VsIGZpdmUgdGltZXMuIEhvd2V2ZXIsIHdoZW4gTWFyY2VsbHVzIHdhcyBzZXJ2aW5nIGFzIGNvbnN1bCBmb3IgdGhlIGZpZnRoIHRpbWUsIEhhbm5pYmFsIGxlZCBoaW0gaW50byBhbiBhbWJ1c2ggYW5kIHNsZXcgaGltPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gTHVjYW5pYSwgMjA4IEIuQy4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyYy4gMjkiIHZhbGlkPSJ5ZXMiPk1hcmNlbGx1cywgeHhpeC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT47IGJ1dCBoZSBoYWQgbm8gc3VjY2VzcyBhZ2FpbnN0IEZhYml1cywgYWx0aG91Z2ggaGUgZnJlcXVlbnRseSBicm91Z2h0IGFsbCBzb3J0cyBvZiBkZWNlaXRmdWwgdGVzdHMgdG8gYmVhciB1cG9uIGhpbS4gT25jZSwgaXQgaXMgdHJ1ZSwgaGUgZGlkIGRlY2VpdmUgdGhlIG1hbiwgYW5kIGNhbWUgbmVhciBnaXZpbmcgaGltIGEgZGlzYXN0cm91cyBvdmVydGhyb3cuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGNvbXBvc2VkIGFuZCBzZW50IHRvIEZhYml1cyBsZXR0ZXJzIHB1cnBvcnRpbmcgdG8gY29tZSBmcm9tIHRoZSBjaGllZiBtZW4gb2YgTWV0YXBvbnR1bSwgYXNzdXJpbmcgaGltIHRoYXQgdGhlaXIgY2l0eSB3b3VsZCBiZSBzdXJyZW5kZXJlZCB0byBoaW0gaWYgaGUgc2hvdWxkIGNvbWUgdGhlcmUsIGFuZCB0aGF0IHRob3NlIHdobyB3ZXJlIGNvbnRyaXZpbmcgdGhlIHN1cnJlbmRlciBvbmx5IHdhaXRlZCBmb3IgaGltIHRvIGNvbWUgYW5kIHNob3cgaGltc2VsZiBpbiB0aGUgbmVpZ2hib3VyaG9vZC4gVGhlc2UgbGV0dGVycyBtb3ZlZCBGYWJpdXMgdG8gYWN0aW9uLCBhbmQgaGUgcHJvcG9zZWQgdG8gdGFrZSBhIHBhcnQgb2YgaGlzIGZvcmNlIGFuZCBzZXQgb3V0IGJ5IG5pZ2h0LiBUaGVuIGhlIGdvdCB1bmZhdm91cmFibGUgYXVzcGljZXMgYW5kIHdhcyB0dXJuZWQgZnJvbSBoaXMgcHVycG9zZSBieSB0aGVtLCBhbmQgaW4gYSBsaXR0bGUgd2hpbGUgaXQgd2FzIGRpc2NvdmVyZWQgdGhhdCB0aGUgbGV0dGVycyB3aGljaCBoYWQgY29tZSB0byBoaW0gd2VyZSBjdW5uaW5nIGZvcmdlcmllcyBieSBIYW5uaWJhbCwgd2hvIGhhZCBsYWlkIGFuIGFtYnVzaCBmb3IgaGltIG5lYXIgdGhlIGNpdHkuIFRoaXMgZXNjYXBlLCBob3dldmVyLCBtYXkgYmUgbGFpZCB0byB0aGUgZmF2b3VyIG9mIHRoZSBnb2RzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgd2l0aCB0aGVzZSB0d28gbWVuIHRoYXQgaGUgZm91Z2h0IGFsbW9zdCBhbGwgdGhlIHRpbWUsIGFzIHRoZXkgaGVsZCB0aGUgb2ZmaWNlcyBvZiBwcmFldG9yLCBwcm8tY29uc3VsLCBvciBjb25zdWw7IGFuZCBlYWNoIG9mIHRoZW0gd2FzIGNvbnN1bCBmaXZlIHRpbWVzLiBIb3dldmVyLCB3aGVuIE1hcmNlbGx1cyB3YXMgc2VydmluZyBhcyBjb25zdWwgZm9yIHRoZSBmaWZ0aCB0aW1lLCBIYW5uaWJhbCBsZWQgaGltIGludG8gYW4gYW1idXNoIGFuZCBzbGV3IGhpbTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gTHVjYW5pYSwgMjA4IEIuQy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAyOSIgdmFsaWQ9InllcyI+TWFyY2VsbHVzLCB4eGl4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPjsgYnV0IGhlIGhhZCBubyBzdWNjZXNzIGFnYWluc3QgRmFiaXVzLCBhbHRob3VnaCBoZSBmcmVxdWVudGx5IGJyb3VnaHQgYWxsIHNvcnRzIG9mIGRlY2VpdGZ1bCB0ZXN0cyB0byBiZWFyIHVwb24gaGltLiBPbmNlLCBpdCBpcyB0cnVlLCBoZSBkaWQgZGVjZWl2ZSB0aGUgbWFuLCBhbmQgY2FtZSBuZWFyIGdpdmluZyBoaW0gYSBkaXNhc3Ryb3VzIG92ZXJ0aHJvdy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXJjLiAyOSIgdmFsaWQ9InllcyI+TWFyY2VsbHVzLCB4eGl4LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGNvbXBvc2VkIGFuZCBzZW50IHRvIEZhYml1cyBsZXR0ZXJzIHB1cnBvcnRpbmcgdG8gY29tZSBmcm9tIHRoZSBjaGllZiBtZW4gb2YgTWV0YXBvbnR1bSwgYXNzdXJpbmcgaGltIHRoYXQgdGhlaXIgY2l0eSB3b3VsZCBiZSBzdXJyZW5kZXJlZCB0byBoaW0gaWYgaGUgc2hvdWxkIGNvbWUgdGhlcmUsIGFuZCB0aGF0IHRob3NlIHdobyB3ZXJlIGNvbnRyaXZpbmcgdGhlIHN1cnJlbmRlciBvbmx5IHdhaXRlZCBmb3IgaGltIHRvIGNvbWUgYW5kIHNob3cgaGltc2VsZiBpbiB0aGUgbmVpZ2hib3VyaG9vZC4gVGhlc2UgbGV0dGVycyBtb3ZlZCBGYWJpdXMgdG8gYWN0aW9uLCBhbmQgaGUgcHJvcG9zZWQgdG8gdGFrZSBhIHBhcnQgb2YgaGlzIGZvcmNlIGFuZCBzZXQgb3V0IGJ5IG5pZ2h0LiBUaGVuIGhlIGdvdCB1bmZhdm91cmFibGUgYXVzcGljZXMgYW5kIHdhcyB0dXJuZWQgZnJvbSBoaXMgcHVycG9zZSBieSB0aGVtLCBhbmQgaW4gYSBsaXR0bGUgd2hpbGUgaXQgd2FzIGRpc2NvdmVyZWQgdGhhdCB0aGUgbGV0dGVycyB3aGljaCBoYWQgY29tZSB0byBoaW0gd2VyZSBjdW5uaW5nIGZvcmdlcmllcyBieSBIYW5uaWJhbCwgd2hvIGhhZCBsYWlkIGFuIGFtYnVzaCBmb3IgaGltIG5lYXIgdGhlIGNpdHkuIFRoaXMgZXNjYXBlLCBob3dldmVyLCBtYXkgYmUgbGFpZCB0byB0aGUgZmF2b3VyIG9mIHRoZSBnb2RzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GYWJpdXMgdGhvdWdodCB0aGF0IHRoZSByZXZvbHRzIG9mIHRoZSBjaXRpZXMgYW5kIHRoZSBhZ2l0YXRpb25zIG9mIHRoZSBhbGxpZXMgb3VnaHQgdG8gYmUgcmVzdHJhaW5lZCBhbmQgZGlzY291bnRlbmFuY2VkIHJhdGhlciBieSBtaWxkIGFuZCBnZW50bGUgbWVhc3VyZXMsIHdpdGhvdXQgdGVzdGluZyBldmVyeSBzdXNwaWNpb24gYW5kIHNob3dpbmcgaGFyc2huZXNzIGluIGV2ZXJ5IGNhc2UgdG8gdGhlIHN1c3BlY3RlZC4gSXQgaXMgc2FpZCwgZm9yIGluc3RhbmNlLCB0aGF0IHdoZW4gaGUgbGVhcm5lZCBhYm91dCBhIE1hcnNpYW4gc29sZGllciwgZW1pbmVudCBhbW9uZyB0aGUgYWxsaWVzIGZvciB2YWxvdXIgYW5kIGhpZ2ggYmlydGgsIHdobyBoYWQgYmVlbiB0YWxraW5nIHdpdGggc29tZSBvZiB0aGUgc29sZGllcnMgaW4gdGhlIGNhbXAgYWJvdXQgZGVzZXJ0aW5nIHRvIHRoZSBlbmVteSwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+aGUgd2FzIG5vdCBpbmNlbnNlZCB3aXRoIGhpbSwgYnV0IGFkbWl0dGVkIGZyYW5rbHkgdGhhdCBoZSBoYWQgYmVlbiB1bmR1bHkgbmVnbGVjdGVkOyBzbyBmYXIsIGhlIHNhaWQsIHRoaXMgd2FzIHRoZSBmYXVsdCBvZiB0aGUgY29tbWFuZGVycywgd2hvIGRpc3RyaWJ1dGVkIHRoZWlyIGhvbm91cnMgYnkgZmF2b3VyIHJhdGhlciB0aGFuIGZvciB2YWxvdXIsIGJ1dCBpbiB0aGUgZnV0dXJlIGl0IHdvdWxkIGJlIHRoZSBtYW4ncyBvd24gZmF1bHQgaWYgaGUgZGlkIG5vdCBjb21lIHRvIGhpbSBhbmQgdGVsbCBoaW0gd2hlbiBoZSB3YW50ZWQgYW55dGhpbmcuIFRoZXNlIHdvcmRzIHdlcmUgZm9sbG93ZWQgYnkgdGhlIGdpZnQgb2YgYSB3YXJob3JzZSBhbmQgYnkgb3RoZXIgc2lnbmFsIHJld2FyZHMgZm9yIGJyYXZlcnksIGFuZCBmcm9tIHRoYXQgdGltZSBvbiB0aGVyZSB3YXMgbm8gbW9yZSBmYWl0aGZ1bCBhbmQgemVhbG91cyBtYW4gaW4gdGhlIHNlcnZpY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cyB0aG91Z2h0IGl0IGhhcmQgdGhhdCwgd2hlcmVhcyB0aGUgdHJhaW5lcnMgb2YgaG9yc2VzIGFuZCBkb2dzIHJlbGllZCB1cG9uIGNhcmUgYW5kIGludGltYWN5IGFuZCBmZWVkaW5nIHJhdGhlciB0aGFuIG9uIGdvYWRzIGFuZCBoZWF2eSBjb2xsYXJzIGZvciB0aGUgcmVtb3ZhbCBvZiB0aGUgYW5pbWFsJ3Mgb2JzdGluYWN5LCBhbmdlciwgYW5kIGRpc2NvbnRlbnQsIHRoZSBjb21tYW5kZXIgb2YgbWVuIHNob3VsZCBub3QgYmFzZSB0aGUgbW9zdCBvZiBoaXMgZGlzY2lwbGluZSBvbiBraW5kbmVzcyBhbmQgZ2VudGxlbmVzcywgYnV0IHNob3cgbW9yZSBoYXJzaG5lc3MgYW5kIHZpb2xlbmNlIGluIGhpcyB0cmVhdG1lbnQgb2YgdGhlbSB0aGFuIGZhcm1lcnMgaW4gdGhlaXIgdHJlYXRtZW50IG9mIHdpbGQgZmlnLXRyZWVzLCB3aWxkIHBlYXItdHJlZXMsIGFuZCB3aWxkIG9saXZlLXRyZWVzLCB3aGljaCB0aGV5IHJlY2xhaW0gYW5kIGRvbWVzdGljYXRlIHRpbGwgdGhleSBiZWFyIGx1c2Npb3VzIG9saXZlcywgcGVhcnMsIGFuZCBmaWdzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RmFiaXVzIHRob3VnaHQgdGhhdCB0aGUgcmV2b2x0cyBvZiB0aGUgY2l0aWVzIGFuZCB0aGUgYWdpdGF0aW9ucyBvZiB0aGUgYWxsaWVzIG91Z2h0IHRvIGJlIHJlc3RyYWluZWQgYW5kIGRpc2NvdW50ZW5hbmNlZCByYXRoZXIgYnkgbWlsZCBhbmQgZ2VudGxlIG1lYXN1cmVzLCB3aXRob3V0IHRlc3RpbmcgZXZlcnkgc3VzcGljaW9uIGFuZCBzaG93aW5nIGhhcnNobmVzcyBpbiBldmVyeSBjYXNlIHRvIHRoZSBzdXNwZWN0ZWQuIEl0IGlzIHNhaWQsIGZvciBpbnN0YW5jZSwgdGhhdCB3aGVuIGhlIGxlYXJuZWQgYWJvdXQgYSBNYXJzaWFuIHNvbGRpZXIsIGVtaW5lbnQgYW1vbmcgdGhlIGFsbGllcyBmb3IgdmFsb3VyIGFuZCBoaWdoIGJpcnRoLCB3aG8gaGFkIGJlZW4gdGFsa2luZyB3aXRoIHNvbWUgb2YgdGhlIHNvbGRpZXJzIGluIHRoZSBjYW1wIGFib3V0IGRlc2VydGluZyB0byB0aGUgZW5lbXksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIHdhcyBub3QgaW5jZW5zZWQgd2l0aCBoaW0sIGJ1dCBhZG1pdHRlZCBmcmFua2x5IHRoYXQgaGUgaGFkIGJlZW4gdW5kdWx5IG5lZ2xlY3RlZDsgc28gZmFyLCBoZSBzYWlkLCB0aGlzIHdhcyB0aGUgZmF1bHQgb2YgdGhlIGNvbW1hbmRlcnMsIHdobyBkaXN0cmlidXRlZCB0aGVpciBob25vdXJzIGJ5IGZhdm91ciByYXRoZXIgdGhhbiBmb3IgdmFsb3VyLCBidXQgaW4gdGhlIGZ1dHVyZSBpdCB3b3VsZCBiZSB0aGUgbWFuJ3Mgb3duIGZhdWx0IGlmIGhlIGRpZCBub3QgY29tZSB0byBoaW0gYW5kIHRlbGwgaGltIHdoZW4gaGUgd2FudGVkIGFueXRoaW5nLiBUaGVzZSB3b3JkcyB3ZXJlIGZvbGxvd2VkIGJ5IHRoZSBnaWZ0IG9mIGEgd2FyaG9yc2UgYW5kIGJ5IG90aGVyIHNpZ25hbCByZXdhcmRzIGZvciBicmF2ZXJ5LCBhbmQgZnJvbSB0aGF0IHRpbWUgb24gdGhlcmUgd2FzIG5vIG1vcmUgZmFpdGhmdWwgYW5kIHplYWxvdXMgbWFuIGluIHRoZSBzZXJ2aWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cyB0aG91Z2h0IGl0IGhhcmQgdGhhdCwgd2hlcmVhcyB0aGUgdHJhaW5lcnMgb2YgaG9yc2VzIGFuZCBkb2dzIHJlbGllZCB1cG9uIGNhcmUgYW5kIGludGltYWN5IGFuZCBmZWVkaW5nIHJhdGhlciB0aGFuIG9uIGdvYWRzIGFuZCBoZWF2eSBjb2xsYXJzIGZvciB0aGUgcmVtb3ZhbCBvZiB0aGUgYW5pbWFsJ3Mgb2JzdGluYWN5LCBhbmdlciwgYW5kIGRpc2NvbnRlbnQsIHRoZSBjb21tYW5kZXIgb2YgbWVuIHNob3VsZCBub3QgYmFzZSB0aGUgbW9zdCBvZiBoaXMgZGlzY2lwbGluZSBvbiBraW5kbmVzcyBhbmQgZ2VudGxlbmVzcywgYnV0IHNob3cgbW9yZSBoYXJzaG5lc3MgYW5kIHZpb2xlbmNlIGluIGhpcyB0cmVhdG1lbnQgb2YgdGhlbSB0aGFuIGZhcm1lcnMgaW4gdGhlaXIgdHJlYXRtZW50IG9mIHdpbGQgZmlnLXRyZWVzLCB3aWxkIHBlYXItdHJlZXMsIGFuZCB3aWxkIG9saXZlLXRyZWVzLCB3aGljaCB0aGV5IHJlY2xhaW0gYW5kIGRvbWVzdGljYXRlIHRpbGwgdGhleSBiZWFyIGx1c2Npb3VzIG9saXZlcywgcGVhcnMsIGFuZCBmaWdzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiBhbm90aGVyIHNvbGRpZXIsIGEgTHVjYW5pYW4sIHdhcyByZXBvcnRlZCBieSBoaXMgb2ZmaWNlcnMgYXMgZnJlcXVlbnRseSBxdWl0dGluZyBoaXMgcG9zdCBhbmQgcm9hbWluZyBhd2F5IGZyb20gdGhlIGNhbXAsIEZhYml1cyBhc2tlZCB0aGVtIHdoYXQga2luZCBvZiBhIG1hbiB0aGV5IGtuZXcgaGltIHRvIGJlIGluIG90aGVyIHJlc3BlY3RzLiBBbGwgdGVzdGlmaWVkIHRoYXQgc3VjaCBhbm90aGVyIHNvbGRpZXIgY291bGQgbm90IGVhc2lseSBiZSBmb3VuZCwgYW5kIHJlaGVhcnNlZCBzdW5kcnkgZXhwbG9pdHMgb2YgaGlzIHdoZXJlaW4gaGUgaGFkIHNob3duIGNvbnNwaWN1b3VzIGJyYXZlcnkuIEZhYml1cyB0aGVyZWZvcmUgaW5xdWlyZWQgaW50byB0aGUgY2F1c2Ugb2YgdGhlIG1hbidzIGlycmVndWxhcml0eSwgYW5kIGRpc2NvdmVyZWQgdGhhdCBoZSB3YXMgZGVlcGx5IGluIGxvdmUgd2l0aCBhIG1haWQsIGFuZCByaXNrZWQgaGlzIGxpZmUgaW4gbG9uZyBqb3VybmV5cyBmcm9tIHRoZSBjYW1wIGV2ZXJ5IHRpbWUgaGUgdmlzaXRlZCBoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aXRob3V0IHRoZSBtYW4ncyBrbm93bGVkZ2UsIEZhYml1cyBzZW50IGFuZCBhcnJlc3RlZCB0aGUgZ2lybCBhbmQgaGlkIGhlciBpbiBoaXMgb3duIHRlbnQuIFRoZW4gaGUgY2FsbGVkIHRoZSBMdWNhbmlhbiB0byBoaW0gcHJpdmF0ZWx5IGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkl0IGlzIHdlbGwga25vd24gdGhhdCwgY29udHJhcnkgdG8gUm9tYW4gY3VzdG9tIGFuZCBsYXcsIHlvdSBvZnRlbiBwYXNzIHRoZSBuaWdodCBhd2F5IGZyb20gY2FtcDsgYnV0IGl0IGlzIGFsc28gd2VsbCBrbm93biB0aGF0IHlvdSBoYXZlIGRvbmUgZ29vZCBzZXJ2aWNlIGluIHRoZSBwYXN0LiBZb3VyIHRyYW5zZ3Jlc3Npb25zIHNoYWxsIHRoZXJlZm9yZSBiZSBhdG9uZWQgZm9yIGJ5IHlvdXIgZGVlZHMgb2YgdmFsb3VyLCBidXQgZm9yIHRoZSBmdXR1cmUgSSBzaGFsbCBwdXQgYW5vdGhlciBwZXJzb24gaW4gY2hhcmdlIG92ZXIgeW91LjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCB0byB0aGUgc29sZGllcidzIGFtYXplbWVudCwgaGUgbGVkIHRoZSBnaXJsIGZvcnRoIGFuZCBwdXQgaGVyIGluIGhpcyBoYW5kcywgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgcGVyc29uIHBsZWRnZXMgaGVyc2VsZiB0aGF0IHlvdSB3aWxsIGhlcmVhZnRlciByZW1haW4gaW4gY2FtcCB3aXRoIHVzLCBhbmQgeW91IHdpbGwgbm93IHNob3cgcGxhaW5seSB3aGV0aGVyIG9yIG5vdCB5b3UgbGVmdCB1cyBmb3Igc29tZSBvdGhlciBhbmQgYmFzZSBwdXJwb3NlLCBtYWtpbmcgdGhpcyBtYWlkIGFuZCB5b3VyIGxvdmUgZm9yIGhlciBhIG1lcmUgcHJldGV4dC48L3E+IFN1Y2ggaXMgdGhlIHN0b3J5IHdoaWNoIGlzIHRvbGQgYWJvdXQgdGhpcyBtYXR0ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGFub3RoZXIgc29sZGllciwgYSBMdWNhbmlhbiwgd2FzIHJlcG9ydGVkIGJ5IGhpcyBvZmZpY2VycyBhcyBmcmVxdWVudGx5IHF1aXR0aW5nIGhpcyBwb3N0IGFuZCByb2FtaW5nIGF3YXkgZnJvbSB0aGUgY2FtcCwgRmFiaXVzIGFza2VkIHRoZW0gd2hhdCBraW5kIG9mIGEgbWFuIHRoZXkga25ldyBoaW0gdG8gYmUgaW4gb3RoZXIgcmVzcGVjdHMuIEFsbCB0ZXN0aWZpZWQgdGhhdCBzdWNoIGFub3RoZXIgc29sZGllciBjb3VsZCBub3QgZWFzaWx5IGJlIGZvdW5kLCBhbmQgcmVoZWFyc2VkIHN1bmRyeSBleHBsb2l0cyBvZiBoaXMgd2hlcmVpbiBoZSBoYWQgc2hvd24gY29uc3BpY3VvdXMgYnJhdmVyeS4gRmFiaXVzIHRoZXJlZm9yZSBpbnF1aXJlZCBpbnRvIHRoZSBjYXVzZSBvZiB0aGUgbWFuJ3MgaXJyZWd1bGFyaXR5LCBhbmQgZGlzY292ZXJlZCB0aGF0IGhlIHdhcyBkZWVwbHkgaW4gbG92ZSB3aXRoIGEgbWFpZCwgYW5kIHJpc2tlZCBoaXMgbGlmZSBpbiBsb25nIGpvdXJuZXlzIGZyb20gdGhlIGNhbXAgZXZlcnkgdGltZSBoZSB2aXNpdGVkIGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aXRob3V0IHRoZSBtYW4ncyBrbm93bGVkZ2UsIEZhYml1cyBzZW50IGFuZCBhcnJlc3RlZCB0aGUgZ2lybCBhbmQgaGlkIGhlciBpbiBoaXMgb3duIHRlbnQuIFRoZW4gaGUgY2FsbGVkIHRoZSBMdWNhbmlhbiB0byBoaW0gcHJpdmF0ZWx5IGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgaXMgd2VsbCBrbm93biB0aGF0LCBjb250cmFyeSB0byBSb21hbiBjdXN0b20gYW5kIGxhdywgeW91IG9mdGVuIHBhc3MgdGhlIG5pZ2h0IGF3YXkgZnJvbSBjYW1wOyBidXQgaXQgaXMgYWxzbyB3ZWxsIGtub3duIHRoYXQgeW91IGhhdmUgZG9uZSBnb29kIHNlcnZpY2UgaW4gdGhlIHBhc3QuIFlvdXIgdHJhbnNncmVzc2lvbnMgc2hhbGwgdGhlcmVmb3JlIGJlIGF0b25lZCBmb3IgYnkgeW91ciBkZWVkcyBvZiB2YWxvdXIsIGJ1dCBmb3IgdGhlIGZ1dHVyZSBJIHNoYWxsIHB1dCBhbm90aGVyIHBlcnNvbiBpbiBjaGFyZ2Ugb3ZlciB5b3UuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIHRvIHRoZSBzb2xkaWVyJ3MgYW1hemVtZW50LCBoZSBsZWQgdGhlIGdpcmwgZm9ydGggYW5kIHB1dCBoZXIgaW4gaGlzIGhhbmRzLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIHBlcnNvbiBwbGVkZ2VzIGhlcnNlbGYgdGhhdCB5b3Ugd2lsbCBoZXJlYWZ0ZXIgcmVtYWluIGluIGNhbXAgd2l0aCB1cywgYW5kIHlvdSB3aWxsIG5vdyBzaG93IHBsYWlubHkgd2hldGhlciBvciBub3QgeW91IGxlZnQgdXMgZm9yIHNvbWUgb3RoZXIgYW5kIGJhc2UgcHVycG9zZSwgbWFraW5nIHRoaXMgbWFpZCBhbmQgeW91ciBsb3ZlIGZvciBoZXIgYSBtZXJlIHByZXRleHQuPC9xPiBTdWNoIGlzIHRoZSBzdG9yeSB3aGljaCBpcyB0b2xkIGFib3V0IHRoaXMgbWF0dGVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY2l0eSBvZiBUYXJlbnR1bSwgd2hpY2ggaGFkIGJlZW4gbG9zdCB0byB0aGUgUm9tYW5zIGJ5IHRyZWFjaGVyeSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yMTIgQi5DLjwvbm90ZT4gRmFiaXVzIHJlY292ZXJlZCBpbiB0aGUgZm9sbG93aW5nIG1hbm5lci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yMDkgQi5DLjwvbm90ZT4gVGhlcmUgd2FzIGEgeW91bmcgbWFuIG9mIFRhcmVudHVtIGluIGhpcyBhcm15LCBhbmQgaGUgaGFkIGEgc2lzdGVyIHdobyB3YXMgdmVyeSBmYWl0aGZ1bGx5IGFuZCBhZmZlY3Rpb25hdGVseSBkaXNwb3NlZCB0b3dhcmRzIGhpbS4gV2l0aCB0aGlzIHdvbWFuIHRoZSBjb21tYW5kZXIgb2YgdGhlIGZvcmNlcyBzZXQgYnkgSGFubmliYWwgdG8gZ3VhcmQgdGhlIGNpdHksIGEgQnJ1dHRpYW4sIHdhcyBkZWVwbHkgZW5hbW91cmVkLCBhbmQgdGhlIGNpcmN1bXN0YW5jZSBsZWQgaGVyIGJyb3RoZXIgdG8gaG9wZSB0aGF0IGhlIGNvdWxkIGFjY29tcGxpc2ggc29tZXRoaW5nIGJ5IG1lYW5zIG9mIGl0LiBIZSB0aGVyZWZvcmUgam9pbmVkIGhpcyBzaXN0ZXIgaW4gVGFyZW50dW0sIG9zdGVuc2libHkgYXMgYSBkZXNlcnRlciBmcm9tIHRoZSBSb21hbnMsIHRob3VnaCBoZSB3YXMgcmVhbGx5IHNlbnQgaW50byB0aGUgY2l0eSBieSBGYWJpdXMsIHdobyB3YXMgcHJpdnkgdG8gaGlzIHNjaGVtZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSBkYXlzIHBhc3NlZCwgYWNjb3JkaW5nbHksIGR1cmluZyB3aGljaCB0aGUgQnJ1dHRpYW4gcmVtYWluZWQgYXQgaG9tZSwgc2luY2UgdGhlIHdvbWFuIHRob3VnaHQgdGhhdCBoZXIgYW1vdXIgd2FzIHVua25vd24gdG8gaGVyIGJyb3RoZXIuIFRoZW4gaGVyIGJyb3RoZXIgaGFkIHRoZSBmb2xsb3dpbmcgd29yZHMgd2l0aCBoZXI6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3b3VsZCBoYXZlIHlvdSBrbm93IHRoYXQgYSBzdG9yeSB3YXMgdmVyeSBjdXJyZW50IG91dCB0aGVyZSBpbiB0aGUgUm9tYW4gY2FtcCB0aGF0IHlvdSBoYXZlIGludGVydmlld3Mgd2l0aCBhIG1hbiBoaWdoIGluIGF1dGhvcml0eS4gV2hvIGlzIHRoaXMgbWFuPyBGb3IgaWYgaGUgaXMsIGFzIHRoZXkgc2F5LCBhIG1hbiBvZiByZXB1dGUsIGFuZCBpbGx1c3RyaW91cyBmb3IgaGlzIHZhbG91ciwgd2FyLCB0aGF0IGNvbmZvdW5kZXIgb2YgYWxsIHRoaW5ncywgbWFrZXMgdmVyeSBsaXR0bGUgYWNjb3VudCBvZiByYWNlLiBOb3RoaW5nIGlzIGRpc2dyYWNlZnVsIGlmIGl0IGlzIGRvbmUgdW5kZXIgY29tcHVsc2lvbiwgbmF5LCB3ZSBtYXkgY291bnQgaXQgcmFyZSBnb29kIGZvcnR1bmUsIGF0IGEgdGltZSB3aGVuIHJpZ2h0IGlzIHdlYWssIHRvIGZpbmQgbWlnaHQgdmVyeSBnZW50bGUgd2l0aCB1cy48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmV1cG9uIHRoZSB3b21hbiBzZW50IGZvciBoZXIgQnJ1dHRpYW4gYW5kIG1hZGUgaGVyIGJyb3RoZXIgYWNxdWFpbnRlZCB3aXRoIGhpbS4gVGhlIEJhcmJhcmlhbidzIGNvbmZpZGVuY2Ugd2FzIHNvb24gZ2FpbmVkLCBzaW5jZSB0aGUgYnJvdGhlciBmb3N0ZXJlZCBoaXMgcGFzc2lvbiBhbmQgcGxhaW5seSBpbmR1Y2VkIHRoZSBzaXN0ZXIgdG8gYmUgbW9yZSBjb21wbGFjZW50IGFuZCBzdWJtaXNzaXZlIHRvIGhpbSB0aGFuIGJlZm9yZSwgc28gdGhhdCBpdCB3YXMgbm90IGRpZmZpY3VsdCwgdGhlIG1hbiBiZWluZyBhIGxvdmVyIGFuZCBhIG1lcmNlbmFyeSBhcyB3ZWxsLCB0byBjaGFuZ2UgaGlzIGFsbGVnaWFuY2UsIGluIGFudGljaXBhdGlvbiBvZiB0aGUgbGFyZ2UgZ2lmdHMgd2hpY2ggaXQgd2FzIHByb21pc2VkIHRoYXQgaGUgc2hvdWxkIHJlY2VpdmUgZnJvbSBGYWJpdXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNpdHkgb2YgVGFyZW50dW0sIHdoaWNoIGhhZCBiZWVuIGxvc3QgdG8gdGhlIFJvbWFucyBieSB0cmVhY2hlcnksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yMTIgQi5DLjwvbm90ZT4gRmFiaXVzIHJlY292ZXJlZCBpbiB0aGUgZm9sbG93aW5nIG1hbm5lci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwOSBCLkMuPC9ub3RlPiBUaGVyZSB3YXMgYSB5b3VuZyBtYW4gb2YgVGFyZW50dW0gaW4gaGlzIGFybXksIGFuZCBoZSBoYWQgYSBzaXN0ZXIgd2hvIHdhcyB2ZXJ5IGZhaXRoZnVsbHkgYW5kIGFmZmVjdGlvbmF0ZWx5IGRpc3Bvc2VkIHRvd2FyZHMgaGltLiBXaXRoIHRoaXMgd29tYW4gdGhlIGNvbW1hbmRlciBvZiB0aGUgZm9yY2VzIHNldCBieSBIYW5uaWJhbCB0byBndWFyZCB0aGUgY2l0eSwgYSBCcnV0dGlhbiwgd2FzIGRlZXBseSBlbmFtb3VyZWQsIGFuZCB0aGUgY2lyY3Vtc3RhbmNlIGxlZCBoZXIgYnJvdGhlciB0byBob3BlIHRoYXQgaGUgY291bGQgYWNjb21wbGlzaCBzb21ldGhpbmcgYnkgbWVhbnMgb2YgaXQuIEhlIHRoZXJlZm9yZSBqb2luZWQgaGlzIHNpc3RlciBpbiBUYXJlbnR1bSwgb3N0ZW5zaWJseSBhcyBhIGRlc2VydGVyIGZyb20gdGhlIFJvbWFucywgdGhvdWdoIGhlIHdhcyByZWFsbHkgc2VudCBpbnRvIHRoZSBjaXR5IGJ5IEZhYml1cywgd2hvIHdhcyBwcml2eSB0byBoaXMgc2NoZW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgZGF5cyBwYXNzZWQsIGFjY29yZGluZ2x5LCBkdXJpbmcgd2hpY2ggdGhlIEJydXR0aWFuIHJlbWFpbmVkIGF0IGhvbWUsIHNpbmNlIHRoZSB3b21hbiB0aG91Z2h0IHRoYXQgaGVyIGFtb3VyIHdhcyB1bmtub3duIHRvIGhlciBicm90aGVyLiBUaGVuIGhlciBicm90aGVyIGhhZCB0aGUgZm9sbG93aW5nIHdvcmRzIHdpdGggaGVyOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3b3VsZCBoYXZlIHlvdSBrbm93IHRoYXQgYSBzdG9yeSB3YXMgdmVyeSBjdXJyZW50IG91dCB0aGVyZSBpbiB0aGUgUm9tYW4gY2FtcCB0aGF0IHlvdSBoYXZlIGludGVydmlld3Mgd2l0aCBhIG1hbiBoaWdoIGluIGF1dGhvcml0eS4gV2hvIGlzIHRoaXMgbWFuPyBGb3IgaWYgaGUgaXMsIGFzIHRoZXkgc2F5LCBhIG1hbiBvZiByZXB1dGUsIGFuZCBpbGx1c3RyaW91cyBmb3IgaGlzIHZhbG91ciwgd2FyLCB0aGF0IGNvbmZvdW5kZXIgb2YgYWxsIHRoaW5ncywgbWFrZXMgdmVyeSBsaXR0bGUgYWNjb3VudCBvZiByYWNlLiBOb3RoaW5nIGlzIGRpc2dyYWNlZnVsIGlmIGl0IGlzIGRvbmUgdW5kZXIgY29tcHVsc2lvbiwgbmF5LCB3ZSBtYXkgY291bnQgaXQgcmFyZSBnb29kIGZvcnR1bmUsIGF0IGEgdGltZSB3aGVuIHJpZ2h0IGlzIHdlYWssIHRvIGZpbmQgbWlnaHQgdmVyeSBnZW50bGUgd2l0aCB1cy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJldXBvbiB0aGUgd29tYW4gc2VudCBmb3IgaGVyIEJydXR0aWFuIGFuZCBtYWRlIGhlciBicm90aGVyIGFjcXVhaW50ZWQgd2l0aCBoaW0uIFRoZSBCYXJiYXJpYW4ncyBjb25maWRlbmNlIHdhcyBzb29uIGdhaW5lZCwgc2luY2UgdGhlIGJyb3RoZXIgZm9zdGVyZWQgaGlzIHBhc3Npb24gYW5kIHBsYWlubHkgaW5kdWNlZCB0aGUgc2lzdGVyIHRvIGJlIG1vcmUgY29tcGxhY2VudCBhbmQgc3VibWlzc2l2ZSB0byBoaW0gdGhhbiBiZWZvcmUsIHNvIHRoYXQgaXQgd2FzIG5vdCBkaWZmaWN1bHQsIHRoZSBtYW4gYmVpbmcgYSBsb3ZlciBhbmQgYSBtZXJjZW5hcnkgYXMgd2VsbCwgdG8gY2hhbmdlIGhpcyBhbGxlZ2lhbmNlLCBpbiBhbnRpY2lwYXRpb24gb2YgdGhlIGxhcmdlIGdpZnRzIHdoaWNoIGl0IHdhcyBwcm9taXNlZCB0aGF0IGhlIHNob3VsZCByZWNlaXZlIGZyb20gRmFiaXVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGlzIHRoZSB3YXkgdGhlIHN0b3J5IGlzIHVzdWFsbHkgdG9sZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Tbywgc3Vic3RhbnRpYWxseSwgYnkgPGJpYmwgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMTUiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4dmlpLiAxNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQnV0IHNvbWUgd3JpdGVycyBzYXkgdGhhdCB0aGUgd29tYW4gYnkgd2hvbSB0aGUgQnJ1dHRpYW4gd2FzIHdvbiBvdmVyLCB3YXMgbm90IGEgVGFyZW50aW5lLCBidXQgYSBCcnV0dGlhbiwgYW5kIGEgY29uY3ViaW5lIG9mIEZhYml1cywgYW5kIHRoYXQgd2hlbiBzaGUgbGVhcm5lZCB0aGF0IHRoZSBjb21tYW5kZXIgb2YgdGhlIEJydXR0aWFuIGdhcnJpc29uIHdhcyBhIGZlbGxvdy1jb3VudHJ5bWFuIGFuZCBhbiBhY3F1YWludGFuY2Ugb2YgaGVycywgc2hlIHRvbGQgRmFiaXVzLCBoZWxkIGEgY29uZmVyZW5jZSB3aXRoIHRoZSBtYW4gYmVuZWF0aCB0aGUgd2FsbHMgb2YgdGhlIGNpdHksIGFuZCB3b24gaGltIGNvbXBsZXRlbHkgb3Zlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIHdheSB0aGUgc3RvcnkgaXMgdXN1YWxseSB0b2xkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U28sIHN1YnN0YW50aWFsbHksIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMTUiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4dmlpLiAxNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gQnV0IHNvbWUgd3JpdGVycyBzYXkgdGhhdCB0aGUgd29tYW4gYnkgd2hvbSB0aGUgQnJ1dHRpYW4gd2FzIHdvbiBvdmVyLCB3YXMgbm90IGEgVGFyZW50aW5lLCBidXQgYSBCcnV0dGlhbiwgYW5kIGEgY29uY3ViaW5lIG9mIEZhYml1cywgYW5kIHRoYXQgd2hlbiBzaGUgbGVhcm5lZCB0aGF0IHRoZSBjb21tYW5kZXIgb2YgdGhlIEJydXR0aWFuIGdhcnJpc29uIHdhcyBhIGZlbGxvdy1jb3VudHJ5bWFuIGFuZCBhbiBhY3F1YWludGFuY2Ugb2YgaGVycywgc2hlIHRvbGQgRmFiaXVzLCBoZWxkIGEgY29uZmVyZW5jZSB3aXRoIHRoZSBtYW4gYmVuZWF0aCB0aGUgd2FsbHMgb2YgdGhlIGNpdHksIGFuZCB3b24gaGltIGNvbXBsZXRlbHkgb3Zlci4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4xNSIgdmFsaWQ9InllcyI+TGl2eSwgeHh2aWkuIDE1LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhpcyBwbG90IHdhcyB1bmRlciB3YXksIEZhYml1cyBzY2hlbWVkIHRvIGRyYXcgSGFubmliYWwgYXdheSBmcm9tIHRoZSBuZWlnaGJvdXJob29kLCBhbmQgdGhlcmVmb3JlIGdhdmUgb3JkZXJzIHRvIHRoZSBnYXJyaXNvbiBhdCBSaGVnaXVtIHRvIG92ZXJydW4gQnJ1dHRpdW0gYW5kIHRha2UgQ2F1bG9uaWEgYnkgc3Rvcm0uIFRoaXMgZ2Fycmlzb24gbnVtYmVyZWQgZWlnaHQgdGhvdXNhbmQsIG1vc3Qgb2YgdGhlbSBkZXNlcnRlcnMsIGFuZCB0aGUgcmVmdXNlIG9mIHRoZSBzb2xkaWVycyBzZW50IGhvbWUgZnJvbSBTaWNpbHkgaW4gZGlzZ3JhY2UgYnkgTWFyY2VsbHVzLCBtZW4gd2hvc2UgbG9zcyB3b3VsZCBsZWFzdCBhZmZsaWN0IGFuZCBpbmp1cmUgUm9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+RmFiaXVzIGV4cGVjdGVkIHRoYXQgYnkgY2FzdGluZyB0aGVzZSBmb3JjZXMsIGxpa2UgYSBiYWl0LCBpbiBmcm9udCBvZiBIYW5uaWJhbCwgaGUgd291bGQgZHJhdyBoaW0gYXdheSBmcm9tIFRhcmVudHVtLiBBbmQgdGhpcyB3YXMgd2hhdCBhY3R1YWxseSBoYXBwZW5lZC4gRm9yIEhhbm5pYmFsIGltbWVkaWF0ZWx5IHN3ZXB0IHRoaXRoZXIgaW4gcHVyc3VpdCB3aXRoIGhpcyBhcm15LiBCdXQgZml2ZSBkYXlzIGFmdGVyIEZhYml1cyBoYWQgbGFpZCBzaWVnZSB0byBUYXJlbnR1bSwgdGhlIHlvdXRoIHdobywgd2l0aCBoaXMgc2lzdGVyLCBoYWQgY29tZSB0byBhbiB1bmRlcnN0YW5kaW5nIHdpdGggdGhlIEJydXR0aWFuIGNvbW1hbmRlciBpbiB0aGUgY2l0eSwgY2FuaW5lIHRvIGhpbSBieSBuaWdodC4gSGUgaGFkIHNlZW4gYW5kIGtuZXcgcHJlY2lzZWx5IHRoZSBzcG90IGF0IHdoaWNoIHRoZSBCcnV0dGlhbiB3YXMgd2F0Y2hpbmcgd2l0aCB0aW1lIHB1cnBvc2Ugb2YgaGFuZGluZyB0aGUgY2l0eSBvdmVyIHRvIGl0cyBhc3NhaWxhbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5GYWJpdXMsIGhvd2V2ZXIsIHdvdWxkIG5vdCBzdWZmZXIgaGlzIGVudGVycHJpc2UgdG8gZGVwZW5kIHdob2xseSB1cG9uIHRoZSBiZXRyYXlhbCBvZiB0aGUgY2l0eS4gV2hpbGUsIHRoZXJlZm9yZSwgaGUgaGltc2VsZiBsZWQgYSBkZXRhY2htZW50IHF1aWV0bHkgdG8gdGhlIGFwcG9pbnRlZCBzcG90LCB0aGUgcmVzdCBvZiBoaXMgYXJteSBhdHRhY2tlZCB0aGUgd2FsbHMgYnkgbGFuZCBhbmQgc2VhLCB3aXRoIGdyZWF0IHNob3V0aW5nIGFuZCB0dW11bHQsIHVudGlsIG1vc3Qgb2YgdGhlIFRhcmVudGluZXMgaGFkIHJ1biB0byB0aGUgYWlkIG9mIHRob3NlIHdobyB3ZXJlIGRlZmVuZGluZyB0aGVtLiBUaGVuIHRoZSBCcnV0dGlhbiBnYXZlIEZhYml1cyB0aGUgc2lnbmFsLCBhbmQgaGUgc2NhbGVkIHRoZSB3YWxscyBhbmQgZ290IHRoZSBtYXN0ZXJ5IG9mIHRoZSBjaXR5LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgdGhpcyBwbG90IHdhcyB1bmRlciB3YXksIEZhYml1cyBzY2hlbWVkIHRvIGRyYXcgSGFubmliYWwgYXdheSBmcm9tIHRoZSBuZWlnaGJvdXJob29kLCBhbmQgdGhlcmVmb3JlIGdhdmUgb3JkZXJzIHRvIHRoZSBnYXJyaXNvbiBhdCBSaGVnaXVtIHRvIG92ZXJydW4gQnJ1dHRpdW0gYW5kIHRha2UgQ2F1bG9uaWEgYnkgc3Rvcm0uIFRoaXMgZ2Fycmlzb24gbnVtYmVyZWQgZWlnaHQgdGhvdXNhbmQsIG1vc3Qgb2YgdGhlbSBkZXNlcnRlcnMsIGFuZCB0aGUgcmVmdXNlIG9mIHRoZSBzb2xkaWVycyBzZW50IGhvbWUgZnJvbSBTaWNpbHkgaW4gZGlzZ3JhY2UgYnkgTWFyY2VsbHVzLCBtZW4gd2hvc2UgbG9zcyB3b3VsZCBsZWFzdCBhZmZsaWN0IGFuZCBpbmp1cmUgUm9tZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cyBleHBlY3RlZCB0aGF0IGJ5IGNhc3RpbmcgdGhlc2UgZm9yY2VzLCBsaWtlIGEgYmFpdCwgaW4gZnJvbnQgb2YgSGFubmliYWwsIGhlIHdvdWxkIGRyYXcgaGltIGF3YXkgZnJvbSBUYXJlbnR1bS4gQW5kIHRoaXMgd2FzIHdoYXQgYWN0dWFsbHkgaGFwcGVuZWQuIEZvciBIYW5uaWJhbCBpbW1lZGlhdGVseSBzd2VwdCB0aGl0aGVyIGluIHB1cnN1aXQgd2l0aCBoaXMgYXJteS4gQnV0IGZpdmUgZGF5cyBhZnRlciBGYWJpdXMgaGFkIGxhaWQgc2llZ2UgdG8gVGFyZW50dW0sIHRoZSB5b3V0aCB3aG8sIHdpdGggaGlzIHNpc3RlciwgaGFkIGNvbWUgdG8gYW4gdW5kZXJzdGFuZGluZyB3aXRoIHRoZSBCcnV0dGlhbiBjb21tYW5kZXIgaW4gdGhlIGNpdHksIGNhbmluZSB0byBoaW0gYnkgbmlnaHQuIEhlIGhhZCBzZWVuIGFuZCBrbmV3IHByZWNpc2VseSB0aGUgc3BvdCBhdCB3aGljaCB0aGUgQnJ1dHRpYW4gd2FzIHdhdGNoaW5nIHdpdGggdGltZSBwdXJwb3NlIG9mIGhhbmRpbmcgdGhlIGNpdHkgb3ZlciB0byBpdHMgYXNzYWlsYW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cywgaG93ZXZlciwgd291bGQgbm90IHN1ZmZlciBoaXMgZW50ZXJwcmlzZSB0byBkZXBlbmQgd2hvbGx5IHVwb24gdGhlIGJldHJheWFsIG9mIHRoZSBjaXR5LiBXaGlsZSwgdGhlcmVmb3JlLCBoZSBoaW1zZWxmIGxlZCBhIGRldGFjaG1lbnQgcXVpZXRseSB0byB0aGUgYXBwb2ludGVkIHNwb3QsIHRoZSByZXN0IG9mIGhpcyBhcm15IGF0dGFja2VkIHRoZSB3YWxscyBieSBsYW5kIGFuZCBzZWEsIHdpdGggZ3JlYXQgc2hvdXRpbmcgYW5kIHR1bXVsdCwgdW50aWwgbW9zdCBvZiB0aGUgVGFyZW50aW5lcyBoYWQgcnVuIHRvIHRoZSBhaWQgb2YgdGhvc2Ugd2hvIHdlcmUgZGVmZW5kaW5nIHRoZW0uIFRoZW4gdGhlIEJydXR0aWFuIGdhdmUgRmFiaXVzIHRoZSBzaWduYWwsIGFuZCBoZSBzY2FsZWQgdGhlIHdhbGxzIGFuZCBnb3QgdGhlIG1hc3Rlcnkgb2YgdGhlIGNpdHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQsIGhvd2V2ZXIsIEZhYml1cyBzZWVtcyB0byBoYXZlIGJlZW4gb3ZlcmNvbWUgYnkgaGlzIGFtYml0aW9uLCBmb3IgaGUgb3JkZXJlZCBoaXMgbWVuIHRvIHB1dCB0aGUgQnJ1dHRpYW5zIGZpcnN0IG9mIGFsbCB0byB0aGUgc3dvcmQsIHRoYXQgaGlzIHBvc3Nlc3Npb24gb2YgdGhlIGNpdHkgbWlnaHQgbm90IGJlIGtub3duIHRvIGJlIGR1ZSB0byB0cmVhY2hlcnkuIEhlIG5vdCBvbmx5IGZhaWxlZCB0byBwcmV2ZW50IHRoaXMga25vd2xlZGdlLCBidXQgaW5jdXJyZWQgYWxzbyB0aGUgcmVwcm9hY2ggb2YgcGVyZmlkeSBhbmQgY3J1ZWx0eS4gTWFueSBvZiB0aGUgVGFyZW50aW5lcyBhbHNvIHdlcmUgc2xhaW4sIHRoaXJ0eSB0aG91c2FuZCBvZiB0aGVtIHdlcmUgc29sZCBpbnRvIHNsYXZlcnksIHRoZWlyIGNpdHkgd2FzIHBsdW5kZXJlZCBieSB0aGUgUm9tYW4gYXJteSwgYW5kIHRocmVlIHRob3VzYW5kIHRhbGVudHMgd2VyZSB0aGVyZWJ5IGJyb3VnaHQgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBldmVyeXRoaW5nIGVsc2Ugd2FzIGNhcnJpZWQgb2ZmIGFzIHBsdW5kZXIsIGl0IGlzIHNhaWQgdGhhdCB0aGUgYWNjb3VudGFudCBhc2tlZCBGYWJpdXMgd2hhdCBoaXMgb3JkZXJzIHdlcmUgY29uY2VybmluZyB0aGUgZ29kcywgZm9yIHNvIGhlIGNhbGxlZCB0aGVpciBwaWN0dXJlcyBhbmQgc3RhdHVlczsgYW5kIHRoYXQgRmFiaXVzIGFuc3dlcmVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB1cyBsZWF2ZSB0aGVpciBhbmdlcmVkIGdvZHMgZm9yIHRoZSBUYXJlbnRpbmVzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSByZW1vdmVkIHRoZSBjb2xvc3NhbCBzdGF0dWUgb2YgSGVyYWNsZXMgZnJvbSBUYXJlbnR1bSwgYW5kIHNldCBpdCB1cCBvbiB0aGUgQ2FwaXRvbCwgYW5kIG5lYXIgaXQgYW4gZXF1ZXN0cmlhbiBzdGF0dWUgb2YgaGltc2VsZiwgaW4gYnJvbnplLiBIZSB0aHVzIGFwcGVhcmVkIGZhciBtb3JlIGVjY2VudHJpYyBpbiB0aGVzZSBtYXR0ZXJzIHRoYW4gTWFyY2VsbHVzLCBuYXkgcmF0aGVyLCB0aGUgbWlsZCBhbmQgaHVtYW5lIGNvbmR1Y3Qgb2YgTWFyY2VsbHVzIHdhcyB0aHVzIG1hZGUgdG8gc2VlbSBhbHRvZ2V0aGVyIGFkbWlyYWJsZSBieSBjb250cmFzdCwgYXMgaGFzIGJlZW4gd3JpdHRlbiBpbiBoaXMgTGlmZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DaGFwdGVyIHh4aS4gTWFyY2VsbHVzIGhhZCBlbnJpY2hlZCBSb21lIHdpdGggd29ya3Mgb2YgR3JlZWsgYXJ0IHRha2VuIGZyb20gU3lyYWN1c2UgaW4gMjEyIEIuQy4gTGl2eSdzIG9waW5pb24gaXMgcmF0aGVyIGRpZmZlcmVudCBmcm9tIFBsdXRhcmNoJ3M6IDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiIGxhbmc9ImxhIj5zZWQgbWFpb3JlIGFuaW1vIGdlbmVyaXMgZWl1cyBwcmFlZGEgYWJzdGludWl0IEZhYml1cyBxdWFtIE1hcmNlbGx1cyw8L3E+IAogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAyNy4xNiIgdmFsaWQ9InllcyI+eHh2aWkuIDE2LjwvYmlibD4gRmFiaXVzIGtpbGxlZCB0aGUgcGVvcGxlIGJ1dCBzcGFyZWQgdGhlaXIgZ29kczsgTWFyY2VsbHVzIHNwYXJlZCB0aGUgcGVvcGxlIGJ1dCB0b29rIHRoZWlyIGdvZHMuPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgcG9pbnQsIGhvd2V2ZXIsIEZhYml1cyBzZWVtcyB0byBoYXZlIGJlZW4gb3ZlcmNvbWUgYnkgaGlzIGFtYml0aW9uLCBmb3IgaGUgb3JkZXJlZCBoaXMgbWVuIHRvIHB1dCB0aGUgQnJ1dHRpYW5zIGZpcnN0IG9mIGFsbCB0byB0aGUgc3dvcmQsIHRoYXQgaGlzIHBvc3Nlc3Npb24gb2YgdGhlIGNpdHkgbWlnaHQgbm90IGJlIGtub3duIHRvIGJlIGR1ZSB0byB0cmVhY2hlcnkuIEhlIG5vdCBvbmx5IGZhaWxlZCB0byBwcmV2ZW50IHRoaXMga25vd2xlZGdlLCBidXQgaW5jdXJyZWQgYWxzbyB0aGUgcmVwcm9hY2ggb2YgcGVyZmlkeSBhbmQgY3J1ZWx0eS4gTWFueSBvZiB0aGUgVGFyZW50aW5lcyBhbHNvIHdlcmUgc2xhaW4sIHRoaXJ0eSB0aG91c2FuZCBvZiB0aGVtIHdlcmUgc29sZCBpbnRvIHNsYXZlcnksIHRoZWlyIGNpdHkgd2FzIHBsdW5kZXJlZCBieSB0aGUgUm9tYW4gYXJteSwgYW5kIHRocmVlIHRob3VzYW5kIHRhbGVudHMgd2VyZSB0aGVyZWJ5IGJyb3VnaHQgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['22.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIGV2ZXJ5dGhpbmcgZWxzZSB3YXMgY2FycmllZCBvZmYgYXMgcGx1bmRlciwgaXQgaXMgc2FpZCB0aGF0IHRoZSBhY2NvdW50YW50IGFza2VkIEZhYml1cyB3aGF0IGhpcyBvcmRlcnMgd2VyZSBjb25jZXJuaW5nIHRoZSBnb2RzLCBmb3Igc28gaGUgY2FsbGVkIHRoZWlyIHBpY3R1cmVzIGFuZCBzdGF0dWVzOyBhbmQgdGhhdCBGYWJpdXMgYW5zd2VyZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgdXMgbGVhdmUgdGhlaXIgYW5nZXJlZCBnb2RzIGZvciB0aGUgVGFyZW50aW5lcy48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIHJlbW92ZWQgdGhlIGNvbG9zc2FsIHN0YXR1ZSBvZiBIZXJhY2xlcyBmcm9tIFRhcmVudHVtLCBhbmQgc2V0IGl0IHVwIG9uIHRoZSBDYXBpdG9sLCBhbmQgbmVhciBpdCBhbiBlcXVlc3RyaWFuIHN0YXR1ZSBvZiBoaW1zZWxmLCBpbiBicm9uemUuIEhlIHRodXMgYXBwZWFyZWQgZmFyIG1vcmUgZWNjZW50cmljIGluIHRoZXNlIG1hdHRlcnMgdGhhbiBNYXJjZWxsdXMsIG5heSByYXRoZXIsIHRoZSBtaWxkIGFuZCBodW1hbmUgY29uZHVjdCBvZiBNYXJjZWxsdXMgd2FzIHRodXMgbWFkZSB0byBzZWVtIGFsdG9nZXRoZXIgYWRtaXJhYmxlIGJ5IGNvbnRyYXN0LCBhcyBoYXMgYmVlbiB3cml0dGVuIGluIGhpcyBMaWZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2hhcHRlciB4eGkuIE1hcmNlbGx1cyBoYWQgZW5yaWNoZWQgUm9tZSB3aXRoIHdvcmtzIG9mIEdyZWVrIGFydCB0YWtlbiBmcm9tIFN5cmFjdXNlIGluIDIxMiBCLkMuIExpdnkncyBvcGluaW9uIGlzIHJhdGhlciBkaWZmZXJlbnQgZnJvbSBQbHV0YXJjaCdzOiA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiIGxhbmc9ImxhIj5zZWQgbWFpb3JlIGFuaW1vIGdlbmVyaXMgZWl1cyBwcmFlZGEgYWJzdGludWl0IEZhYml1cyBxdWFtIE1hcmNlbGx1cyw8L3E+IAogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI3LjE2IiB2YWxpZD0ieWVzIj54eHZpaS4gMTYuPC9iaWJsPiBGYWJpdXMga2lsbGVkIHRoZSBwZW9wbGUgYnV0IHNwYXJlZCB0aGVpciBnb2RzOyBNYXJjZWxsdXMgc3BhcmVkIHRoZSBwZW9wbGUgYnV0IHRvb2sgdGhlaXIgZ29kcy48L25vdGU+CgkJCSAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCIgbGFuZz0ibGEiPnNlZCBtYWlvcmUgYW5pbW8gZ2VuZXJpcyBlaXVzIHByYWVkYSBhYnN0aW51aXQgRmFiaXVzIHF1YW0gTWFyY2VsbHVzLDwvcT4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjcuMTYiIHZhbGlkPSJ5ZXMiPnh4dmlpLiAxNi48L2JpYmw+IEZhYml1cyBraWxsZWQgdGhlIHBlb3BsZSBidXQgc3BhcmVkIHRoZWlyIGdvZHM7IE1hcmNlbGx1cyBzcGFyZWQgdGhlIHBlb3BsZSBidXQgdG9vayB0aGVpciBnb2RzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkl0IGlzIHNhaWQgdGhhdCBIYW5uaWJhbCBoYWQgZ290IHdpdGhpbiBmaXZlIG1pbGVzIG9mIFRhcmVudHVtIHdoZW4gaXQgZmVsbCwgYW5kIHRoYXQgb3Blbmx5IGhlIG1lcmVseSByZW1hcmtlZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JdCBhcHBlYXJzLCB0aGVuLCB0aGF0IHRoZSBSb21hbnMgaGF2ZSBhbm90aGVyIEhhbm5pYmFsLCBmb3Igd2UgaGF2ZSBsb3N0IFRhcmVudHVtIGV2ZW4gYXMgd2UgdG9vayBpdDwvcT47IGJ1dCB0aGF0IGluIHByaXZhdGUgaGUgd2FzIHRoZW4gZm9yIHRoZSBmaXJzdCB0aW1lIGxlZCB0byBjb25mZXNzIHRvIGhpcyBmcmllbmRzIHRoYXQgaGUgaGFkIGxvbmcgc2VlbiB0aGUgZGlmZmljdWx0eSwgYW5kIG5vdyBzYXcgdGhlIGltcG9zc2liaWxpdHkgb2YgdGhlaXIgbWFzdGVyaW5nIEl0YWx5IHdpdGggdGhlaXIgcHJlc2VudCBmb3JjZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHN1Y2Nlc3MsIEZhYml1cyBjZWxlYnJhdGVkIGEgc2Vjb25kIHRyaXVtcGggbW9yZSBzcGxlbmRpZCB0aGFuIGhpcyBmaXJzdCwgc2luY2UgaGUgd2FzIGNvbnRlbmRpbmcgd2l0aCBIYW5uaWJhbCBsaWtlIGEgY2xldmVyIGF0aGxldGUsIGFuZCBlYXNpbHkgYmFmZmxpbmcgYWxsIGhpcyB1bmRlcnRha2luZ3MsIG5vdyB0aGF0IGhpcyBodWdzIGFuZCBncmlwcyBubyBsb25nZXIgaGFkIHRoZWlyIG9sZCB0aW1lIHZpZ291ci4gRm9yIGhpcyBmb3JjZXMgd2VyZSBwYXJ0bHkgZW5lcnZhdGVkIGJ5IGx1eHVyeSBhbmQgd2VhbHRoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDIxNi0yMTUgQi5DLiBIYW5uaWJhbCBtYWRlIHRoZSBvcHVsZW50IGNpdHkgb2YgQ2FwdWEgaGlzIHdpbnRlciBxdWFydGVycy48L25vdGU+IGFuZCBwYXJ0bHkgYmx1bnRlZCwgYXMgaXQgd2VyZSwgYW5kIHdvcm4gb3V0IGJ5IHRoZWlyIHVucmVtaXR0aW5nIHN0cnVnZ2xlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMgc2FpZCB0aGF0IEhhbm5pYmFsIGhhZCBnb3Qgd2l0aGluIGZpdmUgbWlsZXMgb2YgVGFyZW50dW0gd2hlbiBpdCBmZWxsLCBhbmQgdGhhdCBvcGVubHkgaGUgbWVyZWx5IHJlbWFya2VkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXQgYXBwZWFycywgdGhlbiwgdGhhdCB0aGUgUm9tYW5zIGhhdmUgYW5vdGhlciBIYW5uaWJhbCwgZm9yIHdlIGhhdmUgbG9zdCBUYXJlbnR1bSBldmVuIGFzIHdlIHRvb2sgaXQ8L3E+OyBidXQgdGhhdCBpbiBwcml2YXRlIGhlIHdhcyB0aGVuIGZvciB0aGUgZmlyc3QgdGltZSBsZWQgdG8gY29uZmVzcyB0byBoaXMgZnJpZW5kcyB0aGF0IGhlIGhhZCBsb25nIHNlZW4gdGhlIGRpZmZpY3VsdHksIGFuZCBub3cgc2F3IHRoZSBpbXBvc3NpYmlsaXR5IG9mIHRoZWlyIG1hc3RlcmluZyBJdGFseSB3aXRoIHRoZWlyIHByZXNlbnQgZm9yY2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHN1Y2Nlc3MsIEZhYml1cyBjZWxlYnJhdGVkIGEgc2Vjb25kIHRyaXVtcGggbW9yZSBzcGxlbmRpZCB0aGFuIGhpcyBmaXJzdCwgc2luY2UgaGUgd2FzIGNvbnRlbmRpbmcgd2l0aCBIYW5uaWJhbCBsaWtlIGEgY2xldmVyIGF0aGxldGUsIGFuZCBlYXNpbHkgYmFmZmxpbmcgYWxsIGhpcyB1bmRlcnRha2luZ3MsIG5vdyB0aGF0IGhpcyBodWdzIGFuZCBncmlwcyBubyBsb25nZXIgaGFkIHRoZWlyIG9sZCB0aW1lIHZpZ291ci4gRm9yIGhpcyBmb3JjZXMgd2VyZSBwYXJ0bHkgZW5lcnZhdGVkIGJ5IGx1eHVyeSBhbmQgd2VhbHRoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMjE2LTIxNSBCLkMuIEhhbm5pYmFsIG1hZGUgdGhlIG9wdWxlbnQgY2l0eSBvZiBDYXB1YSBoaXMgd2ludGVyIHF1YXJ0ZXJzLjwvbm90ZT4gYW5kIHBhcnRseSBibHVudGVkLCBhcyBpdCB3ZXJlLCBhbmQgd29ybiBvdXQgYnkgdGhlaXIgdW5yZW1pdHRpbmcgc3RydWdnbGVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhlcmUgd2FzIGEgY2VydGFpbiBNYXJjdXMgTGl2aXVzLCB3aG8gY29tbWFuZGVkIHRoZSBnYXJyaXNvbiBvZiBUYXJlbnR1bSB3aGVuIEhhbm5pYmFsIGdvdCB0aGUgY2l0eSB0byByZXZvbHQuIEhlIG9jY3VwaWVkIHRoZSBjaXRhZGVsLCBob3dldmVyLCBhbmQgd2FzIG5vdCBkaXNsb2RnZWQgZnJvbSB0aGlzIHBvc2l0aW9uLCBidXQgaGVsZCBpdCB1bnRpbCB0aGUgUm9tYW5zIGFnYWluIGdvdCB0aGUgdXBwZXIgaGFuZCBvZiB0aGUgVGFyZW50aW5lcy4gVGhpcyBtYW4gd2FzIHZleGVkIGJ5IHRoZSBob25vdXJzIHBhaWQgdG8gRmFiaXVzLCBhbmQgb25jZSwgY2FycmllZCBhd2F5IGJ5IGhpcyBqZWFsb3VzeSBhbmQgYW1iaXRpb24sIHNhaWQgdG8gdGhlIHNlbmF0ZSB0aGF0IGl0IHdhcyBub3QgRmFiaXVzLCBidXQgaGltc2VsZiwgd2hvIHNob3VsZCBiZSBjcmVkaXRlZCB3aXRoIHRoZSBjYXB0dXJlIG9mIFRhcmVudHVtLiBBdCB0aGlzIEZhYml1cyBsYXVnaGVkLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb3UgYXJlIHJpZ2h0OyBoYWQgeW91IG5vdCBsb3N0IHRoZSBjaXR5LCBJIGhhZCBub3QgdGFrZW4gaXQuPC9xPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aGVyZSB3YXMgYSBjZXJ0YWluIE1hcmN1cyBMaXZpdXMsIHdobyBjb21tYW5kZWQgdGhlIGdhcnJpc29uIG9mIFRhcmVudHVtIHdoZW4gSGFubmliYWwgZ290IHRoZSBjaXR5IHRvIHJldm9sdC4gSGUgb2NjdXBpZWQgdGhlIGNpdGFkZWwsIGhvd2V2ZXIsIGFuZCB3YXMgbm90IGRpc2xvZGdlZCBmcm9tIHRoaXMgcG9zaXRpb24sIGJ1dCBoZWxkIGl0IHVudGlsIHRoZSBSb21hbnMgYWdhaW4gZ290IHRoZSB1cHBlciBoYW5kIG9mIHRoZSBUYXJlbnRpbmVzLiBUaGlzIG1hbiB3YXMgdmV4ZWQgYnkgdGhlIGhvbm91cnMgcGFpZCB0byBGYWJpdXMsIGFuZCBvbmNlLCBjYXJyaWVkIGF3YXkgYnkgaGlzIGplYWxvdXN5IGFuZCBhbWJpdGlvbiwgc2FpZCB0byB0aGUgc2VuYXRlIHRoYXQgaXQgd2FzIG5vdCBGYWJpdXMsIGJ1dCBoaW1zZWxmLCB3aG8gc2hvdWxkIGJlIGNyZWRpdGVkIHdpdGggdGhlIGNhcHR1cmUgb2YgVGFyZW50dW0uIEF0IHRoaXMgRmFiaXVzIGxhdWdoZWQsIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW91IGFyZSByaWdodDsgaGFkIHlvdSBub3QgbG9zdCB0aGUgY2l0eSwgSSBoYWQgbm90IHRha2VuIGl0LjwvcT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW1vbmcgdGhlIG90aGVyIG1hcmtzIG9mIGhpZ2ggZmF2b3VyIHdoaWNoIHRoZSBSb21hbnMgY29uZmVycmVkIHVwb24gRmFiaXVzLCB0aGV5IG1hZGUgaGlzIHNvbiBGYWJpdXMgY29uc3VsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIxMyBCLkMuPC9ub3RlPiBXaGVuIHRoaXMgc29uIGhhZCBlbnRlcmVkIHVwb24gaGlzIG9mZmljZSBhbmQgd2FzIGFycmFuZ2luZyBzb21lIG1hdHRlciBwZXJ0YWluaW5nIHRvIHRoZSB3YXIsIGhpcyBmYXRoZXIsIGVpdGhlciBieSByZWFzb24gb2YgaGlzIGFnZSBhbmQgd2Vha25lc3MsIG9yIGJlY2F1c2UgaGUgd2FzIHB1dHRpbmcgaGlzIHNvbiB0byB0aGUgdGVzdCwgbW91bnRlZCBoaXMgaG9yc2UgYW5kIHJvZGUgdG93YXJkcyBoaW0gdGhyb3VnaCB0aGUgdGhyb25nIG9mIGJ5c3RhbmRlcnMuIFRoZSB5b3VuZyBtYW4gY2F1Z2h0IHNpZ2h0IG9mIGhpcyBmYXRoZXIgYXQgYSBkaXN0YW5jZSBhbmQgd291bGQgbm90IHN1ZmZlciB3aGF0IGhlIGRpZCwgYnV0IHNlbnQgYSBsaWN0b3Igd2l0aCBvcmRlcnMgZm9yIGhpbSB0byBkaXNtb3VudCBhbmQgY29tZSB0byB0aGUgY29uc3VsIG9uIGZvb3QgaWYgaGUgaGFkIGFueSBuZWVkIG9mIGhpcyBvZmZpY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlIHJlc3Qgd2VyZSBvZmZlbmRlZCBhdCB0aGlzIGNvbW1hbmQsIGFuZCBpbXBsaWVkIGJ5IHRoZWlyIHNpbGVudCBnYXplIGF0IEZhYml1cyB0aGF0IHRoaXMgdHJlYXRtZW50IG9mIGhpbSB3YXMgdW53b3J0aHkgb2YgaGlzIGhpZ2ggcG9zaXRpb24uIEJ1dCBGYWJpdXMgaGltc2VsZiBzcHJhbmcgcXVpY2tseSBmcm9tIGhpcyBob3JzZSwgYWxtb3N0IHJhbiB0byBoaXMgc29uLCBhbmQgZW1icmFjZWQgaGltIGFmZmVjdGlvbmF0ZWx5LiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IHNvbiw8L3E+IGhlIHNhaWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+eW91IGFyZSByaWdodCBpbiB0aG91Z2h0IGFuZCBhY3QuIFlvdSB1bmRlcnN0YW5kIHdoYXQgYSBwZW9wbGUgaGFzIG1hZGUgeW91IGl0cyBvZmZpY2VyLCBhbmQgd2hhdCBhIGhpZ2ggb2ZmaWNlIHlvdSBoYXZlIHJlY2VpdmVkIGZyb20gdGhlbS4gSXQgd2FzIGluIHRoaXMgc3Bpcml0IHRoYXQgb3VyIGZhdGhlcnMgYW5kIHdlIG91cnNlbHZlcyBoYXZlIGV4YWx0ZWQgUm9tZSwgYSBzcGlyaXQgd2hpY2ggbWFrZXMgcGFyZW50cyBhbmQgY2hpbGRyZW4gZXZlciBzZWNvbmRhcnkgdG8gb3VyIGNvdW50cnkncyBnb29kLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CgkJCQkJICAgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+RXhwZXJpcmkgdm9sdWksIGZpbGksIHNhdGluIHNjaXJlcyBjb25zdWx0ZW0gdGUgZXNzZS48L2ZvcmVpZ24+CiAgICAgICAgICAgICAgIDwvcT4gCiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDI0LjQ0IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eGl2LiA0NC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW1vbmcgdGhlIG90aGVyIG1hcmtzIG9mIGhpZ2ggZmF2b3VyIHdoaWNoIHRoZSBSb21hbnMgY29uZmVycmVkIHVwb24gRmFiaXVzLCB0aGV5IG1hZGUgaGlzIHNvbiBGYWJpdXMgY29uc3VsLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjEzIEIuQy48L25vdGU+IFdoZW4gdGhpcyBzb24gaGFkIGVudGVyZWQgdXBvbiBoaXMgb2ZmaWNlIGFuZCB3YXMgYXJyYW5naW5nIHNvbWUgbWF0dGVyIHBlcnRhaW5pbmcgdG8gdGhlIHdhciwgaGlzIGZhdGhlciwgZWl0aGVyIGJ5IHJlYXNvbiBvZiBoaXMgYWdlIGFuZCB3ZWFrbmVzcywgb3IgYmVjYXVzZSBoZSB3YXMgcHV0dGluZyBoaXMgc29uIHRvIHRoZSB0ZXN0LCBtb3VudGVkIGhpcyBob3JzZSBhbmQgcm9kZSB0b3dhcmRzIGhpbSB0aHJvdWdoIHRoZSB0aHJvbmcgb2YgYnlzdGFuZGVycy4gVGhlIHlvdW5nIG1hbiBjYXVnaHQgc2lnaHQgb2YgaGlzIGZhdGhlciBhdCBhIGRpc3RhbmNlIGFuZCB3b3VsZCBub3Qgc3VmZmVyIHdoYXQgaGUgZGlkLCBidXQgc2VudCBhIGxpY3RvciB3aXRoIG9yZGVycyBmb3IgaGltIHRvIGRpc21vdW50IGFuZCBjb21lIHRvIHRoZSBjb25zdWwgb24gZm9vdCBpZiBoZSBoYWQgYW55IG5lZWQgb2YgaGlzIG9mZmljZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgcmVzdCB3ZXJlIG9mZmVuZGVkIGF0IHRoaXMgY29tbWFuZCwgYW5kIGltcGxpZWQgYnkgdGhlaXIgc2lsZW50IGdhemUgYXQgRmFiaXVzIHRoYXQgdGhpcyB0cmVhdG1lbnQgb2YgaGltIHdhcyB1bndvcnRoeSBvZiBoaXMgaGlnaCBwb3NpdGlvbi4gQnV0IEZhYml1cyBoaW1zZWxmIHNwcmFuZyBxdWlja2x5IGZyb20gaGlzIGhvcnNlLCBhbG1vc3QgcmFuIHRvIGhpcyBzb24sIGFuZCBlbWJyYWNlZCBoaW0gYWZmZWN0aW9uYXRlbHkuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBzb24sPC9xPiBoZSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+eW91IGFyZSByaWdodCBpbiB0aG91Z2h0IGFuZCBhY3QuIFlvdSB1bmRlcnN0YW5kIHdoYXQgYSBwZW9wbGUgaGFzIG1hZGUgeW91IGl0cyBvZmZpY2VyLCBhbmQgd2hhdCBhIGhpZ2ggb2ZmaWNlIHlvdSBoYXZlIHJlY2VpdmVkIGZyb20gdGhlbS4gSXQgd2FzIGluIHRoaXMgc3Bpcml0IHRoYXQgb3VyIGZhdGhlcnMgYW5kIHdlIG91cnNlbHZlcyBoYXZlIGV4YWx0ZWQgUm9tZSwgYSBzcGlyaXQgd2hpY2ggbWFrZXMgcGFyZW50cyBhbmQgY2hpbGRyZW4gZXZlciBzZWNvbmRhcnkgdG8gb3VyIGNvdW50cnkncyBnb29kLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KCQkJCQkgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+RXhwZXJpcmkgdm9sdWksIGZpbGksIHNhdGluIHNjaXJlcyBjb25zdWx0ZW0gdGUgZXNzZS48L2ZvcmVpZ24+CiAgICAgICAgICAgICAgIDwvcT4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjQuNDQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aXYuIDQ0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5FeHBlcmlyaSB2b2x1aSwgZmlsaSwgc2F0aW4gc2NpcmVzIGNvbnN1bHRlbSB0ZSBlc3NlLjwvZm9yZWlnbj4KICAgICAgICAgICAgICAgPC9xPiAKICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+RXhwZXJpcmkgdm9sdWksIGZpbGksIHNhdGluIHNjaXJlcyBjb25zdWx0ZW0gdGUgZXNzZS48L2ZvcmVpZ24+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMjQuNDQiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4aXYuIDQ0LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG9mIGEgdHJ1dGggaXQgaXMgcmVwb3J0ZWQgb2YgdGhlIGdyZWF0LWdyYW5kZmF0aGVyIG9mIG91ciBGYWJpdXMsIHRoYXQgdGhvdWdoIGhlIGhhZCB0aGUgZ3JlYXRlc3QgcmVwdXRhdGlvbiBhbmQgaW5mbHVlbmNlIGluIFJvbWUsIGFuZCB0aG91Z2ggaGUgaGFkIGhpbXNlbGYgYmVlbiBjb25zdWwgZml2ZSB0aW1lcyBhbmQgaGFkIGNlbGVicmF0ZWQgdGhlIG1vc3Qgc3BsZW5kaWQgdHJpdW1waHMgZm9yIHRpbWUgZ3JlYXRlc3Qgd2FycywgaGUgbmV2ZXJ0aGVsZXNzLCB3aGVuIGhpcyBzb24gd2FzIGNvbnN1bCwgd2VudCBmb3J0aCB0byB3YXIgd2l0aGluIGhpbSBhcyBoaXMgbGlldXRlbmFudCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yOTIgQi5DLjwvbm90ZT4gYW5kIGluIHRoZSB0cml1bXBoIHRoYXQgZm9sbG93ZWQsIHdoaWxlIHRoZSBzb24gZW50ZXJlZCB0aGUgY2l0eSBvbiBhIGZvdXItaG9yc2UgY2hhcmlvdCwgdGhlIGZhdGhlciBmb2xsb3dlZCBvbiBob3JzZWJhY2sgd2l0aCB0aGUgcmVzdCBvZiB0aGUgdHJhaW4sIGV4dWx0aW5nIGluIHRoZSBmYWN0IHRoYXQsIHRob3VnaCBoZSB3YXMgbWFzdGVyIG9mIGhpcyBzb24sIGFuZCB3YXMgdGhlIGdyZWF0ZXN0IG9mIHRoZSBjaXRpemVucyBib3RoIGluIG5hbWUgYW5kIGluIGZhY3QsIGhlIHlldCBwdXQgaGltc2VsZiBiZW5lYXRoIHRoZSBsYXcgYW5kIGl0cyBvZmZpY2lhbC4gSG93ZXZlciwgdGhpcyB3YXMgbm90IHRoZSBvbmx5IGFkbWlyYWJsZSB0aGluZyBhYm91dCBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBvZiBhIHRydXRoIGl0IGlzIHJlcG9ydGVkIG9mIHRoZSBncmVhdC1ncmFuZGZhdGhlciBvZiBvdXIgRmFiaXVzLCB0aGF0IHRob3VnaCBoZSBoYWQgdGhlIGdyZWF0ZXN0IHJlcHV0YXRpb24gYW5kIGluZmx1ZW5jZSBpbiBSb21lLCBhbmQgdGhvdWdoIGhlIGhhZCBoaW1zZWxmIGJlZW4gY29uc3VsIGZpdmUgdGltZXMgYW5kIGhhZCBjZWxlYnJhdGVkIHRoZSBtb3N0IHNwbGVuZGlkIHRyaXVtcGhzIGZvciB0aW1lIGdyZWF0ZXN0IHdhcnMsIGhlIG5ldmVydGhlbGVzcywgd2hlbiBoaXMgc29uIHdhcyBjb25zdWwsIHdlbnQgZm9ydGggdG8gd2FyIHdpdGhpbiBoaW0gYXMgaGlzIGxpZXV0ZW5hbnQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yOTIgQi5DLjwvbm90ZT4gYW5kIGluIHRoZSB0cml1bXBoIHRoYXQgZm9sbG93ZWQsIHdoaWxlIHRoZSBzb24gZW50ZXJlZCB0aGUgY2l0eSBvbiBhIGZvdXItaG9yc2UgY2hhcmlvdCwgdGhlIGZhdGhlciBmb2xsb3dlZCBvbiBob3JzZWJhY2sgd2l0aCB0aGUgcmVzdCBvZiB0aGUgdHJhaW4sIGV4dWx0aW5nIGluIHRoZSBmYWN0IHRoYXQsIHRob3VnaCBoZSB3YXMgbWFzdGVyIG9mIGhpcyBzb24sIGFuZCB3YXMgdGhlIGdyZWF0ZXN0IG9mIHRoZSBjaXRpemVucyBib3RoIGluIG5hbWUgYW5kIGluIGZhY3QsIGhlIHlldCBwdXQgaGltc2VsZiBiZW5lYXRoIHRoZSBsYXcgYW5kIGl0cyBvZmZpY2lhbC4gSG93ZXZlciwgdGhpcyB3YXMgbm90IHRoZSBvbmx5IGFkbWlyYWJsZSB0aGluZyBhYm91dCBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc29uIG9mIG91ciBGYWJpdXMsIGFzIGl0IGhhcHBlbmVkLCBkaWVkLCBhbmQgdGhpcyBhZmZsaWN0aW9uIGhlIGJvcmUgd2l0aCBlcXVhbmltaXR5LCBsaWtlIGEgd2lzZSBtYW4gYW5kIGEgZ29vZCBmYXRoZXIuIFRoZSBmdW5lcmFsIG9yYXRpb24sIHdoaWNoIGlzIHByb25vdW5jZWQgYXQgdGhlIG9ic2VxdWllcyBvZiBpbGx1c3RyaW91cyBtZW4gYnkgc29tZSBraW5zbWFuLCBoZSBkZWxpdmVyZWQgaGltc2VsZiBmcm9tIGhpcyBwbGFjZSBpbiB0aGUgZm9ydW0sIGFuZCB0aGVuIHdyb3RlIG91dCB0aGUgc3BlZWNoIGFuZCBwdWJsaXNoZWQgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDEuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpLiA1LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc29uIG9mIG91ciBGYWJpdXMsIGFzIGl0IGhhcHBlbmVkLCBkaWVkLCBhbmQgdGhpcyBhZmZsaWN0aW9uIGhlIGJvcmUgd2l0aCBlcXVhbmltaXR5LCBsaWtlIGEgd2lzZSBtYW4gYW5kIGEgZ29vZCBmYXRoZXIuIFRoZSBmdW5lcmFsIG9yYXRpb24sIHdoaWNoIGlzIHByb25vdW5jZWQgYXQgdGhlIG9ic2VxdWllcyBvZiBpbGx1c3RyaW91cyBtZW4gYnkgc29tZSBraW5zbWFuLCBoZSBkZWxpdmVyZWQgaGltc2VsZiBmcm9tIGhpcyBwbGFjZSBpbiB0aGUgZm9ydW0sIGFuZCB0aGVuIHdyb3RlIG91dCB0aGUgc3BlZWNoIGFuZCBwdWJsaXNoZWQgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmFiLiAxLjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmFiLiAxLjUiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaS4gNS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBub3cgQ29ybmVsaXVzIFNjaXBpbyB3YXMgc2VudCBpbnRvIFNwYWluLCB3aGVyZSBoZSBub3Qgb25seSBjb25xdWVyZWQgdGhlIENhcnRoYWdpbmlhbnMgaW4gbWFueSBiYXR0bGVzLCBhbmQgZHJvdmUgdGhlbSBvdXQgb2YgdGhlIGNvdW50cnksIGJ1dCBhbHNvIHdvbiBvdmVyIGEgbXVsdGl0dWRlIG9mIG5hdGlvbnMsIGFuZCB0b29rIGdyZWF0IGNpdGllcyB3aXRoIHNwbGVuZGlkIHNwb2lscywgc28gdGhhdCwgb24gaGlzIHJldHVybiB0byBSb21lLCBoZSBlbmpveWVkIGFuIGluY29tcGFyYWJsZSBmYXZvdXIgYW5kIGZhbWUsIGFuZCB3YXMgbWFkZSBjb25zdWwuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjA1IEIuQy48L25vdGU+IFBlcmNlaXZpbmcgdGhhdCB0aGUgcGVvcGxlIGRlbWFuZGVkIGFuZCBleHBlY3RlZCBhIGdyZWF0IGFjaGlldmVtZW50IGZyb20gaGltLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5oZSByZWdhcmRlZCB0aGUgaGFuZCB0byBoYW5kIHN0cnVnZ2xlIHdpdGhpbiBIYW5uaWJhbCB0aGVyZSBpbiBJdGFseSBhcyB2ZXJ5IGFudGlxdWF0ZWQgYW5kIHNlbmlsZSBwb2xpY3ksIGFuZCBwdXJwb3NlZCB0byBmaWxsIExpYnlhIGF0IG9uY2UsIGFuZCB0aGluZSB0ZXJyaXRvcnkgb2YgQ2FydGhhZ2UgaXRzZWxmLCB3aXRoIFJvbWFuIGFybXMgYW5kIHNvbGRpZXJ5LCBhbmQgcmF2YWdlIHRoZW0sIGFuZCB0aHVzIHRvIHRyYW5zZmVyIHRoZSB3YXIgZnJvbSBJdGFseSB0aGl0aGVyLiBUbyB0aGlzIHBvbGljeSBoZSB1cmdlZCB0aGUgcGVvcGxlIHdpdGggYWxsIGhpcyBzb3VsLiBCdXQganVzdCBhdCB0aGlzIHBvaW50IEZhYml1cyB0cmllZCB0byBmaWxsIHRoZSBjaXR5IHdpdGggYWxsIHNvcnRzIG9mIGZlYXIuIFRoZXkgd2VyZSBodXJyeWluZywgaGUgc2FpZCwgdW5kZXIgdGhlIGd1aWRhbmNlIG9mIGEgZm9vbGhhcmR5IHlvdW5nIG1hbiwgaW50byB0aGUgcmVtb3Rlc3QgYW5kIGdyZWF0ZXN0IHBlcmlsLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaGUgc3BhcmVkIG5laXRoZXIgd29yZCBub3IgZGVlZCB3aGljaCBoZSB0aG91Z2h0IG1pZ2h0IGRldGVyIHRoZSBjaXRpemVucyBmcm9tIHRoaXMgY291cnNlLiBIZSBicm91Z2h0IHRoZSBzZW5hdGUgb3ZlciB0byBoaXMgdmlld3M7IGJ1dCB0aGUgcGVvcGxlIHRob3VnaHQgdGhhdCBoZSBhdHRhY2tlZCBTY2lwaW8gdGhyb3VnaCBqZWFsb3VzeSBvZiBoaXMgc3VjY2VzcywgYW5kIHRoYXQgaGUgd2FzIGFmcmFpZCBsZXN0LCBpZiBTY2lwaW8gcGVyZm9ybWVkIHNvbWUgZ3JlYXQgYW5kIGdsb3Jpb3VzIGV4cGxvaXQgYW5kIGVpdGhlciBwdXQgYW4gZW5kIHRvIHRoZSB3YXIgZW50aXJlbHkgb3IgcmVtb3ZlZCBpdCBvdXQgb2YgSXRhbHksIGhpcyBvd24gZmFpbHVyZSB0byBlbmQgdGhlIHdhciBhZnRlciBhbGwgdGhlc2UgeWVhcnMgd291bGQgYmUgYXR0cmlidXRlZCB0byBzbG90aCBhbmQgY293YXJkaWNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5vdyBDb3JuZWxpdXMgU2NpcGlvIHdhcyBzZW50IGludG8gU3BhaW4sIHdoZXJlIGhlIG5vdCBvbmx5IGNvbnF1ZXJlZCB0aGUgQ2FydGhhZ2luaWFucyBpbiBtYW55IGJhdHRsZXMsIGFuZCBkcm92ZSB0aGVtIG91dCBvZiB0aGUgY291bnRyeSwgYnV0IGFsc28gd29uIG92ZXIgYSBtdWx0aXR1ZGUgb2YgbmF0aW9ucywgYW5kIHRvb2sgZ3JlYXQgY2l0aWVzIHdpdGggc3BsZW5kaWQgc3BvaWxzLCBzbyB0aGF0LCBvbiBoaXMgcmV0dXJuIHRvIFJvbWUsIGhlIGVuam95ZWQgYW4gaW5jb21wYXJhYmxlIGZhdm91ciBhbmQgZmFtZSwgYW5kIHdhcyBtYWRlIGNvbnN1bC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwNSBCLkMuPC9ub3RlPiBQZXJjZWl2aW5nIHRoYXQgdGhlIHBlb3BsZSBkZW1hbmRlZCBhbmQgZXhwZWN0ZWQgYSBncmVhdCBhY2hpZXZlbWVudCBmcm9tIGhpbSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIHJlZ2FyZGVkIHRoZSBoYW5kIHRvIGhhbmQgc3RydWdnbGUgd2l0aGluIEhhbm5pYmFsIHRoZXJlIGluIEl0YWx5IGFzIHZlcnkgYW50aXF1YXRlZCBhbmQgc2VuaWxlIHBvbGljeSwgYW5kIHB1cnBvc2VkIHRvIGZpbGwgTGlieWEgYXQgb25jZSwgYW5kIHRoaW5lIHRlcnJpdG9yeSBvZiBDYXJ0aGFnZSBpdHNlbGYsIHdpdGggUm9tYW4gYXJtcyBhbmQgc29sZGllcnksIGFuZCByYXZhZ2UgdGhlbSwgYW5kIHRodXMgdG8gdHJhbnNmZXIgdGhlIHdhciBmcm9tIEl0YWx5IHRoaXRoZXIuIFRvIHRoaXMgcG9saWN5IGhlIHVyZ2VkIHRoZSBwZW9wbGUgd2l0aCBhbGwgaGlzIHNvdWwuIEJ1dCBqdXN0IGF0IHRoaXMgcG9pbnQgRmFiaXVzIHRyaWVkIHRvIGZpbGwgdGhlIGNpdHkgd2l0aCBhbGwgc29ydHMgb2YgZmVhci4gVGhleSB3ZXJlIGh1cnJ5aW5nLCBoZSBzYWlkLCB1bmRlciB0aGUgZ3VpZGFuY2Ugb2YgYSBmb29saGFyZHkgeW91bmcgbWFuLCBpbnRvIHRoZSByZW1vdGVzdCBhbmQgZ3JlYXRlc3QgcGVyaWwsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoZSBzcGFyZWQgbmVpdGhlciB3b3JkIG5vciBkZWVkIHdoaWNoIGhlIHRob3VnaHQgbWlnaHQgZGV0ZXIgdGhlIGNpdGl6ZW5zIGZyb20gdGhpcyBjb3Vyc2UuIEhlIGJyb3VnaHQgdGhlIHNlbmF0ZSBvdmVyIHRvIGhpcyB2aWV3czsgYnV0IHRoZSBwZW9wbGUgdGhvdWdodCB0aGF0IGhlIGF0dGFja2VkIFNjaXBpbyB0aHJvdWdoIGplYWxvdXN5IG9mIGhpcyBzdWNjZXNzLCBhbmQgdGhhdCBoZSB3YXMgYWZyYWlkIGxlc3QsIGlmIFNjaXBpbyBwZXJmb3JtZWQgc29tZSBncmVhdCBhbmQgZ2xvcmlvdXMgZXhwbG9pdCBhbmQgZWl0aGVyIHB1dCBhbiBlbmQgdG8gdGhlIHdhciBlbnRpcmVseSBvciByZW1vdmVkIGl0IG91dCBvZiBJdGFseSwgaGlzIG93biBmYWlsdXJlIHRvIGVuZCB0aGUgd2FyIGFmdGVyIGFsbCB0aGVzZSB5ZWFycyB3b3VsZCBiZSBhdHRyaWJ1dGVkIHRvIHNsb3RoIGFuZCBjb3dhcmRpY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBpdCBpcyBsaWtlbHkgdGhhdCBGYWJpdXMgYmVnYW4gdGhpcyBvcHBvc2l0aW9uIG91dCBvZiBoaXMgZ3JlYXQgY2F1dGlvbiBhbmQgcHJ1ZGVuY2UsIGluIGZlYXIgb2YgdGhlIGRhbmdlciwgd2hpY2ggd2FzIGdyZWF0OyBidXQgdGhhdCBoZSBncmV3IG1vcmUgdmlvbGVudCBhbmQgd2VudCB0byBncmVhdGVyIGxlbmd0aHMgaW4gaGlzIG9wcG9zaXRpb24gb3V0IG9mIGFtYml0aW9uIGFuZCByaXZhbHJ5LCBpbiBhbiBhdHRlbXB0IHRvIGNoZWNrIHRoZSByaXNpbmcgaW5mbHVlbmNlIG9mIFNjaXBpby4gRm9yIGhlIGV2ZW4gdHJpZWQgdG8gcGVyc3VhZGUgQ3Jhc3N1cywgU2NpcGlvJ3MgY29sbGVhZ3VlIGluIHRoZSBjb25zdWxzaGlwLCBub3QgdG8gc3VycmVuZGVyIHRoZSBjb21tYW5kIG9mIHRoZSBhcm15IGFuZCBub3QgdG8geWllbGQgdG8gU2NpcGlvLCBidXQgdG8gcHJvY2VlZCBpbiBwZXJzb24gYWdhaW5zdCBDYXJ0aGFnZSwgaWYgdGhhdCBwb2xpY3kgd2VyZSBhZG9wdGVkLiBIZSBhbHNvIHByZXZlbnRlZCB0aGUgZ3JhbnRpbmcgb2YgbW9uZXlzIGZvciB0aGUgd2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgbW9uZXlzLCBzaW5jZSBoZSB3YXMgb2JsaWdlZCB0byBwcm92aWRlIHRoZW0gZm9yIGhpbXNlbGYsIFNjaXBpbyBjb2xsZWN0ZWQgdGhlbSBvbiBoaXMgcHJpdmF0ZSBhY2NvdW50IGZyb20gdGltZSBjaXRpZXMgb2YgRXRydXJpYSwgd2hpY2ggd2VyZSBkZXZvdGVkbHkgYXR0YWNoZWQgdG8gaGltOyBhbmQgYXMgZm9yIENyYXNzdXMsIGl0IHdhcyBwYXJ0bHkgaGlzIG5hdHVyZSwgd2hpY2ggd2FzIG5vdCBjb250ZW50aW91cywgYnV0IGdlbnRsZSwgdGhhdCBrZXB0IGhpbSBhdCBob21lLCBhbmQgcGFydGx5IGFsc28gYSByZWxpZ2lvdXMgY3VzdG9tLCBmb3IgaGUgd2FzIHBvbnRpZmV4IG1heGltdXMsIG9yIEhpZ2ggUHJpZXN0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdyBpdCBpcyBsaWtlbHkgdGhhdCBGYWJpdXMgYmVnYW4gdGhpcyBvcHBvc2l0aW9uIG91dCBvZiBoaXMgZ3JlYXQgY2F1dGlvbiBhbmQgcHJ1ZGVuY2UsIGluIGZlYXIgb2YgdGhlIGRhbmdlciwgd2hpY2ggd2FzIGdyZWF0OyBidXQgdGhhdCBoZSBncmV3IG1vcmUgdmlvbGVudCBhbmQgd2VudCB0byBncmVhdGVyIGxlbmd0aHMgaW4gaGlzIG9wcG9zaXRpb24gb3V0IG9mIGFtYml0aW9uIGFuZCByaXZhbHJ5LCBpbiBhbiBhdHRlbXB0IHRvIGNoZWNrIHRoZSByaXNpbmcgaW5mbHVlbmNlIG9mIFNjaXBpby4gRm9yIGhlIGV2ZW4gdHJpZWQgdG8gcGVyc3VhZGUgQ3Jhc3N1cywgU2NpcGlvJ3MgY29sbGVhZ3VlIGluIHRoZSBjb25zdWxzaGlwLCBub3QgdG8gc3VycmVuZGVyIHRoZSBjb21tYW5kIG9mIHRoZSBhcm15IGFuZCBub3QgdG8geWllbGQgdG8gU2NpcGlvLCBidXQgdG8gcHJvY2VlZCBpbiBwZXJzb24gYWdhaW5zdCBDYXJ0aGFnZSwgaWYgdGhhdCBwb2xpY3kgd2VyZSBhZG9wdGVkLiBIZSBhbHNvIHByZXZlbnRlZCB0aGUgZ3JhbnRpbmcgb2YgbW9uZXlzIGZvciB0aGUgd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBtb25leXMsIHNpbmNlIGhlIHdhcyBvYmxpZ2VkIHRvIHByb3ZpZGUgdGhlbSBmb3IgaGltc2VsZiwgU2NpcGlvIGNvbGxlY3RlZCB0aGVtIG9uIGhpcyBwcml2YXRlIGFjY291bnQgZnJvbSB0aW1lIGNpdGllcyBvZiBFdHJ1cmlhLCB3aGljaCB3ZXJlIGRldm90ZWRseSBhdHRhY2hlZCB0byBoaW07IGFuZCBhcyBmb3IgQ3Jhc3N1cywgaXQgd2FzIHBhcnRseSBoaXMgbmF0dXJlLCB3aGljaCB3YXMgbm90IGNvbnRlbnRpb3VzLCBidXQgZ2VudGxlLCB0aGF0IGtlcHQgaGltIGF0IGhvbWUsIGFuZCBwYXJ0bHkgYWxzbyBhIHJlbGlnaW91cyBjdXN0b20sIGZvciBoZSB3YXMgcG9udGlmZXggbWF4aW11cywgb3IgSGlnaCBQcmllc3QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBGYWJpdXMgdG9vayBhbm90aGVyIHdheSB0byBvcHBvc2UgU2NpcGlvLCBhbmQgdHJpZWQgdG8gaGluZGVyIGFuZCByZXN0cmFpbiB0aGUgeW91bmcgbWVuIHdobyB3ZXJlIGVhZ2VyIHRvIHNlcnZlIHVuZGVyIGhpbSwgY3J5aW5nIG91dCBpbiBzZXNzaW9ucyBvZiB0aGUgc2VuYXRlIGFuZCB0aGUgYXNzZW1ibHkgdGhhdCBpdCB3YXMgbm90IFNjaXBpbyBoaW1zZWxmIG9ubHkgd2hvIHdhcyBydW5uaW5nIGF3YXkgZnJvbSBIYW5uaWJhbCwgYnV0IHRoYXQgaGUgd2FzIHNhaWxpbmcgb2ZmIGZyb20gSXRhbHkgd2l0aCBoZXIgcmVzZXJ2ZSBmb3JjZXMsIHBsYXlpbmcgdXBvbiB0aGUgaG9wZXMgb2YgaGVyIHlvdW5nIG1lbiwgYW5kIHBlcnN1YWRpbmcgdGhlbSB0byBhYmFuZG9uIHRoZWlyIHBhcmVudHMsIHRoZWlyIHdpdmVzLCBhbmQgdGhlaXIgY2l0eSwgYWx0aG91Z2ggdGhlIGVuZW15IHN0aWxsIHNhdCBhdCBoZXIgZ2F0ZXMsIG1hc3RlcmZ1bCBhbmQgdW5kZWZlYXRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHZlcmlseSBoZSBmcmlnaHRlbmVkIHRoZSBSb21hbnMgd2l0aCB0aGVzZSBzcGVlY2hlcywgYW5kIHRoZXkgZGVjcmVlZCB0aGF0IFNjaXBpbyBzaG91bGQgZW1wbG95IG9ubHkgdGhlIGZvcmNlcyB3aGljaCB3ZXJlIHRoZW4gaW4gU2ljaWx5LCBhbmQgdGFrZSB3aXRoIGhpbSBvbmx5IHRocmVlIGh1bmRyZWQgb2YgdGhlIG1lbiB3aG8gaGFkIGJlZW4gd2l0aCBoaW0gaW4gU3BhaW4s4oCUbWVuIHdobyBoYWQgc2VydmVkIGhpbSBmYWl0aGZ1bGx5LiBJbiB0aGlzIGNvdXJzZSwgYXQgYW55IHJhdGUsIEZhYml1cyBzZWVtcyB0byBoYXZlIGJlZW4gaW5mbHVlbmNlZCBieSBoaXMgb3duIGNhdXRpb3VzIHRlbXBlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIEZhYml1cyB0b29rIGFub3RoZXIgd2F5IHRvIG9wcG9zZSBTY2lwaW8sIGFuZCB0cmllZCB0byBoaW5kZXIgYW5kIHJlc3RyYWluIHRoZSB5b3VuZyBtZW4gd2hvIHdlcmUgZWFnZXIgdG8gc2VydmUgdW5kZXIgaGltLCBjcnlpbmcgb3V0IGluIHNlc3Npb25zIG9mIHRoZSBzZW5hdGUgYW5kIHRoZSBhc3NlbWJseSB0aGF0IGl0IHdhcyBub3QgU2NpcGlvIGhpbXNlbGYgb25seSB3aG8gd2FzIHJ1bm5pbmcgYXdheSBmcm9tIEhhbm5pYmFsLCBidXQgdGhhdCBoZSB3YXMgc2FpbGluZyBvZmYgZnJvbSBJdGFseSB3aXRoIGhlciByZXNlcnZlIGZvcmNlcywgcGxheWluZyB1cG9uIHRoZSBob3BlcyBvZiBoZXIgeW91bmcgbWVuLCBhbmQgcGVyc3VhZGluZyB0aGVtIHRvIGFiYW5kb24gdGhlaXIgcGFyZW50cywgdGhlaXIgd2l2ZXMsIGFuZCB0aGVpciBjaXR5LCBhbHRob3VnaCB0aGUgZW5lbXkgc3RpbGwgc2F0IGF0IGhlciBnYXRlcywgbWFzdGVyZnVsIGFuZCB1bmRlZmVhdGVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB2ZXJpbHkgaGUgZnJpZ2h0ZW5lZCB0aGUgUm9tYW5zIHdpdGggdGhlc2Ugc3BlZWNoZXMsIGFuZCB0aGV5IGRlY3JlZWQgdGhhdCBTY2lwaW8gc2hvdWxkIGVtcGxveSBvbmx5IHRoZSBmb3JjZXMgd2hpY2ggd2VyZSB0aGVuIGluIFNpY2lseSwgYW5kIHRha2Ugd2l0aCBoaW0gb25seSB0aHJlZSBodW5kcmVkIG9mIHRoZSBtZW4gd2hvIGhhZCBiZWVuIHdpdGggaGltIGluIFNwYWluLOKAlG1lbiB3aG8gaGFkIHNlcnZlZCBoaW0gZmFpdGhmdWxseS4gSW4gdGhpcyBjb3Vyc2UsIGF0IGFueSByYXRlLCBGYWJpdXMgc2VlbXMgdG8gaGF2ZSBiZWVuIGluZmx1ZW5jZWQgYnkgaGlzIG93biBjYXV0aW91cyB0ZW1wZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnV0IGFzIHNvb24gYXMgU2NpcGlvIGhhZCBjcm9zc2VkIGludG8gQWZyaWNhLCB0aWRpbmdzIHdlcmUgYnJvdWdodDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjA0IEIuQy48L25vdGU+IHRvIFJvbWUgb2Ygd29uZGVyZnVsIGFjaGlldmVtZW50cyBhbmQgb2YgZXhwbG9pdHMgdHJhbnNjZW5kZW50IGluIG1hZ25pdHVkZSBhbmQgc3BsZW5kb3VyLiBUaGVzZSByZXBvcnRzIHdlcmUgY29uZmlybWVkIGJ5IGFidW5kYW50IHNwb2lscyB3aGljaCBmb2xsb3dlZCB0aGVtOyAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZSBraW5nIG9mIE51bWlkaWEgd2FzIHRha2VuIGNhcHRpdmU7IHR3byBvZiB0aGUgZW5lbXkncyBjYW1wcyB3ZXJlIGF0IG9uY2UgZGVzdHJveWVkIGJ5IGZpcmUsIGFuZCBpbiB0aGVtIGEgZ3JlYXQgbnVtYmVyIG9mIG1lbiwgYXJtcywgYW5kIGhvcnNlczsgZW1iYXNzaWVzIHdlcmUgc2VudCBmcm9tIENhcnRoYWdlIHRvIEhhbm5pYmFsIHVyZ2VudGx5IGNhbGxpbmcgdXBvbiBoaW0gdG8gZ2l2ZSB1cCBoaXMgZnJ1aXRsZXNzIGhvcGVzIGluIEl0YWx5IGFuZCBjb21lIHRvIHRoZSBhaWQgb2YgaGlzIG5hdGl2ZSBjaXR5Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMC4xOSIgdmFsaWQ9InllcyI+TGl2eSwgeHh4LiAxOS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd2hlbiBldmVyeSB0b25ndWUgaW4gUm9tZSB3YXMgZHdlbGxpbmcgb24gdGhlIHRoZW1lIG9mIFNjaXBpb3Mgc3VjY2Vzc2VzLCB0aGVuIEZhYml1cyBkZW1hbmRlZCB0aGF0IGEgc3VjY2Vzc29yIHNob3VsZCBiZSBzZW50IG91dCB0byByZXBsYWNlIGhpbS4gSGUgZ2F2ZSBubyBvdGhlciByZWFzb24sIGJ1dCB1cmdlZCB0aGUgd2VsbCByZW1lbWJlcmVkIG1heGltIHRoYXQgaXQgd2FzIGRhbmdlcm91cyB0byBlbnRydXN0IHN1Y2ggdmFzdCBpbnRlcmVzdHMgdG8gdGhlIGZvcnR1bmUgb2YgYSBzaW5nbGUgbWFuLCBzaW5jZSBpdCB3YXMgZGlmZmljdWx0IGZvciB0aGUgc2FtZSBtYW4gdG8gaGF2ZSBnb29kIGZvcnR1bmUgYWx3YXlzLiBCeSB0aGlzIGNvdXJzZSBoZSBnYXZlIG9mZmVuY2Ugbm93IHRvIG1hbnksIHdobyB0aG91Z2h0IGhpbSBhIGNhcHRpb3VzIGFuZCBtYWxpY2lvdXMgbWFuLCBvciBvbmUgd2hvc2Ugb2xkIGFnZSBoYWQgcm9iYmVkIGhpbSB1dHRlcmx5IG9mIGNvdXJhZ2UgYW5kIGNvbmZpZGVuY2UsIHNvIHRoYXQgaGUgd2FzIGltbW9kZXJhdGVseSBpbiBhd2Ugb2YgSGFubmliYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3QgZXZlbiBhZnRlciBIYW5uaWJhbCBhbmQgaGlzIGFybXkgaGFkIHNhaWxlZCBhd2F5IGZyb20gSXRhbHk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4yMDMgQi5DLjwvbm90ZT4gd291bGQgaGUgc3VmZmVyIHRoZSByZWpvaWNpbmcgYW5kIGZyZXNoIGNvdXJhZ2Ugb2YgdGhlIGNpdGl6ZW5zIHRvIGJlIHVuZGlzdHVyYmVkIGFuZCBhc3N1cmVkLCBidXQgdGhlbiBldmVuIG1vcmUgdGhhbiBldmVyIGhlIGluc2lzdGVkIHRoYXQgdGhlIGNpdHkgd2FzIHJ1bm5pbmcgaW50byBleHRyZW1lc3QgcGVyaWwgYW5kIHRoYXQgaGVyIGFmZmFpcnMgd2VyZSBpbiBhIGRhbmdlcm91cyBwbGlnaHQuIEZvciBIYW5uaWJhbCwgaGUgc2FpZCwgd291bGQgZmFsbCB1cG9uIHRoZW0gd2l0aCBhbGwgdGhlIGdyZWF0ZXIgZWZmZWN0IGluIEFmcmljYSBhdCB0aGUgZ2F0ZXMgb2YgQ2FydGhhZ2UsIGFuZCBTY2lwaW8gd291bGQgYmUgY29uZnJvbnRlZCB3aXRoaW4gYW4gYXJteSB5ZXQgd2FybSB3aXRoIHRoZSBibG9vZCBvZiBtYW55IGltcG9ydGVycywgZGljdGF0b3JzLCBhbmQgY29uc3Vscy4gQ29uc2VxdWVudGx5LCB0aGUgY2l0eSB3YXMgb25jZSBtb3JlIGNvbmZvdW5kZWQgYnkgdGhlc2Ugc3BlZWNoZXMsIGFuZCBhbHRob3VnaCB0aGUgd2FyIGhhZCBiZWVuIHJlbW92ZWQgdG8gQWZyaWNhLCB0aGV5IHRob3VnaHQgaXRzIHRlcnJvcnMgd2VyZSBuZWFyZXIgUm9tZS4KCQkJPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwNCBCLkMuPC9ub3RlPiB0byBSb21lIG9mIHdvbmRlcmZ1bCBhY2hpZXZlbWVudHMgYW5kIG9mIGV4cGxvaXRzIHRyYW5zY2VuZGVudCBpbiBtYWduaXR1ZGUgYW5kIHNwbGVuZG91ci4gVGhlc2UgcmVwb3J0cyB3ZXJlIGNvbmZpcm1lZCBieSBhYnVuZGFudCBzcG9pbHMgd2hpY2ggZm9sbG93ZWQgdGhlbTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZSBraW5nIG9mIE51bWlkaWEgd2FzIHRha2VuIGNhcHRpdmU7IHR3byBvZiB0aGUgZW5lbXkncyBjYW1wcyB3ZXJlIGF0IG9uY2UgZGVzdHJveWVkIGJ5IGZpcmUsIGFuZCBpbiB0aGVtIGEgZ3JlYXQgbnVtYmVyIG9mIG1lbiwgYXJtcywgYW5kIGhvcnNlczsgZW1iYXNzaWVzIHdlcmUgc2VudCBmcm9tIENhcnRoYWdlIHRvIEhhbm5pYmFsIHVyZ2VudGx5IGNhbGxpbmcgdXBvbiBoaW0gdG8gZ2l2ZSB1cCBoaXMgZnJ1aXRsZXNzIGhvcGVzIGluIEl0YWx5IGFuZCBjb21lIHRvIHRoZSBhaWQgb2YgaGlzIG5hdGl2ZSBjaXR5Ozxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49Ikxpdi4gMzAuMTkiIHZhbGlkPSJ5ZXMiPkxpdnksIHh4eC4gMTkuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMwLjE5IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHguIDE5LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB3aGVuIGV2ZXJ5IHRvbmd1ZSBpbiBSb21lIHdhcyBkd2VsbGluZyBvbiB0aGUgdGhlbWUgb2YgU2NpcGlvcyBzdWNjZXNzZXMsIHRoZW4gRmFiaXVzIGRlbWFuZGVkIHRoYXQgYSBzdWNjZXNzb3Igc2hvdWxkIGJlIHNlbnQgb3V0IHRvIHJlcGxhY2UgaGltLiBIZSBnYXZlIG5vIG90aGVyIHJlYXNvbiwgYnV0IHVyZ2VkIHRoZSB3ZWxsIHJlbWVtYmVyZWQgbWF4aW0gdGhhdCBpdCB3YXMgZGFuZ2Vyb3VzIHRvIGVudHJ1c3Qgc3VjaCB2YXN0IGludGVyZXN0cyB0byB0aGUgZm9ydHVuZSBvZiBhIHNpbmdsZSBtYW4sIHNpbmNlIGl0IHdhcyBkaWZmaWN1bHQgZm9yIHRoZSBzYW1lIG1hbiB0byBoYXZlIGdvb2QgZm9ydHVuZSBhbHdheXMuIEJ5IHRoaXMgY291cnNlIGhlIGdhdmUgb2ZmZW5jZSBub3cgdG8gbWFueSwgd2hvIHRob3VnaHQgaGltIGEgY2FwdGlvdXMgYW5kIG1hbGljaW91cyBtYW4sIG9yIG9uZSB3aG9zZSBvbGQgYWdlIGhhZCByb2JiZWQgaGltIHV0dGVybHkgb2YgY291cmFnZSBhbmQgY29uZmlkZW5jZSwgc28gdGhhdCBoZSB3YXMgaW1tb2RlcmF0ZWx5IGluIGF3ZSBvZiBIYW5uaWJhbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3QgZXZlbiBhZnRlciBIYW5uaWJhbCBhbmQgaGlzIGFybXkgaGFkIHNhaWxlZCBhd2F5IGZyb20gSXRhbHk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwMyBCLkMuPC9ub3RlPiB3b3VsZCBoZSBzdWZmZXIgdGhlIHJlam9pY2luZyBhbmQgZnJlc2ggY291cmFnZSBvZiB0aGUgY2l0aXplbnMgdG8gYmUgdW5kaXN0dXJiZWQgYW5kIGFzc3VyZWQsIGJ1dCB0aGVuIGV2ZW4gbW9yZSB0aGFuIGV2ZXIgaGUgaW5zaXN0ZWQgdGhhdCB0aGUgY2l0eSB3YXMgcnVubmluZyBpbnRvIGV4dHJlbWVzdCBwZXJpbCBhbmQgdGhhdCBoZXIgYWZmYWlycyB3ZXJlIGluIGEgZGFuZ2Vyb3VzIHBsaWdodC4gRm9yIEhhbm5pYmFsLCBoZSBzYWlkLCB3b3VsZCBmYWxsIHVwb24gdGhlbSB3aXRoIGFsbCB0aGUgZ3JlYXRlciBlZmZlY3QgaW4gQWZyaWNhIGF0IHRoZSBnYXRlcyBvZiBDYXJ0aGFnZSwgYW5kIFNjaXBpbyB3b3VsZCBiZSBjb25mcm9udGVkIHdpdGhpbiBhbiBhcm15IHlldCB3YXJtIHdpdGggdGhlIGJsb29kIG9mIG1hbnkgaW1wb3J0ZXJzLCBkaWN0YXRvcnMsIGFuZCBjb25zdWxzLiBDb25zZXF1ZW50bHksIHRoZSBjaXR5IHdhcyBvbmNlIG1vcmUgY29uZm91bmRlZCBieSB0aGVzZSBzcGVlY2hlcywgYW5kIGFsdGhvdWdoIHRoZSB3YXIgaGFkIGJlZW4gcmVtb3ZlZCB0byBBZnJpY2EsIHRoZXkgdGhvdWdodCBpdHMgdGVycm9ycyB3ZXJlIG5lYXJlciBSb21lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2hvcnRseSBhZnRlcndhcmQgU2NpcGlvIHV0dGVybHkgZGVmZWF0ZWQgSGFubmliYWwgaGltc2VsZiBpbiBiYXR0bGUsIGh1bWJsZWQgYW5kIHRyb2QgdW5kZXIgZm9vdCB0aGUgcHJpZGUgb2YgZmFsbGVuIENhcnRoYWdlLCByZXN0b3JlZCB0byBoaXMgZmVsbG93LWNpdGl6ZW5zIGEgam95IHRoYXQgc3VycGFzc2VkIGFsbCB0aGVpciBob3BlcywgYW5kIGluIHZlcnkgdHJ1dGggCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5yaWdodGVkIG9uY2UgbW9yZTwvcT4gdGhlIHNoaXAgb2YgdGhlaXIgc3VwcmVtYWN5LCB3aGljaCBoYWQgYmVlbiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNoYWtlbiBpbiBhIGhlYXZ5IHN1cmdlLjwvcT4gRmFiaXVzIE1heGltdXMsIGhvd2V2ZXIsIGRpZCBub3QgbGl2ZSB0byBzZWUgdGhlIGVuZCBvZiB0aGUgd2FyLCBtaW5vciBkaWQgaGUgZXZlbiBoZWFyIG9mIEhhbm5pYmFsJ3MgZGVmZWF0LCBub3IgYmVob2xkIHRoZSBncmVhdCBhbmQgYXNzdXJlZCBwcm9zcGVyaXR5IG9mIHRoZSBjb3VudHJ5LCBidXQgYXQgYWJvdXQgdGhlIHRpbWUgd2hlbiBIYW5uaWJhbCBzZXQgc2FpbCBmcm9tIEl0YWx5LCBoZSBmZWxsIHNpY2sgYW5kIGRpZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MjAzIEIuQy4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMwLjI2IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHguIDI2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkVwYW1pbm9uZGFzLCBpdCBpcyB0cnVlLCB3YXMgYnVyaWVkIGJ5IHRoZSBUaGViYW5zIGF0IHRoZSBwdWJsaWMgY29zdCwgYmVjYXVzZSBvZiB0aGUgcG92ZXJ0eSBpbiB3aGljaCBoZSBkaWVkLCBmb3IgaXQgaXMgc2FpZCB0aGF0IG5vdGhpbmcgd2FzIGZvdW5kIGluIGhpcyBob3VzZSBhZnRlciBoaXMgZGVhdGggZXhjZXB0IGEgcGllY2Ugb2YgaXJvbiBtb25leS4gRmFiaXVzLCBob3dldmVyLCB3YXMgbm90IGJ1cmllZCBieSB0aGUgUm9tYW5zIGF0IHRoZSBwdWJsaWMgY2hhcmdlLCBidXQgZWFjaCBwcml2YXRlIGNpdGl6ZW4gY29udHJpYnV0ZWQgdGhlIHNtYWxsZXN0IGNvaW4gaW4gaGlzIHBvc3Nlc3Npb24sIG5vdCBiZWNhdXNlIGhpcyBwb3ZlcnR5IGNhbGxlZCBmb3IgdGhlaXIgYWlkLCBidXQgYmVjYXVzZSB0aGUgcGVvcGxlIGZlbHQgdGhhdCBpdCB3YXMgYnVyeWluZyBhIGZhdGhlciwgd2hvc2UgZGVhdGggdGh1cyByZWNlaXZlZCBob25vdXIgYW5kIHJlZ2FyZCBiZWZpdHRpbmcgaGlzIGxpZmUuCgkJCTwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNob3J0bHkgYWZ0ZXJ3YXJkIFNjaXBpbyB1dHRlcmx5IGRlZmVhdGVkIEhhbm5pYmFsIGhpbXNlbGYgaW4gYmF0dGxlLCBodW1ibGVkIGFuZCB0cm9kIHVuZGVyIGZvb3QgdGhlIHByaWRlIG9mIGZhbGxlbiBDYXJ0aGFnZSwgcmVzdG9yZWQgdG8gaGlzIGZlbGxvdy1jaXRpemVucyBhIGpveSB0aGF0IHN1cnBhc3NlZCBhbGwgdGhlaXIgaG9wZXMsIGFuZCBpbiB2ZXJ5IHRydXRoIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5yaWdodGVkIG9uY2UgbW9yZTwvcT4gdGhlIHNoaXAgb2YgdGhlaXIgc3VwcmVtYWN5LCB3aGljaCBoYWQgYmVlbiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c2hha2VuIGluIGEgaGVhdnkgc3VyZ2UuPC9xPiBGYWJpdXMgTWF4aW11cywgaG93ZXZlciwgZGlkIG5vdCBsaXZlIHRvIHNlZSB0aGUgZW5kIG9mIHRoZSB3YXIsIG1pbm9yIGRpZCBoZSBldmVuIGhlYXIgb2YgSGFubmliYWwncyBkZWZlYXQsIG5vciBiZWhvbGQgdGhlIGdyZWF0IGFuZCBhc3N1cmVkIHByb3NwZXJpdHkgb2YgdGhlIGNvdW50cnksIGJ1dCBhdCBhYm91dCB0aGUgdGltZSB3aGVuIEhhbm5pYmFsIHNldCBzYWlsIGZyb20gSXRhbHksIGhlIGZlbGwgc2ljayBhbmQgZGllZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjIwMyBCLkMuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJMaXYuIDMwLjI2IiB2YWxpZD0ieWVzIj5MaXZ5LCB4eHguIDI2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iTGl2LiAzMC4yNiIgdmFsaWQ9InllcyI+TGl2eSwgeHh4LiAyNi48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
