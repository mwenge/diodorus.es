var translation={}
translation['54.Intro.1'] = ""
translation['54.Intro.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmb3IgdGhpcyB5b3UKICAgICAgICAgICAgICAgICAgICB3aWxsIGFsbCBwYXJkb24gbWUsIEkgYW0gc3VyZSwgd2hlbiB5b3UgaGVhciB3aGF0IEkgaGF2ZSBzdWZmZXJlZC4gRm9yLCBncmlldm91cwogICAgICAgICAgICAgICAgICAgIGFzIHdhcyB0aGUgaW5qdXJ5IHdoaWNoIGF0IHRoYXQgdGltZSBmZWxsIHRvIG15IGxvdCwgaXQgd2FzIG5vIG1vcmUgc28gdGhhbiB0aGUKICAgICAgICAgICAgICAgICAgICBzdWJzZXF1ZW50IGluc3VsdHMgb2YgdGhlIGRlZmVuZGFudC4gSSBhc2sgYXMgbXkgcmlnaHQsIHRoZXJlZm9yZSwgYW5kIGltcGxvcmUKICAgICAgICAgICAgICAgICAgICB5b3UgYWxsIHdpdGhvdXQgZGlzdGluY3Rpb24sIHRvIGxpc3RlbiB3aXRoIGdvb2R3aWxsLCB3aGlsZSBJIHRlbGwgeW91IHdoYXQgSQogICAgICAgICAgICAgICAgICAgIGhhdmUgc3VmZmVyZWQsIGFuZCB0aGVuLCBpZiB5b3UgdGhpbmsgdGhhdCBJIGhhdmUgYmVlbiB0aGUgdmljdGltIG9mIHdyb25nZnVsCiAgICAgICAgICAgICAgICAgICAgYW5kIGxhd2xlc3MgYWN0cywgdG8gcmVuZGVyIG1lIHRoZSBhaWQgd2hpY2ggaXMgbXkgZHVlLiBJIHNoYWxsIHN0YXRlIHRvIHlvdQogICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGJlZ2lubmluZyBlYWNoIGluY2lkZW50IGFzIGl0IG9jY3VycmVkIGluIHRoZSBmZXdlc3Qgd29yZHMgSSBjYW4uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['54.Narr.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJOYXJyIiB1bml0PSJwYXJ0IiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ud28geWVhcnMgYWdvIEkgd2VudCBvdXQgdG8gUGFuYWN0dW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBhbmFjdHVtIHdhcyBhbiBBdGhlbmlhbiBmb3J0IG9uIHRoZSBib3JkZXJzIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODMiPkJvZW90aWE8L3BsYWNlTmFtZT4uIEFuIGV4cGVkaXRpb24gdG8gdGhpcyBwb2ludCBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRhdGUgYXV0aG5hbWU9Ii0zNDMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNDMiPjM0MzwvZGF0ZT4gQi5DIC4gaXMgbWVudGlvbmVkIGJ5IERlbW9zdGhlbmVzIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gMTkuMzI2IiB2YWxpZD0ieWVzIj5EZW0uIDE5LjMyNjwvYmlibD4uIEhvd2V2ZXIsIGFzIHdlIGFyZSB0b2xkIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3QuIEF0aC4gUG9sLiA0Mi40IiB2YWxpZD0ieWVzIj5BcmlzdG90LiBBdGguIFBvbC4gNDIuNDwvYmlibD4sIHRoYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJTPhs63zrLOv865PC9mb3JlaWduPiDvvIh5b3VuZyBtZW4gb2YgbWlsaXRhcnkKICAgICAgICAgICAgICAgICAgICAgICAgYWdl77yJLCBpbiB0aGUgc2Vjb25kIHllYXIgb2YgdGhlaXIgdHJhaW5pbmcsIHBhdHJvbGxlZCB0aGUgY291bnRyeQogICAgICAgICAgICAgICAgICAgICAgICBhbmQgc3BlbnQgdGhlaXIgc3BhcmUgdGltZSBpbiB0aGUgZm9ydHMsIGl0IG1heSBiZSB0aGF0IG5vIGZvcm1hbCBtaWxpdGFyeQogICAgICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uIGlzIG1lYW50LiBJbiB0aGF0IGNhc2UgdGhlIGxvb3NlIGRpc2NpcGxpbmUgaXMgbW9yZQogICAgICAgICAgICAgICAgICAgICAgICB1bmRlcnN0YW5kYWJsZS48L25vdGU+IHdoZXJlIHdlIGhhZCBiZWVuIG9yZGVyZWQgdG8gZG8gZ2Fycmlzb24gZHV0eS4gVGhlCiAgICAgICAgICAgICAgICAgICAgc29ucyBvZiB0aGUgZGVmZW5kYW50LCA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgzIj5Cb2VvdGlhPC9wbGFjZU5hbWU+LiBBbiBleHBlZGl0aW9uIHRvIHRoaXMgcG9pbnQgaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlIGF1dGhuYW1lPSItMzQzIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzQzIj4zNDM8L2RhdGU+IEIuQyAuIGlzIG1lbnRpb25lZCBieSBEZW1vc3RoZW5lcyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDE5LjMyNiIgdmFsaWQ9InllcyI+RGVtLiAxOS4zMjY8L2JpYmw+LiBIb3dldmVyLCBhcyB3ZSBhcmUgdG9sZCBieSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcmlzdG90LiBBdGguIFBvbC4gNDIuNCIgdmFsaWQ9InllcyI+QXJpc3RvdC4gQXRoLiBQb2wuIDQyLjQ8L2JpYmw+LCB0aGF0IHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byUz4bOt86yzr/OuTwvZm9yZWlnbj4g77yIeW91bmcgbWVuIG9mIG1pbGl0YXJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGFnZe+8iSwgaW4gdGhlIHNlY29uZCB5ZWFyIG9mIHRoZWlyIHRyYWluaW5nLCBwYXRyb2xsZWQgdGhlIGNvdW50cnkKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHNwZW50IHRoZWlyIHNwYXJlIHRpbWUgaW4gdGhlIGZvcnRzLCBpdCBtYXkgYmUgdGhhdCBubyBmb3JtYWwgbWlsaXRhcnkKICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWRpdGlvbiBpcyBtZWFudC4gSW4gdGhhdCBjYXNlIHRoZSBsb29zZSBkaXNjaXBsaW5lIGlzIG1vcmUKICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJzdGFuZGFibGUuPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+LCBlbmNhbXBlZAogICAgICAgICAgICAgICAgICAgIG5lYXIgdXMsIGFzIEkgd291bGQgdG8gaGVhdmVuIHRoZXkgaGFkIG5vdCBkb25lOyBmb3Igb3VyIG9yaWdpbmFsIGVubWl0eSBhbmQgb3VyCiAgICAgICAgICAgICAgICAgICAgcXVhcnJlbHMgYmVnYW4gaW4gZmFjdCBqdXN0IHRoZXJlLiBIb3cgdGhlc2UgY2FtZSBhYm91dCwgeW91IHNoYWxsIGhlYXIuIFRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWVuIHVzZWQgYWx3YXlzIHRvIHNwZW5kIHRoZSBlbnRpcmUgZGF5IGFmdGVyIGx1bmNoZW9uIGluIGRyaW5raW5nLCBhbmQgdGhleQogICAgICAgICAgICAgICAgICAgIGtlcHQgdGhpcyB1cCBjb250aW51YWxseSBhcyBsb25nIGFzIHdlIHdlcmUgaW4gdGhlIGdhcnJpc29uLiBXZSwgb24gb3VyIHBhcnQsCiAgICAgICAgICAgICAgICAgICAgY29uZHVjdGVkIG91cnNlbHZlcyB3aGlsZSBpbiB0aGUgY291bnRyeSBqdXN0IGFzIHdlIHdlcmUgd29udCB0byBkbyBoZXJlLgogICAgICAgICAgICAgICAgICAgICAgICA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['54.Narr.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIGF0IHdoYXRldmVyIHRpbWUgdGhlIG90aGVycyBtaWdodCBiZQogICAgICAgICAgICAgICAgICAgIGhhdmluZyB0aGVpciBkaW5uZXIsIHRoZXNlIG1lbiB3ZXJlIGFscmVhZHkgZHJ1bmsgYW5kIGFidXNpdmUsIGF0IGZpcnN0IHRvd2FyZAogICAgICAgICAgICAgICAgICAgIG91ciBib2R5LXNsYXZlcywgYnV0IGluIHRoZSBlbmQgdG93YXJkIG91cnNlbHZlcy4gRm9yLCBhbGxlZ2luZyB0aGF0IHRoZSBzbGF2ZXMKICAgICAgICAgICAgICAgICAgICBhbm5veWVkIHRoZW0gd2l0aCBzbW9rZSB3aGlsZSBnZXR0aW5nIGRpbm5lciwgb3Igd2VyZSBpbXB1ZGVudCB0b3dhcmQgdGhlbSwgb3IKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBlbHNlIHRoZXkgcGxlYXNlZCwgdGhleSB1c2VkIHRvIGJlYXQgdGhlbSBhbmQgZW1wdHkgdGhlaXIgY2hhbWJlci1wb3RzCiAgICAgICAgICAgICAgICAgICAgb3ZlciB0aGVtLCBvciBiZWZvdWwgdGhlbSB3aXRoIHVyaW5lOyB0aGVyZSB3YXMgbm90aGluZyBpbiB0aGUgd2F5IG9mIGJydXRhbGl0eQogICAgICAgICAgICAgICAgICAgIGFuZCBvdXRyYWdlIGluIHdoaWNoIHRoZXkgZGlkIG5vdCBpbmR1bGdlLiBXaGVuIHdlIHNhdyB0aGlzLCB3ZSB3ZXJlIGFubm95ZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgYXQgZmlyc3QgZXhwb3N0dWxhdGVkIHdpdGggdGhlbSwgYnV0IHRoZXkgbW9ja2VkIGF0IHVzLCBhbmQgd291bGQgbm90IGRlc2lzdCwKICAgICAgICAgICAgICAgICAgICBhbmQgc28gb3VyIHdob2xlIG1lc3MgaW4gYSBib2R54oCUbm90IEkgYWxvbmUgYXBhcnQgZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICByZXN04oCUd2VudCB0byB0aGUgZ2VuZXJhbCBhbmQgdG9sZCBoaW0gd2hhdCB3YXMgZ29pbmcgb24uIDwvdHJhbnNsYXRpb24+"
translation['54.Narr.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHJlYnVrZWQgdGhlbSB3aXRoIHN0ZXJuIHdvcmRzLCBub3Qgb25seSBmb3IgdGhlaXIKICAgICAgICAgICAgICAgICAgICBicnV0YWwgdHJlYXRtZW50IG9mIHVzLCBidXQgZm9yIHRoZWlyIHdob2xlIGJlaGF2aW9yIGluIGNhbXA7IHlldCBzbyBmYXIgZnJvbQogICAgICAgICAgICAgICAgICAgIGRlc2lzdGluZywgb3IgYmVpbmcgYXNoYW1lZCBvZiB0aGVpciBhY3RzLCB0aGV5IGJ1cnN0IGluIHVwb24gdXMgdGhhdCB2ZXJ5CiAgICAgICAgICAgICAgICAgICAgZXZlbmluZyBhcyBzb29uIGFzIGl0IGdyZXcgZGFyaywgYW5kLCBiZWdpbm5pbmcgd2l0aCBhYnVzaXZlIGxhbmd1YWdlLCB0aGV5CiAgICAgICAgICAgICAgICAgICAgcHJvY2VlZGVkIHRvIGJlYXQgbWUsIGFuZCB0aGV5IG1hZGUgc3VjaCBhIGNsYW1vciBhbmQgdHVtdWx0IGFib3V0IHRoZSB0ZW50LAogICAgICAgICAgICAgICAgICAgIHRoYXQgYm90aCB0aGUgZ2VuZXJhbCBhbmQgdGhlIHRheGlhcmNoczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUKICAgICAgICAgICAgICAgICAgICAgICAgdGF4aWFyY2hzIHdlcmUgdGhlIGNvbW1hbmRlcnMgb2YgdGhlIGluZmFudHJ5IGRldGFjaG1lbnRzIG9mIHRoZSBzZXZlcmFsCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWJlcy48L25vdGU+IGNhbWUgYW5kIHNvbWUgb2YgdGhlIG90aGVyIHNvbGRpZXJzLCBieSB3aG9zZSBjb21pbmcgd2Ugd2VyZQogICAgICAgICAgICAgICAgICAgIHByZXZlbnRlZCBmcm9tIHN1ZmZlcmluZywgb3Igb3Vyc2VsdmVzIGRvaW5nLCBzb21lIGRhbWFnZSB0aGF0IGNvdWxkIG5vdCBiZQogICAgICAgICAgICAgICAgICAgIHJlcGFpcmVkLCBiZWluZyB2aWN0aW1zIGFzIHdlIHdlcmUgb2YgdGhlaXIgZHJ1bmtlbiB2aW9sZW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['54.Narr.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gbWF0dGVycyBoYWQgZ29uZSB0aHVzIGZhciwgaXQgd2FzIG5hdHVyYWwgdGhhdCBhZnRlcgogICAgICAgICAgICAgICAgICAgIG91ciByZXR1cm4gaG9tZSB0aGVyZSBzaG91bGQgZXhpc3QgYmV0d2VlbiB1cyBmZWVsaW5ncyBvZiBhbmdlciBhbmQgaGF0cmVkLgogICAgICAgICAgICAgICAgICAgIEhvd2V2ZXIsIG9uIG15IG93biBwYXJ0IEkgc3dlYXIgYnkgdGhlIGdvZHMgSSBuZXZlciBzYXcgZml0IHRvIGJyaW5nIGFuIGFjdGlvbgogICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlbSwgb3IgdG8gcGF5IGFueSBhdHRlbnRpb24gdG8gd2hhdCBoYWQgaGFwcGVuZWQuIEkgc2ltcGx5IG1hZGUgdGhpcwogICAgICAgICAgICAgICAgICAgIHJlc29sdmXigJRpbiBmdXR1cmUgdG8gYmUgb24gbXkgZ3VhcmQsIGFuZCB0byB0YWtlIGNhcmUgdG8gaGF2ZSBub3RoaW5nCiAgICAgICAgICAgICAgICAgICAgdG8gZG8gd2l0aCBwZW9wbGUgb2YgdGhhdCBzb3J0LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIHdpc2ggaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgZmlyc3QgcGxhY2UgdG8gYnJpbmcgYmVmb3JlIHlvdSBkZXBvc2l0aW9ucyBwcm92aW5nIHRoZXNlIHN0YXRlbWVudHMsIGFuZCB0aGVuCiAgICAgICAgICAgICAgICAgICAgdG8gc2hvdyB3aGF0IEkgaGF2ZSBzdWZmZXJlZCBhdCB0aGUgaGFuZHMgb2YgdGhlIGRlZmVuZGFudCBoaW1zZWxmLCBpbiBvcmRlcgogICAgICAgICAgICAgICAgICAgIHRoYXQgeW91IG1heSBzZWUgdGhhdCBDb25vbiwgd2hvIHNob3VsZCBoYXZlIGRlYWx0IHJpZ29yb3VzbHkgd2l0aCB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBvZmZlbmNlcywgaGFzIGhpbXNlbGYgYWRkZWQgdG8gdGhlc2UgZmFyIG1vcmUgb3V0cmFnZW91cyBhY3RzIG9mIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICAgICAgZG9pbmcuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.Narr.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGVzZSwgdGhlbiwgYXJlCiAgICAgICAgICAgICAgICAgICAgdGhlIGFjdHMgb2Ygd2hpY2ggSSB0aG91Z2h0IHByb3BlciB0byB0YWtlIG5vIGFjY291bnQuIE5vdCBsb25nIGFmdGVyIHRoaXMsCiAgICAgICAgICAgICAgICAgICAgaG93ZXZlciwgb25lIGV2ZW5pbmcsIHdoZW4gSSB3YXMgdGFraW5nIGEgd2FsaywgYXMgbXkgY3VzdG9tIHdhcywgaW4gdGhlIGFnb3JhCiAgICAgICAgICAgICAgICAgICAgd2l0aCBQaGFub3N0cmF0dXMgb2YgQ2VwaGlzaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNlcGhpc2lhLCBhIGRlbWUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRyaWJlIEVyZWN0aGXDr3MuPC9ub3RlPiBhIG1hbiBvZiBteSBvd24gYWdlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHN1Z2dlc3RzIHRoYXQgdGhleSB3ZXJlIGluIHRoZSBzYW1lIG1pbGl0YXJ5CiAgICAgICAgICAgICAgICAgICAgICAgIGFnZS1jbGFzcywgYW5kIG1heSBoYXZlIGJlZW4gdG9nZXRoZXIgaW4gY2FtcCBhdCBQYW5hY3R1bS48L25vdGU+IEN0ZXNpYXMsCiAgICAgICAgICAgICAgICAgICAgdGhlIHNvbiBvZiB0aGUgZGVmZW5kYW50LCBwYXNzZWQgYnkgbWUgaW4gYSBkcnVua2VuIHN0YXRlIG9wcG9zaXRlIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBMZW9jb3Jpb24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoaXMgd2FzIGEgbW9udW1lbnQgZXJlY3RlZCBpbgogICAgICAgICAgICAgICAgICAgICAgICBob25vciBvZiB0aGUgdGhyZWUgZGF1Z2h0ZXJzIG9mIExlb3MsIHdob20sIGluIG9iZWRpZW5jZSB0byBhbiBvcmFjbGUsIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgIGZhdGhlciBoYWQgc2FjcmlmaWNlZCBmb3IgdGhlIHNhZmV0eSBvZiB0aGVpciBjb3VudHJ5Ljwvbm90ZT4gbmVhciB0aGUgaG91c2UKICAgICAgICAgICAgICAgICAgICBvZiBQeXRob2RvcnVzLiBBdCBzaWdodCBvZiB1cyBoZSB1dHRlcmVkIGEgeWVsbCwgYW5kLCBzYXlpbmcgc29tZXRoaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgaGltc2VsZiwgYXMgYSBkcnVua2VuIG1hbiBkb2VzLCBpbiBhbiB1bmludGVsbGlnaWJsZSBmYXNoaW9uLCBwYXNzZWQgb24gdXAsCiAgICAgICAgICAgICAgICAgICAgdG93YXJkIE1lbGl0w6ouPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk1lbGl0w6ogd2FzIGEKICAgICAgICAgICAgICAgICAgICAgICAgaGlsbHkgZGlzdHJpY3QgaW4gdGhlIHdlc3Rlcm4gcGFydCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4sIGl0cyBlbnRyYW5jZSBmcm9tIHRoZSBhZ29yYSBiZWluZyB0aHJvdWdoIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBob2xsb3cgYmV0d2VlbiB0aGUgZXh0cmVtaXR5IG9mIHRoZSBBcmVvcGFndXMgYW5kIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Oms6/zrvPic694b24z4Ig4byIzrPOv8+BzrHhv5bOv8+CPC9mb3JlaWduPi48L25vdGU+IEdhdGhlcmVkIHRvZ2V0aGVyIHRoZXJlIGZvciBhCiAgICAgICAgICAgICAgICAgICAgZHJpbmtpbmcgYm91dCwgYXMgd2UgYWZ0ZXJ3YXJkcyBsZWFybmVkLCBhdCB0aGUgaG91c2Ugb2YgUGFtcGhpbHVzIHRoZSBmdWxsZXIsCiAgICAgICAgICAgICAgICAgICAgd2VyZSB0aGUgZGVmZW5kYW50IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiwgaXRzIGVudHJhbmNlIGZyb20gdGhlIGFnb3JhIGJlaW5nIHRocm91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGhvbGxvdyBiZXR3ZWVuIHRoZSBleHRyZW1pdHkgb2YgdGhlIEFyZW9wYWd1cyBhbmQgdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6azr/Ou8+Jzr3hvbjPgiDhvIjOs86/z4HOseG/ls6/z4I8L2ZvcmVpZ24+LjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiwgYSBjZXJ0YWluCiAgICAgICAgICAgICAgICAgICAgVGhlb3RpbXVzLCBBcmNoZWJsYWRlcywgU3BpbnRoYXJ1cywgc29uIG9mIEV1YnVsdXMsIFRoZW9nZW5lcywgc29uIG9mCiAgICAgICAgICAgICAgICAgICAgQW5kcm9tZW5lcywgYW5kIGEgbnVtYmVyIG9mIG90aGVycy4gQ3Rlc2lhcyBtYWRlIHRoZW0gYWxsIGdldCB1cCwgYW5kIHByb2NlZWRlZAogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBhZ29yYS4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['54.Narr.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkl0IGhhcHBlbmVkIHRoYXQgd2Ugd2VyZSB0dXJuaW5nCiAgICAgICAgICAgICAgICAgICAgYmFjayBmcm9tIHRoZSB0ZW1wbGUgb2YgUGVyc2VwaG9uw6osPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBzaXRlIG9mIHRoaXMgdGVtcGxlLCBhcyB0aGF0IG9mIHRoZSBMZW9jb3Jpb24sIHJlbWFpbnMKICAgICAgICAgICAgICAgICAgICAgICAgdW5jZXJ0YWluLjwvbm90ZT4gYW5kIG9uIG91ciB3YWxrIHdlcmUgYWdhaW4gYWJvdXQgb3Bwb3NpdGUgdGhlIExlb2NvcmlvbgogICAgICAgICAgICAgICAgICAgIHdoZW4gd2UgbWV0IHRoZW0uIFdoZW4gd2UgZ290IGNsb3NlIHRvIHRoZW0gb25lIG9mIHRoZW0sIEkgZG9uJ3Qga25vdyB3aGljaCwKICAgICAgICAgICAgICAgICAgICBmZWxsIHVwb24gUGhhbm9zdHJhdHVzIGFuZCBwaW5uZWQgaGltLCB3aGlsZSB0aGUgZGVmZW5kYW50IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiB0b2dldGhlciB3aXRoIGhpcyBzb24gYW5kIHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICBBbmRyb21lbmVzIHRocmV3IHRoZW1zZWx2ZXMgdXBvbiBtZS4gVGhleSBmaXJzdCBzdHJpcHBlZCBtZSBvZiBteSBjbG9haywgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlbiwgdHJpcHBpbmcgbWUgdXAgdGhleSB0aHJ1c3QgbWUgaW50byB0aGUgbXVkIGFuZCBsZWFwdCB1cG9uIG1lIGFuZCBiZWF0IG1lCiAgICAgICAgICAgICAgICAgICAgd2l0aCBzdWNoIHZpb2xlbmNlIHRoYXQgbXkgbGlwIHdhcyBzcGxpdCBvcGVuIGFuZCBteSBleWVzIGNsb3NlZDsgYW5kIHRoZXkgbGVmdAogICAgICAgICAgICAgICAgICAgIG1lIGluIHN1Y2ggYSBzdGF0ZSB0aGF0IEkgY291bGQgbmVpdGhlciBnZXQgdXAgbm9yIHV0dGVyIGEgc291bmQuIEFzIEkgbGF5IHRoZXJlCiAgICAgICAgICAgICAgICAgICAgSSBoZWFyZCB0aGVtIHV0dGVyIG11Y2ggb3V0cmFnZW91cyBsYW5ndWFnZSwgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['54.Narr.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmEKICAgICAgICAgICAgICAgICAgICBncmVhdCBkZWFsIG9mIHdoaWNoIHdhcyBzdWNoIGZvdWwgYWJ1c2UgdGhhdCBJIHNob3VsZCBzaHJpbmsgZnJvbSByZXBlYXRpbmcgc29tZQogICAgICAgICAgICAgICAgICAgIG9mIGl0IGluIHlvdXIgcHJlc2VuY2UuIE9uZSB0aGluZywgaG93ZXZlciwgd2hpY2ggaXMgYW4gaW5kaWNhdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBmZWxsb3cncyBpbnNvbGVuY2UgYW5kIGEgcHJvb2YgdGhhdCB0aGUgd2hvbGUgYWZmYWlyIGhhcyBiZWVuIG9mIGhpcyBkb2luZywgSQogICAgICAgICAgICAgICAgICAgIHdpbGwgdGVsbCB5b3UuIEhlIGJlZ2FuIHRvIGNyb3csIG1pbWlja2luZyBmaWdodGluZyBjb2NrcyB0aGF0IGhhdmUgd29uIGEgYmF0dGxlCiAgICAgICAgICAgICAgICAgICAgYW5kIGhpcyBmZWxsb3dzIGJhZGUgaGltIGZsYXAgaGlzIGVsYm93cyBhZ2FpbnN0IGhpcyBzaWRlcyBsaWtlIHdpbmdzLiBBZnRlcgogICAgICAgICAgICAgICAgICAgIHRoaXMgc29tZSBwZW9wbGUgd2hvIGhhcHBlbmVkIHRvIHBhc3MgdG9vayBtZSBob21lIHN0cmlwcGVkIGFzIEkgd2FzLCBmb3IgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4gaGFkIGdvbmUgb2ZmIHRha2luZyBteSBjbG9hayB3aXRoIHRoZW0uIFdoZW4gbXkgYmVhcmVycyBnb3QgdG8gbXkgZG9vciwgbXkKICAgICAgICAgICAgICAgICAgICBtb3RoZXIgYW5kIHRoZSB3b21lbiBzZXJ2YW50cyBiZWdhbiBzaHJpZWtpbmcgYW5kIHdhaWxpbmcsIGFuZCBpdCB3YXMgd2l0aAogICAgICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgdGhhdCBJIHdhcyBhdCBsZW5ndGggY2FycmllZCB0byBhIGJhdGguIFRoZXJlIEkgd2FzIHRob3JvdWdobHkKICAgICAgICAgICAgICAgICAgICBiYXRoZWQsIGFuZCBzaG93biB0byB0aGUgc3VyZ2VvbnMuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBzdGF0ZW1lbnRzIG9mIG1pbmUgYXJlIHRydWUsIEkgc2hhbGwgY2FsbCBiZWZvcmUgeW91IHRoZSB3aXRuZXNzZXMgd2hvCiAgICAgICAgICAgICAgICAgICAgYXR0ZXN0IHRoZW0uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.Narr.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SXQgaGFwcGVuZWQsCiAgICAgICAgICAgICAgICAgICAgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IEV1eGl0aGV1cyBvZiBDaG9sbGVpZGFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DaG9sbGVpZGFlLCBhIGRlbWUgb2YgdGhlIHRyaWJlIExlb250aXMuPC9ub3RlPiB3aG8gaXMgaGVyZSBpbiBjb3VydCBhbmQgaXMKICAgICAgICAgICAgICAgICAgICBhIHJlbGF0aXZlIG9mIG1pbmUsIGFuZCB3aXRoIGhpbSBNZWlkaWFzLCBvbiB0aGVpciB3YXkgYmFjayBmcm9tIGEgZGlubmVyCiAgICAgICAgICAgICAgICAgICAgc29tZXdoZXJlLCBjYW1lIHVwIHRvIG1lLCB3aGVuIEkgd2FzIG5vdyBuZWFyIG15IGhvbWUsIGZvbGxvd2VkIGFmdGVyIG1lIGFzIEkKICAgICAgICAgICAgICAgICAgICB3YXMgYm9ybmUgdG8gdGhlIGJhdGgsIGFuZCB3ZXJlIHByZXNlbnQgd2hlbiBtZW4gYnJvdWdodCB0aGUgc3VyZ2Vvbi4gSSB3YXMgc28KICAgICAgICAgICAgICAgICAgICB3ZWFrLCB0aGF0LCBhcyBpdCB3YXMgZmFyIGZvciBtZSB0byBiZSBjYXJyaWVkIGZyb20gdGhlIGJhdGggdG8gbXkgaG9tZSwgdGhvc2UKICAgICAgICAgICAgICAgICAgICB3aG8gd2VyZSB3aXRoIG1lIGRlY2lkZWQgdG8gY2FycnkgbWUgdG8gdGhlIGhvdXNlIG9mIE1laWRpYXMgZm9yIHRoYXQgbmlnaHQ7IGFuZAogICAgICAgICAgICAgICAgICAgIHNvIHRoZXkgZGlkLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Ob3cgbGV0IHRoZSBjbGVyayB0YWtlIHRoZQogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRpb25zIGVzdGFibGlzaGluZyB0aGVzZSBmYWN0cywgdGhhdCB5b3UgbWF5IHVuZGVyc3RhbmQgdGhhdCBhIGhvc3Qgb2YKICAgICAgICAgICAgICAgICAgICBwZW9wbGUga25vdyB3aGF0IG91dHJhZ2UgSSBzdWZmZXJlZCBhdCB0aGUgaGFuZHMgb2YgdGhlc2UgbWVuLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb25zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbnM8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UYWtlIG5vdyB0aGUgZGVwb3NpdGlvbiBvZiB0aGUgc3VyZ2VvbgogICAgICAgICAgICAgICAgICAgICAgICBhbHNvLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['54.Narr.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QXQgdGhhdCB0aW1lLAogICAgICAgICAgICAgICAgICAgIHRoZW4sIGFzIHRoZSBpbW1lZGlhdGUgcmVzdWx0IG9mIHRoZSBibG93cyBhbmQgdGhlIG1hbHRyZWF0bWVudCBJIHJlY2VpdmVkLCBJCiAgICAgICAgICAgICAgICAgICAgd2FzIGJyb3VnaHQgaW50byB0aGlzIGNvbmRpdGlvbiwgYXMgeW91IGhlYXIgZnJvbSBteSBvd24gbGlwcywgYW5kIGFzIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMgd2hvIHNhdyBtZSBhdCB0aGUgdGltZSBoYXZlIHRlc3RpZmllZC4gQWZ0ZXJ3YXJkcywgYWx0aG91Z2ggdGhlCiAgICAgICAgICAgICAgICAgICAgc3dlbGxpbmdzIG9uIG15IGZhY2UgYW5kIHRoZSBicnVpc2VzLCBteSBwaHlzaWNpYW4gc2FpZCwgZGlkIG5vdCBnaXZlIGhpbSBncmVhdAogICAgICAgICAgICAgICAgICAgIGNvbmNlcm4sIGNvbnRpbnVvdXMgYXR0YWNrcyBvZiBmZXZlciBlbnN1ZWQgYW5kIHZpb2xlbnQgYW5kIGFjdXRlIHBhaW5zCiAgICAgICAgICAgICAgICAgICAgdGhyb3VnaG91dCBhbGwgbXkgYm9keSwgYnV0IGVzcGVjaWFsbHkgaW4gbXkgc2lkZXMgYW5kIHRoZSBwaXQgb2YgbXkgc3RvbWFjaCwKICAgICAgICAgICAgICAgICAgICBhbmQgSSB3YXMgdW5hYmxlIHRvIHRha2UgbXkgZm9vZC4gPC90cmFuc2xhdGlvbj4="
translation['54.Narr.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQsIHRoZQogICAgICAgICAgICAgICAgICAgIHN1cmdlb24gc2FpZCB0aGF0LCBpZiBhIGNvcGlvdXMgaGVtb3JyaGFnZSBoYWQgbm90IHNwb250YW5lb3VzbHkgb2NjdXJyZWQsIHdoaWxlCiAgICAgICAgICAgICAgICAgICAgbXkgYWdvbnkgd2FzIGV4dHJlbWUgYW5kIG15IGF0dGVuZGFudHMgd2VyZSBhdCB0aGVpciB3aXRzJyBlbmQsIEkgc2hvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBkaWVkIG9mIGludGVybmFsIHN1cHB1cmF0aW9uOyBidXQgYXMgaXQgd2FzLCB0aGlzIGxvc3Mgb2YgYmxvb2Qgc2F2ZWQKICAgICAgICAgICAgICAgICAgICAgICAgbWUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIG5vdyB0aGF0IHRoZXNlIHN0YXRlbWVudHMgb2YgbWluZQogICAgICAgICAgICAgICAgICAgIGFyZSB0cnVlLCBhbmQgdGhhdCBmcm9tIHRoZSBibG93cyB3aGljaCB0aGVzZSBtZW4gZGVhbHQgbWUgdGhlcmUgcmVzdWx0ZWQgYW4KICAgICAgICAgICAgICAgICAgICBpbGxuZXNzIHNvIHNldmVyZSB0aGF0IGl0IGJyb3VnaHQgbWUgdG8gdGhlIHBvaW50IG9mIGRlYXRoLiBSZWFkIHRoZSBkZXBvc2l0aW9ucwogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBzdXJnZW9uIGFuZCBvZiB0aG9zZSB3aG8gY2FtZSB0byBzZWUgbWUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.Proof.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJQcm9vZiIgdW5pdD0icGFydCIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoYXQgdGhlIHdvdW5kcyBJIHJlY2VpdmVkLCB0aGVuLCB3ZXJlIG5vdCBzbGlnaHQgb3IKICAgICAgICAgICAgICAgICAgICB0cmlmbGluZywgYnV0IHRoYXQgSSB3YXMgYnJvdWdodCBuZWFyIHRvIGRlYXRoIGJ5IHRoZSBvdXRyYWdlIGFuZCBicnV0YWxpdHkgb2YKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtZW4sIGFuZCB0aGF0IHRoZSBhY3Rpb24gd2hpY2ggSSBoYXZlIGVudGVyZWQgaXMgZmFyIG1vcmUgbGVuaWVudCB0aGFuIHRoZQogICAgICAgICAgICAgICAgICAgIGNhc2UgZGVzZXJ2ZXMsIGhhcyBiZWVuIG1hZGUgY2xlYXIgdG8geW91LCBJIHRoaW5rLCBvbiBtYW55IGdyb3VuZHMuIEkgZmFuY3ksCiAgICAgICAgICAgICAgICAgICAgaG93ZXZlciwgdGhhdCBzb21lIG9mIHlvdSBhcmUgd29uZGVyaW5nIHdoYXQgaW4gdGhlIHdvcmxkIHRoZXJlIGNhbiBiZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IHdpbGwgaGF2ZSB0aGUgYXVkYWNpdHkgdG8gc2F5CiAgICAgICAgICAgICAgICAgICAgaW4gcmVwbHkgdG8gdGhlc2UgY2hhcmdlcy4gSSB3aXNoLCB0aGVyZWZvcmUsIHRvIHRlbGwgeW91IGluIGFkdmFuY2UgdGhlIGRlZmVuY2UKICAgICAgICAgICAgICAgICAgICB3aGljaCBJIGhlYXIgaGUgaXMgcHJlcGFyZWQgdG8gbWFrZS4gSGUgd2lsbCB0cnkgdG8gZGl2ZXJ0IHlvdXIgYXR0ZW50aW9uIGZyb20KICAgICAgICAgICAgICAgICAgICB0aGUgb3V0cmFnZSBhbmQgdGhlIGFjdHVhbCBmYWN0cywgYW5kIHdpbGwgc2VlayB0byB0dXJuIHRoZSB3aG9sZSBtYXR0ZXIgaW50bwogICAgICAgICAgICAgICAgICAgIG1lcmUgamVzdCBhbmQgcmlkaWN1bGUuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['54.Proof.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3aWxsIHRlbGwgeW91IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVyZSBhcmUgbWFueSBwZW9wbGUgaW4gdGhlIGNpdHksIHNvbnMgb2YgcmVzcGVjdGFibGUgcGVyc29ucywgd2hvIGluIHNwb3J0LAogICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBtYW5uZXIgb2YgeW91bmcgbWVuLCBoYXZlIGdpdmVuIHRoZW1zZWx2ZXMgbmlja25hbWVzLCBzdWNoIGFzCiAgICAgICAgICAgICAgICAgICAgSXRoeXBoYWxsaSBvciBBdXRvbGVjeXRoaSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlc2Ugd29yZHMgYXJlIGJlc3QKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCB1bnRyYW5zbGF0ZWQg77yIPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPktlbm5lZHk8L3N1cm5hbWU+PC9wZXJzTmFtZT4sIGZvbGxvd2luZyBBdWdlciwgcmVuZGVycyB0aGVtIOKAnFByaWFwaSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgU2lsZW5p4oCd77yJLiBUaGUgZm9ybWVyIHN1Z2dlc3RzIGdyb3NzIGxpY2VudGlvdXNuZXNzLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxhdHRlciwgZm9yIHdoaWNoIHZhcmlvdXMgbWVhbmluZ3MgaGF2ZSBiZWVuIHByb3Bvc2VkLCBoYXMgYmVlbgogICAgICAgICAgICAgICAgICAgICAgICBwbGF1c2libHkgaW50ZXJwcmV0ZWQgYnkgU2FuZHlzIGFzIGluZGljYXRpbmcgb25lIHdobyBjYXJyaWVkIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICAgICAgb2lsLWZsYXNrIO+8iDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs674b21zrrPhc64zr/PgjwvZm9yZWlnbj7vvIkuIEhlCiAgICAgICAgICAgICAgICAgICAgICAgIHdvdWxkIHRodXMgZGlzcGVuc2Ugd2l0aCB0aGUgY3VzdG9tYXJ5IHNsYXZlLCBhbmQgYmUgZnJlZWQgZnJvbSBoYXZpbmcgZXZlbgogICAgICAgICAgICAgICAgICAgICAgICBzdWNoIGFuIG9uZSBhcyB3aXRuZXNzIHRvIGhpcyB3YW50b24gZG9pbmdzLjwvbm90ZT4gYW5kIHRoYXQgc29tZSBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAgYXJlIGluZmF0dWF0ZWQgd2l0aCBtaXN0cmVzc2VzOyB0aGF0IGhpcyBvd24gc29uIGlzIG9uZSBvZiB0aGVzZSBhbmQgaGFzIG9mdGVuCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gYW5kIHJlY2VpdmVkIGJsb3dzIG9uIGFjY291bnQgb2Ygc29tZSBnaXJsOyBhbmQgdGhhdCB0aGluZ3Mgb2YgdGhpcyBzb3J0CiAgICAgICAgICAgICAgICAgICAgYXJlIG5hdHVyYWwgZm9yIHlvdW5nIG1lbi4gQXMgZm9yIG1lIGFuZCBhbGwgbXkgYnJvdGhlcnMsIGhlIHdpbGwgbWFrZSBvdXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHdlIGFyZSBub3Qgb25seSBkcnVua2VuIGFuZCBpbnNvbGVudCBmZWxsb3dzLCBidXQgYWxzbyB1bmZlZWxpbmcgYW5kCiAgICAgICAgICAgICAgICAgICAgdmluZGljdGl2ZS48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+S2VubmVkeTwvc3VybmFtZT48L3BlcnNOYW1lPiwgZm9sbG93aW5nIEF1Z2VyLCByZW5kZXJzIHRoZW0g4oCcUHJpYXBpIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBTaWxlbmnigJ3vvIkuIFRoZSBmb3JtZXIgc3VnZ2VzdHMgZ3Jvc3MgbGljZW50aW91c25lc3MsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgbGF0dGVyLCBmb3Igd2hpY2ggdmFyaW91cyBtZWFuaW5ncyBoYXZlIGJlZW4gcHJvcG9zZWQsIGhhcyBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXVzaWJseSBpbnRlcnByZXRlZCBieSBTYW5keXMgYXMgaW5kaWNhdGluZyBvbmUgd2hvIGNhcnJpZWQgaGlzIG93bgogICAgICAgICAgICAgICAgICAgICAgICBvaWwtZmxhc2sg77yIPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPktlbm5lZHk8L3N1cm5hbWU+PGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrvhvbXOus+FzrjOv8+CPC9mb3JlaWduPu+8iS4gSGUKICAgICAgICAgICAgICAgICAgICAgICAgd291bGQgdGh1cyBkaXNwZW5zZSB3aXRoIHRoZSBjdXN0b21hcnkgc2xhdmUsIGFuZCBiZSBmcmVlZCBmcm9tIGhhdmluZyBldmVuCiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2ggYW4gb25lIGFzIHdpdG5lc3MgdG8gaGlzIHdhbnRvbiBkb2luZ3MuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiwgdGhlIHNwZWFrZXIgc2F5cywgd2lsbCByZXByZXNlbnQgdXMgYXMgYmVpbmcgYXMgbXVjaAogICAgICAgICAgICAgICAgICAgICAgICBhZGRpY3RlZCB0byBkcnVua2VubmVzcyBhbmQgdmlvbGVuY2UgYXMgaGltc2VsZiBhbmQgaGlzIHNvbnMsIGJ1dCBzdXJseSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdmluZGljdGl2ZSBpbiBnb2luZyB0byBsYXcgb3ZlciBzdWNoIHRyaWZsaW5nIG1hdHRlcnMhPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiwgdGhlIHNwZWFrZXIgc2F5cywgd2lsbCByZXByZXNlbnQgdXMgYXMgYmVpbmcgYXMgbXVjaAogICAgICAgICAgICAgICAgICAgICAgICBhZGRpY3RlZCB0byBkcnVua2VubmVzcyBhbmQgdmlvbGVuY2UgYXMgaGltc2VsZiBhbmQgaGlzIHNvbnMsIGJ1dCBzdXJseSBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdmluZGljdGl2ZSBpbiBnb2luZyB0byBsYXcgb3ZlciBzdWNoIHRyaWZsaW5nIG1hdHRlcnMhPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['54.Proof.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Rm9yIG15c2VsZiwgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGp1cnksIGRlZXBseSBpbmRpZ25hbnQgdGhvdWdoIEkgYW0gYXQgd2hhdCBJIGhhdmUgc3VmZmVyZWQsIEkgc2hvdWxkIGZlZWwKICAgICAgICAgICAgICAgICAgICBubyBsZXNzIGluZGlnbmF0aW9uIGF0IHRoaXMsIGFuZCBzaG91bGQgY291bnQgbXlzZWxmIHRoZSB2aWN0aW0gb2YgYSBmcmVzaAogICAgICAgICAgICAgICAgICAgIG91dHJhZ2UsIGlmIHlvdSB3aWxsIHBhcmRvbiB0aGUgc3Ryb25nIGV4cHJlc3Npb24sIGlmIHRoaXMgZmVsbG93IDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiBzaGFsbCBiZSBkZWVtZWQgYnkgeW91IHRvIGJlIHNwZWFraW5nCiAgICAgICAgICAgICAgICAgICAgdGhlIHRydXRoIGFib3V0IHVzLCBhbmQgeW91IGFyZSB0byBiZSBzbyBtaXNndWlkZWQgYXMgdG8gYXNzdW1lIHRoYXQgYSBtYW4gYmVhcnMKICAgICAgICAgICAgICAgICAgICB0aGUgY2hhcmFjdGVyIHdoaWNoIGhlIGNsYWltcyBmb3IgaGltc2VsZiBvciB3aGljaCBzb21lb25lIGVsc2UgYWNjdXNlcyBoaW0gb2YKICAgICAgICAgICAgICAgICAgICBwb3NzZXNzaW5nLCBhbmQgcmVzcGVjdGFibGUgcGVvcGxlIGFyZSB0byBkZXJpdmUgbm8gYmVuZWZpdCBmcm9tIHRoZWlyIGRhaWx5CiAgICAgICAgICAgICAgICAgICAgbGlmZSBhbmQgY29uZHVjdC4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['54.Proof.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz5ObyBtYW4gaW4gdGhlIHdvcmxkIGhhcyBldmVyCiAgICAgICAgICAgICAgICAgICAgc2VlbiB1cyBkcnVua2VuIG9yIGNvbW1pdHRpbmcgb3V0cmFnZXMsIGFuZCBJIGhvbGQgdGhhdCBJIGFtIGRvaW5nIG5vdGhpbmcKICAgICAgICAgICAgICAgICAgICB1bmZlZWxpbmcgaW4gZGVtYW5kaW5nIHRvIHJlY2VpdmUgc2F0aXNmYWN0aW9uIGFjY29yZGluZyB0byB0aGUgbGF3IGZvciB0aGUKICAgICAgICAgICAgICAgICAgICB3cm9uZ3MgSSBoYXZlIHN1ZmZlcmVkLiBUaGlzIG1hbidzIHNvbnMgYXJlIHdlbGNvbWUsIHNvIGZhciBhcyBJIGFtIGNvbmNlcm5lZCwKICAgICAgICAgICAgICAgICAgICB0byBiZSBJdGh5cGhhbGxpIGFuZCBBdXRvbGVjeXRoaTsgSSBvbmx5IHByYXkgdGhlIGdvZHMgdGhhdCB0aGVzZSB0aGluZ3MgYW5kIGFsbAogICAgICAgICAgICAgICAgICAgIHRoaW5ncyBsaWtlIHRoZW0gbWF5IHJlY29pbCB1cG9uIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPgogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgc29uczsgPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['54.Proof.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgdGhleSBhcmUgdGhvc2Ugd2hvIGluaXRpYXRlCiAgICAgICAgICAgICAgICAgICAgb25lIGFub3RoZXIgd2l0aCB0aGUgcml0ZXMgb2YgSXRoeXBoYWxsdXMsIGFuZCBpbmR1bGdlIGluIGFjdHMgd2hpY2ggZGVjZW50CiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIGNhbm5vdCBldmVuIHNwZWFrIG9mIHdpdGhvdXQgZGVlcCBkaXNncmFjZSwgdG8gc2F5IG5vdGhpbmcgb2YgcGVyZm9ybWluZwogICAgICAgICAgICAgICAgICAgICAgICB0aGVtLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CdXQgd2hhdCBoYXMgYWxsIHRoaXMgdG8gZG8gd2l0aCBtZT8KICAgICAgICAgICAgICAgICAgICBXaHksIGZvciBteSBwYXJ0LCBJIGFtIGFtYXplZCBpZiB0aGV5IGhhdmUgZGlzY292ZXJlZCBhbnkgZXhjdXNlIG9yIHByZXRleHQKICAgICAgICAgICAgICAgICAgICB3aGljaCB3aWxsIG1ha2UgaXQgcG9zc2libGUgaW4geW91ciBjb3VydCBmb3IgYW55IG1hbiwgaWYgY29udmljdGVkIG9mIGFzc2F1bHQKICAgICAgICAgICAgICAgICAgICBhbmQgYmF0dGVyeSwgdG8gZXNjYXBlIHB1bmlzaG1lbnQuIFRoZSBsYXdzIHRha2UgYSBmYXIgZGlmZmVyZW50IHZpZXcsIGFuZCBoYXZlCiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgdGhhdCBldmVuIHBsZWFzIG9mIG5lY2Vzc2l0eSBzaGFsbCBub3QgYmUgcHJlc3NlZCB0b28gZmFyLiBGb3IgZXhhbXBsZQogICAgICAgICAgICAgICAgICAgIO+8iHlvdSBzZWUgSSBoYXZlIGhhZCB0byBpbnF1aXJlIGludG8gdGhlc2UgbWF0dGVycyBhbmQgaW5mb3JtIG15c2VsZgogICAgICAgICAgICAgICAgICAgIGFib3V0IHRoZW0gYmVjYXVzZSBvZiB0aGUgZGVmZW5kYW5077yJLCA8L3RyYW5zbGF0aW9uPg=="
translation['54.Proof.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz50aGVyZSBhcmUgYWN0aW9ucyBmb3IgZXZpbC1zcGVha2luZzsgYW5kIEkgYW0gdG9sZCB0aGF0IHRoZXNlIGFyZSBpbnN0aXR1dGVkCiAgICAgICAgICAgICAgICAgICAgZm9yIHRoaXMgcHVycG9zZeKAlHRoYXQgbWVuIG1heSBub3QgYmUgbGVkIG9uLCBieSB1c2luZyBhYnVzaXZlIGxhbmd1YWdlCiAgICAgICAgICAgICAgICAgICAgYmFjayBhbmQgZm9ydGgsIHRvIGRlYWwgYmxvd3MgdG8gb25lIGFub3RoZXIuIEFnYWluLCB0aGVyZSBhcmUgYWN0aW9ucyBmb3IKICAgICAgICAgICAgICAgICAgICBiYXR0ZXJ5OyBhbmQgdGhlc2UsIEkgaGVhciwgZXhpc3QgZm9yIHRoaXMgcmVhc29u4oCUdGhhdCBhIG1hbiwgZmluZGluZwogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgdGhlIHdlYWtlciBwYXJ0eSwgbWF5IG5vdCBkZWZlbmQgaGltc2VsZiB3aXRoIGEgc3RvbmUgb3IgYW55dGhpbmcgb2YKICAgICAgICAgICAgICAgICAgICB0aGF0IHNvcnQsIGJ1dCBtYXkgYXdhaXQgbGVnYWwgcmVkcmVzcy4gQWdhaW4sIHRoZXJlIGFyZSBwdWJsaWMgcHJvc2VjdXRpb25zIGZvcgogICAgICAgICAgICAgICAgICAgIHdvdW5kaW5nLCB0byB0aGUgZW5kIHRoYXQgd291bmRzIG1heSBub3QgbGVhZCB0byBtdXJkZXIuIDwvdHJhbnNsYXRpb24+"
translation['54.Proof.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbGVhc3Qgb2YgdGhlc2UgZXZpbHMsIG5hbWVseSBhYnVzaXZlIGxhbmd1YWdlLCBoYXMsIEkKICAgICAgICAgICAgICAgICAgICB0aGluaywgYmVlbiBwcm92aWRlZCBmb3IgdG8gcHJldmVudCB0aGUgbGFzdCBhbmQgbW9zdCBncmlldm91cywgdGhhdCBtdXJkZXIgbWF5CiAgICAgICAgICAgICAgICAgICAgbm90IGVuc3VlLCBhbmQgdGhhdCBtZW4gYmUgbm90IGxlZCBvbiBzdGVwIGJ5IHN0ZXAgZnJvbSB2aWxpZmljYXRpb24gdG8gYmxvd3MsCiAgICAgICAgICAgICAgICAgICAgZnJvbSBibG93cyB0byB3b3VuZHMsIGFuZCBmcm9tIHdvdW5kcyB0byBtdXJkZXIsIGJ1dCB0aGF0IGluIHRoZSBsYXdzIGl0cyBvd24KICAgICAgICAgICAgICAgICAgICBwZW5hbHR5IHNob3VsZCBiZSBwcm92aWRlZCBmb3IgZWFjaCBvZiB0aGVzZSBhY3RzLCBhbmQgdGhhdCB0aGUgZGVjaXNpb24gc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbm90IGJlIGxlZnQgdG8gdGhlIHBhc3Npb24gb3IgdGhlIHdpbGwgb2YgdGhlIHBlcnNvbiBjb25jZXJuZWQuIDwvdHJhbnNsYXRpb24+"
translation['54.Proof.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhpcywgdGhlbiwgaXMgd2hhdCBpcwogICAgICAgICAgICAgICAgICAgIG9yZGFpbmVkIGluIHRoZSBsYXdzOyBidXQgaWYgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+CiAgICAgICAgICAgICAgICAgICAgc2F5cywg4oCcV2UgYmVsb25nIHRvIGEgY2x1YiBvZiBJdGh5cGhhbGxpLCBhbmQgaW4gb3VyIGxvdmUtYWZmYWlycyB3ZQogICAgICAgICAgICAgICAgICAgIHN0cmlrZSBhbmQgdGhyb3R0bGUgd2hvbSB3ZSBwbGVhc2Us4oCdIGFyZSB5b3UsIHRoZW4sIGdvaW5nIHRvIGxldCBoaW0KICAgICAgICAgICAgICAgICAgICBvZmYgd2l0aCBhIGxhdWdoPyBJIHRoaW5rIG5vdC4gTm8gb25lIG9mIHlvdSB3b3VsZCBoYXZlIGJlZW4gc2VpemVkIHdpdGggYSBmaXQKICAgICAgICAgICAgICAgICAgICBvZiBsYXVnaHRlciwgaWYgaGUgaGFkIGhhcHBlbmVkIHRvIGJlIHByZXNlbnQgd2hlbiBJIHdhcyBkcmFnZ2VkIGFuZCBzdHJpcHBlZAogICAgICAgICAgICAgICAgICAgIGFuZCBtYWx0cmVhdGVkLCB3aGVuIEkgd2FzIGJvcm5lIGhvbWUgb24gYSBsaXR0ZXIgdG8gdGhlIGhvdXNlIHdoaWNoIEkgaGFkIGxlZnQKICAgICAgICAgICAgICAgICAgICBzdHJvbmcgYW5kIHdlbGwsIGFuZCBteSBtb3RoZXIgcnVzaGVkIG91dCwgYW5kIHRoZSB3b21lbiBzZXQgdXAgc3VjaCBhIHdhaWxpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgc2NyZWFtaW5nIO+8iGFzIGlmIHNvbWVvbmUgaGFkIGRpZWQgaW4gdGhlIGhvdXNl77yJIHRoYXQgc29tZQogICAgICAgICAgICAgICAgICAgIG9mIHRoZSBuZWlnaGJvcnMgc2VudCB0byBpbnF1aXJlIHdoYXQgaXQgd2FzIHRoYXQgaGFkIGhhcHBlbmVkLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['54.Proof.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz5TcGVha2luZyBicm9hZGx5LCBtZW4gb2YgdGhlIGp1cnksIEkgaG9sZCBpdCByaWdodAogICAgICAgICAgICAgICAgICAgIHRoYXQgbm8gbWFuIHNob3VsZCBoYXZlIGFueSBleGN1c2Ugb3IgaW1tdW5pdHkgdG8gcmVseSBvbiwgd2hlbiBoZSBpcyBicm91Z2h0CiAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHlvdSwgc28gdmFsaWQgdGhhdCBoZSBpcyB0byBiZSBwZXJtaXR0ZWQgdG8gY29tbWl0IG91dHJhZ2U7IGJ1dCBpZgogICAgICAgICAgICAgICAgICAgIGFsbG93YW5jZSBpcyB0byBiZSBtYWRlIGZvciBhbnlvbmUsIGl0IHNob3VsZCBiZSBmb3IgdGhvc2Ugb25seSB3aG8gY29tbWl0IGFuCiAgICAgICAgICAgICAgICAgICAgYWN0IG9mIHRoaXMgc29ydCBpbiB0aGUgZm9sbHkgb2YgeW91dGgs4oCUaXQgaXMgZm9yIHRoZXNlLCBJIHNheSwgdGhhdAogICAgICAgICAgICAgICAgICAgIHN1Y2ggaW5kdWxnZW5jZSBzaG91bGQgYmUgcmVzZXJ2ZWQsIGFuZCBldmVuIGluIHRoZWlyIGNhc2UgaXQgc2hvdWxkIG5vdCBleHRlbmQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgcmVtaXNzaW9uIG9mIHRoZSBwZW5hbHR5LCBidXQgdG8gaXRzIG1pdGlnYXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['54.Proof.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBhIG1hbiBvdmVyIGZpZnR5IHllYXJzIG9mIGFnZSBpbiB0aGUgY29tcGFueSBvZgogICAgICAgICAgICAgICAgICAgIHlvdW5nZXIgbWVuLCBhbmQgdGhlc2UgaGlzIG93biBzb25zLCBub3Qgb25seSBkaWQgbm90IGRpc2NvdXJhZ2Ugb3IgcHJldmVudAogICAgICAgICAgICAgICAgICAgIHRoZWlyIHdhbnRvbm5lc3MsIGJ1dCBoYXMgcHJvdmVkIGhpbXNlbGYgdGhlIGxlYWRlciBhbmQgdGhlIGZvcmVtb3N0IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICB2aWxlc3Qgb2YgYWxsLCB3aGF0IHB1bmlzaG1lbnQgY291bGQgaGUgc3VmZmVyIHRoYXQgd291bGQgYmUgY29tbWVuc3VyYXRlIHdpdGgKICAgICAgICAgICAgICAgICAgICBoaXMgZGVlZHM/IEZvciBteSBwYXJ0LCBJIHRoaW5rIHRoYXQgZXZlbiBkZWF0aCB3b3VsZCBiZSB0b28gbWlsZC4gV2h5LCBpZgogICAgICAgICAgICAgICAgICAgIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiBoYWQgY29tbWl0dGVkIG5vbmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgYWN0cyBoaW1zZWxmLCBidXQgaGFkIG1lcmVseSBzdG9vZCBieSB3aGlsZSBoaXMgc29uIEN0ZXNpYXMgZGlkIHdoYXQgaGUgaXMKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHByb3ZlZCB0byBoYXZlIGRvbmUsIHlvdSB3b3VsZCByZWdhcmQgaGltIHdpdGggbG9hdGhpbmcsIGFuZCByaWdodGx5LgogICAgICAgICAgICAgICAgICAgICAgICA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['54.Proof.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaWYgaGUgaGFzIHRyYWluZWQgdXAgaGlzIHNvbnMgaW4gc3VjaAogICAgICAgICAgICAgICAgICAgIGZhc2hpb24gdGhhdCB0aGV5IGZlZWwgbm8gZmVhciBvciBzaGFtZSB3aGlsZSBjb21taXR0aW5nIGluIGhpcyBwcmVzZW5jZSBjcmltZXMKICAgICAgICAgICAgICAgICAgICBmb3Igc29tZSBvZiB3aGljaCB0aGUgcHVuaXNobWVudCBvZiBkZWF0aCBpcyBvcmRhaW5lZCwgd2hhdCBwdW5pc2htZW50IGRvIHlvdQogICAgICAgICAgICAgICAgICAgIHRoaW5rIHRvbyBzZXZlcmUgZm9yIGhpbT8gSSB0aGluayB0aGVzZSBhY3Rpb25zIGFyZSBhIHByb29mIHRoYXQgaGUgaGFzIG5vCiAgICAgICAgICAgICAgICAgICAgcmV2ZXJlbmNlIGZvciBoaXMgb3duIGZhdGhlcjsgZm9yIGlmIGhlIGhhZCBob25vcmVkIGFuZCBmZWFyZWQgaGltLCBoZSB3b3VsZAogICAgICAgICAgICAgICAgICAgIGhhdmUgZXhhY3RlZCBob25vciBhbmQgZmVhciBmcm9tIGhpcyBvd24gY2hpbGRyZW4uIDwvdHJhbnNsYXRpb24+"
translation['54.Proof.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRha2UgdGhlIHN0YXR1dGVzLCB0aGF0CiAgICAgICAgICAgICAgICAgICAgY29uY2VybmluZyBhc3NhdWx0IGFuZCB0aGF0IGNvbmNlcm5pbmcgaGlnaHdheSByb2JiZXJzLiBZb3Ugd2lsbCBzZWUgdGhhdCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQgaXMgYW1lbmFibGUgdG8gdGhlbSBib3RoLiBSZWFkLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9Ikxhd3MiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXdzPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhd3M8L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5CeSBib3RoIHRoZXNlIHN0YXR1dGVzLCB0aGVuLCB0aGUKICAgICAgICAgICAgICAgICAgICBkZWZlbmRhbnQgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IGlzIGFtZW5hYmxlIGZvciB3aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgaGFzIGRvbmU7IGZvciBoZSBjb21taXR0ZWQgYm90aCBhc3NhdWx0IGFuZCBoaWdod2F5IHJvYmJlcnkuIElmIEkgb24gbXkgcGFydAogICAgICAgICAgICAgICAgICAgIGhhdmUgbm90IGNob3NlbiB0byBwcm9jZWVkIGFnYWluc3QgaGltIHVuZGVyIHRoZXNlIHN0YXR1dGVzLCB0aGF0IHNob3VsZCBmYWlybHkKICAgICAgICAgICAgICAgICAgICBwcm92ZSB0aGF0IEkgYW0gYSBwZWFjZWZ1bCBhbmQgaW5vZmZlbnNpdmUgcGVyc29uLCBub3QgdGhhdCBoZSBpcyBhbnkgdGhlIGxlc3MgYQogICAgICAgICAgICAgICAgICAgIHZpbGxhaW4uIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['54.Proof.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQsIGFzc3VyZWRseSwgaWYgYW55dGhpbmcgaGFkCiAgICAgICAgICAgICAgICAgICAgaGFwcGVuZWQgdG8gbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgZnJlcXVlbnQgZXVwaGVtaXNtIGZvciwKICAgICAgICAgICAgICAgICAgICAgICAg4oCcaWYgbXkgZGVhdGggaGFkIGVuc3VlZC7igJ08L25vdGU+IGhlIHdvdWxkIGhhdmUgYmVlbgogICAgICAgICAgICAgICAgICAgIGxpYWJsZSB0byBhIGNoYXJnZSBvZiBtdXJkZXIgYW5kIHRoZSBzZXZlcmVzdCBvZiBwZW5hbHRpZXMuIEF0IGFueSByYXRlIHRoZQogICAgICAgICAgICAgICAgICAgIGZhdGhlciBvZiB0aGUgcHJpZXN0ZXNzIGF0IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnJhdXJvbiIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQnJhdXJvbiI+QnJhdXJvbjwvcGxhY2VOYW1lPiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+PHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcmF1cm9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcmF1cm9uIj5CcmF1cm9uPC9wbGFjZU5hbWU+IHdhcyBhIGRpc3RyaWN0IG9uIHRoZSBlYXN0ZXJuCiAgICAgICAgICAgICAgICAgICAgICAgIGNvYXN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgd2hlcmUgdGhlcmUgd2FzIGEKICAgICAgICAgICAgICAgICAgICAgICAgZmFtb3VzIHNocmluZSBvZiBBcnRlbWlzLiBJdCB3YXMgdG8gdGhpcyBwb2ludCB0aGF0IE9yZXN0ZXMgYW5kIElwaGlnZW5laWEKICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSBzYWlkIHRvIGhhdmUgYnJvdWdodCB0aGUgc3RhdHVlIG9mIEFydGVtaXMgZnJvbSB0aGUgbGFuZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgVGF1cmlhbnMuIFRoZSBmYWN0cyByZWdhcmRpbmcgdGhlIGNhc2UgYWxsdWRlZCB0byBhcmUgdW5rbm93bi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgYWx0aG91Z2ggaXQgd2FzIGFkbWl0dGVkIHRoYXQgaGUgaGFkIG5vdCBsYWlkIGEgZmluZ2VyIG9uIHRoZSBkZWNlYXNlZCwgYnV0IGhhZAogICAgICAgICAgICAgICAgICAgIG1lcmVseSB1cmdlZCB0aGUgb25lIHdobyBkZWFsdCB0aGUgYmxvdyB0byBrZWVwIG9uIHN0cmlraW5nLCB3YXMgYmFuaXNoZWQgYnkgdGhlCiAgICAgICAgICAgICAgICAgICAgY291cnQgb2YgdGhlIEFyZW9wYWd1cy4gQW5kIGp1c3RseTsgZm9yLCBpZiB0aGUgYnlzdGFuZGVycywgaW5zdGVhZCBvZgogICAgICAgICAgICAgICAgICAgIHByZXZlbnRpbmcgdGhvc2Ugd2hvIHRocm91Z2ggdGhlIGluZmx1ZW5jZSBvZiBkcmluayBvciBhbmdlciBvciBhbnkgb3RoZXIgY2F1c2UKICAgICAgICAgICAgICAgICAgICBhcmUgdW5kZXJ0YWtpbmcgdG8gYWN0IGxhd2xlc3NseSwgYXJlIHRoZW1zZWx2ZXMgdG8gdXJnZSB0aGVtIG9uLCB0aGVyZSBpcyBubwogICAgICAgICAgICAgICAgICAgIGhvcGUgb2Ygc2FmZXR5IGZvciBvbmUgd2hvIGZhbGxzIGluIHdpdGggbGF3bGVzcyByYXNjYWxzOyBoZSBtYXkgYmUgc3VyZSB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBtYWx0cmVhdGVkIHVudGlsIHRoZXkgZ3JvdyB3ZWFyeSBhcyB3YXMgdGhlIGNhc2Ugd2l0aCBtZS4gPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCcmF1cm9uIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCcmF1cm9uIj5CcmF1cm9uPC9wbGFjZU5hbWU+IHdhcyBhIGRpc3RyaWN0IG9uIHRoZSBlYXN0ZXJuCiAgICAgICAgICAgICAgICAgICAgICAgIGNvYXN0IG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiwgd2hlcmUgdGhlcmUgd2FzIGEKICAgICAgICAgICAgICAgICAgICAgICAgZmFtb3VzIHNocmluZSBvZiBBcnRlbWlzLiBJdCB3YXMgdG8gdGhpcyBwb2ludCB0aGF0IE9yZXN0ZXMgYW5kIElwaGlnZW5laWEKICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSBzYWlkIHRvIGhhdmUgYnJvdWdodCB0aGUgc3RhdHVlIG9mIEFydGVtaXMgZnJvbSB0aGUgbGFuZCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgVGF1cmlhbnMuIFRoZSBmYWN0cyByZWdhcmRpbmcgdGhlIGNhc2UgYWxsdWRlZCB0byBhcmUgdW5rbm93bi48L3RyYW5zbGF0aW9uPg=="
translation['54.Proof.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdyB0byB0ZWxsIHlvdQogICAgICAgICAgICAgICAgICAgIHdoYXQgdGhleSBzb3VnaHQgdG8gZG8gYXQgdGhlIGFyYml0cmF0aW9uOyBmb3IgZnJvbSB0aGlzIHlvdSB3aWxsIHBlcmNlaXZlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgdXR0ZXIgaW5zb2xlbmNlLiBUaGV5IHNwdW4gb3V0IHRoZSB0aW1lIHRpbGwgcGFzdCBtaWRuaWdodCwgcmVmdXNpbmcgdG8gcmVhZCB0aGUKICAgICAgICAgICAgICAgICAgICBkZXBvc2l0aW9ucyBvciB0byBwdXQgaW4gY29waWVzOyBsZWFkaW5nIHRvIHRoZSBhbHRhciBvbmUgYXQgYSB0aW1lIG91cgogICAgICAgICAgICAgICAgICAgIHdpdG5lc3NlcyB3aG8gd2VyZSBwcmVzZW50IGFuZCBwdXR0aW5nIHRoZW0gb24gb2F0aDsgd3JpdGluZyBkZXBvc2l0aW9ucyB3aGljaAogICAgICAgICAgICAgICAgICAgIGhhZCBub3RoaW5nIHRvIGRvIHdpdGggdGhlIGNhc2Ug77yIZm9yIGluc3RhbmNlIOKAnHRoYXQgQ3Rlc2lhcwogICAgICAgICAgICAgICAgICAgIHdhcyB0aGUgc29uIG9mIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiBieSBhIG1pc3RyZXNzLCBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IGhlIGhhZCBiZWVuIHRyZWF0ZWQgdGh1cyBhbmQgc2/igJ08c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPklmIEN0ZXNpYXMgd2VyZSBpbGxlZ2l0aW1hdGUsIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiBjb3VsZCBub3QgYmUgaGVsZCByZXNwb25zaWJsZSBmb3IgaGlzIG1pc2RvaW5ncywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzIG1pc3RyZWF0bWVudCBieSB0aGUgcGxhaW50aWZmIGlzIGFsbGVnZWQgYXMganVzdGlmaWNhdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYXNzYXVsdCBtYWRlIHVwb24gdGhlIGxhdHRlciBieSBDdGVzaWFzLjwvbm90ZT7vvInigJRhIGNvdXJzZQogICAgICAgICAgICAgICAgICAgIG9mIGFjdGlvbiwgbWVuIG9mIHRoZSBqdXJ5LCB3aGljaCBJIGFzc3VyZSB5b3UgYnkgdGhlIGdvZHMgcm91c2VkIHJlc2VudG1lbnQgYW5kCiAgICAgICAgICAgICAgICAgICAgZGlzZ3VzdCBpbiB0aGUgbWluZCBvZiBldmVyeSBvbmUgcHJlc2VudDsgYW5kIGZpbmFsbHkgdGhleSB3ZXJlIGRpc2d1c3RlZCBhdAogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMuIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiBjb3VsZCBub3QgYmUgaGVsZCByZXNwb25zaWJsZSBmb3IgaGlzIG1pc2RvaW5ncywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzIG1pc3RyZWF0bWVudCBieSB0aGUgcGxhaW50aWZmIGlzIGFsbGVnZWQgYXMganVzdGlmaWNhdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYXNzYXVsdCBtYWRlIHVwb24gdGhlIGxhdHRlciBieSBDdGVzaWFzLjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['54.Proof.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5CZSB0aGF0IGFzIGl0IG1heSwgd2hlbiB0aGV5IGhhZAogICAgICAgICAgICAgICAgICAgIGhhZCB0aGVpciBmaWxsIGFuZCB3ZXJlIHRpcmVkIG9mIGFjdGluZyB0aHVzLCB0aGV5IHB1dCBpbiBhIGNoYWxsZW5nZSB3aXRoIGEKICAgICAgICAgICAgICAgICAgICB2aWV3IHRvIGdhaW5pbmcgdGltZSBhbmQgcHJldmVudGluZyB0aGUgYm94ZXMgZnJvbSBiZWluZyBzZWFsZWQsIG9mZmVyaW5nIHRvCiAgICAgICAgICAgICAgICAgICAgZGVsaXZlciB1cCBjZXJ0YWluIHNsYXZlcywgd2hvc2UgbmFtZXMgdGhleSB3cm90ZSBkb3duLCB0byBiZSBleGFtaW5lZCBhcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBhc3NhdWx0LiBBbmQgSSBmYW5jeSB0aGF0IHRoZWlyIGRlZmVuY2Ugd2lsbCBoaW5nZSBjaGllZmx5IHVwb24gdGhpcyBwb2ludC4gSQogICAgICAgICAgICAgICAgICAgIHRoaW5rLCBob3dldmVyLCB0aGF0IHlvdSBzaG91bGQgYWxsIG5vdGUgb25lIHRoaW5n4oCUdGhhdCBpZiB0aGVzZSBtZW4KICAgICAgICAgICAgICAgICAgICB0ZW5kZXJlZCB0aGUgY2hhbGxlbmdlIGluIG9yZGVyIHRoYXQgdGhlIGlucXVpcnkgYnkgdGhlIHRvcnR1cmUgc2hvdWxkIHRha2UKICAgICAgICAgICAgICAgICAgICBwbGFjZSwgYW5kIGhhZCBjb25maWRlbmNlIGluIHRoaXMgbWV0aG9kIG9mIHByb29mLCB0aGV5IHdvdWxkIG5vdCBoYXZlIHRlbmRlcmVkCiAgICAgICAgICAgICAgICAgICAgaXQgd2hlbiB0aGUgYXdhcmQgd2FzIG5vdyBqdXN0IGJlaW5nIGFubm91bmNlZCwgd2hlbiBuaWdodCBoYWQgZmFsbGVuIGFuZCBubwogICAgICAgICAgICAgICAgICAgIGZ1cnRoZXIgcHJldGV4dCB3YXMgbGVmdCB0aGVtOyBubywgPC90cmFuc2xhdGlvbj4="
translation['54.Proof.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5iZWZvcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uIGhhZCBiZWVuIGJyb3VnaHQsIHdoaWxlIEkgd2FzIGx5aW5nIGlsbCBhbmQgbm90IGtub3dpbmcgd2hldGhlciBJIHNob3VsZAogICAgICAgICAgICAgICAgICAgIHJlY292ZXIsIGFuZCB3YXMgZGVub3VuY2luZyB0aGUgZGVmZW5kYW50IHRvIGFsbCB3aG8gY2FtZSB0byBzZWUgbWUgYXMgdGhlIG9uZQogICAgICAgICAgICAgICAgICAgIHdobyBkZWFsdCB0aGUgZmlyc3QgYmxvdyBhbmQgd2FzIHRoZSBwZXJwZXRyYXRvciBvZiBtb3N0IG9mIHRoZSBtYWx0cmVhdG1lbnQgSQogICAgICAgICAgICAgICAgICAgIHJlY2VpdmVkLOKAlGl0IHdhcyB0aGVuLCBJIHNheSwgdGhhdCBoZSB3b3VsZCBoYXZlIGNvbWUgdG8gbXkgaG91c2UKICAgICAgICAgICAgICAgICAgICB3aXRob3V0IGRlbGF5LCBicmluZ2luZyB3aXRoIGhpbSBhIG51bWJlciBvZiB3aXRuZXNzZXM7IGl0IHdhcyB0aGVuIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIG9mZmVyZWQgdG8gZGVsaXZlciB1cCBoaXMgc2xhdmVzIGZvciB0aGUgdG9ydHVyZSwgYW5kIHdvdWxkIGhhdmUKICAgICAgICAgICAgICAgICAgICBpbnZpdGVkIHNvbWUgbWVtYmVycyBvZiB0aGUgQXJlb3BhZ3VzIHRvIGF0dGVuZDsgZm9yIGlmIEkgaGFkIGRpZWQsIHRoZSBjYXNlCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSBjb21lIGJlZm9yZSB0aGVtLiA8L3RyYW5zbGF0aW9uPg=="
translation['54.Proof.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaWYgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgdW5hd2FyZSBvZiB0aGlzIHNpdHVhdGlvbiwgYW5kIGhhdmluZyB0aGlzIHByb29mLCBhcyBoZSB3aWxsIG5vdyBzYXksIG1hZGUgbm8KICAgICAgICAgICAgICAgICAgICBwcmVwYXJhdGlvbiBhZ2FpbnN0IHNvIHNlcmlvdXMgYSBkYW5nZXIsIHN1cmVseSB3aGVuIEkgaGFkIGxlZnQgbXkgc2ljayBiZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgc3VtbW9uZWQgaGltLCBoZSB3b3VsZCBhdCBvdXIgZmlyc3QgbWVldGluZyBiZWZvcmUgdGhlIGFyYml0cmF0b3IgaGF2ZSBzaG93bgogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgcmVhZHkgdG8gZGVsaXZlciB1cCB0aGUgc2xhdmVzLiBCdXQgaGUgZGlkIG5vdGhpbmcgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBhbSBzcGVha2luZyB0aGUgdHJ1dGgsCiAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgdGhlIGNoYWxsZW5nZSB3YXMgdGVuZGVyZWQgbWVyZWx5IGZvciB0aGUgc2FrZSBvZiBnYWluaW5nIHRpbWUsIHJlYWQKICAgICAgICAgICAgICAgICAgICB0aGlzIGRlcG9zaXRpb24uIEl0IHdpbGwgYmUgY2xlYXIgZnJvbSB0aGlzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zaXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPgogICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['54.Proof.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2l0aCByZWdhcmQgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgZXhhbWluYXRpb24gYnkgdGhlIHRvcnR1cmUsIHRoZW4sIGJlYXIgdGhlc2UgZmFjdHMgaW4gbWluZDogdGhlIHRpbWUgd2hlbgogICAgICAgICAgICAgICAgICAgIHRoZSBjaGFsbGVuZ2Ugd2FzIHRlbmRlcmVkLCBoaXMgZXZhc2l2ZSBwdXJwb3NlIGluIGRvaW5nIHRoaXMsIGFuZCB0aGUgZmlyc3QKICAgICAgICAgICAgICAgICAgICBvY2Nhc2lvbnMsIGluIHRoZSBjb3Vyc2Ugb2Ygd2hpY2ggaGUgc2hvd2VkIHRoYXQgaGUgZGlkIG5vdCB3aXNoIHRoaXMgdGVzdCB0byBiZQogICAgICAgICAgICAgICAgICAgIGFjY29yZGVkIGhpbSwgYW5kIG5laXRoZXIgcHJvcG9zZWQgaXQgbm9yIGRlbWFuZGVkIGl0LiBTaW5jZSwgaG93ZXZlciwgaGUgd2FzCiAgICAgICAgICAgICAgICAgICAgY29udmljdGVkIG9uIGFsbCB0aGVzZSBwb2ludHMgYmVmb3JlIHRoZSBhcmJpdHJhdG9yLCBqdXN0IGFzIGhlIGlzIG5vdywgYW5kCiAgICAgICAgICAgICAgICAgICAgcHJvdmVkIG1hbmlmZXN0bHkgZ3VpbHR5IG9mIGFsbCB0aGUgY2hhcmdlcyBhZ2FpbnN0IGhpbSwgaGUgcHV0cyBpbnRvIHRoZSBib3ggYQogICAgICAgICAgICAgICAgICAgIGZhbHNlIGRlcG9zaXRpb24sIDwvdHJhbnNsYXRpb24+"
translation['54.Proof.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgd3JpdGVzIGF0IHRoZSBoZWFkIG9mIGl0CiAgICAgICAgICAgICAgICAgICAgYXMgd2l0bmVzc2VzIHRoZSBuYW1lcyBvZiBwZW9wbGUgd2hvbSBJIHRoaW5rIHlvdSB3aWxsIGtub3cgd2VsbCB3aGVuIHlvdSBoZWFyCiAgICAgICAgICAgICAgICAgICAgdGhlbeKAlCDigJxEaW90aW11cywgc29uIG9mIERpb3RpbXVzLCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMDgyNCIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDEwODI0Ij5JY2FyaWE8L3BsYWNlTmFtZT4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwODI0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA4MjQiPkljYXJpYTwvcGxhY2VOYW1lPiwgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICBBZWdlw69zLjwvbm90ZT4gQXJjaGViaWFkZXMsIHNvbiBvZiBEZW1vdGVsZXMsIG9mIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDEwODI0IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTA4MjQiPkljYXJpYTwvcGxhY2VOYW1lPiwgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICBBZWdlw69zLjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw1MDA0MjcxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDUwMDQyNzEiPkhhbGFlPC9wbGFjZU5hbWU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVyZQogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIHR3byBkZW1lcyBvZiB0aGlzIG5hbWUsIG9uZSBvbiB0aGUgZWFzdCBjb2FzdCBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY4MSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjgxIj5BdHRpY2E8L3BsYWNlTmFtZT4gYW5kIHRoZSBvdGhlciBvbiB0aGUgU2Fyb25pYyBHdWxmLgogICAgICAgICAgICAgICAgICAgICAgICBUaGUgZm9ybWVyIGJlbG9uZ2VkIHRvIHRoZSB0cmliZSBBZWdlaXMsIHRoZSBsYXR0ZXIgdG8gdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIENlY3JvcGlzLjwvbm90ZT4gQ2hhZXJldGltdXMsIHNvbiBvZiBDaGFlcmltZW5lcywgb2YgUGl0aHVzLDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2ODEiPkF0dGljYTwvcGxhY2VOYW1lPiBhbmQgdGhlIG90aGVyIG9uIHRoZSBTYXJvbmljIEd1bGYuCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBmb3JtZXIgYmVsb25nZWQgdG8gdGhlIHRyaWJlIEFlZ2VpcywgdGhlIGxhdHRlciB0byB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgQ2Vjcm9waXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlBpdGh1cywgYSBkZW1lIG9mIHRoZSB0cmliZSBDZWNyb3Bpcy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgZGVwb3NlIHRoYXQgdGhleSB3ZXJlIHJldHVybmluZyBmcm9tIGEgZGlubmVyIHdpdGggPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDExMjMwMjkiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sMTEyMzAyOSI+Q29ub248L3BsYWNlTmFtZT4sIGFuZCBjYW1lIHVwb24gQXJpc3RvbiBhbmQgdGhlIHNvbiBvZiA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4gZmlnaHRpbmcgaW4gdGhlIGFnb3JhLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4gZGlkIG5vdCBzdHJpa2UKICAgICAgICAgICAgICAgICAgICBBcmlzdG9uLOKAnSA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['54.Proof.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz7igJRhcyB0aG91Z2ggeW91CiAgICAgICAgICAgICAgICAgICAgd291bGQgYmVsaWV2ZSB0aGVtIG9mZi1oYW5kLCBhbmQgd291bGQgaGF2ZSBubyByZWdhcmQgdG8gdGhlIHRydXRoIG9mIHRoZSBtYXR0ZXIKICAgICAgICAgICAgICAgICAgICB0aGF0LCB0byBiZWdpbiB3aXRoLCBMeXNpc3RyYXR1cyBhbmQgUGFzZWFzIGFuZCBOaWNlcmF0dXMgYW5kIERpb2RvcnVzLCB3aG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGV4cHJlc3NseSB0ZXN0aWZpZWQgdGhhdCB0aGV5IHNhdyBtZSBiZWluZyBiZWF0ZW4gYnkgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+LCBzdHJpcHBlZCBvZiBteSBjbG9haywgYW5kIHN1ZmZlcmluZyBhbGwKICAgICAgICAgICAgICAgICAgICB0aGUgb3RoZXIgZm9ybXMgb2YgYnJ1dGFsIG91dHJhZ2UgSSBleHBlcmllbmNlZOKAlG1lbiwgcmVtZW1iZXIsIHdobwogICAgICAgICAgICAgICAgICAgIHdlcmUgdW5hY3F1YWludGVkIHdpdGggbWUgYW5kIHdobyBoYXBwZW5lZCBvbiB0aGUgYWZmYWlyIGJ5CiAgICAgICAgICAgICAgICAgICAgY2hhbmNl4oCUdGhhdCB0aGVzZSBtZW4sIEkgc2F5LCB3b3VsZCBuZXZlciBpbiB0aGUgd29ybGQgaGF2ZSBjb25zZW50ZWQKICAgICAgICAgICAgICAgICAgICB0byBnaXZlIHRlc3RpbW9ueSB3aGljaCB0aGV5IHdvdWxkIGhhdmUga25vd24gdG8gYmUgZmFsc2UsIGlmIHRoZXkgaGFkIG5vdCBzZWVuCiAgICAgICAgICAgICAgICAgICAgdGhlIG1hbHRyZWF0bWVudCB3aGljaCBJIHJlY2VpdmVkOyBhbmQsIHNlY29uZGx5LCB0aGF0IEkgbXlzZWxmLCBpZiBJIGhhZCBub3QKICAgICAgICAgICAgICAgICAgICBiZWVuIHRodXMgdHJlYXRlZCBieSB0aGUgZGVmZW5kYW50LCBzaG91bGQgbmV2ZXIgaGF2ZSBsZXQgb2ZmIG1lbiB3aG8gYXJlCiAgICAgICAgICAgICAgICAgICAgYWRtaXR0ZWQgYnkgbXkgb3Bwb25lbnRzIHRoZW1zZWx2ZXMgdG8gaGF2ZSBzdHJ1Y2sgbWUsIGFuZCBoYXZlIGNob3NlbiB0bwogICAgICAgICAgICAgICAgICAgIHByb2NlZWQgZmlyc3QgYWdhaW5zdCB0aGUgb25lIHdobyBuZXZlciBsYWlkIGEgZmluZ2VyIG9uIG1lLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['54.Proof.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz5XaHkgc2hvdWxkIEk/IE5vOyB0aGUgbWFuIHdobyB3YXMgZmlyc3QgdG8gc3RyaWtlIG1lIGFuZAogICAgICAgICAgICAgICAgICAgIGZyb20gd2hvbSBJIHN1ZmZlcmVkIHRoZSBncmVhdGVzdCBpbmRpZ25pdHksIGhlIGl0IGlzIHdob20gSSBhbSBzdWluZywgd2hvbSBJCiAgICAgICAgICAgICAgICAgICAgYWJob3IsIGFuZCB3aG9tIEkgYW0gbm93IHByb3NlY3V0aW5nLiBNeSB3b3JkcywgdGhlbiwgYXJlIGFsbCB0cnVlIGFuZCBhcmUKICAgICAgICAgICAgICAgICAgICBwcm92ZWQgdG8gYmUgc28sIHdoZXJlYXMgdGhlIGRlZmVuZGFudCwgaWYgaGUgaGFkIG5vdCBicm91Z2h0IGZvcndhcmQgdGhlc2UKICAgICAgICAgICAgICAgICAgICB3aXRuZXNzZXMsIGhhZCwgSSB0YWtlIGl0LCBub3QgYW4gYXJndW1lbnQgdG8gYWR2YW5jZSwgYnV0IHdvdWxkIGhhdmUgaGFkCiAgICAgICAgICAgICAgICAgICAgc2lsZW50bHkgdG8gdW5kZXJnbyBhbiBpbW1lZGlhdGUgY29udmljdGlvbi4gQnV0IGl0IHN0YW5kcyB0byByZWFzb24sIHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBtZW4sIHdobyBoYXZlIGJlZW4gcGFydG5lcnMgaW4gaGlzIGRyaW5raW5nIGJvdXRzIGFuZCBoYXZlIHNoYXJlZCBpbiBtYW55IGRlZWRzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhpcyBzb3J0LCBoYXZlIGdpdmVuIGZhbHNlIHRlc3RpbW9ueS4gSWYgbWF0dGVycyBhcmUgdG8gY29tZSB0byB0aGlzIHBhc3MsCiAgICAgICAgICAgICAgICAgICAgaWYgb25jZSBjZXJ0YWluIHBlb3BsZSBzaGFsbCBwcm92ZSBzaGFtZWxlc3MgZW5vdWdoIHRvIGdpdmUgbWFuaWZlc3RseSBmYWxzZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSwgYW5kIHRoZXJlIHNoYWxsIGJlIG5vIGFkdmFudGFnZSBpbiB0aGUgdHJ1dGgsIGl0IHdpbGwgYmUgYSB0ZXJyaWJsZQogICAgICAgICAgICAgICAgICAgIHN0YXRlIG9mIHRoaW5ncy4gPC90cmFuc2xhdGlvbj4="
translation['54.Proof.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWggYnV0LCB0aGV5IHdpbGwgc2F5LCB0aGV5IGFyZSBub3QgcGVvcGxlIG9mIHRoYXQgc29ydC4gSSBhbSBpbmNsaW5lZCB0bwogICAgICAgICAgICAgICAgICAgIHRoaW5rLCBob3dldmVyLCB0aGF0IG1hbnkgb2YgeW91IGtub3cgRGlvdGltdXMgYW5kIEFyY2hlYmlhZGVzIGFuZCBDaGFlcmV0aW11cywKICAgICAgICAgICAgICAgICAgICB0aGUgZ3JleS1oZWFkZWQgbWFuIHlvbmRlciwgbWVuIHdobyBieSBkYXkgcHV0IG9uIHNvdXIgbG9va3MgYW5kIHByZXRlbmQgdG8gcGxheQogICAgICAgICAgICAgICAgICAgIHRoZSBTcGFydGFuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk1hbnkgbWVuIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQXRoZW5zIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxBdGhlbnMiPkF0aGVuczwvcGxhY2VOYW1lPiBpbiB0aGUgZGF5cyBvZiBQbGF0byBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgRGVtb3N0aGVuZXMsIGFzIGFuIGluZGljYXRpb24gb2YgdGhlaXIgY29udGVtcHQgZm9yIGRlbW9jcmFjeSBhbmQgYSBwcm90ZXN0CiAgICAgICAgICAgICAgICAgICAgICAgIGFnYWluc3QgdGhlIGRlY2F5IG9mIG1vcmFscywgc291Z2h0IHRvIGltaXRhdGUgdGhlIFNwYXJ0YW4gc2V2ZXJpdHkgaW4gZHJlc3MKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG1hbm5lcnMuIE1lbiBzdWNoIGFzIHRob3NlIHdob20gdGhlIHdyaXRlciBpcyBoZXJlIGRlcGljdGluZyB3b3VsZCBub3QKICAgICAgICAgICAgICAgICAgICAgICAgdW5uYXR1cmFsbHkgc2VlayBieSB0aGlzIG1lYW5zIHRvIGJ1aWxkIHVwIGEgc3B1cmlvdXMgcmVwdXRhdGlvbiBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgYXVzdGVyaXR5Ljwvbm90ZT4gYW5kIHdlYXIgc2hvcnQgY2xvYWtzIGFuZCBzaW5nbGUtc29sZWQgc2hvZXMsIGJ1dCB3aGVuCiAgICAgICAgICAgICAgICAgICAgdGhleSBnZXQgdG9nZXRoZXIgYW5kIGFyZSBieSB0aGVtc2VsdmVzIGxlYXZlIG5vIGZvcm0gb2Ygd2lja2VkbmVzcyBvciBpbmRlY2VuY3kKICAgICAgICAgICAgICAgICAgICB1bnRyaWVkLiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gaW4gdGhlIGRheXMgb2YgUGxhdG8gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLCBhcyBhbiBpbmRpY2F0aW9uIG9mIHRoZWlyIGNvbnRlbXB0IGZvciBkZW1vY3JhY3kgYW5kIGEgcHJvdGVzdAogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IHRoZSBkZWNheSBvZiBtb3JhbHMsIHNvdWdodCB0byBpbWl0YXRlIHRoZSBTcGFydGFuIHNldmVyaXR5IGluIGRyZXNzCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBtYW5uZXJzLiBNZW4gc3VjaCBhcyB0aG9zZSB3aG9tIHRoZSB3cml0ZXIgaXMgaGVyZSBkZXBpY3Rpbmcgd291bGQgbm90CiAgICAgICAgICAgICAgICAgICAgICAgIHVubmF0dXJhbGx5IHNlZWsgYnkgdGhpcyBtZWFucyB0byBidWlsZCB1cCBhIHNwdXJpb3VzIHJlcHV0YXRpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGF1c3Rlcml0eS48L3RyYW5zbGF0aW9uPg=="
translation['54.Proof.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlc2UgYXJlIHRoZWlyIGJyaWxsaWFudCBhbmQKICAgICAgICAgICAgICAgICAgICB2aWdvcm91cyBwbGVhcywg4oCcV2hhdCEgQXJlIHdlIG5vdCB0byBnaXZlIHRlc3RpbW9ueSBmb3Igb25lIGFub3RoZXI/CiAgICAgICAgICAgICAgICAgICAgSXNuJ3QgdGhhdCB0aGUgd2F5IG9mIGNvbXJhZGVzIGFuZCBmcmllbmRzPyBXaGF0IGlzIHRoZXJlIHRoYXQgeW91IHJlYWxseSBmZWFyCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIGNoYXJnZXMgaGUgd2lsbCBicmluZyBhZ2FpbnN0IHlvdT8gRG8gc29tZSBwZW9wbGUgc2F5IHRoZXkgc2F3IGhpbSBiZWluZwogICAgICAgICAgICAgICAgICAgIGJlYXRlbj8gV2Ugd2lsbCB0ZXN0aWZ5IHRoYXQgaGUgd2Fzbid0IGV2ZW4gdG91Y2hlZCBieSB5b3UuIFRoYXQgaGlzIGNsb2FrIHdhcwogICAgICAgICAgICAgICAgICAgIHN0cmlwcGVkIG9mZj8gV2Ugd2lsbCB0ZXN0aWZ5IHRoYXQgdGhleSBoYWQgZG9uZSB0aGlzIGZpcnN0IHRvIHlvdS4gVGhhdCBoaXMgbGlwCiAgICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gc2V3biB1cD8gV2Ugd2lsbCBzYXkgdGhhdCB5b3VyIGhlYWQgb3Igc29tZXRoaW5nIGVsc2UgaGFzIGJlZW4KICAgICAgICAgICAgICAgICAgICBicm9rZW4u4oCdIDwvdHJhbnNsYXRpb24+"
translation['54.Proof.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgSSBicmluZyBmb3J3YXJkCiAgICAgICAgICAgICAgICAgICAgc3VyZ2VvbnMgYWxzbyBhcyB3aXRuZXNzZXMuIFRoaXMsIG1lbiBvZiB0aGUganVyeSwgaXMgbm90IHRoZSBjYXNlIHdpdGggdGhlbSwKICAgICAgICAgICAgICAgICAgICBidXQgZXhjZXB0IHdoYXQgaXMgZGVwb3NlZCBieSB0aGVtc2VsdmVzIHRoZXkgd2lsbCBoYXZlIG5vdCBhIHNpbmdsZSB3aXRuZXNzCiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCBtZS4gQnV0IEhlYXZlbiBrbm93cyBJIGNvdWxkIG5vdCB0ZWxsIHlvdSBob3cgZ3JlYXQgYW5kIGhvdyByZWNrbGVzcyBhCiAgICAgICAgICAgICAgICAgICAgcmVhZGluZXNzIHlvdSBtYXkgZXhwZWN0IG9uIHRoZWlyIHBhcnQgdG8gcGVycGV0cmF0ZSBhbnl0aGluZwogICAgICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlci48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoYXQgeW91IG1heSBrbm93IHdoYXQgc29ydCBvZgogICAgICAgICAgICAgICAgICAgIHRoaW5ncyB0aGV5IGRvIGFzIHRoZXkgZ28gYWJvdXTigJRyZWFkIHRoZW0gdGhlc2UgZGVwb3NpdGlvbnMsIGFuZCBkbwogICAgICAgICAgICAgICAgICAgIHlvdSBjaGVjayB0aGUgZmxvdyBvZiB0aGUgd2F0ZXIuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uczwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.Proof.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2VsbCB0aGVuLCBpZgogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBicmVhayBpbnRvIGhvdXNlcyBhbmQgYmVhdCB0aG9zZSB3aG8gY29tZSBpbiB0aGVpciB3YXksIGRvIHlvdSBzdXBwb3NlCiAgICAgICAgICAgICAgICAgICAgdGhleSB3b3VsZCBzY3J1cGxlIHRvIHN3ZWFyIGZhbHNlbHkgb24gYSBzY3JhcCBvZiBwYXBlciBpbiB0aGUgaW50ZXJlc3Qgb2Ygb25lCiAgICAgICAgICAgICAgICAgICAgYW5vdGhlcuKAlHRoZXNlIG1lbiB3aG8gYXJlIHBhcnRuZXJzIGluIHN1Y2ggZ3JlYXQgYW5kIHN1Y2ggcmVja2xlc3MKICAgICAgICAgICAgICAgICAgICBtYWxpZ25pdHkgYW5kIHZpbGxhaW55IGFuZCBpbXB1ZGVuY2UgYW5kIG91dHJhZ2U/IEZvciBJIGNlcnRhaW5seSB0aGluayB0aGF0IGFsbAogICAgICAgICAgICAgICAgICAgIHRoZXNlIHRlcm1zIGZpdCB0aGUgZGVlZHMgdGhleSBhcmUgaW4gdGhlIGhhYml0IG9mIGRvaW5nLiBBbmQgeWV0IHRoZXJlIGFyZQogICAgICAgICAgICAgICAgICAgIG90aGVyIGRlZWRzIG9mIHRoZWlycyBtb3JlIGRyZWFkZnVsIGV2ZW4gdGhhbiB0aGVzZSwgdGhvdWdoIEkgc2hvdWxkIGJlIHVuYWJsZQogICAgICAgICAgICAgICAgICAgIHRvIGZpbmQgb3V0IGFsbCB3aG8gaGF2ZSBzdWZmZXJlZCBmcm9tIHRoZW0uIDwvdHJhbnNsYXRpb24+"
translation['54.Proof.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHRoaW5nLCBob3dldmVyLCB3aGljaCBpcyB0aGUgbW9zdAogICAgICAgICAgICAgICAgICAgIGltcHVkZW50IG9mIGFsbCB0aGF0IGhlIGlzIGdvaW5nIHRvIGRvLCBhcyBJIGhlYXIsIEkgdGhpbmsgaXQgYmV0dGVyIHRvIHdhcm4geW91CiAgICAgICAgICAgICAgICAgICAgb2YgaW4gYWR2YW5jZS4gRm9yIHRoZXkgc2F5IHRoYXQgaGUgd2lsbCBicmluZyBoaXMgY2hpbGRyZW4sIGFuZCwgcGxhY2luZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgYnkgaGlzIHNpZGUsIHdpbGwgc3dlYXIgYnkgdGhlbSwgaW1wcmVjYXRpbmcgc29tZSBkcmVhZCBhbmQgYXdmdWwgY3Vyc2VzIG9mIHN1Y2gKICAgICAgICAgICAgICAgICAgICBhIG5hdHVyZSB0aGF0IGEgcGVyc29uIHdobyBoZWFyZCB0aGVtIGFuZCByZXBvcnRlZCB0aGVtIHRvIG1lIHdhcyBhbWF6ZWQuIE5vdywKICAgICAgICAgICAgICAgICAgICBtZW4gb2YgdGhlIGp1cnksIHRoZXJlIGlzIG5vIHdheSBvZiB3aXRoc3RhbmRpbmcgc3VjaCBhdWRhY2l0eTsgZm9yLCBJIHRha2UgaXQsCiAgICAgICAgICAgICAgICAgICAgdGhlIG1vc3QgaG9ub3JhYmxlIG1lbiBhbmQgdGhvc2Ugd2hvIHdvdWxkIGJlIHRoZSBsYXN0IHRvIHRlbGwgYSBmYWxzZWhvb2QKICAgICAgICAgICAgICAgICAgICB0aGVtc2VsdmVzLCBhcmUgbW9zdCBhcHQgdG8gYmUgZGVjZWl2ZWQgYnkgc3VjaCBwZW9wbGXigJRub3QgYnV0IHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGV5IG91Z2h0IHRvIGxvb2sgYXQgdGhlaXIgbGl2ZXMgYW5kIGNoYXJhY3RlcnMgYmVmb3JlIGJlbGlldmluZyB0aGVtLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['54.Proof.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29udGVtcHQsIGhvd2V2ZXIsIHdoaWNoIHRoaXMgZmVsbG93CiAgICAgICAgICAgICAgICAgICAgZmVlbHMgZm9yIGFsbCBzYWNyZWQgdGhpbmdzIEkgbXVzdCB0ZWxsIHlvdSBhYm91dDsgZm9yIEkgaGF2ZSBiZWVuIGZvcmNlZCB0bwogICAgICAgICAgICAgICAgICAgIG1ha2UgaW5xdWlyeS4gRm9yIEkgaGVhciwgdGhlbiwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IGEgY2VydGFpbiBCYWNjaGl1cywgd2hvCiAgICAgICAgICAgICAgICAgICAgd2FzIGNvbmRlbW5lZCB0byBkZWF0aCBpbiB5b3VyIGNvdXJ0LCBhbmQgQXJpc3RvY3JhdGVzLCB0aGUgbWFuIHdpdGggdGhlIGJhZAogICAgICAgICAgICAgICAgICAgIGV5ZXMsIGFuZCBjZXJ0YWluIG90aGVycyBvZiB0aGUgc2FtZSBzdGFtcCwgYW5kIHdpdGggdGhlbSB0aGlzIG1hbiA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4sIHdlcmUgaW50aW1hdGVzIHdoZW4gdGhleSB3ZXJlIHlvdXRocywKICAgICAgICAgICAgICAgICAgICBhbmQgYm9yZSB0aGUgbmlja25hbWUgVHJpYmFsbGk8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBUcmliYWxsaSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgICAgIGEgd2lsZCBUaHJhY2lhbiBwZW9wbGUuIE1hbnkgcGFyYWxsZWxzIGZvciB0aGUgdXNlIG9mIHRoZSBuYW1lIHRvIGRlbm90ZSBhCiAgICAgICAgICAgICAgICAgICAgICAgIGNsdWIgb2YgbGF3bGVzcyB5b3V0aHMgYXQgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlIGNpdGVkLiBTYW5keXMgcmVmZXJzIHRvIHRoZSBNb2hvY2sgY2x1YiBvZiBlaWdodGVlbnRoIGNlbnR1cnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExNzgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTE3ODEiPkxvbmRvbjwvcGxhY2VOYW1lPi48L25vdGU+OyBhbmQgdGhhdCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1lbiB1c2VkIHRvIGRldm91ciB0aGUgZm9vZCBzZXQgb3V0IGZvciBIZWNhdMOqPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxBdGhlbnMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEF0aGVucyI+QXRoZW5zPC9wbGFjZU5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0IGJlIGNpdGVkLiBTYW5keXMgcmVmZXJzIHRvIHRoZSBNb2hvY2sgY2x1YiBvZiBlaWdodGVlbnRoIGNlbnR1cnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExNzgxIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTE3ODEiPkxvbmRvbjwvcGxhY2VOYW1lPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHdpdGNoLWdvZGRlc3Mgd29yc2hpcHBlZCBhdCBjcm9zcyByb2Fkcy4gUG9ydGlvbnMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdmljdGltcyB3aGljaCBoYWQgc2VydmVkIGZvciBwdXJpZmljYXRpb24gd2VyZSBzZXQgb3V0IGZvciBoZXIuIFRvIHRha2UgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVhdCB0aGlzIGZvb2QgbWlnaHQgY29ubm90ZSBleHRyZW1lIHBvdmVydHksIGJ1dCBzdWdnZXN0ZWQgYWxzbyBhbiB1dHRlcgogICAgICAgICAgICAgICAgICAgICAgICBkaXNyZWdhcmQgZm9yIHNhY3JlZCB0aGluZ3MuPC9ub3RlPiBhbmQgdG8gZ2F0aGVyIHVwIG9uIGVhY2ggb2NjYXNpb24gZm9yCiAgICAgICAgICAgICAgICAgICAgdGhlaXIgZGlubmVyIHdpdGggb25lIGFub3RoZXIgdGhlIHRlc3RpY2xlcyBvZiB0aGUgcGlncyB3aGljaCBhcmUgb2ZmZXJlZCBmb3IKICAgICAgICAgICAgICAgICAgICBwdXJpZmljYXRpb24gd2hlbiB0aGUgYXNzZW1ibHkgY29udmVuZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPllvdW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHBpZ3Mgd2VyZSBzYWNyaWZpY2VkIGluIGEgY2VyZW1vbmlhbCBwdXJpZmljYXRpb24gb2YgdGhlIHBsYWNlIG9mIG1lZXRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlIHRoZSBwZW9wbGUgZW50ZXJlZCB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+4byQzrrOus67zrfPg+G9t86xPC9mb3JlaWduPu+8iHRoZSBwb3B1bGFyIGFzc2VtYmx577yJLjwvbm90ZT4gYW5kCiAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHRob3VnaHQgbGVzcyBvZiBzd2VhcmluZyBhbmQgcGVyanVyaW5nIHRoZW1zZWx2ZXMgdGhhbiBvZiBhbnl0aGluZwogICAgICAgICAgICAgICAgICAgIGVsc2UgaW4gdGhlIHdvcmxkLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7hvJDOus66zrvOt8+D4b23zrE8L2ZvcmVpZ24+77yIdGhlIHBvcHVsYXIgYXNzZW1ibHnvvIkuPC90cmFuc2xhdGlvbj4="
translation['54.Proof.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5TdXJlbHkgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+LCBhIG1hbiBvZiB0aGF0IHNvcnQsIGlzIG5vdCB0byBiZQogICAgICAgICAgICAgICAgICAgIGJlbGlldmVkIG9uIG9hdGg7IGZhciBmcm9tIGl0IGluZGVlZC4gTm87IHRoZSBtYW4gd2hvIHdvdWxkIG5vdCBzd2VhciBieSBhbnkKICAgICAgICAgICAgICAgICAgICBvYmplY3Qgd2hpY2ggeW91ciBjdXN0b20gZG9lcyBub3QgcmVjb2duaXplIGV2ZW4gYW4gb2F0aCB3aGljaCBoZSBpbnRlbmRlZCB0bwogICAgICAgICAgICAgICAgICAgIG9ic2VydmUsIGFuZCB3b3VsZCBub3QgZXZlbiB0aGluayBvZiBkb2luZyBzbyBieSB0aGUgbGl2ZXMgb2YgaGlzIGNoaWxkcmVuLCBidXQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBzdWZmZXIgYW55dGhpbmcgcmF0aGVyIHRoYW4gdGhhdDsgYW5kIHdobywgaWYgZm9yY2VkIHRvIHN3ZWFyLCB3aWxsIHRha2UKICAgICAgICAgICAgICAgICAgICBvbmx5IGEgY3VzdG9tYXJ5IG9hdGgsIGltcHJlY2F0aW5nIGRlc3RydWN0aW9uIHVwb24gaGltc2VsZiwgaGlzIHJhY2UsIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICBob3VzZSwgaXMgbW9yZSB0byBiZSBiZWxpZXZlZCB0aGFuIG9uZSB3aG8gc3dlYXJzIGJ5IGhpcyBjaGlsZHJlbiBvciBpcyByZWFkeSB0bwogICAgICAgICAgICAgICAgICAgIHBhc3MgdGhyb3VnaCBmaXJlLjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHNwZWFrZXIgaXMgcGxhaW5seQogICAgICAgICAgICAgICAgICAgICAgICBjb250cmFzdGluZyBoaXMgb3duIGNhdXRpb24gaW4gdGFraW5nIGFuIG9hdGggd2l0aCB0aGUgcmVja2xlc3NuZXNzIHNob3duIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZWZlbmRhbnQsIGJ1dCB0aGUgZGlmZmljdWx0eSBvZiB0aGUgcGFzc2FnZSBpcyBvbmx5IHBhcnRpYWxseSByZW1vdmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoZSB0cmFuc3Bvc2l0aW9uIG1lbnRpb25lZCBpbiB0aGUgY3JpdGljYWwgbm90ZS4gQXMgdG8gdGhlIGNvbmNsdWRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgcGhyYXNlLCBpdCBpcyBkb3VidGZ1bCBpZiBhbiBvcmRlYWwgYnkgZmlyZSBpcyBhbGx1ZGVkIHRvLCBhbHRob3VnaAogICAgICAgICAgICAgICAgICAgICAgICBzdWdnZXN0aXZlIHBhcmFsbGVscyBhcmUgZm91bmQgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU29waC4gQW50LiAyNjQiIHZhbGlkPSJ5ZXMiPlNvcGguIEFudC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI2NDwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFyaXN0b3BoLiBMeXMuIDEzMyIgdmFsaWQ9InllcyI+QXJpc3RvcGguCiAgICAgICAgICAgICAgICAgICAgICAgIEx5cy4xMzM8L2JpYmw+PC9ub3RlPiBJLCB0aGVuLCB3aG8gb24gZXZlcnkgYWNjb3VudCBhbSBtb3JlIHdvcnRoeSB0byBiZQogICAgICAgICAgICAgICAgICAgIGJlbGlldmVkIHRoYW4geW91LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTb3BoLiBBbnQuIDI2NCIgdmFsaWQ9InllcyI+U29waC4gQW50LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgMjY0PC9iaWJsPiBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXJpc3RvcGguIEx5cy4gMTMzIiB2YWxpZD0ieWVzIj5BcmlzdG9waC4KICAgICAgICAgICAgICAgICAgICAgICAgTHlzLjEzMzwvYmlibD48cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4sIG9mZmVyZWQgdG8KICAgICAgICAgICAgICAgICAgICB0YWtlIHRoZSBvYXRoIGhlcmUgY2l0ZWQsPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DaXRlZCwgdGhhdCBpcywgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyBjaGFsbGVuZ2UuPC9ub3RlPiBub3QgdGhhdCB0aHJvdWdoIHJlYWRpbmVzcyB0byBkbyBhbnl0aGluZwogICAgICAgICAgICAgICAgICAgIHdoYXRzb2V2ZXIgSSBtaWdodCBhdm9pZCBwYXlpbmcgdGhlIHBlbmFsdHkgZm9yIGNyaW1lcyB3aGljaCBJIGhhZCBjb21taXR0ZWQsIGFzCiAgICAgICAgICAgICAgICAgICAgaXMgdGhlIGNhc2Ugd2l0aCB5b3UsIGJ1dCBpbiB0aGUgaW50ZXJlc3Qgb2YgdHJ1dGgsIGFuZCBpbiBvcmRlciB0aGF0IEkgbWlnaHQKICAgICAgICAgICAgICAgICAgICBub3QgYmUgc3ViamVjdGVkIHRvIGZ1cnRoZXIgb3V0cmFnZSwgYW5kIGFzIG9uZSB3aG8gd2lsbCBub3QgYWxsb3cgaGlzIGNhc2UgdG8KICAgICAgICAgICAgICAgICAgICBiZSBsb3N0IHRocm91Z2ggeW91ciBwZXJqdXJ5LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5SZWFkIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iQ2hhbGxlbmdlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2hhbGxlbmdlPC90aXRsZT4KICAgICAgICAgICAgICAgICAgICA8L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['54.Concl.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJDb25jbCIgdW5pdD0icGFydCIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDEiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoaXMgb2F0aCBJIHdhcyBhdCB0aGF0IHRpbWUgcmVhZHkgdG8gdGFrZSwgYW5kIG5vdywgdG8KICAgICAgICAgICAgICAgICAgICBjb252aW5jZSB5b3UgYW5kIHRob3NlIHdobyBzdGFuZCBnYXRoZXJlZCBhYm91dCwgSSBzd2VhciBieSBhbGwgdGhlIGdvZHMgYW5kCiAgICAgICAgICAgICAgICAgICAgZ29kZGVzc2VzIHRoYXQgSSBoYXZlIGluIHZlcnkgdHJ1dGggc3VmZmVyZWQgYXQgdGhlIGhhbmRzIG9mIDxwZXJzTmFtZSBjbGFzcz0idHJhbnNsYXRpb24iPjxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3BlcnNOYW1lPiB0aGlzIHdyb25nIGZvciB3aGljaCBJIGFtIHN1aW5nIGhpbTsKICAgICAgICAgICAgICAgICAgICB0aGF0IEkgd2FzIGJlYXRlbiBieSBoaW0sIGFuZCB0aGF0IG15IGxpcCB3YXMgY3V0IG9wZW4gc28gdGhhdCBpdCBoYWQgdG8gYmUgc2V3bgogICAgICAgICAgICAgICAgICAgIHVwLCBhbmQgdGhhdCBpdCBpcyBiZWNhdXNlIG9mIGdyb3NzIG1hbHRyZWF0bWVudCB0aGF0IEkgYW0gcHJvc2VjdXRpbmcgaGltLiBJZiBJCiAgICAgICAgICAgICAgICAgICAgc3dlYXIgdHJ1bHksIG1heSBtYW55IGJsZXNzaW5ncyBiZSBtaW5lLCBhbmQgbWF5IEkgbmV2ZXIgYWdhaW4gc3VmZmVyIHN1Y2ggYW4KICAgICAgICAgICAgICAgICAgICBvdXRyYWdlOyBidXQsIGlmIEkgYW0gZm9yc3dvcm4sIG1heSBJIHBlcmlzaCB1dHRlcmx5LCBJIGFuZCBhbGwgSSBwb3NzZXNzIG9yCiAgICAgICAgICAgICAgICAgICAgZXZlciBtYXkgcG9zc2Vzcy4gQnV0IEkgYW0gbm90IGZvcnN3b3JuOyBubywgbm90IHRob3VnaCA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IHNob3VsZCBzYXkgc28gdGlsbCBoZSBidXJzdHMuIDxzdXJuYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnVsbD0ieWVzIj5Db25vbjwvc3VybmFtZT48L3RyYW5zbGF0aW9uPg=="
translation['54.Concl.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIG1lbiBvZiB0aGUganVyeSwgc2luY2UgSSBoYXZlIHNob3duIHlvdQogICAgICAgICAgICAgICAgICAgIGFsbCB0aGUganVzdCBhcmd1bWVudHMgd2hpY2ggSSBoYXZlIHRvIHByZXNlbnQsIGFuZCBoYXZlIGZ1cnRoZXJtb3JlIGFkZGVkIGFuCiAgICAgICAgICAgICAgICAgICAgb2F0aCwgaXQgaXMgYnV0IHJpZ2h0IHRoYXQgeW91IHNob3VsZCBmZWVsIHRvd2FyZCA8cGVyc05hbWUgY2xhc3M9InRyYW5zbGF0aW9uIj48c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC9wZXJzTmFtZT4gb24gbXkgYmVoYWxmIHRoZSBzYW1lIHJlc2VudG1lbnQgd2hpY2ggZWFjaCBvbmUgb2YgeW91LAogICAgICAgICAgICAgICAgICAgIGhhZCBoZSBiZWVuIHRoZSB2aWN0aW0sIHdvdWxkIGhhdmUgZmVsdCB0b3dhcmQgdGhlIG9uZSB3aG8gZGlkIHRoZSB3cm9uZywgYW5kCiAgICAgICAgICAgICAgICAgICAgbm90IHRvIHJlZ2FyZCBhbiBhY3Qgb2YgdGhpcyBzb3J0IGFzIGEgcHJpdmF0ZSBtYXR0ZXIgd2hpY2ggbWlnaHQgZmFsbCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsb3Qgb2YgYW55IG1hbi4gTm87IHdob2V2ZXIgbWF5IGJlIHRoZSB2aWN0aW0sIGJlYXIgaGltIGFpZCBhbmQgZ2l2ZSBoaW0gdGhlCiAgICAgICAgICAgICAgICAgICAgcmVkcmVzcyB0aGF0IGlzIGhpcyBkdWUsIGFuZCBsb2F0aGUgdGhvc2Ugd2hvIGluIHRoZSBmYWNlIG9mIHRoZWlyIGNyaW1lcyBhcmUKICAgICAgICAgICAgICAgICAgICBib2xkIGFuZCByZWNrbGVzcywgYnV0IHdoZW4gdGhleSBhcmUgYnJvdWdodCB0byB0cmlhbCBhcmUgaW1wdWRlbnQgdmlsbGFpbnMsCiAgICAgICAgICAgICAgICAgICAgY2FyaW5nIG5vdGhpbmcgZm9yIHJlcHV0YXRpb24gb3IgY2hhcmFjdGVyIG9yIGFueXRoaW5nIGVsc2UsIHByb3ZpZGVkIG9ubHkgdGhleQogICAgICAgICAgICAgICAgICAgIGNhbiBlc2NhcGUgcHVuaXNobWVudC4gPHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvdHJhbnNsYXRpb24+"
translation['54.Concl.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5PZiBjb3Vyc2UgPHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+IHdpbGwgZW50cmVhdCB5b3UgYW5kIHdhaWwgYWxvdWQuIEJ1dAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyLCB3aGljaCBvZiB1cyBpcyBtb3JlIGRlc2VydmluZyBvZiBwaXR5LCBhIG1hbiB3aG8gaGFzIHN1ZmZlcmVkIHN1Y2gKICAgICAgICAgICAgICAgICAgICB0cmVhdG1lbnQgYXMgSSBoYXZlIGF0IHRoZSBoYW5kcyBvZiB0aGUgZGVmZW5kYW50LCBpZiBJIGFtIHRvIGdvIGZvcnRoIGhhdmluZwogICAgICAgICAgICAgICAgICAgIG1ldCB3aXRoIHRoZSBmdXJ0aGVyIGRpc2dyYWNlIG9mIGxvc2luZyBteSBzdWl0LCBvciA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PHBlcnNOYW1lIGNsYXNzPSJ0cmFuc2xhdGlvbiI+PHN1cm5hbWUgY2xhc3M9InRyYW5zbGF0aW9uIiBmdWxsPSJ5ZXMiPkNvbm9uPC9zdXJuYW1lPjwvcGVyc05hbWU+LCBpZiBoZSBpcyB0byBiZSBwdW5pc2hlZD8gSXMgaXQgdG8gdGhlIGFkdmFudGFnZSBvZiBlYWNoCiAgICAgICAgICAgICAgICAgICAgb25lIG9mIHlvdSB0aGF0IGEgbWFuIGJlIHBlcm1pdHRlZCB0byBpbmR1bGdlIGluIGJhdHRlcnkgYW5kIG91dHJhZ2UsIG9yIHRoYXQgaGUKICAgICAgICAgICAgICAgICAgICBiZSBub3QgcGVybWl0dGVkPyBJIGNlcnRhaW5seSB0aGluayBoZSBzaG91bGQgbm90IGJlLiBXZWxsIHRoZW4sIGlmIHlvdSBsZXQgaGltCiAgICAgICAgICAgICAgICAgICAgb2ZmLCB0aGVyZSB3aWxsIGJlIG1hbnkgc3VjaDsgaWYgeW91IHB1bmlzaCBoaW0sIGZld2VyLiA8c3VybmFtZSBjbGFzcz0idHJhbnNsYXRpb24iIGZ1bGw9InllcyI+Q29ub248L3N1cm5hbWU+PC90cmFuc2xhdGlvbj4="
translation['54.Concl.44'] = ""
translation['59.speaker.1'] = ""
translation['59.speaker.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuIHRoZQogICAgICAgICAgICAgICAgICAgIHBlb3BsZSBvZiA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEF0aGVucyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsQXRoZW5zIj5BdGhlbnM8L3BsYWNlTmFtZT4gcGFzc2VkIGEgZGVjcmVlCiAgICAgICAgICAgICAgICAgICAgZ3JhbnRpbmcgdGhlIHJpZ2h0IG9mIGNpdGl6ZW5zaGlwIHRvIFBhc2lvbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QYXNpb24sIHRoZSB3ZWxsLWtub3duIGJhbmtlcjsgc2VlIHRoZSBJbnRyb2R1Y3Rpb24gdG8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNiIgdmFsaWQ9InllcyI+RGVtLiAzNjwvYmlibD48L25vdGU+IGFuZCBoaXMgZGVzY2VuZGFudHMgb24gYWNjb3VudCBvZiBzZXJ2aWNlcyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZSwgbXkgZmF0aGVyIGZhdm9yZWQgdGhlIGdyYW50aW5nIG9mIHRoZSBwZW9wbGUncyBnaWZ0LCBhbmQgaGltc2VsZiBnYXZlIGluCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UgdG8gQXBvbGxvZG9ydXMsIHNvbiBvZiBQYXNpb24sIGhpcyBvd24gZGF1Z2h0ZXIsIG15IHNpc3RlciwgYW5kIHNoZSBpcwogICAgICAgICAgICAgICAgICAgIHRoZSBtb3RoZXIgb2YgdGhlIGNoaWxkcmVuIG9mIEFwb2xsb2RvcnVzLiBJbmFzbXVjaCBhcyBBcG9sbG9kb3J1cyBhY3RlZAogICAgICAgICAgICAgICAgICAgIGhvbm9yYWJseSB0b3dhcmQgbXkgc2lzdGVyIGFuZCB0b3dhcmQgYWxsIG9mIHVzLCBhbmQgY29uc2lkZXJlZCB1cyBpbiB0cnV0aCBoaXMKICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZXMgYW5kIGVudGl0bGVkIHRvIHNoYXJlIGluIGFsbCB0aGF0IGhlIGhhZCwgSSB0b29rIHRvIHdpZmUgaGlzIGRhdWdodGVyLAogICAgICAgICAgICAgICAgICAgIG15IG93biBuaWVjZS4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiAzNiIgdmFsaWQ9InllcyI+RGVtLiAzNjwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHNvbWUgdGltZSBoYWQgZWxhcHNlZAogICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzIHdhcyBjaG9zZW4gYnkgbG90IGFzIGEgbWVtYmVyIG9mIHRoZSBzZW5hdGU7IGFuZCB3aGVuIGhlIGhhZCBwYXNzZWQKICAgICAgICAgICAgICAgICAgICB0aGUgc2NydXRpbnkgYW5kIGhhZCBzd29ybiB0aGUgY3VzdG9tYXJ5IG9hdGgsIHRoZXJlIGNhbWUgdXBvbiB0aGUgY2l0eSBhCiAgICAgICAgICAgICAgICAgICAgICAgIHdhcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5EdWUgdG8gUGhpbGlwJ3MgYWdncmVzc2l2ZSBhY3Rpb25zIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IGluIDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNDMvLTM0MCIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzQzIiB0bz0iLTM0MCI+MzQzPC9kYXRlUmFuZ2U+LTM0MCBCLkMuPC9ub3RlPiBhbmQgYSBjcmlzaXMgc28KICAgICAgICAgICAgICAgICAgICBncmF2ZSB0aGF0LCBpZiB2aWN0b3JzLCB5b3Ugd291bGQgYmUgc3VwcmVtZSBhbW9uZyB0aGUgR3JlZWsgcGVvcGxlcywgYW5kIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgYmV5b25kIHBvc3NpYmlsaXR5IG9mIGRpc3B1dGUgaGF2ZSByZWNvdmVyZWQgeW91ciBvd24gcG9zc2Vzc2lvbnMgYW5kIGhhdmUKICAgICAgICAgICAgICAgICAgICBjcnVzaGVkIFBoaWxpcCBpbiB3YXI7IGJ1dCwgaWYgeW91ciBoZWxwIGFycml2ZWQgdG9vIGxhdGUgYW5kIHlvdSBhYmFuZG9uZWQgeW91cgogICAgICAgICAgICAgICAgICAgICAgICBhbGxpZXMsPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiBpbiA8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzQzLy0zNDAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM0MyIgdG89Ii0zNDAiPjM0MzwvZGF0ZVJhbmdlPi0zNDAgQi5DLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBlc3BlY2lhbGx5IDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsQnl6YW50aXVtIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxCeXphbnRpdW0iPkJ5emFudGl1bTwvcGxhY2VOYW1lPiBhbmQgdGhlIHN0YXRlcyBpbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3Mjg1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcyODUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4gYW5kIGluIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNzU2IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI3NTYiPlRocmFjZTwvcGxhY2VOYW1lPi48L25vdGU+IGFsbG93aW5nIHlvdXIgYXJteSB0byBiZQogICAgICAgICAgICAgICAgICAgIGRpc2JhbmRlZCBmb3Igd2FudCBvZiBtb25leSwgeW91IHdvdWxkIGxvc2UgdGhlc2UgYWxsaWVzLCBmb3JmZWl0IHRoZSBjb25maWRlbmNlCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHJlc3Qgb2YgdGhlIEdyZWVrcywgYW5kIHJpc2sgdGhlIGxvc3Mgb2YgeW91ciBvdGhlciBwb3NzZXNzaW9ucywKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxCeXphbnRpdW0iIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJwZXJzZXVzLEJ5emFudGl1bSI+Qnl6YW50aXVtPC9wbGFjZU5hbWU+IGFuZCB0aGUgc3RhdGVzIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTcyODUiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxNzI4NSI+Q2hlcnNvbmVzZTwvcGxhY2VOYW1lPiBhbmQgaW4gPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMDI3NTYiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAwMjc1NiI+VGhyYWNlPC9wbGFjZU5hbWU+LjxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDExMTczIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTExNzMiPkxlbW5vczwvcGxhY2VOYW1lPiBhbmQgSW1icm9zLCBhbmQgU2N5cm9zIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxMTE3MyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDExMTczIj5MZW1ub3M8L3BsYWNlTmFtZT4sIEltYnJvcywgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIFNjeXJvcywgYWxsIGlzbGFuZHMgaW4gdGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzUiPkFlZ2VhbjwvcGxhY2VOYW1lPi4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDE3Mjg1IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMTcyODUiPkNoZXJzb25lc2U8L3BsYWNlTmFtZT4gd2FzIHRoZSBwZW5pbnN1bGEgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwbGFjZU5hbWUgYXV0aG5hbWU9InBlcnNldXMsR2FsbGlwb2xpIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxHYWxsaXBvbGkiPkdhbGxpcG9saTwvcGxhY2VOYW1lPi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0idGduLDcwMTExNzMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIga2V5PSJ0Z24sNzAxMTE3MyI+TGVtbm9zPC9wbGFjZU5hbWU+LCBJbWJyb3MsIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBTY3lyb3MsIGFsbCBpc2xhbmRzIGluIHRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAwMjY3NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDAyNjc1Ij5BZWdlYW48L3BsYWNlTmFtZT4uCiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSA8cGxhY2VOYW1lIGF1dGhuYW1lPSJ0Z24sNzAxNzI4NSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InRnbiw3MDE3Mjg1Ij5DaGVyc29uZXNlPC9wbGFjZU5hbWU+IHdhcyB0aGUgcGVuaW5zdWxhIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLEdhbGxpcG9saSIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsR2FsbGlwb2xpIj5HYWxsaXBvbGk8L3BsYWNlTmFtZT4uPC90cmFuc2xhdGlvbj4="
translation['59.speaker.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPllvdSB3ZXJlIGF0IHRoYXQgdGltZSBvbiB0aGUgcG9pbnQgb2Ygc2VuZGluZwogICAgICAgICAgICAgICAgICAgIHlvdXIgZW50aXJlIGZvcmNlIHRvIDxwbGFjZU5hbWUgYXV0aG5hbWU9InRnbiw3MDAyNjc3IiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0idGduLDcwMDI2NzciPkV1Ym9lYTwvcGxhY2VOYW1lPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj48cGxhY2VOYW1lIGF1dGhuYW1lPSJwZXJzZXVzLE9seW50aHVzIiBjbGFzcz0idHJhbnNsYXRpb24iIGtleT0icGVyc2V1cyxPbHludGh1cyI+T2x5bnRodXM8L3BsYWNlTmFtZT4sIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydGFudCBjaXR5IGluIENoYWxjaWRpY8OqLjwvbm90ZT4gYW5kIEFwb2xsb2RvcnVzLCBiZWluZyBvbmUgb2YKICAgICAgICAgICAgICAgICAgICBpdHMgbWVtYmVycywgYnJvdWdodCBmb3J3YXJkIGluIHRoZSBzZW5hdGUgYSBiaWxsLCBhbmQgY2FycmllZCBpdCBhcyBhCiAgICAgICAgICAgICAgICAgICAgcHJlbGltaW5hcnkgZGVjcmVlPHBsYWNlTmFtZSBhdXRobmFtZT0icGVyc2V1cyxPbHludGh1cyIgY2xhc3M9InRyYW5zbGF0aW9uIiBrZXk9InBlcnNldXMsT2x5bnRodXMiPk9seW50aHVzPC9wbGFjZU5hbWU+LCBhbgogICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnRhbnQgY2l0eSBpbiBDaGFsY2lkaWPDqi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHNlbmF0ZSBjb3VsZCBub3QKICAgICAgICAgICAgICAgICAgICAgICAgbGVnaXNsYXRlIG9mIGl0c2VsZi4gRGVjcmVlcyBwYXNzZWQgYnkgaXQgaGFkIHRvIGJlIHN1Ym1pdHRlZCB0byB0aGUgcG9wdWxhcgogICAgICAgICAgICAgICAgICAgICAgICBhc3NlbWJseS48L25vdGU+IHRvIHRoZSBhc3NlbWJseSwgcHJvcG9zaW5nIHRoYXQgdGhlIHBlb3BsZSBzaG91bGQgZGVjaWRlCiAgICAgICAgICAgICAgICAgICAgd2hldGhlciB0aGUgZnVuZHMgcmVtYWluaW5nIG92ZXIgZnJvbSB0aGUgc3RhdGUncyBleHBlbmRpdHVyZSBzaG91bGQgYmUgdXNlZCBmb3IKICAgICAgICAgICAgICAgICAgICBtaWxpdGFyeSBwdXJwb3NlcyBvciBmb3IgcHVibGljIHNwZWN0YWNsZXMuIEZvciB0aGUgbGF3cyBwcmVzY3JpYmVkIHRoYXQsIHdoZW4KICAgICAgICAgICAgICAgICAgICB0aGVyZSB3YXMgd2FyLCB0aGUgZnVuZHMgcmVtYWluaW5nIG92ZXIgZnJvbSBzdGF0ZSBleHBlbmRpdHVyZXMgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgZGV2b3RlZCB0byBtaWxpdGFyeSBwdXJwb3NlcywgYW5kIEFwb2xsb2RvcnVzIGJlbGlldmVkIHRoYXQgdGhlIHBlb3BsZSBvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGhhdmUgcG93ZXIgdG8gZG8gd2hhdCB0aGV5IHBsZWFzZWQgd2l0aCB0aGVpciBvd247IGFuZCBoZSBoYWQgc3dvcm4gdGhhdCwgYXMKICAgICAgICAgICAgICAgICAgICBtZW1iZXIgb2YgdGhlIHNlbmF0ZSwgaGUgd291bGQgYWN0IGZvciB0aGUgYmVzdCBpbnRlcmVzdHMgb2YgdGhlIEF0aGVuaWFuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlLCBhcyB5b3UgYWxsIGJvcmUgd2l0bmVzcyBhdCB0aGF0IGNyaXNpcy4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZSBkaXZpc2lvbiB0b29rIHBsYWNlIHRoZXJlIHdhcyBub3QgYSBtYW4gd2hvc2Ugdm90ZSBvcHBvc2VkIHRoZQogICAgICAgICAgICAgICAgICAgIHVzZSBvZiB0aGVzZSBmdW5kcyBmb3IgbWlsaXRhcnkgcHVycG9zZXM7IGFuZCBldmVuIG5vdywgaWYgdGhlIG1hdHRlciBpcwogICAgICAgICAgICAgICAgICAgIGFueXdoZXJlIHNwb2tlbiBvZiwgaXQgaXMgYWNrbm93bGVkZ2VkIGJ5IGFsbCB0aGF0IEFwb2xsb2RvcnVzIGdhdmUgdGhlIGJlc3QKICAgICAgICAgICAgICAgICAgICBhZHZpY2UsIGFuZCB3YXMgdW5qdXN0bHkgdHJlYXRlZC4gSXQgaXMsIHRoZXJlZm9yZSwgdXBvbiB0aGUgb25lIHdobyBieSBoaXMKICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMgZGVjZWl2ZWQgdGhlIGp1cm9ycyB0aGF0IHlvdXIgd3JhdGggc2hvdWxkIGZhbGwsIG5vdCB1cG9uIHRob3NlIHdobwogICAgICAgICAgICAgICAgICAgIHdlcmUgZGVjZWl2ZWQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGlzIGZlbGxvdyBTdGVwaGFudXMgaW5kaWN0ZWQgdGhlIGRlY3JlZSBhcyBpbGxlZ2FsLCBhbmQgY2FtZSBiZWZvcmUgYSBjb3VydC4KICAgICAgICAgICAgICAgICAgICBIZSBwcm9kdWNlZCBmYWxzZSB3aXRuZXNzZXMgdG8gc3Vic3RhbnRpYXRlIHRoZSBjYWx1bW5pb3VzIGNoYXJnZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgQXBvbGxvZG9ydXMgaGFkIGJlZW4gYSBkZWJ0b3IgdG8gdGhlIHRyZWFzdXJ5IGZvciB0d2VudHktZml2ZSB5ZWFycywgYW5kIGJ5CiAgICAgICAgICAgICAgICAgICAgbWFraW5nIGFsbCBzb3J0cyBvZiBhY2N1c2F0aW9ucyB0aGF0IHdlcmUgZm9yZWlnbiB0byB0aGUgaW5kaWN0bWVudCB3b24gYQogICAgICAgICAgICAgICAgICAgIHZlcmRpY3QgYWdhaW5zdCB0aGUgZGVjcmVlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5TbyBmYXIgYXMgdGhpcyBpcwogICAgICAgICAgICAgICAgICAgIGNvbmNlcm5lZCwgaWYgaGUgc2F3IGZpdCB0byBmb2xsb3cgdGhpcyBjb3Vyc2UsIHdlIGRvIG5vdCB0YWtlIGl0IGlsbDsgYnV0IHdoZW4KICAgICAgICAgICAgICAgICAgICB0aGUganVyb3JzIHdlcmUgY2FzdGluZyB0aGVpciB2b3RlcyB0byBmaXggdGhlIHBlbmFsdHksIGFsdGhvdWdoIHdlIGJlZ2dlZCBoaW0KICAgICAgICAgICAgICAgICAgICB0byBtYWtlIGNvbmNlc3Npb25zLCBoZSB3b3VsZCBub3QgbGlzdGVuIHRvIHVzLCBidXQgZml4ZWQgdGhlIGZpbmUgYXQgZmlmdGVlbgogICAgICAgICAgICAgICAgICAgIHRhbGVudHMgaW4gb3JkZXIgdG8gZGVwcml2ZSBBcG9sbG9kb3J1cyBhbmQgaGlzIGNoaWxkcmVuIG9mIHRoZWlyIGNpdmljIHJpZ2h0cywKICAgICAgICAgICAgICAgICAgICBhbmQgdG8gYnJpbmcgbXkgc2lzdGVyIGFuZCBhbGwgb2YgdXMgaW50byBleHRyZW1lc3QgZGlzdHJlc3MgYW5kIHV0dGVyCiAgICAgICAgICAgICAgICAgICAgZGVzdGl0dXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcHJvcGVydHkgb2YgQXBvbGxvZG9ydXMKICAgICAgICAgICAgICAgICAgICBkaWQgbm90IGFtb3VudCB0byBhcyBtdWNoIGFzIHRocmVlIHRhbGVudHMgdG8gZW5hYmxlIGhpbSB0byBwYXkgaW4gZnVsbCBhIGZpbmUKICAgICAgICAgICAgICAgICAgICBvZiBzdWNoIG1hZ25pdHVkZSwgeWV0IGlmIGl0IHdlcmUgbm90IHBhaWQgYnkgdGhlIG5pbnRoIHByeXRhbnk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHByeXRhbnkgd2FzIGEgdGVudGggb2YgdGhlIHllYXIsIHByb3Blcmx5LCB0aGUgcGVyaW9kCiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmluZyB3aGljaCBlYWNoIG9mIHRoZSB0cmliZXMgaGVsZCB0aGUgcHJlc2lkZW5jeSBvZiB0aGUgc2VuYXRlLiBTZWUgbm90ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hPC9lbXBoPiBvZiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ3LjQyIiB2YWxpZD0ieWVzIj5EZW0uIDQ3LjQyPC9iaWJsPjwvbm90ZT4gdGhlIGZpbmUKICAgICAgICAgICAgICAgICAgICB3b3VsZCBoYXZlIGJlZW4gZG91YmxlZCBhbmQgQXBvbGxvZG9ydXMgd291bGQgaGF2ZSBiZWVuIGluc2NyaWJlZCBhcyBvd2luZwogICAgICAgICAgICAgICAgICAgIHRoaXJ0eSB0YWxlbnRzIHRvIHRoZSB0cmVhc3VyeSwgYWxsIHRoZSBwcm9wZXJ0eSB0aGF0IGhlIGhhcyB3b3VsZCBoYXZlIGJlZW4KICAgICAgICAgICAgICAgICAgICBzY2hlZHVsZWQgYXMgYmVsb25naW5nIHRvIHRoZSBzdGF0ZSwgYW5kIHVwb24gaXRzIGJlaW5nIHNvbGQgQXBvbGxvZG9ydXMgaGltc2VsZgogICAgICAgICAgICAgICAgICAgIGFuZCBoaXMgY2hpbGRyZW4gYW5kIGhpcyB3aWZlIGFuZCBhbGwgb2YgdXMgd291bGQgaGF2ZSBiZWVuIHJlZHVjZWQgdG8gZXh0cmVtZXN0CiAgICAgICAgICAgICAgICAgICAgZGlzdHJlc3MuIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YTwvZW1waD4gb2YgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0Ny40MiIgdmFsaWQ9InllcyI+RGVtLiA0Ny40MjwvYmlibD48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBtb3JlIHRoYW4gdGhpcywgaGlzIG90aGVyCiAgICAgICAgICAgICAgICAgICAgZGF1Z2h0ZXIgd291bGQgbmV2ZXIgaGF2ZSBiZWVuIGdpdmVuIGluIG1hcnJpYWdlOyBmb3Igd2hvIHdvdWxkIGV2ZXIgaGF2ZSB0YWtlbgogICAgICAgICAgICAgICAgICAgIHRvIHdpZmUgYSBwb3J0aW9ubGVzcyBnaXJsIGZyb20gYSBmYXRoZXIgd2hvIHdhcyBhIGRlYnRvciB0byB0aGUgdHJlYXN1cnkgYW5kCiAgICAgICAgICAgICAgICAgICAgd2l0aG91dCByZXNvdXJjZXM/IE9mIHN1Y2ggbWFnbml0dWRlLCB5b3Ugc2VlLCB3ZXJlIHRoZSBjYWxhbWl0aWVzIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIHdhcyBicmluZ2luZyB1cG9uIHVzIGFsbCB3aXRob3V0IGV2ZXIgaGF2aW5nIGJlZW4gd3JvbmdlZCBieSB1cyBpbiBhbnkKICAgICAgICAgICAgICAgICAgICByZXNwZWN0LiBUbyB0aGUganVyb3JzLCB0aGVyZWZvcmUsIHdobyBhdCB0aGF0IHRpbWUgZGVjaWRlZCB0aGUgbWF0dGVyIEkgYW0KICAgICAgICAgICAgICAgICAgICBkZWVwbHkgZ3JhdGVmdWwgZm9yIHRoaXMgYXQgbGVhc3QsIHRoYXQgdGhleSBkaWQgbm90IHN1ZmZlciBBcG9sbG9kb3J1cyB0byBiZQogICAgICAgICAgICAgICAgICAgIHV0dGVybHkgcnVpbmVkLCBidXQgZml4ZWQgdGhlIGFtb3VudCBvZiB0aGUgZmluZSBhdCBvbmUgdGFsZW50LCBzbyB0aGF0IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGFibGUgdG8gZGlzY2hhcmdlIHRoZSBkZWJ0LCBhbHRob3VnaCB3aXRoIGRpZmZpY3VsdHkuIFdpdGggZ29vZCByZWFzb24sIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgaGF2ZSB3ZSB1bmRlcnRha2VuIHRvIHBheSBTdGVwaGFudXMgYmFjayBpbiB0aGUgc2FtZSBjb2luLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Gb3Igbm90IG9ubHkgZGlkIFN0ZXBoYW51cwogICAgICAgICAgICAgICAgICAgIHNlZWsgaW4gdGhpcyB3YXkgdG8gYnJpbmcgdXMgdG8gcnVpbiwgYnV0IGhlIGV2ZW4gd2lzaGVkIHRvIGRyaXZlIEFwb2xsb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgZnJvbSBoaXMgY291bnRyeS4gSGUgYnJvdWdodCBhIGZhbHNlIGNoYXJnZSBhZ2FpbnN0IGhpbSB0aGF0LCBoYXZpbmcgb25jZSBnb25lCiAgICAgICAgICAgICAgICAgICAgdG8gQXBoaWRuYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcGhpZG5hLCBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIEFlYW50aXMuPC9ub3RlPiBpbiBzZWFyY2ggb2YgYSBydW5hd2F5IHNsYXZlIG9mIGhpcywgaGUgaGFkIHRoZXJlIHN0cnVjayBhCiAgICAgICAgICAgICAgICAgICAgd29tYW4sIGFuZCB0aGF0IHNoZSBoYWQgZGllZCBvZiB0aGUgYmxvdzsgYW5kIGhlIHN1Ym9ybmVkIHNvbWUgc2xhdmVzIGFuZCBnb3QKICAgICAgICAgICAgICAgICAgICB0aGVtIHRvIGdpdmUgb3V0IHRoYXQgdGhleSB3ZXJlIG1lbiBvZiBDeXJlbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QW4KICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0YW50IGNpdHkgaW4gTGlieWEgaW4gTm9ydGhlcm4gQWZyaWNhLjwvbm90ZT4gYW5kIGJ5IHB1YmxpYwogICAgICAgICAgICAgICAgICAgIHByb2NsYW1hdGlvbiBjaXRlZCBBcG9sbG9kb3J1cyBiZWZvcmUgdGhlIGNvdXJ0IG9mIHRoZSBQYWxsYWRpdW08bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Rm9yIHRoZSBjb3VydCBvZiB0aGUgUGFsbGFkaXVtLCBzZWUgbm90ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5iPC9lbXBoPiBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ3LjcwIiB2YWxpZD0ieWVzIj5EZW0uIDQ3LjcwPC9iaWJsPi4gSW4gdGhlIGNhc2UKICAgICAgICAgICAgICAgICAgICAgICAgYWxsdWRlZCB0byBhbiBvcmRpbmFyeSBjb3VydCBvZiBmaXZlIGh1bmRyZWQganVyb3JzIHNlZW1zIHRvIGhhdmUgc2F0IGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwbGFjZSBvZiB0aGUgRXBoZXRhZSDvvIhzZWUgbm90ZSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmE8L2VtcGg+IG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDMuNTciIHZhbGlkPSJ5ZXMiPkRlbS4gNDMuNTc8L2JpYmw+Lu+8iS48L25vdGU+IG9uIGEgY2hhcmdlIG9mCiAgICAgICAgICAgICAgICAgICAgbXVyZGVyLiA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmI8L2VtcGg+IG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDcuNzAiIHZhbGlkPSJ5ZXMiPkRlbS4gNDcuNzA8L2JpYmw+LiBJbiB0aGUgY2FzZQogICAgICAgICAgICAgICAgICAgICAgICBhbGx1ZGVkIHRvIGFuIG9yZGluYXJ5IGNvdXJ0IG9mIGZpdmUgaHVuZHJlZCBqdXJvcnMgc2VlbXMgdG8gaGF2ZSBzYXQgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlIG9mIHRoZSBFcGhldGFlIO+8iHNlZSBub3RlIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YTwvZW1waD4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0My41NyIgdmFsaWQ9InllcyI+RGVtLiA0My41NzwvYmlibD4u77yJLjwvdHJhbnNsYXRpb24+"
translation['59.speaker.10'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGZlbGxvdyBTdGVwaGFudXMgcHJvc2VjdXRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBjYXNlLCBkZWNsYXJpbmcgb24gb2F0aCB0aGF0IEFwb2xsb2RvcnVzIGhhZCBraWxsZWQgdGhlIHdvbWFuIHdpdGggaGlzIG93biBoYW5kLAogICAgICAgICAgICAgICAgICAgIGFuZCBoZSBpbXByZWNhdGVkIGRlc3RydWN0aW9uIHVwb24gaGltc2VsZiBhbmQgaGlzIHJhY2UgYW5kIGhpcyBob3VzZSwgYWZmaXJtaW5nCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyB3aGljaCBoYWQgbmV2ZXIgdGFrZW4gcGxhY2UsIHdoaWNoIGhlIGhhZCBuZXZlciBzZWVuIG9yIGhlYXJkIGZyb20gYW55CiAgICAgICAgICAgICAgICAgICAgaHVtYW4gYmVpbmcuIEhvd2V2ZXIsIHNpbmNlIGhlIHdhcyBwcm92ZWQgdG8gaGF2ZSBjb21taXR0ZWQgcGVyanVyeSBhbmQgdG8gaGF2ZQogICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgZm9yd2FyZCBhIGZhbHNlIGFjY3VzYXRpb24sIGFuZCB3YXMgc2hvd24gdG8gaGF2ZSBiZWVuIGhpcmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgQ2VwaGlzb3Bob24gYW5kIEFwb2xsb3BoYW5lcyB0byBwcm9jdXJlIGZvciBwYXkgdGhlIGJhbmlzaG1lbnQgb3IgdGhlCiAgICAgICAgICAgICAgICAgICAgZGlzZnJhbmNoaXNlbWVudCBvZiBBcG9sbG9kb3J1cywgaGUgcmVjZWl2ZWQgYnV0IGEgZmV3IHZvdGVzIG91dCBvZiBhIHRvdGFsIG9mCiAgICAgICAgICAgICAgICAgICAgZml2ZSBodW5kcmVkLCBhbmQgbGVmdCB0aGUgY291cnQgYSBwZXJqdXJlZCBtYW4gYW5kIG9uZSB3aXRoIHRoZSByZXB1dGF0aW9uIG9mIGEKICAgICAgICAgICAgICAgICAgICBzY291bmRyZWwuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.11'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93LAogICAgICAgICAgICAgICAgICAgIG1lbiBvZiB0aGUganVyeSwgSSB3b3VsZCBoYXZlIHlvdSBhc2sgeW91cnNlbHZlcywgY29uc2lkZXJpbmcgaW4geW91ciBvd24gbWluZHMKICAgICAgICAgICAgICAgICAgICB0aGUgbmF0dXJhbCBjb3Vyc2Ugb2YgZXZlbnRzLCB3aGF0IEkgY291bGQgaGF2ZSBkb25lIHdpdGggbXlzZWxmIGFuZCBteSB3aWZlIGFuZAogICAgICAgICAgICAgICAgICAgIG15IHNpc3RlciwgaWYgaXQgaGFkIGZhbGxlbiB0byB0aGUgbG90IG9mIEFwb2xsb2RvcnVzIHRvIHN1ZmZlciBhbnkgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgaW5qdXJpZXMgd2hpY2ggdGhpcyBmZWxsb3cgU3RlcGhhbnVzIHBsb3R0ZWQgdG8gaW5mbGljdCB1cG9uIGhpbSBpbiBlaXRoZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgZm9ybWVyIG9yIHRoZSBsYXR0ZXIgdHJpYWwsIG9yIGhvdyBncmVhdCB3ZXJlIHRoZSBkaXNncmFjZSBhbmQgdGhlIHJ1aW4gaW4gd2hpY2gKICAgICAgICAgICAgICAgICAgICBJIHNob3VsZCBoYXZlIGJlZW4gaW52b2x2ZWQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.12'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0ic2VjdGlvbiIgLz5QZW9wbGUgY2FtZSB0byBtZQogICAgICAgICAgICAgICAgICAgIHByaXZhdGVseSBmcm9tIGFsbCBzaWRlcyBleGhvcnRpbmcgbWUgdG8gZXhhY3QgcHVuaXNobWVudCBmcm9tIG15IG9wcG9uZW50IGZvcgogICAgICAgICAgICAgICAgICAgIHRoZSB3cm9uZ3MgaGUgaGFkIGRvbmUgdXMuIFRoZXkgZmx1bmcgaW4gbXkgdGVldGggdGhlIGNoYXJnZSB0aGF0IEkgd2FzIHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgY293YXJkbHkgb2YgaHVtYW5raW5kLCBpZiwgYmVpbmcgc28gY2xvc2VseSByZWxhdGVkIHRvIHRoZW0sIEkgZGlkIG5vdCB0YWtlCiAgICAgICAgICAgICAgICAgICAgdmVuZ2VhbmNlIGZvciB0aGUgaW5qdXJpZXMgZG9uZSBteSBzaXN0ZXIsIG15IGZhdGhlci1pbi1sYXcsIG15IHNpc3RlcidzCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4sIGFuZCBteSBvd24gd2lmZSwgYW5kIGlmIEkgZGlkIG5vdCBicmluZyBiZWZvcmUgeW91IHRoaXMgd29tYW4gd2hvIGlzCiAgICAgICAgICAgICAgICAgICAgZ3VpbHR5IG9mIHN1Y2ggZmxhZ3JhbnQgaW1waWV0eSB0b3dhcmQgdGhlIGdvZHMsIG9mIHN1Y2ggb3V0cmFnZSB0b3dhcmQgdGhlCiAgICAgICAgICAgICAgICAgICAgY29tbW9ud2VhbHRoLCBhbmQgb2Ygc3VjaCBjb250ZW1wdCBmb3IgeW91ciBsYXdzLCBhbmQgYnkgcHJvc2VjdXRpbmcgaGVyIGFuZCBieQogICAgICAgICAgICAgICAgICAgIG15IGFyZ3VtZW50cyBjb252aWN0aW5nIGhlciBvZiBjcmltZSwgdG8gZW5hYmxlIHlvdSB0byBkZWFsIHdpdGggaGVyIGFzIHlvdQogICAgICAgICAgICAgICAgICAgIG1pZ2h0IHNlZSBmaXQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.13'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXMgU3RlcGhhbnVzIGhlcmUgc291Z2h0IHRvCiAgICAgICAgICAgICAgICAgICAgZGVwcml2ZSBtZSBvZiBteSByZWxhdGl2ZXMgY29udHJhcnkgdG8geW91ciBsYXdzIGFuZCB5b3VyIGRlY3JlZXMsIHNvIEkgdG9vIGhhdmUKICAgICAgICAgICAgICAgICAgICBjb21lIGJlZm9yZSB5b3UgdG8gcHJvdmUgdGhhdCBTdGVwaGFudXMgaXMgbGl2aW5nIHdpdGggYW4gYWxpZW4gd29tYW4gY29udHJhcnkKICAgICAgICAgICAgICAgICAgICB0byB0aGUgbGF3OyB0aGF0IGhlIGhhcyBpbnRyb2R1Y2VkIGNoaWxkcmVuIG5vdCBoaXMgb3duIHRvIGhpcyBmZWxsb3ctY2xhbnNtZW4KICAgICAgICAgICAgICAgICAgICBhbmQgZGVtZXNtZW47IHRoYXQgaGUgaGFzIGdpdmVuIGluIG1hcnJpYWdlIHRoZSBkYXVnaHRlcnMgb2YgY291cnRlc2FucyBhcwogICAgICAgICAgICAgICAgICAgIHRob3VnaCB0aGV5IHdlcmUgaGlzIG93bjsgdGhhdCBoZSBpcyBndWlsdHkgb2YgaW1waWV0eSB0b3dhcmQgdGhlIGdvZHM7IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgbnVsbGlmaWVzIHRoZSByaWdodCBvZiB5b3VyIHBlb3BsZSB0byBiZXN0b3cgaXRzIG93biBmYXZvcnMsIGlmIGl0IGNob29zZXMgdG8KICAgICAgICAgICAgICAgICAgICBhZG1pdCBhbnlvbmUgdG8gY2l0aXplbnNoaXA7IGZvciB3aG8gd2lsbCBhbnkgbG9uZ2VyIHNlZWsgdG8gd2luIHRoaXMgcmV3YXJkCiAgICAgICAgICAgICAgICAgICAgZnJvbSB5b3UgYW5kIHRvIHVuZGVyZ28gaGVhdnkgZXhwZW5zZSBhbmQgbXVjaCB0cm91YmxlIGluIG9yZGVyIHRvIGJlY29tZSBhCiAgICAgICAgICAgICAgICAgICAgY2l0aXplbiwgd2hlbiBoZSBjYW4gZ2V0IHdoYXQgaGUgd2FudHMgZnJvbSBTdGVwaGFudXMgYXQgbGVzcyBleHBlbnNlLCBhc3N1bWluZwogICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIHJlc3VsdCBmb3IgaGltIGlzIHRvIGJlIHRoZSBzYW1lPyA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.14'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGluanVyaWVzLCB0aGVuLCB3aGljaCBJIGhhdmUgc3VmZmVyZWQKICAgICAgICAgICAgICAgICAgICBhdCB0aGUgaGFuZHMgb2YgU3RlcGhhbnVzLCBhbmQgd2hpY2ggbGVkIG1lIHRvIHByZWZlciB0aGlzIGluZGljdG1lbnQsIEkgaGF2ZQogICAgICAgICAgICAgICAgICAgIHRvbGQgeW91LiBJIG11c3Qgbm93IHByb3ZlIHRvIHlvdSB0aGF0IHRoaXMgd29tYW4gTmVhZXJhIGlzIGFuIGFsaWVuLCB0aGF0IHNoZQogICAgICAgICAgICAgICAgICAgIGlzIGxpdmluZyB3aXRoIHRoaXMgbWFuIFN0ZXBoYW51cyBhcyBoaXMgd2lmZSwgYW5kIHRoYXQgc2hlIGhhcyB2aW9sYXRlZCB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdzIG9mIHRoZSBzdGF0ZSBpbiBtYW55IHdheXMuIEkgbWFrZSBvZiB5b3UsIHRoZXJlZm9yZSwgbWVuIG9mIHRoZSBqdXJ5LCBhCiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdCB3aGljaCBzZWVtcyB0byBtZSBhIHByb3BlciBvbmUgZm9yIGEgeW91bmcgbWFuIGFuZCBvbmUgd2l0aG91dAogICAgICAgICAgICAgICAgICAgIGV4cGVyaWVuY2UgaW4gc3BlYWtpbmfigJR0aGF0IHlvdSB3aWxsIHBlcm1pdCBtZSB0byBjYWxsIEFwb2xsb2RvcnVzIGFzCiAgICAgICAgICAgICAgICAgICAgYWR2b2NhdGUgdG8gYXNzaXN0IG1lIGluIHRoaXMgdHJpYWwuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.15'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgaXMKICAgICAgICAgICAgICAgICAgICBvbGRlciB0aGFuIEkgYW5kIGlzIGJldHRlciBhY3F1YWludGVkIHdpdGggdGhlIGxhd3MuIEhlIGhhcyBzdHVkaWVkIGFsbCB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMgd2l0aCB0aGUgZ3JlYXRlc3QgY2FyZSwgYW5kIGhlIHRvbyBoYXMgYmVlbiB3cm9uZ2VkIGJ5IHRoaXMgZmVsbG93CiAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIHNvIHRoYXQgbm8gb25lIGNhbiBvYmplY3QgdG8gaGlzIHNlZWtpbmcgdmVuZ2VhbmNlIHVwb24gdGhlIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICBpbmp1cmVkIGhpbSB3aXRob3V0IHByb3ZvY2F0aW9uLiBJdCBpcyB5b3VyIGR1dHksIGluIHRoZSBsaWdodCBvZiB0cnV0aCBpdHNlbGYsCiAgICAgICAgICAgICAgICAgICAgd2hlbiB5b3UgaGF2ZSBoZWFyZCB0aGUgZXhhY3QgbmF0dXJlIGJvdGggb2YgdGhlIGFjY3VzYXRpb24gYW5kIHRoZSBkZWZlbnNlLAogICAgICAgICAgICAgICAgICAgIHRoZW4gYW5kIG5vdCB0aWxsIHRoZW4gdG8gcmVhY2ggYSB2ZXJkaWN0IHdoaWNoIHdpbGwgYmUgaW4gdGhlIGludGVyZXN0IG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGdvZHMgb2YgdGhlIGxhd3MsIG9mIGp1c3RpY2UsIGFuZCBvZiB5b3VyIG93biBzZWx2ZXMuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.16'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSJzcGVha2VyIiB1bml0PSJwYXJ0IiAvPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIHdyb25ncyBkb25lIG1lIGJ5IFN0ZXBoYW51cywgbWVuIG9mIEF0aGVucywgd2hpY2ggaGF2ZSBsZWQgbWUgdG8gY29tZQogICAgICAgICAgICAgICAgICAgIGZvcndhcmQgdG8gYWNjdXNlIHRoaXMgd29tYW4gTmVhZXJhLCBoYXZlIGJlZW4gdG9sZCB5b3UgYnkgVGhlb21uZXN0dXMuIEFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgTmVhZXJhIGlzIGFuIGFsaWVuIHdvbWFuIGFuZCBpcyBsaXZpbmcgYXMgaGlzIHdpZmUgd2l0aCBTdGVwaGFudXMgY29udHJhcnkgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgbGF3cywgSSB3aXNoIHRvIG1ha2UgY2xlYXIgdG8geW91LiBGaXJzdCwgdGhlIGNsZXJrIHNoYWxsIHJlYWQgeW91IHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICB1bmRlciB3aGljaCBUaGVvbW5lc3R1cyBwcmVmZXJyZWQgdGhpcyBpbmRpY3RtZW50IGFuZCB0aGlzIGNhc2UgY29tZXMgYmVmb3JlCiAgICAgICAgICAgICAgICAgICAgICAgIHlvdS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJMYXciPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWVuIHNoYWxsIGxpdmUgYXMgaHVzYmFuZCB3aXRoIGFuIEF0aGVuaWFuIHdvbWFuIGluIGFueSB3YXkgb3IgbWFubmVyCiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRzb2V2ZXIsIGhlIG1heSBiZSBpbmRpY3RlZCBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZSBieSBhbnlvbmUgd2hvIGNob29zZXMKICAgICAgICAgICAgICAgICAgICAgICAgdG8gZG8gc28gZnJvbSBhbW9uZyB0aGUgQXRoZW5pYW5zIGhhdmluZyB0aGUgcmlnaHQgdG8gYnJpbmcgY2hhcmdlcy4gQW5kIGlmCiAgICAgICAgICAgICAgICAgICAgICAgIGhlIGJlIGNvbnZpY3RlZCwgaGUgc2hhbGwgYmUgc29sZCwgaGltc2VsZiBhbmQgaGlzIHByb3BlcnR5LCBhbmQgdGhlIHRoaXJkCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgc2hhbGwgYmVsb25nIHRvIHRoZSBvbmUgc2VjdXJpbmcgaGlzIGNvbnZpY3Rpb24uIFRoZSBzYW1lIHByaW5jaXBsZQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBob2xkIGFsc28gaWYgYW4gYWxpZW4gd29tYW4gc2hhbGwgbGl2ZSBhcyB3aWZlIHdpdGggYW4gQXRoZW5pYW4sIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQXRoZW5pYW4gd2hvIGxpdmVzIGFzIGh1c2JhbmQgd2l0aCB0aGUgYWxpZW4gd29tYW4gc28gY29udmljdGVkIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmVkIG9uZSB0aG91c2FuZCBkcmFjaG1hZS48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdzwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklmIGFuCiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWVuIHNoYWxsIGxpdmUgYXMgaHVzYmFuZCB3aXRoIGFuIEF0aGVuaWFuIHdvbWFuIGluIGFueSB3YXkgb3IgbWFubmVyCiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRzb2V2ZXIsIGhlIG1heSBiZSBpbmRpY3RlZCBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZSBieSBhbnlvbmUgd2hvIGNob29zZXMKICAgICAgICAgICAgICAgICAgICAgICAgdG8gZG8gc28gZnJvbSBhbW9uZyB0aGUgQXRoZW5pYW5zIGhhdmluZyB0aGUgcmlnaHQgdG8gYnJpbmcgY2hhcmdlcy4gQW5kIGlmCiAgICAgICAgICAgICAgICAgICAgICAgIGhlIGJlIGNvbnZpY3RlZCwgaGUgc2hhbGwgYmUgc29sZCwgaGltc2VsZiBhbmQgaGlzIHByb3BlcnR5LCBhbmQgdGhlIHRoaXJkCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnQgc2hhbGwgYmVsb25nIHRvIHRoZSBvbmUgc2VjdXJpbmcgaGlzIGNvbnZpY3Rpb24uIFRoZSBzYW1lIHByaW5jaXBsZQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBob2xkIGFsc28gaWYgYW4gYWxpZW4gd29tYW4gc2hhbGwgbGl2ZSBhcyB3aWZlIHdpdGggYW4gQXRoZW5pYW4sIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgQXRoZW5pYW4gd2hvIGxpdmVzIGFzIGh1c2JhbmQgd2l0aCB0aGUgYWxpZW4gd29tYW4gc28gY29udmljdGVkIHNoYWxsIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmVkIG9uZSB0aG91c2FuZCBkcmFjaG1hZS48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.17'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3LCBtZW4gb2YgdGhlIGp1cnksIHdoaWNoIGZvcmJpZHMgdGhlIHVuaW9uIG9mIGFuIGFsaWVuIHdvbWFuIHdpdGggYW4KICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiwgb3Igb2YgYW4gQXRoZW5pYW4gd29tYW4gd2l0aCBhbiBhbGllbiBpbiBhbnkgd2F5IG9yIG1hbm5lciB3aGF0c29ldmVyLAogICAgICAgICAgICAgICAgICAgIG9yIHRoZSBwcm9jcmVhdGlvbiBvZiBjaGlsZHJlbi4gQW5kIGlmIGFueSBwZXJzb25zIHNoYWxsIHRyYW5zZ3Jlc3MgdGhpcyBsYXcsIGl0CiAgICAgICAgICAgICAgICAgICAgaGFzIHByb3ZpZGVkIHRoYXQgdGhlcmUgc2hhbGwgYmUgYW4gaW5kaWN0bWVudCBhZ2FpbnN0IHRoZW0gYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZXNtb3RoZXRhZSwgYWdhaW5zdCBib3RoIHRoZSBhbGllbiBtYW4gYW5kIHRoZSBhbGllbiB3b21hbiwgYW5kIHRoYXQsIGlmCiAgICAgICAgICAgICAgICAgICAgY29udmljdGVkLCBhbnkgc3VjaCBwZXJzb24gc2hhbGwgYmUgc29sZC4gSSB3aXNoLCB0aGVyZWZvcmUsIHRvIHByb3ZlIHRvIHlvdQogICAgICAgICAgICAgICAgICAgIGNvbnZpbmNpbmdseSBmcm9tIHRoZSB2ZXJ5IGJlZ2lubmluZyB0aGF0IHRoaXMgd29tYW4gTmVhZXJhIGlzIGFuIGFsaWVuLgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.18'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlcmUgd2VyZQogICAgICAgICAgICAgICAgICAgIHRoZXNlIHNldmVuIGdpcmxzIHdobyB3ZXJlIHB1cmNoYXNlZCB3aGlsZSB0aGV5IHdlcmUgc21hbGwgY2hpbGRyZW4gYnkKICAgICAgICAgICAgICAgICAgICBOaWNhcmV0w6osIHdobyB3YXMgdGhlIGZyZWVkd29tYW4gb2YgQ2hhcmlzaXVzIHRoZSBFbGVhbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5FbGlzLCBhIHN0YXRlIGluIG5vcnRoLXdlc3Rlcm4KICAgICAgICAgICAgICAgICAgICAgICAgUGVsb3Bvbm5lc3VzLjwvbm90ZT4gYW5kIHRoZSB3aWZlIG9mIGhpcyBjb29rIEhpcHBpYXMuIFNoZSB3YXMgc2tpbGxlZCBpbgogICAgICAgICAgICAgICAgICAgIHJlY29nbml6aW5nIHRoZSBidWRkaW5nIGJlYXV0eSBvZiB5b3VuZyBnaXJscyBhbmQga25ldyB3ZWxsIGhvdyB0byBicmluZyB0aGVtIHVwCiAgICAgICAgICAgICAgICAgICAgYW5kIHRyYWluIHRoZW0gYXJ0ZnVsbHk7IGZvciBzaGUgbWFkZSB0aGlzIGhlciBwcm9mZXNzaW9uLCBhbmQgc2hlIGdvdCBoZXIKICAgICAgICAgICAgICAgICAgICBsaXZlbGlob29kIGZyb20gdGhlIGdpcmxzLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.19'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0ic2VjdGlvbiIgLz5TaGUgY2FsbGVkIHRoZW0gYnkKICAgICAgICAgICAgICAgICAgICB0aGUgbmFtZSBvZiBkYXVnaHRlcnMgaW4gb3JkZXIgdGhhdCwgYnkgZ2l2aW5nIG91dCB0aGF0IHRoZXkgd2VyZSBmcmVlIHdvbWVuLAogICAgICAgICAgICAgICAgICAgIHNoZSBtaWdodCBleGFjdCB0aGUgbGFyZ2VzdCBmZWVzIGZyb20gdGhvc2Ugd2hvIHdpc2hlZCB0byBlbmpveSB0aGVtLiBXaGVuIHNoZQogICAgICAgICAgICAgICAgICAgIGhhZCByZWFwZWQgdGhlIHByb2ZpdCBvZiB0aGUgeW91dGhmdWwgcHJpbWUgb2YgZWFjaCwgc2hlIHNvbGQgdGhlbSwgYWxsIHNldmVuLAogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgb21pdHRpbmcgb25l4oCUQW50ZWlhIGFuZCBTdHJhdG9sYSBhbmQgQXJpc3RvY2xlaWEgYW5kIE1ldGFuZWlyYQogICAgICAgICAgICAgICAgICAgIGFuZCBQaGlsYSBhbmQgSXN0aG1pYXMgYW5kIHRoaXMgTmVhZXJhLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.20'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0ic2VjdGlvbiIgLz5XaG8gaXQKICAgICAgICAgICAgICAgICAgICB3YXMgd2hvIHB1cmNoYXNlZCB0aGVtIHNldmVyYWxseSwgYW5kIGhvdyB0aGV5IHdlcmUgc2V0IGZyZWUgYnkgdGhvc2Ugd2hvIGJvdWdodAogICAgICAgICAgICAgICAgICAgIHRoZW0gZnJvbSBOaWNhcmV0w6osIEkgd2lsbCB0ZWxsIHlvdSBpbiB0aGUgY291cnNlIG9mIG15IHNwZWVjaCwgaWYgeW91CiAgICAgICAgICAgICAgICAgICAgY2FyZSB0byBoZWFyIGFuZCBpZiB0aGUgd2F0ZXIgaW4gdGhlIHdhdGVyLWNsb2NrIGhvbGRzIG91dC4gSSB3aXNoIGZvciB0aGUKICAgICAgICAgICAgICAgICAgICBtb21lbnQgdG8gcmV0dXJuIHRvIHRoZSBkZWZlbmRhbnQgTmVhZXJhLCBhbmQgcHJvdmUgdG8geW91IHRoYXQgc2hlIGJlbG9uZ2VkIHRvCiAgICAgICAgICAgICAgICAgICAgTmljYXJldMOqLCBhbmQgdGhhdCBzaGUgbGl2ZWQgYXMgYSBwcm9zdGl0dXRlIGxldHRpbmcgb3V0IGhlciBwZXJzb24KICAgICAgICAgICAgICAgICAgICBmb3IgaGlyZSB0byB0aG9zZSB3aG8gd2lzaGVkIHRvIGVuam95IGhlci4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.21'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+THlzaWFzLCB0aGUgc29waGlzdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgdGhlIHdlbGwta25vd24gb3JhdG9yLjwvbm90ZT4gYmVpbmcgdGhlIGxvdmVyIG9mCiAgICAgICAgICAgICAgICAgICAgTWV0YW5laXJhLCB3aXNoZWQsIGluIGFkZGl0aW9uIHRvIHRoZSBvdGhlciBleHBlbmRpdHVyZXMgd2hpY2ggaGUgbGF2aXNoZWQgdXBvbgogICAgICAgICAgICAgICAgICAgIGhlciwgYWxzbyB0byBpbml0aWF0ZSBoZXI7IGZvciBoZSBjb25zaWRlcmVkIHRoYXQgZXZlcnl0aGluZyBlbHNlIHdoaWNoIGhlCiAgICAgICAgICAgICAgICAgICAgZXhwZW5kZWQgdXBvbiBoZXIgd2FzIGJlaW5nIHRha2VuIGJ5IHRoZSB3b21hbiB3aG8gb3duZWQgaGVyLCBidXQgdGhhdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgd2hhdGV2ZXIgaGUgbWlnaHQgc3BlbmQgb24gaGVyIGJlaGFsZiBmb3IgdGhlIGZlc3RpdmFsIGFuZCB0aGUgaW5pdGlhdGlvbiB0aGUKICAgICAgICAgICAgICAgICAgICBnaXJsIGhlcnNlbGYgd291bGQgcHJvZml0IGFuZCBiZSBncmF0ZWZ1bCB0byBoaW0uIFNvIGhlIGFza2VkIE5pY2FyZXTDqgogICAgICAgICAgICAgICAgICAgIHRvIGNvbWUgdG8gdGhlIG15c3RlcmllcyBicmluZ2luZyB3aXRoIGhlciBNZXRhbmVpcmEgdGhhdCBzaGUgbWlnaHQgYmUKICAgICAgICAgICAgICAgICAgICBpbml0aWF0ZWQsIGFuZCBoZSBwcm9taXNlZCB0aGF0IGhlIHdvdWxkIGhpbXNlbGYgaW5pdGlhdGUgaGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.22'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZXkgZ290IGhlcmUsIEx5c2lhcyBkaWQgbm90IGJyaW5nIHRoZW0gdG8gaGlzIG93bgogICAgICAgICAgICAgICAgICAgIGhvdXNlLCBvdXQgb2YgcmVnYXJkIGZvciBoaXMgd2lmZSwgdGhlIGRhdWdodGVyIG9mIEJyYWNoeWxsdXMgYW5kIGhpcyBvd24gbmllY2UsCiAgICAgICAgICAgICAgICAgICAgYW5kIGZvciBoaXMgb3duIG1vdGhlciwgd2hvIHdhcyBlbGRlcmx5IGFuZCB3aG8gbGl2ZWQgaW4gdGhlIHNhbWUgaG91c2U7IGJ1dCBoZQogICAgICAgICAgICAgICAgICAgIGxvZGdlZCB0aGUgdHdvLCBNZXRhbmVpcmEgYW5kIE5pY2FyZXTDqiwgd2l0aCBQaGlsb3N0cmF0dXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQ29sb251cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q29sb251cywgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICBBZWdlw69zLjwvbm90ZT4gd2hvIHdhcyBhIGZyaWVuZCBvZiBoaXMgYW5kIHdhcyBhcyB5ZXQgdW5tYXJyaWVkLgogICAgICAgICAgICAgICAgICAgIFRoZXkgd2VyZSBhY2NvbXBhbmllZCBieSB0aGlzIHdvbWFuIE5lYWVyYSwgd2hvIGhhZCBhbHJlYWR5IHRha2VuIHVwIHRoZSB0cmFkZQogICAgICAgICAgICAgICAgICAgIG9mIGEgcHJvc3RpdHV0ZSwgeW91bmcgYXMgc2hlIHdhczsgZm9yIHNoZSB3YXMgbm90IHlldCBvbGQgZW5vdWdoLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.23'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhlIHRydXRoIG9mCiAgICAgICAgICAgICAgICAgICAgbXkgc3RhdGVtZW50c+KAlHRoYXQgdGhlIGRlZmVuZGFudCBiZWxvbmdlZCB0byBOaWNhcmV0w6ogYW5kCiAgICAgICAgICAgICAgICAgICAgZm9sbG93ZWQgaW4gaGVyIHRyYWluLCBhbmQgdGhhdCBzaGUgcHJvc3RpdHV0ZWQgaGVyIHBlcnNvbiB0byBhbnlvbmUgd2hvIHdpc2hlZAogICAgICAgICAgICAgICAgICAgIHRvIHBheSBmb3IgaXTigJRJIHdpbGwgY2FsbCBQaGlsb3N0cmF0dXMgYXMgd2l0bmVzcyB0byB0aGVzZQogICAgICAgICAgICAgICAgICAgICAgICBmYWN0cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGhpbG9zdHJhdHVzLCBzb24gb2YgRGlvbnlzaXVzLCBvZiBDb2xvbnVzLCBkZXBvc2VzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgaGUga25vd3MgdGhhdCBOZWFlcmEgd2FzIGEgc2xhdmUgb2YgTmljYXJldMOqLCB0byB3aG9tCiAgICAgICAgICAgICAgICAgICAgICAgIE1ldGFuZWlyYSBhbHNvIGJlbG9uZ2VkLCB0aGF0IHRoZXkgd2VyZSByZXNpZGVudHMgb2YgQ29yaW50aCwgYW5kIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgICAgICBzdGF5ZWQgYXQgaGlzIGhvdXNlIHdoZW4gdGhleSBjYW1lIHRvIEF0aGVucyBmb3IgdGhlIG15c3RlcmllcywgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgTHlzaWFzIHRoZSBzb24gb2YgQ2VwaGFsw6p1cywgd2hvIHdhcyBhbiBpbnRpbWF0ZSBmcmllbmQgb2YgaGlzLAogICAgICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2hlZCB0aGVtIGluIGhpcyBob3VzZS48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QaGlsb3N0cmF0dXMsIHNvbiBvZiBEaW9ueXNpdXMsIG9mIENvbG9udXMsIGRlcG9zZXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBoZSBrbm93cyB0aGF0IE5lYWVyYSB3YXMgYSBzbGF2ZSBvZiBOaWNhcmV0w6osIHRvIHdob20KICAgICAgICAgICAgICAgICAgICAgICAgTWV0YW5laXJhIGFsc28gYmVsb25nZWQsIHRoYXQgdGhleSB3ZXJlIHJlc2lkZW50cyBvZiBDb3JpbnRoLCBhbmQgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXllZCBhdCBoaXMgaG91c2Ugd2hlbiB0aGV5IGNhbWUgdG8gQXRoZW5zIGZvciB0aGUgbXlzdGVyaWVzLCBhbmQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICBMeXNpYXMgdGhlIHNvbiBvZiBDZXBoYWzDqnVzLCB3aG8gd2FzIGFuIGludGltYXRlIGZyaWVuZCBvZiBoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGVzdGFibGlzaGVkIHRoZW0gaW4gaGlzIGhvdXNlLjwvdHJhbnNsYXRpb24+"
translation['59.speaker.24'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWdhaW4gYWZ0ZXIKICAgICAgICAgICAgICAgICAgICB0aGlzLCBtZW4gb2YgQXRoZW5zLCBTaW11cyB0aGUgVGhlc3NhbGlhbiBjYW1lIGhlcmUgd2l0aCB0aGUgZGVmZW5kYW50IE5lYWVyYQogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgZ3JlYXQgUGFuYXRoZW5hZWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBHcmVhdCBQYW5hdGhlbmFlYQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgY2VsZWJyYXRlZCBpbiBBdGhlbnMgZXZlcnkgZmlmdGggeWVhciBpbiB0aGUgbW9udGggSGVjYXRvbWJhZW9uCiAgICAgICAgICAgICAgICAgICAgICAgIO+8iEp1bHnvvIkuPC9ub3RlPiBOaWNhcmV0w6ogY2FtZSB3aXRoIGhlciwgYW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBsb2RnZWQgd2l0aCBDdGVzaXBwdXMgc29uIG9mIEdsYXVjb25pZGVzLG9mIEN5ZGFudGlkYWU8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q3lkYW50aWRhZSwgYSBkZW1lIG9mIHRoZSB0cmliZSBBZWdlw69zLjwvbm90ZT47IGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBkZWZlbmRhbnQgTmVhZXJhIGRyYW5rIGFuZCBkaW5lZCB3aXRoIHRoZW0gaW4gdGhlIHByZXNlbmNlIG9mIG1hbnkgbWVuLCBhcwogICAgICAgICAgICAgICAgICAgIGFueSBjb3VydGVzYW4gd291bGQgZG8uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoZSB0cnV0aCBvZiBteQogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudHMsIEkgd2lsbCBjYWxsIHdpdG5lc3NlcyB0byB0aGVzZSBmYWN0cy4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.25'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0ic2VjdGlvbiIgLz5QbGVhc2UgY2FsbCBFdXBoaWxldHVzLCBzb24gb2YgU2ltb24sIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEFleG9uw6osPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFleG9uw6osIGEgZGVtZQogICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJpYmUgQ2Vjcm9waXMuPC9ub3RlPiBhbmQgQXJpc3RvbWFjaHVzLCBzb24gb2YgQ3JpdG9kZW11cywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQWxvcGVjw6ouPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFsb3BlY8OqLCBhIGRlbWUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRyaWJlIEFudGlvY2hpcy48L25vdGU+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPkV1cGhpbGV0dXMgc29uIG9mIFNpbW9uLCBvZiBBZXhvbsOqLAogICAgICAgICAgICAgICAgICAgICAgICBhbmQgQXJpc3RvbWFjaHVzIHNvbiBvZiBDcml0b2RlbXVzLCBvZiBBbG9wZWPDqiwgZGVwb3NlIHRoYXQgdGhleQogICAgICAgICAgICAgICAgICAgICAgICBrbm93IHRoYXQgU2ltdXMgdGhlIFRoZXNzYWxpYW4gY2FtZSB0byBBdGhlbnMgZm9yIHRoZSBncmVhdCBQYW5hdGhlbmFlYSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgTmljYXJldMOqIGNhbWUgd2l0aCBoaW0sIGFuZCBOZWFlcmEsIHRoZSBwcmVzZW50IGRlZmVuZGFudDsKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgdGhleSBsb2RnZWQgd2l0aCBDdGVzaXBwdXMgc29uIG9mIEdsYXVjb25pZGVzLCBhbmQgdGhhdCBOZWFlcmEKICAgICAgICAgICAgICAgICAgICAgICAgZHJhbmsgd2l0aCB0aGVtIGFzIGJlaW5nIGEgY291cnRlc2FuLCB3aGlsZSBtYW55IG90aGVycyB3ZXJlIHByZXNlbnQgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGpvaW5lZCBpbiB0aGUgZHJpbmtpbmcgaW4gdGhlIGhvdXNlIG9mIEN0ZXNpcHB1cy48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+RXVwaGlsZXR1cyBzb24gb2YgU2ltb24sIG9mIEFleG9uw6osCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBBcmlzdG9tYWNodXMgc29uIG9mIENyaXRvZGVtdXMsIG9mIEFsb3BlY8OqLCBkZXBvc2UgdGhhdCB0aGV5CiAgICAgICAgICAgICAgICAgICAgICAgIGtub3cgdGhhdCBTaW11cyB0aGUgVGhlc3NhbGlhbiBjYW1lIHRvIEF0aGVucyBmb3IgdGhlIGdyZWF0IFBhbmF0aGVuYWVhLCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBOaWNhcmV0w6ogY2FtZSB3aXRoIGhpbSwgYW5kIE5lYWVyYSwgdGhlIHByZXNlbnQgZGVmZW5kYW50OwogICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhhdCB0aGV5IGxvZGdlZCB3aXRoIEN0ZXNpcHB1cyBzb24gb2YgR2xhdWNvbmlkZXMsIGFuZCB0aGF0IE5lYWVyYQogICAgICAgICAgICAgICAgICAgICAgICBkcmFuayB3aXRoIHRoZW0gYXMgYmVpbmcgYSBjb3VydGVzYW4sIHdoaWxlIG1hbnkgb3RoZXJzIHdlcmUgcHJlc2VudCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgam9pbmVkIGluIHRoZSBkcmlua2luZyBpbiB0aGUgaG91c2Ugb2YgQ3Rlc2lwcHVzLjwvdHJhbnNsYXRpb24+"
translation['59.speaker.26'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgdGhpcywgeW91CiAgICAgICAgICAgICAgICAgICAgbXVzdCBrbm93LCBzaGUgcGxpZWQgaGVyIHRyYWRlIG9wZW5seSBpbiBDb3JpbnRoIGFuZCB3YXMgcXVpdGUgYSBjZWxlYnJpdHksCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIGFtb25nIG90aGVyIGxvdmVycyBYZW5vY2xlaWRlcyB0aGUgcG9ldCwgYW5kIEhpcHBhcmNodXMgdGhlIGFjdG9yLCB3aG8KICAgICAgICAgICAgICAgICAgICBrZXB0IGhlciBvbiBoaXJlLiBUbyBwcm92ZSB0aGUgdHJ1dGggb2YgbXkgc3RhdGVtZW50IEkgY2Fubm90IGJyaW5nIGJlZm9yZSB5b3UKICAgICAgICAgICAgICAgICAgICB0aGUgdGVzdGltb255IG9mIFhlbm9jbGVpZGVzLCBzaW5jZSB0aGUgbGF3cyBkbyBub3QgcGVybWl0IGhpbSB0byB0ZXN0aWZ5LgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.27'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBvbiB0aGUgYWR2aWNlIG9mIENhbGxpc3RyYXR1cyB5b3UKICAgICAgICAgICAgICAgICAgICB1bmRlcnRvb2sgdG8gYWlkIHRoZSBMYWNlZGFlbW9uaWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgaW4KICAgICAgICAgICAgICAgICAgICAgICAgMzY5LCB3aGVuIEVwYW1laW5vbmRhcyBhbmQgdGhlIFRoZWJhbnMgaW52YWRlZCBMYWNvbmlhLjwvbm90ZT4gaGUgYXQgdGhhdAogICAgICAgICAgICAgICAgICAgIHRpbWUgb3Bwb3NlZCBpbiB0aGUgYXNzZW1ibHkgdGhlIHZvdGUgdG8gZG8gc28sIGJlY2F1c2UgaGUgaGFkIHB1cmNoYXNlZCB0aGUKICAgICAgICAgICAgICAgICAgICByaWdodCB0byBjb2xsZWN0IHRoZSB0d28gcGVyIGNlbnQgdGF4IG9uIGdyYWluIGR1cmluZyB0aGUgcGVhY2UsIGFuZCB3YXMgb2JsaWdlZAogICAgICAgICAgICAgICAgICAgIHRvIGRlcG9zaXQgaGlzIGNvbGxlY3Rpb25zIGluIHRoZSBzZW5hdGUtY2hhbWJlciBkdXJpbmcgZWFjaCBwcnl0YW55LiBGb3IgdGhpcwogICAgICAgICAgICAgICAgICAgIGhlIHdhcyBlbnRpdGxlZCB0byBleGVtcHRpb24gdW5kZXIgdGhlIGxhd3MgYW5kIGRpZCBub3QgZ28gb3V0IG9uIHRoYXQKICAgICAgICAgICAgICAgICAgICBleHBlZGl0aW9uOyBidXQgaGUgd2FzIGluZGljdGVkIGJ5IHRoaXMgbWFuIFN0ZXBoYW51cyBmb3IgYXZvaWRhbmNlIG9mIG1pbGl0YXJ5CiAgICAgICAgICAgICAgICAgICAgZHV0eSwgYW5kIGJlaW5nIHNsYW5kZXJvdXNseSBtYWxpZ25lZCBpbiB0aGUgbGF0dGVyJ3Mgc3BlZWNoIGJlZm9yZSB0aGUgY291cnQsCiAgICAgICAgICAgICAgICAgICAgd2FzIGNvbnZpY3RlZCBhbmQgZGVwcml2ZWQgb2YgaGlzIGNpdmljIHJpZ2h0cy4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.28'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IGRvIHlvdSBub3QgY291bnQgaXQgYSBtb25zdHJvdXMgdGhpbmcgdGhhdCB0aGlzIFN0ZXBoYW51cyBoYXMgdGFrZW4KICAgICAgICAgICAgICAgICAgICB0aGUgcmlnaHQgb2YgZnJlZSBzcGVlY2ggZnJvbSB0aG9zZSB3aG8gYXJlIG5hdGl2ZS1ib3JuIGNpdGl6ZW5zIGFuZCBhcmUgbGF3ZnVsCiAgICAgICAgICAgICAgICAgICAgbWVtYmVycyBvZiBvdXIgY29tbW9ud2VhbHRoLCBhbmQgaW4gZGVmaWFuY2Ugb2YgYWxsIHRoZSBsYXdzIGZvcmNlcyB1cG9uIHlvdSBhcwogICAgICAgICAgICAgICAgICAgIEF0aGVuaWFucyB0aG9zZSB3aG8gaGF2ZSBubyBzdWNoIHJpZ2h0PyBJIHdpbGwsIGhvd2V2ZXIsIGNhbGwgSGlwcGFyY2h1cyBoaW1zZWxmCiAgICAgICAgICAgICAgICAgICAgYW5kIGZvcmNlIGhpbSBlaXRoZXIgdG8gZ2l2ZSB0ZXN0aW1vbnkgb3IgdGFrZSB0aGUgb2F0aCBvZiBkaXNjbGFpbWVyLCBvciBJIHdpbGwKICAgICAgICAgICAgICAgICAgICBzdWJwb2VuYSBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBhYm92ZSBwLiAyOTUgYW5kIHZvbC4gMS4gcC4KICAgICAgICAgICAgICAgICAgICAgICAgOTcuPC9ub3RlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QbGVhc2UgY2FsbCBIaXBwYXJjaHVzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zdGl0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc3RpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhpcHBhcmNodXMgb2YgQXRobW9ub248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXRobW9ub24sIGEgZGVtZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWJlIENlY3JvcGlzLjwvbm90ZT4gZGVwb3NlcyB0aGF0IFhlbm9jbGVpZGVzIGFuZCBoZSBoaXJlZCBpbgogICAgICAgICAgICAgICAgICAgICAgICBDb3JpbnRoIE5lYWVyYSwgdGhlIHByZXNlbnQgZGVmZW5kYW50LCBhcyBhIGNvdXJ0ZXNhbiB3aG8gcHJvc3RpdHV0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaGVyc2VsZiBmb3IgbW9uZXksIGFuZCB0aGF0IE5lYWVyYSB1c2VkIHRvIGRyaW5rIGF0IENvcmludGggaW4gdGhlIGNvbXBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgb2YgaGltc2VsZiBhbmQgWGVub2NsZWlkZXMgdGhlIHBvZXQuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc3RpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhpcHBhcmNodXMgb2YgQXRobW9ub248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+QXRobW9ub24sIGEgZGVtZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWJlIENlY3JvcGlzLjwvbm90ZT4gZGVwb3NlcyB0aGF0IFhlbm9jbGVpZGVzIGFuZCBoZSBoaXJlZCBpbgogICAgICAgICAgICAgICAgICAgICAgICBDb3JpbnRoIE5lYWVyYSwgdGhlIHByZXNlbnQgZGVmZW5kYW50LCBhcyBhIGNvdXJ0ZXNhbiB3aG8gcHJvc3RpdHV0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgaGVyc2VsZiBmb3IgbW9uZXksIGFuZCB0aGF0IE5lYWVyYSB1c2VkIHRvIGRyaW5rIGF0IENvcmludGggaW4gdGhlIGNvbXBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgb2YgaGltc2VsZiBhbmQgWGVub2NsZWlkZXMgdGhlIHBvZXQuPC90cmFuc2xhdGlvbj4="
translation['59.speaker.29'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWZ0ZXIgdGhpcywKICAgICAgICAgICAgICAgICAgICB0aGVuLCBzaGUgaGFkIHR3byBsb3ZlcnMsIFRpbWFub3JpZGFzIHRoZSBDb3JpbnRoaWFuIGFuZCBFdWNyYXRlcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTGV1Y2FkaWFuLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5MZXVjYXMgb3IgU2FudGEgTWF1cmEsIG9mZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd2VzdCBjb2FzdCBvZiBBY2FybmFuaWEuPC9ub3RlPiBUaGVzZSBtZW4gc2VlaW5nIHRoYXQgTmljYXJldMOqIHdhcwogICAgICAgICAgICAgICAgICAgIGV4dHJhdmFnYW50IGluIHRoZSBzdW1zIHNoZSBleGFjdGVkIGZyb20gdGhlbSwgZm9yIHNoZSBkZW1hbmRlZCB0aGF0IHRoZXkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgc3VwcGx5IHRoZSBlbnRpcmUgZGFpbHkgZXhwZW5zZXMgb2YgdGhlIGhvdXNlaG9sZCwgcGFpZCBkb3duIHRvCiAgICAgICAgICAgICAgICAgICAgTmljYXJldMOqIHRoaXJ0eSBtaW5hZSBhcyB0aGUgcHJpY2Ugb2YgTmVhZXJhJ3MgcGVyc29uLCBhbmQgcHVyY2hhc2VkCiAgICAgICAgICAgICAgICAgICAgdGhlIGdpcmwgb3V0cmlnaHQgZnJvbSBoZXIgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXcgb2YgdGhlIGNpdHksIHRvIGJlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgc2xhdmUuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.30'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhleSBrZXB0IGhlciBhbmQgbWFkZSB1c2Ugb2YgaGVyCiAgICAgICAgICAgICAgICAgICAgYXMgbG9uZyBhIHRpbWUgYXMgdGhleSBwbGVhc2VkLiBXaGVuLCBob3dldmVyLCB0aGV5IHdlcmUgYWJvdXQgdG8gbWFycnksIHRoZXkKICAgICAgICAgICAgICAgICAgICBnYXZlIGhlciBub3RpY2UgdGhhdCB0aGV5IGRpZCBub3Qgd2FudCB0byBzZWUgaGVyLCB3aG8gaGFkIGJlZW4gdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgICAgbWlzdHJlc3MsIHBseWluZyBoZXIgdHJhZGUgaW4gQ29yaW50aCBvciBsaXZpbmcgdW5kZXIgdGhlIGNvbnRyb2wgb2YgYQogICAgICAgICAgICAgICAgICAgIGJyb3RoZWwta2VlcGVyOyBidXQgdGhhdCB0aGV5IHdvdWxkIGJlIGdsYWQgdG8gcmVjb3ZlciBmcm9tIGhlciBsZXNzIHRoYW4gdGhleQogICAgICAgICAgICAgICAgICAgIGhhZCBwYWlkIGRvd24sIGFuZCB0byBzZWUgaGVyIHJlYXBpbmcgc29tZSBhZHZhbnRhZ2UgZm9yIGhlcnNlbGYuIFRoZXkgb2ZmZXJlZCwKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIHRvIHJlbWl0IG9uZSB0aG91c2FuZCBkcmFjaG1hZSB0b3dhcmQgdGhlIHByaWNlIG9mIGhlciBmcmVlZG9tLCBmaXZlCiAgICAgICAgICAgICAgICAgICAgaHVuZHJlZCBkcmFjaG1hZSBhcGllY2U7IGFuZCB0aGV5IGJhZGUgaGVyLCB3aGVuIHNoZSBmb3VuZCB0aGUgbWVhbnMsIHRvIHBheQogICAgICAgICAgICAgICAgICAgIHRoZW0gdGhlIHR3ZW50eSBtaW5hZS4gV2hlbiBzaGUgaGVhcmQgdGhpcyBwcm9wb3NhbCBmcm9tIEV1Y3JhdGVzIGFuZAogICAgICAgICAgICAgICAgICAgIFRpbWFub3JpZGFzLCBzaGUgc3VtbW9uZWQgdG8gQ29yaW50aCBhbW9uZyBvdGhlcnMgd2hvIGhhZCBiZWVuIGhlciBsb3ZlcnMKICAgICAgICAgICAgICAgICAgICBQaHJ5bmlvbiBvZiBQYWVhbmlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QYWVhbmlhLCBhIGRlbWUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWJlIFBhbmRpb25pcy4gRGVtb2NoYXJlcyBpcyBtZW50aW9uZWQgc2V2ZXJhbCB0aW1lcyBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ3LjIyIiB2YWxpZD0ieWVzIj5EZW0uIDQ3LjIyPC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0Ny4yOCIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICA0Ny4yODwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDcuMzIiIHZhbGlkPSJ5ZXMiPkRlbS4gNDcuMzI8L2JpYmw+77yJLiBUaGUgRGVtb24KICAgICAgICAgICAgICAgICAgICAgICAgaGVyZSBtZW50aW9uZWQgd2FzIHBvc3NpYmx5IHRoZSB1bmNsZSBvZiBEZW1vc3RoZW5lcy48L25vdGU+IHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICBEZW1vbiBhbmQgdGhlIGJyb3RoZXIgb2YgRGVtb2NoYXJlcywgYSBtYW4gd2hvIHdhcyBsaXZpbmcgYSBsaWNlbnRpb3VzIGFuZAogICAgICAgICAgICAgICAgICAgIGV4dHJhdmFnYW50IGxpZmUsIGFzIHRoZSBvbGRlciBvbmVzIGFtb25nIHlvdSByZW1lbWJlci4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0Ny4yMiIgdmFsaWQ9InllcyI+RGVtLiA0Ny4yMjwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNDcuMjgiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgNDcuMjg8L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ3LjMyIiB2YWxpZD0ieWVzIj5EZW0uIDQ3LjMyPC9iaWJsPu+8iS4gVGhlIERlbW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGhlcmUgbWVudGlvbmVkIHdhcyBwb3NzaWJseSB0aGUgdW5jbGUgb2YgRGVtb3N0aGVuZXMuPC90cmFuc2xhdGlvbj4="
translation['59.speaker.31'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFBocnluaW9uIGNhbWUgdG8gaGVyLCBzaGUgdG9sZCBoaW0gdGhlIHByb3Bvc2FsIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgRXVjcmF0ZXMgYW5kIFRpbWFub3JpZGFzIGhhZCBtYWRlIHRvIGhlciwgYW5kIGdhdmUgaGltIHRoZSBtb25leSB3aGljaCBzaGUgaGFkCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGVkIGZyb20gaGVyIG90aGVyIGxvdmVycyBhcyBhIGNvbnRyaWJ1dGlvbiB0b3dhcmQgdGhlIHByaWNlIG9mIGhlcgogICAgICAgICAgICAgICAgICAgIGZyZWVkb20sIGFuZCBhZGRlZCB3aGF0ZXZlciBzaGUgaGFkIGdhaW5lZCBmb3IgaGVyc2VsZiwgYW5kIHNoZSBiZWdnZWQgaGltIHRvCiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZSB0aGUgYmFsYW5jZSBuZWVkZWQgdG8gbWFrZSB1cCB0aGUgdHdlbnR5IG1pbmFlLCBhbmQgdG8gcGF5IGl0IHRvCiAgICAgICAgICAgICAgICAgICAgRXVjcmF0ZXMgYW5kIFRpbWFub3JpZGFzIHRvIHNlY3VyZSBoZXIgZnJlZWRvbS4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.32'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBsaXN0ZW5lZCBnbGFkbHkgdG8gdGhlc2Ugd29yZHMgb2YgaGVycyxhbmQgdGFraW5nIHRoZSBtb25leSB3aGljaCBoYWQgYmVlbgogICAgICAgICAgICAgICAgICAgIHBhaWQgaW4gdG8gaGVyIGJ5IGhlciBvdGhlciBsb3ZlcnMgYWRkZWQgdGhlIGJhbGFuY2UgaGltc2VsZiBhbmQgcGFpZCB0aGUgdHdlbnR5CiAgICAgICAgICAgICAgICAgICAgbWluYWUgYXMgdGhlIHByaWNlIG9mIGhlciBmcmVlZG9tIHRvIEV1Y3JhdGVzIGFuZCBUaW1hbm9yaWRhcyBvbiB0aGUgY29uZGl0aW9uCiAgICAgICAgICAgICAgICAgICAgdGhhdCBzaGUgc2hvdWxkIG5vdCBwbHkgaGVyIHRyYWRlIGluIENvcmludGguPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvCiAgICAgICAgICAgICAgICAgICAgcHJvdmUgdGhhdCB0aGVzZSBzdGF0ZW1lbnRzIG9mIG1pbmUgYXJlIHRydWUsIEkgd2lsbCBjYWxsIGFzIHdpdG5lc3MgdG8gdGhlbSB0aGUKICAgICAgICAgICAgICAgICAgICBtYW4gd2hvIHdhcyBwcmVzZW50LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QbGVhc2UgY2FsbCBQaGlsYWdydXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTWVsaXTDqi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TWVsaXTDqiwgYSBkZW1lCiAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0cmliZSBDZWNyb3Bpcy48L25vdGU+PHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3N0aXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zdGl0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGhpbGFncnVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIE1lbGl0w6ogZGVwb3NlcyB0aGF0IGhlIHdhcyBwcmVzZW50IGluIENvcmludGggd2hlbiBQaHJ5bmlvbiwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3RoZXIgb2YgRGVtb2NoYXJlcywgcGFpZCBkb3duIHR3ZW50eSBtaW5hZSBhcyB0aGUgcHJpY2Ugb2YgTmVhZXJhLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VudCBkZWZlbmRhbnQsIHRvIFRpbWFub3JpZGFzLCB0aGUgQ29yaW50aGlhbiwgYW5kIEV1Y3JhdGVzLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgTGV1Y2FkaWFuOyBhbmQgdGhhdCBhZnRlciBwYXlpbmcgZG93biB0aGUgbW9uZXkgUGhyeW5pb24gd2VudCBvZmYgdG8gQXRoZW5zLAogICAgICAgICAgICAgICAgICAgICAgICB0YWtpbmcgTmVhZXJhIHdpdGggaGltLjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3N0aXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QaGlsYWdydXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTWVsaXTDqiBkZXBvc2VzIHRoYXQgaGUgd2FzIHByZXNlbnQgaW4gQ29yaW50aCB3aGVuIFBocnluaW9uLCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdGhlciBvZiBEZW1vY2hhcmVzLCBwYWlkIGRvd24gdHdlbnR5IG1pbmFlIGFzIHRoZSBwcmljZSBvZiBOZWFlcmEsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50IGRlZmVuZGFudCwgdG8gVGltYW5vcmlkYXMsIHRoZSBDb3JpbnRoaWFuLCBhbmQgRXVjcmF0ZXMsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBMZXVjYWRpYW47IGFuZCB0aGF0IGFmdGVyIHBheWluZyBkb3duIHRoZSBtb25leSBQaHJ5bmlvbiB3ZW50IG9mZiB0byBBdGhlbnMsCiAgICAgICAgICAgICAgICAgICAgICAgIHRha2luZyBOZWFlcmEgd2l0aCBoaW0uPC90cmFuc2xhdGlvbj4="
translation['59.speaker.33'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiBoZSBjYW1lCiAgICAgICAgICAgICAgICAgICAgYmFjayBoZXJlLCBicmluZ2luZyBoZXIgd2l0aCBoaW0sIGhlIHRyZWF0ZWQgaGVyIHdpdGhvdXQgZGVjZW5jeSBvciByZXN0cmFpbnQsCiAgICAgICAgICAgICAgICAgICAgdGFraW5nIGhlciBldmVyeXdoZXJlIHdpdGggaGltIHRvIGRpbm5lcnMgd2hlcmUgdGhlcmUgd2FzIGRyaW5raW5nIGFuZCBtYWtpbmcKICAgICAgICAgICAgICAgICAgICBoZXIgYSBwYXJ0bmVyIGluIGhpcyByZXZlbHM7IGFuZCBoZSBoYWQgaW50ZXJjb3Vyc2Ugd2l0aCBoZXIgb3Blbmx5IHdoZW5ldmVyIGFuZAogICAgICAgICAgICAgICAgICAgIHdoZXJldmVyIGhlIHdpc2hlZCwgbWFraW5nIGhpcyBwcml2aWxlZ2UgYSBkaXNwbGF5IHRvIHRoZSBvbmxvb2tlcnMuIEhlIHRvb2sgaGVyCiAgICAgICAgICAgICAgICAgICAgdG8gbWFueSBob3VzZXMgdG8gZ2F5IHBhcnRpZXMgYW5kIGFtb25nIHRoZW0gdG8gdGhhdCBvZiBDaGFicmlhcyBvZgogICAgICAgICAgICAgICAgICAgIEFleG9uw6osIHdoZW4sIGluIHRoZSBhcmNob25zaGlwIG9mIFNvY3JhdGlkYXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGluIDxkYXRlIGF1dGhuYW1lPSItMzczIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzczIj4zNzM8L2RhdGU+IEIuQy48L25vdGU+IGhlIHdhcwogICAgICAgICAgICAgICAgICAgIHZpY3RvciBhdCB0aGUgUHl0aGlhbiBnYW1lczxkYXRlIGF1dGhuYW1lPSItMzczIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzczIj4zNzM8L2RhdGU+IEIuQy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIFB5dGhpYW4gZ2FtZXMKICAgICAgICAgICAgICAgICAgICAgICAgd2VyZSBjZWxlYnJhdGVkIGF0IERlbHBoaSDvvIhQeXRob++8iSBldmVyeSBmb3VyIHllYXJzLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICB3aXRoIHRoZSBmb3VyLWhvcnNlIGNoYXJpb3Qgd2hpY2ggaGUgaGFkIGJvdWdodCBmcm9tIHRoZSBzb25zIG9mIE1pdHlzLCB0aGUKICAgICAgICAgICAgICAgICAgICBBcmdpdmUsIGFuZCByZXR1cm5pbmcgZnJvbSBEZWxwaGkgaGUgZ2F2ZSBhIGZlYXN0IGF0IENvbGlhcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIHRlbXBsZSBvZiBBdGhlbmEgQ29saWFzIHdhcyBzaXR1YXRlZCBvbiBhIHBvaW50IG9uIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBCYXkgb2YgUGhhbGVydW0uPC9ub3RlPiB0byBjZWxlYnJhdGUgaGlzIHZpY3RvcnksIGFuZCBpbiB0aGF0IHBsYWNlIG1hbnkgaGFkCiAgICAgICAgICAgICAgICAgICAgaW50ZXJjb3Vyc2Ugd2l0aCBoZXIgd2hlbiBzaGUgd2FzIGRydW5rLCB3aGlsZSBQaHJ5bmlvbiB3YXMgYXNsZWVwLCBhbW9uZyB0aGVtCiAgICAgICAgICAgICAgICAgICAgZXZlbiB0aGUgc2VydmluZy1tZW4gb2YgQ2hhYnJpYXMuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.34'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCB0aGVzZSBzdGF0ZW1lbnRzIG9mIG1pbmUgYXJlIHRydWUsIEkgd2lsbAogICAgICAgICAgICAgICAgICAgIGJyaW5nIGJlZm9yZSB5b3UgYXMgd2l0bmVzc2VzIHRob3NlIHdobyB3ZXJlIHByZXNlbnQgYW5kIHNhdyBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgdGhlbXNlbHZlcy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGxlYXNlIGNhbGwgQ2hpb25pZGVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFh5cGV0w6o8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+WHlwZXTDqiwgYSBkZW1lIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0cmliZSBDZWNyb3Bpcy48L25vdGU+IGFuZCBFdXRoZXRpb24gb2YgQ3lkYXRoZW5hZXVtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DeWRhdGhlbmFldW0sIGEgZGVtZSBvZiB0aGUgdHJpYmUgUGFuZGlvbmlzLjwvbm90ZT48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc3RpdGlvbnMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zdGl0aW9uczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkNoaW9uaWRlcyBvZiBYeXBldMOqIGFuZCBFdXRoZXRpb24gb2YgQ3lkYXRoZW5hZXVtIGRlcG9zZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZXkgd2VyZSBpbnZpdGVkIHRvIGRpbm5lciBieSBDaGFicmlhcywgd2hlbiBoZSBjZWxlYnJhdGVkIHdpdGggYSBiYW5xdWV0CiAgICAgICAgICAgICAgICAgICAgICAgIGhpcyB2aWN0b3J5IGluIHRoZSBjaGFyaW90IHJhY2UsIGFuZCB0aGF0IHRoZSBiYW5xdWV0IHdhcyBoZWxkIGF0IENvbGlhczsKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoYXQgdGhleSBrbm93IHRoYXQgUGhyeW5pb24gd2FzIHByZXNlbnQgYXQgdGhlIGJhbnF1ZXQsIGhhdmluZyB3aXRoIGhpbQogICAgICAgICAgICAgICAgICAgICAgICBOZWFlcmEsIHRoZSBwcmVzZW50IGRlZmVuZGFudDsgdGhhdCB0aGV5IHRoZW1zZWx2ZXMgbGF5IGRvd24gdG8gc2xlZXAsIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGRpZCBQaHJ5bmlvbiBhbmQgTmVhZXJhLCBhbmQgdGhhdCB0aGV5IG9ic2VydmVkIHRoYXQgbWVuIGdvdCB1cCBpbiB0aGUgbmlnaHQKICAgICAgICAgICAgICAgICAgICAgICAgdG8gZ28gaW4gdG8gTmVhZXJhLCBhbW9uZyB0aGVtIHNvbWUgb2YgdGhlIHNlcnZpbmctbWVuIHdobyB3ZXJlIGhvdXNlaG9sZAogICAgICAgICAgICAgICAgICAgICAgICBzbGF2ZXMgb2YgQ2hhYnJpYXMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc3RpdGlvbnM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5DaGlvbmlkZXMgb2YgWHlwZXTDqiBhbmQgRXV0aGV0aW9uIG9mIEN5ZGF0aGVuYWV1bSBkZXBvc2UgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICB0aGV5IHdlcmUgaW52aXRlZCB0byBkaW5uZXIgYnkgQ2hhYnJpYXMsIHdoZW4gaGUgY2VsZWJyYXRlZCB3aXRoIGEgYmFucXVldAogICAgICAgICAgICAgICAgICAgICAgICBoaXMgdmljdG9yeSBpbiB0aGUgY2hhcmlvdCByYWNlLCBhbmQgdGhhdCB0aGUgYmFucXVldCB3YXMgaGVsZCBhdCBDb2xpYXM7CiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IHRoZXkga25vdyB0aGF0IFBocnluaW9uIHdhcyBwcmVzZW50IGF0IHRoZSBiYW5xdWV0LCBoYXZpbmcgd2l0aCBoaW0KICAgICAgICAgICAgICAgICAgICAgICAgTmVhZXJhLCB0aGUgcHJlc2VudCBkZWZlbmRhbnQ7IHRoYXQgdGhleSB0aGVtc2VsdmVzIGxheSBkb3duIHRvIHNsZWVwLCBhcwogICAgICAgICAgICAgICAgICAgICAgICBkaWQgUGhyeW5pb24gYW5kIE5lYWVyYSwgYW5kIHRoYXQgdGhleSBvYnNlcnZlZCB0aGF0IG1lbiBnb3QgdXAgaW4gdGhlIG5pZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGdvIGluIHRvIE5lYWVyYSwgYW1vbmcgdGhlbSBzb21lIG9mIHRoZSBzZXJ2aW5nLW1lbiB3aG8gd2VyZSBob3VzZWhvbGQKICAgICAgICAgICAgICAgICAgICAgICAgc2xhdmVzIG9mIENoYWJyaWFzLjwvdHJhbnNsYXRpb24+"
translation['59.speaker.35'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2luY2UsIHRoZW4sCiAgICAgICAgICAgICAgICAgICAgc2hlIHdhcyB0cmVhdGVkIHdpdGggd2FudG9uIG91dHJhZ2UgYnkgUGhyeW5pb24sIGFuZCB3YXMgbm90IGxvdmVkIGFzIHNoZQogICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkIHRvIGJlLCBhbmQgc2luY2UgaGVyIHdpc2hlcyB3ZXJlIG5vdCBncmFudGVkIGJ5IGhpbSwgc2hlIHBhY2tlZCB1cCBoaXMKICAgICAgICAgICAgICAgICAgICBob3VzZWhvbGQgZ29vZHMgYW5kIGFsbCB0aGUgY2xvdGhpbmcgYW5kIGpld2Vscnkgd2l0aCB3aGljaCBoZSBoYWQgYWRvcm5lZCBoZXIKICAgICAgICAgICAgICAgICAgICBwZXJzb24sIGFuZCwgdGFraW5nIHdpdGggaGVyIHR3byBtYWlkLXNlcnZhbnRzLCBUaHJhdHRhIGFuZAogICAgICAgICAgICAgICAgICAgIENvY2NhbGluw6plLCByYW4gb2ZmIHRvIE1lZ2FyYS4gVGhpcyB3YXMgdGhlIHBlcmlvZCB3aGVuIEFzdGVpdXMgd2FzCiAgICAgICAgICAgICAgICAgICAgYXJjaG9uIGF0IEF0aGVucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgaW4gPGRhdGUgYXV0aG5hbWU9Ii0zNzIiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii0zNzIiPjM3MjwvZGF0ZT4gQi5DLjsgQWxjaXN0aGVuZXMgd2FzIGFyY2hvbiB0aGUgeWVhciBmb2xsb3dpbmcuPC9ub3RlPiBhdAogICAgICAgICAgICAgICAgICAgIHRoZSB0aW1lIHlvdSB3ZXJlIHdhZ2luZyB5b3VyIHNlY29uZCB3YXIgYWdhaW5zdCB0aGUgTGFjZWRhZW1vbmlhbnMuIDxkYXRlIGF1dGhuYW1lPSItMzcyIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzcyIj4zNzI8L2RhdGU+IEIuQy47IEFsY2lzdGhlbmVzIHdhcyBhcmNob24gdGhlIHllYXIgZm9sbG93aW5nLjwvdHJhbnNsYXRpb24+"
translation['59.speaker.36'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0ic2VjdGlvbiIgLz5TaGUgcmVtYWluZWQgYXQgTWVnYXJhIHR3byB5ZWFycywgdGhhdCBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBhcmNob25zaGlwIG9mIEFzdGVpdXMgYW5kIHRoYXQgb2YgQWxjaXN0aGVuZXM7IGJ1dCB0aGUgdHJhZGUgb2YgcHJvc3RpdHV0aW9uIGRpZAogICAgICAgICAgICAgICAgICAgIG5vdCBicmluZyBpbiBlbm91Z2ggbW9uZXkgdG8gbWFpbnRhaW4gaGVyIGVzdGFibGlzaG1lbnTigJRzaGUgd2FzIGxhdmlzaAogICAgICAgICAgICAgICAgICAgIGluIGhlciB0YXN0ZXMsIGFuZCB0aGUgTWVnYXJpYW5zIHdlcmUgbmlnZ2FyZGx5IGFuZCBpbGxpYmVyYWwsIGFuZCB0aGVyZSB3ZXJlCiAgICAgICAgICAgICAgICAgICAgYnV0IGZldyBmb3JlaWduZXJzIHRoZXJlIG9uIGFjY291bnQgb2YgdGhlIHdhciBhbmQgYmVjYXVzZSB0aGUgTWVnYXJpYW5zIGZhdm9yZWQKICAgICAgICAgICAgICAgICAgICB0aGUgTGFjZWRhZW1vbmlhbiBzaWRlLCB3aGlsZSB5b3Ugd2VyZSBpbiBjb250cm9sIG9mIHRoZSBzZWE7IGl0IHdhcywgaG93ZXZlciwKICAgICAgICAgICAgICAgICAgICBub3Qgb3BlbiB0byBoZXIgdG8gcmV0dXJuIHRvIENvcmludGgsIGJlY2F1c2Ugc2hlIGhhZCBnb3QgaGVyIGZyZWVkb20gZnJvbQogICAgICAgICAgICAgICAgICAgIEV1Y3JhdGVzIGFuZCBUaW1hbm9yaWRhcyBvbiB0aGUgY29uZGl0aW9uIHRoYXQgc2hlIHdvdWxkIG5vdCBwbHkgaGVyIHRyYWRlIGluCiAgICAgICAgICAgICAgICAgICAgQ29yaW50aDvigJQgPC90cmFuc2xhdGlvbj4="
translation['59.speaker.37'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0ic2VjdGlvbiIgLz5zbywgd2hlbiBwZWFjZSB3YXMgbWFkZSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBhcmNob25zaGlwIG9mIFBocmFzaWNsZWlkZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoYXQgaXMsIGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGF0ZSBhdXRobmFtZT0iLTM3MSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM3MSI+MzcxPC9kYXRlPiBCLkMuPC9ub3RlPiBhbmQgdGhlIGJhdHRsZSB3YXMgZm91Z2h0IGF0CiAgICAgICAgICAgICAgICAgICAgICAgIExldWN0cmE8ZGF0ZSBhdXRobmFtZT0iLTM3MSIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iLTM3MSI+MzcxPC9kYXRlPiBCLkMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxldWN0cmEgd2FzIGEgdG93biBpbiBCb2VvdGlhLiBJbgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGJhdHRsZSB0aGUgVGhlYmFucyB1bmRlciBFcGFtZWlub25kYXMgYnJva2UgdGhlIHBvd2VyIG9mIFNwYXJ0YS4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGUgd2FzIDxkYXRlIGF1dGhuYW1lPSItMzcxIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzcxIj4zNzE8L2RhdGU+IEIuQy48L25vdGU+IGJldHdlZW4gdGhlIFRoZWJhbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIExhY2VkYWVtb25pYW5zLCB0aGlzIG1hbiBTdGVwaGFudXMsIGhhdmluZyBhdCB0aGUgdGltZSBjb21lIHRvIE1lZ2FyYSBhbmQKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgcHV0IHVwIGF0IE5lYWVyYSdzIGhvdXNlLCBhcyBhdCB0aGUgaG91c2Ugb2YgYSBjb3VydGVzYW4sIGFuZCBoYXZpbmcgaGFkCiAgICAgICAgICAgICAgICAgICAgaW50ZXJjb3Vyc2Ugd2l0aCBoZXIsIHNoZSB0b2xkIGhpbSBhbGwgdGhhdCBoYWQgdGFrZW4gcGxhY2UgYW5kIGhlciBicnV0YWwKICAgICAgICAgICAgICAgICAgICB0cmVhdG1lbnQgYnkgUGhyeW5pb24uIFNoZSBnYXZlIGhpbSBiZXNpZGVzIGFsbCB0aGF0IHNoZSBoYWQgYnJvdWdodCBhd2F5IGZyb20KICAgICAgICAgICAgICAgICAgICBQaHJ5bmlvbidzIGhvdXNlLCBhbmQgYXMgc2hlIHdhcyBlYWdlciB0byBsaXZlIGF0IEF0aGVucywgYnV0IHdhcyBhZnJhaWQgb2YKICAgICAgICAgICAgICAgICAgICBQaHJ5bmlvbiBiZWNhdXNlIHNoZSBoYWQgd3JvbmdlZCBoaW0gYW5kIGhlIHdhcyBiaXR0ZXIgYWdhaW5zdCBoZXIsIGFuZCBzaGUga25ldwogICAgICAgICAgICAgICAgICAgIGhlIHdhcyBhIG1hbiBvZiB2aW9sZW50IGFuZCByZWNrbGVzcyB0ZW1wZXIsIHNoZSB0b29rIFN0ZXBoYW51cyBoZXJlIGZvciBoZXIKICAgICAgICAgICAgICAgICAgICAgICAgcGF0cm9uLjxkYXRlIGF1dGhuYW1lPSItMzcxIiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItMzcxIj4zNzE8L2RhdGU+IEIuQy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RXZlcnkgcmVzaWRlbnQgYWxpZW4gaW4gQXRoZW5zIHdhcwogICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZCB0byBoYXZlIHNvbWUgY2l0aXplbiBhcyBoaXMgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DPgc6/z4PPhOG9sc+EzrfPgjwvZm9yZWlnbj4sIG9yIHBhdHJvbi48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4DPgc6/z4PPhOG9sc+EzrfPgjwvZm9yZWlnbj4sIG9yIHBhdHJvbi48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.38'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBvbiBoaXMgcGFydCBlbmNvdXJhZ2VkIGhlciB0aGVyZSBpbiBNZWdhcmEKICAgICAgICAgICAgICAgICAgICB3aXRoIGNvbmZpZGVudCB3b3JkcywgYm9hc3RmdWxseSBhc3NlcnRpbmcgdGhhdCBpZiBQaHJ5bmlvbiBzaG91bGQgbGF5IGhhbmRzIG9uCiAgICAgICAgICAgICAgICAgICAgaGVyIGhlIHdvdWxkIGhhdmUgY2F1c2UgdG8gcnVlIGl0LCB3aGVyZWFzIGhlIGhpbXNlbGYgd291bGQga2VlcCBoZXIgYXMgaGlzIHdpZmUKICAgICAgICAgICAgICAgICAgICBhbmQgd291bGQgaW50cm9kdWNlIHRoZSBzb25zIHdob20gc2hlIHRoZW4gaGFkIHRvIGhpcyBjbGFuc21lbiBhcyBiZWluZyBoaXMgb3duLAogICAgICAgICAgICAgICAgICAgIGFuZCB3b3VsZCBtYWtlIHRoZW0gY2l0aXplbnM7IGFuZCBoZSBwcm9taXNlZCB0aGF0IG5vIG9uZSBpbiB0aGUgd29ybGQgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgaGFybSBoZXIuIFNvIGhlIGJyb3VnaHQgaGVyIHdpdGggaGltIGZyb20gTWVnYXJhIHRvIEF0aGVucywgYW5kIHdpdGggaGVyIGhlcgogICAgICAgICAgICAgICAgICAgIHRocmVlIGNoaWxkcmVuLCBQcm94ZW51cyBhbmQgQXJpc3RvbiBhbmQgYSBkYXVnaHRlciB3aG9tIHRoZXkgbm93IGNhbGwgUGhhbm8uCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.39'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBlc3RhYmxpc2hlZCBoZXIgYW5kIGhlciBjaGlsZHJlbiBpbiB0aGUKICAgICAgICAgICAgICAgICAgICBjb3R0YWdlIHdoaWNoIGhlIGhhZCBuZWFyIHRoZSBXaGlzcGVyaW5nIEhlcm1lczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5XZSBkbyBub3Qga25vdyB3aGVyZSB0aGlzIHN0YXR1ZSBzdG9vZC48L25vdGU+IGJldHdlZW4gdGhlIGhvdXNlIG9mCiAgICAgICAgICAgICAgICAgICAgRG9yb3RoZXVzIHRoZSBFbGV1c2luaWFuIGFuZCB0aGF0IG9mIENsZWlub21hY2h1c+KAlHRoZSBjb3R0YWdlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgU3BpbnRoYXJ1cyBoYXMgbm93IGJvdWdodCBmcm9tIGhpbSBmb3Igc2V2ZW4gbWluYWU7IHNvIHRoZSBwcm9wZXJ0eSB3aGljaAogICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cyBvd25lZCB3YXMganVzdCB0aGlzIGFuZCBub3RoaW5nIGJlc2lkZXMuIFRoZXJlIHdlcmUgdHdvIHJlYXNvbnMgd2h5IGhlCiAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBoZXIgaGVyZTogZmlyc3QsIGJlY2F1c2UgaGUgd291bGQgaGF2ZSBhIGJlYXV0aWZ1bCBtaXN0cmVzcyB3aXRob3V0CiAgICAgICAgICAgICAgICAgICAgY29zdCwgYW5kIHNlY29uZGx5LCBiZWNhdXNlIGhlciBlYXJuaW5ncyB3b3VsZCBwcm9jdXJlIHN1cHBsaWVzIGFuZCBtYWludGFpbiB0aGUKICAgICAgICAgICAgICAgICAgICBob3VzZTsgZm9yIGhlIGhhZCBubyBvdGhlciBpbmNvbWUgc2F2ZSB3aGF0IGhlIG1pZ2h0IGdldCBieSBwZXR0aWZvZ2dlcnkuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.40'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0ic2VjdGlvbiIgLz5QaHJ5bmlvbiwgaG93ZXZlciwgbGVhcm5lZCB0aGF0IHRoZSB3b21hbgogICAgICAgICAgICAgICAgICAgIHdhcyBpbiBBdGhlbnMsIGFuZCB3YXMgbGl2aW5nIHdpdGggU3RlcGhhbnVzLCBhbmQgdGFraW5nIHNvbWUgeW91bmcgbWVuIHdpdGggaGltCiAgICAgICAgICAgICAgICAgICAgaGUgY2FtZSB0byB0aGUgaG91c2Ugb2YgU3RlcGhhbnVzIGFuZCBhdHRlbXB0ZWQgdG8gY2FycnkgaGVyIG9mZi4gV2hlbiBTdGVwaGFudXMKICAgICAgICAgICAgICAgICAgICB0b29rIGhlciBhd2F5IGZyb20gaGltLCBhcyB0aGUgbGF3IGFsbG93ZWQsIGRlY2xhcmluZyBoZXIgdG8gYmUgYSBmcmVlIHdvbWFuLAogICAgICAgICAgICAgICAgICAgIFBocnluaW9uIHJlcXVpcmVkIGhlciB0byBwb3N0IGJvbmRzIHdpdGggdGhlIHBvbGVtYXJjaC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgdW50aWwgaGVyIHN0YXR1cywgYXMgZnJlZSB3b21hbiBvciBzbGF2ZSwgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIGRldGVybWluZWQuPC9ub3RlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IHRoaXMKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgaXMgdHJ1ZSwgSSB3aWxsIGJyaW5nIGJlZm9yZSB5b3UgYXMgYSB3aXRuZXNzIHRvIHRoZXNlIGZhY3RzIHRoZSBtYW4KICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIHdobyB3YXMgcG9sZW1hcmNoIGF0IHRoZSB0aW1lLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QbGVhc2UgY2FsbAogICAgICAgICAgICAgICAgICAgIEFlZXRlcyBvZiBDZWlyaWFkYWUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNlaXJpYWRhZSwgYSBkZW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB0cmliZSBIaXBwb3Rob250aXMuPC9ub3RlPjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlcG9zdGl0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc3RpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFlZXRlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBDZWlyaWFkYWUgZGVwb3NlcyB0aGF0IHdoaWxlIGhlIHdhcyBwb2xlbWFyY2gsIE5lYWVyYSwgdGhlIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50LCB3YXMgcmVxdWlyZWQgYnkgUGhyeW5pb24sIHRoZSBicm90aGVyIG9mIERlbW9jaGFyZXMsIHRvIHBvc3QKICAgICAgICAgICAgICAgICAgICAgICAgYm9uZHMsIGFuZCB0aGF0IHRoZSBzdXJldGllcyBvZiBOZWFlcmEgd2VyZSBTdGVwaGFudXMgb2YgRXJvZWFkYWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkVyb2VhZGFlLCBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIaXBwb3Rob250aXMuPC9ub3RlPiBHbGF1Y2V0ZXMgb2YgQ2VwaGlzaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNlcGhpc2lhLCBhIGRlbWUgb2YgdGhlIHRyaWJlIEVyZWN0aGXDr3MuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgQXJpc3RvY3JhdGVzIG9mIFBoYWxlcnVtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QaGFsZXJ1bSwgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVtZSBvZiB0aGUgdHJpYmUgQWVhbnRpcy48L25vdGU+PC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc3RpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFlZXRlcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBDZWlyaWFkYWUgZGVwb3NlcyB0aGF0IHdoaWxlIGhlIHdhcyBwb2xlbWFyY2gsIE5lYWVyYSwgdGhlIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICAgICAgZGVmZW5kYW50LCB3YXMgcmVxdWlyZWQgYnkgUGhyeW5pb24sIHRoZSBicm90aGVyIG9mIERlbW9jaGFyZXMsIHRvIHBvc3QKICAgICAgICAgICAgICAgICAgICAgICAgYm9uZHMsIGFuZCB0aGF0IHRoZSBzdXJldGllcyBvZiBOZWFlcmEgd2VyZSBTdGVwaGFudXMgb2YgRXJvZWFkYWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkVyb2VhZGFlLCBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIaXBwb3Rob250aXMuPC9ub3RlPiBHbGF1Y2V0ZXMgb2YgQ2VwaGlzaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNlcGhpc2lhLCBhIGRlbWUgb2YgdGhlIHRyaWJlIEVyZWN0aGXDr3MuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgQXJpc3RvY3JhdGVzIG9mIFBoYWxlcnVtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5QaGFsZXJ1bSwgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVtZSBvZiB0aGUgdHJpYmUgQWVhbnRpcy48L25vdGU+PC90cmFuc2xhdGlvbj4="
translation['59.speaker.41'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IHRoYXQKICAgICAgICAgICAgICAgICAgICBTdGVwaGFudXMgaGFkIGJlY29tZSBzdXJldHkgZm9yIGhlciwgYW5kIHNlZWluZyB0aGF0IHNoZSB3YXMgbGl2aW5nIGF0IGhpcwogICAgICAgICAgICAgICAgICAgIGhvdXNlLCBzaGUgY29udGludWVkIHRvIGNhcnJ5IG9uIHRoZSBzYW1lIHRyYWRlIG5vIGxlc3MgdGhhbiBiZWZvcmUsIGJ1dCBzaGUKICAgICAgICAgICAgICAgICAgICBjaGFyZ2VkIGhpZ2hlciBmZWVzIGZyb20gdGhvc2Ugd2hvIHNvdWdodCBoZXIgZmF2b3JzIGFzIGJlaW5nIG5vdyBhIHJlc3BlY3RhYmxlCiAgICAgICAgICAgICAgICAgICAgd29tYW4gbGl2aW5nIHdpdGggaGVyIGh1c2JhbmQuIFN0ZXBoYW51cywgb24gaGlzIHBhcnQsIGpvaW5lZCB3aXRoIGhlciBpbgogICAgICAgICAgICAgICAgICAgIGV4dG9ydGluZyBibGFja21haWwuIElmIGhlIGZvdW5kIGFzIGEgbG92ZXIgb2YgTmVhZXJhIGFueSB5b3VuZyBhbGllbiByaWNoIGFuZAogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgZXhwZXJpZW5jZSwgaGUgd291bGQgbG9jayBoaW0gdXAgYXMgY2F1Z2h0IGluIGFkdWx0ZXJ5IHdpdGggaGVyLCBhbmQKICAgICAgICAgICAgICAgICAgICB3b3VsZCBleHRvcnQgYSBsYXJnZSBzdW0gb2YgbW9uZXkgZnJvbSBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.42'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyBjb3Vyc2Ugd2FzIG5hdHVyYWwgZW5vdWdoOyBmb3IgbmVpdGhlciBTdGVwaGFudXMgbm9yIE5lYWVyYSBoYWQgYW55CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgdG8gc3VwcGx5IGZ1bmRzIGZvciB0aGVpciBkYWlseSBleHBlbmRpdHVyZXMsIGFuZCB0aGUgZXhwZW5zZXMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBlc3RhYmxpc2htZW50IHdlcmUgbGFyZ2U7IGZvciB0aGV5IGhhZCB0byBzdXBwb3J0IGJvdGggaGltIGFuZCBoZXIgYW5kIHRocmVlCiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gd2hvbSBzaGUgaGFkIGJyb3VnaHQgd2l0aCBoZXIsIGFuZCB0d28gZmVtYWxlIHNlcnZhbnRzIGFuZCBhIG1hbGUKICAgICAgICAgICAgICAgICAgICBob3VzZS1zZXJ2YW50OyBhbmQgYmVzaWRlcyBOZWFlcmEgaGFkIGJlY29tZSBhY2N1c3RvbWVkIHRvIGxpdmUgY29tZm9ydGFibHksCiAgICAgICAgICAgICAgICAgICAgc2luY2UgaGVyZXRvZm9yZSBvdGhlcnMgaGFkIHByb3ZpZGVkIHRoZSBjb3N0IG9mIGhlciBtYWludGVuYW5jZS4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.43'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGZlbGxvdyBTdGVwaGFudXMgd2FzIGdldHRpbmcgbm90aGluZyB3b3J0aAogICAgICAgICAgICAgICAgICAgIG1lbnRpb25pbmcgZnJvbSBwdWJsaWMgYnVzaW5lc3MsIGZvciBoZSB3YXMgbm90IHlldCBhIHB1YmxpYyBzcGVha2VyLCBidXQgdGh1cwogICAgICAgICAgICAgICAgICAgIGZhciBtZXJlbHkgYSBwZXR0aWZvZ2dlciwgb25lIG9mIHRob3NlIHdobyBzdGFuZCBiZXNpZGUgdGhlIHBsYXRmb3JtIGFuZCBzaG91dCwKICAgICAgICAgICAgICAgICAgICB3aG8gcHJlZmVyIGluZGljdG1lbnRzIGFuZCBpbmZvcm1hdGlvbnMgZm9yIGhpcmUsIGFuZCB3aG8gbGV0IHRoZWlyIG5hbWVzIGJlCiAgICAgICAgICAgICAgICAgICAgaW5zY3JpYmVkIG9uIG1vdGlvbnMgbWFkZSBieSBvdGhlcnMsIHVwIHRvIHRoZSBkYXkgd2hlbiBoZSBiZWNhbWUgYW4gdW5kZXJsaW5nCiAgICAgICAgICAgICAgICAgICAgb2YgQ2FsbGlzdHJhdHVzIG9mIEFwaGlkbmEuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgcHJvbWluZW50IG9yYXRvcgogICAgICAgICAgICAgICAgICAgICAgICBhbmQgcG9saXRpY2lhbiwgb2Z0ZW4gbWVudGlvbmVkIGJ5IERlbW9zdGhlbmVzLjwvbm90ZT4gSG93IHRoaXMgY2FtZSBhYm91dAogICAgICAgICAgICAgICAgICAgIGFuZCBmb3Igd2hhdCBjYXVzZSBJIHdpbGwgdGVsbCB5b3UgaW4gZGV0YWlsIHJlZ2FyZGluZyB0aGlzIG1hdHRlciBhbHNvLCB3aGVuIEkKICAgICAgICAgICAgICAgICAgICBzaGFsbCBoYXZlIHByb3ZlZCByZWdhcmRpbmcgdGhpcyB3b21hbiBOZWFlcmEgdGhhdCBzaGUgaXMgYW4gYWxpZW4gYW5kIGlzIGd1aWx0eQogICAgICAgICAgICAgICAgICAgIG9mIGdyaWV2b3VzIHdyb25ncyBhZ2FpbnN0IHlvdSBhbmQgb2YgaW1waWV0eSB0b3dhcmRzIHRoZSBnb2RzOyA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.44'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0ic2VjdGlvbiIgLz5mb3IgSSB3b3VsZCBoYXZlIHlvdSBrbm93IHRoYXQgU3RlcGhhbnVzIGhpbXNlbGYKICAgICAgICAgICAgICAgICAgICBkZXNlcnZlcyB0byBwYXkgbm8gbGVzcyBoZWF2eSBhIHBlbmFsdHkgdGhhbiBOZWFlcmEgaGVyZSwgYnV0IGV2ZW4gb25lIGZhcgogICAgICAgICAgICAgICAgICAgIGhlYXZpZXIsIGFuZCB0aGF0IGhlIGlzIGZhciBtb3JlIGd1aWx0eSwgc2VlaW5nIHRoYXQsIHdoaWxlIHByb2Zlc3NpbmcgdG8gYmUgYW4KICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiwgaGUgdHJlYXRzIHlvdSBhbmQgeW91ciBsYXdzIGFuZCB0aGUgZ29kcyB3aXRoIHN1Y2ggdXR0ZXIgY29udGVtcHQgdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGNhbm5vdCBicmluZyBoaW1zZWxmIHRvIGtlZXAgcXVpZXQgZXZlbiBmb3Igc2hhbWUgYXQgdGhlIHdyb25ncyBoZSBoYXMKICAgICAgICAgICAgICAgICAgICBoaW1zZWxmIGNvbW1pdHRlZCwgYnV0IGJ5IGJyaW5naW5nIGJhc2VsZXNzIGNoYXJnZXMgYWdhaW5zdCBtZSBhbmQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgIG90aGVycyBoZSBoYXMgY2F1c2VkIG15IGNvbGxlYWd1ZSB0byBicmluZyBhZ2FpbnN0IGhpbSBhbmQgYWdhaW5zdCB0aGlzIHdvbWFuIGEKICAgICAgICAgICAgICAgICAgICBjaGFyZ2Ugc28gZ3JpZXZvdXMgdGhhdCBpdCBuZWNlc3NpdGF0ZXMgaW5xdWlyeSBiZWluZyBtYWRlIGludG8gaGVyIG9yaWdpbiwgYW5kCiAgICAgICAgICAgICAgICAgICAgaGlzIG93biBwcm9mbGlnYWN5IGJlaW5nIGJyb3VnaHQgdG8gbGlnaHQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.45'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U28sIHRoZW4sIFBocnluaW9uIGJyb3VnaHQgc3VpdCBhZ2FpbnN0CiAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGZvciBoYXZpbmcgdGFrZW4gdGhpcyB3b21hbiBOZWFlcmEgZnJvbSBoaW0gYW5kIGFzc2VydGVkIGhlciBmcmVlZG9tLAogICAgICAgICAgICAgICAgICAgIGFuZCBmb3IgaGF2aW5nIHJlY2VpdmVkIHRoZSBnb29kcyB3aGljaCBOZWFlcmEgaGFkIGJyb3VnaHQgd2l0aCBoZXIgZnJvbQogICAgICAgICAgICAgICAgICAgIFBocnluaW9uJ3MgaG91c2UuIFRoZWlyIGZyaWVuZHMsIGhvd2V2ZXIsIGJyb3VnaHQgdGhlbSB0b2dldGhlciBhbmQgaW5kdWNlZCB0aGVtCiAgICAgICAgICAgICAgICAgICAgdG8gc3VibWl0IHRoZWlyIHF1YXJyZWwgdG8gYXJiaXRyYXRpb24uIE9uIGJlaGFsZiBvZiBQaHJ5bmlvbiwgU2F0eXJ1cyBvZgogICAgICAgICAgICAgICAgICAgIEFsb3BlY8OqLCB0aGUgYnJvdGhlciBvZiBMYWNlZGFlbW9uaXVzLCBzYXQgYXMgYXJiaXRyYXRvciwgYW5kIG9uCiAgICAgICAgICAgICAgICAgICAgYmVoYWxmIG9mIFN0ZXBoYW51cyBoZXJlLCBTYXVyaWFzIG9mIExhbXB0cmFlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxhbXB0cmFlLCBhIGRlbWUgb2YgdGhlIHRyaWJlIEVyZWN0aGXDr3MuPC9ub3RlPjsgYW5kIHRoZXkgYWRkZWQgdG8KICAgICAgICAgICAgICAgICAgICB0aGVpciBudW1iZXIgYnkgY29tbW9uIGNvbnNlbnQgRGlvZ2VpdG9uIG9mIEFjaGFybmFlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BY2hhcm5hZSwgYSBkZW1lIG9mIHRoZSB0cmliZSBPZW5lw69zLjwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.46'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBtZW4gY2FtZSB0b2dldGhlciBpbiB0aGUgdGVtcGxlLCBhbmQKICAgICAgICAgICAgICAgICAgICBhZnRlciBoZWFyaW5nIHRoZSBmYWN0cyBmcm9tIGJvdGggcGFydGllcyBhbmQgZnJvbSB0aGUgd29tYW4gaGVyc2VsZiBnYXZlIHRoZWlyCiAgICAgICAgICAgICAgICAgICAgZGVjaXNpb24sIGFuZCB0aGVzZSBtZW4gYWNjZWRlZCB0byBpdC4gVGhlIHRlcm1zIHdlcmU6IHRoYXQgdGhlIHdvbWFuIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIGZyZWUgYW5kIGhlciBvd24gbWlzdHJlc3MsIGJ1dCB0aGF0IHNoZSBzaG91bGQgZ2l2ZSBiYWNrIHRvIFBocnluaW9uIGFsbCB0aGF0CiAgICAgICAgICAgICAgICAgICAgc2hlIGhhZCB0YWtlbiB3aXRoIGhlciBmcm9tIGhpcyBob3VzZSBleGNlcHQgdGhlIGNsb3RoaW5nIGFuZCB0aGUgamV3ZWxzIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBtYWlkLXNlcnZhbnRzOyBmb3IgdGhlc2UgaGFkIGJlZW4gYm91Z2h0IGZvciB0aGUgdXNlIG9mIHRoZSB3b21hbiBoZXJzZWxmOyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IHNoZSBzaG91bGQgbGl2ZSB3aXRoIGVhY2ggb2YgdGhlIG1lbiBvbiBhbHRlcm5hdGUgZGF5cywgYW5kIGlmIHRoZXkgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbXV0dWFsbHkgYWdyZWUgdXBvbiBhbnkgb3RoZXIgYXJyYW5nZW1lbnQsIHRoYXQgYXJyYW5nZW1lbnQgc2hvdWxkIGJlIGJpbmRpbmc7CiAgICAgICAgICAgICAgICAgICAgdGhhdCBzaGUgc2hvdWxkIGJlIG1haW50YWluZWQgYnkgdGhlIG9uZSB3aG8gZm9yIHRoZSB0aW1lIGhhZCBoZXIgaW4gaGlzCiAgICAgICAgICAgICAgICAgICAga2VlcGluZzsgYW5kIHRoYXQgZm9yIHRoZSBmdXR1cmUgdGhlIG1lbiBzaG91bGQgYmUgZnJpZW5kcyB3aXRoIG9uZSBhbm90aGVyIGFuZAogICAgICAgICAgICAgICAgICAgIGJlYXIgbm8gbWFsaWNlLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.47'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHdlcmUgdGhlIHRlcm1zIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIHJlY29uY2lsaWF0aW9uIGVmZmVjdGVkIGJ5IHRoZSBhcmJpdHJhdG9ycyBiZXR3ZWVuIFBocnluaW9uIGFuZCBTdGVwaGFudXMgaW4KICAgICAgICAgICAgICAgICAgICByZWdhcmQgdG8gdGhpcyB3b21hbiBOZWFlcmEuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBzdGF0ZW1lbnRzIG9mIG1pbmUgYXJlIHRydWUsIHRoZSBjbGVyayBzaGFsbCByZWFkIHlvdSB0aGUgZGVwb3NpdGlvbiByZWdhcmRpbmcKICAgICAgICAgICAgICAgICAgICB0aGVzZSBtYXR0ZXJzLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QbGVhc2UgY2FsbCBTYXR5cnVzIG9mCiAgICAgICAgICAgICAgICAgICAgQWxvcGVjw6osIFNhdXJpYXMgb2YgTGFtcHRyYWUsIGFuZCBBcmlzdG9nZWl0b24gb2YgQWNoYXJuYWUuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3N0aXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zdGl0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+U2F0eXJ1cyBvZiBBbG9wZWPDqiwgU2F1cmlhcyBvZiBMYW1wdHJhZSwgYW5kIERpb2dlaXRvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBBY2hhcm5hZSBkZXBvc2UgdGhhdCwgaGF2aW5nIGJlZW4gYXBwb2ludGVkIGFyYml0cmF0b3JzIGluIHRoZSBtYXR0ZXIgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTmVhZXJhLCB0aGUgcHJlc2VudCBkZWZlbmRhbnQsIHRoZXkgYnJvdWdodCBhYm91dCBhIHJlY29uY2lsaWF0aW9uIGJldHdlZW4KICAgICAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGFuZCBQaHJ5bmlvbiwgYW5kIHRoYXQgdGhlIHRlcm1zIG9uIHdoaWNoIHRoZSByZWNvbmNpbGlhdGlvbiB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgYnJvdWdodCBhYm91dCB3ZXJlIHN1Y2ggYXMgQXBvbGxvZG9ydXMgcHJvZHVjZXMuPC9xdW90ZT48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc3RpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlNhdHlydXMgb2YgQWxvcGVjw6osIFNhdXJpYXMgb2YgTGFtcHRyYWUsIGFuZCBEaW9nZWl0b24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgQWNoYXJuYWUgZGVwb3NlIHRoYXQsIGhhdmluZyBiZWVuIGFwcG9pbnRlZCBhcmJpdHJhdG9ycyBpbiB0aGUgbWF0dGVyIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIE5lYWVyYSwgdGhlIHByZXNlbnQgZGVmZW5kYW50LCB0aGV5IGJyb3VnaHQgYWJvdXQgYSByZWNvbmNpbGlhdGlvbiBiZXR3ZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cyBhbmQgUGhyeW5pb24sIGFuZCB0aGF0IHRoZSB0ZXJtcyBvbiB3aGljaCB0aGUgcmVjb25jaWxpYXRpb24gd2FzCiAgICAgICAgICAgICAgICAgICAgICAgIGJyb3VnaHQgYWJvdXQgd2VyZSBzdWNoIGFzIEFwb2xsb2RvcnVzIHByb2R1Y2VzLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IlRlcm1zIG9mIFJlY29uY2lsaWF0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UZXJtcyBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVjb25jaWxpYXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaGV5IGhhdmUKICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25jaWxlZCBQaHJ5bmlvbiBhbmQgU3RlcGhhbnVzIG9uIHRoZSBmb2xsb3dpbmcgdGVybXM6IHRoYXQgZWFjaCBvZiB0aGVtCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYWxsIGtlZXAgTmVhZXJhIGF0IGhpcyBob3VzZSBhbmQgaGF2ZSBoZXIgYXQgaGlzIGRpc3Bvc2FsIGZvciBhbiBlcXVhbAogICAgICAgICAgICAgICAgICAgICAgICBudW1iZXIgb2YgZGF5cyBpbiB0aGUgbW9udGgsIHVubGVzcyB0aGV5IHNoYWxsIHRoZW1zZWx2ZXMgYWdyZWUgdXBvbiBzb21lCiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIGFycmFuZ2VtZW50LjwvcXVvdGU+CiAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGVybXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlY29uY2lsaWF0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhleSBoYXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsZWQgUGhyeW5pb24gYW5kIFN0ZXBoYW51cyBvbiB0aGUgZm9sbG93aW5nIHRlcm1zOiB0aGF0IGVhY2ggb2YgdGhlbQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBrZWVwIE5lYWVyYSBhdCBoaXMgaG91c2UgYW5kIGhhdmUgaGVyIGF0IGhpcyBkaXNwb3NhbCBmb3IgYW4gZXF1YWwKICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyIG9mIGRheXMgaW4gdGhlIG1vbnRoLCB1bmxlc3MgdGhleSBzaGFsbCB0aGVtc2VsdmVzIGFncmVlIHVwb24gc29tZQogICAgICAgICAgICAgICAgICAgICAgICBvdGhlciBhcnJhbmdlbWVudC48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.48'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbiB0aGUKICAgICAgICAgICAgICAgICAgICByZWNvbmNpbGlhdGlvbiBoYWQgYmVlbiBicm91Z2h0IGFib3V0LCB0aG9zZSB3aG8gaGFkIGFzc2lzdGVkIGVpdGhlciBwYXJ0eSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBhcmJpdHJhdGlvbiBhbmQgdGhlIHdob2xlIGFmZmFpciBkaWQganVzdCB3aGF0IEkgZmFuY3kgaXMgYWx3YXlzIGRvbmUsCiAgICAgICAgICAgICAgICAgICAgZXNwZWNpYWxseSB3aGVuIHRoZSBxdWFycmVsIGlzIGFib3V0IGEgY291cnRlc2FuLiBUaGV5IHdlbnQgdG8gZGluZSBhdCB0aGUgaG91c2UKICAgICAgICAgICAgICAgICAgICBvZiB3aGljaGV2ZXIgb2YgdGhlIHR3byBoYWQgTmVhZXJhIGluIGhpcyBrZWVwaW5nLCBhbmQgdGhlIHdvbWFuIGRpbmVkIGFuZCBkcmFuawogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlbSwgYXMgYmVpbmcgYSBjb3VydGVzYW4uPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQKICAgICAgICAgICAgICAgICAgICB0aGVzZSBzdGF0ZW1lbnRzIG9mIG1pbmUgYXJlIHRydWUsIGNhbGwsIHBsZWFzZSBhcyB3aXRuZXNzZXMgdGhvc2Ugd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICBwcmVzZW50IHdpdGggdGhlbSwgRXVidWx1cyBvZiBQcm9iYWxpbnRodXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlByb2JhbGludGh1cywgYSBkZW1lIG9mIHRoZSB0cmliZSBQYW5kaW9uaXMuPC9ub3RlPiBEaW9wZWl0aGVzIG9mCiAgICAgICAgICAgICAgICAgICAgTWVsaXTDqiwgYW5kIEN0ZXNvbiBvZiBDZXJhbWVpcy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+Q2VyYW1laXMsIGEgZGVtZSBvZiB0aGUgdHJpYmUgQWNhbWFudGlzLjwvbm90ZT48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc2l0aW9uIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+RXVidWx1cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBQcm9iYWxpbnRodXMsIERpb3BlaXRoZXMgb2YgTWVsaXTDqiwgYW5kIEN0ZXNvbiBvZiBDZXJhbWVpcywgZGVwb3NlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgYWZ0ZXIgdGhlIHJlY29uY2lsaWF0aW9uIGluIHRoZSBtYXR0ZXIgb2YgTmVhZXJhIHdhcyBicm91Z2h0IGFib3V0CiAgICAgICAgICAgICAgICAgICAgICAgIGJldHdlZW4gUGhyeW5pb24gYW5kIFN0ZXBoYW51cyB0aGV5IGZyZXF1ZW50bHkgZGluZWQgd2l0aCB0aGVtIGFuZCBkcmFuayBpbgogICAgICAgICAgICAgICAgICAgICAgICB0aGUgY29tcGFueSBvZiBOZWFlcmEsIHRoZSBwcmVzZW50IGRlZmVuZGFudCwgYm90aCB3aGVuIE5lYWVyYSB3YXMgYXQgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGhvdXNlIG9mIFN0ZXBoYW51cyBhbmQgd2hlbiBzaGUgd2FzIGF0IHRoZSBob3VzZSBvZiBQaHJ5bmlvbi48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlcG9zaXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5FdWJ1bHVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIFByb2JhbGludGh1cywgRGlvcGVpdGhlcyBvZiBNZWxpdMOqLCBhbmQgQ3Rlc29uIG9mIENlcmFtZWlzLCBkZXBvc2UKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBhZnRlciB0aGUgcmVjb25jaWxpYXRpb24gaW4gdGhlIG1hdHRlciBvZiBOZWFlcmEgd2FzIGJyb3VnaHQgYWJvdXQKICAgICAgICAgICAgICAgICAgICAgICAgYmV0d2VlbiBQaHJ5bmlvbiBhbmQgU3RlcGhhbnVzIHRoZXkgZnJlcXVlbnRseSBkaW5lZCB3aXRoIHRoZW0gYW5kIGRyYW5rIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBjb21wYW55IG9mIE5lYWVyYSwgdGhlIHByZXNlbnQgZGVmZW5kYW50LCBib3RoIHdoZW4gTmVhZXJhIHdhcyBhdCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgaG91c2Ugb2YgU3RlcGhhbnVzIGFuZCB3aGVuIHNoZSB3YXMgYXQgdGhlIGhvdXNlIG9mIFBocnluaW9uLjwvdHJhbnNsYXRpb24+"
translation['59.speaker.49'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBoYXZlLCB0aGVuLAogICAgICAgICAgICAgICAgICAgIHNob3duIHlvdSBpbiBteSBhcmd1bWVudCwgYW5kIHRoZSB0ZXN0aW1vbnkgb2Ygd2l0bmVzc2VzIGhhcyBwcm92ZWQ6IHRoYXQgTmVhZXJhCiAgICAgICAgICAgICAgICAgICAgd2FzIG9yaWdpbmFsbHkgYSBzbGF2ZSwgdGhhdCBzaGUgd2FzIHR3aWNlIHNvbGQsIHRoYXQgc2hlIG1hZGUgaGVyIGxpdmluZyBieQogICAgICAgICAgICAgICAgICAgIHByb3N0aXR1dGlvbiBhcyBhIGNvdXJ0ZXNhbjsgdGhhdCBzaGUgcmFuIGF3YXkgZnJvbSBQaHJ5bmlvbiB0byBNZWdhcmEsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgb24gaGVyIHJldHVybiBzaGUgd2FzIGZvcmNlZCB0byBnaXZlIGJvbmRzIGFzIGFuIGFsaWVuIGJlZm9yZSB0aGUgcG9sZW1hcmNoLiBJCiAgICAgICAgICAgICAgICAgICAgd2lzaCBub3cgdG8gc2hvdyB5b3UgdGhhdCBTdGVwaGFudXMgaGVyZSBoYXMgaGltc2VsZiBnaXZlbiBldmlkZW5jZSBhZ2FpbnN0IGhlciwKICAgICAgICAgICAgICAgICAgICBwcm92aW5nIGhlciB0byBiZSBhbiBhbGllbi4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.50'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGRhdWdodGVyIG9mIHRoaXMgd29tYW4gTmVhZXJhLCB3aG9tIHNoZSBicm91Z2h0IHdpdGgKICAgICAgICAgICAgICAgICAgICBoZXIgYXMgYSBzbWFsbCBjaGlsZCB0byB0aGUgaG91c2Ugb2YgU3RlcGhhbnVzLCBhbmQgd2hvbSB0aGV5IHRoZW4gY2FsbGVkCiAgICAgICAgICAgICAgICAgICAgU3RyeWJlbGUsIGJ1dCBub3cgY2FsbCBQaGFubywgd2FzIGdpdmVuIGluIG1hcnJpYWdlIGJ5IHRoaXMgZmVsbG93IFN0ZXBoYW51cyBhcwogICAgICAgICAgICAgICAgICAgIGJlaW5nIGhpcyBvd24gZGF1Z2h0ZXIgdG8gYW4gQXRoZW5pYW4sIFBocmFzdG9yLCBvZiBBZWdpbGlhPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFlZ2lsaWEsIGEgZGVtZSBvZiB0aGUgdHJpYmUgQW50aW9jaGlzLjwvbm90ZT47IGFuZCBhCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UgcG9ydGlvbiBvZiB0aGlydHkgbWluYWUgd2FzIGdpdmVuIHdpdGggaGVyLiBXaGVuIHNoZSBjYW1lIHRvIHRoZSBob3VzZQogICAgICAgICAgICAgICAgICAgIG9mIFBocmFzdG9yLCB3aG8gd2FzIGEgbGFib3JpbmcgbWFuIGFuZCBvbmUgd2hvIGhhZCBhY3F1aXJlZCBoaXMgbWVhbnMgYnkgZnJ1Z2FsCiAgICAgICAgICAgICAgICAgICAgbGl2aW5nLCBzaGUgZGlkIG5vdCBrbm93IGhvdyB0byBhZGp1c3QgaGVyc2VsZiB0byBoaXMgd2F5cywgYnV0IHNvdWdodCB0bwogICAgICAgICAgICAgICAgICAgIGVtdWxhdGUgaGVyIG1vdGhlcidzIGhhYml0cyBhbmQgdGhlIGRpc3NvbHV0ZSBtYW5uZXIgb2YgbGl2aW5nIGluIGhlciBob3VzZSwKICAgICAgICAgICAgICAgICAgICBoYXZpbmcsIEkgc3VwcG9zZSwgYmVlbiBicm91Z2h0IHVwIGluIHN1Y2ggbGljZW50aW91c25lc3MuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.51'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0ic2VjdGlvbiIgLz5QaHJhc3Rvciwgc2VlaW5nIHRoYXQgc2hlIHdhcyBub3QgYSBkZWNlbnQgd29tYW4gYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICBzaGUgd2FzIG5vdCBtaW5kZWQgdG8gbGlzdGVuIHRvIGhpcyBhZHZpY2UsIGFuZCwgZnVydGhlciwgaGF2aW5nIGxlYXJuZWQgbm93CiAgICAgICAgICAgICAgICAgICAgYmV5b25kIGFsbCBxdWVzdGlvbiB0aGF0IHNoZSB3YXMgdGhlIGRhdWdodGVyLCBub3Qgb2YgU3RlcGhhbnVzLCBidXQgb2YgTmVhZXJhLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IGhlIGhhZCBiZWVuIGRlY2VpdmVkIGluIHRoZSBmaXJzdCBwbGFjZSBhdCB0aGUgdGltZSBvZiB0aGUgYmV0cm90aGFsLAogICAgICAgICAgICAgICAgICAgIHdoZW4gaGUgaGFkIHJlY2VpdmVkIGhlciBhcyB0aGUgZGF1Z2h0ZXIsIG5vdCBvZiBOZWFlcmEsIGJ1dCBvZiBTdGVwaGFudXMgYnkgYW4KICAgICAgICAgICAgICAgICAgICBBdGhlbmlhbiB3b21hbiwgd2hvbSBoZSBoYWQgbWFycmllZCBiZWZvcmUgaGUgbGl2ZWQgd2l0aAogICAgICAgICAgICAgICAgICAgIE5lYWVyYeKAlGFuZ2VyZWQgYXQgYWxsIHRoaXMgYW5kIGNvbnNpZGVyaW5nIHRoYXQgaGUgaGFkIGJlZW4gdHJlYXRlZAogICAgICAgICAgICAgICAgICAgIHdpdGggb3V0cmFnZSBhbmQgaG9vZHdpbmtlZCwgaGUgcHV0IGF3YXkgdGhlIHdvbWFuIGFmdGVyIGxpdmluZyB3aXRoIGhlciBmb3IKICAgICAgICAgICAgICAgICAgICBhYm91dCBhIHllYXIsIHNoZSBiZWluZyBwcmVnbmFudCBhdCB0aGUgdGltZSwgYW5kIHJlZnVzZWQgdG8gcGF5IGJhY2sgdGhlCiAgICAgICAgICAgICAgICAgICAgbWFycmlhZ2UgcG9ydGlvbi4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.52'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0ic2VjdGlvbiIgLz5TdGVwaGFudXMgYnJvdWdodCBzdWl0IGZvcgogICAgICAgICAgICAgICAgICAgIGFsaW1vbnkgYWdhaW5zdCBoaW0gaW4gdGhlIE9kZXVtPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFjdGlvbnMgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIGFsaW1vbnkgd2VyZSBjYXJyaWVkIGJlZm9yZSBhIHRyaWJ1bmFsIHdoaWNoIHNhdCBpbiB0aGUgT2RldW0sIGEgYnVpbGRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVybHkgZGV2b3RlZCB0byBtdXNpY2FsIGNvbnRlc3RzPC9ub3RlPiBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGxhdyB3aGljaAogICAgICAgICAgICAgICAgICAgIGVuYWN0cyB0aGF0LCBpZiBhIG1hbiBwdXRzIGF3YXkgaGlzIHdpZmUsIGhlIG11c3QgcGF5IGJhY2sgdGhlIG1hcnJpYWdlIHBvcnRpb24KICAgICAgICAgICAgICAgICAgICBvciBlbHNlIHBheSBpbnRlcmVzdCBvbiBpdCBhdCB0aGUgcmF0ZSBvZiBuaW5lIG9ib2xzIGEgbW9udGggZm9yIGVhY2ggbWluYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGF0IGlzLCBhdCB0aGUgcmF0ZSBvZiAxOCBwZXIgY2VudC48L25vdGU+OyBhbmQKICAgICAgICAgICAgICAgICAgICB0aGF0IG9uIHRoZSB3b21hbidzIGJlaGFsZiBoZXIgZ3VhcmRpYW4gbWF5IHN1ZSBoaW0gZm9yIGFsaW1vbnkgaW4gdGhlIE9kZXVtLgogICAgICAgICAgICAgICAgICAgIFBocmFzdG9yLCBvbiBoaXMgcGFydCwgcHJlZmVycmVkIGFuIGluZGljdG1lbnQgYWdhaW5zdCBTdGVwaGFudXMgYmVmb3JlIHRoZQogICAgICAgICAgICAgICAgICAgIFRoZXNtb3RoZXRhZSwgY2hhcmdpbmcgdGhhdCBoZSBoYWQgYmV0cm90aGVkIHRvIGhpbSwgYmVpbmcgYW4gQXRoZW5pYW4sIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyIG9mIGFuIGFsaWVuIHdvbWFuIGFzIHRob3VnaCBzaGUgd2VyZSBoaXMgb3duLiBUaGlzIHdhcyBpbiBhY2NvcmRhbmNlCiAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgZm9sbG93aW5nIGxhdy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCBpdCwgcGxlYXNlLjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkxhdyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3PC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SWYgYW55b25lIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGdpdmUgYW4gYWxpZW4gd29tYW4gaW4gbWFycmlhZ2UgdG8gYW4gQXRoZW5pYW4gbWFuLCByZXByZXNlbnRpbmcgaGVyIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIHJlbGF0ZWQgdG8gaGltc2VsZiwgaGUgc2hhbGwgbG9zZSBoaXMgY2l2aWMgcmlnaHRzIGFuZCBoaXMgcHJvcGVydHkKICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgYmUgY29uZmlzY2F0ZWQsIGFuZCBhIHRoaXJkIHBhcnQgb2YgaXQgc2hhbGwgYmVsb25nIHRvIHRoZSBvbmUgd2hvCiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3VyZXMgaGlzIGNvbnZpY3Rpb24uIEFuZCBhbnlvbmUgZW50aXRsZWQgdG8gZG8gc28gbWF5IGluZGljdCBzdWNoIGEKICAgICAgICAgICAgICAgICAgICAgICAgcGVyc29uIGJlZm9yZSB0aGUgVGhlc21vdGhldGFlLCBqdXN0IGFzIGluIHRoZSBjYXNlIG9mIHVzdXJwYXRpb24gb2YKICAgICAgICAgICAgICAgICAgICAgICAgY2l0aXplbnNoaXAuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MYXc8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JZiBhbnlvbmUgc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZSBhbiBhbGllbiB3b21hbiBpbiBtYXJyaWFnZSB0byBhbiBBdGhlbmlhbiBtYW4sIHJlcHJlc2VudGluZyBoZXIgYXMKICAgICAgICAgICAgICAgICAgICAgICAgYmVpbmcgcmVsYXRlZCB0byBoaW1zZWxmLCBoZSBzaGFsbCBsb3NlIGhpcyBjaXZpYyByaWdodHMgYW5kIGhpcyBwcm9wZXJ0eQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBiZSBjb25maXNjYXRlZCwgYW5kIGEgdGhpcmQgcGFydCBvZiBpdCBzaGFsbCBiZWxvbmcgdG8gdGhlIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgc2VjdXJlcyBoaXMgY29udmljdGlvbi4gQW5kIGFueW9uZSBlbnRpdGxlZCB0byBkbyBzbyBtYXkgaW5kaWN0IHN1Y2ggYQogICAgICAgICAgICAgICAgICAgICAgICBwZXJzb24gYmVmb3JlIHRoZSBUaGVzbW90aGV0YWUsIGp1c3QgYXMgaW4gdGhlIGNhc2Ugb2YgdXN1cnBhdGlvbiBvZgogICAgICAgICAgICAgICAgICAgICAgICBjaXRpemVuc2hpcC48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.53'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIGNsZXJrIGhhcwogICAgICAgICAgICAgICAgICAgIHJlYWQgeW91IHRoZSBsYXcgaW4gYWNjb3JkYW5jZSB3aXRoIHdoaWNoIHRoaXMgZmVsbG93IFN0ZXBoYW51cyB3YXMgaW5kaWN0ZWQgYnkKICAgICAgICAgICAgICAgICAgICBQaHJhc3RvciBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZS4gU3RlcGhhbnVzLCB0aGVuLCBrbm93aW5nIHRoYXQsIGlmIGhlIHdlcmUKICAgICAgICAgICAgICAgICAgICBjb252aWN0ZWQgb2YgaGF2aW5nIGdpdmVuIGluIG1hcnJpYWdlIHRoZSBkYXVnaHRlciBvZiBhbiBhbGllbiB3b21hbiwgaGUgd291bGQKICAgICAgICAgICAgICAgICAgICBiZSBsaWFibGUgdG8gdGhlIGhlYXZpZXN0IHBlbmFsdGllcywgY2FtZSB0byB0ZXJtcyB3aXRoIFBocmFzdG9yIGFuZAogICAgICAgICAgICAgICAgICAgIHJlbGlucXVpc2hlZCBoaXMgY2xhaW0gdG8gbWFycmlhZ2UgcG9ydGlvbiwgYW5kIHdpdGhkcmV3IGhpcyBhY3Rpb24gZm9yIGFsaW1vbnk7CiAgICAgICAgICAgICAgICAgICAgYW5kIFBocmFzdG9yIG9uIGhpcyBwYXJ0IHdpdGhkcmV3IGluZGljdG1lbnQgZnJvbSB0aGUgVGhlc21vdGhldGFlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UbyBwcm92ZSB0aGF0IG15IHN0YXRlbWVudHMgYXJlIHRydWUsIEkgd2lsbCBjYWxsIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHlvdSBhcyB3aXRuZXNzIHRvIHRoZXNlIGZhY3RzIFBocmFzdG9yIGhpbXNlbGYsIGFuZCB3aWxsIGNvbXBlbCBoaW0gdG8gZ2l2ZQogICAgICAgICAgICAgICAgICAgIHRlc3RpbW9ueSBhcyB0aGUgbGF3IGNvbW1hbmRzLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.54'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UGxlYXNlIGNhbGwgUGhyYXN0b3Igb2YgQWVnaWxpYS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJEZXBvc3RpdGlvbiI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3N0aXRpb248L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5QaHJhc3RvciBvZiBBZWdpbGlhIGRlcG9zZXMgdGhhdCwgd2hlbiBoZSBsZWFybmVkIHRoYXQgU3RlcGhhbnVzIGhhZCBnaXZlbgogICAgICAgICAgICAgICAgICAgICAgICBoaW0gaW4gbWFycmlhZ2UgYSBkYXVnaHRlciBvZiBOZWFlcmEsIHJlcHJlc2VudGluZyB0aGF0IHNoZSB3YXMgaGlzIG93bgogICAgICAgICAgICAgICAgICAgICAgICBkYXVnaHRlciwgaGUgbG9kZ2VkIGFuIGluZGljdG1lbnQgYWdhaW5zdCBoaW0gYmVmb3JlIHRoZSBUaGVzbW90aGV0YWUsIGFzCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBsYXcgcHJvdmlkZXMsIGFuZCBkcm92ZSB0aGUgd29tYW4gZnJvbSBoaXMgaG91c2UsIGFuZCBjZWFzZWQgdG8gbGl2ZQogICAgICAgICAgICAgICAgICAgICAgICB3aXRoIGhlciBhbnkgbG9uZ2VyOyBhbmQgdGhhdCBhZnRlciBTdGVwaGFudXMgaGFkIGJyb3VnaHQgc3VpdCBhZ2FpbnN0IGhpbQogICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgT2RldW0gZm9yIGFsaW1vbnksIGhlIG1hZGUgYW4gYXJyYW5nZW1lbnQgd2l0aCBoaW0gb24gdGhlIHRlcm1zIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGluZGljdG1lbnQgYmVmb3JlIHRoZSBUaGVzbW90aGV0YWUgc2hvdWxkIGJlIHdpdGhkcmF3biwgYW5kIGFsc28gdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHN1aXQgZm9yIGFsaW1vbnkgd2hpY2ggU3RlcGhhbnVzIGhhZCBicm91Z2h0IGFnYWluc3QgbWUuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc3RpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlBocmFzdG9yIG9mIEFlZ2lsaWEgZGVwb3NlcyB0aGF0LCB3aGVuIGhlIGxlYXJuZWQgdGhhdCBTdGVwaGFudXMgaGFkIGdpdmVuCiAgICAgICAgICAgICAgICAgICAgICAgIGhpbSBpbiBtYXJyaWFnZSBhIGRhdWdodGVyIG9mIE5lYWVyYSwgcmVwcmVzZW50aW5nIHRoYXQgc2hlIHdhcyBoaXMgb3duCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdWdodGVyLCBoZSBsb2RnZWQgYW4gaW5kaWN0bWVudCBhZ2FpbnN0IGhpbSBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZSwgYXMKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxhdyBwcm92aWRlcywgYW5kIGRyb3ZlIHRoZSB3b21hbiBmcm9tIGhpcyBob3VzZSwgYW5kIGNlYXNlZCB0byBsaXZlCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggaGVyIGFueSBsb25nZXI7IGFuZCB0aGF0IGFmdGVyIFN0ZXBoYW51cyBoYWQgYnJvdWdodCBzdWl0IGFnYWluc3QgaGltCiAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBPZGV1bSBmb3IgYWxpbW9ueSwgaGUgbWFkZSBhbiBhcnJhbmdlbWVudCB3aXRoIGhpbSBvbiB0aGUgdGVybXMgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgaW5kaWN0bWVudCBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZSBzaG91bGQgYmUgd2l0aGRyYXduLCBhbmQgYWxzbyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3VpdCBmb3IgYWxpbW9ueSB3aGljaCBTdGVwaGFudXMgaGFkIGJyb3VnaHQgYWdhaW5zdCBtZS48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.55'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93IGxldCBtZQogICAgICAgICAgICAgICAgICAgIGJyaW5nIGJlZm9yZSB5b3UgYW5vdGhlciBkZXBvc2l0aW9uIG9mIFBocmFzdG9yIGFuZCBoaXMgY2xhbnNtZW4gYW5kIHRoZSBtZW1iZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgaGlzIGdlbnMsIHdoaWNoIHByb3ZlcyB0aGF0IHRoZSBkZWZlbmRhbnQgTmVhZXJhIGlzIGFuIGFsaWVuLiBOb3QgbG9uZyBhZnRlcgogICAgICAgICAgICAgICAgICAgIFBocmFzdG9yIGhhZCBzZW50IGF3YXkgdGhlIGRhdWdodGVyIG9mIE5lYWVyYSwgaGUgZmVsbCBzaWNrLiBIZSBnb3QgaW50byBhCiAgICAgICAgICAgICAgICAgICAgZHJlYWRmdWwgY29uZGl0aW9uIGFuZCBiZWNhbWUgdXR0ZXJseSBoZWxwbGVzcy4gVGhlcmUgd2FzIGFuIG9sZCBxdWFycmVsIGJldHdlZW4KICAgICAgICAgICAgICAgICAgICBoaW0gYW5kIGhpcyBvd24gcmVsYXRpdmVzLCB0b3dhcmQgd2hvbSBoZSBjaGVyaXNoZWQgYW5nZXIgYW5kIGhhdHJlZDsgYW5kCiAgICAgICAgICAgICAgICAgICAgYmVzaWRlcyBoZSB3YXMgY2hpbGRsZXNzLiBCZWluZyBjYWpvbGVkLCB0aGVyZWZvcmUsIGluIGhpcyBpbGxuZXNzIGJ5IHRoZQogICAgICAgICAgICAgICAgICAgIGF0dGVudGlvbnMgb2YgTmVhZXJhIGFuZCBoZXIgZGF1Z2h0ZXLigJQgPC90cmFuc2xhdGlvbj4="
translation['59.speaker.56'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0ic2VjdGlvbiIgLz50aGV5IGNhbWUgd2hpbGUgaGUgbGF5IHNpY2sgYW5kIGhhZCBubyBvbmUgdG8gY2FyZSBmb3IgaGltLAogICAgICAgICAgICAgICAgICAgIGJyaW5naW5nIGhpbSB0aGUgbWVkaWNpbmVzIHN1aXRlZCB0byBoaXMgY2FzZSBhbmQgbG9va2luZyBhZnRlciBoaXMgbmVlZHM7IGFuZAogICAgICAgICAgICAgICAgICAgIHlvdSBrbm93IG9mIHlvdXJzZWx2ZXMgd2hhdCB2YWx1ZSBhIHdvbWFuIGhhcyBpbiB0aGUgc2ljay1yb29tLCB3aGVuIHNoZSB3YWl0cwogICAgICAgICAgICAgICAgICAgIHVwb24gYSBtYW4gd2hvIGlzIGlsbOKAlHdlbGwsIGhlIHdhcyBpbmR1Y2VkIHRvIHRha2UgYmFjayBhbmQgYWRvcHQgYXMKICAgICAgICAgICAgICAgICAgICBoaXMgc29uIHRoZSBjaGlsZCB3aG9tIHRoZSBkYXVnaHRlciBvZiB0aGlzIHdvbWFuIE5lYWVyYSBoYWQgYm9ybmUgYWZ0ZXIgc2hlIHdhcwogICAgICAgICAgICAgICAgICAgIHNlbnQgYXdheSBmcm9tIGhpcyBob3VzZSBpbiBhIHN0YXRlIG9mIHByZWduYW5jeSwgYWZ0ZXIgaGUgaGFkIGxlYXJuZWQgdGhhdCBzaGUKICAgICAgICAgICAgICAgICAgICB3YXMgdGhlIGRhdWdodGVyLCBub3Qgb2YgU3RlcGhhbnVzLCBidXQgb2YgTmVhZXJhLCBhbmQgd2FzIGFuZ2VyZWQgYXQgdGhlaXIKICAgICAgICAgICAgICAgICAgICBkZWNlaXQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.57'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgcmVhc29uaW5nIGluIHRoZSBtYXR0ZXIgd2FzIGJvdGgKICAgICAgICAgICAgICAgICAgICBuYXR1cmFsIGFuZCB0byBiZSBleHBlY3RlZC4gSGUgd2FzIGluIGEgcHJlY2FyaW91cyBjb25kaXRpb24gYW5kIHRoZXJlIHdhcyBub3QKICAgICAgICAgICAgICAgICAgICBtdWNoIGhvcGUgdGhhdCBoZSB3b3VsZCByZWNvdmVyLiBIZSBkaWQgbm90IHdpc2ggaGlzIHJlbGF0aXZlcyB0byBnZXQgaGlzCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgbm9yIGhpbXNlbGYgdG8gZGllIGNoaWxkbGVzcywgc28gaGUgYWRvcHRlZCB0aGlzIGJveSBhbmQgcmVjZWl2ZWQgaGltCiAgICAgICAgICAgICAgICAgICAgYmFjayBpbnRvIGhpcyBob3VzZS4gVGhhdCBoZSB3b3VsZCBuZXZlciBoYXZlIGRvbmUgdGhpcywgaWYgaGUgaGFkIGJlZW4gaW4gZ29vZAogICAgICAgICAgICAgICAgICAgIGhlYWx0aCwgSSB3aWxsIHNob3cgeW91IGJ5IGEgc3Ryb25nIGFuZCBjb252aW5jaW5nIHByb29mLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.58'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm8gc29vbmVyIGhhZCBQaHJhc3RvciBnb3QgdXAgZnJvbSB0aGF0IHNpY2tuZXNzIGFuZAogICAgICAgICAgICAgICAgICAgIHJlY292ZXJlZCBoaXMgaGVhbHRoIGFuZCB3YXMgZmFpcmx5IHdlbGwsIHRoYW4gaGUgdG9vayB0byB3aWZlIGFjY29yZGluZyB0byB0aGUKICAgICAgICAgICAgICAgICAgICBsYXdzIGFuIEF0aGVuaWFuIHdvbWFuLCB0aGUgbGVnaXRpbWF0ZSBkYXVnaHRlciBvZiBTYXR5cnVzLCBvZiBNZWxpdMOqLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgc2lzdGVyIG9mIERpcGhpbHVzLiBMZXQgdGhpcywgdGhlcmVmb3JlLCBiZSBhIHByb29mIHRvIHlvdSB0aGF0IGhlIHRvb2sKICAgICAgICAgICAgICAgICAgICBiYWNrIHRoZSBjaGlsZCwgbm90IHdpbGxpbmdseSwgYnV0IGZvcmNlZCBieSBoaXMgc2lja25lc3MsIGJ5IGhpcyBjaGlsZGxlc3MKICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24sIGJ5IHRoZSBjYXJlIHNob3duIGJ5IHRoZXNlIHdvbWVuIGluIG51cnNpbmcgaGltLCBhbmQgYnkgdGhlIGVubWl0eQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhlIGZlbHQgdG93YXJkIGhpcyBvd24gcmVsYXRpdmVzLCBhbmQgaGlzIHdpc2ggdGhhdCB0aGV5IHNob3VsZCBub3QKICAgICAgICAgICAgICAgICAgICBpbmhlcml0IGhpcyBwcm9wZXJ0eSwgaWYgYW55dGhpbmcgc2hvdWxkIGhhcHBlbiB0byBoaW0uIFRoaXMgd2lsbCBiZSBwcm92ZWQgdG8KICAgICAgICAgICAgICAgICAgICB5b3UgZXZlbiBtb3JlIGNsZWFybHkgYnkgd2hhdCBmb2xsb3dlZC4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.59'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IKICAgICAgICAgICAgICAgICAgICB3aGVuIFBocmFzdG9yIGF0IHRoZSB0aW1lIG9mIGhpcyBpbGxuZXNzIHNvdWdodCB0byBpbnRyb2R1Y2UgdGhlIGJveSBib3JuIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIGRhdWdodGVyIG9mIE5lYWVyYSB0byBoaXMgY2xhbnNtZW4gYW5kIHRvIHRoZSBCcnl0aWRhZSwgdG8gd2hpY2ggZ2VucyBQaHJhc3RvcgogICAgICAgICAgICAgICAgICAgIGhpbXNlbGYgYmVsb25ncywgdGhlIG1lbWJlcnMgb2YgdGhlIGdlbnMsIGtub3dpbmcsIEkgZmFuY3ksIHdobyB0aGUgd29tYW4gd2FzCiAgICAgICAgICAgICAgICAgICAgd2hvbSBQaHJhc3RvciBmaXJzdCB0b29rIHRvIHdpZmUsIHRoYXQsIG5hbWVseSwgc2hlIHdhcyB0aGUgZGF1Z2h0ZXIgb2YgTmVhZXJhLAogICAgICAgICAgICAgICAgICAgIGFuZCBrbm93aW5nLCB0b28sIG9mIGhpcyBzZW5kaW5nIHRoZSB3b21hbiBhd2F5LCBhbmQgdGhhdCBpdCB3YXMgYmVjYXVzZSBvZiBoaXMKICAgICAgICAgICAgICAgICAgICBpbGxuZXNzIHRoYXQgUGhyYXN0b3IgaGFkIGJlZW4gaW5kdWNlZCB0byB0YWtlIGJhY2sgdGhlIGNoaWxkLCByZWZ1c2VkIHRvCiAgICAgICAgICAgICAgICAgICAgcmVjb2duaXplIHRoZSBjaGlsZCBhbmQgd291bGQgbm90IGVudGVyIGhpbSBvbiB0aGVpciByZWdpc3Rlci4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.60'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0ic2VjdGlvbiIgLz5QaHJhc3RvciBicm91Z2h0IHN1aXQgYWdhaW5zdCB0aGVtIGZvciByZWZ1c2luZyB0byByZWdpc3RlcgogICAgICAgICAgICAgICAgICAgIGhpcyBzb24sIGJ1dCB0aGUgbWVtYmVycyBvZiB0aGUgZ2VucyBjaGFsbGVuZ2VkIGhpbSBiZWZvcmUgdGhlIGFyYml0cmF0b3IgdG8KICAgICAgICAgICAgICAgICAgICBzd2VhciBieSBmdWxsLWdyb3duIHZpY3RpbXMgdGhhdCBoZSB2ZXJpbHkgYmVsaWV2ZWQgdGhlIGJveSB0byBiZSBoaXMgb3duIHNvbiwKICAgICAgICAgICAgICAgICAgICBib3JuIG9mIGFuIEF0aGVuaWFuIHdvbWFuIGFuZCBvbmUgYmV0cm90aGVkIHRvIGhpbSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGxhdy4KICAgICAgICAgICAgICAgICAgICBXaGVuIHRoZSBtZW1iZXJzIG9mIHRoZSBnZW5zIHRlbmRlcmVkIHRoaXMgY2hhbGxlbmdlIHRvIFBocmFzdG9yIGJlZm9yZSB0aGUKICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdG9yLCBoZSByZWZ1c2VkIHRvIHRha2UgdGhlIG9hdGgsIGFuZCBkaWQgbm90IHN3ZWFyLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.61'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhhdCB0aGVzZQogICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudHMgb2YgbWluZSBhcmUgdHJ1ZSwgSSB3aWxsIGJyaW5nIGJlZm9yZSB5b3UgYXMgd2l0bmVzc2VzIHRoZSBtZW1iZXJzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIEJyeXRpZCBnZW5zIHdobyB3ZXJlIHByZXNlbnQuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iV2l0bmVzc2VzIj48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaW1vc3RyYXR1cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBIZWNhbMOqLCBYYW50aGlwcHVzIG9mIEVyb2VhZGFlLCBFdmFsY2VzIG9mIFBoYWxlcnVtLCBBbnl0dXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTGFjaWFkYWUsIEV1cGhyYW5vciBvZiBBZWdpbGlhIGFuZCBOaWNpcHB1cyBvZiBDZXBoYWzDqiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGVjYWzDqiwgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVvbnRpcywgTGFjaWFkYWUgb2YgdGhlIHRyaWJlIE9lbmXDr3MsIGFuZCBDZXBoYWzDqiBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWJlIEFjYW1hbnRpcy48L25vdGU+IGRlcG9zZSB0aGF0IGJvdGggdGhleSBhbmQgUGhyYXN0b3Igb2YKICAgICAgICAgICAgICAgICAgICAgICAgQWVnaWxpYSBhcmUgbWVtYmVycyBvZiB0aGUgZ2VucyBjYWxsZWQgQnJ5dGlkYWUsIGFuZCB0aGF0LCB3aGVuIFBocmFzdG9yCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYWltZWQgdGhlIHJpZ2h0IHRvIGludHJvZHVjZSBhIHNvbiBvZiBoaXMgaW50byB0aGUgZ2VucywgdGhleSwgb24gdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgcGFydCwga25vd2luZyB0aGF0IFBocmFzdG9yJ3Mgc29uIHdhcyBib3JuIG9mIHRoZSBkYXVnaHRlciBvZiBOZWFlcmEsIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBzdWZmZXIgUGhyYXN0b3IgdG8gaW50cm9kdWNlIGhpcyBzb24uPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5XaXRuZXNzZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5UaW1vc3RyYXR1cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBIZWNhbMOqLCBYYW50aGlwcHVzIG9mIEVyb2VhZGFlLCBFdmFsY2VzIG9mIFBoYWxlcnVtLCBBbnl0dXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgTGFjaWFkYWUsIEV1cGhyYW5vciBvZiBBZWdpbGlhIGFuZCBOaWNpcHB1cyBvZiBDZXBoYWzDqiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+SGVjYWzDqiwgYSBkZW1lIG9mIHRoZSB0cmliZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTGVvbnRpcywgTGFjaWFkYWUgb2YgdGhlIHRyaWJlIE9lbmXDr3MsIGFuZCBDZXBoYWzDqiBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRyaWJlIEFjYW1hbnRpcy48L25vdGU+IGRlcG9zZSB0aGF0IGJvdGggdGhleSBhbmQgUGhyYXN0b3Igb2YKICAgICAgICAgICAgICAgICAgICAgICAgQWVnaWxpYSBhcmUgbWVtYmVycyBvZiB0aGUgZ2VucyBjYWxsZWQgQnJ5dGlkYWUsIGFuZCB0aGF0LCB3aGVuIFBocmFzdG9yCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYWltZWQgdGhlIHJpZ2h0IHRvIGludHJvZHVjZSBhIHNvbiBvZiBoaXMgaW50byB0aGUgZ2VucywgdGhleSwgb24gdGhlaXIKICAgICAgICAgICAgICAgICAgICAgICAgcGFydCwga25vd2luZyB0aGF0IFBocmFzdG9yJ3Mgc29uIHdhcyBib3JuIG9mIHRoZSBkYXVnaHRlciBvZiBOZWFlcmEsIHdvdWxkCiAgICAgICAgICAgICAgICAgICAgICAgIG5vdCBzdWZmZXIgUGhyYXN0b3IgdG8gaW50cm9kdWNlIGhpcyBzb24uPC90cmFuc2xhdGlvbj4="
translation['59.speaker.62'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBwcm92ZSB0byB5b3UsCiAgICAgICAgICAgICAgICAgICAgdGhlcmVmb3JlLCBpbiBhIG1hbm5lciB0aGF0IGxlYXZlcyBubyByb29tIGZvciBkb3VidCB0aGF0IGV2ZW4gdGhvc2UgbW9zdCBuZWFybHkKICAgICAgICAgICAgICAgICAgICBjb25uZWN0ZWQgd2l0aCB0aGlzIHdvbWFuIE5lYWVyYSBoYXZlIGdpdmVuIHRlc3RpbW9ueSBhZ2FpbnN0IGhlciwgcHJvdmluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgc2hlIGlzIGFuIGFsaWVu4oCUU3RlcGhhbnVzIGhlcmUsIHdobyBub3cga2VlcHMgdGhlIHdvbWFuIGFuZCBsaXZlcyB3aXRoCiAgICAgICAgICAgICAgICAgICAgaGVyLCBhbmQgUGhyYXN0b3IsIHdobyB0b29rIGhlciBkYXVnaHRlciB0byB3aWZl4oCUU3RlcGhhbnVzLCBzaW5jZSBoZQogICAgICAgICAgICAgICAgICAgIHJlZnVzZWQgdG8gZ28gb24gdHJpYWwgb24gYmVoYWxmIG9mIHRoaXMgZGF1Z2h0ZXIgd2hlbiBoZSB3YXMgaW5kaWN0ZWQgYnkKICAgICAgICAgICAgICAgICAgICBQaHJhc3RvciBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZSBvbiB0aGUgY2hhcmdlIHRoYXQgaGUgaGFkIGJldHJvdGhlZCB0aGUKICAgICAgICAgICAgICAgICAgICBkYXVnaHRlciBvZiBhbiBhbGllbiB0byBoaW0gd2hvIHdhcyBhbiBBdGhlbmlhbiwgYnV0IGhhZCByYXRoZXIgcmVsaW5xdWlzaGVkIHRoZQogICAgICAgICAgICAgICAgICAgIGNsYWltIHRvIHRoZSBtYXJyaWFnZSBwb3J0aW9uLCBhbmQgaGFkIG5vdCByZWNvdmVyZWQgaXQ7IDwvdHJhbnNsYXRpb24+"
translation['59.speaker.63'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgUGhyYXN0b3IsIHNpbmNlIGhlIGhhZCBwdXQgYXdheSB0aGUgZGF1Z2h0ZXIgb2YgdGhpcwogICAgICAgICAgICAgICAgICAgIE5lYWVyYSBhZnRlciBtYXJyeWluZyBoZXIsIHdoZW4gaGUgbGVhcm5lZCB0aGF0IHNoZSB3YXMgbm90IHRoZSBkYXVnaHRlciBvZgogICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cywgYW5kIGhhZCByZWZ1c2VkIHRvIHJldHVybiBoZXIgbWFycmlhZ2UgcG9ydGlvbjsgYW5kIHdoZW4gbGF0ZXIgb24gaGUKICAgICAgICAgICAgICAgICAgICB3YXMgaW5kdWNlZCBieSBoaXMgaWxsbmVzcyBhbmQgaGlzIGNoaWxkbGVzcyBjb25kaXRpb24gYW5kIGhpcyBlbm1pdHkgdG93YXJkIGhpcwogICAgICAgICAgICAgICAgICAgIHJlbGF0aXZlcyB0byBhZG9wdCB0aGUgY2hpbGQsIGFuZCB3aGVuIGhlIHNvdWdodCB0byBpbnRyb2R1Y2UgaGltIHRvIHRoZSBtZW1iZXJzCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGdlbnMsIGFuZCB0aGV5IHZvdGVkIHRvIHJlamVjdCB0aGUgY2hpbGQgYW5kIGNoYWxsZW5nZWQgaGltIHRvIHRha2UgYW4KICAgICAgICAgICAgICAgICAgICBvYXRoLCBoZSByZWZ1c2VkIHRvIHN3ZWFyLCBidXQgY2hvc2UgcmF0aGVyIHRvIGF2b2lkIGNvbW1pdHRpbmcgcGVyanVyeSwgYW5kCiAgICAgICAgICAgICAgICAgICAgc3Vic2VxdWVudGx5IG1hcnJpZWQgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXcgYW5vdGhlciB3b21hbiB3aG8gd2FzIGFuCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4uIFRoZXNlIGZhY3RzLCBhYm91dCB3aGljaCB0aGVyZSBpcyBubyByb29tIGZvciBkb3VidCwgaGF2ZSBhZmZvcmRlZCB5b3UKICAgICAgICAgICAgICAgICAgICBjb252aW5jaW5nIHRlc3RpbW9ueSBhZ2FpbnN0IG91ciBvcHBvbmVudHMsIHByb3ZpbmcgdGhhdCB0aGlzIE5lYWVyYSBpcyBhbgogICAgICAgICAgICAgICAgICAgIGFsaWVuLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.64'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+Tm93CiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZSB0aGUgYmFzZSBsb3ZlIG9mIGdhaW4gYW5kIHRoZSB2aWxsYWlub3VzIGNoYXJhY3RlciBvZiB0aGlzIGZlbGxvdwogICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cywgaW4gb3JkZXIgdGhhdCBmcm9tIHRoaXMgYWdhaW4geW91IG1heSBiZSBjb252aW5jZWQgdGhhdCB0aGlzIE5lYWVyYQogICAgICAgICAgICAgICAgICAgIGlzIG5vdCBhbiBBdGhlbmlhbiB3b21hbi4gRXBhZW5ldHVzLCBvZiBBbmRyb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBsYXJnZSBpc2xhbmQgb2ZmIHRoZSBzb3V0aC1lYXN0ZXJuIGVuZCBvZiBFdWJvZWEuPC9ub3RlPiBhbiBvbGQgbG92ZXIKICAgICAgICAgICAgICAgICAgICBvZiBOZWFlcmEsIHdobyBoYWQgc3BlbnQgbGFyZ2Ugc3VtcyBvZiBtb25leSB1cG9uIGhlciwgdXNlZCB0byBsb2RnZSB3aXRoIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIHdoZW5ldmVyIGhlIGNhbWUgdG8gQXRoZW5zIG9uIGFjY291bnQgb2YgaGlzIGFmZmVjdGlvbiBmb3IgTmVhZXJhLgogICAgICAgICAgICAgICAgICAgIEFnYWluc3QgaGltIHRoaXMgbWFuIFN0ZXBoYW51cyBsYWlkIGEgcGxvdC4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.65'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0ic2VjdGlvbiIgLz5IZQogICAgICAgICAgICAgICAgICAgIHNlbnQgZm9yIGhpbSB0byBjb21lIHRvIHRoZSBjb3VudHJ5IHVuZGVyIHByZXRlbmNlIG9mIGEgc2FjcmlmaWNlIGFuZCB0aGVuLAogICAgICAgICAgICAgICAgICAgIGhhdmluZyBzdXJwcmlzZWQgaGltIGluIGFkdWx0ZXJ5IHdpdGggdGhlIGRhdWdodGVyIG9mIHRoaXMgTmVhZXJhLCBpbnRpbWlkYXRlZAogICAgICAgICAgICAgICAgICAgIGhpbSBhbmQgZXh0b3J0ZWQgZnJvbSBoaW0gdGhpcnR5IG1pbmFlLiBBcyBzdXJldGllcyBmb3IgdGhpcyBzdW0gaGUgYWNjZXB0ZWQKICAgICAgICAgICAgICAgICAgICBBcmlzdG9tYWNodXMsIHdobyBoYWQgc2VydmVkIGFzIFRoZXNtb3RoZXRlLCBhbmQgTmF1c2lwaGlsdXMsIHRoZSBzb24gb2YKICAgICAgICAgICAgICAgICAgICBOYXVzaW5pY3VzLCB3aG8gaGFkIHNlcnZlZCBhcyBhcmNob24sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPk5hdXNpbmljdXMKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGFyY2hvbiBlcG9ueW1vcyBpbiA8ZGF0ZVJhbmdlIGF1dGhuYW1lPSItMzc4Ly0zNzciIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZnJvbT0iLTM3OCIgdG89Ii0zNzciPjM3ODwvZGF0ZVJhbmdlPi0zNzcKICAgICAgICAgICAgICAgICAgICAgICAgQi5DLjwvbm90ZT4gYW5kIHRoZW4gcmVsZWFzZWQgaGltIHVuZGVyIHBsZWRnZSB0aGF0IGhlIHdvdWxkIHBheSB0aGUgbW9uZXkuCiAgICAgICAgICAgICAgICAgICAgICAgIDxkYXRlUmFuZ2UgYXV0aG5hbWU9Ii0zNzgvLTM3NyIgY2xhc3M9InRyYW5zbGF0aW9uIiBmcm9tPSItMzc4IiB0bz0iLTM3NyI+Mzc4PC9kYXRlUmFuZ2U+LTM3NwogICAgICAgICAgICAgICAgICAgICAgICBCLkMuPC90cmFuc2xhdGlvbj4="
translation['59.speaker.66'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0ic2VjdGlvbiIgLz5FcGFlbmV0dXMsIGhvd2V2ZXIsIHdoZW4gaGUgZ290IG91dCBhbmQKICAgICAgICAgICAgICAgICAgICB3YXMgYWdhaW4gaGlzIG93biBtYXN0ZXIgcHJlZmVycmVkIGJlZm9yZSB0aGUgVGhlc21vdGhldGFlIGFuIGluZGljdG1lbnQgZm9yCiAgICAgICAgICAgICAgICAgICAgdW5sYXdmdWwgaW1wcmlzb25tZW50IGFnYWluc3QgdGhpcyBTdGVwaGFudXMgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXcgd2hpY2gKICAgICAgICAgICAgICAgICAgICBlbmFjdHMgdGhhdCwgaWYgYSBtYW4gdW5sYXdmdWxseSBpbXByaXNvbnMgYW5vdGhlciBvbiBhIGNoYXJnZSBvZiBhZHVsdGVyeSwgdGhlCiAgICAgICAgICAgICAgICAgICAgcGVyc29uIGluIHF1ZXN0aW9uIG1heSBpbmRpY3QgaGltIGJlZm9yZSB0aGUgVGhlc21vdGhldGFlIG9uIGEgY2hhcmdlIG9mIGlsbGVnYWwKICAgICAgICAgICAgICAgICAgICBpbXByaXNvbm1lbnQ7IGFuZCBpZiBoZSBzaGFsbCBjb252aWN0IHRoZSBvbmUgd2hvIGltcHJpc29uZWQgaGltIGFuZCBwcm92ZSB0aGF0CiAgICAgICAgICAgICAgICAgICAgaGUgd2FzIHRoZSB2aWN0aW0gb2YgYW4gdW5sYXdmdWwgcGxvdCwgaGUgc2hhbGwgYmUgbGV0IG9mZiBzY290LWZyZWUsIGFuZCBoaXMKICAgICAgICAgICAgICAgICAgICBzdXJldGllcyBzaGFsbCBiZSByZWxlYXNlZCBmcm9tIHRoZWlyIGVuZ2FnZW1lbnQ7IGJ1dCBpZiBpdCBzaGFsbCBhcHBlYXIgdGhhdCBoZQogICAgICAgICAgICAgICAgICAgIHdhcyBhbiBhZHVsdGVyZXIsIHRoZSBsYXcgYmlkcyBoaXMgc3VyZXRpZXMgZ2l2ZSBoaW0gb3ZlciB0byB0aGUgb25lIHdobyBjYXVnaHQKICAgICAgICAgICAgICAgICAgICBoaW0gaW4gdGhlIGFjdCwgYW5kIGhlIGluIHRoZSBjb3VydC1yb29tIG1heSBpbmZsaWN0IHVwb24gaGltLCBhcyB1cG9uIG9uZQogICAgICAgICAgICAgICAgICAgIGd1aWx0eSBvZiBhZHVsdGVyeSwgd2hhdGV2ZXIgdHJlYXRtZW50IGhlIHBsZWFzZXMsIHByb3ZpZGVkIGhlIHVzZSBubyBrbmlmZS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['59.speaker.67'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgaW4gYWNjb3JkYW5jZSB3aXRoIHRoaXMgbGF3IHRoYXQKICAgICAgICAgICAgICAgICAgICBFcGFlbmV0dXMgaW5kaWN0ZWQgU3RlcGhhbnVzLiBIZSBhZG1pdHRlZCBoYXZpbmcgaW50ZXJjb3Vyc2Ugd2l0aCB0aGUgd29tYW4sIGJ1dAogICAgICAgICAgICAgICAgICAgIGRlbmllZCB0aGF0IGhlIHdhcyBhbiBhZHVsdGVyZXI7IGZvciwgaGUgc2FpZCwgc2hlIHdhcyBub3QgdGhlIGRhdWdodGVyIG9mCiAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzLCBidXQgb2YgTmVhZXJhLCBhbmQgdGhlIG1vdGhlciBrbmV3IHRoYXQgdGhlIGdpcmwgd2FzIGhhdmluZwogICAgICAgICAgICAgICAgICAgIGludGVyY291cnNlIHdpdGggaGltLCBhbmQgaGUgaGFkIHNwZW50IGxhcmdlIHN1bXMgb2YgbW9uZXkgdXBvbiB0aGVtLCBhbmQKICAgICAgICAgICAgICAgICAgICB3aGVuZXZlciBoZSBjYW1lIHRvIEF0aGVucyBoZSBzdXBwb3J0ZWQgdGhlIGVudGlyZSBob3VzZWhvbGQuIEluIGFkZGl0aW9uIHRvCiAgICAgICAgICAgICAgICAgICAgdGhpcyBoZSBicm91Z2h0IGZvcndhcmQgdGhlIGxhdyB3aGljaCBkb2VzIG5vdCBwZXJtaXQgb25lIHRvIGJlIHRha2VuIGFzIGFuCiAgICAgICAgICAgICAgICAgICAgYWR1bHRlcmVyIHdobyBoYXMgdG8gZG8gd2l0aCB3b21lbiB3aG8gc2l0IHByb2Zlc3Npb25hbGx5IGluIGEgYnJvdGhlbCBvciB3aG8KICAgICAgICAgICAgICAgICAgICBvcGVubHkgb2ZmZXIgdGhlbXNlbHZlcyBmb3IgaGlyZTsgZm9yIHRoaXMsIGhlIHNhaWQsIGlzIHdoYXQgdGhlIGhvdXNlIG9mCiAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGlzLCBhIGhvdXNlIG9mIHByb3N0aXR1dGlvbjsgdGhpcyBpcyB0aGVpciB0cmFkZSwgYW5kIHRoZXkgZ2V0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgbGl2aW5nIGNoaWVmbHkgYnkgdGhpcyBtZWFucy4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.68'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEVwYWVuZXR1cwogICAgICAgICAgICAgICAgICAgIGhhZCBtYWRlIHRoZXNlIHN0YXRlbWVudHMgYW5kIGhhZCBwcmVmZXJyZWQgdGhlIGluZGljdG1lbnQsIHRoaXMgU3RlcGhhbnVzLAogICAgICAgICAgICAgICAgICAgIGtub3dpbmcgdGhhdCBoZSB3b3VsZCBiZSBjb252aWN0ZWQgb2Yga2VlcGluZyBhIGJyb3RoZWwgYW5kIGV4dG9ydGluZyBibGFja21haWwsCiAgICAgICAgICAgICAgICAgICAgc3VibWl0dGVkIGhpcyBkaXNwdXRlIHdpdGggRXBhZW5ldHVzIGZvciBhcmJpdHJhdGlvbiB0byB0aGUgdmVyeSBtZW4gd2hvIHdlcmUKICAgICAgICAgICAgICAgICAgICB0aGUgbGF0dGVyJ3Mgc3VyZXRpZXMgb24gdGhlIHRlcm1zIHRoYXQgdGhleSBzaG91bGQgYmUgcmVsZWFzZWQgZnJvbSB0aGVpcgogICAgICAgICAgICAgICAgICAgIGVuZ2FnZW1lbnQgYW5kIHRoYXQgRXBhZW5ldHVzIHNob3VsZCB3aXRoZHJhdyB0aGUgaW5kaWN0bWVudC4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.69'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0ic2VjdGlvbiIgLz5FcGFlbmV0dXMgYWNjZWRlZCB0byB0aGVzZSB0ZXJtcyBhbmQgd2l0aGRyZXcgdGhlIGluZGljdG1lbnQKICAgICAgICAgICAgICAgICAgICB3aGljaCBoZSBoYWQgcHJlZmVycmVkIGFnYWluc3QgU3RlcGhhbnVzLCBhbmQgYSBtZWV0aW5nIHRvb2sgcGxhY2UgYmV0d2VlbiB0aGVtCiAgICAgICAgICAgICAgICAgICAgYXQgd2hpY2ggdGhlIHN1cmV0aWVzIHNhdCBhcyBhcmJpdHJhdG9ycy4gU3RlcGhhbnVzIGNvdWxkIHNheSBub3RoaW5nIGluIGRlZmVuc2UKICAgICAgICAgICAgICAgICAgICBvZiBoaXMgYWN0aW9uLCBidXQgaGUgcmVxdWVzdGVkIEVwYWVuZXR1cyB0byBtYWtlIGEgY29udHJpYnV0aW9uIHRvd2FyZCBhIGRvd3J5CiAgICAgICAgICAgICAgICAgICAgZm9yIE5lYWVyYSdzIGRhdWdodGVyLCBtYWtpbmcgbWVudGlvbiBvZiBoaXMgb3duIHBvdmVydHkgYW5kIHRoZSBtaXNmb3J0dW5lCiAgICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIGdpcmwgaGFkIGZvcm1lcmx5IG1ldCB3aXRoIGluIGhlciByZWxhdGlvbnMgd2l0aCBQaHJhc3RvciwgYW5kCiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW5nIHRoYXQgaGUgaGFkIGxvc3QgaGVyIG1hcnJpYWdlIHBvcnRpb24gYW5kIGNvdWxkIG5vdCBwcm92aWRlIGFub3RoZXIKICAgICAgICAgICAgICAgICAgICBmb3IgaGVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.70'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MCIgdW5pdD0ic2VjdGlvbiIgLz7igJxZb3Us4oCdIGhlIHNhaWQsCiAgICAgICAgICAgICAgICAgICAg4oCcaGF2ZSBlbmpveWVkIHRoZSB3b21hbidzIGZhdm9ycywgYW5kIGl0IGlzIGJ1dCByaWdodCB0aGF0IHlvdSBzaG91bGQKICAgICAgICAgICAgICAgICAgICBkbyBzb21ldGhpbmcgZm9yIGhlci7igJ0gSGUgYWRkZWQgb3RoZXIgd29yZHMgY2FsY3VsYXRlZCB0byBhcm91c2UKICAgICAgICAgICAgICAgICAgICBjb21wYXNzaW9uLCBzdWNoIGFzIGFueW9uZSBtaWdodCB1c2UgaW4gZW50cmVhdHkgdG8gZ2V0IG91dCBvZiBhIG5hc3R5IG1lc3MuIFRoZQogICAgICAgICAgICAgICAgICAgIGFyYml0cmF0b3JzLCBhZnRlciBoZWFyaW5nIGJvdGggcGFydGllcywgYnJvdWdodCBhYm91dCBhIHJlY29uY2lsaWF0aW9uIGJldHdlZW4KICAgICAgICAgICAgICAgICAgICB0aGVtLCBhbmQgaW5kdWNlZCBFcGFlbmV0dXMgdG8gY29udHJpYnV0ZSBvbmUgdGhvdXNhbmQgZHJhY2htYWUgdG93YXJkIHRoZQogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlIHBvcnRpb24gb2YgTmVhZXJhJ3MgZGF1Z2h0ZXIuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlCiAgICAgICAgICAgICAgICAgICAgdGhlIHRydXRoIG9mIHRoZXNlIHN0YXRlbWVudHMgb2YgbWluZSwgSSB3aWxsIGNhbGwgYXMgd2l0bmVzc2VzIHRvIHRoZXNlIGZhY3RzCiAgICAgICAgICAgICAgICAgICAgdGhlIHZlcnkgbWVuIHdobyB3ZXJlIHN1cmV0aWVzIGFuZCBhcmJpdHJhdG9yczogPC90cmFuc2xhdGlvbj4="
translation['59.speaker.71'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MSIgdW5pdD0ic2VjdGlvbiIgLz48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJXaXRuZXNzZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPldpdG5lc3NlczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5hdXNpcGhpbHVzIG9mIENlcGhhbMOqIGFuZCBBcmlzdG9tYWNodXMgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQ2VwaGFsw6ogZGVwb3NlIHRoYXQgdGhleSBiZWNhbWUgc3VyZXRpZXMgZm9yIEVwYWVuZXR1cyBvZiBBbmRyb3MsCiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gU3RlcGhhbnVzIGFzc2VydGVkIHRoYXQgaGUgaGFkIGNhdWdodCBFcGFlbmV0dXMgaW4gYWR1bHRlcnk7IGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gRXBhZW5ldHVzIGhhZCBnb3QgYXdheSBmcm9tIHRoZSBob3VzZSBvZiBTdGVwaGFudXMgYW5kIGhhZCBiZWNvbWUgaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIG93biBtYXN0ZXIsIGhlIHByZWZlcnJlZCBiZWZvcmUgdGhlIFRoZXNtb3RoZXRhZSBhbiBpbmRpY3RtZW50IGFnYWluc3QKICAgICAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGZvciBpbGxlZ2FsIGltcHJpc29ubWVudDsgdGhhdCB0aGV5IHdlcmUgdGhlbXNlbHZlcyBhcHBvaW50ZWQgYXMKICAgICAgICAgICAgICAgICAgICAgICAgYXJiaXRyYXRvcnMsIGFuZCBicm91Z2h0IGFib3V0IGEgcmVjb25jaWxpYXRpb24gYmV0d2VlbiBFcGFlbmV0dXMgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cywgYW5kIHRoYXQgdGhlIHRlcm1zIG9mIHRoZSByZWNvbmNpbGlhdGlvbiB3ZXJlIHRob3NlIHdoaWNoCiAgICAgICAgICAgICAgICAgICAgICAgIEFwb2xsb2RvcnVzIHByb2R1Y2VzLjwvcXVvdGU+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+V2l0bmVzc2VzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+TmF1c2lwaGlsdXMgb2YgQ2VwaGFsw6ogYW5kIEFyaXN0b21hY2h1cyBvZgogICAgICAgICAgICAgICAgICAgICAgICBDZXBoYWzDqiBkZXBvc2UgdGhhdCB0aGV5IGJlY2FtZSBzdXJldGllcyBmb3IgRXBhZW5ldHVzIG9mIEFuZHJvcywKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBTdGVwaGFudXMgYXNzZXJ0ZWQgdGhhdCBoZSBoYWQgY2F1Z2h0IEVwYWVuZXR1cyBpbiBhZHVsdGVyeTsgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBFcGFlbmV0dXMgaGFkIGdvdCBhd2F5IGZyb20gdGhlIGhvdXNlIG9mIFN0ZXBoYW51cyBhbmQgaGFkIGJlY29tZSBoaXMKICAgICAgICAgICAgICAgICAgICAgICAgb3duIG1hc3RlciwgaGUgcHJlZmVycmVkIGJlZm9yZSB0aGUgVGhlc21vdGhldGFlIGFuIGluZGljdG1lbnQgYWdhaW5zdAogICAgICAgICAgICAgICAgICAgICAgICBTdGVwaGFudXMgZm9yIGlsbGVnYWwgaW1wcmlzb25tZW50OyB0aGF0IHRoZXkgd2VyZSB0aGVtc2VsdmVzIGFwcG9pbnRlZCBhcwogICAgICAgICAgICAgICAgICAgICAgICBhcmJpdHJhdG9ycywgYW5kIGJyb3VnaHQgYWJvdXQgYSByZWNvbmNpbGlhdGlvbiBiZXR3ZWVuIEVwYWVuZXR1cyBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzLCBhbmQgdGhhdCB0aGUgdGVybXMgb2YgdGhlIHJlY29uY2lsaWF0aW9uIHdlcmUgdGhvc2Ugd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgQXBvbGxvZG9ydXMgcHJvZHVjZXMuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iVGVybXMgb2YgUmVjb25jaWxpYXRpb24iPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRlcm1zIG9mIFJlY29uY2lsaWF0aW9uPC90aXRsZT5UaGUgYXJiaXRyYXRvcnMgYnJvdWdodCBhYm91dCBhCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsaWF0aW9uIGJldHdlZW4gU3RlcGhhbnVzIGFuZCBFcGFlbmV0dXMgb24gdGhlIGZvbGxvd2luZyB0ZXJtczogdGhleQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBiZWFyIG5vIG1hbGljZSBmb3Igd2hhdCB0b29rIHBsYWNlIHJlZ2FyZGluZyB0aGUgaW1wcmlzb25tZW50OwogICAgICAgICAgICAgICAgICAgICAgICBFcGFlbmV0dXMgc2hhbGwgZ2l2ZSB0byBQaGFubyBvbmUgdGhvdXNhbmQgZHJhY2htYWUgdG93YXJkIGhlciBtYXJyaWFnZQogICAgICAgICAgICAgICAgICAgICAgICBwb3J0aW9uLCBpbmFzbXVjaCBhcyBoZSBoYXMgZnJlcXVlbnRseSBlbmpveWVkIGhlciBmYXZvcnM7IGFuZCBTdGVwaGFudXMKICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgcHV0IFBoYW5vIGF0IHRoZSBkaXNwb3NhbCBvZiBFcGFlbmV0dXMgd2hlbmV2ZXIgaGUgY29tZXMgdG8gQXRoZW5zIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB3aXNoZXMgdG8gZW5qb3kgaGVyPC9xdW90ZT4uIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRlcm1zIG9mIFJlY29uY2lsaWF0aW9uPC90aXRsZT5UaGUgYXJiaXRyYXRvcnMgYnJvdWdodCBhYm91dCBhCiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsaWF0aW9uIGJldHdlZW4gU3RlcGhhbnVzIGFuZCBFcGFlbmV0dXMgb24gdGhlIGZvbGxvd2luZyB0ZXJtczogdGhleQogICAgICAgICAgICAgICAgICAgICAgICBzaGFsbCBiZWFyIG5vIG1hbGljZSBmb3Igd2hhdCB0b29rIHBsYWNlIHJlZ2FyZGluZyB0aGUgaW1wcmlzb25tZW50OwogICAgICAgICAgICAgICAgICAgICAgICBFcGFlbmV0dXMgc2hhbGwgZ2l2ZSB0byBQaGFubyBvbmUgdGhvdXNhbmQgZHJhY2htYWUgdG93YXJkIGhlciBtYXJyaWFnZQogICAgICAgICAgICAgICAgICAgICAgICBwb3J0aW9uLCBpbmFzbXVjaCBhcyBoZSBoYXMgZnJlcXVlbnRseSBlbmpveWVkIGhlciBmYXZvcnM7IGFuZCBTdGVwaGFudXMKICAgICAgICAgICAgICAgICAgICAgICAgc2hhbGwgcHV0IFBoYW5vIGF0IHRoZSBkaXNwb3NhbCBvZiBFcGFlbmV0dXMgd2hlbmV2ZXIgaGUgY29tZXMgdG8gQXRoZW5zIGFuZAogICAgICAgICAgICAgICAgICAgICAgICB3aXNoZXMgdG8gZW5qb3kgaGVyPC90cmFuc2xhdGlvbj4="
translation['59.speaker.72'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MiIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+QWx0aG91Z2ggdGhpcyB3b21hbiwgdGhlbiwgd2FzIGFja25vd2xlZGdlZCBiZXlvbmQgYWxsCiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24gdG8gYmUgYW4gYWxpZW4sIGFuZCBhbHRob3VnaCBTdGVwaGFudXMgaGFkIGhhZCB0aGUgYXVkYWNpdHkgdG8gY2hhcmdlCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhZHVsdGVyeSBhIG1hbiB0YWtlbiB3aXRoIGhlciwgdGhlc2UgdHdvLCBTdGVwaGFudXMgYW5kIE5lYWVyYSwgY2FtZSB0bwogICAgICAgICAgICAgICAgICAgIHN1Y2ggYSBwaXRjaCBvZiBpbnNvbGVuY2UgYW5kIHNoYW1lbGVzc25lc3MgdGhhdCB0aGV5IHdlcmUgbm90IGNvbnRlbnQgd2l0aAogICAgICAgICAgICAgICAgICAgIGFzc2VydGluZyBoZXIgdG8gYmUgb2YgQXRoZW5pYW4gYmlydGg7IGJ1dCBvYnNlcnZpbmcgdGhhdCBUaGVvZ2VuZXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIENvdGhvY2lkYWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkNvdGhvY2lkYWUsIGEgZGVtZSBvZiB0aGUgdHJpYmUKICAgICAgICAgICAgICAgICAgICAgICAgT2VuZcOvcy4gU2luY2UgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1OS44NCIgdmFsaWQ9InllcyI+RGVtLiA1OS44NDwvYmlibD4gVGhlb2dlbmVzCiAgICAgICAgICAgICAgICAgICAgICAgIGlzIHNhaWQgdG8gYmUgZnJvbSB0aGUgZGVtZSBFcmNoaWEsIHNvbWUgaGF2ZSB0aG91Z2h0IHRoYXQgaW4gdGhlIHByZXNlbnQKICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2FnZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Oms6/zrjPic664b23zrTOt869PC9mb3JlaWduPiBtYXkgYmUgYSBjb3JydXB0aW9uIG9mIGEKICAgICAgICAgICAgICAgICAgICAgICAgcGF0cm9ueW1pYywgYW5kIG5vdCB0aGUgbmFtZSBvZiBhIGRlbWUuPC9ub3RlPiBoYWQgYmVlbiBkcmF3biBieSBsb3QgYXMKICAgICAgICAgICAgICAgICAgICAgICAga2luZyw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU5Ljg0IiB2YWxpZD0ieWVzIj5EZW0uIDU5Ljg0PC9iaWJsPiBUaGVvZ2VuZXMKICAgICAgICAgICAgICAgICAgICAgICAgaXMgc2FpZCB0byBiZSBmcm9tIHRoZSBkZW1lIEVyY2hpYSwgc29tZSBoYXZlIHRob3VnaHQgdGhhdCBpbiB0aGUgcHJlc2VudAogICAgICAgICAgICAgICAgICAgICAgICBwYXNzYWdlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6azr/OuM+JzrrhvbfOtM63zr08L2ZvcmVpZ24+IG1heSBiZSBhIGNvcnJ1cHRpb24gb2YgYQogICAgICAgICAgICAgICAgICAgICAgICBwYXRyb255bWljLCBhbmQgbm90IHRoZSBuYW1lIG9mIGEgZGVtZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhhdCBpcywgYXMga2luZy1hcmNob24uPC9ub3RlPiBhIG1hbgogICAgICAgICAgICAgICAgICAgIG9mIGdvb2QgYmlydGgsIGJ1dCBwb29yIGFuZCB3aXRob3V0IGV4cGVyaWVuY2UgaW4gYWZmYWlycywgdGhpcyBTdGVwaGFudXMsIHdobwogICAgICAgICAgICAgICAgICAgIGhhZCBhc3Npc3RlZCBoaW0gYXQgaGlzIHNjcnV0aW55IGFuZCBoYWQgaGVscGVkIGhpbSBtZWV0IGhpcyBleHBlbnNlcyB3aGVuIGhlCiAgICAgICAgICAgICAgICAgICAgZW50ZXJlZCB1cG9uIGhpcyBvZmZpY2UsIHdvcm1lZCBoaXMgd2F5IGludG8gaGlzIGZhdm9yLCBhbmQgYnkgYnV5aW5nIHRoZQogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uIGZyb20gaGltIGdvdCBoaW1zZWxmIGFwcG9pbnRlZCBoaXMgYXNzZXNzb3IuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlNlZSBub3RlIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YjwvZW1waD4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA1OC4zMiIgdmFsaWQ9InllcyI+RGVtLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgNTguMzI8L2JpYmw+Ljwvbm90ZT4gSGUgdGhlbiBnYXZlIGhpbSBpbiBtYXJyaWFnZSB0aGlzIHdvbWFuLCB0aGUKICAgICAgICAgICAgICAgICAgICBkYXVnaHRlciBvZiBOZWFlcmEsIGFuZCBiZXRyb3RoZWQgaGVyIHRvIGhpbSBhcyBiZWluZyBoaXMgb3duIGRhdWdodGVyOyBzbwogICAgICAgICAgICAgICAgICAgIHV0dGVybHkgZGlkIGhlIHNjb3JuIHlvdSBhbmQgeW91ciBsYXdzLiA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmI8L2VtcGg+IG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTguMzIiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU4LjMyPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.73'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3MyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQKICAgICAgICAgICAgICAgICAgICB0aGlzIHdvbWFuIG9mZmVyZWQgb24gdGhlIGNpdHkncyBiZWhhbGYgdGhlIHNhY3JpZmljZXMgd2hpY2ggbm9uZSBtYXkgbmFtZSwgYW5kCiAgICAgICAgICAgICAgICAgICAgc2F3IHdoYXQgaXQgd2FzIG5vdCBmaXR0aW5nIGZvciBoZXIgdG8gc2VlLCBiZWluZyBhbiBhbGllbjsgYW5kIGRlc3BpdGUgaGVyCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIHNoZSBlbnRlcmVkIHdoZXJlIG5vIG90aGVyIG9mIHRoZSB3aG9sZSBob3N0IG9mIHRoZSBBdGhlbmlhbnMgZW50ZXJzCiAgICAgICAgICAgICAgICAgICAgc2F2ZSB0aGUgd2lmZSBvZiB0aGUga2luZyBvbmx5OyBhbmQgc2hlIGFkbWluaXN0ZXJlZCB0aGUgb2F0aCB0byB0aGUgdmVuZXJhYmxlCiAgICAgICAgICAgICAgICAgICAgICAgIHByaWVzdGVzc2VzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZXNlIHdlcmUgd29tZW4gd2hvc2UgZHV0eSB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgdG8gbWluaXN0ZXIgYXQgdGhlIGFsdGFycyBvZiBEaW9ueXN1cy48L25vdGU+IHdobyBwcmVzaWRlIG92ZXIgdGhlCiAgICAgICAgICAgICAgICAgICAgc2FjcmlmaWNlcywgYW5kIHdhcyBnaXZlbiBhcyBicmlkZSB0byBEaW9ueXN1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BdCB0aGUgZmVzdGl2YWwgb2YgdGhlIEFudGhlc3RlcmlhLCBpbiBvcmRlciB0byBzeW1ib2xpemUgdGhlIHVuaW9uIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBnb2Qgd2l0aCB0aGUgcGVvcGxlLCB0aGUg77yIcHJlc3VtYWJsee+8iSBub2JsZXN0IHdvbWFuIGluIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBsYW5k4oCUdGhlIHdpZmUgb2YgdGhlIGtpbmfigJR3YXMgZ2l2ZW4gYXMgYnJpZGUgdG8KICAgICAgICAgICAgICAgICAgICAgICAgRGlvbnlzdXMuPC9ub3RlPjsgYW5kIHNoZSBjb25kdWN0ZWQgb24gdGhlIGNpdHkncyBiZWhhbGYgdGhlIHJpdGVzIHdoaWNoIG91cgogICAgICAgICAgICAgICAgICAgIGZhdGhlcnMgaGFuZGVkIGRvd24gZm9yIHRoZSBzZXJ2aWNlIG9mIHRoZSBnb2RzLCByaXRlcyBtYW55IGFuZCBzb2xlbW4gYW5kIG5vdAogICAgICAgICAgICAgICAgICAgIHRvIGJlIG5hbWVkLiBJZiBpdCBiZSBub3QgcGVybWl0dGVkIHRoYXQgYW55b25lIGV2ZW4gaGVhciBvZiB0aGVtLCBob3cgY2FuIGl0IGJlCiAgICAgICAgICAgICAgICAgICAgY29uc29uYW50IHdpdGggcGlldHkgZm9yIGEgY2hhbmNlLWNvbWVyIHRvIHBlcmZvcm0gdGhlbSwgZXNwZWNpYWxseSBhIHdvbWFuIG9mCiAgICAgICAgICAgICAgICAgICAgaGVyIGNoYXJhY3RlciBhbmQgb25lIHdobyBoYXMgZG9uZSB3aGF0IHNoZSBoYXMgZG9uZT8gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.74'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoLCBob3dldmVyLCB0byBnbyBiYWNrCiAgICAgICAgICAgICAgICAgICAgZmFydGhlciBhbmQgZXhwbGFpbiB0aGVzZSBtYXR0ZXJzIHRvIHlvdSBpbiBncmVhdGVyIGRldGFpbCwgdGhhdCB5b3UgbWF5IGJlIG1vcmUKICAgICAgICAgICAgICAgICAgICBjYXJlZnVsIGluIHJlZ2FyZCB0byB0aGUgcHVuaXNobWVudCwgYW5kIG1heSBiZSBhc3N1cmVkIHRoYXQgeW91IGFyZSB0byBjYXN0CiAgICAgICAgICAgICAgICAgICAgeW91ciB2b3Rlcywgbm90IG9ubHkgaW4gdGhlIGludGVyZXN0IG9mIHlvdXIgc2VsdmVzIGFuZCB0aGUgbGF3cywgYnV0IGFsc28gaW4KICAgICAgICAgICAgICAgICAgICB0aGUgaW50ZXJlc3Qgb2YgcmV2ZXJlbmNlIHRvd2FyZHMgdGhlIGdvZHMsIGJ5IGV4YWN0aW5nIHRoZSBwZW5hbHR5IGZvciBhY3RzIG9mCiAgICAgICAgICAgICAgICAgICAgaW1waWV0eSwgYW5kIGJ5IHB1bmlzaGluZyB0aG9zZSB3aG8gaGF2ZSBkb25lIHRoZSB3cm9uZy48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SW4gYW5jaWVudCB0aW1lcywgbWVuIG9mIEF0aGVucywgdGhlcmUgd2FzIHNvdmVyZWlnbnR5IGluIG91ciBzdGF0ZSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGtpbmdzaGlwIGJlbG9uZ2VkIHRvIHRob3NlIHdobyB3ZXJlIGZyb20gdGltZSB0byB0aW1lIHByZWVtaW5lbnQgYnkKICAgICAgICAgICAgICAgICAgICByZWFzb24gb2YgdGhlaXIgYmVpbmcgY2hpbGRyZW4gb2YgdGhlIHNvaWwsIGFuZCB0aGUga2luZyBvZmZlcmVkIGFsbCB0aGUKICAgICAgICAgICAgICAgICAgICBzYWNyaWZpY2VzLCBhbmQgdGhvc2Ugd2hpY2ggd2VyZSBob2xpZXN0IGFuZCB3aGljaCBub25lIG1pZ2h0IG5hbWUgaGlzIHdpZmUKICAgICAgICAgICAgICAgICAgICBwZXJmb3JtZWQsIGFzIHdhcyBuYXR1cmFsLCBzaGUgYmVpbmcgcXVlZW4uIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.75'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBUaGVzZXVzIHNldHRsZWQgdGhlIHBlb3BsZSBpbiBvbmUgY2l0eSBhbmQgZXN0YWJsaXNoZWQgdGhlIGRlbW9jcmFjeSwKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGNpdHkgYmVjYW1lIHBvcHVsb3VzLCB0aGUgcGVvcGxlIG5vbmUgdGhlIGxlc3MgY29udGludWVkIHRvIGVsZWN0IHRoZQogICAgICAgICAgICAgICAgICAgIGtpbmcgYXMgYmVmb3JlLCBjaG9vc2luZyBoaW0gZnJvbSBhbW9uZyB0aG9zZSBtb3N0IGRpc3Rpbmd1aXNoZWQgYnkgdmFsb3I7IGFuZAogICAgICAgICAgICAgICAgICAgIHRoZXkgZXN0YWJsaXNoZWQgYSBsYXcgdGhhdCBoaXMgd2lmZSBzaG91bGQgYmUgb2YgQXRoZW5pYW4gYmlydGgsIGFuZCB0aGF0IGhlCiAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG1hcnJ5IGEgdmlyZ2luIHdobyBoYWQgbmV2ZXIga25vd24gYW5vdGhlciBtYW4sIHRvIHRoZSBlbmQgdGhhdCBhZnRlciB0aGUKICAgICAgICAgICAgICAgICAgICBjdXN0b20gb2Ygb3VyIGZhdGhlcnMgdGhlIHNhY3JlZCByaXRlcyB0aGF0IG5vbmUgbWF5IG5hbWUgbWF5IGJlIGNlbGVicmF0ZWQgb24KICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eSdzIGJlaGFsZiwgYW5kIHRoYXQgdGhlIGFwcHJvdmVkIHNhY3JpZmljZXMgbWF5IGJlIG1hZGUgdG8gdGhlIGdvZHMgYXMKICAgICAgICAgICAgICAgICAgICBwaWV0eSBkZW1hbmRzLCB3aXRob3V0IG9taXNzaW9uIG9yIGlubm92YXRpb24uIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.76'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGxhdyB0aGV5IHdyb3RlIG9uIGEgcGlsbGFyIG9mIHN0b25lLCBhbmQgc2V0IGl0IHVwIGluIHRoZSBzYW5jdHVhcnkgb2YKICAgICAgICAgICAgICAgICAgICBEaW9ueXN1cyBieSB0aGUgYWx0YXIgaW4gTGltbmFlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkEgZGlzdHJpY3QgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNvdXRoZXJuIHBhcnQgb2YgQXRoZW5zLCB0aG91Z2ggdG9wb2dyYXBoZXJzIGRpZmZlciB3aWRlbHkgYXMgdG8gaXRzCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLiBJdCB3YXMgZG91YnRsZXNzIG9yaWdpbmFsbHkgYSBzd2FtcCDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ou+G9t868zr3OtzwvZm9yZWlnbj7vvIkuPC9ub3RlPu+8iGFuZCB0aGlzIHBpbGxhcgogICAgICAgICAgICAgICAgICAgIGV2ZW4gbm93IHN0YW5kcywgc2hvd2luZyB0aGUgaW5zY3JpcHRpb24gaW4gQXR0aWMgY2hhcmFjdGVycywgbmVhcmx5CiAgICAgICAgICAgICAgICAgICAgZWZmYWNlZO+8iS4gVGh1cyB0aGUgcGVvcGxlIHRlc3RpZmllZCB0byB0aGVpciBvd24gcGlldHkgdG93YXJkIHRoZSBnb2QsCiAgICAgICAgICAgICAgICAgICAgYW5kIGxlZnQgaXQgYXMgYSBkZXBvc2l0IGZvciBmdXR1cmUgZ2VuZXJhdGlvbnMsIHNob3dpbmcgd2hhdCB0eXBlIG9mIHdvbWFuIHdlCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kIHRoYXQgc2hlIHNoYWxsIGJlIHdobyBpcyB0byBiZSBnaXZlbiBpbiBtYXJyaWFnZSB0byB0aGUgZ29kLCBhbmQgaXMgdG8KICAgICAgICAgICAgICAgICAgICBwZXJmb3JtIHRoZSBzYWNyaWZpY2VzLiBGb3IgdGhpcyByZWFzb24gdGhleSBzZXQgaXQgdXAgaW4gdGhlIG1vc3QgYW5jaWVudCBhbmQKICAgICAgICAgICAgICAgICAgICBtb3N0IHNhY3JlZCBzYW5jdHVhcnkgb2YgRGlvbnlzdXMgaW4gTGltbmFlLCBpbiBvcmRlciB0aGF0IGZldyBvbmx5IG1pZ2h0IGhhdmUKICAgICAgICAgICAgICAgICAgICBrbm93bGVkZ2Ugb2YgdGhlIGluc2NyaXB0aW9uOyBmb3Igb25jZSBvbmx5IGluIGVhY2ggeWVhciBpcyB0aGUgc2FuY3R1YXJ5CiAgICAgICAgICAgICAgICAgICAgb3BlbmVkLCBvbiB0aGUgdHdlbGZ0aCBkYXkgb2YgdGhlIG1vbnRoIEFudGhlc3Rlcmlvbi48Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7Ou+G9t868zr3OtzwvZm9yZWlnbj7vvIkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkFudGhlc3RlcmlvbiBjb3JyZXNwb25kcyB0byB0aGUgbGF0dGVyIGhhbGYgb2YgRmVicnVhcnkgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwcmlvciBoYWxmIG9mIE1hcmNoLiBJdCB3YXMgaW4gdGhpcyBtb250aCB0aGF0IHRoZSBGZWFzdCBvZiBGbG93ZXJzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImdyZWVrIj7PhOG9sCDhvIjOvc64zrXPg8+E4b21z4HOuc6xPC9mb3JlaWduPu+8iQogICAgICAgICAgICAgICAgICAgICAgICB3YXMgY2VsZWJyYXRlZCBpbiBob25vciBvZiBEaW9ueXN1cy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+z4ThvbAg4byIzr3OuM61z4PPhOG9tc+BzrnOsTwvZm9yZWlnbj7vvIkKICAgICAgICAgICAgICAgICAgICAgICAgd2FzIGNlbGVicmF0ZWQgaW4gaG9ub3Igb2YgRGlvbnlzdXMuPC90cmFuc2xhdGlvbj4="
translation['59.speaker.77'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3NyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBzYWNyZWQgYW5kIGhvbHkgcml0ZXMgZm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGNlbGVicmF0aW9uIG9mIHdoaWNoIHlvdXIgYW5jZXN0b3JzIHByb3ZpZGVkIHNvIHdlbGwgYW5kIHNvIG1hZ25pZmljZW50bHksIGl0IGlzCiAgICAgICAgICAgICAgICAgICAgeW91ciBkdXR5LCBtZW4gb2YgQXRoZW5zLCB0byBtYWludGFpbiB3aXRoIGRldm90aW9uLCBhbmQgbGlrZXdpc2UgdG8gcHVuaXNoCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGluc29sZW50bHkgZGVmeSB5b3VyIGxhd3MgYW5kIGhhdmUgYmVlbiBndWlsdHkgb2Ygc2hhbWVsZXNzIGltcGlldHkKICAgICAgICAgICAgICAgICAgICB0b3dhcmQgdGhlIGdvZHM7IGFuZCB0aGlzIGZvciB0d28gcmVhc29uczogZmlyc3QsIHRoYXQgdGhleSBtYXkgcGF5IHRoZSBwZW5hbHR5CiAgICAgICAgICAgICAgICAgICAgZm9yIHRoZWlyIGNyaW1lczsgYW5kLCBzZWNvbmRseSwgdGhhdCBvdGhlcnMgbWF5IHRha2Ugd2FybmluZywgYW5kIG1heSBmZWFyIHRvCiAgICAgICAgICAgICAgICAgICAgY29tbWl0IGFueSBzaW4gYWdhaW5zdCB0aGUgZ29kcyBhbmQgYWdhaW5zdCB0aGUgc3RhdGUuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.78'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdyB0byBjYWxsIGJlZm9yZSB5b3UKICAgICAgICAgICAgICAgICAgICB0aGUgc2FjcmVkIGhlcmFsZCB3aG8gd2FpdHMgdXBvbiB0aGUgd2lmZSBvZiB0aGUga2luZywgd2hlbiBzaGUgYWRtaW5pc3RlcnMgdGhlCiAgICAgICAgICAgICAgICAgICAgb2F0aCB0byB0aGUgdmVuZXJhYmxlIHByaWVzdGVzc2VzIGFzIHRoZXkgY2FycnkgdGhlaXIgYmFza2V0czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgYmFza2V0cyBjb250YWluZWQgdGhlIHNhbHQgbWVhbCB3aGljaCB3YXMgc3ByaW5rbGVkIHVwb24KICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGhlYWRzIG9mIHRoZSB2aWN0aW1zLjwvbm90ZT4gaW4gZnJvbnQgb2YgdGhlIGFsdGFyIGJlZm9yZSB0aGV5IHRvdWNoIHRoZQogICAgICAgICAgICAgICAgICAgIHZpY3RpbXMsIGluIG9yZGVyIHRoYXQgeW91IG1heSBoZWFyIHRoZSBvYXRoIGFuZCB0aGUgd29yZHMgdGhhdCBhcmUgcHJvbm91bmNlZCwKICAgICAgICAgICAgICAgICAgICBhdCBsZWFzdCBhcyBmYXIgYXMgaXQgaXMgcGVybWl0dGVkIHlvdSB0byBoZWFyIHRoZW07IGFuZCB0aGF0IHlvdSBtYXkgdW5kZXJzdGFuZAogICAgICAgICAgICAgICAgICAgIGhvdyBhdWd1c3QgYW5kIGhvbHkgYW5kIGFuY2llbnQgdGhlIHJpdGVzIGFyZS48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJPYXRoIG9mIHRoZSBWZW5lcmFibGUgUHJpZXN0ZXNzZXMiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9hdGggb2YgdGhlIFZlbmVyYWJsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJpZXN0ZXNzZXM8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5JIGxpdmUgYSBob2x5IGxpZmUgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGFtIHB1cmUgYW5kIHVuc3RhaW5lZCBieSBhbGwgZWxzZSB0aGF0IHBvbGx1dGVzIGFuZCBieSBjb21tZXJjZSB3aXRoIG1hbiwKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIEkgd2lsbCBjZWxlYnJhdGUgdGhlIGZlYXN0IG9mIHRoZSB3aW5lIGdvZCBhbmQgdGhlIElvYmFjY2hpYyBmZWFzdDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVzZSBmZXN0aXZhbHMgZGVyaXZlZCB0aGVpciBuYW1lcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcGl0aGV0cyBhcHBsaWVkIHRvIHRoZSBHb2QsIGFuZCBiZWxvbmdlZCB0byB0aGUgYW5jaWVudCB3b3JzaGlwIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEaW9ueXN1cy48L25vdGU+IGluIGhvbm9yIG9mIERpb255c3VzIGluIGFjY29yZGFuY2Ugd2l0aCBjdXN0b20gYW5kIGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhcHBvaW50ZWQgdGltZXMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PYXRoIG9mIHRoZSBWZW5lcmFibGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByaWVzdGVzc2VzPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSBsaXZlIGEgaG9seSBsaWZlIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBhbSBwdXJlIGFuZCB1bnN0YWluZWQgYnkgYWxsIGVsc2UgdGhhdCBwb2xsdXRlcyBhbmQgYnkgY29tbWVyY2Ugd2l0aCBtYW4sCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBJIHdpbGwgY2VsZWJyYXRlIHRoZSBmZWFzdCBvZiB0aGUgd2luZSBnb2QgYW5kIHRoZSBJb2JhY2NoaWMgZmVhc3Q8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlc2UgZmVzdGl2YWxzIGRlcml2ZWQgdGhlaXIgbmFtZXMgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXBpdGhldHMgYXBwbGllZCB0byB0aGUgR29kLCBhbmQgYmVsb25nZWQgdG8gdGhlIGFuY2llbnQgd29yc2hpcCBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlvbnlzdXMuPC9ub3RlPiBpbiBob25vciBvZiBEaW9ueXN1cyBpbiBhY2NvcmRhbmNlIHdpdGggY3VzdG9tIGFuZCBhdAogICAgICAgICAgICAgICAgICAgICAgICB0aGUgYXBwb2ludGVkIHRpbWVzLjwvdHJhbnNsYXRpb24+"
translation['59.speaker.79'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3OSIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+WW91IGhhdmUgaGVhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgb2F0aCBhbmQgdGhlIGFjY2VwdGVkIHJpdGVzIGhhbmRlZCBkb3duIGJ5IG91ciBmYXRoZXJzLCBhcyBmYXIgYXMgaXQgaXMKICAgICAgICAgICAgICAgICAgICBwZXJtaXR0ZWQgdG8gc3BlYWsgb2YgdGhlbSwgYW5kIGhvdyB0aGlzIHdvbWFuLCB3aG9tIFN0ZXBoYW51cyBiZXRyb3RoZWQgdG8KICAgICAgICAgICAgICAgICAgICBUaGVvZ2VuZXMgd2hlbiB0aGUgbGF0dGVyIHdhcyBraW5nLCBhcyBoaXMgb3duIGRhdWdodGVyLCBwZXJmb3JtZWQgdGhlc2Ugcml0ZXMsCiAgICAgICAgICAgICAgICAgICAgYW5kIGFkbWluaXN0ZXJlZCB0aGUgb2F0aCB0byB0aGUgdmVuZXJhYmxlIHByaWVzdGVzc2VzOyBhbmQgeW91IGtub3cgdGhhdCBldmVuCiAgICAgICAgICAgICAgICAgICAgdGhlIHdvbWVuIHdobyBiZWhvbGQgdGhlc2Ugcml0ZXMgYXJlIG5vdCBwZXJtaXR0ZWQgdG8gc3BlYWsgb2YgdGhlbSB0byBhbnlvbmUKICAgICAgICAgICAgICAgICAgICBlbHNlLiBMZXQgbWUgbm93IGJyaW5nIGJlZm9yZSB5b3UgYSBwaWVjZSBvZiBldmlkZW5jZSB3aGljaCB3YXMsIHRvIGJlIHN1cmUsCiAgICAgICAgICAgICAgICAgICAgZ2l2ZW4gaW4gc2VjcmV0LCBidXQgd2hpY2ggSSBzaGFsbCBzaG93IGJ5IHRoZSBmYWN0cyB0aGVtc2VsdmVzIHRvIGJlIGNsZWFyIGFuZAogICAgICAgICAgICAgICAgICAgIHRydWUuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.80'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+V2hlbgogICAgICAgICAgICAgICAgICAgIHRoZXNlIHJpdGVzIGhhZCBiZWVuIHNvbGVtbml6ZWQgYW5kIHRoZSBuaW5lIGFyY2hvbnMgaGFkIGdvbmUgdXAgb24gdGhlCiAgICAgICAgICAgICAgICAgICAgQXJlb3BhZ3VzIG9uIHRoZSBhcHBvaW50ZWQgZGF5cywgdGhlIGNvdW5jaWwgb2YgdGhlIEFyZW9wYWd1cywgd2hpY2ggaW4gb3RoZXIKICAgICAgICAgICAgICAgICAgICBtYXR0ZXJzIGFsc28gaXMgb2YgaGlnaCB3b3J0aCB0byB0aGUgY2l0eSBpbiB3aGF0IHBlcnRhaW5zIHRvIHBpZXR5LCBmb3J0aHdpdGgKICAgICAgICAgICAgICAgICAgICB1bmRlcnRvb2sgYW4gaW5xdWlyeSBhcyB0byB3aG8gdGhpcyB3aWZlIG9mIFRoZW9nZW5lcyB3YXMgYW5kIGVzdGFibGlzaGVkIHRoZQogICAgICAgICAgICAgICAgICAgIHRydXRoOyBhbmQgYmVpbmcgZGVlcGx5IGNvbmNlcm5lZCBmb3IgdGhlIHNhbmN0aXR5IG9mIHRoZSByaXRlcywgdGhlIGNvdW5jaWwgd2FzCiAgICAgICAgICAgICAgICAgICAgZm9yIGltcG9zaW5nIHVwb24gVGhlb2dlbmVzIHRoZSBoaWdoZXN0IGZpbmUgaW4gaXRzIHBvd2VyLCBidXQgaW4gc2VjcmV0IGFuZAogICAgICAgICAgICAgICAgICAgIHdpdGggZHVlIHJlZ2FyZCBmb3IgYXBwZWFyYW5jZXM7IGZvciB0aGV5IGhhdmUgbm90IHRoZSBwb3dlciB0byBwdW5pc2ggYW55IG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIEF0aGVuaWFucyBhcyB0aGV5IHNlZSBmaXQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.81'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MSIgdW5pdD0ic2VjdGlvbiIgLz5Db25mZXJlbmNlcwogICAgICAgICAgICAgICAgICAgIHdlcmUgaGVsZCwgYW5kLCBzZWVpbmcgdGhhdCB0aGUgY291bmNpbCBvZiB0aGUgQXJlb3BhZ3VzIHdhcyBkZWVwbHkgaW5jZW5zZWQgYW5kCiAgICAgICAgICAgICAgICAgICAgd2FzIGRpc3Bvc2VkIHRvIGZpbmUgVGhlb2dlbmVzIGZvciBoYXZpbmcgbWFycmllZCBhIHdpZmUgb2Ygc3VjaCBjaGFyYWN0ZXIgYW5kCiAgICAgICAgICAgICAgICAgICAgaGF2aW5nIHBlcm1pdHRlZCBoZXIgdG8gYWRtaW5pc3RlciBvbiB0aGUgY2l0eSdzIGJlaGFsZiB0aGUgcml0ZXMgdGhhdCBub25lIG1heQogICAgICAgICAgICAgICAgICAgIG5hbWUsIFRoZW9nZW5lcyBiZXNvdWdodCB0aGVtIHdpdGggcHJheWVycyBhbmQgZW50cmVhdGllcywgZGVjbGFyaW5nIHRoYXQgaGUgZGlkCiAgICAgICAgICAgICAgICAgICAgbm90IGtub3cgdGhhdCBzaGUgd2FzIHRoZSBkYXVnaHRlciBvZiBOZWFlcmEsIGJ1dCB0aGF0IGhlIGhhZCBiZWVuIGRlY2VpdmVkIGJ5CiAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzLCBhbmQgaGFkIG1hcnJpZWQgaGVyIGFjY29yZGluZyB0byBsYXcgYXMgYmVpbmcgdGhlIGxhdHRlcidzIGxlZ2l0aW1hdGUKICAgICAgICAgICAgICAgICAgICBkYXVnaHRlcjsgYW5kIHRoYXQgaXQgd2FzIGJlY2F1c2Ugb2YgaGlzIG93biBpbmV4cGVyaWVuY2UgaW4gYWZmYWlycyBhbmQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3VpbGVsZXNzbmVzcyBvZiBoaXMgY2hhcmFjdGVyIHRoYXQgaGUgaGFkIG1hZGUgU3RlcGhhbnVzIGhpcyBhc3Nlc3NvciB0byBhdHRlbmQKICAgICAgICAgICAgICAgICAgICB0byB0aGUgYnVzaW5lc3Mgb2YgaGlzIG9mZmljZTsgZm9yIGhlIGNvbnNpZGVyZWQgaGltIGEgZnJpZW5kLCBhbmQgb24gdGhhdAogICAgICAgICAgICAgICAgICAgIGFjY291bnQgaGFkIGJlY29tZSBoaXMgc29uLWluLWxhdy4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.82'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MiIgdW5pdD0ic2VjdGlvbiIgLz7igJxBbmQs4oCdIGhlIHNhaWQsIOKAnEkgd2lsbCBzaG93IHlvdSBieSBhIGNvbnZpbmNpbmcKICAgICAgICAgICAgICAgICAgICBhbmQgbWFuaWZlc3QgcHJvb2YgdGhhdCBJIGFtIHRlbGxpbmcgdGhlIHRydXRoLiBJIHdpbGwgc2VuZCB0aGUgd29tYW4gYXdheSBmcm9tCiAgICAgICAgICAgICAgICAgICAgbXkgaG91c2UsIHNpbmNlIHNoZSBpcyB0aGUgZGF1Z2h0ZXIsIG5vdCBvZiBTdGVwaGFudXMsIGJ1dCBvZiBOZWFlcmEuIElmIEkgZG8KICAgICAgICAgICAgICAgICAgICB0aGlzLCB0aGVuIGxldCBteSBzdGF0ZW1lbnQgdGhhdCBJIHdhcyBkZWNlaXZlZCBiZSBhY2NlcHRlZCBhcyB0cnVlOyBidXQsIGlmIEkKICAgICAgICAgICAgICAgICAgICBmYWlsIHRvIGRvIGl0LCB0aGVuIHB1bmlzaCBtZSBhcyBhIHZpbGUgZmVsbG93IHdobyBpcyBndWlsdHkgb2YgaW1waWV0eSB0b3dhcmQKICAgICAgICAgICAgICAgICAgICB0aGUgZ29kcy7igJ0gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.83'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4MyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFRoZW9nZW5lcyBoYWQgbWFkZQogICAgICAgICAgICAgICAgICAgIHRoaXMgcHJvbWlzZSBhbmQgdGhpcyBwbGVhLCB0aGUgY291bmNpbCBvZiB0aGUgQXJlb3BhZ3VzLCB0aHJvdWdoIGNvbXBhc3Npb24KICAgICAgICAgICAgICAgICAgICBhbHNvIGZvciB0aGUgZ3VpbGVsZXNzbmVzcyBvZiBoaXMgY2hhcmFjdGVyIGFuZCBpbiB0aGUgYmVsaWVmIHRoYXQgaGUgaGFkIHJlYWxseQogICAgICAgICAgICAgICAgICAgIGJlZW4gZGVjZWl2ZWQgYnkgU3RlcGhhbnVzLCByZWZyYWluZWQgZnJvbSBhY3Rpb24uIEFuZCBUaGVvZ2VuZXMgaW1tZWRpYXRlbHkgb24KICAgICAgICAgICAgICAgICAgICBjb21pbmcgZG93biBmcm9tIHRoZSBBcmVvcGFndXMgY2FzdCBvdXQgb2YgaGlzIGhvdXNlIHRoZSB3b21hbiwgdGhlIGRhdWdodGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhpcyBOZWFlcmEsIGFuZCBleHBlbGxlZCB0aGlzIG1hbiBTdGVwaGFudXMsIHdobyBoYWQgZGVjZWl2ZWQgaGltLCBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIGJvYXJkIG9mIG1hZ2lzdHJhdGVzLiBUaHVzIGl0IHdhcyB0aGF0IHRoZSBtZW1iZXJzIG9mIHRoZSBBcmVvcGFndXMgZGVzaXN0ZWQKICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZWlyIGFjdGlvbiBhZ2FpbnN0IFRoZW9nZW5lcyBhbmQgZnJvbSB0aGVpciBhbmdlciBhZ2FpbnN0IGhpbTsgZm9yIHRoZXkKICAgICAgICAgICAgICAgICAgICBmb3JnYXZlIGhpbSwgYmVjYXVzZSBoZSBoYWQgYmVlbiBkZWNlaXZlZC4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.84'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VG8gcHJvdmUgdGhlIHRydXRoIG9mIHRoZXNlIHN0YXRlbWVudHMgb2YKICAgICAgICAgICAgICAgICAgICBtaW5lLCBJIHdpbGwgY2FsbCBiZWZvcmUgeW91IGFzIHdpdG5lc3MgdG8gdGhlc2UgZmFjdHMgVGhlb2dlbmVzIGhpbXNlbGYsIGFuZAogICAgICAgICAgICAgICAgICAgIHdpbGwgY29tcGVsIGhpbSB0byB0ZXN0aWZ5LjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5DYWxsLCBwbGVhc2UsCiAgICAgICAgICAgICAgICAgICAgVGhlb2dlbmVzIG9mIEVyY2hpYS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+RXJjaGlhLCBhIGRlbWUgb2YgdGhlIHRyaWJlCiAgICAgICAgICAgICAgICAgICAgICAgIEFlZ2XDr3M7IGJ1dCBzZWUgbm90ZSA8ZW1waCBjbGFzcz0idHJhbnNsYXRpb24iPmE8L2VtcGg+IG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTkuNzIiIHZhbGlkPSJ5ZXMiPkRlbS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU5LjcyPC9iaWJsPi48L25vdGU+PGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hPC9lbXBoPiBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDU5LjcyIiB2YWxpZD0ieWVzIj5EZW0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1OS43MjwvYmlibD4uPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRoZW9nZW5lcyBvZgogICAgICAgICAgICAgICAgICAgICAgICBFcmNoaWEgZGVwb3NlcyB0aGF0IHdoZW4gaGUgd2FzIGtpbmcgaGUgbWFycmllZCBQaGFubywgYmVsaWV2aW5nIGhlciB0byBiZQogICAgICAgICAgICAgICAgICAgICAgICB0aGUgZGF1Z2h0ZXIgb2YgU3RlcGhhbnVzLCBhbmQgdGhhdCwgd2hlbiBoZSBmb3VuZCBoZSBoYWQgYmVlbiBkZWNlaXZlZCwgaGUKICAgICAgICAgICAgICAgICAgICAgICAgY2FzdCB0aGUgd29tYW4gYXdheSBhbmQgY2Vhc2VkIHRvIGxpdmUgd2l0aCBoZXIsIGFuZCB0aGF0IGhlIGV4cGVsbGVkCiAgICAgICAgICAgICAgICAgICAgICAgIFN0ZXBoYW51cyBmcm9tIGhpcyBwb3N0IG9mIGFzc2Vzc29yLCBhbmQgbm8gbG9uZ2VyIGFsbG93ZWQgaGltIHRvIHNlcnZlIGluCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgY2FwYWNpdHkuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlb2dlbmVzIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEVyY2hpYSBkZXBvc2VzIHRoYXQgd2hlbiBoZSB3YXMga2luZyBoZSBtYXJyaWVkIFBoYW5vLCBiZWxpZXZpbmcgaGVyIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkYXVnaHRlciBvZiBTdGVwaGFudXMsIGFuZCB0aGF0LCB3aGVuIGhlIGZvdW5kIGhlIGhhZCBiZWVuIGRlY2VpdmVkLCBoZQogICAgICAgICAgICAgICAgICAgICAgICBjYXN0IHRoZSB3b21hbiBhd2F5IGFuZCBjZWFzZWQgdG8gbGl2ZSB3aXRoIGhlciwgYW5kIHRoYXQgaGUgZXhwZWxsZWQKICAgICAgICAgICAgICAgICAgICAgICAgU3RlcGhhbnVzIGZyb20gaGlzIHBvc3Qgb2YgYXNzZXNzb3IsIGFuZCBubyBsb25nZXIgYWxsb3dlZCBoaW0gdG8gc2VydmUgaW4KICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBjYXBhY2l0eS48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.85'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGFrZSwgcGxlYXNlLCB0aGUgbGF3IGJlYXJpbmcgdXBvbiB0aGVzZQogICAgICAgICAgICAgICAgICAgIG1hdHRlcnMsIGFuZCByZWFkIGl0OyBmb3IgSSB3b3VsZCBoYXZlIHlvdSBrbm93IHRoYXQgYSB3b21hbiBvZiBoZXIgY2hhcmFjdGVyLAogICAgICAgICAgICAgICAgICAgIHdobyBoYXMgZG9uZSB3aGF0IHNoZSBoYXMgZG9uZSwgb3VnaHQgbm90IG9ubHkgdG8gaGF2ZSBrZXB0IGFsb29mIGZyb20gdGhlc2UKICAgICAgICAgICAgICAgICAgICBzYWNyZWQgcml0ZXMsIHRvIGhhdmUgYWJzdGFpbmVkIGZyb20gYmVob2xkaW5nIHRoZW0sIGZyb20gb2ZmZXJpbmcgc2FjcmlmaWNlcywKICAgICAgICAgICAgICAgICAgICBhbmQgZnJvbSBwZXJmb3JtaW5nIG9uIHRoZSBjaXR5J3MgYmVoYWxmIGFueSBvZiB0aGUgYW5jZXN0cmFsIHJpdGVzIHdoaWNoIHVzYWdlCiAgICAgICAgICAgICAgICAgICAgZGVtYW5kcywgYnV0IHRoYXQgc2hlIHNob3VsZCBoYXZlIGJlZW4gZXhjbHVkZWQgYWxzbyBmcm9tIGFsbCBvdGhlciByZWxpZ2lvdXMKICAgICAgICAgICAgICAgICAgICBjZXJlbW9uaWFscyBpbiBBdGhlbnMuIEZvciBhIHdvbWFuIHdobyBoYXMgYmVlbiB0YWtlbiBpbiBhZHVsdGVyeSBpcyBub3QKICAgICAgICAgICAgICAgICAgICBwZXJtaXR0ZWQgdG8gYXR0ZW5kIGFueSBvZiB0aGUgcHVibGljIHNhY3JpZmljZXMsIGFsdGhvdWdoIHRoZSBsYXdzIGhhdmUgZ2l2ZW4KICAgICAgICAgICAgICAgICAgICBib3RoIHRvIHRoZSBhbGllbiB3b21hbiBhbmQgdGhlIHNsYXZlIHRoZSByaWdodCB0byBhdHRlbmQgdGhlc2UsIHdoZXRoZXIgdG8gdmlldwogICAgICAgICAgICAgICAgICAgIHRoZSBzcGVjdGFjbGUgb3IgdG8gb2ZmZXIgcHJheWVyLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.86'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NiIgdW5pdD0ic2VjdGlvbiIgLz5ObzsgaXQgaXMgdG8KICAgICAgICAgICAgICAgICAgICB0aGVzZSB3b21lbiBhbG9uZSB0aGF0IHRoZSBsYXcgZGVuaWVzIGVudHJhbmNlIHRvIG91ciBwdWJsaWMgc2FjcmlmaWNlcywgdG8KICAgICAgICAgICAgICAgICAgICB0aGVzZSwgSSBtZWFuLCB3aG8gaGF2ZSBiZWVuIHRha2VuIGluIGFkdWx0ZXJ5OyBhbmQgaWYgdGhleSBkbyBhdHRlbmQgdGhlbSBhbmQKICAgICAgICAgICAgICAgICAgICBkZWZ5IHRoZSBsYXcsIGFueSBwZXJzb24gd2hhdHNvZXZlciBtYXkgYXQgd2lsbCBpbmZsaWN0IHVwb24gdGhlbSBhbnkgc29ydCBvZgogICAgICAgICAgICAgICAgICAgIHB1bmlzaG1lbnQsIHNhdmUgb25seSBkZWF0aCwgYW5kIHRoYXQgd2l0aCBpbXB1bml0eTsgYW5kIHRoZSBsYXcgaGFzIGdpdmVuIHRoZQogICAgICAgICAgICAgICAgICAgIHJpZ2h0IG9mIHB1bmlzaGluZyB0aGVzZSB3b21lbiB0byBhbnkgcGVyc29uIHdobyBoYXBwZW5zIHRvIG1lZXQgd2l0aCB0aGVtLiBJdAogICAgICAgICAgICAgICAgICAgIGlzIGZvciB0aGlzIHJlYXNvbiB0aGF0IHRoZSBsYXcgaGFzIGRlY2xhcmVkIHRoYXQgc3VjaCBhIHdvbWFuIG1heSBzdWZmZXIgYW55CiAgICAgICAgICAgICAgICAgICAgb3V0cmFnZSBzaG9ydCBvZiBkZWF0aCB3aXRob3V0IHRoZSByaWdodCBvZiBzZWVraW5nIHJlZHJlc3MgYmVmb3JlIGFueSB0cmlidW5hbAogICAgICAgICAgICAgICAgICAgIHdoYXRzb2V2ZXIsIHRoYXQgb3VyIHNhbmN0dWFyaWVzIG1heSBiZSBrZXB0IGZyZWUgZnJvbSBhbGwgcG9sbHV0aW9uIGFuZAogICAgICAgICAgICAgICAgICAgIHByb2ZhbmF0aW9uLCBhbmQgdGhhdCBvdXIgd29tZW4gbWF5IGJlIGluc3BpcmVkIHdpdGggYSBmZWFyIHN1ZmZpY2llbnQgdG8gbWFrZQogICAgICAgICAgICAgICAgICAgIHRoZW0gbGl2ZSBzb2Jlcmx5LCBhbmQgYXZvaWQgYWxsIHZpY2UsIGFuZCwgYXMgdGhlaXIgZHV0eSBpcywgdG8ga2VlcCB0byB0aGVpcgogICAgICAgICAgICAgICAgICAgIGhvdXNlaG9sZCB0YXNrcy4gRm9yIGl0IHRlYWNoZXMgdGhlbSB0aGF0LCBpZiBhIHdvbWFuIGlzIGd1aWx0eSBvZiBhbnkgc3VjaCBzaW4sCiAgICAgICAgICAgICAgICAgICAgc2hlIHdpbGwgYmUgYW4gb3V0Y2FzdCBmcm9tIGhlciBodXNiYW5kJ3MgaG9tZSBhbmQgZnJvbSB0aGUgc2FuY3R1YXJpZXMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgY2l0eS4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.87'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4NyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGlzCiAgICAgICAgICAgICAgICAgICAgaXMgc28sIHlvdSB3aWxsIHNlZSBjbGVhcmx5LCB3aGVuIHlvdSBoYXZlIGhlYXJkIHRoZSBsYXcgcmVhZC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZSBpdCBwbGVhc2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iTGF3IFJlZ2FyZGluZyBBZHVsdGVyeSI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGF3IFJlZ2FyZGluZyBBZHVsdGVyeTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPldoZW4gaGUgaGFzIGNhdWdodCB0aGUgYWR1bHRlcmVyLCBpdCBzaGFsbCBub3QgYmUgbGF3ZnVsIGZvciB0aGUgb25lIHdobwogICAgICAgICAgICAgICAgICAgICAgICBoYXMgY2F1Z2h0IGhpbSB0byBjb250aW51ZSBsaXZpbmcgd2l0aCBoaXMgd2lmZSwgYW5kIGlmIGhlIGRvZXMgc28sIGhlIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGxvc2UgaGlzIGNpdmljIHJpZ2h0cyBhbmQgaXQgc2hhbGwgbm90IGJlIGxhd2Z1bCBmb3IgdGhlIHdvbWFuIHdobyBpcyB0YWtlbgogICAgICAgICAgICAgICAgICAgICAgICBpbiBhZHVsdGVyeSB0byBhdHRlbmQgcHVibGljIHNhY3JpZmljZXM7IGFuZCBpZiBzaGUgZG9lcyBhdHRlbmQgdGhlbSwgc2hlCiAgICAgICAgICAgICAgICAgICAgICAgIG1heSBiZSBtYWRlIHRvIHN1ZmZlciBhbnkgcHVuaXNobWVudCB3aGF0c29ldmVyLCBzaG9ydCBvZiBkZWF0aCwgYW5kIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBpbXB1bml0eS48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkxhdyBSZWdhcmRpbmcgQWR1bHRlcnk8L3RpdGxlPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5XaGVuIGhlIGhhcyBjYXVnaHQgdGhlIGFkdWx0ZXJlciwgaXQgc2hhbGwgbm90IGJlIGxhd2Z1bCBmb3IgdGhlIG9uZSB3aG8KICAgICAgICAgICAgICAgICAgICAgICAgaGFzIGNhdWdodCBoaW0gdG8gY29udGludWUgbGl2aW5nIHdpdGggaGlzIHdpZmUsIGFuZCBpZiBoZSBkb2VzIHNvLCBoZSBzaGFsbAogICAgICAgICAgICAgICAgICAgICAgICBsb3NlIGhpcyBjaXZpYyByaWdodHMgYW5kIGl0IHNoYWxsIG5vdCBiZSBsYXdmdWwgZm9yIHRoZSB3b21hbiB3aG8gaXMgdGFrZW4KICAgICAgICAgICAgICAgICAgICAgICAgaW4gYWR1bHRlcnkgdG8gYXR0ZW5kIHB1YmxpYyBzYWNyaWZpY2VzOyBhbmQgaWYgc2hlIGRvZXMgYXR0ZW5kIHRoZW0sIHNoZQogICAgICAgICAgICAgICAgICAgICAgICBtYXkgYmUgbWFkZSB0byBzdWZmZXIgYW55IHB1bmlzaG1lbnQgd2hhdHNvZXZlciwgc2hvcnQgb2YgZGVhdGgsIGFuZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggaW1wdW5pdHkuPC90cmFuc2xhdGlvbj4="
translation['59.speaker.88'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SSB3aXNoIG5vdywgbWVuCiAgICAgICAgICAgICAgICAgICAgb2YgQXRoZW5zLCB0byBicmluZyBiZWZvcmUgeW91IHRoZSB0ZXN0aW1vbnkgYWxzbyBvZiB0aGUgQXRoZW5pYW4gY2l2aWMgYm9keSwgdG8KICAgICAgICAgICAgICAgICAgICBzaG93IHlvdSBob3cgZ3JlYXQgY2FyZSB0aGV5IHRha2UgaW4gcmVnYXJkIHRvIHRoZXNlIHJlbGlnaW91cyByaXRlcy4gRm9yIHRoZQogICAgICAgICAgICAgICAgICAgIGNpdmljIGJvZHkgb2YgQXRoZW5zLCBhbHRob3VnaCBpdCBoYXMgc3VwcmVtZSBhdXRob3JpdHkgb3ZlciBhbGwgdGhpbmdzIGluIHRoZQogICAgICAgICAgICAgICAgICAgIHN0YXRlLCBhbmQgaXQgaXMgaW4gaXRzIHBvd2VyIHRvIGRvIHdoYXRzb2V2ZXIgaXQgcGxlYXNlcywgeWV0IHJlZ2FyZGVkIHRoZSBnaWZ0CiAgICAgICAgICAgICAgICAgICAgb2YgQXRoZW5pYW4gY2l0aXplbnNoaXAgYXMgc28gaG9ub3JhYmxlIGFuZCBzbyBzYWNyZWQgYSB0aGluZyB0aGF0IGl0IGVuYWN0ZWQgaW4KICAgICAgICAgICAgICAgICAgICBpdHMgb3duIHJlc3RyYWludCBsYXdzIHRvIHdoaWNoIGl0IG11c3QgY29uZm9ybSwgd2hlbiBpdCB3aXNoZXMgdG8gY3JlYXRlIGEKICAgICAgICAgICAgICAgICAgICBjaXRpemVu4oCUbGF3cyB3aGljaCBub3cgaGF2ZSBiZWVuIGRyYWdnZWQgdGhyb3VnaCB0aGUgbWlyZSBieSBTdGVwaGFudXMKICAgICAgICAgICAgICAgICAgICBhbmQgdGhvc2Ugd2hvIGNvbnRyYWN0IG1hcnJpYWdlcyBvZiB0aGlzIHNvcnQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.89'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4OSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB5b3Ugd2lsbCBiZSB0aGUgYmV0dGVyIGZvciBoZWFyaW5nIHRoZW0sIGFuZCB5b3Ugd2lsbCBrbm93IHRoYXQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBwZW9wbGUgaGF2ZSBkZWJhc2VkIHRoZSBtb3N0IGhvbm9yYWJsZSBhbmQgdGhlIG1vc3Qgc2FjcmVkIGdpZnRzLCB3aGljaCBhcmUKICAgICAgICAgICAgICAgICAgICBncmFudGVkIHRvIHRoZSBiZW5lZmFjdG9ycyBvZiB0aGUgc3RhdGUuPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkluIHRoZQogICAgICAgICAgICAgICAgICAgIGZpcnN0IHBsYWNlLCB0aGVyZSBpcyBhIGxhdyBpbXBvc2VkIHVwb24gdGhlIHBlb3BsZSBmb3JiaWRkaW5nIHRoZW0gdG8gYmVzdG93CiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gY2l0aXplbnNoaXAgdXBvbiBhbnkgbWFuIHdobyBkb2VzIG5vdCBkZXNlcnZlIGl0IGJlY2F1c2Ugb2YKICAgICAgICAgICAgICAgICAgICBkaXN0aW5ndWlzaGVkIHNlcnZpY2VzIHRvIHRoZSBBdGhlbmlhbiBwZW9wbGUuIEluIHRoZSBuZXh0IHBsYWNlLCB3aGVuIHRoZSBjaXZpYwogICAgICAgICAgICAgICAgICAgIGJvZHkgaGFzIGJlZW4gdGh1cyBjb252aW5jZWQgYW5kIGJlc3Rvd3MgdGhlIGdpZnQsIGl0IGRvZXMgbm90IHBlcm1pdCB0aGUKICAgICAgICAgICAgICAgICAgICBhZG9wdGlvbiB0byBiZWNvbWUgdmFsaWQsIHVubGVzcyBpbiB0aGUgbmV4dCBlbnN1aW5nIGFzc2VtYmx5IG1vcmUgdGhhbiBzaXgKICAgICAgICAgICAgICAgICAgICB0aG91c2FuZCBBdGhlbmlhbnMgY29uZmlybSBpdCBieSBhIHNlY3JldCBiYWxsb3QuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.90'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlIGxhdyByZXF1aXJlcyB0aGUgcHJlc2lkZW50czxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5TZWUgbm90ZSBhIG9uIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTkuNyIgdmFsaWQ9InllcyI+RGVtLiA1OS43PC9iaWJsPi48L25vdGU+IHRvCiAgICAgICAgICAgICAgICAgICAgc2V0IG91dCB0aGUgYmFsbG90Ym94ZXMgYW5kIHRvIGdpdmUgdGhlIGJhbGxvdHMgdG8gdGhlIHBlb3BsZSBhcyB0aGV5IGNvbWUgdXAKICAgICAgICAgICAgICAgICAgICBiZWZvcmUgdGhlIG5vbi1jaXRpemVucyBoYXZlIGNvbWUgaW4gYW5kIHRoZSBiYXJyaWVyczxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkRlbS4gNTkuNyIgdmFsaWQ9InllcyI+RGVtLiA1OS43PC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TW92YWJsZSBiYXJyaWVycyBzZXBhcmF0ZWQgdGhlIHNwZWN0YXRvcnMgZnJvbSB0aGUgdm90aW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG1lbWJlcnMgb2YgdGhlIGFzc2VtYmx5Ljwvbm90ZT4gaGF2ZSBiZWVuIHJlbW92ZWQsIGluIG9yZGVyIHRoYXQgZXZlcnkgb25lCiAgICAgICAgICAgICAgICAgICAgb2YgdGhlIGNpdGl6ZW5zLCBiZWluZyBhYnNvbHV0ZWx5IGZyZWUgZnJvbSBpbnRlcmZlcmVuY2UsIG1heSBmb3JtIGhpcyBvd24KICAgICAgICAgICAgICAgICAgICBqdWRnZW1lbnQgcmVnYXJkaW5nIHRoZSBvbmUgd2hvbSBoZSBpcyBhYm91dCB0byBtYWtlIGEgY2l0aXplbiwgd2hldGhlciB0aGUgb25lCiAgICAgICAgICAgICAgICAgICAgYWJvdXQgdG8gYmUgc28gYWRvcHRlZCBpcyB3b3J0aHkgb2YgdGhlIGdpZnQuIEZ1cnRoZXJtb3JlLCBhZnRlciB0aGlzIHRoZSBsYXcKICAgICAgICAgICAgICAgICAgICBwZXJtaXRzIHRvIGFueSBBdGhlbmlhbiB3aG8gd2lzaGVzIHRvIHByZWZlciBpdCBhbiBpbmRpY3RtZW50IGZvciBpbGxlZ2FsaXR5CiAgICAgICAgICAgICAgICAgICAgYWdhaW5zdCB0aGUgY2FuZGlkYXRlLCBhbmQgaGUgbWF5IGNvbWUgaW50byBjb3VydCBhbmQgcHJvdmUgdGhhdCB0aGUgcGVyc29uIGluCiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb24gaXMgbm90IHdvcnRoeSBvZiB0aGUgZ2lmdCwgYnV0IGhhcyBiZWVuIG1hZGUgYSBjaXRpemVuIGNvbnRyYXJ5IHRvIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.91'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhlcmUgaGF2ZSBiZWVuIGNhc2VzIGVyZSBub3cgd2hlbiwKICAgICAgICAgICAgICAgICAgICBhZnRlciB0aGUgcGVvcGxlIGhhZCBiZXN0b3dlZCB0aGUgZ2lmdCwgZGVjZWl2ZWQgYnkgdGhlIGFyZ3VtZW50cyBvZiB0aG9zZSB3aG8KICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWQgaXQsIGFuZCBhbiBpbmRpY3RtZW50IGZvciBpbGxlZ2FsaXR5IGhhZCBiZWVuIHByZWZlcnJlZCBhbmQgYnJvdWdodAogICAgICAgICAgICAgICAgICAgIGludG8gY291cnQsIHRoZSByZXN1bHQgd2FzIHRoYXQgdGhlIHBlcnNvbiB3aG8gaGFkIHJlY2VpdmVkIHRoZSBnaWZ0IHdhcyBwcm92ZWQKICAgICAgICAgICAgICAgICAgICB0byBiZSB1bndvcnRoeSBvZiBpdCwgYW5kIHRoZSBjb3VydCB0b29rIGl0IGJhY2suIFRvIHJldmlldyB0aGUgbWFueSBjYXNlcyBpbgogICAgICAgICAgICAgICAgICAgIGFuY2llbnQgdGltZXMgd291bGQgYmUgYSBsb25nIHRhc2s7IEkgd2lsbCBtZW50aW9uIG9ubHkgdGhvc2Ugd2hpY2ggeW91IGFsbAogICAgICAgICAgICAgICAgICAgIHJlbWVtYmVyOiBQZWl0aG9sYXMgdGhlIFRoZXNzYWxpYW4sIGFuZCBBcG9sbG9uaWRlcyB0aGUgT2x5bnRoaWFuLCBhZnRlciBoYXZpbmcKICAgICAgICAgICAgICAgICAgICBiZWVuIG1hZGUgY2l0aXplbnMgYnkgdGhlIHBlb3BsZSwgd2VyZSBkZXByaXZlZCBvZiB0aGUgZ2lmdCBieSB0aGUgY291cnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.92'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBhcmUgbm90IGV2ZW50cyBvZiBsb25nIGFnbyBvZiB3aGljaAogICAgICAgICAgICAgICAgICAgIHlvdSBtaWdodCBiZSBpZ25vcmFudC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SG93ZXZlciwgYWx0aG91Z2ggdGhlIGxhd3MKICAgICAgICAgICAgICAgICAgICByZWdhcmRpbmcgY2l0aXplbnNoaXAgYW5kIHRoZSBzdGVwcyB0aGF0IG11c3QgYmUgdGFrZW4gYmVmb3JlIG9uZSBtYXkgYmVjb21lIGFuCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gYXJlIHNvIGFkbWlyYWJseSBhbmQgc28gc2VjdXJlbHkgZXN0YWJsaXNoZWQsIHRoZXJlIGlzIHlldCBhbm90aGVyIGxhdwogICAgICAgICAgICAgICAgICAgIHdoaWNoIGhhcyBiZWVuIGVuYWN0ZWQgaW4gYWRkaXRpb24gdG8gYWxsIHRoZXNlLCBhbmQgdGhpcyBsYXcgaXMgb2YgcGFyYW1vdW50CiAgICAgICAgICAgICAgICAgICAgdmFsaWRpdHk7IHN1Y2ggZ3JlYXQgcHJlY2F1dGlvbnMgaGF2ZSB0aGUgcGVvcGxlIHRha2VuIGluIHRoZSBpbnRlcmVzdCBvZgogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMgYW5kIG9mIHRoZSBnb2RzLCB0byB0aGUgZW5kIHRoYXQgdGhlIHNhY3JpZmljZXMgb24gdGhlIHN0YXRlJ3MgYmVoYWxmCiAgICAgICAgICAgICAgICAgICAgbWF5IGJlIG9mZmVyZWQgaW4gY29uZm9ybWl0eSB3aXRoIHJlbGlnaW91cyB1c2FnZS4gRm9yIGluIHRoZSBjYXNlIG9mIGFsbCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdob20gdGhlIEF0aGVuaWFuIHBlb3BsZSBtYXkgbWFrZSBjaXRpemVucywgdGhlIGxhdyBleHByZXNzbHkgZm9yYmlkcyB0aGF0IHRoZXkKICAgICAgICAgICAgICAgICAgICBzaG91bGQgYmUgZWxpZ2libGUgdG8gdGhlIG9mZmljZSBvZiB0aGUgbmluZSBhcmNob25zIG9yIHRvIGhvbGQgYW55IHByaWVzdGhvb2Q7CiAgICAgICAgICAgICAgICAgICAgYnV0IHRoZWlyIGRlc2NlbmRhbnRzIGFyZSBhbGxvd2VkIGJ5IHRoZSBwZW9wbGUgdG8gc2hhcmUgaW4gYWxsIGNpdmljIHJpZ2h0cywKICAgICAgICAgICAgICAgICAgICB0aG91Z2ggdGhlIHByb3Zpc28gaXMgYWRkZWQ6IGlmIHRoZXkgYXJlIGJvcm4gZnJvbSBhbiBBdGhlbmlhbiB3b21hbiB3aG8gd2FzCiAgICAgICAgICAgICAgICAgICAgYmV0cm90aGVkIGFjY29yZGluZyB0byB0aGUgbGF3LiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.93'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5MyIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhhdCB0aGVzZSBzdGF0ZW1lbnRzIG9mIG1pbmUgYXJlIHRydWUsIEkgd2lsbCBwcm92ZSB0bwogICAgICAgICAgICAgICAgICAgIHlvdSBieSB0aGUgY2xlYXJlc3QgYW5kIG1vc3QgY29udmluY2luZyB0ZXN0aW1vbnk7IGJ1dCBJIHdpc2ggZmlyc3QgdG8gZ28gYmFjawogICAgICAgICAgICAgICAgICAgIHRvIHRoZSBvcmlnaW5zIG9mIHRoZSBsYXcgYW5kIHRvIHNob3cgaG93IGl0IGNhbWUgdG8gYmUgZW5hY3RlZCBhbmQgd2hvIHRob3NlCiAgICAgICAgICAgICAgICAgICAgd2VyZSB3aG9tIGl0cyBwcm92aXNpb25zIGNvdmVyZWQgYXMgYmVpbmcgbWVuIG9mIHdvcnRoIHdobyBoYWQgc2hvd24gdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgIHN0YXVuY2ggZnJpZW5kcyB0byB0aGUgcGVvcGxlIG9mIEF0aGVucy4gRm9yIGZyb20gYWxsIHRoaXMgeW91IHdpbGwga25vdyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIHBlb3BsZSdzIGdpZnQgd2hpY2ggaXMgcmVzZXJ2ZWQgZm9yIGJlbmVmYWN0b3JzIGlzIGJlaW5nIGRyYWdnZWQgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBtaXJlLCBhbmQgaG93IGdyZWF0IHRoZSBwcml2aWxlZ2VzIGFyZSB3aGljaCBhcmUgYmVpbmcgdGFrZW4gZnJvbSB5b3VyIGNvbnRyb2wKICAgICAgICAgICAgICAgICAgICBieSB0aGlzIGZlbGxvdyBTdGVwaGFudXMgYW5kIHRob3NlIHdobyBoYXZlIG1hcnJpZWQgYW5kIGJlZ290dGVuIGNoaWxkcmVuIGluIHRoZQogICAgICAgICAgICAgICAgICAgIG1hbm5lciBmb2xsb3dlZCBieSBoaW0uIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.94'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NCIgdW5pdD0ic2VjdGlvbiIgLz48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGhlIFBsYXRhZWFucywgbWVuIG9mIEF0aGVucywgYWxvbmUgYW1vbmcgdGhlIEdyZWVrcyBjYW1lIHRvIHlvdXIKICAgICAgICAgICAgICAgICAgICBhaWQgYXQgTWFyYXRob248bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyB3YXMgaW4gPGRhdGUgYXV0aG5hbWU9Ii00OTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00OTAiPjQ5MDwvZGF0ZT4gQi5DLjwvbm90ZT4gd2hlbiBEYXRpcywgdGhlIGdlbmVyYWwgb2YgS2luZyBEYXJlaXVzLCBvbiBoaXMKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJvbSBFcmV0cmlhPGRhdGUgYXV0aG5hbWU9Ii00OTAiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00OTAiPjQ5MDwvZGF0ZT4gQi5DLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BIHRvd24gaW4gRXVib2VhIGFjcm9zcyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgc3RyYWl0IGZyb20gQXR0aWNhLjwvbm90ZT4gYWZ0ZXIgc3VianVnYXRpbmcgRXVib2VhLCBsYW5kZWQgb24gb3VyIGNvYXN0CiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGxhcmdlIGZvcmNlIGFuZCBwcm9jZWVkZWQgdG8gcmF2YWdlIHRoZSBjb3VudHJ5LiBBbmQgZXZlbiB0byB0aGlzIGRheSB0aGUKICAgICAgICAgICAgICAgICAgICBwaWN0dXJlIGluIHRoZSBQYWludGVkIFN0b2E8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+U2VlIG5vdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YTwvZW1waD4gb24gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRGVtLiA0NS4xNyIgdmFsaWQ9InllcyI+RGVtLiA0NS4xNzwvYmlibD4uPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIGV4aGliaXRzIHRoZSBtZW1vcmlhbCBvZiB0aGVpciB2YWxvcjsgZm9yIGVhY2ggbWFuIGlzIHBvcnRyYXllZCBoYXN0ZW5pbmcgdG8KICAgICAgICAgICAgICAgICAgICB5b3VyIGFpZCB3aXRoIGFsbCBzcGVlZOKAlHRoZXkgYXJlIHRoZSBiYW5kIHdlYXJpbmcgQm9lb3RpYW4gY2Fwcy4KICAgICAgICAgICAgICAgICAgICAgICAgPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5hPC9lbXBoPiBvbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJEZW0uIDQ1LjE3IiB2YWxpZD0ieWVzIj5EZW0uIDQ1LjE3PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.95'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYWdhaW4sIHdoZW4gWGVyeGVzIGNhbWUgYWdhaW5zdCBHcmVlY2UKICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIFRoZWJhbnMgd2VudCBvdmVyIHRvIHRoZSBzaWRlIG9mIHRoZSBNZWRlcywgdGhlIFBsYXRhZWFucyByZWZ1c2VkIHRvCiAgICAgICAgICAgICAgICAgICAgd2l0aGRyYXcgZnJvbSB0aGVpciBhbGxpYW5jZSB3aXRoIHVzLCBidXQsIHVuc3VwcG9ydGVkIGJ5IGFueSBvdGhlcnMgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgQm9lb3RpYW5zLCBoYWxmIG9mIHRoZW0gYXJyYXllZCB0aGVtc2VsdmVzIGluIFRoZXJtb3B5bGFlIGFnYWluc3QgdGhlIGFkdmFuY2luZwogICAgICAgICAgICAgICAgICAgIGJhcmJhcmlhbiB0b2dldGhlciB3aXRoIHRoZSBMYWNlZGFlbW9uaWFucyBhbmQgTGVvbmlkYXMsIGFuZCBwZXJpc2hlZCB3aXRoIHRoZW07CiAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSByZW1haW5kZXIgZW1iYXJrZWQgb24geW91ciB0cmlyZW1lcywgc2luY2UgdGhleSBoYWQgbm8gc2hpcHMgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBvd24sIGFuZCBmb3VnaHQgYWxvbmcgd2l0aCB5b3UgaW4gdGhlIG5hdmFsIGJhdHRsZXMgYXQgQXJ0ZW1pc2l1bTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BcnRlbWlzaXVuLCB0aGUgbm9ydGhlcm5tb3N0IHByb21vbm90b3J5IG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEV1Ym9lYS48L25vdGU+IGFuZCBhdCBTYWxhbWlzLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.96'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhleQogICAgICAgICAgICAgICAgICAgIGZvdWdodCB0b2dldGhlciB3aXRoIHlvdSBhbmQgdGhlIG90aGVycyB3aG8gd2VyZSBzZWVraW5nIHRvIHNhdmUgdGhlIGZyZWVkb20gb2YKICAgICAgICAgICAgICAgICAgICBHcmVlY2UgaW4gdGhlIGZpbmFsIGJhdHRsZSBhdCBQbGF0YWVhIGFnYWluc3QgTWFyZG9uaXVzLCB0aGUgS2luZydzIGdlbmVyYWwsIGFuZAogICAgICAgICAgICAgICAgICAgIGRlcG9zaXRlZCB0aGUgbGliZXJ0eSB0aHVzIHNlY3VyZWQgYXMgYSBjb21tb24gcHJpemUgZm9yIGFsbCB0aGUgR3JlZWtzLiBBbmQKICAgICAgICAgICAgICAgICAgICB3aGVuIFBhdXNhbmlhcywgdGhlIGtpbmcgb2YgdGhlIExhY2VkYWVtb25pYW5zLCBzb3VnaHQgdG8gcHV0IGFuIGluc3VsdCB1cG9uCiAgICAgICAgICAgICAgICAgICAgeW91LCBhbmQgd2FzIG5vdCBjb250ZW50IHRoYXQgdGhlIExhY2VkYWVtb25pYW5zIGhhZCBiZWVuIGhvbm9yZWQgYnkgdGhlIEdyZWVrcwogICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHN1cHJlbWUgY29tbWFuZCwgYW5kIHdoZW4geW91ciBjaXR5LCB3aGljaCBpbiByZWFsaXR5IGhhZCBiZWVuIHRoZQogICAgICAgICAgICAgICAgICAgIGxlYWRlciBpbiBzZWN1cmluZyBsaWJlcnR5IGZvciB0aGUgR3JlZWtzLCBmb3Jib3JlIHRvIHN0cml2ZSB3aXRoIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zIGFzIHJpdmFscyBmb3IgdGhlIGhvbm9yIHRocm91Z2ggZmVhciBvZiBhcm91c2luZyBqZWFsb3VzeSBhbW9uZwogICAgICAgICAgICAgICAgICAgIHRoZSBhbGxpZXM7IDwvdHJhbnNsYXRpb24+"
translation['59.speaker.97'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5NyIgdW5pdD0ic2VjdGlvbiIgLz5QYXVzYW5pYXMsIHRoZSBraW5nIG9mIHRoZQogICAgICAgICAgICAgICAgICAgIExhY2VkYWVtb25pYW5zLCBwdWZmZWQgdXAgYnkgdGhpcywgaW5zY3JpYmVkIGEgZGlzdGljaCB1cG9uIHRoZSB0cmlwb2QgYXQKICAgICAgICAgICAgICAgICAgICBEZWxwaGksIHdoaWNoIHRoZSBHcmVla3Mgd2hvIGhhZCBqb2ludGx5IGZvdWdodCBpbiB0aGUgYmF0dGxlIGF0IFBsYXRhZWEgYW5kIGluCiAgICAgICAgICAgICAgICAgICAgdGhlIHNlYS1maWdodCBhdCBTYWxhbWlzIGhhZCBtYWRlIGluIGNvbW1vbiBmcm9tIHRoZSBzcG9pbHMgdGFrZW4gZnJvbSB0aGUKICAgICAgICAgICAgICAgICAgICBiYXJiYXJpYW5zLCBhbmQgaGFkIHNldCB1cCBpbiBob25vciBvZiBBcG9sbG8gYXMgYSBtZW1vcmlhbCBvZiB0aGVpciB2YWxvci4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3RpY2g8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhpcyBkaXN0aWNoLCBzYWlkIGJ5IDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDMuOC4xIiB2YWxpZD0ieWVzIj5QYXVzLiAzLjguMTwvYmlibD4sIHRvIGJlIHRoZSB3b3JrIG9mIFNpbW9uaWRlcywgaXMKICAgICAgICAgICAgICAgICAgICAgICAgcXVvdGVkIGFsc28gaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMS4xMzIiIHZhbGlkPSJ5ZXMiPlRodWMuIDEuMTMyPC9iaWJsPi4gQWNjb3JkaW5nIHRvIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOS44MSIgdmFsaWQ9InllcyI+SGR0LiA5LjgxLjQ8L2JpYmw+IHRoZSBtb251bWVudCBpbiBxdWVzdGlvbiB3YXMgYSBnb2xkZW4KICAgICAgICAgICAgICAgICAgICAgICAgdHJpcG9kLCBzZXQgdXBvbiBhIHRocmVlLWhlYWRlZCBzZXJwZW50IG9mIGJyb256ZS4gVGhlIGdvbGQgdHJpcG9kIHdhcwogICAgICAgICAgICAgICAgICAgICAgICBjYXJyaWVkIG9mZiBieSB0aGUgUGhvY2lhbnMgaW4gdGhlIFNhY3JlZCBXYXIg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGF1cy4gMTAuMTMuNiIgdmFsaWQ9InllcyI+UGF1cy4gMTAuMTMuNjwvYmlibD7vvIksIGFuZCB0aGUgc3VwcG9ydGluZwogICAgICAgICAgICAgICAgICAgICAgICBwaWxsYXIsIHRocmVlIGludGVydHdpbmVkIHNlcnBlbnRzIG9mIGJyb256ZSwgd2FzIHRha2VuIGF3YXkgYnkgQ29uc3RhbnRpbmUKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHNldCB1cCBpbiB0aGUgSGlwcG9kcm9tZSBvZiBoaXMgbmV3IGNhcGl0YWwgYXQgQnl6YW50aXVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICDvvIg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIj5HaWJib24sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRlY2xpbmUgYW5kIEZhbGw8L3RpdGxlPiwgQ2hhcC4gMTcsIG5vdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ4PC9iaWJsPu+8iSwgd2hlcmUgaXQgd2FzIHJlZGlzY292ZXJlZCBpbiA8ZGF0ZSBhdXRobmFtZT0iMTg1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iMTg1NiI+MTg1NjwvZGF0ZT4uIFRoZSBuYW1lcyBvZiB0aGUgR3JlZWsgc3RhdGVzIHdoaWNoIHRvb2sgcGFydCBpbiB0aGUgd2FyCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBpbnNjcmliZWQgb24gdGhlIGNvaWxzIG9mIHRoZSBzZXJwZW50cyDvvIhzZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+SGlja3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R3JlZWsgSGlzdG9yaWNhbCBJbnNjcmlwdGlvbnM8L3RpdGxlPiwgcHAuIDExLTEzPC9iaWJsPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkRpdHRlbmJlcmdlciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3lsbG9nw6o8L3RpdGxlPiwgMSBwLgogICAgICAgICAgICAgICAgICAgICAgICAzMTwvYmlibD7vvIkuPC9ub3RlPiB3YXMgYXMgZm9sbG93czo8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQYXVzLiAzLjguMSIgdmFsaWQ9InllcyI+UGF1cy4gMy44LjE8L2JpYmw+LCB0byBiZSB0aGUgd29yayBvZiBTaW1vbmlkZXMsIGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RlZCBhbHNvIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDEuMTMyIiB2YWxpZD0ieWVzIj5UaHVjLiAxLjEzMjwvYmlibD4uIEFjY29yZGluZyB0byA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIZHQuIDkuODEiIHZhbGlkPSJ5ZXMiPkhkdC4gOS44MS40PC9iaWJsPiB0aGUgbW9udW1lbnQgaW4gcXVlc3Rpb24gd2FzIGEgZ29sZGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHRyaXBvZCwgc2V0IHVwb24gYSB0aHJlZS1oZWFkZWQgc2VycGVudCBvZiBicm9uemUuIFRoZSBnb2xkIHRyaXBvZCB3YXMKICAgICAgICAgICAgICAgICAgICAgICAgY2FycmllZCBvZmYgYnkgdGhlIFBob2NpYW5zIGluIHRoZSBTYWNyZWQgV2FyIO+8iDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBhdXMuIDEwLjEzLjYiIHZhbGlkPSJ5ZXMiPlBhdXMuIDEwLjEzLjY8L2JpYmw+77yJLCBhbmQgdGhlIHN1cHBvcnRpbmcKICAgICAgICAgICAgICAgICAgICAgICAgcGlsbGFyLCB0aHJlZSBpbnRlcnR3aW5lZCBzZXJwZW50cyBvZiBicm9uemUsIHdhcyB0YWtlbiBhd2F5IGJ5IENvbnN0YW50aW5lCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBzZXQgdXAgaW4gdGhlIEhpcHBvZHJvbWUgb2YgaGlzIG5ldyBjYXBpdGFsIGF0IEJ5emFudGl1bQogICAgICAgICAgICAgICAgICAgICAgICAgICAg77yIPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+R2liYm9uLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNsaW5lIGFuZCBGYWxsPC90aXRsZT4sIENoYXAuIDE3LCBub3RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA0ODwvYmlibD7vvIksIHdoZXJlIGl0IHdhcyByZWRpc2NvdmVyZWQgaW4gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjbGluZSBhbmQgRmFsbDwvdGl0bGU+LCBDaGFwLiAxNywgbm90ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgNDg8ZGF0ZSBhdXRobmFtZT0iMTg1NiIgY2xhc3M9InRyYW5zbGF0aW9uIiB2YWx1ZT0iMTg1NiI+MTg1NjwvZGF0ZT4uIFRoZSBuYW1lcyBvZiB0aGUgR3JlZWsgc3RhdGVzIHdoaWNoIHRvb2sgcGFydCBpbiB0aGUgd2FyCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBpbnNjcmliZWQgb24gdGhlIGNvaWxzIG9mIHRoZSBzZXJwZW50cyDvvIhzZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyI+SGlja3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+R3JlZWsgSGlzdG9yaWNhbCBJbnNjcmlwdGlvbnM8L3RpdGxlPiwgcHAuIDExLTEzPC9iaWJsPiBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkdyZWVrIEhpc3RvcmljYWwgSW5zY3JpcHRpb25zPC90aXRsZT4sIHBwLiAxMS0xMzxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iPkRpdHRlbmJlcmdlciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3lsbG9nw6o8L3RpdGxlPiwgMSBwLgogICAgICAgICAgICAgICAgICAgICAgICAzMTwvYmlibD7vvIkuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3lsbG9nw6o8L3RpdGxlPiwgMSBwLgogICAgICAgICAgICAgICAgICAgICAgICAzMTxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9InZlcnNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9ImUiPlBhdXNhbmlhcywgc3VwcmVtZSBjb21tYW5kZXIgb2YgdGhlIEdyZWVrcywgd2hlbiBoZSBoYWQgZGVzdHJveWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgaG9zdCBvZiB0aGUgTWVkZXMsPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPmRlZGljYXRlZCB0byBQaG9lYnVzIHRoaXMgbWVtb3JpYWwuPC9sPgogICAgICAgICAgICAgICAgICAgIDwvcXVvdGU+PGwgY2xhc3M9InRyYW5zbGF0aW9uIiBtZXQ9ImUiPlBhdXNhbmlhcywgc3VwcmVtZSBjb21tYW5kZXIgb2YgdGhlIEdyZWVrcywgd2hlbiBoZSBoYWQgZGVzdHJveWVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgaG9zdCBvZiB0aGUgTWVkZXMsPC9sPgogICAgICAgICAgICAgICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPmRlZGljYXRlZCB0byBQaG9lYnVzIHRoaXMgbWVtb3JpYWwuPC9sPgogICAgICAgICAgICAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5IZSB3cm90ZSB0aHVzLCBhcyBpZiB0aGUgYWNoaWV2ZW1lbnQgYW5kCiAgICAgICAgICAgICAgICAgICAgdGhlIG9mZmVyaW5nIGhhZCBiZWVuIGhpcyBvd24gYW5kIG5vdCB0aGUgY29tbW9uIHdvcmsgb2YgdGhlIGFsbGllczsgPC90cmFuc2xhdGlvbj4="
translation['59.speaker.98'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlIEdyZWVrcyB3ZXJlIGluY2Vuc2VkIGF0IHRoaXMsIGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBQbGF0YWVhbnMgYnJvdWdodCBzdWl0IG9uIGJlaGFsZiBvZiB0aGUgYWxsaWVzIGFnYWluc3QgdGhlIExhY2VkYWVtb25pYW5zIGJlZm9yZQogICAgICAgICAgICAgICAgICAgIHRoZSBBbXBoaWN0eW9uczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGVzZSB3ZXJlIHRoZSBtZW1iZXJzIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBjb3VuY2lsIG9mIEdyZWVrIHN0YXRlcyBtZWV0aW5nIGF0IERlbHBoaS48L25vdGU+IGZvciBvbmUgdGhvdXNhbmQgdGFsZW50cywKICAgICAgICAgICAgICAgICAgICBhbmQgY29tcGVsbGVkIHRoZW0gdG8gZXJhc2UgdGhlIGRpc3RpY2ggYW5kIHRvIGluc2NyaWJlIHRoZSBuYW1lcyBvZiBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgc3RhdGVzIHdoaWNoIGhhZCBoYWQgYSBwYXJ0IGluIHRoZSB3b3JrLiBUaGlzIGFjdCBtb3JlIHRoYW4gYW55IG90aGVyIGRyZXcgdXBvbgogICAgICAgICAgICAgICAgICAgIHRoZSBQbGF0YWVhbnMgdGhlIGhhdHJlZCBvZiB0aGUgTGFjZWRhZW1vbmlhbnMgYW5kIHRoZWlyIHJveWFsIGhvdXNlLjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBlZD0iUCIgdW5pdD0icGFyYSIgLz5Gb3IgdGhlIG1vbWVudCB0aGUgTGFjZWRhZW1vbmlhbnMgaGFkIG5vIG1lYW5zIG9mCiAgICAgICAgICAgICAgICAgICAgZGVhbGluZyB3aXRoIHRoZW0sIGJ1dCBhYm91dCBmaWZ0eSB5ZWFycyBsYXRlciBBcmNoaWRhbXVzLCBzb24gb2YgWmV1eGlkYW11cywKICAgICAgICAgICAgICAgICAgICBraW5nIG9mIHRoZSBMYWNlZGFlbW9uaWFucywgdW5kZXJ0b29rIGluIHRpbWUgb2YgcGVhY2UgdG8gc2VpemUgdGhlaXIgY2l0eS4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['59.speaker.99'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5OSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBkaWQgdGhpcyBmcm9tIFRoZWJlcywgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBhZ2VuY3kgb2YgRXVyeW1hY2h1cywgdGhlIHNvbiBvZiBMZW9udGlhZGFzLCB0aGUgQm9lb3RhcmNoLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGlzIHRpdGxlIHdhcyBnaXZlbiB0byB0aGUgaGlnaCBvZmZpY2lhbHMgYXQgVGhlYmVzLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgc3Rvcnkgb2YgdGhlIGF0dGFjayBvbiBQbGF0YWVhIGlzIHRvbGQgaW4gZGV0YWlsIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuMiIgdmFsaWQ9InllcyI+VGh1Yy4gMi4yIGZmLjwvYmlibD4gVGhlIGRhdGUgd2FzIDxkYXRlIGF1dGhuYW1lPSItNDI4IiBjbGFzcz0idHJhbnNsYXRpb24iIHZhbHVlPSItNDI4Ij40Mjg8L2RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIEIuQy48L25vdGU+IGFuZCB0aGUgZ2F0ZXMgd2VyZSBvcGVuZWQgYXQgbmlnaHQgYnkgTmF1Y2xlaWRlcyBhbmQgc29tZQogICAgICAgICAgICAgICAgICAgIGFjY29tcGxpY2VzIG9mIGhpcywgd2hvIGhhZCBiZWVuIHdvbiBvdmVyIGJ5IGJyaWJlcy4gVGhlIFBsYXRhZWFucywgZGlzY292ZXJpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBUaGViYW5zIGhhZCBnb3Qgd2l0aGluIHRoZSBnYXRlcyBpbiB0aGUgbmlnaHQgYW5kIHRoYXQgdGhlaXIgY2l0eSBoYWQKICAgICAgICAgICAgICAgICAgICBiZWVuIHN1ZGRlbmx5IHNlaXplZCBpbiB0aW1lIG9mIHBlYWNlLCByYW4gdG8gYmVhciBhaWQgYW5kIGFycmF5ZWQgdGhlbXNlbHZlcwogICAgICAgICAgICAgICAgICAgIGZvciBiYXR0bGUuIFdoZW4gZGF5IGRhd25lZCwgYW5kIHRoZXkgc2F3IHRoYXQgdGhlIFRoZWJhbnMgd2VyZSBmZXcgaW4gbnVtYmVyLAogICAgICAgICAgICAgICAgICAgIGFuZCB0aGF0IG9ubHkgdGhlaXIgZmlyc3QgcmFua3MgaGFkIGVudGVyZWTigJRhIGhlYXZ5IHJhaW4gd2hpY2ggaGFkCiAgICAgICAgICAgICAgICAgICAgZmFsbGVuIGluIHRoZSBuaWdodCBwcmV2ZW50ZWQgdGhlbSBmcm9tIGFsbCBnZXR0aW5nIGluOyBmb3IgdGhlIHJpdmVyIEFzb3B1cyB3YXMKICAgICAgICAgICAgICAgICAgICBmbG93aW5nIGZ1bGwgYW5kIHdhcyBub3QgZWFzeSB0byBjcm9zcyBlc3BlY2lhbGx5IGluIHRoZSBuaWdodDvigJQKICAgICAgICAgICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMi4yIiB2YWxpZD0ieWVzIj5UaHVjLiAyLjIgZmYuPC9iaWJsPiBUaGUgZGF0ZSB3YXMgPGRhdGUgYXV0aG5hbWU9Ii00MjgiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdmFsdWU9Ii00MjgiPjQyODwvZGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgQi5DLjwvdHJhbnNsYXRpb24+"
translation['59.speaker.100'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDAiIHVuaXQ9InNlY3Rpb24iIC8+c28sIHdoZW4gdGhlIFBsYXRhZWFucyBzYXcgdGhlIFRoZWJhbnMgaW4KICAgICAgICAgICAgICAgICAgICB0aGUgY2l0eSBhbmQgbGVhcm5lZCB0aGF0IHRoZWlyIHdob2xlIGJvZHkgd2FzIG5vdCB0aGVyZSwgdGhleSBtYWRlIGFuIGF0dGFjaywKICAgICAgICAgICAgICAgICAgICBvdmVyd2hlbG1lZCB0aGVtIGluIGJhdHRsZSwgYW5kIGRlc3Ryb3llZCB0aGVtIGJlZm9yZSB0aGUgcmVzdCBhcnJpdmVkIHRvIGJlYXIKICAgICAgICAgICAgICAgICAgICB0aGVtIGZ1cnRoZXIgYWlkOyBhbmQgdGhleSBhdCBvbmNlIHNlbnQgYSBtZXNzZW5nZXIgdG8geW91LCB0ZWxsaW5nIG9mIHdoYXQgaGFkCiAgICAgICAgICAgICAgICAgICAgYmVlbiBkb25lIGFuZCBvZiB0aGVpciB2aWN0b3J5IGluIHRoZSBiYXR0bGUsIGFuZCB0byBhc2sgZm9yIHlvdXIgaGVscCBpbiBjYXNlCiAgICAgICAgICAgICAgICAgICAgdGhlIFRoZWJhbnMgc2hvdWxkIHJhdmFnZSB0aGVpciBjb3VudHJ5LiBUaGUgQXRoZW5pYW5zLCB3aGVuIHRoZXkgaGVhcmQgd2hhdCBoYWQKICAgICAgICAgICAgICAgICAgICB0YWtlbiBwbGFjZSwgaGFzdGVuZWQgdG8gdGhlIGFpZCBvZiB0aGUgUGxhdGFlYW5zOyBhbmQgdGhlIFRoZWJhbnMsIHNlZWluZyB0aGF0CiAgICAgICAgICAgICAgICAgICAgdGhlIEF0aGVuaWFucyBoYWQgY29tZSB0byB0aGUgUGxhdGFlYW5zJyBhaWQsIHJldHVybmVkIGhvbWUuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.101'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDEiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHdoZW4gdGhlIFRoZWJhbnMgaGFkIGZhaWxlZCBpbiB0aGVpciBhdHRlbXB0IGFuZCB0aGUKICAgICAgICAgICAgICAgICAgICBQbGF0YWVhbnMgaGFkIHB1dCB0byBkZWF0aCB0aG9zZSBvZiB0aGVpciBudW1iZXIgd2hvbSB0aGV5IGhhZCB0YWtlbiBhbGl2ZSBpbgogICAgICAgICAgICAgICAgICAgIHRoZSBiYXR0bGUsIHRoZSBMYWNlZGFlbW9uaWFucywgd2l0aG91dCB3YWl0aW5nIG5vdyBmb3IgYW55IHByZXRleHQsIG1hcmNoZWQKICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IFBsYXRhZWEuIFRoZXkgb3JkZXJlZCBhbGwgdGhlIFBlbG9wb25uZXNpYW5zIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB0aGUKICAgICAgICAgICAgICAgICAgICBBcmdpdmVzIHRvIHNlbmQgdHdvLXRoaXJkcyBvZiB0aGVpciBhcm1pZXMgZnJvbSB0aGVpciBzZXZlcmFsIGNpdGllcywgYW5kIHRoZXkKICAgICAgICAgICAgICAgICAgICBzZW50IHdvcmQgdG8gYWxsIHRoZSByZXN0IG9mIHRoZSBCb2VvdGlhbnMgYW5kIHRoZSBMb2NyaWFucyBhbmQgUGhvY2lhbnMgYW5kCiAgICAgICAgICAgICAgICAgICAgTWFsaWFucyBhbmQgT2V0YWVhbnMgYW5kIEFlbmlhbnMgdG8gdGFrZSB0aGUgZmllbGQgd2l0aCB0aGVpciBlbnRpcmUKICAgICAgICAgICAgICAgICAgICAgICAgZm9yY2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5BbGwgdGhlIHN0YXRlcyBtZW50aW9uZWQgd2VyZSBpbgogICAgICAgICAgICAgICAgICAgICAgICBjZW50cmFsIEdyZWVjZSwgYW5kIGJlbG9uZ2VkIHRvIHRoZSBQZWxvcG9ubmVzaWFuIGNvbmZlZGVyYWN5Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.102'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGV5IGludmVzdGVkIHRoZSB3YWxscyBvZiBQbGF0YWVhIHdpdGgKICAgICAgICAgICAgICAgICAgICBhIGxhcmdlIGZvcmNlLCBhbmQgbWFkZSBvdmVydHVyZXMgdG8gdGhlIFBsYXRhZWFucyBvbiB0ZXJtcyB0aGF0LCBpZiB0aGV5IHdvdWxkCiAgICAgICAgICAgICAgICAgICAgc3VycmVuZGVyIHRoZWlyIGNpdHkgdG8gdGhlIExhY2VkYWVtb25pYW5zLCB0aGV5IHNob3VsZCByZXRhaW4gdGhlaXIgbGFuZCBhbmQKICAgICAgICAgICAgICAgICAgICBlbmpveSB0aGVpciBwcm9wZXJ0eSwgYnV0IHRoYXQgdGhleSBzaG91bGQgYnJlYWsgb2ZmIHRoZWlyIGFsbGlhbmNlIHdpdGggdGhlCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW5zLiBUaGUgUGxhdGFlYW5zIHJlZnVzZWQgdGhpcyBvZmZlciBhbmQgbWFkZSBhbnN3ZXIgdGhhdCB0aGV5IHdvdWxkIGRvCiAgICAgICAgICAgICAgICAgICAgbm90aGluZyB3aXRob3V0IHRoZSBBdGhlbmlhbnMsIHdoZXJldXBvbiB0aGUgTGFjZWRhZW1vbmlhbnMgYmVzaWVnZWQgdGhlbSBmb3IKICAgICAgICAgICAgICAgICAgICB0d28geWVhcnMsIGJ1aWx0IGEgZG91YmxlIHdhbGwgYWJvdXQgdGhlaXIgY2l0eSwgYW5kIG1hZGUgcmVwZWF0ZWQgYXNzYXVsdHMgb2YKICAgICAgICAgICAgICAgICAgICBldmVyeSBjb25jZWl2YWJsZSBzb3J0LiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.103'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgUGxhdGFlYW5zCiAgICAgICAgICAgICAgICAgICAgd2VyZSBxdWl0ZSB3b3JuIG91dCBhbmQgd2VyZSBpbiB3YW50IG9mIGV2ZXJ5dGhpbmcsIGFuZCBkZXNwYWlyZWQgb2Ygc2FmZXR5LAogICAgICAgICAgICAgICAgICAgIHRoZXkgZGl2aWRlZCB0aGVtc2VsdmVzIGJ5IGxvdCBpbnRvIHR3byBncm91cHM7IHNvbWUgb2YgdGhlbSByZW1haW5lZCBhbmQKICAgICAgICAgICAgICAgICAgICBlbmR1cmVkIHRoZSBzaWVnZSwgYnV0IHRoZSBvdGhlcnMsIHdhaXRpbmcgZm9yIGEgbmlnaHQgd2hlbiB0aGVyZSB3YXMgcmFpbiBhbmQgYQogICAgICAgICAgICAgICAgICAgIGhlYXZ5IHdpbmQsIGNsaW1iZWQgb3ZlciB0aGUgd2FsbCBvZiBjaXJjdW12YWxsYXRpb24sIHVuc2VlbiBvZiB0aGUgZW5lbXksIGN1dAogICAgICAgICAgICAgICAgICAgIGRvd24gdGhlIHNlbnRpbmVscywgYW5kIGdvdCBzYWZlbHkgdG8gQXRoZW5zLCBidXQgaW4gYSBkZXNwZXJhdGUgcGxpZ2h0IGFuZAogICAgICAgICAgICAgICAgICAgIGJleW9uZCBhbGwgZXhwZWN0YXRpb24uIEFzIGZvciB0aG9zZSB3aG8gcmVtYWluZWQgYmVoaW5kLCB3aGVuIHRoZSBjaXR5IHdhcwogICAgICAgICAgICAgICAgICAgIHRha2VuIGJ5IHN0b3JtLCBhbGwgd2hvIGhhZCByZWFjaGVkIG1hbmhvb2Qgd2VyZSBraWxsZWQgYW5kIHRoZSB3b21lbiBhbmQKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiB3ZXJlIG1hZGUgc2xhdmVz4oCUYWxsLCB0aGF0IGlzLCBzYXZlIHRob3NlIHdobywgd2hlbiB0aGV5IHNhdwogICAgICAgICAgICAgICAgICAgIHRoZSBMYWNlZGFlbW9uaWFucyBhZHZhbmNpbmcsIGdvdCBzZWNyZXRseSBhd2F5IHRvIEF0aGVucy48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+VGhlIGFjY291bnQgb2YgdGhlIHNpZWdlIGFuZCBmYWxsIG9mIFBsYXRhZWEgaXMgZ2l2ZW4gaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDIuNzEiIHZhbGlkPSJ5ZXMiPlRodWMuIDIuNzEtNzg8L2JpYmw+LCBhbmQgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iVGh1Yy4gMy4yMCIgdmFsaWQ9InllcyI+VGh1Yy4gMy4yMC0yNDwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDMuNTIiIHZhbGlkPSJ5ZXMiPlRodWMuCiAgICAgICAgICAgICAgICAgICAgICAgIDMuNTItNjg8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAyLjcxIiB2YWxpZD0ieWVzIj5UaHVjLiAyLjcxLTc4PC9iaWJsPiwgYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlRodWMuIDMuMjAiIHZhbGlkPSJ5ZXMiPlRodWMuIDMuMjAtMjQ8L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJUaHVjLiAzLjUyIiB2YWxpZD0ieWVzIj5UaHVjLgogICAgICAgICAgICAgICAgICAgICAgICAzLjUyLTY4PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.104'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9uY2UgbW9yZSBJCiAgICAgICAgICAgICAgICAgICAgd291bGQgaGF2ZSB5b3Ugb2JzZXJ2ZSBpbiB3aGF0IHdheSB5b3UgZ3JhbnRlZCB0aGUgcmlnaHQgdG8gc2hhcmUgY2l0aXplbnNoaXAKICAgICAgICAgICAgICAgICAgICB3aXRoIHlvdSB0byBtZW4gd2hvIGhhZCB0aHVzIHNpZ25hbGx5IG1hbmlmZXN0ZWQgdGhlaXIgZ29vZCB3aWxsIHRvd2FyZCB5b3VyCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlLCBhbmQgd2hvIHNhY3JpZmljZWQgYWxsIHRoZWlyIHBvc3Nlc3Npb25zIGFuZCB0aGVpciBjaGlsZHJlbiBhbmQgdGhlaXIKICAgICAgICAgICAgICAgICAgICB3aXZlcy4gVGhlIGRlY3JlZXMgd2hpY2ggeW91IHBhc3NlZCB3aWxsIG1ha2UgdGhlIGxhdyBwbGFpbiB0byBldmVyeWJvZHksIGFuZAogICAgICAgICAgICAgICAgICAgIHlvdSB3aWxsIGtub3cgdGhhdCBJIGFtIHNwZWFraW5nIHRoZSB0cnV0aC48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+VGFrZQogICAgICAgICAgICAgICAgICAgIHRoaXMgZGVjcmVlLCBwbGVhc2UsIGFuZCByZWFkIGl0IHRvIHRoZSBqdXJ5LjxxdW90ZSBjbGFzcz0idHJhbnNsYXRpb24iIHR5cGU9IkRlY3JlZSBSZWdhcmRpbmcgdGhlIFBsYXRhZWFucyI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVjcmVlIFJlZ2FyZGluZyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsYXRhZWFuczwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9uIG1vdGlvbiBvZiBIaXBwb2NyYXRlcwogICAgICAgICAgICAgICAgICAgICAgICBpdCBpcyBkZWNyZWVkIHRoYXQgdGhlIFBsYXRhZWFucyBzaGFsbCBiZSBBdGhlbmlhbnMgZnJvbSB0aGlzIGRheSwgYW5kIHNoYWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGhhdmUgZnVsbCByaWdodHMgYXMgY2l0aXplbnMsIGFuZCB0aGF0IHRoZXkgc2hhbGwgc2hhcmUgaW4gYWxsIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBwcml2aWxlZ2VzIGluIHdoaWNoIHRoZSBBdGhlbmlhbnMgc2hhcmUsIGJvdGggY2l2aWwgYW5kIHJlbGlnaW91cywgc2F2ZSBhbnkKICAgICAgICAgICAgICAgICAgICAgICAgcHJpZXN0aG9vZCBvciByZWxpZ2lvdXMgb2ZmaWNlIHdoaWNoIGJlbG9uZ3MgdG8gYSBwYXJ0aWN1bGFyIGZhbWlseSwgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhleSBzaGFsbCBub3QgYmUgZWxpZ2libGUgdG8gdGhlIG9mZmljZSBvZiB0aGUgbmluZSBhcmNob25zIGJ1dCB0aGVpcgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjZW5kYW50cyBzaGFsbCBiZS4gQW5kIHRoZSBQbGF0YWVhbnMgc2hhbGwgYmUgZGlzdHJpYnV0ZWQgYW1vbmcgdGhlIGRlbWVzCiAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGUgdHJpYmVzOyBhbmQgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gc28gZGlzdHJpYnV0ZWQsIGl0IHNoYWxsIG5vIGxvbmdlcgogICAgICAgICAgICAgICAgICAgICAgICBiZSBsYXdmdWwgZm9yIGFueSBQbGF0YWVhbiB0byBiZWNvbWUgYW4gQXRoZW5pYW4sIHVubGVzcyBoZSB3aW5zIHRoZSBnaWZ0CiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIHBlb3BsZSBvZiBBdGhlbnMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZWNyZWUgUmVnYXJkaW5nIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgUGxhdGFlYW5zPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+T24gbW90aW9uIG9mIEhpcHBvY3JhdGVzCiAgICAgICAgICAgICAgICAgICAgICAgIGl0IGlzIGRlY3JlZWQgdGhhdCB0aGUgUGxhdGFlYW5zIHNoYWxsIGJlIEF0aGVuaWFucyBmcm9tIHRoaXMgZGF5LCBhbmQgc2hhbGwKICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBmdWxsIHJpZ2h0cyBhcyBjaXRpemVucywgYW5kIHRoYXQgdGhleSBzaGFsbCBzaGFyZSBpbiBhbGwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHByaXZpbGVnZXMgaW4gd2hpY2ggdGhlIEF0aGVuaWFucyBzaGFyZSwgYm90aCBjaXZpbCBhbmQgcmVsaWdpb3VzLCBzYXZlIGFueQogICAgICAgICAgICAgICAgICAgICAgICBwcmllc3Rob29kIG9yIHJlbGlnaW91cyBvZmZpY2Ugd2hpY2ggYmVsb25ncyB0byBhIHBhcnRpY3VsYXIgZmFtaWx5LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGV5IHNoYWxsIG5vdCBiZSBlbGlnaWJsZSB0byB0aGUgb2ZmaWNlIG9mIHRoZSBuaW5lIGFyY2hvbnMgYnV0IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NlbmRhbnRzIHNoYWxsIGJlLiBBbmQgdGhlIFBsYXRhZWFucyBzaGFsbCBiZSBkaXN0cmlidXRlZCBhbW9uZyB0aGUgZGVtZXMKICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSB0cmliZXM7IGFuZCBhZnRlciB0aGV5IGhhdmUgYmVlbiBzbyBkaXN0cmlidXRlZCwgaXQgc2hhbGwgbm8gbG9uZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGJlIGxhd2Z1bCBmb3IgYW55IFBsYXRhZWFuIHRvIGJlY29tZSBhbiBBdGhlbmlhbiwgdW5sZXNzIGhlIHdpbnMgdGhlIGdpZnQKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSB0aGUgcGVvcGxlIG9mIEF0aGVucy48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.105'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPllvdSBzZWUsIG1lbgogICAgICAgICAgICAgICAgICAgIG9mIEF0aGVucywgaG93IHdlbGwgYW5kIGhvdyBqdXN0bHkgdGhlIG9yYXRvciBmcmFtZWQgdGhlIGRlY3JlZSBpbiB0aGUgaW50ZXJlc3QKICAgICAgICAgICAgICAgICAgICBvZiB0aGUgcGVvcGxlIG9mIEF0aGVucyBieSByZXF1aXJpbmcgdGhhdCB0aGUgUGxhdGFlYW5zLCBhZnRlciByZWNlaXZpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgZ2lmdCwgc2hvdWxkIGZpcnN0IHVuZGVyZ28gdGhlIHNjcnV0aW55IGluIHRoZSBjb3VydCwgbWFuIGJ5IG1hbiwgaW4gb3JkZXIgdG8KICAgICAgICAgICAgICAgICAgICBzaG93IHdoZXRoZXIgZWFjaCBtYW4gd2FzIGEgUGxhdGFlYW4gYW5kIG9uZSBvZiB0aGUgZnJpZW5kcyBvZiB0aGUgY2l0eSwgc28gYXMKICAgICAgICAgICAgICAgICAgICB0byBhdm9pZCB0aGUgZGFuZ2VyIHRoYXQgbWFueSBtaWdodCB1c2UgdGhpcyBwcmV0ZXh0IHRvIGFjcXVpcmUgQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICBjaXRpemVuc2hpcDsgYW5kIGJ5IHJlcXVpcmluZyBmdXJ0aGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZQogICAgICAgICAgICAgICAgICAgICAgICBjbGF1c2VzIG9mIHRoZSBkZWNyZWUgY29udGFpbmluZyB0aGVzZSBwcm92aXNpb25zIGhhdmUgcGxhaW5seSBiZWVuCiAgICAgICAgICAgICAgICAgICAgICAgIGxvc3QuPC9ub3RlPiB0aGF0IHRoZSBuYW1lcyBvZiB0aG9zZSB3aG8gaGFkIHBhc3NlZCB0aGUgc2NydXRpbnkgc2hvdWxkIGJlCiAgICAgICAgICAgICAgICAgICAgaW5zY3JpYmVkIHVwb24gYSBwaWxsYXIgb2YgbWFyYmxlIGFuZCBzaG91bGQgYmUgc2V0IHVwIGluIHRoZSBBY3JvcG9saXMgbmVhciB0aGUKICAgICAgICAgICAgICAgICAgICB0ZW1wbGUgb2YgdGhlIGdvZGRlc3MsIHRvIHRoZSBlbmQgdGhhdCB0aGUgZmF2b3IgZ3JhbnRlZCB0byB0aGVtIHNob3VsZCBiZQogICAgICAgICAgICAgICAgICAgIHByZXNlcnZlZCBmb3IgdGhlaXIgZGVzY2VuZGFudHMgYW5kIHRoYXQgZWFjaCBvbmUgb2YgdGhlc2UgbWlnaHQgYmUgaW4gYQogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uIHRvIHByb3ZlIGhpcyByZWxhdGlvbnNoaXAgdG8gb25lIG9mIHRob3NlIHJlY2VpdmluZyB0aGUgZ3JhbnQuCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.106'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGhlIGRvZXMgbm90IHN1ZmZlciBhbnlvbmUgdG8gYmVjb21lCiAgICAgICAgICAgICAgICAgICAgYW4gQXRoZW5pYW4gaW4gdGhlIGxhdGVyIHBlcmlvZCwgdW5sZXNzIGhlIGJlIG1hZGUgc3VjaCBhdCB0aGUgdGltZSBhbmQgYmUKICAgICAgICAgICAgICAgICAgICBhcHByb3ZlZCBieSB0aGUgY291cnQsIGZvciBmZWFyIHRoYXQgbnVtYmVycyBvZiBwZW9wbGUsIGJ5IGNsYWltaW5nIHRvIGJlCiAgICAgICAgICAgICAgICAgICAgUGxhdGFlYW5zLCBtaWdodCBhY3F1aXJlIGZvciB0aGVtc2VsdmVzIHRoZSByaWdodCBvZiBjaXRpemVuc2hpcC4gQW5kCiAgICAgICAgICAgICAgICAgICAgZnVydGhlcm1vcmUsIGhlIGRlZmluZWQgYXQgb25jZSBpbiB0aGUgZGVjcmVlIHRoZSBydWxlIGFwcGx5aW5nIHRvIHRoZSBQbGF0YWVhbnMKICAgICAgICAgICAgICAgICAgICBpbiB0aGUgaW50ZXJlc3Qgb2YgdGhlIGNpdHkgYW5kIG9mIHRoZSBnb2RzLCBkZWNsYXJpbmcgdGhhdCBpdCBzaG91bGQgbm90IGJlCiAgICAgICAgICAgICAgICAgICAgcGVybWl0dGVkIHRvIGFueSBvZiB0aGVtIHRvIGJlIGRyYXduIGJ5IGxvdCBmb3IgdGhlIG9mZmljZSBvZiB0aGUgbmluZSBhcmNob25zCiAgICAgICAgICAgICAgICAgICAgb3IgZm9yIGFueSBwcmllc3Rob29kLCBidXQgdGhhdCB0aGVpciBkZXNjZW5kYW50cyBtaWdodCBiZSBzbyBkcmF3biwgaWYgdGhleQogICAgICAgICAgICAgICAgICAgIHdlcmUgYm9ybiBmcm9tIG1vdGhlcnMgd2hvIHdlcmUgb2YgQXR0aWMgYmlydGggYW5kIHdlcmUgYmV0cm90aGVkIGFjY29yZGluZyB0bwogICAgICAgICAgICAgICAgICAgIHRoZSBsYXcuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.107'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDciIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPklzCiAgICAgICAgICAgICAgICAgICAgbm90IHRoaXMgYSBtb25zdHJvdXMgdGhpbmc/IEluIHRoZSBjYXNlIG9mIHRob3NlIHdobyB3ZXJlIG5laWdoYm9ycyBhbmQgd2hvIGhhZAogICAgICAgICAgICAgICAgICAgIHNob3duIHRoZW1zZWx2ZXMgb2YgYWxsIHRoZSBHcmVla3MgYnkgY29tbW9uIGNvbnNlbnQgdG8gaGF2ZSBjb25mZXJyZWQgdGhlCiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlc3QgYmVuZWZpdHMgdXBvbiB5b3VyIHN0YXRlLCB5b3UgdGh1cyBjYXJlZnVsbHkgYW5kIGFjY3VyYXRlbHkgZGVmaW5lZAogICAgICAgICAgICAgICAgICAgIHJlZ2FyZGluZyBlYWNoIG9uZSB0aGUgdGVybXMgb24gd2hpY2ggdGhleSBzaG91bGQgcmVjZWl2ZSB0aGUgZ2lmdCBvZgogICAgICAgICAgICAgICAgICAgIGNpdGl6ZW5zaGlwOyBhcmUgeW91IHRoZW4gdGh1cyBzaGFtZWZ1bGx5IGFuZCByZWNrbGVzc2x5IHRvIGxldCBvZmYgdW5wdW5pc2hlZCBhCiAgICAgICAgICAgICAgICAgICAgd29tYW4gd2hvIGhhcyBvcGVubHkgcGxheWVkIHRoZSBoYXJsb3QgdGhyb3VnaG91dCB0aGUgd2hvbGUgb2YgR3JlZWNlLCB3aG8KICAgICAgICAgICAgICAgICAgICB0cmVhdHMgdGhlIGNpdHkgd2l0aCBvdXRyYWdlIGFuZCB0aGUgZ29kcyB3aXRoIGltcGlldHksIGFuZCB3aG8gaXMgYSBjaXRpemVuCiAgICAgICAgICAgICAgICAgICAgbmVpdGhlciBieSBiaXJ0aCBub3IgYnkgdGhlIGdpZnQgb2YgdGhlIHBlb3BsZT8gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.108'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDgiIHVuaXQ9InNlY3Rpb24iIC8+V2hlcmUgaGFzIHRoaXMgd29tYW4gbm90IHByb3N0aXR1dGVkIGhlcnNlbGY/IFRvIHdoYXQgcGxhY2UKICAgICAgICAgICAgICAgICAgICBoYXMgc2hlIG5vdCBnb25lIGluIHF1ZXN0IG9mIGhlciBkYWlseSB3YWdlPyBIYXMgc2hlIG5vdCBiZWVuIGV2ZXJ5d2hlcmUgaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgUGVsb3Bvbm5lc3VzLCBpbiBUaGVzc2FseSBhbmQgaW4gTWFnbmVzaWE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TWFnbmVzaWEsIGEgZGlzdHJpY3Qgb24gdGhlIHdlc3QgY29hc3Qgb2Ygbm9ydGhlcm4gR3JlZWNlLjwvbm90ZT4gaW4gdGhlCiAgICAgICAgICAgICAgICAgICAgY29tcGFueSBvZiBTaW11cyBvZiBMYXJpc2E8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+TGFyaXNhLCBhIHRvd24gaW4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlc3NhbHkuPC9ub3RlPiBhbmQgRXVyeWRhbWFzIHNvbiBvZiBNZWRlaXVzLCBpbiBDaGlvczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5DaGlvcywgYSBsYXJnZSBpc2xhbmQgb2ZmIHRoZSBjb2FzdCBvZiBJb25pYS48L25vdGU+IGFuZCBtb3N0CiAgICAgICAgICAgICAgICAgICAgb2YgSW9uaWEsIGZvbGxvd2luZyBpbiB0aGUgdHJhaW4gb2YgU290YWRhcyB0aGUgQ3JldGFuLCBhbmQgd2FzIHNoZSBub3QgbGV0IG91dAogICAgICAgICAgICAgICAgICAgIGZvciBoaXJlIGJ5IE5pY2FyZXTDqiBzbyBsb25nIGFzIHNoZSBiZWxvbmdlZCB0byBoZXI/IFdoYXQgZG8geW91CiAgICAgICAgICAgICAgICAgICAgc3VwcG9zZSBhIHdvbWFuIGRvZXMgd2hvIGlzIHN1YmplY3QgdG8gbWVuIHdobyBhcmUgbm90IGhlciBraW5zZm9saywgYW5kIHdobwogICAgICAgICAgICAgICAgICAgIGZvbGxvd3MgaW4gdGhlIHRyYWluIG9mIGhpbSB3aG8gcGF5cyBoZXI/IERvZXMgc2hlIG5vdCBzZXJ2ZSBhbGwgdGhlIGx1c3RzIG9mCiAgICAgICAgICAgICAgICAgICAgdGhvc2Ugd2hvIGRlYWwgd2l0aCBoZXI/IFdpbGwgeW91LCB0aGVuLCBkZWNsYXJlIGJ5IHlvdXIgdm90ZSB0aGF0IGEgd29tYW4gb2YKICAgICAgICAgICAgICAgICAgICB0aGlzIHN0YW1wLCB3aG8gaXMga25vd24gYnkgZXZlcnlib2R5IGJleW9uZCBhbGwgcXVlc3Rpb24gdG8gaGF2ZSBwbGllZCBoZXIKICAgICAgICAgICAgICAgICAgICB0cmFkZSB0aGUgd2hvbGUgd29ybGQgb3ZlciwgaXMgYW4gQXRoZW5pYW4gY2l0aXplbj8gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.109'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMDkiIHVuaXQ9InNlY3Rpb24iIC8+V2hhdCBob25vcmFibGUgZGVlZCB3aWxsIHlvdSBzYXkgdGhhdCB5b3UgaGF2ZSBkb25lLCB3aGVuCiAgICAgICAgICAgICAgICAgICAgcGVvcGxlIGFzayB5b3UsIG9yIHdpdGggd2hhdCBzaGFtZSBhbmQgaW1waWV0eSB3aWxsIHlvdSB5b3Vyc2VsdmVzIHNheSB0aGF0IHlvdQogICAgICAgICAgICAgICAgICAgIGFyZSBub3QgY2hhcmdlYWJsZT8gRm9yIHVwIHRvIHRoZSB0aW1lIHdoZW4gdGhpcyB3b21hbiB3YXMgaW5kaWN0ZWQgYW5kIGJyb3VnaHQKICAgICAgICAgICAgICAgICAgICB0byB0cmlhbCwgc28gdGhhdCB5b3UgYWxsIGxlYXJuZWQgd2hvIHNoZSB3YXMgYW5kIHdoYXQgYWN0cyBvZiBpbXBpZXR5IHNoZSBoYWQKICAgICAgICAgICAgICAgICAgICBjb21taXR0ZWQsIHRoZSBjcmltZXMgd2VyZSBoZXIgb3duLCBhbmQgdGhlIHN0YXRlIHdhcyBtZXJlbHkgZ3VpbHR5IG9mIG5lZ2xlY3Q7CiAgICAgICAgICAgICAgICAgICAgYW5kIHNvbWUgb2YgeW91IGtuZXcgbm90aGluZyBvZiB0aGUgbWF0dGVyLCBhbmQgb3RoZXJzIGxlYXJuaW5nIG9mIGl0IGV4cHJlc3NlZAogICAgICAgICAgICAgICAgICAgIHRoZWlyIGluZGlnbmF0aW9uIGluIHdvcmRzIGJ1dCBpbiBmYWN0IGhhZCBubyBtZWFucyBvZiBkZWFsaW5nIHdpdGggaGVyLCBzZWVpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IG5vYm9keSBicm91Z2h0IGhlciB0byB0cmlhbCBvciBnYXZlIGFuIG9wcG9ydHVuaXR5IG9mIGNhc3RpbmcgYSB2b3RlCiAgICAgICAgICAgICAgICAgICAgcmVnYXJkaW5nIGhlci4gQnV0IG5vdyB0aGF0IHlvdSBhbGwga25vdyB0aGUgZmFjdHMgYW5kIGhhdmUgZ290IGhlciBpbiB5b3VyIG93bgogICAgICAgICAgICAgICAgICAgIGhhbmRzLCBhbmQgaGF2ZSB0aGUgcG93ZXIgdG8gcHVuaXNoIGhlciwgdGhlIHNpbiBhZ2FpbnN0IHRoZSBnb2RzIGJlY29tZXMgeW91cgogICAgICAgICAgICAgICAgICAgIG93biwgaWYgeW91IGZhaWwgdG8gZG8gc28uIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.110'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTAiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gZWFjaCBvbmUKICAgICAgICAgICAgICAgICAgICBvZiB5b3UgZ29lcyBob21lLCB3aGF0IHdpbGwgaGUgZmluZCB0byBzYXkgdG8gaGlzIG93biB3aWZlIG9yIGhpcyBkYXVnaHRlciBvcgogICAgICAgICAgICAgICAgICAgIGhpcyBtb3RoZXIsIGlmIGhlIGhhcyBhY3F1aXR0ZWQgdGhpcyB3b21hbj/igJR3aGVuIHRoZSBxdWVzdGlvbiBpcyBhc2tlZAogICAgICAgICAgICAgICAgICAgIHlvdSwg4oCcV2hlcmUgd2VyZSB5b3U/4oCdIGFuZCB5b3UgYW5zd2VyLCDigJxXZSBzYXQgYXMKICAgICAgICAgICAgICAgICAgICBqdXJ5LuKAnSDigJxUcnlpbmcgd2hvbT/igJ0gaXQgd2lsbCBhdCBvbmNlIGJlIGFza2VkLAogICAgICAgICAgICAgICAgICAgIOKAnE5lYWVyYSzigJ0geW91IHdpbGwgc2F5LCBvZiBjb3Vyc2UsIHdpbGwgeW91IG5vdD8KICAgICAgICAgICAgICAgICAgICDigJxiZWNhdXNlIHNoZSwgYW4gYWxpZW4gd29tYW4sIGlzIGxpdmluZyBhcyB3aWZlIHdpdGggYW4gQXRoZW5pYW4KICAgICAgICAgICAgICAgICAgICBjb250cmFyeSB0byBsYXcsIGFuZCBiZWNhdXNlIHNoZSBnYXZlIGhlciBkYXVnaHRlciwgd2hvIGhhZCBsaXZlZCBhcyBhIGhhcmxvdCwKICAgICAgICAgICAgICAgICAgICBpbiBtYXJyaWFnZSB0byBUaGVvZ2VuZXMsIHRoZSBraW5nLCBhbmQgdGhpcyBkYXVnaHRlciBwZXJmb3JtZWQgb24gdGhlIGNpdHkncwogICAgICAgICAgICAgICAgICAgIGJlaGFsZiB0aGUgcml0ZXMgdGhhdCBub25lIG1heSBuYW1lLCBhbmQgd2FzIGdpdmVuIGFzIHdpZmUgdG8KICAgICAgICAgICAgICAgICAgICBEaW9ueXN1cy7igJ0gQW5kIHlvdSB3aWxsIG5hcnJhdGUgYWxsIHRoZSBvdGhlciBkZXRhaWxzIG9mIHRoZSBjaGFyZ2UsCiAgICAgICAgICAgICAgICAgICAgc2hvd2luZyBob3cgd2VsbCBhbmQgYWNjdXJhdGVseSBhbmQgaW4gYSBtYW5uZXIgbm90IGVhc2lseSBmb3Jnb3R0ZW4gdGhlCiAgICAgICAgICAgICAgICAgICAgYWNjdXNhdGlvbiBjb3ZlcmVkIGVhY2ggcG9pbnQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.111'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZSB3b21lbiwKICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZXkgaGF2ZSBoZWFyZCwgd2lsbCBzYXksIOKAnFdlbGwsIHdoYXQgZGlkIHlvdSBkbz/igJ0gQW5kCiAgICAgICAgICAgICAgICAgICAgeW91IHdpbGwgc2F5LCDigJxXZSBhY3F1aXR0ZWQgaGVyLuKAnSBBdCB0aGlzIHBvaW50IHRoZSBtb3N0CiAgICAgICAgICAgICAgICAgICAgdmlydHVvdXMgb2YgdGhlIHdvbWVuIHdpbGwgYmUgYW5ncnkgYXQgeW91IGZvciBoYXZpbmcgZGVlbWVkIGl0IHJpZ2h0IHRoYXQgdGhpcwogICAgICAgICAgICAgICAgICAgIHdvbWFuIHNob3VsZCBzaGFyZSBpbiBsaWtlIG1hbm5lciB3aXRoIHRoZW1zZWx2ZXMgaW4gdGhlIHB1YmxpYyBjZXJlbW9uaWFscyBhbmQKICAgICAgICAgICAgICAgICAgICByZWxpZ2lvdXMgcml0ZXM7IGFuZCB0byB0aG9zZSB3aG8gYXJlIG5vdCB3b21lbiBvZiBkaXNjcmV0aW9uIHlvdSBwb2ludCBvdXQKICAgICAgICAgICAgICAgICAgICBjbGVhcmx5IHRoYXQgdGhleSBtYXkgZG8gYXMgdGhleSBwbGVhc2UsIGZvciB0aGV5IGhhdmUgbm90aGluZyB0byBmZWFyIGZyb20geW91CiAgICAgICAgICAgICAgICAgICAgb3IgdGhlIGxhd3MuIEZvciBpZiB5b3UgdHJlYXQgdGhlIG1hdHRlciB3aXRoIGluZGlmZmVyZW5jZSBvciB0b2xlcmF0aW9uLCB5b3UKICAgICAgICAgICAgICAgICAgICB3aWxsIHlvdXJzZWx2ZXMgc2VlbSB0byBhcHByb3ZlIG9mIHRoaXMgd29tYW4ncyBjb25kdWN0LiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.112'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd291bGQgYmUgZmFyIGJldHRlciwgdGhlcmVmb3JlLCB0aGF0IHRoaXMgdHJpYWwgc2hvdWxkCiAgICAgICAgICAgICAgICAgICAgbmV2ZXIgaGF2ZSB0YWtlbiBwbGFjZSB0aGFuIHRoYXQsIHdoZW4gaXQgaGFzIHRha2VuIHBsYWNlLCB5b3Ugc2hvdWxkIHZvdGUgZm9yCiAgICAgICAgICAgICAgICAgICAgYWNxdWl0dGFsOyBmb3IgaW4gdGhhdCBjYXNlIHByb3N0aXR1dGVzIHdpbGwgaW5kZWVkIGhhdmUgbGliZXJ0eSB0byBsaXZlIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aGF0ZXZlciBtZW4gdGhleSBjaG9vc2UgYW5kIHRvIG5hbWUgYW55b25lIHdoYXRldmVyIGFzIHRoZSBmYXRoZXIgb2YgdGhlaXIKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiwgYW5kIHlvdXIgbGF3cyB3aWxsIGJlY29tZSBvZiBubyBlZmZlY3QsIGFuZCB3b21lbiBvZiB0aGUgY2hhcmFjdGVyIG9mCiAgICAgICAgICAgICAgICAgICAgdGhlIGNvdXJ0ZXNhbiB3aWxsIGJlIGFibGUgdG8gYnJpbmcgdG8gcGFzcyB3aGF0ZXZlciB0aGV5IHBsZWFzZS4gVGFrZSB0aG91Z2h0LAogICAgICAgICAgICAgICAgICAgIHRoZXJlZm9yZSwgYWxzbyBmb3IgdGhlIHdvbWVuIHdobyBhcmUgY2l0aXplbnMsIHRoYXQgdGhlIGRhdWdodGVycyBvZiBwb29yIG1lbgogICAgICAgICAgICAgICAgICAgIG1heSBub3QgZmFpbCBvZiBtYXJyaWFnZS4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.113'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGFzIHRoaW5ncyBhcmUKICAgICAgICAgICAgICAgICAgICBub3csIGV2ZW4gaWYgYSBnaXJsIGJlIHBvb3IsIHRoZSBsYXcgcHJvdmlkZXMgZm9yIGhlciBhbiBhZGVxdWF0ZSBkb3dyeSwgaWYKICAgICAgICAgICAgICAgICAgICBuYXR1cmUgaGFzIGVuZG93ZWQgaGVyIHdpdGggZXZlbiBtb2RlcmF0ZSBjb21lbGluZXNzOyBidXQgaWYgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgICBhY3F1aXR0YWwgb2YgdGhpcyB3b21hbiB5b3UgZHJhZyB0aGUgbGF3IHRocm91Z2ggdGhlIG1pcmUgYW5kIG1ha2UgaXQgb2Ygbm8KICAgICAgICAgICAgICAgICAgICBlZmZlY3QsIHRoZW4gdGhlIHRyYWRlIG9mIHRoZSBoYXJsb3Qgd2lsbCBhYnNvbHV0ZWx5IG1ha2UgaXRzIHdheSB0byB0aGUKICAgICAgICAgICAgICAgICAgICBkYXVnaHRlcnMgb2YgY2l0aXplbnMsIHdobyB0aHJvdWdoIHBvdmVydHkgYXJlIHVuYWJsZSB0byBtYXJyeSwgYW5kIHRoZSBkaWduaXR5CiAgICAgICAgICAgICAgICAgICAgb2YgZnJlZS1ib3JuIHdvbWVuIHdpbGwgZGVzY2VuZCB0byB0aGUgY291cnRlc2FucywgaWYgdGhleSBiZSBnaXZlbiBsaWNlbmNlIHRvCiAgICAgICAgICAgICAgICAgICAgYmVhciBjaGlsZHJlbiB0byB3aG9tc29ldmVyIHRoZXkgcGxlYXNlLCBhbmQgc3RpbGwgdG8gc2hhcmUgaW4gYWxsIHRoZSByaXRlcyBhbmQKICAgICAgICAgICAgICAgICAgICBjZXJlbW9uaWVzIGFuZCBob25vcnMgaW4gdGhlIHN0YXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.114'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgd291bGQsIHRoZW4sIGhhdmUgZWFjaCBvbmUgb2YgeW91CiAgICAgICAgICAgICAgICAgICAgY29uc2lkZXIgdGhhdCBoZSBpcyBjYXN0aW5nIGhpcyB2b3RlLCBvbmUgaW4gdGhlIGludGVyZXN0IG9mIGhpcyB3aWZlLCBvbmUgb2YKICAgICAgICAgICAgICAgICAgICBoaXMgZGF1Z2h0ZXIsIG9uZSBvZiBoaXMgbW90aGVyLCBhbmQgb25lIGluIHRoZSBpbnRlcmVzdCBvZiB0aGUgc3RhdGUgYW5kIHRoZQogICAgICAgICAgICAgICAgICAgIGxhd3MgYW5kIG9mIHJlbGlnaW9uLCBpbiBvcmRlciB0aGF0IHRoZXNlIHdvbWVuIG1heSBub3QgYmUgc2hvd24gdG8gYmUgaGVsZCBpbgogICAgICAgICAgICAgICAgICAgIGxpa2UgZXN0ZWVtIHdpdGggdGhlIGhhcmxvdCwgYW5kIHRoYXQgd29tZW4gd2hvIGhhdmUgYmVlbiBicm91Z2h0IHVwIGJ5IHRoZWlyCiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVzIHdpdGggZ3JlYXQgY2FyZSBhbmQgaW4gdGhlIGdyYWNlIG9mIG1vZGVzdHkgYW5kIGhhdmUgYmVlbiBnaXZlbiBpbgogICAgICAgICAgICAgICAgICAgIG1hcnJpYWdlIGFjY29yZGluZyB0byB0aGUgbGF3cyBtYXkgbm90IGJlIHNlZW4gdG8gYmUgc2hhcmluZyBvbiBhbiBlcXVhbCBmb290aW5nCiAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGNyZWF0dXJlIHdobyBpbiBtYW55IGFuZCBvYnNjZW5lIHdheXMgaGFzIGJlc3Rvd2VkIGhlciBmYXZvcnMgbWFueSB0aW1lcwogICAgICAgICAgICAgICAgICAgIGEgZGF5IG9uIGFsbCBjb21lcnMsIGFzIGVhY2ggb25lIGhhcHBlbmVkIHRvIGRlc2lyZS4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.115'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yZ2V0IHRoYXQgSSwgdGhlIHNwZWFrZXIsIGFtIEFwb2xsb2RvcnVzLCBhbmQgdGhhdCB0aG9zZQogICAgICAgICAgICAgICAgICAgIHdobyB3aWxsIHN1cHBvcnQgYW5kIHBsZWFkIGZvciB0aGUgZGVmZW5kYW50IGFyZSBjaXRpemVucyBvZiBBdGhlbnM7IGJ1dAogICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyIHRoYXQgdGhlIGxhd3MgYW5kIE5lYWVyYSBoZXJlIGFyZSBjb250ZW5kaW5nIGluIGEgc3VpdCByZWdhcmRpbmcgdGhlCiAgICAgICAgICAgICAgICAgICAgbGlmZSB3aGljaCBzaGUgaGFzIGxlZC4gQW5kIHdoZW4geW91IHRha2UgdXAgdGhlIGFjY3VzYXRpb24sIGxpc3RlbiB0byB0aGUgbGF3cwogICAgICAgICAgICAgICAgICAgIHRoZW1zZWx2ZXMsIHdoaWNoIGFyZSB0aGUgZm91bmRhdGlvbiBvZiB5b3VyIGNpdmljIGxpZmUsIGFuZCBpbiBhY2NvcmRhbmNlIHdpdGgKICAgICAgICAgICAgICAgICAgICB3aGljaCB5b3UgaGF2ZSBzd29ybiB0byBjYXN0IHlvdXIgdm90ZXMsIGluIG9yZGVyIHRoYXQgeW91IG1heSBoZWFyIHdoYXQgdGhleQogICAgICAgICAgICAgICAgICAgIG9yZGFpbiBhbmQgaW4gd2hhdCB3YXkgdGhlIGRlZmVuZGFudHMgaGF2ZSB0cmFuc2dyZXNzZWQgdGhlbTsgYW5kIHdoZW4geW91IGFyZQogICAgICAgICAgICAgICAgICAgIGNvbmNlcm5lZCB3aXRoIHRoZSBkZWZlbnNlLCBiZWFyIGluIG1pbmQgdGhlIGNoYXJnZXMgd2hpY2ggdGhlIGxhd3MgcHJlZmVyIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBwcm9vZnMgb2ZmZXJlZCBieSB0aGUgdGVzdGltb255IGdpdmVuOyBhbmQgd2l0aCBhIGdsYW5jZSBhdCB0aGUgd29tYW4ncwogICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2UsIGNvbnNpZGVyIHRoaXMgYW5kIHRoaXMgb25seeKAlHdoZXRoZXIgc2hlLCBiZWluZyBOZWFlcmEsIGhhcwogICAgICAgICAgICAgICAgICAgIGRvbmUgdGhlc2UgdGhpbmdzLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.116'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTYiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkl0IGlzIHdvcnRoIHlvdXIgd2hpbGUsIG1lbiBvZiBBdGhlbnMsIHRvIGNvbnNpZGVyIHRoaXMKICAgICAgICAgICAgICAgICAgICBhbHNv4oCUdGhhdCB5b3UgcHVuaXNoZWQgQXJjaGlhcywgd2hvIGhhZCBiZWVuIGhpZXJvcGhhbnQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlRoZSBoaWdoLXByaWVzdCBvZiB0aGUgdGVtcGxlIGF0IEVsZXVzaXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgIHdoZW4gaGUgd2FzIGNvbnZpY3RlZCBpbiBjb3VydCBvZiBpbXBpZXR5IGFuZCBvZiBvZmZlcmluZyBzYWNyaWZpY2UgY29udHJhcnkgdG8KICAgICAgICAgICAgICAgICAgICB0aGUgcml0ZXMgaGFuZGVkIGRvd24gYnkgb3VyIGZhdGhlcnMuIEFtb25nIHRoZSBjaGFyZ2VzIGJyb3VnaHQgYWdhaW5zdCBoaW0gd2FzLAogICAgICAgICAgICAgICAgICAgIHRoYXQgYXQgdGhlIGZlYXN0IG9mIHRoZSBoYXJ2ZXN0PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPkxpdGVyYWxseSwgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXN0IG9mIHRoZSB0aHJlc2hpbmctZmxvb3IuIFRoaXMgd2FzIGNlbGVicmF0ZWQgaW4gdGhlIG1vbnRoIFBvc2VpZGVvbgogICAgICAgICAgICAgICAgICAgICAgICDvvIh0aGUgbGF0dGVyIGhhbGYgb2YgRGVjZW1iZXIgYW5kIHRoZSBwcmlvciBoYWxmIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEphbnVhcnnvvIkuPC9ub3RlPiBoZSBzYWNyaWZpY2VkIG9uIHRoZSBhbHRhciBpbiB0aGUgY291cnQgYXQgRWxldXNpcwogICAgICAgICAgICAgICAgICAgIGEgdmljdGltIGJyb3VnaHQgYnkgdGhlIGNvdXJ0ZXNhbiBTaW5vcCwgYWx0aG91Z2ggaXQgd2FzIG5vdCBsYXdmdWwgdG8gb2ZmZXIKICAgICAgICAgICAgICAgICAgICB2aWN0aW1zIG9uIHRoYXQgZGF5LCBhbmQgdGhlIHNhY3JpZmljZSB3YXMgbm90IGhpcyB0byBwZXJmb3JtLCBidXQgdGhlCiAgICAgICAgICAgICAgICAgICAgcHJpZXN0ZXNzJy4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.117'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTciIHVuaXQ9InNlY3Rpb24iIC8+SXQgaXMsIHRoZW4sIGEgbW9uc3Ryb3VzIHRoaW5nCiAgICAgICAgICAgICAgICAgICAgdGhhdCBhIG1hbiB3aG8gd2FzIG9mIHRoZSByYWNlIG9mIHRoZSBFdW1vbHBpZGFlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJMb2ViIj5UaGUgRXVtb2xwaWRhZSB3ZXJlIGRlc2NlbmRhbnRzIG9mIHRoZSBsZWdlbmRhcnkgRXVtb2xwdXMuCiAgICAgICAgICAgICAgICAgICAgICAgIENlcnRhaW4gc2FjcmVkIGZ1bmN0aW9ucyBjb25uZWN0ZWQgd2l0aCB0aGUgd29yc2hpcCBvZiBEZW1ldGVyIGFuZCBEaW9ueXN1cwogICAgICAgICAgICAgICAgICAgICAgICB3ZXJlIHRoZWlycyBieSBhbmNlc3RyYWwgcmlnaHQ7IGZvciBpbnN0YW5jZSwgdGhlIEhpZXJvcGhhbnQgaGFkIGFsd2F5cyB0bwogICAgICAgICAgICAgICAgICAgICAgICBiZSBhIEV1bW9scGlkLCBhcyB0aGVyZWZvcmUgQXJjaGlhcyB3YXMuPC9ub3RlPiBib3JuIG9mIGhvbm9yYWJsZSBhbmNlc3RvcnMKICAgICAgICAgICAgICAgICAgICBhbmQgYSBjaXRpemVuIG9mIEF0aGVucywgc2hvdWxkIGJlIHB1bmlzaGVkIGZvciBoYXZpbmcgdHJhbnNncmVzc2VkIG9uZSBvZiB5b3VyCiAgICAgICAgICAgICAgICAgICAgZXN0YWJsaXNoZWQgY3VzdG9tczsgYW5kIHRoZSBwbGVhZGluZ3Mgb2YgaGlzIHJlbGF0aXZlcyBhbmQgZnJpZW5kcyBkaWQgbm90IHNhdmUKICAgICAgICAgICAgICAgICAgICBoaW0sIG5vciB0aGUgcHVibGljIHNlcnZpY2VzIHdoaWNoIGhlIGFuZCBoaXMgYW5jZXN0b3JzIGhhZCByZW5kZXJlZCB0byB0aGUKICAgICAgICAgICAgICAgICAgICBjaXR5OyBubywgbm9yIHlldCBoaXMgb2ZmaWNlIG9mIGhpZXJvcGhhbnQ7IGJ1dCB5b3UgcHVuaXNoZWQgaGltLCBiZWNhdXNlIGhlIHdhcwogICAgICAgICAgICAgICAgICAgIGp1ZGdlZCB0byBiZSBndWlsdHk74oCUYW5kIHRoaXMgTmVhZXJhLCB3aG8gaGFzIGNvbW1pdHRlZCBhY3RzIG9mCiAgICAgICAgICAgICAgICAgICAgc2FjcmlsZWdlIGFnYWluc3QgdGhpcyBzYW1lIGdvZCwgYW5kIGhhcyB0cmFuc2dyZXNzZWQgdGhlIGxhd3MsIHNoYWxsIHlvdSBub3QKICAgICAgICAgICAgICAgICAgICBwdW5pc2ggaGVy4oCUaGVyIGFuZCBoZXIgZGF1Z2h0ZXI/IDwvdHJhbnNsYXRpb24+"
translation['59.speaker.118'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTgiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkkgZm9yIG15IHBhcnQgd29uZGVyIHdoYXQgaW4gdGhlIHdvcmxkIHRoZXkKICAgICAgICAgICAgICAgICAgICB3aWxsIHNheSB0byB5b3UgaW4gdGhlaXIgZGVmZW5zZS4gV2lsbCBpdCBiZSB0aGF0IHRoaXMgd29tYW4gTmVhZXJhIGlzIG9mCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4gYmlydGgsIGFuZCB0aGF0IHNoZSBsaXZlcyBhcyBoaXMgd2lmZSB3aXRoIFN0ZXBoYW51cyBpbiBhY2NvcmRhbmNlIHdpdGgKICAgICAgICAgICAgICAgICAgICB0aGUgbGF3cz8gQnV0IHRlc3RpbW9ueSBoYXMgYmVlbiBvZmZlcmVkLCBzaG93aW5nIHRoYXQgc2hlIGlzIGEgY291cnRlc2FuLCBhbmQKICAgICAgICAgICAgICAgICAgICBoYXMgYmVlbiB0aGUgc2xhdmUgb2YgTmljYXJldMOqLiBPciB3aWxsIHRoZXkgY2xhaW0gdGhhdCBzaGUgaXMgbm90IGhpcwogICAgICAgICAgICAgICAgICAgIHdpZmUsIGJ1dCB0aGF0IGhlIGtlZXBzIGhlciBpbiBoaXMgaG91c2UgYXMgYSBjb25jdWJpbmU/IFlldCB0aGUgd29tYW4ncyBzb25zLAogICAgICAgICAgICAgICAgICAgIGJ5IGhhdmluZyBiZWVuIGludHJvZHVjZWQgdG8gdGhlIGNsYW5zbWVuIGJ5IFN0ZXBoYW51cywgYW5kIGhlciBkYXVnaHRlciwgYnkKICAgICAgICAgICAgICAgICAgICBoYXZpbmcgYmVlbiBnaXZlbiBpbiBtYXJyaWFnZSB0byBhbiBBdGhlbmlhbiBodXNiYW5kLCBwcm92ZSBiZXlvbmQgcXVlc3Rpb24gdGhhdAogICAgICAgICAgICAgICAgICAgIGhlIGtlZXBzIGhlciBhcyBoaXMgd2lmZS4gPC90cmFuc2xhdGlvbj4="
translation['59.speaker.119'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMTkiIHVuaXQ9InNlY3Rpb24iIC8+SSB0aGluaywgdGhlcmVmb3JlLAogICAgICAgICAgICAgICAgICAgIHRoYXQgbmVpdGhlciBTdGVwaGFudXMgaGltc2VsZiBub3IgYW55b25lIG9uIGhpcyBiZWhhbGYgd2lsbCBzdWNjZWVkIGluIHByb3ZpbmcKICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBjaGFyZ2VzIGFuZCB0aGUgdGVzdGltb255IGFyZSBmYWxzZeKAlHRoYXQsIGluIHNob3J0LCB0aGlzCiAgICAgICAgICAgICAgICAgICAgTmVhZXJhIGlzIGFuIEF0aGVuaWFuIHdvbWFuLiBCdXQgSSBoZWFyIHRoYXQgaGUgaXMgZ29pbmcgdG8gc2V0IHVwIHNvbWUgc3VjaAogICAgICAgICAgICAgICAgICAgIGRlZmVuc2UgYXMgdGhpc+KAlHRoYXQgaGUgaXMga2VlcGluZyBoZXIsIG5vdCBhcyBhIHdpZmUsIGJ1dCBhcyBhCiAgICAgICAgICAgICAgICAgICAgbWlzdHJlc3MsIGFuZCB0aGF0IHRoZSBjaGlsZHJlbiBhcmUgbm90IGhlcnMsIGJ1dCB3ZXJlIGJvcm4gdG8gaGltIGJ5IGFub3RoZXIKICAgICAgICAgICAgICAgICAgICB3b21hbiwgYW4gQXRoZW5pYW4gYW5kIGEgcmVsYXRpdmUgb2YgaGlzLCB3aG9tIGhlIHdpbGwgYXNzZXJ0IHRoYXQgaGUgbWFycmllZCBhdAogICAgICAgICAgICAgICAgICAgIGEgZWFybGllciBkYXRlLiA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.120'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjAiIHVuaXQ9InNlY3Rpb24iIC8+VG8gbWVldCB0aGUgaW1wdWRlbmNlIG9mIHRoaXMKICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24gb2YgaGlzLCBvZiB0aGUgZGVmZW5zZSB3aGljaCBoZSBoYXMgY29uY29jdGVkLCBhbmQgb2YgdGhlIHdpdG5lc3NlcwogICAgICAgICAgICAgICAgICAgIHdob20gaGUgaGFzIHN1Ym9ybmVkIHRvIHN1cHBvcnQgaXQsIEkgdGVuZGVyZWQgaGltIGEgcHJlY2lzZSBhbmQgcmVhc29uYWJsZQogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZSwgYnkgbWVhbnMgb2Ygd2hpY2ggeW91IHdvdWxkIGhhdmUgYmVlbiBlbmFibGVkIHRvIGtub3cgdGhlIHdob2xlCiAgICAgICAgICAgICAgICAgICAgdHJ1dGg6IEkgcHJvcG9zZWQgdGhhdCBoZSBzaG91bGQgZGVsaXZlciB1cCBmb3IgdGhlIHRvcnR1cmUgdGhlIHdvbWVuLXNlcnZhbnRzLAogICAgICAgICAgICAgICAgICAgIFRocmF0dGEgYW5kIENvY2NhbGluw6osIHdobyByZW1haW5lZCBsb3lhbGx5IHdpdGggTmVhZXJhIHdoZW4gc2hlIGNhbWUKICAgICAgICAgICAgICAgICAgICB0byBTdGVwaGFudXMgZnJvbSBNZWdhcmEsIGFuZCB0aG9zZSB3aG9tIHNoZSBwdXJjaGFzZWQgc3Vic2VxdWVudGx5LCB3aGlsZQogICAgICAgICAgICAgICAgICAgIGxpdmluZyB3aXRoIGhpbSwgWGVubmlzIGFuZCBEcm9zaXM7IDwvdHJhbnNsYXRpb24+"
translation['59.speaker.121'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjEiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgd29tZW4ga25vdyBwZXJmZWN0bHkgd2VsbCB0aGF0IFByb3hlbnVzLCB3aG8gZGllZCwgQXJpc3Rvbiwgd2hvIGlzIHN0aWxsIGxpdmluZywKICAgICAgICAgICAgICAgICAgICBhbmQgQW50aWRvcmlkZXMgdGhlIHJ1bm5lciwgYW5kIFBoYW5vLCBmb3JtZXJseSBjYWxsZWQgU3RyeWJlbCwgd2hvIG1hcnJpZWQKICAgICAgICAgICAgICAgICAgICBUaGVvZ2VuZXMsIHRoZSBraW5nLCBhcmUgY2hpbGRyZW4gb2YgTmVhZXJhLiBBbmQgaWYgaXQgc2hvdWxkIGFwcGVhciBmcm9tIHRoZQogICAgICAgICAgICAgICAgICAgIHRvcnR1cmUgdGhhdCB0aGlzIG1hbiBTdGVwaGFudXMgaGFkIG1hcnJpZWQgYW4gQXRoZW5pYW4gd2lmZSBhbmQgdGhhdCB0aGVzZQogICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuIHdlcmUgYm9ybmUgdG8gaGltLCBub3QgYnkgTmVhZXJhLCBidXQgYnkgYW5vdGhlciB3b21hbiB3aG8gd2FzIGFuCiAgICAgICAgICAgICAgICAgICAgQXRoZW5pYW4sIEkgb2ZmZXJlZCB0byB3aXRoZHJhdyBmcm9tIHRoZSBjYXNlIGFuZCB0byBwcmV2ZW50IHRoaXMgaW5kaWN0bWVudAogICAgICAgICAgICAgICAgICAgIGZyb20gY29taW5nIGludG8gY291cnQuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.122'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgaXMgd2hhdAogICAgICAgICAgICAgICAgICAgIGxpdmluZyB3aXRoIGEgd29tYW4gYXMgb25lJ3Mgd2lmZSBtZWFuc+KAlHRvIGhhdmUgY2hpbGRyZW4gYnkgaGVyIGFuZCB0bwogICAgICAgICAgICAgICAgICAgIGludHJvZHVjZSB0aGUgc29ucyB0byB0aGUgbWVtYmVycyBvZiB0aGUgY2xhbiBhbmQgb2YgdGhlIGRlbWUsIGFuZCB0byBiZXRyb3RoCiAgICAgICAgICAgICAgICAgICAgdGhlIGRhdWdodGVycyB0byBodXNiYW5kcyBhcyBvbmUncyBvd24uIE1pc3RyZXNzZXMgd2Uga2VlcCBmb3IgdGhlIHNha2Ugb2YKICAgICAgICAgICAgICAgICAgICBwbGVhc3VyZSwgY29uY3ViaW5lcyBmb3IgdGhlIGRhaWx5IGNhcmUgb2Ygb3VyIHBlcnNvbnMsIGJ1dCB3aXZlcyB0byBiZWFyIHVzCiAgICAgICAgICAgICAgICAgICAgbGVnaXRpbWF0ZSBjaGlsZHJlbiBhbmQgdG8gYmUgZmFpdGhmdWwgZ3VhcmRpYW5zIG9mIG91ciBob3VzZWhvbGRzLiBJZiwKICAgICAgICAgICAgICAgICAgICB0aGVyZWZvcmUsIFN0ZXBoYW51cyBoYWQgcHJldmlvdXNseSBtYXJyaWVkIGFuIEF0aGVuaWFuIHdvbWFuLCBhbmQgdGhlc2UKICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiBhcmUgaGVycyBhbmQgbm90IE5lYWVyYSdzLCBoZSBjb3VsZCBoYXZlIHNob3duIGl0IGJ5IHRoZSBtb3N0IGNlcnRhaW4KICAgICAgICAgICAgICAgICAgICBldmlkZW5jZSwgYnkgZGVsaXZlcmluZyB1cCB0aGVzZSB3b21lbi1zZXJ2YW50cyBmb3IgdGhlIHRvcnR1cmUuIDwvdHJhbnNsYXRpb24+"
translation['59.speaker.123'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjMiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPlRvIHByb3ZlIHRoYXQgSSBzbwogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZWQgaGltLCB0aGUgY2xlcmsgc2hhbGwgcmVhZCB0byB5b3UgdGhlIGRlcG9zaXRpb24gcmVnYXJkaW5nIHRoZXNlCiAgICAgICAgICAgICAgICAgICAgbWF0dGVycyBhbmQgdGhlIGNoYWxsZW5nZS48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+UmVhZCB0aGUgZGVwb3NpdGlvbiBhbmQKICAgICAgICAgICAgICAgICAgICB0aGVuIHRoZSBjaGFsbGVuZ2UuPHF1b3RlIGNsYXNzPSJ0cmFuc2xhdGlvbiIgdHlwZT0iRGVwb3NpdGlvbiI+PHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGVwb3NpdGlvbjwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkhpcHBvY3JhdGVzLCBzb24gb2YgSGlwcG9jcmF0ZXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9iYWxpbnRodXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9IkxvZWIiPlByb2JhbGludGh1cyB3YXMgYSBkZW1lIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdHJpYmUgUGFuZGlvbmlzLCBQYWVhbmlhIG9mIHRoZSB0cmliZSBQYW5kaW9uaXMsIEFsb3BlY8OqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJpYmUgQW50aW9jaGlzLCBDeWRhdGhlbmFldW0gb2YgdGhlIHRyaWJlIFBhbmRpb25pcywgQ3lkYW50aWRhZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgdGhlIHRyaWJlIEFlZ2XDr3MsIGFuZCBBZWdpbGlhIG9mIHRoZSB0cmliZSBBbnRpb2NoaXMuPC9ub3RlPgogICAgICAgICAgICAgICAgICAgICAgICBEZW1vc3RoZW5lcywgc29uIG9mIERlbW9zdGhlbmVzLCBvZiBQYWVhbmlhLCBEaW9waGFuZXMsIHNvbiBvZiBEaW9waGFuZXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEFsb3BlY8OqLCBEZWlub21lbmVzLCBzb24gb2YgQXJjaGVsYXVzLCBvZiBDeWRhdGhlbmFldW0sIERlaW5pYXMsCiAgICAgICAgICAgICAgICAgICAgICAgIHNvbiBvZiBQaG9ybWlkZXMsIG9mIEN5ZGFudGlkYWUsIGFuZCBMeXNpbWFjaHVzLCBzb24gb2YgTHlzaXBwdXMsIG9mCiAgICAgICAgICAgICAgICAgICAgICAgIEFlZ2lsaWEsIGRlcG9zZSB0aGF0IHRoZXkgd2VyZSBwcmVzZW50IGluIHRoZSBhZ29yYSwgd2hlbiBBcG9sbG9kb3J1cwogICAgICAgICAgICAgICAgICAgICAgICBjaGFsbGVuZ2VkIFN0ZXBoYW51cywgZGVtYW5kaW5nIHRoYXQgaGUgZGVsaXZlciB1cCB0aGUgd29tZW4tc2VydmFudHMgZm9yCiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0b3J0dXJlIGluIHJlZ2FyZCB0byB0aGUgY2hhcmdlcyBwcmVmZXJyZWQgYWdhaW5zdCBTdGVwaGFudXMgYnkKICAgICAgICAgICAgICAgICAgICAgICAgQXBvbG9kb3J1cyBjb25jZXJuaW5nIE5lYWVyYTsgYW5kIHRoYXQgU3RlcGhhbnVzIHJlZnVzZWQgdG8gZGVsaXZlciB1cCB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgd29tZW4tc2VydmFudHM7IGFuZCB0aGF0IHRoZSBjaGFsbGVuZ2Ugd2FzIHRoZSBvbmUgd2hpY2ggQXBvbGxvZG9ydXMKICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjZXMuPC9xdW90ZT4KICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZXBvc2l0aW9uPC90aXRsZT48bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZWQ9IlAiIHVuaXQ9InBhcmEiIC8+SGlwcG9jcmF0ZXMsIHNvbiBvZiBIaXBwb2NyYXRlcywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2JhbGludGh1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iTG9lYiI+UHJvYmFsaW50aHVzIHdhcyBhIGRlbWUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0cmliZSBQYW5kaW9uaXMsIFBhZWFuaWEgb2YgdGhlIHRyaWJlIFBhbmRpb25pcywgQWxvcGVjw6oKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHRoZSB0cmliZSBBbnRpb2NoaXMsIEN5ZGF0aGVuYWV1bSBvZiB0aGUgdHJpYmUgUGFuZGlvbmlzLCBDeWRhbnRpZGFlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgdHJpYmUgQWVnZcOvcywgYW5kIEFlZ2lsaWEgb2YgdGhlIHRyaWJlIEFudGlvY2hpcy48L25vdGU+CiAgICAgICAgICAgICAgICAgICAgICAgIERlbW9zdGhlbmVzLCBzb24gb2YgRGVtb3N0aGVuZXMsIG9mIFBhZWFuaWEsIERpb3BoYW5lcywgc29uIG9mIERpb3BoYW5lcywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQWxvcGVjw6osIERlaW5vbWVuZXMsIHNvbiBvZiBBcmNoZWxhdXMsIG9mIEN5ZGF0aGVuYWV1bSwgRGVpbmlhcywKICAgICAgICAgICAgICAgICAgICAgICAgc29uIG9mIFBob3JtaWRlcywgb2YgQ3lkYW50aWRhZSwgYW5kIEx5c2ltYWNodXMsIHNvbiBvZiBMeXNpcHB1cywgb2YKICAgICAgICAgICAgICAgICAgICAgICAgQWVnaWxpYSwgZGVwb3NlIHRoYXQgdGhleSB3ZXJlIHByZXNlbnQgaW4gdGhlIGFnb3JhLCB3aGVuIEFwb2xsb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZWQgU3RlcGhhbnVzLCBkZW1hbmRpbmcgdGhhdCBoZSBkZWxpdmVyIHVwIHRoZSB3b21lbi1zZXJ2YW50cyBmb3IKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRvcnR1cmUgaW4gcmVnYXJkIHRvIHRoZSBjaGFyZ2VzIHByZWZlcnJlZCBhZ2FpbnN0IFN0ZXBoYW51cyBieQogICAgICAgICAgICAgICAgICAgICAgICBBcG9sb2RvcnVzIGNvbmNlcm5pbmcgTmVhZXJhOyBhbmQgdGhhdCBTdGVwaGFudXMgcmVmdXNlZCB0byBkZWxpdmVyIHVwIHRoZQogICAgICAgICAgICAgICAgICAgICAgICB3b21lbi1zZXJ2YW50czsgYW5kIHRoYXQgdGhlIGNoYWxsZW5nZSB3YXMgdGhlIG9uZSB3aGljaCBBcG9sbG9kb3J1cwogICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWNlcy48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.124'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjQiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk5vdyByZWFkIHRoZQogICAgICAgICAgICAgICAgICAgIGNoYWxsZW5nZSBpdHNlbGYgd2hpY2ggSSB0ZW5kZXJlZCB0byB0aGlzIFN0ZXBoYW51cy48cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiB0eXBlPSJDaGFsbGVuZ2UiPjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFwb2xsb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRlbmRlcmVkIHRoaXMgY2hhbGxlbmdlIHRvIFN0ZXBoYW51cyBpbiBjb25uZWN0aW9uIHdpdGggdGhlIGluZGljdG1lbnQgd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgaGUgcHJlZmVycmVkIGFnYWluc3QgTmVhZXJhLCBjaGFyZ2luZyB0aGF0IHNoZSwgYmVpbmcgYW4gYWxpZW4sIGlzIGxpdmluZyBhcwogICAgICAgICAgICAgICAgICAgICAgICB3aWZlIHdpdGggaGltLCBhIGNpdGl6ZW4uIEFwb2xsb2RvcnVzIGlzIHJlYWR5IHRvIHJlY2VpdmUgZm9yIGV4YW1pbmF0aW9uIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0b3J0dXJlIHRoZSB3b21lbi1zZXJ2YW50cyBvZiBOZWFlcmEsIFRocmF0dGEgYW5kIENvY2NhbGluw6osCiAgICAgICAgICAgICAgICAgICAgICAgIHdob20gc2hlIGJyb3VnaHQgd2l0aCBoZXIgZnJvbSBNZWdhcmEsIGFuZCB0aG9zZSB3aG9tIHNoZSBzdWJzZXF1ZW50bHkKICAgICAgICAgICAgICAgICAgICAgICAgcHVyY2hhc2VkIHdoaWxlIGxpdmluZyB3aXRoIFN0ZXBoYW51c+KAlFhlbm5pcywgbmFtZWx5LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgRHJvc2lz4oCUd29tZW4gd2hvIGhhdmUgYWNjdXJhdGUga25vd2xlZGdlIHJlZ2FyZGluZyB0aGUgY2hpbGRyZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgTmVhZXJhLCB0aGF0IHRoZXkgYXJlIG5vdCBieSBTdGVwaGFudXMuIFRoZXNlIGFyZSBQcm94ZW51cywgd2hvIGRpZWQsCiAgICAgICAgICAgICAgICAgICAgICAgIEFyaXN0b24sIHdobyBpcyBub3cgbGl2aW5nLCBBbnRpZG9yaWRlcyB0aGUgcnVubmVyLCBhbmQgUGhhbm8uIEFuZCBpZiB0aGV5CiAgICAgICAgICAgICAgICAgICAgICAgIGFncmVlZCB0aGF0IHRoZXNlIGNoaWxkcmVuIGFyZSBOZWFlcmEncywgSSBkZW1hbmRlZCB0aGF0IE5lYWVyYSBiZSBzb2xkIGFzIGEKICAgICAgICAgICAgICAgICAgICAgICAgc2xhdmUgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXcsIGFuZCB0aGF0IGhlciBjaGlsZHJlbiBiZSBkZWNsYXJlZCBhbGllbnM7CiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCBpZiB0aGV5IGFncmVlZCB0aGF0IHRoZSBjaGlsZHJlbiBhcmUgbm90IGhlcnMgYnV0IHdlcmUgYm9ybiBvZiBzb21lCiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIHdvbWFuIHdobyB3YXMgYW4gQXRoZW5pYW4sIHRoZW4gSSBvZmZlcmVkIHRvIHdpdGhkcmF3IGZyb20gdGhlIGFjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IE5lYWVyYSwgYW5kIGlmIHRoZSB3b21lbiBoYWQgYmVlbiBpbmp1cmVkIGluIGFueSB3YXkgYXMgYSByZXN1bHQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRvcnR1cmUsIHRvIHBheSBmb3IgdGhlIGluanVyaWVzIHN1c3RhaW5lZC48L3F1b3RlPgogICAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNoYWxsZW5nZTwvdGl0bGU+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPkFwb2xsb2RvcnVzCiAgICAgICAgICAgICAgICAgICAgICAgIHRlbmRlcmVkIHRoaXMgY2hhbGxlbmdlIHRvIFN0ZXBoYW51cyBpbiBjb25uZWN0aW9uIHdpdGggdGhlIGluZGljdG1lbnQgd2hpY2gKICAgICAgICAgICAgICAgICAgICAgICAgaGUgcHJlZmVycmVkIGFnYWluc3QgTmVhZXJhLCBjaGFyZ2luZyB0aGF0IHNoZSwgYmVpbmcgYW4gYWxpZW4sIGlzIGxpdmluZyBhcwogICAgICAgICAgICAgICAgICAgICAgICB3aWZlIHdpdGggaGltLCBhIGNpdGl6ZW4uIEFwb2xsb2RvcnVzIGlzIHJlYWR5IHRvIHJlY2VpdmUgZm9yIGV4YW1pbmF0aW9uIGJ5CiAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB0b3J0dXJlIHRoZSB3b21lbi1zZXJ2YW50cyBvZiBOZWFlcmEsIFRocmF0dGEgYW5kIENvY2NhbGluw6osCiAgICAgICAgICAgICAgICAgICAgICAgIHdob20gc2hlIGJyb3VnaHQgd2l0aCBoZXIgZnJvbSBNZWdhcmEsIGFuZCB0aG9zZSB3aG9tIHNoZSBzdWJzZXF1ZW50bHkKICAgICAgICAgICAgICAgICAgICAgICAgcHVyY2hhc2VkIHdoaWxlIGxpdmluZyB3aXRoIFN0ZXBoYW51c+KAlFhlbm5pcywgbmFtZWx5LCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgRHJvc2lz4oCUd29tZW4gd2hvIGhhdmUgYWNjdXJhdGUga25vd2xlZGdlIHJlZ2FyZGluZyB0aGUgY2hpbGRyZW4gb2YKICAgICAgICAgICAgICAgICAgICAgICAgTmVhZXJhLCB0aGF0IHRoZXkgYXJlIG5vdCBieSBTdGVwaGFudXMuIFRoZXNlIGFyZSBQcm94ZW51cywgd2hvIGRpZWQsCiAgICAgICAgICAgICAgICAgICAgICAgIEFyaXN0b24sIHdobyBpcyBub3cgbGl2aW5nLCBBbnRpZG9yaWRlcyB0aGUgcnVubmVyLCBhbmQgUGhhbm8uIEFuZCBpZiB0aGV5CiAgICAgICAgICAgICAgICAgICAgICAgIGFncmVlZCB0aGF0IHRoZXNlIGNoaWxkcmVuIGFyZSBOZWFlcmEncywgSSBkZW1hbmRlZCB0aGF0IE5lYWVyYSBiZSBzb2xkIGFzIGEKICAgICAgICAgICAgICAgICAgICAgICAgc2xhdmUgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBsYXcsIGFuZCB0aGF0IGhlciBjaGlsZHJlbiBiZSBkZWNsYXJlZCBhbGllbnM7CiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCBpZiB0aGV5IGFncmVlZCB0aGF0IHRoZSBjaGlsZHJlbiBhcmUgbm90IGhlcnMgYnV0IHdlcmUgYm9ybiBvZiBzb21lCiAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIHdvbWFuIHdobyB3YXMgYW4gQXRoZW5pYW4sIHRoZW4gSSBvZmZlcmVkIHRvIHdpdGhkcmF3IGZyb20gdGhlIGFjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBhZ2FpbnN0IE5lYWVyYSwgYW5kIGlmIHRoZSB3b21lbiBoYWQgYmVlbiBpbmp1cmVkIGluIGFueSB3YXkgYXMgYSByZXN1bHQgb2YKICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHRvcnR1cmUsIHRvIHBheSBmb3IgdGhlIGluanVyaWVzIHN1c3RhaW5lZC48L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.125'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMjUiIHVuaXQ9InNlY3Rpb24iIC8+PG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIGVkPSJQIiB1bml0PSJwYXJhIiAvPk9uIG15CiAgICAgICAgICAgICAgICAgICAgdGVuZGVyaW5nIHRoaXMgY2hhbGxlbmdlIHRvIFN0ZXBoYW51cywgbWVuIG9mIHRoZSBqdXJ5LCBoZSByZWZ1c2VkIHRvIGFjY2VwdCBpdC4KICAgICAgICAgICAgICAgICAgICBEb2VzIGl0IG5vdCwgdGhlbiwgYXBwZWFyIHRvIHlvdSwgbWVuIG9mIHRoZSBqdXJ5LCB0aGF0IGEgdmVyZGljdCBoYXMgYmVlbiBnaXZlbgogICAgICAgICAgICAgICAgICAgIGJ5IFN0ZXBoYW51cyBoZXJlIGhpbXNlbGYgdGhhdCBOZWFlcmEgaXMgZ3VpbHR5IHVuZGVyIHRoZSBpbmRpY3RtZW50IHdoaWNoIEkKICAgICAgICAgICAgICAgICAgICBwcmVmZXJyZWQgYWdhaW5zdCBoZXIsIGFuZCB0aGF0IEkgaGF2ZSB0b2xkIHlvdSB0aGUgdHJ1dGggYW5kIHByb2R1Y2VkIHRlc3RpbW9ueQogICAgICAgICAgICAgICAgICAgIHdoaWNoIGlzIHRydWUsIHdoZXJlYXMgd2hhdGV2ZXIgU3RlcGhhbnVzIG1heSBzYXkgdG8geW91IHdpbGwgYmUgd2hvbGx5IGZhbHNlLAogICAgICAgICAgICAgICAgICAgIGFuZCBoZSB3aWxsIGhpbXNlbGYgcHJvdmUgdGhhdCBoZSBoYXMgbm8gc291bmQgYXJndW1lbnQgdG8gYWR2YW5jZSwgaW5hc211Y2ggYXMKICAgICAgICAgICAgICAgICAgICBoZSBoYXMgcmVmdXNlZCB0byBkZWxpdmVyIHVwIGZvciB0aGUgdG9ydHVyZSB0aGUgd29tZW4tc2VydmFudHMgd2hvbSBJIGRlbWFuZGVkCiAgICAgICAgICAgICAgICAgICAgb2YgaGltPyA8L3RyYW5zbGF0aW9uPg=="
translation['59.speaker.126'] = ""
