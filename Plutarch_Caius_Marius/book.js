var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    for (var i = 0; i < translatedSection.length; i++) {
        translatedSection[i].style.backgroundColor = "";
    }
  }
  translatedSection = document.getElementsByClassName(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "yellow";
  }
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  for (var i = 0; i < translatedSection.length; i++) {
      translatedSection[i].style.backgroundColor = "";
  }
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = "PHRyYW5zbGF0aW9uPjx0ZXh0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgIDxib2R5IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q0FJVVMgTUFSSVVTPC9oZWFkPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgYSB0aGlyZCBuYW1lIGZvciBDYWl1cyBNYXJpdXMgd2UgYXJlIGlnbm9yYW50LCBhcyB3ZSBhcmUgaW4gdGhlIGNhc2Ugb2YgUXVpbnR1cyBTZXJ0b3JpdXMgdGhlIHN1YmR1ZXIgb2YgU3BhaW4sIGFuZCBvZiBMdWNpdXMgTXVtbWl1cyB0aGUgY2FwdG9yIG9mIENvcmludGg7IGZvciBNdW1taXVzIHJlY2VpdmVkIHRoZSBzdXJuYW1lIG9mIEFjaGHDr2N1cyBmcm9tIGhpcyBncmVhdCBleHBsb2l0LCBhcyBTY2lwaW8gcmVjZWl2ZWQgdGhhdCBvZiBBZnJpY2FudXMsIGFuZCBNZXRlbGx1cyB0aGF0IG9mIE1hY2Vkb25pY3VzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhpcyBjaXJjdW1zdGFuY2UgcGFydGljdWxhcmx5IFBvc2VpZG9uaXVzIHRoaW5rcyB0byBjb25mdXRlIHRob3NlIHdobyBob2xkIHRoYXQgdGhlIHRoaXJkIG5hbWUgaXMgdGhlIFJvbWFuIHByb3BlciBuYW1lLCBhcywgZm9yIGluc3RhbmNlLCBDYW1pbGx1cywgTWFyY2VsbHVzLCBvciBDYXRvOyBmb3IgaWYgdGhhdCB3ZXJlIHNvLCBoZSBzYXlzLCB0aGVuIHRob3NlIHdpdGggb25seSB0d28gbmFtZXMgd291bGQgaGF2ZSBoYWQgbm8gcHJvcGVyIG5hbWUgYXQgYWxsLiBCdXQgaXQgZXNjYXBlcyBoaXMgbm90aWNlIHRoYXQgaGlzIG93biBsaW5lIG9mIHJlYXNvbmluZywgaWYgZXh0ZW5kZWQgdG8gd29tZW4sIHJvYnMgdGhlbSBvZiB0aGVpciBwcm9wZXIgbmFtZXM7IGZvciBubyB3b21hbiBpcyBnaXZlbiB0aGUgZmlyc3QgbmFtZSwgd2hpY2ggUG9zZWlkb25pdXMgdGhpbmtzIHdhcyB0aGUgcHJvcGVyIG5hbWUgYW1vbmcgdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIG9mIHRoZSBvdGhlciB0d28gbmFtZXMsIG9uZSB3YXMgY29tbW9uIHRvIHRoZSB3aG9sZSBmYW1pbHksIGFzIGluIHRoZSBjYXNlIG9mIHRoZSBQb21wZWlpLCB0aGUgTWFubGlpLCBvciB0aGUgQ29ybmVsaWkgKGp1c3QgYXMgYSBHcmVlayBtaWdodCBzcGVhayBvZiB0aGUgSGVyYWNsZWlkYWUgb3IgdGhlIFBlbG9waWRhZSksIGFuZCB0aGUgb3RoZXIgd2FzIGEgY29nbm9tZW4gb3IgZXBpdGhldCwgZ2l2ZW4gd2l0aCByZWZlcmVuY2UgdG8gdGhlaXIgbmF0dXJlcyBvciB0aGVpciBhY3Rpb25zLCBvciB0byB0aGVpciBib2RpbHkgYXBwZWFyYW5jZXMgb3IgZGVmZWN0cywgTWFjcmludXMsIGZvciBleGFtcGxlLCBvciBUb3JxdWF0dXMsIG9yIFN1bGxhIChsaWtlIHRoZSBHcmVlayBNbmVtb24sIEdyeXB1cywgb3IgQ2FsbGluaWN1cykuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBmdWxsIG5hbWUgb2YgYSBSb21hbiBjaXRpemVuIGNvbnNpc3RlZCBvZiBhIDxmb3JlaWduIGxhbmc9ImxhIj5wcmFlbm9tZW4gPC9mb3JlaWduPiAodGhlIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Z2xvc3M+Z2l2ZW4gPC9nbG9zcz4sPC9xPiBvciAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGdsb3NzPnByb3BlciA8L2dsb3NzPgogICAgICAgICAgICAgICA8L3E+IG5hbWUpLCBhIDxmb3JlaWduIGxhbmc9ImxhIj5ub21lbiA8L2ZvcmVpZ24+IGRlc2lnbmF0aW5nIGhpcyBmYW1pbHkgb3IgPGZvcmVpZ24gbGFuZz0ibGEiPmdlbnMgPC9mb3JlaWduPiwgYW5kIGEgPGZvcmVpZ24gbGFuZz0ibGEiPmNvZ25vbWVuIDwvZm9yZWlnbj4sIHdoaWNoIHdhcyBhbHNvIGhlcmVkaXRhcnkuIFdvbWVuIHJhcmVseSBoYWQgYSA8Zm9yZWlnbiBsYW5nPSJsYSI+cHJhZW5vbWVuIDwvZm9yZWlnbj4sIG9yIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Z2xvc3M+cHJvcGVyIDwvZ2xvc3M+CiAgICAgICAgICAgICAgIDwvcT4gbmFtZSwgYnV0IGJvcmUgdGhlIGZhbWlseSBuYW1lIG9ubHkuIDwvbm90ZT4gSG93ZXZlciwgaW4gdGhlc2UgbWF0dGVycyB0aGUgaXJyZWd1bGFyaXR5IG9mIGN1c3RvbSBmdXJuaXNoZXMgbWFueSB0b3BpY3MgZm9yIGRpc2N1c3Npb24uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgcGVyc29uYWwgYXBwZWFyYW5jZSBvZiBNYXJpdXMsIHdlIGhhdmUgc2VlbiBhIG1hcmJsZSBzdGF0dWUgb2YgaGltIGF0IFJhdmVubmEgaW4gR2F1bCwgYW5kIGl0IHZlcnkgd2VsbCBwb3J0cmF5cyB0aGUgaGFyc2huZXNzIGFuZCBiaXR0ZXJuZXNzIG9mIGNoYXJhY3RlciB3aGljaCBhcmUgYXNjcmliZWQgdG8gaGltLiBGb3Igc2luY2UgaGUgd2FzIG5hdHVyYWxseSB2aXJpbGUgYW5kIGZvbmQgb2Ygd2FyLCBhbmQgc2luY2UgaGUgcmVjZWl2ZWQgYSB0cmFpbmluZyBpbiBtaWxpdGFyeSByYXRoZXIgdGhhbiBpbiBjaXZpbCBsaWZlLCBoaXMgdGVtcGVyIHdhcyBmaWVyY2Ugd2hlbiBoZSBjYW1lIHRvIGV4ZXJjaXNlIGF1dGhvcml0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdlIGFyZSB0b2xkIHRoYXQgaGUgbmV2ZXIgc3R1ZGllZCBHcmVlayBsaXRlcmF0dXJlLCBhbmQgbmV2ZXIgdXNlZCB0aGUgR3JlZWsgbGFuZ3VhZ2UgZm9yIGFueSBtYXR0ZXIgb2YgcmVhbCBpbXBvcnRhbmNlLCB0aGlua2luZyBpdCByaWRpY3Vsb3VzIHRvIHN0dWR5IGEgbGl0ZXJhdHVyZSB0aGUgdGVhY2hlcnMgb2Ygd2hpY2ggd2VyZSB0aGUgc3ViamVjdHMgb2YgYW5vdGhlciBwZW9wbGU7IGFuZCB3aGVuLCBhZnRlciBoaXMgc2Vjb25kIHRyaXVtcGggYW5kIGF0IHRoZSBjb25zZWNyYXRpb24gb2Ygc29tZSB0ZW1wbGUsIGhlIGZ1cm5pc2hlZCB0aGUgcHVibGljIHdpdGggR3JlZWsgc3BlY3RhY2xlcywgdGhvdWdoIGhlIGNhbWUgaW50byB0aGUgdGhlYXRyZSwgaGUgbWVyZWx5IHNhdCBkb3duLCBhbmQgYXQgb25jZSB3ZW50IGF3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBqdXN0IGFzIFBsYXRvIHdhcyB3b250IHRvIHNheSBvZnRlbiB0byBYZW5vY3JhdGVzIHRoZSBwaGlsb3NvcGhlciwgd2hvIGhhZCB0aGUgcmVwdXRhdGlvbiBvZiBiZWluZyByYXRoZXIgbW9yb3NlIGluIGhpcyBkaXNwb3NpdGlvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIFhlbm9jcmF0ZXMsIHNhY3JpZmljZSB0byB0aGUgR3JhY2VzLDwvcT4gc28gaWYgTWFyaXVzIGNvdWxkIGhhdmUgYmVlbiBwZXJzdWFkZWQgdG8gc2FjcmlmaWNlIHRvIHRoZSBHcmVlayBNdXNlcyBhbmQgR3JhY2VzLCBoZSB3b3VsZCBub3QgaGF2ZSBwdXQgdGhlIHVnbGllc3QgcG9zc2libGUgY3Jvd24gdXBvbiBhIG1vc3QgaWxsdXN0cmlvdXMgY2FyZWVyIGluIGZpZWxkIGFuZCBmb3J1bSwgbm9yIGhhdmUgYmVlbiBkcml2ZW4gYnkgdGhlIGJsYXN0cyBvZiBwYXNzaW9uLCBpbGwtdGltZWQgYW1iaXRpb24sIGFuZCBpbnNhdGlhYmxlIGdyZWVkIHVwb24gdGhlIHNob3JlIG9mIGEgbW9zdCBjcnVlbCBhbmQgc2F2YWdlIG9sZCBhZ2UuIEhvd2V2ZXIsIGhpcyBhY3R1YWwgY2FyZWVyIHNoYWxsIGF0IG9uY2UgYnJpbmcgdGhpcyBpbnRvIGNsZWFyIHZpZXcuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJvcm4gb2YgcGFyZW50cyB3aG8gd2VyZSBhbHRvZ2V0aGVyIG9ic2N1cmXigJRwb29yIHBlb3BsZSB3aG8gbGl2ZWQgYnkgdGhlIGxhYm91ciBvZiB0aGVpciBvd24gaGFuZHMgKE1hcml1cyB3YXMgaGlzIGZhdGhlcidzIG5hbWUsIEZ1bGNpbmlhIHRoYXQgb2YgaGlzIG1vdGhlciksIGl0IHdhcyBub3QgdGlsbCBsYXRlIHRoYXQgaGUgc2F3IHRoZSBjaXR5IG9yIGdvdCBhIHRhc3RlIG9mIGNpdHkgd2F5cy4gSW4gdGhlIG1lYW50aW1lIGhlIGxpdmVkIGF0IENpcnJoYWVhdG9uLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBhIGNvcnJ1cHRpb24gZm9yIENlcmVhdGFlLiA8L25vdGU+IGEgdmlsbGFnZSBpbiB0aGUgdGVycml0b3J5IG9mIEFycGludW0sIGluIGEgbWFubmVyIHRoYXQgd2FzIHF1aXRlIHJ1ZGUgd2hlbiBjb21wYXJlZCB3aXRoIHRoZSBwb2xpc2hlZCBsaWZlIG9mIGEgY2l0eSwgYnV0IHRlbXBlcmF0ZSwgYW5kIGluIGhhcm1vbnkgd2l0aCB0aGUgcmVhcmluZyB3aGljaCB0aGUgYW5jaWVudCBSb21hbnMgZ2F2ZSB0aGVpciBjaGlsZHJlbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGZpcnN0IHNlcnZpY2UgYXMgYSBzb2xkaWVyIHdhcyBpbiBhIGNhbXBhaWduIGFnYWluc3QgdGhlIENlbHRpYmVyaWFucywgd2hlbiBTY2lwaW8gQWZyaWNhbnVzIHdhcyBiZXNpZWdpbmcgTnVtYW50aWEsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjEzNC0xMzMgQi5DLiA8L25vdGU+IGFuZCBoZSBhdHRyYWN0ZWQgdGhlIG5vdGljZSBvZiBoaXMgZ2VuZXJhbCBieSBleGNlbGxpbmcgdGhlIG90aGVyIHlvdW5nIG1lbiBpbiBicmF2ZXJ5LCBhbmQgYnkgaGlzIHZlcnkgY2hlZXJmdWwgYWNjZXB0YW5jZSBvZiB0aGUgY2hhbmdlZCByZWdpbWVuIHdoaWNoIFNjaXBpbyBpbnRyb2R1Y2VkIGludG8gaGlzIGFybXkgd2hlbiBpdCB3YXMgc3BvaWxlZCBieSBsdXh1cnkgYW5kIGV4dHJhdmFnYW5jZS4gSXQgaXMgc2FpZCwgdG9vLCB0aGF0IGhlIGVuY291bnRlcmVkIGFuZCBsYWlkIGxvdyBhbiBlbmVteSBpbiB0aGUgc2lnaHQgb2YgaGlzIGdlbmVyYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBoZSB3YXMgYWR2YW5jZWQgYnkgaGlzIGNvbW1hbmRlciB0byBtYW55IGhvbm91cnM7IGFuZCBvbmNlLCB3aGVuIHRoZSB0YWxrIGFmdGVyIHN1cHBlciBoYWQgdG8gZG8gd2l0aCBnZW5lcmFscywgYW5kIG9uZSBvZiB0aGUgY29tcGFueSAoZWl0aGVyIGJlY2F1c2UgaGUgcmVhbGx5IHdpc2hlZCB0byBrbm93IG9yIG1lcmVseSBzb3VnaHQgdG8gcGxlYXNlKSBhc2tlZCBTY2lwaW8gd2hlcmUgdGhlIFJvbWFuIHBlb3BsZSB3b3VsZCBmaW5kIGFueSBzdWNoIGNoaWVmdGFpbiBhbmQgbGVhZGVyIHRvIGZvbGxvdyBoaW0sIFNjaXBpbywgZ2VudGx5IHRhcHBpbmcgTWFyaXVzIG9uIHRoZSBzaG91bGRlciBhcyBoZSByZWNsaW5lZCBuZXh0IGhpbSwgc2FpZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlcmUsIHBlcmhhcHMuPC9xPiBTbyBnaWZ0ZWQgYnkgbmF0dXJlIHdlcmUgYm90aCBtZW47IHRoZSBvbmUgaW4gc2hvd2luZyBoaW1zZWxmIGdyZWF0IHdoaWxlIHN0aWxsIGEgeW91bmcgbWFuLCBhbmQgdGhlIG90aGVyIGluIGRpc2Nlcm5pbmcgdGhlIGVuZCBmcm9tIHRoZSBiZWdpbm5pbmcuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBNYXJpdXMsIGZpbGxlZCB3aXRoIGhpZ2ggaG9wZXMsIHdlIGFyZSB0b2xkLCBieSB0aGlzIHNwZWVjaCBvZiBTY2lwaW8gaW4gcGFydGljdWxhciwgYXMgaWYgaXQgd2VyZSBhIGRpdmluZSB1dHRlcmFuY2UgaW4gcHJvcGhlY3ksIHNldCBvdXQgdXBvbiBhIHBvbGl0aWNhbCBjYXJlZXIsIGFuZCB3YXMgbWFkZSB0cmlidW5lIG9mIHRoZSBwZW9wbGUgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTE5IEIuQy4sIGF0IHRoZSBhZ2Ugb2YgdGhpcnR5LWVpZ2h0LiA8L25vdGU+IHdpdGggdGhlIGFzc2lzdGFuY2Ugb2YgQ2FlY2lsaXVzIE1ldGVsbHVzLCBvZiB3aG9zZSBob3VzZSBoZSBoYWQgYWx3YXlzIGJlZW4gYW4gaGVyZWRpdGFyeSBhZGhlcmVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgc2VydmluZyBhcyB0cmlidW5lIGhlIGludHJvZHVjZWQgYSBsYXcgY29uY2VybmluZyB0aGUgbW9kZSBvZiB2b3RpbmcsIHdoaWNoLCBhcyBpdCB3YXMgdGhvdWdodCwgd291bGQgbGVzc2VuIHRoZSBwb3dlciBvZiB0aGUgbm9ibGVzIGluIGp1ZGljaWFsIGNhc2VzOyB3aGVyZXVwb24gQ290dGEgdGhlIGNvbnN1bCBvcHBvc2VkIGhpbSBhbmQgcGVyc3VhZGVkIHRoZSBzZW5hdGUgdG8gY29udGVzdCB0aGUgbGF3LCBhbmQgdG8gc3VtbW9uIE1hcml1cyBiZWZvcmUgaXQgdG8gZXhwbGFpbiBoaXMgcHJvY2VkdXJlLiBUaGUgc2VuYXRlIHZvdGVkIHRvIGRvIHRoaXMsIGFuZCBNYXJpdXMgYXBwZWFyZWQgYmVmb3JlIGl0LiBIZSBkaWQgbm90LCBob3dldmVyLCBiZWhhdmUgbGlrZSBhIHlvdW5nIG1hbiB3aG8gaGFkIGp1c3QgZW50ZXJlZCBwb2xpdGljYWwgbGlmZSB3aXRob3V0IGFueSBicmlsbGlhbnQgc2VydmljZXMgYmVoaW5kIGhpbSwgYnV0IGFzc3VtZWQgYXQgb25jZSB0aGUgYXNzdXJhbmNlIHdoaWNoIGhpcyBzdWJzZXF1ZW50IGFjaGlldmVtZW50cyBnYXZlIGhpbSwgYW5kIHRocmVhdGVuZWQgdG8gaGFsZSBDb3R0YSBvZmYgdG8gcHJpc29uIHVubGVzcyBoZSBoYWQgdGhlIHZvdGUgcmVzY2luZGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Db3R0YSB0aGVuIHR1cm5lZCB0byBNZXRlbGx1cyBhbmQgYXNrZWQgaGltIHRvIGV4cHJlc3MgaGlzIG9waW5pb24sIGFuZCBNZXRlbGx1cywgcmlzaW5nIGluIGhpcyBwbGFjZSwgY29uY3VycmVkIHdpdGggdGhlIGNvbnN1bDsgYnV0IE1hcml1cyBjYWxsZWQgaW4gdGhlIG9mZmljZXIgYW5kIG9yZGVyZWQgaGltIHRvIGNvbmR1Y3QgTWV0ZWxsdXMgaGltc2VsZiB0byBwcmlzb24uIE1ldGVsbHVzIGFwcGVhbGVkIHRvIHRoZSBvdGhlciB0cmlidW5lcywgYnV0IG5vbmUgb2YgdGhlbSBjYW1lIHRvIGhpcyBzdXBwb3J0LCBzbyB0aGUgc2VuYXRlIGdhdmUgd2F5IGFuZCByZXNjaW5kZWQgaXRzIHZvdGUuIE1hcml1cyB0aGVyZWZvcmUgY2FtZSBmb3J0aCBpbiB0cml1bXBoIHRvIHRoZSBwZW9wbGUgYW5kIGdvdCB0aGVtIHRvIHJhdGlmeSBoaXMgbGF3LiBNZW4gbm93IHRob3VnaHQgaGltIHN1cGVyaW9yIHRvIGZlYXIsIHVubW92ZWQgYnkgcmVzcGVjdCBvZiBwZXJzb25zLCBhbmQgYSBmb3JtaWRhYmxlIGNoYW1waW9uIG9mIHRoZSBwZW9wbGUgaW4gb3Bwb3NpdGlvbiB0byB0aGUgc2VuYXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGlzIG9waW5pb24gd2FzIHF1aWNrbHkgbW9kaWZpZWQgYnkgYW5vdGhlciBwb2xpdGljYWwgcHJvY2VkdXJlIG9mIGhpcy4gRm9yIHdoZW4gYSBsYXcgd2FzIGludHJvZHVjZWQgcHJvdmlkaW5nIGZvciB0aGUgZGlzdHJpYnV0aW9uIG9mIGdyYWluIHRvIHRoZSBjaXRpemVucywgaGUgb3Bwb3NlZCBpdCBtb3N0IHN0cmVudW91c2x5IGFuZCBjYXJyaWVkIHRoZSBkYXksIHRoZXJlYnkgd2lubmluZyBmb3IgaGltc2VsZiBhbiBlcXVhbCBwbGFjZSBpbiB0aGUgZXN0ZWVtIG9mIGJvdGggcGFydGllcyBhcyBhIG1hbiB3aG8gZmF2b3VyZWQgbmVpdGhlciBhdCB0aGUgZXhwZW5zZSBvZiB0aGUgZ2VuZXJhbCBnb29kLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoaXMgdHJpYnVuZXNoaXAsIGhlIGJlY2FtZSBhIGNhbmRpZGF0ZSBmb3IgdGhlIGhpZ2hlciBhZWRpbGVzaGlwLiBGb3IgdGhlcmUgYXJlIHR3byBjbGFzc2VzIG9mIGFlZGlsZXMsIG9uZSB0YWtpbmcgaXRzIG5hbWUgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jdXJ1bGU8L3E+IGZyb20gdGhlIGNoYWlycyB3aXRoIGN1cnZpbmcgZmVldCBvbiB3aGljaCB0aGUgbWFnaXN0cmF0ZXMgc2l0IGluIHRoZSBleGVyY2lzZSBvZiB0aGVpciBmdW5jdGlvbnMsIHRoZSBvdGhlciwgYW5kIHRoZSBpbmZlcmlvciwgYmVpbmcgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGxlYmVpYW4uPC9xPiBXaGVuIHRoZSBzdXBlcmlvciBhZWRpbGVzIGhhdmUgYmVlbiBlbGVjdGVkLCB0aGUgcGVvcGxlIGNhc3QgYSBzZWNvbmQgdm90ZSBmb3IgdGhlIG90aGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gaXQgd2FzIGNsZWFyIHRoYXQgTWFyaXVzIHdhcyBsb3NpbmcgaGlzIGVsZWN0aW9uIHRvIHRoZSBoaWdoZXIgb2ZmaWNlLCBoZSBpbW1lZGlhdGVseSBjaGFuZ2VkIGhpcyB0YWN0aWNzIGFuZCBhcHBsaWVkIGZvciB0aGUgb3RoZXIuIEJ1dCBtZW4gdGhvdWdodCBoaW0gYm9sZCBhbmQgb2JzdGluYXRlLCBhbmQgaGUgd2FzIGRlZmVhdGVkOyBuZXZlcnRoZWxlc3MsIGFsdGhvdWdoIGhlIGhhZCBtZXQgd2l0aCB0d28gZmFpbHVyZXMgaW4gb25lIGRheSwgYSB0aGluZyB3aGljaCBoYWQgbmV2ZXIgaGFwcGVuZWQgdG8gYW55IGNhbmRpZGF0ZSBiZWZvcmUsIGhlIGRpZCBub3QgbG93ZXIgaGlzIGFzc3VyYW5jZSBpbiB0aGUgbGVhc3QsIGJ1dCBub3QgbG9uZyBhZnRlcndhcmRzIGJlY2FtZSBhIGNhbmRpZGF0ZSBmb3IgdGhlIHByYWV0b3JzaGlwIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDExNSBCLkMuIDwvbm90ZT4gYW5kIG5hcnJvd2x5IG1pc3NlZCBkZWZlYXQ7IGhlIHdhcyByZXR1cm5lZCBsYXN0IG9mIGFsbCwgYW5kIHdhcyBwcm9zZWN1dGVkIGZvciBicmliZXJ5LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3VzcGljaW9uIHdhcyBjaGllZmx5IGFyb3VzZWQgYnkgdGhlIHNpZ2h0IG9mIGEgc2VydmFudCBvZiBDYXNzaXVzIFNhYmFjbyBpbnNpZGUgdGhlIHBhbGluZ3MgYW1vbmcgdGhlIHZvdGVyczsgZm9yIFNhYmFjbyB3YXMgYW4gZXNwZWNpYWwgZnJpZW5kIG9mIE1hcml1cy4gU2FiYWNvIHdhcyB0aGVyZWZvcmUgc3VtbW9uZWQgYmVmb3JlIHRoZSBjb3VydCwgYW5kIHRlc3RpZmllZCB0aGF0IHRoZSBoZWF0IGhhZCBtYWRlIGhpbSBzbyB0aGlyc3R5IHRoYXQgaGUgaGFkIGNhbGxlZCBmb3IgY29sZCB3YXRlciwgYW5kIHRoYXQgaGlzIHNlcnZhbnQgaGFkIGNvbWUgaW4gdG8gaGltIHdpdGggYSBjdXAsIGFuZCBoYWQgdGhlbiBhdCBvbmNlIGdvbmUgYXdheSBhZnRlciBoaXMgbWFzdGVyIGhhZCBkcnVuay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U2FiYWNvLCBob3dldmVyLCB3YXMgZXhwZWxsZWQgZnJvbSB0aGUgc2VuYXRlIGJ5IHRoZSBjZW5zb3JzIG9mIHRoZSBuZXh0IHllYXIsIGFuZCBpdCB3YXMgdGhvdWdodCB0aGF0IGhlIGRlc2VydmVkIHRoaXMgcHVuaXNobWVudCwgZWl0aGVyIGJlY2F1c2UgaGUgaGFkIGdpdmVuIGZhbHNlIHRlc3RpbW9ueSwgb3IgYmVjYXVzZSBvZiBoaXMgaW50ZW1wZXJhbmNlLiBCdXQgQ2FpdXMgSGVyZW5uaXVzIGFsc28gd2FzIGJyb3VnaHQgaW4gYXMgYSB3aXRuZXNzIGFnYWluc3QgTWFyaXVzLCBhbmQgcGxlYWRlZCB0aGF0IGl0IHdhcyBjb250cmFyeSB0byBlc3RhYmxpc2hlZCB1c2FnZSBmb3IgcGF0cm9ucyAodGhlIFJvbWFuIHRlcm0gZm9yIG91ciByZXByZXNlbnRhdGl2ZXMgYXQgbGF3KSB0byBiZWFyIHdpdG5lc3MgYWdhaW5zdCBjbGllbnRzLCBhbmQgdGhhdCB0aGUgbGF3IHJlbGlldmVkIHRoZW0gb2YgdGhpcyBuZWNlc3NpdHk7IGFuZCBub3Qgb25seSB0aGUgcGFyZW50cyBvZiBNYXJpdXMgYnV0IE1hcml1cyBoaW1zZWxmIGhhZCBvcmlnaW5hbGx5IGJlZW4gY2xpZW50cyBvZiB0aGUgaG91c2Ugb2YgdGhlIEhlcmVubmlpLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUganVyb3JzIGFjY2VwdGVkIHRoaXMgcGxlYSBpbiBhdm9pZGFuY2Ugb2YgdGVzdGltb255LCBidXQgTWFyaXVzIGhpbXNlbGYgY29udHJhZGljdGVkIEhlcmVubml1cywgZGVjbGFyaW5nIHRoYXQgYXMgc29vbiBhcyBoZSBoYWQgYmVlbiBlbGVjdGVkIHRvIGhpcyBtYWdpc3RyYWN5IGhlIGhhZCBjZWFzZWQgdG8gYmUgYSBjbGllbnQ7IHdoaWNoIHdhcyBub3QgYWx0b2dldGhlciB0cnVlLiBGb3IgaXQgaXMgbm90IGV2ZXJ5IG1hZ2lzdHJhY3kgdGhhdCBmcmVlcyBpdHMgb2NjdXBhbnRzIChhcyB3ZWxsIGFzIHRoZWlyIHBvc3Rlcml0eSkgZnJvbSB0aGVpciByZWxhdGlvbnMgdG8gYSBwYXRyb24sIGJ1dCBvbmx5IHRoYXQgdG8gd2hpY2ggdGhlIGxhdyBhc3NpZ25zIHRoZSBjdXJ1bGUgY2hhaXIuIEhvd2V2ZXIsIGFsdGhvdWdoIGR1cmluZyB0aGUgZmlyc3QgZGF5cyBvZiB0aGUgdHJpYWwgTWFyaXVzIGZhcmVkIGJhZGx5IGFuZCBmb3VuZCB0aGUganVyb3JzIHNldmVyZSB0b3dhcmRzIGhpbSwgb24gdGhlIGxhc3QgZGF5LCBjb250cmFyeSB0byBhbGwgZXhwZWN0YXRpb24sIHRoZXJlIHdhcyBhIHRpZSB2b3RlIGFuZCBoZSB3YXMgYWNxdWl0dGVkLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBmb3IgaGlzIHByYWV0b3JzaGlwIE1hcml1cyBnb3Qgb25seSBtb2RlcmF0ZSBjb21tZW5kYXRpb24uIEFmdGVyIGhpcyBwcmFldG9yc2hpcCwgaG93ZXZlciwgdGhlIHByb3ZpbmNlIG9mIEZhcnRoZXIgU3BhaW4gd2FzIGFsbG90dGVkIHRvIGhpbSwgYW5kIGhlcmUgaGUgaXMgc2FpZCB0byBoYXZlIGNsZWFyZWQgYXdheSB0aGUgcm9iYmVycywgYWx0aG91Z2ggdGhlIHByb3ZpbmNlIHdhcyBzdGlsbCB1bmNpdmlsaXplZCBpbiBpdHMgY3VzdG9tcyBhbmQgaW4gYSBzYXZhZ2Ugc3RhdGUsIGFuZCByb2JiZXJ5IHdhcyBhdCB0aGF0IHRpbWUgc3RpbGwgY29uc2lkZXJlZCBhIG1vc3QgaG9ub3VyYWJsZSBvY2N1cGF0aW9uIGJ5IHRoZSBTcGFuaWFyZHMuIEJ1dCB3aGVuIGhlIHJldHVybmVkIHRvIHBvbGl0aWNhbCBsaWZlLCBoZSBoYWQgbmVpdGhlciB3ZWFsdGggbm9yIGVsb3F1ZW5jZSwgd2l0aCB3aGljaCB0aGUgbWFnbmF0ZXMgb2YgdGhlIHRpbWUgdXNlZCB0byBpbmZsdWVuY2UgdGhlIHBlb3BsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3RpbGwsIHRoZSB2ZXJ5IGludGVuc2l0eSBvZiBoaXMgYXNzdXJhbmNlLCBoaXMgaW5kZWZhdGlnYWJsZSBsYWJvdXJzLCBhbmQgaGlzIHBsYWluIGFuZCBzaW1wbGUgd2F5IG9mIGxpdmluZywgd29uIGhpbSBhIGNlcnRhaW4gcG9wdWxhcml0eSBhbW9uZyBoaXMgZmVsbG93IGNpdGl6ZW5zLCBhbmQgaGlzIGhvbm91cnMgYnJvdWdodCBoaW0gaW5jcmVhc2luZyBpbmZsdWVuY2UsIHNvIHRoYXQgaGUgbWFycmllZCBpbnRvIHRoZSBpbGx1c3RyaW91cyBmYW1pbHkgb2YgdGhlIENhZXNhcnMgYW5kIGJlY2FtZSB0aGUgaHVzYmFuZCBvZiBKdWxpYSwgd2hvIHdhcyB0aGUgYXVudCBvZiB0aGF0IENhZXNhciB3aG8gaW4gYWZ0ZXIgdGltZXMgYmVjYW1lIGdyZWF0ZXN0IGFtb25nIHRoZSBSb21hbnMsIGFuZCBpbiBzb21lIGRlZ3JlZSwgYmVjYXVzZSBvZiBoaXMgcmVsYXRpb25zaGlwLCBtYWRlIE1hcml1cyBoaXMgZXhhbXBsZSwgYXMgSSBoYXZlIHN0YXRlZCBpbiBoaXMgTGlmZS4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNS4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXIgPC90aXRsZT4sIHYuIDEgZi4gPC9iaWJsPiAKICAgICAgICAgICAgPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIHRlc3RpbW9ueSBib3RoIHRvIHRoZSB0ZW1wZXJhbmNlIG9mIE1hcml1cywgYW5kIGFsc28gdG8gaGlzIGZvcnRpdHVkZSwgb2Ygd2hpY2ggaGlzIGJlaGF2aW91ciB1bmRlciBhIHN1cmdpY2FsIG9wZXJhdGlvbiBpcyBhIHByb29mLiBIZSB3YXMgYWZmbGljdGVkIGluIGJvdGggbGVncywgYXMgaXQgd291bGQgYXBwZWFyLCB3aXRoIHZhcmljb3NlIHZlaW5zLCBhbmQgYXMgaGUgZGlzbGlrZWQgdGhlIGRlZm9ybWl0eSwgaGUgcmVzb2x2ZWQgdG8gcHV0IGhpbXNlbGYgaW50byB0aGUgcGh5c2ljaWFuJ3MgaGFuZHMuIFJlZnVzaW5nIHRvIGJlIGJvdW5kLCBoZSBwcmVzZW50ZWQgdG8gaGltIG9uZSBsZWcsIGFuZCB0aGVuLCB3aXRob3V0IGEgbW90aW9uIG9yIGEgZ3JvYW4sIGJ1dCB3aXRoIGEgc3RlYWRmYXN0IGNvdW50ZW5hbmNlIGFuZCBpbiBzaWxlbmNlLCBlbmR1cmVkIGluY3JlZGlibGUgcGFpbiB1bmRlciB0aGUga25pZmUuIFdoZW4sIGhvd2V2ZXIsIHRoZSBwaHlzaWNpYW4gd2FzIHByb2NlZWRpbmcgdG8gdHJlYXQgdGhlIG90aGVyIGxlZywgTWFyaXVzIHdvdWxkIHN1ZmZlciBoaW0gbm8gZnVydGhlciwgZGVjbGFyaW5nIHRoYXQgaGUgc2F3IHRoZSBjdXJlIHRvIGJlIG5vdCB3b3J0aCB0aGUgcGFpbi4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYWVjaWxpdXMgTWV0ZWxsdXMgdGhlIGNvbnN1bCB3YXMgYXBwb2ludGVkIGNvbW1hbmRlci1pbi1jaGllZiBmb3IgdGhlIHdhciBhZ2FpbnN0IEp1Z3VydGhhLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMDkgQi5DLiA8L25vdGU+IGhlIHRvb2sgTWFyaXVzIHdpdGggaGltIHRvIEFmcmljYSBpbiB0aGUgY2FwYWNpdHkgb2YgbGVnYXRlLiBIZXJlLCBpbiBlc3NheWluZyBncmVhdCBleHBsb2l0cyBhbmQgYnJpbGxpYW50IHN0cnVnZ2xlcywgTWFyaXVzIHdhcyBub3QgY2FyZWZ1bCwgbGlrZSB0aGUgcmVzdCwgdG8gZW5oYW5jZSB0aGUgZ2xvcnkgb2YgTWV0ZWxsdXMgYW5kIGNvbmR1Y3QgaGltc2VsZiBpbiBoaXMgaW50ZXJlc3RzOyBhbmQgZGVlbWluZyB0aGF0IGhlIGhhZCBub3Qgc28gbXVjaCBiZWVuIGNhbGxlZCBieSBNZXRlbGx1cyB0byB0aGUgb2ZmaWNlIG9mIGxlZ2F0ZSBhcyBoZSB3YXMgYmVpbmcgaW50cm9kdWNlZCBieSBGb3J0dW5lIGludG8gYSBtb3N0IGZhdm91cmFibGUgb3Bwb3J0dW5pdHkgYXMgd2VsbCBhcyBhIG1vc3Qgc3BhY2lvdXMgdGhlYXRyZSBmb3IgZXhwbG9pdHMsIGhlIG1hZGUgYSBkaXNwbGF5IG9mIGV2ZXJ5IHNvcnQgb2YgYnJhdmVyeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRob3VnaCB0aGUgd2FyIGJyb3VnaHQgbWFueSBoYXJkc2hpcHMsIGhlIG5laXRoZXIgc2h1bm5lZCBhbnkgZ3JlYXQgbGFib3VyLCBub3IgZGlzZGFpbmVkIGFueSB0aGF0IHdlcmUgc21hbGwsIGJ1dCBzdXJwYXNzZWQgdGhlIG9mZmljZXJzIG9mIGhpcyBvd24gcmFuayBpbiBnaXZpbmcgZ29vZCBjb3Vuc2VsIGFuZCBmb3Jlc2VlaW5nIHdoYXQgd2FzIGFkdmFudGFnZW91cywgYW5kIHZpZWQgd2l0aCB0aGUgY29tbW9uIHNvbGRpZXJzIGluIGZydWdhbGl0eSBhbmQgZW5kdXJhbmNlLCB0aGVyZWJ5IHdpbm5pbmcgbXVjaCBnb29kd2lsbCBhbW9uZyB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYXMgYSBnZW5lcmFsIHRoaW5nIGl0IHdvdWxkIHNlZW0gdGhhdCBldmVyeSBtYW4gZmluZHMgc29sYWNlIGZvciBoaXMgbGFib3VycyBpbiBzZWVpbmcgYW5vdGhlciB2b2x1bnRhcmlseSBzaGFyZSB0aG9zZSBsYWJvdXJzOyB0aGlzIHNlZW1zIHRvIHRha2UgYXdheSB0aGUgZWxlbWVudCBvZiBjb21wdWxzaW9uOyBhbmQgaXQgaXMgYSBtb3N0IGFncmVlYWJsZSBzcGVjdGFjbGUgZm9yIGEgUm9tYW4gc29sZGllciB3aGVuIGhlIHNlZXMgYSBnZW5lcmFsIGVhdGluZyBjb21tb24gYnJlYWQgaW4gcHVibGljLCBvciBzbGVlcGluZyBvbiBhIHNpbXBsZSBwYWxsZXQsIG9yIHRha2luZyBhIGhhbmQgaW4gdGhlIGNvbnN0cnVjdGlvbiBvZiBzb21lIHRyZW5jaCBvciBwYWxpc2FkZS4gRm9yIHRoZXkgaGF2ZSBub3Qgc28gbXVjaCBhZG1pcmF0aW9uIGZvciB0aG9zZSBsZWFkZXJzIHdobyBzaGFyZSBob25vdXIgYW5kIHJpY2hlcyB3aXRoIHRoZW0gYXMgZm9yIHRob3NlIHdobyB0YWtlIHBhcnQgaW4gdGhlaXIgdG9pbHMgYW5kIGRhbmdlcnMsIGJ1dCBoYXZlIG1vcmUgYWZmZWN0aW9uIGZvciB0aG9zZSB3aG8gYXJlIHdpbGxpbmcgdG8gam9pbiBpbiB0aGVpciB0b2lscyB0aGFuIGZvciB0aG9zZSB3aG8gcGVybWl0IHRoZW0gdG8gbGVhZCBhbiBlYXN5IGxpZmUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CeSBkb2luZyBhbGwgdGhlc2UgdGhpbmdzIGFuZCB0aGVyZWJ5IHdpbm5pbmcgdGhlIGhlYXJ0cyBvZiB0aGUgc29sZGllcnMsIE1hcml1cyBzb29uIGZpbGxlZCBBZnJpY2EsIGFuZCBzb29uIGZpbGxlZCBSb21lLCB3aXRoIGhpcyBuYW1lIGFuZCBmYW1lLCBhbmQgbWVuIGluIHRoZSBjYW1wIHdyb3RlIHRvIHRob3NlIGF0IGhvbWUgdGhhdCB0aGVyZSB3b3VsZCBiZSBubyBlbmQgb3IgY2Vzc2F0aW9uIG9mIHRoZSB3YXIgYWdhaW5zdCB0aGUgQmFyYmFyaWFuIHVubGVzcyB0aGV5IGNob3NlIENhaXVzIE1hcml1cyBjb25zdWwuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCB0aGlzIE1ldGVsbHVzIHdhcyBldmlkZW50bHkgZGlzcGxlYXNlZC4gQnV0IGl0IHdhcyB0aGUgYWZmYWlyIG9mIFR1cnBpbGxpdXMgdGhhdCBtb3N0IHZleGVkIGhpbS4gVGhpcyBUdXJwaWxsaXVzIHdhcyBhbiBoZXJlZGl0YXJ5IGd1ZXN0LWZyaWVuZCBvZiBNZXRlbGx1cywgYW5kIGF0IHRoaXMgdGltZSB3YXMgc2VydmluZyBpbiBoaXMgYXJteSBhcyBjaGllZiBvZiBlbmdpbmVlcnMuIEJ1dCBoZSB3YXMgcHV0IGluIGNoYXJnZSBvZiBWYWdhLCBhIGxhcmdlIGNpdHksIGFuZCBiZWNhdXNlIGhlIHJlbGllZCBmb3Igc2FmZXR5IG9uIGhpcyBkb2luZyB0aGUgaW5oYWJpdGFudHMgbm8gd3JvbmcsIGJ1dCByYXRoZXIgdHJlYXRpbmcgdGhlbSB3aXRoIGtpbmRuZXNzIGFuZCBodW1hbml0eSwgaGUgdW5hd2FyZXMgY2FtZSBpbnRvIHRoZSBwb3dlciBvZiB0aGUgZW5lbXk7IGZvciB0aGV5IGFkbWl0dGVkIEp1Z3VydGhhIGludG8gdGhlaXIgY2l0eS4gU3RpbGwsIHRoZXkgZGlkIFR1cnBpbGxpdXMgbm8gaGFybSwgYnV0IG9idGFpbmVkIGhpcyByZWxlYXNlIGFuZCBzZW50IGhpbSBhd2F5IHNhZmUgYW5kIHNvdW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgYSBjaGFyZ2Ugb2YgdHJlYWNoZXJ5IHdhcyBicm91Z2h0IGFnYWluc3QgaGltOyBhbmQgTWFyaXVzLCB3aG8gd2FzIGEgbWVtYmVyIG9mIHRoZSBjb3VuY2lsIHdoaWNoIHRyaWVkIHRoZSBjYXNlLCB3YXMgaGltc2VsZiBiaXR0ZXIsIGFuZCBleGFzcGVyYXRlZCBtb3N0IG9mIHRoZSBvdGhlcnMgYWdhaW5zdCB0aGUgYWNjdXNlZCwgc28gdGhhdCBNZXRlbGx1cyB3YXMgcmVsdWN0YW50bHkgZm9yY2VkIHRvIHBhc3Mgc2VudGVuY2Ugb2YgZGVhdGggdXBvbiBoaW0uIEFmdGVyIGEgc2hvcnQgdGltZSwgaG93ZXZlciwgdGhlIGNoYXJnZSB3YXMgZm91bmQgdG8gYmUgZmFsc2UsIGFuZCBhbG1vc3QgZXZlcnlib2R5IHN5bXBhdGhpemVkIHdpdGggTWV0ZWxsdXMgaW4gaGlzIGdyaWVmOyBidXQgTWFyaXVzLCBmdWxsIG9mIGpveSBhbmQgY2xhaW1pbmcgdGhlIGNvbmRlbW5hdGlvbiBhcyBoaXMgb3duIHdvcmssIHdhcyBub3QgYXNoYW1lZCB0byBnbyBhYm91dCBzYXlpbmcgdGhhdCBoZSBoYWQgZmFzdGVuZWQgdXBvbiB0aGUgcGF0aCBvZiBNZXRlbGx1cyBhIGRhZW1vbiB3aG8gd291bGQgYXZlbmdlIHRoZSBtdXJkZXIgb2YgYSBndWVzdC1mcmllbmQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHRoZXJlIHdhcyBvcGVuIGVubWl0eSBiZXR3ZWVuIHRoZSB0d28gbWVuOyBhbmQgd2UgYXJlIHRvbGQgdGhhdCBvbiBvbmUgb2NjYXNpb24gd2hlbiBNYXJpdXMgd2FzIHByZXNlbnQgTWV0ZWxsdXMgc2FpZCB0byBoaW0gYXMgaWYgaW4gbW9ja2VyeTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb3N0IHRob3UgcHVycG9zZSB0byBsZWF2ZSB1cywgbXkgZ29vZCBTaXIsIGFuZCBzYWlsIGZvciBob21lLCBhbmQgc3RhbmQgZm9yIHRoZSBjb25zdWxzaGlwPyBQcmF5IHdpbGwgaXQgbm90IHNhdGlzZnkgdGhlZSB0byBiZSBmZWxsb3ctY29uc3VsIHdpdGggdGhpcyBteSBzb24/PC9xPiBOb3cgdGhlIHNvbiBvZiBNZXRlbGx1cyB3YXMgYXQgdGhpcyB0aW1lIGEgbWVyZSBzdHJpcGxpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIE1hcml1cyB3YXMgZWFnZXIgdG8gYmUgZGlzbWlzc2VkLCBhbmQgc28sIGFmdGVyIG1ha2luZyBtYW55IHBvc3Rwb25lbWVudHMsIGFuZCB3aGVuIG9ubHkgdHdlbHZlIGRheXMgcmVtYWluZWQgYmVmb3JlIHRoZSBlbGVjdGlvbiBvZiBjb25zdWxzLCBNZXRlbGx1cyBkaXNtaXNzZWQgaGltLiBNYXJpdXMgYWNjb21wbGlzaGVkIHRoZSBsb25nIGpvdXJuZXkgZnJvbSB0aGUgY2FtcCB0byBVdGljYSBhbmQgdGhlIHNlYSBpbiB0d28gZGF5cyBhbmQgb25lIG5pZ2h0LCBhbmQgb2ZmZXJlZCBzYWNyaWZpY2UgYmVmb3JlIGhlIHNhaWxlZC4gQW5kIHRoZSBzZWVyIGlzIHNhaWQgdG8gaGF2ZSB0b2xkIGhpbSB0aGF0IHRoZSBEZWl0eSByZXZlYWxlZCBmb3IgTWFyaXVzIHN1Y2Nlc3NlcyB0aGF0IHdlcmUgb2YgaW5jcmVkaWJsZSBtYWduaXR1ZGUgYW5kIGJleW9uZCBoaXMgZXZlcnkgZXhwZWN0YXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkVsYXRlZCBieSB0aGlzIHByb3BoZWN5IGhlIHB1dCB0byBzZWEuIEluIHRocmVlIGRheXMgaGUgY3Jvc3NlZCB0aGUgc2VhIHdpdGggYSBmYXZvdXJpbmcgd2luZCwgYW5kIHdhcyBhdCBvbmNlIHdlbGNvbWVkIGdsYWRseSBieSB0aGUgcG9wdWxhY2UsIGFuZCBhZnRlciBiZWluZyBpbnRyb2R1Y2VkIHRvIHRoZSBhc3NlbWJseSBieSBvbmUgb2YgdGhlIHRyaWJ1bmVzLCBoZSBmaXJzdCBtYWRlIG1hbnkgc2xhbmRlcm91cyBjaGFyZ2VzIGFnYWluc3QgTWV0ZWxsdXMsIGFuZCB0aGVuIGFza2VkIGZvciB0aGUgY29uc3Vsc2hpcCwgcHJvbWlzaW5nIHRoYXQgaGUgd291bGQgZWl0aGVyIGtpbGwgSnVndXJ0aGEgb3IgdGFrZSBoaW0gYWxpdmUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyB0cml1bXBoYW50bHkgZWxlY3RlZCwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDEwNyBCLkMuLCBhdCB0aGUgYWdlIG9mIGZpZnR5LiA8L25vdGU+IGFuZCBhdCBvbmNlIGJlZ2FuIHRvIGxldnkgdHJvb3BzLiBDb250cmFyeSB0byBsYXcgYW5kIGN1c3RvbSBoZSBlbmxpc3RlZCBtYW55IGEgcG9vciBhbmQgaW5zaWduaWZpY2FudCBtYW4sIGFsdGhvdWdoIGZvcm1lciBjb21tYW5kZXJzIGhhZCBub3QgYWNjZXB0ZWQgc3VjaCBwZXJzb25zLCBidXQgYmVzdG93ZWQgYXJtcywganVzdCBhcyB0aGV5IHdvdWxkIGFueSBvdGhlciBob25vdXIsIG9ubHkgb24gdGhvc2Ugd2hvc2UgcHJvcGVydHkgYXNzZXNzbWVudCBtYWRlIHRoZW0gd29ydGh5IHRvIHJlY2VpdmUgdGhlc2UsIGVhY2ggc29sZGllciBiZWluZyBzdXBwb3NlZCB0byBwdXQgaGlzIHN1YnN0YW5jZSBpbiBwbGVkZ2UgdG8gdGhlIHN0YXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm90IHRoaXMsIGhvd2V2ZXIsIHRoYXQgYnJvdWdodCBtb3N0IG9kaXVtIHVwb24gTWFyaXVzLCBidXQgdGhlIGJvbGRseSBpbnNvbGVudCBhbmQgYXJyb2dhbnQgc3BlZWNoZXMgd2l0aCB3aGljaCBoZSB2ZXhlZCB0aGUgbm9ibGVzLCBjcnlpbmcgb3V0IHRoYXQgaGUgaGFkIGNhcnJpZWQgb2ZmIHRoZSBjb25zdWxzaGlwIGFzIHNwb2lsIGZyb20gdGhlIGVmZmVtaW5hY3kgb2YgdGhlIHJpY2ggYW5kIHdlbGwtYm9ybiwgYW5kIHRoYXQgaGUgaGFkIHdvdW5kcyB1cG9uIGhpcyBvd24gcGVyc29uIHdpdGggd2hpY2ggdG8gdmF1bnQgaGltc2VsZiBiZWZvcmUgdGhlIHBlb3BsZSwgbm90IG1vbnVtZW50cyBvZiB0aGUgZGVhZCBub3IgbGlrZW5lc3NlcyBvZiBvdGhlciBtZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9mdGVuLCB0b28sIGhlIHdvdWxkIG1lbnRpb24gYnkgbmFtZSB0aGUgZ2VuZXJhbHMgaW4gQWZyaWNhIHdobyBoYWQgYmVlbiB1bnN1Y2Nlc3NmdWwsIG5vdyBCZXN0aWEsIGFuZCBub3cgQWxiaW51cywgbWVuIG9mIGlsbHVzdHJpb3VzIGhvdXNlcyBpbmRlZWQsIGJ1dCB1bmZvcnR1bmF0ZSB0aGVtc2VsdmVzLCBhbmQgdW53YXJsaWtlLCB3aG8gaGFkIG1ldCB3aXRoIGRpc2FzdGVyIHRocm91Z2ggbGFjayBvZiBleHBlcmllbmNlOyBhbmQgaGUgd291bGQgYXNrIGhpcyBhdWRpZW5jZSBpZiB0aGV5IGRpZCBub3QgdGhpbmsgdGhhdCB0aGUgYW5jZXN0b3JzIG9mIHRoZXNlIG1lbiB3b3VsZCBoYXZlIG11Y2ggcHJlZmVycmVkIHRvIGxlYXZlIGRlc2NlbmRhbnRzIGxpa2UgaGltc2VsZiwgc2luY2UgdGhleSB0aGVtc2VsdmVzIGhhZCBiZWVuIG1hZGUgaWxsdXN0cm91cywgbm90IGJ5IHRoZWlyIG5vYmxlIGJpcnRoLCBidXQgYnkgdGhlaXIgdmFsb3VyIGFuZCBub2JsZSBkZWVkcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB0YWxrIHdhcyBub3QgbWVyZSBlbXB0eSBib2FzdGluZywgbm9yIHdhcyBoaXMgZGVzaXJlIHRvIG1ha2UgaGltc2VsZiBoYXRlZCBieSB0aGUgbm9iaWxpdHkgd2l0aG91dCBwdXJwb3NlOyBpbmRlZWQgdGhlIHBlb3BsZSwgd2hvIHdlcmUgZGVsaWdodGVkIHRvIGhhdmUgdGhlIHNlbmF0ZSBpbnN1bHRlZCBhbmQgYWx3YXlzIG1lYXN1cmVkIHRoZSBncmVhdG5lc3Mgb2YgYSBtYW4ncyBzcGlyaXQgYnkgdGhlIGJvYXN0ZnVsbmVzcyBvZiBoaXMgc3BlZWNoLCBlbmNvdXJhZ2VkIGhpbSwgYW5kIGluY2l0ZWQgaGltIG5vdCB0byBzcGFyZSBtZW4gb2YgaGlnaCByZXB1dGUgaWYgaGUgd2lzaGVkIHRvIHBsZWFzZSB0aGUgbXVsdGl0dWRlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgY3Jvc3NlZCB0byBBZnJpY2EsIE1ldGVsbHVzLCBub3cgYmVjb21lIGEgdmljdGltIG9mIGplYWxvdXN5LCBhbmQgdmV4ZWQgYmVjYXVzZSwgYWZ0ZXIgaGUgaGFkIGJyb3VnaHQgdGhlIHdhciB0byBhbiBlbmQgYW5kIGhhZCBub3RoaW5nIGZ1cnRoZXIgdG8gZG8gZXhjZXB0IHRvIHNlaXplIHRoZSBwZXJzb24gb2YgSnVndXJ0aGEsIE1hcml1cyB3YXMgY29taW5nIHRvIGVuam95IHRoZSBjcm93biBhbmQgdGhlIHRyaXVtcGgs4oCUYSBtYW4gd2hvc2UgaW5ncmF0aXR1ZGUgdG93YXJkcyBoaXMgYmVuZWZhY3RvciBoYWQgcmFpc2VkIGhpbSB0byBwb3dlcizigJR3b3VsZCBub3QgY29uc2VudCB0byBtZWV0IGhpbSwgYnV0IHByaXZhdGVseSBsZWZ0IHRoZSBjb3VudHJ5IHdoaWxlIFJ1dGlsaXVzLCB3aG8gaGFkIGJlY29tZSBoaXMgbGVnYXRlLCBoYW5kZWQgb3ZlciB0aGUgYXJteSB0byBNYXJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgZW5kIGEgcmV0cmlidXRpb24gZmVsbCB1cG9uIE1hcml1czsgZm9yIFN1bGxhIHJvYmJlZCBoaW0gb2YgdGhlIGdsb3J5IG9mIGhpcyBzdWNjZXNzLCBhcyBNYXJpdXMgaGFkIHJvYmJlZCBNZXRlbGx1cy4gSG93IHRoaXMgY2FtZSB0byBwYXNzLCBJIHdpbGwgbmFycmF0ZSBicmllZmx5LCBzaW5jZSB0aGUgZGV0YWlscyBhcmUgZ2l2ZW4gbW9yZSBhdCBsZW5ndGggaW4gbXkgTGlmZSBvZiBTdWxsYS4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+IAogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMy4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIGlpaS4gPC9iaWJsPiAKICAgICAgICAgICAgPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8cD5Cb2NjaHVzLCB0aGUga2luZyBvZiB0aGUgQmFyYmFyaWFucyBpbiB0aGUgaW50ZXJpb3IsIHdhcyBhIHNvbi1pbi1sYXcgb2YgSnVndXJ0aGEsIGFuZCBhcHBhcmVudGx5IGdhdmUgaGltIGxpdHRsZSBvciBubyBhc3Npc3RhbmNlIGluIGhpcyB3YXIsIGFsbGVnaW5nIGhpcyBmYWl0aGxlc3NuZXNzIGFzIGFuIGV4Y3VzZSwgYW5kIGZlYXJpbmcgdGhlIGdyb3d0aCBvZiBoaXMgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEp1Z3VydGhhIGluIGhpcyBmbGlnaHQgYW5kIHdhbmRlcmluZyBmZWx0IGNvbXBlbGxlZCB0byBtYWtlIGhpbSBoaXMgbGFzdCBob3BlIGFuZCBzb3VnaHQgaGF2ZW4gd2l0aCBoaW0sIEJvY2NodXMgcmVjZWl2ZWQgaGltLCBtb3JlIG91dCBvZiByZWdhcmQgZm9yIGhpcyBwb3NpdGlvbiBhcyBhIHN1cHBsaWFudCB0aGFuIGZyb20gZ29vZHdpbGwsIGFuZCBrZXB0IGhpbSBpbiBoaXMgaGFuZHMuIFNvIGZhciBhcyBoaXMgb3BlbiBhY3RzIHdlcmUgY29uY2VybmVkLCBCb2NjaHVzIGVudHJlYXRlZCBNYXJpdXMgaW4gYmVoYWxmIG9mIGhpcyBmYXRoZXItaW4tbGF3LCB3cml0aW5nIHRoYXQgaGUgd291bGQgbm90IGdpdmUgaGltIHVwIGFuZCBhc3N1bWluZyBhIGJvbGQgdG9uZTsgYnV0IHNlY3JldGx5IGhlIHBsYW5uZWQgdG8gYmV0cmF5IGhpbSwgYW5kIHNlbnQgZm9yIEx1Y2l1cyBTdWxsYSwgd2hvIHdhcyBxdWFlc3RvciBmb3IgTWFyaXVzIGFuZCBoYWQgYmVlbiBvZiBzb21lIHNlcnZpY2UgdG8gQm9jY2h1cyBkdXJpbmcgdGhlIGNhbXBhaWduLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBTdWxsYSBoYWQgY29tZSB0byBoaW0gaW4gYWxsIGNvbmZpZGVuY2UsIHRoZSBCYXJiYXJpYW4gZXhwZXJpZW5jZWQgYSBjaGFuZ2Ugb2YgaGVhcnQgYW5kIGZlbHQgcmVwZW50YW50LCBhbmQgZm9yIG1hbnkgZGF5cyB3YXZlcmVkIGluIGhpcyBwbGFucywgZGVsaWJlcmF0aW5nIHdoZXRoZXIgdG8gc3VycmVuZGVyIEp1Z3VydGhhIG9yIHRvIGhvbGQgU3VsbGEgYWxzbyBhIHByaXNvbmVyLiBGaW5hbGx5IGhvd2V2ZXIsIGhlIGRlY2lkZWQgdXBvbiBoaXMgZmlyc3QgcGxhbiBvZiB0cmVhY2hlcnksIGFuZCBwdXQgSnVndXJ0aGEgYWxpdmUgaW50byB0aGUgaGFuZHMgb2YgU3VsbGEuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgZmlyc3Qgc2VlZCBvZiB0aGF0IGJpdHRlciBhbmQgaW5jdXJhYmxlIGhhdHJlZCBiZXR3ZWVuIE1hcml1cyBhbmQgU3VsbGEsIHdoaWNoIG5lYXJseSBicm91Z2h0IFJvbWUgdG8gcnVpbi4gRm9yIG1hbnkgd2lzaGVkIFN1bGxhIHRvIGhhdmUgdGhlIGdsb3J5IG9mIHRoZSBhZmZhaXIgYmVjYXVzZSB0aGV5IGhhdGVkIE1hcml1cywgYW5kIFN1bGxhIGhpbXNlbGYgaGFkIGEgc2VhbC1yaW5nIG1hZGUsIHdoaWNoIGhlIHVzZWQgdG8gd2Vhciwgb24gd2hpY2ggd2FzIGVuZ3JhdmVkIHRoZSBzdXJyZW5kZXIgb2YgSnVndXJ0aGEgdG8gaGltIGJ5IEJvY2NodXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ5IGNvbnN0YW50bHkgdXNpbmcgdGhpcyByaW5nIFN1bGxhIHByb3Zva2VkIE1hcml1cywgd2hvIHdhcyBhbiBhbWJpdGlvdXMgbWFuLCBsb2F0aCB0byBzaGFyZSBoaXMgZ2xvcnkgd2l0aCBhbm90aGVyLCBhbmQgcXVhcnJlbHNvbWUuIEFuZCB0aGUgZW5lbWllcyBvZiBNYXJpdXMgZ2F2ZSBTdWxsYSBtb3N0IGVuY291cmFnZW1lbnQsIGJ5IGF0dHJpYnV0aW5nIHRoZSBmaXJzdCBhbmQgZ3JlYXRlc3Qgc3VjY2Vzc2VzIG9mIHRoZSB3YXIgdG8gTWV0ZWxsdXMsIGJ1dCB0aGUgbGFzdCwgYW5kIHRoZSB0ZXJtaW5hdGlvbiBvZiBpdCwgdG8gU3VsbGEsIHRoYXQgc28gdGhlIHBlb3BsZSBtaWdodCBjZWFzZSBhZG1pcmluZyBNYXJpdXMgYW5kIGdpdmluZyBoaW0gdGhlaXIgY2hpZWYgYWxsZWdpYW5jZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvb24sIGhvd2V2ZXIsIGFsbCB0aGlzIGVudnkgYW5kIGhhdHJlZCBhbmQgc2xhbmRlciBvZiBNYXJpdXMgd2FzIHJlbW92ZWQgYW5kIGRpc3NpcGF0ZWQgYnkgdGhlIHBlcmlsIHdoaWNoIHRocmVhdGVuZWQgSXRhbHkgZnJvbSB0aGUgd2VzdCwgYXMgc29vbiBhcyB0aGUgc3RhdGUgZmVsdCB0aGUgbmVlZCBvZiBhIGdyZWF0IGdlbmVyYWwgYW5kIGxvb2tlZCBhYm91dCBmb3IgYSBoZWxtc21hbiB3aG9tIHNoZSBtaWdodCBlbXBsb3kgdG8gc2F2ZSBoZXIgZnJvbSBzbyBncmVhdCBhIGRlbHVnZSBvZiB3YXIuIFRoZW4gdGhlIHBlb3BsZSB3b3VsZCBoYXZlIG5vdGhpbmcgdG8gZG8gd2l0aCBhbnlvbmUgb2YgaGlnaCBiaXJ0aCBvciBvZiBhIHdlYWx0aHkgaG91c2Ugd2hvIG9mZmVyZWQgaGltc2VsZiBhdCB0aGUgY29uc3VsYXIgZWxlY3Rpb25zLCBidXQgcHJvY2xhaW1lZCBNYXJpdXMgY29uc3VsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciAxMDQgQi5DLiA8L25vdGU+IGluIHNwaXRlIG9mIGhpcyBhYnNlbmNlIGZyb20gdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyBzb29uZXIgaGFkIHdvcmQgYmVlbiBicm91Z2h0IHRvIHRoZSBwZW9wbGUgb2YgdGhlIGNhcHR1cmUgb2YgSnVndXJ0aGEgdGhhbiB0aGUgcmVwb3J0cyBhYm91dCB0aGUgVGV1dG9uZXMgYW5kIENpbWJyaSBmZWxsIHVwb24gdGhlaXIgZWFycy4gV2hhdCB0aGVzZSByZXBvcnRzIHNhaWQgYWJvdXQgdGhlIG51bWJlcnMgYW5kIHN0cmVuZ3RoIG9mIHRoZSBpbnZhZGluZyBob3N0cyB3YXMgZGlzYmVsaWV2ZWQgYXQgZmlyc3QsIGJ1dCBhZnRlcndhcmRzIGl0IHdhcyBmb3VuZCB0byBiZSBzaG9ydCBvZiB0aGUgdHJ1dGguIEZvciB0aHJlZSBodW5kcmVkIHRob3VzYW5kIGFybWVkIGZpZ2h0aW5nIG1lbiB3ZXJlIGFkdmFuY2luZywgYW5kIG11Y2ggbGFyZ2VyIGhvcmRlcyBvZiB3b21lbiBhbmQgY2hpbGRyZW4gd2VyZSBzYWlkIHRvIGFjY29tcGFueSB0aGVtLCBpbiBxdWVzdCBvZiBsYW5kIHRvIHN1cHBvcnQgc28gdmFzdCBhIG11bHRpdHVkZSwgYW5kIG9mIGNpdGllcyBpbiB3aGljaCB0byBzZXR0bGUgYW5kIGxpdmUsIGp1c3QgYXMgdGhlIEdhdWxzIGJlZm9yZSB0aGVtLCBhcyB0aGV5IGxlYXJuZWQsIGhhZCB3cmVzdGVkIHRoZSBiZXN0IHBhcnQgb2YgSXRhbHkgZnJvbSB0aGUgVHlycmhlbmlhbnMgYW5kIG5vdyBvY2N1cGllZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB0aGVtc2VsdmVzLCBpbmRlZWQsIGhhZCBub3QgaGFkIGludGVyY291cnNlIHdpdGggb3RoZXIgcGVvcGxlcywgYW5kIGhhZCB0cmF2ZXJzZWQgYSBncmVhdCBzdHJldGNoIG9mIGNvdW50cnksIHNvIHRoYXQgaXQgY291bGQgbm90IGJlIGFzY2VydGFpbmVkIHdoYXQgcGVvcGxlIGl0IHdhcyBub3Igd2hlbmNlIHRoZXkgaGFkIHNldCBvdXQsIHRodXMgdG8gZGVzY2VuZCB1cG9uIEdhdWwgYW5kIEl0YWx5IGxpa2UgYSBjbG91ZC4gVGhlIG1vc3QgcHJldmFsZW50IGNvbmplY3R1cmUgd2FzIHRoYXQgdGhleSB3ZXJlIHNvbWUgb2YgdGhlIEdlcm1hbiBwZW9wbGVzIHdoaWNoIGV4dGVuZGVkIGFzIGZhciBhcyB0aGUgbm9ydGhlcm4gb2NlYW4sIGEgY29uamVjdHVyZSBiYXNlZCBvbiB0aGVpciBncmVhdCBzdGF0dXJlLCB0aGVpciBsaWdodC1ibHVlIGV5ZXMsIGFuZCB0aGUgZmFjdCB0aGF0IHRoZSBHZXJtYW5zIGNhbGwgcm9iYmVycyBDaW1icmkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlcmUgYXJlIHNvbWUgd2hvIHNheSB0aGF0IEdhdWwgd2FzIHdpZGUgYW5kIGxhcmdlIGVub3VnaCB0byByZWFjaCBmcm9tIHRoZSBvdXRlciBzZWEgYW5kIHRoZSBzdWJhcmN0aWMgcmVnaW9ucyB0byB0aGUgTWFlb3RpYyBMYWtlIG9uIHRoZSBlYXN0LCB3aGVyZSBpdCBib3JkZXJlZCBvbiBQb250aWMgU2N5dGhpYSwgYW5kIHRoYXQgZnJvbSB0aGF0IHBvaW50IG9uIEdhdWxzIGFuZCBTY3l0aGlhbnMgd2VyZSBtaW5nbGVkLiBUaGVzZSBtaXhlZCBHYXVscyBhbmQgU2N5dGhpYW5zIGhhZCBsZWZ0IHRoZWlyIGhvbWVzIGFuZCBtb3ZlZCB3ZXN0d2FyZCwgbm90IGluIGEgc2luZ2xlIG1hcmNoLCBub3IgZXZlbiBjb250aW51b3VzbHksIGJ1dCB3aXRoIGVhY2ggcmVjdXJyaW5nIHNwcmluZyB0aGV5IGhhZCBnb25lIGZvcndhcmQsIGZpZ2h0aW5nIHRoZWlyIHdheSwgYW5kIGluIHRoZSBjb3Vyc2Ugb2YgdGltZSBoYWQgY3Jvc3NlZCB0aGUgY29udGluZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIHdoaWxlIHRoZXkgaGFkIG1hbnkgbmFtZXMgZm9yIGRpZmZlcmVudCBkZXRhY2htZW50cywgdGhleSBjYWxsZWQgdGhlaXIgd2hvbGUgYXJteSBieSB0aGUgZ2VuZXJhbCBuYW1lIG9mIEdhbGxvc2N5dGhpYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPk90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgdGhlIENpbW1lcmlhbnMgd2hvIHdlcmUgZmlyc3Qga25vd24gdG8gdGhlIGFuY2llbnQgR3JlZWtzIHdlcmUgbm90IGEgbGFyZ2UgcGFydCBvZiB0aGUgZW50aXJlIHBlb3BsZSwgYnV0IG1lcmVseSBhIGJvZHkgb2YgZXhpbGVzIG9yIGEgZmFjdGlvbiB3aGljaCB3YXMgZHJpdmVuIGF3YXkgYnkgdGhlIFNjeXRoaWFucyBhbmQgcGFzc2VkIGZyb20gdGhlIE1hZW90aWMgTGFrZSBpbnRvIEFzaWEgdW5kZXIgdGhlIGxlYWQgb2YgTHlnZGFtaXM7IHdoZXJlYXMgdGhlIGxhcmdlc3QgYW5kIG1vc3Qgd2FybGlrZSBwYXJ0IG9mIHRoZSBwZW9wbGUgZHdlbHQgYXQgdGhlIGNvbmZpbmVzIG9mIHRoZSBlYXJ0aCBhbG9uZyB0aGUgb3V0ZXIgc2VhLCBvY2N1cHlpbmcgYSBsYW5kIHRoYXQgaXMgc2hhZGVkLCB3b29kZWQsIGFuZCB3aG9sbHkgc3VubGVzcyBieSByZWFzb24gb2YgdGhlIGhlaWdodCBhbmQgdGhpY2tuZXNzIG9mIHRoZSB0cmVlcywgd2hpY2ggcmVhY2ggaW5sYW5kIGFzIGZhciBhcyB0aGUgSGVyY3luaWk7IAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhcyByZWdhcmRzIHRoZSBoZWF2ZW5zLCB0aGV5IGFyZSB1bmRlciB0aGF0IHBvcnRpb24gb2YgdGhlbSB3aGVyZSB0aGUgcG9sZSBnZXRzIGEgZ3JlYXQgZWxldmF0aW9uIGJ5IHJlYXNvbiBvZiB0aGUgZGVjbGluYXRpb24gb2YgdGhlIHBhcmFsbGVscywgYW5kIGFwcGVhcnMgdG8gaGF2ZSBhIHBvc2l0aW9uIG5vdCBmYXIgcmVtb3ZlZCBmcm9tIHRoZSBzcGVjdGF0b3IncyB6ZW5pdGgsIGFuZCBhIGRheSBhbmQgYSBuaWdodCBkaXZpZGUgdGhlIHllYXIgaW50byB0d28gZXF1YWwgcGFydHM7IHdoaWNoIHdhcyBvZiBhZHZhbnRhZ2UgdG8gSG9tZXIgaW4gaGlzIHN0b3J5IG9mIE9keXNzZXVzIGNvbnN1bHRpbmcgdGhlIHNoYWRlcyBvZiB0aGUgZGVhZC4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+IAogICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleSA8L3RpdGxlPiwgQm9vayBYSS4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDExLjEwIiB2YWxpZD0ieWVzIj5TZWUgdnYuIDE0IGZmLiA8L2JpYmw+LCBkZXNjcmliaW5nIHRoZSBDaW1tZXJpYW5zLiA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVzZSByZWdpb25zLCB0aGVuLCB0aGVzZSBCYXJiYXJpYW5zIHNhbGxpZWQgZm9ydGggYWdhaW5zdCBJdGFseSwgYmVpbmcgY2FsbGVkIGF0IGZpcnN0IENpbW1lcmlhbnMsIGFuZCB0aGVuLCBub3QgaW5hcHByb3ByaWF0ZWx5LCBDaW1icmkuIEJ1dCBhbGwgdGhpcyBpcyBiYXNlZCBvbiBjb25qZWN0dXJlIHJhdGhlciB0aGFuIG9uIHN1cmUgaGlzdG9yaWNhbCBldmlkZW5jZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIG51bWJlcnMsIGhvd2V2ZXIsIGFyZSBnaXZlbiBieSBtYW55IHdyaXRlcnMgYXMgbm90IGxlc3MsIGJ1dCBtb3JlLCB0aGFuIHRoZSBmaWd1cmUgbWVudGlvbmVkIGFib3ZlLiBNb3Jlb3ZlciwgdGhlaXIgY291cmFnZSBhbmQgZGFyaW5nIG1hZGUgdGhlbSBpcnJlc2lzdGlibGUsIGFuZCB3aGVuIHRoZXkgZW5nYWdlZCBpbiBiYXR0bGUgdGhleSBjYW1lIG9uIHdpdGggdGhlIHN3aWZ0bmVzcyBhbmQgZm9yY2Ugb2YgZmlyZSwgc28gdGhhdCBubyBvbmUgY291bGQgd2l0aHN0YW5kIHRoZWlyIG9uc2V0LCBidXQgYWxsIHdobyBjYW1lIGluIHRoZWlyIHdheSBiZWNhbWUgdGhlaXIgcHJleSBhbmQgYm9vdHksIGFuZCBldmVuIG1hbnkgbGFyZ2UgUm9tYW4gYXJtaWVzLCB3aXRoIHRoZWlyIGNvbW1hbmRlcnMsIHdobyBoYWQgYmVlbiBzdGF0aW9uZWQgdG8gcHJvdGVjdCBUcmFuc2FscGluZSBHYXVsLCB3ZXJlIGRlc3Ryb3llZCBpbmdsb3Jpb3VzbHk7IAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmluZGVlZCwgYnkgdGhlaXIgZmVlYmxlIHJlc2lzdGFuY2UgdGhleSB3ZXJlIG1haW5seSBpbnN0cnVtZW50YWwgaW4gZHJhd2luZyB0aGUgb24tcnVzaGluZyBCYXJiYXJpYW5zIGRvd24gdXBvbiBSb21lLiBGb3Igd2hlbiB0aGUgaW52YWRlcnMgaGFkIGNvbnF1ZXJlZCB0aG9zZSB3aG8gb3Bwb3NlZCB0aGVtLCBhbmQgaGFkIGdvdCBhYnVuZGFuY2Ugb2YgYm9vdHksIHRoZXkgZGV0ZXJtaW5lZCBub3QgdG8gc2V0dGxlIHRoZW1zZWx2ZXMgYW55d2hlcmUgdW50aWwgdGhleSBoYWQgZGVzdHJveWVkIFJvbWUgYW5kIHJhdmFnZWQgSXRhbHkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5MZWFybmluZyBvZiB0aGVzZSB0aGluZ3MgZnJvbSBtYW55IHF1YXJ0ZXJzLCB0aGUgUm9tYW5zIHN1bW1vbmVkIE1hcml1cyB0byB0aGUgY29tbWFuZC4gQW5kIGhlIHdhcyBhcHBvaW50ZWQgY29uc3VsIGZvciB0aGUgc2Vjb25kIHRpbWUsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTEuMSIgdmFsaWQ9InllcyI+U2VlIGNoYXB0ZXIgeGkuIDEuIDwvYmlibD4gTWFyaXVzIHdhcyBzdGlsbCBpbiBBZnJpY2EuIDwvbm90ZT4gYWx0aG91Z2ggdGhlIGxhdyBmb3JiYWRlIHRoYXQgYSBtYW4gaW4gaGlzIGFic2VuY2UgYW5kIGJlZm9yZSB0aGUgbGFwc2Ugb2YgYSBzcGVjaWZpZWQgdGltZSBzaG91bGQgYmUgZWxlY3RlZCBhZ2Fpbjsgc3RpbGwsIHRoZSBwZW9wbGUgd291bGQgbm90IGxpc3RlbiB0byB0aG9zZSB3aG8gb3Bwb3NlZCB0aGUgZWxlY3Rpb24uIEZvciB0aGV5IGNvbnNpZGVyZWQgdGhhdCB0aGlzIHdvdWxkIG5vdCBiZSB0aGUgZmlyc3QgdGltZSB0aGF0IHRoZSBsYXcgaGFkIGdpdmVuIHdheSBiZWZvcmUgdGhlIGRlbWFuZHMgb2YgdGhlIGdlbmVyYWwgZ29vZCwgYW5kIHRoYXQgdGhlIHByZXNlbnQgb2NjYXNpb24gZGVtYW5kZWQgaXQgbm8gbGVzcyBpbXBlcmF0aXZlbHkgdGhhbiB3aGVuIHRoZXkgaGFkIG1hZGUgU2NpcGlvIGNvbnN1bCBjb250cmFyeSB0byB0aGUgbGF3cywgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTQ3IEIuQy4sIHdoZW4gU2NpcGlvIGhhZCBub3QgcmVhY2hlZCB0aGUgYWdlIHJlcXVpcmVkIGJ5IGxhdy4gPC9ub3RlPiBhbHRob3VnaCBhdCB0aGF0IHRpbWUgdGhleSB3ZXJlIG5vdCBmZWFyZnVsIG9mIGxvc2luZyB0aGVpciBvd24gY2l0eSwgYnV0IGRlc2lyb3VzIG9mIGRlc3Ryb3lpbmcgdGhhdCBvZiB0aGUgQ2FydGhhZ2luaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjb3Vyc2Ugd2FzIGFkb3B0ZWQsIE1hcml1cyBjYW1lIGFjcm9zcyB0aGUgc2VhIGZyb20gQWZyaWNhIHdpdGggaGlzIGFybXksIGFuZCBvbiB0aGUgdmVyeSBDYWxlbmRzIG9mIEphbnVhcnksIHdoaWNoIHdpdGggdGhlIFJvbWFucyBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB5ZWFyLCBhc3N1bWVkIHRoZSBjb25zdWxzaGlwIGFuZCBjZWxlYnJhdGVkIGhpcyB0cml1bXBoLCBleGhpYml0aW5nIHRvIHRoZSBSb21hbnMgSnVndXJ0aGEgaW4gY2hhaW5zLiBUaGlzIHdhcyBhIHNpZ2h0IHdoaWNoIHRoZXkgaGFkIGRlc3BhaXJlZCBvZiBiZWhvbGRpbmcsIG5vciBjb3VsZCBhbnkgb25lIGhhdmUgZXhwZWN0ZWQsIHdoaWxlIEp1Z3VydGhhIHdhcyBhbGl2ZSwgdG8gY29ucXVlciB0aGUgZW5lbXk7IHNvIHZlcnNhdGlsZSB3YXMgaGUgaW4gYWRhcHRpbmcgaGltc2VsZiB0byB0aGUgdHVybnMgb2YgZm9ydHVuZSwgYW5kIHNvIGdyZWF0IGNyYWZ0IGRpZCBoZSBjb21iaW5lIHdpdGggaGlzIGNvdXJhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gaGUgaGFkIGJlZW4gbGVkIGluIHRyaXVtcGggaGUgbG9zdCBoaXMgcmVhc29uOyBhbmQgdGhhdCB3aGVuLCBhZnRlciB0aGUgdHJpdW1waCwgaGUgd2FzIGNhc3QgaW50byBwcmlzb24sIHdoZXJlIHNvbWUgdG9yZSBoaXMgdHVuaWMgZnJvbSBoaXMgYm9keSwgYW5kIG90aGVycyB3ZXJlIHNvIGVhZ2VyIHRvIHNuYXRjaCBhd2F5IGhpcyBnb2xkZW4gZWFycmluZyB0aGF0IHRoZXkgdG9yZSBvZmYgd2l0aCBpdCB0aGUgbG9iZSBvZiBoaXMgZWFyLCBhbmQgd2hlbiBoZSBoYWQgYmVlbiB0aHJ1c3QgZG93biBuYWtlZCBpbnRvIHRoZSBkdW5nZW9uIHBpdCwgaW4gdXR0ZXIgYmV3aWxkZXJtZW50IGFuZCB3aXRoIGEgZ3JpbiBvbiBoaXMgbGlwcyBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlcmN1bGVzISBIb3cgY29sZCB0aGlzIFJvbWFuIGJhdGggaXMhPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgd3JldGNoLCBhZnRlciBzdHJ1Z2dsaW5nIHdpdGggaHVuZ2VyIGZvciBzaXggZGF5cyBhbmQgdXAgdG8gdGhlIGxhc3QgbW9tZW50IGNsaW5naW5nIHRvIHRoZSBkZXNpcmUgb2YgbGlmZSwgcGFpZCB0aGUgcGVuYWx0eSB3aGljaCBoaXMgY3JpbWVzIGRlc2VydmVkLgoJCQk8L3A+CiAgICAgICAgIDxwPkluIHRoZSB0cml1bXBoYWwgcHJvY2Vzc2lvbiB0aGVyZSB3ZXJlIGNhcnJpZWQsIHdlIGFyZSB0b2xkLCB0aHJlZSB0aG91c2FuZCBhbmQgc2V2ZW4gcG91bmRzIG9mIGdvbGQsIG9mIHVuY29pbmVkIHNpbHZlciBmaXZlIHRob3VzYW5kIHNldmVuIGh1bmRyZWQgYW5kIHNldmVudHktZml2ZSwgYW5kIGluIGNvaW5lZCBtb25leSB0d28gaHVuZHJlZCBhbmQgZWlnaHR5LXNldmVuIHRob3VzYW5kIGRyYWNobWFzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIHByb2Nlc3Npb24gd2FzIG92ZXIsIE1hcml1cyBjYWxsZWQgdGhlIHNlbmF0ZSBpbnRvIHNlc3Npb24gb24gdGhlIENhcGl0b2wsIGFuZCBtYWRlIGhpcyBlbnRyeSwgZWl0aGVyIHRocm91Z2ggaW5hZHZlcnRlbmNlIG9yIHdpdGggYSB2dWxnYXIgZGlzcGxheSBvZiBoaXMgZ29vZCBmb3J0dW5lLCBpbiBoaXMgdHJpdW1waGFsIHJvYmVzOyBidXQgcGVyY2VpdmluZyBxdWlja2x5IHRoYXQgdGhlIHNlbmF0b3JzIHdlcmUgb2ZmZW5kZWQgYXQgdGhpcywgaGUgcm9zZSBhbmQgd2VudCBvdXQsIGNoYW5nZWQgdG8gdGhlIHVzdWFsIHJvYmUgd2l0aCBwdXJwbGUgYm9yZGVyLCBhbmQgdGhlbiBjYW1lIGJhY2suCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TZXR0aW5nIG91dCBvbiB0aGUgZXhwZWRpdGlvbiwgaGUgbGFib3VyZWQgdG8gcGVyZmVjdCBoaXMgYXJteSBhcyBpdCB3ZW50IGFsb25nLCBwcmFjdGlzaW5nIHRoZSBtZW4gaW4gYWxsIGtpbmRzIG9mIHJ1bm5pbmcgYW5kIGluIGxvbmcgbWFyY2hlcywgYW5kIGNvbXBlbGxpbmcgdGhlbSB0byBjYXJyeSB0aGVpciBvd24gYmFnZ2FnZSBhbmQgdG8gcHJlcGFyZSB0aGVpciBvd24gZm9vZC4gSGVuY2UsIGluIGFmdGVyIHRpbWVzLCBtZW4gd2hvIHdlcmUgZm9uZCBvZiB0b2lsIGFuZCBkaWQgd2hhdGV2ZXIgd2FzIGVuam9pbmVkIHVwb24gdGhlbSBjb250ZW50ZWRseSBhbmQgd2l0aG91dCBhIG11cm11ciwgd2VyZSBjYWxsZWQgTWFyaWFuIG11bGVzLiBTb21lLCBob3dldmVyLCB0aGluayB0aGF0IHRoaXMgbmFtZSBoYWQgYSBkaWZmZXJlbnQgb3JpZ2luLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5OYW1lbHksIHdoZW4gU2NpcGlvIHdhcyBiZXNpZWdpbmcgTnVtYW50aWEsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAzLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAyIDwvYmlibD4uIDwvbm90ZT4gaGUgd2lzaGVkIHRvIGluc3BlY3Qgbm90IG9ubHkgdGhlIGFybXMgYW5kIHRoZSBob3JzZXMsIGJ1dCBhbHNvIHRoZSBtdWxlcyBhbmQgdGhlIHdhZ2dvbnMsIHRoYXQgZXZlcnkgbWFuIG1pZ2h0IGhhdmUgdGhlbSBpbiByZWFkaW5lc3MgYW5kIGdvb2Qgb3JkZXIuIE1hcml1cywgYWNjb3JkaW5nbHksIGJyb3VnaHQgb3V0IGZvciBpbnNwZWN0aW9uIGJvdGggYSBob3JzZSB0aGF0IGhhZCBiZWVuIG1vc3QgZXhjZWxsZW50bHkgdGFrZW4gY2FyZSBvZiBieSBoaW0sIGFuZCBhIG11bGUgdGhhdCBmb3IgaGVhbHRoLCBkb2NpbGl0eSwgYW5kIHN0cmVuZ3RoIGZhciBzdXJwYXNzZWQgYWxsIHRoZSByZXN0LiBUaGUgY29tbWFuZGluZyBvZmZpY2VyIHdhcyBuYXR1cmFsbHkgd2VsbCBwbGVhc2VkIHdpdGggdGhlIGJlYXN0cyBvZiBNYXJpdXMgYW5kIG9mdGVuIHNwb2tlIGFib3V0IHRoZW0sIHNvIHRoYXQgaW4gdGltZSB0aG9zZSB3aG8gd2FudGVkIHRvIGJlc3RvdyBmYWNldGlvdXMgcHJhaXNlIG9uIGEgcGVyc2V2ZXJpbmcsIHBhdGllbnQsIGxhYm9yaW91cyBtYW4gd291bGQgY2FsbCBoaW0gYSBNYXJpYW4gbXVsZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGFzIGl0IHdvdWxkIHNlZW0sIGEgZ3JlYXQgcGllY2Ugb2YgZ29vZCBmb3J0dW5lIGJlZmVsbCBNYXJpdXMuIEZvciB0aGUgQmFyYmFyaWFucyBoYWQgYSByZWZsdXgsIGFzIGl0IHdlcmUsIGluIHRoZWlyIGNvdXJzZSwgYW5kIHN0cmVhbWVkIGZpcnN0IGludG8gU3BhaW4uIFRoaXMgZ2F2ZSBNYXJpdXMgdGltZSB0byBleGVyY2lzZSB0aGUgYm9kaWVzIG9mIGhpcyBtZW4sIHRvIHJhaXNlIHRoZWlyIHNwaXJpdHMgdG8gYSBzdHVyZGllciBjb3VyYWdlLCBhbmQsIHdoYXQgd2FzIG1vc3QgaW1wb3J0YW50IG9mIGFsbCwgdG8gbGV0IHRoZW0gZmluZCBvdXQgd2hhdCBzb3J0IG9mIGEgbWFuIGhlIHdhcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhpcyBzdGVybm5lc3MgaW4gdGhlIGV4ZXJjaXNlIG9mIGF1dGhvcml0eSBhbmQgaGlzIGluZmxleGliaWxpdHkgaW4gdGhlIGluZmxpY3Rpb24gb2YgcHVuaXNobWVudCBhcHBlYXJlZCB0byB0aGVtLCB3aGVuIHRoZXkgYmVjYW1lIGFjY3VzdG9tZWQgdG8gb2JlZGllbmNlIGFuZCBnb29kIGJlaGF2aW91ciwgc2FsdXRhcnkgYXMgd2VsbCBhcyBqdXN0LCBhbmQgdGhleSByZWdhcmRlZCB0aGUgZmllcmNlbmVzcyBvZiBoaXMgdGVtcGVyLCB0aGUgaGFyc2huZXNzIG9mIGhpcyB2b2ljZSwgYW5kIHRoYXQgZmVyb2NpdHkgb2YgaGlzIGNvdW50ZW5hbmNlIHdoaWNoIGdyYWR1YWxseSBiZWNhbWUgZmFtaWxpYXIsIGFzIGZlYXJmdWwgdG8gdGhlaXIgZW5lbWllcyByYXRoZXIgdGhhbiB0byB0aGVtc2VsdmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgd2FzIGFib3ZlIGFsbCB0aGluZ3MgdGhlIHVwcmlnaHRuZXNzIG9mIGhpcyBqdWRpY2lhbCBkZWNpc2lvbnMgdGhhdCBwbGVhc2VkIHRoZSBzb2xkaWVyczsgYW5kIG9mIHRoaXMgdGhlIGZvbGxvd2luZyBpbGx1c3RyYXRpb24gaXMgZ2l2ZW4uCgkJCTwvcD4KICAgICAgICAgPHA+Q2FpdXMgTHVzaXVzLCBhIG5lcGhldyBvZiBoaXMsIGhhZCBhIGNvbW1hbmQgdW5kZXIgaGltIGluIHRoZSBhcm15LiBJbiBvdGhlciByZXNwZWN0cyBoZSB3YXMgYSBtYW4gb2YgZ29vZCByZXB1dGF0aW9uLCBidXQgaGUgaGFkIGEgd2Vha25lc3MgZm9yIGJlYXV0aWZ1bCB5b3V0aHMuIFRoaXMgb2ZmaWNlciB3YXMgZW5hbW91cmVkIG9mIG9uZSBvZiB0aGUgeW91bmcgbWVuIHdobyBzZXJ2ZWQgdW5kZXIgaGltLCBieSBuYW1lIFRyZWJvbml1cywgYW5kIGhhZCBvZnRlbiBtYWRlIHVuc3VjY2Vzc2Z1bCBhdHRlbXB0cyB0byBzZWR1Y2UgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZmluYWxseSwgYXQgbmlnaHQsIGhlIHNlbnQgYSBzZXJ2YW50IHdpdGggYSBzdW1tb25zIGZvciBUcmVib25pdXMuIFRoZSB5b3VuZyBtYW4gY2FtZSwgc2luY2UgaGUgY291bGQgbm90IHJlZnVzZSB0byBvYmV5IGEgc3VtbW9ucywgYnV0IHdoZW4gaGUgaGFkIGJlZW4gaW50cm9kdWNlZCBpbnRvIHRoZSB0ZW50IGFuZCBDYWl1cyBhdHRlbXB0ZWQgdmlvbGVuY2UgdXBvbiBoaW0sIGhlIGRyZXcgaGlzIHN3b3JkIGFuZCBzbGV3IGhpbS4gTWFyaXVzIHdhcyBub3Qgd2l0aCB0aGUgYXJteSB3aGVuIHRoaXMgaGFwcGVuZWQ7IGJ1dCBvbiBoaXMgcmV0dXJuIGhlIGJyb3VnaHQgVHJlYm9uaXVzIHRvIHRyaWFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHRoZXJlIHdlcmUgbWFueSBhY2N1c2VycywgYnV0IG5vdCBhIHNpbmdsZSBhZHZvY2F0ZSwgd2hlcmVmb3JlIFRyZWJvbml1cyBoaW1zZWxmIGNvdXJhZ2VvdXNseSB0b29rIHRoZSBzdGFuZCBhbmQgdG9sZCBhbGwgYWJvdXQgdGhlIG1hdHRlciwgYnJpbmdpbmcgd2l0bmVzc2VzIHRvIHNob3cgdGhhdCBoZSBoYWQgb2Z0ZW4gcmVmdXNlZCB0aGUgc29saWNpdGF0aW9ucyBvZiBMdXNpdXMgYW5kIHRoYXQgaW4gc3BpdGUgb2YgbGFyZ2Ugb2ZmZXJzIGhlIGhhZCBuZXZlciBwcm9zdGl0dXRlZCBoaW1zZWxmIHRvIGFueW9uZS4gVGhlbiBNYXJpdXMsIGZpbGxlZCB3aXRoIGRlbGlnaHQgYW5kIGFkbWlyYXRpb24sIG9yZGVyZWQgdGhlIGN1c3RvbWFyeSBjcm93biBmb3IgYnJhdmUgZXhwbG9pdHMgdG8gYmUgYnJvdWdodCwgYW5kIHdpdGggaGlzIG93biBoYW5kcyBwbGFjZWQgaXQgb24gdGhlIGhlYWQgb2YgVHJlYm9uaXVzLCBkZWNsYXJpbmcgdGhhdCBhdCBhIHRpbWUgd2hpY2ggY2FsbGVkIGZvciBub2JsZSBleGFtcGxlcyBoZSBoYWQgZGlzcGxheWVkIG1vc3Qgbm9ibGUgY29uZHVjdC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRpZGluZ3Mgb2YgdGhpcyB3ZXJlIGJyb3VnaHQgdG8gUm9tZSBhbmQgaGVscGVkIGluIG5vIHNtYWxsIGRlZ3JlZSB0byBzZWN1cmUgZm9yIE1hcml1cyBoaXMgdGhpcmQgY29uc3Vsc2hpcDsgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDEwMyBCLkMuIDwvbm90ZT4gYXQgdGhlIHNhbWUgdGltZSwgdG9vLCB0aGUgQmFyYmFyaWFucyB3ZXJlIGV4cGVjdGVkIGluIHRoZSBzcHJpbmcsIGFuZCB0aGUgUm9tYW5zIHdlcmUgdW53aWxsaW5nIHRvIHJpc2sgYmF0dGxlIHdpdGggdGhlbSB1bmRlciBhbnkgb3RoZXIgZ2VuZXJhbC4gSG93ZXZlciwgdGhlIEJhcmJhcmlhbnMgZGlkIG5vdCBjb21lIGFzIHNvb24gYXMgdGhleSB3ZXJlIGV4cGVjdGVkLCBhbmQgb25jZSBtb3JlIHRoZSBwZXJpb2Qgb2YgTWFyaXVzJ3MgY29uc3Vsc2hpcCBleHBpcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BcyB0aGUgY29uc3VsYXIgZWxlY3Rpb25zIHdlcmUgYXQgaGFuZCwgYW5kIGFzIGhpcyBjb2xsZWFndWUgaW4gdGhlIG9mZmljZSBoYWQgZGllZCwgTWFyaXVzIGxlZnQgTWFuaXVzIEFxdWlsbGl1cyBpbiBjaGFyZ2Ugb2YgdGhlIGZvcmNlcyBhbmQgY2FtZSBoaW1zZWxmIHRvIFJvbWUuIEhlcmUgbWFueSBtZW4gb2YgZ3JlYXQgbWVyaXQgd2VyZSBjYW5kaWRhdGVzIGZvciB0aGUgY29uc3Vsc2hpcCwgYnV0IEx1Y2l1cyBTYXR1cm5pbnVzLCB3aG8gaGFkIG1vcmUgaW5mbHVlbmNlIHdpdGggdGhlIHBlb3BsZSB0aGFuIGFueSBvdGhlciB0cmlidW5lLCB3YXMgd29uIG92ZXIgYnkgdGhlIGZsYXR0ZXJpbmcgYXR0ZW50aW9ucyBvZiBNYXJpdXMsIGFuZCBpbiBoaXMgaGFyYW5ndWVzIHVyZ2VkIHRoZSBwZW9wbGUgdG8gZWxlY3QgTWFyaXVzIGNvbnN1bC4gTWFyaXVzIGFmZmVjdGVkIHRvIGRlY2xpbmUgdGhlIG9mZmljZSBhbmQgZGVjbGFyZWQgdGhhdCBoZSBkaWQgbm90IHdhbnQgaXQsIGJ1dCBTYXR1cm5pbnVzIGNhbGxlZCBoaW0gYSB0cmFpdG9yIHRvIGhpcyBjb3VudHJ5IGZvciByZWZ1c2luZyB0byBjb21tYW5kIGhlciBhcm1pZXMgYXQgYSB0aW1lIG9mIHNvIGdyZWF0IHBlcmlsLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGl0IHdhcyBjbGVhciB0aGF0IFNhdHVybmludXMgd2FzIHBsYXlpbmcgaGlzIHBhcnQgYXQgdGhlIGluc3RpZ2F0aW9uIG9mIE1hcml1cywgYW5kIHBsYXlpbmcgaXQgYmFkbHksIHRvbywgYnV0IHRoZSBtdWx0aXR1ZGUsIHNlZWluZyB0aGF0IHRoZSBvY2Nhc2lvbiByZXF1aXJlZCB0aGUgYWJpbGl0eSBhcyB3ZWxsIGFzIHRoZSBnb29kIGZvcnR1bmUgb2YgTWFyaXVzLCB2b3RlZCBmb3IgaGlzIGZvdXJ0aCBjb25zdWxzaGlwLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xMDIgQi5DLiA8L25vdGU+IGFuZCBtYWRlIENhdHVsdXMgTHV0YXRpdXMgaGlzIGNvbGxlYWd1ZSwgYSBtYW4gd2hvIHdhcyBlc3RlZW1lZCBieSB0aGUgbm9iaWxpdHkgYW5kIG5vdCBkaXNsaWtlZCBieSB0aGUgY29tbW9uIHBlb3BsZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJTGVhcm5pbmcgdGhhdCB0aGUgZW5lbXkgd2VyZSBuZWFyLCBNYXJpdXMgcmFwaWRseSBjcm9zc2VkIHRoZSBBbHBzLCBhbmQgYnVpbHQgYSBmb3J0aWZpZWQgY2FtcCBhbG9uZyB0aGUgcml2ZXIgUmhvbmUuIEludG8gdGhpcyBoZSBicm91Z2h0IHRvZ2V0aGVyIGFuIGFidW5kYW5jZSBvZiBzdG9yZXMsIHRoYXQgaGUgbWlnaHQgbmV2ZXIgYmUgZm9yY2VkIGJ5IGxhY2sgb2YgcHJvdmlzaW9ucyB0byBnaXZlIGJhdHRsZSBjb250cmFyeSB0byBoaXMgYmV0dGVyIGp1ZGdtZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29udmV5YW5jZSBvZiB3aGF0IHdhcyBuZWVkZnVsIGZvciBoaXMgYXJteSwgd2hpY2ggaGFkIHByZXZpb3VzbHkgYmVlbiBhIGxvbmcgYW5kIGNvc3RseSBwcm9jZXNzIHdoZXJlIGl0IHdhcyBieSBzZWEsIGhlIHJlbmRlcmVkIGVhc3kgYW5kIHNwZWVkeS4gVGhhdCBpcywgdGhlIG1vdXRocyBvZiB0aGUgUmhvbmUsIGVuY291bnRlcmluZyB0aGUgc2VhLCB0b29rIHVwIGdyZWF0IHF1YW50aXRpZXMgb2YgbXVkIGFuZCBzYW5kIHBhY2tlZCBjbG9zZSB3aXRoIGNsYXkgYnkgdGhlIGFjdGlvbiBvZiB0aGUgYmlsbG93cywgYW5kIG1hZGUgdGhlIGVudHJhbmNlIG9mIHRoZSByaXZlciBkaWZmaWN1bHQsIGxhYm9yaW91cywgYW5kIHNsb3cgZm9yIHZlc3NlbHMgY2Fycnlpbmcgc3VwcGxpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIE1hcml1cyBicm91Z2h0IGhpcyBhcm15IHRvIHRoZSBwbGFjZSwgc2luY2UgdGhlIG1lbiBoYWQgbm90aGluZyBlbHNlIHRvIGRvLCBhbmQgcmFuIGEgZ3JlYXQgY2FuYWwuIEludG8gdGhpcyBoZSBkaXZlcnRlZCBhIGdyZWF0IHBhcnQgb2YgdGhlIHJpdmVyIGFuZCBicm91Z2h0IGl0IHJvdW5kIHRvIGEgc3VpdGFibGUgcGxhY2Ugb24gdGhlIGNvYXN0LCBhIGRlZXAgYmF5IHdoZXJlIGxhcmdlIHNoaXBzIGNvdWxkIGZsb2F0LCBhbmQgd2hlcmUgdGhlIHdhdGVyIGNvdWxkIGZsb3cgb3V0IHNtb290aGx5IGFuZCB3aXRob3V0IHdhdmVzIHRvIHRoZSBzZWEuIFRoaXMgY2FuYWwsIGluZGVlZCwgc3RpbGwgYmVhcnMgdGhlIG5hbWUgb2YgTWFyaXVzLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN0cmFiLiA0LjgiIHZhbGlkPSJ5ZXMiPlN0cmFibywgaXYuIDggKHAuIDE4MykgPC9iaWJsPi4gPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBCYXJiYXJpYW5zIGRpdmlkZWQgdGhlbXNlbHZlcyBpbnRvIHR3byBiYW5kcywgYW5kIGl0IGZlbGwgdG8gdGhlIGxvdCBvZiB0aGUgQ2ltYnJpIHRvIHByb2NlZWQgdGhyb3VnaCBOb3JpY3VtIGluIHRoZSBpbnRlcmlvciBvZiB0aGUgY291bnRyeSBhZ2FpbnN0IENhdHVsdXMsIGFuZCBmb3JjZSBhIHBhc3NhZ2UgdGhlcmUsIHdoaWxlIHRoZSBUZXV0b25lcyBhbmQgQW1icm9uZXMgd2VyZSB0byBtYXJjaCB0aHJvdWdoIExpZ3VyaWEgYWxvbmcgdGhlIHNlYS1jb2FzdCBhZ2FpbnN0IE1hcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIHBhcnQgb2YgdGhlIENpbWJyaSB0aGVyZSB3YXMgY29uc2lkZXJhYmxlIGRlbGF5IGFuZCBsb3NzIG9mIHRpbWUsIGJ1dCB0aGUgVGV1dG9uZXMgYW5kIEFtYnJvbmVzIHNldCBvdXQgYXQgb25jZSBwYXNzZWQgdGhyb3VnaCB0aGUgaW50ZXJ2ZW5pbmcgY291bnRyeSwgYW5kIG1hZGUgdGhlaXIgYXBwZWFyYW5jZSBiZWZvcmUgTWFyaXVzLiBUaGVpciBudW1iZXJzIHdlcmUgbGltaXRsZXNzLCB0aGV5IHdlcmUgaGlkZW91cyBpbiB0aGVpciBhc3BlY3QsIGFuZCB0aGVpciBzcGVlY2ggYW5kIGNyaWVzIHdlcmUgdW5saWtlIHRob3NlIG9mIG90aGVyIHBlb3BsZXMuIFRoZXkgY292ZXJlZCBhIGxhcmdlIHBhcnQgb2YgdGhlIHBsYWluLCBhbmQgYWZ0ZXIgcGl0Y2hpbmcgdGhlaXIgY2FtcCBjaGFsbGVuZ2VkIE1hcml1cyB0byBiYXR0bGUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCU1hcml1cywgaG93ZXZlciwgcGFpZCBubyBoZWVkIHRvIHRoZW0sIGJ1dCBrZXB0IGhpcyBzb2xkaWVycyBpbnNpZGUgdGhlaXIgZm9ydGlmaWNhdGlvbnMsIGJpdHRlcmx5IHJlYnVraW5nIHRob3NlIHdobyB3b3VsZCBoYXZlIG1hZGUgYSBkaXNwbGF5IG9mIHRoZWlyIGNvdXJhZ2UsIGFuZCBjYWxsaW5nIHRob3NlIHdob3NlIGhpZ2ggc3Bpcml0IG1hZGUgdGhlbSB3aXNoIHRvIHJ1c2ggZm9ydGggYW5kIGdpdmUgYmF0dGxlIHRyYWl0b3JzIHRvIHRoZWlyIGNvdW50cnkuIEZvciBpdCB3YXMgbm90LCBoZSBzYWlkLCB0cml1bXBocyBvciB0cm9waGllcyB0aGF0IHNob3VsZCBub3cgYmUgdGhlIG9iamVjdCBvZiB0aGVpciBhbWJpdGlvbiwgYnV0IGhvdyB0aGV5IG1pZ2h0IHdhcmQgb2ZmIHNvIGdyZWF0IGEgY2xvdWQgYW5kIHRodW5kZXItYm9sdCBvZiB3YXIgYW5kIHNlY3VyZSB0aGUgc2FmZXR5IG9mIEl0YWx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBoaXMgbGFuZ3VhZ2UgaW4gcHJpdmF0ZSB0byBoaXMgb2ZmaWNlcnMgYW5kIGVxdWFsczsgYnV0IGhlIHdvdWxkIHN0YXRpb24gaGlzIHNvbGRpZXJzIG9uIHRoZSBmb3J0aWZpY2F0aW9ucyBieSBkZXRhY2htZW50cywgYmlkZGluZyB0aGVtIHRvIG9ic2VydmUgdGhlIGVuZW15LCBhbmQgaW4gdGhpcyB3YXkgYWNjdXN0b21lZCB0aGVtIG5vdCB0byBmZWFyIHRoZWlyIHNoYXBlIG9yIGRyZWFkIHRoZWlyIGNyaWVzLCB3aGljaCB3ZXJlIGFsdG9nZXRoZXIgc3RyYW5nZSBhbmQgZmVyb2Npb3VzOyBhbmQgdG8gbWFrZSB0aGVtc2VsdmVzIGFjcXVhaW50ZWQgd2l0aCB0aGVpciBlcXVpcG1lbnQgYW5kIG1vdmVtZW50cywgdGh1cyBpbiBjb3Vyc2Ugb2YgdGltZSByZW5kZXJpbmcgd2hhdCB3YXMgb25seSBhcHBhcmVudGx5IGZvcm1pZGFibGUgZmFtaWxpYXIgdG8gdGhlaXIgbWluZHMgZnJvbSBvYnNlcnZhdGlvbi4gRm9yIGhlIGNvbnNpZGVyZWQgdGhhdCB0aGVpciBub3ZlbHR5IGZhbHNlbHkgaW1wYXJ0cyB0byB0ZXJyaWZ5aW5nIG9iamVjdHMgbWFueSBxdWFsaXRpZXMgd2hpY2ggdGhleSBkbyBub3QgcG9zc2VzcywgYnV0IHRoYXQgd2l0aCBmYW1pbGlhcml0eSBldmVuIHRob3NlIHRoaW5ncyB3aGljaCBhcmUgcmVhbGx5IGRyZWFkZnVsIGxvc2UgdGhlaXIgcG93ZXIgdG8gYWZmcmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpbiB0aGUgY2FzZSBvZiBoaXMgc29sZGllcnMsIG5vdCBvbmx5IGRpZCB0aGUgZGFpbHkgc2lnaHQgb2YgdGhlIGVuZW15IGxlc3NlbiBzb21ld2hhdCB0aGVpciBhbWF6ZW1lbnQgYXQgdGhlbSwgYnV0IGFsc28sIHdoZW4gdGhleSBoZWFyZCB0aGUgdGhyZWF0cyBhbmQgdGhlIGludG9sZXJhYmxlIGJvYXN0aW5nIG9mIHRoZSBCYXJiYXJpYW5zLCB0aGVpciBhbmdlciByb3NlIGFuZCB3YXJtZWQgYW5kIHNldCBvbiBmaXJlIHRoZWlyIHNwaXJpdHM7IGZvciB0aGUgZW5lbXkgd2VyZSByYXZhZ2luZyBhbmQgcGx1bmRlcmluZyBhbGwgdGhlIGNvdW50cnkgcm91bmQsIGFuZCBiZXNpZGVzLCBvZnRlbiBhdHRhY2tlZCB0aGUgUm9tYW4gZm9ydGlmaWNhdGlvbnMgd2l0aCBncmVhdCB0ZW1lcml0eSBhbmQgc2hhbWVsZXNzbmVzcywgc28gdGhhdCBpbmRpZ25hbnQgc3BlZWNoZXMgb2YgaGlzIHNvbGRpZXJzIHJlYWNoZWQgdGhlIGVhcnMgb2YgTWFyaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBjb3dhcmRpY2UsIHByYXksIGhhcyBNYXJpdXMgZGlzY292ZXJlZCBpbiB1cyB0aGF0IGhlIGtlZXBzIHVzIG91dCBvZiBiYXR0bGUgbGlrZSB3b21lbiB1bmRlciBsb2NrIGFuZCBrZXk/IENvbWUsIGxldCB1cyBhY3QgbGlrZSBmcmVlbWVuIGFuZCBhc2sgaGltIGlmIGhlIGlzIHdhaXRpbmcgZm9yIG90aGVyIHNvbGRpZXJzIHRvIGZpZ2h0IGluIGRlZmVuY2Ugb2YgSXRhbHksIGFuZCB3aWxsIHVzZSB1cyBhcyB3b3JrbWVuIGFsbCB0aGUgdGltZSwgd2hlbmV2ZXIgdGhlcmUgaXMgbmVlZCBvZiBkaWdnaW5nIGRpdGNoZXMgYW5kIGNsZWFyaW5nIG91dCBtdWQgYW5kIGRpdmVydGluZyBhIHJpdmVyIG9yIHR3by4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgdG8gdGhpcyBlbmQsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgaGUgZXhlcmNpc2VkIHVzIGluIHRob3NlIG1hbnkgdG9pbHMsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDEgPC9iaWJsPi4gPC9ub3RlPiBhbmQgdGhlc2UgYXJlIHRoZSBhY2hpZXZlbWVudHMgb2YgaGlzIGNvbnN1bHNoaXBzIHdoaWNoIGhlIHdpbGwgZXhoaWJpdCB0byBoaXMgZmVsbG93LWNpdGl6ZW5zIG9uIGhpcyByZXR1cm4gdG8gUm9tZS4gT3IgZG9lcyBoZSBmZWFyIHRoZSBmYXRlIG9mIENhcmJvIGFuZCBDYWVwaW8sIHdob20gdGhlIGVuZW15IGRlZmVhdGVkPyA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYXJibyBpbiAxMTMgQi5DLiwgQ2FlcGlvIGluIDEwNSBCLkMuIFNlZSB0aGUgRGljdGlvbmFyeSBvZiBQcm9wZXIgTmFtZXMuIDwvbm90ZT4gQnV0IHRoZXkgd2VyZSBmYXIgYmVoaW5kIE1hcml1cyBpbiByZXB1dGF0aW9uIGFuZCBleGNlbGxlbmNlLCBhbmQgbGVkIGFuIGFybXkgdGhhdCB3YXMgZmFyIGluZmVyaW9yIHRvIGhpcy4gU3VyZWx5IGl0IGlzIGJldHRlciB0byBkbyBzb21ldGhpbmcsIGV2ZW4gaWYgd2UgcGVyaXNoIGFzIHRoZXkgZGlkLCByYXRoZXIgdGhhbiB0byBzaXQgaGVyZSBhbmQgZW5qb3kgdGhlIHNwZWN0YWNsZSBvZiBvdXIgYWxsaWVzIGJlaW5nIHBsdW5kZXJlZC48L3E+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlNYXJpdXMgd2FzIGRlbGlnaHRlZCB0byBoZWFyIG9mIHN1Y2ggZXhwcmVzc2lvbnMsIGFuZCB0cmllZCB0byBjYWxtIHRoZSBzb2xkaWVycyBkb3duIGJ5IHRlbGxpbmcgdGhlbSB0aGF0IGhlIGRpZCBub3QgZGlzdHJ1c3QgdGhlbSwgYnV0IGluIGNvbnNlcXVlbmNlIG9mIGNlcnRhaW4gb3JhY2xlcyB3YXMgYXdhaXRpbmcgYSBmaXQgdGltZSBhbmQgcGxhY2UgZm9yIGhpcyB2aWN0b3J5LiBBbmQgaW5kZWVkIGhlIHVzZWQgdG8gY2FycnkgYWJvdXQgY2VyZW1vbmlvdXNseSBpbiBhIGxpdHRlciBhIGNlcnRhaW4gU3lyaWFuIHdvbWFuLCBuYW1lZCBNYXJ0aGEsIHdobyB3YXMgc2FpZCB0byBoYXZlIHRoZSBnaWZ0IG9mIHByb3BoZWN5LCBhbmQgaGUgd291bGQgbWFrZSBzYWNyaWZpY2VzIGF0IGhlciBiaWRkaW5nLiBTaGUgaGFkIHByZXZpb3VzbHkgYmVlbiByZWplY3RlZCBieSB0aGUgc2VuYXRlIHdoZW4gc2hlIHdpc2hlZCB0byBhcHBlYXIgYmVmb3JlIHRoZW0gd2l0aCByZWZlcmVuY2UgdG8gdGhlc2UgbWF0dGVycyBhbmQgcHJlZGljdGVkIGZ1dHVyZSBldmVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gc2hlIGdvdCBhdWRpZW5jZSBvZiB0aGUgd29tZW4gYW5kIGdhdmUgdGhlbSBwcm9vZnMgb2YgaGVyIHNraWxsLCBhbmQgcGFydGljdWxhcmx5IHRoZSB3aWZlIG9mIE1hcml1cywgYXQgd2hvc2UgZmVldCBzaGUgc2F0IHdoZW4gc29tZSBnbGFkaWF0b3JzIHdlcmUgZmlnaHRpbmcgYW5kIHN1Y2Nlc3NmdWxseSBmb3JldG9sZCB3aGljaCBvbmUgd2FzIGdvaW5nIHRvIGJlIHZpY3RvcmlvdXMuIEluIGNvbnNlcXVlbmNlIG9mIHRoaXMgc2hlIHdhcyBzZW50IHRvIE1hcml1cyBieSBoaXMgd2lmZSwgYW5kIHdhcyBhZG1pcmVkIGJ5IGhpbS4gQXMgYSBnZW5lcmFsIHRoaW5nIHNoZSB3YXMgY2FycmllZCBhbG9uZyB3aXRoIHRoZSBhcm15IGluIGEgbGl0dGVyLCBidXQgc2hlIGF0dGVuZGVkIHRoZSBzYWNyaWZpY2VzIGNsb3RoZWQgaW4gYSBkb3VibGUgcHVycGxlIHJvYmUgdGhhdCB3YXMgZmFzdGVuZWQgd2l0aCBhIGNsYXNwLCBhbmQgY2FycnlpbmcgYSBzcGVhciB0aGF0IHdhcyB3cmVhdGhlZCB3aXRoIGZpbGxldHMgYW5kIGNoYXBsZXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGEgcGVyZm9ybWFuY2UgYXMgdGhpcyBjYXVzZWQgbWFueSB0byBkb3VidCB3aGV0aGVyIE1hcml1cywgaW4gZXhoaWJpdGluZyB0aGUgd29tYW4sIHJlYWxseSBiZWxpZXZlZCBpbiBoZXIsIG9yIHdhcyBwcmV0ZW5kaW5nIHRvIGRvIHNvIGFuZCBtZXJlbHkgYWN0ZWQgYSBwYXJ0IHdpdGggaGVyLgoJCQk8L3A+CiAgICAgICAgIDxwPlRoZSBhZmZhaXIgb2YgdGhlIHZ1bHR1cmVzLCBob3dldmVyLCB3aGljaCBBbGV4YW5kZXIgb2YgTXluZHVzIHJlbGF0ZXMsIGlzIGNlcnRhaW5seSB3b25kZXJmdWwuIFR3byB2dWx0dXJlcyB3ZXJlIGFsd2F5cyBzZWVuIGhvdmVyaW5nIGFib3V0IHRoZSBhcm1pZXMgb2YgTWFyaXVzIGJlZm9yZSB0aGVpciB2aWN0b3JpZXMsIGFuZCBhY2NvbXBhbmllZCB0aGVtIG9uIHRoZWlyIGpvdXJuZXlzLCBiZWluZyByZWNvZ25pemVkIGJ5IGJyb256ZSByaW5ncyBvbiB0aGVpciBuZWNrczsgZm9yIHRoZSBzb2xkaWVycyBoYWQgY2F1Z2h0IHRoZW0sIHB1dCB0aGVzZSByaW5ncyBvbiwgYW5kIGxldCB0aGVtIGdvIGFnYWluOyBhbmQgYWZ0ZXIgdGhpcywgb24gcmVjb2duaXppbmcgdGhlIGJpcmRzLCB0aGUgc29sZGllcnMgZ3JlZXRlZCB0aGVtLCBhbmQgdGhleSB3ZXJlIGdsYWQgdG8gc2VlIHRoZW0gd2hlbiB0aGV5IHNldCBvdXQgdXBvbiBhIG1hcmNoLCBmZWVsaW5nIHN1cmUgaW4gc3VjaCBjYXNlcyB0aGF0IHRoZXkgd291bGQgYmUgc3VjY2Vzc2Z1bC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgc2lnbnMgYWxzbyBhcHBlYXJlZCwgbW9zdCBvZiB3aGljaCB3ZXJlIG9mIHRoZSBvcmRpbmFyeSBraW5kOyBidXQgZnJvbSBBbWVyaWEgYW5kIFR1ZGVyLCBjaXRpZXMgb2YgSXRhbHksIGl0IHdhcyByZXBvcnRlZCB0aGF0IGF0IG5pZ2h0IHRoZXJlIGhhZCBiZWVuIHNlZW4gaW4gdGhlIGhlYXZlbnMgZmxhbWluZyBzcGVhcnMsIGFuZCBzaGllbGRzIHdoaWNoIGF0IGZpcnN0IG1vdmVkIGluIGRpZmZlcmVudCBkaXJlY3Rpb25zLCBhbmQgdGhlbiBjbGFzaGVkIHRvZ2V0aGVyLCBhc3N1bWluZyB0aGUgZm9ybWF0aW9ucyBhbmQgbW92ZW1lbnRzIG9mIG1lbiBpbiBiYXR0bGUsIGFuZCBmaW5hbGx5IHNvbWUgb2YgdGhlbSB3b3VsZCBnaXZlIHdheSwgd2hpbGUgb3RoZXJzIHByZXNzZWQgb24gaW4gcHVyc3VpdCwgYW5kIGFsbCBzdHJlYW1lZCBhd2F5IHRvIHRoZSB3ZXN0d2FyZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGFib3V0IHRoaXMgdGltZSBCYXRhY2VzLCB0aGUgcHJpZXN0IG9mIHRoZSBHcmVhdCBNb3RoZXIsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkN5YmVsw6ksIE1vdGhlciBvZiB0aGUgR29kcy4gPC9ub3RlPiBjYW1lIGZyb20gUGVzc2ludXMgYW5ub3VuY2luZyB0aGF0IHRoZSBnb2RkZXNzIGhhZCBkZWNsYXJlZCB0byBoaW0gZnJvbSBoZXIgc2hyaW5lIHRoYXQgdGhlIFJvbWFucyB3ZXJlIHRvIGJlIHZpY3RvcmlvdXMgYW5kIHRyaXVtcGhhbnQgaW4gd2FyLiBUaGUgc2VuYXRlIGdhdmUgY3JlZGVuY2UgdG8gdGhlIHN0b3J5IGFuZCB2b3RlZCB0aGF0IGEgdGVtcGxlIHNob3VsZCBiZSBidWlsdCBmb3IgdGhlIGdvZGRlc3MgaW4gY29tbWVtb3JhdGlvbiBvZiB0aGUgdmljdG9yeTsgYnV0IHdoZW4gQmF0YWNlcyBjYW1lIGJlZm9yZSB0aGUgYXNzZW1ibHkgYW5kIGRlc2lyZWQgdG8gdGVsbCB0aGUgc3RvcnksIEF1bHVzIFBvbXBlaXVzLCBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgcHJldmVudGVkIGhpbSwgY2FsbGluZyBoaW0gYW4gaW1wb3N0b3IsIGFuZCBkcml2aW5nIGhpbSB3aXRoIGluc3VsdHMgZnJvbSB0aGUgcm9zdHJhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbG8sIHRoaXMgZGlkIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIHRvIGdhaW4gY3JlZGVuY2UgZm9yIHRoZSBtYW4ncyBzdG9yeS4gRm9yIGhhcmRseSBoYWQgQXVsdXMgZ29uZSBiYWNrIHRvIGhpcyBob3VzZSBhZnRlciB0aGUgYXNzZW1ibHkgd2FzIGRpc3NvbHZlZCwgd2hlbiBoZSBicm9rZSBvdXQgd2l0aCBzbyB2aW9sZW50IGEgZmV2ZXIgdGhhdCBoZSBkaWVkIHdpdGhpbiBhIHdlZWssIGFuZCBldmVyeWJvZHkga25ldyBhbmQgdGFsa2VkIGFib3V0IGl0LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlCdXQgdGhlIFRldXRvbmVzLCBzaW5jZSBNYXJpdXMga2VwdCBxdWlldCwgYXR0ZW1wdGVkIHRvIHRha2UgaGlzIGNhbXAgYnkgc3Rvcm07IG1hbnkgbWlzc2lsZXMsIGhvd2V2ZXIsIHdlcmUgaHVybGVkIGFnYWluc3QgdGhlbSBmcm9tIHRoZSBmb3J0aWZpY2F0aW9ucywgYW5kIHRoZXkgbG9zdCBzb21lIG9mIHRoZWlyIG1lbi4gVGhleSB0aGVyZWZvcmUgZGVjaWRlZCB0byBtYXJjaCBmb3J3YXJkLCBleHBlY3RpbmcgdG8gY3Jvc3MgdGhlIEFscHMgd2l0aG91dCBtb2xlc3RhdGlvbi4gU28gdGhleSBwYWNrZWQgdXAgdGhlaXIgYmFnZ2FnZSBhbmQgYmVnYW4gdG8gbWFyY2ggcGFzdCB0aGUgY2FtcCBvZiB0aGUgUm9tYW5zLiBUaGVuLCBpbmRlZWQsIHRoZSBpbW1lbnNpdHkgb2YgdGhlaXIgbnVtYmVycyB3YXMgbWFkZSBzcGVjaWFsbHkgZXZpZGVudCBieSB0aGUgbGVuZ3RoIG9mIHRoZWlyIGxpbmUgYW5kIHRoZSB0aW1lIHJlcXVpcmVkIGZvciB0aGVpciBwYXNzYWdlOyBmb3IgaXQgaXMgc2FpZCB0aGV5IHdlcmUgc2l4IGRheXMgaW4gcGFzc2luZyB0aGUgZm9ydGlmaWNhdGlvbnMgb2YgTWFyaXVzLCBhbHRob3VnaCB0aGV5IG1vdmVkIGNvbnRpbnVvdXNseS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZXkgbWFyY2hlZCBjbG9zZSB0byB0aGUgY2FtcCwgaW5xdWlyaW5nIHdpdGggbGF1Z2h0ZXIgd2hldGhlciB0aGUgUm9tYW5zIGhhZCBhbnkgbWVzc2FnZXMgZm9yIHRoZWlyIHdpdmVzOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciw8L3E+IHNhaWQgdGhleSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53ZSBzaGFsbCBzb29uIGJlIHdpdGggdGhlbS48L3E+IEJ1dCB3aGVuIHRoZSBCYXJiYXJpYW5zIGhhZCBwYXNzZWQgYnkgYW5kIHdlcmUgZ29pbmcgb24gdGhlaXIgd2F5LCBNYXJpdXMgYWxzbyBicm9rZSBjYW1wIGFuZCBmb2xsb3dlZCBjbG9zZSB1cG9uIHRoZW0sIGFsd2F5cyBoYWx0aW5nIG5lYXIgYnkgYW5kIGF0IHRoZWlyIHZlcnkgc2lkZSwgYnV0IHN0cm9uZ2x5IGZvcnRpZnlpbmcgaGlzIGNhbXBzIGFuZCBrZWVwaW5nIHN0cm9uZyBwb3NpdGlvbnMgaW4gaGlzIGZyb250LCBzbyB0aGF0IGhlIGNvdWxkIHBhc3MgdGhlIG5pZ2h0IGluIHNhZmV0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB0aGUgdHdvIGFybWllcyB3ZW50IG9uIHVudGlsIHRoZXkgY2FtZSB0byB0aGUgcGxhY2UgY2FsbGVkIEFxdWFlIFNleHRpYWUsIGZyb20gd2hpY2ggdGhleSBoYWQgdG8gbWFyY2ggb25seSBhIHNob3J0IGRpc3RhbmNlIGFuZCB0aGV5IHdvdWxkIGJlIGluIHRoZSBBbHBzLiBGb3IgdGhpcyByZWFzb24sIGluZGVlZCwgTWFyaXVzIG1hZGUgcHJlcGFyYXRpb25zIHRvIGdpdmUgYmF0dGxlIGhlcmUsIGFuZCBoZSBvY2N1cGllZCBmb3IgaGlzIGNhbXAgYSBwb3NpdGlvbiB0aGF0IHdhcyBzdHJvbmcsIGJ1dCBwb29ybHkgc3VwcGxpZWQgd2l0aCB3YXRlciwgd2lzaGluZywgYXMgdGhleSBzYXksIGJ5IHRoaXMgY2lyY3Vtc3RhbmNlIGFsc28gdG8gaW5jaXRlIGhpcyBzb2xkaWVycyB0byBmaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIHdoZW4gbWFueSBvZiB0aGVtIHdlcmUgZGlzc2F0aXNmaWVkIGFuZCBzYWlkIHRoZXkgd291bGQgYmUgdGhpcnN0eSB0aGVyZSwgaGUgcG9pbnRlZCB0byBhIHJpdmVyIHRoYXQgcmFuIG5lYXIgdGhlIGJhcmJhcmlhbiBmb3J0aWZpY2F0aW9ucywgYW5kIHRvbGQgdGhlbSB0aGV5IGNvdWxkIGdldCB3YXRlciB0aGVyZSwgYnV0IHRoZSBwcmljZSBvZiBpdCB3YXMgYmxvb2QuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5LCB0aGVuLDwvcT4gdGhleSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvc3QgdGhvdSBub3QgbGVhZCB1cyBhdCBvbmNlIGFnYWluc3QgdGhlIGVuZW15LCB3aGlsZSBvdXIgYmxvb2QgaXMgc3RpbGwgbW9pc3QgPzwvcT4gVG8gd2hpY2ggTWFyaXVzIGNhbG1seSByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIG11c3QgZmlyc3QgbWFrZSBvdXIgY2FtcCBzdHJvbmcuPC9xPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJSGlzIHNvbGRpZXJzLCBhY2NvcmRpbmdseSwgdGhvdWdoIHJlbHVjdGFudCwgb2JleWVkOyBidXQgdGhlIHRocm9uZyBvZiBjYW1wLXNlcnZhbnRzLCB3aG8gaGFkIG5vIHdhdGVyIGVpdGhlciBmb3IgdGhlbXNlbHZlcyBvciB0aGVpciBiZWFzdHMsIHdlbnQgZG93biBpbiBhIGJvZHkgdG8gdGhlIHJpdmVyLCBzb21lIHRha2luZyBoYXRjaGV0cywgc29tZSBheGVzLCBhbmQgc29tZSBhbHNvIHN3b3JkcyBhbmQgbGFuY2VzIGFsb25nIHdpdGggdGhlaXIgd2F0ZXItamFycywgZGV0ZXJtaW5lZCB0byBnZXQgd2F0ZXIgZXZlbiBpZiB0aGV5IGhhZCB0byBmaWdodCBmb3IgaXQuIFdpdGggdGhlc2Ugb25seSBhIGZldyBvZiB0aGUgZW5lbXkgYXQgZmlyc3QgZW5nYWdlZCwgc2luY2UgdGhlIG1haW4gYm9keSB3ZXJlIHRha2luZyB0aGVpciBtZWFsIGFmdGVyIGJhdGhpbmcsIGFuZCBzb21lIHdlcmUgc3RpbGwgYmF0aGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHN0cmVhbXMgb2Ygd2FybSB3YXRlciBidXJzdCBmcm9tIHRoZSBncm91bmQgaW4gdGhpcyBwbGFjZSwgYW5kIGF0IHRoZXNlIHRoZSBSb21hbnMgc3VycHJpc2VkIGEgbnVtYmVyIG9mIHRoZSBCYXJiYXJpYW5zLCB3aG8gd2VyZSBlbmpveWluZyB0aGVtc2VsdmVzIGFuZCBtYWtpbmcgbWVycnkgaW4gdGhpcyB3b25kZXJmdWxseSBwbGVhc2FudCBwbGFjZS4gVGhlaXIgY3JpZXMgYnJvdWdodCBtb3JlIG9mIHRoZSBCYXJiYXJpYW5zIHRvIHRoZSBzcG90LCBhbmQgTWFyaXVzIGhhZCBkaWZmaWN1bHR5IGluIGxvbmdlciByZXN0cmFpbmluZyBoaXMgc29sZGllcnMsIHNpbmNlIHRoZXkgaGFkIGZlYXJzIG5vdyBmb3IgdGhlaXIgc2VydmFudHMuIEJlc2lkZXMsIHRoZSBtb3N0IHdhcmxpa2UgZGl2aXNpb24gb2YgdGhlIGVuZW15LCBieSB3aG9tIGF0IGFuIGVhcmxpZXIgdGltZSB0aGUgUm9tYW5zIHVuZGVyIE1hbmxpdXMgYW5kIENhZXBpbyBoYWQgYmVlbiBkZWZlYXRlZCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTYuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuIDUgPC9iaWJsPi4gPC9ub3RlPiAodGhleSB3ZXJlIGNhbGxlZCBBbWJyb25lcyBhbmQgb2YgdGhlbXNlbHZlcyBudW1iZXJlZCBtb3JlIHRoYW4gdGhpcnR5IHRob3VzYW5kKSwgaGFkIHNwcnVuZyB1cCBmcm9tIHRoZWlyIG1lYWwgYW5kIHdlcmUgcnVubmluZyB0byBnZXQgdGhlaXIgYXJtcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhvdWdoIHRoZWlyIGJvZGllcyB3ZXJlIHN1cmZlaXRlZCBhbmQgd2VpZ2hlZCBkb3duIHdpdGggZm9vZCBhbmQgdGhlaXIgc3Bpcml0cyBleGNpdGVkIGFuZCBkaXNvcmRlcmVkIHdpdGggc3Ryb25nIHdpbmUsIHRoZXkgZGlkIG5vdCBydXNoIG9uIGluIGEgZGlzb3JkZXJseSBvciBmcmFudGljIGNvdXJzZSwgbm9yIHJhaXNlIGFuIGluYXJ0aWN1bGF0ZSBiYXR0bGUtY3J5LCBidXQgcmh5dGhtaWNhbGx5IGNsYXNoaW5nIHRoZWlyIGFybXMgYW5kIGxlYXBpbmcgdG8gdGhlIHNvdW5kIHRoZXkgd291bGQgZnJlcXVlbnRseSBzaG91dCBvdXQgYWxsIHRvZ2V0aGVyIHRoZWlyIHRyaWJhbCBuYW1lIEFtYnJvbmVzLCBlaXRoZXIgdG8gZW5jb3VyYWdlIG9uZSBhbm90aGVyLCBvciB0byB0ZXJyaWZ5IHRoZWlyIGVuZW1pZXMgaW4gYWR2YW5jZSBieSB0aGUgZGVjbGFyYXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBvZiB0aGUgSXRhbGlhbnMgdG8gZ28gZG93biBhZ2FpbnN0IHRoZW0gd2VyZSB0aGUgTGlndXJpYW5zLCBhbmQgd2hlbiB0aGV5IGhlYXJkIGFuZCB1bmRlcnN0b29kIHdoYXQgdGhlIEJhcmJhcmlhbnMgd2VyZSBzaG91dGluZywgdGhleSB0aGVtc2VsdmVzIHNob3V0ZWQgYmFjayB0aGUgd29yZCwgY2xhaW1pbmcgaXQgYXMgdGhlaXIgb3duIGFuY2VzdHJhbCBhcHBlbGxhdGlvbjsgZm9yIHRoZSBMaWd1cmlhbnMgY2FsbCB0aGVtc2VsdmVzIEFtYnJvbmVzIGJ5IGRlc2NlbnQuIE9mdGVuLCB0aGVuLCBkaWQgdGhlIHNob3V0IGVjaG8gYW5kIHJlZWNobyBmcm9tIGVpdGhlciBzaWRlIGJlZm9yZSB0aGV5IGNhbWUgdG8gY2xvc2UgcXVhcnRlcnM7IGFuZCBzaW5jZSB0aGUgaG9zdHMgYmFjayBvZiBlYWNoIHBhcnR5IHRvb2sgdXAgdGhlIGNyeSBieSB0dXJucyBhbmQgc3Ryb3ZlIGVhY2ggdG8gb3V0ZG8gdGhlIG90aGVyIGZpcnN0IGluIHRoZSBtYWduaXR1ZGUgb2YgdGhlaXIgc2hvdXQsIHRoZWlyIGNyaWVzIHJvdXNlZCBhbmQgZmlyZWQgdGhlIHNwaXJpdCBvZiB0aGUgY29tYmF0YW50cy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIHRoZSBBbWJyb25lcyBiZWNhbWUgc2VwYXJhdGVkIGJ5IHRoZSBzdHJlYW07IGZvciB0aGV5IGRpZCBub3QgYWxsIHN1Y2NlZWQgaW4gZ2V0dGluZyBhY3Jvc3MgYW5kIGZvcm1pbmcgYW4gYXJyYXksIGJ1dCB1cG9uIHRoZSBmb3JlbW9zdCBvZiB0aGVtIHRoZSBMaWd1cmlhbnMgYXQgb25jZSBmZWxsIHdpdGggYSBydXNoLCBhbmQgdGhlIGZpZ2h0aW5nIHdhcyBoYW5kLXRvLWhhbmQuIFRoZW4gdGhlIFJvbWFucyBjYW1lIHRvIHRoZSBhaWQgb2YgdGhlIExpZ3VyaWFucywgYW5kIGNoYXJnaW5nIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyB1cG9uIHRoZSBCYXJiYXJpYW5zIG92ZXJ3aGVsbWVkIGFuZCB0dXJuZWQgdGhlbSBiYWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3N0IG9mIHRoZSBBbWJyb25lcyB3ZXJlIGN1dCBkb3duIHRoZXJlIGluIHRoZSBzdHJlYW0gd2hlcmUgdGhleSB3ZXJlIGFsbCBjcm93ZGVkIHRvZ2V0aGVyLCBhbmQgdGhlIHJpdmVyIHdhcyBmaWxsZWQgd2l0aCB0aGVpciBibG9vZCBhbmQgdGhlaXIgZGVhZCBib2RpZXM7IHRoZSByZXN0LCBhZnRlciB0aGUgUm9tYW5zIGhhZCBjcm9zc2VkLCBkaWQgbm90IGRhcmUgdG8gZmFjZSBhYm91dCwgYW5kIHRoZSBSb21hbnMga2VwdCBzbGF5aW5nIHRoZW0gdW50aWwgdGhleSBjYW1lIGluIHRoZWlyIGZsaWdodCB0byB0aGVpciBjYW1wIGFuZCB3YWdnb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHRoZSB3b21lbiBtZXQgdGhlbSwgc3dvcmRzIGFuZCBheGVzIGluIHRoZWlyIGhhbmRzLCBhbmQgd2l0aCBoaWRlb3VzIHNocmlla3Mgb2YgcmFnZSB0cmllZCB0byBkcml2ZSBiYWNrIGZ1Z2l0aXZlcyBhbmQgcHVyc3VlcnMgYWxpa2UsIHRoZSBmdWdpdGl2ZXMgYXMgdHJhaXRvcnMsIGFuZCB0aGUgcHVyc3VlcnMgYXMgZm9lczsgdGhleSBtaXhlZCB0aGVtc2VsdmVzIHVwIHdpdGggdGhlIGNvbWJhdGFudHMsIHdpdGggYmFyZSBoYW5kcyB0b3JlIGF3YXkgdGhlIHNoaWVsZHMgb2YgdGhlIFJvbWFucyBvciBncmFzcGVkIHRoZWlyIHN3b3JkcywgYW5kIGVuZHVyZWQgd291bmRzIGFuZCBtdXRpbGF0aW9ucywgdGhlaXIgZmllcmNlIHNwaXJpdHMgdW52YW5xdWlzaGVkIHRvIHRoZSBlbmQuIFNvLCB0aGVuLCBhcyB3ZSBhcmUgdG9sZCwgdGhlIGJhdHRsZSBhdCB0aGUgcml2ZXIgd2FzIGJyb3VnaHQgb24gYnkgYWNjaWRlbnQgcmF0aGVyIHRoYW4gYnkgdGhlIGludGVudGlvbiBvZiB0aGUgY29tbWFuZGVyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgZGVzdHJveWluZyBtYW55IG9mIHRoZSBBbWJyb25lcyB0aGUgUm9tYW5zIHdpdGhkcmV3IGFuZCBuaWdodCBjYW1lIG9uOyBidXQgaW4gc3BpdGUgb2Ygc28gZ3JlYXQgYSBzdWNjZXNzIHRoZSBhcm15IGRpZCBub3QgaW5kdWxnZSBpbiBwYWVhbnMgb2YgdmljdG9yeSwgb3IgZHJpbmtpbmcgaW4gdGhlIHRlbnRzLCBvciBmcmllbmRseSBjb252ZXJzZSBvdmVyIHN1cHBlcnMsIG9yIHRoYXQgc3dlZXRlc3Qgb2YgYWxsIGRlbGlnaHRzIGZvciBtZW4gd2hvIGhhdmUgZm91Z2h0IGFuZCB3b24gYSBiYXR0bGUsIGdlbnRsZSBzbGVlcCwgYnV0IHRoYXQgbmlnaHQgbW9yZSB0aGFuIGFueSBvdGhlciB3YXMgc3BlbnQgaW4gZmVhcnMgYW5kIGNvbW1vdGlvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVpciBjYW1wIHdhcyBzdGlsbCB3aXRob3V0IHBhbGlzYWRlIG9yIHdhbGwsIGFuZCB0aGVyZSB3ZXJlIHN0aWxsIGxlZnQgbWFueSBteXJpYWRzIG9mIHRoZSBCYXJiYXJpYW5zIHdobyBoYWQgbWV0IHdpdGggbm8gZGVmZWF0LiBUaGVzZSBoYWQgYmVlbiBqb2luZWQgYnkgYWxsIHRoZSBBbWJyb25lcyB3aG8gc3Vydml2ZWQgdGhlIGJhdHRsZSwgYW5kIHRoZXJlIHdhcyBsYW1lbnRhdGlvbiBhbW9uZyB0aGVtIGFsbCBuaWdodCBsb25nLCBub3QgbGlrZSB0aGUgd2FpbGluZ3MgYW5kIGdyb2FucyBvZiBtZW4sIGJ1dCBob3dsaW5ncyBhbmQgYmVsbG93aW5ncyB3aXRoIGEgc3RyYWluIG9mIHRoZSB3aWxkIGJlYXN0IGluIHRoZW0sIG1pbmdsZWQgd2l0aCB0aHJlYXRzIGFuZCBjcmllcyBvZiBncmllZiwgd2VudCB1cCBmcm9tIHRoaXMgdmFzdCBtdWx0aXR1ZGUgYW5kIGVjaG9lZCBhbW9uZyB0aGUgc3Vycm91bmRpbmcgaGlsbHMgYW5kIG92ZXIgdGhlIHJpdmVyIHZhbGxleS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdob2xlIHBsYWluIHdhcyBmaWxsZWQgd2l0aCBhbiBhd2Z1bCBkaW4sIHRoZSBSb21hbnMgd2l0aCBmZWFyLCBhbmQgZXZlbiBNYXJpdXMgaGltc2VsZiB3aXRoIGNvbnN0ZXJuYXRpb24gYXMgaGUgYXdhaXRlZCBzb21lIGRpc29yZGVybHkgYW5kIGNvbmZ1c2VkIG5pZ2h0LWJhdHRsZS4gSG93ZXZlciwgdGhlIEJhcmJhcmlhbnMgbWFkZSBubyBhdHRhY2sgZWl0aGVyIGR1cmluZyB0aGF0IG5pZ2h0IG9yIHRoZSBmb2xsb3dpbmcgZGF5LCBidXQgc3BlbnQgdGhlIHRpbWUgaW4gbWFyc2hhbGxpbmcgdGhlaXIgZm9yY2VzIGFuZCBtYWtpbmcgcHJlcGFyYXRpb25zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBzaW5jZSB0aGUgcG9zaXRpb24gb2YgdGhlIEJhcmJhcmlhbnMgd2FzIGNvbW1hbmRlZCBieSBzbG9waW5nIGdsZW5zIGFuZCByYXZpbmVzIHRoYXQgd2VyZSBzaGFkZWQgYnkgdHJlZXMsIE1hcml1cyBzZW50IENsYXVkaXVzIE1hcmNlbGx1cyB0aGl0aGVyIHdpdGggdGhyZWUgdGhvdXNhbmQgbWVuLWF0LWFybXMsIHVuZGVyIG9yZGVycyB0byBsaWUgY29uY2VhbGVkIGluIGFtYnVzaCB1bnRpbCB0aGUgYmF0dGxlIHdhcyBvbiwgYW5kIHRoZW4gdG8gc2hvdyB0aGVtc2VsdmVzIGluIHRoZSBlbmVteSdzIHJlYXIuIFRoZSByZXN0IG9mIGhpcyBzb2xkaWVycywgd2hvIGhhZCB0YWtlbiBzdXBwZXIgaW4gZ29vZCBzZWFzb24gYW5kIHRoZW4gZ290IGEgbmlnaHQncyBzbGVlcCwgaGUgbGVkIG91dCBhdCBkYXktYnJlYWsgYW5kIGRyZXcgdXAgaW4gZnJvbnQgb2YgdGhlIGNhbXAsIGFuZCBzZW50IG91dCBoaXMgY2F2YWxyeSBpbnRvIHRoZSBwbGFpbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFRldXRvbmVzLCBzZWVpbmcgdGhpcywgY291bGQgbm90IHdhaXQgZm9yIHRoZSBSb21hbnMgdG8gY29tZSBkb3duIGFuZCBmaWdodCB3aXRoIHRoZW0gb24gZXF1YWwgdGVybXMsIGJ1dCBxdWlja2x5IGFuZCB3cmF0aGZ1bGx5IGFybWVkIHRoZW1zZWx2ZXMgYW5kIGNoYXJnZWQgdXAgdGhlIGhpbGwuIEJ1dCBNYXJpdXMsIHNlbmRpbmcgaGlzIG9mZmljZXJzIHRvIGFsbCBwYXJ0cyBvZiB0aGUgbGluZSwgZXhob3J0ZWQgdGhlIHNvbGRpZXJzIHRvIHN0YW5kIGZpcm1seSBpbiB0aGVpciBsaW5lcywgYW5kIHdoZW4gdGhlIGVuZW15IGhhZCBnb3Qgd2l0aGluIHJlYWNoIHRvIGh1cmwgdGhlaXIgamF2ZWxpbnMsIHRoZW4gdGFrZSB0byB0aGVpciBzd29yZHMgYW5kIGNyb3dkIHRoZSBCYXJiYXJpYW5zIGJhY2sgd2l0aCB0aGVpciBzaGllbGRzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5mb3Igc2luY2UgdGhlIGVuZW15IHdlcmUgb24gcHJlY2FyaW91cyBncm91bmQgdGhlaXIgYmxvd3Mgd291bGQgaGF2ZSBubyBmb3JjZSBhbmQgdGhlIGxvY2tpbmcgb2YgdGhlaXIgc2hpZWxkcyBubyBzdHJlbmd0aCwgYnV0IHRoZSB1bmV2ZW5uZXNzIG9mIHRoZSBncm91bmQgd291bGQga2VlcCB0aGVtIHR1cm5pbmcgYW5kIHRvc3NpbmcgYWJvdXQuIFRoaXMgd2FzIHRoZSBhZHZpY2UgaGUgZ2F2ZSBoaXMgbWVuLCBhbmQgdGhleSBzYXcgdGhhdCBoZSB3YXMgZmlyc3QgdG8gYWN0IGFjY29yZGluZ2x5OyBmb3IgaGUgd2FzIGluIGJldHRlciB0cmFpbmluZyB0aGFuIGFueSBvZiB0aGVtLCBhbmQgaW4gZGFyaW5nIGZhciBzdXJwYXNzZWQgdGhlbSBhbGwuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIFJvbWFucyBhd2FpdGVkIHRoZSBlbmVteSdzIG9uc2V0LCB0aGVuIGNsb3NlZCB3aXRoIHRoZW0gYW5kIGNoZWNrZWQgdGhlaXIgdXB3YXJkIHJ1c2gsIGFuZCBhdCBsYXN0LCBjcm93ZGluZyB0aGVtIGJhY2sgbGl0dGxlIGJ5IGxpdHRsZSwgZm9yY2VkIHRoZW0gaW50byB0aGUgcGxhaW4uIEhlcmUsIHdoaWxlIHRoZSBCYXJiYXJpYW5zIGluIGZyb250IHdlcmUgYXQgbGFzdCBmb3JtaW5nIGluIGxpbmUgb24gbGV2ZWwgZ3JvdW5kLCB0aGVyZSB3YXMgc2hvdXRpbmcgYW5kIGNvbW1vdGlvbiBpbiB0aGVpciByZWFyLiBGb3IgTWFyY2VsbHVzIGhhZCB3YXRjaGVkIGhpcyBvcHBvcnR1bml0eSwgYW5kIHdoZW4gdGhlIGNyaWVzIG9mIGJhdHRsZSB3ZXJlIGJvcm5lIHVwIG92ZXIgdGhlIGhpbGxzIGhlIHB1dCBoaXMgbWVuIHVwb24gdGhlIHJ1biBhbmQgZmVsbCB3aXRoIGxvdWQgc2hvdXRzIHVwb24gdGhlIGVuZW15J3MgcmVhciwgd2hlcmUgaGUgY3V0IGRvd24gdGhlIGhpbmRtb3N0IG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIGluIHRoZSByZWFyIGZvcmNlZCBhbG9uZyB0aG9zZSB3aG8gd2VyZSBpbiBmcm9udCBvZiB0aGVtLCBhbmQgcXVpY2tseSBwbHVuZ2VkIHRoZSB3aG9sZSBhcm15IGludG8gY29uZnVzaW9uLCBhbmQgdW5kZXIgdGhpcyBkb3VibGUgYXR0YWNrIHRoZXkgY291bGQgcmlvdCBob2xkIG91dCBsb25nLCBidXQgYnJva2UgcmFua3MgYW5kIGZsZWQuIFRoZSBSb21hbnMgcHVyc3VlZCB0aGVtIGFuZCBlaXRoZXIgc2xldyBvciB0b29rIGFsaXZlIG92ZXIgYSBodW5kcmVkIHRob3VzYW5kIG9mIHRoZW0sIGJlc2lkZXMgbWFraW5nIHRoZW1zZWx2ZXMgbWFzdGVycyBvZiB0aGVpciB0ZW50cywgd2FnZ29ucywgYW5kIHByb3BlcnR5LCBhbGwgb2Ygd2hpY2gsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB3aGF0IHdhcyBwaWxmZXJlZCwgd2FzIGdpdmVuIHRvIE1hcml1cyBieSB2b3RlIG9mIHRoZSBzb2xkaWVycy4gQW5kIHRob3VnaCB0aGUgZ2lmdCB0aGF0IGhlIHJlY2VpdmVkIHdhcyBzbyBzcGxlbmRpZCwgaXQgd2FzIHRob3VnaHQgdG8gYmUgd2hvbGx5IHVud29ydGh5IG9mIGhpcyBzZXJ2aWNlcyBpbiB0aGUgY2FtcGFpZ24sIHdoZXJlIHRoZSBkYW5nZXIgdGhhdCB0aHJlYXRlbmVkIGhhZCBiZWVuIHNvIGdyZWF0LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgYXJlIHNvbWUgd3JpdGVycywgaG93ZXZlciwgd2hvIGdpdmUgYSBkaWZmZXJlbnQgYWNjb3VudCBvZiB0aGUgZGl2aXNpb24gb2YgdGhlIHNwb2lscywgYW5kIGFsc28gb2YgdGhlIG51bWJlciBvZiB0aGUgc2xhaW4uIE5ldmVydGhlbGVzcywgaXQgaXMgc2FpZCB0aGF0IHRoZSBwZW9wbGUgb2YgTWFzc2FsaWEgZmVuY2VkIHRoZWlyIHZpbmV5YXJkcyByb3VuZCB3aXRoIHRoZSBib25lcyBvZiB0aGUgZmFsbGVuLCBhbmQgdGhhdCB0aGUgc29pbCwgYWZ0ZXIgdGhlIGJvZGllcyBoYWQgd2FzdGVkIGF3YXkgaW4gaXQgYW5kIHRoZSByYWlucyBoYWQgZmFsbGVuIGFsbCB3aW50ZXIgdXBvbiBpdCwgZ3JldyBzbyByaWNoIGFuZCBiZWNhbWUgc28gZnVsbCB0byBpdHMgZGVwdGhzIG9mIHRoZSBwdXRyZWZpZWQgbWF0dGVyIHRoYXQgc2FuayBpbnRvIGl0LCB0aGF0IGl0IHByb2R1Y2VkIGFuIGV4Y2VlZGluZyBncmVhdCBoYXJ2ZXN0IGluIGFmdGVyIHllYXJzLCBhbmQgY29uZmlybWVkIHRoZSBzYXlpbmcgb2YgQXJjaGlsb2NodXMgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QmVyZ2ssIDx0aXRsZT5Qb2V0LiBMeXIuIEdyYWVjaSA8L3RpdGxlPiwgaWkuIDQgcHAuIDQyOCBmLiA8L25vdGU+IHRoYXQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5maWVsZHMgYXJlIGZhdHRlbmVkPC9xPiBieSBzdWNoIGEgcHJvY2Vzcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHNhaWQgdGhhdCBleHRyYW9yZGluYXJ5IHJhaW5zIGdlbmVyYWxseSBkYXNoIGRvd24gYWZ0ZXIgZ3JlYXQgYmF0dGxlcywgd2hldGhlciBpdCBpcyB0aGF0IHNvbWUgZGl2aW5lIHBvd2VyIGRyZW5jaGVzIGFuZCBoYWxsb3dzIHRoZSBncm91bmQgd2l0aCBwdXJpZnlpbmcgd2F0ZXJzIGZyb20gSGVhdmVuLCBvciB0aGF0IHRoZSBibG9vZCBhbmQgcHV0cmVmeWluZyBtYXR0ZXIgc2VuZCB1cCBhIG1vaXN0IGFuZCBoZWF2eSB2YXBvdXIgd2hpY2ggY29uZGVuc2VzIHRoZSBhaXIsIHRoaXMgYmVpbmcgZWFzaWx5IG1vdmVkIGFuZCByZWFkaWx5IGNoYW5nZWQgdG8gdGhlIGhpZ2hlc3QgZGVncmVlIGJ5IHRoZSBzbGlnaHRlc3QgY2F1c2UuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlLCBNYXJpdXMgY29sbGVjdGVkIHN1Y2ggb2YgdGhlIGFybXMgYW5kIHNwb2lscyBvZiB0aGUgQmFyYmFyaWFucyBhcyB3ZXJlIGhhbmRzb21lLCBlbnRpcmUsIGFuZCBmaXR0ZWQgdG8gbWFrZSBhIHNob3cgaW4gaGlzIHRyaXVtcGhhbCBwcm9jZXNzaW9uOyBhbGwgdGhlIHJlc3QgaGUgaGVhcGVkIHVwIG9uIGEgaHVnZSBweXJlIGFuZCBzZXQgb24gZm9vdCBhIG1hZ25pZmljZW50IHNhY3JpZmljZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNvbGRpZXJzIGhhZCB0YWtlbiB0aGVpciBzdGFuZCBhYm91dCB0aGUgcHlyZSBpbiBhcm1zLCB3aXRoIGNoYXBsZXRzIG9uIHRoZWlyIGhlYWRzLCBhbmQgTWFyaXVzIGhpbXNlbGYsIGhhdmluZyBwdXQgb24gaGlzIHB1cnBsZS1ib3JkZXJlZCByb2JlIGFuZCBnaXJ0IGl0IGFib3V0IGhpbSwgYXMgdGhlIGN1c3RvbSB3YXMsIGhhZCB0YWtlbiBhIGxpZ2h0ZWQgdG9yY2gsIGhlbGQgaXQgdXAgdG93YXJkcyBoZWF2ZW4gd2l0aCBib3RoIGhhbmRzLCBhbmQgd2FzIGp1c3QgYWJvdXQgdG8gc2V0IGZpcmUgdG8gdGhlIHB5cmUsIHdoZW4gc29tZSBmcmllbmRzIHdlcmUgc2VlbiByaWRpbmcgc3dpZnRseSB0b3dhcmRzIGhpbSwgYW5kIHRoZXJlIHdhcyBkZWVwIHNpbGVuY2UgYW5kIGV4cGVjdGFuY3kgb24gdGhlIHBhcnQgb2YgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgaG9yc2VtZW4gd2VyZSBuZWFyLCB0aGV5IGxlYXBlZCB0byB0aGUgZ3JvdW5kIGFuZCBncmVldGVkIE1hcml1cywgYnJpbmdpbmcgaGltIHRoZSBnbGFkIG5ld3MgdGhhdCBoZSBoYWQgYmVlbiBlbGVjdGVkIGNvbnN1bCBmb3IgdGhlIGZpZnRoIHRpbWUsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciAxMDEgQi5DLiA8L25vdGU+IGFuZCBnaXZpbmcgaGltIGxldHRlcnMgdG8gdGhhdCBlZmZlY3QuIFRoaXMgZ3JlYXQgY2F1c2UgZm9yIHJlam9pY2luZyBoYXZpbmcgYmVlbiBhZGRlZCB0byB0aGUgY2VsZWJyYXRpb24gb2YgdGhlaXIgdmljdG9yeSwgdGhlIHNvbGRpZXJzLCB0cmFuc3BvcnRlZCB3aXRoIGRlbGlnaHQsIHNlbnQgZm9ydGggYSB1bml2ZXJzYWwgc2hvdXQsIGFjY29tcGFuaWVkIGJ5IHRoZSBjbGFzaCBhbmQgY2xhdHRlciBvZiB0aGVpciBhcm1zLCBhbmQgYWZ0ZXIgaGlzIG9mZmljZXJzIGhhZCBjcm93bmVkIE1hcml1cyBhZnJlc2ggd2l0aCB3cmVhdGhzIG9mIGJheSwgaGUgc2V0IGZpcmUgdG8gdGhlIHB5cmUgYW5kIGNvbXBsZXRlZCB0aGUgc2FjcmlmaWNlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhhdCBwb3dlciB3aGljaCBwZXJtaXRzIG5vIGdyZWF0IHN1Y2Nlc3NlcyB0byBicmluZyBhIHB1cmUgYW5kIHVubWl4ZWQgZW5qb3ltZW50LCBidXQgZGl2ZXJzaWZpZXMgaHVtYW4gbGlmZSB3aXRoIGEgYmxlbmRpbmcgb2YgZXZpbCBhbmQgb2YgZ29vZC1iZSBpdCBGb3J0dW5lLCBvciBOZW1lc2lzLCBvciBJbmV2aXRhYmxlIE5lY2Vzc2l0eSwgd2l0aGluIGEgZmV3IGRheXMgYnJvdWdodCB0byBNYXJpdXMgdGlkaW5ncyBvZiBoaXMgY29sbGVhZ3VlIENhdHVsdXMsIHdoaWNoLCBsaWtlIGEgY2xvdWQgaW4gYSBjYWxtIGFuZCBzZXJlbmUgc2t5LCBpbnZvbHZlZCBSb21lIGluIGFub3RoZXIgdGVtcGVzdCBvZiBmZWFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQ2F0dWx1cywgd2hvIHdhcyBmYWNpbmcgdGhlIENpbWJyaSwgZ2F2ZSB1cCB0cnlpbmcgdG8gZ3VhcmQgdGhlIHBhc3NlcyBvZiB0aGUgQWxwcywgbGVzdCBoZSBzaG91bGQgYmUgd2Vha2VuZWQgYnkgdGhlIG5lY2Vzc2l0eSBvZiBkaXZpZGluZyBoaXMgZm9yY2VzIGludG8gbWFueSBwYXJ0cywgYW5kIGF0IG9uY2UgZGVzY2VuZGVkIGludG8gdGhlIHBsYWlucyBvZiBJdGFseS4gSGVyZSBoZSBwdXQgdGhlIHJpdmVyIEF0aXNvIGJldHdlZW4gaGltc2VsZiBhbmQgdGhlIGVuZW15LCBidWlsdCBzdHJvbmcgZm9ydGlmaWNhdGlvbnMgb24gYm90aCBiYW5rcyBvZiBpdCB0byBwcmV2ZW50IHRoZWlyIGNyb3NzaW5nLCBhbmQgdGhyZXcgYSBicmlkZ2UgYWNyb3NzIHRoZSBzdHJlYW0sIHRoYXQgaGUgbWlnaHQgYmUgYWJsZSB0byBnbyB0byB0aGUgaGVscCBvZiB0aGUgcGVvcGxlIG9uIHRoZSBvdGhlciBzaWRlIGluIGNhc2UgdGhlIEJhcmJhcmlhbnMgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCB0aGUgcGFzc2VzIGFuZCBhdHRhY2tlZCB0aGUgZm9ydHJlc3Nlcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXNlIEJhcmJhcmlhbnMgd2VyZSBzbyBjb250ZW1wdHVvdXMgYW5kIGJvbGQgaW4gZm9sbG93aW5nIHRoZWlyIGVuZW1pZXMgdGhhdCwgbW9yZSBieSB3YXkgb2YgZGlzcGxheWluZyB0aGVpciBzdHJlbmd0aCBhbmQgZGFyaW5nIHRoYW4gYmVjYXVzZSBpdCB3YXMgbmVjZXNzYXJ5IGF0IGFsbCwgdGhleSBlbmR1cmVkIHRoZSBzbm93LXN0b3JtcyB3aXRob3V0IGFueSBjbG90aGluZywgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCBpY2UgYW5kIGRlZXAgc25vdyB0byB0aGUgc3VtbWl0cywgYW5kIGZyb20gdGhlcmUsIHB1dHRpbmcgdGhlaXIgYnJvYWQgc2hpZWxkcyB1bmRlciB0aGVtIGFuZCB0aGVuIGxldHRpbmcgdGhlbXNlbHZlcyBnbywgc2xpZCBkb3duIHRoZSBzbW9vdGggYW5kIGRlZXBseSBmaXNzdXJlZCBjbGlmZnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXkgaGFkIGVuY2FtcGVkIG5lYXIgdGhlIHN0cmVhbSBhbmQgZXhhbWluZWQgdGhlIHBhc3NhZ2UsIHRoZXkgYmVnYW4gdG8gZGFtIGl0IHVwLCB0ZWFyaW5nIGF3YXkgdGhlIG5laWdoYm91cmluZyBoaWxscywgbGlrZSB0aGUgZ2lhbnRzIG9mIG9sZCwgY2FycnlpbmcgaW50byB0aGUgcml2ZXIgd2hvbGUgdHJlZXMgd2l0aCB0aGVpciByb290cywgZnJhZ21lbnRzIG9mIGNsaWZmcywgYW5kIG1vdW5kcyBvZiBlYXJ0aCwgYW5kIGNyb3dkaW5nIHRoZSBjdXJyZW50IG91dCBvZiBpdHMgY291cnNlOyB0aGV5IGFsc28gc2VudCB3aGlybGluZyBkb3duIHRoZSBzdHJlYW0gYWdhaW5zdCB0aGUgcGlsZXMgb2YgdGhlIGJyaWRnZSBoZWF2eSBtYXNzZXMgd2hpY2ggbWFkZSB0aGUgYnJpZGdlIHF1aXZlciB3aXRoIHRoZWlyIGJsb3dzLCB1bnRpbCBhdCBsYXN0IHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIFJvbWFuIHNvbGRpZXJzIHBsYXllZCB0aGUgY293YXJkLCBhYmFuZG9uZWQgdGhlaXIgbWFpbiBjYW1wLCBhbmQgYmVnYW4gdG8gcmV0cmVhdC4KCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFuZCBub3cgQ2F0dWx1cywgbGlrZSBhIGNvbnN1bW1hdGVseSBnb29kIGNvbW1hbmRlciwgc2hvd2VkIHRoYXQgaGUgaGFkIGxlc3MgcmVnYXJkIGZvciBoaXMgb3duIHJlcHV0YXRpb24gdGhhbiBmb3IgdGhhdCBvZiBoaXMgY291bnRyeW1lbi4gRm9yIGZpbmRpbmcgdGhhdCBoZSBjb3VsZCBub3QgcGVyc3VhZGUgaGlzIHNvbGRpZXJzIHRvIHJlbWFpbiwgYW5kIHNlZWluZyB0aGF0IHRoZXkgd2VyZSBtYWtpbmcgb2ZmIGluIHRlcnJvciwgaGUgb3JkZXJlZCBoaXMgc3RhbmRhcmQgdG8gYmUgdGFrZW4gdXAsIHJhbiB0byB0aGUgZm9yZW1vc3Qgb2YgdGhlIHJldGlyaW5nIHRyb29wcywgYW5kIHB1dCBoaW1zZWxmIGF0IHRoZWlyIGhlYWQsIHdpc2hpbmcgdGhhdCB0aGUgZGlzZ3JhY2Ugc2hvdWxkIGF0dGFjaCB0byBoaW1zZWxmIGFuZCBub3QgdG8gaGlzIGNvdW50cnksIGFuZCB0aGF0IGhpcyBzb2xkaWVycywgaW4gbWFraW5nIHRoZWlyIHJldHJlYXQsIHNob3VsZCBub3QgYXBwZWFyIHRvIGJlIHJ1bm5pbmcgYXdheSwgYnV0IGZvbGxvd2luZyB0aGVpciBnZW5lcmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQmFyYmFyaWFucyBhdHRhY2tlZCBhbmQgY2FwdHVyZWQgdGhlIGZvcnRyZXNzIG9uIHRoZSBmdXJ0aGVyIHNpZGUgb2YgdGhlIEF0aXNvLCBhbmQgdGhleSBzbyBtdWNoIGFkbWlyZWQgdGhlIFJvbWFucyB0aGVyZSwgd2hvIHNob3dlZCB0aGVtc2VsdmVzIGJyYXZlc3Qgb2YgbWVuIGFuZCBmb3VnaHQgd29ydGhpbHkgb2YgdGhlaXIgY291bnRyeSwgdGhhdCB0aGV5IGxldCB0aGVtIGdvIG9uIHBhcm9sZSwgbWFraW5nIHRoZW0gdGFrZSBvYXRoIHVwb24gdGhlIGJyb256ZSBidWxsLiBUaGlzIHdhcyBzdWJzZXF1ZW50bHkgY2FwdHVyZWQsIGFmdGVyIHRoZSBiYXR0bGUsIGFuZCB3YXMgY2FycmllZCwgd2UgYXJlIHRvbGQsIHRvIHRoZSBob3VzZSBvZiBDYXR1bHVzIGFzIHRoZSBjaGllZiBwcml6ZSBvZiB0aGUgdmljdG9yeS4gQnV0IHRoZSBjb3VudHJ5IHdhcyBub3cgZGVzdGl0dXRlIG9mIGRlZmVuZGVycywgYW5kIHRoZSBCYXJiYXJpYW5zIGludW5kYXRlZCBhbmQgcmF2YWdlZCBpdC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIHZpZXcgb2YgdGhlc2UgdGhpbmdzIE1hcml1cyB3YXMgc3VtbW9uZWQgdG8gUm9tZS4gV2hlbiBoZSBoYWQgYXJyaXZlZCB0aGVyZSwgaXQgd2FzIHRoZSBnZW5lcmFsIGV4cGVjdGF0aW9uIHRoYXQgaGUgd291bGQgY2VsZWJyYXRlIHRoZSB0cml1bXBoIHdoaWNoIHRoZSBzZW5hdGUgaGFkIHJlYWRpbHkgdm90ZWQgaGltLiBCdXQgaGUgcmVmdXNlZCB0byBkbyBzbywgZWl0aGVyIGJlY2F1c2UgaGUgZGlkIG5vdCB3aXNoIHRvIGRlcHJpdmUgaGlzIHNvbGRpZXJzIGFuZCBjb21yYWRlcy1pbi1hcm1zIG9mIHRoZWlyIGR1ZSBob25vdXJzLCBvciBiZWNhdXNlIGhlIHdvdWxkIGVuY291cmFnZSB0aGUgbXVsdGl0dWRlIGluIHZpZXcgb2YgdGhlIHByZXNlbnQgY3Jpc2lzIGJ5IGVudHJ1c3RpbmcgdGhlIGdsb3J5IG9mIGhpcyBmaXJzdCBzdWNjZXNzIHRvIHRoZSBmb3J0dW5lIG9mIHRoZSBzdGF0ZSwgaW4gdGhlIGhvcGUgdGhhdCBpdCB3b3VsZCBiZSByZXR1cm5lZCB0byBoaW0gZW5oYW5jZWQgYnkgYSBzZWNvbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBzYWlkIHdoYXQgd2FzIHN1aXRhYmxlIHRvIHRoZSBvY2Nhc2lvbiwgaGUgc2V0IG91dCB0byBqb2luIENhdHVsdXMsIHdob20gaGUgdHJpZWQgdG8gZW5jb3VyYWdlLCB3aGlsZSBhdCB0aGUgc2FtZSB0aW1lIGhlIHN1bW1vbmVkIGhpcyBvd24gc29sZGllcnMgZnJvbSBHYXVsLiBXaGVuIHRoZXNlIGhhZCBjb21lLCBoZSBjcm9zc2VkIHRoZSBQbyBhbmQgdHJpZWQgdG8ga2VlcCB0aGUgQmFyYmFyaWFucyBvdXQgb2YgdGhlIHBhcnQgb2YgSXRhbHkgbHlpbmcgdGhpcyBzaWRlIG9mIHRoZSByaXZlci4gQnV0IHRoZSBCYXJiYXJpYW5zIGRlY2xpbmVkIGJhdHRsZSwgYWxsZWdpbmcgdGhhdCB0aGV5IHdlcmUgd2FpdGluZyBmb3IgdGhlaXIgYnJldGhyZW4gdGhlIFRldXRvbmVzIGFuZCB3b25kZXJlZCB3aHkgdGhleSB3ZXJlIHNvIGxvbmcgaW4gY29taW5nOyB0aGlzIHdhcyBlaXRoZXIgYmVjYXVzZSB0aGV5IHdlcmUgcmVhbGx5IGlnbm9yYW50IG9mIHRoZWlyIGRlc3RydWN0aW9uLCBvciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRvIGhhdmUgdGhlIGFwcGVhcmFuY2Ugb2YgZGlzYmVsaWV2aW5nIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSB0ZXJyaWJseSBtaXNoYW5kbGVkIHRob3NlIHdobyBicm91Z2h0IHRpZGluZ3Mgb2YgaXQsIGFuZCBzZW50IHRvIE1hcml1cyBkZW1hbmRpbmcgdGVycml0b3J5IGZvciB0aGVtc2VsdmVzIGFuZCB0aGVpciBicmV0aHJlbiBhbmQgZW5vdWdoIGNpdGllcyBmb3IgdGhlbSB0byBkd2VsbCBpbi4gV2hlbiBNYXJpdXMgYXNrZWQgdGhlaXIgYW1iYXNzYWRvcnMgd2hvbSB0aGV5IG1lYW50IGJ5IHRoZWlyIGJyZXRocmVuLCB0aGV5IHNhaWQgdGhleSBtZWFudCB0aGUgVGV1dG9uZXMuIEF0IHRoaXMsIGFsbCB0aGUgb3RoZXIgUm9tYW5zIHdobyBoZWFyZCB0aGVtIGJ1cnN0IG91dCBsYXVnaGluZywgYW5kIE1hcml1cyBzY29mZmluZ2x5IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlbiBkb24ndCB0cm91YmxlIHlvdXJzZWx2ZXMgYWJvdXQgeW91ciBicmV0aHJlbiwgZm9yIHRoZXkgaGF2ZSBsYW5kLCBhbmQgdGhleSB3aWxsIGhhdmUgaXQgZm9yZXZlcuKAlGxhbmQgd2hpY2ggd2UgaGF2ZSBnaXZlbiB0aGVtLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYW1iYXNzYWRvcnMgdW5kZXJzdG9vZCBoaXMgc2FyY2FzbSBhbmQgZmVsbCB0byBhYnVzaW5nIGhpbSwgZGVjbGFyaW5nIHRoYXQgaGUgc2hvdWxkIGJlIHB1bmlzaGVkIGZvciBpdCwgYnkgdGhlIENpbWJyaSBhdCBvbmNlLCBhbmQgYnkgdGhlIFRldXRvbmVzIHdoZW4gdGhleSBjYW1lLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlZlcmlseSw8L3E+IHNhaWQgTWFyaXVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZXkgYXJlIGhlcmUsIGFuZCBpdCB3aWxsIG5vdCBiZSByaWdodCBmb3IgeW91IHRvIGdvIGF3YXkgYmVmb3JlIHlvdSBoYXZlIGVtYnJhY2VkIHlvdXIgYnJldGhyZW4uPC9xPiBTYXlpbmcgdGhpcywgaGUgb3JkZXJlZCB0aGUga2luZ3Mgb2YgdGhlIFRldXRvbmVzIHRvIGJlIHByb2R1Y2VkIGluIGZldHRlcnM7IGZvciB0aGV5IGhhZCBiZWVuIGNhcHR1cmVkIGFtb25nIHRoZSBBbHBzLCB3aGVyZSB0aGV5IHdlcmUgZnVnaXRpdmVzLCBieSB0aGUgU2VxdWFuaS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlc2UgdGhpbmdzIGhhZCBiZWVuIHJlcG9ydGVkIHRvIHRoZSBDaW1icmksIHRoZXkgb25jZSBtb3JlIGFkdmFuY2VkIGFnYWluc3QgTWFyaXVzLCB3aG8ga2VwdCBxdWlldCBhbmQgY2FyZWZ1bGx5IGd1YXJkZWQgaGlzIGNhbXAuIEFuZCBpdCBpcyBzYWlkIHRoYXQgaXQgd2FzIGluIHByZXBhcmF0aW9uIGZvciB0aGlzIGJhdHRsZSB0aGF0IE1hcml1cyBpbnRyb2R1Y2VkIGFuIGlubm92YXRpb24gaW4gdGhlIHN0cnVjdHVyZSBvZiB0aGUgamF2ZWxpbi4gVXAgdG8gdGhpcyB0aW1lLCBpdCBzZWVtcywgdGhhdCBwYXJ0IG9mIHRoZSBzaGFmdCB3aGljaCB3YXMgbGV0IGludG8gdGhlIGlyb24gaGVhZCB3YXMgZmFzdGVuZWQgdGhlcmUgYnkgdHdvIGlyb24gbmFpbHM7IGJ1dCBub3csIGxlYXZpbmcgb25lIG9mIHRoZXNlIGFzIGl0IHdhcywgTWFyaXVzIHJlbW92ZWQgdGhlIG90aGVyLCBhbmQgcHV0IGluIGl0cyBwbGFjZSBhIHdvb2RlbiBwaW4gdGhhdCBjb3VsZCBlYXNpbHkgYmUgYnJva2VuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgZGVzaWduIHdhcyB0aGF0IHRoZSBqYXZlbGluLCBhZnRlciBzdHJpa2luZyB0aGUgZW5lbXkncyBzaGllbGQsIHNob3VsZCBub3Qgc3RhbmQgc3RyYWlnaHQgb3V0LCBidXQgdGhhdCB0aGUgd29vZGVuIHBlZyBzaG91bGQgYnJlYWssIHRodXMgYWxsb3dpbmcgdGhlIHNoYWZ0IHRvIGJlbmQgaW4gdGhlIGlyb24gaGVhZCBhbmQgdHJhaWwgYWxvbmcgdGhlIGdyb3VuZCwgYmVpbmcgaGVsZCBmYXN0IGJ5IHRoZSB0d2lzdCBhdCB0aGUgcG9pbnQgb2YgdGhlIHdlYXBvbi4KCQkJPC9wPgogICAgICAgICA8cD5BbmQgbm93IEJvZW9yaXggdGhlIGtpbmcgb2YgdGhlIENpbWJyaSwgd2l0aCBhIHNtYWxsIHJldGludWUsIHJvZGUgdXAgdG93YXJkcyB0aGUgY2FtcCBhbmQgY2hhbGxlbmdlZCBNYXJpdXMgdG8gc2V0IGEgZGF5IGFuZCBhIHBsYWNlIGFuZCBjb21lIG91dCBhbmQgZmlnaHQgZm9yIHRoZSBvd25lcnNoaXAgb2YgdGhlIGNvdW50cnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyByZXBsaWVkIHRoYXQgdGhlIFJvbWFucyBuZXZlciBhbGxvd2VkIHRoZWlyIGVuZW1pZXMgdG8gZ2l2ZSB0aGVtIGFkdmljZSBhYm91dCBmaWdodGluZywgYnV0IHRoYXQgaGUgd291bGQgbmV2ZXJ0aGVsZXNzIGdyYXRpZnkgdGhlIENpbWJyaSBpbiB0aGlzIG1hdHRlci4gQWNjb3JkaW5nbHksIHRoZXkgZGVjaWRlZCB0aGF0IHRoZSBkYXkgc2hvdWxkIGJlIHRoZSB0aGlyZCBmb2xsb3dpbmcsIGFuZCB0aGUgcGxhY2UgdGhlIHBsYWluIG9mIFZlcmNlbGxhZSwgd2hpY2ggd2FzIHN1aXRhYmxlIGZvciB0aGUgb3BlcmF0aW9ucyBvZiB0aGUgUm9tYW4gY2F2YWxyeSwgYW5kIHdvdWxkIGdpdmUgdGhlIENpbWJyaSByb29tIHRvIGRlcGxveSB0aGVpciBudW1iZXJzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlcmVmb3JlLCB0aGUgYXBwb2ludGVkIHRpbWUgaGFkIGNvbWUsIHRoZSBSb21hbnMgZHJldyB1cCB0aGVpciBmb3JjZXMgZm9yIGJhdHRsZS4gQ2F0dWx1cyBoYWQgdHdlbnR5IHRob3VzYW5kIHRocmVlIGh1bmRyZWQgc29sZGllcnMsIHdoaWxlIHRob3NlIG9mIE1hcml1cyBhbW91bnRlZCB0byB0aGlydHktdHdvIHRob3VzYW5kLCB3aGljaCB3ZXJlIGRpdmlkZWQgYmV0d2VlbiBib3RoIHdpbmdzIGFuZCBoYWQgQ2F0dWx1cyBiZXR3ZWVuIHRoZW0gaW4gdGhlIGNlbnRyZSwgYXMgU3VsbGEsIHdobyBmb3VnaHQgaW4gdGhpcyBiYXR0bGUsIGhhcyBzdGF0ZWQuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGhpcyA8dGl0bGU+TWVtb2lycyA8L3RpdGxlPjsgY2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gNC4zIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TdWxsYSA8L3RpdGxlPiwgaXYuIDMgPC9iaWJsPi4gPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgYWxzbyB0aGF0IE1hcml1cyBob3BlZCB0aGF0IHRoZSB0d28gbGluZXMgd291bGQgZW5nYWdlIGF0IHRoZWlyIGV4dHJlbWl0aWVzIGNoaWVmbHkgYW5kIG9uIHRoZSB3aW5ncywgaW4gb3JkZXIgdGhhdCBoaXMgc29sZGllcnMgbWlnaHQgaGF2ZSB0aGUgd2hvbGUgY3JlZGl0IGZvciB0aGUgdmljdG9yeSBhbmQgdGhhdCBDYXR1bHVzIG1pZ2h0IG5vdCBwYXJ0aWNpcGF0ZSBpbiB0aGUgc3RydWdnbGUgbm9yIGV2ZW4gZW5nYWdlIHRoZSBlbmVteSAoc2luY2UgdGhlIGNlbnRyZSwgYXMgaXMgdXN1YWwgaW4gYmF0dGxlLWZyb250cyBvZiBncmVhdCBleHRlbnQsIHdvdWxkIGJlIGZvbGRlZCBiYWNrKTsgYW5kIHRoZXJlZm9yZSBhcnJhbmdlZCB0aGUgZm9yY2VzIGluIHRoaXMgbWFubmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2UgYXJlIHRvbGQgdGhhdCBDYXR1bHVzIGhpbXNlbGYgYWxzbyBtYWRlIGEgc2ltaWxhciBzdGF0ZW1lbnQgaW4gZGVmZW5jZSBvZiBoaXMgY29uZHVjdCBpbiB0aGUgYmF0dGxlLCBhbmQgYWNjdXNlZCBNYXJpdXMgb2YgZ3JlYXQgbWFsaWNlIGluIGhpcyB0cmVhdG1lbnQgb2YgaGltLgoJCQk8L3A+CiAgICAgICAgIDxwPkFzIGZvciB0aGUgQ2ltYnJpLCB0aGVpciBmb290LXNvbGRpZXJzIGFkdmFuY2VkIHNsb3dseSBmcm9tIHRoZWlyIGRlZmVuY2VzLCB3aXRoIGEgZGVwdGggZXF1YWwgdG8gdGhlaXIgZnJvbnQsIGZvciBlYWNoIHNpZGUgb2YgdGhlaXIgZm9ybWF0aW9uIGhhZCBhbiBleHRlbnQgb2YgdGhpcnR5IGZ1cmxvbmdzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlaXIgaG9yc2VtZW4sIGZpZnRlZW4gdGhvdXNhbmQgc3Ryb25nLCByb2RlIG91dCBpbiBzcGxlbmRpZCBzdHlsZSwgd2l0aCBoZWxtZXRzIG1hZGUgdG8gcmVzZW1ibGUgdGhlIG1hd3Mgb2YgZnJpZ2h0ZnVsIHdpbGQgYmVhc3RzIG9yIHRoZSBoZWFkcyBvZiBzdHJhbmdlIGFuaW1hbHMsIHdoaWNoLCB3aXRoIHRoZWlyIHRvd2VyaW5nIGNyZXN0cyBvZiBmZWF0aGVycywgbWFkZSB0aGVpciB3ZWFyZXJzIGFwcGVhciB0YWxsZXIgdGhhbiB0aGV5IHJlYWxseSB3ZXJlOyB0aGV5IHdlcmUgYWxzbyBlcXVpcHBlZCB3aXRoIGJyZWFzdHBsYXRlcyBvZiBpcm9uLCBhbmQgY2FycmllZCBnbGVhbWluZyB3aGl0ZSBzaGllbGRzLiBGb3IgaHVybGluZywgZWFjaCBtYW4gaGFkIHR3byBsYW5jZXM7IGFuZCBhdCBjbG9zZSBxdWFydGVycyB0aGV5IHVzZWQgbGFyZ2UsIGhlYXZ5IHN3b3Jkcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgaG93ZXZlciwgdGhleSBkaWQgbm90IGNoYXJnZSBkaXJlY3RseSB1cG9uIHRoZSBSb21hbnMsIGJ1dCBzd2VydmVkIHRvIHRoZSByaWdodCBhbmQgdHJpZWQgdG8gZHJhdyB0aGVtIGFsb25nIGdyYWR1YWxseSB1bnRpbCB0aGV5IGdvdCB0aGVtIGJldHdlZW4gdGhlbXNlbHZlcyBhbmQgdGhlaXIgaW5mYW50cnksIHdoaWNoIHdhcyBkcmF3biB1cCBvbiB0aGVpciBsZWZ0LiBUaGUgUm9tYW4gY29tbWFuZGVycyBwZXJjZWl2ZWQgdGhlIGNyYWZ0eSBkZXNpZ24sIGJ1dCBkaWQgbm90IHN1Y2NlZWQgaW4gaG9sZGluZyB0aGVpciBzb2xkaWVycyBiYWNrOyBmb3Igb25lIG9mIHRoZW0gc2hvdXRlZCB0aGF0IHRoZSBlbmVteSB3YXMgdGFraW5nIHRvIGZsaWdodCwgYW5kIHRoZW4gYWxsIHNldCBvdXQgdG8gcHVyc3VlIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSB0aGUgaW5mYW50cnkgb2YgdGhlIEJhcmJhcmlhbnMgY2FtZSBvbiB0byB0aGUgYXR0YWNrIGxpa2UgYSB2YXN0IHNlYSBpbiBtb3Rpb24uIFRoZW4gTWFyaXVzLCBhZnRlciB3YXNoaW5nIGhpcyBoYW5kcywgbGlmdGVkIHRoZW0gdG8gaGVhdmVuIGFuZCB2b3dlZCBhIGhlY2F0b21iIHRvIHRoZSBnb2RzOyBDYXR1bHVzIGFsc28gaW4gbGlrZSBtYW5uZXIgbGlmdGVkIGhpcyBoYW5kcyBhbmQgdm93ZWQgdGhhdCBoZSB3b3VsZCBjb25zZWNyYXRlIHRoZSBmb3J0dW5lIG9mIHRoYXQgZGF5LiBJdCBpcyBzYWlkLCB0b28sIHRoYXQgTWFyaXVzIG9mZmVyZWQgc2FjcmlmaWNlLCBhbmQgdGhhdCB3aGVuIHRoZSB2aWN0aW1zIGhhZCBiZWVuIHNob3duIHRvIGhpbSwgaGUgY3JpZWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWluZSBpcyB0aGUgdmljdG9yeS48L3E+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGF0dGFjayBoYWQgYmVndW4sIGhvd2V2ZXIsIGFuIGV4cGVyaWVuY2UgYmVmZWxsIE1hcml1cyB3aGljaCBzaWduaWZpZWQgdGhlIGRpdmluZSBkaXNwbGVhc3VyZSwgYWNjb3JkaW5nIHRvIFN1bGxhLiBGb3IgYW4gaW1tZW5zZSBjbG91ZCBvZiBkdXN0IHdhcyByYWlzZWQsIGFzIHdhcyB0byBiZSBleHBlY3RlZCwgYW5kIHRoZSB0d28gYXJtaWVzIHdlcmUgaGlkZGVuIGZyb20gb25lIGFub3RoZXIgYnkgaXQsIHNvIHRoYXQgTWFyaXVzLCB3aGVuIGhlIGZpcnN0IGxlZCBoaXMgZm9yY2VzIHRvIHRoZSBhdHRhY2ssIG1pc3NlZCB0aGUgZW5lbXksIHBhc3NlZCBieSB0aGVpciBsaW5lcyBvZiBiYXR0bGUsIGFuZCBtb3ZlZCBhaW1sZXNzbHkgdXAgYW5kIGRvd24gdGhlIHBsYWluIGZvciBzb21lIHRpbWUuIE1lYW53aGlsZSwgYXMgY2hhbmNlIHdvdWxkIGhhdmUgaXQsIHRoZSBCYXJiYXJpYW5zIGVuZ2FnZWQgZmllcmNlbHkgd2l0aCBDYXR1bHVzLCBhbmQgaGUgYW5kIGhpcyBzb2xkaWVycywgYW1vbmcgd2hvbSBTdWxsYSBzYXlzIGhlIGhpbXNlbGYgd2FzIHBvc3RlZCwgYm9yZSB0aGUgYnJ1bnQgb2YgdGhlIHN0cnVnZ2xlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW5zIHdlcmUgZmF2b3VyZWQgaW4gdGhlIHN0cnVnZ2xlLCBTdWxsYSBzYXlzLCBieSB0aGUgaGVhdCwgYW5kIGJ5IHRoZSBzdW4sIHdoaWNoIHNob25lIGluIHRoZSBmYWNlcyBvZiB0aGUgQ2ltYnJpLiBGb3IgdGhlIEJhcmJhcmlhbnMgd2VyZSB3ZWxsIGFibGUgdG8gZW5kdXJlIGNvbGQsIGFuZCBoYWQgYmVlbiBicm91Z2h0IHVwIGluIHNoYWR5IGFuZCBjaGlsbHkgcmVnaW9ucywgYXMgSSBoYXZlIHNhaWQuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDExLjUiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeGkuIDUgZiA8L2JpYmw+LiA8L25vdGU+IFRoZXkgd2VyZSB0aGVyZWZvcmUgdW5kb25lIGJ5IHRoZSBoZWF0OyB0aGV5IHN3ZWF0ZWQgcHJvZnVzZWx5LCBicmVhdGhlZCB3aXRoIGRpZmZpY3VsdHksIGFuZCB3ZXJlIGZvcmNlZCB0byBob2xkIHRoZWlyIHNoaWVsZHMgYmVmb3JlIHRoZWlyIGZhY2VzLiBGb3IgdGhlIGJhdHRsZSB3YXMgZm91Z2h0IGFmdGVyIHRoZSBzdW1tZXIgc29sc3RpY2UsIHdoaWNoIGZhbGxzLCBieSBSb21hbiByZWNrb25pbmcsIHRocmVlIGRheXMgYmVmb3JlIHRoZSBuZXcgbW9vbiBvZiB0aGUgbW9udGggbm93IGNhbGxlZCBBdWd1c3QsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmEuZC4gSUlJLiA8Zm9yZWlnbiBsYW5nPSJsYSI+S2FsZW5kYXMgQXVndXN0aTwvZm9yZWlnbj4uIDwvbm90ZT4gYnV0IHRoZW4gU2V4dGlsaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgZHVzdCwgYnkgaGlkaW5nIHRoZSBlbmVteSwgaGVscGVkIHRvIGVuY291cmFnZSB0aGUgUm9tYW5zLiBGb3IgdGhleSBjb3VsZCBub3Qgc2VlIGZyb20gYWZhciB0aGUgZ3JlYXQgbnVtYmVycyBvZiB0aGUgZm9lLCBidXQgZWFjaCBvbmUgb2YgdGhlbSBmZWxsIGF0IGEgcnVuIHVwb24gdGhlIG1hbiBqdXN0IG92ZXIgYWdhaW5zdCBoaW0sIGFuZCBmb3VnaHQgaGltIGhhbmQgdG8gaGFuZCwgd2l0aG91dCBoYXZpbmcgYmVlbiB0ZXJyaWZpZWQgYnkgdGhlIHNpZ2h0IG9mIHRoZSByZXN0IG9mIHRoZSBob3N0LiBBbmQgdGhlaXIgYm9kaWVzIHdlcmUgc28gaW51cmVkIHRvIHRvaWwgYW5kIHNvIHRob3JvdWdobHkgdHJhaW5lZCB0aGF0IG5vdCBhIFJvbWFuIHdhcyBvYnNlcnZlZCB0byBzd2VhdCBvciBwYW50LCBpbiBzcGl0ZSBvZiB0aGUgZ3JlYXQgaGVhdCBhbmQgdGhlIHJ1biB3aXRoIHdoaWNoIHRoZXkgY2FtZSB0byB0aGUgZW5jb3VudGVyLiBUaGlzIGlzIHdoYXQgQ2F0dWx1cyBoaW1zZWxmIGlzIHNhaWQgdG8gaGF2ZSB3cml0dGVuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhdHVsdXMgd3JvdGUgYSBoaXN0b3J5IG9mIGhpcyBjb25zdWxzaGlwLCBvZiB3aGljaCBDaWNlcm8gc3BlYWtzIGluIHRlcm1zIG9mIGhpZ2ggcHJhaXNlICggPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gYWQgQnJ1dC4gMTMyIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXMgPC90aXRsZT4gMzUsIDEzMiBmZi4gPC9iaWJsPikuIDwvbm90ZT4gaW4gZXh0b2xsaW5nIGhpcyBzb2xkaWVycy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBncmVhdGVzdCBudW1iZXIgYW5kIHRoZSBiZXN0IGZpZ2h0ZXJzIG9mIHRoZSBlbmVteSB3ZXJlIGN1dCB0byBwaWVjZXMgb24gdGhlIHNwb3Q7IGZvciB0byBwcmV2ZW50IHRoZWlyIHJhbmtzIGZyb20gYmVpbmcgYnJva2VuLCB0aG9zZSB3aG8gZm91Z2h0IGluIGZyb250IHdlcmUgYm91bmQgZmFzdCB0byBvbmUgYW5vdGhlciB3aXRoIGxvbmcgY2hhaW5zIHdoaWNoIHdlcmUgcGFzc2VkIHRocm91Z2ggdGhlaXIgYmVsdHMuIFRoZSBmdWdpdGl2ZXMsIGhvd2V2ZXIsIHdlcmUgZHJpdmVuIGJhY2sgdG8gdGhlaXIgZW50cmVuY2htZW50cywgd2hlcmUgdGhlIFJvbWFucyBiZWhlbGQgYSBtb3N0IHRyYWdpYyBzcGVjdGFjbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3b21lbiwgaW4gYmxhY2sgZ2FybWVudHMsIHN0b29kIGF0IHRoZSB3YWdnb25zIGFuZCBzbGV3IHRoZSBmdWdpdGl2ZXPigJR0aGVpciBodXNiYW5kcyBvciBicm90aGVycyBvciBmYXRoZXJzLCB0aGVuIHN0cmFuZ2xlZCB0aGVpciBsaXR0bGUgY2hpbGRyZW4gYW5kIGNhc3QgdGhlbSBiZW5lYXRoIHRoZSB3aGVlbHMgb2YgdGhlIHdhZ2dvbnMgb3IgdGhlIGZlZXQgb2YgdGhlIGNhdHRsZSwgYW5kIHRoZW4gY3V0IHRoZWlyIG93biB0aHJvYXRzLiBJdCBpcyBzYWlkIHRoYXQgb25lIHdvbWFuIGh1bmcgZGFuZ2xpbmcgZnJvbSB0aGUgdGlwIG9mIGEgd2FnZ29uLXBvbGUsIHdpdGggaGVyIGNoaWxkcmVuIHRpZWQgdG8gZWl0aGVyIGFua2xlOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSB0aGUgbWVuLCBmb3IgbGFjayBvZiB0cmVlcywgZmFzdGVuZWQgdGhlbXNlbHZlcyBieSB0aGUgbmVjayB0byB0aGUgaG9ybnMgb2YgdGhlIGNhdHRsZSwgb3IgdG8gdGhlaXIgbGVncywgdGhlbiBwbGllZCB0aGUgZ29hZCwgYW5kIHdlcmUgZHJhZ2dlZCBvciB0cmFtcGxlZCB0byBkZWF0aCBhcyB0aGUgY2F0dGxlIGRhc2hlZCBhd2F5LiBOZXZlcnRoZWxlc3MsIGluIHNwaXRlIG9mIHN1Y2ggc2VsZi1kZXN0cnVjdGlvbiwgbW9yZSB0aGFuIHNpeHR5IHRob3VzYW5kIHdlcmUgdGFrZW4gcHJpc29uZXJzOyBhbmQgdGhvc2Ugd2hvIGZlbGwgd2VyZSBzYWlkIHRvIGhhdmUgYmVlbiB0d2ljZSB0aGF0IG51bWJlci4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGVuZW15J3MgcHJvcGVydHkgYmVjYW1lIHRoZSBib290eSBvZiB0aGUgc29sZGllcnMgb2YgTWFyaXVzLCBidXQgdGhlIHNwb2lscyBvZiBiYXR0bGUsIHRoZSBzdGFuZGFyZHMsIGFuZCB0aGUgdHJ1bXBldHMsIHdlcmUgYnJvdWdodCwgd2UgYXJlIHRvbGQsIHRvIHRoZSBjYW1wIG9mIENhdHVsdXMgYW5kIENhdHVsdXMgcmVsaWVkIGNoaWVmbHkgdXBvbiB0aGlzIGFzIGEgcHJvb2YgdGhhdCB0aGUgdmljdG9yeSB3YXMgd29uIGJ5IGhpcyBtZW4uIEZ1cnRoZXJtb3JlLCBhIGRpc3B1dGUgZm9yIHRoZSBob25vdXIgb2YgdGhlIHZpY3RvcnkgYXJvc2UgYW1vbmcgdGhlIHNvbGRpZXJzLCBhcyB3YXMgbmF0dXJhbCwgYW5kIHRoZSBtZW1iZXJzIG9mIGFuIGVtYmFzc3kgZnJvbSBQYXJtYSB3ZXJlIGNob3NlbiB0byBhY3QgYXMgYXJiaXRyYXRvcnMuIFRoZXNlIG1lbiB0aGUgc29sZGllcnMgb2YgQ2F0dWx1cyBjb25kdWN0ZWQgYW1vbmcgdGhlIGRlYWQgYm9kaWVzIG9mIHRoZSBlbmVteSwgd2hpY2ggd2VyZSBjbGVhcmx5IHNlZW4gdG8gaGF2ZSBiZWVuIHBpZXJjZWQgYnkgdGhlaXIgamF2ZWxpbnM7IGZvciB0aGVzZSBjb3VsZCBiZSBrbm93biBieSB0aGUgbmFtZSBvZiBDYXR1bHVzIHdoaWNoIGhhZCBiZWVuIGN1dCBpbnRvIHRoZSBzaGFmdC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlIGVudGlyZSBzdWNjZXNzIHdhcyBhdHRyaWJ1dGVkIHRvIE1hcml1cywgYm90aCBvbiBhY2NvdW50IG9mIGhpcyBmb3JtZXIgdmljdG9yeSBhbmQgb2YgaGlzIHN1cGVyaW9yIHJhbmsuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hcml1cyB3YXMgY29uc3VsIHN0aWxsLCB3aGlsZSBDYXR1bHVzIGhhZCBub3QgYmVlbiByZS1lbGVjdGVkLCBhbmQgd2FzIG9ubHkgcHJvLWNvbnN1bC4gPC9ub3RlPiBBYm92ZSBhbGwsIHRoZSBwZW9wbGUgaGFpbGVkIGhpbSBhcyB0aGUgdGhpcmQgZm91bmRlciBvZiBSb21lLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5XaXRoIFJvbXVsdXMgYW5kIENhbWlsbHVzLiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDMxLjIiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhbWlsbHVzIDwvdGl0bGU+LCB4eHhpLiAyIDwvYmlibD4uIDwvbm90ZT4gb24gdGhlIGdyb3VuZCB0aGF0IHRoZSBwZXJpbCB3aGljaCBoZSBoYWQgYXZlcnRlZCBmcm9tIHRoZSBjaXR5IHdhcyBub3QgbGVzcyB0aGFuIHRoYXQgb2YgdGhlIEdhbGxpYyBpbnZhc2lvbjsgYW5kIGFsbCBvZiB0aGVtLCBhcyB0aGV5IG1hZGUgbWVycnkgYXQgaG9tZSB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiwgd291bGQgYnJpbmcgY2VyZW1vbmlhbCBvZmZlcmluZ3Mgb2YgZm9vZCBhbmQgbGliYXRpb25zIG9mIHdpbmUgdG8gTWFyaXVzIGFzIHdlbGwgYXMgdG8gdGhlIGdvZHMsIGFuZCB0aGV5IHdlcmUgaW5zaXN0ZW50IHRoYXQgaGUgYWxvbmUgc2hvdWxkIGNlbGVicmF0ZSBib3RoIHRyaXVtcGhzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMsIGhvd2V2ZXIsIHdvdWxkIG5vdCBkbyB0aGlzLCBidXQgY2VsZWJyYXRlZCBoaXMgdHJpdW1waCB3aXRoIENhdHVsdXMsIHdpc2hpbmcgdG8gc2hvdyBoaW1zZWxmIGEgbWFuIG9mIG1vZGVyYXRpb24gYWZ0ZXIgYSBjb3Vyc2Ugb2Ygc28gZ3JlYXQgZ29vZCBmb3J0dW5lLiBQZXJoYXBzLCB0b28sIGhlIHdhcyBhZnJhaWQgb2YgdGhlIHNvbGRpZXJzLCB3aG8gd2VyZSBkcmF3biB1cCBhbmQgcmVhZHksIGluIGNhc2UgQ2F0dWx1cyB3ZXJlIGRlcHJpdmVkIG9mIGhpcyBob25vdXIsIHRvIHByZXZlbnQgTWFyaXVzIGFsc28gZnJvbSBjZWxlYnJhdGluZyBhIHRyaXVtcGguCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzLCB0aGVuLCBoaXMgZmlmdGggY29uc3Vsc2hpcCB3YXMgY29taW5nIHRvIGFuIGVuZDsgYnV0IGhlIHdhcyBhcyBlYWdlciBmb3IgYSBzaXh0aCBhcyBhbm90aGVyIHdvdWxkIGhhdmUgYmVlbiBmb3IgaGlzIGZpcnN0LiBIZSB0cmllZCB0byB3aW4gb3ZlciB0aGUgcGVvcGxlIGJ5IG9ic2VxdWlvdXMgYXR0ZW50aW9ucywgYW5kIHlpZWxkZWQgdG8gdGhlIG11bHRpdHVkZSBpbiBvcmRlciB0byBnYWluIGl0cyBmYXZvdXIsIHRodXMgZG9pbmcgdmlvbGVuY2UsIG5vdCBvbmx5IHRvIHRoZSBkaWduaXR5IGFuZCBtYWplc3R5IG9mIGhpcyBoaWdoIG9mZmljZSwgYnV0IGFsc28gdG8gaGlzIG93biBuYXR1cmUsIHNpbmNlIGhlIHdpc2hlZCB0byBiZSBhIGNvbXBsaWFudCBtYW4gb2YgdGhlIHBlb3BsZSB3aGVuIGhlIHdhcyBuYXR1cmFsbHkgYXQgZmFydGhlc3QgcmVtb3ZlIGZyb20gdGhpcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uZnJvbnRpbmcgYSBwb2xpdGljYWwgY3Jpc2lzIG9yIHRoZSB0dW11bHR1b3VzIHRocm9uZywgd2UgYXJlIHRvbGQsIGhpcyBhbWJpdGlvbiBtYWRlIGhpbSBtb3N0IHRpbW9yb3VzLCBhbmQgdGhhdCB1bmRhdW50ZWQgZmlybW5lc3Mgd2hpY2ggaGUgc2hvd2VkIGluIGJhdHRsZSBmb3Jzb29rIGhpbSB3aGVuIGhlIGZhY2VkIHRoZSBwb3B1bGFyIGFzc2VtYmxpZXMsIHNvIHRoYXQgaGUgd2FzIGRpc2NvbmNlcnRlZCBieSB0aGUgbW9zdCBvcmRpbmFyeSBwcmFpc2Ugb3IgYmxhbWUuIEFuZCB5ZXQgd2UgYXJlIHRvbGQgdGhhdCB3aGVuIGhlIGhhZCBiZXN0b3dlZCBjaXRpemVuc2hpcCB1cG9uIGFzIG1hbnkgYXMgYSB0aG91c2FuZCBtZW4gb2YgQ2FtZXJpbnVtIGZvciBjb25zcGljdW91cyBicmF2ZXJ5IGluIHRoZSB3YXIsIHRoZSBhY3Qgd2FzIGhlbGQgdG8gYmUgaWxsZWdhbCBhbmQgd2FzIGltcGVhY2hlZCBieSBzb21lOyB0byB3aG9tIGhlIHJlcGxpZWQgdGhhdCB0aGUgY2xhc2ggb2YgYXJtcyBoYWQgcHJldmVudGVkIGhpcyBoZWFyaW5nIHRoZSB2b2ljZSBvZiB0aGUgbGF3LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBhcHBlYXJlZCB0byBiZSBpbiBncmVhdGVyIGZlYXIgYW5kIHRlcnJvciBvZiB0aGUgc2hvdXRpbmcgaW4gdGhlIHBvcHVsYXIgYXNzZW1ibGllcy4gQXQgYW55IHJhdGUsIHdoaWxlIGluIHdhciBoZSBoYWQgYXV0aG9yaXR5IGFuZCBwb3dlciBiZWNhdXNlIGhpcyBzZXJ2aWNlcyB3ZXJlIG5lZWRlZCwgeWV0IGluIGNpdmlsIGxpZmUgaGlzIGxlYWRlcnNoaXAgd2FzIG1vcmUgYWJyaWRnZWQsIGFuZCBoZSB0aGVyZWZvcmUgaGFkIHJlY291cnNlIHRvIHRoZSBnb29kd2lsbCBhbmQgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUsIG5vdCBjYXJpbmcgdG8gYmUgdGhlIGJlc3QgbWFuIGlmIG9ubHkgaGUgY291bGQgYmUgdGhlIGdyZWF0ZXN0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29uc2VxdWVuY2Ugd2FzIHRoYXQgaGUgY2FtZSBpbnRvIGNvbGxpc2lvbiB3aXRoIGFsbCB0aGUgYXJpc3RvY3JhdHMuIEl0IHdhcyBNZXRlbGx1cywgaG93ZXZlciwgd2hvbSBoZSBlc3BlY2lhbGx5IGZlYXJlZCwgYSBtYW4gd2hvIGhhZCBleHBlcmllbmNlZCBoaXMgaW5ncmF0aXR1ZGUsIGFuZCBvbmUgd2hvc2UgZ2VudWluZSBleGNlbGxlbmNlIG1hZGUgaGltIHRoZSBuYXR1cmFsIGVuZW15IG9mIHRob3NlIHdobyB0cmllZCB0byBpbnNpbnVhdGUgdGhlbXNlbHZlcyBieSBkZXZpb3VzIG1ldGhvZHMgaW50byBwb3B1bGFyIGZhdm91ciBhbmQgc291Z2h0IHRvIGNvbnRyb2wgdGhlIG1hc3NlcyBieSBwbGVhc2luZyB0aGVtLiBBY2NvcmRpbmdseSwgaGUgc2NoZW1lZCB0byBiYW5pc2ggTWV0ZWxsdXMgZnJvbSB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcHVycG9zZSBoZSBhbGxpZWQgaGltc2VsZiB3aXRoIFNhdHVybmludXMgYW5kIEdsYXVjaWEsIG1lbiBvZiB0aGUgZ3JlYXRlc3QgZWZmcm9udGVyeSwgd2hvIGhhZCBhIHJhYmJsZSBvZiBuZWVkeSBhbmQgbm9pc3kgZmVsbG93cyBhdCB0aGVpciBiZWNrIGFuZCBjYWxsLCBhbmQgd2l0aCB0aGVpciBhc3Npc3RhbmNlIHdvdWxkIGludHJvZHVjZSBsYXdzLiBIZSBhbHNvIHN0aXJyZWQgdXAgdGhlIHNvbGRpZXJ5LCBnb3QgdGhlbSB0byBtaW5nbGUgd2l0aCB0aGUgY2l0aXplbnMgaW4gdGhlIGFzc2VtYmxpZXMsIGFuZCB0aHVzIGNvbnRyb2xsZWQgYSBmYWN0aW9uIHdoaWNoIGNvdWxkIG92ZXJwb3dlciBNZXRlbGx1cy4gVGhlbiwgYWNjb3JkaW5nIHRvIFJ1dGlsaXVzLCB3aG8gaXMgZ2VuZXJhbGx5IGEgbG92ZXIgb2YgdHJ1dGggYW5kIGFuIGhvbmVzdCBtYW4sIGJ1dCBoYWQgYSBwcml2YXRlIHF1YXJyZWwgd2l0aCBNYXJpdXMsIGhlIGFjdHVhbGx5IGdvdCBoaXMgc2l4dGggY29uc3Vsc2hpcCBieSBwYXlpbmcgZG93biBsYXJnZSBzdW1zIG9mIG1vbmV5IGFtb25nIHRoZSB0cmliZXMsIGFuZCBieSBidXlpbmcgdm90ZXMgbWFkZSBNZXRlbGx1cyBsb3NlIGhpcyBlbGVjdGlvbiB0byB0aGUgb2ZmaWNlLCBhbmQgb2J0YWluZWQgYXMgaGlzIGNvbGxlYWd1ZSBpbiB0aGUgY29uc3Vsc2hpcCBWYWxlcml1cyBGbGFjY3VzLCB3aG8gd2FzIG1vcmUgYSBzZXJ2YW50IHRoYW4gYSBjb2xsZWFndWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIHBlb3BsZSBoYWQgbmV2ZXIgYmVzdG93ZWQgc28gbWFueSBjb25zdWxzaGlwcyB1cG9uIGFueSBvdGhlciBtYW4gZXhjZXB0IENvcnZpbnVzIFZhbGVyaXVzLiBJbiB0aGUgY2FzZSBvZiBDb3J2aW51cywgaG93ZXZlciwgZm9ydHktZml2ZSB5ZWFycyBhcmUgc2FpZCB0byBoYXZlIGVsYXBzZWQgYmV0d2VlbiBoaXMgZmlyc3QgYW5kIGhpcyBsYXN0IGNvbnN1bHNoaXA7IHdoZXJlYXMgTWFyaXVzLCBhZnRlciBoaXMgZmlyc3QgY29uc3Vsc2hpcCwgcmFuIHRocm91Z2ggdGhlIG90aGVyIGZpdmUgd2l0aG91dCBhIGJyZWFrLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBsYXN0IGNvbnN1bHNoaXAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTAwIEIuQy4gPC9ub3RlPiBwYXJ0aWN1bGFybHkgZGlkIE1hcml1cyBtYWtlIGhpbXNlbGYgaGF0ZWQsIGJlY2F1c2UgaGUgdG9vayBwYXJ0IHdpdGggU2F0dXJuaW51cyBpbiBtYW55IG9mIGhpcyBtaXNkZWVkcy4gT25lIG9mIHRoZXNlIHdhcyB0aGUgbXVyZGVyIG9mIE5vbml1cywgd2hvbSBTYXR1cm5pbnVzIHNsZXcgYmVjYXVzZSBoZSB3YXMgYSByaXZhbCBjYW5kaWRhdGUgZm9yIHRoZSB0cmlidW5lc2hpcC4gVGhlbiwgYXMgdHJpYnVuZSwgU2F0dXJuaW51cyBpbnRyb2R1Y2VkIGhpcyBhZ3JhcmlhbiBsYXcsIHRvIHdoaWNoIHdhcyBhZGRlZCBhIGNsYXVzZSBwcm92aWRpbmcgdGhhdCB0aGUgc2VuYXRvcnMgc2hvdWxkIGNvbWUgZm9yd2FyZCBhbmQgdGFrZSBvYXRoIHRoYXQgdGhleSB3b3VsZCBhYmlkZSBieSB3aGF0c29ldmVyIHRoZSBwZW9wbGUgbWlnaHQgdm90ZSBhbmQgbWFrZSBubyBvcHBvc2l0aW9uIHRvIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2VuYXRlIE1hcml1cyBtYWRlIHByZXRlbmNlIG9mIG9wcG9zaW5nIHRoaXMgcGFydCBvZiB0aGUgbGF3LCBhbmQgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBub3QgdGFrZSB0aGUgb2F0aCwgYW5kIHRoYXQgaGUgdGhvdWdodCBubyBvdGhlciBzZW5zaWJsZSBtYW4gd291bGQ7IGZvciBldmVuIGlmIHRoZSBsYXcgd2VyZSBub3QgYSBiYWQgb25lLCBpdCB3YXMgYW4gaW5zdWx0IHRvIHRoZSBzZW5hdGUgdGhhdCBpdCBzaG91bGQgYmUgY29tcGVsbGVkIHRvIG1ha2Ugc3VjaCBjb25jZXNzaW9ucywgaW5zdGVhZCBvZiBtYWtpbmcgdGhlbSB1bmRlciBwZXJzdWFzaW9uIGFuZCBvZiBpdHMgb3duIGZyZWUgd2lsbC4gSGUgc2FpZCB0aGlzLCBob3dldmVyLCBub3QgYmVjYXVzZSBpdCB3YXMgaGlzIHJlYWwgbWluZCwgYnV0IHRoYXQgaGUgbWlnaHQgY2F0Y2ggTWV0ZWxsdXMgaW4gdGhlIHRvaWxzIG9mIGEgZmF0YWwgdHJpY2suIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoaW1zZWxmIHJlZ2FyZGVkIGx5aW5nIGFzIHBhcnQgb2YgYSBtYW4ncyBleGNlbGxlbmNlIGFuZCBhYmlsaXR5LCBtYWRlIG5vIGFjY291bnQgb2YgaGlzIGFncmVlbWVudHMgd2l0aCB0aGUgc2VuYXRvcnMsIGFuZCBkaWQgbm90IGludGVuZCB0byBrZWVwIHRoZW07IHdoZXJlYXMgaGUga25ldyB0aGF0IE1ldGVsbHVzIHdhcyBhIHN0ZWFkZmFzdCBtYW4sIHdobyB0aG91Z2h0IHdpdGggUGluZGFyIHRoYXQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50cnV0aCBpcyB0aGUgZm91bmRhdGlvbiBvZiBncmVhdCBleGNlbGxlbmNlLDwvcT4gCiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDIyMSAoQm9lY2toKS4gPC9ub3RlPiBhbmQgaGUgdGhlcmVmb3JlIHdpc2hlZCB0byBiaW5kIGhpbSBiZWZvcmVoYW5kIGJ5IGEgc3RhdGVtZW50IHRvIHRoZSBzZW5hdGUgdGhhdCBoZSB3b3VsZCBub3QgdGFrZSB0aGUgb2F0aCwgYW5kIHRoZW4gaGF2ZSBoaXMgcmVmdXNhbCB0byBkbyBzbyBwbHVuZ2UgaGltIGludG8gYSBoYXRyZWQgb24gdGhlIHBhcnQgb2YgdGhlIHBlb3BsZSB0aGF0IGNvdWxkIG5ldmVyIGJlIHJlbW92ZWQuIEFuZCB0aGlzIHdhcyB3aGF0IGNhbWUgdG8gcGFzcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBNZXRlbGx1cyBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIG5vdCB0YWtlIHRoZSBvYXRoLCBhbmQgdGhlIHNlbmF0ZSBicm9rZSB1cCBmb3IgYSB3aGlsZTsgYnV0IGFmdGVyIGEgZmV3IGRheXMgU2F0dXJuaW51cyBzdW1tb25lZCB0aGUgc2VuYXRvcnMgdG8gdGhlIHJvc3RyYSBhbmQgdHJpZWQgdG8gZm9yY2UgdGhlbSB0byB0YWtlIHRoZSBvYXRoLiBXaGVuIE1hcml1cyBjYW1lIGZvcndhcmQgdGhlcmUgd2FzIHNpbGVuY2UsIGFuZCB0aGUgZXllcyBvZiBhbGwgd2VyZSBmYXN0ZW5lZCB1cG9uIGhpbS4gVGhlbiwgYmlkZGluZyBhIGxvbmcgZmFyZXdlbGwgdG8gYWxsIGhpcyBib2FzdGZ1bCBhbmQgaW5zaW5jZXJlIGV4cHJlc3Npb25zIGluIHRoZSBzZW5hdGUsIGhlIHNhaWQgaGlzIHRocm9hdCB3YXMgbm90IGJyb2FkIGVub3VnaCB0byBwcm9ub3VuY2UgYW4gb3BpbmlvbiBvbmNlIGZvciBhbGwgdXBvbiBzbyBpbXBvcnRhbnQgYSBtYXR0ZXIsIGJ1dCB0aGF0IGhlIHdvdWxkIHRha2UgdGhlIG9hdGgsIGFuZCBvYmV5IHRoZSBsYXcsIGlmIGl0IHdhcyBhIGxhdzsgYWRkaW5nIHRoaXMgYml0IG9mIHNvcGhpc3RyeSBhcyBhIGNsb2FrIGZvciBoaXMgc2hhbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUsIHRoZW4sIGRlbGlnaHRlZCBhdCBoaXMgdGFraW5nIHRoZSBvYXRoLCBjbGFwcGVkIHRoZWlyIGhhbmRzIGluIGFwcGxhdXNlLCBidXQgdGhlIG5vYmxlcyB3ZXJlIHRlcnJpYmx5IGRlamVjdGVkIGFuZCBoYXRlZCBNYXJpdXMgZm9yIGhpcyBjaGFuZ2Ugb2YgZnJvbnQuIEFjY29yZGluZ2x5LCBhbGwgdGhlIHNlbmF0b3JzIHRvb2sgdGhlIG9hdGggaW4gb3JkZXIsIHRocm91Z2ggZmVhciBvZiB0aGUgcGVvcGxlLCB1bnRpbCB0aGUgdHVybiBvZiBNZXRlbGx1cyBjYW1lOyBidXQgTWV0ZWxsdXMsIGFsdGhvdWdoIGhpcyBmcmllbmRzIGVhcm5lc3RseSBlbnRyZWF0ZWQgaGltIHRvIHRha2UgdGhlIG9hdGggYW5kIG5vdCBzdWJqZWN0IGhpbXNlbGYgdG8gdGhlIGlycmVwYXJhYmxlIHB1bmlzaG1lbnRzIHdoaWNoIFNhdHVybmludXMgcHJvcG9zZWQgZm9yIHRob3NlIHdobyBzaG91bGQgcmVmdXNlLCB3b3VsZCBub3Qgc3dlcnZlIGZyb20gaGlzIHB1cnBvc2Ugb3IgdGFrZSB0aGUgb2F0aCwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YnV0LCBhZGhlcmluZyB0byBoaXMgcHJpbmNpcGxlcyBhbmQgcHJlcGFyZWQgdG8gc3VmZmVyIGFueSBldmlsIHJhdGhlciB0aGFuIGRvIGEgc2hhbWVmdWwgZGVlZCwgaGUgbGVmdCB0aGUgZm9ydW0sIHNheWluZyB0byB0aG9zZSBhYm91dCBoaW0gdGhhdCB0byBkbyBhIHdyb25nIHRoaW5nIHdhcyBtZWFuLCBhbmQgdG8gZG8gdGhlIHJpZ2h0IHRoaW5nIHdoZW4gdGhlcmUgd2FzIG5vIGRhbmdlciB3YXMgYW55IG1hbidzIHdheSwgYnV0IHRoYXQgdG8gYWN0IGhvbm91cmFibHkgd2hlbiBpdCBpbnZvbHZlZCBkYW5nZXJzIHdhcyBwZWN1bGlhcmx5IHRoZSBwYXJ0IG9mIGEgZ29vZCBhbmQgdHJ1ZSBtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgU2F0dXJuaW51cyBnb3QgYSB2b3RlIHBhc3NlZCB0aGF0IHRoZSBjb25zdWxzIHNob3VsZCBwcm9jbGFpbSBNZXRlbGx1cyBpbnRlcmRpY3RlZCBmcm9tIGZpcmUsIHdhdGVyLCBhbmQgc2hlbHRlcjsgYW5kIHRoZSBtZWFuZXN0IHBhcnQgb2YgdGhlIHBvcHVsYWNlIHN1cHBvcnRlZCB0aGVtIGFuZCB3YXMgcmVhZHkgdG8gcHV0IHRoZSBtYW4gdG8gZGVhdGguIFRoZSBiZXN0IGNpdGl6ZW5zLCBob3dldmVyLCBzeW1wYXRoaXNlZCB3aXRoIE1ldGVsbHVzIGFuZCBjcm93ZGVkIGhhc3RpbHkgYWJvdXQgaGltLCBidXQgaGUgd291bGQgbm90IGFsbG93IGEgZmFjdGlvbiB0byBiZSByYWlzZWQgb24gaGlzIGFjY291bnQsIGFuZCBkZXBhcnRlZCBmcm9tIHRoZSBjaXR5LCBmb2xsb3dpbmcgdGhlIGRpY3RhdGVzIG9mIHBydWRlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5laXRoZXIgbWF0dGVycyB3aWxsIG1lbmQgYW5kIHRoZSBwZW9wbGUgd2lsbCBjaGFuZ2UgdGhlaXIgbWluZHMgYW5kIEkgc2hhbGwgcmV0dXJuIGF0IHRoZWlyIGludml0YXRpb24sIG9yLCBpZiBtYXR0ZXJzIHJlbWFpbiBhcyB0aGV5IGFyZSwgaXQgaXMgYmVzdCB0aGF0IEkgc2hvdWxkIGJlIGF3YXkuPC9xPiBCdXQgd2hhdCBncmVhdCBnb29kd2lsbCBhbmQgZXN0ZWVtIE1ldGVsbHVzIGVuam95ZWQgZHVyaW5nIGhpcyBleGlsZSwgYW5kIGhvdyBoZSBzcGVudCBoaXMgdGltZSBpbiBwaGlsb3NvcGhpY2FsIHN0dWRpZXMgYXQgUmhvZGVzLCB3aWxsIGJlIGJldHRlciB0b2xkIGluIGhpcyBMaWZlLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5ObyBzdWNoIExpZmUgaXMgZXh0YW50LiA8L25vdGU+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBNYXJpdXMsIHdobyB3YXMgZm9yY2VkLCBpbiByZXR1cm4gZm9yIHRoaXMgYXNzaXN0YW5jZSwgdG8gbG9vayBvbiBxdWlldGx5IHdoaWxlIFNhdHVybmludXMgcmFuIHRvIGV4dHJlbWVzIG9mIGRhcmluZyBhbmQgcG93ZXIsIGJyb3VnaHQgYWJvdXQgdW5hd2FyZXMgYSBtaXNjaGllZiB0aGF0IHdhcyBub3QgdG8gYmUgY3VyZWQsIGJ1dCBtYWRlIGl0cyB3YXkgYnkgYXJtcyBhbmQgc2xhdWdodGVyIGRpcmVjdGx5IHRvd2FyZHMgdHlyYW5ueSBhbmQgc3VidmVyc2lvbiBvZiB0aGUgZ292ZXJubWVudC4gQW5kIHNpbmNlIGhlIHN0b29kIGluIGF3ZSBvZiB0aGUgbm9ibGVzLCB3aGlsZSBoZSBjb3VydGVkIHRoZSBmYXZvdXIgb2YgdGltZSBtdWx0aXR1ZGUsIGhlIHdhcyBsZWQgdG8gY29tbWl0IGFuIGFjdCBvZiB0aGUgdXRtb3N0IG1lYW5uZXNzIGFuZCBkdXBsaWNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZSBsZWFkaW5nIG1lbiBoYWQgY29tZSB0byBoaW0gYnkgbmlnaHQgYW5kIHdlcmUgdHJ5aW5nIHRvIGluY2l0ZSBoaW0gYWdhaW5zdCBTYXR1cm5pbnVzLCB3aXRob3V0IHRoZWlyIGtub3dsZWRnZSBoZSBpbnRyb2R1Y2VkIFNhdHVybmludXMgaW50byB0aGUgaG91c2UgYnkgYW5vdGhlciBkb29yOyB0aGVuLCBwcmV0ZW5kaW5nIHRvIGJvdGggcGFydGllcyB0aGF0IGhlIGhhZCBhIGRpYXJyaG9lYSwgaGUgd291bGQgcnVuIGJhY2t3YXJkcyBhbmQgZm9yd2FyZHMgaW4gdGhlIGhvdXNlLCBub3cgdG8gdGhlIG5vYmxlcyBhbmQgbm93IHRvIFNhdHVybmludXMsIHRyeWluZyB0byBpcnJpdGF0ZSBhbmQgYnJpbmcgdGhlbSBpbnRvIGNvbGxpc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hlbiB0aGUgc2VuYXRlIGFuZCB0aGUga25pZ2h0cyBiZWdhbiB0byBjb21iaW5lIGFuZCBnaXZlIHV0dGVyYW5jZSB0byB0aGVpciBpbmRpZ25hdGlvbiwgaGUgbGVkIGhpcyBzb2xkaWVycyBpbnRvIHRoZSBmb3J1bSwgZm9yY2VkIHRoZSBpbnN1cmdlbnRzIHRvIHRha2UgcmVmdWdlIG9uIHRoZSBDYXBpdG9sLCBhbmQgY29tcGVsbGVkIHRoZW0gdG8gc3VycmVuZGVyIGZvciBsYWNrIG9mIHdhdGVyLiBGb3IgaGUgY3V0IG9mZiB0aGUgd2F0ZXItY29uZHVpdHM7IHdoZXJldXBvbiB0aGV5IGdhdmUgdXAgdGhlIHN0cnVnZ2xlLCBjYWxsZWQgTWFyaXVzLCBhbmQgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyBvbiB3aGF0IHdhcyBjYWxsZWQgdGhlIHB1YmxpYyBmYWl0aC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIGRpZCBhbGwgaGUgY291bGQgdG8gc2F2ZSB0aGUgbWVuLCBidXQgaXQgd2FzIG9mIG5vIGF2YWlsLCBhbmQgd2hlbiB0aGV5IGNhbWUgZG93biBpbnRvIHRoZSBmb3J1bSB0aGV5IHdlcmUgcHV0IHRvIGRlYXRoLiBUaGlzIGFmZmFpciBtYWRlIE1hcml1cyBvYm5veGlvdXMgYWxpa2UgdG8gdGhlIG5vYmxlcyBhbmQgdG8gdGhlIHBlb3BsZSwgYW5kIHdoZW4gdGhlIHRpbWUgZm9yIGVsZWN0aW5nIGNlbnNvcnMgY2FtZSBoZSBkaWQgbm90IHByZXNlbnQgaGltc2VsZiBhcyBhIGNhbmRpZGF0ZSwgYWx0aG91Z2ggZXZlcnlvbmUgZXhwZWN0ZWQgdGhhdCBoZSB3b3VsZCwgYnV0IGFsbG93ZWQgb3RoZXIgYW5kIGluZmVyaW9yIG1lbiB0byBiZSBlbGVjdGVkLCBmb3IgZmVhciB0aGF0IGhlIHdvdWxkIGJlIGRlZmVhdGVkLiBIb3dldmVyLCBoZSB0cmllZCB0byBwdXQgYSBnb29kIGZhY2UgdXBvbiBoaXMgY29uZHVjdCBieSBzYXlpbmcgdGhhdCBoZSB3YXMgdW53aWxsaW5nIHRvIGluY3VyIHRoZSBoYXRyZWQgb2YgbWFueSBjaXRpemVucyBieSBhIHNldmVyZSBleGFtaW5hdGlvbiBpbnRvIHRoZWlyIGxpdmVzIGFuZCBtYW5uZXJzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhIGRlY3JlZSB3YXMgaW50cm9kdWNlZCByZWNhbGxpbmcgTWV0ZWxsdXMgZnJvbSBleGlsZSwgTWFyaXVzIG9wcG9zZWQgaXQgc3Ryb25nbHkgYm90aCBieSB3b3JkIGFuZCBkZWVkLCBidXQgZmluZGluZyBoaXMgZWZmb3J0cyB2YWluLCBhdCBsYXN0IGRlc2lzdGVkOyBhbmQgYWZ0ZXIgdGhlIHBlb3BsZSBoYWQgYWRvcHRlZCB0aGUgbWVhc3VyZSB3aXRoIGFsYWNyaXR5LCB1bmFibGUgdG8gZW5kdXJlIHRoZSBzaWdodCBvZiBNZXRlbGx1cyByZXR1cm5pbmcsIGhlIHNldCBzYWlsIGZvciBDYXBwYWRvY2lhIGFuZCBHYWxhdGlhLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA5OSBCLkMuIDwvbm90ZT4gb3N0ZW5zaWJseSB0byBtYWtlIHRoZSBzYWNyaWZpY2VzIHdoaWNoIGhlIGhhZCB2b3dlZCB0byB0aGUgTW90aGVyIG9mIHRoZSBHb2RzLCBidXQgcmVhbGx5IGhhdmluZyBhbm90aGVyIHJlYXNvbiBmb3IgaGlzIGpvdXJuZXkgd2hpY2ggdGhlIHBlb3BsZSBkaWQgbm90IHN1c3BlY3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCwgdGhhdCBpcywgbm8gbmF0dXJhbCBhcHRpdHVkZSBmb3IgcGVhY2Ugb3IgY2l2aWwgbGlmZSwgYnV0IGhhZCByZWFjaGVkIGhpcyBlbWluZW5jZSBieSBhcm1zLiBBbmQgbm93LCB0aGlua2luZyB0aGF0IGhpcyBpbmZsdWVuY2UgYW5kIHJlcHV0YXRpb24gd2VyZSBncmFkdWFsbHkgZmFkaW5nIGF3YXkgYmVjYXVzZSBvZiBoaXMgaW5hY3Rpdml0eSBhbmQgcXVpZXR1ZGUsIGhlIHNvdWdodCBvY2Nhc2lvbnMgZm9yIG5ldyBlbnRlcnByaXNlcy4gRm9yIGhlIGhvcGVkIHRoYXQgaWYgaGUgc3RpcnJlZCB1cCB0aGUga2luZ3Mgb2YgQXNpYSBhbmQgaW5jaXRlZCBNaXRocmlkYXRlcyB0byBhY3Rpb24sIHdobyB3YXMgZXhwZWN0ZWQgdG8gbWFrZSB3YXIgdXBvbiBSb21lLCBoZSB3b3VsZCBhdCBvbmNlIGJlIGNob3NlbiB0byBsZWFkIHRoZSBSb21hbiBhcm1pZXMgYWdhaW5zdCBoaW0sIGFuZCB3b3VsZCBmaWxsIHRoZSBjaXR5IHdpdGggbmV3IHRyaXVtcGhzLCBhbmQgaGlzIG93biBob3VzZSB3aXRoIFBvbnRpYyBzcG9pbHMgYW5kIHJveWFsIHdlYWx0aC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCB0aG91Z2ggTWl0aHJpZGF0ZXMgdHJlYXRlZCBoaW0gd2l0aCBhbGwgZGVmZXJlbmNlIGFuZCByZXNwZWN0LCBoZSB3b3VsZCBub3QgYmVuZCBvciB5aWVsZCwgYnV0IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCBlaXRoZXIgc3RyaXZlIHRvIGJlIHN0cm9uZ2VyIHRoYW4gUm9tZSwgb3IgZG8gaGVyIGJpZGRpbmcgd2l0aG91dCBhIHdvcmQuPC9xPiBUaGlzIHNwZWVjaCBzdGFydGxlZCB0aGUga2luZywgd2hvIGhhZCBvZnRlbiBoZWFyZCB0aGUgUm9tYW4gc3BlZWNoLCBidXQgdGhlbiBmb3IgdGhlIGZpcnN0IHRpbWUgaW4gYWxsIGl0cyBib2xkbmVzcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uIHJldHVybmluZyB0byBSb21lLCBoZSBidWlsdCBhIGhvdXNlIGZvciBoaW1zZWxmIG5lYXIgdGhlIGZvcnVtLCBlaXRoZXIsIGFzIGhlIGhpbXNlbGYgc2FpZCwgYmVjYXVzZSBoZSB3YXMgdW53aWxsaW5nIHRoYXQgdGhvc2Ugd2hvIHBhaWQgdGhlaXIgcmVzcGVjdHMgdG8gaGltIHNob3VsZCBoYXZlIHRoZSB0cm91YmxlIG9mIGNvbWluZyBhIGxvbmcgZGlzdGFuY2UsIG9yIGJlY2F1c2UgaGUgdGhvdWdodCB0aGF0IGRpc3RhbmNlIHdhcyB0aGUgcmVhc29uIHdoeSBoZSBkaWQgbm90IGhhdmUgbGFyZ2VyIGNyb3dkcyBhdCBoaXMgZG9vciB0aGFuIG90aGVycy4gVGhlIHJlYXNvbiwgaG93ZXZlciwgd2FzIG5vdCBvZiB0aGlzIG5hdHVyZTsgaXQgd2FzIHJhdGhlciBoaXMgaW5mZXJpb3JpdHkgdG8gb3RoZXJzIGluIHRoZSBncmFjZXMgb2YgaW50ZXJjb3Vyc2UgYW5kIGluIHBvbGl0aWNhbCBoZWxwZnVsbmVzcywgd2hpY2ggY2F1c2VkIGhpbSB0byBiZSBuZWdsZWN0ZWQsIGxpa2UgYW4gaW5zdHJ1bWVudCBvZiB3YXIgaW4gdGltZSBvZiBwZWFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T2YgYWxsIHRob3NlIHdobyBlY2xpcHNlZCBoaW0gaW4gcG9wdWxhciBlc3RlZW0gaGUgd2FzIG1vc3QgdmV4ZWQgYW5kIGFubm95ZWQgYnkgU3VsbGEsIHdob3NlIHJpc2UgdG8gcG93ZXIgd2FzIGR1ZSB0byB0aGUgamVhbG91c3kgd2hpY2ggdGhlIG5vYmxlcyBmZWx0IHRvd2FyZHMgTWFyaXVzLCBhbmQgd2hvIHdhcyBtYWtpbmcgaGlzIHF1YXJyZWxzIHdpdGggTWFyaXVzIHRoZSBiYXNpcyBvZiBoaXMgcG9saXRpY2FsIGFjdGl2aXR5LiBBbmQgd2hlbiBCb2NjaHVzIHRoZSBOdW1pZGlhbiwgd2hvIGhhZCBiZWVuIGRlc2lnbmF0ZWQgYW4gYWxseSBvZiB0aGUgUm9tYW5zLCBzZXQgdXAgdHJvcGh5LWJlYXJpbmcgVmljdG9yaWVzIG9uIHRoZSBDYXBpdG9sLCBhbmQgYnkgdGhlaXIgc2lkZSBnaWxkZWQgZmlndXJlcyByZXByZXNlbnRpbmcgSnVndXJ0aGEgc3VycmVuZGVyZWQgYnkgaGltIHRvIFN1bGxhLCBNYXJpdXMgd2FzIHRyYW5zcG9ydGVkIHdpdGggcmFnZSBhbmQgZnVyeSB0byBzZWUgU3VsbGEgdGh1cyBhcHByb3ByaWF0aW5nIHRvIGhpbXNlbGYgdGhlIGdsb3J5IG9mIGhpcyBhY2hpZXZlbWVudHMsIGFuZCB3YXMgbWFraW5nIHByZXBhcmF0aW9ucyB0byB0ZWFyIGRvd24gdGhlIHZvdGl2ZSBvZmZlcmluZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSB0b28gd2FzIGZ1cmlvdXMsIGFuZCBjaXZpbCBkaXNzZW5zaW9uIHdhcyBqdXN0IG9uIHRoZSBwb2ludCBvZiBicmVha2luZyBvdXQsIHdoZW4gaXQgd2FzIHN0b3BwZWQgYnkgdGhlIFNvY2lhbCBXYXIsIHdoaWNoIHN1ZGRlbmx5IGJ1cnN0IHVwb24gdGhlIGNpdHkuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjkwLTg5IEIuQy4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gNi4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TdWxsYSA8L3RpdGxlPiwgdmkuIDEgZi4gPC9iaWJsPiAKICAgICAgICAgICAgPC9ub3RlPiBUaGF0IGlzLCB0aGUgbW9zdCB3YXJsaWtlIGFuZCBtb3N0IG51bWVyb3VzIG9mIHRoZSBJdGFsaWFuIHBlb3BsZXMgY29tYmluZWQgYWdhaW5zdCBSb21lLCBhbmQgY2FtZSB3aXRoaW4gYSBsaXR0bGUgb2YgZGVzdHJveWluZyBoZXIgc3VwcmVtYWN5LCBzaW5jZSB0aGV5IHdlcmUgbm90IG9ubHkgc3Ryb25nIGluIGFybXMgYW5kIG1lbiwgYnV0IGFsc28gaGFkIGdlbmVyYWxzIHdob3NlIGRhcmluZyBhbmQgYWJpbGl0eSB3ZXJlIGFtYXppbmcgYW5kIG1hZGUgdGhlbSBhIG1hdGNoIGZvciB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGlzIHdhciwgd2hpY2ggd2FzIHZhcmllZCBpbiBpdHMgZXZlbnRzIGFuZCBtb3N0IGNoYW5nZWZ1bCBpbiBpdHMgZm9ydHVuZXMsIGFkZGVkIG11Y2ggdG8gU3VsbGEncyByZXB1dGF0aW9uIGFuZCBwb3dlciwgYnV0IHRvb2sgYXdheSBhcyBtdWNoIGZyb20gTWFyaXVzLiBGb3IgaGUgd2FzIHNsb3cgaW4gbWFraW5nIGhpcyBhdHRhY2tzLCBhbmQgYWx3YXlzIGdpdmVuIHRvIGhlc2l0YXRpb24gYW5kIGRlbGF5LCB3aGV0aGVyIGl0IHdhcyB0aGF0IG9sZCBhZ2UgaGFkIHF1ZW5jaGVkIGhpcyB3b250ZWQgZW5lcmd5IGFuZCBmaXJlIChmb3IgaGUgd2FzIG5vdyBwYXN0IGhpcyBzaXh0eS1zaXh0aCB5ZWFyKSwgb3IgdGhhdCwgYXMgaGUgaGltc2VsZiBzYWlkLCBhIGZlZWxpbmcgb2Ygc2hhbWUgbGVkIGhpbSB0byBnbyBiZXlvbmQgaGlzIHBvd2VycyBpbiB0cnlpbmcgdG8gZW5kdXJlIHRoZSBoYXJkc2hpcHMgb2YgdGhlIGNhbXBhaWduIHdoZW4gaGlzIG5lcnZlcyB3ZXJlIGRpc2Vhc2VkIGFuZCBoaXMgYm9keSB1bmZpdCBmb3Igd29yay4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgZXZlbiB0aGVuIGhlIHdvbiBhIGdyZWF0IHZpY3RvcnkgaW4gd2hpY2ggaGUgc2xldyBzaXggdGhvdXNhbmQgb2YgdGhlIGVuZW15OyBhbmQgaGUgbmV2ZXIgYWxsb3dlZCB0aGVtIHRvIGdldCBhIGdyaXAgdXBvbiBoaW0sIGJ1dCBldmVuIHdoZW4gaGUgd2FzIGhlbW1lZCBhYm91dCB3aXRoLXRyZW5jaGVzIGJpZGVkIGhpcyB0aW1lLCBhbmQgd2FzIG5vdCB1bmR1bHkgaXJyaXRhdGVkIGJ5IHRoZWlyIGluc3VsdHMgYW5kIGNoYWxsZW5nZXMuIFdlIGFyZSB0b2xkIHRoYXQgUHVibGl1cyBTaWxvLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qb21wYWVkaXVzIFNpbG8sIGxlYWRlciBvZiB0aGUgTWFyc2kuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDIuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byBNaW5vciA8L3RpdGxlPiwgaWkuIDEtNCA8L2JpYmw+LiA8L25vdGU+IHdobyBoYWQgdGhlIGdyZWF0ZXN0IGF1dGhvcml0eSBhbmQgcG93ZXIgYW1vbmcgdGhlIGVuZW15LCBvbmNlIHNhaWQgdG8gaGltLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRob3UgYXJ0IGEgZ3JlYXQgZ2VuZXJhbCwgTWFyaXVzLCBjb21lIGRvd24gYW5kIGZpZ2h0IGl0IG91dCB3aXRoIHVzPC9xPjsgdG8gd2hpY2ggTWFyaXVzIGFuc3dlcmVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgYnV0IGRvIHRob3UsIGlmIHRob3UgYXJ0IGEgZ3JlYXQgZ2VuZXJhbCwgZm9yY2UgbWUgdG8gZmlnaHQgaXQgb3V0IHdpdGggeW91IGFnYWluc3QgbXkgd2lsbC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGF0IGFub3RoZXIgdGltZSwgd2hlbiB0aGUgZW5lbXkgaGFkIGdpdmVuIGhpbSBhbiBvcHBvcnR1bml0eSB0byBhdHRhY2sgdGhlbSwgYnV0IHRoZSBSb21hbnMgaGFkIHBsYXllZCB0aGUgY293YXJkLCBhbmQgYm90aCBzaWRlcyBoYWQgd2l0aGRyYXduLCBoZSBjYWxsZWQgYW4gYXNzZW1ibHkgb2YgaGlzIHNvbGRpZXJzIGFuZCBzYWlkIHRvIHRoZW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBkbyBub3Qga25vdyB3aGV0aGVyIHRvIGNhbGwgdGhlIGVuZW15IG9yIHlvdSB0aGUgZ3JlYXRlciBjb3dhcmRzOyBmb3IgdGhleSB3ZXJlIG5vdCBhYmxlIHRvIHNlZSB5b3VyIGJhY2tzLCBub3IgeW91IHRoZWlyIG5hcGVzLjwvcT4gQXQgbGFzdCwgaG93ZXZlciwgaGUgZ2F2ZSB1cCBoaXMgY29tbWFuZCwgb24gdGhlIGdyb3VuZCB0aGF0IGhpcyBpbmZpcm1pdGllcyBtYWRlIGhpbSBxdWl0ZSBpbmNhcGFibGUgb2YgZXhlcmNpc2luZyBpdC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IHdoZW4gdGhlIEl0YWxpYW5zIGhhZCBhdCBsYXN0IG1hZGUgdGhlaXIgc3VibWlzc2lvbiwgYW5kIG1hbnkgcGVyc29ucyBhdCBSb21lIHdlcmUgc3VpbmcgZm9yIHRoZSBjb21tYW5kIGluIHRoZSBNaXRocmlkYXRpYyB3YXIsIHdpdGggdGhlIGFpZCBvZiB0aGUgcG9wdWxhciBsZWFkZXJzLCBjb250cmFyeSB0byBhbGwgZXhwZWN0YXRpb24gdGhlIHRyaWJ1bmUgU3VscGljaXVzLCBhIG1vc3QgYXVkYWNpb3VzIG1hbjsgYnJvdWdodCBNYXJpdXMgZm9yd2FyZCBhbmQgcHJvcG9zZWQgdG8gbWFrZSBoaW0gcHJvLWNvbnN1bCBpbiBjb21tYW5kIGFnYWluc3QgTWl0aHJpZGF0ZXMuIFRoZSBwZW9wbGUgd2VyZSBkaXZpZGVkIGluIG9waW5pb24sIHNvbWUgcHJlZmVycmluZyBNYXJpdXMsIGFuZCBvdGhlcnMgY2FsbGluZyBmb3IgU3VsbGEgYW5kIGJpZGRpbmcgTWFyaXVzIGdvIHRvIHRoZSB3YXJtIGJhdGhzIGF0IEJhaWFlIGFuZCBsb29rIG91dCBmb3IgaGlzIGhlYWx0aCwgc2luY2UgaGUgd2FzIHdvcm4gb3V0IHdpdGggb2xkIGFnZSBhbmQgcmhldW1zLCBhcyBoZSBoaW1zZWxmIHNhaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhdCBCYWlhZSwgbmVhciBDYXBlIE1pc2VudW0sIE1hcml1cyBvd25lZCBhbiBleHBlbnNpdmUgaG91c2UsIHdoaWNoIGhhZCBhcHBvaW50bWVudHMgbW9yZSBsdXh1cmlvdXMgYW5kIGVmZmVtaW5hdGUgdGhhbiBiZWNhbWUgYSBtYW4gd2hvIGhhZCB0YWtlbiBhY3RpdmUgcGFydCBpbiBzbyBtYW55IHdhcnMgYW5kIGNhbXBhaWducy4gVGhpcyBob3VzZSwgd2UgYXJlIHRvbGQsIENvcm5lbGlhIGJvdWdodCBmb3Igc2V2ZW50eS1maXZlIHRob3VzYW5kIGRyYWNobWFzOyBhbmQgbm90IGxvbmcgYWZ0ZXJ3YXJkcyBMdWNpdXMgTHVjdWxsdXMgcHVyY2hhc2VkIGl0IGZvciB0d28gbWlsbGlvbiBmaXZlIGh1bmRyZWQgdGhvdXNhbmQuIFNvIHF1aWNrbHkgZGlkIGxhdmlzaCBleHBlbmRpdHVyZSBzcHJpbmcgdXAsIGFuZCBzbyBncmVhdCBhbiBpbmNyZWFzZSBpbiBsdXh1cnkgZGlkIGxpZmUgaW4gdGhlIGNpdHkgdGFrZSBvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzLCBob3dldmVyLCBzaG93aW5nIGEgc3Bpcml0IG9mIGtlZW4gZW11bGF0aW9uIHRoYXQgbWlnaHQgaGF2ZSBjaGFyYWN0ZXJpemVkIGEgeW91dGgsIHNob29rIG9mZiBvbGQgYWdlIGFuZCBpbmZpcm1pdHkgYW5kIHdlbnQgZG93biBkYWlseSBpbnRvIHRoZS4gQ2FtcHVzIE1hcnRpdXMsIHdoZXJlIGhlIGV4ZXJjaXNlZCBoaW1zZWxmIHdpdGggdGhlIHlvdW5nIG1lbiBhbmQgc2hvd2VkIHRoYXQgaGUgd2FzIHN0aWxsIGFnaWxlIGluIGFybXMgYW5kIGNhcGFibGUgb2YgZmVhdHMgb2YgaG9yc2VtYW5zaGlwLCBhbHRob3VnaCBoaXMgYnVsayB3YXMgbm90IHdlbGwgc2V0IHVwIGluIGhpcyBvbGQgYWdlLCBidXQgcmFuIHRvIGNvcnB1bGVuY2UgYW5kIHdlaWdodC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIHRoZW4sIHdlcmUgcGxlYXNlZCB0byBoYXZlIGhpbSB0aHVzIGVuZ2FnZWQsIGFuZCB3b3VsZCBnbyBkb3duIGludG8gdGhlIENhbXB1cyBhbmQgd2l0bmVzcyBoaXMgZW11bGF0aW9uIGluIGNvbXBldGl0aXZlIGNvbnRlc3RzOyBidXQgdGhlIGJldHRlciBwYXJ0IHdlcmUgbW92ZWQgdG8gcGl0eSBhdCB0aGUgc2lnaHQgb2YgaGlzIGdyZWVkIGFuZCBhbWJpdGlvbiwgYmVjYXVzZSwgdGhvdWdoIGhlIGhhZCByaXNlbiBmcm9tIHBvdmVydHkgdG8gdGhlIGdyZWF0ZXN0IHdlYWx0aCBhbmQgZnJvbSBvYnNjdXJpdHkgdG8gdGhlIGhpZ2hlc3QgcGxhY2UsIGhlIGtuZXcgbm90IGhvdyB0byBzZXQgYm91bmRzIHRvIGhpcyBnb29kIGZvcnR1bmUsIGFuZCB3YXMgbm90IGNvbnRlbnQgdG8gYmUgYWRtaXJlZCBhbmQgZW5qb3kgcXVpZXRseSB3aGF0IGhlIGhhZCwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGFzIGlmIGluIG5lZWQgb2YgYWxsIHRoaW5ncywgYW5kIGFmdGVyIHdpbm5pbmcgdHJpdW1waHMgYW5kIGZhbWUsIHdhcyBzZXR0aW5nIG91dCwgd2l0aCBhbGwgaGlzIHllYXJzIHVwb24gaGltLCBmb3IgQ2FwcGFkb2NpYSBhbmQgdGhlIEV1eGluZSBzZWEsIHRvIGZpZ2h0IGl0IG91dCB3aXRoIEFyY2hlbGHDvHMgYW5kIE5lb3B0b2xlbXVzLHRoZSBzYXRyYXBzIG9mIE1pdGhyaWRhdGVzLiBBbmQgdGhlIGp1c3RpZmljYXRpb24gZm9yIHRoaXMgd2hpY2ggTWFyaXVzIG9mZmVyZWQgd2FzIHRob3VnaHQgdG8gYmUgYWx0b2dldGhlciBzaWxseTsgaGUgc2FpZCwgbmFtZWx5LCB0aGF0IGhlIHdpc2hlZCB0byB0YWtlIHBhcnQgcGVyc29uYWxseSBpbiB0aGUgY2FtcGFpZ24gaW4gb3JkZXIgdG8gZ2l2ZSBoaXMgc29uIGEgbWlsaXRhcnkgdHJhaW5pbmcuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCVRoZXNlIHRoaW5ncyBicm91Z2h0IHRvIGEgaGVhZCB0aGUgc2VjcmV0IGRpc2Vhc2UgZnJvbSB3aGljaCB0aGUgc3RhdGUgaGFkIGxvbmcgYmVlbiBzdWZmZXJpbmcsIGFuZCBNYXJpdXMgZm91bmQgYSBtb3N0IHN1aXRhYmxlIGluc3RydW1lbnQgZm9yIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgY29tbW9ud2VhbHRoIGluIHRoZSBhdWRhY2l0eSBvZiBTdWxwaWNpdXMsIHdobyB3YXMgaW4gYWxsIHRoaW5ncyBhbiBhZG1pcmVyIGFuZCBhbiBpbWl0YXRvciBvZiBTYXR1cm5pbnVzLCBleGNlcHQgdGhhdCBoZSBjaGFyZ2VkIGhpbSB3aXRoIHRpbWlkaXR5IGFuZCBoZXNpdGF0aW9uIGluIGhpcyBwb2xpdGljYWwgbWVhc3VyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1bHBpY2l1cyBoaW1zZWxmIHdhcyBub3QgYSBtYW4gb2YgaGVzaXRhdGlvbiwgYnV0IGtlcHQgc2l4IGh1bmRyZWQgb2YgdGhlIEtuaWdodHMgYWJvdXQgaGltIGFzIGEgYm9keS1ndWFyZCwgd2hpY2ggaGUgY2FsbGVkIGhpcyBhbnRpLXNlbmF0ZTsgaGUgYWxzbyBtYWRlIGFuIGF0dGFjayB3aXRoIGFybWVkIG1lbiB1cG9uIHRoZSBjb25zdWxzIGFzIHRoZXkgd2VyZSBob2xkaW5nIGFuIGFzc2VtYmx5LCBhbmQgd2hlbiBvbmUgb2YgdGhlbSBmbGVkIGZyb20gdGhlIGZvcnVtLCBTdWxwaWNpdXMgc2VpemVkIGhpcyBzb24gYW5kIGJ1dGNoZXJlZCBoaW07IFN1bGxhLCBob3dldmVyLCB0aGUgb3RoZXIgY29uc3VsLCBhcyBoZSB3YXMgYmVpbmcgcHVyc3VlZCBwYXN0IHRoZSBob3VzZSBvZiBNYXJpdXMsIGRpZCB3aGF0IG5vIG9uZSB3b3VsZCBoYXZlIGV4cGVjdGVkIGFuZCBidXJzdCBpbnRvIHRoZSBob3VzZS4gSGlzIHB1cnN1ZXJzIHJhbiBwYXN0IHRoZSBob3VzZSBhbmQgdGhlcmVmb3JlIG1pc3NlZCBoaW0sIGFuZCBpdCBpcyBzYWlkIHRoYXQgTWFyaXVzIGhpbXNlbGYgc2VudCBoaW0gb2ZmIHNhZmVseSBieSBhbm90aGVyIGRvb3Igc28gdGhhdCBoZSBjYW1lIGluIGhhc3RlIHRvIGhpcyBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3VsbGEgaGltc2VsZiwgaW4gaGlzIE1lbW9pcnMsIHNheXMgaGUgZGlkIG5vdCBmbHkgZm9yIHJlZnVnZSB0byB0aGUgaG91c2Ugb2YgTWFyaXVzLCBidXQgd2l0aGRyZXcgdGhpdGhlciBpbiBvcmRlciB0byBjb25zdWx0IHdpdGggTWFyaXVzIGFib3V0IHRoZSBzdGVwIHdoaWNoIFN1bHBpY2l1cyB3YXMgdHJ5aW5nIHRvIGZvcmNlIGhpbSB0byB0YWtlIChieSBzdXJyb3VuZGluZyBoaW0gd2l0aCBkcmF3biBzd29yZHMgYW5kIGRyaXZpbmcgaGltIHRvIHRoZSBob3VzZSBvZiBNYXJpdXMpLCBhbmQgdGhhdCBmaW5hbGx5IGhlIHdlbnQgZnJvbSB0aGVyZSB0byB0aGUgZm9ydW0gYW5kIHJlc2NpbmRlZCB0aGUgY29uc3VsYXIgZGVjcmVlIGZvciB0aGUgc3VzcGVuc2lvbiBvZiBwdWJsaWMgYnVzaW5lc3MsIGFzIFN1bHBpY2l1cyBhbmQgaGlzIHBhcnR5IGRlbWFuZGVkLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVzZSBwcm9jZWVkaW5ncyBhcmUgbXVjaCBtb3JlIGNsZWFybHkgbmFycmF0ZWQgaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA4LjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPlN1bGxhIDwvdGl0bGU+LCBjaGFwdGVyIHZpaWkgPC9iaWJsPi4gQ2YuIGFsc28gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS43LjU1IiB2YWxpZD0ieWVzIj5BcHBpYW4gPHRpdGxlPkJlbGwuIENpdiA8L3RpdGxlPiBpLiA1NSA8L2JpYmw+LiA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIGhhZCBiZWVuIGRvbmUsIFN1bHBpY2l1cywgd2hvIHdhcyBub3cgbWFzdGVyIG9mIHRoZSBzaXR1YXRpb24sIGdvdCB0aGUgY29tbWFuZCBjb25mZXJyZWQgdXBvbiBNYXJpdXMgYnkgdm90ZSBvZiB0aGUgcGVvcGxlOyBhbmQgTWFyaXVzLCB3aG8gd2FzIG1ha2luZyBoaXMgcHJlcGFyYXRpb25zIGZvciBkZXBhcnR1cmUsIHNlbnQgb3V0IHR3byBtaWxpdGFyeSB0cmlidW5lcyB0byB0YWtlIG92ZXIgdGhlIGNvbW1hbmQgb2YgU3VsbGEncyBhcm15LiBTdWxsYSwgaG93ZXZlciwgY2FsbGVkIHVwb24gaGlzIHNvbGRpZXJzICh3aG8gd2VyZSBubyBmZXdlciB0aGFuIHRoaXJ0eS1maXZlIHRob3VzYW5kIGxlZ2lvbmFyaWVzKSB0byByZXNlbnQgdGhpcywgYW5kIGxlZCB0aGVtIGZvcnRoIGFnYWluc3QgUm9tZS4gSGlzIHNvbGRpZXJzIGFsc28gZmVsbCB1cG9uIHRoZSB0cmlidW5lcyB3aG9tIE1hcml1cyBoYWQgc2VudCBhbmQgc2xldyB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzLCB0b28sIHB1dCB0byBkZWF0aCBtYW55IG9mIFN1bGxhJ3MgZnJpZW5kcyBpbiBSb21lLCBhbmQgcHJvY2xhaW1lZCBmcmVlZG9tIHRvIHRoZSBzbGF2ZXMgaWYgdGhleSB3b3VsZCBmaWdodCBvbiBoaXMgc2lkZS4gSXQgaXMgc2FpZCwgaG93ZXZlciwgdGhhdCBvbmx5IHRocmVlIG9mIHRoZW0gam9pbmVkIGhpcyByYW5rcywgYW5kIGFmdGVyIGEgZmVlYmxlIHJlc2lzdGFuY2UgdG8gU3VsbGEncyBlbnRyeSBpbnRvIHRoZSBjaXR5IGhlIHdhcyBzcGVlZGlseSBkcml2ZW4gb3V0IGFuZCB0b29rIHRvIGZsaWdodC4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTEuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGU+U3VsbGEgPC90aXRsZT4sIGNoYXB0ZXIgeGkgPC9iaWJsPi4gPC9ub3RlPiBBcyBzb29uIGFzIGhlIGhhZCBtYWRlIGhpcyBlc2NhcGUgZnJvbSB0aGUgY2l0eSBoaXMgY29tcGFuaW9ucyB3ZXJlIHNjYXR0ZXJlZCwgYW5kIHNpbmNlIGl0IHdhcyBkYXJrLCBoZSB0b29rIHJlZnVnZSBhdCBvbmUgb2YgaGlzIGZhcm1zdGVhZHMsIGNhbGxlZCBTb2xvbml1bS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBzZW50IGhpcyBzb24gdG8gZ2V0IHByb3Zpc2lvbnMgZnJvbSB0aGUgZXN0YXRlIG9mIGhpcyBmYXRoZXItaW4tbGF3LCBNdWNpdXMsIHdoaWNoIHdhcyBub3QgZmFyIG9mZiwgd2hpbGUgaGUgaGltc2VsZiB3ZW50IGRvd24gdG8gdGhlIGNvYXN0IGF0IE9zdGlhLCB3aGVyZSBhIGZyaWVuZCBvZiBoaXMsIE51bWVyaXVzLCBoYWQgcHJvdmlkZWQgYSB2ZXNzZWwgZm9yIGhpbS4gVGhlbiwgd2l0aG91dCB3YWl0aW5nIGZvciBoaXMgc29uLCBidXQgdGFraW5nIGhpcyBzdGVwLXNvbiBHcmFuaXVzIHdpdGggaGltLCBoZSBzZXQgc2FpbC4gVGhlIHlvdW5nZXIgTWFyaXVzIHJlYWNoZWQgdGhlIGVzdGF0ZSBvZiBNdWNpdXMsIGJ1dCBhcyBoZSB3YXMgZ2V0dGluZyBzdXBwbGllcyBhbmQgcGFja2luZyB0aGVtIHVwLCBkYXkgb3ZlcnRvb2sgaGltIGFuZCBoZSBkaWQgbm90IGFsdG9nZXRoZXIgZXNjYXBlIHRoZSB2aWdpbGFuY2Ugb2YgaGlzIGVuZW1pZXM7IGZvciBzb21lIGhvcnNlbWVuIGNhbWUgcmlkaW5nIHRvd2FyZHMgdGhlIHBsYWNlLCBtb3ZlZCBieSBzdXNwaWNpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG92ZXJzZWVyIG9mIHRoZSBmYXJtIHNhdyB0aGVtIGNvbWluZywgaGUgaGlkIE1hcml1cyBpbiBhIHdhZ2dvbiBsb2FkZWQgd2l0aCBiZWFucywgeW9rZWQgdXAgaGlzIG94ZW4sIGFuZCBtZXQgdGhlIGhvcnNlbWVuIGFzIGhlIHdhcyBkcml2aW5nIHRoZSB3YWdnb24gdG8gdGhlIGNpdHkuIEluIHRoaXMgd2F5IHlvdW5nIE1hcml1cyB3YXMgY29udmV5ZWQgdG8gdGhlIGhvdXNlIG9mIGhpcyB3aWZlLCB3aGVyZSBoZSBnb3Qgd2hhdCBoZSB3YW50ZWQsIGFuZCB0aGVuIGJ5IG5pZ2h0IGNhbWUgdG8gdGhlIHNlYSwgYm9hcmRlZCBhIHNoaXAgdGhhdCB3YXMgYm91bmQgZm9yIEFmcmljYSwgYW5kIGNyb3NzZWQgb3Zlci4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbGRlciBNYXJpdXMsIGFmdGVyIHB1dHRpbmcgdG8gc2VhIHdhcyBib3JuZSBieSBhIGZhdm91cmluZyB3aW5kIGFsb25nIHRoZSBjb2FzdCBvZiBJdGFseTsgYnV0IHNpbmNlIGhlIHdhcyBhZnJhaWQgb2Ygb25lIEdlbWluaXVzLCB3aG8gd2FzIGEgcG93ZXJmdWwgbWFuIGluIFRlcnJhY2luYSBhbmQgYW4gZW5lbXkgb2YgaGlzLCBoZSB0b2xkIGhpcyBzYWlsb3JzIHRvIGtlZXAgY2xlYXIgb2YgVGVycmFjaW5hLiBUaGUgc2FpbG9ycyB3ZXJlIHdpbGxpbmcgZW5vdWdoIHRvIGRvIGFzIGhlIHdpc2hlZCwgYnV0IHRoZSB3aW5kIHZlZXJlZCByb3VuZCBhbmQgYmxldyB0b3dhcmRzIHRoZSBzaG9yZSwgYnJpbmdpbmcgaW4gYSBoZWF2eSBzdXJnZSwgYW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgdGhlIHZlc3NlbCB3b3VsZCBub3QgaG9sZCBvdXQgYWdhaW5zdCB0aGUgYmVhdGluZyBvZiB0aGUgd2F2ZXMgYmVzaWRlcywgTWFyaXVzIHdhcyBpbiBhIHdyZXRjaGVkIHBsaWdodCBmcm9tIHNlYS1zaWNrbmVzcywgYW5kIHRoZXJlZm9yZSB0aGV5IG1hZGUgdGhlaXIgd2F5LCB0aG91Z2ggd2l0aCBkaWZmaWN1bHR5LCB0byB0aGUgY29hc3QgbmVhciBDaXJjZWlpLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBhcyB0aGUgc3Rvcm0gd2FzIGluY3JlYXNpbmcgYW5kIHRoZWlyIHByb3Zpc2lvbnMgd2VyZSBmYWlsaW5nLCB0aGV5IGxhbmRlZCBmcm9tIHRoZSB2ZXNzZWwgYW5kIHdhbmRlcmVkIGFib3V0LiBUaGV5IGhhZCBubyBkZWZpbml0ZSBvYmplY3QgaW4gdmlldywgYnV0LCBhcyBpcyB1c3VhbCBpbiBjYXNlcyBvZiBncmVhdCBwZXJwbGV4aXR5LCBzb3VnaHQgYWx3YXlzIHRvIGVzY2FwZSB0aGUgcHJlc2VudCBldmlsIGFzIHRoZSBtb3N0IGdyaWV2b3VzIGFuZCBmaXhlZCB0aGVpciBob3BlcyBvbiB0aGUgdW5rbm93biBmdXR1cmUuIEZvciB0aGUgbGFuZCB3YXMgdGhlaXIgZW5lbXksIGFuZCB0aGUgc2VhIGFuIGVuZW15IGFzIHdlbGw7IHRoZXkgd2VyZSBhZnJhaWQgdGhleSBtaWdodCBmYWxsIGluIHdpdGggbWVuLCBhbmQgdGhleSB3ZXJlIGFmcmFpZCB0aGV5IG1pZ2h0IG5vdCBmYWxsIGluIHdpdGggbWVuIGJlY2F1c2UgdGhleSBoYWQgbm8gcHJvdmlzaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgbGF0ZSBpbiB0aGUgZGF5IHRoZXkgY2FtZSB1cG9uIGEgZmV3IGhlcmRzbWVuOyB0aGVzZSBoYWQgbm90aGluZyB0byBnaXZlIHRoZW0gaW4gdGhlaXIgbmVlZCwgYnV0IHRoZXkgcmVjb2duaXplZCBNYXJpdXMgYW5kIGJhZGUgaGltIGdvIGF3YXkgYXMgZmFzdCBhcyBoZSBjb3VsZDsgZm9yIGEgbGl0dGxlIHdoaWxlIGJlZm9yZSBudW1lcm91cyBob3JzZW1lbiBoYWQgYmVlbiBzZWVuIHJpZGluZyBhYm91dCB0aGVyZSBpbiBzZWFyY2ggb2YgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGF0IGhpcyB3aXRzJyBlbmQsIGFuZCwgd2hhdCB3YXMgd29yc3Qgb2YgYWxsLCBoaXMgY29tcGFuaW9ucyBmYWludGluZyB3aXRoIGh1bmdlciwgaGUgdHVybmVkIGFzaWRlIGZvciB0aGUgd2hpbGUgZnJvbSB0aGUgcm9hZCwgcGx1bmdlZCBpbnRvIGEgZGVlcCBmb3Jlc3QsIGFuZCB0aGVyZSBzcGVudCB0aGUgbmlnaHQgaW4gZ3JlYXQgZGlzdHJlc3MuIEJ1dCB0aGUgbmV4dCBkYXksIGNvbXBlbGxlZCBieScgd2FudCwgYW5kIHdpc2hpbmcgdG8gbWFrZSB1c2Ugb2YgaGlzIHN0cmVuZ3RoIGJlZm9yZSBpdCBmYWlsZWQgaGltIGFsdG9nZXRoZXIsIGhlIHdhbmRlcmVkIGFsb25nIHRoZSBzaG9yZSwgdHJ5aW5nIHRvIGVuY291cmFnZSBoaXMgY29tcGFuaW9ucywgYW5kIGJlZ2dpbmcgdGhlbSBub3QgdG8gZ2l2ZSB1cCB0aGUgc3RydWdnbGUgYmVmb3JlIGhpcyBsYXN0IGhvcGUgY291bGQgYmUgcmVhbGl6ZWQsIGZvciB3aGljaCBoZSB3YXMgc3RpbGwgcmVzZXJ2aW5nIGhpbXNlbGYgaW4gcmVsaWFuY2Ugb24gYW5jaWVudCBwcm9waGVjaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCB0aGF0IGlzLCBoZSB3YXMgcXVpdGUgeW91bmcgYW5kIGxpdmluZyBpbiB0aGUgY291bnRyeSwgaGUgaGFkIGNhdWdodCBpbiBoaXMgY2xvYWsgYSBmYWxsaW5nIGVhZ2xlJ3MgbmVzdCwgd2hpY2ggaGFkIHNldmVuIHlvdW5nIG9uZXMgaW4gaXQ7IGF0IHNpZ2h0IG9mIHRoaXMsIGhpcyBwYXJlbnRzIHdlcmUgYW1hemVkLCBhbmQgbWFkZSBlbnF1aXJpZXMgb2YgdGhlIHNlZXJzLCB3aG8gdG9sZCB0aGVtIHRoYXQgdGhlaXIgc29uIHdvdWxkIGJlIG1vc3QgaWxsdXN0cmlvdXMgb2YgbWVuLCBhbmQgd2FzIGRlc3RpbmVkIHRvIHJlY2VpdmUgdGhlIGhpZ2hlc3QgY29tbWFuZCBhbmQgcG93ZXIgc2V2ZW4gdGltZXMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIHNheSB0aGF0IHRoaXMgcmVhbGx5IGhhcHBlbmVkIHRvIE1hcml1czsgYnV0IG90aGVycyBzYXkgdGhhdCB0aG9zZSB3aG8gaGVhcmQgdGhlIHN0b3J5IGZyb20gaGltIGF0IHRoaXMgdGltZSBhbmQgZHVyaW5nIHRoZSByZXN0IG9mIGhpcyBmbGlnaHQsIGJlbGlldmVkIGl0LCBhbmQgcmVjb3JkZWQgaXQsIHRob3VnaCBpdCB3YXMgd2hvbGx5IGZhYnVsb3VzLiBGb3IsIHRoZXkgc2F5LCBhbiBlYWdsZSBkb2VzIG5vdCBsYXkgbW9yZSB0aGFuIHR3byBlZ2dzIGF0IG9uZSB0aW1lLCBhbmQgTXVzYWV1cyBhbHNvIHdhcyB3cm9uZyB3aGVuLCBzcGVha2luZyBvZiB0aGUgZWFnbGUsIGhlIHNheXM6IAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5UaHJlZSBpbmRlZWQgc2hlIGxheWV0aCwgYW5kIHR3byBoYXRjaGV0aCwgYnV0IG9uZSBvbmx5IGRvdGggc2hlIGZlZWQuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgMjEgKEtpbmtlbCwgPHRpdGxlPkVwLiBHcmFlYy4gRnJhZy4gPC90aXRsZT4sIHAuIDIyOSkuIDwvbm90ZT4KCQkJCUhvd2V2ZXIsIHRoYXQgTWFyaXVzLCBkdXJpbmcgaGlzIGZsaWdodCBhbmQgaW4gaGlzIGV4dHJlbWVzdCBkaWZmaWN1bHRpZXMsIG9mdGVuIHNhaWQgdGhhdCBoZSBzaG91bGQgYXR0YWluIHRvIGEgc2V2ZW50aCBjb25zdWxzaGlwLCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgcHJlc2VudGx5LCB3aGVuIHRoZXkgd2VyZSBhYm91dCB0d2VudHkgZnVybG9uZ3MgZGlzdGFudCBmcm9tIE1pbnR1cm5hZSwgYW4gSXRhbGlhbiBjaXR5LCB0aGV5IHNhdyBmcm9tIGFmYXIgYSB0cm9vcCBvZiBob3JzZW1lbiByaWRpbmcgdG93YXJkcyB0aGVtLCBhbmQgYWxzbywgYXMgaXQgY2hhbmNlZCwgdHdvIG1lcmNoYW50IHZlc3NlbHMgc2FpbGluZyBhbG9uZy4gQWNjb3JkaW5nbHksIHdpdGggYWxsIHRoZSBzcGVlZCBhbmQgc3RyZW5ndGggdGhleSBoYWQsIHRoZXkgcmFuIGRvd24gdG8gdGhlIHNlYSwgdGhyZXcgdGhlbXNlbHZlcyBpbnRvIHRoZSB3YXRlciwgYW5kIGJlZ2FuIHRvIHN3aW0gdG8gdGhlIHNoaXBzLiBHcmFuaXVzIGFuZCBoaXMgcGFydHkgcmVhY2hlZCBvbmUgb2YgdGhlIHNoaXBzIGFuZCBjcm9zc2VkIG92ZXIgdG8gdGhlIG9wcG9zaXRlIGlzbGFuZCwgQWVuYXJpYSBieSBuYW1lOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMgaGltc2VsZjsgd2hvIHdhcyBoZWF2eSBhbmQgdW53aWVsZHksIHR3byBzbGF2ZXMgd2l0aCB0b2lsIGFuZCBkaWZmaWN1bHR5IGhlbGQgYWJvdmUgd2F0ZXIgYW5kIHB1dCBpbnRvIHRoZSBvdGhlciBzaGlwLCB0aGUgaG9yc2VtZW4gYmVpbmcgbm93IGF0IGhhbmQgYW5kIGNhbGxpbmcgb3V0IGZyb20gdGhlIHNob3JlIHRvIHRoZSBzYWlsb3JzIGVpdGhlciB0byBicmluZyB0aGUgdmVzc2VsIHRvIHNob3JlIG9yIHRvIHRocm93IE1hcml1cyBvdmVyYm9hcmQgYW5kIHNhaWwgd2hpdGhlciB0aGV5IHBsZWFzZWQuIEJ1dCBzaW5jZSBNYXJpdXMgc3VwcGxpY2F0ZWQgdGhlbSB3aXRoIHRlYXJzIGluIGhpcyBleWVzLCB0aGUgbWFzdGVycyBvZiB0aGUgdmVzc2VsLCBhZnRlciBjaGFuZ2luZyB0aGVpciBtaW5kcyBvZnRlbiBpbiBhIHNob3J0IHRpbWUsIG5ldmVydGhlbGVzcyByZXBsaWVkIHRvIHRoZSBob3JzZW1lbiB0aGF0IHRoZXkgd291bGQgbm90IHN1cnJlbmRlciBNYXJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBob3JzZW1lbiByb2RlIGF3YXkgaW4gYSByYWdlLCBhbmQgdGhlIHNhaWxvcnMsIGNoYW5naW5nIHRoZWlyIHBsYW4gYWdhaW4sIHB1dCBpbiB0b3dhcmRzIHRoZSBzaG9yZTsgYW5kIGFmdGVyIGNhc3RpbmcgYW5jaG9yIGF0IHRoZSBtb3V0aCBvZiB0aGUgYmlucywgd2hlcmUgdGhlIHJpdmVyIGV4cGFuZHMgaW50byBhIGxha2UsIHRoZXkgYWR2aXNlZCBNYXJpdXMgdG8gbGVhdmUgdGhlIHZlc3NlbCwgdGFrZSBzb21lIGZvb2QgYXNob3JlIHdpdGggaGltLCBhbmQgcmVjcnVpdCBoaXMgc3RyZW5ndGggYWZ0ZXIgaGlzIGhhcmRzaGlwcyB1bnRpbCBhIGdvb2Qgd2luZCBmb3Igc2FpbGluZyBzaG91bGQgYXJpc2U7IHRoaXMgdXN1YWxseSBhcm9zZSwgdGhleSBzYWlkLCB3aGVuIHRoZSB3aW5kIGZyb20gdGhlIHNlYSBkaWVkIGF3YXkgYW5kIGEgdG9sZXJhYmx5IHN0cm9uZyBicmVlemUgYmxldyBmcm9tIHRoZSBtYXJzaGVzLiBNYW5pdXMgd2FzIHBlcnN1YWRlZCB0byBmb2xsb3cgdGhlaXIgYWR2aWNlOyBzbyB0aGUgc2FpbG9ycyBjYXJyaWVkIGhpbSBhc2hvcmUsIGFuZCBoZSBsYXkgZG93biBpbiBzb21lIGdyYXNzLCB3aXRob3V0IHRoZSBzbGlnaHRlc3QgdGhvdWdodCBvZiB3aGF0IHdhcyB0byBjb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZSBzYWlsb3JzIGF0IG9uY2UgYm9hcmRlZCB0aGVpciB2ZXNzZWwsIGhvaXN0ZWQgYW5jaG9yLCBhbmQgdG9vayB0byBmbGlnaHQsIGZlZWxpbmcgdGhhdCBpdCB3YXMgbmVpdGhlciBob25vdXJhYmxlIGZvciB0aGVtIHRvIHN1cnJlbmRlciBNYXJpdXMgbm9yIHNhZmUgdG8gcmVzY3VlIGhpbS4gVGh1cywgZm9yc2FrZW4gb2YgYWxsIG1lbiwgaGUgbGF5IGEgbG9uZyB0aW1lIHNwZWVjaGxlc3Mgb24gdGhlIHNob3JlLCBidXQgcmVjb3ZlcmVkIGhpbXNlbGYgYXQgbGFzdCBhbmQgdHJpZWQgdG8gd2FsayBhbG9uZywgdGhlIGxhY2sgb2YgYW55IHBhdGggbWFraW5nIGhpcyBwcm9ncmVzcyBsYWJvcmlvdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgaGlzIHdheSB0aHJvdWdoIGRlZXAgbWFyc2hlcyBhbmQgZGl0Y2hlcyBmdWxsIG9mIG11ZCBhbmQgd2F0ZXIsIHVudGlsIGhlIGNhbWUgdG8gdGhlIGh1dCBvZiBhbiBvbGQgbWFuIHdobyBnb3QgaGlzIGxpdmluZyBmcm9tIHRoZSB3YXRlci4gQXQgaGlzIGZlZXQgTWFyaXVzIGZlbGwgZG93biBhbmQgYmVzb3VnaHQgaGltIHRvIHNhdmUgYW5kIGhlbHAgYSBtYW4gd2hvLCBpbiBjYXNlIGhlIGVzY2FwZWQgaGlzIHByZXNlbnQgcGVyaWxzLCB3b3VsZCByZWNvbXBlbnNlIGhpbSBiZXlvbmQgYWxsIGhpcyBob3Blcy4gVGhlbiB0aGUgbWFuLCB3aG8gZWl0aGVyIGtuZXcgTWFyaXVzIGZyb20gb2Ygb2xkIG9yIHNhdyB0aGF0IGluIGhpcyBmYWNlIHdoaWNoIHdvbiB0aGUgcmVnYXJkIGR1ZSB0byBzdXBlcmlvciByYW5rLCB0b2xkIGhpbSB0aGF0IGlmIGhlIG1lcmVseSB3YW50ZWQgdG8gcmVzdCwgdGhlIGNhYmluIHdvdWxkIHN1ZmZpY2UsIGJ1dCB0aGF0IGlmIGhlIHdhcyB3YW5kZXJpbmcgYWJvdXQgdHJ5aW5nIHRvIGVzY2FwZSBwdXJzdWVycywgaGUgY291bGQgYmUgaGlkZGVuIGluIGEgcGxhY2UgdGhhdCB3YXMgbW9yZSBxdWlldC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIGJlZ2dlZCB0aGF0IHRoaXMgbWlnaHQgYmUgZG9uZSwgYW5kIHRoZSBtYW4gdG9vayBoaW0gdG8gdGhlIG1hcnNoLCBiYWRlIGhpbSBjcm91Y2ggZG93biBpbiBhIGhvbGxvdyBwbGFjZSBieSB0aGUgc2lkZSBvZiB0aGUgcml2ZXIsIGFuZCB0aHJldyBvdmVyIGhpbSBhIG1hc3Mgb2YgcmVlZHMgYW5kIG90aGVyIG1hdGVyaWFsIHdoaWNoIHdhcyBsaWdodCBlbm91Z2ggdG8gY292ZXIgd2l0aG91dCBpbmp1cmluZyBoaW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgbXVjaCB0aW1lIGhhZCBlbGFwc2VkLCBob3dldmVyLCB3aGVuIGEgZGluIGFuZCB0dW11bHQgYXQgdGhlIGh1dCBmZWxsIHVwb24gdGhlIGVhcnMgb2YgTWFyaXVzLiBGb3IgR2VtaW5pdXMgaGFkIHNlbnQgYSBudW1iZXIgb2YgbWVuIGZyb20gVGVycmFjaW5hIGluIHB1cnN1aXQgb2YgaGltLCBzb21lIG9mIHdob20gaGFkIGNoYW5jZWQgdG8gY29tZSB0byB0aGUgb2xkIG1hbidzIGh1dCwgYW5kIHdlcmUgZnJpZ2h0ZW5pbmcgYW5kIGJlcmF0aW5nIGhpbSBmb3IgaGF2aW5nIHJlY2VpdmVkIGFuZCBoaWRkZW4gYW4gZW5lbXkgb2YgUm9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIHRoZXJlZm9yZSByb3NlIGZyb20gaGlzIGhpZGluZy1wbGFjZSwgc3RyaXBwZWQgb2ZmIGhpcyBjbG90aGVzLCBhbmQgdGhyZXcgaGltc2VsZiBpbnRvIHRoZSB0aGljayBhbmQgbXVkZHkgd2F0ZXIgb2YgdGhlIG1hcnNoLiBIZXJlIGhlIGNvdWxkIG5vdCBlbHVkZSB0aGUgbWVuIHdobyB3ZXJlIGluIHNlYXJjaCBvZiBoaW0sIGJ1dCB0aGV5IGRyYWdnZWQgaGltIG91dCBhbGwgY292ZXJlZCB3aXRoIHNsaW1lLCBsZWQgaGltIG5ha2VkIHRvIE1pbnR1cm5hZSwgYW5kIGhhbmRlZCBoaW0gb3ZlciB0byB0aGUgbWFnaXN0cmF0ZXMgdGhlcmUuIE5vdywgd29yZCBoYWQgYWxyZWFkeSBiZWVuIHNlbnQgdG8gZXZlcnkgY2l0eSB0aGF0IE1hcml1cyB3YXMgdG8gYmUgcHVyc3VlZCBieSB0aGUgYXV0aG9yaXRpZXMgYW5kIGtpbGxlZCBieSBoaXMgY2FwdG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5ldmVydGhlbGVzcywgdGhlIG1hZ2lzdHJhdGVzIGRlY2lkZWQgdG8gZGVsaWJlcmF0ZSBvbiB0aGUgbWF0dGVyIGZpcnN0OyBzbyB0aGV5IHB1dCBNYXJpdXMgZm9yIHNhZmUta2VlcGluZyBpbiB0aGUgaG91c2Ugb2YgYSB3b21hbiBuYW1lZCBGYW5uaWEsIHdobyB3YXMgdGhvdWdodCB0byBiZSBob3N0aWxlIHRvIGhpbSBvbiBhY2NvdW50IG9mIGFuIGFuY2llbnQgZ3JpZXZhbmNlLgoJCQk8L3A+CiAgICAgICAgIDxwPkZhbm5pYSwgdGhhdCBpcywgaGFkIGJlZW4gbWFycmllZCB0byBUaXRpbm5pdXM7IGJ1dCBzaGUgaGFkIHNlcGFyYXRlZCBoZXJzZWxmIGZyb20gaGltIGFuZCBkZW1hbmRlZCBiYWNrIGhlciBkb3dyeSwgd2hpY2ggd2FzIGNvbnNpZGVyYWJsZS4gSGVyIGh1c2JhbmQsIGhvd2V2ZXIsIGhhZCBhY2N1c2VkIGhlciBvZiBhZHVsdGVyeTsgYW5kIE1hcml1cywgd2hvIHdhcyBzZXJ2aW5nIGluIGhpcyBzaXh0aCBjb25zdWxzaGlwLCBoYWQgcHJlc2lkZWQgb3ZlciB0aGUgdHJpYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGNhc2Ugd2FzIHBsZWFkZWQsIGFuZCBpdCBhcHBlYXJlZCB0aGF0IEZhbm5pYSBoYWQgYmVlbiBhIGRpc3NvbHV0ZSB3b21hbiwgYW5kIHRoYXQgaGVyIGh1c2JhbmQgaGFkIGtub3duIHRoaXMgYW5kIHlldCBoYWQgdGFrZW4gaGVyIHRvIHdpZmUgYW5kIGxpdmVkIHdpdGggaGVyIGEgbG9uZyB0aW1lLCBNYXJpdXMgd2FzIGRpc2d1c3RlZCB3aXRoIGJvdGggb2YgdGhlbSwgYW5kIGRlY3JlZWQgdGhhdCB0aGUgaHVzYmFuZCBzaG91bGQgcGF5IGJhY2sgaGlzIHdpZmUncyBkb3dyeSwgd2hpbGUgYXQgdGhlIHNhbWUgdGltZSBoZSBpbXBvc2VkIHVwb24gdGhlIHdvbWFuLCBhcyBhIG1hcmsgb2YgaW5mYW15LCBhIGZpbmUgb2YgZm91ciBjb3BwZXJzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgRmFubmlhIGRpZCBub3QgYWN0IGxpa2UgYSB3b21hbiB3aG8gaGFkIGJlZW4gd3JvbmdlZCwgYnV0IHdoZW4gc2hlIHNhdyBNYXJpdXMsIHNoZSBwdXQgZmFyIGZyb20gaGVyIGFsbCByZXNlbnRtZW50LCBjYXJlZCBmb3IgaGltIGFzIHdlbGwgYXMgc2hlIGNvdWxkLCBhbmQgdHJpZWQgdG8gZW5jb3VyYWdlIGhpbS4gTWFyaXVzIGNvbW1lbmRlZCBoZXIsIGFuZCBzYWlkIGhlIHdhcyBvZiBnb29kIGNvdXJhZ2U7IGZvciBhbiBleGNlbGxlbnQgc2lnbiBoYWQgYmVlbiBnaXZlbiBoaW0uIEFuZCB0aGlzIHNpZ24gd2FzIGFzIGZvbGxvd3MuCgkJCTwvcD4KICAgICAgICAgPHA+V2hlbiwgYXMgaGUgd2FzIGxlZCBhbG9uZywgaGUgaGFkIGNvbWUgdG8gdGhlIGhvdXNlIG9mIEZhbm5pYSB0aGUgZG9vciBmbGV3IG9wZW4gYW5kIGFuIGFzcyByYW4gb3V0LCBpbiBvcmRlciB0byBnZXQgYSBkcmluayBhdCBhIHNwcmluZyB0aGF0IGZsb3dlZCBoYXJkIGJ5OyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz53aXRoIGEgc2F1Y3kgYW5kIGV4dWx0YW50IGxvb2sgYXQgTWFyaXVzIHRoZSBhbmltYWwgYXQgZmlyc3Qgc3RvcHBlZCBpbiBmcm9udCBvZiBoaW0sIGFuZCB0aGVuLCBnaXZpbmcgYSBtYWduaWZpY2VudCBicmF5LCB3ZW50IGZyaXNraW5nIHBhc3QgaGltIHRyaXVtcGhhbnRseS4gRnJvbSB0aGlzIE1hcml1cyBkcmV3IGFuIG9tZW4gYW5kIGNvbmNsdWRlZCB0aGF0IHRoZSBEZWl0eSB3YXMgaW5kaWNhdGluZyBhIHdheSBvZiBlc2NhcGUgZm9yIGhpbSBieSBzZWEgcmF0aGVyIHRoYW4gYnkgbGFuZDsgZm9yIHRoZSBhc3MgbWFkZSBubyBhY2NvdW50IG9mIGl0cyBkcnkgZm9kZGVyLCBodXQgdHVybmVkIGZyb20gdGhhdCB0byB0aGUgd2F0ZXIuCgkJCTwvcD4KICAgICAgICAgPHA+QWZ0ZXIgZXhwbGFpbmluZyB0aGlzIHRvIEZhbm5pYSwgTWFyaXVzIGxheSBkb3duIHRvIHJlc3QgYWxvbmUsIGFmdGVyIG9yZGVyaW5nIHRoZSBkb29yIG9mIHRoZSBhcGFydG1lbnQgdG8gYmUgY2xvc2VkLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiBkZWxpYmVyYXRpb24sIHRoZSBtYWdpc3RyYXRlcyBhbmQgY291bmNpbGxvcnMgb2YgTWludHVybmFlIGRlY2lkZWQgbm90IHRvIGRlbGF5LCBidXQgdG8gcHV0IE1hcml1cyB0byBkZWF0aC4gTm8gb25lIG9mIHRoZSBjaXRpemVucywgaG93ZXZlciwgd291bGQgdW5kZXJ0YWtlIHRoZSB0YXNrLCBzbyBhIGhvcnNlbWFuLCBlaXRoZXIgYSBHYXVsIG9yIGEgQ2ltYnJpYW4gKGZvciB0aGUgc3RvcnkgaXMgdG9sZCBib3RoIHdheXMpLCB0b29rIGEgc3dvcmQgYW5kIHdlbnQgaW50byB0byB0aGUgcm9vbSB3aGVyZSBNYXJpdXMgd2FzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoYXQgcGFydCBvZiB0aGUgcm9vbSB3aGVyZSBNYXJpdXMgaGFwcGVuZWQgdG8gYmUgbHlpbmcgaGFkIG5vdCBhIHZlcnkgZ29vZCBsaWdodCwgYnV0IHdhcyBnbG9vbXksIGFuZCB3ZSBhcmUgdG9sZCB0aGF0IHRvIHRoZSBzb2xkaWVyIHRoZSBleWVzIG9mIE1hcml1cyBzZWVtZWQgdG8gc2hvb3Qgb3V0IGEgc3Ryb25nIGZsYW1lLCBhbmQgdGhhdCBhIGxvdWQgdm9pY2UgaXNzdWVkIGZyb20gdGhlIHNoYWRvd3Mgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1hbiwgZG9zdCB0aG91IGRhcmUgdG8gc2xheSBDYWl1cyBNYXJpdXM/PC9xPiBBdCBvbmNlLCB0aGVuLCB0aGUgQmFyYmFyaWFuIGZsZWQgZnJvbSB0aGUgcm9vbSwgdGhyZXcgaGlzIHN3b3JkIGRvd24gb24gdGhlIGdyb3VuZCwgYW5kIGRhc2hlZCBvdXQgb2YgZG9vcnMsIHdpdGggdGhpcyBvbmUgY3J5OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY2Fubm90IGtpbGwgQ2FpdXMgTWFyaXVzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Db25zdGVybmF0aW9uIHJlaWduZWQsIG9mIGNvdXJzZSwgYW5kIHRoZW4gY2FtZSBwaXR5LCBhIGNoYW5nZSBvZiBoZWFydCwgYW5kIHNlbGYtcmVwcm9hY2ggZm9yIGhhdmluZyBjb21lIHRvIHNvIHVubGF3ZnVsIGFuZCB1bmdyYXRlZnVsIGEgZGVjaXNpb24gYWdhaW5zdCBhIG1hbiB3aG8gaGFkIGJlZW4gdGhlIHNhdmlvdXIgb2YgSXRhbHksIGFuZCB3aG8gb3VnaHQgaW4gYWxsIGRlY2VuY3kgdG8gYmUgaGVscGVkLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNvLCB0aGVuLDwvcT4gdGhlIHRhbGsgcmFuLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxldCBoaW0gZ28gd2hlcmUgaGUgd2lsbCBhcyBhbiBleGlsZSwgdG8gc3VmZmVyIGVsc2V3aGVyZSBoaXMgYWxsb3R0ZWQgZmF0ZS4gQW5kIGxldCB1cyBwcmF5IHRoYXQgdGhlIGdvZHMgbWF5IG5vdCB2aXNpdCB1cyB3aXRoIHRoZWlyIGRpc3BsZWFzdXJlIGZvciBjYXN0aW5nIE1hcml1cyBvdXQgb2Ygb3VyIGNpdHkgaW4gcG92ZXJ0eSBhbmQgcmFncy48L3E+IE1vdmVkIGJ5IHN1Y2ggY29uc2lkZXJhdGlvbnMsIHRoZXkgcnVzaGVkIGludG8gaGlzIHJvb20gaW4gYSBib2R5LCBzdXJyb3VuZGVkIGhpbSwgYW5kIGJlZ2FuIHRvIGxlYWQgaGltIGZvcnRoIHRvIHRoZSBzZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCB0aGlzIG9uZSBhbmQgdGhhdCBvbmUgd2VyZSBlYWdlciB0byBkbyBoaW0gc29tZSBzZXJ2aWNlIGFuZCBhbGwgbWFkZSB3aGF0IGhhc3RlIHRoZXkgY291bGQsIHN0aWxsIHRoZXJlIHdhcyBkZWxheS4gRm9yIHRoZSBncm92ZSBvZiBNYXJpY2EsIGFzIGl0IHdhcyBjYWxsZWQsIHdoaWNoIHdhcyBoZWxkIGluIHZlbmVyYXRpb24sIGFuZCBmcm9tIHdoaWNoIG5vdGhpbmcgd2FzIHBlcm1pdHRlZCB0byBiZSBjYXJyaWVkIG91dCB0aGF0IGhhZCBldmVyIGJlZW4gY2FycmllZCBpbiwgbGF5IGJldHdlZW4gdGhlbSBhbmQgdGhlIHNlYSBhcyB0aGV5IHdlcmUgZ29pbmcsIGFuZCBpZiB0aGV5IHdlbnQgcm91bmQgaXQgdGhleSBtdXN0IG5lZWRzIGxvc2UgdGltZS4gQXQgbGFzdCwgaG93ZXZlciwgb25lIG9mIHRoZSBvbGRlciBtZW4gY3JpZWQgb3V0IGFuZCBzYWlkIHRoYXQgbm8gcGF0aCBjb3VsZCBmb3JiaWQgbWVuJ3Mgc3RlcHMgYW5kIHBhc3NhZ2UgaWYgaXQgd2VyZSB0aGUgcGF0aCBvZiBzYWZldHkgZm9yIE1hcml1cy4gQW5kIHRoZSBzcGVha2VyIGhpbXNlbGYgd2FzIHRoZSBmaXJzdCB0byB0YWtlIHNvbWUgb2YgdGhlIHRoaW5ncyB0aGF0IHdlcmUgYmVpbmcgY2FycmllZCB0byB0aGUgc2hpcCBhcmlkIHBhc3MgdGhyb3VnaCB0aGUgaG9seSBwbGFjZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkV2ZXJ5dGhpbmcgd2FzIHNwZWVkaWx5IHByb3ZpZGVkIHRocm91Z2ggc3VjaCByZWFkaW5lc3MgYXMgdGhpcywgYW5kIGEgY2VydGFpbiBCZWxhZXVzIGZ1cm5pc2hlZCBhIHNoaXAgZm9yIE1hcml1cy4gQmVsYWV1cyBhZnRlcndhcmRzIGhhZCBhIHBhaW50aW5nIG1hZGUgcmVwcmVzZW50aW5nIHRoZXNlIHNjZW5lcywgYW5kIGRlZGljYXRlZCBpdCBpbiB0aGUgdGVtcGxlIGF0IHRoZSBzcG90IHdoZXJlIE1hcml1cyBlbWJhcmtlZCBhbmQgcHV0IHRvIHNlYS4gRmF2b3VyZWQgYnkgdGhlIHdpbmQgaGUgd2FzIGJvcm5lIGFsb25nIGJ5IGNoYW5jZSB0byB0aGUgaXNsYW5kIG9mIEFlbmFyaWEsIHdoZXJlIGhlIGZvdW5kIEdyYW5pdXMgYW5kIHRoZSByZXN0IG9mIGhpcyBmcmllbmRzLCBhbmQgc2V0IHNhaWwgd2l0aCB0aGVtIGZvciBBZnJpY2EuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVpciBzdXBwbHkgb2YgZnJlc2ggd2F0ZXIgZmFpbGVkLCBhbmQgdGhleSB3ZXJlIGNvbXBlbGxlZCB0byB0b3VjaCBhdCBFcnljaW5hIGluIFNpY2lseS4gSW4gdGhpcyBuZWlnaGJvdXJob29kLCBhcyBpdCBjaGFuY2VkLCB0aGUgUm9tYW4gcXVhZXN0b3Igd2FzIG9uIHRoZSB3YXRjaCwgYW5kIGFsbW9zdCBjYXB0dXJlZCBNYXJpdXMgaGltc2VsZiBhcyBoZSBsYW5kZWQ7IGhlIGRpZCBraWxsIGFib3V0IHNpeHRlZW4gb2YgaGlzIG1lbiB3aG8gY2FtZSBhc2hvcmUgZm9yIHdhdGVyLiBNYXJpdXMgdGhlcmVmb3JlIHB1dCBvdXQgdG8gc2VhIHdpdGggYWxsIHNwZWVkIGFuZCBjcm9zc2VkIHRvIHRoZSBpc2xhbmQgb2YgTWVuaW54LCB3aGVyZSBoZSBmaXJzdCBsZWFybmVkIHRoYXQgaGlzIHNvbiBoYWQgY29tZSBvZmYgc2FmZWx5IHdpdGggQ2V0aGVndXMsIGFuZCB0aGF0IHRoZXkgV2VyZSBvbiB0aGVpciB3YXkgdG8gSWFtcHNhcyB0aGUga2luZyBvZiBOdW1pZGlhLCBpbnRlbmRpbmcgdG8gYXNrIGhpcyBhaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgbmV3cyBNYXJpdXMgd2FzIGEgbGl0dGxlIHJlZnJlc2hlZCwgYW5kIG1hZGUgYm9sZCB0byBwdXNoIG9uIGZyb20gdGhlIGlzbGFuZCB0byB0aGUgbmVpZ2hib3VyaG9vZCBvZiBDYXJ0aGFnZS4KCQkJPC9wPgogICAgICAgICA8cD5UaGUgUm9tYW4gZ292ZXJub3Igb2YgQWZyaWNhIGF0IHRoaXMgdGltZSB3YXMgU2V4dGlsaXVzLCBhIG1hbiB3aG8gaGFkIHJlY2VpdmVkIG5laXRoZXIgZ29vZCBub3IgaWxsIGF0IGhlIGhhbmRzIG9mIE1hcml1cywgYnV0IHdob20sIGFzIGl0IHdhcyBleHBlY3RlZCwgcGl0eSBhbG9uZSB3b3VsZCBtb3ZlIHRvIGdpdmUgaGltIGFpZC4gSGFyZGx5LCBob3dldmVyLCBoYWQgTWFyaXVzIGxhbmRlZCB3aXRoIGEgZmV3IGNvbXBhbmlvbnMsIHdoZW4gYW4gb2ZmaWNpYWwgbWV0IGhpbSwgc3Rvb2QgZGlyZWN0bHkgaW4gZnJvbnQgb2YgaGltLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TZXh0aWxpdXMgdGhlIGdvdmVybm9yIGZvcmJpZHMgdGhlZSwgTWFyaXVzLCB0byBzZXQgZm9vdCBpbiBBZnJpY2E7IGFuZCBpZiB0aG91IGRpc29iZXllc3QsIGhlIGRlY2xhcmVzIHRoYXQgaGUgd2lsbCB1cGhvbGQgdGhlIGRlY3JlZXMgb2YgdGhlIHNlbmF0ZSBhbmQgdHJlYXQgdGhlZSBhcyBhbiBlbmVteSBvZiBSb21lLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGhlYXJkIHRoaXMsIE1hcml1cyB3YXMgcmVuZGVyZWQgc3BlZWNobGVzcyBieSBncmllZiBhbmQgaW5kaWduYXRpb24sIGFuZCBmb3IgYSBsb25nIHRpbWUga2VwdCBxdWlldCwgbG9va2luZyBzdGVybmx5IGF0IHRoZSBvZmZpY2lhbC4gVGhlbiwgd2hlbiBhc2tlZCBieSBoaW0gd2hhdCBoZSBoYWQgdG8gc2F5LCBhbmQgd2hhdCBhbnN3ZXIgaGUgd291bGQgbWFrZSB0byB0aGUgZ292ZXJub3IsIGhlIGFuc3dlcmVkIHdpdGggYSBkZWVwIGdyb2FuOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRlbGwgaGltLCB0aGVuLCB0aGF0IHRob3UgaGFzdCBzZWVuIENhaXVzIE1hcml1cyBhIGZ1Z2l0aXZlLCBzZWF0ZWQgYW1pZCB0aGUgcnVpbnMgb2YgQ2FydGhhZ2UuPC9xPiBBbmQgaXQgd2FzIG5vdCBpbmFwdGx5IHRoYXQgaGUgY29tcGFyZWQgdGhlIGZhdGUgb2YgdGhhdCBjaXR5IHdpdGggaGlzIG93biByZXZlcnNhbCBvZiBmb3J0dW5lLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIElhbXBzYXMgdGhlIGtpbmcgb2YgTnVtaWRpYSwgaGVzaXRhdGluZyB3aGljaCBjb3Vyc2UgdG8gdGFrZSwgZGlkIGluZGVlZCB0cmVhdCB0aGUgeW91bmdlciBNYXJpdXMgYW5kIGhpcyBwYXJ0eSB3aXRoIHJlc3BlY3QsIGJ1dCBhbHdheXMgaGFkIHNvbWUgZXhjdXNlIGZvciBkZXRhaW5pbmcgdGhlbSB3aGVuIHRoZXkgd2lzaGVkIHRvIGdvIGF3YXksIGFuZCBjbGVhcmx5IGhhZCBubyBnb29kIGVuZCBpbiB2aWV3IGluIHRodXMgcG9zdHBvbmluZyB0aGVpciBkZXBhcnR1cmUuIEhvd2V2ZXIsIHNvbWV0aGluZyBvY2N1cnJlZCB3aGljaCwgdGhvdWdoIG5vdCBhdCBhbGwgZXh0cmFvcmRpbmFyeSwgbGVkIHRvIHRoZWlyIGVzY2FwZS4gVGhlIHlvdW5nZXIgTWFyaXVzLCB0aGF0IGlzLCBiZWluZyBhIGhhbmRzb21lIGZlbGxvdywgb25lIG9mIHRoZSBjb25jdWJpbmVzIG9mIHRoZSBraW5nIHdhcyBwYWluZWQgdG8gc2VlIGhpbSB0cmVhdGVkIHVud29ydGhpbHksIGFuZCB0aGlzIGZlZWxpbmcgb2YgY29tcGFzc2lvbiByaXBlbmVkIGludG8gbG92ZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIHRoZW4sIE1hcml1cyByZXBlbGxlZCB0aGUgd29tYW4ncyBhZHZhbmNlczsgYnV0IHdoZW4gaGUgc2F3IHRoYXQgdGhlcmUgd2FzIG5vIG90aGVyIHdheSBvZiBlc2NhcGUgZm9yIGhpbSBhbmQgaGlzIGZyaWVuZHMsIGFuZCB0aGF0IGhlciBiZWhhdmlvdXIgd2FzIGJhc2VkIG9uIGEgZ2VudWluZSBhZmZlY3Rpb24sIGhlIGFjY2VwdGVkIGhlciBmYXZvdXJzOyB3aGVyZXVwb24gc2hlIGhlbHBlZCBoaW0gaW4gZ2V0dGluZyBvZmYsIGFuZCBoZSByYW4gYXdheSB3aXRoIGhpcyBmcmllbmRzIGFuZCBtYWRlIGhpcyBlc2NhcGUgdG8gaGlzIGZhdGhlci4gQWZ0ZXIgZmF0aGVyIGFuZCBzb24gaGFkIGVtYnJhY2VkIG9uZSBhbm90aGVyLCB0aGV5IHdhbGtlZCBhbG9uZyB0aGUgc2VhLXNob3JlLCBhbmQgdGhlcmUgdGhleSBzYXcgc29tZSBzY29ycGlvbnMgZmlnaHRpbmcsIHdoaWNoIHRoZSBlbGRlciBNYXJpdXMgcmVnYXJkZWQgYXMgYSBiYWQgb21lbi4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlcmVmb3JlLCB0aGV5IGJvYXJkZWQgYSBmaXNoaW5nLWJvYXQgYW5kIGNyb3NzZWQgb3ZlciB0byB0aGUgaXNsYW5kIG9mIENlcmNpbmEsIHdoaWNoIHdhcyBub3QgZmFyIGRpc3RhbnQgZnJvbSB0aGUgbWFpbmxhbmQ7IGFuZCBzY2FyY2VseSBoYWQgdGhleSBwdXQgb3V0IGZyb20gbGFuZCB3aGVuIGhvcnNlbWVuIHNlbnQgYnkgdGhlIGtpbmcgd2VyZSBzZWVuIHJpZGluZyB0b3dhcmRzIHRoZSBzcG90IHdoZW5jZSB0aGV5IGhhZCBzYWlsZWQuIEl0IHdvdWxkIHNlZW0gdGhhdCBNYXJpdXMgbmV2ZXIgZXNjYXBlZCBhIGdyZWF0ZXIgcGVyaWwgdGhhbiB0aGlzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIFJvbWUsIFN1bGxhIHdhcyBoZWFyZCBvZiBhcyB3YWdpbmcgd2FyIHdpdGggdGhlIGdlbmVyYWxzIG9mIE1pdGhyaWRhdGVzIGluIEJvZW90aWEsIGFuZCB0aGUgY29uc3VscyBxdWFycmVsbGVkIGFuZCB3ZXJlIHJlc29ydGluZyB0byBhcm1zLiBBIGJhdHRsZSB0b29rIHBsYWNlLCBPY3Rhdml1cyB3b24gdGhlIGRheSwgY2FzdCBvdXQgQ2lubmEsIHdobyB3YXMgdHJ5aW5nIHRvIGJlIHRvbyBhcmJpdHJhcnkgaW4gaGlzIHJ1bGUsIGFuZCBwdXQgQ29ybmVsaXVzIE1lcnVsYSBpbiBoaXMgcGxhY2UgYXMgY29uc3VsOyB3aGVyZXVwb24gQ2lubmEgYXNzZW1ibGVkIGEgZm9yY2UgZnJvbSB0aGUgb3RoZXIgcGFydHMgb2YgSXRhbHkgYW5kIG1hZGUgd2FyIGFuZXcgdXBvbiBPY3Rhdml1cyBhbmQgaGlzIGNvbGxlYWd1ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBNYXJpdXMgaGVhcmQgb2YgdGhlc2UgdGhpbmdzLCBoZSB0aG91Z2h0IGJlc3QgdG8gc2FpbCB0aGl0aGVyIGFzIGZhc3QgYXMgaGUgY291bGQ7IHNvIHRha2luZyB3aXRoIGhpbSBmcm9tIEFmcmljYSBzb21lIE1vb3Jpc2ggaG9yc2VtZW4sIGFuZCBzb21lIEl0YWxpYW5zIHdobyBoYWQgd2FuZGVyZWQgdGhpdGhlciwgdGhlIG51bWJlciBvZiBib3RoIHRvZ2V0aGVyIG5vdCBleGNlZWRpbmcgYSB0aG91c2FuZCwgaGUgcHV0IHRvIHNlYS4gUHV0dGluZyBpbiBhdCBUZWxhbW9uIGluIFR5cnJoZW5pYSwgYW5kIGxhdWRpbmcgdGhlcmUsIGhlIHByb2NsYWltZWQgZnJlZWRvbSB0byB0aGUgc2xhdmVzOyBoZSBhbHNvIHdvbiBvdmVyIHRoZSBzdHVyZGllc3Qgb2YgdGhlIGZyZWUgZmFybWVycyBhbmQgaGVyZHNtZW4gb2YgdGhlIG5laWdoYm91cmhvb2QsIHdobyBjYW1lIGZsb2NraW5nIGRvd24gdG8gdGhlIHNlYSBhdHRyYWN0ZWQgYnkgaGlzIGZhbWUsIGFuZCBpbiBhIGZldyBkYXlzIGhhZCBhc3NlbWJsZWQgYSBsYXJnZSBmb3JjZSBhbmQgbWFubmVkIGZvcnR5IHNoaXBzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywga25vd2luZyB0aGF0IE9jdGF2aXVzIHdhcyBhIG1vc3QgZXhjZWxsZW50IG1hbiBhbmQgd2lzaGVkIHRvIHJ1bGUgaW4gdGhlIGp1c3Rlc3Qgd2F5LCBidXQgdGhhdCBDaW5uYSB3YXMgZGlzdHJ1c3RlZCBieSBTdWxsYSBhbmQgd2FzIG1ha2luZyB3YXIgdXBvbiB0aGUgZXN0YWJsaXNoZWQgY29uc3RpdHV0aW9uLCBoZSBkZXRlcm1pbmVkIHRvIGpvaW4gQ2lubmEgd2l0aCBoaXMgZm9yY2VzLiBBY2NvcmRpbmdseSBoZSBzZW50IHRvIENpbm5hIGFuZCBvZmZlcmVkIHRvIG9iZXkgaGltIGluIGV2ZXJ5dGhpbmcgYXMgY29uc3VsLiBDaW5uYSBhY2NlcHRlZCBoaXMgb2ZmZXIsIG5hbWVkIGhpbSBwcm9jb25zdWwsIGFuZCBzZW50IGhpbSB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPmZhc2NlcyA8L2ZvcmVpZ24+IGFuZCBvdGhlciBpbnNpZ25pYSBvZiB0aGUgb2ZmaWNlIE1hcml1cywgaG93ZXZlciwgZGVjbGFyZWQgdGhhdCB0aGVzZSBkZWNvcmF0aW9ucyB3ZXJlIG5vdCBzdWl0ZWQgdG8gaGlzIGZvcnR1bmVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaW4gbWVhbiBhdHRpcmUsIGhpcyBoYWlyIHVuY3V0IHNpbmNlIHRoZSBkYXkgb2YgaGlzIGZsaWdodCwgYmVpbmcgbm93IG92ZXIgc2V2ZW50eSB5ZWFycyBvZiBhZ2UsIGNhbWUgd2l0aCBzbG93IHN0ZXBzIHRvIG1lZXQgdGhlIGNvbnN1bC4gRm9yIGhlIHdpc2hlZCB0aGF0IG1lbiBzaG91bGQgcGl0eSBoaW07IGJ1dCB3aXRoIGhpcyBhcHBlYWwgZm9yIGNvbXBhc3Npb24gdGhlcmUgd2FzIG1pbmdsZWQgdGhlIGxvb2sgdGhhdCB3YXMgbmF0dXJhbCB0byBoaW0gYW5kIG5vdyBtb3JlIHRlcnJpZnlpbmcgdGhhbiBldmVyLCBhbmQgdGhyb3VnaCBoaXMgZG93bmNhc3QgbWllbiB0aGVyZSBmbGFzaGVkIGEgc3Bpcml0IHdoaWNoIGhhZCBiZWVuLCBub3QgaHVtYmxlZCwgYnV0IG1hZGUgc2F2YWdlIGJ5IGhpcyByZXZlcnNlcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGdyZWV0aW5nIENpbm5hIGFuZCBwcmVzZW50aW5nIGhpbXNlbGYgdG8gQ2lubmEncyBzb2xkaWVycywgaGUgYXQgb25jZSBiZWdhbiBoaXMgd29yayBhbmQgZ3JlYXRseSBjaGFuZ2VkIHRoZSBwb3N0dXJlIG9mIGFmZmFpcnMuIEluIHRoZSBmaXJzdCBwbGFjZSwgYnkgY3V0dGluZyBvZmYgdGhlIGdyYWluLXNoaXBzIHdpdGggaGlzIGZsZWV0IGFuZCBwbHVuZGVyaW5nIHRoZSBtZXJjaGFudHMsIGhlIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgdGhlIGNpdHkncyBzdXBwbGllczsgbmV4dCwgaGUgc2FpbGVkIHRvIHRoZSBtYXJpdGltZSBjaXRpZXMgYW5kIHRvb2sgdGhlbTsgYW5kIGZpbmFsbHksIGhlIHNlaXplZCBPc3RpYSBpdHNlbGYsIHdoaWNoIHdhcyB0cmVhY2hlcm91c2x5IHN1cnJlbmRlcmVkIHRvIGhpbSwgcGx1bmRlcmluZyB0aGUgcHJvcGVydHkgdGhlcmUgYW5kIGtpbGxpbmcgbW9zdCBvZiBpdHMgaW5oYWJpdGFudHMsIGFuZCBieSB0aHJvd2luZyBhIGJyaWRnZSBhY3Jvc3MgdGhlIHJpdmVyIGNvbXBsZXRlbHkgY3V0IG9mZiB0aGUgZW5lbXkgZnJvbSBzdWNoIHN0b3JlcyBhcyBtaWdodCBjb21lIGJ5IHNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBzZXQgb3V0IGFuZCBtYXJjaGVkIHdpdGggaGlzIGFybXkgdG93YXJkcyB0aGUgY2l0eSwgYW5kIG9jY3VwaWVkIHRoZSBoaWxsIGNhbGxlZCBKYW5pY3VsdW0uIE9jdGF2aXVzIGRhbWFnZWQgaGlzIG93biBjYXVzZSwgbm90IHNvIG11Y2ggdGhyb3VnaCBsYWNrIG9mIHNraWxsLCBhcyBieSBhIHRvbyBzY3J1cHVsb3VzIG9ic2VydmFuY2Ugb2YgdGhlIGxhd3MsIHdoZXJlaW4gaGUgdW53aXNlbHkgbmVnbGVjdGVkIHRoZSBuZWVkcyBvZiB0aGUgaG91ci4gRm9yIHRob3VnaCBtYW55IHVyZ2VkIGhpbSB0byBjYWxsIHRoZSBzbGF2ZXMgdG8gYXJtcyB1bmRlciBwcm9taXNlIG9mIGZyZWVkb20sIGhlIHNhaWQgaGUgd291bGQgbm90IG1ha2UgYm9uZG1lbiBtZW1iZXJzIG9mIHRoZSBzdGF0ZSBmcm9tIHdoaWNoIGhlIHdhcyB0cnlpbmcgdG8gZXhjbHVkZSBNYXJpdXMgaW4gb2JlZGllbmNlIHRvIHRoZSBsYXdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hlbiBNZXRlbGx1cyAoc29uIG9mIHRoZSBNZXRlbGx1cyB3aG8gaGFkIGNvbW1hbmRlZCBpbiBBZnJpY2EgYW5kIGhhZCBiZWVuIGJhbmlzaGVkIHRocm91Z2ggdGhlIGludHJpZ3VlcyBvZiBNYXJpdXMpIGNhbWUgdG8gUm9tZSwgaXQgd2FzIHRob3VnaHQgdGhhdCBoZSB3YXMgZmFyIHN1cGVyaW9yIHRvIE9jdGF2aXVzIGFzIGEgZ2VuZXJhbCwgYW5kIHRoZSBzb2xkaWVycyBmb3Jzb29rIE9jdGF2aXVzIGFuZCBjYW1lIHRvIGhpbSwgZW50cmVhdGluZyBoaW0gdG8gdGFrZSB0aGUgY29tbWFuZCBhbmQgc2F2ZSB0aGUgY2l0eTsgZm9yIHRoZXkgd291bGQgbWFrZSBhIGdvb2QgZmlnaHQsIHRoZXkgc2FpZCwgYW5kIHdpbiB0aGUgdmljdG9yeSBpZiB0aGV5IGdvdCBhIHRyaWVkIGFuZCBlZmZpY2llbnQgbGVhZGVyLiBNZXRlbGx1cywgaG93ZXZlciwgd2FzIGluZGlnbmFudCBhdCB0aGVtIGFuZCBiYWRlIHRoZW0gZ28tIGJhY2sgdG8gdGhlIGNvbnN1bDsgd2hlcmV1cG9uIHRoZXkgd2VudCBvZmYgdG8gdGhlIGVuZW15LiBNZXRlbGx1cyBhbHNvIGxlZnQgdGhlIGNpdHksIGRlc3BhaXJpbmcgb2YgaXRzIHNhZmV0eS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBPY3Rhdml1cyB3YXMgcGVyc3VhZGVkIGJ5IGNlcnRhaW4gQ2hhbGRhZWFucywgc2FjcmlmaWNlcnMsIGFuZCBpbnRlcnByZXRlcnMgb2YgdGhlIFNpYnlsbGluZSBib29rcyB0byByZW1haW4gaW4gdGhlIGNpdHksIG9uIHRoZSBhc3N1cmFuY2UgdGhhdCBtYXR0ZXJzIHdvdWxkIHR1cm4gb3V0IHdlbGwuIEZvciBpdCB3b3VsZCBzZWVtIHRoYXQgdGhpcyBtYW4sIGFsdGhvdWdoIGhlIHdhcyBpbiBvdGhlciB3YXlzIHRoZSBtb3N0IHNlbnNpYmxlIG1hbiBpbiBSb21lLCBhbmQgbW9zdCBjYXJlZnVsIHRvIG1haW50YWluIHRoZSBkaWduaXR5IG9mIHRoZSBjb25zdWxhciBvZmZpY2UgZnJlZSBmcm9tIHVuZHVlIGluZmx1ZW5jZSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGN1c3RvbXMgb2YgdGhlIGNvdW50cnkgYW5kIGl0cyBsYXdzLCB3aGljaCBoZSByZWdhcmRlZCBhcyB1bmNoYW5nZWFibGUgb3JkaW5hbmNlcywgaGFkIGEgd2Vha25lc3MgaW4gdGhpcyBkaXJlY3Rpb24sIHNpbmNlIGhlIHNwZW50IG1vcmUgdGltZSB3aXRoIGNoYXJsYXRhbnMgYW5kIHNlZXJzIHRoYW4gd2l0aCBtZW4gd2hvIHdlcmUgc3RhdGVzbWVuIGFuZCBzb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYW4sIHRoZW4sIGJlZm9yZSBNYXJpdXMgZW50ZXJlZCB0aGUgY2l0eSwgd2FzIGRyYWdnZWQgZG93biBmcm9tIHRoZSByb3N0cmEgYnkgbWVuIHdobyBoYWQgYmVlbiBzZW50IG9uIGJlZm9yZSwgYW5kIGJ1dGNoZXJlZDsgYW5kIHdlIGFyZSB0b2xkIHRoYXQgYSBDaGFsZGFlYW4gY2hhcnQgd2FzIGZvdW5kIGluIGhpcyBib3NvbSBhZnRlciBoZSBoYWQgYmVlbiBzbGFpbi4gTm93LCBpdCBzZWVtcyB2ZXJ5IHVuYWNjb3VudGFibGUgdGhhdCwgb2YgdHdvIG1vc3QgaWxsdXN0cmlvdXMgY29tbWFuZGVycywgTWFyaXVzIHNob3VsZCBzdWNjZWVkIGJ5IHJlZ2FyZGluZyBkaXZpbmF0aW9ucywgYnV0IE9jdGF2aXVzIHNob3VsZCBiZSBydWluZWQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYXR0ZXJzIGJlaW5nIGF0IHRoaXMgcGFzcywgdGhlIHNlbmF0ZSBtZXQgYW5kIHNlbnQgYSBkZXB1dGF0aW9uIHRvIENpbm5hIGFuZCBNYXJpdXMsIGJlZ2dpbmcgdGhlbSB0byBlbnRlciB0aGUgY2l0eSBhbmQgc3BhcmUgdGhlIGNpdGl6ZW5zLiBDaW5uYSwgYWNjb3JkaW5nbHksIGFzIGNvbnN1bCwgc2VhdGVkIG9uIGhpcyBjaGFpciBvZiBvZmZpY2UsIHJlY2VpdmVkIHRoZSBlbWJhc3N5IGFuZCBnYXZlIHRoZW0gYSBraW5kbHkgYW5zd2VyOyBidXQgTWFyaXVzLCBzdGFuZGluZyBieSB0aGUgY29uc3VsJ3MgY2hhaXIgd2l0aG91dCBzcGVha2luZyBhIHdvcmQsIG1hZGUgaXQgY2xlYXIgYWxsIHRoZSB3aGlsZSwgYnkgdGhlIGhlYXZpbmVzcyBvZiBoaXMgY291bnRlbmFuY2UgYW5kIHRoZSBnbG9vbWluZXNzIG9mIGhpcyBsb29rLCB0aGF0IGhlIHdvdWxkIGF0IG9uY2UgZmlsbCB0aGUgY2l0eSB3aXRoIHNsYXVnaHRlci4gQWZ0ZXIgdGhlIGNvbmZlcmVuY2Ugd2FzIG92ZXIgdGhleSBtb3ZlZCBvbiB0b3dhcmRzIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DaW5uYSBlbnRlcmVkIGl0IHdpdGggYSBib2R5Z3VhcmQsIGJ1dCBNYXJpdXMgaGFsdGVkIGF0IHRoZSBnYXRlcyBhbmQgYW5ncmlseSBkaXNzZW1ibGVkLCBzYXlpbmcgdGhhdCBoZSB3YXMgYW4gZXhpbGUgYW5kIHdhcyBleGNsdWRlZCBmcm9tIHRoZSBjb3VudHJ5IGJ5IHRoZSBsYXcsIGFuZCBpZiBoaXMgcHJlc2VuY2UgdGhlcmUgd2FzIGRlc2lyZWQsIHRoZSB2b3RlIHdoaWNoIGNhc3QgaGltIG91dCBtdXN0IGJlIHJlc2NpbmRlZCBieSBhbm90aGVyIHZvdGUsIHNpbmNlLCBpbmRlZWQsIGhlIHdhcyBhIGxhdy1hYmlkaW5nIG1hbiBhbmQgd2FzIHJldHVybmluZyB0byBhIGZyZWUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlIHBlb3BsZSB3ZXJlIHN1bW1vbmVkIHRvIHRoZSBmb3J1bTsgYW5kIGJlZm9yZSB0aHJlZSBvciBmb3VyIG9mIHRoZSB0cmliZXMgaGFkIGNhc3QgdGhlaXIgdm90ZXMsIGhlIHRocmV3IGFzaWRlIGhpcyBmZWlnbmluZyBhbmQgYWxsIHRoYXQgamV0dHkgdGFsayBhYm91dCBiZWluZyBhbiBleGlsZSwgYW5kIGVudGVyZWQgdGhlIGNpdHksIGhhdmluZyBhcyBoaXMgYm9keS1ndWFyZCBhIHBpY2tlZCBiYW5kIG9mIHRoZSBzbGF2ZXMgd2hvIGhhZCBmbG9ja2VkIHRvIGhpcyBzdGFuZGFyZCwgdG8gd2hvbSBoZSBoYWQgZ2l2ZW4gdGhlIG5hbWUgb2YgQmFyZHlhZWkuIFRoZXNlIGZlbGxvd3Mga2lsbGVkIG1hbnkgb2YgdGhlIGNpdGl6ZW5zIGF0IGEgd29yZCBvZiBjb21tYW5kIGZyb20gaGltLCBtYW55LCB0b28sIGF0IGEgbWVyZSBub2Q7IGFuZCBhdCBsYXN0LCB3aGVuIEFuY2hhcml1cywgYSBtYW4gb2Ygc2VuYXRvcmlhbCBhbmQgcHJhZXRvcmlhbCBkaWduaXR5LCBtZXQgTWFyaXVzIGFuZCBnb3Qgbm8gc2FsdXRhdGlvbiBmcm9tIGhpbSwgdGhleSBzdHJ1Y2sgaGltIGRvd24gd2l0aCB0aGVpciBzd29yZHMgYmVmb3JlIHRoZSBmYWNlIG9mIHRoZWlyIG1hc3Rlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd2hlbmV2ZXIgYW55Ym9keSBlbHNlIGdyZWV0ZWQgTWFyaXVzIGFuZCBnb3Qgbm8gc2FsdXRhdGlvbiBvciBncmVldGluZyBpbiByZXR1cm4sIHRoaXMgb2YgaXRzZWxmIHdhcyBhIHNpZ25hbCBmb3IgdGhlIG1hbidzIHNsYXVnaHRlciBpbiB0aGUgdmVyeSBzdHJlZXQsIHNvIHRoYXQgZXZlbiB0aGUgZnJpZW5kcyBvZiBNYXJpdXMsIHRvIGEgbWFuLCB3ZXJlIGZ1bGwgb2YgYW5ndWlzaCBhbmQgaG9ycm9yIHdoZW5ldmVyIHRoZXkgZHJldyBuZWFyIHRvIGdyZWV0IGhpbS4gU28gbWFueSB3ZXJlIHNsYWluIHRoYXQgYXQgbGFzdCBDaW5uYSdzIGFwcGV0aXRlIGZvciBtdXJkZXIgd2FzIGR1bGxlZCBhbmQgc2F0ZWQ7IGJ1dCBNYXJpdXMsIHdob3NlIGFuZ2VyIGluY3JlYXNlZCBkYXkgYnkgZGF5IGFuZCB0aGlyc3RlZCBmb3IgYmxvb2QsIGtlcHQgb24ga2lsbGluZyBhbGwgd2hvbSBoZSBoZWxkIGluIGFueSBzdXNwaWNpb24gd2hhdHNvZXZlci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RXZlcnkgcm9hZCBhbmQgZXZlcnkgY2l0eSB3YXMgZmlsbGVkIHdpdGggbWVuIHB1cnN1aW5nIGFuZCBodW50aW5nIGRvd24gdGhvc2Ugd2hvIHNvdWdodCB0byBlc2NhcGUgb3IgaGFkIGhpZGRlbiB0aGVtc2VsdmVzLiBNb3Jlb3ZlciwgdGhlIHRydXN0IC1tZW4gcGxhY2VkIGluIHRoZSB0aWVzIG9mIGhvc3BpdGFsaXR5IGFuZCBmcmllbmRzaGlwIHdhcyBmb3VuZCB0byBiZSBubyBzZWN1cml0eSBhZ2FpbnN0IHRoZSBzdHJva2VzIG9mIEZvcnR1bmU7IGZvciBmZXcgdGhlcmUgd2VyZSwgYWxsIHRvbGQsIHdobyBkaWQgbm90IGJldHJheSB0byB0aGUgbXVyZGVyZXJzIHRob3NlIHdobyBoYWQgdGFrZW4gcmVmdWdlIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoZSBtb3JlIHdvcnRoeSBvZiBwcmFpc2UgYW5kIGFkbWlyYXRpb24sIHRoZW4sIHdhcyB0aGUgYmVoYXZpb3VyIG9mIHRoZSBzbGF2ZXMgb2YgQ29ybnV0dXMuIFRoZXkgY29uY2VhbGVkIHRoZWlyIG1hc3RlciBpbiBoaXMgaG91c2U7IHRoZW4gdGhleSBodW5nIHVwIGJ5IHRoZSBuZWNrIG9uZSBvZiB0aGUgbWFueSBkZWFkIGJvZGllcyB0aGF0IGxheSBhYm91dCwgcHV0IGEgZ29sZCByaW5nIG9uIGl0cyBmaW5nZXIsIGFuZCBzaG93ZWQgaXQgdG8gdGhlIGd1YXJkcyBvZiBNYXJpdXMsIGFmdGVyIHdoaWNoIHRoZXkgZGVja2VkIGl0IG91dCBhcyBpZiBpdCB3ZXJlIHRoZWlyIG1hc3RlcidzIGJvZHkgYW5kIGdhdmUgaXQgYnVyaWFsLiBOb2JvZHkgc3VzcGVjdGVkIHRoZSBydXNlLCBhbmQgdGh1cyBDb3JudXR1cyBlc2NhcGVkIG5vdGljZSBhbmQgd2FzIGNvbnZleWVkIGJ5IGhpcyBzbGF2ZXMgaW50byBHYXVsLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY3VzIEFudG9uaXVzIGFsc28sIHRoZSBvcmF0b3IsIGZvdW5kIGEgZmFpdGhmdWwgZnJpZW5kLCBidXQgaXQgZGlkIG5vdCBzYXZlIGhpbS4gRm9yIHRoaXMgZnJpZW5kLCB3aG8gd2FzIGEgcG9vciBwbGViZWlhbiBhbmQgaGFkIHJlY2VpdmVkIGludG8gaGlzIGhvdXNlIGEgbGVhZGluZyBtYW4gb2YgUm9tZSwgd2hvbSBoZSB3aXNoZWQgdG8gZW50ZXJ0YWluIGFzIHdlbGwgYXMgaGUgY291bGQsIHNlbnQgYSBzbGF2ZSB0byBhIG5laWdoYm91cmluZyBpbm5rZWVwZXIgdG8gZ2V0IHNvbWUgd2luZS4gQXMgdGhlIHNsYXZlIHRhc3RlZCB0aGUgd2luZSBtb3JlIGNhcmVmdWxseSB0aGFuIHVzdWFsIGFuZCBvcmRlcmVkIHNvbWUgb2YgYmV0dGVyIHF1YWxpdHksIHRoZSBpbm5rZWVwZXIgYXNrZWQgaGltIHdoYXQgd2FzIHRoZSByZWFzb24gdGhhdCBoZSBkaWQgbm90IGJ1eSB0aGUgbmV3IGFuZCBvcmRpbmFyeSB3aW5lIGFzIHVzdWFsLCBpbnN0ZWFkIG9mIHdhbnRpbmcgc29tZSB0aGF0IHdhcyBjaG9pY2UgYW5kIGV4cGVuc2l2ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNsYXZlLCBpbiBoaXMgZ3JlYXQgc2ltcGxpY2l0eSwgY29uc2Npb3VzIHRoYXQgaGUgd2FzIGRlYWxpbmcgd2l0aCBhbiBvbGQgYWNxdWFpbnRhbmNlLCB0b2xkIGhpbSB0aGF0IGhpcyBtYXN0ZXIgd2FzIGVudGVydGFpbmluZyBNYXJjdXMgQW50b25pdXMsIHdobyB3YXMgY29uY2VhbGVkIGF0IGhpcyBob3VzZS4gQXMgc29vbiBhcyB0aGUgc2xhdmUgaGFkIGdvbmUgaG9tZSwgdGhlIGlubmtlZXBlciwgd2hvIHdhcyBhbiBpbXBpb3VzIGFuZCBwZXN0aWxlbnQgZmVsbG93LCBoYXN0ZW5lZCBpbiBwZXJzb24gdG8gZmluZCBNYXJpdXMsIHdobyB3YXMgYWxyZWFkeSBhdCBzdXBwZXIsIGFuZCBvbiBiZWluZyBpbnRyb2R1Y2VkLCBwcm9taXNlZCB0byBiZXRyYXkgQW50b25pdXMgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIE1hcml1cyBoZWFyZCB0aGlzLCBhcyB3ZSBhcmUgdG9sZCwgYSBsb3VkIGNyeSBidXJzdCBmcm9tIGhpcyBsaXBzIGFuZCBoZSBjbGFwcGVkIGhpcyBoYW5kcyBmb3Igam95OyBoZSBhY3R1YWxseSBjYW1lIG5lYXIgc3ByaW5naW5nIGZyb20gaGlzIHNlYXQgYW5kIGh1cnJ5aW5nIHRvIHRoZSBwbGFjZSBoaW1zZWxmLCBidXQgaGlzIGZyaWVuZHMgcmVzdHJhaW5lZCBoaW07IHNvIGhlIHNlbnQgQW5uaXVzIGFuZCBzb21lIHNvbGRpZXJzIHdpdGggaGltLCBvcmRlcmluZyB0aGVtIHRvIGJyaW5nIGhpbSB0aGUgaGVhZCBvZiBBbnRvbml1cyB3aXRoIGFsbCBzcGVlZC4gQWNjb3JkaW5nbHksIHdoZW4gdGhleSB3ZXJlIGNvbWUgdG8gdGhlIGhvdXNlLCBBbm5pdXMgc3RvcHBlZCBhdCB0aGUgZG9vciwgd2hpbGUgdGhlIHNvbGRpZXJzIGNsaW1iZWQgdGhlIHN0YWlycyBhbmQgZW50ZXJlZCB0aGUgcm9vbS4gQnV0IHdoZW4gdGhleSBiZWhlbGQgQW50b25pdXMsIGV2ZXJ5IG1hbiBiZWdhbiB0byB1cmdlIGFuZCBwdXNoIGZvcndhcmQgYSBjb21wYW5pb24gdG8gZG8gdGhlIG11cmRlciBpbnN0ZWFkIG9mIGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIGluZGVzY3JpYmFibGUsIGhvd2V2ZXIsIGFzIGl0IHdvdWxkIHNlZW0sIHdhcyB0aGUgZ3JhY2UgYW5kIGNoYXJtIG9mIGhpcyB3b3JkcywgdGhhdCB3aGVuIEFudG9uaXVzIGJlZ2FuIHRvIHNwZWFrIGFuZCBwcmF5IGZvciBoaXMgbGlmZSwgbm90IGEgc29sZGllciBoYWQgdGhlIGhhcmRpaG9vZCB0byBsYXkgaGFuZHMgb24gaGltIG9yIGV2ZW4gdG8gbG9vayBoaW0gaW4gdGhlIGZhY2UsIGJ1dCB0aGV5IGFsbCBiZW50IHRoZWlyIGhlYWRzIGRvd24gYW5kIHdlcHQuIFBlcmNlaXZpbmcgdGhhdCB0aGVyZSB3YXMgc29tZSBkZWxheSwgQW5uaXVzIHdlbnQgdXBzdGFpcnMsIGFuZCBzYXcgdGhhdCBBbnRvbml1cyB3YXMgcGxlYWRpbmcgYW5kIHRoYXQgdGhlIHNvbGRpZXJzIHdlcmUgYWJhc2hlZCBhbmQgZW5jaGFudGVkIGJ5IGhpcyB3b3Jkczsgc28gaGUgY3Vyc2VkIGhpcyBtZW4sIGFuZCBydW5uaW5nIHVwIHRvIEFudG9uaXVzLCB3aXRoIGhpcyBvd24gaGFuZHMgY3V0IG9mZiBoaXMgaGVhZC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGUgZnJpZW5kcyBvZiBDYXR1bHVzIEx1dGF0aXVzLCB3aG8gaGFkIGJlZW4gYSBjb2xsZWFndWUgb2YgTWFyaXVzIGluIHRoZSBjb25zdWxzaGlwLCBhbmQgd2l0aCBoaW0gaGFkIGNlbGVicmF0ZWQgYSB0cml1bXBoIG92ZXIgdGhlIENpbWJyaSwgaW50ZXJjZWRlZCBmb3IgaGltIGFuZCBiZWdnZWQgTWFyaXVzIHRvIHNwYXJlIGhpcyBsaWZlOyBidXQgdGhlIG9ubHkgYW5zd2VyIHRoZXkgY291bGQgZ2V0IHdhczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZSBtdXN0IGRpZS48L3E+IENhdHVsdXMgdGhlcmVmb3JlIHNodXQgaGltc2VsZiB1cCBpbiBhIHJvb20sIGxpZ2h0ZWQgdXAgYSBncmVhdCBxdWFudGl0eSBvZiBjaGFyY29hbCwgYW5kIHdhcyBzdWZmb2NhdGVkLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlYWRsZXNzIHRydW5rcyB0aHJvd24gaW50byB0aGUgc3RyZWV0cyBhbmQgdHJhbXBsZWQgdW5kZXIgZm9vdCBleGNpdGVkIG5vIHBpdHksIHRob3VnaCBldmVyeWJvZHkgdHJlbWJsZWQgYW5kIHNodWRkZXJlZCBhdCB0aGUgc2lnaHQuIFRoZSBwZW9wbGUgd2VyZSBtb3N0IGRpc3RyZXNzZWQsIGhvd2V2ZXIsIGJ5IHRoZSB3YW50b24gbGljZW5jZSBvZiB0aGUgQmFyZHlhZWksIGFzIHRoZXkgd2VyZSBjYWxsZWQsIHdobyBidXRjaGVyZWQgZmF0aGVycyBvZiBmYW1pbGllcyBpbiB0aGVpciBob3VzZXMsIG91dHJhZ2VkIHRoZWlyIGNoaWxkcmVuLCB2aW9sYXRlZCB0aGVpciB3aXZlcywgYW5kIGNvdWxkIG5vdCBiZSBjaGVja2VkIGluIHRoZWlyIGNhcmVlciBvZiByYXBpbmUgYW5kIG11cmRlciB1bnRpbCBDaW5uYSBhbmQgU2VydG9yaXVzLCBhZnRlciB0YWtpbmcgY291bnNlbCB0b2dldGhlciwgZmVsbCB1cG9uIHRoZW0gYXMgdGhleSB3ZXJlIGFzbGVlcCBpbiB0aGVpciBjYW1wLCBhbmQgdHJhbnNmaXhlZCB0aGVtIGFsbCB3aXRoIGphdmVsaW5zLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiA1LjUiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPlNlcnRvcml1cyA8L3RpdGxlPiwgdi4gNSA8L2JpYmw+LiA8L25vdGU+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQ1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBhcyBpZiBhIGNoYW5nZSBvZiB3aW5kIHdlcmUgY29taW5nIG9uLCBtZXNzZW5nZXJzIGFycml2ZWQgZnJvbSBhbGwgcXVhcnRlcnMgd2l0aCByZXBvcnRzIHRoYXQgU3VsbGEgaGFkIGZpbmlzaGVkIHRoZSB3YXIgd2l0aCBNaXRocmlkYXRlcywgaGFkIHJlY292ZXJlZCB0aGUgcHJvdmluY2VzLCBhbmQgd2FzIHNhaWxpbmcgZm9yIGhvbWUgd2l0aCBhIGxhcmdlIGZvcmNlLiBUaGlzIGdhdmUgYSBicmllZiBzdGF5IGFuZCBhIHNsaWdodCBjZXNzYXRpb24gdG8gdGhlIGNpdHkncyB1bnNwZWFrYWJsZSBldmlscywgc2luY2UgbWVuIHN1cHBvc2VkIHRoYXQgdGhlIHdhciB3YXMgYWxsIGJ1dCB1cG9uIHRoZW0uIEFjY29yZGluZ2x5LCBNYXJpdXMgd2FzIGVsZWN0ZWQgY29uc3VsIGZvciB0aGUgc2V2ZW50aCB0aW1lLCBhbmQgYXNzdW1pbmcgb2ZmaWNlIG9uIHRoZSB2ZXJ5IENhbGVuZHMgb2YgSmFudWFyeSwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODYgQi5DLiA8L25vdGU+IHdoaWNoIGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHllYXIsIGhlIGhhZCBhIGNlcnRhaW4gU2V4dHVzIEx1Y2ludXMgdGhyb3duIGRvd24gdGhlIFRhcnBlaWFuIHJvY2suIFRoaXMgd2FzIHRob3VnaHQgdG8gYmUgYSBtb3N0IHNpZ25pZmljYW50IHBvcnRlbnQgb2YgdGhlIGV2aWxzIHRoYXQgd2VyZSBvbmNlIG1vcmUgdG8gZmFsbCBib3RoIHVwb24gdGhlIHBhcnRpc2FucyBvZiBNYXJpdXMgYW5kIHVwb24gdGhlIGNpdHkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTWFyaXVzIGhpbXNlbGYsIG5vdyB3b3JuIG91dCB3aXRoIHRvaWxzLCBkZWx1Z2VkLCBhcyBpdCB3ZXJlLCB3aXRoIGFueGlldGllcywgYW5kIHdlYXJpZWQsIGNvdWxkIG5vdCBzdXN0YWluIGhpcyBzcGlyaXRzLCB3aGljaCBzaG9vayB3aXRoaW4gaGltIGFzIGhlIGFnYWluIGZhY2VkIHRoZSBvdmVycG93ZXJpbmcgdGhvdWdodCBvZiBhIG5ldyB3YXIsIG9mIGZyZXNoIHN0cnVnZ2xlcywgb2YgdGVycm9ycyBrbm93biBieSBleHBlcmllbmNlIHRvIGJlIGRyZWFkZnVsLCBhbmQgb2YgdXR0ZXIgd2VhcmluZXNzLiBIZSByZWZsZWN0ZWQsIHRvbywgdGhhdCBpdCB3YXMgbm90IE9jdGF2aXVzIG9yIE1lcnVsYSBpbiBjb21tYW5kIG9mIGEgcHJvbWlzY3VvdXMgdGhyb25nIGFuZCBhIHNlZGl0aW91cyByYWJibGUgYWdhaW5zdCB3aG9tIGhlIHdhcyBub3cgdG8gcnVuIHRoZSBoYXphcmQgb2Ygd2FyLCBidXQgdGhhdCB0aGUgZmFtb3VzIFN1bGxhIHdhcyBjb21pbmcgYWdhaW5zdCBoaW0sIHRoZSBtYW4gd2hvIGhhZCBvbmNlIGVqZWN0ZWQgaGltIGZyb20gdGhlIGNvdW50cnksIGFuZCBoYWQgbm93IHNodXQgTWl0aHJpZGF0ZXMgdXAgdG8gdGhlIHNob3JlcyBvZiB0aGUgRXV4aW5lIFNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VG9ydHVyZWQgYnkgc3VjaCByZWZsZWN0aW9ucywgYW5kIGJyaW5naW5nIGludG8gcmV2aWV3IGhpcyBsb25nIHdhbmRlcmluZywgaGlzIGZsaWdodHMsIGFuZCBoaXMgcGVyaWxzLCBhcyBoZSB3YXMgZHJpdmVuIG92ZXIgbGFuZCBhbmQgc2VhLCBoZSBmZWxsIGludG8gYSBzdGF0ZSBvZiBkcmVhZGZ1bCBkZXNwYWlyLCBhbmQgd2FzIGEgcHJleSB0byBuaWdodGx5IHRlcnJvcnMgYW5kIGhhcmFzc2luZyBkcmVhbXMsIHdoZXJlaW4gaGUgd291bGQgZXZlciBzZWVtIHRvIGhlYXIgYSB2b2ljZSBzYXlpbmc64oCUCgkJCQkKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+RHJlYWRmdWwsIGluZGVlZCwgaXMgdGhlIGxpb24ncyBsYWlyLCBldmVuIHRob3VnaCBpdCA8L2w+CgkJCQkJICAgICAgICAgIDxsPmJlIGVtcHR5LjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgaGV4YW1ldGVyIHZlcnNlIG9mIHVua25vd24gYXV0aG9yc2hpcC4gPC9ub3RlPiAKCQkJCQoJCQkJQW5kIHNpbmNlIGFib3ZlIGFsbCB0aGluZ3MgaGUgZHJlYWRlZCB0aGUgc2xlZXBsZXNzIG5pZ2h0cywgaGUgZ2F2ZSBoaW1zZWxmIHVwIHRvIGRyaW5raW5nLWJvdXRzIGFuZCBkcnVua2VubmVzcyBhdCB1bnNlYXNvbmFibGUgaG91cnMgYW5kIGluIGEgbWFubmVyIHVuc3VpdGVkIHRvIGhpcyB5ZWFycywgdHJ5aW5nIHRodXMgdG8gaW5kdWNlIHNsZWVwIGFzIGEgd2F5IG9mIGVzY2FwZSBmcm9tIGhpcyBhbnhpb3VzIHRob3VnaHRzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZmluYWxseSwgd2hlbiBvbmUgY2FtZSB3aXRoIHRpZGluZ3MgZnJvbSB0aGUgc2VhLCBmcmVzaCB0ZXJyb3JzIGZlbGwgdXBvbiBoaW0sIHBhcnRseSBiZWNhdXNlIGhlIGZlYXJlZCB0aGUgZnV0dXJlLCBhbmQgcGFydGx5IGJlY2F1c2UgaGUgd2FzIHdlYXJpZWQgdG8gc2F0aWV0eSBieSB0aGUgcHJlc2VudCwgc28gdGhhdCBpdCBuZWVkZWQgb25seSBhIHNsaWdodCBpbXB1bHNlIHRvIHRocm93IGhpbSBpbnRvIGEgcGxldXJpc3ksIGFzIFBvc2VpZG9uaXVzIHRoZSBwaGlsb3NvcGhlciByZWxhdGVzLCB3aG8gc2F5cyB0aGF0IGhlIHdlbnQgaW4gcGVyc29uYWxseSBhbmQgY29udmVyc2VkIHdpdGggTWFyaXVzIG9uIHRoZSBzdWJqZWN0cyBvZiBoaXMgZW1iYXNzeSBhZnRlciBNYXJpdXMgaGFkIGZhbGxlbiBpbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhIGNlcnRhaW4gQ2FpdXMgUGlzbywgYW4gaGlzdG9yaWFuLCByZWxhdGVzIHRoYXQgTWFyaXVzLCB3aGlsZSB3YWxraW5nIGFib3V0IHdpdGggaGlzIGZyaWVuZHMgYWZ0ZXIgc3VwcGVyLCBmZWxsIHRvIHRhbGtpbmcgYWJvdXQgdGhlIGV2ZW50cyBvZiBoaXMgbGlmZSwgYmVnaW5uaW5nIHdpdGggaGlzIGVhcmxpZXN0IGRheXMsIGFuZCBhZnRlciByZWNvdW50aW5nIGhpcyBmcmVxdWVudCByZXZlcnNhbHMgb2YgZm9ydHVuZSwgZnJvbSBnb29kIHRvIGJhZCBhbmQgZnJvbSBiYWQgdG8gZ29vZCwgc2FpZCB0aGF0IGl0IHdhcyBub3QgdGhlIHBhcnQgb2YgYSBtYW4gb2Ygc2Vuc2UgdG8gdHJ1c3QgaGltc2VsZiB0byBGb3J0dW5lIGFueSBsb25nZXI7IGFuZCBhZnRlciB0aGlzIHV0dGVyYW5jZSBiYWRlIGhpcyBmcmllbmRzIGZhcmV3ZWxsLCBrZXB0IGhpcyBiZWQgZm9yIHNldmVuIGRheXMgY29uc2VjdXRpdmVseSwgYW5kIHNvIGRpZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGhpcyBhbWJpdGlvdXMgbmF0dXJlIHdhcyBjb21wbGV0ZWx5IHJldmVhbGVkIGR1cmluZyBoaXMgaWxsbmVzcyBieSBoaXMgYmVpbmcgc3dlcHQgaW50byBhIHN0cmFuZ2UgZGVsdXNpb24uIEhlIHRob3VnaHQgdGhhdCBoZSBoYWQgdGhlIGNvbW1hbmQgaW4gdGhlIE1pdGhyaWRhdGljIHdhciwgYW5kIHRoZW4sIGp1c3QgYXMgaGUgdXNlZCB0byBkbyBpbiBoaXMgYWN0dWFsIHN0cnVnZ2xlcywgaGUgd291bGQgaW5kdWxnZSBpbiBhbGwgc29ydHMgb2YgYXR0aXR1ZGVzIGFuZCBnZXN0dXJlcywgYWNjb21wYW55aW5nIHRoZW0gd2l0aCBzaHJpbGwgY3JpZXMgYW5kIGZyZXF1ZW50IGNhbGxzIHRvIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+U28gZmllcmNlIGFuZCBpbmV4b3JhYmxlIHdhcyB0aGUgcGFzc2lvbiBmb3IgZGlyZWN0aW5nIHRoYXQgd2FyIHdoaWNoIGhhZCBiZWVuIGluc3RpbGxlZCBpbnRvIGhpbSBieSBoaXMgZW52eSBhbmQgbHVzdCBvZiBwb3dlci4gQW5kIHRoZXJlZm9yZSwgdGhvdWdoIGhlIGhhZCBsaXZlZCB0byBiZSBzZXZlbnR5IHllYXJzIG9sZCwgYW5kIHdhcyB0aGUgZmlyc3QgbWFuIHRvIGJlIGVsZWN0ZWQgY29uc3VsIGZvciB0aGUgc2V2ZW50aCB0aW1lLCBhbmQgd2FzIHBvc3Nlc3NlZCBvZiBhIGhvdXNlIGFuZCB3ZWFsdGggd2hpY2ggd291bGQgaGF2ZSBzdWZmaWNlZCBmb3IgbWFueSBraW5nZG9tcyBhdCBvbmNlLCBoZSBsYW1lbnRlZCBoaXMgZm9ydHVuZSwgaW4gdGhhdCBoZSB3YXMgZHlpbmcgYmVmb3JlIGhlIGhhZCBzYXRpc2ZpZWQgYW5kIGNvbXBsZXRlZCBoaXMgZGVzaXJlcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlBsYXRvLCBob3dldmVyLCB3aGVuIGhlIHdhcyBub3cgYXQgdGhlIHBvaW50IG9mIGRlYXRoLCBsYXVkZWQgaGlzIGd1YXJkaWFuIGdlbml1cyBhbmQgRm9ydHVuZSBiZWNhdXNlLCB0byBiZWdpbiB3aXRoLCBoZSBoYWQgYmVlbiBib3JuIGEgbWFuIGFuZCBub3QgYW4gaXJyYXRpb25hbCBhbmltYWw7IGFnYWluLCBiZWNhdXNlIGhlIHdhcyBhIEdyZWVrIGFuZCBub3QgYSBCYXJiYXJpYW47IGFuZCBzdGlsbCBhZ2FpbiwgYmVjYXVzZSBoaXMgYmlydGggaGFkIGZhbGxlbiBpbiB0aGUgdGltZXMgb2YgU29jcmF0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhleSBzYXkgdGhhdCBBbnRpcGF0ZXIgb2YgVGFyc3VzLCB3aGVuIGhlIHdhcyBpbiBsaWtlIG1hbm5lciBuZWFyIGhpcyBlbmQgYW5kIHdhcyBlbnVtZXJhdGluZyB0aGUgYmxlc3NpbmdzIG9mIGhpcyBsaWZlLCBkaWQgbm90IGZvcmdldCB0byBtZW50aW9uIGhpcyBwcm9zcGVyb3VzIHZveWFnZSBmcm9tIGhvbWUgdG8gQXRoZW5zLCBqdXN0IGFzIHRob3VnaCBoZSB0aG91Z2h0IHRoYXQgZXZlcnkgZ2lmdCBvZiBhIGJlbmV2b2xlbnQgRm9ydHVuZSBjYWxsZWQgZm9yIGdyZWF0IGdyYXRpdHVkZSwgYW5kIGtlcHQgaXQgdG8gdGhlIGxhc3QgaW4gaGlzIG1lbW9yeSwgd2hpY2ggaXMgdGhlIG1vc3Qgc2VjdXJlIHN0b3JlaG91c2Ugb2YgYmxlc3NpbmdzIGZvciBhIG1hbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VW5taW5kZnVsIGFuZCB0aG91Z2h0bGVzcyBwZXJzb25zLCBvbiB0aGUgY29udHJhcnksIGxldCBhbGwgdGhhdCBoYXBwZW5zIHRvIHRoZW0gc2xpcCBhd2F5IGFzIHRpbWUgZ29lcyBvbjsgdGhlcmVmb3JlLCBzaW5jZSB0aGV5IGRvIG5vdCBob2xkIG9yIGtlZXAgYW55dGhpbmcsIHRoZXkgYXJlIGFsd2F5cyBlbXB0eSBvZiBibGVzc2luZ3MsIGJ1dCBmdWxsIG9mIGhvcGVzLCBhbmQgYXJlIGxvb2tpbmcgYXdheSB0byB0aGUgZnV0dXJlIHdoaWxlIHRoZXkgbmVnbGVjdCB0aGUgcHJlc2VudC4gQW5kIHlldCB0aGUgZnV0dXJlIG1heSBiZSBwcmV2ZW50ZWQgYnkgRm9ydHVuZSwgd2hpbGUgdGhlIHByZXNlbnQgY2Fubm90IGJlIHRha2VuIGF3YXk7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm5ldmVydGhlbGVzcyB0aGVzZSBtZW4gY2FzdCBhc2lkZSB0aGUgcHJlc2VudCBnaWZ0IG9mIEZvcnR1bmUgYXMgc29tZXRoaW5nIGFsaWVuIHRvIHRoZW0sIHdoaWxlIHRoZXkgZHJlYW0gb2YgdGhlIGZ1dHVyZSBhbmQgaXRzIHVuY2VydGFpbnRpZXMuIEFuZCB0aGlzIGlzIG5hdHVyYWwuIEZvciB0aGV5IGFzc2VtYmxlIGFuZCBoZWFwIHRvZ2V0aGVyIHRoZSBleHRlcm5hbCBibGVzc2luZ3Mgb2YgbGlmZSBiZWZvcmUgcmVhc29uIGFuZCBlZHVjYXRpb24gaGF2ZSBlbmFibGVkIHRoZW0gdG8gYnVpbGQgYW55IGZvdW5kYXRpb24gYW5kIGJhc2VtZW50IGZvciB0aGVzZSB0aGluZ3MsIGFuZCB0aGVyZWZvcmUgdGhleSBjYW5ub3Qgc2F0aXNmeSB0aGUgaW5zYXRpYWJsZSBhcHBldGl0ZSBvZiB0aGVpciBzb3Vscy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBNYXJpdXMgZGllZCwgc2V2ZW50ZWVuIGRheXMgYWZ0ZXIgZW50ZXJpbmcgdXBvbiBoaXMgc2V2ZW50aCBjb25zdWxzaGlwLiBBbmQgaW1tZWRpYXRlbHkgUm9tZSB3YXMgZmlsbGVkIHdpdGggZ3JlYXQgcmVqb2ljaW5nIGFuZCBhIGNvbmZpZGVudCBob3BlIHRoYXQgc2hlIHdhcyByaWQgb2YgYSBncmlldm91cyB0eXJhbm55OyBidXQgaW4gYSBmZXcgZGF5cyB0aGUgcGVvcGxlIHBlcmNlaXZlZCB0aGF0IHRoZXkgaGFkIGdvdCBhIG5lcnZlIGFuZCB2aWdvcm91cyBtYXN0ZXIgaW4gZXhjaGFuZ2UgZm9yIHRoZSBvbGQgb25lOyBzdWNoIGJpdHRlcm5lc3MgYW5kIGNydWVsdHkgZGlkIHRoZSB5b3VuZ2VyIE1hcml1cyBkaXNwbGF5LCBwdXR0aW5nIHRvIGRlYXRoIHRoZSBiZXN0IGFuZCBtb3N0IGVzdGVlbWVkIGNpdGl6ZW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBnb3QgdGhlIHJlcHV0YXRpb24gb2YgYmVpbmcgYm9sZCBhbmQgZm9uZCBvZiBkYW5nZXIgaW4gZmlnaHRpbmcgaGlzIGVuZW1pZXMsIGFuZCBpbiB0aGUgYmVnaW5uaW5nIHdhcyBjYWxsZWQgYSBzb24gb2YgTWFyczsgYnV0IGhpcyBkZWVkcyBzb29uIHNob3dlZCB3aGF0IGhlIHJlYWxseSB3YXMsIGFuZCBoZSB3YXMgY2FsbGVkIGluc3RlYWQgYSBzb24gb2YgVmVudXMuIEFuZCBmaW5hbGx5IGhlIHdhcyBzaHV0IHVwIGluIFByYWVuZXN0ZSBieSBTdWxsYSwgYW5kIGFmdGVyIG1hbnkgdmFpbiBhdHRlbXB0cyB0byBzYXZlIGhpcyBsaWZlLCB3aGVuIHRoZSBjaXR5IHdhcyBjYXB0dXJlZCBhbmQgaGUgY291bGQgbm90IGVzY2FwZSwgaGUgc2xldyBoaW1zZWxmLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAzMi4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TdWxsYSA8L3RpdGxlPiwgeHh4aWkuIDEgPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgPC9ib2R5PgogICA8L3RleHQ+Cjxib2R5IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q0FJVVMgTUFSSVVTPC9oZWFkPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T2YgYSB0aGlyZCBuYW1lIGZvciBDYWl1cyBNYXJpdXMgd2UgYXJlIGlnbm9yYW50LCBhcyB3ZSBhcmUgaW4gdGhlIGNhc2Ugb2YgUXVpbnR1cyBTZXJ0b3JpdXMgdGhlIHN1YmR1ZXIgb2YgU3BhaW4sIGFuZCBvZiBMdWNpdXMgTXVtbWl1cyB0aGUgY2FwdG9yIG9mIENvcmludGg7IGZvciBNdW1taXVzIHJlY2VpdmVkIHRoZSBzdXJuYW1lIG9mIEFjaGHDr2N1cyBmcm9tIGhpcyBncmVhdCBleHBsb2l0LCBhcyBTY2lwaW8gcmVjZWl2ZWQgdGhhdCBvZiBBZnJpY2FudXMsIGFuZCBNZXRlbGx1cyB0aGF0IG9mIE1hY2Vkb25pY3VzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhpcyBjaXJjdW1zdGFuY2UgcGFydGljdWxhcmx5IFBvc2VpZG9uaXVzIHRoaW5rcyB0byBjb25mdXRlIHRob3NlIHdobyBob2xkIHRoYXQgdGhlIHRoaXJkIG5hbWUgaXMgdGhlIFJvbWFuIHByb3BlciBuYW1lLCBhcywgZm9yIGluc3RhbmNlLCBDYW1pbGx1cywgTWFyY2VsbHVzLCBvciBDYXRvOyBmb3IgaWYgdGhhdCB3ZXJlIHNvLCBoZSBzYXlzLCB0aGVuIHRob3NlIHdpdGggb25seSB0d28gbmFtZXMgd291bGQgaGF2ZSBoYWQgbm8gcHJvcGVyIG5hbWUgYXQgYWxsLiBCdXQgaXQgZXNjYXBlcyBoaXMgbm90aWNlIHRoYXQgaGlzIG93biBsaW5lIG9mIHJlYXNvbmluZywgaWYgZXh0ZW5kZWQgdG8gd29tZW4sIHJvYnMgdGhlbSBvZiB0aGVpciBwcm9wZXIgbmFtZXM7IGZvciBubyB3b21hbiBpcyBnaXZlbiB0aGUgZmlyc3QgbmFtZSwgd2hpY2ggUG9zZWlkb25pdXMgdGhpbmtzIHdhcyB0aGUgcHJvcGVyIG5hbWUgYW1vbmcgdGhlIFJvbWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIG9mIHRoZSBvdGhlciB0d28gbmFtZXMsIG9uZSB3YXMgY29tbW9uIHRvIHRoZSB3aG9sZSBmYW1pbHksIGFzIGluIHRoZSBjYXNlIG9mIHRoZSBQb21wZWlpLCB0aGUgTWFubGlpLCBvciB0aGUgQ29ybmVsaWkgKGp1c3QgYXMgYSBHcmVlayBtaWdodCBzcGVhayBvZiB0aGUgSGVyYWNsZWlkYWUgb3IgdGhlIFBlbG9waWRhZSksIGFuZCB0aGUgb3RoZXIgd2FzIGEgY29nbm9tZW4gb3IgZXBpdGhldCwgZ2l2ZW4gd2l0aCByZWZlcmVuY2UgdG8gdGhlaXIgbmF0dXJlcyBvciB0aGVpciBhY3Rpb25zLCBvciB0byB0aGVpciBib2RpbHkgYXBwZWFyYW5jZXMgb3IgZGVmZWN0cywgTWFjcmludXMsIGZvciBleGFtcGxlLCBvciBUb3JxdWF0dXMsIG9yIFN1bGxhIChsaWtlIHRoZSBHcmVlayBNbmVtb24sIEdyeXB1cywgb3IgQ2FsbGluaWN1cykuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBmdWxsIG5hbWUgb2YgYSBSb21hbiBjaXRpemVuIGNvbnNpc3RlZCBvZiBhIDxmb3JlaWduIGxhbmc9ImxhIj5wcmFlbm9tZW4gPC9mb3JlaWduPiAodGhlIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Z2xvc3M+Z2l2ZW4gPC9nbG9zcz4sPC9xPiBvciAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGdsb3NzPnByb3BlciA8L2dsb3NzPgogICAgICAgICAgICAgICA8L3E+IG5hbWUpLCBhIDxmb3JlaWduIGxhbmc9ImxhIj5ub21lbiA8L2ZvcmVpZ24+IGRlc2lnbmF0aW5nIGhpcyBmYW1pbHkgb3IgPGZvcmVpZ24gbGFuZz0ibGEiPmdlbnMgPC9mb3JlaWduPiwgYW5kIGEgPGZvcmVpZ24gbGFuZz0ibGEiPmNvZ25vbWVuIDwvZm9yZWlnbj4sIHdoaWNoIHdhcyBhbHNvIGhlcmVkaXRhcnkuIFdvbWVuIHJhcmVseSBoYWQgYSA8Zm9yZWlnbiBsYW5nPSJsYSI+cHJhZW5vbWVuIDwvZm9yZWlnbj4sIG9yIAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Z2xvc3M+cHJvcGVyIDwvZ2xvc3M+CiAgICAgICAgICAgICAgIDwvcT4gbmFtZSwgYnV0IGJvcmUgdGhlIGZhbWlseSBuYW1lIG9ubHkuIDwvbm90ZT4gSG93ZXZlciwgaW4gdGhlc2UgbWF0dGVycyB0aGUgaXJyZWd1bGFyaXR5IG9mIGN1c3RvbSBmdXJuaXNoZXMgbWFueSB0b3BpY3MgZm9yIGRpc2N1c3Npb24uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgcGVyc29uYWwgYXBwZWFyYW5jZSBvZiBNYXJpdXMsIHdlIGhhdmUgc2VlbiBhIG1hcmJsZSBzdGF0dWUgb2YgaGltIGF0IFJhdmVubmEgaW4gR2F1bCwgYW5kIGl0IHZlcnkgd2VsbCBwb3J0cmF5cyB0aGUgaGFyc2huZXNzIGFuZCBiaXR0ZXJuZXNzIG9mIGNoYXJhY3RlciB3aGljaCBhcmUgYXNjcmliZWQgdG8gaGltLiBGb3Igc2luY2UgaGUgd2FzIG5hdHVyYWxseSB2aXJpbGUgYW5kIGZvbmQgb2Ygd2FyLCBhbmQgc2luY2UgaGUgcmVjZWl2ZWQgYSB0cmFpbmluZyBpbiBtaWxpdGFyeSByYXRoZXIgdGhhbiBpbiBjaXZpbCBsaWZlLCBoaXMgdGVtcGVyIHdhcyBmaWVyY2Ugd2hlbiBoZSBjYW1lIHRvIGV4ZXJjaXNlIGF1dGhvcml0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdlIGFyZSB0b2xkIHRoYXQgaGUgbmV2ZXIgc3R1ZGllZCBHcmVlayBsaXRlcmF0dXJlLCBhbmQgbmV2ZXIgdXNlZCB0aGUgR3JlZWsgbGFuZ3VhZ2UgZm9yIGFueSBtYXR0ZXIgb2YgcmVhbCBpbXBvcnRhbmNlLCB0aGlua2luZyBpdCByaWRpY3Vsb3VzIHRvIHN0dWR5IGEgbGl0ZXJhdHVyZSB0aGUgdGVhY2hlcnMgb2Ygd2hpY2ggd2VyZSB0aGUgc3ViamVjdHMgb2YgYW5vdGhlciBwZW9wbGU7IGFuZCB3aGVuLCBhZnRlciBoaXMgc2Vjb25kIHRyaXVtcGggYW5kIGF0IHRoZSBjb25zZWNyYXRpb24gb2Ygc29tZSB0ZW1wbGUsIGhlIGZ1cm5pc2hlZCB0aGUgcHVibGljIHdpdGggR3JlZWsgc3BlY3RhY2xlcywgdGhvdWdoIGhlIGNhbWUgaW50byB0aGUgdGhlYXRyZSwgaGUgbWVyZWx5IHNhdCBkb3duLCBhbmQgYXQgb25jZSB3ZW50IGF3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBqdXN0IGFzIFBsYXRvIHdhcyB3b250IHRvIHNheSBvZnRlbiB0byBYZW5vY3JhdGVzIHRoZSBwaGlsb3NvcGhlciwgd2hvIGhhZCB0aGUgcmVwdXRhdGlvbiBvZiBiZWluZyByYXRoZXIgbW9yb3NlIGluIGhpcyBkaXNwb3NpdGlvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIFhlbm9jcmF0ZXMsIHNhY3JpZmljZSB0byB0aGUgR3JhY2VzLDwvcT4gc28gaWYgTWFyaXVzIGNvdWxkIGhhdmUgYmVlbiBwZXJzdWFkZWQgdG8gc2FjcmlmaWNlIHRvIHRoZSBHcmVlayBNdXNlcyBhbmQgR3JhY2VzLCBoZSB3b3VsZCBub3QgaGF2ZSBwdXQgdGhlIHVnbGllc3QgcG9zc2libGUgY3Jvd24gdXBvbiBhIG1vc3QgaWxsdXN0cmlvdXMgY2FyZWVyIGluIGZpZWxkIGFuZCBmb3J1bSwgbm9yIGhhdmUgYmVlbiBkcml2ZW4gYnkgdGhlIGJsYXN0cyBvZiBwYXNzaW9uLCBpbGwtdGltZWQgYW1iaXRpb24sIGFuZCBpbnNhdGlhYmxlIGdyZWVkIHVwb24gdGhlIHNob3JlIG9mIGEgbW9zdCBjcnVlbCBhbmQgc2F2YWdlIG9sZCBhZ2UuIEhvd2V2ZXIsIGhpcyBhY3R1YWwgY2FyZWVyIHNoYWxsIGF0IG9uY2UgYnJpbmcgdGhpcyBpbnRvIGNsZWFyIHZpZXcuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJvcm4gb2YgcGFyZW50cyB3aG8gd2VyZSBhbHRvZ2V0aGVyIG9ic2N1cmXigJRwb29yIHBlb3BsZSB3aG8gbGl2ZWQgYnkgdGhlIGxhYm91ciBvZiB0aGVpciBvd24gaGFuZHMgKE1hcml1cyB3YXMgaGlzIGZhdGhlcidzIG5hbWUsIEZ1bGNpbmlhIHRoYXQgb2YgaGlzIG1vdGhlciksIGl0IHdhcyBub3QgdGlsbCBsYXRlIHRoYXQgaGUgc2F3IHRoZSBjaXR5IG9yIGdvdCBhIHRhc3RlIG9mIGNpdHkgd2F5cy4gSW4gdGhlIG1lYW50aW1lIGhlIGxpdmVkIGF0IENpcnJoYWVhdG9uLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBhIGNvcnJ1cHRpb24gZm9yIENlcmVhdGFlLiA8L25vdGU+IGEgdmlsbGFnZSBpbiB0aGUgdGVycml0b3J5IG9mIEFycGludW0sIGluIGEgbWFubmVyIHRoYXQgd2FzIHF1aXRlIHJ1ZGUgd2hlbiBjb21wYXJlZCB3aXRoIHRoZSBwb2xpc2hlZCBsaWZlIG9mIGEgY2l0eSwgYnV0IHRlbXBlcmF0ZSwgYW5kIGluIGhhcm1vbnkgd2l0aCB0aGUgcmVhcmluZyB3aGljaCB0aGUgYW5jaWVudCBSb21hbnMgZ2F2ZSB0aGVpciBjaGlsZHJlbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGZpcnN0IHNlcnZpY2UgYXMgYSBzb2xkaWVyIHdhcyBpbiBhIGNhbXBhaWduIGFnYWluc3QgdGhlIENlbHRpYmVyaWFucywgd2hlbiBTY2lwaW8gQWZyaWNhbnVzIHdhcyBiZXNpZWdpbmcgTnVtYW50aWEsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjEzNC0xMzMgQi5DLiA8L25vdGU+IGFuZCBoZSBhdHRyYWN0ZWQgdGhlIG5vdGljZSBvZiBoaXMgZ2VuZXJhbCBieSBleGNlbGxpbmcgdGhlIG90aGVyIHlvdW5nIG1lbiBpbiBicmF2ZXJ5LCBhbmQgYnkgaGlzIHZlcnkgY2hlZXJmdWwgYWNjZXB0YW5jZSBvZiB0aGUgY2hhbmdlZCByZWdpbWVuIHdoaWNoIFNjaXBpbyBpbnRyb2R1Y2VkIGludG8gaGlzIGFybXkgd2hlbiBpdCB3YXMgc3BvaWxlZCBieSBsdXh1cnkgYW5kIGV4dHJhdmFnYW5jZS4gSXQgaXMgc2FpZCwgdG9vLCB0aGF0IGhlIGVuY291bnRlcmVkIGFuZCBsYWlkIGxvdyBhbiBlbmVteSBpbiB0aGUgc2lnaHQgb2YgaGlzIGdlbmVyYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBoZSB3YXMgYWR2YW5jZWQgYnkgaGlzIGNvbW1hbmRlciB0byBtYW55IGhvbm91cnM7IGFuZCBvbmNlLCB3aGVuIHRoZSB0YWxrIGFmdGVyIHN1cHBlciBoYWQgdG8gZG8gd2l0aCBnZW5lcmFscywgYW5kIG9uZSBvZiB0aGUgY29tcGFueSAoZWl0aGVyIGJlY2F1c2UgaGUgcmVhbGx5IHdpc2hlZCB0byBrbm93IG9yIG1lcmVseSBzb3VnaHQgdG8gcGxlYXNlKSBhc2tlZCBTY2lwaW8gd2hlcmUgdGhlIFJvbWFuIHBlb3BsZSB3b3VsZCBmaW5kIGFueSBzdWNoIGNoaWVmdGFpbiBhbmQgbGVhZGVyIHRvIGZvbGxvdyBoaW0sIFNjaXBpbywgZ2VudGx5IHRhcHBpbmcgTWFyaXVzIG9uIHRoZSBzaG91bGRlciBhcyBoZSByZWNsaW5lZCBuZXh0IGhpbSwgc2FpZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlcmUsIHBlcmhhcHMuPC9xPiBTbyBnaWZ0ZWQgYnkgbmF0dXJlIHdlcmUgYm90aCBtZW47IHRoZSBvbmUgaW4gc2hvd2luZyBoaW1zZWxmIGdyZWF0IHdoaWxlIHN0aWxsIGEgeW91bmcgbWFuLCBhbmQgdGhlIG90aGVyIGluIGRpc2Nlcm5pbmcgdGhlIGVuZCBmcm9tIHRoZSBiZWdpbm5pbmcuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBNYXJpdXMsIGZpbGxlZCB3aXRoIGhpZ2ggaG9wZXMsIHdlIGFyZSB0b2xkLCBieSB0aGlzIHNwZWVjaCBvZiBTY2lwaW8gaW4gcGFydGljdWxhciwgYXMgaWYgaXQgd2VyZSBhIGRpdmluZSB1dHRlcmFuY2UgaW4gcHJvcGhlY3ksIHNldCBvdXQgdXBvbiBhIHBvbGl0aWNhbCBjYXJlZXIsIGFuZCB3YXMgbWFkZSB0cmlidW5lIG9mIHRoZSBwZW9wbGUgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTE5IEIuQy4sIGF0IHRoZSBhZ2Ugb2YgdGhpcnR5LWVpZ2h0LiA8L25vdGU+IHdpdGggdGhlIGFzc2lzdGFuY2Ugb2YgQ2FlY2lsaXVzIE1ldGVsbHVzLCBvZiB3aG9zZSBob3VzZSBoZSBoYWQgYWx3YXlzIGJlZW4gYW4gaGVyZWRpdGFyeSBhZGhlcmVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hpbGUgc2VydmluZyBhcyB0cmlidW5lIGhlIGludHJvZHVjZWQgYSBsYXcgY29uY2VybmluZyB0aGUgbW9kZSBvZiB2b3RpbmcsIHdoaWNoLCBhcyBpdCB3YXMgdGhvdWdodCwgd291bGQgbGVzc2VuIHRoZSBwb3dlciBvZiB0aGUgbm9ibGVzIGluIGp1ZGljaWFsIGNhc2VzOyB3aGVyZXVwb24gQ290dGEgdGhlIGNvbnN1bCBvcHBvc2VkIGhpbSBhbmQgcGVyc3VhZGVkIHRoZSBzZW5hdGUgdG8gY29udGVzdCB0aGUgbGF3LCBhbmQgdG8gc3VtbW9uIE1hcml1cyBiZWZvcmUgaXQgdG8gZXhwbGFpbiBoaXMgcHJvY2VkdXJlLiBUaGUgc2VuYXRlIHZvdGVkIHRvIGRvIHRoaXMsIGFuZCBNYXJpdXMgYXBwZWFyZWQgYmVmb3JlIGl0LiBIZSBkaWQgbm90LCBob3dldmVyLCBiZWhhdmUgbGlrZSBhIHlvdW5nIG1hbiB3aG8gaGFkIGp1c3QgZW50ZXJlZCBwb2xpdGljYWwgbGlmZSB3aXRob3V0IGFueSBicmlsbGlhbnQgc2VydmljZXMgYmVoaW5kIGhpbSwgYnV0IGFzc3VtZWQgYXQgb25jZSB0aGUgYXNzdXJhbmNlIHdoaWNoIGhpcyBzdWJzZXF1ZW50IGFjaGlldmVtZW50cyBnYXZlIGhpbSwgYW5kIHRocmVhdGVuZWQgdG8gaGFsZSBDb3R0YSBvZmYgdG8gcHJpc29uIHVubGVzcyBoZSBoYWQgdGhlIHZvdGUgcmVzY2luZGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Db3R0YSB0aGVuIHR1cm5lZCB0byBNZXRlbGx1cyBhbmQgYXNrZWQgaGltIHRvIGV4cHJlc3MgaGlzIG9waW5pb24sIGFuZCBNZXRlbGx1cywgcmlzaW5nIGluIGhpcyBwbGFjZSwgY29uY3VycmVkIHdpdGggdGhlIGNvbnN1bDsgYnV0IE1hcml1cyBjYWxsZWQgaW4gdGhlIG9mZmljZXIgYW5kIG9yZGVyZWQgaGltIHRvIGNvbmR1Y3QgTWV0ZWxsdXMgaGltc2VsZiB0byBwcmlzb24uIE1ldGVsbHVzIGFwcGVhbGVkIHRvIHRoZSBvdGhlciB0cmlidW5lcywgYnV0IG5vbmUgb2YgdGhlbSBjYW1lIHRvIGhpcyBzdXBwb3J0LCBzbyB0aGUgc2VuYXRlIGdhdmUgd2F5IGFuZCByZXNjaW5kZWQgaXRzIHZvdGUuIE1hcml1cyB0aGVyZWZvcmUgY2FtZSBmb3J0aCBpbiB0cml1bXBoIHRvIHRoZSBwZW9wbGUgYW5kIGdvdCB0aGVtIHRvIHJhdGlmeSBoaXMgbGF3LiBNZW4gbm93IHRob3VnaHQgaGltIHN1cGVyaW9yIHRvIGZlYXIsIHVubW92ZWQgYnkgcmVzcGVjdCBvZiBwZXJzb25zLCBhbmQgYSBmb3JtaWRhYmxlIGNoYW1waW9uIG9mIHRoZSBwZW9wbGUgaW4gb3Bwb3NpdGlvbiB0byB0aGUgc2VuYXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGlzIG9waW5pb24gd2FzIHF1aWNrbHkgbW9kaWZpZWQgYnkgYW5vdGhlciBwb2xpdGljYWwgcHJvY2VkdXJlIG9mIGhpcy4gRm9yIHdoZW4gYSBsYXcgd2FzIGludHJvZHVjZWQgcHJvdmlkaW5nIGZvciB0aGUgZGlzdHJpYnV0aW9uIG9mIGdyYWluIHRvIHRoZSBjaXRpemVucywgaGUgb3Bwb3NlZCBpdCBtb3N0IHN0cmVudW91c2x5IGFuZCBjYXJyaWVkIHRoZSBkYXksIHRoZXJlYnkgd2lubmluZyBmb3IgaGltc2VsZiBhbiBlcXVhbCBwbGFjZSBpbiB0aGUgZXN0ZWVtIG9mIGJvdGggcGFydGllcyBhcyBhIG1hbiB3aG8gZmF2b3VyZWQgbmVpdGhlciBhdCB0aGUgZXhwZW5zZSBvZiB0aGUgZ2VuZXJhbCBnb29kLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoaXMgdHJpYnVuZXNoaXAsIGhlIGJlY2FtZSBhIGNhbmRpZGF0ZSBmb3IgdGhlIGhpZ2hlciBhZWRpbGVzaGlwLiBGb3IgdGhlcmUgYXJlIHR3byBjbGFzc2VzIG9mIGFlZGlsZXMsIG9uZSB0YWtpbmcgaXRzIG5hbWUgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jdXJ1bGU8L3E+IGZyb20gdGhlIGNoYWlycyB3aXRoIGN1cnZpbmcgZmVldCBvbiB3aGljaCB0aGUgbWFnaXN0cmF0ZXMgc2l0IGluIHRoZSBleGVyY2lzZSBvZiB0aGVpciBmdW5jdGlvbnMsIHRoZSBvdGhlciwgYW5kIHRoZSBpbmZlcmlvciwgYmVpbmcgY2FsbGVkIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+cGxlYmVpYW4uPC9xPiBXaGVuIHRoZSBzdXBlcmlvciBhZWRpbGVzIGhhdmUgYmVlbiBlbGVjdGVkLCB0aGUgcGVvcGxlIGNhc3QgYSBzZWNvbmQgdm90ZSBmb3IgdGhlIG90aGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gaXQgd2FzIGNsZWFyIHRoYXQgTWFyaXVzIHdhcyBsb3NpbmcgaGlzIGVsZWN0aW9uIHRvIHRoZSBoaWdoZXIgb2ZmaWNlLCBoZSBpbW1lZGlhdGVseSBjaGFuZ2VkIGhpcyB0YWN0aWNzIGFuZCBhcHBsaWVkIGZvciB0aGUgb3RoZXIuIEJ1dCBtZW4gdGhvdWdodCBoaW0gYm9sZCBhbmQgb2JzdGluYXRlLCBhbmQgaGUgd2FzIGRlZmVhdGVkOyBuZXZlcnRoZWxlc3MsIGFsdGhvdWdoIGhlIGhhZCBtZXQgd2l0aCB0d28gZmFpbHVyZXMgaW4gb25lIGRheSwgYSB0aGluZyB3aGljaCBoYWQgbmV2ZXIgaGFwcGVuZWQgdG8gYW55IGNhbmRpZGF0ZSBiZWZvcmUsIGhlIGRpZCBub3QgbG93ZXIgaGlzIGFzc3VyYW5jZSBpbiB0aGUgbGVhc3QsIGJ1dCBub3QgbG9uZyBhZnRlcndhcmRzIGJlY2FtZSBhIGNhbmRpZGF0ZSBmb3IgdGhlIHByYWV0b3JzaGlwIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDExNSBCLkMuIDwvbm90ZT4gYW5kIG5hcnJvd2x5IG1pc3NlZCBkZWZlYXQ7IGhlIHdhcyByZXR1cm5lZCBsYXN0IG9mIGFsbCwgYW5kIHdhcyBwcm9zZWN1dGVkIGZvciBicmliZXJ5LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U3VzcGljaW9uIHdhcyBjaGllZmx5IGFyb3VzZWQgYnkgdGhlIHNpZ2h0IG9mIGEgc2VydmFudCBvZiBDYXNzaXVzIFNhYmFjbyBpbnNpZGUgdGhlIHBhbGluZ3MgYW1vbmcgdGhlIHZvdGVyczsgZm9yIFNhYmFjbyB3YXMgYW4gZXNwZWNpYWwgZnJpZW5kIG9mIE1hcml1cy4gU2FiYWNvIHdhcyB0aGVyZWZvcmUgc3VtbW9uZWQgYmVmb3JlIHRoZSBjb3VydCwgYW5kIHRlc3RpZmllZCB0aGF0IHRoZSBoZWF0IGhhZCBtYWRlIGhpbSBzbyB0aGlyc3R5IHRoYXQgaGUgaGFkIGNhbGxlZCBmb3IgY29sZCB3YXRlciwgYW5kIHRoYXQgaGlzIHNlcnZhbnQgaGFkIGNvbWUgaW4gdG8gaGltIHdpdGggYSBjdXAsIGFuZCBoYWQgdGhlbiBhdCBvbmNlIGdvbmUgYXdheSBhZnRlciBoaXMgbWFzdGVyIGhhZCBkcnVuay4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U2FiYWNvLCBob3dldmVyLCB3YXMgZXhwZWxsZWQgZnJvbSB0aGUgc2VuYXRlIGJ5IHRoZSBjZW5zb3JzIG9mIHRoZSBuZXh0IHllYXIsIGFuZCBpdCB3YXMgdGhvdWdodCB0aGF0IGhlIGRlc2VydmVkIHRoaXMgcHVuaXNobWVudCwgZWl0aGVyIGJlY2F1c2UgaGUgaGFkIGdpdmVuIGZhbHNlIHRlc3RpbW9ueSwgb3IgYmVjYXVzZSBvZiBoaXMgaW50ZW1wZXJhbmNlLiBCdXQgQ2FpdXMgSGVyZW5uaXVzIGFsc28gd2FzIGJyb3VnaHQgaW4gYXMgYSB3aXRuZXNzIGFnYWluc3QgTWFyaXVzLCBhbmQgcGxlYWRlZCB0aGF0IGl0IHdhcyBjb250cmFyeSB0byBlc3RhYmxpc2hlZCB1c2FnZSBmb3IgcGF0cm9ucyAodGhlIFJvbWFuIHRlcm0gZm9yIG91ciByZXByZXNlbnRhdGl2ZXMgYXQgbGF3KSB0byBiZWFyIHdpdG5lc3MgYWdhaW5zdCBjbGllbnRzLCBhbmQgdGhhdCB0aGUgbGF3IHJlbGlldmVkIHRoZW0gb2YgdGhpcyBuZWNlc3NpdHk7IGFuZCBub3Qgb25seSB0aGUgcGFyZW50cyBvZiBNYXJpdXMgYnV0IE1hcml1cyBoaW1zZWxmIGhhZCBvcmlnaW5hbGx5IGJlZW4gY2xpZW50cyBvZiB0aGUgaG91c2Ugb2YgdGhlIEhlcmVubmlpLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUganVyb3JzIGFjY2VwdGVkIHRoaXMgcGxlYSBpbiBhdm9pZGFuY2Ugb2YgdGVzdGltb255LCBidXQgTWFyaXVzIGhpbXNlbGYgY29udHJhZGljdGVkIEhlcmVubml1cywgZGVjbGFyaW5nIHRoYXQgYXMgc29vbiBhcyBoZSBoYWQgYmVlbiBlbGVjdGVkIHRvIGhpcyBtYWdpc3RyYWN5IGhlIGhhZCBjZWFzZWQgdG8gYmUgYSBjbGllbnQ7IHdoaWNoIHdhcyBub3QgYWx0b2dldGhlciB0cnVlLiBGb3IgaXQgaXMgbm90IGV2ZXJ5IG1hZ2lzdHJhY3kgdGhhdCBmcmVlcyBpdHMgb2NjdXBhbnRzIChhcyB3ZWxsIGFzIHRoZWlyIHBvc3Rlcml0eSkgZnJvbSB0aGVpciByZWxhdGlvbnMgdG8gYSBwYXRyb24sIGJ1dCBvbmx5IHRoYXQgdG8gd2hpY2ggdGhlIGxhdyBhc3NpZ25zIHRoZSBjdXJ1bGUgY2hhaXIuIEhvd2V2ZXIsIGFsdGhvdWdoIGR1cmluZyB0aGUgZmlyc3QgZGF5cyBvZiB0aGUgdHJpYWwgTWFyaXVzIGZhcmVkIGJhZGx5IGFuZCBmb3VuZCB0aGUganVyb3JzIHNldmVyZSB0b3dhcmRzIGhpbSwgb24gdGhlIGxhc3QgZGF5LCBjb250cmFyeSB0byBhbGwgZXhwZWN0YXRpb24sIHRoZXJlIHdhcyBhIHRpZSB2b3RlIGFuZCBoZSB3YXMgYWNxdWl0dGVkLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBmb3IgaGlzIHByYWV0b3JzaGlwIE1hcml1cyBnb3Qgb25seSBtb2RlcmF0ZSBjb21tZW5kYXRpb24uIEFmdGVyIGhpcyBwcmFldG9yc2hpcCwgaG93ZXZlciwgdGhlIHByb3ZpbmNlIG9mIEZhcnRoZXIgU3BhaW4gd2FzIGFsbG90dGVkIHRvIGhpbSwgYW5kIGhlcmUgaGUgaXMgc2FpZCB0byBoYXZlIGNsZWFyZWQgYXdheSB0aGUgcm9iYmVycywgYWx0aG91Z2ggdGhlIHByb3ZpbmNlIHdhcyBzdGlsbCB1bmNpdmlsaXplZCBpbiBpdHMgY3VzdG9tcyBhbmQgaW4gYSBzYXZhZ2Ugc3RhdGUsIGFuZCByb2JiZXJ5IHdhcyBhdCB0aGF0IHRpbWUgc3RpbGwgY29uc2lkZXJlZCBhIG1vc3QgaG9ub3VyYWJsZSBvY2N1cGF0aW9uIGJ5IHRoZSBTcGFuaWFyZHMuIEJ1dCB3aGVuIGhlIHJldHVybmVkIHRvIHBvbGl0aWNhbCBsaWZlLCBoZSBoYWQgbmVpdGhlciB3ZWFsdGggbm9yIGVsb3F1ZW5jZSwgd2l0aCB3aGljaCB0aGUgbWFnbmF0ZXMgb2YgdGhlIHRpbWUgdXNlZCB0byBpbmZsdWVuY2UgdGhlIHBlb3BsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3RpbGwsIHRoZSB2ZXJ5IGludGVuc2l0eSBvZiBoaXMgYXNzdXJhbmNlLCBoaXMgaW5kZWZhdGlnYWJsZSBsYWJvdXJzLCBhbmQgaGlzIHBsYWluIGFuZCBzaW1wbGUgd2F5IG9mIGxpdmluZywgd29uIGhpbSBhIGNlcnRhaW4gcG9wdWxhcml0eSBhbW9uZyBoaXMgZmVsbG93IGNpdGl6ZW5zLCBhbmQgaGlzIGhvbm91cnMgYnJvdWdodCBoaW0gaW5jcmVhc2luZyBpbmZsdWVuY2UsIHNvIHRoYXQgaGUgbWFycmllZCBpbnRvIHRoZSBpbGx1c3RyaW91cyBmYW1pbHkgb2YgdGhlIENhZXNhcnMgYW5kIGJlY2FtZSB0aGUgaHVzYmFuZCBvZiBKdWxpYSwgd2hvIHdhcyB0aGUgYXVudCBvZiB0aGF0IENhZXNhciB3aG8gaW4gYWZ0ZXIgdGltZXMgYmVjYW1lIGdyZWF0ZXN0IGFtb25nIHRoZSBSb21hbnMsIGFuZCBpbiBzb21lIGRlZ3JlZSwgYmVjYXVzZSBvZiBoaXMgcmVsYXRpb25zaGlwLCBtYWRlIE1hcml1cyBoaXMgZXhhbXBsZSwgYXMgSSBoYXZlIHN0YXRlZCBpbiBoaXMgTGlmZS4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gNS4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYWVzYXIgPC90aXRsZT4sIHYuIDEgZi4gPC9iaWJsPiAKICAgICAgICAgICAgPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIHRlc3RpbW9ueSBib3RoIHRvIHRoZSB0ZW1wZXJhbmNlIG9mIE1hcml1cywgYW5kIGFsc28gdG8gaGlzIGZvcnRpdHVkZSwgb2Ygd2hpY2ggaGlzIGJlaGF2aW91ciB1bmRlciBhIHN1cmdpY2FsIG9wZXJhdGlvbiBpcyBhIHByb29mLiBIZSB3YXMgYWZmbGljdGVkIGluIGJvdGggbGVncywgYXMgaXQgd291bGQgYXBwZWFyLCB3aXRoIHZhcmljb3NlIHZlaW5zLCBhbmQgYXMgaGUgZGlzbGlrZWQgdGhlIGRlZm9ybWl0eSwgaGUgcmVzb2x2ZWQgdG8gcHV0IGhpbXNlbGYgaW50byB0aGUgcGh5c2ljaWFuJ3MgaGFuZHMuIFJlZnVzaW5nIHRvIGJlIGJvdW5kLCBoZSBwcmVzZW50ZWQgdG8gaGltIG9uZSBsZWcsIGFuZCB0aGVuLCB3aXRob3V0IGEgbW90aW9uIG9yIGEgZ3JvYW4sIGJ1dCB3aXRoIGEgc3RlYWRmYXN0IGNvdW50ZW5hbmNlIGFuZCBpbiBzaWxlbmNlLCBlbmR1cmVkIGluY3JlZGlibGUgcGFpbiB1bmRlciB0aGUga25pZmUuIFdoZW4sIGhvd2V2ZXIsIHRoZSBwaHlzaWNpYW4gd2FzIHByb2NlZWRpbmcgdG8gdHJlYXQgdGhlIG90aGVyIGxlZywgTWFyaXVzIHdvdWxkIHN1ZmZlciBoaW0gbm8gZnVydGhlciwgZGVjbGFyaW5nIHRoYXQgaGUgc2F3IHRoZSBjdXJlIHRvIGJlIG5vdCB3b3J0aCB0aGUgcGFpbi4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYWVjaWxpdXMgTWV0ZWxsdXMgdGhlIGNvbnN1bCB3YXMgYXBwb2ludGVkIGNvbW1hbmRlci1pbi1jaGllZiBmb3IgdGhlIHdhciBhZ2FpbnN0IEp1Z3VydGhhLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMDkgQi5DLiA8L25vdGU+IGhlIHRvb2sgTWFyaXVzIHdpdGggaGltIHRvIEFmcmljYSBpbiB0aGUgY2FwYWNpdHkgb2YgbGVnYXRlLiBIZXJlLCBpbiBlc3NheWluZyBncmVhdCBleHBsb2l0cyBhbmQgYnJpbGxpYW50IHN0cnVnZ2xlcywgTWFyaXVzIHdhcyBub3QgY2FyZWZ1bCwgbGlrZSB0aGUgcmVzdCwgdG8gZW5oYW5jZSB0aGUgZ2xvcnkgb2YgTWV0ZWxsdXMgYW5kIGNvbmR1Y3QgaGltc2VsZiBpbiBoaXMgaW50ZXJlc3RzOyBhbmQgZGVlbWluZyB0aGF0IGhlIGhhZCBub3Qgc28gbXVjaCBiZWVuIGNhbGxlZCBieSBNZXRlbGx1cyB0byB0aGUgb2ZmaWNlIG9mIGxlZ2F0ZSBhcyBoZSB3YXMgYmVpbmcgaW50cm9kdWNlZCBieSBGb3J0dW5lIGludG8gYSBtb3N0IGZhdm91cmFibGUgb3Bwb3J0dW5pdHkgYXMgd2VsbCBhcyBhIG1vc3Qgc3BhY2lvdXMgdGhlYXRyZSBmb3IgZXhwbG9pdHMsIGhlIG1hZGUgYSBkaXNwbGF5IG9mIGV2ZXJ5IHNvcnQgb2YgYnJhdmVyeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRob3VnaCB0aGUgd2FyIGJyb3VnaHQgbWFueSBoYXJkc2hpcHMsIGhlIG5laXRoZXIgc2h1bm5lZCBhbnkgZ3JlYXQgbGFib3VyLCBub3IgZGlzZGFpbmVkIGFueSB0aGF0IHdlcmUgc21hbGwsIGJ1dCBzdXJwYXNzZWQgdGhlIG9mZmljZXJzIG9mIGhpcyBvd24gcmFuayBpbiBnaXZpbmcgZ29vZCBjb3Vuc2VsIGFuZCBmb3Jlc2VlaW5nIHdoYXQgd2FzIGFkdmFudGFnZW91cywgYW5kIHZpZWQgd2l0aCB0aGUgY29tbW9uIHNvbGRpZXJzIGluIGZydWdhbGl0eSBhbmQgZW5kdXJhbmNlLCB0aGVyZWJ5IHdpbm5pbmcgbXVjaCBnb29kd2lsbCBhbW9uZyB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYXMgYSBnZW5lcmFsIHRoaW5nIGl0IHdvdWxkIHNlZW0gdGhhdCBldmVyeSBtYW4gZmluZHMgc29sYWNlIGZvciBoaXMgbGFib3VycyBpbiBzZWVpbmcgYW5vdGhlciB2b2x1bnRhcmlseSBzaGFyZSB0aG9zZSBsYWJvdXJzOyB0aGlzIHNlZW1zIHRvIHRha2UgYXdheSB0aGUgZWxlbWVudCBvZiBjb21wdWxzaW9uOyBhbmQgaXQgaXMgYSBtb3N0IGFncmVlYWJsZSBzcGVjdGFjbGUgZm9yIGEgUm9tYW4gc29sZGllciB3aGVuIGhlIHNlZXMgYSBnZW5lcmFsIGVhdGluZyBjb21tb24gYnJlYWQgaW4gcHVibGljLCBvciBzbGVlcGluZyBvbiBhIHNpbXBsZSBwYWxsZXQsIG9yIHRha2luZyBhIGhhbmQgaW4gdGhlIGNvbnN0cnVjdGlvbiBvZiBzb21lIHRyZW5jaCBvciBwYWxpc2FkZS4gRm9yIHRoZXkgaGF2ZSBub3Qgc28gbXVjaCBhZG1pcmF0aW9uIGZvciB0aG9zZSBsZWFkZXJzIHdobyBzaGFyZSBob25vdXIgYW5kIHJpY2hlcyB3aXRoIHRoZW0gYXMgZm9yIHRob3NlIHdobyB0YWtlIHBhcnQgaW4gdGhlaXIgdG9pbHMgYW5kIGRhbmdlcnMsIGJ1dCBoYXZlIG1vcmUgYWZmZWN0aW9uIGZvciB0aG9zZSB3aG8gYXJlIHdpbGxpbmcgdG8gam9pbiBpbiB0aGVpciB0b2lscyB0aGFuIGZvciB0aG9zZSB3aG8gcGVybWl0IHRoZW0gdG8gbGVhZCBhbiBlYXN5IGxpZmUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CeSBkb2luZyBhbGwgdGhlc2UgdGhpbmdzIGFuZCB0aGVyZWJ5IHdpbm5pbmcgdGhlIGhlYXJ0cyBvZiB0aGUgc29sZGllcnMsIE1hcml1cyBzb29uIGZpbGxlZCBBZnJpY2EsIGFuZCBzb29uIGZpbGxlZCBSb21lLCB3aXRoIGhpcyBuYW1lIGFuZCBmYW1lLCBhbmQgbWVuIGluIHRoZSBjYW1wIHdyb3RlIHRvIHRob3NlIGF0IGhvbWUgdGhhdCB0aGVyZSB3b3VsZCBiZSBubyBlbmQgb3IgY2Vzc2F0aW9uIG9mIHRoZSB3YXIgYWdhaW5zdCB0aGUgQmFyYmFyaWFuIHVubGVzcyB0aGV5IGNob3NlIENhaXVzIE1hcml1cyBjb25zdWwuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCB0aGlzIE1ldGVsbHVzIHdhcyBldmlkZW50bHkgZGlzcGxlYXNlZC4gQnV0IGl0IHdhcyB0aGUgYWZmYWlyIG9mIFR1cnBpbGxpdXMgdGhhdCBtb3N0IHZleGVkIGhpbS4gVGhpcyBUdXJwaWxsaXVzIHdhcyBhbiBoZXJlZGl0YXJ5IGd1ZXN0LWZyaWVuZCBvZiBNZXRlbGx1cywgYW5kIGF0IHRoaXMgdGltZSB3YXMgc2VydmluZyBpbiBoaXMgYXJteSBhcyBjaGllZiBvZiBlbmdpbmVlcnMuIEJ1dCBoZSB3YXMgcHV0IGluIGNoYXJnZSBvZiBWYWdhLCBhIGxhcmdlIGNpdHksIGFuZCBiZWNhdXNlIGhlIHJlbGllZCBmb3Igc2FmZXR5IG9uIGhpcyBkb2luZyB0aGUgaW5oYWJpdGFudHMgbm8gd3JvbmcsIGJ1dCByYXRoZXIgdHJlYXRpbmcgdGhlbSB3aXRoIGtpbmRuZXNzIGFuZCBodW1hbml0eSwgaGUgdW5hd2FyZXMgY2FtZSBpbnRvIHRoZSBwb3dlciBvZiB0aGUgZW5lbXk7IGZvciB0aGV5IGFkbWl0dGVkIEp1Z3VydGhhIGludG8gdGhlaXIgY2l0eS4gU3RpbGwsIHRoZXkgZGlkIFR1cnBpbGxpdXMgbm8gaGFybSwgYnV0IG9idGFpbmVkIGhpcyByZWxlYXNlIGFuZCBzZW50IGhpbSBhd2F5IHNhZmUgYW5kIHNvdW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgYSBjaGFyZ2Ugb2YgdHJlYWNoZXJ5IHdhcyBicm91Z2h0IGFnYWluc3QgaGltOyBhbmQgTWFyaXVzLCB3aG8gd2FzIGEgbWVtYmVyIG9mIHRoZSBjb3VuY2lsIHdoaWNoIHRyaWVkIHRoZSBjYXNlLCB3YXMgaGltc2VsZiBiaXR0ZXIsIGFuZCBleGFzcGVyYXRlZCBtb3N0IG9mIHRoZSBvdGhlcnMgYWdhaW5zdCB0aGUgYWNjdXNlZCwgc28gdGhhdCBNZXRlbGx1cyB3YXMgcmVsdWN0YW50bHkgZm9yY2VkIHRvIHBhc3Mgc2VudGVuY2Ugb2YgZGVhdGggdXBvbiBoaW0uIEFmdGVyIGEgc2hvcnQgdGltZSwgaG93ZXZlciwgdGhlIGNoYXJnZSB3YXMgZm91bmQgdG8gYmUgZmFsc2UsIGFuZCBhbG1vc3QgZXZlcnlib2R5IHN5bXBhdGhpemVkIHdpdGggTWV0ZWxsdXMgaW4gaGlzIGdyaWVmOyBidXQgTWFyaXVzLCBmdWxsIG9mIGpveSBhbmQgY2xhaW1pbmcgdGhlIGNvbmRlbW5hdGlvbiBhcyBoaXMgb3duIHdvcmssIHdhcyBub3QgYXNoYW1lZCB0byBnbyBhYm91dCBzYXlpbmcgdGhhdCBoZSBoYWQgZmFzdGVuZWQgdXBvbiB0aGUgcGF0aCBvZiBNZXRlbGx1cyBhIGRhZW1vbiB3aG8gd291bGQgYXZlbmdlIHRoZSBtdXJkZXIgb2YgYSBndWVzdC1mcmllbmQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHRoZXJlIHdhcyBvcGVuIGVubWl0eSBiZXR3ZWVuIHRoZSB0d28gbWVuOyBhbmQgd2UgYXJlIHRvbGQgdGhhdCBvbiBvbmUgb2NjYXNpb24gd2hlbiBNYXJpdXMgd2FzIHByZXNlbnQgTWV0ZWxsdXMgc2FpZCB0byBoaW0gYXMgaWYgaW4gbW9ja2VyeTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Eb3N0IHRob3UgcHVycG9zZSB0byBsZWF2ZSB1cywgbXkgZ29vZCBTaXIsIGFuZCBzYWlsIGZvciBob21lLCBhbmQgc3RhbmQgZm9yIHRoZSBjb25zdWxzaGlwPyBQcmF5IHdpbGwgaXQgbm90IHNhdGlzZnkgdGhlZSB0byBiZSBmZWxsb3ctY29uc3VsIHdpdGggdGhpcyBteSBzb24/PC9xPiBOb3cgdGhlIHNvbiBvZiBNZXRlbGx1cyB3YXMgYXQgdGhpcyB0aW1lIGEgbWVyZSBzdHJpcGxpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIE1hcml1cyB3YXMgZWFnZXIgdG8gYmUgZGlzbWlzc2VkLCBhbmQgc28sIGFmdGVyIG1ha2luZyBtYW55IHBvc3Rwb25lbWVudHMsIGFuZCB3aGVuIG9ubHkgdHdlbHZlIGRheXMgcmVtYWluZWQgYmVmb3JlIHRoZSBlbGVjdGlvbiBvZiBjb25zdWxzLCBNZXRlbGx1cyBkaXNtaXNzZWQgaGltLiBNYXJpdXMgYWNjb21wbGlzaGVkIHRoZSBsb25nIGpvdXJuZXkgZnJvbSB0aGUgY2FtcCB0byBVdGljYSBhbmQgdGhlIHNlYSBpbiB0d28gZGF5cyBhbmQgb25lIG5pZ2h0LCBhbmQgb2ZmZXJlZCBzYWNyaWZpY2UgYmVmb3JlIGhlIHNhaWxlZC4gQW5kIHRoZSBzZWVyIGlzIHNhaWQgdG8gaGF2ZSB0b2xkIGhpbSB0aGF0IHRoZSBEZWl0eSByZXZlYWxlZCBmb3IgTWFyaXVzIHN1Y2Nlc3NlcyB0aGF0IHdlcmUgb2YgaW5jcmVkaWJsZSBtYWduaXR1ZGUgYW5kIGJleW9uZCBoaXMgZXZlcnkgZXhwZWN0YXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkVsYXRlZCBieSB0aGlzIHByb3BoZWN5IGhlIHB1dCB0byBzZWEuIEluIHRocmVlIGRheXMgaGUgY3Jvc3NlZCB0aGUgc2VhIHdpdGggYSBmYXZvdXJpbmcgd2luZCwgYW5kIHdhcyBhdCBvbmNlIHdlbGNvbWVkIGdsYWRseSBieSB0aGUgcG9wdWxhY2UsIGFuZCBhZnRlciBiZWluZyBpbnRyb2R1Y2VkIHRvIHRoZSBhc3NlbWJseSBieSBvbmUgb2YgdGhlIHRyaWJ1bmVzLCBoZSBmaXJzdCBtYWRlIG1hbnkgc2xhbmRlcm91cyBjaGFyZ2VzIGFnYWluc3QgTWV0ZWxsdXMsIGFuZCB0aGVuIGFza2VkIGZvciB0aGUgY29uc3Vsc2hpcCwgcHJvbWlzaW5nIHRoYXQgaGUgd291bGQgZWl0aGVyIGtpbGwgSnVndXJ0aGEgb3IgdGFrZSBoaW0gYWxpdmUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyB0cml1bXBoYW50bHkgZWxlY3RlZCwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDEwNyBCLkMuLCBhdCB0aGUgYWdlIG9mIGZpZnR5LiA8L25vdGU+IGFuZCBhdCBvbmNlIGJlZ2FuIHRvIGxldnkgdHJvb3BzLiBDb250cmFyeSB0byBsYXcgYW5kIGN1c3RvbSBoZSBlbmxpc3RlZCBtYW55IGEgcG9vciBhbmQgaW5zaWduaWZpY2FudCBtYW4sIGFsdGhvdWdoIGZvcm1lciBjb21tYW5kZXJzIGhhZCBub3QgYWNjZXB0ZWQgc3VjaCBwZXJzb25zLCBidXQgYmVzdG93ZWQgYXJtcywganVzdCBhcyB0aGV5IHdvdWxkIGFueSBvdGhlciBob25vdXIsIG9ubHkgb24gdGhvc2Ugd2hvc2UgcHJvcGVydHkgYXNzZXNzbWVudCBtYWRlIHRoZW0gd29ydGh5IHRvIHJlY2VpdmUgdGhlc2UsIGVhY2ggc29sZGllciBiZWluZyBzdXBwb3NlZCB0byBwdXQgaGlzIHN1YnN0YW5jZSBpbiBwbGVkZ2UgdG8gdGhlIHN0YXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgbm90IHRoaXMsIGhvd2V2ZXIsIHRoYXQgYnJvdWdodCBtb3N0IG9kaXVtIHVwb24gTWFyaXVzLCBidXQgdGhlIGJvbGRseSBpbnNvbGVudCBhbmQgYXJyb2dhbnQgc3BlZWNoZXMgd2l0aCB3aGljaCBoZSB2ZXhlZCB0aGUgbm9ibGVzLCBjcnlpbmcgb3V0IHRoYXQgaGUgaGFkIGNhcnJpZWQgb2ZmIHRoZSBjb25zdWxzaGlwIGFzIHNwb2lsIGZyb20gdGhlIGVmZmVtaW5hY3kgb2YgdGhlIHJpY2ggYW5kIHdlbGwtYm9ybiwgYW5kIHRoYXQgaGUgaGFkIHdvdW5kcyB1cG9uIGhpcyBvd24gcGVyc29uIHdpdGggd2hpY2ggdG8gdmF1bnQgaGltc2VsZiBiZWZvcmUgdGhlIHBlb3BsZSwgbm90IG1vbnVtZW50cyBvZiB0aGUgZGVhZCBub3IgbGlrZW5lc3NlcyBvZiBvdGhlciBtZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9mdGVuLCB0b28sIGhlIHdvdWxkIG1lbnRpb24gYnkgbmFtZSB0aGUgZ2VuZXJhbHMgaW4gQWZyaWNhIHdobyBoYWQgYmVlbiB1bnN1Y2Nlc3NmdWwsIG5vdyBCZXN0aWEsIGFuZCBub3cgQWxiaW51cywgbWVuIG9mIGlsbHVzdHJpb3VzIGhvdXNlcyBpbmRlZWQsIGJ1dCB1bmZvcnR1bmF0ZSB0aGVtc2VsdmVzLCBhbmQgdW53YXJsaWtlLCB3aG8gaGFkIG1ldCB3aXRoIGRpc2FzdGVyIHRocm91Z2ggbGFjayBvZiBleHBlcmllbmNlOyBhbmQgaGUgd291bGQgYXNrIGhpcyBhdWRpZW5jZSBpZiB0aGV5IGRpZCBub3QgdGhpbmsgdGhhdCB0aGUgYW5jZXN0b3JzIG9mIHRoZXNlIG1lbiB3b3VsZCBoYXZlIG11Y2ggcHJlZmVycmVkIHRvIGxlYXZlIGRlc2NlbmRhbnRzIGxpa2UgaGltc2VsZiwgc2luY2UgdGhleSB0aGVtc2VsdmVzIGhhZCBiZWVuIG1hZGUgaWxsdXN0cm91cywgbm90IGJ5IHRoZWlyIG5vYmxlIGJpcnRoLCBidXQgYnkgdGhlaXIgdmFsb3VyIGFuZCBub2JsZSBkZWVkcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCB0YWxrIHdhcyBub3QgbWVyZSBlbXB0eSBib2FzdGluZywgbm9yIHdhcyBoaXMgZGVzaXJlIHRvIG1ha2UgaGltc2VsZiBoYXRlZCBieSB0aGUgbm9iaWxpdHkgd2l0aG91dCBwdXJwb3NlOyBpbmRlZWQgdGhlIHBlb3BsZSwgd2hvIHdlcmUgZGVsaWdodGVkIHRvIGhhdmUgdGhlIHNlbmF0ZSBpbnN1bHRlZCBhbmQgYWx3YXlzIG1lYXN1cmVkIHRoZSBncmVhdG5lc3Mgb2YgYSBtYW4ncyBzcGlyaXQgYnkgdGhlIGJvYXN0ZnVsbmVzcyBvZiBoaXMgc3BlZWNoLCBlbmNvdXJhZ2VkIGhpbSwgYW5kIGluY2l0ZWQgaGltIG5vdCB0byBzcGFyZSBtZW4gb2YgaGlnaCByZXB1dGUgaWYgaGUgd2lzaGVkIHRvIHBsZWFzZSB0aGUgbXVsdGl0dWRlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgY3Jvc3NlZCB0byBBZnJpY2EsIE1ldGVsbHVzLCBub3cgYmVjb21lIGEgdmljdGltIG9mIGplYWxvdXN5LCBhbmQgdmV4ZWQgYmVjYXVzZSwgYWZ0ZXIgaGUgaGFkIGJyb3VnaHQgdGhlIHdhciB0byBhbiBlbmQgYW5kIGhhZCBub3RoaW5nIGZ1cnRoZXIgdG8gZG8gZXhjZXB0IHRvIHNlaXplIHRoZSBwZXJzb24gb2YgSnVndXJ0aGEsIE1hcml1cyB3YXMgY29taW5nIHRvIGVuam95IHRoZSBjcm93biBhbmQgdGhlIHRyaXVtcGgs4oCUYSBtYW4gd2hvc2UgaW5ncmF0aXR1ZGUgdG93YXJkcyBoaXMgYmVuZWZhY3RvciBoYWQgcmFpc2VkIGhpbSB0byBwb3dlcizigJR3b3VsZCBub3QgY29uc2VudCB0byBtZWV0IGhpbSwgYnV0IHByaXZhdGVseSBsZWZ0IHRoZSBjb3VudHJ5IHdoaWxlIFJ1dGlsaXVzLCB3aG8gaGFkIGJlY29tZSBoaXMgbGVnYXRlLCBoYW5kZWQgb3ZlciB0aGUgYXJteSB0byBNYXJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgZW5kIGEgcmV0cmlidXRpb24gZmVsbCB1cG9uIE1hcml1czsgZm9yIFN1bGxhIHJvYmJlZCBoaW0gb2YgdGhlIGdsb3J5IG9mIGhpcyBzdWNjZXNzLCBhcyBNYXJpdXMgaGFkIHJvYmJlZCBNZXRlbGx1cy4gSG93IHRoaXMgY2FtZSB0byBwYXNzLCBJIHdpbGwgbmFycmF0ZSBicmllZmx5LCBzaW5jZSB0aGUgZGV0YWlscyBhcmUgZ2l2ZW4gbW9yZSBhdCBsZW5ndGggaW4gbXkgTGlmZSBvZiBTdWxsYS4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+IAogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMy4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIGlpaS4gPC9iaWJsPiAKICAgICAgICAgICAgPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8cD5Cb2NjaHVzLCB0aGUga2luZyBvZiB0aGUgQmFyYmFyaWFucyBpbiB0aGUgaW50ZXJpb3IsIHdhcyBhIHNvbi1pbi1sYXcgb2YgSnVndXJ0aGEsIGFuZCBhcHBhcmVudGx5IGdhdmUgaGltIGxpdHRsZSBvciBubyBhc3Npc3RhbmNlIGluIGhpcyB3YXIsIGFsbGVnaW5nIGhpcyBmYWl0aGxlc3NuZXNzIGFzIGFuIGV4Y3VzZSwgYW5kIGZlYXJpbmcgdGhlIGdyb3d0aCBvZiBoaXMgcG93ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEp1Z3VydGhhIGluIGhpcyBmbGlnaHQgYW5kIHdhbmRlcmluZyBmZWx0IGNvbXBlbGxlZCB0byBtYWtlIGhpbSBoaXMgbGFzdCBob3BlIGFuZCBzb3VnaHQgaGF2ZW4gd2l0aCBoaW0sIEJvY2NodXMgcmVjZWl2ZWQgaGltLCBtb3JlIG91dCBvZiByZWdhcmQgZm9yIGhpcyBwb3NpdGlvbiBhcyBhIHN1cHBsaWFudCB0aGFuIGZyb20gZ29vZHdpbGwsIGFuZCBrZXB0IGhpbSBpbiBoaXMgaGFuZHMuIFNvIGZhciBhcyBoaXMgb3BlbiBhY3RzIHdlcmUgY29uY2VybmVkLCBCb2NjaHVzIGVudHJlYXRlZCBNYXJpdXMgaW4gYmVoYWxmIG9mIGhpcyBmYXRoZXItaW4tbGF3LCB3cml0aW5nIHRoYXQgaGUgd291bGQgbm90IGdpdmUgaGltIHVwIGFuZCBhc3N1bWluZyBhIGJvbGQgdG9uZTsgYnV0IHNlY3JldGx5IGhlIHBsYW5uZWQgdG8gYmV0cmF5IGhpbSwgYW5kIHNlbnQgZm9yIEx1Y2l1cyBTdWxsYSwgd2hvIHdhcyBxdWFlc3RvciBmb3IgTWFyaXVzIGFuZCBoYWQgYmVlbiBvZiBzb21lIHNlcnZpY2UgdG8gQm9jY2h1cyBkdXJpbmcgdGhlIGNhbXBhaWduLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBTdWxsYSBoYWQgY29tZSB0byBoaW0gaW4gYWxsIGNvbmZpZGVuY2UsIHRoZSBCYXJiYXJpYW4gZXhwZXJpZW5jZWQgYSBjaGFuZ2Ugb2YgaGVhcnQgYW5kIGZlbHQgcmVwZW50YW50LCBhbmQgZm9yIG1hbnkgZGF5cyB3YXZlcmVkIGluIGhpcyBwbGFucywgZGVsaWJlcmF0aW5nIHdoZXRoZXIgdG8gc3VycmVuZGVyIEp1Z3VydGhhIG9yIHRvIGhvbGQgU3VsbGEgYWxzbyBhIHByaXNvbmVyLiBGaW5hbGx5IGhvd2V2ZXIsIGhlIGRlY2lkZWQgdXBvbiBoaXMgZmlyc3QgcGxhbiBvZiB0cmVhY2hlcnksIGFuZCBwdXQgSnVndXJ0aGEgYWxpdmUgaW50byB0aGUgaGFuZHMgb2YgU3VsbGEuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgZmlyc3Qgc2VlZCBvZiB0aGF0IGJpdHRlciBhbmQgaW5jdXJhYmxlIGhhdHJlZCBiZXR3ZWVuIE1hcml1cyBhbmQgU3VsbGEsIHdoaWNoIG5lYXJseSBicm91Z2h0IFJvbWUgdG8gcnVpbi4gRm9yIG1hbnkgd2lzaGVkIFN1bGxhIHRvIGhhdmUgdGhlIGdsb3J5IG9mIHRoZSBhZmZhaXIgYmVjYXVzZSB0aGV5IGhhdGVkIE1hcml1cywgYW5kIFN1bGxhIGhpbXNlbGYgaGFkIGEgc2VhbC1yaW5nIG1hZGUsIHdoaWNoIGhlIHVzZWQgdG8gd2Vhciwgb24gd2hpY2ggd2FzIGVuZ3JhdmVkIHRoZSBzdXJyZW5kZXIgb2YgSnVndXJ0aGEgdG8gaGltIGJ5IEJvY2NodXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ5IGNvbnN0YW50bHkgdXNpbmcgdGhpcyByaW5nIFN1bGxhIHByb3Zva2VkIE1hcml1cywgd2hvIHdhcyBhbiBhbWJpdGlvdXMgbWFuLCBsb2F0aCB0byBzaGFyZSBoaXMgZ2xvcnkgd2l0aCBhbm90aGVyLCBhbmQgcXVhcnJlbHNvbWUuIEFuZCB0aGUgZW5lbWllcyBvZiBNYXJpdXMgZ2F2ZSBTdWxsYSBtb3N0IGVuY291cmFnZW1lbnQsIGJ5IGF0dHJpYnV0aW5nIHRoZSBmaXJzdCBhbmQgZ3JlYXRlc3Qgc3VjY2Vzc2VzIG9mIHRoZSB3YXIgdG8gTWV0ZWxsdXMsIGJ1dCB0aGUgbGFzdCwgYW5kIHRoZSB0ZXJtaW5hdGlvbiBvZiBpdCwgdG8gU3VsbGEsIHRoYXQgc28gdGhlIHBlb3BsZSBtaWdodCBjZWFzZSBhZG1pcmluZyBNYXJpdXMgYW5kIGdpdmluZyBoaW0gdGhlaXIgY2hpZWYgYWxsZWdpYW5jZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvb24sIGhvd2V2ZXIsIGFsbCB0aGlzIGVudnkgYW5kIGhhdHJlZCBhbmQgc2xhbmRlciBvZiBNYXJpdXMgd2FzIHJlbW92ZWQgYW5kIGRpc3NpcGF0ZWQgYnkgdGhlIHBlcmlsIHdoaWNoIHRocmVhdGVuZWQgSXRhbHkgZnJvbSB0aGUgd2VzdCwgYXMgc29vbiBhcyB0aGUgc3RhdGUgZmVsdCB0aGUgbmVlZCBvZiBhIGdyZWF0IGdlbmVyYWwgYW5kIGxvb2tlZCBhYm91dCBmb3IgYSBoZWxtc21hbiB3aG9tIHNoZSBtaWdodCBlbXBsb3kgdG8gc2F2ZSBoZXIgZnJvbSBzbyBncmVhdCBhIGRlbHVnZSBvZiB3YXIuIFRoZW4gdGhlIHBlb3BsZSB3b3VsZCBoYXZlIG5vdGhpbmcgdG8gZG8gd2l0aCBhbnlvbmUgb2YgaGlnaCBiaXJ0aCBvciBvZiBhIHdlYWx0aHkgaG91c2Ugd2hvIG9mZmVyZWQgaGltc2VsZiBhdCB0aGUgY29uc3VsYXIgZWxlY3Rpb25zLCBidXQgcHJvY2xhaW1lZCBNYXJpdXMgY29uc3VsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciAxMDQgQi5DLiA8L25vdGU+IGluIHNwaXRlIG9mIGhpcyBhYnNlbmNlIGZyb20gdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyBzb29uZXIgaGFkIHdvcmQgYmVlbiBicm91Z2h0IHRvIHRoZSBwZW9wbGUgb2YgdGhlIGNhcHR1cmUgb2YgSnVndXJ0aGEgdGhhbiB0aGUgcmVwb3J0cyBhYm91dCB0aGUgVGV1dG9uZXMgYW5kIENpbWJyaSBmZWxsIHVwb24gdGhlaXIgZWFycy4gV2hhdCB0aGVzZSByZXBvcnRzIHNhaWQgYWJvdXQgdGhlIG51bWJlcnMgYW5kIHN0cmVuZ3RoIG9mIHRoZSBpbnZhZGluZyBob3N0cyB3YXMgZGlzYmVsaWV2ZWQgYXQgZmlyc3QsIGJ1dCBhZnRlcndhcmRzIGl0IHdhcyBmb3VuZCB0byBiZSBzaG9ydCBvZiB0aGUgdHJ1dGguIEZvciB0aHJlZSBodW5kcmVkIHRob3VzYW5kIGFybWVkIGZpZ2h0aW5nIG1lbiB3ZXJlIGFkdmFuY2luZywgYW5kIG11Y2ggbGFyZ2VyIGhvcmRlcyBvZiB3b21lbiBhbmQgY2hpbGRyZW4gd2VyZSBzYWlkIHRvIGFjY29tcGFueSB0aGVtLCBpbiBxdWVzdCBvZiBsYW5kIHRvIHN1cHBvcnQgc28gdmFzdCBhIG11bHRpdHVkZSwgYW5kIG9mIGNpdGllcyBpbiB3aGljaCB0byBzZXR0bGUgYW5kIGxpdmUsIGp1c3QgYXMgdGhlIEdhdWxzIGJlZm9yZSB0aGVtLCBhcyB0aGV5IGxlYXJuZWQsIGhhZCB3cmVzdGVkIHRoZSBiZXN0IHBhcnQgb2YgSXRhbHkgZnJvbSB0aGUgVHlycmhlbmlhbnMgYW5kIG5vdyBvY2N1cGllZCBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSB0aGVtc2VsdmVzLCBpbmRlZWQsIGhhZCBub3QgaGFkIGludGVyY291cnNlIHdpdGggb3RoZXIgcGVvcGxlcywgYW5kIGhhZCB0cmF2ZXJzZWQgYSBncmVhdCBzdHJldGNoIG9mIGNvdW50cnksIHNvIHRoYXQgaXQgY291bGQgbm90IGJlIGFzY2VydGFpbmVkIHdoYXQgcGVvcGxlIGl0IHdhcyBub3Igd2hlbmNlIHRoZXkgaGFkIHNldCBvdXQsIHRodXMgdG8gZGVzY2VuZCB1cG9uIEdhdWwgYW5kIEl0YWx5IGxpa2UgYSBjbG91ZC4gVGhlIG1vc3QgcHJldmFsZW50IGNvbmplY3R1cmUgd2FzIHRoYXQgdGhleSB3ZXJlIHNvbWUgb2YgdGhlIEdlcm1hbiBwZW9wbGVzIHdoaWNoIGV4dGVuZGVkIGFzIGZhciBhcyB0aGUgbm9ydGhlcm4gb2NlYW4sIGEgY29uamVjdHVyZSBiYXNlZCBvbiB0aGVpciBncmVhdCBzdGF0dXJlLCB0aGVpciBsaWdodC1ibHVlIGV5ZXMsIGFuZCB0aGUgZmFjdCB0aGF0IHRoZSBHZXJtYW5zIGNhbGwgcm9iYmVycyBDaW1icmkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlcmUgYXJlIHNvbWUgd2hvIHNheSB0aGF0IEdhdWwgd2FzIHdpZGUgYW5kIGxhcmdlIGVub3VnaCB0byByZWFjaCBmcm9tIHRoZSBvdXRlciBzZWEgYW5kIHRoZSBzdWJhcmN0aWMgcmVnaW9ucyB0byB0aGUgTWFlb3RpYyBMYWtlIG9uIHRoZSBlYXN0LCB3aGVyZSBpdCBib3JkZXJlZCBvbiBQb250aWMgU2N5dGhpYSwgYW5kIHRoYXQgZnJvbSB0aGF0IHBvaW50IG9uIEdhdWxzIGFuZCBTY3l0aGlhbnMgd2VyZSBtaW5nbGVkLiBUaGVzZSBtaXhlZCBHYXVscyBhbmQgU2N5dGhpYW5zIGhhZCBsZWZ0IHRoZWlyIGhvbWVzIGFuZCBtb3ZlZCB3ZXN0d2FyZCwgbm90IGluIGEgc2luZ2xlIG1hcmNoLCBub3IgZXZlbiBjb250aW51b3VzbHksIGJ1dCB3aXRoIGVhY2ggcmVjdXJyaW5nIHNwcmluZyB0aGV5IGhhZCBnb25lIGZvcndhcmQsIGZpZ2h0aW5nIHRoZWlyIHdheSwgYW5kIGluIHRoZSBjb3Vyc2Ugb2YgdGltZSBoYWQgY3Jvc3NlZCB0aGUgY29udGluZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIHdoaWxlIHRoZXkgaGFkIG1hbnkgbmFtZXMgZm9yIGRpZmZlcmVudCBkZXRhY2htZW50cywgdGhleSBjYWxsZWQgdGhlaXIgd2hvbGUgYXJteSBieSB0aGUgZ2VuZXJhbCBuYW1lIG9mIEdhbGxvc2N5dGhpYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPk90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgdGhlIENpbW1lcmlhbnMgd2hvIHdlcmUgZmlyc3Qga25vd24gdG8gdGhlIGFuY2llbnQgR3JlZWtzIHdlcmUgbm90IGEgbGFyZ2UgcGFydCBvZiB0aGUgZW50aXJlIHBlb3BsZSwgYnV0IG1lcmVseSBhIGJvZHkgb2YgZXhpbGVzIG9yIGEgZmFjdGlvbiB3aGljaCB3YXMgZHJpdmVuIGF3YXkgYnkgdGhlIFNjeXRoaWFucyBhbmQgcGFzc2VkIGZyb20gdGhlIE1hZW90aWMgTGFrZSBpbnRvIEFzaWEgdW5kZXIgdGhlIGxlYWQgb2YgTHlnZGFtaXM7IHdoZXJlYXMgdGhlIGxhcmdlc3QgYW5kIG1vc3Qgd2FybGlrZSBwYXJ0IG9mIHRoZSBwZW9wbGUgZHdlbHQgYXQgdGhlIGNvbmZpbmVzIG9mIHRoZSBlYXJ0aCBhbG9uZyB0aGUgb3V0ZXIgc2VhLCBvY2N1cHlpbmcgYSBsYW5kIHRoYXQgaXMgc2hhZGVkLCB3b29kZWQsIGFuZCB3aG9sbHkgc3VubGVzcyBieSByZWFzb24gb2YgdGhlIGhlaWdodCBhbmQgdGhpY2tuZXNzIG9mIHRoZSB0cmVlcywgd2hpY2ggcmVhY2ggaW5sYW5kIGFzIGZhciBhcyB0aGUgSGVyY3luaWk7IAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhcyByZWdhcmRzIHRoZSBoZWF2ZW5zLCB0aGV5IGFyZSB1bmRlciB0aGF0IHBvcnRpb24gb2YgdGhlbSB3aGVyZSB0aGUgcG9sZSBnZXRzIGEgZ3JlYXQgZWxldmF0aW9uIGJ5IHJlYXNvbiBvZiB0aGUgZGVjbGluYXRpb24gb2YgdGhlIHBhcmFsbGVscywgYW5kIGFwcGVhcnMgdG8gaGF2ZSBhIHBvc2l0aW9uIG5vdCBmYXIgcmVtb3ZlZCBmcm9tIHRoZSBzcGVjdGF0b3IncyB6ZW5pdGgsIGFuZCBhIGRheSBhbmQgYSBuaWdodCBkaXZpZGUgdGhlIHllYXIgaW50byB0d28gZXF1YWwgcGFydHM7IHdoaWNoIHdhcyBvZiBhZHZhbnRhZ2UgdG8gSG9tZXIgaW4gaGlzIHN0b3J5IG9mIE9keXNzZXVzIGNvbnN1bHRpbmcgdGhlIHNoYWRlcyBvZiB0aGUgZGVhZC4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+IAogICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleSA8L3RpdGxlPiwgQm9vayBYSS4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDExLjEwIiB2YWxpZD0ieWVzIj5TZWUgdnYuIDE0IGZmLiA8L2JpYmw+LCBkZXNjcmliaW5nIHRoZSBDaW1tZXJpYW5zLiA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+RnJvbSB0aGVzZSByZWdpb25zLCB0aGVuLCB0aGVzZSBCYXJiYXJpYW5zIHNhbGxpZWQgZm9ydGggYWdhaW5zdCBJdGFseSwgYmVpbmcgY2FsbGVkIGF0IGZpcnN0IENpbW1lcmlhbnMsIGFuZCB0aGVuLCBub3QgaW5hcHByb3ByaWF0ZWx5LCBDaW1icmkuIEJ1dCBhbGwgdGhpcyBpcyBiYXNlZCBvbiBjb25qZWN0dXJlIHJhdGhlciB0aGFuIG9uIHN1cmUgaGlzdG9yaWNhbCBldmlkZW5jZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIG51bWJlcnMsIGhvd2V2ZXIsIGFyZSBnaXZlbiBieSBtYW55IHdyaXRlcnMgYXMgbm90IGxlc3MsIGJ1dCBtb3JlLCB0aGFuIHRoZSBmaWd1cmUgbWVudGlvbmVkIGFib3ZlLiBNb3Jlb3ZlciwgdGhlaXIgY291cmFnZSBhbmQgZGFyaW5nIG1hZGUgdGhlbSBpcnJlc2lzdGlibGUsIGFuZCB3aGVuIHRoZXkgZW5nYWdlZCBpbiBiYXR0bGUgdGhleSBjYW1lIG9uIHdpdGggdGhlIHN3aWZ0bmVzcyBhbmQgZm9yY2Ugb2YgZmlyZSwgc28gdGhhdCBubyBvbmUgY291bGQgd2l0aHN0YW5kIHRoZWlyIG9uc2V0LCBidXQgYWxsIHdobyBjYW1lIGluIHRoZWlyIHdheSBiZWNhbWUgdGhlaXIgcHJleSBhbmQgYm9vdHksIGFuZCBldmVuIG1hbnkgbGFyZ2UgUm9tYW4gYXJtaWVzLCB3aXRoIHRoZWlyIGNvbW1hbmRlcnMsIHdobyBoYWQgYmVlbiBzdGF0aW9uZWQgdG8gcHJvdGVjdCBUcmFuc2FscGluZSBHYXVsLCB3ZXJlIGRlc3Ryb3llZCBpbmdsb3Jpb3VzbHk7IAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmluZGVlZCwgYnkgdGhlaXIgZmVlYmxlIHJlc2lzdGFuY2UgdGhleSB3ZXJlIG1haW5seSBpbnN0cnVtZW50YWwgaW4gZHJhd2luZyB0aGUgb24tcnVzaGluZyBCYXJiYXJpYW5zIGRvd24gdXBvbiBSb21lLiBGb3Igd2hlbiB0aGUgaW52YWRlcnMgaGFkIGNvbnF1ZXJlZCB0aG9zZSB3aG8gb3Bwb3NlZCB0aGVtLCBhbmQgaGFkIGdvdCBhYnVuZGFuY2Ugb2YgYm9vdHksIHRoZXkgZGV0ZXJtaW5lZCBub3QgdG8gc2V0dGxlIHRoZW1zZWx2ZXMgYW55d2hlcmUgdW50aWwgdGhleSBoYWQgZGVzdHJveWVkIFJvbWUgYW5kIHJhdmFnZWQgSXRhbHkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5MZWFybmluZyBvZiB0aGVzZSB0aGluZ3MgZnJvbSBtYW55IHF1YXJ0ZXJzLCB0aGUgUm9tYW5zIHN1bW1vbmVkIE1hcml1cyB0byB0aGUgY29tbWFuZC4gQW5kIGhlIHdhcyBhcHBvaW50ZWQgY29uc3VsIGZvciB0aGUgc2Vjb25kIHRpbWUsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTEuMSIgdmFsaWQ9InllcyI+U2VlIGNoYXB0ZXIgeGkuIDEuIDwvYmlibD4gTWFyaXVzIHdhcyBzdGlsbCBpbiBBZnJpY2EuIDwvbm90ZT4gYWx0aG91Z2ggdGhlIGxhdyBmb3JiYWRlIHRoYXQgYSBtYW4gaW4gaGlzIGFic2VuY2UgYW5kIGJlZm9yZSB0aGUgbGFwc2Ugb2YgYSBzcGVjaWZpZWQgdGltZSBzaG91bGQgYmUgZWxlY3RlZCBhZ2Fpbjsgc3RpbGwsIHRoZSBwZW9wbGUgd291bGQgbm90IGxpc3RlbiB0byB0aG9zZSB3aG8gb3Bwb3NlZCB0aGUgZWxlY3Rpb24uIEZvciB0aGV5IGNvbnNpZGVyZWQgdGhhdCB0aGlzIHdvdWxkIG5vdCBiZSB0aGUgZmlyc3QgdGltZSB0aGF0IHRoZSBsYXcgaGFkIGdpdmVuIHdheSBiZWZvcmUgdGhlIGRlbWFuZHMgb2YgdGhlIGdlbmVyYWwgZ29vZCwgYW5kIHRoYXQgdGhlIHByZXNlbnQgb2NjYXNpb24gZGVtYW5kZWQgaXQgbm8gbGVzcyBpbXBlcmF0aXZlbHkgdGhhbiB3aGVuIHRoZXkgaGFkIG1hZGUgU2NpcGlvIGNvbnN1bCBjb250cmFyeSB0byB0aGUgbGF3cywgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTQ3IEIuQy4sIHdoZW4gU2NpcGlvIGhhZCBub3QgcmVhY2hlZCB0aGUgYWdlIHJlcXVpcmVkIGJ5IGxhdy4gPC9ub3RlPiBhbHRob3VnaCBhdCB0aGF0IHRpbWUgdGhleSB3ZXJlIG5vdCBmZWFyZnVsIG9mIGxvc2luZyB0aGVpciBvd24gY2l0eSwgYnV0IGRlc2lyb3VzIG9mIGRlc3Ryb3lpbmcgdGhhdCBvZiB0aGUgQ2FydGhhZ2luaWFucy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBjb3Vyc2Ugd2FzIGFkb3B0ZWQsIE1hcml1cyBjYW1lIGFjcm9zcyB0aGUgc2VhIGZyb20gQWZyaWNhIHdpdGggaGlzIGFybXksIGFuZCBvbiB0aGUgdmVyeSBDYWxlbmRzIG9mIEphbnVhcnksIHdoaWNoIHdpdGggdGhlIFJvbWFucyBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB5ZWFyLCBhc3N1bWVkIHRoZSBjb25zdWxzaGlwIGFuZCBjZWxlYnJhdGVkIGhpcyB0cml1bXBoLCBleGhpYml0aW5nIHRvIHRoZSBSb21hbnMgSnVndXJ0aGEgaW4gY2hhaW5zLiBUaGlzIHdhcyBhIHNpZ2h0IHdoaWNoIHRoZXkgaGFkIGRlc3BhaXJlZCBvZiBiZWhvbGRpbmcsIG5vciBjb3VsZCBhbnkgb25lIGhhdmUgZXhwZWN0ZWQsIHdoaWxlIEp1Z3VydGhhIHdhcyBhbGl2ZSwgdG8gY29ucXVlciB0aGUgZW5lbXk7IHNvIHZlcnNhdGlsZSB3YXMgaGUgaW4gYWRhcHRpbmcgaGltc2VsZiB0byB0aGUgdHVybnMgb2YgZm9ydHVuZSwgYW5kIHNvIGdyZWF0IGNyYWZ0IGRpZCBoZSBjb21iaW5lIHdpdGggaGlzIGNvdXJhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gaGUgaGFkIGJlZW4gbGVkIGluIHRyaXVtcGggaGUgbG9zdCBoaXMgcmVhc29uOyBhbmQgdGhhdCB3aGVuLCBhZnRlciB0aGUgdHJpdW1waCwgaGUgd2FzIGNhc3QgaW50byBwcmlzb24sIHdoZXJlIHNvbWUgdG9yZSBoaXMgdHVuaWMgZnJvbSBoaXMgYm9keSwgYW5kIG90aGVycyB3ZXJlIHNvIGVhZ2VyIHRvIHNuYXRjaCBhd2F5IGhpcyBnb2xkZW4gZWFycmluZyB0aGF0IHRoZXkgdG9yZSBvZmYgd2l0aCBpdCB0aGUgbG9iZSBvZiBoaXMgZWFyLCBhbmQgd2hlbiBoZSBoYWQgYmVlbiB0aHJ1c3QgZG93biBuYWtlZCBpbnRvIHRoZSBkdW5nZW9uIHBpdCwgaW4gdXR0ZXIgYmV3aWxkZXJtZW50IGFuZCB3aXRoIGEgZ3JpbiBvbiBoaXMgbGlwcyBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlcmN1bGVzISBIb3cgY29sZCB0aGlzIFJvbWFuIGJhdGggaXMhPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgd3JldGNoLCBhZnRlciBzdHJ1Z2dsaW5nIHdpdGggaHVuZ2VyIGZvciBzaXggZGF5cyBhbmQgdXAgdG8gdGhlIGxhc3QgbW9tZW50IGNsaW5naW5nIHRvIHRoZSBkZXNpcmUgb2YgbGlmZSwgcGFpZCB0aGUgcGVuYWx0eSB3aGljaCBoaXMgY3JpbWVzIGRlc2VydmVkLgoJCQk8L3A+CiAgICAgICAgIDxwPkluIHRoZSB0cml1bXBoYWwgcHJvY2Vzc2lvbiB0aGVyZSB3ZXJlIGNhcnJpZWQsIHdlIGFyZSB0b2xkLCB0aHJlZSB0aG91c2FuZCBhbmQgc2V2ZW4gcG91bmRzIG9mIGdvbGQsIG9mIHVuY29pbmVkIHNpbHZlciBmaXZlIHRob3VzYW5kIHNldmVuIGh1bmRyZWQgYW5kIHNldmVudHktZml2ZSwgYW5kIGluIGNvaW5lZCBtb25leSB0d28gaHVuZHJlZCBhbmQgZWlnaHR5LXNldmVuIHRob3VzYW5kIGRyYWNobWFzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIHByb2Nlc3Npb24gd2FzIG92ZXIsIE1hcml1cyBjYWxsZWQgdGhlIHNlbmF0ZSBpbnRvIHNlc3Npb24gb24gdGhlIENhcGl0b2wsIGFuZCBtYWRlIGhpcyBlbnRyeSwgZWl0aGVyIHRocm91Z2ggaW5hZHZlcnRlbmNlIG9yIHdpdGggYSB2dWxnYXIgZGlzcGxheSBvZiBoaXMgZ29vZCBmb3J0dW5lLCBpbiBoaXMgdHJpdW1waGFsIHJvYmVzOyBidXQgcGVyY2VpdmluZyBxdWlja2x5IHRoYXQgdGhlIHNlbmF0b3JzIHdlcmUgb2ZmZW5kZWQgYXQgdGhpcywgaGUgcm9zZSBhbmQgd2VudCBvdXQsIGNoYW5nZWQgdG8gdGhlIHVzdWFsIHJvYmUgd2l0aCBwdXJwbGUgYm9yZGVyLCBhbmQgdGhlbiBjYW1lIGJhY2suCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TZXR0aW5nIG91dCBvbiB0aGUgZXhwZWRpdGlvbiwgaGUgbGFib3VyZWQgdG8gcGVyZmVjdCBoaXMgYXJteSBhcyBpdCB3ZW50IGFsb25nLCBwcmFjdGlzaW5nIHRoZSBtZW4gaW4gYWxsIGtpbmRzIG9mIHJ1bm5pbmcgYW5kIGluIGxvbmcgbWFyY2hlcywgYW5kIGNvbXBlbGxpbmcgdGhlbSB0byBjYXJyeSB0aGVpciBvd24gYmFnZ2FnZSBhbmQgdG8gcHJlcGFyZSB0aGVpciBvd24gZm9vZC4gSGVuY2UsIGluIGFmdGVyIHRpbWVzLCBtZW4gd2hvIHdlcmUgZm9uZCBvZiB0b2lsIGFuZCBkaWQgd2hhdGV2ZXIgd2FzIGVuam9pbmVkIHVwb24gdGhlbSBjb250ZW50ZWRseSBhbmQgd2l0aG91dCBhIG11cm11ciwgd2VyZSBjYWxsZWQgTWFyaWFuIG11bGVzLiBTb21lLCBob3dldmVyLCB0aGluayB0aGF0IHRoaXMgbmFtZSBoYWQgYSBkaWZmZXJlbnQgb3JpZ2luLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5OYW1lbHksIHdoZW4gU2NpcGlvIHdhcyBiZXNpZWdpbmcgTnVtYW50aWEsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAzLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAyIDwvYmlibD4uIDwvbm90ZT4gaGUgd2lzaGVkIHRvIGluc3BlY3Qgbm90IG9ubHkgdGhlIGFybXMgYW5kIHRoZSBob3JzZXMsIGJ1dCBhbHNvIHRoZSBtdWxlcyBhbmQgdGhlIHdhZ2dvbnMsIHRoYXQgZXZlcnkgbWFuIG1pZ2h0IGhhdmUgdGhlbSBpbiByZWFkaW5lc3MgYW5kIGdvb2Qgb3JkZXIuIE1hcml1cywgYWNjb3JkaW5nbHksIGJyb3VnaHQgb3V0IGZvciBpbnNwZWN0aW9uIGJvdGggYSBob3JzZSB0aGF0IGhhZCBiZWVuIG1vc3QgZXhjZWxsZW50bHkgdGFrZW4gY2FyZSBvZiBieSBoaW0sIGFuZCBhIG11bGUgdGhhdCBmb3IgaGVhbHRoLCBkb2NpbGl0eSwgYW5kIHN0cmVuZ3RoIGZhciBzdXJwYXNzZWQgYWxsIHRoZSByZXN0LiBUaGUgY29tbWFuZGluZyBvZmZpY2VyIHdhcyBuYXR1cmFsbHkgd2VsbCBwbGVhc2VkIHdpdGggdGhlIGJlYXN0cyBvZiBNYXJpdXMgYW5kIG9mdGVuIHNwb2tlIGFib3V0IHRoZW0sIHNvIHRoYXQgaW4gdGltZSB0aG9zZSB3aG8gd2FudGVkIHRvIGJlc3RvdyBmYWNldGlvdXMgcHJhaXNlIG9uIGEgcGVyc2V2ZXJpbmcsIHBhdGllbnQsIGxhYm9yaW91cyBtYW4gd291bGQgY2FsbCBoaW0gYSBNYXJpYW4gbXVsZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGFzIGl0IHdvdWxkIHNlZW0sIGEgZ3JlYXQgcGllY2Ugb2YgZ29vZCBmb3J0dW5lIGJlZmVsbCBNYXJpdXMuIEZvciB0aGUgQmFyYmFyaWFucyBoYWQgYSByZWZsdXgsIGFzIGl0IHdlcmUsIGluIHRoZWlyIGNvdXJzZSwgYW5kIHN0cmVhbWVkIGZpcnN0IGludG8gU3BhaW4uIFRoaXMgZ2F2ZSBNYXJpdXMgdGltZSB0byBleGVyY2lzZSB0aGUgYm9kaWVzIG9mIGhpcyBtZW4sIHRvIHJhaXNlIHRoZWlyIHNwaXJpdHMgdG8gYSBzdHVyZGllciBjb3VyYWdlLCBhbmQsIHdoYXQgd2FzIG1vc3QgaW1wb3J0YW50IG9mIGFsbCwgdG8gbGV0IHRoZW0gZmluZCBvdXQgd2hhdCBzb3J0IG9mIGEgbWFuIGhlIHdhcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhpcyBzdGVybm5lc3MgaW4gdGhlIGV4ZXJjaXNlIG9mIGF1dGhvcml0eSBhbmQgaGlzIGluZmxleGliaWxpdHkgaW4gdGhlIGluZmxpY3Rpb24gb2YgcHVuaXNobWVudCBhcHBlYXJlZCB0byB0aGVtLCB3aGVuIHRoZXkgYmVjYW1lIGFjY3VzdG9tZWQgdG8gb2JlZGllbmNlIGFuZCBnb29kIGJlaGF2aW91ciwgc2FsdXRhcnkgYXMgd2VsbCBhcyBqdXN0LCBhbmQgdGhleSByZWdhcmRlZCB0aGUgZmllcmNlbmVzcyBvZiBoaXMgdGVtcGVyLCB0aGUgaGFyc2huZXNzIG9mIGhpcyB2b2ljZSwgYW5kIHRoYXQgZmVyb2NpdHkgb2YgaGlzIGNvdW50ZW5hbmNlIHdoaWNoIGdyYWR1YWxseSBiZWNhbWUgZmFtaWxpYXIsIGFzIGZlYXJmdWwgdG8gdGhlaXIgZW5lbWllcyByYXRoZXIgdGhhbiB0byB0aGVtc2VsdmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgd2FzIGFib3ZlIGFsbCB0aGluZ3MgdGhlIHVwcmlnaHRuZXNzIG9mIGhpcyBqdWRpY2lhbCBkZWNpc2lvbnMgdGhhdCBwbGVhc2VkIHRoZSBzb2xkaWVyczsgYW5kIG9mIHRoaXMgdGhlIGZvbGxvd2luZyBpbGx1c3RyYXRpb24gaXMgZ2l2ZW4uCgkJCTwvcD4KICAgICAgICAgPHA+Q2FpdXMgTHVzaXVzLCBhIG5lcGhldyBvZiBoaXMsIGhhZCBhIGNvbW1hbmQgdW5kZXIgaGltIGluIHRoZSBhcm15LiBJbiBvdGhlciByZXNwZWN0cyBoZSB3YXMgYSBtYW4gb2YgZ29vZCByZXB1dGF0aW9uLCBidXQgaGUgaGFkIGEgd2Vha25lc3MgZm9yIGJlYXV0aWZ1bCB5b3V0aHMuIFRoaXMgb2ZmaWNlciB3YXMgZW5hbW91cmVkIG9mIG9uZSBvZiB0aGUgeW91bmcgbWVuIHdobyBzZXJ2ZWQgdW5kZXIgaGltLCBieSBuYW1lIFRyZWJvbml1cywgYW5kIGhhZCBvZnRlbiBtYWRlIHVuc3VjY2Vzc2Z1bCBhdHRlbXB0cyB0byBzZWR1Y2UgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZmluYWxseSwgYXQgbmlnaHQsIGhlIHNlbnQgYSBzZXJ2YW50IHdpdGggYSBzdW1tb25zIGZvciBUcmVib25pdXMuIFRoZSB5b3VuZyBtYW4gY2FtZSwgc2luY2UgaGUgY291bGQgbm90IHJlZnVzZSB0byBvYmV5IGEgc3VtbW9ucywgYnV0IHdoZW4gaGUgaGFkIGJlZW4gaW50cm9kdWNlZCBpbnRvIHRoZSB0ZW50IGFuZCBDYWl1cyBhdHRlbXB0ZWQgdmlvbGVuY2UgdXBvbiBoaW0sIGhlIGRyZXcgaGlzIHN3b3JkIGFuZCBzbGV3IGhpbS4gTWFyaXVzIHdhcyBub3Qgd2l0aCB0aGUgYXJteSB3aGVuIHRoaXMgaGFwcGVuZWQ7IGJ1dCBvbiBoaXMgcmV0dXJuIGhlIGJyb3VnaHQgVHJlYm9uaXVzIHRvIHRyaWFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHRoZXJlIHdlcmUgbWFueSBhY2N1c2VycywgYnV0IG5vdCBhIHNpbmdsZSBhZHZvY2F0ZSwgd2hlcmVmb3JlIFRyZWJvbml1cyBoaW1zZWxmIGNvdXJhZ2VvdXNseSB0b29rIHRoZSBzdGFuZCBhbmQgdG9sZCBhbGwgYWJvdXQgdGhlIG1hdHRlciwgYnJpbmdpbmcgd2l0bmVzc2VzIHRvIHNob3cgdGhhdCBoZSBoYWQgb2Z0ZW4gcmVmdXNlZCB0aGUgc29saWNpdGF0aW9ucyBvZiBMdXNpdXMgYW5kIHRoYXQgaW4gc3BpdGUgb2YgbGFyZ2Ugb2ZmZXJzIGhlIGhhZCBuZXZlciBwcm9zdGl0dXRlZCBoaW1zZWxmIHRvIGFueW9uZS4gVGhlbiBNYXJpdXMsIGZpbGxlZCB3aXRoIGRlbGlnaHQgYW5kIGFkbWlyYXRpb24sIG9yZGVyZWQgdGhlIGN1c3RvbWFyeSBjcm93biBmb3IgYnJhdmUgZXhwbG9pdHMgdG8gYmUgYnJvdWdodCwgYW5kIHdpdGggaGlzIG93biBoYW5kcyBwbGFjZWQgaXQgb24gdGhlIGhlYWQgb2YgVHJlYm9uaXVzLCBkZWNsYXJpbmcgdGhhdCBhdCBhIHRpbWUgd2hpY2ggY2FsbGVkIGZvciBub2JsZSBleGFtcGxlcyBoZSBoYWQgZGlzcGxheWVkIG1vc3Qgbm9ibGUgY29uZHVjdC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRpZGluZ3Mgb2YgdGhpcyB3ZXJlIGJyb3VnaHQgdG8gUm9tZSBhbmQgaGVscGVkIGluIG5vIHNtYWxsIGRlZ3JlZSB0byBzZWN1cmUgZm9yIE1hcml1cyBoaXMgdGhpcmQgY29uc3Vsc2hpcDsgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDEwMyBCLkMuIDwvbm90ZT4gYXQgdGhlIHNhbWUgdGltZSwgdG9vLCB0aGUgQmFyYmFyaWFucyB3ZXJlIGV4cGVjdGVkIGluIHRoZSBzcHJpbmcsIGFuZCB0aGUgUm9tYW5zIHdlcmUgdW53aWxsaW5nIHRvIHJpc2sgYmF0dGxlIHdpdGggdGhlbSB1bmRlciBhbnkgb3RoZXIgZ2VuZXJhbC4gSG93ZXZlciwgdGhlIEJhcmJhcmlhbnMgZGlkIG5vdCBjb21lIGFzIHNvb24gYXMgdGhleSB3ZXJlIGV4cGVjdGVkLCBhbmQgb25jZSBtb3JlIHRoZSBwZXJpb2Qgb2YgTWFyaXVzJ3MgY29uc3Vsc2hpcCBleHBpcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5BcyB0aGUgY29uc3VsYXIgZWxlY3Rpb25zIHdlcmUgYXQgaGFuZCwgYW5kIGFzIGhpcyBjb2xsZWFndWUgaW4gdGhlIG9mZmljZSBoYWQgZGllZCwgTWFyaXVzIGxlZnQgTWFuaXVzIEFxdWlsbGl1cyBpbiBjaGFyZ2Ugb2YgdGhlIGZvcmNlcyBhbmQgY2FtZSBoaW1zZWxmIHRvIFJvbWUuIEhlcmUgbWFueSBtZW4gb2YgZ3JlYXQgbWVyaXQgd2VyZSBjYW5kaWRhdGVzIGZvciB0aGUgY29uc3Vsc2hpcCwgYnV0IEx1Y2l1cyBTYXR1cm5pbnVzLCB3aG8gaGFkIG1vcmUgaW5mbHVlbmNlIHdpdGggdGhlIHBlb3BsZSB0aGFuIGFueSBvdGhlciB0cmlidW5lLCB3YXMgd29uIG92ZXIgYnkgdGhlIGZsYXR0ZXJpbmcgYXR0ZW50aW9ucyBvZiBNYXJpdXMsIGFuZCBpbiBoaXMgaGFyYW5ndWVzIHVyZ2VkIHRoZSBwZW9wbGUgdG8gZWxlY3QgTWFyaXVzIGNvbnN1bC4gTWFyaXVzIGFmZmVjdGVkIHRvIGRlY2xpbmUgdGhlIG9mZmljZSBhbmQgZGVjbGFyZWQgdGhhdCBoZSBkaWQgbm90IHdhbnQgaXQsIGJ1dCBTYXR1cm5pbnVzIGNhbGxlZCBoaW0gYSB0cmFpdG9yIHRvIGhpcyBjb3VudHJ5IGZvciByZWZ1c2luZyB0byBjb21tYW5kIGhlciBhcm1pZXMgYXQgYSB0aW1lIG9mIHNvIGdyZWF0IHBlcmlsLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGl0IHdhcyBjbGVhciB0aGF0IFNhdHVybmludXMgd2FzIHBsYXlpbmcgaGlzIHBhcnQgYXQgdGhlIGluc3RpZ2F0aW9uIG9mIE1hcml1cywgYW5kIHBsYXlpbmcgaXQgYmFkbHksIHRvbywgYnV0IHRoZSBtdWx0aXR1ZGUsIHNlZWluZyB0aGF0IHRoZSBvY2Nhc2lvbiByZXF1aXJlZCB0aGUgYWJpbGl0eSBhcyB3ZWxsIGFzIHRoZSBnb29kIGZvcnR1bmUgb2YgTWFyaXVzLCB2b3RlZCBmb3IgaGlzIGZvdXJ0aCBjb25zdWxzaGlwLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xMDIgQi5DLiA8L25vdGU+IGFuZCBtYWRlIENhdHVsdXMgTHV0YXRpdXMgaGlzIGNvbGxlYWd1ZSwgYSBtYW4gd2hvIHdhcyBlc3RlZW1lZCBieSB0aGUgbm9iaWxpdHkgYW5kIG5vdCBkaXNsaWtlZCBieSB0aGUgY29tbW9uIHBlb3BsZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJTGVhcm5pbmcgdGhhdCB0aGUgZW5lbXkgd2VyZSBuZWFyLCBNYXJpdXMgcmFwaWRseSBjcm9zc2VkIHRoZSBBbHBzLCBhbmQgYnVpbHQgYSBmb3J0aWZpZWQgY2FtcCBhbG9uZyB0aGUgcml2ZXIgUmhvbmUuIEludG8gdGhpcyBoZSBicm91Z2h0IHRvZ2V0aGVyIGFuIGFidW5kYW5jZSBvZiBzdG9yZXMsIHRoYXQgaGUgbWlnaHQgbmV2ZXIgYmUgZm9yY2VkIGJ5IGxhY2sgb2YgcHJvdmlzaW9ucyB0byBnaXZlIGJhdHRsZSBjb250cmFyeSB0byBoaXMgYmV0dGVyIGp1ZGdtZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29udmV5YW5jZSBvZiB3aGF0IHdhcyBuZWVkZnVsIGZvciBoaXMgYXJteSwgd2hpY2ggaGFkIHByZXZpb3VzbHkgYmVlbiBhIGxvbmcgYW5kIGNvc3RseSBwcm9jZXNzIHdoZXJlIGl0IHdhcyBieSBzZWEsIGhlIHJlbmRlcmVkIGVhc3kgYW5kIHNwZWVkeS4gVGhhdCBpcywgdGhlIG1vdXRocyBvZiB0aGUgUmhvbmUsIGVuY291bnRlcmluZyB0aGUgc2VhLCB0b29rIHVwIGdyZWF0IHF1YW50aXRpZXMgb2YgbXVkIGFuZCBzYW5kIHBhY2tlZCBjbG9zZSB3aXRoIGNsYXkgYnkgdGhlIGFjdGlvbiBvZiB0aGUgYmlsbG93cywgYW5kIG1hZGUgdGhlIGVudHJhbmNlIG9mIHRoZSByaXZlciBkaWZmaWN1bHQsIGxhYm9yaW91cywgYW5kIHNsb3cgZm9yIHZlc3NlbHMgY2Fycnlpbmcgc3VwcGxpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIE1hcml1cyBicm91Z2h0IGhpcyBhcm15IHRvIHRoZSBwbGFjZSwgc2luY2UgdGhlIG1lbiBoYWQgbm90aGluZyBlbHNlIHRvIGRvLCBhbmQgcmFuIGEgZ3JlYXQgY2FuYWwuIEludG8gdGhpcyBoZSBkaXZlcnRlZCBhIGdyZWF0IHBhcnQgb2YgdGhlIHJpdmVyIGFuZCBicm91Z2h0IGl0IHJvdW5kIHRvIGEgc3VpdGFibGUgcGxhY2Ugb24gdGhlIGNvYXN0LCBhIGRlZXAgYmF5IHdoZXJlIGxhcmdlIHNoaXBzIGNvdWxkIGZsb2F0LCBhbmQgd2hlcmUgdGhlIHdhdGVyIGNvdWxkIGZsb3cgb3V0IHNtb290aGx5IGFuZCB3aXRob3V0IHdhdmVzIHRvIHRoZSBzZWEuIFRoaXMgY2FuYWwsIGluZGVlZCwgc3RpbGwgYmVhcnMgdGhlIG5hbWUgb2YgTWFyaXVzLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN0cmFiLiA0LjgiIHZhbGlkPSJ5ZXMiPlN0cmFibywgaXYuIDggKHAuIDE4MykgPC9iaWJsPi4gPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBCYXJiYXJpYW5zIGRpdmlkZWQgdGhlbXNlbHZlcyBpbnRvIHR3byBiYW5kcywgYW5kIGl0IGZlbGwgdG8gdGhlIGxvdCBvZiB0aGUgQ2ltYnJpIHRvIHByb2NlZWQgdGhyb3VnaCBOb3JpY3VtIGluIHRoZSBpbnRlcmlvciBvZiB0aGUgY291bnRyeSBhZ2FpbnN0IENhdHVsdXMsIGFuZCBmb3JjZSBhIHBhc3NhZ2UgdGhlcmUsIHdoaWxlIHRoZSBUZXV0b25lcyBhbmQgQW1icm9uZXMgd2VyZSB0byBtYXJjaCB0aHJvdWdoIExpZ3VyaWEgYWxvbmcgdGhlIHNlYS1jb2FzdCBhZ2FpbnN0IE1hcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIHBhcnQgb2YgdGhlIENpbWJyaSB0aGVyZSB3YXMgY29uc2lkZXJhYmxlIGRlbGF5IGFuZCBsb3NzIG9mIHRpbWUsIGJ1dCB0aGUgVGV1dG9uZXMgYW5kIEFtYnJvbmVzIHNldCBvdXQgYXQgb25jZSBwYXNzZWQgdGhyb3VnaCB0aGUgaW50ZXJ2ZW5pbmcgY291bnRyeSwgYW5kIG1hZGUgdGhlaXIgYXBwZWFyYW5jZSBiZWZvcmUgTWFyaXVzLiBUaGVpciBudW1iZXJzIHdlcmUgbGltaXRsZXNzLCB0aGV5IHdlcmUgaGlkZW91cyBpbiB0aGVpciBhc3BlY3QsIGFuZCB0aGVpciBzcGVlY2ggYW5kIGNyaWVzIHdlcmUgdW5saWtlIHRob3NlIG9mIG90aGVyIHBlb3BsZXMuIFRoZXkgY292ZXJlZCBhIGxhcmdlIHBhcnQgb2YgdGhlIHBsYWluLCBhbmQgYWZ0ZXIgcGl0Y2hpbmcgdGhlaXIgY2FtcCBjaGFsbGVuZ2VkIE1hcml1cyB0byBiYXR0bGUuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCU1hcml1cywgaG93ZXZlciwgcGFpZCBubyBoZWVkIHRvIHRoZW0sIGJ1dCBrZXB0IGhpcyBzb2xkaWVycyBpbnNpZGUgdGhlaXIgZm9ydGlmaWNhdGlvbnMsIGJpdHRlcmx5IHJlYnVraW5nIHRob3NlIHdobyB3b3VsZCBoYXZlIG1hZGUgYSBkaXNwbGF5IG9mIHRoZWlyIGNvdXJhZ2UsIGFuZCBjYWxsaW5nIHRob3NlIHdob3NlIGhpZ2ggc3Bpcml0IG1hZGUgdGhlbSB3aXNoIHRvIHJ1c2ggZm9ydGggYW5kIGdpdmUgYmF0dGxlIHRyYWl0b3JzIHRvIHRoZWlyIGNvdW50cnkuIEZvciBpdCB3YXMgbm90LCBoZSBzYWlkLCB0cml1bXBocyBvciB0cm9waGllcyB0aGF0IHNob3VsZCBub3cgYmUgdGhlIG9iamVjdCBvZiB0aGVpciBhbWJpdGlvbiwgYnV0IGhvdyB0aGV5IG1pZ2h0IHdhcmQgb2ZmIHNvIGdyZWF0IGEgY2xvdWQgYW5kIHRodW5kZXItYm9sdCBvZiB3YXIgYW5kIHNlY3VyZSB0aGUgc2FmZXR5IG9mIEl0YWx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBoaXMgbGFuZ3VhZ2UgaW4gcHJpdmF0ZSB0byBoaXMgb2ZmaWNlcnMgYW5kIGVxdWFsczsgYnV0IGhlIHdvdWxkIHN0YXRpb24gaGlzIHNvbGRpZXJzIG9uIHRoZSBmb3J0aWZpY2F0aW9ucyBieSBkZXRhY2htZW50cywgYmlkZGluZyB0aGVtIHRvIG9ic2VydmUgdGhlIGVuZW15LCBhbmQgaW4gdGhpcyB3YXkgYWNjdXN0b21lZCB0aGVtIG5vdCB0byBmZWFyIHRoZWlyIHNoYXBlIG9yIGRyZWFkIHRoZWlyIGNyaWVzLCB3aGljaCB3ZXJlIGFsdG9nZXRoZXIgc3RyYW5nZSBhbmQgZmVyb2Npb3VzOyBhbmQgdG8gbWFrZSB0aGVtc2VsdmVzIGFjcXVhaW50ZWQgd2l0aCB0aGVpciBlcXVpcG1lbnQgYW5kIG1vdmVtZW50cywgdGh1cyBpbiBjb3Vyc2Ugb2YgdGltZSByZW5kZXJpbmcgd2hhdCB3YXMgb25seSBhcHBhcmVudGx5IGZvcm1pZGFibGUgZmFtaWxpYXIgdG8gdGhlaXIgbWluZHMgZnJvbSBvYnNlcnZhdGlvbi4gRm9yIGhlIGNvbnNpZGVyZWQgdGhhdCB0aGVpciBub3ZlbHR5IGZhbHNlbHkgaW1wYXJ0cyB0byB0ZXJyaWZ5aW5nIG9iamVjdHMgbWFueSBxdWFsaXRpZXMgd2hpY2ggdGhleSBkbyBub3QgcG9zc2VzcywgYnV0IHRoYXQgd2l0aCBmYW1pbGlhcml0eSBldmVuIHRob3NlIHRoaW5ncyB3aGljaCBhcmUgcmVhbGx5IGRyZWFkZnVsIGxvc2UgdGhlaXIgcG93ZXIgdG8gYWZmcmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpbiB0aGUgY2FzZSBvZiBoaXMgc29sZGllcnMsIG5vdCBvbmx5IGRpZCB0aGUgZGFpbHkgc2lnaHQgb2YgdGhlIGVuZW15IGxlc3NlbiBzb21ld2hhdCB0aGVpciBhbWF6ZW1lbnQgYXQgdGhlbSwgYnV0IGFsc28sIHdoZW4gdGhleSBoZWFyZCB0aGUgdGhyZWF0cyBhbmQgdGhlIGludG9sZXJhYmxlIGJvYXN0aW5nIG9mIHRoZSBCYXJiYXJpYW5zLCB0aGVpciBhbmdlciByb3NlIGFuZCB3YXJtZWQgYW5kIHNldCBvbiBmaXJlIHRoZWlyIHNwaXJpdHM7IGZvciB0aGUgZW5lbXkgd2VyZSByYXZhZ2luZyBhbmQgcGx1bmRlcmluZyBhbGwgdGhlIGNvdW50cnkgcm91bmQsIGFuZCBiZXNpZGVzLCBvZnRlbiBhdHRhY2tlZCB0aGUgUm9tYW4gZm9ydGlmaWNhdGlvbnMgd2l0aCBncmVhdCB0ZW1lcml0eSBhbmQgc2hhbWVsZXNzbmVzcywgc28gdGhhdCBpbmRpZ25hbnQgc3BlZWNoZXMgb2YgaGlzIHNvbGRpZXJzIHJlYWNoZWQgdGhlIGVhcnMgb2YgTWFyaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBjb3dhcmRpY2UsIHByYXksIGhhcyBNYXJpdXMgZGlzY292ZXJlZCBpbiB1cyB0aGF0IGhlIGtlZXBzIHVzIG91dCBvZiBiYXR0bGUgbGlrZSB3b21lbiB1bmRlciBsb2NrIGFuZCBrZXk/IENvbWUsIGxldCB1cyBhY3QgbGlrZSBmcmVlbWVuIGFuZCBhc2sgaGltIGlmIGhlIGlzIHdhaXRpbmcgZm9yIG90aGVyIHNvbGRpZXJzIHRvIGZpZ2h0IGluIGRlZmVuY2Ugb2YgSXRhbHksIGFuZCB3aWxsIHVzZSB1cyBhcyB3b3JrbWVuIGFsbCB0aGUgdGltZSwgd2hlbmV2ZXIgdGhlcmUgaXMgbmVlZCBvZiBkaWdnaW5nIGRpdGNoZXMgYW5kIGNsZWFyaW5nIG91dCBtdWQgYW5kIGRpdmVydGluZyBhIHJpdmVyIG9yIHR3by4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgdG8gdGhpcyBlbmQsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgaGUgZXhlcmNpc2VkIHVzIGluIHRob3NlIG1hbnkgdG9pbHMsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDEgPC9iaWJsPi4gPC9ub3RlPiBhbmQgdGhlc2UgYXJlIHRoZSBhY2hpZXZlbWVudHMgb2YgaGlzIGNvbnN1bHNoaXBzIHdoaWNoIGhlIHdpbGwgZXhoaWJpdCB0byBoaXMgZmVsbG93LWNpdGl6ZW5zIG9uIGhpcyByZXR1cm4gdG8gUm9tZS4gT3IgZG9lcyBoZSBmZWFyIHRoZSBmYXRlIG9mIENhcmJvIGFuZCBDYWVwaW8sIHdob20gdGhlIGVuZW15IGRlZmVhdGVkPyA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYXJibyBpbiAxMTMgQi5DLiwgQ2FlcGlvIGluIDEwNSBCLkMuIFNlZSB0aGUgRGljdGlvbmFyeSBvZiBQcm9wZXIgTmFtZXMuIDwvbm90ZT4gQnV0IHRoZXkgd2VyZSBmYXIgYmVoaW5kIE1hcml1cyBpbiByZXB1dGF0aW9uIGFuZCBleGNlbGxlbmNlLCBhbmQgbGVkIGFuIGFybXkgdGhhdCB3YXMgZmFyIGluZmVyaW9yIHRvIGhpcy4gU3VyZWx5IGl0IGlzIGJldHRlciB0byBkbyBzb21ldGhpbmcsIGV2ZW4gaWYgd2UgcGVyaXNoIGFzIHRoZXkgZGlkLCByYXRoZXIgdGhhbiB0byBzaXQgaGVyZSBhbmQgZW5qb3kgdGhlIHNwZWN0YWNsZSBvZiBvdXIgYWxsaWVzIGJlaW5nIHBsdW5kZXJlZC48L3E+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlNYXJpdXMgd2FzIGRlbGlnaHRlZCB0byBoZWFyIG9mIHN1Y2ggZXhwcmVzc2lvbnMsIGFuZCB0cmllZCB0byBjYWxtIHRoZSBzb2xkaWVycyBkb3duIGJ5IHRlbGxpbmcgdGhlbSB0aGF0IGhlIGRpZCBub3QgZGlzdHJ1c3QgdGhlbSwgYnV0IGluIGNvbnNlcXVlbmNlIG9mIGNlcnRhaW4gb3JhY2xlcyB3YXMgYXdhaXRpbmcgYSBmaXQgdGltZSBhbmQgcGxhY2UgZm9yIGhpcyB2aWN0b3J5LiBBbmQgaW5kZWVkIGhlIHVzZWQgdG8gY2FycnkgYWJvdXQgY2VyZW1vbmlvdXNseSBpbiBhIGxpdHRlciBhIGNlcnRhaW4gU3lyaWFuIHdvbWFuLCBuYW1lZCBNYXJ0aGEsIHdobyB3YXMgc2FpZCB0byBoYXZlIHRoZSBnaWZ0IG9mIHByb3BoZWN5LCBhbmQgaGUgd291bGQgbWFrZSBzYWNyaWZpY2VzIGF0IGhlciBiaWRkaW5nLiBTaGUgaGFkIHByZXZpb3VzbHkgYmVlbiByZWplY3RlZCBieSB0aGUgc2VuYXRlIHdoZW4gc2hlIHdpc2hlZCB0byBhcHBlYXIgYmVmb3JlIHRoZW0gd2l0aCByZWZlcmVuY2UgdG8gdGhlc2UgbWF0dGVycyBhbmQgcHJlZGljdGVkIGZ1dHVyZSBldmVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gc2hlIGdvdCBhdWRpZW5jZSBvZiB0aGUgd29tZW4gYW5kIGdhdmUgdGhlbSBwcm9vZnMgb2YgaGVyIHNraWxsLCBhbmQgcGFydGljdWxhcmx5IHRoZSB3aWZlIG9mIE1hcml1cywgYXQgd2hvc2UgZmVldCBzaGUgc2F0IHdoZW4gc29tZSBnbGFkaWF0b3JzIHdlcmUgZmlnaHRpbmcgYW5kIHN1Y2Nlc3NmdWxseSBmb3JldG9sZCB3aGljaCBvbmUgd2FzIGdvaW5nIHRvIGJlIHZpY3RvcmlvdXMuIEluIGNvbnNlcXVlbmNlIG9mIHRoaXMgc2hlIHdhcyBzZW50IHRvIE1hcml1cyBieSBoaXMgd2lmZSwgYW5kIHdhcyBhZG1pcmVkIGJ5IGhpbS4gQXMgYSBnZW5lcmFsIHRoaW5nIHNoZSB3YXMgY2FycmllZCBhbG9uZyB3aXRoIHRoZSBhcm15IGluIGEgbGl0dGVyLCBidXQgc2hlIGF0dGVuZGVkIHRoZSBzYWNyaWZpY2VzIGNsb3RoZWQgaW4gYSBkb3VibGUgcHVycGxlIHJvYmUgdGhhdCB3YXMgZmFzdGVuZWQgd2l0aCBhIGNsYXNwLCBhbmQgY2FycnlpbmcgYSBzcGVhciB0aGF0IHdhcyB3cmVhdGhlZCB3aXRoIGZpbGxldHMgYW5kIGNoYXBsZXRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGEgcGVyZm9ybWFuY2UgYXMgdGhpcyBjYXVzZWQgbWFueSB0byBkb3VidCB3aGV0aGVyIE1hcml1cywgaW4gZXhoaWJpdGluZyB0aGUgd29tYW4sIHJlYWxseSBiZWxpZXZlZCBpbiBoZXIsIG9yIHdhcyBwcmV0ZW5kaW5nIHRvIGRvIHNvIGFuZCBtZXJlbHkgYWN0ZWQgYSBwYXJ0IHdpdGggaGVyLgoJCQk8L3A+CiAgICAgICAgIDxwPlRoZSBhZmZhaXIgb2YgdGhlIHZ1bHR1cmVzLCBob3dldmVyLCB3aGljaCBBbGV4YW5kZXIgb2YgTXluZHVzIHJlbGF0ZXMsIGlzIGNlcnRhaW5seSB3b25kZXJmdWwuIFR3byB2dWx0dXJlcyB3ZXJlIGFsd2F5cyBzZWVuIGhvdmVyaW5nIGFib3V0IHRoZSBhcm1pZXMgb2YgTWFyaXVzIGJlZm9yZSB0aGVpciB2aWN0b3JpZXMsIGFuZCBhY2NvbXBhbmllZCB0aGVtIG9uIHRoZWlyIGpvdXJuZXlzLCBiZWluZyByZWNvZ25pemVkIGJ5IGJyb256ZSByaW5ncyBvbiB0aGVpciBuZWNrczsgZm9yIHRoZSBzb2xkaWVycyBoYWQgY2F1Z2h0IHRoZW0sIHB1dCB0aGVzZSByaW5ncyBvbiwgYW5kIGxldCB0aGVtIGdvIGFnYWluOyBhbmQgYWZ0ZXIgdGhpcywgb24gcmVjb2duaXppbmcgdGhlIGJpcmRzLCB0aGUgc29sZGllcnMgZ3JlZXRlZCB0aGVtLCBhbmQgdGhleSB3ZXJlIGdsYWQgdG8gc2VlIHRoZW0gd2hlbiB0aGV5IHNldCBvdXQgdXBvbiBhIG1hcmNoLCBmZWVsaW5nIHN1cmUgaW4gc3VjaCBjYXNlcyB0aGF0IHRoZXkgd291bGQgYmUgc3VjY2Vzc2Z1bC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgc2lnbnMgYWxzbyBhcHBlYXJlZCwgbW9zdCBvZiB3aGljaCB3ZXJlIG9mIHRoZSBvcmRpbmFyeSBraW5kOyBidXQgZnJvbSBBbWVyaWEgYW5kIFR1ZGVyLCBjaXRpZXMgb2YgSXRhbHksIGl0IHdhcyByZXBvcnRlZCB0aGF0IGF0IG5pZ2h0IHRoZXJlIGhhZCBiZWVuIHNlZW4gaW4gdGhlIGhlYXZlbnMgZmxhbWluZyBzcGVhcnMsIGFuZCBzaGllbGRzIHdoaWNoIGF0IGZpcnN0IG1vdmVkIGluIGRpZmZlcmVudCBkaXJlY3Rpb25zLCBhbmQgdGhlbiBjbGFzaGVkIHRvZ2V0aGVyLCBhc3N1bWluZyB0aGUgZm9ybWF0aW9ucyBhbmQgbW92ZW1lbnRzIG9mIG1lbiBpbiBiYXR0bGUsIGFuZCBmaW5hbGx5IHNvbWUgb2YgdGhlbSB3b3VsZCBnaXZlIHdheSwgd2hpbGUgb3RoZXJzIHByZXNzZWQgb24gaW4gcHVyc3VpdCwgYW5kIGFsbCBzdHJlYW1lZCBhd2F5IHRvIHRoZSB3ZXN0d2FyZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGFib3V0IHRoaXMgdGltZSBCYXRhY2VzLCB0aGUgcHJpZXN0IG9mIHRoZSBHcmVhdCBNb3RoZXIsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkN5YmVsw6ksIE1vdGhlciBvZiB0aGUgR29kcy4gPC9ub3RlPiBjYW1lIGZyb20gUGVzc2ludXMgYW5ub3VuY2luZyB0aGF0IHRoZSBnb2RkZXNzIGhhZCBkZWNsYXJlZCB0byBoaW0gZnJvbSBoZXIgc2hyaW5lIHRoYXQgdGhlIFJvbWFucyB3ZXJlIHRvIGJlIHZpY3RvcmlvdXMgYW5kIHRyaXVtcGhhbnQgaW4gd2FyLiBUaGUgc2VuYXRlIGdhdmUgY3JlZGVuY2UgdG8gdGhlIHN0b3J5IGFuZCB2b3RlZCB0aGF0IGEgdGVtcGxlIHNob3VsZCBiZSBidWlsdCBmb3IgdGhlIGdvZGRlc3MgaW4gY29tbWVtb3JhdGlvbiBvZiB0aGUgdmljdG9yeTsgYnV0IHdoZW4gQmF0YWNlcyBjYW1lIGJlZm9yZSB0aGUgYXNzZW1ibHkgYW5kIGRlc2lyZWQgdG8gdGVsbCB0aGUgc3RvcnksIEF1bHVzIFBvbXBlaXVzLCBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgcHJldmVudGVkIGhpbSwgY2FsbGluZyBoaW0gYW4gaW1wb3N0b3IsIGFuZCBkcml2aW5nIGhpbSB3aXRoIGluc3VsdHMgZnJvbSB0aGUgcm9zdHJhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbG8sIHRoaXMgZGlkIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIHRvIGdhaW4gY3JlZGVuY2UgZm9yIHRoZSBtYW4ncyBzdG9yeS4gRm9yIGhhcmRseSBoYWQgQXVsdXMgZ29uZSBiYWNrIHRvIGhpcyBob3VzZSBhZnRlciB0aGUgYXNzZW1ibHkgd2FzIGRpc3NvbHZlZCwgd2hlbiBoZSBicm9rZSBvdXQgd2l0aCBzbyB2aW9sZW50IGEgZmV2ZXIgdGhhdCBoZSBkaWVkIHdpdGhpbiBhIHdlZWssIGFuZCBldmVyeWJvZHkga25ldyBhbmQgdGFsa2VkIGFib3V0IGl0LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlCdXQgdGhlIFRldXRvbmVzLCBzaW5jZSBNYXJpdXMga2VwdCBxdWlldCwgYXR0ZW1wdGVkIHRvIHRha2UgaGlzIGNhbXAgYnkgc3Rvcm07IG1hbnkgbWlzc2lsZXMsIGhvd2V2ZXIsIHdlcmUgaHVybGVkIGFnYWluc3QgdGhlbSBmcm9tIHRoZSBmb3J0aWZpY2F0aW9ucywgYW5kIHRoZXkgbG9zdCBzb21lIG9mIHRoZWlyIG1lbi4gVGhleSB0aGVyZWZvcmUgZGVjaWRlZCB0byBtYXJjaCBmb3J3YXJkLCBleHBlY3RpbmcgdG8gY3Jvc3MgdGhlIEFscHMgd2l0aG91dCBtb2xlc3RhdGlvbi4gU28gdGhleSBwYWNrZWQgdXAgdGhlaXIgYmFnZ2FnZSBhbmQgYmVnYW4gdG8gbWFyY2ggcGFzdCB0aGUgY2FtcCBvZiB0aGUgUm9tYW5zLiBUaGVuLCBpbmRlZWQsIHRoZSBpbW1lbnNpdHkgb2YgdGhlaXIgbnVtYmVycyB3YXMgbWFkZSBzcGVjaWFsbHkgZXZpZGVudCBieSB0aGUgbGVuZ3RoIG9mIHRoZWlyIGxpbmUgYW5kIHRoZSB0aW1lIHJlcXVpcmVkIGZvciB0aGVpciBwYXNzYWdlOyBmb3IgaXQgaXMgc2FpZCB0aGV5IHdlcmUgc2l4IGRheXMgaW4gcGFzc2luZyB0aGUgZm9ydGlmaWNhdGlvbnMgb2YgTWFyaXVzLCBhbHRob3VnaCB0aGV5IG1vdmVkIGNvbnRpbnVvdXNseS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZXkgbWFyY2hlZCBjbG9zZSB0byB0aGUgY2FtcCwgaW5xdWlyaW5nIHdpdGggbGF1Z2h0ZXIgd2hldGhlciB0aGUgUm9tYW5zIGhhZCBhbnkgbWVzc2FnZXMgZm9yIHRoZWlyIHdpdmVzOyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciw8L3E+IHNhaWQgdGhleSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj53ZSBzaGFsbCBzb29uIGJlIHdpdGggdGhlbS48L3E+IEJ1dCB3aGVuIHRoZSBCYXJiYXJpYW5zIGhhZCBwYXNzZWQgYnkgYW5kIHdlcmUgZ29pbmcgb24gdGhlaXIgd2F5LCBNYXJpdXMgYWxzbyBicm9rZSBjYW1wIGFuZCBmb2xsb3dlZCBjbG9zZSB1cG9uIHRoZW0sIGFsd2F5cyBoYWx0aW5nIG5lYXIgYnkgYW5kIGF0IHRoZWlyIHZlcnkgc2lkZSwgYnV0IHN0cm9uZ2x5IGZvcnRpZnlpbmcgaGlzIGNhbXBzIGFuZCBrZWVwaW5nIHN0cm9uZyBwb3NpdGlvbnMgaW4gaGlzIGZyb250LCBzbyB0aGF0IGhlIGNvdWxkIHBhc3MgdGhlIG5pZ2h0IGluIHNhZmV0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyB0aGUgdHdvIGFybWllcyB3ZW50IG9uIHVudGlsIHRoZXkgY2FtZSB0byB0aGUgcGxhY2UgY2FsbGVkIEFxdWFlIFNleHRpYWUsIGZyb20gd2hpY2ggdGhleSBoYWQgdG8gbWFyY2ggb25seSBhIHNob3J0IGRpc3RhbmNlIGFuZCB0aGV5IHdvdWxkIGJlIGluIHRoZSBBbHBzLiBGb3IgdGhpcyByZWFzb24sIGluZGVlZCwgTWFyaXVzIG1hZGUgcHJlcGFyYXRpb25zIHRvIGdpdmUgYmF0dGxlIGhlcmUsIGFuZCBoZSBvY2N1cGllZCBmb3IgaGlzIGNhbXAgYSBwb3NpdGlvbiB0aGF0IHdhcyBzdHJvbmcsIGJ1dCBwb29ybHkgc3VwcGxpZWQgd2l0aCB3YXRlciwgd2lzaGluZywgYXMgdGhleSBzYXksIGJ5IHRoaXMgY2lyY3Vtc3RhbmNlIGFsc28gdG8gaW5jaXRlIGhpcyBzb2xkaWVycyB0byBmaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIHdoZW4gbWFueSBvZiB0aGVtIHdlcmUgZGlzc2F0aXNmaWVkIGFuZCBzYWlkIHRoZXkgd291bGQgYmUgdGhpcnN0eSB0aGVyZSwgaGUgcG9pbnRlZCB0byBhIHJpdmVyIHRoYXQgcmFuIG5lYXIgdGhlIGJhcmJhcmlhbiBmb3J0aWZpY2F0aW9ucywgYW5kIHRvbGQgdGhlbSB0aGV5IGNvdWxkIGdldCB3YXRlciB0aGVyZSwgYnV0IHRoZSBwcmljZSBvZiBpdCB3YXMgYmxvb2QuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5LCB0aGVuLDwvcT4gdGhleSBzYWlkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvc3QgdGhvdSBub3QgbGVhZCB1cyBhdCBvbmNlIGFnYWluc3QgdGhlIGVuZW15LCB3aGlsZSBvdXIgYmxvb2QgaXMgc3RpbGwgbW9pc3QgPzwvcT4gVG8gd2hpY2ggTWFyaXVzIGNhbG1seSByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIG11c3QgZmlyc3QgbWFrZSBvdXIgY2FtcCBzdHJvbmcuPC9xPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJSGlzIHNvbGRpZXJzLCBhY2NvcmRpbmdseSwgdGhvdWdoIHJlbHVjdGFudCwgb2JleWVkOyBidXQgdGhlIHRocm9uZyBvZiBjYW1wLXNlcnZhbnRzLCB3aG8gaGFkIG5vIHdhdGVyIGVpdGhlciBmb3IgdGhlbXNlbHZlcyBvciB0aGVpciBiZWFzdHMsIHdlbnQgZG93biBpbiBhIGJvZHkgdG8gdGhlIHJpdmVyLCBzb21lIHRha2luZyBoYXRjaGV0cywgc29tZSBheGVzLCBhbmQgc29tZSBhbHNvIHN3b3JkcyBhbmQgbGFuY2VzIGFsb25nIHdpdGggdGhlaXIgd2F0ZXItamFycywgZGV0ZXJtaW5lZCB0byBnZXQgd2F0ZXIgZXZlbiBpZiB0aGV5IGhhZCB0byBmaWdodCBmb3IgaXQuIFdpdGggdGhlc2Ugb25seSBhIGZldyBvZiB0aGUgZW5lbXkgYXQgZmlyc3QgZW5nYWdlZCwgc2luY2UgdGhlIG1haW4gYm9keSB3ZXJlIHRha2luZyB0aGVpciBtZWFsIGFmdGVyIGJhdGhpbmcsIGFuZCBzb21lIHdlcmUgc3RpbGwgYmF0aGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHN0cmVhbXMgb2Ygd2FybSB3YXRlciBidXJzdCBmcm9tIHRoZSBncm91bmQgaW4gdGhpcyBwbGFjZSwgYW5kIGF0IHRoZXNlIHRoZSBSb21hbnMgc3VycHJpc2VkIGEgbnVtYmVyIG9mIHRoZSBCYXJiYXJpYW5zLCB3aG8gd2VyZSBlbmpveWluZyB0aGVtc2VsdmVzIGFuZCBtYWtpbmcgbWVycnkgaW4gdGhpcyB3b25kZXJmdWxseSBwbGVhc2FudCBwbGFjZS4gVGhlaXIgY3JpZXMgYnJvdWdodCBtb3JlIG9mIHRoZSBCYXJiYXJpYW5zIHRvIHRoZSBzcG90LCBhbmQgTWFyaXVzIGhhZCBkaWZmaWN1bHR5IGluIGxvbmdlciByZXN0cmFpbmluZyBoaXMgc29sZGllcnMsIHNpbmNlIHRoZXkgaGFkIGZlYXJzIG5vdyBmb3IgdGhlaXIgc2VydmFudHMuIEJlc2lkZXMsIHRoZSBtb3N0IHdhcmxpa2UgZGl2aXNpb24gb2YgdGhlIGVuZW15LCBieSB3aG9tIGF0IGFuIGVhcmxpZXIgdGltZSB0aGUgUm9tYW5zIHVuZGVyIE1hbmxpdXMgYW5kIENhZXBpbyBoYWQgYmVlbiBkZWZlYXRlZCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTYuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuIDUgPC9iaWJsPi4gPC9ub3RlPiAodGhleSB3ZXJlIGNhbGxlZCBBbWJyb25lcyBhbmQgb2YgdGhlbXNlbHZlcyBudW1iZXJlZCBtb3JlIHRoYW4gdGhpcnR5IHRob3VzYW5kKSwgaGFkIHNwcnVuZyB1cCBmcm9tIHRoZWlyIG1lYWwgYW5kIHdlcmUgcnVubmluZyB0byBnZXQgdGhlaXIgYXJtcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhvdWdoIHRoZWlyIGJvZGllcyB3ZXJlIHN1cmZlaXRlZCBhbmQgd2VpZ2hlZCBkb3duIHdpdGggZm9vZCBhbmQgdGhlaXIgc3Bpcml0cyBleGNpdGVkIGFuZCBkaXNvcmRlcmVkIHdpdGggc3Ryb25nIHdpbmUsIHRoZXkgZGlkIG5vdCBydXNoIG9uIGluIGEgZGlzb3JkZXJseSBvciBmcmFudGljIGNvdXJzZSwgbm9yIHJhaXNlIGFuIGluYXJ0aWN1bGF0ZSBiYXR0bGUtY3J5LCBidXQgcmh5dGhtaWNhbGx5IGNsYXNoaW5nIHRoZWlyIGFybXMgYW5kIGxlYXBpbmcgdG8gdGhlIHNvdW5kIHRoZXkgd291bGQgZnJlcXVlbnRseSBzaG91dCBvdXQgYWxsIHRvZ2V0aGVyIHRoZWlyIHRyaWJhbCBuYW1lIEFtYnJvbmVzLCBlaXRoZXIgdG8gZW5jb3VyYWdlIG9uZSBhbm90aGVyLCBvciB0byB0ZXJyaWZ5IHRoZWlyIGVuZW1pZXMgaW4gYWR2YW5jZSBieSB0aGUgZGVjbGFyYXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBvZiB0aGUgSXRhbGlhbnMgdG8gZ28gZG93biBhZ2FpbnN0IHRoZW0gd2VyZSB0aGUgTGlndXJpYW5zLCBhbmQgd2hlbiB0aGV5IGhlYXJkIGFuZCB1bmRlcnN0b29kIHdoYXQgdGhlIEJhcmJhcmlhbnMgd2VyZSBzaG91dGluZywgdGhleSB0aGVtc2VsdmVzIHNob3V0ZWQgYmFjayB0aGUgd29yZCwgY2xhaW1pbmcgaXQgYXMgdGhlaXIgb3duIGFuY2VzdHJhbCBhcHBlbGxhdGlvbjsgZm9yIHRoZSBMaWd1cmlhbnMgY2FsbCB0aGVtc2VsdmVzIEFtYnJvbmVzIGJ5IGRlc2NlbnQuIE9mdGVuLCB0aGVuLCBkaWQgdGhlIHNob3V0IGVjaG8gYW5kIHJlZWNobyBmcm9tIGVpdGhlciBzaWRlIGJlZm9yZSB0aGV5IGNhbWUgdG8gY2xvc2UgcXVhcnRlcnM7IGFuZCBzaW5jZSB0aGUgaG9zdHMgYmFjayBvZiBlYWNoIHBhcnR5IHRvb2sgdXAgdGhlIGNyeSBieSB0dXJucyBhbmQgc3Ryb3ZlIGVhY2ggdG8gb3V0ZG8gdGhlIG90aGVyIGZpcnN0IGluIHRoZSBtYWduaXR1ZGUgb2YgdGhlaXIgc2hvdXQsIHRoZWlyIGNyaWVzIHJvdXNlZCBhbmQgZmlyZWQgdGhlIHNwaXJpdCBvZiB0aGUgY29tYmF0YW50cy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIHRoZSBBbWJyb25lcyBiZWNhbWUgc2VwYXJhdGVkIGJ5IHRoZSBzdHJlYW07IGZvciB0aGV5IGRpZCBub3QgYWxsIHN1Y2NlZWQgaW4gZ2V0dGluZyBhY3Jvc3MgYW5kIGZvcm1pbmcgYW4gYXJyYXksIGJ1dCB1cG9uIHRoZSBmb3JlbW9zdCBvZiB0aGVtIHRoZSBMaWd1cmlhbnMgYXQgb25jZSBmZWxsIHdpdGggYSBydXNoLCBhbmQgdGhlIGZpZ2h0aW5nIHdhcyBoYW5kLXRvLWhhbmQuIFRoZW4gdGhlIFJvbWFucyBjYW1lIHRvIHRoZSBhaWQgb2YgdGhlIExpZ3VyaWFucywgYW5kIGNoYXJnaW5nIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyB1cG9uIHRoZSBCYXJiYXJpYW5zIG92ZXJ3aGVsbWVkIGFuZCB0dXJuZWQgdGhlbSBiYWNrLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Nb3N0IG9mIHRoZSBBbWJyb25lcyB3ZXJlIGN1dCBkb3duIHRoZXJlIGluIHRoZSBzdHJlYW0gd2hlcmUgdGhleSB3ZXJlIGFsbCBjcm93ZGVkIHRvZ2V0aGVyLCBhbmQgdGhlIHJpdmVyIHdhcyBmaWxsZWQgd2l0aCB0aGVpciBibG9vZCBhbmQgdGhlaXIgZGVhZCBib2RpZXM7IHRoZSByZXN0LCBhZnRlciB0aGUgUm9tYW5zIGhhZCBjcm9zc2VkLCBkaWQgbm90IGRhcmUgdG8gZmFjZSBhYm91dCwgYW5kIHRoZSBSb21hbnMga2VwdCBzbGF5aW5nIHRoZW0gdW50aWwgdGhleSBjYW1lIGluIHRoZWlyIGZsaWdodCB0byB0aGVpciBjYW1wIGFuZCB3YWdnb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIHRoZSB3b21lbiBtZXQgdGhlbSwgc3dvcmRzIGFuZCBheGVzIGluIHRoZWlyIGhhbmRzLCBhbmQgd2l0aCBoaWRlb3VzIHNocmlla3Mgb2YgcmFnZSB0cmllZCB0byBkcml2ZSBiYWNrIGZ1Z2l0aXZlcyBhbmQgcHVyc3VlcnMgYWxpa2UsIHRoZSBmdWdpdGl2ZXMgYXMgdHJhaXRvcnMsIGFuZCB0aGUgcHVyc3VlcnMgYXMgZm9lczsgdGhleSBtaXhlZCB0aGVtc2VsdmVzIHVwIHdpdGggdGhlIGNvbWJhdGFudHMsIHdpdGggYmFyZSBoYW5kcyB0b3JlIGF3YXkgdGhlIHNoaWVsZHMgb2YgdGhlIFJvbWFucyBvciBncmFzcGVkIHRoZWlyIHN3b3JkcywgYW5kIGVuZHVyZWQgd291bmRzIGFuZCBtdXRpbGF0aW9ucywgdGhlaXIgZmllcmNlIHNwaXJpdHMgdW52YW5xdWlzaGVkIHRvIHRoZSBlbmQuIFNvLCB0aGVuLCBhcyB3ZSBhcmUgdG9sZCwgdGhlIGJhdHRsZSBhdCB0aGUgcml2ZXIgd2FzIGJyb3VnaHQgb24gYnkgYWNjaWRlbnQgcmF0aGVyIHRoYW4gYnkgdGhlIGludGVudGlvbiBvZiB0aGUgY29tbWFuZGVyLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgZGVzdHJveWluZyBtYW55IG9mIHRoZSBBbWJyb25lcyB0aGUgUm9tYW5zIHdpdGhkcmV3IGFuZCBuaWdodCBjYW1lIG9uOyBidXQgaW4gc3BpdGUgb2Ygc28gZ3JlYXQgYSBzdWNjZXNzIHRoZSBhcm15IGRpZCBub3QgaW5kdWxnZSBpbiBwYWVhbnMgb2YgdmljdG9yeSwgb3IgZHJpbmtpbmcgaW4gdGhlIHRlbnRzLCBvciBmcmllbmRseSBjb252ZXJzZSBvdmVyIHN1cHBlcnMsIG9yIHRoYXQgc3dlZXRlc3Qgb2YgYWxsIGRlbGlnaHRzIGZvciBtZW4gd2hvIGhhdmUgZm91Z2h0IGFuZCB3b24gYSBiYXR0bGUsIGdlbnRsZSBzbGVlcCwgYnV0IHRoYXQgbmlnaHQgbW9yZSB0aGFuIGFueSBvdGhlciB3YXMgc3BlbnQgaW4gZmVhcnMgYW5kIGNvbW1vdGlvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVpciBjYW1wIHdhcyBzdGlsbCB3aXRob3V0IHBhbGlzYWRlIG9yIHdhbGwsIGFuZCB0aGVyZSB3ZXJlIHN0aWxsIGxlZnQgbWFueSBteXJpYWRzIG9mIHRoZSBCYXJiYXJpYW5zIHdobyBoYWQgbWV0IHdpdGggbm8gZGVmZWF0LiBUaGVzZSBoYWQgYmVlbiBqb2luZWQgYnkgYWxsIHRoZSBBbWJyb25lcyB3aG8gc3Vydml2ZWQgdGhlIGJhdHRsZSwgYW5kIHRoZXJlIHdhcyBsYW1lbnRhdGlvbiBhbW9uZyB0aGVtIGFsbCBuaWdodCBsb25nLCBub3QgbGlrZSB0aGUgd2FpbGluZ3MgYW5kIGdyb2FucyBvZiBtZW4sIGJ1dCBob3dsaW5ncyBhbmQgYmVsbG93aW5ncyB3aXRoIGEgc3RyYWluIG9mIHRoZSB3aWxkIGJlYXN0IGluIHRoZW0sIG1pbmdsZWQgd2l0aCB0aHJlYXRzIGFuZCBjcmllcyBvZiBncmllZiwgd2VudCB1cCBmcm9tIHRoaXMgdmFzdCBtdWx0aXR1ZGUgYW5kIGVjaG9lZCBhbW9uZyB0aGUgc3Vycm91bmRpbmcgaGlsbHMgYW5kIG92ZXIgdGhlIHJpdmVyIHZhbGxleS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdob2xlIHBsYWluIHdhcyBmaWxsZWQgd2l0aCBhbiBhd2Z1bCBkaW4sIHRoZSBSb21hbnMgd2l0aCBmZWFyLCBhbmQgZXZlbiBNYXJpdXMgaGltc2VsZiB3aXRoIGNvbnN0ZXJuYXRpb24gYXMgaGUgYXdhaXRlZCBzb21lIGRpc29yZGVybHkgYW5kIGNvbmZ1c2VkIG5pZ2h0LWJhdHRsZS4gSG93ZXZlciwgdGhlIEJhcmJhcmlhbnMgbWFkZSBubyBhdHRhY2sgZWl0aGVyIGR1cmluZyB0aGF0IG5pZ2h0IG9yIHRoZSBmb2xsb3dpbmcgZGF5LCBidXQgc3BlbnQgdGhlIHRpbWUgaW4gbWFyc2hhbGxpbmcgdGhlaXIgZm9yY2VzIGFuZCBtYWtpbmcgcHJlcGFyYXRpb25zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBzaW5jZSB0aGUgcG9zaXRpb24gb2YgdGhlIEJhcmJhcmlhbnMgd2FzIGNvbW1hbmRlZCBieSBzbG9waW5nIGdsZW5zIGFuZCByYXZpbmVzIHRoYXQgd2VyZSBzaGFkZWQgYnkgdHJlZXMsIE1hcml1cyBzZW50IENsYXVkaXVzIE1hcmNlbGx1cyB0aGl0aGVyIHdpdGggdGhyZWUgdGhvdXNhbmQgbWVuLWF0LWFybXMsIHVuZGVyIG9yZGVycyB0byBsaWUgY29uY2VhbGVkIGluIGFtYnVzaCB1bnRpbCB0aGUgYmF0dGxlIHdhcyBvbiwgYW5kIHRoZW4gdG8gc2hvdyB0aGVtc2VsdmVzIGluIHRoZSBlbmVteSdzIHJlYXIuIFRoZSByZXN0IG9mIGhpcyBzb2xkaWVycywgd2hvIGhhZCB0YWtlbiBzdXBwZXIgaW4gZ29vZCBzZWFzb24gYW5kIHRoZW4gZ290IGEgbmlnaHQncyBzbGVlcCwgaGUgbGVkIG91dCBhdCBkYXktYnJlYWsgYW5kIGRyZXcgdXAgaW4gZnJvbnQgb2YgdGhlIGNhbXAsIGFuZCBzZW50IG91dCBoaXMgY2F2YWxyeSBpbnRvIHRoZSBwbGFpbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFRldXRvbmVzLCBzZWVpbmcgdGhpcywgY291bGQgbm90IHdhaXQgZm9yIHRoZSBSb21hbnMgdG8gY29tZSBkb3duIGFuZCBmaWdodCB3aXRoIHRoZW0gb24gZXF1YWwgdGVybXMsIGJ1dCBxdWlja2x5IGFuZCB3cmF0aGZ1bGx5IGFybWVkIHRoZW1zZWx2ZXMgYW5kIGNoYXJnZWQgdXAgdGhlIGhpbGwuIEJ1dCBNYXJpdXMsIHNlbmRpbmcgaGlzIG9mZmljZXJzIHRvIGFsbCBwYXJ0cyBvZiB0aGUgbGluZSwgZXhob3J0ZWQgdGhlIHNvbGRpZXJzIHRvIHN0YW5kIGZpcm1seSBpbiB0aGVpciBsaW5lcywgYW5kIHdoZW4gdGhlIGVuZW15IGhhZCBnb3Qgd2l0aGluIHJlYWNoIHRvIGh1cmwgdGhlaXIgamF2ZWxpbnMsIHRoZW4gdGFrZSB0byB0aGVpciBzd29yZHMgYW5kIGNyb3dkIHRoZSBCYXJiYXJpYW5zIGJhY2sgd2l0aCB0aGVpciBzaGllbGRzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5mb3Igc2luY2UgdGhlIGVuZW15IHdlcmUgb24gcHJlY2FyaW91cyBncm91bmQgdGhlaXIgYmxvd3Mgd291bGQgaGF2ZSBubyBmb3JjZSBhbmQgdGhlIGxvY2tpbmcgb2YgdGhlaXIgc2hpZWxkcyBubyBzdHJlbmd0aCwgYnV0IHRoZSB1bmV2ZW5uZXNzIG9mIHRoZSBncm91bmQgd291bGQga2VlcCB0aGVtIHR1cm5pbmcgYW5kIHRvc3NpbmcgYWJvdXQuIFRoaXMgd2FzIHRoZSBhZHZpY2UgaGUgZ2F2ZSBoaXMgbWVuLCBhbmQgdGhleSBzYXcgdGhhdCBoZSB3YXMgZmlyc3QgdG8gYWN0IGFjY29yZGluZ2x5OyBmb3IgaGUgd2FzIGluIGJldHRlciB0cmFpbmluZyB0aGFuIGFueSBvZiB0aGVtLCBhbmQgaW4gZGFyaW5nIGZhciBzdXJwYXNzZWQgdGhlbSBhbGwuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIFJvbWFucyBhd2FpdGVkIHRoZSBlbmVteSdzIG9uc2V0LCB0aGVuIGNsb3NlZCB3aXRoIHRoZW0gYW5kIGNoZWNrZWQgdGhlaXIgdXB3YXJkIHJ1c2gsIGFuZCBhdCBsYXN0LCBjcm93ZGluZyB0aGVtIGJhY2sgbGl0dGxlIGJ5IGxpdHRsZSwgZm9yY2VkIHRoZW0gaW50byB0aGUgcGxhaW4uIEhlcmUsIHdoaWxlIHRoZSBCYXJiYXJpYW5zIGluIGZyb250IHdlcmUgYXQgbGFzdCBmb3JtaW5nIGluIGxpbmUgb24gbGV2ZWwgZ3JvdW5kLCB0aGVyZSB3YXMgc2hvdXRpbmcgYW5kIGNvbW1vdGlvbiBpbiB0aGVpciByZWFyLiBGb3IgTWFyY2VsbHVzIGhhZCB3YXRjaGVkIGhpcyBvcHBvcnR1bml0eSwgYW5kIHdoZW4gdGhlIGNyaWVzIG9mIGJhdHRsZSB3ZXJlIGJvcm5lIHVwIG92ZXIgdGhlIGhpbGxzIGhlIHB1dCBoaXMgbWVuIHVwb24gdGhlIHJ1biBhbmQgZmVsbCB3aXRoIGxvdWQgc2hvdXRzIHVwb24gdGhlIGVuZW15J3MgcmVhciwgd2hlcmUgaGUgY3V0IGRvd24gdGhlIGhpbmRtb3N0IG9mIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIGluIHRoZSByZWFyIGZvcmNlZCBhbG9uZyB0aG9zZSB3aG8gd2VyZSBpbiBmcm9udCBvZiB0aGVtLCBhbmQgcXVpY2tseSBwbHVuZ2VkIHRoZSB3aG9sZSBhcm15IGludG8gY29uZnVzaW9uLCBhbmQgdW5kZXIgdGhpcyBkb3VibGUgYXR0YWNrIHRoZXkgY291bGQgcmlvdCBob2xkIG91dCBsb25nLCBidXQgYnJva2UgcmFua3MgYW5kIGZsZWQuIFRoZSBSb21hbnMgcHVyc3VlZCB0aGVtIGFuZCBlaXRoZXIgc2xldyBvciB0b29rIGFsaXZlIG92ZXIgYSBodW5kcmVkIHRob3VzYW5kIG9mIHRoZW0sIGJlc2lkZXMgbWFraW5nIHRoZW1zZWx2ZXMgbWFzdGVycyBvZiB0aGVpciB0ZW50cywgd2FnZ29ucywgYW5kIHByb3BlcnR5LCBhbGwgb2Ygd2hpY2gsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB3aGF0IHdhcyBwaWxmZXJlZCwgd2FzIGdpdmVuIHRvIE1hcml1cyBieSB2b3RlIG9mIHRoZSBzb2xkaWVycy4gQW5kIHRob3VnaCB0aGUgZ2lmdCB0aGF0IGhlIHJlY2VpdmVkIHdhcyBzbyBzcGxlbmRpZCwgaXQgd2FzIHRob3VnaHQgdG8gYmUgd2hvbGx5IHVud29ydGh5IG9mIGhpcyBzZXJ2aWNlcyBpbiB0aGUgY2FtcGFpZ24sIHdoZXJlIHRoZSBkYW5nZXIgdGhhdCB0aHJlYXRlbmVkIGhhZCBiZWVuIHNvIGdyZWF0LgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgYXJlIHNvbWUgd3JpdGVycywgaG93ZXZlciwgd2hvIGdpdmUgYSBkaWZmZXJlbnQgYWNjb3VudCBvZiB0aGUgZGl2aXNpb24gb2YgdGhlIHNwb2lscywgYW5kIGFsc28gb2YgdGhlIG51bWJlciBvZiB0aGUgc2xhaW4uIE5ldmVydGhlbGVzcywgaXQgaXMgc2FpZCB0aGF0IHRoZSBwZW9wbGUgb2YgTWFzc2FsaWEgZmVuY2VkIHRoZWlyIHZpbmV5YXJkcyByb3VuZCB3aXRoIHRoZSBib25lcyBvZiB0aGUgZmFsbGVuLCBhbmQgdGhhdCB0aGUgc29pbCwgYWZ0ZXIgdGhlIGJvZGllcyBoYWQgd2FzdGVkIGF3YXkgaW4gaXQgYW5kIHRoZSByYWlucyBoYWQgZmFsbGVuIGFsbCB3aW50ZXIgdXBvbiBpdCwgZ3JldyBzbyByaWNoIGFuZCBiZWNhbWUgc28gZnVsbCB0byBpdHMgZGVwdGhzIG9mIHRoZSBwdXRyZWZpZWQgbWF0dGVyIHRoYXQgc2FuayBpbnRvIGl0LCB0aGF0IGl0IHByb2R1Y2VkIGFuIGV4Y2VlZGluZyBncmVhdCBoYXJ2ZXN0IGluIGFmdGVyIHllYXJzLCBhbmQgY29uZmlybWVkIHRoZSBzYXlpbmcgb2YgQXJjaGlsb2NodXMgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QmVyZ2ssIDx0aXRsZT5Qb2V0LiBMeXIuIEdyYWVjaSA8L3RpdGxlPiwgaWkuIDQgcHAuIDQyOCBmLiA8L25vdGU+IHRoYXQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5maWVsZHMgYXJlIGZhdHRlbmVkPC9xPiBieSBzdWNoIGEgcHJvY2Vzcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGl0IGlzIHNhaWQgdGhhdCBleHRyYW9yZGluYXJ5IHJhaW5zIGdlbmVyYWxseSBkYXNoIGRvd24gYWZ0ZXIgZ3JlYXQgYmF0dGxlcywgd2hldGhlciBpdCBpcyB0aGF0IHNvbWUgZGl2aW5lIHBvd2VyIGRyZW5jaGVzIGFuZCBoYWxsb3dzIHRoZSBncm91bmQgd2l0aCBwdXJpZnlpbmcgd2F0ZXJzIGZyb20gSGVhdmVuLCBvciB0aGF0IHRoZSBibG9vZCBhbmQgcHV0cmVmeWluZyBtYXR0ZXIgc2VuZCB1cCBhIG1vaXN0IGFuZCBoZWF2eSB2YXBvdXIgd2hpY2ggY29uZGVuc2VzIHRoZSBhaXIsIHRoaXMgYmVpbmcgZWFzaWx5IG1vdmVkIGFuZCByZWFkaWx5IGNoYW5nZWQgdG8gdGhlIGhpZ2hlc3QgZGVncmVlIGJ5IHRoZSBzbGlnaHRlc3QgY2F1c2UuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlLCBNYXJpdXMgY29sbGVjdGVkIHN1Y2ggb2YgdGhlIGFybXMgYW5kIHNwb2lscyBvZiB0aGUgQmFyYmFyaWFucyBhcyB3ZXJlIGhhbmRzb21lLCBlbnRpcmUsIGFuZCBmaXR0ZWQgdG8gbWFrZSBhIHNob3cgaW4gaGlzIHRyaXVtcGhhbCBwcm9jZXNzaW9uOyBhbGwgdGhlIHJlc3QgaGUgaGVhcGVkIHVwIG9uIGEgaHVnZSBweXJlIGFuZCBzZXQgb24gZm9vdCBhIG1hZ25pZmljZW50IHNhY3JpZmljZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNvbGRpZXJzIGhhZCB0YWtlbiB0aGVpciBzdGFuZCBhYm91dCB0aGUgcHlyZSBpbiBhcm1zLCB3aXRoIGNoYXBsZXRzIG9uIHRoZWlyIGhlYWRzLCBhbmQgTWFyaXVzIGhpbXNlbGYsIGhhdmluZyBwdXQgb24gaGlzIHB1cnBsZS1ib3JkZXJlZCByb2JlIGFuZCBnaXJ0IGl0IGFib3V0IGhpbSwgYXMgdGhlIGN1c3RvbSB3YXMsIGhhZCB0YWtlbiBhIGxpZ2h0ZWQgdG9yY2gsIGhlbGQgaXQgdXAgdG93YXJkcyBoZWF2ZW4gd2l0aCBib3RoIGhhbmRzLCBhbmQgd2FzIGp1c3QgYWJvdXQgdG8gc2V0IGZpcmUgdG8gdGhlIHB5cmUsIHdoZW4gc29tZSBmcmllbmRzIHdlcmUgc2VlbiByaWRpbmcgc3dpZnRseSB0b3dhcmRzIGhpbSwgYW5kIHRoZXJlIHdhcyBkZWVwIHNpbGVuY2UgYW5kIGV4cGVjdGFuY3kgb24gdGhlIHBhcnQgb2YgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgaG9yc2VtZW4gd2VyZSBuZWFyLCB0aGV5IGxlYXBlZCB0byB0aGUgZ3JvdW5kIGFuZCBncmVldGVkIE1hcml1cywgYnJpbmdpbmcgaGltIHRoZSBnbGFkIG5ld3MgdGhhdCBoZSBoYWQgYmVlbiBlbGVjdGVkIGNvbnN1bCBmb3IgdGhlIGZpZnRoIHRpbWUsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciAxMDEgQi5DLiA8L25vdGU+IGFuZCBnaXZpbmcgaGltIGxldHRlcnMgdG8gdGhhdCBlZmZlY3QuIFRoaXMgZ3JlYXQgY2F1c2UgZm9yIHJlam9pY2luZyBoYXZpbmcgYmVlbiBhZGRlZCB0byB0aGUgY2VsZWJyYXRpb24gb2YgdGhlaXIgdmljdG9yeSwgdGhlIHNvbGRpZXJzLCB0cmFuc3BvcnRlZCB3aXRoIGRlbGlnaHQsIHNlbnQgZm9ydGggYSB1bml2ZXJzYWwgc2hvdXQsIGFjY29tcGFuaWVkIGJ5IHRoZSBjbGFzaCBhbmQgY2xhdHRlciBvZiB0aGVpciBhcm1zLCBhbmQgYWZ0ZXIgaGlzIG9mZmljZXJzIGhhZCBjcm93bmVkIE1hcml1cyBhZnJlc2ggd2l0aCB3cmVhdGhzIG9mIGJheSwgaGUgc2V0IGZpcmUgdG8gdGhlIHB5cmUgYW5kIGNvbXBsZXRlZCB0aGUgc2FjcmlmaWNlLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhhdCBwb3dlciB3aGljaCBwZXJtaXRzIG5vIGdyZWF0IHN1Y2Nlc3NlcyB0byBicmluZyBhIHB1cmUgYW5kIHVubWl4ZWQgZW5qb3ltZW50LCBidXQgZGl2ZXJzaWZpZXMgaHVtYW4gbGlmZSB3aXRoIGEgYmxlbmRpbmcgb2YgZXZpbCBhbmQgb2YgZ29vZC1iZSBpdCBGb3J0dW5lLCBvciBOZW1lc2lzLCBvciBJbmV2aXRhYmxlIE5lY2Vzc2l0eSwgd2l0aGluIGEgZmV3IGRheXMgYnJvdWdodCB0byBNYXJpdXMgdGlkaW5ncyBvZiBoaXMgY29sbGVhZ3VlIENhdHVsdXMsIHdoaWNoLCBsaWtlIGEgY2xvdWQgaW4gYSBjYWxtIGFuZCBzZXJlbmUgc2t5LCBpbnZvbHZlZCBSb21lIGluIGFub3RoZXIgdGVtcGVzdCBvZiBmZWFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQ2F0dWx1cywgd2hvIHdhcyBmYWNpbmcgdGhlIENpbWJyaSwgZ2F2ZSB1cCB0cnlpbmcgdG8gZ3VhcmQgdGhlIHBhc3NlcyBvZiB0aGUgQWxwcywgbGVzdCBoZSBzaG91bGQgYmUgd2Vha2VuZWQgYnkgdGhlIG5lY2Vzc2l0eSBvZiBkaXZpZGluZyBoaXMgZm9yY2VzIGludG8gbWFueSBwYXJ0cywgYW5kIGF0IG9uY2UgZGVzY2VuZGVkIGludG8gdGhlIHBsYWlucyBvZiBJdGFseS4gSGVyZSBoZSBwdXQgdGhlIHJpdmVyIEF0aXNvIGJldHdlZW4gaGltc2VsZiBhbmQgdGhlIGVuZW15LCBidWlsdCBzdHJvbmcgZm9ydGlmaWNhdGlvbnMgb24gYm90aCBiYW5rcyBvZiBpdCB0byBwcmV2ZW50IHRoZWlyIGNyb3NzaW5nLCBhbmQgdGhyZXcgYSBicmlkZ2UgYWNyb3NzIHRoZSBzdHJlYW0sIHRoYXQgaGUgbWlnaHQgYmUgYWJsZSB0byBnbyB0byB0aGUgaGVscCBvZiB0aGUgcGVvcGxlIG9uIHRoZSBvdGhlciBzaWRlIGluIGNhc2UgdGhlIEJhcmJhcmlhbnMgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCB0aGUgcGFzc2VzIGFuZCBhdHRhY2tlZCB0aGUgZm9ydHJlc3Nlcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXNlIEJhcmJhcmlhbnMgd2VyZSBzbyBjb250ZW1wdHVvdXMgYW5kIGJvbGQgaW4gZm9sbG93aW5nIHRoZWlyIGVuZW1pZXMgdGhhdCwgbW9yZSBieSB3YXkgb2YgZGlzcGxheWluZyB0aGVpciBzdHJlbmd0aCBhbmQgZGFyaW5nIHRoYW4gYmVjYXVzZSBpdCB3YXMgbmVjZXNzYXJ5IGF0IGFsbCwgdGhleSBlbmR1cmVkIHRoZSBzbm93LXN0b3JtcyB3aXRob3V0IGFueSBjbG90aGluZywgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCBpY2UgYW5kIGRlZXAgc25vdyB0byB0aGUgc3VtbWl0cywgYW5kIGZyb20gdGhlcmUsIHB1dHRpbmcgdGhlaXIgYnJvYWQgc2hpZWxkcyB1bmRlciB0aGVtIGFuZCB0aGVuIGxldHRpbmcgdGhlbXNlbHZlcyBnbywgc2xpZCBkb3duIHRoZSBzbW9vdGggYW5kIGRlZXBseSBmaXNzdXJlZCBjbGlmZnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXkgaGFkIGVuY2FtcGVkIG5lYXIgdGhlIHN0cmVhbSBhbmQgZXhhbWluZWQgdGhlIHBhc3NhZ2UsIHRoZXkgYmVnYW4gdG8gZGFtIGl0IHVwLCB0ZWFyaW5nIGF3YXkgdGhlIG5laWdoYm91cmluZyBoaWxscywgbGlrZSB0aGUgZ2lhbnRzIG9mIG9sZCwgY2FycnlpbmcgaW50byB0aGUgcml2ZXIgd2hvbGUgdHJlZXMgd2l0aCB0aGVpciByb290cywgZnJhZ21lbnRzIG9mIGNsaWZmcywgYW5kIG1vdW5kcyBvZiBlYXJ0aCwgYW5kIGNyb3dkaW5nIHRoZSBjdXJyZW50IG91dCBvZiBpdHMgY291cnNlOyB0aGV5IGFsc28gc2VudCB3aGlybGluZyBkb3duIHRoZSBzdHJlYW0gYWdhaW5zdCB0aGUgcGlsZXMgb2YgdGhlIGJyaWRnZSBoZWF2eSBtYXNzZXMgd2hpY2ggbWFkZSB0aGUgYnJpZGdlIHF1aXZlciB3aXRoIHRoZWlyIGJsb3dzLCB1bnRpbCBhdCBsYXN0IHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIFJvbWFuIHNvbGRpZXJzIHBsYXllZCB0aGUgY293YXJkLCBhYmFuZG9uZWQgdGhlaXIgbWFpbiBjYW1wLCBhbmQgYmVnYW4gdG8gcmV0cmVhdC4KCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFuZCBub3cgQ2F0dWx1cywgbGlrZSBhIGNvbnN1bW1hdGVseSBnb29kIGNvbW1hbmRlciwgc2hvd2VkIHRoYXQgaGUgaGFkIGxlc3MgcmVnYXJkIGZvciBoaXMgb3duIHJlcHV0YXRpb24gdGhhbiBmb3IgdGhhdCBvZiBoaXMgY291bnRyeW1lbi4gRm9yIGZpbmRpbmcgdGhhdCBoZSBjb3VsZCBub3QgcGVyc3VhZGUgaGlzIHNvbGRpZXJzIHRvIHJlbWFpbiwgYW5kIHNlZWluZyB0aGF0IHRoZXkgd2VyZSBtYWtpbmcgb2ZmIGluIHRlcnJvciwgaGUgb3JkZXJlZCBoaXMgc3RhbmRhcmQgdG8gYmUgdGFrZW4gdXAsIHJhbiB0byB0aGUgZm9yZW1vc3Qgb2YgdGhlIHJldGlyaW5nIHRyb29wcywgYW5kIHB1dCBoaW1zZWxmIGF0IHRoZWlyIGhlYWQsIHdpc2hpbmcgdGhhdCB0aGUgZGlzZ3JhY2Ugc2hvdWxkIGF0dGFjaCB0byBoaW1zZWxmIGFuZCBub3QgdG8gaGlzIGNvdW50cnksIGFuZCB0aGF0IGhpcyBzb2xkaWVycywgaW4gbWFraW5nIHRoZWlyIHJldHJlYXQsIHNob3VsZCBub3QgYXBwZWFyIHRvIGJlIHJ1bm5pbmcgYXdheSwgYnV0IGZvbGxvd2luZyB0aGVpciBnZW5lcmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQmFyYmFyaWFucyBhdHRhY2tlZCBhbmQgY2FwdHVyZWQgdGhlIGZvcnRyZXNzIG9uIHRoZSBmdXJ0aGVyIHNpZGUgb2YgdGhlIEF0aXNvLCBhbmQgdGhleSBzbyBtdWNoIGFkbWlyZWQgdGhlIFJvbWFucyB0aGVyZSwgd2hvIHNob3dlZCB0aGVtc2VsdmVzIGJyYXZlc3Qgb2YgbWVuIGFuZCBmb3VnaHQgd29ydGhpbHkgb2YgdGhlaXIgY291bnRyeSwgdGhhdCB0aGV5IGxldCB0aGVtIGdvIG9uIHBhcm9sZSwgbWFraW5nIHRoZW0gdGFrZSBvYXRoIHVwb24gdGhlIGJyb256ZSBidWxsLiBUaGlzIHdhcyBzdWJzZXF1ZW50bHkgY2FwdHVyZWQsIGFmdGVyIHRoZSBiYXR0bGUsIGFuZCB3YXMgY2FycmllZCwgd2UgYXJlIHRvbGQsIHRvIHRoZSBob3VzZSBvZiBDYXR1bHVzIGFzIHRoZSBjaGllZiBwcml6ZSBvZiB0aGUgdmljdG9yeS4gQnV0IHRoZSBjb3VudHJ5IHdhcyBub3cgZGVzdGl0dXRlIG9mIGRlZmVuZGVycywgYW5kIHRoZSBCYXJiYXJpYW5zIGludW5kYXRlZCBhbmQgcmF2YWdlZCBpdC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkluIHZpZXcgb2YgdGhlc2UgdGhpbmdzIE1hcml1cyB3YXMgc3VtbW9uZWQgdG8gUm9tZS4gV2hlbiBoZSBoYWQgYXJyaXZlZCB0aGVyZSwgaXQgd2FzIHRoZSBnZW5lcmFsIGV4cGVjdGF0aW9uIHRoYXQgaGUgd291bGQgY2VsZWJyYXRlIHRoZSB0cml1bXBoIHdoaWNoIHRoZSBzZW5hdGUgaGFkIHJlYWRpbHkgdm90ZWQgaGltLiBCdXQgaGUgcmVmdXNlZCB0byBkbyBzbywgZWl0aGVyIGJlY2F1c2UgaGUgZGlkIG5vdCB3aXNoIHRvIGRlcHJpdmUgaGlzIHNvbGRpZXJzIGFuZCBjb21yYWRlcy1pbi1hcm1zIG9mIHRoZWlyIGR1ZSBob25vdXJzLCBvciBiZWNhdXNlIGhlIHdvdWxkIGVuY291cmFnZSB0aGUgbXVsdGl0dWRlIGluIHZpZXcgb2YgdGhlIHByZXNlbnQgY3Jpc2lzIGJ5IGVudHJ1c3RpbmcgdGhlIGdsb3J5IG9mIGhpcyBmaXJzdCBzdWNjZXNzIHRvIHRoZSBmb3J0dW5lIG9mIHRoZSBzdGF0ZSwgaW4gdGhlIGhvcGUgdGhhdCBpdCB3b3VsZCBiZSByZXR1cm5lZCB0byBoaW0gZW5oYW5jZWQgYnkgYSBzZWNvbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBzYWlkIHdoYXQgd2FzIHN1aXRhYmxlIHRvIHRoZSBvY2Nhc2lvbiwgaGUgc2V0IG91dCB0byBqb2luIENhdHVsdXMsIHdob20gaGUgdHJpZWQgdG8gZW5jb3VyYWdlLCB3aGlsZSBhdCB0aGUgc2FtZSB0aW1lIGhlIHN1bW1vbmVkIGhpcyBvd24gc29sZGllcnMgZnJvbSBHYXVsLiBXaGVuIHRoZXNlIGhhZCBjb21lLCBoZSBjcm9zc2VkIHRoZSBQbyBhbmQgdHJpZWQgdG8ga2VlcCB0aGUgQmFyYmFyaWFucyBvdXQgb2YgdGhlIHBhcnQgb2YgSXRhbHkgbHlpbmcgdGhpcyBzaWRlIG9mIHRoZSByaXZlci4gQnV0IHRoZSBCYXJiYXJpYW5zIGRlY2xpbmVkIGJhdHRsZSwgYWxsZWdpbmcgdGhhdCB0aGV5IHdlcmUgd2FpdGluZyBmb3IgdGhlaXIgYnJldGhyZW4gdGhlIFRldXRvbmVzIGFuZCB3b25kZXJlZCB3aHkgdGhleSB3ZXJlIHNvIGxvbmcgaW4gY29taW5nOyB0aGlzIHdhcyBlaXRoZXIgYmVjYXVzZSB0aGV5IHdlcmUgcmVhbGx5IGlnbm9yYW50IG9mIHRoZWlyIGRlc3RydWN0aW9uLCBvciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRvIGhhdmUgdGhlIGFwcGVhcmFuY2Ugb2YgZGlzYmVsaWV2aW5nIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhleSB0ZXJyaWJseSBtaXNoYW5kbGVkIHRob3NlIHdobyBicm91Z2h0IHRpZGluZ3Mgb2YgaXQsIGFuZCBzZW50IHRvIE1hcml1cyBkZW1hbmRpbmcgdGVycml0b3J5IGZvciB0aGVtc2VsdmVzIGFuZCB0aGVpciBicmV0aHJlbiBhbmQgZW5vdWdoIGNpdGllcyBmb3IgdGhlbSB0byBkd2VsbCBpbi4gV2hlbiBNYXJpdXMgYXNrZWQgdGhlaXIgYW1iYXNzYWRvcnMgd2hvbSB0aGV5IG1lYW50IGJ5IHRoZWlyIGJyZXRocmVuLCB0aGV5IHNhaWQgdGhleSBtZWFudCB0aGUgVGV1dG9uZXMuIEF0IHRoaXMsIGFsbCB0aGUgb3RoZXIgUm9tYW5zIHdobyBoZWFyZCB0aGVtIGJ1cnN0IG91dCBsYXVnaGluZywgYW5kIE1hcml1cyBzY29mZmluZ2x5IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhlbiBkb24ndCB0cm91YmxlIHlvdXJzZWx2ZXMgYWJvdXQgeW91ciBicmV0aHJlbiwgZm9yIHRoZXkgaGF2ZSBsYW5kLCBhbmQgdGhleSB3aWxsIGhhdmUgaXQgZm9yZXZlcuKAlGxhbmQgd2hpY2ggd2UgaGF2ZSBnaXZlbiB0aGVtLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYW1iYXNzYWRvcnMgdW5kZXJzdG9vZCBoaXMgc2FyY2FzbSBhbmQgZmVsbCB0byBhYnVzaW5nIGhpbSwgZGVjbGFyaW5nIHRoYXQgaGUgc2hvdWxkIGJlIHB1bmlzaGVkIGZvciBpdCwgYnkgdGhlIENpbWJyaSBhdCBvbmNlLCBhbmQgYnkgdGhlIFRldXRvbmVzIHdoZW4gdGhleSBjYW1lLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlZlcmlseSw8L3E+IHNhaWQgTWFyaXVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZXkgYXJlIGhlcmUsIGFuZCBpdCB3aWxsIG5vdCBiZSByaWdodCBmb3IgeW91IHRvIGdvIGF3YXkgYmVmb3JlIHlvdSBoYXZlIGVtYnJhY2VkIHlvdXIgYnJldGhyZW4uPC9xPiBTYXlpbmcgdGhpcywgaGUgb3JkZXJlZCB0aGUga2luZ3Mgb2YgdGhlIFRldXRvbmVzIHRvIGJlIHByb2R1Y2VkIGluIGZldHRlcnM7IGZvciB0aGV5IGhhZCBiZWVuIGNhcHR1cmVkIGFtb25nIHRoZSBBbHBzLCB3aGVyZSB0aGV5IHdlcmUgZnVnaXRpdmVzLCBieSB0aGUgU2VxdWFuaS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlc2UgdGhpbmdzIGhhZCBiZWVuIHJlcG9ydGVkIHRvIHRoZSBDaW1icmksIHRoZXkgb25jZSBtb3JlIGFkdmFuY2VkIGFnYWluc3QgTWFyaXVzLCB3aG8ga2VwdCBxdWlldCBhbmQgY2FyZWZ1bGx5IGd1YXJkZWQgaGlzIGNhbXAuIEFuZCBpdCBpcyBzYWlkIHRoYXQgaXQgd2FzIGluIHByZXBhcmF0aW9uIGZvciB0aGlzIGJhdHRsZSB0aGF0IE1hcml1cyBpbnRyb2R1Y2VkIGFuIGlubm92YXRpb24gaW4gdGhlIHN0cnVjdHVyZSBvZiB0aGUgamF2ZWxpbi4gVXAgdG8gdGhpcyB0aW1lLCBpdCBzZWVtcywgdGhhdCBwYXJ0IG9mIHRoZSBzaGFmdCB3aGljaCB3YXMgbGV0IGludG8gdGhlIGlyb24gaGVhZCB3YXMgZmFzdGVuZWQgdGhlcmUgYnkgdHdvIGlyb24gbmFpbHM7IGJ1dCBub3csIGxlYXZpbmcgb25lIG9mIHRoZXNlIGFzIGl0IHdhcywgTWFyaXVzIHJlbW92ZWQgdGhlIG90aGVyLCBhbmQgcHV0IGluIGl0cyBwbGFjZSBhIHdvb2RlbiBwaW4gdGhhdCBjb3VsZCBlYXNpbHkgYmUgYnJva2VuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgZGVzaWduIHdhcyB0aGF0IHRoZSBqYXZlbGluLCBhZnRlciBzdHJpa2luZyB0aGUgZW5lbXkncyBzaGllbGQsIHNob3VsZCBub3Qgc3RhbmQgc3RyYWlnaHQgb3V0LCBidXQgdGhhdCB0aGUgd29vZGVuIHBlZyBzaG91bGQgYnJlYWssIHRodXMgYWxsb3dpbmcgdGhlIHNoYWZ0IHRvIGJlbmQgaW4gdGhlIGlyb24gaGVhZCBhbmQgdHJhaWwgYWxvbmcgdGhlIGdyb3VuZCwgYmVpbmcgaGVsZCBmYXN0IGJ5IHRoZSB0d2lzdCBhdCB0aGUgcG9pbnQgb2YgdGhlIHdlYXBvbi4KCQkJPC9wPgogICAgICAgICA8cD5BbmQgbm93IEJvZW9yaXggdGhlIGtpbmcgb2YgdGhlIENpbWJyaSwgd2l0aCBhIHNtYWxsIHJldGludWUsIHJvZGUgdXAgdG93YXJkcyB0aGUgY2FtcCBhbmQgY2hhbGxlbmdlZCBNYXJpdXMgdG8gc2V0IGEgZGF5IGFuZCBhIHBsYWNlIGFuZCBjb21lIG91dCBhbmQgZmlnaHQgZm9yIHRoZSBvd25lcnNoaXAgb2YgdGhlIGNvdW50cnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyByZXBsaWVkIHRoYXQgdGhlIFJvbWFucyBuZXZlciBhbGxvd2VkIHRoZWlyIGVuZW1pZXMgdG8gZ2l2ZSB0aGVtIGFkdmljZSBhYm91dCBmaWdodGluZywgYnV0IHRoYXQgaGUgd291bGQgbmV2ZXJ0aGVsZXNzIGdyYXRpZnkgdGhlIENpbWJyaSBpbiB0aGlzIG1hdHRlci4gQWNjb3JkaW5nbHksIHRoZXkgZGVjaWRlZCB0aGF0IHRoZSBkYXkgc2hvdWxkIGJlIHRoZSB0aGlyZCBmb2xsb3dpbmcsIGFuZCB0aGUgcGxhY2UgdGhlIHBsYWluIG9mIFZlcmNlbGxhZSwgd2hpY2ggd2FzIHN1aXRhYmxlIGZvciB0aGUgb3BlcmF0aW9ucyBvZiB0aGUgUm9tYW4gY2F2YWxyeSwgYW5kIHdvdWxkIGdpdmUgdGhlIENpbWJyaSByb29tIHRvIGRlcGxveSB0aGVpciBudW1iZXJzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgdGhlcmVmb3JlLCB0aGUgYXBwb2ludGVkIHRpbWUgaGFkIGNvbWUsIHRoZSBSb21hbnMgZHJldyB1cCB0aGVpciBmb3JjZXMgZm9yIGJhdHRsZS4gQ2F0dWx1cyBoYWQgdHdlbnR5IHRob3VzYW5kIHRocmVlIGh1bmRyZWQgc29sZGllcnMsIHdoaWxlIHRob3NlIG9mIE1hcml1cyBhbW91bnRlZCB0byB0aGlydHktdHdvIHRob3VzYW5kLCB3aGljaCB3ZXJlIGRpdmlkZWQgYmV0d2VlbiBib3RoIHdpbmdzIGFuZCBoYWQgQ2F0dWx1cyBiZXR3ZWVuIHRoZW0gaW4gdGhlIGNlbnRyZSwgYXMgU3VsbGEsIHdobyBmb3VnaHQgaW4gdGhpcyBiYXR0bGUsIGhhcyBzdGF0ZWQuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGhpcyA8dGl0bGU+TWVtb2lycyA8L3RpdGxlPjsgY2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gNC4zIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TdWxsYSA8L3RpdGxlPiwgaXYuIDMgPC9iaWJsPi4gPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgYWxzbyB0aGF0IE1hcml1cyBob3BlZCB0aGF0IHRoZSB0d28gbGluZXMgd291bGQgZW5nYWdlIGF0IHRoZWlyIGV4dHJlbWl0aWVzIGNoaWVmbHkgYW5kIG9uIHRoZSB3aW5ncywgaW4gb3JkZXIgdGhhdCBoaXMgc29sZGllcnMgbWlnaHQgaGF2ZSB0aGUgd2hvbGUgY3JlZGl0IGZvciB0aGUgdmljdG9yeSBhbmQgdGhhdCBDYXR1bHVzIG1pZ2h0IG5vdCBwYXJ0aWNpcGF0ZSBpbiB0aGUgc3RydWdnbGUgbm9yIGV2ZW4gZW5nYWdlIHRoZSBlbmVteSAoc2luY2UgdGhlIGNlbnRyZSwgYXMgaXMgdXN1YWwgaW4gYmF0dGxlLWZyb250cyBvZiBncmVhdCBleHRlbnQsIHdvdWxkIGJlIGZvbGRlZCBiYWNrKTsgYW5kIHRoZXJlZm9yZSBhcnJhbmdlZCB0aGUgZm9yY2VzIGluIHRoaXMgbWFubmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2UgYXJlIHRvbGQgdGhhdCBDYXR1bHVzIGhpbXNlbGYgYWxzbyBtYWRlIGEgc2ltaWxhciBzdGF0ZW1lbnQgaW4gZGVmZW5jZSBvZiBoaXMgY29uZHVjdCBpbiB0aGUgYmF0dGxlLCBhbmQgYWNjdXNlZCBNYXJpdXMgb2YgZ3JlYXQgbWFsaWNlIGluIGhpcyB0cmVhdG1lbnQgb2YgaGltLgoJCQk8L3A+CiAgICAgICAgIDxwPkFzIGZvciB0aGUgQ2ltYnJpLCB0aGVpciBmb290LXNvbGRpZXJzIGFkdmFuY2VkIHNsb3dseSBmcm9tIHRoZWlyIGRlZmVuY2VzLCB3aXRoIGEgZGVwdGggZXF1YWwgdG8gdGhlaXIgZnJvbnQsIGZvciBlYWNoIHNpZGUgb2YgdGhlaXIgZm9ybWF0aW9uIGhhZCBhbiBleHRlbnQgb2YgdGhpcnR5IGZ1cmxvbmdzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhlaXIgaG9yc2VtZW4sIGZpZnRlZW4gdGhvdXNhbmQgc3Ryb25nLCByb2RlIG91dCBpbiBzcGxlbmRpZCBzdHlsZSwgd2l0aCBoZWxtZXRzIG1hZGUgdG8gcmVzZW1ibGUgdGhlIG1hd3Mgb2YgZnJpZ2h0ZnVsIHdpbGQgYmVhc3RzIG9yIHRoZSBoZWFkcyBvZiBzdHJhbmdlIGFuaW1hbHMsIHdoaWNoLCB3aXRoIHRoZWlyIHRvd2VyaW5nIGNyZXN0cyBvZiBmZWF0aGVycywgbWFkZSB0aGVpciB3ZWFyZXJzIGFwcGVhciB0YWxsZXIgdGhhbiB0aGV5IHJlYWxseSB3ZXJlOyB0aGV5IHdlcmUgYWxzbyBlcXVpcHBlZCB3aXRoIGJyZWFzdHBsYXRlcyBvZiBpcm9uLCBhbmQgY2FycmllZCBnbGVhbWluZyB3aGl0ZSBzaGllbGRzLiBGb3IgaHVybGluZywgZWFjaCBtYW4gaGFkIHR3byBsYW5jZXM7IGFuZCBhdCBjbG9zZSBxdWFydGVycyB0aGV5IHVzZWQgbGFyZ2UsIGhlYXZ5IHN3b3Jkcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgaG93ZXZlciwgdGhleSBkaWQgbm90IGNoYXJnZSBkaXJlY3RseSB1cG9uIHRoZSBSb21hbnMsIGJ1dCBzd2VydmVkIHRvIHRoZSByaWdodCBhbmQgdHJpZWQgdG8gZHJhdyB0aGVtIGFsb25nIGdyYWR1YWxseSB1bnRpbCB0aGV5IGdvdCB0aGVtIGJldHdlZW4gdGhlbXNlbHZlcyBhbmQgdGhlaXIgaW5mYW50cnksIHdoaWNoIHdhcyBkcmF3biB1cCBvbiB0aGVpciBsZWZ0LiBUaGUgUm9tYW4gY29tbWFuZGVycyBwZXJjZWl2ZWQgdGhlIGNyYWZ0eSBkZXNpZ24sIGJ1dCBkaWQgbm90IHN1Y2NlZWQgaW4gaG9sZGluZyB0aGVpciBzb2xkaWVycyBiYWNrOyBmb3Igb25lIG9mIHRoZW0gc2hvdXRlZCB0aGF0IHRoZSBlbmVteSB3YXMgdGFraW5nIHRvIGZsaWdodCwgYW5kIHRoZW4gYWxsIHNldCBvdXQgdG8gcHVyc3VlIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSB0aGUgaW5mYW50cnkgb2YgdGhlIEJhcmJhcmlhbnMgY2FtZSBvbiB0byB0aGUgYXR0YWNrIGxpa2UgYSB2YXN0IHNlYSBpbiBtb3Rpb24uIFRoZW4gTWFyaXVzLCBhZnRlciB3YXNoaW5nIGhpcyBoYW5kcywgbGlmdGVkIHRoZW0gdG8gaGVhdmVuIGFuZCB2b3dlZCBhIGhlY2F0b21iIHRvIHRoZSBnb2RzOyBDYXR1bHVzIGFsc28gaW4gbGlrZSBtYW5uZXIgbGlmdGVkIGhpcyBoYW5kcyBhbmQgdm93ZWQgdGhhdCBoZSB3b3VsZCBjb25zZWNyYXRlIHRoZSBmb3J0dW5lIG9mIHRoYXQgZGF5LiBJdCBpcyBzYWlkLCB0b28sIHRoYXQgTWFyaXVzIG9mZmVyZWQgc2FjcmlmaWNlLCBhbmQgdGhhdCB3aGVuIHRoZSB2aWN0aW1zIGhhZCBiZWVuIHNob3duIHRvIGhpbSwgaGUgY3JpZWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TWluZSBpcyB0aGUgdmljdG9yeS48L3E+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGF0dGFjayBoYWQgYmVndW4sIGhvd2V2ZXIsIGFuIGV4cGVyaWVuY2UgYmVmZWxsIE1hcml1cyB3aGljaCBzaWduaWZpZWQgdGhlIGRpdmluZSBkaXNwbGVhc3VyZSwgYWNjb3JkaW5nIHRvIFN1bGxhLiBGb3IgYW4gaW1tZW5zZSBjbG91ZCBvZiBkdXN0IHdhcyByYWlzZWQsIGFzIHdhcyB0byBiZSBleHBlY3RlZCwgYW5kIHRoZSB0d28gYXJtaWVzIHdlcmUgaGlkZGVuIGZyb20gb25lIGFub3RoZXIgYnkgaXQsIHNvIHRoYXQgTWFyaXVzLCB3aGVuIGhlIGZpcnN0IGxlZCBoaXMgZm9yY2VzIHRvIHRoZSBhdHRhY2ssIG1pc3NlZCB0aGUgZW5lbXksIHBhc3NlZCBieSB0aGVpciBsaW5lcyBvZiBiYXR0bGUsIGFuZCBtb3ZlZCBhaW1sZXNzbHkgdXAgYW5kIGRvd24gdGhlIHBsYWluIGZvciBzb21lIHRpbWUuIE1lYW53aGlsZSwgYXMgY2hhbmNlIHdvdWxkIGhhdmUgaXQsIHRoZSBCYXJiYXJpYW5zIGVuZ2FnZWQgZmllcmNlbHkgd2l0aCBDYXR1bHVzLCBhbmQgaGUgYW5kIGhpcyBzb2xkaWVycywgYW1vbmcgd2hvbSBTdWxsYSBzYXlzIGhlIGhpbXNlbGYgd2FzIHBvc3RlZCwgYm9yZSB0aGUgYnJ1bnQgb2YgdGhlIHN0cnVnZ2xlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW5zIHdlcmUgZmF2b3VyZWQgaW4gdGhlIHN0cnVnZ2xlLCBTdWxsYSBzYXlzLCBieSB0aGUgaGVhdCwgYW5kIGJ5IHRoZSBzdW4sIHdoaWNoIHNob25lIGluIHRoZSBmYWNlcyBvZiB0aGUgQ2ltYnJpLiBGb3IgdGhlIEJhcmJhcmlhbnMgd2VyZSB3ZWxsIGFibGUgdG8gZW5kdXJlIGNvbGQsIGFuZCBoYWQgYmVlbiBicm91Z2h0IHVwIGluIHNoYWR5IGFuZCBjaGlsbHkgcmVnaW9ucywgYXMgSSBoYXZlIHNhaWQuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPiAKICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDExLjUiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeGkuIDUgZiA8L2JpYmw+LiA8L25vdGU+IFRoZXkgd2VyZSB0aGVyZWZvcmUgdW5kb25lIGJ5IHRoZSBoZWF0OyB0aGV5IHN3ZWF0ZWQgcHJvZnVzZWx5LCBicmVhdGhlZCB3aXRoIGRpZmZpY3VsdHksIGFuZCB3ZXJlIGZvcmNlZCB0byBob2xkIHRoZWlyIHNoaWVsZHMgYmVmb3JlIHRoZWlyIGZhY2VzLiBGb3IgdGhlIGJhdHRsZSB3YXMgZm91Z2h0IGFmdGVyIHRoZSBzdW1tZXIgc29sc3RpY2UsIHdoaWNoIGZhbGxzLCBieSBSb21hbiByZWNrb25pbmcsIHRocmVlIGRheXMgYmVmb3JlIHRoZSBuZXcgbW9vbiBvZiB0aGUgbW9udGggbm93IGNhbGxlZCBBdWd1c3QsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmEuZC4gSUlJLiA8Zm9yZWlnbiBsYW5nPSJsYSI+S2FsZW5kYXMgQXVndXN0aTwvZm9yZWlnbj4uIDwvbm90ZT4gYnV0IHRoZW4gU2V4dGlsaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgZHVzdCwgYnkgaGlkaW5nIHRoZSBlbmVteSwgaGVscGVkIHRvIGVuY291cmFnZSB0aGUgUm9tYW5zLiBGb3IgdGhleSBjb3VsZCBub3Qgc2VlIGZyb20gYWZhciB0aGUgZ3JlYXQgbnVtYmVycyBvZiB0aGUgZm9lLCBidXQgZWFjaCBvbmUgb2YgdGhlbSBmZWxsIGF0IGEgcnVuIHVwb24gdGhlIG1hbiBqdXN0IG92ZXIgYWdhaW5zdCBoaW0sIGFuZCBmb3VnaHQgaGltIGhhbmQgdG8gaGFuZCwgd2l0aG91dCBoYXZpbmcgYmVlbiB0ZXJyaWZpZWQgYnkgdGhlIHNpZ2h0IG9mIHRoZSByZXN0IG9mIHRoZSBob3N0LiBBbmQgdGhlaXIgYm9kaWVzIHdlcmUgc28gaW51cmVkIHRvIHRvaWwgYW5kIHNvIHRob3JvdWdobHkgdHJhaW5lZCB0aGF0IG5vdCBhIFJvbWFuIHdhcyBvYnNlcnZlZCB0byBzd2VhdCBvciBwYW50LCBpbiBzcGl0ZSBvZiB0aGUgZ3JlYXQgaGVhdCBhbmQgdGhlIHJ1biB3aXRoIHdoaWNoIHRoZXkgY2FtZSB0byB0aGUgZW5jb3VudGVyLiBUaGlzIGlzIHdoYXQgQ2F0dWx1cyBoaW1zZWxmIGlzIHNhaWQgdG8gaGF2ZSB3cml0dGVuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhdHVsdXMgd3JvdGUgYSBoaXN0b3J5IG9mIGhpcyBjb25zdWxzaGlwLCBvZiB3aGljaCBDaWNlcm8gc3BlYWtzIGluIHRlcm1zIG9mIGhpZ2ggcHJhaXNlICggPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNpYy4gYWQgQnJ1dC4gMTMyIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXMgPC90aXRsZT4gMzUsIDEzMiBmZi4gPC9iaWJsPikuIDwvbm90ZT4gaW4gZXh0b2xsaW5nIGhpcyBzb2xkaWVycy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBncmVhdGVzdCBudW1iZXIgYW5kIHRoZSBiZXN0IGZpZ2h0ZXJzIG9mIHRoZSBlbmVteSB3ZXJlIGN1dCB0byBwaWVjZXMgb24gdGhlIHNwb3Q7IGZvciB0byBwcmV2ZW50IHRoZWlyIHJhbmtzIGZyb20gYmVpbmcgYnJva2VuLCB0aG9zZSB3aG8gZm91Z2h0IGluIGZyb250IHdlcmUgYm91bmQgZmFzdCB0byBvbmUgYW5vdGhlciB3aXRoIGxvbmcgY2hhaW5zIHdoaWNoIHdlcmUgcGFzc2VkIHRocm91Z2ggdGhlaXIgYmVsdHMuIFRoZSBmdWdpdGl2ZXMsIGhvd2V2ZXIsIHdlcmUgZHJpdmVuIGJhY2sgdG8gdGhlaXIgZW50cmVuY2htZW50cywgd2hlcmUgdGhlIFJvbWFucyBiZWhlbGQgYSBtb3N0IHRyYWdpYyBzcGVjdGFjbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3b21lbiwgaW4gYmxhY2sgZ2FybWVudHMsIHN0b29kIGF0IHRoZSB3YWdnb25zIGFuZCBzbGV3IHRoZSBmdWdpdGl2ZXPigJR0aGVpciBodXNiYW5kcyBvciBicm90aGVycyBvciBmYXRoZXJzLCB0aGVuIHN0cmFuZ2xlZCB0aGVpciBsaXR0bGUgY2hpbGRyZW4gYW5kIGNhc3QgdGhlbSBiZW5lYXRoIHRoZSB3aGVlbHMgb2YgdGhlIHdhZ2dvbnMgb3IgdGhlIGZlZXQgb2YgdGhlIGNhdHRsZSwgYW5kIHRoZW4gY3V0IHRoZWlyIG93biB0aHJvYXRzLiBJdCBpcyBzYWlkIHRoYXQgb25lIHdvbWFuIGh1bmcgZGFuZ2xpbmcgZnJvbSB0aGUgdGlwIG9mIGEgd2FnZ29uLXBvbGUsIHdpdGggaGVyIGNoaWxkcmVuIHRpZWQgdG8gZWl0aGVyIGFua2xlOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSB0aGUgbWVuLCBmb3IgbGFjayBvZiB0cmVlcywgZmFzdGVuZWQgdGhlbXNlbHZlcyBieSB0aGUgbmVjayB0byB0aGUgaG9ybnMgb2YgdGhlIGNhdHRsZSwgb3IgdG8gdGhlaXIgbGVncywgdGhlbiBwbGllZCB0aGUgZ29hZCwgYW5kIHdlcmUgZHJhZ2dlZCBvciB0cmFtcGxlZCB0byBkZWF0aCBhcyB0aGUgY2F0dGxlIGRhc2hlZCBhd2F5LiBOZXZlcnRoZWxlc3MsIGluIHNwaXRlIG9mIHN1Y2ggc2VsZi1kZXN0cnVjdGlvbiwgbW9yZSB0aGFuIHNpeHR5IHRob3VzYW5kIHdlcmUgdGFrZW4gcHJpc29uZXJzOyBhbmQgdGhvc2Ugd2hvIGZlbGwgd2VyZSBzYWlkIHRvIGhhdmUgYmVlbiB0d2ljZSB0aGF0IG51bWJlci4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGVuZW15J3MgcHJvcGVydHkgYmVjYW1lIHRoZSBib290eSBvZiB0aGUgc29sZGllcnMgb2YgTWFyaXVzLCBidXQgdGhlIHNwb2lscyBvZiBiYXR0bGUsIHRoZSBzdGFuZGFyZHMsIGFuZCB0aGUgdHJ1bXBldHMsIHdlcmUgYnJvdWdodCwgd2UgYXJlIHRvbGQsIHRvIHRoZSBjYW1wIG9mIENhdHVsdXMgYW5kIENhdHVsdXMgcmVsaWVkIGNoaWVmbHkgdXBvbiB0aGlzIGFzIGEgcHJvb2YgdGhhdCB0aGUgdmljdG9yeSB3YXMgd29uIGJ5IGhpcyBtZW4uIEZ1cnRoZXJtb3JlLCBhIGRpc3B1dGUgZm9yIHRoZSBob25vdXIgb2YgdGhlIHZpY3RvcnkgYXJvc2UgYW1vbmcgdGhlIHNvbGRpZXJzLCBhcyB3YXMgbmF0dXJhbCwgYW5kIHRoZSBtZW1iZXJzIG9mIGFuIGVtYmFzc3kgZnJvbSBQYXJtYSB3ZXJlIGNob3NlbiB0byBhY3QgYXMgYXJiaXRyYXRvcnMuIFRoZXNlIG1lbiB0aGUgc29sZGllcnMgb2YgQ2F0dWx1cyBjb25kdWN0ZWQgYW1vbmcgdGhlIGRlYWQgYm9kaWVzIG9mIHRoZSBlbmVteSwgd2hpY2ggd2VyZSBjbGVhcmx5IHNlZW4gdG8gaGF2ZSBiZWVuIHBpZXJjZWQgYnkgdGhlaXIgamF2ZWxpbnM7IGZvciB0aGVzZSBjb3VsZCBiZSBrbm93biBieSB0aGUgbmFtZSBvZiBDYXR1bHVzIHdoaWNoIGhhZCBiZWVuIGN1dCBpbnRvIHRoZSBzaGFmdC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlIGVudGlyZSBzdWNjZXNzIHdhcyBhdHRyaWJ1dGVkIHRvIE1hcml1cywgYm90aCBvbiBhY2NvdW50IG9mIGhpcyBmb3JtZXIgdmljdG9yeSBhbmQgb2YgaGlzIHN1cGVyaW9yIHJhbmsuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hcml1cyB3YXMgY29uc3VsIHN0aWxsLCB3aGlsZSBDYXR1bHVzIGhhZCBub3QgYmVlbiByZS1lbGVjdGVkLCBhbmQgd2FzIG9ubHkgcHJvLWNvbnN1bC4gPC9ub3RlPiBBYm92ZSBhbGwsIHRoZSBwZW9wbGUgaGFpbGVkIGhpbSBhcyB0aGUgdGhpcmQgZm91bmRlciBvZiBSb21lLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5XaXRoIFJvbXVsdXMgYW5kIENhbWlsbHVzLiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYW0uIDMxLjIiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhbWlsbHVzIDwvdGl0bGU+LCB4eHhpLiAyIDwvYmlibD4uIDwvbm90ZT4gb24gdGhlIGdyb3VuZCB0aGF0IHRoZSBwZXJpbCB3aGljaCBoZSBoYWQgYXZlcnRlZCBmcm9tIHRoZSBjaXR5IHdhcyBub3QgbGVzcyB0aGFuIHRoYXQgb2YgdGhlIEdhbGxpYyBpbnZhc2lvbjsgYW5kIGFsbCBvZiB0aGVtLCBhcyB0aGV5IG1hZGUgbWVycnkgYXQgaG9tZSB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiwgd291bGQgYnJpbmcgY2VyZW1vbmlhbCBvZmZlcmluZ3Mgb2YgZm9vZCBhbmQgbGliYXRpb25zIG9mIHdpbmUgdG8gTWFyaXVzIGFzIHdlbGwgYXMgdG8gdGhlIGdvZHMsIGFuZCB0aGV5IHdlcmUgaW5zaXN0ZW50IHRoYXQgaGUgYWxvbmUgc2hvdWxkIGNlbGVicmF0ZSBib3RoIHRyaXVtcGhzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMsIGhvd2V2ZXIsIHdvdWxkIG5vdCBkbyB0aGlzLCBidXQgY2VsZWJyYXRlZCBoaXMgdHJpdW1waCB3aXRoIENhdHVsdXMsIHdpc2hpbmcgdG8gc2hvdyBoaW1zZWxmIGEgbWFuIG9mIG1vZGVyYXRpb24gYWZ0ZXIgYSBjb3Vyc2Ugb2Ygc28gZ3JlYXQgZ29vZCBmb3J0dW5lLiBQZXJoYXBzLCB0b28sIGhlIHdhcyBhZnJhaWQgb2YgdGhlIHNvbGRpZXJzLCB3aG8gd2VyZSBkcmF3biB1cCBhbmQgcmVhZHksIGluIGNhc2UgQ2F0dWx1cyB3ZXJlIGRlcHJpdmVkIG9mIGhpcyBob25vdXIsIHRvIHByZXZlbnQgTWFyaXVzIGFsc28gZnJvbSBjZWxlYnJhdGluZyBhIHRyaXVtcGguCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzLCB0aGVuLCBoaXMgZmlmdGggY29uc3Vsc2hpcCB3YXMgY29taW5nIHRvIGFuIGVuZDsgYnV0IGhlIHdhcyBhcyBlYWdlciBmb3IgYSBzaXh0aCBhcyBhbm90aGVyIHdvdWxkIGhhdmUgYmVlbiBmb3IgaGlzIGZpcnN0LiBIZSB0cmllZCB0byB3aW4gb3ZlciB0aGUgcGVvcGxlIGJ5IG9ic2VxdWlvdXMgYXR0ZW50aW9ucywgYW5kIHlpZWxkZWQgdG8gdGhlIG11bHRpdHVkZSBpbiBvcmRlciB0byBnYWluIGl0cyBmYXZvdXIsIHRodXMgZG9pbmcgdmlvbGVuY2UsIG5vdCBvbmx5IHRvIHRoZSBkaWduaXR5IGFuZCBtYWplc3R5IG9mIGhpcyBoaWdoIG9mZmljZSwgYnV0IGFsc28gdG8gaGlzIG93biBuYXR1cmUsIHNpbmNlIGhlIHdpc2hlZCB0byBiZSBhIGNvbXBsaWFudCBtYW4gb2YgdGhlIHBlb3BsZSB3aGVuIGhlIHdhcyBuYXR1cmFsbHkgYXQgZmFydGhlc3QgcmVtb3ZlIGZyb20gdGhpcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uZnJvbnRpbmcgYSBwb2xpdGljYWwgY3Jpc2lzIG9yIHRoZSB0dW11bHR1b3VzIHRocm9uZywgd2UgYXJlIHRvbGQsIGhpcyBhbWJpdGlvbiBtYWRlIGhpbSBtb3N0IHRpbW9yb3VzLCBhbmQgdGhhdCB1bmRhdW50ZWQgZmlybW5lc3Mgd2hpY2ggaGUgc2hvd2VkIGluIGJhdHRsZSBmb3Jzb29rIGhpbSB3aGVuIGhlIGZhY2VkIHRoZSBwb3B1bGFyIGFzc2VtYmxpZXMsIHNvIHRoYXQgaGUgd2FzIGRpc2NvbmNlcnRlZCBieSB0aGUgbW9zdCBvcmRpbmFyeSBwcmFpc2Ugb3IgYmxhbWUuIEFuZCB5ZXQgd2UgYXJlIHRvbGQgdGhhdCB3aGVuIGhlIGhhZCBiZXN0b3dlZCBjaXRpemVuc2hpcCB1cG9uIGFzIG1hbnkgYXMgYSB0aG91c2FuZCBtZW4gb2YgQ2FtZXJpbnVtIGZvciBjb25zcGljdW91cyBicmF2ZXJ5IGluIHRoZSB3YXIsIHRoZSBhY3Qgd2FzIGhlbGQgdG8gYmUgaWxsZWdhbCBhbmQgd2FzIGltcGVhY2hlZCBieSBzb21lOyB0byB3aG9tIGhlIHJlcGxpZWQgdGhhdCB0aGUgY2xhc2ggb2YgYXJtcyBoYWQgcHJldmVudGVkIGhpcyBoZWFyaW5nIHRoZSB2b2ljZSBvZiB0aGUgbGF3LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBoZSBhcHBlYXJlZCB0byBiZSBpbiBncmVhdGVyIGZlYXIgYW5kIHRlcnJvciBvZiB0aGUgc2hvdXRpbmcgaW4gdGhlIHBvcHVsYXIgYXNzZW1ibGllcy4gQXQgYW55IHJhdGUsIHdoaWxlIGluIHdhciBoZSBoYWQgYXV0aG9yaXR5IGFuZCBwb3dlciBiZWNhdXNlIGhpcyBzZXJ2aWNlcyB3ZXJlIG5lZWRlZCwgeWV0IGluIGNpdmlsIGxpZmUgaGlzIGxlYWRlcnNoaXAgd2FzIG1vcmUgYWJyaWRnZWQsIGFuZCBoZSB0aGVyZWZvcmUgaGFkIHJlY291cnNlIHRvIHRoZSBnb29kd2lsbCBhbmQgZmF2b3VyIG9mIHRoZSBtdWx0aXR1ZGUsIG5vdCBjYXJpbmcgdG8gYmUgdGhlIGJlc3QgbWFuIGlmIG9ubHkgaGUgY291bGQgYmUgdGhlIGdyZWF0ZXN0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29uc2VxdWVuY2Ugd2FzIHRoYXQgaGUgY2FtZSBpbnRvIGNvbGxpc2lvbiB3aXRoIGFsbCB0aGUgYXJpc3RvY3JhdHMuIEl0IHdhcyBNZXRlbGx1cywgaG93ZXZlciwgd2hvbSBoZSBlc3BlY2lhbGx5IGZlYXJlZCwgYSBtYW4gd2hvIGhhZCBleHBlcmllbmNlZCBoaXMgaW5ncmF0aXR1ZGUsIGFuZCBvbmUgd2hvc2UgZ2VudWluZSBleGNlbGxlbmNlIG1hZGUgaGltIHRoZSBuYXR1cmFsIGVuZW15IG9mIHRob3NlIHdobyB0cmllZCB0byBpbnNpbnVhdGUgdGhlbXNlbHZlcyBieSBkZXZpb3VzIG1ldGhvZHMgaW50byBwb3B1bGFyIGZhdm91ciBhbmQgc291Z2h0IHRvIGNvbnRyb2wgdGhlIG1hc3NlcyBieSBwbGVhc2luZyB0aGVtLiBBY2NvcmRpbmdseSwgaGUgc2NoZW1lZCB0byBiYW5pc2ggTWV0ZWxsdXMgZnJvbSB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcHVycG9zZSBoZSBhbGxpZWQgaGltc2VsZiB3aXRoIFNhdHVybmludXMgYW5kIEdsYXVjaWEsIG1lbiBvZiB0aGUgZ3JlYXRlc3QgZWZmcm9udGVyeSwgd2hvIGhhZCBhIHJhYmJsZSBvZiBuZWVkeSBhbmQgbm9pc3kgZmVsbG93cyBhdCB0aGVpciBiZWNrIGFuZCBjYWxsLCBhbmQgd2l0aCB0aGVpciBhc3Npc3RhbmNlIHdvdWxkIGludHJvZHVjZSBsYXdzLiBIZSBhbHNvIHN0aXJyZWQgdXAgdGhlIHNvbGRpZXJ5LCBnb3QgdGhlbSB0byBtaW5nbGUgd2l0aCB0aGUgY2l0aXplbnMgaW4gdGhlIGFzc2VtYmxpZXMsIGFuZCB0aHVzIGNvbnRyb2xsZWQgYSBmYWN0aW9uIHdoaWNoIGNvdWxkIG92ZXJwb3dlciBNZXRlbGx1cy4gVGhlbiwgYWNjb3JkaW5nIHRvIFJ1dGlsaXVzLCB3aG8gaXMgZ2VuZXJhbGx5IGEgbG92ZXIgb2YgdHJ1dGggYW5kIGFuIGhvbmVzdCBtYW4sIGJ1dCBoYWQgYSBwcml2YXRlIHF1YXJyZWwgd2l0aCBNYXJpdXMsIGhlIGFjdHVhbGx5IGdvdCBoaXMgc2l4dGggY29uc3Vsc2hpcCBieSBwYXlpbmcgZG93biBsYXJnZSBzdW1zIG9mIG1vbmV5IGFtb25nIHRoZSB0cmliZXMsIGFuZCBieSBidXlpbmcgdm90ZXMgbWFkZSBNZXRlbGx1cyBsb3NlIGhpcyBlbGVjdGlvbiB0byB0aGUgb2ZmaWNlLCBhbmQgb2J0YWluZWQgYXMgaGlzIGNvbGxlYWd1ZSBpbiB0aGUgY29uc3Vsc2hpcCBWYWxlcml1cyBGbGFjY3VzLCB3aG8gd2FzIG1vcmUgYSBzZXJ2YW50IHRoYW4gYSBjb2xsZWFndWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIHBlb3BsZSBoYWQgbmV2ZXIgYmVzdG93ZWQgc28gbWFueSBjb25zdWxzaGlwcyB1cG9uIGFueSBvdGhlciBtYW4gZXhjZXB0IENvcnZpbnVzIFZhbGVyaXVzLiBJbiB0aGUgY2FzZSBvZiBDb3J2aW51cywgaG93ZXZlciwgZm9ydHktZml2ZSB5ZWFycyBhcmUgc2FpZCB0byBoYXZlIGVsYXBzZWQgYmV0d2VlbiBoaXMgZmlyc3QgYW5kIGhpcyBsYXN0IGNvbnN1bHNoaXA7IHdoZXJlYXMgTWFyaXVzLCBhZnRlciBoaXMgZmlyc3QgY29uc3Vsc2hpcCwgcmFuIHRocm91Z2ggdGhlIG90aGVyIGZpdmUgd2l0aG91dCBhIGJyZWFrLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBsYXN0IGNvbnN1bHNoaXAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTAwIEIuQy4gPC9ub3RlPiBwYXJ0aWN1bGFybHkgZGlkIE1hcml1cyBtYWtlIGhpbXNlbGYgaGF0ZWQsIGJlY2F1c2UgaGUgdG9vayBwYXJ0IHdpdGggU2F0dXJuaW51cyBpbiBtYW55IG9mIGhpcyBtaXNkZWVkcy4gT25lIG9mIHRoZXNlIHdhcyB0aGUgbXVyZGVyIG9mIE5vbml1cywgd2hvbSBTYXR1cm5pbnVzIHNsZXcgYmVjYXVzZSBoZSB3YXMgYSByaXZhbCBjYW5kaWRhdGUgZm9yIHRoZSB0cmlidW5lc2hpcC4gVGhlbiwgYXMgdHJpYnVuZSwgU2F0dXJuaW51cyBpbnRyb2R1Y2VkIGhpcyBhZ3JhcmlhbiBsYXcsIHRvIHdoaWNoIHdhcyBhZGRlZCBhIGNsYXVzZSBwcm92aWRpbmcgdGhhdCB0aGUgc2VuYXRvcnMgc2hvdWxkIGNvbWUgZm9yd2FyZCBhbmQgdGFrZSBvYXRoIHRoYXQgdGhleSB3b3VsZCBhYmlkZSBieSB3aGF0c29ldmVyIHRoZSBwZW9wbGUgbWlnaHQgdm90ZSBhbmQgbWFrZSBubyBvcHBvc2l0aW9uIHRvIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2VuYXRlIE1hcml1cyBtYWRlIHByZXRlbmNlIG9mIG9wcG9zaW5nIHRoaXMgcGFydCBvZiB0aGUgbGF3LCBhbmQgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBub3QgdGFrZSB0aGUgb2F0aCwgYW5kIHRoYXQgaGUgdGhvdWdodCBubyBvdGhlciBzZW5zaWJsZSBtYW4gd291bGQ7IGZvciBldmVuIGlmIHRoZSBsYXcgd2VyZSBub3QgYSBiYWQgb25lLCBpdCB3YXMgYW4gaW5zdWx0IHRvIHRoZSBzZW5hdGUgdGhhdCBpdCBzaG91bGQgYmUgY29tcGVsbGVkIHRvIG1ha2Ugc3VjaCBjb25jZXNzaW9ucywgaW5zdGVhZCBvZiBtYWtpbmcgdGhlbSB1bmRlciBwZXJzdWFzaW9uIGFuZCBvZiBpdHMgb3duIGZyZWUgd2lsbC4gSGUgc2FpZCB0aGlzLCBob3dldmVyLCBub3QgYmVjYXVzZSBpdCB3YXMgaGlzIHJlYWwgbWluZCwgYnV0IHRoYXQgaGUgbWlnaHQgY2F0Y2ggTWV0ZWxsdXMgaW4gdGhlIHRvaWxzIG9mIGEgZmF0YWwgdHJpY2suIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoaW1zZWxmIHJlZ2FyZGVkIGx5aW5nIGFzIHBhcnQgb2YgYSBtYW4ncyBleGNlbGxlbmNlIGFuZCBhYmlsaXR5LCBtYWRlIG5vIGFjY291bnQgb2YgaGlzIGFncmVlbWVudHMgd2l0aCB0aGUgc2VuYXRvcnMsIGFuZCBkaWQgbm90IGludGVuZCB0byBrZWVwIHRoZW07IHdoZXJlYXMgaGUga25ldyB0aGF0IE1ldGVsbHVzIHdhcyBhIHN0ZWFkZmFzdCBtYW4sIHdobyB0aG91Z2h0IHdpdGggUGluZGFyIHRoYXQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50cnV0aCBpcyB0aGUgZm91bmRhdGlvbiBvZiBncmVhdCBleGNlbGxlbmNlLDwvcT4gCiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDIyMSAoQm9lY2toKS4gPC9ub3RlPiBhbmQgaGUgdGhlcmVmb3JlIHdpc2hlZCB0byBiaW5kIGhpbSBiZWZvcmVoYW5kIGJ5IGEgc3RhdGVtZW50IHRvIHRoZSBzZW5hdGUgdGhhdCBoZSB3b3VsZCBub3QgdGFrZSB0aGUgb2F0aCwgYW5kIHRoZW4gaGF2ZSBoaXMgcmVmdXNhbCB0byBkbyBzbyBwbHVuZ2UgaGltIGludG8gYSBoYXRyZWQgb24gdGhlIHBhcnQgb2YgdGhlIHBlb3BsZSB0aGF0IGNvdWxkIG5ldmVyIGJlIHJlbW92ZWQuIEFuZCB0aGlzIHdhcyB3aGF0IGNhbWUgdG8gcGFzcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBNZXRlbGx1cyBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIG5vdCB0YWtlIHRoZSBvYXRoLCBhbmQgdGhlIHNlbmF0ZSBicm9rZSB1cCBmb3IgYSB3aGlsZTsgYnV0IGFmdGVyIGEgZmV3IGRheXMgU2F0dXJuaW51cyBzdW1tb25lZCB0aGUgc2VuYXRvcnMgdG8gdGhlIHJvc3RyYSBhbmQgdHJpZWQgdG8gZm9yY2UgdGhlbSB0byB0YWtlIHRoZSBvYXRoLiBXaGVuIE1hcml1cyBjYW1lIGZvcndhcmQgdGhlcmUgd2FzIHNpbGVuY2UsIGFuZCB0aGUgZXllcyBvZiBhbGwgd2VyZSBmYXN0ZW5lZCB1cG9uIGhpbS4gVGhlbiwgYmlkZGluZyBhIGxvbmcgZmFyZXdlbGwgdG8gYWxsIGhpcyBib2FzdGZ1bCBhbmQgaW5zaW5jZXJlIGV4cHJlc3Npb25zIGluIHRoZSBzZW5hdGUsIGhlIHNhaWQgaGlzIHRocm9hdCB3YXMgbm90IGJyb2FkIGVub3VnaCB0byBwcm9ub3VuY2UgYW4gb3BpbmlvbiBvbmNlIGZvciBhbGwgdXBvbiBzbyBpbXBvcnRhbnQgYSBtYXR0ZXIsIGJ1dCB0aGF0IGhlIHdvdWxkIHRha2UgdGhlIG9hdGgsIGFuZCBvYmV5IHRoZSBsYXcsIGlmIGl0IHdhcyBhIGxhdzsgYWRkaW5nIHRoaXMgYml0IG9mIHNvcGhpc3RyeSBhcyBhIGNsb2FrIGZvciBoaXMgc2hhbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUsIHRoZW4sIGRlbGlnaHRlZCBhdCBoaXMgdGFraW5nIHRoZSBvYXRoLCBjbGFwcGVkIHRoZWlyIGhhbmRzIGluIGFwcGxhdXNlLCBidXQgdGhlIG5vYmxlcyB3ZXJlIHRlcnJpYmx5IGRlamVjdGVkIGFuZCBoYXRlZCBNYXJpdXMgZm9yIGhpcyBjaGFuZ2Ugb2YgZnJvbnQuIEFjY29yZGluZ2x5LCBhbGwgdGhlIHNlbmF0b3JzIHRvb2sgdGhlIG9hdGggaW4gb3JkZXIsIHRocm91Z2ggZmVhciBvZiB0aGUgcGVvcGxlLCB1bnRpbCB0aGUgdHVybiBvZiBNZXRlbGx1cyBjYW1lOyBidXQgTWV0ZWxsdXMsIGFsdGhvdWdoIGhpcyBmcmllbmRzIGVhcm5lc3RseSBlbnRyZWF0ZWQgaGltIHRvIHRha2UgdGhlIG9hdGggYW5kIG5vdCBzdWJqZWN0IGhpbXNlbGYgdG8gdGhlIGlycmVwYXJhYmxlIHB1bmlzaG1lbnRzIHdoaWNoIFNhdHVybmludXMgcHJvcG9zZWQgZm9yIHRob3NlIHdobyBzaG91bGQgcmVmdXNlLCB3b3VsZCBub3Qgc3dlcnZlIGZyb20gaGlzIHB1cnBvc2Ugb3IgdGFrZSB0aGUgb2F0aCwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YnV0LCBhZGhlcmluZyB0byBoaXMgcHJpbmNpcGxlcyBhbmQgcHJlcGFyZWQgdG8gc3VmZmVyIGFueSBldmlsIHJhdGhlciB0aGFuIGRvIGEgc2hhbWVmdWwgZGVlZCwgaGUgbGVmdCB0aGUgZm9ydW0sIHNheWluZyB0byB0aG9zZSBhYm91dCBoaW0gdGhhdCB0byBkbyBhIHdyb25nIHRoaW5nIHdhcyBtZWFuLCBhbmQgdG8gZG8gdGhlIHJpZ2h0IHRoaW5nIHdoZW4gdGhlcmUgd2FzIG5vIGRhbmdlciB3YXMgYW55IG1hbidzIHdheSwgYnV0IHRoYXQgdG8gYWN0IGhvbm91cmFibHkgd2hlbiBpdCBpbnZvbHZlZCBkYW5nZXJzIHdhcyBwZWN1bGlhcmx5IHRoZSBwYXJ0IG9mIGEgZ29vZCBhbmQgdHJ1ZSBtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgU2F0dXJuaW51cyBnb3QgYSB2b3RlIHBhc3NlZCB0aGF0IHRoZSBjb25zdWxzIHNob3VsZCBwcm9jbGFpbSBNZXRlbGx1cyBpbnRlcmRpY3RlZCBmcm9tIGZpcmUsIHdhdGVyLCBhbmQgc2hlbHRlcjsgYW5kIHRoZSBtZWFuZXN0IHBhcnQgb2YgdGhlIHBvcHVsYWNlIHN1cHBvcnRlZCB0aGVtIGFuZCB3YXMgcmVhZHkgdG8gcHV0IHRoZSBtYW4gdG8gZGVhdGguIFRoZSBiZXN0IGNpdGl6ZW5zLCBob3dldmVyLCBzeW1wYXRoaXNlZCB3aXRoIE1ldGVsbHVzIGFuZCBjcm93ZGVkIGhhc3RpbHkgYWJvdXQgaGltLCBidXQgaGUgd291bGQgbm90IGFsbG93IGEgZmFjdGlvbiB0byBiZSByYWlzZWQgb24gaGlzIGFjY291bnQsIGFuZCBkZXBhcnRlZCBmcm9tIHRoZSBjaXR5LCBmb2xsb3dpbmcgdGhlIGRpY3RhdGVzIG9mIHBydWRlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5laXRoZXIgbWF0dGVycyB3aWxsIG1lbmQgYW5kIHRoZSBwZW9wbGUgd2lsbCBjaGFuZ2UgdGhlaXIgbWluZHMgYW5kIEkgc2hhbGwgcmV0dXJuIGF0IHRoZWlyIGludml0YXRpb24sIG9yLCBpZiBtYXR0ZXJzIHJlbWFpbiBhcyB0aGV5IGFyZSwgaXQgaXMgYmVzdCB0aGF0IEkgc2hvdWxkIGJlIGF3YXkuPC9xPiBCdXQgd2hhdCBncmVhdCBnb29kd2lsbCBhbmQgZXN0ZWVtIE1ldGVsbHVzIGVuam95ZWQgZHVyaW5nIGhpcyBleGlsZSwgYW5kIGhvdyBoZSBzcGVudCBoaXMgdGltZSBpbiBwaGlsb3NvcGhpY2FsIHN0dWRpZXMgYXQgUmhvZGVzLCB3aWxsIGJlIGJldHRlciB0b2xkIGluIGhpcyBMaWZlLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5ObyBzdWNoIExpZmUgaXMgZXh0YW50LiA8L25vdGU+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBNYXJpdXMsIHdobyB3YXMgZm9yY2VkLCBpbiByZXR1cm4gZm9yIHRoaXMgYXNzaXN0YW5jZSwgdG8gbG9vayBvbiBxdWlldGx5IHdoaWxlIFNhdHVybmludXMgcmFuIHRvIGV4dHJlbWVzIG9mIGRhcmluZyBhbmQgcG93ZXIsIGJyb3VnaHQgYWJvdXQgdW5hd2FyZXMgYSBtaXNjaGllZiB0aGF0IHdhcyBub3QgdG8gYmUgY3VyZWQsIGJ1dCBtYWRlIGl0cyB3YXkgYnkgYXJtcyBhbmQgc2xhdWdodGVyIGRpcmVjdGx5IHRvd2FyZHMgdHlyYW5ueSBhbmQgc3VidmVyc2lvbiBvZiB0aGUgZ292ZXJubWVudC4gQW5kIHNpbmNlIGhlIHN0b29kIGluIGF3ZSBvZiB0aGUgbm9ibGVzLCB3aGlsZSBoZSBjb3VydGVkIHRoZSBmYXZvdXIgb2YgdGltZSBtdWx0aXR1ZGUsIGhlIHdhcyBsZWQgdG8gY29tbWl0IGFuIGFjdCBvZiB0aGUgdXRtb3N0IG1lYW5uZXNzIGFuZCBkdXBsaWNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZSBsZWFkaW5nIG1lbiBoYWQgY29tZSB0byBoaW0gYnkgbmlnaHQgYW5kIHdlcmUgdHJ5aW5nIHRvIGluY2l0ZSBoaW0gYWdhaW5zdCBTYXR1cm5pbnVzLCB3aXRob3V0IHRoZWlyIGtub3dsZWRnZSBoZSBpbnRyb2R1Y2VkIFNhdHVybmludXMgaW50byB0aGUgaG91c2UgYnkgYW5vdGhlciBkb29yOyB0aGVuLCBwcmV0ZW5kaW5nIHRvIGJvdGggcGFydGllcyB0aGF0IGhlIGhhZCBhIGRpYXJyaG9lYSwgaGUgd291bGQgcnVuIGJhY2t3YXJkcyBhbmQgZm9yd2FyZHMgaW4gdGhlIGhvdXNlLCBub3cgdG8gdGhlIG5vYmxlcyBhbmQgbm93IHRvIFNhdHVybmludXMsIHRyeWluZyB0byBpcnJpdGF0ZSBhbmQgYnJpbmcgdGhlbSBpbnRvIGNvbGxpc2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hlbiB0aGUgc2VuYXRlIGFuZCB0aGUga25pZ2h0cyBiZWdhbiB0byBjb21iaW5lIGFuZCBnaXZlIHV0dGVyYW5jZSB0byB0aGVpciBpbmRpZ25hdGlvbiwgaGUgbGVkIGhpcyBzb2xkaWVycyBpbnRvIHRoZSBmb3J1bSwgZm9yY2VkIHRoZSBpbnN1cmdlbnRzIHRvIHRha2UgcmVmdWdlIG9uIHRoZSBDYXBpdG9sLCBhbmQgY29tcGVsbGVkIHRoZW0gdG8gc3VycmVuZGVyIGZvciBsYWNrIG9mIHdhdGVyLiBGb3IgaGUgY3V0IG9mZiB0aGUgd2F0ZXItY29uZHVpdHM7IHdoZXJldXBvbiB0aGV5IGdhdmUgdXAgdGhlIHN0cnVnZ2xlLCBjYWxsZWQgTWFyaXVzLCBhbmQgc3VycmVuZGVyZWQgdGhlbXNlbHZlcyBvbiB3aGF0IHdhcyBjYWxsZWQgdGhlIHB1YmxpYyBmYWl0aC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIGRpZCBhbGwgaGUgY291bGQgdG8gc2F2ZSB0aGUgbWVuLCBidXQgaXQgd2FzIG9mIG5vIGF2YWlsLCBhbmQgd2hlbiB0aGV5IGNhbWUgZG93biBpbnRvIHRoZSBmb3J1bSB0aGV5IHdlcmUgcHV0IHRvIGRlYXRoLiBUaGlzIGFmZmFpciBtYWRlIE1hcml1cyBvYm5veGlvdXMgYWxpa2UgdG8gdGhlIG5vYmxlcyBhbmQgdG8gdGhlIHBlb3BsZSwgYW5kIHdoZW4gdGhlIHRpbWUgZm9yIGVsZWN0aW5nIGNlbnNvcnMgY2FtZSBoZSBkaWQgbm90IHByZXNlbnQgaGltc2VsZiBhcyBhIGNhbmRpZGF0ZSwgYWx0aG91Z2ggZXZlcnlvbmUgZXhwZWN0ZWQgdGhhdCBoZSB3b3VsZCwgYnV0IGFsbG93ZWQgb3RoZXIgYW5kIGluZmVyaW9yIG1lbiB0byBiZSBlbGVjdGVkLCBmb3IgZmVhciB0aGF0IGhlIHdvdWxkIGJlIGRlZmVhdGVkLiBIb3dldmVyLCBoZSB0cmllZCB0byBwdXQgYSBnb29kIGZhY2UgdXBvbiBoaXMgY29uZHVjdCBieSBzYXlpbmcgdGhhdCBoZSB3YXMgdW53aWxsaW5nIHRvIGluY3VyIHRoZSBoYXRyZWQgb2YgbWFueSBjaXRpemVucyBieSBhIHNldmVyZSBleGFtaW5hdGlvbiBpbnRvIHRoZWlyIGxpdmVzIGFuZCBtYW5uZXJzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhIGRlY3JlZSB3YXMgaW50cm9kdWNlZCByZWNhbGxpbmcgTWV0ZWxsdXMgZnJvbSBleGlsZSwgTWFyaXVzIG9wcG9zZWQgaXQgc3Ryb25nbHkgYm90aCBieSB3b3JkIGFuZCBkZWVkLCBidXQgZmluZGluZyBoaXMgZWZmb3J0cyB2YWluLCBhdCBsYXN0IGRlc2lzdGVkOyBhbmQgYWZ0ZXIgdGhlIHBlb3BsZSBoYWQgYWRvcHRlZCB0aGUgbWVhc3VyZSB3aXRoIGFsYWNyaXR5LCB1bmFibGUgdG8gZW5kdXJlIHRoZSBzaWdodCBvZiBNZXRlbGx1cyByZXR1cm5pbmcsIGhlIHNldCBzYWlsIGZvciBDYXBwYWRvY2lhIGFuZCBHYWxhdGlhLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA5OSBCLkMuIDwvbm90ZT4gb3N0ZW5zaWJseSB0byBtYWtlIHRoZSBzYWNyaWZpY2VzIHdoaWNoIGhlIGhhZCB2b3dlZCB0byB0aGUgTW90aGVyIG9mIHRoZSBHb2RzLCBidXQgcmVhbGx5IGhhdmluZyBhbm90aGVyIHJlYXNvbiBmb3IgaGlzIGpvdXJuZXkgd2hpY2ggdGhlIHBlb3BsZSBkaWQgbm90IHN1c3BlY3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCwgdGhhdCBpcywgbm8gbmF0dXJhbCBhcHRpdHVkZSBmb3IgcGVhY2Ugb3IgY2l2aWwgbGlmZSwgYnV0IGhhZCByZWFjaGVkIGhpcyBlbWluZW5jZSBieSBhcm1zLiBBbmQgbm93LCB0aGlua2luZyB0aGF0IGhpcyBpbmZsdWVuY2UgYW5kIHJlcHV0YXRpb24gd2VyZSBncmFkdWFsbHkgZmFkaW5nIGF3YXkgYmVjYXVzZSBvZiBoaXMgaW5hY3Rpdml0eSBhbmQgcXVpZXR1ZGUsIGhlIHNvdWdodCBvY2Nhc2lvbnMgZm9yIG5ldyBlbnRlcnByaXNlcy4gRm9yIGhlIGhvcGVkIHRoYXQgaWYgaGUgc3RpcnJlZCB1cCB0aGUga2luZ3Mgb2YgQXNpYSBhbmQgaW5jaXRlZCBNaXRocmlkYXRlcyB0byBhY3Rpb24sIHdobyB3YXMgZXhwZWN0ZWQgdG8gbWFrZSB3YXIgdXBvbiBSb21lLCBoZSB3b3VsZCBhdCBvbmNlIGJlIGNob3NlbiB0byBsZWFkIHRoZSBSb21hbiBhcm1pZXMgYWdhaW5zdCBoaW0sIGFuZCB3b3VsZCBmaWxsIHRoZSBjaXR5IHdpdGggbmV3IHRyaXVtcGhzLCBhbmQgaGlzIG93biBob3VzZSB3aXRoIFBvbnRpYyBzcG9pbHMgYW5kIHJveWFsIHdlYWx0aC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCB0aG91Z2ggTWl0aHJpZGF0ZXMgdHJlYXRlZCBoaW0gd2l0aCBhbGwgZGVmZXJlbmNlIGFuZCByZXNwZWN0LCBoZSB3b3VsZCBub3QgYmVuZCBvciB5aWVsZCwgYnV0IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCBlaXRoZXIgc3RyaXZlIHRvIGJlIHN0cm9uZ2VyIHRoYW4gUm9tZSwgb3IgZG8gaGVyIGJpZGRpbmcgd2l0aG91dCBhIHdvcmQuPC9xPiBUaGlzIHNwZWVjaCBzdGFydGxlZCB0aGUga2luZywgd2hvIGhhZCBvZnRlbiBoZWFyZCB0aGUgUm9tYW4gc3BlZWNoLCBidXQgdGhlbiBmb3IgdGhlIGZpcnN0IHRpbWUgaW4gYWxsIGl0cyBib2xkbmVzcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uIHJldHVybmluZyB0byBSb21lLCBoZSBidWlsdCBhIGhvdXNlIGZvciBoaW1zZWxmIG5lYXIgdGhlIGZvcnVtLCBlaXRoZXIsIGFzIGhlIGhpbXNlbGYgc2FpZCwgYmVjYXVzZSBoZSB3YXMgdW53aWxsaW5nIHRoYXQgdGhvc2Ugd2hvIHBhaWQgdGhlaXIgcmVzcGVjdHMgdG8gaGltIHNob3VsZCBoYXZlIHRoZSB0cm91YmxlIG9mIGNvbWluZyBhIGxvbmcgZGlzdGFuY2UsIG9yIGJlY2F1c2UgaGUgdGhvdWdodCB0aGF0IGRpc3RhbmNlIHdhcyB0aGUgcmVhc29uIHdoeSBoZSBkaWQgbm90IGhhdmUgbGFyZ2VyIGNyb3dkcyBhdCBoaXMgZG9vciB0aGFuIG90aGVycy4gVGhlIHJlYXNvbiwgaG93ZXZlciwgd2FzIG5vdCBvZiB0aGlzIG5hdHVyZTsgaXQgd2FzIHJhdGhlciBoaXMgaW5mZXJpb3JpdHkgdG8gb3RoZXJzIGluIHRoZSBncmFjZXMgb2YgaW50ZXJjb3Vyc2UgYW5kIGluIHBvbGl0aWNhbCBoZWxwZnVsbmVzcywgd2hpY2ggY2F1c2VkIGhpbSB0byBiZSBuZWdsZWN0ZWQsIGxpa2UgYW4gaW5zdHJ1bWVudCBvZiB3YXIgaW4gdGltZSBvZiBwZWFjZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T2YgYWxsIHRob3NlIHdobyBlY2xpcHNlZCBoaW0gaW4gcG9wdWxhciBlc3RlZW0gaGUgd2FzIG1vc3QgdmV4ZWQgYW5kIGFubm95ZWQgYnkgU3VsbGEsIHdob3NlIHJpc2UgdG8gcG93ZXIgd2FzIGR1ZSB0byB0aGUgamVhbG91c3kgd2hpY2ggdGhlIG5vYmxlcyBmZWx0IHRvd2FyZHMgTWFyaXVzLCBhbmQgd2hvIHdhcyBtYWtpbmcgaGlzIHF1YXJyZWxzIHdpdGggTWFyaXVzIHRoZSBiYXNpcyBvZiBoaXMgcG9saXRpY2FsIGFjdGl2aXR5LiBBbmQgd2hlbiBCb2NjaHVzIHRoZSBOdW1pZGlhbiwgd2hvIGhhZCBiZWVuIGRlc2lnbmF0ZWQgYW4gYWxseSBvZiB0aGUgUm9tYW5zLCBzZXQgdXAgdHJvcGh5LWJlYXJpbmcgVmljdG9yaWVzIG9uIHRoZSBDYXBpdG9sLCBhbmQgYnkgdGhlaXIgc2lkZSBnaWxkZWQgZmlndXJlcyByZXByZXNlbnRpbmcgSnVndXJ0aGEgc3VycmVuZGVyZWQgYnkgaGltIHRvIFN1bGxhLCBNYXJpdXMgd2FzIHRyYW5zcG9ydGVkIHdpdGggcmFnZSBhbmQgZnVyeSB0byBzZWUgU3VsbGEgdGh1cyBhcHByb3ByaWF0aW5nIHRvIGhpbXNlbGYgdGhlIGdsb3J5IG9mIGhpcyBhY2hpZXZlbWVudHMsIGFuZCB3YXMgbWFraW5nIHByZXBhcmF0aW9ucyB0byB0ZWFyIGRvd24gdGhlIHZvdGl2ZSBvZmZlcmluZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSB0b28gd2FzIGZ1cmlvdXMsIGFuZCBjaXZpbCBkaXNzZW5zaW9uIHdhcyBqdXN0IG9uIHRoZSBwb2ludCBvZiBicmVha2luZyBvdXQsIHdoZW4gaXQgd2FzIHN0b3BwZWQgYnkgdGhlIFNvY2lhbCBXYXIsIHdoaWNoIHN1ZGRlbmx5IGJ1cnN0IHVwb24gdGhlIGNpdHkuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjkwLTg5IEIuQy4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gNi4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TdWxsYSA8L3RpdGxlPiwgdmkuIDEgZi4gPC9iaWJsPiAKICAgICAgICAgICAgPC9ub3RlPiBUaGF0IGlzLCB0aGUgbW9zdCB3YXJsaWtlIGFuZCBtb3N0IG51bWVyb3VzIG9mIHRoZSBJdGFsaWFuIHBlb3BsZXMgY29tYmluZWQgYWdhaW5zdCBSb21lLCBhbmQgY2FtZSB3aXRoaW4gYSBsaXR0bGUgb2YgZGVzdHJveWluZyBoZXIgc3VwcmVtYWN5LCBzaW5jZSB0aGV5IHdlcmUgbm90IG9ubHkgc3Ryb25nIGluIGFybXMgYW5kIG1lbiwgYnV0IGFsc28gaGFkIGdlbmVyYWxzIHdob3NlIGRhcmluZyBhbmQgYWJpbGl0eSB3ZXJlIGFtYXppbmcgYW5kIG1hZGUgdGhlbSBhIG1hdGNoIGZvciB0aGUgUm9tYW5zLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGlzIHdhciwgd2hpY2ggd2FzIHZhcmllZCBpbiBpdHMgZXZlbnRzIGFuZCBtb3N0IGNoYW5nZWZ1bCBpbiBpdHMgZm9ydHVuZXMsIGFkZGVkIG11Y2ggdG8gU3VsbGEncyByZXB1dGF0aW9uIGFuZCBwb3dlciwgYnV0IHRvb2sgYXdheSBhcyBtdWNoIGZyb20gTWFyaXVzLiBGb3IgaGUgd2FzIHNsb3cgaW4gbWFraW5nIGhpcyBhdHRhY2tzLCBhbmQgYWx3YXlzIGdpdmVuIHRvIGhlc2l0YXRpb24gYW5kIGRlbGF5LCB3aGV0aGVyIGl0IHdhcyB0aGF0IG9sZCBhZ2UgaGFkIHF1ZW5jaGVkIGhpcyB3b250ZWQgZW5lcmd5IGFuZCBmaXJlIChmb3IgaGUgd2FzIG5vdyBwYXN0IGhpcyBzaXh0eS1zaXh0aCB5ZWFyKSwgb3IgdGhhdCwgYXMgaGUgaGltc2VsZiBzYWlkLCBhIGZlZWxpbmcgb2Ygc2hhbWUgbGVkIGhpbSB0byBnbyBiZXlvbmQgaGlzIHBvd2VycyBpbiB0cnlpbmcgdG8gZW5kdXJlIHRoZSBoYXJkc2hpcHMgb2YgdGhlIGNhbXBhaWduIHdoZW4gaGlzIG5lcnZlcyB3ZXJlIGRpc2Vhc2VkIGFuZCBoaXMgYm9keSB1bmZpdCBmb3Igd29yay4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgZXZlbiB0aGVuIGhlIHdvbiBhIGdyZWF0IHZpY3RvcnkgaW4gd2hpY2ggaGUgc2xldyBzaXggdGhvdXNhbmQgb2YgdGhlIGVuZW15OyBhbmQgaGUgbmV2ZXIgYWxsb3dlZCB0aGVtIHRvIGdldCBhIGdyaXAgdXBvbiBoaW0sIGJ1dCBldmVuIHdoZW4gaGUgd2FzIGhlbW1lZCBhYm91dCB3aXRoLXRyZW5jaGVzIGJpZGVkIGhpcyB0aW1lLCBhbmQgd2FzIG5vdCB1bmR1bHkgaXJyaXRhdGVkIGJ5IHRoZWlyIGluc3VsdHMgYW5kIGNoYWxsZW5nZXMuIFdlIGFyZSB0b2xkIHRoYXQgUHVibGl1cyBTaWxvLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qb21wYWVkaXVzIFNpbG8sIGxlYWRlciBvZiB0aGUgTWFyc2kuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDIuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byBNaW5vciA8L3RpdGxlPiwgaWkuIDEtNCA8L2JpYmw+LiA8L25vdGU+IHdobyBoYWQgdGhlIGdyZWF0ZXN0IGF1dGhvcml0eSBhbmQgcG93ZXIgYW1vbmcgdGhlIGVuZW15LCBvbmNlIHNhaWQgdG8gaGltLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPklmIHRob3UgYXJ0IGEgZ3JlYXQgZ2VuZXJhbCwgTWFyaXVzLCBjb21lIGRvd24gYW5kIGZpZ2h0IGl0IG91dCB3aXRoIHVzPC9xPjsgdG8gd2hpY2ggTWFyaXVzIGFuc3dlcmVkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5heSwgYnV0IGRvIHRob3UsIGlmIHRob3UgYXJ0IGEgZ3JlYXQgZ2VuZXJhbCwgZm9yY2UgbWUgdG8gZmlnaHQgaXQgb3V0IHdpdGggeW91IGFnYWluc3QgbXkgd2lsbC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGF0IGFub3RoZXIgdGltZSwgd2hlbiB0aGUgZW5lbXkgaGFkIGdpdmVuIGhpbSBhbiBvcHBvcnR1bml0eSB0byBhdHRhY2sgdGhlbSwgYnV0IHRoZSBSb21hbnMgaGFkIHBsYXllZCB0aGUgY293YXJkLCBhbmQgYm90aCBzaWRlcyBoYWQgd2l0aGRyYXduLCBoZSBjYWxsZWQgYW4gYXNzZW1ibHkgb2YgaGlzIHNvbGRpZXJzIGFuZCBzYWlkIHRvIHRoZW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBkbyBub3Qga25vdyB3aGV0aGVyIHRvIGNhbGwgdGhlIGVuZW15IG9yIHlvdSB0aGUgZ3JlYXRlciBjb3dhcmRzOyBmb3IgdGhleSB3ZXJlIG5vdCBhYmxlIHRvIHNlZSB5b3VyIGJhY2tzLCBub3IgeW91IHRoZWlyIG5hcGVzLjwvcT4gQXQgbGFzdCwgaG93ZXZlciwgaGUgZ2F2ZSB1cCBoaXMgY29tbWFuZCwgb24gdGhlIGdyb3VuZCB0aGF0IGhpcyBpbmZpcm1pdGllcyBtYWRlIGhpbSBxdWl0ZSBpbmNhcGFibGUgb2YgZXhlcmNpc2luZyBpdC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IHdoZW4gdGhlIEl0YWxpYW5zIGhhZCBhdCBsYXN0IG1hZGUgdGhlaXIgc3VibWlzc2lvbiwgYW5kIG1hbnkgcGVyc29ucyBhdCBSb21lIHdlcmUgc3VpbmcgZm9yIHRoZSBjb21tYW5kIGluIHRoZSBNaXRocmlkYXRpYyB3YXIsIHdpdGggdGhlIGFpZCBvZiB0aGUgcG9wdWxhciBsZWFkZXJzLCBjb250cmFyeSB0byBhbGwgZXhwZWN0YXRpb24gdGhlIHRyaWJ1bmUgU3VscGljaXVzLCBhIG1vc3QgYXVkYWNpb3VzIG1hbjsgYnJvdWdodCBNYXJpdXMgZm9yd2FyZCBhbmQgcHJvcG9zZWQgdG8gbWFrZSBoaW0gcHJvLWNvbnN1bCBpbiBjb21tYW5kIGFnYWluc3QgTWl0aHJpZGF0ZXMuIFRoZSBwZW9wbGUgd2VyZSBkaXZpZGVkIGluIG9waW5pb24sIHNvbWUgcHJlZmVycmluZyBNYXJpdXMsIGFuZCBvdGhlcnMgY2FsbGluZyBmb3IgU3VsbGEgYW5kIGJpZGRpbmcgTWFyaXVzIGdvIHRvIHRoZSB3YXJtIGJhdGhzIGF0IEJhaWFlIGFuZCBsb29rIG91dCBmb3IgaGlzIGhlYWx0aCwgc2luY2UgaGUgd2FzIHdvcm4gb3V0IHdpdGggb2xkIGFnZSBhbmQgcmhldW1zLCBhcyBoZSBoaW1zZWxmIHNhaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhdCBCYWlhZSwgbmVhciBDYXBlIE1pc2VudW0sIE1hcml1cyBvd25lZCBhbiBleHBlbnNpdmUgaG91c2UsIHdoaWNoIGhhZCBhcHBvaW50bWVudHMgbW9yZSBsdXh1cmlvdXMgYW5kIGVmZmVtaW5hdGUgdGhhbiBiZWNhbWUgYSBtYW4gd2hvIGhhZCB0YWtlbiBhY3RpdmUgcGFydCBpbiBzbyBtYW55IHdhcnMgYW5kIGNhbXBhaWducy4gVGhpcyBob3VzZSwgd2UgYXJlIHRvbGQsIENvcm5lbGlhIGJvdWdodCBmb3Igc2V2ZW50eS1maXZlIHRob3VzYW5kIGRyYWNobWFzOyBhbmQgbm90IGxvbmcgYWZ0ZXJ3YXJkcyBMdWNpdXMgTHVjdWxsdXMgcHVyY2hhc2VkIGl0IGZvciB0d28gbWlsbGlvbiBmaXZlIGh1bmRyZWQgdGhvdXNhbmQuIFNvIHF1aWNrbHkgZGlkIGxhdmlzaCBleHBlbmRpdHVyZSBzcHJpbmcgdXAsIGFuZCBzbyBncmVhdCBhbiBpbmNyZWFzZSBpbiBsdXh1cnkgZGlkIGxpZmUgaW4gdGhlIGNpdHkgdGFrZSBvbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzLCBob3dldmVyLCBzaG93aW5nIGEgc3Bpcml0IG9mIGtlZW4gZW11bGF0aW9uIHRoYXQgbWlnaHQgaGF2ZSBjaGFyYWN0ZXJpemVkIGEgeW91dGgsIHNob29rIG9mZiBvbGQgYWdlIGFuZCBpbmZpcm1pdHkgYW5kIHdlbnQgZG93biBkYWlseSBpbnRvIHRoZS4gQ2FtcHVzIE1hcnRpdXMsIHdoZXJlIGhlIGV4ZXJjaXNlZCBoaW1zZWxmIHdpdGggdGhlIHlvdW5nIG1lbiBhbmQgc2hvd2VkIHRoYXQgaGUgd2FzIHN0aWxsIGFnaWxlIGluIGFybXMgYW5kIGNhcGFibGUgb2YgZmVhdHMgb2YgaG9yc2VtYW5zaGlwLCBhbHRob3VnaCBoaXMgYnVsayB3YXMgbm90IHdlbGwgc2V0IHVwIGluIGhpcyBvbGQgYWdlLCBidXQgcmFuIHRvIGNvcnB1bGVuY2UgYW5kIHdlaWdodC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIHRoZW4sIHdlcmUgcGxlYXNlZCB0byBoYXZlIGhpbSB0aHVzIGVuZ2FnZWQsIGFuZCB3b3VsZCBnbyBkb3duIGludG8gdGhlIENhbXB1cyBhbmQgd2l0bmVzcyBoaXMgZW11bGF0aW9uIGluIGNvbXBldGl0aXZlIGNvbnRlc3RzOyBidXQgdGhlIGJldHRlciBwYXJ0IHdlcmUgbW92ZWQgdG8gcGl0eSBhdCB0aGUgc2lnaHQgb2YgaGlzIGdyZWVkIGFuZCBhbWJpdGlvbiwgYmVjYXVzZSwgdGhvdWdoIGhlIGhhZCByaXNlbiBmcm9tIHBvdmVydHkgdG8gdGhlIGdyZWF0ZXN0IHdlYWx0aCBhbmQgZnJvbSBvYnNjdXJpdHkgdG8gdGhlIGhpZ2hlc3QgcGxhY2UsIGhlIGtuZXcgbm90IGhvdyB0byBzZXQgYm91bmRzIHRvIGhpcyBnb29kIGZvcnR1bmUsIGFuZCB3YXMgbm90IGNvbnRlbnQgdG8gYmUgYWRtaXJlZCBhbmQgZW5qb3kgcXVpZXRseSB3aGF0IGhlIGhhZCwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGFzIGlmIGluIG5lZWQgb2YgYWxsIHRoaW5ncywgYW5kIGFmdGVyIHdpbm5pbmcgdHJpdW1waHMgYW5kIGZhbWUsIHdhcyBzZXR0aW5nIG91dCwgd2l0aCBhbGwgaGlzIHllYXJzIHVwb24gaGltLCBmb3IgQ2FwcGFkb2NpYSBhbmQgdGhlIEV1eGluZSBzZWEsIHRvIGZpZ2h0IGl0IG91dCB3aXRoIEFyY2hlbGHDvHMgYW5kIE5lb3B0b2xlbXVzLHRoZSBzYXRyYXBzIG9mIE1pdGhyaWRhdGVzLiBBbmQgdGhlIGp1c3RpZmljYXRpb24gZm9yIHRoaXMgd2hpY2ggTWFyaXVzIG9mZmVyZWQgd2FzIHRob3VnaHQgdG8gYmUgYWx0b2dldGhlciBzaWxseTsgaGUgc2FpZCwgbmFtZWx5LCB0aGF0IGhlIHdpc2hlZCB0byB0YWtlIHBhcnQgcGVyc29uYWxseSBpbiB0aGUgY2FtcGFpZ24gaW4gb3JkZXIgdG8gZ2l2ZSBoaXMgc29uIGEgbWlsaXRhcnkgdHJhaW5pbmcuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCVRoZXNlIHRoaW5ncyBicm91Z2h0IHRvIGEgaGVhZCB0aGUgc2VjcmV0IGRpc2Vhc2UgZnJvbSB3aGljaCB0aGUgc3RhdGUgaGFkIGxvbmcgYmVlbiBzdWZmZXJpbmcsIGFuZCBNYXJpdXMgZm91bmQgYSBtb3N0IHN1aXRhYmxlIGluc3RydW1lbnQgZm9yIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgY29tbW9ud2VhbHRoIGluIHRoZSBhdWRhY2l0eSBvZiBTdWxwaWNpdXMsIHdobyB3YXMgaW4gYWxsIHRoaW5ncyBhbiBhZG1pcmVyIGFuZCBhbiBpbWl0YXRvciBvZiBTYXR1cm5pbnVzLCBleGNlcHQgdGhhdCBoZSBjaGFyZ2VkIGhpbSB3aXRoIHRpbWlkaXR5IGFuZCBoZXNpdGF0aW9uIGluIGhpcyBwb2xpdGljYWwgbWVhc3VyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1bHBpY2l1cyBoaW1zZWxmIHdhcyBub3QgYSBtYW4gb2YgaGVzaXRhdGlvbiwgYnV0IGtlcHQgc2l4IGh1bmRyZWQgb2YgdGhlIEtuaWdodHMgYWJvdXQgaGltIGFzIGEgYm9keS1ndWFyZCwgd2hpY2ggaGUgY2FsbGVkIGhpcyBhbnRpLXNlbmF0ZTsgaGUgYWxzbyBtYWRlIGFuIGF0dGFjayB3aXRoIGFybWVkIG1lbiB1cG9uIHRoZSBjb25zdWxzIGFzIHRoZXkgd2VyZSBob2xkaW5nIGFuIGFzc2VtYmx5LCBhbmQgd2hlbiBvbmUgb2YgdGhlbSBmbGVkIGZyb20gdGhlIGZvcnVtLCBTdWxwaWNpdXMgc2VpemVkIGhpcyBzb24gYW5kIGJ1dGNoZXJlZCBoaW07IFN1bGxhLCBob3dldmVyLCB0aGUgb3RoZXIgY29uc3VsLCBhcyBoZSB3YXMgYmVpbmcgcHVyc3VlZCBwYXN0IHRoZSBob3VzZSBvZiBNYXJpdXMsIGRpZCB3aGF0IG5vIG9uZSB3b3VsZCBoYXZlIGV4cGVjdGVkIGFuZCBidXJzdCBpbnRvIHRoZSBob3VzZS4gSGlzIHB1cnN1ZXJzIHJhbiBwYXN0IHRoZSBob3VzZSBhbmQgdGhlcmVmb3JlIG1pc3NlZCBoaW0sIGFuZCBpdCBpcyBzYWlkIHRoYXQgTWFyaXVzIGhpbXNlbGYgc2VudCBoaW0gb2ZmIHNhZmVseSBieSBhbm90aGVyIGRvb3Igc28gdGhhdCBoZSBjYW1lIGluIGhhc3RlIHRvIGhpcyBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3VsbGEgaGltc2VsZiwgaW4gaGlzIE1lbW9pcnMsIHNheXMgaGUgZGlkIG5vdCBmbHkgZm9yIHJlZnVnZSB0byB0aGUgaG91c2Ugb2YgTWFyaXVzLCBidXQgd2l0aGRyZXcgdGhpdGhlciBpbiBvcmRlciB0byBjb25zdWx0IHdpdGggTWFyaXVzIGFib3V0IHRoZSBzdGVwIHdoaWNoIFN1bHBpY2l1cyB3YXMgdHJ5aW5nIHRvIGZvcmNlIGhpbSB0byB0YWtlIChieSBzdXJyb3VuZGluZyBoaW0gd2l0aCBkcmF3biBzd29yZHMgYW5kIGRyaXZpbmcgaGltIHRvIHRoZSBob3VzZSBvZiBNYXJpdXMpLCBhbmQgdGhhdCBmaW5hbGx5IGhlIHdlbnQgZnJvbSB0aGVyZSB0byB0aGUgZm9ydW0gYW5kIHJlc2NpbmRlZCB0aGUgY29uc3VsYXIgZGVjcmVlIGZvciB0aGUgc3VzcGVuc2lvbiBvZiBwdWJsaWMgYnVzaW5lc3MsIGFzIFN1bHBpY2l1cyBhbmQgaGlzIHBhcnR5IGRlbWFuZGVkLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVzZSBwcm9jZWVkaW5ncyBhcmUgbXVjaCBtb3JlIGNsZWFybHkgbmFycmF0ZWQgaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA4LjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPlN1bGxhIDwvdGl0bGU+LCBjaGFwdGVyIHZpaWkgPC9iaWJsPi4gQ2YuIGFsc28gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS43LjU1IiB2YWxpZD0ieWVzIj5BcHBpYW4gPHRpdGxlPkJlbGwuIENpdiA8L3RpdGxlPiBpLiA1NSA8L2JpYmw+LiA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIGhhZCBiZWVuIGRvbmUsIFN1bHBpY2l1cywgd2hvIHdhcyBub3cgbWFzdGVyIG9mIHRoZSBzaXR1YXRpb24sIGdvdCB0aGUgY29tbWFuZCBjb25mZXJyZWQgdXBvbiBNYXJpdXMgYnkgdm90ZSBvZiB0aGUgcGVvcGxlOyBhbmQgTWFyaXVzLCB3aG8gd2FzIG1ha2luZyBoaXMgcHJlcGFyYXRpb25zIGZvciBkZXBhcnR1cmUsIHNlbnQgb3V0IHR3byBtaWxpdGFyeSB0cmlidW5lcyB0byB0YWtlIG92ZXIgdGhlIGNvbW1hbmQgb2YgU3VsbGEncyBhcm15LiBTdWxsYSwgaG93ZXZlciwgY2FsbGVkIHVwb24gaGlzIHNvbGRpZXJzICh3aG8gd2VyZSBubyBmZXdlciB0aGFuIHRoaXJ0eS1maXZlIHRob3VzYW5kIGxlZ2lvbmFyaWVzKSB0byByZXNlbnQgdGhpcywgYW5kIGxlZCB0aGVtIGZvcnRoIGFnYWluc3QgUm9tZS4gSGlzIHNvbGRpZXJzIGFsc28gZmVsbCB1cG9uIHRoZSB0cmlidW5lcyB3aG9tIE1hcml1cyBoYWQgc2VudCBhbmQgc2xldyB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzLCB0b28sIHB1dCB0byBkZWF0aCBtYW55IG9mIFN1bGxhJ3MgZnJpZW5kcyBpbiBSb21lLCBhbmQgcHJvY2xhaW1lZCBmcmVlZG9tIHRvIHRoZSBzbGF2ZXMgaWYgdGhleSB3b3VsZCBmaWdodCBvbiBoaXMgc2lkZS4gSXQgaXMgc2FpZCwgaG93ZXZlciwgdGhhdCBvbmx5IHRocmVlIG9mIHRoZW0gam9pbmVkIGhpcyByYW5rcywgYW5kIGFmdGVyIGEgZmVlYmxlIHJlc2lzdGFuY2UgdG8gU3VsbGEncyBlbnRyeSBpbnRvIHRoZSBjaXR5IGhlIHdhcyBzcGVlZGlseSBkcml2ZW4gb3V0IGFuZCB0b29rIHRvIGZsaWdodC4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTEuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGU+U3VsbGEgPC90aXRsZT4sIGNoYXB0ZXIgeGkgPC9iaWJsPi4gPC9ub3RlPiBBcyBzb29uIGFzIGhlIGhhZCBtYWRlIGhpcyBlc2NhcGUgZnJvbSB0aGUgY2l0eSBoaXMgY29tcGFuaW9ucyB3ZXJlIHNjYXR0ZXJlZCwgYW5kIHNpbmNlIGl0IHdhcyBkYXJrLCBoZSB0b29rIHJlZnVnZSBhdCBvbmUgb2YgaGlzIGZhcm1zdGVhZHMsIGNhbGxlZCBTb2xvbml1bS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBzZW50IGhpcyBzb24gdG8gZ2V0IHByb3Zpc2lvbnMgZnJvbSB0aGUgZXN0YXRlIG9mIGhpcyBmYXRoZXItaW4tbGF3LCBNdWNpdXMsIHdoaWNoIHdhcyBub3QgZmFyIG9mZiwgd2hpbGUgaGUgaGltc2VsZiB3ZW50IGRvd24gdG8gdGhlIGNvYXN0IGF0IE9zdGlhLCB3aGVyZSBhIGZyaWVuZCBvZiBoaXMsIE51bWVyaXVzLCBoYWQgcHJvdmlkZWQgYSB2ZXNzZWwgZm9yIGhpbS4gVGhlbiwgd2l0aG91dCB3YWl0aW5nIGZvciBoaXMgc29uLCBidXQgdGFraW5nIGhpcyBzdGVwLXNvbiBHcmFuaXVzIHdpdGggaGltLCBoZSBzZXQgc2FpbC4gVGhlIHlvdW5nZXIgTWFyaXVzIHJlYWNoZWQgdGhlIGVzdGF0ZSBvZiBNdWNpdXMsIGJ1dCBhcyBoZSB3YXMgZ2V0dGluZyBzdXBwbGllcyBhbmQgcGFja2luZyB0aGVtIHVwLCBkYXkgb3ZlcnRvb2sgaGltIGFuZCBoZSBkaWQgbm90IGFsdG9nZXRoZXIgZXNjYXBlIHRoZSB2aWdpbGFuY2Ugb2YgaGlzIGVuZW1pZXM7IGZvciBzb21lIGhvcnNlbWVuIGNhbWUgcmlkaW5nIHRvd2FyZHMgdGhlIHBsYWNlLCBtb3ZlZCBieSBzdXNwaWNpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG92ZXJzZWVyIG9mIHRoZSBmYXJtIHNhdyB0aGVtIGNvbWluZywgaGUgaGlkIE1hcml1cyBpbiBhIHdhZ2dvbiBsb2FkZWQgd2l0aCBiZWFucywgeW9rZWQgdXAgaGlzIG94ZW4sIGFuZCBtZXQgdGhlIGhvcnNlbWVuIGFzIGhlIHdhcyBkcml2aW5nIHRoZSB3YWdnb24gdG8gdGhlIGNpdHkuIEluIHRoaXMgd2F5IHlvdW5nIE1hcml1cyB3YXMgY29udmV5ZWQgdG8gdGhlIGhvdXNlIG9mIGhpcyB3aWZlLCB3aGVyZSBoZSBnb3Qgd2hhdCBoZSB3YW50ZWQsIGFuZCB0aGVuIGJ5IG5pZ2h0IGNhbWUgdG8gdGhlIHNlYSwgYm9hcmRlZCBhIHNoaXAgdGhhdCB3YXMgYm91bmQgZm9yIEFmcmljYSwgYW5kIGNyb3NzZWQgb3Zlci4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBlbGRlciBNYXJpdXMsIGFmdGVyIHB1dHRpbmcgdG8gc2VhIHdhcyBib3JuZSBieSBhIGZhdm91cmluZyB3aW5kIGFsb25nIHRoZSBjb2FzdCBvZiBJdGFseTsgYnV0IHNpbmNlIGhlIHdhcyBhZnJhaWQgb2Ygb25lIEdlbWluaXVzLCB3aG8gd2FzIGEgcG93ZXJmdWwgbWFuIGluIFRlcnJhY2luYSBhbmQgYW4gZW5lbXkgb2YgaGlzLCBoZSB0b2xkIGhpcyBzYWlsb3JzIHRvIGtlZXAgY2xlYXIgb2YgVGVycmFjaW5hLiBUaGUgc2FpbG9ycyB3ZXJlIHdpbGxpbmcgZW5vdWdoIHRvIGRvIGFzIGhlIHdpc2hlZCwgYnV0IHRoZSB3aW5kIHZlZXJlZCByb3VuZCBhbmQgYmxldyB0b3dhcmRzIHRoZSBzaG9yZSwgYnJpbmdpbmcgaW4gYSBoZWF2eSBzdXJnZSwgYW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgdGhlIHZlc3NlbCB3b3VsZCBub3QgaG9sZCBvdXQgYWdhaW5zdCB0aGUgYmVhdGluZyBvZiB0aGUgd2F2ZXMgYmVzaWRlcywgTWFyaXVzIHdhcyBpbiBhIHdyZXRjaGVkIHBsaWdodCBmcm9tIHNlYS1zaWNrbmVzcywgYW5kIHRoZXJlZm9yZSB0aGV5IG1hZGUgdGhlaXIgd2F5LCB0aG91Z2ggd2l0aCBkaWZmaWN1bHR5LCB0byB0aGUgY29hc3QgbmVhciBDaXJjZWlpLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBhcyB0aGUgc3Rvcm0gd2FzIGluY3JlYXNpbmcgYW5kIHRoZWlyIHByb3Zpc2lvbnMgd2VyZSBmYWlsaW5nLCB0aGV5IGxhbmRlZCBmcm9tIHRoZSB2ZXNzZWwgYW5kIHdhbmRlcmVkIGFib3V0LiBUaGV5IGhhZCBubyBkZWZpbml0ZSBvYmplY3QgaW4gdmlldywgYnV0LCBhcyBpcyB1c3VhbCBpbiBjYXNlcyBvZiBncmVhdCBwZXJwbGV4aXR5LCBzb3VnaHQgYWx3YXlzIHRvIGVzY2FwZSB0aGUgcHJlc2VudCBldmlsIGFzIHRoZSBtb3N0IGdyaWV2b3VzIGFuZCBmaXhlZCB0aGVpciBob3BlcyBvbiB0aGUgdW5rbm93biBmdXR1cmUuIEZvciB0aGUgbGFuZCB3YXMgdGhlaXIgZW5lbXksIGFuZCB0aGUgc2VhIGFuIGVuZW15IGFzIHdlbGw7IHRoZXkgd2VyZSBhZnJhaWQgdGhleSBtaWdodCBmYWxsIGluIHdpdGggbWVuLCBhbmQgdGhleSB3ZXJlIGFmcmFpZCB0aGV5IG1pZ2h0IG5vdCBmYWxsIGluIHdpdGggbWVuIGJlY2F1c2UgdGhleSBoYWQgbm8gcHJvdmlzaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgbGF0ZSBpbiB0aGUgZGF5IHRoZXkgY2FtZSB1cG9uIGEgZmV3IGhlcmRzbWVuOyB0aGVzZSBoYWQgbm90aGluZyB0byBnaXZlIHRoZW0gaW4gdGhlaXIgbmVlZCwgYnV0IHRoZXkgcmVjb2duaXplZCBNYXJpdXMgYW5kIGJhZGUgaGltIGdvIGF3YXkgYXMgZmFzdCBhcyBoZSBjb3VsZDsgZm9yIGEgbGl0dGxlIHdoaWxlIGJlZm9yZSBudW1lcm91cyBob3JzZW1lbiBoYWQgYmVlbiBzZWVuIHJpZGluZyBhYm91dCB0aGVyZSBpbiBzZWFyY2ggb2YgaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaHVzIGF0IGhpcyB3aXRzJyBlbmQsIGFuZCwgd2hhdCB3YXMgd29yc3Qgb2YgYWxsLCBoaXMgY29tcGFuaW9ucyBmYWludGluZyB3aXRoIGh1bmdlciwgaGUgdHVybmVkIGFzaWRlIGZvciB0aGUgd2hpbGUgZnJvbSB0aGUgcm9hZCwgcGx1bmdlZCBpbnRvIGEgZGVlcCBmb3Jlc3QsIGFuZCB0aGVyZSBzcGVudCB0aGUgbmlnaHQgaW4gZ3JlYXQgZGlzdHJlc3MuIEJ1dCB0aGUgbmV4dCBkYXksIGNvbXBlbGxlZCBieScgd2FudCwgYW5kIHdpc2hpbmcgdG8gbWFrZSB1c2Ugb2YgaGlzIHN0cmVuZ3RoIGJlZm9yZSBpdCBmYWlsZWQgaGltIGFsdG9nZXRoZXIsIGhlIHdhbmRlcmVkIGFsb25nIHRoZSBzaG9yZSwgdHJ5aW5nIHRvIGVuY291cmFnZSBoaXMgY29tcGFuaW9ucywgYW5kIGJlZ2dpbmcgdGhlbSBub3QgdG8gZ2l2ZSB1cCB0aGUgc3RydWdnbGUgYmVmb3JlIGhpcyBsYXN0IGhvcGUgY291bGQgYmUgcmVhbGl6ZWQsIGZvciB3aGljaCBoZSB3YXMgc3RpbGwgcmVzZXJ2aW5nIGhpbXNlbGYgaW4gcmVsaWFuY2Ugb24gYW5jaWVudCBwcm9waGVjaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCB0aGF0IGlzLCBoZSB3YXMgcXVpdGUgeW91bmcgYW5kIGxpdmluZyBpbiB0aGUgY291bnRyeSwgaGUgaGFkIGNhdWdodCBpbiBoaXMgY2xvYWsgYSBmYWxsaW5nIGVhZ2xlJ3MgbmVzdCwgd2hpY2ggaGFkIHNldmVuIHlvdW5nIG9uZXMgaW4gaXQ7IGF0IHNpZ2h0IG9mIHRoaXMsIGhpcyBwYXJlbnRzIHdlcmUgYW1hemVkLCBhbmQgbWFkZSBlbnF1aXJpZXMgb2YgdGhlIHNlZXJzLCB3aG8gdG9sZCB0aGVtIHRoYXQgdGhlaXIgc29uIHdvdWxkIGJlIG1vc3QgaWxsdXN0cmlvdXMgb2YgbWVuLCBhbmQgd2FzIGRlc3RpbmVkIHRvIHJlY2VpdmUgdGhlIGhpZ2hlc3QgY29tbWFuZCBhbmQgcG93ZXIgc2V2ZW4gdGltZXMuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lIHNheSB0aGF0IHRoaXMgcmVhbGx5IGhhcHBlbmVkIHRvIE1hcml1czsgYnV0IG90aGVycyBzYXkgdGhhdCB0aG9zZSB3aG8gaGVhcmQgdGhlIHN0b3J5IGZyb20gaGltIGF0IHRoaXMgdGltZSBhbmQgZHVyaW5nIHRoZSByZXN0IG9mIGhpcyBmbGlnaHQsIGJlbGlldmVkIGl0LCBhbmQgcmVjb3JkZWQgaXQsIHRob3VnaCBpdCB3YXMgd2hvbGx5IGZhYnVsb3VzLiBGb3IsIHRoZXkgc2F5LCBhbiBlYWdsZSBkb2VzIG5vdCBsYXkgbW9yZSB0aGFuIHR3byBlZ2dzIGF0IG9uZSB0aW1lLCBhbmQgTXVzYWV1cyBhbHNvIHdhcyB3cm9uZyB3aGVuLCBzcGVha2luZyBvZiB0aGUgZWFnbGUsIGhlIHNheXM6IAoJCQkJPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5UaHJlZSBpbmRlZWQgc2hlIGxheWV0aCwgYW5kIHR3byBoYXRjaGV0aCwgYnV0IG9uZSBvbmx5IGRvdGggc2hlIGZlZWQuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgMjEgKEtpbmtlbCwgPHRpdGxlPkVwLiBHcmFlYy4gRnJhZy4gPC90aXRsZT4sIHAuIDIyOSkuIDwvbm90ZT4KCQkJCUhvd2V2ZXIsIHRoYXQgTWFyaXVzLCBkdXJpbmcgaGlzIGZsaWdodCBhbmQgaW4gaGlzIGV4dHJlbWVzdCBkaWZmaWN1bHRpZXMsIG9mdGVuIHNhaWQgdGhhdCBoZSBzaG91bGQgYXR0YWluIHRvIGEgc2V2ZW50aCBjb25zdWxzaGlwLCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgcHJlc2VudGx5LCB3aGVuIHRoZXkgd2VyZSBhYm91dCB0d2VudHkgZnVybG9uZ3MgZGlzdGFudCBmcm9tIE1pbnR1cm5hZSwgYW4gSXRhbGlhbiBjaXR5LCB0aGV5IHNhdyBmcm9tIGFmYXIgYSB0cm9vcCBvZiBob3JzZW1lbiByaWRpbmcgdG93YXJkcyB0aGVtLCBhbmQgYWxzbywgYXMgaXQgY2hhbmNlZCwgdHdvIG1lcmNoYW50IHZlc3NlbHMgc2FpbGluZyBhbG9uZy4gQWNjb3JkaW5nbHksIHdpdGggYWxsIHRoZSBzcGVlZCBhbmQgc3RyZW5ndGggdGhleSBoYWQsIHRoZXkgcmFuIGRvd24gdG8gdGhlIHNlYSwgdGhyZXcgdGhlbXNlbHZlcyBpbnRvIHRoZSB3YXRlciwgYW5kIGJlZ2FuIHRvIHN3aW0gdG8gdGhlIHNoaXBzLiBHcmFuaXVzIGFuZCBoaXMgcGFydHkgcmVhY2hlZCBvbmUgb2YgdGhlIHNoaXBzIGFuZCBjcm9zc2VkIG92ZXIgdG8gdGhlIG9wcG9zaXRlIGlzbGFuZCwgQWVuYXJpYSBieSBuYW1lOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMgaGltc2VsZjsgd2hvIHdhcyBoZWF2eSBhbmQgdW53aWVsZHksIHR3byBzbGF2ZXMgd2l0aCB0b2lsIGFuZCBkaWZmaWN1bHR5IGhlbGQgYWJvdmUgd2F0ZXIgYW5kIHB1dCBpbnRvIHRoZSBvdGhlciBzaGlwLCB0aGUgaG9yc2VtZW4gYmVpbmcgbm93IGF0IGhhbmQgYW5kIGNhbGxpbmcgb3V0IGZyb20gdGhlIHNob3JlIHRvIHRoZSBzYWlsb3JzIGVpdGhlciB0byBicmluZyB0aGUgdmVzc2VsIHRvIHNob3JlIG9yIHRvIHRocm93IE1hcml1cyBvdmVyYm9hcmQgYW5kIHNhaWwgd2hpdGhlciB0aGV5IHBsZWFzZWQuIEJ1dCBzaW5jZSBNYXJpdXMgc3VwcGxpY2F0ZWQgdGhlbSB3aXRoIHRlYXJzIGluIGhpcyBleWVzLCB0aGUgbWFzdGVycyBvZiB0aGUgdmVzc2VsLCBhZnRlciBjaGFuZ2luZyB0aGVpciBtaW5kcyBvZnRlbiBpbiBhIHNob3J0IHRpbWUsIG5ldmVydGhlbGVzcyByZXBsaWVkIHRvIHRoZSBob3JzZW1lbiB0aGF0IHRoZXkgd291bGQgbm90IHN1cnJlbmRlciBNYXJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBob3JzZW1lbiByb2RlIGF3YXkgaW4gYSByYWdlLCBhbmQgdGhlIHNhaWxvcnMsIGNoYW5naW5nIHRoZWlyIHBsYW4gYWdhaW4sIHB1dCBpbiB0b3dhcmRzIHRoZSBzaG9yZTsgYW5kIGFmdGVyIGNhc3RpbmcgYW5jaG9yIGF0IHRoZSBtb3V0aCBvZiB0aGUgYmlucywgd2hlcmUgdGhlIHJpdmVyIGV4cGFuZHMgaW50byBhIGxha2UsIHRoZXkgYWR2aXNlZCBNYXJpdXMgdG8gbGVhdmUgdGhlIHZlc3NlbCwgdGFrZSBzb21lIGZvb2QgYXNob3JlIHdpdGggaGltLCBhbmQgcmVjcnVpdCBoaXMgc3RyZW5ndGggYWZ0ZXIgaGlzIGhhcmRzaGlwcyB1bnRpbCBhIGdvb2Qgd2luZCBmb3Igc2FpbGluZyBzaG91bGQgYXJpc2U7IHRoaXMgdXN1YWxseSBhcm9zZSwgdGhleSBzYWlkLCB3aGVuIHRoZSB3aW5kIGZyb20gdGhlIHNlYSBkaWVkIGF3YXkgYW5kIGEgdG9sZXJhYmx5IHN0cm9uZyBicmVlemUgYmxldyBmcm9tIHRoZSBtYXJzaGVzLiBNYW5pdXMgd2FzIHBlcnN1YWRlZCB0byBmb2xsb3cgdGhlaXIgYWR2aWNlOyBzbyB0aGUgc2FpbG9ycyBjYXJyaWVkIGhpbSBhc2hvcmUsIGFuZCBoZSBsYXkgZG93biBpbiBzb21lIGdyYXNzLCB3aXRob3V0IHRoZSBzbGlnaHRlc3QgdGhvdWdodCBvZiB3aGF0IHdhcyB0byBjb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZSBzYWlsb3JzIGF0IG9uY2UgYm9hcmRlZCB0aGVpciB2ZXNzZWwsIGhvaXN0ZWQgYW5jaG9yLCBhbmQgdG9vayB0byBmbGlnaHQsIGZlZWxpbmcgdGhhdCBpdCB3YXMgbmVpdGhlciBob25vdXJhYmxlIGZvciB0aGVtIHRvIHN1cnJlbmRlciBNYXJpdXMgbm9yIHNhZmUgdG8gcmVzY3VlIGhpbS4gVGh1cywgZm9yc2FrZW4gb2YgYWxsIG1lbiwgaGUgbGF5IGEgbG9uZyB0aW1lIHNwZWVjaGxlc3Mgb24gdGhlIHNob3JlLCBidXQgcmVjb3ZlcmVkIGhpbXNlbGYgYXQgbGFzdCBhbmQgdHJpZWQgdG8gd2FsayBhbG9uZywgdGhlIGxhY2sgb2YgYW55IHBhdGggbWFraW5nIGhpcyBwcm9ncmVzcyBsYWJvcmlvdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgaGlzIHdheSB0aHJvdWdoIGRlZXAgbWFyc2hlcyBhbmQgZGl0Y2hlcyBmdWxsIG9mIG11ZCBhbmQgd2F0ZXIsIHVudGlsIGhlIGNhbWUgdG8gdGhlIGh1dCBvZiBhbiBvbGQgbWFuIHdobyBnb3QgaGlzIGxpdmluZyBmcm9tIHRoZSB3YXRlci4gQXQgaGlzIGZlZXQgTWFyaXVzIGZlbGwgZG93biBhbmQgYmVzb3VnaHQgaGltIHRvIHNhdmUgYW5kIGhlbHAgYSBtYW4gd2hvLCBpbiBjYXNlIGhlIGVzY2FwZWQgaGlzIHByZXNlbnQgcGVyaWxzLCB3b3VsZCByZWNvbXBlbnNlIGhpbSBiZXlvbmQgYWxsIGhpcyBob3Blcy4gVGhlbiB0aGUgbWFuLCB3aG8gZWl0aGVyIGtuZXcgTWFyaXVzIGZyb20gb2Ygb2xkIG9yIHNhdyB0aGF0IGluIGhpcyBmYWNlIHdoaWNoIHdvbiB0aGUgcmVnYXJkIGR1ZSB0byBzdXBlcmlvciByYW5rLCB0b2xkIGhpbSB0aGF0IGlmIGhlIG1lcmVseSB3YW50ZWQgdG8gcmVzdCwgdGhlIGNhYmluIHdvdWxkIHN1ZmZpY2UsIGJ1dCB0aGF0IGlmIGhlIHdhcyB3YW5kZXJpbmcgYWJvdXQgdHJ5aW5nIHRvIGVzY2FwZSBwdXJzdWVycywgaGUgY291bGQgYmUgaGlkZGVuIGluIGEgcGxhY2UgdGhhdCB3YXMgbW9yZSBxdWlldC4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIGJlZ2dlZCB0aGF0IHRoaXMgbWlnaHQgYmUgZG9uZSwgYW5kIHRoZSBtYW4gdG9vayBoaW0gdG8gdGhlIG1hcnNoLCBiYWRlIGhpbSBjcm91Y2ggZG93biBpbiBhIGhvbGxvdyBwbGFjZSBieSB0aGUgc2lkZSBvZiB0aGUgcml2ZXIsIGFuZCB0aHJldyBvdmVyIGhpbSBhIG1hc3Mgb2YgcmVlZHMgYW5kIG90aGVyIG1hdGVyaWFsIHdoaWNoIHdhcyBsaWdodCBlbm91Z2ggdG8gY292ZXIgd2l0aG91dCBpbmp1cmluZyBoaW0uCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgbXVjaCB0aW1lIGhhZCBlbGFwc2VkLCBob3dldmVyLCB3aGVuIGEgZGluIGFuZCB0dW11bHQgYXQgdGhlIGh1dCBmZWxsIHVwb24gdGhlIGVhcnMgb2YgTWFyaXVzLiBGb3IgR2VtaW5pdXMgaGFkIHNlbnQgYSBudW1iZXIgb2YgbWVuIGZyb20gVGVycmFjaW5hIGluIHB1cnN1aXQgb2YgaGltLCBzb21lIG9mIHdob20gaGFkIGNoYW5jZWQgdG8gY29tZSB0byB0aGUgb2xkIG1hbidzIGh1dCwgYW5kIHdlcmUgZnJpZ2h0ZW5pbmcgYW5kIGJlcmF0aW5nIGhpbSBmb3IgaGF2aW5nIHJlY2VpdmVkIGFuZCBoaWRkZW4gYW4gZW5lbXkgb2YgUm9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIHRoZXJlZm9yZSByb3NlIGZyb20gaGlzIGhpZGluZy1wbGFjZSwgc3RyaXBwZWQgb2ZmIGhpcyBjbG90aGVzLCBhbmQgdGhyZXcgaGltc2VsZiBpbnRvIHRoZSB0aGljayBhbmQgbXVkZHkgd2F0ZXIgb2YgdGhlIG1hcnNoLiBIZXJlIGhlIGNvdWxkIG5vdCBlbHVkZSB0aGUgbWVuIHdobyB3ZXJlIGluIHNlYXJjaCBvZiBoaW0sIGJ1dCB0aGV5IGRyYWdnZWQgaGltIG91dCBhbGwgY292ZXJlZCB3aXRoIHNsaW1lLCBsZWQgaGltIG5ha2VkIHRvIE1pbnR1cm5hZSwgYW5kIGhhbmRlZCBoaW0gb3ZlciB0byB0aGUgbWFnaXN0cmF0ZXMgdGhlcmUuIE5vdywgd29yZCBoYWQgYWxyZWFkeSBiZWVuIHNlbnQgdG8gZXZlcnkgY2l0eSB0aGF0IE1hcml1cyB3YXMgdG8gYmUgcHVyc3VlZCBieSB0aGUgYXV0aG9yaXRpZXMgYW5kIGtpbGxlZCBieSBoaXMgY2FwdG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5ldmVydGhlbGVzcywgdGhlIG1hZ2lzdHJhdGVzIGRlY2lkZWQgdG8gZGVsaWJlcmF0ZSBvbiB0aGUgbWF0dGVyIGZpcnN0OyBzbyB0aGV5IHB1dCBNYXJpdXMgZm9yIHNhZmUta2VlcGluZyBpbiB0aGUgaG91c2Ugb2YgYSB3b21hbiBuYW1lZCBGYW5uaWEsIHdobyB3YXMgdGhvdWdodCB0byBiZSBob3N0aWxlIHRvIGhpbSBvbiBhY2NvdW50IG9mIGFuIGFuY2llbnQgZ3JpZXZhbmNlLgoJCQk8L3A+CiAgICAgICAgIDxwPkZhbm5pYSwgdGhhdCBpcywgaGFkIGJlZW4gbWFycmllZCB0byBUaXRpbm5pdXM7IGJ1dCBzaGUgaGFkIHNlcGFyYXRlZCBoZXJzZWxmIGZyb20gaGltIGFuZCBkZW1hbmRlZCBiYWNrIGhlciBkb3dyeSwgd2hpY2ggd2FzIGNvbnNpZGVyYWJsZS4gSGVyIGh1c2JhbmQsIGhvd2V2ZXIsIGhhZCBhY2N1c2VkIGhlciBvZiBhZHVsdGVyeTsgYW5kIE1hcml1cywgd2hvIHdhcyBzZXJ2aW5nIGluIGhpcyBzaXh0aCBjb25zdWxzaGlwLCBoYWQgcHJlc2lkZWQgb3ZlciB0aGUgdHJpYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGNhc2Ugd2FzIHBsZWFkZWQsIGFuZCBpdCBhcHBlYXJlZCB0aGF0IEZhbm5pYSBoYWQgYmVlbiBhIGRpc3NvbHV0ZSB3b21hbiwgYW5kIHRoYXQgaGVyIGh1c2JhbmQgaGFkIGtub3duIHRoaXMgYW5kIHlldCBoYWQgdGFrZW4gaGVyIHRvIHdpZmUgYW5kIGxpdmVkIHdpdGggaGVyIGEgbG9uZyB0aW1lLCBNYXJpdXMgd2FzIGRpc2d1c3RlZCB3aXRoIGJvdGggb2YgdGhlbSwgYW5kIGRlY3JlZWQgdGhhdCB0aGUgaHVzYmFuZCBzaG91bGQgcGF5IGJhY2sgaGlzIHdpZmUncyBkb3dyeSwgd2hpbGUgYXQgdGhlIHNhbWUgdGltZSBoZSBpbXBvc2VkIHVwb24gdGhlIHdvbWFuLCBhcyBhIG1hcmsgb2YgaW5mYW15LCBhIGZpbmUgb2YgZm91ciBjb3BwZXJzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgYXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgRmFubmlhIGRpZCBub3QgYWN0IGxpa2UgYSB3b21hbiB3aG8gaGFkIGJlZW4gd3JvbmdlZCwgYnV0IHdoZW4gc2hlIHNhdyBNYXJpdXMsIHNoZSBwdXQgZmFyIGZyb20gaGVyIGFsbCByZXNlbnRtZW50LCBjYXJlZCBmb3IgaGltIGFzIHdlbGwgYXMgc2hlIGNvdWxkLCBhbmQgdHJpZWQgdG8gZW5jb3VyYWdlIGhpbS4gTWFyaXVzIGNvbW1lbmRlZCBoZXIsIGFuZCBzYWlkIGhlIHdhcyBvZiBnb29kIGNvdXJhZ2U7IGZvciBhbiBleGNlbGxlbnQgc2lnbiBoYWQgYmVlbiBnaXZlbiBoaW0uIEFuZCB0aGlzIHNpZ24gd2FzIGFzIGZvbGxvd3MuCgkJCTwvcD4KICAgICAgICAgPHA+V2hlbiwgYXMgaGUgd2FzIGxlZCBhbG9uZywgaGUgaGFkIGNvbWUgdG8gdGhlIGhvdXNlIG9mIEZhbm5pYSB0aGUgZG9vciBmbGV3IG9wZW4gYW5kIGFuIGFzcyByYW4gb3V0LCBpbiBvcmRlciB0byBnZXQgYSBkcmluayBhdCBhIHNwcmluZyB0aGF0IGZsb3dlZCBoYXJkIGJ5OyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz53aXRoIGEgc2F1Y3kgYW5kIGV4dWx0YW50IGxvb2sgYXQgTWFyaXVzIHRoZSBhbmltYWwgYXQgZmlyc3Qgc3RvcHBlZCBpbiBmcm9udCBvZiBoaW0sIGFuZCB0aGVuLCBnaXZpbmcgYSBtYWduaWZpY2VudCBicmF5LCB3ZW50IGZyaXNraW5nIHBhc3QgaGltIHRyaXVtcGhhbnRseS4gRnJvbSB0aGlzIE1hcml1cyBkcmV3IGFuIG9tZW4gYW5kIGNvbmNsdWRlZCB0aGF0IHRoZSBEZWl0eSB3YXMgaW5kaWNhdGluZyBhIHdheSBvZiBlc2NhcGUgZm9yIGhpbSBieSBzZWEgcmF0aGVyIHRoYW4gYnkgbGFuZDsgZm9yIHRoZSBhc3MgbWFkZSBubyBhY2NvdW50IG9mIGl0cyBkcnkgZm9kZGVyLCBodXQgdHVybmVkIGZyb20gdGhhdCB0byB0aGUgd2F0ZXIuCgkJCTwvcD4KICAgICAgICAgPHA+QWZ0ZXIgZXhwbGFpbmluZyB0aGlzIHRvIEZhbm5pYSwgTWFyaXVzIGxheSBkb3duIHRvIHJlc3QgYWxvbmUsIGFmdGVyIG9yZGVyaW5nIHRoZSBkb29yIG9mIHRoZSBhcGFydG1lbnQgdG8gYmUgY2xvc2VkLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiBkZWxpYmVyYXRpb24sIHRoZSBtYWdpc3RyYXRlcyBhbmQgY291bmNpbGxvcnMgb2YgTWludHVybmFlIGRlY2lkZWQgbm90IHRvIGRlbGF5LCBidXQgdG8gcHV0IE1hcml1cyB0byBkZWF0aC4gTm8gb25lIG9mIHRoZSBjaXRpemVucywgaG93ZXZlciwgd291bGQgdW5kZXJ0YWtlIHRoZSB0YXNrLCBzbyBhIGhvcnNlbWFuLCBlaXRoZXIgYSBHYXVsIG9yIGEgQ2ltYnJpYW4gKGZvciB0aGUgc3RvcnkgaXMgdG9sZCBib3RoIHdheXMpLCB0b29rIGEgc3dvcmQgYW5kIHdlbnQgaW50byB0byB0aGUgcm9vbSB3aGVyZSBNYXJpdXMgd2FzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoYXQgcGFydCBvZiB0aGUgcm9vbSB3aGVyZSBNYXJpdXMgaGFwcGVuZWQgdG8gYmUgbHlpbmcgaGFkIG5vdCBhIHZlcnkgZ29vZCBsaWdodCwgYnV0IHdhcyBnbG9vbXksIGFuZCB3ZSBhcmUgdG9sZCB0aGF0IHRvIHRoZSBzb2xkaWVyIHRoZSBleWVzIG9mIE1hcml1cyBzZWVtZWQgdG8gc2hvb3Qgb3V0IGEgc3Ryb25nIGZsYW1lLCBhbmQgdGhhdCBhIGxvdWQgdm9pY2UgaXNzdWVkIGZyb20gdGhlIHNoYWRvd3Mgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1hbiwgZG9zdCB0aG91IGRhcmUgdG8gc2xheSBDYWl1cyBNYXJpdXM/PC9xPiBBdCBvbmNlLCB0aGVuLCB0aGUgQmFyYmFyaWFuIGZsZWQgZnJvbSB0aGUgcm9vbSwgdGhyZXcgaGlzIHN3b3JkIGRvd24gb24gdGhlIGdyb3VuZCwgYW5kIGRhc2hlZCBvdXQgb2YgZG9vcnMsIHdpdGggdGhpcyBvbmUgY3J5OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY2Fubm90IGtpbGwgQ2FpdXMgTWFyaXVzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Db25zdGVybmF0aW9uIHJlaWduZWQsIG9mIGNvdXJzZSwgYW5kIHRoZW4gY2FtZSBwaXR5LCBhIGNoYW5nZSBvZiBoZWFydCwgYW5kIHNlbGYtcmVwcm9hY2ggZm9yIGhhdmluZyBjb21lIHRvIHNvIHVubGF3ZnVsIGFuZCB1bmdyYXRlZnVsIGEgZGVjaXNpb24gYWdhaW5zdCBhIG1hbiB3aG8gaGFkIGJlZW4gdGhlIHNhdmlvdXIgb2YgSXRhbHksIGFuZCB3aG8gb3VnaHQgaW4gYWxsIGRlY2VuY3kgdG8gYmUgaGVscGVkLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNvLCB0aGVuLDwvcT4gdGhlIHRhbGsgcmFuLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxldCBoaW0gZ28gd2hlcmUgaGUgd2lsbCBhcyBhbiBleGlsZSwgdG8gc3VmZmVyIGVsc2V3aGVyZSBoaXMgYWxsb3R0ZWQgZmF0ZS4gQW5kIGxldCB1cyBwcmF5IHRoYXQgdGhlIGdvZHMgbWF5IG5vdCB2aXNpdCB1cyB3aXRoIHRoZWlyIGRpc3BsZWFzdXJlIGZvciBjYXN0aW5nIE1hcml1cyBvdXQgb2Ygb3VyIGNpdHkgaW4gcG92ZXJ0eSBhbmQgcmFncy48L3E+IE1vdmVkIGJ5IHN1Y2ggY29uc2lkZXJhdGlvbnMsIHRoZXkgcnVzaGVkIGludG8gaGlzIHJvb20gaW4gYSBib2R5LCBzdXJyb3VuZGVkIGhpbSwgYW5kIGJlZ2FuIHRvIGxlYWQgaGltIGZvcnRoIHRvIHRoZSBzZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCB0aGlzIG9uZSBhbmQgdGhhdCBvbmUgd2VyZSBlYWdlciB0byBkbyBoaW0gc29tZSBzZXJ2aWNlIGFuZCBhbGwgbWFkZSB3aGF0IGhhc3RlIHRoZXkgY291bGQsIHN0aWxsIHRoZXJlIHdhcyBkZWxheS4gRm9yIHRoZSBncm92ZSBvZiBNYXJpY2EsIGFzIGl0IHdhcyBjYWxsZWQsIHdoaWNoIHdhcyBoZWxkIGluIHZlbmVyYXRpb24sIGFuZCBmcm9tIHdoaWNoIG5vdGhpbmcgd2FzIHBlcm1pdHRlZCB0byBiZSBjYXJyaWVkIG91dCB0aGF0IGhhZCBldmVyIGJlZW4gY2FycmllZCBpbiwgbGF5IGJldHdlZW4gdGhlbSBhbmQgdGhlIHNlYSBhcyB0aGV5IHdlcmUgZ29pbmcsIGFuZCBpZiB0aGV5IHdlbnQgcm91bmQgaXQgdGhleSBtdXN0IG5lZWRzIGxvc2UgdGltZS4gQXQgbGFzdCwgaG93ZXZlciwgb25lIG9mIHRoZSBvbGRlciBtZW4gY3JpZWQgb3V0IGFuZCBzYWlkIHRoYXQgbm8gcGF0aCBjb3VsZCBmb3JiaWQgbWVuJ3Mgc3RlcHMgYW5kIHBhc3NhZ2UgaWYgaXQgd2VyZSB0aGUgcGF0aCBvZiBzYWZldHkgZm9yIE1hcml1cy4gQW5kIHRoZSBzcGVha2VyIGhpbXNlbGYgd2FzIHRoZSBmaXJzdCB0byB0YWtlIHNvbWUgb2YgdGhlIHRoaW5ncyB0aGF0IHdlcmUgYmVpbmcgY2FycmllZCB0byB0aGUgc2hpcCBhcmlkIHBhc3MgdGhyb3VnaCB0aGUgaG9seSBwbGFjZS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkV2ZXJ5dGhpbmcgd2FzIHNwZWVkaWx5IHByb3ZpZGVkIHRocm91Z2ggc3VjaCByZWFkaW5lc3MgYXMgdGhpcywgYW5kIGEgY2VydGFpbiBCZWxhZXVzIGZ1cm5pc2hlZCBhIHNoaXAgZm9yIE1hcml1cy4gQmVsYWV1cyBhZnRlcndhcmRzIGhhZCBhIHBhaW50aW5nIG1hZGUgcmVwcmVzZW50aW5nIHRoZXNlIHNjZW5lcywgYW5kIGRlZGljYXRlZCBpdCBpbiB0aGUgdGVtcGxlIGF0IHRoZSBzcG90IHdoZXJlIE1hcml1cyBlbWJhcmtlZCBhbmQgcHV0IHRvIHNlYS4gRmF2b3VyZWQgYnkgdGhlIHdpbmQgaGUgd2FzIGJvcm5lIGFsb25nIGJ5IGNoYW5jZSB0byB0aGUgaXNsYW5kIG9mIEFlbmFyaWEsIHdoZXJlIGhlIGZvdW5kIEdyYW5pdXMgYW5kIHRoZSByZXN0IG9mIGhpcyBmcmllbmRzLCBhbmQgc2V0IHNhaWwgd2l0aCB0aGVtIGZvciBBZnJpY2EuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVpciBzdXBwbHkgb2YgZnJlc2ggd2F0ZXIgZmFpbGVkLCBhbmQgdGhleSB3ZXJlIGNvbXBlbGxlZCB0byB0b3VjaCBhdCBFcnljaW5hIGluIFNpY2lseS4gSW4gdGhpcyBuZWlnaGJvdXJob29kLCBhcyBpdCBjaGFuY2VkLCB0aGUgUm9tYW4gcXVhZXN0b3Igd2FzIG9uIHRoZSB3YXRjaCwgYW5kIGFsbW9zdCBjYXB0dXJlZCBNYXJpdXMgaGltc2VsZiBhcyBoZSBsYW5kZWQ7IGhlIGRpZCBraWxsIGFib3V0IHNpeHRlZW4gb2YgaGlzIG1lbiB3aG8gY2FtZSBhc2hvcmUgZm9yIHdhdGVyLiBNYXJpdXMgdGhlcmVmb3JlIHB1dCBvdXQgdG8gc2VhIHdpdGggYWxsIHNwZWVkIGFuZCBjcm9zc2VkIHRvIHRoZSBpc2xhbmQgb2YgTWVuaW54LCB3aGVyZSBoZSBmaXJzdCBsZWFybmVkIHRoYXQgaGlzIHNvbiBoYWQgY29tZSBvZmYgc2FmZWx5IHdpdGggQ2V0aGVndXMsIGFuZCB0aGF0IHRoZXkgV2VyZSBvbiB0aGVpciB3YXkgdG8gSWFtcHNhcyB0aGUga2luZyBvZiBOdW1pZGlhLCBpbnRlbmRpbmcgdG8gYXNrIGhpcyBhaWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgbmV3cyBNYXJpdXMgd2FzIGEgbGl0dGxlIHJlZnJlc2hlZCwgYW5kIG1hZGUgYm9sZCB0byBwdXNoIG9uIGZyb20gdGhlIGlzbGFuZCB0byB0aGUgbmVpZ2hib3VyaG9vZCBvZiBDYXJ0aGFnZS4KCQkJPC9wPgogICAgICAgICA8cD5UaGUgUm9tYW4gZ292ZXJub3Igb2YgQWZyaWNhIGF0IHRoaXMgdGltZSB3YXMgU2V4dGlsaXVzLCBhIG1hbiB3aG8gaGFkIHJlY2VpdmVkIG5laXRoZXIgZ29vZCBub3IgaWxsIGF0IGhlIGhhbmRzIG9mIE1hcml1cywgYnV0IHdob20sIGFzIGl0IHdhcyBleHBlY3RlZCwgcGl0eSBhbG9uZSB3b3VsZCBtb3ZlIHRvIGdpdmUgaGltIGFpZC4gSGFyZGx5LCBob3dldmVyLCBoYWQgTWFyaXVzIGxhbmRlZCB3aXRoIGEgZmV3IGNvbXBhbmlvbnMsIHdoZW4gYW4gb2ZmaWNpYWwgbWV0IGhpbSwgc3Rvb2QgZGlyZWN0bHkgaW4gZnJvbnQgb2YgaGltLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TZXh0aWxpdXMgdGhlIGdvdmVybm9yIGZvcmJpZHMgdGhlZSwgTWFyaXVzLCB0byBzZXQgZm9vdCBpbiBBZnJpY2E7IGFuZCBpZiB0aG91IGRpc29iZXllc3QsIGhlIGRlY2xhcmVzIHRoYXQgaGUgd2lsbCB1cGhvbGQgdGhlIGRlY3JlZXMgb2YgdGhlIHNlbmF0ZSBhbmQgdHJlYXQgdGhlZSBhcyBhbiBlbmVteSBvZiBSb21lLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGhlIGhlYXJkIHRoaXMsIE1hcml1cyB3YXMgcmVuZGVyZWQgc3BlZWNobGVzcyBieSBncmllZiBhbmQgaW5kaWduYXRpb24sIGFuZCBmb3IgYSBsb25nIHRpbWUga2VwdCBxdWlldCwgbG9va2luZyBzdGVybmx5IGF0IHRoZSBvZmZpY2lhbC4gVGhlbiwgd2hlbiBhc2tlZCBieSBoaW0gd2hhdCBoZSBoYWQgdG8gc2F5LCBhbmQgd2hhdCBhbnN3ZXIgaGUgd291bGQgbWFrZSB0byB0aGUgZ292ZXJub3IsIGhlIGFuc3dlcmVkIHdpdGggYSBkZWVwIGdyb2FuOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRlbGwgaGltLCB0aGVuLCB0aGF0IHRob3UgaGFzdCBzZWVuIENhaXVzIE1hcml1cyBhIGZ1Z2l0aXZlLCBzZWF0ZWQgYW1pZCB0aGUgcnVpbnMgb2YgQ2FydGhhZ2UuPC9xPiBBbmQgaXQgd2FzIG5vdCBpbmFwdGx5IHRoYXQgaGUgY29tcGFyZWQgdGhlIGZhdGUgb2YgdGhhdCBjaXR5IHdpdGggaGlzIG93biByZXZlcnNhbCBvZiBmb3J0dW5lLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIElhbXBzYXMgdGhlIGtpbmcgb2YgTnVtaWRpYSwgaGVzaXRhdGluZyB3aGljaCBjb3Vyc2UgdG8gdGFrZSwgZGlkIGluZGVlZCB0cmVhdCB0aGUgeW91bmdlciBNYXJpdXMgYW5kIGhpcyBwYXJ0eSB3aXRoIHJlc3BlY3QsIGJ1dCBhbHdheXMgaGFkIHNvbWUgZXhjdXNlIGZvciBkZXRhaW5pbmcgdGhlbSB3aGVuIHRoZXkgd2lzaGVkIHRvIGdvIGF3YXksIGFuZCBjbGVhcmx5IGhhZCBubyBnb29kIGVuZCBpbiB2aWV3IGluIHRodXMgcG9zdHBvbmluZyB0aGVpciBkZXBhcnR1cmUuIEhvd2V2ZXIsIHNvbWV0aGluZyBvY2N1cnJlZCB3aGljaCwgdGhvdWdoIG5vdCBhdCBhbGwgZXh0cmFvcmRpbmFyeSwgbGVkIHRvIHRoZWlyIGVzY2FwZS4gVGhlIHlvdW5nZXIgTWFyaXVzLCB0aGF0IGlzLCBiZWluZyBhIGhhbmRzb21lIGZlbGxvdywgb25lIG9mIHRoZSBjb25jdWJpbmVzIG9mIHRoZSBraW5nIHdhcyBwYWluZWQgdG8gc2VlIGhpbSB0cmVhdGVkIHVud29ydGhpbHksIGFuZCB0aGlzIGZlZWxpbmcgb2YgY29tcGFzc2lvbiByaXBlbmVkIGludG8gbG92ZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIHRoZW4sIE1hcml1cyByZXBlbGxlZCB0aGUgd29tYW4ncyBhZHZhbmNlczsgYnV0IHdoZW4gaGUgc2F3IHRoYXQgdGhlcmUgd2FzIG5vIG90aGVyIHdheSBvZiBlc2NhcGUgZm9yIGhpbSBhbmQgaGlzIGZyaWVuZHMsIGFuZCB0aGF0IGhlciBiZWhhdmlvdXIgd2FzIGJhc2VkIG9uIGEgZ2VudWluZSBhZmZlY3Rpb24sIGhlIGFjY2VwdGVkIGhlciBmYXZvdXJzOyB3aGVyZXVwb24gc2hlIGhlbHBlZCBoaW0gaW4gZ2V0dGluZyBvZmYsIGFuZCBoZSByYW4gYXdheSB3aXRoIGhpcyBmcmllbmRzIGFuZCBtYWRlIGhpcyBlc2NhcGUgdG8gaGlzIGZhdGhlci4gQWZ0ZXIgZmF0aGVyIGFuZCBzb24gaGFkIGVtYnJhY2VkIG9uZSBhbm90aGVyLCB0aGV5IHdhbGtlZCBhbG9uZyB0aGUgc2VhLXNob3JlLCBhbmQgdGhlcmUgdGhleSBzYXcgc29tZSBzY29ycGlvbnMgZmlnaHRpbmcsIHdoaWNoIHRoZSBlbGRlciBNYXJpdXMgcmVnYXJkZWQgYXMgYSBiYWQgb21lbi4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlcmVmb3JlLCB0aGV5IGJvYXJkZWQgYSBmaXNoaW5nLWJvYXQgYW5kIGNyb3NzZWQgb3ZlciB0byB0aGUgaXNsYW5kIG9mIENlcmNpbmEsIHdoaWNoIHdhcyBub3QgZmFyIGRpc3RhbnQgZnJvbSB0aGUgbWFpbmxhbmQ7IGFuZCBzY2FyY2VseSBoYWQgdGhleSBwdXQgb3V0IGZyb20gbGFuZCB3aGVuIGhvcnNlbWVuIHNlbnQgYnkgdGhlIGtpbmcgd2VyZSBzZWVuIHJpZGluZyB0b3dhcmRzIHRoZSBzcG90IHdoZW5jZSB0aGV5IGhhZCBzYWlsZWQuIEl0IHdvdWxkIHNlZW0gdGhhdCBNYXJpdXMgbmV2ZXIgZXNjYXBlZCBhIGdyZWF0ZXIgcGVyaWwgdGhhbiB0aGlzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIFJvbWUsIFN1bGxhIHdhcyBoZWFyZCBvZiBhcyB3YWdpbmcgd2FyIHdpdGggdGhlIGdlbmVyYWxzIG9mIE1pdGhyaWRhdGVzIGluIEJvZW90aWEsIGFuZCB0aGUgY29uc3VscyBxdWFycmVsbGVkIGFuZCB3ZXJlIHJlc29ydGluZyB0byBhcm1zLiBBIGJhdHRsZSB0b29rIHBsYWNlLCBPY3Rhdml1cyB3b24gdGhlIGRheSwgY2FzdCBvdXQgQ2lubmEsIHdobyB3YXMgdHJ5aW5nIHRvIGJlIHRvbyBhcmJpdHJhcnkgaW4gaGlzIHJ1bGUsIGFuZCBwdXQgQ29ybmVsaXVzIE1lcnVsYSBpbiBoaXMgcGxhY2UgYXMgY29uc3VsOyB3aGVyZXVwb24gQ2lubmEgYXNzZW1ibGVkIGEgZm9yY2UgZnJvbSB0aGUgb3RoZXIgcGFydHMgb2YgSXRhbHkgYW5kIG1hZGUgd2FyIGFuZXcgdXBvbiBPY3Rhdml1cyBhbmQgaGlzIGNvbGxlYWd1ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBNYXJpdXMgaGVhcmQgb2YgdGhlc2UgdGhpbmdzLCBoZSB0aG91Z2h0IGJlc3QgdG8gc2FpbCB0aGl0aGVyIGFzIGZhc3QgYXMgaGUgY291bGQ7IHNvIHRha2luZyB3aXRoIGhpbSBmcm9tIEFmcmljYSBzb21lIE1vb3Jpc2ggaG9yc2VtZW4sIGFuZCBzb21lIEl0YWxpYW5zIHdobyBoYWQgd2FuZGVyZWQgdGhpdGhlciwgdGhlIG51bWJlciBvZiBib3RoIHRvZ2V0aGVyIG5vdCBleGNlZWRpbmcgYSB0aG91c2FuZCwgaGUgcHV0IHRvIHNlYS4gUHV0dGluZyBpbiBhdCBUZWxhbW9uIGluIFR5cnJoZW5pYSwgYW5kIGxhdWRpbmcgdGhlcmUsIGhlIHByb2NsYWltZWQgZnJlZWRvbSB0byB0aGUgc2xhdmVzOyBoZSBhbHNvIHdvbiBvdmVyIHRoZSBzdHVyZGllc3Qgb2YgdGhlIGZyZWUgZmFybWVycyBhbmQgaGVyZHNtZW4gb2YgdGhlIG5laWdoYm91cmhvb2QsIHdobyBjYW1lIGZsb2NraW5nIGRvd24gdG8gdGhlIHNlYSBhdHRyYWN0ZWQgYnkgaGlzIGZhbWUsIGFuZCBpbiBhIGZldyBkYXlzIGhhZCBhc3NlbWJsZWQgYSBsYXJnZSBmb3JjZSBhbmQgbWFubmVkIGZvcnR5IHNoaXBzLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywga25vd2luZyB0aGF0IE9jdGF2aXVzIHdhcyBhIG1vc3QgZXhjZWxsZW50IG1hbiBhbmQgd2lzaGVkIHRvIHJ1bGUgaW4gdGhlIGp1c3Rlc3Qgd2F5LCBidXQgdGhhdCBDaW5uYSB3YXMgZGlzdHJ1c3RlZCBieSBTdWxsYSBhbmQgd2FzIG1ha2luZyB3YXIgdXBvbiB0aGUgZXN0YWJsaXNoZWQgY29uc3RpdHV0aW9uLCBoZSBkZXRlcm1pbmVkIHRvIGpvaW4gQ2lubmEgd2l0aCBoaXMgZm9yY2VzLiBBY2NvcmRpbmdseSBoZSBzZW50IHRvIENpbm5hIGFuZCBvZmZlcmVkIHRvIG9iZXkgaGltIGluIGV2ZXJ5dGhpbmcgYXMgY29uc3VsLiBDaW5uYSBhY2NlcHRlZCBoaXMgb2ZmZXIsIG5hbWVkIGhpbSBwcm9jb25zdWwsIGFuZCBzZW50IGhpbSB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPmZhc2NlcyA8L2ZvcmVpZ24+IGFuZCBvdGhlciBpbnNpZ25pYSBvZiB0aGUgb2ZmaWNlIE1hcml1cywgaG93ZXZlciwgZGVjbGFyZWQgdGhhdCB0aGVzZSBkZWNvcmF0aW9ucyB3ZXJlIG5vdCBzdWl0ZWQgdG8gaGlzIGZvcnR1bmVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaW4gbWVhbiBhdHRpcmUsIGhpcyBoYWlyIHVuY3V0IHNpbmNlIHRoZSBkYXkgb2YgaGlzIGZsaWdodCwgYmVpbmcgbm93IG92ZXIgc2V2ZW50eSB5ZWFycyBvZiBhZ2UsIGNhbWUgd2l0aCBzbG93IHN0ZXBzIHRvIG1lZXQgdGhlIGNvbnN1bC4gRm9yIGhlIHdpc2hlZCB0aGF0IG1lbiBzaG91bGQgcGl0eSBoaW07IGJ1dCB3aXRoIGhpcyBhcHBlYWwgZm9yIGNvbXBhc3Npb24gdGhlcmUgd2FzIG1pbmdsZWQgdGhlIGxvb2sgdGhhdCB3YXMgbmF0dXJhbCB0byBoaW0gYW5kIG5vdyBtb3JlIHRlcnJpZnlpbmcgdGhhbiBldmVyLCBhbmQgdGhyb3VnaCBoaXMgZG93bmNhc3QgbWllbiB0aGVyZSBmbGFzaGVkIGEgc3Bpcml0IHdoaWNoIGhhZCBiZWVuLCBub3QgaHVtYmxlZCwgYnV0IG1hZGUgc2F2YWdlIGJ5IGhpcyByZXZlcnNlcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGdyZWV0aW5nIENpbm5hIGFuZCBwcmVzZW50aW5nIGhpbXNlbGYgdG8gQ2lubmEncyBzb2xkaWVycywgaGUgYXQgb25jZSBiZWdhbiBoaXMgd29yayBhbmQgZ3JlYXRseSBjaGFuZ2VkIHRoZSBwb3N0dXJlIG9mIGFmZmFpcnMuIEluIHRoZSBmaXJzdCBwbGFjZSwgYnkgY3V0dGluZyBvZmYgdGhlIGdyYWluLXNoaXBzIHdpdGggaGlzIGZsZWV0IGFuZCBwbHVuZGVyaW5nIHRoZSBtZXJjaGFudHMsIGhlIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgdGhlIGNpdHkncyBzdXBwbGllczsgbmV4dCwgaGUgc2FpbGVkIHRvIHRoZSBtYXJpdGltZSBjaXRpZXMgYW5kIHRvb2sgdGhlbTsgYW5kIGZpbmFsbHksIGhlIHNlaXplZCBPc3RpYSBpdHNlbGYsIHdoaWNoIHdhcyB0cmVhY2hlcm91c2x5IHN1cnJlbmRlcmVkIHRvIGhpbSwgcGx1bmRlcmluZyB0aGUgcHJvcGVydHkgdGhlcmUgYW5kIGtpbGxpbmcgbW9zdCBvZiBpdHMgaW5oYWJpdGFudHMsIGFuZCBieSB0aHJvd2luZyBhIGJyaWRnZSBhY3Jvc3MgdGhlIHJpdmVyIGNvbXBsZXRlbHkgY3V0IG9mZiB0aGUgZW5lbXkgZnJvbSBzdWNoIHN0b3JlcyBhcyBtaWdodCBjb21lIGJ5IHNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBzZXQgb3V0IGFuZCBtYXJjaGVkIHdpdGggaGlzIGFybXkgdG93YXJkcyB0aGUgY2l0eSwgYW5kIG9jY3VwaWVkIHRoZSBoaWxsIGNhbGxlZCBKYW5pY3VsdW0uIE9jdGF2aXVzIGRhbWFnZWQgaGlzIG93biBjYXVzZSwgbm90IHNvIG11Y2ggdGhyb3VnaCBsYWNrIG9mIHNraWxsLCBhcyBieSBhIHRvbyBzY3J1cHVsb3VzIG9ic2VydmFuY2Ugb2YgdGhlIGxhd3MsIHdoZXJlaW4gaGUgdW53aXNlbHkgbmVnbGVjdGVkIHRoZSBuZWVkcyBvZiB0aGUgaG91ci4gRm9yIHRob3VnaCBtYW55IHVyZ2VkIGhpbSB0byBjYWxsIHRoZSBzbGF2ZXMgdG8gYXJtcyB1bmRlciBwcm9taXNlIG9mIGZyZWVkb20sIGhlIHNhaWQgaGUgd291bGQgbm90IG1ha2UgYm9uZG1lbiBtZW1iZXJzIG9mIHRoZSBzdGF0ZSBmcm9tIHdoaWNoIGhlIHdhcyB0cnlpbmcgdG8gZXhjbHVkZSBNYXJpdXMgaW4gb2JlZGllbmNlIHRvIHRoZSBsYXdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgd2hlbiBNZXRlbGx1cyAoc29uIG9mIHRoZSBNZXRlbGx1cyB3aG8gaGFkIGNvbW1hbmRlZCBpbiBBZnJpY2EgYW5kIGhhZCBiZWVuIGJhbmlzaGVkIHRocm91Z2ggdGhlIGludHJpZ3VlcyBvZiBNYXJpdXMpIGNhbWUgdG8gUm9tZSwgaXQgd2FzIHRob3VnaHQgdGhhdCBoZSB3YXMgZmFyIHN1cGVyaW9yIHRvIE9jdGF2aXVzIGFzIGEgZ2VuZXJhbCwgYW5kIHRoZSBzb2xkaWVycyBmb3Jzb29rIE9jdGF2aXVzIGFuZCBjYW1lIHRvIGhpbSwgZW50cmVhdGluZyBoaW0gdG8gdGFrZSB0aGUgY29tbWFuZCBhbmQgc2F2ZSB0aGUgY2l0eTsgZm9yIHRoZXkgd291bGQgbWFrZSBhIGdvb2QgZmlnaHQsIHRoZXkgc2FpZCwgYW5kIHdpbiB0aGUgdmljdG9yeSBpZiB0aGV5IGdvdCBhIHRyaWVkIGFuZCBlZmZpY2llbnQgbGVhZGVyLiBNZXRlbGx1cywgaG93ZXZlciwgd2FzIGluZGlnbmFudCBhdCB0aGVtIGFuZCBiYWRlIHRoZW0gZ28tIGJhY2sgdG8gdGhlIGNvbnN1bDsgd2hlcmV1cG9uIHRoZXkgd2VudCBvZmYgdG8gdGhlIGVuZW15LiBNZXRlbGx1cyBhbHNvIGxlZnQgdGhlIGNpdHksIGRlc3BhaXJpbmcgb2YgaXRzIHNhZmV0eS4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBPY3Rhdml1cyB3YXMgcGVyc3VhZGVkIGJ5IGNlcnRhaW4gQ2hhbGRhZWFucywgc2FjcmlmaWNlcnMsIGFuZCBpbnRlcnByZXRlcnMgb2YgdGhlIFNpYnlsbGluZSBib29rcyB0byByZW1haW4gaW4gdGhlIGNpdHksIG9uIHRoZSBhc3N1cmFuY2UgdGhhdCBtYXR0ZXJzIHdvdWxkIHR1cm4gb3V0IHdlbGwuIEZvciBpdCB3b3VsZCBzZWVtIHRoYXQgdGhpcyBtYW4sIGFsdGhvdWdoIGhlIHdhcyBpbiBvdGhlciB3YXlzIHRoZSBtb3N0IHNlbnNpYmxlIG1hbiBpbiBSb21lLCBhbmQgbW9zdCBjYXJlZnVsIHRvIG1haW50YWluIHRoZSBkaWduaXR5IG9mIHRoZSBjb25zdWxhciBvZmZpY2UgZnJlZSBmcm9tIHVuZHVlIGluZmx1ZW5jZSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGN1c3RvbXMgb2YgdGhlIGNvdW50cnkgYW5kIGl0cyBsYXdzLCB3aGljaCBoZSByZWdhcmRlZCBhcyB1bmNoYW5nZWFibGUgb3JkaW5hbmNlcywgaGFkIGEgd2Vha25lc3MgaW4gdGhpcyBkaXJlY3Rpb24sIHNpbmNlIGhlIHNwZW50IG1vcmUgdGltZSB3aXRoIGNoYXJsYXRhbnMgYW5kIHNlZXJzIHRoYW4gd2l0aCBtZW4gd2hvIHdlcmUgc3RhdGVzbWVuIGFuZCBzb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYW4sIHRoZW4sIGJlZm9yZSBNYXJpdXMgZW50ZXJlZCB0aGUgY2l0eSwgd2FzIGRyYWdnZWQgZG93biBmcm9tIHRoZSByb3N0cmEgYnkgbWVuIHdobyBoYWQgYmVlbiBzZW50IG9uIGJlZm9yZSwgYW5kIGJ1dGNoZXJlZDsgYW5kIHdlIGFyZSB0b2xkIHRoYXQgYSBDaGFsZGFlYW4gY2hhcnQgd2FzIGZvdW5kIGluIGhpcyBib3NvbSBhZnRlciBoZSBoYWQgYmVlbiBzbGFpbi4gTm93LCBpdCBzZWVtcyB2ZXJ5IHVuYWNjb3VudGFibGUgdGhhdCwgb2YgdHdvIG1vc3QgaWxsdXN0cmlvdXMgY29tbWFuZGVycywgTWFyaXVzIHNob3VsZCBzdWNjZWVkIGJ5IHJlZ2FyZGluZyBkaXZpbmF0aW9ucywgYnV0IE9jdGF2aXVzIHNob3VsZCBiZSBydWluZWQuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYXR0ZXJzIGJlaW5nIGF0IHRoaXMgcGFzcywgdGhlIHNlbmF0ZSBtZXQgYW5kIHNlbnQgYSBkZXB1dGF0aW9uIHRvIENpbm5hIGFuZCBNYXJpdXMsIGJlZ2dpbmcgdGhlbSB0byBlbnRlciB0aGUgY2l0eSBhbmQgc3BhcmUgdGhlIGNpdGl6ZW5zLiBDaW5uYSwgYWNjb3JkaW5nbHksIGFzIGNvbnN1bCwgc2VhdGVkIG9uIGhpcyBjaGFpciBvZiBvZmZpY2UsIHJlY2VpdmVkIHRoZSBlbWJhc3N5IGFuZCBnYXZlIHRoZW0gYSBraW5kbHkgYW5zd2VyOyBidXQgTWFyaXVzLCBzdGFuZGluZyBieSB0aGUgY29uc3VsJ3MgY2hhaXIgd2l0aG91dCBzcGVha2luZyBhIHdvcmQsIG1hZGUgaXQgY2xlYXIgYWxsIHRoZSB3aGlsZSwgYnkgdGhlIGhlYXZpbmVzcyBvZiBoaXMgY291bnRlbmFuY2UgYW5kIHRoZSBnbG9vbWluZXNzIG9mIGhpcyBsb29rLCB0aGF0IGhlIHdvdWxkIGF0IG9uY2UgZmlsbCB0aGUgY2l0eSB3aXRoIHNsYXVnaHRlci4gQWZ0ZXIgdGhlIGNvbmZlcmVuY2Ugd2FzIG92ZXIgdGhleSBtb3ZlZCBvbiB0b3dhcmRzIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DaW5uYSBlbnRlcmVkIGl0IHdpdGggYSBib2R5Z3VhcmQsIGJ1dCBNYXJpdXMgaGFsdGVkIGF0IHRoZSBnYXRlcyBhbmQgYW5ncmlseSBkaXNzZW1ibGVkLCBzYXlpbmcgdGhhdCBoZSB3YXMgYW4gZXhpbGUgYW5kIHdhcyBleGNsdWRlZCBmcm9tIHRoZSBjb3VudHJ5IGJ5IHRoZSBsYXcsIGFuZCBpZiBoaXMgcHJlc2VuY2UgdGhlcmUgd2FzIGRlc2lyZWQsIHRoZSB2b3RlIHdoaWNoIGNhc3QgaGltIG91dCBtdXN0IGJlIHJlc2NpbmRlZCBieSBhbm90aGVyIHZvdGUsIHNpbmNlLCBpbmRlZWQsIGhlIHdhcyBhIGxhdy1hYmlkaW5nIG1hbiBhbmQgd2FzIHJldHVybmluZyB0byBhIGZyZWUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlIHBlb3BsZSB3ZXJlIHN1bW1vbmVkIHRvIHRoZSBmb3J1bTsgYW5kIGJlZm9yZSB0aHJlZSBvciBmb3VyIG9mIHRoZSB0cmliZXMgaGFkIGNhc3QgdGhlaXIgdm90ZXMsIGhlIHRocmV3IGFzaWRlIGhpcyBmZWlnbmluZyBhbmQgYWxsIHRoYXQgamV0dHkgdGFsayBhYm91dCBiZWluZyBhbiBleGlsZSwgYW5kIGVudGVyZWQgdGhlIGNpdHksIGhhdmluZyBhcyBoaXMgYm9keS1ndWFyZCBhIHBpY2tlZCBiYW5kIG9mIHRoZSBzbGF2ZXMgd2hvIGhhZCBmbG9ja2VkIHRvIGhpcyBzdGFuZGFyZCwgdG8gd2hvbSBoZSBoYWQgZ2l2ZW4gdGhlIG5hbWUgb2YgQmFyZHlhZWkuIFRoZXNlIGZlbGxvd3Mga2lsbGVkIG1hbnkgb2YgdGhlIGNpdGl6ZW5zIGF0IGEgd29yZCBvZiBjb21tYW5kIGZyb20gaGltLCBtYW55LCB0b28sIGF0IGEgbWVyZSBub2Q7IGFuZCBhdCBsYXN0LCB3aGVuIEFuY2hhcml1cywgYSBtYW4gb2Ygc2VuYXRvcmlhbCBhbmQgcHJhZXRvcmlhbCBkaWduaXR5LCBtZXQgTWFyaXVzIGFuZCBnb3Qgbm8gc2FsdXRhdGlvbiBmcm9tIGhpbSwgdGhleSBzdHJ1Y2sgaGltIGRvd24gd2l0aCB0aGVpciBzd29yZHMgYmVmb3JlIHRoZSBmYWNlIG9mIHRoZWlyIG1hc3Rlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd2hlbmV2ZXIgYW55Ym9keSBlbHNlIGdyZWV0ZWQgTWFyaXVzIGFuZCBnb3Qgbm8gc2FsdXRhdGlvbiBvciBncmVldGluZyBpbiByZXR1cm4sIHRoaXMgb2YgaXRzZWxmIHdhcyBhIHNpZ25hbCBmb3IgdGhlIG1hbidzIHNsYXVnaHRlciBpbiB0aGUgdmVyeSBzdHJlZXQsIHNvIHRoYXQgZXZlbiB0aGUgZnJpZW5kcyBvZiBNYXJpdXMsIHRvIGEgbWFuLCB3ZXJlIGZ1bGwgb2YgYW5ndWlzaCBhbmQgaG9ycm9yIHdoZW5ldmVyIHRoZXkgZHJldyBuZWFyIHRvIGdyZWV0IGhpbS4gU28gbWFueSB3ZXJlIHNsYWluIHRoYXQgYXQgbGFzdCBDaW5uYSdzIGFwcGV0aXRlIGZvciBtdXJkZXIgd2FzIGR1bGxlZCBhbmQgc2F0ZWQ7IGJ1dCBNYXJpdXMsIHdob3NlIGFuZ2VyIGluY3JlYXNlZCBkYXkgYnkgZGF5IGFuZCB0aGlyc3RlZCBmb3IgYmxvb2QsIGtlcHQgb24ga2lsbGluZyBhbGwgd2hvbSBoZSBoZWxkIGluIGFueSBzdXNwaWNpb24gd2hhdHNvZXZlci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RXZlcnkgcm9hZCBhbmQgZXZlcnkgY2l0eSB3YXMgZmlsbGVkIHdpdGggbWVuIHB1cnN1aW5nIGFuZCBodW50aW5nIGRvd24gdGhvc2Ugd2hvIHNvdWdodCB0byBlc2NhcGUgb3IgaGFkIGhpZGRlbiB0aGVtc2VsdmVzLiBNb3Jlb3ZlciwgdGhlIHRydXN0IC1tZW4gcGxhY2VkIGluIHRoZSB0aWVzIG9mIGhvc3BpdGFsaXR5IGFuZCBmcmllbmRzaGlwIHdhcyBmb3VuZCB0byBiZSBubyBzZWN1cml0eSBhZ2FpbnN0IHRoZSBzdHJva2VzIG9mIEZvcnR1bmU7IGZvciBmZXcgdGhlcmUgd2VyZSwgYWxsIHRvbGQsIHdobyBkaWQgbm90IGJldHJheSB0byB0aGUgbXVyZGVyZXJzIHRob3NlIHdobyBoYWQgdGFrZW4gcmVmdWdlIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoZSBtb3JlIHdvcnRoeSBvZiBwcmFpc2UgYW5kIGFkbWlyYXRpb24sIHRoZW4sIHdhcyB0aGUgYmVoYXZpb3VyIG9mIHRoZSBzbGF2ZXMgb2YgQ29ybnV0dXMuIFRoZXkgY29uY2VhbGVkIHRoZWlyIG1hc3RlciBpbiBoaXMgaG91c2U7IHRoZW4gdGhleSBodW5nIHVwIGJ5IHRoZSBuZWNrIG9uZSBvZiB0aGUgbWFueSBkZWFkIGJvZGllcyB0aGF0IGxheSBhYm91dCwgcHV0IGEgZ29sZCByaW5nIG9uIGl0cyBmaW5nZXIsIGFuZCBzaG93ZWQgaXQgdG8gdGhlIGd1YXJkcyBvZiBNYXJpdXMsIGFmdGVyIHdoaWNoIHRoZXkgZGVja2VkIGl0IG91dCBhcyBpZiBpdCB3ZXJlIHRoZWlyIG1hc3RlcidzIGJvZHkgYW5kIGdhdmUgaXQgYnVyaWFsLiBOb2JvZHkgc3VzcGVjdGVkIHRoZSBydXNlLCBhbmQgdGh1cyBDb3JudXR1cyBlc2NhcGVkIG5vdGljZSBhbmQgd2FzIGNvbnZleWVkIGJ5IGhpcyBzbGF2ZXMgaW50byBHYXVsLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY3VzIEFudG9uaXVzIGFsc28sIHRoZSBvcmF0b3IsIGZvdW5kIGEgZmFpdGhmdWwgZnJpZW5kLCBidXQgaXQgZGlkIG5vdCBzYXZlIGhpbS4gRm9yIHRoaXMgZnJpZW5kLCB3aG8gd2FzIGEgcG9vciBwbGViZWlhbiBhbmQgaGFkIHJlY2VpdmVkIGludG8gaGlzIGhvdXNlIGEgbGVhZGluZyBtYW4gb2YgUm9tZSwgd2hvbSBoZSB3aXNoZWQgdG8gZW50ZXJ0YWluIGFzIHdlbGwgYXMgaGUgY291bGQsIHNlbnQgYSBzbGF2ZSB0byBhIG5laWdoYm91cmluZyBpbm5rZWVwZXIgdG8gZ2V0IHNvbWUgd2luZS4gQXMgdGhlIHNsYXZlIHRhc3RlZCB0aGUgd2luZSBtb3JlIGNhcmVmdWxseSB0aGFuIHVzdWFsIGFuZCBvcmRlcmVkIHNvbWUgb2YgYmV0dGVyIHF1YWxpdHksIHRoZSBpbm5rZWVwZXIgYXNrZWQgaGltIHdoYXQgd2FzIHRoZSByZWFzb24gdGhhdCBoZSBkaWQgbm90IGJ1eSB0aGUgbmV3IGFuZCBvcmRpbmFyeSB3aW5lIGFzIHVzdWFsLCBpbnN0ZWFkIG9mIHdhbnRpbmcgc29tZSB0aGF0IHdhcyBjaG9pY2UgYW5kIGV4cGVuc2l2ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNsYXZlLCBpbiBoaXMgZ3JlYXQgc2ltcGxpY2l0eSwgY29uc2Npb3VzIHRoYXQgaGUgd2FzIGRlYWxpbmcgd2l0aCBhbiBvbGQgYWNxdWFpbnRhbmNlLCB0b2xkIGhpbSB0aGF0IGhpcyBtYXN0ZXIgd2FzIGVudGVydGFpbmluZyBNYXJjdXMgQW50b25pdXMsIHdobyB3YXMgY29uY2VhbGVkIGF0IGhpcyBob3VzZS4gQXMgc29vbiBhcyB0aGUgc2xhdmUgaGFkIGdvbmUgaG9tZSwgdGhlIGlubmtlZXBlciwgd2hvIHdhcyBhbiBpbXBpb3VzIGFuZCBwZXN0aWxlbnQgZmVsbG93LCBoYXN0ZW5lZCBpbiBwZXJzb24gdG8gZmluZCBNYXJpdXMsIHdobyB3YXMgYWxyZWFkeSBhdCBzdXBwZXIsIGFuZCBvbiBiZWluZyBpbnRyb2R1Y2VkLCBwcm9taXNlZCB0byBiZXRyYXkgQW50b25pdXMgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIE1hcml1cyBoZWFyZCB0aGlzLCBhcyB3ZSBhcmUgdG9sZCwgYSBsb3VkIGNyeSBidXJzdCBmcm9tIGhpcyBsaXBzIGFuZCBoZSBjbGFwcGVkIGhpcyBoYW5kcyBmb3Igam95OyBoZSBhY3R1YWxseSBjYW1lIG5lYXIgc3ByaW5naW5nIGZyb20gaGlzIHNlYXQgYW5kIGh1cnJ5aW5nIHRvIHRoZSBwbGFjZSBoaW1zZWxmLCBidXQgaGlzIGZyaWVuZHMgcmVzdHJhaW5lZCBoaW07IHNvIGhlIHNlbnQgQW5uaXVzIGFuZCBzb21lIHNvbGRpZXJzIHdpdGggaGltLCBvcmRlcmluZyB0aGVtIHRvIGJyaW5nIGhpbSB0aGUgaGVhZCBvZiBBbnRvbml1cyB3aXRoIGFsbCBzcGVlZC4gQWNjb3JkaW5nbHksIHdoZW4gdGhleSB3ZXJlIGNvbWUgdG8gdGhlIGhvdXNlLCBBbm5pdXMgc3RvcHBlZCBhdCB0aGUgZG9vciwgd2hpbGUgdGhlIHNvbGRpZXJzIGNsaW1iZWQgdGhlIHN0YWlycyBhbmQgZW50ZXJlZCB0aGUgcm9vbS4gQnV0IHdoZW4gdGhleSBiZWhlbGQgQW50b25pdXMsIGV2ZXJ5IG1hbiBiZWdhbiB0byB1cmdlIGFuZCBwdXNoIGZvcndhcmQgYSBjb21wYW5pb24gdG8gZG8gdGhlIG11cmRlciBpbnN0ZWFkIG9mIGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIGluZGVzY3JpYmFibGUsIGhvd2V2ZXIsIGFzIGl0IHdvdWxkIHNlZW0sIHdhcyB0aGUgZ3JhY2UgYW5kIGNoYXJtIG9mIGhpcyB3b3JkcywgdGhhdCB3aGVuIEFudG9uaXVzIGJlZ2FuIHRvIHNwZWFrIGFuZCBwcmF5IGZvciBoaXMgbGlmZSwgbm90IGEgc29sZGllciBoYWQgdGhlIGhhcmRpaG9vZCB0byBsYXkgaGFuZHMgb24gaGltIG9yIGV2ZW4gdG8gbG9vayBoaW0gaW4gdGhlIGZhY2UsIGJ1dCB0aGV5IGFsbCBiZW50IHRoZWlyIGhlYWRzIGRvd24gYW5kIHdlcHQuIFBlcmNlaXZpbmcgdGhhdCB0aGVyZSB3YXMgc29tZSBkZWxheSwgQW5uaXVzIHdlbnQgdXBzdGFpcnMsIGFuZCBzYXcgdGhhdCBBbnRvbml1cyB3YXMgcGxlYWRpbmcgYW5kIHRoYXQgdGhlIHNvbGRpZXJzIHdlcmUgYWJhc2hlZCBhbmQgZW5jaGFudGVkIGJ5IGhpcyB3b3Jkczsgc28gaGUgY3Vyc2VkIGhpcyBtZW4sIGFuZCBydW5uaW5nIHVwIHRvIEFudG9uaXVzLCB3aXRoIGhpcyBvd24gaGFuZHMgY3V0IG9mZiBoaXMgaGVhZC4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGUgZnJpZW5kcyBvZiBDYXR1bHVzIEx1dGF0aXVzLCB3aG8gaGFkIGJlZW4gYSBjb2xsZWFndWUgb2YgTWFyaXVzIGluIHRoZSBjb25zdWxzaGlwLCBhbmQgd2l0aCBoaW0gaGFkIGNlbGVicmF0ZWQgYSB0cml1bXBoIG92ZXIgdGhlIENpbWJyaSwgaW50ZXJjZWRlZCBmb3IgaGltIGFuZCBiZWdnZWQgTWFyaXVzIHRvIHNwYXJlIGhpcyBsaWZlOyBidXQgdGhlIG9ubHkgYW5zd2VyIHRoZXkgY291bGQgZ2V0IHdhczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZSBtdXN0IGRpZS48L3E+IENhdHVsdXMgdGhlcmVmb3JlIHNodXQgaGltc2VsZiB1cCBpbiBhIHJvb20sIGxpZ2h0ZWQgdXAgYSBncmVhdCBxdWFudGl0eSBvZiBjaGFyY29hbCwgYW5kIHdhcyBzdWZmb2NhdGVkLgoJCQk8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhlYWRsZXNzIHRydW5rcyB0aHJvd24gaW50byB0aGUgc3RyZWV0cyBhbmQgdHJhbXBsZWQgdW5kZXIgZm9vdCBleGNpdGVkIG5vIHBpdHksIHRob3VnaCBldmVyeWJvZHkgdHJlbWJsZWQgYW5kIHNodWRkZXJlZCBhdCB0aGUgc2lnaHQuIFRoZSBwZW9wbGUgd2VyZSBtb3N0IGRpc3RyZXNzZWQsIGhvd2V2ZXIsIGJ5IHRoZSB3YW50b24gbGljZW5jZSBvZiB0aGUgQmFyZHlhZWksIGFzIHRoZXkgd2VyZSBjYWxsZWQsIHdobyBidXRjaGVyZWQgZmF0aGVycyBvZiBmYW1pbGllcyBpbiB0aGVpciBob3VzZXMsIG91dHJhZ2VkIHRoZWlyIGNoaWxkcmVuLCB2aW9sYXRlZCB0aGVpciB3aXZlcywgYW5kIGNvdWxkIG5vdCBiZSBjaGVja2VkIGluIHRoZWlyIGNhcmVlciBvZiByYXBpbmUgYW5kIG11cmRlciB1bnRpbCBDaW5uYSBhbmQgU2VydG9yaXVzLCBhZnRlciB0YWtpbmcgY291bnNlbCB0b2dldGhlciwgZmVsbCB1cG9uIHRoZW0gYXMgdGhleSB3ZXJlIGFzbGVlcCBpbiB0aGVpciBjYW1wLCBhbmQgdHJhbnNmaXhlZCB0aGVtIGFsbCB3aXRoIGphdmVsaW5zLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTZXJ0LiA1LjUiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPlNlcnRvcml1cyA8L3RpdGxlPiwgdi4gNSA8L2JpYmw+LiA8L25vdGU+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQ1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBhcyBpZiBhIGNoYW5nZSBvZiB3aW5kIHdlcmUgY29taW5nIG9uLCBtZXNzZW5nZXJzIGFycml2ZWQgZnJvbSBhbGwgcXVhcnRlcnMgd2l0aCByZXBvcnRzIHRoYXQgU3VsbGEgaGFkIGZpbmlzaGVkIHRoZSB3YXIgd2l0aCBNaXRocmlkYXRlcywgaGFkIHJlY292ZXJlZCB0aGUgcHJvdmluY2VzLCBhbmQgd2FzIHNhaWxpbmcgZm9yIGhvbWUgd2l0aCBhIGxhcmdlIGZvcmNlLiBUaGlzIGdhdmUgYSBicmllZiBzdGF5IGFuZCBhIHNsaWdodCBjZXNzYXRpb24gdG8gdGhlIGNpdHkncyB1bnNwZWFrYWJsZSBldmlscywgc2luY2UgbWVuIHN1cHBvc2VkIHRoYXQgdGhlIHdhciB3YXMgYWxsIGJ1dCB1cG9uIHRoZW0uIEFjY29yZGluZ2x5LCBNYXJpdXMgd2FzIGVsZWN0ZWQgY29uc3VsIGZvciB0aGUgc2V2ZW50aCB0aW1lLCBhbmQgYXNzdW1pbmcgb2ZmaWNlIG9uIHRoZSB2ZXJ5IENhbGVuZHMgb2YgSmFudWFyeSwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODYgQi5DLiA8L25vdGU+IHdoaWNoIGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHllYXIsIGhlIGhhZCBhIGNlcnRhaW4gU2V4dHVzIEx1Y2ludXMgdGhyb3duIGRvd24gdGhlIFRhcnBlaWFuIHJvY2suIFRoaXMgd2FzIHRob3VnaHQgdG8gYmUgYSBtb3N0IHNpZ25pZmljYW50IHBvcnRlbnQgb2YgdGhlIGV2aWxzIHRoYXQgd2VyZSBvbmNlIG1vcmUgdG8gZmFsbCBib3RoIHVwb24gdGhlIHBhcnRpc2FucyBvZiBNYXJpdXMgYW5kIHVwb24gdGhlIGNpdHkuCgkJCTwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgTWFyaXVzIGhpbXNlbGYsIG5vdyB3b3JuIG91dCB3aXRoIHRvaWxzLCBkZWx1Z2VkLCBhcyBpdCB3ZXJlLCB3aXRoIGFueGlldGllcywgYW5kIHdlYXJpZWQsIGNvdWxkIG5vdCBzdXN0YWluIGhpcyBzcGlyaXRzLCB3aGljaCBzaG9vayB3aXRoaW4gaGltIGFzIGhlIGFnYWluIGZhY2VkIHRoZSBvdmVycG93ZXJpbmcgdGhvdWdodCBvZiBhIG5ldyB3YXIsIG9mIGZyZXNoIHN0cnVnZ2xlcywgb2YgdGVycm9ycyBrbm93biBieSBleHBlcmllbmNlIHRvIGJlIGRyZWFkZnVsLCBhbmQgb2YgdXR0ZXIgd2VhcmluZXNzLiBIZSByZWZsZWN0ZWQsIHRvbywgdGhhdCBpdCB3YXMgbm90IE9jdGF2aXVzIG9yIE1lcnVsYSBpbiBjb21tYW5kIG9mIGEgcHJvbWlzY3VvdXMgdGhyb25nIGFuZCBhIHNlZGl0aW91cyByYWJibGUgYWdhaW5zdCB3aG9tIGhlIHdhcyBub3cgdG8gcnVuIHRoZSBoYXphcmQgb2Ygd2FyLCBidXQgdGhhdCB0aGUgZmFtb3VzIFN1bGxhIHdhcyBjb21pbmcgYWdhaW5zdCBoaW0sIHRoZSBtYW4gd2hvIGhhZCBvbmNlIGVqZWN0ZWQgaGltIGZyb20gdGhlIGNvdW50cnksIGFuZCBoYWQgbm93IHNodXQgTWl0aHJpZGF0ZXMgdXAgdG8gdGhlIHNob3JlcyBvZiB0aGUgRXV4aW5lIFNlYS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VG9ydHVyZWQgYnkgc3VjaCByZWZsZWN0aW9ucywgYW5kIGJyaW5naW5nIGludG8gcmV2aWV3IGhpcyBsb25nIHdhbmRlcmluZywgaGlzIGZsaWdodHMsIGFuZCBoaXMgcGVyaWxzLCBhcyBoZSB3YXMgZHJpdmVuIG92ZXIgbGFuZCBhbmQgc2VhLCBoZSBmZWxsIGludG8gYSBzdGF0ZSBvZiBkcmVhZGZ1bCBkZXNwYWlyLCBhbmQgd2FzIGEgcHJleSB0byBuaWdodGx5IHRlcnJvcnMgYW5kIGhhcmFzc2luZyBkcmVhbXMsIHdoZXJlaW4gaGUgd291bGQgZXZlciBzZWVtIHRvIGhlYXIgYSB2b2ljZSBzYXlpbmc64oCUCgkJCQkKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+RHJlYWRmdWwsIGluZGVlZCwgaXMgdGhlIGxpb24ncyBsYWlyLCBldmVuIHRob3VnaCBpdCA8L2w+CgkJCQkJICAgICAgICAgIDxsPmJlIGVtcHR5LjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkEgaGV4YW1ldGVyIHZlcnNlIG9mIHVua25vd24gYXV0aG9yc2hpcC4gPC9ub3RlPiAKCQkJCQoJCQkJQW5kIHNpbmNlIGFib3ZlIGFsbCB0aGluZ3MgaGUgZHJlYWRlZCB0aGUgc2xlZXBsZXNzIG5pZ2h0cywgaGUgZ2F2ZSBoaW1zZWxmIHVwIHRvIGRyaW5raW5nLWJvdXRzIGFuZCBkcnVua2VubmVzcyBhdCB1bnNlYXNvbmFibGUgaG91cnMgYW5kIGluIGEgbWFubmVyIHVuc3VpdGVkIHRvIGhpcyB5ZWFycywgdHJ5aW5nIHRodXMgdG8gaW5kdWNlIHNsZWVwIGFzIGEgd2F5IG9mIGVzY2FwZSBmcm9tIGhpcyBhbnhpb3VzIHRob3VnaHRzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgZmluYWxseSwgd2hlbiBvbmUgY2FtZSB3aXRoIHRpZGluZ3MgZnJvbSB0aGUgc2VhLCBmcmVzaCB0ZXJyb3JzIGZlbGwgdXBvbiBoaW0sIHBhcnRseSBiZWNhdXNlIGhlIGZlYXJlZCB0aGUgZnV0dXJlLCBhbmQgcGFydGx5IGJlY2F1c2UgaGUgd2FzIHdlYXJpZWQgdG8gc2F0aWV0eSBieSB0aGUgcHJlc2VudCwgc28gdGhhdCBpdCBuZWVkZWQgb25seSBhIHNsaWdodCBpbXB1bHNlIHRvIHRocm93IGhpbSBpbnRvIGEgcGxldXJpc3ksIGFzIFBvc2VpZG9uaXVzIHRoZSBwaGlsb3NvcGhlciByZWxhdGVzLCB3aG8gc2F5cyB0aGF0IGhlIHdlbnQgaW4gcGVyc29uYWxseSBhbmQgY29udmVyc2VkIHdpdGggTWFyaXVzIG9uIHRoZSBzdWJqZWN0cyBvZiBoaXMgZW1iYXNzeSBhZnRlciBNYXJpdXMgaGFkIGZhbGxlbiBpbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhIGNlcnRhaW4gQ2FpdXMgUGlzbywgYW4gaGlzdG9yaWFuLCByZWxhdGVzIHRoYXQgTWFyaXVzLCB3aGlsZSB3YWxraW5nIGFib3V0IHdpdGggaGlzIGZyaWVuZHMgYWZ0ZXIgc3VwcGVyLCBmZWxsIHRvIHRhbGtpbmcgYWJvdXQgdGhlIGV2ZW50cyBvZiBoaXMgbGlmZSwgYmVnaW5uaW5nIHdpdGggaGlzIGVhcmxpZXN0IGRheXMsIGFuZCBhZnRlciByZWNvdW50aW5nIGhpcyBmcmVxdWVudCByZXZlcnNhbHMgb2YgZm9ydHVuZSwgZnJvbSBnb29kIHRvIGJhZCBhbmQgZnJvbSBiYWQgdG8gZ29vZCwgc2FpZCB0aGF0IGl0IHdhcyBub3QgdGhlIHBhcnQgb2YgYSBtYW4gb2Ygc2Vuc2UgdG8gdHJ1c3QgaGltc2VsZiB0byBGb3J0dW5lIGFueSBsb25nZXI7IGFuZCBhZnRlciB0aGlzIHV0dGVyYW5jZSBiYWRlIGhpcyBmcmllbmRzIGZhcmV3ZWxsLCBrZXB0IGhpcyBiZWQgZm9yIHNldmVuIGRheXMgY29uc2VjdXRpdmVseSwgYW5kIHNvIGRpZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGhpcyBhbWJpdGlvdXMgbmF0dXJlIHdhcyBjb21wbGV0ZWx5IHJldmVhbGVkIGR1cmluZyBoaXMgaWxsbmVzcyBieSBoaXMgYmVpbmcgc3dlcHQgaW50byBhIHN0cmFuZ2UgZGVsdXNpb24uIEhlIHRob3VnaHQgdGhhdCBoZSBoYWQgdGhlIGNvbW1hbmQgaW4gdGhlIE1pdGhyaWRhdGljIHdhciwgYW5kIHRoZW4sIGp1c3QgYXMgaGUgdXNlZCB0byBkbyBpbiBoaXMgYWN0dWFsIHN0cnVnZ2xlcywgaGUgd291bGQgaW5kdWxnZSBpbiBhbGwgc29ydHMgb2YgYXR0aXR1ZGVzIGFuZCBnZXN0dXJlcywgYWNjb21wYW55aW5nIHRoZW0gd2l0aCBzaHJpbGwgY3JpZXMgYW5kIGZyZXF1ZW50IGNhbGxzIHRvIGJhdHRsZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+U28gZmllcmNlIGFuZCBpbmV4b3JhYmxlIHdhcyB0aGUgcGFzc2lvbiBmb3IgZGlyZWN0aW5nIHRoYXQgd2FyIHdoaWNoIGhhZCBiZWVuIGluc3RpbGxlZCBpbnRvIGhpbSBieSBoaXMgZW52eSBhbmQgbHVzdCBvZiBwb3dlci4gQW5kIHRoZXJlZm9yZSwgdGhvdWdoIGhlIGhhZCBsaXZlZCB0byBiZSBzZXZlbnR5IHllYXJzIG9sZCwgYW5kIHdhcyB0aGUgZmlyc3QgbWFuIHRvIGJlIGVsZWN0ZWQgY29uc3VsIGZvciB0aGUgc2V2ZW50aCB0aW1lLCBhbmQgd2FzIHBvc3Nlc3NlZCBvZiBhIGhvdXNlIGFuZCB3ZWFsdGggd2hpY2ggd291bGQgaGF2ZSBzdWZmaWNlZCBmb3IgbWFueSBraW5nZG9tcyBhdCBvbmNlLCBoZSBsYW1lbnRlZCBoaXMgZm9ydHVuZSwgaW4gdGhhdCBoZSB3YXMgZHlpbmcgYmVmb3JlIGhlIGhhZCBzYXRpc2ZpZWQgYW5kIGNvbXBsZXRlZCBoaXMgZGVzaXJlcy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlBsYXRvLCBob3dldmVyLCB3aGVuIGhlIHdhcyBub3cgYXQgdGhlIHBvaW50IG9mIGRlYXRoLCBsYXVkZWQgaGlzIGd1YXJkaWFuIGdlbml1cyBhbmQgRm9ydHVuZSBiZWNhdXNlLCB0byBiZWdpbiB3aXRoLCBoZSBoYWQgYmVlbiBib3JuIGEgbWFuIGFuZCBub3QgYW4gaXJyYXRpb25hbCBhbmltYWw7IGFnYWluLCBiZWNhdXNlIGhlIHdhcyBhIEdyZWVrIGFuZCBub3QgYSBCYXJiYXJpYW47IGFuZCBzdGlsbCBhZ2FpbiwgYmVjYXVzZSBoaXMgYmlydGggaGFkIGZhbGxlbiBpbiB0aGUgdGltZXMgb2YgU29jcmF0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhleSBzYXkgdGhhdCBBbnRpcGF0ZXIgb2YgVGFyc3VzLCB3aGVuIGhlIHdhcyBpbiBsaWtlIG1hbm5lciBuZWFyIGhpcyBlbmQgYW5kIHdhcyBlbnVtZXJhdGluZyB0aGUgYmxlc3NpbmdzIG9mIGhpcyBsaWZlLCBkaWQgbm90IGZvcmdldCB0byBtZW50aW9uIGhpcyBwcm9zcGVyb3VzIHZveWFnZSBmcm9tIGhvbWUgdG8gQXRoZW5zLCBqdXN0IGFzIHRob3VnaCBoZSB0aG91Z2h0IHRoYXQgZXZlcnkgZ2lmdCBvZiBhIGJlbmV2b2xlbnQgRm9ydHVuZSBjYWxsZWQgZm9yIGdyZWF0IGdyYXRpdHVkZSwgYW5kIGtlcHQgaXQgdG8gdGhlIGxhc3QgaW4gaGlzIG1lbW9yeSwgd2hpY2ggaXMgdGhlIG1vc3Qgc2VjdXJlIHN0b3JlaG91c2Ugb2YgYmxlc3NpbmdzIGZvciBhIG1hbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VW5taW5kZnVsIGFuZCB0aG91Z2h0bGVzcyBwZXJzb25zLCBvbiB0aGUgY29udHJhcnksIGxldCBhbGwgdGhhdCBoYXBwZW5zIHRvIHRoZW0gc2xpcCBhd2F5IGFzIHRpbWUgZ29lcyBvbjsgdGhlcmVmb3JlLCBzaW5jZSB0aGV5IGRvIG5vdCBob2xkIG9yIGtlZXAgYW55dGhpbmcsIHRoZXkgYXJlIGFsd2F5cyBlbXB0eSBvZiBibGVzc2luZ3MsIGJ1dCBmdWxsIG9mIGhvcGVzLCBhbmQgYXJlIGxvb2tpbmcgYXdheSB0byB0aGUgZnV0dXJlIHdoaWxlIHRoZXkgbmVnbGVjdCB0aGUgcHJlc2VudC4gQW5kIHlldCB0aGUgZnV0dXJlIG1heSBiZSBwcmV2ZW50ZWQgYnkgRm9ydHVuZSwgd2hpbGUgdGhlIHByZXNlbnQgY2Fubm90IGJlIHRha2VuIGF3YXk7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm5ldmVydGhlbGVzcyB0aGVzZSBtZW4gY2FzdCBhc2lkZSB0aGUgcHJlc2VudCBnaWZ0IG9mIEZvcnR1bmUgYXMgc29tZXRoaW5nIGFsaWVuIHRvIHRoZW0sIHdoaWxlIHRoZXkgZHJlYW0gb2YgdGhlIGZ1dHVyZSBhbmQgaXRzIHVuY2VydGFpbnRpZXMuIEFuZCB0aGlzIGlzIG5hdHVyYWwuIEZvciB0aGV5IGFzc2VtYmxlIGFuZCBoZWFwIHRvZ2V0aGVyIHRoZSBleHRlcm5hbCBibGVzc2luZ3Mgb2YgbGlmZSBiZWZvcmUgcmVhc29uIGFuZCBlZHVjYXRpb24gaGF2ZSBlbmFibGVkIHRoZW0gdG8gYnVpbGQgYW55IGZvdW5kYXRpb24gYW5kIGJhc2VtZW50IGZvciB0aGVzZSB0aGluZ3MsIGFuZCB0aGVyZWZvcmUgdGhleSBjYW5ub3Qgc2F0aXNmeSB0aGUgaW5zYXRpYWJsZSBhcHBldGl0ZSBvZiB0aGVpciBzb3Vscy4KCQkJPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBNYXJpdXMgZGllZCwgc2V2ZW50ZWVuIGRheXMgYWZ0ZXIgZW50ZXJpbmcgdXBvbiBoaXMgc2V2ZW50aCBjb25zdWxzaGlwLiBBbmQgaW1tZWRpYXRlbHkgUm9tZSB3YXMgZmlsbGVkIHdpdGggZ3JlYXQgcmVqb2ljaW5nIGFuZCBhIGNvbmZpZGVudCBob3BlIHRoYXQgc2hlIHdhcyByaWQgb2YgYSBncmlldm91cyB0eXJhbm55OyBidXQgaW4gYSBmZXcgZGF5cyB0aGUgcGVvcGxlIHBlcmNlaXZlZCB0aGF0IHRoZXkgaGFkIGdvdCBhIG5lcnZlIGFuZCB2aWdvcm91cyBtYXN0ZXIgaW4gZXhjaGFuZ2UgZm9yIHRoZSBvbGQgb25lOyBzdWNoIGJpdHRlcm5lc3MgYW5kIGNydWVsdHkgZGlkIHRoZSB5b3VuZ2VyIE1hcml1cyBkaXNwbGF5LCBwdXR0aW5nIHRvIGRlYXRoIHRoZSBiZXN0IGFuZCBtb3N0IGVzdGVlbWVkIGNpdGl6ZW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5IZSBnb3QgdGhlIHJlcHV0YXRpb24gb2YgYmVpbmcgYm9sZCBhbmQgZm9uZCBvZiBkYW5nZXIgaW4gZmlnaHRpbmcgaGlzIGVuZW1pZXMsIGFuZCBpbiB0aGUgYmVnaW5uaW5nIHdhcyBjYWxsZWQgYSBzb24gb2YgTWFyczsgYnV0IGhpcyBkZWVkcyBzb29uIHNob3dlZCB3aGF0IGhlIHJlYWxseSB3YXMsIGFuZCBoZSB3YXMgY2FsbGVkIGluc3RlYWQgYSBzb24gb2YgVmVudXMuIEFuZCBmaW5hbGx5IGhlIHdhcyBzaHV0IHVwIGluIFByYWVuZXN0ZSBieSBTdWxsYSwgYW5kIGFmdGVyIG1hbnkgdmFpbiBhdHRlbXB0cyB0byBzYXZlIGhpcyBsaWZlLCB3aGVuIHRoZSBjaXR5IHdhcyBjYXB0dXJlZCBhbmQgaGUgY291bGQgbm90IGVzY2FwZSwgaGUgc2xldyBoaW1zZWxmLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAzMi4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TdWxsYSA8L3RpdGxlPiwgeHh4aWkuIDEgPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgPC9ib2R5PgogICA8aGVhZCBjbGFzcz0idHJhbnNsYXRpb24iPkNBSVVTIE1BUklVUzwvaGVhZD4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9mIGEgdGhpcmQgbmFtZSBmb3IgQ2FpdXMgTWFyaXVzIHdlIGFyZSBpZ25vcmFudCwgYXMgd2UgYXJlIGluIHRoZSBjYXNlIG9mIFF1aW50dXMgU2VydG9yaXVzIHRoZSBzdWJkdWVyIG9mIFNwYWluLCBhbmQgb2YgTHVjaXVzIE11bW1pdXMgdGhlIGNhcHRvciBvZiBDb3JpbnRoOyBmb3IgTXVtbWl1cyByZWNlaXZlZCB0aGUgc3VybmFtZSBvZiBBY2hhw69jdXMgZnJvbSBoaXMgZ3JlYXQgZXhwbG9pdCwgYXMgU2NpcGlvIHJlY2VpdmVkIHRoYXQgb2YgQWZyaWNhbnVzLCBhbmQgTWV0ZWxsdXMgdGhhdCBvZiBNYWNlZG9uaWN1cy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gcm9tIHRoaXMgY2lyY3Vtc3RhbmNlIHBhcnRpY3VsYXJseSBQb3NlaWRvbml1cyB0aGlua3MgdG8gY29uZnV0ZSB0aG9zZSB3aG8gaG9sZCB0aGF0IHRoZSB0aGlyZCBuYW1lIGlzIHRoZSBSb21hbiBwcm9wZXIgbmFtZSwgYXMsIGZvciBpbnN0YW5jZSwgQ2FtaWxsdXMsIE1hcmNlbGx1cywgb3IgQ2F0bzsgZm9yIGlmIHRoYXQgd2VyZSBzbywgaGUgc2F5cywgdGhlbiB0aG9zZSB3aXRoIG9ubHkgdHdvIG5hbWVzIHdvdWxkIGhhdmUgaGFkIG5vIHByb3BlciBuYW1lIGF0IGFsbC4gQnV0IGl0IGVzY2FwZXMgaGlzIG5vdGljZSB0aGF0IGhpcyBvd24gbGluZSBvZiByZWFzb25pbmcsIGlmIGV4dGVuZGVkIHRvIHdvbWVuLCByb2JzIHRoZW0gb2YgdGhlaXIgcHJvcGVyIG5hbWVzOyBmb3Igbm8gd29tYW4gaXMgZ2l2ZW4gdGhlIGZpcnN0IG5hbWUsIHdoaWNoIFBvc2VpZG9uaXVzIHRoaW5rcyB3YXMgdGhlIHByb3BlciBuYW1lIGFtb25nIHRoZSBSb21hbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBvZiB0aGUgb3RoZXIgdHdvIG5hbWVzLCBvbmUgd2FzIGNvbW1vbiB0byB0aGUgd2hvbGUgZmFtaWx5LCBhcyBpbiB0aGUgY2FzZSBvZiB0aGUgUG9tcGVpaSwgdGhlIE1hbmxpaSwgb3IgdGhlIENvcm5lbGlpIChqdXN0IGFzIGEgR3JlZWsgbWlnaHQgc3BlYWsgb2YgdGhlIEhlcmFjbGVpZGFlIG9yIHRoZSBQZWxvcGlkYWUpLCBhbmQgdGhlIG90aGVyIHdhcyBhIGNvZ25vbWVuIG9yIGVwaXRoZXQsIGdpdmVuIHdpdGggcmVmZXJlbmNlIHRvIHRoZWlyIG5hdHVyZXMgb3IgdGhlaXIgYWN0aW9ucywgb3IgdG8gdGhlaXIgYm9kaWx5IGFwcGVhcmFuY2VzIG9yIGRlZmVjdHMsIE1hY3JpbnVzLCBmb3IgZXhhbXBsZSwgb3IgVG9ycXVhdHVzLCBvciBTdWxsYSAobGlrZSB0aGUgR3JlZWsgTW5lbW9uLCBHcnlwdXMsIG9yIENhbGxpbmljdXMpLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgZnVsbCBuYW1lIG9mIGEgUm9tYW4gY2l0aXplbiBjb25zaXN0ZWQgb2YgYSA8Zm9yZWlnbiBsYW5nPSJsYSI+cHJhZW5vbWVuIDwvZm9yZWlnbj4gKHRoZSAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGdsb3NzPmdpdmVuIDwvZ2xvc3M+LDwvcT4gb3IgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxnbG9zcz5wcm9wZXIgPC9nbG9zcz4KICAgICAgICAgICAgICAgPC9xPiBuYW1lKSwgYSA8Zm9yZWlnbiBsYW5nPSJsYSI+bm9tZW4gPC9mb3JlaWduPiBkZXNpZ25hdGluZyBoaXMgZmFtaWx5IG9yIDxmb3JlaWduIGxhbmc9ImxhIj5nZW5zIDwvZm9yZWlnbj4sIGFuZCBhIDxmb3JlaWduIGxhbmc9ImxhIj5jb2dub21lbiA8L2ZvcmVpZ24+LCB3aGljaCB3YXMgYWxzbyBoZXJlZGl0YXJ5LiBXb21lbiByYXJlbHkgaGFkIGEgPGZvcmVpZ24gbGFuZz0ibGEiPnByYWVub21lbiA8L2ZvcmVpZ24+LCBvciAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGdsb3NzPnByb3BlciA8L2dsb3NzPgogICAgICAgICAgICAgICA8L3E+IG5hbWUsIGJ1dCBib3JlIHRoZSBmYW1pbHkgbmFtZSBvbmx5LiA8L25vdGU+IEhvd2V2ZXIsIGluIHRoZXNlIG1hdHRlcnMgdGhlIGlycmVndWxhcml0eSBvZiBjdXN0b20gZnVybmlzaGVzIG1hbnkgdG9waWNzIGZvciBkaXNjdXNzaW9uLgoJCQk8L3A+CiAgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PZiBhIHRoaXJkIG5hbWUgZm9yIENhaXVzIE1hcml1cyB3ZSBhcmUgaWdub3JhbnQsIGFzIHdlIGFyZSBpbiB0aGUgY2FzZSBvZiBRdWludHVzIFNlcnRvcml1cyB0aGUgc3ViZHVlciBvZiBTcGFpbiwgYW5kIG9mIEx1Y2l1cyBNdW1taXVzIHRoZSBjYXB0b3Igb2YgQ29yaW50aDsgZm9yIE11bW1pdXMgcmVjZWl2ZWQgdGhlIHN1cm5hbWUgb2YgQWNoYcOvY3VzIGZyb20gaGlzIGdyZWF0IGV4cGxvaXQsIGFzIFNjaXBpbyByZWNlaXZlZCB0aGF0IG9mIEFmcmljYW51cywgYW5kIE1ldGVsbHVzIHRoYXQgb2YgTWFjZWRvbmljdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhpcyBjaXJjdW1zdGFuY2UgcGFydGljdWxhcmx5IFBvc2VpZG9uaXVzIHRoaW5rcyB0byBjb25mdXRlIHRob3NlIHdobyBob2xkIHRoYXQgdGhlIHRoaXJkIG5hbWUgaXMgdGhlIFJvbWFuIHByb3BlciBuYW1lLCBhcywgZm9yIGluc3RhbmNlLCBDYW1pbGx1cywgTWFyY2VsbHVzLCBvciBDYXRvOyBmb3IgaWYgdGhhdCB3ZXJlIHNvLCBoZSBzYXlzLCB0aGVuIHRob3NlIHdpdGggb25seSB0d28gbmFtZXMgd291bGQgaGF2ZSBoYWQgbm8gcHJvcGVyIG5hbWUgYXQgYWxsLiBCdXQgaXQgZXNjYXBlcyBoaXMgbm90aWNlIHRoYXQgaGlzIG93biBsaW5lIG9mIHJlYXNvbmluZywgaWYgZXh0ZW5kZWQgdG8gd29tZW4sIHJvYnMgdGhlbSBvZiB0aGVpciBwcm9wZXIgbmFtZXM7IGZvciBubyB3b21hbiBpcyBnaXZlbiB0aGUgZmlyc3QgbmFtZSwgd2hpY2ggUG9zZWlkb25pdXMgdGhpbmtzIHdhcyB0aGUgcHJvcGVyIG5hbWUgYW1vbmcgdGhlIFJvbWFucy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBvZiB0aGUgb3RoZXIgdHdvIG5hbWVzLCBvbmUgd2FzIGNvbW1vbiB0byB0aGUgd2hvbGUgZmFtaWx5LCBhcyBpbiB0aGUgY2FzZSBvZiB0aGUgUG9tcGVpaSwgdGhlIE1hbmxpaSwgb3IgdGhlIENvcm5lbGlpIChqdXN0IGFzIGEgR3JlZWsgbWlnaHQgc3BlYWsgb2YgdGhlIEhlcmFjbGVpZGFlIG9yIHRoZSBQZWxvcGlkYWUpLCBhbmQgdGhlIG90aGVyIHdhcyBhIGNvZ25vbWVuIG9yIGVwaXRoZXQsIGdpdmVuIHdpdGggcmVmZXJlbmNlIHRvIHRoZWlyIG5hdHVyZXMgb3IgdGhlaXIgYWN0aW9ucywgb3IgdG8gdGhlaXIgYm9kaWx5IGFwcGVhcmFuY2VzIG9yIGRlZmVjdHMsIE1hY3JpbnVzLCBmb3IgZXhhbXBsZSwgb3IgVG9ycXVhdHVzLCBvciBTdWxsYSAobGlrZSB0aGUgR3JlZWsgTW5lbW9uLCBHcnlwdXMsIG9yIENhbGxpbmljdXMpLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBmdWxsIG5hbWUgb2YgYSBSb21hbiBjaXRpemVuIGNvbnNpc3RlZCBvZiBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPnByYWVub21lbiA8L2ZvcmVpZ24+ICh0aGUgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Z2l2ZW4gPC9nbG9zcz4sPC9xPiBvciAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICAgICA8Z2xvc3MgY2xhc3M9InRyYW5zbGF0aW9uIj5wcm9wZXIgPC9nbG9zcz4KICAgICAgICAgICAgICAgPC9xPiBuYW1lKSwgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5ub21lbiA8L2ZvcmVpZ24+IGRlc2lnbmF0aW5nIGhpcyBmYW1pbHkgb3IgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Z2VucyA8L2ZvcmVpZ24+LCBhbmQgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5jb2dub21lbiA8L2ZvcmVpZ24+LCB3aGljaCB3YXMgYWxzbyBoZXJlZGl0YXJ5LiBXb21lbiByYXJlbHkgaGFkIGEgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cHJhZW5vbWVuIDwvZm9yZWlnbj4sIG9yIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPnByb3BlciA8L2dsb3NzPgogICAgICAgICAgICAgICA8L3E+IG5hbWUsIGJ1dCBib3JlIHRoZSBmYW1pbHkgbmFtZSBvbmx5LiA8L25vdGU+IEhvd2V2ZXIsIGluIHRoZXNlIG1hdHRlcnMgdGhlIGlycmVndWxhcml0eSBvZiBjdXN0b20gZnVybmlzaGVzIG1hbnkgdG9waWNzIGZvciBkaXNjdXNzaW9uLgoJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wcmFlbm9tZW4gPC9mb3JlaWduPiAodGhlIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgICAgIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPmdpdmVuIDwvZ2xvc3M+LDwvcT4gb3IgCgkJCQkJPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Z2l2ZW4gPC9nbG9zcz4sPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvcGVyIDwvZ2xvc3M+CiAgICAgICAgICAgICAgIDwvcT4gbmFtZSksIGEgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvcGVyIDwvZ2xvc3M+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPm5vbWVuIDwvZm9yZWlnbj4gZGVzaWduYXRpbmcgaGlzIGZhbWlseSBvciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5nZW5zIDwvZm9yZWlnbj4sIGFuZCBhIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNvZ25vbWVuIDwvZm9yZWlnbj4sIHdoaWNoIHdhcyBhbHNvIGhlcmVkaXRhcnkuIFdvbWVuIHJhcmVseSBoYWQgYSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wcmFlbm9tZW4gPC9mb3JlaWduPiwgb3IgCgkJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgICAgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+cHJvcGVyIDwvZ2xvc3M+CiAgICAgICAgICAgICAgIDwvcT4gbmFtZSwgYnV0IGJvcmUgdGhlIGZhbWlseSBuYW1lIG9ubHkuIDxnbG9zcyBjbGFzcz0idHJhbnNsYXRpb24iPnByb3BlciA8L2dsb3NzPgogICAgICAgICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgcGVyc29uYWwgYXBwZWFyYW5jZSBvZiBNYXJpdXMsIHdlIGhhdmUgc2VlbiBhIG1hcmJsZSBzdGF0dWUgb2YgaGltIGF0IFJhdmVubmEgaW4gR2F1bCwgYW5kIGl0IHZlcnkgd2VsbCBwb3J0cmF5cyB0aGUgaGFyc2huZXNzIGFuZCBiaXR0ZXJuZXNzIG9mIGNoYXJhY3RlciB3aGljaCBhcmUgYXNjcmliZWQgdG8gaGltLiBGb3Igc2luY2UgaGUgd2FzIG5hdHVyYWxseSB2aXJpbGUgYW5kIGZvbmQgb2Ygd2FyLCBhbmQgc2luY2UgaGUgcmVjZWl2ZWQgYSB0cmFpbmluZyBpbiBtaWxpdGFyeSByYXRoZXIgdGhhbiBpbiBjaXZpbCBsaWZlLCBoaXMgdGVtcGVyIHdhcyBmaWVyY2Ugd2hlbiBoZSBjYW1lIHRvIGV4ZXJjaXNlIGF1dGhvcml0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdlIGFyZSB0b2xkIHRoYXQgaGUgbmV2ZXIgc3R1ZGllZCBHcmVlayBsaXRlcmF0dXJlLCBhbmQgbmV2ZXIgdXNlZCB0aGUgR3JlZWsgbGFuZ3VhZ2UgZm9yIGFueSBtYXR0ZXIgb2YgcmVhbCBpbXBvcnRhbmNlLCB0aGlua2luZyBpdCByaWRpY3Vsb3VzIHRvIHN0dWR5IGEgbGl0ZXJhdHVyZSB0aGUgdGVhY2hlcnMgb2Ygd2hpY2ggd2VyZSB0aGUgc3ViamVjdHMgb2YgYW5vdGhlciBwZW9wbGU7IGFuZCB3aGVuLCBhZnRlciBoaXMgc2Vjb25kIHRyaXVtcGggYW5kIGF0IHRoZSBjb25zZWNyYXRpb24gb2Ygc29tZSB0ZW1wbGUsIGhlIGZ1cm5pc2hlZCB0aGUgcHVibGljIHdpdGggR3JlZWsgc3BlY3RhY2xlcywgdGhvdWdoIGhlIGNhbWUgaW50byB0aGUgdGhlYXRyZSwgaGUgbWVyZWx5IHNhdCBkb3duLCBhbmQgYXQgb25jZSB3ZW50IGF3YXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBqdXN0IGFzIFBsYXRvIHdhcyB3b250IHRvIHNheSBvZnRlbiB0byBYZW5vY3JhdGVzIHRoZSBwaGlsb3NvcGhlciwgd2hvIGhhZCB0aGUgcmVwdXRhdGlvbiBvZiBiZWluZyByYXRoZXIgbW9yb3NlIGluIGhpcyBkaXNwb3NpdGlvbiwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NeSBnb29kIFhlbm9jcmF0ZXMsIHNhY3JpZmljZSB0byB0aGUgR3JhY2VzLDwvcT4gc28gaWYgTWFyaXVzIGNvdWxkIGhhdmUgYmVlbiBwZXJzdWFkZWQgdG8gc2FjcmlmaWNlIHRvIHRoZSBHcmVlayBNdXNlcyBhbmQgR3JhY2VzLCBoZSB3b3VsZCBub3QgaGF2ZSBwdXQgdGhlIHVnbGllc3QgcG9zc2libGUgY3Jvd24gdXBvbiBhIG1vc3QgaWxsdXN0cmlvdXMgY2FyZWVyIGluIGZpZWxkIGFuZCBmb3J1bSwgbm9yIGhhdmUgYmVlbiBkcml2ZW4gYnkgdGhlIGJsYXN0cyBvZiBwYXNzaW9uLCBpbGwtdGltZWQgYW1iaXRpb24sIGFuZCBpbnNhdGlhYmxlIGdyZWVkIHVwb24gdGhlIHNob3JlIG9mIGEgbW9zdCBjcnVlbCBhbmQgc2F2YWdlIG9sZCBhZ2UuIEhvd2V2ZXIsIGhpcyBhY3R1YWwgY2FyZWVyIHNoYWxsIGF0IG9uY2UgYnJpbmcgdGhpcyBpbnRvIGNsZWFyIHZpZXcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlIHBlcnNvbmFsIGFwcGVhcmFuY2Ugb2YgTWFyaXVzLCB3ZSBoYXZlIHNlZW4gYSBtYXJibGUgc3RhdHVlIG9mIGhpbSBhdCBSYXZlbm5hIGluIEdhdWwsIGFuZCBpdCB2ZXJ5IHdlbGwgcG9ydHJheXMgdGhlIGhhcnNobmVzcyBhbmQgYml0dGVybmVzcyBvZiBjaGFyYWN0ZXIgd2hpY2ggYXJlIGFzY3JpYmVkIHRvIGhpbS4gRm9yIHNpbmNlIGhlIHdhcyBuYXR1cmFsbHkgdmlyaWxlIGFuZCBmb25kIG9mIHdhciwgYW5kIHNpbmNlIGhlIHJlY2VpdmVkIGEgdHJhaW5pbmcgaW4gbWlsaXRhcnkgcmF0aGVyIHRoYW4gaW4gY2l2aWwgbGlmZSwgaGlzIHRlbXBlciB3YXMgZmllcmNlIHdoZW4gaGUgY2FtZSB0byBleGVyY2lzZSBhdXRob3JpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3ZSBhcmUgdG9sZCB0aGF0IGhlIG5ldmVyIHN0dWRpZWQgR3JlZWsgbGl0ZXJhdHVyZSwgYW5kIG5ldmVyIHVzZWQgdGhlIEdyZWVrIGxhbmd1YWdlIGZvciBhbnkgbWF0dGVyIG9mIHJlYWwgaW1wb3J0YW5jZSwgdGhpbmtpbmcgaXQgcmlkaWN1bG91cyB0byBzdHVkeSBhIGxpdGVyYXR1cmUgdGhlIHRlYWNoZXJzIG9mIHdoaWNoIHdlcmUgdGhlIHN1YmplY3RzIG9mIGFub3RoZXIgcGVvcGxlOyBhbmQgd2hlbiwgYWZ0ZXIgaGlzIHNlY29uZCB0cml1bXBoIGFuZCBhdCB0aGUgY29uc2VjcmF0aW9uIG9mIHNvbWUgdGVtcGxlLCBoZSBmdXJuaXNoZWQgdGhlIHB1YmxpYyB3aXRoIEdyZWVrIHNwZWN0YWNsZXMsIHRob3VnaCBoZSBjYW1lIGludG8gdGhlIHRoZWF0cmUsIGhlIG1lcmVseSBzYXQgZG93biwgYW5kIGF0IG9uY2Ugd2VudCBhd2F5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBqdXN0IGFzIFBsYXRvIHdhcyB3b250IHRvIHNheSBvZnRlbiB0byBYZW5vY3JhdGVzIHRoZSBwaGlsb3NvcGhlciwgd2hvIGhhZCB0aGUgcmVwdXRhdGlvbiBvZiBiZWluZyByYXRoZXIgbW9yb3NlIGluIGhpcyBkaXNwb3NpdGlvbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk15IGdvb2QgWGVub2NyYXRlcywgc2FjcmlmaWNlIHRvIHRoZSBHcmFjZXMsPC9xPiBzbyBpZiBNYXJpdXMgY291bGQgaGF2ZSBiZWVuIHBlcnN1YWRlZCB0byBzYWNyaWZpY2UgdG8gdGhlIEdyZWVrIE11c2VzIGFuZCBHcmFjZXMsIGhlIHdvdWxkIG5vdCBoYXZlIHB1dCB0aGUgdWdsaWVzdCBwb3NzaWJsZSBjcm93biB1cG9uIGEgbW9zdCBpbGx1c3RyaW91cyBjYXJlZXIgaW4gZmllbGQgYW5kIGZvcnVtLCBub3IgaGF2ZSBiZWVuIGRyaXZlbiBieSB0aGUgYmxhc3RzIG9mIHBhc3Npb24sIGlsbC10aW1lZCBhbWJpdGlvbiwgYW5kIGluc2F0aWFibGUgZ3JlZWQgdXBvbiB0aGUgc2hvcmUgb2YgYSBtb3N0IGNydWVsIGFuZCBzYXZhZ2Ugb2xkIGFnZS4gSG93ZXZlciwgaGlzIGFjdHVhbCBjYXJlZXIgc2hhbGwgYXQgb25jZSBicmluZyB0aGlzIGludG8gY2xlYXIgdmlldy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Cb3JuIG9mIHBhcmVudHMgd2hvIHdlcmUgYWx0b2dldGhlciBvYnNjdXJl4oCUcG9vciBwZW9wbGUgd2hvIGxpdmVkIGJ5IHRoZSBsYWJvdXIgb2YgdGhlaXIgb3duIGhhbmRzIChNYXJpdXMgd2FzIGhpcyBmYXRoZXIncyBuYW1lLCBGdWxjaW5pYSB0aGF0IG9mIGhpcyBtb3RoZXIpLCBpdCB3YXMgbm90IHRpbGwgbGF0ZSB0aGF0IGhlIHNhdyB0aGUgY2l0eSBvciBnb3QgYSB0YXN0ZSBvZiBjaXR5IHdheXMuIEluIHRoZSBtZWFudGltZSBoZSBsaXZlZCBhdCBDaXJyaGFlYXRvbiwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UHJvYmFibHkgYSBjb3JydXB0aW9uIGZvciBDZXJlYXRhZS4gPC9ub3RlPiBhIHZpbGxhZ2UgaW4gdGhlIHRlcnJpdG9yeSBvZiBBcnBpbnVtLCBpbiBhIG1hbm5lciB0aGF0IHdhcyBxdWl0ZSBydWRlIHdoZW4gY29tcGFyZWQgd2l0aCB0aGUgcG9saXNoZWQgbGlmZSBvZiBhIGNpdHksIGJ1dCB0ZW1wZXJhdGUsIGFuZCBpbiBoYXJtb255IHdpdGggdGhlIHJlYXJpbmcgd2hpY2ggdGhlIGFuY2llbnQgUm9tYW5zIGdhdmUgdGhlaXIgY2hpbGRyZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmaXJzdCBzZXJ2aWNlIGFzIGEgc29sZGllciB3YXMgaW4gYSBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBDZWx0aWJlcmlhbnMsIHdoZW4gU2NpcGlvIEFmcmljYW51cyB3YXMgYmVzaWVnaW5nIE51bWFudGlhLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xMzQtMTMzIEIuQy4gPC9ub3RlPiBhbmQgaGUgYXR0cmFjdGVkIHRoZSBub3RpY2Ugb2YgaGlzIGdlbmVyYWwgYnkgZXhjZWxsaW5nIHRoZSBvdGhlciB5b3VuZyBtZW4gaW4gYnJhdmVyeSwgYW5kIGJ5IGhpcyB2ZXJ5IGNoZWVyZnVsIGFjY2VwdGFuY2Ugb2YgdGhlIGNoYW5nZWQgcmVnaW1lbiB3aGljaCBTY2lwaW8gaW50cm9kdWNlZCBpbnRvIGhpcyBhcm15IHdoZW4gaXQgd2FzIHNwb2lsZWQgYnkgbHV4dXJ5IGFuZCBleHRyYXZhZ2FuY2UuIEl0IGlzIHNhaWQsIHRvbywgdGhhdCBoZSBlbmNvdW50ZXJlZCBhbmQgbGFpZCBsb3cgYW4gZW5lbXkgaW4gdGhlIHNpZ2h0IG9mIGhpcyBnZW5lcmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgaGUgd2FzIGFkdmFuY2VkIGJ5IGhpcyBjb21tYW5kZXIgdG8gbWFueSBob25vdXJzOyBhbmQgb25jZSwgd2hlbiB0aGUgdGFsayBhZnRlciBzdXBwZXIgaGFkIHRvIGRvIHdpdGggZ2VuZXJhbHMsIGFuZCBvbmUgb2YgdGhlIGNvbXBhbnkgKGVpdGhlciBiZWNhdXNlIGhlIHJlYWxseSB3aXNoZWQgdG8ga25vdyBvciBtZXJlbHkgc291Z2h0IHRvIHBsZWFzZSkgYXNrZWQgU2NpcGlvIHdoZXJlIHRoZSBSb21hbiBwZW9wbGUgd291bGQgZmluZCBhbnkgc3VjaCBjaGllZnRhaW4gYW5kIGxlYWRlciB0byBmb2xsb3cgaGltLCBTY2lwaW8sIGdlbnRseSB0YXBwaW5nIE1hcml1cyBvbiB0aGUgc2hvdWxkZXIgYXMgaGUgcmVjbGluZWQgbmV4dCBoaW0sIHNhaWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IZXJlLCBwZXJoYXBzLjwvcT4gU28gZ2lmdGVkIGJ5IG5hdHVyZSB3ZXJlIGJvdGggbWVuOyB0aGUgb25lIGluIHNob3dpbmcgaGltc2VsZiBncmVhdCB3aGlsZSBzdGlsbCBhIHlvdW5nIG1hbiwgYW5kIHRoZSBvdGhlciBpbiBkaXNjZXJuaW5nIHRoZSBlbmQgZnJvbSB0aGUgYmVnaW5uaW5nLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Cb3JuIG9mIHBhcmVudHMgd2hvIHdlcmUgYWx0b2dldGhlciBvYnNjdXJl4oCUcG9vciBwZW9wbGUgd2hvIGxpdmVkIGJ5IHRoZSBsYWJvdXIgb2YgdGhlaXIgb3duIGhhbmRzIChNYXJpdXMgd2FzIGhpcyBmYXRoZXIncyBuYW1lLCBGdWxjaW5pYSB0aGF0IG9mIGhpcyBtb3RoZXIpLCBpdCB3YXMgbm90IHRpbGwgbGF0ZSB0aGF0IGhlIHNhdyB0aGUgY2l0eSBvciBnb3QgYSB0YXN0ZSBvZiBjaXR5IHdheXMuIEluIHRoZSBtZWFudGltZSBoZSBsaXZlZCBhdCBDaXJyaGFlYXRvbiwgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBhIGNvcnJ1cHRpb24gZm9yIENlcmVhdGFlLiA8L25vdGU+IGEgdmlsbGFnZSBpbiB0aGUgdGVycml0b3J5IG9mIEFycGludW0sIGluIGEgbWFubmVyIHRoYXQgd2FzIHF1aXRlIHJ1ZGUgd2hlbiBjb21wYXJlZCB3aXRoIHRoZSBwb2xpc2hlZCBsaWZlIG9mIGEgY2l0eSwgYnV0IHRlbXBlcmF0ZSwgYW5kIGluIGhhcm1vbnkgd2l0aCB0aGUgcmVhcmluZyB3aGljaCB0aGUgYW5jaWVudCBSb21hbnMgZ2F2ZSB0aGVpciBjaGlsZHJlbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBmaXJzdCBzZXJ2aWNlIGFzIGEgc29sZGllciB3YXMgaW4gYSBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBDZWx0aWJlcmlhbnMsIHdoZW4gU2NpcGlvIEFmcmljYW51cyB3YXMgYmVzaWVnaW5nIE51bWFudGlhLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjEzNC0xMzMgQi5DLiA8L25vdGU+IGFuZCBoZSBhdHRyYWN0ZWQgdGhlIG5vdGljZSBvZiBoaXMgZ2VuZXJhbCBieSBleGNlbGxpbmcgdGhlIG90aGVyIHlvdW5nIG1lbiBpbiBicmF2ZXJ5LCBhbmQgYnkgaGlzIHZlcnkgY2hlZXJmdWwgYWNjZXB0YW5jZSBvZiB0aGUgY2hhbmdlZCByZWdpbWVuIHdoaWNoIFNjaXBpbyBpbnRyb2R1Y2VkIGludG8gaGlzIGFybXkgd2hlbiBpdCB3YXMgc3BvaWxlZCBieSBsdXh1cnkgYW5kIGV4dHJhdmFnYW5jZS4gSXQgaXMgc2FpZCwgdG9vLCB0aGF0IGhlIGVuY291bnRlcmVkIGFuZCBsYWlkIGxvdyBhbiBlbmVteSBpbiB0aGUgc2lnaHQgb2YgaGlzIGdlbmVyYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSBoZSB3YXMgYWR2YW5jZWQgYnkgaGlzIGNvbW1hbmRlciB0byBtYW55IGhvbm91cnM7IGFuZCBvbmNlLCB3aGVuIHRoZSB0YWxrIGFmdGVyIHN1cHBlciBoYWQgdG8gZG8gd2l0aCBnZW5lcmFscywgYW5kIG9uZSBvZiB0aGUgY29tcGFueSAoZWl0aGVyIGJlY2F1c2UgaGUgcmVhbGx5IHdpc2hlZCB0byBrbm93IG9yIG1lcmVseSBzb3VnaHQgdG8gcGxlYXNlKSBhc2tlZCBTY2lwaW8gd2hlcmUgdGhlIFJvbWFuIHBlb3BsZSB3b3VsZCBmaW5kIGFueSBzdWNoIGNoaWVmdGFpbiBhbmQgbGVhZGVyIHRvIGZvbGxvdyBoaW0sIFNjaXBpbywgZ2VudGx5IHRhcHBpbmcgTWFyaXVzIG9uIHRoZSBzaG91bGRlciBhcyBoZSByZWNsaW5lZCBuZXh0IGhpbSwgc2FpZCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGVyZSwgcGVyaGFwcy48L3E+IFNvIGdpZnRlZCBieSBuYXR1cmUgd2VyZSBib3RoIG1lbjsgdGhlIG9uZSBpbiBzaG93aW5nIGhpbXNlbGYgZ3JlYXQgd2hpbGUgc3RpbGwgYSB5b3VuZyBtYW4sIGFuZCB0aGUgb3RoZXIgaW4gZGlzY2VybmluZyB0aGUgZW5kIGZyb20gdGhlIGJlZ2lubmluZy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbywgdGhlbiwgTWFyaXVzLCBmaWxsZWQgd2l0aCBoaWdoIGhvcGVzLCB3ZSBhcmUgdG9sZCwgYnkgdGhpcyBzcGVlY2ggb2YgU2NpcGlvIGluIHBhcnRpY3VsYXIsIGFzIGlmIGl0IHdlcmUgYSBkaXZpbmUgdXR0ZXJhbmNlIGluIHByb3BoZWN5LCBzZXQgb3V0IHVwb24gYSBwb2xpdGljYWwgY2FyZWVyLCBhbmQgd2FzIG1hZGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDExOSBCLkMuLCBhdCB0aGUgYWdlIG9mIHRoaXJ0eS1laWdodC4gPC9ub3RlPiB3aXRoIHRoZSBhc3Npc3RhbmNlIG9mIENhZWNpbGl1cyBNZXRlbGx1cywgb2Ygd2hvc2UgaG91c2UgaGUgaGFkIGFsd2F5cyBiZWVuIGFuIGhlcmVkaXRhcnkgYWRoZXJlbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHNlcnZpbmcgYXMgdHJpYnVuZSBoZSBpbnRyb2R1Y2VkIGEgbGF3IGNvbmNlcm5pbmcgdGhlIG1vZGUgb2Ygdm90aW5nLCB3aGljaCwgYXMgaXQgd2FzIHRob3VnaHQsIHdvdWxkIGxlc3NlbiB0aGUgcG93ZXIgb2YgdGhlIG5vYmxlcyBpbiBqdWRpY2lhbCBjYXNlczsgd2hlcmV1cG9uIENvdHRhIHRoZSBjb25zdWwgb3Bwb3NlZCBoaW0gYW5kIHBlcnN1YWRlZCB0aGUgc2VuYXRlIHRvIGNvbnRlc3QgdGhlIGxhdywgYW5kIHRvIHN1bW1vbiBNYXJpdXMgYmVmb3JlIGl0IHRvIGV4cGxhaW4gaGlzIHByb2NlZHVyZS4gVGhlIHNlbmF0ZSB2b3RlZCB0byBkbyB0aGlzLCBhbmQgTWFyaXVzIGFwcGVhcmVkIGJlZm9yZSBpdC4gSGUgZGlkIG5vdCwgaG93ZXZlciwgYmVoYXZlIGxpa2UgYSB5b3VuZyBtYW4gd2hvIGhhZCBqdXN0IGVudGVyZWQgcG9saXRpY2FsIGxpZmUgd2l0aG91dCBhbnkgYnJpbGxpYW50IHNlcnZpY2VzIGJlaGluZCBoaW0sIGJ1dCBhc3N1bWVkIGF0IG9uY2UgdGhlIGFzc3VyYW5jZSB3aGljaCBoaXMgc3Vic2VxdWVudCBhY2hpZXZlbWVudHMgZ2F2ZSBoaW0sIGFuZCB0aHJlYXRlbmVkIHRvIGhhbGUgQ290dGEgb2ZmIHRvIHByaXNvbiB1bmxlc3MgaGUgaGFkIHRoZSB2b3RlIHJlc2NpbmRlZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q290dGEgdGhlbiB0dXJuZWQgdG8gTWV0ZWxsdXMgYW5kIGFza2VkIGhpbSB0byBleHByZXNzIGhpcyBvcGluaW9uLCBhbmQgTWV0ZWxsdXMsIHJpc2luZyBpbiBoaXMgcGxhY2UsIGNvbmN1cnJlZCB3aXRoIHRoZSBjb25zdWw7IGJ1dCBNYXJpdXMgY2FsbGVkIGluIHRoZSBvZmZpY2VyIGFuZCBvcmRlcmVkIGhpbSB0byBjb25kdWN0IE1ldGVsbHVzIGhpbXNlbGYgdG8gcHJpc29uLiBNZXRlbGx1cyBhcHBlYWxlZCB0byB0aGUgb3RoZXIgdHJpYnVuZXMsIGJ1dCBub25lIG9mIHRoZW0gY2FtZSB0byBoaXMgc3VwcG9ydCwgc28gdGhlIHNlbmF0ZSBnYXZlIHdheSBhbmQgcmVzY2luZGVkIGl0cyB2b3RlLiBNYXJpdXMgdGhlcmVmb3JlIGNhbWUgZm9ydGggaW4gdHJpdW1waCB0byB0aGUgcGVvcGxlIGFuZCBnb3QgdGhlbSB0byByYXRpZnkgaGlzIGxhdy4gTWVuIG5vdyB0aG91Z2h0IGhpbSBzdXBlcmlvciB0byBmZWFyLCB1bm1vdmVkIGJ5IHJlc3BlY3Qgb2YgcGVyc29ucywgYW5kIGEgZm9ybWlkYWJsZSBjaGFtcGlvbiBvZiB0aGUgcGVvcGxlIGluIG9wcG9zaXRpb24gdG8gdGhlIHNlbmF0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhpcyBvcGluaW9uIHdhcyBxdWlja2x5IG1vZGlmaWVkIGJ5IGFub3RoZXIgcG9saXRpY2FsIHByb2NlZHVyZSBvZiBoaXMuIEZvciB3aGVuIGEgbGF3IHdhcyBpbnRyb2R1Y2VkIHByb3ZpZGluZyBmb3IgdGhlIGRpc3RyaWJ1dGlvbiBvZiBncmFpbiB0byB0aGUgY2l0aXplbnMsIGhlIG9wcG9zZWQgaXQgbW9zdCBzdHJlbnVvdXNseSBhbmQgY2FycmllZCB0aGUgZGF5LCB0aGVyZWJ5IHdpbm5pbmcgZm9yIGhpbXNlbGYgYW4gZXF1YWwgcGxhY2UgaW4gdGhlIGVzdGVlbSBvZiBib3RoIHBhcnRpZXMgYXMgYSBtYW4gd2hvIGZhdm91cmVkIG5laXRoZXIgYXQgdGhlIGV4cGVuc2Ugb2YgdGhlIGdlbmVyYWwgZ29vZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbywgdGhlbiwgTWFyaXVzLCBmaWxsZWQgd2l0aCBoaWdoIGhvcGVzLCB3ZSBhcmUgdG9sZCwgYnkgdGhpcyBzcGVlY2ggb2YgU2NpcGlvIGluIHBhcnRpY3VsYXIsIGFzIGlmIGl0IHdlcmUgYSBkaXZpbmUgdXR0ZXJhbmNlIGluIHByb3BoZWN5LCBzZXQgb3V0IHVwb24gYSBwb2xpdGljYWwgY2FyZWVyLCBhbmQgd2FzIG1hZGUgdHJpYnVuZSBvZiB0aGUgcGVvcGxlIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTE5IEIuQy4sIGF0IHRoZSBhZ2Ugb2YgdGhpcnR5LWVpZ2h0LiA8L25vdGU+IHdpdGggdGhlIGFzc2lzdGFuY2Ugb2YgQ2FlY2lsaXVzIE1ldGVsbHVzLCBvZiB3aG9zZSBob3VzZSBoZSBoYWQgYWx3YXlzIGJlZW4gYW4gaGVyZWRpdGFyeSBhZGhlcmVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHNlcnZpbmcgYXMgdHJpYnVuZSBoZSBpbnRyb2R1Y2VkIGEgbGF3IGNvbmNlcm5pbmcgdGhlIG1vZGUgb2Ygdm90aW5nLCB3aGljaCwgYXMgaXQgd2FzIHRob3VnaHQsIHdvdWxkIGxlc3NlbiB0aGUgcG93ZXIgb2YgdGhlIG5vYmxlcyBpbiBqdWRpY2lhbCBjYXNlczsgd2hlcmV1cG9uIENvdHRhIHRoZSBjb25zdWwgb3Bwb3NlZCBoaW0gYW5kIHBlcnN1YWRlZCB0aGUgc2VuYXRlIHRvIGNvbnRlc3QgdGhlIGxhdywgYW5kIHRvIHN1bW1vbiBNYXJpdXMgYmVmb3JlIGl0IHRvIGV4cGxhaW4gaGlzIHByb2NlZHVyZS4gVGhlIHNlbmF0ZSB2b3RlZCB0byBkbyB0aGlzLCBhbmQgTWFyaXVzIGFwcGVhcmVkIGJlZm9yZSBpdC4gSGUgZGlkIG5vdCwgaG93ZXZlciwgYmVoYXZlIGxpa2UgYSB5b3VuZyBtYW4gd2hvIGhhZCBqdXN0IGVudGVyZWQgcG9saXRpY2FsIGxpZmUgd2l0aG91dCBhbnkgYnJpbGxpYW50IHNlcnZpY2VzIGJlaGluZCBoaW0sIGJ1dCBhc3N1bWVkIGF0IG9uY2UgdGhlIGFzc3VyYW5jZSB3aGljaCBoaXMgc3Vic2VxdWVudCBhY2hpZXZlbWVudHMgZ2F2ZSBoaW0sIGFuZCB0aHJlYXRlbmVkIHRvIGhhbGUgQ290dGEgb2ZmIHRvIHByaXNvbiB1bmxlc3MgaGUgaGFkIHRoZSB2b3RlIHJlc2NpbmRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNvdHRhIHRoZW4gdHVybmVkIHRvIE1ldGVsbHVzIGFuZCBhc2tlZCBoaW0gdG8gZXhwcmVzcyBoaXMgb3BpbmlvbiwgYW5kIE1ldGVsbHVzLCByaXNpbmcgaW4gaGlzIHBsYWNlLCBjb25jdXJyZWQgd2l0aCB0aGUgY29uc3VsOyBidXQgTWFyaXVzIGNhbGxlZCBpbiB0aGUgb2ZmaWNlciBhbmQgb3JkZXJlZCBoaW0gdG8gY29uZHVjdCBNZXRlbGx1cyBoaW1zZWxmIHRvIHByaXNvbi4gTWV0ZWxsdXMgYXBwZWFsZWQgdG8gdGhlIG90aGVyIHRyaWJ1bmVzLCBidXQgbm9uZSBvZiB0aGVtIGNhbWUgdG8gaGlzIHN1cHBvcnQsIHNvIHRoZSBzZW5hdGUgZ2F2ZSB3YXkgYW5kIHJlc2NpbmRlZCBpdHMgdm90ZS4gTWFyaXVzIHRoZXJlZm9yZSBjYW1lIGZvcnRoIGluIHRyaXVtcGggdG8gdGhlIHBlb3BsZSBhbmQgZ290IHRoZW0gdG8gcmF0aWZ5IGhpcyBsYXcuIE1lbiBub3cgdGhvdWdodCBoaW0gc3VwZXJpb3IgdG8gZmVhciwgdW5tb3ZlZCBieSByZXNwZWN0IG9mIHBlcnNvbnMsIGFuZCBhIGZvcm1pZGFibGUgY2hhbXBpb24gb2YgdGhlIHBlb3BsZSBpbiBvcHBvc2l0aW9uIHRvIHRoZSBzZW5hdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoaXMgb3BpbmlvbiB3YXMgcXVpY2tseSBtb2RpZmllZCBieSBhbm90aGVyIHBvbGl0aWNhbCBwcm9jZWR1cmUgb2YgaGlzLiBGb3Igd2hlbiBhIGxhdyB3YXMgaW50cm9kdWNlZCBwcm92aWRpbmcgZm9yIHRoZSBkaXN0cmlidXRpb24gb2YgZ3JhaW4gdG8gdGhlIGNpdGl6ZW5zLCBoZSBvcHBvc2VkIGl0IG1vc3Qgc3RyZW51b3VzbHkgYW5kIGNhcnJpZWQgdGhlIGRheSwgdGhlcmVieSB3aW5uaW5nIGZvciBoaW1zZWxmIGFuIGVxdWFsIHBsYWNlIGluIHRoZSBlc3RlZW0gb2YgYm90aCBwYXJ0aWVzIGFzIGEgbWFuIHdobyBmYXZvdXJlZCBuZWl0aGVyIGF0IHRoZSBleHBlbnNlIG9mIHRoZSBnZW5lcmFsIGdvb2QuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIHRyaWJ1bmVzaGlwLCBoZSBiZWNhbWUgYSBjYW5kaWRhdGUgZm9yIHRoZSBoaWdoZXIgYWVkaWxlc2hpcC4gRm9yIHRoZXJlIGFyZSB0d28gY2xhc3NlcyBvZiBhZWRpbGVzLCBvbmUgdGFraW5nIGl0cyBuYW1lIG9mIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y3VydWxlPC9xPiBmcm9tIHRoZSBjaGFpcnMgd2l0aCBjdXJ2aW5nIGZlZXQgb24gd2hpY2ggdGhlIG1hZ2lzdHJhdGVzIHNpdCBpbiB0aGUgZXhlcmNpc2Ugb2YgdGhlaXIgZnVuY3Rpb25zLCB0aGUgb3RoZXIsIGFuZCB0aGUgaW5mZXJpb3IsIGJlaW5nIGNhbGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBsZWJlaWFuLjwvcT4gV2hlbiB0aGUgc3VwZXJpb3IgYWVkaWxlcyBoYXZlIGJlZW4gZWxlY3RlZCwgdGhlIHBlb3BsZSBjYXN0IGEgc2Vjb25kIHZvdGUgZm9yIHRoZSBvdGhlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGl0IHdhcyBjbGVhciB0aGF0IE1hcml1cyB3YXMgbG9zaW5nIGhpcyBlbGVjdGlvbiB0byB0aGUgaGlnaGVyIG9mZmljZSwgaGUgaW1tZWRpYXRlbHkgY2hhbmdlZCBoaXMgdGFjdGljcyBhbmQgYXBwbGllZCBmb3IgdGhlIG90aGVyLiBCdXQgbWVuIHRob3VnaHQgaGltIGJvbGQgYW5kIG9ic3RpbmF0ZSwgYW5kIGhlIHdhcyBkZWZlYXRlZDsgbmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBoZSBoYWQgbWV0IHdpdGggdHdvIGZhaWx1cmVzIGluIG9uZSBkYXksIGEgdGhpbmcgd2hpY2ggaGFkIG5ldmVyIGhhcHBlbmVkIHRvIGFueSBjYW5kaWRhdGUgYmVmb3JlLCBoZSBkaWQgbm90IGxvd2VyIGhpcyBhc3N1cmFuY2UgaW4gdGhlIGxlYXN0LCBidXQgbm90IGxvbmcgYWZ0ZXJ3YXJkcyBiZWNhbWUgYSBjYW5kaWRhdGUgZm9yIHRoZSBwcmFldG9yc2hpcCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxMTUgQi5DLiA8L25vdGU+IGFuZCBuYXJyb3dseSBtaXNzZWQgZGVmZWF0OyBoZSB3YXMgcmV0dXJuZWQgbGFzdCBvZiBhbGwsIGFuZCB3YXMgcHJvc2VjdXRlZCBmb3IgYnJpYmVyeS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoaXMgdHJpYnVuZXNoaXAsIGhlIGJlY2FtZSBhIGNhbmRpZGF0ZSBmb3IgdGhlIGhpZ2hlciBhZWRpbGVzaGlwLiBGb3IgdGhlcmUgYXJlIHR3byBjbGFzc2VzIG9mIGFlZGlsZXMsIG9uZSB0YWtpbmcgaXRzIG5hbWUgb2YgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmN1cnVsZTwvcT4gZnJvbSB0aGUgY2hhaXJzIHdpdGggY3VydmluZyBmZWV0IG9uIHdoaWNoIHRoZSBtYWdpc3RyYXRlcyBzaXQgaW4gdGhlIGV4ZXJjaXNlIG9mIHRoZWlyIGZ1bmN0aW9ucywgdGhlIG90aGVyLCBhbmQgdGhlIGluZmVyaW9yLCBiZWluZyBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnBsZWJlaWFuLjwvcT4gV2hlbiB0aGUgc3VwZXJpb3IgYWVkaWxlcyBoYXZlIGJlZW4gZWxlY3RlZCwgdGhlIHBlb3BsZSBjYXN0IGEgc2Vjb25kIHZvdGUgZm9yIHRoZSBvdGhlcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIGl0IHdhcyBjbGVhciB0aGF0IE1hcml1cyB3YXMgbG9zaW5nIGhpcyBlbGVjdGlvbiB0byB0aGUgaGlnaGVyIG9mZmljZSwgaGUgaW1tZWRpYXRlbHkgY2hhbmdlZCBoaXMgdGFjdGljcyBhbmQgYXBwbGllZCBmb3IgdGhlIG90aGVyLiBCdXQgbWVuIHRob3VnaHQgaGltIGJvbGQgYW5kIG9ic3RpbmF0ZSwgYW5kIGhlIHdhcyBkZWZlYXRlZDsgbmV2ZXJ0aGVsZXNzLCBhbHRob3VnaCBoZSBoYWQgbWV0IHdpdGggdHdvIGZhaWx1cmVzIGluIG9uZSBkYXksIGEgdGhpbmcgd2hpY2ggaGFkIG5ldmVyIGhhcHBlbmVkIHRvIGFueSBjYW5kaWRhdGUgYmVmb3JlLCBoZSBkaWQgbm90IGxvd2VyIGhpcyBhc3N1cmFuY2UgaW4gdGhlIGxlYXN0LCBidXQgbm90IGxvbmcgYWZ0ZXJ3YXJkcyBiZWNhbWUgYSBjYW5kaWRhdGUgZm9yIHRoZSBwcmFldG9yc2hpcCA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDExNSBCLkMuIDwvbm90ZT4gYW5kIG5hcnJvd2x5IG1pc3NlZCBkZWZlYXQ7IGhlIHdhcyByZXR1cm5lZCBsYXN0IG9mIGFsbCwgYW5kIHdhcyBwcm9zZWN1dGVkIGZvciBicmliZXJ5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5TdXNwaWNpb24gd2FzIGNoaWVmbHkgYXJvdXNlZCBieSB0aGUgc2lnaHQgb2YgYSBzZXJ2YW50IG9mIENhc3NpdXMgU2FiYWNvIGluc2lkZSB0aGUgcGFsaW5ncyBhbW9uZyB0aGUgdm90ZXJzOyBmb3IgU2FiYWNvIHdhcyBhbiBlc3BlY2lhbCBmcmllbmQgb2YgTWFyaXVzLiBTYWJhY28gd2FzIHRoZXJlZm9yZSBzdW1tb25lZCBiZWZvcmUgdGhlIGNvdXJ0LCBhbmQgdGVzdGlmaWVkIHRoYXQgdGhlIGhlYXQgaGFkIG1hZGUgaGltIHNvIHRoaXJzdHkgdGhhdCBoZSBoYWQgY2FsbGVkIGZvciBjb2xkIHdhdGVyLCBhbmQgdGhhdCBoaXMgc2VydmFudCBoYWQgY29tZSBpbiB0byBoaW0gd2l0aCBhIGN1cCwgYW5kIGhhZCB0aGVuIGF0IG9uY2UgZ29uZSBhd2F5IGFmdGVyIGhpcyBtYXN0ZXIgaGFkIGRydW5rLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TYWJhY28sIGhvd2V2ZXIsIHdhcyBleHBlbGxlZCBmcm9tIHRoZSBzZW5hdGUgYnkgdGhlIGNlbnNvcnMgb2YgdGhlIG5leHQgeWVhciwgYW5kIGl0IHdhcyB0aG91Z2h0IHRoYXQgaGUgZGVzZXJ2ZWQgdGhpcyBwdW5pc2htZW50LCBlaXRoZXIgYmVjYXVzZSBoZSBoYWQgZ2l2ZW4gZmFsc2UgdGVzdGltb255LCBvciBiZWNhdXNlIG9mIGhpcyBpbnRlbXBlcmFuY2UuIEJ1dCBDYWl1cyBIZXJlbm5pdXMgYWxzbyB3YXMgYnJvdWdodCBpbiBhcyBhIHdpdG5lc3MgYWdhaW5zdCBNYXJpdXMsIGFuZCBwbGVhZGVkIHRoYXQgaXQgd2FzIGNvbnRyYXJ5IHRvIGVzdGFibGlzaGVkIHVzYWdlIGZvciBwYXRyb25zICh0aGUgUm9tYW4gdGVybSBmb3Igb3VyIHJlcHJlc2VudGF0aXZlcyBhdCBsYXcpIHRvIGJlYXIgd2l0bmVzcyBhZ2FpbnN0IGNsaWVudHMsIGFuZCB0aGF0IHRoZSBsYXcgcmVsaWV2ZWQgdGhlbSBvZiB0aGlzIG5lY2Vzc2l0eTsgYW5kIG5vdCBvbmx5IHRoZSBwYXJlbnRzIG9mIE1hcml1cyBidXQgTWFyaXVzIGhpbXNlbGYgaGFkIG9yaWdpbmFsbHkgYmVlbiBjbGllbnRzIG9mIHRoZSBob3VzZSBvZiB0aGUgSGVyZW5uaWkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBqdXJvcnMgYWNjZXB0ZWQgdGhpcyBwbGVhIGluIGF2b2lkYW5jZSBvZiB0ZXN0aW1vbnksIGJ1dCBNYXJpdXMgaGltc2VsZiBjb250cmFkaWN0ZWQgSGVyZW5uaXVzLCBkZWNsYXJpbmcgdGhhdCBhcyBzb29uIGFzIGhlIGhhZCBiZWVuIGVsZWN0ZWQgdG8gaGlzIG1hZ2lzdHJhY3kgaGUgaGFkIGNlYXNlZCB0byBiZSBhIGNsaWVudDsgd2hpY2ggd2FzIG5vdCBhbHRvZ2V0aGVyIHRydWUuIEZvciBpdCBpcyBub3QgZXZlcnkgbWFnaXN0cmFjeSB0aGF0IGZyZWVzIGl0cyBvY2N1cGFudHMgKGFzIHdlbGwgYXMgdGhlaXIgcG9zdGVyaXR5KSBmcm9tIHRoZWlyIHJlbGF0aW9ucyB0byBhIHBhdHJvbiwgYnV0IG9ubHkgdGhhdCB0byB3aGljaCB0aGUgbGF3IGFzc2lnbnMgdGhlIGN1cnVsZSBjaGFpci4gSG93ZXZlciwgYWx0aG91Z2ggZHVyaW5nIHRoZSBmaXJzdCBkYXlzIG9mIHRoZSB0cmlhbCBNYXJpdXMgZmFyZWQgYmFkbHkgYW5kIGZvdW5kIHRoZSBqdXJvcnMgc2V2ZXJlIHRvd2FyZHMgaGltLCBvbiB0aGUgbGFzdCBkYXksIGNvbnRyYXJ5IHRvIGFsbCBleHBlY3RhdGlvbiwgdGhlcmUgd2FzIGEgdGllIHZvdGUgYW5kIGhlIHdhcyBhY3F1aXR0ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1c3BpY2lvbiB3YXMgY2hpZWZseSBhcm91c2VkIGJ5IHRoZSBzaWdodCBvZiBhIHNlcnZhbnQgb2YgQ2Fzc2l1cyBTYWJhY28gaW5zaWRlIHRoZSBwYWxpbmdzIGFtb25nIHRoZSB2b3RlcnM7IGZvciBTYWJhY28gd2FzIGFuIGVzcGVjaWFsIGZyaWVuZCBvZiBNYXJpdXMuIFNhYmFjbyB3YXMgdGhlcmVmb3JlIHN1bW1vbmVkIGJlZm9yZSB0aGUgY291cnQsIGFuZCB0ZXN0aWZpZWQgdGhhdCB0aGUgaGVhdCBoYWQgbWFkZSBoaW0gc28gdGhpcnN0eSB0aGF0IGhlIGhhZCBjYWxsZWQgZm9yIGNvbGQgd2F0ZXIsIGFuZCB0aGF0IGhpcyBzZXJ2YW50IGhhZCBjb21lIGluIHRvIGhpbSB3aXRoIGEgY3VwLCBhbmQgaGFkIHRoZW4gYXQgb25jZSBnb25lIGF3YXkgYWZ0ZXIgaGlzIG1hc3RlciBoYWQgZHJ1bmsuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNhYmFjbywgaG93ZXZlciwgd2FzIGV4cGVsbGVkIGZyb20gdGhlIHNlbmF0ZSBieSB0aGUgY2Vuc29ycyBvZiB0aGUgbmV4dCB5ZWFyLCBhbmQgaXQgd2FzIHRob3VnaHQgdGhhdCBoZSBkZXNlcnZlZCB0aGlzIHB1bmlzaG1lbnQsIGVpdGhlciBiZWNhdXNlIGhlIGhhZCBnaXZlbiBmYWxzZSB0ZXN0aW1vbnksIG9yIGJlY2F1c2Ugb2YgaGlzIGludGVtcGVyYW5jZS4gQnV0IENhaXVzIEhlcmVubml1cyBhbHNvIHdhcyBicm91Z2h0IGluIGFzIGEgd2l0bmVzcyBhZ2FpbnN0IE1hcml1cywgYW5kIHBsZWFkZWQgdGhhdCBpdCB3YXMgY29udHJhcnkgdG8gZXN0YWJsaXNoZWQgdXNhZ2UgZm9yIHBhdHJvbnMgKHRoZSBSb21hbiB0ZXJtIGZvciBvdXIgcmVwcmVzZW50YXRpdmVzIGF0IGxhdykgdG8gYmVhciB3aXRuZXNzIGFnYWluc3QgY2xpZW50cywgYW5kIHRoYXQgdGhlIGxhdyByZWxpZXZlZCB0aGVtIG9mIHRoaXMgbmVjZXNzaXR5OyBhbmQgbm90IG9ubHkgdGhlIHBhcmVudHMgb2YgTWFyaXVzIGJ1dCBNYXJpdXMgaGltc2VsZiBoYWQgb3JpZ2luYWxseSBiZWVuIGNsaWVudHMgb2YgdGhlIGhvdXNlIG9mIHRoZSBIZXJlbm5paS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBqdXJvcnMgYWNjZXB0ZWQgdGhpcyBwbGVhIGluIGF2b2lkYW5jZSBvZiB0ZXN0aW1vbnksIGJ1dCBNYXJpdXMgaGltc2VsZiBjb250cmFkaWN0ZWQgSGVyZW5uaXVzLCBkZWNsYXJpbmcgdGhhdCBhcyBzb29uIGFzIGhlIGhhZCBiZWVuIGVsZWN0ZWQgdG8gaGlzIG1hZ2lzdHJhY3kgaGUgaGFkIGNlYXNlZCB0byBiZSBhIGNsaWVudDsgd2hpY2ggd2FzIG5vdCBhbHRvZ2V0aGVyIHRydWUuIEZvciBpdCBpcyBub3QgZXZlcnkgbWFnaXN0cmFjeSB0aGF0IGZyZWVzIGl0cyBvY2N1cGFudHMgKGFzIHdlbGwgYXMgdGhlaXIgcG9zdGVyaXR5KSBmcm9tIHRoZWlyIHJlbGF0aW9ucyB0byBhIHBhdHJvbiwgYnV0IG9ubHkgdGhhdCB0byB3aGljaCB0aGUgbGF3IGFzc2lnbnMgdGhlIGN1cnVsZSBjaGFpci4gSG93ZXZlciwgYWx0aG91Z2ggZHVyaW5nIHRoZSBmaXJzdCBkYXlzIG9mIHRoZSB0cmlhbCBNYXJpdXMgZmFyZWQgYmFkbHkgYW5kIGZvdW5kIHRoZSBqdXJvcnMgc2V2ZXJlIHRvd2FyZHMgaGltLCBvbiB0aGUgbGFzdCBkYXksIGNvbnRyYXJ5IHRvIGFsbCBleHBlY3RhdGlvbiwgdGhlcmUgd2FzIGEgdGllIHZvdGUgYW5kIGhlIHdhcyBhY3F1aXR0ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgZm9yIGhpcyBwcmFldG9yc2hpcCBNYXJpdXMgZ290IG9ubHkgbW9kZXJhdGUgY29tbWVuZGF0aW9uLiBBZnRlciBoaXMgcHJhZXRvcnNoaXAsIGhvd2V2ZXIsIHRoZSBwcm92aW5jZSBvZiBGYXJ0aGVyIFNwYWluIHdhcyBhbGxvdHRlZCB0byBoaW0sIGFuZCBoZXJlIGhlIGlzIHNhaWQgdG8gaGF2ZSBjbGVhcmVkIGF3YXkgdGhlIHJvYmJlcnMsIGFsdGhvdWdoIHRoZSBwcm92aW5jZSB3YXMgc3RpbGwgdW5jaXZpbGl6ZWQgaW4gaXRzIGN1c3RvbXMgYW5kIGluIGEgc2F2YWdlIHN0YXRlLCBhbmQgcm9iYmVyeSB3YXMgYXQgdGhhdCB0aW1lIHN0aWxsIGNvbnNpZGVyZWQgYSBtb3N0IGhvbm91cmFibGUgb2NjdXBhdGlvbiBieSB0aGUgU3BhbmlhcmRzLiBCdXQgd2hlbiBoZSByZXR1cm5lZCB0byBwb2xpdGljYWwgbGlmZSwgaGUgaGFkIG5laXRoZXIgd2VhbHRoIG5vciBlbG9xdWVuY2UsIHdpdGggd2hpY2ggdGhlIG1hZ25hdGVzIG9mIHRoZSB0aW1lIHVzZWQgdG8gaW5mbHVlbmNlIHRoZSBwZW9wbGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsLCB0aGUgdmVyeSBpbnRlbnNpdHkgb2YgaGlzIGFzc3VyYW5jZSwgaGlzIGluZGVmYXRpZ2FibGUgbGFib3VycywgYW5kIGhpcyBwbGFpbiBhbmQgc2ltcGxlIHdheSBvZiBsaXZpbmcsIHdvbiBoaW0gYSBjZXJ0YWluIHBvcHVsYXJpdHkgYW1vbmcgaGlzIGZlbGxvdyBjaXRpemVucywgYW5kIGhpcyBob25vdXJzIGJyb3VnaHQgaGltIGluY3JlYXNpbmcgaW5mbHVlbmNlLCBzbyB0aGF0IGhlIG1hcnJpZWQgaW50byB0aGUgaWxsdXN0cmlvdXMgZmFtaWx5IG9mIHRoZSBDYWVzYXJzIGFuZCBiZWNhbWUgdGhlIGh1c2JhbmQgb2YgSnVsaWEsIHdobyB3YXMgdGhlIGF1bnQgb2YgdGhhdCBDYWVzYXIgd2hvIGluIGFmdGVyIHRpbWVzIGJlY2FtZSBncmVhdGVzdCBhbW9uZyB0aGUgUm9tYW5zLCBhbmQgaW4gc29tZSBkZWdyZWUsIGJlY2F1c2Ugb2YgaGlzIHJlbGF0aW9uc2hpcCwgbWFkZSBNYXJpdXMgaGlzIGV4YW1wbGUsIGFzIEkgaGF2ZSBzdGF0ZWQgaW4gaGlzIExpZmUuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDUuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2Flc2FyIDwvdGl0bGU+LCB2LiAxIGYuIDwvYmlibD4gCiAgICAgICAgICAgIDwvbm90ZT4gCgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBmb3IgaGlzIHByYWV0b3JzaGlwIE1hcml1cyBnb3Qgb25seSBtb2RlcmF0ZSBjb21tZW5kYXRpb24uIEFmdGVyIGhpcyBwcmFldG9yc2hpcCwgaG93ZXZlciwgdGhlIHByb3ZpbmNlIG9mIEZhcnRoZXIgU3BhaW4gd2FzIGFsbG90dGVkIHRvIGhpbSwgYW5kIGhlcmUgaGUgaXMgc2FpZCB0byBoYXZlIGNsZWFyZWQgYXdheSB0aGUgcm9iYmVycywgYWx0aG91Z2ggdGhlIHByb3ZpbmNlIHdhcyBzdGlsbCB1bmNpdmlsaXplZCBpbiBpdHMgY3VzdG9tcyBhbmQgaW4gYSBzYXZhZ2Ugc3RhdGUsIGFuZCByb2JiZXJ5IHdhcyBhdCB0aGF0IHRpbWUgc3RpbGwgY29uc2lkZXJlZCBhIG1vc3QgaG9ub3VyYWJsZSBvY2N1cGF0aW9uIGJ5IHRoZSBTcGFuaWFyZHMuIEJ1dCB3aGVuIGhlIHJldHVybmVkIHRvIHBvbGl0aWNhbCBsaWZlLCBoZSBoYWQgbmVpdGhlciB3ZWFsdGggbm9yIGVsb3F1ZW5jZSwgd2l0aCB3aGljaCB0aGUgbWFnbmF0ZXMgb2YgdGhlIHRpbWUgdXNlZCB0byBpbmZsdWVuY2UgdGhlIHBlb3BsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsLCB0aGUgdmVyeSBpbnRlbnNpdHkgb2YgaGlzIGFzc3VyYW5jZSwgaGlzIGluZGVmYXRpZ2FibGUgbGFib3VycywgYW5kIGhpcyBwbGFpbiBhbmQgc2ltcGxlIHdheSBvZiBsaXZpbmcsIHdvbiBoaW0gYSBjZXJ0YWluIHBvcHVsYXJpdHkgYW1vbmcgaGlzIGZlbGxvdyBjaXRpemVucywgYW5kIGhpcyBob25vdXJzIGJyb3VnaHQgaGltIGluY3JlYXNpbmcgaW5mbHVlbmNlLCBzbyB0aGF0IGhlIG1hcnJpZWQgaW50byB0aGUgaWxsdXN0cmlvdXMgZmFtaWx5IG9mIHRoZSBDYWVzYXJzIGFuZCBiZWNhbWUgdGhlIGh1c2JhbmQgb2YgSnVsaWEsIHdobyB3YXMgdGhlIGF1bnQgb2YgdGhhdCBDYWVzYXIgd2hvIGluIGFmdGVyIHRpbWVzIGJlY2FtZSBncmVhdGVzdCBhbW9uZyB0aGUgUm9tYW5zLCBhbmQgaW4gc29tZSBkZWdyZWUsIGJlY2F1c2Ugb2YgaGlzIHJlbGF0aW9uc2hpcCwgbWFkZSBNYXJpdXMgaGlzIGV4YW1wbGUsIGFzIEkgaGF2ZSBzdGF0ZWQgaW4gaGlzIExpZmUuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYWVzLiA1LjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyIDwvdGl0bGU+LCB2LiAxIGYuIDwvYmlibD4gCiAgICAgICAgICAgIDwvbm90ZT4gCgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDUuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWVzYXIgPC90aXRsZT4sIHYuIDEgZi4gPC9iaWJsPiAKICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2Flc2FyIDwvdGl0bGU+LCB2LiAxIGYuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIHRlc3RpbW9ueSBib3RoIHRvIHRoZSB0ZW1wZXJhbmNlIG9mIE1hcml1cywgYW5kIGFsc28gdG8gaGlzIGZvcnRpdHVkZSwgb2Ygd2hpY2ggaGlzIGJlaGF2aW91ciB1bmRlciBhIHN1cmdpY2FsIG9wZXJhdGlvbiBpcyBhIHByb29mLiBIZSB3YXMgYWZmbGljdGVkIGluIGJvdGggbGVncywgYXMgaXQgd291bGQgYXBwZWFyLCB3aXRoIHZhcmljb3NlIHZlaW5zLCBhbmQgYXMgaGUgZGlzbGlrZWQgdGhlIGRlZm9ybWl0eSwgaGUgcmVzb2x2ZWQgdG8gcHV0IGhpbXNlbGYgaW50byB0aGUgcGh5c2ljaWFuJ3MgaGFuZHMuIFJlZnVzaW5nIHRvIGJlIGJvdW5kLCBoZSBwcmVzZW50ZWQgdG8gaGltIG9uZSBsZWcsIGFuZCB0aGVuLCB3aXRob3V0IGEgbW90aW9uIG9yIGEgZ3JvYW4sIGJ1dCB3aXRoIGEgc3RlYWRmYXN0IGNvdW50ZW5hbmNlIGFuZCBpbiBzaWxlbmNlLCBlbmR1cmVkIGluY3JlZGlibGUgcGFpbiB1bmRlciB0aGUga25pZmUuIFdoZW4sIGhvd2V2ZXIsIHRoZSBwaHlzaWNpYW4gd2FzIHByb2NlZWRpbmcgdG8gdHJlYXQgdGhlIG90aGVyIGxlZywgTWFyaXVzIHdvdWxkIHN1ZmZlciBoaW0gbm8gZnVydGhlciwgZGVjbGFyaW5nIHRoYXQgaGUgc2F3IHRoZSBjdXJlIHRvIGJlIG5vdCB3b3J0aCB0aGUgcGFpbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGlzIHRlc3RpbW9ueSBib3RoIHRvIHRoZSB0ZW1wZXJhbmNlIG9mIE1hcml1cywgYW5kIGFsc28gdG8gaGlzIGZvcnRpdHVkZSwgb2Ygd2hpY2ggaGlzIGJlaGF2aW91ciB1bmRlciBhIHN1cmdpY2FsIG9wZXJhdGlvbiBpcyBhIHByb29mLiBIZSB3YXMgYWZmbGljdGVkIGluIGJvdGggbGVncywgYXMgaXQgd291bGQgYXBwZWFyLCB3aXRoIHZhcmljb3NlIHZlaW5zLCBhbmQgYXMgaGUgZGlzbGlrZWQgdGhlIGRlZm9ybWl0eSwgaGUgcmVzb2x2ZWQgdG8gcHV0IGhpbXNlbGYgaW50byB0aGUgcGh5c2ljaWFuJ3MgaGFuZHMuIFJlZnVzaW5nIHRvIGJlIGJvdW5kLCBoZSBwcmVzZW50ZWQgdG8gaGltIG9uZSBsZWcsIGFuZCB0aGVuLCB3aXRob3V0IGEgbW90aW9uIG9yIGEgZ3JvYW4sIGJ1dCB3aXRoIGEgc3RlYWRmYXN0IGNvdW50ZW5hbmNlIGFuZCBpbiBzaWxlbmNlLCBlbmR1cmVkIGluY3JlZGlibGUgcGFpbiB1bmRlciB0aGUga25pZmUuIFdoZW4sIGhvd2V2ZXIsIHRoZSBwaHlzaWNpYW4gd2FzIHByb2NlZWRpbmcgdG8gdHJlYXQgdGhlIG90aGVyIGxlZywgTWFyaXVzIHdvdWxkIHN1ZmZlciBoaW0gbm8gZnVydGhlciwgZGVjbGFyaW5nIHRoYXQgaGUgc2F3IHRoZSBjdXJlIHRvIGJlIG5vdCB3b3J0aCB0aGUgcGFpbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENhZWNpbGl1cyBNZXRlbGx1cyB0aGUgY29uc3VsIHdhcyBhcHBvaW50ZWQgY29tbWFuZGVyLWluLWNoaWVmIGZvciB0aGUgd2FyIGFnYWluc3QgSnVndXJ0aGEsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDEwOSBCLkMuIDwvbm90ZT4gaGUgdG9vayBNYXJpdXMgd2l0aCBoaW0gdG8gQWZyaWNhIGluIHRoZSBjYXBhY2l0eSBvZiBsZWdhdGUuIEhlcmUsIGluIGVzc2F5aW5nIGdyZWF0IGV4cGxvaXRzIGFuZCBicmlsbGlhbnQgc3RydWdnbGVzLCBNYXJpdXMgd2FzIG5vdCBjYXJlZnVsLCBsaWtlIHRoZSByZXN0LCB0byBlbmhhbmNlIHRoZSBnbG9yeSBvZiBNZXRlbGx1cyBhbmQgY29uZHVjdCBoaW1zZWxmIGluIGhpcyBpbnRlcmVzdHM7IGFuZCBkZWVtaW5nIHRoYXQgaGUgaGFkIG5vdCBzbyBtdWNoIGJlZW4gY2FsbGVkIGJ5IE1ldGVsbHVzIHRvIHRoZSBvZmZpY2Ugb2YgbGVnYXRlIGFzIGhlIHdhcyBiZWluZyBpbnRyb2R1Y2VkIGJ5IEZvcnR1bmUgaW50byBhIG1vc3QgZmF2b3VyYWJsZSBvcHBvcnR1bml0eSBhcyB3ZWxsIGFzIGEgbW9zdCBzcGFjaW91cyB0aGVhdHJlIGZvciBleHBsb2l0cywgaGUgbWFkZSBhIGRpc3BsYXkgb2YgZXZlcnkgc29ydCBvZiBicmF2ZXJ5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhvdWdoIHRoZSB3YXIgYnJvdWdodCBtYW55IGhhcmRzaGlwcywgaGUgbmVpdGhlciBzaHVubmVkIGFueSBncmVhdCBsYWJvdXIsIG5vciBkaXNkYWluZWQgYW55IHRoYXQgd2VyZSBzbWFsbCwgYnV0IHN1cnBhc3NlZCB0aGUgb2ZmaWNlcnMgb2YgaGlzIG93biByYW5rIGluIGdpdmluZyBnb29kIGNvdW5zZWwgYW5kIGZvcmVzZWVpbmcgd2hhdCB3YXMgYWR2YW50YWdlb3VzLCBhbmQgdmllZCB3aXRoIHRoZSBjb21tb24gc29sZGllcnMgaW4gZnJ1Z2FsaXR5IGFuZCBlbmR1cmFuY2UsIHRoZXJlYnkgd2lubmluZyBtdWNoIGdvb2R3aWxsIGFtb25nIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhcyBhIGdlbmVyYWwgdGhpbmcgaXQgd291bGQgc2VlbSB0aGF0IGV2ZXJ5IG1hbiBmaW5kcyBzb2xhY2UgZm9yIGhpcyBsYWJvdXJzIGluIHNlZWluZyBhbm90aGVyIHZvbHVudGFyaWx5IHNoYXJlIHRob3NlIGxhYm91cnM7IHRoaXMgc2VlbXMgdG8gdGFrZSBhd2F5IHRoZSBlbGVtZW50IG9mIGNvbXB1bHNpb247IGFuZCBpdCBpcyBhIG1vc3QgYWdyZWVhYmxlIHNwZWN0YWNsZSBmb3IgYSBSb21hbiBzb2xkaWVyIHdoZW4gaGUgc2VlcyBhIGdlbmVyYWwgZWF0aW5nIGNvbW1vbiBicmVhZCBpbiBwdWJsaWMsIG9yIHNsZWVwaW5nIG9uIGEgc2ltcGxlIHBhbGxldCwgb3IgdGFraW5nIGEgaGFuZCBpbiB0aGUgY29uc3RydWN0aW9uIG9mIHNvbWUgdHJlbmNoIG9yIHBhbGlzYWRlLiBGb3IgdGhleSBoYXZlIG5vdCBzbyBtdWNoIGFkbWlyYXRpb24gZm9yIHRob3NlIGxlYWRlcnMgd2hvIHNoYXJlIGhvbm91ciBhbmQgcmljaGVzIHdpdGggdGhlbSBhcyBmb3IgdGhvc2Ugd2hvIHRha2UgcGFydCBpbiB0aGVpciB0b2lscyBhbmQgZGFuZ2VycywgYnV0IGhhdmUgbW9yZSBhZmZlY3Rpb24gZm9yIHRob3NlIHdobyBhcmUgd2lsbGluZyB0byBqb2luIGluIHRoZWlyIHRvaWxzIHRoYW4gZm9yIHRob3NlIHdobyBwZXJtaXQgdGhlbSB0byBsZWFkIGFuIGVhc3kgbGlmZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENhZWNpbGl1cyBNZXRlbGx1cyB0aGUgY29uc3VsIHdhcyBhcHBvaW50ZWQgY29tbWFuZGVyLWluLWNoaWVmIGZvciB0aGUgd2FyIGFnYWluc3QgSnVndXJ0aGEsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTA5IEIuQy4gPC9ub3RlPiBoZSB0b29rIE1hcml1cyB3aXRoIGhpbSB0byBBZnJpY2EgaW4gdGhlIGNhcGFjaXR5IG9mIGxlZ2F0ZS4gSGVyZSwgaW4gZXNzYXlpbmcgZ3JlYXQgZXhwbG9pdHMgYW5kIGJyaWxsaWFudCBzdHJ1Z2dsZXMsIE1hcml1cyB3YXMgbm90IGNhcmVmdWwsIGxpa2UgdGhlIHJlc3QsIHRvIGVuaGFuY2UgdGhlIGdsb3J5IG9mIE1ldGVsbHVzIGFuZCBjb25kdWN0IGhpbXNlbGYgaW4gaGlzIGludGVyZXN0czsgYW5kIGRlZW1pbmcgdGhhdCBoZSBoYWQgbm90IHNvIG11Y2ggYmVlbiBjYWxsZWQgYnkgTWV0ZWxsdXMgdG8gdGhlIG9mZmljZSBvZiBsZWdhdGUgYXMgaGUgd2FzIGJlaW5nIGludHJvZHVjZWQgYnkgRm9ydHVuZSBpbnRvIGEgbW9zdCBmYXZvdXJhYmxlIG9wcG9ydHVuaXR5IGFzIHdlbGwgYXMgYSBtb3N0IHNwYWNpb3VzIHRoZWF0cmUgZm9yIGV4cGxvaXRzLCBoZSBtYWRlIGEgZGlzcGxheSBvZiBldmVyeSBzb3J0IG9mIGJyYXZlcnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggdGhlIHdhciBicm91Z2h0IG1hbnkgaGFyZHNoaXBzLCBoZSBuZWl0aGVyIHNodW5uZWQgYW55IGdyZWF0IGxhYm91ciwgbm9yIGRpc2RhaW5lZCBhbnkgdGhhdCB3ZXJlIHNtYWxsLCBidXQgc3VycGFzc2VkIHRoZSBvZmZpY2VycyBvZiBoaXMgb3duIHJhbmsgaW4gZ2l2aW5nIGdvb2QgY291bnNlbCBhbmQgZm9yZXNlZWluZyB3aGF0IHdhcyBhZHZhbnRhZ2VvdXMsIGFuZCB2aWVkIHdpdGggdGhlIGNvbW1vbiBzb2xkaWVycyBpbiBmcnVnYWxpdHkgYW5kIGVuZHVyYW5jZSwgdGhlcmVieSB3aW5uaW5nIG11Y2ggZ29vZHdpbGwgYW1vbmcgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhcyBhIGdlbmVyYWwgdGhpbmcgaXQgd291bGQgc2VlbSB0aGF0IGV2ZXJ5IG1hbiBmaW5kcyBzb2xhY2UgZm9yIGhpcyBsYWJvdXJzIGluIHNlZWluZyBhbm90aGVyIHZvbHVudGFyaWx5IHNoYXJlIHRob3NlIGxhYm91cnM7IHRoaXMgc2VlbXMgdG8gdGFrZSBhd2F5IHRoZSBlbGVtZW50IG9mIGNvbXB1bHNpb247IGFuZCBpdCBpcyBhIG1vc3QgYWdyZWVhYmxlIHNwZWN0YWNsZSBmb3IgYSBSb21hbiBzb2xkaWVyIHdoZW4gaGUgc2VlcyBhIGdlbmVyYWwgZWF0aW5nIGNvbW1vbiBicmVhZCBpbiBwdWJsaWMsIG9yIHNsZWVwaW5nIG9uIGEgc2ltcGxlIHBhbGxldCwgb3IgdGFraW5nIGEgaGFuZCBpbiB0aGUgY29uc3RydWN0aW9uIG9mIHNvbWUgdHJlbmNoIG9yIHBhbGlzYWRlLiBGb3IgdGhleSBoYXZlIG5vdCBzbyBtdWNoIGFkbWlyYXRpb24gZm9yIHRob3NlIGxlYWRlcnMgd2hvIHNoYXJlIGhvbm91ciBhbmQgcmljaGVzIHdpdGggdGhlbSBhcyBmb3IgdGhvc2Ugd2hvIHRha2UgcGFydCBpbiB0aGVpciB0b2lscyBhbmQgZGFuZ2VycywgYnV0IGhhdmUgbW9yZSBhZmZlY3Rpb24gZm9yIHRob3NlIHdobyBhcmUgd2lsbGluZyB0byBqb2luIGluIHRoZWlyIHRvaWxzIHRoYW4gZm9yIHRob3NlIHdobyBwZXJtaXQgdGhlbSB0byBsZWFkIGFuIGVhc3kgbGlmZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnkgZG9pbmcgYWxsIHRoZXNlIHRoaW5ncyBhbmQgdGhlcmVieSB3aW5uaW5nIHRoZSBoZWFydHMgb2YgdGhlIHNvbGRpZXJzLCBNYXJpdXMgc29vbiBmaWxsZWQgQWZyaWNhLCBhbmQgc29vbiBmaWxsZWQgUm9tZSwgd2l0aCBoaXMgbmFtZSBhbmQgZmFtZSwgYW5kIG1lbiBpbiB0aGUgY2FtcCB3cm90ZSB0byB0aG9zZSBhdCBob21lIHRoYXQgdGhlcmUgd291bGQgYmUgbm8gZW5kIG9yIGNlc3NhdGlvbiBvZiB0aGUgd2FyIGFnYWluc3QgdGhlIEJhcmJhcmlhbiB1bmxlc3MgdGhleSBjaG9zZSBDYWl1cyBNYXJpdXMgY29uc3VsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ5IGRvaW5nIGFsbCB0aGVzZSB0aGluZ3MgYW5kIHRoZXJlYnkgd2lubmluZyB0aGUgaGVhcnRzIG9mIHRoZSBzb2xkaWVycywgTWFyaXVzIHNvb24gZmlsbGVkIEFmcmljYSwgYW5kIHNvb24gZmlsbGVkIFJvbWUsIHdpdGggaGlzIG5hbWUgYW5kIGZhbWUsIGFuZCBtZW4gaW4gdGhlIGNhbXAgd3JvdGUgdG8gdGhvc2UgYXQgaG9tZSB0aGF0IHRoZXJlIHdvdWxkIGJlIG5vIGVuZCBvciBjZXNzYXRpb24gb2YgdGhlIHdhciBhZ2FpbnN0IHRoZSBCYXJiYXJpYW4gdW5sZXNzIHRoZXkgY2hvc2UgQ2FpdXMgTWFyaXVzIGNvbnN1bC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbGwgdGhpcyBNZXRlbGx1cyB3YXMgZXZpZGVudGx5IGRpc3BsZWFzZWQuIEJ1dCBpdCB3YXMgdGhlIGFmZmFpciBvZiBUdXJwaWxsaXVzIHRoYXQgbW9zdCB2ZXhlZCBoaW0uIFRoaXMgVHVycGlsbGl1cyB3YXMgYW4gaGVyZWRpdGFyeSBndWVzdC1mcmllbmQgb2YgTWV0ZWxsdXMsIGFuZCBhdCB0aGlzIHRpbWUgd2FzIHNlcnZpbmcgaW4gaGlzIGFybXkgYXMgY2hpZWYgb2YgZW5naW5lZXJzLiBCdXQgaGUgd2FzIHB1dCBpbiBjaGFyZ2Ugb2YgVmFnYSwgYSBsYXJnZSBjaXR5LCBhbmQgYmVjYXVzZSBoZSByZWxpZWQgZm9yIHNhZmV0eSBvbiBoaXMgZG9pbmcgdGhlIGluaGFiaXRhbnRzIG5vIHdyb25nLCBidXQgcmF0aGVyIHRyZWF0aW5nIHRoZW0gd2l0aCBraW5kbmVzcyBhbmQgaHVtYW5pdHksIGhlIHVuYXdhcmVzIGNhbWUgaW50byB0aGUgcG93ZXIgb2YgdGhlIGVuZW15OyBmb3IgdGhleSBhZG1pdHRlZCBKdWd1cnRoYSBpbnRvIHRoZWlyIGNpdHkuIFN0aWxsLCB0aGV5IGRpZCBUdXJwaWxsaXVzIG5vIGhhcm0sIGJ1dCBvYnRhaW5lZCBoaXMgcmVsZWFzZSBhbmQgc2VudCBoaW0gYXdheSBzYWZlIGFuZCBzb3VuZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGEgY2hhcmdlIG9mIHRyZWFjaGVyeSB3YXMgYnJvdWdodCBhZ2FpbnN0IGhpbTsgYW5kIE1hcml1cywgd2hvIHdhcyBhIG1lbWJlciBvZiB0aGUgY291bmNpbCB3aGljaCB0cmllZCB0aGUgY2FzZSwgd2FzIGhpbXNlbGYgYml0dGVyLCBhbmQgZXhhc3BlcmF0ZWQgbW9zdCBvZiB0aGUgb3RoZXJzIGFnYWluc3QgdGhlIGFjY3VzZWQsIHNvIHRoYXQgTWV0ZWxsdXMgd2FzIHJlbHVjdGFudGx5IGZvcmNlZCB0byBwYXNzIHNlbnRlbmNlIG9mIGRlYXRoIHVwb24gaGltLiBBZnRlciBhIHNob3J0IHRpbWUsIGhvd2V2ZXIsIHRoZSBjaGFyZ2Ugd2FzIGZvdW5kIHRvIGJlIGZhbHNlLCBhbmQgYWxtb3N0IGV2ZXJ5Ym9keSBzeW1wYXRoaXplZCB3aXRoIE1ldGVsbHVzIGluIGhpcyBncmllZjsgYnV0IE1hcml1cywgZnVsbCBvZiBqb3kgYW5kIGNsYWltaW5nIHRoZSBjb25kZW1uYXRpb24gYXMgaGlzIG93biB3b3JrLCB3YXMgbm90IGFzaGFtZWQgdG8gZ28gYWJvdXQgc2F5aW5nIHRoYXQgaGUgaGFkIGZhc3RlbmVkIHVwb24gdGhlIHBhdGggb2YgTWV0ZWxsdXMgYSBkYWVtb24gd2hvIHdvdWxkIGF2ZW5nZSB0aGUgbXVyZGVyIG9mIGEgZ3Vlc3QtZnJpZW5kLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbGwgdGhpcyBNZXRlbGx1cyB3YXMgZXZpZGVudGx5IGRpc3BsZWFzZWQuIEJ1dCBpdCB3YXMgdGhlIGFmZmFpciBvZiBUdXJwaWxsaXVzIHRoYXQgbW9zdCB2ZXhlZCBoaW0uIFRoaXMgVHVycGlsbGl1cyB3YXMgYW4gaGVyZWRpdGFyeSBndWVzdC1mcmllbmQgb2YgTWV0ZWxsdXMsIGFuZCBhdCB0aGlzIHRpbWUgd2FzIHNlcnZpbmcgaW4gaGlzIGFybXkgYXMgY2hpZWYgb2YgZW5naW5lZXJzLiBCdXQgaGUgd2FzIHB1dCBpbiBjaGFyZ2Ugb2YgVmFnYSwgYSBsYXJnZSBjaXR5LCBhbmQgYmVjYXVzZSBoZSByZWxpZWQgZm9yIHNhZmV0eSBvbiBoaXMgZG9pbmcgdGhlIGluaGFiaXRhbnRzIG5vIHdyb25nLCBidXQgcmF0aGVyIHRyZWF0aW5nIHRoZW0gd2l0aCBraW5kbmVzcyBhbmQgaHVtYW5pdHksIGhlIHVuYXdhcmVzIGNhbWUgaW50byB0aGUgcG93ZXIgb2YgdGhlIGVuZW15OyBmb3IgdGhleSBhZG1pdHRlZCBKdWd1cnRoYSBpbnRvIHRoZWlyIGNpdHkuIFN0aWxsLCB0aGV5IGRpZCBUdXJwaWxsaXVzIG5vIGhhcm0sIGJ1dCBvYnRhaW5lZCBoaXMgcmVsZWFzZSBhbmQgc2VudCBoaW0gYXdheSBzYWZlIGFuZCBzb3VuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBhIGNoYXJnZSBvZiB0cmVhY2hlcnkgd2FzIGJyb3VnaHQgYWdhaW5zdCBoaW07IGFuZCBNYXJpdXMsIHdobyB3YXMgYSBtZW1iZXIgb2YgdGhlIGNvdW5jaWwgd2hpY2ggdHJpZWQgdGhlIGNhc2UsIHdhcyBoaW1zZWxmIGJpdHRlciwgYW5kIGV4YXNwZXJhdGVkIG1vc3Qgb2YgdGhlIG90aGVycyBhZ2FpbnN0IHRoZSBhY2N1c2VkLCBzbyB0aGF0IE1ldGVsbHVzIHdhcyByZWx1Y3RhbnRseSBmb3JjZWQgdG8gcGFzcyBzZW50ZW5jZSBvZiBkZWF0aCB1cG9uIGhpbS4gQWZ0ZXIgYSBzaG9ydCB0aW1lLCBob3dldmVyLCB0aGUgY2hhcmdlIHdhcyBmb3VuZCB0byBiZSBmYWxzZSwgYW5kIGFsbW9zdCBldmVyeWJvZHkgc3ltcGF0aGl6ZWQgd2l0aCBNZXRlbGx1cyBpbiBoaXMgZ3JpZWY7IGJ1dCBNYXJpdXMsIGZ1bGwgb2Ygam95IGFuZCBjbGFpbWluZyB0aGUgY29uZGVtbmF0aW9uIGFzIGhpcyBvd24gd29yaywgd2FzIG5vdCBhc2hhbWVkIHRvIGdvIGFib3V0IHNheWluZyB0aGF0IGhlIGhhZCBmYXN0ZW5lZCB1cG9uIHRoZSBwYXRoIG9mIE1ldGVsbHVzIGEgZGFlbW9uIHdobyB3b3VsZCBhdmVuZ2UgdGhlIG11cmRlciBvZiBhIGd1ZXN0LWZyaWVuZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gY29uc2VxdWVuY2Ugb2YgdGhpcyB0aGVyZSB3YXMgb3BlbiBlbm1pdHkgYmV0d2VlbiB0aGUgdHdvIG1lbjsgYW5kIHdlIGFyZSB0b2xkIHRoYXQgb24gb25lIG9jY2FzaW9uIHdoZW4gTWFyaXVzIHdhcyBwcmVzZW50IE1ldGVsbHVzIHNhaWQgdG8gaGltIGFzIGlmIGluIG1vY2tlcnk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9zdCB0aG91IHB1cnBvc2UgdG8gbGVhdmUgdXMsIG15IGdvb2QgU2lyLCBhbmQgc2FpbCBmb3IgaG9tZSwgYW5kIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcD8gUHJheSB3aWxsIGl0IG5vdCBzYXRpc2Z5IHRoZWUgdG8gYmUgZmVsbG93LWNvbnN1bCB3aXRoIHRoaXMgbXkgc29uPzwvcT4gTm93IHRoZSBzb24gb2YgTWV0ZWxsdXMgd2FzIGF0IHRoaXMgdGltZSBhIG1lcmUgc3RyaXBsaW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBNYXJpdXMgd2FzIGVhZ2VyIHRvIGJlIGRpc21pc3NlZCwgYW5kIHNvLCBhZnRlciBtYWtpbmcgbWFueSBwb3N0cG9uZW1lbnRzLCBhbmQgd2hlbiBvbmx5IHR3ZWx2ZSBkYXlzIHJlbWFpbmVkIGJlZm9yZSB0aGUgZWxlY3Rpb24gb2YgY29uc3VscywgTWV0ZWxsdXMgZGlzbWlzc2VkIGhpbS4gTWFyaXVzIGFjY29tcGxpc2hlZCB0aGUgbG9uZyBqb3VybmV5IGZyb20gdGhlIGNhbXAgdG8gVXRpY2EgYW5kIHRoZSBzZWEgaW4gdHdvIGRheXMgYW5kIG9uZSBuaWdodCwgYW5kIG9mZmVyZWQgc2FjcmlmaWNlIGJlZm9yZSBoZSBzYWlsZWQuIEFuZCB0aGUgc2VlciBpcyBzYWlkIHRvIGhhdmUgdG9sZCBoaW0gdGhhdCB0aGUgRGVpdHkgcmV2ZWFsZWQgZm9yIE1hcml1cyBzdWNjZXNzZXMgdGhhdCB3ZXJlIG9mIGluY3JlZGlibGUgbWFnbml0dWRlIGFuZCBiZXlvbmQgaGlzIGV2ZXJ5IGV4cGVjdGF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5FbGF0ZWQgYnkgdGhpcyBwcm9waGVjeSBoZSBwdXQgdG8gc2VhLiBJbiB0aHJlZSBkYXlzIGhlIGNyb3NzZWQgdGhlIHNlYSB3aXRoIGEgZmF2b3VyaW5nIHdpbmQsIGFuZCB3YXMgYXQgb25jZSB3ZWxjb21lZCBnbGFkbHkgYnkgdGhlIHBvcHVsYWNlLCBhbmQgYWZ0ZXIgYmVpbmcgaW50cm9kdWNlZCB0byB0aGUgYXNzZW1ibHkgYnkgb25lIG9mIHRoZSB0cmlidW5lcywgaGUgZmlyc3QgbWFkZSBtYW55IHNsYW5kZXJvdXMgY2hhcmdlcyBhZ2FpbnN0IE1ldGVsbHVzLCBhbmQgdGhlbiBhc2tlZCBmb3IgdGhlIGNvbnN1bHNoaXAsIHByb21pc2luZyB0aGF0IGhlIHdvdWxkIGVpdGhlciBraWxsIEp1Z3VydGhhIG9yIHRha2UgaGltIGFsaXZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbnNlcXVlbmNlIG9mIHRoaXMgdGhlcmUgd2FzIG9wZW4gZW5taXR5IGJldHdlZW4gdGhlIHR3byBtZW47IGFuZCB3ZSBhcmUgdG9sZCB0aGF0IG9uIG9uZSBvY2Nhc2lvbiB3aGVuIE1hcml1cyB3YXMgcHJlc2VudCBNZXRlbGx1cyBzYWlkIHRvIGhpbSBhcyBpZiBpbiBtb2NrZXJ5OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG9zdCB0aG91IHB1cnBvc2UgdG8gbGVhdmUgdXMsIG15IGdvb2QgU2lyLCBhbmQgc2FpbCBmb3IgaG9tZSwgYW5kIHN0YW5kIGZvciB0aGUgY29uc3Vsc2hpcD8gUHJheSB3aWxsIGl0IG5vdCBzYXRpc2Z5IHRoZWUgdG8gYmUgZmVsbG93LWNvbnN1bCB3aXRoIHRoaXMgbXkgc29uPzwvcT4gTm93IHRoZSBzb24gb2YgTWV0ZWxsdXMgd2FzIGF0IHRoaXMgdGltZSBhIG1lcmUgc3RyaXBsaW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIE1hcml1cyB3YXMgZWFnZXIgdG8gYmUgZGlzbWlzc2VkLCBhbmQgc28sIGFmdGVyIG1ha2luZyBtYW55IHBvc3Rwb25lbWVudHMsIGFuZCB3aGVuIG9ubHkgdHdlbHZlIGRheXMgcmVtYWluZWQgYmVmb3JlIHRoZSBlbGVjdGlvbiBvZiBjb25zdWxzLCBNZXRlbGx1cyBkaXNtaXNzZWQgaGltLiBNYXJpdXMgYWNjb21wbGlzaGVkIHRoZSBsb25nIGpvdXJuZXkgZnJvbSB0aGUgY2FtcCB0byBVdGljYSBhbmQgdGhlIHNlYSBpbiB0d28gZGF5cyBhbmQgb25lIG5pZ2h0LCBhbmQgb2ZmZXJlZCBzYWNyaWZpY2UgYmVmb3JlIGhlIHNhaWxlZC4gQW5kIHRoZSBzZWVyIGlzIHNhaWQgdG8gaGF2ZSB0b2xkIGhpbSB0aGF0IHRoZSBEZWl0eSByZXZlYWxlZCBmb3IgTWFyaXVzIHN1Y2Nlc3NlcyB0aGF0IHdlcmUgb2YgaW5jcmVkaWJsZSBtYWduaXR1ZGUgYW5kIGJleW9uZCBoaXMgZXZlcnkgZXhwZWN0YXRpb24uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkVsYXRlZCBieSB0aGlzIHByb3BoZWN5IGhlIHB1dCB0byBzZWEuIEluIHRocmVlIGRheXMgaGUgY3Jvc3NlZCB0aGUgc2VhIHdpdGggYSBmYXZvdXJpbmcgd2luZCwgYW5kIHdhcyBhdCBvbmNlIHdlbGNvbWVkIGdsYWRseSBieSB0aGUgcG9wdWxhY2UsIGFuZCBhZnRlciBiZWluZyBpbnRyb2R1Y2VkIHRvIHRoZSBhc3NlbWJseSBieSBvbmUgb2YgdGhlIHRyaWJ1bmVzLCBoZSBmaXJzdCBtYWRlIG1hbnkgc2xhbmRlcm91cyBjaGFyZ2VzIGFnYWluc3QgTWV0ZWxsdXMsIGFuZCB0aGVuIGFza2VkIGZvciB0aGUgY29uc3Vsc2hpcCwgcHJvbWlzaW5nIHRoYXQgaGUgd291bGQgZWl0aGVyIGtpbGwgSnVndXJ0aGEgb3IgdGFrZSBoaW0gYWxpdmUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIHRyaXVtcGhhbnRseSBlbGVjdGVkLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIHllYXIgMTA3IEIuQy4sIGF0IHRoZSBhZ2Ugb2YgZmlmdHkuIDwvbm90ZT4gYW5kIGF0IG9uY2UgYmVnYW4gdG8gbGV2eSB0cm9vcHMuIENvbnRyYXJ5IHRvIGxhdyBhbmQgY3VzdG9tIGhlIGVubGlzdGVkIG1hbnkgYSBwb29yIGFuZCBpbnNpZ25pZmljYW50IG1hbiwgYWx0aG91Z2ggZm9ybWVyIGNvbW1hbmRlcnMgaGFkIG5vdCBhY2NlcHRlZCBzdWNoIHBlcnNvbnMsIGJ1dCBiZXN0b3dlZCBhcm1zLCBqdXN0IGFzIHRoZXkgd291bGQgYW55IG90aGVyIGhvbm91ciwgb25seSBvbiB0aG9zZSB3aG9zZSBwcm9wZXJ0eSBhc3Nlc3NtZW50IG1hZGUgdGhlbSB3b3J0aHkgdG8gcmVjZWl2ZSB0aGVzZSwgZWFjaCBzb2xkaWVyIGJlaW5nIHN1cHBvc2VkIHRvIHB1dCBoaXMgc3Vic3RhbmNlIGluIHBsZWRnZSB0byB0aGUgc3RhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3QgdGhpcywgaG93ZXZlciwgdGhhdCBicm91Z2h0IG1vc3Qgb2RpdW0gdXBvbiBNYXJpdXMsIGJ1dCB0aGUgYm9sZGx5IGluc29sZW50IGFuZCBhcnJvZ2FudCBzcGVlY2hlcyB3aXRoIHdoaWNoIGhlIHZleGVkIHRoZSBub2JsZXMsIGNyeWluZyBvdXQgdGhhdCBoZSBoYWQgY2FycmllZCBvZmYgdGhlIGNvbnN1bHNoaXAgYXMgc3BvaWwgZnJvbSB0aGUgZWZmZW1pbmFjeSBvZiB0aGUgcmljaCBhbmQgd2VsbC1ib3JuLCBhbmQgdGhhdCBoZSBoYWQgd291bmRzIHVwb24gaGlzIG93biBwZXJzb24gd2l0aCB3aGljaCB0byB2YXVudCBoaW1zZWxmIGJlZm9yZSB0aGUgcGVvcGxlLCBub3QgbW9udW1lbnRzIG9mIHRoZSBkZWFkIG5vciBsaWtlbmVzc2VzIG9mIG90aGVyIG1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T2Z0ZW4sIHRvbywgaGUgd291bGQgbWVudGlvbiBieSBuYW1lIHRoZSBnZW5lcmFscyBpbiBBZnJpY2Egd2hvIGhhZCBiZWVuIHVuc3VjY2Vzc2Z1bCwgbm93IEJlc3RpYSwgYW5kIG5vdyBBbGJpbnVzLCBtZW4gb2YgaWxsdXN0cmlvdXMgaG91c2VzIGluZGVlZCwgYnV0IHVuZm9ydHVuYXRlIHRoZW1zZWx2ZXMsIGFuZCB1bndhcmxpa2UsIHdobyBoYWQgbWV0IHdpdGggZGlzYXN0ZXIgdGhyb3VnaCBsYWNrIG9mIGV4cGVyaWVuY2U7IGFuZCBoZSB3b3VsZCBhc2sgaGlzIGF1ZGllbmNlIGlmIHRoZXkgZGlkIG5vdCB0aGluayB0aGF0IHRoZSBhbmNlc3RvcnMgb2YgdGhlc2UgbWVuIHdvdWxkIGhhdmUgbXVjaCBwcmVmZXJyZWQgdG8gbGVhdmUgZGVzY2VuZGFudHMgbGlrZSBoaW1zZWxmLCBzaW5jZSB0aGV5IHRoZW1zZWx2ZXMgaGFkIGJlZW4gbWFkZSBpbGx1c3Ryb3VzLCBub3QgYnkgdGhlaXIgbm9ibGUgYmlydGgsIGJ1dCBieSB0aGVpciB2YWxvdXIgYW5kIG5vYmxlIGRlZWRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHRhbGsgd2FzIG5vdCBtZXJlIGVtcHR5IGJvYXN0aW5nLCBub3Igd2FzIGhpcyBkZXNpcmUgdG8gbWFrZSBoaW1zZWxmIGhhdGVkIGJ5IHRoZSBub2JpbGl0eSB3aXRob3V0IHB1cnBvc2U7IGluZGVlZCB0aGUgcGVvcGxlLCB3aG8gd2VyZSBkZWxpZ2h0ZWQgdG8gaGF2ZSB0aGUgc2VuYXRlIGluc3VsdGVkIGFuZCBhbHdheXMgbWVhc3VyZWQgdGhlIGdyZWF0bmVzcyBvZiBhIG1hbidzIHNwaXJpdCBieSB0aGUgYm9hc3RmdWxuZXNzIG9mIGhpcyBzcGVlY2gsIGVuY291cmFnZWQgaGltLCBhbmQgaW5jaXRlZCBoaW0gbm90IHRvIHNwYXJlIG1lbiBvZiBoaWdoIHJlcHV0ZSBpZiBoZSB3aXNoZWQgdG8gcGxlYXNlIHRoZSBtdWx0aXR1ZGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgdHJpdW1waGFudGx5IGVsZWN0ZWQsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDEwNyBCLkMuLCBhdCB0aGUgYWdlIG9mIGZpZnR5LiA8L25vdGU+IGFuZCBhdCBvbmNlIGJlZ2FuIHRvIGxldnkgdHJvb3BzLiBDb250cmFyeSB0byBsYXcgYW5kIGN1c3RvbSBoZSBlbmxpc3RlZCBtYW55IGEgcG9vciBhbmQgaW5zaWduaWZpY2FudCBtYW4sIGFsdGhvdWdoIGZvcm1lciBjb21tYW5kZXJzIGhhZCBub3QgYWNjZXB0ZWQgc3VjaCBwZXJzb25zLCBidXQgYmVzdG93ZWQgYXJtcywganVzdCBhcyB0aGV5IHdvdWxkIGFueSBvdGhlciBob25vdXIsIG9ubHkgb24gdGhvc2Ugd2hvc2UgcHJvcGVydHkgYXNzZXNzbWVudCBtYWRlIHRoZW0gd29ydGh5IHRvIHJlY2VpdmUgdGhlc2UsIGVhY2ggc29sZGllciBiZWluZyBzdXBwb3NlZCB0byBwdXQgaGlzIHN1YnN0YW5jZSBpbiBwbGVkZ2UgdG8gdGhlIHN0YXRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBub3QgdGhpcywgaG93ZXZlciwgdGhhdCBicm91Z2h0IG1vc3Qgb2RpdW0gdXBvbiBNYXJpdXMsIGJ1dCB0aGUgYm9sZGx5IGluc29sZW50IGFuZCBhcnJvZ2FudCBzcGVlY2hlcyB3aXRoIHdoaWNoIGhlIHZleGVkIHRoZSBub2JsZXMsIGNyeWluZyBvdXQgdGhhdCBoZSBoYWQgY2FycmllZCBvZmYgdGhlIGNvbnN1bHNoaXAgYXMgc3BvaWwgZnJvbSB0aGUgZWZmZW1pbmFjeSBvZiB0aGUgcmljaCBhbmQgd2VsbC1ib3JuLCBhbmQgdGhhdCBoZSBoYWQgd291bmRzIHVwb24gaGlzIG93biBwZXJzb24gd2l0aCB3aGljaCB0byB2YXVudCBoaW1zZWxmIGJlZm9yZSB0aGUgcGVvcGxlLCBub3QgbW9udW1lbnRzIG9mIHRoZSBkZWFkIG5vciBsaWtlbmVzc2VzIG9mIG90aGVyIG1lbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9mdGVuLCB0b28sIGhlIHdvdWxkIG1lbnRpb24gYnkgbmFtZSB0aGUgZ2VuZXJhbHMgaW4gQWZyaWNhIHdobyBoYWQgYmVlbiB1bnN1Y2Nlc3NmdWwsIG5vdyBCZXN0aWEsIGFuZCBub3cgQWxiaW51cywgbWVuIG9mIGlsbHVzdHJpb3VzIGhvdXNlcyBpbmRlZWQsIGJ1dCB1bmZvcnR1bmF0ZSB0aGVtc2VsdmVzLCBhbmQgdW53YXJsaWtlLCB3aG8gaGFkIG1ldCB3aXRoIGRpc2FzdGVyIHRocm91Z2ggbGFjayBvZiBleHBlcmllbmNlOyBhbmQgaGUgd291bGQgYXNrIGhpcyBhdWRpZW5jZSBpZiB0aGV5IGRpZCBub3QgdGhpbmsgdGhhdCB0aGUgYW5jZXN0b3JzIG9mIHRoZXNlIG1lbiB3b3VsZCBoYXZlIG11Y2ggcHJlZmVycmVkIHRvIGxlYXZlIGRlc2NlbmRhbnRzIGxpa2UgaGltc2VsZiwgc2luY2UgdGhleSB0aGVtc2VsdmVzIGhhZCBiZWVuIG1hZGUgaWxsdXN0cm91cywgbm90IGJ5IHRoZWlyIG5vYmxlIGJpcnRoLCBidXQgYnkgdGhlaXIgdmFsb3VyIGFuZCBub2JsZSBkZWVkcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggdGFsayB3YXMgbm90IG1lcmUgZW1wdHkgYm9hc3RpbmcsIG5vciB3YXMgaGlzIGRlc2lyZSB0byBtYWtlIGhpbXNlbGYgaGF0ZWQgYnkgdGhlIG5vYmlsaXR5IHdpdGhvdXQgcHVycG9zZTsgaW5kZWVkIHRoZSBwZW9wbGUsIHdobyB3ZXJlIGRlbGlnaHRlZCB0byBoYXZlIHRoZSBzZW5hdGUgaW5zdWx0ZWQgYW5kIGFsd2F5cyBtZWFzdXJlZCB0aGUgZ3JlYXRuZXNzIG9mIGEgbWFuJ3Mgc3Bpcml0IGJ5IHRoZSBib2FzdGZ1bG5lc3Mgb2YgaGlzIHNwZWVjaCwgZW5jb3VyYWdlZCBoaW0sIGFuZCBpbmNpdGVkIGhpbSBub3QgdG8gc3BhcmUgbWVuIG9mIGhpZ2ggcmVwdXRlIGlmIGhlIHdpc2hlZCB0byBwbGVhc2UgdGhlIG11bHRpdHVkZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgY3Jvc3NlZCB0byBBZnJpY2EsIE1ldGVsbHVzLCBub3cgYmVjb21lIGEgdmljdGltIG9mIGplYWxvdXN5LCBhbmQgdmV4ZWQgYmVjYXVzZSwgYWZ0ZXIgaGUgaGFkIGJyb3VnaHQgdGhlIHdhciB0byBhbiBlbmQgYW5kIGhhZCBub3RoaW5nIGZ1cnRoZXIgdG8gZG8gZXhjZXB0IHRvIHNlaXplIHRoZSBwZXJzb24gb2YgSnVndXJ0aGEsIE1hcml1cyB3YXMgY29taW5nIHRvIGVuam95IHRoZSBjcm93biBhbmQgdGhlIHRyaXVtcGgs4oCUYSBtYW4gd2hvc2UgaW5ncmF0aXR1ZGUgdG93YXJkcyBoaXMgYmVuZWZhY3RvciBoYWQgcmFpc2VkIGhpbSB0byBwb3dlcizigJR3b3VsZCBub3QgY29uc2VudCB0byBtZWV0IGhpbSwgYnV0IHByaXZhdGVseSBsZWZ0IHRoZSBjb3VudHJ5IHdoaWxlIFJ1dGlsaXVzLCB3aG8gaGFkIGJlY29tZSBoaXMgbGVnYXRlLCBoYW5kZWQgb3ZlciB0aGUgYXJteSB0byBNYXJpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgZW5kIGEgcmV0cmlidXRpb24gZmVsbCB1cG9uIE1hcml1czsgZm9yIFN1bGxhIHJvYmJlZCBoaW0gb2YgdGhlIGdsb3J5IG9mIGhpcyBzdWNjZXNzLCBhcyBNYXJpdXMgaGFkIHJvYmJlZCBNZXRlbGx1cy4gSG93IHRoaXMgY2FtZSB0byBwYXNzLCBJIHdpbGwgbmFycmF0ZSBicmllZmx5LCBzaW5jZSB0aGUgZGV0YWlscyBhcmUgZ2l2ZW4gbW9yZSBhdCBsZW5ndGggaW4gbXkgTGlmZSBvZiBTdWxsYS4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+IAogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMy4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIGlpaS4gPC9iaWJsPiAKICAgICAgICAgICAgPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgY3Jvc3NlZCB0byBBZnJpY2EsIE1ldGVsbHVzLCBub3cgYmVjb21lIGEgdmljdGltIG9mIGplYWxvdXN5LCBhbmQgdmV4ZWQgYmVjYXVzZSwgYWZ0ZXIgaGUgaGFkIGJyb3VnaHQgdGhlIHdhciB0byBhbiBlbmQgYW5kIGhhZCBub3RoaW5nIGZ1cnRoZXIgdG8gZG8gZXhjZXB0IHRvIHNlaXplIHRoZSBwZXJzb24gb2YgSnVndXJ0aGEsIE1hcml1cyB3YXMgY29taW5nIHRvIGVuam95IHRoZSBjcm93biBhbmQgdGhlIHRyaXVtcGgs4oCUYSBtYW4gd2hvc2UgaW5ncmF0aXR1ZGUgdG93YXJkcyBoaXMgYmVuZWZhY3RvciBoYWQgcmFpc2VkIGhpbSB0byBwb3dlcizigJR3b3VsZCBub3QgY29uc2VudCB0byBtZWV0IGhpbSwgYnV0IHByaXZhdGVseSBsZWZ0IHRoZSBjb3VudHJ5IHdoaWxlIFJ1dGlsaXVzLCB3aG8gaGFkIGJlY29tZSBoaXMgbGVnYXRlLCBoYW5kZWQgb3ZlciB0aGUgYXJteSB0byBNYXJpdXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgZW5kIGEgcmV0cmlidXRpb24gZmVsbCB1cG9uIE1hcml1czsgZm9yIFN1bGxhIHJvYmJlZCBoaW0gb2YgdGhlIGdsb3J5IG9mIGhpcyBzdWNjZXNzLCBhcyBNYXJpdXMgaGFkIHJvYmJlZCBNZXRlbGx1cy4gSG93IHRoaXMgY2FtZSB0byBwYXNzLCBJIHdpbGwgbmFycmF0ZSBicmllZmx5LCBzaW5jZSB0aGUgZGV0YWlscyBhcmUgZ2l2ZW4gbW9yZSBhdCBsZW5ndGggaW4gbXkgTGlmZSBvZiBTdWxsYS4gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDMuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBpaWkuIDwvYmlibD4gCiAgICAgICAgICAgIDwvbm90ZT4gCgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDMuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBpaWkuIDwvYmlibD4gCiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qm9jY2h1cywgdGhlIGtpbmcgb2YgdGhlIEJhcmJhcmlhbnMgaW4gdGhlIGludGVyaW9yLCB3YXMgYSBzb24taW4tbGF3IG9mIEp1Z3VydGhhLCBhbmQgYXBwYXJlbnRseSBnYXZlIGhpbSBsaXR0bGUgb3Igbm8gYXNzaXN0YW5jZSBpbiBoaXMgd2FyLCBhbGxlZ2luZyBoaXMgZmFpdGhsZXNzbmVzcyBhcyBhbiBleGN1c2UsIGFuZCBmZWFyaW5nIHRoZSBncm93dGggb2YgaGlzIHBvd2VyLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEp1Z3VydGhhIGluIGhpcyBmbGlnaHQgYW5kIHdhbmRlcmluZyBmZWx0IGNvbXBlbGxlZCB0byBtYWtlIGhpbSBoaXMgbGFzdCBob3BlIGFuZCBzb3VnaHQgaGF2ZW4gd2l0aCBoaW0sIEJvY2NodXMgcmVjZWl2ZWQgaGltLCBtb3JlIG91dCBvZiByZWdhcmQgZm9yIGhpcyBwb3NpdGlvbiBhcyBhIHN1cHBsaWFudCB0aGFuIGZyb20gZ29vZHdpbGwsIGFuZCBrZXB0IGhpbSBpbiBoaXMgaGFuZHMuIFNvIGZhciBhcyBoaXMgb3BlbiBhY3RzIHdlcmUgY29uY2VybmVkLCBCb2NjaHVzIGVudHJlYXRlZCBNYXJpdXMgaW4gYmVoYWxmIG9mIGhpcyBmYXRoZXItaW4tbGF3LCB3cml0aW5nIHRoYXQgaGUgd291bGQgbm90IGdpdmUgaGltIHVwIGFuZCBhc3N1bWluZyBhIGJvbGQgdG9uZTsgYnV0IHNlY3JldGx5IGhlIHBsYW5uZWQgdG8gYmV0cmF5IGhpbSwgYW5kIHNlbnQgZm9yIEx1Y2l1cyBTdWxsYSwgd2hvIHdhcyBxdWFlc3RvciBmb3IgTWFyaXVzIGFuZCBoYWQgYmVlbiBvZiBzb21lIHNlcnZpY2UgdG8gQm9jY2h1cyBkdXJpbmcgdGhlIGNhbXBhaWduLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBTdWxsYSBoYWQgY29tZSB0byBoaW0gaW4gYWxsIGNvbmZpZGVuY2UsIHRoZSBCYXJiYXJpYW4gZXhwZXJpZW5jZWQgYSBjaGFuZ2Ugb2YgaGVhcnQgYW5kIGZlbHQgcmVwZW50YW50LCBhbmQgZm9yIG1hbnkgZGF5cyB3YXZlcmVkIGluIGhpcyBwbGFucywgZGVsaWJlcmF0aW5nIHdoZXRoZXIgdG8gc3VycmVuZGVyIEp1Z3VydGhhIG9yIHRvIGhvbGQgU3VsbGEgYWxzbyBhIHByaXNvbmVyLiBGaW5hbGx5IGhvd2V2ZXIsIGhlIGRlY2lkZWQgdXBvbiBoaXMgZmlyc3QgcGxhbiBvZiB0cmVhY2hlcnksIGFuZCBwdXQgSnVndXJ0aGEgYWxpdmUgaW50byB0aGUgaGFuZHMgb2YgU3VsbGEuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIEp1Z3VydGhhIGluIGhpcyBmbGlnaHQgYW5kIHdhbmRlcmluZyBmZWx0IGNvbXBlbGxlZCB0byBtYWtlIGhpbSBoaXMgbGFzdCBob3BlIGFuZCBzb3VnaHQgaGF2ZW4gd2l0aCBoaW0sIEJvY2NodXMgcmVjZWl2ZWQgaGltLCBtb3JlIG91dCBvZiByZWdhcmQgZm9yIGhpcyBwb3NpdGlvbiBhcyBhIHN1cHBsaWFudCB0aGFuIGZyb20gZ29vZHdpbGwsIGFuZCBrZXB0IGhpbSBpbiBoaXMgaGFuZHMuIFNvIGZhciBhcyBoaXMgb3BlbiBhY3RzIHdlcmUgY29uY2VybmVkLCBCb2NjaHVzIGVudHJlYXRlZCBNYXJpdXMgaW4gYmVoYWxmIG9mIGhpcyBmYXRoZXItaW4tbGF3LCB3cml0aW5nIHRoYXQgaGUgd291bGQgbm90IGdpdmUgaGltIHVwIGFuZCBhc3N1bWluZyBhIGJvbGQgdG9uZTsgYnV0IHNlY3JldGx5IGhlIHBsYW5uZWQgdG8gYmV0cmF5IGhpbSwgYW5kIHNlbnQgZm9yIEx1Y2l1cyBTdWxsYSwgd2hvIHdhcyBxdWFlc3RvciBmb3IgTWFyaXVzIGFuZCBoYWQgYmVlbiBvZiBzb21lIHNlcnZpY2UgdG8gQm9jY2h1cyBkdXJpbmcgdGhlIGNhbXBhaWduLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIFN1bGxhIGhhZCBjb21lIHRvIGhpbSBpbiBhbGwgY29uZmlkZW5jZSwgdGhlIEJhcmJhcmlhbiBleHBlcmllbmNlZCBhIGNoYW5nZSBvZiBoZWFydCBhbmQgZmVsdCByZXBlbnRhbnQsIGFuZCBmb3IgbWFueSBkYXlzIHdhdmVyZWQgaW4gaGlzIHBsYW5zLCBkZWxpYmVyYXRpbmcgd2hldGhlciB0byBzdXJyZW5kZXIgSnVndXJ0aGEgb3IgdG8gaG9sZCBTdWxsYSBhbHNvIGEgcHJpc29uZXIuIEZpbmFsbHkgaG93ZXZlciwgaGUgZGVjaWRlZCB1cG9uIGhpcyBmaXJzdCBwbGFuIG9mIHRyZWFjaGVyeSwgYW5kIHB1dCBKdWd1cnRoYSBhbGl2ZSBpbnRvIHRoZSBoYW5kcyBvZiBTdWxsYS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIGZpcnN0IHNlZWQgb2YgdGhhdCBiaXR0ZXIgYW5kIGluY3VyYWJsZSBoYXRyZWQgYmV0d2VlbiBNYXJpdXMgYW5kIFN1bGxhLCB3aGljaCBuZWFybHkgYnJvdWdodCBSb21lIHRvIHJ1aW4uIEZvciBtYW55IHdpc2hlZCBTdWxsYSB0byBoYXZlIHRoZSBnbG9yeSBvZiB0aGUgYWZmYWlyIGJlY2F1c2UgdGhleSBoYXRlZCBNYXJpdXMsIGFuZCBTdWxsYSBoaW1zZWxmIGhhZCBhIHNlYWwtcmluZyBtYWRlLCB3aGljaCBoZSB1c2VkIHRvIHdlYXIsIG9uIHdoaWNoIHdhcyBlbmdyYXZlZCB0aGUgc3VycmVuZGVyIG9mIEp1Z3VydGhhIHRvIGhpbSBieSBCb2NjaHVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CeSBjb25zdGFudGx5IHVzaW5nIHRoaXMgcmluZyBTdWxsYSBwcm92b2tlZCBNYXJpdXMsIHdobyB3YXMgYW4gYW1iaXRpb3VzIG1hbiwgbG9hdGggdG8gc2hhcmUgaGlzIGdsb3J5IHdpdGggYW5vdGhlciwgYW5kIHF1YXJyZWxzb21lLiBBbmQgdGhlIGVuZW1pZXMgb2YgTWFyaXVzIGdhdmUgU3VsbGEgbW9zdCBlbmNvdXJhZ2VtZW50LCBieSBhdHRyaWJ1dGluZyB0aGUgZmlyc3QgYW5kIGdyZWF0ZXN0IHN1Y2Nlc3NlcyBvZiB0aGUgd2FyIHRvIE1ldGVsbHVzLCBidXQgdGhlIGxhc3QsIGFuZCB0aGUgdGVybWluYXRpb24gb2YgaXQsIHRvIFN1bGxhLCB0aGF0IHNvIHRoZSBwZW9wbGUgbWlnaHQgY2Vhc2UgYWRtaXJpbmcgTWFyaXVzIGFuZCBnaXZpbmcgaGltIHRoZWlyIGNoaWVmIGFsbGVnaWFuY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBmaXJzdCBzZWVkIG9mIHRoYXQgYml0dGVyIGFuZCBpbmN1cmFibGUgaGF0cmVkIGJldHdlZW4gTWFyaXVzIGFuZCBTdWxsYSwgd2hpY2ggbmVhcmx5IGJyb3VnaHQgUm9tZSB0byBydWluLiBGb3IgbWFueSB3aXNoZWQgU3VsbGEgdG8gaGF2ZSB0aGUgZ2xvcnkgb2YgdGhlIGFmZmFpciBiZWNhdXNlIHRoZXkgaGF0ZWQgTWFyaXVzLCBhbmQgU3VsbGEgaGltc2VsZiBoYWQgYSBzZWFsLXJpbmcgbWFkZSwgd2hpY2ggaGUgdXNlZCB0byB3ZWFyLCBvbiB3aGljaCB3YXMgZW5ncmF2ZWQgdGhlIHN1cnJlbmRlciBvZiBKdWd1cnRoYSB0byBoaW0gYnkgQm9jY2h1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ5IGNvbnN0YW50bHkgdXNpbmcgdGhpcyByaW5nIFN1bGxhIHByb3Zva2VkIE1hcml1cywgd2hvIHdhcyBhbiBhbWJpdGlvdXMgbWFuLCBsb2F0aCB0byBzaGFyZSBoaXMgZ2xvcnkgd2l0aCBhbm90aGVyLCBhbmQgcXVhcnJlbHNvbWUuIEFuZCB0aGUgZW5lbWllcyBvZiBNYXJpdXMgZ2F2ZSBTdWxsYSBtb3N0IGVuY291cmFnZW1lbnQsIGJ5IGF0dHJpYnV0aW5nIHRoZSBmaXJzdCBhbmQgZ3JlYXRlc3Qgc3VjY2Vzc2VzIG9mIHRoZSB3YXIgdG8gTWV0ZWxsdXMsIGJ1dCB0aGUgbGFzdCwgYW5kIHRoZSB0ZXJtaW5hdGlvbiBvZiBpdCwgdG8gU3VsbGEsIHRoYXQgc28gdGhlIHBlb3BsZSBtaWdodCBjZWFzZSBhZG1pcmluZyBNYXJpdXMgYW5kIGdpdmluZyBoaW0gdGhlaXIgY2hpZWYgYWxsZWdpYW5jZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U29vbiwgaG93ZXZlciwgYWxsIHRoaXMgZW52eSBhbmQgaGF0cmVkIGFuZCBzbGFuZGVyIG9mIE1hcml1cyB3YXMgcmVtb3ZlZCBhbmQgZGlzc2lwYXRlZCBieSB0aGUgcGVyaWwgd2hpY2ggdGhyZWF0ZW5lZCBJdGFseSBmcm9tIHRoZSB3ZXN0LCBhcyBzb29uIGFzIHRoZSBzdGF0ZSBmZWx0IHRoZSBuZWVkIG9mIGEgZ3JlYXQgZ2VuZXJhbCBhbmQgbG9va2VkIGFib3V0IGZvciBhIGhlbG1zbWFuIHdob20gc2hlIG1pZ2h0IGVtcGxveSB0byBzYXZlIGhlciBmcm9tIHNvIGdyZWF0IGEgZGVsdWdlIG9mIHdhci4gVGhlbiB0aGUgcGVvcGxlIHdvdWxkIGhhdmUgbm90aGluZyB0byBkbyB3aXRoIGFueW9uZSBvZiBoaWdoIGJpcnRoIG9yIG9mIGEgd2VhbHRoeSBob3VzZSB3aG8gb2ZmZXJlZCBoaW1zZWxmIGF0IHRoZSBjb25zdWxhciBlbGVjdGlvbnMsIGJ1dCBwcm9jbGFpbWVkIE1hcml1cyBjb25zdWwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Rm9yIHRoZSB5ZWFyIDEwNCBCLkMuIDwvbm90ZT4gaW4gc3BpdGUgb2YgaGlzIGFic2VuY2UgZnJvbSB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG5vIHNvb25lciBoYWQgd29yZCBiZWVuIGJyb3VnaHQgdG8gdGhlIHBlb3BsZSBvZiB0aGUgY2FwdHVyZSBvZiBKdWd1cnRoYSB0aGFuIHRoZSByZXBvcnRzIGFib3V0IHRoZSBUZXV0b25lcyBhbmQgQ2ltYnJpIGZlbGwgdXBvbiB0aGVpciBlYXJzLiBXaGF0IHRoZXNlIHJlcG9ydHMgc2FpZCBhYm91dCB0aGUgbnVtYmVycyBhbmQgc3RyZW5ndGggb2YgdGhlIGludmFkaW5nIGhvc3RzIHdhcyBkaXNiZWxpZXZlZCBhdCBmaXJzdCwgYnV0IGFmdGVyd2FyZHMgaXQgd2FzIGZvdW5kIHRvIGJlIHNob3J0IG9mIHRoZSB0cnV0aC4gRm9yIHRocmVlIGh1bmRyZWQgdGhvdXNhbmQgYXJtZWQgZmlnaHRpbmcgbWVuIHdlcmUgYWR2YW5jaW5nLCBhbmQgbXVjaCBsYXJnZXIgaG9yZGVzIG9mIHdvbWVuIGFuZCBjaGlsZHJlbiB3ZXJlIHNhaWQgdG8gYWNjb21wYW55IHRoZW0sIGluIHF1ZXN0IG9mIGxhbmQgdG8gc3VwcG9ydCBzbyB2YXN0IGEgbXVsdGl0dWRlLCBhbmQgb2YgY2l0aWVzIGluIHdoaWNoIHRvIHNldHRsZSBhbmQgbGl2ZSwganVzdCBhcyB0aGUgR2F1bHMgYmVmb3JlIHRoZW0sIGFzIHRoZXkgbGVhcm5lZCwgaGFkIHdyZXN0ZWQgdGhlIGJlc3QgcGFydCBvZiBJdGFseSBmcm9tIHRoZSBUeXJyaGVuaWFucyBhbmQgbm93IG9jY3VwaWVkIGl0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IHRoZW1zZWx2ZXMsIGluZGVlZCwgaGFkIG5vdCBoYWQgaW50ZXJjb3Vyc2Ugd2l0aCBvdGhlciBwZW9wbGVzLCBhbmQgaGFkIHRyYXZlcnNlZCBhIGdyZWF0IHN0cmV0Y2ggb2YgY291bnRyeSwgc28gdGhhdCBpdCBjb3VsZCBub3QgYmUgYXNjZXJ0YWluZWQgd2hhdCBwZW9wbGUgaXQgd2FzIG5vciB3aGVuY2UgdGhleSBoYWQgc2V0IG91dCwgdGh1cyB0byBkZXNjZW5kIHVwb24gR2F1bCBhbmQgSXRhbHkgbGlrZSBhIGNsb3VkLiBUaGUgbW9zdCBwcmV2YWxlbnQgY29uamVjdHVyZSB3YXMgdGhhdCB0aGV5IHdlcmUgc29tZSBvZiB0aGUgR2VybWFuIHBlb3BsZXMgd2hpY2ggZXh0ZW5kZWQgYXMgZmFyIGFzIHRoZSBub3J0aGVybiBvY2VhbiwgYSBjb25qZWN0dXJlIGJhc2VkIG9uIHRoZWlyIGdyZWF0IHN0YXR1cmUsIHRoZWlyIGxpZ2h0LWJsdWUgZXllcywgYW5kIHRoZSBmYWN0IHRoYXQgdGhlIEdlcm1hbnMgY2FsbCByb2JiZXJzIENpbWJyaS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U29vbiwgaG93ZXZlciwgYWxsIHRoaXMgZW52eSBhbmQgaGF0cmVkIGFuZCBzbGFuZGVyIG9mIE1hcml1cyB3YXMgcmVtb3ZlZCBhbmQgZGlzc2lwYXRlZCBieSB0aGUgcGVyaWwgd2hpY2ggdGhyZWF0ZW5lZCBJdGFseSBmcm9tIHRoZSB3ZXN0LCBhcyBzb29uIGFzIHRoZSBzdGF0ZSBmZWx0IHRoZSBuZWVkIG9mIGEgZ3JlYXQgZ2VuZXJhbCBhbmQgbG9va2VkIGFib3V0IGZvciBhIGhlbG1zbWFuIHdob20gc2hlIG1pZ2h0IGVtcGxveSB0byBzYXZlIGhlciBmcm9tIHNvIGdyZWF0IGEgZGVsdWdlIG9mIHdhci4gVGhlbiB0aGUgcGVvcGxlIHdvdWxkIGhhdmUgbm90aGluZyB0byBkbyB3aXRoIGFueW9uZSBvZiBoaWdoIGJpcnRoIG9yIG9mIGEgd2VhbHRoeSBob3VzZSB3aG8gb2ZmZXJlZCBoaW1zZWxmIGF0IHRoZSBjb25zdWxhciBlbGVjdGlvbnMsIGJ1dCBwcm9jbGFpbWVkIE1hcml1cyBjb25zdWwgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIHllYXIgMTA0IEIuQy4gPC9ub3RlPiBpbiBzcGl0ZSBvZiBoaXMgYWJzZW5jZSBmcm9tIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBubyBzb29uZXIgaGFkIHdvcmQgYmVlbiBicm91Z2h0IHRvIHRoZSBwZW9wbGUgb2YgdGhlIGNhcHR1cmUgb2YgSnVndXJ0aGEgdGhhbiB0aGUgcmVwb3J0cyBhYm91dCB0aGUgVGV1dG9uZXMgYW5kIENpbWJyaSBmZWxsIHVwb24gdGhlaXIgZWFycy4gV2hhdCB0aGVzZSByZXBvcnRzIHNhaWQgYWJvdXQgdGhlIG51bWJlcnMgYW5kIHN0cmVuZ3RoIG9mIHRoZSBpbnZhZGluZyBob3N0cyB3YXMgZGlzYmVsaWV2ZWQgYXQgZmlyc3QsIGJ1dCBhZnRlcndhcmRzIGl0IHdhcyBmb3VuZCB0byBiZSBzaG9ydCBvZiB0aGUgdHJ1dGguIEZvciB0aHJlZSBodW5kcmVkIHRob3VzYW5kIGFybWVkIGZpZ2h0aW5nIG1lbiB3ZXJlIGFkdmFuY2luZywgYW5kIG11Y2ggbGFyZ2VyIGhvcmRlcyBvZiB3b21lbiBhbmQgY2hpbGRyZW4gd2VyZSBzYWlkIHRvIGFjY29tcGFueSB0aGVtLCBpbiBxdWVzdCBvZiBsYW5kIHRvIHN1cHBvcnQgc28gdmFzdCBhIG11bHRpdHVkZSwgYW5kIG9mIGNpdGllcyBpbiB3aGljaCB0byBzZXR0bGUgYW5kIGxpdmUsIGp1c3QgYXMgdGhlIEdhdWxzIGJlZm9yZSB0aGVtLCBhcyB0aGV5IGxlYXJuZWQsIGhhZCB3cmVzdGVkIHRoZSBiZXN0IHBhcnQgb2YgSXRhbHkgZnJvbSB0aGUgVHlycmhlbmlhbnMgYW5kIG5vdyBvY2N1cGllZCBpdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgdGhlbXNlbHZlcywgaW5kZWVkLCBoYWQgbm90IGhhZCBpbnRlcmNvdXJzZSB3aXRoIG90aGVyIHBlb3BsZXMsIGFuZCBoYWQgdHJhdmVyc2VkIGEgZ3JlYXQgc3RyZXRjaCBvZiBjb3VudHJ5LCBzbyB0aGF0IGl0IGNvdWxkIG5vdCBiZSBhc2NlcnRhaW5lZCB3aGF0IHBlb3BsZSBpdCB3YXMgbm9yIHdoZW5jZSB0aGV5IGhhZCBzZXQgb3V0LCB0aHVzIHRvIGRlc2NlbmQgdXBvbiBHYXVsIGFuZCBJdGFseSBsaWtlIGEgY2xvdWQuIFRoZSBtb3N0IHByZXZhbGVudCBjb25qZWN0dXJlIHdhcyB0aGF0IHRoZXkgd2VyZSBzb21lIG9mIHRoZSBHZXJtYW4gcGVvcGxlcyB3aGljaCBleHRlbmRlZCBhcyBmYXIgYXMgdGhlIG5vcnRoZXJuIG9jZWFuLCBhIGNvbmplY3R1cmUgYmFzZWQgb24gdGhlaXIgZ3JlYXQgc3RhdHVyZSwgdGhlaXIgbGlnaHQtYmx1ZSBleWVzLCBhbmQgdGhlIGZhY3QgdGhhdCB0aGUgR2VybWFucyBjYWxsIHJvYmJlcnMgQ2ltYnJpLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlcmUgYXJlIHNvbWUgd2hvIHNheSB0aGF0IEdhdWwgd2FzIHdpZGUgYW5kIGxhcmdlIGVub3VnaCB0byByZWFjaCBmcm9tIHRoZSBvdXRlciBzZWEgYW5kIHRoZSBzdWJhcmN0aWMgcmVnaW9ucyB0byB0aGUgTWFlb3RpYyBMYWtlIG9uIHRoZSBlYXN0LCB3aGVyZSBpdCBib3JkZXJlZCBvbiBQb250aWMgU2N5dGhpYSwgYW5kIHRoYXQgZnJvbSB0aGF0IHBvaW50IG9uIEdhdWxzIGFuZCBTY3l0aGlhbnMgd2VyZSBtaW5nbGVkLiBUaGVzZSBtaXhlZCBHYXVscyBhbmQgU2N5dGhpYW5zIGhhZCBsZWZ0IHRoZWlyIGhvbWVzIGFuZCBtb3ZlZCB3ZXN0d2FyZCwgbm90IGluIGEgc2luZ2xlIG1hcmNoLCBub3IgZXZlbiBjb250aW51b3VzbHksIGJ1dCB3aXRoIGVhY2ggcmVjdXJyaW5nIHNwcmluZyB0aGV5IGhhZCBnb25lIGZvcndhcmQsIGZpZ2h0aW5nIHRoZWlyIHdheSwgYW5kIGluIHRoZSBjb3Vyc2Ugb2YgdGltZSBoYWQgY3Jvc3NlZCB0aGUgY29udGluZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUsIHdoaWxlIHRoZXkgaGFkIG1hbnkgbmFtZXMgZm9yIGRpZmZlcmVudCBkZXRhY2htZW50cywgdGhleSBjYWxsZWQgdGhlaXIgd2hvbGUgYXJteSBieSB0aGUgZ2VuZXJhbCBuYW1lIG9mIEdhbGxvc2N5dGhpYW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVyZSBhcmUgc29tZSB3aG8gc2F5IHRoYXQgR2F1bCB3YXMgd2lkZSBhbmQgbGFyZ2UgZW5vdWdoIHRvIHJlYWNoIGZyb20gdGhlIG91dGVyIHNlYSBhbmQgdGhlIHN1YmFyY3RpYyByZWdpb25zIHRvIHRoZSBNYWVvdGljIExha2Ugb24gdGhlIGVhc3QsIHdoZXJlIGl0IGJvcmRlcmVkIG9uIFBvbnRpYyBTY3l0aGlhLCBhbmQgdGhhdCBmcm9tIHRoYXQgcG9pbnQgb24gR2F1bHMgYW5kIFNjeXRoaWFucyB3ZXJlIG1pbmdsZWQuIFRoZXNlIG1peGVkIEdhdWxzIGFuZCBTY3l0aGlhbnMgaGFkIGxlZnQgdGhlaXIgaG9tZXMgYW5kIG1vdmVkIHdlc3R3YXJkLCBub3QgaW4gYSBzaW5nbGUgbWFyY2gsIG5vciBldmVuIGNvbnRpbnVvdXNseSwgYnV0IHdpdGggZWFjaCByZWN1cnJpbmcgc3ByaW5nIHRoZXkgaGFkIGdvbmUgZm9yd2FyZCwgZmlnaHRpbmcgdGhlaXIgd2F5LCBhbmQgaW4gdGhlIGNvdXJzZSBvZiB0aW1lIGhhZCBjcm9zc2VkIHRoZSBjb250aW5lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSwgd2hpbGUgdGhleSBoYWQgbWFueSBuYW1lcyBmb3IgZGlmZmVyZW50IGRldGFjaG1lbnRzLCB0aGV5IGNhbGxlZCB0aGVpciB3aG9sZSBhcm15IGJ5IHRoZSBnZW5lcmFsIG5hbWUgb2YgR2FsbG9zY3l0aGlhbnMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T3RoZXJzLCBob3dldmVyLCBzYXkgdGhhdCB0aGUgQ2ltbWVyaWFucyB3aG8gd2VyZSBmaXJzdCBrbm93biB0byB0aGUgYW5jaWVudCBHcmVla3Mgd2VyZSBub3QgYSBsYXJnZSBwYXJ0IG9mIHRoZSBlbnRpcmUgcGVvcGxlLCBidXQgbWVyZWx5IGEgYm9keSBvZiBleGlsZXMgb3IgYSBmYWN0aW9uIHdoaWNoIHdhcyBkcml2ZW4gYXdheSBieSB0aGUgU2N5dGhpYW5zIGFuZCBwYXNzZWQgZnJvbSB0aGUgTWFlb3RpYyBMYWtlIGludG8gQXNpYSB1bmRlciB0aGUgbGVhZCBvZiBMeWdkYW1pczsgd2hlcmVhcyB0aGUgbGFyZ2VzdCBhbmQgbW9zdCB3YXJsaWtlIHBhcnQgb2YgdGhlIHBlb3BsZSBkd2VsdCBhdCB0aGUgY29uZmluZXMgb2YgdGhlIGVhcnRoIGFsb25nIHRoZSBvdXRlciBzZWEsIG9jY3VweWluZyBhIGxhbmQgdGhhdCBpcyBzaGFkZWQsIHdvb2RlZCwgYW5kIHdob2xseSBzdW5sZXNzIGJ5IHJlYXNvbiBvZiB0aGUgaGVpZ2h0IGFuZCB0aGlja25lc3Mgb2YgdGhlIHRyZWVzLCB3aGljaCByZWFjaCBpbmxhbmQgYXMgZmFyIGFzIHRoZSBIZXJjeW5paTsgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYXMgcmVnYXJkcyB0aGUgaGVhdmVucywgdGhleSBhcmUgdW5kZXIgdGhhdCBwb3J0aW9uIG9mIHRoZW0gd2hlcmUgdGhlIHBvbGUgZ2V0cyBhIGdyZWF0IGVsZXZhdGlvbiBieSByZWFzb24gb2YgdGhlIGRlY2xpbmF0aW9uIG9mIHRoZSBwYXJhbGxlbHMsIGFuZCBhcHBlYXJzIHRvIGhhdmUgYSBwb3NpdGlvbiBub3QgZmFyIHJlbW92ZWQgZnJvbSB0aGUgc3BlY3RhdG9yJ3MgemVuaXRoLCBhbmQgYSBkYXkgYW5kIGEgbmlnaHQgZGl2aWRlIHRoZSB5ZWFyIGludG8gdHdvIGVxdWFsIHBhcnRzOyB3aGljaCB3YXMgb2YgYWR2YW50YWdlIHRvIEhvbWVyIGluIGhpcyBzdG9yeSBvZiBPZHlzc2V1cyBjb25zdWx0aW5nIHRoZSBzaGFkZXMgb2YgdGhlIGRlYWQuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPiAKICAgICAgICAgICAgICAgPHRpdGxlPk9keXNzZXkgPC90aXRsZT4sIEJvb2sgWEkuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxMS4xMCIgdmFsaWQ9InllcyI+U2VlIHZ2LiAxNCBmZi4gPC9iaWJsPiwgZGVzY3JpYmluZyB0aGUgQ2ltbWVyaWFucy4gPC9ub3RlPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlc2UgcmVnaW9ucywgdGhlbiwgdGhlc2UgQmFyYmFyaWFucyBzYWxsaWVkIGZvcnRoIGFnYWluc3QgSXRhbHksIGJlaW5nIGNhbGxlZCBhdCBmaXJzdCBDaW1tZXJpYW5zLCBhbmQgdGhlbiwgbm90IGluYXBwcm9wcmlhdGVseSwgQ2ltYnJpLiBCdXQgYWxsIHRoaXMgaXMgYmFzZWQgb24gY29uamVjdHVyZSByYXRoZXIgdGhhbiBvbiBzdXJlIGhpc3RvcmljYWwgZXZpZGVuY2UuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhcyByZWdhcmRzIHRoZSBoZWF2ZW5zLCB0aGV5IGFyZSB1bmRlciB0aGF0IHBvcnRpb24gb2YgdGhlbSB3aGVyZSB0aGUgcG9sZSBnZXRzIGEgZ3JlYXQgZWxldmF0aW9uIGJ5IHJlYXNvbiBvZiB0aGUgZGVjbGluYXRpb24gb2YgdGhlIHBhcmFsbGVscywgYW5kIGFwcGVhcnMgdG8gaGF2ZSBhIHBvc2l0aW9uIG5vdCBmYXIgcmVtb3ZlZCBmcm9tIHRoZSBzcGVjdGF0b3IncyB6ZW5pdGgsIGFuZCBhIGRheSBhbmQgYSBuaWdodCBkaXZpZGUgdGhlIHllYXIgaW50byB0d28gZXF1YWwgcGFydHM7IHdoaWNoIHdhcyBvZiBhZHZhbnRhZ2UgdG8gSG9tZXIgaW4gaGlzIHN0b3J5IG9mIE9keXNzZXVzIGNvbnN1bHRpbmcgdGhlIHNoYWRlcyBvZiB0aGUgZGVhZC4gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4gCiAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXkgPC90aXRsZT4sIEJvb2sgWEkuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDExLjEwIiB2YWxpZD0ieWVzIj5TZWUgdnYuIDE0IGZmLiA8L2JpYmw+LCBkZXNjcmliaW5nIHRoZSBDaW1tZXJpYW5zLiA8L25vdGU+IAoJCQkJICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5PZHlzc2V5IDwvdGl0bGU+LCBCb29rIFhJLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxMS4xMCIgdmFsaWQ9InllcyI+U2VlIHZ2LiAxNCBmZi4gPC9iaWJsPiwgZGVzY3JpYmluZyB0aGUgQ2ltbWVyaWFucy4gPC90cmFuc2xhdGlvbj4="
translation['11.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkZyb20gdGhlc2UgcmVnaW9ucywgdGhlbiwgdGhlc2UgQmFyYmFyaWFucyBzYWxsaWVkIGZvcnRoIGFnYWluc3QgSXRhbHksIGJlaW5nIGNhbGxlZCBhdCBmaXJzdCBDaW1tZXJpYW5zLCBhbmQgdGhlbiwgbm90IGluYXBwcm9wcmlhdGVseSwgQ2ltYnJpLiBCdXQgYWxsIHRoaXMgaXMgYmFzZWQgb24gY29uamVjdHVyZSByYXRoZXIgdGhhbiBvbiBzdXJlIGhpc3RvcmljYWwgZXZpZGVuY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIG51bWJlcnMsIGhvd2V2ZXIsIGFyZSBnaXZlbiBieSBtYW55IHdyaXRlcnMgYXMgbm90IGxlc3MsIGJ1dCBtb3JlLCB0aGFuIHRoZSBmaWd1cmUgbWVudGlvbmVkIGFib3ZlLiBNb3Jlb3ZlciwgdGhlaXIgY291cmFnZSBhbmQgZGFyaW5nIG1hZGUgdGhlbSBpcnJlc2lzdGlibGUsIGFuZCB3aGVuIHRoZXkgZW5nYWdlZCBpbiBiYXR0bGUgdGhleSBjYW1lIG9uIHdpdGggdGhlIHN3aWZ0bmVzcyBhbmQgZm9yY2Ugb2YgZmlyZSwgc28gdGhhdCBubyBvbmUgY291bGQgd2l0aHN0YW5kIHRoZWlyIG9uc2V0LCBidXQgYWxsIHdobyBjYW1lIGluIHRoZWlyIHdheSBiZWNhbWUgdGhlaXIgcHJleSBhbmQgYm9vdHksIGFuZCBldmVuIG1hbnkgbGFyZ2UgUm9tYW4gYXJtaWVzLCB3aXRoIHRoZWlyIGNvbW1hbmRlcnMsIHdobyBoYWQgYmVlbiBzdGF0aW9uZWQgdG8gcHJvdGVjdCBUcmFuc2FscGluZSBHYXVsLCB3ZXJlIGRlc3Ryb3llZCBpbmdsb3Jpb3VzbHk7IAoJCQkJPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmluZGVlZCwgYnkgdGhlaXIgZmVlYmxlIHJlc2lzdGFuY2UgdGhleSB3ZXJlIG1haW5seSBpbnN0cnVtZW50YWwgaW4gZHJhd2luZyB0aGUgb24tcnVzaGluZyBCYXJiYXJpYW5zIGRvd24gdXBvbiBSb21lLiBGb3Igd2hlbiB0aGUgaW52YWRlcnMgaGFkIGNvbnF1ZXJlZCB0aG9zZSB3aG8gb3Bwb3NlZCB0aGVtLCBhbmQgaGFkIGdvdCBhYnVuZGFuY2Ugb2YgYm9vdHksIHRoZXkgZGV0ZXJtaW5lZCBub3QgdG8gc2V0dGxlIHRoZW1zZWx2ZXMgYW55d2hlcmUgdW50aWwgdGhleSBoYWQgZGVzdHJveWVkIFJvbWUgYW5kIHJhdmFnZWQgSXRhbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPlRoZWlyIG51bWJlcnMsIGhvd2V2ZXIsIGFyZSBnaXZlbiBieSBtYW55IHdyaXRlcnMgYXMgbm90IGxlc3MsIGJ1dCBtb3JlLCB0aGFuIHRoZSBmaWd1cmUgbWVudGlvbmVkIGFib3ZlLiBNb3Jlb3ZlciwgdGhlaXIgY291cmFnZSBhbmQgZGFyaW5nIG1hZGUgdGhlbSBpcnJlc2lzdGlibGUsIGFuZCB3aGVuIHRoZXkgZW5nYWdlZCBpbiBiYXR0bGUgdGhleSBjYW1lIG9uIHdpdGggdGhlIHN3aWZ0bmVzcyBhbmQgZm9yY2Ugb2YgZmlyZSwgc28gdGhhdCBubyBvbmUgY291bGQgd2l0aHN0YW5kIHRoZWlyIG9uc2V0LCBidXQgYWxsIHdobyBjYW1lIGluIHRoZWlyIHdheSBiZWNhbWUgdGhlaXIgcHJleSBhbmQgYm9vdHksIGFuZCBldmVuIG1hbnkgbGFyZ2UgUm9tYW4gYXJtaWVzLCB3aXRoIHRoZWlyIGNvbW1hbmRlcnMsIHdobyBoYWQgYmVlbiBzdGF0aW9uZWQgdG8gcHJvdGVjdCBUcmFuc2FscGluZSBHYXVsLCB3ZXJlIGRlc3Ryb3llZCBpbmdsb3Jpb3VzbHk7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPmluZGVlZCwgYnkgdGhlaXIgZmVlYmxlIHJlc2lzdGFuY2UgdGhleSB3ZXJlIG1haW5seSBpbnN0cnVtZW50YWwgaW4gZHJhd2luZyB0aGUgb24tcnVzaGluZyBCYXJiYXJpYW5zIGRvd24gdXBvbiBSb21lLiBGb3Igd2hlbiB0aGUgaW52YWRlcnMgaGFkIGNvbnF1ZXJlZCB0aG9zZSB3aG8gb3Bwb3NlZCB0aGVtLCBhbmQgaGFkIGdvdCBhYnVuZGFuY2Ugb2YgYm9vdHksIHRoZXkgZGV0ZXJtaW5lZCBub3QgdG8gc2V0dGxlIHRoZW1zZWx2ZXMgYW55d2hlcmUgdW50aWwgdGhleSBoYWQgZGVzdHJveWVkIFJvbWUgYW5kIHJhdmFnZWQgSXRhbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkxlYXJuaW5nIG9mIHRoZXNlIHRoaW5ncyBmcm9tIG1hbnkgcXVhcnRlcnMsIHRoZSBSb21hbnMgc3VtbW9uZWQgTWFyaXVzIHRvIHRoZSBjb21tYW5kLiBBbmQgaGUgd2FzIGFwcG9pbnRlZCBjb25zdWwgZm9yIHRoZSBzZWNvbmQgdGltZSwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+IAogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMS4xIiB2YWxpZD0ieWVzIj5TZWUgY2hhcHRlciB4aS4gMS4gPC9iaWJsPiBNYXJpdXMgd2FzIHN0aWxsIGluIEFmcmljYS4gPC9ub3RlPiBhbHRob3VnaCB0aGUgbGF3IGZvcmJhZGUgdGhhdCBhIG1hbiBpbiBoaXMgYWJzZW5jZSBhbmQgYmVmb3JlIHRoZSBsYXBzZSBvZiBhIHNwZWNpZmllZCB0aW1lIHNob3VsZCBiZSBlbGVjdGVkIGFnYWluOyBzdGlsbCwgdGhlIHBlb3BsZSB3b3VsZCBub3QgbGlzdGVuIHRvIHRob3NlIHdobyBvcHBvc2VkIHRoZSBlbGVjdGlvbi4gRm9yIHRoZXkgY29uc2lkZXJlZCB0aGF0IHRoaXMgd291bGQgbm90IGJlIHRoZSBmaXJzdCB0aW1lIHRoYXQgdGhlIGxhdyBoYWQgZ2l2ZW4gd2F5IGJlZm9yZSB0aGUgZGVtYW5kcyBvZiB0aGUgZ2VuZXJhbCBnb29kLCBhbmQgdGhhdCB0aGUgcHJlc2VudCBvY2Nhc2lvbiBkZW1hbmRlZCBpdCBubyBsZXNzIGltcGVyYXRpdmVseSB0aGFuIHdoZW4gdGhleSBoYWQgbWFkZSBTY2lwaW8gY29uc3VsIGNvbnRyYXJ5IHRvIHRoZSBsYXdzLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxNDcgQi5DLiwgd2hlbiBTY2lwaW8gaGFkIG5vdCByZWFjaGVkIHRoZSBhZ2UgcmVxdWlyZWQgYnkgbGF3LiA8L25vdGU+IGFsdGhvdWdoIGF0IHRoYXQgdGltZSB0aGV5IHdlcmUgbm90IGZlYXJmdWwgb2YgbG9zaW5nIHRoZWlyIG93biBjaXR5LCBidXQgZGVzaXJvdXMgb2YgZGVzdHJveWluZyB0aGF0IG9mIHRoZSBDYXJ0aGFnaW5pYW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGNvdXJzZSB3YXMgYWRvcHRlZCwgTWFyaXVzIGNhbWUgYWNyb3NzIHRoZSBzZWEgZnJvbSBBZnJpY2Egd2l0aCBoaXMgYXJteSwgYW5kIG9uIHRoZSB2ZXJ5IENhbGVuZHMgb2YgSmFudWFyeSwgd2hpY2ggd2l0aCB0aGUgUm9tYW5zIGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHllYXIsIGFzc3VtZWQgdGhlIGNvbnN1bHNoaXAgYW5kIGNlbGVicmF0ZWQgaGlzIHRyaXVtcGgsIGV4aGliaXRpbmcgdG8gdGhlIFJvbWFucyBKdWd1cnRoYSBpbiBjaGFpbnMuIFRoaXMgd2FzIGEgc2lnaHQgd2hpY2ggdGhleSBoYWQgZGVzcGFpcmVkIG9mIGJlaG9sZGluZywgbm9yIGNvdWxkIGFueSBvbmUgaGF2ZSBleHBlY3RlZCwgd2hpbGUgSnVndXJ0aGEgd2FzIGFsaXZlLCB0byBjb25xdWVyIHRoZSBlbmVteTsgc28gdmVyc2F0aWxlIHdhcyBoZSBpbiBhZGFwdGluZyBoaW1zZWxmIHRvIHRoZSB0dXJucyBvZiBmb3J0dW5lLCBhbmQgc28gZ3JlYXQgY3JhZnQgZGlkIGhlIGNvbWJpbmUgd2l0aCBoaXMgY291cmFnZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdlIGFyZSB0b2xkIHRoYXQgd2hlbiBoZSBoYWQgYmVlbiBsZWQgaW4gdHJpdW1waCBoZSBsb3N0IGhpcyByZWFzb247IGFuZCB0aGF0IHdoZW4sIGFmdGVyIHRoZSB0cml1bXBoLCBoZSB3YXMgY2FzdCBpbnRvIHByaXNvbiwgd2hlcmUgc29tZSB0b3JlIGhpcyB0dW5pYyBmcm9tIGhpcyBib2R5LCBhbmQgb3RoZXJzIHdlcmUgc28gZWFnZXIgdG8gc25hdGNoIGF3YXkgaGlzIGdvbGRlbiBlYXJyaW5nIHRoYXQgdGhleSB0b3JlIG9mZiB3aXRoIGl0IHRoZSBsb2JlIG9mIGhpcyBlYXIsIGFuZCB3aGVuIGhlIGhhZCBiZWVuIHRocnVzdCBkb3duIG5ha2VkIGludG8gdGhlIGR1bmdlb24gcGl0LCBpbiB1dHRlciBiZXdpbGRlcm1lbnQgYW5kIHdpdGggYSBncmluIG9uIGhpcyBsaXBzIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGVyY3VsZXMhIEhvdyBjb2xkIHRoaXMgUm9tYW4gYmF0aCBpcyE8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSB3cmV0Y2gsIGFmdGVyIHN0cnVnZ2xpbmcgd2l0aCBodW5nZXIgZm9yIHNpeCBkYXlzIGFuZCB1cCB0byB0aGUgbGFzdCBtb21lbnQgY2xpbmdpbmcgdG8gdGhlIGRlc2lyZSBvZiBsaWZlLCBwYWlkIHRoZSBwZW5hbHR5IHdoaWNoIGhpcyBjcmltZXMgZGVzZXJ2ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TGVhcm5pbmcgb2YgdGhlc2UgdGhpbmdzIGZyb20gbWFueSBxdWFydGVycywgdGhlIFJvbWFucyBzdW1tb25lZCBNYXJpdXMgdG8gdGhlIGNvbW1hbmQuIEFuZCBoZSB3YXMgYXBwb2ludGVkIGNvbnN1bCBmb3IgdGhlIHNlY29uZCB0aW1lLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPiAKICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMS4xIiB2YWxpZD0ieWVzIj5TZWUgY2hhcHRlciB4aS4gMS4gPC9iaWJsPiBNYXJpdXMgd2FzIHN0aWxsIGluIEFmcmljYS4gPC9ub3RlPiBhbHRob3VnaCB0aGUgbGF3IGZvcmJhZGUgdGhhdCBhIG1hbiBpbiBoaXMgYWJzZW5jZSBhbmQgYmVmb3JlIHRoZSBsYXBzZSBvZiBhIHNwZWNpZmllZCB0aW1lIHNob3VsZCBiZSBlbGVjdGVkIGFnYWluOyBzdGlsbCwgdGhlIHBlb3BsZSB3b3VsZCBub3QgbGlzdGVuIHRvIHRob3NlIHdobyBvcHBvc2VkIHRoZSBlbGVjdGlvbi4gRm9yIHRoZXkgY29uc2lkZXJlZCB0aGF0IHRoaXMgd291bGQgbm90IGJlIHRoZSBmaXJzdCB0aW1lIHRoYXQgdGhlIGxhdyBoYWQgZ2l2ZW4gd2F5IGJlZm9yZSB0aGUgZGVtYW5kcyBvZiB0aGUgZ2VuZXJhbCBnb29kLCBhbmQgdGhhdCB0aGUgcHJlc2VudCBvY2Nhc2lvbiBkZW1hbmRlZCBpdCBubyBsZXNzIGltcGVyYXRpdmVseSB0aGFuIHdoZW4gdGhleSBoYWQgbWFkZSBTY2lwaW8gY29uc3VsIGNvbnRyYXJ5IHRvIHRoZSBsYXdzLCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDExLjEiIHZhbGlkPSJ5ZXMiPlNlZSBjaGFwdGVyIHhpLiAxLiA8L2JpYmw+IE1hcml1cyB3YXMgc3RpbGwgaW4gQWZyaWNhLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE0NyBCLkMuLCB3aGVuIFNjaXBpbyBoYWQgbm90IHJlYWNoZWQgdGhlIGFnZSByZXF1aXJlZCBieSBsYXcuIDwvbm90ZT4gYWx0aG91Z2ggYXQgdGhhdCB0aW1lIHRoZXkgd2VyZSBub3QgZmVhcmZ1bCBvZiBsb3NpbmcgdGhlaXIgb3duIGNpdHksIGJ1dCBkZXNpcm91cyBvZiBkZXN0cm95aW5nIHRoYXQgb2YgdGhlIENhcnRoYWdpbmlhbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgY291cnNlIHdhcyBhZG9wdGVkLCBNYXJpdXMgY2FtZSBhY3Jvc3MgdGhlIHNlYSBmcm9tIEFmcmljYSB3aXRoIGhpcyBhcm15LCBhbmQgb24gdGhlIHZlcnkgQ2FsZW5kcyBvZiBKYW51YXJ5LCB3aGljaCB3aXRoIHRoZSBSb21hbnMgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgeWVhciwgYXNzdW1lZCB0aGUgY29uc3Vsc2hpcCBhbmQgY2VsZWJyYXRlZCBoaXMgdHJpdW1waCwgZXhoaWJpdGluZyB0byB0aGUgUm9tYW5zIEp1Z3VydGhhIGluIGNoYWlucy4gVGhpcyB3YXMgYSBzaWdodCB3aGljaCB0aGV5IGhhZCBkZXNwYWlyZWQgb2YgYmVob2xkaW5nLCBub3IgY291bGQgYW55IG9uZSBoYXZlIGV4cGVjdGVkLCB3aGlsZSBKdWd1cnRoYSB3YXMgYWxpdmUsIHRvIGNvbnF1ZXIgdGhlIGVuZW15OyBzbyB2ZXJzYXRpbGUgd2FzIGhlIGluIGFkYXB0aW5nIGhpbXNlbGYgdG8gdGhlIHR1cm5zIG9mIGZvcnR1bmUsIGFuZCBzbyBncmVhdCBjcmFmdCBkaWQgaGUgY29tYmluZSB3aXRoIGhpcyBjb3VyYWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gaGUgaGFkIGJlZW4gbGVkIGluIHRyaXVtcGggaGUgbG9zdCBoaXMgcmVhc29uOyBhbmQgdGhhdCB3aGVuLCBhZnRlciB0aGUgdHJpdW1waCwgaGUgd2FzIGNhc3QgaW50byBwcmlzb24sIHdoZXJlIHNvbWUgdG9yZSBoaXMgdHVuaWMgZnJvbSBoaXMgYm9keSwgYW5kIG90aGVycyB3ZXJlIHNvIGVhZ2VyIHRvIHNuYXRjaCBhd2F5IGhpcyBnb2xkZW4gZWFycmluZyB0aGF0IHRoZXkgdG9yZSBvZmYgd2l0aCBpdCB0aGUgbG9iZSBvZiBoaXMgZWFyLCBhbmQgd2hlbiBoZSBoYWQgYmVlbiB0aHJ1c3QgZG93biBuYWtlZCBpbnRvIHRoZSBkdW5nZW9uIHBpdCwgaW4gdXR0ZXIgYmV3aWxkZXJtZW50IGFuZCB3aXRoIGEgZ3JpbiBvbiBoaXMgbGlwcyBoZSBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGVyY3VsZXMhIEhvdyBjb2xkIHRoaXMgUm9tYW4gYmF0aCBpcyE8L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgd3JldGNoLCBhZnRlciBzdHJ1Z2dsaW5nIHdpdGggaHVuZ2VyIGZvciBzaXggZGF5cyBhbmQgdXAgdG8gdGhlIGxhc3QgbW9tZW50IGNsaW5naW5nIHRvIHRoZSBkZXNpcmUgb2YgbGlmZSwgcGFpZCB0aGUgcGVuYWx0eSB3aGljaCBoaXMgY3JpbWVzIGRlc2VydmVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkluIHRoZSB0cml1bXBoYWwgcHJvY2Vzc2lvbiB0aGVyZSB3ZXJlIGNhcnJpZWQsIHdlIGFyZSB0b2xkLCB0aHJlZSB0aG91c2FuZCBhbmQgc2V2ZW4gcG91bmRzIG9mIGdvbGQsIG9mIHVuY29pbmVkIHNpbHZlciBmaXZlIHRob3VzYW5kIHNldmVuIGh1bmRyZWQgYW5kIHNldmVudHktZml2ZSwgYW5kIGluIGNvaW5lZCBtb25leSB0d28gaHVuZHJlZCBhbmQgZWlnaHR5LXNldmVuIHRob3VzYW5kIGRyYWNobWFzLgoJCQk8L3A+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBwcm9jZXNzaW9uIHdhcyBvdmVyLCBNYXJpdXMgY2FsbGVkIHRoZSBzZW5hdGUgaW50byBzZXNzaW9uIG9uIHRoZSBDYXBpdG9sLCBhbmQgbWFkZSBoaXMgZW50cnksIGVpdGhlciB0aHJvdWdoIGluYWR2ZXJ0ZW5jZSBvciB3aXRoIGEgdnVsZ2FyIGRpc3BsYXkgb2YgaGlzIGdvb2QgZm9ydHVuZSwgaW4gaGlzIHRyaXVtcGhhbCByb2JlczsgYnV0IHBlcmNlaXZpbmcgcXVpY2tseSB0aGF0IHRoZSBzZW5hdG9ycyB3ZXJlIG9mZmVuZGVkIGF0IHRoaXMsIGhlIHJvc2UgYW5kIHdlbnQgb3V0LCBjaGFuZ2VkIHRvIHRoZSB1c3VhbCByb2JlIHdpdGggcHVycGxlIGJvcmRlciwgYW5kIHRoZW4gY2FtZSBiYWNrLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBwcm9jZXNzaW9uIHdhcyBvdmVyLCBNYXJpdXMgY2FsbGVkIHRoZSBzZW5hdGUgaW50byBzZXNzaW9uIG9uIHRoZSBDYXBpdG9sLCBhbmQgbWFkZSBoaXMgZW50cnksIGVpdGhlciB0aHJvdWdoIGluYWR2ZXJ0ZW5jZSBvciB3aXRoIGEgdnVsZ2FyIGRpc3BsYXkgb2YgaGlzIGdvb2QgZm9ydHVuZSwgaW4gaGlzIHRyaXVtcGhhbCByb2JlczsgYnV0IHBlcmNlaXZpbmcgcXVpY2tseSB0aGF0IHRoZSBzZW5hdG9ycyB3ZXJlIG9mZmVuZGVkIGF0IHRoaXMsIGhlIHJvc2UgYW5kIHdlbnQgb3V0LCBjaGFuZ2VkIHRvIHRoZSB1c3VhbCByb2JlIHdpdGggcHVycGxlIGJvcmRlciwgYW5kIHRoZW4gY2FtZSBiYWNrLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TZXR0aW5nIG91dCBvbiB0aGUgZXhwZWRpdGlvbiwgaGUgbGFib3VyZWQgdG8gcGVyZmVjdCBoaXMgYXJteSBhcyBpdCB3ZW50IGFsb25nLCBwcmFjdGlzaW5nIHRoZSBtZW4gaW4gYWxsIGtpbmRzIG9mIHJ1bm5pbmcgYW5kIGluIGxvbmcgbWFyY2hlcywgYW5kIGNvbXBlbGxpbmcgdGhlbSB0byBjYXJyeSB0aGVpciBvd24gYmFnZ2FnZSBhbmQgdG8gcHJlcGFyZSB0aGVpciBvd24gZm9vZC4gSGVuY2UsIGluIGFmdGVyIHRpbWVzLCBtZW4gd2hvIHdlcmUgZm9uZCBvZiB0b2lsIGFuZCBkaWQgd2hhdGV2ZXIgd2FzIGVuam9pbmVkIHVwb24gdGhlbSBjb250ZW50ZWRseSBhbmQgd2l0aG91dCBhIG11cm11ciwgd2VyZSBjYWxsZWQgTWFyaWFuIG11bGVzLiBTb21lLCBob3dldmVyLCB0aGluayB0aGF0IHRoaXMgbmFtZSBoYWQgYSBkaWZmZXJlbnQgb3JpZ2luLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5OYW1lbHksIHdoZW4gU2NpcGlvIHdhcyBiZXNpZWdpbmcgTnVtYW50aWEsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAzLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAyIDwvYmlibD4uIDwvbm90ZT4gaGUgd2lzaGVkIHRvIGluc3BlY3Qgbm90IG9ubHkgdGhlIGFybXMgYW5kIHRoZSBob3JzZXMsIGJ1dCBhbHNvIHRoZSBtdWxlcyBhbmQgdGhlIHdhZ2dvbnMsIHRoYXQgZXZlcnkgbWFuIG1pZ2h0IGhhdmUgdGhlbSBpbiByZWFkaW5lc3MgYW5kIGdvb2Qgb3JkZXIuIE1hcml1cywgYWNjb3JkaW5nbHksIGJyb3VnaHQgb3V0IGZvciBpbnNwZWN0aW9uIGJvdGggYSBob3JzZSB0aGF0IGhhZCBiZWVuIG1vc3QgZXhjZWxsZW50bHkgdGFrZW4gY2FyZSBvZiBieSBoaW0sIGFuZCBhIG11bGUgdGhhdCBmb3IgaGVhbHRoLCBkb2NpbGl0eSwgYW5kIHN0cmVuZ3RoIGZhciBzdXJwYXNzZWQgYWxsIHRoZSByZXN0LiBUaGUgY29tbWFuZGluZyBvZmZpY2VyIHdhcyBuYXR1cmFsbHkgd2VsbCBwbGVhc2VkIHdpdGggdGhlIGJlYXN0cyBvZiBNYXJpdXMgYW5kIG9mdGVuIHNwb2tlIGFib3V0IHRoZW0sIHNvIHRoYXQgaW4gdGltZSB0aG9zZSB3aG8gd2FudGVkIHRvIGJlc3RvdyBmYWNldGlvdXMgcHJhaXNlIG9uIGEgcGVyc2V2ZXJpbmcsIHBhdGllbnQsIGxhYm9yaW91cyBtYW4gd291bGQgY2FsbCBoaW0gYSBNYXJpYW4gbXVsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U2V0dGluZyBvdXQgb24gdGhlIGV4cGVkaXRpb24sIGhlIGxhYm91cmVkIHRvIHBlcmZlY3QgaGlzIGFybXkgYXMgaXQgd2VudCBhbG9uZywgcHJhY3Rpc2luZyB0aGUgbWVuIGluIGFsbCBraW5kcyBvZiBydW5uaW5nIGFuZCBpbiBsb25nIG1hcmNoZXMsIGFuZCBjb21wZWxsaW5nIHRoZW0gdG8gY2FycnkgdGhlaXIgb3duIGJhZ2dhZ2UgYW5kIHRvIHByZXBhcmUgdGhlaXIgb3duIGZvb2QuIEhlbmNlLCBpbiBhZnRlciB0aW1lcywgbWVuIHdobyB3ZXJlIGZvbmQgb2YgdG9pbCBhbmQgZGlkIHdoYXRldmVyIHdhcyBlbmpvaW5lZCB1cG9uIHRoZW0gY29udGVudGVkbHkgYW5kIHdpdGhvdXQgYSBtdXJtdXIsIHdlcmUgY2FsbGVkIE1hcmlhbiBtdWxlcy4gU29tZSwgaG93ZXZlciwgdGhpbmsgdGhhdCB0aGlzIG5hbWUgaGFkIGEgZGlmZmVyZW50IG9yaWdpbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5hbWVseSwgd2hlbiBTY2lwaW8gd2FzIGJlc2llZ2luZyBOdW1hbnRpYSwgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAzLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAyIDwvYmlibD4uIDwvbm90ZT4gaGUgd2lzaGVkIHRvIGluc3BlY3Qgbm90IG9ubHkgdGhlIGFybXMgYW5kIHRoZSBob3JzZXMsIGJ1dCBhbHNvIHRoZSBtdWxlcyBhbmQgdGhlIHdhZ2dvbnMsIHRoYXQgZXZlcnkgbWFuIG1pZ2h0IGhhdmUgdGhlbSBpbiByZWFkaW5lc3MgYW5kIGdvb2Qgb3JkZXIuIE1hcml1cywgYWNjb3JkaW5nbHksIGJyb3VnaHQgb3V0IGZvciBpbnNwZWN0aW9uIGJvdGggYSBob3JzZSB0aGF0IGhhZCBiZWVuIG1vc3QgZXhjZWxsZW50bHkgdGFrZW4gY2FyZSBvZiBieSBoaW0sIGFuZCBhIG11bGUgdGhhdCBmb3IgaGVhbHRoLCBkb2NpbGl0eSwgYW5kIHN0cmVuZ3RoIGZhciBzdXJwYXNzZWQgYWxsIHRoZSByZXN0LiBUaGUgY29tbWFuZGluZyBvZmZpY2VyIHdhcyBuYXR1cmFsbHkgd2VsbCBwbGVhc2VkIHdpdGggdGhlIGJlYXN0cyBvZiBNYXJpdXMgYW5kIG9mdGVuIHNwb2tlIGFib3V0IHRoZW0sIHNvIHRoYXQgaW4gdGltZSB0aG9zZSB3aG8gd2FudGVkIHRvIGJlc3RvdyBmYWNldGlvdXMgcHJhaXNlIG9uIGEgcGVyc2V2ZXJpbmcsIHBhdGllbnQsIGxhYm9yaW91cyBtYW4gd291bGQgY2FsbCBoaW0gYSBNYXJpYW4gbXVsZS4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAzLjIiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgaWlpLiAyIDwvYmlibD4uIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGFzIGl0IHdvdWxkIHNlZW0sIGEgZ3JlYXQgcGllY2Ugb2YgZ29vZCBmb3J0dW5lIGJlZmVsbCBNYXJpdXMuIEZvciB0aGUgQmFyYmFyaWFucyBoYWQgYSByZWZsdXgsIGFzIGl0IHdlcmUsIGluIHRoZWlyIGNvdXJzZSwgYW5kIHN0cmVhbWVkIGZpcnN0IGludG8gU3BhaW4uIFRoaXMgZ2F2ZSBNYXJpdXMgdGltZSB0byBleGVyY2lzZSB0aGUgYm9kaWVzIG9mIGhpcyBtZW4sIHRvIHJhaXNlIHRoZWlyIHNwaXJpdHMgdG8gYSBzdHVyZGllciBjb3VyYWdlLCBhbmQsIHdoYXQgd2FzIG1vc3QgaW1wb3J0YW50IG9mIGFsbCwgdG8gbGV0IHRoZW0gZmluZCBvdXQgd2hhdCBzb3J0IG9mIGEgbWFuIGhlIHdhcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhpcyBzdGVybm5lc3MgaW4gdGhlIGV4ZXJjaXNlIG9mIGF1dGhvcml0eSBhbmQgaGlzIGluZmxleGliaWxpdHkgaW4gdGhlIGluZmxpY3Rpb24gb2YgcHVuaXNobWVudCBhcHBlYXJlZCB0byB0aGVtLCB3aGVuIHRoZXkgYmVjYW1lIGFjY3VzdG9tZWQgdG8gb2JlZGllbmNlIGFuZCBnb29kIGJlaGF2aW91ciwgc2FsdXRhcnkgYXMgd2VsbCBhcyBqdXN0LCBhbmQgdGhleSByZWdhcmRlZCB0aGUgZmllcmNlbmVzcyBvZiBoaXMgdGVtcGVyLCB0aGUgaGFyc2huZXNzIG9mIGhpcyB2b2ljZSwgYW5kIHRoYXQgZmVyb2NpdHkgb2YgaGlzIGNvdW50ZW5hbmNlIHdoaWNoIGdyYWR1YWxseSBiZWNhbWUgZmFtaWxpYXIsIGFzIGZlYXJmdWwgdG8gdGhlaXIgZW5lbWllcyByYXRoZXIgdGhhbiB0byB0aGVtc2VsdmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaXQgd2FzIGFib3ZlIGFsbCB0aGluZ3MgdGhlIHVwcmlnaHRuZXNzIG9mIGhpcyBqdWRpY2lhbCBkZWNpc2lvbnMgdGhhdCBwbGVhc2VkIHRoZSBzb2xkaWVyczsgYW5kIG9mIHRoaXMgdGhlIGZvbGxvd2luZyBpbGx1c3RyYXRpb24gaXMgZ2l2ZW4uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywgYXMgaXQgd291bGQgc2VlbSwgYSBncmVhdCBwaWVjZSBvZiBnb29kIGZvcnR1bmUgYmVmZWxsIE1hcml1cy4gRm9yIHRoZSBCYXJiYXJpYW5zIGhhZCBhIHJlZmx1eCwgYXMgaXQgd2VyZSwgaW4gdGhlaXIgY291cnNlLCBhbmQgc3RyZWFtZWQgZmlyc3QgaW50byBTcGFpbi4gVGhpcyBnYXZlIE1hcml1cyB0aW1lIHRvIGV4ZXJjaXNlIHRoZSBib2RpZXMgb2YgaGlzIG1lbiwgdG8gcmFpc2UgdGhlaXIgc3Bpcml0cyB0byBhIHN0dXJkaWVyIGNvdXJhZ2UsIGFuZCwgd2hhdCB3YXMgbW9zdCBpbXBvcnRhbnQgb2YgYWxsLCB0byBsZXQgdGhlbSBmaW5kIG91dCB3aGF0IHNvcnQgb2YgYSBtYW4gaGUgd2FzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoaXMgc3Rlcm5uZXNzIGluIHRoZSBleGVyY2lzZSBvZiBhdXRob3JpdHkgYW5kIGhpcyBpbmZsZXhpYmlsaXR5IGluIHRoZSBpbmZsaWN0aW9uIG9mIHB1bmlzaG1lbnQgYXBwZWFyZWQgdG8gdGhlbSwgd2hlbiB0aGV5IGJlY2FtZSBhY2N1c3RvbWVkIHRvIG9iZWRpZW5jZSBhbmQgZ29vZCBiZWhhdmlvdXIsIHNhbHV0YXJ5IGFzIHdlbGwgYXMganVzdCwgYW5kIHRoZXkgcmVnYXJkZWQgdGhlIGZpZXJjZW5lc3Mgb2YgaGlzIHRlbXBlciwgdGhlIGhhcnNobmVzcyBvZiBoaXMgdm9pY2UsIGFuZCB0aGF0IGZlcm9jaXR5IG9mIGhpcyBjb3VudGVuYW5jZSB3aGljaCBncmFkdWFsbHkgYmVjYW1lIGZhbWlsaWFyLCBhcyBmZWFyZnVsIHRvIHRoZWlyIGVuZW1pZXMgcmF0aGVyIHRoYW4gdG8gdGhlbXNlbHZlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpdCB3YXMgYWJvdmUgYWxsIHRoaW5ncyB0aGUgdXByaWdodG5lc3Mgb2YgaGlzIGp1ZGljaWFsIGRlY2lzaW9ucyB0aGF0IHBsZWFzZWQgdGhlIHNvbGRpZXJzOyBhbmQgb2YgdGhpcyB0aGUgZm9sbG93aW5nIGlsbHVzdHJhdGlvbiBpcyBnaXZlbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5DYWl1cyBMdXNpdXMsIGEgbmVwaGV3IG9mIGhpcywgaGFkIGEgY29tbWFuZCB1bmRlciBoaW0gaW4gdGhlIGFybXkuIEluIG90aGVyIHJlc3BlY3RzIGhlIHdhcyBhIG1hbiBvZiBnb29kIHJlcHV0YXRpb24sIGJ1dCBoZSBoYWQgYSB3ZWFrbmVzcyBmb3IgYmVhdXRpZnVsIHlvdXRocy4gVGhpcyBvZmZpY2VyIHdhcyBlbmFtb3VyZWQgb2Ygb25lIG9mIHRoZSB5b3VuZyBtZW4gd2hvIHNlcnZlZCB1bmRlciBoaW0sIGJ5IG5hbWUgVHJlYm9uaXVzLCBhbmQgaGFkIG9mdGVuIG1hZGUgdW5zdWNjZXNzZnVsIGF0dGVtcHRzIHRvIHNlZHVjZSBoaW0uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGZpbmFsbHksIGF0IG5pZ2h0LCBoZSBzZW50IGEgc2VydmFudCB3aXRoIGEgc3VtbW9ucyBmb3IgVHJlYm9uaXVzLiBUaGUgeW91bmcgbWFuIGNhbWUsIHNpbmNlIGhlIGNvdWxkIG5vdCByZWZ1c2UgdG8gb2JleSBhIHN1bW1vbnMsIGJ1dCB3aGVuIGhlIGhhZCBiZWVuIGludHJvZHVjZWQgaW50byB0aGUgdGVudCBhbmQgQ2FpdXMgYXR0ZW1wdGVkIHZpb2xlbmNlIHVwb24gaGltLCBoZSBkcmV3IGhpcyBzd29yZCBhbmQgc2xldyBoaW0uIE1hcml1cyB3YXMgbm90IHdpdGggdGhlIGFybXkgd2hlbiB0aGlzIGhhcHBlbmVkOyBidXQgb24gaGlzIHJldHVybiBoZSBicm91Z2h0IFRyZWJvbml1cyB0byB0cmlhbC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSB0aGVyZSB3ZXJlIG1hbnkgYWNjdXNlcnMsIGJ1dCBub3QgYSBzaW5nbGUgYWR2b2NhdGUsIHdoZXJlZm9yZSBUcmVib25pdXMgaGltc2VsZiBjb3VyYWdlb3VzbHkgdG9vayB0aGUgc3RhbmQgYW5kIHRvbGQgYWxsIGFib3V0IHRoZSBtYXR0ZXIsIGJyaW5naW5nIHdpdG5lc3NlcyB0byBzaG93IHRoYXQgaGUgaGFkIG9mdGVuIHJlZnVzZWQgdGhlIHNvbGljaXRhdGlvbnMgb2YgTHVzaXVzIGFuZCB0aGF0IGluIHNwaXRlIG9mIGxhcmdlIG9mZmVycyBoZSBoYWQgbmV2ZXIgcHJvc3RpdHV0ZWQgaGltc2VsZiB0byBhbnlvbmUuIFRoZW4gTWFyaXVzLCBmaWxsZWQgd2l0aCBkZWxpZ2h0IGFuZCBhZG1pcmF0aW9uLCBvcmRlcmVkIHRoZSBjdXN0b21hcnkgY3Jvd24gZm9yIGJyYXZlIGV4cGxvaXRzIHRvIGJlIGJyb3VnaHQsIGFuZCB3aXRoIGhpcyBvd24gaGFuZHMgcGxhY2VkIGl0IG9uIHRoZSBoZWFkIG9mIFRyZWJvbml1cywgZGVjbGFyaW5nIHRoYXQgYXQgYSB0aW1lIHdoaWNoIGNhbGxlZCBmb3Igbm9ibGUgZXhhbXBsZXMgaGUgaGFkIGRpc3BsYXllZCBtb3N0IG5vYmxlIGNvbmR1Y3QuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmaW5hbGx5LCBhdCBuaWdodCwgaGUgc2VudCBhIHNlcnZhbnQgd2l0aCBhIHN1bW1vbnMgZm9yIFRyZWJvbml1cy4gVGhlIHlvdW5nIG1hbiBjYW1lLCBzaW5jZSBoZSBjb3VsZCBub3QgcmVmdXNlIHRvIG9iZXkgYSBzdW1tb25zLCBidXQgd2hlbiBoZSBoYWQgYmVlbiBpbnRyb2R1Y2VkIGludG8gdGhlIHRlbnQgYW5kIENhaXVzIGF0dGVtcHRlZCB2aW9sZW5jZSB1cG9uIGhpbSwgaGUgZHJldyBoaXMgc3dvcmQgYW5kIHNsZXcgaGltLiBNYXJpdXMgd2FzIG5vdCB3aXRoIHRoZSBhcm15IHdoZW4gdGhpcyBoYXBwZW5lZDsgYnV0IG9uIGhpcyByZXR1cm4gaGUgYnJvdWdodCBUcmVib25pdXMgdG8gdHJpYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgdGhlcmUgd2VyZSBtYW55IGFjY3VzZXJzLCBidXQgbm90IGEgc2luZ2xlIGFkdm9jYXRlLCB3aGVyZWZvcmUgVHJlYm9uaXVzIGhpbXNlbGYgY291cmFnZW91c2x5IHRvb2sgdGhlIHN0YW5kIGFuZCB0b2xkIGFsbCBhYm91dCB0aGUgbWF0dGVyLCBicmluZ2luZyB3aXRuZXNzZXMgdG8gc2hvdyB0aGF0IGhlIGhhZCBvZnRlbiByZWZ1c2VkIHRoZSBzb2xpY2l0YXRpb25zIG9mIEx1c2l1cyBhbmQgdGhhdCBpbiBzcGl0ZSBvZiBsYXJnZSBvZmZlcnMgaGUgaGFkIG5ldmVyIHByb3N0aXR1dGVkIGhpbXNlbGYgdG8gYW55b25lLiBUaGVuIE1hcml1cywgZmlsbGVkIHdpdGggZGVsaWdodCBhbmQgYWRtaXJhdGlvbiwgb3JkZXJlZCB0aGUgY3VzdG9tYXJ5IGNyb3duIGZvciBicmF2ZSBleHBsb2l0cyB0byBiZSBicm91Z2h0LCBhbmQgd2l0aCBoaXMgb3duIGhhbmRzIHBsYWNlZCBpdCBvbiB0aGUgaGVhZCBvZiBUcmVib25pdXMsIGRlY2xhcmluZyB0aGF0IGF0IGEgdGltZSB3aGljaCBjYWxsZWQgZm9yIG5vYmxlIGV4YW1wbGVzIGhlIGhhZCBkaXNwbGF5ZWQgbW9zdCBub2JsZSBjb25kdWN0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaWRpbmdzIG9mIHRoaXMgd2VyZSBicm91Z2h0IHRvIFJvbWUgYW5kIGhlbHBlZCBpbiBubyBzbWFsbCBkZWdyZWUgdG8gc2VjdXJlIGZvciBNYXJpdXMgaGlzIHRoaXJkIGNvbnN1bHNoaXA7IDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciAxMDMgQi5DLiA8L25vdGU+IGF0IHRoZSBzYW1lIHRpbWUsIHRvbywgdGhlIEJhcmJhcmlhbnMgd2VyZSBleHBlY3RlZCBpbiB0aGUgc3ByaW5nLCBhbmQgdGhlIFJvbWFucyB3ZXJlIHVud2lsbGluZyB0byByaXNrIGJhdHRsZSB3aXRoIHRoZW0gdW5kZXIgYW55IG90aGVyIGdlbmVyYWwuIEhvd2V2ZXIsIHRoZSBCYXJiYXJpYW5zIGRpZCBub3QgY29tZSBhcyBzb29uIGFzIHRoZXkgd2VyZSBleHBlY3RlZCwgYW5kIG9uY2UgbW9yZSB0aGUgcGVyaW9kIG9mIE1hcml1cydzIGNvbnN1bHNoaXAgZXhwaXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QXMgdGhlIGNvbnN1bGFyIGVsZWN0aW9ucyB3ZXJlIGF0IGhhbmQsIGFuZCBhcyBoaXMgY29sbGVhZ3VlIGluIHRoZSBvZmZpY2UgaGFkIGRpZWQsIE1hcml1cyBsZWZ0IE1hbml1cyBBcXVpbGxpdXMgaW4gY2hhcmdlIG9mIHRoZSBmb3JjZXMgYW5kIGNhbWUgaGltc2VsZiB0byBSb21lLiBIZXJlIG1hbnkgbWVuIG9mIGdyZWF0IG1lcml0IHdlcmUgY2FuZGlkYXRlcyBmb3IgdGhlIGNvbnN1bHNoaXAsIGJ1dCBMdWNpdXMgU2F0dXJuaW51cywgd2hvIGhhZCBtb3JlIGluZmx1ZW5jZSB3aXRoIHRoZSBwZW9wbGUgdGhhbiBhbnkgb3RoZXIgdHJpYnVuZSwgd2FzIHdvbiBvdmVyIGJ5IHRoZSBmbGF0dGVyaW5nIGF0dGVudGlvbnMgb2YgTWFyaXVzLCBhbmQgaW4gaGlzIGhhcmFuZ3VlcyB1cmdlZCB0aGUgcGVvcGxlIHRvIGVsZWN0IE1hcml1cyBjb25zdWwuIE1hcml1cyBhZmZlY3RlZCB0byBkZWNsaW5lIHRoZSBvZmZpY2UgYW5kIGRlY2xhcmVkIHRoYXQgaGUgZGlkIG5vdCB3YW50IGl0LCBidXQgU2F0dXJuaW51cyBjYWxsZWQgaGltIGEgdHJhaXRvciB0byBoaXMgY291bnRyeSBmb3IgcmVmdXNpbmcgdG8gY29tbWFuZCBoZXIgYXJtaWVzIGF0IGEgdGltZSBvZiBzbyBncmVhdCBwZXJpbC4gCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpdCB3YXMgY2xlYXIgdGhhdCBTYXR1cm5pbnVzIHdhcyBwbGF5aW5nIGhpcyBwYXJ0IGF0IHRoZSBpbnN0aWdhdGlvbiBvZiBNYXJpdXMsIGFuZCBwbGF5aW5nIGl0IGJhZGx5LCB0b28sIGJ1dCB0aGUgbXVsdGl0dWRlLCBzZWVpbmcgdGhhdCB0aGUgb2NjYXNpb24gcmVxdWlyZWQgdGhlIGFiaWxpdHkgYXMgd2VsbCBhcyB0aGUgZ29vZCBmb3J0dW5lIG9mIE1hcml1cywgdm90ZWQgZm9yIGhpcyBmb3VydGggY29uc3Vsc2hpcCwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTAyIEIuQy4gPC9ub3RlPiBhbmQgbWFkZSBDYXR1bHVzIEx1dGF0aXVzIGhpcyBjb2xsZWFndWUsIGEgbWFuIHdobyB3YXMgZXN0ZWVtZWQgYnkgdGhlIG5vYmlsaXR5IGFuZCBub3QgZGlzbGlrZWQgYnkgdGhlIGNvbW1vbiBwZW9wbGUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRpZGluZ3Mgb2YgdGhpcyB3ZXJlIGJyb3VnaHQgdG8gUm9tZSBhbmQgaGVscGVkIGluIG5vIHNtYWxsIGRlZ3JlZSB0byBzZWN1cmUgZm9yIE1hcml1cyBoaXMgdGhpcmQgY29uc3Vsc2hpcDsgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIHllYXIgMTAzIEIuQy4gPC9ub3RlPiBhdCB0aGUgc2FtZSB0aW1lLCB0b28sIHRoZSBCYXJiYXJpYW5zIHdlcmUgZXhwZWN0ZWQgaW4gdGhlIHNwcmluZywgYW5kIHRoZSBSb21hbnMgd2VyZSB1bndpbGxpbmcgdG8gcmlzayBiYXR0bGUgd2l0aCB0aGVtIHVuZGVyIGFueSBvdGhlciBnZW5lcmFsLiBIb3dldmVyLCB0aGUgQmFyYmFyaWFucyBkaWQgbm90IGNvbWUgYXMgc29vbiBhcyB0aGV5IHdlcmUgZXhwZWN0ZWQsIGFuZCBvbmNlIG1vcmUgdGhlIHBlcmlvZCBvZiBNYXJpdXMncyBjb25zdWxzaGlwIGV4cGlyZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRoZSBjb25zdWxhciBlbGVjdGlvbnMgd2VyZSBhdCBoYW5kLCBhbmQgYXMgaGlzIGNvbGxlYWd1ZSBpbiB0aGUgb2ZmaWNlIGhhZCBkaWVkLCBNYXJpdXMgbGVmdCBNYW5pdXMgQXF1aWxsaXVzIGluIGNoYXJnZSBvZiB0aGUgZm9yY2VzIGFuZCBjYW1lIGhpbXNlbGYgdG8gUm9tZS4gSGVyZSBtYW55IG1lbiBvZiBncmVhdCBtZXJpdCB3ZXJlIGNhbmRpZGF0ZXMgZm9yIHRoZSBjb25zdWxzaGlwLCBidXQgTHVjaXVzIFNhdHVybmludXMsIHdobyBoYWQgbW9yZSBpbmZsdWVuY2Ugd2l0aCB0aGUgcGVvcGxlIHRoYW4gYW55IG90aGVyIHRyaWJ1bmUsIHdhcyB3b24gb3ZlciBieSB0aGUgZmxhdHRlcmluZyBhdHRlbnRpb25zIG9mIE1hcml1cywgYW5kIGluIGhpcyBoYXJhbmd1ZXMgdXJnZWQgdGhlIHBlb3BsZSB0byBlbGVjdCBNYXJpdXMgY29uc3VsLiBNYXJpdXMgYWZmZWN0ZWQgdG8gZGVjbGluZSB0aGUgb2ZmaWNlIGFuZCBkZWNsYXJlZCB0aGF0IGhlIGRpZCBub3Qgd2FudCBpdCwgYnV0IFNhdHVybmludXMgY2FsbGVkIGhpbSBhIHRyYWl0b3IgdG8gaGlzIGNvdW50cnkgZm9yIHJlZnVzaW5nIHRvIGNvbW1hbmQgaGVyIGFybWllcyBhdCBhIHRpbWUgb2Ygc28gZ3JlYXQgcGVyaWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaXQgd2FzIGNsZWFyIHRoYXQgU2F0dXJuaW51cyB3YXMgcGxheWluZyBoaXMgcGFydCBhdCB0aGUgaW5zdGlnYXRpb24gb2YgTWFyaXVzLCBhbmQgcGxheWluZyBpdCBiYWRseSwgdG9vLCBidXQgdGhlIG11bHRpdHVkZSwgc2VlaW5nIHRoYXQgdGhlIG9jY2FzaW9uIHJlcXVpcmVkIHRoZSBhYmlsaXR5IGFzIHdlbGwgYXMgdGhlIGdvb2QgZm9ydHVuZSBvZiBNYXJpdXMsIHZvdGVkIGZvciBoaXMgZm91cnRoIGNvbnN1bHNoaXAsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+MTAyIEIuQy4gPC9ub3RlPiBhbmQgbWFkZSBDYXR1bHVzIEx1dGF0aXVzIGhpcyBjb2xsZWFndWUsIGEgbWFuIHdobyB3YXMgZXN0ZWVtZWQgYnkgdGhlIG5vYmlsaXR5IGFuZCBub3QgZGlzbGlrZWQgYnkgdGhlIGNvbW1vbiBwZW9wbGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJTGVhcm5pbmcgdGhhdCB0aGUgZW5lbXkgd2VyZSBuZWFyLCBNYXJpdXMgcmFwaWRseSBjcm9zc2VkIHRoZSBBbHBzLCBhbmQgYnVpbHQgYSBmb3J0aWZpZWQgY2FtcCBhbG9uZyB0aGUgcml2ZXIgUmhvbmUuIEludG8gdGhpcyBoZSBicm91Z2h0IHRvZ2V0aGVyIGFuIGFidW5kYW5jZSBvZiBzdG9yZXMsIHRoYXQgaGUgbWlnaHQgbmV2ZXIgYmUgZm9yY2VkIGJ5IGxhY2sgb2YgcHJvdmlzaW9ucyB0byBnaXZlIGJhdHRsZSBjb250cmFyeSB0byBoaXMgYmV0dGVyIGp1ZGdtZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgY29udmV5YW5jZSBvZiB3aGF0IHdhcyBuZWVkZnVsIGZvciBoaXMgYXJteSwgd2hpY2ggaGFkIHByZXZpb3VzbHkgYmVlbiBhIGxvbmcgYW5kIGNvc3RseSBwcm9jZXNzIHdoZXJlIGl0IHdhcyBieSBzZWEsIGhlIHJlbmRlcmVkIGVhc3kgYW5kIHNwZWVkeS4gVGhhdCBpcywgdGhlIG1vdXRocyBvZiB0aGUgUmhvbmUsIGVuY291bnRlcmluZyB0aGUgc2VhLCB0b29rIHVwIGdyZWF0IHF1YW50aXRpZXMgb2YgbXVkIGFuZCBzYW5kIHBhY2tlZCBjbG9zZSB3aXRoIGNsYXkgYnkgdGhlIGFjdGlvbiBvZiB0aGUgYmlsbG93cywgYW5kIG1hZGUgdGhlIGVudHJhbmNlIG9mIHRoZSByaXZlciBkaWZmaWN1bHQsIGxhYm9yaW91cywgYW5kIHNsb3cgZm9yIHZlc3NlbHMgY2Fycnlpbmcgc3VwcGxpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIE1hcml1cyBicm91Z2h0IGhpcyBhcm15IHRvIHRoZSBwbGFjZSwgc2luY2UgdGhlIG1lbiBoYWQgbm90aGluZyBlbHNlIHRvIGRvLCBhbmQgcmFuIGEgZ3JlYXQgY2FuYWwuIEludG8gdGhpcyBoZSBkaXZlcnRlZCBhIGdyZWF0IHBhcnQgb2YgdGhlIHJpdmVyIGFuZCBicm91Z2h0IGl0IHJvdW5kIHRvIGEgc3VpdGFibGUgcGxhY2Ugb24gdGhlIGNvYXN0LCBhIGRlZXAgYmF5IHdoZXJlIGxhcmdlIHNoaXBzIGNvdWxkIGZsb2F0LCBhbmQgd2hlcmUgdGhlIHdhdGVyIGNvdWxkIGZsb3cgb3V0IHNtb290aGx5IGFuZCB3aXRob3V0IHdhdmVzIHRvIHRoZSBzZWEuIFRoaXMgY2FuYWwsIGluZGVlZCwgc3RpbGwgYmVhcnMgdGhlIG5hbWUgb2YgTWFyaXVzLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN0cmFiLiA0LjgiIHZhbGlkPSJ5ZXMiPlN0cmFibywgaXYuIDggKHAuIDE4MykgPC9iaWJsPi4gPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlMZWFybmluZyB0aGF0IHRoZSBlbmVteSB3ZXJlIG5lYXIsIE1hcml1cyByYXBpZGx5IGNyb3NzZWQgdGhlIEFscHMsIGFuZCBidWlsdCBhIGZvcnRpZmllZCBjYW1wIGFsb25nIHRoZSByaXZlciBSaG9uZS4gSW50byB0aGlzIGhlIGJyb3VnaHQgdG9nZXRoZXIgYW4gYWJ1bmRhbmNlIG9mIHN0b3JlcywgdGhhdCBoZSBtaWdodCBuZXZlciBiZSBmb3JjZWQgYnkgbGFjayBvZiBwcm92aXNpb25zIHRvIGdpdmUgYmF0dGxlIGNvbnRyYXJ5IHRvIGhpcyBiZXR0ZXIganVkZ21lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb252ZXlhbmNlIG9mIHdoYXQgd2FzIG5lZWRmdWwgZm9yIGhpcyBhcm15LCB3aGljaCBoYWQgcHJldmlvdXNseSBiZWVuIGEgbG9uZyBhbmQgY29zdGx5IHByb2Nlc3Mgd2hlcmUgaXQgd2FzIGJ5IHNlYSwgaGUgcmVuZGVyZWQgZWFzeSBhbmQgc3BlZWR5LiBUaGF0IGlzLCB0aGUgbW91dGhzIG9mIHRoZSBSaG9uZSwgZW5jb3VudGVyaW5nIHRoZSBzZWEsIHRvb2sgdXAgZ3JlYXQgcXVhbnRpdGllcyBvZiBtdWQgYW5kIHNhbmQgcGFja2VkIGNsb3NlIHdpdGggY2xheSBieSB0aGUgYWN0aW9uIG9mIHRoZSBiaWxsb3dzLCBhbmQgbWFkZSB0aGUgZW50cmFuY2Ugb2YgdGhlIHJpdmVyIGRpZmZpY3VsdCwgbGFib3Jpb3VzLCBhbmQgc2xvdyBmb3IgdmVzc2VscyBjYXJyeWluZyBzdXBwbGllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIE1hcml1cyBicm91Z2h0IGhpcyBhcm15IHRvIHRoZSBwbGFjZSwgc2luY2UgdGhlIG1lbiBoYWQgbm90aGluZyBlbHNlIHRvIGRvLCBhbmQgcmFuIGEgZ3JlYXQgY2FuYWwuIEludG8gdGhpcyBoZSBkaXZlcnRlZCBhIGdyZWF0IHBhcnQgb2YgdGhlIHJpdmVyIGFuZCBicm91Z2h0IGl0IHJvdW5kIHRvIGEgc3VpdGFibGUgcGxhY2Ugb24gdGhlIGNvYXN0LCBhIGRlZXAgYmF5IHdoZXJlIGxhcmdlIHNoaXBzIGNvdWxkIGZsb2F0LCBhbmQgd2hlcmUgdGhlIHdhdGVyIGNvdWxkIGZsb3cgb3V0IHNtb290aGx5IGFuZCB3aXRob3V0IHdhdmVzIHRvIHRoZSBzZWEuIFRoaXMgY2FuYWwsIGluZGVlZCwgc3RpbGwgYmVhcnMgdGhlIG5hbWUgb2YgTWFyaXVzLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdHJhYi4gNC44IiB2YWxpZD0ieWVzIj5TdHJhYm8sIGl2LiA4IChwLiAxODMpIDwvYmlibD4uIDwvbm90ZT4gCgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlN0cmFiLiA0LjgiIHZhbGlkPSJ5ZXMiPlN0cmFibywgaXYuIDggKHAuIDE4MykgPC9iaWJsPi4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIEJhcmJhcmlhbnMgZGl2aWRlZCB0aGVtc2VsdmVzIGludG8gdHdvIGJhbmRzLCBhbmQgaXQgZmVsbCB0byB0aGUgbG90IG9mIHRoZSBDaW1icmkgdG8gcHJvY2VlZCB0aHJvdWdoIE5vcmljdW0gaW4gdGhlIGludGVyaW9yIG9mIHRoZSBjb3VudHJ5IGFnYWluc3QgQ2F0dWx1cywgYW5kIGZvcmNlIGEgcGFzc2FnZSB0aGVyZSwgd2hpbGUgdGhlIFRldXRvbmVzIGFuZCBBbWJyb25lcyB3ZXJlIHRvIG1hcmNoIHRocm91Z2ggTGlndXJpYSBhbG9uZyB0aGUgc2VhLWNvYXN0IGFnYWluc3QgTWFyaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGUgcGFydCBvZiB0aGUgQ2ltYnJpIHRoZXJlIHdhcyBjb25zaWRlcmFibGUgZGVsYXkgYW5kIGxvc3Mgb2YgdGltZSwgYnV0IHRoZSBUZXV0b25lcyBhbmQgQW1icm9uZXMgc2V0IG91dCBhdCBvbmNlIHBhc3NlZCB0aHJvdWdoIHRoZSBpbnRlcnZlbmluZyBjb3VudHJ5LCBhbmQgbWFkZSB0aGVpciBhcHBlYXJhbmNlIGJlZm9yZSBNYXJpdXMuIFRoZWlyIG51bWJlcnMgd2VyZSBsaW1pdGxlc3MsIHRoZXkgd2VyZSBoaWRlb3VzIGluIHRoZWlyIGFzcGVjdCwgYW5kIHRoZWlyIHNwZWVjaCBhbmQgY3JpZXMgd2VyZSB1bmxpa2UgdGhvc2Ugb2Ygb3RoZXIgcGVvcGxlcy4gVGhleSBjb3ZlcmVkIGEgbGFyZ2UgcGFydCBvZiB0aGUgcGxhaW4sIGFuZCBhZnRlciBwaXRjaGluZyB0aGVpciBjYW1wIGNoYWxsZW5nZWQgTWFyaXVzIHRvIGJhdHRsZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBCYXJiYXJpYW5zIGRpdmlkZWQgdGhlbXNlbHZlcyBpbnRvIHR3byBiYW5kcywgYW5kIGl0IGZlbGwgdG8gdGhlIGxvdCBvZiB0aGUgQ2ltYnJpIHRvIHByb2NlZWQgdGhyb3VnaCBOb3JpY3VtIGluIHRoZSBpbnRlcmlvciBvZiB0aGUgY291bnRyeSBhZ2FpbnN0IENhdHVsdXMsIGFuZCBmb3JjZSBhIHBhc3NhZ2UgdGhlcmUsIHdoaWxlIHRoZSBUZXV0b25lcyBhbmQgQW1icm9uZXMgd2VyZSB0byBtYXJjaCB0aHJvdWdoIExpZ3VyaWEgYWxvbmcgdGhlIHNlYS1jb2FzdCBhZ2FpbnN0IE1hcml1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBwYXJ0IG9mIHRoZSBDaW1icmkgdGhlcmUgd2FzIGNvbnNpZGVyYWJsZSBkZWxheSBhbmQgbG9zcyBvZiB0aW1lLCBidXQgdGhlIFRldXRvbmVzIGFuZCBBbWJyb25lcyBzZXQgb3V0IGF0IG9uY2UgcGFzc2VkIHRocm91Z2ggdGhlIGludGVydmVuaW5nIGNvdW50cnksIGFuZCBtYWRlIHRoZWlyIGFwcGVhcmFuY2UgYmVmb3JlIE1hcml1cy4gVGhlaXIgbnVtYmVycyB3ZXJlIGxpbWl0bGVzcywgdGhleSB3ZXJlIGhpZGVvdXMgaW4gdGhlaXIgYXNwZWN0LCBhbmQgdGhlaXIgc3BlZWNoIGFuZCBjcmllcyB3ZXJlIHVubGlrZSB0aG9zZSBvZiBvdGhlciBwZW9wbGVzLiBUaGV5IGNvdmVyZWQgYSBsYXJnZSBwYXJ0IG9mIHRoZSBwbGFpbiwgYW5kIGFmdGVyIHBpdGNoaW5nIHRoZWlyIGNhbXAgY2hhbGxlbmdlZCBNYXJpdXMgdG8gYmF0dGxlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCU1hcml1cywgaG93ZXZlciwgcGFpZCBubyBoZWVkIHRvIHRoZW0sIGJ1dCBrZXB0IGhpcyBzb2xkaWVycyBpbnNpZGUgdGhlaXIgZm9ydGlmaWNhdGlvbnMsIGJpdHRlcmx5IHJlYnVraW5nIHRob3NlIHdobyB3b3VsZCBoYXZlIG1hZGUgYSBkaXNwbGF5IG9mIHRoZWlyIGNvdXJhZ2UsIGFuZCBjYWxsaW5nIHRob3NlIHdob3NlIGhpZ2ggc3Bpcml0IG1hZGUgdGhlbSB3aXNoIHRvIHJ1c2ggZm9ydGggYW5kIGdpdmUgYmF0dGxlIHRyYWl0b3JzIHRvIHRoZWlyIGNvdW50cnkuIEZvciBpdCB3YXMgbm90LCBoZSBzYWlkLCB0cml1bXBocyBvciB0cm9waGllcyB0aGF0IHNob3VsZCBub3cgYmUgdGhlIG9iamVjdCBvZiB0aGVpciBhbWJpdGlvbiwgYnV0IGhvdyB0aGV5IG1pZ2h0IHdhcmQgb2ZmIHNvIGdyZWF0IGEgY2xvdWQgYW5kIHRodW5kZXItYm9sdCBvZiB3YXIgYW5kIHNlY3VyZSB0aGUgc2FmZXR5IG9mIEl0YWx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyBoaXMgbGFuZ3VhZ2UgaW4gcHJpdmF0ZSB0byBoaXMgb2ZmaWNlcnMgYW5kIGVxdWFsczsgYnV0IGhlIHdvdWxkIHN0YXRpb24gaGlzIHNvbGRpZXJzIG9uIHRoZSBmb3J0aWZpY2F0aW9ucyBieSBkZXRhY2htZW50cywgYmlkZGluZyB0aGVtIHRvIG9ic2VydmUgdGhlIGVuZW15LCBhbmQgaW4gdGhpcyB3YXkgYWNjdXN0b21lZCB0aGVtIG5vdCB0byBmZWFyIHRoZWlyIHNoYXBlIG9yIGRyZWFkIHRoZWlyIGNyaWVzLCB3aGljaCB3ZXJlIGFsdG9nZXRoZXIgc3RyYW5nZSBhbmQgZmVyb2Npb3VzOyBhbmQgdG8gbWFrZSB0aGVtc2VsdmVzIGFjcXVhaW50ZWQgd2l0aCB0aGVpciBlcXVpcG1lbnQgYW5kIG1vdmVtZW50cywgdGh1cyBpbiBjb3Vyc2Ugb2YgdGltZSByZW5kZXJpbmcgd2hhdCB3YXMgb25seSBhcHBhcmVudGx5IGZvcm1pZGFibGUgZmFtaWxpYXIgdG8gdGhlaXIgbWluZHMgZnJvbSBvYnNlcnZhdGlvbi4gRm9yIGhlIGNvbnNpZGVyZWQgdGhhdCB0aGVpciBub3ZlbHR5IGZhbHNlbHkgaW1wYXJ0cyB0byB0ZXJyaWZ5aW5nIG9iamVjdHMgbWFueSBxdWFsaXRpZXMgd2hpY2ggdGhleSBkbyBub3QgcG9zc2VzcywgYnV0IHRoYXQgd2l0aCBmYW1pbGlhcml0eSBldmVuIHRob3NlIHRoaW5ncyB3aGljaCBhcmUgcmVhbGx5IGRyZWFkZnVsIGxvc2UgdGhlaXIgcG93ZXIgdG8gYWZmcmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpbiB0aGUgY2FzZSBvZiBoaXMgc29sZGllcnMsIG5vdCBvbmx5IGRpZCB0aGUgZGFpbHkgc2lnaHQgb2YgdGhlIGVuZW15IGxlc3NlbiBzb21ld2hhdCB0aGVpciBhbWF6ZW1lbnQgYXQgdGhlbSwgYnV0IGFsc28sIHdoZW4gdGhleSBoZWFyZCB0aGUgdGhyZWF0cyBhbmQgdGhlIGludG9sZXJhYmxlIGJvYXN0aW5nIG9mIHRoZSBCYXJiYXJpYW5zLCB0aGVpciBhbmdlciByb3NlIGFuZCB3YXJtZWQgYW5kIHNldCBvbiBmaXJlIHRoZWlyIHNwaXJpdHM7IGZvciB0aGUgZW5lbXkgd2VyZSByYXZhZ2luZyBhbmQgcGx1bmRlcmluZyBhbGwgdGhlIGNvdW50cnkgcm91bmQsIGFuZCBiZXNpZGVzLCBvZnRlbiBhdHRhY2tlZCB0aGUgUm9tYW4gZm9ydGlmaWNhdGlvbnMgd2l0aCBncmVhdCB0ZW1lcml0eSBhbmQgc2hhbWVsZXNzbmVzcywgc28gdGhhdCBpbmRpZ25hbnQgc3BlZWNoZXMgb2YgaGlzIHNvbGRpZXJzIHJlYWNoZWQgdGhlIGVhcnMgb2YgTWFyaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCBjb3dhcmRpY2UsIHByYXksIGhhcyBNYXJpdXMgZGlzY292ZXJlZCBpbiB1cyB0aGF0IGhlIGtlZXBzIHVzIG91dCBvZiBiYXR0bGUgbGlrZSB3b21lbiB1bmRlciBsb2NrIGFuZCBrZXk/IENvbWUsIGxldCB1cyBhY3QgbGlrZSBmcmVlbWVuIGFuZCBhc2sgaGltIGlmIGhlIGlzIHdhaXRpbmcgZm9yIG90aGVyIHNvbGRpZXJzIHRvIGZpZ2h0IGluIGRlZmVuY2Ugb2YgSXRhbHksIGFuZCB3aWxsIHVzZSB1cyBhcyB3b3JrbWVuIGFsbCB0aGUgdGltZSwgd2hlbmV2ZXIgdGhlcmUgaXMgbmVlZCBvZiBkaWdnaW5nIGRpdGNoZXMgYW5kIGNsZWFyaW5nIG91dCBtdWQgYW5kIGRpdmVydGluZyBhIHJpdmVyIG9yIHR3by4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgdG8gdGhpcyBlbmQsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgaGUgZXhlcmNpc2VkIHVzIGluIHRob3NlIG1hbnkgdG9pbHMsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDEgPC9iaWJsPi4gPC9ub3RlPiBhbmQgdGhlc2UgYXJlIHRoZSBhY2hpZXZlbWVudHMgb2YgaGlzIGNvbnN1bHNoaXBzIHdoaWNoIGhlIHdpbGwgZXhoaWJpdCB0byBoaXMgZmVsbG93LWNpdGl6ZW5zIG9uIGhpcyByZXR1cm4gdG8gUm9tZS4gT3IgZG9lcyBoZSBmZWFyIHRoZSBmYXRlIG9mIENhcmJvIGFuZCBDYWVwaW8sIHdob20gdGhlIGVuZW15IGRlZmVhdGVkPyA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYXJibyBpbiAxMTMgQi5DLiwgQ2FlcGlvIGluIDEwNSBCLkMuIFNlZSB0aGUgRGljdGlvbmFyeSBvZiBQcm9wZXIgTmFtZXMuIDwvbm90ZT4gQnV0IHRoZXkgd2VyZSBmYXIgYmVoaW5kIE1hcml1cyBpbiByZXB1dGF0aW9uIGFuZCBleGNlbGxlbmNlLCBhbmQgbGVkIGFuIGFybXkgdGhhdCB3YXMgZmFyIGluZmVyaW9yIHRvIGhpcy4gU3VyZWx5IGl0IGlzIGJldHRlciB0byBkbyBzb21ldGhpbmcsIGV2ZW4gaWYgd2UgcGVyaXNoIGFzIHRoZXkgZGlkLCByYXRoZXIgdGhhbiB0byBzaXQgaGVyZSBhbmQgZW5qb3kgdGhlIHNwZWN0YWNsZSBvZiBvdXIgYWxsaWVzIGJlaW5nIHBsdW5kZXJlZC48L3E+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlNYXJpdXMsIGhvd2V2ZXIsIHBhaWQgbm8gaGVlZCB0byB0aGVtLCBidXQga2VwdCBoaXMgc29sZGllcnMgaW5zaWRlIHRoZWlyIGZvcnRpZmljYXRpb25zLCBiaXR0ZXJseSByZWJ1a2luZyB0aG9zZSB3aG8gd291bGQgaGF2ZSBtYWRlIGEgZGlzcGxheSBvZiB0aGVpciBjb3VyYWdlLCBhbmQgY2FsbGluZyB0aG9zZSB3aG9zZSBoaWdoIHNwaXJpdCBtYWRlIHRoZW0gd2lzaCB0byBydXNoIGZvcnRoIGFuZCBnaXZlIGJhdHRsZSB0cmFpdG9ycyB0byB0aGVpciBjb3VudHJ5LiBGb3IgaXQgd2FzIG5vdCwgaGUgc2FpZCwgdHJpdW1waHMgb3IgdHJvcGhpZXMgdGhhdCBzaG91bGQgbm93IGJlIHRoZSBvYmplY3Qgb2YgdGhlaXIgYW1iaXRpb24sIGJ1dCBob3cgdGhleSBtaWdodCB3YXJkIG9mZiBzbyBncmVhdCBhIGNsb3VkIGFuZCB0aHVuZGVyLWJvbHQgb2Ygd2FyIGFuZCBzZWN1cmUgdGhlIHNhZmV0eSBvZiBJdGFseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIGhpcyBsYW5ndWFnZSBpbiBwcml2YXRlIHRvIGhpcyBvZmZpY2VycyBhbmQgZXF1YWxzOyBidXQgaGUgd291bGQgc3RhdGlvbiBoaXMgc29sZGllcnMgb24gdGhlIGZvcnRpZmljYXRpb25zIGJ5IGRldGFjaG1lbnRzLCBiaWRkaW5nIHRoZW0gdG8gb2JzZXJ2ZSB0aGUgZW5lbXksIGFuZCBpbiB0aGlzIHdheSBhY2N1c3RvbWVkIHRoZW0gbm90IHRvIGZlYXIgdGhlaXIgc2hhcGUgb3IgZHJlYWQgdGhlaXIgY3JpZXMsIHdoaWNoIHdlcmUgYWx0b2dldGhlciBzdHJhbmdlIGFuZCBmZXJvY2lvdXM7IGFuZCB0byBtYWtlIHRoZW1zZWx2ZXMgYWNxdWFpbnRlZCB3aXRoIHRoZWlyIGVxdWlwbWVudCBhbmQgbW92ZW1lbnRzLCB0aHVzIGluIGNvdXJzZSBvZiB0aW1lIHJlbmRlcmluZyB3aGF0IHdhcyBvbmx5IGFwcGFyZW50bHkgZm9ybWlkYWJsZSBmYW1pbGlhciB0byB0aGVpciBtaW5kcyBmcm9tIG9ic2VydmF0aW9uLiBGb3IgaGUgY29uc2lkZXJlZCB0aGF0IHRoZWlyIG5vdmVsdHkgZmFsc2VseSBpbXBhcnRzIHRvIHRlcnJpZnlpbmcgb2JqZWN0cyBtYW55IHF1YWxpdGllcyB3aGljaCB0aGV5IGRvIG5vdCBwb3NzZXNzLCBidXQgdGhhdCB3aXRoIGZhbWlsaWFyaXR5IGV2ZW4gdGhvc2UgdGhpbmdzIHdoaWNoIGFyZSByZWFsbHkgZHJlYWRmdWwgbG9zZSB0aGVpciBwb3dlciB0byBhZmZyaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBzbyBpbiB0aGUgY2FzZSBvZiBoaXMgc29sZGllcnMsIG5vdCBvbmx5IGRpZCB0aGUgZGFpbHkgc2lnaHQgb2YgdGhlIGVuZW15IGxlc3NlbiBzb21ld2hhdCB0aGVpciBhbWF6ZW1lbnQgYXQgdGhlbSwgYnV0IGFsc28sIHdoZW4gdGhleSBoZWFyZCB0aGUgdGhyZWF0cyBhbmQgdGhlIGludG9sZXJhYmxlIGJvYXN0aW5nIG9mIHRoZSBCYXJiYXJpYW5zLCB0aGVpciBhbmdlciByb3NlIGFuZCB3YXJtZWQgYW5kIHNldCBvbiBmaXJlIHRoZWlyIHNwaXJpdHM7IGZvciB0aGUgZW5lbXkgd2VyZSByYXZhZ2luZyBhbmQgcGx1bmRlcmluZyBhbGwgdGhlIGNvdW50cnkgcm91bmQsIGFuZCBiZXNpZGVzLCBvZnRlbiBhdHRhY2tlZCB0aGUgUm9tYW4gZm9ydGlmaWNhdGlvbnMgd2l0aCBncmVhdCB0ZW1lcml0eSBhbmQgc2hhbWVsZXNzbmVzcywgc28gdGhhdCBpbmRpZ25hbnQgc3BlZWNoZXMgb2YgaGlzIHNvbGRpZXJzIHJlYWNoZWQgdGhlIGVhcnMgb2YgTWFyaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQgY293YXJkaWNlLCBwcmF5LCBoYXMgTWFyaXVzIGRpc2NvdmVyZWQgaW4gdXMgdGhhdCBoZSBrZWVwcyB1cyBvdXQgb2YgYmF0dGxlIGxpa2Ugd29tZW4gdW5kZXIgbG9jayBhbmQga2V5PyBDb21lLCBsZXQgdXMgYWN0IGxpa2UgZnJlZW1lbiBhbmQgYXNrIGhpbSBpZiBoZSBpcyB3YWl0aW5nIGZvciBvdGhlciBzb2xkaWVycyB0byBmaWdodCBpbiBkZWZlbmNlIG9mIEl0YWx5LCBhbmQgd2lsbCB1c2UgdXMgYXMgd29ya21lbiBhbGwgdGhlIHRpbWUsIHdoZW5ldmVyIHRoZXJlIGlzIG5lZWQgb2YgZGlnZ2luZyBkaXRjaGVzIGFuZCBjbGVhcmluZyBvdXQgbXVkIGFuZCBkaXZlcnRpbmcgYSByaXZlciBvciB0d28uIAoJCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgdG8gdGhpcyBlbmQsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgaGUgZXhlcmNpc2VkIHVzIGluIHRob3NlIG1hbnkgdG9pbHMsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDEgPC9iaWJsPi4gPC9ub3RlPiBhbmQgdGhlc2UgYXJlIHRoZSBhY2hpZXZlbWVudHMgb2YgaGlzIGNvbnN1bHNoaXBzIHdoaWNoIGhlIHdpbGwgZXhoaWJpdCB0byBoaXMgZmVsbG93LWNpdGl6ZW5zIG9uIGhpcyByZXR1cm4gdG8gUm9tZS4gT3IgZG9lcyBoZSBmZWFyIHRoZSBmYXRlIG9mIENhcmJvIGFuZCBDYWVwaW8sIHdob20gdGhlIGVuZW15IGRlZmVhdGVkPyA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYXJibyBpbiAxMTMgQi5DLiwgQ2FlcGlvIGluIDEwNSBCLkMuIFNlZSB0aGUgRGljdGlvbmFyeSBvZiBQcm9wZXIgTmFtZXMuIDwvbm90ZT4gQnV0IHRoZXkgd2VyZSBmYXIgYmVoaW5kIE1hcml1cyBpbiByZXB1dGF0aW9uIGFuZCBleGNlbGxlbmNlLCBhbmQgbGVkIGFuIGFybXkgdGhhdCB3YXMgZmFyIGluZmVyaW9yIHRvIGhpcy4gU3VyZWx5IGl0IGlzIGJldHRlciB0byBkbyBzb21ldGhpbmcsIGV2ZW4gaWYgd2UgcGVyaXNoIGFzIHRoZXkgZGlkLCByYXRoZXIgdGhhbiB0byBzaXQgaGVyZSBhbmQgZW5qb3kgdGhlIHNwZWN0YWNsZSBvZiBvdXIgYWxsaWVzIGJlaW5nIHBsdW5kZXJlZC48L3E+IAoJCQkgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgdG8gdGhpcyBlbmQsIGFzIGl0IHdvdWxkIHNlZW0sIHRoYXQgaGUgZXhlcmNpc2VkIHVzIGluIHRob3NlIG1hbnkgdG9pbHMsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTMuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4aWlpLiAxIDwvYmlibD4uIDwvbm90ZT4gYW5kIHRoZXNlIGFyZSB0aGUgYWNoaWV2ZW1lbnRzIG9mIGhpcyBjb25zdWxzaGlwcyB3aGljaCBoZSB3aWxsIGV4aGliaXQgdG8gaGlzIGZlbGxvdy1jaXRpemVucyBvbiBoaXMgcmV0dXJuIHRvIFJvbWUuIE9yIGRvZXMgaGUgZmVhciB0aGUgZmF0ZSBvZiBDYXJibyBhbmQgQ2FlcGlvLCB3aG9tIHRoZSBlbmVteSBkZWZlYXRlZD8gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIHhpaWkuIDEgPC9iaWJsPi4gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYXJibyBpbiAxMTMgQi5DLiwgQ2FlcGlvIGluIDEwNSBCLkMuIFNlZSB0aGUgRGljdGlvbmFyeSBvZiBQcm9wZXIgTmFtZXMuIDwvbm90ZT4gQnV0IHRoZXkgd2VyZSBmYXIgYmVoaW5kIE1hcml1cyBpbiByZXB1dGF0aW9uIGFuZCBleGNlbGxlbmNlLCBhbmQgbGVkIGFuIGFybXkgdGhhdCB3YXMgZmFyIGluZmVyaW9yIHRvIGhpcy4gU3VyZWx5IGl0IGlzIGJldHRlciB0byBkbyBzb21ldGhpbmcsIGV2ZW4gaWYgd2UgcGVyaXNoIGFzIHRoZXkgZGlkLCByYXRoZXIgdGhhbiB0byBzaXQgaGVyZSBhbmQgZW5qb3kgdGhlIHNwZWN0YWNsZSBvZiBvdXIgYWxsaWVzIGJlaW5nIHBsdW5kZXJlZC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCU1hcml1cyB3YXMgZGVsaWdodGVkIHRvIGhlYXIgb2Ygc3VjaCBleHByZXNzaW9ucywgYW5kIHRyaWVkIHRvIGNhbG0gdGhlIHNvbGRpZXJzIGRvd24gYnkgdGVsbGluZyB0aGVtIHRoYXQgaGUgZGlkIG5vdCBkaXN0cnVzdCB0aGVtLCBidXQgaW4gY29uc2VxdWVuY2Ugb2YgY2VydGFpbiBvcmFjbGVzIHdhcyBhd2FpdGluZyBhIGZpdCB0aW1lIGFuZCBwbGFjZSBmb3IgaGlzIHZpY3RvcnkuIEFuZCBpbmRlZWQgaGUgdXNlZCB0byBjYXJyeSBhYm91dCBjZXJlbW9uaW91c2x5IGluIGEgbGl0dGVyIGEgY2VydGFpbiBTeXJpYW4gd29tYW4sIG5hbWVkIE1hcnRoYSwgd2hvIHdhcyBzYWlkIHRvIGhhdmUgdGhlIGdpZnQgb2YgcHJvcGhlY3ksIGFuZCBoZSB3b3VsZCBtYWtlIHNhY3JpZmljZXMgYXQgaGVyIGJpZGRpbmcuIFNoZSBoYWQgcHJldmlvdXNseSBiZWVuIHJlamVjdGVkIGJ5IHRoZSBzZW5hdGUgd2hlbiBzaGUgd2lzaGVkIHRvIGFwcGVhciBiZWZvcmUgdGhlbSB3aXRoIHJlZmVyZW5jZSB0byB0aGVzZSBtYXR0ZXJzIGFuZCBwcmVkaWN0ZWQgZnV0dXJlIGV2ZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBzaGUgZ290IGF1ZGllbmNlIG9mIHRoZSB3b21lbiBhbmQgZ2F2ZSB0aGVtIHByb29mcyBvZiBoZXIgc2tpbGwsIGFuZCBwYXJ0aWN1bGFybHkgdGhlIHdpZmUgb2YgTWFyaXVzLCBhdCB3aG9zZSBmZWV0IHNoZSBzYXQgd2hlbiBzb21lIGdsYWRpYXRvcnMgd2VyZSBmaWdodGluZyBhbmQgc3VjY2Vzc2Z1bGx5IGZvcmV0b2xkIHdoaWNoIG9uZSB3YXMgZ29pbmcgdG8gYmUgdmljdG9yaW91cy4gSW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBzaGUgd2FzIHNlbnQgdG8gTWFyaXVzIGJ5IGhpcyB3aWZlLCBhbmQgd2FzIGFkbWlyZWQgYnkgaGltLiBBcyBhIGdlbmVyYWwgdGhpbmcgc2hlIHdhcyBjYXJyaWVkIGFsb25nIHdpdGggdGhlIGFybXkgaW4gYSBsaXR0ZXIsIGJ1dCBzaGUgYXR0ZW5kZWQgdGhlIHNhY3JpZmljZXMgY2xvdGhlZCBpbiBhIGRvdWJsZSBwdXJwbGUgcm9iZSB0aGF0IHdhcyBmYXN0ZW5lZCB3aXRoIGEgY2xhc3AsIGFuZCBjYXJyeWluZyBhIHNwZWFyIHRoYXQgd2FzIHdyZWF0aGVkIHdpdGggZmlsbGV0cyBhbmQgY2hhcGxldHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYSBwZXJmb3JtYW5jZSBhcyB0aGlzIGNhdXNlZCBtYW55IHRvIGRvdWJ0IHdoZXRoZXIgTWFyaXVzLCBpbiBleGhpYml0aW5nIHRoZSB3b21hbiwgcmVhbGx5IGJlbGlldmVkIGluIGhlciwgb3Igd2FzIHByZXRlbmRpbmcgdG8gZG8gc28gYW5kIG1lcmVseSBhY3RlZCBhIHBhcnQgd2l0aCBoZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlNYXJpdXMgd2FzIGRlbGlnaHRlZCB0byBoZWFyIG9mIHN1Y2ggZXhwcmVzc2lvbnMsIGFuZCB0cmllZCB0byBjYWxtIHRoZSBzb2xkaWVycyBkb3duIGJ5IHRlbGxpbmcgdGhlbSB0aGF0IGhlIGRpZCBub3QgZGlzdHJ1c3QgdGhlbSwgYnV0IGluIGNvbnNlcXVlbmNlIG9mIGNlcnRhaW4gb3JhY2xlcyB3YXMgYXdhaXRpbmcgYSBmaXQgdGltZSBhbmQgcGxhY2UgZm9yIGhpcyB2aWN0b3J5LiBBbmQgaW5kZWVkIGhlIHVzZWQgdG8gY2FycnkgYWJvdXQgY2VyZW1vbmlvdXNseSBpbiBhIGxpdHRlciBhIGNlcnRhaW4gU3lyaWFuIHdvbWFuLCBuYW1lZCBNYXJ0aGEsIHdobyB3YXMgc2FpZCB0byBoYXZlIHRoZSBnaWZ0IG9mIHByb3BoZWN5LCBhbmQgaGUgd291bGQgbWFrZSBzYWNyaWZpY2VzIGF0IGhlciBiaWRkaW5nLiBTaGUgaGFkIHByZXZpb3VzbHkgYmVlbiByZWplY3RlZCBieSB0aGUgc2VuYXRlIHdoZW4gc2hlIHdpc2hlZCB0byBhcHBlYXIgYmVmb3JlIHRoZW0gd2l0aCByZWZlcmVuY2UgdG8gdGhlc2UgbWF0dGVycyBhbmQgcHJlZGljdGVkIGZ1dHVyZSBldmVudHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gc2hlIGdvdCBhdWRpZW5jZSBvZiB0aGUgd29tZW4gYW5kIGdhdmUgdGhlbSBwcm9vZnMgb2YgaGVyIHNraWxsLCBhbmQgcGFydGljdWxhcmx5IHRoZSB3aWZlIG9mIE1hcml1cywgYXQgd2hvc2UgZmVldCBzaGUgc2F0IHdoZW4gc29tZSBnbGFkaWF0b3JzIHdlcmUgZmlnaHRpbmcgYW5kIHN1Y2Nlc3NmdWxseSBmb3JldG9sZCB3aGljaCBvbmUgd2FzIGdvaW5nIHRvIGJlIHZpY3RvcmlvdXMuIEluIGNvbnNlcXVlbmNlIG9mIHRoaXMgc2hlIHdhcyBzZW50IHRvIE1hcml1cyBieSBoaXMgd2lmZSwgYW5kIHdhcyBhZG1pcmVkIGJ5IGhpbS4gQXMgYSBnZW5lcmFsIHRoaW5nIHNoZSB3YXMgY2FycmllZCBhbG9uZyB3aXRoIHRoZSBhcm15IGluIGEgbGl0dGVyLCBidXQgc2hlIGF0dGVuZGVkIHRoZSBzYWNyaWZpY2VzIGNsb3RoZWQgaW4gYSBkb3VibGUgcHVycGxlIHJvYmUgdGhhdCB3YXMgZmFzdGVuZWQgd2l0aCBhIGNsYXNwLCBhbmQgY2FycnlpbmcgYSBzcGVhciB0aGF0IHdhcyB3cmVhdGhlZCB3aXRoIGZpbGxldHMgYW5kIGNoYXBsZXRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYSBwZXJmb3JtYW5jZSBhcyB0aGlzIGNhdXNlZCBtYW55IHRvIGRvdWJ0IHdoZXRoZXIgTWFyaXVzLCBpbiBleGhpYml0aW5nIHRoZSB3b21hbiwgcmVhbGx5IGJlbGlldmVkIGluIGhlciwgb3Igd2FzIHByZXRlbmRpbmcgdG8gZG8gc28gYW5kIG1lcmVseSBhY3RlZCBhIHBhcnQgd2l0aCBoZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGhlIGFmZmFpciBvZiB0aGUgdnVsdHVyZXMsIGhvd2V2ZXIsIHdoaWNoIEFsZXhhbmRlciBvZiBNeW5kdXMgcmVsYXRlcywgaXMgY2VydGFpbmx5IHdvbmRlcmZ1bC4gVHdvIHZ1bHR1cmVzIHdlcmUgYWx3YXlzIHNlZW4gaG92ZXJpbmcgYWJvdXQgdGhlIGFybWllcyBvZiBNYXJpdXMgYmVmb3JlIHRoZWlyIHZpY3RvcmllcywgYW5kIGFjY29tcGFuaWVkIHRoZW0gb24gdGhlaXIgam91cm5leXMsIGJlaW5nIHJlY29nbml6ZWQgYnkgYnJvbnplIHJpbmdzIG9uIHRoZWlyIG5lY2tzOyBmb3IgdGhlIHNvbGRpZXJzIGhhZCBjYXVnaHQgdGhlbSwgcHV0IHRoZXNlIHJpbmdzIG9uLCBhbmQgbGV0IHRoZW0gZ28gYWdhaW47IGFuZCBhZnRlciB0aGlzLCBvbiByZWNvZ25pemluZyB0aGUgYmlyZHMsIHRoZSBzb2xkaWVycyBncmVldGVkIHRoZW0sIGFuZCB0aGV5IHdlcmUgZ2xhZCB0byBzZWUgdGhlbSB3aGVuIHRoZXkgc2V0IG91dCB1cG9uIGEgbWFyY2gsIGZlZWxpbmcgc3VyZSBpbiBzdWNoIGNhc2VzIHRoYXQgdGhleSB3b3VsZCBiZSBzdWNjZXNzZnVsLgoJCQk8L3A+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgc2lnbnMgYWxzbyBhcHBlYXJlZCwgbW9zdCBvZiB3aGljaCB3ZXJlIG9mIHRoZSBvcmRpbmFyeSBraW5kOyBidXQgZnJvbSBBbWVyaWEgYW5kIFR1ZGVyLCBjaXRpZXMgb2YgSXRhbHksIGl0IHdhcyByZXBvcnRlZCB0aGF0IGF0IG5pZ2h0IHRoZXJlIGhhZCBiZWVuIHNlZW4gaW4gdGhlIGhlYXZlbnMgZmxhbWluZyBzcGVhcnMsIGFuZCBzaGllbGRzIHdoaWNoIGF0IGZpcnN0IG1vdmVkIGluIGRpZmZlcmVudCBkaXJlY3Rpb25zLCBhbmQgdGhlbiBjbGFzaGVkIHRvZ2V0aGVyLCBhc3N1bWluZyB0aGUgZm9ybWF0aW9ucyBhbmQgbW92ZW1lbnRzIG9mIG1lbiBpbiBiYXR0bGUsIGFuZCBmaW5hbGx5IHNvbWUgb2YgdGhlbSB3b3VsZCBnaXZlIHdheSwgd2hpbGUgb3RoZXJzIHByZXNzZWQgb24gaW4gcHVyc3VpdCwgYW5kIGFsbCBzdHJlYW1lZCBhd2F5IHRvIHRoZSB3ZXN0d2FyZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGFib3V0IHRoaXMgdGltZSBCYXRhY2VzLCB0aGUgcHJpZXN0IG9mIHRoZSBHcmVhdCBNb3RoZXIsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkN5YmVsw6ksIE1vdGhlciBvZiB0aGUgR29kcy4gPC9ub3RlPiBjYW1lIGZyb20gUGVzc2ludXMgYW5ub3VuY2luZyB0aGF0IHRoZSBnb2RkZXNzIGhhZCBkZWNsYXJlZCB0byBoaW0gZnJvbSBoZXIgc2hyaW5lIHRoYXQgdGhlIFJvbWFucyB3ZXJlIHRvIGJlIHZpY3RvcmlvdXMgYW5kIHRyaXVtcGhhbnQgaW4gd2FyLiBUaGUgc2VuYXRlIGdhdmUgY3JlZGVuY2UgdG8gdGhlIHN0b3J5IGFuZCB2b3RlZCB0aGF0IGEgdGVtcGxlIHNob3VsZCBiZSBidWlsdCBmb3IgdGhlIGdvZGRlc3MgaW4gY29tbWVtb3JhdGlvbiBvZiB0aGUgdmljdG9yeTsgYnV0IHdoZW4gQmF0YWNlcyBjYW1lIGJlZm9yZSB0aGUgYXNzZW1ibHkgYW5kIGRlc2lyZWQgdG8gdGVsbCB0aGUgc3RvcnksIEF1bHVzIFBvbXBlaXVzLCBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgcHJldmVudGVkIGhpbSwgY2FsbGluZyBoaW0gYW4gaW1wb3N0b3IsIGFuZCBkcml2aW5nIGhpbSB3aXRoIGluc3VsdHMgZnJvbSB0aGUgcm9zdHJhLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbG8sIHRoaXMgZGlkIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIHRvIGdhaW4gY3JlZGVuY2UgZm9yIHRoZSBtYW4ncyBzdG9yeS4gRm9yIGhhcmRseSBoYWQgQXVsdXMgZ29uZSBiYWNrIHRvIGhpcyBob3VzZSBhZnRlciB0aGUgYXNzZW1ibHkgd2FzIGRpc3NvbHZlZCwgd2hlbiBoZSBicm9rZSBvdXQgd2l0aCBzbyB2aW9sZW50IGEgZmV2ZXIgdGhhdCBoZSBkaWVkIHdpdGhpbiBhIHdlZWssIGFuZCBldmVyeWJvZHkga25ldyBhbmQgdGFsa2VkIGFib3V0IGl0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hbnkgc2lnbnMgYWxzbyBhcHBlYXJlZCwgbW9zdCBvZiB3aGljaCB3ZXJlIG9mIHRoZSBvcmRpbmFyeSBraW5kOyBidXQgZnJvbSBBbWVyaWEgYW5kIFR1ZGVyLCBjaXRpZXMgb2YgSXRhbHksIGl0IHdhcyByZXBvcnRlZCB0aGF0IGF0IG5pZ2h0IHRoZXJlIGhhZCBiZWVuIHNlZW4gaW4gdGhlIGhlYXZlbnMgZmxhbWluZyBzcGVhcnMsIGFuZCBzaGllbGRzIHdoaWNoIGF0IGZpcnN0IG1vdmVkIGluIGRpZmZlcmVudCBkaXJlY3Rpb25zLCBhbmQgdGhlbiBjbGFzaGVkIHRvZ2V0aGVyLCBhc3N1bWluZyB0aGUgZm9ybWF0aW9ucyBhbmQgbW92ZW1lbnRzIG9mIG1lbiBpbiBiYXR0bGUsIGFuZCBmaW5hbGx5IHNvbWUgb2YgdGhlbSB3b3VsZCBnaXZlIHdheSwgd2hpbGUgb3RoZXJzIHByZXNzZWQgb24gaW4gcHVyc3VpdCwgYW5kIGFsbCBzdHJlYW1lZCBhd2F5IHRvIHRoZSB3ZXN0d2FyZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhYm91dCB0aGlzIHRpbWUgQmF0YWNlcywgdGhlIHByaWVzdCBvZiB0aGUgR3JlYXQgTW90aGVyLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkN5YmVsw6ksIE1vdGhlciBvZiB0aGUgR29kcy4gPC9ub3RlPiBjYW1lIGZyb20gUGVzc2ludXMgYW5ub3VuY2luZyB0aGF0IHRoZSBnb2RkZXNzIGhhZCBkZWNsYXJlZCB0byBoaW0gZnJvbSBoZXIgc2hyaW5lIHRoYXQgdGhlIFJvbWFucyB3ZXJlIHRvIGJlIHZpY3RvcmlvdXMgYW5kIHRyaXVtcGhhbnQgaW4gd2FyLiBUaGUgc2VuYXRlIGdhdmUgY3JlZGVuY2UgdG8gdGhlIHN0b3J5IGFuZCB2b3RlZCB0aGF0IGEgdGVtcGxlIHNob3VsZCBiZSBidWlsdCBmb3IgdGhlIGdvZGRlc3MgaW4gY29tbWVtb3JhdGlvbiBvZiB0aGUgdmljdG9yeTsgYnV0IHdoZW4gQmF0YWNlcyBjYW1lIGJlZm9yZSB0aGUgYXNzZW1ibHkgYW5kIGRlc2lyZWQgdG8gdGVsbCB0aGUgc3RvcnksIEF1bHVzIFBvbXBlaXVzLCBhIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZSwgcHJldmVudGVkIGhpbSwgY2FsbGluZyBoaW0gYW4gaW1wb3N0b3IsIGFuZCBkcml2aW5nIGhpbSB3aXRoIGluc3VsdHMgZnJvbSB0aGUgcm9zdHJhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBsbywgdGhpcyBkaWQgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UgdG8gZ2FpbiBjcmVkZW5jZSBmb3IgdGhlIG1hbidzIHN0b3J5LiBGb3IgaGFyZGx5IGhhZCBBdWx1cyBnb25lIGJhY2sgdG8gaGlzIGhvdXNlIGFmdGVyIHRoZSBhc3NlbWJseSB3YXMgZGlzc29sdmVkLCB3aGVuIGhlIGJyb2tlIG91dCB3aXRoIHNvIHZpb2xlbnQgYSBmZXZlciB0aGF0IGhlIGRpZWQgd2l0aGluIGEgd2VlaywgYW5kIGV2ZXJ5Ym9keSBrbmV3IGFuZCB0YWxrZWQgYWJvdXQgaXQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQnV0IHRoZSBUZXV0b25lcywgc2luY2UgTWFyaXVzIGtlcHQgcXVpZXQsIGF0dGVtcHRlZCB0byB0YWtlIGhpcyBjYW1wIGJ5IHN0b3JtOyBtYW55IG1pc3NpbGVzLCBob3dldmVyLCB3ZXJlIGh1cmxlZCBhZ2FpbnN0IHRoZW0gZnJvbSB0aGUgZm9ydGlmaWNhdGlvbnMsIGFuZCB0aGV5IGxvc3Qgc29tZSBvZiB0aGVpciBtZW4uIFRoZXkgdGhlcmVmb3JlIGRlY2lkZWQgdG8gbWFyY2ggZm9yd2FyZCwgZXhwZWN0aW5nIHRvIGNyb3NzIHRoZSBBbHBzIHdpdGhvdXQgbW9sZXN0YXRpb24uIFNvIHRoZXkgcGFja2VkIHVwIHRoZWlyIGJhZ2dhZ2UgYW5kIGJlZ2FuIHRvIG1hcmNoIHBhc3QgdGhlIGNhbXAgb2YgdGhlIFJvbWFucy4gVGhlbiwgaW5kZWVkLCB0aGUgaW1tZW5zaXR5IG9mIHRoZWlyIG51bWJlcnMgd2FzIG1hZGUgc3BlY2lhbGx5IGV2aWRlbnQgYnkgdGhlIGxlbmd0aCBvZiB0aGVpciBsaW5lIGFuZCB0aGUgdGltZSByZXF1aXJlZCBmb3IgdGhlaXIgcGFzc2FnZTsgZm9yIGl0IGlzIHNhaWQgdGhleSB3ZXJlIHNpeCBkYXlzIGluIHBhc3NpbmcgdGhlIGZvcnRpZmljYXRpb25zIG9mIE1hcml1cywgYWx0aG91Z2ggdGhleSBtb3ZlZCBjb250aW51b3VzbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IG1hcmNoZWQgY2xvc2UgdG8gdGhlIGNhbXAsIGlucXVpcmluZyB3aXRoIGxhdWdodGVyIHdoZXRoZXIgdGhlIFJvbWFucyBoYWQgYW55IG1lc3NhZ2VzIGZvciB0aGVpciB3aXZlczsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5mb3IsPC9xPiBzYWlkIHRoZXksIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2Ugc2hhbGwgc29vbiBiZSB3aXRoIHRoZW0uPC9xPiBCdXQgd2hlbiB0aGUgQmFyYmFyaWFucyBoYWQgcGFzc2VkIGJ5IGFuZCB3ZXJlIGdvaW5nIG9uIHRoZWlyIHdheSwgTWFyaXVzIGFsc28gYnJva2UgY2FtcCBhbmQgZm9sbG93ZWQgY2xvc2UgdXBvbiB0aGVtLCBhbHdheXMgaGFsdGluZyBuZWFyIGJ5IGFuZCBhdCB0aGVpciB2ZXJ5IHNpZGUsIGJ1dCBzdHJvbmdseSBmb3J0aWZ5aW5nIGhpcyBjYW1wcyBhbmQga2VlcGluZyBzdHJvbmcgcG9zaXRpb25zIGluIGhpcyBmcm9udCwgc28gdGhhdCBoZSBjb3VsZCBwYXNzIHRoZSBuaWdodCBpbiBzYWZldHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgdGhlIHR3byBhcm1pZXMgd2VudCBvbiB1bnRpbCB0aGV5IGNhbWUgdG8gdGhlIHBsYWNlIGNhbGxlZCBBcXVhZSBTZXh0aWFlLCBmcm9tIHdoaWNoIHRoZXkgaGFkIHRvIG1hcmNoIG9ubHkgYSBzaG9ydCBkaXN0YW5jZSBhbmQgdGhleSB3b3VsZCBiZSBpbiB0aGUgQWxwcy4gRm9yIHRoaXMgcmVhc29uLCBpbmRlZWQsIE1hcml1cyBtYWRlIHByZXBhcmF0aW9ucyB0byBnaXZlIGJhdHRsZSBoZXJlLCBhbmQgaGUgb2NjdXBpZWQgZm9yIGhpcyBjYW1wIGEgcG9zaXRpb24gdGhhdCB3YXMgc3Ryb25nLCBidXQgcG9vcmx5IHN1cHBsaWVkIHdpdGggd2F0ZXIsIHdpc2hpbmcsIGFzIHRoZXkgc2F5LCBieSB0aGlzIGNpcmN1bXN0YW5jZSBhbHNvIHRvIGluY2l0ZSBoaXMgc29sZGllcnMgdG8gZmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCB3aGVuIG1hbnkgb2YgdGhlbSB3ZXJlIGRpc3NhdGlzZmllZCBhbmQgc2FpZCB0aGV5IHdvdWxkIGJlIHRoaXJzdHkgdGhlcmUsIGhlIHBvaW50ZWQgdG8gYSByaXZlciB0aGF0IHJhbiBuZWFyIHRoZSBiYXJiYXJpYW4gZm9ydGlmaWNhdGlvbnMsIGFuZCB0b2xkIHRoZW0gdGhleSBjb3VsZCBnZXQgd2F0ZXIgdGhlcmUsIGJ1dCB0aGUgcHJpY2Ugb2YgaXQgd2FzIGJsb29kLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiw8L3E+IHRoZXkgc2FpZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kb3N0IHRob3Ugbm90IGxlYWQgdXMgYXQgb25jZSBhZ2FpbnN0IHRoZSBlbmVteSwgd2hpbGUgb3VyIGJsb29kIGlzIHN0aWxsIG1vaXN0ID88L3E+IFRvIHdoaWNoIE1hcml1cyBjYWxtbHkgcmVwbGllZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBtdXN0IGZpcnN0IG1ha2Ugb3VyIGNhbXAgc3Ryb25nLjwvcT4gCgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlCdXQgdGhlIFRldXRvbmVzLCBzaW5jZSBNYXJpdXMga2VwdCBxdWlldCwgYXR0ZW1wdGVkIHRvIHRha2UgaGlzIGNhbXAgYnkgc3Rvcm07IG1hbnkgbWlzc2lsZXMsIGhvd2V2ZXIsIHdlcmUgaHVybGVkIGFnYWluc3QgdGhlbSBmcm9tIHRoZSBmb3J0aWZpY2F0aW9ucywgYW5kIHRoZXkgbG9zdCBzb21lIG9mIHRoZWlyIG1lbi4gVGhleSB0aGVyZWZvcmUgZGVjaWRlZCB0byBtYXJjaCBmb3J3YXJkLCBleHBlY3RpbmcgdG8gY3Jvc3MgdGhlIEFscHMgd2l0aG91dCBtb2xlc3RhdGlvbi4gU28gdGhleSBwYWNrZWQgdXAgdGhlaXIgYmFnZ2FnZSBhbmQgYmVnYW4gdG8gbWFyY2ggcGFzdCB0aGUgY2FtcCBvZiB0aGUgUm9tYW5zLiBUaGVuLCBpbmRlZWQsIHRoZSBpbW1lbnNpdHkgb2YgdGhlaXIgbnVtYmVycyB3YXMgbWFkZSBzcGVjaWFsbHkgZXZpZGVudCBieSB0aGUgbGVuZ3RoIG9mIHRoZWlyIGxpbmUgYW5kIHRoZSB0aW1lIHJlcXVpcmVkIGZvciB0aGVpciBwYXNzYWdlOyBmb3IgaXQgaXMgc2FpZCB0aGV5IHdlcmUgc2l4IGRheXMgaW4gcGFzc2luZyB0aGUgZm9ydGlmaWNhdGlvbnMgb2YgTWFyaXVzLCBhbHRob3VnaCB0aGV5IG1vdmVkIGNvbnRpbnVvdXNseS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IG1hcmNoZWQgY2xvc2UgdG8gdGhlIGNhbXAsIGlucXVpcmluZyB3aXRoIGxhdWdodGVyIHdoZXRoZXIgdGhlIFJvbWFucyBoYWQgYW55IG1lc3NhZ2VzIGZvciB0aGVpciB3aXZlczsgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZvciw8L3E+IHNhaWQgdGhleSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPndlIHNoYWxsIHNvb24gYmUgd2l0aCB0aGVtLjwvcT4gQnV0IHdoZW4gdGhlIEJhcmJhcmlhbnMgaGFkIHBhc3NlZCBieSBhbmQgd2VyZSBnb2luZyBvbiB0aGVpciB3YXksIE1hcml1cyBhbHNvIGJyb2tlIGNhbXAgYW5kIGZvbGxvd2VkIGNsb3NlIHVwb24gdGhlbSwgYWx3YXlzIGhhbHRpbmcgbmVhciBieSBhbmQgYXQgdGhlaXIgdmVyeSBzaWRlLCBidXQgc3Ryb25nbHkgZm9ydGlmeWluZyBoaXMgY2FtcHMgYW5kIGtlZXBpbmcgc3Ryb25nIHBvc2l0aW9ucyBpbiBoaXMgZnJvbnQsIHNvIHRoYXQgaGUgY291bGQgcGFzcyB0aGUgbmlnaHQgaW4gc2FmZXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRodXMgdGhlIHR3byBhcm1pZXMgd2VudCBvbiB1bnRpbCB0aGV5IGNhbWUgdG8gdGhlIHBsYWNlIGNhbGxlZCBBcXVhZSBTZXh0aWFlLCBmcm9tIHdoaWNoIHRoZXkgaGFkIHRvIG1hcmNoIG9ubHkgYSBzaG9ydCBkaXN0YW5jZSBhbmQgdGhleSB3b3VsZCBiZSBpbiB0aGUgQWxwcy4gRm9yIHRoaXMgcmVhc29uLCBpbmRlZWQsIE1hcml1cyBtYWRlIHByZXBhcmF0aW9ucyB0byBnaXZlIGJhdHRsZSBoZXJlLCBhbmQgaGUgb2NjdXBpZWQgZm9yIGhpcyBjYW1wIGEgcG9zaXRpb24gdGhhdCB3YXMgc3Ryb25nLCBidXQgcG9vcmx5IHN1cHBsaWVkIHdpdGggd2F0ZXIsIHdpc2hpbmcsIGFzIHRoZXkgc2F5LCBieSB0aGlzIGNpcmN1bXN0YW5jZSBhbHNvIHRvIGluY2l0ZSBoaXMgc29sZGllcnMgdG8gZmlnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCB3aGVuIG1hbnkgb2YgdGhlbSB3ZXJlIGRpc3NhdGlzZmllZCBhbmQgc2FpZCB0aGV5IHdvdWxkIGJlIHRoaXJzdHkgdGhlcmUsIGhlIHBvaW50ZWQgdG8gYSByaXZlciB0aGF0IHJhbiBuZWFyIHRoZSBiYXJiYXJpYW4gZm9ydGlmaWNhdGlvbnMsIGFuZCB0b2xkIHRoZW0gdGhleSBjb3VsZCBnZXQgd2F0ZXIgdGhlcmUsIGJ1dCB0aGUgcHJpY2Ugb2YgaXQgd2FzIGJsb29kLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2h5LCB0aGVuLDwvcT4gdGhleSBzYWlkLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZG9zdCB0aG91IG5vdCBsZWFkIHVzIGF0IG9uY2UgYWdhaW5zdCB0aGUgZW5lbXksIHdoaWxlIG91ciBibG9vZCBpcyBzdGlsbCBtb2lzdCA/PC9xPiBUbyB3aGljaCBNYXJpdXMgY2FsbWx5IHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XZSBtdXN0IGZpcnN0IG1ha2Ugb3VyIGNhbXAgc3Ryb25nLjwvcT4gCgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJSGlzIHNvbGRpZXJzLCBhY2NvcmRpbmdseSwgdGhvdWdoIHJlbHVjdGFudCwgb2JleWVkOyBidXQgdGhlIHRocm9uZyBvZiBjYW1wLXNlcnZhbnRzLCB3aG8gaGFkIG5vIHdhdGVyIGVpdGhlciBmb3IgdGhlbXNlbHZlcyBvciB0aGVpciBiZWFzdHMsIHdlbnQgZG93biBpbiBhIGJvZHkgdG8gdGhlIHJpdmVyLCBzb21lIHRha2luZyBoYXRjaGV0cywgc29tZSBheGVzLCBhbmQgc29tZSBhbHNvIHN3b3JkcyBhbmQgbGFuY2VzIGFsb25nIHdpdGggdGhlaXIgd2F0ZXItamFycywgZGV0ZXJtaW5lZCB0byBnZXQgd2F0ZXIgZXZlbiBpZiB0aGV5IGhhZCB0byBmaWdodCBmb3IgaXQuIFdpdGggdGhlc2Ugb25seSBhIGZldyBvZiB0aGUgZW5lbXkgYXQgZmlyc3QgZW5nYWdlZCwgc2luY2UgdGhlIG1haW4gYm9keSB3ZXJlIHRha2luZyB0aGVpciBtZWFsIGFmdGVyIGJhdGhpbmcsIGFuZCBzb21lIHdlcmUgc3RpbGwgYmF0aGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHN0cmVhbXMgb2Ygd2FybSB3YXRlciBidXJzdCBmcm9tIHRoZSBncm91bmQgaW4gdGhpcyBwbGFjZSwgYW5kIGF0IHRoZXNlIHRoZSBSb21hbnMgc3VycHJpc2VkIGEgbnVtYmVyIG9mIHRoZSBCYXJiYXJpYW5zLCB3aG8gd2VyZSBlbmpveWluZyB0aGVtc2VsdmVzIGFuZCBtYWtpbmcgbWVycnkgaW4gdGhpcyB3b25kZXJmdWxseSBwbGVhc2FudCBwbGFjZS4gVGhlaXIgY3JpZXMgYnJvdWdodCBtb3JlIG9mIHRoZSBCYXJiYXJpYW5zIHRvIHRoZSBzcG90LCBhbmQgTWFyaXVzIGhhZCBkaWZmaWN1bHR5IGluIGxvbmdlciByZXN0cmFpbmluZyBoaXMgc29sZGllcnMsIHNpbmNlIHRoZXkgaGFkIGZlYXJzIG5vdyBmb3IgdGhlaXIgc2VydmFudHMuIEJlc2lkZXMsIHRoZSBtb3N0IHdhcmxpa2UgZGl2aXNpb24gb2YgdGhlIGVuZW15LCBieSB3aG9tIGF0IGFuIGVhcmxpZXIgdGltZSB0aGUgUm9tYW5zIHVuZGVyIE1hbmxpdXMgYW5kIENhZXBpbyBoYWQgYmVlbiBkZWZlYXRlZCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTYuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuIDUgPC9iaWJsPi4gPC9ub3RlPiAodGhleSB3ZXJlIGNhbGxlZCBBbWJyb25lcyBhbmQgb2YgdGhlbXNlbHZlcyBudW1iZXJlZCBtb3JlIHRoYW4gdGhpcnR5IHRob3VzYW5kKSwgaGFkIHNwcnVuZyB1cCBmcm9tIHRoZWlyIG1lYWwgYW5kIHdlcmUgcnVubmluZyB0byBnZXQgdGhlaXIgYXJtcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhvdWdoIHRoZWlyIGJvZGllcyB3ZXJlIHN1cmZlaXRlZCBhbmQgd2VpZ2hlZCBkb3duIHdpdGggZm9vZCBhbmQgdGhlaXIgc3Bpcml0cyBleGNpdGVkIGFuZCBkaXNvcmRlcmVkIHdpdGggc3Ryb25nIHdpbmUsIHRoZXkgZGlkIG5vdCBydXNoIG9uIGluIGEgZGlzb3JkZXJseSBvciBmcmFudGljIGNvdXJzZSwgbm9yIHJhaXNlIGFuIGluYXJ0aWN1bGF0ZSBiYXR0bGUtY3J5LCBidXQgcmh5dGhtaWNhbGx5IGNsYXNoaW5nIHRoZWlyIGFybXMgYW5kIGxlYXBpbmcgdG8gdGhlIHNvdW5kIHRoZXkgd291bGQgZnJlcXVlbnRseSBzaG91dCBvdXQgYWxsIHRvZ2V0aGVyIHRoZWlyIHRyaWJhbCBuYW1lIEFtYnJvbmVzLCBlaXRoZXIgdG8gZW5jb3VyYWdlIG9uZSBhbm90aGVyLCBvciB0byB0ZXJyaWZ5IHRoZWlyIGVuZW1pZXMgaW4gYWR2YW5jZSBieSB0aGUgZGVjbGFyYXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBvZiB0aGUgSXRhbGlhbnMgdG8gZ28gZG93biBhZ2FpbnN0IHRoZW0gd2VyZSB0aGUgTGlndXJpYW5zLCBhbmQgd2hlbiB0aGV5IGhlYXJkIGFuZCB1bmRlcnN0b29kIHdoYXQgdGhlIEJhcmJhcmlhbnMgd2VyZSBzaG91dGluZywgdGhleSB0aGVtc2VsdmVzIHNob3V0ZWQgYmFjayB0aGUgd29yZCwgY2xhaW1pbmcgaXQgYXMgdGhlaXIgb3duIGFuY2VzdHJhbCBhcHBlbGxhdGlvbjsgZm9yIHRoZSBMaWd1cmlhbnMgY2FsbCB0aGVtc2VsdmVzIEFtYnJvbmVzIGJ5IGRlc2NlbnQuIE9mdGVuLCB0aGVuLCBkaWQgdGhlIHNob3V0IGVjaG8gYW5kIHJlZWNobyBmcm9tIGVpdGhlciBzaWRlIGJlZm9yZSB0aGV5IGNhbWUgdG8gY2xvc2UgcXVhcnRlcnM7IGFuZCBzaW5jZSB0aGUgaG9zdHMgYmFjayBvZiBlYWNoIHBhcnR5IHRvb2sgdXAgdGhlIGNyeSBieSB0dXJucyBhbmQgc3Ryb3ZlIGVhY2ggdG8gb3V0ZG8gdGhlIG90aGVyIGZpcnN0IGluIHRoZSBtYWduaXR1ZGUgb2YgdGhlaXIgc2hvdXQsIHRoZWlyIGNyaWVzIHJvdXNlZCBhbmQgZmlyZWQgdGhlIHNwaXJpdCBvZiB0aGUgY29tYmF0YW50cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlIaXMgc29sZGllcnMsIGFjY29yZGluZ2x5LCB0aG91Z2ggcmVsdWN0YW50LCBvYmV5ZWQ7IGJ1dCB0aGUgdGhyb25nIG9mIGNhbXAtc2VydmFudHMsIHdobyBoYWQgbm8gd2F0ZXIgZWl0aGVyIGZvciB0aGVtc2VsdmVzIG9yIHRoZWlyIGJlYXN0cywgd2VudCBkb3duIGluIGEgYm9keSB0byB0aGUgcml2ZXIsIHNvbWUgdGFraW5nIGhhdGNoZXRzLCBzb21lIGF4ZXMsIGFuZCBzb21lIGFsc28gc3dvcmRzIGFuZCBsYW5jZXMgYWxvbmcgd2l0aCB0aGVpciB3YXRlci1qYXJzLCBkZXRlcm1pbmVkIHRvIGdldCB3YXRlciBldmVuIGlmIHRoZXkgaGFkIHRvIGZpZ2h0IGZvciBpdC4gV2l0aCB0aGVzZSBvbmx5IGEgZmV3IG9mIHRoZSBlbmVteSBhdCBmaXJzdCBlbmdhZ2VkLCBzaW5jZSB0aGUgbWFpbiBib2R5IHdlcmUgdGFraW5nIHRoZWlyIG1lYWwgYWZ0ZXIgYmF0aGluZywgYW5kIHNvbWUgd2VyZSBzdGlsbCBiYXRoaW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBzdHJlYW1zIG9mIHdhcm0gd2F0ZXIgYnVyc3QgZnJvbSB0aGUgZ3JvdW5kIGluIHRoaXMgcGxhY2UsIGFuZCBhdCB0aGVzZSB0aGUgUm9tYW5zIHN1cnByaXNlZCBhIG51bWJlciBvZiB0aGUgQmFyYmFyaWFucywgd2hvIHdlcmUgZW5qb3lpbmcgdGhlbXNlbHZlcyBhbmQgbWFraW5nIG1lcnJ5IGluIHRoaXMgd29uZGVyZnVsbHkgcGxlYXNhbnQgcGxhY2UuIFRoZWlyIGNyaWVzIGJyb3VnaHQgbW9yZSBvZiB0aGUgQmFyYmFyaWFucyB0byB0aGUgc3BvdCwgYW5kIE1hcml1cyBoYWQgZGlmZmljdWx0eSBpbiBsb25nZXIgcmVzdHJhaW5pbmcgaGlzIHNvbGRpZXJzLCBzaW5jZSB0aGV5IGhhZCBmZWFycyBub3cgZm9yIHRoZWlyIHNlcnZhbnRzLiBCZXNpZGVzLCB0aGUgbW9zdCB3YXJsaWtlIGRpdmlzaW9uIG9mIHRoZSBlbmVteSwgYnkgd2hvbSBhdCBhbiBlYXJsaWVyIHRpbWUgdGhlIFJvbWFucyB1bmRlciBNYW5saXVzIGFuZCBDYWVwaW8gaGFkIGJlZW4gZGVmZWF0ZWQgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxNi41IiB2YWxpZD0ieWVzIj5jaGFwdGVyIHh2aS4gNSA8L2JpYmw+LiA8L25vdGU+ICh0aGV5IHdlcmUgY2FsbGVkIEFtYnJvbmVzIGFuZCBvZiB0aGVtc2VsdmVzIG51bWJlcmVkIG1vcmUgdGhhbiB0aGlydHkgdGhvdXNhbmQpLCBoYWQgc3BydW5nIHVwIGZyb20gdGhlaXIgbWVhbCBhbmQgd2VyZSBydW5uaW5nIHRvIGdldCB0aGVpciBhcm1zLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTYuNSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4dmkuIDUgPC9iaWJsPi4gPC90cmFuc2xhdGlvbj4="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRob3VnaCB0aGVpciBib2RpZXMgd2VyZSBzdXJmZWl0ZWQgYW5kIHdlaWdoZWQgZG93biB3aXRoIGZvb2QgYW5kIHRoZWlyIHNwaXJpdHMgZXhjaXRlZCBhbmQgZGlzb3JkZXJlZCB3aXRoIHN0cm9uZyB3aW5lLCB0aGV5IGRpZCBub3QgcnVzaCBvbiBpbiBhIGRpc29yZGVybHkgb3IgZnJhbnRpYyBjb3Vyc2UsIG5vciByYWlzZSBhbiBpbmFydGljdWxhdGUgYmF0dGxlLWNyeSwgYnV0IHJoeXRobWljYWxseSBjbGFzaGluZyB0aGVpciBhcm1zIGFuZCBsZWFwaW5nIHRvIHRoZSBzb3VuZCB0aGV5IHdvdWxkIGZyZXF1ZW50bHkgc2hvdXQgb3V0IGFsbCB0b2dldGhlciB0aGVpciB0cmliYWwgbmFtZSBBbWJyb25lcywgZWl0aGVyIHRvIGVuY291cmFnZSBvbmUgYW5vdGhlciwgb3IgdG8gdGVycmlmeSB0aGVpciBlbmVtaWVzIGluIGFkdmFuY2UgYnkgdGhlIGRlY2xhcmF0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBvZiB0aGUgSXRhbGlhbnMgdG8gZ28gZG93biBhZ2FpbnN0IHRoZW0gd2VyZSB0aGUgTGlndXJpYW5zLCBhbmQgd2hlbiB0aGV5IGhlYXJkIGFuZCB1bmRlcnN0b29kIHdoYXQgdGhlIEJhcmJhcmlhbnMgd2VyZSBzaG91dGluZywgdGhleSB0aGVtc2VsdmVzIHNob3V0ZWQgYmFjayB0aGUgd29yZCwgY2xhaW1pbmcgaXQgYXMgdGhlaXIgb3duIGFuY2VzdHJhbCBhcHBlbGxhdGlvbjsgZm9yIHRoZSBMaWd1cmlhbnMgY2FsbCB0aGVtc2VsdmVzIEFtYnJvbmVzIGJ5IGRlc2NlbnQuIE9mdGVuLCB0aGVuLCBkaWQgdGhlIHNob3V0IGVjaG8gYW5kIHJlZWNobyBmcm9tIGVpdGhlciBzaWRlIGJlZm9yZSB0aGV5IGNhbWUgdG8gY2xvc2UgcXVhcnRlcnM7IGFuZCBzaW5jZSB0aGUgaG9zdHMgYmFjayBvZiBlYWNoIHBhcnR5IHRvb2sgdXAgdGhlIGNyeSBieSB0dXJucyBhbmQgc3Ryb3ZlIGVhY2ggdG8gb3V0ZG8gdGhlIG90aGVyIGZpcnN0IGluIHRoZSBtYWduaXR1ZGUgb2YgdGhlaXIgc2hvdXQsIHRoZWlyIGNyaWVzIHJvdXNlZCBhbmQgZmlyZWQgdGhlIHNwaXJpdCBvZiB0aGUgY29tYmF0YW50cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgdGhlIEFtYnJvbmVzIGJlY2FtZSBzZXBhcmF0ZWQgYnkgdGhlIHN0cmVhbTsgZm9yIHRoZXkgZGlkIG5vdCBhbGwgc3VjY2VlZCBpbiBnZXR0aW5nIGFjcm9zcyBhbmQgZm9ybWluZyBhbiBhcnJheSwgYnV0IHVwb24gdGhlIGZvcmVtb3N0IG9mIHRoZW0gdGhlIExpZ3VyaWFucyBhdCBvbmNlIGZlbGwgd2l0aCBhIHJ1c2gsIGFuZCB0aGUgZmlnaHRpbmcgd2FzIGhhbmQtdG8taGFuZC4gVGhlbiB0aGUgUm9tYW5zIGNhbWUgdG8gdGhlIGFpZCBvZiB0aGUgTGlndXJpYW5zLCBhbmQgY2hhcmdpbmcgZG93biBmcm9tIHRoZSBoZWlnaHRzIHVwb24gdGhlIEJhcmJhcmlhbnMgb3ZlcndoZWxtZWQgYW5kIHR1cm5lZCB0aGVtIGJhY2suIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIEFtYnJvbmVzIHdlcmUgY3V0IGRvd24gdGhlcmUgaW4gdGhlIHN0cmVhbSB3aGVyZSB0aGV5IHdlcmUgYWxsIGNyb3dkZWQgdG9nZXRoZXIsIGFuZCB0aGUgcml2ZXIgd2FzIGZpbGxlZCB3aXRoIHRoZWlyIGJsb29kIGFuZCB0aGVpciBkZWFkIGJvZGllczsgdGhlIHJlc3QsIGFmdGVyIHRoZSBSb21hbnMgaGFkIGNyb3NzZWQsIGRpZCBub3QgZGFyZSB0byBmYWNlIGFib3V0LCBhbmQgdGhlIFJvbWFucyBrZXB0IHNsYXlpbmcgdGhlbSB1bnRpbCB0aGV5IGNhbWUgaW4gdGhlaXIgZmxpZ2h0IHRvIHRoZWlyIGNhbXAgYW5kIHdhZ2dvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgdGhlIHdvbWVuIG1ldCB0aGVtLCBzd29yZHMgYW5kIGF4ZXMgaW4gdGhlaXIgaGFuZHMsIGFuZCB3aXRoIGhpZGVvdXMgc2hyaWVrcyBvZiByYWdlIHRyaWVkIHRvIGRyaXZlIGJhY2sgZnVnaXRpdmVzIGFuZCBwdXJzdWVycyBhbGlrZSwgdGhlIGZ1Z2l0aXZlcyBhcyB0cmFpdG9ycywgYW5kIHRoZSBwdXJzdWVycyBhcyBmb2VzOyB0aGV5IG1peGVkIHRoZW1zZWx2ZXMgdXAgd2l0aCB0aGUgY29tYmF0YW50cywgd2l0aCBiYXJlIGhhbmRzIHRvcmUgYXdheSB0aGUgc2hpZWxkcyBvZiB0aGUgUm9tYW5zIG9yIGdyYXNwZWQgdGhlaXIgc3dvcmRzLCBhbmQgZW5kdXJlZCB3b3VuZHMgYW5kIG11dGlsYXRpb25zLCB0aGVpciBmaWVyY2Ugc3Bpcml0cyB1bnZhbnF1aXNoZWQgdG8gdGhlIGVuZC4gU28sIHRoZW4sIGFzIHdlIGFyZSB0b2xkLCB0aGUgYmF0dGxlIGF0IHRoZSByaXZlciB3YXMgYnJvdWdodCBvbiBieSBhY2NpZGVudCByYXRoZXIgdGhhbiBieSB0aGUgaW50ZW50aW9uIG9mIHRoZSBjb21tYW5kZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIHRoZSBBbWJyb25lcyBiZWNhbWUgc2VwYXJhdGVkIGJ5IHRoZSBzdHJlYW07IGZvciB0aGV5IGRpZCBub3QgYWxsIHN1Y2NlZWQgaW4gZ2V0dGluZyBhY3Jvc3MgYW5kIGZvcm1pbmcgYW4gYXJyYXksIGJ1dCB1cG9uIHRoZSBmb3JlbW9zdCBvZiB0aGVtIHRoZSBMaWd1cmlhbnMgYXQgb25jZSBmZWxsIHdpdGggYSBydXNoLCBhbmQgdGhlIGZpZ2h0aW5nIHdhcyBoYW5kLXRvLWhhbmQuIFRoZW4gdGhlIFJvbWFucyBjYW1lIHRvIHRoZSBhaWQgb2YgdGhlIExpZ3VyaWFucywgYW5kIGNoYXJnaW5nIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyB1cG9uIHRoZSBCYXJiYXJpYW5zIG92ZXJ3aGVsbWVkIGFuZCB0dXJuZWQgdGhlbSBiYWNrLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1vc3Qgb2YgdGhlIEFtYnJvbmVzIHdlcmUgY3V0IGRvd24gdGhlcmUgaW4gdGhlIHN0cmVhbSB3aGVyZSB0aGV5IHdlcmUgYWxsIGNyb3dkZWQgdG9nZXRoZXIsIGFuZCB0aGUgcml2ZXIgd2FzIGZpbGxlZCB3aXRoIHRoZWlyIGJsb29kIGFuZCB0aGVpciBkZWFkIGJvZGllczsgdGhlIHJlc3QsIGFmdGVyIHRoZSBSb21hbnMgaGFkIGNyb3NzZWQsIGRpZCBub3QgZGFyZSB0byBmYWNlIGFib3V0LCBhbmQgdGhlIFJvbWFucyBrZXB0IHNsYXlpbmcgdGhlbSB1bnRpbCB0aGV5IGNhbWUgaW4gdGhlaXIgZmxpZ2h0IHRvIHRoZWlyIGNhbXAgYW5kIHdhZ2dvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgdGhlIHdvbWVuIG1ldCB0aGVtLCBzd29yZHMgYW5kIGF4ZXMgaW4gdGhlaXIgaGFuZHMsIGFuZCB3aXRoIGhpZGVvdXMgc2hyaWVrcyBvZiByYWdlIHRyaWVkIHRvIGRyaXZlIGJhY2sgZnVnaXRpdmVzIGFuZCBwdXJzdWVycyBhbGlrZSwgdGhlIGZ1Z2l0aXZlcyBhcyB0cmFpdG9ycywgYW5kIHRoZSBwdXJzdWVycyBhcyBmb2VzOyB0aGV5IG1peGVkIHRoZW1zZWx2ZXMgdXAgd2l0aCB0aGUgY29tYmF0YW50cywgd2l0aCBiYXJlIGhhbmRzIHRvcmUgYXdheSB0aGUgc2hpZWxkcyBvZiB0aGUgUm9tYW5zIG9yIGdyYXNwZWQgdGhlaXIgc3dvcmRzLCBhbmQgZW5kdXJlZCB3b3VuZHMgYW5kIG11dGlsYXRpb25zLCB0aGVpciBmaWVyY2Ugc3Bpcml0cyB1bnZhbnF1aXNoZWQgdG8gdGhlIGVuZC4gU28sIHRoZW4sIGFzIHdlIGFyZSB0b2xkLCB0aGUgYmF0dGxlIGF0IHRoZSByaXZlciB3YXMgYnJvdWdodCBvbiBieSBhY2NpZGVudCByYXRoZXIgdGhhbiBieSB0aGUgaW50ZW50aW9uIG9mIHRoZSBjb21tYW5kZXIuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGRlc3Ryb3lpbmcgbWFueSBvZiB0aGUgQW1icm9uZXMgdGhlIFJvbWFucyB3aXRoZHJldyBhbmQgbmlnaHQgY2FtZSBvbjsgYnV0IGluIHNwaXRlIG9mIHNvIGdyZWF0IGEgc3VjY2VzcyB0aGUgYXJteSBkaWQgbm90IGluZHVsZ2UgaW4gcGFlYW5zIG9mIHZpY3RvcnksIG9yIGRyaW5raW5nIGluIHRoZSB0ZW50cywgb3IgZnJpZW5kbHkgY29udmVyc2Ugb3ZlciBzdXBwZXJzLCBvciB0aGF0IHN3ZWV0ZXN0IG9mIGFsbCBkZWxpZ2h0cyBmb3IgbWVuIHdobyBoYXZlIGZvdWdodCBhbmQgd29uIGEgYmF0dGxlLCBnZW50bGUgc2xlZXAsIGJ1dCB0aGF0IG5pZ2h0IG1vcmUgdGhhbiBhbnkgb3RoZXIgd2FzIHNwZW50IGluIGZlYXJzIGFuZCBjb21tb3Rpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlaXIgY2FtcCB3YXMgc3RpbGwgd2l0aG91dCBwYWxpc2FkZSBvciB3YWxsLCBhbmQgdGhlcmUgd2VyZSBzdGlsbCBsZWZ0IG1hbnkgbXlyaWFkcyBvZiB0aGUgQmFyYmFyaWFucyB3aG8gaGFkIG1ldCB3aXRoIG5vIGRlZmVhdC4gVGhlc2UgaGFkIGJlZW4gam9pbmVkIGJ5IGFsbCB0aGUgQW1icm9uZXMgd2hvIHN1cnZpdmVkIHRoZSBiYXR0bGUsIGFuZCB0aGVyZSB3YXMgbGFtZW50YXRpb24gYW1vbmcgdGhlbSBhbGwgbmlnaHQgbG9uZywgbm90IGxpa2UgdGhlIHdhaWxpbmdzIGFuZCBncm9hbnMgb2YgbWVuLCBidXQgaG93bGluZ3MgYW5kIGJlbGxvd2luZ3Mgd2l0aCBhIHN0cmFpbiBvZiB0aGUgd2lsZCBiZWFzdCBpbiB0aGVtLCBtaW5nbGVkIHdpdGggdGhyZWF0cyBhbmQgY3JpZXMgb2YgZ3JpZWYsIHdlbnQgdXAgZnJvbSB0aGlzIHZhc3QgbXVsdGl0dWRlIGFuZCBlY2hvZWQgYW1vbmcgdGhlIHN1cnJvdW5kaW5nIGhpbGxzIGFuZCBvdmVyIHRoZSByaXZlciB2YWxsZXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aG9sZSBwbGFpbiB3YXMgZmlsbGVkIHdpdGggYW4gYXdmdWwgZGluLCB0aGUgUm9tYW5zIHdpdGggZmVhciwgYW5kIGV2ZW4gTWFyaXVzIGhpbXNlbGYgd2l0aCBjb25zdGVybmF0aW9uIGFzIGhlIGF3YWl0ZWQgc29tZSBkaXNvcmRlcmx5IGFuZCBjb25mdXNlZCBuaWdodC1iYXR0bGUuIEhvd2V2ZXIsIHRoZSBCYXJiYXJpYW5zIG1hZGUgbm8gYXR0YWNrIGVpdGhlciBkdXJpbmcgdGhhdCBuaWdodCBvciB0aGUgZm9sbG93aW5nIGRheSwgYnV0IHNwZW50IHRoZSB0aW1lIGluIG1hcnNoYWxsaW5nIHRoZWlyIGZvcmNlcyBhbmQgbWFraW5nIHByZXBhcmF0aW9ucy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgZGVzdHJveWluZyBtYW55IG9mIHRoZSBBbWJyb25lcyB0aGUgUm9tYW5zIHdpdGhkcmV3IGFuZCBuaWdodCBjYW1lIG9uOyBidXQgaW4gc3BpdGUgb2Ygc28gZ3JlYXQgYSBzdWNjZXNzIHRoZSBhcm15IGRpZCBub3QgaW5kdWxnZSBpbiBwYWVhbnMgb2YgdmljdG9yeSwgb3IgZHJpbmtpbmcgaW4gdGhlIHRlbnRzLCBvciBmcmllbmRseSBjb252ZXJzZSBvdmVyIHN1cHBlcnMsIG9yIHRoYXQgc3dlZXRlc3Qgb2YgYWxsIGRlbGlnaHRzIGZvciBtZW4gd2hvIGhhdmUgZm91Z2h0IGFuZCB3b24gYSBiYXR0bGUsIGdlbnRsZSBzbGVlcCwgYnV0IHRoYXQgbmlnaHQgbW9yZSB0aGFuIGFueSBvdGhlciB3YXMgc3BlbnQgaW4gZmVhcnMgYW5kIGNvbW1vdGlvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVpciBjYW1wIHdhcyBzdGlsbCB3aXRob3V0IHBhbGlzYWRlIG9yIHdhbGwsIGFuZCB0aGVyZSB3ZXJlIHN0aWxsIGxlZnQgbWFueSBteXJpYWRzIG9mIHRoZSBCYXJiYXJpYW5zIHdobyBoYWQgbWV0IHdpdGggbm8gZGVmZWF0LiBUaGVzZSBoYWQgYmVlbiBqb2luZWQgYnkgYWxsIHRoZSBBbWJyb25lcyB3aG8gc3Vydml2ZWQgdGhlIGJhdHRsZSwgYW5kIHRoZXJlIHdhcyBsYW1lbnRhdGlvbiBhbW9uZyB0aGVtIGFsbCBuaWdodCBsb25nLCBub3QgbGlrZSB0aGUgd2FpbGluZ3MgYW5kIGdyb2FucyBvZiBtZW4sIGJ1dCBob3dsaW5ncyBhbmQgYmVsbG93aW5ncyB3aXRoIGEgc3RyYWluIG9mIHRoZSB3aWxkIGJlYXN0IGluIHRoZW0sIG1pbmdsZWQgd2l0aCB0aHJlYXRzIGFuZCBjcmllcyBvZiBncmllZiwgd2VudCB1cCBmcm9tIHRoaXMgdmFzdCBtdWx0aXR1ZGUgYW5kIGVjaG9lZCBhbW9uZyB0aGUgc3Vycm91bmRpbmcgaGlsbHMgYW5kIG92ZXIgdGhlIHJpdmVyIHZhbGxleS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aG9sZSBwbGFpbiB3YXMgZmlsbGVkIHdpdGggYW4gYXdmdWwgZGluLCB0aGUgUm9tYW5zIHdpdGggZmVhciwgYW5kIGV2ZW4gTWFyaXVzIGhpbXNlbGYgd2l0aCBjb25zdGVybmF0aW9uIGFzIGhlIGF3YWl0ZWQgc29tZSBkaXNvcmRlcmx5IGFuZCBjb25mdXNlZCBuaWdodC1iYXR0bGUuIEhvd2V2ZXIsIHRoZSBCYXJiYXJpYW5zIG1hZGUgbm8gYXR0YWNrIGVpdGhlciBkdXJpbmcgdGhhdCBuaWdodCBvciB0aGUgZm9sbG93aW5nIGRheSwgYnV0IHNwZW50IHRoZSB0aW1lIGluIG1hcnNoYWxsaW5nIHRoZWlyIGZvcmNlcyBhbmQgbWFraW5nIHByZXBhcmF0aW9ucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBzaW5jZSB0aGUgcG9zaXRpb24gb2YgdGhlIEJhcmJhcmlhbnMgd2FzIGNvbW1hbmRlZCBieSBzbG9waW5nIGdsZW5zIGFuZCByYXZpbmVzIHRoYXQgd2VyZSBzaGFkZWQgYnkgdHJlZXMsIE1hcml1cyBzZW50IENsYXVkaXVzIE1hcmNlbGx1cyB0aGl0aGVyIHdpdGggdGhyZWUgdGhvdXNhbmQgbWVuLWF0LWFybXMsIHVuZGVyIG9yZGVycyB0byBsaWUgY29uY2VhbGVkIGluIGFtYnVzaCB1bnRpbCB0aGUgYmF0dGxlIHdhcyBvbiwgYW5kIHRoZW4gdG8gc2hvdyB0aGVtc2VsdmVzIGluIHRoZSBlbmVteSdzIHJlYXIuIFRoZSByZXN0IG9mIGhpcyBzb2xkaWVycywgd2hvIGhhZCB0YWtlbiBzdXBwZXIgaW4gZ29vZCBzZWFzb24gYW5kIHRoZW4gZ290IGEgbmlnaHQncyBzbGVlcCwgaGUgbGVkIG91dCBhdCBkYXktYnJlYWsgYW5kIGRyZXcgdXAgaW4gZnJvbnQgb2YgdGhlIGNhbXAsIGFuZCBzZW50IG91dCBoaXMgY2F2YWxyeSBpbnRvIHRoZSBwbGFpbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFRldXRvbmVzLCBzZWVpbmcgdGhpcywgY291bGQgbm90IHdhaXQgZm9yIHRoZSBSb21hbnMgdG8gY29tZSBkb3duIGFuZCBmaWdodCB3aXRoIHRoZW0gb24gZXF1YWwgdGVybXMsIGJ1dCBxdWlja2x5IGFuZCB3cmF0aGZ1bGx5IGFybWVkIHRoZW1zZWx2ZXMgYW5kIGNoYXJnZWQgdXAgdGhlIGhpbGwuIEJ1dCBNYXJpdXMsIHNlbmRpbmcgaGlzIG9mZmljZXJzIHRvIGFsbCBwYXJ0cyBvZiB0aGUgbGluZSwgZXhob3J0ZWQgdGhlIHNvbGRpZXJzIHRvIHN0YW5kIGZpcm1seSBpbiB0aGVpciBsaW5lcywgYW5kIHdoZW4gdGhlIGVuZW15IGhhZCBnb3Qgd2l0aGluIHJlYWNoIHRvIGh1cmwgdGhlaXIgamF2ZWxpbnMsIHRoZW4gdGFrZSB0byB0aGVpciBzd29yZHMgYW5kIGNyb3dkIHRoZSBCYXJiYXJpYW5zIGJhY2sgd2l0aCB0aGVpciBzaGllbGRzOyAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5mb3Igc2luY2UgdGhlIGVuZW15IHdlcmUgb24gcHJlY2FyaW91cyBncm91bmQgdGhlaXIgYmxvd3Mgd291bGQgaGF2ZSBubyBmb3JjZSBhbmQgdGhlIGxvY2tpbmcgb2YgdGhlaXIgc2hpZWxkcyBubyBzdHJlbmd0aCwgYnV0IHRoZSB1bmV2ZW5uZXNzIG9mIHRoZSBncm91bmQgd291bGQga2VlcCB0aGVtIHR1cm5pbmcgYW5kIHRvc3NpbmcgYWJvdXQuIFRoaXMgd2FzIHRoZSBhZHZpY2UgaGUgZ2F2ZSBoaXMgbWVuLCBhbmQgdGhleSBzYXcgdGhhdCBoZSB3YXMgZmlyc3QgdG8gYWN0IGFjY29yZGluZ2x5OyBmb3IgaGUgd2FzIGluIGJldHRlciB0cmFpbmluZyB0aGFuIGFueSBvZiB0aGVtLCBhbmQgaW4gZGFyaW5nIGZhciBzdXJwYXNzZWQgdGhlbSBhbGwuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSwgc2luY2UgdGhlIHBvc2l0aW9uIG9mIHRoZSBCYXJiYXJpYW5zIHdhcyBjb21tYW5kZWQgYnkgc2xvcGluZyBnbGVucyBhbmQgcmF2aW5lcyB0aGF0IHdlcmUgc2hhZGVkIGJ5IHRyZWVzLCBNYXJpdXMgc2VudCBDbGF1ZGl1cyBNYXJjZWxsdXMgdGhpdGhlciB3aXRoIHRocmVlIHRob3VzYW5kIG1lbi1hdC1hcm1zLCB1bmRlciBvcmRlcnMgdG8gbGllIGNvbmNlYWxlZCBpbiBhbWJ1c2ggdW50aWwgdGhlIGJhdHRsZSB3YXMgb24sIGFuZCB0aGVuIHRvIHNob3cgdGhlbXNlbHZlcyBpbiB0aGUgZW5lbXkncyByZWFyLiBUaGUgcmVzdCBvZiBoaXMgc29sZGllcnMsIHdobyBoYWQgdGFrZW4gc3VwcGVyIGluIGdvb2Qgc2Vhc29uIGFuZCB0aGVuIGdvdCBhIG5pZ2h0J3Mgc2xlZXAsIGhlIGxlZCBvdXQgYXQgZGF5LWJyZWFrIGFuZCBkcmV3IHVwIGluIGZyb250IG9mIHRoZSBjYW1wLCBhbmQgc2VudCBvdXQgaGlzIGNhdmFscnkgaW50byB0aGUgcGxhaW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBUZXV0b25lcywgc2VlaW5nIHRoaXMsIGNvdWxkIG5vdCB3YWl0IGZvciB0aGUgUm9tYW5zIHRvIGNvbWUgZG93biBhbmQgZmlnaHQgd2l0aCB0aGVtIG9uIGVxdWFsIHRlcm1zLCBidXQgcXVpY2tseSBhbmQgd3JhdGhmdWxseSBhcm1lZCB0aGVtc2VsdmVzIGFuZCBjaGFyZ2VkIHVwIHRoZSBoaWxsLiBCdXQgTWFyaXVzLCBzZW5kaW5nIGhpcyBvZmZpY2VycyB0byBhbGwgcGFydHMgb2YgdGhlIGxpbmUsIGV4aG9ydGVkIHRoZSBzb2xkaWVycyB0byBzdGFuZCBmaXJtbHkgaW4gdGhlaXIgbGluZXMsIGFuZCB3aGVuIHRoZSBlbmVteSBoYWQgZ290IHdpdGhpbiByZWFjaCB0byBodXJsIHRoZWlyIGphdmVsaW5zLCB0aGVuIHRha2UgdG8gdGhlaXIgc3dvcmRzIGFuZCBjcm93ZCB0aGUgQmFyYmFyaWFucyBiYWNrIHdpdGggdGhlaXIgc2hpZWxkczsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['20.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmZvciBzaW5jZSB0aGUgZW5lbXkgd2VyZSBvbiBwcmVjYXJpb3VzIGdyb3VuZCB0aGVpciBibG93cyB3b3VsZCBoYXZlIG5vIGZvcmNlIGFuZCB0aGUgbG9ja2luZyBvZiB0aGVpciBzaGllbGRzIG5vIHN0cmVuZ3RoLCBidXQgdGhlIHVuZXZlbm5lc3Mgb2YgdGhlIGdyb3VuZCB3b3VsZCBrZWVwIHRoZW0gdHVybmluZyBhbmQgdG9zc2luZyBhYm91dC4gVGhpcyB3YXMgdGhlIGFkdmljZSBoZSBnYXZlIGhpcyBtZW4sIGFuZCB0aGV5IHNhdyB0aGF0IGhlIHdhcyBmaXJzdCB0byBhY3QgYWNjb3JkaW5nbHk7IGZvciBoZSB3YXMgaW4gYmV0dGVyIHRyYWluaW5nIHRoYW4gYW55IG9mIHRoZW0sIGFuZCBpbiBkYXJpbmcgZmFyIHN1cnBhc3NlZCB0aGVtIGFsbC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBSb21hbnMgYXdhaXRlZCB0aGUgZW5lbXkncyBvbnNldCwgdGhlbiBjbG9zZWQgd2l0aCB0aGVtIGFuZCBjaGVja2VkIHRoZWlyIHVwd2FyZCBydXNoLCBhbmQgYXQgbGFzdCwgY3Jvd2RpbmcgdGhlbSBiYWNrIGxpdHRsZSBieSBsaXR0bGUsIGZvcmNlZCB0aGVtIGludG8gdGhlIHBsYWluLiBIZXJlLCB3aGlsZSB0aGUgQmFyYmFyaWFucyBpbiBmcm9udCB3ZXJlIGF0IGxhc3QgZm9ybWluZyBpbiBsaW5lIG9uIGxldmVsIGdyb3VuZCwgdGhlcmUgd2FzIHNob3V0aW5nIGFuZCBjb21tb3Rpb24gaW4gdGhlaXIgcmVhci4gRm9yIE1hcmNlbGx1cyBoYWQgd2F0Y2hlZCBoaXMgb3Bwb3J0dW5pdHksIGFuZCB3aGVuIHRoZSBjcmllcyBvZiBiYXR0bGUgd2VyZSBib3JuZSB1cCBvdmVyIHRoZSBoaWxscyBoZSBwdXQgaGlzIG1lbiB1cG9uIHRoZSBydW4gYW5kIGZlbGwgd2l0aCBsb3VkIHNob3V0cyB1cG9uIHRoZSBlbmVteSdzIHJlYXIsIHdoZXJlIGhlIGN1dCBkb3duIHRoZSBoaW5kbW9zdCBvZiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSBpbiB0aGUgcmVhciBmb3JjZWQgYWxvbmcgdGhvc2Ugd2hvIHdlcmUgaW4gZnJvbnQgb2YgdGhlbSwgYW5kIHF1aWNrbHkgcGx1bmdlZCB0aGUgd2hvbGUgYXJteSBpbnRvIGNvbmZ1c2lvbiwgYW5kIHVuZGVyIHRoaXMgZG91YmxlIGF0dGFjayB0aGV5IGNvdWxkIHJpb3QgaG9sZCBvdXQgbG9uZywgYnV0IGJyb2tlIHJhbmtzIGFuZCBmbGVkLiBUaGUgUm9tYW5zIHB1cnN1ZWQgdGhlbSBhbmQgZWl0aGVyIHNsZXcgb3IgdG9vayBhbGl2ZSBvdmVyIGEgaHVuZHJlZCB0aG91c2FuZCBvZiB0aGVtLCBiZXNpZGVzIG1ha2luZyB0aGVtc2VsdmVzIG1hc3RlcnMgb2YgdGhlaXIgdGVudHMsIHdhZ2dvbnMsIGFuZCBwcm9wZXJ0eSwgYWxsIG9mIHdoaWNoLCB3aXRoIHRoZSBleGNlcHRpb24gb2Ygd2hhdCB3YXMgcGlsZmVyZWQsIHdhcyBnaXZlbiB0byBNYXJpdXMgYnkgdm90ZSBvZiB0aGUgc29sZGllcnMuIEFuZCB0aG91Z2ggdGhlIGdpZnQgdGhhdCBoZSByZWNlaXZlZCB3YXMgc28gc3BsZW5kaWQsIGl0IHdhcyB0aG91Z2h0IHRvIGJlIHdob2xseSB1bndvcnRoeSBvZiBoaXMgc2VydmljZXMgaW4gdGhlIGNhbXBhaWduLCB3aGVyZSB0aGUgZGFuZ2VyIHRoYXQgdGhyZWF0ZW5lZCBoYWQgYmVlbiBzbyBncmVhdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBSb21hbnMgYXdhaXRlZCB0aGUgZW5lbXkncyBvbnNldCwgdGhlbiBjbG9zZWQgd2l0aCB0aGVtIGFuZCBjaGVja2VkIHRoZWlyIHVwd2FyZCBydXNoLCBhbmQgYXQgbGFzdCwgY3Jvd2RpbmcgdGhlbSBiYWNrIGxpdHRsZSBieSBsaXR0bGUsIGZvcmNlZCB0aGVtIGludG8gdGhlIHBsYWluLiBIZXJlLCB3aGlsZSB0aGUgQmFyYmFyaWFucyBpbiBmcm9udCB3ZXJlIGF0IGxhc3QgZm9ybWluZyBpbiBsaW5lIG9uIGxldmVsIGdyb3VuZCwgdGhlcmUgd2FzIHNob3V0aW5nIGFuZCBjb21tb3Rpb24gaW4gdGhlaXIgcmVhci4gRm9yIE1hcmNlbGx1cyBoYWQgd2F0Y2hlZCBoaXMgb3Bwb3J0dW5pdHksIGFuZCB3aGVuIHRoZSBjcmllcyBvZiBiYXR0bGUgd2VyZSBib3JuZSB1cCBvdmVyIHRoZSBoaWxscyBoZSBwdXQgaGlzIG1lbiB1cG9uIHRoZSBydW4gYW5kIGZlbGwgd2l0aCBsb3VkIHNob3V0cyB1cG9uIHRoZSBlbmVteSdzIHJlYXIsIHdoZXJlIGhlIGN1dCBkb3duIHRoZSBoaW5kbW9zdCBvZiB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIGluIHRoZSByZWFyIGZvcmNlZCBhbG9uZyB0aG9zZSB3aG8gd2VyZSBpbiBmcm9udCBvZiB0aGVtLCBhbmQgcXVpY2tseSBwbHVuZ2VkIHRoZSB3aG9sZSBhcm15IGludG8gY29uZnVzaW9uLCBhbmQgdW5kZXIgdGhpcyBkb3VibGUgYXR0YWNrIHRoZXkgY291bGQgcmlvdCBob2xkIG91dCBsb25nLCBidXQgYnJva2UgcmFua3MgYW5kIGZsZWQuIFRoZSBSb21hbnMgcHVyc3VlZCB0aGVtIGFuZCBlaXRoZXIgc2xldyBvciB0b29rIGFsaXZlIG92ZXIgYSBodW5kcmVkIHRob3VzYW5kIG9mIHRoZW0sIGJlc2lkZXMgbWFraW5nIHRoZW1zZWx2ZXMgbWFzdGVycyBvZiB0aGVpciB0ZW50cywgd2FnZ29ucywgYW5kIHByb3BlcnR5LCBhbGwgb2Ygd2hpY2gsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZiB3aGF0IHdhcyBwaWxmZXJlZCwgd2FzIGdpdmVuIHRvIE1hcml1cyBieSB2b3RlIG9mIHRoZSBzb2xkaWVycy4gQW5kIHRob3VnaCB0aGUgZ2lmdCB0aGF0IGhlIHJlY2VpdmVkIHdhcyBzbyBzcGxlbmRpZCwgaXQgd2FzIHRob3VnaHQgdG8gYmUgd2hvbGx5IHVud29ydGh5IG9mIGhpcyBzZXJ2aWNlcyBpbiB0aGUgY2FtcGFpZ24sIHdoZXJlIHRoZSBkYW5nZXIgdGhhdCB0aHJlYXRlbmVkIGhhZCBiZWVuIHNvIGdyZWF0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSBhcmUgc29tZSB3cml0ZXJzLCBob3dldmVyLCB3aG8gZ2l2ZSBhIGRpZmZlcmVudCBhY2NvdW50IG9mIHRoZSBkaXZpc2lvbiBvZiB0aGUgc3BvaWxzLCBhbmQgYWxzbyBvZiB0aGUgbnVtYmVyIG9mIHRoZSBzbGFpbi4gTmV2ZXJ0aGVsZXNzLCBpdCBpcyBzYWlkIHRoYXQgdGhlIHBlb3BsZSBvZiBNYXNzYWxpYSBmZW5jZWQgdGhlaXIgdmluZXlhcmRzIHJvdW5kIHdpdGggdGhlIGJvbmVzIG9mIHRoZSBmYWxsZW4sIGFuZCB0aGF0IHRoZSBzb2lsLCBhZnRlciB0aGUgYm9kaWVzIGhhZCB3YXN0ZWQgYXdheSBpbiBpdCBhbmQgdGhlIHJhaW5zIGhhZCBmYWxsZW4gYWxsIHdpbnRlciB1cG9uIGl0LCBncmV3IHNvIHJpY2ggYW5kIGJlY2FtZSBzbyBmdWxsIHRvIGl0cyBkZXB0aHMgb2YgdGhlIHB1dHJlZmllZCBtYXR0ZXIgdGhhdCBzYW5rIGludG8gaXQsIHRoYXQgaXQgcHJvZHVjZWQgYW4gZXhjZWVkaW5nIGdyZWF0IGhhcnZlc3QgaW4gYWZ0ZXIgeWVhcnMsIGFuZCBjb25maXJtZWQgdGhlIHNheWluZyBvZiBBcmNoaWxvY2h1cyA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CZXJnaywgPHRpdGxlPlBvZXQuIEx5ci4gR3JhZWNpIDwvdGl0bGU+LCBpaS4gNCBwcC4gNDI4IGYuIDwvbm90ZT4gdGhhdCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmZpZWxkcyBhcmUgZmF0dGVuZWQ8L3E+IGJ5IHN1Y2ggYSBwcm9jZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaXQgaXMgc2FpZCB0aGF0IGV4dHJhb3JkaW5hcnkgcmFpbnMgZ2VuZXJhbGx5IGRhc2ggZG93biBhZnRlciBncmVhdCBiYXR0bGVzLCB3aGV0aGVyIGl0IGlzIHRoYXQgc29tZSBkaXZpbmUgcG93ZXIgZHJlbmNoZXMgYW5kIGhhbGxvd3MgdGhlIGdyb3VuZCB3aXRoIHB1cmlmeWluZyB3YXRlcnMgZnJvbSBIZWF2ZW4sIG9yIHRoYXQgdGhlIGJsb29kIGFuZCBwdXRyZWZ5aW5nIG1hdHRlciBzZW5kIHVwIGEgbW9pc3QgYW5kIGhlYXZ5IHZhcG91ciB3aGljaCBjb25kZW5zZXMgdGhlIGFpciwgdGhpcyBiZWluZyBlYXNpbHkgbW92ZWQgYW5kIHJlYWRpbHkgY2hhbmdlZCB0byB0aGUgaGlnaGVzdCBkZWdyZWUgYnkgdGhlIHNsaWdodGVzdCBjYXVzZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIGFyZSBzb21lIHdyaXRlcnMsIGhvd2V2ZXIsIHdobyBnaXZlIGEgZGlmZmVyZW50IGFjY291bnQgb2YgdGhlIGRpdmlzaW9uIG9mIHRoZSBzcG9pbHMsIGFuZCBhbHNvIG9mIHRoZSBudW1iZXIgb2YgdGhlIHNsYWluLiBOZXZlcnRoZWxlc3MsIGl0IGlzIHNhaWQgdGhhdCB0aGUgcGVvcGxlIG9mIE1hc3NhbGlhIGZlbmNlZCB0aGVpciB2aW5leWFyZHMgcm91bmQgd2l0aCB0aGUgYm9uZXMgb2YgdGhlIGZhbGxlbiwgYW5kIHRoYXQgdGhlIHNvaWwsIGFmdGVyIHRoZSBib2RpZXMgaGFkIHdhc3RlZCBhd2F5IGluIGl0IGFuZCB0aGUgcmFpbnMgaGFkIGZhbGxlbiBhbGwgd2ludGVyIHVwb24gaXQsIGdyZXcgc28gcmljaCBhbmQgYmVjYW1lIHNvIGZ1bGwgdG8gaXRzIGRlcHRocyBvZiB0aGUgcHV0cmVmaWVkIG1hdHRlciB0aGF0IHNhbmsgaW50byBpdCwgdGhhdCBpdCBwcm9kdWNlZCBhbiBleGNlZWRpbmcgZ3JlYXQgaGFydmVzdCBpbiBhZnRlciB5ZWFycywgYW5kIGNvbmZpcm1lZCB0aGUgc2F5aW5nIG9mIEFyY2hpbG9jaHVzIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QmVyZ2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvZXQuIEx5ci4gR3JhZWNpIDwvdGl0bGU+LCBpaS4gNCBwcC4gNDI4IGYuIDwvbm90ZT4gdGhhdCAKCQkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvZXQuIEx5ci4gR3JhZWNpIDwvdGl0bGU+LCBpaS4gNCBwcC4gNDI4IGYuIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+ZmllbGRzIGFyZSBmYXR0ZW5lZDwvcT4gYnkgc3VjaCBhIHByb2Nlc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgZXh0cmFvcmRpbmFyeSByYWlucyBnZW5lcmFsbHkgZGFzaCBkb3duIGFmdGVyIGdyZWF0IGJhdHRsZXMsIHdoZXRoZXIgaXQgaXMgdGhhdCBzb21lIGRpdmluZSBwb3dlciBkcmVuY2hlcyBhbmQgaGFsbG93cyB0aGUgZ3JvdW5kIHdpdGggcHVyaWZ5aW5nIHdhdGVycyBmcm9tIEhlYXZlbiwgb3IgdGhhdCB0aGUgYmxvb2QgYW5kIHB1dHJlZnlpbmcgbWF0dGVyIHNlbmQgdXAgYSBtb2lzdCBhbmQgaGVhdnkgdmFwb3VyIHdoaWNoIGNvbmRlbnNlcyB0aGUgYWlyLCB0aGlzIGJlaW5nIGVhc2lseSBtb3ZlZCBhbmQgcmVhZGlseSBjaGFuZ2VkIHRvIHRoZSBoaWdoZXN0IGRlZ3JlZSBieSB0aGUgc2xpZ2h0ZXN0IGNhdXNlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlLCBNYXJpdXMgY29sbGVjdGVkIHN1Y2ggb2YgdGhlIGFybXMgYW5kIHNwb2lscyBvZiB0aGUgQmFyYmFyaWFucyBhcyB3ZXJlIGhhbmRzb21lLCBlbnRpcmUsIGFuZCBmaXR0ZWQgdG8gbWFrZSBhIHNob3cgaW4gaGlzIHRyaXVtcGhhbCBwcm9jZXNzaW9uOyBhbGwgdGhlIHJlc3QgaGUgaGVhcGVkIHVwIG9uIGEgaHVnZSBweXJlIGFuZCBzZXQgb24gZm9vdCBhIG1hZ25pZmljZW50IHNhY3JpZmljZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNvbGRpZXJzIGhhZCB0YWtlbiB0aGVpciBzdGFuZCBhYm91dCB0aGUgcHlyZSBpbiBhcm1zLCB3aXRoIGNoYXBsZXRzIG9uIHRoZWlyIGhlYWRzLCBhbmQgTWFyaXVzIGhpbXNlbGYsIGhhdmluZyBwdXQgb24gaGlzIHB1cnBsZS1ib3JkZXJlZCByb2JlIGFuZCBnaXJ0IGl0IGFib3V0IGhpbSwgYXMgdGhlIGN1c3RvbSB3YXMsIGhhZCB0YWtlbiBhIGxpZ2h0ZWQgdG9yY2gsIGhlbGQgaXQgdXAgdG93YXJkcyBoZWF2ZW4gd2l0aCBib3RoIGhhbmRzLCBhbmQgd2FzIGp1c3QgYWJvdXQgdG8gc2V0IGZpcmUgdG8gdGhlIHB5cmUsIHdoZW4gc29tZSBmcmllbmRzIHdlcmUgc2VlbiByaWRpbmcgc3dpZnRseSB0b3dhcmRzIGhpbSwgYW5kIHRoZXJlIHdhcyBkZWVwIHNpbGVuY2UgYW5kIGV4cGVjdGFuY3kgb24gdGhlIHBhcnQgb2YgYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgaG9yc2VtZW4gd2VyZSBuZWFyLCB0aGV5IGxlYXBlZCB0byB0aGUgZ3JvdW5kIGFuZCBncmVldGVkIE1hcml1cywgYnJpbmdpbmcgaGltIHRoZSBnbGFkIG5ld3MgdGhhdCBoZSBoYWQgYmVlbiBlbGVjdGVkIGNvbnN1bCBmb3IgdGhlIGZpZnRoIHRpbWUsIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciAxMDEgQi5DLiA8L25vdGU+IGFuZCBnaXZpbmcgaGltIGxldHRlcnMgdG8gdGhhdCBlZmZlY3QuIFRoaXMgZ3JlYXQgY2F1c2UgZm9yIHJlam9pY2luZyBoYXZpbmcgYmVlbiBhZGRlZCB0byB0aGUgY2VsZWJyYXRpb24gb2YgdGhlaXIgdmljdG9yeSwgdGhlIHNvbGRpZXJzLCB0cmFuc3BvcnRlZCB3aXRoIGRlbGlnaHQsIHNlbnQgZm9ydGggYSB1bml2ZXJzYWwgc2hvdXQsIGFjY29tcGFuaWVkIGJ5IHRoZSBjbGFzaCBhbmQgY2xhdHRlciBvZiB0aGVpciBhcm1zLCBhbmQgYWZ0ZXIgaGlzIG9mZmljZXJzIGhhZCBjcm93bmVkIE1hcml1cyBhZnJlc2ggd2l0aCB3cmVhdGhzIG9mIGJheSwgaGUgc2V0IGZpcmUgdG8gdGhlIHB5cmUgYW5kIGNvbXBsZXRlZCB0aGUgc2FjcmlmaWNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGJhdHRsZSwgTWFyaXVzIGNvbGxlY3RlZCBzdWNoIG9mIHRoZSBhcm1zIGFuZCBzcG9pbHMgb2YgdGhlIEJhcmJhcmlhbnMgYXMgd2VyZSBoYW5kc29tZSwgZW50aXJlLCBhbmQgZml0dGVkIHRvIG1ha2UgYSBzaG93IGluIGhpcyB0cml1bXBoYWwgcHJvY2Vzc2lvbjsgYWxsIHRoZSByZXN0IGhlIGhlYXBlZCB1cCBvbiBhIGh1Z2UgcHlyZSBhbmQgc2V0IG9uIGZvb3QgYSBtYWduaWZpY2VudCBzYWNyaWZpY2UuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzb2xkaWVycyBoYWQgdGFrZW4gdGhlaXIgc3RhbmQgYWJvdXQgdGhlIHB5cmUgaW4gYXJtcywgd2l0aCBjaGFwbGV0cyBvbiB0aGVpciBoZWFkcywgYW5kIE1hcml1cyBoaW1zZWxmLCBoYXZpbmcgcHV0IG9uIGhpcyBwdXJwbGUtYm9yZGVyZWQgcm9iZSBhbmQgZ2lydCBpdCBhYm91dCBoaW0sIGFzIHRoZSBjdXN0b20gd2FzLCBoYWQgdGFrZW4gYSBsaWdodGVkIHRvcmNoLCBoZWxkIGl0IHVwIHRvd2FyZHMgaGVhdmVuIHdpdGggYm90aCBoYW5kcywgYW5kIHdhcyBqdXN0IGFib3V0IHRvIHNldCBmaXJlIHRvIHRoZSBweXJlLCB3aGVuIHNvbWUgZnJpZW5kcyB3ZXJlIHNlZW4gcmlkaW5nIHN3aWZ0bHkgdG93YXJkcyBoaW0sIGFuZCB0aGVyZSB3YXMgZGVlcCBzaWxlbmNlIGFuZCBleHBlY3RhbmN5IG9uIHRoZSBwYXJ0IG9mIGFsbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBob3JzZW1lbiB3ZXJlIG5lYXIsIHRoZXkgbGVhcGVkIHRvIHRoZSBncm91bmQgYW5kIGdyZWV0ZWQgTWFyaXVzLCBicmluZ2luZyBoaW0gdGhlIGdsYWQgbmV3cyB0aGF0IGhlIGhhZCBiZWVuIGVsZWN0ZWQgY29uc3VsIGZvciB0aGUgZmlmdGggdGltZSwgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIHllYXIgMTAxIEIuQy4gPC9ub3RlPiBhbmQgZ2l2aW5nIGhpbSBsZXR0ZXJzIHRvIHRoYXQgZWZmZWN0LiBUaGlzIGdyZWF0IGNhdXNlIGZvciByZWpvaWNpbmcgaGF2aW5nIGJlZW4gYWRkZWQgdG8gdGhlIGNlbGVicmF0aW9uIG9mIHRoZWlyIHZpY3RvcnksIHRoZSBzb2xkaWVycywgdHJhbnNwb3J0ZWQgd2l0aCBkZWxpZ2h0LCBzZW50IGZvcnRoIGEgdW5pdmVyc2FsIHNob3V0LCBhY2NvbXBhbmllZCBieSB0aGUgY2xhc2ggYW5kIGNsYXR0ZXIgb2YgdGhlaXIgYXJtcywgYW5kIGFmdGVyIGhpcyBvZmZpY2VycyBoYWQgY3Jvd25lZCBNYXJpdXMgYWZyZXNoIHdpdGggd3JlYXRocyBvZiBiYXksIGhlIHNldCBmaXJlIHRvIHRoZSBweXJlIGFuZCBjb21wbGV0ZWQgdGhlIHNhY3JpZmljZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhhdCBwb3dlciB3aGljaCBwZXJtaXRzIG5vIGdyZWF0IHN1Y2Nlc3NlcyB0byBicmluZyBhIHB1cmUgYW5kIHVubWl4ZWQgZW5qb3ltZW50LCBidXQgZGl2ZXJzaWZpZXMgaHVtYW4gbGlmZSB3aXRoIGEgYmxlbmRpbmcgb2YgZXZpbCBhbmQgb2YgZ29vZC1iZSBpdCBGb3J0dW5lLCBvciBOZW1lc2lzLCBvciBJbmV2aXRhYmxlIE5lY2Vzc2l0eSwgd2l0aGluIGEgZmV3IGRheXMgYnJvdWdodCB0byBNYXJpdXMgdGlkaW5ncyBvZiBoaXMgY29sbGVhZ3VlIENhdHVsdXMsIHdoaWNoLCBsaWtlIGEgY2xvdWQgaW4gYSBjYWxtIGFuZCBzZXJlbmUgc2t5LCBpbnZvbHZlZCBSb21lIGluIGFub3RoZXIgdGVtcGVzdCBvZiBmZWFyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgQ2F0dWx1cywgd2hvIHdhcyBmYWNpbmcgdGhlIENpbWJyaSwgZ2F2ZSB1cCB0cnlpbmcgdG8gZ3VhcmQgdGhlIHBhc3NlcyBvZiB0aGUgQWxwcywgbGVzdCBoZSBzaG91bGQgYmUgd2Vha2VuZWQgYnkgdGhlIG5lY2Vzc2l0eSBvZiBkaXZpZGluZyBoaXMgZm9yY2VzIGludG8gbWFueSBwYXJ0cywgYW5kIGF0IG9uY2UgZGVzY2VuZGVkIGludG8gdGhlIHBsYWlucyBvZiBJdGFseS4gSGVyZSBoZSBwdXQgdGhlIHJpdmVyIEF0aXNvIGJldHdlZW4gaGltc2VsZiBhbmQgdGhlIGVuZW15LCBidWlsdCBzdHJvbmcgZm9ydGlmaWNhdGlvbnMgb24gYm90aCBiYW5rcyBvZiBpdCB0byBwcmV2ZW50IHRoZWlyIGNyb3NzaW5nLCBhbmQgdGhyZXcgYSBicmlkZ2UgYWNyb3NzIHRoZSBzdHJlYW0sIHRoYXQgaGUgbWlnaHQgYmUgYWJsZSB0byBnbyB0byB0aGUgaGVscCBvZiB0aGUgcGVvcGxlIG9uIHRoZSBvdGhlciBzaWRlIGluIGNhc2UgdGhlIEJhcmJhcmlhbnMgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCB0aGUgcGFzc2VzIGFuZCBhdHRhY2tlZCB0aGUgZm9ydHJlc3Nlcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZXNlIEJhcmJhcmlhbnMgd2VyZSBzbyBjb250ZW1wdHVvdXMgYW5kIGJvbGQgaW4gZm9sbG93aW5nIHRoZWlyIGVuZW1pZXMgdGhhdCwgbW9yZSBieSB3YXkgb2YgZGlzcGxheWluZyB0aGVpciBzdHJlbmd0aCBhbmQgZGFyaW5nIHRoYW4gYmVjYXVzZSBpdCB3YXMgbmVjZXNzYXJ5IGF0IGFsbCwgdGhleSBlbmR1cmVkIHRoZSBzbm93LXN0b3JtcyB3aXRob3V0IGFueSBjbG90aGluZywgbWFkZSB0aGVpciB3YXkgdGhyb3VnaCBpY2UgYW5kIGRlZXAgc25vdyB0byB0aGUgc3VtbWl0cywgYW5kIGZyb20gdGhlcmUsIHB1dHRpbmcgdGhlaXIgYnJvYWQgc2hpZWxkcyB1bmRlciB0aGVtIGFuZCB0aGVuIGxldHRpbmcgdGhlbXNlbHZlcyBnbywgc2xpZCBkb3duIHRoZSBzbW9vdGggYW5kIGRlZXBseSBmaXNzdXJlZCBjbGlmZnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXkgaGFkIGVuY2FtcGVkIG5lYXIgdGhlIHN0cmVhbSBhbmQgZXhhbWluZWQgdGhlIHBhc3NhZ2UsIHRoZXkgYmVnYW4gdG8gZGFtIGl0IHVwLCB0ZWFyaW5nIGF3YXkgdGhlIG5laWdoYm91cmluZyBoaWxscywgbGlrZSB0aGUgZ2lhbnRzIG9mIG9sZCwgY2FycnlpbmcgaW50byB0aGUgcml2ZXIgd2hvbGUgdHJlZXMgd2l0aCB0aGVpciByb290cywgZnJhZ21lbnRzIG9mIGNsaWZmcywgYW5kIG1vdW5kcyBvZiBlYXJ0aCwgYW5kIGNyb3dkaW5nIHRoZSBjdXJyZW50IG91dCBvZiBpdHMgY291cnNlOyB0aGV5IGFsc28gc2VudCB3aGlybGluZyBkb3duIHRoZSBzdHJlYW0gYWdhaW5zdCB0aGUgcGlsZXMgb2YgdGhlIGJyaWRnZSBoZWF2eSBtYXNzZXMgd2hpY2ggbWFkZSB0aGUgYnJpZGdlIHF1aXZlciB3aXRoIHRoZWlyIGJsb3dzLCB1bnRpbCBhdCBsYXN0IHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIFJvbWFuIHNvbGRpZXJzIHBsYXllZCB0aGUgY293YXJkLCBhYmFuZG9uZWQgdGhlaXIgbWFpbiBjYW1wLCBhbmQgYmVnYW4gdG8gcmV0cmVhdC4KCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCUFuZCBub3cgQ2F0dWx1cywgbGlrZSBhIGNvbnN1bW1hdGVseSBnb29kIGNvbW1hbmRlciwgc2hvd2VkIHRoYXQgaGUgaGFkIGxlc3MgcmVnYXJkIGZvciBoaXMgb3duIHJlcHV0YXRpb24gdGhhbiBmb3IgdGhhdCBvZiBoaXMgY291bnRyeW1lbi4gRm9yIGZpbmRpbmcgdGhhdCBoZSBjb3VsZCBub3QgcGVyc3VhZGUgaGlzIHNvbGRpZXJzIHRvIHJlbWFpbiwgYW5kIHNlZWluZyB0aGF0IHRoZXkgd2VyZSBtYWtpbmcgb2ZmIGluIHRlcnJvciwgaGUgb3JkZXJlZCBoaXMgc3RhbmRhcmQgdG8gYmUgdGFrZW4gdXAsIHJhbiB0byB0aGUgZm9yZW1vc3Qgb2YgdGhlIHJldGlyaW5nIHRyb29wcywgYW5kIHB1dCBoaW1zZWxmIGF0IHRoZWlyIGhlYWQsIHdpc2hpbmcgdGhhdCB0aGUgZGlzZ3JhY2Ugc2hvdWxkIGF0dGFjaCB0byBoaW1zZWxmIGFuZCBub3QgdG8gaGlzIGNvdW50cnksIGFuZCB0aGF0IGhpcyBzb2xkaWVycywgaW4gbWFraW5nIHRoZWlyIHJldHJlYXQsIHNob3VsZCBub3QgYXBwZWFyIHRvIGJlIHJ1bm5pbmcgYXdheSwgYnV0IGZvbGxvd2luZyB0aGVpciBnZW5lcmFsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgQmFyYmFyaWFucyBhdHRhY2tlZCBhbmQgY2FwdHVyZWQgdGhlIGZvcnRyZXNzIG9uIHRoZSBmdXJ0aGVyIHNpZGUgb2YgdGhlIEF0aXNvLCBhbmQgdGhleSBzbyBtdWNoIGFkbWlyZWQgdGhlIFJvbWFucyB0aGVyZSwgd2hvIHNob3dlZCB0aGVtc2VsdmVzIGJyYXZlc3Qgb2YgbWVuIGFuZCBmb3VnaHQgd29ydGhpbHkgb2YgdGhlaXIgY291bnRyeSwgdGhhdCB0aGV5IGxldCB0aGVtIGdvIG9uIHBhcm9sZSwgbWFraW5nIHRoZW0gdGFrZSBvYXRoIHVwb24gdGhlIGJyb256ZSBidWxsLiBUaGlzIHdhcyBzdWJzZXF1ZW50bHkgY2FwdHVyZWQsIGFmdGVyIHRoZSBiYXR0bGUsIGFuZCB3YXMgY2FycmllZCwgd2UgYXJlIHRvbGQsIHRvIHRoZSBob3VzZSBvZiBDYXR1bHVzIGFzIHRoZSBjaGllZiBwcml6ZSBvZiB0aGUgdmljdG9yeS4gQnV0IHRoZSBjb3VudHJ5IHdhcyBub3cgZGVzdGl0dXRlIG9mIGRlZmVuZGVycywgYW5kIHRoZSBCYXJiYXJpYW5zIGludW5kYXRlZCBhbmQgcmF2YWdlZCBpdC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhhdCBwb3dlciB3aGljaCBwZXJtaXRzIG5vIGdyZWF0IHN1Y2Nlc3NlcyB0byBicmluZyBhIHB1cmUgYW5kIHVubWl4ZWQgZW5qb3ltZW50LCBidXQgZGl2ZXJzaWZpZXMgaHVtYW4gbGlmZSB3aXRoIGEgYmxlbmRpbmcgb2YgZXZpbCBhbmQgb2YgZ29vZC1iZSBpdCBGb3J0dW5lLCBvciBOZW1lc2lzLCBvciBJbmV2aXRhYmxlIE5lY2Vzc2l0eSwgd2l0aGluIGEgZmV3IGRheXMgYnJvdWdodCB0byBNYXJpdXMgdGlkaW5ncyBvZiBoaXMgY29sbGVhZ3VlIENhdHVsdXMsIHdoaWNoLCBsaWtlIGEgY2xvdWQgaW4gYSBjYWxtIGFuZCBzZXJlbmUgc2t5LCBpbnZvbHZlZCBSb21lIGluIGFub3RoZXIgdGVtcGVzdCBvZiBmZWFyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBDYXR1bHVzLCB3aG8gd2FzIGZhY2luZyB0aGUgQ2ltYnJpLCBnYXZlIHVwIHRyeWluZyB0byBndWFyZCB0aGUgcGFzc2VzIG9mIHRoZSBBbHBzLCBsZXN0IGhlIHNob3VsZCBiZSB3ZWFrZW5lZCBieSB0aGUgbmVjZXNzaXR5IG9mIGRpdmlkaW5nIGhpcyBmb3JjZXMgaW50byBtYW55IHBhcnRzLCBhbmQgYXQgb25jZSBkZXNjZW5kZWQgaW50byB0aGUgcGxhaW5zIG9mIEl0YWx5LiBIZXJlIGhlIHB1dCB0aGUgcml2ZXIgQXRpc28gYmV0d2VlbiBoaW1zZWxmIGFuZCB0aGUgZW5lbXksIGJ1aWx0IHN0cm9uZyBmb3J0aWZpY2F0aW9ucyBvbiBib3RoIGJhbmtzIG9mIGl0IHRvIHByZXZlbnQgdGhlaXIgY3Jvc3NpbmcsIGFuZCB0aHJldyBhIGJyaWRnZSBhY3Jvc3MgdGhlIHN0cmVhbSwgdGhhdCBoZSBtaWdodCBiZSBhYmxlIHRvIGdvIHRvIHRoZSBoZWxwIG9mIHRoZSBwZW9wbGUgb24gdGhlIG90aGVyIHNpZGUgaW4gY2FzZSB0aGUgQmFyYmFyaWFucyBtYWRlIHRoZWlyIHdheSB0aHJvdWdoIHRoZSBwYXNzZXMgYW5kIGF0dGFja2VkIHRoZSBmb3J0cmVzc2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVzZSBCYXJiYXJpYW5zIHdlcmUgc28gY29udGVtcHR1b3VzIGFuZCBib2xkIGluIGZvbGxvd2luZyB0aGVpciBlbmVtaWVzIHRoYXQsIG1vcmUgYnkgd2F5IG9mIGRpc3BsYXlpbmcgdGhlaXIgc3RyZW5ndGggYW5kIGRhcmluZyB0aGFuIGJlY2F1c2UgaXQgd2FzIG5lY2Vzc2FyeSBhdCBhbGwsIHRoZXkgZW5kdXJlZCB0aGUgc25vdy1zdG9ybXMgd2l0aG91dCBhbnkgY2xvdGhpbmcsIG1hZGUgdGhlaXIgd2F5IHRocm91Z2ggaWNlIGFuZCBkZWVwIHNub3cgdG8gdGhlIHN1bW1pdHMsIGFuZCBmcm9tIHRoZXJlLCBwdXR0aW5nIHRoZWlyIGJyb2FkIHNoaWVsZHMgdW5kZXIgdGhlbSBhbmQgdGhlbiBsZXR0aW5nIHRoZW1zZWx2ZXMgZ28sIHNsaWQgZG93biB0aGUgc21vb3RoIGFuZCBkZWVwbHkgZmlzc3VyZWQgY2xpZmZzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXkgaGFkIGVuY2FtcGVkIG5lYXIgdGhlIHN0cmVhbSBhbmQgZXhhbWluZWQgdGhlIHBhc3NhZ2UsIHRoZXkgYmVnYW4gdG8gZGFtIGl0IHVwLCB0ZWFyaW5nIGF3YXkgdGhlIG5laWdoYm91cmluZyBoaWxscywgbGlrZSB0aGUgZ2lhbnRzIG9mIG9sZCwgY2FycnlpbmcgaW50byB0aGUgcml2ZXIgd2hvbGUgdHJlZXMgd2l0aCB0aGVpciByb290cywgZnJhZ21lbnRzIG9mIGNsaWZmcywgYW5kIG1vdW5kcyBvZiBlYXJ0aCwgYW5kIGNyb3dkaW5nIHRoZSBjdXJyZW50IG91dCBvZiBpdHMgY291cnNlOyB0aGV5IGFsc28gc2VudCB3aGlybGluZyBkb3duIHRoZSBzdHJlYW0gYWdhaW5zdCB0aGUgcGlsZXMgb2YgdGhlIGJyaWRnZSBoZWF2eSBtYXNzZXMgd2hpY2ggbWFkZSB0aGUgYnJpZGdlIHF1aXZlciB3aXRoIHRoZWlyIGJsb3dzLCB1bnRpbCBhdCBsYXN0IHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlIFJvbWFuIHNvbGRpZXJzIHBsYXllZCB0aGUgY293YXJkLCBhYmFuZG9uZWQgdGhlaXIgbWFpbiBjYW1wLCBhbmQgYmVnYW4gdG8gcmV0cmVhdC4KCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQW5kIG5vdyBDYXR1bHVzLCBsaWtlIGEgY29uc3VtbWF0ZWx5IGdvb2QgY29tbWFuZGVyLCBzaG93ZWQgdGhhdCBoZSBoYWQgbGVzcyByZWdhcmQgZm9yIGhpcyBvd24gcmVwdXRhdGlvbiB0aGFuIGZvciB0aGF0IG9mIGhpcyBjb3VudHJ5bWVuLiBGb3IgZmluZGluZyB0aGF0IGhlIGNvdWxkIG5vdCBwZXJzdWFkZSBoaXMgc29sZGllcnMgdG8gcmVtYWluLCBhbmQgc2VlaW5nIHRoYXQgdGhleSB3ZXJlIG1ha2luZyBvZmYgaW4gdGVycm9yLCBoZSBvcmRlcmVkIGhpcyBzdGFuZGFyZCB0byBiZSB0YWtlbiB1cCwgcmFuIHRvIHRoZSBmb3JlbW9zdCBvZiB0aGUgcmV0aXJpbmcgdHJvb3BzLCBhbmQgcHV0IGhpbXNlbGYgYXQgdGhlaXIgaGVhZCwgd2lzaGluZyB0aGF0IHRoZSBkaXNncmFjZSBzaG91bGQgYXR0YWNoIHRvIGhpbXNlbGYgYW5kIG5vdCB0byBoaXMgY291bnRyeSwgYW5kIHRoYXQgaGlzIHNvbGRpZXJzLCBpbiBtYWtpbmcgdGhlaXIgcmV0cmVhdCwgc2hvdWxkIG5vdCBhcHBlYXIgdG8gYmUgcnVubmluZyBhd2F5LCBidXQgZm9sbG93aW5nIHRoZWlyIGdlbmVyYWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBCYXJiYXJpYW5zIGF0dGFja2VkIGFuZCBjYXB0dXJlZCB0aGUgZm9ydHJlc3Mgb24gdGhlIGZ1cnRoZXIgc2lkZSBvZiB0aGUgQXRpc28sIGFuZCB0aGV5IHNvIG11Y2ggYWRtaXJlZCB0aGUgUm9tYW5zIHRoZXJlLCB3aG8gc2hvd2VkIHRoZW1zZWx2ZXMgYnJhdmVzdCBvZiBtZW4gYW5kIGZvdWdodCB3b3J0aGlseSBvZiB0aGVpciBjb3VudHJ5LCB0aGF0IHRoZXkgbGV0IHRoZW0gZ28gb24gcGFyb2xlLCBtYWtpbmcgdGhlbSB0YWtlIG9hdGggdXBvbiB0aGUgYnJvbnplIGJ1bGwuIFRoaXMgd2FzIHN1YnNlcXVlbnRseSBjYXB0dXJlZCwgYWZ0ZXIgdGhlIGJhdHRsZSwgYW5kIHdhcyBjYXJyaWVkLCB3ZSBhcmUgdG9sZCwgdG8gdGhlIGhvdXNlIG9mIENhdHVsdXMgYXMgdGhlIGNoaWVmIHByaXplIG9mIHRoZSB2aWN0b3J5LiBCdXQgdGhlIGNvdW50cnkgd2FzIG5vdyBkZXN0aXR1dGUgb2YgZGVmZW5kZXJzLCBhbmQgdGhlIEJhcmJhcmlhbnMgaW51bmRhdGVkIGFuZCByYXZhZ2VkIGl0LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB2aWV3IG9mIHRoZXNlIHRoaW5ncyBNYXJpdXMgd2FzIHN1bW1vbmVkIHRvIFJvbWUuIFdoZW4gaGUgaGFkIGFycml2ZWQgdGhlcmUsIGl0IHdhcyB0aGUgZ2VuZXJhbCBleHBlY3RhdGlvbiB0aGF0IGhlIHdvdWxkIGNlbGVicmF0ZSB0aGUgdHJpdW1waCB3aGljaCB0aGUgc2VuYXRlIGhhZCByZWFkaWx5IHZvdGVkIGhpbS4gQnV0IGhlIHJlZnVzZWQgdG8gZG8gc28sIGVpdGhlciBiZWNhdXNlIGhlIGRpZCBub3Qgd2lzaCB0byBkZXByaXZlIGhpcyBzb2xkaWVycyBhbmQgY29tcmFkZXMtaW4tYXJtcyBvZiB0aGVpciBkdWUgaG9ub3Vycywgb3IgYmVjYXVzZSBoZSB3b3VsZCBlbmNvdXJhZ2UgdGhlIG11bHRpdHVkZSBpbiB2aWV3IG9mIHRoZSBwcmVzZW50IGNyaXNpcyBieSBlbnRydXN0aW5nIHRoZSBnbG9yeSBvZiBoaXMgZmlyc3Qgc3VjY2VzcyB0byB0aGUgZm9ydHVuZSBvZiB0aGUgc3RhdGUsIGluIHRoZSBob3BlIHRoYXQgaXQgd291bGQgYmUgcmV0dXJuZWQgdG8gaGltIGVuaGFuY2VkIGJ5IGEgc2Vjb25kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IYXZpbmcgc2FpZCB3aGF0IHdhcyBzdWl0YWJsZSB0byB0aGUgb2NjYXNpb24sIGhlIHNldCBvdXQgdG8gam9pbiBDYXR1bHVzLCB3aG9tIGhlIHRyaWVkIHRvIGVuY291cmFnZSwgd2hpbGUgYXQgdGhlIHNhbWUgdGltZSBoZSBzdW1tb25lZCBoaXMgb3duIHNvbGRpZXJzIGZyb20gR2F1bC4gV2hlbiB0aGVzZSBoYWQgY29tZSwgaGUgY3Jvc3NlZCB0aGUgUG8gYW5kIHRyaWVkIHRvIGtlZXAgdGhlIEJhcmJhcmlhbnMgb3V0IG9mIHRoZSBwYXJ0IG9mIEl0YWx5IGx5aW5nIHRoaXMgc2lkZSBvZiB0aGUgcml2ZXIuIEJ1dCB0aGUgQmFyYmFyaWFucyBkZWNsaW5lZCBiYXR0bGUsIGFsbGVnaW5nIHRoYXQgdGhleSB3ZXJlIHdhaXRpbmcgZm9yIHRoZWlyIGJyZXRocmVuIHRoZSBUZXV0b25lcyBhbmQgd29uZGVyZWQgd2h5IHRoZXkgd2VyZSBzbyBsb25nIGluIGNvbWluZzsgdGhpcyB3YXMgZWl0aGVyIGJlY2F1c2UgdGhleSB3ZXJlIHJlYWxseSBpZ25vcmFudCBvZiB0aGVpciBkZXN0cnVjdGlvbiwgb3IgYmVjYXVzZSB0aGV5IHdpc2hlZCB0byBoYXZlIHRoZSBhcHBlYXJhbmNlIG9mIGRpc2JlbGlldmluZyBpdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXkgdGVycmlibHkgbWlzaGFuZGxlZCB0aG9zZSB3aG8gYnJvdWdodCB0aWRpbmdzIG9mIGl0LCBhbmQgc2VudCB0byBNYXJpdXMgZGVtYW5kaW5nIHRlcnJpdG9yeSBmb3IgdGhlbXNlbHZlcyBhbmQgdGhlaXIgYnJldGhyZW4gYW5kIGVub3VnaCBjaXRpZXMgZm9yIHRoZW0gdG8gZHdlbGwgaW4uIFdoZW4gTWFyaXVzIGFza2VkIHRoZWlyIGFtYmFzc2Fkb3JzIHdob20gdGhleSBtZWFudCBieSB0aGVpciBicmV0aHJlbiwgdGhleSBzYWlkIHRoZXkgbWVhbnQgdGhlIFRldXRvbmVzLiBBdCB0aGlzLCBhbGwgdGhlIG90aGVyIFJvbWFucyB3aG8gaGVhcmQgdGhlbSBidXJzdCBvdXQgbGF1Z2hpbmcsIGFuZCBNYXJpdXMgc2NvZmZpbmdseSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZW4gZG9uJ3QgdHJvdWJsZSB5b3Vyc2VsdmVzIGFib3V0IHlvdXIgYnJldGhyZW4sIGZvciB0aGV5IGhhdmUgbGFuZCwgYW5kIHRoZXkgd2lsbCBoYXZlIGl0IGZvcmV2ZXLigJRsYW5kIHdoaWNoIHdlIGhhdmUgZ2l2ZW4gdGhlbS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGFtYmFzc2Fkb3JzIHVuZGVyc3Rvb2QgaGlzIHNhcmNhc20gYW5kIGZlbGwgdG8gYWJ1c2luZyBoaW0sIGRlY2xhcmluZyB0aGF0IGhlIHNob3VsZCBiZSBwdW5pc2hlZCBmb3IgaXQsIGJ5IHRoZSBDaW1icmkgYXQgb25jZSwgYW5kIGJ5IHRoZSBUZXV0b25lcyB3aGVuIHRoZXkgY2FtZS4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5WZXJpbHksPC9xPiBzYWlkIE1hcml1cywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50aGV5IGFyZSBoZXJlLCBhbmQgaXQgd2lsbCBub3QgYmUgcmlnaHQgZm9yIHlvdSB0byBnbyBhd2F5IGJlZm9yZSB5b3UgaGF2ZSBlbWJyYWNlZCB5b3VyIGJyZXRocmVuLjwvcT4gU2F5aW5nIHRoaXMsIGhlIG9yZGVyZWQgdGhlIGtpbmdzIG9mIHRoZSBUZXV0b25lcyB0byBiZSBwcm9kdWNlZCBpbiBmZXR0ZXJzOyBmb3IgdGhleSBoYWQgYmVlbiBjYXB0dXJlZCBhbW9uZyB0aGUgQWxwcywgd2hlcmUgdGhleSB3ZXJlIGZ1Z2l0aXZlcywgYnkgdGhlIFNlcXVhbmkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdmlldyBvZiB0aGVzZSB0aGluZ3MgTWFyaXVzIHdhcyBzdW1tb25lZCB0byBSb21lLiBXaGVuIGhlIGhhZCBhcnJpdmVkIHRoZXJlLCBpdCB3YXMgdGhlIGdlbmVyYWwgZXhwZWN0YXRpb24gdGhhdCBoZSB3b3VsZCBjZWxlYnJhdGUgdGhlIHRyaXVtcGggd2hpY2ggdGhlIHNlbmF0ZSBoYWQgcmVhZGlseSB2b3RlZCBoaW0uIEJ1dCBoZSByZWZ1c2VkIHRvIGRvIHNvLCBlaXRoZXIgYmVjYXVzZSBoZSBkaWQgbm90IHdpc2ggdG8gZGVwcml2ZSBoaXMgc29sZGllcnMgYW5kIGNvbXJhZGVzLWluLWFybXMgb2YgdGhlaXIgZHVlIGhvbm91cnMsIG9yIGJlY2F1c2UgaGUgd291bGQgZW5jb3VyYWdlIHRoZSBtdWx0aXR1ZGUgaW4gdmlldyBvZiB0aGUgcHJlc2VudCBjcmlzaXMgYnkgZW50cnVzdGluZyB0aGUgZ2xvcnkgb2YgaGlzIGZpcnN0IHN1Y2Nlc3MgdG8gdGhlIGZvcnR1bmUgb2YgdGhlIHN0YXRlLCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdvdWxkIGJlIHJldHVybmVkIHRvIGhpbSBlbmhhbmNlZCBieSBhIHNlY29uZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhhdmluZyBzYWlkIHdoYXQgd2FzIHN1aXRhYmxlIHRvIHRoZSBvY2Nhc2lvbiwgaGUgc2V0IG91dCB0byBqb2luIENhdHVsdXMsIHdob20gaGUgdHJpZWQgdG8gZW5jb3VyYWdlLCB3aGlsZSBhdCB0aGUgc2FtZSB0aW1lIGhlIHN1bW1vbmVkIGhpcyBvd24gc29sZGllcnMgZnJvbSBHYXVsLiBXaGVuIHRoZXNlIGhhZCBjb21lLCBoZSBjcm9zc2VkIHRoZSBQbyBhbmQgdHJpZWQgdG8ga2VlcCB0aGUgQmFyYmFyaWFucyBvdXQgb2YgdGhlIHBhcnQgb2YgSXRhbHkgbHlpbmcgdGhpcyBzaWRlIG9mIHRoZSByaXZlci4gQnV0IHRoZSBCYXJiYXJpYW5zIGRlY2xpbmVkIGJhdHRsZSwgYWxsZWdpbmcgdGhhdCB0aGV5IHdlcmUgd2FpdGluZyBmb3IgdGhlaXIgYnJldGhyZW4gdGhlIFRldXRvbmVzIGFuZCB3b25kZXJlZCB3aHkgdGhleSB3ZXJlIHNvIGxvbmcgaW4gY29taW5nOyB0aGlzIHdhcyBlaXRoZXIgYmVjYXVzZSB0aGV5IHdlcmUgcmVhbGx5IGlnbm9yYW50IG9mIHRoZWlyIGRlc3RydWN0aW9uLCBvciBiZWNhdXNlIHRoZXkgd2lzaGVkIHRvIGhhdmUgdGhlIGFwcGVhcmFuY2Ugb2YgZGlzYmVsaWV2aW5nIGl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGV5IHRlcnJpYmx5IG1pc2hhbmRsZWQgdGhvc2Ugd2hvIGJyb3VnaHQgdGlkaW5ncyBvZiBpdCwgYW5kIHNlbnQgdG8gTWFyaXVzIGRlbWFuZGluZyB0ZXJyaXRvcnkgZm9yIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIGJyZXRocmVuIGFuZCBlbm91Z2ggY2l0aWVzIGZvciB0aGVtIHRvIGR3ZWxsIGluLiBXaGVuIE1hcml1cyBhc2tlZCB0aGVpciBhbWJhc3NhZG9ycyB3aG9tIHRoZXkgbWVhbnQgYnkgdGhlaXIgYnJldGhyZW4sIHRoZXkgc2FpZCB0aGV5IG1lYW50IHRoZSBUZXV0b25lcy4gQXQgdGhpcywgYWxsIHRoZSBvdGhlciBSb21hbnMgd2hvIGhlYXJkIHRoZW0gYnVyc3Qgb3V0IGxhdWdoaW5nLCBhbmQgTWFyaXVzIHNjb2ZmaW5nbHkgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoZW4gZG9uJ3QgdHJvdWJsZSB5b3Vyc2VsdmVzIGFib3V0IHlvdXIgYnJldGhyZW4sIGZvciB0aGV5IGhhdmUgbGFuZCwgYW5kIHRoZXkgd2lsbCBoYXZlIGl0IGZvcmV2ZXLigJRsYW5kIHdoaWNoIHdlIGhhdmUgZ2l2ZW4gdGhlbS48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBhbWJhc3NhZG9ycyB1bmRlcnN0b29kIGhpcyBzYXJjYXNtIGFuZCBmZWxsIHRvIGFidXNpbmcgaGltLCBkZWNsYXJpbmcgdGhhdCBoZSBzaG91bGQgYmUgcHVuaXNoZWQgZm9yIGl0LCBieSB0aGUgQ2ltYnJpIGF0IG9uY2UsIGFuZCBieSB0aGUgVGV1dG9uZXMgd2hlbiB0aGV5IGNhbWUuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5WZXJpbHksPC9xPiBzYWlkIE1hcml1cywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoZXkgYXJlIGhlcmUsIGFuZCBpdCB3aWxsIG5vdCBiZSByaWdodCBmb3IgeW91IHRvIGdvIGF3YXkgYmVmb3JlIHlvdSBoYXZlIGVtYnJhY2VkIHlvdXIgYnJldGhyZW4uPC9xPiBTYXlpbmcgdGhpcywgaGUgb3JkZXJlZCB0aGUga2luZ3Mgb2YgdGhlIFRldXRvbmVzIHRvIGJlIHByb2R1Y2VkIGluIGZldHRlcnM7IGZvciB0aGV5IGhhZCBiZWVuIGNhcHR1cmVkIGFtb25nIHRoZSBBbHBzLCB3aGVyZSB0aGV5IHdlcmUgZnVnaXRpdmVzLCBieSB0aGUgU2VxdWFuaS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGVzZSB0aGluZ3MgaGFkIGJlZW4gcmVwb3J0ZWQgdG8gdGhlIENpbWJyaSwgdGhleSBvbmNlIG1vcmUgYWR2YW5jZWQgYWdhaW5zdCBNYXJpdXMsIHdobyBrZXB0IHF1aWV0IGFuZCBjYXJlZnVsbHkgZ3VhcmRlZCBoaXMgY2FtcC4gQW5kIGl0IGlzIHNhaWQgdGhhdCBpdCB3YXMgaW4gcHJlcGFyYXRpb24gZm9yIHRoaXMgYmF0dGxlIHRoYXQgTWFyaXVzIGludHJvZHVjZWQgYW4gaW5ub3ZhdGlvbiBpbiB0aGUgc3RydWN0dXJlIG9mIHRoZSBqYXZlbGluLiBVcCB0byB0aGlzIHRpbWUsIGl0IHNlZW1zLCB0aGF0IHBhcnQgb2YgdGhlIHNoYWZ0IHdoaWNoIHdhcyBsZXQgaW50byB0aGUgaXJvbiBoZWFkIHdhcyBmYXN0ZW5lZCB0aGVyZSBieSB0d28gaXJvbiBuYWlsczsgYnV0IG5vdywgbGVhdmluZyBvbmUgb2YgdGhlc2UgYXMgaXQgd2FzLCBNYXJpdXMgcmVtb3ZlZCB0aGUgb3RoZXIsIGFuZCBwdXQgaW4gaXRzIHBsYWNlIGEgd29vZGVuIHBpbiB0aGF0IGNvdWxkIGVhc2lseSBiZSBicm9rZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBkZXNpZ24gd2FzIHRoYXQgdGhlIGphdmVsaW4sIGFmdGVyIHN0cmlraW5nIHRoZSBlbmVteSdzIHNoaWVsZCwgc2hvdWxkIG5vdCBzdGFuZCBzdHJhaWdodCBvdXQsIGJ1dCB0aGF0IHRoZSB3b29kZW4gcGVnIHNob3VsZCBicmVhaywgdGh1cyBhbGxvd2luZyB0aGUgc2hhZnQgdG8gYmVuZCBpbiB0aGUgaXJvbiBoZWFkIGFuZCB0cmFpbCBhbG9uZyB0aGUgZ3JvdW5kLCBiZWluZyBoZWxkIGZhc3QgYnkgdGhlIHR3aXN0IGF0IHRoZSBwb2ludCBvZiB0aGUgd2VhcG9uLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGVzZSB0aGluZ3MgaGFkIGJlZW4gcmVwb3J0ZWQgdG8gdGhlIENpbWJyaSwgdGhleSBvbmNlIG1vcmUgYWR2YW5jZWQgYWdhaW5zdCBNYXJpdXMsIHdobyBrZXB0IHF1aWV0IGFuZCBjYXJlZnVsbHkgZ3VhcmRlZCBoaXMgY2FtcC4gQW5kIGl0IGlzIHNhaWQgdGhhdCBpdCB3YXMgaW4gcHJlcGFyYXRpb24gZm9yIHRoaXMgYmF0dGxlIHRoYXQgTWFyaXVzIGludHJvZHVjZWQgYW4gaW5ub3ZhdGlvbiBpbiB0aGUgc3RydWN0dXJlIG9mIHRoZSBqYXZlbGluLiBVcCB0byB0aGlzIHRpbWUsIGl0IHNlZW1zLCB0aGF0IHBhcnQgb2YgdGhlIHNoYWZ0IHdoaWNoIHdhcyBsZXQgaW50byB0aGUgaXJvbiBoZWFkIHdhcyBmYXN0ZW5lZCB0aGVyZSBieSB0d28gaXJvbiBuYWlsczsgYnV0IG5vdywgbGVhdmluZyBvbmUgb2YgdGhlc2UgYXMgaXQgd2FzLCBNYXJpdXMgcmVtb3ZlZCB0aGUgb3RoZXIsIGFuZCBwdXQgaW4gaXRzIHBsYWNlIGEgd29vZGVuIHBpbiB0aGF0IGNvdWxkIGVhc2lseSBiZSBicm9rZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBkZXNpZ24gd2FzIHRoYXQgdGhlIGphdmVsaW4sIGFmdGVyIHN0cmlraW5nIHRoZSBlbmVteSdzIHNoaWVsZCwgc2hvdWxkIG5vdCBzdGFuZCBzdHJhaWdodCBvdXQsIGJ1dCB0aGF0IHRoZSB3b29kZW4gcGVnIHNob3VsZCBicmVhaywgdGh1cyBhbGxvd2luZyB0aGUgc2hhZnQgdG8gYmVuZCBpbiB0aGUgaXJvbiBoZWFkIGFuZCB0cmFpbCBhbG9uZyB0aGUgZ3JvdW5kLCBiZWluZyBoZWxkIGZhc3QgYnkgdGhlIHR3aXN0IGF0IHRoZSBwb2ludCBvZiB0aGUgd2VhcG9uLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBub3cgQm9lb3JpeCB0aGUga2luZyBvZiB0aGUgQ2ltYnJpLCB3aXRoIGEgc21hbGwgcmV0aW51ZSwgcm9kZSB1cCB0b3dhcmRzIHRoZSBjYW1wIGFuZCBjaGFsbGVuZ2VkIE1hcml1cyB0byBzZXQgYSBkYXkgYW5kIGEgcGxhY2UgYW5kIGNvbWUgb3V0IGFuZCBmaWdodCBmb3IgdGhlIG93bmVyc2hpcCBvZiB0aGUgY291bnRyeS4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMgcmVwbGllZCB0aGF0IHRoZSBSb21hbnMgbmV2ZXIgYWxsb3dlZCB0aGVpciBlbmVtaWVzIHRvIGdpdmUgdGhlbSBhZHZpY2UgYWJvdXQgZmlnaHRpbmcsIGJ1dCB0aGF0IGhlIHdvdWxkIG5ldmVydGhlbGVzcyBncmF0aWZ5IHRoZSBDaW1icmkgaW4gdGhpcyBtYXR0ZXIuIEFjY29yZGluZ2x5LCB0aGV5IGRlY2lkZWQgdGhhdCB0aGUgZGF5IHNob3VsZCBiZSB0aGUgdGhpcmQgZm9sbG93aW5nLCBhbmQgdGhlIHBsYWNlIHRoZSBwbGFpbiBvZiBWZXJjZWxsYWUsIHdoaWNoIHdhcyBzdWl0YWJsZSBmb3IgdGhlIG9wZXJhdGlvbnMgb2YgdGhlIFJvbWFuIGNhdmFscnksIGFuZCB3b3VsZCBnaXZlIHRoZSBDaW1icmkgcm9vbSB0byBkZXBsb3kgdGhlaXIgbnVtYmVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyByZXBsaWVkIHRoYXQgdGhlIFJvbWFucyBuZXZlciBhbGxvd2VkIHRoZWlyIGVuZW1pZXMgdG8gZ2l2ZSB0aGVtIGFkdmljZSBhYm91dCBmaWdodGluZywgYnV0IHRoYXQgaGUgd291bGQgbmV2ZXJ0aGVsZXNzIGdyYXRpZnkgdGhlIENpbWJyaSBpbiB0aGlzIG1hdHRlci4gQWNjb3JkaW5nbHksIHRoZXkgZGVjaWRlZCB0aGF0IHRoZSBkYXkgc2hvdWxkIGJlIHRoZSB0aGlyZCBmb2xsb3dpbmcsIGFuZCB0aGUgcGxhY2UgdGhlIHBsYWluIG9mIFZlcmNlbGxhZSwgd2hpY2ggd2FzIHN1aXRhYmxlIGZvciB0aGUgb3BlcmF0aW9ucyBvZiB0aGUgUm9tYW4gY2F2YWxyeSwgYW5kIHdvdWxkIGdpdmUgdGhlIENpbWJyaSByb29tIHRvIGRlcGxveSB0aGVpciBudW1iZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCB0aGVyZWZvcmUsIHRoZSBhcHBvaW50ZWQgdGltZSBoYWQgY29tZSwgdGhlIFJvbWFucyBkcmV3IHVwIHRoZWlyIGZvcmNlcyBmb3IgYmF0dGxlLiBDYXR1bHVzIGhhZCB0d2VudHkgdGhvdXNhbmQgdGhyZWUgaHVuZHJlZCBzb2xkaWVycywgd2hpbGUgdGhvc2Ugb2YgTWFyaXVzIGFtb3VudGVkIHRvIHRoaXJ0eS10d28gdGhvdXNhbmQsIHdoaWNoIHdlcmUgZGl2aWRlZCBiZXR3ZWVuIGJvdGggd2luZ3MgYW5kIGhhZCBDYXR1bHVzIGJldHdlZW4gdGhlbSBpbiB0aGUgY2VudHJlLCBhcyBTdWxsYSwgd2hvIGZvdWdodCBpbiB0aGlzIGJhdHRsZSwgaGFzIHN0YXRlZC4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gaGlzIDx0aXRsZT5NZW1vaXJzIDwvdGl0bGU+OyBjZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA0LjMiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPlN1bGxhIDwvdGl0bGU+LCBpdi4gMyA8L2JpYmw+LiA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgc2F5cyBhbHNvIHRoYXQgTWFyaXVzIGhvcGVkIHRoYXQgdGhlIHR3byBsaW5lcyB3b3VsZCBlbmdhZ2UgYXQgdGhlaXIgZXh0cmVtaXRpZXMgY2hpZWZseSBhbmQgb24gdGhlIHdpbmdzLCBpbiBvcmRlciB0aGF0IGhpcyBzb2xkaWVycyBtaWdodCBoYXZlIHRoZSB3aG9sZSBjcmVkaXQgZm9yIHRoZSB2aWN0b3J5IGFuZCB0aGF0IENhdHVsdXMgbWlnaHQgbm90IHBhcnRpY2lwYXRlIGluIHRoZSBzdHJ1Z2dsZSBub3IgZXZlbiBlbmdhZ2UgdGhlIGVuZW15IChzaW5jZSB0aGUgY2VudHJlLCBhcyBpcyB1c3VhbCBpbiBiYXR0bGUtZnJvbnRzIG9mIGdyZWF0IGV4dGVudCwgd291bGQgYmUgZm9sZGVkIGJhY2spOyBhbmQgdGhlcmVmb3JlIGFycmFuZ2VkIHRoZSBmb3JjZXMgaW4gdGhpcyBtYW5uZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3ZSBhcmUgdG9sZCB0aGF0IENhdHVsdXMgaGltc2VsZiBhbHNvIG1hZGUgYSBzaW1pbGFyIHN0YXRlbWVudCBpbiBkZWZlbmNlIG9mIGhpcyBjb25kdWN0IGluIHRoZSBiYXR0bGUsIGFuZCBhY2N1c2VkIE1hcml1cyBvZiBncmVhdCBtYWxpY2UgaW4gaGlzIHRyZWF0bWVudCBvZiBoaW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoZXJlZm9yZSwgdGhlIGFwcG9pbnRlZCB0aW1lIGhhZCBjb21lLCB0aGUgUm9tYW5zIGRyZXcgdXAgdGhlaXIgZm9yY2VzIGZvciBiYXR0bGUuIENhdHVsdXMgaGFkIHR3ZW50eSB0aG91c2FuZCB0aHJlZSBodW5kcmVkIHNvbGRpZXJzLCB3aGlsZSB0aG9zZSBvZiBNYXJpdXMgYW1vdW50ZWQgdG8gdGhpcnR5LXR3byB0aG91c2FuZCwgd2hpY2ggd2VyZSBkaXZpZGVkIGJldHdlZW4gYm90aCB3aW5ncyBhbmQgaGFkIENhdHVsdXMgYmV0d2VlbiB0aGVtIGluIHRoZSBjZW50cmUsIGFzIFN1bGxhLCB3aG8gZm91Z2h0IGluIHRoaXMgYmF0dGxlLCBoYXMgc3RhdGVkLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGhpcyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5NZW1vaXJzIDwvdGl0bGU+OyBjZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDQuMyIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYSA8L3RpdGxlPiwgaXYuIDMgPC9iaWJsPi4gPC9ub3RlPiAKCQkJCSAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TWVtb2lycyA8L3RpdGxlPjsgY2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA0LjMiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3VsbGEgPC90aXRsZT4sIGl2LiAzIDwvYmlibD4uIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhIDwvdGl0bGU+LCBpdi4gMyA8L3RyYW5zbGF0aW9uPg=="
translation['25.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIHNheXMgYWxzbyB0aGF0IE1hcml1cyBob3BlZCB0aGF0IHRoZSB0d28gbGluZXMgd291bGQgZW5nYWdlIGF0IHRoZWlyIGV4dHJlbWl0aWVzIGNoaWVmbHkgYW5kIG9uIHRoZSB3aW5ncywgaW4gb3JkZXIgdGhhdCBoaXMgc29sZGllcnMgbWlnaHQgaGF2ZSB0aGUgd2hvbGUgY3JlZGl0IGZvciB0aGUgdmljdG9yeSBhbmQgdGhhdCBDYXR1bHVzIG1pZ2h0IG5vdCBwYXJ0aWNpcGF0ZSBpbiB0aGUgc3RydWdnbGUgbm9yIGV2ZW4gZW5nYWdlIHRoZSBlbmVteSAoc2luY2UgdGhlIGNlbnRyZSwgYXMgaXMgdXN1YWwgaW4gYmF0dGxlLWZyb250cyBvZiBncmVhdCBleHRlbnQsIHdvdWxkIGJlIGZvbGRlZCBiYWNrKTsgYW5kIHRoZXJlZm9yZSBhcnJhbmdlZCB0aGUgZm9yY2VzIGluIHRoaXMgbWFubmVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['25.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3ZSBhcmUgdG9sZCB0aGF0IENhdHVsdXMgaGltc2VsZiBhbHNvIG1hZGUgYSBzaW1pbGFyIHN0YXRlbWVudCBpbiBkZWZlbmNlIG9mIGhpcyBjb25kdWN0IGluIHRoZSBiYXR0bGUsIGFuZCBhY2N1c2VkIE1hcml1cyBvZiBncmVhdCBtYWxpY2UgaW4gaGlzIHRyZWF0bWVudCBvZiBoaW0uCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QXMgZm9yIHRoZSBDaW1icmksIHRoZWlyIGZvb3Qtc29sZGllcnMgYWR2YW5jZWQgc2xvd2x5IGZyb20gdGhlaXIgZGVmZW5jZXMsIHdpdGggYSBkZXB0aCBlcXVhbCB0byB0aGVpciBmcm9udCwgZm9yIGVhY2ggc2lkZSBvZiB0aGVpciBmb3JtYXRpb24gaGFkIGFuIGV4dGVudCBvZiB0aGlydHkgZnVybG9uZ3M7IAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoZWlyIGhvcnNlbWVuLCBmaWZ0ZWVuIHRob3VzYW5kIHN0cm9uZywgcm9kZSBvdXQgaW4gc3BsZW5kaWQgc3R5bGUsIHdpdGggaGVsbWV0cyBtYWRlIHRvIHJlc2VtYmxlIHRoZSBtYXdzIG9mIGZyaWdodGZ1bCB3aWxkIGJlYXN0cyBvciB0aGUgaGVhZHMgb2Ygc3RyYW5nZSBhbmltYWxzLCB3aGljaCwgd2l0aCB0aGVpciB0b3dlcmluZyBjcmVzdHMgb2YgZmVhdGhlcnMsIG1hZGUgdGhlaXIgd2VhcmVycyBhcHBlYXIgdGFsbGVyIHRoYW4gdGhleSByZWFsbHkgd2VyZTsgdGhleSB3ZXJlIGFsc28gZXF1aXBwZWQgd2l0aCBicmVhc3RwbGF0ZXMgb2YgaXJvbiwgYW5kIGNhcnJpZWQgZ2xlYW1pbmcgd2hpdGUgc2hpZWxkcy4gRm9yIGh1cmxpbmcsIGVhY2ggbWFuIGhhZCB0d28gbGFuY2VzOyBhbmQgYXQgY2xvc2UgcXVhcnRlcnMgdGhleSB1c2VkIGxhcmdlLCBoZWF2eSBzd29yZHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['25.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVpciBob3JzZW1lbiwgZmlmdGVlbiB0aG91c2FuZCBzdHJvbmcsIHJvZGUgb3V0IGluIHNwbGVuZGlkIHN0eWxlLCB3aXRoIGhlbG1ldHMgbWFkZSB0byByZXNlbWJsZSB0aGUgbWF3cyBvZiBmcmlnaHRmdWwgd2lsZCBiZWFzdHMgb3IgdGhlIGhlYWRzIG9mIHN0cmFuZ2UgYW5pbWFscywgd2hpY2gsIHdpdGggdGhlaXIgdG93ZXJpbmcgY3Jlc3RzIG9mIGZlYXRoZXJzLCBtYWRlIHRoZWlyIHdlYXJlcnMgYXBwZWFyIHRhbGxlciB0aGFuIHRoZXkgcmVhbGx5IHdlcmU7IHRoZXkgd2VyZSBhbHNvIGVxdWlwcGVkIHdpdGggYnJlYXN0cGxhdGVzIG9mIGlyb24sIGFuZCBjYXJyaWVkIGdsZWFtaW5nIHdoaXRlIHNoaWVsZHMuIEZvciBodXJsaW5nLCBlYWNoIG1hbiBoYWQgdHdvIGxhbmNlczsgYW5kIGF0IGNsb3NlIHF1YXJ0ZXJzIHRoZXkgdXNlZCBsYXJnZSwgaGVhdnkgc3dvcmRzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUsIGhvd2V2ZXIsIHRoZXkgZGlkIG5vdCBjaGFyZ2UgZGlyZWN0bHkgdXBvbiB0aGUgUm9tYW5zLCBidXQgc3dlcnZlZCB0byB0aGUgcmlnaHQgYW5kIHRyaWVkIHRvIGRyYXcgdGhlbSBhbG9uZyBncmFkdWFsbHkgdW50aWwgdGhleSBnb3QgdGhlbSBiZXR3ZWVuIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIGluZmFudHJ5LCB3aGljaCB3YXMgZHJhd24gdXAgb24gdGhlaXIgbGVmdC4gVGhlIFJvbWFuIGNvbW1hbmRlcnMgcGVyY2VpdmVkIHRoZSBjcmFmdHkgZGVzaWduLCBidXQgZGlkIG5vdCBzdWNjZWVkIGluIGhvbGRpbmcgdGhlaXIgc29sZGllcnMgYmFjazsgZm9yIG9uZSBvZiB0aGVtIHNob3V0ZWQgdGhhdCB0aGUgZW5lbXkgd2FzIHRha2luZyB0byBmbGlnaHQsIGFuZCB0aGVuIGFsbCBzZXQgb3V0IHRvIHB1cnN1ZSB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5NZWFud2hpbGUgdGhlIGluZmFudHJ5IG9mIHRoZSBCYXJiYXJpYW5zIGNhbWUgb24gdG8gdGhlIGF0dGFjayBsaWtlIGEgdmFzdCBzZWEgaW4gbW90aW9uLiBUaGVuIE1hcml1cywgYWZ0ZXIgd2FzaGluZyBoaXMgaGFuZHMsIGxpZnRlZCB0aGVtIHRvIGhlYXZlbiBhbmQgdm93ZWQgYSBoZWNhdG9tYiB0byB0aGUgZ29kczsgQ2F0dWx1cyBhbHNvIGluIGxpa2UgbWFubmVyIGxpZnRlZCBoaXMgaGFuZHMgYW5kIHZvd2VkIHRoYXQgaGUgd291bGQgY29uc2VjcmF0ZSB0aGUgZm9ydHVuZSBvZiB0aGF0IGRheS4gSXQgaXMgc2FpZCwgdG9vLCB0aGF0IE1hcml1cyBvZmZlcmVkIHNhY3JpZmljZSwgYW5kIHRoYXQgd2hlbiB0aGUgdmljdGltcyBoYWQgYmVlbiBzaG93biB0byBoaW0sIGhlIGNyaWVkIHdpdGggYSBsb3VkIHZvaWNlOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1pbmUgaXMgdGhlIHZpY3RvcnkuPC9xPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCBob3dldmVyLCB0aGV5IGRpZCBub3QgY2hhcmdlIGRpcmVjdGx5IHVwb24gdGhlIFJvbWFucywgYnV0IHN3ZXJ2ZWQgdG8gdGhlIHJpZ2h0IGFuZCB0cmllZCB0byBkcmF3IHRoZW0gYWxvbmcgZ3JhZHVhbGx5IHVudGlsIHRoZXkgZ290IHRoZW0gYmV0d2VlbiB0aGVtc2VsdmVzIGFuZCB0aGVpciBpbmZhbnRyeSwgd2hpY2ggd2FzIGRyYXduIHVwIG9uIHRoZWlyIGxlZnQuIFRoZSBSb21hbiBjb21tYW5kZXJzIHBlcmNlaXZlZCB0aGUgY3JhZnR5IGRlc2lnbiwgYnV0IGRpZCBub3Qgc3VjY2VlZCBpbiBob2xkaW5nIHRoZWlyIHNvbGRpZXJzIGJhY2s7IGZvciBvbmUgb2YgdGhlbSBzaG91dGVkIHRoYXQgdGhlIGVuZW15IHdhcyB0YWtpbmcgdG8gZmxpZ2h0LCBhbmQgdGhlbiBhbGwgc2V0IG91dCB0byBwdXJzdWUgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSB0aGUgaW5mYW50cnkgb2YgdGhlIEJhcmJhcmlhbnMgY2FtZSBvbiB0byB0aGUgYXR0YWNrIGxpa2UgYSB2YXN0IHNlYSBpbiBtb3Rpb24uIFRoZW4gTWFyaXVzLCBhZnRlciB3YXNoaW5nIGhpcyBoYW5kcywgbGlmdGVkIHRoZW0gdG8gaGVhdmVuIGFuZCB2b3dlZCBhIGhlY2F0b21iIHRvIHRoZSBnb2RzOyBDYXR1bHVzIGFsc28gaW4gbGlrZSBtYW5uZXIgbGlmdGVkIGhpcyBoYW5kcyBhbmQgdm93ZWQgdGhhdCBoZSB3b3VsZCBjb25zZWNyYXRlIHRoZSBmb3J0dW5lIG9mIHRoYXQgZGF5LiBJdCBpcyBzYWlkLCB0b28sIHRoYXQgTWFyaXVzIG9mZmVyZWQgc2FjcmlmaWNlLCBhbmQgdGhhdCB3aGVuIHRoZSB2aWN0aW1zIGhhZCBiZWVuIHNob3duIHRvIGhpbSwgaGUgY3JpZWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NaW5lIGlzIHRoZSB2aWN0b3J5LjwvcT4gCgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBhdHRhY2sgaGFkIGJlZ3VuLCBob3dldmVyLCBhbiBleHBlcmllbmNlIGJlZmVsbCBNYXJpdXMgd2hpY2ggc2lnbmlmaWVkIHRoZSBkaXZpbmUgZGlzcGxlYXN1cmUsIGFjY29yZGluZyB0byBTdWxsYS4gRm9yIGFuIGltbWVuc2UgY2xvdWQgb2YgZHVzdCB3YXMgcmFpc2VkLCBhcyB3YXMgdG8gYmUgZXhwZWN0ZWQsIGFuZCB0aGUgdHdvIGFybWllcyB3ZXJlIGhpZGRlbiBmcm9tIG9uZSBhbm90aGVyIGJ5IGl0LCBzbyB0aGF0IE1hcml1cywgd2hlbiBoZSBmaXJzdCBsZWQgaGlzIGZvcmNlcyB0byB0aGUgYXR0YWNrLCBtaXNzZWQgdGhlIGVuZW15LCBwYXNzZWQgYnkgdGhlaXIgbGluZXMgb2YgYmF0dGxlLCBhbmQgbW92ZWQgYWltbGVzc2x5IHVwIGFuZCBkb3duIHRoZSBwbGFpbiBmb3Igc29tZSB0aW1lLiBNZWFud2hpbGUsIGFzIGNoYW5jZSB3b3VsZCBoYXZlIGl0LCB0aGUgQmFyYmFyaWFucyBlbmdhZ2VkIGZpZXJjZWx5IHdpdGggQ2F0dWx1cywgYW5kIGhlIGFuZCBoaXMgc29sZGllcnMsIGFtb25nIHdob20gU3VsbGEgc2F5cyBoZSBoaW1zZWxmIHdhcyBwb3N0ZWQsIGJvcmUgdGhlIGJydW50IG9mIHRoZSBzdHJ1Z2dsZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFucyB3ZXJlIGZhdm91cmVkIGluIHRoZSBzdHJ1Z2dsZSwgU3VsbGEgc2F5cywgYnkgdGhlIGhlYXQsIGFuZCBieSB0aGUgc3VuLCB3aGljaCBzaG9uZSBpbiB0aGUgZmFjZXMgb2YgdGhlIENpbWJyaS4gRm9yIHRoZSBCYXJiYXJpYW5zIHdlcmUgd2VsbCBhYmxlIHRvIGVuZHVyZSBjb2xkLCBhbmQgaGFkIGJlZW4gYnJvdWdodCB1cCBpbiBzaGFkeSBhbmQgY2hpbGx5IHJlZ2lvbnMsIGFzIEkgaGF2ZSBzYWlkLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4gCiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxMS41IiB2YWxpZD0ieWVzIj5DaGFwdGVyIHhpLiA1IGYgPC9iaWJsPi4gPC9ub3RlPiBUaGV5IHdlcmUgdGhlcmVmb3JlIHVuZG9uZSBieSB0aGUgaGVhdDsgdGhleSBzd2VhdGVkIHByb2Z1c2VseSwgYnJlYXRoZWQgd2l0aCBkaWZmaWN1bHR5LCBhbmQgd2VyZSBmb3JjZWQgdG8gaG9sZCB0aGVpciBzaGllbGRzIGJlZm9yZSB0aGVpciBmYWNlcy4gRm9yIHRoZSBiYXR0bGUgd2FzIGZvdWdodCBhZnRlciB0aGUgc3VtbWVyIHNvbHN0aWNlLCB3aGljaCBmYWxscywgYnkgUm9tYW4gcmVja29uaW5nLCB0aHJlZSBkYXlzIGJlZm9yZSB0aGUgbmV3IG1vb24gb2YgdGhlIG1vbnRoIG5vdyBjYWxsZWQgQXVndXN0LCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5hLmQuIElJSS4gPGZvcmVpZ24gbGFuZz0ibGEiPkthbGVuZGFzIEF1Z3VzdGk8L2ZvcmVpZ24+LiA8L25vdGU+IGJ1dCB0aGVuIFNleHRpbGlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgdGhlIGR1c3QsIGJ5IGhpZGluZyB0aGUgZW5lbXksIGhlbHBlZCB0byBlbmNvdXJhZ2UgdGhlIFJvbWFucy4gRm9yIHRoZXkgY291bGQgbm90IHNlZSBmcm9tIGFmYXIgdGhlIGdyZWF0IG51bWJlcnMgb2YgdGhlIGZvZSwgYnV0IGVhY2ggb25lIG9mIHRoZW0gZmVsbCBhdCBhIHJ1biB1cG9uIHRoZSBtYW4ganVzdCBvdmVyIGFnYWluc3QgaGltLCBhbmQgZm91Z2h0IGhpbSBoYW5kIHRvIGhhbmQsIHdpdGhvdXQgaGF2aW5nIGJlZW4gdGVycmlmaWVkIGJ5IHRoZSBzaWdodCBvZiB0aGUgcmVzdCBvZiB0aGUgaG9zdC4gQW5kIHRoZWlyIGJvZGllcyB3ZXJlIHNvIGludXJlZCB0byB0b2lsIGFuZCBzbyB0aG9yb3VnaGx5IHRyYWluZWQgdGhhdCBub3QgYSBSb21hbiB3YXMgb2JzZXJ2ZWQgdG8gc3dlYXQgb3IgcGFudCwgaW4gc3BpdGUgb2YgdGhlIGdyZWF0IGhlYXQgYW5kIHRoZSBydW4gd2l0aCB3aGljaCB0aGV5IGNhbWUgdG8gdGhlIGVuY291bnRlci4gVGhpcyBpcyB3aGF0IENhdHVsdXMgaGltc2VsZiBpcyBzYWlkIHRvIGhhdmUgd3JpdHRlbiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYXR1bHVzIHdyb3RlIGEgaGlzdG9yeSBvZiBoaXMgY29uc3Vsc2hpcCwgb2Ygd2hpY2ggQ2ljZXJvIHNwZWFrcyBpbiB0ZXJtcyBvZiBoaWdoIHByYWlzZSAoIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIGFkIEJydXQuIDEzMiIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzIDwvdGl0bGU+IDM1LCAxMzIgZmYuIDwvYmlibD4pLiA8L25vdGU+IGluIGV4dG9sbGluZyBoaXMgc29sZGllcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBhdHRhY2sgaGFkIGJlZ3VuLCBob3dldmVyLCBhbiBleHBlcmllbmNlIGJlZmVsbCBNYXJpdXMgd2hpY2ggc2lnbmlmaWVkIHRoZSBkaXZpbmUgZGlzcGxlYXN1cmUsIGFjY29yZGluZyB0byBTdWxsYS4gRm9yIGFuIGltbWVuc2UgY2xvdWQgb2YgZHVzdCB3YXMgcmFpc2VkLCBhcyB3YXMgdG8gYmUgZXhwZWN0ZWQsIGFuZCB0aGUgdHdvIGFybWllcyB3ZXJlIGhpZGRlbiBmcm9tIG9uZSBhbm90aGVyIGJ5IGl0LCBzbyB0aGF0IE1hcml1cywgd2hlbiBoZSBmaXJzdCBsZWQgaGlzIGZvcmNlcyB0byB0aGUgYXR0YWNrLCBtaXNzZWQgdGhlIGVuZW15LCBwYXNzZWQgYnkgdGhlaXIgbGluZXMgb2YgYmF0dGxlLCBhbmQgbW92ZWQgYWltbGVzc2x5IHVwIGFuZCBkb3duIHRoZSBwbGFpbiBmb3Igc29tZSB0aW1lLiBNZWFud2hpbGUsIGFzIGNoYW5jZSB3b3VsZCBoYXZlIGl0LCB0aGUgQmFyYmFyaWFucyBlbmdhZ2VkIGZpZXJjZWx5IHdpdGggQ2F0dWx1cywgYW5kIGhlIGFuZCBoaXMgc29sZGllcnMsIGFtb25nIHdob20gU3VsbGEgc2F5cyBoZSBoaW1zZWxmIHdhcyBwb3N0ZWQsIGJvcmUgdGhlIGJydW50IG9mIHRoZSBzdHJ1Z2dsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMgd2VyZSBmYXZvdXJlZCBpbiB0aGUgc3RydWdnbGUsIFN1bGxhIHNheXMsIGJ5IHRoZSBoZWF0LCBhbmQgYnkgdGhlIHN1biwgd2hpY2ggc2hvbmUgaW4gdGhlIGZhY2VzIG9mIHRoZSBDaW1icmkuIEZvciB0aGUgQmFyYmFyaWFucyB3ZXJlIHdlbGwgYWJsZSB0byBlbmR1cmUgY29sZCwgYW5kIGhhZCBiZWVuIGJyb3VnaHQgdXAgaW4gc2hhZHkgYW5kIGNoaWxseSByZWdpb25zLCBhcyBJIGhhdmUgc2FpZC4gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4gCiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDExLjUiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeGkuIDUgZiA8L2JpYmw+LiA8L25vdGU+IFRoZXkgd2VyZSB0aGVyZWZvcmUgdW5kb25lIGJ5IHRoZSBoZWF0OyB0aGV5IHN3ZWF0ZWQgcHJvZnVzZWx5LCBicmVhdGhlZCB3aXRoIGRpZmZpY3VsdHksIGFuZCB3ZXJlIGZvcmNlZCB0byBob2xkIHRoZWlyIHNoaWVsZHMgYmVmb3JlIHRoZWlyIGZhY2VzLiBGb3IgdGhlIGJhdHRsZSB3YXMgZm91Z2h0IGFmdGVyIHRoZSBzdW1tZXIgc29sc3RpY2UsIHdoaWNoIGZhbGxzLCBieSBSb21hbiByZWNrb25pbmcsIHRocmVlIGRheXMgYmVmb3JlIHRoZSBuZXcgbW9vbiBvZiB0aGUgbW9udGggbm93IGNhbGxlZCBBdWd1c3QsIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDExLjUiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeGkuIDUgZiA8L2JpYmw+LiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPmEuZC4gSUlJLiA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5LYWxlbmRhcyBBdWd1c3RpPC9mb3JlaWduPi4gPC9ub3RlPiBidXQgdGhlbiBTZXh0aWxpcy4gCgkJCQk8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5LYWxlbmRhcyBBdWd1c3RpPC9mb3JlaWduPi4gPC90cmFuc2xhdGlvbj4="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgZHVzdCwgYnkgaGlkaW5nIHRoZSBlbmVteSwgaGVscGVkIHRvIGVuY291cmFnZSB0aGUgUm9tYW5zLiBGb3IgdGhleSBjb3VsZCBub3Qgc2VlIGZyb20gYWZhciB0aGUgZ3JlYXQgbnVtYmVycyBvZiB0aGUgZm9lLCBidXQgZWFjaCBvbmUgb2YgdGhlbSBmZWxsIGF0IGEgcnVuIHVwb24gdGhlIG1hbiBqdXN0IG92ZXIgYWdhaW5zdCBoaW0sIGFuZCBmb3VnaHQgaGltIGhhbmQgdG8gaGFuZCwgd2l0aG91dCBoYXZpbmcgYmVlbiB0ZXJyaWZpZWQgYnkgdGhlIHNpZ2h0IG9mIHRoZSByZXN0IG9mIHRoZSBob3N0LiBBbmQgdGhlaXIgYm9kaWVzIHdlcmUgc28gaW51cmVkIHRvIHRvaWwgYW5kIHNvIHRob3JvdWdobHkgdHJhaW5lZCB0aGF0IG5vdCBhIFJvbWFuIHdhcyBvYnNlcnZlZCB0byBzd2VhdCBvciBwYW50LCBpbiBzcGl0ZSBvZiB0aGUgZ3JlYXQgaGVhdCBhbmQgdGhlIHJ1biB3aXRoIHdoaWNoIHRoZXkgY2FtZSB0byB0aGUgZW5jb3VudGVyLiBUaGlzIGlzIHdoYXQgQ2F0dWx1cyBoaW1zZWxmIGlzIHNhaWQgdG8gaGF2ZSB3cml0dGVuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2F0dWx1cyB3cm90ZSBhIGhpc3Rvcnkgb2YgaGlzIGNvbnN1bHNoaXAsIG9mIHdoaWNoIENpY2VybyBzcGVha3MgaW4gdGVybXMgb2YgaGlnaCBwcmFpc2UgKCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIGFkIEJydXQuIDEzMiIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXMgPC90aXRsZT4gMzUsIDEzMiBmZi4gPC9iaWJsPikuIDwvbm90ZT4gaW4gZXh0b2xsaW5nIGhpcyBzb2xkaWVycy4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBhZCBCcnV0LiAxMzIiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzIDwvdGl0bGU+IDM1LCAxMzIgZmYuIDwvYmlibD4pLiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXMgPC90aXRsZT4gMzUsIDEzMiBmZi4gPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGdyZWF0ZXN0IG51bWJlciBhbmQgdGhlIGJlc3QgZmlnaHRlcnMgb2YgdGhlIGVuZW15IHdlcmUgY3V0IHRvIHBpZWNlcyBvbiB0aGUgc3BvdDsgZm9yIHRvIHByZXZlbnQgdGhlaXIgcmFua3MgZnJvbSBiZWluZyBicm9rZW4sIHRob3NlIHdobyBmb3VnaHQgaW4gZnJvbnQgd2VyZSBib3VuZCBmYXN0IHRvIG9uZSBhbm90aGVyIHdpdGggbG9uZyBjaGFpbnMgd2hpY2ggd2VyZSBwYXNzZWQgdGhyb3VnaCB0aGVpciBiZWx0cy4gVGhlIGZ1Z2l0aXZlcywgaG93ZXZlciwgd2VyZSBkcml2ZW4gYmFjayB0byB0aGVpciBlbnRyZW5jaG1lbnRzLCB3aGVyZSB0aGUgUm9tYW5zIGJlaGVsZCBhIG1vc3QgdHJhZ2ljIHNwZWN0YWNsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdvbWVuLCBpbiBibGFjayBnYXJtZW50cywgc3Rvb2QgYXQgdGhlIHdhZ2dvbnMgYW5kIHNsZXcgdGhlIGZ1Z2l0aXZlc+KAlHRoZWlyIGh1c2JhbmRzIG9yIGJyb3RoZXJzIG9yIGZhdGhlcnMsIHRoZW4gc3RyYW5nbGVkIHRoZWlyIGxpdHRsZSBjaGlsZHJlbiBhbmQgY2FzdCB0aGVtIGJlbmVhdGggdGhlIHdoZWVscyBvZiB0aGUgd2FnZ29ucyBvciB0aGUgZmVldCBvZiB0aGUgY2F0dGxlLCBhbmQgdGhlbiBjdXQgdGhlaXIgb3duIHRocm9hdHMuIEl0IGlzIHNhaWQgdGhhdCBvbmUgd29tYW4gaHVuZyBkYW5nbGluZyBmcm9tIHRoZSB0aXAgb2YgYSB3YWdnb24tcG9sZSwgd2l0aCBoZXIgY2hpbGRyZW4gdGllZCB0byBlaXRoZXIgYW5rbGU7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRoZSBtZW4sIGZvciBsYWNrIG9mIHRyZWVzLCBmYXN0ZW5lZCB0aGVtc2VsdmVzIGJ5IHRoZSBuZWNrIHRvIHRoZSBob3JucyBvZiB0aGUgY2F0dGxlLCBvciB0byB0aGVpciBsZWdzLCB0aGVuIHBsaWVkIHRoZSBnb2FkLCBhbmQgd2VyZSBkcmFnZ2VkIG9yIHRyYW1wbGVkIHRvIGRlYXRoIGFzIHRoZSBjYXR0bGUgZGFzaGVkIGF3YXkuIE5ldmVydGhlbGVzcywgaW4gc3BpdGUgb2Ygc3VjaCBzZWxmLWRlc3RydWN0aW9uLCBtb3JlIHRoYW4gc2l4dHkgdGhvdXNhbmQgd2VyZSB0YWtlbiBwcmlzb25lcnM7IGFuZCB0aG9zZSB3aG8gZmVsbCB3ZXJlIHNhaWQgdG8gaGF2ZSBiZWVuIHR3aWNlIHRoYXQgbnVtYmVyLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGdyZWF0ZXN0IG51bWJlciBhbmQgdGhlIGJlc3QgZmlnaHRlcnMgb2YgdGhlIGVuZW15IHdlcmUgY3V0IHRvIHBpZWNlcyBvbiB0aGUgc3BvdDsgZm9yIHRvIHByZXZlbnQgdGhlaXIgcmFua3MgZnJvbSBiZWluZyBicm9rZW4sIHRob3NlIHdobyBmb3VnaHQgaW4gZnJvbnQgd2VyZSBib3VuZCBmYXN0IHRvIG9uZSBhbm90aGVyIHdpdGggbG9uZyBjaGFpbnMgd2hpY2ggd2VyZSBwYXNzZWQgdGhyb3VnaCB0aGVpciBiZWx0cy4gVGhlIGZ1Z2l0aXZlcywgaG93ZXZlciwgd2VyZSBkcml2ZW4gYmFjayB0byB0aGVpciBlbnRyZW5jaG1lbnRzLCB3aGVyZSB0aGUgUm9tYW5zIGJlaGVsZCBhIG1vc3QgdHJhZ2ljIHNwZWN0YWNsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3b21lbiwgaW4gYmxhY2sgZ2FybWVudHMsIHN0b29kIGF0IHRoZSB3YWdnb25zIGFuZCBzbGV3IHRoZSBmdWdpdGl2ZXPigJR0aGVpciBodXNiYW5kcyBvciBicm90aGVycyBvciBmYXRoZXJzLCB0aGVuIHN0cmFuZ2xlZCB0aGVpciBsaXR0bGUgY2hpbGRyZW4gYW5kIGNhc3QgdGhlbSBiZW5lYXRoIHRoZSB3aGVlbHMgb2YgdGhlIHdhZ2dvbnMgb3IgdGhlIGZlZXQgb2YgdGhlIGNhdHRsZSwgYW5kIHRoZW4gY3V0IHRoZWlyIG93biB0aHJvYXRzLiBJdCBpcyBzYWlkIHRoYXQgb25lIHdvbWFuIGh1bmcgZGFuZ2xpbmcgZnJvbSB0aGUgdGlwIG9mIGEgd2FnZ29uLXBvbGUsIHdpdGggaGVyIGNoaWxkcmVuIHRpZWQgdG8gZWl0aGVyIGFua2xlOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRoZSBtZW4sIGZvciBsYWNrIG9mIHRyZWVzLCBmYXN0ZW5lZCB0aGVtc2VsdmVzIGJ5IHRoZSBuZWNrIHRvIHRoZSBob3JucyBvZiB0aGUgY2F0dGxlLCBvciB0byB0aGVpciBsZWdzLCB0aGVuIHBsaWVkIHRoZSBnb2FkLCBhbmQgd2VyZSBkcmFnZ2VkIG9yIHRyYW1wbGVkIHRvIGRlYXRoIGFzIHRoZSBjYXR0bGUgZGFzaGVkIGF3YXkuIE5ldmVydGhlbGVzcywgaW4gc3BpdGUgb2Ygc3VjaCBzZWxmLWRlc3RydWN0aW9uLCBtb3JlIHRoYW4gc2l4dHkgdGhvdXNhbmQgd2VyZSB0YWtlbiBwcmlzb25lcnM7IGFuZCB0aG9zZSB3aG8gZmVsbCB3ZXJlIHNhaWQgdG8gaGF2ZSBiZWVuIHR3aWNlIHRoYXQgbnVtYmVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBlbmVteSdzIHByb3BlcnR5IGJlY2FtZSB0aGUgYm9vdHkgb2YgdGhlIHNvbGRpZXJzIG9mIE1hcml1cywgYnV0IHRoZSBzcG9pbHMgb2YgYmF0dGxlLCB0aGUgc3RhbmRhcmRzLCBhbmQgdGhlIHRydW1wZXRzLCB3ZXJlIGJyb3VnaHQsIHdlIGFyZSB0b2xkLCB0byB0aGUgY2FtcCBvZiBDYXR1bHVzIGFuZCBDYXR1bHVzIHJlbGllZCBjaGllZmx5IHVwb24gdGhpcyBhcyBhIHByb29mIHRoYXQgdGhlIHZpY3Rvcnkgd2FzIHdvbiBieSBoaXMgbWVuLiBGdXJ0aGVybW9yZSwgYSBkaXNwdXRlIGZvciB0aGUgaG9ub3VyIG9mIHRoZSB2aWN0b3J5IGFyb3NlIGFtb25nIHRoZSBzb2xkaWVycywgYXMgd2FzIG5hdHVyYWwsIGFuZCB0aGUgbWVtYmVycyBvZiBhbiBlbWJhc3N5IGZyb20gUGFybWEgd2VyZSBjaG9zZW4gdG8gYWN0IGFzIGFyYml0cmF0b3JzLiBUaGVzZSBtZW4gdGhlIHNvbGRpZXJzIG9mIENhdHVsdXMgY29uZHVjdGVkIGFtb25nIHRoZSBkZWFkIGJvZGllcyBvZiB0aGUgZW5lbXksIHdoaWNoIHdlcmUgY2xlYXJseSBzZWVuIHRvIGhhdmUgYmVlbiBwaWVyY2VkIGJ5IHRoZWlyIGphdmVsaW5zOyBmb3IgdGhlc2UgY291bGQgYmUga25vd24gYnkgdGhlIG5hbWUgb2YgQ2F0dWx1cyB3aGljaCBoYWQgYmVlbiBjdXQgaW50byB0aGUgc2hhZnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBlbnRpcmUgc3VjY2VzcyB3YXMgYXR0cmlidXRlZCB0byBNYXJpdXMsIGJvdGggb24gYWNjb3VudCBvZiBoaXMgZm9ybWVyIHZpY3RvcnkgYW5kIG9mIGhpcyBzdXBlcmlvciByYW5rLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYXJpdXMgd2FzIGNvbnN1bCBzdGlsbCwgd2hpbGUgQ2F0dWx1cyBoYWQgbm90IGJlZW4gcmUtZWxlY3RlZCwgYW5kIHdhcyBvbmx5IHByby1jb25zdWwuIDwvbm90ZT4gQWJvdmUgYWxsLCB0aGUgcGVvcGxlIGhhaWxlZCBoaW0gYXMgdGhlIHRoaXJkIGZvdW5kZXIgb2YgUm9tZSwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+V2l0aCBSb211bHVzIGFuZCBDYW1pbGx1cy4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2FtLiAzMS4yIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYW1pbGx1cyA8L3RpdGxlPiwgeHh4aS4gMiA8L2JpYmw+LiA8L25vdGU+IG9uIHRoZSBncm91bmQgdGhhdCB0aGUgcGVyaWwgd2hpY2ggaGUgaGFkIGF2ZXJ0ZWQgZnJvbSB0aGUgY2l0eSB3YXMgbm90IGxlc3MgdGhhbiB0aGF0IG9mIHRoZSBHYWxsaWMgaW52YXNpb247IGFuZCBhbGwgb2YgdGhlbSwgYXMgdGhleSBtYWRlIG1lcnJ5IGF0IGhvbWUgd2l0aCB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIHdvdWxkIGJyaW5nIGNlcmVtb25pYWwgb2ZmZXJpbmdzIG9mIGZvb2QgYW5kIGxpYmF0aW9ucyBvZiB3aW5lIHRvIE1hcml1cyBhcyB3ZWxsIGFzIHRvIHRoZSBnb2RzLCBhbmQgdGhleSB3ZXJlIGluc2lzdGVudCB0aGF0IGhlIGFsb25lIHNob3VsZCBjZWxlYnJhdGUgYm90aCB0cml1bXBocy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzLCBob3dldmVyLCB3b3VsZCBub3QgZG8gdGhpcywgYnV0IGNlbGVicmF0ZWQgaGlzIHRyaXVtcGggd2l0aCBDYXR1bHVzLCB3aXNoaW5nIHRvIHNob3cgaGltc2VsZiBhIG1hbiBvZiBtb2RlcmF0aW9uIGFmdGVyIGEgY291cnNlIG9mIHNvIGdyZWF0IGdvb2QgZm9ydHVuZS4gUGVyaGFwcywgdG9vLCBoZSB3YXMgYWZyYWlkIG9mIHRoZSBzb2xkaWVycywgd2hvIHdlcmUgZHJhd24gdXAgYW5kIHJlYWR5LCBpbiBjYXNlIENhdHVsdXMgd2VyZSBkZXByaXZlZCBvZiBoaXMgaG9ub3VyLCB0byBwcmV2ZW50IE1hcml1cyBhbHNvIGZyb20gY2VsZWJyYXRpbmcgYSB0cml1bXBoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIGVuZW15J3MgcHJvcGVydHkgYmVjYW1lIHRoZSBib290eSBvZiB0aGUgc29sZGllcnMgb2YgTWFyaXVzLCBidXQgdGhlIHNwb2lscyBvZiBiYXR0bGUsIHRoZSBzdGFuZGFyZHMsIGFuZCB0aGUgdHJ1bXBldHMsIHdlcmUgYnJvdWdodCwgd2UgYXJlIHRvbGQsIHRvIHRoZSBjYW1wIG9mIENhdHVsdXMgYW5kIENhdHVsdXMgcmVsaWVkIGNoaWVmbHkgdXBvbiB0aGlzIGFzIGEgcHJvb2YgdGhhdCB0aGUgdmljdG9yeSB3YXMgd29uIGJ5IGhpcyBtZW4uIEZ1cnRoZXJtb3JlLCBhIGRpc3B1dGUgZm9yIHRoZSBob25vdXIgb2YgdGhlIHZpY3RvcnkgYXJvc2UgYW1vbmcgdGhlIHNvbGRpZXJzLCBhcyB3YXMgbmF0dXJhbCwgYW5kIHRoZSBtZW1iZXJzIG9mIGFuIGVtYmFzc3kgZnJvbSBQYXJtYSB3ZXJlIGNob3NlbiB0byBhY3QgYXMgYXJiaXRyYXRvcnMuIFRoZXNlIG1lbiB0aGUgc29sZGllcnMgb2YgQ2F0dWx1cyBjb25kdWN0ZWQgYW1vbmcgdGhlIGRlYWQgYm9kaWVzIG9mIHRoZSBlbmVteSwgd2hpY2ggd2VyZSBjbGVhcmx5IHNlZW4gdG8gaGF2ZSBiZWVuIHBpZXJjZWQgYnkgdGhlaXIgamF2ZWxpbnM7IGZvciB0aGVzZSBjb3VsZCBiZSBrbm93biBieSB0aGUgbmFtZSBvZiBDYXR1bHVzIHdoaWNoIGhhZCBiZWVuIGN1dCBpbnRvIHRoZSBzaGFmdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBlbnRpcmUgc3VjY2VzcyB3YXMgYXR0cmlidXRlZCB0byBNYXJpdXMsIGJvdGggb24gYWNjb3VudCBvZiBoaXMgZm9ybWVyIHZpY3RvcnkgYW5kIG9mIGhpcyBzdXBlcmlvciByYW5rLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hcml1cyB3YXMgY29uc3VsIHN0aWxsLCB3aGlsZSBDYXR1bHVzIGhhZCBub3QgYmVlbiByZS1lbGVjdGVkLCBhbmQgd2FzIG9ubHkgcHJvLWNvbnN1bC4gPC9ub3RlPiBBYm92ZSBhbGwsIHRoZSBwZW9wbGUgaGFpbGVkIGhpbSBhcyB0aGUgdGhpcmQgZm91bmRlciBvZiBSb21lLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPldpdGggUm9tdWx1cyBhbmQgQ2FtaWxsdXMuIFNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2FtLiAzMS4yIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhbWlsbHVzIDwvdGl0bGU+LCB4eHhpLiAyIDwvYmlibD4uIDwvbm90ZT4gb24gdGhlIGdyb3VuZCB0aGF0IHRoZSBwZXJpbCB3aGljaCBoZSBoYWQgYXZlcnRlZCBmcm9tIHRoZSBjaXR5IHdhcyBub3QgbGVzcyB0aGFuIHRoYXQgb2YgdGhlIEdhbGxpYyBpbnZhc2lvbjsgYW5kIGFsbCBvZiB0aGVtLCBhcyB0aGV5IG1hZGUgbWVycnkgYXQgaG9tZSB3aXRoIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiwgd291bGQgYnJpbmcgY2VyZW1vbmlhbCBvZmZlcmluZ3Mgb2YgZm9vZCBhbmQgbGliYXRpb25zIG9mIHdpbmUgdG8gTWFyaXVzIGFzIHdlbGwgYXMgdG8gdGhlIGdvZHMsIGFuZCB0aGV5IHdlcmUgaW5zaXN0ZW50IHRoYXQgaGUgYWxvbmUgc2hvdWxkIGNlbGVicmF0ZSBib3RoIHRyaXVtcGhzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhbS4gMzEuMiIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW1pbGx1cyA8L3RpdGxlPiwgeHh4aS4gMiA8L2JpYmw+LiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYW1pbGx1cyA8L3RpdGxlPiwgeHh4aS4gMiA8L3RyYW5zbGF0aW9uPg=="
translation['27.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cywgaG93ZXZlciwgd291bGQgbm90IGRvIHRoaXMsIGJ1dCBjZWxlYnJhdGVkIGhpcyB0cml1bXBoIHdpdGggQ2F0dWx1cywgd2lzaGluZyB0byBzaG93IGhpbXNlbGYgYSBtYW4gb2YgbW9kZXJhdGlvbiBhZnRlciBhIGNvdXJzZSBvZiBzbyBncmVhdCBnb29kIGZvcnR1bmUuIFBlcmhhcHMsIHRvbywgaGUgd2FzIGFmcmFpZCBvZiB0aGUgc29sZGllcnMsIHdobyB3ZXJlIGRyYXduIHVwIGFuZCByZWFkeSwgaW4gY2FzZSBDYXR1bHVzIHdlcmUgZGVwcml2ZWQgb2YgaGlzIGhvbm91ciwgdG8gcHJldmVudCBNYXJpdXMgYWxzbyBmcm9tIGNlbGVicmF0aW5nIGEgdHJpdW1waC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cywgdGhlbiwgaGlzIGZpZnRoIGNvbnN1bHNoaXAgd2FzIGNvbWluZyB0byBhbiBlbmQ7IGJ1dCBoZSB3YXMgYXMgZWFnZXIgZm9yIGEgc2l4dGggYXMgYW5vdGhlciB3b3VsZCBoYXZlIGJlZW4gZm9yIGhpcyBmaXJzdC4gSGUgdHJpZWQgdG8gd2luIG92ZXIgdGhlIHBlb3BsZSBieSBvYnNlcXVpb3VzIGF0dGVudGlvbnMsIGFuZCB5aWVsZGVkIHRvIHRoZSBtdWx0aXR1ZGUgaW4gb3JkZXIgdG8gZ2FpbiBpdHMgZmF2b3VyLCB0aHVzIGRvaW5nIHZpb2xlbmNlLCBub3Qgb25seSB0byB0aGUgZGlnbml0eSBhbmQgbWFqZXN0eSBvZiBoaXMgaGlnaCBvZmZpY2UsIGJ1dCBhbHNvIHRvIGhpcyBvd24gbmF0dXJlLCBzaW5jZSBoZSB3aXNoZWQgdG8gYmUgYSBjb21wbGlhbnQgbWFuIG9mIHRoZSBwZW9wbGUgd2hlbiBoZSB3YXMgbmF0dXJhbGx5IGF0IGZhcnRoZXN0IHJlbW92ZSBmcm9tIHRoaXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbmZyb250aW5nIGEgcG9saXRpY2FsIGNyaXNpcyBvciB0aGUgdHVtdWx0dW91cyB0aHJvbmcsIHdlIGFyZSB0b2xkLCBoaXMgYW1iaXRpb24gbWFkZSBoaW0gbW9zdCB0aW1vcm91cywgYW5kIHRoYXQgdW5kYXVudGVkIGZpcm1uZXNzIHdoaWNoIGhlIHNob3dlZCBpbiBiYXR0bGUgZm9yc29vayBoaW0gd2hlbiBoZSBmYWNlZCB0aGUgcG9wdWxhciBhc3NlbWJsaWVzLCBzbyB0aGF0IGhlIHdhcyBkaXNjb25jZXJ0ZWQgYnkgdGhlIG1vc3Qgb3JkaW5hcnkgcHJhaXNlIG9yIGJsYW1lLiBBbmQgeWV0IHdlIGFyZSB0b2xkIHRoYXQgd2hlbiBoZSBoYWQgYmVzdG93ZWQgY2l0aXplbnNoaXAgdXBvbiBhcyBtYW55IGFzIGEgdGhvdXNhbmQgbWVuIG9mIENhbWVyaW51bSBmb3IgY29uc3BpY3VvdXMgYnJhdmVyeSBpbiB0aGUgd2FyLCB0aGUgYWN0IHdhcyBoZWxkIHRvIGJlIGlsbGVnYWwgYW5kIHdhcyBpbXBlYWNoZWQgYnkgc29tZTsgdG8gd2hvbSBoZSByZXBsaWVkIHRoYXQgdGhlIGNsYXNoIG9mIGFybXMgaGFkIHByZXZlbnRlZCBoaXMgaGVhcmluZyB0aGUgdm9pY2Ugb2YgdGhlIGxhdy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgaGUgYXBwZWFyZWQgdG8gYmUgaW4gZ3JlYXRlciBmZWFyIGFuZCB0ZXJyb3Igb2YgdGhlIHNob3V0aW5nIGluIHRoZSBwb3B1bGFyIGFzc2VtYmxpZXMuIEF0IGFueSByYXRlLCB3aGlsZSBpbiB3YXIgaGUgaGFkIGF1dGhvcml0eSBhbmQgcG93ZXIgYmVjYXVzZSBoaXMgc2VydmljZXMgd2VyZSBuZWVkZWQsIHlldCBpbiBjaXZpbCBsaWZlIGhpcyBsZWFkZXJzaGlwIHdhcyBtb3JlIGFicmlkZ2VkLCBhbmQgaGUgdGhlcmVmb3JlIGhhZCByZWNvdXJzZSB0byB0aGUgZ29vZHdpbGwgYW5kIGZhdm91ciBvZiB0aGUgbXVsdGl0dWRlLCBub3QgY2FyaW5nIHRvIGJlIHRoZSBiZXN0IG1hbiBpZiBvbmx5IGhlIGNvdWxkIGJlIHRoZSBncmVhdGVzdC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNvbnNlcXVlbmNlIHdhcyB0aGF0IGhlIGNhbWUgaW50byBjb2xsaXNpb24gd2l0aCBhbGwgdGhlIGFyaXN0b2NyYXRzLiBJdCB3YXMgTWV0ZWxsdXMsIGhvd2V2ZXIsIHdob20gaGUgZXNwZWNpYWxseSBmZWFyZWQsIGEgbWFuIHdobyBoYWQgZXhwZXJpZW5jZWQgaGlzIGluZ3JhdGl0dWRlLCBhbmQgb25lIHdob3NlIGdlbnVpbmUgZXhjZWxsZW5jZSBtYWRlIGhpbSB0aGUgbmF0dXJhbCBlbmVteSBvZiB0aG9zZSB3aG8gdHJpZWQgdG8gaW5zaW51YXRlIHRoZW1zZWx2ZXMgYnkgZGV2aW91cyBtZXRob2RzIGludG8gcG9wdWxhciBmYXZvdXIgYW5kIHNvdWdodCB0byBjb250cm9sIHRoZSBtYXNzZXMgYnkgcGxlYXNpbmcgdGhlbS4gQWNjb3JkaW5nbHksIGhlIHNjaGVtZWQgdG8gYmFuaXNoIE1ldGVsbHVzIGZyb20gdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHB1cnBvc2UgaGUgYWxsaWVkIGhpbXNlbGYgd2l0aCBTYXR1cm5pbnVzIGFuZCBHbGF1Y2lhLCBtZW4gb2YgdGhlIGdyZWF0ZXN0IGVmZnJvbnRlcnksIHdobyBoYWQgYSByYWJibGUgb2YgbmVlZHkgYW5kIG5vaXN5IGZlbGxvd3MgYXQgdGhlaXIgYmVjayBhbmQgY2FsbCwgYW5kIHdpdGggdGhlaXIgYXNzaXN0YW5jZSB3b3VsZCBpbnRyb2R1Y2UgbGF3cy4gSGUgYWxzbyBzdGlycmVkIHVwIHRoZSBzb2xkaWVyeSwgZ290IHRoZW0gdG8gbWluZ2xlIHdpdGggdGhlIGNpdGl6ZW5zIGluIHRoZSBhc3NlbWJsaWVzLCBhbmQgdGh1cyBjb250cm9sbGVkIGEgZmFjdGlvbiB3aGljaCBjb3VsZCBvdmVycG93ZXIgTWV0ZWxsdXMuIFRoZW4sIGFjY29yZGluZyB0byBSdXRpbGl1cywgd2hvIGlzIGdlbmVyYWxseSBhIGxvdmVyIG9mIHRydXRoIGFuZCBhbiBob25lc3QgbWFuLCBidXQgaGFkIGEgcHJpdmF0ZSBxdWFycmVsIHdpdGggTWFyaXVzLCBoZSBhY3R1YWxseSBnb3QgaGlzIHNpeHRoIGNvbnN1bHNoaXAgYnkgcGF5aW5nIGRvd24gbGFyZ2Ugc3VtcyBvZiBtb25leSBhbW9uZyB0aGUgdHJpYmVzLCBhbmQgYnkgYnV5aW5nIHZvdGVzIG1hZGUgTWV0ZWxsdXMgbG9zZSBoaXMgZWxlY3Rpb24gdG8gdGhlIG9mZmljZSwgYW5kIG9idGFpbmVkIGFzIGhpcyBjb2xsZWFndWUgaW4gdGhlIGNvbnN1bHNoaXAgVmFsZXJpdXMgRmxhY2N1cywgd2hvIHdhcyBtb3JlIGEgc2VydmFudCB0aGFuIGEgY29sbGVhZ3VlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgeWV0IHRoZSBwZW9wbGUgaGFkIG5ldmVyIGJlc3Rvd2VkIHNvIG1hbnkgY29uc3Vsc2hpcHMgdXBvbiBhbnkgb3RoZXIgbWFuIGV4Y2VwdCBDb3J2aW51cyBWYWxlcml1cy4gSW4gdGhlIGNhc2Ugb2YgQ29ydmludXMsIGhvd2V2ZXIsIGZvcnR5LWZpdmUgeWVhcnMgYXJlIHNhaWQgdG8gaGF2ZSBlbGFwc2VkIGJldHdlZW4gaGlzIGZpcnN0IGFuZCBoaXMgbGFzdCBjb25zdWxzaGlwOyB3aGVyZWFzIE1hcml1cywgYWZ0ZXIgaGlzIGZpcnN0IGNvbnN1bHNoaXAsIHJhbiB0aHJvdWdoIHRoZSBvdGhlciBmaXZlIHdpdGhvdXQgYSBicmVhay4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGh1cywgdGhlbiwgaGlzIGZpZnRoIGNvbnN1bHNoaXAgd2FzIGNvbWluZyB0byBhbiBlbmQ7IGJ1dCBoZSB3YXMgYXMgZWFnZXIgZm9yIGEgc2l4dGggYXMgYW5vdGhlciB3b3VsZCBoYXZlIGJlZW4gZm9yIGhpcyBmaXJzdC4gSGUgdHJpZWQgdG8gd2luIG92ZXIgdGhlIHBlb3BsZSBieSBvYnNlcXVpb3VzIGF0dGVudGlvbnMsIGFuZCB5aWVsZGVkIHRvIHRoZSBtdWx0aXR1ZGUgaW4gb3JkZXIgdG8gZ2FpbiBpdHMgZmF2b3VyLCB0aHVzIGRvaW5nIHZpb2xlbmNlLCBub3Qgb25seSB0byB0aGUgZGlnbml0eSBhbmQgbWFqZXN0eSBvZiBoaXMgaGlnaCBvZmZpY2UsIGJ1dCBhbHNvIHRvIGhpcyBvd24gbmF0dXJlLCBzaW5jZSBoZSB3aXNoZWQgdG8gYmUgYSBjb21wbGlhbnQgbWFuIG9mIHRoZSBwZW9wbGUgd2hlbiBoZSB3YXMgbmF0dXJhbGx5IGF0IGZhcnRoZXN0IHJlbW92ZSBmcm9tIHRoaXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIGNvbmZyb250aW5nIGEgcG9saXRpY2FsIGNyaXNpcyBvciB0aGUgdHVtdWx0dW91cyB0aHJvbmcsIHdlIGFyZSB0b2xkLCBoaXMgYW1iaXRpb24gbWFkZSBoaW0gbW9zdCB0aW1vcm91cywgYW5kIHRoYXQgdW5kYXVudGVkIGZpcm1uZXNzIHdoaWNoIGhlIHNob3dlZCBpbiBiYXR0bGUgZm9yc29vayBoaW0gd2hlbiBoZSBmYWNlZCB0aGUgcG9wdWxhciBhc3NlbWJsaWVzLCBzbyB0aGF0IGhlIHdhcyBkaXNjb25jZXJ0ZWQgYnkgdGhlIG1vc3Qgb3JkaW5hcnkgcHJhaXNlIG9yIGJsYW1lLiBBbmQgeWV0IHdlIGFyZSB0b2xkIHRoYXQgd2hlbiBoZSBoYWQgYmVzdG93ZWQgY2l0aXplbnNoaXAgdXBvbiBhcyBtYW55IGFzIGEgdGhvdXNhbmQgbWVuIG9mIENhbWVyaW51bSBmb3IgY29uc3BpY3VvdXMgYnJhdmVyeSBpbiB0aGUgd2FyLCB0aGUgYWN0IHdhcyBoZWxkIHRvIGJlIGlsbGVnYWwgYW5kIHdhcyBpbXBlYWNoZWQgYnkgc29tZTsgdG8gd2hvbSBoZSByZXBsaWVkIHRoYXQgdGhlIGNsYXNoIG9mIGFybXMgaGFkIHByZXZlbnRlZCBoaXMgaGVhcmluZyB0aGUgdm9pY2Ugb2YgdGhlIGxhdy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGhlIGFwcGVhcmVkIHRvIGJlIGluIGdyZWF0ZXIgZmVhciBhbmQgdGVycm9yIG9mIHRoZSBzaG91dGluZyBpbiB0aGUgcG9wdWxhciBhc3NlbWJsaWVzLiBBdCBhbnkgcmF0ZSwgd2hpbGUgaW4gd2FyIGhlIGhhZCBhdXRob3JpdHkgYW5kIHBvd2VyIGJlY2F1c2UgaGlzIHNlcnZpY2VzIHdlcmUgbmVlZGVkLCB5ZXQgaW4gY2l2aWwgbGlmZSBoaXMgbGVhZGVyc2hpcCB3YXMgbW9yZSBhYnJpZGdlZCwgYW5kIGhlIHRoZXJlZm9yZSBoYWQgcmVjb3Vyc2UgdG8gdGhlIGdvb2R3aWxsIGFuZCBmYXZvdXIgb2YgdGhlIG11bHRpdHVkZSwgbm90IGNhcmluZyB0byBiZSB0aGUgYmVzdCBtYW4gaWYgb25seSBoZSBjb3VsZCBiZSB0aGUgZ3JlYXRlc3QuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb25zZXF1ZW5jZSB3YXMgdGhhdCBoZSBjYW1lIGludG8gY29sbGlzaW9uIHdpdGggYWxsIHRoZSBhcmlzdG9jcmF0cy4gSXQgd2FzIE1ldGVsbHVzLCBob3dldmVyLCB3aG9tIGhlIGVzcGVjaWFsbHkgZmVhcmVkLCBhIG1hbiB3aG8gaGFkIGV4cGVyaWVuY2VkIGhpcyBpbmdyYXRpdHVkZSwgYW5kIG9uZSB3aG9zZSBnZW51aW5lIGV4Y2VsbGVuY2UgbWFkZSBoaW0gdGhlIG5hdHVyYWwgZW5lbXkgb2YgdGhvc2Ugd2hvIHRyaWVkIHRvIGluc2ludWF0ZSB0aGVtc2VsdmVzIGJ5IGRldmlvdXMgbWV0aG9kcyBpbnRvIHBvcHVsYXIgZmF2b3VyIGFuZCBzb3VnaHQgdG8gY29udHJvbCB0aGUgbWFzc2VzIGJ5IHBsZWFzaW5nIHRoZW0uIEFjY29yZGluZ2x5LCBoZSBzY2hlbWVkIHRvIGJhbmlzaCBNZXRlbGx1cyBmcm9tIHRoZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHB1cnBvc2UgaGUgYWxsaWVkIGhpbXNlbGYgd2l0aCBTYXR1cm5pbnVzIGFuZCBHbGF1Y2lhLCBtZW4gb2YgdGhlIGdyZWF0ZXN0IGVmZnJvbnRlcnksIHdobyBoYWQgYSByYWJibGUgb2YgbmVlZHkgYW5kIG5vaXN5IGZlbGxvd3MgYXQgdGhlaXIgYmVjayBhbmQgY2FsbCwgYW5kIHdpdGggdGhlaXIgYXNzaXN0YW5jZSB3b3VsZCBpbnRyb2R1Y2UgbGF3cy4gSGUgYWxzbyBzdGlycmVkIHVwIHRoZSBzb2xkaWVyeSwgZ290IHRoZW0gdG8gbWluZ2xlIHdpdGggdGhlIGNpdGl6ZW5zIGluIHRoZSBhc3NlbWJsaWVzLCBhbmQgdGh1cyBjb250cm9sbGVkIGEgZmFjdGlvbiB3aGljaCBjb3VsZCBvdmVycG93ZXIgTWV0ZWxsdXMuIFRoZW4sIGFjY29yZGluZyB0byBSdXRpbGl1cywgd2hvIGlzIGdlbmVyYWxseSBhIGxvdmVyIG9mIHRydXRoIGFuZCBhbiBob25lc3QgbWFuLCBidXQgaGFkIGEgcHJpdmF0ZSBxdWFycmVsIHdpdGggTWFyaXVzLCBoZSBhY3R1YWxseSBnb3QgaGlzIHNpeHRoIGNvbnN1bHNoaXAgYnkgcGF5aW5nIGRvd24gbGFyZ2Ugc3VtcyBvZiBtb25leSBhbW9uZyB0aGUgdHJpYmVzLCBhbmQgYnkgYnV5aW5nIHZvdGVzIG1hZGUgTWV0ZWxsdXMgbG9zZSBoaXMgZWxlY3Rpb24gdG8gdGhlIG9mZmljZSwgYW5kIG9idGFpbmVkIGFzIGhpcyBjb2xsZWFndWUgaW4gdGhlIGNvbnN1bHNoaXAgVmFsZXJpdXMgRmxhY2N1cywgd2hvIHdhcyBtb3JlIGEgc2VydmFudCB0aGFuIGEgY29sbGVhZ3VlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgdGhlIHBlb3BsZSBoYWQgbmV2ZXIgYmVzdG93ZWQgc28gbWFueSBjb25zdWxzaGlwcyB1cG9uIGFueSBvdGhlciBtYW4gZXhjZXB0IENvcnZpbnVzIFZhbGVyaXVzLiBJbiB0aGUgY2FzZSBvZiBDb3J2aW51cywgaG93ZXZlciwgZm9ydHktZml2ZSB5ZWFycyBhcmUgc2FpZCB0byBoYXZlIGVsYXBzZWQgYmV0d2VlbiBoaXMgZmlyc3QgYW5kIGhpcyBsYXN0IGNvbnN1bHNoaXA7IHdoZXJlYXMgTWFyaXVzLCBhZnRlciBoaXMgZmlyc3QgY29uc3Vsc2hpcCwgcmFuIHRocm91Z2ggdGhlIG90aGVyIGZpdmUgd2l0aG91dCBhIGJyZWFrLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGlzIGxhc3QgY29uc3Vsc2hpcCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xMDAgQi5DLiA8L25vdGU+IHBhcnRpY3VsYXJseSBkaWQgTWFyaXVzIG1ha2UgaGltc2VsZiBoYXRlZCwgYmVjYXVzZSBoZSB0b29rIHBhcnQgd2l0aCBTYXR1cm5pbnVzIGluIG1hbnkgb2YgaGlzIG1pc2RlZWRzLiBPbmUgb2YgdGhlc2Ugd2FzIHRoZSBtdXJkZXIgb2YgTm9uaXVzLCB3aG9tIFNhdHVybmludXMgc2xldyBiZWNhdXNlIGhlIHdhcyBhIHJpdmFsIGNhbmRpZGF0ZSBmb3IgdGhlIHRyaWJ1bmVzaGlwLiBUaGVuLCBhcyB0cmlidW5lLCBTYXR1cm5pbnVzIGludHJvZHVjZWQgaGlzIGFncmFyaWFuIGxhdywgdG8gd2hpY2ggd2FzIGFkZGVkIGEgY2xhdXNlIHByb3ZpZGluZyB0aGF0IHRoZSBzZW5hdG9ycyBzaG91bGQgY29tZSBmb3J3YXJkIGFuZCB0YWtlIG9hdGggdGhhdCB0aGV5IHdvdWxkIGFiaWRlIGJ5IHdoYXRzb2V2ZXIgdGhlIHBlb3BsZSBtaWdodCB2b3RlIGFuZCBtYWtlIG5vIG9wcG9zaXRpb24gdG8gaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZW5hdGUgTWFyaXVzIG1hZGUgcHJldGVuY2Ugb2Ygb3Bwb3NpbmcgdGhpcyBwYXJ0IG9mIHRoZSBsYXcsIGFuZCBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIG5vdCB0YWtlIHRoZSBvYXRoLCBhbmQgdGhhdCBoZSB0aG91Z2h0IG5vIG90aGVyIHNlbnNpYmxlIG1hbiB3b3VsZDsgZm9yIGV2ZW4gaWYgdGhlIGxhdyB3ZXJlIG5vdCBhIGJhZCBvbmUsIGl0IHdhcyBhbiBpbnN1bHQgdG8gdGhlIHNlbmF0ZSB0aGF0IGl0IHNob3VsZCBiZSBjb21wZWxsZWQgdG8gbWFrZSBzdWNoIGNvbmNlc3Npb25zLCBpbnN0ZWFkIG9mIG1ha2luZyB0aGVtIHVuZGVyIHBlcnN1YXNpb24gYW5kIG9mIGl0cyBvd24gZnJlZSB3aWxsLiBIZSBzYWlkIHRoaXMsIGhvd2V2ZXIsIG5vdCBiZWNhdXNlIGl0IHdhcyBoaXMgcmVhbCBtaW5kLCBidXQgdGhhdCBoZSBtaWdodCBjYXRjaCBNZXRlbGx1cyBpbiB0aGUgdG9pbHMgb2YgYSBmYXRhbCB0cmljay4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGhpbXNlbGYgcmVnYXJkZWQgbHlpbmcgYXMgcGFydCBvZiBhIG1hbidzIGV4Y2VsbGVuY2UgYW5kIGFiaWxpdHksIG1hZGUgbm8gYWNjb3VudCBvZiBoaXMgYWdyZWVtZW50cyB3aXRoIHRoZSBzZW5hdG9ycywgYW5kIGRpZCBub3QgaW50ZW5kIHRvIGtlZXAgdGhlbTsgd2hlcmVhcyBoZSBrbmV3IHRoYXQgTWV0ZWxsdXMgd2FzIGEgc3RlYWRmYXN0IG1hbiwgd2hvIHRob3VnaHQgd2l0aCBQaW5kYXIgdGhhdCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRydXRoIGlzIHRoZSBmb3VuZGF0aW9uIG9mIGdyZWF0IGV4Y2VsbGVuY2UsPC9xPiAKICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RnJhZ21lbnQgMjIxIChCb2Vja2gpLiA8L25vdGU+IGFuZCBoZSB0aGVyZWZvcmUgd2lzaGVkIHRvIGJpbmQgaGltIGJlZm9yZWhhbmQgYnkgYSBzdGF0ZW1lbnQgdG8gdGhlIHNlbmF0ZSB0aGF0IGhlIHdvdWxkIG5vdCB0YWtlIHRoZSBvYXRoLCBhbmQgdGhlbiBoYXZlIGhpcyByZWZ1c2FsIHRvIGRvIHNvIHBsdW5nZSBoaW0gaW50byBhIGhhdHJlZCBvbiB0aGUgcGFydCBvZiB0aGUgcGVvcGxlIHRoYXQgY291bGQgbmV2ZXIgYmUgcmVtb3ZlZC4gQW5kIHRoaXMgd2FzIHdoYXQgY2FtZSB0byBwYXNzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW4gdGhpcyBsYXN0IGNvbnN1bHNoaXAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xMDAgQi5DLiA8L25vdGU+IHBhcnRpY3VsYXJseSBkaWQgTWFyaXVzIG1ha2UgaGltc2VsZiBoYXRlZCwgYmVjYXVzZSBoZSB0b29rIHBhcnQgd2l0aCBTYXR1cm5pbnVzIGluIG1hbnkgb2YgaGlzIG1pc2RlZWRzLiBPbmUgb2YgdGhlc2Ugd2FzIHRoZSBtdXJkZXIgb2YgTm9uaXVzLCB3aG9tIFNhdHVybmludXMgc2xldyBiZWNhdXNlIGhlIHdhcyBhIHJpdmFsIGNhbmRpZGF0ZSBmb3IgdGhlIHRyaWJ1bmVzaGlwLiBUaGVuLCBhcyB0cmlidW5lLCBTYXR1cm5pbnVzIGludHJvZHVjZWQgaGlzIGFncmFyaWFuIGxhdywgdG8gd2hpY2ggd2FzIGFkZGVkIGEgY2xhdXNlIHByb3ZpZGluZyB0aGF0IHRoZSBzZW5hdG9ycyBzaG91bGQgY29tZSBmb3J3YXJkIGFuZCB0YWtlIG9hdGggdGhhdCB0aGV5IHdvdWxkIGFiaWRlIGJ5IHdoYXRzb2V2ZXIgdGhlIHBlb3BsZSBtaWdodCB2b3RlIGFuZCBtYWtlIG5vIG9wcG9zaXRpb24gdG8gaXQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZW5hdGUgTWFyaXVzIG1hZGUgcHJldGVuY2Ugb2Ygb3Bwb3NpbmcgdGhpcyBwYXJ0IG9mIHRoZSBsYXcsIGFuZCBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIG5vdCB0YWtlIHRoZSBvYXRoLCBhbmQgdGhhdCBoZSB0aG91Z2h0IG5vIG90aGVyIHNlbnNpYmxlIG1hbiB3b3VsZDsgZm9yIGV2ZW4gaWYgdGhlIGxhdyB3ZXJlIG5vdCBhIGJhZCBvbmUsIGl0IHdhcyBhbiBpbnN1bHQgdG8gdGhlIHNlbmF0ZSB0aGF0IGl0IHNob3VsZCBiZSBjb21wZWxsZWQgdG8gbWFrZSBzdWNoIGNvbmNlc3Npb25zLCBpbnN0ZWFkIG9mIG1ha2luZyB0aGVtIHVuZGVyIHBlcnN1YXNpb24gYW5kIG9mIGl0cyBvd24gZnJlZSB3aWxsLiBIZSBzYWlkIHRoaXMsIGhvd2V2ZXIsIG5vdCBiZWNhdXNlIGl0IHdhcyBoaXMgcmVhbCBtaW5kLCBidXQgdGhhdCBoZSBtaWdodCBjYXRjaCBNZXRlbGx1cyBpbiB0aGUgdG9pbHMgb2YgYSBmYXRhbCB0cmljay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBoaW1zZWxmIHJlZ2FyZGVkIGx5aW5nIGFzIHBhcnQgb2YgYSBtYW4ncyBleGNlbGxlbmNlIGFuZCBhYmlsaXR5LCBtYWRlIG5vIGFjY291bnQgb2YgaGlzIGFncmVlbWVudHMgd2l0aCB0aGUgc2VuYXRvcnMsIGFuZCBkaWQgbm90IGludGVuZCB0byBrZWVwIHRoZW07IHdoZXJlYXMgaGUga25ldyB0aGF0IE1ldGVsbHVzIHdhcyBhIHN0ZWFkZmFzdCBtYW4sIHdobyB0aG91Z2h0IHdpdGggUGluZGFyIHRoYXQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRydXRoIGlzIHRoZSBmb3VuZGF0aW9uIG9mIGdyZWF0IGV4Y2VsbGVuY2UsPC9xPiAKICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5GcmFnbWVudCAyMjEgKEJvZWNraCkuIDwvbm90ZT4gYW5kIGhlIHRoZXJlZm9yZSB3aXNoZWQgdG8gYmluZCBoaW0gYmVmb3JlaGFuZCBieSBhIHN0YXRlbWVudCB0byB0aGUgc2VuYXRlIHRoYXQgaGUgd291bGQgbm90IHRha2UgdGhlIG9hdGgsIGFuZCB0aGVuIGhhdmUgaGlzIHJlZnVzYWwgdG8gZG8gc28gcGx1bmdlIGhpbSBpbnRvIGEgaGF0cmVkIG9uIHRoZSBwYXJ0IG9mIHRoZSBwZW9wbGUgdGhhdCBjb3VsZCBuZXZlciBiZSByZW1vdmVkLiBBbmQgdGhpcyB3YXMgd2hhdCBjYW1lIHRvIHBhc3MuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBNZXRlbGx1cyBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIG5vdCB0YWtlIHRoZSBvYXRoLCBhbmQgdGhlIHNlbmF0ZSBicm9rZSB1cCBmb3IgYSB3aGlsZTsgYnV0IGFmdGVyIGEgZmV3IGRheXMgU2F0dXJuaW51cyBzdW1tb25lZCB0aGUgc2VuYXRvcnMgdG8gdGhlIHJvc3RyYSBhbmQgdHJpZWQgdG8gZm9yY2UgdGhlbSB0byB0YWtlIHRoZSBvYXRoLiBXaGVuIE1hcml1cyBjYW1lIGZvcndhcmQgdGhlcmUgd2FzIHNpbGVuY2UsIGFuZCB0aGUgZXllcyBvZiBhbGwgd2VyZSBmYXN0ZW5lZCB1cG9uIGhpbS4gVGhlbiwgYmlkZGluZyBhIGxvbmcgZmFyZXdlbGwgdG8gYWxsIGhpcyBib2FzdGZ1bCBhbmQgaW5zaW5jZXJlIGV4cHJlc3Npb25zIGluIHRoZSBzZW5hdGUsIGhlIHNhaWQgaGlzIHRocm9hdCB3YXMgbm90IGJyb2FkIGVub3VnaCB0byBwcm9ub3VuY2UgYW4gb3BpbmlvbiBvbmNlIGZvciBhbGwgdXBvbiBzbyBpbXBvcnRhbnQgYSBtYXR0ZXIsIGJ1dCB0aGF0IGhlIHdvdWxkIHRha2UgdGhlIG9hdGgsIGFuZCBvYmV5IHRoZSBsYXcsIGlmIGl0IHdhcyBhIGxhdzsgYWRkaW5nIHRoaXMgYml0IG9mIHNvcGhpc3RyeSBhcyBhIGNsb2FrIGZvciBoaXMgc2hhbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUsIHRoZW4sIGRlbGlnaHRlZCBhdCBoaXMgdGFraW5nIHRoZSBvYXRoLCBjbGFwcGVkIHRoZWlyIGhhbmRzIGluIGFwcGxhdXNlLCBidXQgdGhlIG5vYmxlcyB3ZXJlIHRlcnJpYmx5IGRlamVjdGVkIGFuZCBoYXRlZCBNYXJpdXMgZm9yIGhpcyBjaGFuZ2Ugb2YgZnJvbnQuIEFjY29yZGluZ2x5LCBhbGwgdGhlIHNlbmF0b3JzIHRvb2sgdGhlIG9hdGggaW4gb3JkZXIsIHRocm91Z2ggZmVhciBvZiB0aGUgcGVvcGxlLCB1bnRpbCB0aGUgdHVybiBvZiBNZXRlbGx1cyBjYW1lOyBidXQgTWV0ZWxsdXMsIGFsdGhvdWdoIGhpcyBmcmllbmRzIGVhcm5lc3RseSBlbnRyZWF0ZWQgaGltIHRvIHRha2UgdGhlIG9hdGggYW5kIG5vdCBzdWJqZWN0IGhpbXNlbGYgdG8gdGhlIGlycmVwYXJhYmxlIHB1bmlzaG1lbnRzIHdoaWNoIFNhdHVybmludXMgcHJvcG9zZWQgZm9yIHRob3NlIHdobyBzaG91bGQgcmVmdXNlLCB3b3VsZCBub3Qgc3dlcnZlIGZyb20gaGlzIHB1cnBvc2Ugb3IgdGFrZSB0aGUgb2F0aCwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YnV0LCBhZGhlcmluZyB0byBoaXMgcHJpbmNpcGxlcyBhbmQgcHJlcGFyZWQgdG8gc3VmZmVyIGFueSBldmlsIHJhdGhlciB0aGFuIGRvIGEgc2hhbWVmdWwgZGVlZCwgaGUgbGVmdCB0aGUgZm9ydW0sIHNheWluZyB0byB0aG9zZSBhYm91dCBoaW0gdGhhdCB0byBkbyBhIHdyb25nIHRoaW5nIHdhcyBtZWFuLCBhbmQgdG8gZG8gdGhlIHJpZ2h0IHRoaW5nIHdoZW4gdGhlcmUgd2FzIG5vIGRhbmdlciB3YXMgYW55IG1hbidzIHdheSwgYnV0IHRoYXQgdG8gYWN0IGhvbm91cmFibHkgd2hlbiBpdCBpbnZvbHZlZCBkYW5nZXJzIHdhcyBwZWN1bGlhcmx5IHRoZSBwYXJ0IG9mIGEgZ29vZCBhbmQgdHJ1ZSBtYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgU2F0dXJuaW51cyBnb3QgYSB2b3RlIHBhc3NlZCB0aGF0IHRoZSBjb25zdWxzIHNob3VsZCBwcm9jbGFpbSBNZXRlbGx1cyBpbnRlcmRpY3RlZCBmcm9tIGZpcmUsIHdhdGVyLCBhbmQgc2hlbHRlcjsgYW5kIHRoZSBtZWFuZXN0IHBhcnQgb2YgdGhlIHBvcHVsYWNlIHN1cHBvcnRlZCB0aGVtIGFuZCB3YXMgcmVhZHkgdG8gcHV0IHRoZSBtYW4gdG8gZGVhdGguIFRoZSBiZXN0IGNpdGl6ZW5zLCBob3dldmVyLCBzeW1wYXRoaXNlZCB3aXRoIE1ldGVsbHVzIGFuZCBjcm93ZGVkIGhhc3RpbHkgYWJvdXQgaGltLCBidXQgaGUgd291bGQgbm90IGFsbG93IGEgZmFjdGlvbiB0byBiZSByYWlzZWQgb24gaGlzIGFjY291bnQsIGFuZCBkZXBhcnRlZCBmcm9tIHRoZSBjaXR5LCBmb2xsb3dpbmcgdGhlIGRpY3RhdGVzIG9mIHBydWRlbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5laXRoZXIgbWF0dGVycyB3aWxsIG1lbmQgYW5kIHRoZSBwZW9wbGUgd2lsbCBjaGFuZ2UgdGhlaXIgbWluZHMgYW5kIEkgc2hhbGwgcmV0dXJuIGF0IHRoZWlyIGludml0YXRpb24sIG9yLCBpZiBtYXR0ZXJzIHJlbWFpbiBhcyB0aGV5IGFyZSwgaXQgaXMgYmVzdCB0aGF0IEkgc2hvdWxkIGJlIGF3YXkuPC9xPiBCdXQgd2hhdCBncmVhdCBnb29kd2lsbCBhbmQgZXN0ZWVtIE1ldGVsbHVzIGVuam95ZWQgZHVyaW5nIGhpcyBleGlsZSwgYW5kIGhvdyBoZSBzcGVudCBoaXMgdGltZSBpbiBwaGlsb3NvcGhpY2FsIHN0dWRpZXMgYXQgUmhvZGVzLCB3aWxsIGJlIGJldHRlciB0b2xkIGluIGhpcyBMaWZlLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5ObyBzdWNoIExpZmUgaXMgZXh0YW50LiA8L25vdGU+IAoJCQkgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBNZXRlbGx1cyBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIG5vdCB0YWtlIHRoZSBvYXRoLCBhbmQgdGhlIHNlbmF0ZSBicm9rZSB1cCBmb3IgYSB3aGlsZTsgYnV0IGFmdGVyIGEgZmV3IGRheXMgU2F0dXJuaW51cyBzdW1tb25lZCB0aGUgc2VuYXRvcnMgdG8gdGhlIHJvc3RyYSBhbmQgdHJpZWQgdG8gZm9yY2UgdGhlbSB0byB0YWtlIHRoZSBvYXRoLiBXaGVuIE1hcml1cyBjYW1lIGZvcndhcmQgdGhlcmUgd2FzIHNpbGVuY2UsIGFuZCB0aGUgZXllcyBvZiBhbGwgd2VyZSBmYXN0ZW5lZCB1cG9uIGhpbS4gVGhlbiwgYmlkZGluZyBhIGxvbmcgZmFyZXdlbGwgdG8gYWxsIGhpcyBib2FzdGZ1bCBhbmQgaW5zaW5jZXJlIGV4cHJlc3Npb25zIGluIHRoZSBzZW5hdGUsIGhlIHNhaWQgaGlzIHRocm9hdCB3YXMgbm90IGJyb2FkIGVub3VnaCB0byBwcm9ub3VuY2UgYW4gb3BpbmlvbiBvbmNlIGZvciBhbGwgdXBvbiBzbyBpbXBvcnRhbnQgYSBtYXR0ZXIsIGJ1dCB0aGF0IGhlIHdvdWxkIHRha2UgdGhlIG9hdGgsIGFuZCBvYmV5IHRoZSBsYXcsIGlmIGl0IHdhcyBhIGxhdzsgYWRkaW5nIHRoaXMgYml0IG9mIHNvcGhpc3RyeSBhcyBhIGNsb2FrIGZvciBoaXMgc2hhbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwZW9wbGUsIHRoZW4sIGRlbGlnaHRlZCBhdCBoaXMgdGFraW5nIHRoZSBvYXRoLCBjbGFwcGVkIHRoZWlyIGhhbmRzIGluIGFwcGxhdXNlLCBidXQgdGhlIG5vYmxlcyB3ZXJlIHRlcnJpYmx5IGRlamVjdGVkIGFuZCBoYXRlZCBNYXJpdXMgZm9yIGhpcyBjaGFuZ2Ugb2YgZnJvbnQuIEFjY29yZGluZ2x5LCBhbGwgdGhlIHNlbmF0b3JzIHRvb2sgdGhlIG9hdGggaW4gb3JkZXIsIHRocm91Z2ggZmVhciBvZiB0aGUgcGVvcGxlLCB1bnRpbCB0aGUgdHVybiBvZiBNZXRlbGx1cyBjYW1lOyBidXQgTWV0ZWxsdXMsIGFsdGhvdWdoIGhpcyBmcmllbmRzIGVhcm5lc3RseSBlbnRyZWF0ZWQgaGltIHRvIHRha2UgdGhlIG9hdGggYW5kIG5vdCBzdWJqZWN0IGhpbXNlbGYgdG8gdGhlIGlycmVwYXJhYmxlIHB1bmlzaG1lbnRzIHdoaWNoIFNhdHVybmludXMgcHJvcG9zZWQgZm9yIHRob3NlIHdobyBzaG91bGQgcmVmdXNlLCB3b3VsZCBub3Qgc3dlcnZlIGZyb20gaGlzIHB1cnBvc2Ugb3IgdGFrZSB0aGUgb2F0aCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCwgYWRoZXJpbmcgdG8gaGlzIHByaW5jaXBsZXMgYW5kIHByZXBhcmVkIHRvIHN1ZmZlciBhbnkgZXZpbCByYXRoZXIgdGhhbiBkbyBhIHNoYW1lZnVsIGRlZWQsIGhlIGxlZnQgdGhlIGZvcnVtLCBzYXlpbmcgdG8gdGhvc2UgYWJvdXQgaGltIHRoYXQgdG8gZG8gYSB3cm9uZyB0aGluZyB3YXMgbWVhbiwgYW5kIHRvIGRvIHRoZSByaWdodCB0aGluZyB3aGVuIHRoZXJlIHdhcyBubyBkYW5nZXIgd2FzIGFueSBtYW4ncyB3YXksIGJ1dCB0aGF0IHRvIGFjdCBob25vdXJhYmx5IHdoZW4gaXQgaW52b2x2ZWQgZGFuZ2VycyB3YXMgcGVjdWxpYXJseSB0aGUgcGFydCBvZiBhIGdvb2QgYW5kIHRydWUgbWFuLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcywgU2F0dXJuaW51cyBnb3QgYSB2b3RlIHBhc3NlZCB0aGF0IHRoZSBjb25zdWxzIHNob3VsZCBwcm9jbGFpbSBNZXRlbGx1cyBpbnRlcmRpY3RlZCBmcm9tIGZpcmUsIHdhdGVyLCBhbmQgc2hlbHRlcjsgYW5kIHRoZSBtZWFuZXN0IHBhcnQgb2YgdGhlIHBvcHVsYWNlIHN1cHBvcnRlZCB0aGVtIGFuZCB3YXMgcmVhZHkgdG8gcHV0IHRoZSBtYW4gdG8gZGVhdGguIFRoZSBiZXN0IGNpdGl6ZW5zLCBob3dldmVyLCBzeW1wYXRoaXNlZCB3aXRoIE1ldGVsbHVzIGFuZCBjcm93ZGVkIGhhc3RpbHkgYWJvdXQgaGltLCBidXQgaGUgd291bGQgbm90IGFsbG93IGEgZmFjdGlvbiB0byBiZSByYWlzZWQgb24gaGlzIGFjY291bnQsIGFuZCBkZXBhcnRlZCBmcm9tIHRoZSBjaXR5LCBmb2xsb3dpbmcgdGhlIGRpY3RhdGVzIG9mIHBydWRlbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['29.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5laXRoZXIgbWF0dGVycyB3aWxsIG1lbmQgYW5kIHRoZSBwZW9wbGUgd2lsbCBjaGFuZ2UgdGhlaXIgbWluZHMgYW5kIEkgc2hhbGwgcmV0dXJuIGF0IHRoZWlyIGludml0YXRpb24sIG9yLCBpZiBtYXR0ZXJzIHJlbWFpbiBhcyB0aGV5IGFyZSwgaXQgaXMgYmVzdCB0aGF0IEkgc2hvdWxkIGJlIGF3YXkuPC9xPiBCdXQgd2hhdCBncmVhdCBnb29kd2lsbCBhbmQgZXN0ZWVtIE1ldGVsbHVzIGVuam95ZWQgZHVyaW5nIGhpcyBleGlsZSwgYW5kIGhvdyBoZSBzcGVudCBoaXMgdGltZSBpbiBwaGlsb3NvcGhpY2FsIHN0dWRpZXMgYXQgUmhvZGVzLCB3aWxsIGJlIGJldHRlciB0b2xkIGluIGhpcyBMaWZlLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vIHN1Y2ggTGlmZSBpcyBleHRhbnQuIDwvbm90ZT4gCgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgTWFyaXVzLCB3aG8gd2FzIGZvcmNlZCwgaW4gcmV0dXJuIGZvciB0aGlzIGFzc2lzdGFuY2UsIHRvIGxvb2sgb24gcXVpZXRseSB3aGlsZSBTYXR1cm5pbnVzIHJhbiB0byBleHRyZW1lcyBvZiBkYXJpbmcgYW5kIHBvd2VyLCBicm91Z2h0IGFib3V0IHVuYXdhcmVzIGEgbWlzY2hpZWYgdGhhdCB3YXMgbm90IHRvIGJlIGN1cmVkLCBidXQgbWFkZSBpdHMgd2F5IGJ5IGFybXMgYW5kIHNsYXVnaHRlciBkaXJlY3RseSB0b3dhcmRzIHR5cmFubnkgYW5kIHN1YnZlcnNpb24gb2YgdGhlIGdvdmVybm1lbnQuIEFuZCBzaW5jZSBoZSBzdG9vZCBpbiBhd2Ugb2YgdGhlIG5vYmxlcywgd2hpbGUgaGUgY291cnRlZCB0aGUgZmF2b3VyIG9mIHRpbWUgbXVsdGl0dWRlLCBoZSB3YXMgbGVkIHRvIGNvbW1pdCBhbiBhY3Qgb2YgdGhlIHV0bW9zdCBtZWFubmVzcyBhbmQgZHVwbGljaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiB0aGUgbGVhZGluZyBtZW4gaGFkIGNvbWUgdG8gaGltIGJ5IG5pZ2h0IGFuZCB3ZXJlIHRyeWluZyB0byBpbmNpdGUgaGltIGFnYWluc3QgU2F0dXJuaW51cywgd2l0aG91dCB0aGVpciBrbm93bGVkZ2UgaGUgaW50cm9kdWNlZCBTYXR1cm5pbnVzIGludG8gdGhlIGhvdXNlIGJ5IGFub3RoZXIgZG9vcjsgdGhlbiwgcHJldGVuZGluZyB0byBib3RoIHBhcnRpZXMgdGhhdCBoZSBoYWQgYSBkaWFycmhvZWEsIGhlIHdvdWxkIHJ1biBiYWNrd2FyZHMgYW5kIGZvcndhcmRzIGluIHRoZSBob3VzZSwgbm93IHRvIHRoZSBub2JsZXMgYW5kIG5vdyB0byBTYXR1cm5pbnVzLCB0cnlpbmcgdG8gaXJyaXRhdGUgYW5kIGJyaW5nIHRoZW0gaW50byBjb2xsaXNpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gdGhlIHNlbmF0ZSBhbmQgdGhlIGtuaWdodHMgYmVnYW4gdG8gY29tYmluZSBhbmQgZ2l2ZSB1dHRlcmFuY2UgdG8gdGhlaXIgaW5kaWduYXRpb24sIGhlIGxlZCBoaXMgc29sZGllcnMgaW50byB0aGUgZm9ydW0sIGZvcmNlZCB0aGUgaW5zdXJnZW50cyB0byB0YWtlIHJlZnVnZSBvbiB0aGUgQ2FwaXRvbCwgYW5kIGNvbXBlbGxlZCB0aGVtIHRvIHN1cnJlbmRlciBmb3IgbGFjayBvZiB3YXRlci4gRm9yIGhlIGN1dCBvZmYgdGhlIHdhdGVyLWNvbmR1aXRzOyB3aGVyZXVwb24gdGhleSBnYXZlIHVwIHRoZSBzdHJ1Z2dsZSwgY2FsbGVkIE1hcml1cywgYW5kIHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgb24gd2hhdCB3YXMgY2FsbGVkIHRoZSBwdWJsaWMgZmFpdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBkaWQgYWxsIGhlIGNvdWxkIHRvIHNhdmUgdGhlIG1lbiwgYnV0IGl0IHdhcyBvZiBubyBhdmFpbCwgYW5kIHdoZW4gdGhleSBjYW1lIGRvd24gaW50byB0aGUgZm9ydW0gdGhleSB3ZXJlIHB1dCB0byBkZWF0aC4gVGhpcyBhZmZhaXIgbWFkZSBNYXJpdXMgb2Jub3hpb3VzIGFsaWtlIHRvIHRoZSBub2JsZXMgYW5kIHRvIHRoZSBwZW9wbGUsIGFuZCB3aGVuIHRoZSB0aW1lIGZvciBlbGVjdGluZyBjZW5zb3JzIGNhbWUgaGUgZGlkIG5vdCBwcmVzZW50IGhpbXNlbGYgYXMgYSBjYW5kaWRhdGUsIGFsdGhvdWdoIGV2ZXJ5b25lIGV4cGVjdGVkIHRoYXQgaGUgd291bGQsIGJ1dCBhbGxvd2VkIG90aGVyIGFuZCBpbmZlcmlvciBtZW4gdG8gYmUgZWxlY3RlZCwgZm9yIGZlYXIgdGhhdCBoZSB3b3VsZCBiZSBkZWZlYXRlZC4gSG93ZXZlciwgaGUgdHJpZWQgdG8gcHV0IGEgZ29vZCBmYWNlIHVwb24gaGlzIGNvbmR1Y3QgYnkgc2F5aW5nIHRoYXQgaGUgd2FzIHVud2lsbGluZyB0byBpbmN1ciB0aGUgaGF0cmVkIG9mIG1hbnkgY2l0aXplbnMgYnkgYSBzZXZlcmUgZXhhbWluYXRpb24gaW50byB0aGVpciBsaXZlcyBhbmQgbWFubmVycy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBNYXJpdXMsIHdobyB3YXMgZm9yY2VkLCBpbiByZXR1cm4gZm9yIHRoaXMgYXNzaXN0YW5jZSwgdG8gbG9vayBvbiBxdWlldGx5IHdoaWxlIFNhdHVybmludXMgcmFuIHRvIGV4dHJlbWVzIG9mIGRhcmluZyBhbmQgcG93ZXIsIGJyb3VnaHQgYWJvdXQgdW5hd2FyZXMgYSBtaXNjaGllZiB0aGF0IHdhcyBub3QgdG8gYmUgY3VyZWQsIGJ1dCBtYWRlIGl0cyB3YXkgYnkgYXJtcyBhbmQgc2xhdWdodGVyIGRpcmVjdGx5IHRvd2FyZHMgdHlyYW5ueSBhbmQgc3VidmVyc2lvbiBvZiB0aGUgZ292ZXJubWVudC4gQW5kIHNpbmNlIGhlIHN0b29kIGluIGF3ZSBvZiB0aGUgbm9ibGVzLCB3aGlsZSBoZSBjb3VydGVkIHRoZSBmYXZvdXIgb2YgdGltZSBtdWx0aXR1ZGUsIGhlIHdhcyBsZWQgdG8gY29tbWl0IGFuIGFjdCBvZiB0aGUgdXRtb3N0IG1lYW5uZXNzIGFuZCBkdXBsaWNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIHRoZSBsZWFkaW5nIG1lbiBoYWQgY29tZSB0byBoaW0gYnkgbmlnaHQgYW5kIHdlcmUgdHJ5aW5nIHRvIGluY2l0ZSBoaW0gYWdhaW5zdCBTYXR1cm5pbnVzLCB3aXRob3V0IHRoZWlyIGtub3dsZWRnZSBoZSBpbnRyb2R1Y2VkIFNhdHVybmludXMgaW50byB0aGUgaG91c2UgYnkgYW5vdGhlciBkb29yOyB0aGVuLCBwcmV0ZW5kaW5nIHRvIGJvdGggcGFydGllcyB0aGF0IGhlIGhhZCBhIGRpYXJyaG9lYSwgaGUgd291bGQgcnVuIGJhY2t3YXJkcyBhbmQgZm9yd2FyZHMgaW4gdGhlIGhvdXNlLCBub3cgdG8gdGhlIG5vYmxlcyBhbmQgbm93IHRvIFNhdHVybmludXMsIHRyeWluZyB0byBpcnJpdGF0ZSBhbmQgYnJpbmcgdGhlbSBpbnRvIGNvbGxpc2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoZW4gdGhlIHNlbmF0ZSBhbmQgdGhlIGtuaWdodHMgYmVnYW4gdG8gY29tYmluZSBhbmQgZ2l2ZSB1dHRlcmFuY2UgdG8gdGhlaXIgaW5kaWduYXRpb24sIGhlIGxlZCBoaXMgc29sZGllcnMgaW50byB0aGUgZm9ydW0sIGZvcmNlZCB0aGUgaW5zdXJnZW50cyB0byB0YWtlIHJlZnVnZSBvbiB0aGUgQ2FwaXRvbCwgYW5kIGNvbXBlbGxlZCB0aGVtIHRvIHN1cnJlbmRlciBmb3IgbGFjayBvZiB3YXRlci4gRm9yIGhlIGN1dCBvZmYgdGhlIHdhdGVyLWNvbmR1aXRzOyB3aGVyZXVwb24gdGhleSBnYXZlIHVwIHRoZSBzdHJ1Z2dsZSwgY2FsbGVkIE1hcml1cywgYW5kIHN1cnJlbmRlcmVkIHRoZW1zZWx2ZXMgb24gd2hhdCB3YXMgY2FsbGVkIHRoZSBwdWJsaWMgZmFpdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBkaWQgYWxsIGhlIGNvdWxkIHRvIHNhdmUgdGhlIG1lbiwgYnV0IGl0IHdhcyBvZiBubyBhdmFpbCwgYW5kIHdoZW4gdGhleSBjYW1lIGRvd24gaW50byB0aGUgZm9ydW0gdGhleSB3ZXJlIHB1dCB0byBkZWF0aC4gVGhpcyBhZmZhaXIgbWFkZSBNYXJpdXMgb2Jub3hpb3VzIGFsaWtlIHRvIHRoZSBub2JsZXMgYW5kIHRvIHRoZSBwZW9wbGUsIGFuZCB3aGVuIHRoZSB0aW1lIGZvciBlbGVjdGluZyBjZW5zb3JzIGNhbWUgaGUgZGlkIG5vdCBwcmVzZW50IGhpbXNlbGYgYXMgYSBjYW5kaWRhdGUsIGFsdGhvdWdoIGV2ZXJ5b25lIGV4cGVjdGVkIHRoYXQgaGUgd291bGQsIGJ1dCBhbGxvd2VkIG90aGVyIGFuZCBpbmZlcmlvciBtZW4gdG8gYmUgZWxlY3RlZCwgZm9yIGZlYXIgdGhhdCBoZSB3b3VsZCBiZSBkZWZlYXRlZC4gSG93ZXZlciwgaGUgdHJpZWQgdG8gcHV0IGEgZ29vZCBmYWNlIHVwb24gaGlzIGNvbmR1Y3QgYnkgc2F5aW5nIHRoYXQgaGUgd2FzIHVud2lsbGluZyB0byBpbmN1ciB0aGUgaGF0cmVkIG9mIG1hbnkgY2l0aXplbnMgYnkgYSBzZXZlcmUgZXhhbWluYXRpb24gaW50byB0aGVpciBsaXZlcyBhbmQgbWFubmVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhIGRlY3JlZSB3YXMgaW50cm9kdWNlZCByZWNhbGxpbmcgTWV0ZWxsdXMgZnJvbSBleGlsZSwgTWFyaXVzIG9wcG9zZWQgaXQgc3Ryb25nbHkgYm90aCBieSB3b3JkIGFuZCBkZWVkLCBidXQgZmluZGluZyBoaXMgZWZmb3J0cyB2YWluLCBhdCBsYXN0IGRlc2lzdGVkOyBhbmQgYWZ0ZXIgdGhlIHBlb3BsZSBoYWQgYWRvcHRlZCB0aGUgbWVhc3VyZSB3aXRoIGFsYWNyaXR5LCB1bmFibGUgdG8gZW5kdXJlIHRoZSBzaWdodCBvZiBNZXRlbGx1cyByZXR1cm5pbmcsIGhlIHNldCBzYWlsIGZvciBDYXBwYWRvY2lhIGFuZCBHYWxhdGlhLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA5OSBCLkMuIDwvbm90ZT4gb3N0ZW5zaWJseSB0byBtYWtlIHRoZSBzYWNyaWZpY2VzIHdoaWNoIGhlIGhhZCB2b3dlZCB0byB0aGUgTW90aGVyIG9mIHRoZSBHb2RzLCBidXQgcmVhbGx5IGhhdmluZyBhbm90aGVyIHJlYXNvbiBmb3IgaGlzIGpvdXJuZXkgd2hpY2ggdGhlIHBlb3BsZSBkaWQgbm90IHN1c3BlY3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCwgdGhhdCBpcywgbm8gbmF0dXJhbCBhcHRpdHVkZSBmb3IgcGVhY2Ugb3IgY2l2aWwgbGlmZSwgYnV0IGhhZCByZWFjaGVkIGhpcyBlbWluZW5jZSBieSBhcm1zLiBBbmQgbm93LCB0aGlua2luZyB0aGF0IGhpcyBpbmZsdWVuY2UgYW5kIHJlcHV0YXRpb24gd2VyZSBncmFkdWFsbHkgZmFkaW5nIGF3YXkgYmVjYXVzZSBvZiBoaXMgaW5hY3Rpdml0eSBhbmQgcXVpZXR1ZGUsIGhlIHNvdWdodCBvY2Nhc2lvbnMgZm9yIG5ldyBlbnRlcnByaXNlcy4gRm9yIGhlIGhvcGVkIHRoYXQgaWYgaGUgc3RpcnJlZCB1cCB0aGUga2luZ3Mgb2YgQXNpYSBhbmQgaW5jaXRlZCBNaXRocmlkYXRlcyB0byBhY3Rpb24sIHdobyB3YXMgZXhwZWN0ZWQgdG8gbWFrZSB3YXIgdXBvbiBSb21lLCBoZSB3b3VsZCBhdCBvbmNlIGJlIGNob3NlbiB0byBsZWFkIHRoZSBSb21hbiBhcm1pZXMgYWdhaW5zdCBoaW0sIGFuZCB3b3VsZCBmaWxsIHRoZSBjaXR5IHdpdGggbmV3IHRyaXVtcGhzLCBhbmQgaGlzIG93biBob3VzZSB3aXRoIFBvbnRpYyBzcG9pbHMgYW5kIHJveWFsIHdlYWx0aC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoaXMgcmVhc29uLCB0aG91Z2ggTWl0aHJpZGF0ZXMgdHJlYXRlZCBoaW0gd2l0aCBhbGwgZGVmZXJlbmNlIGFuZCByZXNwZWN0LCBoZSB3b3VsZCBub3QgYmVuZCBvciB5aWVsZCwgYnV0IHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCBlaXRoZXIgc3RyaXZlIHRvIGJlIHN0cm9uZ2VyIHRoYW4gUm9tZSwgb3IgZG8gaGVyIGJpZGRpbmcgd2l0aG91dCBhIHdvcmQuPC9xPiBUaGlzIHNwZWVjaCBzdGFydGxlZCB0aGUga2luZywgd2hvIGhhZCBvZnRlbiBoZWFyZCB0aGUgUm9tYW4gc3BlZWNoLCBidXQgdGhlbiBmb3IgdGhlIGZpcnN0IHRpbWUgaW4gYWxsIGl0cyBib2xkbmVzcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBhIGRlY3JlZSB3YXMgaW50cm9kdWNlZCByZWNhbGxpbmcgTWV0ZWxsdXMgZnJvbSBleGlsZSwgTWFyaXVzIG9wcG9zZWQgaXQgc3Ryb25nbHkgYm90aCBieSB3b3JkIGFuZCBkZWVkLCBidXQgZmluZGluZyBoaXMgZWZmb3J0cyB2YWluLCBhdCBsYXN0IGRlc2lzdGVkOyBhbmQgYWZ0ZXIgdGhlIHBlb3BsZSBoYWQgYWRvcHRlZCB0aGUgbWVhc3VyZSB3aXRoIGFsYWNyaXR5LCB1bmFibGUgdG8gZW5kdXJlIHRoZSBzaWdodCBvZiBNZXRlbGx1cyByZXR1cm5pbmcsIGhlIHNldCBzYWlsIGZvciBDYXBwYWRvY2lhIGFuZCBHYWxhdGlhLCA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDk5IEIuQy4gPC9ub3RlPiBvc3RlbnNpYmx5IHRvIG1ha2UgdGhlIHNhY3JpZmljZXMgd2hpY2ggaGUgaGFkIHZvd2VkIHRvIHRoZSBNb3RoZXIgb2YgdGhlIEdvZHMsIGJ1dCByZWFsbHkgaGF2aW5nIGFub3RoZXIgcmVhc29uIGZvciBoaXMgam91cm5leSB3aGljaCB0aGUgcGVvcGxlIGRpZCBub3Qgc3VzcGVjdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCwgdGhhdCBpcywgbm8gbmF0dXJhbCBhcHRpdHVkZSBmb3IgcGVhY2Ugb3IgY2l2aWwgbGlmZSwgYnV0IGhhZCByZWFjaGVkIGhpcyBlbWluZW5jZSBieSBhcm1zLiBBbmQgbm93LCB0aGlua2luZyB0aGF0IGhpcyBpbmZsdWVuY2UgYW5kIHJlcHV0YXRpb24gd2VyZSBncmFkdWFsbHkgZmFkaW5nIGF3YXkgYmVjYXVzZSBvZiBoaXMgaW5hY3Rpdml0eSBhbmQgcXVpZXR1ZGUsIGhlIHNvdWdodCBvY2Nhc2lvbnMgZm9yIG5ldyBlbnRlcnByaXNlcy4gRm9yIGhlIGhvcGVkIHRoYXQgaWYgaGUgc3RpcnJlZCB1cCB0aGUga2luZ3Mgb2YgQXNpYSBhbmQgaW5jaXRlZCBNaXRocmlkYXRlcyB0byBhY3Rpb24sIHdobyB3YXMgZXhwZWN0ZWQgdG8gbWFrZSB3YXIgdXBvbiBSb21lLCBoZSB3b3VsZCBhdCBvbmNlIGJlIGNob3NlbiB0byBsZWFkIHRoZSBSb21hbiBhcm1pZXMgYWdhaW5zdCBoaW0sIGFuZCB3b3VsZCBmaWxsIHRoZSBjaXR5IHdpdGggbmV3IHRyaXVtcGhzLCBhbmQgaGlzIG93biBob3VzZSB3aXRoIFBvbnRpYyBzcG9pbHMgYW5kIHJveWFsIHdlYWx0aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGlzIHJlYXNvbiwgdGhvdWdoIE1pdGhyaWRhdGVzIHRyZWF0ZWQgaGltIHdpdGggYWxsIGRlZmVyZW5jZSBhbmQgcmVzcGVjdCwgaGUgd291bGQgbm90IGJlbmQgb3IgeWllbGQsIGJ1dCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBLaW5nLCBlaXRoZXIgc3RyaXZlIHRvIGJlIHN0cm9uZ2VyIHRoYW4gUm9tZSwgb3IgZG8gaGVyIGJpZGRpbmcgd2l0aG91dCBhIHdvcmQuPC9xPiBUaGlzIHNwZWVjaCBzdGFydGxlZCB0aGUga2luZywgd2hvIGhhZCBvZnRlbiBoZWFyZCB0aGUgUm9tYW4gc3BlZWNoLCBidXQgdGhlbiBmb3IgdGhlIGZpcnN0IHRpbWUgaW4gYWxsIGl0cyBib2xkbmVzcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmV0dXJuaW5nIHRvIFJvbWUsIGhlIGJ1aWx0IGEgaG91c2UgZm9yIGhpbXNlbGYgbmVhciB0aGUgZm9ydW0sIGVpdGhlciwgYXMgaGUgaGltc2VsZiBzYWlkLCBiZWNhdXNlIGhlIHdhcyB1bndpbGxpbmcgdGhhdCB0aG9zZSB3aG8gcGFpZCB0aGVpciByZXNwZWN0cyB0byBoaW0gc2hvdWxkIGhhdmUgdGhlIHRyb3VibGUgb2YgY29taW5nIGEgbG9uZyBkaXN0YW5jZSwgb3IgYmVjYXVzZSBoZSB0aG91Z2h0IHRoYXQgZGlzdGFuY2Ugd2FzIHRoZSByZWFzb24gd2h5IGhlIGRpZCBub3QgaGF2ZSBsYXJnZXIgY3Jvd2RzIGF0IGhpcyBkb29yIHRoYW4gb3RoZXJzLiBUaGUgcmVhc29uLCBob3dldmVyLCB3YXMgbm90IG9mIHRoaXMgbmF0dXJlOyBpdCB3YXMgcmF0aGVyIGhpcyBpbmZlcmlvcml0eSB0byBvdGhlcnMgaW4gdGhlIGdyYWNlcyBvZiBpbnRlcmNvdXJzZSBhbmQgaW4gcG9saXRpY2FsIGhlbHBmdWxuZXNzLCB3aGljaCBjYXVzZWQgaGltIHRvIGJlIG5lZ2xlY3RlZCwgbGlrZSBhbiBpbnN0cnVtZW50IG9mIHdhciBpbiB0aW1lIG9mIHBlYWNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PZiBhbGwgdGhvc2Ugd2hvIGVjbGlwc2VkIGhpbSBpbiBwb3B1bGFyIGVzdGVlbSBoZSB3YXMgbW9zdCB2ZXhlZCBhbmQgYW5ub3llZCBieSBTdWxsYSwgd2hvc2UgcmlzZSB0byBwb3dlciB3YXMgZHVlIHRvIHRoZSBqZWFsb3VzeSB3aGljaCB0aGUgbm9ibGVzIGZlbHQgdG93YXJkcyBNYXJpdXMsIGFuZCB3aG8gd2FzIG1ha2luZyBoaXMgcXVhcnJlbHMgd2l0aCBNYXJpdXMgdGhlIGJhc2lzIG9mIGhpcyBwb2xpdGljYWwgYWN0aXZpdHkuIEFuZCB3aGVuIEJvY2NodXMgdGhlIE51bWlkaWFuLCB3aG8gaGFkIGJlZW4gZGVzaWduYXRlZCBhbiBhbGx5IG9mIHRoZSBSb21hbnMsIHNldCB1cCB0cm9waHktYmVhcmluZyBWaWN0b3JpZXMgb24gdGhlIENhcGl0b2wsIGFuZCBieSB0aGVpciBzaWRlIGdpbGRlZCBmaWd1cmVzIHJlcHJlc2VudGluZyBKdWd1cnRoYSBzdXJyZW5kZXJlZCBieSBoaW0gdG8gU3VsbGEsIE1hcml1cyB3YXMgdHJhbnNwb3J0ZWQgd2l0aCByYWdlIGFuZCBmdXJ5IHRvIHNlZSBTdWxsYSB0aHVzIGFwcHJvcHJpYXRpbmcgdG8gaGltc2VsZiB0aGUgZ2xvcnkgb2YgaGlzIGFjaGlldmVtZW50cywgYW5kIHdhcyBtYWtpbmcgcHJlcGFyYXRpb25zIHRvIHRlYXIgZG93biB0aGUgdm90aXZlIG9mZmVyaW5ncy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFN1bGxhIHRvbyB3YXMgZnVyaW91cywgYW5kIGNpdmlsIGRpc3NlbnNpb24gd2FzIGp1c3Qgb24gdGhlIHBvaW50IG9mIGJyZWFraW5nIG91dCwgd2hlbiBpdCB3YXMgc3RvcHBlZCBieSB0aGUgU29jaWFsIFdhciwgd2hpY2ggc3VkZGVubHkgYnVyc3QgdXBvbiB0aGUgY2l0eS4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+OTAtODkgQi5DLiBTZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA2LjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPlN1bGxhIDwvdGl0bGU+LCB2aS4gMSBmLiA8L2JpYmw+IAogICAgICAgICAgICA8L25vdGU+IFRoYXQgaXMsIHRoZSBtb3N0IHdhcmxpa2UgYW5kIG1vc3QgbnVtZXJvdXMgb2YgdGhlIEl0YWxpYW4gcGVvcGxlcyBjb21iaW5lZCBhZ2FpbnN0IFJvbWUsIGFuZCBjYW1lIHdpdGhpbiBhIGxpdHRsZSBvZiBkZXN0cm95aW5nIGhlciBzdXByZW1hY3ksIHNpbmNlIHRoZXkgd2VyZSBub3Qgb25seSBzdHJvbmcgaW4gYXJtcyBhbmQgbWVuLCBidXQgYWxzbyBoYWQgZ2VuZXJhbHMgd2hvc2UgZGFyaW5nIGFuZCBhYmlsaXR5IHdlcmUgYW1hemluZyBhbmQgbWFkZSB0aGVtIGEgbWF0Y2ggZm9yIHRoZSBSb21hbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmV0dXJuaW5nIHRvIFJvbWUsIGhlIGJ1aWx0IGEgaG91c2UgZm9yIGhpbXNlbGYgbmVhciB0aGUgZm9ydW0sIGVpdGhlciwgYXMgaGUgaGltc2VsZiBzYWlkLCBiZWNhdXNlIGhlIHdhcyB1bndpbGxpbmcgdGhhdCB0aG9zZSB3aG8gcGFpZCB0aGVpciByZXNwZWN0cyB0byBoaW0gc2hvdWxkIGhhdmUgdGhlIHRyb3VibGUgb2YgY29taW5nIGEgbG9uZyBkaXN0YW5jZSwgb3IgYmVjYXVzZSBoZSB0aG91Z2h0IHRoYXQgZGlzdGFuY2Ugd2FzIHRoZSByZWFzb24gd2h5IGhlIGRpZCBub3QgaGF2ZSBsYXJnZXIgY3Jvd2RzIGF0IGhpcyBkb29yIHRoYW4gb3RoZXJzLiBUaGUgcmVhc29uLCBob3dldmVyLCB3YXMgbm90IG9mIHRoaXMgbmF0dXJlOyBpdCB3YXMgcmF0aGVyIGhpcyBpbmZlcmlvcml0eSB0byBvdGhlcnMgaW4gdGhlIGdyYWNlcyBvZiBpbnRlcmNvdXJzZSBhbmQgaW4gcG9saXRpY2FsIGhlbHBmdWxuZXNzLCB3aGljaCBjYXVzZWQgaGltIHRvIGJlIG5lZ2xlY3RlZCwgbGlrZSBhbiBpbnN0cnVtZW50IG9mIHdhciBpbiB0aW1lIG9mIHBlYWNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9mIGFsbCB0aG9zZSB3aG8gZWNsaXBzZWQgaGltIGluIHBvcHVsYXIgZXN0ZWVtIGhlIHdhcyBtb3N0IHZleGVkIGFuZCBhbm5veWVkIGJ5IFN1bGxhLCB3aG9zZSByaXNlIHRvIHBvd2VyIHdhcyBkdWUgdG8gdGhlIGplYWxvdXN5IHdoaWNoIHRoZSBub2JsZXMgZmVsdCB0b3dhcmRzIE1hcml1cywgYW5kIHdobyB3YXMgbWFraW5nIGhpcyBxdWFycmVscyB3aXRoIE1hcml1cyB0aGUgYmFzaXMgb2YgaGlzIHBvbGl0aWNhbCBhY3Rpdml0eS4gQW5kIHdoZW4gQm9jY2h1cyB0aGUgTnVtaWRpYW4sIHdobyBoYWQgYmVlbiBkZXNpZ25hdGVkIGFuIGFsbHkgb2YgdGhlIFJvbWFucywgc2V0IHVwIHRyb3BoeS1iZWFyaW5nIFZpY3RvcmllcyBvbiB0aGUgQ2FwaXRvbCwgYW5kIGJ5IHRoZWlyIHNpZGUgZ2lsZGVkIGZpZ3VyZXMgcmVwcmVzZW50aW5nIEp1Z3VydGhhIHN1cnJlbmRlcmVkIGJ5IGhpbSB0byBTdWxsYSwgTWFyaXVzIHdhcyB0cmFuc3BvcnRlZCB3aXRoIHJhZ2UgYW5kIGZ1cnkgdG8gc2VlIFN1bGxhIHRodXMgYXBwcm9wcmlhdGluZyB0byBoaW1zZWxmIHRoZSBnbG9yeSBvZiBoaXMgYWNoaWV2ZW1lbnRzLCBhbmQgd2FzIG1ha2luZyBwcmVwYXJhdGlvbnMgdG8gdGVhciBkb3duIHRoZSB2b3RpdmUgb2ZmZXJpbmdzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSB0b28gd2FzIGZ1cmlvdXMsIGFuZCBjaXZpbCBkaXNzZW5zaW9uIHdhcyBqdXN0IG9uIHRoZSBwb2ludCBvZiBicmVha2luZyBvdXQsIHdoZW4gaXQgd2FzIHN0b3BwZWQgYnkgdGhlIFNvY2lhbCBXYXIsIHdoaWNoIHN1ZGRlbmx5IGJ1cnN0IHVwb24gdGhlIGNpdHkuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+OTAtODkgQi5DLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDYuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYSA8L3RpdGxlPiwgdmkuIDEgZi4gPC9iaWJsPiAKICAgICAgICAgICAgPC9ub3RlPiBUaGF0IGlzLCB0aGUgbW9zdCB3YXJsaWtlIGFuZCBtb3N0IG51bWVyb3VzIG9mIHRoZSBJdGFsaWFuIHBlb3BsZXMgY29tYmluZWQgYWdhaW5zdCBSb21lLCBhbmQgY2FtZSB3aXRoaW4gYSBsaXR0bGUgb2YgZGVzdHJveWluZyBoZXIgc3VwcmVtYWN5LCBzaW5jZSB0aGV5IHdlcmUgbm90IG9ubHkgc3Ryb25nIGluIGFybXMgYW5kIG1lbiwgYnV0IGFsc28gaGFkIGdlbmVyYWxzIHdob3NlIGRhcmluZyBhbmQgYWJpbGl0eSB3ZXJlIGFtYXppbmcgYW5kIG1hZGUgdGhlbSBhIG1hdGNoIGZvciB0aGUgUm9tYW5zLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA2LjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3VsbGEgPC90aXRsZT4sIHZpLiAxIGYuIDwvYmlibD4gCiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhIDwvdGl0bGU+LCB2aS4gMSBmLiA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCVRoaXMgd2FyLCB3aGljaCB3YXMgdmFyaWVkIGluIGl0cyBldmVudHMgYW5kIG1vc3QgY2hhbmdlZnVsIGluIGl0cyBmb3J0dW5lcywgYWRkZWQgbXVjaCB0byBTdWxsYSdzIHJlcHV0YXRpb24gYW5kIHBvd2VyLCBidXQgdG9vayBhd2F5IGFzIG11Y2ggZnJvbSBNYXJpdXMuIEZvciBoZSB3YXMgc2xvdyBpbiBtYWtpbmcgaGlzIGF0dGFja3MsIGFuZCBhbHdheXMgZ2l2ZW4gdG8gaGVzaXRhdGlvbiBhbmQgZGVsYXksIHdoZXRoZXIgaXQgd2FzIHRoYXQgb2xkIGFnZSBoYWQgcXVlbmNoZWQgaGlzIHdvbnRlZCBlbmVyZ3kgYW5kIGZpcmUgKGZvciBoZSB3YXMgbm93IHBhc3QgaGlzIHNpeHR5LXNpeHRoIHllYXIpLCBvciB0aGF0LCBhcyBoZSBoaW1zZWxmIHNhaWQsIGEgZmVlbGluZyBvZiBzaGFtZSBsZWQgaGltIHRvIGdvIGJleW9uZCBoaXMgcG93ZXJzIGluIHRyeWluZyB0byBlbmR1cmUgdGhlIGhhcmRzaGlwcyBvZiB0aGUgY2FtcGFpZ24gd2hlbiBoaXMgbmVydmVzIHdlcmUgZGlzZWFzZWQgYW5kIGhpcyBib2R5IHVuZml0IGZvciB3b3JrLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBldmVuIHRoZW4gaGUgd29uIGEgZ3JlYXQgdmljdG9yeSBpbiB3aGljaCBoZSBzbGV3IHNpeCB0aG91c2FuZCBvZiB0aGUgZW5lbXk7IGFuZCBoZSBuZXZlciBhbGxvd2VkIHRoZW0gdG8gZ2V0IGEgZ3JpcCB1cG9uIGhpbSwgYnV0IGV2ZW4gd2hlbiBoZSB3YXMgaGVtbWVkIGFib3V0IHdpdGgtdHJlbmNoZXMgYmlkZWQgaGlzIHRpbWUsIGFuZCB3YXMgbm90IHVuZHVseSBpcnJpdGF0ZWQgYnkgdGhlaXIgaW5zdWx0cyBhbmQgY2hhbGxlbmdlcy4gV2UgYXJlIHRvbGQgdGhhdCBQdWJsaXVzIFNpbG8sIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBvbXBhZWRpdXMgU2lsbywgbGVhZGVyIG9mIHRoZSBNYXJzaS4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMi4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIE1pbm9yIDwvdGl0bGU+LCBpaS4gMS00IDwvYmlibD4uIDwvbm90ZT4gd2hvIGhhZCB0aGUgZ3JlYXRlc3QgYXV0aG9yaXR5IGFuZCBwb3dlciBhbW9uZyB0aGUgZW5lbXksIG9uY2Ugc2FpZCB0byBoaW0sIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgdGhvdSBhcnQgYSBncmVhdCBnZW5lcmFsLCBNYXJpdXMsIGNvbWUgZG93biBhbmQgZmlnaHQgaXQgb3V0IHdpdGggdXM8L3E+OyB0byB3aGljaCBNYXJpdXMgYW5zd2VyZWQsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TmF5LCBidXQgZG8gdGhvdSwgaWYgdGhvdSBhcnQgYSBncmVhdCBnZW5lcmFsLCBmb3JjZSBtZSB0byBmaWdodCBpdCBvdXQgd2l0aCB5b3UgYWdhaW5zdCBteSB3aWxsLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgYXQgYW5vdGhlciB0aW1lLCB3aGVuIHRoZSBlbmVteSBoYWQgZ2l2ZW4gaGltIGFuIG9wcG9ydHVuaXR5IHRvIGF0dGFjayB0aGVtLCBidXQgdGhlIFJvbWFucyBoYWQgcGxheWVkIHRoZSBjb3dhcmQsIGFuZCBib3RoIHNpZGVzIGhhZCB3aXRoZHJhd24sIGhlIGNhbGxlZCBhbiBhc3NlbWJseSBvZiBoaXMgc29sZGllcnMgYW5kIHNhaWQgdG8gdGhlbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGRvIG5vdCBrbm93IHdoZXRoZXIgdG8gY2FsbCB0aGUgZW5lbXkgb3IgeW91IHRoZSBncmVhdGVyIGNvd2FyZHM7IGZvciB0aGV5IHdlcmUgbm90IGFibGUgdG8gc2VlIHlvdXIgYmFja3MsIG5vciB5b3UgdGhlaXIgbmFwZXMuPC9xPiBBdCBsYXN0LCBob3dldmVyLCBoZSBnYXZlIHVwIGhpcyBjb21tYW5kLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaGlzIGluZmlybWl0aWVzIG1hZGUgaGltIHF1aXRlIGluY2FwYWJsZSBvZiBleGVyY2lzaW5nIGl0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGlzIHdhciwgd2hpY2ggd2FzIHZhcmllZCBpbiBpdHMgZXZlbnRzIGFuZCBtb3N0IGNoYW5nZWZ1bCBpbiBpdHMgZm9ydHVuZXMsIGFkZGVkIG11Y2ggdG8gU3VsbGEncyByZXB1dGF0aW9uIGFuZCBwb3dlciwgYnV0IHRvb2sgYXdheSBhcyBtdWNoIGZyb20gTWFyaXVzLiBGb3IgaGUgd2FzIHNsb3cgaW4gbWFraW5nIGhpcyBhdHRhY2tzLCBhbmQgYWx3YXlzIGdpdmVuIHRvIGhlc2l0YXRpb24gYW5kIGRlbGF5LCB3aGV0aGVyIGl0IHdhcyB0aGF0IG9sZCBhZ2UgaGFkIHF1ZW5jaGVkIGhpcyB3b250ZWQgZW5lcmd5IGFuZCBmaXJlIChmb3IgaGUgd2FzIG5vdyBwYXN0IGhpcyBzaXh0eS1zaXh0aCB5ZWFyKSwgb3IgdGhhdCwgYXMgaGUgaGltc2VsZiBzYWlkLCBhIGZlZWxpbmcgb2Ygc2hhbWUgbGVkIGhpbSB0byBnbyBiZXlvbmQgaGlzIHBvd2VycyBpbiB0cnlpbmcgdG8gZW5kdXJlIHRoZSBoYXJkc2hpcHMgb2YgdGhlIGNhbXBhaWduIHdoZW4gaGlzIG5lcnZlcyB3ZXJlIGRpc2Vhc2VkIGFuZCBoaXMgYm9keSB1bmZpdCBmb3Igd29yay4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGV2ZW4gdGhlbiBoZSB3b24gYSBncmVhdCB2aWN0b3J5IGluIHdoaWNoIGhlIHNsZXcgc2l4IHRob3VzYW5kIG9mIHRoZSBlbmVteTsgYW5kIGhlIG5ldmVyIGFsbG93ZWQgdGhlbSB0byBnZXQgYSBncmlwIHVwb24gaGltLCBidXQgZXZlbiB3aGVuIGhlIHdhcyBoZW1tZWQgYWJvdXQgd2l0aC10cmVuY2hlcyBiaWRlZCBoaXMgdGltZSwgYW5kIHdhcyBub3QgdW5kdWx5IGlycml0YXRlZCBieSB0aGVpciBpbnN1bHRzIGFuZCBjaGFsbGVuZ2VzLiBXZSBhcmUgdG9sZCB0aGF0IFB1YmxpdXMgU2lsbywgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qb21wYWVkaXVzIFNpbG8sIGxlYWRlciBvZiB0aGUgTWFyc2kuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMi4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWlub3IgPC90aXRsZT4sIGlpLiAxLTQgPC9iaWJsPi4gPC9ub3RlPiB3aG8gaGFkIHRoZSBncmVhdGVzdCBhdXRob3JpdHkgYW5kIHBvd2VyIGFtb25nIHRoZSBlbmVteSwgb25jZSBzYWlkIHRvIGhpbSwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyLjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNaW5vciA8L3RpdGxlPiwgaWkuIDEtNCA8L2JpYmw+LiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1pbm9yIDwvdGl0bGU+LCBpaS4gMS00IDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SWYgdGhvdSBhcnQgYSBncmVhdCBnZW5lcmFsLCBNYXJpdXMsIGNvbWUgZG93biBhbmQgZmlnaHQgaXQgb3V0IHdpdGggdXM8L3E+OyB0byB3aGljaCBNYXJpdXMgYW5zd2VyZWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5OYXksIGJ1dCBkbyB0aG91LCBpZiB0aG91IGFydCBhIGdyZWF0IGdlbmVyYWwsIGZvcmNlIG1lIHRvIGZpZ2h0IGl0IG91dCB3aXRoIHlvdSBhZ2FpbnN0IG15IHdpbGwuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhdCBhbm90aGVyIHRpbWUsIHdoZW4gdGhlIGVuZW15IGhhZCBnaXZlbiBoaW0gYW4gb3Bwb3J0dW5pdHkgdG8gYXR0YWNrIHRoZW0sIGJ1dCB0aGUgUm9tYW5zIGhhZCBwbGF5ZWQgdGhlIGNvd2FyZCwgYW5kIGJvdGggc2lkZXMgaGFkIHdpdGhkcmF3biwgaGUgY2FsbGVkIGFuIGFzc2VtYmx5IG9mIGhpcyBzb2xkaWVycyBhbmQgc2FpZCB0byB0aGVtOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBkbyBub3Qga25vdyB3aGV0aGVyIHRvIGNhbGwgdGhlIGVuZW15IG9yIHlvdSB0aGUgZ3JlYXRlciBjb3dhcmRzOyBmb3IgdGhleSB3ZXJlIG5vdCBhYmxlIHRvIHNlZSB5b3VyIGJhY2tzLCBub3IgeW91IHRoZWlyIG5hcGVzLjwvcT4gQXQgbGFzdCwgaG93ZXZlciwgaGUgZ2F2ZSB1cCBoaXMgY29tbWFuZCwgb24gdGhlIGdyb3VuZCB0aGF0IGhpcyBpbmZpcm1pdGllcyBtYWRlIGhpbSBxdWl0ZSBpbmNhcGFibGUgb2YgZXhlcmNpc2luZyBpdC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlCdXQgd2hlbiB0aGUgSXRhbGlhbnMgaGFkIGF0IGxhc3QgbWFkZSB0aGVpciBzdWJtaXNzaW9uLCBhbmQgbWFueSBwZXJzb25zIGF0IFJvbWUgd2VyZSBzdWluZyBmb3IgdGhlIGNvbW1hbmQgaW4gdGhlIE1pdGhyaWRhdGljIHdhciwgd2l0aCB0aGUgYWlkIG9mIHRoZSBwb3B1bGFyIGxlYWRlcnMsIGNvbnRyYXJ5IHRvIGFsbCBleHBlY3RhdGlvbiB0aGUgdHJpYnVuZSBTdWxwaWNpdXMsIGEgbW9zdCBhdWRhY2lvdXMgbWFuOyBicm91Z2h0IE1hcml1cyBmb3J3YXJkIGFuZCBwcm9wb3NlZCB0byBtYWtlIGhpbSBwcm8tY29uc3VsIGluIGNvbW1hbmQgYWdhaW5zdCBNaXRocmlkYXRlcy4gVGhlIHBlb3BsZSB3ZXJlIGRpdmlkZWQgaW4gb3Bpbmlvbiwgc29tZSBwcmVmZXJyaW5nIE1hcml1cywgYW5kIG90aGVycyBjYWxsaW5nIGZvciBTdWxsYSBhbmQgYmlkZGluZyBNYXJpdXMgZ28gdG8gdGhlIHdhcm0gYmF0aHMgYXQgQmFpYWUgYW5kIGxvb2sgb3V0IGZvciBoaXMgaGVhbHRoLCBzaW5jZSBoZSB3YXMgd29ybiBvdXQgd2l0aCBvbGQgYWdlIGFuZCByaGV1bXMsIGFzIGhlIGhpbXNlbGYgc2FpZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGF0IEJhaWFlLCBuZWFyIENhcGUgTWlzZW51bSwgTWFyaXVzIG93bmVkIGFuIGV4cGVuc2l2ZSBob3VzZSwgd2hpY2ggaGFkIGFwcG9pbnRtZW50cyBtb3JlIGx1eHVyaW91cyBhbmQgZWZmZW1pbmF0ZSB0aGFuIGJlY2FtZSBhIG1hbiB3aG8gaGFkIHRha2VuIGFjdGl2ZSBwYXJ0IGluIHNvIG1hbnkgd2FycyBhbmQgY2FtcGFpZ25zLiBUaGlzIGhvdXNlLCB3ZSBhcmUgdG9sZCwgQ29ybmVsaWEgYm91Z2h0IGZvciBzZXZlbnR5LWZpdmUgdGhvdXNhbmQgZHJhY2htYXM7IGFuZCBub3QgbG9uZyBhZnRlcndhcmRzIEx1Y2l1cyBMdWN1bGx1cyBwdXJjaGFzZWQgaXQgZm9yIHR3byBtaWxsaW9uIGZpdmUgaHVuZHJlZCB0aG91c2FuZC4gU28gcXVpY2tseSBkaWQgbGF2aXNoIGV4cGVuZGl0dXJlIHNwcmluZyB1cCwgYW5kIHNvIGdyZWF0IGFuIGluY3JlYXNlIGluIGx1eHVyeSBkaWQgbGlmZSBpbiB0aGUgY2l0eSB0YWtlIG9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMsIGhvd2V2ZXIsIHNob3dpbmcgYSBzcGlyaXQgb2Yga2VlbiBlbXVsYXRpb24gdGhhdCBtaWdodCBoYXZlIGNoYXJhY3Rlcml6ZWQgYSB5b3V0aCwgc2hvb2sgb2ZmIG9sZCBhZ2UgYW5kIGluZmlybWl0eSBhbmQgd2VudCBkb3duIGRhaWx5IGludG8gdGhlLiBDYW1wdXMgTWFydGl1cywgd2hlcmUgaGUgZXhlcmNpc2VkIGhpbXNlbGYgd2l0aCB0aGUgeW91bmcgbWVuIGFuZCBzaG93ZWQgdGhhdCBoZSB3YXMgc3RpbGwgYWdpbGUgaW4gYXJtcyBhbmQgY2FwYWJsZSBvZiBmZWF0cyBvZiBob3JzZW1hbnNoaXAsIGFsdGhvdWdoIGhpcyBidWxrIHdhcyBub3Qgd2VsbCBzZXQgdXAgaW4gaGlzIG9sZCBhZ2UsIGJ1dCByYW4gdG8gY29ycHVsZW5jZSBhbmQgd2VpZ2h0LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlCdXQgd2hlbiB0aGUgSXRhbGlhbnMgaGFkIGF0IGxhc3QgbWFkZSB0aGVpciBzdWJtaXNzaW9uLCBhbmQgbWFueSBwZXJzb25zIGF0IFJvbWUgd2VyZSBzdWluZyBmb3IgdGhlIGNvbW1hbmQgaW4gdGhlIE1pdGhyaWRhdGljIHdhciwgd2l0aCB0aGUgYWlkIG9mIHRoZSBwb3B1bGFyIGxlYWRlcnMsIGNvbnRyYXJ5IHRvIGFsbCBleHBlY3RhdGlvbiB0aGUgdHJpYnVuZSBTdWxwaWNpdXMsIGEgbW9zdCBhdWRhY2lvdXMgbWFuOyBicm91Z2h0IE1hcml1cyBmb3J3YXJkIGFuZCBwcm9wb3NlZCB0byBtYWtlIGhpbSBwcm8tY29uc3VsIGluIGNvbW1hbmQgYWdhaW5zdCBNaXRocmlkYXRlcy4gVGhlIHBlb3BsZSB3ZXJlIGRpdmlkZWQgaW4gb3Bpbmlvbiwgc29tZSBwcmVmZXJyaW5nIE1hcml1cywgYW5kIG90aGVycyBjYWxsaW5nIGZvciBTdWxsYSBhbmQgYmlkZGluZyBNYXJpdXMgZ28gdG8gdGhlIHdhcm0gYmF0aHMgYXQgQmFpYWUgYW5kIGxvb2sgb3V0IGZvciBoaXMgaGVhbHRoLCBzaW5jZSBoZSB3YXMgd29ybiBvdXQgd2l0aCBvbGQgYWdlIGFuZCByaGV1bXMsIGFzIGhlIGhpbXNlbGYgc2FpZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhdCBCYWlhZSwgbmVhciBDYXBlIE1pc2VudW0sIE1hcml1cyBvd25lZCBhbiBleHBlbnNpdmUgaG91c2UsIHdoaWNoIGhhZCBhcHBvaW50bWVudHMgbW9yZSBsdXh1cmlvdXMgYW5kIGVmZmVtaW5hdGUgdGhhbiBiZWNhbWUgYSBtYW4gd2hvIGhhZCB0YWtlbiBhY3RpdmUgcGFydCBpbiBzbyBtYW55IHdhcnMgYW5kIGNhbXBhaWducy4gVGhpcyBob3VzZSwgd2UgYXJlIHRvbGQsIENvcm5lbGlhIGJvdWdodCBmb3Igc2V2ZW50eS1maXZlIHRob3VzYW5kIGRyYWNobWFzOyBhbmQgbm90IGxvbmcgYWZ0ZXJ3YXJkcyBMdWNpdXMgTHVjdWxsdXMgcHVyY2hhc2VkIGl0IGZvciB0d28gbWlsbGlvbiBmaXZlIGh1bmRyZWQgdGhvdXNhbmQuIFNvIHF1aWNrbHkgZGlkIGxhdmlzaCBleHBlbmRpdHVyZSBzcHJpbmcgdXAsIGFuZCBzbyBncmVhdCBhbiBpbmNyZWFzZSBpbiBsdXh1cnkgZGlkIGxpZmUgaW4gdGhlIGNpdHkgdGFrZSBvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cywgaG93ZXZlciwgc2hvd2luZyBhIHNwaXJpdCBvZiBrZWVuIGVtdWxhdGlvbiB0aGF0IG1pZ2h0IGhhdmUgY2hhcmFjdGVyaXplZCBhIHlvdXRoLCBzaG9vayBvZmYgb2xkIGFnZSBhbmQgaW5maXJtaXR5IGFuZCB3ZW50IGRvd24gZGFpbHkgaW50byB0aGUuIENhbXB1cyBNYXJ0aXVzLCB3aGVyZSBoZSBleGVyY2lzZWQgaGltc2VsZiB3aXRoIHRoZSB5b3VuZyBtZW4gYW5kIHNob3dlZCB0aGF0IGhlIHdhcyBzdGlsbCBhZ2lsZSBpbiBhcm1zIGFuZCBjYXBhYmxlIG9mIGZlYXRzIG9mIGhvcnNlbWFuc2hpcCwgYWx0aG91Z2ggaGlzIGJ1bGsgd2FzIG5vdCB3ZWxsIHNldCB1cCBpbiBoaXMgb2xkIGFnZSwgYnV0IHJhbiB0byBjb3JwdWxlbmNlIGFuZCB3ZWlnaHQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIHRoZW4sIHdlcmUgcGxlYXNlZCB0byBoYXZlIGhpbSB0aHVzIGVuZ2FnZWQsIGFuZCB3b3VsZCBnbyBkb3duIGludG8gdGhlIENhbXB1cyBhbmQgd2l0bmVzcyBoaXMgZW11bGF0aW9uIGluIGNvbXBldGl0aXZlIGNvbnRlc3RzOyBidXQgdGhlIGJldHRlciBwYXJ0IHdlcmUgbW92ZWQgdG8gcGl0eSBhdCB0aGUgc2lnaHQgb2YgaGlzIGdyZWVkIGFuZCBhbWJpdGlvbiwgYmVjYXVzZSwgdGhvdWdoIGhlIGhhZCByaXNlbiBmcm9tIHBvdmVydHkgdG8gdGhlIGdyZWF0ZXN0IHdlYWx0aCBhbmQgZnJvbSBvYnNjdXJpdHkgdG8gdGhlIGhpZ2hlc3QgcGxhY2UsIGhlIGtuZXcgbm90IGhvdyB0byBzZXQgYm91bmRzIHRvIGhpcyBnb29kIGZvcnR1bmUsIGFuZCB3YXMgbm90IGNvbnRlbnQgdG8gYmUgYWRtaXJlZCBhbmQgZW5qb3kgcXVpZXRseSB3aGF0IGhlIGhhZCwgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGFzIGlmIGluIG5lZWQgb2YgYWxsIHRoaW5ncywgYW5kIGFmdGVyIHdpbm5pbmcgdHJpdW1waHMgYW5kIGZhbWUsIHdhcyBzZXR0aW5nIG91dCwgd2l0aCBhbGwgaGlzIHllYXJzIHVwb24gaGltLCBmb3IgQ2FwcGFkb2NpYSBhbmQgdGhlIEV1eGluZSBzZWEsIHRvIGZpZ2h0IGl0IG91dCB3aXRoIEFyY2hlbGHDvHMgYW5kIE5lb3B0b2xlbXVzLHRoZSBzYXRyYXBzIG9mIE1pdGhyaWRhdGVzLiBBbmQgdGhlIGp1c3RpZmljYXRpb24gZm9yIHRoaXMgd2hpY2ggTWFyaXVzIG9mZmVyZWQgd2FzIHRob3VnaHQgdG8gYmUgYWx0b2dldGhlciBzaWxseTsgaGUgc2FpZCwgbmFtZWx5LCB0aGF0IGhlIHdpc2hlZCB0byB0YWtlIHBhcnQgcGVyc29uYWxseSBpbiB0aGUgY2FtcGFpZ24gaW4gb3JkZXIgdG8gZ2l2ZSBoaXMgc29uIGEgbWlsaXRhcnkgdHJhaW5pbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIHRoZW4sIHdlcmUgcGxlYXNlZCB0byBoYXZlIGhpbSB0aHVzIGVuZ2FnZWQsIGFuZCB3b3VsZCBnbyBkb3duIGludG8gdGhlIENhbXB1cyBhbmQgd2l0bmVzcyBoaXMgZW11bGF0aW9uIGluIGNvbXBldGl0aXZlIGNvbnRlc3RzOyBidXQgdGhlIGJldHRlciBwYXJ0IHdlcmUgbW92ZWQgdG8gcGl0eSBhdCB0aGUgc2lnaHQgb2YgaGlzIGdyZWVkIGFuZCBhbWJpdGlvbiwgYmVjYXVzZSwgdGhvdWdoIGhlIGhhZCByaXNlbiBmcm9tIHBvdmVydHkgdG8gdGhlIGdyZWF0ZXN0IHdlYWx0aCBhbmQgZnJvbSBvYnNjdXJpdHkgdG8gdGhlIGhpZ2hlc3QgcGxhY2UsIGhlIGtuZXcgbm90IGhvdyB0byBzZXQgYm91bmRzIHRvIGhpcyBnb29kIGZvcnR1bmUsIGFuZCB3YXMgbm90IGNvbnRlbnQgdG8gYmUgYWRtaXJlZCBhbmQgZW5qb3kgcXVpZXRseSB3aGF0IGhlIGhhZCwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['34.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhcyBpZiBpbiBuZWVkIG9mIGFsbCB0aGluZ3MsIGFuZCBhZnRlciB3aW5uaW5nIHRyaXVtcGhzIGFuZCBmYW1lLCB3YXMgc2V0dGluZyBvdXQsIHdpdGggYWxsIGhpcyB5ZWFycyB1cG9uIGhpbSwgZm9yIENhcHBhZG9jaWEgYW5kIHRoZSBFdXhpbmUgc2VhLCB0byBmaWdodCBpdCBvdXQgd2l0aCBBcmNoZWxhw7xzIGFuZCBOZW9wdG9sZW11cyx0aGUgc2F0cmFwcyBvZiBNaXRocmlkYXRlcy4gQW5kIHRoZSBqdXN0aWZpY2F0aW9uIGZvciB0aGlzIHdoaWNoIE1hcml1cyBvZmZlcmVkIHdhcyB0aG91Z2h0IHRvIGJlIGFsdG9nZXRoZXIgc2lsbHk7IGhlIHNhaWQsIG5hbWVseSwgdGhhdCBoZSB3aXNoZWQgdG8gdGFrZSBwYXJ0IHBlcnNvbmFsbHkgaW4gdGhlIGNhbXBhaWduIGluIG9yZGVyIHRvIGdpdmUgaGlzIHNvbiBhIG1pbGl0YXJ5IHRyYWluaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCVRoZXNlIHRoaW5ncyBicm91Z2h0IHRvIGEgaGVhZCB0aGUgc2VjcmV0IGRpc2Vhc2UgZnJvbSB3aGljaCB0aGUgc3RhdGUgaGFkIGxvbmcgYmVlbiBzdWZmZXJpbmcsIGFuZCBNYXJpdXMgZm91bmQgYSBtb3N0IHN1aXRhYmxlIGluc3RydW1lbnQgZm9yIHRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgY29tbW9ud2VhbHRoIGluIHRoZSBhdWRhY2l0eSBvZiBTdWxwaWNpdXMsIHdobyB3YXMgaW4gYWxsIHRoaW5ncyBhbiBhZG1pcmVyIGFuZCBhbiBpbWl0YXRvciBvZiBTYXR1cm5pbnVzLCBleGNlcHQgdGhhdCBoZSBjaGFyZ2VkIGhpbSB3aXRoIHRpbWlkaXR5IGFuZCBoZXNpdGF0aW9uIGluIGhpcyBwb2xpdGljYWwgbWVhc3VyZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1bHBpY2l1cyBoaW1zZWxmIHdhcyBub3QgYSBtYW4gb2YgaGVzaXRhdGlvbiwgYnV0IGtlcHQgc2l4IGh1bmRyZWQgb2YgdGhlIEtuaWdodHMgYWJvdXQgaGltIGFzIGEgYm9keS1ndWFyZCwgd2hpY2ggaGUgY2FsbGVkIGhpcyBhbnRpLXNlbmF0ZTsgaGUgYWxzbyBtYWRlIGFuIGF0dGFjayB3aXRoIGFybWVkIG1lbiB1cG9uIHRoZSBjb25zdWxzIGFzIHRoZXkgd2VyZSBob2xkaW5nIGFuIGFzc2VtYmx5LCBhbmQgd2hlbiBvbmUgb2YgdGhlbSBmbGVkIGZyb20gdGhlIGZvcnVtLCBTdWxwaWNpdXMgc2VpemVkIGhpcyBzb24gYW5kIGJ1dGNoZXJlZCBoaW07IFN1bGxhLCBob3dldmVyLCB0aGUgb3RoZXIgY29uc3VsLCBhcyBoZSB3YXMgYmVpbmcgcHVyc3VlZCBwYXN0IHRoZSBob3VzZSBvZiBNYXJpdXMsIGRpZCB3aGF0IG5vIG9uZSB3b3VsZCBoYXZlIGV4cGVjdGVkIGFuZCBidXJzdCBpbnRvIHRoZSBob3VzZS4gSGlzIHB1cnN1ZXJzIHJhbiBwYXN0IHRoZSBob3VzZSBhbmQgdGhlcmVmb3JlIG1pc3NlZCBoaW0sIGFuZCBpdCBpcyBzYWlkIHRoYXQgTWFyaXVzIGhpbXNlbGYgc2VudCBoaW0gb2ZmIHNhZmVseSBieSBhbm90aGVyIGRvb3Igc28gdGhhdCBoZSBjYW1lIGluIGhhc3RlIHRvIGhpcyBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgU3VsbGEgaGltc2VsZiwgaW4gaGlzIE1lbW9pcnMsIHNheXMgaGUgZGlkIG5vdCBmbHkgZm9yIHJlZnVnZSB0byB0aGUgaG91c2Ugb2YgTWFyaXVzLCBidXQgd2l0aGRyZXcgdGhpdGhlciBpbiBvcmRlciB0byBjb25zdWx0IHdpdGggTWFyaXVzIGFib3V0IHRoZSBzdGVwIHdoaWNoIFN1bHBpY2l1cyB3YXMgdHJ5aW5nIHRvIGZvcmNlIGhpbSB0byB0YWtlIChieSBzdXJyb3VuZGluZyBoaW0gd2l0aCBkcmF3biBzd29yZHMgYW5kIGRyaXZpbmcgaGltIHRvIHRoZSBob3VzZSBvZiBNYXJpdXMpLCBhbmQgdGhhdCBmaW5hbGx5IGhlIHdlbnQgZnJvbSB0aGVyZSB0byB0aGUgZm9ydW0gYW5kIHJlc2NpbmRlZCB0aGUgY29uc3VsYXIgZGVjcmVlIGZvciB0aGUgc3VzcGVuc2lvbiBvZiBwdWJsaWMgYnVzaW5lc3MsIGFzIFN1bHBpY2l1cyBhbmQgaGlzIHBhcnR5IGRlbWFuZGVkLiA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVzZSBwcm9jZWVkaW5ncyBhcmUgbXVjaCBtb3JlIGNsZWFybHkgbmFycmF0ZWQgaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA4LjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPlN1bGxhIDwvdGl0bGU+LCBjaGFwdGVyIHZpaWkgPC9iaWJsPi4gQ2YuIGFsc28gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS43LjU1IiB2YWxpZD0ieWVzIj5BcHBpYW4gPHRpdGxlPkJlbGwuIENpdiA8L3RpdGxlPiBpLiA1NSA8L2JpYmw+LiA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIGhhZCBiZWVuIGRvbmUsIFN1bHBpY2l1cywgd2hvIHdhcyBub3cgbWFzdGVyIG9mIHRoZSBzaXR1YXRpb24sIGdvdCB0aGUgY29tbWFuZCBjb25mZXJyZWQgdXBvbiBNYXJpdXMgYnkgdm90ZSBvZiB0aGUgcGVvcGxlOyBhbmQgTWFyaXVzLCB3aG8gd2FzIG1ha2luZyBoaXMgcHJlcGFyYXRpb25zIGZvciBkZXBhcnR1cmUsIHNlbnQgb3V0IHR3byBtaWxpdGFyeSB0cmlidW5lcyB0byB0YWtlIG92ZXIgdGhlIGNvbW1hbmQgb2YgU3VsbGEncyBhcm15LiBTdWxsYSwgaG93ZXZlciwgY2FsbGVkIHVwb24gaGlzIHNvbGRpZXJzICh3aG8gd2VyZSBubyBmZXdlciB0aGFuIHRoaXJ0eS1maXZlIHRob3VzYW5kIGxlZ2lvbmFyaWVzKSB0byByZXNlbnQgdGhpcywgYW5kIGxlZCB0aGVtIGZvcnRoIGFnYWluc3QgUm9tZS4gSGlzIHNvbGRpZXJzIGFsc28gZmVsbCB1cG9uIHRoZSB0cmlidW5lcyB3aG9tIE1hcml1cyBoYWQgc2VudCBhbmQgc2xldyB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQlUaGVzZSB0aGluZ3MgYnJvdWdodCB0byBhIGhlYWQgdGhlIHNlY3JldCBkaXNlYXNlIGZyb20gd2hpY2ggdGhlIHN0YXRlIGhhZCBsb25nIGJlZW4gc3VmZmVyaW5nLCBhbmQgTWFyaXVzIGZvdW5kIGEgbW9zdCBzdWl0YWJsZSBpbnN0cnVtZW50IGZvciB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIGNvbW1vbndlYWx0aCBpbiB0aGUgYXVkYWNpdHkgb2YgU3VscGljaXVzLCB3aG8gd2FzIGluIGFsbCB0aGluZ3MgYW4gYWRtaXJlciBhbmQgYW4gaW1pdGF0b3Igb2YgU2F0dXJuaW51cywgZXhjZXB0IHRoYXQgaGUgY2hhcmdlZCBoaW0gd2l0aCB0aW1pZGl0eSBhbmQgaGVzaXRhdGlvbiBpbiBoaXMgcG9saXRpY2FsIG1lYXN1cmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1bHBpY2l1cyBoaW1zZWxmIHdhcyBub3QgYSBtYW4gb2YgaGVzaXRhdGlvbiwgYnV0IGtlcHQgc2l4IGh1bmRyZWQgb2YgdGhlIEtuaWdodHMgYWJvdXQgaGltIGFzIGEgYm9keS1ndWFyZCwgd2hpY2ggaGUgY2FsbGVkIGhpcyBhbnRpLXNlbmF0ZTsgaGUgYWxzbyBtYWRlIGFuIGF0dGFjayB3aXRoIGFybWVkIG1lbiB1cG9uIHRoZSBjb25zdWxzIGFzIHRoZXkgd2VyZSBob2xkaW5nIGFuIGFzc2VtYmx5LCBhbmQgd2hlbiBvbmUgb2YgdGhlbSBmbGVkIGZyb20gdGhlIGZvcnVtLCBTdWxwaWNpdXMgc2VpemVkIGhpcyBzb24gYW5kIGJ1dGNoZXJlZCBoaW07IFN1bGxhLCBob3dldmVyLCB0aGUgb3RoZXIgY29uc3VsLCBhcyBoZSB3YXMgYmVpbmcgcHVyc3VlZCBwYXN0IHRoZSBob3VzZSBvZiBNYXJpdXMsIGRpZCB3aGF0IG5vIG9uZSB3b3VsZCBoYXZlIGV4cGVjdGVkIGFuZCBidXJzdCBpbnRvIHRoZSBob3VzZS4gSGlzIHB1cnN1ZXJzIHJhbiBwYXN0IHRoZSBob3VzZSBhbmQgdGhlcmVmb3JlIG1pc3NlZCBoaW0sIGFuZCBpdCBpcyBzYWlkIHRoYXQgTWFyaXVzIGhpbXNlbGYgc2VudCBoaW0gb2ZmIHNhZmVseSBieSBhbm90aGVyIGRvb3Igc28gdGhhdCBoZSBjYW1lIGluIGhhc3RlIHRvIGhpcyBjYW1wLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBTdWxsYSBoaW1zZWxmLCBpbiBoaXMgTWVtb2lycywgc2F5cyBoZSBkaWQgbm90IGZseSBmb3IgcmVmdWdlIHRvIHRoZSBob3VzZSBvZiBNYXJpdXMsIGJ1dCB3aXRoZHJldyB0aGl0aGVyIGluIG9yZGVyIHRvIGNvbnN1bHQgd2l0aCBNYXJpdXMgYWJvdXQgdGhlIHN0ZXAgd2hpY2ggU3VscGljaXVzIHdhcyB0cnlpbmcgdG8gZm9yY2UgaGltIHRvIHRha2UgKGJ5IHN1cnJvdW5kaW5nIGhpbSB3aXRoIGRyYXduIHN3b3JkcyBhbmQgZHJpdmluZyBoaW0gdG8gdGhlIGhvdXNlIG9mIE1hcml1cyksIGFuZCB0aGF0IGZpbmFsbHkgaGUgd2VudCBmcm9tIHRoZXJlIHRvIHRoZSBmb3J1bSBhbmQgcmVzY2luZGVkIHRoZSBjb25zdWxhciBkZWNyZWUgZm9yIHRoZSBzdXNwZW5zaW9uIG9mIHB1YmxpYyBidXNpbmVzcywgYXMgU3VscGljaXVzIGFuZCBoaXMgcGFydHkgZGVtYW5kZWQuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlc2UgcHJvY2VlZGluZ3MgYXJlIG11Y2ggbW9yZSBjbGVhcmx5IG5hcnJhdGVkIGluIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA4LjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3VsbGEgPC90aXRsZT4sIGNoYXB0ZXIgdmlpaSA8L2JpYmw+LiBDZi4gYWxzbyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDEuNy41NSIgdmFsaWQ9InllcyI+QXBwaWFuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdiA8L3RpdGxlPiBpLiA1NSA8L2JpYmw+LiA8L25vdGU+IAoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiA4LjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U3VsbGEgPC90aXRsZT4sIGNoYXB0ZXIgdmlpaSA8L2JpYmw+LiBDZi4gYWxzbyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYSA8L3RpdGxlPiwgY2hhcHRlciB2aWlpIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMS43LjU1IiB2YWxpZD0ieWVzIj5BcHBpYW4gPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2IDwvdGl0bGU+IGkuIDU1IDwvYmlibD4uIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdiA8L3RpdGxlPiBpLiA1NSA8L3RyYW5zbGF0aW9uPg=="
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyBoYWQgYmVlbiBkb25lLCBTdWxwaWNpdXMsIHdobyB3YXMgbm93IG1hc3RlciBvZiB0aGUgc2l0dWF0aW9uLCBnb3QgdGhlIGNvbW1hbmQgY29uZmVycmVkIHVwb24gTWFyaXVzIGJ5IHZvdGUgb2YgdGhlIHBlb3BsZTsgYW5kIE1hcml1cywgd2hvIHdhcyBtYWtpbmcgaGlzIHByZXBhcmF0aW9ucyBmb3IgZGVwYXJ0dXJlLCBzZW50IG91dCB0d28gbWlsaXRhcnkgdHJpYnVuZXMgdG8gdGFrZSBvdmVyIHRoZSBjb21tYW5kIG9mIFN1bGxhJ3MgYXJteS4gU3VsbGEsIGhvd2V2ZXIsIGNhbGxlZCB1cG9uIGhpcyBzb2xkaWVycyAod2hvIHdlcmUgbm8gZmV3ZXIgdGhhbiB0aGlydHktZml2ZSB0aG91c2FuZCBsZWdpb25hcmllcykgdG8gcmVzZW50IHRoaXMsIGFuZCBsZWQgdGhlbSBmb3J0aCBhZ2FpbnN0IFJvbWUuIEhpcyBzb2xkaWVycyBhbHNvIGZlbGwgdXBvbiB0aGUgdHJpYnVuZXMgd2hvbSBNYXJpdXMgaGFkIHNlbnQgYW5kIHNsZXcgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzLCB0b28sIHB1dCB0byBkZWF0aCBtYW55IG9mIFN1bGxhJ3MgZnJpZW5kcyBpbiBSb21lLCBhbmQgcHJvY2xhaW1lZCBmcmVlZG9tIHRvIHRoZSBzbGF2ZXMgaWYgdGhleSB3b3VsZCBmaWdodCBvbiBoaXMgc2lkZS4gSXQgaXMgc2FpZCwgaG93ZXZlciwgdGhhdCBvbmx5IHRocmVlIG9mIHRoZW0gam9pbmVkIGhpcyByYW5rcywgYW5kIGFmdGVyIGEgZmVlYmxlIHJlc2lzdGFuY2UgdG8gU3VsbGEncyBlbnRyeSBpbnRvIHRoZSBjaXR5IGhlIHdhcyBzcGVlZGlseSBkcml2ZW4gb3V0IGFuZCB0b29rIHRvIGZsaWdodC4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTEuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGU+U3VsbGEgPC90aXRsZT4sIGNoYXB0ZXIgeGkgPC9iaWJsPi4gPC9ub3RlPiBBcyBzb29uIGFzIGhlIGhhZCBtYWRlIGhpcyBlc2NhcGUgZnJvbSB0aGUgY2l0eSBoaXMgY29tcGFuaW9ucyB3ZXJlIHNjYXR0ZXJlZCwgYW5kIHNpbmNlIGl0IHdhcyBkYXJrLCBoZSB0b29rIHJlZnVnZSBhdCBvbmUgb2YgaGlzIGZhcm1zdGVhZHMsIGNhbGxlZCBTb2xvbml1bS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYWxzbyBzZW50IGhpcyBzb24gdG8gZ2V0IHByb3Zpc2lvbnMgZnJvbSB0aGUgZXN0YXRlIG9mIGhpcyBmYXRoZXItaW4tbGF3LCBNdWNpdXMsIHdoaWNoIHdhcyBub3QgZmFyIG9mZiwgd2hpbGUgaGUgaGltc2VsZiB3ZW50IGRvd24gdG8gdGhlIGNvYXN0IGF0IE9zdGlhLCB3aGVyZSBhIGZyaWVuZCBvZiBoaXMsIE51bWVyaXVzLCBoYWQgcHJvdmlkZWQgYSB2ZXNzZWwgZm9yIGhpbS4gVGhlbiwgd2l0aG91dCB3YWl0aW5nIGZvciBoaXMgc29uLCBidXQgdGFraW5nIGhpcyBzdGVwLXNvbiBHcmFuaXVzIHdpdGggaGltLCBoZSBzZXQgc2FpbC4gVGhlIHlvdW5nZXIgTWFyaXVzIHJlYWNoZWQgdGhlIGVzdGF0ZSBvZiBNdWNpdXMsIGJ1dCBhcyBoZSB3YXMgZ2V0dGluZyBzdXBwbGllcyBhbmQgcGFja2luZyB0aGVtIHVwLCBkYXkgb3ZlcnRvb2sgaGltIGFuZCBoZSBkaWQgbm90IGFsdG9nZXRoZXIgZXNjYXBlIHRoZSB2aWdpbGFuY2Ugb2YgaGlzIGVuZW1pZXM7IGZvciBzb21lIGhvcnNlbWVuIGNhbWUgcmlkaW5nIHRvd2FyZHMgdGhlIHBsYWNlLCBtb3ZlZCBieSBzdXNwaWNpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG92ZXJzZWVyIG9mIHRoZSBmYXJtIHNhdyB0aGVtIGNvbWluZywgaGUgaGlkIE1hcml1cyBpbiBhIHdhZ2dvbiBsb2FkZWQgd2l0aCBiZWFucywgeW9rZWQgdXAgaGlzIG94ZW4sIGFuZCBtZXQgdGhlIGhvcnNlbWVuIGFzIGhlIHdhcyBkcml2aW5nIHRoZSB3YWdnb24gdG8gdGhlIGNpdHkuIEluIHRoaXMgd2F5IHlvdW5nIE1hcml1cyB3YXMgY29udmV5ZWQgdG8gdGhlIGhvdXNlIG9mIGhpcyB3aWZlLCB3aGVyZSBoZSBnb3Qgd2hhdCBoZSB3YW50ZWQsIGFuZCB0aGVuIGJ5IG5pZ2h0IGNhbWUgdG8gdGhlIHNlYSwgYm9hcmRlZCBhIHNoaXAgdGhhdCB3YXMgYm91bmQgZm9yIEFmcmljYSwgYW5kIGNyb3NzZWQgb3Zlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cywgdG9vLCBwdXQgdG8gZGVhdGggbWFueSBvZiBTdWxsYSdzIGZyaWVuZHMgaW4gUm9tZSwgYW5kIHByb2NsYWltZWQgZnJlZWRvbSB0byB0aGUgc2xhdmVzIGlmIHRoZXkgd291bGQgZmlnaHQgb24gaGlzIHNpZGUuIEl0IGlzIHNhaWQsIGhvd2V2ZXIsIHRoYXQgb25seSB0aHJlZSBvZiB0aGVtIGpvaW5lZCBoaXMgcmFua3MsIGFuZCBhZnRlciBhIGZlZWJsZSByZXNpc3RhbmNlIHRvIFN1bGxhJ3MgZW50cnkgaW50byB0aGUgY2l0eSBoZSB3YXMgc3BlZWRpbHkgZHJpdmVuIG91dCBhbmQgdG9vayB0byBmbGlnaHQuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBTdWxsLiAxMS4xIiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlN1bGxhIDwvdGl0bGU+LCBjaGFwdGVyIHhpIDwvYmlibD4uIDwvbm90ZT4gQXMgc29vbiBhcyBoZSBoYWQgbWFkZSBoaXMgZXNjYXBlIGZyb20gdGhlIGNpdHkgaGlzIGNvbXBhbmlvbnMgd2VyZSBzY2F0dGVyZWQsIGFuZCBzaW5jZSBpdCB3YXMgZGFyaywgaGUgdG9vayByZWZ1Z2UgYXQgb25lIG9mIGhpcyBmYXJtc3RlYWRzLCBjYWxsZWQgU29sb25pdW0uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU3VsbC4gMTEuMSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYSA8L3RpdGxlPiwgY2hhcHRlciB4aSA8L2JpYmw+LiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TdWxsYSA8L3RpdGxlPiwgY2hhcHRlciB4aSA8L3RyYW5zbGF0aW9uPg=="
translation['35.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gc2VudCBoaXMgc29uIHRvIGdldCBwcm92aXNpb25zIGZyb20gdGhlIGVzdGF0ZSBvZiBoaXMgZmF0aGVyLWluLWxhdywgTXVjaXVzLCB3aGljaCB3YXMgbm90IGZhciBvZmYsIHdoaWxlIGhlIGhpbXNlbGYgd2VudCBkb3duIHRvIHRoZSBjb2FzdCBhdCBPc3RpYSwgd2hlcmUgYSBmcmllbmQgb2YgaGlzLCBOdW1lcml1cywgaGFkIHByb3ZpZGVkIGEgdmVzc2VsIGZvciBoaW0uIFRoZW4sIHdpdGhvdXQgd2FpdGluZyBmb3IgaGlzIHNvbiwgYnV0IHRha2luZyBoaXMgc3RlcC1zb24gR3Jhbml1cyB3aXRoIGhpbSwgaGUgc2V0IHNhaWwuIFRoZSB5b3VuZ2VyIE1hcml1cyByZWFjaGVkIHRoZSBlc3RhdGUgb2YgTXVjaXVzLCBidXQgYXMgaGUgd2FzIGdldHRpbmcgc3VwcGxpZXMgYW5kIHBhY2tpbmcgdGhlbSB1cCwgZGF5IG92ZXJ0b29rIGhpbSBhbmQgaGUgZGlkIG5vdCBhbHRvZ2V0aGVyIGVzY2FwZSB0aGUgdmlnaWxhbmNlIG9mIGhpcyBlbmVtaWVzOyBmb3Igc29tZSBob3JzZW1lbiBjYW1lIHJpZGluZyB0b3dhcmRzIHRoZSBwbGFjZSwgbW92ZWQgYnkgc3VzcGljaW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['35.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIG92ZXJzZWVyIG9mIHRoZSBmYXJtIHNhdyB0aGVtIGNvbWluZywgaGUgaGlkIE1hcml1cyBpbiBhIHdhZ2dvbiBsb2FkZWQgd2l0aCBiZWFucywgeW9rZWQgdXAgaGlzIG94ZW4sIGFuZCBtZXQgdGhlIGhvcnNlbWVuIGFzIGhlIHdhcyBkcml2aW5nIHRoZSB3YWdnb24gdG8gdGhlIGNpdHkuIEluIHRoaXMgd2F5IHlvdW5nIE1hcml1cyB3YXMgY29udmV5ZWQgdG8gdGhlIGhvdXNlIG9mIGhpcyB3aWZlLCB3aGVyZSBoZSBnb3Qgd2hhdCBoZSB3YW50ZWQsIGFuZCB0aGVuIGJ5IG5pZ2h0IGNhbWUgdG8gdGhlIHNlYSwgYm9hcmRlZCBhIHNoaXAgdGhhdCB3YXMgYm91bmQgZm9yIEFmcmljYSwgYW5kIGNyb3NzZWQgb3Zlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGVsZGVyIE1hcml1cywgYWZ0ZXIgcHV0dGluZyB0byBzZWEgd2FzIGJvcm5lIGJ5IGEgZmF2b3VyaW5nIHdpbmQgYWxvbmcgdGhlIGNvYXN0IG9mIEl0YWx5OyBidXQgc2luY2UgaGUgd2FzIGFmcmFpZCBvZiBvbmUgR2VtaW5pdXMsIHdobyB3YXMgYSBwb3dlcmZ1bCBtYW4gaW4gVGVycmFjaW5hIGFuZCBhbiBlbmVteSBvZiBoaXMsIGhlIHRvbGQgaGlzIHNhaWxvcnMgdG8ga2VlcCBjbGVhciBvZiBUZXJyYWNpbmEuIFRoZSBzYWlsb3JzIHdlcmUgd2lsbGluZyBlbm91Z2ggdG8gZG8gYXMgaGUgd2lzaGVkLCBidXQgdGhlIHdpbmQgdmVlcmVkIHJvdW5kIGFuZCBibGV3IHRvd2FyZHMgdGhlIHNob3JlLCBicmluZ2luZyBpbiBhIGhlYXZ5IHN1cmdlLCBhbmQgaXQgd2FzIHRob3VnaHQgdGhhdCB0aGUgdmVzc2VsIHdvdWxkIG5vdCBob2xkIG91dCBhZ2FpbnN0IHRoZSBiZWF0aW5nIG9mIHRoZSB3YXZlcyBiZXNpZGVzLCBNYXJpdXMgd2FzIGluIGEgd3JldGNoZWQgcGxpZ2h0IGZyb20gc2VhLXNpY2tuZXNzLCBhbmQgdGhlcmVmb3JlIHRoZXkgbWFkZSB0aGVpciB3YXksIHRob3VnaCB3aXRoIGRpZmZpY3VsdHksIHRvIHRoZSBjb2FzdCBuZWFyIENpcmNlaWkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFzIHRoZSBzdG9ybSB3YXMgaW5jcmVhc2luZyBhbmQgdGhlaXIgcHJvdmlzaW9ucyB3ZXJlIGZhaWxpbmcsIHRoZXkgbGFuZGVkIGZyb20gdGhlIHZlc3NlbCBhbmQgd2FuZGVyZWQgYWJvdXQuIFRoZXkgaGFkIG5vIGRlZmluaXRlIG9iamVjdCBpbiB2aWV3LCBidXQsIGFzIGlzIHVzdWFsIGluIGNhc2VzIG9mIGdyZWF0IHBlcnBsZXhpdHksIHNvdWdodCBhbHdheXMgdG8gZXNjYXBlIHRoZSBwcmVzZW50IGV2aWwgYXMgdGhlIG1vc3QgZ3JpZXZvdXMgYW5kIGZpeGVkIHRoZWlyIGhvcGVzIG9uIHRoZSB1bmtub3duIGZ1dHVyZS4gRm9yIHRoZSBsYW5kIHdhcyB0aGVpciBlbmVteSwgYW5kIHRoZSBzZWEgYW4gZW5lbXkgYXMgd2VsbDsgdGhleSB3ZXJlIGFmcmFpZCB0aGV5IG1pZ2h0IGZhbGwgaW4gd2l0aCBtZW4sIGFuZCB0aGV5IHdlcmUgYWZyYWlkIHRoZXkgbWlnaHQgbm90IGZhbGwgaW4gd2l0aCBtZW4gYmVjYXVzZSB0aGV5IGhhZCBubyBwcm92aXNpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBsYXRlIGluIHRoZSBkYXkgdGhleSBjYW1lIHVwb24gYSBmZXcgaGVyZHNtZW47IHRoZXNlIGhhZCBub3RoaW5nIHRvIGdpdmUgdGhlbSBpbiB0aGVpciBuZWVkLCBidXQgdGhleSByZWNvZ25pemVkIE1hcml1cyBhbmQgYmFkZSBoaW0gZ28gYXdheSBhcyBmYXN0IGFzIGhlIGNvdWxkOyBmb3IgYSBsaXR0bGUgd2hpbGUgYmVmb3JlIG51bWVyb3VzIGhvcnNlbWVuIGhhZCBiZWVuIHNlZW4gcmlkaW5nIGFib3V0IHRoZXJlIGluIHNlYXJjaCBvZiBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgYXQgaGlzIHdpdHMnIGVuZCwgYW5kLCB3aGF0IHdhcyB3b3JzdCBvZiBhbGwsIGhpcyBjb21wYW5pb25zIGZhaW50aW5nIHdpdGggaHVuZ2VyLCBoZSB0dXJuZWQgYXNpZGUgZm9yIHRoZSB3aGlsZSBmcm9tIHRoZSByb2FkLCBwbHVuZ2VkIGludG8gYSBkZWVwIGZvcmVzdCwgYW5kIHRoZXJlIHNwZW50IHRoZSBuaWdodCBpbiBncmVhdCBkaXN0cmVzcy4gQnV0IHRoZSBuZXh0IGRheSwgY29tcGVsbGVkIGJ5JyB3YW50LCBhbmQgd2lzaGluZyB0byBtYWtlIHVzZSBvZiBoaXMgc3RyZW5ndGggYmVmb3JlIGl0IGZhaWxlZCBoaW0gYWx0b2dldGhlciwgaGUgd2FuZGVyZWQgYWxvbmcgdGhlIHNob3JlLCB0cnlpbmcgdG8gZW5jb3VyYWdlIGhpcyBjb21wYW5pb25zLCBhbmQgYmVnZ2luZyB0aGVtIG5vdCB0byBnaXZlIHVwIHRoZSBzdHJ1Z2dsZSBiZWZvcmUgaGlzIGxhc3QgaG9wZSBjb3VsZCBiZSByZWFsaXplZCwgZm9yIHdoaWNoIGhlIHdhcyBzdGlsbCByZXNlcnZpbmcgaGltc2VsZiBpbiByZWxpYW5jZSBvbiBhbmNpZW50IHByb3BoZWNpZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoYXQgaXMsIGhlIHdhcyBxdWl0ZSB5b3VuZyBhbmQgbGl2aW5nIGluIHRoZSBjb3VudHJ5LCBoZSBoYWQgY2F1Z2h0IGluIGhpcyBjbG9hayBhIGZhbGxpbmcgZWFnbGUncyBuZXN0LCB3aGljaCBoYWQgc2V2ZW4geW91bmcgb25lcyBpbiBpdDsgYXQgc2lnaHQgb2YgdGhpcywgaGlzIHBhcmVudHMgd2VyZSBhbWF6ZWQsIGFuZCBtYWRlIGVucXVpcmllcyBvZiB0aGUgc2VlcnMsIHdobyB0b2xkIHRoZW0gdGhhdCB0aGVpciBzb24gd291bGQgYmUgbW9zdCBpbGx1c3RyaW91cyBvZiBtZW4sIGFuZCB3YXMgZGVzdGluZWQgdG8gcmVjZWl2ZSB0aGUgaGlnaGVzdCBjb21tYW5kIGFuZCBwb3dlciBzZXZlbiB0aW1lcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGVsZGVyIE1hcml1cywgYWZ0ZXIgcHV0dGluZyB0byBzZWEgd2FzIGJvcm5lIGJ5IGEgZmF2b3VyaW5nIHdpbmQgYWxvbmcgdGhlIGNvYXN0IG9mIEl0YWx5OyBidXQgc2luY2UgaGUgd2FzIGFmcmFpZCBvZiBvbmUgR2VtaW5pdXMsIHdobyB3YXMgYSBwb3dlcmZ1bCBtYW4gaW4gVGVycmFjaW5hIGFuZCBhbiBlbmVteSBvZiBoaXMsIGhlIHRvbGQgaGlzIHNhaWxvcnMgdG8ga2VlcCBjbGVhciBvZiBUZXJyYWNpbmEuIFRoZSBzYWlsb3JzIHdlcmUgd2lsbGluZyBlbm91Z2ggdG8gZG8gYXMgaGUgd2lzaGVkLCBidXQgdGhlIHdpbmQgdmVlcmVkIHJvdW5kIGFuZCBibGV3IHRvd2FyZHMgdGhlIHNob3JlLCBicmluZ2luZyBpbiBhIGhlYXZ5IHN1cmdlLCBhbmQgaXQgd2FzIHRob3VnaHQgdGhhdCB0aGUgdmVzc2VsIHdvdWxkIG5vdCBob2xkIG91dCBhZ2FpbnN0IHRoZSBiZWF0aW5nIG9mIHRoZSB3YXZlcyBiZXNpZGVzLCBNYXJpdXMgd2FzIGluIGEgd3JldGNoZWQgcGxpZ2h0IGZyb20gc2VhLXNpY2tuZXNzLCBhbmQgdGhlcmVmb3JlIHRoZXkgbWFkZSB0aGVpciB3YXksIHRob3VnaCB3aXRoIGRpZmZpY3VsdHksIHRvIHRoZSBjb2FzdCBuZWFyIENpcmNlaWkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFzIHRoZSBzdG9ybSB3YXMgaW5jcmVhc2luZyBhbmQgdGhlaXIgcHJvdmlzaW9ucyB3ZXJlIGZhaWxpbmcsIHRoZXkgbGFuZGVkIGZyb20gdGhlIHZlc3NlbCBhbmQgd2FuZGVyZWQgYWJvdXQuIFRoZXkgaGFkIG5vIGRlZmluaXRlIG9iamVjdCBpbiB2aWV3LCBidXQsIGFzIGlzIHVzdWFsIGluIGNhc2VzIG9mIGdyZWF0IHBlcnBsZXhpdHksIHNvdWdodCBhbHdheXMgdG8gZXNjYXBlIHRoZSBwcmVzZW50IGV2aWwgYXMgdGhlIG1vc3QgZ3JpZXZvdXMgYW5kIGZpeGVkIHRoZWlyIGhvcGVzIG9uIHRoZSB1bmtub3duIGZ1dHVyZS4gRm9yIHRoZSBsYW5kIHdhcyB0aGVpciBlbmVteSwgYW5kIHRoZSBzZWEgYW4gZW5lbXkgYXMgd2VsbDsgdGhleSB3ZXJlIGFmcmFpZCB0aGV5IG1pZ2h0IGZhbGwgaW4gd2l0aCBtZW4sIGFuZCB0aGV5IHdlcmUgYWZyYWlkIHRoZXkgbWlnaHQgbm90IGZhbGwgaW4gd2l0aCBtZW4gYmVjYXVzZSB0aGV5IGhhZCBubyBwcm92aXNpb25zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGxhdGUgaW4gdGhlIGRheSB0aGV5IGNhbWUgdXBvbiBhIGZldyBoZXJkc21lbjsgdGhlc2UgaGFkIG5vdGhpbmcgdG8gZ2l2ZSB0aGVtIGluIHRoZWlyIG5lZWQsIGJ1dCB0aGV5IHJlY29nbml6ZWQgTWFyaXVzIGFuZCBiYWRlIGhpbSBnbyBhd2F5IGFzIGZhc3QgYXMgaGUgY291bGQ7IGZvciBhIGxpdHRsZSB3aGlsZSBiZWZvcmUgbnVtZXJvdXMgaG9yc2VtZW4gaGFkIGJlZW4gc2VlbiByaWRpbmcgYWJvdXQgdGhlcmUgaW4gc2VhcmNoIG9mIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgYXQgaGlzIHdpdHMnIGVuZCwgYW5kLCB3aGF0IHdhcyB3b3JzdCBvZiBhbGwsIGhpcyBjb21wYW5pb25zIGZhaW50aW5nIHdpdGggaHVuZ2VyLCBoZSB0dXJuZWQgYXNpZGUgZm9yIHRoZSB3aGlsZSBmcm9tIHRoZSByb2FkLCBwbHVuZ2VkIGludG8gYSBkZWVwIGZvcmVzdCwgYW5kIHRoZXJlIHNwZW50IHRoZSBuaWdodCBpbiBncmVhdCBkaXN0cmVzcy4gQnV0IHRoZSBuZXh0IGRheSwgY29tcGVsbGVkIGJ5JyB3YW50LCBhbmQgd2lzaGluZyB0byBtYWtlIHVzZSBvZiBoaXMgc3RyZW5ndGggYmVmb3JlIGl0IGZhaWxlZCBoaW0gYWx0b2dldGhlciwgaGUgd2FuZGVyZWQgYWxvbmcgdGhlIHNob3JlLCB0cnlpbmcgdG8gZW5jb3VyYWdlIGhpcyBjb21wYW5pb25zLCBhbmQgYmVnZ2luZyB0aGVtIG5vdCB0byBnaXZlIHVwIHRoZSBzdHJ1Z2dsZSBiZWZvcmUgaGlzIGxhc3QgaG9wZSBjb3VsZCBiZSByZWFsaXplZCwgZm9yIHdoaWNoIGhlIHdhcyBzdGlsbCByZXNlcnZpbmcgaGltc2VsZiBpbiByZWxpYW5jZSBvbiBhbmNpZW50IHByb3BoZWNpZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIHRoYXQgaXMsIGhlIHdhcyBxdWl0ZSB5b3VuZyBhbmQgbGl2aW5nIGluIHRoZSBjb3VudHJ5LCBoZSBoYWQgY2F1Z2h0IGluIGhpcyBjbG9hayBhIGZhbGxpbmcgZWFnbGUncyBuZXN0LCB3aGljaCBoYWQgc2V2ZW4geW91bmcgb25lcyBpbiBpdDsgYXQgc2lnaHQgb2YgdGhpcywgaGlzIHBhcmVudHMgd2VyZSBhbWF6ZWQsIGFuZCBtYWRlIGVucXVpcmllcyBvZiB0aGUgc2VlcnMsIHdobyB0b2xkIHRoZW0gdGhhdCB0aGVpciBzb24gd291bGQgYmUgbW9zdCBpbGx1c3RyaW91cyBvZiBtZW4sIGFuZCB3YXMgZGVzdGluZWQgdG8gcmVjZWl2ZSB0aGUgaGlnaGVzdCBjb21tYW5kIGFuZCBwb3dlciBzZXZlbiB0aW1lcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSBzYXkgdGhhdCB0aGlzIHJlYWxseSBoYXBwZW5lZCB0byBNYXJpdXM7IGJ1dCBvdGhlcnMgc2F5IHRoYXQgdGhvc2Ugd2hvIGhlYXJkIHRoZSBzdG9yeSBmcm9tIGhpbSBhdCB0aGlzIHRpbWUgYW5kIGR1cmluZyB0aGUgcmVzdCBvZiBoaXMgZmxpZ2h0LCBiZWxpZXZlZCBpdCwgYW5kIHJlY29yZGVkIGl0LCB0aG91Z2ggaXQgd2FzIHdob2xseSBmYWJ1bG91cy4gRm9yLCB0aGV5IHNheSwgYW4gZWFnbGUgZG9lcyBub3QgbGF5IG1vcmUgdGhhbiB0d28gZWdncyBhdCBvbmUgdGltZSwgYW5kIE11c2FldXMgYWxzbyB3YXMgd3Jvbmcgd2hlbiwgc3BlYWtpbmcgb2YgdGhlIGVhZ2xlLCBoZSBzYXlzOiAKCQkJCTxxdW90ZSByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGw+VGhyZWUgaW5kZWVkIHNoZSBsYXlldGgsIGFuZCB0d28gaGF0Y2hldGgsIGJ1dCBvbmUgb25seSBkb3RoIHNoZSBmZWVkLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4gCiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDIxIChLaW5rZWwsIDx0aXRsZT5FcC4gR3JhZWMuIEZyYWcuIDwvdGl0bGU+LCBwLiAyMjkpLiA8L25vdGU+CgkJCQlIb3dldmVyLCB0aGF0IE1hcml1cywgZHVyaW5nIGhpcyBmbGlnaHQgYW5kIGluIGhpcyBleHRyZW1lc3QgZGlmZmljdWx0aWVzLCBvZnRlbiBzYWlkIHRoYXQgaGUgc2hvdWxkIGF0dGFpbiB0byBhIHNldmVudGggY29uc3Vsc2hpcCwgaXMgZ2VuZXJhbGx5IGFkbWl0dGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgc2F5IHRoYXQgdGhpcyByZWFsbHkgaGFwcGVuZWQgdG8gTWFyaXVzOyBidXQgb3RoZXJzIHNheSB0aGF0IHRob3NlIHdobyBoZWFyZCB0aGUgc3RvcnkgZnJvbSBoaW0gYXQgdGhpcyB0aW1lIGFuZCBkdXJpbmcgdGhlIHJlc3Qgb2YgaGlzIGZsaWdodCwgYmVsaWV2ZWQgaXQsIGFuZCByZWNvcmRlZCBpdCwgdGhvdWdoIGl0IHdhcyB3aG9sbHkgZmFidWxvdXMuIEZvciwgdGhleSBzYXksIGFuIGVhZ2xlIGRvZXMgbm90IGxheSBtb3JlIHRoYW4gdHdvIGVnZ3MgYXQgb25lIHRpbWUsIGFuZCBNdXNhZXVzIGFsc28gd2FzIHdyb25nIHdoZW4sIHNwZWFraW5nIG9mIHRoZSBlYWdsZSwgaGUgc2F5czogCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaHJlZSBpbmRlZWQgc2hlIGxheWV0aCwgYW5kIHR3byBoYXRjaGV0aCwgYnV0IG9uZSBvbmx5IGRvdGggc2hlIGZlZWQuPC9sPgoJCQkJICAgICAgICA8L3F1b3RlPiAKICAgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaHJlZSBpbmRlZWQgc2hlIGxheWV0aCwgYW5kIHR3byBoYXRjaGV0aCwgYnV0IG9uZSBvbmx5IGRvdGggc2hlIGZlZWQuPC9sPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZyYWdtZW50IDIxIChLaW5rZWwsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwLiBHcmFlYy4gRnJhZy4gPC90aXRsZT4sIHAuIDIyOSkuIDwvbm90ZT4KCQkJCUhvd2V2ZXIsIHRoYXQgTWFyaXVzLCBkdXJpbmcgaGlzIGZsaWdodCBhbmQgaW4gaGlzIGV4dHJlbWVzdCBkaWZmaWN1bHRpZXMsIG9mdGVuIHNhaWQgdGhhdCBoZSBzaG91bGQgYXR0YWluIHRvIGEgc2V2ZW50aCBjb25zdWxzaGlwLCBpcyBnZW5lcmFsbHkgYWRtaXR0ZWQuCgkJCTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkVwLiBHcmFlYy4gRnJhZy4gPC90aXRsZT4sIHAuIDIyOSkuIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwcmVzZW50bHksIHdoZW4gdGhleSB3ZXJlIGFib3V0IHR3ZW50eSBmdXJsb25ncyBkaXN0YW50IGZyb20gTWludHVybmFlLCBhbiBJdGFsaWFuIGNpdHksIHRoZXkgc2F3IGZyb20gYWZhciBhIHRyb29wIG9mIGhvcnNlbWVuIHJpZGluZyB0b3dhcmRzIHRoZW0sIGFuZCBhbHNvLCBhcyBpdCBjaGFuY2VkLCB0d28gbWVyY2hhbnQgdmVzc2VscyBzYWlsaW5nIGFsb25nLiBBY2NvcmRpbmdseSwgd2l0aCBhbGwgdGhlIHNwZWVkIGFuZCBzdHJlbmd0aCB0aGV5IGhhZCwgdGhleSByYW4gZG93biB0byB0aGUgc2VhLCB0aHJldyB0aGVtc2VsdmVzIGludG8gdGhlIHdhdGVyLCBhbmQgYmVnYW4gdG8gc3dpbSB0byB0aGUgc2hpcHMuIEdyYW5pdXMgYW5kIGhpcyBwYXJ0eSByZWFjaGVkIG9uZSBvZiB0aGUgc2hpcHMgYW5kIGNyb3NzZWQgb3ZlciB0byB0aGUgb3Bwb3NpdGUgaXNsYW5kLCBBZW5hcmlhIGJ5IG5hbWU7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBoaW1zZWxmOyB3aG8gd2FzIGhlYXZ5IGFuZCB1bndpZWxkeSwgdHdvIHNsYXZlcyB3aXRoIHRvaWwgYW5kIGRpZmZpY3VsdHkgaGVsZCBhYm92ZSB3YXRlciBhbmQgcHV0IGludG8gdGhlIG90aGVyIHNoaXAsIHRoZSBob3JzZW1lbiBiZWluZyBub3cgYXQgaGFuZCBhbmQgY2FsbGluZyBvdXQgZnJvbSB0aGUgc2hvcmUgdG8gdGhlIHNhaWxvcnMgZWl0aGVyIHRvIGJyaW5nIHRoZSB2ZXNzZWwgdG8gc2hvcmUgb3IgdG8gdGhyb3cgTWFyaXVzIG92ZXJib2FyZCBhbmQgc2FpbCB3aGl0aGVyIHRoZXkgcGxlYXNlZC4gQnV0IHNpbmNlIE1hcml1cyBzdXBwbGljYXRlZCB0aGVtIHdpdGggdGVhcnMgaW4gaGlzIGV5ZXMsIHRoZSBtYXN0ZXJzIG9mIHRoZSB2ZXNzZWwsIGFmdGVyIGNoYW5naW5nIHRoZWlyIG1pbmRzIG9mdGVuIGluIGEgc2hvcnQgdGltZSwgbmV2ZXJ0aGVsZXNzIHJlcGxpZWQgdG8gdGhlIGhvcnNlbWVuIHRoYXQgdGhleSB3b3VsZCBub3Qgc3VycmVuZGVyIE1hcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGhvcnNlbWVuIHJvZGUgYXdheSBpbiBhIHJhZ2UsIGFuZCB0aGUgc2FpbG9ycywgY2hhbmdpbmcgdGhlaXIgcGxhbiBhZ2FpbiwgcHV0IGluIHRvd2FyZHMgdGhlIHNob3JlOyBhbmQgYWZ0ZXIgY2FzdGluZyBhbmNob3IgYXQgdGhlIG1vdXRoIG9mIHRoZSBiaW5zLCB3aGVyZSB0aGUgcml2ZXIgZXhwYW5kcyBpbnRvIGEgbGFrZSwgdGhleSBhZHZpc2VkIE1hcml1cyB0byBsZWF2ZSB0aGUgdmVzc2VsLCB0YWtlIHNvbWUgZm9vZCBhc2hvcmUgd2l0aCBoaW0sIGFuZCByZWNydWl0IGhpcyBzdHJlbmd0aCBhZnRlciBoaXMgaGFyZHNoaXBzIHVudGlsIGEgZ29vZCB3aW5kIGZvciBzYWlsaW5nIHNob3VsZCBhcmlzZTsgdGhpcyB1c3VhbGx5IGFyb3NlLCB0aGV5IHNhaWQsIHdoZW4gdGhlIHdpbmQgZnJvbSB0aGUgc2VhIGRpZWQgYXdheSBhbmQgYSB0b2xlcmFibHkgc3Ryb25nIGJyZWV6ZSBibGV3IGZyb20gdGhlIG1hcnNoZXMuIE1hbml1cyB3YXMgcGVyc3VhZGVkIHRvIGZvbGxvdyB0aGVpciBhZHZpY2U7IHNvIHRoZSBzYWlsb3JzIGNhcnJpZWQgaGltIGFzaG9yZSwgYW5kIGhlIGxheSBkb3duIGluIHNvbWUgZ3Jhc3MsIHdpdGhvdXQgdGhlIHNsaWdodGVzdCB0aG91Z2h0IG9mIHdoYXQgd2FzIHRvIGNvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIHNhaWxvcnMgYXQgb25jZSBib2FyZGVkIHRoZWlyIHZlc3NlbCwgaG9pc3RlZCBhbmNob3IsIGFuZCB0b29rIHRvIGZsaWdodCwgZmVlbGluZyB0aGF0IGl0IHdhcyBuZWl0aGVyIGhvbm91cmFibGUgZm9yIHRoZW0gdG8gc3VycmVuZGVyIE1hcml1cyBub3Igc2FmZSB0byByZXNjdWUgaGltLiBUaHVzLCBmb3JzYWtlbiBvZiBhbGwgbWVuLCBoZSBsYXkgYSBsb25nIHRpbWUgc3BlZWNobGVzcyBvbiB0aGUgc2hvcmUsIGJ1dCByZWNvdmVyZWQgaGltc2VsZiBhdCBsYXN0IGFuZCB0cmllZCB0byB3YWxrIGFsb25nLCB0aGUgbGFjayBvZiBhbnkgcGF0aCBtYWtpbmcgaGlzIHByb2dyZXNzIGxhYm9yaW91cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbWFkZSBoaXMgd2F5IHRocm91Z2ggZGVlcCBtYXJzaGVzIGFuZCBkaXRjaGVzIGZ1bGwgb2YgbXVkIGFuZCB3YXRlciwgdW50aWwgaGUgY2FtZSB0byB0aGUgaHV0IG9mIGFuIG9sZCBtYW4gd2hvIGdvdCBoaXMgbGl2aW5nIGZyb20gdGhlIHdhdGVyLiBBdCBoaXMgZmVldCBNYXJpdXMgZmVsbCBkb3duIGFuZCBiZXNvdWdodCBoaW0gdG8gc2F2ZSBhbmQgaGVscCBhIG1hbiB3aG8sIGluIGNhc2UgaGUgZXNjYXBlZCBoaXMgcHJlc2VudCBwZXJpbHMsIHdvdWxkIHJlY29tcGVuc2UgaGltIGJleW9uZCBhbGwgaGlzIGhvcGVzLiBUaGVuIHRoZSBtYW4sIHdobyBlaXRoZXIga25ldyBNYXJpdXMgZnJvbSBvZiBvbGQgb3Igc2F3IHRoYXQgaW4gaGlzIGZhY2Ugd2hpY2ggd29uIHRoZSByZWdhcmQgZHVlIHRvIHN1cGVyaW9yIHJhbmssIHRvbGQgaGltIHRoYXQgaWYgaGUgbWVyZWx5IHdhbnRlZCB0byByZXN0LCB0aGUgY2FiaW4gd291bGQgc3VmZmljZSwgYnV0IHRoYXQgaWYgaGUgd2FzIHdhbmRlcmluZyBhYm91dCB0cnlpbmcgdG8gZXNjYXBlIHB1cnN1ZXJzLCBoZSBjb3VsZCBiZSBoaWRkZW4gaW4gYSBwbGFjZSB0aGF0IHdhcyBtb3JlIHF1aWV0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5NYXJpdXMgYmVnZ2VkIHRoYXQgdGhpcyBtaWdodCBiZSBkb25lLCBhbmQgdGhlIG1hbiB0b29rIGhpbSB0byB0aGUgbWFyc2gsIGJhZGUgaGltIGNyb3VjaCBkb3duIGluIGEgaG9sbG93IHBsYWNlIGJ5IHRoZSBzaWRlIG9mIHRoZSByaXZlciwgYW5kIHRocmV3IG92ZXIgaGltIGEgbWFzcyBvZiByZWVkcyBhbmQgb3RoZXIgbWF0ZXJpYWwgd2hpY2ggd2FzIGxpZ2h0IGVub3VnaCB0byBjb3ZlciB3aXRob3V0IGluanVyaW5nIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHByZXNlbnRseSwgd2hlbiB0aGV5IHdlcmUgYWJvdXQgdHdlbnR5IGZ1cmxvbmdzIGRpc3RhbnQgZnJvbSBNaW50dXJuYWUsIGFuIEl0YWxpYW4gY2l0eSwgdGhleSBzYXcgZnJvbSBhZmFyIGEgdHJvb3Agb2YgaG9yc2VtZW4gcmlkaW5nIHRvd2FyZHMgdGhlbSwgYW5kIGFsc28sIGFzIGl0IGNoYW5jZWQsIHR3byBtZXJjaGFudCB2ZXNzZWxzIHNhaWxpbmcgYWxvbmcuIEFjY29yZGluZ2x5LCB3aXRoIGFsbCB0aGUgc3BlZWQgYW5kIHN0cmVuZ3RoIHRoZXkgaGFkLCB0aGV5IHJhbiBkb3duIHRvIHRoZSBzZWEsIHRocmV3IHRoZW1zZWx2ZXMgaW50byB0aGUgd2F0ZXIsIGFuZCBiZWdhbiB0byBzd2ltIHRvIHRoZSBzaGlwcy4gR3Jhbml1cyBhbmQgaGlzIHBhcnR5IHJlYWNoZWQgb25lIG9mIHRoZSBzaGlwcyBhbmQgY3Jvc3NlZCBvdmVyIHRvIHRoZSBvcHBvc2l0ZSBpc2xhbmQsIEFlbmFyaWEgYnkgbmFtZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBoaW1zZWxmOyB3aG8gd2FzIGhlYXZ5IGFuZCB1bndpZWxkeSwgdHdvIHNsYXZlcyB3aXRoIHRvaWwgYW5kIGRpZmZpY3VsdHkgaGVsZCBhYm92ZSB3YXRlciBhbmQgcHV0IGludG8gdGhlIG90aGVyIHNoaXAsIHRoZSBob3JzZW1lbiBiZWluZyBub3cgYXQgaGFuZCBhbmQgY2FsbGluZyBvdXQgZnJvbSB0aGUgc2hvcmUgdG8gdGhlIHNhaWxvcnMgZWl0aGVyIHRvIGJyaW5nIHRoZSB2ZXNzZWwgdG8gc2hvcmUgb3IgdG8gdGhyb3cgTWFyaXVzIG92ZXJib2FyZCBhbmQgc2FpbCB3aGl0aGVyIHRoZXkgcGxlYXNlZC4gQnV0IHNpbmNlIE1hcml1cyBzdXBwbGljYXRlZCB0aGVtIHdpdGggdGVhcnMgaW4gaGlzIGV5ZXMsIHRoZSBtYXN0ZXJzIG9mIHRoZSB2ZXNzZWwsIGFmdGVyIGNoYW5naW5nIHRoZWlyIG1pbmRzIG9mdGVuIGluIGEgc2hvcnQgdGltZSwgbmV2ZXJ0aGVsZXNzIHJlcGxpZWQgdG8gdGhlIGhvcnNlbWVuIHRoYXQgdGhleSB3b3VsZCBub3Qgc3VycmVuZGVyIE1hcml1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBob3JzZW1lbiByb2RlIGF3YXkgaW4gYSByYWdlLCBhbmQgdGhlIHNhaWxvcnMsIGNoYW5naW5nIHRoZWlyIHBsYW4gYWdhaW4sIHB1dCBpbiB0b3dhcmRzIHRoZSBzaG9yZTsgYW5kIGFmdGVyIGNhc3RpbmcgYW5jaG9yIGF0IHRoZSBtb3V0aCBvZiB0aGUgYmlucywgd2hlcmUgdGhlIHJpdmVyIGV4cGFuZHMgaW50byBhIGxha2UsIHRoZXkgYWR2aXNlZCBNYXJpdXMgdG8gbGVhdmUgdGhlIHZlc3NlbCwgdGFrZSBzb21lIGZvb2QgYXNob3JlIHdpdGggaGltLCBhbmQgcmVjcnVpdCBoaXMgc3RyZW5ndGggYWZ0ZXIgaGlzIGhhcmRzaGlwcyB1bnRpbCBhIGdvb2Qgd2luZCBmb3Igc2FpbGluZyBzaG91bGQgYXJpc2U7IHRoaXMgdXN1YWxseSBhcm9zZSwgdGhleSBzYWlkLCB3aGVuIHRoZSB3aW5kIGZyb20gdGhlIHNlYSBkaWVkIGF3YXkgYW5kIGEgdG9sZXJhYmx5IHN0cm9uZyBicmVlemUgYmxldyBmcm9tIHRoZSBtYXJzaGVzLiBNYW5pdXMgd2FzIHBlcnN1YWRlZCB0byBmb2xsb3cgdGhlaXIgYWR2aWNlOyBzbyB0aGUgc2FpbG9ycyBjYXJyaWVkIGhpbSBhc2hvcmUsIGFuZCBoZSBsYXkgZG93biBpbiBzb21lIGdyYXNzLCB3aXRob3V0IHRoZSBzbGlnaHRlc3QgdGhvdWdodCBvZiB3aGF0IHdhcyB0byBjb21lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIHNhaWxvcnMgYXQgb25jZSBib2FyZGVkIHRoZWlyIHZlc3NlbCwgaG9pc3RlZCBhbmNob3IsIGFuZCB0b29rIHRvIGZsaWdodCwgZmVlbGluZyB0aGF0IGl0IHdhcyBuZWl0aGVyIGhvbm91cmFibGUgZm9yIHRoZW0gdG8gc3VycmVuZGVyIE1hcml1cyBub3Igc2FmZSB0byByZXNjdWUgaGltLiBUaHVzLCBmb3JzYWtlbiBvZiBhbGwgbWVuLCBoZSBsYXkgYSBsb25nIHRpbWUgc3BlZWNobGVzcyBvbiB0aGUgc2hvcmUsIGJ1dCByZWNvdmVyZWQgaGltc2VsZiBhdCBsYXN0IGFuZCB0cmllZCB0byB3YWxrIGFsb25nLCB0aGUgbGFjayBvZiBhbnkgcGF0aCBtYWtpbmcgaGlzIHByb2dyZXNzIGxhYm9yaW91cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIG1hZGUgaGlzIHdheSB0aHJvdWdoIGRlZXAgbWFyc2hlcyBhbmQgZGl0Y2hlcyBmdWxsIG9mIG11ZCBhbmQgd2F0ZXIsIHVudGlsIGhlIGNhbWUgdG8gdGhlIGh1dCBvZiBhbiBvbGQgbWFuIHdobyBnb3QgaGlzIGxpdmluZyBmcm9tIHRoZSB3YXRlci4gQXQgaGlzIGZlZXQgTWFyaXVzIGZlbGwgZG93biBhbmQgYmVzb3VnaHQgaGltIHRvIHNhdmUgYW5kIGhlbHAgYSBtYW4gd2hvLCBpbiBjYXNlIGhlIGVzY2FwZWQgaGlzIHByZXNlbnQgcGVyaWxzLCB3b3VsZCByZWNvbXBlbnNlIGhpbSBiZXlvbmQgYWxsIGhpcyBob3Blcy4gVGhlbiB0aGUgbWFuLCB3aG8gZWl0aGVyIGtuZXcgTWFyaXVzIGZyb20gb2Ygb2xkIG9yIHNhdyB0aGF0IGluIGhpcyBmYWNlIHdoaWNoIHdvbiB0aGUgcmVnYXJkIGR1ZSB0byBzdXBlcmlvciByYW5rLCB0b2xkIGhpbSB0aGF0IGlmIGhlIG1lcmVseSB3YW50ZWQgdG8gcmVzdCwgdGhlIGNhYmluIHdvdWxkIHN1ZmZpY2UsIGJ1dCB0aGF0IGlmIGhlIHdhcyB3YW5kZXJpbmcgYWJvdXQgdHJ5aW5nIHRvIGVzY2FwZSBwdXJzdWVycywgaGUgY291bGQgYmUgaGlkZGVuIGluIGEgcGxhY2UgdGhhdCB3YXMgbW9yZSBxdWlldC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyBiZWdnZWQgdGhhdCB0aGlzIG1pZ2h0IGJlIGRvbmUsIGFuZCB0aGUgbWFuIHRvb2sgaGltIHRvIHRoZSBtYXJzaCwgYmFkZSBoaW0gY3JvdWNoIGRvd24gaW4gYSBob2xsb3cgcGxhY2UgYnkgdGhlIHNpZGUgb2YgdGhlIHJpdmVyLCBhbmQgdGhyZXcgb3ZlciBoaW0gYSBtYXNzIG9mIHJlZWRzIGFuZCBvdGhlciBtYXRlcmlhbCB3aGljaCB3YXMgbGlnaHQgZW5vdWdoIHRvIGNvdmVyIHdpdGhvdXQgaW5qdXJpbmcgaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3QgbXVjaCB0aW1lIGhhZCBlbGFwc2VkLCBob3dldmVyLCB3aGVuIGEgZGluIGFuZCB0dW11bHQgYXQgdGhlIGh1dCBmZWxsIHVwb24gdGhlIGVhcnMgb2YgTWFyaXVzLiBGb3IgR2VtaW5pdXMgaGFkIHNlbnQgYSBudW1iZXIgb2YgbWVuIGZyb20gVGVycmFjaW5hIGluIHB1cnN1aXQgb2YgaGltLCBzb21lIG9mIHdob20gaGFkIGNoYW5jZWQgdG8gY29tZSB0byB0aGUgb2xkIG1hbidzIGh1dCwgYW5kIHdlcmUgZnJpZ2h0ZW5pbmcgYW5kIGJlcmF0aW5nIGhpbSBmb3IgaGF2aW5nIHJlY2VpdmVkIGFuZCBoaWRkZW4gYW4gZW5lbXkgb2YgUm9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TWFyaXVzIHRoZXJlZm9yZSByb3NlIGZyb20gaGlzIGhpZGluZy1wbGFjZSwgc3RyaXBwZWQgb2ZmIGhpcyBjbG90aGVzLCBhbmQgdGhyZXcgaGltc2VsZiBpbnRvIHRoZSB0aGljayBhbmQgbXVkZHkgd2F0ZXIgb2YgdGhlIG1hcnNoLiBIZXJlIGhlIGNvdWxkIG5vdCBlbHVkZSB0aGUgbWVuIHdobyB3ZXJlIGluIHNlYXJjaCBvZiBoaW0sIGJ1dCB0aGV5IGRyYWdnZWQgaGltIG91dCBhbGwgY292ZXJlZCB3aXRoIHNsaW1lLCBsZWQgaGltIG5ha2VkIHRvIE1pbnR1cm5hZSwgYW5kIGhhbmRlZCBoaW0gb3ZlciB0byB0aGUgbWFnaXN0cmF0ZXMgdGhlcmUuIE5vdywgd29yZCBoYWQgYWxyZWFkeSBiZWVuIHNlbnQgdG8gZXZlcnkgY2l0eSB0aGF0IE1hcml1cyB3YXMgdG8gYmUgcHVyc3VlZCBieSB0aGUgYXV0aG9yaXRpZXMgYW5kIGtpbGxlZCBieSBoaXMgY2FwdG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG5ldmVydGhlbGVzcywgdGhlIG1hZ2lzdHJhdGVzIGRlY2lkZWQgdG8gZGVsaWJlcmF0ZSBvbiB0aGUgbWF0dGVyIGZpcnN0OyBzbyB0aGV5IHB1dCBNYXJpdXMgZm9yIHNhZmUta2VlcGluZyBpbiB0aGUgaG91c2Ugb2YgYSB3b21hbiBuYW1lZCBGYW5uaWEsIHdobyB3YXMgdGhvdWdodCB0byBiZSBob3N0aWxlIHRvIGhpbSBvbiBhY2NvdW50IG9mIGFuIGFuY2llbnQgZ3JpZXZhbmNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IG11Y2ggdGltZSBoYWQgZWxhcHNlZCwgaG93ZXZlciwgd2hlbiBhIGRpbiBhbmQgdHVtdWx0IGF0IHRoZSBodXQgZmVsbCB1cG9uIHRoZSBlYXJzIG9mIE1hcml1cy4gRm9yIEdlbWluaXVzIGhhZCBzZW50IGEgbnVtYmVyIG9mIG1lbiBmcm9tIFRlcnJhY2luYSBpbiBwdXJzdWl0IG9mIGhpbSwgc29tZSBvZiB3aG9tIGhhZCBjaGFuY2VkIHRvIGNvbWUgdG8gdGhlIG9sZCBtYW4ncyBodXQsIGFuZCB3ZXJlIGZyaWdodGVuaW5nIGFuZCBiZXJhdGluZyBoaW0gZm9yIGhhdmluZyByZWNlaXZlZCBhbmQgaGlkZGVuIGFuIGVuZW15IG9mIFJvbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1hcml1cyB0aGVyZWZvcmUgcm9zZSBmcm9tIGhpcyBoaWRpbmctcGxhY2UsIHN0cmlwcGVkIG9mZiBoaXMgY2xvdGhlcywgYW5kIHRocmV3IGhpbXNlbGYgaW50byB0aGUgdGhpY2sgYW5kIG11ZGR5IHdhdGVyIG9mIHRoZSBtYXJzaC4gSGVyZSBoZSBjb3VsZCBub3QgZWx1ZGUgdGhlIG1lbiB3aG8gd2VyZSBpbiBzZWFyY2ggb2YgaGltLCBidXQgdGhleSBkcmFnZ2VkIGhpbSBvdXQgYWxsIGNvdmVyZWQgd2l0aCBzbGltZSwgbGVkIGhpbSBuYWtlZCB0byBNaW50dXJuYWUsIGFuZCBoYW5kZWQgaGltIG92ZXIgdG8gdGhlIG1hZ2lzdHJhdGVzIHRoZXJlLiBOb3csIHdvcmQgaGFkIGFscmVhZHkgYmVlbiBzZW50IHRvIGV2ZXJ5IGNpdHkgdGhhdCBNYXJpdXMgd2FzIHRvIGJlIHB1cnN1ZWQgYnkgdGhlIGF1dGhvcml0aWVzIGFuZCBraWxsZWQgYnkgaGlzIGNhcHRvcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBuZXZlcnRoZWxlc3MsIHRoZSBtYWdpc3RyYXRlcyBkZWNpZGVkIHRvIGRlbGliZXJhdGUgb24gdGhlIG1hdHRlciBmaXJzdDsgc28gdGhleSBwdXQgTWFyaXVzIGZvciBzYWZlLWtlZXBpbmcgaW4gdGhlIGhvdXNlIG9mIGEgd29tYW4gbmFtZWQgRmFubmlhLCB3aG8gd2FzIHRob3VnaHQgdG8gYmUgaG9zdGlsZSB0byBoaW0gb24gYWNjb3VudCBvZiBhbiBhbmNpZW50IGdyaWV2YW5jZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5GYW5uaWEsIHRoYXQgaXMsIGhhZCBiZWVuIG1hcnJpZWQgdG8gVGl0aW5uaXVzOyBidXQgc2hlIGhhZCBzZXBhcmF0ZWQgaGVyc2VsZiBmcm9tIGhpbSBhbmQgZGVtYW5kZWQgYmFjayBoZXIgZG93cnksIHdoaWNoIHdhcyBjb25zaWRlcmFibGUuIEhlciBodXNiYW5kLCBob3dldmVyLCBoYWQgYWNjdXNlZCBoZXIgb2YgYWR1bHRlcnk7IGFuZCBNYXJpdXMsIHdobyB3YXMgc2VydmluZyBpbiBoaXMgc2l4dGggY29uc3Vsc2hpcCwgaGFkIHByZXNpZGVkIG92ZXIgdGhlIHRyaWFsLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGNhc2Ugd2FzIHBsZWFkZWQsIGFuZCBpdCBhcHBlYXJlZCB0aGF0IEZhbm5pYSBoYWQgYmVlbiBhIGRpc3NvbHV0ZSB3b21hbiwgYW5kIHRoYXQgaGVyIGh1c2JhbmQgaGFkIGtub3duIHRoaXMgYW5kIHlldCBoYWQgdGFrZW4gaGVyIHRvIHdpZmUgYW5kIGxpdmVkIHdpdGggaGVyIGEgbG9uZyB0aW1lLCBNYXJpdXMgd2FzIGRpc2d1c3RlZCB3aXRoIGJvdGggb2YgdGhlbSwgYW5kIGRlY3JlZWQgdGhhdCB0aGUgaHVzYmFuZCBzaG91bGQgcGF5IGJhY2sgaGlzIHdpZmUncyBkb3dyeSwgd2hpbGUgYXQgdGhlIHNhbWUgdGltZSBoZSBpbXBvc2VkIHVwb24gdGhlIHdvbWFuLCBhcyBhIG1hcmsgb2YgaW5mYW15LCBhIGZpbmUgb2YgZm91ciBjb3BwZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGNhc2Ugd2FzIHBsZWFkZWQsIGFuZCBpdCBhcHBlYXJlZCB0aGF0IEZhbm5pYSBoYWQgYmVlbiBhIGRpc3NvbHV0ZSB3b21hbiwgYW5kIHRoYXQgaGVyIGh1c2JhbmQgaGFkIGtub3duIHRoaXMgYW5kIHlldCBoYWQgdGFrZW4gaGVyIHRvIHdpZmUgYW5kIGxpdmVkIHdpdGggaGVyIGEgbG9uZyB0aW1lLCBNYXJpdXMgd2FzIGRpc2d1c3RlZCB3aXRoIGJvdGggb2YgdGhlbSwgYW5kIGRlY3JlZWQgdGhhdCB0aGUgaHVzYmFuZCBzaG91bGQgcGF5IGJhY2sgaGlzIHdpZmUncyBkb3dyeSwgd2hpbGUgYXQgdGhlIHNhbWUgdGltZSBoZSBpbXBvc2VkIHVwb24gdGhlIHdvbWFuLCBhcyBhIG1hcmsgb2YgaW5mYW15LCBhIGZpbmUgb2YgZm91ciBjb3BwZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhdCB0aGUgdGltZSBvZiB3aGljaCBJIHNwZWFrLCBGYW5uaWEgZGlkIG5vdCBhY3QgbGlrZSBhIHdvbWFuIHdobyBoYWQgYmVlbiB3cm9uZ2VkLCBidXQgd2hlbiBzaGUgc2F3IE1hcml1cywgc2hlIHB1dCBmYXIgZnJvbSBoZXIgYWxsIHJlc2VudG1lbnQsIGNhcmVkIGZvciBoaW0gYXMgd2VsbCBhcyBzaGUgY291bGQsIGFuZCB0cmllZCB0byBlbmNvdXJhZ2UgaGltLiBNYXJpdXMgY29tbWVuZGVkIGhlciwgYW5kIHNhaWQgaGUgd2FzIG9mIGdvb2QgY291cmFnZTsgZm9yIGFuIGV4Y2VsbGVudCBzaWduIGhhZCBiZWVuIGdpdmVuIGhpbS4gQW5kIHRoaXMgc2lnbiB3YXMgYXMgZm9sbG93cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGF0IHRoZSB0aW1lIG9mIHdoaWNoIEkgc3BlYWssIEZhbm5pYSBkaWQgbm90IGFjdCBsaWtlIGEgd29tYW4gd2hvIGhhZCBiZWVuIHdyb25nZWQsIGJ1dCB3aGVuIHNoZSBzYXcgTWFyaXVzLCBzaGUgcHV0IGZhciBmcm9tIGhlciBhbGwgcmVzZW50bWVudCwgY2FyZWQgZm9yIGhpbSBhcyB3ZWxsIGFzIHNoZSBjb3VsZCwgYW5kIHRyaWVkIHRvIGVuY291cmFnZSBoaW0uIE1hcml1cyBjb21tZW5kZWQgaGVyLCBhbmQgc2FpZCBoZSB3YXMgb2YgZ29vZCBjb3VyYWdlOyBmb3IgYW4gZXhjZWxsZW50IHNpZ24gaGFkIGJlZW4gZ2l2ZW4gaGltLiBBbmQgdGhpcyBzaWduIHdhcyBhcyBmb2xsb3dzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPldoZW4sIGFzIGhlIHdhcyBsZWQgYWxvbmcsIGhlIGhhZCBjb21lIHRvIHRoZSBob3VzZSBvZiBGYW5uaWEgdGhlIGRvb3IgZmxldyBvcGVuIGFuZCBhbiBhc3MgcmFuIG91dCwgaW4gb3JkZXIgdG8gZ2V0IGEgZHJpbmsgYXQgYSBzcHJpbmcgdGhhdCBmbG93ZWQgaGFyZCBieTsgCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz53aXRoIGEgc2F1Y3kgYW5kIGV4dWx0YW50IGxvb2sgYXQgTWFyaXVzIHRoZSBhbmltYWwgYXQgZmlyc3Qgc3RvcHBlZCBpbiBmcm9udCBvZiBoaW0sIGFuZCB0aGVuLCBnaXZpbmcgYSBtYWduaWZpY2VudCBicmF5LCB3ZW50IGZyaXNraW5nIHBhc3QgaGltIHRyaXVtcGhhbnRseS4gRnJvbSB0aGlzIE1hcml1cyBkcmV3IGFuIG9tZW4gYW5kIGNvbmNsdWRlZCB0aGF0IHRoZSBEZWl0eSB3YXMgaW5kaWNhdGluZyBhIHdheSBvZiBlc2NhcGUgZm9yIGhpbSBieSBzZWEgcmF0aGVyIHRoYW4gYnkgbGFuZDsgZm9yIHRoZSBhc3MgbWFkZSBubyBhY2NvdW50IG9mIGl0cyBkcnkgZm9kZGVyLCBodXQgdHVybmVkIGZyb20gdGhhdCB0byB0aGUgd2F0ZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPndpdGggYSBzYXVjeSBhbmQgZXh1bHRhbnQgbG9vayBhdCBNYXJpdXMgdGhlIGFuaW1hbCBhdCBmaXJzdCBzdG9wcGVkIGluIGZyb250IG9mIGhpbSwgYW5kIHRoZW4sIGdpdmluZyBhIG1hZ25pZmljZW50IGJyYXksIHdlbnQgZnJpc2tpbmcgcGFzdCBoaW0gdHJpdW1waGFudGx5LiBGcm9tIHRoaXMgTWFyaXVzIGRyZXcgYW4gb21lbiBhbmQgY29uY2x1ZGVkIHRoYXQgdGhlIERlaXR5IHdhcyBpbmRpY2F0aW5nIGEgd2F5IG9mIGVzY2FwZSBmb3IgaGltIGJ5IHNlYSByYXRoZXIgdGhhbiBieSBsYW5kOyBmb3IgdGhlIGFzcyBtYWRlIG5vIGFjY291bnQgb2YgaXRzIGRyeSBmb2RkZXIsIGh1dCB0dXJuZWQgZnJvbSB0aGF0IHRvIHRoZSB3YXRlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5BZnRlciBleHBsYWluaW5nIHRoaXMgdG8gRmFubmlhLCBNYXJpdXMgbGF5IGRvd24gdG8gcmVzdCBhbG9uZSwgYWZ0ZXIgb3JkZXJpbmcgdGhlIGRvb3Igb2YgdGhlIGFwYXJ0bWVudCB0byBiZSBjbG9zZWQuCgkJCTwvcD4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiBkZWxpYmVyYXRpb24sIHRoZSBtYWdpc3RyYXRlcyBhbmQgY291bmNpbGxvcnMgb2YgTWludHVybmFlIGRlY2lkZWQgbm90IHRvIGRlbGF5LCBidXQgdG8gcHV0IE1hcml1cyB0byBkZWF0aC4gTm8gb25lIG9mIHRoZSBjaXRpemVucywgaG93ZXZlciwgd291bGQgdW5kZXJ0YWtlIHRoZSB0YXNrLCBzbyBhIGhvcnNlbWFuLCBlaXRoZXIgYSBHYXVsIG9yIGEgQ2ltYnJpYW4gKGZvciB0aGUgc3RvcnkgaXMgdG9sZCBib3RoIHdheXMpLCB0b29rIGEgc3dvcmQgYW5kIHdlbnQgaW50byB0byB0aGUgcm9vbSB3aGVyZSBNYXJpdXMgd2FzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoYXQgcGFydCBvZiB0aGUgcm9vbSB3aGVyZSBNYXJpdXMgaGFwcGVuZWQgdG8gYmUgbHlpbmcgaGFkIG5vdCBhIHZlcnkgZ29vZCBsaWdodCwgYnV0IHdhcyBnbG9vbXksIGFuZCB3ZSBhcmUgdG9sZCB0aGF0IHRvIHRoZSBzb2xkaWVyIHRoZSBleWVzIG9mIE1hcml1cyBzZWVtZWQgdG8gc2hvb3Qgb3V0IGEgc3Ryb25nIGZsYW1lLCBhbmQgdGhhdCBhIGxvdWQgdm9pY2UgaXNzdWVkIGZyb20gdGhlIHNoYWRvd3Mgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1hbiwgZG9zdCB0aG91IGRhcmUgdG8gc2xheSBDYWl1cyBNYXJpdXM/PC9xPiBBdCBvbmNlLCB0aGVuLCB0aGUgQmFyYmFyaWFuIGZsZWQgZnJvbSB0aGUgcm9vbSwgdGhyZXcgaGlzIHN3b3JkIGRvd24gb24gdGhlIGdyb3VuZCwgYW5kIGRhc2hlZCBvdXQgb2YgZG9vcnMsIHdpdGggdGhpcyBvbmUgY3J5OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY2Fubm90IGtpbGwgQ2FpdXMgTWFyaXVzLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Db25zdGVybmF0aW9uIHJlaWduZWQsIG9mIGNvdXJzZSwgYW5kIHRoZW4gY2FtZSBwaXR5LCBhIGNoYW5nZSBvZiBoZWFydCwgYW5kIHNlbGYtcmVwcm9hY2ggZm9yIGhhdmluZyBjb21lIHRvIHNvIHVubGF3ZnVsIGFuZCB1bmdyYXRlZnVsIGEgZGVjaXNpb24gYWdhaW5zdCBhIG1hbiB3aG8gaGFkIGJlZW4gdGhlIHNhdmlvdXIgb2YgSXRhbHksIGFuZCB3aG8gb3VnaHQgaW4gYWxsIGRlY2VuY3kgdG8gYmUgaGVscGVkLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNvLCB0aGVuLDwvcT4gdGhlIHRhbGsgcmFuLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxldCBoaW0gZ28gd2hlcmUgaGUgd2lsbCBhcyBhbiBleGlsZSwgdG8gc3VmZmVyIGVsc2V3aGVyZSBoaXMgYWxsb3R0ZWQgZmF0ZS4gQW5kIGxldCB1cyBwcmF5IHRoYXQgdGhlIGdvZHMgbWF5IG5vdCB2aXNpdCB1cyB3aXRoIHRoZWlyIGRpc3BsZWFzdXJlIGZvciBjYXN0aW5nIE1hcml1cyBvdXQgb2Ygb3VyIGNpdHkgaW4gcG92ZXJ0eSBhbmQgcmFncy48L3E+IE1vdmVkIGJ5IHN1Y2ggY29uc2lkZXJhdGlvbnMsIHRoZXkgcnVzaGVkIGludG8gaGlzIHJvb20gaW4gYSBib2R5LCBzdXJyb3VuZGVkIGhpbSwgYW5kIGJlZ2FuIHRvIGxlYWQgaGltIGZvcnRoIHRvIHRoZSBzZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCB0aGlzIG9uZSBhbmQgdGhhdCBvbmUgd2VyZSBlYWdlciB0byBkbyBoaW0gc29tZSBzZXJ2aWNlIGFuZCBhbGwgbWFkZSB3aGF0IGhhc3RlIHRoZXkgY291bGQsIHN0aWxsIHRoZXJlIHdhcyBkZWxheS4gRm9yIHRoZSBncm92ZSBvZiBNYXJpY2EsIGFzIGl0IHdhcyBjYWxsZWQsIHdoaWNoIHdhcyBoZWxkIGluIHZlbmVyYXRpb24sIGFuZCBmcm9tIHdoaWNoIG5vdGhpbmcgd2FzIHBlcm1pdHRlZCB0byBiZSBjYXJyaWVkIG91dCB0aGF0IGhhZCBldmVyIGJlZW4gY2FycmllZCBpbiwgbGF5IGJldHdlZW4gdGhlbSBhbmQgdGhlIHNlYSBhcyB0aGV5IHdlcmUgZ29pbmcsIGFuZCBpZiB0aGV5IHdlbnQgcm91bmQgaXQgdGhleSBtdXN0IG5lZWRzIGxvc2UgdGltZS4gQXQgbGFzdCwgaG93ZXZlciwgb25lIG9mIHRoZSBvbGRlciBtZW4gY3JpZWQgb3V0IGFuZCBzYWlkIHRoYXQgbm8gcGF0aCBjb3VsZCBmb3JiaWQgbWVuJ3Mgc3RlcHMgYW5kIHBhc3NhZ2UgaWYgaXQgd2VyZSB0aGUgcGF0aCBvZiBzYWZldHkgZm9yIE1hcml1cy4gQW5kIHRoZSBzcGVha2VyIGhpbXNlbGYgd2FzIHRoZSBmaXJzdCB0byB0YWtlIHNvbWUgb2YgdGhlIHRoaW5ncyB0aGF0IHdlcmUgYmVpbmcgY2FycmllZCB0byB0aGUgc2hpcCBhcmlkIHBhc3MgdGhyb3VnaCB0aGUgaG9seSBwbGFjZS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiBkZWxpYmVyYXRpb24sIHRoZSBtYWdpc3RyYXRlcyBhbmQgY291bmNpbGxvcnMgb2YgTWludHVybmFlIGRlY2lkZWQgbm90IHRvIGRlbGF5LCBidXQgdG8gcHV0IE1hcml1cyB0byBkZWF0aC4gTm8gb25lIG9mIHRoZSBjaXRpemVucywgaG93ZXZlciwgd291bGQgdW5kZXJ0YWtlIHRoZSB0YXNrLCBzbyBhIGhvcnNlbWFuLCBlaXRoZXIgYSBHYXVsIG9yIGEgQ2ltYnJpYW4gKGZvciB0aGUgc3RvcnkgaXMgdG9sZCBib3RoIHdheXMpLCB0b29rIGEgc3dvcmQgYW5kIHdlbnQgaW50byB0byB0aGUgcm9vbSB3aGVyZSBNYXJpdXMgd2FzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhhdCBwYXJ0IG9mIHRoZSByb29tIHdoZXJlIE1hcml1cyBoYXBwZW5lZCB0byBiZSBseWluZyBoYWQgbm90IGEgdmVyeSBnb29kIGxpZ2h0LCBidXQgd2FzIGdsb29teSwgYW5kIHdlIGFyZSB0b2xkIHRoYXQgdG8gdGhlIHNvbGRpZXIgdGhlIGV5ZXMgb2YgTWFyaXVzIHNlZW1lZCB0byBzaG9vdCBvdXQgYSBzdHJvbmcgZmxhbWUsIGFuZCB0aGF0IGEgbG91ZCB2b2ljZSBpc3N1ZWQgZnJvbSB0aGUgc2hhZG93cyBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5NYW4sIGRvc3QgdGhvdSBkYXJlIHRvIHNsYXkgQ2FpdXMgTWFyaXVzPzwvcT4gQXQgb25jZSwgdGhlbiwgdGhlIEJhcmJhcmlhbiBmbGVkIGZyb20gdGhlIHJvb20sIHRocmV3IGhpcyBzd29yZCBkb3duIG9uIHRoZSBncm91bmQsIGFuZCBkYXNoZWQgb3V0IG9mIGRvb3JzLCB3aXRoIHRoaXMgb25lIGNyeTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY2Fubm90IGtpbGwgQ2FpdXMgTWFyaXVzLjwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNvbnN0ZXJuYXRpb24gcmVpZ25lZCwgb2YgY291cnNlLCBhbmQgdGhlbiBjYW1lIHBpdHksIGEgY2hhbmdlIG9mIGhlYXJ0LCBhbmQgc2VsZi1yZXByb2FjaCBmb3IgaGF2aW5nIGNvbWUgdG8gc28gdW5sYXdmdWwgYW5kIHVuZ3JhdGVmdWwgYSBkZWNpc2lvbiBhZ2FpbnN0IGEgbWFuIHdobyBoYWQgYmVlbiB0aGUgc2F2aW91ciBvZiBJdGFseSwgYW5kIHdobyBvdWdodCBpbiBhbGwgZGVjZW5jeSB0byBiZSBoZWxwZWQuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TbywgdGhlbiw8L3E+IHRoZSB0YWxrIHJhbiwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmxldCBoaW0gZ28gd2hlcmUgaGUgd2lsbCBhcyBhbiBleGlsZSwgdG8gc3VmZmVyIGVsc2V3aGVyZSBoaXMgYWxsb3R0ZWQgZmF0ZS4gQW5kIGxldCB1cyBwcmF5IHRoYXQgdGhlIGdvZHMgbWF5IG5vdCB2aXNpdCB1cyB3aXRoIHRoZWlyIGRpc3BsZWFzdXJlIGZvciBjYXN0aW5nIE1hcml1cyBvdXQgb2Ygb3VyIGNpdHkgaW4gcG92ZXJ0eSBhbmQgcmFncy48L3E+IE1vdmVkIGJ5IHN1Y2ggY29uc2lkZXJhdGlvbnMsIHRoZXkgcnVzaGVkIGludG8gaGlzIHJvb20gaW4gYSBib2R5LCBzdXJyb3VuZGVkIGhpbSwgYW5kIGJlZ2FuIHRvIGxlYWQgaGltIGZvcnRoIHRvIHRoZSBzZWEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbHRob3VnaCB0aGlzIG9uZSBhbmQgdGhhdCBvbmUgd2VyZSBlYWdlciB0byBkbyBoaW0gc29tZSBzZXJ2aWNlIGFuZCBhbGwgbWFkZSB3aGF0IGhhc3RlIHRoZXkgY291bGQsIHN0aWxsIHRoZXJlIHdhcyBkZWxheS4gRm9yIHRoZSBncm92ZSBvZiBNYXJpY2EsIGFzIGl0IHdhcyBjYWxsZWQsIHdoaWNoIHdhcyBoZWxkIGluIHZlbmVyYXRpb24sIGFuZCBmcm9tIHdoaWNoIG5vdGhpbmcgd2FzIHBlcm1pdHRlZCB0byBiZSBjYXJyaWVkIG91dCB0aGF0IGhhZCBldmVyIGJlZW4gY2FycmllZCBpbiwgbGF5IGJldHdlZW4gdGhlbSBhbmQgdGhlIHNlYSBhcyB0aGV5IHdlcmUgZ29pbmcsIGFuZCBpZiB0aGV5IHdlbnQgcm91bmQgaXQgdGhleSBtdXN0IG5lZWRzIGxvc2UgdGltZS4gQXQgbGFzdCwgaG93ZXZlciwgb25lIG9mIHRoZSBvbGRlciBtZW4gY3JpZWQgb3V0IGFuZCBzYWlkIHRoYXQgbm8gcGF0aCBjb3VsZCBmb3JiaWQgbWVuJ3Mgc3RlcHMgYW5kIHBhc3NhZ2UgaWYgaXQgd2VyZSB0aGUgcGF0aCBvZiBzYWZldHkgZm9yIE1hcml1cy4gQW5kIHRoZSBzcGVha2VyIGhpbXNlbGYgd2FzIHRoZSBmaXJzdCB0byB0YWtlIHNvbWUgb2YgdGhlIHRoaW5ncyB0aGF0IHdlcmUgYmVpbmcgY2FycmllZCB0byB0aGUgc2hpcCBhcmlkIHBhc3MgdGhyb3VnaCB0aGUgaG9seSBwbGFjZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RXZlcnl0aGluZyB3YXMgc3BlZWRpbHkgcHJvdmlkZWQgdGhyb3VnaCBzdWNoIHJlYWRpbmVzcyBhcyB0aGlzLCBhbmQgYSBjZXJ0YWluIEJlbGFldXMgZnVybmlzaGVkIGEgc2hpcCBmb3IgTWFyaXVzLiBCZWxhZXVzIGFmdGVyd2FyZHMgaGFkIGEgcGFpbnRpbmcgbWFkZSByZXByZXNlbnRpbmcgdGhlc2Ugc2NlbmVzLCBhbmQgZGVkaWNhdGVkIGl0IGluIHRoZSB0ZW1wbGUgYXQgdGhlIHNwb3Qgd2hlcmUgTWFyaXVzIGVtYmFya2VkIGFuZCBwdXQgdG8gc2VhLiBGYXZvdXJlZCBieSB0aGUgd2luZCBoZSB3YXMgYm9ybmUgYWxvbmcgYnkgY2hhbmNlIHRvIHRoZSBpc2xhbmQgb2YgQWVuYXJpYSwgd2hlcmUgaGUgZm91bmQgR3Jhbml1cyBhbmQgdGhlIHJlc3Qgb2YgaGlzIGZyaWVuZHMsIGFuZCBzZXQgc2FpbCB3aXRoIHRoZW0gZm9yIEFmcmljYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZWlyIHN1cHBseSBvZiBmcmVzaCB3YXRlciBmYWlsZWQsIGFuZCB0aGV5IHdlcmUgY29tcGVsbGVkIHRvIHRvdWNoIGF0IEVyeWNpbmEgaW4gU2ljaWx5LiBJbiB0aGlzIG5laWdoYm91cmhvb2QsIGFzIGl0IGNoYW5jZWQsIHRoZSBSb21hbiBxdWFlc3RvciB3YXMgb24gdGhlIHdhdGNoLCBhbmQgYWxtb3N0IGNhcHR1cmVkIE1hcml1cyBoaW1zZWxmIGFzIGhlIGxhbmRlZDsgaGUgZGlkIGtpbGwgYWJvdXQgc2l4dGVlbiBvZiBoaXMgbWVuIHdobyBjYW1lIGFzaG9yZSBmb3Igd2F0ZXIuIE1hcml1cyB0aGVyZWZvcmUgcHV0IG91dCB0byBzZWEgd2l0aCBhbGwgc3BlZWQgYW5kIGNyb3NzZWQgdG8gdGhlIGlzbGFuZCBvZiBNZW5pbngsIHdoZXJlIGhlIGZpcnN0IGxlYXJuZWQgdGhhdCBoaXMgc29uIGhhZCBjb21lIG9mZiBzYWZlbHkgd2l0aCBDZXRoZWd1cywgYW5kIHRoYXQgdGhleSBXZXJlIG9uIHRoZWlyIHdheSB0byBJYW1wc2FzIHRoZSBraW5nIG9mIE51bWlkaWEsIGludGVuZGluZyB0byBhc2sgaGlzIGFpZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyBuZXdzIE1hcml1cyB3YXMgYSBsaXR0bGUgcmVmcmVzaGVkLCBhbmQgbWFkZSBib2xkIHRvIHB1c2ggb24gZnJvbSB0aGUgaXNsYW5kIHRvIHRoZSBuZWlnaGJvdXJob29kIG9mIENhcnRoYWdlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RXZlcnl0aGluZyB3YXMgc3BlZWRpbHkgcHJvdmlkZWQgdGhyb3VnaCBzdWNoIHJlYWRpbmVzcyBhcyB0aGlzLCBhbmQgYSBjZXJ0YWluIEJlbGFldXMgZnVybmlzaGVkIGEgc2hpcCBmb3IgTWFyaXVzLiBCZWxhZXVzIGFmdGVyd2FyZHMgaGFkIGEgcGFpbnRpbmcgbWFkZSByZXByZXNlbnRpbmcgdGhlc2Ugc2NlbmVzLCBhbmQgZGVkaWNhdGVkIGl0IGluIHRoZSB0ZW1wbGUgYXQgdGhlIHNwb3Qgd2hlcmUgTWFyaXVzIGVtYmFya2VkIGFuZCBwdXQgdG8gc2VhLiBGYXZvdXJlZCBieSB0aGUgd2luZCBoZSB3YXMgYm9ybmUgYWxvbmcgYnkgY2hhbmNlIHRvIHRoZSBpc2xhbmQgb2YgQWVuYXJpYSwgd2hlcmUgaGUgZm91bmQgR3Jhbml1cyBhbmQgdGhlIHJlc3Qgb2YgaGlzIGZyaWVuZHMsIGFuZCBzZXQgc2FpbCB3aXRoIHRoZW0gZm9yIEFmcmljYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGVpciBzdXBwbHkgb2YgZnJlc2ggd2F0ZXIgZmFpbGVkLCBhbmQgdGhleSB3ZXJlIGNvbXBlbGxlZCB0byB0b3VjaCBhdCBFcnljaW5hIGluIFNpY2lseS4gSW4gdGhpcyBuZWlnaGJvdXJob29kLCBhcyBpdCBjaGFuY2VkLCB0aGUgUm9tYW4gcXVhZXN0b3Igd2FzIG9uIHRoZSB3YXRjaCwgYW5kIGFsbW9zdCBjYXB0dXJlZCBNYXJpdXMgaGltc2VsZiBhcyBoZSBsYW5kZWQ7IGhlIGRpZCBraWxsIGFib3V0IHNpeHRlZW4gb2YgaGlzIG1lbiB3aG8gY2FtZSBhc2hvcmUgZm9yIHdhdGVyLiBNYXJpdXMgdGhlcmVmb3JlIHB1dCBvdXQgdG8gc2VhIHdpdGggYWxsIHNwZWVkIGFuZCBjcm9zc2VkIHRvIHRoZSBpc2xhbmQgb2YgTWVuaW54LCB3aGVyZSBoZSBmaXJzdCBsZWFybmVkIHRoYXQgaGlzIHNvbiBoYWQgY29tZSBvZmYgc2FmZWx5IHdpdGggQ2V0aGVndXMsIGFuZCB0aGF0IHRoZXkgV2VyZSBvbiB0aGVpciB3YXkgdG8gSWFtcHNhcyB0aGUga2luZyBvZiBOdW1pZGlhLCBpbnRlbmRpbmcgdG8gYXNrIGhpcyBhaWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['40.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgbmV3cyBNYXJpdXMgd2FzIGEgbGl0dGxlIHJlZnJlc2hlZCwgYW5kIG1hZGUgYm9sZCB0byBwdXNoIG9uIGZyb20gdGhlIGlzbGFuZCB0byB0aGUgbmVpZ2hib3VyaG9vZCBvZiBDYXJ0aGFnZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgUm9tYW4gZ292ZXJub3Igb2YgQWZyaWNhIGF0IHRoaXMgdGltZSB3YXMgU2V4dGlsaXVzLCBhIG1hbiB3aG8gaGFkIHJlY2VpdmVkIG5laXRoZXIgZ29vZCBub3IgaWxsIGF0IGhlIGhhbmRzIG9mIE1hcml1cywgYnV0IHdob20sIGFzIGl0IHdhcyBleHBlY3RlZCwgcGl0eSBhbG9uZSB3b3VsZCBtb3ZlIHRvIGdpdmUgaGltIGFpZC4gSGFyZGx5LCBob3dldmVyLCBoYWQgTWFyaXVzIGxhbmRlZCB3aXRoIGEgZmV3IGNvbXBhbmlvbnMsIHdoZW4gYW4gb2ZmaWNpYWwgbWV0IGhpbSwgc3Rvb2QgZGlyZWN0bHkgaW4gZnJvbnQgb2YgaGltLCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNleHRpbGl1cyB0aGUgZ292ZXJub3IgZm9yYmlkcyB0aGVlLCBNYXJpdXMsIHRvIHNldCBmb290IGluIEFmcmljYTsgYW5kIGlmIHRob3UgZGlzb2JleWVzdCwgaGUgZGVjbGFyZXMgdGhhdCBoZSB3aWxsIHVwaG9sZCB0aGUgZGVjcmVlcyBvZiB0aGUgc2VuYXRlIGFuZCB0cmVhdCB0aGVlIGFzIGFuIGVuZW15IG9mIFJvbWUuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoZWFyZCB0aGlzLCBNYXJpdXMgd2FzIHJlbmRlcmVkIHNwZWVjaGxlc3MgYnkgZ3JpZWYgYW5kIGluZGlnbmF0aW9uLCBhbmQgZm9yIGEgbG9uZyB0aW1lIGtlcHQgcXVpZXQsIGxvb2tpbmcgc3Rlcm5seSBhdCB0aGUgb2ZmaWNpYWwuIFRoZW4sIHdoZW4gYXNrZWQgYnkgaGltIHdoYXQgaGUgaGFkIHRvIHNheSwgYW5kIHdoYXQgYW5zd2VyIGhlIHdvdWxkIG1ha2UgdG8gdGhlIGdvdmVybm9yLCBoZSBhbnN3ZXJlZCB3aXRoIGEgZGVlcCBncm9hbjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UZWxsIGhpbSwgdGhlbiwgdGhhdCB0aG91IGhhc3Qgc2VlbiBDYWl1cyBNYXJpdXMgYSBmdWdpdGl2ZSwgc2VhdGVkIGFtaWQgdGhlIHJ1aW5zIG9mIENhcnRoYWdlLjwvcT4gQW5kIGl0IHdhcyBub3QgaW5hcHRseSB0aGF0IGhlIGNvbXBhcmVkIHRoZSBmYXRlIG9mIHRoYXQgY2l0eSB3aXRoIGhpcyBvd24gcmV2ZXJzYWwgb2YgZm9ydHVuZS4KCQkJPC9wPgogICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlNleHRpbGl1cyB0aGUgZ292ZXJub3IgZm9yYmlkcyB0aGVlLCBNYXJpdXMsIHRvIHNldCBmb290IGluIEFmcmljYTsgYW5kIGlmIHRob3UgZGlzb2JleWVzdCwgaGUgZGVjbGFyZXMgdGhhdCBoZSB3aWxsIHVwaG9sZCB0aGUgZGVjcmVlcyBvZiB0aGUgc2VuYXRlIGFuZCB0cmVhdCB0aGVlIGFzIGFuIGVuZW15IG9mIFJvbWUuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gaGUgaGVhcmQgdGhpcywgTWFyaXVzIHdhcyByZW5kZXJlZCBzcGVlY2hsZXNzIGJ5IGdyaWVmIGFuZCBpbmRpZ25hdGlvbiwgYW5kIGZvciBhIGxvbmcgdGltZSBrZXB0IHF1aWV0LCBsb29raW5nIHN0ZXJubHkgYXQgdGhlIG9mZmljaWFsLiBUaGVuLCB3aGVuIGFza2VkIGJ5IGhpbSB3aGF0IGhlIGhhZCB0byBzYXksIGFuZCB3aGF0IGFuc3dlciBoZSB3b3VsZCBtYWtlIHRvIHRoZSBnb3Zlcm5vciwgaGUgYW5zd2VyZWQgd2l0aCBhIGRlZXAgZ3JvYW46IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UZWxsIGhpbSwgdGhlbiwgdGhhdCB0aG91IGhhc3Qgc2VlbiBDYWl1cyBNYXJpdXMgYSBmdWdpdGl2ZSwgc2VhdGVkIGFtaWQgdGhlIHJ1aW5zIG9mIENhcnRoYWdlLjwvcT4gQW5kIGl0IHdhcyBub3QgaW5hcHRseSB0aGF0IGhlIGNvbXBhcmVkIHRoZSBmYXRlIG9mIHRoYXQgY2l0eSB3aXRoIGhpcyBvd24gcmV2ZXJzYWwgb2YgZm9ydHVuZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlIElhbXBzYXMgdGhlIGtpbmcgb2YgTnVtaWRpYSwgaGVzaXRhdGluZyB3aGljaCBjb3Vyc2UgdG8gdGFrZSwgZGlkIGluZGVlZCB0cmVhdCB0aGUgeW91bmdlciBNYXJpdXMgYW5kIGhpcyBwYXJ0eSB3aXRoIHJlc3BlY3QsIGJ1dCBhbHdheXMgaGFkIHNvbWUgZXhjdXNlIGZvciBkZXRhaW5pbmcgdGhlbSB3aGVuIHRoZXkgd2lzaGVkIHRvIGdvIGF3YXksIGFuZCBjbGVhcmx5IGhhZCBubyBnb29kIGVuZCBpbiB2aWV3IGluIHRodXMgcG9zdHBvbmluZyB0aGVpciBkZXBhcnR1cmUuIEhvd2V2ZXIsIHNvbWV0aGluZyBvY2N1cnJlZCB3aGljaCwgdGhvdWdoIG5vdCBhdCBhbGwgZXh0cmFvcmRpbmFyeSwgbGVkIHRvIHRoZWlyIGVzY2FwZS4gVGhlIHlvdW5nZXIgTWFyaXVzLCB0aGF0IGlzLCBiZWluZyBhIGhhbmRzb21lIGZlbGxvdywgb25lIG9mIHRoZSBjb25jdWJpbmVzIG9mIHRoZSBraW5nIHdhcyBwYWluZWQgdG8gc2VlIGhpbSB0cmVhdGVkIHVud29ydGhpbHksIGFuZCB0aGlzIGZlZWxpbmcgb2YgY29tcGFzc2lvbiByaXBlbmVkIGludG8gbG92ZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QsIHRoZW4sIE1hcml1cyByZXBlbGxlZCB0aGUgd29tYW4ncyBhZHZhbmNlczsgYnV0IHdoZW4gaGUgc2F3IHRoYXQgdGhlcmUgd2FzIG5vIG90aGVyIHdheSBvZiBlc2NhcGUgZm9yIGhpbSBhbmQgaGlzIGZyaWVuZHMsIGFuZCB0aGF0IGhlciBiZWhhdmlvdXIgd2FzIGJhc2VkIG9uIGEgZ2VudWluZSBhZmZlY3Rpb24sIGhlIGFjY2VwdGVkIGhlciBmYXZvdXJzOyB3aGVyZXVwb24gc2hlIGhlbHBlZCBoaW0gaW4gZ2V0dGluZyBvZmYsIGFuZCBoZSByYW4gYXdheSB3aXRoIGhpcyBmcmllbmRzIGFuZCBtYWRlIGhpcyBlc2NhcGUgdG8gaGlzIGZhdGhlci4gQWZ0ZXIgZmF0aGVyIGFuZCBzb24gaGFkIGVtYnJhY2VkIG9uZSBhbm90aGVyLCB0aGV5IHdhbGtlZCBhbG9uZyB0aGUgc2VhLXNob3JlLCBhbmQgdGhlcmUgdGhleSBzYXcgc29tZSBzY29ycGlvbnMgZmlnaHRpbmcsIHdoaWNoIHRoZSBlbGRlciBNYXJpdXMgcmVnYXJkZWQgYXMgYSBiYWQgb21lbi4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlcmVmb3JlLCB0aGV5IGJvYXJkZWQgYSBmaXNoaW5nLWJvYXQgYW5kIGNyb3NzZWQgb3ZlciB0byB0aGUgaXNsYW5kIG9mIENlcmNpbmEsIHdoaWNoIHdhcyBub3QgZmFyIGRpc3RhbnQgZnJvbSB0aGUgbWFpbmxhbmQ7IGFuZCBzY2FyY2VseSBoYWQgdGhleSBwdXQgb3V0IGZyb20gbGFuZCB3aGVuIGhvcnNlbWVuIHNlbnQgYnkgdGhlIGtpbmcgd2VyZSBzZWVuIHJpZGluZyB0b3dhcmRzIHRoZSBzcG90IHdoZW5jZSB0aGV5IGhhZCBzYWlsZWQuIEl0IHdvdWxkIHNlZW0gdGhhdCBNYXJpdXMgbmV2ZXIgZXNjYXBlZCBhIGdyZWF0ZXIgcGVyaWwgdGhhbiB0aGlzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['40.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1lYW53aGlsZSBJYW1wc2FzIHRoZSBraW5nIG9mIE51bWlkaWEsIGhlc2l0YXRpbmcgd2hpY2ggY291cnNlIHRvIHRha2UsIGRpZCBpbmRlZWQgdHJlYXQgdGhlIHlvdW5nZXIgTWFyaXVzIGFuZCBoaXMgcGFydHkgd2l0aCByZXNwZWN0LCBidXQgYWx3YXlzIGhhZCBzb21lIGV4Y3VzZSBmb3IgZGV0YWluaW5nIHRoZW0gd2hlbiB0aGV5IHdpc2hlZCB0byBnbyBhd2F5LCBhbmQgY2xlYXJseSBoYWQgbm8gZ29vZCBlbmQgaW4gdmlldyBpbiB0aHVzIHBvc3Rwb25pbmcgdGhlaXIgZGVwYXJ0dXJlLiBIb3dldmVyLCBzb21ldGhpbmcgb2NjdXJyZWQgd2hpY2gsIHRob3VnaCBub3QgYXQgYWxsIGV4dHJhb3JkaW5hcnksIGxlZCB0byB0aGVpciBlc2NhcGUuIFRoZSB5b3VuZ2VyIE1hcml1cywgdGhhdCBpcywgYmVpbmcgYSBoYW5kc29tZSBmZWxsb3csIG9uZSBvZiB0aGUgY29uY3ViaW5lcyBvZiB0aGUga2luZyB3YXMgcGFpbmVkIHRvIHNlZSBoaW0gdHJlYXRlZCB1bndvcnRoaWx5LCBhbmQgdGhpcyBmZWVsaW5nIG9mIGNvbXBhc3Npb24gcmlwZW5lZCBpbnRvIGxvdmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['40.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0LCB0aGVuLCBNYXJpdXMgcmVwZWxsZWQgdGhlIHdvbWFuJ3MgYWR2YW5jZXM7IGJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZXJlIHdhcyBubyBvdGhlciB3YXkgb2YgZXNjYXBlIGZvciBoaW0gYW5kIGhpcyBmcmllbmRzLCBhbmQgdGhhdCBoZXIgYmVoYXZpb3VyIHdhcyBiYXNlZCBvbiBhIGdlbnVpbmUgYWZmZWN0aW9uLCBoZSBhY2NlcHRlZCBoZXIgZmF2b3Vyczsgd2hlcmV1cG9uIHNoZSBoZWxwZWQgaGltIGluIGdldHRpbmcgb2ZmLCBhbmQgaGUgcmFuIGF3YXkgd2l0aCBoaXMgZnJpZW5kcyBhbmQgbWFkZSBoaXMgZXNjYXBlIHRvIGhpcyBmYXRoZXIuIEFmdGVyIGZhdGhlciBhbmQgc29uIGhhZCBlbWJyYWNlZCBvbmUgYW5vdGhlciwgdGhleSB3YWxrZWQgYWxvbmcgdGhlIHNlYS1zaG9yZSwgYW5kIHRoZXJlIHRoZXkgc2F3IHNvbWUgc2NvcnBpb25zIGZpZ2h0aW5nLCB3aGljaCB0aGUgZWxkZXIgTWFyaXVzIHJlZ2FyZGVkIGFzIGEgYmFkIG9tZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['40.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZXJlZm9yZSwgdGhleSBib2FyZGVkIGEgZmlzaGluZy1ib2F0IGFuZCBjcm9zc2VkIG92ZXIgdG8gdGhlIGlzbGFuZCBvZiBDZXJjaW5hLCB3aGljaCB3YXMgbm90IGZhciBkaXN0YW50IGZyb20gdGhlIG1haW5sYW5kOyBhbmQgc2NhcmNlbHkgaGFkIHRoZXkgcHV0IG91dCBmcm9tIGxhbmQgd2hlbiBob3JzZW1lbiBzZW50IGJ5IHRoZSBraW5nIHdlcmUgc2VlbiByaWRpbmcgdG93YXJkcyB0aGUgc3BvdCB3aGVuY2UgdGhleSBoYWQgc2FpbGVkLiBJdCB3b3VsZCBzZWVtIHRoYXQgTWFyaXVzIG5ldmVyIGVzY2FwZWQgYSBncmVhdGVyIHBlcmlsIHRoYW4gdGhpcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIFJvbWUsIFN1bGxhIHdhcyBoZWFyZCBvZiBhcyB3YWdpbmcgd2FyIHdpdGggdGhlIGdlbmVyYWxzIG9mIE1pdGhyaWRhdGVzIGluIEJvZW90aWEsIGFuZCB0aGUgY29uc3VscyBxdWFycmVsbGVkIGFuZCB3ZXJlIHJlc29ydGluZyB0byBhcm1zLiBBIGJhdHRsZSB0b29rIHBsYWNlLCBPY3Rhdml1cyB3b24gdGhlIGRheSwgY2FzdCBvdXQgQ2lubmEsIHdobyB3YXMgdHJ5aW5nIHRvIGJlIHRvbyBhcmJpdHJhcnkgaW4gaGlzIHJ1bGUsIGFuZCBwdXQgQ29ybmVsaXVzIE1lcnVsYSBpbiBoaXMgcGxhY2UgYXMgY29uc3VsOyB3aGVyZXVwb24gQ2lubmEgYXNzZW1ibGVkIGEgZm9yY2UgZnJvbSB0aGUgb3RoZXIgcGFydHMgb2YgSXRhbHkgYW5kIG1hZGUgd2FyIGFuZXcgdXBvbiBPY3Rhdml1cyBhbmQgaGlzIGNvbGxlYWd1ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBNYXJpdXMgaGVhcmQgb2YgdGhlc2UgdGhpbmdzLCBoZSB0aG91Z2h0IGJlc3QgdG8gc2FpbCB0aGl0aGVyIGFzIGZhc3QgYXMgaGUgY291bGQ7IHNvIHRha2luZyB3aXRoIGhpbSBmcm9tIEFmcmljYSBzb21lIE1vb3Jpc2ggaG9yc2VtZW4sIGFuZCBzb21lIEl0YWxpYW5zIHdobyBoYWQgd2FuZGVyZWQgdGhpdGhlciwgdGhlIG51bWJlciBvZiBib3RoIHRvZ2V0aGVyIG5vdCBleGNlZWRpbmcgYSB0aG91c2FuZCwgaGUgcHV0IHRvIHNlYS4gUHV0dGluZyBpbiBhdCBUZWxhbW9uIGluIFR5cnJoZW5pYSwgYW5kIGxhdWRpbmcgdGhlcmUsIGhlIHByb2NsYWltZWQgZnJlZWRvbSB0byB0aGUgc2xhdmVzOyBoZSBhbHNvIHdvbiBvdmVyIHRoZSBzdHVyZGllc3Qgb2YgdGhlIGZyZWUgZmFybWVycyBhbmQgaGVyZHNtZW4gb2YgdGhlIG5laWdoYm91cmhvb2QsIHdobyBjYW1lIGZsb2NraW5nIGRvd24gdG8gdGhlIHNlYSBhdHRyYWN0ZWQgYnkgaGlzIGZhbWUsIGFuZCBpbiBhIGZldyBkYXlzIGhhZCBhc3NlbWJsZWQgYSBsYXJnZSBmb3JjZSBhbmQgbWFubmVkIGZvcnR5IHNoaXBzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIFJvbWUsIFN1bGxhIHdhcyBoZWFyZCBvZiBhcyB3YWdpbmcgd2FyIHdpdGggdGhlIGdlbmVyYWxzIG9mIE1pdGhyaWRhdGVzIGluIEJvZW90aWEsIGFuZCB0aGUgY29uc3VscyBxdWFycmVsbGVkIGFuZCB3ZXJlIHJlc29ydGluZyB0byBhcm1zLiBBIGJhdHRsZSB0b29rIHBsYWNlLCBPY3Rhdml1cyB3b24gdGhlIGRheSwgY2FzdCBvdXQgQ2lubmEsIHdobyB3YXMgdHJ5aW5nIHRvIGJlIHRvbyBhcmJpdHJhcnkgaW4gaGlzIHJ1bGUsIGFuZCBwdXQgQ29ybmVsaXVzIE1lcnVsYSBpbiBoaXMgcGxhY2UgYXMgY29uc3VsOyB3aGVyZXVwb24gQ2lubmEgYXNzZW1ibGVkIGEgZm9yY2UgZnJvbSB0aGUgb3RoZXIgcGFydHMgb2YgSXRhbHkgYW5kIG1hZGUgd2FyIGFuZXcgdXBvbiBPY3Rhdml1cyBhbmQgaGlzIGNvbGxlYWd1ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTWFyaXVzIGhlYXJkIG9mIHRoZXNlIHRoaW5ncywgaGUgdGhvdWdodCBiZXN0IHRvIHNhaWwgdGhpdGhlciBhcyBmYXN0IGFzIGhlIGNvdWxkOyBzbyB0YWtpbmcgd2l0aCBoaW0gZnJvbSBBZnJpY2Egc29tZSBNb29yaXNoIGhvcnNlbWVuLCBhbmQgc29tZSBJdGFsaWFucyB3aG8gaGFkIHdhbmRlcmVkIHRoaXRoZXIsIHRoZSBudW1iZXIgb2YgYm90aCB0b2dldGhlciBub3QgZXhjZWVkaW5nIGEgdGhvdXNhbmQsIGhlIHB1dCB0byBzZWEuIFB1dHRpbmcgaW4gYXQgVGVsYW1vbiBpbiBUeXJyaGVuaWEsIGFuZCBsYXVkaW5nIHRoZXJlLCBoZSBwcm9jbGFpbWVkIGZyZWVkb20gdG8gdGhlIHNsYXZlczsgaGUgYWxzbyB3b24gb3ZlciB0aGUgc3R1cmRpZXN0IG9mIHRoZSBmcmVlIGZhcm1lcnMgYW5kIGhlcmRzbWVuIG9mIHRoZSBuZWlnaGJvdXJob29kLCB3aG8gY2FtZSBmbG9ja2luZyBkb3duIHRvIHRoZSBzZWEgYXR0cmFjdGVkIGJ5IGhpcyBmYW1lLCBhbmQgaW4gYSBmZXcgZGF5cyBoYWQgYXNzZW1ibGVkIGEgbGFyZ2UgZm9yY2UgYW5kIG1hbm5lZCBmb3J0eSBzaGlwcy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdywga25vd2luZyB0aGF0IE9jdGF2aXVzIHdhcyBhIG1vc3QgZXhjZWxsZW50IG1hbiBhbmQgd2lzaGVkIHRvIHJ1bGUgaW4gdGhlIGp1c3Rlc3Qgd2F5LCBidXQgdGhhdCBDaW5uYSB3YXMgZGlzdHJ1c3RlZCBieSBTdWxsYSBhbmQgd2FzIG1ha2luZyB3YXIgdXBvbiB0aGUgZXN0YWJsaXNoZWQgY29uc3RpdHV0aW9uLCBoZSBkZXRlcm1pbmVkIHRvIGpvaW4gQ2lubmEgd2l0aCBoaXMgZm9yY2VzLiBBY2NvcmRpbmdseSBoZSBzZW50IHRvIENpbm5hIGFuZCBvZmZlcmVkIHRvIG9iZXkgaGltIGluIGV2ZXJ5dGhpbmcgYXMgY29uc3VsLiBDaW5uYSBhY2NlcHRlZCBoaXMgb2ZmZXIsIG5hbWVkIGhpbSBwcm9jb25zdWwsIGFuZCBzZW50IGhpbSB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPmZhc2NlcyA8L2ZvcmVpZ24+IGFuZCBvdGhlciBpbnNpZ25pYSBvZiB0aGUgb2ZmaWNlIE1hcml1cywgaG93ZXZlciwgZGVjbGFyZWQgdGhhdCB0aGVzZSBkZWNvcmF0aW9ucyB3ZXJlIG5vdCBzdWl0ZWQgdG8gaGlzIGZvcnR1bmVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaW4gbWVhbiBhdHRpcmUsIGhpcyBoYWlyIHVuY3V0IHNpbmNlIHRoZSBkYXkgb2YgaGlzIGZsaWdodCwgYmVpbmcgbm93IG92ZXIgc2V2ZW50eSB5ZWFycyBvZiBhZ2UsIGNhbWUgd2l0aCBzbG93IHN0ZXBzIHRvIG1lZXQgdGhlIGNvbnN1bC4gRm9yIGhlIHdpc2hlZCB0aGF0IG1lbiBzaG91bGQgcGl0eSBoaW07IGJ1dCB3aXRoIGhpcyBhcHBlYWwgZm9yIGNvbXBhc3Npb24gdGhlcmUgd2FzIG1pbmdsZWQgdGhlIGxvb2sgdGhhdCB3YXMgbmF0dXJhbCB0byBoaW0gYW5kIG5vdyBtb3JlIHRlcnJpZnlpbmcgdGhhbiBldmVyLCBhbmQgdGhyb3VnaCBoaXMgZG93bmNhc3QgbWllbiB0aGVyZSBmbGFzaGVkIGEgc3Bpcml0IHdoaWNoIGhhZCBiZWVuLCBub3QgaHVtYmxlZCwgYnV0IG1hZGUgc2F2YWdlIGJ5IGhpcyByZXZlcnNlcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3csIGtub3dpbmcgdGhhdCBPY3Rhdml1cyB3YXMgYSBtb3N0IGV4Y2VsbGVudCBtYW4gYW5kIHdpc2hlZCB0byBydWxlIGluIHRoZSBqdXN0ZXN0IHdheSwgYnV0IHRoYXQgQ2lubmEgd2FzIGRpc3RydXN0ZWQgYnkgU3VsbGEgYW5kIHdhcyBtYWtpbmcgd2FyIHVwb24gdGhlIGVzdGFibGlzaGVkIGNvbnN0aXR1dGlvbiwgaGUgZGV0ZXJtaW5lZCB0byBqb2luIENpbm5hIHdpdGggaGlzIGZvcmNlcy4gQWNjb3JkaW5nbHkgaGUgc2VudCB0byBDaW5uYSBhbmQgb2ZmZXJlZCB0byBvYmV5IGhpbSBpbiBldmVyeXRoaW5nIGFzIGNvbnN1bC4gQ2lubmEgYWNjZXB0ZWQgaGlzIG9mZmVyLCBuYW1lZCBoaW0gcHJvY29uc3VsLCBhbmQgc2VudCBoaW0gdGhlIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmZhc2NlcyA8L2ZvcmVpZ24+IGFuZCBvdGhlciBpbnNpZ25pYSBvZiB0aGUgb2ZmaWNlIE1hcml1cywgaG93ZXZlciwgZGVjbGFyZWQgdGhhdCB0aGVzZSBkZWNvcmF0aW9ucyB3ZXJlIG5vdCBzdWl0ZWQgdG8gaGlzIGZvcnR1bmVzLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['41.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBpbiBtZWFuIGF0dGlyZSwgaGlzIGhhaXIgdW5jdXQgc2luY2UgdGhlIGRheSBvZiBoaXMgZmxpZ2h0LCBiZWluZyBub3cgb3ZlciBzZXZlbnR5IHllYXJzIG9mIGFnZSwgY2FtZSB3aXRoIHNsb3cgc3RlcHMgdG8gbWVldCB0aGUgY29uc3VsLiBGb3IgaGUgd2lzaGVkIHRoYXQgbWVuIHNob3VsZCBwaXR5IGhpbTsgYnV0IHdpdGggaGlzIGFwcGVhbCBmb3IgY29tcGFzc2lvbiB0aGVyZSB3YXMgbWluZ2xlZCB0aGUgbG9vayB0aGF0IHdhcyBuYXR1cmFsIHRvIGhpbSBhbmQgbm93IG1vcmUgdGVycmlmeWluZyB0aGFuIGV2ZXIsIGFuZCB0aHJvdWdoIGhpcyBkb3duY2FzdCBtaWVuIHRoZXJlIGZsYXNoZWQgYSBzcGlyaXQgd2hpY2ggaGFkIGJlZW4sIG5vdCBodW1ibGVkLCBidXQgbWFkZSBzYXZhZ2UgYnkgaGlzIHJldmVyc2VzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBncmVldGluZyBDaW5uYSBhbmQgcHJlc2VudGluZyBoaW1zZWxmIHRvIENpbm5hJ3Mgc29sZGllcnMsIGhlIGF0IG9uY2UgYmVnYW4gaGlzIHdvcmsgYW5kIGdyZWF0bHkgY2hhbmdlZCB0aGUgcG9zdHVyZSBvZiBhZmZhaXJzLiBJbiB0aGUgZmlyc3QgcGxhY2UsIGJ5IGN1dHRpbmcgb2ZmIHRoZSBncmFpbi1zaGlwcyB3aXRoIGhpcyBmbGVldCBhbmQgcGx1bmRlcmluZyB0aGUgbWVyY2hhbnRzLCBoZSBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIHRoZSBjaXR5J3Mgc3VwcGxpZXM7IG5leHQsIGhlIHNhaWxlZCB0byB0aGUgbWFyaXRpbWUgY2l0aWVzIGFuZCB0b29rIHRoZW07IGFuZCBmaW5hbGx5LCBoZSBzZWl6ZWQgT3N0aWEgaXRzZWxmLCB3aGljaCB3YXMgdHJlYWNoZXJvdXNseSBzdXJyZW5kZXJlZCB0byBoaW0sIHBsdW5kZXJpbmcgdGhlIHByb3BlcnR5IHRoZXJlIGFuZCBraWxsaW5nIG1vc3Qgb2YgaXRzIGluaGFiaXRhbnRzLCBhbmQgYnkgdGhyb3dpbmcgYSBicmlkZ2UgYWNyb3NzIHRoZSByaXZlciBjb21wbGV0ZWx5IGN1dCBvZmYgdGhlIGVuZW15IGZyb20gc3VjaCBzdG9yZXMgYXMgbWlnaHQgY29tZSBieSBzZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgc2V0IG91dCBhbmQgbWFyY2hlZCB3aXRoIGhpcyBhcm15IHRvd2FyZHMgdGhlIGNpdHksIGFuZCBvY2N1cGllZCB0aGUgaGlsbCBjYWxsZWQgSmFuaWN1bHVtLiBPY3Rhdml1cyBkYW1hZ2VkIGhpcyBvd24gY2F1c2UsIG5vdCBzbyBtdWNoIHRocm91Z2ggbGFjayBvZiBza2lsbCwgYXMgYnkgYSB0b28gc2NydXB1bG91cyBvYnNlcnZhbmNlIG9mIHRoZSBsYXdzLCB3aGVyZWluIGhlIHVud2lzZWx5IG5lZ2xlY3RlZCB0aGUgbmVlZHMgb2YgdGhlIGhvdXIuIEZvciB0aG91Z2ggbWFueSB1cmdlZCBoaW0gdG8gY2FsbCB0aGUgc2xhdmVzIHRvIGFybXMgdW5kZXIgcHJvbWlzZSBvZiBmcmVlZG9tLCBoZSBzYWlkIGhlIHdvdWxkIG5vdCBtYWtlIGJvbmRtZW4gbWVtYmVycyBvZiB0aGUgc3RhdGUgZnJvbSB3aGljaCBoZSB3YXMgdHJ5aW5nIHRvIGV4Y2x1ZGUgTWFyaXVzIGluIG9iZWRpZW5jZSB0byB0aGUgbGF3cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHdoZW4gTWV0ZWxsdXMgKHNvbiBvZiB0aGUgTWV0ZWxsdXMgd2hvIGhhZCBjb21tYW5kZWQgaW4gQWZyaWNhIGFuZCBoYWQgYmVlbiBiYW5pc2hlZCB0aHJvdWdoIHRoZSBpbnRyaWd1ZXMgb2YgTWFyaXVzKSBjYW1lIHRvIFJvbWUsIGl0IHdhcyB0aG91Z2h0IHRoYXQgaGUgd2FzIGZhciBzdXBlcmlvciB0byBPY3Rhdml1cyBhcyBhIGdlbmVyYWwsIGFuZCB0aGUgc29sZGllcnMgZm9yc29vayBPY3Rhdml1cyBhbmQgY2FtZSB0byBoaW0sIGVudHJlYXRpbmcgaGltIHRvIHRha2UgdGhlIGNvbW1hbmQgYW5kIHNhdmUgdGhlIGNpdHk7IGZvciB0aGV5IHdvdWxkIG1ha2UgYSBnb29kIGZpZ2h0LCB0aGV5IHNhaWQsIGFuZCB3aW4gdGhlIHZpY3RvcnkgaWYgdGhleSBnb3QgYSB0cmllZCBhbmQgZWZmaWNpZW50IGxlYWRlci4gTWV0ZWxsdXMsIGhvd2V2ZXIsIHdhcyBpbmRpZ25hbnQgYXQgdGhlbSBhbmQgYmFkZSB0aGVtIGdvLSBiYWNrIHRvIHRoZSBjb25zdWw7IHdoZXJldXBvbiB0aGV5IHdlbnQgb2ZmIHRvIHRoZSBlbmVteS4gTWV0ZWxsdXMgYWxzbyBsZWZ0IHRoZSBjaXR5LCBkZXNwYWlyaW5nIG9mIGl0cyBzYWZldHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgZ3JlZXRpbmcgQ2lubmEgYW5kIHByZXNlbnRpbmcgaGltc2VsZiB0byBDaW5uYSdzIHNvbGRpZXJzLCBoZSBhdCBvbmNlIGJlZ2FuIGhpcyB3b3JrIGFuZCBncmVhdGx5IGNoYW5nZWQgdGhlIHBvc3R1cmUgb2YgYWZmYWlycy4gSW4gdGhlIGZpcnN0IHBsYWNlLCBieSBjdXR0aW5nIG9mZiB0aGUgZ3JhaW4tc2hpcHMgd2l0aCBoaXMgZmxlZXQgYW5kIHBsdW5kZXJpbmcgdGhlIG1lcmNoYW50cywgaGUgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiB0aGUgY2l0eSdzIHN1cHBsaWVzOyBuZXh0LCBoZSBzYWlsZWQgdG8gdGhlIG1hcml0aW1lIGNpdGllcyBhbmQgdG9vayB0aGVtOyBhbmQgZmluYWxseSwgaGUgc2VpemVkIE9zdGlhIGl0c2VsZiwgd2hpY2ggd2FzIHRyZWFjaGVyb3VzbHkgc3VycmVuZGVyZWQgdG8gaGltLCBwbHVuZGVyaW5nIHRoZSBwcm9wZXJ0eSB0aGVyZSBhbmQga2lsbGluZyBtb3N0IG9mIGl0cyBpbmhhYml0YW50cywgYW5kIGJ5IHRocm93aW5nIGEgYnJpZGdlIGFjcm9zcyB0aGUgcml2ZXIgY29tcGxldGVseSBjdXQgb2ZmIHRoZSBlbmVteSBmcm9tIHN1Y2ggc3RvcmVzIGFzIG1pZ2h0IGNvbWUgYnkgc2VhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgc2V0IG91dCBhbmQgbWFyY2hlZCB3aXRoIGhpcyBhcm15IHRvd2FyZHMgdGhlIGNpdHksIGFuZCBvY2N1cGllZCB0aGUgaGlsbCBjYWxsZWQgSmFuaWN1bHVtLiBPY3Rhdml1cyBkYW1hZ2VkIGhpcyBvd24gY2F1c2UsIG5vdCBzbyBtdWNoIHRocm91Z2ggbGFjayBvZiBza2lsbCwgYXMgYnkgYSB0b28gc2NydXB1bG91cyBvYnNlcnZhbmNlIG9mIHRoZSBsYXdzLCB3aGVyZWluIGhlIHVud2lzZWx5IG5lZ2xlY3RlZCB0aGUgbmVlZHMgb2YgdGhlIGhvdXIuIEZvciB0aG91Z2ggbWFueSB1cmdlZCBoaW0gdG8gY2FsbCB0aGUgc2xhdmVzIHRvIGFybXMgdW5kZXIgcHJvbWlzZSBvZiBmcmVlZG9tLCBoZSBzYWlkIGhlIHdvdWxkIG5vdCBtYWtlIGJvbmRtZW4gbWVtYmVycyBvZiB0aGUgc3RhdGUgZnJvbSB3aGljaCBoZSB3YXMgdHJ5aW5nIHRvIGV4Y2x1ZGUgTWFyaXVzIGluIG9iZWRpZW5jZSB0byB0aGUgbGF3cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB3aGVuIE1ldGVsbHVzIChzb24gb2YgdGhlIE1ldGVsbHVzIHdobyBoYWQgY29tbWFuZGVkIGluIEFmcmljYSBhbmQgaGFkIGJlZW4gYmFuaXNoZWQgdGhyb3VnaCB0aGUgaW50cmlndWVzIG9mIE1hcml1cykgY2FtZSB0byBSb21lLCBpdCB3YXMgdGhvdWdodCB0aGF0IGhlIHdhcyBmYXIgc3VwZXJpb3IgdG8gT2N0YXZpdXMgYXMgYSBnZW5lcmFsLCBhbmQgdGhlIHNvbGRpZXJzIGZvcnNvb2sgT2N0YXZpdXMgYW5kIGNhbWUgdG8gaGltLCBlbnRyZWF0aW5nIGhpbSB0byB0YWtlIHRoZSBjb21tYW5kIGFuZCBzYXZlIHRoZSBjaXR5OyBmb3IgdGhleSB3b3VsZCBtYWtlIGEgZ29vZCBmaWdodCwgdGhleSBzYWlkLCBhbmQgd2luIHRoZSB2aWN0b3J5IGlmIHRoZXkgZ290IGEgdHJpZWQgYW5kIGVmZmljaWVudCBsZWFkZXIuIE1ldGVsbHVzLCBob3dldmVyLCB3YXMgaW5kaWduYW50IGF0IHRoZW0gYW5kIGJhZGUgdGhlbSBnby0gYmFjayB0byB0aGUgY29uc3VsOyB3aGVyZXVwb24gdGhleSB3ZW50IG9mZiB0byB0aGUgZW5lbXkuIE1ldGVsbHVzIGFsc28gbGVmdCB0aGUgY2l0eSwgZGVzcGFpcmluZyBvZiBpdHMgc2FmZXR5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgT2N0YXZpdXMgd2FzIHBlcnN1YWRlZCBieSBjZXJ0YWluIENoYWxkYWVhbnMsIHNhY3JpZmljZXJzLCBhbmQgaW50ZXJwcmV0ZXJzIG9mIHRoZSBTaWJ5bGxpbmUgYm9va3MgdG8gcmVtYWluIGluIHRoZSBjaXR5LCBvbiB0aGUgYXNzdXJhbmNlIHRoYXQgbWF0dGVycyB3b3VsZCB0dXJuIG91dCB3ZWxsLiBGb3IgaXQgd291bGQgc2VlbSB0aGF0IHRoaXMgbWFuLCBhbHRob3VnaCBoZSB3YXMgaW4gb3RoZXIgd2F5cyB0aGUgbW9zdCBzZW5zaWJsZSBtYW4gaW4gUm9tZSwgYW5kIG1vc3QgY2FyZWZ1bCB0byBtYWludGFpbiB0aGUgZGlnbml0eSBvZiB0aGUgY29uc3VsYXIgb2ZmaWNlIGZyZWUgZnJvbSB1bmR1ZSBpbmZsdWVuY2UgaW4gYWNjb3JkYW5jZSB3aXRoIHRoZSBjdXN0b21zIG9mIHRoZSBjb3VudHJ5IGFuZCBpdHMgbGF3cywgd2hpY2ggaGUgcmVnYXJkZWQgYXMgdW5jaGFuZ2VhYmxlIG9yZGluYW5jZXMsIGhhZCBhIHdlYWtuZXNzIGluIHRoaXMgZGlyZWN0aW9uLCBzaW5jZSBoZSBzcGVudCBtb3JlIHRpbWUgd2l0aCBjaGFybGF0YW5zIGFuZCBzZWVycyB0aGFuIHdpdGggbWVuIHdobyB3ZXJlIHN0YXRlc21lbiBhbmQgc29sZGllcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCB0aGVuLCBiZWZvcmUgTWFyaXVzIGVudGVyZWQgdGhlIGNpdHksIHdhcyBkcmFnZ2VkIGRvd24gZnJvbSB0aGUgcm9zdHJhIGJ5IG1lbiB3aG8gaGFkIGJlZW4gc2VudCBvbiBiZWZvcmUsIGFuZCBidXRjaGVyZWQ7IGFuZCB3ZSBhcmUgdG9sZCB0aGF0IGEgQ2hhbGRhZWFuIGNoYXJ0IHdhcyBmb3VuZCBpbiBoaXMgYm9zb20gYWZ0ZXIgaGUgaGFkIGJlZW4gc2xhaW4uIE5vdywgaXQgc2VlbXMgdmVyeSB1bmFjY291bnRhYmxlIHRoYXQsIG9mIHR3byBtb3N0IGlsbHVzdHJpb3VzIGNvbW1hbmRlcnMsIE1hcml1cyBzaG91bGQgc3VjY2VlZCBieSByZWdhcmRpbmcgZGl2aW5hdGlvbnMsIGJ1dCBPY3Rhdml1cyBzaG91bGQgYmUgcnVpbmVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBPY3Rhdml1cyB3YXMgcGVyc3VhZGVkIGJ5IGNlcnRhaW4gQ2hhbGRhZWFucywgc2FjcmlmaWNlcnMsIGFuZCBpbnRlcnByZXRlcnMgb2YgdGhlIFNpYnlsbGluZSBib29rcyB0byByZW1haW4gaW4gdGhlIGNpdHksIG9uIHRoZSBhc3N1cmFuY2UgdGhhdCBtYXR0ZXJzIHdvdWxkIHR1cm4gb3V0IHdlbGwuIEZvciBpdCB3b3VsZCBzZWVtIHRoYXQgdGhpcyBtYW4sIGFsdGhvdWdoIGhlIHdhcyBpbiBvdGhlciB3YXlzIHRoZSBtb3N0IHNlbnNpYmxlIG1hbiBpbiBSb21lLCBhbmQgbW9zdCBjYXJlZnVsIHRvIG1haW50YWluIHRoZSBkaWduaXR5IG9mIHRoZSBjb25zdWxhciBvZmZpY2UgZnJlZSBmcm9tIHVuZHVlIGluZmx1ZW5jZSBpbiBhY2NvcmRhbmNlIHdpdGggdGhlIGN1c3RvbXMgb2YgdGhlIGNvdW50cnkgYW5kIGl0cyBsYXdzLCB3aGljaCBoZSByZWdhcmRlZCBhcyB1bmNoYW5nZWFibGUgb3JkaW5hbmNlcywgaGFkIGEgd2Vha25lc3MgaW4gdGhpcyBkaXJlY3Rpb24sIHNpbmNlIGhlIHNwZW50IG1vcmUgdGltZSB3aXRoIGNoYXJsYXRhbnMgYW5kIHNlZXJzIHRoYW4gd2l0aCBtZW4gd2hvIHdlcmUgc3RhdGVzbWVuIGFuZCBzb2xkaWVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['42.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuLCB0aGVuLCBiZWZvcmUgTWFyaXVzIGVudGVyZWQgdGhlIGNpdHksIHdhcyBkcmFnZ2VkIGRvd24gZnJvbSB0aGUgcm9zdHJhIGJ5IG1lbiB3aG8gaGFkIGJlZW4gc2VudCBvbiBiZWZvcmUsIGFuZCBidXRjaGVyZWQ7IGFuZCB3ZSBhcmUgdG9sZCB0aGF0IGEgQ2hhbGRhZWFuIGNoYXJ0IHdhcyBmb3VuZCBpbiBoaXMgYm9zb20gYWZ0ZXIgaGUgaGFkIGJlZW4gc2xhaW4uIE5vdywgaXQgc2VlbXMgdmVyeSB1bmFjY291bnRhYmxlIHRoYXQsIG9mIHR3byBtb3N0IGlsbHVzdHJpb3VzIGNvbW1hbmRlcnMsIE1hcml1cyBzaG91bGQgc3VjY2VlZCBieSByZWdhcmRpbmcgZGl2aW5hdGlvbnMsIGJ1dCBPY3Rhdml1cyBzaG91bGQgYmUgcnVpbmVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5NYXR0ZXJzIGJlaW5nIGF0IHRoaXMgcGFzcywgdGhlIHNlbmF0ZSBtZXQgYW5kIHNlbnQgYSBkZXB1dGF0aW9uIHRvIENpbm5hIGFuZCBNYXJpdXMsIGJlZ2dpbmcgdGhlbSB0byBlbnRlciB0aGUgY2l0eSBhbmQgc3BhcmUgdGhlIGNpdGl6ZW5zLiBDaW5uYSwgYWNjb3JkaW5nbHksIGFzIGNvbnN1bCwgc2VhdGVkIG9uIGhpcyBjaGFpciBvZiBvZmZpY2UsIHJlY2VpdmVkIHRoZSBlbWJhc3N5IGFuZCBnYXZlIHRoZW0gYSBraW5kbHkgYW5zd2VyOyBidXQgTWFyaXVzLCBzdGFuZGluZyBieSB0aGUgY29uc3VsJ3MgY2hhaXIgd2l0aG91dCBzcGVha2luZyBhIHdvcmQsIG1hZGUgaXQgY2xlYXIgYWxsIHRoZSB3aGlsZSwgYnkgdGhlIGhlYXZpbmVzcyBvZiBoaXMgY291bnRlbmFuY2UgYW5kIHRoZSBnbG9vbWluZXNzIG9mIGhpcyBsb29rLCB0aGF0IGhlIHdvdWxkIGF0IG9uY2UgZmlsbCB0aGUgY2l0eSB3aXRoIHNsYXVnaHRlci4gQWZ0ZXIgdGhlIGNvbmZlcmVuY2Ugd2FzIG92ZXIgdGhleSBtb3ZlZCBvbiB0b3dhcmRzIHRoZSBjaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DaW5uYSBlbnRlcmVkIGl0IHdpdGggYSBib2R5Z3VhcmQsIGJ1dCBNYXJpdXMgaGFsdGVkIGF0IHRoZSBnYXRlcyBhbmQgYW5ncmlseSBkaXNzZW1ibGVkLCBzYXlpbmcgdGhhdCBoZSB3YXMgYW4gZXhpbGUgYW5kIHdhcyBleGNsdWRlZCBmcm9tIHRoZSBjb3VudHJ5IGJ5IHRoZSBsYXcsIGFuZCBpZiBoaXMgcHJlc2VuY2UgdGhlcmUgd2FzIGRlc2lyZWQsIHRoZSB2b3RlIHdoaWNoIGNhc3QgaGltIG91dCBtdXN0IGJlIHJlc2NpbmRlZCBieSBhbm90aGVyIHZvdGUsIHNpbmNlLCBpbmRlZWQsIGhlIHdhcyBhIGxhdy1hYmlkaW5nIG1hbiBhbmQgd2FzIHJldHVybmluZyB0byBhIGZyZWUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlIHBlb3BsZSB3ZXJlIHN1bW1vbmVkIHRvIHRoZSBmb3J1bTsgYW5kIGJlZm9yZSB0aHJlZSBvciBmb3VyIG9mIHRoZSB0cmliZXMgaGFkIGNhc3QgdGhlaXIgdm90ZXMsIGhlIHRocmV3IGFzaWRlIGhpcyBmZWlnbmluZyBhbmQgYWxsIHRoYXQgamV0dHkgdGFsayBhYm91dCBiZWluZyBhbiBleGlsZSwgYW5kIGVudGVyZWQgdGhlIGNpdHksIGhhdmluZyBhcyBoaXMgYm9keS1ndWFyZCBhIHBpY2tlZCBiYW5kIG9mIHRoZSBzbGF2ZXMgd2hvIGhhZCBmbG9ja2VkIHRvIGhpcyBzdGFuZGFyZCwgdG8gd2hvbSBoZSBoYWQgZ2l2ZW4gdGhlIG5hbWUgb2YgQmFyZHlhZWkuIFRoZXNlIGZlbGxvd3Mga2lsbGVkIG1hbnkgb2YgdGhlIGNpdGl6ZW5zIGF0IGEgd29yZCBvZiBjb21tYW5kIGZyb20gaGltLCBtYW55LCB0b28sIGF0IGEgbWVyZSBub2Q7IGFuZCBhdCBsYXN0LCB3aGVuIEFuY2hhcml1cywgYSBtYW4gb2Ygc2VuYXRvcmlhbCBhbmQgcHJhZXRvcmlhbCBkaWduaXR5LCBtZXQgTWFyaXVzIGFuZCBnb3Qgbm8gc2FsdXRhdGlvbiBmcm9tIGhpbSwgdGhleSBzdHJ1Y2sgaGltIGRvd24gd2l0aCB0aGVpciBzd29yZHMgYmVmb3JlIHRoZSBmYWNlIG9mIHRoZWlyIG1hc3Rlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd2hlbmV2ZXIgYW55Ym9keSBlbHNlIGdyZWV0ZWQgTWFyaXVzIGFuZCBnb3Qgbm8gc2FsdXRhdGlvbiBvciBncmVldGluZyBpbiByZXR1cm4sIHRoaXMgb2YgaXRzZWxmIHdhcyBhIHNpZ25hbCBmb3IgdGhlIG1hbidzIHNsYXVnaHRlciBpbiB0aGUgdmVyeSBzdHJlZXQsIHNvIHRoYXQgZXZlbiB0aGUgZnJpZW5kcyBvZiBNYXJpdXMsIHRvIGEgbWFuLCB3ZXJlIGZ1bGwgb2YgYW5ndWlzaCBhbmQgaG9ycm9yIHdoZW5ldmVyIHRoZXkgZHJldyBuZWFyIHRvIGdyZWV0IGhpbS4gU28gbWFueSB3ZXJlIHNsYWluIHRoYXQgYXQgbGFzdCBDaW5uYSdzIGFwcGV0aXRlIGZvciBtdXJkZXIgd2FzIGR1bGxlZCBhbmQgc2F0ZWQ7IGJ1dCBNYXJpdXMsIHdob3NlIGFuZ2VyIGluY3JlYXNlZCBkYXkgYnkgZGF5IGFuZCB0aGlyc3RlZCBmb3IgYmxvb2QsIGtlcHQgb24ga2lsbGluZyBhbGwgd2hvbSBoZSBoZWxkIGluIGFueSBzdXNwaWNpb24gd2hhdHNvZXZlci4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+RXZlcnkgcm9hZCBhbmQgZXZlcnkgY2l0eSB3YXMgZmlsbGVkIHdpdGggbWVuIHB1cnN1aW5nIGFuZCBodW50aW5nIGRvd24gdGhvc2Ugd2hvIHNvdWdodCB0byBlc2NhcGUgb3IgaGFkIGhpZGRlbiB0aGVtc2VsdmVzLiBNb3Jlb3ZlciwgdGhlIHRydXN0IC1tZW4gcGxhY2VkIGluIHRoZSB0aWVzIG9mIGhvc3BpdGFsaXR5IGFuZCBmcmllbmRzaGlwIHdhcyBmb3VuZCB0byBiZSBubyBzZWN1cml0eSBhZ2FpbnN0IHRoZSBzdHJva2VzIG9mIEZvcnR1bmU7IGZvciBmZXcgdGhlcmUgd2VyZSwgYWxsIHRvbGQsIHdobyBkaWQgbm90IGJldHJheSB0byB0aGUgbXVyZGVyZXJzIHRob3NlIHdobyBoYWQgdGFrZW4gcmVmdWdlIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoZSBtb3JlIHdvcnRoeSBvZiBwcmFpc2UgYW5kIGFkbWlyYXRpb24sIHRoZW4sIHdhcyB0aGUgYmVoYXZpb3VyIG9mIHRoZSBzbGF2ZXMgb2YgQ29ybnV0dXMuIFRoZXkgY29uY2VhbGVkIHRoZWlyIG1hc3RlciBpbiBoaXMgaG91c2U7IHRoZW4gdGhleSBodW5nIHVwIGJ5IHRoZSBuZWNrIG9uZSBvZiB0aGUgbWFueSBkZWFkIGJvZGllcyB0aGF0IGxheSBhYm91dCwgcHV0IGEgZ29sZCByaW5nIG9uIGl0cyBmaW5nZXIsIGFuZCBzaG93ZWQgaXQgdG8gdGhlIGd1YXJkcyBvZiBNYXJpdXMsIGFmdGVyIHdoaWNoIHRoZXkgZGVja2VkIGl0IG91dCBhcyBpZiBpdCB3ZXJlIHRoZWlyIG1hc3RlcidzIGJvZHkgYW5kIGdhdmUgaXQgYnVyaWFsLiBOb2JvZHkgc3VzcGVjdGVkIHRoZSBydXNlLCBhbmQgdGh1cyBDb3JudXR1cyBlc2NhcGVkIG5vdGljZSBhbmQgd2FzIGNvbnZleWVkIGJ5IGhpcyBzbGF2ZXMgaW50byBHYXVsLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWF0dGVycyBiZWluZyBhdCB0aGlzIHBhc3MsIHRoZSBzZW5hdGUgbWV0IGFuZCBzZW50IGEgZGVwdXRhdGlvbiB0byBDaW5uYSBhbmQgTWFyaXVzLCBiZWdnaW5nIHRoZW0gdG8gZW50ZXIgdGhlIGNpdHkgYW5kIHNwYXJlIHRoZSBjaXRpemVucy4gQ2lubmEsIGFjY29yZGluZ2x5LCBhcyBjb25zdWwsIHNlYXRlZCBvbiBoaXMgY2hhaXIgb2Ygb2ZmaWNlLCByZWNlaXZlZCB0aGUgZW1iYXNzeSBhbmQgZ2F2ZSB0aGVtIGEga2luZGx5IGFuc3dlcjsgYnV0IE1hcml1cywgc3RhbmRpbmcgYnkgdGhlIGNvbnN1bCdzIGNoYWlyIHdpdGhvdXQgc3BlYWtpbmcgYSB3b3JkLCBtYWRlIGl0IGNsZWFyIGFsbCB0aGUgd2hpbGUsIGJ5IHRoZSBoZWF2aW5lc3Mgb2YgaGlzIGNvdW50ZW5hbmNlIGFuZCB0aGUgZ2xvb21pbmVzcyBvZiBoaXMgbG9vaywgdGhhdCBoZSB3b3VsZCBhdCBvbmNlIGZpbGwgdGhlIGNpdHkgd2l0aCBzbGF1Z2h0ZXIuIEFmdGVyIHRoZSBjb25mZXJlbmNlIHdhcyBvdmVyIHRoZXkgbW92ZWQgb24gdG93YXJkcyB0aGUgY2l0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNpbm5hIGVudGVyZWQgaXQgd2l0aCBhIGJvZHlndWFyZCwgYnV0IE1hcml1cyBoYWx0ZWQgYXQgdGhlIGdhdGVzIGFuZCBhbmdyaWx5IGRpc3NlbWJsZWQsIHNheWluZyB0aGF0IGhlIHdhcyBhbiBleGlsZSBhbmQgd2FzIGV4Y2x1ZGVkIGZyb20gdGhlIGNvdW50cnkgYnkgdGhlIGxhdywgYW5kIGlmIGhpcyBwcmVzZW5jZSB0aGVyZSB3YXMgZGVzaXJlZCwgdGhlIHZvdGUgd2hpY2ggY2FzdCBoaW0gb3V0IG11c3QgYmUgcmVzY2luZGVkIGJ5IGFub3RoZXIgdm90ZSwgc2luY2UsIGluZGVlZCwgaGUgd2FzIGEgbGF3LWFiaWRpbmcgbWFuIGFuZCB3YXMgcmV0dXJuaW5nIHRvIGEgZnJlZSBjaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZSBwZW9wbGUgd2VyZSBzdW1tb25lZCB0byB0aGUgZm9ydW07IGFuZCBiZWZvcmUgdGhyZWUgb3IgZm91ciBvZiB0aGUgdHJpYmVzIGhhZCBjYXN0IHRoZWlyIHZvdGVzLCBoZSB0aHJldyBhc2lkZSBoaXMgZmVpZ25pbmcgYW5kIGFsbCB0aGF0IGpldHR5IHRhbGsgYWJvdXQgYmVpbmcgYW4gZXhpbGUsIGFuZCBlbnRlcmVkIHRoZSBjaXR5LCBoYXZpbmcgYXMgaGlzIGJvZHktZ3VhcmQgYSBwaWNrZWQgYmFuZCBvZiB0aGUgc2xhdmVzIHdobyBoYWQgZmxvY2tlZCB0byBoaXMgc3RhbmRhcmQsIHRvIHdob20gaGUgaGFkIGdpdmVuIHRoZSBuYW1lIG9mIEJhcmR5YWVpLiBUaGVzZSBmZWxsb3dzIGtpbGxlZCBtYW55IG9mIHRoZSBjaXRpemVucyBhdCBhIHdvcmQgb2YgY29tbWFuZCBmcm9tIGhpbSwgbWFueSwgdG9vLCBhdCBhIG1lcmUgbm9kOyBhbmQgYXQgbGFzdCwgd2hlbiBBbmNoYXJpdXMsIGEgbWFuIG9mIHNlbmF0b3JpYWwgYW5kIHByYWV0b3JpYWwgZGlnbml0eSwgbWV0IE1hcml1cyBhbmQgZ290IG5vIHNhbHV0YXRpb24gZnJvbSBoaW0sIHRoZXkgc3RydWNrIGhpbSBkb3duIHdpdGggdGhlaXIgc3dvcmRzIGJlZm9yZSB0aGUgZmFjZSBvZiB0aGVpciBtYXN0ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHdoZW5ldmVyIGFueWJvZHkgZWxzZSBncmVldGVkIE1hcml1cyBhbmQgZ290IG5vIHNhbHV0YXRpb24gb3IgZ3JlZXRpbmcgaW4gcmV0dXJuLCB0aGlzIG9mIGl0c2VsZiB3YXMgYSBzaWduYWwgZm9yIHRoZSBtYW4ncyBzbGF1Z2h0ZXIgaW4gdGhlIHZlcnkgc3RyZWV0LCBzbyB0aGF0IGV2ZW4gdGhlIGZyaWVuZHMgb2YgTWFyaXVzLCB0byBhIG1hbiwgd2VyZSBmdWxsIG9mIGFuZ3Vpc2ggYW5kIGhvcnJvciB3aGVuZXZlciB0aGV5IGRyZXcgbmVhciB0byBncmVldCBoaW0uIFNvIG1hbnkgd2VyZSBzbGFpbiB0aGF0IGF0IGxhc3QgQ2lubmEncyBhcHBldGl0ZSBmb3IgbXVyZGVyIHdhcyBkdWxsZWQgYW5kIHNhdGVkOyBidXQgTWFyaXVzLCB3aG9zZSBhbmdlciBpbmNyZWFzZWQgZGF5IGJ5IGRheSBhbmQgdGhpcnN0ZWQgZm9yIGJsb29kLCBrZXB0IG9uIGtpbGxpbmcgYWxsIHdob20gaGUgaGVsZCBpbiBhbnkgc3VzcGljaW9uIHdoYXRzb2V2ZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkV2ZXJ5IHJvYWQgYW5kIGV2ZXJ5IGNpdHkgd2FzIGZpbGxlZCB3aXRoIG1lbiBwdXJzdWluZyBhbmQgaHVudGluZyBkb3duIHRob3NlIHdobyBzb3VnaHQgdG8gZXNjYXBlIG9yIGhhZCBoaWRkZW4gdGhlbXNlbHZlcy4gTW9yZW92ZXIsIHRoZSB0cnVzdCAtbWVuIHBsYWNlZCBpbiB0aGUgdGllcyBvZiBob3NwaXRhbGl0eSBhbmQgZnJpZW5kc2hpcCB3YXMgZm91bmQgdG8gYmUgbm8gc2VjdXJpdHkgYWdhaW5zdCB0aGUgc3Ryb2tlcyBvZiBGb3J0dW5lOyBmb3IgZmV3IHRoZXJlIHdlcmUsIGFsbCB0b2xkLCB3aG8gZGlkIG5vdCBiZXRyYXkgdG8gdGhlIG11cmRlcmVycyB0aG9zZSB3aG8gaGFkIHRha2VuIHJlZnVnZSB3aXRoIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['43.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgbW9yZSB3b3J0aHkgb2YgcHJhaXNlIGFuZCBhZG1pcmF0aW9uLCB0aGVuLCB3YXMgdGhlIGJlaGF2aW91ciBvZiB0aGUgc2xhdmVzIG9mIENvcm51dHVzLiBUaGV5IGNvbmNlYWxlZCB0aGVpciBtYXN0ZXIgaW4gaGlzIGhvdXNlOyB0aGVuIHRoZXkgaHVuZyB1cCBieSB0aGUgbmVjayBvbmUgb2YgdGhlIG1hbnkgZGVhZCBib2RpZXMgdGhhdCBsYXkgYWJvdXQsIHB1dCBhIGdvbGQgcmluZyBvbiBpdHMgZmluZ2VyLCBhbmQgc2hvd2VkIGl0IHRvIHRoZSBndWFyZHMgb2YgTWFyaXVzLCBhZnRlciB3aGljaCB0aGV5IGRlY2tlZCBpdCBvdXQgYXMgaWYgaXQgd2VyZSB0aGVpciBtYXN0ZXIncyBib2R5IGFuZCBnYXZlIGl0IGJ1cmlhbC4gTm9ib2R5IHN1c3BlY3RlZCB0aGUgcnVzZSwgYW5kIHRodXMgQ29ybnV0dXMgZXNjYXBlZCBub3RpY2UgYW5kIHdhcyBjb252ZXllZCBieSBoaXMgc2xhdmVzIGludG8gR2F1bC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY3VzIEFudG9uaXVzIGFsc28sIHRoZSBvcmF0b3IsIGZvdW5kIGEgZmFpdGhmdWwgZnJpZW5kLCBidXQgaXQgZGlkIG5vdCBzYXZlIGhpbS4gRm9yIHRoaXMgZnJpZW5kLCB3aG8gd2FzIGEgcG9vciBwbGViZWlhbiBhbmQgaGFkIHJlY2VpdmVkIGludG8gaGlzIGhvdXNlIGEgbGVhZGluZyBtYW4gb2YgUm9tZSwgd2hvbSBoZSB3aXNoZWQgdG8gZW50ZXJ0YWluIGFzIHdlbGwgYXMgaGUgY291bGQsIHNlbnQgYSBzbGF2ZSB0byBhIG5laWdoYm91cmluZyBpbm5rZWVwZXIgdG8gZ2V0IHNvbWUgd2luZS4gQXMgdGhlIHNsYXZlIHRhc3RlZCB0aGUgd2luZSBtb3JlIGNhcmVmdWxseSB0aGFuIHVzdWFsIGFuZCBvcmRlcmVkIHNvbWUgb2YgYmV0dGVyIHF1YWxpdHksIHRoZSBpbm5rZWVwZXIgYXNrZWQgaGltIHdoYXQgd2FzIHRoZSByZWFzb24gdGhhdCBoZSBkaWQgbm90IGJ1eSB0aGUgbmV3IGFuZCBvcmRpbmFyeSB3aW5lIGFzIHVzdWFsLCBpbnN0ZWFkIG9mIHdhbnRpbmcgc29tZSB0aGF0IHdhcyBjaG9pY2UgYW5kIGV4cGVuc2l2ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHNsYXZlLCBpbiBoaXMgZ3JlYXQgc2ltcGxpY2l0eSwgY29uc2Npb3VzIHRoYXQgaGUgd2FzIGRlYWxpbmcgd2l0aCBhbiBvbGQgYWNxdWFpbnRhbmNlLCB0b2xkIGhpbSB0aGF0IGhpcyBtYXN0ZXIgd2FzIGVudGVydGFpbmluZyBNYXJjdXMgQW50b25pdXMsIHdobyB3YXMgY29uY2VhbGVkIGF0IGhpcyBob3VzZS4gQXMgc29vbiBhcyB0aGUgc2xhdmUgaGFkIGdvbmUgaG9tZSwgdGhlIGlubmtlZXBlciwgd2hvIHdhcyBhbiBpbXBpb3VzIGFuZCBwZXN0aWxlbnQgZmVsbG93LCBoYXN0ZW5lZCBpbiBwZXJzb24gdG8gZmluZCBNYXJpdXMsIHdobyB3YXMgYWxyZWFkeSBhdCBzdXBwZXIsIGFuZCBvbiBiZWluZyBpbnRyb2R1Y2VkLCBwcm9taXNlZCB0byBiZXRyYXkgQW50b25pdXMgdG8gaGltLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIE1hcml1cyBoZWFyZCB0aGlzLCBhcyB3ZSBhcmUgdG9sZCwgYSBsb3VkIGNyeSBidXJzdCBmcm9tIGhpcyBsaXBzIGFuZCBoZSBjbGFwcGVkIGhpcyBoYW5kcyBmb3Igam95OyBoZSBhY3R1YWxseSBjYW1lIG5lYXIgc3ByaW5naW5nIGZyb20gaGlzIHNlYXQgYW5kIGh1cnJ5aW5nIHRvIHRoZSBwbGFjZSBoaW1zZWxmLCBidXQgaGlzIGZyaWVuZHMgcmVzdHJhaW5lZCBoaW07IHNvIGhlIHNlbnQgQW5uaXVzIGFuZCBzb21lIHNvbGRpZXJzIHdpdGggaGltLCBvcmRlcmluZyB0aGVtIHRvIGJyaW5nIGhpbSB0aGUgaGVhZCBvZiBBbnRvbml1cyB3aXRoIGFsbCBzcGVlZC4gQWNjb3JkaW5nbHksIHdoZW4gdGhleSB3ZXJlIGNvbWUgdG8gdGhlIGhvdXNlLCBBbm5pdXMgc3RvcHBlZCBhdCB0aGUgZG9vciwgd2hpbGUgdGhlIHNvbGRpZXJzIGNsaW1iZWQgdGhlIHN0YWlycyBhbmQgZW50ZXJlZCB0aGUgcm9vbS4gQnV0IHdoZW4gdGhleSBiZWhlbGQgQW50b25pdXMsIGV2ZXJ5IG1hbiBiZWdhbiB0byB1cmdlIGFuZCBwdXNoIGZvcndhcmQgYSBjb21wYW5pb24gdG8gZG8gdGhlIG11cmRlciBpbnN0ZWFkIG9mIGhpbXNlbGYuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIGluZGVzY3JpYmFibGUsIGhvd2V2ZXIsIGFzIGl0IHdvdWxkIHNlZW0sIHdhcyB0aGUgZ3JhY2UgYW5kIGNoYXJtIG9mIGhpcyB3b3JkcywgdGhhdCB3aGVuIEFudG9uaXVzIGJlZ2FuIHRvIHNwZWFrIGFuZCBwcmF5IGZvciBoaXMgbGlmZSwgbm90IGEgc29sZGllciBoYWQgdGhlIGhhcmRpaG9vZCB0byBsYXkgaGFuZHMgb24gaGltIG9yIGV2ZW4gdG8gbG9vayBoaW0gaW4gdGhlIGZhY2UsIGJ1dCB0aGV5IGFsbCBiZW50IHRoZWlyIGhlYWRzIGRvd24gYW5kIHdlcHQuIFBlcmNlaXZpbmcgdGhhdCB0aGVyZSB3YXMgc29tZSBkZWxheSwgQW5uaXVzIHdlbnQgdXBzdGFpcnMsIGFuZCBzYXcgdGhhdCBBbnRvbml1cyB3YXMgcGxlYWRpbmcgYW5kIHRoYXQgdGhlIHNvbGRpZXJzIHdlcmUgYWJhc2hlZCBhbmQgZW5jaGFudGVkIGJ5IGhpcyB3b3Jkczsgc28gaGUgY3Vyc2VkIGhpcyBtZW4sIGFuZCBydW5uaW5nIHVwIHRvIEFudG9uaXVzLCB3aXRoIGhpcyBvd24gaGFuZHMgY3V0IG9mZiBoaXMgaGVhZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWFyY3VzIEFudG9uaXVzIGFsc28sIHRoZSBvcmF0b3IsIGZvdW5kIGEgZmFpdGhmdWwgZnJpZW5kLCBidXQgaXQgZGlkIG5vdCBzYXZlIGhpbS4gRm9yIHRoaXMgZnJpZW5kLCB3aG8gd2FzIGEgcG9vciBwbGViZWlhbiBhbmQgaGFkIHJlY2VpdmVkIGludG8gaGlzIGhvdXNlIGEgbGVhZGluZyBtYW4gb2YgUm9tZSwgd2hvbSBoZSB3aXNoZWQgdG8gZW50ZXJ0YWluIGFzIHdlbGwgYXMgaGUgY291bGQsIHNlbnQgYSBzbGF2ZSB0byBhIG5laWdoYm91cmluZyBpbm5rZWVwZXIgdG8gZ2V0IHNvbWUgd2luZS4gQXMgdGhlIHNsYXZlIHRhc3RlZCB0aGUgd2luZSBtb3JlIGNhcmVmdWxseSB0aGFuIHVzdWFsIGFuZCBvcmRlcmVkIHNvbWUgb2YgYmV0dGVyIHF1YWxpdHksIHRoZSBpbm5rZWVwZXIgYXNrZWQgaGltIHdoYXQgd2FzIHRoZSByZWFzb24gdGhhdCBoZSBkaWQgbm90IGJ1eSB0aGUgbmV3IGFuZCBvcmRpbmFyeSB3aW5lIGFzIHVzdWFsLCBpbnN0ZWFkIG9mIHdhbnRpbmcgc29tZSB0aGF0IHdhcyBjaG9pY2UgYW5kIGV4cGVuc2l2ZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzbGF2ZSwgaW4gaGlzIGdyZWF0IHNpbXBsaWNpdHksIGNvbnNjaW91cyB0aGF0IGhlIHdhcyBkZWFsaW5nIHdpdGggYW4gb2xkIGFjcXVhaW50YW5jZSwgdG9sZCBoaW0gdGhhdCBoaXMgbWFzdGVyIHdhcyBlbnRlcnRhaW5pbmcgTWFyY3VzIEFudG9uaXVzLCB3aG8gd2FzIGNvbmNlYWxlZCBhdCBoaXMgaG91c2UuIEFzIHNvb24gYXMgdGhlIHNsYXZlIGhhZCBnb25lIGhvbWUsIHRoZSBpbm5rZWVwZXIsIHdobyB3YXMgYW4gaW1waW91cyBhbmQgcGVzdGlsZW50IGZlbGxvdywgaGFzdGVuZWQgaW4gcGVyc29uIHRvIGZpbmQgTWFyaXVzLCB3aG8gd2FzIGFscmVhZHkgYXQgc3VwcGVyLCBhbmQgb24gYmVpbmcgaW50cm9kdWNlZCwgcHJvbWlzZWQgdG8gYmV0cmF5IEFudG9uaXVzIHRvIGhpbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gTWFyaXVzIGhlYXJkIHRoaXMsIGFzIHdlIGFyZSB0b2xkLCBhIGxvdWQgY3J5IGJ1cnN0IGZyb20gaGlzIGxpcHMgYW5kIGhlIGNsYXBwZWQgaGlzIGhhbmRzIGZvciBqb3k7IGhlIGFjdHVhbGx5IGNhbWUgbmVhciBzcHJpbmdpbmcgZnJvbSBoaXMgc2VhdCBhbmQgaHVycnlpbmcgdG8gdGhlIHBsYWNlIGhpbXNlbGYsIGJ1dCBoaXMgZnJpZW5kcyByZXN0cmFpbmVkIGhpbTsgc28gaGUgc2VudCBBbm5pdXMgYW5kIHNvbWUgc29sZGllcnMgd2l0aCBoaW0sIG9yZGVyaW5nIHRoZW0gdG8gYnJpbmcgaGltIHRoZSBoZWFkIG9mIEFudG9uaXVzIHdpdGggYWxsIHNwZWVkLiBBY2NvcmRpbmdseSwgd2hlbiB0aGV5IHdlcmUgY29tZSB0byB0aGUgaG91c2UsIEFubml1cyBzdG9wcGVkIGF0IHRoZSBkb29yLCB3aGlsZSB0aGUgc29sZGllcnMgY2xpbWJlZCB0aGUgc3RhaXJzIGFuZCBlbnRlcmVkIHRoZSByb29tLiBCdXQgd2hlbiB0aGV5IGJlaGVsZCBBbnRvbml1cywgZXZlcnkgbWFuIGJlZ2FuIHRvIHVyZ2UgYW5kIHB1c2ggZm9yd2FyZCBhIGNvbXBhbmlvbiB0byBkbyB0aGUgbXVyZGVyIGluc3RlYWQgb2YgaGltc2VsZi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlNvIGluZGVzY3JpYmFibGUsIGhvd2V2ZXIsIGFzIGl0IHdvdWxkIHNlZW0sIHdhcyB0aGUgZ3JhY2UgYW5kIGNoYXJtIG9mIGhpcyB3b3JkcywgdGhhdCB3aGVuIEFudG9uaXVzIGJlZ2FuIHRvIHNwZWFrIGFuZCBwcmF5IGZvciBoaXMgbGlmZSwgbm90IGEgc29sZGllciBoYWQgdGhlIGhhcmRpaG9vZCB0byBsYXkgaGFuZHMgb24gaGltIG9yIGV2ZW4gdG8gbG9vayBoaW0gaW4gdGhlIGZhY2UsIGJ1dCB0aGV5IGFsbCBiZW50IHRoZWlyIGhlYWRzIGRvd24gYW5kIHdlcHQuIFBlcmNlaXZpbmcgdGhhdCB0aGVyZSB3YXMgc29tZSBkZWxheSwgQW5uaXVzIHdlbnQgdXBzdGFpcnMsIGFuZCBzYXcgdGhhdCBBbnRvbml1cyB3YXMgcGxlYWRpbmcgYW5kIHRoYXQgdGhlIHNvbGRpZXJzIHdlcmUgYWJhc2hlZCBhbmQgZW5jaGFudGVkIGJ5IGhpcyB3b3Jkczsgc28gaGUgY3Vyc2VkIGhpcyBtZW4sIGFuZCBydW5uaW5nIHVwIHRvIEFudG9uaXVzLCB3aXRoIGhpcyBvd24gaGFuZHMgY3V0IG9mZiBoaXMgaGVhZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIHRoZSBmcmllbmRzIG9mIENhdHVsdXMgTHV0YXRpdXMsIHdobyBoYWQgYmVlbiBhIGNvbGxlYWd1ZSBvZiBNYXJpdXMgaW4gdGhlIGNvbnN1bHNoaXAsIGFuZCB3aXRoIGhpbSBoYWQgY2VsZWJyYXRlZCBhIHRyaXVtcGggb3ZlciB0aGUgQ2ltYnJpLCBpbnRlcmNlZGVkIGZvciBoaW0gYW5kIGJlZ2dlZCBNYXJpdXMgdG8gc3BhcmUgaGlzIGxpZmU7IGJ1dCB0aGUgb25seSBhbnN3ZXIgdGhleSBjb3VsZCBnZXQgd2FzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlIG11c3QgZGllLjwvcT4gQ2F0dWx1cyB0aGVyZWZvcmUgc2h1dCBoaW1zZWxmIHVwIGluIGEgcm9vbSwgbGlnaHRlZCB1cCBhIGdyZWF0IHF1YW50aXR5IG9mIGNoYXJjb2FsLCBhbmQgd2FzIHN1ZmZvY2F0ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCB0aGUgZnJpZW5kcyBvZiBDYXR1bHVzIEx1dGF0aXVzLCB3aG8gaGFkIGJlZW4gYSBjb2xsZWFndWUgb2YgTWFyaXVzIGluIHRoZSBjb25zdWxzaGlwLCBhbmQgd2l0aCBoaW0gaGFkIGNlbGVicmF0ZWQgYSB0cml1bXBoIG92ZXIgdGhlIENpbWJyaSwgaW50ZXJjZWRlZCBmb3IgaGltIGFuZCBiZWdnZWQgTWFyaXVzIHRvIHNwYXJlIGhpcyBsaWZlOyBidXQgdGhlIG9ubHkgYW5zd2VyIHRoZXkgY291bGQgZ2V0IHdhczogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhlIG11c3QgZGllLjwvcT4gQ2F0dWx1cyB0aGVyZWZvcmUgc2h1dCBoaW1zZWxmIHVwIGluIGEgcm9vbSwgbGlnaHRlZCB1cCBhIGdyZWF0IHF1YW50aXR5IG9mIGNoYXJjb2FsLCBhbmQgd2FzIHN1ZmZvY2F0ZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZWFkbGVzcyB0cnVua3MgdGhyb3duIGludG8gdGhlIHN0cmVldHMgYW5kIHRyYW1wbGVkIHVuZGVyIGZvb3QgZXhjaXRlZCBubyBwaXR5LCB0aG91Z2ggZXZlcnlib2R5IHRyZW1ibGVkIGFuZCBzaHVkZGVyZWQgYXQgdGhlIHNpZ2h0LiBUaGUgcGVvcGxlIHdlcmUgbW9zdCBkaXN0cmVzc2VkLCBob3dldmVyLCBieSB0aGUgd2FudG9uIGxpY2VuY2Ugb2YgdGhlIEJhcmR5YWVpLCBhcyB0aGV5IHdlcmUgY2FsbGVkLCB3aG8gYnV0Y2hlcmVkIGZhdGhlcnMgb2YgZmFtaWxpZXMgaW4gdGhlaXIgaG91c2VzLCBvdXRyYWdlZCB0aGVpciBjaGlsZHJlbiwgdmlvbGF0ZWQgdGhlaXIgd2l2ZXMsIGFuZCBjb3VsZCBub3QgYmUgY2hlY2tlZCBpbiB0aGVpciBjYXJlZXIgb2YgcmFwaW5lIGFuZCBtdXJkZXIgdW50aWwgQ2lubmEgYW5kIFNlcnRvcml1cywgYWZ0ZXIgdGFraW5nIGNvdW5zZWwgdG9nZXRoZXIsIGZlbGwgdXBvbiB0aGVtIGFzIHRoZXkgd2VyZSBhc2xlZXAgaW4gdGhlaXIgY2FtcCwgYW5kIHRyYW5zZml4ZWQgdGhlbSBhbGwgd2l0aCBqYXZlbGlucy4gPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gNS41IiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TZXJ0b3JpdXMgPC90aXRsZT4sIHYuIDUgPC9iaWJsPi4gPC9ub3RlPiAKCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['44.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZWFkbGVzcyB0cnVua3MgdGhyb3duIGludG8gdGhlIHN0cmVldHMgYW5kIHRyYW1wbGVkIHVuZGVyIGZvb3QgZXhjaXRlZCBubyBwaXR5LCB0aG91Z2ggZXZlcnlib2R5IHRyZW1ibGVkIGFuZCBzaHVkZGVyZWQgYXQgdGhlIHNpZ2h0LiBUaGUgcGVvcGxlIHdlcmUgbW9zdCBkaXN0cmVzc2VkLCBob3dldmVyLCBieSB0aGUgd2FudG9uIGxpY2VuY2Ugb2YgdGhlIEJhcmR5YWVpLCBhcyB0aGV5IHdlcmUgY2FsbGVkLCB3aG8gYnV0Y2hlcmVkIGZhdGhlcnMgb2YgZmFtaWxpZXMgaW4gdGhlaXIgaG91c2VzLCBvdXRyYWdlZCB0aGVpciBjaGlsZHJlbiwgdmlvbGF0ZWQgdGhlaXIgd2l2ZXMsIGFuZCBjb3VsZCBub3QgYmUgY2hlY2tlZCBpbiB0aGVpciBjYXJlZXIgb2YgcmFwaW5lIGFuZCBtdXJkZXIgdW50aWwgQ2lubmEgYW5kIFNlcnRvcml1cywgYWZ0ZXIgdGFraW5nIGNvdW5zZWwgdG9nZXRoZXIsIGZlbGwgdXBvbiB0aGVtIGFzIHRoZXkgd2VyZSBhc2xlZXAgaW4gdGhlaXIgY2FtcCwgYW5kIHRyYW5zZml4ZWQgdGhlbSBhbGwgd2l0aCBqYXZlbGlucy4gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFNlcnQuIDUuNSIgdmFsaWQ9InllcyI+IAogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXJ0b3JpdXMgPC90aXRsZT4sIHYuIDUgPC9iaWJsPi4gPC9ub3RlPiAKCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gU2VydC4gNS41IiB2YWxpZD0ieWVzIj4gCiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlNlcnRvcml1cyA8L3RpdGxlPiwgdi4gNSA8L2JpYmw+LiA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5TZXJ0b3JpdXMgPC90aXRsZT4sIHYuIDUgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBhcyBpZiBhIGNoYW5nZSBvZiB3aW5kIHdlcmUgY29taW5nIG9uLCBtZXNzZW5nZXJzIGFycml2ZWQgZnJvbSBhbGwgcXVhcnRlcnMgd2l0aCByZXBvcnRzIHRoYXQgU3VsbGEgaGFkIGZpbmlzaGVkIHRoZSB3YXIgd2l0aCBNaXRocmlkYXRlcywgaGFkIHJlY292ZXJlZCB0aGUgcHJvdmluY2VzLCBhbmQgd2FzIHNhaWxpbmcgZm9yIGhvbWUgd2l0aCBhIGxhcmdlIGZvcmNlLiBUaGlzIGdhdmUgYSBicmllZiBzdGF5IGFuZCBhIHNsaWdodCBjZXNzYXRpb24gdG8gdGhlIGNpdHkncyB1bnNwZWFrYWJsZSBldmlscywgc2luY2UgbWVuIHN1cHBvc2VkIHRoYXQgdGhlIHdhciB3YXMgYWxsIGJ1dCB1cG9uIHRoZW0uIEFjY29yZGluZ2x5LCBNYXJpdXMgd2FzIGVsZWN0ZWQgY29uc3VsIGZvciB0aGUgc2V2ZW50aCB0aW1lLCBhbmQgYXNzdW1pbmcgb2ZmaWNlIG9uIHRoZSB2ZXJ5IENhbGVuZHMgb2YgSmFudWFyeSwgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+ODYgQi5DLiA8L25vdGU+IHdoaWNoIGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHllYXIsIGhlIGhhZCBhIGNlcnRhaW4gU2V4dHVzIEx1Y2ludXMgdGhyb3duIGRvd24gdGhlIFRhcnBlaWFuIHJvY2suIFRoaXMgd2FzIHRob3VnaHQgdG8gYmUgYSBtb3N0IHNpZ25pZmljYW50IHBvcnRlbnQgb2YgdGhlIGV2aWxzIHRoYXQgd2VyZSBvbmNlIG1vcmUgdG8gZmFsbCBib3RoIHVwb24gdGhlIHBhcnRpc2FucyBvZiBNYXJpdXMgYW5kIHVwb24gdGhlIGNpdHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+TWVhbndoaWxlLCBhcyBpZiBhIGNoYW5nZSBvZiB3aW5kIHdlcmUgY29taW5nIG9uLCBtZXNzZW5nZXJzIGFycml2ZWQgZnJvbSBhbGwgcXVhcnRlcnMgd2l0aCByZXBvcnRzIHRoYXQgU3VsbGEgaGFkIGZpbmlzaGVkIHRoZSB3YXIgd2l0aCBNaXRocmlkYXRlcywgaGFkIHJlY292ZXJlZCB0aGUgcHJvdmluY2VzLCBhbmQgd2FzIHNhaWxpbmcgZm9yIGhvbWUgd2l0aCBhIGxhcmdlIGZvcmNlLiBUaGlzIGdhdmUgYSBicmllZiBzdGF5IGFuZCBhIHNsaWdodCBjZXNzYXRpb24gdG8gdGhlIGNpdHkncyB1bnNwZWFrYWJsZSBldmlscywgc2luY2UgbWVuIHN1cHBvc2VkIHRoYXQgdGhlIHdhciB3YXMgYWxsIGJ1dCB1cG9uIHRoZW0uIEFjY29yZGluZ2x5LCBNYXJpdXMgd2FzIGVsZWN0ZWQgY29uc3VsIGZvciB0aGUgc2V2ZW50aCB0aW1lLCBhbmQgYXNzdW1pbmcgb2ZmaWNlIG9uIHRoZSB2ZXJ5IENhbGVuZHMgb2YgSmFudWFyeSwgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj44NiBCLkMuIDwvbm90ZT4gd2hpY2ggaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgeWVhciwgaGUgaGFkIGEgY2VydGFpbiBTZXh0dXMgTHVjaW51cyB0aHJvd24gZG93biB0aGUgVGFycGVpYW4gcm9jay4gVGhpcyB3YXMgdGhvdWdodCB0byBiZSBhIG1vc3Qgc2lnbmlmaWNhbnQgcG9ydGVudCBvZiB0aGUgZXZpbHMgdGhhdCB3ZXJlIG9uY2UgbW9yZSB0byBmYWxsIGJvdGggdXBvbiB0aGUgcGFydGlzYW5zIG9mIE1hcml1cyBhbmQgdXBvbiB0aGUgY2l0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IE1hcml1cyBoaW1zZWxmLCBub3cgd29ybiBvdXQgd2l0aCB0b2lscywgZGVsdWdlZCwgYXMgaXQgd2VyZSwgd2l0aCBhbnhpZXRpZXMsIGFuZCB3ZWFyaWVkLCBjb3VsZCBub3Qgc3VzdGFpbiBoaXMgc3Bpcml0cywgd2hpY2ggc2hvb2sgd2l0aGluIGhpbSBhcyBoZSBhZ2FpbiBmYWNlZCB0aGUgb3ZlcnBvd2VyaW5nIHRob3VnaHQgb2YgYSBuZXcgd2FyLCBvZiBmcmVzaCBzdHJ1Z2dsZXMsIG9mIHRlcnJvcnMga25vd24gYnkgZXhwZXJpZW5jZSB0byBiZSBkcmVhZGZ1bCwgYW5kIG9mIHV0dGVyIHdlYXJpbmVzcy4gSGUgcmVmbGVjdGVkLCB0b28sIHRoYXQgaXQgd2FzIG5vdCBPY3Rhdml1cyBvciBNZXJ1bGEgaW4gY29tbWFuZCBvZiBhIHByb21pc2N1b3VzIHRocm9uZyBhbmQgYSBzZWRpdGlvdXMgcmFiYmxlIGFnYWluc3Qgd2hvbSBoZSB3YXMgbm93IHRvIHJ1biB0aGUgaGF6YXJkIG9mIHdhciwgYnV0IHRoYXQgdGhlIGZhbW91cyBTdWxsYSB3YXMgY29taW5nIGFnYWluc3QgaGltLCB0aGUgbWFuIHdobyBoYWQgb25jZSBlamVjdGVkIGhpbSBmcm9tIHRoZSBjb3VudHJ5LCBhbmQgaGFkIG5vdyBzaHV0IE1pdGhyaWRhdGVzIHVwIHRvIHRoZSBzaG9yZXMgb2YgdGhlIEV1eGluZSBTZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvcnR1cmVkIGJ5IHN1Y2ggcmVmbGVjdGlvbnMsIGFuZCBicmluZ2luZyBpbnRvIHJldmlldyBoaXMgbG9uZyB3YW5kZXJpbmcsIGhpcyBmbGlnaHRzLCBhbmQgaGlzIHBlcmlscywgYXMgaGUgd2FzIGRyaXZlbiBvdmVyIGxhbmQgYW5kIHNlYSwgaGUgZmVsbCBpbnRvIGEgc3RhdGUgb2YgZHJlYWRmdWwgZGVzcGFpciwgYW5kIHdhcyBhIHByZXkgdG8gbmlnaHRseSB0ZXJyb3JzIGFuZCBoYXJhc3NpbmcgZHJlYW1zLCB3aGVyZWluIGhlIHdvdWxkIGV2ZXIgc2VlbSB0byBoZWFyIGEgdm9pY2Ugc2F5aW5nOuKAlAoJCQkJCgkJCQk8cXVvdGUgcmVuZD0iYmxvY2txdW90ZSI+CgkJCQkJICAgICAgICAgIDxsPkRyZWFkZnVsLCBpbmRlZWQsIGlzIHRoZSBsaW9uJ3MgbGFpciwgZXZlbiB0aG91Z2ggaXQgPC9sPgoJCQkJCSAgICAgICAgICA8bD5iZSBlbXB0eS48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IAogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGhleGFtZXRlciB2ZXJzZSBvZiB1bmtub3duIGF1dGhvcnNoaXAuIDwvbm90ZT4gCgkJCQkKCQkJCUFuZCBzaW5jZSBhYm92ZSBhbGwgdGhpbmdzIGhlIGRyZWFkZWQgdGhlIHNsZWVwbGVzcyBuaWdodHMsIGhlIGdhdmUgaGltc2VsZiB1cCB0byBkcmlua2luZy1ib3V0cyBhbmQgZHJ1bmtlbm5lc3MgYXQgdW5zZWFzb25hYmxlIGhvdXJzIGFuZCBpbiBhIG1hbm5lciB1bnN1aXRlZCB0byBoaXMgeWVhcnMsIHRyeWluZyB0aHVzIHRvIGluZHVjZSBzbGVlcCBhcyBhIHdheSBvZiBlc2NhcGUgZnJvbSBoaXMgYW54aW91cyB0aG91Z2h0cywgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGZpbmFsbHksIHdoZW4gb25lIGNhbWUgd2l0aCB0aWRpbmdzIGZyb20gdGhlIHNlYSwgZnJlc2ggdGVycm9ycyBmZWxsIHVwb24gaGltLCBwYXJ0bHkgYmVjYXVzZSBoZSBmZWFyZWQgdGhlIGZ1dHVyZSwgYW5kIHBhcnRseSBiZWNhdXNlIGhlIHdhcyB3ZWFyaWVkIHRvIHNhdGlldHkgYnkgdGhlIHByZXNlbnQsIHNvIHRoYXQgaXQgbmVlZGVkIG9ubHkgYSBzbGlnaHQgaW1wdWxzZSB0byB0aHJvdyBoaW0gaW50byBhIHBsZXVyaXN5LCBhcyBQb3NlaWRvbml1cyB0aGUgcGhpbG9zb3BoZXIgcmVsYXRlcywgd2hvIHNheXMgdGhhdCBoZSB3ZW50IGluIHBlcnNvbmFsbHkgYW5kIGNvbnZlcnNlZCB3aXRoIE1hcml1cyBvbiB0aGUgc3ViamVjdHMgb2YgaGlzIGVtYmFzc3kgYWZ0ZXIgTWFyaXVzIGhhZCBmYWxsZW4gaWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYSBjZXJ0YWluIENhaXVzIFBpc28sIGFuIGhpc3RvcmlhbiwgcmVsYXRlcyB0aGF0IE1hcml1cywgd2hpbGUgd2Fsa2luZyBhYm91dCB3aXRoIGhpcyBmcmllbmRzIGFmdGVyIHN1cHBlciwgZmVsbCB0byB0YWxraW5nIGFib3V0IHRoZSBldmVudHMgb2YgaGlzIGxpZmUsIGJlZ2lubmluZyB3aXRoIGhpcyBlYXJsaWVzdCBkYXlzLCBhbmQgYWZ0ZXIgcmVjb3VudGluZyBoaXMgZnJlcXVlbnQgcmV2ZXJzYWxzIG9mIGZvcnR1bmUsIGZyb20gZ29vZCB0byBiYWQgYW5kIGZyb20gYmFkIHRvIGdvb2QsIHNhaWQgdGhhdCBpdCB3YXMgbm90IHRoZSBwYXJ0IG9mIGEgbWFuIG9mIHNlbnNlIHRvIHRydXN0IGhpbXNlbGYgdG8gRm9ydHVuZSBhbnkgbG9uZ2VyOyBhbmQgYWZ0ZXIgdGhpcyB1dHRlcmFuY2UgYmFkZSBoaXMgZnJpZW5kcyBmYXJld2VsbCwga2VwdCBoaXMgYmVkIGZvciBzZXZlbiBkYXlzIGNvbnNlY3V0aXZlbHksIGFuZCBzbyBkaWVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Tb21lLCBob3dldmVyLCBzYXkgdGhhdCBoaXMgYW1iaXRpb3VzIG5hdHVyZSB3YXMgY29tcGxldGVseSByZXZlYWxlZCBkdXJpbmcgaGlzIGlsbG5lc3MgYnkgaGlzIGJlaW5nIHN3ZXB0IGludG8gYSBzdHJhbmdlIGRlbHVzaW9uLiBIZSB0aG91Z2h0IHRoYXQgaGUgaGFkIHRoZSBjb21tYW5kIGluIHRoZSBNaXRocmlkYXRpYyB3YXIsIGFuZCB0aGVuLCBqdXN0IGFzIGhlIHVzZWQgdG8gZG8gaW4gaGlzIGFjdHVhbCBzdHJ1Z2dsZXMsIGhlIHdvdWxkIGluZHVsZ2UgaW4gYWxsIHNvcnRzIG9mIGF0dGl0dWRlcyBhbmQgZ2VzdHVyZXMsIGFjY29tcGFueWluZyB0aGVtIHdpdGggc2hyaWxsIGNyaWVzIGFuZCBmcmVxdWVudCBjYWxscyB0byBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlNvIGZpZXJjZSBhbmQgaW5leG9yYWJsZSB3YXMgdGhlIHBhc3Npb24gZm9yIGRpcmVjdGluZyB0aGF0IHdhciB3aGljaCBoYWQgYmVlbiBpbnN0aWxsZWQgaW50byBoaW0gYnkgaGlzIGVudnkgYW5kIGx1c3Qgb2YgcG93ZXIuIEFuZCB0aGVyZWZvcmUsIHRob3VnaCBoZSBoYWQgbGl2ZWQgdG8gYmUgc2V2ZW50eSB5ZWFycyBvbGQsIGFuZCB3YXMgdGhlIGZpcnN0IG1hbiB0byBiZSBlbGVjdGVkIGNvbnN1bCBmb3IgdGhlIHNldmVudGggdGltZSwgYW5kIHdhcyBwb3NzZXNzZWQgb2YgYSBob3VzZSBhbmQgd2VhbHRoIHdoaWNoIHdvdWxkIGhhdmUgc3VmZmljZWQgZm9yIG1hbnkga2luZ2RvbXMgYXQgb25jZSwgaGUgbGFtZW50ZWQgaGlzIGZvcnR1bmUsIGluIHRoYXQgaGUgd2FzIGR5aW5nIGJlZm9yZSBoZSBoYWQgc2F0aXNmaWVkIGFuZCBjb21wbGV0ZWQgaGlzIGRlc2lyZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBNYXJpdXMgaGltc2VsZiwgbm93IHdvcm4gb3V0IHdpdGggdG9pbHMsIGRlbHVnZWQsIGFzIGl0IHdlcmUsIHdpdGggYW54aWV0aWVzLCBhbmQgd2VhcmllZCwgY291bGQgbm90IHN1c3RhaW4gaGlzIHNwaXJpdHMsIHdoaWNoIHNob29rIHdpdGhpbiBoaW0gYXMgaGUgYWdhaW4gZmFjZWQgdGhlIG92ZXJwb3dlcmluZyB0aG91Z2h0IG9mIGEgbmV3IHdhciwgb2YgZnJlc2ggc3RydWdnbGVzLCBvZiB0ZXJyb3JzIGtub3duIGJ5IGV4cGVyaWVuY2UgdG8gYmUgZHJlYWRmdWwsIGFuZCBvZiB1dHRlciB3ZWFyaW5lc3MuIEhlIHJlZmxlY3RlZCwgdG9vLCB0aGF0IGl0IHdhcyBub3QgT2N0YXZpdXMgb3IgTWVydWxhIGluIGNvbW1hbmQgb2YgYSBwcm9taXNjdW91cyB0aHJvbmcgYW5kIGEgc2VkaXRpb3VzIHJhYmJsZSBhZ2FpbnN0IHdob20gaGUgd2FzIG5vdyB0byBydW4gdGhlIGhhemFyZCBvZiB3YXIsIGJ1dCB0aGF0IHRoZSBmYW1vdXMgU3VsbGEgd2FzIGNvbWluZyBhZ2FpbnN0IGhpbSwgdGhlIG1hbiB3aG8gaGFkIG9uY2UgZWplY3RlZCBoaW0gZnJvbSB0aGUgY291bnRyeSwgYW5kIGhhZCBub3cgc2h1dCBNaXRocmlkYXRlcyB1cCB0byB0aGUgc2hvcmVzIG9mIHRoZSBFdXhpbmUgU2VhLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRvcnR1cmVkIGJ5IHN1Y2ggcmVmbGVjdGlvbnMsIGFuZCBicmluZ2luZyBpbnRvIHJldmlldyBoaXMgbG9uZyB3YW5kZXJpbmcsIGhpcyBmbGlnaHRzLCBhbmQgaGlzIHBlcmlscywgYXMgaGUgd2FzIGRyaXZlbiBvdmVyIGxhbmQgYW5kIHNlYSwgaGUgZmVsbCBpbnRvIGEgc3RhdGUgb2YgZHJlYWRmdWwgZGVzcGFpciwgYW5kIHdhcyBhIHByZXkgdG8gbmlnaHRseSB0ZXJyb3JzIGFuZCBoYXJhc3NpbmcgZHJlYW1zLCB3aGVyZWluIGhlIHdvdWxkIGV2ZXIgc2VlbSB0byBoZWFyIGEgdm9pY2Ugc2F5aW5nOuKAlAoJCQkJCgkJCQk8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5EcmVhZGZ1bCwgaW5kZWVkLCBpcyB0aGUgbGlvbidzIGxhaXIsIGV2ZW4gdGhvdWdoIGl0IDwvbD4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5iZSBlbXB0eS48L2w+CgkJCQkgICAgICAgIDwvcXVvdGU+IAogICAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPkRyZWFkZnVsLCBpbmRlZWQsIGlzIHRoZSBsaW9uJ3MgbGFpciwgZXZlbiB0aG91Z2ggaXQgPC9sPgoJCQkJCSAgICAgICAgICA8bCBjbGFzcz0idHJhbnNsYXRpb24iPmJlIGVtcHR5LjwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGhleGFtZXRlciB2ZXJzZSBvZiB1bmtub3duIGF1dGhvcnNoaXAuIDwvbm90ZT4gCgkJCQkKCQkJCUFuZCBzaW5jZSBhYm92ZSBhbGwgdGhpbmdzIGhlIGRyZWFkZWQgdGhlIHNsZWVwbGVzcyBuaWdodHMsIGhlIGdhdmUgaGltc2VsZiB1cCB0byBkcmlua2luZy1ib3V0cyBhbmQgZHJ1bmtlbm5lc3MgYXQgdW5zZWFzb25hYmxlIGhvdXJzIGFuZCBpbiBhIG1hbm5lciB1bnN1aXRlZCB0byBoaXMgeWVhcnMsIHRyeWluZyB0aHVzIHRvIGluZHVjZSBzbGVlcCBhcyBhIHdheSBvZiBlc2NhcGUgZnJvbSBoaXMgYW54aW91cyB0aG91Z2h0cywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBmaW5hbGx5LCB3aGVuIG9uZSBjYW1lIHdpdGggdGlkaW5ncyBmcm9tIHRoZSBzZWEsIGZyZXNoIHRlcnJvcnMgZmVsbCB1cG9uIGhpbSwgcGFydGx5IGJlY2F1c2UgaGUgZmVhcmVkIHRoZSBmdXR1cmUsIGFuZCBwYXJ0bHkgYmVjYXVzZSBoZSB3YXMgd2VhcmllZCB0byBzYXRpZXR5IGJ5IHRoZSBwcmVzZW50LCBzbyB0aGF0IGl0IG5lZWRlZCBvbmx5IGEgc2xpZ2h0IGltcHVsc2UgdG8gdGhyb3cgaGltIGludG8gYSBwbGV1cmlzeSwgYXMgUG9zZWlkb25pdXMgdGhlIHBoaWxvc29waGVyIHJlbGF0ZXMsIHdobyBzYXlzIHRoYXQgaGUgd2VudCBpbiBwZXJzb25hbGx5IGFuZCBjb252ZXJzZWQgd2l0aCBNYXJpdXMgb24gdGhlIHN1YmplY3RzIG9mIGhpcyBlbWJhc3N5IGFmdGVyIE1hcml1cyBoYWQgZmFsbGVuIGlsbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhIGNlcnRhaW4gQ2FpdXMgUGlzbywgYW4gaGlzdG9yaWFuLCByZWxhdGVzIHRoYXQgTWFyaXVzLCB3aGlsZSB3YWxraW5nIGFib3V0IHdpdGggaGlzIGZyaWVuZHMgYWZ0ZXIgc3VwcGVyLCBmZWxsIHRvIHRhbGtpbmcgYWJvdXQgdGhlIGV2ZW50cyBvZiBoaXMgbGlmZSwgYmVnaW5uaW5nIHdpdGggaGlzIGVhcmxpZXN0IGRheXMsIGFuZCBhZnRlciByZWNvdW50aW5nIGhpcyBmcmVxdWVudCByZXZlcnNhbHMgb2YgZm9ydHVuZSwgZnJvbSBnb29kIHRvIGJhZCBhbmQgZnJvbSBiYWQgdG8gZ29vZCwgc2FpZCB0aGF0IGl0IHdhcyBub3QgdGhlIHBhcnQgb2YgYSBtYW4gb2Ygc2Vuc2UgdG8gdHJ1c3QgaGltc2VsZiB0byBGb3J0dW5lIGFueSBsb25nZXI7IGFuZCBhZnRlciB0aGlzIHV0dGVyYW5jZSBiYWRlIGhpcyBmcmllbmRzIGZhcmV3ZWxsLCBrZXB0IGhpcyBiZWQgZm9yIHNldmVuIGRheXMgY29uc2VjdXRpdmVseSwgYW5kIHNvIGRpZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGhpcyBhbWJpdGlvdXMgbmF0dXJlIHdhcyBjb21wbGV0ZWx5IHJldmVhbGVkIGR1cmluZyBoaXMgaWxsbmVzcyBieSBoaXMgYmVpbmcgc3dlcHQgaW50byBhIHN0cmFuZ2UgZGVsdXNpb24uIEhlIHRob3VnaHQgdGhhdCBoZSBoYWQgdGhlIGNvbW1hbmQgaW4gdGhlIE1pdGhyaWRhdGljIHdhciwgYW5kIHRoZW4sIGp1c3QgYXMgaGUgdXNlZCB0byBkbyBpbiBoaXMgYWN0dWFsIHN0cnVnZ2xlcywgaGUgd291bGQgaW5kdWxnZSBpbiBhbGwgc29ydHMgb2YgYXR0aXR1ZGVzIGFuZCBnZXN0dXJlcywgYWNjb21wYW55aW5nIHRoZW0gd2l0aCBzaHJpbGwgY3JpZXMgYW5kIGZyZXF1ZW50IGNhbGxzIHRvIGJhdHRsZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['45.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlNvIGZpZXJjZSBhbmQgaW5leG9yYWJsZSB3YXMgdGhlIHBhc3Npb24gZm9yIGRpcmVjdGluZyB0aGF0IHdhciB3aGljaCBoYWQgYmVlbiBpbnN0aWxsZWQgaW50byBoaW0gYnkgaGlzIGVudnkgYW5kIGx1c3Qgb2YgcG93ZXIuIEFuZCB0aGVyZWZvcmUsIHRob3VnaCBoZSBoYWQgbGl2ZWQgdG8gYmUgc2V2ZW50eSB5ZWFycyBvbGQsIGFuZCB3YXMgdGhlIGZpcnN0IG1hbiB0byBiZSBlbGVjdGVkIGNvbnN1bCBmb3IgdGhlIHNldmVudGggdGltZSwgYW5kIHdhcyBwb3NzZXNzZWQgb2YgYSBob3VzZSBhbmQgd2VhbHRoIHdoaWNoIHdvdWxkIGhhdmUgc3VmZmljZWQgZm9yIG1hbnkga2luZ2RvbXMgYXQgb25jZSwgaGUgbGFtZW50ZWQgaGlzIGZvcnR1bmUsIGluIHRoYXQgaGUgd2FzIGR5aW5nIGJlZm9yZSBoZSBoYWQgc2F0aXNmaWVkIGFuZCBjb21wbGV0ZWQgaGlzIGRlc2lyZXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlBsYXRvLCBob3dldmVyLCB3aGVuIGhlIHdhcyBub3cgYXQgdGhlIHBvaW50IG9mIGRlYXRoLCBsYXVkZWQgaGlzIGd1YXJkaWFuIGdlbml1cyBhbmQgRm9ydHVuZSBiZWNhdXNlLCB0byBiZWdpbiB3aXRoLCBoZSBoYWQgYmVlbiBib3JuIGEgbWFuIGFuZCBub3QgYW4gaXJyYXRpb25hbCBhbmltYWw7IGFnYWluLCBiZWNhdXNlIGhlIHdhcyBhIEdyZWVrIGFuZCBub3QgYSBCYXJiYXJpYW47IGFuZCBzdGlsbCBhZ2FpbiwgYmVjYXVzZSBoaXMgYmlydGggaGFkIGZhbGxlbiBpbiB0aGUgdGltZXMgb2YgU29jcmF0ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhleSBzYXkgdGhhdCBBbnRpcGF0ZXIgb2YgVGFyc3VzLCB3aGVuIGhlIHdhcyBpbiBsaWtlIG1hbm5lciBuZWFyIGhpcyBlbmQgYW5kIHdhcyBlbnVtZXJhdGluZyB0aGUgYmxlc3NpbmdzIG9mIGhpcyBsaWZlLCBkaWQgbm90IGZvcmdldCB0byBtZW50aW9uIGhpcyBwcm9zcGVyb3VzIHZveWFnZSBmcm9tIGhvbWUgdG8gQXRoZW5zLCBqdXN0IGFzIHRob3VnaCBoZSB0aG91Z2h0IHRoYXQgZXZlcnkgZ2lmdCBvZiBhIGJlbmV2b2xlbnQgRm9ydHVuZSBjYWxsZWQgZm9yIGdyZWF0IGdyYXRpdHVkZSwgYW5kIGtlcHQgaXQgdG8gdGhlIGxhc3QgaW4gaGlzIG1lbW9yeSwgd2hpY2ggaXMgdGhlIG1vc3Qgc2VjdXJlIHN0b3JlaG91c2Ugb2YgYmxlc3NpbmdzIGZvciBhIG1hbi4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VW5taW5kZnVsIGFuZCB0aG91Z2h0bGVzcyBwZXJzb25zLCBvbiB0aGUgY29udHJhcnksIGxldCBhbGwgdGhhdCBoYXBwZW5zIHRvIHRoZW0gc2xpcCBhd2F5IGFzIHRpbWUgZ29lcyBvbjsgdGhlcmVmb3JlLCBzaW5jZSB0aGV5IGRvIG5vdCBob2xkIG9yIGtlZXAgYW55dGhpbmcsIHRoZXkgYXJlIGFsd2F5cyBlbXB0eSBvZiBibGVzc2luZ3MsIGJ1dCBmdWxsIG9mIGhvcGVzLCBhbmQgYXJlIGxvb2tpbmcgYXdheSB0byB0aGUgZnV0dXJlIHdoaWxlIHRoZXkgbmVnbGVjdCB0aGUgcHJlc2VudC4gQW5kIHlldCB0aGUgZnV0dXJlIG1heSBiZSBwcmV2ZW50ZWQgYnkgRm9ydHVuZSwgd2hpbGUgdGhlIHByZXNlbnQgY2Fubm90IGJlIHRha2VuIGF3YXk7IAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm5ldmVydGhlbGVzcyB0aGVzZSBtZW4gY2FzdCBhc2lkZSB0aGUgcHJlc2VudCBnaWZ0IG9mIEZvcnR1bmUgYXMgc29tZXRoaW5nIGFsaWVuIHRvIHRoZW0sIHdoaWxlIHRoZXkgZHJlYW0gb2YgdGhlIGZ1dHVyZSBhbmQgaXRzIHVuY2VydGFpbnRpZXMuIEFuZCB0aGlzIGlzIG5hdHVyYWwuIEZvciB0aGV5IGFzc2VtYmxlIGFuZCBoZWFwIHRvZ2V0aGVyIHRoZSBleHRlcm5hbCBibGVzc2luZ3Mgb2YgbGlmZSBiZWZvcmUgcmVhc29uIGFuZCBlZHVjYXRpb24gaGF2ZSBlbmFibGVkIHRoZW0gdG8gYnVpbGQgYW55IGZvdW5kYXRpb24gYW5kIGJhc2VtZW50IGZvciB0aGVzZSB0aGluZ3MsIGFuZCB0aGVyZWZvcmUgdGhleSBjYW5ub3Qgc2F0aXNmeSB0aGUgaW5zYXRpYWJsZSBhcHBldGl0ZSBvZiB0aGVpciBzb3Vscy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+UGxhdG8sIGhvd2V2ZXIsIHdoZW4gaGUgd2FzIG5vdyBhdCB0aGUgcG9pbnQgb2YgZGVhdGgsIGxhdWRlZCBoaXMgZ3VhcmRpYW4gZ2VuaXVzIGFuZCBGb3J0dW5lIGJlY2F1c2UsIHRvIGJlZ2luIHdpdGgsIGhlIGhhZCBiZWVuIGJvcm4gYSBtYW4gYW5kIG5vdCBhbiBpcnJhdGlvbmFsIGFuaW1hbDsgYWdhaW4sIGJlY2F1c2UgaGUgd2FzIGEgR3JlZWsgYW5kIG5vdCBhIEJhcmJhcmlhbjsgYW5kIHN0aWxsIGFnYWluLCBiZWNhdXNlIGhpcyBiaXJ0aCBoYWQgZmFsbGVuIGluIHRoZSB0aW1lcyBvZiBTb2NyYXRlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbmRlZWQgdGhleSBzYXkgdGhhdCBBbnRpcGF0ZXIgb2YgVGFyc3VzLCB3aGVuIGhlIHdhcyBpbiBsaWtlIG1hbm5lciBuZWFyIGhpcyBlbmQgYW5kIHdhcyBlbnVtZXJhdGluZyB0aGUgYmxlc3NpbmdzIG9mIGhpcyBsaWZlLCBkaWQgbm90IGZvcmdldCB0byBtZW50aW9uIGhpcyBwcm9zcGVyb3VzIHZveWFnZSBmcm9tIGhvbWUgdG8gQXRoZW5zLCBqdXN0IGFzIHRob3VnaCBoZSB0aG91Z2h0IHRoYXQgZXZlcnkgZ2lmdCBvZiBhIGJlbmV2b2xlbnQgRm9ydHVuZSBjYWxsZWQgZm9yIGdyZWF0IGdyYXRpdHVkZSwgYW5kIGtlcHQgaXQgdG8gdGhlIGxhc3QgaW4gaGlzIG1lbW9yeSwgd2hpY2ggaXMgdGhlIG1vc3Qgc2VjdXJlIHN0b3JlaG91c2Ugb2YgYmxlc3NpbmdzIGZvciBhIG1hbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['46.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlVubWluZGZ1bCBhbmQgdGhvdWdodGxlc3MgcGVyc29ucywgb24gdGhlIGNvbnRyYXJ5LCBsZXQgYWxsIHRoYXQgaGFwcGVucyB0byB0aGVtIHNsaXAgYXdheSBhcyB0aW1lIGdvZXMgb247IHRoZXJlZm9yZSwgc2luY2UgdGhleSBkbyBub3QgaG9sZCBvciBrZWVwIGFueXRoaW5nLCB0aGV5IGFyZSBhbHdheXMgZW1wdHkgb2YgYmxlc3NpbmdzLCBidXQgZnVsbCBvZiBob3BlcywgYW5kIGFyZSBsb29raW5nIGF3YXkgdG8gdGhlIGZ1dHVyZSB3aGlsZSB0aGV5IG5lZ2xlY3QgdGhlIHByZXNlbnQuIEFuZCB5ZXQgdGhlIGZ1dHVyZSBtYXkgYmUgcHJldmVudGVkIGJ5IEZvcnR1bmUsIHdoaWxlIHRoZSBwcmVzZW50IGNhbm5vdCBiZSB0YWtlbiBhd2F5OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['46.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPm5ldmVydGhlbGVzcyB0aGVzZSBtZW4gY2FzdCBhc2lkZSB0aGUgcHJlc2VudCBnaWZ0IG9mIEZvcnR1bmUgYXMgc29tZXRoaW5nIGFsaWVuIHRvIHRoZW0sIHdoaWxlIHRoZXkgZHJlYW0gb2YgdGhlIGZ1dHVyZSBhbmQgaXRzIHVuY2VydGFpbnRpZXMuIEFuZCB0aGlzIGlzIG5hdHVyYWwuIEZvciB0aGV5IGFzc2VtYmxlIGFuZCBoZWFwIHRvZ2V0aGVyIHRoZSBleHRlcm5hbCBibGVzc2luZ3Mgb2YgbGlmZSBiZWZvcmUgcmVhc29uIGFuZCBlZHVjYXRpb24gaGF2ZSBlbmFibGVkIHRoZW0gdG8gYnVpbGQgYW55IGZvdW5kYXRpb24gYW5kIGJhc2VtZW50IGZvciB0aGVzZSB0aGluZ3MsIGFuZCB0aGVyZWZvcmUgdGhleSBjYW5ub3Qgc2F0aXNmeSB0aGUgaW5zYXRpYWJsZSBhcHBldGl0ZSBvZiB0aGVpciBzb3Vscy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+U28sIHRoZW4sIE1hcml1cyBkaWVkLCBzZXZlbnRlZW4gZGF5cyBhZnRlciBlbnRlcmluZyB1cG9uIGhpcyBzZXZlbnRoIGNvbnN1bHNoaXAuIEFuZCBpbW1lZGlhdGVseSBSb21lIHdhcyBmaWxsZWQgd2l0aCBncmVhdCByZWpvaWNpbmcgYW5kIGEgY29uZmlkZW50IGhvcGUgdGhhdCBzaGUgd2FzIHJpZCBvZiBhIGdyaWV2b3VzIHR5cmFubnk7IGJ1dCBpbiBhIGZldyBkYXlzIHRoZSBwZW9wbGUgcGVyY2VpdmVkIHRoYXQgdGhleSBoYWQgZ290IGEgbmVydmUgYW5kIHZpZ29yb3VzIG1hc3RlciBpbiBleGNoYW5nZSBmb3IgdGhlIG9sZCBvbmU7IHN1Y2ggYml0dGVybmVzcyBhbmQgY3J1ZWx0eSBkaWQgdGhlIHlvdW5nZXIgTWFyaXVzIGRpc3BsYXksIHB1dHRpbmcgdG8gZGVhdGggdGhlIGJlc3QgYW5kIG1vc3QgZXN0ZWVtZWQgY2l0aXplbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkhlIGdvdCB0aGUgcmVwdXRhdGlvbiBvZiBiZWluZyBib2xkIGFuZCBmb25kIG9mIGRhbmdlciBpbiBmaWdodGluZyBoaXMgZW5lbWllcywgYW5kIGluIHRoZSBiZWdpbm5pbmcgd2FzIGNhbGxlZCBhIHNvbiBvZiBNYXJzOyBidXQgaGlzIGRlZWRzIHNvb24gc2hvd2VkIHdoYXQgaGUgcmVhbGx5IHdhcywgYW5kIGhlIHdhcyBjYWxsZWQgaW5zdGVhZCBhIHNvbiBvZiBWZW51cy4gQW5kIGZpbmFsbHkgaGUgd2FzIHNodXQgdXAgaW4gUHJhZW5lc3RlIGJ5IFN1bGxhLCBhbmQgYWZ0ZXIgbWFueSB2YWluIGF0dGVtcHRzIHRvIHNhdmUgaGlzIGxpZmUsIHdoZW4gdGhlIGNpdHkgd2FzIGNhcHR1cmVkIGFuZCBoZSBjb3VsZCBub3QgZXNjYXBlLCBoZSBzbGV3IGhpbXNlbGYuIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFN1bGwuIDMyLjEiIHZhbGlkPSJ5ZXMiPiAKICAgICAgICAgICAgICAgICAgPHRpdGxlPlN1bGxhIDwvdGl0bGU+LCB4eHhpaS4gMSA8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['46.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvLCB0aGVuLCBNYXJpdXMgZGllZCwgc2V2ZW50ZWVuIGRheXMgYWZ0ZXIgZW50ZXJpbmcgdXBvbiBoaXMgc2V2ZW50aCBjb25zdWxzaGlwLiBBbmQgaW1tZWRpYXRlbHkgUm9tZSB3YXMgZmlsbGVkIHdpdGggZ3JlYXQgcmVqb2ljaW5nIGFuZCBhIGNvbmZpZGVudCBob3BlIHRoYXQgc2hlIHdhcyByaWQgb2YgYSBncmlldm91cyB0eXJhbm55OyBidXQgaW4gYSBmZXcgZGF5cyB0aGUgcGVvcGxlIHBlcmNlaXZlZCB0aGF0IHRoZXkgaGFkIGdvdCBhIG5lcnZlIGFuZCB2aWdvcm91cyBtYXN0ZXIgaW4gZXhjaGFuZ2UgZm9yIHRoZSBvbGQgb25lOyBzdWNoIGJpdHRlcm5lc3MgYW5kIGNydWVsdHkgZGlkIHRoZSB5b3VuZ2VyIE1hcml1cyBkaXNwbGF5LCBwdXR0aW5nIHRvIGRlYXRoIHRoZSBiZXN0IGFuZCBtb3N0IGVzdGVlbWVkIGNpdGl6ZW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
