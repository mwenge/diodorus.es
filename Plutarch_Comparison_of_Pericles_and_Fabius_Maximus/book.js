var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoZXJlYXMgdGhlIGFjaGlldmVtZW50cyBvZiBGYWJpdXMsIHdobyB0b29rIGNoYXJnZSBvZiBoaXMgY2l0eSBhdCB0aW1lcyBvZiB0aGUgZ3JlYXRlc3QgZGlzZ3JhY2UgYW5kIG1pc2ZvcnR1bmUsIGRpZCBub3QgbWFpbnRhaW4gaGVyIHNhZmVseSBpbiBoZXIgcHJvc3Blcml0eSwgYnV0IHJhdGhlciBsaWZ0ZWQgaGVyIG91dCBvZiBkaXNhc3RlciBpbnRvIGEgYmV0dGVyIHN0YXRlLiBBbmQgYmVzaWRlcywgdGhlIHZpY3RvcmllcyBvZiBDaW1vbiwgYW5kIHRoZSB0cm9waGllcyBvZiBNeXJvbmlkZXMgYW5kIExlb2NyYXRlcywgYW5kIHRoZSBtYW55IGdyZWF0IHN1Y2Nlc3NlcyBvZiBUb2xtaWRlcywgbWFkZSBpdCB0aGUgcHJpdmlsZWdlIG9mIFBlcmljbGVzLCBkdXJpbmcgaGlzIGFkbWluaXN0cmF0aW9uLCB0byBlbnJpY2ggdGhlIGNpdHkgd2l0aCBob2xpZGF5cyBhbmQgcHVibGljIGZlc3RpdmFscywgcmF0aGVyIHRoYW4gdG8gZW5sYXJnZSBhbmQgcHJvdGVjdCBoZXIgZG9taW5pb24gYnkgd2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cywgb24gdGhlIGNvbnRyYXJ5LCB3aG9zZSBleWVzIGJlaGVsZCBtYW55IGRpc2dyYWNlZnVsIGRlZmVhdHMsIG1hbnkgY3J1ZWwgZGVhdGhzIG9mIGltcGVyYXRvcnMgYW5kIGdlbmVyYWxzLCBsYWtlcyBhbmQgcGxhaW5zIGFuZCBmb3Jlc3RzIGZpbGxlZCB3aXRoIHNsYWluIGFybWllcywgYW5kIHJpdmVycyBmbG93aW5nIHdpdGggYmxvb2QgYW5kIHNsYXVnaHRlciB0byB0aGUgc2VhLCBwdXQgaGVscGluZyBhbmQgc3VwcG9ydGluZyBoYW5kcyB0byBoaXMgY2l0eSwgYW5kIGJ5IGhpcyBmaXJtIGFuZCBpbmRlcGVuZGVudCBjb3Vyc2UsIHByZXZlbnRlZCBoZXIgZnJvbSB1dHRlciBleGhhdXN0aW9uIHRocm91Z2ggdGhlIGRpc2FzdGVycyBicm91Z2h0IHVwb24gaGVyIGJ5IG90aGVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgaXQgd291bGQgYXBwZWFyIHRvIGJlIG5vdCBzbyBkaWZmaWN1bHQgYSB0YXNrIHRvIG1hbmFnZSBhIGNpdHkgd2hlbiBzaGUgaXMgaHVtYmxlZCBieSBhZHZlcnNpdHkgYW5kIHJlbmRlcmVkIG9iZWRpZW50IHRvIHdpc2RvbSBieSBuZWNlc3NpdHksIGFzIGl0IGlzIHRvIGJyaWRsZSBhIHBlb3BsZSB3aGljaCBpcyBleGFsdGVkIGJ5IHByb3NwZXJpdHkgYW5kIHN3b2xsZW4gd2l0aCBpbnNvbGVuY2UgYW5kIGJvbGRuZXNzLCB3aGljaCBpcyBwcmVjaXNlbHkgdGhlIHdheSBpbiB3aGljaCBQZXJpY2xlcyBnb3Zlcm5lZCBBdGhlbnMuIFN0aWxsLCB0aGUgbWFnbml0dWRlIGFuZCBtdWx0aXR1ZGUgb2YgZXZpbHMgd2hpY2ggYWZmbGljdGVkIHRoZSBSb21hbnMgcmV2ZWFsZWQgdGhlIHN0ZWFkZmFzdCBwdXJwb3NlIGFuZCB0aGUgZ3JlYXRuZXNzIG9mIHRoZSBtYW4gd2hvIHdhcyBub3QgY29uZm91bmRlZCBieSB0aGVtLCBhbmQgd291bGQgbm90IGFiYW5kb24gaGlzIG93biBwcmluY2lwbGVzIG9mIGFjdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PdmVyIGFnYWluc3QgdGhlIGNhcHR1cmUgb2YgU2Ftb3MgYnkgUGVyaWNsZXMsIGl0IGlzIGZhaXIgdG8gc2V0IHRoZSB0YWtpbmcgb2YgVGFyZW50dW0gYnkgRmFiaXVzLCBhbmQgYWdhaW5zdCBFdWJvZWEsIHRoZSBjaXRpZXMgb2YgQ2FtcGFuaWEgKENhcHVhIGl0c2VsZiB3YXMgcmVkdWNlZCBieSB0aGUgY29uc3VscyBGdWx2aXVzIGFuZCBBcHBpdXMpLiBJbiBvcGVuIGFuZCByZWd1bGFyIGJhdHRsZSwgRmFiaXVzIHNlZW1zIHRvIGhhdmUgd29uIG5vIHZpY3RvcnkgZXhjZXB0IHRoYXQgZm9yIHdoaWNoIGhlIGNlbGVicmF0ZWQgaGlzIGZpcnN0IHRyaXVtcGg8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMi4xIiB2YWxpZD0ieWVzIiAvPmNoYXB0ZXIgaWkuIDEuPC9ub3RlPjsgd2hlcmVhcyBQZXJpY2xlcyBzZXQgdXAgbmluZSB0cm9waGllcyBmb3IgaGlzIHdhcnMgb24gbGFuZCBhbmQgc2VhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBubyBzdWNoIGV4cGxvaXQgaXMgcmVjb3JkZWQgb2YgUGVyaWNsZXMgYXMgdGhhdCBieSB3aGljaCBGYWJpdXMgc25hdGNoZWQgTWludWNpdXMgZnJvbSB0aGUgaGFuZHMgb2YgSGFubmliYWwsIGFuZCBwcmVzZXJ2ZWQgYW4gZW50aXJlIFJvbWFuIGFybXk7IHRoZSBkZWVkIHdhcyBjZXJ0YWlubHkgYSBub2JsZSBvbmUsIGFuZCBzaG93ZWQgYSBjb21iaW5hdGlvbiBvZiB2YWxvdXIsIHdpc2RvbSwgYW5kIGtpbmRuZXNzIGFsaWtlLiBTbywgb24gdGhlIG90aGVyIGhhbmQsIG5vIHN1Y2ggZGVmZWF0IGlzIHJlY29yZGVkIG9mIFBlcmljbGVzIGFzIHRoYXQgd2hpY2ggRmFiaXVzIHN1ZmZlcmVkIHdoZW4gaGUgd2FzIG91dHdpdHRlZCBieSBIYW5uaWJhbCdzIHN0cmF0YWdlbSBvZiB0aGUgb3hlbjsgaGUgaGFkIGhpcyBlbmVteSBpbXByaXNvbmVkIGluIHRoZSBuYXJyb3cgZGVmaWxlIHdoaWNoIGhlIGhhZCBlbnRlcmVkIG9mIGhpcyBvd24gYWNjb3JkIGFuZCBhY2NpZGVudGFsbHksIGJ1dCBsZXQgaGltIHNsaXAgYXdheSB1bm5vdGljZWQgaW4gdGhlIG5pZ2h0LCBmb3JjZSBoaXMgd2F5IG91dCB3aGVuIGRheSBjYW1lLCB0YWtlIGFkdmFudGFnZSBvZiBoaXMgYWR2ZXJzYXJ5J3MgZGVsYXlzLCBhbmQgc28gY29ucXVlciBoaXMgY2FwdG9yLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaWYgaXQgaXMgdGhlIHBhcnQgb2YgYSBnb29kIGdlbmVyYWwgbm90IG9ubHkgdG8gaW1wcm92ZSB0aGUgcHJlc2VudCwgYnV0IGFsc28gdG8ganVkZ2UgY29ycmVjdGx5IG9mIHRoZSBmdXR1cmUsIHRoZW4gUGVyaWNsZXMgd2FzIHN1Y2ggYSBnZW5lcmFsLCBmb3IgdGhlIHdhciB3aGljaCB0aGUgQXRoZW5pYW5zIHdlcmUgd2FnaW5nIGNhbWUgdG8gYW4gZW5kIGFzIGhlIGhhZCBmb3Jla25vd24gYW5kIGZvcmV0b2xkOyBmb3IgdGhleSB1bmRlcnRvb2sgdG9vIG11Y2ggYW5kIGxvc3QgdGhlaXIgZW1waXJlLiBCdXQgaXQgd2FzIGNvbnRyYXJ5IHRvIHRoZSBwcmluY2lwbGVzIG9mIEZhYml1cyB0aGF0IHRoZSBSb21hbnMgc2VudCBTY2lwaW8gYWdhaW5zdCBDYXJ0aGFnZSBhbmQgd2VyZSBjb21wbGV0ZWx5IHZpY3RvcmlvdXMsIG5vdCB0aHJvdWdoIHRoZSBmYXZvdXIgb2YgZm9ydHVuZSwgYnV0IHRocm91Z2ggdGhlIHdpc2RvbSBhbmQgdmFsb3VyIG9mIHRoZSBnZW5lcmFsIHdobyB1dHRlcmx5IGNvbnF1ZXJlZCB0aGVpciBlbmVtaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZWZvcmUgdGhlIHZlcnkgZGlzYXN0ZXJzIG9mIGhpcyBjb3VudHJ5IGJlYXIgd2l0bmVzcyB0byB0aGUgc2FnYWNpdHkgb2YgUGVyaWNsZXM7IHdoaWxlIHRoZSBzdWNjZXNzZXMgb2YgdGhlIFJvbWFucyBwcm92ZWQgdGhhdCBGYWJpdXMgd2FzIGNvbXBsZXRlbHkgaW4gdGhlIHdyb25nLiBBbmQgaXQgaXMganVzdCBhcyBncmVhdCBhIGZhaWxpbmcgaW4gYSBnZW5lcmFsIHRvIGludm9sdmUgaGltc2VsZiBpbiBkaXNhc3RlciBmcm9tIHdhbnQgb2YgZm9yZXNpZ2h0LCBhcyBpdCBpcyB0byB0aHJvdyBhd2F5IGFuIG9wcG9ydHVuaXR5IGZvciBzdWNjZXNzIGZyb20gd2FudCBvZiBjb25maWRlbmNlLiBJbmV4cGVyaWVuY2UsIGl0IHdvdWxkIHNlZW0sIGlzIHRvIGJsYW1lIGluIGVhY2ggY2FzZSwgd2hpY2ggYm90aCBlbmdlbmRlcnMgcmFzaG5lc3MgaW4gYSBtYW4sIGFuZCByb2JzIGEgbWFuIG9mIGNvdXJhZ2UuIFNvIG11Y2ggZm9yIHRoZWlyIG1pbGl0YXJ5IGFiaWxpdGllcy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PdmVyIGFnYWluc3QgdGhlIGNhcHR1cmUgb2YgU2Ftb3MgYnkgUGVyaWNsZXMsIGl0IGlzIGZhaXIgdG8gc2V0IHRoZSB0YWtpbmcgb2YgVGFyZW50dW0gYnkgRmFiaXVzLCBhbmQgYWdhaW5zdCBFdWJvZWEsIHRoZSBjaXRpZXMgb2YgQ2FtcGFuaWEgKENhcHVhIGl0c2VsZiB3YXMgcmVkdWNlZCBieSB0aGUgY29uc3VscyBGdWx2aXVzIGFuZCBBcHBpdXMpLiBJbiBvcGVuIGFuZCByZWd1bGFyIGJhdHRsZSwgRmFiaXVzIHNlZW1zIHRvIGhhdmUgd29uIG5vIHZpY3RvcnkgZXhjZXB0IHRoYXQgZm9yIHdoaWNoIGhlIGNlbGVicmF0ZWQgaGlzIGZpcnN0IHRyaXVtcGg8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDIuMSIgdmFsaWQ9InllcyIgLz5jaGFwdGVyIGlpLiAxLjwvbm90ZT47IHdoZXJlYXMgUGVyaWNsZXMgc2V0IHVwIG5pbmUgdHJvcGhpZXMgZm9yIGhpcyB3YXJzIG9uIGxhbmQgYW5kIHNlYS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDIuMSIgdmFsaWQ9InllcyIgLz5jaGFwdGVyIGlpLiAxLjwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIG5vIHN1Y2ggZXhwbG9pdCBpcyByZWNvcmRlZCBvZiBQZXJpY2xlcyBhcyB0aGF0IGJ5IHdoaWNoIEZhYml1cyBzbmF0Y2hlZCBNaW51Y2l1cyBmcm9tIHRoZSBoYW5kcyBvZiBIYW5uaWJhbCwgYW5kIHByZXNlcnZlZCBhbiBlbnRpcmUgUm9tYW4gYXJteTsgdGhlIGRlZWQgd2FzIGNlcnRhaW5seSBhIG5vYmxlIG9uZSwgYW5kIHNob3dlZCBhIGNvbWJpbmF0aW9uIG9mIHZhbG91ciwgd2lzZG9tLCBhbmQga2luZG5lc3MgYWxpa2UuIFNvLCBvbiB0aGUgb3RoZXIgaGFuZCwgbm8gc3VjaCBkZWZlYXQgaXMgcmVjb3JkZWQgb2YgUGVyaWNsZXMgYXMgdGhhdCB3aGljaCBGYWJpdXMgc3VmZmVyZWQgd2hlbiBoZSB3YXMgb3V0d2l0dGVkIGJ5IEhhbm5pYmFsJ3Mgc3RyYXRhZ2VtIG9mIHRoZSBveGVuOyBoZSBoYWQgaGlzIGVuZW15IGltcHJpc29uZWQgaW4gdGhlIG5hcnJvdyBkZWZpbGUgd2hpY2ggaGUgaGFkIGVudGVyZWQgb2YgaGlzIG93biBhY2NvcmQgYW5kIGFjY2lkZW50YWxseSwgYnV0IGxldCBoaW0gc2xpcCBhd2F5IHVubm90aWNlZCBpbiB0aGUgbmlnaHQsIGZvcmNlIGhpcyB3YXkgb3V0IHdoZW4gZGF5IGNhbWUsIHRha2UgYWR2YW50YWdlIG9mIGhpcyBhZHZlcnNhcnkncyBkZWxheXMsIGFuZCBzbyBjb25xdWVyIGhpcyBjYXB0b3IuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiBpdCBpcyB0aGUgcGFydCBvZiBhIGdvb2QgZ2VuZXJhbCBub3Qgb25seSB0byBpbXByb3ZlIHRoZSBwcmVzZW50LCBidXQgYWxzbyB0byBqdWRnZSBjb3JyZWN0bHkgb2YgdGhlIGZ1dHVyZSwgdGhlbiBQZXJpY2xlcyB3YXMgc3VjaCBhIGdlbmVyYWwsIGZvciB0aGUgd2FyIHdoaWNoIHRoZSBBdGhlbmlhbnMgd2VyZSB3YWdpbmcgY2FtZSB0byBhbiBlbmQgYXMgaGUgaGFkIGZvcmVrbm93biBhbmQgZm9yZXRvbGQ7IGZvciB0aGV5IHVuZGVydG9vayB0b28gbXVjaCBhbmQgbG9zdCB0aGVpciBlbXBpcmUuIEJ1dCBpdCB3YXMgY29udHJhcnkgdG8gdGhlIHByaW5jaXBsZXMgb2YgRmFiaXVzIHRoYXQgdGhlIFJvbWFucyBzZW50IFNjaXBpbyBhZ2FpbnN0IENhcnRoYWdlIGFuZCB3ZXJlIGNvbXBsZXRlbHkgdmljdG9yaW91cywgbm90IHRocm91Z2ggdGhlIGZhdm91ciBvZiBmb3J0dW5lLCBidXQgdGhyb3VnaCB0aGUgd2lzZG9tIGFuZCB2YWxvdXIgb2YgdGhlIGdlbmVyYWwgd2hvIHV0dGVybHkgY29ucXVlcmVkIHRoZWlyIGVuZW1pZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlZm9yZSB0aGUgdmVyeSBkaXNhc3RlcnMgb2YgaGlzIGNvdW50cnkgYmVhciB3aXRuZXNzIHRvIHRoZSBzYWdhY2l0eSBvZiBQZXJpY2xlczsgd2hpbGUgdGhlIHN1Y2Nlc3NlcyBvZiB0aGUgUm9tYW5zIHByb3ZlZCB0aGF0IEZhYml1cyB3YXMgY29tcGxldGVseSBpbiB0aGUgd3JvbmcuIEFuZCBpdCBpcyBqdXN0IGFzIGdyZWF0IGEgZmFpbGluZyBpbiBhIGdlbmVyYWwgdG8gaW52b2x2ZSBoaW1zZWxmIGluIGRpc2FzdGVyIGZyb20gd2FudCBvZiBmb3Jlc2lnaHQsIGFzIGl0IGlzIHRvIHRocm93IGF3YXkgYW4gb3Bwb3J0dW5pdHkgZm9yIHN1Y2Nlc3MgZnJvbSB3YW50IG9mIGNvbmZpZGVuY2UuIEluZXhwZXJpZW5jZSwgaXQgd291bGQgc2VlbSwgaXMgdG8gYmxhbWUgaW4gZWFjaCBjYXNlLCB3aGljaCBib3RoIGVuZ2VuZGVycyByYXNobmVzcyBpbiBhIG1hbiwgYW5kIHJvYnMgYSBtYW4gb2YgY291cmFnZS4gU28gbXVjaCBmb3IgdGhlaXIgbWlsaXRhcnkgYWJpbGl0aWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGVpciBzdGF0ZXNtYW5zaGlwLCB0aGUgUGVsb3Bvbm5lc2lhbiB3YXIgd2FzIGEgZ3JvdW5kIG9mIGdyZWF0IGNvbXBsYWludCBhZ2FpbnN0IFBlcmljbGVzLiBGb3IgaXQgaXMgc2FpZCB0byBoYXZlIGJlZW4gYnJvdWdodCBvbiBieSBoaXMgY29udGVudGlvbiB0aGF0IG5vIGNvbmNlc3Npb24gc2hvdWxkIGJlIG1hZGUgdG8gU3BhcnRhLiBJIHRoaW5rLCBob3dldmVyLCB0aGF0IG5vdCBldmVuIEZhYml1cyBNYXhpbXVzIHdvdWxkIGhhdmUgbWFkZSBhbnkgY29uY2Vzc2lvbnMgdG8gQ2FydGhhZ2UsIGJ1dCB3b3VsZCBoYXZlIG5vYmx5IHVuZGVyZ29uZSB0aGUgcGVyaWwgbmVlZGZ1bCB0byBtYWludGFpbiB0aGUgUm9tYW4gc3VwcmVtYWN5LiBOZXZlcnRoZWxlc3MsIHRoZSBjb3VydGVvdXMgYW5kIGdlbnRsZSBjb25kdWN0IG9mIEZhYml1cyB0b3dhcmRzIE1pbnVjaXVzIGNvbnRyYXN0cyBmb3JjaWJseSB3aXRoIHRoZSBmYWN0aW91cyBvcHBvc2l0aW9uIG9mIFBlcmljbGVzIHRvIENpbW9uIGFuZCBUaHVjeWRpZGVzLCB3aG8gd2VyZSBib3RoIGdvb2QgYW5kIHRydWUgbWVuIGFuZCBvZiB0aGUgaGlnaGVzdCBiaXJ0aCwgYW5kIHlldCB3ZXJlIHN1YmplY3RlZCBieSBoaW0gdG8gb3N0cmFjaXNtIGFuZCBiYW5pc2htZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUGVyaWNsZXMgaGFkIGdyZWF0ZXIgaW5mbHVlbmNlIGFuZCBwb3dlciB0aGFuIEZhYml1cy4gRm9yIHRoaXMgcmVhc29uIGhlIGRpZCBub3Qgc3VmZmVyIGFueSBvdGhlciBnZW5lcmFsIHRvIGJyaW5nIG1pc2ZvcnR1bmUgdXBvbiB0aGUgY2l0eSBieSBoaXMgZXZpbCBjb3Vuc2VscywgZXhjZXB0IHRoYXQgVG9sbWlkZXMgYnJva2UgYXdheSBmcm9tIGhpcyBndWlkYW5jZSwgY2FycmllZCB0aHJvdWdoIGJ5IG1haW4gZm9yY2UgYSBwbGFuIGZvciBhdHRhY2tpbmcgQm9lb3RpYSwgYW5kIG1ldCB3aXRoIGRpc2FzdGVyOyBidXQgdGhlIHJlc3QgYWxsIGF0dGFjaGVkIHRoZW1zZWx2ZXMgc3VibWlzc2l2ZWx5IHRvIGhpcyBvcGluaW9uLCBvd2luZyB0byB0aGUgZ3JlYXRuZXNzIG9mIGhpcyBpbmZsdWVuY2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cywgb24gdGhlIG90aGVyIGhhbmQsIHRob3VnaCBzdXJlIGFuZCB1bmVycmluZyBpbiBoaXMgb3duIGNvbmR1Y3Qgb2YgYWZmYWlycywgc2VlbXMgdG8gaGF2ZSBmYWxsZW4gc2hvcnQgdGhyb3VnaCBoaXMgaW5hYmlsaXR5IHRvIHJlc3RyYWluIG90aGVycy4gU3VyZWx5IHRoZSBSb21hbnMgd291bGQgbm90IGhhdmUgc3VmZmVyZWQgc28gbWFueSBkaXNhc3RlcnMgaWYgRmFiaXVzIGhhZCBiZWVuIGFzIGluZmx1ZW50aWFsIHdpdGggdGhlbSBhcyBQZXJpY2xlcyB3YXMgYXQgQXRoZW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlaXIgc3RhdGVzbWFuc2hpcCwgdGhlIFBlbG9wb25uZXNpYW4gd2FyIHdhcyBhIGdyb3VuZCBvZiBncmVhdCBjb21wbGFpbnQgYWdhaW5zdCBQZXJpY2xlcy4gRm9yIGl0IGlzIHNhaWQgdG8gaGF2ZSBiZWVuIGJyb3VnaHQgb24gYnkgaGlzIGNvbnRlbnRpb24gdGhhdCBubyBjb25jZXNzaW9uIHNob3VsZCBiZSBtYWRlIHRvIFNwYXJ0YS4gSSB0aGluaywgaG93ZXZlciwgdGhhdCBub3QgZXZlbiBGYWJpdXMgTWF4aW11cyB3b3VsZCBoYXZlIG1hZGUgYW55IGNvbmNlc3Npb25zIHRvIENhcnRoYWdlLCBidXQgd291bGQgaGF2ZSBub2JseSB1bmRlcmdvbmUgdGhlIHBlcmlsIG5lZWRmdWwgdG8gbWFpbnRhaW4gdGhlIFJvbWFuIHN1cHJlbWFjeS4gTmV2ZXJ0aGVsZXNzLCB0aGUgY291cnRlb3VzIGFuZCBnZW50bGUgY29uZHVjdCBvZiBGYWJpdXMgdG93YXJkcyBNaW51Y2l1cyBjb250cmFzdHMgZm9yY2libHkgd2l0aCB0aGUgZmFjdGlvdXMgb3Bwb3NpdGlvbiBvZiBQZXJpY2xlcyB0byBDaW1vbiBhbmQgVGh1Y3lkaWRlcywgd2hvIHdlcmUgYm90aCBnb29kIGFuZCB0cnVlIG1lbiBhbmQgb2YgdGhlIGhpZ2hlc3QgYmlydGgsIGFuZCB5ZXQgd2VyZSBzdWJqZWN0ZWQgYnkgaGltIHRvIG9zdHJhY2lzbSBhbmQgYmFuaXNobWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQZXJpY2xlcyBoYWQgZ3JlYXRlciBpbmZsdWVuY2UgYW5kIHBvd2VyIHRoYW4gRmFiaXVzLiBGb3IgdGhpcyByZWFzb24gaGUgZGlkIG5vdCBzdWZmZXIgYW55IG90aGVyIGdlbmVyYWwgdG8gYnJpbmcgbWlzZm9ydHVuZSB1cG9uIHRoZSBjaXR5IGJ5IGhpcyBldmlsIGNvdW5zZWxzLCBleGNlcHQgdGhhdCBUb2xtaWRlcyBicm9rZSBhd2F5IGZyb20gaGlzIGd1aWRhbmNlLCBjYXJyaWVkIHRocm91Z2ggYnkgbWFpbiBmb3JjZSBhIHBsYW4gZm9yIGF0dGFja2luZyBCb2VvdGlhLCBhbmQgbWV0IHdpdGggZGlzYXN0ZXI7IGJ1dCB0aGUgcmVzdCBhbGwgYXR0YWNoZWQgdGhlbXNlbHZlcyBzdWJtaXNzaXZlbHkgdG8gaGlzIG9waW5pb24sIG93aW5nIHRvIHRoZSBncmVhdG5lc3Mgb2YgaGlzIGluZmx1ZW5jZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZhYml1cywgb24gdGhlIG90aGVyIGhhbmQsIHRob3VnaCBzdXJlIGFuZCB1bmVycmluZyBpbiBoaXMgb3duIGNvbmR1Y3Qgb2YgYWZmYWlycywgc2VlbXMgdG8gaGF2ZSBmYWxsZW4gc2hvcnQgdGhyb3VnaCBoaXMgaW5hYmlsaXR5IHRvIHJlc3RyYWluIG90aGVycy4gU3VyZWx5IHRoZSBSb21hbnMgd291bGQgbm90IGhhdmUgc3VmZmVyZWQgc28gbWFueSBkaXNhc3RlcnMgaWYgRmFiaXVzIGhhZCBiZWVuIGFzIGluZmx1ZW50aWFsIHdpdGggdGhlbSBhcyBQZXJpY2xlcyB3YXMgYXQgQXRoZW5zLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPkFuZCBmdXJ0aGVyLCBhcyByZWdhcmRzIHRoZWlyIGZyZWVkb20gZnJvbSBtZXJjZW5hcnkgdmlld3MsIFBlcmljbGVzIGRpc3BsYXllZCBpdCBieSBuZXZlciB0YWtpbmcgYW55IGdpZnRzIGF0IGFsbDsgRmFiaXVzIGJ5IGhpcyBsaWJlcmFsaXR5IHRvIHRoZSBuZWVkeSwgd2hlbiBoZSByYW5zb21lZCBhdCBoaXMgb3duIGNvc3RzIGhpcyBjYXB0dXJlZCBzb2xkaWVycy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbGJlaXQgdGhlIGFtb3VudCBvZiBoaXMgcHJvcGVydHkgd2FzIG5vdCBncmVhdCwgYnV0IGFib3V0IHNpeCB0YWxlbnRzLiBBbmQgUGVyaWNsZXMsIHRob3VnaCBoZSBoYWQgb3Bwb3J0dW5pdGllcywgb3dpbmcgdG8gaGlzIGF1dGhvcml0eSBhbmQgaW5mbHVlbmNlLCB0byBlbnJpY2ggaGltc2VsZiBmcm9tIG9ic2VxdWlvdXMgYWxsaWVzIGFuZCBraW5ncyBiZXlvbmQgYWxsIHBvc3NpYmxlIGVzdGltYXRlcywgbmV2ZXJ0aGVsZXNzIGtlcHQgaGltc2VsZiBwcmUtZW1pbmVudGx5IHN1cGVyaW9yIHRvIGJyaWJlcyBhbmQgZnJlZSBmcm9tIGNvcnJ1cHRpb24uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsYmVpdCB0aGUgYW1vdW50IG9mIGhpcyBwcm9wZXJ0eSB3YXMgbm90IGdyZWF0LCBidXQgYWJvdXQgc2l4IHRhbGVudHMuIEFuZCBQZXJpY2xlcywgdGhvdWdoIGhlIGhhZCBvcHBvcnR1bml0aWVzLCBvd2luZyB0byBoaXMgYXV0aG9yaXR5IGFuZCBpbmZsdWVuY2UsIHRvIGVucmljaCBoaW1zZWxmIGZyb20gb2JzZXF1aW91cyBhbGxpZXMgYW5kIGtpbmdzIGJleW9uZCBhbGwgcG9zc2libGUgZXN0aW1hdGVzLCBuZXZlcnRoZWxlc3Mga2VwdCBoaW1zZWxmIHByZS1lbWluZW50bHkgc3VwZXJpb3IgdG8gYnJpYmVzIGFuZCBmcmVlIGZyb20gY29ycnVwdGlvbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnkgdGhlIHNpZGUgb2YgdGhlIGdyZWF0IHB1YmxpYyB3b3JrcywgdGhlIHRlbXBsZXMsIGFuZCB0aGUgc3RhdGVseSBlZGlmaWNlcywgd2l0aCB3aGljaCBQZXJpY2xlcyBhZG9ybmVkIEF0aGVucywgYWxsIFJvbWUncyBhdHRlbXB0cyBhdCBzcGxlbmRvdXIgZG93biB0byB0aGUgdGltZXMgb2YgdGhlIENhZXNhcnMsIHRha2VuIHRvZ2V0aGVyLCBhcmUgbm90IHdvcnRoeSB0byBiZSBjb25zaWRlcmVkLCBuYXksIHRoZSBvbmUgaGFkIGEgdG93ZXJpbmcgcHJlLWVtaW5lbmNlIGFib3ZlIHRoZSBvdGhlciwgYm90aCBpbiBncmFuZGV1ciBvZiBkZXNpZ24sIGFuZCBncmFuZGV1ciBvZiBleGVjdXRpb24sIHdoaWNoIHByZWNsdWRlcyBjb21wYXJpc29uLgoJCQk8L3A+CiAgICAgIDwvdHJhbnNsYXRpb24+"
