var translation={}
translation['1.1'] = "PHRyYW5zbGF0aW9uPjx0ZXh0IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgIDxib2R5IGNsYXNzPSJ0cmFuc2xhdGlvbiI+CiAgICAgICAgIDxoZWFkIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q0FFU0FSPC9oZWFkPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdpZmUgb2YgQ2Flc2FyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYW55IHRoaW5rIHRoYXQgb3BlbmluZyBwYXJhZ3JhcGhzIG9mIHRoaXMgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlmZTwvdGl0bGU+LCBkZXNjcmliaW5nIHRoZSBiaXJ0aCBhbmQgYm95aG9vZCBvZiBDYWVzYXIsIGhhdmUgYmVlbiBsb3N0Ljwvbm90ZT4gd2FzIENvcm5lbGlhLCB0aGUgZGF1Z2h0ZXIgb2YgdGhlIENpbm5hIHdobyBoYWQgb25jZSBoZWxkIHRoZSBzb2xlIHBvd2VyIGF0IFJvbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4NiBCLkMuLCBhZnRlciB0aGUgZGVhdGggb2YgaGlzIGNvbGxlYWd1ZSwgVmFsZXJpdXMgRmxhY2N1cy48L25vdGU+IGFuZCB3aGVuIFN1bGxhIGJlY2FtZSBtYXN0ZXIgb2YgYWZmYWlycyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDgyIEIuQy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgaXguIDE8L2JpYmw+IGYuPC9ub3RlPiBoZSBjb3VsZCBub3QsIGVpdGhlciBieSBwcm9taXNlcyBvciB0aHJlYXRzLCBpbmR1Y2UgQ2Flc2FyIHRvIHB1dCBoZXIgYXdheSwgYW5kIHRoZXJlZm9yZSBjb25maXNjYXRlZCBoZXIgZG93cnkuIE5vdywgdGhlIHJlYXNvbiBmb3IgQ2Flc2FyJ3MgaGF0cmVkIG9mIFN1bGxhIHdhcyBDYWVzYXIncyByZWxhdGlvbnNoaXAgdG8gTWFyaXVzLiBGb3IgSnVsaWEsIGEgc2lzdGVyIG9mIENhZXNhcidzIGZhdGhlciwgd2FzIHRoZSB3aWZlIG9mIE1hcml1cyB0aGUgRWxkZXIsIGFuZCB0aGUgbW90aGVyIG9mIE1hcml1cyB0aGUgWW91bmdlciwgd2hvIHdhcyB0aGVyZWZvcmUgQ2Flc2FyJ3MgY291c2luLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWVzYXIgd2FzIG5vdCBzYXRpc2ZpZWQgdG8gYmUgb3Zlcmxvb2tlZCBhdCBmaXJzdCBieSBTdWxsYSwgd2hvIHdhcyBidXN5IHdpdGggYSBtdWx0aXR1ZGUgb2YgcHJvc2NyaXB0aW9ucywgYnV0IGhlIGNhbWUgYmVmb3JlIHRoZSBwZW9wbGUgYXMgY2FuZGlkYXRlIGZvciBhIHByaWVzdGhvb2QsIGFsdGhvdWdoIGhlIHdhcyBub3QgeWV0IG11Y2ggbW9yZSB0aGFuIGEgc3RyaXBsaW5nLiBUbyB0aGlzIGNhbmRpZGFjeSBTdWxsYSBzZWNyZXRseSBvcHBvc2VkIGhpbXNlbGYsIGFuZCB0b29rIG1lYXN1cmVzIHRvIG1ha2UgQ2Flc2FyIGZhaWwgaW4gaXQsIGFuZCB3aGVuIGhlIHdhcyBkZWxpYmVyYXRpbmcgYWJvdXQgcHV0dGluZyBoaW0gdG8gZGVhdGggYW5kIHNvbWUgc2FpZCB0aGVyZSB3YXMgbm8gcmVhc29uIGZvciBraWxsaW5nIGEgbWVyZSBib3kgbGlrZSBoaW0sIGhlIGRlY2xhcmVkIHRoYXQgdGhleSBoYWQgbm8gc2Vuc2UgaWYgdGhleSBkaWQgbm90IHNlZSBpbiB0aGlzIGJveSBtYW55IE1hcml1c2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+TmFtIENhZXNhcmkgbXVsdG9zIE1hcmlvcyBpbmVzc2U8L2ZvcmVpZ24+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiAxIiB2YWxpZD0ieWVzIj5TdWV0b25pdXMsIDx0aXRsZT5EaXZ1cyBKdWxpdXM8L3RpdGxlPiwgaS48L2JpYmw+KS48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyBzcGVlY2ggd2FzIHJlcG9ydGVkIHRvIENhZXNhciwgaGUgaGlkIGhpbXNlbGYgZm9yIHNvbWUgdGltZSwgd2FuZGVyaW5nIGFib3V0IGluIHRoZSBjb3VudHJ5IG9mIHRoZSBTYWJpbmVzLiBUaGVuLCBhcyBoZSB3YXMgY2hhbmdpbmcgaGlzIGFib2RlIGJ5IG5pZ2h0IG9uIGFjY291bnQgb2Ygc2lja25lc3MsIGhlIGZlbGwgaW4gd2l0aCBzb2xkaWVycyBvZiBTdWxsYSB3aG8gd2VyZSBzZWFyY2hpbmcgdGhvc2UgcmVnaW9ucyBhbmQgYXJyZXN0aW5nIHRoZSBtZW4gaW4gaGlkaW5nIHRoZXJlLiBDYWVzYXIgZ2F2ZSB0aGVpciBsZWFkZXIsIENvcm5lbGl1cywgdHdvIHRhbGVudHMgdG8gc2V0IGhpbSBmcmVlLCBhbmQgYXQgb25jZSB3ZW50IGRvd24gdG8gdGhlIHNlYSBhbmQgc2FpbGVkIHRvIEtpbmcgTmljb21lZGVzIGluIEJpdGh5bmlhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhZXNhciBzZXJ2ZWQgdW5kZXIgTWFyY3VzIFRoZXJtdXMsIHByYWV0b3Igb2YgQXNpYSwgaW4gODEtODAgQi5DLiwgYmVpbmcgdGhlbiBuaW5ldGVlbiB5ZWFycyBvZiBhZ2UsIGFuZCBieSBoaW0gd2FzIHNlbnQgdG8gQml0aHluaWEgaW4gb3JkZXIgdG8gcmFpc2UgYSBmbGVldCB0byBhc3Npc3QgaW4gdGhlIHNpZWdlIG9mIE1pdHlsZW5lLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBoaW0gaGUgdGFycmllZCBhIHNob3J0IHRpbWUsIGFuZCB0aGVuLCBvbiBoaXMgdm95YWdlIGJhY2ssPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EaXYuIEp1bC48L3RpdGxlPiA0PC9iaWJsPiksIGl0IHdhcyBvbiBhIHZveWFnZSBmcm9tIFJvbWUgdG8gUmhvZGVzIChhZnRlciA3NyBCLkMuKSB0aGF0IENhZXNhciB3YXMgY2FwdHVyZWQgYnkgcGlyYXRlcy48L25vdGU+IHdhcyBjYXB0dXJlZCwgbmVhciB0aGUgaXNsYW5kIFBoYXJtYWN1c2EsIGJ5IHBpcmF0ZXMsIHdobyBhbHJlYWR5IGF0IHRoYXQgdGltZSBjb250cm9sbGVkIHRoZSBzZWEgd2l0aCBsYXJnZSBhcm1hbWVudHMgYW5kIGNvdW50bGVzcyBzbWFsbCB2ZXNzZWxzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRvIGJlZ2luIHdpdGgsIHRoZW4sIHdoZW4gdGhlIHBpcmF0ZXMgZGVtYW5kZWQgdHdlbnR5IHRhbGVudHMgZm9yIGhpcyByYW5zb20sIGhlIGxhdWdoZWQgYXQgdGhlbSBmb3Igbm90IGtub3dpbmcgd2hvIHRoZWlyIGNhcHRpdmUgd2FzLCBhbmQgb2YgaGlzIG93biBhY2NvcmQgYWdyZWVkIHRvIGdpdmUgdGhlbSBmaWZ0eS4gSW4gdGhlIG5leHQgcGxhY2UsIGFmdGVyIGhlIGhhZCBzZW50IHZhcmlvdXMgZm9sbG93ZXJzIHRvIHZhcmlvdXMgY2l0aWVzIHRvIHByb2N1cmUgdGhlIG1vbmV5IGFuZCB3YXMgbGVmdCB3aXRoIG9uZSBmcmllbmQgYW5kIHR3byBhdHRlbmRhbnRzIGFtb25nIENpbGljaWFucywgbW9zdCBtdXJkZXJvdXMgb2YgbWVuLCBoZSBoZWxkIHRoZW0gaW4gc3VjaCBkaXNkYWluIHRoYXQgd2hlbmV2ZXIgaGUgbGF5IGRvd24gdG8gc2xlZXAgaGUgd291bGQgc2VuZCBhbmQgb3JkZXIgdGhlbSB0byBzdG9wIHRhbGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBlaWdodCBhbmQgdGhpcnR5IGRheXMsIGFzIGlmIHRoZSBtZW4gd2VyZSBub3QgaGlzIHdhdGNoZXJzLCBidXQgaGlzIHJveWFsIGJvZHktZ3VhcmQsIGhlIHNoYXJlZCBpbiB0aGVpciBzcG9ydHMgYW5kIGV4ZXJjaXNlcyB3aXRoIGdyZWF0IHVuY29uY2Vybi4gSGUgYWxzbyB3cm90ZSBwb2VtcyBhbmQgc3VuZHJ5IHNwZWVjaGVzIHdoaWNoIGhlIHJlYWQgYWxvdWQgdG8gdGhlbSwgYW5kIHRob3NlIHdobyBkaWQgbm90IGFkbWlyZSB0aGVzZSBoZSB3b3VsZCBjYWxsIHRvIHRoZWlyIGZhY2VzIGlsbGl0ZXJhdGUgQmFyYmFyaWFucywgYW5kIG9mdGVuIGxhdWdoaW5nbHkgdGhyZWF0ZW5lZCB0byBoYW5nIHRoZW0gYWxsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGlyYXRlcyB3ZXJlIGRlbGlnaHRlZCBhdCB0aGlzLCBhbmQgYXR0cmlidXRlZCBoaXMgYm9sZG5lc3Mgb2Ygc3BlZWNoIHRvIGEgY2VydGFpbiBzaW1wbGljaXR5IGFuZCBib3lpc2ggbWlydGguIEJ1dCBhZnRlciBoaXMgcmFuc29tIGhhZCBjb21lIGZyb20gTWlsZXR1cyBhbmQgaGUgaGFkIHBhaWQgaXQgYW5kIHdhcyBzZXQgZnJlZSwgaGUgaW1tZWRpYXRlbHkgbWFubmVkIHZlc3NlbHMgYW5kIHB1dCB0byBzZWEgZnJvbSB0aGUgaGFyYm91ciBvZiBNaWxldHVzIGFnYWluc3QgdGhlIHJvYmJlcnMuIEhlIGNhdWdodCB0aGVtLCB0b28sIHN0aWxsIGx5aW5nIGF0IGFuY2hvciBvZmYgdGhlIGlzbGFuZCwgYW5kIGdvdCBtb3N0IG9mIHRoZW0gaW50byBoaXMgcG93ZXIuIFRoZWlyIG1vbmV5IGhlIG1hZGUgaGlzIGJvb3R5LCBidXQgdGhlIG1lbiB0aGVtc2VsdmVzIGhlIGxvZGdlZCBpbiB0aGUgcHJpc29uIGF0IFBlcmdhbXVtLCBhbmQgdGhlbiB3ZW50IGluIHBlcnNvbiB0byBKdW5pdXMsIHRoZSBnb3Zlcm5vciBvZiBBc2lhLCBvbiB0aGUgZ3JvdW5kIHRoYXQgaXQgYmVsb25nZWQgdG8gaGltLCBhcyBwcmFldG9yIG9mIHRoZSBwcm92aW5jZSwgdG8gcHVuaXNoIHRoZSBjYXB0aXZlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNpbmNlIHRoZSBwcmFldG9yIGNhc3QgbG9uZ2luZyBleWVzIG9uIHRoZWlyIG1vbmV5LCB3aGljaCB3YXMgbm8gc21hbGwgc3VtLCBhbmQga2VwdCBzYXlpbmcgdGhhdCBoZSB3b3VsZCBjb25zaWRlciB0aGUgY2FzZSBvZiB0aGUgY2FwdGl2ZXMgYXQgaGlzIGxlaXN1cmUsIENhZXNhciBsZWZ0IGhpbSB0byBoaXMgb3duIGRldmljZXMsIHdlbnQgdG8gUGVyZ2FtdW0sIHRvb2sgdGhlIHJvYmJlcnMgb3V0IG9mIHByaXNvbiwgYW5kIGNydWNpZmllZCB0aGVtIGFsbCwganVzdCBhcyBoZSBoYWQgb2Z0ZW4gd2FybmVkIHRoZW0gb24gdGhlIGlzbGFuZCB0aGF0IGhlIHdvdWxkIGRvLCB3aGVuIHRoZXkgdGhvdWdodCBoZSB3YXMgam9raW5nLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFN1bGxhJ3MgcG93ZXIgYmVpbmcgbm93IG9uIHRoZSB3YW5lLCBhbmQgQ2Flc2FyJ3MgZnJpZW5kcyBhdCBob21lIGludml0aW5nIGhpbSB0byByZXR1cm4sIENhZXNhciBzYWlsZWQgdG8gUmhvZGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EaXYuIEp1bC48L3RpdGxlPiA0PC9iaWJsPiksIHRoaXMgdm95YWdlLCBvbiB3aGljaCBoZSB3YXMgY2FwdHVyZWQgYnkgcGlyYXRlcywgd2FzIHVuZGVydGFrZW4gdW5zdWNjZXNzZnVsIHByb3NlY3V0aW9uIG9mIERvbGFiZWxsYSwgbWVudGlvbmVkIGluIHRoZSBuZXh0IGNoYXB0ZXIuIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEuNCIgdmFsaWQ9InllcyI+bm90ZSBvbiBpLiA0PC9iaWJsPi48L25vdGU+IHRvIHN0dWR5IHVuZGVyIEFwb2xsb25pdXMgdGhlIHNvbiBvZiBNb2xvbiwgYW4gaWxsdXN0cmlvdXMgcmhldG9yaWNpYW4gd2l0aCB0aGUgcmVwdXRhdGlvbiBvZiBhIHdvcnRoeSBjaGFyYWN0ZXIsIG9mIHdob20gQ2ljZXJvIGFsc28gd2FzIGEgcHVwaWwuIEl0IGlzIHNhaWQsIHRvbywgdGhhdCBDYWVzYXIgaGFkIHRoZSBncmVhdGVzdCBuYXR1cmFsIHRhbGVudCBmb3IgcG9saXRpY2FsIG9yYXRvcnksIGFuZCBjdWx0aXZhdGVkIGhpcyB0YWxlbnQgbW9zdCBhbWJpdGlvdXNseSwgc28gdGhhdCBoZSBoYWQgYW4gdW5kaXNwdXRlZCBzZWNvbmQgcmFuazsgdGhlIGZpcnN0IHJhbmssIGhvd2V2ZXIsIGhlIHJlbm91bmNlZCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YmVjYXVzZSBoZSBkZXZvdGVkIGhpcyBlZmZvcnRzIHRvIGJlaW5nIGZpcnN0IGFzIGEgc3RhdGVzbWFuIGFuZCBjb21tYW5kZXIgcmF0aGVyLCBhbmQgZGlkIG5vdCBhY2hpZXZlIHRoYXQgZWZmZWN0aXZlbmVzcyBpbiBvcmF0b3J5IHRvIHdoaWNoIGhpcyBuYXR1cmFsIHRhbGVudCBkaXJlY3RlZCBoaW0sIGluIGNvbnNlcXVlbmNlIG9mIGhpcyBjYW1wYWlnbnMgYW5kIG9mIGhpcyBwb2xpdGljYWwgYWN0aXZpdGllcywgYnkgbWVhbnMgb2Ygd2hpY2ggaGUgYWNxdWlyZWQgdGhlIHN1cHJlbWFjeS4gQW5kIHNvIGl0IHdhcyB0aGF0LCBhdCBhIGxhdGVyIHRpbWUsIGluIGhpcyByZXBseSB0byBDaWNlcm8ncyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhdG8sPC9xPiBoZSBoaW1zZWxmIGRlcHJlY2F0ZWQgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZSBkaWN0aW9uIG9mIGEgc29sZGllciBhbmQgdGhlIGVsb3F1ZW5jZSBvZiBhbiBvcmF0b3Igd2hvIHdhcyBnaWZ0ZWQgYnkgbmF0dXJlIGFuZCBoYWQgcGxlbnR5IG9mIGxlaXN1cmUgdG8gcHVyc3VlIGhpcyBzdHVkaWVzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpcyByZXR1cm4gdG8gUm9tZSBoZSBpbXBlYWNoZWQgRG9sYWJlbGxhPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNzcgQi5DLjwvbm90ZT4gZm9yIG1hbGFkbWluaXN0cmF0aW9uIG9mIGhpcyBwcm92aW5jZSwgYW5kIG1hbnkgb2YgdGhlIGNpdGllcyBvZiBHcmVlY2Ugc3VwcGxpZWQgaGltIHdpdGggdGVzdGltb255LiBEb2xhYmVsbGEsIGl0IGlzIHRydWUsIHdhcyBhY3F1aXR0ZWQsIGJ1dCBDYWVzYXIsIGluIHJldHVybiBmb3IgdGhlIHplYWxvdXMgZWZmb3J0cyBvZiB0aGUgR3JlZWtzIGluIGhpcyBiZWhhbGYsIHNlcnZlZCBhcyB0aGVpciBhZHZvY2F0ZSB3aGVuIHRoZXkgcHJvc2VjdXRlZCBQdWJsaXVzIEFudG9uaXVzIGZvciBjb3JydXB0aW9uIGJlZm9yZSBNYXJjdXMgTHVjdWxsdXMsIHRoZSBwcmFldG9yIG9mIE1hY2Vkb25pYS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGhlIHdhcyBzbyBlZmZlY3RpdmUgdGhhdCBBbnRvbml1cyBhcHBlYWxlZCB0byB0aGUgdHJpYnVuZXMgYXQgUm9tZSwgYWxsZWdpbmcgdGhhdCBoZSBjb3VsZCBub3QgaGF2ZSBhIGZhaXIgdHJpYWwgaW4gR3JlZWNlIGFnYWluc3QgR3JlZWtzLiBBdCBSb21lLCBtb3Jlb3ZlciwgQ2Flc2FyIHdvbiBhIGdyZWF0IGFuZCBicmlsbGlhbnQgcG9wdWxhcml0eSBieSBoaXMgZWxvcXVlbmNlIGFzIGFuIGFkdm9jYXRlLCBhbmQgbXVjaCBnb29kIHdpbGwgZnJvbSB0aGUgY29tbW9uIHBlb3BsZSBmb3IgdGhlIGZyaWVuZGxpbmVzcyBvZiBoaXMgbWFubmVycyBpbiBpbnRlcmNvdXJzZSB3aXRoIHRoZW0sIHNpbmNlIGhlIHdhcyBpbmdyYXRpYXRpbmcgYmV5b25kIGhpcyB5ZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGFkIGFsc28gYSBsYXJnZSBhbmQgZ3JhZHVhbGx5IGluY3JlYXNpbmcgcG9saXRpY2FsIGluZmx1ZW5jZSwgaW4gY29uc2VxdWVuY2Ugb2YgaGlzIGxhdmlzaCBob3NwaXRhbGl0eSBhbmQgdGhlIGdlbmVyYWwgc3BsZW5kb3VyIG9mIGhpcyBtb2RlIG9mIGxpZmUuIEF0IGZpcnN0IGhpcyBlbmVtaWVzIHRob3VnaHQgdGhpcyBpbmZsdWVuY2Ugd291bGQgcXVpY2tseSB2YW5pc2ggd2hlbiBoaXMgZXhwZW5kaXR1cmVzIGNlYXNlZCwgYW5kIHRoZXJlZm9yZSBzdWZmZXJlZCBpdCB0byB0aHJpdmUgYW1vbmcgdGhlIGNvbW1vbiBwZW9wbGU7IGJ1dCBsYXRlciBvbiB3aGVuIGl0IGhhZCBiZWNvbWUgZ3JlYXQgYW5kIGhhcmQgdG8gc3VidmVydCwgYW5kIGFpbWVkIGRpcmVjdGx5IGF0IGEgY29tcGxldGUgcmV2b2x1dGlvbiBpbiB0aGUgc3RhdGUsIHRoZXkgcGVyY2VpdmVkIHRoYXQgbm8gYmVnaW5uaW5ncyBzaG91bGQgYmUgY29uc2lkZXJlZCB0b28gc21hbGwgdG8gYmUgcXVpY2tseSBtYWRlIGdyZWF0IGJ5IGNvbnRpbnVhbmNlLCBhZnRlciwgY29udGVtcHQgb2YgdGhlbSBoYXMgbGVmdCB0aGVtIHVub2JzdHJ1Y3RlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYWxsIGV2ZW50cywgdGhlIG1hbiB3aG8gaXMgdGhvdWdodCB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IHRvIHNlZSBiZW5lYXRoIHRoZSBzdXJmYWNlIG9mIENhZXNhcidzIHB1YmxpYyBwb2xpY3kgYW5kIHRvIGZlYXIgaXQsIGFzIG9uZSBtaWdodCBmZWFyIHRoZSBzbWlsaW5nIHN1cmZhY2Ugb2YgdGhlIHNlYSwgYW5kIHdobyBjb21wcmVoZW5kZWQgdGhlIHBvd2VyZnVsIGNoYXJhY3RlciBoaWRkZW4gYmVuZWF0aCBoaXMga2luZGx5IGFuZCBjaGVlcmZ1bCBleHRlcmlvciwgbmFtZWx5IENpY2Vybywgc2FpZCB0aGF0IGluIG1vc3Qgb2YgQ2Flc2FyJ3MgcG9saXRpY2FsIHBsYW5zIGFuZCBwcm9qZWN0cyBoZSBzYXcgYSB0eXJhbm5pY2FsIHB1cnBvc2U7IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gdGhlIG90aGVyIGhhbmQsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPndoZW4gSSBsb29rIGF0IGhpcyBoYWlyLCB3aGljaCBpcyBhcnJhbmdlZCB3aXRoIHNvIG11Y2ggbmljZXR5LCBhbmQgc2VlIGhpbSBzY3JhdGNoaW5nIGhpcyBoZWFkIHdpdGggb25lIGZpbmdlciwgSSBjYW5ub3QgdGhpbmsgdGhhdCB0aGlzIG1hbiB3b3VsZCBldmVyIGNvbmNlaXZlIG9mIHNvIGdyZWF0IGEgY3JpbWUgYXMgdGhlIG92ZXJ0aHJvdyBvZiB0aGUgUm9tYW4gY29uc3RpdHV0aW9uPC9xPiBUaGlzLCBpdCBpcyB0cnVlLCBiZWxvbmdzIHRvIGEgbGF0ZXIgcGVyaW9kLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBwcm9vZiBvZiB0aGUgcGVvcGxlJ3MgZ29vZCB3aWxsIHRvd2FyZHMgaGltIGhlIHJlY2VpdmVkIHdoZW4gaGUgY29tcGV0ZWQgYWdhaW5zdCBDYWl1cyBQb3BpbGl1cyBmb3IgYSBtaWxpdGFyeSB0cmlidW5lc2hpcCBhbmQgd2FzIGVsZWN0ZWQgb3ZlciBoaW07IGEgc2Vjb25kIGFuZCBtb3JlIGNvbnNwaWN1b3VzIHByb29mIGhlIHJlY2VpdmVkIHdoZW4sIGFzIG5lcGhldyBvZiBKdWxpYSB0aGUgZGVjZWFzZWQgd2lmZSBvZiBNYXJpdXMsIGhlIHByb25vdW5jZWQgYSBzcGxlbmRpZCBlbmNvbWl1bSB1cG9uIGhlciBpbiB0aGUgZm9ydW0sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjggQi5DLjwvbm90ZT4gYW5kIGluIGhlciBmdW5lcmFsIHByb2Nlc3Npb24gdmVudHVyZWQgdG8gZGlzcGxheSBpbWFnZXMgb2YgTWFyaXVzLCB3aGljaCB3ZXJlIHRoZW4gc2VlbiBmb3IgdGhlIGZpcnN0IHRpbWUgc2luY2UgdGhlIGFkbWluaXN0cmF0aW9uIG9mIFN1bGxhLCBiZWNhdXNlIE1hcml1cyBhbmQgaGlzIGZyaWVuZHMgaGFkIGJlZW4gcHJvbm91bmNlZCBwdWJsaWMgZW5lbWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgbmFtZWx5LCBzb21lIGNyaWVkIG91dCBhZ2FpbnN0IENhZXNhciBmb3IgdGhpcyBwcm9jZWR1cmUsIHRoZSBwZW9wbGUgYW5zd2VyZWQgdGhlbSB3aXRoIGxvdWQgc2hvdXRzLCByZWNlaXZlZCBDYWVzYXIgd2l0aCBhcHBsYXVzZSwgYW5kIGFkbWlyZWQgaGltIGZvciBicmluZ2luZyBiYWNrIGFmdGVyIHNvIGxvbmcgYSB0aW1lLCBhcyBpdCB3ZXJlIGZyb20gSGFkZXMsIHRoZSBob25vdXJzIG9mIE1hcml1cyBpbnRvIHRoZSBjaXR5LiBOb3csIGluIHRoZSBjYXNlIG9mIGVsZGVybHkgd29tZW4sIGl0IHdhcyBhbmNpZW50IFJvbWFuIHVzYWdlIHRvIHByb25vdW5jZSBmdW5lcmFsIG9yYXRpb25zIG92ZXIgdGhlbTsgYnV0IGl0IHdhcyBub3QgY3VzdG9tYXJ5IGluIHRoZSBjYXNlIG9mIHlvdW5nIHdvbWVuLCBhbmQgQ2Flc2FyIHdhcyB0aGUgZmlyc3QgdG8gZG8gc28gd2hlbiBoaXMgb3duIHdpZmUgZGllZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2OCBCLkMuPC9ub3RlPiBUaGlzIGFsc28gYnJvdWdodCBoaW0gbXVjaCBmYXZvdXIsIGFuZCB3b3JrZWQgdXBvbiB0aGUgc3ltcGF0aGllcyBvZiB0aGUgbXVsdGl0dWRlLCBzbyB0aGF0IHRoZXkgd2VyZSBmb25kIG9mIGhpbSwgYXMgYSBtYW4gd2hvIHdhcyBnZW50bGUgYW5kIGZ1bGwgb2YgZmVlbGluZy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGZ1bmVyYWwgb2YgaGlzIHdpZmUsIGhlIHdlbnQgb3V0IHRvIFNwYWluPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjcgQi5DLjwvbm90ZT4gYXMgcXVhZXN0b3IgdW5kZXIgVmV0dXMsIG9uZSBvZiB0aGUgcHJhZXRvcnMsIHdob20gaGUgbmV2ZXIgY2Vhc2VkIHRvIGhvbGQgaW4gaGlnaCBlc3RlZW0sIGFuZCB3aG9zZSBzb24sIGluIHR1cm4sIHdoZW4gaGUgaGltc2VsZiB3YXMgcHJhZXRvciwgaGUgbWFkZSBoaXMgcXVhZXN0b3IuIEFmdGVyIGhlIGhhZCBzZXJ2ZWQgaW4gdGhpcyBvZmZpY2UsIGhlIG1hcnJpZWQgZm9yIGhpcyB0aGlyZCB3aWZlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyIHdhcyBmaXJzdCBtYXJyaWVkIHRvIENvc3N1dGlhLCB0aGUgZGF1Z2h0ZXIgb2YgYSByaWNoIFJvbWFuIGtuaWdodC48L25vdGU+IFBvbXBlaWEsIGhhdmluZyBhbHJlYWR5IGJ5IENvcm5lbGlhIGEgZGF1Z2h0ZXIgd2hvIHdhcyBhZnRlcndhcmRzIG1hcnJpZWQgdG8gUG9tcGV5IHRoZSBHcmVhdC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIHVuc3BhcmluZyBpbiBoaXMgb3V0bGF5cyBvZiBtb25leSwgYW5kIHdhcyB0aG91Z2h0IHRvIGJlIHB1cmNoYXNpbmcgYSB0cmFuc2llbnQgYW5kIHNob3J0LWxpdmVkIGZhbWUgYXQgYSBncmVhdCBwcmljZSwgdGhvdWdoIGluIHJlYWxpdHkgaGUgd2FzIGJ1eWluZyB0aGluZ3Mgb2YgdGhlIGhpZ2hlc3QgdmFsdWUgYXQgYSBzbWFsbCBwcmljZS4gV2UgYXJlIHRvbGQsIGFjY29yZGluZ2x5LCB0aGF0IGJlZm9yZSBoZSBlbnRlcmVkIHVwb24gYW55IHB1YmxpYyBvZmZpY2UgaGUgd2FzIHRoaXJ0ZWVuIGh1bmRyZWQgdGFsZW50cyBpbiBkZWJ0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgYmVpbmcgYXBwb2ludGVkIGN1cmF0b3Igb2YgdGhlIEFwcGlhbiBXYXksIGhlIGV4cGVuZGVkIHVwb24gaXQgdmFzdCBzdW1zIG9mIGhpcyBvd24gbW9uZXk7IGFuZCBhZ2FpbiwgZHVyaW5nIGhpcyBhZWRpbGVzaGlwLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDY2IEIuQy48L25vdGU+IGhlIGZ1cm5pc2hlZCB0aHJlZSBodW5kcmVkIGFuZCB0d2VudHkgcGFpcnMgb2YgZ2xhZGlhdG9ycywgYW5kIGJ5IGxhdmlzaCBwcm92aXNpb24gYmVzaWRlcyBmb3IgdGhlYXRyaWNhbCBwZXJmb3JtYW5jZXMsIHByb2Nlc3Npb25zLCBhbmQgcHVibGljIGJhbnF1ZXRzLCBoZSB3YXNoZWQgYXdheSBhbGwgbWVtb3J5IG9mIHRoZSBhbWJpdGlvdXMgZWZmb3J0cyBvZiBoaXMgcHJlZGVjZXNzb3JzIGluIHRoZSBvZmZpY2UuIEJ5IHRoZXNlIG1lYW5zIGhlIHB1dCB0aGUgcGVvcGxlIGluIHN1Y2ggYSBodW1vdXIgdGhhdCBldmVyeSBtYW4gb2YgdGhlbSB3YXMgc2Vla2luZyBvdXQgbmV3IG9mZmljZXMgYW5kIG5ldyBob25vdXJzIHdpdGggd2hpY2ggdG8gcmVxdWl0ZSBoaW0uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSB0d28gcGFydGllcyBpbiB0aGUgY2l0eSwgdGhhdCBvZiBTdWxsYSwgd2hpY2ggaGFkIGJlZW4gYWxsIHBvd2VyZnVsIHNpbmNlIGhpcyBkYXksIGFuZCB0aGF0IG9mIE1hcml1cywgd2hpY2ggYXQgdGhhdCB0aW1lIHdhcyBpbiBhbiBhbHRvZ2V0aGVyIGxvd2x5IHN0YXRlLCBiZWluZyBjb3dlZCBhbmQgc2NhdHRlcmVkLiBUaGlzIHBhcnR5IENhZXNhciB3aXNoZWQgdG8gcmV2aXZlIGFuZCBhdHRhY2ggdG8gaGltc2VsZiwgYW5kIHRoZXJlZm9yZSwgd2hlbiB0aGUgYW1iaXRpb3VzIGVmZm9ydHMgb2YgaGlzIGFlZGlsZXNoaXAgd2VyZSBhdCB0aGVpciBoZWlnaHQsIGhlIGhhZCBpbWFnZXMgb2YgTWFyaXVzIHNlY3JldGx5IG1hZGUsIHRvZ2V0aGVyIHdpdGggdHJvcGh5LWJlYXJpbmcgVmljdG9yaWVzLCBhbmQgdGhlc2UgaGUgb3JkZXJlZCB0byBiZSBjYXJyaWVkIGJ5IG5pZ2h0IGFuZCBzZXQgdXAgb24gdGhlIENhcGl0b2wuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGRheS1icmVhayB0aG9zZSB3aG8gYmVoZWxkIGFsbCB0aGVzZSBvYmplY3RzIGdsaXR0ZXJpbmcgd2l0aCBnb2xkIGFuZCBmYXNoaW9uZWQgd2l0aCB0aGUgbW9zdCBleHF1aXNpdGUgYXJ0IChhbmQgdGhleSBib3JlIGluc2NyaXB0aW9ucyBzZXR0aW5nIGZvcnRoIHRoZSBDaW1icmlhbiBzdWNjZXNzZXMgb2YgTWFyaXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1hcml1czwvdGl0bGU+LCBjaGFwdGVycyB4aS48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDIyLjEiIHZhbGlkPSJ5ZXMiPnh4aWk8L2JpYmw+Ljwvbm90ZT4pIHdlcmUgYW1hemVkIGF0IHRoZSBkYXJpbmcgb2YgdGhlIG1hbiB3aG8gaGFkIHNldCB0aGVtIHVwIChmb3IgaXQgd2FzIGV2aWRlbnQgd2hvIGhhZCBkb25lIGl0KSwgYW5kIHRoZSByZXBvcnQgb2YgaXQgcXVpY2tseSBzcHJlYWRpbmcgYnJvdWdodCBldmVyeWJvZHkgdG9nZXRoZXIgZm9yIHRoZSBzaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNvbWUgY3JpZWQgb3V0IHRoYXQgQ2Flc2FyIHdhcyBzY2hlbWluZyB0byB1c3VycCBzb2xlIHBvd2VyIGluIHRoZSBzdGF0ZSB3aGVuIGhlIHRodXMgcmV2aXZlZCBob25vdXJzIHdoaWNoIGhhZCBiZWVuIGJ1cmllZCBieSBsYXdzIGFuZCBkZWNyZWVzLCBhbmQgdGhhdCB0aGlzIHByb2NlZWRpbmcgd2FzIGEgdGVzdCBvZiB0aGUgcGVvcGxlLCB3aG9zZSBmZWVsaW5ncyB0b3dhcmRzIGhpbSBoZSBoYWQgcHJldmlvdXNseSBzb2Z0ZW5lZCwgdG8gc2VlIHdoZXRoZXIgdGhleSBoYWQgYmVlbiBtYWRlIGRvY2lsZSBieSBoaXMgYW1iaXRpb3VzIGRpc3BsYXlzIGFuZCB3b3VsZCBwZXJtaXQgaGltIHRvIGFtdXNlIGhpbXNlbGYgd2l0aCBzdWNoIGlubm92YXRpb25zLiBUaGUgcGFydGlzYW5zIG9mIE1hcml1cywgaG93ZXZlciwgZW5jb3VyYWdlZCBvbmUgYW5vdGhlciBhbmQgc2hvd2VkIHRoZW1zZWx2ZXMgb24gYSBzdWRkZW4gaW4gYW1hemluZyBudW1iZXJzLCBhbmQgZmlsbGVkIHRoZSBDYXBpdG9sIHdpdGggdGhlaXIgYXBwbGF1c2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hbnksIHRvbywgd2VyZSBtb3ZlZCB0byB0ZWFycyBvZiBqb3kgd2hlbiB0aGV5IGJlaGVsZCB0aGUgZmVhdHVyZXMgb2YgTWFyaXVzLCBhbmQgQ2Flc2FyIHdhcyBoaWdobHkgZXh0b2xsZWQgYnkgdGhlbSwgYW5kIHJlZ2FyZGVkIGFzIGFib3ZlIGFsbCBvdGhlcnMgd29ydGh5IG9mIGhpcyBraW5zaGlwIHdpdGggTWFyaXVzLiBCdXQgd2hlbiB0aGUgc2VuYXRlIG1ldCB0byBkaXNjdXNzIHRoZXNlIG1hdHRlcnMsIENhdHVsdXMgTHV0YXRpdXMsIGEgbWFuIG9mIHRoZSBoaWdoZXN0IHJlcHV0ZSBhdCB0aGF0IHRpbWUgaW4gUm9tZSwgcm9zZSB1cCBhbmQgZGVub3VuY2VkIENhZXNhciwgdXR0ZXJpbmcgdGhlIG1lbW9yYWJsZSB3b3JkczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ObyBsb25nZXIsIGluZGVlZCwgYnkgc2FwcGluZyBhbmQgbWluaW5nLCBDYWVzYXIsIGJ1dCB3aXRoIGVuZ2luZXMgb2Ygd2FyIGFydCB0aG91IGNhcHR1cmluZyB0aGUgZ292ZXJubWVudDwvcT4gQ2Flc2FyLCBob3dldmVyLCBkZWZlbmRlZCBoaW1zZWxmIGFnYWluc3QgdGhpcyBjaGFyZ2UgYW5kIGNvbnZpbmNlZCB0aGUgc2VuYXRlLCB3aGVyZXVwb24gaGlzIGFkbWlyZXJzIHdlcmUgc3RpbGwgbW9yZSBlbGF0ZWQgYW5kIGV4aG9ydGVkIGhpbSBub3QgdG8gbG93ZXIgaGlzIHByZXRlbnNpb25zIGZvciBhbnkgbWFuLCBzaW5jZSB0aGUgcGVvcGxlIHdvdWxkIGJlIGdsYWQgdG8gaGF2ZSBoaW0gdHJpdW1waCBvdmVyIGFsbCBvcHBvc2l0aW9uIGFuZCBiZSB0aGUgZmlyc3QgbWFuIGluIHRoZSBzdGF0ZS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUsIHRvbywgTWV0ZWxsdXMsIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+cG9udGlmZXggbWF4aW11czwvZm9yZWlnbj4sIG9yIDxnbG9zcz5oaWdoIHByaWVzdDwvZ2xvc3M+LCBkaWVkLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDYzIEIuQy48L25vdGU+IGFuZCB0aG91Z2ggSXNhdXJpY3VzIGFuZCBDYXR1bHVzIHdlcmUgY2FuZGlkYXRlcyBmb3IgdGhlIHByaWVzdGhvb2QsIHdoaWNoIHdhcyBhbiBvYmplY3Qgb2YgZ3JlYXQgYW1iaXRpb24sIGFuZCB0aG91Z2ggdGhleSB3ZXJlIG1vc3QgaWxsdXN0cmlvdXMgbWVuIGFuZCBvZiB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGluIHRoZSBzZW5hdGUsIENhZXNhciB3b3VsZCBub3QgZ2l2ZSB3YXkgdG8gdGhlbSwgYnV0IHByZXNlbnRlZCBoaW1zZWxmIHRvIHRoZSBwZW9wbGUgYXMgYSByaXZhbCBjYW5kaWRhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmYXZvdXIgb2YgdGhlIGVsZWN0b3JzIGFwcGVhcmVkIHRvIGJlIGFib3V0IGVxdWFsbHkgZGl2aWRlZCwgYW5kIHRoZXJlZm9yZSBDYXR1bHVzLCB3aG8sIGFzIHRoZSB3b3J0aGllciBvZiBDYWVzYXIncyBjb21wZXRpdG9ycywgZHJlYWRlZCBtb3JlIHRoZSB1bmNlcnRhaW50eSBvZiB0aGUgaXNzdWUsIHNlbnQgYW5kIHRyaWVkIHRvIGluZHVjZSBDYWVzYXIgdG8gZGVzaXN0IGZyb20gaGlzIGFtYml0aW91cyBwcm9qZWN0LCBvZmZlcmluZyBoaW0gbGFyZ2Ugc3VtcyBvZiBtb25leS4gQnV0IENhZXNhciBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIGNhcnJ5IHRoZSBjb250ZXN0IHRocm91Z2ggZXZlbiB0aG91Z2ggaGUgaGFkIHRvIGJvcnJvdyBzdGlsbCBsYXJnZXIgc3Vtcy48L3A+CiAgICAgICAgIDxwPlRoZSBkYXkgZm9yIHRoZSBlbGVjdGlvbiBjYW1lLCBhbmQgYXMgQ2Flc2FyJ3MgbW90aGVyIGFjY29tcGFuaWVkIGhpbSB0byB0aGUgZG9vciBpbiB0ZWFycywgaGUga2lzc2VkIGhlciBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Nb3RoZXIsIHRvZGF5IHRob3Ugc2hhbHQgc2VlIHRoeSBzb24gZWl0aGVyIDxmb3JlaWduIGxhbmc9ImxhIj5wb250aWZleCBtYXhpbXVzPC9mb3JlaWduPiBvciBhbiBleGlsZTwvcT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb250ZXN0IHdhcyBzaGFycCwgYnV0IHdoZW4gdGhlIHZvdGUgd2FzIHRha2VuIENhZXNhciBwcmV2YWlsZWQsIGFuZCB0aGVyZWJ5IG1hZGUgdGhlIHNlbmF0ZSBhbmQgbm9ibGVzIGFmcmFpZCB0aGF0IGhlIHdvdWxkIGxlYWQgdGhlIHBlb3BsZSBvbiB0byBldmVyeSBleHRyZW1lIG9mIHJlY2tsZXNzbmVzcy4gVGhlcmVmb3JlIFBpc28gYW5kIENhdHVsdXMgYmxhbWVkIENpY2VybyBmb3IgaGF2aW5nIHNwYXJlZCBDYWVzYXIgd2hlbiwgaW4gdGhlIGFmZmFpciBvZiBDYXRpbGluZSwgaGUgZ2F2ZSBoaXMgZW5lbWllcyBhIGhvbGQgdXBvbiBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhdGlsaW5lLCBuYW1lbHksIGhhZCBwdXJwb3NlZCBub3Qgb25seSB0byBzdWJ2ZXJ0IHRoZSBjb25zdGl0dXRpb24sIGJ1dCB0byBkZXN0cm95IHRoZSB3aG9sZSBnb3Zlcm5tZW50IGFuZCB0aHJvdyBldmVyeXRoaW5nIGludG8gY29uZnVzaW9uLiBIZSBoaW1zZWxmLCBob3dldmVyLCB3YXMgZXhwZWxsZWQgZnJvbSB0aGUgY2l0eSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2MyBCLkMuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMTAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeC48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDIyLjEiIHZhbGlkPSJ5ZXMiPnh4aWk8L2JpYmw+Ljwvbm90ZT4gaGF2aW5nIGJlZW4gb3ZlcndoZWxtZWQgYnkgcHJvb2ZzIGJ5IGxlc3NlciBpbmlxdWl0aWVzIGJlZm9yZSBoaXMgbW9zdCBmYXIgcmVhY2hpbmcgcGxhbnMgd2VyZSBkaXNjb3ZlcmVkOyBidXQgaGUgbGVmdCBMZW50dWx1cyBhbmQgQ2V0aGVndXMgYmVoaW5kIGhpbSBpbiB0aGUgY2l0eSB0byBwcm9tb3RlIHRoZSBjb25zcGlyYWN5IGluIGhpcyBwbGFjZS4gTm93LCB3aGV0aGVyIG9yIG5vdCBDYWVzYXIgc2VjcmV0bHkgZ2F2ZSB0aGVzZSBtZW4gYW55IGNvdW50ZW5hbmNlIGFuZCBoZWxwLCBpcyB1bmNlcnRhaW47IGJ1dCBhZnRlciB0aGV5IGhhZCBiZWVuIG92ZXJ3aGVsbWluZ2x5IGNvbnZpY3RlZCBpbiB0aGUgc2VuYXRlLCBhbmQgQ2ljZXJvIHRoZSBjb25zdWwgYXNrZWQgZWFjaCBzZW5hdG9yIHRvIGdpdmUgaGlzIG9waW5pb24gb24gdGhlIG1hbm5lciBvZiB0aGVpciBwdW5pc2htZW50LCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz50aGUgcmVzdCwgZG93biB0byBDYWVzYXIsIHVyZ2VkIHRoYXQgdGhleSBiZSBwdXQgdG8gZGVhdGgsIGJ1dCBDYWVzYXIgcm9zZSBpbiBoaXMgcGxhY2UgYW5kIGRlbGl2ZXJlZCBhIGxvbmcgYW5kIHN0dWRpZWQgc3BlZWNoIGFnYWluc3QgdGhpcy4gSGUgcGxlYWRlZCB0aGF0IHRvIHB1dCB0byBkZWF0aCB3aXRob3V0IGxlZ2FsIHRyaWFsIG1lbiBvZiBoaWdoIHJhbmsgYW5kIGJyaWxsaWFudCBsaW5lYWdlIHdhcyBub3QsIGluIGhpcyBvcGluaW9uLCB0cmFkaXRpb25hbCBvciBqdXN0LCBleGNlcHQgdW5kZXIgZXh0cmVtZXN0IG5lY2Vzc2l0eTsgYnV0IHRoYXQgaWYgdGhleSBzaG91bGQgYmUgYm91bmQgYW5kIGtlcHQgaW4gY3VzdG9keSwgaW4gc3VjaCBjaXRpZXMgb2YgSXRhbHkgYXMgQ2ljZXJvIGhpbXNlbGYgbWlnaHQgZWxlY3QsIHVudGlsIHRoZSB3YXIgYWdhaW5zdCBDYXRpbGluZSBoYWQgYmVlbiBicm91Z2h0IHRvIGEgc3VjY2Vzc2Z1bCBlbmQsIHRoZSBzZW5hdGUgY291bGQgYWZ0ZXJ3YXJkcywgaW4gYSB0aW1lIG9mIHBlYWNlIGFuZCBhdCB0aGVpciBsZWlzdXJlLCB2b3RlIHVwb24gdGhlIGNhc2Ugb2YgZWFjaCBvbmUgb2YgdGhlbS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG9waW5pb24gc2VlbWVkIHNvIGh1bWFuZSwgYW5kIHRoZSBzcGVlY2ggaW4gc3VwcG9ydCBvZiBpdCB3YXMgbWFkZSB3aXRoIHN1Y2ggcG93ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjIuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIE1pbm9yPC90aXRsZT4sIHh4aWkuIDQ8L2JpYmw+IGYuPC9ub3RlPiB0aGF0IG5vdCBvbmx5IHRob3NlIHdobyByb3NlIHRvIHNwZWFrIGFmdGVyIENhZXNhciBzaWRlZCB3aXRoIGhpbSwgYnV0IG1hbnkgYWxzbyBvZiB0aG9zZSB3aG8gaGFkIHByZWNlZGVkIGhpbSB0b29rIGJhY2sgdGhlIG9waW5pb25zIHdoaWNoIHRoZXkgaGFkIGV4cHJlc3NlZCBhbmQgd2VudCBvdmVyIHRvIGhpcywgdW50aWwgdGhlIHF1ZXN0aW9uIGNhbWUgcm91bmQgdG8gQ2F0byBhbmQgQ2F0dWx1cy4gVGhlc2Ugd2FybWx5IG9wcG9zZWQgQ2Flc2FyJ3MgcHJvcG9zYWwsIGFuZCBDYXRvIGV2ZW4gaGVscGVkIHRvIHJhaXNlIHN1c3BpY2lvbiBhZ2FpbnN0IENhZXNhciBieSB3aGF0IGhlIHNhaWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIE1pbm9yPC90aXRsZT4sIGNoYXB0ZXIgeHhpaWk8L2JpYmw+Ljwvbm90ZT4gQXMgYSByZXN1bHQsIHRoZSBtZW4gd2VyZSBoYW5kZWQgb3ZlciB0byB0aGUgZXhlY3V0aW9uZXIsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYW55IG9mIHRoZSB5b3VuZyBtZW4gd2hvIGF0IHRoYXQgdGltZSBmb3JtZWQgYSBib2R5LWd1YXJkIGZvciBDaWNlcm8gcmFuIHRvZ2V0aGVyIHdpdGggZHJhd24gc3dvcmRzIGFuZCB0aHJlYXRlbmVkIENhZXNhciBhcyBoZSB3YXMgbGVhdmluZyB0aGUgc2VuYXRlLiBCdXQgQ3VyaW8sIGFzIHdlIGFyZSB0b2xkLCB0aHJldyBoaXMgdG9nYSByb3VuZCBDYWVzYXIgYW5kIGdvdCBoaW0gYXdheSwgd2hpbGUgQ2ljZXJvIGhpbXNlbGYsIHdoZW4gdGhlIHlvdW5nIG1lbiBsb29rZWQgdG8gaGltIGZvciBhIHNpZ24sIHNob29rIGhpcyBoZWFkLCBlaXRoZXIgdGhyb3VnaCBmZWFyIG9mIHRoZSBwZW9wbGUsIG9yIGJlY2F1c2UgaGUgdGhvdWdodCB0aGUgbXVyZGVyIHdvdWxkIGJlIHdob2xseSBjb250cmFyeSB0byBsYXcgYW5kIGp1c3RpY2UuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaWYgdGhpcyBpcyB0cnVlLCBJIGRvIG5vdCBzZWUgd2h5IENpY2VybyBkaWQgbm90IG1lbnRpb24gaXQgaW4gdGhlIHRyZWF0aXNlIG9uIGhpcyBjb25zdWxzaGlwOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk5vIGxvbmdlciBleHRhbnQuPC9ub3RlPiBob3dldmVyLCBoZSB3YXMgYWZ0ZXJ3YXJkcyBibGFtZWQgZm9yIG5vdCBoYXZpbmcgaW1wcm92ZWQgdGhhdCBiZXN0IG9mIGFsbCBvcHBvcnR1bml0aWVzIGZvciByZW1vdmluZyBDYWVzYXIuIEluc3RlYWQsIGhlIHNob3dlZCBhIGNvd2FyZGx5IGZlYXIgb2YgdGhlIHBlb3BsZSwgd2hvIHdlcmUgZXh0cmF2YWdhbnRseSBhdHRhY2hlZCB0byBDYWVzYXI7IGluIGZhY3QsIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkLCB3aGVuIENhZXNhciBjYW1lIGludG8gdGhlIHNlbmF0ZSBhbmQgdHJpZWQgdG8gZGVmZW5kIGhpbXNlbGYgaW4gdGhlIG1hdHRlcnMgd2hlcmVpbiBzdXNwaWNpb24gaGFkIGJlZW4gZml4ZWQgdXBvbiBoaW0sIGFuZCBtZXQgd2l0aCBhIHR1bXVsdCBvZiBkaXNhcHByb3ZhbCwgdGhlIHBlb3BsZSwgc2VlaW5nIHRoYXQgdGhlIHNlc3Npb24gb2YgdGhlIHNlbmF0ZSB3YXMgbGFzdGluZyBhIGxvbmdlciB0aW1lIHRoYW4gdXN1YWwsIGNhbWUgdXAgd2l0aCBsb3VkIGNyaWVzIGFuZCBzdXJyb3VuZGVkIHRoZSBzZW5hdGUtaG91c2UsIGRlbWFuZGluZyBDYWVzYXIsIGFuZCBvcmRlcmluZyB0aGUgc2VuYXRlIHRvIGxldCBoaW0gZ28uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBmb3IgdGhpcyByZWFzb24sIHRvbywgdGhhdCBDYXRvLCBmZWFyaW5nIGFib3ZlIGFsbCB0aGluZ3MgYSByZXZvbHV0aW9uYXJ5IG1vdmVtZW50IHNldCBvbiBmb290IGJ5IHRoZSBwb29yZXIgY2xhc3Nlcywgd2hvIHdlcmUgc2V0dGluZyB0aGUgd2hvbGUgbXVsdGl0dWRlIG9uIGZpcmUgd2l0aCB0aGUgaG9wZXMgd2hpY2ggdGhleSBmaXhlZCB1cG9uIENhZXNhciwgcGVyc3VhZGVkIHRoZSBzZW5hdGUgdG8gYXNzaWduIHRoZW0gYSBtb250aGx5IGFsbG93YW5jZSBvZiBncmFpbiwgaW4gY29uc2VxdWVuY2Ugb2Ygd2hpY2ggYW4gYW5udWFsIG91dGxheSBvZiBzZXZlbiBtaWxsaW9uIGZpdmUgaHVuZHJlZCB0aG91c2FuZCBkcmFjaG1hcyB3YXMgYWRkZWQgdG8gdGhlIG90aGVyIGV4cGVuZGl0dXJlcyBvZiB0aGUgc3RhdGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIE1pbm9yPC90aXRsZT4sIHh4dmkuIDE8L2JpYmw+Ljwvbm90ZT4gSG93ZXZlciwgdGhlIGdyZWF0IGZlYXIgd2hpY2ggcHJldmFpbGVkIGF0IHRoZSB0aW1lIHdhcyBtYW5pZmVzdGx5IHF1ZW5jaGVkIGJ5IHRoaXMgbWVhc3VyZSwgYW5kIHRoZSBncmVhdGVzdCBwYXJ0IG9mIENhZXNhcidzIHBvd2VyIHdhcyBicm9rZW4gZG93biBhbmQgZGlzc2lwYXRlZCBpbiB0aGUgbmljayBvZiB0aW1lLCBzaW5jZSBoZSB3YXMgcHJhZXRvciBlbGVjdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Gb3IgdGhlIHllYXIgNjIgQi5DLjwvbm90ZT4gYW5kIHdvdWxkIGJlIG1vcmUgZm9ybWlkYWJsZSBvbiBhY2NvdW50IG9mIGhpcyBvZmZpY2UuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlcmUgd2VyZSBubyBkaXN0dXJiYW5jZXMgaW4gY29uc2VxdWVuY2Ugb2YgQ2Flc2FyJ3MgcHJhZXRvcnNoaXAsIGJ1dCBhbiB1bnBsZWFzYW50IGluY2lkZW50IGhhcHBlbmVkIGluIGhpcyBmYW1pbHkuIFB1YmxpdXMgQ2xvZGl1cyB3YXMgYSBtYW4gb2YgcGF0cmljaWFuIGJpcnRoLCBhbmQgY29uc3BpY3VvdXMgZm9yIHdlYWx0aCBhbmQgZWxvcXVlbmNlLCBidXQgaW4gaW5zb2xlbmNlIGFuZCBlZmZyb250ZXJ5IGhlIHN1cnBhc3NlZCBhbGwgdGhlIG5vdG9yaW91cyBzY291bmRyZWxzIG9mIGhpcyB0aW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1hbiB3YXMgaW4gbG92ZSB3aXRoIFBvbXBlaWEgdGhlIHdpZmUgb2YgQ2Flc2FyLCBhbmQgc2hlIHdhcyBub3QgdW53aWxsaW5nLiBCdXQgY2xvc2Ugd2F0Y2ggd2FzIGtlcHQgdXBvbiB0aGUgd29tZW4ncyBhcGFydG1lbnRzLCBhbmQgQXVyZWxpYSwgQ2Flc2FyJ3MgbW90aGVyLCBhIHdvbWFuIG9mIGRpc2NyZXRpb24sIHdvdWxkIG5ldmVyIGxldCB0aGUgeW91bmcgd2lmZSBvdXQgb2YgaGVyIHNpZ2h0LCBhbmQgbWFkZSBpdCBkaWZmaWN1bHQgYW5kIGRhbmdlcm91cyBmb3IgdGhlIGxvdmVycyB0byBoYXZlIGFuIGludGVydmlldy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgUm9tYW5zIGhhdmUgYSBnb2RkZXNzIHdob20gdGhleSBjYWxsIEJvbmEsIGNvcnJlc3BvbmRpbmcgdG8gdGhlIEdyZWVrIEd5bmFlY2VpYS4gVGhlIFBocnlnaWFucyBjbGFpbSB0aGlzIGdvZGRlc3MgYXMgdGhlaXIgb3duLCBhbmQgc2F5IHRoYXQgc2hlIHdhcyB0aGUgbW90aGVyIG9mIEtpbmcgTWlkYXM7IHRoZSBSb21hbnMgc2F5IHNoZSB3YXMgYSBEcnlhZCBueW1waCBhbmQgdGhlIHdpZmUgb2YgRmF1bnVzOyB0aGUgR3JlZWtzIHRoYXQgc2hlIHdhcyB0aGUgdW5uYW1lYWJsZSBvbmUgYW1vbmcgdGhlIG1vdGhlcnMgb2YgRGlvbnlzdXMuIEFuZCB0aGlzIGlzIHRoZSByZWFzb24gd2h5IHRoZSB3b21lbiBjb3ZlciB0aGVpciBib290aHMgd2l0aCB2aW5lLWJyYW5jaGVzIHdoZW4gdGhleSBjZWxlYnJhdGUgaGVyIGZlc3RpdmFsLCBhbmQgd2h5IGEgc2FjcmVkIHNlcnBlbnQgaXMgZW50aHJvbmVkIGJlc2lkZSB0aGUgZ29kZGVzcyBpbiBjb25mb3JtaXR5IHdpdGggdGhlIG15dGguIEl0IGlzIG5vdCBsYXdmdWwgZm9yIGEgbWFuIHRvIGF0dGVuZCB0aGUgc2FjcmVkIGNlcmVtb25pZXMsIG5vciBldmVuIHRvIGJlIGluIHRoZSBob3VzZSB3aGVuIHRoZXkgYXJlIGNlbGVicmF0ZWQ7IGJ1dCB0aGUgd29tZW4sIGFwYXJ0IGJ5IHRoZW1zZWx2ZXMsIGFyZSBzYWlkIHRvIHBlcmZvcm0gbWFueSByaXRlcyBkdXJpbmcgdGhlaXIgc2FjcmVkIHNlcnZpY2Ugd2hpY2ggYXJlIE9ycGhpYyBpbiB0aGVpciBjaGFyYWN0ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIHRoZSB0aW1lIGZvciB0aGUgZmVzdGl2YWwgaXMgYXQgaGFuZCwgdGhlIGNvbnN1bCBvciBwcmFldG9yIGF0IHdob3NlIGhvdXNlIGl0IGlzIHRvIGJlIGhlbGQgZ29lcyBhd2F5LCBhbmQgZXZlcnkgbWFsZSB3aXRoIGhpbSwgd2hpbGUgaGlzIHdpZmUgdGFrZXMgcG9zc2Vzc2lvbiBvZiB0aGUgcHJlbWlzZXMgYW5kIHB1dHMgdGhlbSBpbiBkdWUgYXJyYXkuIFRoZSBtb3N0IGltcG9ydGFudCByaXRlcyBhcmUgY2VsZWJyYXRlZCBieSBuaWdodCwgd2hlbiBtaXJ0aCBhdHRlbmRzIHRoZSByZXZlbHMsIGFuZCBtdWNoIG11c2ljLCB0b28sIGlzIGhlYXJkLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgdGltZSBvZiB3aGljaCBJIHNwZWFrLCBQb21wZWlhIHdhcyBjZWxlYnJhdGluZyB0aGlzIGZlc3RpdmFsLCBhbmQgQ2xvZGl1cywgd2hvIHdhcyBzdGlsbCBiZWFyZGxlc3MgYW5kIG9uIHRoaXMgYWNjb3VudCB0aG91Z2h0IHRvIHBhc3MgdW5ub3RpY2VkLCBhc3N1bWVkIHRoZSBkcmVzcyBhbmQgaW1wbGVtZW50cyBvZiBhIGx1dGUtZ2lybCBhbmQgd2VudCB0byB0aGUgaG91c2UsIGxvb2tpbmcgbGlrZSBhIHlvdW5nIHdvbWFuLiBIZSBmb3VuZCB0aGUgZG9vciBvcGVuLCBhbmQgd2FzIGJyb3VnaHQgaW4gc2FmZWx5IGJ5IHRoZSBtYWlkLXNlcnZhbnQgdGhlcmUsIHdobyB3YXMgaW4gdGhlIHNlY3JldDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGFmdGVyIHNoZSBoYWQgcnVuIG9uIGFoZWFkIHRvIHRlbGwgUG9tcGVpYSBhbmQgc29tZSB0aW1lIGhhZCBlbGFwc2VkLCBDbG9kaXVzIGhhZCBub3QgdGhlIHBhdGllbmNlIHRvIHdhaXQgd2hlcmUgaGUgaGFkIGJlZW4gbGVmdCwgYW5kIHNvLCBhcyBoZSB3YXMgd2FuZGVyaW5nIGFib3V0IGluIHRoZSBob3VzZSAoYSBsYXJnZSBvbmUpIGFuZCB0cnlpbmcgdG8gYXZvaWQgdGhlIGxpZ2h0cywgYW4gYXR0ZW5kYW50IG9mIEF1cmVsaWEgY2FtZSB1cG9uIGhpbSBhbmQgYXNrZWQgaGltIHRvIHBsYXkgd2l0aCBoZXIsIGFzIG9uZSB3b21hbiB3b3VsZCBhbm90aGVyLCBhbmQgd2hlbiBoZSByZWZ1c2VkLCBzaGUgZHJhZ2dlZCBoaW0gZm9yd2FyZCBhbmQgYXNrZWQgd2hvIGhlIHdhcyBhbmQgd2hlbmNlIGhlIGNhbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNsb2RpdXMgYW5zd2VyZWQgdGhhdCBoZSB3YXMgd2FpdGluZyBmb3IgUG9tcGVpYSdzIEFicmEgKHRoaXMgd2FzIHRoZSB2ZXJ5IG5hbWUgYnkgd2hpY2ggdGhlIG1haWQgd2FzIGNhbGxlZCksIGFuZCBoaXMgdm9pY2UgYmV0cmF5ZWQgaGltLiBUaGUgYXR0ZW5kYW50IG9mIEF1cmVsaWEgYXQgb25jZSBzcHJhbmcgYXdheSB3aXRoIGEgc2NyZWFtIHRvIHRoZSBsaWdodHMgYW5kIHRoZSB0aHJvbmcsIGNyeWluZyBvdXQgdGhhdCBzaGUgaGFkIGNhdWdodCBhIG1hbi4gVGhlIHdvbWVuIHdlcmUgcGFuaWMtc3RyaWNrZW4sIGFuZCBBdXJlbGlhIHB1dCBhIHN0b3AgdG8gdGhlIG15c3RpYyByaXRlcyBvZiB0aGUgZ29kZGVzcyBhbmQgY292ZXJlZCB1cCB0aGUgZW1ibGVtcy4gVGhlbiBzaGUgb3JkZXJlZCB0aGUgZG9vcnMgdG8gYmUgY2xvc2VkIGFuZCB3ZW50IGFib3V0IHRoZSBob3VzZSB3aXRoIHRvcmNoZXMsIHNlYXJjaGluZyBmb3IgQ2xvZGl1cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIGZvdW5kIHdoZXJlIGhlIGhhZCB0YWtlbiByZWZ1Z2UsIGluIHRoZSBjaGFtYmVyIG9mIHRoZSBnaXJsIHdobyBoYWQgbGV0IGhpbSBpbnRvIHRoZSBob3VzZTsgYW5kIHdoZW4gdGhleSBzYXcgd2hvIGhlIHdhcywgdGhlIHdvbWVuIGRyb3ZlIGhpbSBvdXQgb2YgZG9vcnMuIFRoZW4gYXQgb25jZSwgYW5kIGluIHRoZSBuaWdodCwgdGhleSB3ZW50IG9mZiBhbmQgdG9sZCB0aGUgbWF0dGVyIHRvIHRoZWlyIGh1c2JhbmRzLCBhbmQgd2hlbiBkYXkgY2FtZSBhIHJlcG9ydCBzcHJlYWQgdGhyb3VnaCB0aGUgY2l0eSB0aGF0IENsb2RpdXMgaGFkIGNvbW1pdHRlZCBzYWNyaWxlZ2UgYW5kIG93ZWQgc2F0aXNmYWN0aW9uLCBub3Qgb25seSB0byB0aG9zZSB3aG9tIGhlIGhhZCBpbnN1bHRlZCwgYnV0IGFsc28gdG8gdGhlIGNpdHkgYW5kIHRvIHRoZSBnb2RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgb25lIG9mIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIGluZGljdGVkIENsb2RpdXMgZm9yIHNhY3JpbGVnZSwgYW5kIHRoZSBtb3N0IGluZmx1ZW50aWFsIHNlbmF0b3JzIGxlYWd1ZWQgdGhlbXNlbHZlcyB0b2dldGhlciBhbmQgYm9yZSB3aXRuZXNzIGFnYWluc3QgaGltIHRoYXQsIGFtb25nIG90aGVyIHNob2NraW5nIGFib21pbmF0aW9ucywgaGUgaGFkIGNvbW1pdHRlZCBhZHVsdGVyeSB3aXRoIGhpcyBzaXN0ZXIsIHdobyB3YXMgdGhlIHdpZmUgb2YgTHVjdWxsdXMuIEJ1dCBhZ2FpbnN0IHRoZSBlYWdlciBlZmZvcnRzIG9mIHRoZXNlIG1lbiB0aGUgcGVvcGxlIGFycmF5ZWQgdGhlbXNlbHZlcyBpbiBkZWZlbmNlIG9mIENsb2RpdXMsIGFuZCB3ZXJlIG9mIGdyZWF0IGFzc2lzdGFuY2UgdG8gaGltIHdpdGggdGhlIGp1cm9ycyBpbiB0aGUgY2FzZSwgd2hvIHdlcmUgdGVycm9yLXN0cmlja2VuIGFuZCBhZnJhaWQgb2YgdGhlIG11bHRpdHVkZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIGRpdm9yY2VkIFBvbXBlaWEgYXQgb25jZSwgYnV0IHdoZW4gaGUgd2FzIHN1bW1vbmVkIHRvIHRlc3RpZnkgYXQgdGhlIHRyaWFsLCBoZSBzYWlkIGhlIGtuZXcgbm90aGluZyBhYm91dCB0aGUgbWF0dGVycyB3aXRoIHdoaWNoIENsb2RpdXMgd2FzIGNoYXJnZWQuIEhpcyBzdGF0ZW1lbnQgYXBwZWFyZWQgc3RyYW5nZSwgYW5kIHRoZSBwcm9zZWN1dG9yIHRoZXJlZm9yZSBhc2tlZCwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHRoZW4sIGRpZHN0IHRob3UgZGl2b3JjZSB0aHkgd2lmZT88L3E+IAoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CZWNhdXNlLDwvcT4gc2FpZCBDYWVzYXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB0aG91Z2h0IG15IHdpZmUgb3VnaHQgbm90IGV2ZW4gdG8gYmUgdW5kZXIgc3VzcGljaW9uPC9xPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPlNvbWUgc2F5IHRoYXQgQ2Flc2FyIG1hZGUgdGhpcyBkZXBvc2l0aW9uIGhvbmVzdGx5OyBidXQgYWNjb3JkaW5nIHRvIG90aGVycyBpdCB3YXMgbWFkZSB0byBncmF0aWZ5IHRoZSBwZW9wbGUsIHdobyB3ZXJlIGRldGVybWluZWQgdG8gcmVzY3VlIENsb2RpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBDbG9kaXVzIHdhcyBhY3F1aXR0ZWQgb2YgdGhlIGNoYXJnZSwgdGhlIG1ham9yaXR5IG9mIHRoZSBqdXJvcnMgZ2l2aW5nIHRoZWlyIHZlcmRpY3RzIGluIGlsbGVnaWJsZSB3cml0aW5nLCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgbmVpdGhlciByaXNrIHRoZWlyIGxpdmVzIHdpdGggdGhlIHBvcHVsYWNlIGJ5IGNvbmRlbW5pbmcgaGltIG5vciBnZXQgYSBiYWQgbmFtZSBhbW9uZyB0aGUgbm9iaWxpdHkgYnkgYWNxdWl0dGluZyBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNhY3JpbGVnZSBhbmQgdHJpYWwgb2YgQ2xvZGl1cyBhcmUgZGVzY3JpYmVkIGF0IGxlbmd0aCBhbHNvIGluIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAyOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4eHZpaWkuIGFuZCB4eGl4PC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5JbW1lZGlhdGVseSBhZnRlciBoaXMgcHJhZXRvcnNoaXAgQ2Flc2FyIHJlY2VpdmVkIFNwYWluIGFzIGhpcyBwcm92aW5jZSwgYW5kIHNpbmNlIGhlIGZvdW5kIGl0IGhhcmQgdG8gYXJyYW5nZSBtYXR0ZXJzIHdpdGggaGlzIGNyZWRpdG9ycywgd2hvIG9ic3RydWN0ZWQgaGlzIGRlcGFydHVyZSBhbmQgd2VyZSBjbGFtb3JvdXMsIGhlIGhhZCByZWNvdXJzZSB0byBDcmFzc3VzLCB0aGUgcmljaGVzdCBvZiB0aGUgUm9tYW5zLCB3aG8gaGFkIG5lZWQgb2YgQ2Flc2FyJ3Mgdmlnb3VyIGFuZCBmaXJlIGZvciBoaXMgcG9saXRpY2FsIGNhbXBhaWduIGFnYWluc3QgUG9tcGV5LiBBbmQgaXQgd2FzIG9ubHkgYWZ0ZXIgQ3Jhc3N1cyBoYWQgbWV0IHRoZSBkZW1hbmRzIG9mIHRoZSBtb3N0IGltcG9ydHVuYXRlIGFuZCBpbmV4b3JhYmxlIG9mIHRoZXNlIGNyZWRpdG9ycyBhbmQgZ2l2ZW4gc3VyZXR5IGZvciBlaWdodCBodW5kcmVkIGFuZCB0aGlydHkgdGFsZW50cywgdGhhdCBDYWVzYXIgY291bGQgZ28gb3V0IHRvIGhpcyBwcm92aW5jZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYXJseSBpbiA2MSBCLkMuPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2UgYXJlIHRvbGQgdGhhdCwgYXMgaGUgd2FzIGNyb3NzaW5nIHRoZSBBbHBzIGFuZCBwYXNzaW5nIGJ5IGEgYmFyYmFyaWFuIHZpbGxhZ2Ugd2hpY2ggaGFkIHZlcnkgZmV3IGluaGFiaXRhbnRzIGFuZCB3YXMgYSBzb3JyeSBzaWdodCwgaGlzIGNvbXBhbmlvbnMgYXNrZWQgd2l0aCBtaXJ0aCBhbmQgbGF1Z2h0ZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FuIGl0IGJlIHRoYXQgaGVyZSB0b28gdGhlcmUgYXJlIGFtYml0aW91cyBzdHJpZmVzIGZvciBvZmZpY2UsIHN0cnVnZ2xlcyBmb3IgcHJpbWFjeSwgYW5kIG11dHVhbCBqZWFsb3VzaWVzIG9mIHBvd2VyZnVsIG1lbj88L3E+IFdoZXJldXBvbiBDYWVzYXIgc2FpZCB0byB0aGVtIGluIGFsbCBzZXJpb3VzbmVzcywgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdvdWxkIHJhdGhlciBiZSBmaXJzdCBoZXJlIHRoYW4gc2Vjb25kIGF0IFJvbWU8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SW4gbGlrZSBtYW5uZXIgd2UgYXJlIHRvbGQgYWdhaW4gdGhhdCwgaW4gU3BhaW4sIHdoZW4gaGUgd2FzIGF0IGxlaXN1cmUgYW5kIHdhcyByZWFkaW5nIGZyb20gdGhlIGhpc3Rvcnkgb2YgQWxleGFuZGVyLCBoZSB3YXMgbG9zdCBpbiB0aG91Z2h0IGZvciBhIGxvbmcgdGltZSwgYW5kIHRoZW4gYnVyc3QgaW50byB0ZWFycy4gSGlzIGZyaWVuZHMgd2VyZSBhc3RvbmlzaGVkLCBhbmQgYXNrZWQgdGhlIHJlYXNvbiBmb3IgaGlzIHRlYXJzLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvIHlvdSBub3QgdGhpbmssPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPml0IGlzIG1hdHRlciBmb3Igc29ycm93IHRoYXQgd2hpbGUgQWxleGFuZGVyLCBhdCBteSBhZ2UsIHdhcyBhbHJlYWR5IGtpbmcgb2Ygc28gbWFueSBwZW9wbGVzLCBJIGhhdmUgYXMgeWV0IGFjaGlldmVkIG5vIGJyaWxsaWFudCBzdWNjZXNzPzwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U3VldG9uaXVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRpdi4gSnVsLjwvdGl0bGU+IDc8L2JpYmw+KSBhbmQgRGlvIENhc3NpdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDM3LjUyLjIiPnh4eHZpaS4gNTIsIDI8L2JpYmw+KSBjb25uZWN0IHRoaXMgYW5lY2RvdGUgbW9yZSBwcm9wZXJseSB3aXRoIENhZXNhcidzIHF1YWVzdG9yc2hpcCBpbiBTcGFpbiAoNjcgQi5DLikgd2hlbiBoZSB3YXMgdGhpcnR5LXRocmVlIHllYXJzIG9mIGFnZSwgdGhlIGFnZSBhdCB3aGljaCBBbGV4YW5kZXIgZGllZC48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbnkgcmF0ZSwgYXMgc29vbiBhcyBoZSByZWFjaGVkIFNwYWluIGhlIHNldCBoaW1zZWxmIHRvIHdvcmssIGFuZCBpbiBhIGZldyBkYXlzIHJhaXNlZCB0ZW4gY29ob3J0cyBpbiBhZGRpdGlvbiB0byB0aGUgdHdlbnR5IHdoaWNoIHdlcmUgdGhlcmUgYmVmb3JlLiBUaGVuIGhlIGxlZCBoaXMgYXJteSBhZ2FpbnN0IHRoZSBDYWxsYWljaSBhbmQgTHVzaXRhbmksIG92ZXJwb3dlcmVkIHRoZW0sIGFuZCBtYXJjaGVkIG9uIGFzIGZhciBhcyB0aGUgb3V0ZXIgc2VhLCBzdWJkdWluZyB0aGUgdHJpYmVzIHdoaWNoIGJlZm9yZSB3ZXJlIG5vdCBvYmVkaWVudCB0byBSb21lLiBBZnRlciBicmluZ2luZyB0aGUgd2FyIHRvIGEgc3VjY2Vzc2Z1bCBjbG9zZSwgaGUgd2FzIGVxdWFsbHkgaGFwcHkgaW4gYWRqdXN0aW5nIHRoZSBwcm9ibGVtcyBvZiBwZWFjZSwgYnkgZXN0YWJsaXNoaW5nIGNvbmNvcmQgYmV0d2VlbiB0aGUgY2l0aWVzLCBhbmQgcGFydGljdWxhcmx5IGJ5IGhlYWxpbmcgdGhlIGRpc3NlbnNpb25zIGJldHdlZW4gZGVidG9ycyBhbmQgY3JlZGl0b3JzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgb3JkYWluZWQgdGhhdCB0aGUgY3JlZGl0b3Igc2hvdWxkIGFubnVhbGx5IHRha2UgdHdvIHRoaXJkcyBvZiBoaXMgZGVidG9yJ3MgaW5jb21lLCBhbmQgdGhhdCB0aGUgb3duZXIgb2YgdGhlIHByb3BlcnR5IHNob3VsZCB1c2UgdGhlIHJlc3QsIGFuZCBzbyBvbiB1bnRpbCB0aGUgZGVidCB3YXMgY2FuY2VsbGVkLiBJbiBoaWdoIHJlcHV0ZSBmb3IgdGhpcyBhZG1pbmlzdHJhdGlvbiBoZSByZXRpcmVkIGZyb20gdGhlIHByb3ZpbmNlOyBoZSBoYWQgYmVjb21lIHdlYWx0aHkgaGltc2VsZiwgaGFkIGVucmljaGVkIGhpcyBzb2xkaWVycyBmcm9tIHRoZWlyIGNhbXBhaWducywgYW5kIGhhZCBiZWVuIHNhbHV0ZWQgYnkgdGhlbSBhcyBJbXBlcmF0b3IuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgc2luY2UgdGhvc2Ugd2hvIHN1ZWQgZm9yIHRoZSBwcml2aWxlZ2Ugb2YgYSB0cml1bXBoIG11c3QgcmVtYWluIG91dHNpZGUgdGhlIGNpdHksIHdoaWxlIHRob3NlIHdobyB3ZXJlIGNhbmRpZGF0ZXMgZm9yIHRoZSBjb25zdWxzaGlwIG11c3QgYmUgcHJlc2VudCBpbiB0aGUgY2l0eSwgQ2Flc2FyIHdhcyBpbiBhIGdyZWF0IGRpbGVtbWEsIGFuZCBiZWNhdXNlIGhlIGhhZCByZWFjaGVkIGhvbWUgYXQgdGhlIHZlcnkgdGltZSBmb3IgdGhlIGNvbnN1bGFyIGVsZWN0aW9ucywgaGUgc2VudCBhIHJlcXVlc3QgdG8gdGhlIHNlbmF0ZSB0aGF0IGhlIG1pZ2h0IGJlIHBlcm1pdHRlZCB0byBvZmZlciBoaW1zZWxmIGZvciB0aGUgY29uc3Vsc2hpcCA8Zm9yZWlnbiBsYW5nPSJsYSI+aW4gYWJzZW50acOiPC9mb3JlaWduPiwgdGhyb3VnaCB0aGUgYWdlbmN5IG9mIGhpcyBmcmllbmRzLiBCdXQgc2luY2UgQ2F0byBiZWdhbiBieSBpbnNpc3RpbmcgdXBvbiB0aGUgbGF3IGluIG9wcG9zaXRpb24gdG8gQ2Flc2FyJ3MgcmVxdWVzdCwgYW5kIHRoZW4sIHdoZW4gaGUgc2F3IHRoYXQgbWFueSBzZW5hdG9ycyBoYWQgYmVlbiB3b24gb3ZlciBieSBDYWVzYXIncyBhdHRlbnRpb25zLCBzdGF2ZWQgdGhlIG1hdHRlciBvZmYgYnkgY29uc3VtaW5nIHRoZSBkYXkgaW4gc3BlYWtpbmcsIENhZXNhciBkZWNpZGVkIHRvIGdpdmUgdXAgdGhlIHRyaXVtcGggYW5kIHRyeSBmb3IgdGhlIGNvbnN1bHNoaXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIGFzIHNvb24gYXMgaGUgZW50ZXJlZCB0aGUgY2l0eSBoZSBhc3N1bWVkIGEgcG9saWN5IHdoaWNoIGRlY2VpdmVkIGV2ZXJ5b25lIGV4Y2VwdCBDYXRvLiBUaGlzIHBvbGljeSB3YXMgdG8gcmVjb25jaWxlIFBvbXBleSBhbmQgQ3Jhc3N1cywgdGhlIG1vc3QgaW5mbHVlbnRpYWwgbWVuIGluIHRoZSBjaXR5LiBUaGVzZSBtZW4gQ2Flc2FyIGJyb3VnaHQgdG9nZXRoZXIgaW4gZnJpZW5kc2hpcCBhZnRlciB0aGVpciBxdWFycmVsLCBhbmQgYnkgY29uY2VudHJhdGluZyB0aGVpciB1bml0ZWQgc3RyZW5ndGggdXBvbiBoaW1zZWxmLCBzdWNjZWVkZWQsIGJlZm9yZSBtZW4gd2VyZSBhd2FyZSBvZiBpdCwgYW5kIGJ5IGFuIGFjdCB3aGljaCBjb3VsZCBiZSBjYWxsZWQgb25lIG9mIGtpbmRuZXNzLCBpbiBjaGFuZ2luZyB0aGUgZm9ybSBvZiBnb3Zlcm5tZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgd2FzIG5vdCwgYXMgbW9zdCBtZW4gc3VwcG9zZWQsIHRoZSBxdWFycmVsIGJldHdlZW4gQ2Flc2FyIGFuZCBQb21wZXkgdGhhdCBicm91Z2h0IG9uIHRoZSBjaXZpbCB3YXJzLCBidXQgcmF0aGVyIHRoZWlyIGZyaWVuZHNoaXAsIHNpbmNlIHRoZXkgd29ya2VkIHRvZ2V0aGVyIGZvciB0aGUgb3ZlcnRocm93IG9mIHRoZSBhcmlzdG9jcmFjeSBpbiB0aGUgZmlyc3QgcGxhY2UsIGFuZCB0aGVuLCB3aGVuIHRoaXMgaGFkIGJlZW4gYWNjb21wbGlzaGVkLCB0aGV5IHF1YXJyZWxsZWQgd2l0aCBvbmUgYW5vdGhlci4gQW5kIENhdG8sIHdobyBvZnRlbiBmb3JldG9sZCB3aGF0IHdhcyB0byBjb21lIG9mIHRoZWlyIGFsbGlhbmNlLCBnb3QgdGhlIHJlcHV0YXRpb24gb2YgYSBtb3Jvc2UgYW5kIHRyb3VibGVzb21lIGZlbGxvdyBhdCB0aGUgdGltZSwgYnV0IGFmdGVyd2FyZHMgdGhhdCBvZiBhIHdpc2UsIHRob3VnaCB1bmZvcnR1bmF0ZSwgY291bnNlbGxvci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0Ny4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCB4bHZpaS4gMS01PC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIsIGhvd2V2ZXIsIGVuY29tcGFzc2VkIGFuZCBwcm90ZWN0ZWQgYnkgdGhlIGZyaWVuZHNoaXAgb2YgQ3Jhc3N1cyBhbmQgUG9tcGV5LCBlbnRlcmVkIHRoZSBjYW52YXNzIGZvciB0aGUgY29uc3Vsc2hpcDsgYW5kIGFzIHNvb24gYXMgaGUgaGFkIGJlZW4gdHJpdW1waGFudGx5IGVsZWN0ZWQsIGFsb25nIHdpdGggQ2FscHVybml1cyBCaWJ1bHVzLCBhbmQgaGFkIGVudGVyZWQgdXBvbiBoaXMgb2ZmaWNlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDU5IEIuQy48L25vdGU+IGhlIHByb3Bvc2VkIGxhd3Mgd2hpY2ggd2VyZSBiZWNvbWluZywgbm90IGZvciBhIGNvbnN1bCwgYnV0IGZvciBhIG1vc3QgcmFkaWNhbCB0cmlidW5lIG9mIHRoZSBwZW9wbGU7IGZvciB0byBncmF0aWZ5IHRoZSBtdWx0aXR1ZGUgaGUgaW50cm9kdWNlZCBzdW5kcnkgYWxsb3RtZW50cyBhbmQgZGlzdHJpYnV0aW9ucyBvZiBsYW5kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgc2VuYXRlIHRoZSBvcHBvc2l0aW9uIG9mIG1lbiBvZiB0aGUgYmV0dGVyIHNvcnQgZ2F2ZSBoaW0gdGhlIHByZXRleHQgd2hpY2ggaGUgaGFkIGxvbmcgZGVzaXJlZCwgYW5kIGNyeWluZyB3aXRoIGxvdWQgYWRqdXJhdGlvbnMgdGhhdCBoZSB3YXMgZHJpdmVuIGZvcnRoIGludG8gdGhlIHBvcHVsYXIgYXNzZW1ibHkgYWdhaW5zdCBoaXMgd2lzaGVzLCBhbmQgd2FzIGNvbXBlbGxlZCB0byBjb3VydCBpdHMgZmF2b3VyIGJ5IHRoZSBpbnNvbGVuY2UgYW5kIG9ic3RpbmFjeSBvZiB0aGUgc2VuYXRlLCBoZSBoYXN0ZW5lZCBiZWZvcmUgaXQsIGFuZCBzdGF0aW9uaW5nIENyYXNzdXMgb24gb25lIHNpZGUgb2YgaGltIGFuZCBQb21wZXkgb24gdGhlIG90aGVyLCBoZSBhc2tlZCB0aGVtIGlmIHRoZXkgYXBwcm92ZWQgaGlzIGxhd3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgZGVjbGFyZWQgdGhhdCB0aGV5IGRpZCBhcHByb3ZlIHRoZW0sIHdoZXJldXBvbiBoZSB1cmdlZCB0aGVtIHRvIGdpdmUgaGltIHRoZWlyIGFpZCBhZ2FpbnN0IHRob3NlIHdobyB0aHJlYXRlbmVkIHRvIG9wcG9zZSBoaW0gd2l0aCBzd29yZHMuIFRoZXkgcHJvbWlzZWQgaGltIHN1Y2ggYWlkLCBhbmQgUG9tcGV5IGFjdHVhbGx5IGFkZGVkIHRoYXQgaGUgd291bGQgY29tZSB1cCBhZ2FpbnN0IHN3b3JkcyB3aXRoIHN3b3JkIGFuZCBidWNrbGVyIHRvby4gQXQgdGhpcyBpbXB1bHNpdmUgYW5kIG1hZCBzcGVlY2gsIHVud29ydGh5IG9mIHRoZSBoaWdoIGVzdGVlbSBpbiB3aGljaCBQb21wZXkgc3Rvb2QgYW5kIHVuYmVjb21pbmcgdG8gdGhlIHJlc3BlY3Qgd2hpY2ggd2FzIGR1ZSB0byB0aGUgc2VuYXRlLCB0aGUgbm9iaWxpdHkgd2VyZSBkaXN0cmVzc2VkIGJ1dCB0aGUgcG9wdWxhY2Ugd2VyZSBkZWxpZ2h0ZWQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWVzYXIgdHJpZWQgdG8gYXZhaWwgaGltc2VsZiBzdGlsbCBtb3JlIG9mIHRoZSBpbmZsdWVuY2Ugb2YgUG9tcGV5LiBIZSBoYWQgYSBkYXVnaHRlciwgSnVsaWEsIHdobyB3YXMgYmV0cm90aGVkIHRvIFNlcnZpbGl1cyBDYWVwaW8uIFRoaXMgZGF1Z2h0ZXIgaGUgYmV0cm90aGVkIHRvIFBvbXBleSwgYW5kIHNhaWQgaGUgd291bGQgZ2l2ZSBQb21wZXkncyBkYXVnaHRlciBpbiBtYXJyaWFnZSB0byBTZXJ2aWxpdXMsIGFsdGhvdWdoIHNoZSB0b28gd2FzIG5vdCB1bmJldHJvdGhlZCwgYnV0IGhhZCBiZWVuIHByb21pc2VkIHRvIEZhdXN0dXMsIHRoZSBzb24gb2YgU3VsbGEuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIGxpdHRsZSB3aGlsZSBhZnRlcndhcmRzIENhZXNhciB0b29rIENhbHB1cm5pYSB0byB3aWZlLCBhIGRhdWdodGVyIG9mIFBpc28sIGFuZCBnb3QgUGlzbyBtYWRlIGNvbnN1bCBmb3IgdGhlIGNvbWluZyB5ZWFyLCBhbHRob3VnaCBoZXJlIHRvbyBDYXRvIHZlaGVtZW50bHkgcHJvdGVzdGVkLCBhbmQgY3JpZWQgb3V0IHRoYXQgaXQgd2FzIGludG9sZXJhYmxlIHRvIGhhdmUgdGhlIHN1cHJlbWUgcG93ZXIgcHJvc3RpdHV0ZWQgYnkgbWFycmlhZ2UgYWxsaWFuY2VzIGFuZCB0byBzZWUgbWVuIGhlbHBpbmcgb25lIGFub3RoZXIgdG8gcG93ZXJzIGFuZCBhcm1pZXMgYW5kIHByb3ZpbmNlcyBieSBtZWFucyBvZiB3b21lbi48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIENhZXNhcidzIGNvbGxlYWd1ZSwgQmlidWx1cywgc2luY2UgaGUgYXZhaWxlZCBub3RoaW5nIGJ5IG9ic3RydWN0aW5nIENhZXNhcidzIGxhd3MsIGJ1dCBvZnRlbiByYW4gdGhlIHJpc2sgd2l0aCBDYXRvIG9mIGJlaW5nIGtpbGxlZCBpbiB0aGUgZm9ydW0sIGhlIHNodXQgaGltc2VsZiB1cCBhdCBob21lIGZvciB0aGUgcmVtYWluZGVyIG9mIGhpcyB0ZXJtIG9mIG9mZmljZS4gUG9tcGV5LCBob3dldmVyLCBpbW1lZGlhdGVseSBhZnRlciBoaXMgbWFycmlhZ2UsIGZpbGxlZCB0aGUgZm9ydW0gd2l0aCBhcm1lZCBtZW4gYW5kIGhlbHBlZCB0aGUgcGVvcGxlIHRvIGVuYWN0IENhZXNhcidzIGxhd3MgYW5kIGdpdmUgaGltIGFzIGhpcyBjb25zdWxhciBwcm92aW5jZSBHYXVsIG9uIGJvdGggc2lkZXMgb2YgdGhlIEFscHMgZm9yIGZpdmUgeWVhcnMsIHRvZ2V0aGVyIHdpdGggSWxseXJpY3VtIGFuZCBmb3VyIGxlZ2lvbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIG9mIGNvdXJzZSwgdHJpZWQgdG8gc3BlYWsgYWdhaW5zdCB0aGVzZSBtZWFzdXJlcywgYnV0IENhZXNhciBoYWQgaGltIGxlZCBvZmYgdG8gcHJpc29uLCBzdXBwb3NpbmcgdGhhdCBoZSB3b3VsZCBhcHBlYWwgdG8gdGhlIHBvcHVsYXIgdHJpYnVuZXM7IGJ1dCB3aGVuIENhdG8gd2Fsa2VkIG9mZiB3aXRob3V0IGEgd29yZCBhbmQgQ2Flc2FyIHNhdyBub3Qgb25seSB0aGF0IHRoZSBtb3N0IGluZmx1ZW50aWFsIG1lbiB3ZXJlIGRpc3BsZWFzZWQsIGJ1dCBhbHNvIHRoYXQgdGhlIHBvcHVsYWNlLCBvdXQgb2YgcmVzcGVjdCBmb3IgQ2F0bydzIHZpcnR1ZSwgd2VyZSBmb2xsb3dpbmcgaGltIGluIHNpbGVuY2UgYW5kIHdpdGggZG93bmNhc3QgbG9va3MsIGhlIGhpbXNlbGYgc2VjcmV0bHkgYXNrZWQgb25lIG9mIHRoZSB0cmlidW5lcyB0byB0YWtlIENhdG8gb3V0IG9mIGFycmVzdC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+T2YgdGhlIG90aGVyIHNlbmF0b3JzLCBvbmx5IGEgdmVyeSBmZXcgdXNlZCB0byBnbyB3aXRoIENhZXNhciB0byB0aGUgc2VuYXRlOyB0aGUgcmVzdCwgaW4gZGlzcGxlYXN1cmUsIHN0YXllZCBhd2F5LiBDb25zaWRpdXMsIGEgdmVyeSBhZ2VkIHNlbmF0b3IsIG9uY2UgdG9sZCBDYWVzYXIgdGhhdCBoaXMgY29sbGVhZ3VlcyBkaWQgbm90IGNvbWUgdG9nZXRoZXIgYmVjYXVzZSB0aGV5IHdlcmUgYWZyYWlkIG9mIHRoZSBhcm1lZCBzb2xkaWVycy4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHRoZW4sPC9xPiBzYWlkIENhZXNhciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5kb3N0IHRob3UgdG9vIG5vdCBzdGF5IGF0IGhvbWUgb3V0IG9mIHRoZSBzYW1lIGZlYXI/PC9xPiBUbyB0aGlzIENvbnNpZGl1cyByZXBsaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJlY2F1c2UgbXkgb2xkIGFnZSBtYWtlcyBtZSBmZWFybGVzczsgZm9yIHRoZSBzaG9ydCBzcGFuIG9mIGxpZmUgdGhhdCBpcyBzdGlsbCBsZWZ0IG1lIGRvZXMgbm90IHJlcXVpcmUgbXVjaCBhbnhpb3VzIHRob3VnaHQ8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjkiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBtb3N0IGRpc2dyYWNlZnVsIHB1YmxpYyBtZWFzdXJlIG9mIHRoZSB0aW1lIHdhcyB0aG91Z2h0IHRvIGJlIHRoZSBlbGVjdGlvbiB0byB0aGUgdHJpYnVuZXNoaXAsIGR1cmluZyBDYWVzYXIncyBjb25zdWxhdGUsIG9mIHRoZSBub3RvcmlvdXMgQ2xvZGl1cywgd2hvIGhhZCB0cmVzcGFzc2VkIHVwb24gaGlzIHJpZ2h0cyBhcyBhIGh1c2JhbmQsIGFuZCB1cG9uIHRoZSBzZWNyZXQgbm9jdHVybmFsIHZpZ2lscy4gSGUgd2FzIGVsZWN0ZWQsIGhvd2V2ZXIsIGZvciB0aGUgb3ZlcnRocm93IG9mIENpY2VybzsgYW5kIENhZXNhciBkaWQgbm90IGdvIGZvcnRoIHVwb24gaGlzIGNhbXBhaWduIHVudGlsLCB3aXRoIHRoZSBoZWxwIG9mIENsb2RpdXMsIGhlIGhhZCByYWlzZWQgYSBzdWNjZXNzZnVsIGZhY3Rpb24gYWdhaW5zdCBDaWNlcm8gYW5kIGRyaXZlbiBoaW0gb3V0IG9mIEl0YWx5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMzAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeHh4LiBhbmQgeHh4aTwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGNvdXJzZSBvZiBDYWVzYXIncyBsaWZlIGJlZm9yZSBoaXMgR2FsbGljIGNhbXBhaWducy4gQnV0IHRoZSBwZXJpb2Qgb2YgdGhlIHdhcnMgd2hpY2ggaGUgYWZ0ZXJ3YXJkcyBmb3VnaHQsIGFuZCBvZiB0aGUgY2FtcGFpZ25zIGJ5IHdoaWNoIGhlIHN1Ymp1Z2F0ZWQgR2F1bCwgYXMgaWYgaGUgaGFkIG1hZGUgYW5vdGhlciBiZWdpbm5pbmcgYW5kIGVudGVyZWQgdXBvbiBhIGRpZmZlcmVudCBwYXRoIG9mIGxpZmUgYW5kIG9uZSBvZiBuZXcgYWNoaWV2ZW1lbnRzLCBwcm92ZWQgaGltIHRvIGJlIGluZmVyaW9yIGFzIHNvbGRpZXIgYW5kIGNvbW1hbmRlciB0byBubyBvbmUgc29ldmVyIG9mIHRob3NlIHdobyBoYXZlIHdvbiBtb3N0IGFkbWlyYXRpb24gZm9yIGxlYWRlcnNoaXAgYW5kIHNob3duIHRoZW1zZWx2ZXMgZ3JlYXRlc3QgdGhlcmVpbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TmF5LCBpZiBvbmUgY29tcGFyZSBoaW0gd2l0aCBzdWNoIG1lbiBhcyBGYWJpdXMgYW5kIFNjaXBpbyBhbmQgTWV0ZWxsdXMsIGFuZCB3aXRoIHRoZSBtZW4gb2YgaGlzIG93biB0aW1lIG9yIGEgbGl0dGxlIGJlZm9yZSBoaW0sIGxpa2UgU3VsbGEsIE1hcml1cywgdGhlIHR3byBMdWN1bGxpLCBvciBldmVuIFBvbXBleSBoaW1zZWxmLCB3aG9zZSBmYW1lIGZvciBldmVyeSBzb3J0IG9mIG1pbGl0YXJ5IGV4Y2VsbGVuY2Ugd2FzIGF0IHRoaXMgdGltZSBmbG93ZXJpbmcgb3V0IGFuZCByZWFjaGluZyB0byB0aGUgc2tpZXMsIENhZXNhciB3aWxsIGJlIGZvdW5kIHRvIHN1cnBhc3MgdGhlbSBhbGwgaW4gaGlzIGFjaGlldmVtZW50cy4gT25lIGhlIHN1cnBhc3NlZCBpbiB0aGUgZGlmZmljdWx0eSBvZiB0aGUgcmVnaW9ucyB3aGVyZSBoZSB3YWdlZCBoaXMgd2FyczsgYW5vdGhlciBpbiB0aGUgZ3JlYXQgZXh0ZW50IG9mIGNvdW50cnkgd2hpY2ggaGUgYWNxdWlyZWQ7IGFub3RoZXIgaW4gdGhlIG11bHRpdHVkZSBhbmQgbWlnaHQgb2YgdGhlIGVuZW1pZXMgb3ZlciB3aG9tIGhlIHdhcyB2aWN0b3Jpb3VzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbm90aGVyIGluIHRoZSBzYXZhZ2UgbWFubmVycyBhbmQgcGVyZmlkaW91cyBkaXNwb3NpdGlvbnMgb2YgdGhlIHBlb3BsZSB3aG9tIGhlIGNvbmNpbGlhdGVkOyBhbm90aGVyIGluIGhpcyByZWFzb25hYmxlbmVzcyBhbmQgbWlsZG5lc3MgdG93YXJkcyBoaXMgY2FwdGl2ZXM7IGFub3RoZXIgc3RpbGwgaW4gdGhlIGdpZnRzIGFuZCBmYXZvdXJzIHdoaWNoIGhlIGJlc3Rvd2VkIHVwb24gaGlzIHNvbGRpZXJzOyBhbmQgYWxsIGluIHRoZSBmYWN0IHRoYXQgaGUgZm91Z2h0IHRoZSBtb3N0IGJhdHRsZXMgYW5kIGtpbGxlZCB0aGUgbW9zdCBlbmVtaWVzLiBGb3IgYWx0aG91Z2ggaXQgd2FzIG5vdCBmdWxsIHRlbiB5ZWFycyB0aGF0IGhlIHdhZ2VkIHdhciBpbiBHYXVsLCBoZSB0b29rIGJ5IHN0b3JtIG1vcmUgdGhhbiBlaWdodCBodW5kcmVkIGNpdGllcywgc3ViZHVlZCB0aHJlZSBodW5kcmVkIG5hdGlvbnMsIGFuZCBmb3VnaHQgcGl0Y2hlZCBiYXR0bGVzIGF0IGRpZmZlcmVudCB0aW1lcyB3aXRoIHRocmVlIG1pbGxpb24gbWVuLCBvZiB3aG9tIGhlIHNsZXcgb25lIG1pbGxpb24gaW4gaGFuZCB0byBoYW5kIGZpZ2h0aW5nIGFuZCB0b29rIGFzIG1hbnkgbW9yZSBwcmlzb25lcnMuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzb2xkaWVycyBzaG93ZWQgc3VjaCBnb29kIHdpbGwgYW5kIHplYWwgaW4gaGlzIHNlcnZpY2UgdGhhdCB0aG9zZSB3aG8gaW4gdGhlaXIgcHJldmlvdXMgY2FtcGFpZ25zIGhhZCBiZWVuIGluIG5vIHdheSBzdXBlcmlvciB0byBvdGhlcnMgd2VyZSBpbnZpbmNpYmxlIGFuZCBpcnJlc2lzdGlibGUgaW4gY29uZnJvbnRpbmcgZXZlcnkgZGFuZ2VyIHRvIGVuaGFuY2UgQ2Flc2FyJ3MgZmFtZS4gU3VjaCBhIG1hbiwgZm9yIGluc3RhbmNlLCB3YXMgQWNpbGl1cywgd2hvLCBpbiB0aGUgc2VhLWZpZ2h0IGF0IE1hc3NhbGlhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkRlc2NyaWJlZCBieSBDYWVzYXIgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJlbGwuIENpdi48L3RpdGxlPmlpLiA0LTc8L2JpYmw+Ljwvbm90ZT4gYm9hcmRlZCBhIGhvc3RpbGUgc2hpcCBhbmQgaGFkIGhpcyByaWdodCBoYW5kIGN1dCBvZmYgd2l0aCBhIHN3b3JkLCBidXQgY2x1bmcgd2l0aCB0aGUgb3RoZXIgaGFuZCB0byBoaXMgc2hpZWxkLCBhbmQgZGFzaGluZyBpdCBpbnRvIHRoZSBmYWNlcyBvZiBoaXMgZm9lcywgcm91dGVkIHRoZW0gYWxsIGFuZCBnb3QgcG9zc2Vzc2lvbiBvZiB0aGUgdmVzc2VsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIGEgbWFuLCBhZ2Fpbiwgd2FzIENhc3NpdXMgU2NhZXZhLCB3aG8sIGluIHRoZSBiYXR0bGUgYXQgRHlycmhhY2hpdW0sIGhhZCBoaXMgZXllIHN0cnVjayBvdXQgd2l0aCBhbiBhcnJvdywgaGlzIHNob3VsZGVyIHRyYW5zZml4ZWQgd2l0aCBvbmUgamF2ZWxpbiBhbmQgaGlzIHRoaWdoIHdpdGggYW5vdGhlciwgYW5kIHJlY2VpdmVkIG9uIGhpcyBzaGllbGQgdGhlIGJsb3dzIG9mIG9uZSBodW5kcmVkIGFuZCB0aGlydHkgbWlzc2lsZXMuIEluIHRoaXMgcGxpZ2h0LCBoZSBjYWxsZWQgdGhlIGVuZW15IHRvIGhpbSBhcyB0aG91Z2ggaGUgd291bGQgc3VycmVuZGVyLiBUd28gb2YgdGhlbSwgYWNjb3JkaW5nbHksIGNvbWluZyB1cCwgaGUgbG9wcGVkIG9mZiB0aGUgc2hvdWxkZXIgb2Ygb25lIHdpdGggaGlzIHN3b3JkLCBzbW90ZSB0aGUgb3RoZXIgaW4gdGhlIGZhY2UgYW5kIHB1dCBoaW0gdG8gZmxpZ2h0LCBhbmQgY2FtZSBvZmYgc2FmZWx5IGhpbXNlbGYgd2l0aCB0aGUgYWlkIG9mIGhpcyBjb21yYWRlcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy41MyIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+QmVsbC4gQ2l2LjwvdGl0bGU+aWlpLiA1MzwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZ2FpbiwgaW4gQnJpdGFpbiwgd2hlbiB0aGUgZW5lbXkgaGFkIGZhbGxlbiB1cG9uIHRoZSBmb3JlbW9zdCBjZW50dXJpb25zLCB3aG8gaGFkIHBsdW5nZWQgaW50byBhIHdhdGVyeSBtYXJzaCwgYSBzb2xkaWVyLCB3aGlsZSBDYWVzYXIgaW4gcGVyc29uIHdhcyB3YXRjaGluZyB0aGUgYmF0dGxlLCBkYXNoZWQgaW50byB0aGUgbWlkc3Qgb2YgdGhlIGZpZ2h0LCBkaXNwbGF5ZWQgbWFueSBjb25zcGljdW91cyBkZWVkcyBvZiBkYXJpbmcsIGFuZCByZXNjdWVkIHRoZSBjZW50dXJpb25zLCBhZnRlciB0aGUgQmFyYmFyaWFucyBoYWQgYmVlbiByb3V0ZWQuIFRoZW4gaGUgaGltc2VsZiwgbWFraW5nIGhpcyB3YXkgd2l0aCBkaWZmaWN1bHR5IGFmdGVyIGFsbCB0aGUgcmVzdCwgcGx1bmdlZCBpbnRvIHRoZSBtdWRkeSBjdXJyZW50LCBhbmQgYXQgbGFzdCwgd2l0aG91dCBoaXMgc2hpZWxkLCBwYXJ0bHkgc3dpbW1pbmcgYW5kIHBhcnRseSB3YWRpbmcsIGdvdCBhY3Jvc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBhbmQgaGlzIGNvbXBhbnkgd2VyZSBhbWF6ZWQgYW5kIGNhbWUgdG8gbWVldCB0aGUgc29sZGllciB3aXRoIGNyaWVzIG9mIGpveTsgYnV0IGhlLCBpbiBncmVhdCBkZWplY3Rpb24sIGFuZCB3aXRoIGEgYnVyc3Qgb2YgdGVhcnMsIGNhc3QgaGltc2VsZiBhdCBDYWVzYXIncyBmZWV0LCBiZWdnaW5nIHBhcmRvbiBmb3IgdGhlIGxvc3Mgb2YgaGlzIHNoaWVsZC4gQWdhaW4sIGluIEFmcmljYSwgU2NpcGlvIGNhcHR1cmVkIGEgc2hpcCBvZiBDYWVzYXIncyBpbiB3aGljaCBHcmFuaXVzIFBldHJvLCB3aG8gaGFkIGJlZW4gYXBwb2ludGVkIHF1YWVzdG9yLCB3YXMgc2FpbGluZy4gT2YgdGhlIHJlc3Qgb2YgdGhlIHBhc3NlbmdlcnMgU2NpcGlvIG1hZGUgYm9vdHksIGJ1dCB0b2xkIHRoZSBxdWFlc3RvciB0aGF0IGhlIG9mZmVyZWQgaGltIGhpcyBsaWZlLiBHcmFuaXVzLCBob3dldmVyLCByZW1hcmtpbmcgdGhhdCBpdCB3YXMgdGhlIGN1c3RvbSB3aXRoIENhZXNhcidzIHNvbGRpZXJzIG5vdCB0byByZWNlaXZlIGJ1dCB0byBvZmZlciBtZXJjeSwga2lsbGVkIGhpbXNlbGYgd2l0aCBhIGJsb3cgb2YgaGlzIHN3b3JkLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoIHNwaXJpdCBhbmQgYW1iaXRpb24gQ2Flc2FyIGhpbXNlbGYgY3JlYXRlZCBhbmQgY3VsdGl2YXRlZCBpbiBoaXMgbWVuLCBpbiB0aGUgZmlyc3QgcGxhY2UsIGJlY2F1c2UgaGUgc2hvd2VkLCBieSBoaXMgdW5zcGFyaW5nIGJlc3Rvd2FsIG9mIHJld2FyZHMgYW5kIGhvbm91cnMsIHRoYXQgaGUgd2FzIG5vdCBhbWFzc2luZyB3ZWFsdGggZnJvbSBoaXMgd2FycyBmb3IgaGlzIG93biBsdXh1cnkgb3IgZm9yIGFueSBsaWZlIG9mIGVhc2UsIGJ1dCB0aGF0IGhlIHRyZWFzdXJlZCBpdCB1cCBjYXJlZnVsbHkgYXMgYSBjb21tb24gcHJpemUgZm9yIGRlZWRzIG9mIHZhbG91ciwgYW5kIGhhZCBubyBncmVhdGVyIHNoYXJlIGluIHRoZSB3ZWFsdGggdGhhbiBoZSBvZmZlcmVkIHRvIHRoZSBkZXNlcnZpbmcgYW1vbmcgaGlzIHNvbGRpZXJzOyBhbmQgaW4gdGhlIHNlY29uZCBwbGFjZSwgYnkgd2lsbGluZ2x5IHVuZGVyZ29pbmcgZXZlcnkgZGFuZ2VyIGFuZCByZWZ1c2luZyBubyB0b2lsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIGF0IGhpcyBsb3ZlIG9mIGRhbmdlciBoaXMgbWVuIHdlcmUgbm90IGFzdG9uaXNoZWQsIGtub3dpbmcgaGlzIGFtYml0aW9uOyBidXQgdGhhdCBoZSBzaG91bGQgdW5kZXJnbyB0b2lscyBiZXlvbmQgaGlzIGJvZHkncyBhcHBhcmVudCBwb3dlciBvZiBlbmR1cmFuY2UgYW1hemVkIHRoZW0sIGJlY2F1c2UgaGUgd2FzIG9mIGEgc3BhcmUgaGFiaXQsIGhhZCBhIHNvZnQgYW5kIHdoaXRlIHNraW4sIHN1ZmZlcmVkIGZyb20gZGlzdGVtcGVyIGluIHRoZSBoZWFkLCBhbmQgd2FzIHN1YmplY3QgdG8gZXBpbGVwdGljIGZpdHMsIGEgdHJvdWJsZSB3aGljaCBmaXJzdCBhdHRhY2tlZCBoaW0sIHdlIGFyZSB0b2xkLCBpbiBDb3JkdWJhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5OZXZlcnRoZWxlc3MsIGhlIGRpZCBub3QgbWFrZSBoaXMgZmVlYmxlIGhlYWx0aCBhbiBleGN1c2UgZm9yIHNvZnQgbGl2aW5nLCBidXQgcmF0aGVyIGhpcyBtaWxpdGFyeSBzZXJ2aWNlIGEgY3VyZSBmb3IgaGlzIGZlZWJsZSBoZWFsdGgsIHNpbmNlIGJ5IHdlYXJpc29tZSBqb3VybmV5cywgc2ltcGxlIGRpZXQsIGNvbnRpbnVvdXNseSBzbGVlcGluZyBpbiB0aGUgb3BlbiBhaXIsIGFuZCBlbmR1cmluZyBoYXJkc2hpcHMsIGhlIGZvdWdodCBvZmYgaGlzIHRyb3VibGUgYW5kIGtlcHQgaGlzIGJvZHkgc3Ryb25nIGFnYWluc3QgaXRzIGF0dGFja3MuIE1vc3Qgb2YgaGlzIHNsZWVwLCBhdCBsZWFzdCwgaGUgZ290IGluIGNhcnMgb3IgbGl0dGVycywgbWFraW5nIGhpcyByZXN0IGNvbmR1Y2UgdG8gYWN0aW9uLCBhbmQgaW4gdGhlIGRheS10aW1lIGhlIHdvdWxkIGhhdmUgaGltc2VsZiBjb252ZXllZCB0byBnYXJyaXNvbnMsIGNpdGllcywgb3IgY2FtcHMgb25lIHNsYXZlIHdobyB3YXMgYWNjdXN0b21lZCB0byB3cml0ZSBmcm9tIGRpY3RhdGlvbiBhcyBoZSB0cmF2ZWxsZWQgc2l0dGluZyBieSBoaXMgc2lkZSwgYW5kIG9uZSBzb2xkaWVyIHN0YW5kaW5nIGJlaGluZCBoaW0gd2l0aCBhIHN3b3JkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgZHJvdmUgc28gcmFwaWRseSB0aGF0LCBvbiBoaXMgZmlyc3Qgam91cm5leSBmcm9tIFJvbWUgdG8gR2F1bCwgaGUgcmVhY2hlZCB0aGUgUmhvbmUgaW4gc2V2ZW4gZGF5cy48L3A+CiAgICAgICAgIDxwPkhvcnNlbWFuc2hpcCwgbW9yZW92ZXIsIGhhZCBiZWVuIGVhc3kgZm9yIGhpbSBmcm9tIGJveWhvb2Q7IGZvciBoZSB3YXMgd29udCB0byBwdXQgaGlzIGhhbmRzIGJlaGluZCBoaXMgYmFjayBhbmQsIGhvbGRpbmcgdGhlbSBjbG9zZWx5IHRoZXJlLCB0byByaWRlIGhpcyBob3JzZSBhdCBmdWxsIHNwZWVkLiBBbmQgaW4gdGhlIEdhbGxpYyBjYW1wYWlnbnMgaGUgcHJhY3Rpc2VkIGRpY3RhdGluZyBsZXR0ZXJzIG9uIGhvcnNlYmFjayBhbmQga2VlcGluZyB0d28gc2NyaWJlcyBhdCBvbmNlIGJ1c3ksIG9yLCBhcyBPcHBpdXMgc2F5cywgZXZlbiBtb3JlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XZSBhcmUgdG9sZCwgbW9yZW92ZXIsIHRoYXQgQ2Flc2FyIHdhcyB0aGUgZmlyc3QgdG8gZGV2aXNlIGludGVyY291cnNlIHdpdGggaGlzIGZyaWVuZHMgYnkgbGV0dGVyLCBzaW5jZSBoZSBjb3VsZCBub3Qgd2FpdCBmb3IgcGVyc29uYWwgaW50ZXJ2aWV3cyBvbiB1cmdlbnQgbWF0dGVycyBvd2luZyB0byB0aGUgbXVsdGl0dWRlIG9mIGhpcyBvY2N1cGF0aW9ucyBhbmQgdGhlIGdyZWF0IHNpemUgb2YgdGhlIGNpdHkuIE9mIGhpcyBpbmRpZmZlcmVuY2UgaW4gcmVnYXJkIHRvIGhpcyBkaWV0IHRoZSBmb2xsb3dpbmcgY2lyY3Vtc3RhbmNlIGFsc28gaXMgYnJvdWdodCBpbiBwcm9vZi4gV2hlbiB0aGUgaG9zdCB3aG8gd2FzIGVudGVydGFpbmluZyBoaW0gaW4gTWVkaW9sYW51bSwgVmFsZXJpdXMgTGVvLCBzZXJ2ZWQgdXAgYXNwYXJhZ3VzIGRyZXNzZWQgd2l0aCBteXJyaCBpbnN0ZWFkIG9mIG9saXZlIG9pbCwgQ2Flc2FyIGF0ZSBvZiBpdCB3aXRob3V0IGFkbywgYW5kIHJlYnVrZWQgaGlzIGZyaWVuZHMgd2hlbiB0aGV5IHNob3dlZCBkaXNwbGVhc3VyZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+CgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlN1cmVseSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXQgd2VyZSBlbm91Z2ggbm90IHRvIGVhdCB3aGF0IHlvdSBkb24ndCBsaWtlOyBidXQgaGUgd2hvIGZpbmRzIGZhdWx0IHdpdGggaWxsLWJyZWVkaW5nIGxpa2UgdGhpcyBpcyBpbGwtYnJlZCBoaW1zZWxmPC9xPiBPbmNlLCB0b28sIHVwb24gYSBqb3VybmV5LCBoZSBhbmQgaGlzIGZvbGxvd2VycyB3ZXJlIGRyaXZlbiBieSBhIHN0b3JtIGludG8gYSBwb29yIG1hbidzIGh1dCwgYW5kIHdoZW4gaGUgZm91bmQgdGhhdCBpdCBjb25zaXN0ZWQgb2Ygb25lIHJvb20gb25seSwgYW5kIHRoYXQgb25lIGJhcmVseSBhYmxlIHRvIGFjY29tbW9kYXRlIGEgc2luZ2xlIHBlcnNvbiwgaGUgc2FpZCB0byBoaXMgZnJpZW5kcyB0aGF0IGhvbm91cnMgbXVzdCBiZSB5aWVsZGVkIHRvIHRoZSBzdHJvbmdlc3QsIGJ1dCBuZWNlc3NpdGllcyB0byB0aGUgd2Vha2VzdCwgYW5kIGJhZGUgT3BwaXVzIGxpZSBkb3duIHRoZXJlLCB3aGlsZSBoZSBoaW1zZWxmIHdpdGggdGhlIHJlc3Qgb2YgaGlzIGNvbXBhbnkgc2xlcHQgaW4gdGhlIHBvcmNoLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdG8gcmVzdW1lLCB0aGUgZmlyc3Qgb2YgaGlzIEdhbGxpYyB3YXJzIHdhcyBhZ2FpbnN0IHRoZSBIZWx2ZXRpaSBhbmQgVGlndXJpbmksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDEuMiAiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkJlbGwuIEdhbGwuPC90aXRsZT4gaS4gMi0yOTwvYmlibD4uPC9ub3RlPiB3aG8gaGFkIHNldCBmaXJlIHRvIHRoZWlyIHR3ZWx2ZSBjaXRpZXMgYW5kIGZvdXIgaHVuZHJlZCB2aWxsYWdlcyBhbmQgd2VyZSBhZHZhbmNpbmcgdGhyb3VnaCB0aGF0IHBhcnQgb2YgR2F1bCB3aGljaCB3YXMgc3ViamVjdCB0byB0aGUgUm9tYW5zLCBhcyBvbmNlIHRoZSBDaW1icmkgYW5kIFRldXRvbmVzIGhhZCBkb25lLiBUbyB0aGVzZSB0aGV5IHdlcmUgdGhvdWdodCB0byBiZSBub3QgaW5mZXJpb3IgaW4gY291cmFnZSBhbmQgb2YgZXF1YWwgbnVtYmVycywgYmVpbmcgdGhyZWUgaHVuZHJlZCB0aG91c2FuZCBpbiBhbGwsIG9mIHdob20gb25lIGh1bmRyZWQgYW5kIG5pbmV0eSB0aG91c2FuZCB3ZXJlIGZpZ2h0aW5nIG1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFRpZ3VyaW5pIHdlcmUgY3J1c2hlZCBhdCB0aGUgcml2ZXIgQXJhciwgbm90IGJ5IENhZXNhciBoaW1zZWxmLCBidXQgYnkgTGFiaWVudXMsIGhpcyBkZXB1dHk7IHRoZSBIZWx2ZXRpaSwgaG93ZXZlciwgdW5leHBlY3RlZGx5IGF0dGFja2VkIENhZXNhciBoaW1zZWxmIG9uIHRoZSBtYXJjaCwgYXMgaGUgd2FzIGxlYWRpbmcgaGlzIGZvcmNlcyB0b3dhcmRzIGEgZnJpZW5kbHkgY2l0eSwgYnV0IGhlIHN1Y2NlZWRlZCBpbiByZWFjaGluZyBhIHN0cm9uZyBwbGFjZSBvZiByZWZ1Z2UuIEhlcmUsIGFmdGVyIGhlIGhhZCBjb2xsZWN0ZWQgYW5kIGFycmF5ZWQgaGlzIGZvcmNlcywgYSBob3JzZSB3YXMgYnJvdWdodCB0byBoaW0uIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBob3JzZSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSB3aWxsIHVzZSBmb3IgdGhlIHB1cnN1aXQgYWZ0ZXIgbXkgdmljdG9yeTsgYnV0IG5vdyBsZXQgdXMgZ28gYWdhaW5zdCB0aGUgZW5lbXksPC9xPiBhbmQgYWNjb3JkaW5nbHkgbGVkIHRoZSBjaGFyZ2Ugb24gZm9vdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgYSBsb25nIGFuZCBoYXJkIHN0cnVnZ2xlIGhlIHJvdXRlZCB0aGUgZW5lbXkncyBmaWdodGluZyBtZW4sIGJ1dCBoYWQgdGhlIG1vc3QgdHJvdWJsZSBhdCB0aGVpciByYW1wYXJ0IG9mIHdhZ2dvbnMsIHdoZXJlIG5vdCBvbmx5IGRpZCB0aGUgbWVuIHRoZW1zZWx2ZXMgbWFrZSBhIHN0YW5kIGFuZCBmaWdodCwgYnV0IGFsc28gdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuIGRlZmVuZGVkIHRoZW1zZWx2ZXMgdG8gdGhlIGRlYXRoIGFuZCB3ZXJlIGN1dCB0byBwaWVjZXMgd2l0aCB0aGUgbWVuLiBUaGUgYmF0dGxlIHdhcyBoYXJkbHkgb3ZlciBieSBtaWRuaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhlIG5vYmxlIHdvcmsgb2YgdmljdG9yeSBDYWVzYXIgYWRkZWQgYSBub2JsZXIgc3RpbGwsIHRoYXQgb2Ygc2V0dGxpbmcgdGhvc2Ugb2YgdGhlIEJhcmJhcmlhbnMgd2hvIGhhZCBlc2NhcGVkIGFsaXZlIGZyb20gdGhlIGJhdHRsZSAodGhlcmUgd2VyZSBtb3JlIHRoYW4gb25lIGh1bmRyZWQgdGhvdXNhbmQgb2YgdGhlbSksIGFuZCBjb21wZWxsaW5nIHRoZW0gdG8gcmVzdW1lIHRoZSB0ZXJyaXRvcnkgd2hpY2ggdGhleSBoYWQgYWJhbmRvbmVkIGFuZCB0aGUgY2l0aWVzIHdoaWNoIHRoZXkgaGFkIGRlc3Ryb3llZC4gSGUgZGlkIHRoaXMgYmVjYXVzZSBoZSBmZWFyZWQgdGhhdCBpZiB0aGUgdGVycml0b3J5IGJlY2FtZSB2YWNhbnQgdGhlIEdlcm1hbnMgd291bGQgY3Jvc3MgdGhlIFJoaW5lIGFuZCBvY2N1cHkgaXQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzZWNvbmQgd2FyLCBkaXJlY3RseSBpbiBkZWZlbmNlIG9mIHRoZSBHYXVscywgd2FzIGFnYWluc3QgdGhlIEdlcm1hbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDEuMzAiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkIuIEcuPC90aXRsZT4gaS4gMzAtNTM8L2JpYmw+Ljwvbm90ZT4gYWx0aG91Z2ggcHJldmlvdXNseSwgaW4gUm9tZSwgaGUgaGFkIG1hZGUgdGhlaXIga2luZyBBcmlvdmlzdHVzIGFuIGFsbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWN0aW5nIGFzIGNvbnN1bCwgaW4gNTkgQi5DLjwvbm90ZT4gQnV0IHRoZXkgd2VyZSBpbnRvbGVyYWJsZSBuZWlnaGJvdXJzIG9mIENhZXNhcidzIHN1YmplY3RzLCBhbmQgaWYgYW4gb3Bwb3J0dW5pdHkgcHJlc2VudGVkIGl0c2VsZiBpdCB3YXMgdGhvdWdodCB0aGF0IHRoZXkgd291bGQgbm90IHJlbWFpbiBxdWlldGx5IGluIHRoZWlyIHByZXNlbnQgaG9tZXMsIGJ1dCB3b3VsZCBlbmNyb2FjaCB1cG9uIGFuZCBvY2N1cHkgR2F1bC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U2VlaW5nIHRoYXQgaGlzIG9mZmljZXJzIHdlcmUgaW5jbGluZWQgdG8gYmUgYWZyYWlkLCBhbmQgcGFydGljdWxhcmx5IGFsbCB0aGUgeW91bmcgbWVuIG9mIGhpZ2ggcmFuayB3aG8gaGFkIGNvbWUgb3V0IGludGVuZGluZyB0byBtYWtlIHRoZSBjYW1wYWlnbiB3aXRoIENhZXNhciBhbiBvcHBvcnR1bml0eSBmb3IgaGlnaCBsaXZpbmcgYW5kIG1vbmV5LW1ha2luZywgaGUgY2FsbGVkIHRoZW0gdG9nZXRoZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMS40MCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpLiA0MDwvYmlibD4uPC9ub3RlPiBhbmQgYmFkZSB0aGVtIGJlIG9mZiwgc2luY2UgdGhleSB3ZXJlIHNvIHVubWFubHkgYW5kIGVmZmVtaW5hdGUsIGFuZCBub3QgZm9yY2UgdGhlbXNlbHZlcyB0byBmYWNlIGRhbmdlcjsgYXMgZm9yIGhpbXNlbGYsIGhlIHNhaWQgaGUgd291bGQgdGFrZSB0aGUgdGVudGggbGVnaW9uIGFsb25lIGFuZCBtYXJjaCBhZ2FpbnN0IHRoZSBCYXJiYXJpYW5zOyB0aGUgZW5lbXkgd291bGQgYmUgbm8gYmV0dGVyIGZpZ2h0ZXJzIHRoYW4gdGhlIENpbWJyaSwgYW5kIGhlIGhpbXNlbGYgd2FzIG5vIHdvcnNlIGEgZ2VuZXJhbCB0aGFuIE1hcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzIHRoZSB0ZW50aCBsZWdpb24gc2VudCBhIGRlcHV0YXRpb24gdG8gaGltLCBleHByZXNzaW5nIHRoZWlyIGdyYXRpdHVkZSwgd2hpbGUgdGhlIG90aGVyIGxlZ2lvbnMgcmV2aWxlZCB0aGVpciBvd24gY29tbWFuZGVycywgYW5kIGFsbCB0aGUgYXJteSwgbm93IGZ1bGwgb2YgaW1wZXR1b3VzIGVhZ2VybmVzcywgZm9sbG93ZWQgQ2Flc2FyIG9uIGEgbWFyY2ggb2YgbWFueSBkYXlzLCBhbmQgYXQgbGFzdCBlbmNhbXBlZCB3aXRoaW4gdHdvIGh1bmRyZWQgZnVybG9uZ3Mgb2YgdGhlIGVuZW15LjwvcD4KICAgICAgICAgPHA+Tm93LCB0aGUgdmVyeSBhcHByb2FjaCBvZiBDYWVzYXIgc29tZXdoYXQgc2hhdHRlcmVkIHRoZSBwdXJwb3NlIG9mIEFyaW92aXN0dXMuIEZvciBoZSBkaWQgbm90IGV4cGVjdCB0aGF0IHRoZSBSb21hbnMgd291bGQgYXR0YWNrIHRoZSBHZXJtYW5zLCB3aG9zZSBvbnNldCBoZSB0aG91Z2h0IHRoZXkgY291bGQgbm90IHdpdGhzdGFuZCwgYW5kIGhlIHdhcyBhbWF6ZWQgYXQgdGhlIGJvbGRuZXNzIG9mIENhZXNhcjsgYmVzaWRlcywgaGUgc2F3IHRoYXQgaGlzIG93biBhcm15IHdhcyBkaXN0dXJiZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIG1vcmUsIHRvbywgd2FzIHRoZSBzcGlyaXQgb2YgdGhlIEdlcm1hbnMgYmx1bnRlZCBieSB0aGUgcHJvcGhlY2llcyBvZiB0aGVpciBob2x5IHdvbWVuLCB3aG8gdXNlZCB0byBmb3JldGVsbCB0aGUgZnV0dXJlIGJ5IG9ic2VydmluZyB0aGUgZWRkaWVzIGluIHRoZSByaXZlcnMgYW5kIGJ5IGZpbmRpbmcgc2lnbnMgaW4gdGhlIHdoaXJsaW5ncyBhbmQgc3BsYXNoaW5ncyBvZiB0aGUgd2F0ZXJzLCBhbmQgbm93IGZvcmJhZGUgam9pbmluZyBiYXR0bGUgYmVmb3JlIGEgbmV3IG1vb24gZ2F2ZSBpdHMgbGlnaHQuIFdoZW4gQ2Flc2FyIGxlYXJuZWQgdGhpcywgYW5kIHNhdyB0aGF0IHRoZSBHZXJtYW5zIGtlcHQgcXVpZXQsIGhlIGRlY2lkZWQgdGhhdCBpdCB3YXMgYSBnb29kIHBsYW4gdG8gZW5nYWdlIHRoZW0gd2hpbGUgdGhleSB3ZXJlIG91dCBvZiBoZWFydCwgcmF0aGVyIHRoYW4gdG8gc2l0IHN0aWxsIGFuZCB3YWl0IGZvciB0aGVpciB0aW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TbywgYnkgYXR0YWNraW5nIHRoZWlyIGVudHJlbmNobWVudHMgYW5kIHRoZSBoaWxscyBvbiB3aGljaCB0aGV5IHdlcmUgZW5jYW1wZWQsIGhlIGlycml0YXRlZCB0aGVtIGFuZCBpbmNpdGVkIHRoZW0gdG8gY29tZSBkb3duIGluIGFuZ2VyIGFuZCBmaWdodCB0aGUgaXNzdWUgb3V0LiBUaGV5IHdlcmUgc2lnbmFsbHkgcm91dGVkLCBhbmQgQ2Flc2FyIHB1cnN1ZWQgdGhlbSBhIGRpc3RhbmNlIG9mIGZvdXIgaHVuZHJlZCBmdXJsb25ncywgYXMgZmFyIGFzIHRoZSBSaGluZSwgYW5kIGZpbGxlZCBhbGwgdGhlIGludGVydmVuaW5nIHBsYWluIHdpdGggZGVhZCBib2RpZXMgYW5kIHNwb2lscy4gQXJpb3Zpc3R1cywgd2l0aCBhIGZldyBmb2xsb3dlcnMsIHN1Y2NlZWRlZCBpbiBjcm9zc2luZyB0aGUgUmhpbmU7IGhpcyBkZWFkIGFyZSBzYWlkIHRvIGhhdmUgYmVlbiBlaWdodHkgdGhvdXNhbmQgaW4gbnVtYmVyLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIGFjaGlldmVtZW50LCBDYWVzYXIgbGVmdCBoaXMgZm9yY2VzIGFtb25nIHRoZSBTZXF1YW5pIHRvIHNwZW5kIHRoZSB3aW50ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHdpbnRlciBvZiA1OC01NyBCLkMuPC9ub3RlPiB3aGlsZSBoZSBoaW1zZWxmLCBkZXNpcm91cyBvZiBnaXZpbmcgYXR0ZW50aW9uIHRvIG1hdHRlcnMgYXQgUm9tZSwgY2FtZSBkb3duIHRvIEdhdWwgYWxvbmcgdGhlIFBvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAxLjU0IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CLiBHLjwvdGl0bGU+IGkuIDU0PC9iaWJsPjogPGZvcmVpZ24gbGFuZz0ibGEiPmlwc2UgaW4gY2l0ZXJpb3JlbSBHYWxsaWFtIGFkIGNvbnZlbnR1cyBhZ2VuZG9zIHByb2ZlY3R1cyBlc3QuPC9mb3JlaWduPgogICAgICAgICAgICA8L25vdGU+IHdoaWNoIHdhcyBhIHBhcnQgb2YgdGhlIHByb3ZpbmNlIGFzc2lnbmVkIHRvIGhpbTsgZm9yIHRoZSByaXZlciBjYWxsZWQgUnViaWNvbiBzZXBhcmF0ZXMgdGhlIHJlc3Qgb2YgSXRhbHkgZnJvbSBDaXNhbHBpbmUgR2F1bC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSBoZSBmaXhlZCBoaXMgcXVhcnRlcnMgYW5kIGNhcnJpZWQgb24gaGlzIHBvbGl0aWNhbCBzY2hlbWVzLiBNYW55IGNhbWUgdG8gc2VlIGhpbSwgYW5kIGhlIGdhdmUgZWFjaCBvbmUgd2hhdCBoZSB3YW50ZWQsIGFuZCBzZW50IGFsbCBhd2F5IGluIGFjdHVhbCBwb3NzZXNzaW9uIG9mIHNvbWUgb2YgaGlzIGZhdm91cnMgYW5kIGhvcGluZyBmb3IgbW9yZS4gQW5kIGR1cmluZyBhbGwgdGhlIHJlc3Qgb2YgdGhlIHRpbWUgb2YgaGlzIGNhbXBhaWducyBpbiBHYXVsLCB1bm5vdGljZWQgYnkgUG9tcGV5LCBoZSB3YXMgYWx0ZXJuYXRlbHkgc3ViZHVpbmcgdGhlIGVuZW15IHdpdGggdGhlIGFybXMgb2YgdGhlIGNpdGl6ZW5zLCBvciBjYXB0dXJpbmcgYW5kIHN1YmR1aW5nIHRoZSBjaXRpemVucyB3aXRoIHRoZSBtb25leSB3aGljaCBoZSBnb3QgZnJvbSB0aGUgZW5lbXkuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGhlYXJkIHRoYXQgdGhlIEJlbGdhZSwgd2hvIHdlcmUgdGhlIG1vc3QgcG93ZXJmdWwgb2YgdGhlIEdhdWxzIGFuZCBvY2N1cGllZCB0aGUgdGhpcmQgcGFydCBvZiBhbGwgdGhlaXIgY291bnRyeSwgaGFkIHJldm9sdGVkLCBhbmQgaGFkIGFzc2VtYmxlZCB1bmtub3duIG15cmlhZHMgb2YgYXJtZWQgbWVuLCBoZSB0dXJuZWQgYmFjayBhdCBvbmNlIGFuZCBtYXJjaGVkIHRoaXRoZXIgd2l0aCBncmVhdCBzcGVlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIncyBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBCZWxnYWUsIGluIDU3IEIuQy4sIGlzIGRlc2NyaWJlZCBieSBoaW1zZWxmIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IGlpLiAxLTMzPC9iaWJsPi48L25vdGU+IEhlIGZlbGwgdXBvbiB0aGUgZW5lbXkgYXMgdGhleSB3ZXJlIHBsdW5kZXJpbmcgdGhlIEdhdWxzIHRoYXQgd2VyZSBpbiBhbGxpYW5jZSB3aXRoIFJvbWUsIGFuZCBzbyByb3V0ZWQgYW5kIGRlc3Ryb3llZCB0aGUgbGVhc3Qgc2NhdHRlcmVkIGFuZCBtb3N0IG51bWVyb3VzIG9mIHRoZW0sIGFmdGVyIGEgZGlzZ3JhY2VmdWwgc3RydWdnbGUgb24gdGhlaXIgcGFydCwgdGhhdCB0aGUgUm9tYW5zIGNvdWxkIGNyb3NzIGxha2VzIGFuZCBkZWVwIHJpdmVycyBmb3IgdGhlIG11bHRpdHVkZSBvZiBkZWFkIGJvZGllcyBpbiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlIHJlYmVscyB3aG8gZHdlbHQgYWxvbmcgdGhlIG9jZWFuIHN1Ym1pdHRlZCB3aXRob3V0IGEgYmF0dGxlOyBhZ2FpbnN0IHRoZSBOZXJ2aWksIGhvd2V2ZXIsIHRoZSBtb3N0IHNhdmFnZSBhbmQgd2FybGlrZSBvZiB0aGUgcGVvcGxlIGluIHRoZXNlIHBhcnRzLCBDYWVzYXIgbGVkIGhpcyBmb3JjZXMuIFRoZSBOZXJ2aWksIHdobyBkd2VsdCBpbiBkZW5zZSB3b29kcywgYW5kIGhhZCBwbGFjZWQgdGhlaXIgZmFtaWxpZXMgYW5kIHBvc3Nlc3Npb25zIGluIGEgcmVjZXNzIG9mIHRoZSBmb3Jlc3QgYXQgZmFydGhlc3QgcmVtb3ZlIGZyb20gdGhlIGVuZW15LCBhdCBhIHRpbWUgd2hlbiBDYWVzYXIgd2FzIGZvcnRpZnlpbmcgYSBjYW1wIGFuZCBkaWQgbm90IGV4cGVjdCB0aGUgYmF0dGxlLCBmZWxsIHVwb24gaGltIHN1ZGRlbmx5LCBzaXh0eSB0aG91c2FuZCBzdHJvbmcuIFRoZXkgcm91dGVkIGhpcyBjYXZhbHJ5LCBhbmQgc3Vycm91bmRlZCB0aGUgc2V2ZW50aCBhbmQgdHdlbGZ0aCBsZWdpb25zIGFuZCBzbGV3IGFsbCB0aGVpciBjZW50dXJpb25zLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaGFkIG5vdCBDYWVzYXIgc25hdGNoZWQgYSBzaGllbGQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5TY3V0byBhYiBub3Zpc3NpbWlzIHVuaSBtaWxpdGkgZGV0cmFjdG88L2ZvcmVpZ24+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAyLjI1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gaWkuIDI1LCAyPC9iaWJsPikuPC9ub3RlPiBtYWRlIGhpcyB3YXkgdGhyb3VnaCB0aGUgY29tYmF0YW50cyBpbiBmcm9udCBvZiBoaW0sIGFuZCBodXJsZWQgaGltc2VsZiB1cG9uIHRoZSBCYXJiYXJpYW5zOyBhbmQgaGFkIG5vdCB0aGUgdGVudGggbGVnaW9uLCBhdCBzaWdodCBvZiBoaXMgcGVyaWwsIHJ1biBkb3duIGZyb20gdGhlIGhlaWdodHMgYW5kIGN1dCB0aGUgcmFua3Mgb2YgdGhlIGVuZW15IHRvIHBpZWNlcywgbm90IGEgUm9tYW4sIGl0IGlzIHRob3VnaHQsIHdvdWxkIGhhdmUgc3Vydml2ZWQuIEFzIGl0IHdhcywgaG93ZXZlciwgb3dpbmcgdG8gQ2Flc2FyJ3MgZGFyaW5nLCB0aGV5IGZvdWdodCBiZXlvbmQgdGhlaXIgcG93ZXJzLCBhcyB0aGUgc2F5aW5nIGlzLCBhbmQgZXZlbiB0aGVuIGRpZCBub3Qgcm91dCB0aGUgTmVydmlpLCBidXQgY3V0IHRoZW0gZG93biBhcyB0aGV5IGRlZmVuZGVkIHRoZW1zZWx2ZXM7IGZvciBvdXQgb2Ygc2l4dHkgdGhvdXNhbmQgb25seSBmaXZlIGh1bmRyZWQgYXJlIHNhaWQgdG8gaGF2ZSBjb21lIG9mZiBhbGl2ZSwgYW5kIG9ubHkgdGhyZWUgb2YgdGhlaXIgc2VuYXRvcnMgb3V0IG9mIGZvdXIgaHVuZHJlZC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFuIHNlbmF0ZSwgb24gbGVhcm5pbmcgb2YgdGhlc2Ugc3VjY2Vzc2VzLCBkZWNyZWVkIHNhY3JpZmljZXMgdG8gdGhlIGdvZHMgYW5kIGNlc3NhdGlvbiBmcm9tIGJ1c2luZXNzLCB3aXRoIGZlc3RpdmFsLCBmb3IgZmlmdGVlbiBkYXlzLCBhIGdyZWF0ZXIgbnVtYmVyIHRoYW4gZm9yIGFueSB2aWN0b3J5IGJlZm9yZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPlF1b2QgYW50ZSBpZCB0ZW1wdXMgYWNjaWRpdCBudWxsaTwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDIuMzUiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkIuIEcuPC90aXRsZT4gaWkuIDM1LCA0PC9iaWJsPikuPC9ub3RlPiBGb3IgdGhlIGRhbmdlciB3YXMgc2VlbiB0byBoYXZlIGJlZW4gZ3JlYXQgd2hlbiBzbyBtYW55IG5hdGlvbnMgYXQgb25jZSBoYWQgYnJva2VuIG91dCBpbiByZXZvbHQsIGFuZCBiZWNhdXNlIENhZXNhciB3YXMgdGhlIHZpY3RvciwgdGhlIGdvb2Qgd2lsbCBvZiB0aGUgbXVsdGl0dWRlIHRvd2FyZHMgaGltIG1hZGUgaGlzIHZpY3RvcnkgbW9yZSBzcGxlbmRpZC4gQ2Flc2FyIGhpbXNlbGYsIGFmdGVyIHNldHRsaW5nIG1hdHRlcnMgaW4gR2F1bCwgYWdhaW4gc3BlbnQgdGhlIHdpbnRlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjU3LTU2IEIuQy4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTEuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbGkuIDM8L2JpYmw+IGYuPC9ub3RlPiBpbiB0aGUgcmVnaW9ucyBhbG9uZyB0aGUgUG8sIGNhcnJ5aW5nIG91dCBoaXMgcGxhbnMgYXQgUm9tZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG5vdCBvbmx5IGRpZCB0aGUgY2FuZGlkYXRlcyBmb3Igb2ZmaWNlIHRoZXJlIGVuam95IGhpcyBhc3Npc3RhbmNlLCBhbmQgd2luIHRoZWlyIGVsZWN0aW9ucyBieSBjb3JydXB0aW5nIHRoZSBwZW9wbGUgd2l0aCBtb25leSBmcm9tIGhpbSwgYW5kIGRvIGV2ZXJ5dGhpbmcgd2hpY2ggd2FzIGxpa2VseSB0byBlbmhhbmNlIGhpcyBwb3dlciwgYnV0IGFsc28gbW9zdCBvZiB0aGUgbWVuIG9mIGhpZ2hlc3QgcmFuayBhbmQgZ3JlYXRlc3QgaW5mbHVlbmNlIGNhbWUgdG8gc2VlIGhpbSBhdCBMdWNhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIEFwcmlsIG9mIDU2IEIuQy48L25vdGU+IGluY2x1ZGluZyBQb21wZXksIENyYXNzdXMsIEFwcGl1cyB0aGUgZ292ZXJub3Igb2YgU2FyZGluaWEsIGFuZCBOZXBvcyB0aGUgcHJvY29uc3VsIG9mIFNwYWluLCBzbyB0aGF0IHRoZXJlIHdlcmUgYSBodW5kcmVkIGFuZCB0d2VudHkgbGljdG9ycyBpbiB0aGUgcGxhY2UgYW5kIG1vcmUgdGhhbiB0d28gaHVuZHJlZCBzZW5hdG9ycy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBoZWxkIGEgY291bmNpbCBhbmQgc2V0dGxlZCBtYXR0ZXJzIG9uIHRoZSBmb2xsb3dpbmcgYmFzaXMuIFBvbXBleSBhbmQgQ3Jhc3N1cyB3ZXJlIHRvIGJlIGVsZWN0ZWQgY29uc3VscyBmb3IgdGhlIGVuc3VpbmcgeWVhciwgYW5kIENhZXNhciB3YXMgdG8gaGF2ZSBtb25leSB2b3RlZCBoaW0sIGJlc2lkZXMgYW5vdGhlciBmaXZlIHllYXJzIGluIGhpcyBwcm92aW5jaWFsIGNvbW1hbmQuIFRoaXMgc2VlbWVkIHZlcnkgc3RyYW5nZSB0byBtZW4gb2YgdW5kZXJzdGFuZGluZy4gRm9yIHRob3NlIHdobyB3ZXJlIGdldHRpbmcgc28gbXVjaCBtb25leSBmcm9tIENhZXNhciB1cmdlZCB0aGUgc2VuYXRlIHRvIGdpdmUgaGltIG1vbmV5IGFzIGlmIGhlIGhhZCBub25lLCBuYXkgcmF0aGVyLCB0aGV5IGZvcmNlZCBpdCB0byBkbyBzbywgdGhvdWdoIGl0IGdyb2FuZWQgb3ZlciBpdHMgb3duIGRlY3JlZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIGluZGVlZCwgd2FzIG5vdCB0aGVyZSwgZm9yIGhlIGhhZCBwdXJwb3NlbHkgYmVlbiBzZW50IG91dCBvZiB0aGUgd2F5IG9uIGEgbWlzc2lvbiB0byBDeXBydXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMzQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIE1pbm9yPC90aXRsZT4sIHh4eGl2PC9iaWJsPi48L25vdGU+IGFuZCBGYXZvbml1cywgd2hvIHdhcyBhbiBhcmRlbnQgZm9sbG93ZXIgb2YgQ2F0bywgZmluZGluZyBoaW1zZWxmIHVuYWJsZSB0byBhY2NvbXBsaXNoIGFueXRoaW5nIGJ5IGhpcyBvcHBvc2l0aW9uLCBib3VuZGVkIG91dCBvZiBkb29ycyBhbmQgY2xhbW91cmVkIHRvIHRoZSBwb3B1bGFjZS4gQnV0IG5vIG9uZSBnYXZlIGhlZWQgdG8gaGltLCBmb3Igc29tZSB3ZXJlIGluIGF3ZSBvZiBQb21wZXkgYW5kIENyYXNzdXMsIGFuZCBtb3N0IHdhbnRlZCB0byBwbGVhc2UgQ2Flc2FyLCBsaXZlZCBpbiBob3BlcyBvZiBoaXMgZmF2b3VycywgYW5kIHNvIGtlcHQgcXVpZXQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk9uIHJldHVybmluZyB0byBoaXMgZm9yY2VzIGluIEdhdWwsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTUgQi5DLiBQbHV0YXJjaCBwYXNzZXMgb3ZlciBDYWVzYXIncyBjYW1wYWlnbiBvZiA1NiBCLkMuIGluIEdhdWwsIGZvbGxvd2luZyB0aGUgY29uZmVyZW5jZSBhdCBMdWNhLiBDYWVzYXIgZGVzY3JpYmVzIGl0IGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IGlpaTwvYmlibD4uPC9ub3RlPiBDYWVzYXIgZm91bmQgYSBjb25zaWRlcmFibGUgd2FyIGluIHRoZSBjb3VudHJ5LCBzaW5jZSB0d28gZ3JlYXQgR2VybWFuIG5hdGlvbnMgaGFkIGp1c3QgY3Jvc3NlZCB0aGUgUmhpbmUgdG8gcG9zc2VzcyB0aGUgbGFuZCwgb25lIGNhbGxlZCB0aGUgVXNpcGVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhZXNhciBjYWxscyB0aGVtIFVzaXBldGVzIGFuZCBUZW5jdGVyaSAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcgPC90aXRsZT5pdi4gMTwvYmlibD4pLjwvbm90ZT4gdGhlIG90aGVyIHRoZSBUZW50ZXJpdGFlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Db25jZXJuaW5nIHRoZSBiYXR0bGUgd2hpY2ggd2FzIGZvdWdodCB3aXRoIHRoZW0gQ2Flc2FyIHNheXMgaW4gaGlzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDx0aXRsZT5Db21tZW50YXJpZXM8L3RpdGxlPgogICAgICAgICAgICA8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjEzIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gaXYuIDEzPC9iaWJsPi48L25vdGU+IHRoYXQgdGhlIEJhcmJhcmlhbnMsIHdoaWxlIHRyZWF0aW5nIHdpdGggaGltIHVuZGVyIGEgdHJ1Y2UsIGF0dGFja2VkIG9uIHRoZWlyIG1hcmNoIGFuZCB0aGVyZWZvcmUgcm91dGVkIGhpcyBmaXZlIHRob3VzYW5kIGNhdmFscnkgd2l0aCB0aGVpciBlaWdodCBodW5kcmVkLCBzaW5jZSBoaXMgbWVuIHdlcmUgdGFrZW4gb2ZmIHRoZWlyIGd1YXJkOyB0aGF0IHRoZXkgdGhlbiBzZW50IG90aGVyIGVudm95cyB0byBoaW0gd2hvIHRyaWVkIHRvIGRlY2VpdmUgaGltIGFnYWluLCBidXQgaGUgaGVsZCB0aGVtIGZhc3QgYW5kIGxlZCBoaXMgYXJteSBhZ2FpbnN0IHRoZSBCYXJiYXJpYW5zLCBjb25zaWRlcmluZyB0aGF0IGdvb2QgZmFpdGggdG93YXJkcyBzdWNoIGZhaXRobGVzcyBicmVha2VycyBvZiB0cnVjZXMgd2FzIGZvbGx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgVGFudXNpdXMgc2F5cyB0aGF0IHdoZW4gdGhlIHNlbmF0ZSB2b3RlZCBzYWNyaWZpY2VzIG9mIHJlam9pY2luZyBvdmVyIHRoZSB2aWN0b3J5LCBDYXRvIHByb25vdW5jZWQgdGhlIG9waW5pb24gdGhhdCB0aGV5IG91Z2h0IHRvIGRlbGl2ZXIgdXAgQ2Flc2FyIHRvIHRoZSBCYXJiYXJpYW5zLCB0aHVzIHB1cmdpbmcgYXdheSB0aGUgdmlvbGF0aW9uIG9mIHRoZSB0cnVjZSBpbiBiZWhhbGYgb2YgdGhlIGNpdHksIGFuZCB0dXJuaW5nIHRoZSBjdXJzZSB0aGVyZWZvciBvbiB0aGUgZ3VpbHR5IG1hbi48L3A+CiAgICAgICAgIDxwPk9mIHRob3NlIHdobyBoYWQgY3Jvc3NlZCB0aGUgUmhpbmUgaW50byBHYXVsIGZvdXIgaHVuZHJlZCB0aG91c2FuZCB3ZXJlIGN1dCB0byBwaWVjZXMsIGFuZCB0aGUgZmV3IHdobyBzdWNjZWVkZWQgaW4gbWFraW5nIHRoZWlyIHdheSBiYWNrIHdlcmUgcmVjZWl2ZWQgYnkgdGhlIFN1Z2FtYnJpLCBhIEdlcm1hbiBuYXRpb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYWN0aW9uIENhZXNhciBtYWRlIGEgZ3JvdW5kIG9mIGNvbXBsYWludCBhZ2FpbnN0IHRoZSBTdWdhbWJyaSwgYW5kIGJlc2lkZXMsIGhlIGNvdmV0ZWQgdGhlIGZhbWUgb2YgYmVpbmcgdGhlIGZpcnN0IG1hbiB0byBjcm9zcyB0aGUgUmhpbmUgd2l0aCBhbiBhcm15LiBIZSB0aGVyZWZvcmUgYmVnYW4gdG8gYnJpZGdlIHRoZSByaXZlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNC4xNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IGl2LiAxNi0xOTwvYmlibD4uPC9ub3RlPiBhbHRob3VnaCBpdCB3YXMgdmVyeSBicm9hZCwgYW5kIGF0IHRoaXMgcG9pbnQgaW4gaXRzIGNvdXJzZSBlc3BlY2lhbGx5IHN3b2xsZW4sIHJvdWdoLCBhbmQgaW1wZXR1b3VzLCBhbmQgd2l0aCB0aGUgdHJ1bmtzIGFuZCBicmFuY2hlcyBvZiB0cmVlcyB3aGljaCBpdCBib3JlIGRvd24gc3RyZWFtIGtlcHQgc21pdGluZyBhbmQgdGVhcmluZyBhd2F5IHRoZSBzdXBwb3J0cyBvZiBoaXMgYnJpZGdlLiA8dGl0bGU+QnV0IENhZXNhciBjYXVnaHQgdXAgdGhlc2UgdHJ1bmtzIGFuZCBicmFuY2hlcyB3aXRoIGJ1bHdhcmtzIG9mIGdyZWF0IHRpbWJlcnMgcGxhbnRlZCBhY3Jvc3MgdGhlIHN0cmVhbSwgYW5kIGhhdmluZyB0aHVzIGJyaWRsZWQgYW5kIHlva2VkIHRoZSBkYXNoaW5nIGN1cnJlbnQsIGhlIGJyb3VnaHQgaGlzIGJyaWRnZeKAlHNpZ2h0IGJleW9uZCBhbGwgY3JlZGVuY2XigJR0byBjb21wbGV0aW9uIGluIHRlbiBkYXlzLjwvdGl0bGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBub3cgdGhyZXcgaGlzIGZvcmNlcyBhY3Jvc3MgdGhlIHJpdmVyLiBObyBvbmUgdmVudHVyZWQgdG8gb3Bwb3NlIGhpbSwgYnV0IGV2ZW4gdGhlIFN1ZXZpLCB3aG8gd2VyZSB0aGUgZm9yZW1vc3QgbmF0aW9uIG9mIHRoZSBHZXJtYW5zLCBiZXN0b3dlZCB0aGVtc2VsdmVzIGFuZCB0aGVpciBiZWxvbmdpbmdzIGluIGRlZXAgYW5kIHdvb2R5IGRlZmlsZXMuIENhZXNhciByYXZhZ2VkIHRoZSBjb3VudHJ5IG9mIHRoZSBlbmVteSB3aXRoIGZpcmUsIGdhdmUgZW5jb3VyYWdlbWVudCB0byB0aGUgY29uc3RhbnQgZnJpZW5kcyBvZiBSb21lLCBhbmQgdGhlbiByZXRpcmVkIGFnYWluIGludG8gR2F1bCwgaGF2aW5nIHNwZW50IGVpZ2h0ZWVuIGRheXMgaW4gR2VybWFueS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgQnJpdGFubmkgd2FzIGNlbGVicmF0ZWQgZm9yIGl0cyBkYXJpbmcuIEZvciBoZSB3YXMgdGhlIGZpcnN0IHRvIGxhdW5jaCBhIGZsZWV0IHVwb24gdGhlIHdlc3Rlcm4gb2NlYW4gYW5kIHRvIHNhaWwgdGhyb3VnaCB0aGUgQXRsYW50aWMgc2VhIGNhcnJ5aW5nIGFuIGFybXkgdG8gd2FnZSB3YXIuIFRoZSBpc2xhbmQgd2FzIG9mIGluY3JlZGlibGUgbWFnbml0dWRlLCBhbmQgZnVybmlzaGVkIG11Y2ggbWF0dGVyIG9mIGRpc3B1dGUgdG8gbXVsdGl0dWRlcyBvZiB3cml0ZXJzLCBzb21lIG9mIHdob20gYXZlcnJlZCB0aGF0IGl0cyBuYW1lIGFuZCBzdG9yeSBoYWQgYmVlbiBmYWJyaWNhdGVkLCBzaW5jZSBpdCBuZXZlciBoYWQgZXhpc3RlZCBhbmQgZGlkIG5vdCB0aGVuIGV4aXN0OyBhbmQgaW4gaGlzIGF0dGVtcHQgdG8gb2NjdXB5IGl0IGhlIGNhcnJpZWQgdGhlIFJvbWFuIHN1cHJlbWFjeSBiZXlvbmQgdGhlIGNvbmZpbmVzIG9mIHRoZSBpbmhhYml0ZWQgd29ybGQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHR3aWNlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T25jZSBpbiA1NSBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjIwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gaXYuIDIwLTM2PC9iaWJsPik7IGFnYWluIGluIDU0IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IHYuIDEtMjI8L2JpYmw+KS48L25vdGU+IGNyb3NzaW5nIHRvIHRoZSBpc2xhbmQgZnJvbSB0aGUgb3Bwb3NpdGUgY29hc3Qgb2YgR2F1bCBhbmQgaW4gbWFueSBiYXR0bGVzIGRhbWFnaW5nIHRoZSBlbmVteSByYXRoZXIgdGhhbiBlbnJpY2hpbmcgaGlzIG93biBtZW7igJRmb3IgdGhlcmUgd2FzIG5vdGhpbmcgd29ydGggdGFraW5nIGZyb20gbWVuIHdobyBsaXZlZCBpbiBwb3ZlcnR5IGFuZCB3cmV0Y2hlZG5lc3PigJQgaGUgYnJvdWdodCB0aGUgd2FyIHRvIGFuIGVuZCB3aGljaCB3YXMgbm90IHRvIGhpcyBsaWtpbmcsIGl0IGlzIHRydWU7IHN0aWxsLCBoZSB0b29rIGhvc3RhZ2VzIGZyb20gdGhlIGtpbmcsIGltcG9zZWQgdHJpYnV0ZXMsIGFuZCB0aGVuIHNhaWxlZCBhd2F5IGZyb20gdGhlIGlzbGFuZC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SW4gR2F1bCBoZSBmb3VuZCBsZXR0ZXJzIHdoaWNoIHdlcmUgYWJvdXQgdG8gYmUgc2VudCBhY3Jvc3MgdG8gaGltLiBUaGV5IHdlcmUgZnJvbSBoaXMgZnJpZW5kcyBpbiBSb21lLCBhbmQgYWR2aXNlZCBoaW0gb2YgaGlzIGRhdWdodGVyJ3MgZGVhdGg7IHNoZSBkaWVkIGluIGNoaWxkLWJpcnRoIGF0IFBvbXBleSdzIGhvdXNlLiBHcmVhdCB3YXMgdGhlIGdyaWVmIG9mIFBvbXBleSwgYW5kIGdyZWF0IHRoZSBncmllZiBvZiBDYWVzYXIsIGFuZCB0aGVpciBmcmllbmRzIHdlcmUgZ3JlYXRseSB0cm91YmxlZCB0b287IHRoZXkgZmVsdCB0aGF0IHRoZSByZWxhdGlvbnNoaXAgd2hpY2ggYWxvbmUga2VwdCB0aGUgZGlzdGVtcGVyZWQgc3RhdGUgaW4gaGFybW9ueSBhbmQgY29uY29yZCB3YXMgbm93IGRpc3NvbHZlZC4gRm9yIHRoZSBiYWJlIGFsc28gZGllZCBwcmVzZW50bHksIGFmdGVyIHN1cnZpdmluZyBpdHMgbW90aGVyIGEgZmV3IGRheXMuIE5vdyBKdWxpYSwgaW4gc3BpdGUgb2YgdGhlIHRyaWJ1bmVzLCB3YXMgY2FycmllZCBieSB0aGUgcGVvcGxlIHRvIHRoZSBDYW1wdXMgTWFydGl1cywgd2hlcmUgaGVyIGZ1bmVyYWwgcml0ZXMgd2VyZSBoZWxkLCBhbmQgd2hlcmUgc2hlIGxpZXMgYnVyaWVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDUzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXIgbGlpaTwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyJ3MgZm9yY2VzIHdlcmUgbm93IHNvIGxhcmdlIHRoYXQgaGUgd2FzIGZvcmNlZCB0byBkaXN0cmlidXRlIHRoZW0gaW4gbWFueSB3aW50ZXItcXVhcnRlcnMsIHdoaWxlIGhlIGhpbXNlbGYsIGFzIGhpcyBjdXN0b20gd2FzLCB0dXJuZWQgaGlzIHN0ZXBzIHRvd2FyZHMgSXRhbHkuIFRoZW4gYWxsIEdhdWwgb25jZSBtb3JlIGJyb2tlIG91dCBpbiByZXZvbHQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDUuMjQiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkIuIEcuPC90aXRsZT4gdi4gMjQtNTE8L2JpYmw+Ljwvbm90ZT4gYW5kIGdyZWF0IGFybWllcyB3ZW50IGFib3V0IGF0dGFja2luZyB0aGUgZW50cmVuY2htZW50cyBhbmQgdHJ5aW5nIHRvIGRlc3Ryb3kgdGhlIHdpbnRlci1xdWFydGVycyBvZiB0aGUgUm9tYW5zLiBUaGUgbW9zdCBudW1lcm91cyBhbmQgcG93ZXJmdWwgb2YgdGhlIHJlYmVscywgdW5kZXIgQWJyaW9yaXgsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyIGNhbGxzIGhpbSBBbWJpb3JpeC48L25vdGU+IHV0dGVybHkgZGVzdHJveWVkIFRpdHVyaXVzIGFuZCBDb3R0YSwgdG9nZXRoZXIgd2l0aCB0aGVpciBhcm15LCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz53aGlsZSB0aGUgbGVnaW9uIHVuZGVyIENpY2VybyB3YXMgc3Vycm91bmRlZCBhbmQgYmVzaWVnZWQgYnkgc2l4dHkgdGhvdXNhbmQgb2YgdGhlbSwgYW5kIG5hcnJvd2x5IGVzY2FwZWQgaGF2aW5nIGl0cyBjYW1wIHRha2VuIGJ5IHN0b3JtLCBhbHRob3VnaCBhbGwgd2VyZSB3b3VuZGVkIGFuZCB3ZW50IGJleW9uZCB0aGVpciBwb3dlcnMgaW4gdGhlIGFyZG91ciBvZiB0aGVpciBkZWZlbmNlLjwvcD4KICAgICAgICAgPHA+V2hlbiB0aWRpbmdzIG9mIHRoZXNlIHRoaW5ncyByZWFjaGVkIENhZXNhciwgd2hvIHdhcyBmYXIgb24gaGlzIGpvdXJuZXksIGhlIHR1cm5lZCBiYWNrIHF1aWNrbHksIGdvdCB0b2dldGhlciBzZXZlbiB0aG91c2FuZCBtZW4gaW4gYWxsLCBhbmQgaHVycmllZCBvbiB0byBleHRyaWNhdGUgQ2ljZXJvIGZyb20gdGhlIHNpZWdlLiBCdXQgdGhlIGJlc2llZ2VycyBiZWNhbWUgYXdhcmUgb2YgaGlzIGFwcHJvYWNoLCBhbmQgd2VudCB0byBtZWV0IGhpbSB3aXRoIHRoZSBwdXJwb3NlIG9mIGN1dHRpbmcgaGlzIGZvcmNlcyBvZmYgYXQgb25jZSwgZGVzcGlzaW5nIHRoZWlyIHNtYWxsIG51bWJlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBkZWNlaXZlZCB0aGVtIGJ5IGF2b2lkaW5nIGJhdHRsZSBjb250aW51YWxseSwgYW5kIHdoZW4gaGUgaGFkIGZvdW5kIGEgcGxhY2Ugc3VpdGFibGUgZm9yIG9uZSB3aG8gd2FzIGZpZ2h0aW5nIGFnYWluc3QgbWFueSB3aXRoIGZldywgZm9ydGlmaWVkIGEgY2FtcCwgd2hlcmUgaGUga2VwdCBoaXMgbWVuIGFsdG9nZXRoZXIgZnJvbSBmaWdodGluZyBhbmQgZm9yY2VkIHRoZW0gdG8gaW5jcmVhc2UgdGhlIGhlaWdodCBvZiB0aGVpciByYW1wYXJ0cyBhbmQgdGhlIGRlZmVuY2VzIG9mIHRoZWlyIGdhdGVzIGFzIHRob3VnaCB0aGV5IHdlcmUgYWZyYWlkLiBIaXMgc3RyYXRlZ3kgdGh1cyBsZWQgdGhlIGVuZW15IHRvIGRlc3Bpc2UgaGltLCB1bnRpbCBhdCBsYXN0LCB3aGVuIHRoZWlyIGJvbGRuZXNzIGxlZCB0aGVtIHRvIGF0dGFjayBpbiBzY2F0dGVyZWQgYmFuZHMsIGhlIHNhbGxpZWQgb3V0LCByb3V0ZWQgdGhlbSwgYW5kIGRlc3Ryb3llZCBtYW55IG9mIHRoZW0uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBudW1lcm91cyByZXZvbHRzIG9mIHRoZSBHYXVscyBpbiB0aG9zZSBwYXJ0cyB3ZXJlIHF1aWV0ZWQgYnkgdGhpcyBzdWNjZXNzLCBhcyB3ZWxsIGFzIGJ5IHRoZSBmYWN0IHRoYXQgQ2Flc2FyIGhpbXNlbGYsIGR1cmluZyB0aGUgd2ludGVyLCB3ZW50IGFib3V0IGluIGFsbCBkaXJlY3Rpb25zIGFuZCBrZXB0IGNsb3NlIHdhdGNoIG9uIHRoZSBkaXN0dXJiZXJzIG9mIHRoZSBwZWFjZS4gRm9yIHRoZXJlIGhhZCBjb21lIGZyb20gSXRhbHkgdGhyZWUgbGVnaW9ucyB0byByZXBsYWNlIHRoZSBtZW4gdGhhdCBoZSBoYWQgbG9zdCwgUG9tcGV5IGhhdmluZyBsZW50IHR3byBvZiB0aG9zZSB1bmRlciBoaXMgY29tbWFuZCwgYW5kIG9uZSBoYXZpbmcgYmVlbiBuZXdseSBsZXZpZWQgaW4gR2F1bCBhYm91dCB0aGUgUG8uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiByZW1vdGVyIHJlZ2lvbnM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QbHV0YXJjaCBoZXJlIHBhc3NlcyBvdmVyIHRoZSBldmVudHMgb2YgdGhlIHllYXIgNTMgQi5DLiwgZGVzY3JpYmVkIGJ5IENhZXNhciBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gRy48L3RpdGxlPiB2aTwvYmlibD4uIFRoZSBzZXZlbnRoIGJvb2sgaXMgd2hvbGx5IHRha2VuIHVwIHdpdGggdGhlIHdhciBub3cgdG8gYmUgZGVzY3JpYmVkICg1MiBCLkMuKS48L25vdGU+IHRoZSBnZXJtcyBvZiB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgZGFuZ2Vyb3VzIG9mIHRoZSB3YXJzIHdhZ2VkIGluIHRob3NlIHBhcnRzIGJlZ2FuIHRvIHNob3cgdGhlbXNlbHZlcy4gVGhleSBoYWQgZm9yIGEgbG9uZyB0aW1lIGJlZW4gc2VjcmV0bHkgc293biBhbmQgY3VsdGl2YXRlZCBieSB0aGUgbW9zdCBpbmZsdWVudGlhbCBtZW4gYW1vbmcgdGhlIG1vc3Qgd2FybGlrZSB0cmliZXMsIGFuZCBkZXJpdmVkIHN0cmVuZ3RoIGZyb20gbGFyZ2UgYm9kaWVzIG9mIHlvdW5nIG1lbiBhc3NlbWJsZWQgZnJvbSBhbGwgc2lkZXMgaW4gYXJtcywgZnJvbSBncmVhdCByaWNoZXMgYnJvdWdodCB0b2dldGhlciwgZnJvbSBzdHJvbmcgY2l0aWVzLCBhbmQgZnJvbSBjb3VudHJpZXMgd2hpY2ggd2VyZSBoYXJkIHRvIGludmFkZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhhdCBzZWFzb24gb2Ygd2ludGVyLCB0b28sIGZyb3plbiByaXZlcnMsIGZvcmVzdHMgYnVyaWVkIGluIHNub3csIHBsYWlucyBjb252ZXJ0ZWQgaW50byBsYWtlcyBieSB3aW50ZXIgdG9ycmVudHMsIGluIHNvbWUgcGFydHMgcGF0aHMgb2JsaXRlcmF0ZWQgYnkgZGVlcCBzbm93LCBhbmQgaW4gb3RoZXJzIHRoZSBncmVhdCB1bmNlcnRhaW50eSBvZiBhIG1hcmNoIHRocm91Z2ggc3dhbXBzIGFuZCBzdHJlYW1zIGRpdmVydGVkIGZyb20gdGhlaXIgY291cnNlcywgYWxsIHNlZW1lZCB0byBtYWtlIGl0IHdob2xseSBpbXBvc3NpYmxlIGZvciBDYWVzYXIgdG8gb3Bwb3NlIHRoZSBwbGFucyBvZiB0aGUgcmViZWxzLiBBY2NvcmRpbmdseSwgbWFueSB0cmliZXMgaGFkIHJldm9sdGVkLCBidXQgdGhlIGhlYWQgYW5kIGZyb250IG9mIHRoZSByZXZvbHQgd2VyZSB0aGUgQXJ2ZXJuaSBhbmQgQ2FybnVudGluaSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBDYWVzYXIncyA8dGl0bGU+Qi4gRy48L3RpdGxlPnRoZSBuYW1lcyBhcmUgQ2FybnV0ZXMgYW5kIFZlcmNpbmdldG9yaXguPC9ub3RlPiBhbmQgVmVyZ2VudG9yaXggd2FzIGNob3NlbiB0byBoYXZlIHRoZSBlbnRpcmUgYXV0aG9yaXR5IGluIHRoZSB3YXIuIEhpcyBmYXRoZXIgdGhlIEdhdWxzIGhhZCBwdXQgdG8gZGVhdGggYmVjYXVzZSB0aGV5IHRob3VnaHQgaGUgd2FzIGFpbWluZyBhdCBhIHR5cmFubnkuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbGVhZGVyLCB0aGVuLCBhZnRlciBkaXZpZGluZyBoaXMgZm9yY2VzIGludG8gbWFueSBwYXJ0cyBhbmQgcHV0dGluZyBtYW55IG9mZmljZXJzIGluIGNvbW1hbmQgb2YgdGhlbSwgd2FzIHdpbm5pbmcgb3ZlciBhbGwgdGhlIGNvdW50cnkgcm91bmQgYWJvdXQgYXMgZmFyIGFzIHRoZSB3YXRlci1zaGVkIG9mIHRoZSBBcmFyLiBIZSBwdXJwb3NlZCwgbm93IHRoYXQgdGhlcmUgd2FzIGEgY29hbGl0aW9uIGF0IFJvbWUgYWdhaW5zdCBDYWVzYXIsIGF0IG9uY2UgdG8gcm91c2UgYWxsIEdhdWwgdG8gd2FyLiBJZiBoZSBoYWQgZG9uZSB0aGlzIGEgbGl0dGxlIGxhdGVyLCB3aGVuIENhZXNhciB3YXMgaW52b2x2ZWQgaW4gdGhlIGNpdmlsIHdhciwgSXRhbHkgd291bGQgaGF2ZSBiZWVuIGEgcHJleSB0byB0ZXJyb3JzIG5vIGxlc3MgYWN1dGUgdGhhbiB0aG9zZSBhcm91c2VkIGJ5IHRoZSBDaW1icmkgb2Ygb2xkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXMgaXQgd2FzLCB0aGUgbWFuIGVuZG93ZWQgYnkgbmF0dXJlIHRvIG1ha2UgdGhlIGJlc3QgdXNlIG9mIGFsbCB0aGUgYXJ0cyBvZiB3YXIsIGFuZCBwYXJ0aWN1bGFybHkgb2YgaXRzIGNydWNpYWwgbW9tZW50cywgbmFtZWx5IENhZXNhciwgYXMgc29vbiBhcyBoZSBsZWFybmVkIG9mIHRoZSByZXZvbHQsIHNldCBvdXQgYW5kIG1hcmNoZWQgYnkgdGhlIHNhbWUgcm9hZHMgb3ZlciB3aGljaCBoZSBoYWQgcHJldmlvdXNseSBjb21lLCBhbmQgYnkgdGhlIHZpZ291ciBhbmQgc3BlZWQgb2YgaGlzIHBhc3NhZ2UgaW4gc28gc2V2ZXJlIGEgd2ludGVyIHNob3dlZCB0aGUgQmFyYmFyaWFucyB0aGF0IGFuIHVuY29ucXVlcmVkIGFuZCBpbnZpbmNpYmxlIGFybXkgd2FzIGNvbWluZyBhZ2FpbnN0IHRoZW0uIEZvciB3aGVyZSBpdCB3YXMgaW5jcmVkaWJsZSB0aGF0IG9uZSBvZiBoaXMgbWVzc2VuZ2VycyBvciBsZXR0ZXItY2FycmllcnMgY291bGQgbWFrZSBoaXMgd2F5IGluIGEgbG9uZyB0aW1lLCB0aGVyZSBoZSB3YXMgc2VlbiB3aXRoIGhpcyB3aG9sZSBhcm15LCBhdCBvbmNlIHJhdmFnaW5nIHRoZWlyIGxhbmRzIGFuZCBkZXN0cm95aW5nIHRoZWlyIHN0cm9uZ2hvbGRzLCBzdWJkdWluZyBjaXRpZXMsIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCByZWNlaXZpbmcgdGhvc2Ugd2hvIGNhbWUgb3ZlciB0byBoaXMgc2lkZSwgdW50aWwgdGhlIG5hdGlvbiBvZiB0aGUgQWVkdWkgYWxzbyBlbnRlcmVkIHRoZSB3YXIgYWdhaW5zdCBoaW0uIFRoZXNlIHVwIHRvIHRoaXMgdGltZSBoYWQgY2FsbGVkIHRoZW1zZWx2ZXMgYnJldGhyZW4gb2YgdGhlIFJvbWFucyBhbmQgaGFkIGJlZW4gY29uc3BpY3VvdXNseSBob25vdXJlZCwgYnV0IG5vdywgYnkgam9pbmluZyB0aGUgcmViZWxzLCB0aGV5IGNhdXNlZCBncmVhdCBkZWplY3Rpb24gaW4gQ2Flc2FyJ3MgYXJteS4gSW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBDYWVzYXIgcmVtb3ZlZCBmcm9tIHRob3NlIHBhcnRzIGFuZCBwYXNzZWQgYWNyb3NzIHRoZSB0ZXJyaXRvcnkgb2YgdGhlIExpbmdvbmVzLCB3aXNoaW5nIHRvIHJlYWNoIHRoZSBjb3VudHJ5IG9mIHRoZSBTZXF1YW5pLCB3aG8gd2VyZSBmcmllbmRzLCBhbmQgc3Rvb2QgYXMgYSBidWx3YXJrIGJldHdlZW4gSXRhbHkgYW5kIHRoZSByZXN0IG9mIEdhdWwuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHRoZSBlbmVteSBmZWxsIHVwb24gaGltIGFuZCBzdXJyb3VuZGVkIGhpbSB3aXRoIG1hbnkgdGVucyBvZiB0aG91c2FuZHMsIHNvIHRoYXQgaGUgZXNzYXllZCB0byBmaWdodCBhIGRlY2lzaXZlIGJhdHRsZS4gSW4gdGhlIG1haW4gaGUgZ290IHRoZSBiZXN0IG9mIHRoZSBzdHJ1Z2dsZSwgYW5kIGFmdGVyIGEgbG9uZyB0aW1lIGFuZCBtdWNoIHNsYXVnaHRlciBvdmVycG93ZXJlZCB0aGUgQmFyYmFyaWFuczsgYnV0IGl0IGFwcGVhcnMgdGhhdCBhdCBmaXJzdCBoZSBtZXQgd2l0aCBzb21lIHJldmVyc2UsIGFuZCB0aGUgQXJ2ZXJuaSBzaG93IGEgc2hvcnQtc3dvcmQgaGFuZ2luZyBpbiBhIHRlbXBsZSwgd2hpY2ggdGhleSBzYXkgd2FzIGNhcHR1cmVkIGZyb20gQ2Flc2FyLiBXaGVuIENhZXNhciBoaW1zZWxmIHNhdyBpdCwgYXQgYSBsYXRlciB0aW1lLCBoZSBzbWlsZWQsIGFuZCB0aG91Z2ggaGlzIGZyaWVuZHMgdXJnZWQgaGltIHRvIGhhdmUgaXQgdGFrZW4gZG93biwgaGUgd291bGQgbm90IHBlcm1pdCBpdCwgY29uc2lkZXJpbmcgaXQgc2FjcmVkLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGUgbW9zdCBvZiB0aGUgQmFyYmFyaWFucyB3aG8gZXNjYXBlZCBhdCB0aGF0IHRpbWUgdG9vayByZWZ1Z2Ugd2l0aCB0aGVpciBraW5nIGluIHRoZSBjaXR5IG9mIEFsZXNpYS4gQW5kIHdoaWxlIENhZXNhciB3YXMgYmVzaWVnaW5nIHRoaXMgY2l0eSwgd2hpY2ggd2FzIHRob3VnaHQgdG8gYmUgaW1wcmVnbmFibGUgYnkgcmVhc29uIG9mIHRoZSBncmVhdCBzaXplIG9mIGl0cyB3YWxscyBhbmQgdGhlIG51bWJlciBvZiB0aGVpciBkZWZlbmRlcnMsIHRoZXJlIGZlbGwgdXBvbiBoaW0gZnJvbSBvdXRzaWRlIHRoZSBjaXR5IGEgcGVyaWwgdG9vIGdyZWF0IGZvciB3b3JkcyB0byBkZXBpY3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbGwgdGhhdCB3YXMgbWlnaHRpZXN0IGFtb25nIHRoZSBuYXRpb25zIG9mIEdhdWwgYXNzZW1ibGVkIGFuZCBjYW1lIGluIGFybXMgdG8gQWxlc2lhLCB0aHJlZSBodW5kcmVkIHRob3VzYW5kIHN0cm9uZzsgYW5kIHRoZSBudW1iZXIgb2YgZmlnaHRpbmcgbWVuIGluc2lkZSB0aGUgY2l0eSB3YXMgbm90IGxlc3MgdGhhbiBhIGh1bmRyZWQgYW5kIHNldmVudHkgdGhvdXNhbmQuIFRodXMgQ2Flc2FyLCBjYXVnaHQgYmV0d2VlbiBzbyBsYXJnZSBob3N0aWxlIGZvcmNlcyBhbmQgYmVzaWVnZWQgdGhlcmUsIHdhcyBjb21wZWxsZWQgdG8gYnVpbGQgdHdvIHdhbGxzIGZvciBoaXMgcHJvdGVjdGlvbiwgb25lIGxvb2tpbmcgdG93YXJkcyB0aGUgY2l0eSwgYW5kIHRoZSBvdGhlciB0b3dhcmRzIHRob3NlIHdobyBoYWQgY29tZSB1cCB0byByZWxpZXZlIGl0OyBoZSBmZWx0IHRoYXQgaWYgdGhlIHR3byBmb3JjZXMgc2hvdWxkIHVuaXRlIGhpcyBjYXVzZSB3YXMgd2hvbGx5IGxvc3QuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBtYW55IHJlYXNvbnMsIHRoZW4sIGFuZCBuYXR1cmFsbHksIENhZXNhcidzIHBlcmlsIGF0IEFsZXNpYSB3YXMgZmFtb3VzLCBzaW5jZSBpdCBwcm9kdWNlZCBtb3JlIGRlZWRzIG9mIHNraWxsIGFuZCBkYXJpbmcgdGhhbiBhbnkgb2YgaGlzIG90aGVyIHN0cnVnZ2xlczsgYnV0IG9uZSBtdXN0IGJlIGFtYXplZCBhYm92ZSBhbGwgdGhhdCBoZSBlbmdhZ2VkIGFuZCBjb25xdWVyZWQgc28gbWFueSB0ZW5zIG9mIHRob3VzYW5kcyBvdXRzaWRlIHRoZSBjaXR5IHdpdGhvdXQgdGhlIGtub3dsZWRnZSBvZiB0aG9zZSBpbnNpZGUsIG5heSBtb3JlLCB3aXRob3V0IHRoZSBrbm93bGVkZ2UgZXZlbiBvZiB0aGUgUm9tYW5zIHdobyB3ZXJlIGd1YXJkaW5nIHRoZSB3YWxsIHRoYXQgZmFjZWQgdGhlIGNpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSBkaWQgbm90IGxlYXJuIG9mIHRoZSBWaWN0b3J5IHVudGlsIHRoZSB3YWlsaW5nIG9mIHRoZSBtZW4gaW4gQWxlc2lhIGFuZCB0aGUgbGFtZW50YXRpb25zIG9mIHRoZSB3b21lbiB3ZXJlIGhlYXJkLCBhcyB0aGV5IGJlaGVsZCBpbiB0aGUgcXVhcnRlcnMgb2YgdGhlIGVuZW15IG1hbnkgc2hpZWxkcyBhZG9ybmVkIHdpdGggZ29sZCBhbmQgc2lsdmVyLCBtYW55IGNvcnNlbGV0cyBzbWVhcmVkIHdpdGggYmxvb2QsIGFuZCBhbHNvIGRyaW5raW5nIGN1cHMgYW5kIHRlbnRzIG9mIEdhbGxpYyBmYXNoaW9uIGNhcnJpZWQgYnkgdGhlIFJvbWFucyBpbnRvIHRoZWlyIGNhbXAuIFNvIHF1aWNrbHkgZGlkIHNvIGdyZWF0IGEgZm9yY2UsIGxpa2UgYSBwaGFudG9tIG9yIGEgZHJlYW0sIGRpc3BlcnNlIGFuZCB2YW5pc2ggb3V0IG9mIHNpZ2h0LCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZW0gaGF2aW5nIGZhbGxlbiBpbiB0aGUgYmF0dGxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSB3aG8gaGVsZCBBbGVzaWEsIHRvbywgYWZ0ZXIgZ2l2aW5nIHRoZW1zZWx2ZXMgYW5kIENhZXNhciBubyBzbWFsbCB0cm91YmxlLCBmaW5hbGx5IHN1cnJlbmRlcmVkLiBBbmQgdGhlIGxlYWRlciBvZiB0aGUgd2hvbGUgd2FyLCBWZXJnZW50b3JpeCwgYWZ0ZXIgcHV0dGluZyBvbiBoaXMgbW9zdCBiZWF1dGlmdWwgYXJtb3VyIGFuZCBkZWNvcmF0aW5nIGhpcyBob3JzZSwgcm9kZSBvdXQgdGhyb3VnaCB0aGUgZ2F0ZS4gSGUgbWFkZSBhIGNpcmN1aXQgcm91bmQgQ2Flc2FyLCB3aG8gcmVtYWluZWQgc2VhdGVkLCBhbmQgdGhlbiBsZWFwZWQgZG93biBmcm9tIGhpcyBob3JzZSwgc3RyaXBwZWQgb2ZmIGhpcyBzdWl0IG9mIGFybW91ciwgYW5kIHNlYXRpbmcgaGltc2VsZiBhdCBDYWVzYXIncyBmZWV0IHJlbWFpbmVkIG1vdGlvbmxlc3MsIHVudGlsIGhlIHdhcyBkZWxpdmVyZWQgdXAgdG8gYmUga2VwdCBpbiBjdXN0b2R5IGZvciB0aGUgdHJpdW1waC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBDYWVzYXIgaGFkIGxvbmcgYWdvIGRlY2lkZWQgdG8gcHV0IGRvd24gUG9tcGV5LCBqdXN0IGFzLCBvZiBjb3Vyc2UsIFBvbXBleSBhbHNvIGhhZCBkZWNpZGVkIHRvIHB1dCBDYWVzYXIgZG93bi4gRm9yIG5vdyB0aGF0IENyYXNzdXMsIHdobyB3YXMgb25seSB3YWl0aW5nIGZvciB0aGUgaXNzdWUgb2YgdGhlaXIgc3RydWdnbGUgdG8gZW5nYWdlIHRoZSB2aWN0b3IsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTMuNiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbGlpaS4gNjwvYmlibD4uPC9ub3RlPiBoYWQgcGVyaXNoZWQgYW1vbmcgdGhlIFBhcnRoaWFucywgaXQgcmVtYWluZWQgZm9yIGhpbSB3aG8gd291bGQgYmUgZ3JlYXRlc3QgdG8gcHV0IGRvd24gaGltIHdobyB3YXMsIGFuZCBmb3IgaGltIHdobyB3YXMgZ3JlYXRlc3QsIGlmIGhlIHdvdWxkIG5vdCBiZSBwdXQgZG93biwgdG8gdGFrZSBvZmYgaW4gdGltZSB0aGUgbWFuIGhlIGZlYXJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBmZWFyIGhhZCBvbmx5IHJlY2VudGx5IGNvbWUgdXBvbiBQb21wZXksIHdobyB0aWxsIHRoZW4gZGVzcGlzZWQgQ2Flc2FyLCBmZWVsaW5nIHRoYXQgaXQgd2FzIG5vIGhhcmQgdGFzayB0byBwdXQgZG93biBhZ2FpbiB0aGUgbWFuIHdob20gaGUgaGltc2VsZiBoYWQgcmFpc2VkIG9uIGhpZ2guIEJ1dCBDYWVzYXIgaGFkIGZyb20gdGhlIG91dHNldCBmb3JtZWQgdGhpcyBkZXNpZ24sIGFuZCBsaWtlIGFuIGF0aGxldGUgaGFkIHJlbW92ZWQgaGltc2VsZiB0byBhIGdyZWF0IGRpc3RhbmNlIGZyb20gaGlzIGFudGFnb25pc3RzLCBhbmQgYnkgZXhlcmNpc2luZyBoaW1zZWxmIGluIHRoZSBHYWxsaWMgd2FycyBoYWQgcHJhY3Rpc2VkIGhpcyB0cm9vcHMgYW5kIGluY3JlYXNlZCBoaXMgZmFtZSwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+bGlmdGluZyBoaW1zZWxmIGJ5IGhpcyBhY2hpZXZlbWVudHMgdG8gYSBoZWlnaHQgd2hlcmUgaGUgY291bGQgdmllIHdpdGggdGhlIHN1Y2Nlc3NlcyBvZiBQb21wZXkuIEhlIGxhaWQgaG9sZCBvZiBwcmV0ZXh0cyB3aGljaCB3ZXJlIGZ1cm5pc2hlZCBwYXJ0bHkgYnkgUG9tcGV5IGhpbXNlbGYsIGFuZCBwYXJ0bHkgYnkgdGhlIHRpbWVzIGFuZCB0aGUgZXZpbCBzdGF0ZSBvZiBnb3Zlcm5tZW50IGF0IFJvbWUsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciBsaXY8L2JpYmw+Ljwvbm90ZT4gYnkgcmVhc29uIG9mIHdoaWNoIGNhbmRpZGF0ZXMgZm9yIG9mZmljZSBzZXQgdXAgY291bnRpbmctdGFibGVzIGluIHB1YmxpYyBhbmQgc2hhbWVsZXNzbHkgYnJpYmVkIHRoZSBtdWx0aXR1ZGVzLCB3aGlsZSB0aGUgcGVvcGxlIHdlbnQgZG93biBpbnRvIHRoZSBmb3J1bSB1bmRlciBwYXksIGNvbnRlbmRpbmcgaW4gYmVoYWxmIG9mIHRoZWlyIHBheW1hc3Rlciwgbm90IHdpdGggdm90ZXMsIGJ1dCB3aXRoIGJvd3MgYW5kIGFycm93cywgc3dvcmRzLCBhbmQgc2xpbmdzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PZnRlbiwgdG9vLCB0aGV5IHdvdWxkIGRlZmlsZSB0aGUgcm9zdHJhIHdpdGggYmxvb2QgYW5kIGNvcnBzZXMgYmVmb3JlIHRoZXkgc2VwYXJhdGVkLCBsZWF2aW5nIHRoZSBjaXR5IHRvIGFuYXJjaHkgbGlrZSBhIHNoaXAgZHJpZnRpbmcgYWJvdXQgd2l0aG91dCBhIHN0ZWVyc21hbiwgc28gdGhhdCBtZW4gb2YgdW5kZXJzdGFuZGluZyB3ZXJlIGNvbnRlbnQgaWYgbWF0dGVycyBpc3N1ZWQgaW4gbm90aGluZyB3b3JzZSBmb3IgdGhlbSB0aGFuIG1vbmFyY2h5LCBhZnRlciBzdWNoIG1hZG5lc3MgYW5kIHNvIGdyZWF0IGEgdGVtcGVzdC4gQW5kIHRoZXJlIHdlcmUgbWFueSB3aG8gYWN0dWFsbHkgZGFyZWQgdG8gc2F5IGluIHB1YmxpYyB0aGF0IG5vdGhpbmcgYnV0IG1vbmFyY2h5IGNvdWxkIG5vdyBjdXJlIHRoZSBkaXNlYXNlcyBvZiB0aGUgc3RhdGUsIGFuZCB0aGF0IHRoaXMgcmVtZWR5IG1pZ2h0IHRvIGJlIGFkb3B0ZWQgd2hlbiBvZmZlcmVkIGJ5IHRoZSBnZW50bGVzdCBvZiBwaHlzaWNpYW5zLCBoaW50aW5nIGF0IFBvbXBleS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gZXZlbiBQb21wZXksIGFsdGhvdWdoIGluIHdvcmRzIGhlIGFmZmVjdGVkIHRvIGRlY2xpbmUgdGhlIGhvbm91ciwgaW4gZmFjdCBkaWQgbW9yZSB0aGFuIGFueSBvbmUgZWxzZSB0byBlZmZlY3QgaGlzIGFwcG9pbnRtZW50IGFzIGRpY3RhdG9yLCBDYXRvIHNhdyB0aHJvdWdoIGhpcyBkZXNpZ24gYW5kIHBlcnN1YWRlZCB0aGUgc2VuYXRlIHRvIGFwcG9pbnQgaGltIHNvbGUgY29uc3VsLCBzb2xhY2luZyBoaW0gd2l0aCBhIG1vcmUgbGVnYWwgbW9uYXJjaHkgdGhhdCBoZSBtaWdodCBub3QgZm9yY2UgaGlzIHdheSB0byB0aGUgZGljdGF0b3JzaGlwLiBUaGV5IGFsc28gdm90ZWQgaGltIGFkZGl0aW9uYWwgdGltZSBpbiB3aGljaCB0byBob2xkIGhpcyBwcm92aW5jZXM7IGFuZCBoZSBoYWQgdHdvLCBTcGFpbiBhbmQgYWxsIEFmcmljYSwgd2hpY2ggaGUgbWFuYWdlZCBieSBzZW5kaW5nIGxlZ2F0ZXMgdGhpdGhlciBhbmQgbWFpbnRhaW5pbmcgYXJtaWVzIHRoZXJlLCBmb3Igd2hpY2ggaGUgcmVjZWl2ZWQgZnJvbSB0aGUgcHVibGljIHRyZWFzdXJ5IGEgdGhvdXNhbmQgdGFsZW50cyBhbm51YWxseS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NS43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBsdi4gNzwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2VxdWVudGx5LCBDYWVzYXIgY2FudmFzc2VkIGJ5IHByb3h5IGZvciBhIGNvbnN1bHNoaXAsIGFuZCBsaWtld2lzZSBmb3IgYW4gZXh0ZW5zaW9uIG9mIHRpbWUgaW4gd2hpY2ggdG8gaG9sZCBoaXMgb3duIHByb3ZpbmNlcy4gQXQgZmlyc3QsIHRoZW4sIFBvbXBleSBoZWxkIGhpcyBwZWFjZSwgd2hpbGUgTWFyY2VsbHVzIGFuZCBMZW50dWx1cyBvcHBvc2VkIHRoZXNlIHBsYW5zOyB0aGV5IGhhdGVkIENhZXNhciBvbiBvdGhlciBncm91bmRzLCBhbmQgd2VudCBiZXlvbmQgYWxsIGJvdW5kcyBpbiB0aGVpciBlZmZvcnRzIHRvIGJyaW5nIGRpc2hvbm91ciBhbmQgYWJ1c2UgdXBvbiBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgdGhlIGluaGFiaXRhbnRzIG9mIE5vdnVtIENvbXVtLCBhIGNvbG9ueSByZWNlbnRseSBlc3RhYmxpc2hlZCBieSBDYWVzYXIgaW4gR2F1bCwgd2VyZSBkZXByaXZlZCBvZiBjaXRpemVuc2hpcCBieSB0aGVtOyBhbmQgTWFyY2VsbHVzLCB3aGlsZSBoZSB3YXMgY29uc3VsLCBiZWF0IHdpdGggcm9kcyBhIHNlbmF0b3Igb2YgTm92dW0gQ29tdW0gd2hvIGhhZCBjb21lIHRvIFJvbWUsIHRlbGxpbmcgaGltIGJlc2lkZXMgdGhhdCBoZSBwdXQgdGhlc2UgbWFya3MgdXBvbiBoaW0gdG8gcHJvdmUgdGhhdCBoZSB3YXMgbm90IGEgUm9tYW4sIGFuZCBiYWRlIGhpbSBnbyBiYWNrIGFuZCBzaG93IHRoZW0gdG8gQ2Flc2FyLiBCdXQgYWZ0ZXIgdGhlIGNvbnN1bHNoaXAgb2YgTWFyY2VsbHVzLCBDYWVzYXIgaGF2aW5nIG5vdyBzZW50IGhpcyBHYWxsaWMgd2VhbHRoIGZvciBhbGwgdGhvc2UgaW4gcHVibGljIGxpZmUgdG8gZHJhdyBmcm9tIGluIGNvcGlvdXMgc3RyZWFtcywgYW5kIGhhdmluZyBmcmVlZCBDdXJpbyB0aGUgdHJpYnVuZSBmcm9tIG1hbnkgZGVidHMsIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgZ2l2ZW4gUGF1bHVzIHRoZSBjb25zdWwgZmlmdGVlbiBodW5kcmVkIHRhbGVudHMsIG91dCBvZiB3aGljaCBoZSBhZG9ybmVkIHRoZSBmb3J1bSB3aXRoIHRoZSBCYXNpbGljYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgPGZvcmVpZ24gbGFuZz0ibGEiPkJhc2lsaWNhIFBhdWxpIEFlbWlsaWk8L2ZvcmVpZ24+LCBjYWxsZWQgYWxzbyA8Zm9yZWlnbiBsYW5nPSJsYSI+UmVnaWEgUGF1bGk8L2ZvcmVpZ24+LiBJdCB0b29rIHRoZSBwbGFjZSBvZiB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPkJhc2lsaWNhIEFlbWlsaWEgZXQgRnVsdmlhPC9mb3JlaWduPiwgZXJlY3RlZCBpbiAxNzkgQi5DLiA8L25vdGU+IGEgZmFtb3VzIG1vbnVtZW50LCBlcmVjdGVkIGluIHBsYWNlIG9mIHRoZSBGdWx2aWEs4oCUdW5kZXIgdGhlc2UgY2lyY3Vtc3RhbmNlcyBQb21wZXkgdG9vayBmcmlnaHQgYXQgdGhlIGNvYWxpdGlvbiwgYW5kIG9wZW5seSBub3csIGJ5IGhpcyBvd24gZWZmb3J0cyBhbmQgdGhvc2Ugb2YgaGlzIGZyaWVuZHMsIHRyaWVkIHRvIGhhdmUgYSBzdWNjZXNzb3IgYXBwb2ludGVkIHRvIENhZXNhciBpbiBoaXMgZ292ZXJubWVudCwgYW5kIHNlbnQgYSBkZW1hbmQgdG8gaGltIGZvciB0aGUgcmV0dXJuIG9mIHRoZSBzb2xkaWVycyB3aG9tIGhlIGhhZCBsZW50IGhpbSBmb3IgaGlzIEdhbGxpYyBjb250ZXN0cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDI1LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2LiAxPC9iaWJsPi48L25vdGU+IENhZXNhciBzZW50IHRoZSBzb2xkaWVycyBiYWNrLCBhZnRlciBtYWtpbmcgYSBwcmVzZW50IHRvIGVhY2ggbWFuIG9mIHR3byBodW5kcmVkIGFuZCBmaWZ0eSBkcmFjaG1hcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBvZmZpY2VycyB3aG8gYnJvdWdodCB0aGVzZSBtZW4gdG8gUG9tcGV5IHNwcmVhZCBhYnJvYWQgYW1vbmcgdGhlIG11bHRpdHVkZSBzdG9yaWVzIHJlZ2FyZGluZyBDYWVzYXIgd2hpY2ggd2VyZSBuZWl0aGVyIHJlYXNvbmFibGUgbm9yIHRydWUsIGFuZCBydWluZWQgUG9tcGV5IGhpbXNlbGYgd2l0aCB2YWluIGhvcGVzLiBUaGV5IHRvbGQgaGltIHRoYXQgQ2Flc2FyJ3MgYXJteSB5ZWFybmVkIGZvciBoaW0sIGFuZCB0aGF0IHdoaWxlIGhlIHdhcyB3aXRoIGRpZmZpY3VsdHkgY29udHJvbGxpbmcgYWZmYWlycyBpbiB0aGUgY2l0eSBvd2luZyB0byB0aGUgZGlzZWFzZSBvZiBlbnZ5IHdoaWNoIGZlc3RlcmVkIGluIHRoZSBib2R5IHBvbGl0aWMsIHRoZSBmb3JjZXMgaW4gR2F1bCB3ZXJlIHJlYWR5IHRvIHNlcnZlIGhpbSwgYW5kIGhhZCBidXQgdG8gY3Jvc3MgaW50byBJdGFseSB3aGVuIHRoZXkgd291bGQgYXQgb25jZSBiZSBvbiBoaXMgc2lkZTsgc28gb2Jub3hpb3VzIHRvIHRoZW0gaGFkIENhZXNhciBiZWNvbWUgYnkgcmVhc29uIG9mIHRoZSBtdWx0aXR1ZGUgb2YgaGlzIGNhbXBhaWducywgYW5kIHNvIHN1c3BpY2lvdXMgb2YgaGltIHdlcmUgdGhleSBtYWRlIGJ5IHRoZWlyIGZlYXIgb2YgYSBtb25hcmNoeS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoaXMgZmVkIFBvbXBleSdzIHZhbml0eSwgYW5kIGhlIG5lZ2xlY3RlZCB0byBwcm92aWRlIGhpbXNlbGYgd2l0aCBzb2xkaWVycywgYXMgdGhvdWdoIGhlIGhhZCBubyBmZWFyczsgd2hpbGUgd2l0aCBzcGVlY2hlcyBhbmQgcmVzb2x1dGlvbnMgb2YgdGhlIHNlbmF0ZSBoZSB3YXMgY2FycnlpbmcgdGhlIGRheSBhZ2FpbnN0IENhZXNhciwgYXMgaGUgc3VwcG9zZWQsIGFsdGhvdWdoIGhlIHdhcyBtZXJlbHkgZ2V0dGluZyBtZWFzdXJlcyByZWplY3RlZCBhYm91dCB3aGljaCBDYWVzYXIgY2FyZWQgbmF1Z2h0LiBOYXksIHdlIGFyZSB0b2xkIHRoYXQgb25lIG9mIHRoZSBjZW50dXJpb25zIHNlbnQgdG8gUm9tZSBieSBDYWVzYXIsIGFzIGhlIHN0b29kIGluIGZyb250IG9mIHRoZSBzZW5hdGUtaG91c2UgYW5kIGxlYXJuZWQgdGhhdCB0aGUgc2VuYXRlIHdvdWxkIG5vdCBnaXZlIENhZXNhciBhbiBleHRlbnNpb24gb2YgaGlzIHRlcm0gb2YgY29tbWFuZCwgc2xhcHBlZCB0aGUgaGFuZGxlIG9mIGhpcyBzd29yZCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhpcyB3aWxsIGdpdmUgaXQ8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU4LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx2aWlpLiAyPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGUgZGVtYW5kcyB3aGljaCBjYW1lIGZyb20gQ2Flc2FyIGNlcnRhaW5seSBoYWQgYSBzdHJpa2luZyBzZW1ibGFuY2Ugb2YgZmFpcm5lc3MuIEhlIGRlbWFuZGVkLCBuYW1lbHksIHRoYXQgaWYgaGUgaGltc2VsZiBsYWlkIGRvd24gaGlzIGFybXMsIFBvbXBleSBzaG91bGQgZG8gdGhlIHNhbWUsIGFuZCB0aGF0IGJvdGgsIHRodXMgYmVjb21lIHByaXZhdGUgbWVuLCBzaG91bGQgZmluZCB3aGF0IGZhdm91ciB0aGV5IGNvdWxkIHdpdGggdGhlaXIgZmVsbG93IGNpdGl6ZW5zOyBhcmd1aW5nIHRoYXQgaWYgdGhleSB0b29rIGF3YXkgaGlzIGZvcmNlcyBmcm9tIGhpbSwgYnV0IGNvbmZpcm1lZCBQb21wZXkgaW4gdGhlIHBvc3Nlc3Npb24gb2YgaGlzLCB0aGV5IHdvdWxkIGJlIGFjY3VzaW5nIG9uZSBvZiBzZWVraW5nIGEgdHlyYW5ueSBhbmQgbWFraW5nIHRoZSBvdGhlciBhIHR5cmFudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDdXJpbyBsYWlkIHRoZXNlIHByb3Bvc2FscyBiZWZvcmUgdGhlIHBlb3BsZSBpbiBiZWhhbGYgb2YgQ2Flc2FyLCBoZSB3YXMgbG91ZGx5IGFwcGxhdWRlZCwgYW5kIHNvbWUgYWN0dWFsbHkgY2FzdCBnYXJsYW5kcyBvZiBmbG93ZXJzIHVwb24gaGltIGFzIGlmIGhlIHdlcmUgYSB2aWN0b3Jpb3VzIGF0aGxldGUuIEFudG9ueSwgdG9vLCB3aG8gd2FzIGEgdHJpYnVuZSwgYnJvdWdodCBiZWZvcmUgdGhlIHBlb3BsZSBhIGxldHRlciBvZiBDYWVzYXIncyBvbiB0aGVzZSBtYXR0ZXJzIHdoaWNoIGhlIGhhZCByZWNlaXZlZCwgYW5kIHJlYWQgaXQgYWxvdWQsIGluIGRlZmlhbmNlIG9mIHRoZSBjb25zdWxzLiBCdXQgaW4gdGhlIHNlbmF0ZSwgU2NpcGlvLCB0aGUgZmF0aGVyLWluLWxhdyBvZiBQb21wZXksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UG9tcGV5IGhhZCBtYXJyaWVkIENvcm5lbGlhLCB0aGUgeW91bmcgd2lkb3cgb2YgUHVibGl1cyBDcmFzc3VzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHYuIDE8L2JpYmw+KS48L25vdGU+IGludHJvZHVjZWQgYSBtb3Rpb24gdGhhdCBpZiBieSBhIGZpeGVkIGRheSBDYWVzYXIgZGlkIG5vdCBsYXkgZG93biBoaXMgYXJtcyBoZSBzaG91bGQgYmUgZGVjbGFyZWQgYSBwdWJsaWMgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBjb25zdWxzIHB1dCB0aGUgcXVlc3Rpb24gd2hldGhlciBQb21wZXkgc2hvdWxkIGRpc21pc3MgaGlzIHNvbGRpZXJzLCBhbmQgYWdhaW4gd2hldGhlciBDYWVzYXIgc2hvdWxkLCB2ZXJ5IGZldyBzZW5hdG9ycyB2b3RlZCBmb3IgdGhlIGZpcnN0LCBhbmQgYWxsIGJ1dCBhIGZldyBmb3IgdGhlIHNlY29uZDsgYnV0IHdoZW4gQW50b255IGFnYWluIGRlbWFuZGVkIHRoYXQgYm90aCBzaG91bGQgZ2l2ZSB1cCB0aGVpciBjb21tYW5kcywgYWxsIHdpdGggb25lIGFjY29yZCBhc3NlbnRlZC4gU2NpcGlvLCBob3dldmVyLCBtYWRlIHZpb2xlbnQgb3Bwb3NpdGlvbiwgYW5kIExlbnR1bHVzIHRoZSBjb25zdWwgY3JpZWQgb3V0IHRoYXQgYWdhaW5zdCBhIHJvYmJlciB0aGVyZSB3YXMgbmVlZCBvZiBhcm1zLCBub3Qgdm90ZXM7IHdoZXJldXBvbiB0aGUgc2VuYXRlIGJyb2tlIHVwLCBhbmQgdGhlIHNlbmF0b3JzIHB1dCBvbiB0aGUgZ2FyYiBvZiBtb3VybmluZyBpbiB2aWV3IG9mIHRoZSBkaXNzZW5zaW9uLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgcHJlc2VudGx5IGxldHRlcnMgY2FtZSBmcm9tIENhZXNhciBpbiB3aGljaCBoZSBhcHBlYXJlZCB0byB0YWtlIGEgbW9yZSBtb2RlcmF0ZSBwb3NpdGlvbiwgZm9yIGhlIGFncmVlZCB0byBzdXJyZW5kZXIgZXZlcnl0aGluZyBlbHNlLCBidXQgZGVtYW5kZWQgdGhhdCBDaXNhbHBpbmUgR2F1bCBhbmQgSWxseXJpY3VtIHRvZ2V0aGVyIHdpdGggdHdvIGxlZ2lvbnMgc2hvdWxkIGJlIGdpdmVuIGhpbSB1bnRpbCBoZSBzdG9vZCBmb3IgaGlzIHNlY29uZCBjb25zdWxzaGlwLiBDaWNlcm8gdGhlIG9yYXRvciwgdG9vLCB3aG8gaGFkIGp1c3QgcmV0dXJuZWQgZnJvbSBDaWxpY2lhIGFuZCB3YXMgYnVzeSB3aXRoIGEgcmVjb25jaWxpYXRpb24sIHRyaWVkIHRvIG1vbGxpZnkgUG9tcGV5LCB3aG8geWllbGRlZCBldmVyeXRoaW5nIGVsc2UsIGJ1dCBpbnNpc3RlZCBvbiB0YWtpbmcgYXdheSBDYWVzYXIncyBzb2xkaWVycy4gQ2ljZXJvIGFsc28gdHJpZWQgdG8gcGVyc3VhZGUgdGhlIGZyaWVuZHMgb2YgQ2Flc2FyIHRvIGNvbXByb21pc2UgYW5kIGNvbWUgdG8gYSBzZXR0bGVtZW50IG9uIHRoZSBiYXNpcyBvZiB0aGUgcHJvdmluY2VzIG1lbnRpb25lZCBhbmQgb25seSBzaXggdGhvdXNhbmQgc29sZGllcnMsIGFuZCBQb21wZXkgd2FzIHJlYWR5IHRvIHlpZWxkIGFuZCBncmFudCBzbyBtYW55LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5MZW50dWx1cyB0aGUgY29uc3VsLCBob3dldmVyLCB3b3VsZCBub3QgbGV0IGhpbSwgYnV0IGFjdHVhbGx5IGhlYXBlZCBpbnN1bHRzIHVwb24gQW50b255IGFuZCBDdXJpbyBhbmQgZHJvdmUgdGhlbSBkaXNncmFjZWZ1bGx5IGZyb20gdGhlIHNlbmF0ZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5KYW51YXJ5IDcsIDQ5IEIuQy48L25vdGU+IHRodXMgaGltc2VsZiBjb250cml2aW5nIGZvciBDYWVzYXIgdGhlIG1vc3Qgc3BlY2lvdXMgb2YgaGlzIHByZXRleHRzLCBhbmQgdGhlIG9uZSBieSBtZWFucyBvZiB3aGljaCBoZSBtb3N0IG9mIGFsbCBpbmNpdGVkIGhpcyBzb2xkaWVycywgc2hvd2luZyB0aGVtIG1lbiBvZiByZXB1dGUgYW5kIGhpZ2ggb2ZmaWNlIHdobyBoYWQgZmxlZCB0aGUgY2l0eSBvbiBoaXJlZCBjYXJ0cyBhbmQgaW4gdGhlIGdhcmIgb2Ygc2xhdmVzLiBGb3IgdGh1cyB0aGV5IGhhZCBhcnJheWVkIHRoZW1zZWx2ZXMgaW4gdGhlaXIgZmVhciBhbmQgc3RvbGVuIG91dCBvZiBSb21lLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIENhZXNhciBoYWQgd2l0aCBoaW0gbm90IG1vcmUgdGhhbiB0aHJlZSBodW5kcmVkIGhvcnNlbWVuIGFuZCBmaXZlIHRob3VzYW5kIGxlZ2lvbmFyaWVzOyBmb3IgdGhlIHJlc3Qgb2YgaGlzIGFybXkgaGFkIGJlZW4gbGVmdCBiZXlvbmQgdGhlIEFscHMsIGFuZCB3YXMgdG8gYmUgYnJvdWdodCB1cCBieSB0aG9zZSB3aG9tIGhlIGhhZCBzZW50IGZvciB0aGUgcHVycG9zZS4gSGUgc2F3LCBob3dldmVyLCB0aGF0IHRoZSBiZWdpbm5pbmcgb2YgaGlzIGVudGVycHJpc2UgYW5kIGl0cyBpbml0aWFsIHN0ZXAgZGlkIG5vdCByZXF1aXJlIGEgbGFyZ2UgZm9yY2UgYXQgcHJlc2VudCwgYnV0IG11c3QgdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIGdvbGRlbiBtb21lbnQgYnkgc2hvd2luZyBhbWF6aW5nIGJvbGRuZXNzIGFuZCBzcGVlZCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+c2luY2UgaGUgY291bGQgc3RyaWtlIHRlcnJvciBpbnRvIGhpcyBlbmVtaWVzIGJ5IGFuIHVuZXhwZWN0ZWQgYmxvdyBtb3JlIGVhc2lseSB0aGFuIGhlIGNvdWxkIG92ZXJ3aGVsbSB0aGVtIGJ5IGFuIGF0dGFjayBpbiBmdWxsIGZvcmNlLiBIZSB0aGVyZWZvcmUgb3JkZXJlZCBoaXMgY2VudHVyaW9ucyBhbmQgb3RoZXIgb2ZmaWNlcnMsIHRha2luZyB0aGVpciBzd29yZHMgb25seSwgYW5kIHdpdGhvdXQgdGhlIHJlc3Qgb2YgdGhlaXIgYXJtcywgdG8gb2NjdXB5IEFyaW1pbnVtLCBhIGxhcmdlIGNpdHkgb2YgR2F1bCwgYXZvaWRpbmcgY29tbW90aW9uIGFuZCBibG9vZHNoZWQgYXMgZmFyIGFzIHBvc3NpYmxlOyBhbmQgaGUgZW50cnVzdGVkIHRoaXMgZm9yY2UgdG8gSG9ydGVuc2l1cy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGltc2VsZiBzcGVudCB0aGUgZGF5IGluIHB1YmxpYywgYXR0ZW5kaW5nIGFuZCB3YXRjaGluZyB0aGUgZXhlcmNpc2VzIG9mIGdsYWRpYXRvcnM7IGJ1dCBhIGxpdHRsZSBiZWZvcmUgZXZlbmluZyBoZSBiYXRoZWQgYW5kIGRyZXNzZWQgYW5kIHdlbnQgaW50byB0aGUgYmFucXVldGluZyBoYWxsLiBIZXJlIGhlIGhlbGQgYnJpZWYgY29udmVyc2Ugd2l0aCB0aG9zZSB3aG8gaGFkIGJlZW4gaW52aXRlZCB0byBzdXBwZXIsIGFuZCBqdXN0IGFzIGl0IHdhcyBnZXR0aW5nIGRhcmsgcm9zZSBhbmQgd2VudCBhd2F5LCBhZnRlciBhZGRyZXNzaW5nIGNvdXJ0ZW91c2x5IG1vc3Qgb2YgaGlzIGd1ZXN0cyBhbmQgYmlkZGluZyB0aGVtIGF3YWl0IGhpcyByZXR1cm4uIFRvIGEgZmV3IG9mIGhpcyBmcmllbmRzLCBob3dldmVyLCBoZSBoYWQgcHJldmlvdXNseSBnaXZlbiBkaXJlY3Rpb25zIHRvIGZvbGxvdyBoaW0sIG5vdCBhbGwgYnkgdGhlIHNhbWUgcm91dGUsIGJ1dCBzb21lIGJ5IG9uZSB3YXkgYW5kIHNvbWUgYnkgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGltc2VsZiBtb3VudGVkIG9uZSBvZiBoaXMgaGlyZWQgY2FydHMgYW5kIGRyb3ZlIGF0IGZpcnN0IGFsb25nIGFub3RoZXIgcm9hZCwgdGhlbiB0dXJuZWQgdG93YXJkcyBBcmltaW51bS4gV2hlbiBoZSBjYW1lIHRvIHRoZSByaXZlciB3aGljaCBzZXBhcmF0ZXMgQ2lzYWxwaW5lIEdhdWwgZnJvbSB0aGUgcmVzdCBvZiBJdGFseSAoaXQgaXMgY2FsbGVkIHRoZSBSdWJpY29uKSwgYW5kIGJlZ2FuIHRvIHJlZmxlY3QsIG5vdyB0aGF0IGhlIGRyZXcgbmVhcmVyIHRvIHRoZSBmZWFyZnVsIHN0ZXAgYW5kIHdhcyBhZ2l0YXRlZCBieSB0aGUgbWFnbml0dWRlIG9mIGhpcyB2ZW50dXJlcywgaGUgY2hlY2tlZCBoaXMgc3BlZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGhhbHRpbmcgaW4gaGlzIGNvdXJzZSwgaGUgY29tbXVuZWQgd2l0aCBoaW1zZWxmIGEgbG9uZyB0aW1lIGluIHNpbGVuY2UgYXMgaGlzIHJlc29sdXRpb24gd2F2ZXJlZCBiYWNrIGFuZCBmb3J0aCwgYW5kIGhpcyBwdXJwb3NlIHRoZW4gc3VmZmVyZWQgY2hhbmdlIGFmdGVyIGNoYW5nZS4gRm9yIGEgbG9uZyB0aW1lLCB0b28sIGhlIGRpc2N1c3NlZCBoaXMgcGVycGxleGl0aWVzIHdpdGggaGlzIGZyaWVuZHMgd2hvIHdlcmUgcHJlc2VudCwgYW1vbmcgd2hvbSB3YXMgQXNpbml1cyBQb2xsaW8sIGVzdGltYXRpbmcgdGhlIGdyZWF0IGV2aWxzIGZvciBhbGwgbWFua2luZCB3aGljaCB3b3VsZCBmb2xsb3cgdGhlaXIgcGFzc2FnZSBvZiB0aGUgcml2ZXIsIGFuZCB0aGUgd2lkZSBmYW1lIG9mIGl0IHdoaWNoIHRoZXkgd291bGQgbGVhdmUgdG8gcG9zdGVyaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZmluYWxseSwgd2l0aCBhIHNvcnQgb2YgcGFzc2lvbiwgYXMgaWYgYWJhbmRvbmluZyBjYWxjdWxhdGlvbiBhbmQgY2FzdGluZyBoaW1zZWxmIHVwb24gdGhlIGZ1dHVyZSwgYW5kIHV0dGVyaW5nIHRoZSBwaHJhc2Ugd2l0aCB3aGljaCBtZW4gdXN1YWxseSBwcmVsdWRlIHRoZWlyIHBsdW5nZSBpbnRvIGRlc3BlcmF0ZSBhbmQgZGFyaW5nIGZvcnR1bmVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB0aGUgZGllIGJlIGNhc3QsPC9xPiBoZSBoYXN0ZW5lZCB0byBjcm9zcyB0aGUgcml2ZXI7IGFuZCBnb2luZyBhdCBmdWxsIHNwZWVkIG5vdyBmb3IgdGhlIHJlc3Qgb2YgdGhlIHRpbWUsIGJlZm9yZSBkYXlicmVhayBoZSBkYXNoZWQgaW50byBBcmltaW51bSBhbmQgdG9vayBwb3NzZXNzaW9uIG9mIGl0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5IDwvdGl0bGU+LCBseC4gMS0yPC9iaWJsPi48L25vdGU+IEl0IGlzIHNhaWQsIG1vcmVvdmVyLCB0aGF0IG9uIHRoZSBuaWdodCBiZWZvcmUgaGUgY3Jvc3NlZCB0aGUgcml2ZXIgaGUgaGFkIGFuIHVubmF0dXJhbCBkcmVhbTsgaGUgdGhvdWdodCwgbmFtZWx5LCB0aGF0IGhlIHdhcyBoYXZpbmcgaW5jZXN0dW91cyBpbnRlcmNvdXJzZSB3aXRoIGhpcyBvd24gbW90aGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBTdWV0b25pdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gNzwvYmlibD4pLCBDYWVzYXIgaGFkIHRoaXMgZHJlYW0gd2hpbGUgaGUgd2FzIHF1YWVzdG9yIGluIFNwYWluICg2NyBCLkMuKS4gVGhlIGludGVycHJldGVycyBvZiBkcmVhbXMgdG9sZCBoaW0gdGhhdCBoaXMgPGVtcGg+bW90aGVyPC9lbXBoPiBtZWFudCB0aGUgRWFydGgsIHRoZSB1bml2ZXJzYWwgcGFyZW50LCB3aGljaCB3YXMgdG8gYmVjb21lIHN1YmplY3QgdG8gaGltLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBzZWl6dXJlIG9mIEFyaW1pbnVtLCBhcyBpZiB0aGUgd2FyIGhhZCBvcGVuZWQgd2l0aCBicm9hZCBnYXRlcyB0byBjb3ZlciB0aGUgd2hvbGUgZWFydGggYW5kIHNlYSBhbGlrZSwgYW5kIHRoZSBsYXdzIG9mIHRoZSBzdGF0ZSB3ZXJlIGNvbmZvdW5kZWQgYWxvbmcgd2l0aCB0aGUgYm91bmRhcmllcyBvZiB0aGUgcHJvdmluY2UsIG9uZSB3b3VsZCBub3QgaGF2ZSB0aG91Z2h0IHRoYXQgbWVuIGFuZCB3b21lbiwgYXMgYXQgb3RoZXIgdGltZXMsIHdlcmUgaHVycnlpbmcgdGhyb3VnaCBJdGFseSBpbiBjb25zdGVybmF0aW9uLCBidXQgdGhhdCB0aGUgdmVyeSBjaXRpZXMgaGFkIHJpc2VuIHVwIGluIGZsaWdodCBhbmQgd2VyZSBydXNoaW5nIG9uZSB0aHJvdWdoIGFub3RoZXI7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIFJvbWUgaGVyc2VsZiwgZGVsdWdlZCBhcyBpdCB3ZXJlIGJ5IHRoZSBpbmhhYml0YW50cyBvZiB0aGUgc3Vycm91bmRpbmcgdG93bnMgd2hvIHdlcmUgZmxlZWluZyBmcm9tIHRoZWlyIGhvbWVzLCBuZWl0aGVyIHJlYWRpbHkgb2JleWluZyBhIG1hZ2lzdHJhdGUgbm9yIGxpc3RlbmluZyB0byB0aGUgdm9pY2Ugb2YgcmVhc29uLCBpbiB0aGUgc3VyZ2VzIG9mIGEgbWlnaHR5IHNlYSBuYXJyb3dseSBlc2NhcGVkIGJlaW5nIG92ZXJ0dXJuZWQgYnkgaGVyIG93biBpbnRlcm5hbCBhZ2l0YXRpb25zLiBGb3IgY29uZmxpY3RpbmcgZW1vdGlvbnMgYW5kIHZpb2xlbnQgZGlzdHVyYmFuY2VzIHByZXZhaWxlZCBldmVyeXdoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSB3aG8gcmVqb2ljZWQgZGlkIG5vdCBrZWVwIHF1aWV0LCBidXQgaW4gbWFueSBwbGFjZXMsIGFzIHdhcyBuYXR1cmFsIGluIGEgZ3JlYXQgY2l0eSwgZW5jb3VudGVyZWQgdGhvc2Ugd2hvIHdlcmUgaW4gZmVhciBhbmQgZGlzdHJlc3MsIGFuZCBiZWluZyBmaWxsZWQgd2l0aCBjb25maWRlbmNlIGFzIHRvIHRoZSBmdXR1cmUgY2FtZSBpbnRvIHN0cmlmZSB3aXRoIHRoZW07IHdoaWxlIFBvbXBleSBoaW1zZWxmLCB3aG8gd2FzIHRlcnJvci1zdHJpY2tlbiwgd2FzIGFzc2FpbGVkIG9uIGV2ZXJ5IHNpZGUsIGJlaW5nIHRha2VuIHRvIHRhc2sgYnkgc29tZSBmb3IgaGF2aW5nIHN0cmVuZ3RoZW5lZCBDYWVzYXIgYWdhaW5zdCBoaW1zZWxmIGFuZCB0aGUgc3VwcmVtZSBwb3dlciBvZiB0aGUgc3RhdGUsIGFuZCBkZW5vdW5jZWQgYnkgb3RoZXJzIGZvciBoYXZpbmcgcGVybWl0dGVkIExlbnR1bHVzIHRvIGluc3VsdCBDYWVzYXIgd2hlbiBoZSB3YXMgcmVhZHkgdG8geWllbGQgYW5kIHdhcyBvZmZlcmluZyByZWFzb25hYmxlIHRlcm1zIG9mIHNldHRsZW1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZhdm9uaXVzIGJhZGUgaGltIHN0YW1wIG9uIHRoZSBncm91bmQ7IGZvciBvbmNlLCBpbiBhIGJvYXN0ZnVsIHNwZWVjaCB0byB0aGUgc2VuYXRlLCBoZSB0b2xkIHRoZW0gdG8gdGFrZSBubyB0cm91YmxlIG9yIGFueGlvdXMgdGhvdWdodCBhYm91dCBwcmVwYXJhdGlvbnMgZm9yIHRoZSB3YXIsIHNpbmNlIHdoZW4gaXQgY2FtZSBoZSBoYWQgYnV0IHRvIHN0YW1wIHVwb24gdGhlIGVhcnRoIHRvIGZpbGwgSXRhbHkgd2l0aCBhcm1pZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTcuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHZpaS4gNTwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgZXZlbiB0aGVuIFBvbXBleSdzIGZvcmNlcyB3ZXJlIG1vcmUgbnVtZXJvdXMgdGhhbiBDYWVzYXInczsgYnV0IG5vIG9uZSB3b3VsZCBzdWZmZXIgaGltIHRvIGV4ZXJjaXNlIGhpcyBvd24ganVkZ2VtZW50OyBhbmQgc28sIHVuZGVyIHRoZSBpbmZsdWVuY2Ugb2YgbWFueSBmYWxzZSBhbmQgdGVycmlmeWluZyByZXBvcnRzLCBiZWxpZXZpbmcgdGhhdCB0aGUgd2FyIHdhcyBhbHJlYWR5IGNsb3NlIGF0IGhhbmQgYW5kIHByZXZhaWxlZCBldmVyeXdoZXJlLCBoZSBnYXZlIHdheSwgd2FzIHN3ZXB0IGFsb25nIHdpdGggdGhlIHVuaXZlcnNhbCB0aWRlLCBpc3N1ZWQgYW4gZWRpY3QgZGVjbGFyaW5nIGEgc3RhdGUgb2YgYW5hcmNoeSwgYW5kIGZvcnNvb2sgdGhlIGNpdHksIGNvbW1hbmRpbmcgdGhlIHNlbmF0ZSB0byBmb2xsb3csIGFuZCBmb3JiaWRkaW5nIGFueSBvbmUgdG8gcmVtYWluIHdobyBwcmVmZXJyZWQgY291bnRyeSBhbmQgZnJlZWRvbSB0byB0eXJhbm55LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIGNvbnN1bHMgZmxlZCwgd2l0aG91dCBldmVuIG1ha2luZyB0aGUgc2FjcmlmaWNlcyB1c3VhbCBiZWZvcmUgZGVwYXJ0dXJlOyBtb3N0IG9mIHRoZSBzZW5hdG9ycyBhbHNvIGZsZWQsIGFmdGVyIHNlaXppbmcsIGluIGEgc29ydCBvZiByb2JiZXJ5LCB3aGF0ZXZlciBjYW1lIHRvIGhhbmQgb2YgdGhlaXIgb3duIHBvc3Nlc3Npb25zLCBhcyB0aG91Z2ggaXQgd2VyZSB0aGUgcHJvcGVydHkgb2Ygb3RoZXJzLiBTb21lLCB0b28sIHdobyBiZWZvcmUgdGhpcyBoYWQgdmVoZW1lbnRseSBlc3BvdXNlZCB0aGUgY2F1c2Ugb2YgQ2Flc2FyLCB3ZXJlIG5vdyBmcmlnaHRlbmVkIG91dCBvZiB0aGVpciB3aXRzLCBhbmQgd2VyZSBjYXJyaWVkIGFsb25nLCB3aGVuIHRoZXJlIHdhcyBubyBuZWVkIG9mIGl0LCBieSB0aGUgc3dlZXAgb2YgdGhlIGdyZWF0IHRpZGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IHBpdGlmdWwgd2FzIHRoZSBzaWdodCBvZiB0aGUgY2l0eSwgbm93IHRoYXQgc28gZ3JlYXQgYSB0ZW1wZXN0IHdhcyBiZWFyaW5nIGRvd24gdXBvbiBoZXIsIGNhcnJpZWQgYWxvbmcgbGlrZSBhIHNoaXAgYWJhbmRvbmVkIG9mIGhlciBoZWxtc21lbiB0byBkYXNoIGFnYWluc3Qgd2hhdGV2ZXIgbGF5IGluIGhlciBwYXRoLiBTdGlsbCwgYWx0aG91Z2ggdGhlaXIgcmVtb3ZhbCB3YXMgc28gcGl0aWZ1bCBhIHRoaW5nLCBmb3IgdGhlIHNha2Ugb2YgUG9tcGV5IG1lbiBjb25zaWRlcmVkIGV4aWxlIHRvIGJlIHRoZWlyIGNvdW50cnksIGFuZCBhYmFuZG9uZWQgUm9tZSB3aXRoIHRoZSBmZWVsaW5nIHRoYXQgaXQgd2FzIENhZXNhcidzIGNhbXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjEuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHhpLiA0PC9iaWJsPi48L25vdGU+IEZvciBldmVuIExhYmllbnVzLCBvbmUgb2YgQ2Flc2FyJ3MgZ3JlYXRlc3QgZnJpZW5kcywgd2hvIGhhZCBiZWVuIGhpcyBsZWdhdGUgYW5kIGhhZCBmb3VnaHQgbW9zdCB6ZWFsb3VzbHkgd2l0aCBoaW0gaW4gYWxsIGhpcyBHYWxsaWMgd2Fycywgbm93IHJhbiBhd2F5IGZyb20gaGltIGFuZCBjYW1lIHRvIFBvbXBleS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhZXNhciBzZW50IHRvIExhYmllbnVzIGhpcyBtb25leSBhbmQgaGlzIGJhZ2dhZ2U7IGFnYWluc3QgRG9taXRpdXMsIGhvd2V2ZXIsIHdobyB3YXMgaG9sZGluZyBDb3JmaW5pdW0gd2l0aCB0aGlydHkgY29ob3J0cyB1bmRlciBoaXMgY29tbWFuZCwgaGUgbWFyY2hlZCwgYW5kIHBpdGNoZWQgaGlzIGNhbXAgbmVhciBieS4gRG9taXRpdXMsIGRlc3BhaXJpbmcgb2YgaGlzIGVudGVycHJpc2UsIGFza2VkIGhpcyBwaHlzaWNpYW4sIHdobyB3YXMgYSBzbGF2ZSwgZm9yIGEgcG9pc29uOyBhbmQgdGFraW5nIHdoYXQgd2FzIGdpdmVuIGhpbSwgZHJhbmsgaXQsIGludGVuZGluZyB0byBkaWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBhIGxpdHRsZSwgaGVhcmluZyB0aGF0IENhZXNhciBzaG93ZWQgbW9zdCB3b25kZXJmdWwgY2xlbWVuY3kgdG93YXJkcyBoaXMgcHJpc29uZXJzLCBoZSBiZXdhaWxlZCBoaXMgZmF0ZSwgYW5kIGJsYW1lZCB0aGUgcmFzaG5lc3Mgb2YgaGlzIHB1cnBvc2UuIFRoZW4gaGlzIHBoeXNpY2lhbiBiYWRlIGhpbSBiZSBvZiBnb29kIGNoZWVyLCBzaW5jZSB3aGF0IGhlIGhhZCBkcnVuayB3YXMgYSBzbGVlcGluZy1wb3Rpb24gYW5kIG5vdCBkZWFkbHk7IHdoZXJldXBvbiBEb21pdGl1cyByb3NlIHVwIG92ZXJqb3llZCBhbmQgd2VudCB0byBDYWVzYXIsIHRoZSBwbGVkZ2Ugb2Ygd2hvc2UgcmlnaHQgaGFuZCBoZSByZWNlaXZlZCwgb25seSB0byBkZXNlcnQgaGltIGFuZCBnbyBiYWNrIHRvIFBvbXBleS4gV2hlbiB0aWRpbmdzIG9mIHRoZXNlIHRoaW5ncyBjYW1lIHRvIFJvbWUsIG1lbiB3ZXJlIG1hZGUgbW9yZSBjaGVlcmZ1bCwgYW5kIHNvbWUgb2YgdGhlIGZ1Z2l0aXZlcyB0dXJuZWQgYmFjay48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIHRvb2sgb3ZlciB0aGUgdHJvb3BzIG9mIERvbWl0aXVzLCBhcyB3ZWxsIGFzIGFsbCB0aGUgb3RoZXIgbGV2aWVzIG9mIFBvbXBleSB3aGljaCBoZSBzdXJwcmlzZWQgaW4gdGhlIHZhcmlvdXMgY2l0aWVzLiBUaGVuLCBzaW5jZSBoaXMgZm9yY2VzIHdlcmUgYWxyZWFkeSBudW1lcm91cyBhbmQgZm9ybWlkYWJsZSwgaGUgbWFyY2hlZCBhZ2FpbnN0IFBvbXBleSBoaW1zZWxmLiBQb21wZXksIGhvd2V2ZXIsIGRpZCBub3QgYXdhaXQgaGlzIGFwcHJvYWNoLCBidXQgZmxlZCB0byBCcnVuZGlzaXVtLCBzZW50IHRoZSBjb25zdWxzIGJlZm9yZSBoaW0gd2l0aCBhbiBhcm15IHRvIER5cnJoYWNoaXVtLCBhbmQgc2hvcnRseSBhZnRlcndhcmRzLCBhcyBDYWVzYXIgZHJldyBuZWFyLCBzYWlsZWQgb2ZmIGhpbXNlbGYsIGFzIHNoYWxsIGJlIHNldCBmb3J0aCBjaXJjdW1zdGFudGlhbGx5IGluIGhpcyBMaWZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjIuMSIgdmFsaWQ9InllcyI+Q2hhcHRlciBseGlpPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciB3aXNoZWQgdG8gcHVyc3VlIGhpbSBhdCBvbmNlLCBidXQgd2FzIGRlc3RpdHV0ZSBvZiBzaGlwczsgc28gaGUgdHVybmVkIGJhY2sgdG8gUm9tZSwgaGF2aW5nIGluIHNpeHR5IGRheXMgYW5kIHdpdGhvdXQgYmxvb2RzaGVkIGJlY29tZSBtYXN0ZXIgb2YgYWxsIEl0YWx5LjwvcD4KICAgICAgICAgPHA+SGUgZm91bmQgdGhlIGNpdHkgbW9yZSB0cmFucXVpbCB0aGFuIGhlIHdhcyBleHBlY3RpbmcsIGFuZCBtYW55IHNlbmF0b3JzIGluIGl0LiBXaXRoIHRoZXNlLCB0aGVyZWZvcmUsIGhlIGNvbmZlcnJlZCBpbiBhIGdlbnRsZSBhbmQgYWZmYWJsZSBtYW5uZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyIGdpdmVzIGEgc3VtbWFyeSBvZiBoaXMgc3BlZWNoIHRvIHRoZSBzZW5hdG9ycyBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjMyIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEMuPC90aXRsZT4gaS4gMzI8L2JpYmw+Ljwvbm90ZT4gaW52aXRpbmcgdGhlbSBldmVuIHRvIHNlbmQgYSBkZXB1dGF0aW9uIHRvIFBvbXBleSBwcm9wb3Npbmcgc3VpdGFibGUgdGVybXMgb2YgYWdyZWVtZW50LiBCdXQgbm8gb25lIHdvdWxkIGxpc3RlbiB0byBoaW0sIGVpdGhlciBiZWNhdXNlIHRoZXkgZmVhcmVkIFBvbXBleSwgd2hvbSB0aGV5IGhhZCBhYmFuZG9uZWQsIG9yIGJlY2F1c2UgdGhleSB0aG91Z2h0IHRoYXQgQ2Flc2FyIGRpZCBub3QgbWVhbiB3aGF0IGhlIHNhaWQsIGJ1dCB3YXMgaW5kdWxnaW5nIGluIHNwZWNpb3VzIHRhbGsuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHRyaWJ1bmUgTWV0ZWxsdXMgdHJpZWQgdG8gcHJldmVudCBDYWVzYXIncyB0YWtpbmcgbW9uZXkgZnJvbSB0aGUgcmVzZXJ2ZSBmdW5kcyBvZiB0aGUgc3RhdGUsIGFuZCBjaXRlZCBjZXJ0YWluIGxhd3MsIENhZXNhciBzYWlkIHRoYXQgYXJtcyBhbmQgbGF3cyBoYWQgbm90IHRoZSBzYW1lIHNlYXNvbi4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgaWYgdGhvdSBhcnQgZGlzcGxlYXNlZCBhdCB3aGF0IGlzIGdvaW5nIG9uLCBmb3IgdGhlIHByZXNlbnQgZ2V0IG91dCBvZiB0aGUgd2F5LCBzaW5jZSB3YXIgaGFzIG5vIHVzZSBmb3IgZnJlZSBzcGVlY2g7IHdoZW4sIGhvd2V2ZXIsIEkgaGF2ZSBjb21lIHRvIHRlcm1zIGFuZCBsYWlkIGRvd24gbXkgYXJtcywgdGhlbiB0aG91IHNoYWx0IGNvbWUgYmVmb3JlIHRoZSBwZW9wbGUgd2l0aCB0aHkgaGFyYW5ndWVzLiBBbmQgaW4gc2F5aW5nIHRoaXMgSSB3YWl2ZSBteSBvd24ganVzdCByaWdodHM7IGZvciB0aG91IGFydCBtaW5lLCB0aG91IGFuZCBhbGwgb2YgdGhlIGZhY3Rpb24gaG9zdGlsZSB0byBtZSB3aG9tIEkgaGF2ZSBjYXVnaHQ8L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBzcGVlY2ggdG8gTWV0ZWxsdXMsIENhZXNhciB3YWxrZWQgdG93YXJkcyB0aGUgZG9vciBvZiB0aGUgdHJlYXN1cnksIGFuZCB3aGVuIHRoZSBrZXlzIHdlcmUgbm90IHRvIGJlIGZvdW5kLCBoZSBzZW50IGZvciBzbWl0aHMgYW5kIG9yZGVyZWQgdGhlbSB0byBicmVhayBpbiB0aGUgZG9vci4gTWV0ZWxsdXMgb25jZSBtb3JlIG9wcG9zZWQgaGltLCBhbmQgd2FzIGNvbW1lbmRlZCBieSBzb21lIGZvciBzbyBkb2luZzsgYnV0IENhZXNhciwgcmFpc2luZyBoaXMgdm9pY2UsIHRocmVhdGVuZWQgdG8ga2lsbCBoaW0gaWYgaGUgZGlkIG5vdCBjZWFzZSBoaXMgdHJvdWJsZXNvbWUgaW50ZXJmZXJlbmNlLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB0aG91IHN1cmVseSBrbm93ZXN0LCB5b3VuZyBtYW4sPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgaXQgaXMgbW9yZSB1bnBsZWFzYW50IGZvciBtZSB0byBzYXkgdGhpcyB0aGFuIHRvIGRvIGl0PC9xPiBUaGVuIE1ldGVsbHVzLCBpbiBjb25zZXF1ZW5jZSBvZiB0aGlzIHNwZWVjaCwgd2VudCBvZmYgaW4gYSBmcmlnaHQsIGFuZCBoZW5jZWZvcnRoIGV2ZXJ5dGhpbmcgd2FzIHNwZWVkaWx5IGFuZCBlYXNpbHkgZnVybmlzaGVkIHRvIENhZXNhciBmb3IgdGhlIHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2Mi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBseGlpLiAxPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBoZSBtYWRlIGFuIGV4cGVkaXRpb24gaW50byBTcGFpbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMS4zNCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gQy48L3RpdGxlPiBpLiAzNC04NjwvYmlibD4uPC9ub3RlPiBoYXZpbmcgcmVzb2x2ZWQgZmlyc3QgdG8gZHJpdmUgb3V0IGZyb20gdGhlcmUgQWZyYW5pdXMgYW5kIFZhcnJvLCBQb21wZXkncyBsZWdhdGVzLCBhbmQgYnJpbmcgdGhlaXIgZm9yY2VzIHRoZXJlIGFuZCB0aGUgcHJvdmluY2VzIGludG8gaGlzIHBvd2VyLCBhbmQgdGhlbiB0byBtYXJjaCBhZ2FpbnN0IFBvbXBleSwgbGVhdmluZyBub3QgYW4gZW5lbXkgaW4gaGlzIHJlYXIuIEFuZCB0aG91Z2ggaGlzIGxpZmUgd2FzIG9mdGVuIGluIHBlcmlsIGZyb20gYW1idXNjYWRlcywgYW5kIGhpcyBhcm15IG1vc3Qgb2YgYWxsIGZyb20gaHVuZ2VyLCBoZSBkaWQgbm90IGNlYXNlIGZyb20gcHVyc3VpbmcsIGNoYWxsZW5naW5nLCBhbmQgYmVzaWVnaW5nIHRoZSBtZW4gdW50aWwgaGUgaGFkIG1hZGUgaGltc2VsZiBieSBtYWluIGZvcmNlIG1hc3RlciBvZiB0aGVpciBjYW1wcyBhbmQgdGhlaXIgZm9yY2VzLiBUaGUgbGVhZGVycywgaG93ZXZlciwgbWFkZSB0aGVpciBlc2NhcGUgdG8gUG9tcGV5LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIENhZXNhciBjYW1lIGJhY2sgdG8gUm9tZSwgUGlzbywgaGlzIGZhdGhlci1pbi1sYXcsIHVyZ2VkIGhpbSB0byBzZW5kIGEgZGVwdXRhdGlvbiB0byBQb21wZXkgd2l0aCBwcm9wb3NhbHMgZm9yIGEgc2V0dGxlbWVudDsgYnV0IElzYXVyaWN1cywgdG8gcGxlYXNlIENhZXNhciwgb3Bwb3NlZCB0aGUgcHJvamVjdC4gU28sIGhhdmluZyBiZWVuIG1hZGUgZGljdGF0b3IgYnkgdGhlIHNlbmF0ZSwgaGUgYnJvdWdodCBob21lIGV4aWxlcywgcmVzdG9yZWQgdG8gY2l2aWMgcmlnaHRzIHRoZSBjaGlsZHJlbiBvZiB0aG9zZSB3aG8gaGFkIHN1ZmZlcmVkIGluIHRoZSB0aW1lIG9mIFN1bGxhLCByZWxpZXZlZCB0aGUgYnVyZGVucyBvZiB0aGUgZGVidG9yLWNsYXNzIGJ5IGEgY2VydGFpbiBhZGp1c3RtZW50IG9mIGludGVyZXN0LCB0b29rIGluIGhhbmQgYSBmZXcgb3RoZXIgcHVibGljIG1lYXN1cmVzIG9mIGxpa2UgY2hhcmFjdGVyLCBhbmQgd2l0aGluIGVsZXZlbiBkYXlzIGFiZGljYXRlZCB0aGUgc29sZSBwb3dlciwgaGFkIGhpbXNlbGYgZGVjbGFyZWQgY29uc3VsIHdpdGggU2VydmlsaXVzIElzYXVyaWN1cywgYW5kIGVudGVyZWQgdXBvbiBoaXMgY2FtcGFpZ24uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIGhpcyBmb3JjZXMgaGUgcGFzc2VkIGJ5IGluIGEgZm9yY2VkIG1hcmNoLCBhbmQgd2l0aCBzaXggaHVuZHJlZCBwaWNrZWQgaG9yc2VtZW4gYW5kIGZpdmUgbGVnaW9ucywgYXQgdGhlIHRpbWUgb2YgdGhlIHdpbnRlciBzb2xzdGljZSwgaW4gdGhlIGVhcmx5IHBhcnQgb2YgSmFudWFyeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjQ4IEIuQy4gVGhlIFJvbWFuIGNhbGVuZGFyLCBhdCB0aGlzIHRpbWUsIHdhcyBtdWNoIGluIGFkdmFuY2Ugb2YgdGhlIHNvbGFyIHNlYXNvbnMuPC9ub3RlPiAodGhpcyBtb250aCBhbnN3ZXJzIG5lYXJseSB0byB0aGUgQXRoZW5pYW4gUG9zZWlkZW9uKSwgcHV0IHRvIHNlYSwgYW5kIGFmdGVyIGNyb3NzaW5nIHRoZSBJb25pYW4gZ3VsZiB0b29rIE9yaWN1bSBhbmQgQXBvbGxvbmlhLCBhbmQgc2VudCBoaXMgdHJhbnNwb3J0cyBiYWNrIGFnYWluIHRvIEJydW5kaXNpdW0gZm9yIHRoZSBzb2xkaWVycyB3aG8gaGFkIGJlZW4gYmVsYXRlZCBvbiB0aGVpciBtYXJjaC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UsIGFzIGxvbmcgYXMgdGhleSB3ZXJlIG9uIHRoZSByb2FkLCBzaW5jZSB0aGV5IHdlcmUgbm93IHBhc3QgdGhlaXIgcGh5c2ljYWwgcHJpbWUgYW5kIHdvcm4gb3V0IHdpdGggdGhlaXIgbXVsdGl0dWRpbm91cyB3YXJzLCBtdXJtdXJlZCBhZ2FpbnN0IENhZXNhci4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGl0aGVyLCBwcmF5LCBhbmQgdG8gd2hhdCBlbmQgd2lsbCB0aGlzIG1hbiBicmluZyB1cywgaHVycnlpbmcgdXMgYWJvdXQgYW5kIHRyZWF0aW5nIHVzIGxpa2UgdGlyZWxlc3MgYW5kIGxpZmVsZXNzIHRoaW5ncz8gRXZlbiBhIHN3b3JkIGdldHMgdGlyZWQgb3V0IHdpdGggc21pdGluZywgYW5kIHNoaWVsZCBhbmQgYnJlYXN0cGxhdGUgYXJlIHNwYXJlZCBhIGxpdHRsZSBhZnRlciBzbyBsb25nIGEgdGltZSBvZiBzZXJ2aWNlLiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2lsbCBub3QgZXZlbiBvdXIgd291bmRzLCB0aGVuLCBjb252aW5jZSBDYWVzYXIgdGhhdCBoZSBjb21tYW5kcyBtb3J0YWwgbWVuLCBhbmQgdGhhdCB3ZSBhcmUgbW9ydGFsIGluIHRoZSBlbmR1cmFuY2Ugb2YgcGFpbiBhbmQgc3VmZmVyaW5nPyBTdXJlbHkgdGhlIHdpbnRyeSBzZWFzb24gYW5kIHRoZSBvY2Nhc2lvbiBvZiBhIHN0b3JtIGF0IHNlYSBub3QgZXZlbiBhIGdvZCBjYW4gY29uc3RyYWluOyB5ZXQgdGhpcyBtYW4gdGFrZXMgcmlza3MgYXMgdGhvdWdoIGhlIHdlcmUgbm90IHB1cnN1aW5nLCBidXQgZmx5aW5nIGZyb20sIGVuZW1pZXM8L3E+IFdpdGggc3VjaCB3b3JkcyBhcyB0aGVzZSB0aGV5IG1hcmNoZWQgaW4gYSBsZWlzdXJlbHkgd2F5IHRvIEJydW5kaXNpdW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgZ290IHRoZXJlIGFuZCBmb3VuZCB0aGF0IENhZXNhciBoYWQgcHV0IHRvIHNlYSwgdGhleSBxdWlja2x5IGNoYW5nZWQgdGhlaXIgdG9uZSBhbmQgcmV2aWxlZCB0aGVtc2VsdmVzIGFzIHRyYWl0b3JzIHRvIHRoZSBJbXBlcmF0b3I7IHRoZXkgcmV2aWxlZCB0aGVpciBvZmZpY2VycywgdG9vLCBmb3Igbm90IGhhdmluZyBxdWlja2VuZWQgdGhlaXIgbWFyY2guIFRoZW4sIHNpdHRpbmcgb24gdGhlIGNsaWZmcywgdGhleSBsb29rZWQgb2ZmIHRvd2FyZHMgdGhlIG9wZW4gc2VhIGFuZCBFcGlydXMsIHdhdGNoaW5nIGZvciB0aGUgc2hpcHMgd2hpY2ggd2VyZSB0byBjYXJyeSB0aGVtIGFjcm9zcyB0byB0aGVpciBjb21tYW5kZXIuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IEFwb2xsb25pYSwgc2luY2UgdGhlIGZvcmNlIHdoaWNoIGhlIGhhZCB3aXRoIGhpbSB3YXMgbm90IGEgbWF0Y2ggZm9yIHRoZSBlbmVteSBhbmQgdGhlIGRlbGF5IG9mIGhpcyB0cm9vcHMgb24gdGhlIG90aGVyIHNpZGUgY2F1c2VkIGhpbSBwZXJwbGV4aXR5IGFuZCBkaXN0cmVzcywgQ2Flc2FyIGNvbmNlaXZlZCB0aGUgZGFuZ2Vyb3VzIHBsYW4gb2YgZW1iYXJraW5nIGluIGEgdHdlbHZlLW9hcmVkIGJvYXQsIHdpdGhvdXQgYW55IG9uZSdzIGtub3dsZWRnZSwgYW5kIGdvaW5nIG92ZXIgdG8gQnJ1bmRpc2l1bSwgdGhvdWdoIHRoZSBzZWEgd2FzIGVuY29tcGFzc2VkIGJ5IHN1Y2ggbGFyZ2UgYXJtYW1lbnRzIG9mIHRoZSBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgbmlnaHQsIGFjY29yZGluZ2x5LCBhZnRlciBkaXNndWlzaW5nIGhpbXNlbGYgaW4gdGhlIGRyZXNzIG9mIGEgc2xhdmUsIGhlIHdlbnQgb24gYm9hcmQsIHRocmV3IGhpbXNlbGYgZG93biBhcyBvbmUgb2Ygbm8gYWNjb3VudCwgYW5kIGtlcHQgcXVpZXQuIFdoaWxlIHRoZSByaXZlciBBb8O8cyB3YXMgY2FycnlpbmcgdGhlIGJvYXQgZG93biB0b3dhcmRzIHRoZSBzZWEsIHRoZSBlYXJseSBtb3JuaW5nIGJyZWV6ZSwgd2hpY2ggYXQgdGhhdCB0aW1lIHVzdWFsbHkgbWFkZSB0aGUgbW91dGggb2YgdGhlIHJpdmVyIGNhbG0gYnkgZHJpdmluZyBiYWNrIHRoZSB3YXZlcywgd2FzIHF1ZWxsZWQgYnkgYSBzdHJvbmcgd2luZCB3aGljaCBibGV3IGZyb20gdGhlIHNlYSBkdXJpbmcgdGhlIG5pZ2h0OyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz50aGUgcml2ZXIgdGhlcmVmb3JlIGNoYWZlZCBhZ2FpbnN0IHRoZSBpbmZsb3cgb2YgdGhlIHNlYSBhbmQgdGhlIG9wcG9zaXRpb24gb2YgaXRzIGJpbGxvd3MsIGFuZCB3YXMgcm91Z2gsIGJlaW5nIGJlYXRlbiBiYWNrIHdpdGggYSBncmVhdCBkaW4gYW5kIHZpb2xlbnQgZWRkaWVzLCBzbyB0aGF0IGl0IHdhcyBpbXBvc3NpYmxlIGZvciB0aGUgbWFzdGVyIG9mIHRoZSBib2F0IHRvIGZvcmNlIGhpcyB3YXkgYWxvbmcuIEhlIHRoZXJlZm9yZSBvcmRlcmVkIHRoZSBzYWlsb3JzIHRvIGNvbWUgYWJvdXQgaW4gb3JkZXIgdG8gcmV0cmFjZSBoaXMgY291cnNlLiBCdXQgQ2Flc2FyLCBwZXJjZWl2aW5nIHRoaXMsIGRpc2Nsb3NlZCBoaW1zZWxmLCB0b29rIHRoZSBtYXN0ZXIgb2YgdGhlIGJvYXQgYnkgdGhlIGhhbmQsIHdobyB3YXMgdGVycmlmaWVkIGF0IHNpZ2h0IG9mIGhpbSwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q29tZSwgZ29vZCBtYW4sIGJlIGJvbGQgYW5kIGZlYXIgbmF1Z2h0OyB0aG91IGNhcnJ5ZXN0IENhZXNhciBhbmQgQ2Flc2FyJ3MgZm9ydHVuZSBpbiB0aHkgYm9hdDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDQxLjQ2LjMiPkRpb24gQ2Fzc2l1cywgeGxpLiA0NiwgMzwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc2FpbG9ycyBmb3Jnb3QgdGhlIHN0b3JtLCBhbmQgbGF5aW5nIHRvIHRoZWlyIG9hcnMsIHRyaWVkIHdpdGggYWxsIGFsYWNyaXR5IHRvIGZvcmNlIHRoZWlyIHdheSBkb3duIHRoZSByaXZlci4gQnV0IHNpbmNlIGl0IHdhcyBpbXBvc3NpYmxlLCBhZnRlciB0YWtpbmcgbXVjaCB3YXRlciBhbmQgcnVubmluZyBncmVhdCBoYXphcmQgYXQgdGhlIG1vdXRoIG9mIHRoZSByaXZlciwgQ2Flc2FyIHZlcnkgcmVsdWN0YW50bHkgc3VmZmVyZWQgdGhlIGNhcHRhaW4gdG8gcHV0IGFib3V0LiBXaGVuIGhlIGNhbWUgYmFjaywgaGlzIHNvbGRpZXJzIG1ldCBoaW0gaW4gdGhyb25ncywgZmluZGluZyBtdWNoIGZhdWx0IGFuZCBzb3JlIGRpc3BsZWFzZWQgd2l0aCBoaW0gYmVjYXVzZSBoZSBkaWQgbm90IGJlbGlldmUgdGhhdCBldmVuIHdpdGggdGhlbSBhbG9uZSBoZSB3YXMgYWJsZSB0byBjb25xdWVyLCBidXQgd2FzIHRyb3VibGVkLCBhbmQgcmlza2VkIGhpcyBsaWZlIGZvciB0aGUgc2FrZSBvZiB0aGUgYWJzZW50IGFzIHRob3VnaCBkaXN0cnVzdGluZyB0aG9zZSB3aG8gd2VyZSBwcmVzZW50LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBBbnRvbnkgcHV0IGluIGZyb20gQnJ1bmRpc2l1bSB3aXRoIGhpcyBmb3JjZXMsIGFuZCBDYWVzYXIgd2FzIGVtYm9sZGVuZWQgdG8gY2hhbGxlbmdlIFBvbXBleSB0byBiYXR0bGUuIFBvbXBleSB3YXMgd2VsbCBwb3N0ZWQgYW5kIGRyZXcgYW1wbGUgc3VwcGxpZXMgYm90aCBmcm9tIGxhbmQgYW5kIHNlYTsgd2hpbGUgQ2Flc2FyIGhhZCBubyBncmVhdCBhYnVuZGFuY2UgYXQgZmlyc3QsIGFuZCBhZnRlcndhcmRzIHdhcyBhY3R1YWxseSBoYXJkIHByZXNzZWQgZm9yIHdhbnQgb2YgcHJvdmlzaW9ucy4gQnV0IGhpcyBzb2xkaWVycyBkdWcgdXAgYSBjZXJ0YWluIHJvb3QsIG1peGVkIGl0IHdpdGggbWlsaywgYW5kIGF0ZSBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy40OCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gQy48L3RpdGxlPiBpaWkuIDQ4PC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uY2UsIHRvbywgdGhleSBtYWRlIGxvYXZlcyBvZiBpdCwgYW5kIHJ1bm5pbmcgdXAgdG8gdGhlIGVuZW15J3Mgb3V0cG9zdHMsIHRocmV3IHRoZSBsb2F2ZXMgaW5zaWRlIG9yIHRvc3NlZCB0aGVtIHRvIG9uZSBhbm90aGVyLCBhZGRpbmcgYnkgd2F5IG9mIGNvbW1lbnQgdGhhdCBhcyBsb25nIGFzIHRoZSBlYXJ0aCBwcm9kdWNlZCBzdWNoIHJvb3RzLCB0aGV5IHdvdWxkIG5vdCBzdG9wIGJlc2llZ2luZyBQb21wZXkuIFBvbXBleSwgaG93ZXZlciwgd291bGQgbm90IGFsbG93IGVpdGhlciB0aGUgbG9hdmVzIG9yIHRoZXNlIHdvcmRzIHRvIHJlYWNoIHRoZSBtYWluIGJvZHkgb2YgaGlzIGFybXkuIEZvciBoaXMgc29sZGllcnMgd2VyZSBkZWplY3RlZCwgZmVhcmluZyB0aGUgZmVyb2NpdHkgYW5kIGhhcmRpbmVzcyBvZiB0aGVpciBlbmVtaWVzLCB3aG8gd2VyZSBsaWtlIHdpbGQgYmVhc3RzIGluIHRoZWlyIGV5ZXMuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgY29uc3RhbnQgc2tpcm1pc2hpbmdzIGFib3V0IHRoZSBmb3J0aWZpY2F0aW9ucyBvZiBQb21wZXksIGFuZCBpbiBhbGwgb2YgdGhlbSBDYWVzYXIgZ290IHRoZSBiZXR0ZXIgZXhjZXB0IG9uZSwgd2hlcmUgdGhlcmUgd2FzIGEgZ3JlYXQgcm91dCBvZiBoaXMgbWVuIGFuZCBoZSB3YXMgaW4gZGFuZ2VyIG9mIGxvc2luZyBoaXMgY2FtcC4gRm9yIHdoZW4gUG9tcGV5IGF0dGFja2VkIG5vdCBvbmUgb2YgQ2Flc2FyJ3MgbWVuIHN0b29kIGhpcyBncm91bmQsIGJ1dCB0aGUgbW9hdHMgd2VyZSBmaWxsZWQgd2l0aCB0aGUgc2xhaW4sIGFuZCBvdGhlcnMgd2VyZSBmYWxsaW5nIGF0IHRoZWlyIG93biByYW1wYXJ0cyBhbmQgd2FsbHMsIHdoaXRoZXIgdGhleSBoYWQgYmVlbiBkcml2ZW4gaW4gaGVhZGxvbmcgZmxpZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhvdWdoIENhZXNhciBtZXQgdGhlIGZ1Z2l0aXZlcyBhbmQgdHJpZWQgdG8gdHVybiB0aGVtIGJhY2ssIGhlIGF2YWlsZWQgbm90aGluZywgbmF5LCB3aGVuIGhlIHRyaWVkIHRvIGxheSBob2xkIG9mIHRoZSBzdGFuZGFyZHMgdGhlIGJlYXJlcnMgdGhyZXcgdGhlbSBhd2F5LCBzbyB0aGF0IHRoZSBlbmVteSBjYXB0dXJlZCB0aGlydHktdHdvIG9mIHRoZW0uIENhZXNhciBoaW1zZWxmIHRvbywgbmFycm93bHkgZXNjYXBlZCBiZWluZyBraWxsZWQuIEZvciBhcyBhIHRhbGwgYW5kIHN0dXJkeSBtYW4gd2FzIHJ1bm5pbmcgYXdheSBwYXN0IGhpbSwgaGUgbGFpZCBoaXMgaGFuZCB1cG9uIGhpbSBhbmQgYmFkZSBoaW0gc3RheSBhbmQgZmFjZSBhYm91dCB1cG9uIHRoZSBlbmVteTsgYW5kIHRoZSBmZWxsb3csIGZ1bGwgb2YgcGFuaWMgYXQgdGhlIHRocmVhdGVuaW5nIGRhbmdlciwgcmFpc2VkIGhpcyBzd29yZCB0byBzbWl0ZSBDYWVzYXIsIGJ1dCBiZWZvcmUgaGUgY291bGQgZG8gc28gQ2Flc2FyJ3Mgc2hpZWxkLWJlYXJlciBsb3BwZWQgb2ZmIGhpcyBhcm0gYXQgdGhlIHNob3VsZGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBjb21wbGV0ZWx5IGhhZCBDYWVzYXIgZ2l2ZW4gdXAgaGlzIGNhdXNlIGZvciBsb3N0IHRoYXQsIHdoZW4gUG9tcGV5LCBlaXRoZXIgZnJvbSBleGNlc3NpdmUgY2F1dGlvbiBvciBieSBzb21lIGNoYW5jZSwgZGlkIG5vdCBmb2xsb3cgdXAgaGlzIGdyZWF0IHN1Y2Nlc3MsIGJ1dCB3aXRoZHJldyBhZnRlciBoZSBoYWQgc2h1dCB1cCB0aGUgZnVnaXRpdmVzIHdpdGhpbiB0aGVpciBlbnRyZW5jaG1lbnRzLCBDYWVzYXIgc2FpZCB0byBoaXMgZnJpZW5kcyBhcyBoZSBsZWZ0IHRoZW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VG8tZGF5IHZpY3RvcnkgaGFkIGJlZW4gd2l0aCB0aGUgZW5lbXksIGlmIHRoZXkgaGFkIGhhZCBhIHZpY3RvciBpbiBjb21tYW5kPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2NS41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBseHYuIDU8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBnb2luZyBieSBoaW1zZWxmIHRvIGhpcyB0ZW50IGFuZCBseWluZyBkb3duLCBoZSBzcGVudCB0aGF0IG1vc3QgZGlzdHJlc3NmdWwgb2YgYWxsIG5pZ2h0cyBpbiB2YWluIHJlZmxlY3Rpb25zLCBjb252aW5jZWQgdGhhdCBoZSBoYWQgc2hvd24gYmFkIGdlbmVyYWxzaGlwLiBGb3Igd2hpbGUgYSBmZXJ0aWxlIGNvdW50cnkgbGF5IHdhaXRpbmcgZm9yIGhpbSwgYW5kIHRoZSBwcm9zcGVyb3VzIGNpdGllcyBvZiBNYWNlZG9uaWEgYW5kIFRoZXNzYWx5LCBoZSBoYWQgbmVnbGVjdGVkIHRvIGNhcnJ5IHRoZSB3YXIgdGhpdGhlciwgYW5kIGhhZCBwb3N0ZWQgaGltc2VsZiBoZXJlIGJ5IHRoZSBzZWEsIHdoaWNoIGhpcyBlbmVtaWVzIGNvbnRyb2xsZWQgd2l0aCB0aGVpciBmbGVldHMsIGJlaW5nIHRodXMgaGVsZCBpbiBzaWVnZSBieSBsYWNrIG9mIHByb3Zpc2lvbnMgcmF0aGVyIHRoYW4gYmVzaWVnaW5nIHdpdGggaGlzIGFybXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaGlzIGRlc3BvbmRlbnQgdGhvdWdodHMgb2YgdGhlIGRpZmZpY3VsdHkgYW5kIHBlcnBsZXhpdHkgb2YgaGlzIHNpdHVhdGlvbiBrZXB0IGhpbSB0b3NzaW5nIHVwb24gaGlzIGNvdWNoLCBhbmQgaW4gdGhlIG1vcm5pbmcgaGUgYnJva2UgY2FtcCwgcmVzb2x2ZWQgdG8gbGVhZCBoaXMgYXJteSBpbnRvIE1hY2Vkb25pYSBhZ2FpbnN0IFNjaXBpbzsgZm9yIGhlIHdvdWxkIHRoZW4gZWl0aGVyIGRyYXcgUG9tcGV5IGFmdGVyIGhpbSB0byBhIHBsYWNlIHdoZXJlIGhlIHdvdWxkIGdpdmUgYmF0dGxlIHdpdGhvdXQgZHJhd2luZyBoaXMgc3VwcGxpZXMgYXMgaGUgbm93IGRpZCBmcm9tIHRoZSBzZWEsIG9yIFNjaXBpbyB3b3VsZCBiZSBsZWZ0IGFsb25lIGFuZCBoZSB3b3VsZCBvdmVyd2hlbG0gaGltLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGVtYm9sZGVuZWQgdGhlIHNvbGRpZXJzIG9mIFBvbXBleSBhbmQgdGhlIGxlYWRlcnMgYnkgd2hvbSBoZSB3YXMgc3Vycm91bmRlZCB0byBrZWVwIGNsb3NlIHRvIENhZXNhciwgd2hvbSB0aGV5IHRob3VnaHQgZGVmZWF0ZWQgYW5kIGluIGZsaWdodC4gRm9yIFBvbXBleSBoaW1zZWxmIHdhcyBjYXV0aW91cyBhYm91dCBoYXphcmRpbmcgYSBiYXR0bGUgZm9yIHNvIGdyZWF0IGEgc3Rha2UsIGFuZCBzaW5jZSBoZSB3YXMgbW9zdCBleGNlbGxlbnRseSBwcm92aWRlZCB3aXRoIGV2ZXJ5dGhpbmcgbmVjZXNzYXJ5IGZvciBhIGxvbmcgd2FyLCBoZSB0aG91Z2h0IGl0IGJlc3QgdG8gd2VhciBvdXQgYW5kIHF1ZW5jaCB0aGUgdmlnb3VyIG9mIHRoZSBlbmVteSwgd2hpY2ggbXVzdCBiZSBzaG9ydC1saXZlZC4gRm9yIHRoZSBiZXN0IGZpZ2h0aW5nIG1lbiBpbiBDYWVzYXIncyBhcm15IGhhZCBleHBlcmllbmNlLCBpdCBpcyB0cnVlLCBhbmQgYSBkYXJpbmcgd2hpY2ggd2FzIGlycmVzaXN0aWJsZSBpbiBjb21iYXQ7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGF0IHdpdGggdGhlaXIgbG9uZyBtYXJjaGVzIGFuZCBmcmVxdWVudCBlbmNhbXBtZW50cyBhbmQgc2llZ2Utd2FyZmFyZSBhbmQgbmlnaHQtd2F0Y2hlcywgdGhleSB3ZXJlIGJlZ2lubmluZyB0byBnaXZlIG91dCBieSByZWFzb24gb2YgYWdlLCBhbmQgd2VyZSB0b28gdW53aWVsZHkgZm9yIGxhYm91ciwgaGF2aW5nIGxvc3QgdGhlaXIgYXJkb3VyIGZyb20gd2Vha25lc3MuIEF0IHRoYXQgdGltZSwgdG9vLCBhIGtpbmQgb2YgcGVzdGlsZW50aWFsIGRpc2Vhc2UsIG9jY2FzaW9uZWQgYnkgdGhlIHN0cmFuZ2VuZXNzIG9mIHRoZWlyIGRpZXQsIHdhcyBzYWlkIHRvIGJlIHByZXZhbGVudCBpbiBDYWVzYXIncyBhcm15LiBBbmQgd2hhdCB3YXMgbW9zdCBpbXBvcnRhbnQgb2YgYWxsLCBzaW5jZSBDYWVzYXIgd2FzIG5laXRoZXIgc3Ryb25nIGluIGZ1bmRzIG5vciB3ZWxsIHN1cHBsaWVkIHdpdGggcHJvdmlzaW9ucywgaXQgd2FzIHRob3VnaHQgdGhhdCB3aXRoaW4gYSBzaG9ydCB0aW1lIGhpcyBhcm15IHdvdWxkIGJyZWFrIHVwIG9mIGl0c2VsZi48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXNlIHJlYXNvbnMgUG9tcGV5IGRpZCBub3Qgd2lzaCB0byBmaWdodCwgYnV0IENhdG8gd2FzIHRoZSBvbmx5IG9uZSB0byBjb21tZW5kIGhpcyBjb3Vyc2UsIGFuZCB0aGlzIGZyb20gYSBkZXNpcmUgdG8gc3BhcmUgdGhlIGxpdmVzIG9mIGhpcyBmZWxsb3cgY2l0aXplbnM7IGZvciB3aGVuIGhlIHNhdyBldmVuIHRob3NlIG9mIHRoZSBlbmVteSB3aG8gaGFkIGZhbGxlbiBpbiB0aGUgYmF0dGxlLCB0byB0aGUgbnVtYmVyIG9mIGEgdGhvdXNhbmQsIGhlIGJ1cnN0IGludG8gdGVhcnMsIG11ZmZsZWQgdXAgaGlzIGhlYWQsIGFuZCB3ZW50IGF3YXkuIEFsbCB0aGUgcmVzdCwgaG93ZXZlciwgcmV2aWxlZCBQb21wZXkgZm9yIHRyeWluZyB0byBhdm9pZCBhIGJhdHRsZSwgYW5kIHNvdWdodCB0byBnb2FkIGhpbSBvbiBieSBjYWxsaW5nIGhpbSBBZ2FtZW1ub24gYW5kIEtpbmcgb2YgS2luZ3MsIGltcGx5aW5nIHRoYXQgaGUgZGlkIG5vdCB3aXNoIHRvIGxheSBhc2lkZSBoaXMgc29sZSBhdXRob3JpdHksIGJ1dCBwbHVtZWQgaGltc2VsZiBvbiBoYXZpbmcgc28gbWFueSBjb21tYW5kZXJzIGRlcGVuZGVudCB1cG9uIGhpbSBhbmQgY29taW5nIGNvbnN0YW50bHkgdG8gaGlzIHRlbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBGYXZvbml1cywgYWZmZWN0aW5nIENhdG8ncyBib2xkbmVzcyBvZiBzcGVlY2gsIGNvbXBsYWluZWQgbGlrZSBhIG1hZCBtYW4gYmVjYXVzZSB0aGF0IHllYXIgYWxzbyB0aGV5IHdvdWxkIGJlIHVuYWJsZSB0byBlbmpveSB0aGUgZmlncyBvZiBUdXNjdWx1bSBiZWNhdXNlIG9mIFBvbXBleSdzIGxvdmUgb2YgY29tbWFuZC4gQWZyYW5pdXMsIHRvbywgd2hvIGhhZCBsYXRlbHkgY29tZSBmcm9tIFNwYWluLCB3aGVyZSBoZSBoYWQgc2hvd24gYmFkIGdlbmVyYWxzaGlwLCB3aGVuIGFjY3VzZWQgb2YgYmV0cmF5aW5nIGhpcyBhcm15IGZvciBhIGJyaWJlLCBhc2tlZCB3aHkgdGhleSBkaWQgbm90IGZpZ2h0IHdpdGggdGhlIG1lcmNoYW50IHdobyBoYWQgYm91Z2h0IHRoZSBwcm92aW5jZXMgZnJvbSBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjcuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHh2aWkuIDM8L2JpYmw+Ljwvbm90ZT4gRHJpdmVuIG9uIGJ5IGFsbCB0aGVzZSBpbXBvcnR1bml0aWVzLCBQb21wZXkgcmVsdWN0YW50bHkgc291Z2h0IGEgYmF0dGxlIGFuZCBwdXJzdWVkIENhZXNhci48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIGFjY29tcGxpc2hlZCBtb3N0IG9mIGhpcyBtYXJjaCB3aXRoIGRpZmZpY3VsdHksIHNpbmNlIG5vIG9uZSB3b3VsZCBzZWxsIGhpbSBwcm92aXNpb25zLCBhbmQgZXZlcnlib2R5IGRlc3Bpc2VkIGhpbSBvbiBhY2NvdW50IG9mIGhpcyByZWNlbnQgZGVmZWF0OyBidXQgYWZ0ZXIgaGUgaGFkIHRha2VuIEdvbXBoaSwgYSBjaXR5IG9mIFRoZXNzYWx5LCBoZSBub3Qgb25seSBwcm92aWRlZCBmb29kIGZvciBoaXMgc29sZGllcnMsIGJ1dCBhbHNvIHJlbGlldmVkIHRoZW0gb2YgdGhlaXIgZGlzZWFzZSB1bmV4cGVjdGVkbHkuIEZvciB0aGV5IGZlbGwgaW4gd2l0aCBwbGVudHkgb2Ygd2luZSwgYW5kIGFmdGVyIGRyaW5raW5nIGZyZWVseSBvZiBpdCwgYW5kIHRoZW4gcmV2ZWxsaW5nIGFuZCByaW90aW5nIG9uIHRoZWlyIG1hcmNoLCBieSBtZWFucyBvZiB0aGVpciBkcnVua2VubmVzcyB0aGV5IGRyb3ZlIGF3YXkgYW5kIGdvdCByaWQgb2YgdGhlaXIgdHJvdWJsZSwgc2luY2UgdGhleSBicm91Z2h0IHRoZWlyIGJvZGllcyBpbnRvIGEgZGlmZmVyZW50IGhhYml0LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBib3RoIGFybWllcyBlbnRlcmVkIHRoZSBwbGFpbiBvZiBQaGFyc2FsdXMgYW5kIGVuY2FtcGVkIHRoZXJlLCBQb21wZXkncyBtaW5kIHJldmVydGVkIGFnYWluIHRvIGl0cyBmb3JtZXIgcmVhc29uaW5nLCBhbmQgYmVzaWRlcywgdGhlcmUgYmVmZWxsIGhpbSB1bmx1Y2t5IGFwcGVhcmFuY2VzIGFuZCBhIHZpc2lvbiBpbiBoaXMgc2xlZXAuIEhlIGRyZWFtZWQsIG5hbWVseSwgdGhhdCBoZSBzYXcgaGltc2VsZiBpbiBoaXMgdGhlYXRyZSBhcHBsYXVkZWQgYnkgdGhlIFJvbWFucywgLiAuIC4gVGhvc2UgYWJvdXQgaGltLCBob3dldmVyLCB3ZXJlIHNvIGNvbmZpZGVudCwgYW5kIHNvIGhvcGVmdWxseSBhbnRpY2lwYXRlZCB0aGUgdmljdG9yeSwgdGhhdCBEb21pdGl1cyBhbmQgU3BpbnRoZXIgYW5kIFNjaXBpbyBkaXNwdXRlZCBlYXJuZXN0bHkgd2l0aCBvbmUgYW5vdGhlciBvdmVyIENhZXNhcidzIG9mZmljZSBvZiA8Zm9yZWlnbiBsYW5nPSJsYSI+UG9udGlmZXggTWF4aW11czwvZm9yZWlnbj4sIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYW55IHNlbnQgYWdlbnRzIHRvIFJvbWUgdG8gaGlyZSBhbmQgdGFrZSBwb3NzZXNzaW9uIG9mIGhvdXNlcyBzdWl0YWJsZSBmb3IgcHJhZXRvcnMgYW5kIGNvbnN1bHMsIGFzc3VtaW5nIHRoYXQgdGhleSB3b3VsZCBpbW1lZGlhdGVseSBob2xkIHRoZXNlIG9mZmljZXMgYWZ0ZXIgdGhlIHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy44MiIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gQy48L3RpdGxlPiBpaWkuIDgyPC9iaWJsPiBmLjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY3LjUiIHZhbGlkPSJ5ZXMiPlBsdXRhcmNoLCA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4dmlpLiA1PC9iaWJsPi48L25vdGU+IEFuZCBtb3N0IG9mIGFsbCB3ZXJlIGhpcyBjYXZhbHJ5IGltcGF0aWVudCBmb3IgdGhlIGJhdHRsZSwgc2luY2UgdGhleSBoYWQgYSBzcGxlbmRpZCBhcnJheSBvZiBzaGluaW5nIGFybW91ciwgd2VsbC1mZWQgaG9yc2VzLCBhbmQgaGFuZHNvbWUgcGVyc29ucywgYW5kIHdlcmUgaW4gaGlnaCBzcGlyaXRzIHRvbyBvbiBhY2NvdW50IG9mIHRoZWlyIG51bWJlcnMsIHdoaWNoIHdlcmUgc2V2ZW4gdGhvdXNhbmQgdG8gQ2Flc2FyJ3Mgb25lIHRob3VzYW5kLiBUaGUgbnVtYmVycyBvZiB0aGUgaW5mYW50cnkgYWxzbyB3ZXJlIHVuZXF1YWwsIHNpbmNlIGZvcnR5LWZpdmUgdGhvdXNhbmQgd2VyZSBhcnJheWVkIGFnYWluc3QgdHdlbnR5LXR3byB0aG91c2FuZC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIGNhbGxlZCBoaXMgc29sZGllcnMgdG9nZXRoZXIsIGFuZCBhZnRlciB0ZWxsaW5nIHRoZW0gdGhhdCBDb3JmaW5pdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBlcnJvciBmb3IgQ29ybmlmaWNpdXMuPC9ub3RlPiB3YXMgbmVhciB3aXRoIHR3byBsZWdpb25zIGZvciBoaW0sIGFuZCB0aGF0IGZpZnRlZW4gY29ob3J0cyBiZXNpZGVzIHVuZGVyIENhbGVudXMgd2VyZSBzdGF0aW9uZWQgYXQgQXRoZW5zIGFuZCBNZWdhcmEsIGFza2VkIHRoZW0gd2hldGhlciB0aGV5IHdpc2hlZCB0byB3YWl0IGZvciB0aGVzZSB0cm9vcHMsIG9yIHRvIGhhemFyZCB0aGUgaXNzdWUgYnkgdGhlbXNlbHZlcy4gVGhlbiB0aGUgc29sZGllcnMgYmVzb3VnaHQgaGltIHdpdGggbG91ZCBjcmllcyBub3QgdG8gd2FpdCBmb3IgdGhlIHRyb29wcywgYnV0IHJhdGhlciB0byBjb250cml2ZSBhbmQgbWFub2V1dnJlIHRvIGNvbWUgdG8gY2xvc2UgcXVhcnRlcnMgd2l0aCB0aGUgZW5lbXkgYXMgc29vbiBhcyBwb3NzaWJsZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgd2FzIGhvbGRpbmcgYSBsdXN0cmF0aW9uIGFuZCByZXZpZXcgb2YgaGlzIGZvcmNlcyBhbmQgaGFkIHNhY3JpZmljZWQgdGhlIGZpcnN0IHZpY3RpbSwgdGhlIHNlZXIgYXQgb25jZSB0b2xkIGhpbSB0aGF0IHdpdGhpbiB0aHJlZSBkYXlzIHRoZXJlIHdvdWxkIGJlIGEgZGVjaXNpdmUgYmF0dGxlIHdpdGggdGhlIGVuZW15LiBBbmQgd2hlbiBDYWVzYXIgYXNrZWQgaGltIHdoZXRoZXIgaGUgYWxzbyBzYXcgaW4gdGhlIHZpY3RpbXMgYW55IGZhdm91cmFibGUgc2lnbnMgb2YgdGhlIGlzc3VlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgdGh5c2VsZiw8L3E+IHNhaWQgdGhlIHNlZXIsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y2Fuc3QgYmV0dGVyIGFuc3dlciB0aGlzIHF1ZXN0aW9uIGZvciB0aHlzZWxmLiBGb3IgdGhlIGdvZHMgaW5kaWNhdGUgYSBncmVhdCBjaGFuZ2UgYW5kIHJldm9sdXRpb24gb2YgdGhlIHByZXNlbnQgc3RhdHVzIHRvIHRoZSBvcHBvc2l0ZS4gVGhlcmVmb3JlLCBpZiB0aG91IHRoaW5rZXN0IHRoeXNlbGYgd2VsbCBvZmYgYXMgbWF0dGVycyBzdGFuZCwgZXhwZWN0IHRoZSB3b3JzZSBmb3J0dW5lOyBpZiBiYWRseSBvZmYsIHRoZSBiZXR0ZXIuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyIG9uIHRoZSBuaWdodCBiZWZvcmUgdGhlIGJhdHRsZSwgYXMgQ2Flc2FyIHdhcyBtYWtpbmcgdGhlIHJvdW5kIG9mIGhpcyBzZW50cmllcyBhYm91dCBtaWRuaWdodCwgYSBmaWVyeSB0b3JjaCB3YXMgc2VlbiBpbiB0aGUgaGVhdmVucyB3aGljaCBzZWVtZWQgdG8gYmUgY2FycmllZCBvdmVyIGhpcyBjYW1wLCBibGF6aW5nIG91dCBicmlnaHRseSwgYW5kIHRoZW4gdG8gZmFsbCBpbnRvIFBvbXBleSdzLiBBbmQgZHVyaW5nIHRoZSBtb3JuaW5nIHdhdGNoIGl0IHdhcyBub3RpY2VkIHRoYXQgdGhlcmUgd2FzIGFjdHVhbGx5IGEgcGFuaWMgY29uZnVzaW9uIGFtb25nIHRoZSBlbmVteS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2OC4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBseHZpaWkuIDM8L2JpYmw+Ljwvbm90ZT4gSG93ZXZlciwgQ2Flc2FyIGRpZCBub3QgZXhwZWN0IHRvIGZpZ2h0IG9uIHRoYXQgZGF5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF1Z3VzdCA5LCA0OCBCLkMuPC9ub3RlPiBidXQgYmVnYW4gdG8gYnJlYWsgY2FtcCBmb3IgYSBtYXJjaCB0byBTY290dXNzYS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGp1c3QgYXMgdGhlIHRlbnRzIGhhZCBiZWVuIHN0cnVjaywgaGlzIHNjb3V0cyByb2RlIHVwIHRvIGhpbSB3aXRoIHRpZGluZ3MgdGhhdCB0aGUgZW5lbXkgd2VyZSBjb21pbmcgZG93biBpbnRvIHRoZSBwbGFpbiBmb3IgYmF0dGxlLiBBdCB0aGlzIGhlIHdhcyBvdmVyam95ZWQsIGFuZCBhZnRlciBwcmF5ZXJzIGFuZCB2b3dzIHRvIHRoZSBnb2RzLCBkcmV3IHVwIGhpcyBsZWdpb25hcmllcyBpbiB0aHJlZSBkaXZpc2lvbnMuIE92ZXIgdGhlIGNlbnRyZSBoZSBwdXQgRG9taXRpdXMgQ2FsdmludXMsIHdoaWxlIG9mIHRoZSB3aW5ncyBBbnRvbnkgaGFkIG9uZSBhbmQgaGUgaGltc2VsZiB0aGUgcmlnaHQsIHdoZXJlIGhlIGludGVuZGVkIHRvIGZpZ2h0IHdpdGggdGhlIHRlbnRoIGxlZ2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNlZWluZyB0aGF0IHRoZSBlbmVteSdzIGNhdmFscnkgd2VyZSBhcnJheWluZyB0aGVtc2VsdmVzIG92ZXIgYWdhaW5zdCB0aGlzIHBvaW50LCBhbmQgZmVhcmluZyB0aGVpciBicmlsbGlhbnQgYXBwZWFyYW5jZSBhbmQgdGhlaXIgbnVtYmVycywgaGUgb3JkZXJlZCBzaXggY29ob3J0cyBmcm9tIHRoZSBmdXJ0aGVybW9zdCBsaW5lcyB0byBjb21lIHJvdW5kIHRvIGhpbSB1bm9ic2VydmVkLCBhbmQgc3RhdGlvbmVkIHRoZW0gYmVoaW5kIGhpcyByaWdodCB3aW5nLCB0ZWFjaGluZyB0aGVtIHdoYXQgdGhleSB3ZXJlIHRvIGRvIHdoZW4gdGhlIGVuZW15J3MgaG9yc2VtZW4gYXR0YWNrZWQuIFBvbXBleSBoYWQgb25lIG9mIGhpcyB3aW5ncyBoaW1zZWxmIGFuZCBEb21pdGl1cyB0aGUgbGVmdCwgd2hpbGUgU2NpcGlvLCBQb21wZXkncyBmYXRoZXItaW4tbGF3LCBjb21tYW5kZWQgdGhlIGNlbnRyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhpcyBob3JzZW1lbiBhbGwgY3Jvd2RlZCB0byB0aGUgbGVmdCB3aW5nLCBpbnRlbmRpbmcgdG8gZW5jaXJjbGUgdGhlIGVuZW15J3MgcmlnaHQgYW5kIG1ha2UgYSBjb21wbGV0ZSByb3V0IGFib3V0IHRoZSBjb21tYW5kZXIgaGltc2VsZjsgZm9yIHRoZXkgdGhvdWdodCB0aGF0IG5vIGxlZ2lvbmFyeSBhcnJheSwgaG93ZXZlciBkZWVwLCBjb3VsZCByZXNpc3QgdGhlbSwgYnV0IHRoYXQgd2hlbiBzbyBtYW55IGhvcnNlbWVuIG1hZGUgYW4gb25zZXQgdG9nZXRoZXIgdGhlIGVuZW15IHdvdWxkIGJlIHV0dGVybHkgYnJva2VuIGFuZCBjcnVzaGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4aXguIDEtMzwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBib3RoIHNpZGVzIHdlcmUgYWJvdXQgdG8gc291bmQgdGhlIGNoYXJnZSwgUG9tcGV5IG9yZGVyZWQgaGlzIGxlZ2lvbmFyaWVzIHRvIHN0YW5kIHdpdGggYXJtcyBhdCB0aGUgcmVhZHkgYW5kIGF3YWl0IGluIGNsb3NlIGFycmF5IHRoZSBvbnNldCBvZiB0aGUgZW5lbXkgdW50aWwgdGhleSB3ZXJlIHdpdGhpbiBqYXZlbGluIGNhc3QuIEJ1dCBDYWVzYXIgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJCSAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjkyIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEMuPC90aXRsZT4gaWlpLiA5Mi48L2JpYmw+CgkJCQkgICAgICAgIDwvbm90ZT4gdGhhdCBoZXJlIHRvbyBQb21wZXkgbWFkZSBhIG1pc3Rha2UsIG5vdCBrbm93aW5nIHRoYXQgdGhlIGluaXRpYWwgY2xhc2ggd2l0aCBhbGwgdGhlIGltcGV0dXMgb2YgcnVubmluZyBhZGRzIGZvcmNlIHRvIHRoZSBibG93cyBhbmQgZmlyZXMgdGhlIGNvdXJhZ2UsIHdoaWNoIGV2ZXJ5dGhpbmcgdGhlbiBjb25zcGlyZXMgdG8gZmFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBDYWVzYXIgaGltc2VsZiB3YXMgYWJvdXQgdG8gbW92ZSBoaXMgbGluZXMgb2YgbGVnaW9uYXJpZXMsIGFuZCB3YXMgYWxyZWFkeSBnb2luZyBmb3J3YXJkIGludG8gYWN0aW9uLCBoZSBzYXcgZmlyc3Qgb25lIG9mIGhpcyBjZW50dXJpb25zLCBhIG1hbiBleHBlcmllbmNlZCBpbiB3YXIgYW5kIGZhaXRoZnVsIHRvIGhpbSwgZW5jb3VyYWdpbmcgaGlzIG1lbiBhbmQgY2hhbGxlbmdpbmcgdGhlbSB0byB2aWUgd2l0aCBoaW0gaW4gcHJvd2Vzcy4gSGltIENhZXNhciBhZGRyZXNzZWQgYnkgbmFtZSBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYWl1cyBDcmFzc2luaXVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIENhZXNhcidzIHZlcnNpb24gb2YgdGhpcyBlcGlzb2RlIAoJCQkJCSg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjkxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuQy48L3RpdGxlPiBpaWkuIDkxPC9iaWJsPiBhbmQgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45OSIgdmFsaWQ9InllcyI+OTk8L2JpYmw+KSwgCgkJCQkJdGhlIG5hbWUgaXMgQ3Jhc3RpbnVzLjwvbm90ZT4gd2hhdCBhcmUgb3VyIGhvcGVzLCBhbmQgaG93IGRvZXMgb3VyIGNvbmZpZGVuY2Ugc3RhbmQ/PC9xPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBDcmFzc2luaXVzLCBzdHJldGNoaW5nIGZvcnRoIGhpcyByaWdodCBoYW5kLCBzYWlkIHdpdGggYSBsb3VkIHZvaWNlOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIHNoYWxsIHdpbiBhIGdsb3Jpb3VzIHZpY3RvcnksIE8gQ2Flc2FyLCBhbmQgdGhvdSBzaGFsdCBwcmFpc2UgbWUgdG8tZGF5LCB3aGV0aGVyIEkgYW0gYWxpdmUgb3IgZGVhZDwvcT4gU28gc2F5aW5nLCBoZSBwbHVuZ2VkIGZvcmVtb3N0IGludG8gdGhlIGVuZW15IGF0IGZ1bGwgc3BlZWQsIGNhcnJ5aW5nIGFsb25nIHdpdGggaGltIHRoZSBvbmUgaHVuZHJlZCBhbmQgdHdlbnR5IHNvbGRpZXJzIHVuZGVyIGhpcyBjb21tYW5kLiBCdXQgYWZ0ZXIgY3V0dGluZyBoaXMgd2F5IHRocm91Z2ggdGhlIGZpcnN0IHJhbmssIGFuZCB3aGlsZSBoZSB3YXMgZm9yZ2luZyBvbndhcmRzIHdpdGggZ3JlYXQgc2xhdWdodGVyLCBoZSB3YXMgYmVhdGVuIGJhY2sgYnkgdGhlIHRocnVzdCBvZiBhIHN3b3JkIHRocm91Z2ggaGlzIG1vdXRoLCBhbmQgdGhlIHBvaW50IG9mIHRoZSBzd29yZCBhY3R1YWxseSBjYW1lIG91dCBhdCB0aGUgYmFjayBvZiBoaXMgbmVjay48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDcxLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4eGkuIDEtMzwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQ1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgaW5mYW50cnkgaGFkIHRodXMgY2xhc2hlZCB0b2dldGhlciBpbiB0aGUgY2VudHJlIGFuZCB3ZXJlIGZpZ2h0aW5nLCBQb21wZXkncyBjYXZhbHJ5IHJvZGUgcHJvdWRseSB1cCBmcm9tIHRoZSB3aW5nIGFuZCBkZXBsb3llZCB0aGVpciBzcXVhZHJvbnMgdG8gZW52ZWxvcGUgdGhlIGVuZW15J3MgcmlnaHQ7IGFuZCBiZWZvcmUgdGhleSBjb3VsZCBhdHRhY2ssIHRoZSBjb2hvcnRzIHJhbiBvdXQgZnJvbSB3aGVyZSBDYWVzYXIgd2FzIHBvc3RlZCwgbm90IGh1cmxpbmcgdGhlaXIgamF2ZWxpbnMsIGFzIHVzdWFsLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5ub3IgeWV0IHN0YWJiaW5nIHRoZSB0aGlnaHMgYW5kIGxlZ3Mgb2YgdGhlaXIgZW5lbWllcyB3aXRoIHRoZW0sIGJ1dCBhaW1pbmcgdGhlbSBhdCB0aGVpciBleWVzIGFuZCB3b3VuZGluZyB0aGVpciBmYWNlcy4gVGhleSBoYWQgYmVlbiBpbnN0cnVjdGVkIHRvIGRvIHRoaXMgYnkgQ2Flc2FyLCB3aG8gZXhwZWN0ZWQgdGhhdCBtZW4gbGl0dGxlIGNvbnZlcnNhbnQgd2l0aCB3YXJzIG9yIHdvdW5kcywgYnV0IHlvdW5nLCBhbmQgcGx1bWluZyB0aGVtc2VsdmVzIG9uIHRoZWlyIHlvdXRoZnVsIGJlYXV0eSwgd291bGQgZHJlYWQgc3VjaCB3b3VuZHMgZXNwZWNpYWxseSwgYW5kIHdvdWxkIG5vdCBzdGFuZCB0aGVpciBncm91bmQsIGZlYXJpbmcgbm90IG9ubHkgdGhlaXIgcHJlc2VudCBkYW5nZXIsIGJ1dCBhbHNvIHRoZWlyIGZ1dHVyZSBkaXNmaWd1cmVtZW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdGhpcyB3YXMgd2hhdCBhY3R1YWxseSBjYW1lIHRvIHBhc3M7IGZvciB0aGV5IGNvdWxkIG5vdCBlbmR1cmUgdGhlIHVwd2FyZCB0aHJ1c3Qgb2YgdGhlIGphdmVsaW5zLCBub3IgZGlkIHRoZXkgZXZlbiB2ZW50dXJlIHRvIGxvb2sgdGhlIHdlYXBvbiBpbiB0aGUgZmFjZSwgYnV0IHR1cm5lZCB0aGVpciBoZWFkcyBhd2F5IGFuZCBjb3ZlcmVkIHRoZW0gdXAgdG8gc3BhcmUgdGhlaXIgZmFjZXMuIEFuZCBmaW5hbGx5LCBoYXZpbmcgdGh1cyB0aHJvd24gdGhlbXNlbHZlcyBpbnRvIGNvbmZ1c2lvbiwgdGhleSB0dXJuZWQgYW5kIGZsZWQgbW9zdCBzaGFtZWZ1bGx5LCB0aGVyZWJ5IHJ1aW5pbmcgZXZlcnl0aGluZy4gRm9yIHRoZSBjb25xdWVyb3JzIG9mIHRoZSBob3JzZW1lbiBhdCBvbmNlIGVuY2lyY2xlZCB0aGUgaW5mYW50cnksIGZlbGwgdXBvbiB0aGVpciByZWFyLCBhbmQgYmVnYW4gdG8gY3V0IHRoZW0gdG8gcGllY2VzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIFBvbXBleSwgb24gdGhlIG90aGVyIHdpbmcsIHNhdyBoaXMgaG9yc2VtZW4gc2NhdHRlcmVkIGluIGZsaWdodCwgaGUgd2FzIG5vIGxvbmdlciB0aGUgc2FtZSBtYW4sIG5vciByZW1lbWJlcmVkIHRoYXQgaGUgd2FzIFBvbXBleSB0aGUgR3JlYXQsIGJ1dCBtb3JlIGxpa2Ugb25lIHdob20gSGVhdmVuIGhhcyByb2JiZWQgb2YgaGlzIHdpdHMgdGhhbiBhbnl0aGluZyBlbHNlLCBoZSB3ZW50IG9mZiB3aXRob3V0IGEgd29yZCB0byBoaXMgdGVudCwgc2F0IGRvd24gdGhlcmUsIGFuZCBhd2FpdGVkIHdoYXQgd2FzIHRvIGNvbWUsIHVudGlsIGhpcyBmb3JjZXMgd2VyZSBhbGwgcm91dGVkIGFuZCB0aGUgZW5lbXkgd2VyZSBhc3NhaWxpbmcgaGlzIHJhbXBhcnRzIGFuZCBmaWdodGluZyB3aXRoIHRoZWlyIGRlZmVuZGVycy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiBoZSBjYW1lIHRvIGhpcyBzZW5zZXMsIGFzIGl0IHdlcmUsIGFuZCB3aXRoIHRoaXMgb25lIGVqYWN1bGF0aW9uLCBhcyB0aGV5IHNheSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0LCBldmVuIHRvIG15IHF1YXJ0ZXJzPzwvcT4gdG9vayBvZmYgaGlzIGZpZ2h0aW5nIGFuZCBnZW5lcmFsJ3MgZHJlc3MsIHB1dCBvbiBvbmUgc3VpdGFibGUgZm9yIGEgZnVnaXRpdmUsIGFuZCBzdG9sZSBhd2F5LiBXaGF0IGhpcyBzdWJzZXF1ZW50IGZvcnR1bmVzIHdlcmUsIGFuZCBob3cgaGUgZGVsaXZlcmVkIGhpbXNlbGYgaW50byB0aGUgaGFuZHMgb2YgdGhlIEVneXB0aWFucyBhbmQgd2FzIG11cmRlcmVkLCBJIHNoYWxsIHRlbGwgaW4gaGlzIExpZmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA3Ny4xIiB2YWxpZD0ieWVzIj5DaGFwdGVycyBseHh2aWkuPC9iaWJsPi08YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gODAuMSIgdmFsaWQ9InllcyI+bHh4eDwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQ2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhZXNhciwgd2hlbiBoZSByZWFjaGVkIFBvbXBleSdzIHJhbXBhcnRzIGFuZCBzYXcgdGhvc2Ugb2YgdGhlIGVuZW15IHdobyB3ZXJlIGFscmVhZHkgbHlpbmcgZGVhZCB0aGVyZSBhbmQgdGhvc2Ugd2hvIHdlcmUgc3RpbGwgZmFsbGluZywgc2FpZCB3aXRoIGEgZ3JvYW46IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhleSB3b3VsZCBoYXZlIGl0IHNvOyB0aGV5IGJyb3VnaHQgbWUgdG8gc3VjaCBhIHBhc3MgdGhhdCBpZiBJLCBDYWl1cyBDYWVzYXIsIGFmdGVyIHdhZ2luZyBzdWNjZXNzZnVsbHkgdGhlIGdyZWF0ZXN0IHdhcnMsIGhhZCBkaXNtaXNzZWQgbXkgZm9yY2VzLCBJIHNob3VsZCBoYXZlIGJlZW4gY29uZGVtbmVkIGluIHRoZWlyIGNvdXJ0cy48L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+SG9jIHZvbHVlcnVudDsgdGFudGlzIHJlYnVzIGdlc3RpcyBHYWl1cyBDYWVzYXIgY29uZGVtbmF0dXMgZXNzZW0sIG5pc2kgYWIgZXhlcmNpdHUgYXV4aWxpdW0gcGV0aXNzZW08L2ZvcmVpZ24+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiAzMCIgdmFsaWQ9InllcyI+U3VldG9uaXVzLCA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gMzA8L2JpYmw+KS48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzaW5pdXMgUG9sbGlvIHNheXMgdGhhdCB0aGVzZSB3b3Jkcywgd2hpY2ggQ2Flc2FyIGFmdGVyd2FyZHMgd3JvdGUgZG93biBpbiBHcmVlaywgd2VyZSB1dHRlcmVkIGJ5IGhpbSBpbiBMYXRpbiBhdCB0aGUgdGltZTsgaGUgYWxzbyBzYXlzIHRoYXQgbW9zdCBvZiB0aGUgc2xhaW4gd2VyZSBzZXJ2YW50cyB3aG8gd2VyZSBraWxsZWQgYXQgdGhlIHRha2luZyBvZiB0aGUgY2FtcCwgYW5kIHRoYXQgbm90IG1vcmUgdGhhbiBzaXggdGhvdXNhbmQgc29sZGllcnMgZmVsbC4gTW9zdCBvZiB0aG9zZSB3aG8gd2VyZSB0YWtlbiBhbGl2ZSBDYWVzYXIgaW5jb3Jwb3JhdGVkIGluIGhpcyBsZWdpb25zLCBhbmQgdG8gbWFueSBtZW4gb2YgcHJvbWluZW5jZSBoZSBncmFudGVkIGltbXVuaXR5LiBPbmUgb2YgdGhlc2Ugd2FzIEJydXR1cywgd2hvIGFmdGVyd2FyZHMgc2xldyBoaW0uIENhZXNhciB3YXMgZGlzdHJlc3NlZCwgd2UgYXJlIHRvbGQsIHdoZW4gQnJ1dHVzIHdhcyBub3QgdG8gYmUgZm91bmQsIGJ1dCB3aGVuIGhlIHdhcyBicm91Z2h0IGludG8gaGlzIHByZXNlbmNlIHNhZmUgYW5kIHNvdW5kLCB3YXMgcGxlYXNlZCBiZXlvbmQgbWVhc3VyZS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQ3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSBtYW55IHBvcnRlbnRzIG9mIHRoZSB2aWN0b3J5LCBidXQgdGhlIG1vc3QgcmVtYXJrYWJsZSBvbmUgb24gcmVjb3JkIGlzIHRoYXQgd2hpY2ggd2FzIHNlZW4gYXQgVHJhbGxlcy4gSW4gdGhhdCBjaXR5J3MgdGVtcGxlIG9mIFZpY3RvcnkgdGhlcmUgc3Rvb2QgYSBzdGF0dWUgb2YgQ2Flc2FyLCBhbmQgdGhlIGdyb3VuZCBhcm91bmQgaXQgd2FzIGl0c2VsZiBuYXR1cmFsbHkgZmlybSwgYW5kIHdhcyBwYXZlZCB3aXRoIGhhcmQgc3RvbmU7IHlldCBmcm9tIHRoaXMgaXQgaXMgc2FpZCB0aGF0IGEgcGFsbS10cmVlIHNob3QgdXAgYXQgdGhlIGJhc2Ugb2YgdGhlIHN0YXR1ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy4xMDUiIHZhbGlkPSJ5ZXMiPkNhZXNhciA8dGl0bGU+Qi4gQy48L3RpdGxlPiBpaWkuIDEwNTwvYmlibD4gYWQgZmluLjwvbm90ZT4gTW9yZW92ZXIsIGF0IFBhdGF2aXVtLCBDYWl1cyBDb3JuZWxpdXMsIGEgbWFuIGluIHJlcHV0ZSBhcyBhIHNlZXIsIGEgZmVsbG93IGNpdGl6ZW4gYW5kIGFjcXVhaW50YW5jZSBvZiBMaXZ5IHRoZSBoaXN0b3JpYW4sIGNoYW5jZWQgdGhhdCBkYXkgdG8gYmUgc2l0dGluZyBpbiB0aGUgcGxhY2Ugb2YgYXVndXJ5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgdG8gYmVnaW4gd2l0aCwgYWNjb3JkaW5nIHRvIExpdnksIGhlIGRpc2Nlcm5lZCB0aGUgdGltZSBvZiB0aGUgYmF0dGxlLCBhbmQgc2FpZCB0byB0aG9zZSBwcmVzZW50IHRoYXQgZXZlbiB0aGVuIHRoZSBldmVudCB3YXMgaW4gcHJvZ3Jlc3MgYW5kIHRoZSBtZW4gd2VyZSBnb2luZyBpbnRvIGFjdGlvbi4gQW5kIHdoZW4gaGUgbG9va2VkIGFnYWluIGFuZCBvYnNlcnZlZCB0aGUgc2lnbnMsIGhlIHNwcmFuZyB1cCBpbiBhIHJhcHR1cmUgY3J5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgYXJ0IHZpY3RvcmlvdXMsIE8gQ2Flc2FyITwvcT4gVGhlIGJ5c3RhbmRlcnMgYmVpbmcgYW1hemVkLCBoZSB0b29rIHRoZSBjaGFwbGV0IGZyb20gaGlzIGhlYWQgYW5kIGRlY2xhcmVkIHdpdGggYW4gb2F0aCB0aGF0IGhlIHdvdWxkIG5vdCBwdXQgaXQgb24gYWdhaW4gdW50aWwgdGhlIGV2ZW50IGhhZCBib3JuZSB3aXRuZXNzIHRvIGhpcyBhcnQuIEF0IGFueSByYXRlLCBMaXZ5IGluc2lzdHMgdGhhdCB0aGlzIHdhcyBzby48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBCb29rIGN4aSwgd2hpY2ggaXMgbG9zdC48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgZ2F2ZSB0aGUgVGhlc3NhbGlhbnMgdGhlaXIgZnJlZWRvbSwgdG8gY29tbWVtb3JhdGUgaGlzIHZpY3RvcnksIGFuZCB0aGVuIHB1cnN1ZWQgUG9tcGV5OyB3aGVuIGhlIHJlYWNoZWQgQXNpYSBoZSBtYWRlIHRoZSBDbmlkaWFucyBhbHNvIGZyZWUsIHRvIHBsZWFzZSBUaGVvcG9tcHVzIHRoZSBjb2xsZWN0b3Igb2YgZmFibGVzLCBhbmQgZm9yIGFsbCB0aGUgaW5oYWJpdGFudHMgb2YgQXNpYSByZW1pdHRlZCBhIHRoaXJkIG9mIHRoZWlyIHRheGVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcnJpdmluZyBhdCBBbGV4YW5kcmlhIGp1c3QgYWZ0ZXIgUG9tcGV5J3MgZGVhdGgsIGhlIHR1cm5lZCBhd2F5IGluIGhvcnJvciBmcm9tIFRoZW9kb3R1cyBhcyBoZSBwcmVzZW50ZWQgdGhlIGhlYWQgb2YgUG9tcGV5LCBidXQgaGUgYWNjZXB0ZWQgUG9tcGV5J3Mgc2VhbC1yaW5nLCBhbmQgc2hlZCB0ZWFycyBvdmVyIGl0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDgwLjUiIHZhbGlkPSJ5ZXMiPlBvbXBleSwgbHh4eC4gNTwvYmlibD4uPC9ub3RlPiBNb3Jlb3ZlciwgYWxsIHRoZSBjb21wYW5pb25zIGFuZCBpbnRpbWF0ZXMgb2YgUG9tcGV5IHdobyBoYWQgYmVlbiBjYXB0dXJlZCBieSB0aGUga2luZyBhcyB0aGV5IHdhbmRlcmVkIG92ZXIgdGhlIGNvdW50cnksIGhlIHRyZWF0ZWQgd2l0aCBraW5kbmVzcyBhbmQgYXR0YWNoZWQgdGhlbSB0byBoaW1zZWxmLiBBbmQgdG8gaGlzIGZyaWVuZHMgaW4gUm9tZSBoZSB3cm90ZSB0aGF0IHRoaXMgd2FzIHRoZSBncmVhdGVzdCBhbmQgc3dlZXRlc3QgcGxlYXN1cmUgdGhhdCBoZSBkZXJpdmVkIGZyb20gaGlzIHZpY3RvcnksIG5hbWVseSwgZnJvbSB0aW1lIHRvIHRpbWUgdG8gc2F2ZSB0aGUgbGl2ZXMgb2YgZmVsbG93IGNpdGl6ZW5zIHdobyBoYWQgZm91Z2h0IGFnYWluc3QgaGltLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlIHdhciBpbiBFZ3lwdCwgc29tZSBzYXkgdGhhdCBpdCB3YXMgbm90IG5lY2Vzc2FyeSwgYnV0IGR1ZSB0byBDYWVzYXIncyBwYXNzaW9uIGZvciBDbGVvcGF0cmEsIGFuZCB0aGF0IGl0IHdhcyBpbmdsb3Jpb3VzIGFuZCBmdWxsIG9mIHBlcmlsIGZvciBoaW0uIEJ1dCBvdGhlcnMgYmxhbWUgdGhlIGtpbmcncyBwYXJ0eSBmb3IgaXQsIGFuZCBlc3BlY2lhbGx5IHRoZSBldW51Y2ggUG90aGVpbnVzLCB3aG8gaGFkIG1vc3QgaW5mbHVlbmNlIGF0IGNvdXJ0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDc3LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4eHZpaS4gMjwvYmlibD4uPC9ub3RlPiBhbmQgaGFkIHJlY2VudGx5IGtpbGxlZCBQb21wZXk7IGhlIGhhZCBhbHNvIGRyaXZlbiBDbGVvcGF0cmEgZnJvbSB0aGUgY291bnRyeSwgYW5kIHdhcyBub3cgc2VjcmV0bHkgcGxvdHRpbmcgYWdhaW5zdCBDYWVzYXIuIE9uIHRoaXMgYWNjb3VudCB0aGV5IHNheSB0aGF0IGZyb20gdGhpcyB0aW1lIG9uIENhZXNhciBwYXNzZWQgd2hvbGUgbmlnaHRzIGF0IGRyaW5raW5nIHBhcnRpZXMgaW4gb3JkZXIgdG8gcHJvdGVjdCBoaW1zZWxmLiBCdXQgaW4gaGlzIG9wZW4gYWN0cyBhbHNvIFBvdGhlaW51cyB3YXMgdW5iZWFyYWJsZSwgc2luY2UgaGUgc2FpZCBhbmQgZGlkIG1hbnkgdGhpbmdzIHRoYXQgd2VyZSBpbnZpZGlvdXMgYW5kIGluc3VsdGluZyB0byBDYWVzYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgd2hlbiB0aGUgc29sZGllcnMgaGFkIHRoZSBvbGRlc3QgYW5kIHdvcnN0IGdyYWluIG1lYXN1cmVkIG91dCB0byB0aGVtLCBoZSBiYWRlIHRoZW0gcHV0IHVwIHdpdGggaXQgYW5kIGJlIGNvbnRlbnQsIHNpbmNlIHRoZXkgd2VyZSBlYXRpbmcgd2hhdCBiZWxvbmdlZCB0byBvdGhlcnM7IGFuZCBhdCB0aGUgc3RhdGUgc3VwcGVycyBoZSB1c2VkIHdvb2RlbiBhbmQgZWFydGhlbiBkaXNoZXMsIG9uIHRoZSBncm91bmQgdGhhdCBDYWVzYXIgaGFkIHRha2VuIGFsbCB0aGUgZ29sZCBhbmQgc2lsdmVyIHdhcmUgaW4gcGF5bWVudCBvZiBhIGRlYnQuIEZvciB0aGUgZmF0aGVyIG9mIHRoZSBwcmVzZW50IGtpbmcgb3dlZCBDYWVzYXIgc2V2ZW50ZWVuIG1pbGxpb24gZml2ZSBodW5kcmVkIHRob3VzYW5kIGRyYWNobWFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkR1cmluZyBDYWVzYXIncyBjb25zdWxzaGlwICg1OSBCLkMuKSBQdG9sZW15IEF1bGV0ZXMgd2FzIGRlY2xhcmVkIGEgZnJpZW5kIGFuZCBhbGx5IG9mIHRoZSBSb21hbnMuIFRvIHNlY3VyZSB0aGlzIGhvbm91ciBoZSBib3RoIGdhdmUgYW5kIHByb21pc2VkIG1vbmV5IHRvIHRoZSBzdGF0ZS48L25vdGU+IG9mIHdoaWNoIENhZXNhciBoYWQgZm9ybWVybHkgcmVtaXR0ZWQgYSBwYXJ0IHRvIGhpcyBjaGlsZHJlbiwgYnV0IG5vdyBkZW1hbmRlZCBwYXltZW50IG9mIHRlbiBtaWxsaW9ucyBmb3IgdGhlIHN1cHBvcnQgb2YgaGlzIGFybXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIFBvdGhlaW51cyBiYWRlIGhpbSBnbyBhd2F5IG5vdyBhbmQgYXR0ZW5kIHRvIGhpcyBncmVhdCBhZmZhaXJzLCBhc3N1cmluZyBoaW0gdGhhdCBsYXRlciBoZSB3b3VsZCBnZXQgaGlzIG1vbmV5IHdpdGggdGhhbmtzLCBDYWVzYXIgcmVwbGllZCB0aGF0IGhlIGhhZCBubyBuZWVkIHdoYXRldmVyIG9mIEVneXB0aWFucyBhcyBhZHZpc2VycywgYW5kIHNlY3JldGx5IHNlbnQgZm9yIENsZW9wYXRyYSBmcm9tIHRoZSBjb3VudHJ5LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TbyBDbGVvcGF0cmEsIHRha2luZyBvbmx5IEFwb2xsb2RvcnVzIHRoZSBTaWNpbGlhbiBmcm9tIGFtb25nIGhlciBmcmllbmRzLCBlbWJhcmtlZCBpbiBhIGxpdHRsZSBza2lmZiBhbmQgbGFuZGVkIGF0IHRoZSBwYWxhY2Ugd2hlbiBpdCB3YXMgYWxyZWFkeSBnZXR0aW5nIGRhcms7IGFuZCBhcyBpdCB3YXMgaW1wb3NzaWJsZSB0byBlc2NhcGUgbm90aWNlIG90aGVyd2lzZSwgc2hlIHN0cmV0Y2hlZCBoZXJzZWxmIGF0IGZ1bGwgbGVuZ3RoIGluc2lkZSBhIGJlZC1zYWNrLCB3aGlsZSBBcG9sbG9kb3J1cyB0aWVkIHRoZSBiZWRzYWNrIHVwIHdpdGggYSBjb3JkIGFuZCBjYXJyaWVkIGl0IGluZG9vcnMgdG8gQ2Flc2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgYnkgdGhpcyBkZXZpY2Ugb2YgQ2xlb3BhdHJhJ3MsIGl0IGlzIHNhaWQsIHRoYXQgQ2Flc2FyIHdhcyBmaXJzdCBjYXB0aXZhdGVkLCBmb3Igc2hlIHNob3dlZCBoZXJzZWxmIHRvIGJlIGEgYm9sZCBjb3F1ZXR0ZSwgYW5kIHN1Y2N1bWJpbmcgdG8gdGhlIGNoYXJtIG9mIGZ1cnRoZXIgaW50ZXJjb3Vyc2Ugd2l0aCBoZXIsIGhlIHJlY29uY2lsZWQgaGVyIHRvIGhlciBicm90aGVyIG9uIHRoZSBiYXNpcyBvZiBhIGpvaW50IHNoYXJlIHdpdGggaGltIGluIHRoZSByb3lhbCBwb3dlci4gVGhlbiwgYXMgZXZlcnlib2R5IHdhcyBmZWFzdGluZyB0byBjZWxlYnJhdGUgdGhlIHJlY29uY2lsaWF0aW9uLCBhIHNsYXZlIG9mIENhZXNhcidzLCBoaXMgYmFyYmVyLCB3aG8gbGVmdCBub3RoaW5nIHVuc2NydXRpbml6ZWQsIG93aW5nIHRvIGEgdGltaWRpdHkgaW4gd2hpY2ggaGUgaGFkIG5vIGVxdWFsLCBidXQga2VwdCBoaXMgZWFycyBvcGVuIGFuZCB3YXMgaGVyZSwgdGhlcmUsIGFuZCBldmVyeXdoZXJlLCBwZXJjZWl2ZWQgdGhhdCBBY2hpbGxhcyB0aGUgZ2VuZXJhbCBhbmQgUG90aGVpbnVzIHRoZSBldW51Y2ggd2VyZSBoYXRjaGluZyBhIHBsb3QgYWdhaW5zdCBDYWVzYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIENhZXNhciBoYWQgZm91bmQgdGhlbSBvdXQsIGhlIHNldCBhIGd1YXJkIGFib3V0IHRoZSBiYW5xdWV0aW5nLWhhbGwsIGFuZCBwdXQgUG90aGVpbnVzIHRvIGRlYXRoOyBBY2hpbGxhcywgaG93ZXZlciwgZXNjYXBlZCB0byBoaXMgY2FtcCwgYW5kIHJhaXNlZCBhYm91dCBDYWVzYXIgYSB3YXIgZ3JpZXZvdXMgYW5kIGRpZmZpY3VsdCBmb3Igb25lIHdobyB3YXMgZGVmZW5kaW5nIGhpbXNlbGYgd2l0aCBzbyBmZXcgZm9sbG93ZXJzIGFnYWluc3Qgc28gbGFyZ2UgYSBjaXR5IGFuZCBhcm15LiBJbiB0aGlzIHdhciwgdG8gYmVnaW4gd2l0aCwgQ2Flc2FyIGVuY291bnRlcmVkIHRoZSBwZXJpbCBvZiBiZWluZyBzaHV0IG9mZiBmcm9tIHdhdGVyLCBzaW5jZSB0aGUgY2FuYWxzIHdlcmUgZGFtbWVkIHVwIGJ5IHRoZSBlbmVteTsgaW4gdGhlIHNlY29uZCBwbGFjZSwgd2hlbiB0aGUgZW5lbXkgdHJpZWQgdG8gY3V0IG9mZiBoaXMgZmxlZXQsIGhlIHdhcyBmb3JjZWQgdG8gcmVwZWwgdGhlIGRhbmdlciBieSB1c2luZyBmaXJlLCBhbmQgdGhpcyBzcHJlYWQgZnJvbSB0aGUgZG9ja3lhcmRzIGFuZCBkZXN0cm95ZWQgdGhlIGdyZWF0IGxpYnJhcnk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgTXVzZXVtLCBmb3VuZGVkIGJ5IHRoZSBmaXJzdCBQdG9sZW15IChvYi4gMjgzIEIuQy4pLiBUaGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIGxpYnJhcnkgY2FuIGhhdmUgYmVlbiBvbmx5IHBhcnRpYWwuPC9ub3RlPjsgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoaXJkbHksIHdoZW4gYSBiYXR0bGUgYXJvc2UgYXQgUGhhcm9zLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGlzbGFuZCBvZmYgQWxleGFuZHJpYSwgY29ubmVjdGVkIHdpdGggdGhlIG1haW5sYW5kIGJ5IGEgbW9sZSwgb3IgY2F1c2V3YXksIHdoaWNoIGRpdmlkZWQgdGhlIGhhcmJvdXIgaW50byB0d28gcGFydHMuPC9ub3RlPiBoZSBzcHJhbmcgZnJvbSB0aGUgbW9sZSBpbnRvIGEgc21hbGwgYm9hdCBhbmQgdHJpZWQgdG8gZ28gdG8gdGhlIGFpZCBvZiBoaXMgbWVuIGluIHRoZWlyIHN0cnVnZ2xlLCBidXQgdGhlIEVneXB0aWFucyBzYWlsZWQgdXAgYWdhaW5zdCBoaW0gZnJvbSBldmVyeSBzaWRlLCBzbyB0aGF0IGhlIHRocmV3IGhpbXNlbGYgaW50byB0aGUgc2VhIGFuZCB3aXRoIGdyZWF0IGRpZmZpY3VsdHkgZXNjYXBlZCBieSBzd2ltbWluZy4gQXQgdGhpcyB0aW1lLCB0b28sIGl0IGlzIHNhaWQgdGhhdCBoZSB3YXMgaG9sZGluZyBtYW55IHBhcGVycyBpbiBoaXMgaGFuZCBhbmQgd291bGQgbm90IGxldCB0aGVtIGdvLCB0aG91Z2ggbWlzc2lsZXMgd2VyZSBmbHlpbmcgYXQgaGltIGFuZCBoZSB3YXMgaW1tZXJzZWQgaW4gdGhlIHNlYSwgYnV0IGhlbGQgdGhlbSBhYm92ZSB3YXRlciB3aXRoIG9uZSBoYW5kIGFuZCBzd2FtIHdpdGggdGhlIG90aGVyOyBoaXMgbGl0dGxlIGJvYXQgaGFkIGJlZW4gc3VuayBhdCB0aGUgb3V0c2V0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0Mi40MCI+RGlvIENhc3NpdXMgeGxpaS4gNDA8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGZpbmFsbHksIGFmdGVyIHRoZSBraW5nIGhhZCBnb25lIGF3YXkgdG8gdGhlIGVuZW15LCBoZSBtYXJjaGVkIGFnYWluc3QgaGltIGFuZCBjb25xdWVyZWQgaGltIGluIGEgYmF0dGxlIHdoZXJlIG1hbnkgZmVsbCBhbmQgdGhlIGtpbmcgaGltc2VsZiBkaXNhcHBlYXJlZC4gVGhlbiwgbGVhdmluZyBDbGVvcGF0cmEgb24gdGhlIHRocm9uZSBvZiBFZ3lwdCAoYSBsaXR0bGUgbGF0ZXIgc2hlIGhhZCBhIHNvbiBieSBoaW0gd2hvbSB0aGUgQWxleGFuZHJpYW5zIGNhbGxlZCBDYWVzYXJpb24pLCBoZSBzZXQgb3V0IGZvciBTeXJpYS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gbGVhdmluZyB0aGF0IGNvdW50cnkgYW5kIHRyYXZlcnNpbmcgQXNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBKdWx5IG9mIDQ3IEIuQy48L25vdGU+IGhlIGxlYXJuZWQgdGhhdCBEb21pdGl1cyBoYWQgYmVlbiBkZWZlYXRlZCBieSBQaGFybmFjZXMgdGhlIHNvbiBvZiBNaXRocmlkYXRlcyBhbmQgaGFkIGZsZWQgZnJvbSBQb250dXMgd2l0aCBhIGZldyBmb2xsb3dlcnM7IGFsc28gdGhhdCBQaGFybmFjZXMsIHVzaW5nIGhpcyB2aWN0b3J5IHdpdGhvdXQgc3RpbnQsIGFuZCBvY2N1cHlpbmcgQml0aHluaWEgYW5kIENhcHBhZG9jaWEsIHdhcyBhaW1pbmcgdG8gc2VjdXJlIHRoZSBjb3VudHJ5IGNhbGxlZCBMZXNzZXIgQXJtZW5pYSwgYW5kIHdhcyByb3VzaW5nIHRvIHJldm9sdCBhbGwgdGhlIHByaW5jZXMgYW5kIHRldHJhcmNocyB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlcmVmb3JlLCBDYWVzYXIgbWFyY2hlZCBhZ2FpbnN0IGhpbSB3aXRoIHRocmVlIGxlZ2lvbnMsIGZvdWdodCBhIGdyZWF0IGJhdHRsZSB3aXRoIGhpbSBuZWFyIHRoZSBjaXR5IG9mIFplbGEsIGRyb3ZlIGhpbSBpbiBmbGlnaHQgb3V0IG9mIFBvbnR1cywgYW5kIGFubmloaWxhdGVkIGhpcyBhcm15LiBJbiBhbm5vdW5jaW5nIHRoZSBzd2lmdG5lc3MgYW5kIGZpZXJjZW5lc3Mgb2YgdGhpcyBiYXR0bGUgdG8gb25lIG9mIGhpcyBmcmllbmRzIGF0IFJvbWUsIEFtYW50aXVzLCBDYWVzYXIgd3JvdGUgdGhyZWUgd29yZHMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYW1lLCBzYXcsIGNvbnF1ZXJlZDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5WZW5pLCB2aWRpLCB2aWNpLjwvZm9yZWlnbj4gQWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gMzciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gMzc8L2JpYmw+KSwgdGhlIHdvcmRzIHdlcmUgZGlzcGxheWVkIGluIENhZXNhcidzIFBvbnRpYyB0cml1bXBoLjwvbm90ZT4gSW4gTGF0aW4sIGhvd2V2ZXIsIHRoZSB3b3JkcyBoYXZlIHRoZSBzYW1lIGluZmxlY3Rpb25hbCBlbmRpbmcsIGFuZCBzbyBhIGJyZXZpdHkgd2hpY2ggaXMgbW9zdCBpbXByZXNzaXZlLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBoZSBjcm9zc2VkIHRvIEl0YWx5IGFuZCB3ZW50IHVwIHRvIFJvbWUsIGF0IHRoZSBjbG9zZSBvZiB0aGUgeWVhciBmb3Igd2hpY2ggaGUgaGFkIGEgc2Vjb25kIHRpbWUgYmVlbiBjaG9zZW4gZGljdGF0b3IsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNlbmF0ZSBuYW1lZCBDYWVzYXIgRGljdGF0b3IgZm9yIHRoZSB5ZWFyIDQ3IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBiYXR0bGUgYXQgUGhhcnNhbHVzLjwvbm90ZT4gdGhvdWdoIHRoYXQgb2ZmaWNlIGhhZCBuZXZlciBiZWZvcmUgYmVlbiBmb3IgYSB3aG9sZSB5ZWFyOyB0aGVuIGZvciB0aGUgZm9sbG93aW5nIHllYXIgaGUgd2FzIHByb2NsYWltZWQgY29uc3VsLiBNZW4gc3Bva2UgaWxsIG9mIGhpbSBiZWNhdXNlLCBhZnRlciBoaXMgc29sZGllcnMgaGFkIG11dGluaWVkIGFuZCBraWxsZWQgdHdvIG1lbiBvZiBwcmFldG9yaWFuIHJhbmssIEdhbGJhIGFuZCBDb3Njb25pdXMsIGhlIGNlbnN1cmVkIHRoZW0gb25seSBzbyBmYXIgYXMgdG8gY2FsbCB0aGVtIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y2l0aXplbnM8L3E+IHdoZW4gaGUgYWRkcmVzc2VkIHRoZW0sIGluc3RlYWQgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zb2xkaWVycyw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjEzLjkzIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGlpLiA5MzwvYmlibD4uPC9ub3RlPiBhbmQgdGhlbiBnYXZlIGVhY2ggbWFuIGEgdGhvdXNhbmQgZHJhY2htYXMgYW5kIG11Y2ggYWxsb3R0ZWQgbGFuZCBpbiBJdGFseS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIGFsc28gY2FsdW1uaWF0ZWQgZm9yIHRoZSBtYWRuZXNzIG9mIERvbGFiZWxsYSwgdGhlIGdyZWVkIG9mIEFtYW50aXVzLCB0aGUgZHJ1bmtlbm5lc3Mgb2YgQW50b255LCBhbmQgZm9yIHRoZSBmYWN0IHRoYXQgQ29yZmluaXVzIGJ1aWx0IG92ZXIgYW5kIHJlZnVybmlzaGVkIHRoZSBob3VzZSBvZiBQb21wZXkgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyBub3QgZ29vZCBlbm91Z2ggZm9yIGhpbS4gRm9yIGF0IGFsbCB0aGVzZSB0aGluZ3MgdGhlIFJvbWFucyB3ZXJlIGRpc3BsZWFzZWQuIEJ1dCBvd2luZyB0byB0aGUgcG9saXRpY2FsIHNpdHVhdGlvbiwgdGhvdWdoIENhZXNhciB3YXMgbm90IGlnbm9yYW50IG9mIHRoZXNlIHRoaW5ncyBhbmQgZGlkIG5vdCBsaWtlIHRoZW0sIGhlIHdhcyBjb21wZWxsZWQgdG8gbWFrZSB1c2Ugb2Ygc3VjaCBhc3Npc3RhbnRzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlIGF0IFBoYXJzYWx1cywgQ2F0byBhbmQgU2NpcGlvIG1hZGUgdGhlaXIgZXNjYXBlIHRvIEFmcmljYSwgYW5kIHRoZXJlLCB3aXRoIHRoZSBhaWQgb2YgS2luZyBKdWJhLCBjb2xsZWN0ZWQgY29uc2lkZXJhYmxlIGZvcmNlcy4gQ2Flc2FyIHRoZXJlZm9yZSByZXNvbHZlZCB0byBtYWtlIGFuIGV4cGVkaXRpb24gYWdhaW5zdCB0aGVtLiBTbywgYWJvdXQgdGhlIHRpbWUgb2YgdGhlIHdpbnRlciBzb2xzdGljZSwgaGUgY3Jvc3NlZCBpbnRvIFNpY2lseSwgYW5kIHdpc2hpbmcgdG8gY3V0IG9mZiBhdCBvbmNlIGluIHRoZSBtaW5kcyBvZiBoaXMgb2ZmaWNlcnMgYWxsIGhvcGUgb2YgZGVsYXlpbmcgdGhlcmUgYW5kIHdhc3RpbmcgdGltZSwgaGUgcGl0Y2hlZCBoaXMgb3duIHRlbnQgb24gdGhlIHNlYS1iZWFjaC4gV2hlbiBhIGZhdm91cmluZyB3aW5kIGFyb3NlLCBoZSBlbWJhcmtlZCBhbmQgcHV0IHRvIHNlYSB3aXRoIHRocmVlIHRob3VzYW5kIGluZmFudHJ5IGFuZCBhIGZldyBob3JzZW1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYWZ0ZXIgbGFuZGluZyB0aGVzZSB1bm9ic2VydmVkLCBoZSBwdXQgdG8gc2VhIGFnYWluLCBiZWluZyBmdWxsIG9mIGZlYXJzIGZvciB0aGUgbGFyZ2VyIHBhcnQgb2YgaGlzIGZvcmNlLCBhbmQgbWVldGluZyB0aGVtIGFmdGVyIHRoZXkgd2VyZSBhbHJlYWR5IGF0IHNlYSwgaGUgY29uZHVjdGVkIGFsbCBpbnRvIGNhbXAuPC9wPgogICAgICAgICA8cD5PbiBsZWFybmluZyB0aGF0IHRoZSBlbmVteSB3ZXJlIGVtYm9sZGVuZWQgYnkgYW4gYW5jaWVudCBvcmFjbGUgdG8gdGhlIGVmZmVjdCB0aGF0IGl0IHdhcyBhbHdheXMgdGhlIHByZXJvZ2F0aXZlIG9mIHRoZSBmYW1pbHkgb2YgdGhlIFNjaXBpb3MgdG8gY29ucXVlciBpbiBBZnJpY2EsIGhlIGVpdGhlciBmbG91dGVkIGluIHBsZWFzYW50cnkgdGhlIFNjaXBpbyB3aG8gY29tbWFuZGVkIHRoZSBlbmVteSwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+b3IgZWxzZSB0cmllZCBpbiBnb29kIGVhcm5lc3QgdG8gYXBwcm9wcmlhdGUgdG8gaGltc2VsZiB0aGUgb21lbiwgaXQgaXMgaGFyZCB0byBzYXkgd2hpY2guIEhlIGhhZCB1bmRlciBoaW0sIG5hbWVseSwgYSBtYW4gd2hvIG90aGVyd2lzZSB3YXMgYSBjb250ZW1wdGlibGUgbm9ib2R5LCBidXQgYmVsb25nZWQgdG8gdGhlIGZhbWlseSBvZiB0aGUgQWZyaWNhbmksIGFuZCB3YXMgY2FsbGVkIFNjaXBpbyBTYWxsdXN0aW8uIFRoaXMgbWFuIENhZXNhciBwdXQgaW4gdGhlIGZvcmVmcm9udCBvZiBoaXMgYmF0dGxlcyBhcyBpZiBjb21tYW5kZXIgb2YgdGhlIGFybXksIGJlaW5nIGNvbXBlbGxlZCB0byBhdHRhY2sgdGhlIGVuZW15IGZyZXF1ZW50bHkgYW5kIHRvIGZvcmNlIHRoZSBmaWdodGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXJlIHdhcyBuZWl0aGVyIHN1ZmZpY2llbnQgZm9vZCBmb3IgaGlzIG1lbiBub3IgZm9kZGVyIGZvciBoaXMgYmVhc3RzIG9mIGJ1cmRlbiwgbmF5LCB0aGV5IHdlcmUgZm9yY2VkIHRvIGZlZWQgdGhlaXIgaG9yc2VzIG9uIHNlYS13ZWVkLCB3aGljaCB0aGV5IHdhc2hlZCBmcmVlIG9mIGl0cyBzYWx0IGFuZCBtaXhlZCB3aXRoIGEgbGl0dGxlIGdyYXNzIHRvIHN3ZWV0ZW4gaXQuIEZvciB0aGUgTnVtaWRpYW5zIHNob3dlZCB0aGVtc2VsdmVzIGV2ZXJ5d2hlcmUgaW4gZ3JlYXQgbnVtYmVycyBhbmQgc3BlZWR5LCBhbmQgY29udHJvbGxlZCB0aGUgY291bnRyeS4gSW5kZWVkLCB3aGlsZSBDYWVzYXIncyBob3JzZW1lbiB3ZXJlIG9uY2Ugb2ZmIGR1dHkgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+KGEgTGlieWFuIHdhcyBzaG93aW5nIHRoZW0gaG93IGhlIGNvdWxkIGRhbmNlIGFuZCBwbGF5IHRoZSBmbHV0ZSBhdCB0aGUgc2FtZSB0aW1lIGluIGFuIGFzdG9uaXNoaW5nIG1hbm5lciwgYW5kIHRoZXkgaGFkIGNvbW1pdHRlZCB0aGVpciBob3JzZXMgdG8gdGhlIHNsYXZlcyBhbmQgd2VyZSBzaXR0aW5nIGRlbGlnaHRlZCBvbiB0aGUgZ3JvdW5kKSwgdGhlIGVuZW15IHN1ZGRlbmx5IHN1cnJvdW5kZWQgYW5kIGF0dGFja2VkIHRoZW0sIGtpbGxlZCBzb21lIG9mIHRoZW0sIGFuZCBmb2xsb3dlZCBoYXJkIHVwb24gdGhlIGhlZWxzIG9mIHRoZSByZXN0IGFzIHRoZXkgd2VyZSBkcml2ZW4gaGVhZGxvbmcgaW50byBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaWYgQ2Flc2FyIGhpbXNlbGYgYW5kIHdpdGggaGltIEFzaW5pdXMgUG9sbGlvLCBoYWQgbm90IGNvbWUgZnJvbSB0aGUgcmFtcGFydHMgdG8gdGhlaXIgYWlkIGFuZCBjaGVja2VkIHRoZWlyIGZsaWdodCwgdGhlIHdhciB3b3VsZCBoYXZlIGJlZW4gYXQgYW4gZW5kLiBPbiBvbmUgb2NjYXNpb24sIHRvbywgaW4gYW5vdGhlciBiYXR0bGUsIHRoZSBlbmVteSBnb3QgdGhlIGFkdmFudGFnZSBpbiB0aGUgZW5jb3VudGVyLCBhbmQgaGVyZSBpdCBpcyBzYWlkIHRoYXQgQ2Flc2FyIHNlaXplZCBieSB0aGUgbmVjayB0aGUgZnVnaXRpdmUgc3RhbmRhcmQtYmVhcmVyLCBmYWNlZCBoaW0gYWJvdXQsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvbmRlciBpcyB0aGUgZW5lbXkuPC9xPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciBTY2lwaW8gd2FzIGVuY291cmFnZWQgYnkgdGhlc2UgYWR2YW50YWdlcyB0byBoYXphcmQgYSBkZWNpc2l2ZSBiYXR0bGU6IHNvLCBsZWF2aW5nIEFmcmFuaXVzIGFuZCBKdWJhIGVuY2FtcGVkIHNlcGFyYXRlbHkgYXQgYSBzaG9ydCBkaXN0YW5jZSBhcGFydCwgaGUgaGltc2VsZiBiZWdhbiBmb3J0aWZ5aW5nIGEgY2FtcCBiZXlvbmQgYSBsYWtlIG5lYXIgdGhlIGNpdHkgb2YgVGhhcHN1cywgdGhhdCBpdCBtaWdodCBzZXJ2ZSB0aGUgd2hvbGUgYXJteSBhcyBhIHBsYWNlIGZyb20gd2hpY2ggdG8gc2FsbHkgb3V0IHRvIHRoZSBiYXR0bGUsIGFuZCBhcyBhIHBsYWNlIG9mIHJlZnVnZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIGhlIHdhcyBidXN5IHdpdGggdGhpcyBwcm9qZWN0LCBDYWVzYXIgbWFkZSBoaXMgd2F5IHdpdGggaW5jb25jZWl2YWJsZSBzcGVlZCB0aHJvdWdoIHdvb2R5IHJlZ2lvbnMgd2hpY2ggYWZmb3JkZWQgdW5rbm93biBhY2Nlc3MgdG8gdGhlIHNwb3QsIG91dGZsYW5rZWQgc29tZSBvZiB0aGUgZW5lbXksIGFuZCBhdHRhY2tlZCBvdGhlcnMgaW4gZnJvbnQuIFRoZW4sIGFmdGVyIHJvdXRpbmcgdGhlc2UsIGhlIHRvb2sgYWR2YW50YWdlIG9mIHRoZSBmYXZvdXJhYmxlIGluc3RhbnQgYW5kIG9mIHRoZSBpbXBldHVzIG9mIGZvcnR1bmUsIGFuZCB0aGVyZWJ5IGNhcHR1cmVkIHRoZSBjYW1wIG9mIEFmcmFuaXVzIGF0IHRoZSBmaXJzdCBvbnNldCwgYW5kIGF0IHRoZSBmaXJzdCBvbnNldCBzYWNrZWQgdGhlIGNhbXAgb2YgdGhlIE51bWlkaWFucywgZnJvbSB3aGljaCBKdWJhIGZsZWQuIFRodXMgaW4gYSBicmllZiBwb3J0aW9uIG9mIG9uZSBkYXkgaGUgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiB0aHJlZSBjYW1wcyBhbmQgc2xldyBmaWZ0eSB0aG91c2FuZCBvZiB0aGUgZW5lbXksIHdpdGhvdXQgbG9zaW5nIGFzIG1hbnkgYXMgZmlmdHkgb2YgaGlzIG93biBtZW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQXByaWwgb2YgNDYgQi5DLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIGFjY291bnQgd2hpY2ggc29tZSBnaXZlIG9mIHRoZSBiYXR0bGU7IG90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgQ2Flc2FyIGhpbXNlbGYgd2FzIG5vdCBpbiB0aGUgYWN0aW9uLCBidXQgdGhhdCwgYXMgaGUgd2FzIG1hcnNoYWxsaW5nIGFuZCBhcnJheWluZyBoaXMgYXJteSwgaGlzIHVzdWFsIHNpY2tuZXNzIGxhaWQgaG9sZCBvZiBoaW0sIGFuZCBoZSwgYXQgb25jZSBhd2FyZSB0aGF0IGl0IHdhcyBiZWdpbm5pbmcsIGJlZm9yZSBoaXMgYWxyZWFkeSB3YXZlcmluZyBzZW5zZXMgd2VyZSBhbHRvZ2V0aGVyIGNvbmZvdW5kZWQgYW5kIG92ZXJwb3dlcmVkIGJ5IHRoZSBtYWxhZHksIHdhcyBjYXJyaWVkIHRvIGEgbmVpZ2hib3VyaW5nIHRvd2VyLCB3aGVyZSBoZSBzdGF5ZWQgcXVpZXRseSBkdXJpbmcgdGhlIGJhdHRsZS4gT2YgdGhlIG1lbiBvZiBjb25zdWxhciBhbmQgcHJhZXRvcmlhbCByYW5rIHdobyBlc2NhcGVkIGZyb20gdGhlIGJhdHRsZSwgc29tZSBzbGV3IHRoZW1zZWx2ZXMgYXQgdGhlIG1vbWVudCBvZiB0aGVpciBjYXB0dXJlLCBhbmQgb3RoZXJzIHdlcmUgcHV0IHRvIGRlYXRoIGJ5IENhZXNhciBhZnRlciBjYXB0dXJlLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNTQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CZWluZyBlYWdlciB0byB0YWtlIENhdG8gYWxpdmUsIENhZXNhciBoYXN0ZW5lZCB0b3dhcmRzIFV0aWNhLCBmb3IgQ2F0byB3YXMgZ3VhcmRpbmcgdGhhdCBjaXR5LCBhbmQgdG9vayBubyBwYXJ0IGluIHRoZSBiYXR0bGUuIEJ1dCBoZSBsZWFybmVkIHRoYXQgQ2F0byBoYWQgbWFkZSBhd2F5IHdpdGggaGltc2VsZjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDY1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byBNaW5vciA8L3RpdGxlPmx4djwvYmlibD4uPC9ub3RlPiBhbmQgaGUgd2FzIGNsZWFybHkgYW5ub3llZCwgdGhvdWdoIGZvciB3aGF0IHJlYXNvbiBpcyB1bmNlcnRhaW4uIEF0IGFueSByYXRlLCBoZSBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhdG8sIEkgYmVncnVkZ2UgdGhlZSB0aHkgZGVhdGg7IGZvciB0aG91IGRpZHN0IGJlZ3J1ZGdlIG1lIHRoZSBwcmVzZXJ2YXRpb24gb2YgdGh5IGxpZmUuPC9xPiBOb3csIHRoZSB0cmVhdGlzZSB3aGljaCBDYWVzYXIgYWZ0ZXJ3YXJkcyB3cm90ZSBhZ2FpbnN0IENhdG8gd2hlbiBoZSB3YXMgZGVhZCwgZG9lcyBub3Qgc2VlbSB0byBwcm92ZSB0aGF0IGhlIHdhcyBpbiBhIGdlbnRsZSBvciByZWNvbmNpbGFibGUgbW9vZC4gRm9yIGhvdyBjb3VsZCBoZSBoYXZlIHNwYXJlZCBDYXRvIGFsaXZlLCB3aGVuIGhlIHBvdXJlZCBvdXQgYWdhaW5zdCBoaW0gYWZ0ZXIgZGVhdGggc28gZ3JlYXQgYSBjdXAgb2Ygd3JhdGg/IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgZnJvbSBoaXMgY29uc2lkZXJhdGUgdHJlYXRtZW50IG9mIENpY2VybyBhbmQgQnJ1dHVzIGFuZCB0aG91c2FuZHMgbW9yZSB3aG8gaGFkIGZvdWdodCBhZ2FpbnN0IGhpbSwgaXQgaXMgaW5mZXJyZWQgdGhhdCBldmVuIHRoaXMgdHJlYXRpc2Ugd2FzIG5vdCBjb21wb3NlZCBvdXQgb2YgaGF0cmVkLCBidXQgZnJvbSBwb2xpdGljYWwgYW1iaXRpb24sIGZvciByZWFzb25zIHdoaWNoIGZvbGxvdy4gQ2ljZXJvIGhhZCB3cml0dGVuIGFuIGVuY29taXVtIG9uIENhdG8gd2hpY2ggaGUgZW50aXRsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYXRvPC9xPjsgYW5kIHRoZSBkaXNjb3Vyc2Ugd2FzIGVhZ2VybHkgcmVhZCBieSBtYW55LCBhcyB3YXMgbmF0dXJhbCwgc2luY2UgaXQgd2FzIGNvbXBvc2VkIGJ5IHRoZSBhYmxlc3Qgb2Ygb3JhdG9ycyBvbiB0aGUgbm9ibGVzdCBvZiB0aGVtZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYW5ub3llZCBDYWVzYXIsIHdobyB0aG91Z2h0IHRoYXQgQ2ljZXJvJ3MgcHJhaXNlIG9mIHRoZSBkZWFkIENhdG8gd2FzIGEgZGVudW5jaWF0aW9uIG9mIENhZXNhciBoaW1zZWxmLiBBY2NvcmRpbmdseSwgaGUgd3JvdGUgYSB0cmVhdGlzZSBpbiB3aGljaCBoZSBnb3QgdG9nZXRoZXIgY291bnRsZXNzIGNoYXJnZXMgYWdhaW5zdCBDYXRvOyBhbmQgdGhlIHdvcmsgaXMgZW50aXRsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BbnRpLUNhdG88L3E+IEJvdGggdHJlYXRpc2VzIGhhdmUgbWFueSBlYWdlciByZWFkZXJzLCBhcyB3ZWxsIG9uIGFjY291bnQgb2YgQ2Flc2FyIGFzIG9mIENhdG8uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0byByZXN1bWUsIHdoZW4gQ2Flc2FyIGNhbWUgYmFjayB0byBSb21lIGZyb20gQWZyaWNhLCB0byBiZWdpbiB3aXRoLCBoZSBtYWRlIGEgYm9hc3RmdWwgc3BlZWNoIHRvIHRoZSBwZW9wbGUgY29uY2VybmluZyBoaXMgdmljdG9yeSwgYXNzZXJ0aW5nIHRoYXQgaGUgaGFkIHN1YmR1ZWQgYSBjb3VudHJ5IGxhcmdlIGVub3VnaCB0byBmdXJuaXNoIGFubnVhbGx5IGZvciB0aGUgcHVibGljIHRyZWFzdXJ5IHR3byBodW5kcmVkIHRob3VzYW5kIEF0dGljIGJ1c2hlbHMgb2YgZ3JhaW4sIGFuZCB0aHJlZSBtaWxsaW9uIHBvdW5kcyBvZiBvbGl2ZSBvaWwuIE5leHQsIGhlIGNlbGVicmF0ZWQgdHJpdW1waHMsIGFuIEVneXB0aWFuLCBhIFBvbnRpYywgYW5kIGFuIEFmcmljYW4sIHRoZSBsYXN0IG5vdCBmb3IgaGlzIHZpY3Rvcnkgb3ZlciBTY2lwaW8sIGJ1dCBvc3RlbnNpYmx5IG92ZXIgSnViYSB0aGUga2luZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhpcyBvY2Nhc2lvbiwgdG9vLCBKdWJhLCBhIHNvbiBvZiB0aGUga2luZywgYSBtZXJlIGluZmFudCwgd2FzIGNhcnJpZWQgYWxvbmcgaW4gdGhlIHRyaXVtcGhhbCBwcm9jZXNzaW9uLCB0aGUgbW9zdCBmb3J0dW5hdGUgY2FwdGl2ZSBldmVyIHRha2VuLCBzaW5jZSBmcm9tIGJlaW5nIGEgQmFyYmFyaWFuIGFuZCBhIE51bWlkaWFuLCBoZSBjYW1lIHRvIGJlIGVucm9sbGVkIGFtb25nIHRoZSBtb3N0IGxlYXJuZWQgaGlzdG9yaWFucyBvZiBIZWxsYXMuIEFmdGVyIHRoZSB0cml1bXBocywgQ2Flc2FyIGdhdmUgaGlzIHNvbGRpZXJzIGxhcmdlIGdpZnRzIGFuZCBlbnRlcnRhaW5lZCB0aGUgcGVvcGxlIHdpdGggYmFucXVldHMgYW5kIHNwZWN0YWNsZXMsIGZlYXN0aW5nIHRoZW0gYWxsIGF0IG9uZSB0aW1lIG9uIHR3ZW50eSB0aG91c2FuZCBkaW5pbmctY291Y2hlcywgYW5kIGZ1cm5pc2hpbmcgc3BlY3RhY2xlcyBvZiBnbGFkaWF0b3JpYWwgYW5kIG5hdmFsIGNvbWJhdHMgaW4gaG9ub3VyIG9mIGhpcyBkYXVnaHRlciBKdWxpYSwgbG9uZyBzaW5jZSBkZWFkLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgc3BlY3RhY2xlcywgYSBjZW5zdXMgb2YgdGhlIHBlb3BsZSB3YXMgdGFrZW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gNDEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gNDE8L2JpYmw+KSwgdGhpcyB3YXMgbm90IGEgY2Vuc3VzIG9mIGFsbCB0aGUgcGVvcGxlLCBidXQgYSByZXZpc2lvbiBvZiB0aGUgbnVtYmVyIG9mIHBvb3JlciBjaXRpemVucyBlbnRpdGxlZCB0byByZWNlaXZlIGFsbG93YW5jZXMgb2YgZ3JhaW4gZnJvbSB0aGUgc3RhdGUuPC9ub3RlPiBhbmQgaW5zdGVhZCBvZiB0aGUgdGhyZWUgaHVuZHJlZCBhbmQgdHdlbnR5IHRob3VzYW5kIG9mIHRoZSBwcmVjZWRpbmcgbGlzdHMgdGhlcmUgd2VyZSBlbnJvbGxlZCBvbmx5IG9uZSBodW5kcmVkIGFuZCBmaWZ0eSB0aG91c2FuZC4gU28gZ3JlYXQgd2FzIHRoZSBjYWxhbWl0eSB3aGljaCB0aGUgY2l2aWwgd2FycyBoYWQgd3JvdWdodCwgYW5kIHNvIGxhcmdlIGEgcG9ydGlvbiBvZiB0aGUgcGVvcGxlIG9mIFJvbWUgaGFkIHRoZXkgY29uc3VtZWQgYXdheSwgdG8gc2F5IG5vdGhpbmcgb2YgdGhlIG1pc2ZvcnR1bmVzIHRoYXQgcG9zc2Vzc2VkIHRoZSByZXN0IG9mIEl0YWx5IGFuZCB0aGUgcHJvdmluY2VzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGVzZSBtYXR0ZXJzIGhhZCBiZWVuIGZpbmlzaGVkIGFuZCBoZSBoYWQgYmVlbiBkZWNsYXJlZCBjb25zdWwgZm9yIHRoZSBmb3VydGggdGltZSwgQ2Flc2FyIG1hZGUgYW4gZXhwZWRpdGlvbiBpbnRvIFNwYWluIGFnYWluc3QgdGhlIHNvbnMgb2YgUG9tcGV5LiBUaGVzZSB3ZXJlIHN0aWxsIHlvdW5nLCBidXQgaGFkIGNvbGxlY3RlZCBhbiBhcm15IG9mIGFtYXppbmcgbnVtYmVycyBhbmQgZGlzcGxheWVkIGEgYm9sZG5lc3Mgd2hpY2gganVzdGlmaWVkIHRoZWlyIGNsYWltcyB0byBsZWFkZXJzaGlwLCBzbyB0aGF0IHRoZXkgYmVzZXQgQ2Flc2FyIHdpdGggdGhlIGdyZWF0ZXN0IHBlcmlsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZ3JlYXQgYmF0dGxlIHdhcyBqb2luZWQgbmVhciB0aGUgY2l0eSBvZiBNdW5kYSwgYW5kIGhlcmUgQ2Flc2FyLCBzZWVpbmcgaGlzIG93biBtZW4gaGFyZCBwcmVzc2VkIGFuZCBtYWtpbmcgYSBmZWVibGUgcmVzaXN0YW5jZSwgYXNrZWQgaW4gYSBsb3VkIHZvaWNlIGFzIGhlIHJhbiB0aHJvdWdoIHRoZSBhcm1lZCByYW5rcyB3aGV0aGVyIHRoZXkgZmVsdCBubyBzaGFtZSB0byB0YWtlIGhpbSBhbmQgcHV0IGhpbSBpbiB0aGUgaGFuZHMgb2YgdGhvc2UgYm95cy4gV2l0aCBkaWZmaWN1bHR5IGFuZCBhZnRlciBtdWNoIHN0cmVudW91cyBlZmZvcnQgaGUgcmVwdWxzZWQgdGhlIGVuZW15IGFuZCBzbGV3IG92ZXIgdGhpcnR5IHRob3VzYW5kIG9mIHRoZW0sIGJ1dCBoZSBsb3N0IG9uZSB0aG91c2FuZCBvZiBoaXMgb3duIG1lbiwgYW5kIHRob3NlIHRoZSB2ZXJ5IGJlc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBnb2luZyBhd2F5IGFmdGVyIHRoZSBiYXR0bGUgaGUgc2FpZCB0byBoaXMgZnJpZW5kcyB0aGF0IGhlIGhhZCBvZnRlbiBzdHJpdmVuIGZvciB2aWN0b3J5LCBidXQgbm93IGZpcnN0IGZvciBoaXMgbGlmZS4gSGUgZm91Z2h0IHRoaXMgdmljdG9yaW91cyBiYXR0bGUgb24gdGhlIGRheSBvZiB0aGUgZmVzdGl2YWwgb2YgQmFjY2h1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYXJjaCAxNywgNDUgQi5DLjwvbm90ZT4gb24gd2hpY2ggZGF5IGFsc28gaXQgaXMgc2FpZCB0aGF0IFBvbXBleSB0aGUgR3JlYXQgaGFkIGdvbmUgZm9ydGggdG8gdGhlIHdhcjsgYSBwZXJpb2Qgb2YgZm91ciB5ZWFycyBpbnRlcnZlbmVkLiBBcyBmb3IgUG9tcGV5J3Mgc29ucywgdGhlIHlvdW5nZXIgbWFkZSBoaXMgZXNjYXBlLCBidXQgYWZ0ZXIgYSBmZXcgZGF5cyB0aGUgaGVhZCBvZiB0aGUgZWxkZXIgd2FzIGJyb3VnaHQgaW4gYnkgRGVpZGl1cy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgdGhlIGxhc3Qgd2FyIHRoYXQgQ2Flc2FyIHdhZ2VkOyBhbmQgdGhlIHRyaXVtcGggdGhhdCB3YXMgY2VsZWJyYXRlZCBmb3IgaXQgdmV4ZWQgdGhlIFJvbWFucyBhcyBub3RoaW5nIGVsc2UgaGFkIGRvbmUuIEZvciBpdCBjb21tZW1vcmF0ZWQgbm8gdmljdG9yeSBvdmVyIGZvcmVpZ24gY29tbWFuZGVycyBvciBiYXJiYXJpYW4ga2luZ3MsIGJ1dCB0aGUgdXR0ZXIgYW5uaWhpbGF0aW9uIG9mIHRoZSBzb25zIGFuZCB0aGUgZmFtaWx5IG9mIHRoZSBtaWdodGllc3Qgb2YgdGhlIFJvbWFucywgd2hvIGhhZCBmYWxsZW4gdXBvbiBtaXNmb3J0dW5lOyBhbmQgaXQgd2FzIG5vdCBtZWV0IGZvciBDYWVzYXIgdG8gY2VsZWJyYXRlIGEgdHJpdW1waCBmb3IgdGhlIGNhbGFtaXRpZXMgb2YgaGlzIGNvdW50cnksIHByaWRpbmcgaGltc2VsZiB1cG9uIGFjdGlvbnMgd2hpY2ggaGFkIG5vIGRlZmVuY2UgYmVmb3JlIGdvZHMgb3IgbWVuIGV4Y2VwdCB0aGF0IHRoZXkgaGFkIGJlZW4gZG9uZSB1bmRlciBuZWNlc3NpdHksIGFuZCB0aGF0IHRvbyBhbHRob3VnaCBwcmV2aW91c2x5IGhlIGhhZCBzZW50IG5laXRoZXIgbWVzc2VuZ2VyIG5vciBsZXR0ZXJzIHRvIGFubm91bmNlIHRvIHRoZSBwZW9wbGUgYSB2aWN0b3J5IGluIHRoZSBjaXZpbCB3YXJzLCBidXQgaGFkIHNjcnVwdWxvdXNseSBwdXQgZnJvbSBoaW0gdGhlIGZhbWUgYXJpc2luZyB0aGVyZWZyb20uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBSb21hbnMgZ2F2ZSB3YXkgYmVmb3JlIHRoZSBnb29kIGZvcnR1bmUgb2YgdGhlIG1hbiBhbmQgYWNjZXB0ZWQgdGhlIGJpdCwgYW5kIHJlZ2FyZGluZyB0aGUgbW9uYXJjaHkgYXMgYSByZXNwaXRlIGZyb20gdGhlIGV2aWxzIG9mIHRoZSBjaXZpbCB3YXJzLCB0aGV5IGFwcG9pbnRlZCBoaW0gZGljdGF0b3IgZm9yIGxpZmUuIFRoaXMgd2FzIGNvbmZlc3NlZGx5IGEgdHlyYW5ueSwgc2luY2UgdGhlIG1vbmFyY2h5LCBiZXNpZGVzIHRoZSBlbGVtZW50IG9mIGlycmVzcG9uc2liaWxpdHksIG5vdyB0b29rIG9uIHRoYXQgb2YgcGVybWFuZW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIENpY2VybyB3aG8gcHJvcG9zZWQgdGhlIGZpcnN0IGhvbm91cnMgZm9yIGhpbSBpbiB0aGUgc2VuYXRlLCBhbmQgdGhlaXIgbWFnbml0dWRlIHdhcywgYWZ0ZXIgYWxsLCBub3QgdG9vIGdyZWF0IGZvciBhIG1hbjsgYnV0IG90aGVycyBhZGRlZCBleGNlc3NpdmUgaG9ub3VycyBhbmQgdmllZCB3aXRoIG9uZSBhbm90aGVyIGluIHByb3Bvc2luZyB0aGVtLCB0aHVzIHJlbmRlcmluZyBDYWVzYXIgb2Rpb3VzIGFuZCBvYm5veGlvdXMgZXZlbiB0byB0aGUgbWlsZGVzdCBjaXRpemVucyBiZWNhdXNlIG9mIHRoZSBwcmV0ZW5zaW9uIGFuZCBleHRyYXZhZ2FuY2Ugb2Ygd2hhdCB3YXMgZGVjcmVlZCBmb3IgaGltLiBJdCBpcyB0aG91Z2h0LCB0b28sIHRoYXQgdGhlIGVuZW1pZXMgb2YgQ2Flc2FyIG5vIGxlc3MgdGhhbiBoaXMgZmxhdHRlcmVycyBoZWxwZWQgdG8gZm9yY2UgdGhlc2UgbWVhc3VyZXMgdGhyb3VnaCwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+aW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IGhhdmUgYXMgbWFueSBwcmV0ZXh0cyBhcyBwb3NzaWJsZSBhZ2FpbnN0IGhpbSBhbmQgbWlnaHQgYmUgdGhvdWdodCB0byBoYXZlIHRoZSBiZXN0IHJlYXNvbnMgZm9yIGF0dGVtcHRpbmcgaGlzIGxpZmUuIEZvciBpbiBhbGwgb3RoZXIgd2F5cywgYXQgbGVhc3QsIGFmdGVyIHRoZSBjaXZpbCB3YXJzIHdlcmUgb3ZlciwgaGUgc2hvd2VkIGhpbXNlbGYgYmxhbWVsZXNzOyBhbmQgY2VydGFpbmx5IGl0IGlzIHRob3VnaHQgbm90IGluYXBwcm9wcmlhdGUgdGhhdCB0aGUgdGVtcGxlIG9mIENsZW1lbmN5IHdhcyBkZWNyZWVkIGFzIGEgdGhhbmstb2ZmZXJpbmcgaW4gdmlldyBvZiBoaXMgbWlsZG5lc3MuIEZvciBoZSBwYXJkb25lZCBtYW55IG9mIHRob3NlIHdobyBoYWQgZm91Z2h0IGFnYWluc3QgaGltLCBhbmQgdG8gc29tZSBoZSBldmVuIGdhdmUgaG9ub3VycyBhbmQgb2ZmaWNlcyBiZXNpZGVzIGFzIHRvIEJydXR1cyBhbmQsIENhc3NpdXMsIGJvdGggb2Ygd2hvbSB3ZXJlIG5vdyBwcmFldG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHN0YXR1ZXMgb2YgUG9tcGV5LCB0b28sIHdoaWNoIGhhZCBiZWVuIHRocm93biBkb3duLCBoZSB3b3VsZCBub3Qgc3VmZmVyIHRvIHJlbWFpbiBzbywgYnV0IHNldCB0aGVtIHVwIGFnYWluLCBhdCB3aGljaCBDaWNlcm8gc2FpZCB0aGF0IGluIHNldHRpbmcgdXAgUG9tcGV5J3Mgc3RhdHVlcyBDYWVzYXIgZmlybWx5IGZpeGVkIGhpcyBvd24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDQwLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2ljZXJvPC90aXRsZT4sIHhsLiA0PC9iaWJsPi48L25vdGU+IFdoZW4gaGlzIGZyaWVuZHMgdGhvdWdodCBpdCBiZXN0IHRoYXQgaGUgc2hvdWxkIGhhdmUgYSBib2R5LWd1YXJkLCBhbmQgbWFueSBvZiB0aGVtIHZvbHVudGVlcmVkIGZvciB0aGlzIHNlcnZpY2UsIGhlIHdvdWxkIG5vdCBjb25zZW50LCBzYXlpbmcgdGhhdCBpdCB3YXMgYmV0dGVyIHRvIGRpZSBvbmNlIGZvciBhbGwgdGhhbiB0byBiZSBhbHdheXMgZXhwZWN0aW5nIGRlYXRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gdGhlIGVmZm9ydCB0byBzdXJyb3VuZCBoaW1zZWxmIHdpdGggbWVuJ3MgZ29vZCB3aWxsIGFzIHRoZSBmYWlyZXN0IGFuZCBhdCB0aGUgc2FtZSB0aW1lIHRoZSBzZWN1cmVzdCBwcm90ZWN0aW9uLCBoZSBhZ2FpbiBjb3VydGVkIHRoZSBwZW9wbGUgd2l0aCBiYW5xdWV0cyBhbmQgZGlzdHJpYnV0aW9ucyBvZiBncmFpbiwgYW5kIGhpcyBzb2xkaWVycyB3aXRoIG5ld2x5IHBsYW50ZWQgY29sb25pZXMsIHRoZSBtb3N0IGNvbnNwaWN1b3VzIG9mIHdoaWNoIHdlcmUgQ2FydGhhZ2UgYW5kIENvcmludGguIFRoZSBlYXJsaWVyIGNhcHR1cmUgb2YgYm90aCB0aGVzZSBjaXRpZXMsIGFzIHdlbGwgYXMgdGhlaXIgcHJlc2VudCByZXN0b3JhdGlvbiwgY2hhbmNlZCB0byBmYWxsIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Cb3RoIGNpdGllcyB3ZXJlIGNhcHR1cmVkIGluIDE0NiBCLkMuLCBhbmQgYm90aCB3ZXJlIHJlc3RvcmVkIGluIDQ0IEIuQy48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlIG5vYmxlcywgdG8gc29tZSBvZiB0aGVtIGhlIHByb21pc2VkIGNvbnN1bHNoaXBzIGFuZCBwcmFldG9yc2hpcHMgaW4gdGhlIGZ1dHVyZSwgb3RoZXJzIGhlIGFwcGVhc2VkIHdpdGggc3VuZHJ5IG90aGVyIHBvd2VycyBhbmQgaG9ub3VycywgYW5kIGluIGFsbCBoZSBpbXBsYW50ZWQgaG9wZXMsIHNpbmNlIGhlIGFyZGVudGx5IGRlc2lyZWQgdG8gcnVsZSBvdmVyIHdpbGxpbmcgc3ViamVjdHMuIFRoZXJlZm9yZSwgd2hlbiBNYXhpbXVzIHRoZSBjb25zdWwgZGllZCwgaGUgYXBwb2ludGVkIENhbmluaXVzIFJldmlsaXVzIGNvbnN1bCBmb3IgdGhlIG9uZSBkYXkgc3RpbGwgcmVtYWluaW5nIG9mIHRoZSB0ZXJtIG9mIG9mZmljZS4gVG8gaGltLCBhcyB3ZSBhcmUgdG9sZCwgbWFueSB3ZXJlIGdvaW5nIHdpdGggY29uZ3JhdHVsYXRpb25zIGFuZCBvZmZlcnMgb2YgZXNjb3J0LCB3aGVyZXVwb24gQ2ljZXJvIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHVzIG1ha2UgaGFzdGUsIG9yIGVsc2UgdGhlIG1hbidzIGNvbnN1bHNoaXAgd2lsbCBoYXZlIGV4cGlyZWQuPC9xPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyJ3MgbWFueSBzdWNjZXNzZXMsIGhvd2V2ZXIsIGRpZCBub3QgZGl2ZXJ0IGhpcyBuYXR1cmFsIHNwaXJpdCBvZiBlbnRlcnByaXNlIGFuZCBhbWJpdGlvbiB0byB0aGUgZW5qb3ltZW50IG9mIHdoYXQgaGUgaGFkIGxhYm9yaW91c2x5IGFjaGlldmVkLCBidXQgc2VydmVkIGFzIGZ1ZWwgYW5kIGluY2VudGl2ZSBmb3IgZnV0dXJlIGFjaGlldmVtZW50cywgYW5kIGJlZ2F0IGluIGhpbSBwbGFucyBmb3IgZ3JlYXRlciBkZWVkcyBhbmQgYSBwYXNzaW9uIGZvciBmcmVzaCBnbG9yeSwgYXMgdGhvdWdoIGhlIGhhZCB1c2VkIHVwIHdoYXQgaGUgYWxyZWFkeSBoYWQuIFdoYXQgaGUgZmVsdCB3YXMgdGhlcmVmb3JlIG5vdGhpbmcgZWxzZSB0aGFuIGVtdWxhdGlvbiBvZiBoaW1zZWxmLCBhcyBpZiBoZSBoYWQgYmVlbiBhbm90aGVyIG1hbiwgYW5kIGEgc29ydCBvZiByaXZhbHJ5IGJldHdlZW4gd2hhdCBoZSBoYWQgZG9uZSBhbmQgd2hhdCBoZSBwdXJwb3NlZCB0byBkby4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIHBsYW5uZWQgYW5kIHByZXBhcmVkIHRvIG1ha2UgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBQYXJ0aGlhbnM7IGFuZCBhZnRlciBzdWJkdWluZyB0aGVzZSBhbmQgbWFyY2hpbmcgYXJvdW5kIHRoZSBFdXhpbmUgYnkgd2F5IG9mIEh5cmNhbmlhLCB0aGUgQ2FzcGlhbiBzZWEsIGFuZCB0aGUgQ2F1Y2FzdXMsIHRvIGludmFkZSBTY3l0aGlhOyBhbmQgYWZ0ZXIgb3ZlcnJ1bm5pbmcgdGhlIGNvdW50cmllcyBib3JkZXJpbmcgb24gR2VybWFueSBhbmQgR2VybWFueSBpdHNlbGYsIHRvIGNvbWUgYmFjayBieSB3YXkgb2YgR2F1bCB0byBJdGFseSwgYW5kIHNvIHRvIGNvbXBsZXRlIHRoaXMgY2lyY3VpdCBvZiBoaXMgZW1waXJlLCB3aGljaCB3b3VsZCB0aGVuIGJlIGJvdW5kZWQgb24gYWxsIHNpZGVzIGJ5IHRoZSBvY2Vhbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RHVyaW5nIHRoaXMgZXhwZWRpdGlvbiwgbW9yZW92ZXIsIGhlIGludGVuZGVkIHRvIGRpZyB0aHJvdWdoIHRoZSBpc3RobXVzIG9mIENvcmludGgsIGFuZCBoYWQgYWxyZWFkeSBwdXQgQW5pZW51cyBpbiBjaGFyZ2Ugb2YgdGhpcyB3b3JrOyBoZSBpbnRlbmRlZCBhbHNvIHRvIGRpdmVydCB0aGUgVGliZXIganVzdCBiZWxvdyB0aGUgY2l0eSBpbnRvIGEgZGVlcCBjaGFubmVsLCBnaXZlIGl0IGEgYmVuZCB0b3dhcmRzIENpcmNlaXVtLCBhbmQgbWFrZSBpdCBlbXB0eSBpbnRvIHRoZSBzZWEgYXQgVGVycmFjaW5hLCB0aHVzIGNvbnRyaXZpbmcgZm9yIG1lcmNoYW50bWVuIGEgc2FmZSBhcyB3ZWxsIGFzIGFuIGVhc3kgcGFzc2FnZSB0byBSb21lOyAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYmVzaWRlcyB0aGlzLCB0byBjb252ZXJ0IHRoZSBtYXJzaGVzIGFib3V0IFBvbWVudGludW0gYW5kIFNldGlhIGludG8gYSBwbGFpbiB3aGljaCBtYW55IHRob3VzYW5kcyBvZiBtZW4gY291bGQgY3VsdGl2YXRlOyBhbmQgZnVydGhlciwgdG8gYnVpbGQgbW9sZXMgd2hpY2ggc2hvdWxkIGJhcnJpY2FkZSB0aGUgc2VhIHdoZXJlIGl0IHdhcyBuZWFyZXN0IHRvIFJvbWUsIHRvIGNsZWFyIGF3YXkgdGhlIGhpZGRlbiBkYW5nZXJzIG9uIHRoZSBzaG9yZSBvZiBPc3RpYSwgYW5kIHRoZW4gY29uc3RydWN0IGhhcmJvdXJzIGFuZCByb2Fkc3RlYWRzIHN1ZmZpY2llbnQgZm9yIHRoZSBncmVhdCBmbGVldHMgdGhhdCB3b3VsZCB2aXNpdCB0aGVtLiBBbmQgYWxsIHRoZXNlIHRoaW5ncyB3ZXJlIGluIHByZXBhcmF0aW9uLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgYWRqdXN0bWVudCBvZiB0aGUgY2FsZW5kYXIsIGhvd2V2ZXIsIGFuZCB0aGUgY29ycmVjdGlvbiBvZiB0aGUgaXJyZWd1bGFyaXR5IGluIHRoZSBjb21wdXRhdGlvbiBvZiB0aW1lLCB3ZXJlIG5vdCBvbmx5IHN0dWRpZWQgc2NpZW50aWZpY2FsbHkgYnkgaGltLCBidXQgYWxzbyBicm91Z2h0IHRvIGNvbXBsZXRpb24sIGFuZCBwcm92ZWQgdG8gYmUgb2YgdGhlIGhpZ2hlc3QgdXRpbGl0eS4gRm9yIG5vdCBvbmx5IGluIHZlcnkgYW5jaWVudCB0aW1lcyB3YXMgdGhlIHJlbGF0aW9uIG9mIHRoZSBsdW5hciB0byB0aGUgc29sYXIgeWVhciBpbiBncmVhdCBjb25mdXNpb24gYW1vbmcgdGhlIFJvbWFucywgc28gdGhhdCB0aGUgc2FjcmlmaWNpYWwgZmVhc3RzIGFuZCBmZXN0aXZhbHMsIGRpdmVyZ2luZyBncmFkdWFsbHksIGF0IGxhc3QgZmVsbCBpbiBvcHBvc2l0ZSBzZWFzb25zIG9mIHRoZSB5ZWFyLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgYWxzbyBhdCB0aGlzIHRpbWUgcGVvcGxlIGdlbmVyYWxseSBoYWQgbm8gd2F5IG9mIGNvbXB1dGluZyB0aGUgYWN0dWFsIHNvbGFyIHllYXI7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXQgdGhpcyB0aW1lIHRoZSBSb21hbiBjYWxlbmRhciB3YXMgbW9yZSB0aGFuIHR3byBtb250aHMgYWhlYWQgb2YgdGhlIHNvbGFyIHllYXIuIENhZXNhcidzIHJlZm9ybSB3ZW50IGludG8gZWZmZWN0IGluIDQ2IEIuQy48L25vdGU+IHRoZSBwcmllc3RzIGFsb25lIGtuZXcgdGhlIHByb3BlciB0aW1lLCBhbmQgd291bGQgc3VkZGVubHkgYW5kIHRvIGV2ZXJ5Ym9keSdzIHN1cnByaXNlIGluc2VydCB0aGUgaW50ZXJjYWxhcnkgbW9udGggY2FsbGVkIE1lcmNlZG9uaXVzLiBOdW1hIHRoZSBraW5nIGlzIHNhaWQgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCB0byBpbnRlcmNhbGF0ZSB0aGlzIG1vbnRoLCB0aHVzIGRldmlzaW5nIGEgc2xpZ2h0IGFuZCBzaG9ydC1saXZlZCByZW1lZHkgZm9yIHRoZSBlcnJvciBpbiByZWdhcmQgdG8gdGhlIHNpZGVyZWFsIGFuZCBzb2xhciBjeWNsZXMsIGFzIEkgaGF2ZSBzYWlkIGluIGhpcyBMaWZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiAxOC4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIHh2aWlpPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXIgbGFpZCB0aGUgcHJvYmxlbSBiZWZvcmUgdGhlIGJlc3QgcGhpbG9zb3BoZXJzIGFuZCBtYXRoZW1hdGljaWFucywgYW5kIG91dCBvZiB0aGUgbWV0aG9kcyBvZiBjb3JyZWN0aW9uIHdoaWNoIHdlcmUgYWxyZWFkeSBhdCBoYW5kIGNvbXBvdW5kZWQgb25lIG9mIGhpcyBvd24gd2hpY2ggd2FzIG1vcmUgYWNjdXJhdGUgdGhhbiBhbnkuIFRoaXMgdGhlIFJvbWFucyB1c2UgZG93biB0byB0aGUgcHJlc2VudCB0aW1lLCBhbmQgYXJlIHRob3VnaHQgdG8gYmUgbGVzcyBpbiBlcnJvciB0aGFuIG90aGVyIHBlb3BsZXMgYXMgcmVnYXJkcyB0aGUgaW5lcXVhbGl0eSBiZXR3ZWVuIHRoZSBsdW5hciBhbmQgc29sYXIgeWVhcnMuIEhvd2V2ZXIsIGV2ZW4gdGhpcyBmdXJuaXNoZWQgb2NjYXNpb24gZm9yIGJsYW1lIHRvIHRob3NlIHdobyBlbnZpZWQgQ2Flc2FyIGFuZCBkaXNsaWtlZCBoaXMgcG93ZXIuIEF0IGFueSByYXRlLCBDaWNlcm8gdGhlIG9yYXRvciwgd2UgYXJlIHRvbGQsIHdoZW4gc29tZSBvbmUgcmVtYXJrZWQgdGhhdCBMeXJhIHdvdWxkIHJpc2Ugb24gdGhlIG1vcnJvdywgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZXMsIGJ5IGRlY3JlZSw8L3E+IGltcGx5aW5nIHRoYXQgbWVuIHdlcmUgY29tcGVsbGVkIHRvIGFjY2VwdCBldmVuIHRoaXMgZGlzcGVuc2F0aW9uLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNjAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG1vc3Qgb3BlbiBhbmQgZGVhZGx5IGhhdHJlZCB0b3dhcmRzIGhpbSB3YXMgcHJvZHVjZWQgYnkgaGlzIHBhc3Npb24gZm9yIHRoZSByb3lhbCBwb3dlci4gRm9yIHRoZSBtdWx0aXR1ZGUgdGhpcyB3YXMgYSBmaXJzdCBjYXVzZSBvZiBoYXRyZWQsIGFuZCBmb3IgdGhvc2Ugd2hvIGhhZCBsb25nIHNtb3RoZXJlZCB0aGVpciBoYXRlLCBhIG1vc3Qgc3BlY2lvdXMgcHJldGV4dCBmb3IgaXQuIEFuZCB5ZXQgdGhvc2Ugd2hvIHdlcmUgYWR2b2NhdGluZyB0aGlzIGhvbm91ciBmb3IgQ2Flc2FyIGFjdHVhbGx5IHNwcmVhZCBhYnJvYWQgYW1vbmcgdGhlIHBlb3BsZSBhIHJlcG9ydCB0aGF0IGZyb20gdGhlIFNpYnlsbGluZSBib29rcyBpdCBhcHBlYXJlZCB0aGF0IFBhcnRoaWEgY291bGQgYmUgdGFrZW4gaWYgdGhlIFJvbWFucyB3ZW50IHVwIGFnYWluc3QgaXQgd2l0aCBhIGtpbmcsIGJ1dCBvdGhlcndpc2UgY291bGQgbm90IGJlIGFzc2FpbGVkOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgYXMgQ2Flc2FyIHdhcyBjb21pbmcgZG93biBmcm9tIEFsYmEgaW50byB0aGUgY2l0eSB0aGV5IHZlbnR1cmVkIHRvIGhhaWwgaGltIGFzIGtpbmcuIEJ1dCBhdCB0aGlzIHRoZSBwZW9wbGUgd2VyZSBjb25mb3VuZGVkLCBhbmQgQ2Flc2FyLCBkaXN0dXJiZWQgaW4gbWluZCwgc2FpZCB0aGF0IGhpcyBuYW1lIHdhcyBub3QgS2luZywgYnV0IENhZXNhciwgYW5kIHNlZWluZyB0aGF0IGhpcyB3b3JkcyBwcm9kdWNlZCBhbiB1bml2ZXJzYWwgc2lsZW5jZSwgaGUgcGFzc2VkIG9uIHdpdGggbm8gdmVyeSBjaGVlcmZ1bCBvciBjb250ZW50ZWQgbG9va3MuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhZnRlciBzdW5kcnkgZXh0cmF2YWdhbnQgaG9ub3VycyBoYWQgYmVlbiB2b3RlZCBoaW0gaW4gdGhlIHNlbmF0ZSwgaXQgY2hhbmNlZCB0aGF0IGhlIHdhcyBzaXR0aW5nIGFib3ZlIHRoZSByb3N0cmEsIGFuZCBhcyB0aGUgcHJhZXRvcnMgYW5kIGNvbnN1bHMgZHJldyBuZWFyLCB3aXRoIHRoZSB3aG9sZSBzZW5hdGUgZm9sbG93aW5nIHRoZW0sIGhlIGRpZCBub3QgcmlzZSB0byByZWNlaXZlIHRoZW0sIGJ1dCBhcyBpZiBoZSB3ZXJlIGRlYWxpbmcgd2l0aCBtZXJlIHByaXZhdGUgcGVyc29ucywgcmVwbGllZCB0aGF0IGhpcyBob25vdXJzIG5lZWRlZCBjdXJ0YWlsbWVudCByYXRoZXIgdGhhbiBlbmxhcmdlbWVudC4gVGhpcyB2ZXhlZCBub3Qgb25seSB0aGUgc2VuYXRlLCBidXQgYWxzbyB0aGUgcGVvcGxlLCB3aG8gZmVsdCB0aGF0IGluIHRoZSBwZXJzb25zIG9mIHRoZSBzZW5hdG9ycyB0aGUgc3RhdGUgd2FzIGluc3VsdGVkLCBhbmQgaW4gYSB0ZXJyaWJsZSBkZWplY3Rpb24gdGhleSB3ZW50IGF3YXkgYXQgb25jZSwgYWxsIHdobyB3ZXJlIG5vdCBvYmxpZ2VkIHRvIHJlbWFpbiwgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+c28gdGhhdCBDYWVzYXIgdG9vLCB3aGVuIGhlIHdhcyBhd2FyZSBvZiBoaXMgbWlzdGFrZSwgaW1tZWRpYXRlbHkgdHVybmVkIHRvIGdvIGhvbWUsIGFuZCBkcmF3aW5nIGJhY2sgaGlzIHRvZ2EgZnJvbSBoaXMgbmVjaywgY3JpZWQgaW4gbG91ZCB0b25lcyB0byBoaXMgZnJpZW5kcyB0aGF0IGhlIHdhcyByZWFkeSB0byBvZmZlciBoaXMgdGhyb2F0IHRvIGFueSBvbmUgd2hvIHdpc2hlZCB0byBraWxsIGhpbS4gQnV0IGFmdGVyd2FyZHMgaGUgbWFkZSBoaXMgZGlzZWFzZSBhbiBleGN1c2UgZm9yIGhpcyBiZWhhdmlvdXIsIHNheWluZyB0aGF0IHRoZSBzZW5zZXMgb2YgdGhvc2Ugd2hvIGFyZSB0aHVzIGFmZmxpY3RlZCBkbyBub3QgdXN1YWxseSByZW1haW4gc3RlYWR5IHdoZW4gdGhleSBhZGRyZXNzIGEgbXVsdGl0dWRlIHN0YW5kaW5nLCBidXQgYXJlIHNwZWVkaWx5IHNoYWtlbiBhbmQgd2hpcmxlZCBhYm91dCwgYnJpbmdpbmcgb24gZ2lkZGluZXNzIGFuZCBpbnNlbnNpYmlsaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB3aGF0IGhlIHNhaWQgd2FzIG5vdCB0cnVlOyBvbiB0aGUgY29udHJhcnksIGhlIHdhcyB2ZXJ5IGRlc2lyb3VzIG9mIHJpc2luZyB0byByZWNlaXZlIHRoZSBzZW5hdGU7IGJ1dCBvbmUgb2YgaGlzIGZyaWVuZHMsIGFzIHRoZXkgc2F5LCBvciByYXRoZXIgb25lIG9mIGhpcyBmbGF0dGVyZXJzLCBDb3JuZWxpdXMgQmFsYnVzLCByZXN0cmFpbmVkIGhpbSwgc2F5aW5nOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlJlbWVtYmVyIHRoYXQgdGhvdSBhcnQgQ2Flc2FyLCBhbmQgcGVybWl0IHRoeXNlbGYgdG8gYmUgY291cnRlZCBhcyBhIHN1cGVyaW9yLjwvcT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBhZGRlZCB0byB0aGVzZSBjYXVzZXMgb2Ygb2ZmZW5jZSBoaXMgaW5zdWx0IHRvIHRoZSB0cmlidW5lcy4gSXQgd2FzLCBuYW1lbHksIHRoZSBmZXN0aXZhbCBvZiB0aGUgTHVwZXJjYWxpYSwgb2Ygd2hpY2ggbWFueSB3cml0ZSB0aGF0IGl0IHdhcyBhbmNpZW50bHkgY2VsZWJyYXRlZCBieSBzaGVwaGVyZHMsIGFuZCBoYXMgYWxzbyBzb21lIGNvbm5lY3Rpb24gd2l0aCB0aGUgQXJjYWRpYW4gTHljYWVhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUgbWFueSBvZiB0aGUgbm9ibGUgeW91dGhzIGFuZCBvZiB0aGUgbWFnaXN0cmF0ZXMgcnVuIHVwIGFuZCBkb3duIHRocm91Z2ggdGhlIGNpdHkgbmFrZWQsIGZvciBzcG9ydCBhbmQgbGF1Z2h0ZXIgc3RyaWtpbmcgdGhvc2UgdGhleSBtZWV0IHdpdGggc2hhZ2d5IHRob25ncy4gQW5kIG1hbnkgd29tZW4gb2YgcmFuayBhbHNvIHB1cnBvc2VseSBnZXQgaW4gdGhlaXIgd2F5LCBhbmQgbGlrZSBjaGlsZHJlbiBhdCBzY2hvb2wgcHJlc2VudCB0aGVpciBoYW5kcyB0byBiZSBzdHJ1Y2ssIGJlbGlldmluZyB0aGF0IHRoZSBwcmVnbmFudCB3aWxsIHRodXMgYmUgaGVscGVkIHRvIGFuIGVhc3kgZGVsaXZlcnksIGFuZCB0aGUgYmFycmVuIHRvIHByZWduYW5jeS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgY2VyZW1vbmllcyBDYWVzYXIgd2FzIHdpdG5lc3NpbmcsIHNlYXRlZCB1cG9uIHRoZSByb3N0cmEgb24gYSBnb2xkZW4gdGhyb25lLCBhcnJheWVkIGluIHRyaXVtcGhhbCBhdHRpcmUuIEFuZCBBbnRvbnkgd2FzIG9uZSBvZiB0aGUgcnVubmVycyBpbiB0aGUgc2FjcmVkIHJhY2U7IGZvciBoZSB3YXMgY29uc3VsLiBBY2NvcmRpbmdseSwgYWZ0ZXIgaGUgaGFkIGRhc2hlZCBpbnRvIHRoZSBmb3J1bSBhbmQgdGhlIGNyb3dkIGhhZCBtYWRlIHdheSBmb3IgaGltLCBoZSBjYXJyaWVkIGEgZGlhZGVtLCByb3VuZCB3aGljaCBhIHdyZWF0aCBvZiBsYXVyZWwgd2FzIHRpZWQsIGFuZCBoZWxkIGl0IG91dCB0byBDYWVzYXIuIFRoZW4gdGhlcmUgd2FzIGFwcGxhdXNlLCBub3QgbG91ZCwgYnV0IHNsaWdodCBhbmQgcHJlY29uY2VydGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBDYWVzYXIgcHVzaGVkIGF3YXkgdGhlIGRpYWRlbSwgYWxsIHRoZSBwZW9wbGUgYXBwbGF1ZGVkOyBhbmQgd2hlbiBBbnRvbnkgb2ZmZXJlZCBpdCBhZ2FpbiwgZmV3LCBhbmQgd2hlbiBDYWVzYXIgZGVjbGluZWQgaXQgYWdhaW4sIGFsbCwgYXBwbGF1ZGVkLiBUaGUgZXhwZXJpbWVudCBoYXZpbmcgdGh1cyBmYWlsZWQsIENhZXNhciByb3NlIGZyb20gaGlzIHNlYXQsIGFmdGVyIG9yZGVyaW5nIHRoZSB3cmVhdGggdG8gYmUgY2FycmllZCB1cCB0byB0aGUgQ2FwaXRvbDsgYnV0IHRoZW4gaGlzIHN0YXR1ZXMgd2VyZSBzZWVuIHRvIGhhdmUgYmVlbiBkZWNrZWQgd2l0aCByb3lhbCBkaWFkZW1zLiBTbyB0d28gb2YgdGhlIHRyaWJ1bmVzLCBGbGF2aXVzIGFuZCBNYXJ5bGx1cywgd2VudCB1cCB0byB0aGVtIGFuZCBwdWxsZWQgb2ZmIHRoZSBkaWFkZW1zLCBhbmQgYWZ0ZXIgZGlzY292ZXJpbmcgdGhvc2Ugd2hvIGhhZCBmaXJzdCBoYWlsZWQgQ2Flc2FyIGFzIGtpbmcsIGxlZCB0aGVtIG9mZiB0byBwcmlzb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgcGVvcGxlIGZvbGxvd2VkIHRoZSB0cmlidW5lcyB3aXRoIGFwcGxhdXNlIGFuZCBjYWxsZWQgdGhlbSBCcnV0dXNlcywgYmVjYXVzZSBCcnV0dXMgd2FzIHRoZSBtYW4gd2hvIHB1dCBhbiBlbmQgdG8gdGhlIHJveWFsIHN1Y2Nlc3Npb24gYW5kIGJyb3VnaHQgdGhlIHBvd2VyIGludG8gdGhlIGhhbmRzIG9mIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBpbnN0ZWFkIG9mIGEgc29sZSBydWxlci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQdWJsLiAxLjEiIHZhbGlkPSJ5ZXMiPgoJCQkJCQkgICAgICAgICAgICA8dGl0bGU+UHVibGljb2xhPHRpdGxlPiBpLjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgIDwvdGl0bGU+CgkJCQkJICAgICAgICAgIDwvYmlibD4tPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB1YmwuIDkuMSIgdmFsaWQ9InllcyI+aXg8L2JpYmw+Ljwvbm90ZT4gQXQgdGhpcywgQ2Flc2FyIHdhcyBncmVhdGx5IHZleGVkLCBhbmQgZGVwcml2ZWQgTWFyeWxsdXMgYW5kIEZsYXZpdXMgb2YgdGhlaXIgb2ZmaWNlLCB3aGlsZSBpbiBoaXMgZGVudW5jaWF0aW9uIG9mIHRoZW0sIGFsdGhvdWdoIGhlIGF0IHRoZSBzYW1lIHRpbWUgaW5zdWx0ZWQgdGhlIHBlb3BsZSwgaGUgY2FsbGVkLCB0aGVtIHJlcGVhdGVkbHkgQnJ1dGVzIGFuZCBDeW1hZWFucy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgd29yZCBicnV0dXMgaW4gTGF0aW4gc2lnbmlmaWVkIHN0dXBpZCAoY2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHVibC4gMy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlB1YmxpY29sYTwvdGl0bGU+LCBpaWkuIDQ8L2JpYmw+KTsgYW5kIHRoZSBwZW9wbGUgb2YgQ3ltw6ksIGluIEFzaWEgTWlub3IsIHdlcmUgY2VsZWJyYXRlZCBmb3Igc3R1cGlkaXR5ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3RyYWIuIDEzLjMuNiIgdmFsaWQ9InllcyI+U3RyYWJvLCBwLiA2MjI8L2JpYmw+KS48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5VbmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzIHRoZSBtdWx0aXR1ZGUgdHVybmVkIHRoZWlyIHRob3VnaHRzIHRvd2FyZHMgTWFyY3VzIEJydXR1cywgd2hvIHdhcyB0aG91Z2h0IHRvIGJlIGEgZGVzY2VuZGFudCBvZiB0aGUgZWxkZXIgQnJ1dHVzIG9uIGhpcyBmYXRoZXIncyBzaWRlLCBvbiBoaXMgbW90aGVyJ3Mgc2lkZSBiZWxvbmdlZCB0byB0aGUgU2VydmlsaWksIGFub3RoZXIgaWxsdXN0cmlvdXMgaG91c2UsIGFuZCB3YXMgYSBzb24taW4tbGF3IGFuZCBuZXBoZXcgb2YgQ2F0by4gVGhlIGRlc2lyZXMgd2hpY2ggQnJ1dHVzIGZlbHQgdG8gYXR0ZW1wdCBvZiBoaXMgb3duIGFjY29yZCB0aGUgYWJvbGl0aW9uIG9mIHRoZSBtb25hcmNoeSB3ZXJlIGJsdW50ZWQgYnkgdGhlIGZhdm91cnMgYW5kIGhvbm91cnMgdGhhdCBoZSBoYWQgcmVjZWl2ZWQgZnJvbSBDYWVzYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3Qgb25seSBoYWQgaGlzIGxpZmUgYmVlbiBzcGFyZWQgYXQgUGhhcnNhbHVzIGFmdGVyIFBvbXBleSdzIGZsaWdodCwgYW5kIHRoZSBsaXZlcyBvZiBtYW55IG9mIGhpcyBmcmllbmRzIGF0IGhpcyBlbnRyZWF0eSwgYnV0IGFsc28gaGUgaGFkIGdyZWF0IGNyZWRpdCB3aXRoIENhZXNhci4gSGUgaGFkIHJlY2VpdmVkIHRoZSBtb3N0IGhvbm91cmFibGUgb2YgdGhlIHByYWV0b3JzaGlwcyBmb3IgdGhlIGN1cnJlbnQgeWVhciwgYW5kIHdhcyB0byBiZSBjb25zdWwgdGhyZWUgeWVhcnMgbGF0ZXIsIGhhdmluZyBiZWVuIHByZWZlcnJlZCB0byBDYXNzaXVzLCB3aG8gd2FzIGEgcml2YWwgY2FuZGlkYXRlLiBGb3IgQ2Flc2FyLCBhcyB3ZSBhcmUgdG9sZCwgc2FpZCB0aGF0IENhc3NpdXMgdXJnZWQgdGhlIGp1c3RlciBjbGFpbXMgdG8gdGhlIG9mZmljZSwgYnV0IHRoYXQgZm9yIGhpcyBvd24gcGFydCBoZSBjb3VsZCBub3QgcGFzcyBCcnV0dXMgYnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gNy4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1czwvdGl0bGU+LCB2aWkuIDEtMzwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlLCB0b28sIHdoZW4gY2VydGFpbiBwZXJzb25zIHdlcmUgYWN0dWFsbHkgYWNjdXNpbmcgQnJ1dHVzIHRvIGhpbSwgdGhlIGNvbnNwaXJhY3kgYmVpbmcgYWxyZWFkeSBvbiBmb290LCBDYWVzYXIgd291bGQgbm90IGhlZWQgdGhlbSwgYnV0IGxheWluZyBoaXMgaGFuZCB1cG9uIGhpcyBib2R5IHNhaWQgdG8gdGhlIGFjY3VzZXJzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJydXR1cyB3aWxsIHdhaXQgZm9yIHRoaXMgc2hyaXZlbGxlZCBza2luLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1cyA8L3RpdGxlPmNoYXB0ZXJzIHZpaWkuPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDkuMSIgdmFsaWQ9InllcyI+aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGltcGx5aW5nIHRoYXQgQnJ1dHVzIHdhcyB3b3J0aHkgdG8gcnVsZSBiZWNhdXNlIG9mIGhpcyB2aXJ0dWUsIGJ1dCB0aGF0IGZvciB0aGUgc2FrZSBvZiBydWxpbmcgaGUgd291bGQgbm90IGJlY29tZSBhIHRoYW5rbGVzcyB2aWxsYWluLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSwgaG93ZXZlciwgd2hvIHdlcmUgZWFnZXIgZm9yIHRoZSBjaGFuZ2UsIGFuZCBmaXhlZCB0aGVpciBleWVzIG9uIEJydXR1cyBhbG9uZSwgb3Igb24gaGltIGZpcnN0LCBkaWQgbm90IHZlbnR1cmUgdG8gdGFsayB3aXRoIGhpbSBkaXJlY3RseSwgYnV0IGJ5IG5pZ2h0IHRoZXkgY292ZXJlZCBoaXMgcHJhZXRvcmlhbCB0cmlidW5lIGFuZCBjaGFpciB3aXRoIHdyaXRpbmdzLCBtb3N0IG9mIHdoaWNoIHdlcmUgb2YgdGhpcyBzb3J0OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgYXJ0IGFzbGVlcCwgQnJ1dHVzLDwvcT4gb3IsPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgbm90IEJydXR1czwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1cyA8L3RpdGxlPmNoYXB0ZXJzIHZpaWkuPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDkuMSIgdmFsaWQ9InllcyI+aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IFdoZW4gQ2Fzc2l1cyBwZXJjZWl2ZWQgdGhhdCB0aGUgYW1iaXRpb24gb2YgQnJ1dHVzIHdhcyBzb21ld2hhdCBzdGlycmVkIGJ5IHRoZXNlIHRoaW5ncywgaGUgd2FzIG1vcmUgdXJnZW50IHdpdGggaGltIHRoYW4gYmVmb3JlLCBhbmQgcHJpY2tlZCBoaW0gb24sIGhhdmluZyBoaW1zZWxmIGFsc28gc29tZSBwcml2YXRlIGdyb3VuZHMgZm9yIGhhdGluZyBDYWVzYXI7IHRoZXNlIEkgaGF2ZSBtZW50aW9uZWQgaW4gdGhlIExpZmUgb2YgQnJ1dHVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXMgPC90aXRsZT5jaGFwdGVycyB2aWlpLjwvYmlibD4sIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA5LjEiIHZhbGlkPSJ5ZXMiPml4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgQ2Flc2FyIGFjdHVhbGx5IHN1c3BlY3RlZCBoaW0sIHNvIHRoYXQgaGUgb25jZSBzYWlkIHRvIGhpcyBmcmllbmRzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQsIHRoaW5rIHllLCBkb3RoIENhc3NpdXMgd2FudD8gSSBsaWtlIGhpbSBub3Qgb3ZlciBtdWNoLCBmb3IgaGUgaXMgbXVjaCB0b28gcGFsZS48L3E+IEFuZCBhZ2Fpbiwgd2UgYXJlIHRvbGQgdGhhdCB3aGVuIEFudG9ueSBhbmQgRG9sYWJlbGxhIHdlcmUgYWNjdXNlZCB0byBoaW0gb2YgcGxvdHRpbmcgcmV2b2x1dGlvbiwgQ2Flc2FyIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBhbSBub3QgbXVjaCBpbiBmZWFyIG9mIHRoZXNlIGZhdCwgbG9uZy1oYWlyZWQgZmVsbG93cywgYnV0IHJhdGhlciBvZiB0aG9zZSBwYWxlLCB0aGluIG9uZXMsPC9xPiBtZWFuaW5nIEJydXR1cyBhbmQgQ2Fzc2l1cy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGRlc3RpbnksIGl0IHdvdWxkIHNlZW0sIGlzIG5vdCBzbyBtdWNoIHVuZXhwZWN0ZWQgYXMgaXQgaXMgdW5hdm9pZGFibGUsIHNpbmNlIHRoZXkgc2F5IHRoYXQgYW1hemluZyBzaWducyBhbmQgYXBwYXJpdGlvbnMgd2VyZSBzZWVuLiBOb3csIGFzIGZvciBsaWdodHMgaW4gdGhlIGhlYXZlbnMsIGNyYXNoaW5nIHNvdW5kcyBib3JuZSBhbGwgYWJvdXQgYnkgbmlnaHQsIGFuZCBiaXJkcyBvZiBvbWVuIGNvbWluZyBkb3duIGludG8gdGhlIGZvcnVtLCBpdCBpcyBwZXJoYXBzIG5vdCB3b3J0aCB3aGlsZSB0byBtZW50aW9uIHRoZXNlIHByZWN1cnNvcnMgb2Ygc28gZ3JlYXQgYW4gZXZlbnQ7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBTdHJhYm8gdGhlIHBoaWxvc29waGVyIHNheXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qcm9iYWJseSBpbiB0aGUgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SGlzdG9yaWNhbCBDb21tZW50YXJpZXM8L3E+IGNpdGVkIGluIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiAyOC43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkx1Y3VsbHVzPC90aXRsZT4sIHh4dmlpaS4gNzwvYmlibD4uPC9ub3RlPiB0aGF0IG11bHRpdHVkZXMgb2YgbWVuIGFsbCBvbiBmaXJlIHdlcmUgc2VlbiBydXNoaW5nIHVwLCBhbmQgYSBzb2xkaWVyJ3Mgc2xhdmUgdGhyZXcgZnJvbSBoaXMgaGFuZCBhIGNvcGlvdXMgZmxhbWUgYW5kIHNlZW1lZCB0byB0aGUgc3BlY3RhdG9ycyB0byBiZSBidXJuaW5nLCBidXQgd2hlbiB0aGUgZmxhbWUgY2Vhc2VkIHRoZSBtYW4gd2FzIHVuaW5qdXJlZDsgaGUgc2F5cywgbW9yZW92ZXIsIHRoYXQgd2hlbiBDYWVzYXIgaGltc2VsZiB3YXMgc2FjcmlmaWNpbmcsIHRoZSBoZWFydCBvZiB0aGUgdmljdGltIHdhcyBub3QgdG8gYmUgZm91bmQsIGFuZCB0aGUgcHJvZGlneSBjYXVzZWQgZmVhciwgc2luY2UgaW4gdGhlIGNvdXJzZSBvZiBuYXR1cmUsIGNlcnRhaW5seSwgYW4gYW5pbWFsIHdpdGhvdXQgYSBoZWFydCBjb3VsZCBub3QgZXhpc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmb2xsb3dpbmcgc3RvcnksIHRvbywgaXMgdG9sZCBieSBtYW55LiBBIGNlcnRhaW4gc2VlciB3YXJuZWQgQ2Flc2FyIHRvIGJlIG9uIGhpcyBndWFyZCBhZ2FpbnN0IGEgZ3JlYXQgcGVyaWwgb24gdGhlIGRheSBvZiB0aGUgbW9udGggb2YgTWFyY2ggd2hpY2ggdGhlIFJvbWFucyBjYWxsIHRoZSBJZGVzOyBhbmQgd2hlbiB0aGUgZGF5IGhhZCBjb21lIGFuZCBDYWVzYXIgd2FzIG9uIGhpcyB3YXkgdG8gdGhlIHNlbmF0ZS1ob3VzZSwgaGUgZ3JlZXRlZCB0aGUgc2VlciB3aXRoIGEgamVzdCBhbmQgc2FpZDoKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlbGwsIHRoZSBJZGVzIG9mIE1hcmNoIGFyZSBjb21lLDwvcT4gYW5kIHRoZSBzZWVyIHNhaWQgdG8gaGltIHNvZnRseTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BeWUsIHRoZXkgYXJlIGNvbWUsIGJ1dCB0aGV5IGFyZSBub3QgZ29uZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIG9uIHRoZSBkYXkgYmVmb3JlLCB3aGVuIE1hcmN1cyBMZXBpZHVzIHdhcyBlbnRlcnRhaW5pbmcgaGltIGF0IHN1cHBlciwgQ2Flc2FyIGNoYW5jZWQgdG8gYmUgc2lnbmluZyBsZXR0ZXJzLCBhcyBoaXMgY3VzdG9tIHdhcywgd2hpbGUgcmVjbGluaW5nIGF0IHRhYmxlLCBhbmQgdGhlIGRpc2NvdXJzZSB0dXJuZWQgc3VkZGVubHkgdXBvbiB0aGUgcXVlc3Rpb24gd2hhdCBzb3J0IG9mIGRlYXRoIHdhcyB0aGUgYmVzdDsgYmVmb3JlIGFueSBvbmUgZWxzZSBjb3VsZCBhbnN3ZXIgQ2Flc2FyIGNyaWVkIG91dDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGF0IHdoaWNoIGlzIHVuZXhwZWN0ZWQuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHdoaWxlIGhlIHdhcyBzbGVlcGluZyBhcyB1c3VhbCBieSB0aGUgc2lkZSBvZiBoaXMgd2lmZSwgYWxsIHRoZSB3aW5kb3dzIGFuZCBkb29ycyBvZiB0aGUgY2hhbWJlciBmbGV3IG9wZW4gYXQgb25jZSwgYW5kIENhZXNhciwgY29uZm91bmRlZCBieSB0aGUgbm9pc2UgYW5kIHRoZSBsaWdodCBvZiB0aGUgbW9vbiBzaGluaW5nIGRvd24gdXBvbiBoaW0sIG5vdGljZWQgdGhhdCBDYWxwdXJuaWEgd2FzIGluIGEgZGVlcCBzbHVtYmVyLCBidXQgd2FzIHV0dGVyaW5nIGluZGlzdGluY3Qgd29yZHMgYW5kIGluYXJ0aWN1bGF0ZSBncm9hbnMgaW4gaGVyIHNsZWVwOyBmb3Igc2hlIGRyZWFtZWQsIGFzIGl0IHByb3ZlZCwgdGhhdCBzaGUgd2FzIGhvbGRpbmcgaGVyIG11cmRlcmVkIGh1c2JhbmQgaW4gaGVyIGFybXMgYW5kIGJld2FpbGluZyBoaW0uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IHRoaXMgd2FzIG5vdCB0aGUgdmlzaW9uIHdoaWNoIHRoZSB3b21hbiBoYWQ7IGJ1dCB0aGF0IHRoZXJlIHdhcyBhdHRhY2hlZCB0byBDYWVzYXIncyBob3VzZSB0byBnaXZlIGl0IGFkb3JubWVudCBhbmQgZGlzdGluY3Rpb24sIGJ5IHZvdGUgb2YgdGhlIHNlbmF0ZSwgYSBnYWJsZS1vcm5hbWVudCwgYXMgTGl2eSBzYXlzLCBhbmQgaXQgd2FzIHRoaXMgd2hpY2ggQ2FscHVybmlhIGluIGhlciBkcmVhbXMgc2F3IHRvcm4gZG93biwgYW5kIHRoZXJlZm9yZSwgYXMgc2hlIHRob3VnaHQsIHdhaWxlZCBhbmQgd2VwdC4gQXQgYWxsIGV2ZW50cywgd2hlbiBkYXkgY2FtZSwgc2hlIGJlZ2dlZCBDYWVzYXIsIGlmIGl0IHdhcyBwb3NzaWJsZSwgbm90IHRvIGdvIG91dCwgYnV0IHRvIHBvc3Rwb25lIHRoZSBtZWV0aW5nIG9mIHRoZSBzZW5hdGUgOyBpZiwgaG93ZXZlciwgaGUgaGFkIG5vIGNvbmNlcm4gYXQgYWxsIGZvciBoZXIgZHJlYW1zLCBzaGUgYmVzb3VnaHQgaGltIHRvIGVucXVpcmUgYnkgb3RoZXIgbW9kZXMgb2YgZGl2aW5hdGlvbiBhbmQgYnkgc2FjcmlmaWNlcyBjb25jZXJuaW5nIHRoZSBmdXR1cmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDYWVzYXIgYWxzbywgYXMgaXQgd291bGQgYXBwZWFyLCB3YXMgaW4gc29tZSBzdXNwaWNpb24gYW5kIGZlYXIuIEZvciBuZXZlciBiZWZvcmUgaGFkIGhlIHBlcmNlaXZlZCBpbiBDYWxwdXJuaWEgYW55IHdvbWFuaXNoIHN1cGVyc3RpdGlvbiwgYnV0IG5vdyBoZSBzYXcgdGhhdCBzaGUgd2FzIGluIGdyZWF0IGRpc3RyZXNzLiBBbmQgd2hlbiB0aGUgc2VlcnMgYWxzbywgYWZ0ZXIgbWFueSBzYWNyaWZpY2VzLCB0b2xkIGhpbSB0aGF0IHRoZSBvbWVucyB3ZXJlIHVuZmF2b3VyYWJsZSwgaGUgcmVzb2x2ZWQgdG8gc2VuZCBBbnRvbnkgYW5kIGRpc21pc3MgdGhlIHNlbmF0ZS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjY0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IHRoaXMganVuY3R1cmUgRGVjaW11cyBCcnV0dXMsIHN1cm5hbWVkIEFsYmludXMsIHdobyB3YXMgc28gdHJ1c3RlZCBieSBDYWVzYXIgdGhhdCBoZSB3YXMgZW50ZXJlZCBpbiBoaXMgd2lsbCBhcyBoaXMgc2Vjb25kIGhlaXIsIGJ1dCB3YXMgcGFydG5lciBpbiB0aGUgY29uc3BpcmFjeSBvZiB0aGUgb3RoZXIgQnJ1dHVzIGFuZCBDYXNzaXVzLCBmZWFyaW5nIHRoYXQgaWYgQ2Flc2FyIHNob3VsZCBlbHVkZSB0aGF0IGRheSwgdGhlaXIgdW5kZXJ0YWtpbmcgd291bGQgYmVjb21lIGtub3duLCByaWRpY3VsZWQgdGhlIHNlZXJzIGFuZCBjaGlkZWQgQ2Flc2FyIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciBsYXlpbmcgaGltc2VsZiBvcGVuIHRvIG1hbGljaW91cyBjaGFyZ2VzIG9uIHRoZSBwYXJ0IG9mIHRoZSBzZW5hdG9ycywgd2hvIHdvdWxkIHRoaW5rIHRoZW1zZWx2ZXMgbW9ja2VkIGF0OyBmb3IgdGhleSBoYWQgbWV0IGF0IGhpcyBiaWRkaW5nLCBhbmQgd2VyZSByZWFkeSBhbmQgd2lsbGluZyB0byB2b3RlIGFzIG9uZSBtYW4gdGhhdCBoZSBzaG91bGQgYmUgZGVjbGFyZWQga2luZyBvZiB0aGUgcHJvdmluY2VzIG91dHNpZGUgb2YgSXRhbHksIGFuZCBtaWdodCB3ZWFyIGEgZGlhZGVtIHdoZW4gaGUgd2VudCBhbnl3aGVyZSBlbHNlIGJ5IGxhbmQgb3Igc2VhOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5idXQgaWYgc29tZSBvbmUgc2hvdWxkIHRlbGwgdGhlbSBhdCB0aGVpciBzZXNzaW9uIHRvIGJlIGdvbmUgbm93LCBidXQgdG8gY29tZSBiYWNrIGFnYWluIHdoZW4gQ2FscHVybmlhIHNob3VsZCBoYXZlIGJldHRlciBkcmVhbXMsIHdoYXQgc3BlZWNoZXMgd291bGQgYmUgbWFkZSBieSBoaXMgZW5lbWllcywgb3Igd2hvIHdvdWxkIGxpc3RlbiB0byBoaXMgZnJpZW5kcyB3aGVuIHRoZXkgdHJpZWQgdG8gc2hvdyB0aGF0IHRoaXMgd2FzIG5vdCBzbGF2ZXJ5IGFuZCB0eXJhbm55PyBCdXQgaWYgaGUgd2FzIGZ1bGx5IHJlc29sdmVkIChBbGJpbnVzIHNhaWQpIHRvIHJlZ2FyZCB0aGUgZGF5IGFzIGluYXVzcGljaW91cywgaXQgd2FzIGJldHRlciB0aGF0IGhlIHNob3VsZCBnbyBpbiBwZXJzb24gYW5kIGFkZHJlc3MgdGhlIHNlbmF0ZSwgYW5kIHRoZW4gcG9zdHBvbmUgaXRzIGJ1c2luZXNzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGlsZSBzYXlpbmcgdGhlc2UgdGhpbmdzIEJydXR1cyB0b29rIENhZXNhciBieSB0aGUgaGFuZCBhbmQgYmVnYW4gdG8gbGVhZCBoaW0gYWxvbmcuIEFuZCBoZSBoYWQgZ29uZSBidXQgYSBsaXR0bGUgd2F5IGZyb20gaGlzIGRvb3Igd2hlbiBhIHNsYXZlIGJlbG9uZ2luZyB0byBzb21lIG9uZSBlbHNlLCBlYWdlciB0byBnZXQgYXQgQ2Flc2FyLCBidXQgdW5hYmxlIHRvIGRvIHNvIGZvciB0aGUgcHJlc3Mgb2YgbnVtYmVycyBhYm91dCBoaW0sIGZvcmNlZCBoaXMgd2F5IGludG8gdGhlIGhvdXNlLCBnYXZlIGhpbXNlbGYgaW50byB0aGUgaGFuZHMgb2YgQ2FscHVybmlhLCBhbmQgYmFkZSBoZXIga2VlcCBoaW0gc2VjdXJlIHVudGlsIENhZXNhciBjYW1lIGJhY2ssIHNpbmNlIGhlIGhhZCBpbXBvcnRhbnQgbWF0dGVycyB0byByZXBvcnQgdG8gaGltLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgQXJ0ZW1pZG9ydXMsIGEgQ25pZGlhbiBieSBiaXJ0aCwgYSB0ZWFjaGVyIG9mIEdyZWVrIHBoaWxvc29waHksIGFuZCBvbiB0aGlzIGFjY291bnQgYnJvdWdodCBpbnRvIGludGltYWN5IHdpdGggc29tZSBvZiB0aGUgZm9sbG93ZXJzIG9mIEJydXR1cywgc28gdGhhdCBoZSBhbHNvIGtuZXcgbW9zdCBvZiB3aGF0IHRoZXkgd2VyZSBkb2luZywgY2FtZSBicmluZ2luZyB0byBDYWVzYXIgaW4gYSBzbWFsbCByb2xsIHRoZSBkaXNjbG9zdXJlcyB3aGljaCBoZSB3YXMgZ29pbmcgdG8gbWFrZTsgYnV0IHNlZWluZyB0aGF0IENhZXNhciB0b29rIGFsbCBzdWNoIHJvbGxzIGFuZCBoYW5kZWQgdGhlbSB0byBoaXMgYXR0ZW5kYW50cywgaGUgY2FtZSBxdWl0ZSBuZWFyLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5SZWFkIHRoaXMsIENhZXNhciwgYnkgdGh5c2VsZiwgYW5kIHNwZWVkaWx5OyBmb3IgaXQgY29udGFpbnMgbWF0dGVycyBvZiBpbXBvcnRhbmNlIGFuZCBvZiBjb25jZXJuIHRvIHRoZWUuPC9xPiAKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDYWVzYXIgdG9vayB0aGUgcm9sbCBhbmQgd291bGQgaGF2ZSByZWFkIGl0LCBidXQgd2FzIHByZXZlbnRlZCBieSB0aGUgbXVsdGl0dWRlIG9mIHBlb3BsZSB3aG8gZW5nYWdlZCBoaXMgYXR0ZW50aW9uLCBhbHRob3VnaCBoZSBzZXQgb3V0IHRvIGRvIHNvIG1hbnkgdGltZXMsIGFuZCBob2xkaW5nIGluIGhpcyBoYW5kIGFuZCByZXRhaW5pbmcgdGhhdCByb2xsIGFsb25lLCBoZSBwYXNzZWQgb24gaW50byB0aGUgc2VuYXRlLiBTb21lLCBob3dldmVyLCBzYXkgdGhhdCBhbm90aGVyIHBlcnNvbiBnYXZlIGhpbSB0aGlzIHJvbGwsIGFuZCB0aGF0IEFydGVtaWRvcnVzIGRpZCBub3QgZ2V0IHRvIGhpbSBhdCBhbGwsIGJ1dCB3YXMgY3Jvd2RlZCBhd2F5IGFsbCBhbG9uZyB0aGUgcm91dGUuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIGZhciwgcGVyaGFwcywgdGhlc2UgdGhpbmdzIG1heSBoYXZlIGhhcHBlbmVkIG9mIHRoZWlyIG93biBhY2NvcmQ7IHRoZSBwbGFjZSwgaG93ZXZlciwgd2hpY2ggd2FzIHRoZSBzY2VuZSBvZiB0aGF0IHN0cnVnZ2xlIGFuZCBtdXJkZXIsIGFuZCBpbiB3aGljaCB0aGUgc2VuYXRlIHdhcyB0aGVuIGFzc2VtYmxlZCwgc2luY2UgaXQgY29udGFpbmVkIGEgc3RhdHVlIG9mIFBvbXBleSBhbmQgaGFkIGJlZW4gZGVkaWNhdGVkIGJ5IFBvbXBleSBhcyBhbiBhZGRpdGlvbmFsIG9ybmFtZW50IHRvIGhpcyB0aGVhdHJlLCBtYWRlIGl0IHdob2xseSBjbGVhciB0aGF0IGl0IHdhcyB0aGUgd29yayBvZiBzb21lIGhlYXZlbmx5IHBvd2VyIHdoaWNoIHdhcyBjYWxsaW5nIGFuZCBndWlkaW5nIHRoZSBhY3Rpb24gdGhpdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SW5kZWVkLCBpdCBpcyBhbHNvIHNhaWQgdGhhdCBDYXNzaXVzLCB0dXJuaW5nIGhpcyBleWVzIHRvd2FyZCB0aGUgc3RhdHVlIG9mIFBvbXBleSBiZWZvcmUgdGhlIGF0dGFjayBiZWdhbiwgaW52b2tlZCBpdCBzaWxlbnRseSwgYWx0aG91Z2ggaGUgd2FzIG11Y2ggYWRkaWN0ZWQgdG8gdGhlIGRvY3RyaW5lcyBvZiBFcGljdXJ1czs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVzZSBkaXNjb3VyYWdlZCBiZWxpZWYgaW4gc3VwZXJodW1hbiBwb3dlcnMuPC9ub3RlPiBidXQgdGhlIGNyaXNpcywgYXMgaXQgd291bGQgc2VlbSwgd2hlbiB0aGUgZHJlYWRmdWwgYXR0ZW1wdCB3YXMgbm93IGNsb3NlIGF0IGhhbmQsIHJlcGxhY2VkIGhpcyBmb3JtZXIgY29vbCBjYWxjdWxhdGlvbnMgd2l0aCBkaXZpbmVseSBpbnNwaXJlZCBlbW90aW9uLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5XZWxsLCB0aGVuLCBBbnRvbnksIHdobyB3YXMgYSBmcmllbmQgb2YgQ2Flc2FyJ3MgYW5kIGEgcm9idXN0IG1hbiwgd2FzIGRldGFpbmVkIG91dHNpZGUgYnkgQnJ1dHVzIEFsYmludXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QnkgQ2FpdXMgVHJlYm9uaXVzLCByYXRoZXIsIGFzIFBsdXRhcmNoIHNheXMgaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAxNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1czwvdGl0bGU+LCB4dmlpLiAxPC9iaWJsPi4gQ2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTYuMTE3IiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGlpLiAxMTc8L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2ljLiBGYW0uIDEwLjI4LjEiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlPmFkIGZhbS48L3RpdGxlPiB4LiAyODwvYmlibD4uL25vdGUmZ3Q7IHdobyBwdXJwb3NlbHkgZW5nYWdlZCBoaW0gaW4gYSBsZW5ndGh5IGNvbnZlcnNhdGlvbiBidXQgQ2Flc2FyIHdlbnQgaW4sIGFuZCB0aGUgc2VuYXRlIHJvc2UgaW4gaGlzIGhvbm91ci4gU29tZSBvZiB0aGUgcGFydGlzYW5zIG9mIEJydXR1cyB0b29rIHRoZWlyIHBsYWNlcyByb3VuZCB0aGUgYmFjayBvZiBDYWVzYXIncyBjaGFpciwgd2hpbGUgb3RoZXJzIHdlbnQgdG8gbWVldCBoaW0sIGFzIHRob3VnaCB0aGV5IHdvdWxkIHN1cHBvcnQgdGhlIHBldGl0aW9uIHdoaWNoIFRpbGxpdXMgQ2ltYmVyIHByZXNlbnRlZCB0byBDYWVzYXIgaW4gYmVoYWxmIG9mIGhpcyBleGlsZWQgYnJvdGhlciwgYW5kIHRoZXkgam9pbmVkIHRoZWlyIGVudHJlYXRpZXMgdG8gaGlzIGFuZCBhY2NvbXBhbmllZCBDYWVzYXIgdXAgdG8gaGlzIGNoYWlyLiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4sIGFmdGVyIHRha2luZyBoaXMgc2VhdCwgQ2Flc2FyIGNvbnRpbnVlZCB0byByZXB1bHNlIHRoZWlyIHBldGl0aW9ucywgYW5kLCBhcyB0aGV5IHByZXNzZWQgdXBvbiBoaW0gd2l0aCBncmVhdGVyIGltcG9ydHVuaXR5LCBiZWdhbiB0byBzaG93IGFuZ2VyIHRvd2FyZHMgb25lIGFuZCBhbm90aGVyIG9mIHRoZW0sIFRpbGxpdXMgc2VpemVkIGhpcyB0b2dhIHdpdGggYm90aCBoYW5kcyBhbmQgcHVsbGVkIGl0IGRvd24gZnJvbSBoaXMgbmVjay4gVGhpcyB3YXMgdGhlIHNpZ25hbCBmb3IgdGhlIGFzc2F1bHQuIEl0IHdhcyBDYXNjYSB3aG8gZ2F2ZSBoaW0gdGhlIGZpcnN0IGJsb3cgd2l0aCBoaXMgZGFnZ2VyLCBpbiB0aGUgbmVjaywgbm90IGEgbW9ydGFsIHdvdW5kLCBub3IgZXZlbiBhIGRlZXAgb25lLCBmb3Igd2hpY2ggaGUgd2FzIHRvbyBtdWNoIGNvbmZ1c2VkLCBhcyB3YXMgbmF0dXJhbCBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgZGVlZCBvZiBncmVhdCBkYXJpbmc7IHNvIHRoYXQgQ2Flc2FyIHR1cm5lZCBhYm91dCwgZ3Jhc3BlZCB0aGUga25pZmUsIGFuZCBoZWxkIGl0IGZhc3QuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbG1vc3QgdGhlIHNhbWUgaW5zdGFudCBib3RoIGNyaWVkIG91dCwgdGhlIHNtaXR0ZW4gbWFuIGluIExhdGluOiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BY2N1cnNlZCBDYXNjYSwgd2hhdCBkb2VzdCB0aG91PzwvcT4gYW5kIHRoZSBzbWl0ZXIsIGluIEdyZWVrLCB0byBoaXMgYnJvdGhlcjogCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnJvdGhlciwgaGVscCE8L3E+CiAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD5TbyB0aGUgYWZmYWlyIGJlZ2FuLCBhbmQgdGhvc2Ugd2hvIHdlcmUgbm90IHByaXZ5IHRvIHRoZSBwbG90IHdlcmUgZmlsbGVkIHdpdGggY29uc3Rlcm5hdGlvbiBhbmQgaG9ycm9yIGF0IHdoYXQgd2FzIGdvaW5nIG9uOyB0aGV5IGRhcmVkIG5vdCBmbHksIG5vciBnbyB0byBDYWVzYXIncyBoZWxwLCBuYXksIG5vciBldmVuIHV0dGVyIGEgd29yZC4gQnV0IHRob3NlIHdobyBoYWQgcHJlcGFyZWQgdGhlbXNlbHZlcyBmb3IgdGhlIG11cmRlciBiYXJlZCBlYWNoIG9mIHRoZW0gaGlzIGRhZ2dlciwgCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIENhZXNhciwgaGVtbWVkIGluIG9uIGFsbCBzaWRlcywgd2hpY2hldmVyIHdheSBoZSB0dXJuZWQgY29uZnJvbnRpbmcgYmxvd3Mgb2Ygd2VhcG9ucyBhaW1lZCBhdCBoaXMgZmFjZSBhbmQgZXllcywgZHJpdmVuIGhpdGhlciBhbmQgdGhpdGhlciBsaWtlIGEgd2lsZCBiZWFzdCwgd2FzIGVudGFuZ2xlZCBpbiB0aGUgaGFuZHMgb2YgYWxsOyBmb3IgYWxsIGhhZCB0byB0YWtlIHBhcnQgaW4gdGhlIHNhY3JpZmljZSBhbmQgdGFzdGUgb2YgdGhlIHNsYXVnaHRlci4gVGhlcmVmb3JlIEJydXR1cyBhbHNvIGdhdmUgaGltIG9uZSBibG93IGluIHRoZSBncm9pbi4gQW5kIGl0IGlzIHNhaWQgYnkgc29tZSB3cml0ZXJzIHRoYXQgYWx0aG91Z2ggQ2Flc2FyIGRlZmVuZGVkIGhpbXNlbGYgYWdhaW5zdCB0aGUgcmVzdCBhbmQgZGFydGVkIHRoaXMgd2F5IGFuZCB0aGF0IGFuZCBjcmllZCBhbG91ZCwgd2hlbiBoZSBzYXcgdGhhdCBCcnV0dXMgaGFkIGRyYXduIGhpcyBkYWdnZXIsIGhlIHB1bGxlZCBoaXMgdG9nYSBkb3duIG92ZXIgaGlzIGhlYWQgYW5kIHNhbmssIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmVpdGhlciBieSBjaGFuY2Ugb3IgYmVjYXVzZSBwdXNoZWQgdGhlcmUgYnkgaGlzIG11cmRlcmVycywgYWdhaW5zdCB0aGUgcGVkZXN0YWwgb24gd2hpY2ggdGhlIHN0YXR1ZSBvZiBQb21wZXkgc3Rvb2QuIEFuZCB0aGUgcGVkZXN0YWwgd2FzIGRyZW5jaGVkIHdpdGggaGlzIGJsb29kLCBzbyB0aGF0IG9uZSBtaWdodCBoYXZlIHRob3VnaHQgdGhhdCBQb21wZXkgaGltc2VsZiB3YXMgcHJlc2lkaW5nIG92ZXIgdGhpcyB2ZW5nZWFuY2UgdXBvbiBoaXMgZW5lbXksIHdobyBub3cgbGF5IHByb3N0cmF0ZSBhdCBoaXMgZmVldCwgcXVpdmVyaW5nIGZyb20gYSBtdWx0aXR1ZGUgb2Ygd291bmRzLiBGb3IgaXQgaXMgc2FpZCB0aGF0IGhlIHJlY2VpdmVkIHR3ZW50eS10aHJlZTsgYW5kIG1hbnkgb2YgdGhlIGNvbnNwaXJhdG9ycyB3ZXJlIHdvdW5kZWQgYnkgb25lIGFub3RoZXIsIGFzIHRoZXkgc3RydWdnbGVkIHRvIHBsYW50IGFsbCB0aG9zZSBibG93cyBpbiBvbmUgYm9keS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjY3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIHRodXMgZG9uZSB0byBkZWF0aCwgdGhlIHNlbmF0b3JzLCBhbHRob3VnaCBCcnV0dXMgY2FtZSBmb3J3YXJkIGFzIGlmIHRvIHNheSBzb21ldGhpbmcgYWJvdXQgd2hhdCBoYWQgYmVlbiBkb25lLCB3b3VsZCBub3Qgd2FpdCB0byBoZWFyIGhpbSwgYnV0IGJ1cnN0IG91dCBvZiBkb29ycyBhbmQgZmxlZCwgdGh1cyBmaWxsaW5nIHRoZSBwZW9wbGUgd2l0aCBjb25mdXNpb24gYW5kIGhlbHBsZXNzIGZlYXIsIHNvIHRoYXQgc29tZSBvZiB0aGVtIGNsb3NlZCB0aGVpciBob3VzZXMsIHdoaWxlIG90aGVycyBsZWZ0IHRoZWlyIGNvdW50ZXJzIGFuZCBwbGFjZXMgb2YgYnVzaW5lc3MgYW5kIHJhbiwgZmlyc3QgdG8gdGhlIHBsYWNlIHRvIHNlZSB3aGF0IGhhZCBoYXBwZW5lZCwgdGhlbiBhd2F5IGZyb20gdGhlIHBsYWNlIHdoZW4gdGhleSBoYWQgc2Vlbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW50b255IGFuZCBMZXBpZHVzLCB0aGUgY2hpZWYgZnJpZW5kcyBvZiBDYWVzYXIsIHN0b2xlIGF3YXkgYW5kIHRvb2sgcmVmdWdlIGluIHRoZSBob3VzZXMgb2Ygb3RoZXJzLiBCdXQgQnJ1dHVzIGFuZCBoaXMgcGFydGlzYW5zLCBqdXN0IGFzIHRoZXkgd2VyZSwgc3RpbGwgd2FybSBmcm9tIHRoZSBzbGF1Z2h0ZXIsIGRpc3BsYXlpbmcgdGhlaXIgZGFnZ2VycyBiYXJlLCB3ZW50IGFsbCBpbiBhIGJvZHkgb3V0IG9mIHRoZSBzZW5hdGUtaG91c2UgYW5kIG1hcmNoZWQgdG8gdGhlIENhcGl0b2wsIG5vdCBsaWtlIGZ1Z2l0aXZlcywgYnV0IHdpdGggZ2xhZCBmYWNlcyBhbmQgZnVsbCBvZiBjb25maWRlbmNlLCBzdW1tb25pbmcgdGhlIG11bHRpdHVkZSB0byBmcmVlZG9tLCBhbmQgd2VsY29taW5nIGludG8gdGhlaXIgcmFua3MgdGhlIG1vc3QgZGlzdGluZ3Vpc2hlZCBvZiB0aG9zZSB3aG8gbWV0IHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgYWxzbyBqb2luZWQgdGhlaXIgbnVtYmVyIGFuZCB3ZW50IHVwIHdpdGggdGhlbSBhcyB0aG91Z2ggdGhleSBoYWQgc2hhcmVkIGluIHRoZSBkZWVkLCBhbmQgbGFpZCBjbGFpbSB0byB0aGUgZ2xvcnkgb2YgaXQsIG9mIHdob20gd2VyZSBDYWl1cyBPY3Rhdml1cyBhbmQgTGVudHVsdXMgU3BpbnRoZXIuIFRoZXNlIG1lbiwgdGhlbiwgcGFpZCB0aGUgcGVuYWx0eSBmb3IgdGhlaXIgaW1wb3N0dXJlIGxhdGVyLCB3aGVuIHRoZXkgd2VyZSBwdXQgdG8gZGVhdGggYnkgQW50b255IGFuZCB0aGUgeW91bmcgQ2Flc2FyLCB3aXRob3V0IGV2ZW4gZW5qb3lpbmcgdGhlIGZhbWUgZm9yIHRoZSBzYWtlIG9mIHdoaWNoIHRoZXkgZGllZCwgb3dpbmcgdG8gdGhlIGRpc2JlbGllZiBvZiB0aGVpciBmZWxsb3cgbWVuLiBGb3IgZXZlbiB0aG9zZSB3aG8gcHVuaXNoZWQgdGhlbSBkaWQgbm90IGV4YWN0IGEgcGVuYWx0eSBmb3Igd2hhdCB0aGV5IGRpZCwgYnV0IGZvciB3aGF0IHRoZXkgd2lzaGVkIHRoZXkgaGFkIGRvbmUuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBuZXh0IGRheSBCcnV0dXMgY2FtZSBkb3duIGFuZCBoZWxkIGEgZGlzY291cnNlLCBhbmQgdGhlIHBlb3BsZSBsaXN0ZW5lZCB0byB3aGF0IHdhcyBzYWlkIHdpdGhvdXQgZWl0aGVyIGV4cHJlc3NpbmcgcmVzZW50bWVudCBhdCB3aGF0IGhhZCBiZWVuIGRvbmUgb3IgYXBwZWFyaW5nIHRvIGFwcHJvdmUgb2YgaXQ7IHRoZXkgc2hvd2VkLCBob3dldmVyLCBieSB0aGVpciBkZWVwIHNpbGVuY2UsIHRoYXQgd2hpbGUgdGhleSBwaXRpZWQgQ2Flc2FyLCB0aGV5IHJlc3BlY3RlZCBCcnV0dXMuIFRoZSBzZW5hdGUsIHRvbywgdHJ5aW5nIHRvIG1ha2UgYSBnZW5lcmFsIGFtbmVzdHkgYW5kIHJlY29uY2lsaWF0aW9uLCB2b3RlZCB0byBnaXZlIENhZXNhciBkaXZpbmUgaG9ub3VycyBhbmQgbm90IHRvIGRpc3R1cmIgZXZlbiB0aGUgbW9zdCBpbnNpZ25pZmljYW50IG1lYXN1cmUgd2hpY2ggaGUgaGFkIGFkb3B0ZWQgd2hlbiBpbiBwb3dlcjsgd2hpbGUgdG8gQnJ1dHVzIGFuZCBoaXMgcGFydGlzYW5zIGl0IGRpc3RyaWJ1dGVkIHByb3ZpbmNlcyBhbmQgZ2F2ZSBzdWl0YWJsZSBob25vdXJzLCBzbyB0aGF0IGV2ZXJ5Ym9keSB0aG91Z2h0IHRoYXQgbWF0dGVycyB3ZXJlIGRlY2lkZWQgYW5kIHNldHRsZWQgaW4gdGhlIGJlc3QgcG9zc2libGUgbWFubmVyLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgd2lsbCBvZiBDYWVzYXIgd2FzIG9wZW5lZCBhbmQgaXQgd2FzIGZvdW5kIHRoYXQgaGUgaGFkIGdpdmVuIGV2ZXJ5IFJvbWFuIGNpdGl6ZW4gYSBjb25zaWRlcmFibGUgZ2lmdCwgYW5kIHdoZW4gdGhlIG11bHRpdHVkZSBzYXcgaGlzIGJvZHkgY2FycmllZCB0aHJvdWdoIHRoZSBmb3J1bSBhbGwgZGlzZmlndXJlZCB3aXRoIGl0cyB3b3VuZHMsIHRoZXkgbm8gbG9uZ2VyIGtlcHQgdGhlbXNlbHZlcyB3aXRoaW4gdGhlIHJlc3RyYWludHMgb2Ygb3JkZXIgYW5kIGRpc2NpcGxpbmUsIGJ1dCBhZnRlciBoZWFwaW5nIHJvdW5kIHRoZSBib2R5IGJlbmNoZXMsIHJhaWxpbmdzLCBhbmQgdGFibGVzIGZyb20gdGhlIGZvcnVtLCB0aGV5IHNldCBmaXJlIHRvIHRoZW0gYW5kIGJ1cm5lZCBpdCB0aGVyZTsgdGhlbiwgbGlmdGluZyBibGF6aW5nIGJyYW5kcyBvbiBoaWdoLCB0aGV5IHJhbiB0byB0aGUgaG91c2VzIG9mIHRoZSBtdXJkZXJlcnMgd2l0aCBpbnRlbnQgdG8gYnVybiB0aGVtIGRvd24sIHdoaWxlIG90aGVycyB3ZW50IGV2ZXJ5IHdoaXRoZXIgdGhyb3VnaCB0aGUgY2l0eSBzZWVraW5nIHRvIHNlaXplIHRoZSBtZW4gdGhlbXNlbHZlcyBhbmQgdGVhciB0aGVtIHRvIHBpZWNlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm90IG9uZSBvZiB0aGVzZSBjYW1lIGluIHRoZWlyIHdheSwgYnV0IGFsbCB3ZXJlIHdlbGwgYmFycmljYWRlZC4gVGhlcmUgd2FzIGEgY2VydGFpbiBDaW5uYSwgaG93ZXZlciwgb25lIG9mIHRoZSBmcmllbmRzIG9mIENhZXNhciwgd2hvIGNoYW5jZWQsIGFzIHRoZXkgc2F5LCB0byBoYXZlIHNlZW4gZHVyaW5nIHRoZSBwcmV2aW91cyBuaWdodCBhIHN0cmFuZ2UgdmlzaW9uLiBIZSBkcmVhbWVkLCB0aGF0IGlzLCB0aGF0IGhlIHdhcyBpbnZpdGVkIHRvIHN1cHBlciBieSBDYWVzYXIsIGFuZCB0aGF0IHdoZW4gaGUgZXhjdXNlZCBoaW1zZWxmLCBDYWVzYXIgbGVkIGhpbSBhbG9uZyBieSB0aGUgaGFuZCwgYWx0aG91Z2ggaGUgZGlkIG5vdCB3aXNoIHRvIGdvLCBidXQgcmVzaXN0ZWQuIE5vdywgd2hlbiBoZSBoZWFyZCB0aGF0IHRoZXkgd2VyZSBidXJuaW5nIHRoZSBib2R5IG9mIENhZXNhciBpbiB0aGUgZm9ydW0sIGhlIHJvc2UgdXAgYW5kIHdlbnQgdGhpdGhlciBvdXQgb2YgcmVzcGVjdCwgYWx0aG91Z2ggaGUgaGFkIG1pc2dpdmluZ3MgYXJpc2luZyBmcm9tIGhpcyB2aXNpb24sIGFuZCB3YXMgYXQgdGhlIHNhbWUgdGltZSBpbiBhIGZldmVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BdCBzaWdodCBvZiBoaW0sIG9uZSBvZiB0aGUgbXVsdGl0dWRlIHRvbGQgaGlzIG5hbWUgdG8gYW5vdGhlciB3aG8gYXNrZWQgaGltIHdoYXQgaXQgd2FzLCBhbmQgaGUgdG8gYW5vdGhlciwgYW5kIGF0IG9uY2Ugd29yZCByYW4gdGhyb3VnaCB0aGUgd2hvbGUgdGhyb25nIHRoYXQgdGhpcyBtYW4gd2FzIG9uZSBvZiB0aGUgbXVyZGVyZXJzIG9mIENhZXNhci4gRm9yIHRoZXJlIHdhcyBhbW9uZyB0aGUgY29uc3BpcmF0b3JzIGEgbWFuIHdobyBib3JlIHRoaXMgc2FtZSBuYW1lIG9mIENpbm5hLCBhbmQgYXNzdW1pbmcgdGhhdCB0aGlzIG1hbiB3YXMgaGUsIHRoZSBjcm93ZCBydXNoZWQgdXBvbiBoaW0gYW5kIHRvcmUgaGltIGluIHBpZWNlcyBhbW9uZyB0aGVtLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDIwLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIHh4LiA1IGY8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSBtYWRlIEJydXR1cyBhbmQgQ2Fzc2l1cyBhZnJhaWQsIGFuZCBub3QgbWFueSBkYXlzIGFmdGVyd2FyZHMgdGhleSB3aXRoZHJldyBmcm9tIHRoZSBjaXR5LiBXaGF0IHRoZXkgZGlkIGFuZCBzdWZmZXJlZCBiZWZvcmUgdGhleSBkaWVkLCBoYXMgYmVlbiB0b2xkIGluIHRoZSBMaWZlIG9mIEJydXR1cy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjY5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHRpbWUgb2YgaGlzIGRlYXRoIENhZXNhciB3YXMgZnVsbHkgZmlmdHktc2l4IHllYXJzIG9sZCwgYnV0IGhlIGhhZCBzdXJ2aXZlZCBQb21wZXkgbm90IG11Y2ggbW9yZSB0aGFuIGZvdXIgeWVhcnMsIHdoaWxlIG9mIHRoZSBwb3dlciBhbmQgZG9taW5pb24gd2hpY2ggaGUgaGFkIHNvdWdodCBhbGwgaGlzIGxpZmUgYXQgc28gZ3JlYXQgcmlza3MsIGFuZCBiYXJlbHkgYWNoaWV2ZWQgYXQgbGFzdCwgb2YgdGhpcyBoZSBoYWQgcmVhcGVkIG5vIGZydWl0IGJ1dCB0aGUgbmFtZSBvZiBpdCBvbmx5LCBhbmQgYSBnbG9yeSB3aGljaCBoYWQgYXdha2VuZWQgZW52eSBvbiB0aGUgcGFydCBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGUgZ3JlYXQgZ3VhcmRpYW4tZ2VuaXVzIG9mIHRoZSBtYW4sIHdob3NlIGhlbHAgaGUgaGFkIGVuam95ZWQgdGhyb3VnaCBsaWZlLCBmb2xsb3dlZCB1cG9uIGhpbSBldmVuIGFmdGVyIGRlYXRoIGFzIGFuIGF2ZW5nZXIgb2YgaGlzIG11cmRlciwgZHJpdmluZyBhbmQgdHJhY2tpbmcgZG93biBoaXMgc2xheWVycyBvdmVyIGV2ZXJ5IGxhbmQgYW5kIHNlYSB1bnRpbCBub3Qgb25lIG9mIHRoZW0gd2FzIGxlZnQsIGJ1dCBldmVuIHRob3NlIHdobyBpbiBhbnkgd2F5IHNvZXZlciBlaXRoZXIgcHV0IGhhbmQgdG8gdGhlIGRlZWQgb3IgdG9vayBwYXJ0IGluIHRoZSBwbG90IHdlcmUgcHVuaXNoZWQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIGV2ZW50cyBvZiBtYW4ncyBvcmRlcmluZywgdGhlIG1vc3QgYW1hemluZyB3YXMgdGhhdCB3aGljaCBiZWZlbGwgQ2Fzc2l1czsgZm9yIGFmdGVyIGhpcyBkZWZlYXQgYXQgUGhpbGlwcGkgaGUgc2xldyBoaW1zZWxmIHdpdGggdGhhdCB2ZXJ5IGRhZ2dlciB3aGljaCBoZSBoYWQgdXNlZCBhZ2FpbnN0IENhZXNhcjsgYW5kIGFtb25nIGV2ZW50cyBvZiBkaXZpbmUgb3JkZXJpbmcsIHRoZXJlIHdhcyB0aGUgZ3JlYXQgY29tZXQsIHdoaWNoIHNob3dlZCBpdHNlbGYgaW4gZ3JlYXQgc3BsZW5kb3VyIGZvciBzZXZlbiBuaWdodHMgYWZ0ZXIgQ2Flc2FyJ3MgbXVyZGVyLCBhbmQgdGhlbiBkaXNhcHBlYXJlZCA7IGFsc28sIHRoZSBvYnNjdXJhdGlvbiBvZiB0aGUgc3VuJ3MgcmF5cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGR1cmluZyBhbGwgdGhhdCB5ZWFyIGl0cyBvcmIgcm9zZSBwYWxlIGFuZCB3aXRob3V0IHJhZGlhbmNlLCB3aGlsZSB0aGUgaGVhdCB0aGF0IGNhbWUgZG93biBmcm9tIGl0IHdhcyBzbGlnaHQgYW5kIGluZWZmZWN0dWFsLCBzbyB0aGF0IHRoZSBhaXIgaW4gaXRzIGNpcmN1bGF0aW9uIHdhcyBkYXJrIGFuZCBoZWF2eSBvd2luZyB0byB0aGUgZmVlYmxlbmVzcyBvZiB0aGUgd2FybXRoIHRoYXQgcGVuZXRyYXRlZCBpdCwgYW5kIHRoZSBmcnVpdHMsIGltcGVyZmVjdCBhbmQgaGFsZiByaXBlLCB3aXRoZXJlZCBhd2F5IGFuZCBzaHJpdmVsbGVkIHVwIG9uIGFjY291bnQgb2YgdGhlIGNvbGRuZXNzIG9mIHRoZSBhdG1vc3BoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UgdGhlIHBoYW50b20gdGhhdCBhcHBlYXJlZCB0byBCcnV0dXMgc2hvd2VkIHRoYXQgdGhlIG11cmRlciBvZiBDYWVzYXIgd2FzIG5vdCBwbGVhc2luZyB0byB0aGUgZ29kczsgYW5kIGl0IHdhcyBvbiB0aGlzIHdpc2UuIEFzIGhlIHdhcyBhYm91dCB0byB0YWtlIGhpcyBhcm15IGFjcm9zcyBmcm9tIEFieWRvcyB0byB0aGUgb3RoZXIgY29udGluZW50LCBoZSB3YXMgbHlpbmcgZG93biBhdCBuaWdodCwgYXMgaGlzIGN1c3RvbSB3YXMsIGluIGhpcyB0ZW50LCBub3Qgc2xlZXBpbmcsIGJ1dCB0aGlua2luZyBvZiB0aGUgZnV0dXJlOyBmb3IgaXQgaXMgc2FpZCB0aGF0IG9mIGFsbCBnZW5lcmFscyBCcnV0dXMgd2FzIGxlYXN0IGdpdmVuIHRvIHNsZWVwLCBhbmQgdGhhdCBoZSBuYXR1cmFsbHkgcmVtYWluZWQgYXdha2UgYSBsb25nZXIgdGltZSB0aGFuIGFueWJvZHkgZWxzZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIG5vdyBoZSB0aG91Z2h0IGhlIGhlYXJkIGEgbm9pc2UgYXQgdGhlIGRvb3IsIGFuZCBsb29raW5nIHRvd2FyZHMgdGhlIGxpZ2h0IG9mIHRoZSBsYW1wLCB3aGljaCB3YXMgc2xvd2x5IGdvaW5nIG91dCwgaGUgc2F3IGEgZmVhcmZ1bCB2aXNpb24gb2YgYSBtYW4gb2YgdW5uYXR1cmFsIHNpemUgYW5kIGhhcnNoIGFzcGVjdC4gQXQgZmlyc3QgaGUgd2FzIHRlcnJpZmllZCwgYnV0IHdoZW4gaGUgc2F3IHRoYXQgdGhlIHZpc2l0b3IgbmVpdGhlciBkaWQgbm9yIHNhaWQgYW55dGhpbmcsIGJ1dCBzdG9vZCBpbiBzaWxlbmNlIGJ5IGhpcyBjb3VjaCwgaGUgYXNrZWQgaGltIHdobyBoZSB3YXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIHBoYW50b20gYW5zd2VyZWQgaGltOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgYW0gdGh5IGV2aWwgZ2VuaXVzLCBCcnV0dXMsIGFuZCB0aG91IHNoYWx0IHNlZSBtZSBhdCBQaGlsaXBwaS48L3E+IEF0IHRoZSB0aW1lLCB0aGVuLCBCcnV0dXMgc2FpZCBjb3VyYWdlb3VzbHk6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBzaGFsbCBzZWUgdGhlZTs8L3E+IGFuZCB0aGUgaGVhdmVubHkgdmlzaXRvciBhdCBvbmNlIHdlbnQgYXdheS4gU3Vic2VxdWVudGx5LCBob3dldmVyLCB3aGVuIGFycmF5ZWQgYWdhaW5zdCBBbnRvbnkgYW5kIENhZXNhciBhdCBQaGlsaXBwaSwgaW4gdGhlIGZpcnN0IGJhdHRsZSBoZSBjb25xdWVyZWQgdGhlIGVuZW15IGluIGhpcyBmcm9udCwgcm91dGVkIGFuZCBzY2F0dGVyZWQgdGhlbSwgYW5kIHNhY2tlZCB0aGUgY2FtcCBvZiBDYWVzYXI7IAoJCQkJPG1pbGVzdG9uZSBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhcyBoZSB3YXMgYWJvdXQgdG8gZmlnaHQgdGhlIHNlY29uZCBiYXR0bGUsIHRoZSBzYW1lIHBoYW50b20gdmlzaXRlZCBoaW0gYWdhaW4gYXQgbmlnaHQsIGFuZCB0aG91Z2ggaXQgc2FpZCBub3RoaW5nIHRvIGhpbSwgQnJ1dHVzIHVuZGVyc3Rvb2QgaGlzIGZhdGUsIGFuZCBwbHVuZ2VkIGhlYWRsb25nIGludG8gZGFuZ2VyLiBIZSBkaWQgbm90IGZhbGwgaW4gYmF0dGxlLCBob3dldmVyLCBidXQgYWZ0ZXIgdGhlIHJvdXQgcmV0aXJlZCB0byBhIGNyZXN0IG9mIGdyb3VuZCwgcHV0IGhpcyBuYWtlZCBzd29yZCB0byBoaXMgYnJlYXN0ICh3aGlsZSBhIGNlcnRhaW4gZnJpZW5kLCBhcyB0aGV5IHNheSwgaGVscGVkIHRvIGRyaXZlIHRoZSBibG93IGhvbWUpLCBhbmQgc28gZGllZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAzNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1czwvdGl0bGU+LCB4eHh2aS48L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gNDguMSIgdmFsaWQ9InllcyI+eGx2aWlpLjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA1Mi4xIiB2YWxpZD0ieWVzIj5saWk8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICA8L2JvZHk+CiAgIDwvdGV4dD4KPGJvZHkgY2xhc3M9InRyYW5zbGF0aW9uIj4KICAgICAgICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5DQUVTQVI8L2hlYWQ+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgd2lmZSBvZiBDYWVzYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hbnkgdGhpbmsgdGhhdCBvcGVuaW5nIHBhcmFncmFwaHMgb2YgdGhpcyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaWZlPC90aXRsZT4sIGRlc2NyaWJpbmcgdGhlIGJpcnRoIGFuZCBib3lob29kIG9mIENhZXNhciwgaGF2ZSBiZWVuIGxvc3QuPC9ub3RlPiB3YXMgQ29ybmVsaWEsIHRoZSBkYXVnaHRlciBvZiB0aGUgQ2lubmEgd2hvIGhhZCBvbmNlIGhlbGQgdGhlIHNvbGUgcG93ZXIgYXQgUm9tZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg2IEIuQy4sIGFmdGVyIHRoZSBkZWF0aCBvZiBoaXMgY29sbGVhZ3VlLCBWYWxlcml1cyBGbGFjY3VzLjwvbm90ZT4gYW5kIHdoZW4gU3VsbGEgYmVjYW1lIG1hc3RlciBvZiBhZmZhaXJzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODIgQi5DLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBpeC4gMTwvYmlibD4gZi48L25vdGU+IGhlIGNvdWxkIG5vdCwgZWl0aGVyIGJ5IHByb21pc2VzIG9yIHRocmVhdHMsIGluZHVjZSBDYWVzYXIgdG8gcHV0IGhlciBhd2F5LCBhbmQgdGhlcmVmb3JlIGNvbmZpc2NhdGVkIGhlciBkb3dyeS4gTm93LCB0aGUgcmVhc29uIGZvciBDYWVzYXIncyBoYXRyZWQgb2YgU3VsbGEgd2FzIENhZXNhcidzIHJlbGF0aW9uc2hpcCB0byBNYXJpdXMuIEZvciBKdWxpYSwgYSBzaXN0ZXIgb2YgQ2Flc2FyJ3MgZmF0aGVyLCB3YXMgdGhlIHdpZmUgb2YgTWFyaXVzIHRoZSBFbGRlciwgYW5kIHRoZSBtb3RoZXIgb2YgTWFyaXVzIHRoZSBZb3VuZ2VyLCB3aG8gd2FzIHRoZXJlZm9yZSBDYWVzYXIncyBjb3VzaW4uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIENhZXNhciB3YXMgbm90IHNhdGlzZmllZCB0byBiZSBvdmVybG9va2VkIGF0IGZpcnN0IGJ5IFN1bGxhLCB3aG8gd2FzIGJ1c3kgd2l0aCBhIG11bHRpdHVkZSBvZiBwcm9zY3JpcHRpb25zLCBidXQgaGUgY2FtZSBiZWZvcmUgdGhlIHBlb3BsZSBhcyBjYW5kaWRhdGUgZm9yIGEgcHJpZXN0aG9vZCwgYWx0aG91Z2ggaGUgd2FzIG5vdCB5ZXQgbXVjaCBtb3JlIHRoYW4gYSBzdHJpcGxpbmcuIFRvIHRoaXMgY2FuZGlkYWN5IFN1bGxhIHNlY3JldGx5IG9wcG9zZWQgaGltc2VsZiwgYW5kIHRvb2sgbWVhc3VyZXMgdG8gbWFrZSBDYWVzYXIgZmFpbCBpbiBpdCwgYW5kIHdoZW4gaGUgd2FzIGRlbGliZXJhdGluZyBhYm91dCBwdXR0aW5nIGhpbSB0byBkZWF0aCBhbmQgc29tZSBzYWlkIHRoZXJlIHdhcyBubyByZWFzb24gZm9yIGtpbGxpbmcgYSBtZXJlIGJveSBsaWtlIGhpbSwgaGUgZGVjbGFyZWQgdGhhdCB0aGV5IGhhZCBubyBzZW5zZSBpZiB0aGV5IGRpZCBub3Qgc2VlIGluIHRoaXMgYm95IG1hbnkgTWFyaXVzZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5OYW0gQ2Flc2FyaSBtdWx0b3MgTWFyaW9zIGluZXNzZTwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDEiIHZhbGlkPSJ5ZXMiPlN1ZXRvbml1cywgPHRpdGxlPkRpdnVzIEp1bGl1czwvdGl0bGU+LCBpLjwvYmlibD4pLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIHNwZWVjaCB3YXMgcmVwb3J0ZWQgdG8gQ2Flc2FyLCBoZSBoaWQgaGltc2VsZiBmb3Igc29tZSB0aW1lLCB3YW5kZXJpbmcgYWJvdXQgaW4gdGhlIGNvdW50cnkgb2YgdGhlIFNhYmluZXMuIFRoZW4sIGFzIGhlIHdhcyBjaGFuZ2luZyBoaXMgYWJvZGUgYnkgbmlnaHQgb24gYWNjb3VudCBvZiBzaWNrbmVzcywgaGUgZmVsbCBpbiB3aXRoIHNvbGRpZXJzIG9mIFN1bGxhIHdobyB3ZXJlIHNlYXJjaGluZyB0aG9zZSByZWdpb25zIGFuZCBhcnJlc3RpbmcgdGhlIG1lbiBpbiBoaWRpbmcgdGhlcmUuIENhZXNhciBnYXZlIHRoZWlyIGxlYWRlciwgQ29ybmVsaXVzLCB0d28gdGFsZW50cyB0byBzZXQgaGltIGZyZWUsIGFuZCBhdCBvbmNlIHdlbnQgZG93biB0byB0aGUgc2VhIGFuZCBzYWlsZWQgdG8gS2luZyBOaWNvbWVkZXMgaW4gQml0aHluaWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyIHNlcnZlZCB1bmRlciBNYXJjdXMgVGhlcm11cywgcHJhZXRvciBvZiBBc2lhLCBpbiA4MS04MCBCLkMuLCBiZWluZyB0aGVuIG5pbmV0ZWVuIHllYXJzIG9mIGFnZSwgYW5kIGJ5IGhpbSB3YXMgc2VudCB0byBCaXRoeW5pYSBpbiBvcmRlciB0byByYWlzZSBhIGZsZWV0IHRvIGFzc2lzdCBpbiB0aGUgc2llZ2Ugb2YgTWl0eWxlbmUuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIGhpbSBoZSB0YXJyaWVkIGEgc2hvcnQgdGltZSwgYW5kIHRoZW4sIG9uIGhpcyB2b3lhZ2UgYmFjayw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gU3VldG9uaXVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRpdi4gSnVsLjwvdGl0bGU+IDQ8L2JpYmw+KSwgaXQgd2FzIG9uIGEgdm95YWdlIGZyb20gUm9tZSB0byBSaG9kZXMgKGFmdGVyIDc3IEIuQy4pIHRoYXQgQ2Flc2FyIHdhcyBjYXB0dXJlZCBieSBwaXJhdGVzLjwvbm90ZT4gd2FzIGNhcHR1cmVkLCBuZWFyIHRoZSBpc2xhbmQgUGhhcm1hY3VzYSwgYnkgcGlyYXRlcywgd2hvIGFscmVhZHkgYXQgdGhhdCB0aW1lIGNvbnRyb2xsZWQgdGhlIHNlYSB3aXRoIGxhcmdlIGFybWFtZW50cyBhbmQgY291bnRsZXNzIHNtYWxsIHZlc3NlbHMuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gYmVnaW4gd2l0aCwgdGhlbiwgd2hlbiB0aGUgcGlyYXRlcyBkZW1hbmRlZCB0d2VudHkgdGFsZW50cyBmb3IgaGlzIHJhbnNvbSwgaGUgbGF1Z2hlZCBhdCB0aGVtIGZvciBub3Qga25vd2luZyB3aG8gdGhlaXIgY2FwdGl2ZSB3YXMsIGFuZCBvZiBoaXMgb3duIGFjY29yZCBhZ3JlZWQgdG8gZ2l2ZSB0aGVtIGZpZnR5LiBJbiB0aGUgbmV4dCBwbGFjZSwgYWZ0ZXIgaGUgaGFkIHNlbnQgdmFyaW91cyBmb2xsb3dlcnMgdG8gdmFyaW91cyBjaXRpZXMgdG8gcHJvY3VyZSB0aGUgbW9uZXkgYW5kIHdhcyBsZWZ0IHdpdGggb25lIGZyaWVuZCBhbmQgdHdvIGF0dGVuZGFudHMgYW1vbmcgQ2lsaWNpYW5zLCBtb3N0IG11cmRlcm91cyBvZiBtZW4sIGhlIGhlbGQgdGhlbSBpbiBzdWNoIGRpc2RhaW4gdGhhdCB3aGVuZXZlciBoZSBsYXkgZG93biB0byBzbGVlcCBoZSB3b3VsZCBzZW5kIGFuZCBvcmRlciB0aGVtIHRvIHN0b3AgdGFsa2luZy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGVpZ2h0IGFuZCB0aGlydHkgZGF5cywgYXMgaWYgdGhlIG1lbiB3ZXJlIG5vdCBoaXMgd2F0Y2hlcnMsIGJ1dCBoaXMgcm95YWwgYm9keS1ndWFyZCwgaGUgc2hhcmVkIGluIHRoZWlyIHNwb3J0cyBhbmQgZXhlcmNpc2VzIHdpdGggZ3JlYXQgdW5jb25jZXJuLiBIZSBhbHNvIHdyb3RlIHBvZW1zIGFuZCBzdW5kcnkgc3BlZWNoZXMgd2hpY2ggaGUgcmVhZCBhbG91ZCB0byB0aGVtLCBhbmQgdGhvc2Ugd2hvIGRpZCBub3QgYWRtaXJlIHRoZXNlIGhlIHdvdWxkIGNhbGwgdG8gdGhlaXIgZmFjZXMgaWxsaXRlcmF0ZSBCYXJiYXJpYW5zLCBhbmQgb2Z0ZW4gbGF1Z2hpbmdseSB0aHJlYXRlbmVkIHRvIGhhbmcgdGhlbSBhbGwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwaXJhdGVzIHdlcmUgZGVsaWdodGVkIGF0IHRoaXMsIGFuZCBhdHRyaWJ1dGVkIGhpcyBib2xkbmVzcyBvZiBzcGVlY2ggdG8gYSBjZXJ0YWluIHNpbXBsaWNpdHkgYW5kIGJveWlzaCBtaXJ0aC4gQnV0IGFmdGVyIGhpcyByYW5zb20gaGFkIGNvbWUgZnJvbSBNaWxldHVzIGFuZCBoZSBoYWQgcGFpZCBpdCBhbmQgd2FzIHNldCBmcmVlLCBoZSBpbW1lZGlhdGVseSBtYW5uZWQgdmVzc2VscyBhbmQgcHV0IHRvIHNlYSBmcm9tIHRoZSBoYXJib3VyIG9mIE1pbGV0dXMgYWdhaW5zdCB0aGUgcm9iYmVycy4gSGUgY2F1Z2h0IHRoZW0sIHRvbywgc3RpbGwgbHlpbmcgYXQgYW5jaG9yIG9mZiB0aGUgaXNsYW5kLCBhbmQgZ290IG1vc3Qgb2YgdGhlbSBpbnRvIGhpcyBwb3dlci4gVGhlaXIgbW9uZXkgaGUgbWFkZSBoaXMgYm9vdHksIGJ1dCB0aGUgbWVuIHRoZW1zZWx2ZXMgaGUgbG9kZ2VkIGluIHRoZSBwcmlzb24gYXQgUGVyZ2FtdW0sIGFuZCB0aGVuIHdlbnQgaW4gcGVyc29uIHRvIEp1bml1cywgdGhlIGdvdmVybm9yIG9mIEFzaWEsIG9uIHRoZSBncm91bmQgdGhhdCBpdCBiZWxvbmdlZCB0byBoaW0sIGFzIHByYWV0b3Igb2YgdGhlIHByb3ZpbmNlLCB0byBwdW5pc2ggdGhlIGNhcHRpdmVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2luY2UgdGhlIHByYWV0b3IgY2FzdCBsb25naW5nIGV5ZXMgb24gdGhlaXIgbW9uZXksIHdoaWNoIHdhcyBubyBzbWFsbCBzdW0sIGFuZCBrZXB0IHNheWluZyB0aGF0IGhlIHdvdWxkIGNvbnNpZGVyIHRoZSBjYXNlIG9mIHRoZSBjYXB0aXZlcyBhdCBoaXMgbGVpc3VyZSwgQ2Flc2FyIGxlZnQgaGltIHRvIGhpcyBvd24gZGV2aWNlcywgd2VudCB0byBQZXJnYW11bSwgdG9vayB0aGUgcm9iYmVycyBvdXQgb2YgcHJpc29uLCBhbmQgY3J1Y2lmaWVkIHRoZW0gYWxsLCBqdXN0IGFzIGhlIGhhZCBvZnRlbiB3YXJuZWQgdGhlbSBvbiB0aGUgaXNsYW5kIHRoYXQgaGUgd291bGQgZG8sIHdoZW4gdGhleSB0aG91Z2h0IGhlIHdhcyBqb2tpbmcuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgU3VsbGEncyBwb3dlciBiZWluZyBub3cgb24gdGhlIHdhbmUsIGFuZCBDYWVzYXIncyBmcmllbmRzIGF0IGhvbWUgaW52aXRpbmcgaGltIHRvIHJldHVybiwgQ2Flc2FyIHNhaWxlZCB0byBSaG9kZXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gU3VldG9uaXVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRpdi4gSnVsLjwvdGl0bGU+IDQ8L2JpYmw+KSwgdGhpcyB2b3lhZ2UsIG9uIHdoaWNoIGhlIHdhcyBjYXB0dXJlZCBieSBwaXJhdGVzLCB3YXMgdW5kZXJ0YWtlbiB1bnN1Y2Nlc3NmdWwgcHJvc2VjdXRpb24gb2YgRG9sYWJlbGxhLCBtZW50aW9uZWQgaW4gdGhlIG5leHQgY2hhcHRlci4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMS40IiB2YWxpZD0ieWVzIj5ub3RlIG9uIGkuIDQ8L2JpYmw+Ljwvbm90ZT4gdG8gc3R1ZHkgdW5kZXIgQXBvbGxvbml1cyB0aGUgc29uIG9mIE1vbG9uLCBhbiBpbGx1c3RyaW91cyByaGV0b3JpY2lhbiB3aXRoIHRoZSByZXB1dGF0aW9uIG9mIGEgd29ydGh5IGNoYXJhY3Rlciwgb2Ygd2hvbSBDaWNlcm8gYWxzbyB3YXMgYSBwdXBpbC4gSXQgaXMgc2FpZCwgdG9vLCB0aGF0IENhZXNhciBoYWQgdGhlIGdyZWF0ZXN0IG5hdHVyYWwgdGFsZW50IGZvciBwb2xpdGljYWwgb3JhdG9yeSwgYW5kIGN1bHRpdmF0ZWQgaGlzIHRhbGVudCBtb3N0IGFtYml0aW91c2x5LCBzbyB0aGF0IGhlIGhhZCBhbiB1bmRpc3B1dGVkIHNlY29uZCByYW5rOyB0aGUgZmlyc3QgcmFuaywgaG93ZXZlciwgaGUgcmVub3VuY2VkLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5iZWNhdXNlIGhlIGRldm90ZWQgaGlzIGVmZm9ydHMgdG8gYmVpbmcgZmlyc3QgYXMgYSBzdGF0ZXNtYW4gYW5kIGNvbW1hbmRlciByYXRoZXIsIGFuZCBkaWQgbm90IGFjaGlldmUgdGhhdCBlZmZlY3RpdmVuZXNzIGluIG9yYXRvcnkgdG8gd2hpY2ggaGlzIG5hdHVyYWwgdGFsZW50IGRpcmVjdGVkIGhpbSwgaW4gY29uc2VxdWVuY2Ugb2YgaGlzIGNhbXBhaWducyBhbmQgb2YgaGlzIHBvbGl0aWNhbCBhY3Rpdml0aWVzLCBieSBtZWFucyBvZiB3aGljaCBoZSBhY3F1aXJlZCB0aGUgc3VwcmVtYWN5LiBBbmQgc28gaXQgd2FzIHRoYXQsIGF0IGEgbGF0ZXIgdGltZSwgaW4gaGlzIHJlcGx5IHRvIENpY2VybydzIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2F0byw8L3E+IGhlIGhpbXNlbGYgZGVwcmVjYXRlZCBjb21wYXJpc29uIGJldHdlZW4gdGhlIGRpY3Rpb24gb2YgYSBzb2xkaWVyIGFuZCB0aGUgZWxvcXVlbmNlIG9mIGFuIG9yYXRvciB3aG8gd2FzIGdpZnRlZCBieSBuYXR1cmUgYW5kIGhhZCBwbGVudHkgb2YgbGVpc3VyZSB0byBwdXJzdWUgaGlzIHN0dWRpZXMuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIHJldHVybiB0byBSb21lIGhlIGltcGVhY2hlZCBEb2xhYmVsbGE8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3NyBCLkMuPC9ub3RlPiBmb3IgbWFsYWRtaW5pc3RyYXRpb24gb2YgaGlzIHByb3ZpbmNlLCBhbmQgbWFueSBvZiB0aGUgY2l0aWVzIG9mIEdyZWVjZSBzdXBwbGllZCBoaW0gd2l0aCB0ZXN0aW1vbnkuIERvbGFiZWxsYSwgaXQgaXMgdHJ1ZSwgd2FzIGFjcXVpdHRlZCwgYnV0IENhZXNhciwgaW4gcmV0dXJuIGZvciB0aGUgemVhbG91cyBlZmZvcnRzIG9mIHRoZSBHcmVla3MgaW4gaGlzIGJlaGFsZiwgc2VydmVkIGFzIHRoZWlyIGFkdm9jYXRlIHdoZW4gdGhleSBwcm9zZWN1dGVkIFB1YmxpdXMgQW50b25pdXMgZm9yIGNvcnJ1cHRpb24gYmVmb3JlIE1hcmN1cyBMdWN1bGx1cywgdGhlIHByYWV0b3Igb2YgTWFjZWRvbmlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgd2FzIHNvIGVmZmVjdGl2ZSB0aGF0IEFudG9uaXVzIGFwcGVhbGVkIHRvIHRoZSB0cmlidW5lcyBhdCBSb21lLCBhbGxlZ2luZyB0aGF0IGhlIGNvdWxkIG5vdCBoYXZlIGEgZmFpciB0cmlhbCBpbiBHcmVlY2UgYWdhaW5zdCBHcmVla3MuIEF0IFJvbWUsIG1vcmVvdmVyLCBDYWVzYXIgd29uIGEgZ3JlYXQgYW5kIGJyaWxsaWFudCBwb3B1bGFyaXR5IGJ5IGhpcyBlbG9xdWVuY2UgYXMgYW4gYWR2b2NhdGUsIGFuZCBtdWNoIGdvb2Qgd2lsbCBmcm9tIHRoZSBjb21tb24gcGVvcGxlIGZvciB0aGUgZnJpZW5kbGluZXNzIG9mIGhpcyBtYW5uZXJzIGluIGludGVyY291cnNlIHdpdGggdGhlbSwgc2luY2UgaGUgd2FzIGluZ3JhdGlhdGluZyBiZXlvbmQgaGlzIHllYXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoYWQgYWxzbyBhIGxhcmdlIGFuZCBncmFkdWFsbHkgaW5jcmVhc2luZyBwb2xpdGljYWwgaW5mbHVlbmNlLCBpbiBjb25zZXF1ZW5jZSBvZiBoaXMgbGF2aXNoIGhvc3BpdGFsaXR5IGFuZCB0aGUgZ2VuZXJhbCBzcGxlbmRvdXIgb2YgaGlzIG1vZGUgb2YgbGlmZS4gQXQgZmlyc3QgaGlzIGVuZW1pZXMgdGhvdWdodCB0aGlzIGluZmx1ZW5jZSB3b3VsZCBxdWlja2x5IHZhbmlzaCB3aGVuIGhpcyBleHBlbmRpdHVyZXMgY2Vhc2VkLCBhbmQgdGhlcmVmb3JlIHN1ZmZlcmVkIGl0IHRvIHRocml2ZSBhbW9uZyB0aGUgY29tbW9uIHBlb3BsZTsgYnV0IGxhdGVyIG9uIHdoZW4gaXQgaGFkIGJlY29tZSBncmVhdCBhbmQgaGFyZCB0byBzdWJ2ZXJ0LCBhbmQgYWltZWQgZGlyZWN0bHkgYXQgYSBjb21wbGV0ZSByZXZvbHV0aW9uIGluIHRoZSBzdGF0ZSwgdGhleSBwZXJjZWl2ZWQgdGhhdCBubyBiZWdpbm5pbmdzIHNob3VsZCBiZSBjb25zaWRlcmVkIHRvbyBzbWFsbCB0byBiZSBxdWlja2x5IG1hZGUgZ3JlYXQgYnkgY29udGludWFuY2UsIGFmdGVyLCBjb250ZW1wdCBvZiB0aGVtIGhhcyBsZWZ0IHRoZW0gdW5vYnN0cnVjdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbGwgZXZlbnRzLCB0aGUgbWFuIHdobyBpcyB0aG91Z2h0IHRvIGhhdmUgYmVlbiB0aGUgZmlyc3QgdG8gc2VlIGJlbmVhdGggdGhlIHN1cmZhY2Ugb2YgQ2Flc2FyJ3MgcHVibGljIHBvbGljeSBhbmQgdG8gZmVhciBpdCwgYXMgb25lIG1pZ2h0IGZlYXIgdGhlIHNtaWxpbmcgc3VyZmFjZSBvZiB0aGUgc2VhLCBhbmQgd2hvIGNvbXByZWhlbmRlZCB0aGUgcG93ZXJmdWwgY2hhcmFjdGVyIGhpZGRlbiBiZW5lYXRoIGhpcyBraW5kbHkgYW5kIGNoZWVyZnVsIGV4dGVyaW9yLCBuYW1lbHkgQ2ljZXJvLCBzYWlkIHRoYXQgaW4gbW9zdCBvZiBDYWVzYXIncyBwb2xpdGljYWwgcGxhbnMgYW5kIHByb2plY3RzIGhlIHNhdyBhIHR5cmFubmljYWwgcHVycG9zZTsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiB0aGUgb3RoZXIgaGFuZCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hlbiBJIGxvb2sgYXQgaGlzIGhhaXIsIHdoaWNoIGlzIGFycmFuZ2VkIHdpdGggc28gbXVjaCBuaWNldHksIGFuZCBzZWUgaGltIHNjcmF0Y2hpbmcgaGlzIGhlYWQgd2l0aCBvbmUgZmluZ2VyLCBJIGNhbm5vdCB0aGluayB0aGF0IHRoaXMgbWFuIHdvdWxkIGV2ZXIgY29uY2VpdmUgb2Ygc28gZ3JlYXQgYSBjcmltZSBhcyB0aGUgb3ZlcnRocm93IG9mIHRoZSBSb21hbiBjb25zdGl0dXRpb248L3E+IFRoaXMsIGl0IGlzIHRydWUsIGJlbG9uZ3MgdG8gYSBsYXRlciBwZXJpb2QuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZpcnN0IHByb29mIG9mIHRoZSBwZW9wbGUncyBnb29kIHdpbGwgdG93YXJkcyBoaW0gaGUgcmVjZWl2ZWQgd2hlbiBoZSBjb21wZXRlZCBhZ2FpbnN0IENhaXVzIFBvcGlsaXVzIGZvciBhIG1pbGl0YXJ5IHRyaWJ1bmVzaGlwIGFuZCB3YXMgZWxlY3RlZCBvdmVyIGhpbTsgYSBzZWNvbmQgYW5kIG1vcmUgY29uc3BpY3VvdXMgcHJvb2YgaGUgcmVjZWl2ZWQgd2hlbiwgYXMgbmVwaGV3IG9mIEp1bGlhIHRoZSBkZWNlYXNlZCB3aWZlIG9mIE1hcml1cywgaGUgcHJvbm91bmNlZCBhIHNwbGVuZGlkIGVuY29taXVtIHVwb24gaGVyIGluIHRoZSBmb3J1bSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2OCBCLkMuPC9ub3RlPiBhbmQgaW4gaGVyIGZ1bmVyYWwgcHJvY2Vzc2lvbiB2ZW50dXJlZCB0byBkaXNwbGF5IGltYWdlcyBvZiBNYXJpdXMsIHdoaWNoIHdlcmUgdGhlbiBzZWVuIGZvciB0aGUgZmlyc3QgdGltZSBzaW5jZSB0aGUgYWRtaW5pc3RyYXRpb24gb2YgU3VsbGEsIGJlY2F1c2UgTWFyaXVzIGFuZCBoaXMgZnJpZW5kcyBoYWQgYmVlbiBwcm9ub3VuY2VkIHB1YmxpYyBlbmVtaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBuYW1lbHksIHNvbWUgY3JpZWQgb3V0IGFnYWluc3QgQ2Flc2FyIGZvciB0aGlzIHByb2NlZHVyZSwgdGhlIHBlb3BsZSBhbnN3ZXJlZCB0aGVtIHdpdGggbG91ZCBzaG91dHMsIHJlY2VpdmVkIENhZXNhciB3aXRoIGFwcGxhdXNlLCBhbmQgYWRtaXJlZCBoaW0gZm9yIGJyaW5naW5nIGJhY2sgYWZ0ZXIgc28gbG9uZyBhIHRpbWUsIGFzIGl0IHdlcmUgZnJvbSBIYWRlcywgdGhlIGhvbm91cnMgb2YgTWFyaXVzIGludG8gdGhlIGNpdHkuIE5vdywgaW4gdGhlIGNhc2Ugb2YgZWxkZXJseSB3b21lbiwgaXQgd2FzIGFuY2llbnQgUm9tYW4gdXNhZ2UgdG8gcHJvbm91bmNlIGZ1bmVyYWwgb3JhdGlvbnMgb3ZlciB0aGVtOyBidXQgaXQgd2FzIG5vdCBjdXN0b21hcnkgaW4gdGhlIGNhc2Ugb2YgeW91bmcgd29tZW4sIGFuZCBDYWVzYXIgd2FzIHRoZSBmaXJzdCB0byBkbyBzbyB3aGVuIGhpcyBvd24gd2lmZSBkaWVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDY4IEIuQy48L25vdGU+IFRoaXMgYWxzbyBicm91Z2h0IGhpbSBtdWNoIGZhdm91ciwgYW5kIHdvcmtlZCB1cG9uIHRoZSBzeW1wYXRoaWVzIG9mIHRoZSBtdWx0aXR1ZGUsIHNvIHRoYXQgdGhleSB3ZXJlIGZvbmQgb2YgaGltLCBhcyBhIG1hbiB3aG8gd2FzIGdlbnRsZSBhbmQgZnVsbCBvZiBmZWVsaW5nLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgZnVuZXJhbCBvZiBoaXMgd2lmZSwgaGUgd2VudCBvdXQgdG8gU3BhaW48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2NyBCLkMuPC9ub3RlPiBhcyBxdWFlc3RvciB1bmRlciBWZXR1cywgb25lIG9mIHRoZSBwcmFldG9ycywgd2hvbSBoZSBuZXZlciBjZWFzZWQgdG8gaG9sZCBpbiBoaWdoIGVzdGVlbSwgYW5kIHdob3NlIHNvbiwgaW4gdHVybiwgd2hlbiBoZSBoaW1zZWxmIHdhcyBwcmFldG9yLCBoZSBtYWRlIGhpcyBxdWFlc3Rvci4gQWZ0ZXIgaGUgaGFkIHNlcnZlZCBpbiB0aGlzIG9mZmljZSwgaGUgbWFycmllZCBmb3IgaGlzIHRoaXJkIHdpZmU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIgd2FzIGZpcnN0IG1hcnJpZWQgdG8gQ29zc3V0aWEsIHRoZSBkYXVnaHRlciBvZiBhIHJpY2ggUm9tYW4ga25pZ2h0Ljwvbm90ZT4gUG9tcGVpYSwgaGF2aW5nIGFscmVhZHkgYnkgQ29ybmVsaWEgYSBkYXVnaHRlciB3aG8gd2FzIGFmdGVyd2FyZHMgbWFycmllZCB0byBQb21wZXkgdGhlIEdyZWF0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgdW5zcGFyaW5nIGluIGhpcyBvdXRsYXlzIG9mIG1vbmV5LCBhbmQgd2FzIHRob3VnaHQgdG8gYmUgcHVyY2hhc2luZyBhIHRyYW5zaWVudCBhbmQgc2hvcnQtbGl2ZWQgZmFtZSBhdCBhIGdyZWF0IHByaWNlLCB0aG91Z2ggaW4gcmVhbGl0eSBoZSB3YXMgYnV5aW5nIHRoaW5ncyBvZiB0aGUgaGlnaGVzdCB2YWx1ZSBhdCBhIHNtYWxsIHByaWNlLiBXZSBhcmUgdG9sZCwgYWNjb3JkaW5nbHksIHRoYXQgYmVmb3JlIGhlIGVudGVyZWQgdXBvbiBhbnkgcHVibGljIG9mZmljZSBoZSB3YXMgdGhpcnRlZW4gaHVuZHJlZCB0YWxlbnRzIGluIGRlYnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBiZWluZyBhcHBvaW50ZWQgY3VyYXRvciBvZiB0aGUgQXBwaWFuIFdheSwgaGUgZXhwZW5kZWQgdXBvbiBpdCB2YXN0IHN1bXMgb2YgaGlzIG93biBtb25leTsgYW5kIGFnYWluLCBkdXJpbmcgaGlzIGFlZGlsZXNoaXAsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjYgQi5DLjwvbm90ZT4gaGUgZnVybmlzaGVkIHRocmVlIGh1bmRyZWQgYW5kIHR3ZW50eSBwYWlycyBvZiBnbGFkaWF0b3JzLCBhbmQgYnkgbGF2aXNoIHByb3Zpc2lvbiBiZXNpZGVzIGZvciB0aGVhdHJpY2FsIHBlcmZvcm1hbmNlcywgcHJvY2Vzc2lvbnMsIGFuZCBwdWJsaWMgYmFucXVldHMsIGhlIHdhc2hlZCBhd2F5IGFsbCBtZW1vcnkgb2YgdGhlIGFtYml0aW91cyBlZmZvcnRzIG9mIGhpcyBwcmVkZWNlc3NvcnMgaW4gdGhlIG9mZmljZS4gQnkgdGhlc2UgbWVhbnMgaGUgcHV0IHRoZSBwZW9wbGUgaW4gc3VjaCBhIGh1bW91ciB0aGF0IGV2ZXJ5IG1hbiBvZiB0aGVtIHdhcyBzZWVraW5nIG91dCBuZXcgb2ZmaWNlcyBhbmQgbmV3IGhvbm91cnMgd2l0aCB3aGljaCB0byByZXF1aXRlIGhpbS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3ZXJlIHR3byBwYXJ0aWVzIGluIHRoZSBjaXR5LCB0aGF0IG9mIFN1bGxhLCB3aGljaCBoYWQgYmVlbiBhbGwgcG93ZXJmdWwgc2luY2UgaGlzIGRheSwgYW5kIHRoYXQgb2YgTWFyaXVzLCB3aGljaCBhdCB0aGF0IHRpbWUgd2FzIGluIGFuIGFsdG9nZXRoZXIgbG93bHkgc3RhdGUsIGJlaW5nIGNvd2VkIGFuZCBzY2F0dGVyZWQuIFRoaXMgcGFydHkgQ2Flc2FyIHdpc2hlZCB0byByZXZpdmUgYW5kIGF0dGFjaCB0byBoaW1zZWxmLCBhbmQgdGhlcmVmb3JlLCB3aGVuIHRoZSBhbWJpdGlvdXMgZWZmb3J0cyBvZiBoaXMgYWVkaWxlc2hpcCB3ZXJlIGF0IHRoZWlyIGhlaWdodCwgaGUgaGFkIGltYWdlcyBvZiBNYXJpdXMgc2VjcmV0bHkgbWFkZSwgdG9nZXRoZXIgd2l0aCB0cm9waHktYmVhcmluZyBWaWN0b3JpZXMsIGFuZCB0aGVzZSBoZSBvcmRlcmVkIHRvIGJlIGNhcnJpZWQgYnkgbmlnaHQgYW5kIHNldCB1cCBvbiB0aGUgQ2FwaXRvbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZGF5LWJyZWFrIHRob3NlIHdobyBiZWhlbGQgYWxsIHRoZXNlIG9iamVjdHMgZ2xpdHRlcmluZyB3aXRoIGdvbGQgYW5kIGZhc2hpb25lZCB3aXRoIHRoZSBtb3N0IGV4cXVpc2l0ZSBhcnQgKGFuZCB0aGV5IGJvcmUgaW5zY3JpcHRpb25zIHNldHRpbmcgZm9ydGggdGhlIENpbWJyaWFuIHN1Y2Nlc3NlcyBvZiBNYXJpdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDExLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+TWFyaXVzPC90aXRsZT4sIGNoYXB0ZXJzIHhpLjwvYmlibD4tPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMjIuMSIgdmFsaWQ9InllcyI+eHhpaTwvYmlibD4uPC9ub3RlPikgd2VyZSBhbWF6ZWQgYXQgdGhlIGRhcmluZyBvZiB0aGUgbWFuIHdobyBoYWQgc2V0IHRoZW0gdXAgKGZvciBpdCB3YXMgZXZpZGVudCB3aG8gaGFkIGRvbmUgaXQpLCBhbmQgdGhlIHJlcG9ydCBvZiBpdCBxdWlja2x5IHNwcmVhZGluZyBicm91Z2h0IGV2ZXJ5Ym9keSB0b2dldGhlciBmb3IgdGhlIHNpZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc29tZSBjcmllZCBvdXQgdGhhdCBDYWVzYXIgd2FzIHNjaGVtaW5nIHRvIHVzdXJwIHNvbGUgcG93ZXIgaW4gdGhlIHN0YXRlIHdoZW4gaGUgdGh1cyByZXZpdmVkIGhvbm91cnMgd2hpY2ggaGFkIGJlZW4gYnVyaWVkIGJ5IGxhd3MgYW5kIGRlY3JlZXMsIGFuZCB0aGF0IHRoaXMgcHJvY2VlZGluZyB3YXMgYSB0ZXN0IG9mIHRoZSBwZW9wbGUsIHdob3NlIGZlZWxpbmdzIHRvd2FyZHMgaGltIGhlIGhhZCBwcmV2aW91c2x5IHNvZnRlbmVkLCB0byBzZWUgd2hldGhlciB0aGV5IGhhZCBiZWVuIG1hZGUgZG9jaWxlIGJ5IGhpcyBhbWJpdGlvdXMgZGlzcGxheXMgYW5kIHdvdWxkIHBlcm1pdCBoaW0gdG8gYW11c2UgaGltc2VsZiB3aXRoIHN1Y2ggaW5ub3ZhdGlvbnMuIFRoZSBwYXJ0aXNhbnMgb2YgTWFyaXVzLCBob3dldmVyLCBlbmNvdXJhZ2VkIG9uZSBhbm90aGVyIGFuZCBzaG93ZWQgdGhlbXNlbHZlcyBvbiBhIHN1ZGRlbiBpbiBhbWF6aW5nIG51bWJlcnMsIGFuZCBmaWxsZWQgdGhlIENhcGl0b2wgd2l0aCB0aGVpciBhcHBsYXVzZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TWFueSwgdG9vLCB3ZXJlIG1vdmVkIHRvIHRlYXJzIG9mIGpveSB3aGVuIHRoZXkgYmVoZWxkIHRoZSBmZWF0dXJlcyBvZiBNYXJpdXMsIGFuZCBDYWVzYXIgd2FzIGhpZ2hseSBleHRvbGxlZCBieSB0aGVtLCBhbmQgcmVnYXJkZWQgYXMgYWJvdmUgYWxsIG90aGVycyB3b3J0aHkgb2YgaGlzIGtpbnNoaXAgd2l0aCBNYXJpdXMuIEJ1dCB3aGVuIHRoZSBzZW5hdGUgbWV0IHRvIGRpc2N1c3MgdGhlc2UgbWF0dGVycywgQ2F0dWx1cyBMdXRhdGl1cywgYSBtYW4gb2YgdGhlIGhpZ2hlc3QgcmVwdXRlIGF0IHRoYXQgdGltZSBpbiBSb21lLCByb3NlIHVwIGFuZCBkZW5vdW5jZWQgQ2Flc2FyLCB1dHRlcmluZyB0aGUgbWVtb3JhYmxlIHdvcmRzOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vIGxvbmdlciwgaW5kZWVkLCBieSBzYXBwaW5nIGFuZCBtaW5pbmcsIENhZXNhciwgYnV0IHdpdGggZW5naW5lcyBvZiB3YXIgYXJ0IHRob3UgY2FwdHVyaW5nIHRoZSBnb3Zlcm5tZW50PC9xPiBDYWVzYXIsIGhvd2V2ZXIsIGRlZmVuZGVkIGhpbXNlbGYgYWdhaW5zdCB0aGlzIGNoYXJnZSBhbmQgY29udmluY2VkIHRoZSBzZW5hdGUsIHdoZXJldXBvbiBoaXMgYWRtaXJlcnMgd2VyZSBzdGlsbCBtb3JlIGVsYXRlZCBhbmQgZXhob3J0ZWQgaGltIG5vdCB0byBsb3dlciBoaXMgcHJldGVuc2lvbnMgZm9yIGFueSBtYW4sIHNpbmNlIHRoZSBwZW9wbGUgd291bGQgYmUgZ2xhZCB0byBoYXZlIGhpbSB0cml1bXBoIG92ZXIgYWxsIG9wcG9zaXRpb24gYW5kIGJlIHRoZSBmaXJzdCBtYW4gaW4gdGhlIHN0YXRlLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSwgdG9vLCBNZXRlbGx1cywgdGhlIDxmb3JlaWduIGxhbmc9ImxhIj5wb250aWZleCBtYXhpbXVzPC9mb3JlaWduPiwgb3IgPGdsb3NzPmhpZ2ggcHJpZXN0PC9nbG9zcz4sIGRpZWQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjMgQi5DLjwvbm90ZT4gYW5kIHRob3VnaCBJc2F1cmljdXMgYW5kIENhdHVsdXMgd2VyZSBjYW5kaWRhdGVzIGZvciB0aGUgcHJpZXN0aG9vZCwgd2hpY2ggd2FzIGFuIG9iamVjdCBvZiBncmVhdCBhbWJpdGlvbiwgYW5kIHRob3VnaCB0aGV5IHdlcmUgbW9zdCBpbGx1c3RyaW91cyBtZW4gYW5kIG9mIHRoZSBncmVhdGVzdCBpbmZsdWVuY2UgaW4gdGhlIHNlbmF0ZSwgQ2Flc2FyIHdvdWxkIG5vdCBnaXZlIHdheSB0byB0aGVtLCBidXQgcHJlc2VudGVkIGhpbXNlbGYgdG8gdGhlIHBlb3BsZSBhcyBhIHJpdmFsIGNhbmRpZGF0ZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZhdm91ciBvZiB0aGUgZWxlY3RvcnMgYXBwZWFyZWQgdG8gYmUgYWJvdXQgZXF1YWxseSBkaXZpZGVkLCBhbmQgdGhlcmVmb3JlIENhdHVsdXMsIHdobywgYXMgdGhlIHdvcnRoaWVyIG9mIENhZXNhcidzIGNvbXBldGl0b3JzLCBkcmVhZGVkIG1vcmUgdGhlIHVuY2VydGFpbnR5IG9mIHRoZSBpc3N1ZSwgc2VudCBhbmQgdHJpZWQgdG8gaW5kdWNlIENhZXNhciB0byBkZXNpc3QgZnJvbSBoaXMgYW1iaXRpb3VzIHByb2plY3QsIG9mZmVyaW5nIGhpbSBsYXJnZSBzdW1zIG9mIG1vbmV5LiBCdXQgQ2Flc2FyIGRlY2xhcmVkIHRoYXQgaGUgd291bGQgY2FycnkgdGhlIGNvbnRlc3QgdGhyb3VnaCBldmVuIHRob3VnaCBoZSBoYWQgdG8gYm9ycm93IHN0aWxsIGxhcmdlciBzdW1zLjwvcD4KICAgICAgICAgPHA+VGhlIGRheSBmb3IgdGhlIGVsZWN0aW9uIGNhbWUsIGFuZCBhcyBDYWVzYXIncyBtb3RoZXIgYWNjb21wYW5pZWQgaGltIHRvIHRoZSBkb29yIGluIHRlYXJzLCBoZSBraXNzZWQgaGVyIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1vdGhlciwgdG9kYXkgdGhvdSBzaGFsdCBzZWUgdGh5IHNvbiBlaXRoZXIgPGZvcmVpZ24gbGFuZz0ibGEiPnBvbnRpZmV4IG1heGltdXM8L2ZvcmVpZ24+IG9yIGFuIGV4aWxlPC9xPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGNvbnRlc3Qgd2FzIHNoYXJwLCBidXQgd2hlbiB0aGUgdm90ZSB3YXMgdGFrZW4gQ2Flc2FyIHByZXZhaWxlZCwgYW5kIHRoZXJlYnkgbWFkZSB0aGUgc2VuYXRlIGFuZCBub2JsZXMgYWZyYWlkIHRoYXQgaGUgd291bGQgbGVhZCB0aGUgcGVvcGxlIG9uIHRvIGV2ZXJ5IGV4dHJlbWUgb2YgcmVja2xlc3NuZXNzLiBUaGVyZWZvcmUgUGlzbyBhbmQgQ2F0dWx1cyBibGFtZWQgQ2ljZXJvIGZvciBoYXZpbmcgc3BhcmVkIENhZXNhciB3aGVuLCBpbiB0aGUgYWZmYWlyIG9mIENhdGlsaW5lLCBoZSBnYXZlIGhpcyBlbmVtaWVzIGEgaG9sZCB1cG9uIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0aWxpbmUsIG5hbWVseSwgaGFkIHB1cnBvc2VkIG5vdCBvbmx5IHRvIHN1YnZlcnQgdGhlIGNvbnN0aXR1dGlvbiwgYnV0IHRvIGRlc3Ryb3kgdGhlIHdob2xlIGdvdmVybm1lbnQgYW5kIHRocm93IGV2ZXJ5dGhpbmcgaW50byBjb25mdXNpb24uIEhlIGhpbXNlbGYsIGhvd2V2ZXIsIHdhcyBleHBlbGxlZCBmcm9tIHRoZSBjaXR5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDYzIEIuQy4gQ2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAxMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4LjwvYmlibD4tPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMjIuMSIgdmFsaWQ9InllcyI+eHhpaTwvYmlibD4uPC9ub3RlPiBoYXZpbmcgYmVlbiBvdmVyd2hlbG1lZCBieSBwcm9vZnMgYnkgbGVzc2VyIGluaXF1aXRpZXMgYmVmb3JlIGhpcyBtb3N0IGZhciByZWFjaGluZyBwbGFucyB3ZXJlIGRpc2NvdmVyZWQ7IGJ1dCBoZSBsZWZ0IExlbnR1bHVzIGFuZCBDZXRoZWd1cyBiZWhpbmQgaGltIGluIHRoZSBjaXR5IHRvIHByb21vdGUgdGhlIGNvbnNwaXJhY3kgaW4gaGlzIHBsYWNlLiBOb3csIHdoZXRoZXIgb3Igbm90IENhZXNhciBzZWNyZXRseSBnYXZlIHRoZXNlIG1lbiBhbnkgY291bnRlbmFuY2UgYW5kIGhlbHAsIGlzIHVuY2VydGFpbjsgYnV0IGFmdGVyIHRoZXkgaGFkIGJlZW4gb3ZlcndoZWxtaW5nbHkgY29udmljdGVkIGluIHRoZSBzZW5hdGUsIGFuZCBDaWNlcm8gdGhlIGNvbnN1bCBhc2tlZCBlYWNoIHNlbmF0b3IgdG8gZ2l2ZSBoaXMgb3BpbmlvbiBvbiB0aGUgbWFubmVyIG9mIHRoZWlyIHB1bmlzaG1lbnQsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRoZSByZXN0LCBkb3duIHRvIENhZXNhciwgdXJnZWQgdGhhdCB0aGV5IGJlIHB1dCB0byBkZWF0aCwgYnV0IENhZXNhciByb3NlIGluIGhpcyBwbGFjZSBhbmQgZGVsaXZlcmVkIGEgbG9uZyBhbmQgc3R1ZGllZCBzcGVlY2ggYWdhaW5zdCB0aGlzLiBIZSBwbGVhZGVkIHRoYXQgdG8gcHV0IHRvIGRlYXRoIHdpdGhvdXQgbGVnYWwgdHJpYWwgbWVuIG9mIGhpZ2ggcmFuayBhbmQgYnJpbGxpYW50IGxpbmVhZ2Ugd2FzIG5vdCwgaW4gaGlzIG9waW5pb24sIHRyYWRpdGlvbmFsIG9yIGp1c3QsIGV4Y2VwdCB1bmRlciBleHRyZW1lc3QgbmVjZXNzaXR5OyBidXQgdGhhdCBpZiB0aGV5IHNob3VsZCBiZSBib3VuZCBhbmQga2VwdCBpbiBjdXN0b2R5LCBpbiBzdWNoIGNpdGllcyBvZiBJdGFseSBhcyBDaWNlcm8gaGltc2VsZiBtaWdodCBlbGVjdCwgdW50aWwgdGhlIHdhciBhZ2FpbnN0IENhdGlsaW5lIGhhZCBiZWVuIGJyb3VnaHQgdG8gYSBzdWNjZXNzZnVsIGVuZCwgdGhlIHNlbmF0ZSBjb3VsZCBhZnRlcndhcmRzLCBpbiBhIHRpbWUgb2YgcGVhY2UgYW5kIGF0IHRoZWlyIGxlaXN1cmUsIHZvdGUgdXBvbiB0aGUgY2FzZSBvZiBlYWNoIG9uZSBvZiB0aGVtLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgb3BpbmlvbiBzZWVtZWQgc28gaHVtYW5lLCBhbmQgdGhlIHNwZWVjaCBpbiBzdXBwb3J0IG9mIGl0IHdhcyBtYWRlIHdpdGggc3VjaCBwb3dlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyMi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gTWlub3I8L3RpdGxlPiwgeHhpaS4gNDwvYmlibD4gZi48L25vdGU+IHRoYXQgbm90IG9ubHkgdGhvc2Ugd2hvIHJvc2UgdG8gc3BlYWsgYWZ0ZXIgQ2Flc2FyIHNpZGVkIHdpdGggaGltLCBidXQgbWFueSBhbHNvIG9mIHRob3NlIHdobyBoYWQgcHJlY2VkZWQgaGltIHRvb2sgYmFjayB0aGUgb3BpbmlvbnMgd2hpY2ggdGhleSBoYWQgZXhwcmVzc2VkIGFuZCB3ZW50IG92ZXIgdG8gaGlzLCB1bnRpbCB0aGUgcXVlc3Rpb24gY2FtZSByb3VuZCB0byBDYXRvIGFuZCBDYXR1bHVzLiBUaGVzZSB3YXJtbHkgb3Bwb3NlZCBDYWVzYXIncyBwcm9wb3NhbCwgYW5kIENhdG8gZXZlbiBoZWxwZWQgdG8gcmFpc2Ugc3VzcGljaW9uIGFnYWluc3QgQ2Flc2FyIGJ5IHdoYXQgaGUgc2FpZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gTWlub3I8L3RpdGxlPiwgY2hhcHRlciB4eGlpaTwvYmlibD4uPC9ub3RlPiBBcyBhIHJlc3VsdCwgdGhlIG1lbiB3ZXJlIGhhbmRlZCBvdmVyIHRvIHRoZSBleGVjdXRpb25lciwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG1hbnkgb2YgdGhlIHlvdW5nIG1lbiB3aG8gYXQgdGhhdCB0aW1lIGZvcm1lZCBhIGJvZHktZ3VhcmQgZm9yIENpY2VybyByYW4gdG9nZXRoZXIgd2l0aCBkcmF3biBzd29yZHMgYW5kIHRocmVhdGVuZWQgQ2Flc2FyIGFzIGhlIHdhcyBsZWF2aW5nIHRoZSBzZW5hdGUuIEJ1dCBDdXJpbywgYXMgd2UgYXJlIHRvbGQsIHRocmV3IGhpcyB0b2dhIHJvdW5kIENhZXNhciBhbmQgZ290IGhpbSBhd2F5LCB3aGlsZSBDaWNlcm8gaGltc2VsZiwgd2hlbiB0aGUgeW91bmcgbWVuIGxvb2tlZCB0byBoaW0gZm9yIGEgc2lnbiwgc2hvb2sgaGlzIGhlYWQsIGVpdGhlciB0aHJvdWdoIGZlYXIgb2YgdGhlIHBlb3BsZSwgb3IgYmVjYXVzZSBoZSB0aG91Z2h0IHRoZSBtdXJkZXIgd291bGQgYmUgd2hvbGx5IGNvbnRyYXJ5IHRvIGxhdyBhbmQganVzdGljZS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpZiB0aGlzIGlzIHRydWUsIEkgZG8gbm90IHNlZSB3aHkgQ2ljZXJvIGRpZCBub3QgbWVudGlvbiBpdCBpbiB0aGUgdHJlYXRpc2Ugb24gaGlzIGNvbnN1bHNoaXA7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm8gbG9uZ2VyIGV4dGFudC48L25vdGU+IGhvd2V2ZXIsIGhlIHdhcyBhZnRlcndhcmRzIGJsYW1lZCBmb3Igbm90IGhhdmluZyBpbXByb3ZlZCB0aGF0IGJlc3Qgb2YgYWxsIG9wcG9ydHVuaXRpZXMgZm9yIHJlbW92aW5nIENhZXNhci4gSW5zdGVhZCwgaGUgc2hvd2VkIGEgY293YXJkbHkgZmVhciBvZiB0aGUgcGVvcGxlLCB3aG8gd2VyZSBleHRyYXZhZ2FudGx5IGF0dGFjaGVkIHRvIENhZXNhcjsgaW4gZmFjdCwgYSBmZXcgZGF5cyBhZnRlcndhcmQsIHdoZW4gQ2Flc2FyIGNhbWUgaW50byB0aGUgc2VuYXRlIGFuZCB0cmllZCB0byBkZWZlbmQgaGltc2VsZiBpbiB0aGUgbWF0dGVycyB3aGVyZWluIHN1c3BpY2lvbiBoYWQgYmVlbiBmaXhlZCB1cG9uIGhpbSwgYW5kIG1ldCB3aXRoIGEgdHVtdWx0IG9mIGRpc2FwcHJvdmFsLCB0aGUgcGVvcGxlLCBzZWVpbmcgdGhhdCB0aGUgc2Vzc2lvbiBvZiB0aGUgc2VuYXRlIHdhcyBsYXN0aW5nIGEgbG9uZ2VyIHRpbWUgdGhhbiB1c3VhbCwgY2FtZSB1cCB3aXRoIGxvdWQgY3JpZXMgYW5kIHN1cnJvdW5kZWQgdGhlIHNlbmF0ZS1ob3VzZSwgZGVtYW5kaW5nIENhZXNhciwgYW5kIG9yZGVyaW5nIHRoZSBzZW5hdGUgdG8gbGV0IGhpbSBnby4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGZvciB0aGlzIHJlYXNvbiwgdG9vLCB0aGF0IENhdG8sIGZlYXJpbmcgYWJvdmUgYWxsIHRoaW5ncyBhIHJldm9sdXRpb25hcnkgbW92ZW1lbnQgc2V0IG9uIGZvb3QgYnkgdGhlIHBvb3JlciBjbGFzc2VzLCB3aG8gd2VyZSBzZXR0aW5nIHRoZSB3aG9sZSBtdWx0aXR1ZGUgb24gZmlyZSB3aXRoIHRoZSBob3BlcyB3aGljaCB0aGV5IGZpeGVkIHVwb24gQ2Flc2FyLCBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byBhc3NpZ24gdGhlbSBhIG1vbnRobHkgYWxsb3dhbmNlIG9mIGdyYWluLCBpbiBjb25zZXF1ZW5jZSBvZiB3aGljaCBhbiBhbm51YWwgb3V0bGF5IG9mIHNldmVuIG1pbGxpb24gZml2ZSBodW5kcmVkIHRob3VzYW5kIGRyYWNobWFzIHdhcyBhZGRlZCB0byB0aGUgb3RoZXIgZXhwZW5kaXR1cmVzIG9mIHRoZSBzdGF0ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gTWlub3I8L3RpdGxlPiwgeHh2aS4gMTwvYmlibD4uPC9ub3RlPiBIb3dldmVyLCB0aGUgZ3JlYXQgZmVhciB3aGljaCBwcmV2YWlsZWQgYXQgdGhlIHRpbWUgd2FzIG1hbmlmZXN0bHkgcXVlbmNoZWQgYnkgdGhpcyBtZWFzdXJlLCBhbmQgdGhlIGdyZWF0ZXN0IHBhcnQgb2YgQ2Flc2FyJ3MgcG93ZXIgd2FzIGJyb2tlbiBkb3duIGFuZCBkaXNzaXBhdGVkIGluIHRoZSBuaWNrIG9mIHRpbWUsIHNpbmNlIGhlIHdhcyBwcmFldG9yIGVsZWN0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciA2MiBCLkMuPC9ub3RlPiBhbmQgd291bGQgYmUgbW9yZSBmb3JtaWRhYmxlIG9uIGFjY291bnQgb2YgaGlzIG9mZmljZS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGVyZSB3ZXJlIG5vIGRpc3R1cmJhbmNlcyBpbiBjb25zZXF1ZW5jZSBvZiBDYWVzYXIncyBwcmFldG9yc2hpcCwgYnV0IGFuIHVucGxlYXNhbnQgaW5jaWRlbnQgaGFwcGVuZWQgaW4gaGlzIGZhbWlseS4gUHVibGl1cyBDbG9kaXVzIHdhcyBhIG1hbiBvZiBwYXRyaWNpYW4gYmlydGgsIGFuZCBjb25zcGljdW91cyBmb3Igd2VhbHRoIGFuZCBlbG9xdWVuY2UsIGJ1dCBpbiBpbnNvbGVuY2UgYW5kIGVmZnJvbnRlcnkgaGUgc3VycGFzc2VkIGFsbCB0aGUgbm90b3Jpb3VzIHNjb3VuZHJlbHMgb2YgaGlzIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIHdhcyBpbiBsb3ZlIHdpdGggUG9tcGVpYSB0aGUgd2lmZSBvZiBDYWVzYXIsIGFuZCBzaGUgd2FzIG5vdCB1bndpbGxpbmcuIEJ1dCBjbG9zZSB3YXRjaCB3YXMga2VwdCB1cG9uIHRoZSB3b21lbidzIGFwYXJ0bWVudHMsIGFuZCBBdXJlbGlhLCBDYWVzYXIncyBtb3RoZXIsIGEgd29tYW4gb2YgZGlzY3JldGlvbiwgd291bGQgbmV2ZXIgbGV0IHRoZSB5b3VuZyB3aWZlIG91dCBvZiBoZXIgc2lnaHQsIGFuZCBtYWRlIGl0IGRpZmZpY3VsdCBhbmQgZGFuZ2Vyb3VzIGZvciB0aGUgbG92ZXJzIHRvIGhhdmUgYW4gaW50ZXJ2aWV3LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHRoZSBSb21hbnMgaGF2ZSBhIGdvZGRlc3Mgd2hvbSB0aGV5IGNhbGwgQm9uYSwgY29ycmVzcG9uZGluZyB0byB0aGUgR3JlZWsgR3luYWVjZWlhLiBUaGUgUGhyeWdpYW5zIGNsYWltIHRoaXMgZ29kZGVzcyBhcyB0aGVpciBvd24sIGFuZCBzYXkgdGhhdCBzaGUgd2FzIHRoZSBtb3RoZXIgb2YgS2luZyBNaWRhczsgdGhlIFJvbWFucyBzYXkgc2hlIHdhcyBhIERyeWFkIG55bXBoIGFuZCB0aGUgd2lmZSBvZiBGYXVudXM7IHRoZSBHcmVla3MgdGhhdCBzaGUgd2FzIHRoZSB1bm5hbWVhYmxlIG9uZSBhbW9uZyB0aGUgbW90aGVycyBvZiBEaW9ueXN1cy4gQW5kIHRoaXMgaXMgdGhlIHJlYXNvbiB3aHkgdGhlIHdvbWVuIGNvdmVyIHRoZWlyIGJvb3RocyB3aXRoIHZpbmUtYnJhbmNoZXMgd2hlbiB0aGV5IGNlbGVicmF0ZSBoZXIgZmVzdGl2YWwsIGFuZCB3aHkgYSBzYWNyZWQgc2VycGVudCBpcyBlbnRocm9uZWQgYmVzaWRlIHRoZSBnb2RkZXNzIGluIGNvbmZvcm1pdHkgd2l0aCB0aGUgbXl0aC4gSXQgaXMgbm90IGxhd2Z1bCBmb3IgYSBtYW4gdG8gYXR0ZW5kIHRoZSBzYWNyZWQgY2VyZW1vbmllcywgbm9yIGV2ZW4gdG8gYmUgaW4gdGhlIGhvdXNlIHdoZW4gdGhleSBhcmUgY2VsZWJyYXRlZDsgYnV0IHRoZSB3b21lbiwgYXBhcnQgYnkgdGhlbXNlbHZlcywgYXJlIHNhaWQgdG8gcGVyZm9ybSBtYW55IHJpdGVzIGR1cmluZyB0aGVpciBzYWNyZWQgc2VydmljZSB3aGljaCBhcmUgT3JwaGljIGluIHRoZWlyIGNoYXJhY3Rlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHdoZW4gdGhlIHRpbWUgZm9yIHRoZSBmZXN0aXZhbCBpcyBhdCBoYW5kLCB0aGUgY29uc3VsIG9yIHByYWV0b3IgYXQgd2hvc2UgaG91c2UgaXQgaXMgdG8gYmUgaGVsZCBnb2VzIGF3YXksIGFuZCBldmVyeSBtYWxlIHdpdGggaGltLCB3aGlsZSBoaXMgd2lmZSB0YWtlcyBwb3NzZXNzaW9uIG9mIHRoZSBwcmVtaXNlcyBhbmQgcHV0cyB0aGVtIGluIGR1ZSBhcnJheS4gVGhlIG1vc3QgaW1wb3J0YW50IHJpdGVzIGFyZSBjZWxlYnJhdGVkIGJ5IG5pZ2h0LCB3aGVuIG1pcnRoIGF0dGVuZHMgdGhlIHJldmVscywgYW5kIG11Y2ggbXVzaWMsIHRvbywgaXMgaGVhcmQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIG9mIHdoaWNoIEkgc3BlYWssIFBvbXBlaWEgd2FzIGNlbGVicmF0aW5nIHRoaXMgZmVzdGl2YWwsIGFuZCBDbG9kaXVzLCB3aG8gd2FzIHN0aWxsIGJlYXJkbGVzcyBhbmQgb24gdGhpcyBhY2NvdW50IHRob3VnaHQgdG8gcGFzcyB1bm5vdGljZWQsIGFzc3VtZWQgdGhlIGRyZXNzIGFuZCBpbXBsZW1lbnRzIG9mIGEgbHV0ZS1naXJsIGFuZCB3ZW50IHRvIHRoZSBob3VzZSwgbG9va2luZyBsaWtlIGEgeW91bmcgd29tYW4uIEhlIGZvdW5kIHRoZSBkb29yIG9wZW4sIGFuZCB3YXMgYnJvdWdodCBpbiBzYWZlbHkgYnkgdGhlIG1haWQtc2VydmFudCB0aGVyZSwgd2hvIHdhcyBpbiB0aGUgc2VjcmV0OyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgYWZ0ZXIgc2hlIGhhZCBydW4gb24gYWhlYWQgdG8gdGVsbCBQb21wZWlhIGFuZCBzb21lIHRpbWUgaGFkIGVsYXBzZWQsIENsb2RpdXMgaGFkIG5vdCB0aGUgcGF0aWVuY2UgdG8gd2FpdCB3aGVyZSBoZSBoYWQgYmVlbiBsZWZ0LCBhbmQgc28sIGFzIGhlIHdhcyB3YW5kZXJpbmcgYWJvdXQgaW4gdGhlIGhvdXNlIChhIGxhcmdlIG9uZSkgYW5kIHRyeWluZyB0byBhdm9pZCB0aGUgbGlnaHRzLCBhbiBhdHRlbmRhbnQgb2YgQXVyZWxpYSBjYW1lIHVwb24gaGltIGFuZCBhc2tlZCBoaW0gdG8gcGxheSB3aXRoIGhlciwgYXMgb25lIHdvbWFuIHdvdWxkIGFub3RoZXIsIGFuZCB3aGVuIGhlIHJlZnVzZWQsIHNoZSBkcmFnZ2VkIGhpbSBmb3J3YXJkIGFuZCBhc2tlZCB3aG8gaGUgd2FzIGFuZCB3aGVuY2UgaGUgY2FtZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2xvZGl1cyBhbnN3ZXJlZCB0aGF0IGhlIHdhcyB3YWl0aW5nIGZvciBQb21wZWlhJ3MgQWJyYSAodGhpcyB3YXMgdGhlIHZlcnkgbmFtZSBieSB3aGljaCB0aGUgbWFpZCB3YXMgY2FsbGVkKSwgYW5kIGhpcyB2b2ljZSBiZXRyYXllZCBoaW0uIFRoZSBhdHRlbmRhbnQgb2YgQXVyZWxpYSBhdCBvbmNlIHNwcmFuZyBhd2F5IHdpdGggYSBzY3JlYW0gdG8gdGhlIGxpZ2h0cyBhbmQgdGhlIHRocm9uZywgY3J5aW5nIG91dCB0aGF0IHNoZSBoYWQgY2F1Z2h0IGEgbWFuLiBUaGUgd29tZW4gd2VyZSBwYW5pYy1zdHJpY2tlbiwgYW5kIEF1cmVsaWEgcHV0IGEgc3RvcCB0byB0aGUgbXlzdGljIHJpdGVzIG9mIHRoZSBnb2RkZXNzIGFuZCBjb3ZlcmVkIHVwIHRoZSBlbWJsZW1zLiBUaGVuIHNoZSBvcmRlcmVkIHRoZSBkb29ycyB0byBiZSBjbG9zZWQgYW5kIHdlbnQgYWJvdXQgdGhlIGhvdXNlIHdpdGggdG9yY2hlcywgc2VhcmNoaW5nIGZvciBDbG9kaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgZm91bmQgd2hlcmUgaGUgaGFkIHRha2VuIHJlZnVnZSwgaW4gdGhlIGNoYW1iZXIgb2YgdGhlIGdpcmwgd2hvIGhhZCBsZXQgaGltIGludG8gdGhlIGhvdXNlOyBhbmQgd2hlbiB0aGV5IHNhdyB3aG8gaGUgd2FzLCB0aGUgd29tZW4gZHJvdmUgaGltIG91dCBvZiBkb29ycy4gVGhlbiBhdCBvbmNlLCBhbmQgaW4gdGhlIG5pZ2h0LCB0aGV5IHdlbnQgb2ZmIGFuZCB0b2xkIHRoZSBtYXR0ZXIgdG8gdGhlaXIgaHVzYmFuZHMsIGFuZCB3aGVuIGRheSBjYW1lIGEgcmVwb3J0IHNwcmVhZCB0aHJvdWdoIHRoZSBjaXR5IHRoYXQgQ2xvZGl1cyBoYWQgY29tbWl0dGVkIHNhY3JpbGVnZSBhbmQgb3dlZCBzYXRpc2ZhY3Rpb24sIG5vdCBvbmx5IHRvIHRob3NlIHdob20gaGUgaGFkIGluc3VsdGVkLCBidXQgYWxzbyB0byB0aGUgY2l0eSBhbmQgdG8gdGhlIGdvZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBvbmUgb2YgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUgaW5kaWN0ZWQgQ2xvZGl1cyBmb3Igc2FjcmlsZWdlLCBhbmQgdGhlIG1vc3QgaW5mbHVlbnRpYWwgc2VuYXRvcnMgbGVhZ3VlZCB0aGVtc2VsdmVzIHRvZ2V0aGVyIGFuZCBib3JlIHdpdG5lc3MgYWdhaW5zdCBoaW0gdGhhdCwgYW1vbmcgb3RoZXIgc2hvY2tpbmcgYWJvbWluYXRpb25zLCBoZSBoYWQgY29tbWl0dGVkIGFkdWx0ZXJ5IHdpdGggaGlzIHNpc3Rlciwgd2hvIHdhcyB0aGUgd2lmZSBvZiBMdWN1bGx1cy4gQnV0IGFnYWluc3QgdGhlIGVhZ2VyIGVmZm9ydHMgb2YgdGhlc2UgbWVuIHRoZSBwZW9wbGUgYXJyYXllZCB0aGVtc2VsdmVzIGluIGRlZmVuY2Ugb2YgQ2xvZGl1cywgYW5kIHdlcmUgb2YgZ3JlYXQgYXNzaXN0YW5jZSB0byBoaW0gd2l0aCB0aGUganVyb3JzIGluIHRoZSBjYXNlLCB3aG8gd2VyZSB0ZXJyb3Itc3RyaWNrZW4gYW5kIGFmcmFpZCBvZiB0aGUgbXVsdGl0dWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgZGl2b3JjZWQgUG9tcGVpYSBhdCBvbmNlLCBidXQgd2hlbiBoZSB3YXMgc3VtbW9uZWQgdG8gdGVzdGlmeSBhdCB0aGUgdHJpYWwsIGhlIHNhaWQgaGUga25ldyBub3RoaW5nIGFib3V0IHRoZSBtYXR0ZXJzIHdpdGggd2hpY2ggQ2xvZGl1cyB3YXMgY2hhcmdlZC4gSGlzIHN0YXRlbWVudCBhcHBlYXJlZCBzdHJhbmdlLCBhbmQgdGhlIHByb3NlY3V0b3IgdGhlcmVmb3JlIGFza2VkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiwgZGlkc3QgdGhvdSBkaXZvcmNlIHRoeSB3aWZlPzwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJlY2F1c2UsPC9xPiBzYWlkIENhZXNhciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHRob3VnaHQgbXkgd2lmZSBvdWdodCBub3QgZXZlbiB0byBiZSB1bmRlciBzdXNwaWNpb248L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+U29tZSBzYXkgdGhhdCBDYWVzYXIgbWFkZSB0aGlzIGRlcG9zaXRpb24gaG9uZXN0bHk7IGJ1dCBhY2NvcmRpbmcgdG8gb3RoZXJzIGl0IHdhcyBtYWRlIHRvIGdyYXRpZnkgdGhlIHBlb3BsZSwgd2hvIHdlcmUgZGV0ZXJtaW5lZCB0byByZXNjdWUgQ2xvZGl1cy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIENsb2RpdXMgd2FzIGFjcXVpdHRlZCBvZiB0aGUgY2hhcmdlLCB0aGUgbWFqb3JpdHkgb2YgdGhlIGp1cm9ycyBnaXZpbmcgdGhlaXIgdmVyZGljdHMgaW4gaWxsZWdpYmxlIHdyaXRpbmcsIGluIG9yZGVyIHRoYXQgdGhleSBtaWdodCBuZWl0aGVyIHJpc2sgdGhlaXIgbGl2ZXMgd2l0aCB0aGUgcG9wdWxhY2UgYnkgY29uZGVtbmluZyBoaW0gbm9yIGdldCBhIGJhZCBuYW1lIGFtb25nIHRoZSBub2JpbGl0eSBieSBhY3F1aXR0aW5nIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc2FjcmlsZWdlIGFuZCB0cmlhbCBvZiBDbG9kaXVzIGFyZSBkZXNjcmliZWQgYXQgbGVuZ3RoIGFsc28gaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDI4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2ljZXJvPC90aXRsZT4sIGNoYXB0ZXJzIHh4dmlpaS4gYW5kIHh4aXg8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkltbWVkaWF0ZWx5IGFmdGVyIGhpcyBwcmFldG9yc2hpcCBDYWVzYXIgcmVjZWl2ZWQgU3BhaW4gYXMgaGlzIHByb3ZpbmNlLCBhbmQgc2luY2UgaGUgZm91bmQgaXQgaGFyZCB0byBhcnJhbmdlIG1hdHRlcnMgd2l0aCBoaXMgY3JlZGl0b3JzLCB3aG8gb2JzdHJ1Y3RlZCBoaXMgZGVwYXJ0dXJlIGFuZCB3ZXJlIGNsYW1vcm91cywgaGUgaGFkIHJlY291cnNlIHRvIENyYXNzdXMsIHRoZSByaWNoZXN0IG9mIHRoZSBSb21hbnMsIHdobyBoYWQgbmVlZCBvZiBDYWVzYXIncyB2aWdvdXIgYW5kIGZpcmUgZm9yIGhpcyBwb2xpdGljYWwgY2FtcGFpZ24gYWdhaW5zdCBQb21wZXkuIEFuZCBpdCB3YXMgb25seSBhZnRlciBDcmFzc3VzIGhhZCBtZXQgdGhlIGRlbWFuZHMgb2YgdGhlIG1vc3QgaW1wb3J0dW5hdGUgYW5kIGluZXhvcmFibGUgb2YgdGhlc2UgY3JlZGl0b3JzIGFuZCBnaXZlbiBzdXJldHkgZm9yIGVpZ2h0IGh1bmRyZWQgYW5kIHRoaXJ0eSB0YWxlbnRzLCB0aGF0IENhZXNhciBjb3VsZCBnbyBvdXQgdG8gaGlzIHByb3ZpbmNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIDYxIEIuQy48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XZSBhcmUgdG9sZCB0aGF0LCBhcyBoZSB3YXMgY3Jvc3NpbmcgdGhlIEFscHMgYW5kIHBhc3NpbmcgYnkgYSBiYXJiYXJpYW4gdmlsbGFnZSB3aGljaCBoYWQgdmVyeSBmZXcgaW5oYWJpdGFudHMgYW5kIHdhcyBhIHNvcnJ5IHNpZ2h0LCBoaXMgY29tcGFuaW9ucyBhc2tlZCB3aXRoIG1pcnRoIGFuZCBsYXVnaHRlciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYW4gaXQgYmUgdGhhdCBoZXJlIHRvbyB0aGVyZSBhcmUgYW1iaXRpb3VzIHN0cmlmZXMgZm9yIG9mZmljZSwgc3RydWdnbGVzIGZvciBwcmltYWN5LCBhbmQgbXV0dWFsIGplYWxvdXNpZXMgb2YgcG93ZXJmdWwgbWVuPzwvcT4gV2hlcmV1cG9uIENhZXNhciBzYWlkIHRvIHRoZW0gaW4gYWxsIHNlcmlvdXNuZXNzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd291bGQgcmF0aGVyIGJlIGZpcnN0IGhlcmUgdGhhbiBzZWNvbmQgYXQgUm9tZTwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiBsaWtlIG1hbm5lciB3ZSBhcmUgdG9sZCBhZ2FpbiB0aGF0LCBpbiBTcGFpbiwgd2hlbiBoZSB3YXMgYXQgbGVpc3VyZSBhbmQgd2FzIHJlYWRpbmcgZnJvbSB0aGUgaGlzdG9yeSBvZiBBbGV4YW5kZXIsIGhlIHdhcyBsb3N0IGluIHRob3VnaHQgZm9yIGEgbG9uZyB0aW1lLCBhbmQgdGhlbiBidXJzdCBpbnRvIHRlYXJzLiBIaXMgZnJpZW5kcyB3ZXJlIGFzdG9uaXNoZWQsIGFuZCBhc2tlZCB0aGUgcmVhc29uIGZvciBoaXMgdGVhcnMuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8geW91IG5vdCB0aGluayw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXQgaXMgbWF0dGVyIGZvciBzb3Jyb3cgdGhhdCB3aGlsZSBBbGV4YW5kZXIsIGF0IG15IGFnZSwgd2FzIGFscmVhZHkga2luZyBvZiBzbyBtYW55IHBlb3BsZXMsIEkgaGF2ZSBhcyB5ZXQgYWNoaWV2ZWQgbm8gYnJpbGxpYW50IHN1Y2Nlc3M/PC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TdWV0b25pdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gNzwvYmlibD4pIGFuZCBEaW8gQ2Fzc2l1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuQy4gMzcuNTIuMiI+eHh4dmlpLiA1MiwgMjwvYmlibD4pIGNvbm5lY3QgdGhpcyBhbmVjZG90ZSBtb3JlIHByb3Blcmx5IHdpdGggQ2Flc2FyJ3MgcXVhZXN0b3JzaGlwIGluIFNwYWluICg2NyBCLkMuKSB3aGVuIGhlIHdhcyB0aGlydHktdGhyZWUgeWVhcnMgb2YgYWdlLCB0aGUgYWdlIGF0IHdoaWNoIEFsZXhhbmRlciBkaWVkLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBhcyBzb29uIGFzIGhlIHJlYWNoZWQgU3BhaW4gaGUgc2V0IGhpbXNlbGYgdG8gd29yaywgYW5kIGluIGEgZmV3IGRheXMgcmFpc2VkIHRlbiBjb2hvcnRzIGluIGFkZGl0aW9uIHRvIHRoZSB0d2VudHkgd2hpY2ggd2VyZSB0aGVyZSBiZWZvcmUuIFRoZW4gaGUgbGVkIGhpcyBhcm15IGFnYWluc3QgdGhlIENhbGxhaWNpIGFuZCBMdXNpdGFuaSwgb3ZlcnBvd2VyZWQgdGhlbSwgYW5kIG1hcmNoZWQgb24gYXMgZmFyIGFzIHRoZSBvdXRlciBzZWEsIHN1YmR1aW5nIHRoZSB0cmliZXMgd2hpY2ggYmVmb3JlIHdlcmUgbm90IG9iZWRpZW50IHRvIFJvbWUuIEFmdGVyIGJyaW5naW5nIHRoZSB3YXIgdG8gYSBzdWNjZXNzZnVsIGNsb3NlLCBoZSB3YXMgZXF1YWxseSBoYXBweSBpbiBhZGp1c3RpbmcgdGhlIHByb2JsZW1zIG9mIHBlYWNlLCBieSBlc3RhYmxpc2hpbmcgY29uY29yZCBiZXR3ZWVuIHRoZSBjaXRpZXMsIGFuZCBwYXJ0aWN1bGFybHkgYnkgaGVhbGluZyB0aGUgZGlzc2Vuc2lvbnMgYmV0d2VlbiBkZWJ0b3JzIGFuZCBjcmVkaXRvcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBvcmRhaW5lZCB0aGF0IHRoZSBjcmVkaXRvciBzaG91bGQgYW5udWFsbHkgdGFrZSB0d28gdGhpcmRzIG9mIGhpcyBkZWJ0b3IncyBpbmNvbWUsIGFuZCB0aGF0IHRoZSBvd25lciBvZiB0aGUgcHJvcGVydHkgc2hvdWxkIHVzZSB0aGUgcmVzdCwgYW5kIHNvIG9uIHVudGlsIHRoZSBkZWJ0IHdhcyBjYW5jZWxsZWQuIEluIGhpZ2ggcmVwdXRlIGZvciB0aGlzIGFkbWluaXN0cmF0aW9uIGhlIHJldGlyZWQgZnJvbSB0aGUgcHJvdmluY2U7IGhlIGhhZCBiZWNvbWUgd2VhbHRoeSBoaW1zZWxmLCBoYWQgZW5yaWNoZWQgaGlzIHNvbGRpZXJzIGZyb20gdGhlaXIgY2FtcGFpZ25zLCBhbmQgaGFkIGJlZW4gc2FsdXRlZCBieSB0aGVtIGFzIEltcGVyYXRvci48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSB0aG9zZSB3aG8gc3VlZCBmb3IgdGhlIHByaXZpbGVnZSBvZiBhIHRyaXVtcGggbXVzdCByZW1haW4gb3V0c2lkZSB0aGUgY2l0eSwgd2hpbGUgdGhvc2Ugd2hvIHdlcmUgY2FuZGlkYXRlcyBmb3IgdGhlIGNvbnN1bHNoaXAgbXVzdCBiZSBwcmVzZW50IGluIHRoZSBjaXR5LCBDYWVzYXIgd2FzIGluIGEgZ3JlYXQgZGlsZW1tYSwgYW5kIGJlY2F1c2UgaGUgaGFkIHJlYWNoZWQgaG9tZSBhdCB0aGUgdmVyeSB0aW1lIGZvciB0aGUgY29uc3VsYXIgZWxlY3Rpb25zLCBoZSBzZW50IGEgcmVxdWVzdCB0byB0aGUgc2VuYXRlIHRoYXQgaGUgbWlnaHQgYmUgcGVybWl0dGVkIHRvIG9mZmVyIGhpbXNlbGYgZm9yIHRoZSBjb25zdWxzaGlwIDxmb3JlaWduIGxhbmc9ImxhIj5pbiBhYnNlbnRpw6I8L2ZvcmVpZ24+LCB0aHJvdWdoIHRoZSBhZ2VuY3kgb2YgaGlzIGZyaWVuZHMuIEJ1dCBzaW5jZSBDYXRvIGJlZ2FuIGJ5IGluc2lzdGluZyB1cG9uIHRoZSBsYXcgaW4gb3Bwb3NpdGlvbiB0byBDYWVzYXIncyByZXF1ZXN0LCBhbmQgdGhlbiwgd2hlbiBoZSBzYXcgdGhhdCBtYW55IHNlbmF0b3JzIGhhZCBiZWVuIHdvbiBvdmVyIGJ5IENhZXNhcidzIGF0dGVudGlvbnMsIHN0YXZlZCB0aGUgbWF0dGVyIG9mZiBieSBjb25zdW1pbmcgdGhlIGRheSBpbiBzcGVha2luZywgQ2Flc2FyIGRlY2lkZWQgdG8gZ2l2ZSB1cCB0aGUgdHJpdW1waCBhbmQgdHJ5IGZvciB0aGUgY29uc3Vsc2hpcC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28gYXMgc29vbiBhcyBoZSBlbnRlcmVkIHRoZSBjaXR5IGhlIGFzc3VtZWQgYSBwb2xpY3kgd2hpY2ggZGVjZWl2ZWQgZXZlcnlvbmUgZXhjZXB0IENhdG8uIFRoaXMgcG9saWN5IHdhcyB0byByZWNvbmNpbGUgUG9tcGV5IGFuZCBDcmFzc3VzLCB0aGUgbW9zdCBpbmZsdWVudGlhbCBtZW4gaW4gdGhlIGNpdHkuIFRoZXNlIG1lbiBDYWVzYXIgYnJvdWdodCB0b2dldGhlciBpbiBmcmllbmRzaGlwIGFmdGVyIHRoZWlyIHF1YXJyZWwsIGFuZCBieSBjb25jZW50cmF0aW5nIHRoZWlyIHVuaXRlZCBzdHJlbmd0aCB1cG9uIGhpbXNlbGYsIHN1Y2NlZWRlZCwgYmVmb3JlIG1lbiB3ZXJlIGF3YXJlIG9mIGl0LCBhbmQgYnkgYW4gYWN0IHdoaWNoIGNvdWxkIGJlIGNhbGxlZCBvbmUgb2Yga2luZG5lc3MsIGluIGNoYW5naW5nIHRoZSBmb3JtIG9mIGdvdmVybm1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbm90LCBhcyBtb3N0IG1lbiBzdXBwb3NlZCwgdGhlIHF1YXJyZWwgYmV0d2VlbiBDYWVzYXIgYW5kIFBvbXBleSB0aGF0IGJyb3VnaHQgb24gdGhlIGNpdmlsIHdhcnMsIGJ1dCByYXRoZXIgdGhlaXIgZnJpZW5kc2hpcCwgc2luY2UgdGhleSB3b3JrZWQgdG9nZXRoZXIgZm9yIHRoZSBvdmVydGhyb3cgb2YgdGhlIGFyaXN0b2NyYWN5IGluIHRoZSBmaXJzdCBwbGFjZSwgYW5kIHRoZW4sIHdoZW4gdGhpcyBoYWQgYmVlbiBhY2NvbXBsaXNoZWQsIHRoZXkgcXVhcnJlbGxlZCB3aXRoIG9uZSBhbm90aGVyLiBBbmQgQ2F0bywgd2hvIG9mdGVuIGZvcmV0b2xkIHdoYXQgd2FzIHRvIGNvbWUgb2YgdGhlaXIgYWxsaWFuY2UsIGdvdCB0aGUgcmVwdXRhdGlvbiBvZiBhIG1vcm9zZSBhbmQgdHJvdWJsZXNvbWUgZmVsbG93IGF0IHRoZSB0aW1lLCBidXQgYWZ0ZXJ3YXJkcyB0aGF0IG9mIGEgd2lzZSwgdGhvdWdoIHVuZm9ydHVuYXRlLCBjb3Vuc2VsbG9yLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDQ3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIHhsdmlpLiAxLTU8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciwgaG93ZXZlciwgZW5jb21wYXNzZWQgYW5kIHByb3RlY3RlZCBieSB0aGUgZnJpZW5kc2hpcCBvZiBDcmFzc3VzIGFuZCBQb21wZXksIGVudGVyZWQgdGhlIGNhbnZhc3MgZm9yIHRoZSBjb25zdWxzaGlwOyBhbmQgYXMgc29vbiBhcyBoZSBoYWQgYmVlbiB0cml1bXBoYW50bHkgZWxlY3RlZCwgYWxvbmcgd2l0aCBDYWxwdXJuaXVzIEJpYnVsdXMsIGFuZCBoYWQgZW50ZXJlZCB1cG9uIGhpcyBvZmZpY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTkgQi5DLjwvbm90ZT4gaGUgcHJvcG9zZWQgbGF3cyB3aGljaCB3ZXJlIGJlY29taW5nLCBub3QgZm9yIGEgY29uc3VsLCBidXQgZm9yIGEgbW9zdCByYWRpY2FsIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZTsgZm9yIHRvIGdyYXRpZnkgdGhlIG11bHRpdHVkZSBoZSBpbnRyb2R1Y2VkIHN1bmRyeSBhbGxvdG1lbnRzIGFuZCBkaXN0cmlidXRpb25zIG9mIGxhbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZW5hdGUgdGhlIG9wcG9zaXRpb24gb2YgbWVuIG9mIHRoZSBiZXR0ZXIgc29ydCBnYXZlIGhpbSB0aGUgcHJldGV4dCB3aGljaCBoZSBoYWQgbG9uZyBkZXNpcmVkLCBhbmQgY3J5aW5nIHdpdGggbG91ZCBhZGp1cmF0aW9ucyB0aGF0IGhlIHdhcyBkcml2ZW4gZm9ydGggaW50byB0aGUgcG9wdWxhciBhc3NlbWJseSBhZ2FpbnN0IGhpcyB3aXNoZXMsIGFuZCB3YXMgY29tcGVsbGVkIHRvIGNvdXJ0IGl0cyBmYXZvdXIgYnkgdGhlIGluc29sZW5jZSBhbmQgb2JzdGluYWN5IG9mIHRoZSBzZW5hdGUsIGhlIGhhc3RlbmVkIGJlZm9yZSBpdCwgYW5kIHN0YXRpb25pbmcgQ3Jhc3N1cyBvbiBvbmUgc2lkZSBvZiBoaW0gYW5kIFBvbXBleSBvbiB0aGUgb3RoZXIsIGhlIGFza2VkIHRoZW0gaWYgdGhleSBhcHByb3ZlZCBoaXMgbGF3cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBkZWNsYXJlZCB0aGF0IHRoZXkgZGlkIGFwcHJvdmUgdGhlbSwgd2hlcmV1cG9uIGhlIHVyZ2VkIHRoZW0gdG8gZ2l2ZSBoaW0gdGhlaXIgYWlkIGFnYWluc3QgdGhvc2Ugd2hvIHRocmVhdGVuZWQgdG8gb3Bwb3NlIGhpbSB3aXRoIHN3b3Jkcy4gVGhleSBwcm9taXNlZCBoaW0gc3VjaCBhaWQsIGFuZCBQb21wZXkgYWN0dWFsbHkgYWRkZWQgdGhhdCBoZSB3b3VsZCBjb21lIHVwIGFnYWluc3Qgc3dvcmRzIHdpdGggc3dvcmQgYW5kIGJ1Y2tsZXIgdG9vLiBBdCB0aGlzIGltcHVsc2l2ZSBhbmQgbWFkIHNwZWVjaCwgdW53b3J0aHkgb2YgdGhlIGhpZ2ggZXN0ZWVtIGluIHdoaWNoIFBvbXBleSBzdG9vZCBhbmQgdW5iZWNvbWluZyB0byB0aGUgcmVzcGVjdCB3aGljaCB3YXMgZHVlIHRvIHRoZSBzZW5hdGUsIHRoZSBub2JpbGl0eSB3ZXJlIGRpc3RyZXNzZWQgYnV0IHRoZSBwb3B1bGFjZSB3ZXJlIGRlbGlnaHRlZC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIENhZXNhciB0cmllZCB0byBhdmFpbCBoaW1zZWxmIHN0aWxsIG1vcmUgb2YgdGhlIGluZmx1ZW5jZSBvZiBQb21wZXkuIEhlIGhhZCBhIGRhdWdodGVyLCBKdWxpYSwgd2hvIHdhcyBiZXRyb3RoZWQgdG8gU2VydmlsaXVzIENhZXBpby4gVGhpcyBkYXVnaHRlciBoZSBiZXRyb3RoZWQgdG8gUG9tcGV5LCBhbmQgc2FpZCBoZSB3b3VsZCBnaXZlIFBvbXBleSdzIGRhdWdodGVyIGluIG1hcnJpYWdlIHRvIFNlcnZpbGl1cywgYWx0aG91Z2ggc2hlIHRvbyB3YXMgbm90IHVuYmV0cm90aGVkLCBidXQgaGFkIGJlZW4gcHJvbWlzZWQgdG8gRmF1c3R1cywgdGhlIHNvbiBvZiBTdWxsYS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGEgbGl0dGxlIHdoaWxlIGFmdGVyd2FyZHMgQ2Flc2FyIHRvb2sgQ2FscHVybmlhIHRvIHdpZmUsIGEgZGF1Z2h0ZXIgb2YgUGlzbywgYW5kIGdvdCBQaXNvIG1hZGUgY29uc3VsIGZvciB0aGUgY29taW5nIHllYXIsIGFsdGhvdWdoIGhlcmUgdG9vIENhdG8gdmVoZW1lbnRseSBwcm90ZXN0ZWQsIGFuZCBjcmllZCBvdXQgdGhhdCBpdCB3YXMgaW50b2xlcmFibGUgdG8gaGF2ZSB0aGUgc3VwcmVtZSBwb3dlciBwcm9zdGl0dXRlZCBieSBtYXJyaWFnZSBhbGxpYW5jZXMgYW5kIHRvIHNlZSBtZW4gaGVscGluZyBvbmUgYW5vdGhlciB0byBwb3dlcnMgYW5kIGFybWllcyBhbmQgcHJvdmluY2VzIGJ5IG1lYW5zIG9mIHdvbWVuLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgQ2Flc2FyJ3MgY29sbGVhZ3VlLCBCaWJ1bHVzLCBzaW5jZSBoZSBhdmFpbGVkIG5vdGhpbmcgYnkgb2JzdHJ1Y3RpbmcgQ2Flc2FyJ3MgbGF3cywgYnV0IG9mdGVuIHJhbiB0aGUgcmlzayB3aXRoIENhdG8gb2YgYmVpbmcga2lsbGVkIGluIHRoZSBmb3J1bSwgaGUgc2h1dCBoaW1zZWxmIHVwIGF0IGhvbWUgZm9yIHRoZSByZW1haW5kZXIgb2YgaGlzIHRlcm0gb2Ygb2ZmaWNlLiBQb21wZXksIGhvd2V2ZXIsIGltbWVkaWF0ZWx5IGFmdGVyIGhpcyBtYXJyaWFnZSwgZmlsbGVkIHRoZSBmb3J1bSB3aXRoIGFybWVkIG1lbiBhbmQgaGVscGVkIHRoZSBwZW9wbGUgdG8gZW5hY3QgQ2Flc2FyJ3MgbGF3cyBhbmQgZ2l2ZSBoaW0gYXMgaGlzIGNvbnN1bGFyIHByb3ZpbmNlIEdhdWwgb24gYm90aCBzaWRlcyBvZiB0aGUgQWxwcyBmb3IgZml2ZSB5ZWFycywgdG9nZXRoZXIgd2l0aCBJbGx5cmljdW0gYW5kIGZvdXIgbGVnaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+Q2F0bywgb2YgY291cnNlLCB0cmllZCB0byBzcGVhayBhZ2FpbnN0IHRoZXNlIG1lYXN1cmVzLCBidXQgQ2Flc2FyIGhhZCBoaW0gbGVkIG9mZiB0byBwcmlzb24sIHN1cHBvc2luZyB0aGF0IGhlIHdvdWxkIGFwcGVhbCB0byB0aGUgcG9wdWxhciB0cmlidW5lczsgYnV0IHdoZW4gQ2F0byB3YWxrZWQgb2ZmIHdpdGhvdXQgYSB3b3JkIGFuZCBDYWVzYXIgc2F3IG5vdCBvbmx5IHRoYXQgdGhlIG1vc3QgaW5mbHVlbnRpYWwgbWVuIHdlcmUgZGlzcGxlYXNlZCwgYnV0IGFsc28gdGhhdCB0aGUgcG9wdWxhY2UsIG91dCBvZiByZXNwZWN0IGZvciBDYXRvJ3MgdmlydHVlLCB3ZXJlIGZvbGxvd2luZyBoaW0gaW4gc2lsZW5jZSBhbmQgd2l0aCBkb3duY2FzdCBsb29rcywgaGUgaGltc2VsZiBzZWNyZXRseSBhc2tlZCBvbmUgb2YgdGhlIHRyaWJ1bmVzIHRvIHRha2UgQ2F0byBvdXQgb2YgYXJyZXN0LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGUgb3RoZXIgc2VuYXRvcnMsIG9ubHkgYSB2ZXJ5IGZldyB1c2VkIHRvIGdvIHdpdGggQ2Flc2FyIHRvIHRoZSBzZW5hdGU7IHRoZSByZXN0LCBpbiBkaXNwbGVhc3VyZSwgc3RheWVkIGF3YXkuIENvbnNpZGl1cywgYSB2ZXJ5IGFnZWQgc2VuYXRvciwgb25jZSB0b2xkIENhZXNhciB0aGF0IGhpcyBjb2xsZWFndWVzIGRpZCBub3QgY29tZSB0b2dldGhlciBiZWNhdXNlIHRoZXkgd2VyZSBhZnJhaWQgb2YgdGhlIGFybWVkIHNvbGRpZXJzLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiw8L3E+IHNhaWQgQ2Flc2FyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvc3QgdGhvdSB0b28gbm90IHN0YXkgYXQgaG9tZSBvdXQgb2YgdGhlIHNhbWUgZmVhcj88L3E+IFRvIHRoaXMgQ29uc2lkaXVzIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmVjYXVzZSBteSBvbGQgYWdlIG1ha2VzIG1lIGZlYXJsZXNzOyBmb3IgdGhlIHNob3J0IHNwYW4gb2YgbGlmZSB0aGF0IGlzIHN0aWxsIGxlZnQgbWUgZG9lcyBub3QgcmVxdWlyZSBtdWNoIGFueGlvdXMgdGhvdWdodDwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG1vc3QgZGlzZ3JhY2VmdWwgcHVibGljIG1lYXN1cmUgb2YgdGhlIHRpbWUgd2FzIHRob3VnaHQgdG8gYmUgdGhlIGVsZWN0aW9uIHRvIHRoZSB0cmlidW5lc2hpcCwgZHVyaW5nIENhZXNhcidzIGNvbnN1bGF0ZSwgb2YgdGhlIG5vdG9yaW91cyBDbG9kaXVzLCB3aG8gaGFkIHRyZXNwYXNzZWQgdXBvbiBoaXMgcmlnaHRzIGFzIGEgaHVzYmFuZCwgYW5kIHVwb24gdGhlIHNlY3JldCBub2N0dXJuYWwgdmlnaWxzLiBIZSB3YXMgZWxlY3RlZCwgaG93ZXZlciwgZm9yIHRoZSBvdmVydGhyb3cgb2YgQ2ljZXJvOyBhbmQgQ2Flc2FyIGRpZCBub3QgZ28gZm9ydGggdXBvbiBoaXMgY2FtcGFpZ24gdW50aWwsIHdpdGggdGhlIGhlbHAgb2YgQ2xvZGl1cywgaGUgaGFkIHJhaXNlZCBhIHN1Y2Nlc3NmdWwgZmFjdGlvbiBhZ2FpbnN0IENpY2VybyBhbmQgZHJpdmVuIGhpbSBvdXQgb2YgSXRhbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4eHguIGFuZCB4eHhpPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5TdWNoLCB0aGVuLCBpcyBzYWlkIHRvIGhhdmUgYmVlbiB0aGUgY291cnNlIG9mIENhZXNhcidzIGxpZmUgYmVmb3JlIGhpcyBHYWxsaWMgY2FtcGFpZ25zLiBCdXQgdGhlIHBlcmlvZCBvZiB0aGUgd2FycyB3aGljaCBoZSBhZnRlcndhcmRzIGZvdWdodCwgYW5kIG9mIHRoZSBjYW1wYWlnbnMgYnkgd2hpY2ggaGUgc3VianVnYXRlZCBHYXVsLCBhcyBpZiBoZSBoYWQgbWFkZSBhbm90aGVyIGJlZ2lubmluZyBhbmQgZW50ZXJlZCB1cG9uIGEgZGlmZmVyZW50IHBhdGggb2YgbGlmZSBhbmQgb25lIG9mIG5ldyBhY2hpZXZlbWVudHMsIHByb3ZlZCBoaW0gdG8gYmUgaW5mZXJpb3IgYXMgc29sZGllciBhbmQgY29tbWFuZGVyIHRvIG5vIG9uZSBzb2V2ZXIgb2YgdGhvc2Ugd2hvIGhhdmUgd29uIG1vc3QgYWRtaXJhdGlvbiBmb3IgbGVhZGVyc2hpcCBhbmQgc2hvd24gdGhlbXNlbHZlcyBncmVhdGVzdCB0aGVyZWluLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5OYXksIGlmIG9uZSBjb21wYXJlIGhpbSB3aXRoIHN1Y2ggbWVuIGFzIEZhYml1cyBhbmQgU2NpcGlvIGFuZCBNZXRlbGx1cywgYW5kIHdpdGggdGhlIG1lbiBvZiBoaXMgb3duIHRpbWUgb3IgYSBsaXR0bGUgYmVmb3JlIGhpbSwgbGlrZSBTdWxsYSwgTWFyaXVzLCB0aGUgdHdvIEx1Y3VsbGksIG9yIGV2ZW4gUG9tcGV5IGhpbXNlbGYsIHdob3NlIGZhbWUgZm9yIGV2ZXJ5IHNvcnQgb2YgbWlsaXRhcnkgZXhjZWxsZW5jZSB3YXMgYXQgdGhpcyB0aW1lIGZsb3dlcmluZyBvdXQgYW5kIHJlYWNoaW5nIHRvIHRoZSBza2llcywgQ2Flc2FyIHdpbGwgYmUgZm91bmQgdG8gc3VycGFzcyB0aGVtIGFsbCBpbiBoaXMgYWNoaWV2ZW1lbnRzLiBPbmUgaGUgc3VycGFzc2VkIGluIHRoZSBkaWZmaWN1bHR5IG9mIHRoZSByZWdpb25zIHdoZXJlIGhlIHdhZ2VkIGhpcyB3YXJzOyBhbm90aGVyIGluIHRoZSBncmVhdCBleHRlbnQgb2YgY291bnRyeSB3aGljaCBoZSBhY3F1aXJlZDsgYW5vdGhlciBpbiB0aGUgbXVsdGl0dWRlIGFuZCBtaWdodCBvZiB0aGUgZW5lbWllcyBvdmVyIHdob20gaGUgd2FzIHZpY3RvcmlvdXM7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFub3RoZXIgaW4gdGhlIHNhdmFnZSBtYW5uZXJzIGFuZCBwZXJmaWRpb3VzIGRpc3Bvc2l0aW9ucyBvZiB0aGUgcGVvcGxlIHdob20gaGUgY29uY2lsaWF0ZWQ7IGFub3RoZXIgaW4gaGlzIHJlYXNvbmFibGVuZXNzIGFuZCBtaWxkbmVzcyB0b3dhcmRzIGhpcyBjYXB0aXZlczsgYW5vdGhlciBzdGlsbCBpbiB0aGUgZ2lmdHMgYW5kIGZhdm91cnMgd2hpY2ggaGUgYmVzdG93ZWQgdXBvbiBoaXMgc29sZGllcnM7IGFuZCBhbGwgaW4gdGhlIGZhY3QgdGhhdCBoZSBmb3VnaHQgdGhlIG1vc3QgYmF0dGxlcyBhbmQga2lsbGVkIHRoZSBtb3N0IGVuZW1pZXMuIEZvciBhbHRob3VnaCBpdCB3YXMgbm90IGZ1bGwgdGVuIHllYXJzIHRoYXQgaGUgd2FnZWQgd2FyIGluIEdhdWwsIGhlIHRvb2sgYnkgc3Rvcm0gbW9yZSB0aGFuIGVpZ2h0IGh1bmRyZWQgY2l0aWVzLCBzdWJkdWVkIHRocmVlIGh1bmRyZWQgbmF0aW9ucywgYW5kIGZvdWdodCBwaXRjaGVkIGJhdHRsZXMgYXQgZGlmZmVyZW50IHRpbWVzIHdpdGggdGhyZWUgbWlsbGlvbiBtZW4sIG9mIHdob20gaGUgc2xldyBvbmUgbWlsbGlvbiBpbiBoYW5kIHRvIGhhbmQgZmlnaHRpbmcgYW5kIHRvb2sgYXMgbWFueSBtb3JlIHByaXNvbmVycy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHNvbGRpZXJzIHNob3dlZCBzdWNoIGdvb2Qgd2lsbCBhbmQgemVhbCBpbiBoaXMgc2VydmljZSB0aGF0IHRob3NlIHdobyBpbiB0aGVpciBwcmV2aW91cyBjYW1wYWlnbnMgaGFkIGJlZW4gaW4gbm8gd2F5IHN1cGVyaW9yIHRvIG90aGVycyB3ZXJlIGludmluY2libGUgYW5kIGlycmVzaXN0aWJsZSBpbiBjb25mcm9udGluZyBldmVyeSBkYW5nZXIgdG8gZW5oYW5jZSBDYWVzYXIncyBmYW1lLiBTdWNoIGEgbWFuLCBmb3IgaW5zdGFuY2UsIHdhcyBBY2lsaXVzLCB3aG8sIGluIHRoZSBzZWEtZmlnaHQgYXQgTWFzc2FsaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RGVzY3JpYmVkIGJ5IENhZXNhciBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QmVsbC4gQ2l2LjwvdGl0bGU+aWkuIDQtNzwvYmlibD4uPC9ub3RlPiBib2FyZGVkIGEgaG9zdGlsZSBzaGlwIGFuZCBoYWQgaGlzIHJpZ2h0IGhhbmQgY3V0IG9mZiB3aXRoIGEgc3dvcmQsIGJ1dCBjbHVuZyB3aXRoIHRoZSBvdGhlciBoYW5kIHRvIGhpcyBzaGllbGQsIGFuZCBkYXNoaW5nIGl0IGludG8gdGhlIGZhY2VzIG9mIGhpcyBmb2VzLCByb3V0ZWQgdGhlbSBhbGwgYW5kIGdvdCBwb3NzZXNzaW9uIG9mIHRoZSB2ZXNzZWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYSBtYW4sIGFnYWluLCB3YXMgQ2Fzc2l1cyBTY2FldmEsIHdobywgaW4gdGhlIGJhdHRsZSBhdCBEeXJyaGFjaGl1bSwgaGFkIGhpcyBleWUgc3RydWNrIG91dCB3aXRoIGFuIGFycm93LCBoaXMgc2hvdWxkZXIgdHJhbnNmaXhlZCB3aXRoIG9uZSBqYXZlbGluIGFuZCBoaXMgdGhpZ2ggd2l0aCBhbm90aGVyLCBhbmQgcmVjZWl2ZWQgb24gaGlzIHNoaWVsZCB0aGUgYmxvd3Mgb2Ygb25lIGh1bmRyZWQgYW5kIHRoaXJ0eSBtaXNzaWxlcy4gSW4gdGhpcyBwbGlnaHQsIGhlIGNhbGxlZCB0aGUgZW5lbXkgdG8gaGltIGFzIHRob3VnaCBoZSB3b3VsZCBzdXJyZW5kZXIuIFR3byBvZiB0aGVtLCBhY2NvcmRpbmdseSwgY29taW5nIHVwLCBoZSBsb3BwZWQgb2ZmIHRoZSBzaG91bGRlciBvZiBvbmUgd2l0aCBoaXMgc3dvcmQsIHNtb3RlIHRoZSBvdGhlciBpbiB0aGUgZmFjZSBhbmQgcHV0IGhpbSB0byBmbGlnaHQsIGFuZCBjYW1lIG9mZiBzYWZlbHkgaGltc2VsZiB3aXRoIHRoZSBhaWQgb2YgaGlzIGNvbXJhZGVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjUzIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CZWxsLiBDaXYuPC90aXRsZT5paWkuIDUzPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBpbiBCcml0YWluLCB3aGVuIHRoZSBlbmVteSBoYWQgZmFsbGVuIHVwb24gdGhlIGZvcmVtb3N0IGNlbnR1cmlvbnMsIHdobyBoYWQgcGx1bmdlZCBpbnRvIGEgd2F0ZXJ5IG1hcnNoLCBhIHNvbGRpZXIsIHdoaWxlIENhZXNhciBpbiBwZXJzb24gd2FzIHdhdGNoaW5nIHRoZSBiYXR0bGUsIGRhc2hlZCBpbnRvIHRoZSBtaWRzdCBvZiB0aGUgZmlnaHQsIGRpc3BsYXllZCBtYW55IGNvbnNwaWN1b3VzIGRlZWRzIG9mIGRhcmluZywgYW5kIHJlc2N1ZWQgdGhlIGNlbnR1cmlvbnMsIGFmdGVyIHRoZSBCYXJiYXJpYW5zIGhhZCBiZWVuIHJvdXRlZC4gVGhlbiBoZSBoaW1zZWxmLCBtYWtpbmcgaGlzIHdheSB3aXRoIGRpZmZpY3VsdHkgYWZ0ZXIgYWxsIHRoZSByZXN0LCBwbHVuZ2VkIGludG8gdGhlIG11ZGR5IGN1cnJlbnQsIGFuZCBhdCBsYXN0LCB3aXRob3V0IGhpcyBzaGllbGQsIHBhcnRseSBzd2ltbWluZyBhbmQgcGFydGx5IHdhZGluZywgZ290IGFjcm9zcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIGFuZCBoaXMgY29tcGFueSB3ZXJlIGFtYXplZCBhbmQgY2FtZSB0byBtZWV0IHRoZSBzb2xkaWVyIHdpdGggY3JpZXMgb2Ygam95OyBidXQgaGUsIGluIGdyZWF0IGRlamVjdGlvbiwgYW5kIHdpdGggYSBidXJzdCBvZiB0ZWFycywgY2FzdCBoaW1zZWxmIGF0IENhZXNhcidzIGZlZXQsIGJlZ2dpbmcgcGFyZG9uIGZvciB0aGUgbG9zcyBvZiBoaXMgc2hpZWxkLiBBZ2FpbiwgaW4gQWZyaWNhLCBTY2lwaW8gY2FwdHVyZWQgYSBzaGlwIG9mIENhZXNhcidzIGluIHdoaWNoIEdyYW5pdXMgUGV0cm8sIHdobyBoYWQgYmVlbiBhcHBvaW50ZWQgcXVhZXN0b3IsIHdhcyBzYWlsaW5nLiBPZiB0aGUgcmVzdCBvZiB0aGUgcGFzc2VuZ2VycyBTY2lwaW8gbWFkZSBib290eSwgYnV0IHRvbGQgdGhlIHF1YWVzdG9yIHRoYXQgaGUgb2ZmZXJlZCBoaW0gaGlzIGxpZmUuIEdyYW5pdXMsIGhvd2V2ZXIsIHJlbWFya2luZyB0aGF0IGl0IHdhcyB0aGUgY3VzdG9tIHdpdGggQ2Flc2FyJ3Mgc29sZGllcnMgbm90IHRvIHJlY2VpdmUgYnV0IHRvIG9mZmVyIG1lcmN5LCBraWxsZWQgaGltc2VsZiB3aXRoIGEgYmxvdyBvZiBoaXMgc3dvcmQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggc3Bpcml0IGFuZCBhbWJpdGlvbiBDYWVzYXIgaGltc2VsZiBjcmVhdGVkIGFuZCBjdWx0aXZhdGVkIGluIGhpcyBtZW4sIGluIHRoZSBmaXJzdCBwbGFjZSwgYmVjYXVzZSBoZSBzaG93ZWQsIGJ5IGhpcyB1bnNwYXJpbmcgYmVzdG93YWwgb2YgcmV3YXJkcyBhbmQgaG9ub3VycywgdGhhdCBoZSB3YXMgbm90IGFtYXNzaW5nIHdlYWx0aCBmcm9tIGhpcyB3YXJzIGZvciBoaXMgb3duIGx1eHVyeSBvciBmb3IgYW55IGxpZmUgb2YgZWFzZSwgYnV0IHRoYXQgaGUgdHJlYXN1cmVkIGl0IHVwIGNhcmVmdWxseSBhcyBhIGNvbW1vbiBwcml6ZSBmb3IgZGVlZHMgb2YgdmFsb3VyLCBhbmQgaGFkIG5vIGdyZWF0ZXIgc2hhcmUgaW4gdGhlIHdlYWx0aCB0aGFuIGhlIG9mZmVyZWQgdG8gdGhlIGRlc2VydmluZyBhbW9uZyBoaXMgc29sZGllcnM7IGFuZCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBieSB3aWxsaW5nbHkgdW5kZXJnb2luZyBldmVyeSBkYW5nZXIgYW5kIHJlZnVzaW5nIG5vIHRvaWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgYXQgaGlzIGxvdmUgb2YgZGFuZ2VyIGhpcyBtZW4gd2VyZSBub3QgYXN0b25pc2hlZCwga25vd2luZyBoaXMgYW1iaXRpb247IGJ1dCB0aGF0IGhlIHNob3VsZCB1bmRlcmdvIHRvaWxzIGJleW9uZCBoaXMgYm9keSdzIGFwcGFyZW50IHBvd2VyIG9mIGVuZHVyYW5jZSBhbWF6ZWQgdGhlbSwgYmVjYXVzZSBoZSB3YXMgb2YgYSBzcGFyZSBoYWJpdCwgaGFkIGEgc29mdCBhbmQgd2hpdGUgc2tpbiwgc3VmZmVyZWQgZnJvbSBkaXN0ZW1wZXIgaW4gdGhlIGhlYWQsIGFuZCB3YXMgc3ViamVjdCB0byBlcGlsZXB0aWMgZml0cywgYSB0cm91YmxlIHdoaWNoIGZpcnN0IGF0dGFja2VkIGhpbSwgd2UgYXJlIHRvbGQsIGluIENvcmR1YmEuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGUgZGlkIG5vdCBtYWtlIGhpcyBmZWVibGUgaGVhbHRoIGFuIGV4Y3VzZSBmb3Igc29mdCBsaXZpbmcsIGJ1dCByYXRoZXIgaGlzIG1pbGl0YXJ5IHNlcnZpY2UgYSBjdXJlIGZvciBoaXMgZmVlYmxlIGhlYWx0aCwgc2luY2UgYnkgd2Vhcmlzb21lIGpvdXJuZXlzLCBzaW1wbGUgZGlldCwgY29udGludW91c2x5IHNsZWVwaW5nIGluIHRoZSBvcGVuIGFpciwgYW5kIGVuZHVyaW5nIGhhcmRzaGlwcywgaGUgZm91Z2h0IG9mZiBoaXMgdHJvdWJsZSBhbmQga2VwdCBoaXMgYm9keSBzdHJvbmcgYWdhaW5zdCBpdHMgYXR0YWNrcy4gTW9zdCBvZiBoaXMgc2xlZXAsIGF0IGxlYXN0LCBoZSBnb3QgaW4gY2FycyBvciBsaXR0ZXJzLCBtYWtpbmcgaGlzIHJlc3QgY29uZHVjZSB0byBhY3Rpb24sIGFuZCBpbiB0aGUgZGF5LXRpbWUgaGUgd291bGQgaGF2ZSBoaW1zZWxmIGNvbnZleWVkIHRvIGdhcnJpc29ucywgY2l0aWVzLCBvciBjYW1wcyBvbmUgc2xhdmUgd2hvIHdhcyBhY2N1c3RvbWVkIHRvIHdyaXRlIGZyb20gZGljdGF0aW9uIGFzIGhlIHRyYXZlbGxlZCBzaXR0aW5nIGJ5IGhpcyBzaWRlLCBhbmQgb25lIHNvbGRpZXIgc3RhbmRpbmcgYmVoaW5kIGhpbSB3aXRoIGEgc3dvcmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBkcm92ZSBzbyByYXBpZGx5IHRoYXQsIG9uIGhpcyBmaXJzdCBqb3VybmV5IGZyb20gUm9tZSB0byBHYXVsLCBoZSByZWFjaGVkIHRoZSBSaG9uZSBpbiBzZXZlbiBkYXlzLjwvcD4KICAgICAgICAgPHA+SG9yc2VtYW5zaGlwLCBtb3Jlb3ZlciwgaGFkIGJlZW4gZWFzeSBmb3IgaGltIGZyb20gYm95aG9vZDsgZm9yIGhlIHdhcyB3b250IHRvIHB1dCBoaXMgaGFuZHMgYmVoaW5kIGhpcyBiYWNrIGFuZCwgaG9sZGluZyB0aGVtIGNsb3NlbHkgdGhlcmUsIHRvIHJpZGUgaGlzIGhvcnNlIGF0IGZ1bGwgc3BlZWQuIEFuZCBpbiB0aGUgR2FsbGljIGNhbXBhaWducyBoZSBwcmFjdGlzZWQgZGljdGF0aW5nIGxldHRlcnMgb24gaG9yc2ViYWNrIGFuZCBrZWVwaW5nIHR3byBzY3JpYmVzIGF0IG9uY2UgYnVzeSwgb3IsIGFzIE9wcGl1cyBzYXlzLCBldmVuIG1vcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkLCBtb3Jlb3ZlciwgdGhhdCBDYWVzYXIgd2FzIHRoZSBmaXJzdCB0byBkZXZpc2UgaW50ZXJjb3Vyc2Ugd2l0aCBoaXMgZnJpZW5kcyBieSBsZXR0ZXIsIHNpbmNlIGhlIGNvdWxkIG5vdCB3YWl0IGZvciBwZXJzb25hbCBpbnRlcnZpZXdzIG9uIHVyZ2VudCBtYXR0ZXJzIG93aW5nIHRvIHRoZSBtdWx0aXR1ZGUgb2YgaGlzIG9jY3VwYXRpb25zIGFuZCB0aGUgZ3JlYXQgc2l6ZSBvZiB0aGUgY2l0eS4gT2YgaGlzIGluZGlmZmVyZW5jZSBpbiByZWdhcmQgdG8gaGlzIGRpZXQgdGhlIGZvbGxvd2luZyBjaXJjdW1zdGFuY2UgYWxzbyBpcyBicm91Z2h0IGluIHByb29mLiBXaGVuIHRoZSBob3N0IHdobyB3YXMgZW50ZXJ0YWluaW5nIGhpbSBpbiBNZWRpb2xhbnVtLCBWYWxlcml1cyBMZW8sIHNlcnZlZCB1cCBhc3BhcmFndXMgZHJlc3NlZCB3aXRoIG15cnJoIGluc3RlYWQgb2Ygb2xpdmUgb2lsLCBDYWVzYXIgYXRlIG9mIGl0IHdpdGhvdXQgYWRvLCBhbmQgcmVidWtlZCBoaXMgZnJpZW5kcyB3aGVuIHRoZXkgc2hvd2VkIGRpc3BsZWFzdXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+U3VyZWx5LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pdCB3ZXJlIGVub3VnaCBub3QgdG8gZWF0IHdoYXQgeW91IGRvbid0IGxpa2U7IGJ1dCBoZSB3aG8gZmluZHMgZmF1bHQgd2l0aCBpbGwtYnJlZWRpbmcgbGlrZSB0aGlzIGlzIGlsbC1icmVkIGhpbXNlbGY8L3E+IE9uY2UsIHRvbywgdXBvbiBhIGpvdXJuZXksIGhlIGFuZCBoaXMgZm9sbG93ZXJzIHdlcmUgZHJpdmVuIGJ5IGEgc3Rvcm0gaW50byBhIHBvb3IgbWFuJ3MgaHV0LCBhbmQgd2hlbiBoZSBmb3VuZCB0aGF0IGl0IGNvbnNpc3RlZCBvZiBvbmUgcm9vbSBvbmx5LCBhbmQgdGhhdCBvbmUgYmFyZWx5IGFibGUgdG8gYWNjb21tb2RhdGUgYSBzaW5nbGUgcGVyc29uLCBoZSBzYWlkIHRvIGhpcyBmcmllbmRzIHRoYXQgaG9ub3VycyBtdXN0IGJlIHlpZWxkZWQgdG8gdGhlIHN0cm9uZ2VzdCwgYnV0IG5lY2Vzc2l0aWVzIHRvIHRoZSB3ZWFrZXN0LCBhbmQgYmFkZSBPcHBpdXMgbGllIGRvd24gdGhlcmUsIHdoaWxlIGhlIGhpbXNlbGYgd2l0aCB0aGUgcmVzdCBvZiBoaXMgY29tcGFueSBzbGVwdCBpbiB0aGUgcG9yY2guPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0byByZXN1bWUsIHRoZSBmaXJzdCBvZiBoaXMgR2FsbGljIHdhcnMgd2FzIGFnYWluc3QgdGhlIEhlbHZldGlpIGFuZCBUaWd1cmluaSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMS4yICIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+QmVsbC4gR2FsbC48L3RpdGxlPiBpLiAyLTI5PC9iaWJsPi48L25vdGU+IHdobyBoYWQgc2V0IGZpcmUgdG8gdGhlaXIgdHdlbHZlIGNpdGllcyBhbmQgZm91ciBodW5kcmVkIHZpbGxhZ2VzIGFuZCB3ZXJlIGFkdmFuY2luZyB0aHJvdWdoIHRoYXQgcGFydCBvZiBHYXVsIHdoaWNoIHdhcyBzdWJqZWN0IHRvIHRoZSBSb21hbnMsIGFzIG9uY2UgdGhlIENpbWJyaSBhbmQgVGV1dG9uZXMgaGFkIGRvbmUuIFRvIHRoZXNlIHRoZXkgd2VyZSB0aG91Z2h0IHRvIGJlIG5vdCBpbmZlcmlvciBpbiBjb3VyYWdlIGFuZCBvZiBlcXVhbCBudW1iZXJzLCBiZWluZyB0aHJlZSBodW5kcmVkIHRob3VzYW5kIGluIGFsbCwgb2Ygd2hvbSBvbmUgaHVuZHJlZCBhbmQgbmluZXR5IHRob3VzYW5kIHdlcmUgZmlnaHRpbmcgbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgVGlndXJpbmkgd2VyZSBjcnVzaGVkIGF0IHRoZSByaXZlciBBcmFyLCBub3QgYnkgQ2Flc2FyIGhpbXNlbGYsIGJ1dCBieSBMYWJpZW51cywgaGlzIGRlcHV0eTsgdGhlIEhlbHZldGlpLCBob3dldmVyLCB1bmV4cGVjdGVkbHkgYXR0YWNrZWQgQ2Flc2FyIGhpbXNlbGYgb24gdGhlIG1hcmNoLCBhcyBoZSB3YXMgbGVhZGluZyBoaXMgZm9yY2VzIHRvd2FyZHMgYSBmcmllbmRseSBjaXR5LCBidXQgaGUgc3VjY2VlZGVkIGluIHJlYWNoaW5nIGEgc3Ryb25nIHBsYWNlIG9mIHJlZnVnZS4gSGVyZSwgYWZ0ZXIgaGUgaGFkIGNvbGxlY3RlZCBhbmQgYXJyYXllZCBoaXMgZm9yY2VzLCBhIGhvcnNlIHdhcyBicm91Z2h0IHRvIGhpbS4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGlzIGhvcnNlLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdpbGwgdXNlIGZvciB0aGUgcHVyc3VpdCBhZnRlciBteSB2aWN0b3J5OyBidXQgbm93IGxldCB1cyBnbyBhZ2FpbnN0IHRoZSBlbmVteSw8L3E+IGFuZCBhY2NvcmRpbmdseSBsZWQgdGhlIGNoYXJnZSBvbiBmb290LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBhIGxvbmcgYW5kIGhhcmQgc3RydWdnbGUgaGUgcm91dGVkIHRoZSBlbmVteSdzIGZpZ2h0aW5nIG1lbiwgYnV0IGhhZCB0aGUgbW9zdCB0cm91YmxlIGF0IHRoZWlyIHJhbXBhcnQgb2Ygd2FnZ29ucywgd2hlcmUgbm90IG9ubHkgZGlkIHRoZSBtZW4gdGhlbXNlbHZlcyBtYWtlIGEgc3RhbmQgYW5kIGZpZ2h0LCBidXQgYWxzbyB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4gZGVmZW5kZWQgdGhlbXNlbHZlcyB0byB0aGUgZGVhdGggYW5kIHdlcmUgY3V0IHRvIHBpZWNlcyB3aXRoIHRoZSBtZW4uIFRoZSBiYXR0bGUgd2FzIGhhcmRseSBvdmVyIGJ5IG1pZG5pZ2h0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UbyB0aGUgbm9ibGUgd29yayBvZiB2aWN0b3J5IENhZXNhciBhZGRlZCBhIG5vYmxlciBzdGlsbCwgdGhhdCBvZiBzZXR0bGluZyB0aG9zZSBvZiB0aGUgQmFyYmFyaWFucyB3aG8gaGFkIGVzY2FwZWQgYWxpdmUgZnJvbSB0aGUgYmF0dGxlICh0aGVyZSB3ZXJlIG1vcmUgdGhhbiBvbmUgaHVuZHJlZCB0aG91c2FuZCBvZiB0aGVtKSwgYW5kIGNvbXBlbGxpbmcgdGhlbSB0byByZXN1bWUgdGhlIHRlcnJpdG9yeSB3aGljaCB0aGV5IGhhZCBhYmFuZG9uZWQgYW5kIHRoZSBjaXRpZXMgd2hpY2ggdGhleSBoYWQgZGVzdHJveWVkLiBIZSBkaWQgdGhpcyBiZWNhdXNlIGhlIGZlYXJlZCB0aGF0IGlmIHRoZSB0ZXJyaXRvcnkgYmVjYW1lIHZhY2FudCB0aGUgR2VybWFucyB3b3VsZCBjcm9zcyB0aGUgUmhpbmUgYW5kIG9jY3VweSBpdC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjE5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHNlY29uZCB3YXIsIGRpcmVjdGx5IGluIGRlZmVuY2Ugb2YgdGhlIEdhdWxzLCB3YXMgYWdhaW5zdCB0aGUgR2VybWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMS4zMCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpLiAzMC01MzwvYmlibD4uPC9ub3RlPiBhbHRob3VnaCBwcmV2aW91c2x5LCBpbiBSb21lLCBoZSBoYWQgbWFkZSB0aGVpciBraW5nIEFyaW92aXN0dXMgYW4gYWxseS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY3RpbmcgYXMgY29uc3VsLCBpbiA1OSBCLkMuPC9ub3RlPiBCdXQgdGhleSB3ZXJlIGludG9sZXJhYmxlIG5laWdoYm91cnMgb2YgQ2Flc2FyJ3Mgc3ViamVjdHMsIGFuZCBpZiBhbiBvcHBvcnR1bml0eSBwcmVzZW50ZWQgaXRzZWxmIGl0IHdhcyB0aG91Z2h0IHRoYXQgdGhleSB3b3VsZCBub3QgcmVtYWluIHF1aWV0bHkgaW4gdGhlaXIgcHJlc2VudCBob21lcywgYnV0IHdvdWxkIGVuY3JvYWNoIHVwb24gYW5kIG9jY3VweSBHYXVsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TZWVpbmcgdGhhdCBoaXMgb2ZmaWNlcnMgd2VyZSBpbmNsaW5lZCB0byBiZSBhZnJhaWQsIGFuZCBwYXJ0aWN1bGFybHkgYWxsIHRoZSB5b3VuZyBtZW4gb2YgaGlnaCByYW5rIHdobyBoYWQgY29tZSBvdXQgaW50ZW5kaW5nIHRvIG1ha2UgdGhlIGNhbXBhaWduIHdpdGggQ2Flc2FyIGFuIG9wcG9ydHVuaXR5IGZvciBoaWdoIGxpdmluZyBhbmQgbW9uZXktbWFraW5nLCBoZSBjYWxsZWQgdGhlbSB0b2dldGhlcjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAxLjQwIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CLiBHLjwvdGl0bGU+IGkuIDQwPC9iaWJsPi48L25vdGU+IGFuZCBiYWRlIHRoZW0gYmUgb2ZmLCBzaW5jZSB0aGV5IHdlcmUgc28gdW5tYW5seSBhbmQgZWZmZW1pbmF0ZSwgYW5kIG5vdCBmb3JjZSB0aGVtc2VsdmVzIHRvIGZhY2UgZGFuZ2VyOyBhcyBmb3IgaGltc2VsZiwgaGUgc2FpZCBoZSB3b3VsZCB0YWtlIHRoZSB0ZW50aCBsZWdpb24gYWxvbmUgYW5kIG1hcmNoIGFnYWluc3QgdGhlIEJhcmJhcmlhbnM7IHRoZSBlbmVteSB3b3VsZCBiZSBubyBiZXR0ZXIgZmlnaHRlcnMgdGhhbiB0aGUgQ2ltYnJpLCBhbmQgaGUgaGltc2VsZiB3YXMgbm8gd29yc2UgYSBnZW5lcmFsIHRoYW4gTWFyaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5VcG9uIHRoaXMgdGhlIHRlbnRoIGxlZ2lvbiBzZW50IGEgZGVwdXRhdGlvbiB0byBoaW0sIGV4cHJlc3NpbmcgdGhlaXIgZ3JhdGl0dWRlLCB3aGlsZSB0aGUgb3RoZXIgbGVnaW9ucyByZXZpbGVkIHRoZWlyIG93biBjb21tYW5kZXJzLCBhbmQgYWxsIHRoZSBhcm15LCBub3cgZnVsbCBvZiBpbXBldHVvdXMgZWFnZXJuZXNzLCBmb2xsb3dlZCBDYWVzYXIgb24gYSBtYXJjaCBvZiBtYW55IGRheXMsIGFuZCBhdCBsYXN0IGVuY2FtcGVkIHdpdGhpbiB0d28gaHVuZHJlZCBmdXJsb25ncyBvZiB0aGUgZW5lbXkuPC9wPgogICAgICAgICA8cD5Ob3csIHRoZSB2ZXJ5IGFwcHJvYWNoIG9mIENhZXNhciBzb21ld2hhdCBzaGF0dGVyZWQgdGhlIHB1cnBvc2Ugb2YgQXJpb3Zpc3R1cy4gRm9yIGhlIGRpZCBub3QgZXhwZWN0IHRoYXQgdGhlIFJvbWFucyB3b3VsZCBhdHRhY2sgdGhlIEdlcm1hbnMsIHdob3NlIG9uc2V0IGhlIHRob3VnaHQgdGhleSBjb3VsZCBub3Qgd2l0aHN0YW5kLCBhbmQgaGUgd2FzIGFtYXplZCBhdCB0aGUgYm9sZG5lc3Mgb2YgQ2Flc2FyOyBiZXNpZGVzLCBoZSBzYXcgdGhhdCBoaXMgb3duIGFybXkgd2FzIGRpc3R1cmJlZC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+U3RpbGwgbW9yZSwgdG9vLCB3YXMgdGhlIHNwaXJpdCBvZiB0aGUgR2VybWFucyBibHVudGVkIGJ5IHRoZSBwcm9waGVjaWVzIG9mIHRoZWlyIGhvbHkgd29tZW4sIHdobyB1c2VkIHRvIGZvcmV0ZWxsIHRoZSBmdXR1cmUgYnkgb2JzZXJ2aW5nIHRoZSBlZGRpZXMgaW4gdGhlIHJpdmVycyBhbmQgYnkgZmluZGluZyBzaWducyBpbiB0aGUgd2hpcmxpbmdzIGFuZCBzcGxhc2hpbmdzIG9mIHRoZSB3YXRlcnMsIGFuZCBub3cgZm9yYmFkZSBqb2luaW5nIGJhdHRsZSBiZWZvcmUgYSBuZXcgbW9vbiBnYXZlIGl0cyBsaWdodC4gV2hlbiBDYWVzYXIgbGVhcm5lZCB0aGlzLCBhbmQgc2F3IHRoYXQgdGhlIEdlcm1hbnMga2VwdCBxdWlldCwgaGUgZGVjaWRlZCB0aGF0IGl0IHdhcyBhIGdvb2QgcGxhbiB0byBlbmdhZ2UgdGhlbSB3aGlsZSB0aGV5IHdlcmUgb3V0IG9mIGhlYXJ0LCByYXRoZXIgdGhhbiB0byBzaXQgc3RpbGwgYW5kIHdhaXQgZm9yIHRoZWlyIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvLCBieSBhdHRhY2tpbmcgdGhlaXIgZW50cmVuY2htZW50cyBhbmQgdGhlIGhpbGxzIG9uIHdoaWNoIHRoZXkgd2VyZSBlbmNhbXBlZCwgaGUgaXJyaXRhdGVkIHRoZW0gYW5kIGluY2l0ZWQgdGhlbSB0byBjb21lIGRvd24gaW4gYW5nZXIgYW5kIGZpZ2h0IHRoZSBpc3N1ZSBvdXQuIFRoZXkgd2VyZSBzaWduYWxseSByb3V0ZWQsIGFuZCBDYWVzYXIgcHVyc3VlZCB0aGVtIGEgZGlzdGFuY2Ugb2YgZm91ciBodW5kcmVkIGZ1cmxvbmdzLCBhcyBmYXIgYXMgdGhlIFJoaW5lLCBhbmQgZmlsbGVkIGFsbCB0aGUgaW50ZXJ2ZW5pbmcgcGxhaW4gd2l0aCBkZWFkIGJvZGllcyBhbmQgc3BvaWxzLiBBcmlvdmlzdHVzLCB3aXRoIGEgZmV3IGZvbGxvd2Vycywgc3VjY2VlZGVkIGluIGNyb3NzaW5nIHRoZSBSaGluZTsgaGlzIGRlYWQgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIGVpZ2h0eSB0aG91c2FuZCBpbiBudW1iZXIuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgYWNoaWV2ZW1lbnQsIENhZXNhciBsZWZ0IGhpcyBmb3JjZXMgYW1vbmcgdGhlIFNlcXVhbmkgdG8gc3BlbmQgdGhlIHdpbnRlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgd2ludGVyIG9mIDU4LTU3IEIuQy48L25vdGU+IHdoaWxlIGhlIGhpbXNlbGYsIGRlc2lyb3VzIG9mIGdpdmluZyBhdHRlbnRpb24gdG8gbWF0dGVycyBhdCBSb21lLCBjYW1lIGRvd24gdG8gR2F1bCBhbG9uZyB0aGUgUG8sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDEuNTQiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkIuIEcuPC90aXRsZT4gaS4gNTQ8L2JpYmw+OiA8Zm9yZWlnbiBsYW5nPSJsYSI+aXBzZSBpbiBjaXRlcmlvcmVtIEdhbGxpYW0gYWQgY29udmVudHVzIGFnZW5kb3MgcHJvZmVjdHVzIGVzdC48L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggd2FzIGEgcGFydCBvZiB0aGUgcHJvdmluY2UgYXNzaWduZWQgdG8gaGltOyBmb3IgdGhlIHJpdmVyIGNhbGxlZCBSdWJpY29uIHNlcGFyYXRlcyB0aGUgcmVzdCBvZiBJdGFseSBmcm9tIENpc2FscGluZSBHYXVsLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZXJlIGhlIGZpeGVkIGhpcyBxdWFydGVycyBhbmQgY2FycmllZCBvbiBoaXMgcG9saXRpY2FsIHNjaGVtZXMuIE1hbnkgY2FtZSB0byBzZWUgaGltLCBhbmQgaGUgZ2F2ZSBlYWNoIG9uZSB3aGF0IGhlIHdhbnRlZCwgYW5kIHNlbnQgYWxsIGF3YXkgaW4gYWN0dWFsIHBvc3Nlc3Npb24gb2Ygc29tZSBvZiBoaXMgZmF2b3VycyBhbmQgaG9waW5nIGZvciBtb3JlLiBBbmQgZHVyaW5nIGFsbCB0aGUgcmVzdCBvZiB0aGUgdGltZSBvZiBoaXMgY2FtcGFpZ25zIGluIEdhdWwsIHVubm90aWNlZCBieSBQb21wZXksIGhlIHdhcyBhbHRlcm5hdGVseSBzdWJkdWluZyB0aGUgZW5lbXkgd2l0aCB0aGUgYXJtcyBvZiB0aGUgY2l0aXplbnMsIG9yIGNhcHR1cmluZyBhbmQgc3ViZHVpbmcgdGhlIGNpdGl6ZW5zIHdpdGggdGhlIG1vbmV5IHdoaWNoIGhlIGdvdCBmcm9tIHRoZSBlbmVteS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gaGUgaGVhcmQgdGhhdCB0aGUgQmVsZ2FlLCB3aG8gd2VyZSB0aGUgbW9zdCBwb3dlcmZ1bCBvZiB0aGUgR2F1bHMgYW5kIG9jY3VwaWVkIHRoZSB0aGlyZCBwYXJ0IG9mIGFsbCB0aGVpciBjb3VudHJ5LCBoYWQgcmV2b2x0ZWQsIGFuZCBoYWQgYXNzZW1ibGVkIHVua25vd24gbXlyaWFkcyBvZiBhcm1lZCBtZW4sIGhlIHR1cm5lZCBiYWNrIGF0IG9uY2UgYW5kIG1hcmNoZWQgdGhpdGhlciB3aXRoIGdyZWF0IHNwZWVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhZXNhcidzIGNhbXBhaWduIGFnYWluc3QgdGhlIEJlbGdhZSwgaW4gNTcgQi5DLiwgaXMgZGVzY3JpYmVkIGJ5IGhpbXNlbGYgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gaWkuIDEtMzM8L2JpYmw+Ljwvbm90ZT4gSGUgZmVsbCB1cG9uIHRoZSBlbmVteSBhcyB0aGV5IHdlcmUgcGx1bmRlcmluZyB0aGUgR2F1bHMgdGhhdCB3ZXJlIGluIGFsbGlhbmNlIHdpdGggUm9tZSwgYW5kIHNvIHJvdXRlZCBhbmQgZGVzdHJveWVkIHRoZSBsZWFzdCBzY2F0dGVyZWQgYW5kIG1vc3QgbnVtZXJvdXMgb2YgdGhlbSwgYWZ0ZXIgYSBkaXNncmFjZWZ1bCBzdHJ1Z2dsZSBvbiB0aGVpciBwYXJ0LCB0aGF0IHRoZSBSb21hbnMgY291bGQgY3Jvc3MgbGFrZXMgYW5kIGRlZXAgcml2ZXJzIGZvciB0aGUgbXVsdGl0dWRlIG9mIGRlYWQgYm9kaWVzIGluIHRoZW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgcmViZWxzIHdobyBkd2VsdCBhbG9uZyB0aGUgb2NlYW4gc3VibWl0dGVkIHdpdGhvdXQgYSBiYXR0bGU7IGFnYWluc3QgdGhlIE5lcnZpaSwgaG93ZXZlciwgdGhlIG1vc3Qgc2F2YWdlIGFuZCB3YXJsaWtlIG9mIHRoZSBwZW9wbGUgaW4gdGhlc2UgcGFydHMsIENhZXNhciBsZWQgaGlzIGZvcmNlcy4gVGhlIE5lcnZpaSwgd2hvIGR3ZWx0IGluIGRlbnNlIHdvb2RzLCBhbmQgaGFkIHBsYWNlZCB0aGVpciBmYW1pbGllcyBhbmQgcG9zc2Vzc2lvbnMgaW4gYSByZWNlc3Mgb2YgdGhlIGZvcmVzdCBhdCBmYXJ0aGVzdCByZW1vdmUgZnJvbSB0aGUgZW5lbXksIGF0IGEgdGltZSB3aGVuIENhZXNhciB3YXMgZm9ydGlmeWluZyBhIGNhbXAgYW5kIGRpZCBub3QgZXhwZWN0IHRoZSBiYXR0bGUsIGZlbGwgdXBvbiBoaW0gc3VkZGVubHksIHNpeHR5IHRob3VzYW5kIHN0cm9uZy4gVGhleSByb3V0ZWQgaGlzIGNhdmFscnksIGFuZCBzdXJyb3VuZGVkIHRoZSBzZXZlbnRoIGFuZCB0d2VsZnRoIGxlZ2lvbnMgYW5kIHNsZXcgYWxsIHRoZWlyIGNlbnR1cmlvbnMsIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYWQgbm90IENhZXNhciBzbmF0Y2hlZCBhIHNoaWVsZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPlNjdXRvIGFiIG5vdmlzc2ltaXMgdW5pIG1pbGl0aSBkZXRyYWN0bzwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDIuMjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpaS4gMjUsIDI8L2JpYmw+KS48L25vdGU+IG1hZGUgaGlzIHdheSB0aHJvdWdoIHRoZSBjb21iYXRhbnRzIGluIGZyb250IG9mIGhpbSwgYW5kIGh1cmxlZCBoaW1zZWxmIHVwb24gdGhlIEJhcmJhcmlhbnM7IGFuZCBoYWQgbm90IHRoZSB0ZW50aCBsZWdpb24sIGF0IHNpZ2h0IG9mIGhpcyBwZXJpbCwgcnVuIGRvd24gZnJvbSB0aGUgaGVpZ2h0cyBhbmQgY3V0IHRoZSByYW5rcyBvZiB0aGUgZW5lbXkgdG8gcGllY2VzLCBub3QgYSBSb21hbiwgaXQgaXMgdGhvdWdodCwgd291bGQgaGF2ZSBzdXJ2aXZlZC4gQXMgaXQgd2FzLCBob3dldmVyLCBvd2luZyB0byBDYWVzYXIncyBkYXJpbmcsIHRoZXkgZm91Z2h0IGJleW9uZCB0aGVpciBwb3dlcnMsIGFzIHRoZSBzYXlpbmcgaXMsIGFuZCBldmVuIHRoZW4gZGlkIG5vdCByb3V0IHRoZSBOZXJ2aWksIGJ1dCBjdXQgdGhlbSBkb3duIGFzIHRoZXkgZGVmZW5kZWQgdGhlbXNlbHZlczsgZm9yIG91dCBvZiBzaXh0eSB0aG91c2FuZCBvbmx5IGZpdmUgaHVuZHJlZCBhcmUgc2FpZCB0byBoYXZlIGNvbWUgb2ZmIGFsaXZlLCBhbmQgb25seSB0aHJlZSBvZiB0aGVpciBzZW5hdG9ycyBvdXQgb2YgZm91ciBodW5kcmVkLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgUm9tYW4gc2VuYXRlLCBvbiBsZWFybmluZyBvZiB0aGVzZSBzdWNjZXNzZXMsIGRlY3JlZWQgc2FjcmlmaWNlcyB0byB0aGUgZ29kcyBhbmQgY2Vzc2F0aW9uIGZyb20gYnVzaW5lc3MsIHdpdGggZmVzdGl2YWwsIGZvciBmaWZ0ZWVuIGRheXMsIGEgZ3JlYXRlciBudW1iZXIgdGhhbiBmb3IgYW55IHZpY3RvcnkgYmVmb3JlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+UXVvZCBhbnRlIGlkIHRlbXB1cyBhY2NpZGl0IG51bGxpPC9mb3JlaWduPiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMi4zNSIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpaS4gMzUsIDQ8L2JpYmw+KS48L25vdGU+IEZvciB0aGUgZGFuZ2VyIHdhcyBzZWVuIHRvIGhhdmUgYmVlbiBncmVhdCB3aGVuIHNvIG1hbnkgbmF0aW9ucyBhdCBvbmNlIGhhZCBicm9rZW4gb3V0IGluIHJldm9sdCwgYW5kIGJlY2F1c2UgQ2Flc2FyIHdhcyB0aGUgdmljdG9yLCB0aGUgZ29vZCB3aWxsIG9mIHRoZSBtdWx0aXR1ZGUgdG93YXJkcyBoaW0gbWFkZSBoaXMgdmljdG9yeSBtb3JlIHNwbGVuZGlkLiBDYWVzYXIgaGltc2VsZiwgYWZ0ZXIgc2V0dGxpbmcgbWF0dGVycyBpbiBHYXVsLCBhZ2FpbiBzcGVudCB0aGUgd2ludGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NTctNTYgQi5DLiBDZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1MS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBsaS4gMzwvYmlibD4gZi48L25vdGU+IGluIHRoZSByZWdpb25zIGFsb25nIHRoZSBQbywgY2Fycnlpbmcgb3V0IGhpcyBwbGFucyBhdCBSb21lLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm90IG9ubHkgZGlkIHRoZSBjYW5kaWRhdGVzIGZvciBvZmZpY2UgdGhlcmUgZW5qb3kgaGlzIGFzc2lzdGFuY2UsIGFuZCB3aW4gdGhlaXIgZWxlY3Rpb25zIGJ5IGNvcnJ1cHRpbmcgdGhlIHBlb3BsZSB3aXRoIG1vbmV5IGZyb20gaGltLCBhbmQgZG8gZXZlcnl0aGluZyB3aGljaCB3YXMgbGlrZWx5IHRvIGVuaGFuY2UgaGlzIHBvd2VyLCBidXQgYWxzbyBtb3N0IG9mIHRoZSBtZW4gb2YgaGlnaGVzdCByYW5rIGFuZCBncmVhdGVzdCBpbmZsdWVuY2UgY2FtZSB0byBzZWUgaGltIGF0IEx1Y2EsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQXByaWwgb2YgNTYgQi5DLjwvbm90ZT4gaW5jbHVkaW5nIFBvbXBleSwgQ3Jhc3N1cywgQXBwaXVzIHRoZSBnb3Zlcm5vciBvZiBTYXJkaW5pYSwgYW5kIE5lcG9zIHRoZSBwcm9jb25zdWwgb2YgU3BhaW4sIHNvIHRoYXQgdGhlcmUgd2VyZSBhIGh1bmRyZWQgYW5kIHR3ZW50eSBsaWN0b3JzIGluIHRoZSBwbGFjZSBhbmQgbW9yZSB0aGFuIHR3byBodW5kcmVkIHNlbmF0b3JzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGhlbGQgYSBjb3VuY2lsIGFuZCBzZXR0bGVkIG1hdHRlcnMgb24gdGhlIGZvbGxvd2luZyBiYXNpcy4gUG9tcGV5IGFuZCBDcmFzc3VzIHdlcmUgdG8gYmUgZWxlY3RlZCBjb25zdWxzIGZvciB0aGUgZW5zdWluZyB5ZWFyLCBhbmQgQ2Flc2FyIHdhcyB0byBoYXZlIG1vbmV5IHZvdGVkIGhpbSwgYmVzaWRlcyBhbm90aGVyIGZpdmUgeWVhcnMgaW4gaGlzIHByb3ZpbmNpYWwgY29tbWFuZC4gVGhpcyBzZWVtZWQgdmVyeSBzdHJhbmdlIHRvIG1lbiBvZiB1bmRlcnN0YW5kaW5nLiBGb3IgdGhvc2Ugd2hvIHdlcmUgZ2V0dGluZyBzbyBtdWNoIG1vbmV5IGZyb20gQ2Flc2FyIHVyZ2VkIHRoZSBzZW5hdGUgdG8gZ2l2ZSBoaW0gbW9uZXkgYXMgaWYgaGUgaGFkIG5vbmUsIG5heSByYXRoZXIsIHRoZXkgZm9yY2VkIGl0IHRvIGRvIHNvLCB0aG91Z2ggaXQgZ3JvYW5lZCBvdmVyIGl0cyBvd24gZGVjcmVlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0bywgaW5kZWVkLCB3YXMgbm90IHRoZXJlLCBmb3IgaGUgaGFkIHB1cnBvc2VseSBiZWVuIHNlbnQgb3V0IG9mIHRoZSB3YXkgb24gYSBtaXNzaW9uIHRvIEN5cHJ1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAzNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gTWlub3I8L3RpdGxlPiwgeHh4aXY8L2JpYmw+Ljwvbm90ZT4gYW5kIEZhdm9uaXVzLCB3aG8gd2FzIGFuIGFyZGVudCBmb2xsb3dlciBvZiBDYXRvLCBmaW5kaW5nIGhpbXNlbGYgdW5hYmxlIHRvIGFjY29tcGxpc2ggYW55dGhpbmcgYnkgaGlzIG9wcG9zaXRpb24sIGJvdW5kZWQgb3V0IG9mIGRvb3JzIGFuZCBjbGFtb3VyZWQgdG8gdGhlIHBvcHVsYWNlLiBCdXQgbm8gb25lIGdhdmUgaGVlZCB0byBoaW0sIGZvciBzb21lIHdlcmUgaW4gYXdlIG9mIFBvbXBleSBhbmQgQ3Jhc3N1cywgYW5kIG1vc3Qgd2FudGVkIHRvIHBsZWFzZSBDYWVzYXIsIGxpdmVkIGluIGhvcGVzIG9mIGhpcyBmYXZvdXJzLCBhbmQgc28ga2VwdCBxdWlldC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmV0dXJuaW5nIHRvIGhpcyBmb3JjZXMgaW4gR2F1bCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA1NSBCLkMuIFBsdXRhcmNoIHBhc3NlcyBvdmVyIENhZXNhcidzIGNhbXBhaWduIG9mIDU2IEIuQy4gaW4gR2F1bCwgZm9sbG93aW5nIHRoZSBjb25mZXJlbmNlIGF0IEx1Y2EuIENhZXNhciBkZXNjcmliZXMgaXQgaW4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gaWlpPC9iaWJsPi48L25vdGU+IENhZXNhciBmb3VuZCBhIGNvbnNpZGVyYWJsZSB3YXIgaW4gdGhlIGNvdW50cnksIHNpbmNlIHR3byBncmVhdCBHZXJtYW4gbmF0aW9ucyBoYWQganVzdCBjcm9zc2VkIHRoZSBSaGluZSB0byBwb3NzZXNzIHRoZSBsYW5kLCBvbmUgY2FsbGVkIHRoZSBVc2lwZXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyIGNhbGxzIHRoZW0gVXNpcGV0ZXMgYW5kIFRlbmN0ZXJpICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gRyA8L3RpdGxlPml2LiAxPC9iaWJsPikuPC9ub3RlPiB0aGUgb3RoZXIgdGhlIFRlbnRlcml0YWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNvbmNlcm5pbmcgdGhlIGJhdHRsZSB3aGljaCB3YXMgZm91Z2h0IHdpdGggdGhlbSBDYWVzYXIgc2F5cyBpbiBoaXMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj4KICAgICAgICAgICAgICAgPHRpdGxlPkNvbW1lbnRhcmllczwvdGl0bGU+CiAgICAgICAgICAgIDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDQuMTMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpdi4gMTM8L2JpYmw+Ljwvbm90ZT4gdGhhdCB0aGUgQmFyYmFyaWFucywgd2hpbGUgdHJlYXRpbmcgd2l0aCBoaW0gdW5kZXIgYSB0cnVjZSwgYXR0YWNrZWQgb24gdGhlaXIgbWFyY2ggYW5kIHRoZXJlZm9yZSByb3V0ZWQgaGlzIGZpdmUgdGhvdXNhbmQgY2F2YWxyeSB3aXRoIHRoZWlyIGVpZ2h0IGh1bmRyZWQsIHNpbmNlIGhpcyBtZW4gd2VyZSB0YWtlbiBvZmYgdGhlaXIgZ3VhcmQ7IHRoYXQgdGhleSB0aGVuIHNlbnQgb3RoZXIgZW52b3lzIHRvIGhpbSB3aG8gdHJpZWQgdG8gZGVjZWl2ZSBoaW0gYWdhaW4sIGJ1dCBoZSBoZWxkIHRoZW0gZmFzdCBhbmQgbGVkIGhpcyBhcm15IGFnYWluc3QgdGhlIEJhcmJhcmlhbnMsIGNvbnNpZGVyaW5nIHRoYXQgZ29vZCBmYWl0aCB0b3dhcmRzIHN1Y2ggZmFpdGhsZXNzIGJyZWFrZXJzIG9mIHRydWNlcyB3YXMgZm9sbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBUYW51c2l1cyBzYXlzIHRoYXQgd2hlbiB0aGUgc2VuYXRlIHZvdGVkIHNhY3JpZmljZXMgb2YgcmVqb2ljaW5nIG92ZXIgdGhlIHZpY3RvcnksIENhdG8gcHJvbm91bmNlZCB0aGUgb3BpbmlvbiB0aGF0IHRoZXkgb3VnaHQgdG8gZGVsaXZlciB1cCBDYWVzYXIgdG8gdGhlIEJhcmJhcmlhbnMsIHRodXMgcHVyZ2luZyBhd2F5IHRoZSB2aW9sYXRpb24gb2YgdGhlIHRydWNlIGluIGJlaGFsZiBvZiB0aGUgY2l0eSwgYW5kIHR1cm5pbmcgdGhlIGN1cnNlIHRoZXJlZm9yIG9uIHRoZSBndWlsdHkgbWFuLjwvcD4KICAgICAgICAgPHA+T2YgdGhvc2Ugd2hvIGhhZCBjcm9zc2VkIHRoZSBSaGluZSBpbnRvIEdhdWwgZm91ciBodW5kcmVkIHRob3VzYW5kIHdlcmUgY3V0IHRvIHBpZWNlcywgYW5kIHRoZSBmZXcgd2hvIHN1Y2NlZWRlZCBpbiBtYWtpbmcgdGhlaXIgd2F5IGJhY2sgd2VyZSByZWNlaXZlZCBieSB0aGUgU3VnYW1icmksIGEgR2VybWFuIG5hdGlvbi4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBhY3Rpb24gQ2Flc2FyIG1hZGUgYSBncm91bmQgb2YgY29tcGxhaW50IGFnYWluc3QgdGhlIFN1Z2FtYnJpLCBhbmQgYmVzaWRlcywgaGUgY292ZXRlZCB0aGUgZmFtZSBvZiBiZWluZyB0aGUgZmlyc3QgbWFuIHRvIGNyb3NzIHRoZSBSaGluZSB3aXRoIGFuIGFybXkuIEhlIHRoZXJlZm9yZSBiZWdhbiB0byBicmlkZ2UgdGhlIHJpdmVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjE2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gaXYuIDE2LTE5PC9iaWJsPi48L25vdGU+IGFsdGhvdWdoIGl0IHdhcyB2ZXJ5IGJyb2FkLCBhbmQgYXQgdGhpcyBwb2ludCBpbiBpdHMgY291cnNlIGVzcGVjaWFsbHkgc3dvbGxlbiwgcm91Z2gsIGFuZCBpbXBldHVvdXMsIGFuZCB3aXRoIHRoZSB0cnVua3MgYW5kIGJyYW5jaGVzIG9mIHRyZWVzIHdoaWNoIGl0IGJvcmUgZG93biBzdHJlYW0ga2VwdCBzbWl0aW5nIGFuZCB0ZWFyaW5nIGF3YXkgdGhlIHN1cHBvcnRzIG9mIGhpcyBicmlkZ2UuIDx0aXRsZT5CdXQgQ2Flc2FyIGNhdWdodCB1cCB0aGVzZSB0cnVua3MgYW5kIGJyYW5jaGVzIHdpdGggYnVsd2Fya3Mgb2YgZ3JlYXQgdGltYmVycyBwbGFudGVkIGFjcm9zcyB0aGUgc3RyZWFtLCBhbmQgaGF2aW5nIHRodXMgYnJpZGxlZCBhbmQgeW9rZWQgdGhlIGRhc2hpbmcgY3VycmVudCwgaGUgYnJvdWdodCBoaXMgYnJpZGdl4oCUc2lnaHQgYmV5b25kIGFsbCBjcmVkZW5jZeKAlHRvIGNvbXBsZXRpb24gaW4gdGVuIGRheXMuPC90aXRsZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlIG5vdyB0aHJldyBoaXMgZm9yY2VzIGFjcm9zcyB0aGUgcml2ZXIuIE5vIG9uZSB2ZW50dXJlZCB0byBvcHBvc2UgaGltLCBidXQgZXZlbiB0aGUgU3VldmksIHdobyB3ZXJlIHRoZSBmb3JlbW9zdCBuYXRpb24gb2YgdGhlIEdlcm1hbnMsIGJlc3Rvd2VkIHRoZW1zZWx2ZXMgYW5kIHRoZWlyIGJlbG9uZ2luZ3MgaW4gZGVlcCBhbmQgd29vZHkgZGVmaWxlcy4gQ2Flc2FyIHJhdmFnZWQgdGhlIGNvdW50cnkgb2YgdGhlIGVuZW15IHdpdGggZmlyZSwgZ2F2ZSBlbmNvdXJhZ2VtZW50IHRvIHRoZSBjb25zdGFudCBmcmllbmRzIG9mIFJvbWUsIGFuZCB0aGVuIHJldGlyZWQgYWdhaW4gaW50byBHYXVsLCBoYXZpbmcgc3BlbnQgZWlnaHRlZW4gZGF5cyBpbiBHZXJtYW55LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBCcml0YW5uaSB3YXMgY2VsZWJyYXRlZCBmb3IgaXRzIGRhcmluZy4gRm9yIGhlIHdhcyB0aGUgZmlyc3QgdG8gbGF1bmNoIGEgZmxlZXQgdXBvbiB0aGUgd2VzdGVybiBvY2VhbiBhbmQgdG8gc2FpbCB0aHJvdWdoIHRoZSBBdGxhbnRpYyBzZWEgY2FycnlpbmcgYW4gYXJteSB0byB3YWdlIHdhci4gVGhlIGlzbGFuZCB3YXMgb2YgaW5jcmVkaWJsZSBtYWduaXR1ZGUsIGFuZCBmdXJuaXNoZWQgbXVjaCBtYXR0ZXIgb2YgZGlzcHV0ZSB0byBtdWx0aXR1ZGVzIG9mIHdyaXRlcnMsIHNvbWUgb2Ygd2hvbSBhdmVycmVkIHRoYXQgaXRzIG5hbWUgYW5kIHN0b3J5IGhhZCBiZWVuIGZhYnJpY2F0ZWQsIHNpbmNlIGl0IG5ldmVyIGhhZCBleGlzdGVkIGFuZCBkaWQgbm90IHRoZW4gZXhpc3Q7IGFuZCBpbiBoaXMgYXR0ZW1wdCB0byBvY2N1cHkgaXQgaGUgY2FycmllZCB0aGUgUm9tYW4gc3VwcmVtYWN5IGJleW9uZCB0aGUgY29uZmluZXMgb2YgdGhlIGluaGFiaXRlZCB3b3JsZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdHdpY2U8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbmNlIGluIDU1IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDQuMjAiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpdi4gMjAtMzY8L2JpYmw+KTsgYWdhaW4gaW4gNTQgQi5DLiAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gdi4gMS0yMjwvYmlibD4pLjwvbm90ZT4gY3Jvc3NpbmcgdG8gdGhlIGlzbGFuZCBmcm9tIHRoZSBvcHBvc2l0ZSBjb2FzdCBvZiBHYXVsIGFuZCBpbiBtYW55IGJhdHRsZXMgZGFtYWdpbmcgdGhlIGVuZW15IHJhdGhlciB0aGFuIGVucmljaGluZyBoaXMgb3duIG1lbuKAlGZvciB0aGVyZSB3YXMgbm90aGluZyB3b3J0aCB0YWtpbmcgZnJvbSBtZW4gd2hvIGxpdmVkIGluIHBvdmVydHkgYW5kIHdyZXRjaGVkbmVzc+KAlCBoZSBicm91Z2h0IHRoZSB3YXIgdG8gYW4gZW5kIHdoaWNoIHdhcyBub3QgdG8gaGlzIGxpa2luZywgaXQgaXMgdHJ1ZTsgc3RpbGwsIGhlIHRvb2sgaG9zdGFnZXMgZnJvbSB0aGUga2luZywgaW1wb3NlZCB0cmlidXRlcywgYW5kIHRoZW4gc2FpbGVkIGF3YXkgZnJvbSB0aGUgaXNsYW5kLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiBHYXVsIGhlIGZvdW5kIGxldHRlcnMgd2hpY2ggd2VyZSBhYm91dCB0byBiZSBzZW50IGFjcm9zcyB0byBoaW0uIFRoZXkgd2VyZSBmcm9tIGhpcyBmcmllbmRzIGluIFJvbWUsIGFuZCBhZHZpc2VkIGhpbSBvZiBoaXMgZGF1Z2h0ZXIncyBkZWF0aDsgc2hlIGRpZWQgaW4gY2hpbGQtYmlydGggYXQgUG9tcGV5J3MgaG91c2UuIEdyZWF0IHdhcyB0aGUgZ3JpZWYgb2YgUG9tcGV5LCBhbmQgZ3JlYXQgdGhlIGdyaWVmIG9mIENhZXNhciwgYW5kIHRoZWlyIGZyaWVuZHMgd2VyZSBncmVhdGx5IHRyb3VibGVkIHRvbzsgdGhleSBmZWx0IHRoYXQgdGhlIHJlbGF0aW9uc2hpcCB3aGljaCBhbG9uZSBrZXB0IHRoZSBkaXN0ZW1wZXJlZCBzdGF0ZSBpbiBoYXJtb255IGFuZCBjb25jb3JkIHdhcyBub3cgZGlzc29sdmVkLiBGb3IgdGhlIGJhYmUgYWxzbyBkaWVkIHByZXNlbnRseSwgYWZ0ZXIgc3Vydml2aW5nIGl0cyBtb3RoZXIgYSBmZXcgZGF5cy4gTm93IEp1bGlhLCBpbiBzcGl0ZSBvZiB0aGUgdHJpYnVuZXMsIHdhcyBjYXJyaWVkIGJ5IHRoZSBwZW9wbGUgdG8gdGhlIENhbXB1cyBNYXJ0aXVzLCB3aGVyZSBoZXIgZnVuZXJhbCByaXRlcyB3ZXJlIGhlbGQsIGFuZCB3aGVyZSBzaGUgbGllcyBidXJpZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciBsaWlpPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIncyBmb3JjZXMgd2VyZSBub3cgc28gbGFyZ2UgdGhhdCBoZSB3YXMgZm9yY2VkIHRvIGRpc3RyaWJ1dGUgdGhlbSBpbiBtYW55IHdpbnRlci1xdWFydGVycywgd2hpbGUgaGUgaGltc2VsZiwgYXMgaGlzIGN1c3RvbSB3YXMsIHR1cm5lZCBoaXMgc3RlcHMgdG93YXJkcyBJdGFseS4gVGhlbiBhbGwgR2F1bCBvbmNlIG1vcmUgYnJva2Ugb3V0IGluIHJldm9sdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNS4yNCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gRy48L3RpdGxlPiB2LiAyNC01MTwvYmlibD4uPC9ub3RlPiBhbmQgZ3JlYXQgYXJtaWVzIHdlbnQgYWJvdXQgYXR0YWNraW5nIHRoZSBlbnRyZW5jaG1lbnRzIGFuZCB0cnlpbmcgdG8gZGVzdHJveSB0aGUgd2ludGVyLXF1YXJ0ZXJzIG9mIHRoZSBSb21hbnMuIFRoZSBtb3N0IG51bWVyb3VzIGFuZCBwb3dlcmZ1bCBvZiB0aGUgcmViZWxzLCB1bmRlciBBYnJpb3JpeCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIgY2FsbHMgaGltIEFtYmlvcml4Ljwvbm90ZT4gdXR0ZXJseSBkZXN0cm95ZWQgVGl0dXJpdXMgYW5kIENvdHRhLCB0b2dldGhlciB3aXRoIHRoZWlyIGFybXksIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRoZSBsZWdpb24gdW5kZXIgQ2ljZXJvIHdhcyBzdXJyb3VuZGVkIGFuZCBiZXNpZWdlZCBieSBzaXh0eSB0aG91c2FuZCBvZiB0aGVtLCBhbmQgbmFycm93bHkgZXNjYXBlZCBoYXZpbmcgaXRzIGNhbXAgdGFrZW4gYnkgc3Rvcm0sIGFsdGhvdWdoIGFsbCB3ZXJlIHdvdW5kZWQgYW5kIHdlbnQgYmV5b25kIHRoZWlyIHBvd2VycyBpbiB0aGUgYXJkb3VyIG9mIHRoZWlyIGRlZmVuY2UuPC9wPgogICAgICAgICA8cD5XaGVuIHRpZGluZ3Mgb2YgdGhlc2UgdGhpbmdzIHJlYWNoZWQgQ2Flc2FyLCB3aG8gd2FzIGZhciBvbiBoaXMgam91cm5leSwgaGUgdHVybmVkIGJhY2sgcXVpY2tseSwgZ290IHRvZ2V0aGVyIHNldmVuIHRob3VzYW5kIG1lbiBpbiBhbGwsIGFuZCBodXJyaWVkIG9uIHRvIGV4dHJpY2F0ZSBDaWNlcm8gZnJvbSB0aGUgc2llZ2UuIEJ1dCB0aGUgYmVzaWVnZXJzIGJlY2FtZSBhd2FyZSBvZiBoaXMgYXBwcm9hY2gsIGFuZCB3ZW50IHRvIG1lZXQgaGltIHdpdGggdGhlIHB1cnBvc2Ugb2YgY3V0dGluZyBoaXMgZm9yY2VzIG9mZiBhdCBvbmNlLCBkZXNwaXNpbmcgdGhlaXIgc21hbGwgbnVtYmVycy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIGRlY2VpdmVkIHRoZW0gYnkgYXZvaWRpbmcgYmF0dGxlIGNvbnRpbnVhbGx5LCBhbmQgd2hlbiBoZSBoYWQgZm91bmQgYSBwbGFjZSBzdWl0YWJsZSBmb3Igb25lIHdobyB3YXMgZmlnaHRpbmcgYWdhaW5zdCBtYW55IHdpdGggZmV3LCBmb3J0aWZpZWQgYSBjYW1wLCB3aGVyZSBoZSBrZXB0IGhpcyBtZW4gYWx0b2dldGhlciBmcm9tIGZpZ2h0aW5nIGFuZCBmb3JjZWQgdGhlbSB0byBpbmNyZWFzZSB0aGUgaGVpZ2h0IG9mIHRoZWlyIHJhbXBhcnRzIGFuZCB0aGUgZGVmZW5jZXMgb2YgdGhlaXIgZ2F0ZXMgYXMgdGhvdWdoIHRoZXkgd2VyZSBhZnJhaWQuIEhpcyBzdHJhdGVneSB0aHVzIGxlZCB0aGUgZW5lbXkgdG8gZGVzcGlzZSBoaW0sIHVudGlsIGF0IGxhc3QsIHdoZW4gdGhlaXIgYm9sZG5lc3MgbGVkIHRoZW0gdG8gYXR0YWNrIGluIHNjYXR0ZXJlZCBiYW5kcywgaGUgc2FsbGllZCBvdXQsIHJvdXRlZCB0aGVtLCBhbmQgZGVzdHJveWVkIG1hbnkgb2YgdGhlbS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG51bWVyb3VzIHJldm9sdHMgb2YgdGhlIEdhdWxzIGluIHRob3NlIHBhcnRzIHdlcmUgcXVpZXRlZCBieSB0aGlzIHN1Y2Nlc3MsIGFzIHdlbGwgYXMgYnkgdGhlIGZhY3QgdGhhdCBDYWVzYXIgaGltc2VsZiwgZHVyaW5nIHRoZSB3aW50ZXIsIHdlbnQgYWJvdXQgaW4gYWxsIGRpcmVjdGlvbnMgYW5kIGtlcHQgY2xvc2Ugd2F0Y2ggb24gdGhlIGRpc3R1cmJlcnMgb2YgdGhlIHBlYWNlLiBGb3IgdGhlcmUgaGFkIGNvbWUgZnJvbSBJdGFseSB0aHJlZSBsZWdpb25zIHRvIHJlcGxhY2UgdGhlIG1lbiB0aGF0IGhlIGhhZCBsb3N0LCBQb21wZXkgaGF2aW5nIGxlbnQgdHdvIG9mIHRob3NlIHVuZGVyIGhpcyBjb21tYW5kLCBhbmQgb25lIGhhdmluZyBiZWVuIG5ld2x5IGxldmllZCBpbiBHYXVsIGFib3V0IHRoZSBQby4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHJlbW90ZXIgcmVnaW9uczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIGhlcmUgcGFzc2VzIG92ZXIgdGhlIGV2ZW50cyBvZiB0aGUgeWVhciA1MyBCLkMuLCBkZXNjcmliZWQgYnkgQ2Flc2FyIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IHZpPC9iaWJsPi4gVGhlIHNldmVudGggYm9vayBpcyB3aG9sbHkgdGFrZW4gdXAgd2l0aCB0aGUgd2FyIG5vdyB0byBiZSBkZXNjcmliZWQgKDUyIEIuQy4pLjwvbm90ZT4gdGhlIGdlcm1zIG9mIHRoZSBncmVhdGVzdCBhbmQgbW9zdCBkYW5nZXJvdXMgb2YgdGhlIHdhcnMgd2FnZWQgaW4gdGhvc2UgcGFydHMgYmVnYW4gdG8gc2hvdyB0aGVtc2VsdmVzLiBUaGV5IGhhZCBmb3IgYSBsb25nIHRpbWUgYmVlbiBzZWNyZXRseSBzb3duIGFuZCBjdWx0aXZhdGVkIGJ5IHRoZSBtb3N0IGluZmx1ZW50aWFsIG1lbiBhbW9uZyB0aGUgbW9zdCB3YXJsaWtlIHRyaWJlcywgYW5kIGRlcml2ZWQgc3RyZW5ndGggZnJvbSBsYXJnZSBib2RpZXMgb2YgeW91bmcgbWVuIGFzc2VtYmxlZCBmcm9tIGFsbCBzaWRlcyBpbiBhcm1zLCBmcm9tIGdyZWF0IHJpY2hlcyBicm91Z2h0IHRvZ2V0aGVyLCBmcm9tIHN0cm9uZyBjaXRpZXMsIGFuZCBmcm9tIGNvdW50cmllcyB3aGljaCB3ZXJlIGhhcmQgdG8gaW52YWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGF0IHNlYXNvbiBvZiB3aW50ZXIsIHRvbywgZnJvemVuIHJpdmVycywgZm9yZXN0cyBidXJpZWQgaW4gc25vdywgcGxhaW5zIGNvbnZlcnRlZCBpbnRvIGxha2VzIGJ5IHdpbnRlciB0b3JyZW50cywgaW4gc29tZSBwYXJ0cyBwYXRocyBvYmxpdGVyYXRlZCBieSBkZWVwIHNub3csIGFuZCBpbiBvdGhlcnMgdGhlIGdyZWF0IHVuY2VydGFpbnR5IG9mIGEgbWFyY2ggdGhyb3VnaCBzd2FtcHMgYW5kIHN0cmVhbXMgZGl2ZXJ0ZWQgZnJvbSB0aGVpciBjb3Vyc2VzLCBhbGwgc2VlbWVkIHRvIG1ha2UgaXQgd2hvbGx5IGltcG9zc2libGUgZm9yIENhZXNhciB0byBvcHBvc2UgdGhlIHBsYW5zIG9mIHRoZSByZWJlbHMuIEFjY29yZGluZ2x5LCBtYW55IHRyaWJlcyBoYWQgcmV2b2x0ZWQsIGJ1dCB0aGUgaGVhZCBhbmQgZnJvbnQgb2YgdGhlIHJldm9sdCB3ZXJlIHRoZSBBcnZlcm5pIGFuZCBDYXJudW50aW5pLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIENhZXNhcidzIDx0aXRsZT5CLiBHLjwvdGl0bGU+dGhlIG5hbWVzIGFyZSBDYXJudXRlcyBhbmQgVmVyY2luZ2V0b3JpeC48L25vdGU+IGFuZCBWZXJnZW50b3JpeCB3YXMgY2hvc2VuIHRvIGhhdmUgdGhlIGVudGlyZSBhdXRob3JpdHkgaW4gdGhlIHdhci4gSGlzIGZhdGhlciB0aGUgR2F1bHMgaGFkIHB1dCB0byBkZWF0aCBiZWNhdXNlIHRoZXkgdGhvdWdodCBoZSB3YXMgYWltaW5nIGF0IGEgdHlyYW5ueS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBsZWFkZXIsIHRoZW4sIGFmdGVyIGRpdmlkaW5nIGhpcyBmb3JjZXMgaW50byBtYW55IHBhcnRzIGFuZCBwdXR0aW5nIG1hbnkgb2ZmaWNlcnMgaW4gY29tbWFuZCBvZiB0aGVtLCB3YXMgd2lubmluZyBvdmVyIGFsbCB0aGUgY291bnRyeSByb3VuZCBhYm91dCBhcyBmYXIgYXMgdGhlIHdhdGVyLXNoZWQgb2YgdGhlIEFyYXIuIEhlIHB1cnBvc2VkLCBub3cgdGhhdCB0aGVyZSB3YXMgYSBjb2FsaXRpb24gYXQgUm9tZSBhZ2FpbnN0IENhZXNhciwgYXQgb25jZSB0byByb3VzZSBhbGwgR2F1bCB0byB3YXIuIElmIGhlIGhhZCBkb25lIHRoaXMgYSBsaXR0bGUgbGF0ZXIsIHdoZW4gQ2Flc2FyIHdhcyBpbnZvbHZlZCBpbiB0aGUgY2l2aWwgd2FyLCBJdGFseSB3b3VsZCBoYXZlIGJlZW4gYSBwcmV5IHRvIHRlcnJvcnMgbm8gbGVzcyBhY3V0ZSB0aGFuIHRob3NlIGFyb3VzZWQgYnkgdGhlIENpbWJyaSBvZiBvbGQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBpdCB3YXMsIHRoZSBtYW4gZW5kb3dlZCBieSBuYXR1cmUgdG8gbWFrZSB0aGUgYmVzdCB1c2Ugb2YgYWxsIHRoZSBhcnRzIG9mIHdhciwgYW5kIHBhcnRpY3VsYXJseSBvZiBpdHMgY3J1Y2lhbCBtb21lbnRzLCBuYW1lbHkgQ2Flc2FyLCBhcyBzb29uIGFzIGhlIGxlYXJuZWQgb2YgdGhlIHJldm9sdCwgc2V0IG91dCBhbmQgbWFyY2hlZCBieSB0aGUgc2FtZSByb2FkcyBvdmVyIHdoaWNoIGhlIGhhZCBwcmV2aW91c2x5IGNvbWUsIGFuZCBieSB0aGUgdmlnb3VyIGFuZCBzcGVlZCBvZiBoaXMgcGFzc2FnZSBpbiBzbyBzZXZlcmUgYSB3aW50ZXIgc2hvd2VkIHRoZSBCYXJiYXJpYW5zIHRoYXQgYW4gdW5jb25xdWVyZWQgYW5kIGludmluY2libGUgYXJteSB3YXMgY29taW5nIGFnYWluc3QgdGhlbS4gRm9yIHdoZXJlIGl0IHdhcyBpbmNyZWRpYmxlIHRoYXQgb25lIG9mIGhpcyBtZXNzZW5nZXJzIG9yIGxldHRlci1jYXJyaWVycyBjb3VsZCBtYWtlIGhpcyB3YXkgaW4gYSBsb25nIHRpbWUsIHRoZXJlIGhlIHdhcyBzZWVuIHdpdGggaGlzIHdob2xlIGFybXksIGF0IG9uY2UgcmF2YWdpbmcgdGhlaXIgbGFuZHMgYW5kIGRlc3Ryb3lpbmcgdGhlaXIgc3Ryb25naG9sZHMsIHN1YmR1aW5nIGNpdGllcywgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHJlY2VpdmluZyB0aG9zZSB3aG8gY2FtZSBvdmVyIHRvIGhpcyBzaWRlLCB1bnRpbCB0aGUgbmF0aW9uIG9mIHRoZSBBZWR1aSBhbHNvIGVudGVyZWQgdGhlIHdhciBhZ2FpbnN0IGhpbS4gVGhlc2UgdXAgdG8gdGhpcyB0aW1lIGhhZCBjYWxsZWQgdGhlbXNlbHZlcyBicmV0aHJlbiBvZiB0aGUgUm9tYW5zIGFuZCBoYWQgYmVlbiBjb25zcGljdW91c2x5IGhvbm91cmVkLCBidXQgbm93LCBieSBqb2luaW5nIHRoZSByZWJlbHMsIHRoZXkgY2F1c2VkIGdyZWF0IGRlamVjdGlvbiBpbiBDYWVzYXIncyBhcm15LiBJbiBjb25zZXF1ZW5jZSBvZiB0aGlzIENhZXNhciByZW1vdmVkIGZyb20gdGhvc2UgcGFydHMgYW5kIHBhc3NlZCBhY3Jvc3MgdGhlIHRlcnJpdG9yeSBvZiB0aGUgTGluZ29uZXMsIHdpc2hpbmcgdG8gcmVhY2ggdGhlIGNvdW50cnkgb2YgdGhlIFNlcXVhbmksIHdobyB3ZXJlIGZyaWVuZHMsIGFuZCBzdG9vZCBhcyBhIGJ1bHdhcmsgYmV0d2VlbiBJdGFseSBhbmQgdGhlIHJlc3Qgb2YgR2F1bC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgdGhlIGVuZW15IGZlbGwgdXBvbiBoaW0gYW5kIHN1cnJvdW5kZWQgaGltIHdpdGggbWFueSB0ZW5zIG9mIHRob3VzYW5kcywgc28gdGhhdCBoZSBlc3NheWVkIHRvIGZpZ2h0IGEgZGVjaXNpdmUgYmF0dGxlLiBJbiB0aGUgbWFpbiBoZSBnb3QgdGhlIGJlc3Qgb2YgdGhlIHN0cnVnZ2xlLCBhbmQgYWZ0ZXIgYSBsb25nIHRpbWUgYW5kIG11Y2ggc2xhdWdodGVyIG92ZXJwb3dlcmVkIHRoZSBCYXJiYXJpYW5zOyBidXQgaXQgYXBwZWFycyB0aGF0IGF0IGZpcnN0IGhlIG1ldCB3aXRoIHNvbWUgcmV2ZXJzZSwgYW5kIHRoZSBBcnZlcm5pIHNob3cgYSBzaG9ydC1zd29yZCBoYW5naW5nIGluIGEgdGVtcGxlLCB3aGljaCB0aGV5IHNheSB3YXMgY2FwdHVyZWQgZnJvbSBDYWVzYXIuIFdoZW4gQ2Flc2FyIGhpbXNlbGYgc2F3IGl0LCBhdCBhIGxhdGVyIHRpbWUsIGhlIHNtaWxlZCwgYW5kIHRob3VnaCBoaXMgZnJpZW5kcyB1cmdlZCBoaW0gdG8gaGF2ZSBpdCB0YWtlbiBkb3duLCBoZSB3b3VsZCBub3QgcGVybWl0IGl0LCBjb25zaWRlcmluZyBpdCBzYWNyZWQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBtb3N0IG9mIHRoZSBCYXJiYXJpYW5zIHdobyBlc2NhcGVkIGF0IHRoYXQgdGltZSB0b29rIHJlZnVnZSB3aXRoIHRoZWlyIGtpbmcgaW4gdGhlIGNpdHkgb2YgQWxlc2lhLiBBbmQgd2hpbGUgQ2Flc2FyIHdhcyBiZXNpZWdpbmcgdGhpcyBjaXR5LCB3aGljaCB3YXMgdGhvdWdodCB0byBiZSBpbXByZWduYWJsZSBieSByZWFzb24gb2YgdGhlIGdyZWF0IHNpemUgb2YgaXRzIHdhbGxzIGFuZCB0aGUgbnVtYmVyIG9mIHRoZWlyIGRlZmVuZGVycywgdGhlcmUgZmVsbCB1cG9uIGhpbSBmcm9tIG91dHNpZGUgdGhlIGNpdHkgYSBwZXJpbCB0b28gZ3JlYXQgZm9yIHdvcmRzIHRvIGRlcGljdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGFsbCB0aGF0IHdhcyBtaWdodGllc3QgYW1vbmcgdGhlIG5hdGlvbnMgb2YgR2F1bCBhc3NlbWJsZWQgYW5kIGNhbWUgaW4gYXJtcyB0byBBbGVzaWEsIHRocmVlIGh1bmRyZWQgdGhvdXNhbmQgc3Ryb25nOyBhbmQgdGhlIG51bWJlciBvZiBmaWdodGluZyBtZW4gaW5zaWRlIHRoZSBjaXR5IHdhcyBub3QgbGVzcyB0aGFuIGEgaHVuZHJlZCBhbmQgc2V2ZW50eSB0aG91c2FuZC4gVGh1cyBDYWVzYXIsIGNhdWdodCBiZXR3ZWVuIHNvIGxhcmdlIGhvc3RpbGUgZm9yY2VzIGFuZCBiZXNpZWdlZCB0aGVyZSwgd2FzIGNvbXBlbGxlZCB0byBidWlsZCB0d28gd2FsbHMgZm9yIGhpcyBwcm90ZWN0aW9uLCBvbmUgbG9va2luZyB0b3dhcmRzIHRoZSBjaXR5LCBhbmQgdGhlIG90aGVyIHRvd2FyZHMgdGhvc2Ugd2hvIGhhZCBjb21lIHVwIHRvIHJlbGlldmUgaXQ7IGhlIGZlbHQgdGhhdCBpZiB0aGUgdHdvIGZvcmNlcyBzaG91bGQgdW5pdGUgaGlzIGNhdXNlIHdhcyB3aG9sbHkgbG9zdC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG1hbnkgcmVhc29ucywgdGhlbiwgYW5kIG5hdHVyYWxseSwgQ2Flc2FyJ3MgcGVyaWwgYXQgQWxlc2lhIHdhcyBmYW1vdXMsIHNpbmNlIGl0IHByb2R1Y2VkIG1vcmUgZGVlZHMgb2Ygc2tpbGwgYW5kIGRhcmluZyB0aGFuIGFueSBvZiBoaXMgb3RoZXIgc3RydWdnbGVzOyBidXQgb25lIG11c3QgYmUgYW1hemVkIGFib3ZlIGFsbCB0aGF0IGhlIGVuZ2FnZWQgYW5kIGNvbnF1ZXJlZCBzbyBtYW55IHRlbnMgb2YgdGhvdXNhbmRzIG91dHNpZGUgdGhlIGNpdHkgd2l0aG91dCB0aGUga25vd2xlZGdlIG9mIHRob3NlIGluc2lkZSwgbmF5IG1vcmUsIHdpdGhvdXQgdGhlIGtub3dsZWRnZSBldmVuIG9mIHRoZSBSb21hbnMgd2hvIHdlcmUgZ3VhcmRpbmcgdGhlIHdhbGwgdGhhdCBmYWNlZCB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXNlIGRpZCBub3QgbGVhcm4gb2YgdGhlIFZpY3RvcnkgdW50aWwgdGhlIHdhaWxpbmcgb2YgdGhlIG1lbiBpbiBBbGVzaWEgYW5kIHRoZSBsYW1lbnRhdGlvbnMgb2YgdGhlIHdvbWVuIHdlcmUgaGVhcmQsIGFzIHRoZXkgYmVoZWxkIGluIHRoZSBxdWFydGVycyBvZiB0aGUgZW5lbXkgbWFueSBzaGllbGRzIGFkb3JuZWQgd2l0aCBnb2xkIGFuZCBzaWx2ZXIsIG1hbnkgY29yc2VsZXRzIHNtZWFyZWQgd2l0aCBibG9vZCwgYW5kIGFsc28gZHJpbmtpbmcgY3VwcyBhbmQgdGVudHMgb2YgR2FsbGljIGZhc2hpb24gY2FycmllZCBieSB0aGUgUm9tYW5zIGludG8gdGhlaXIgY2FtcC4gU28gcXVpY2tseSBkaWQgc28gZ3JlYXQgYSBmb3JjZSwgbGlrZSBhIHBoYW50b20gb3IgYSBkcmVhbSwgZGlzcGVyc2UgYW5kIHZhbmlzaCBvdXQgb2Ygc2lnaHQsIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlbSBoYXZpbmcgZmFsbGVuIGluIHRoZSBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyBoZWxkIEFsZXNpYSwgdG9vLCBhZnRlciBnaXZpbmcgdGhlbXNlbHZlcyBhbmQgQ2Flc2FyIG5vIHNtYWxsIHRyb3VibGUsIGZpbmFsbHkgc3VycmVuZGVyZWQuIEFuZCB0aGUgbGVhZGVyIG9mIHRoZSB3aG9sZSB3YXIsIFZlcmdlbnRvcml4LCBhZnRlciBwdXR0aW5nIG9uIGhpcyBtb3N0IGJlYXV0aWZ1bCBhcm1vdXIgYW5kIGRlY29yYXRpbmcgaGlzIGhvcnNlLCByb2RlIG91dCB0aHJvdWdoIHRoZSBnYXRlLiBIZSBtYWRlIGEgY2lyY3VpdCByb3VuZCBDYWVzYXIsIHdobyByZW1haW5lZCBzZWF0ZWQsIGFuZCB0aGVuIGxlYXBlZCBkb3duIGZyb20gaGlzIGhvcnNlLCBzdHJpcHBlZCBvZmYgaGlzIHN1aXQgb2YgYXJtb3VyLCBhbmQgc2VhdGluZyBoaW1zZWxmIGF0IENhZXNhcidzIGZlZXQgcmVtYWluZWQgbW90aW9ubGVzcywgdW50aWwgaGUgd2FzIGRlbGl2ZXJlZCB1cCB0byBiZSBrZXB0IGluIGN1c3RvZHkgZm9yIHRoZSB0cml1bXBoLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIENhZXNhciBoYWQgbG9uZyBhZ28gZGVjaWRlZCB0byBwdXQgZG93biBQb21wZXksIGp1c3QgYXMsIG9mIGNvdXJzZSwgUG9tcGV5IGFsc28gaGFkIGRlY2lkZWQgdG8gcHV0IENhZXNhciBkb3duLiBGb3Igbm93IHRoYXQgQ3Jhc3N1cywgd2hvIHdhcyBvbmx5IHdhaXRpbmcgZm9yIHRoZSBpc3N1ZSBvZiB0aGVpciBzdHJ1Z2dsZSB0byBlbmdhZ2UgdGhlIHZpY3Rvciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1My42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBsaWlpLiA2PC9iaWJsPi48L25vdGU+IGhhZCBwZXJpc2hlZCBhbW9uZyB0aGUgUGFydGhpYW5zLCBpdCByZW1haW5lZCBmb3IgaGltIHdobyB3b3VsZCBiZSBncmVhdGVzdCB0byBwdXQgZG93biBoaW0gd2hvIHdhcywgYW5kIGZvciBoaW0gd2hvIHdhcyBncmVhdGVzdCwgaWYgaGUgd291bGQgbm90IGJlIHB1dCBkb3duLCB0byB0YWtlIG9mZiBpbiB0aW1lIHRoZSBtYW4gaGUgZmVhcmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGZlYXIgaGFkIG9ubHkgcmVjZW50bHkgY29tZSB1cG9uIFBvbXBleSwgd2hvIHRpbGwgdGhlbiBkZXNwaXNlZCBDYWVzYXIsIGZlZWxpbmcgdGhhdCBpdCB3YXMgbm8gaGFyZCB0YXNrIHRvIHB1dCBkb3duIGFnYWluIHRoZSBtYW4gd2hvbSBoZSBoaW1zZWxmIGhhZCByYWlzZWQgb24gaGlnaC4gQnV0IENhZXNhciBoYWQgZnJvbSB0aGUgb3V0c2V0IGZvcm1lZCB0aGlzIGRlc2lnbiwgYW5kIGxpa2UgYW4gYXRobGV0ZSBoYWQgcmVtb3ZlZCBoaW1zZWxmIHRvIGEgZ3JlYXQgZGlzdGFuY2UgZnJvbSBoaXMgYW50YWdvbmlzdHMsIGFuZCBieSBleGVyY2lzaW5nIGhpbXNlbGYgaW4gdGhlIEdhbGxpYyB3YXJzIGhhZCBwcmFjdGlzZWQgaGlzIHRyb29wcyBhbmQgaW5jcmVhc2VkIGhpcyBmYW1lLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5saWZ0aW5nIGhpbXNlbGYgYnkgaGlzIGFjaGlldmVtZW50cyB0byBhIGhlaWdodCB3aGVyZSBoZSBjb3VsZCB2aWUgd2l0aCB0aGUgc3VjY2Vzc2VzIG9mIFBvbXBleS4gSGUgbGFpZCBob2xkIG9mIHByZXRleHRzIHdoaWNoIHdlcmUgZnVybmlzaGVkIHBhcnRseSBieSBQb21wZXkgaGltc2VsZiwgYW5kIHBhcnRseSBieSB0aGUgdGltZXMgYW5kIHRoZSBldmlsIHN0YXRlIG9mIGdvdmVybm1lbnQgYXQgUm9tZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIGxpdjwvYmlibD4uPC9ub3RlPiBieSByZWFzb24gb2Ygd2hpY2ggY2FuZGlkYXRlcyBmb3Igb2ZmaWNlIHNldCB1cCBjb3VudGluZy10YWJsZXMgaW4gcHVibGljIGFuZCBzaGFtZWxlc3NseSBicmliZWQgdGhlIG11bHRpdHVkZXMsIHdoaWxlIHRoZSBwZW9wbGUgd2VudCBkb3duIGludG8gdGhlIGZvcnVtIHVuZGVyIHBheSwgY29udGVuZGluZyBpbiBiZWhhbGYgb2YgdGhlaXIgcGF5bWFzdGVyLCBub3Qgd2l0aCB2b3RlcywgYnV0IHdpdGggYm93cyBhbmQgYXJyb3dzLCBzd29yZHMsIGFuZCBzbGluZ3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9mdGVuLCB0b28sIHRoZXkgd291bGQgZGVmaWxlIHRoZSByb3N0cmEgd2l0aCBibG9vZCBhbmQgY29ycHNlcyBiZWZvcmUgdGhleSBzZXBhcmF0ZWQsIGxlYXZpbmcgdGhlIGNpdHkgdG8gYW5hcmNoeSBsaWtlIGEgc2hpcCBkcmlmdGluZyBhYm91dCB3aXRob3V0IGEgc3RlZXJzbWFuLCBzbyB0aGF0IG1lbiBvZiB1bmRlcnN0YW5kaW5nIHdlcmUgY29udGVudCBpZiBtYXR0ZXJzIGlzc3VlZCBpbiBub3RoaW5nIHdvcnNlIGZvciB0aGVtIHRoYW4gbW9uYXJjaHksIGFmdGVyIHN1Y2ggbWFkbmVzcyBhbmQgc28gZ3JlYXQgYSB0ZW1wZXN0LiBBbmQgdGhlcmUgd2VyZSBtYW55IHdobyBhY3R1YWxseSBkYXJlZCB0byBzYXkgaW4gcHVibGljIHRoYXQgbm90aGluZyBidXQgbW9uYXJjaHkgY291bGQgbm93IGN1cmUgdGhlIGRpc2Vhc2VzIG9mIHRoZSBzdGF0ZSwgYW5kIHRoYXQgdGhpcyByZW1lZHkgbWlnaHQgdG8gYmUgYWRvcHRlZCB3aGVuIG9mZmVyZWQgYnkgdGhlIGdlbnRsZXN0IG9mIHBoeXNpY2lhbnMsIGhpbnRpbmcgYXQgUG9tcGV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiBldmVuIFBvbXBleSwgYWx0aG91Z2ggaW4gd29yZHMgaGUgYWZmZWN0ZWQgdG8gZGVjbGluZSB0aGUgaG9ub3VyLCBpbiBmYWN0IGRpZCBtb3JlIHRoYW4gYW55IG9uZSBlbHNlIHRvIGVmZmVjdCBoaXMgYXBwb2ludG1lbnQgYXMgZGljdGF0b3IsIENhdG8gc2F3IHRocm91Z2ggaGlzIGRlc2lnbiBhbmQgcGVyc3VhZGVkIHRoZSBzZW5hdGUgdG8gYXBwb2ludCBoaW0gc29sZSBjb25zdWwsIHNvbGFjaW5nIGhpbSB3aXRoIGEgbW9yZSBsZWdhbCBtb25hcmNoeSB0aGF0IGhlIG1pZ2h0IG5vdCBmb3JjZSBoaXMgd2F5IHRvIHRoZSBkaWN0YXRvcnNoaXAuIFRoZXkgYWxzbyB2b3RlZCBoaW0gYWRkaXRpb25hbCB0aW1lIGluIHdoaWNoIHRvIGhvbGQgaGlzIHByb3ZpbmNlczsgYW5kIGhlIGhhZCB0d28sIFNwYWluIGFuZCBhbGwgQWZyaWNhLCB3aGljaCBoZSBtYW5hZ2VkIGJ5IHNlbmRpbmcgbGVnYXRlcyB0aGl0aGVyIGFuZCBtYWludGFpbmluZyBhcm1pZXMgdGhlcmUsIGZvciB3aGljaCBoZSByZWNlaXZlZCBmcm9tIHRoZSBwdWJsaWMgdHJlYXN1cnkgYSB0aG91c2FuZCB0YWxlbnRzIGFubnVhbGx5Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU1LjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx2LiA3PC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Db25zZXF1ZW50bHksIENhZXNhciBjYW52YXNzZWQgYnkgcHJveHkgZm9yIGEgY29uc3Vsc2hpcCwgYW5kIGxpa2V3aXNlIGZvciBhbiBleHRlbnNpb24gb2YgdGltZSBpbiB3aGljaCB0byBob2xkIGhpcyBvd24gcHJvdmluY2VzLiBBdCBmaXJzdCwgdGhlbiwgUG9tcGV5IGhlbGQgaGlzIHBlYWNlLCB3aGlsZSBNYXJjZWxsdXMgYW5kIExlbnR1bHVzIG9wcG9zZWQgdGhlc2UgcGxhbnM7IHRoZXkgaGF0ZWQgQ2Flc2FyIG9uIG90aGVyIGdyb3VuZHMsIGFuZCB3ZW50IGJleW9uZCBhbGwgYm91bmRzIGluIHRoZWlyIGVmZm9ydHMgdG8gYnJpbmcgZGlzaG9ub3VyIGFuZCBhYnVzZSB1cG9uIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluc3RhbmNlLCB0aGUgaW5oYWJpdGFudHMgb2YgTm92dW0gQ29tdW0sIGEgY29sb255IHJlY2VudGx5IGVzdGFibGlzaGVkIGJ5IENhZXNhciBpbiBHYXVsLCB3ZXJlIGRlcHJpdmVkIG9mIGNpdGl6ZW5zaGlwIGJ5IHRoZW07IGFuZCBNYXJjZWxsdXMsIHdoaWxlIGhlIHdhcyBjb25zdWwsIGJlYXQgd2l0aCByb2RzIGEgc2VuYXRvciBvZiBOb3Z1bSBDb211bSB3aG8gaGFkIGNvbWUgdG8gUm9tZSwgdGVsbGluZyBoaW0gYmVzaWRlcyB0aGF0IGhlIHB1dCB0aGVzZSBtYXJrcyB1cG9uIGhpbSB0byBwcm92ZSB0aGF0IGhlIHdhcyBub3QgYSBSb21hbiwgYW5kIGJhZGUgaGltIGdvIGJhY2sgYW5kIHNob3cgdGhlbSB0byBDYWVzYXIuIEJ1dCBhZnRlciB0aGUgY29uc3Vsc2hpcCBvZiBNYXJjZWxsdXMsIENhZXNhciBoYXZpbmcgbm93IHNlbnQgaGlzIEdhbGxpYyB3ZWFsdGggZm9yIGFsbCB0aG9zZSBpbiBwdWJsaWMgbGlmZSB0byBkcmF3IGZyb20gaW4gY29waW91cyBzdHJlYW1zLCBhbmQgaGF2aW5nIGZyZWVkIEN1cmlvIHRoZSB0cmlidW5lIGZyb20gbWFueSBkZWJ0cywgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGhhdmluZyBnaXZlbiBQYXVsdXMgdGhlIGNvbnN1bCBmaWZ0ZWVuIGh1bmRyZWQgdGFsZW50cywgb3V0IG9mIHdoaWNoIGhlIGFkb3JuZWQgdGhlIGZvcnVtIHdpdGggdGhlIEJhc2lsaWNhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+QmFzaWxpY2EgUGF1bGkgQWVtaWxpaTwvZm9yZWlnbj4sIGNhbGxlZCBhbHNvIDxmb3JlaWduIGxhbmc9ImxhIj5SZWdpYSBQYXVsaTwvZm9yZWlnbj4uIEl0IHRvb2sgdGhlIHBsYWNlIG9mIHRoZSA8Zm9yZWlnbiBsYW5nPSJsYSI+QmFzaWxpY2EgQWVtaWxpYSBldCBGdWx2aWE8L2ZvcmVpZ24+LCBlcmVjdGVkIGluIDE3OSBCLkMuIDwvbm90ZT4gYSBmYW1vdXMgbW9udW1lbnQsIGVyZWN0ZWQgaW4gcGxhY2Ugb2YgdGhlIEZ1bHZpYSzigJR1bmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzIFBvbXBleSB0b29rIGZyaWdodCBhdCB0aGUgY29hbGl0aW9uLCBhbmQgb3Blbmx5IG5vdywgYnkgaGlzIG93biBlZmZvcnRzIGFuZCB0aG9zZSBvZiBoaXMgZnJpZW5kcywgdHJpZWQgdG8gaGF2ZSBhIHN1Y2Nlc3NvciBhcHBvaW50ZWQgdG8gQ2Flc2FyIGluIGhpcyBnb3Zlcm5tZW50LCBhbmQgc2VudCBhIGRlbWFuZCB0byBoaW0gZm9yIHRoZSByZXR1cm4gb2YgdGhlIHNvbGRpZXJzIHdob20gaGUgaGFkIGxlbnQgaGltIGZvciBoaXMgR2FsbGljIGNvbnRlc3RzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMjUuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDE8L2JpYmw+Ljwvbm90ZT4gQ2Flc2FyIHNlbnQgdGhlIHNvbGRpZXJzIGJhY2ssIGFmdGVyIG1ha2luZyBhIHByZXNlbnQgdG8gZWFjaCBtYW4gb2YgdHdvIGh1bmRyZWQgYW5kIGZpZnR5IGRyYWNobWFzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG9mZmljZXJzIHdobyBicm91Z2h0IHRoZXNlIG1lbiB0byBQb21wZXkgc3ByZWFkIGFicm9hZCBhbW9uZyB0aGUgbXVsdGl0dWRlIHN0b3JpZXMgcmVnYXJkaW5nIENhZXNhciB3aGljaCB3ZXJlIG5laXRoZXIgcmVhc29uYWJsZSBub3IgdHJ1ZSwgYW5kIHJ1aW5lZCBQb21wZXkgaGltc2VsZiB3aXRoIHZhaW4gaG9wZXMuIFRoZXkgdG9sZCBoaW0gdGhhdCBDYWVzYXIncyBhcm15IHllYXJuZWQgZm9yIGhpbSwgYW5kIHRoYXQgd2hpbGUgaGUgd2FzIHdpdGggZGlmZmljdWx0eSBjb250cm9sbGluZyBhZmZhaXJzIGluIHRoZSBjaXR5IG93aW5nIHRvIHRoZSBkaXNlYXNlIG9mIGVudnkgd2hpY2ggZmVzdGVyZWQgaW4gdGhlIGJvZHkgcG9saXRpYywgdGhlIGZvcmNlcyBpbiBHYXVsIHdlcmUgcmVhZHkgdG8gc2VydmUgaGltLCBhbmQgaGFkIGJ1dCB0byBjcm9zcyBpbnRvIEl0YWx5IHdoZW4gdGhleSB3b3VsZCBhdCBvbmNlIGJlIG9uIGhpcyBzaWRlOyBzbyBvYm5veGlvdXMgdG8gdGhlbSBoYWQgQ2Flc2FyIGJlY29tZSBieSByZWFzb24gb2YgdGhlIG11bHRpdHVkZSBvZiBoaXMgY2FtcGFpZ25zLCBhbmQgc28gc3VzcGljaW91cyBvZiBoaW0gd2VyZSB0aGV5IG1hZGUgYnkgdGhlaXIgZmVhciBvZiBhIG1vbmFyY2h5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhpcyBmZWQgUG9tcGV5J3MgdmFuaXR5LCBhbmQgaGUgbmVnbGVjdGVkIHRvIHByb3ZpZGUgaGltc2VsZiB3aXRoIHNvbGRpZXJzLCBhcyB0aG91Z2ggaGUgaGFkIG5vIGZlYXJzOyB3aGlsZSB3aXRoIHNwZWVjaGVzIGFuZCByZXNvbHV0aW9ucyBvZiB0aGUgc2VuYXRlIGhlIHdhcyBjYXJyeWluZyB0aGUgZGF5IGFnYWluc3QgQ2Flc2FyLCBhcyBoZSBzdXBwb3NlZCwgYWx0aG91Z2ggaGUgd2FzIG1lcmVseSBnZXR0aW5nIG1lYXN1cmVzIHJlamVjdGVkIGFib3V0IHdoaWNoIENhZXNhciBjYXJlZCBuYXVnaHQuIE5heSwgd2UgYXJlIHRvbGQgdGhhdCBvbmUgb2YgdGhlIGNlbnR1cmlvbnMgc2VudCB0byBSb21lIGJ5IENhZXNhciwgYXMgaGUgc3Rvb2QgaW4gZnJvbnQgb2YgdGhlIHNlbmF0ZS1ob3VzZSBhbmQgbGVhcm5lZCB0aGF0IHRoZSBzZW5hdGUgd291bGQgbm90IGdpdmUgQ2Flc2FyIGFuIGV4dGVuc2lvbiBvZiBoaXMgdGVybSBvZiBjb21tYW5kLCBzbGFwcGVkIHRoZSBoYW5kbGUgb2YgaGlzIHN3b3JkIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCB0aGlzIHdpbGwgZ2l2ZSBpdDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTguMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHZpaWkuIDI8L2JpYmw+Ljwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBkZW1hbmRzIHdoaWNoIGNhbWUgZnJvbSBDYWVzYXIgY2VydGFpbmx5IGhhZCBhIHN0cmlraW5nIHNlbWJsYW5jZSBvZiBmYWlybmVzcy4gSGUgZGVtYW5kZWQsIG5hbWVseSwgdGhhdCBpZiBoZSBoaW1zZWxmIGxhaWQgZG93biBoaXMgYXJtcywgUG9tcGV5IHNob3VsZCBkbyB0aGUgc2FtZSwgYW5kIHRoYXQgYm90aCwgdGh1cyBiZWNvbWUgcHJpdmF0ZSBtZW4sIHNob3VsZCBmaW5kIHdoYXQgZmF2b3VyIHRoZXkgY291bGQgd2l0aCB0aGVpciBmZWxsb3cgY2l0aXplbnM7IGFyZ3VpbmcgdGhhdCBpZiB0aGV5IHRvb2sgYXdheSBoaXMgZm9yY2VzIGZyb20gaGltLCBidXQgY29uZmlybWVkIFBvbXBleSBpbiB0aGUgcG9zc2Vzc2lvbiBvZiBoaXMsIHRoZXkgd291bGQgYmUgYWNjdXNpbmcgb25lIG9mIHNlZWtpbmcgYSB0eXJhbm55IGFuZCBtYWtpbmcgdGhlIG90aGVyIGEgdHlyYW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEN1cmlvIGxhaWQgdGhlc2UgcHJvcG9zYWxzIGJlZm9yZSB0aGUgcGVvcGxlIGluIGJlaGFsZiBvZiBDYWVzYXIsIGhlIHdhcyBsb3VkbHkgYXBwbGF1ZGVkLCBhbmQgc29tZSBhY3R1YWxseSBjYXN0IGdhcmxhbmRzIG9mIGZsb3dlcnMgdXBvbiBoaW0gYXMgaWYgaGUgd2VyZSBhIHZpY3RvcmlvdXMgYXRobGV0ZS4gQW50b255LCB0b28sIHdobyB3YXMgYSB0cmlidW5lLCBicm91Z2h0IGJlZm9yZSB0aGUgcGVvcGxlIGEgbGV0dGVyIG9mIENhZXNhcidzIG9uIHRoZXNlIG1hdHRlcnMgd2hpY2ggaGUgaGFkIHJlY2VpdmVkLCBhbmQgcmVhZCBpdCBhbG91ZCwgaW4gZGVmaWFuY2Ugb2YgdGhlIGNvbnN1bHMuIEJ1dCBpbiB0aGUgc2VuYXRlLCBTY2lwaW8sIHRoZSBmYXRoZXItaW4tbGF3IG9mIFBvbXBleSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qb21wZXkgaGFkIG1hcnJpZWQgQ29ybmVsaWEsIHRoZSB5b3VuZyB3aWRvdyBvZiBQdWJsaXVzIENyYXNzdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBsdi4gMTwvYmlibD4pLjwvbm90ZT4gaW50cm9kdWNlZCBhIG1vdGlvbiB0aGF0IGlmIGJ5IGEgZml4ZWQgZGF5IENhZXNhciBkaWQgbm90IGxheSBkb3duIGhpcyBhcm1zIGhlIHNob3VsZCBiZSBkZWNsYXJlZCBhIHB1YmxpYyBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhlIGNvbnN1bHMgcHV0IHRoZSBxdWVzdGlvbiB3aGV0aGVyIFBvbXBleSBzaG91bGQgZGlzbWlzcyBoaXMgc29sZGllcnMsIGFuZCBhZ2FpbiB3aGV0aGVyIENhZXNhciBzaG91bGQsIHZlcnkgZmV3IHNlbmF0b3JzIHZvdGVkIGZvciB0aGUgZmlyc3QsIGFuZCBhbGwgYnV0IGEgZmV3IGZvciB0aGUgc2Vjb25kOyBidXQgd2hlbiBBbnRvbnkgYWdhaW4gZGVtYW5kZWQgdGhhdCBib3RoIHNob3VsZCBnaXZlIHVwIHRoZWlyIGNvbW1hbmRzLCBhbGwgd2l0aCBvbmUgYWNjb3JkIGFzc2VudGVkLiBTY2lwaW8sIGhvd2V2ZXIsIG1hZGUgdmlvbGVudCBvcHBvc2l0aW9uLCBhbmQgTGVudHVsdXMgdGhlIGNvbnN1bCBjcmllZCBvdXQgdGhhdCBhZ2FpbnN0IGEgcm9iYmVyIHRoZXJlIHdhcyBuZWVkIG9mIGFybXMsIG5vdCB2b3Rlczsgd2hlcmV1cG9uIHRoZSBzZW5hdGUgYnJva2UgdXAsIGFuZCB0aGUgc2VuYXRvcnMgcHV0IG9uIHRoZSBnYXJiIG9mIG1vdXJuaW5nIGluIHZpZXcgb2YgdGhlIGRpc3NlbnNpb24uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwcmVzZW50bHkgbGV0dGVycyBjYW1lIGZyb20gQ2Flc2FyIGluIHdoaWNoIGhlIGFwcGVhcmVkIHRvIHRha2UgYSBtb3JlIG1vZGVyYXRlIHBvc2l0aW9uLCBmb3IgaGUgYWdyZWVkIHRvIHN1cnJlbmRlciBldmVyeXRoaW5nIGVsc2UsIGJ1dCBkZW1hbmRlZCB0aGF0IENpc2FscGluZSBHYXVsIGFuZCBJbGx5cmljdW0gdG9nZXRoZXIgd2l0aCB0d28gbGVnaW9ucyBzaG91bGQgYmUgZ2l2ZW4gaGltIHVudGlsIGhlIHN0b29kIGZvciBoaXMgc2Vjb25kIGNvbnN1bHNoaXAuIENpY2VybyB0aGUgb3JhdG9yLCB0b28sIHdobyBoYWQganVzdCByZXR1cm5lZCBmcm9tIENpbGljaWEgYW5kIHdhcyBidXN5IHdpdGggYSByZWNvbmNpbGlhdGlvbiwgdHJpZWQgdG8gbW9sbGlmeSBQb21wZXksIHdobyB5aWVsZGVkIGV2ZXJ5dGhpbmcgZWxzZSwgYnV0IGluc2lzdGVkIG9uIHRha2luZyBhd2F5IENhZXNhcidzIHNvbGRpZXJzLiBDaWNlcm8gYWxzbyB0cmllZCB0byBwZXJzdWFkZSB0aGUgZnJpZW5kcyBvZiBDYWVzYXIgdG8gY29tcHJvbWlzZSBhbmQgY29tZSB0byBhIHNldHRsZW1lbnQgb24gdGhlIGJhc2lzIG9mIHRoZSBwcm92aW5jZXMgbWVudGlvbmVkIGFuZCBvbmx5IHNpeCB0aG91c2FuZCBzb2xkaWVycywgYW5kIFBvbXBleSB3YXMgcmVhZHkgdG8geWllbGQgYW5kIGdyYW50IHNvIG1hbnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkxlbnR1bHVzIHRoZSBjb25zdWwsIGhvd2V2ZXIsIHdvdWxkIG5vdCBsZXQgaGltLCBidXQgYWN0dWFsbHkgaGVhcGVkIGluc3VsdHMgdXBvbiBBbnRvbnkgYW5kIEN1cmlvIGFuZCBkcm92ZSB0aGVtIGRpc2dyYWNlZnVsbHkgZnJvbSB0aGUgc2VuYXRlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkphbnVhcnkgNywgNDkgQi5DLjwvbm90ZT4gdGh1cyBoaW1zZWxmIGNvbnRyaXZpbmcgZm9yIENhZXNhciB0aGUgbW9zdCBzcGVjaW91cyBvZiBoaXMgcHJldGV4dHMsIGFuZCB0aGUgb25lIGJ5IG1lYW5zIG9mIHdoaWNoIGhlIG1vc3Qgb2YgYWxsIGluY2l0ZWQgaGlzIHNvbGRpZXJzLCBzaG93aW5nIHRoZW0gbWVuIG9mIHJlcHV0ZSBhbmQgaGlnaCBvZmZpY2Ugd2hvIGhhZCBmbGVkIHRoZSBjaXR5IG9uIGhpcmVkIGNhcnRzIGFuZCBpbiB0aGUgZ2FyYiBvZiBzbGF2ZXMuIEZvciB0aHVzIHRoZXkgaGFkIGFycmF5ZWQgdGhlbXNlbHZlcyBpbiB0aGVpciBmZWFyIGFuZCBzdG9sZW4gb3V0IG9mIFJvbWUuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2Flc2FyIGhhZCB3aXRoIGhpbSBub3QgbW9yZSB0aGFuIHRocmVlIGh1bmRyZWQgaG9yc2VtZW4gYW5kIGZpdmUgdGhvdXNhbmQgbGVnaW9uYXJpZXM7IGZvciB0aGUgcmVzdCBvZiBoaXMgYXJteSBoYWQgYmVlbiBsZWZ0IGJleW9uZCB0aGUgQWxwcywgYW5kIHdhcyB0byBiZSBicm91Z2h0IHVwIGJ5IHRob3NlIHdob20gaGUgaGFkIHNlbnQgZm9yIHRoZSBwdXJwb3NlLiBIZSBzYXcsIGhvd2V2ZXIsIHRoYXQgdGhlIGJlZ2lubmluZyBvZiBoaXMgZW50ZXJwcmlzZSBhbmQgaXRzIGluaXRpYWwgc3RlcCBkaWQgbm90IHJlcXVpcmUgYSBsYXJnZSBmb3JjZSBhdCBwcmVzZW50LCBidXQgbXVzdCB0YWtlIGFkdmFudGFnZSBvZiB0aGUgZ29sZGVuIG1vbWVudCBieSBzaG93aW5nIGFtYXppbmcgYm9sZG5lc3MgYW5kIHNwZWVkLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5zaW5jZSBoZSBjb3VsZCBzdHJpa2UgdGVycm9yIGludG8gaGlzIGVuZW1pZXMgYnkgYW4gdW5leHBlY3RlZCBibG93IG1vcmUgZWFzaWx5IHRoYW4gaGUgY291bGQgb3ZlcndoZWxtIHRoZW0gYnkgYW4gYXR0YWNrIGluIGZ1bGwgZm9yY2UuIEhlIHRoZXJlZm9yZSBvcmRlcmVkIGhpcyBjZW50dXJpb25zIGFuZCBvdGhlciBvZmZpY2VycywgdGFraW5nIHRoZWlyIHN3b3JkcyBvbmx5LCBhbmQgd2l0aG91dCB0aGUgcmVzdCBvZiB0aGVpciBhcm1zLCB0byBvY2N1cHkgQXJpbWludW0sIGEgbGFyZ2UgY2l0eSBvZiBHYXVsLCBhdm9pZGluZyBjb21tb3Rpb24gYW5kIGJsb29kc2hlZCBhcyBmYXIgYXMgcG9zc2libGU7IGFuZCBoZSBlbnRydXN0ZWQgdGhpcyBmb3JjZSB0byBIb3J0ZW5zaXVzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoaW1zZWxmIHNwZW50IHRoZSBkYXkgaW4gcHVibGljLCBhdHRlbmRpbmcgYW5kIHdhdGNoaW5nIHRoZSBleGVyY2lzZXMgb2YgZ2xhZGlhdG9yczsgYnV0IGEgbGl0dGxlIGJlZm9yZSBldmVuaW5nIGhlIGJhdGhlZCBhbmQgZHJlc3NlZCBhbmQgd2VudCBpbnRvIHRoZSBiYW5xdWV0aW5nIGhhbGwuIEhlcmUgaGUgaGVsZCBicmllZiBjb252ZXJzZSB3aXRoIHRob3NlIHdobyBoYWQgYmVlbiBpbnZpdGVkIHRvIHN1cHBlciwgYW5kIGp1c3QgYXMgaXQgd2FzIGdldHRpbmcgZGFyayByb3NlIGFuZCB3ZW50IGF3YXksIGFmdGVyIGFkZHJlc3NpbmcgY291cnRlb3VzbHkgbW9zdCBvZiBoaXMgZ3Vlc3RzIGFuZCBiaWRkaW5nIHRoZW0gYXdhaXQgaGlzIHJldHVybi4gVG8gYSBmZXcgb2YgaGlzIGZyaWVuZHMsIGhvd2V2ZXIsIGhlIGhhZCBwcmV2aW91c2x5IGdpdmVuIGRpcmVjdGlvbnMgdG8gZm9sbG93IGhpbSwgbm90IGFsbCBieSB0aGUgc2FtZSByb3V0ZSwgYnV0IHNvbWUgYnkgb25lIHdheSBhbmQgc29tZSBieSBhbm90aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoaW1zZWxmIG1vdW50ZWQgb25lIG9mIGhpcyBoaXJlZCBjYXJ0cyBhbmQgZHJvdmUgYXQgZmlyc3QgYWxvbmcgYW5vdGhlciByb2FkLCB0aGVuIHR1cm5lZCB0b3dhcmRzIEFyaW1pbnVtLiBXaGVuIGhlIGNhbWUgdG8gdGhlIHJpdmVyIHdoaWNoIHNlcGFyYXRlcyBDaXNhbHBpbmUgR2F1bCBmcm9tIHRoZSByZXN0IG9mIEl0YWx5IChpdCBpcyBjYWxsZWQgdGhlIFJ1Ymljb24pLCBhbmQgYmVnYW4gdG8gcmVmbGVjdCwgbm93IHRoYXQgaGUgZHJldyBuZWFyZXIgdG8gdGhlIGZlYXJmdWwgc3RlcCBhbmQgd2FzIGFnaXRhdGVkIGJ5IHRoZSBtYWduaXR1ZGUgb2YgaGlzIHZlbnR1cmVzLCBoZSBjaGVja2VkIGhpcyBzcGVlZC4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgaGFsdGluZyBpbiBoaXMgY291cnNlLCBoZSBjb21tdW5lZCB3aXRoIGhpbXNlbGYgYSBsb25nIHRpbWUgaW4gc2lsZW5jZSBhcyBoaXMgcmVzb2x1dGlvbiB3YXZlcmVkIGJhY2sgYW5kIGZvcnRoLCBhbmQgaGlzIHB1cnBvc2UgdGhlbiBzdWZmZXJlZCBjaGFuZ2UgYWZ0ZXIgY2hhbmdlLiBGb3IgYSBsb25nIHRpbWUsIHRvbywgaGUgZGlzY3Vzc2VkIGhpcyBwZXJwbGV4aXRpZXMgd2l0aCBoaXMgZnJpZW5kcyB3aG8gd2VyZSBwcmVzZW50LCBhbW9uZyB3aG9tIHdhcyBBc2luaXVzIFBvbGxpbywgZXN0aW1hdGluZyB0aGUgZ3JlYXQgZXZpbHMgZm9yIGFsbCBtYW5raW5kIHdoaWNoIHdvdWxkIGZvbGxvdyB0aGVpciBwYXNzYWdlIG9mIHRoZSByaXZlciwgYW5kIHRoZSB3aWRlIGZhbWUgb2YgaXQgd2hpY2ggdGhleSB3b3VsZCBsZWF2ZSB0byBwb3N0ZXJpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmaW5hbGx5LCB3aXRoIGEgc29ydCBvZiBwYXNzaW9uLCBhcyBpZiBhYmFuZG9uaW5nIGNhbGN1bGF0aW9uIGFuZCBjYXN0aW5nIGhpbXNlbGYgdXBvbiB0aGUgZnV0dXJlLCBhbmQgdXR0ZXJpbmcgdGhlIHBocmFzZSB3aXRoIHdoaWNoIG1lbiB1c3VhbGx5IHByZWx1ZGUgdGhlaXIgcGx1bmdlIGludG8gZGVzcGVyYXRlIGFuZCBkYXJpbmcgZm9ydHVuZXMsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHRoZSBkaWUgYmUgY2FzdCw8L3E+IGhlIGhhc3RlbmVkIHRvIGNyb3NzIHRoZSByaXZlcjsgYW5kIGdvaW5nIGF0IGZ1bGwgc3BlZWQgbm93IGZvciB0aGUgcmVzdCBvZiB0aGUgdGltZSwgYmVmb3JlIGRheWJyZWFrIGhlIGRhc2hlZCBpbnRvIEFyaW1pbnVtIGFuZCB0b29rIHBvc3Nlc3Npb24gb2YgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXkgPC90aXRsZT4sIGx4LiAxLTI8L2JpYmw+Ljwvbm90ZT4gSXQgaXMgc2FpZCwgbW9yZW92ZXIsIHRoYXQgb24gdGhlIG5pZ2h0IGJlZm9yZSBoZSBjcm9zc2VkIHRoZSByaXZlciBoZSBoYWQgYW4gdW5uYXR1cmFsIGRyZWFtOyBoZSB0aG91Z2h0LCBuYW1lbHksIHRoYXQgaGUgd2FzIGhhdmluZyBpbmNlc3R1b3VzIGludGVyY291cnNlIHdpdGggaGlzIG93biBtb3RoZXIuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EaXYuIEp1bC48L3RpdGxlPiA3PC9iaWJsPiksIENhZXNhciBoYWQgdGhpcyBkcmVhbSB3aGlsZSBoZSB3YXMgcXVhZXN0b3IgaW4gU3BhaW4gKDY3IEIuQy4pLiBUaGUgaW50ZXJwcmV0ZXJzIG9mIGRyZWFtcyB0b2xkIGhpbSB0aGF0IGhpcyA8ZW1waD5tb3RoZXI8L2VtcGg+IG1lYW50IHRoZSBFYXJ0aCwgdGhlIHVuaXZlcnNhbCBwYXJlbnQsIHdoaWNoIHdhcyB0byBiZWNvbWUgc3ViamVjdCB0byBoaW0uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIHNlaXp1cmUgb2YgQXJpbWludW0sIGFzIGlmIHRoZSB3YXIgaGFkIG9wZW5lZCB3aXRoIGJyb2FkIGdhdGVzIHRvIGNvdmVyIHRoZSB3aG9sZSBlYXJ0aCBhbmQgc2VhIGFsaWtlLCBhbmQgdGhlIGxhd3Mgb2YgdGhlIHN0YXRlIHdlcmUgY29uZm91bmRlZCBhbG9uZyB3aXRoIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwcm92aW5jZSwgb25lIHdvdWxkIG5vdCBoYXZlIHRob3VnaHQgdGhhdCBtZW4gYW5kIHdvbWVuLCBhcyBhdCBvdGhlciB0aW1lcywgd2VyZSBodXJyeWluZyB0aHJvdWdoIEl0YWx5IGluIGNvbnN0ZXJuYXRpb24sIGJ1dCB0aGF0IHRoZSB2ZXJ5IGNpdGllcyBoYWQgcmlzZW4gdXAgaW4gZmxpZ2h0IGFuZCB3ZXJlIHJ1c2hpbmcgb25lIHRocm91Z2ggYW5vdGhlcjsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+d2hpbGUgUm9tZSBoZXJzZWxmLCBkZWx1Z2VkIGFzIGl0IHdlcmUgYnkgdGhlIGluaGFiaXRhbnRzIG9mIHRoZSBzdXJyb3VuZGluZyB0b3ducyB3aG8gd2VyZSBmbGVlaW5nIGZyb20gdGhlaXIgaG9tZXMsIG5laXRoZXIgcmVhZGlseSBvYmV5aW5nIGEgbWFnaXN0cmF0ZSBub3IgbGlzdGVuaW5nIHRvIHRoZSB2b2ljZSBvZiByZWFzb24sIGluIHRoZSBzdXJnZXMgb2YgYSBtaWdodHkgc2VhIG5hcnJvd2x5IGVzY2FwZWQgYmVpbmcgb3ZlcnR1cm5lZCBieSBoZXIgb3duIGludGVybmFsIGFnaXRhdGlvbnMuIEZvciBjb25mbGljdGluZyBlbW90aW9ucyBhbmQgdmlvbGVudCBkaXN0dXJiYW5jZXMgcHJldmFpbGVkIGV2ZXJ5d2hlcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyByZWpvaWNlZCBkaWQgbm90IGtlZXAgcXVpZXQsIGJ1dCBpbiBtYW55IHBsYWNlcywgYXMgd2FzIG5hdHVyYWwgaW4gYSBncmVhdCBjaXR5LCBlbmNvdW50ZXJlZCB0aG9zZSB3aG8gd2VyZSBpbiBmZWFyIGFuZCBkaXN0cmVzcywgYW5kIGJlaW5nIGZpbGxlZCB3aXRoIGNvbmZpZGVuY2UgYXMgdG8gdGhlIGZ1dHVyZSBjYW1lIGludG8gc3RyaWZlIHdpdGggdGhlbTsgd2hpbGUgUG9tcGV5IGhpbXNlbGYsIHdobyB3YXMgdGVycm9yLXN0cmlja2VuLCB3YXMgYXNzYWlsZWQgb24gZXZlcnkgc2lkZSwgYmVpbmcgdGFrZW4gdG8gdGFzayBieSBzb21lIGZvciBoYXZpbmcgc3RyZW5ndGhlbmVkIENhZXNhciBhZ2FpbnN0IGhpbXNlbGYgYW5kIHRoZSBzdXByZW1lIHBvd2VyIG9mIHRoZSBzdGF0ZSwgYW5kIGRlbm91bmNlZCBieSBvdGhlcnMgZm9yIGhhdmluZyBwZXJtaXR0ZWQgTGVudHVsdXMgdG8gaW5zdWx0IENhZXNhciB3aGVuIGhlIHdhcyByZWFkeSB0byB5aWVsZCBhbmQgd2FzIG9mZmVyaW5nIHJlYXNvbmFibGUgdGVybXMgb2Ygc2V0dGxlbWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RmF2b25pdXMgYmFkZSBoaW0gc3RhbXAgb24gdGhlIGdyb3VuZDsgZm9yIG9uY2UsIGluIGEgYm9hc3RmdWwgc3BlZWNoIHRvIHRoZSBzZW5hdGUsIGhlIHRvbGQgdGhlbSB0byB0YWtlIG5vIHRyb3VibGUgb3IgYW54aW91cyB0aG91Z2h0IGFib3V0IHByZXBhcmF0aW9ucyBmb3IgdGhlIHdhciwgc2luY2Ugd2hlbiBpdCBjYW1lIGhlIGhhZCBidXQgdG8gc3RhbXAgdXBvbiB0aGUgZWFydGggdG8gZmlsbCBJdGFseSB3aXRoIGFybWllcy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1Ny41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBsdmlpLiA1PC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBldmVuIHRoZW4gUG9tcGV5J3MgZm9yY2VzIHdlcmUgbW9yZSBudW1lcm91cyB0aGFuIENhZXNhcidzOyBidXQgbm8gb25lIHdvdWxkIHN1ZmZlciBoaW0gdG8gZXhlcmNpc2UgaGlzIG93biBqdWRnZW1lbnQ7IGFuZCBzbywgdW5kZXIgdGhlIGluZmx1ZW5jZSBvZiBtYW55IGZhbHNlIGFuZCB0ZXJyaWZ5aW5nIHJlcG9ydHMsIGJlbGlldmluZyB0aGF0IHRoZSB3YXIgd2FzIGFscmVhZHkgY2xvc2UgYXQgaGFuZCBhbmQgcHJldmFpbGVkIGV2ZXJ5d2hlcmUsIGhlIGdhdmUgd2F5LCB3YXMgc3dlcHQgYWxvbmcgd2l0aCB0aGUgdW5pdmVyc2FsIHRpZGUsIGlzc3VlZCBhbiBlZGljdCBkZWNsYXJpbmcgYSBzdGF0ZSBvZiBhbmFyY2h5LCBhbmQgZm9yc29vayB0aGUgY2l0eSwgY29tbWFuZGluZyB0aGUgc2VuYXRlIHRvIGZvbGxvdywgYW5kIGZvcmJpZGRpbmcgYW55IG9uZSB0byByZW1haW4gd2hvIHByZWZlcnJlZCBjb3VudHJ5IGFuZCBmcmVlZG9tIHRvIHR5cmFubnkuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgY29uc3VscyBmbGVkLCB3aXRob3V0IGV2ZW4gbWFraW5nIHRoZSBzYWNyaWZpY2VzIHVzdWFsIGJlZm9yZSBkZXBhcnR1cmU7IG1vc3Qgb2YgdGhlIHNlbmF0b3JzIGFsc28gZmxlZCwgYWZ0ZXIgc2VpemluZywgaW4gYSBzb3J0IG9mIHJvYmJlcnksIHdoYXRldmVyIGNhbWUgdG8gaGFuZCBvZiB0aGVpciBvd24gcG9zc2Vzc2lvbnMsIGFzIHRob3VnaCBpdCB3ZXJlIHRoZSBwcm9wZXJ0eSBvZiBvdGhlcnMuIFNvbWUsIHRvbywgd2hvIGJlZm9yZSB0aGlzIGhhZCB2ZWhlbWVudGx5IGVzcG91c2VkIHRoZSBjYXVzZSBvZiBDYWVzYXIsIHdlcmUgbm93IGZyaWdodGVuZWQgb3V0IG9mIHRoZWlyIHdpdHMsIGFuZCB3ZXJlIGNhcnJpZWQgYWxvbmcsIHdoZW4gdGhlcmUgd2FzIG5vIG5lZWQgb2YgaXQsIGJ5IHRoZSBzd2VlcCBvZiB0aGUgZ3JlYXQgdGlkZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG1vc3QgcGl0aWZ1bCB3YXMgdGhlIHNpZ2h0IG9mIHRoZSBjaXR5LCBub3cgdGhhdCBzbyBncmVhdCBhIHRlbXBlc3Qgd2FzIGJlYXJpbmcgZG93biB1cG9uIGhlciwgY2FycmllZCBhbG9uZyBsaWtlIGEgc2hpcCBhYmFuZG9uZWQgb2YgaGVyIGhlbG1zbWVuIHRvIGRhc2ggYWdhaW5zdCB3aGF0ZXZlciBsYXkgaW4gaGVyIHBhdGguIFN0aWxsLCBhbHRob3VnaCB0aGVpciByZW1vdmFsIHdhcyBzbyBwaXRpZnVsIGEgdGhpbmcsIGZvciB0aGUgc2FrZSBvZiBQb21wZXkgbWVuIGNvbnNpZGVyZWQgZXhpbGUgdG8gYmUgdGhlaXIgY291bnRyeSwgYW5kIGFiYW5kb25lZCBSb21lIHdpdGggdGhlIGZlZWxpbmcgdGhhdCBpdCB3YXMgQ2Flc2FyJ3MgY2FtcC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2MS40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBseGkuIDQ8L2JpYmw+Ljwvbm90ZT4gRm9yIGV2ZW4gTGFiaWVudXMsIG9uZSBvZiBDYWVzYXIncyBncmVhdGVzdCBmcmllbmRzLCB3aG8gaGFkIGJlZW4gaGlzIGxlZ2F0ZSBhbmQgaGFkIGZvdWdodCBtb3N0IHplYWxvdXNseSB3aXRoIGhpbSBpbiBhbGwgaGlzIEdhbGxpYyB3YXJzLCBub3cgcmFuIGF3YXkgZnJvbSBoaW0gYW5kIGNhbWUgdG8gUG9tcGV5LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2Flc2FyIHNlbnQgdG8gTGFiaWVudXMgaGlzIG1vbmV5IGFuZCBoaXMgYmFnZ2FnZTsgYWdhaW5zdCBEb21pdGl1cywgaG93ZXZlciwgd2hvIHdhcyBob2xkaW5nIENvcmZpbml1bSB3aXRoIHRoaXJ0eSBjb2hvcnRzIHVuZGVyIGhpcyBjb21tYW5kLCBoZSBtYXJjaGVkLCBhbmQgcGl0Y2hlZCBoaXMgY2FtcCBuZWFyIGJ5LiBEb21pdGl1cywgZGVzcGFpcmluZyBvZiBoaXMgZW50ZXJwcmlzZSwgYXNrZWQgaGlzIHBoeXNpY2lhbiwgd2hvIHdhcyBhIHNsYXZlLCBmb3IgYSBwb2lzb247IGFuZCB0YWtpbmcgd2hhdCB3YXMgZ2l2ZW4gaGltLCBkcmFuayBpdCwgaW50ZW5kaW5nIHRvIGRpZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIGEgbGl0dGxlLCBoZWFyaW5nIHRoYXQgQ2Flc2FyIHNob3dlZCBtb3N0IHdvbmRlcmZ1bCBjbGVtZW5jeSB0b3dhcmRzIGhpcyBwcmlzb25lcnMsIGhlIGJld2FpbGVkIGhpcyBmYXRlLCBhbmQgYmxhbWVkIHRoZSByYXNobmVzcyBvZiBoaXMgcHVycG9zZS4gVGhlbiBoaXMgcGh5c2ljaWFuIGJhZGUgaGltIGJlIG9mIGdvb2QgY2hlZXIsIHNpbmNlIHdoYXQgaGUgaGFkIGRydW5rIHdhcyBhIHNsZWVwaW5nLXBvdGlvbiBhbmQgbm90IGRlYWRseTsgd2hlcmV1cG9uIERvbWl0aXVzIHJvc2UgdXAgb3ZlcmpveWVkIGFuZCB3ZW50IHRvIENhZXNhciwgdGhlIHBsZWRnZSBvZiB3aG9zZSByaWdodCBoYW5kIGhlIHJlY2VpdmVkLCBvbmx5IHRvIGRlc2VydCBoaW0gYW5kIGdvIGJhY2sgdG8gUG9tcGV5LiBXaGVuIHRpZGluZ3Mgb2YgdGhlc2UgdGhpbmdzIGNhbWUgdG8gUm9tZSwgbWVuIHdlcmUgbWFkZSBtb3JlIGNoZWVyZnVsLCBhbmQgc29tZSBvZiB0aGUgZnVnaXRpdmVzIHR1cm5lZCBiYWNrLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgdG9vayBvdmVyIHRoZSB0cm9vcHMgb2YgRG9taXRpdXMsIGFzIHdlbGwgYXMgYWxsIHRoZSBvdGhlciBsZXZpZXMgb2YgUG9tcGV5IHdoaWNoIGhlIHN1cnByaXNlZCBpbiB0aGUgdmFyaW91cyBjaXRpZXMuIFRoZW4sIHNpbmNlIGhpcyBmb3JjZXMgd2VyZSBhbHJlYWR5IG51bWVyb3VzIGFuZCBmb3JtaWRhYmxlLCBoZSBtYXJjaGVkIGFnYWluc3QgUG9tcGV5IGhpbXNlbGYuIFBvbXBleSwgaG93ZXZlciwgZGlkIG5vdCBhd2FpdCBoaXMgYXBwcm9hY2gsIGJ1dCBmbGVkIHRvIEJydW5kaXNpdW0sIHNlbnQgdGhlIGNvbnN1bHMgYmVmb3JlIGhpbSB3aXRoIGFuIGFybXkgdG8gRHlycmhhY2hpdW0sIGFuZCBzaG9ydGx5IGFmdGVyd2FyZHMsIGFzIENhZXNhciBkcmV3IG5lYXIsIHNhaWxlZCBvZmYgaGltc2VsZiwgYXMgc2hhbGwgYmUgc2V0IGZvcnRoIGNpcmN1bXN0YW50aWFsbHkgaW4gaGlzIExpZmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2Mi4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIGx4aWk8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIHdpc2hlZCB0byBwdXJzdWUgaGltIGF0IG9uY2UsIGJ1dCB3YXMgZGVzdGl0dXRlIG9mIHNoaXBzOyBzbyBoZSB0dXJuZWQgYmFjayB0byBSb21lLCBoYXZpbmcgaW4gc2l4dHkgZGF5cyBhbmQgd2l0aG91dCBibG9vZHNoZWQgYmVjb21lIG1hc3RlciBvZiBhbGwgSXRhbHkuPC9wPgogICAgICAgICA8cD5IZSBmb3VuZCB0aGUgY2l0eSBtb3JlIHRyYW5xdWlsIHRoYW4gaGUgd2FzIGV4cGVjdGluZywgYW5kIG1hbnkgc2VuYXRvcnMgaW4gaXQuIFdpdGggdGhlc2UsIHRoZXJlZm9yZSwgaGUgY29uZmVycmVkIGluIGEgZ2VudGxlIGFuZCBhZmZhYmxlIG1hbm5lciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIgZ2l2ZXMgYSBzdW1tYXJ5IG9mIGhpcyBzcGVlY2ggdG8gdGhlIHNlbmF0b3JzIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDEuMzIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gQy48L3RpdGxlPiBpLiAzMjwvYmlibD4uPC9ub3RlPiBpbnZpdGluZyB0aGVtIGV2ZW4gdG8gc2VuZCBhIGRlcHV0YXRpb24gdG8gUG9tcGV5IHByb3Bvc2luZyBzdWl0YWJsZSB0ZXJtcyBvZiBhZ3JlZW1lbnQuIEJ1dCBubyBvbmUgd291bGQgbGlzdGVuIHRvIGhpbSwgZWl0aGVyIGJlY2F1c2UgdGhleSBmZWFyZWQgUG9tcGV5LCB3aG9tIHRoZXkgaGFkIGFiYW5kb25lZCwgb3IgYmVjYXVzZSB0aGV5IHRob3VnaHQgdGhhdCBDYWVzYXIgZGlkIG5vdCBtZWFuIHdoYXQgaGUgc2FpZCwgYnV0IHdhcyBpbmR1bGdpbmcgaW4gc3BlY2lvdXMgdGFsay4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgdHJpYnVuZSBNZXRlbGx1cyB0cmllZCB0byBwcmV2ZW50IENhZXNhcidzIHRha2luZyBtb25leSBmcm9tIHRoZSByZXNlcnZlIGZ1bmRzIG9mIHRoZSBzdGF0ZSwgYW5kIGNpdGVkIGNlcnRhaW4gbGF3cywgQ2Flc2FyIHNhaWQgdGhhdCBhcm1zIGFuZCBsYXdzIGhhZCBub3QgdGhlIHNhbWUgc2Vhc29uLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBpZiB0aG91IGFydCBkaXNwbGVhc2VkIGF0IHdoYXQgaXMgZ29pbmcgb24sIGZvciB0aGUgcHJlc2VudCBnZXQgb3V0IG9mIHRoZSB3YXksIHNpbmNlIHdhciBoYXMgbm8gdXNlIGZvciBmcmVlIHNwZWVjaDsgd2hlbiwgaG93ZXZlciwgSSBoYXZlIGNvbWUgdG8gdGVybXMgYW5kIGxhaWQgZG93biBteSBhcm1zLCB0aGVuIHRob3Ugc2hhbHQgY29tZSBiZWZvcmUgdGhlIHBlb3BsZSB3aXRoIHRoeSBoYXJhbmd1ZXMuIEFuZCBpbiBzYXlpbmcgdGhpcyBJIHdhaXZlIG15IG93biBqdXN0IHJpZ2h0czsgZm9yIHRob3UgYXJ0IG1pbmUsIHRob3UgYW5kIGFsbCBvZiB0aGUgZmFjdGlvbiBob3N0aWxlIHRvIG1lIHdob20gSSBoYXZlIGNhdWdodDwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIHNwZWVjaCB0byBNZXRlbGx1cywgQ2Flc2FyIHdhbGtlZCB0b3dhcmRzIHRoZSBkb29yIG9mIHRoZSB0cmVhc3VyeSwgYW5kIHdoZW4gdGhlIGtleXMgd2VyZSBub3QgdG8gYmUgZm91bmQsIGhlIHNlbnQgZm9yIHNtaXRocyBhbmQgb3JkZXJlZCB0aGVtIHRvIGJyZWFrIGluIHRoZSBkb29yLiBNZXRlbGx1cyBvbmNlIG1vcmUgb3Bwb3NlZCBoaW0sIGFuZCB3YXMgY29tbWVuZGVkIGJ5IHNvbWUgZm9yIHNvIGRvaW5nOyBidXQgQ2Flc2FyLCByYWlzaW5nIGhpcyB2b2ljZSwgdGhyZWF0ZW5lZCB0byBraWxsIGhpbSBpZiBoZSBkaWQgbm90IGNlYXNlIGhpcyB0cm91Ymxlc29tZSBpbnRlcmZlcmVuY2UuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHRob3Ugc3VyZWx5IGtub3dlc3QsIHlvdW5nIG1hbiw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBpdCBpcyBtb3JlIHVucGxlYXNhbnQgZm9yIG1lIHRvIHNheSB0aGlzIHRoYW4gdG8gZG8gaXQ8L3E+IFRoZW4gTWV0ZWxsdXMsIGluIGNvbnNlcXVlbmNlIG9mIHRoaXMgc3BlZWNoLCB3ZW50IG9mZiBpbiBhIGZyaWdodCwgYW5kIGhlbmNlZm9ydGggZXZlcnl0aGluZyB3YXMgc3BlZWRpbHkgYW5kIGVhc2lseSBmdXJuaXNoZWQgdG8gQ2Flc2FyIGZvciB0aGUgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYyLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4aWkuIDE8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIG1hZGUgYW4gZXhwZWRpdGlvbiBpbnRvIFNwYWluLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjM0IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGkuIDM0LTg2PC9iaWJsPi48L25vdGU+IGhhdmluZyByZXNvbHZlZCBmaXJzdCB0byBkcml2ZSBvdXQgZnJvbSB0aGVyZSBBZnJhbml1cyBhbmQgVmFycm8sIFBvbXBleSdzIGxlZ2F0ZXMsIGFuZCBicmluZyB0aGVpciBmb3JjZXMgdGhlcmUgYW5kIHRoZSBwcm92aW5jZXMgaW50byBoaXMgcG93ZXIsIGFuZCB0aGVuIHRvIG1hcmNoIGFnYWluc3QgUG9tcGV5LCBsZWF2aW5nIG5vdCBhbiBlbmVteSBpbiBoaXMgcmVhci4gQW5kIHRob3VnaCBoaXMgbGlmZSB3YXMgb2Z0ZW4gaW4gcGVyaWwgZnJvbSBhbWJ1c2NhZGVzLCBhbmQgaGlzIGFybXkgbW9zdCBvZiBhbGwgZnJvbSBodW5nZXIsIGhlIGRpZCBub3QgY2Vhc2UgZnJvbSBwdXJzdWluZywgY2hhbGxlbmdpbmcsIGFuZCBiZXNpZWdpbmcgdGhlIG1lbiB1bnRpbCBoZSBoYWQgbWFkZSBoaW1zZWxmIGJ5IG1haW4gZm9yY2UgbWFzdGVyIG9mIHRoZWlyIGNhbXBzIGFuZCB0aGVpciBmb3JjZXMuIFRoZSBsZWFkZXJzLCBob3dldmVyLCBtYWRlIHRoZWlyIGVzY2FwZSB0byBQb21wZXkuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2Flc2FyIGNhbWUgYmFjayB0byBSb21lLCBQaXNvLCBoaXMgZmF0aGVyLWluLWxhdywgdXJnZWQgaGltIHRvIHNlbmQgYSBkZXB1dGF0aW9uIHRvIFBvbXBleSB3aXRoIHByb3Bvc2FscyBmb3IgYSBzZXR0bGVtZW50OyBidXQgSXNhdXJpY3VzLCB0byBwbGVhc2UgQ2Flc2FyLCBvcHBvc2VkIHRoZSBwcm9qZWN0LiBTbywgaGF2aW5nIGJlZW4gbWFkZSBkaWN0YXRvciBieSB0aGUgc2VuYXRlLCBoZSBicm91Z2h0IGhvbWUgZXhpbGVzLCByZXN0b3JlZCB0byBjaXZpYyByaWdodHMgdGhlIGNoaWxkcmVuIG9mIHRob3NlIHdobyBoYWQgc3VmZmVyZWQgaW4gdGhlIHRpbWUgb2YgU3VsbGEsIHJlbGlldmVkIHRoZSBidXJkZW5zIG9mIHRoZSBkZWJ0b3ItY2xhc3MgYnkgYSBjZXJ0YWluIGFkanVzdG1lbnQgb2YgaW50ZXJlc3QsIHRvb2sgaW4gaGFuZCBhIGZldyBvdGhlciBwdWJsaWMgbWVhc3VyZXMgb2YgbGlrZSBjaGFyYWN0ZXIsIGFuZCB3aXRoaW4gZWxldmVuIGRheXMgYWJkaWNhdGVkIHRoZSBzb2xlIHBvd2VyLCBoYWQgaGltc2VsZiBkZWNsYXJlZCBjb25zdWwgd2l0aCBTZXJ2aWxpdXMgSXNhdXJpY3VzLCBhbmQgZW50ZXJlZCB1cG9uIGhpcyBjYW1wYWlnbi48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHJlc3Qgb2YgaGlzIGZvcmNlcyBoZSBwYXNzZWQgYnkgaW4gYSBmb3JjZWQgbWFyY2gsIGFuZCB3aXRoIHNpeCBodW5kcmVkIHBpY2tlZCBob3JzZW1lbiBhbmQgZml2ZSBsZWdpb25zLCBhdCB0aGUgdGltZSBvZiB0aGUgd2ludGVyIHNvbHN0aWNlLCBpbiB0aGUgZWFybHkgcGFydCBvZiBKYW51YXJ5PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NDggQi5DLiBUaGUgUm9tYW4gY2FsZW5kYXIsIGF0IHRoaXMgdGltZSwgd2FzIG11Y2ggaW4gYWR2YW5jZSBvZiB0aGUgc29sYXIgc2Vhc29ucy48L25vdGU+ICh0aGlzIG1vbnRoIGFuc3dlcnMgbmVhcmx5IHRvIHRoZSBBdGhlbmlhbiBQb3NlaWRlb24pLCBwdXQgdG8gc2VhLCBhbmQgYWZ0ZXIgY3Jvc3NpbmcgdGhlIElvbmlhbiBndWxmIHRvb2sgT3JpY3VtIGFuZCBBcG9sbG9uaWEsIGFuZCBzZW50IGhpcyB0cmFuc3BvcnRzIGJhY2sgYWdhaW4gdG8gQnJ1bmRpc2l1bSBmb3IgdGhlIHNvbGRpZXJzIHdobyBoYWQgYmVlbiBiZWxhdGVkIG9uIHRoZWlyIG1hcmNoLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSwgYXMgbG9uZyBhcyB0aGV5IHdlcmUgb24gdGhlIHJvYWQsIHNpbmNlIHRoZXkgd2VyZSBub3cgcGFzdCB0aGVpciBwaHlzaWNhbCBwcmltZSBhbmQgd29ybiBvdXQgd2l0aCB0aGVpciBtdWx0aXR1ZGlub3VzIHdhcnMsIG11cm11cmVkIGFnYWluc3QgQ2Flc2FyLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoaXRoZXIsIHByYXksIGFuZCB0byB3aGF0IGVuZCB3aWxsIHRoaXMgbWFuIGJyaW5nIHVzLCBodXJyeWluZyB1cyBhYm91dCBhbmQgdHJlYXRpbmcgdXMgbGlrZSB0aXJlbGVzcyBhbmQgbGlmZWxlc3MgdGhpbmdzPyBFdmVuIGEgc3dvcmQgZ2V0cyB0aXJlZCBvdXQgd2l0aCBzbWl0aW5nLCBhbmQgc2hpZWxkIGFuZCBicmVhc3RwbGF0ZSBhcmUgc3BhcmVkIGEgbGl0dGxlIGFmdGVyIHNvIGxvbmcgYSB0aW1lIG9mIHNlcnZpY2UuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaWxsIG5vdCBldmVuIG91ciB3b3VuZHMsIHRoZW4sIGNvbnZpbmNlIENhZXNhciB0aGF0IGhlIGNvbW1hbmRzIG1vcnRhbCBtZW4sIGFuZCB0aGF0IHdlIGFyZSBtb3J0YWwgaW4gdGhlIGVuZHVyYW5jZSBvZiBwYWluIGFuZCBzdWZmZXJpbmc/IFN1cmVseSB0aGUgd2ludHJ5IHNlYXNvbiBhbmQgdGhlIG9jY2FzaW9uIG9mIGEgc3Rvcm0gYXQgc2VhIG5vdCBldmVuIGEgZ29kIGNhbiBjb25zdHJhaW47IHlldCB0aGlzIG1hbiB0YWtlcyByaXNrcyBhcyB0aG91Z2ggaGUgd2VyZSBub3QgcHVyc3VpbmcsIGJ1dCBmbHlpbmcgZnJvbSwgZW5lbWllczwvcT4gV2l0aCBzdWNoIHdvcmRzIGFzIHRoZXNlIHRoZXkgbWFyY2hlZCBpbiBhIGxlaXN1cmVseSB3YXkgdG8gQnJ1bmRpc2l1bS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhleSBnb3QgdGhlcmUgYW5kIGZvdW5kIHRoYXQgQ2Flc2FyIGhhZCBwdXQgdG8gc2VhLCB0aGV5IHF1aWNrbHkgY2hhbmdlZCB0aGVpciB0b25lIGFuZCByZXZpbGVkIHRoZW1zZWx2ZXMgYXMgdHJhaXRvcnMgdG8gdGhlIEltcGVyYXRvcjsgdGhleSByZXZpbGVkIHRoZWlyIG9mZmljZXJzLCB0b28sIGZvciBub3QgaGF2aW5nIHF1aWNrZW5lZCB0aGVpciBtYXJjaC4gVGhlbiwgc2l0dGluZyBvbiB0aGUgY2xpZmZzLCB0aGV5IGxvb2tlZCBvZmYgdG93YXJkcyB0aGUgb3BlbiBzZWEgYW5kIEVwaXJ1cywgd2F0Y2hpbmcgZm9yIHRoZSBzaGlwcyB3aGljaCB3ZXJlIHRvIGNhcnJ5IHRoZW0gYWNyb3NzIHRvIHRoZWlyIGNvbW1hbmRlci48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgQXBvbGxvbmlhLCBzaW5jZSB0aGUgZm9yY2Ugd2hpY2ggaGUgaGFkIHdpdGggaGltIHdhcyBub3QgYSBtYXRjaCBmb3IgdGhlIGVuZW15IGFuZCB0aGUgZGVsYXkgb2YgaGlzIHRyb29wcyBvbiB0aGUgb3RoZXIgc2lkZSBjYXVzZWQgaGltIHBlcnBsZXhpdHkgYW5kIGRpc3RyZXNzLCBDYWVzYXIgY29uY2VpdmVkIHRoZSBkYW5nZXJvdXMgcGxhbiBvZiBlbWJhcmtpbmcgaW4gYSB0d2VsdmUtb2FyZWQgYm9hdCwgd2l0aG91dCBhbnkgb25lJ3Mga25vd2xlZGdlLCBhbmQgZ29pbmcgb3ZlciB0byBCcnVuZGlzaXVtLCB0aG91Z2ggdGhlIHNlYSB3YXMgZW5jb21wYXNzZWQgYnkgc3VjaCBsYXJnZSBhcm1hbWVudHMgb2YgdGhlIGVuZW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCBuaWdodCwgYWNjb3JkaW5nbHksIGFmdGVyIGRpc2d1aXNpbmcgaGltc2VsZiBpbiB0aGUgZHJlc3Mgb2YgYSBzbGF2ZSwgaGUgd2VudCBvbiBib2FyZCwgdGhyZXcgaGltc2VsZiBkb3duIGFzIG9uZSBvZiBubyBhY2NvdW50LCBhbmQga2VwdCBxdWlldC4gV2hpbGUgdGhlIHJpdmVyIEFvw7xzIHdhcyBjYXJyeWluZyB0aGUgYm9hdCBkb3duIHRvd2FyZHMgdGhlIHNlYSwgdGhlIGVhcmx5IG1vcm5pbmcgYnJlZXplLCB3aGljaCBhdCB0aGF0IHRpbWUgdXN1YWxseSBtYWRlIHRoZSBtb3V0aCBvZiB0aGUgcml2ZXIgY2FsbSBieSBkcml2aW5nIGJhY2sgdGhlIHdhdmVzLCB3YXMgcXVlbGxlZCBieSBhIHN0cm9uZyB3aW5kIHdoaWNoIGJsZXcgZnJvbSB0aGUgc2VhIGR1cmluZyB0aGUgbmlnaHQ7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZSByaXZlciB0aGVyZWZvcmUgY2hhZmVkIGFnYWluc3QgdGhlIGluZmxvdyBvZiB0aGUgc2VhIGFuZCB0aGUgb3Bwb3NpdGlvbiBvZiBpdHMgYmlsbG93cywgYW5kIHdhcyByb3VnaCwgYmVpbmcgYmVhdGVuIGJhY2sgd2l0aCBhIGdyZWF0IGRpbiBhbmQgdmlvbGVudCBlZGRpZXMsIHNvIHRoYXQgaXQgd2FzIGltcG9zc2libGUgZm9yIHRoZSBtYXN0ZXIgb2YgdGhlIGJvYXQgdG8gZm9yY2UgaGlzIHdheSBhbG9uZy4gSGUgdGhlcmVmb3JlIG9yZGVyZWQgdGhlIHNhaWxvcnMgdG8gY29tZSBhYm91dCBpbiBvcmRlciB0byByZXRyYWNlIGhpcyBjb3Vyc2UuIEJ1dCBDYWVzYXIsIHBlcmNlaXZpbmcgdGhpcywgZGlzY2xvc2VkIGhpbXNlbGYsIHRvb2sgdGhlIG1hc3RlciBvZiB0aGUgYm9hdCBieSB0aGUgaGFuZCwgd2hvIHdhcyB0ZXJyaWZpZWQgYXQgc2lnaHQgb2YgaGltLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21lLCBnb29kIG1hbiwgYmUgYm9sZCBhbmQgZmVhciBuYXVnaHQ7IHRob3UgY2Fycnllc3QgQ2Flc2FyIGFuZCBDYWVzYXIncyBmb3J0dW5lIGluIHRoeSBib2F0PC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDEuNDYuMyI+RGlvbiBDYXNzaXVzLCB4bGkuIDQ2LCAzPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzYWlsb3JzIGZvcmdvdCB0aGUgc3Rvcm0sIGFuZCBsYXlpbmcgdG8gdGhlaXIgb2FycywgdHJpZWQgd2l0aCBhbGwgYWxhY3JpdHkgdG8gZm9yY2UgdGhlaXIgd2F5IGRvd24gdGhlIHJpdmVyLiBCdXQgc2luY2UgaXQgd2FzIGltcG9zc2libGUsIGFmdGVyIHRha2luZyBtdWNoIHdhdGVyIGFuZCBydW5uaW5nIGdyZWF0IGhhemFyZCBhdCB0aGUgbW91dGggb2YgdGhlIHJpdmVyLCBDYWVzYXIgdmVyeSByZWx1Y3RhbnRseSBzdWZmZXJlZCB0aGUgY2FwdGFpbiB0byBwdXQgYWJvdXQuIFdoZW4gaGUgY2FtZSBiYWNrLCBoaXMgc29sZGllcnMgbWV0IGhpbSBpbiB0aHJvbmdzLCBmaW5kaW5nIG11Y2ggZmF1bHQgYW5kIHNvcmUgZGlzcGxlYXNlZCB3aXRoIGhpbSBiZWNhdXNlIGhlIGRpZCBub3QgYmVsaWV2ZSB0aGF0IGV2ZW4gd2l0aCB0aGVtIGFsb25lIGhlIHdhcyBhYmxlIHRvIGNvbnF1ZXIsIGJ1dCB3YXMgdHJvdWJsZWQsIGFuZCByaXNrZWQgaGlzIGxpZmUgZm9yIHRoZSBzYWtlIG9mIHRoZSBhYnNlbnQgYXMgdGhvdWdoIGRpc3RydXN0aW5nIHRob3NlIHdobyB3ZXJlIHByZXNlbnQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIEFudG9ueSBwdXQgaW4gZnJvbSBCcnVuZGlzaXVtIHdpdGggaGlzIGZvcmNlcywgYW5kIENhZXNhciB3YXMgZW1ib2xkZW5lZCB0byBjaGFsbGVuZ2UgUG9tcGV5IHRvIGJhdHRsZS4gUG9tcGV5IHdhcyB3ZWxsIHBvc3RlZCBhbmQgZHJldyBhbXBsZSBzdXBwbGllcyBib3RoIGZyb20gbGFuZCBhbmQgc2VhOyB3aGlsZSBDYWVzYXIgaGFkIG5vIGdyZWF0IGFidW5kYW5jZSBhdCBmaXJzdCwgYW5kIGFmdGVyd2FyZHMgd2FzIGFjdHVhbGx5IGhhcmQgcHJlc3NlZCBmb3Igd2FudCBvZiBwcm92aXNpb25zLiBCdXQgaGlzIHNvbGRpZXJzIGR1ZyB1cCBhIGNlcnRhaW4gcm9vdCwgbWl4ZWQgaXQgd2l0aCBtaWxrLCBhbmQgYXRlIGl0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjQ4IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGlpaS4gNDg8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+T25jZSwgdG9vLCB0aGV5IG1hZGUgbG9hdmVzIG9mIGl0LCBhbmQgcnVubmluZyB1cCB0byB0aGUgZW5lbXkncyBvdXRwb3N0cywgdGhyZXcgdGhlIGxvYXZlcyBpbnNpZGUgb3IgdG9zc2VkIHRoZW0gdG8gb25lIGFub3RoZXIsIGFkZGluZyBieSB3YXkgb2YgY29tbWVudCB0aGF0IGFzIGxvbmcgYXMgdGhlIGVhcnRoIHByb2R1Y2VkIHN1Y2ggcm9vdHMsIHRoZXkgd291bGQgbm90IHN0b3AgYmVzaWVnaW5nIFBvbXBleS4gUG9tcGV5LCBob3dldmVyLCB3b3VsZCBub3QgYWxsb3cgZWl0aGVyIHRoZSBsb2F2ZXMgb3IgdGhlc2Ugd29yZHMgdG8gcmVhY2ggdGhlIG1haW4gYm9keSBvZiBoaXMgYXJteS4gRm9yIGhpcyBzb2xkaWVycyB3ZXJlIGRlamVjdGVkLCBmZWFyaW5nIHRoZSBmZXJvY2l0eSBhbmQgaGFyZGluZXNzIG9mIHRoZWlyIGVuZW1pZXMsIHdobyB3ZXJlIGxpa2Ugd2lsZCBiZWFzdHMgaW4gdGhlaXIgZXllcy48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSBjb25zdGFudCBza2lybWlzaGluZ3MgYWJvdXQgdGhlIGZvcnRpZmljYXRpb25zIG9mIFBvbXBleSwgYW5kIGluIGFsbCBvZiB0aGVtIENhZXNhciBnb3QgdGhlIGJldHRlciBleGNlcHQgb25lLCB3aGVyZSB0aGVyZSB3YXMgYSBncmVhdCByb3V0IG9mIGhpcyBtZW4gYW5kIGhlIHdhcyBpbiBkYW5nZXIgb2YgbG9zaW5nIGhpcyBjYW1wLiBGb3Igd2hlbiBQb21wZXkgYXR0YWNrZWQgbm90IG9uZSBvZiBDYWVzYXIncyBtZW4gc3Rvb2QgaGlzIGdyb3VuZCwgYnV0IHRoZSBtb2F0cyB3ZXJlIGZpbGxlZCB3aXRoIHRoZSBzbGFpbiwgYW5kIG90aGVycyB3ZXJlIGZhbGxpbmcgYXQgdGhlaXIgb3duIHJhbXBhcnRzIGFuZCB3YWxscywgd2hpdGhlciB0aGV5IGhhZCBiZWVuIGRyaXZlbiBpbiBoZWFkbG9uZyBmbGlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggQ2Flc2FyIG1ldCB0aGUgZnVnaXRpdmVzIGFuZCB0cmllZCB0byB0dXJuIHRoZW0gYmFjaywgaGUgYXZhaWxlZCBub3RoaW5nLCBuYXksIHdoZW4gaGUgdHJpZWQgdG8gbGF5IGhvbGQgb2YgdGhlIHN0YW5kYXJkcyB0aGUgYmVhcmVycyB0aHJldyB0aGVtIGF3YXksIHNvIHRoYXQgdGhlIGVuZW15IGNhcHR1cmVkIHRoaXJ0eS10d28gb2YgdGhlbS4gQ2Flc2FyIGhpbXNlbGYgdG9vLCBuYXJyb3dseSBlc2NhcGVkIGJlaW5nIGtpbGxlZC4gRm9yIGFzIGEgdGFsbCBhbmQgc3R1cmR5IG1hbiB3YXMgcnVubmluZyBhd2F5IHBhc3QgaGltLCBoZSBsYWlkIGhpcyBoYW5kIHVwb24gaGltIGFuZCBiYWRlIGhpbSBzdGF5IGFuZCBmYWNlIGFib3V0IHVwb24gdGhlIGVuZW15OyBhbmQgdGhlIGZlbGxvdywgZnVsbCBvZiBwYW5pYyBhdCB0aGUgdGhyZWF0ZW5pbmcgZGFuZ2VyLCByYWlzZWQgaGlzIHN3b3JkIHRvIHNtaXRlIENhZXNhciwgYnV0IGJlZm9yZSBoZSBjb3VsZCBkbyBzbyBDYWVzYXIncyBzaGllbGQtYmVhcmVyIGxvcHBlZCBvZmYgaGlzIGFybSBhdCB0aGUgc2hvdWxkZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIGNvbXBsZXRlbHkgaGFkIENhZXNhciBnaXZlbiB1cCBoaXMgY2F1c2UgZm9yIGxvc3QgdGhhdCwgd2hlbiBQb21wZXksIGVpdGhlciBmcm9tIGV4Y2Vzc2l2ZSBjYXV0aW9uIG9yIGJ5IHNvbWUgY2hhbmNlLCBkaWQgbm90IGZvbGxvdyB1cCBoaXMgZ3JlYXQgc3VjY2VzcywgYnV0IHdpdGhkcmV3IGFmdGVyIGhlIGhhZCBzaHV0IHVwIHRoZSBmdWdpdGl2ZXMgd2l0aGluIHRoZWlyIGVudHJlbmNobWVudHMsIENhZXNhciBzYWlkIHRvIGhpcyBmcmllbmRzIGFzIGhlIGxlZnQgdGhlbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Uby1kYXkgdmljdG9yeSBoYWQgYmVlbiB3aXRoIHRoZSBlbmVteSwgaWYgdGhleSBoYWQgaGFkIGEgdmljdG9yIGluIGNvbW1hbmQ8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY1LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4di4gNTwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGdvaW5nIGJ5IGhpbXNlbGYgdG8gaGlzIHRlbnQgYW5kIGx5aW5nIGRvd24sIGhlIHNwZW50IHRoYXQgbW9zdCBkaXN0cmVzc2Z1bCBvZiBhbGwgbmlnaHRzIGluIHZhaW4gcmVmbGVjdGlvbnMsIGNvbnZpbmNlZCB0aGF0IGhlIGhhZCBzaG93biBiYWQgZ2VuZXJhbHNoaXAuIEZvciB3aGlsZSBhIGZlcnRpbGUgY291bnRyeSBsYXkgd2FpdGluZyBmb3IgaGltLCBhbmQgdGhlIHByb3NwZXJvdXMgY2l0aWVzIG9mIE1hY2Vkb25pYSBhbmQgVGhlc3NhbHksIGhlIGhhZCBuZWdsZWN0ZWQgdG8gY2FycnkgdGhlIHdhciB0aGl0aGVyLCBhbmQgaGFkIHBvc3RlZCBoaW1zZWxmIGhlcmUgYnkgdGhlIHNlYSwgd2hpY2ggaGlzIGVuZW1pZXMgY29udHJvbGxlZCB3aXRoIHRoZWlyIGZsZWV0cywgYmVpbmcgdGh1cyBoZWxkIGluIHNpZWdlIGJ5IGxhY2sgb2YgcHJvdmlzaW9ucyByYXRoZXIgdGhhbiBiZXNpZWdpbmcgd2l0aCBoaXMgYXJtcy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBoaXMgZGVzcG9uZGVudCB0aG91Z2h0cyBvZiB0aGUgZGlmZmljdWx0eSBhbmQgcGVycGxleGl0eSBvZiBoaXMgc2l0dWF0aW9uIGtlcHQgaGltIHRvc3NpbmcgdXBvbiBoaXMgY291Y2gsIGFuZCBpbiB0aGUgbW9ybmluZyBoZSBicm9rZSBjYW1wLCByZXNvbHZlZCB0byBsZWFkIGhpcyBhcm15IGludG8gTWFjZWRvbmlhIGFnYWluc3QgU2NpcGlvOyBmb3IgaGUgd291bGQgdGhlbiBlaXRoZXIgZHJhdyBQb21wZXkgYWZ0ZXIgaGltIHRvIGEgcGxhY2Ugd2hlcmUgaGUgd291bGQgZ2l2ZSBiYXR0bGUgd2l0aG91dCBkcmF3aW5nIGhpcyBzdXBwbGllcyBhcyBoZSBub3cgZGlkIGZyb20gdGhlIHNlYSwgb3IgU2NpcGlvIHdvdWxkIGJlIGxlZnQgYWxvbmUgYW5kIGhlIHdvdWxkIG92ZXJ3aGVsbSBoaW0uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZW1ib2xkZW5lZCB0aGUgc29sZGllcnMgb2YgUG9tcGV5IGFuZCB0aGUgbGVhZGVycyBieSB3aG9tIGhlIHdhcyBzdXJyb3VuZGVkIHRvIGtlZXAgY2xvc2UgdG8gQ2Flc2FyLCB3aG9tIHRoZXkgdGhvdWdodCBkZWZlYXRlZCBhbmQgaW4gZmxpZ2h0LiBGb3IgUG9tcGV5IGhpbXNlbGYgd2FzIGNhdXRpb3VzIGFib3V0IGhhemFyZGluZyBhIGJhdHRsZSBmb3Igc28gZ3JlYXQgYSBzdGFrZSwgYW5kIHNpbmNlIGhlIHdhcyBtb3N0IGV4Y2VsbGVudGx5IHByb3ZpZGVkIHdpdGggZXZlcnl0aGluZyBuZWNlc3NhcnkgZm9yIGEgbG9uZyB3YXIsIGhlIHRob3VnaHQgaXQgYmVzdCB0byB3ZWFyIG91dCBhbmQgcXVlbmNoIHRoZSB2aWdvdXIgb2YgdGhlIGVuZW15LCB3aGljaCBtdXN0IGJlIHNob3J0LWxpdmVkLiBGb3IgdGhlIGJlc3QgZmlnaHRpbmcgbWVuIGluIENhZXNhcidzIGFybXkgaGFkIGV4cGVyaWVuY2UsIGl0IGlzIHRydWUsIGFuZCBhIGRhcmluZyB3aGljaCB3YXMgaXJyZXNpc3RpYmxlIGluIGNvbWJhdDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IHdoYXQgd2l0aCB0aGVpciBsb25nIG1hcmNoZXMgYW5kIGZyZXF1ZW50IGVuY2FtcG1lbnRzIGFuZCBzaWVnZS13YXJmYXJlIGFuZCBuaWdodC13YXRjaGVzLCB0aGV5IHdlcmUgYmVnaW5uaW5nIHRvIGdpdmUgb3V0IGJ5IHJlYXNvbiBvZiBhZ2UsIGFuZCB3ZXJlIHRvbyB1bndpZWxkeSBmb3IgbGFib3VyLCBoYXZpbmcgbG9zdCB0aGVpciBhcmRvdXIgZnJvbSB3ZWFrbmVzcy4gQXQgdGhhdCB0aW1lLCB0b28sIGEga2luZCBvZiBwZXN0aWxlbnRpYWwgZGlzZWFzZSwgb2NjYXNpb25lZCBieSB0aGUgc3RyYW5nZW5lc3Mgb2YgdGhlaXIgZGlldCwgd2FzIHNhaWQgdG8gYmUgcHJldmFsZW50IGluIENhZXNhcidzIGFybXkuIEFuZCB3aGF0IHdhcyBtb3N0IGltcG9ydGFudCBvZiBhbGwsIHNpbmNlIENhZXNhciB3YXMgbmVpdGhlciBzdHJvbmcgaW4gZnVuZHMgbm9yIHdlbGwgc3VwcGxpZWQgd2l0aCBwcm92aXNpb25zLCBpdCB3YXMgdGhvdWdodCB0aGF0IHdpdGhpbiBhIHNob3J0IHRpbWUgaGlzIGFybXkgd291bGQgYnJlYWsgdXAgb2YgaXRzZWxmLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlc2UgcmVhc29ucyBQb21wZXkgZGlkIG5vdCB3aXNoIHRvIGZpZ2h0LCBidXQgQ2F0byB3YXMgdGhlIG9ubHkgb25lIHRvIGNvbW1lbmQgaGlzIGNvdXJzZSwgYW5kIHRoaXMgZnJvbSBhIGRlc2lyZSB0byBzcGFyZSB0aGUgbGl2ZXMgb2YgaGlzIGZlbGxvdyBjaXRpemVuczsgZm9yIHdoZW4gaGUgc2F3IGV2ZW4gdGhvc2Ugb2YgdGhlIGVuZW15IHdobyBoYWQgZmFsbGVuIGluIHRoZSBiYXR0bGUsIHRvIHRoZSBudW1iZXIgb2YgYSB0aG91c2FuZCwgaGUgYnVyc3QgaW50byB0ZWFycywgbXVmZmxlZCB1cCBoaXMgaGVhZCwgYW5kIHdlbnQgYXdheS4gQWxsIHRoZSByZXN0LCBob3dldmVyLCByZXZpbGVkIFBvbXBleSBmb3IgdHJ5aW5nIHRvIGF2b2lkIGEgYmF0dGxlLCBhbmQgc291Z2h0IHRvIGdvYWQgaGltIG9uIGJ5IGNhbGxpbmcgaGltIEFnYW1lbW5vbiBhbmQgS2luZyBvZiBLaW5ncywgaW1wbHlpbmcgdGhhdCBoZSBkaWQgbm90IHdpc2ggdG8gbGF5IGFzaWRlIGhpcyBzb2xlIGF1dGhvcml0eSwgYnV0IHBsdW1lZCBoaW1zZWxmIG9uIGhhdmluZyBzbyBtYW55IGNvbW1hbmRlcnMgZGVwZW5kZW50IHVwb24gaGltIGFuZCBjb21pbmcgY29uc3RhbnRseSB0byBoaXMgdGVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIEZhdm9uaXVzLCBhZmZlY3RpbmcgQ2F0bydzIGJvbGRuZXNzIG9mIHNwZWVjaCwgY29tcGxhaW5lZCBsaWtlIGEgbWFkIG1hbiBiZWNhdXNlIHRoYXQgeWVhciBhbHNvIHRoZXkgd291bGQgYmUgdW5hYmxlIHRvIGVuam95IHRoZSBmaWdzIG9mIFR1c2N1bHVtIGJlY2F1c2Ugb2YgUG9tcGV5J3MgbG92ZSBvZiBjb21tYW5kLiBBZnJhbml1cywgdG9vLCB3aG8gaGFkIGxhdGVseSBjb21lIGZyb20gU3BhaW4sIHdoZXJlIGhlIGhhZCBzaG93biBiYWQgZ2VuZXJhbHNoaXAsIHdoZW4gYWNjdXNlZCBvZiBiZXRyYXlpbmcgaGlzIGFybXkgZm9yIGEgYnJpYmUsIGFza2VkIHdoeSB0aGV5IGRpZCBub3QgZmlnaHQgd2l0aCB0aGUgbWVyY2hhbnQgd2hvIGhhZCBib3VnaHQgdGhlIHByb3ZpbmNlcyBmcm9tIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2Ny4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBseHZpaS4gMzwvYmlibD4uPC9ub3RlPiBEcml2ZW4gb24gYnkgYWxsIHRoZXNlIGltcG9ydHVuaXRpZXMsIFBvbXBleSByZWx1Y3RhbnRseSBzb3VnaHQgYSBiYXR0bGUgYW5kIHB1cnN1ZWQgQ2Flc2FyLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgYWNjb21wbGlzaGVkIG1vc3Qgb2YgaGlzIG1hcmNoIHdpdGggZGlmZmljdWx0eSwgc2luY2Ugbm8gb25lIHdvdWxkIHNlbGwgaGltIHByb3Zpc2lvbnMsIGFuZCBldmVyeWJvZHkgZGVzcGlzZWQgaGltIG9uIGFjY291bnQgb2YgaGlzIHJlY2VudCBkZWZlYXQ7IGJ1dCBhZnRlciBoZSBoYWQgdGFrZW4gR29tcGhpLCBhIGNpdHkgb2YgVGhlc3NhbHksIGhlIG5vdCBvbmx5IHByb3ZpZGVkIGZvb2QgZm9yIGhpcyBzb2xkaWVycywgYnV0IGFsc28gcmVsaWV2ZWQgdGhlbSBvZiB0aGVpciBkaXNlYXNlIHVuZXhwZWN0ZWRseS4gRm9yIHRoZXkgZmVsbCBpbiB3aXRoIHBsZW50eSBvZiB3aW5lLCBhbmQgYWZ0ZXIgZHJpbmtpbmcgZnJlZWx5IG9mIGl0LCBhbmQgdGhlbiByZXZlbGxpbmcgYW5kIHJpb3Rpbmcgb24gdGhlaXIgbWFyY2gsIGJ5IG1lYW5zIG9mIHRoZWlyIGRydW5rZW5uZXNzIHRoZXkgZHJvdmUgYXdheSBhbmQgZ290IHJpZCBvZiB0aGVpciB0cm91YmxlLCBzaW5jZSB0aGV5IGJyb3VnaHQgdGhlaXIgYm9kaWVzIGludG8gYSBkaWZmZXJlbnQgaGFiaXQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGJvdGggYXJtaWVzIGVudGVyZWQgdGhlIHBsYWluIG9mIFBoYXJzYWx1cyBhbmQgZW5jYW1wZWQgdGhlcmUsIFBvbXBleSdzIG1pbmQgcmV2ZXJ0ZWQgYWdhaW4gdG8gaXRzIGZvcm1lciByZWFzb25pbmcsIGFuZCBiZXNpZGVzLCB0aGVyZSBiZWZlbGwgaGltIHVubHVja3kgYXBwZWFyYW5jZXMgYW5kIGEgdmlzaW9uIGluIGhpcyBzbGVlcC4gSGUgZHJlYW1lZCwgbmFtZWx5LCB0aGF0IGhlIHNhdyBoaW1zZWxmIGluIGhpcyB0aGVhdHJlIGFwcGxhdWRlZCBieSB0aGUgUm9tYW5zLCAuIC4gLiBUaG9zZSBhYm91dCBoaW0sIGhvd2V2ZXIsIHdlcmUgc28gY29uZmlkZW50LCBhbmQgc28gaG9wZWZ1bGx5IGFudGljaXBhdGVkIHRoZSB2aWN0b3J5LCB0aGF0IERvbWl0aXVzIGFuZCBTcGludGhlciBhbmQgU2NpcGlvIGRpc3B1dGVkIGVhcm5lc3RseSB3aXRoIG9uZSBhbm90aGVyIG92ZXIgQ2Flc2FyJ3Mgb2ZmaWNlIG9mIDxmb3JlaWduIGxhbmc9ImxhIj5Qb250aWZleCBNYXhpbXVzPC9mb3JlaWduPiwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIG1hbnkgc2VudCBhZ2VudHMgdG8gUm9tZSB0byBoaXJlIGFuZCB0YWtlIHBvc3Nlc3Npb24gb2YgaG91c2VzIHN1aXRhYmxlIGZvciBwcmFldG9ycyBhbmQgY29uc3VscywgYXNzdW1pbmcgdGhhdCB0aGV5IHdvdWxkIGltbWVkaWF0ZWx5IGhvbGQgdGhlc2Ugb2ZmaWNlcyBhZnRlciB0aGUgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjgyIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGlpaS4gODI8L2JpYmw+IGYuOyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjcuNSIgdmFsaWQ9InllcyI+UGx1dGFyY2gsIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHh2aWkuIDU8L2JpYmw+Ljwvbm90ZT4gQW5kIG1vc3Qgb2YgYWxsIHdlcmUgaGlzIGNhdmFscnkgaW1wYXRpZW50IGZvciB0aGUgYmF0dGxlLCBzaW5jZSB0aGV5IGhhZCBhIHNwbGVuZGlkIGFycmF5IG9mIHNoaW5pbmcgYXJtb3VyLCB3ZWxsLWZlZCBob3JzZXMsIGFuZCBoYW5kc29tZSBwZXJzb25zLCBhbmQgd2VyZSBpbiBoaWdoIHNwaXJpdHMgdG9vIG9uIGFjY291bnQgb2YgdGhlaXIgbnVtYmVycywgd2hpY2ggd2VyZSBzZXZlbiB0aG91c2FuZCB0byBDYWVzYXIncyBvbmUgdGhvdXNhbmQuIFRoZSBudW1iZXJzIG9mIHRoZSBpbmZhbnRyeSBhbHNvIHdlcmUgdW5lcXVhbCwgc2luY2UgZm9ydHktZml2ZSB0aG91c2FuZCB3ZXJlIGFycmF5ZWQgYWdhaW5zdCB0d2VudHktdHdvIHRob3VzYW5kLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgY2FsbGVkIGhpcyBzb2xkaWVycyB0b2dldGhlciwgYW5kIGFmdGVyIHRlbGxpbmcgdGhlbSB0aGF0IENvcmZpbml1czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGVycm9yIGZvciBDb3JuaWZpY2l1cy48L25vdGU+IHdhcyBuZWFyIHdpdGggdHdvIGxlZ2lvbnMgZm9yIGhpbSwgYW5kIHRoYXQgZmlmdGVlbiBjb2hvcnRzIGJlc2lkZXMgdW5kZXIgQ2FsZW51cyB3ZXJlIHN0YXRpb25lZCBhdCBBdGhlbnMgYW5kIE1lZ2FyYSwgYXNrZWQgdGhlbSB3aGV0aGVyIHRoZXkgd2lzaGVkIHRvIHdhaXQgZm9yIHRoZXNlIHRyb29wcywgb3IgdG8gaGF6YXJkIHRoZSBpc3N1ZSBieSB0aGVtc2VsdmVzLiBUaGVuIHRoZSBzb2xkaWVycyBiZXNvdWdodCBoaW0gd2l0aCBsb3VkIGNyaWVzIG5vdCB0byB3YWl0IGZvciB0aGUgdHJvb3BzLCBidXQgcmF0aGVyIHRvIGNvbnRyaXZlIGFuZCBtYW5vZXV2cmUgdG8gY29tZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIHRoZSBlbmVteSBhcyBzb29uIGFzIHBvc3NpYmxlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBoZSB3YXMgaG9sZGluZyBhIGx1c3RyYXRpb24gYW5kIHJldmlldyBvZiBoaXMgZm9yY2VzIGFuZCBoYWQgc2FjcmlmaWNlZCB0aGUgZmlyc3QgdmljdGltLCB0aGUgc2VlciBhdCBvbmNlIHRvbGQgaGltIHRoYXQgd2l0aGluIHRocmVlIGRheXMgdGhlcmUgd291bGQgYmUgYSBkZWNpc2l2ZSBiYXR0bGUgd2l0aCB0aGUgZW5lbXkuIEFuZCB3aGVuIENhZXNhciBhc2tlZCBoaW0gd2hldGhlciBoZSBhbHNvIHNhdyBpbiB0aGUgdmljdGltcyBhbnkgZmF2b3VyYWJsZSBzaWducyBvZiB0aGUgaXNzdWUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSB0aHlzZWxmLDwvcT4gc2FpZCB0aGUgc2VlciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jYW5zdCBiZXR0ZXIgYW5zd2VyIHRoaXMgcXVlc3Rpb24gZm9yIHRoeXNlbGYuIEZvciB0aGUgZ29kcyBpbmRpY2F0ZSBhIGdyZWF0IGNoYW5nZSBhbmQgcmV2b2x1dGlvbiBvZiB0aGUgcHJlc2VudCBzdGF0dXMgdG8gdGhlIG9wcG9zaXRlLiBUaGVyZWZvcmUsIGlmIHRob3UgdGhpbmtlc3QgdGh5c2VsZiB3ZWxsIG9mZiBhcyBtYXR0ZXJzIHN0YW5kLCBleHBlY3QgdGhlIHdvcnNlIGZvcnR1bmU7IGlmIGJhZGx5IG9mZiwgdGhlIGJldHRlci48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIgb24gdGhlIG5pZ2h0IGJlZm9yZSB0aGUgYmF0dGxlLCBhcyBDYWVzYXIgd2FzIG1ha2luZyB0aGUgcm91bmQgb2YgaGlzIHNlbnRyaWVzIGFib3V0IG1pZG5pZ2h0LCBhIGZpZXJ5IHRvcmNoIHdhcyBzZWVuIGluIHRoZSBoZWF2ZW5zIHdoaWNoIHNlZW1lZCB0byBiZSBjYXJyaWVkIG92ZXIgaGlzIGNhbXAsIGJsYXppbmcgb3V0IGJyaWdodGx5LCBhbmQgdGhlbiB0byBmYWxsIGludG8gUG9tcGV5J3MuIEFuZCBkdXJpbmcgdGhlIG1vcm5pbmcgd2F0Y2ggaXQgd2FzIG5vdGljZWQgdGhhdCB0aGVyZSB3YXMgYWN0dWFsbHkgYSBwYW5pYyBjb25mdXNpb24gYW1vbmcgdGhlIGVuZW15Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4dmlpaS4gMzwvYmlibD4uPC9ub3RlPiBIb3dldmVyLCBDYWVzYXIgZGlkIG5vdCBleHBlY3QgdG8gZmlnaHQgb24gdGhhdCBkYXksPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QXVndXN0IDksIDQ4IEIuQy48L25vdGU+IGJ1dCBiZWdhbiB0byBicmVhayBjYW1wIGZvciBhIG1hcmNoIHRvIFNjb3R1c3NhLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQganVzdCBhcyB0aGUgdGVudHMgaGFkIGJlZW4gc3RydWNrLCBoaXMgc2NvdXRzIHJvZGUgdXAgdG8gaGltIHdpdGggdGlkaW5ncyB0aGF0IHRoZSBlbmVteSB3ZXJlIGNvbWluZyBkb3duIGludG8gdGhlIHBsYWluIGZvciBiYXR0bGUuIEF0IHRoaXMgaGUgd2FzIG92ZXJqb3llZCwgYW5kIGFmdGVyIHByYXllcnMgYW5kIHZvd3MgdG8gdGhlIGdvZHMsIGRyZXcgdXAgaGlzIGxlZ2lvbmFyaWVzIGluIHRocmVlIGRpdmlzaW9ucy4gT3ZlciB0aGUgY2VudHJlIGhlIHB1dCBEb21pdGl1cyBDYWx2aW51cywgd2hpbGUgb2YgdGhlIHdpbmdzIEFudG9ueSBoYWQgb25lIGFuZCBoZSBoaW1zZWxmIHRoZSByaWdodCwgd2hlcmUgaGUgaW50ZW5kZWQgdG8gZmlnaHQgd2l0aCB0aGUgdGVudGggbGVnaW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgc2VlaW5nIHRoYXQgdGhlIGVuZW15J3MgY2F2YWxyeSB3ZXJlIGFycmF5aW5nIHRoZW1zZWx2ZXMgb3ZlciBhZ2FpbnN0IHRoaXMgcG9pbnQsIGFuZCBmZWFyaW5nIHRoZWlyIGJyaWxsaWFudCBhcHBlYXJhbmNlIGFuZCB0aGVpciBudW1iZXJzLCBoZSBvcmRlcmVkIHNpeCBjb2hvcnRzIGZyb20gdGhlIGZ1cnRoZXJtb3N0IGxpbmVzIHRvIGNvbWUgcm91bmQgdG8gaGltIHVub2JzZXJ2ZWQsIGFuZCBzdGF0aW9uZWQgdGhlbSBiZWhpbmQgaGlzIHJpZ2h0IHdpbmcsIHRlYWNoaW5nIHRoZW0gd2hhdCB0aGV5IHdlcmUgdG8gZG8gd2hlbiB0aGUgZW5lbXkncyBob3JzZW1lbiBhdHRhY2tlZC4gUG9tcGV5IGhhZCBvbmUgb2YgaGlzIHdpbmdzIGhpbXNlbGYgYW5kIERvbWl0aXVzIHRoZSBsZWZ0LCB3aGlsZSBTY2lwaW8sIFBvbXBleSdzIGZhdGhlci1pbi1sYXcsIGNvbW1hbmRlZCB0aGUgY2VudHJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGlzIGhvcnNlbWVuIGFsbCBjcm93ZGVkIHRvIHRoZSBsZWZ0IHdpbmcsIGludGVuZGluZyB0byBlbmNpcmNsZSB0aGUgZW5lbXkncyByaWdodCBhbmQgbWFrZSBhIGNvbXBsZXRlIHJvdXQgYWJvdXQgdGhlIGNvbW1hbmRlciBoaW1zZWxmOyBmb3IgdGhleSB0aG91Z2h0IHRoYXQgbm8gbGVnaW9uYXJ5IGFycmF5LCBob3dldmVyIGRlZXAsIGNvdWxkIHJlc2lzdCB0aGVtLCBidXQgdGhhdCB3aGVuIHNvIG1hbnkgaG9yc2VtZW4gbWFkZSBhbiBvbnNldCB0b2dldGhlciB0aGUgZW5lbXkgd291bGQgYmUgdXR0ZXJseSBicm9rZW4gYW5kIGNydXNoZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHhpeC4gMS0zPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGJvdGggc2lkZXMgd2VyZSBhYm91dCB0byBzb3VuZCB0aGUgY2hhcmdlLCBQb21wZXkgb3JkZXJlZCBoaXMgbGVnaW9uYXJpZXMgdG8gc3RhbmQgd2l0aCBhcm1zIGF0IHRoZSByZWFkeSBhbmQgYXdhaXQgaW4gY2xvc2UgYXJyYXkgdGhlIG9uc2V0IG9mIHRoZSBlbmVteSB1bnRpbCB0aGV5IHdlcmUgd2l0aGluIGphdmVsaW4gY2FzdC4gQnV0IENhZXNhciBzYXlzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CgkJCQkJICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gQy48L3RpdGxlPiBpaWkuIDkyLjwvYmlibD4KCQkJCSAgICAgICAgPC9ub3RlPiB0aGF0IGhlcmUgdG9vIFBvbXBleSBtYWRlIGEgbWlzdGFrZSwgbm90IGtub3dpbmcgdGhhdCB0aGUgaW5pdGlhbCBjbGFzaCB3aXRoIGFsbCB0aGUgaW1wZXR1cyBvZiBydW5uaW5nIGFkZHMgZm9yY2UgdG8gdGhlIGJsb3dzIGFuZCBmaXJlcyB0aGUgY291cmFnZSwgd2hpY2ggZXZlcnl0aGluZyB0aGVuIGNvbnNwaXJlcyB0byBmYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIENhZXNhciBoaW1zZWxmIHdhcyBhYm91dCB0byBtb3ZlIGhpcyBsaW5lcyBvZiBsZWdpb25hcmllcywgYW5kIHdhcyBhbHJlYWR5IGdvaW5nIGZvcndhcmQgaW50byBhY3Rpb24sIGhlIHNhdyBmaXJzdCBvbmUgb2YgaGlzIGNlbnR1cmlvbnMsIGEgbWFuIGV4cGVyaWVuY2VkIGluIHdhciBhbmQgZmFpdGhmdWwgdG8gaGltLCBlbmNvdXJhZ2luZyBoaXMgbWVuIGFuZCBjaGFsbGVuZ2luZyB0aGVtIHRvIHZpZSB3aXRoIGhpbSBpbiBwcm93ZXNzLiBIaW0gQ2Flc2FyIGFkZHJlc3NlZCBieSBuYW1lIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhaXVzIENyYXNzaW5pdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQ2Flc2FyJ3MgdmVyc2lvbiBvZiB0aGlzIGVwaXNvZGUgCgkJCQkJKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICA8dGl0bGU+Qi5DLjwvdGl0bGU+IGlpaS4gOTE8L2JpYmw+IGFuZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjk5IiB2YWxpZD0ieWVzIj45OTwvYmlibD4pLCAKCQkJCQl0aGUgbmFtZSBpcyBDcmFzdGludXMuPC9ub3RlPiB3aGF0IGFyZSBvdXIgaG9wZXMsIGFuZCBob3cgZG9lcyBvdXIgY29uZmlkZW5jZSBzdGFuZD88L3E+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIENyYXNzaW5pdXMsIHN0cmV0Y2hpbmcgZm9ydGggaGlzIHJpZ2h0IGhhbmQsIHNhaWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2Ugc2hhbGwgd2luIGEgZ2xvcmlvdXMgdmljdG9yeSwgTyBDYWVzYXIsIGFuZCB0aG91IHNoYWx0IHByYWlzZSBtZSB0by1kYXksIHdoZXRoZXIgSSBhbSBhbGl2ZSBvciBkZWFkPC9xPiBTbyBzYXlpbmcsIGhlIHBsdW5nZWQgZm9yZW1vc3QgaW50byB0aGUgZW5lbXkgYXQgZnVsbCBzcGVlZCwgY2FycnlpbmcgYWxvbmcgd2l0aCBoaW0gdGhlIG9uZSBodW5kcmVkIGFuZCB0d2VudHkgc29sZGllcnMgdW5kZXIgaGlzIGNvbW1hbmQuIEJ1dCBhZnRlciBjdXR0aW5nIGhpcyB3YXkgdGhyb3VnaCB0aGUgZmlyc3QgcmFuaywgYW5kIHdoaWxlIGhlIHdhcyBmb3JnaW5nIG9ud2FyZHMgd2l0aCBncmVhdCBzbGF1Z2h0ZXIsIGhlIHdhcyBiZWF0ZW4gYmFjayBieSB0aGUgdGhydXN0IG9mIGEgc3dvcmQgdGhyb3VnaCBoaXMgbW91dGgsIGFuZCB0aGUgcG9pbnQgb2YgdGhlIHN3b3JkIGFjdHVhbGx5IGNhbWUgb3V0IGF0IHRoZSBiYWNrIG9mIGhpcyBuZWNrLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNzEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHh4aS4gMS0zPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIHRoZSBpbmZhbnRyeSBoYWQgdGh1cyBjbGFzaGVkIHRvZ2V0aGVyIGluIHRoZSBjZW50cmUgYW5kIHdlcmUgZmlnaHRpbmcsIFBvbXBleSdzIGNhdmFscnkgcm9kZSBwcm91ZGx5IHVwIGZyb20gdGhlIHdpbmcgYW5kIGRlcGxveWVkIHRoZWlyIHNxdWFkcm9ucyB0byBlbnZlbG9wZSB0aGUgZW5lbXkncyByaWdodDsgYW5kIGJlZm9yZSB0aGV5IGNvdWxkIGF0dGFjaywgdGhlIGNvaG9ydHMgcmFuIG91dCBmcm9tIHdoZXJlIENhZXNhciB3YXMgcG9zdGVkLCBub3QgaHVybGluZyB0aGVpciBqYXZlbGlucywgYXMgdXN1YWwsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm5vciB5ZXQgc3RhYmJpbmcgdGhlIHRoaWdocyBhbmQgbGVncyBvZiB0aGVpciBlbmVtaWVzIHdpdGggdGhlbSwgYnV0IGFpbWluZyB0aGVtIGF0IHRoZWlyIGV5ZXMgYW5kIHdvdW5kaW5nIHRoZWlyIGZhY2VzLiBUaGV5IGhhZCBiZWVuIGluc3RydWN0ZWQgdG8gZG8gdGhpcyBieSBDYWVzYXIsIHdobyBleHBlY3RlZCB0aGF0IG1lbiBsaXR0bGUgY29udmVyc2FudCB3aXRoIHdhcnMgb3Igd291bmRzLCBidXQgeW91bmcsIGFuZCBwbHVtaW5nIHRoZW1zZWx2ZXMgb24gdGhlaXIgeW91dGhmdWwgYmVhdXR5LCB3b3VsZCBkcmVhZCBzdWNoIHdvdW5kcyBlc3BlY2lhbGx5LCBhbmQgd291bGQgbm90IHN0YW5kIHRoZWlyIGdyb3VuZCwgZmVhcmluZyBub3Qgb25seSB0aGVpciBwcmVzZW50IGRhbmdlciwgYnV0IGFsc28gdGhlaXIgZnV0dXJlIGRpc2ZpZ3VyZW1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIHdhcyB3aGF0IGFjdHVhbGx5IGNhbWUgdG8gcGFzczsgZm9yIHRoZXkgY291bGQgbm90IGVuZHVyZSB0aGUgdXB3YXJkIHRocnVzdCBvZiB0aGUgamF2ZWxpbnMsIG5vciBkaWQgdGhleSBldmVuIHZlbnR1cmUgdG8gbG9vayB0aGUgd2VhcG9uIGluIHRoZSBmYWNlLCBidXQgdHVybmVkIHRoZWlyIGhlYWRzIGF3YXkgYW5kIGNvdmVyZWQgdGhlbSB1cCB0byBzcGFyZSB0aGVpciBmYWNlcy4gQW5kIGZpbmFsbHksIGhhdmluZyB0aHVzIHRocm93biB0aGVtc2VsdmVzIGludG8gY29uZnVzaW9uLCB0aGV5IHR1cm5lZCBhbmQgZmxlZCBtb3N0IHNoYW1lZnVsbHksIHRoZXJlYnkgcnVpbmluZyBldmVyeXRoaW5nLiBGb3IgdGhlIGNvbnF1ZXJvcnMgb2YgdGhlIGhvcnNlbWVuIGF0IG9uY2UgZW5jaXJjbGVkIHRoZSBpbmZhbnRyeSwgZmVsbCB1cG9uIHRoZWlyIHJlYXIsIGFuZCBiZWdhbiB0byBjdXQgdGhlbSB0byBwaWVjZXMuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gUG9tcGV5LCBvbiB0aGUgb3RoZXIgd2luZywgc2F3IGhpcyBob3JzZW1lbiBzY2F0dGVyZWQgaW4gZmxpZ2h0LCBoZSB3YXMgbm8gbG9uZ2VyIHRoZSBzYW1lIG1hbiwgbm9yIHJlbWVtYmVyZWQgdGhhdCBoZSB3YXMgUG9tcGV5IHRoZSBHcmVhdCwgYnV0IG1vcmUgbGlrZSBvbmUgd2hvbSBIZWF2ZW4gaGFzIHJvYmJlZCBvZiBoaXMgd2l0cyB0aGFuIGFueXRoaW5nIGVsc2UsIGhlIHdlbnQgb2ZmIHdpdGhvdXQgYSB3b3JkIHRvIGhpcyB0ZW50LCBzYXQgZG93biB0aGVyZSwgYW5kIGF3YWl0ZWQgd2hhdCB3YXMgdG8gY29tZSwgdW50aWwgaGlzIGZvcmNlcyB3ZXJlIGFsbCByb3V0ZWQgYW5kIHRoZSBlbmVteSB3ZXJlIGFzc2FpbGluZyBoaXMgcmFtcGFydHMgYW5kIGZpZ2h0aW5nIHdpdGggdGhlaXIgZGVmZW5kZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGhlIGNhbWUgdG8gaGlzIHNlbnNlcywgYXMgaXQgd2VyZSwgYW5kIHdpdGggdGhpcyBvbmUgZWphY3VsYXRpb24sIGFzIHRoZXkgc2F5LCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoYXQsIGV2ZW4gdG8gbXkgcXVhcnRlcnM/PC9xPiB0b29rIG9mZiBoaXMgZmlnaHRpbmcgYW5kIGdlbmVyYWwncyBkcmVzcywgcHV0IG9uIG9uZSBzdWl0YWJsZSBmb3IgYSBmdWdpdGl2ZSwgYW5kIHN0b2xlIGF3YXkuIFdoYXQgaGlzIHN1YnNlcXVlbnQgZm9ydHVuZXMgd2VyZSwgYW5kIGhvdyBoZSBkZWxpdmVyZWQgaGltc2VsZiBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgRWd5cHRpYW5zIGFuZCB3YXMgbXVyZGVyZWQsIEkgc2hhbGwgdGVsbCBpbiBoaXMgTGlmZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDc3LjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXJzIGx4eHZpaS48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA4MC4xIiB2YWxpZD0ieWVzIj5seHh4PC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2Flc2FyLCB3aGVuIGhlIHJlYWNoZWQgUG9tcGV5J3MgcmFtcGFydHMgYW5kIHNhdyB0aG9zZSBvZiB0aGUgZW5lbXkgd2hvIHdlcmUgYWxyZWFkeSBseWluZyBkZWFkIHRoZXJlIGFuZCB0aG9zZSB3aG8gd2VyZSBzdGlsbCBmYWxsaW5nLCBzYWlkIHdpdGggYSBncm9hbjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGV5IHdvdWxkIGhhdmUgaXQgc287IHRoZXkgYnJvdWdodCBtZSB0byBzdWNoIGEgcGFzcyB0aGF0IGlmIEksIENhaXVzIENhZXNhciwgYWZ0ZXIgd2FnaW5nIHN1Y2Nlc3NmdWxseSB0aGUgZ3JlYXRlc3Qgd2FycywgaGFkIGRpc21pc3NlZCBteSBmb3JjZXMsIEkgc2hvdWxkIGhhdmUgYmVlbiBjb25kZW1uZWQgaW4gdGhlaXIgY291cnRzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5Ib2Mgdm9sdWVydW50OyB0YW50aXMgcmVidXMgZ2VzdGlzIEdhaXVzIENhZXNhciBjb25kZW1uYXR1cyBlc3NlbSwgbmlzaSBhYiBleGVyY2l0dSBhdXhpbGl1bSBwZXRpc3NlbTwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDMwIiB2YWxpZD0ieWVzIj5TdWV0b25pdXMsIDx0aXRsZT5EaXYuIEp1bC48L3RpdGxlPiAzMDwvYmlibD4pLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXNpbml1cyBQb2xsaW8gc2F5cyB0aGF0IHRoZXNlIHdvcmRzLCB3aGljaCBDYWVzYXIgYWZ0ZXJ3YXJkcyB3cm90ZSBkb3duIGluIEdyZWVrLCB3ZXJlIHV0dGVyZWQgYnkgaGltIGluIExhdGluIGF0IHRoZSB0aW1lOyBoZSBhbHNvIHNheXMgdGhhdCBtb3N0IG9mIHRoZSBzbGFpbiB3ZXJlIHNlcnZhbnRzIHdobyB3ZXJlIGtpbGxlZCBhdCB0aGUgdGFraW5nIG9mIHRoZSBjYW1wLCBhbmQgdGhhdCBub3QgbW9yZSB0aGFuIHNpeCB0aG91c2FuZCBzb2xkaWVycyBmZWxsLiBNb3N0IG9mIHRob3NlIHdobyB3ZXJlIHRha2VuIGFsaXZlIENhZXNhciBpbmNvcnBvcmF0ZWQgaW4gaGlzIGxlZ2lvbnMsIGFuZCB0byBtYW55IG1lbiBvZiBwcm9taW5lbmNlIGhlIGdyYW50ZWQgaW1tdW5pdHkuIE9uZSBvZiB0aGVzZSB3YXMgQnJ1dHVzLCB3aG8gYWZ0ZXJ3YXJkcyBzbGV3IGhpbS4gQ2Flc2FyIHdhcyBkaXN0cmVzc2VkLCB3ZSBhcmUgdG9sZCwgd2hlbiBCcnV0dXMgd2FzIG5vdCB0byBiZSBmb3VuZCwgYnV0IHdoZW4gaGUgd2FzIGJyb3VnaHQgaW50byBoaXMgcHJlc2VuY2Ugc2FmZSBhbmQgc291bmQsIHdhcyBwbGVhc2VkIGJleW9uZCBtZWFzdXJlLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNDciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3ZXJlIG1hbnkgcG9ydGVudHMgb2YgdGhlIHZpY3RvcnksIGJ1dCB0aGUgbW9zdCByZW1hcmthYmxlIG9uZSBvbiByZWNvcmQgaXMgdGhhdCB3aGljaCB3YXMgc2VlbiBhdCBUcmFsbGVzLiBJbiB0aGF0IGNpdHkncyB0ZW1wbGUgb2YgVmljdG9yeSB0aGVyZSBzdG9vZCBhIHN0YXR1ZSBvZiBDYWVzYXIsIGFuZCB0aGUgZ3JvdW5kIGFyb3VuZCBpdCB3YXMgaXRzZWxmIG5hdHVyYWxseSBmaXJtLCBhbmQgd2FzIHBhdmVkIHdpdGggaGFyZCBzdG9uZTsgeWV0IGZyb20gdGhpcyBpdCBpcyBzYWlkIHRoYXQgYSBwYWxtLXRyZWUgc2hvdCB1cCBhdCB0aGUgYmFzZSBvZiB0aGUgc3RhdHVlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjEwNSIgdmFsaWQ9InllcyI+Q2Flc2FyIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGlpaS4gMTA1PC9iaWJsPiBhZCBmaW4uPC9ub3RlPiBNb3Jlb3ZlciwgYXQgUGF0YXZpdW0sIENhaXVzIENvcm5lbGl1cywgYSBtYW4gaW4gcmVwdXRlIGFzIGEgc2VlciwgYSBmZWxsb3cgY2l0aXplbiBhbmQgYWNxdWFpbnRhbmNlIG9mIExpdnkgdGhlIGhpc3RvcmlhbiwgY2hhbmNlZCB0aGF0IGRheSB0byBiZSBzaXR0aW5nIGluIHRoZSBwbGFjZSBvZiBhdWd1cnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0byBiZWdpbiB3aXRoLCBhY2NvcmRpbmcgdG8gTGl2eSwgaGUgZGlzY2VybmVkIHRoZSB0aW1lIG9mIHRoZSBiYXR0bGUsIGFuZCBzYWlkIHRvIHRob3NlIHByZXNlbnQgdGhhdCBldmVuIHRoZW4gdGhlIGV2ZW50IHdhcyBpbiBwcm9ncmVzcyBhbmQgdGhlIG1lbiB3ZXJlIGdvaW5nIGludG8gYWN0aW9uLiBBbmQgd2hlbiBoZSBsb29rZWQgYWdhaW4gYW5kIG9ic2VydmVkIHRoZSBzaWducywgaGUgc3ByYW5nIHVwIGluIGEgcmFwdHVyZSBjcnlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgdmljdG9yaW91cywgTyBDYWVzYXIhPC9xPiBUaGUgYnlzdGFuZGVycyBiZWluZyBhbWF6ZWQsIGhlIHRvb2sgdGhlIGNoYXBsZXQgZnJvbSBoaXMgaGVhZCBhbmQgZGVjbGFyZWQgd2l0aCBhbiBvYXRoIHRoYXQgaGUgd291bGQgbm90IHB1dCBpdCBvbiBhZ2FpbiB1bnRpbCB0aGUgZXZlbnQgaGFkIGJvcm5lIHdpdG5lc3MgdG8gaGlzIGFydC4gQXQgYW55IHJhdGUsIExpdnkgaW5zaXN0cyB0aGF0IHRoaXMgd2FzIHNvLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIEJvb2sgY3hpLCB3aGljaCBpcyBsb3N0Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBnYXZlIHRoZSBUaGVzc2FsaWFucyB0aGVpciBmcmVlZG9tLCB0byBjb21tZW1vcmF0ZSBoaXMgdmljdG9yeSwgYW5kIHRoZW4gcHVyc3VlZCBQb21wZXk7IHdoZW4gaGUgcmVhY2hlZCBBc2lhIGhlIG1hZGUgdGhlIENuaWRpYW5zIGFsc28gZnJlZSwgdG8gcGxlYXNlIFRoZW9wb21wdXMgdGhlIGNvbGxlY3RvciBvZiBmYWJsZXMsIGFuZCBmb3IgYWxsIHRoZSBpbmhhYml0YW50cyBvZiBBc2lhIHJlbWl0dGVkIGEgdGhpcmQgb2YgdGhlaXIgdGF4ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFycml2aW5nIGF0IEFsZXhhbmRyaWEganVzdCBhZnRlciBQb21wZXkncyBkZWF0aCwgaGUgdHVybmVkIGF3YXkgaW4gaG9ycm9yIGZyb20gVGhlb2RvdHVzIGFzIGhlIHByZXNlbnRlZCB0aGUgaGVhZCBvZiBQb21wZXksIGJ1dCBoZSBhY2NlcHRlZCBQb21wZXkncyBzZWFsLXJpbmcsIGFuZCBzaGVkIHRlYXJzIG92ZXIgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gODAuNSIgdmFsaWQ9InllcyI+UG9tcGV5LCBseHh4LiA1PC9iaWJsPi48L25vdGU+IE1vcmVvdmVyLCBhbGwgdGhlIGNvbXBhbmlvbnMgYW5kIGludGltYXRlcyBvZiBQb21wZXkgd2hvIGhhZCBiZWVuIGNhcHR1cmVkIGJ5IHRoZSBraW5nIGFzIHRoZXkgd2FuZGVyZWQgb3ZlciB0aGUgY291bnRyeSwgaGUgdHJlYXRlZCB3aXRoIGtpbmRuZXNzIGFuZCBhdHRhY2hlZCB0aGVtIHRvIGhpbXNlbGYuIEFuZCB0byBoaXMgZnJpZW5kcyBpbiBSb21lIGhlIHdyb3RlIHRoYXQgdGhpcyB3YXMgdGhlIGdyZWF0ZXN0IGFuZCBzd2VldGVzdCBwbGVhc3VyZSB0aGF0IGhlIGRlcml2ZWQgZnJvbSBoaXMgdmljdG9yeSwgbmFtZWx5LCBmcm9tIHRpbWUgdG8gdGltZSB0byBzYXZlIHRoZSBsaXZlcyBvZiBmZWxsb3cgY2l0aXplbnMgd2hvIGhhZCBmb3VnaHQgYWdhaW5zdCBoaW0uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgd2FyIGluIEVneXB0LCBzb21lIHNheSB0aGF0IGl0IHdhcyBub3QgbmVjZXNzYXJ5LCBidXQgZHVlIHRvIENhZXNhcidzIHBhc3Npb24gZm9yIENsZW9wYXRyYSwgYW5kIHRoYXQgaXQgd2FzIGluZ2xvcmlvdXMgYW5kIGZ1bGwgb2YgcGVyaWwgZm9yIGhpbS4gQnV0IG90aGVycyBibGFtZSB0aGUga2luZydzIHBhcnR5IGZvciBpdCwgYW5kIGVzcGVjaWFsbHkgdGhlIGV1bnVjaCBQb3RoZWludXMsIHdobyBoYWQgbW9zdCBpbmZsdWVuY2UgYXQgY291cnQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNzcuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHh4dmlpLiAyPC9iaWJsPi48L25vdGU+IGFuZCBoYWQgcmVjZW50bHkga2lsbGVkIFBvbXBleTsgaGUgaGFkIGFsc28gZHJpdmVuIENsZW9wYXRyYSBmcm9tIHRoZSBjb3VudHJ5LCBhbmQgd2FzIG5vdyBzZWNyZXRseSBwbG90dGluZyBhZ2FpbnN0IENhZXNhci4gT24gdGhpcyBhY2NvdW50IHRoZXkgc2F5IHRoYXQgZnJvbSB0aGlzIHRpbWUgb24gQ2Flc2FyIHBhc3NlZCB3aG9sZSBuaWdodHMgYXQgZHJpbmtpbmcgcGFydGllcyBpbiBvcmRlciB0byBwcm90ZWN0IGhpbXNlbGYuIEJ1dCBpbiBoaXMgb3BlbiBhY3RzIGFsc28gUG90aGVpbnVzIHdhcyB1bmJlYXJhYmxlLCBzaW5jZSBoZSBzYWlkIGFuZCBkaWQgbWFueSB0aGluZ3MgdGhhdCB3ZXJlIGludmlkaW91cyBhbmQgaW5zdWx0aW5nIHRvIENhZXNhci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGluc3RhbmNlLCB3aGVuIHRoZSBzb2xkaWVycyBoYWQgdGhlIG9sZGVzdCBhbmQgd29yc3QgZ3JhaW4gbWVhc3VyZWQgb3V0IHRvIHRoZW0sIGhlIGJhZGUgdGhlbSBwdXQgdXAgd2l0aCBpdCBhbmQgYmUgY29udGVudCwgc2luY2UgdGhleSB3ZXJlIGVhdGluZyB3aGF0IGJlbG9uZ2VkIHRvIG90aGVyczsgYW5kIGF0IHRoZSBzdGF0ZSBzdXBwZXJzIGhlIHVzZWQgd29vZGVuIGFuZCBlYXJ0aGVuIGRpc2hlcywgb24gdGhlIGdyb3VuZCB0aGF0IENhZXNhciBoYWQgdGFrZW4gYWxsIHRoZSBnb2xkIGFuZCBzaWx2ZXIgd2FyZSBpbiBwYXltZW50IG9mIGEgZGVidC4gRm9yIHRoZSBmYXRoZXIgb2YgdGhlIHByZXNlbnQga2luZyBvd2VkIENhZXNhciBzZXZlbnRlZW4gbWlsbGlvbiBmaXZlIGh1bmRyZWQgdGhvdXNhbmQgZHJhY2htYXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RHVyaW5nIENhZXNhcidzIGNvbnN1bHNoaXAgKDU5IEIuQy4pIFB0b2xlbXkgQXVsZXRlcyB3YXMgZGVjbGFyZWQgYSBmcmllbmQgYW5kIGFsbHkgb2YgdGhlIFJvbWFucy4gVG8gc2VjdXJlIHRoaXMgaG9ub3VyIGhlIGJvdGggZ2F2ZSBhbmQgcHJvbWlzZWQgbW9uZXkgdG8gdGhlIHN0YXRlLjwvbm90ZT4gb2Ygd2hpY2ggQ2Flc2FyIGhhZCBmb3JtZXJseSByZW1pdHRlZCBhIHBhcnQgdG8gaGlzIGNoaWxkcmVuLCBidXQgbm93IGRlbWFuZGVkIHBheW1lbnQgb2YgdGVuIG1pbGxpb25zIGZvciB0aGUgc3VwcG9ydCBvZiBoaXMgYXJteS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiwgaG93ZXZlciwgUG90aGVpbnVzIGJhZGUgaGltIGdvIGF3YXkgbm93IGFuZCBhdHRlbmQgdG8gaGlzIGdyZWF0IGFmZmFpcnMsIGFzc3VyaW5nIGhpbSB0aGF0IGxhdGVyIGhlIHdvdWxkIGdldCBoaXMgbW9uZXkgd2l0aCB0aGFua3MsIENhZXNhciByZXBsaWVkIHRoYXQgaGUgaGFkIG5vIG5lZWQgd2hhdGV2ZXIgb2YgRWd5cHRpYW5zIGFzIGFkdmlzZXJzLCBhbmQgc2VjcmV0bHkgc2VudCBmb3IgQ2xlb3BhdHJhIGZyb20gdGhlIGNvdW50cnkuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIENsZW9wYXRyYSwgdGFraW5nIG9ubHkgQXBvbGxvZG9ydXMgdGhlIFNpY2lsaWFuIGZyb20gYW1vbmcgaGVyIGZyaWVuZHMsIGVtYmFya2VkIGluIGEgbGl0dGxlIHNraWZmIGFuZCBsYW5kZWQgYXQgdGhlIHBhbGFjZSB3aGVuIGl0IHdhcyBhbHJlYWR5IGdldHRpbmcgZGFyazsgYW5kIGFzIGl0IHdhcyBpbXBvc3NpYmxlIHRvIGVzY2FwZSBub3RpY2Ugb3RoZXJ3aXNlLCBzaGUgc3RyZXRjaGVkIGhlcnNlbGYgYXQgZnVsbCBsZW5ndGggaW5zaWRlIGEgYmVkLXNhY2ssIHdoaWxlIEFwb2xsb2RvcnVzIHRpZWQgdGhlIGJlZHNhY2sgdXAgd2l0aCBhIGNvcmQgYW5kIGNhcnJpZWQgaXQgaW5kb29ycyB0byBDYWVzYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBieSB0aGlzIGRldmljZSBvZiBDbGVvcGF0cmEncywgaXQgaXMgc2FpZCwgdGhhdCBDYWVzYXIgd2FzIGZpcnN0IGNhcHRpdmF0ZWQsIGZvciBzaGUgc2hvd2VkIGhlcnNlbGYgdG8gYmUgYSBib2xkIGNvcXVldHRlLCBhbmQgc3VjY3VtYmluZyB0byB0aGUgY2hhcm0gb2YgZnVydGhlciBpbnRlcmNvdXJzZSB3aXRoIGhlciwgaGUgcmVjb25jaWxlZCBoZXIgdG8gaGVyIGJyb3RoZXIgb24gdGhlIGJhc2lzIG9mIGEgam9pbnQgc2hhcmUgd2l0aCBoaW0gaW4gdGhlIHJveWFsIHBvd2VyLiBUaGVuLCBhcyBldmVyeWJvZHkgd2FzIGZlYXN0aW5nIHRvIGNlbGVicmF0ZSB0aGUgcmVjb25jaWxpYXRpb24sIGEgc2xhdmUgb2YgQ2Flc2FyJ3MsIGhpcyBiYXJiZXIsIHdobyBsZWZ0IG5vdGhpbmcgdW5zY3J1dGluaXplZCwgb3dpbmcgdG8gYSB0aW1pZGl0eSBpbiB3aGljaCBoZSBoYWQgbm8gZXF1YWwsIGJ1dCBrZXB0IGhpcyBlYXJzIG9wZW4gYW5kIHdhcyBoZXJlLCB0aGVyZSwgYW5kIGV2ZXJ5d2hlcmUsIHBlcmNlaXZlZCB0aGF0IEFjaGlsbGFzIHRoZSBnZW5lcmFsIGFuZCBQb3RoZWludXMgdGhlIGV1bnVjaCB3ZXJlIGhhdGNoaW5nIGEgcGxvdCBhZ2FpbnN0IENhZXNhci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQ2Flc2FyIGhhZCBmb3VuZCB0aGVtIG91dCwgaGUgc2V0IGEgZ3VhcmQgYWJvdXQgdGhlIGJhbnF1ZXRpbmctaGFsbCwgYW5kIHB1dCBQb3RoZWludXMgdG8gZGVhdGg7IEFjaGlsbGFzLCBob3dldmVyLCBlc2NhcGVkIHRvIGhpcyBjYW1wLCBhbmQgcmFpc2VkIGFib3V0IENhZXNhciBhIHdhciBncmlldm91cyBhbmQgZGlmZmljdWx0IGZvciBvbmUgd2hvIHdhcyBkZWZlbmRpbmcgaGltc2VsZiB3aXRoIHNvIGZldyBmb2xsb3dlcnMgYWdhaW5zdCBzbyBsYXJnZSBhIGNpdHkgYW5kIGFybXkuIEluIHRoaXMgd2FyLCB0byBiZWdpbiB3aXRoLCBDYWVzYXIgZW5jb3VudGVyZWQgdGhlIHBlcmlsIG9mIGJlaW5nIHNodXQgb2ZmIGZyb20gd2F0ZXIsIHNpbmNlIHRoZSBjYW5hbHMgd2VyZSBkYW1tZWQgdXAgYnkgdGhlIGVuZW15OyBpbiB0aGUgc2Vjb25kIHBsYWNlLCB3aGVuIHRoZSBlbmVteSB0cmllZCB0byBjdXQgb2ZmIGhpcyBmbGVldCwgaGUgd2FzIGZvcmNlZCB0byByZXBlbCB0aGUgZGFuZ2VyIGJ5IHVzaW5nIGZpcmUsIGFuZCB0aGlzIHNwcmVhZCBmcm9tIHRoZSBkb2NreWFyZHMgYW5kIGRlc3Ryb3llZCB0aGUgZ3JlYXQgbGlicmFyeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBNdXNldW0sIGZvdW5kZWQgYnkgdGhlIGZpcnN0IFB0b2xlbXkgKG9iLiAyODMgQi5DLikuIFRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgbGlicmFyeSBjYW4gaGF2ZSBiZWVuIG9ubHkgcGFydGlhbC48L25vdGU+OyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhpcmRseSwgd2hlbiBhIGJhdHRsZSBhcm9zZSBhdCBQaGFyb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gaXNsYW5kIG9mZiBBbGV4YW5kcmlhLCBjb25uZWN0ZWQgd2l0aCB0aGUgbWFpbmxhbmQgYnkgYSBtb2xlLCBvciBjYXVzZXdheSwgd2hpY2ggZGl2aWRlZCB0aGUgaGFyYm91ciBpbnRvIHR3byBwYXJ0cy48L25vdGU+IGhlIHNwcmFuZyBmcm9tIHRoZSBtb2xlIGludG8gYSBzbWFsbCBib2F0IGFuZCB0cmllZCB0byBnbyB0byB0aGUgYWlkIG9mIGhpcyBtZW4gaW4gdGhlaXIgc3RydWdnbGUsIGJ1dCB0aGUgRWd5cHRpYW5zIHNhaWxlZCB1cCBhZ2FpbnN0IGhpbSBmcm9tIGV2ZXJ5IHNpZGUsIHNvIHRoYXQgaGUgdGhyZXcgaGltc2VsZiBpbnRvIHRoZSBzZWEgYW5kIHdpdGggZ3JlYXQgZGlmZmljdWx0eSBlc2NhcGVkIGJ5IHN3aW1taW5nLiBBdCB0aGlzIHRpbWUsIHRvbywgaXQgaXMgc2FpZCB0aGF0IGhlIHdhcyBob2xkaW5nIG1hbnkgcGFwZXJzIGluIGhpcyBoYW5kIGFuZCB3b3VsZCBub3QgbGV0IHRoZW0gZ28sIHRob3VnaCBtaXNzaWxlcyB3ZXJlIGZseWluZyBhdCBoaW0gYW5kIGhlIHdhcyBpbW1lcnNlZCBpbiB0aGUgc2VhLCBidXQgaGVsZCB0aGVtIGFib3ZlIHdhdGVyIHdpdGggb25lIGhhbmQgYW5kIHN3YW0gd2l0aCB0aGUgb3RoZXI7IGhpcyBsaXR0bGUgYm9hdCBoYWQgYmVlbiBzdW5rIGF0IHRoZSBvdXRzZXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDQyLjQwIj5EaW8gQ2Fzc2l1cyB4bGlpLiA0MDwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZmluYWxseSwgYWZ0ZXIgdGhlIGtpbmcgaGFkIGdvbmUgYXdheSB0byB0aGUgZW5lbXksIGhlIG1hcmNoZWQgYWdhaW5zdCBoaW0gYW5kIGNvbnF1ZXJlZCBoaW0gaW4gYSBiYXR0bGUgd2hlcmUgbWFueSBmZWxsIGFuZCB0aGUga2luZyBoaW1zZWxmIGRpc2FwcGVhcmVkLiBUaGVuLCBsZWF2aW5nIENsZW9wYXRyYSBvbiB0aGUgdGhyb25lIG9mIEVneXB0IChhIGxpdHRsZSBsYXRlciBzaGUgaGFkIGEgc29uIGJ5IGhpbSB3aG9tIHRoZSBBbGV4YW5kcmlhbnMgY2FsbGVkIENhZXNhcmlvbiksIGhlIHNldCBvdXQgZm9yIFN5cmlhLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNTAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbiBsZWF2aW5nIHRoYXQgY291bnRyeSBhbmQgdHJhdmVyc2luZyBBc2lhLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIEp1bHkgb2YgNDcgQi5DLjwvbm90ZT4gaGUgbGVhcm5lZCB0aGF0IERvbWl0aXVzIGhhZCBiZWVuIGRlZmVhdGVkIGJ5IFBoYXJuYWNlcyB0aGUgc29uIG9mIE1pdGhyaWRhdGVzIGFuZCBoYWQgZmxlZCBmcm9tIFBvbnR1cyB3aXRoIGEgZmV3IGZvbGxvd2VyczsgYWxzbyB0aGF0IFBoYXJuYWNlcywgdXNpbmcgaGlzIHZpY3Rvcnkgd2l0aG91dCBzdGludCwgYW5kIG9jY3VweWluZyBCaXRoeW5pYSBhbmQgQ2FwcGFkb2NpYSwgd2FzIGFpbWluZyB0byBzZWN1cmUgdGhlIGNvdW50cnkgY2FsbGVkIExlc3NlciBBcm1lbmlhLCBhbmQgd2FzIHJvdXNpbmcgdG8gcmV2b2x0IGFsbCB0aGUgcHJpbmNlcyBhbmQgdGV0cmFyY2hzIHRoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCBvbmNlLCB0aGVyZWZvcmUsIENhZXNhciBtYXJjaGVkIGFnYWluc3QgaGltIHdpdGggdGhyZWUgbGVnaW9ucywgZm91Z2h0IGEgZ3JlYXQgYmF0dGxlIHdpdGggaGltIG5lYXIgdGhlIGNpdHkgb2YgWmVsYSwgZHJvdmUgaGltIGluIGZsaWdodCBvdXQgb2YgUG9udHVzLCBhbmQgYW5uaWhpbGF0ZWQgaGlzIGFybXkuIEluIGFubm91bmNpbmcgdGhlIHN3aWZ0bmVzcyBhbmQgZmllcmNlbmVzcyBvZiB0aGlzIGJhdHRsZSB0byBvbmUgb2YgaGlzIGZyaWVuZHMgYXQgUm9tZSwgQW1hbnRpdXMsIENhZXNhciB3cm90ZSB0aHJlZSB3b3JkcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhbWUsIHNhdywgY29ucXVlcmVkPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gbGFuZz0ibGEiPlZlbmksIHZpZGksIHZpY2kuPC9mb3JlaWduPiBBY2NvcmRpbmcgdG8gU3VldG9uaXVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiAzNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EaXYuIEp1bC48L3RpdGxlPiAzNzwvYmlibD4pLCB0aGUgd29yZHMgd2VyZSBkaXNwbGF5ZWQgaW4gQ2Flc2FyJ3MgUG9udGljIHRyaXVtcGguPC9ub3RlPiBJbiBMYXRpbiwgaG93ZXZlciwgdGhlIHdvcmRzIGhhdmUgdGhlIHNhbWUgaW5mbGVjdGlvbmFsIGVuZGluZywgYW5kIHNvIGEgYnJldml0eSB3aGljaCBpcyBtb3N0IGltcHJlc3NpdmUuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIGhlIGNyb3NzZWQgdG8gSXRhbHkgYW5kIHdlbnQgdXAgdG8gUm9tZSwgYXQgdGhlIGNsb3NlIG9mIHRoZSB5ZWFyIGZvciB3aGljaCBoZSBoYWQgYSBzZWNvbmQgdGltZSBiZWVuIGNob3NlbiBkaWN0YXRvciw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc2VuYXRlIG5hbWVkIENhZXNhciBEaWN0YXRvciBmb3IgdGhlIHllYXIgNDcgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGJhdHRsZSBhdCBQaGFyc2FsdXMuPC9ub3RlPiB0aG91Z2ggdGhhdCBvZmZpY2UgaGFkIG5ldmVyIGJlZm9yZSBiZWVuIGZvciBhIHdob2xlIHllYXI7IHRoZW4gZm9yIHRoZSBmb2xsb3dpbmcgeWVhciBoZSB3YXMgcHJvY2xhaW1lZCBjb25zdWwuIE1lbiBzcG9rZSBpbGwgb2YgaGltIGJlY2F1c2UsIGFmdGVyIGhpcyBzb2xkaWVycyBoYWQgbXV0aW5pZWQgYW5kIGtpbGxlZCB0d28gbWVuIG9mIHByYWV0b3JpYW4gcmFuaywgR2FsYmEgYW5kIENvc2Nvbml1cywgaGUgY2Vuc3VyZWQgdGhlbSBvbmx5IHNvIGZhciBhcyB0byBjYWxsIHRoZW0gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jaXRpemVuczwvcT4gd2hlbiBoZSBhZGRyZXNzZWQgdGhlbSwgaW5zdGVhZCBvZiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnNvbGRpZXJzLDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTMuOTMiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlPkIuIEMuPC90aXRsZT4gaWkuIDkzPC9iaWJsPi48L25vdGU+IGFuZCB0aGVuIGdhdmUgZWFjaCBtYW4gYSB0aG91c2FuZCBkcmFjaG1hcyBhbmQgbXVjaCBhbGxvdHRlZCBsYW5kIGluIEl0YWx5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgYWxzbyBjYWx1bW5pYXRlZCBmb3IgdGhlIG1hZG5lc3Mgb2YgRG9sYWJlbGxhLCB0aGUgZ3JlZWQgb2YgQW1hbnRpdXMsIHRoZSBkcnVua2VubmVzcyBvZiBBbnRvbnksIGFuZCBmb3IgdGhlIGZhY3QgdGhhdCBDb3JmaW5pdXMgYnVpbHQgb3ZlciBhbmQgcmVmdXJuaXNoZWQgdGhlIGhvdXNlIG9mIFBvbXBleSBvbiB0aGUgZ3JvdW5kIHRoYXQgaXQgd2FzIG5vdCBnb29kIGVub3VnaCBmb3IgaGltLiBGb3IgYXQgYWxsIHRoZXNlIHRoaW5ncyB0aGUgUm9tYW5zIHdlcmUgZGlzcGxlYXNlZC4gQnV0IG93aW5nIHRvIHRoZSBwb2xpdGljYWwgc2l0dWF0aW9uLCB0aG91Z2ggQ2Flc2FyIHdhcyBub3QgaWdub3JhbnQgb2YgdGhlc2UgdGhpbmdzIGFuZCBkaWQgbm90IGxpa2UgdGhlbSwgaGUgd2FzIGNvbXBlbGxlZCB0byBtYWtlIHVzZSBvZiBzdWNoIGFzc2lzdGFudHMuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBiYXR0bGUgYXQgUGhhcnNhbHVzLCBDYXRvIGFuZCBTY2lwaW8gbWFkZSB0aGVpciBlc2NhcGUgdG8gQWZyaWNhLCBhbmQgdGhlcmUsIHdpdGggdGhlIGFpZCBvZiBLaW5nIEp1YmEsIGNvbGxlY3RlZCBjb25zaWRlcmFibGUgZm9yY2VzLiBDYWVzYXIgdGhlcmVmb3JlIHJlc29sdmVkIHRvIG1ha2UgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZW0uIFNvLCBhYm91dCB0aGUgdGltZSBvZiB0aGUgd2ludGVyIHNvbHN0aWNlLCBoZSBjcm9zc2VkIGludG8gU2ljaWx5LCBhbmQgd2lzaGluZyB0byBjdXQgb2ZmIGF0IG9uY2UgaW4gdGhlIG1pbmRzIG9mIGhpcyBvZmZpY2VycyBhbGwgaG9wZSBvZiBkZWxheWluZyB0aGVyZSBhbmQgd2FzdGluZyB0aW1lLCBoZSBwaXRjaGVkIGhpcyBvd24gdGVudCBvbiB0aGUgc2VhLWJlYWNoLiBXaGVuIGEgZmF2b3VyaW5nIHdpbmQgYXJvc2UsIGhlIGVtYmFya2VkIGFuZCBwdXQgdG8gc2VhIHdpdGggdGhyZWUgdGhvdXNhbmQgaW5mYW50cnkgYW5kIGEgZmV3IGhvcnNlbWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuLCBhZnRlciBsYW5kaW5nIHRoZXNlIHVub2JzZXJ2ZWQsIGhlIHB1dCB0byBzZWEgYWdhaW4sIGJlaW5nIGZ1bGwgb2YgZmVhcnMgZm9yIHRoZSBsYXJnZXIgcGFydCBvZiBoaXMgZm9yY2UsIGFuZCBtZWV0aW5nIHRoZW0gYWZ0ZXIgdGhleSB3ZXJlIGFscmVhZHkgYXQgc2VhLCBoZSBjb25kdWN0ZWQgYWxsIGludG8gY2FtcC48L3A+CiAgICAgICAgIDxwPk9uIGxlYXJuaW5nIHRoYXQgdGhlIGVuZW15IHdlcmUgZW1ib2xkZW5lZCBieSBhbiBhbmNpZW50IG9yYWNsZSB0byB0aGUgZWZmZWN0IHRoYXQgaXQgd2FzIGFsd2F5cyB0aGUgcHJlcm9nYXRpdmUgb2YgdGhlIGZhbWlseSBvZiB0aGUgU2NpcGlvcyB0byBjb25xdWVyIGluIEFmcmljYSwgaGUgZWl0aGVyIGZsb3V0ZWQgaW4gcGxlYXNhbnRyeSB0aGUgU2NpcGlvIHdobyBjb21tYW5kZWQgdGhlIGVuZW15LCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5vciBlbHNlIHRyaWVkIGluIGdvb2QgZWFybmVzdCB0byBhcHByb3ByaWF0ZSB0byBoaW1zZWxmIHRoZSBvbWVuLCBpdCBpcyBoYXJkIHRvIHNheSB3aGljaC4gSGUgaGFkIHVuZGVyIGhpbSwgbmFtZWx5LCBhIG1hbiB3aG8gb3RoZXJ3aXNlIHdhcyBhIGNvbnRlbXB0aWJsZSBub2JvZHksIGJ1dCBiZWxvbmdlZCB0byB0aGUgZmFtaWx5IG9mIHRoZSBBZnJpY2FuaSwgYW5kIHdhcyBjYWxsZWQgU2NpcGlvIFNhbGx1c3Rpby4gVGhpcyBtYW4gQ2Flc2FyIHB1dCBpbiB0aGUgZm9yZWZyb250IG9mIGhpcyBiYXR0bGVzIGFzIGlmIGNvbW1hbmRlciBvZiB0aGUgYXJteSwgYmVpbmcgY29tcGVsbGVkIHRvIGF0dGFjayB0aGUgZW5lbXkgZnJlcXVlbnRseSBhbmQgdG8gZm9yY2UgdGhlIGZpZ2h0aW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlcmUgd2FzIG5laXRoZXIgc3VmZmljaWVudCBmb29kIGZvciBoaXMgbWVuIG5vciBmb2RkZXIgZm9yIGhpcyBiZWFzdHMgb2YgYnVyZGVuLCBuYXksIHRoZXkgd2VyZSBmb3JjZWQgdG8gZmVlZCB0aGVpciBob3JzZXMgb24gc2VhLXdlZWQsIHdoaWNoIHRoZXkgd2FzaGVkIGZyZWUgb2YgaXRzIHNhbHQgYW5kIG1peGVkIHdpdGggYSBsaXR0bGUgZ3Jhc3MgdG8gc3dlZXRlbiBpdC4gRm9yIHRoZSBOdW1pZGlhbnMgc2hvd2VkIHRoZW1zZWx2ZXMgZXZlcnl3aGVyZSBpbiBncmVhdCBudW1iZXJzIGFuZCBzcGVlZHksIGFuZCBjb250cm9sbGVkIHRoZSBjb3VudHJ5LiBJbmRlZWQsIHdoaWxlIENhZXNhcidzIGhvcnNlbWVuIHdlcmUgb25jZSBvZmYgZHV0eSAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz4oYSBMaWJ5YW4gd2FzIHNob3dpbmcgdGhlbSBob3cgaGUgY291bGQgZGFuY2UgYW5kIHBsYXkgdGhlIGZsdXRlIGF0IHRoZSBzYW1lIHRpbWUgaW4gYW4gYXN0b25pc2hpbmcgbWFubmVyLCBhbmQgdGhleSBoYWQgY29tbWl0dGVkIHRoZWlyIGhvcnNlcyB0byB0aGUgc2xhdmVzIGFuZCB3ZXJlIHNpdHRpbmcgZGVsaWdodGVkIG9uIHRoZSBncm91bmQpLCB0aGUgZW5lbXkgc3VkZGVubHkgc3Vycm91bmRlZCBhbmQgYXR0YWNrZWQgdGhlbSwga2lsbGVkIHNvbWUgb2YgdGhlbSwgYW5kIGZvbGxvd2VkIGhhcmQgdXBvbiB0aGUgaGVlbHMgb2YgdGhlIHJlc3QgYXMgdGhleSB3ZXJlIGRyaXZlbiBoZWFkbG9uZyBpbnRvIGNhbXAuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiBDYWVzYXIgaGltc2VsZiBhbmQgd2l0aCBoaW0gQXNpbml1cyBQb2xsaW8sIGhhZCBub3QgY29tZSBmcm9tIHRoZSByYW1wYXJ0cyB0byB0aGVpciBhaWQgYW5kIGNoZWNrZWQgdGhlaXIgZmxpZ2h0LCB0aGUgd2FyIHdvdWxkIGhhdmUgYmVlbiBhdCBhbiBlbmQuIE9uIG9uZSBvY2Nhc2lvbiwgdG9vLCBpbiBhbm90aGVyIGJhdHRsZSwgdGhlIGVuZW15IGdvdCB0aGUgYWR2YW50YWdlIGluIHRoZSBlbmNvdW50ZXIsIGFuZCBoZXJlIGl0IGlzIHNhaWQgdGhhdCBDYWVzYXIgc2VpemVkIGJ5IHRoZSBuZWNrIHRoZSBmdWdpdGl2ZSBzdGFuZGFyZC1iZWFyZXIsIGZhY2VkIGhpbSBhYm91dCwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WW9uZGVyIGlzIHRoZSBlbmVteS48L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyIFNjaXBpbyB3YXMgZW5jb3VyYWdlZCBieSB0aGVzZSBhZHZhbnRhZ2VzIHRvIGhhemFyZCBhIGRlY2lzaXZlIGJhdHRsZTogc28sIGxlYXZpbmcgQWZyYW5pdXMgYW5kIEp1YmEgZW5jYW1wZWQgc2VwYXJhdGVseSBhdCBhIHNob3J0IGRpc3RhbmNlIGFwYXJ0LCBoZSBoaW1zZWxmIGJlZ2FuIGZvcnRpZnlpbmcgYSBjYW1wIGJleW9uZCBhIGxha2UgbmVhciB0aGUgY2l0eSBvZiBUaGFwc3VzLCB0aGF0IGl0IG1pZ2h0IHNlcnZlIHRoZSB3aG9sZSBhcm15IGFzIGEgcGxhY2UgZnJvbSB3aGljaCB0byBzYWxseSBvdXQgdG8gdGhlIGJhdHRsZSwgYW5kIGFzIGEgcGxhY2Ugb2YgcmVmdWdlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hpbGUgaGUgd2FzIGJ1c3kgd2l0aCB0aGlzIHByb2plY3QsIENhZXNhciBtYWRlIGhpcyB3YXkgd2l0aCBpbmNvbmNlaXZhYmxlIHNwZWVkIHRocm91Z2ggd29vZHkgcmVnaW9ucyB3aGljaCBhZmZvcmRlZCB1bmtub3duIGFjY2VzcyB0byB0aGUgc3BvdCwgb3V0ZmxhbmtlZCBzb21lIG9mIHRoZSBlbmVteSwgYW5kIGF0dGFja2VkIG90aGVycyBpbiBmcm9udC4gVGhlbiwgYWZ0ZXIgcm91dGluZyB0aGVzZSwgaGUgdG9vayBhZHZhbnRhZ2Ugb2YgdGhlIGZhdm91cmFibGUgaW5zdGFudCBhbmQgb2YgdGhlIGltcGV0dXMgb2YgZm9ydHVuZSwgYW5kIHRoZXJlYnkgY2FwdHVyZWQgdGhlIGNhbXAgb2YgQWZyYW5pdXMgYXQgdGhlIGZpcnN0IG9uc2V0LCBhbmQgYXQgdGhlIGZpcnN0IG9uc2V0IHNhY2tlZCB0aGUgY2FtcCBvZiB0aGUgTnVtaWRpYW5zLCBmcm9tIHdoaWNoIEp1YmEgZmxlZC4gVGh1cyBpbiBhIGJyaWVmIHBvcnRpb24gb2Ygb25lIGRheSBoZSBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIHRocmVlIGNhbXBzIGFuZCBzbGV3IGZpZnR5IHRob3VzYW5kIG9mIHRoZSBlbmVteSwgd2l0aG91dCBsb3NpbmcgYXMgbWFueSBhcyBmaWZ0eSBvZiBoaXMgb3duIG1lbi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBBcHJpbCBvZiA0NiBCLkMuPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyB0aGUgYWNjb3VudCB3aGljaCBzb21lIGdpdmUgb2YgdGhlIGJhdHRsZTsgb3RoZXJzLCBob3dldmVyLCBzYXkgdGhhdCBDYWVzYXIgaGltc2VsZiB3YXMgbm90IGluIHRoZSBhY3Rpb24sIGJ1dCB0aGF0LCBhcyBoZSB3YXMgbWFyc2hhbGxpbmcgYW5kIGFycmF5aW5nIGhpcyBhcm15LCBoaXMgdXN1YWwgc2lja25lc3MgbGFpZCBob2xkIG9mIGhpbSwgYW5kIGhlLCBhdCBvbmNlIGF3YXJlIHRoYXQgaXQgd2FzIGJlZ2lubmluZywgYmVmb3JlIGhpcyBhbHJlYWR5IHdhdmVyaW5nIHNlbnNlcyB3ZXJlIGFsdG9nZXRoZXIgY29uZm91bmRlZCBhbmQgb3ZlcnBvd2VyZWQgYnkgdGhlIG1hbGFkeSwgd2FzIGNhcnJpZWQgdG8gYSBuZWlnaGJvdXJpbmcgdG93ZXIsIHdoZXJlIGhlIHN0YXllZCBxdWlldGx5IGR1cmluZyB0aGUgYmF0dGxlLiBPZiB0aGUgbWVuIG9mIGNvbnN1bGFyIGFuZCBwcmFldG9yaWFsIHJhbmsgd2hvIGVzY2FwZWQgZnJvbSB0aGUgYmF0dGxlLCBzb21lIHNsZXcgdGhlbXNlbHZlcyBhdCB0aGUgbW9tZW50IG9mIHRoZWlyIGNhcHR1cmUsIGFuZCBvdGhlcnMgd2VyZSBwdXQgdG8gZGVhdGggYnkgQ2Flc2FyIGFmdGVyIGNhcHR1cmUuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJlaW5nIGVhZ2VyIHRvIHRha2UgQ2F0byBhbGl2ZSwgQ2Flc2FyIGhhc3RlbmVkIHRvd2FyZHMgVXRpY2EsIGZvciBDYXRvIHdhcyBndWFyZGluZyB0aGF0IGNpdHksIGFuZCB0b29rIG5vIHBhcnQgaW4gdGhlIGJhdHRsZS4gQnV0IGhlIGxlYXJuZWQgdGhhdCBDYXRvIGhhZCBtYWRlIGF3YXkgd2l0aCBoaW1zZWxmPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIE1pbm9yIDwvdGl0bGU+bHh2PC9iaWJsPi48L25vdGU+IGFuZCBoZSB3YXMgY2xlYXJseSBhbm5veWVkLCB0aG91Z2ggZm9yIHdoYXQgcmVhc29uIGlzIHVuY2VydGFpbi4gQXQgYW55IHJhdGUsIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2F0bywgSSBiZWdydWRnZSB0aGVlIHRoeSBkZWF0aDsgZm9yIHRob3UgZGlkc3QgYmVncnVkZ2UgbWUgdGhlIHByZXNlcnZhdGlvbiBvZiB0aHkgbGlmZS48L3E+IE5vdywgdGhlIHRyZWF0aXNlIHdoaWNoIENhZXNhciBhZnRlcndhcmRzIHdyb3RlIGFnYWluc3QgQ2F0byB3aGVuIGhlIHdhcyBkZWFkLCBkb2VzIG5vdCBzZWVtIHRvIHByb3ZlIHRoYXQgaGUgd2FzIGluIGEgZ2VudGxlIG9yIHJlY29uY2lsYWJsZSBtb29kLiBGb3IgaG93IGNvdWxkIGhlIGhhdmUgc3BhcmVkIENhdG8gYWxpdmUsIHdoZW4gaGUgcG91cmVkIG91dCBhZ2FpbnN0IGhpbSBhZnRlciBkZWF0aCBzbyBncmVhdCBhIGN1cCBvZiB3cmF0aD8gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBmcm9tIGhpcyBjb25zaWRlcmF0ZSB0cmVhdG1lbnQgb2YgQ2ljZXJvIGFuZCBCcnV0dXMgYW5kIHRob3VzYW5kcyBtb3JlIHdobyBoYWQgZm91Z2h0IGFnYWluc3QgaGltLCBpdCBpcyBpbmZlcnJlZCB0aGF0IGV2ZW4gdGhpcyB0cmVhdGlzZSB3YXMgbm90IGNvbXBvc2VkIG91dCBvZiBoYXRyZWQsIGJ1dCBmcm9tIHBvbGl0aWNhbCBhbWJpdGlvbiwgZm9yIHJlYXNvbnMgd2hpY2ggZm9sbG93LiBDaWNlcm8gaGFkIHdyaXR0ZW4gYW4gZW5jb21pdW0gb24gQ2F0byB3aGljaCBoZSBlbnRpdGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhdG88L3E+OyBhbmQgdGhlIGRpc2NvdXJzZSB3YXMgZWFnZXJseSByZWFkIGJ5IG1hbnksIGFzIHdhcyBuYXR1cmFsLCBzaW5jZSBpdCB3YXMgY29tcG9zZWQgYnkgdGhlIGFibGVzdCBvZiBvcmF0b3JzIG9uIHRoZSBub2JsZXN0IG9mIHRoZW1lcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBhbm5veWVkIENhZXNhciwgd2hvIHRob3VnaHQgdGhhdCBDaWNlcm8ncyBwcmFpc2Ugb2YgdGhlIGRlYWQgQ2F0byB3YXMgYSBkZW51bmNpYXRpb24gb2YgQ2Flc2FyIGhpbXNlbGYuIEFjY29yZGluZ2x5LCBoZSB3cm90ZSBhIHRyZWF0aXNlIGluIHdoaWNoIGhlIGdvdCB0b2dldGhlciBjb3VudGxlc3MgY2hhcmdlcyBhZ2FpbnN0IENhdG87IGFuZCB0aGUgd29yayBpcyBlbnRpdGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGktQ2F0bzwvcT4gQm90aCB0cmVhdGlzZXMgaGF2ZSBtYW55IGVhZ2VyIHJlYWRlcnMsIGFzIHdlbGwgb24gYWNjb3VudCBvZiBDYWVzYXIgYXMgb2YgQ2F0by48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjU1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJlc3VtZSwgd2hlbiBDYWVzYXIgY2FtZSBiYWNrIHRvIFJvbWUgZnJvbSBBZnJpY2EsIHRvIGJlZ2luIHdpdGgsIGhlIG1hZGUgYSBib2FzdGZ1bCBzcGVlY2ggdG8gdGhlIHBlb3BsZSBjb25jZXJuaW5nIGhpcyB2aWN0b3J5LCBhc3NlcnRpbmcgdGhhdCBoZSBoYWQgc3ViZHVlZCBhIGNvdW50cnkgbGFyZ2UgZW5vdWdoIHRvIGZ1cm5pc2ggYW5udWFsbHkgZm9yIHRoZSBwdWJsaWMgdHJlYXN1cnkgdHdvIGh1bmRyZWQgdGhvdXNhbmQgQXR0aWMgYnVzaGVscyBvZiBncmFpbiwgYW5kIHRocmVlIG1pbGxpb24gcG91bmRzIG9mIG9saXZlIG9pbC4gTmV4dCwgaGUgY2VsZWJyYXRlZCB0cml1bXBocywgYW4gRWd5cHRpYW4sIGEgUG9udGljLCBhbmQgYW4gQWZyaWNhbiwgdGhlIGxhc3Qgbm90IGZvciBoaXMgdmljdG9yeSBvdmVyIFNjaXBpbywgYnV0IG9zdGVuc2libHkgb3ZlciBKdWJhIHRoZSBraW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PbiB0aGlzIG9jY2FzaW9uLCB0b28sIEp1YmEsIGEgc29uIG9mIHRoZSBraW5nLCBhIG1lcmUgaW5mYW50LCB3YXMgY2FycmllZCBhbG9uZyBpbiB0aGUgdHJpdW1waGFsIHByb2Nlc3Npb24sIHRoZSBtb3N0IGZvcnR1bmF0ZSBjYXB0aXZlIGV2ZXIgdGFrZW4sIHNpbmNlIGZyb20gYmVpbmcgYSBCYXJiYXJpYW4gYW5kIGEgTnVtaWRpYW4sIGhlIGNhbWUgdG8gYmUgZW5yb2xsZWQgYW1vbmcgdGhlIG1vc3QgbGVhcm5lZCBoaXN0b3JpYW5zIG9mIEhlbGxhcy4gQWZ0ZXIgdGhlIHRyaXVtcGhzLCBDYWVzYXIgZ2F2ZSBoaXMgc29sZGllcnMgbGFyZ2UgZ2lmdHMgYW5kIGVudGVydGFpbmVkIHRoZSBwZW9wbGUgd2l0aCBiYW5xdWV0cyBhbmQgc3BlY3RhY2xlcywgZmVhc3RpbmcgdGhlbSBhbGwgYXQgb25lIHRpbWUgb24gdHdlbnR5IHRob3VzYW5kIGRpbmluZy1jb3VjaGVzLCBhbmQgZnVybmlzaGluZyBzcGVjdGFjbGVzIG9mIGdsYWRpYXRvcmlhbCBhbmQgbmF2YWwgY29tYmF0cyBpbiBob25vdXIgb2YgaGlzIGRhdWdodGVyIEp1bGlhLCBsb25nIHNpbmNlIGRlYWQuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBzcGVjdGFjbGVzLCBhIGNlbnN1cyBvZiB0aGUgcGVvcGxlIHdhcyB0YWtlbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gU3VldG9uaXVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA0MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EaXYuIEp1bC48L3RpdGxlPiA0MTwvYmlibD4pLCB0aGlzIHdhcyBub3QgYSBjZW5zdXMgb2YgYWxsIHRoZSBwZW9wbGUsIGJ1dCBhIHJldmlzaW9uIG9mIHRoZSBudW1iZXIgb2YgcG9vcmVyIGNpdGl6ZW5zIGVudGl0bGVkIHRvIHJlY2VpdmUgYWxsb3dhbmNlcyBvZiBncmFpbiBmcm9tIHRoZSBzdGF0ZS48L25vdGU+IGFuZCBpbnN0ZWFkIG9mIHRoZSB0aHJlZSBodW5kcmVkIGFuZCB0d2VudHkgdGhvdXNhbmQgb2YgdGhlIHByZWNlZGluZyBsaXN0cyB0aGVyZSB3ZXJlIGVucm9sbGVkIG9ubHkgb25lIGh1bmRyZWQgYW5kIGZpZnR5IHRob3VzYW5kLiBTbyBncmVhdCB3YXMgdGhlIGNhbGFtaXR5IHdoaWNoIHRoZSBjaXZpbCB3YXJzIGhhZCB3cm91Z2h0LCBhbmQgc28gbGFyZ2UgYSBwb3J0aW9uIG9mIHRoZSBwZW9wbGUgb2YgUm9tZSBoYWQgdGhleSBjb25zdW1lZCBhd2F5LCB0byBzYXkgbm90aGluZyBvZiB0aGUgbWlzZm9ydHVuZXMgdGhhdCBwb3NzZXNzZWQgdGhlIHJlc3Qgb2YgSXRhbHkgYW5kIHRoZSBwcm92aW5jZXMuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZXNlIG1hdHRlcnMgaGFkIGJlZW4gZmluaXNoZWQgYW5kIGhlIGhhZCBiZWVuIGRlY2xhcmVkIGNvbnN1bCBmb3IgdGhlIGZvdXJ0aCB0aW1lLCBDYWVzYXIgbWFkZSBhbiBleHBlZGl0aW9uIGludG8gU3BhaW4gYWdhaW5zdCB0aGUgc29ucyBvZiBQb21wZXkuIFRoZXNlIHdlcmUgc3RpbGwgeW91bmcsIGJ1dCBoYWQgY29sbGVjdGVkIGFuIGFybXkgb2YgYW1hemluZyBudW1iZXJzIGFuZCBkaXNwbGF5ZWQgYSBib2xkbmVzcyB3aGljaCBqdXN0aWZpZWQgdGhlaXIgY2xhaW1zIHRvIGxlYWRlcnNoaXAsIHNvIHRoYXQgdGhleSBiZXNldCBDYWVzYXIgd2l0aCB0aGUgZ3JlYXRlc3QgcGVyaWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBncmVhdCBiYXR0bGUgd2FzIGpvaW5lZCBuZWFyIHRoZSBjaXR5IG9mIE11bmRhLCBhbmQgaGVyZSBDYWVzYXIsIHNlZWluZyBoaXMgb3duIG1lbiBoYXJkIHByZXNzZWQgYW5kIG1ha2luZyBhIGZlZWJsZSByZXNpc3RhbmNlLCBhc2tlZCBpbiBhIGxvdWQgdm9pY2UgYXMgaGUgcmFuIHRocm91Z2ggdGhlIGFybWVkIHJhbmtzIHdoZXRoZXIgdGhleSBmZWx0IG5vIHNoYW1lIHRvIHRha2UgaGltIGFuZCBwdXQgaGltIGluIHRoZSBoYW5kcyBvZiB0aG9zZSBib3lzLiBXaXRoIGRpZmZpY3VsdHkgYW5kIGFmdGVyIG11Y2ggc3RyZW51b3VzIGVmZm9ydCBoZSByZXB1bHNlZCB0aGUgZW5lbXkgYW5kIHNsZXcgb3ZlciB0aGlydHkgdGhvdXNhbmQgb2YgdGhlbSwgYnV0IGhlIGxvc3Qgb25lIHRob3VzYW5kIG9mIGhpcyBvd24gbWVuLCBhbmQgdGhvc2UgdGhlIHZlcnkgYmVzdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgaGUgd2FzIGdvaW5nIGF3YXkgYWZ0ZXIgdGhlIGJhdHRsZSBoZSBzYWlkIHRvIGhpcyBmcmllbmRzIHRoYXQgaGUgaGFkIG9mdGVuIHN0cml2ZW4gZm9yIHZpY3RvcnksIGJ1dCBub3cgZmlyc3QgZm9yIGhpcyBsaWZlLiBIZSBmb3VnaHQgdGhpcyB2aWN0b3Jpb3VzIGJhdHRsZSBvbiB0aGUgZGF5IG9mIHRoZSBmZXN0aXZhbCBvZiBCYWNjaHVzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hcmNoIDE3LCA0NSBCLkMuPC9ub3RlPiBvbiB3aGljaCBkYXkgYWxzbyBpdCBpcyBzYWlkIHRoYXQgUG9tcGV5IHRoZSBHcmVhdCBoYWQgZ29uZSBmb3J0aCB0byB0aGUgd2FyOyBhIHBlcmlvZCBvZiBmb3VyIHllYXJzIGludGVydmVuZWQuIEFzIGZvciBQb21wZXkncyBzb25zLCB0aGUgeW91bmdlciBtYWRlIGhpcyBlc2NhcGUsIGJ1dCBhZnRlciBhIGZldyBkYXlzIHRoZSBoZWFkIG9mIHRoZSBlbGRlciB3YXMgYnJvdWdodCBpbiBieSBEZWlkaXVzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIHdhcyB0aGUgbGFzdCB3YXIgdGhhdCBDYWVzYXIgd2FnZWQ7IGFuZCB0aGUgdHJpdW1waCB0aGF0IHdhcyBjZWxlYnJhdGVkIGZvciBpdCB2ZXhlZCB0aGUgUm9tYW5zIGFzIG5vdGhpbmcgZWxzZSBoYWQgZG9uZS4gRm9yIGl0IGNvbW1lbW9yYXRlZCBubyB2aWN0b3J5IG92ZXIgZm9yZWlnbiBjb21tYW5kZXJzIG9yIGJhcmJhcmlhbiBraW5ncywgYnV0IHRoZSB1dHRlciBhbm5paGlsYXRpb24gb2YgdGhlIHNvbnMgYW5kIHRoZSBmYW1pbHkgb2YgdGhlIG1pZ2h0aWVzdCBvZiB0aGUgUm9tYW5zLCB3aG8gaGFkIGZhbGxlbiB1cG9uIG1pc2ZvcnR1bmU7IGFuZCBpdCB3YXMgbm90IG1lZXQgZm9yIENhZXNhciB0byBjZWxlYnJhdGUgYSB0cml1bXBoIGZvciB0aGUgY2FsYW1pdGllcyBvZiBoaXMgY291bnRyeSwgcHJpZGluZyBoaW1zZWxmIHVwb24gYWN0aW9ucyB3aGljaCBoYWQgbm8gZGVmZW5jZSBiZWZvcmUgZ29kcyBvciBtZW4gZXhjZXB0IHRoYXQgdGhleSBoYWQgYmVlbiBkb25lIHVuZGVyIG5lY2Vzc2l0eSwgYW5kIHRoYXQgdG9vIGFsdGhvdWdoIHByZXZpb3VzbHkgaGUgaGFkIHNlbnQgbmVpdGhlciBtZXNzZW5nZXIgbm9yIGxldHRlcnMgdG8gYW5ub3VuY2UgdG8gdGhlIHBlb3BsZSBhIHZpY3RvcnkgaW4gdGhlIGNpdmlsIHdhcnMsIGJ1dCBoYWQgc2NydXB1bG91c2x5IHB1dCBmcm9tIGhpbSB0aGUgZmFtZSBhcmlzaW5nIHRoZXJlZnJvbS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjU3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlIFJvbWFucyBnYXZlIHdheSBiZWZvcmUgdGhlIGdvb2QgZm9ydHVuZSBvZiB0aGUgbWFuIGFuZCBhY2NlcHRlZCB0aGUgYml0LCBhbmQgcmVnYXJkaW5nIHRoZSBtb25hcmNoeSBhcyBhIHJlc3BpdGUgZnJvbSB0aGUgZXZpbHMgb2YgdGhlIGNpdmlsIHdhcnMsIHRoZXkgYXBwb2ludGVkIGhpbSBkaWN0YXRvciBmb3IgbGlmZS4gVGhpcyB3YXMgY29uZmVzc2VkbHkgYSB0eXJhbm55LCBzaW5jZSB0aGUgbW9uYXJjaHksIGJlc2lkZXMgdGhlIGVsZW1lbnQgb2YgaXJyZXNwb25zaWJpbGl0eSwgbm93IHRvb2sgb24gdGhhdCBvZiBwZXJtYW5lbmNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JdCB3YXMgQ2ljZXJvIHdobyBwcm9wb3NlZCB0aGUgZmlyc3QgaG9ub3VycyBmb3IgaGltIGluIHRoZSBzZW5hdGUsIGFuZCB0aGVpciBtYWduaXR1ZGUgd2FzLCBhZnRlciBhbGwsIG5vdCB0b28gZ3JlYXQgZm9yIGEgbWFuOyBidXQgb3RoZXJzIGFkZGVkIGV4Y2Vzc2l2ZSBob25vdXJzIGFuZCB2aWVkIHdpdGggb25lIGFub3RoZXIgaW4gcHJvcG9zaW5nIHRoZW0sIHRodXMgcmVuZGVyaW5nIENhZXNhciBvZGlvdXMgYW5kIG9ibm94aW91cyBldmVuIHRvIHRoZSBtaWxkZXN0IGNpdGl6ZW5zIGJlY2F1c2Ugb2YgdGhlIHByZXRlbnNpb24gYW5kIGV4dHJhdmFnYW5jZSBvZiB3aGF0IHdhcyBkZWNyZWVkIGZvciBoaW0uIEl0IGlzIHRob3VnaHQsIHRvbywgdGhhdCB0aGUgZW5lbWllcyBvZiBDYWVzYXIgbm8gbGVzcyB0aGFuIGhpcyBmbGF0dGVyZXJzIGhlbHBlZCB0byBmb3JjZSB0aGVzZSBtZWFzdXJlcyB0aHJvdWdoLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5pbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgaGF2ZSBhcyBtYW55IHByZXRleHRzIGFzIHBvc3NpYmxlIGFnYWluc3QgaGltIGFuZCBtaWdodCBiZSB0aG91Z2h0IHRvIGhhdmUgdGhlIGJlc3QgcmVhc29ucyBmb3IgYXR0ZW1wdGluZyBoaXMgbGlmZS4gRm9yIGluIGFsbCBvdGhlciB3YXlzLCBhdCBsZWFzdCwgYWZ0ZXIgdGhlIGNpdmlsIHdhcnMgd2VyZSBvdmVyLCBoZSBzaG93ZWQgaGltc2VsZiBibGFtZWxlc3M7IGFuZCBjZXJ0YWlubHkgaXQgaXMgdGhvdWdodCBub3QgaW5hcHByb3ByaWF0ZSB0aGF0IHRoZSB0ZW1wbGUgb2YgQ2xlbWVuY3kgd2FzIGRlY3JlZWQgYXMgYSB0aGFuay1vZmZlcmluZyBpbiB2aWV3IG9mIGhpcyBtaWxkbmVzcy4gRm9yIGhlIHBhcmRvbmVkIG1hbnkgb2YgdGhvc2Ugd2hvIGhhZCBmb3VnaHQgYWdhaW5zdCBoaW0sIGFuZCB0byBzb21lIGhlIGV2ZW4gZ2F2ZSBob25vdXJzIGFuZCBvZmZpY2VzIGJlc2lkZXMgYXMgdG8gQnJ1dHVzIGFuZCwgQ2Fzc2l1cywgYm90aCBvZiB3aG9tIHdlcmUgbm93IHByYWV0b3JzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgc3RhdHVlcyBvZiBQb21wZXksIHRvbywgd2hpY2ggaGFkIGJlZW4gdGhyb3duIGRvd24sIGhlIHdvdWxkIG5vdCBzdWZmZXIgdG8gcmVtYWluIHNvLCBidXQgc2V0IHRoZW0gdXAgYWdhaW4sIGF0IHdoaWNoIENpY2VybyBzYWlkIHRoYXQgaW4gc2V0dGluZyB1cCBQb21wZXkncyBzdGF0dWVzIENhZXNhciBmaXJtbHkgZml4ZWQgaGlzIG93bi48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gNDAuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgeGwuIDQ8L2JpYmw+Ljwvbm90ZT4gV2hlbiBoaXMgZnJpZW5kcyB0aG91Z2h0IGl0IGJlc3QgdGhhdCBoZSBzaG91bGQgaGF2ZSBhIGJvZHktZ3VhcmQsIGFuZCBtYW55IG9mIHRoZW0gdm9sdW50ZWVyZWQgZm9yIHRoaXMgc2VydmljZSwgaGUgd291bGQgbm90IGNvbnNlbnQsIHNheWluZyB0aGF0IGl0IHdhcyBiZXR0ZXIgdG8gZGllIG9uY2UgZm9yIGFsbCB0aGFuIHRvIGJlIGFsd2F5cyBleHBlY3RpbmcgZGVhdGguIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgZWZmb3J0IHRvIHN1cnJvdW5kIGhpbXNlbGYgd2l0aCBtZW4ncyBnb29kIHdpbGwgYXMgdGhlIGZhaXJlc3QgYW5kIGF0IHRoZSBzYW1lIHRpbWUgdGhlIHNlY3VyZXN0IHByb3RlY3Rpb24sIGhlIGFnYWluIGNvdXJ0ZWQgdGhlIHBlb3BsZSB3aXRoIGJhbnF1ZXRzIGFuZCBkaXN0cmlidXRpb25zIG9mIGdyYWluLCBhbmQgaGlzIHNvbGRpZXJzIHdpdGggbmV3bHkgcGxhbnRlZCBjb2xvbmllcywgdGhlIG1vc3QgY29uc3BpY3VvdXMgb2Ygd2hpY2ggd2VyZSBDYXJ0aGFnZSBhbmQgQ29yaW50aC4gVGhlIGVhcmxpZXIgY2FwdHVyZSBvZiBib3RoIHRoZXNlIGNpdGllcywgYXMgd2VsbCBhcyB0aGVpciBwcmVzZW50IHJlc3RvcmF0aW9uLCBjaGFuY2VkIHRvIGZhbGwgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkJvdGggY2l0aWVzIHdlcmUgY2FwdHVyZWQgaW4gMTQ2IEIuQy4sIGFuZCBib3RoIHdlcmUgcmVzdG9yZWQgaW4gNDQgQi5DLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgbm9ibGVzLCB0byBzb21lIG9mIHRoZW0gaGUgcHJvbWlzZWQgY29uc3Vsc2hpcHMgYW5kIHByYWV0b3JzaGlwcyBpbiB0aGUgZnV0dXJlLCBvdGhlcnMgaGUgYXBwZWFzZWQgd2l0aCBzdW5kcnkgb3RoZXIgcG93ZXJzIGFuZCBob25vdXJzLCBhbmQgaW4gYWxsIGhlIGltcGxhbnRlZCBob3Blcywgc2luY2UgaGUgYXJkZW50bHkgZGVzaXJlZCB0byBydWxlIG92ZXIgd2lsbGluZyBzdWJqZWN0cy4gVGhlcmVmb3JlLCB3aGVuIE1heGltdXMgdGhlIGNvbnN1bCBkaWVkLCBoZSBhcHBvaW50ZWQgQ2FuaW5pdXMgUmV2aWxpdXMgY29uc3VsIGZvciB0aGUgb25lIGRheSBzdGlsbCByZW1haW5pbmcgb2YgdGhlIHRlcm0gb2Ygb2ZmaWNlLiBUbyBoaW0sIGFzIHdlIGFyZSB0b2xkLCBtYW55IHdlcmUgZ29pbmcgd2l0aCBjb25ncmF0dWxhdGlvbnMgYW5kIG9mZmVycyBvZiBlc2NvcnQsIHdoZXJldXBvbiBDaWNlcm8gc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgdXMgbWFrZSBoYXN0ZSwgb3IgZWxzZSB0aGUgbWFuJ3MgY29uc3Vsc2hpcCB3aWxsIGhhdmUgZXhwaXJlZC48L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIncyBtYW55IHN1Y2Nlc3NlcywgaG93ZXZlciwgZGlkIG5vdCBkaXZlcnQgaGlzIG5hdHVyYWwgc3Bpcml0IG9mIGVudGVycHJpc2UgYW5kIGFtYml0aW9uIHRvIHRoZSBlbmpveW1lbnQgb2Ygd2hhdCBoZSBoYWQgbGFib3Jpb3VzbHkgYWNoaWV2ZWQsIGJ1dCBzZXJ2ZWQgYXMgZnVlbCBhbmQgaW5jZW50aXZlIGZvciBmdXR1cmUgYWNoaWV2ZW1lbnRzLCBhbmQgYmVnYXQgaW4gaGltIHBsYW5zIGZvciBncmVhdGVyIGRlZWRzIGFuZCBhIHBhc3Npb24gZm9yIGZyZXNoIGdsb3J5LCBhcyB0aG91Z2ggaGUgaGFkIHVzZWQgdXAgd2hhdCBoZSBhbHJlYWR5IGhhZC4gV2hhdCBoZSBmZWx0IHdhcyB0aGVyZWZvcmUgbm90aGluZyBlbHNlIHRoYW4gZW11bGF0aW9uIG9mIGhpbXNlbGYsIGFzIGlmIGhlIGhhZCBiZWVuIGFub3RoZXIgbWFuLCBhbmQgYSBzb3J0IG9mIHJpdmFscnkgYmV0d2VlbiB3aGF0IGhlIGhhZCBkb25lIGFuZCB3aGF0IGhlIHB1cnBvc2VkIHRvIGRvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgcGxhbm5lZCBhbmQgcHJlcGFyZWQgdG8gbWFrZSBhbiBleHBlZGl0aW9uIGFnYWluc3QgdGhlIFBhcnRoaWFuczsgYW5kIGFmdGVyIHN1YmR1aW5nIHRoZXNlIGFuZCBtYXJjaGluZyBhcm91bmQgdGhlIEV1eGluZSBieSB3YXkgb2YgSHlyY2FuaWEsIHRoZSBDYXNwaWFuIHNlYSwgYW5kIHRoZSBDYXVjYXN1cywgdG8gaW52YWRlIFNjeXRoaWE7IGFuZCBhZnRlciBvdmVycnVubmluZyB0aGUgY291bnRyaWVzIGJvcmRlcmluZyBvbiBHZXJtYW55IGFuZCBHZXJtYW55IGl0c2VsZiwgdG8gY29tZSBiYWNrIGJ5IHdheSBvZiBHYXVsIHRvIEl0YWx5LCBhbmQgc28gdG8gY29tcGxldGUgdGhpcyBjaXJjdWl0IG9mIGhpcyBlbXBpcmUsIHdoaWNoIHdvdWxkIHRoZW4gYmUgYm91bmRlZCBvbiBhbGwgc2lkZXMgYnkgdGhlIG9jZWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5EdXJpbmcgdGhpcyBleHBlZGl0aW9uLCBtb3Jlb3ZlciwgaGUgaW50ZW5kZWQgdG8gZGlnIHRocm91Z2ggdGhlIGlzdGhtdXMgb2YgQ29yaW50aCwgYW5kIGhhZCBhbHJlYWR5IHB1dCBBbmllbnVzIGluIGNoYXJnZSBvZiB0aGlzIHdvcms7IGhlIGludGVuZGVkIGFsc28gdG8gZGl2ZXJ0IHRoZSBUaWJlciBqdXN0IGJlbG93IHRoZSBjaXR5IGludG8gYSBkZWVwIGNoYW5uZWwsIGdpdmUgaXQgYSBiZW5kIHRvd2FyZHMgQ2lyY2VpdW0sIGFuZCBtYWtlIGl0IGVtcHR5IGludG8gdGhlIHNlYSBhdCBUZXJyYWNpbmEsIHRodXMgY29udHJpdmluZyBmb3IgbWVyY2hhbnRtZW4gYSBzYWZlIGFzIHdlbGwgYXMgYW4gZWFzeSBwYXNzYWdlIHRvIFJvbWU7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBiZXNpZGVzIHRoaXMsIHRvIGNvbnZlcnQgdGhlIG1hcnNoZXMgYWJvdXQgUG9tZW50aW51bSBhbmQgU2V0aWEgaW50byBhIHBsYWluIHdoaWNoIG1hbnkgdGhvdXNhbmRzIG9mIG1lbiBjb3VsZCBjdWx0aXZhdGU7IGFuZCBmdXJ0aGVyLCB0byBidWlsZCBtb2xlcyB3aGljaCBzaG91bGQgYmFycmljYWRlIHRoZSBzZWEgd2hlcmUgaXQgd2FzIG5lYXJlc3QgdG8gUm9tZSwgdG8gY2xlYXIgYXdheSB0aGUgaGlkZGVuIGRhbmdlcnMgb24gdGhlIHNob3JlIG9mIE9zdGlhLCBhbmQgdGhlbiBjb25zdHJ1Y3QgaGFyYm91cnMgYW5kIHJvYWRzdGVhZHMgc3VmZmljaWVudCBmb3IgdGhlIGdyZWF0IGZsZWV0cyB0aGF0IHdvdWxkIHZpc2l0IHRoZW0uIEFuZCBhbGwgdGhlc2UgdGhpbmdzIHdlcmUgaW4gcHJlcGFyYXRpb24uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBhZGp1c3RtZW50IG9mIHRoZSBjYWxlbmRhciwgaG93ZXZlciwgYW5kIHRoZSBjb3JyZWN0aW9uIG9mIHRoZSBpcnJlZ3VsYXJpdHkgaW4gdGhlIGNvbXB1dGF0aW9uIG9mIHRpbWUsIHdlcmUgbm90IG9ubHkgc3R1ZGllZCBzY2llbnRpZmljYWxseSBieSBoaW0sIGJ1dCBhbHNvIGJyb3VnaHQgdG8gY29tcGxldGlvbiwgYW5kIHByb3ZlZCB0byBiZSBvZiB0aGUgaGlnaGVzdCB1dGlsaXR5LiBGb3Igbm90IG9ubHkgaW4gdmVyeSBhbmNpZW50IHRpbWVzIHdhcyB0aGUgcmVsYXRpb24gb2YgdGhlIGx1bmFyIHRvIHRoZSBzb2xhciB5ZWFyIGluIGdyZWF0IGNvbmZ1c2lvbiBhbW9uZyB0aGUgUm9tYW5zLCBzbyB0aGF0IHRoZSBzYWNyaWZpY2lhbCBmZWFzdHMgYW5kIGZlc3RpdmFscywgZGl2ZXJnaW5nIGdyYWR1YWxseSwgYXQgbGFzdCBmZWxsIGluIG9wcG9zaXRlIHNlYXNvbnMgb2YgdGhlIHllYXIsIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhbHNvIGF0IHRoaXMgdGltZSBwZW9wbGUgZ2VuZXJhbGx5IGhhZCBubyB3YXkgb2YgY29tcHV0aW5nIHRoZSBhY3R1YWwgc29sYXIgeWVhcjs8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdCB0aGlzIHRpbWUgdGhlIFJvbWFuIGNhbGVuZGFyIHdhcyBtb3JlIHRoYW4gdHdvIG1vbnRocyBhaGVhZCBvZiB0aGUgc29sYXIgeWVhci4gQ2Flc2FyJ3MgcmVmb3JtIHdlbnQgaW50byBlZmZlY3QgaW4gNDYgQi5DLjwvbm90ZT4gdGhlIHByaWVzdHMgYWxvbmUga25ldyB0aGUgcHJvcGVyIHRpbWUsIGFuZCB3b3VsZCBzdWRkZW5seSBhbmQgdG8gZXZlcnlib2R5J3Mgc3VycHJpc2UgaW5zZXJ0IHRoZSBpbnRlcmNhbGFyeSBtb250aCBjYWxsZWQgTWVyY2Vkb25pdXMuIE51bWEgdGhlIGtpbmcgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IHRvIGludGVyY2FsYXRlIHRoaXMgbW9udGgsIHRodXMgZGV2aXNpbmcgYSBzbGlnaHQgYW5kIHNob3J0LWxpdmVkIHJlbWVkeSBmb3IgdGhlIGVycm9yIGluIHJlZ2FyZCB0byB0aGUgc2lkZXJlYWwgYW5kIHNvbGFyIGN5Y2xlcywgYXMgSSBoYXZlIHNhaWQgaW4gaGlzIExpZmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDE4LjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHZpaWk8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhZXNhciBsYWlkIHRoZSBwcm9ibGVtIGJlZm9yZSB0aGUgYmVzdCBwaGlsb3NvcGhlcnMgYW5kIG1hdGhlbWF0aWNpYW5zLCBhbmQgb3V0IG9mIHRoZSBtZXRob2RzIG9mIGNvcnJlY3Rpb24gd2hpY2ggd2VyZSBhbHJlYWR5IGF0IGhhbmQgY29tcG91bmRlZCBvbmUgb2YgaGlzIG93biB3aGljaCB3YXMgbW9yZSBhY2N1cmF0ZSB0aGFuIGFueS4gVGhpcyB0aGUgUm9tYW5zIHVzZSBkb3duIHRvIHRoZSBwcmVzZW50IHRpbWUsIGFuZCBhcmUgdGhvdWdodCB0byBiZSBsZXNzIGluIGVycm9yIHRoYW4gb3RoZXIgcGVvcGxlcyBhcyByZWdhcmRzIHRoZSBpbmVxdWFsaXR5IGJldHdlZW4gdGhlIGx1bmFyIGFuZCBzb2xhciB5ZWFycy4gSG93ZXZlciwgZXZlbiB0aGlzIGZ1cm5pc2hlZCBvY2Nhc2lvbiBmb3IgYmxhbWUgdG8gdGhvc2Ugd2hvIGVudmllZCBDYWVzYXIgYW5kIGRpc2xpa2VkIGhpcyBwb3dlci4gQXQgYW55IHJhdGUsIENpY2VybyB0aGUgb3JhdG9yLCB3ZSBhcmUgdG9sZCwgd2hlbiBzb21lIG9uZSByZW1hcmtlZCB0aGF0IEx5cmEgd291bGQgcmlzZSBvbiB0aGUgbW9ycm93LCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcywgYnkgZGVjcmVlLDwvcT4gaW1wbHlpbmcgdGhhdCBtZW4gd2VyZSBjb21wZWxsZWQgdG8gYWNjZXB0IGV2ZW4gdGhpcyBkaXNwZW5zYXRpb24uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbW9zdCBvcGVuIGFuZCBkZWFkbHkgaGF0cmVkIHRvd2FyZHMgaGltIHdhcyBwcm9kdWNlZCBieSBoaXMgcGFzc2lvbiBmb3IgdGhlIHJveWFsIHBvd2VyLiBGb3IgdGhlIG11bHRpdHVkZSB0aGlzIHdhcyBhIGZpcnN0IGNhdXNlIG9mIGhhdHJlZCwgYW5kIGZvciB0aG9zZSB3aG8gaGFkIGxvbmcgc21vdGhlcmVkIHRoZWlyIGhhdGUsIGEgbW9zdCBzcGVjaW91cyBwcmV0ZXh0IGZvciBpdC4gQW5kIHlldCB0aG9zZSB3aG8gd2VyZSBhZHZvY2F0aW5nIHRoaXMgaG9ub3VyIGZvciBDYWVzYXIgYWN0dWFsbHkgc3ByZWFkIGFicm9hZCBhbW9uZyB0aGUgcGVvcGxlIGEgcmVwb3J0IHRoYXQgZnJvbSB0aGUgU2lieWxsaW5lIGJvb2tzIGl0IGFwcGVhcmVkIHRoYXQgUGFydGhpYSBjb3VsZCBiZSB0YWtlbiBpZiB0aGUgUm9tYW5zIHdlbnQgdXAgYWdhaW5zdCBpdCB3aXRoIGEga2luZywgYnV0IG90aGVyd2lzZSBjb3VsZCBub3QgYmUgYXNzYWlsZWQ7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhcyBDYWVzYXIgd2FzIGNvbWluZyBkb3duIGZyb20gQWxiYSBpbnRvIHRoZSBjaXR5IHRoZXkgdmVudHVyZWQgdG8gaGFpbCBoaW0gYXMga2luZy4gQnV0IGF0IHRoaXMgdGhlIHBlb3BsZSB3ZXJlIGNvbmZvdW5kZWQsIGFuZCBDYWVzYXIsIGRpc3R1cmJlZCBpbiBtaW5kLCBzYWlkIHRoYXQgaGlzIG5hbWUgd2FzIG5vdCBLaW5nLCBidXQgQ2Flc2FyLCBhbmQgc2VlaW5nIHRoYXQgaGlzIHdvcmRzIHByb2R1Y2VkIGFuIHVuaXZlcnNhbCBzaWxlbmNlLCBoZSBwYXNzZWQgb24gd2l0aCBubyB2ZXJ5IGNoZWVyZnVsIG9yIGNvbnRlbnRlZCBsb29rcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIGFmdGVyIHN1bmRyeSBleHRyYXZhZ2FudCBob25vdXJzIGhhZCBiZWVuIHZvdGVkIGhpbSBpbiB0aGUgc2VuYXRlLCBpdCBjaGFuY2VkIHRoYXQgaGUgd2FzIHNpdHRpbmcgYWJvdmUgdGhlIHJvc3RyYSwgYW5kIGFzIHRoZSBwcmFldG9ycyBhbmQgY29uc3VscyBkcmV3IG5lYXIsIHdpdGggdGhlIHdob2xlIHNlbmF0ZSBmb2xsb3dpbmcgdGhlbSwgaGUgZGlkIG5vdCByaXNlIHRvIHJlY2VpdmUgdGhlbSwgYnV0IGFzIGlmIGhlIHdlcmUgZGVhbGluZyB3aXRoIG1lcmUgcHJpdmF0ZSBwZXJzb25zLCByZXBsaWVkIHRoYXQgaGlzIGhvbm91cnMgbmVlZGVkIGN1cnRhaWxtZW50IHJhdGhlciB0aGFuIGVubGFyZ2VtZW50LiBUaGlzIHZleGVkIG5vdCBvbmx5IHRoZSBzZW5hdGUsIGJ1dCBhbHNvIHRoZSBwZW9wbGUsIHdobyBmZWx0IHRoYXQgaW4gdGhlIHBlcnNvbnMgb2YgdGhlIHNlbmF0b3JzIHRoZSBzdGF0ZSB3YXMgaW5zdWx0ZWQsIGFuZCBpbiBhIHRlcnJpYmxlIGRlamVjdGlvbiB0aGV5IHdlbnQgYXdheSBhdCBvbmNlLCBhbGwgd2hvIHdlcmUgbm90IG9ibGlnZWQgdG8gcmVtYWluLCAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5zbyB0aGF0IENhZXNhciB0b28sIHdoZW4gaGUgd2FzIGF3YXJlIG9mIGhpcyBtaXN0YWtlLCBpbW1lZGlhdGVseSB0dXJuZWQgdG8gZ28gaG9tZSwgYW5kIGRyYXdpbmcgYmFjayBoaXMgdG9nYSBmcm9tIGhpcyBuZWNrLCBjcmllZCBpbiBsb3VkIHRvbmVzIHRvIGhpcyBmcmllbmRzIHRoYXQgaGUgd2FzIHJlYWR5IHRvIG9mZmVyIGhpcyB0aHJvYXQgdG8gYW55IG9uZSB3aG8gd2lzaGVkIHRvIGtpbGwgaGltLiBCdXQgYWZ0ZXJ3YXJkcyBoZSBtYWRlIGhpcyBkaXNlYXNlIGFuIGV4Y3VzZSBmb3IgaGlzIGJlaGF2aW91ciwgc2F5aW5nIHRoYXQgdGhlIHNlbnNlcyBvZiB0aG9zZSB3aG8gYXJlIHRodXMgYWZmbGljdGVkIGRvIG5vdCB1c3VhbGx5IHJlbWFpbiBzdGVhZHkgd2hlbiB0aGV5IGFkZHJlc3MgYSBtdWx0aXR1ZGUgc3RhbmRpbmcsIGJ1dCBhcmUgc3BlZWRpbHkgc2hha2VuIGFuZCB3aGlybGVkIGFib3V0LCBicmluZ2luZyBvbiBnaWRkaW5lc3MgYW5kIGluc2Vuc2liaWxpdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoYXQgaGUgc2FpZCB3YXMgbm90IHRydWU7IG9uIHRoZSBjb250cmFyeSwgaGUgd2FzIHZlcnkgZGVzaXJvdXMgb2YgcmlzaW5nIHRvIHJlY2VpdmUgdGhlIHNlbmF0ZTsgYnV0IG9uZSBvZiBoaXMgZnJpZW5kcywgYXMgdGhleSBzYXksIG9yIHJhdGhlciBvbmUgb2YgaGlzIGZsYXR0ZXJlcnMsIENvcm5lbGl1cyBCYWxidXMsIHJlc3RyYWluZWQgaGltLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UmVtZW1iZXIgdGhhdCB0aG91IGFydCBDYWVzYXIsIGFuZCBwZXJtaXQgdGh5c2VsZiB0byBiZSBjb3VydGVkIGFzIGEgc3VwZXJpb3IuPC9xPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2FzIGFkZGVkIHRvIHRoZXNlIGNhdXNlcyBvZiBvZmZlbmNlIGhpcyBpbnN1bHQgdG8gdGhlIHRyaWJ1bmVzLiBJdCB3YXMsIG5hbWVseSwgdGhlIGZlc3RpdmFsIG9mIHRoZSBMdXBlcmNhbGlhLCBvZiB3aGljaCBtYW55IHdyaXRlIHRoYXQgaXQgd2FzIGFuY2llbnRseSBjZWxlYnJhdGVkIGJ5IHNoZXBoZXJkcywgYW5kIGhhcyBhbHNvIHNvbWUgY29ubmVjdGlvbiB3aXRoIHRoZSBBcmNhZGlhbiBMeWNhZWEuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSBtYW55IG9mIHRoZSBub2JsZSB5b3V0aHMgYW5kIG9mIHRoZSBtYWdpc3RyYXRlcyBydW4gdXAgYW5kIGRvd24gdGhyb3VnaCB0aGUgY2l0eSBuYWtlZCwgZm9yIHNwb3J0IGFuZCBsYXVnaHRlciBzdHJpa2luZyB0aG9zZSB0aGV5IG1lZXQgd2l0aCBzaGFnZ3kgdGhvbmdzLiBBbmQgbWFueSB3b21lbiBvZiByYW5rIGFsc28gcHVycG9zZWx5IGdldCBpbiB0aGVpciB3YXksIGFuZCBsaWtlIGNoaWxkcmVuIGF0IHNjaG9vbCBwcmVzZW50IHRoZWlyIGhhbmRzIHRvIGJlIHN0cnVjaywgYmVsaWV2aW5nIHRoYXQgdGhlIHByZWduYW50IHdpbGwgdGh1cyBiZSBoZWxwZWQgdG8gYW4gZWFzeSBkZWxpdmVyeSwgYW5kIHRoZSBiYXJyZW4gdG8gcHJlZ25hbmN5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBjZXJlbW9uaWVzIENhZXNhciB3YXMgd2l0bmVzc2luZywgc2VhdGVkIHVwb24gdGhlIHJvc3RyYSBvbiBhIGdvbGRlbiB0aHJvbmUsIGFycmF5ZWQgaW4gdHJpdW1waGFsIGF0dGlyZS4gQW5kIEFudG9ueSB3YXMgb25lIG9mIHRoZSBydW5uZXJzIGluIHRoZSBzYWNyZWQgcmFjZTsgZm9yIGhlIHdhcyBjb25zdWwuIEFjY29yZGluZ2x5LCBhZnRlciBoZSBoYWQgZGFzaGVkIGludG8gdGhlIGZvcnVtIGFuZCB0aGUgY3Jvd2QgaGFkIG1hZGUgd2F5IGZvciBoaW0sIGhlIGNhcnJpZWQgYSBkaWFkZW0sIHJvdW5kIHdoaWNoIGEgd3JlYXRoIG9mIGxhdXJlbCB3YXMgdGllZCwgYW5kIGhlbGQgaXQgb3V0IHRvIENhZXNhci4gVGhlbiB0aGVyZSB3YXMgYXBwbGF1c2UsIG5vdCBsb3VkLCBidXQgc2xpZ2h0IGFuZCBwcmVjb25jZXJ0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENhZXNhciBwdXNoZWQgYXdheSB0aGUgZGlhZGVtLCBhbGwgdGhlIHBlb3BsZSBhcHBsYXVkZWQ7IGFuZCB3aGVuIEFudG9ueSBvZmZlcmVkIGl0IGFnYWluLCBmZXcsIGFuZCB3aGVuIENhZXNhciBkZWNsaW5lZCBpdCBhZ2FpbiwgYWxsLCBhcHBsYXVkZWQuIFRoZSBleHBlcmltZW50IGhhdmluZyB0aHVzIGZhaWxlZCwgQ2Flc2FyIHJvc2UgZnJvbSBoaXMgc2VhdCwgYWZ0ZXIgb3JkZXJpbmcgdGhlIHdyZWF0aCB0byBiZSBjYXJyaWVkIHVwIHRvIHRoZSBDYXBpdG9sOyBidXQgdGhlbiBoaXMgc3RhdHVlcyB3ZXJlIHNlZW4gdG8gaGF2ZSBiZWVuIGRlY2tlZCB3aXRoIHJveWFsIGRpYWRlbXMuIFNvIHR3byBvZiB0aGUgdHJpYnVuZXMsIEZsYXZpdXMgYW5kIE1hcnlsbHVzLCB3ZW50IHVwIHRvIHRoZW0gYW5kIHB1bGxlZCBvZmYgdGhlIGRpYWRlbXMsIGFuZCBhZnRlciBkaXNjb3ZlcmluZyB0aG9zZSB3aG8gaGFkIGZpcnN0IGhhaWxlZCBDYWVzYXIgYXMga2luZywgbGVkIHRoZW0gb2ZmIHRvIHByaXNvbi4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIHRoZSBwZW9wbGUgZm9sbG93ZWQgdGhlIHRyaWJ1bmVzIHdpdGggYXBwbGF1c2UgYW5kIGNhbGxlZCB0aGVtIEJydXR1c2VzLCBiZWNhdXNlIEJydXR1cyB3YXMgdGhlIG1hbiB3aG8gcHV0IGFuIGVuZCB0byB0aGUgcm95YWwgc3VjY2Vzc2lvbiBhbmQgYnJvdWdodCB0aGUgcG93ZXIgaW50byB0aGUgaGFuZHMgb2YgdGhlIHNlbmF0ZSBhbmQgcGVvcGxlIGluc3RlYWQgb2YgYSBzb2xlIHJ1bGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB1YmwuIDEuMSIgdmFsaWQ9InllcyI+CgkJCQkJCSAgICAgICAgICAgIDx0aXRsZT5QdWJsaWNvbGE8dGl0bGU+IGkuPC90aXRsZT4KICAgICAgICAgICAgICAgICAgPC90aXRsZT4KCQkJCQkgICAgICAgICAgPC9iaWJsPi08YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHVibC4gOS4xIiB2YWxpZD0ieWVzIj5peDwvYmlibD4uPC9ub3RlPiBBdCB0aGlzLCBDYWVzYXIgd2FzIGdyZWF0bHkgdmV4ZWQsIGFuZCBkZXByaXZlZCBNYXJ5bGx1cyBhbmQgRmxhdml1cyBvZiB0aGVpciBvZmZpY2UsIHdoaWxlIGluIGhpcyBkZW51bmNpYXRpb24gb2YgdGhlbSwgYWx0aG91Z2ggaGUgYXQgdGhlIHNhbWUgdGltZSBpbnN1bHRlZCB0aGUgcGVvcGxlLCBoZSBjYWxsZWQsIHRoZW0gcmVwZWF0ZWRseSBCcnV0ZXMgYW5kIEN5bWFlYW5zLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB3b3JkIGJydXR1cyBpbiBMYXRpbiBzaWduaWZpZWQgc3R1cGlkIChjZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQdWJsLiAzLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UHVibGljb2xhPC90aXRsZT4sIGlpaS4gNDwvYmlibD4pOyBhbmQgdGhlIHBlb3BsZSBvZiBDeW3DqSwgaW4gQXNpYSBNaW5vciwgd2VyZSBjZWxlYnJhdGVkIGZvciBzdHVwaWRpdHkgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdHJhYi4gMTMuMy42IiB2YWxpZD0ieWVzIj5TdHJhYm8sIHAuIDYyMjwvYmlibD4pLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyIHRoZXNlIGNpcmN1bXN0YW5jZXMgdGhlIG11bHRpdHVkZSB0dXJuZWQgdGhlaXIgdGhvdWdodHMgdG93YXJkcyBNYXJjdXMgQnJ1dHVzLCB3aG8gd2FzIHRob3VnaHQgdG8gYmUgYSBkZXNjZW5kYW50IG9mIHRoZSBlbGRlciBCcnV0dXMgb24gaGlzIGZhdGhlcidzIHNpZGUsIG9uIGhpcyBtb3RoZXIncyBzaWRlIGJlbG9uZ2VkIHRvIHRoZSBTZXJ2aWxpaSwgYW5vdGhlciBpbGx1c3RyaW91cyBob3VzZSwgYW5kIHdhcyBhIHNvbi1pbi1sYXcgYW5kIG5lcGhldyBvZiBDYXRvLiBUaGUgZGVzaXJlcyB3aGljaCBCcnV0dXMgZmVsdCB0byBhdHRlbXB0IG9mIGhpcyBvd24gYWNjb3JkIHRoZSBhYm9saXRpb24gb2YgdGhlIG1vbmFyY2h5IHdlcmUgYmx1bnRlZCBieSB0aGUgZmF2b3VycyBhbmQgaG9ub3VycyB0aGF0IGhlIGhhZCByZWNlaXZlZCBmcm9tIENhZXNhci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG5vdCBvbmx5IGhhZCBoaXMgbGlmZSBiZWVuIHNwYXJlZCBhdCBQaGFyc2FsdXMgYWZ0ZXIgUG9tcGV5J3MgZmxpZ2h0LCBhbmQgdGhlIGxpdmVzIG9mIG1hbnkgb2YgaGlzIGZyaWVuZHMgYXQgaGlzIGVudHJlYXR5LCBidXQgYWxzbyBoZSBoYWQgZ3JlYXQgY3JlZGl0IHdpdGggQ2Flc2FyLiBIZSBoYWQgcmVjZWl2ZWQgdGhlIG1vc3QgaG9ub3VyYWJsZSBvZiB0aGUgcHJhZXRvcnNoaXBzIGZvciB0aGUgY3VycmVudCB5ZWFyLCBhbmQgd2FzIHRvIGJlIGNvbnN1bCB0aHJlZSB5ZWFycyBsYXRlciwgaGF2aW5nIGJlZW4gcHJlZmVycmVkIHRvIENhc3NpdXMsIHdobyB3YXMgYSByaXZhbCBjYW5kaWRhdGUuIEZvciBDYWVzYXIsIGFzIHdlIGFyZSB0b2xkLCBzYWlkIHRoYXQgQ2Fzc2l1cyB1cmdlZCB0aGUganVzdGVyIGNsYWltcyB0byB0aGUgb2ZmaWNlLCBidXQgdGhhdCBmb3IgaGlzIG93biBwYXJ0IGhlIGNvdWxkIG5vdCBwYXNzIEJydXR1cyBieS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA3LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIHZpaS4gMS0zPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uY2UsIHRvbywgd2hlbiBjZXJ0YWluIHBlcnNvbnMgd2VyZSBhY3R1YWxseSBhY2N1c2luZyBCcnV0dXMgdG8gaGltLCB0aGUgY29uc3BpcmFjeSBiZWluZyBhbHJlYWR5IG9uIGZvb3QsIENhZXNhciB3b3VsZCBub3QgaGVlZCB0aGVtLCBidXQgbGF5aW5nIGhpcyBoYW5kIHVwb24gaGlzIGJvZHkgc2FpZCB0byB0aGUgYWNjdXNlcnM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnJ1dHVzIHdpbGwgd2FpdCBmb3IgdGhpcyBzaHJpdmVsbGVkIHNraW4sPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzIDwvdGl0bGU+Y2hhcHRlcnMgdmlpaS48L2JpYmw+LCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOS4xIiB2YWxpZD0ieWVzIj5peC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW1wbHlpbmcgdGhhdCBCcnV0dXMgd2FzIHdvcnRoeSB0byBydWxlIGJlY2F1c2Ugb2YgaGlzIHZpcnR1ZSwgYnV0IHRoYXQgZm9yIHRoZSBzYWtlIG9mIHJ1bGluZyBoZSB3b3VsZCBub3QgYmVjb21lIGEgdGhhbmtsZXNzIHZpbGxhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlLCBob3dldmVyLCB3aG8gd2VyZSBlYWdlciBmb3IgdGhlIGNoYW5nZSwgYW5kIGZpeGVkIHRoZWlyIGV5ZXMgb24gQnJ1dHVzIGFsb25lLCBvciBvbiBoaW0gZmlyc3QsIGRpZCBub3QgdmVudHVyZSB0byB0YWxrIHdpdGggaGltIGRpcmVjdGx5LCBidXQgYnkgbmlnaHQgdGhleSBjb3ZlcmVkIGhpcyBwcmFldG9yaWFsIHRyaWJ1bmUgYW5kIGNoYWlyIHdpdGggd3JpdGluZ3MsIG1vc3Qgb2Ygd2hpY2ggd2VyZSBvZiB0aGlzIHNvcnQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgYXNsZWVwLCBCcnV0dXMsPC9xPiBvciw8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGFydCBub3QgQnJ1dHVzPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzIDwvdGl0bGU+Y2hhcHRlcnMgdmlpaS48L2JpYmw+LCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOS4xIiB2YWxpZD0ieWVzIj5peC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gV2hlbiBDYXNzaXVzIHBlcmNlaXZlZCB0aGF0IHRoZSBhbWJpdGlvbiBvZiBCcnV0dXMgd2FzIHNvbWV3aGF0IHN0aXJyZWQgYnkgdGhlc2UgdGhpbmdzLCBoZSB3YXMgbW9yZSB1cmdlbnQgd2l0aCBoaW0gdGhhbiBiZWZvcmUsIGFuZCBwcmlja2VkIGhpbSBvbiwgaGF2aW5nIGhpbXNlbGYgYWxzbyBzb21lIHByaXZhdGUgZ3JvdW5kcyBmb3IgaGF0aW5nIENhZXNhcjsgdGhlc2UgSSBoYXZlIG1lbnRpb25lZCBpbiB0aGUgTGlmZSBvZiBCcnV0dXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1cyA8L3RpdGxlPmNoYXB0ZXJzIHZpaWkuPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDkuMSIgdmFsaWQ9InllcyI+aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWVzYXIgYWN0dWFsbHkgc3VzcGVjdGVkIGhpbSwgc28gdGhhdCBoZSBvbmNlIHNhaWQgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCwgdGhpbmsgeWUsIGRvdGggQ2Fzc2l1cyB3YW50PyBJIGxpa2UgaGltIG5vdCBvdmVyIG11Y2gsIGZvciBoZSBpcyBtdWNoIHRvbyBwYWxlLjwvcT4gQW5kIGFnYWluLCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gQW50b255IGFuZCBEb2xhYmVsbGEgd2VyZSBhY2N1c2VkIHRvIGhpbSBvZiBwbG90dGluZyByZXZvbHV0aW9uLCBDYWVzYXIgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFtIG5vdCBtdWNoIGluIGZlYXIgb2YgdGhlc2UgZmF0LCBsb25nLWhhaXJlZCBmZWxsb3dzLCBidXQgcmF0aGVyIG9mIHRob3NlIHBhbGUsIHRoaW4gb25lcyw8L3E+IG1lYW5pbmcgQnJ1dHVzIGFuZCBDYXNzaXVzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZGVzdGlueSwgaXQgd291bGQgc2VlbSwgaXMgbm90IHNvIG11Y2ggdW5leHBlY3RlZCBhcyBpdCBpcyB1bmF2b2lkYWJsZSwgc2luY2UgdGhleSBzYXkgdGhhdCBhbWF6aW5nIHNpZ25zIGFuZCBhcHBhcml0aW9ucyB3ZXJlIHNlZW4uIE5vdywgYXMgZm9yIGxpZ2h0cyBpbiB0aGUgaGVhdmVucywgY3Jhc2hpbmcgc291bmRzIGJvcm5lIGFsbCBhYm91dCBieSBuaWdodCwgYW5kIGJpcmRzIG9mIG9tZW4gY29taW5nIGRvd24gaW50byB0aGUgZm9ydW0sIGl0IGlzIHBlcmhhcHMgbm90IHdvcnRoIHdoaWxlIHRvIG1lbnRpb24gdGhlc2UgcHJlY3Vyc29ycyBvZiBzbyBncmVhdCBhbiBldmVudDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IFN0cmFibyB0aGUgcGhpbG9zb3BoZXIgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb2JhYmx5IGluIHRoZSAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IaXN0b3JpY2FsIENvbW1lbnRhcmllczwvcT4gY2l0ZWQgaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDI4LjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THVjdWxsdXM8L3RpdGxlPiwgeHh2aWlpLiA3PC9iaWJsPi48L25vdGU+IHRoYXQgbXVsdGl0dWRlcyBvZiBtZW4gYWxsIG9uIGZpcmUgd2VyZSBzZWVuIHJ1c2hpbmcgdXAsIGFuZCBhIHNvbGRpZXIncyBzbGF2ZSB0aHJldyBmcm9tIGhpcyBoYW5kIGEgY29waW91cyBmbGFtZSBhbmQgc2VlbWVkIHRvIHRoZSBzcGVjdGF0b3JzIHRvIGJlIGJ1cm5pbmcsIGJ1dCB3aGVuIHRoZSBmbGFtZSBjZWFzZWQgdGhlIG1hbiB3YXMgdW5pbmp1cmVkOyBoZSBzYXlzLCBtb3Jlb3ZlciwgdGhhdCB3aGVuIENhZXNhciBoaW1zZWxmIHdhcyBzYWNyaWZpY2luZywgdGhlIGhlYXJ0IG9mIHRoZSB2aWN0aW0gd2FzIG5vdCB0byBiZSBmb3VuZCwgYW5kIHRoZSBwcm9kaWd5IGNhdXNlZCBmZWFyLCBzaW5jZSBpbiB0aGUgY291cnNlIG9mIG5hdHVyZSwgY2VydGFpbmx5LCBhbiBhbmltYWwgd2l0aG91dCBhIGhlYXJ0IGNvdWxkIG5vdCBleGlzdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZvbGxvd2luZyBzdG9yeSwgdG9vLCBpcyB0b2xkIGJ5IG1hbnkuIEEgY2VydGFpbiBzZWVyIHdhcm5lZCBDYWVzYXIgdG8gYmUgb24gaGlzIGd1YXJkIGFnYWluc3QgYSBncmVhdCBwZXJpbCBvbiB0aGUgZGF5IG9mIHRoZSBtb250aCBvZiBNYXJjaCB3aGljaCB0aGUgUm9tYW5zIGNhbGwgdGhlIElkZXM7IGFuZCB3aGVuIHRoZSBkYXkgaGFkIGNvbWUgYW5kIENhZXNhciB3YXMgb24gaGlzIHdheSB0byB0aGUgc2VuYXRlLWhvdXNlLCBoZSBncmVldGVkIHRoZSBzZWVyIHdpdGggYSBqZXN0IGFuZCBzYWlkOgoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgdGhlIElkZXMgb2YgTWFyY2ggYXJlIGNvbWUsPC9xPiBhbmQgdGhlIHNlZXIgc2FpZCB0byBoaW0gc29mdGx5OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkF5ZSwgdGhleSBhcmUgY29tZSwgYnV0IHRoZXkgYXJlIG5vdCBnb25lLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgb24gdGhlIGRheSBiZWZvcmUsIHdoZW4gTWFyY3VzIExlcGlkdXMgd2FzIGVudGVydGFpbmluZyBoaW0gYXQgc3VwcGVyLCBDYWVzYXIgY2hhbmNlZCB0byBiZSBzaWduaW5nIGxldHRlcnMsIGFzIGhpcyBjdXN0b20gd2FzLCB3aGlsZSByZWNsaW5pbmcgYXQgdGFibGUsIGFuZCB0aGUgZGlzY291cnNlIHR1cm5lZCBzdWRkZW5seSB1cG9uIHRoZSBxdWVzdGlvbiB3aGF0IHNvcnQgb2YgZGVhdGggd2FzIHRoZSBiZXN0OyBiZWZvcmUgYW55IG9uZSBlbHNlIGNvdWxkIGFuc3dlciBDYWVzYXIgY3JpZWQgb3V0OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgd2hpY2ggaXMgdW5leHBlY3RlZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd2hpbGUgaGUgd2FzIHNsZWVwaW5nIGFzIHVzdWFsIGJ5IHRoZSBzaWRlIG9mIGhpcyB3aWZlLCBhbGwgdGhlIHdpbmRvd3MgYW5kIGRvb3JzIG9mIHRoZSBjaGFtYmVyIGZsZXcgb3BlbiBhdCBvbmNlLCBhbmQgQ2Flc2FyLCBjb25mb3VuZGVkIGJ5IHRoZSBub2lzZSBhbmQgdGhlIGxpZ2h0IG9mIHRoZSBtb29uIHNoaW5pbmcgZG93biB1cG9uIGhpbSwgbm90aWNlZCB0aGF0IENhbHB1cm5pYSB3YXMgaW4gYSBkZWVwIHNsdW1iZXIsIGJ1dCB3YXMgdXR0ZXJpbmcgaW5kaXN0aW5jdCB3b3JkcyBhbmQgaW5hcnRpY3VsYXRlIGdyb2FucyBpbiBoZXIgc2xlZXA7IGZvciBzaGUgZHJlYW1lZCwgYXMgaXQgcHJvdmVkLCB0aGF0IHNoZSB3YXMgaG9sZGluZyBoZXIgbXVyZGVyZWQgaHVzYmFuZCBpbiBoZXIgYXJtcyBhbmQgYmV3YWlsaW5nIGhpbS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSwgaG93ZXZlciwgc2F5IHRoYXQgdGhpcyB3YXMgbm90IHRoZSB2aXNpb24gd2hpY2ggdGhlIHdvbWFuIGhhZDsgYnV0IHRoYXQgdGhlcmUgd2FzIGF0dGFjaGVkIHRvIENhZXNhcidzIGhvdXNlIHRvIGdpdmUgaXQgYWRvcm5tZW50IGFuZCBkaXN0aW5jdGlvbiwgYnkgdm90ZSBvZiB0aGUgc2VuYXRlLCBhIGdhYmxlLW9ybmFtZW50LCBhcyBMaXZ5IHNheXMsIGFuZCBpdCB3YXMgdGhpcyB3aGljaCBDYWxwdXJuaWEgaW4gaGVyIGRyZWFtcyBzYXcgdG9ybiBkb3duLCBhbmQgdGhlcmVmb3JlLCBhcyBzaGUgdGhvdWdodCwgd2FpbGVkIGFuZCB3ZXB0LiBBdCBhbGwgZXZlbnRzLCB3aGVuIGRheSBjYW1lLCBzaGUgYmVnZ2VkIENhZXNhciwgaWYgaXQgd2FzIHBvc3NpYmxlLCBub3QgdG8gZ28gb3V0LCBidXQgdG8gcG9zdHBvbmUgdGhlIG1lZXRpbmcgb2YgdGhlIHNlbmF0ZSA7IGlmLCBob3dldmVyLCBoZSBoYWQgbm8gY29uY2VybiBhdCBhbGwgZm9yIGhlciBkcmVhbXMsIHNoZSBiZXNvdWdodCBoaW0gdG8gZW5xdWlyZSBieSBvdGhlciBtb2RlcyBvZiBkaXZpbmF0aW9uIGFuZCBieSBzYWNyaWZpY2VzIGNvbmNlcm5pbmcgdGhlIGZ1dHVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIENhZXNhciBhbHNvLCBhcyBpdCB3b3VsZCBhcHBlYXIsIHdhcyBpbiBzb21lIHN1c3BpY2lvbiBhbmQgZmVhci4gRm9yIG5ldmVyIGJlZm9yZSBoYWQgaGUgcGVyY2VpdmVkIGluIENhbHB1cm5pYSBhbnkgd29tYW5pc2ggc3VwZXJzdGl0aW9uLCBidXQgbm93IGhlIHNhdyB0aGF0IHNoZSB3YXMgaW4gZ3JlYXQgZGlzdHJlc3MuIEFuZCB3aGVuIHRoZSBzZWVycyBhbHNvLCBhZnRlciBtYW55IHNhY3JpZmljZXMsIHRvbGQgaGltIHRoYXQgdGhlIG9tZW5zIHdlcmUgdW5mYXZvdXJhYmxlLCBoZSByZXNvbHZlZCB0byBzZW5kIEFudG9ueSBhbmQgZGlzbWlzcyB0aGUgc2VuYXRlLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgdGhpcyBqdW5jdHVyZSBEZWNpbXVzIEJydXR1cywgc3VybmFtZWQgQWxiaW51cywgd2hvIHdhcyBzbyB0cnVzdGVkIGJ5IENhZXNhciB0aGF0IGhlIHdhcyBlbnRlcmVkIGluIGhpcyB3aWxsIGFzIGhpcyBzZWNvbmQgaGVpciwgYnV0IHdhcyBwYXJ0bmVyIGluIHRoZSBjb25zcGlyYWN5IG9mIHRoZSBvdGhlciBCcnV0dXMgYW5kIENhc3NpdXMsIGZlYXJpbmcgdGhhdCBpZiBDYWVzYXIgc2hvdWxkIGVsdWRlIHRoYXQgZGF5LCB0aGVpciB1bmRlcnRha2luZyB3b3VsZCBiZWNvbWUga25vd24sIHJpZGljdWxlZCB0aGUgc2VlcnMgYW5kIGNoaWRlZCBDYWVzYXIgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIGxheWluZyBoaW1zZWxmIG9wZW4gdG8gbWFsaWNpb3VzIGNoYXJnZXMgb24gdGhlIHBhcnQgb2YgdGhlIHNlbmF0b3JzLCB3aG8gd291bGQgdGhpbmsgdGhlbXNlbHZlcyBtb2NrZWQgYXQ7IGZvciB0aGV5IGhhZCBtZXQgYXQgaGlzIGJpZGRpbmcsIGFuZCB3ZXJlIHJlYWR5IGFuZCB3aWxsaW5nIHRvIHZvdGUgYXMgb25lIG1hbiB0aGF0IGhlIHNob3VsZCBiZSBkZWNsYXJlZCBraW5nIG9mIHRoZSBwcm92aW5jZXMgb3V0c2lkZSBvZiBJdGFseSwgYW5kIG1pZ2h0IHdlYXIgYSBkaWFkZW0gd2hlbiBoZSB3ZW50IGFueXdoZXJlIGVsc2UgYnkgbGFuZCBvciBzZWE7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpZiBzb21lIG9uZSBzaG91bGQgdGVsbCB0aGVtIGF0IHRoZWlyIHNlc3Npb24gdG8gYmUgZ29uZSBub3csIGJ1dCB0byBjb21lIGJhY2sgYWdhaW4gd2hlbiBDYWxwdXJuaWEgc2hvdWxkIGhhdmUgYmV0dGVyIGRyZWFtcywgd2hhdCBzcGVlY2hlcyB3b3VsZCBiZSBtYWRlIGJ5IGhpcyBlbmVtaWVzLCBvciB3aG8gd291bGQgbGlzdGVuIHRvIGhpcyBmcmllbmRzIHdoZW4gdGhleSB0cmllZCB0byBzaG93IHRoYXQgdGhpcyB3YXMgbm90IHNsYXZlcnkgYW5kIHR5cmFubnk/IEJ1dCBpZiBoZSB3YXMgZnVsbHkgcmVzb2x2ZWQgKEFsYmludXMgc2FpZCkgdG8gcmVnYXJkIHRoZSBkYXkgYXMgaW5hdXNwaWNpb3VzLCBpdCB3YXMgYmV0dGVyIHRoYXQgaGUgc2hvdWxkIGdvIGluIHBlcnNvbiBhbmQgYWRkcmVzcyB0aGUgc2VuYXRlLCBhbmQgdGhlbiBwb3N0cG9uZSBpdHMgYnVzaW5lc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHNheWluZyB0aGVzZSB0aGluZ3MgQnJ1dHVzIHRvb2sgQ2Flc2FyIGJ5IHRoZSBoYW5kIGFuZCBiZWdhbiB0byBsZWFkIGhpbSBhbG9uZy4gQW5kIGhlIGhhZCBnb25lIGJ1dCBhIGxpdHRsZSB3YXkgZnJvbSBoaXMgZG9vciB3aGVuIGEgc2xhdmUgYmVsb25naW5nIHRvIHNvbWUgb25lIGVsc2UsIGVhZ2VyIHRvIGdldCBhdCBDYWVzYXIsIGJ1dCB1bmFibGUgdG8gZG8gc28gZm9yIHRoZSBwcmVzcyBvZiBudW1iZXJzIGFib3V0IGhpbSwgZm9yY2VkIGhpcyB3YXkgaW50byB0aGUgaG91c2UsIGdhdmUgaGltc2VsZiBpbnRvIHRoZSBoYW5kcyBvZiBDYWxwdXJuaWEsIGFuZCBiYWRlIGhlciBrZWVwIGhpbSBzZWN1cmUgdW50aWwgQ2Flc2FyIGNhbWUgYmFjaywgc2luY2UgaGUgaGFkIGltcG9ydGFudCBtYXR0ZXJzIHRvIHJlcG9ydCB0byBoaW0uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBBcnRlbWlkb3J1cywgYSBDbmlkaWFuIGJ5IGJpcnRoLCBhIHRlYWNoZXIgb2YgR3JlZWsgcGhpbG9zb3BoeSwgYW5kIG9uIHRoaXMgYWNjb3VudCBicm91Z2h0IGludG8gaW50aW1hY3kgd2l0aCBzb21lIG9mIHRoZSBmb2xsb3dlcnMgb2YgQnJ1dHVzLCBzbyB0aGF0IGhlIGFsc28ga25ldyBtb3N0IG9mIHdoYXQgdGhleSB3ZXJlIGRvaW5nLCBjYW1lIGJyaW5naW5nIHRvIENhZXNhciBpbiBhIHNtYWxsIHJvbGwgdGhlIGRpc2Nsb3N1cmVzIHdoaWNoIGhlIHdhcyBnb2luZyB0byBtYWtlOyBidXQgc2VlaW5nIHRoYXQgQ2Flc2FyIHRvb2sgYWxsIHN1Y2ggcm9sbHMgYW5kIGhhbmRlZCB0aGVtIHRvIGhpcyBhdHRlbmRhbnRzLCBoZSBjYW1lIHF1aXRlIG5lYXIsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlJlYWQgdGhpcywgQ2Flc2FyLCBieSB0aHlzZWxmLCBhbmQgc3BlZWRpbHk7IGZvciBpdCBjb250YWlucyBtYXR0ZXJzIG9mIGltcG9ydGFuY2UgYW5kIG9mIGNvbmNlcm4gdG8gdGhlZS48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIENhZXNhciB0b29rIHRoZSByb2xsIGFuZCB3b3VsZCBoYXZlIHJlYWQgaXQsIGJ1dCB3YXMgcHJldmVudGVkIGJ5IHRoZSBtdWx0aXR1ZGUgb2YgcGVvcGxlIHdobyBlbmdhZ2VkIGhpcyBhdHRlbnRpb24sIGFsdGhvdWdoIGhlIHNldCBvdXQgdG8gZG8gc28gbWFueSB0aW1lcywgYW5kIGhvbGRpbmcgaW4gaGlzIGhhbmQgYW5kIHJldGFpbmluZyB0aGF0IHJvbGwgYWxvbmUsIGhlIHBhc3NlZCBvbiBpbnRvIHRoZSBzZW5hdGUuIFNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IGFub3RoZXIgcGVyc29uIGdhdmUgaGltIHRoaXMgcm9sbCwgYW5kIHRoYXQgQXJ0ZW1pZG9ydXMgZGlkIG5vdCBnZXQgdG8gaGltIGF0IGFsbCwgYnV0IHdhcyBjcm93ZGVkIGF3YXkgYWxsIGFsb25nIHRoZSByb3V0ZS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjY2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gZmFyLCBwZXJoYXBzLCB0aGVzZSB0aGluZ3MgbWF5IGhhdmUgaGFwcGVuZWQgb2YgdGhlaXIgb3duIGFjY29yZDsgdGhlIHBsYWNlLCBob3dldmVyLCB3aGljaCB3YXMgdGhlIHNjZW5lIG9mIHRoYXQgc3RydWdnbGUgYW5kIG11cmRlciwgYW5kIGluIHdoaWNoIHRoZSBzZW5hdGUgd2FzIHRoZW4gYXNzZW1ibGVkLCBzaW5jZSBpdCBjb250YWluZWQgYSBzdGF0dWUgb2YgUG9tcGV5IGFuZCBoYWQgYmVlbiBkZWRpY2F0ZWQgYnkgUG9tcGV5IGFzIGFuIGFkZGl0aW9uYWwgb3JuYW1lbnQgdG8gaGlzIHRoZWF0cmUsIG1hZGUgaXQgd2hvbGx5IGNsZWFyIHRoYXQgaXQgd2FzIHRoZSB3b3JrIG9mIHNvbWUgaGVhdmVubHkgcG93ZXIgd2hpY2ggd2FzIGNhbGxpbmcgYW5kIGd1aWRpbmcgdGhlIGFjdGlvbiB0aGl0aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQsIGl0IGlzIGFsc28gc2FpZCB0aGF0IENhc3NpdXMsIHR1cm5pbmcgaGlzIGV5ZXMgdG93YXJkIHRoZSBzdGF0dWUgb2YgUG9tcGV5IGJlZm9yZSB0aGUgYXR0YWNrIGJlZ2FuLCBpbnZva2VkIGl0IHNpbGVudGx5LCBhbHRob3VnaCBoZSB3YXMgbXVjaCBhZGRpY3RlZCB0byB0aGUgZG9jdHJpbmVzIG9mIEVwaWN1cnVzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGRpc2NvdXJhZ2VkIGJlbGllZiBpbiBzdXBlcmh1bWFuIHBvd2Vycy48L25vdGU+IGJ1dCB0aGUgY3Jpc2lzLCBhcyBpdCB3b3VsZCBzZWVtLCB3aGVuIHRoZSBkcmVhZGZ1bCBhdHRlbXB0IHdhcyBub3cgY2xvc2UgYXQgaGFuZCwgcmVwbGFjZWQgaGlzIGZvcm1lciBjb29sIGNhbGN1bGF0aW9ucyB3aXRoIGRpdmluZWx5IGluc3BpcmVkIGVtb3Rpb24uPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIEFudG9ueSwgd2hvIHdhcyBhIGZyaWVuZCBvZiBDYWVzYXIncyBhbmQgYSByb2J1c3QgbWFuLCB3YXMgZGV0YWluZWQgb3V0c2lkZSBieSBCcnV0dXMgQWxiaW51cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CeSBDYWl1cyBUcmVib25pdXMsIHJhdGhlciwgYXMgUGx1dGFyY2ggc2F5cyBpbiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIHh2aWkuIDE8L2JpYmw+LiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMi4xNi4xMTciIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlPkIuIEMuPC90aXRsZT4gaWkuIDExNzwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMTAuMjguMSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+YWQgZmFtLjwvdGl0bGU+IHguIDI4PC9iaWJsPi4vbm90ZSZndDsgd2hvIHB1cnBvc2VseSBlbmdhZ2VkIGhpbSBpbiBhIGxlbmd0aHkgY29udmVyc2F0aW9uIGJ1dCBDYWVzYXIgd2VudCBpbiwgYW5kIHRoZSBzZW5hdGUgcm9zZSBpbiBoaXMgaG9ub3VyLiBTb21lIG9mIHRoZSBwYXJ0aXNhbnMgb2YgQnJ1dHVzIHRvb2sgdGhlaXIgcGxhY2VzIHJvdW5kIHRoZSBiYWNrIG9mIENhZXNhcidzIGNoYWlyLCB3aGlsZSBvdGhlcnMgd2VudCB0byBtZWV0IGhpbSwgYXMgdGhvdWdoIHRoZXkgd291bGQgc3VwcG9ydCB0aGUgcGV0aXRpb24gd2hpY2ggVGlsbGl1cyBDaW1iZXIgcHJlc2VudGVkIHRvIENhZXNhciBpbiBiZWhhbGYgb2YgaGlzIGV4aWxlZCBicm90aGVyLCBhbmQgdGhleSBqb2luZWQgdGhlaXIgZW50cmVhdGllcyB0byBoaXMgYW5kIGFjY29tcGFuaWVkIENhZXNhciB1cCB0byBoaXMgY2hhaXIuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiwgYWZ0ZXIgdGFraW5nIGhpcyBzZWF0LCBDYWVzYXIgY29udGludWVkIHRvIHJlcHVsc2UgdGhlaXIgcGV0aXRpb25zLCBhbmQsIGFzIHRoZXkgcHJlc3NlZCB1cG9uIGhpbSB3aXRoIGdyZWF0ZXIgaW1wb3J0dW5pdHksIGJlZ2FuIHRvIHNob3cgYW5nZXIgdG93YXJkcyBvbmUgYW5kIGFub3RoZXIgb2YgdGhlbSwgVGlsbGl1cyBzZWl6ZWQgaGlzIHRvZ2Egd2l0aCBib3RoIGhhbmRzIGFuZCBwdWxsZWQgaXQgZG93biBmcm9tIGhpcyBuZWNrLiBUaGlzIHdhcyB0aGUgc2lnbmFsIGZvciB0aGUgYXNzYXVsdC4gSXQgd2FzIENhc2NhIHdobyBnYXZlIGhpbSB0aGUgZmlyc3QgYmxvdyB3aXRoIGhpcyBkYWdnZXIsIGluIHRoZSBuZWNrLCBub3QgYSBtb3J0YWwgd291bmQsIG5vciBldmVuIGEgZGVlcCBvbmUsIGZvciB3aGljaCBoZSB3YXMgdG9vIG11Y2ggY29uZnVzZWQsIGFzIHdhcyBuYXR1cmFsIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBkZWVkIG9mIGdyZWF0IGRhcmluZzsgc28gdGhhdCBDYWVzYXIgdHVybmVkIGFib3V0LCBncmFzcGVkIHRoZSBrbmlmZSwgYW5kIGhlbGQgaXQgZmFzdC4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbW9zdCB0aGUgc2FtZSBpbnN0YW50IGJvdGggY3JpZWQgb3V0LCB0aGUgc21pdHRlbiBtYW4gaW4gTGF0aW46IAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFjY3Vyc2VkIENhc2NhLCB3aGF0IGRvZXN0IHRob3U/PC9xPiBhbmQgdGhlIHNtaXRlciwgaW4gR3JlZWssIHRvIGhpcyBicm90aGVyOiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ccm90aGVyLCBoZWxwITwvcT4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDxwPlNvIHRoZSBhZmZhaXIgYmVnYW4sIGFuZCB0aG9zZSB3aG8gd2VyZSBub3QgcHJpdnkgdG8gdGhlIHBsb3Qgd2VyZSBmaWxsZWQgd2l0aCBjb25zdGVybmF0aW9uIGFuZCBob3Jyb3IgYXQgd2hhdCB3YXMgZ29pbmcgb247IHRoZXkgZGFyZWQgbm90IGZseSwgbm9yIGdvIHRvIENhZXNhcidzIGhlbHAsIG5heSwgbm9yIGV2ZW4gdXR0ZXIgYSB3b3JkLiBCdXQgdGhvc2Ugd2hvIGhhZCBwcmVwYXJlZCB0aGVtc2VsdmVzIGZvciB0aGUgbXVyZGVyIGJhcmVkIGVhY2ggb2YgdGhlbSBoaXMgZGFnZ2VyLCAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgQ2Flc2FyLCBoZW1tZWQgaW4gb24gYWxsIHNpZGVzLCB3aGljaGV2ZXIgd2F5IGhlIHR1cm5lZCBjb25mcm9udGluZyBibG93cyBvZiB3ZWFwb25zIGFpbWVkIGF0IGhpcyBmYWNlIGFuZCBleWVzLCBkcml2ZW4gaGl0aGVyIGFuZCB0aGl0aGVyIGxpa2UgYSB3aWxkIGJlYXN0LCB3YXMgZW50YW5nbGVkIGluIHRoZSBoYW5kcyBvZiBhbGw7IGZvciBhbGwgaGFkIHRvIHRha2UgcGFydCBpbiB0aGUgc2FjcmlmaWNlIGFuZCB0YXN0ZSBvZiB0aGUgc2xhdWdodGVyLiBUaGVyZWZvcmUgQnJ1dHVzIGFsc28gZ2F2ZSBoaW0gb25lIGJsb3cgaW4gdGhlIGdyb2luLiBBbmQgaXQgaXMgc2FpZCBieSBzb21lIHdyaXRlcnMgdGhhdCBhbHRob3VnaCBDYWVzYXIgZGVmZW5kZWQgaGltc2VsZiBhZ2FpbnN0IHRoZSByZXN0IGFuZCBkYXJ0ZWQgdGhpcyB3YXkgYW5kIHRoYXQgYW5kIGNyaWVkIGFsb3VkLCB3aGVuIGhlIHNhdyB0aGF0IEJydXR1cyBoYWQgZHJhd24gaGlzIGRhZ2dlciwgaGUgcHVsbGVkIGhpcyB0b2dhIGRvd24gb3ZlciBoaXMgaGVhZCBhbmQgc2FuaywgCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+ZWl0aGVyIGJ5IGNoYW5jZSBvciBiZWNhdXNlIHB1c2hlZCB0aGVyZSBieSBoaXMgbXVyZGVyZXJzLCBhZ2FpbnN0IHRoZSBwZWRlc3RhbCBvbiB3aGljaCB0aGUgc3RhdHVlIG9mIFBvbXBleSBzdG9vZC4gQW5kIHRoZSBwZWRlc3RhbCB3YXMgZHJlbmNoZWQgd2l0aCBoaXMgYmxvb2QsIHNvIHRoYXQgb25lIG1pZ2h0IGhhdmUgdGhvdWdodCB0aGF0IFBvbXBleSBoaW1zZWxmIHdhcyBwcmVzaWRpbmcgb3ZlciB0aGlzIHZlbmdlYW5jZSB1cG9uIGhpcyBlbmVteSwgd2hvIG5vdyBsYXkgcHJvc3RyYXRlIGF0IGhpcyBmZWV0LCBxdWl2ZXJpbmcgZnJvbSBhIG11bHRpdHVkZSBvZiB3b3VuZHMuIEZvciBpdCBpcyBzYWlkIHRoYXQgaGUgcmVjZWl2ZWQgdHdlbnR5LXRocmVlOyBhbmQgbWFueSBvZiB0aGUgY29uc3BpcmF0b3JzIHdlcmUgd291bmRlZCBieSBvbmUgYW5vdGhlciwgYXMgdGhleSBzdHJ1Z2dsZWQgdG8gcGxhbnQgYWxsIHRob3NlIGJsb3dzIGluIG9uZSBib2R5LjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgdGh1cyBkb25lIHRvIGRlYXRoLCB0aGUgc2VuYXRvcnMsIGFsdGhvdWdoIEJydXR1cyBjYW1lIGZvcndhcmQgYXMgaWYgdG8gc2F5IHNvbWV0aGluZyBhYm91dCB3aGF0IGhhZCBiZWVuIGRvbmUsIHdvdWxkIG5vdCB3YWl0IHRvIGhlYXIgaGltLCBidXQgYnVyc3Qgb3V0IG9mIGRvb3JzIGFuZCBmbGVkLCB0aHVzIGZpbGxpbmcgdGhlIHBlb3BsZSB3aXRoIGNvbmZ1c2lvbiBhbmQgaGVscGxlc3MgZmVhciwgc28gdGhhdCBzb21lIG9mIHRoZW0gY2xvc2VkIHRoZWlyIGhvdXNlcywgd2hpbGUgb3RoZXJzIGxlZnQgdGhlaXIgY291bnRlcnMgYW5kIHBsYWNlcyBvZiBidXNpbmVzcyBhbmQgcmFuLCBmaXJzdCB0byB0aGUgcGxhY2UgdG8gc2VlIHdoYXQgaGFkIGhhcHBlbmVkLCB0aGVuIGF3YXkgZnJvbSB0aGUgcGxhY2Ugd2hlbiB0aGV5IGhhZCBzZWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbnRvbnkgYW5kIExlcGlkdXMsIHRoZSBjaGllZiBmcmllbmRzIG9mIENhZXNhciwgc3RvbGUgYXdheSBhbmQgdG9vayByZWZ1Z2UgaW4gdGhlIGhvdXNlcyBvZiBvdGhlcnMuIEJ1dCBCcnV0dXMgYW5kIGhpcyBwYXJ0aXNhbnMsIGp1c3QgYXMgdGhleSB3ZXJlLCBzdGlsbCB3YXJtIGZyb20gdGhlIHNsYXVnaHRlciwgZGlzcGxheWluZyB0aGVpciBkYWdnZXJzIGJhcmUsIHdlbnQgYWxsIGluIGEgYm9keSBvdXQgb2YgdGhlIHNlbmF0ZS1ob3VzZSBhbmQgbWFyY2hlZCB0byB0aGUgQ2FwaXRvbCwgbm90IGxpa2UgZnVnaXRpdmVzLCBidXQgd2l0aCBnbGFkIGZhY2VzIGFuZCBmdWxsIG9mIGNvbmZpZGVuY2UsIHN1bW1vbmluZyB0aGUgbXVsdGl0dWRlIHRvIGZyZWVkb20sIGFuZCB3ZWxjb21pbmcgaW50byB0aGVpciByYW5rcyB0aGUgbW9zdCBkaXN0aW5ndWlzaGVkIG9mIHRob3NlIHdobyBtZXQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSBhbHNvIGpvaW5lZCB0aGVpciBudW1iZXIgYW5kIHdlbnQgdXAgd2l0aCB0aGVtIGFzIHRob3VnaCB0aGV5IGhhZCBzaGFyZWQgaW4gdGhlIGRlZWQsIGFuZCBsYWlkIGNsYWltIHRvIHRoZSBnbG9yeSBvZiBpdCwgb2Ygd2hvbSB3ZXJlIENhaXVzIE9jdGF2aXVzIGFuZCBMZW50dWx1cyBTcGludGhlci4gVGhlc2UgbWVuLCB0aGVuLCBwYWlkIHRoZSBwZW5hbHR5IGZvciB0aGVpciBpbXBvc3R1cmUgbGF0ZXIsIHdoZW4gdGhleSB3ZXJlIHB1dCB0byBkZWF0aCBieSBBbnRvbnkgYW5kIHRoZSB5b3VuZyBDYWVzYXIsIHdpdGhvdXQgZXZlbiBlbmpveWluZyB0aGUgZmFtZSBmb3IgdGhlIHNha2Ugb2Ygd2hpY2ggdGhleSBkaWVkLCBvd2luZyB0byB0aGUgZGlzYmVsaWVmIG9mIHRoZWlyIGZlbGxvdyBtZW4uIEZvciBldmVuIHRob3NlIHdobyBwdW5pc2hlZCB0aGVtIGRpZCBub3QgZXhhY3QgYSBwZW5hbHR5IGZvciB3aGF0IHRoZXkgZGlkLCBidXQgZm9yIHdoYXQgdGhleSB3aXNoZWQgdGhleSBoYWQgZG9uZS48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIG5leHQgZGF5IEJydXR1cyBjYW1lIGRvd24gYW5kIGhlbGQgYSBkaXNjb3Vyc2UsIGFuZCB0aGUgcGVvcGxlIGxpc3RlbmVkIHRvIHdoYXQgd2FzIHNhaWQgd2l0aG91dCBlaXRoZXIgZXhwcmVzc2luZyByZXNlbnRtZW50IGF0IHdoYXQgaGFkIGJlZW4gZG9uZSBvciBhcHBlYXJpbmcgdG8gYXBwcm92ZSBvZiBpdDsgdGhleSBzaG93ZWQsIGhvd2V2ZXIsIGJ5IHRoZWlyIGRlZXAgc2lsZW5jZSwgdGhhdCB3aGlsZSB0aGV5IHBpdGllZCBDYWVzYXIsIHRoZXkgcmVzcGVjdGVkIEJydXR1cy4gVGhlIHNlbmF0ZSwgdG9vLCB0cnlpbmcgdG8gbWFrZSBhIGdlbmVyYWwgYW1uZXN0eSBhbmQgcmVjb25jaWxpYXRpb24sIHZvdGVkIHRvIGdpdmUgQ2Flc2FyIGRpdmluZSBob25vdXJzIGFuZCBub3QgdG8gZGlzdHVyYiBldmVuIHRoZSBtb3N0IGluc2lnbmlmaWNhbnQgbWVhc3VyZSB3aGljaCBoZSBoYWQgYWRvcHRlZCB3aGVuIGluIHBvd2VyOyB3aGlsZSB0byBCcnV0dXMgYW5kIGhpcyBwYXJ0aXNhbnMgaXQgZGlzdHJpYnV0ZWQgcHJvdmluY2VzIGFuZCBnYXZlIHN1aXRhYmxlIGhvbm91cnMsIHNvIHRoYXQgZXZlcnlib2R5IHRob3VnaHQgdGhhdCBtYXR0ZXJzIHdlcmUgZGVjaWRlZCBhbmQgc2V0dGxlZCBpbiB0aGUgYmVzdCBwb3NzaWJsZSBtYW5uZXIuPC9wPgogICAgICAgICA8cD4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI2OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSB3aWxsIG9mIENhZXNhciB3YXMgb3BlbmVkIGFuZCBpdCB3YXMgZm91bmQgdGhhdCBoZSBoYWQgZ2l2ZW4gZXZlcnkgUm9tYW4gY2l0aXplbiBhIGNvbnNpZGVyYWJsZSBnaWZ0LCBhbmQgd2hlbiB0aGUgbXVsdGl0dWRlIHNhdyBoaXMgYm9keSBjYXJyaWVkIHRocm91Z2ggdGhlIGZvcnVtIGFsbCBkaXNmaWd1cmVkIHdpdGggaXRzIHdvdW5kcywgdGhleSBubyBsb25nZXIga2VwdCB0aGVtc2VsdmVzIHdpdGhpbiB0aGUgcmVzdHJhaW50cyBvZiBvcmRlciBhbmQgZGlzY2lwbGluZSwgYnV0IGFmdGVyIGhlYXBpbmcgcm91bmQgdGhlIGJvZHkgYmVuY2hlcywgcmFpbGluZ3MsIGFuZCB0YWJsZXMgZnJvbSB0aGUgZm9ydW0sIHRoZXkgc2V0IGZpcmUgdG8gdGhlbSBhbmQgYnVybmVkIGl0IHRoZXJlOyB0aGVuLCBsaWZ0aW5nIGJsYXppbmcgYnJhbmRzIG9uIGhpZ2gsIHRoZXkgcmFuIHRvIHRoZSBob3VzZXMgb2YgdGhlIG11cmRlcmVycyB3aXRoIGludGVudCB0byBidXJuIHRoZW0gZG93biwgd2hpbGUgb3RoZXJzIHdlbnQgZXZlcnkgd2hpdGhlciB0aHJvdWdoIHRoZSBjaXR5IHNlZWtpbmcgdG8gc2VpemUgdGhlIG1lbiB0aGVtc2VsdmVzIGFuZCB0ZWFyIHRoZW0gdG8gcGllY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Qgb25lIG9mIHRoZXNlIGNhbWUgaW4gdGhlaXIgd2F5LCBidXQgYWxsIHdlcmUgd2VsbCBiYXJyaWNhZGVkLiBUaGVyZSB3YXMgYSBjZXJ0YWluIENpbm5hLCBob3dldmVyLCBvbmUgb2YgdGhlIGZyaWVuZHMgb2YgQ2Flc2FyLCB3aG8gY2hhbmNlZCwgYXMgdGhleSBzYXksIHRvIGhhdmUgc2VlbiBkdXJpbmcgdGhlIHByZXZpb3VzIG5pZ2h0IGEgc3RyYW5nZSB2aXNpb24uIEhlIGRyZWFtZWQsIHRoYXQgaXMsIHRoYXQgaGUgd2FzIGludml0ZWQgdG8gc3VwcGVyIGJ5IENhZXNhciwgYW5kIHRoYXQgd2hlbiBoZSBleGN1c2VkIGhpbXNlbGYsIENhZXNhciBsZWQgaGltIGFsb25nIGJ5IHRoZSBoYW5kLCBhbHRob3VnaCBoZSBkaWQgbm90IHdpc2ggdG8gZ28sIGJ1dCByZXNpc3RlZC4gTm93LCB3aGVuIGhlIGhlYXJkIHRoYXQgdGhleSB3ZXJlIGJ1cm5pbmcgdGhlIGJvZHkgb2YgQ2Flc2FyIGluIHRoZSBmb3J1bSwgaGUgcm9zZSB1cCBhbmQgd2VudCB0aGl0aGVyIG91dCBvZiByZXNwZWN0LCBhbHRob3VnaCBoZSBoYWQgbWlzZ2l2aW5ncyBhcmlzaW5nIGZyb20gaGlzIHZpc2lvbiwgYW5kIHdhcyBhdCB0aGUgc2FtZSB0aW1lIGluIGEgZmV2ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHNpZ2h0IG9mIGhpbSwgb25lIG9mIHRoZSBtdWx0aXR1ZGUgdG9sZCBoaXMgbmFtZSB0byBhbm90aGVyIHdobyBhc2tlZCBoaW0gd2hhdCBpdCB3YXMsIGFuZCBoZSB0byBhbm90aGVyLCBhbmQgYXQgb25jZSB3b3JkIHJhbiB0aHJvdWdoIHRoZSB3aG9sZSB0aHJvbmcgdGhhdCB0aGlzIG1hbiB3YXMgb25lIG9mIHRoZSBtdXJkZXJlcnMgb2YgQ2Flc2FyLiBGb3IgdGhlcmUgd2FzIGFtb25nIHRoZSBjb25zcGlyYXRvcnMgYSBtYW4gd2hvIGJvcmUgdGhpcyBzYW1lIG5hbWUgb2YgQ2lubmEsIGFuZCBhc3N1bWluZyB0aGF0IHRoaXMgbWFuIHdhcyBoZSwgdGhlIGNyb3dkIHJ1c2hlZCB1cG9uIGhpbSBhbmQgdG9yZSBoaW0gaW4gcGllY2VzIGFtb25nIHRoZW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMjAuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXM8L3RpdGxlPiwgeHguIDUgZjwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIG1hZGUgQnJ1dHVzIGFuZCBDYXNzaXVzIGFmcmFpZCwgYW5kIG5vdCBtYW55IGRheXMgYWZ0ZXJ3YXJkcyB0aGV5IHdpdGhkcmV3IGZyb20gdGhlIGNpdHkuIFdoYXQgdGhleSBkaWQgYW5kIHN1ZmZlcmVkIGJlZm9yZSB0aGV5IGRpZWQsIGhhcyBiZWVuIHRvbGQgaW4gdGhlIExpZmUgb2YgQnJ1dHVzLjwvcD4KICAgICAgICAgPHA+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNjkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGUgdGltZSBvZiBoaXMgZGVhdGggQ2Flc2FyIHdhcyBmdWxseSBmaWZ0eS1zaXggeWVhcnMgb2xkLCBidXQgaGUgaGFkIHN1cnZpdmVkIFBvbXBleSBub3QgbXVjaCBtb3JlIHRoYW4gZm91ciB5ZWFycywgd2hpbGUgb2YgdGhlIHBvd2VyIGFuZCBkb21pbmlvbiB3aGljaCBoZSBoYWQgc291Z2h0IGFsbCBoaXMgbGlmZSBhdCBzbyBncmVhdCByaXNrcywgYW5kIGJhcmVseSBhY2hpZXZlZCBhdCBsYXN0LCBvZiB0aGlzIGhlIGhhZCByZWFwZWQgbm8gZnJ1aXQgYnV0IHRoZSBuYW1lIG9mIGl0IG9ubHksIGFuZCBhIGdsb3J5IHdoaWNoIGhhZCBhd2FrZW5lZCBlbnZ5IG9uIHRoZSBwYXJ0IG9mIGhpcyBmZWxsb3cgY2l0aXplbnMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBncmVhdCBndWFyZGlhbi1nZW5pdXMgb2YgdGhlIG1hbiwgd2hvc2UgaGVscCBoZSBoYWQgZW5qb3llZCB0aHJvdWdoIGxpZmUsIGZvbGxvd2VkIHVwb24gaGltIGV2ZW4gYWZ0ZXIgZGVhdGggYXMgYW4gYXZlbmdlciBvZiBoaXMgbXVyZGVyLCBkcml2aW5nIGFuZCB0cmFja2luZyBkb3duIGhpcyBzbGF5ZXJzIG92ZXIgZXZlcnkgbGFuZCBhbmQgc2VhIHVudGlsIG5vdCBvbmUgb2YgdGhlbSB3YXMgbGVmdCwgYnV0IGV2ZW4gdGhvc2Ugd2hvIGluIGFueSB3YXkgc29ldmVyIGVpdGhlciBwdXQgaGFuZCB0byB0aGUgZGVlZCBvciB0b29rIHBhcnQgaW4gdGhlIHBsb3Qgd2VyZSBwdW5pc2hlZC48L3A+CiAgICAgICAgIDxwPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW1vbmcgZXZlbnRzIG9mIG1hbidzIG9yZGVyaW5nLCB0aGUgbW9zdCBhbWF6aW5nIHdhcyB0aGF0IHdoaWNoIGJlZmVsbCBDYXNzaXVzOyBmb3IgYWZ0ZXIgaGlzIGRlZmVhdCBhdCBQaGlsaXBwaSBoZSBzbGV3IGhpbXNlbGYgd2l0aCB0aGF0IHZlcnkgZGFnZ2VyIHdoaWNoIGhlIGhhZCB1c2VkIGFnYWluc3QgQ2Flc2FyOyBhbmQgYW1vbmcgZXZlbnRzIG9mIGRpdmluZSBvcmRlcmluZywgdGhlcmUgd2FzIHRoZSBncmVhdCBjb21ldCwgd2hpY2ggc2hvd2VkIGl0c2VsZiBpbiBncmVhdCBzcGxlbmRvdXIgZm9yIHNldmVuIG5pZ2h0cyBhZnRlciBDYWVzYXIncyBtdXJkZXIsIGFuZCB0aGVuIGRpc2FwcGVhcmVkIDsgYWxzbywgdGhlIG9ic2N1cmF0aW9uIG9mIHRoZSBzdW4ncyByYXlzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZHVyaW5nIGFsbCB0aGF0IHllYXIgaXRzIG9yYiByb3NlIHBhbGUgYW5kIHdpdGhvdXQgcmFkaWFuY2UsIHdoaWxlIHRoZSBoZWF0IHRoYXQgY2FtZSBkb3duIGZyb20gaXQgd2FzIHNsaWdodCBhbmQgaW5lZmZlY3R1YWwsIHNvIHRoYXQgdGhlIGFpciBpbiBpdHMgY2lyY3VsYXRpb24gd2FzIGRhcmsgYW5kIGhlYXZ5IG93aW5nIHRvIHRoZSBmZWVibGVuZXNzIG9mIHRoZSB3YXJtdGggdGhhdCBwZW5ldHJhdGVkIGl0LCBhbmQgdGhlIGZydWl0cywgaW1wZXJmZWN0IGFuZCBoYWxmIHJpcGUsIHdpdGhlcmVkIGF3YXkgYW5kIHNocml2ZWxsZWQgdXAgb24gYWNjb3VudCBvZiB0aGUgY29sZG5lc3Mgb2YgdGhlIGF0bW9zcGhlcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSB0aGUgcGhhbnRvbSB0aGF0IGFwcGVhcmVkIHRvIEJydXR1cyBzaG93ZWQgdGhhdCB0aGUgbXVyZGVyIG9mIENhZXNhciB3YXMgbm90IHBsZWFzaW5nIHRvIHRoZSBnb2RzOyBhbmQgaXQgd2FzIG9uIHRoaXMgd2lzZS4gQXMgaGUgd2FzIGFib3V0IHRvIHRha2UgaGlzIGFybXkgYWNyb3NzIGZyb20gQWJ5ZG9zIHRvIHRoZSBvdGhlciBjb250aW5lbnQsIGhlIHdhcyBseWluZyBkb3duIGF0IG5pZ2h0LCBhcyBoaXMgY3VzdG9tIHdhcywgaW4gaGlzIHRlbnQsIG5vdCBzbGVlcGluZywgYnV0IHRoaW5raW5nIG9mIHRoZSBmdXR1cmU7IGZvciBpdCBpcyBzYWlkIHRoYXQgb2YgYWxsIGdlbmVyYWxzIEJydXR1cyB3YXMgbGVhc3QgZ2l2ZW4gdG8gc2xlZXAsIGFuZCB0aGF0IGhlIG5hdHVyYWxseSByZW1haW5lZCBhd2FrZSBhIGxvbmdlciB0aW1lIHRoYW4gYW55Ym9keSBlbHNlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgbm93IGhlIHRob3VnaHQgaGUgaGVhcmQgYSBub2lzZSBhdCB0aGUgZG9vciwgYW5kIGxvb2tpbmcgdG93YXJkcyB0aGUgbGlnaHQgb2YgdGhlIGxhbXAsIHdoaWNoIHdhcyBzbG93bHkgZ29pbmcgb3V0LCBoZSBzYXcgYSBmZWFyZnVsIHZpc2lvbiBvZiBhIG1hbiBvZiB1bm5hdHVyYWwgc2l6ZSBhbmQgaGFyc2ggYXNwZWN0LiBBdCBmaXJzdCBoZSB3YXMgdGVycmlmaWVkLCBidXQgd2hlbiBoZSBzYXcgdGhhdCB0aGUgdmlzaXRvciBuZWl0aGVyIGRpZCBub3Igc2FpZCBhbnl0aGluZywgYnV0IHN0b29kIGluIHNpbGVuY2UgYnkgaGlzIGNvdWNoLCBoZSBhc2tlZCBoaW0gd2hvIGhlIHdhcy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB0aGUgcGhhbnRvbSBhbnN3ZXJlZCBoaW06IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBhbSB0aHkgZXZpbCBnZW5pdXMsIEJydXR1cywgYW5kIHRob3Ugc2hhbHQgc2VlIG1lIGF0IFBoaWxpcHBpLjwvcT4gQXQgdGhlIHRpbWUsIHRoZW4sIEJydXR1cyBzYWlkIGNvdXJhZ2VvdXNseTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHNoYWxsIHNlZSB0aGVlOzwvcT4gYW5kIHRoZSBoZWF2ZW5seSB2aXNpdG9yIGF0IG9uY2Ugd2VudCBhd2F5LiBTdWJzZXF1ZW50bHksIGhvd2V2ZXIsIHdoZW4gYXJyYXllZCBhZ2FpbnN0IEFudG9ueSBhbmQgQ2Flc2FyIGF0IFBoaWxpcHBpLCBpbiB0aGUgZmlyc3QgYmF0dGxlIGhlIGNvbnF1ZXJlZCB0aGUgZW5lbXkgaW4gaGlzIGZyb250LCByb3V0ZWQgYW5kIHNjYXR0ZXJlZCB0aGVtLCBhbmQgc2Fja2VkIHRoZSBjYW1wIG9mIENhZXNhcjsgCgkJCQk8bWlsZXN0b25lIG49IjgiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGFzIGhlIHdhcyBhYm91dCB0byBmaWdodCB0aGUgc2Vjb25kIGJhdHRsZSwgdGhlIHNhbWUgcGhhbnRvbSB2aXNpdGVkIGhpbSBhZ2FpbiBhdCBuaWdodCwgYW5kIHRob3VnaCBpdCBzYWlkIG5vdGhpbmcgdG8gaGltLCBCcnV0dXMgdW5kZXJzdG9vZCBoaXMgZmF0ZSwgYW5kIHBsdW5nZWQgaGVhZGxvbmcgaW50byBkYW5nZXIuIEhlIGRpZCBub3QgZmFsbCBpbiBiYXR0bGUsIGhvd2V2ZXIsIGJ1dCBhZnRlciB0aGUgcm91dCByZXRpcmVkIHRvIGEgY3Jlc3Qgb2YgZ3JvdW5kLCBwdXQgaGlzIG5ha2VkIHN3b3JkIHRvIGhpcyBicmVhc3QgKHdoaWxlIGEgY2VydGFpbiBmcmllbmQsIGFzIHRoZXkgc2F5LCBoZWxwZWQgdG8gZHJpdmUgdGhlIGJsb3cgaG9tZSksIGFuZCBzbyBkaWVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDM2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIHh4eHZpLjwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA0OC4xIiB2YWxpZD0ieWVzIj54bHZpaWkuPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDUyLjEiIHZhbGlkPSJ5ZXMiPmxpaTwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgIDwvYm9keT4KICAgPGhlYWQgY2xhc3M9InRyYW5zbGF0aW9uIj5DQUVTQVI8L2hlYWQ+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgd2lmZSBvZiBDYWVzYXI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hbnkgdGhpbmsgdGhhdCBvcGVuaW5nIHBhcmFncmFwaHMgb2YgdGhpcyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MaWZlPC90aXRsZT4sIGRlc2NyaWJpbmcgdGhlIGJpcnRoIGFuZCBib3lob29kIG9mIENhZXNhciwgaGF2ZSBiZWVuIGxvc3QuPC9ub3RlPiB3YXMgQ29ybmVsaWEsIHRoZSBkYXVnaHRlciBvZiB0aGUgQ2lubmEgd2hvIGhhZCBvbmNlIGhlbGQgdGhlIHNvbGUgcG93ZXIgYXQgUm9tZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDg2IEIuQy4sIGFmdGVyIHRoZSBkZWF0aCBvZiBoaXMgY29sbGVhZ3VlLCBWYWxlcml1cyBGbGFjY3VzLjwvbm90ZT4gYW5kIHdoZW4gU3VsbGEgYmVjYW1lIG1hc3RlciBvZiBhZmZhaXJzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODIgQi5DLiBDZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBpeC4gMTwvYmlibD4gZi48L25vdGU+IGhlIGNvdWxkIG5vdCwgZWl0aGVyIGJ5IHByb21pc2VzIG9yIHRocmVhdHMsIGluZHVjZSBDYWVzYXIgdG8gcHV0IGhlciBhd2F5LCBhbmQgdGhlcmVmb3JlIGNvbmZpc2NhdGVkIGhlciBkb3dyeS4gTm93LCB0aGUgcmVhc29uIGZvciBDYWVzYXIncyBoYXRyZWQgb2YgU3VsbGEgd2FzIENhZXNhcidzIHJlbGF0aW9uc2hpcCB0byBNYXJpdXMuIEZvciBKdWxpYSwgYSBzaXN0ZXIgb2YgQ2Flc2FyJ3MgZmF0aGVyLCB3YXMgdGhlIHdpZmUgb2YgTWFyaXVzIHRoZSBFbGRlciwgYW5kIHRoZSBtb3RoZXIgb2YgTWFyaXVzIHRoZSBZb3VuZ2VyLCB3aG8gd2FzIHRoZXJlZm9yZSBDYWVzYXIncyBjb3VzaW4uIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIENhZXNhciB3YXMgbm90IHNhdGlzZmllZCB0byBiZSBvdmVybG9va2VkIGF0IGZpcnN0IGJ5IFN1bGxhLCB3aG8gd2FzIGJ1c3kgd2l0aCBhIG11bHRpdHVkZSBvZiBwcm9zY3JpcHRpb25zLCBidXQgaGUgY2FtZSBiZWZvcmUgdGhlIHBlb3BsZSBhcyBjYW5kaWRhdGUgZm9yIGEgcHJpZXN0aG9vZCwgYWx0aG91Z2ggaGUgd2FzIG5vdCB5ZXQgbXVjaCBtb3JlIHRoYW4gYSBzdHJpcGxpbmcuIFRvIHRoaXMgY2FuZGlkYWN5IFN1bGxhIHNlY3JldGx5IG9wcG9zZWQgaGltc2VsZiwgYW5kIHRvb2sgbWVhc3VyZXMgdG8gbWFrZSBDYWVzYXIgZmFpbCBpbiBpdCwgYW5kIHdoZW4gaGUgd2FzIGRlbGliZXJhdGluZyBhYm91dCBwdXR0aW5nIGhpbSB0byBkZWF0aCBhbmQgc29tZSBzYWlkIHRoZXJlIHdhcyBubyByZWFzb24gZm9yIGtpbGxpbmcgYSBtZXJlIGJveSBsaWtlIGhpbSwgaGUgZGVjbGFyZWQgdGhhdCB0aGV5IGhhZCBubyBzZW5zZSBpZiB0aGV5IGRpZCBub3Qgc2VlIGluIHRoaXMgYm95IG1hbnkgTWFyaXVzZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5OYW0gQ2Flc2FyaSBtdWx0b3MgTWFyaW9zIGluZXNzZTwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDEiIHZhbGlkPSJ5ZXMiPlN1ZXRvbml1cywgPHRpdGxlPkRpdnVzIEp1bGl1czwvdGl0bGU+LCBpLjwvYmlibD4pLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGlzIHNwZWVjaCB3YXMgcmVwb3J0ZWQgdG8gQ2Flc2FyLCBoZSBoaWQgaGltc2VsZiBmb3Igc29tZSB0aW1lLCB3YW5kZXJpbmcgYWJvdXQgaW4gdGhlIGNvdW50cnkgb2YgdGhlIFNhYmluZXMuIFRoZW4sIGFzIGhlIHdhcyBjaGFuZ2luZyBoaXMgYWJvZGUgYnkgbmlnaHQgb24gYWNjb3VudCBvZiBzaWNrbmVzcywgaGUgZmVsbCBpbiB3aXRoIHNvbGRpZXJzIG9mIFN1bGxhIHdobyB3ZXJlIHNlYXJjaGluZyB0aG9zZSByZWdpb25zIGFuZCBhcnJlc3RpbmcgdGhlIG1lbiBpbiBoaWRpbmcgdGhlcmUuIENhZXNhciBnYXZlIHRoZWlyIGxlYWRlciwgQ29ybmVsaXVzLCB0d28gdGFsZW50cyB0byBzZXQgaGltIGZyZWUsIGFuZCBhdCBvbmNlIHdlbnQgZG93biB0byB0aGUgc2VhIGFuZCBzYWlsZWQgdG8gS2luZyBOaWNvbWVkZXMgaW4gQml0aHluaWEuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyIHNlcnZlZCB1bmRlciBNYXJjdXMgVGhlcm11cywgcHJhZXRvciBvZiBBc2lhLCBpbiA4MS04MCBCLkMuLCBiZWluZyB0aGVuIG5pbmV0ZWVuIHllYXJzIG9mIGFnZSwgYW5kIGJ5IGhpbSB3YXMgc2VudCB0byBCaXRoeW5pYSBpbiBvcmRlciB0byByYWlzZSBhIGZsZWV0IHRvIGFzc2lzdCBpbiB0aGUgc2llZ2Ugb2YgTWl0eWxlbmUuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaXRoIGhpbSBoZSB0YXJyaWVkIGEgc2hvcnQgdGltZSwgYW5kIHRoZW4sIG9uIGhpcyB2b3lhZ2UgYmFjayw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BY2NvcmRpbmcgdG8gU3VldG9uaXVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkRpdi4gSnVsLjwvdGl0bGU+IDQ8L2JpYmw+KSwgaXQgd2FzIG9uIGEgdm95YWdlIGZyb20gUm9tZSB0byBSaG9kZXMgKGFmdGVyIDc3IEIuQy4pIHRoYXQgQ2Flc2FyIHdhcyBjYXB0dXJlZCBieSBwaXJhdGVzLjwvbm90ZT4gd2FzIGNhcHR1cmVkLCBuZWFyIHRoZSBpc2xhbmQgUGhhcm1hY3VzYSwgYnkgcGlyYXRlcywgd2hvIGFscmVhZHkgYXQgdGhhdCB0aW1lIGNvbnRyb2xsZWQgdGhlIHNlYSB3aXRoIGxhcmdlIGFybWFtZW50cyBhbmQgY291bnRsZXNzIHNtYWxsIHZlc3NlbHMuPC9wPgogICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdpZmUgb2YgQ2Flc2FyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5NYW55IHRoaW5rIHRoYXQgb3BlbmluZyBwYXJhZ3JhcGhzIG9mIHRoaXMgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlmZTwvdGl0bGU+LCBkZXNjcmliaW5nIHRoZSBiaXJ0aCBhbmQgYm95aG9vZCBvZiBDYWVzYXIsIGhhdmUgYmVlbiBsb3N0Ljwvbm90ZT4gd2FzIENvcm5lbGlhLCB0aGUgZGF1Z2h0ZXIgb2YgdGhlIENpbm5hIHdobyBoYWQgb25jZSBoZWxkIHRoZSBzb2xlIHBvd2VyIGF0IFJvbWUsPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TGlmZTwvdGl0bGU+LCBkZXNjcmliaW5nIHRoZSBiaXJ0aCBhbmQgYm95aG9vZCBvZiBDYWVzYXIsIGhhdmUgYmVlbiBsb3N0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gODYgQi5DLiwgYWZ0ZXIgdGhlIGRlYXRoIG9mIGhpcyBjb2xsZWFndWUsIFZhbGVyaXVzIEZsYWNjdXMuPC9ub3RlPiBhbmQgd2hlbiBTdWxsYSBiZWNhbWUgbWFzdGVyIG9mIGFmZmFpcnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA4MiBCLkMuIENmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gOS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGl4LiAxPC9iaWJsPiBmLjwvbm90ZT4gaGUgY291bGQgbm90LCBlaXRoZXIgYnkgcHJvbWlzZXMgb3IgdGhyZWF0cywgaW5kdWNlIENhZXNhciB0byBwdXQgaGVyIGF3YXksIGFuZCB0aGVyZWZvcmUgY29uZmlzY2F0ZWQgaGVyIGRvd3J5LiBOb3csIHRoZSByZWFzb24gZm9yIENhZXNhcidzIGhhdHJlZCBvZiBTdWxsYSB3YXMgQ2Flc2FyJ3MgcmVsYXRpb25zaGlwIHRvIE1hcml1cy4gRm9yIEp1bGlhLCBhIHNpc3RlciBvZiBDYWVzYXIncyBmYXRoZXIsIHdhcyB0aGUgd2lmZSBvZiBNYXJpdXMgdGhlIEVsZGVyLCBhbmQgdGhlIG1vdGhlciBvZiBNYXJpdXMgdGhlIFlvdW5nZXIsIHdobyB3YXMgdGhlcmVmb3JlIENhZXNhcidzIGNvdXNpbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgaXguIDE8L2JpYmw+IGYuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGl4LiAxPC90cmFuc2xhdGlvbj4="
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWVzYXIgd2FzIG5vdCBzYXRpc2ZpZWQgdG8gYmUgb3Zlcmxvb2tlZCBhdCBmaXJzdCBieSBTdWxsYSwgd2hvIHdhcyBidXN5IHdpdGggYSBtdWx0aXR1ZGUgb2YgcHJvc2NyaXB0aW9ucywgYnV0IGhlIGNhbWUgYmVmb3JlIHRoZSBwZW9wbGUgYXMgY2FuZGlkYXRlIGZvciBhIHByaWVzdGhvb2QsIGFsdGhvdWdoIGhlIHdhcyBub3QgeWV0IG11Y2ggbW9yZSB0aGFuIGEgc3RyaXBsaW5nLiBUbyB0aGlzIGNhbmRpZGFjeSBTdWxsYSBzZWNyZXRseSBvcHBvc2VkIGhpbXNlbGYsIGFuZCB0b29rIG1lYXN1cmVzIHRvIG1ha2UgQ2Flc2FyIGZhaWwgaW4gaXQsIGFuZCB3aGVuIGhlIHdhcyBkZWxpYmVyYXRpbmcgYWJvdXQgcHV0dGluZyBoaW0gdG8gZGVhdGggYW5kIHNvbWUgc2FpZCB0aGVyZSB3YXMgbm8gcmVhc29uIGZvciBraWxsaW5nIGEgbWVyZSBib3kgbGlrZSBoaW0sIGhlIGRlY2xhcmVkIHRoYXQgdGhleSBoYWQgbm8gc2Vuc2UgaWYgdGhleSBkaWQgbm90IHNlZSBpbiB0aGlzIGJveSBtYW55IE1hcml1c2VzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPk5hbSBDYWVzYXJpIG11bHRvcyBNYXJpb3MgaW5lc3NlPC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiAxIiB2YWxpZD0ieWVzIj5TdWV0b25pdXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdnVzIEp1bGl1czwvdGl0bGU+LCBpLjwvYmlibD4pLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5OYW0gQ2Flc2FyaSBtdWx0b3MgTWFyaW9zIGluZXNzZTwvZm9yZWlnbj4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gMSIgdmFsaWQ9InllcyI+U3VldG9uaXVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZ1cyBKdWxpdXM8L3RpdGxlPiwgaS48L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXZ1cyBKdWxpdXM8L3RpdGxlPiwgaS48L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhpcyBzcGVlY2ggd2FzIHJlcG9ydGVkIHRvIENhZXNhciwgaGUgaGlkIGhpbXNlbGYgZm9yIHNvbWUgdGltZSwgd2FuZGVyaW5nIGFib3V0IGluIHRoZSBjb3VudHJ5IG9mIHRoZSBTYWJpbmVzLiBUaGVuLCBhcyBoZSB3YXMgY2hhbmdpbmcgaGlzIGFib2RlIGJ5IG5pZ2h0IG9uIGFjY291bnQgb2Ygc2lja25lc3MsIGhlIGZlbGwgaW4gd2l0aCBzb2xkaWVycyBvZiBTdWxsYSB3aG8gd2VyZSBzZWFyY2hpbmcgdGhvc2UgcmVnaW9ucyBhbmQgYXJyZXN0aW5nIHRoZSBtZW4gaW4gaGlkaW5nIHRoZXJlLiBDYWVzYXIgZ2F2ZSB0aGVpciBsZWFkZXIsIENvcm5lbGl1cywgdHdvIHRhbGVudHMgdG8gc2V0IGhpbSBmcmVlLCBhbmQgYXQgb25jZSB3ZW50IGRvd24gdG8gdGhlIHNlYSBhbmQgc2FpbGVkIHRvIEtpbmcgTmljb21lZGVzIGluIEJpdGh5bmlhLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2Flc2FyIHNlcnZlZCB1bmRlciBNYXJjdXMgVGhlcm11cywgcHJhZXRvciBvZiBBc2lhLCBpbiA4MS04MCBCLkMuLCBiZWluZyB0aGVuIG5pbmV0ZWVuIHllYXJzIG9mIGFnZSwgYW5kIGJ5IGhpbSB3YXMgc2VudCB0byBCaXRoeW5pYSBpbiBvcmRlciB0byByYWlzZSBhIGZsZWV0IHRvIGFzc2lzdCBpbiB0aGUgc2llZ2Ugb2YgTWl0eWxlbmUuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpdGggaGltIGhlIHRhcnJpZWQgYSBzaG9ydCB0aW1lLCBhbmQgdGhlbiwgb24gaGlzIHZveWFnZSBiYWNrLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2LiBKdWwuPC90aXRsZT4gNDwvYmlibD4pLCBpdCB3YXMgb24gYSB2b3lhZ2UgZnJvbSBSb21lIHRvIFJob2RlcyAoYWZ0ZXIgNzcgQi5DLikgdGhhdCBDYWVzYXIgd2FzIGNhcHR1cmVkIGJ5IHBpcmF0ZXMuPC9ub3RlPiB3YXMgY2FwdHVyZWQsIG5lYXIgdGhlIGlzbGFuZCBQaGFybWFjdXNhLCBieSBwaXJhdGVzLCB3aG8gYWxyZWFkeSBhdCB0aGF0IHRpbWUgY29udHJvbGxlZCB0aGUgc2VhIHdpdGggbGFyZ2UgYXJtYW1lbnRzIGFuZCBjb3VudGxlc3Mgc21hbGwgdmVzc2Vscy48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiA0PC9iaWJsPiksIGl0IHdhcyBvbiBhIHZveWFnZSBmcm9tIFJvbWUgdG8gUmhvZGVzIChhZnRlciA3NyBCLkMuKSB0aGF0IENhZXNhciB3YXMgY2FwdHVyZWQgYnkgcGlyYXRlcy48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiA0PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCB0aGVuLCB3aGVuIHRoZSBwaXJhdGVzIGRlbWFuZGVkIHR3ZW50eSB0YWxlbnRzIGZvciBoaXMgcmFuc29tLCBoZSBsYXVnaGVkIGF0IHRoZW0gZm9yIG5vdCBrbm93aW5nIHdobyB0aGVpciBjYXB0aXZlIHdhcywgYW5kIG9mIGhpcyBvd24gYWNjb3JkIGFncmVlZCB0byBnaXZlIHRoZW0gZmlmdHkuIEluIHRoZSBuZXh0IHBsYWNlLCBhZnRlciBoZSBoYWQgc2VudCB2YXJpb3VzIGZvbGxvd2VycyB0byB2YXJpb3VzIGNpdGllcyB0byBwcm9jdXJlIHRoZSBtb25leSBhbmQgd2FzIGxlZnQgd2l0aCBvbmUgZnJpZW5kIGFuZCB0d28gYXR0ZW5kYW50cyBhbW9uZyBDaWxpY2lhbnMsIG1vc3QgbXVyZGVyb3VzIG9mIG1lbiwgaGUgaGVsZCB0aGVtIGluIHN1Y2ggZGlzZGFpbiB0aGF0IHdoZW5ldmVyIGhlIGxheSBkb3duIHRvIHNsZWVwIGhlIHdvdWxkIHNlbmQgYW5kIG9yZGVyIHRoZW0gdG8gc3RvcCB0YWxraW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgZWlnaHQgYW5kIHRoaXJ0eSBkYXlzLCBhcyBpZiB0aGUgbWVuIHdlcmUgbm90IGhpcyB3YXRjaGVycywgYnV0IGhpcyByb3lhbCBib2R5LWd1YXJkLCBoZSBzaGFyZWQgaW4gdGhlaXIgc3BvcnRzIGFuZCBleGVyY2lzZXMgd2l0aCBncmVhdCB1bmNvbmNlcm4uIEhlIGFsc28gd3JvdGUgcG9lbXMgYW5kIHN1bmRyeSBzcGVlY2hlcyB3aGljaCBoZSByZWFkIGFsb3VkIHRvIHRoZW0sIGFuZCB0aG9zZSB3aG8gZGlkIG5vdCBhZG1pcmUgdGhlc2UgaGUgd291bGQgY2FsbCB0byB0aGVpciBmYWNlcyBpbGxpdGVyYXRlIEJhcmJhcmlhbnMsIGFuZCBvZnRlbiBsYXVnaGluZ2x5IHRocmVhdGVuZWQgdG8gaGFuZyB0aGVtIGFsbC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHBpcmF0ZXMgd2VyZSBkZWxpZ2h0ZWQgYXQgdGhpcywgYW5kIGF0dHJpYnV0ZWQgaGlzIGJvbGRuZXNzIG9mIHNwZWVjaCB0byBhIGNlcnRhaW4gc2ltcGxpY2l0eSBhbmQgYm95aXNoIG1pcnRoLiBCdXQgYWZ0ZXIgaGlzIHJhbnNvbSBoYWQgY29tZSBmcm9tIE1pbGV0dXMgYW5kIGhlIGhhZCBwYWlkIGl0IGFuZCB3YXMgc2V0IGZyZWUsIGhlIGltbWVkaWF0ZWx5IG1hbm5lZCB2ZXNzZWxzIGFuZCBwdXQgdG8gc2VhIGZyb20gdGhlIGhhcmJvdXIgb2YgTWlsZXR1cyBhZ2FpbnN0IHRoZSByb2JiZXJzLiBIZSBjYXVnaHQgdGhlbSwgdG9vLCBzdGlsbCBseWluZyBhdCBhbmNob3Igb2ZmIHRoZSBpc2xhbmQsIGFuZCBnb3QgbW9zdCBvZiB0aGVtIGludG8gaGlzIHBvd2VyLiBUaGVpciBtb25leSBoZSBtYWRlIGhpcyBib290eSwgYnV0IHRoZSBtZW4gdGhlbXNlbHZlcyBoZSBsb2RnZWQgaW4gdGhlIHByaXNvbiBhdCBQZXJnYW11bSwgYW5kIHRoZW4gd2VudCBpbiBwZXJzb24gdG8gSnVuaXVzLCB0aGUgZ292ZXJub3Igb2YgQXNpYSwgb24gdGhlIGdyb3VuZCB0aGF0IGl0IGJlbG9uZ2VkIHRvIGhpbSwgYXMgcHJhZXRvciBvZiB0aGUgcHJvdmluY2UsIHRvIHB1bmlzaCB0aGUgY2FwdGl2ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSB0aGUgcHJhZXRvciBjYXN0IGxvbmdpbmcgZXllcyBvbiB0aGVpciBtb25leSwgd2hpY2ggd2FzIG5vIHNtYWxsIHN1bSwgYW5kIGtlcHQgc2F5aW5nIHRoYXQgaGUgd291bGQgY29uc2lkZXIgdGhlIGNhc2Ugb2YgdGhlIGNhcHRpdmVzIGF0IGhpcyBsZWlzdXJlLCBDYWVzYXIgbGVmdCBoaW0gdG8gaGlzIG93biBkZXZpY2VzLCB3ZW50IHRvIFBlcmdhbXVtLCB0b29rIHRoZSByb2JiZXJzIG91dCBvZiBwcmlzb24sIGFuZCBjcnVjaWZpZWQgdGhlbSBhbGwsIGp1c3QgYXMgaGUgaGFkIG9mdGVuIHdhcm5lZCB0aGVtIG9uIHRoZSBpc2xhbmQgdGhhdCBoZSB3b3VsZCBkbywgd2hlbiB0aGV5IHRob3VnaHQgaGUgd2FzIGpva2luZy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UbyBiZWdpbiB3aXRoLCB0aGVuLCB3aGVuIHRoZSBwaXJhdGVzIGRlbWFuZGVkIHR3ZW50eSB0YWxlbnRzIGZvciBoaXMgcmFuc29tLCBoZSBsYXVnaGVkIGF0IHRoZW0gZm9yIG5vdCBrbm93aW5nIHdobyB0aGVpciBjYXB0aXZlIHdhcywgYW5kIG9mIGhpcyBvd24gYWNjb3JkIGFncmVlZCB0byBnaXZlIHRoZW0gZmlmdHkuIEluIHRoZSBuZXh0IHBsYWNlLCBhZnRlciBoZSBoYWQgc2VudCB2YXJpb3VzIGZvbGxvd2VycyB0byB2YXJpb3VzIGNpdGllcyB0byBwcm9jdXJlIHRoZSBtb25leSBhbmQgd2FzIGxlZnQgd2l0aCBvbmUgZnJpZW5kIGFuZCB0d28gYXR0ZW5kYW50cyBhbW9uZyBDaWxpY2lhbnMsIG1vc3QgbXVyZGVyb3VzIG9mIG1lbiwgaGUgaGVsZCB0aGVtIGluIHN1Y2ggZGlzZGFpbiB0aGF0IHdoZW5ldmVyIGhlIGxheSBkb3duIHRvIHNsZWVwIGhlIHdvdWxkIHNlbmQgYW5kIG9yZGVyIHRoZW0gdG8gc3RvcCB0YWxraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBlaWdodCBhbmQgdGhpcnR5IGRheXMsIGFzIGlmIHRoZSBtZW4gd2VyZSBub3QgaGlzIHdhdGNoZXJzLCBidXQgaGlzIHJveWFsIGJvZHktZ3VhcmQsIGhlIHNoYXJlZCBpbiB0aGVpciBzcG9ydHMgYW5kIGV4ZXJjaXNlcyB3aXRoIGdyZWF0IHVuY29uY2Vybi4gSGUgYWxzbyB3cm90ZSBwb2VtcyBhbmQgc3VuZHJ5IHNwZWVjaGVzIHdoaWNoIGhlIHJlYWQgYWxvdWQgdG8gdGhlbSwgYW5kIHRob3NlIHdobyBkaWQgbm90IGFkbWlyZSB0aGVzZSBoZSB3b3VsZCBjYWxsIHRvIHRoZWlyIGZhY2VzIGlsbGl0ZXJhdGUgQmFyYmFyaWFucywgYW5kIG9mdGVuIGxhdWdoaW5nbHkgdGhyZWF0ZW5lZCB0byBoYW5nIHRoZW0gYWxsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwaXJhdGVzIHdlcmUgZGVsaWdodGVkIGF0IHRoaXMsIGFuZCBhdHRyaWJ1dGVkIGhpcyBib2xkbmVzcyBvZiBzcGVlY2ggdG8gYSBjZXJ0YWluIHNpbXBsaWNpdHkgYW5kIGJveWlzaCBtaXJ0aC4gQnV0IGFmdGVyIGhpcyByYW5zb20gaGFkIGNvbWUgZnJvbSBNaWxldHVzIGFuZCBoZSBoYWQgcGFpZCBpdCBhbmQgd2FzIHNldCBmcmVlLCBoZSBpbW1lZGlhdGVseSBtYW5uZWQgdmVzc2VscyBhbmQgcHV0IHRvIHNlYSBmcm9tIHRoZSBoYXJib3VyIG9mIE1pbGV0dXMgYWdhaW5zdCB0aGUgcm9iYmVycy4gSGUgY2F1Z2h0IHRoZW0sIHRvbywgc3RpbGwgbHlpbmcgYXQgYW5jaG9yIG9mZiB0aGUgaXNsYW5kLCBhbmQgZ290IG1vc3Qgb2YgdGhlbSBpbnRvIGhpcyBwb3dlci4gVGhlaXIgbW9uZXkgaGUgbWFkZSBoaXMgYm9vdHksIGJ1dCB0aGUgbWVuIHRoZW1zZWx2ZXMgaGUgbG9kZ2VkIGluIHRoZSBwcmlzb24gYXQgUGVyZ2FtdW0sIGFuZCB0aGVuIHdlbnQgaW4gcGVyc29uIHRvIEp1bml1cywgdGhlIGdvdmVybm9yIG9mIEFzaWEsIG9uIHRoZSBncm91bmQgdGhhdCBpdCBiZWxvbmdlZCB0byBoaW0sIGFzIHByYWV0b3Igb2YgdGhlIHByb3ZpbmNlLCB0byBwdW5pc2ggdGhlIGNhcHRpdmVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzaW5jZSB0aGUgcHJhZXRvciBjYXN0IGxvbmdpbmcgZXllcyBvbiB0aGVpciBtb25leSwgd2hpY2ggd2FzIG5vIHNtYWxsIHN1bSwgYW5kIGtlcHQgc2F5aW5nIHRoYXQgaGUgd291bGQgY29uc2lkZXIgdGhlIGNhc2Ugb2YgdGhlIGNhcHRpdmVzIGF0IGhpcyBsZWlzdXJlLCBDYWVzYXIgbGVmdCBoaW0gdG8gaGlzIG93biBkZXZpY2VzLCB3ZW50IHRvIFBlcmdhbXVtLCB0b29rIHRoZSByb2JiZXJzIG91dCBvZiBwcmlzb24sIGFuZCBjcnVjaWZpZWQgdGhlbSBhbGwsIGp1c3QgYXMgaGUgaGFkIG9mdGVuIHdhcm5lZCB0aGVtIG9uIHRoZSBpc2xhbmQgdGhhdCBoZSB3b3VsZCBkbywgd2hlbiB0aGV5IHRob3VnaHQgaGUgd2FzIGpva2luZy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIFN1bGxhJ3MgcG93ZXIgYmVpbmcgbm93IG9uIHRoZSB3YW5lLCBhbmQgQ2Flc2FyJ3MgZnJpZW5kcyBhdCBob21lIGludml0aW5nIGhpbSB0byByZXR1cm4sIENhZXNhciBzYWlsZWQgdG8gUmhvZGVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5EaXYuIEp1bC48L3RpdGxlPiA0PC9iaWJsPiksIHRoaXMgdm95YWdlLCBvbiB3aGljaCBoZSB3YXMgY2FwdHVyZWQgYnkgcGlyYXRlcywgd2FzIHVuZGVydGFrZW4gdW5zdWNjZXNzZnVsIHByb3NlY3V0aW9uIG9mIERvbGFiZWxsYSwgbWVudGlvbmVkIGluIHRoZSBuZXh0IGNoYXB0ZXIuIFNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEuNCIgdmFsaWQ9InllcyI+bm90ZSBvbiBpLiA0PC9iaWJsPi48L25vdGU+IHRvIHN0dWR5IHVuZGVyIEFwb2xsb25pdXMgdGhlIHNvbiBvZiBNb2xvbiwgYW4gaWxsdXN0cmlvdXMgcmhldG9yaWNpYW4gd2l0aCB0aGUgcmVwdXRhdGlvbiBvZiBhIHdvcnRoeSBjaGFyYWN0ZXIsIG9mIHdob20gQ2ljZXJvIGFsc28gd2FzIGEgcHVwaWwuIEl0IGlzIHNhaWQsIHRvbywgdGhhdCBDYWVzYXIgaGFkIHRoZSBncmVhdGVzdCBuYXR1cmFsIHRhbGVudCBmb3IgcG9saXRpY2FsIG9yYXRvcnksIGFuZCBjdWx0aXZhdGVkIGhpcyB0YWxlbnQgbW9zdCBhbWJpdGlvdXNseSwgc28gdGhhdCBoZSBoYWQgYW4gdW5kaXNwdXRlZCBzZWNvbmQgcmFuazsgdGhlIGZpcnN0IHJhbmssIGhvd2V2ZXIsIGhlIHJlbm91bmNlZCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YmVjYXVzZSBoZSBkZXZvdGVkIGhpcyBlZmZvcnRzIHRvIGJlaW5nIGZpcnN0IGFzIGEgc3RhdGVzbWFuIGFuZCBjb21tYW5kZXIgcmF0aGVyLCBhbmQgZGlkIG5vdCBhY2hpZXZlIHRoYXQgZWZmZWN0aXZlbmVzcyBpbiBvcmF0b3J5IHRvIHdoaWNoIGhpcyBuYXR1cmFsIHRhbGVudCBkaXJlY3RlZCBoaW0sIGluIGNvbnNlcXVlbmNlIG9mIGhpcyBjYW1wYWlnbnMgYW5kIG9mIGhpcyBwb2xpdGljYWwgYWN0aXZpdGllcywgYnkgbWVhbnMgb2Ygd2hpY2ggaGUgYWNxdWlyZWQgdGhlIHN1cHJlbWFjeS4gQW5kIHNvIGl0IHdhcyB0aGF0LCBhdCBhIGxhdGVyIHRpbWUsIGluIGhpcyByZXBseSB0byBDaWNlcm8ncyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhdG8sPC9xPiBoZSBoaW1zZWxmIGRlcHJlY2F0ZWQgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZSBkaWN0aW9uIG9mIGEgc29sZGllciBhbmQgdGhlIGVsb3F1ZW5jZSBvZiBhbiBvcmF0b3Igd2hvIHdhcyBnaWZ0ZWQgYnkgbmF0dXJlIGFuZCBoYWQgcGxlbnR5IG9mIGxlaXN1cmUgdG8gcHVyc3VlIGhpcyBzdHVkaWVzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBTdWxsYSdzIHBvd2VyIGJlaW5nIG5vdyBvbiB0aGUgd2FuZSwgYW5kIENhZXNhcidzIGZyaWVuZHMgYXQgaG9tZSBpbnZpdGluZyBoaW0gdG8gcmV0dXJuLCBDYWVzYXIgc2FpbGVkIHRvIFJob2Rlczxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA0IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2LiBKdWwuPC90aXRsZT4gNDwvYmlibD4pLCB0aGlzIHZveWFnZSwgb24gd2hpY2ggaGUgd2FzIGNhcHR1cmVkIGJ5IHBpcmF0ZXMsIHdhcyB1bmRlcnRha2VuIHVuc3VjY2Vzc2Z1bCBwcm9zZWN1dGlvbiBvZiBEb2xhYmVsbGEsIG1lbnRpb25lZCBpbiB0aGUgbmV4dCBjaGFwdGVyLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEuNCIgdmFsaWQ9InllcyI+bm90ZSBvbiBpLiA0PC9iaWJsPi48L25vdGU+IHRvIHN0dWR5IHVuZGVyIEFwb2xsb25pdXMgdGhlIHNvbiBvZiBNb2xvbiwgYW4gaWxsdXN0cmlvdXMgcmhldG9yaWNpYW4gd2l0aCB0aGUgcmVwdXRhdGlvbiBvZiBhIHdvcnRoeSBjaGFyYWN0ZXIsIG9mIHdob20gQ2ljZXJvIGFsc28gd2FzIGEgcHVwaWwuIEl0IGlzIHNhaWQsIHRvbywgdGhhdCBDYWVzYXIgaGFkIHRoZSBncmVhdGVzdCBuYXR1cmFsIHRhbGVudCBmb3IgcG9saXRpY2FsIG9yYXRvcnksIGFuZCBjdWx0aXZhdGVkIGhpcyB0YWxlbnQgbW9zdCBhbWJpdGlvdXNseSwgc28gdGhhdCBoZSBoYWQgYW4gdW5kaXNwdXRlZCBzZWNvbmQgcmFuazsgdGhlIGZpcnN0IHJhbmssIGhvd2V2ZXIsIGhlIHJlbm91bmNlZCwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiA0PC9iaWJsPiksIHRoaXMgdm95YWdlLCBvbiB3aGljaCBoZSB3YXMgY2FwdHVyZWQgYnkgcGlyYXRlcywgd2FzIHVuZGVydGFrZW4gdW5zdWNjZXNzZnVsIHByb3NlY3V0aW9uIG9mIERvbGFiZWxsYSwgbWVudGlvbmVkIGluIHRoZSBuZXh0IGNoYXB0ZXIuIFNlZSB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2LiBKdWwuPC90aXRsZT4gNDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDEuNCIgdmFsaWQ9InllcyI+bm90ZSBvbiBpLiA0PC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJlY2F1c2UgaGUgZGV2b3RlZCBoaXMgZWZmb3J0cyB0byBiZWluZyBmaXJzdCBhcyBhIHN0YXRlc21hbiBhbmQgY29tbWFuZGVyIHJhdGhlciwgYW5kIGRpZCBub3QgYWNoaWV2ZSB0aGF0IGVmZmVjdGl2ZW5lc3MgaW4gb3JhdG9yeSB0byB3aGljaCBoaXMgbmF0dXJhbCB0YWxlbnQgZGlyZWN0ZWQgaGltLCBpbiBjb25zZXF1ZW5jZSBvZiBoaXMgY2FtcGFpZ25zIGFuZCBvZiBoaXMgcG9saXRpY2FsIGFjdGl2aXRpZXMsIGJ5IG1lYW5zIG9mIHdoaWNoIGhlIGFjcXVpcmVkIHRoZSBzdXByZW1hY3kuIEFuZCBzbyBpdCB3YXMgdGhhdCwgYXQgYSBsYXRlciB0aW1lLCBpbiBoaXMgcmVwbHkgdG8gQ2ljZXJvJ3MgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhdG8sPC9xPiBoZSBoaW1zZWxmIGRlcHJlY2F0ZWQgY29tcGFyaXNvbiBiZXR3ZWVuIHRoZSBkaWN0aW9uIG9mIGEgc29sZGllciBhbmQgdGhlIGVsb3F1ZW5jZSBvZiBhbiBvcmF0b3Igd2hvIHdhcyBnaWZ0ZWQgYnkgbmF0dXJlIGFuZCBoYWQgcGxlbnR5IG9mIGxlaXN1cmUgdG8gcHVyc3VlIGhpcyBzdHVkaWVzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgaGlzIHJldHVybiB0byBSb21lIGhlIGltcGVhY2hlZCBEb2xhYmVsbGE8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA3NyBCLkMuPC9ub3RlPiBmb3IgbWFsYWRtaW5pc3RyYXRpb24gb2YgaGlzIHByb3ZpbmNlLCBhbmQgbWFueSBvZiB0aGUgY2l0aWVzIG9mIEdyZWVjZSBzdXBwbGllZCBoaW0gd2l0aCB0ZXN0aW1vbnkuIERvbGFiZWxsYSwgaXQgaXMgdHJ1ZSwgd2FzIGFjcXVpdHRlZCwgYnV0IENhZXNhciwgaW4gcmV0dXJuIGZvciB0aGUgemVhbG91cyBlZmZvcnRzIG9mIHRoZSBHcmVla3MgaW4gaGlzIGJlaGFsZiwgc2VydmVkIGFzIHRoZWlyIGFkdm9jYXRlIHdoZW4gdGhleSBwcm9zZWN1dGVkIFB1YmxpdXMgQW50b25pdXMgZm9yIGNvcnJ1cHRpb24gYmVmb3JlIE1hcmN1cyBMdWN1bGx1cywgdGhlIHByYWV0b3Igb2YgTWFjZWRvbmlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgd2FzIHNvIGVmZmVjdGl2ZSB0aGF0IEFudG9uaXVzIGFwcGVhbGVkIHRvIHRoZSB0cmlidW5lcyBhdCBSb21lLCBhbGxlZ2luZyB0aGF0IGhlIGNvdWxkIG5vdCBoYXZlIGEgZmFpciB0cmlhbCBpbiBHcmVlY2UgYWdhaW5zdCBHcmVla3MuIEF0IFJvbWUsIG1vcmVvdmVyLCBDYWVzYXIgd29uIGEgZ3JlYXQgYW5kIGJyaWxsaWFudCBwb3B1bGFyaXR5IGJ5IGhpcyBlbG9xdWVuY2UgYXMgYW4gYWR2b2NhdGUsIGFuZCBtdWNoIGdvb2Qgd2lsbCBmcm9tIHRoZSBjb21tb24gcGVvcGxlIGZvciB0aGUgZnJpZW5kbGluZXNzIG9mIGhpcyBtYW5uZXJzIGluIGludGVyY291cnNlIHdpdGggdGhlbSwgc2luY2UgaGUgd2FzIGluZ3JhdGlhdGluZyBiZXlvbmQgaGlzIHllYXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBoYWQgYWxzbyBhIGxhcmdlIGFuZCBncmFkdWFsbHkgaW5jcmVhc2luZyBwb2xpdGljYWwgaW5mbHVlbmNlLCBpbiBjb25zZXF1ZW5jZSBvZiBoaXMgbGF2aXNoIGhvc3BpdGFsaXR5IGFuZCB0aGUgZ2VuZXJhbCBzcGxlbmRvdXIgb2YgaGlzIG1vZGUgb2YgbGlmZS4gQXQgZmlyc3QgaGlzIGVuZW1pZXMgdGhvdWdodCB0aGlzIGluZmx1ZW5jZSB3b3VsZCBxdWlja2x5IHZhbmlzaCB3aGVuIGhpcyBleHBlbmRpdHVyZXMgY2Vhc2VkLCBhbmQgdGhlcmVmb3JlIHN1ZmZlcmVkIGl0IHRvIHRocml2ZSBhbW9uZyB0aGUgY29tbW9uIHBlb3BsZTsgYnV0IGxhdGVyIG9uIHdoZW4gaXQgaGFkIGJlY29tZSBncmVhdCBhbmQgaGFyZCB0byBzdWJ2ZXJ0LCBhbmQgYWltZWQgZGlyZWN0bHkgYXQgYSBjb21wbGV0ZSByZXZvbHV0aW9uIGluIHRoZSBzdGF0ZSwgdGhleSBwZXJjZWl2ZWQgdGhhdCBubyBiZWdpbm5pbmdzIHNob3VsZCBiZSBjb25zaWRlcmVkIHRvbyBzbWFsbCB0byBiZSBxdWlja2x5IG1hZGUgZ3JlYXQgYnkgY29udGludWFuY2UsIGFmdGVyLCBjb250ZW1wdCBvZiB0aGVtIGhhcyBsZWZ0IHRoZW0gdW5vYnN0cnVjdGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbGwgZXZlbnRzLCB0aGUgbWFuIHdobyBpcyB0aG91Z2h0IHRvIGhhdmUgYmVlbiB0aGUgZmlyc3QgdG8gc2VlIGJlbmVhdGggdGhlIHN1cmZhY2Ugb2YgQ2Flc2FyJ3MgcHVibGljIHBvbGljeSBhbmQgdG8gZmVhciBpdCwgYXMgb25lIG1pZ2h0IGZlYXIgdGhlIHNtaWxpbmcgc3VyZmFjZSBvZiB0aGUgc2VhLCBhbmQgd2hvIGNvbXByZWhlbmRlZCB0aGUgcG93ZXJmdWwgY2hhcmFjdGVyIGhpZGRlbiBiZW5lYXRoIGhpcyBraW5kbHkgYW5kIGNoZWVyZnVsIGV4dGVyaW9yLCBuYW1lbHkgQ2ljZXJvLCBzYWlkIHRoYXQgaW4gbW9zdCBvZiBDYWVzYXIncyBwb2xpdGljYWwgcGxhbnMgYW5kIHByb2plY3RzIGhlIHNhdyBhIHR5cmFubmljYWwgcHVycG9zZTsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiB0aGUgb3RoZXIgaGFuZCw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hlbiBJIGxvb2sgYXQgaGlzIGhhaXIsIHdoaWNoIGlzIGFycmFuZ2VkIHdpdGggc28gbXVjaCBuaWNldHksIGFuZCBzZWUgaGltIHNjcmF0Y2hpbmcgaGlzIGhlYWQgd2l0aCBvbmUgZmluZ2VyLCBJIGNhbm5vdCB0aGluayB0aGF0IHRoaXMgbWFuIHdvdWxkIGV2ZXIgY29uY2VpdmUgb2Ygc28gZ3JlYXQgYSBjcmltZSBhcyB0aGUgb3ZlcnRocm93IG9mIHRoZSBSb21hbiBjb25zdGl0dXRpb248L3E+IFRoaXMsIGl0IGlzIHRydWUsIGJlbG9uZ3MgdG8gYSBsYXRlciBwZXJpb2QuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciBoaXMgcmV0dXJuIHRvIFJvbWUgaGUgaW1wZWFjaGVkIERvbGFiZWxsYTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNzcgQi5DLjwvbm90ZT4gZm9yIG1hbGFkbWluaXN0cmF0aW9uIG9mIGhpcyBwcm92aW5jZSwgYW5kIG1hbnkgb2YgdGhlIGNpdGllcyBvZiBHcmVlY2Ugc3VwcGxpZWQgaGltIHdpdGggdGVzdGltb255LiBEb2xhYmVsbGEsIGl0IGlzIHRydWUsIHdhcyBhY3F1aXR0ZWQsIGJ1dCBDYWVzYXIsIGluIHJldHVybiBmb3IgdGhlIHplYWxvdXMgZWZmb3J0cyBvZiB0aGUgR3JlZWtzIGluIGhpcyBiZWhhbGYsIHNlcnZlZCBhcyB0aGVpciBhZHZvY2F0ZSB3aGVuIHRoZXkgcHJvc2VjdXRlZCBQdWJsaXVzIEFudG9uaXVzIGZvciBjb3JydXB0aW9uIGJlZm9yZSBNYXJjdXMgTHVjdWxsdXMsIHRoZSBwcmFldG9yIG9mIE1hY2Vkb25pYS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB3YXMgc28gZWZmZWN0aXZlIHRoYXQgQW50b25pdXMgYXBwZWFsZWQgdG8gdGhlIHRyaWJ1bmVzIGF0IFJvbWUsIGFsbGVnaW5nIHRoYXQgaGUgY291bGQgbm90IGhhdmUgYSBmYWlyIHRyaWFsIGluIEdyZWVjZSBhZ2FpbnN0IEdyZWVrcy4gQXQgUm9tZSwgbW9yZW92ZXIsIENhZXNhciB3b24gYSBncmVhdCBhbmQgYnJpbGxpYW50IHBvcHVsYXJpdHkgYnkgaGlzIGVsb3F1ZW5jZSBhcyBhbiBhZHZvY2F0ZSwgYW5kIG11Y2ggZ29vZCB3aWxsIGZyb20gdGhlIGNvbW1vbiBwZW9wbGUgZm9yIHRoZSBmcmllbmRsaW5lc3Mgb2YgaGlzIG1hbm5lcnMgaW4gaW50ZXJjb3Vyc2Ugd2l0aCB0aGVtLCBzaW5jZSBoZSB3YXMgaW5ncmF0aWF0aW5nIGJleW9uZCBoaXMgeWVhcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhhZCBhbHNvIGEgbGFyZ2UgYW5kIGdyYWR1YWxseSBpbmNyZWFzaW5nIHBvbGl0aWNhbCBpbmZsdWVuY2UsIGluIGNvbnNlcXVlbmNlIG9mIGhpcyBsYXZpc2ggaG9zcGl0YWxpdHkgYW5kIHRoZSBnZW5lcmFsIHNwbGVuZG91ciBvZiBoaXMgbW9kZSBvZiBsaWZlLiBBdCBmaXJzdCBoaXMgZW5lbWllcyB0aG91Z2h0IHRoaXMgaW5mbHVlbmNlIHdvdWxkIHF1aWNrbHkgdmFuaXNoIHdoZW4gaGlzIGV4cGVuZGl0dXJlcyBjZWFzZWQsIGFuZCB0aGVyZWZvcmUgc3VmZmVyZWQgaXQgdG8gdGhyaXZlIGFtb25nIHRoZSBjb21tb24gcGVvcGxlOyBidXQgbGF0ZXIgb24gd2hlbiBpdCBoYWQgYmVjb21lIGdyZWF0IGFuZCBoYXJkIHRvIHN1YnZlcnQsIGFuZCBhaW1lZCBkaXJlY3RseSBhdCBhIGNvbXBsZXRlIHJldm9sdXRpb24gaW4gdGhlIHN0YXRlLCB0aGV5IHBlcmNlaXZlZCB0aGF0IG5vIGJlZ2lubmluZ3Mgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdG9vIHNtYWxsIHRvIGJlIHF1aWNrbHkgbWFkZSBncmVhdCBieSBjb250aW51YW5jZSwgYWZ0ZXIsIGNvbnRlbXB0IG9mIHRoZW0gaGFzIGxlZnQgdGhlbSB1bm9ic3RydWN0ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['4.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCBldmVudHMsIHRoZSBtYW4gd2hvIGlzIHRob3VnaHQgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCB0byBzZWUgYmVuZWF0aCB0aGUgc3VyZmFjZSBvZiBDYWVzYXIncyBwdWJsaWMgcG9saWN5IGFuZCB0byBmZWFyIGl0LCBhcyBvbmUgbWlnaHQgZmVhciB0aGUgc21pbGluZyBzdXJmYWNlIG9mIHRoZSBzZWEsIGFuZCB3aG8gY29tcHJlaGVuZGVkIHRoZSBwb3dlcmZ1bCBjaGFyYWN0ZXIgaGlkZGVuIGJlbmVhdGggaGlzIGtpbmRseSBhbmQgY2hlZXJmdWwgZXh0ZXJpb3IsIG5hbWVseSBDaWNlcm8sIHNhaWQgdGhhdCBpbiBtb3N0IG9mIENhZXNhcidzIHBvbGl0aWNhbCBwbGFucyBhbmQgcHJvamVjdHMgaGUgc2F3IGEgdHlyYW5uaWNhbCBwdXJwb3NlOyAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gdGhlIG90aGVyIGhhbmQsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+d2hlbiBJIGxvb2sgYXQgaGlzIGhhaXIsIHdoaWNoIGlzIGFycmFuZ2VkIHdpdGggc28gbXVjaCBuaWNldHksIGFuZCBzZWUgaGltIHNjcmF0Y2hpbmcgaGlzIGhlYWQgd2l0aCBvbmUgZmluZ2VyLCBJIGNhbm5vdCB0aGluayB0aGF0IHRoaXMgbWFuIHdvdWxkIGV2ZXIgY29uY2VpdmUgb2Ygc28gZ3JlYXQgYSBjcmltZSBhcyB0aGUgb3ZlcnRocm93IG9mIHRoZSBSb21hbiBjb25zdGl0dXRpb248L3E+IFRoaXMsIGl0IGlzIHRydWUsIGJlbG9uZ3MgdG8gYSBsYXRlciBwZXJpb2QuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmlyc3QgcHJvb2Ygb2YgdGhlIHBlb3BsZSdzIGdvb2Qgd2lsbCB0b3dhcmRzIGhpbSBoZSByZWNlaXZlZCB3aGVuIGhlIGNvbXBldGVkIGFnYWluc3QgQ2FpdXMgUG9waWxpdXMgZm9yIGEgbWlsaXRhcnkgdHJpYnVuZXNoaXAgYW5kIHdhcyBlbGVjdGVkIG92ZXIgaGltOyBhIHNlY29uZCBhbmQgbW9yZSBjb25zcGljdW91cyBwcm9vZiBoZSByZWNlaXZlZCB3aGVuLCBhcyBuZXBoZXcgb2YgSnVsaWEgdGhlIGRlY2Vhc2VkIHdpZmUgb2YgTWFyaXVzLCBoZSBwcm9ub3VuY2VkIGEgc3BsZW5kaWQgZW5jb21pdW0gdXBvbiBoZXIgaW4gdGhlIGZvcnVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDY4IEIuQy48L25vdGU+IGFuZCBpbiBoZXIgZnVuZXJhbCBwcm9jZXNzaW9uIHZlbnR1cmVkIHRvIGRpc3BsYXkgaW1hZ2VzIG9mIE1hcml1cywgd2hpY2ggd2VyZSB0aGVuIHNlZW4gZm9yIHRoZSBmaXJzdCB0aW1lIHNpbmNlIHRoZSBhZG1pbmlzdHJhdGlvbiBvZiBTdWxsYSwgYmVjYXVzZSBNYXJpdXMgYW5kIGhpcyBmcmllbmRzIGhhZCBiZWVuIHByb25vdW5jZWQgcHVibGljIGVuZW1pZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIG5hbWVseSwgc29tZSBjcmllZCBvdXQgYWdhaW5zdCBDYWVzYXIgZm9yIHRoaXMgcHJvY2VkdXJlLCB0aGUgcGVvcGxlIGFuc3dlcmVkIHRoZW0gd2l0aCBsb3VkIHNob3V0cywgcmVjZWl2ZWQgQ2Flc2FyIHdpdGggYXBwbGF1c2UsIGFuZCBhZG1pcmVkIGhpbSBmb3IgYnJpbmdpbmcgYmFjayBhZnRlciBzbyBsb25nIGEgdGltZSwgYXMgaXQgd2VyZSBmcm9tIEhhZGVzLCB0aGUgaG9ub3VycyBvZiBNYXJpdXMgaW50byB0aGUgY2l0eS4gTm93LCBpbiB0aGUgY2FzZSBvZiBlbGRlcmx5IHdvbWVuLCBpdCB3YXMgYW5jaWVudCBSb21hbiB1c2FnZSB0byBwcm9ub3VuY2UgZnVuZXJhbCBvcmF0aW9ucyBvdmVyIHRoZW07IGJ1dCBpdCB3YXMgbm90IGN1c3RvbWFyeSBpbiB0aGUgY2FzZSBvZiB5b3VuZyB3b21lbiwgYW5kIENhZXNhciB3YXMgdGhlIGZpcnN0IHRvIGRvIHNvIHdoZW4gaGlzIG93biB3aWZlIGRpZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjggQi5DLjwvbm90ZT4gVGhpcyBhbHNvIGJyb3VnaHQgaGltIG11Y2ggZmF2b3VyLCBhbmQgd29ya2VkIHVwb24gdGhlIHN5bXBhdGhpZXMgb2YgdGhlIG11bHRpdHVkZSwgc28gdGhhdCB0aGV5IHdlcmUgZm9uZCBvZiBoaW0sIGFzIGEgbWFuIHdobyB3YXMgZ2VudGxlIGFuZCBmdWxsIG9mIGZlZWxpbmcuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmlyc3QgcHJvb2Ygb2YgdGhlIHBlb3BsZSdzIGdvb2Qgd2lsbCB0b3dhcmRzIGhpbSBoZSByZWNlaXZlZCB3aGVuIGhlIGNvbXBldGVkIGFnYWluc3QgQ2FpdXMgUG9waWxpdXMgZm9yIGEgbWlsaXRhcnkgdHJpYnVuZXNoaXAgYW5kIHdhcyBlbGVjdGVkIG92ZXIgaGltOyBhIHNlY29uZCBhbmQgbW9yZSBjb25zcGljdW91cyBwcm9vZiBoZSByZWNlaXZlZCB3aGVuLCBhcyBuZXBoZXcgb2YgSnVsaWEgdGhlIGRlY2Vhc2VkIHdpZmUgb2YgTWFyaXVzLCBoZSBwcm9ub3VuY2VkIGEgc3BsZW5kaWQgZW5jb21pdW0gdXBvbiBoZXIgaW4gdGhlIGZvcnVtLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjggQi5DLjwvbm90ZT4gYW5kIGluIGhlciBmdW5lcmFsIHByb2Nlc3Npb24gdmVudHVyZWQgdG8gZGlzcGxheSBpbWFnZXMgb2YgTWFyaXVzLCB3aGljaCB3ZXJlIHRoZW4gc2VlbiBmb3IgdGhlIGZpcnN0IHRpbWUgc2luY2UgdGhlIGFkbWluaXN0cmF0aW9uIG9mIFN1bGxhLCBiZWNhdXNlIE1hcml1cyBhbmQgaGlzIGZyaWVuZHMgaGFkIGJlZW4gcHJvbm91bmNlZCBwdWJsaWMgZW5lbWllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIG5hbWVseSwgc29tZSBjcmllZCBvdXQgYWdhaW5zdCBDYWVzYXIgZm9yIHRoaXMgcHJvY2VkdXJlLCB0aGUgcGVvcGxlIGFuc3dlcmVkIHRoZW0gd2l0aCBsb3VkIHNob3V0cywgcmVjZWl2ZWQgQ2Flc2FyIHdpdGggYXBwbGF1c2UsIGFuZCBhZG1pcmVkIGhpbSBmb3IgYnJpbmdpbmcgYmFjayBhZnRlciBzbyBsb25nIGEgdGltZSwgYXMgaXQgd2VyZSBmcm9tIEhhZGVzLCB0aGUgaG9ub3VycyBvZiBNYXJpdXMgaW50byB0aGUgY2l0eS4gTm93LCBpbiB0aGUgY2FzZSBvZiBlbGRlcmx5IHdvbWVuLCBpdCB3YXMgYW5jaWVudCBSb21hbiB1c2FnZSB0byBwcm9ub3VuY2UgZnVuZXJhbCBvcmF0aW9ucyBvdmVyIHRoZW07IGJ1dCBpdCB3YXMgbm90IGN1c3RvbWFyeSBpbiB0aGUgY2FzZSBvZiB5b3VuZyB3b21lbiwgYW5kIENhZXNhciB3YXMgdGhlIGZpcnN0IHRvIGRvIHNvIHdoZW4gaGlzIG93biB3aWZlIGRpZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2OCBCLkMuPC9ub3RlPiBUaGlzIGFsc28gYnJvdWdodCBoaW0gbXVjaCBmYXZvdXIsIGFuZCB3b3JrZWQgdXBvbiB0aGUgc3ltcGF0aGllcyBvZiB0aGUgbXVsdGl0dWRlLCBzbyB0aGF0IHRoZXkgd2VyZSBmb25kIG9mIGhpbSwgYXMgYSBtYW4gd2hvIHdhcyBnZW50bGUgYW5kIGZ1bGwgb2YgZmVlbGluZy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgZnVuZXJhbCBvZiBoaXMgd2lmZSwgaGUgd2VudCBvdXQgdG8gU3BhaW48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2NyBCLkMuPC9ub3RlPiBhcyBxdWFlc3RvciB1bmRlciBWZXR1cywgb25lIG9mIHRoZSBwcmFldG9ycywgd2hvbSBoZSBuZXZlciBjZWFzZWQgdG8gaG9sZCBpbiBoaWdoIGVzdGVlbSwgYW5kIHdob3NlIHNvbiwgaW4gdHVybiwgd2hlbiBoZSBoaW1zZWxmIHdhcyBwcmFldG9yLCBoZSBtYWRlIGhpcyBxdWFlc3Rvci4gQWZ0ZXIgaGUgaGFkIHNlcnZlZCBpbiB0aGlzIG9mZmljZSwgaGUgbWFycmllZCBmb3IgaGlzIHRoaXJkIHdpZmU8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIgd2FzIGZpcnN0IG1hcnJpZWQgdG8gQ29zc3V0aWEsIHRoZSBkYXVnaHRlciBvZiBhIHJpY2ggUm9tYW4ga25pZ2h0Ljwvbm90ZT4gUG9tcGVpYSwgaGF2aW5nIGFscmVhZHkgYnkgQ29ybmVsaWEgYSBkYXVnaHRlciB3aG8gd2FzIGFmdGVyd2FyZHMgbWFycmllZCB0byBQb21wZXkgdGhlIEdyZWF0LiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgdW5zcGFyaW5nIGluIGhpcyBvdXRsYXlzIG9mIG1vbmV5LCBhbmQgd2FzIHRob3VnaHQgdG8gYmUgcHVyY2hhc2luZyBhIHRyYW5zaWVudCBhbmQgc2hvcnQtbGl2ZWQgZmFtZSBhdCBhIGdyZWF0IHByaWNlLCB0aG91Z2ggaW4gcmVhbGl0eSBoZSB3YXMgYnV5aW5nIHRoaW5ncyBvZiB0aGUgaGlnaGVzdCB2YWx1ZSBhdCBhIHNtYWxsIHByaWNlLiBXZSBhcmUgdG9sZCwgYWNjb3JkaW5nbHksIHRoYXQgYmVmb3JlIGhlIGVudGVyZWQgdXBvbiBhbnkgcHVibGljIG9mZmljZSBoZSB3YXMgdGhpcnRlZW4gaHVuZHJlZCB0YWxlbnRzIGluIGRlYnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBiZWluZyBhcHBvaW50ZWQgY3VyYXRvciBvZiB0aGUgQXBwaWFuIFdheSwgaGUgZXhwZW5kZWQgdXBvbiBpdCB2YXN0IHN1bXMgb2YgaGlzIG93biBtb25leTsgYW5kIGFnYWluLCBkdXJpbmcgaGlzIGFlZGlsZXNoaXAsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjYgQi5DLjwvbm90ZT4gaGUgZnVybmlzaGVkIHRocmVlIGh1bmRyZWQgYW5kIHR3ZW50eSBwYWlycyBvZiBnbGFkaWF0b3JzLCBhbmQgYnkgbGF2aXNoIHByb3Zpc2lvbiBiZXNpZGVzIGZvciB0aGVhdHJpY2FsIHBlcmZvcm1hbmNlcywgcHJvY2Vzc2lvbnMsIGFuZCBwdWJsaWMgYmFucXVldHMsIGhlIHdhc2hlZCBhd2F5IGFsbCBtZW1vcnkgb2YgdGhlIGFtYml0aW91cyBlZmZvcnRzIG9mIGhpcyBwcmVkZWNlc3NvcnMgaW4gdGhlIG9mZmljZS4gQnkgdGhlc2UgbWVhbnMgaGUgcHV0IHRoZSBwZW9wbGUgaW4gc3VjaCBhIGh1bW91ciB0aGF0IGV2ZXJ5IG1hbiBvZiB0aGVtIHdhcyBzZWVraW5nIG91dCBuZXcgb2ZmaWNlcyBhbmQgbmV3IGhvbm91cnMgd2l0aCB3aGljaCB0byByZXF1aXRlIGhpbS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBmdW5lcmFsIG9mIGhpcyB3aWZlLCBoZSB3ZW50IG91dCB0byBTcGFpbjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNjcgQi5DLjwvbm90ZT4gYXMgcXVhZXN0b3IgdW5kZXIgVmV0dXMsIG9uZSBvZiB0aGUgcHJhZXRvcnMsIHdob20gaGUgbmV2ZXIgY2Vhc2VkIHRvIGhvbGQgaW4gaGlnaCBlc3RlZW0sIGFuZCB3aG9zZSBzb24sIGluIHR1cm4sIHdoZW4gaGUgaGltc2VsZiB3YXMgcHJhZXRvciwgaGUgbWFkZSBoaXMgcXVhZXN0b3IuIEFmdGVyIGhlIGhhZCBzZXJ2ZWQgaW4gdGhpcyBvZmZpY2UsIGhlIG1hcnJpZWQgZm9yIGhpcyB0aGlyZCB3aWZlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIgd2FzIGZpcnN0IG1hcnJpZWQgdG8gQ29zc3V0aWEsIHRoZSBkYXVnaHRlciBvZiBhIHJpY2ggUm9tYW4ga25pZ2h0Ljwvbm90ZT4gUG9tcGVpYSwgaGF2aW5nIGFscmVhZHkgYnkgQ29ybmVsaWEgYSBkYXVnaHRlciB3aG8gd2FzIGFmdGVyd2FyZHMgbWFycmllZCB0byBQb21wZXkgdGhlIEdyZWF0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyB1bnNwYXJpbmcgaW4gaGlzIG91dGxheXMgb2YgbW9uZXksIGFuZCB3YXMgdGhvdWdodCB0byBiZSBwdXJjaGFzaW5nIGEgdHJhbnNpZW50IGFuZCBzaG9ydC1saXZlZCBmYW1lIGF0IGEgZ3JlYXQgcHJpY2UsIHRob3VnaCBpbiByZWFsaXR5IGhlIHdhcyBidXlpbmcgdGhpbmdzIG9mIHRoZSBoaWdoZXN0IHZhbHVlIGF0IGEgc21hbGwgcHJpY2UuIFdlIGFyZSB0b2xkLCBhY2NvcmRpbmdseSwgdGhhdCBiZWZvcmUgaGUgZW50ZXJlZCB1cG9uIGFueSBwdWJsaWMgb2ZmaWNlIGhlIHdhcyB0aGlydGVlbiBodW5kcmVkIHRhbGVudHMgaW4gZGVidC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBiZWluZyBhcHBvaW50ZWQgY3VyYXRvciBvZiB0aGUgQXBwaWFuIFdheSwgaGUgZXhwZW5kZWQgdXBvbiBpdCB2YXN0IHN1bXMgb2YgaGlzIG93biBtb25leTsgYW5kIGFnYWluLCBkdXJpbmcgaGlzIGFlZGlsZXNoaXAsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2NiBCLkMuPC9ub3RlPiBoZSBmdXJuaXNoZWQgdGhyZWUgaHVuZHJlZCBhbmQgdHdlbnR5IHBhaXJzIG9mIGdsYWRpYXRvcnMsIGFuZCBieSBsYXZpc2ggcHJvdmlzaW9uIGJlc2lkZXMgZm9yIHRoZWF0cmljYWwgcGVyZm9ybWFuY2VzLCBwcm9jZXNzaW9ucywgYW5kIHB1YmxpYyBiYW5xdWV0cywgaGUgd2FzaGVkIGF3YXkgYWxsIG1lbW9yeSBvZiB0aGUgYW1iaXRpb3VzIGVmZm9ydHMgb2YgaGlzIHByZWRlY2Vzc29ycyBpbiB0aGUgb2ZmaWNlLiBCeSB0aGVzZSBtZWFucyBoZSBwdXQgdGhlIHBlb3BsZSBpbiBzdWNoIGEgaHVtb3VyIHRoYXQgZXZlcnkgbWFuIG9mIHRoZW0gd2FzIHNlZWtpbmcgb3V0IG5ldyBvZmZpY2VzIGFuZCBuZXcgaG9ub3VycyB3aXRoIHdoaWNoIHRvIHJlcXVpdGUgaGltLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSB0d28gcGFydGllcyBpbiB0aGUgY2l0eSwgdGhhdCBvZiBTdWxsYSwgd2hpY2ggaGFkIGJlZW4gYWxsIHBvd2VyZnVsIHNpbmNlIGhpcyBkYXksIGFuZCB0aGF0IG9mIE1hcml1cywgd2hpY2ggYXQgdGhhdCB0aW1lIHdhcyBpbiBhbiBhbHRvZ2V0aGVyIGxvd2x5IHN0YXRlLCBiZWluZyBjb3dlZCBhbmQgc2NhdHRlcmVkLiBUaGlzIHBhcnR5IENhZXNhciB3aXNoZWQgdG8gcmV2aXZlIGFuZCBhdHRhY2ggdG8gaGltc2VsZiwgYW5kIHRoZXJlZm9yZSwgd2hlbiB0aGUgYW1iaXRpb3VzIGVmZm9ydHMgb2YgaGlzIGFlZGlsZXNoaXAgd2VyZSBhdCB0aGVpciBoZWlnaHQsIGhlIGhhZCBpbWFnZXMgb2YgTWFyaXVzIHNlY3JldGx5IG1hZGUsIHRvZ2V0aGVyIHdpdGggdHJvcGh5LWJlYXJpbmcgVmljdG9yaWVzLCBhbmQgdGhlc2UgaGUgb3JkZXJlZCB0byBiZSBjYXJyaWVkIGJ5IG5pZ2h0IGFuZCBzZXQgdXAgb24gdGhlIENhcGl0b2wuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGRheS1icmVhayB0aG9zZSB3aG8gYmVoZWxkIGFsbCB0aGVzZSBvYmplY3RzIGdsaXR0ZXJpbmcgd2l0aCBnb2xkIGFuZCBmYXNoaW9uZWQgd2l0aCB0aGUgbW9zdCBleHF1aXNpdGUgYXJ0IChhbmQgdGhleSBib3JlIGluc2NyaXB0aW9ucyBzZXR0aW5nIGZvcnRoIHRoZSBDaW1icmlhbiBzdWNjZXNzZXMgb2YgTWFyaXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTWFyLiAxMS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPk1hcml1czwvdGl0bGU+LCBjaGFwdGVycyB4aS48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDIyLjEiIHZhbGlkPSJ5ZXMiPnh4aWk8L2JpYmw+Ljwvbm90ZT4pIHdlcmUgYW1hemVkIGF0IHRoZSBkYXJpbmcgb2YgdGhlIG1hbiB3aG8gaGFkIHNldCB0aGVtIHVwIChmb3IgaXQgd2FzIGV2aWRlbnQgd2hvIGhhZCBkb25lIGl0KSwgYW5kIHRoZSByZXBvcnQgb2YgaXQgcXVpY2tseSBzcHJlYWRpbmcgYnJvdWdodCBldmVyeWJvZHkgdG9nZXRoZXIgZm9yIHRoZSBzaWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNvbWUgY3JpZWQgb3V0IHRoYXQgQ2Flc2FyIHdhcyBzY2hlbWluZyB0byB1c3VycCBzb2xlIHBvd2VyIGluIHRoZSBzdGF0ZSB3aGVuIGhlIHRodXMgcmV2aXZlZCBob25vdXJzIHdoaWNoIGhhZCBiZWVuIGJ1cmllZCBieSBsYXdzIGFuZCBkZWNyZWVzLCBhbmQgdGhhdCB0aGlzIHByb2NlZWRpbmcgd2FzIGEgdGVzdCBvZiB0aGUgcGVvcGxlLCB3aG9zZSBmZWVsaW5ncyB0b3dhcmRzIGhpbSBoZSBoYWQgcHJldmlvdXNseSBzb2Z0ZW5lZCwgdG8gc2VlIHdoZXRoZXIgdGhleSBoYWQgYmVlbiBtYWRlIGRvY2lsZSBieSBoaXMgYW1iaXRpb3VzIGRpc3BsYXlzIGFuZCB3b3VsZCBwZXJtaXQgaGltIHRvIGFtdXNlIGhpbXNlbGYgd2l0aCBzdWNoIGlubm92YXRpb25zLiBUaGUgcGFydGlzYW5zIG9mIE1hcml1cywgaG93ZXZlciwgZW5jb3VyYWdlZCBvbmUgYW5vdGhlciBhbmQgc2hvd2VkIHRoZW1zZWx2ZXMgb24gYSBzdWRkZW4gaW4gYW1hemluZyBudW1iZXJzLCBhbmQgZmlsbGVkIHRoZSBDYXBpdG9sIHdpdGggdGhlaXIgYXBwbGF1c2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hbnksIHRvbywgd2VyZSBtb3ZlZCB0byB0ZWFycyBvZiBqb3kgd2hlbiB0aGV5IGJlaGVsZCB0aGUgZmVhdHVyZXMgb2YgTWFyaXVzLCBhbmQgQ2Flc2FyIHdhcyBoaWdobHkgZXh0b2xsZWQgYnkgdGhlbSwgYW5kIHJlZ2FyZGVkIGFzIGFib3ZlIGFsbCBvdGhlcnMgd29ydGh5IG9mIGhpcyBraW5zaGlwIHdpdGggTWFyaXVzLiBCdXQgd2hlbiB0aGUgc2VuYXRlIG1ldCB0byBkaXNjdXNzIHRoZXNlIG1hdHRlcnMsIENhdHVsdXMgTHV0YXRpdXMsIGEgbWFuIG9mIHRoZSBoaWdoZXN0IHJlcHV0ZSBhdCB0aGF0IHRpbWUgaW4gUm9tZSwgcm9zZSB1cCBhbmQgZGVub3VuY2VkIENhZXNhciwgdXR0ZXJpbmcgdGhlIG1lbW9yYWJsZSB3b3JkczogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ObyBsb25nZXIsIGluZGVlZCwgYnkgc2FwcGluZyBhbmQgbWluaW5nLCBDYWVzYXIsIGJ1dCB3aXRoIGVuZ2luZXMgb2Ygd2FyIGFydCB0aG91IGNhcHR1cmluZyB0aGUgZ292ZXJubWVudDwvcT4gQ2Flc2FyLCBob3dldmVyLCBkZWZlbmRlZCBoaW1zZWxmIGFnYWluc3QgdGhpcyBjaGFyZ2UgYW5kIGNvbnZpbmNlZCB0aGUgc2VuYXRlLCB3aGVyZXVwb24gaGlzIGFkbWlyZXJzIHdlcmUgc3RpbGwgbW9yZSBlbGF0ZWQgYW5kIGV4aG9ydGVkIGhpbSBub3QgdG8gbG93ZXIgaGlzIHByZXRlbnNpb25zIGZvciBhbnkgbWFuLCBzaW5jZSB0aGUgcGVvcGxlIHdvdWxkIGJlIGdsYWQgdG8gaGF2ZSBoaW0gdHJpdW1waCBvdmVyIGFsbCBvcHBvc2l0aW9uIGFuZCBiZSB0aGUgZmlyc3QgbWFuIGluIHRoZSBzdGF0ZS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3ZXJlIHR3byBwYXJ0aWVzIGluIHRoZSBjaXR5LCB0aGF0IG9mIFN1bGxhLCB3aGljaCBoYWQgYmVlbiBhbGwgcG93ZXJmdWwgc2luY2UgaGlzIGRheSwgYW5kIHRoYXQgb2YgTWFyaXVzLCB3aGljaCBhdCB0aGF0IHRpbWUgd2FzIGluIGFuIGFsdG9nZXRoZXIgbG93bHkgc3RhdGUsIGJlaW5nIGNvd2VkIGFuZCBzY2F0dGVyZWQuIFRoaXMgcGFydHkgQ2Flc2FyIHdpc2hlZCB0byByZXZpdmUgYW5kIGF0dGFjaCB0byBoaW1zZWxmLCBhbmQgdGhlcmVmb3JlLCB3aGVuIHRoZSBhbWJpdGlvdXMgZWZmb3J0cyBvZiBoaXMgYWVkaWxlc2hpcCB3ZXJlIGF0IHRoZWlyIGhlaWdodCwgaGUgaGFkIGltYWdlcyBvZiBNYXJpdXMgc2VjcmV0bHkgbWFkZSwgdG9nZXRoZXIgd2l0aCB0cm9waHktYmVhcmluZyBWaWN0b3JpZXMsIGFuZCB0aGVzZSBoZSBvcmRlcmVkIHRvIGJlIGNhcnJpZWQgYnkgbmlnaHQgYW5kIHNldCB1cCBvbiB0aGUgQ2FwaXRvbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGRheS1icmVhayB0aG9zZSB3aG8gYmVoZWxkIGFsbCB0aGVzZSBvYmplY3RzIGdsaXR0ZXJpbmcgd2l0aCBnb2xkIGFuZCBmYXNoaW9uZWQgd2l0aCB0aGUgbW9zdCBleHF1aXNpdGUgYXJ0IChhbmQgdGhleSBib3JlIGluc2NyaXB0aW9ucyBzZXR0aW5nIGZvcnRoIHRoZSBDaW1icmlhbiBzdWNjZXNzZXMgb2YgTWFyaXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCBjaGFwdGVycyB4aS48L2JpYmw+LTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMjIuMSIgdmFsaWQ9InllcyI+eHhpaTwvYmlibD4uPC9ub3RlPikgd2VyZSBhbWF6ZWQgYXQgdGhlIGRhcmluZyBvZiB0aGUgbWFuIHdobyBoYWQgc2V0IHRoZW0gdXAgKGZvciBpdCB3YXMgZXZpZGVudCB3aG8gaGFkIGRvbmUgaXQpLCBhbmQgdGhlIHJlcG9ydCBvZiBpdCBxdWlja2x5IHNwcmVhZGluZyBicm91Z2h0IGV2ZXJ5Ym9keSB0b2dldGhlciBmb3IgdGhlIHNpZ2h0LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE1hci4gMTEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCBjaGFwdGVycyB4aS48L2JpYmw+LTx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk1hcml1czwvdGl0bGU+LCBjaGFwdGVycyB4aS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBNYXIuIDIyLjEiIHZhbGlkPSJ5ZXMiPnh4aWk8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzb21lIGNyaWVkIG91dCB0aGF0IENhZXNhciB3YXMgc2NoZW1pbmcgdG8gdXN1cnAgc29sZSBwb3dlciBpbiB0aGUgc3RhdGUgd2hlbiBoZSB0aHVzIHJldml2ZWQgaG9ub3VycyB3aGljaCBoYWQgYmVlbiBidXJpZWQgYnkgbGF3cyBhbmQgZGVjcmVlcywgYW5kIHRoYXQgdGhpcyBwcm9jZWVkaW5nIHdhcyBhIHRlc3Qgb2YgdGhlIHBlb3BsZSwgd2hvc2UgZmVlbGluZ3MgdG93YXJkcyBoaW0gaGUgaGFkIHByZXZpb3VzbHkgc29mdGVuZWQsIHRvIHNlZSB3aGV0aGVyIHRoZXkgaGFkIGJlZW4gbWFkZSBkb2NpbGUgYnkgaGlzIGFtYml0aW91cyBkaXNwbGF5cyBhbmQgd291bGQgcGVybWl0IGhpbSB0byBhbXVzZSBoaW1zZWxmIHdpdGggc3VjaCBpbm5vdmF0aW9ucy4gVGhlIHBhcnRpc2FucyBvZiBNYXJpdXMsIGhvd2V2ZXIsIGVuY291cmFnZWQgb25lIGFub3RoZXIgYW5kIHNob3dlZCB0aGVtc2VsdmVzIG9uIGEgc3VkZGVuIGluIGFtYXppbmcgbnVtYmVycywgYW5kIGZpbGxlZCB0aGUgQ2FwaXRvbCB3aXRoIHRoZWlyIGFwcGxhdXNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1hbnksIHRvbywgd2VyZSBtb3ZlZCB0byB0ZWFycyBvZiBqb3kgd2hlbiB0aGV5IGJlaGVsZCB0aGUgZmVhdHVyZXMgb2YgTWFyaXVzLCBhbmQgQ2Flc2FyIHdhcyBoaWdobHkgZXh0b2xsZWQgYnkgdGhlbSwgYW5kIHJlZ2FyZGVkIGFzIGFib3ZlIGFsbCBvdGhlcnMgd29ydGh5IG9mIGhpcyBraW5zaGlwIHdpdGggTWFyaXVzLiBCdXQgd2hlbiB0aGUgc2VuYXRlIG1ldCB0byBkaXNjdXNzIHRoZXNlIG1hdHRlcnMsIENhdHVsdXMgTHV0YXRpdXMsIGEgbWFuIG9mIHRoZSBoaWdoZXN0IHJlcHV0ZSBhdCB0aGF0IHRpbWUgaW4gUm9tZSwgcm9zZSB1cCBhbmQgZGVub3VuY2VkIENhZXNhciwgdXR0ZXJpbmcgdGhlIG1lbW9yYWJsZSB3b3JkczogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk5vIGxvbmdlciwgaW5kZWVkLCBieSBzYXBwaW5nIGFuZCBtaW5pbmcsIENhZXNhciwgYnV0IHdpdGggZW5naW5lcyBvZiB3YXIgYXJ0IHRob3UgY2FwdHVyaW5nIHRoZSBnb3Zlcm5tZW50PC9xPiBDYWVzYXIsIGhvd2V2ZXIsIGRlZmVuZGVkIGhpbXNlbGYgYWdhaW5zdCB0aGlzIGNoYXJnZSBhbmQgY29udmluY2VkIHRoZSBzZW5hdGUsIHdoZXJldXBvbiBoaXMgYWRtaXJlcnMgd2VyZSBzdGlsbCBtb3JlIGVsYXRlZCBhbmQgZXhob3J0ZWQgaGltIG5vdCB0byBsb3dlciBoaXMgcHJldGVuc2lvbnMgZm9yIGFueSBtYW4sIHNpbmNlIHRoZSBwZW9wbGUgd291bGQgYmUgZ2xhZCB0byBoYXZlIGhpbSB0cml1bXBoIG92ZXIgYWxsIG9wcG9zaXRpb24gYW5kIGJlIHRoZSBmaXJzdCBtYW4gaW4gdGhlIHN0YXRlLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhpcyB0aW1lLCB0b28sIE1ldGVsbHVzLCB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPnBvbnRpZmV4IG1heGltdXM8L2ZvcmVpZ24+LCBvciA8Z2xvc3M+aGlnaCBwcmllc3Q8L2dsb3NzPiwgZGllZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2MyBCLkMuPC9ub3RlPiBhbmQgdGhvdWdoIElzYXVyaWN1cyBhbmQgQ2F0dWx1cyB3ZXJlIGNhbmRpZGF0ZXMgZm9yIHRoZSBwcmllc3Rob29kLCB3aGljaCB3YXMgYW4gb2JqZWN0IG9mIGdyZWF0IGFtYml0aW9uLCBhbmQgdGhvdWdoIHRoZXkgd2VyZSBtb3N0IGlsbHVzdHJpb3VzIG1lbiBhbmQgb2YgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBpbiB0aGUgc2VuYXRlLCBDYWVzYXIgd291bGQgbm90IGdpdmUgd2F5IHRvIHRoZW0sIGJ1dCBwcmVzZW50ZWQgaGltc2VsZiB0byB0aGUgcGVvcGxlIGFzIGEgcml2YWwgY2FuZGlkYXRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgZmF2b3VyIG9mIHRoZSBlbGVjdG9ycyBhcHBlYXJlZCB0byBiZSBhYm91dCBlcXVhbGx5IGRpdmlkZWQsIGFuZCB0aGVyZWZvcmUgQ2F0dWx1cywgd2hvLCBhcyB0aGUgd29ydGhpZXIgb2YgQ2Flc2FyJ3MgY29tcGV0aXRvcnMsIGRyZWFkZWQgbW9yZSB0aGUgdW5jZXJ0YWludHkgb2YgdGhlIGlzc3VlLCBzZW50IGFuZCB0cmllZCB0byBpbmR1Y2UgQ2Flc2FyIHRvIGRlc2lzdCBmcm9tIGhpcyBhbWJpdGlvdXMgcHJvamVjdCwgb2ZmZXJpbmcgaGltIGxhcmdlIHN1bXMgb2YgbW9uZXkuIEJ1dCBDYWVzYXIgZGVjbGFyZWQgdGhhdCBoZSB3b3VsZCBjYXJyeSB0aGUgY29udGVzdCB0aHJvdWdoIGV2ZW4gdGhvdWdoIGhlIGhhZCB0byBib3Jyb3cgc3RpbGwgbGFyZ2VyIHN1bXMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUsIHRvbywgTWV0ZWxsdXMsIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wb250aWZleCBtYXhpbXVzPC9mb3JlaWduPiwgb3IgPGdsb3NzIGNsYXNzPSJ0cmFuc2xhdGlvbiI+aGlnaCBwcmllc3Q8L2dsb3NzPiwgZGllZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDYzIEIuQy48L25vdGU+IGFuZCB0aG91Z2ggSXNhdXJpY3VzIGFuZCBDYXR1bHVzIHdlcmUgY2FuZGlkYXRlcyBmb3IgdGhlIHByaWVzdGhvb2QsIHdoaWNoIHdhcyBhbiBvYmplY3Qgb2YgZ3JlYXQgYW1iaXRpb24sIGFuZCB0aG91Z2ggdGhleSB3ZXJlIG1vc3QgaWxsdXN0cmlvdXMgbWVuIGFuZCBvZiB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGluIHRoZSBzZW5hdGUsIENhZXNhciB3b3VsZCBub3QgZ2l2ZSB3YXkgdG8gdGhlbSwgYnV0IHByZXNlbnRlZCBoaW1zZWxmIHRvIHRoZSBwZW9wbGUgYXMgYSByaXZhbCBjYW5kaWRhdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmYXZvdXIgb2YgdGhlIGVsZWN0b3JzIGFwcGVhcmVkIHRvIGJlIGFib3V0IGVxdWFsbHkgZGl2aWRlZCwgYW5kIHRoZXJlZm9yZSBDYXR1bHVzLCB3aG8sIGFzIHRoZSB3b3J0aGllciBvZiBDYWVzYXIncyBjb21wZXRpdG9ycywgZHJlYWRlZCBtb3JlIHRoZSB1bmNlcnRhaW50eSBvZiB0aGUgaXNzdWUsIHNlbnQgYW5kIHRyaWVkIHRvIGluZHVjZSBDYWVzYXIgdG8gZGVzaXN0IGZyb20gaGlzIGFtYml0aW91cyBwcm9qZWN0LCBvZmZlcmluZyBoaW0gbGFyZ2Ugc3VtcyBvZiBtb25leS4gQnV0IENhZXNhciBkZWNsYXJlZCB0aGF0IGhlIHdvdWxkIGNhcnJ5IHRoZSBjb250ZXN0IHRocm91Z2ggZXZlbiB0aG91Z2ggaGUgaGFkIHRvIGJvcnJvdyBzdGlsbCBsYXJnZXIgc3Vtcy48cCBjbGFzcz0idHJhbnNsYXRpb24iPlRoZSBkYXkgZm9yIHRoZSBlbGVjdGlvbiBjYW1lLCBhbmQgYXMgQ2Flc2FyJ3MgbW90aGVyIGFjY29tcGFuaWVkIGhpbSB0byB0aGUgZG9vciBpbiB0ZWFycywgaGUga2lzc2VkIGhlciBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk1vdGhlciwgdG9kYXkgdGhvdSBzaGFsdCBzZWUgdGh5IHNvbiBlaXRoZXIgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cG9udGlmZXggbWF4aW11czwvZm9yZWlnbj4gb3IgYW4gZXhpbGU8L3E+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb250ZXN0IHdhcyBzaGFycCwgYnV0IHdoZW4gdGhlIHZvdGUgd2FzIHRha2VuIENhZXNhciBwcmV2YWlsZWQsIGFuZCB0aGVyZWJ5IG1hZGUgdGhlIHNlbmF0ZSBhbmQgbm9ibGVzIGFmcmFpZCB0aGF0IGhlIHdvdWxkIGxlYWQgdGhlIHBlb3BsZSBvbiB0byBldmVyeSBleHRyZW1lIG9mIHJlY2tsZXNzbmVzcy4gVGhlcmVmb3JlIFBpc28gYW5kIENhdHVsdXMgYmxhbWVkIENpY2VybyBmb3IgaGF2aW5nIHNwYXJlZCBDYWVzYXIgd2hlbiwgaW4gdGhlIGFmZmFpciBvZiBDYXRpbGluZSwgaGUgZ2F2ZSBoaXMgZW5lbWllcyBhIGhvbGQgdXBvbiBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhdGlsaW5lLCBuYW1lbHksIGhhZCBwdXJwb3NlZCBub3Qgb25seSB0byBzdWJ2ZXJ0IHRoZSBjb25zdGl0dXRpb24sIGJ1dCB0byBkZXN0cm95IHRoZSB3aG9sZSBnb3Zlcm5tZW50IGFuZCB0aHJvdyBldmVyeXRoaW5nIGludG8gY29uZnVzaW9uLiBIZSBoaW1zZWxmLCBob3dldmVyLCB3YXMgZXhwZWxsZWQgZnJvbSB0aGUgY2l0eSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA2MyBCLkMuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMTAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeC48L2JpYmw+LTxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDIyLjEiIHZhbGlkPSJ5ZXMiPnh4aWk8L2JpYmw+Ljwvbm90ZT4gaGF2aW5nIGJlZW4gb3ZlcndoZWxtZWQgYnkgcHJvb2ZzIGJ5IGxlc3NlciBpbmlxdWl0aWVzIGJlZm9yZSBoaXMgbW9zdCBmYXIgcmVhY2hpbmcgcGxhbnMgd2VyZSBkaXNjb3ZlcmVkOyBidXQgaGUgbGVmdCBMZW50dWx1cyBhbmQgQ2V0aGVndXMgYmVoaW5kIGhpbSBpbiB0aGUgY2l0eSB0byBwcm9tb3RlIHRoZSBjb25zcGlyYWN5IGluIGhpcyBwbGFjZS4gTm93LCB3aGV0aGVyIG9yIG5vdCBDYWVzYXIgc2VjcmV0bHkgZ2F2ZSB0aGVzZSBtZW4gYW55IGNvdW50ZW5hbmNlIGFuZCBoZWxwLCBpcyB1bmNlcnRhaW47IGJ1dCBhZnRlciB0aGV5IGhhZCBiZWVuIG92ZXJ3aGVsbWluZ2x5IGNvbnZpY3RlZCBpbiB0aGUgc2VuYXRlLCBhbmQgQ2ljZXJvIHRoZSBjb25zdWwgYXNrZWQgZWFjaCBzZW5hdG9yIHRvIGdpdmUgaGlzIG9waW5pb24gb24gdGhlIG1hbm5lciBvZiB0aGVpciBwdW5pc2htZW50LCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz50aGUgcmVzdCwgZG93biB0byBDYWVzYXIsIHVyZ2VkIHRoYXQgdGhleSBiZSBwdXQgdG8gZGVhdGgsIGJ1dCBDYWVzYXIgcm9zZSBpbiBoaXMgcGxhY2UgYW5kIGRlbGl2ZXJlZCBhIGxvbmcgYW5kIHN0dWRpZWQgc3BlZWNoIGFnYWluc3QgdGhpcy4gSGUgcGxlYWRlZCB0aGF0IHRvIHB1dCB0byBkZWF0aCB3aXRob3V0IGxlZ2FsIHRyaWFsIG1lbiBvZiBoaWdoIHJhbmsgYW5kIGJyaWxsaWFudCBsaW5lYWdlIHdhcyBub3QsIGluIGhpcyBvcGluaW9uLCB0cmFkaXRpb25hbCBvciBqdXN0LCBleGNlcHQgdW5kZXIgZXh0cmVtZXN0IG5lY2Vzc2l0eTsgYnV0IHRoYXQgaWYgdGhleSBzaG91bGQgYmUgYm91bmQgYW5kIGtlcHQgaW4gY3VzdG9keSwgaW4gc3VjaCBjaXRpZXMgb2YgSXRhbHkgYXMgQ2ljZXJvIGhpbXNlbGYgbWlnaHQgZWxlY3QsIHVudGlsIHRoZSB3YXIgYWdhaW5zdCBDYXRpbGluZSBoYWQgYmVlbiBicm91Z2h0IHRvIGEgc3VjY2Vzc2Z1bCBlbmQsIHRoZSBzZW5hdGUgY291bGQgYWZ0ZXJ3YXJkcywgaW4gYSB0aW1lIG9mIHBlYWNlIGFuZCBhdCB0aGVpciBsZWlzdXJlLCB2b3RlIHVwb24gdGhlIGNhc2Ugb2YgZWFjaCBvbmUgb2YgdGhlbS48L3A+CiAgICAgICAgIDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TW90aGVyLCB0b2RheSB0aG91IHNoYWx0IHNlZSB0aHkgc29uIGVpdGhlciA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5wb250aWZleCBtYXhpbXVzPC9mb3JlaWduPiBvciBhbiBleGlsZTwvcT4KCQkJCSAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+cG9udGlmZXggbWF4aW11czwvZm9yZWlnbj4gb3IgYW4gZXhpbGU8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBjb250ZXN0IHdhcyBzaGFycCwgYnV0IHdoZW4gdGhlIHZvdGUgd2FzIHRha2VuIENhZXNhciBwcmV2YWlsZWQsIGFuZCB0aGVyZWJ5IG1hZGUgdGhlIHNlbmF0ZSBhbmQgbm9ibGVzIGFmcmFpZCB0aGF0IGhlIHdvdWxkIGxlYWQgdGhlIHBlb3BsZSBvbiB0byBldmVyeSBleHRyZW1lIG9mIHJlY2tsZXNzbmVzcy4gVGhlcmVmb3JlIFBpc28gYW5kIENhdHVsdXMgYmxhbWVkIENpY2VybyBmb3IgaGF2aW5nIHNwYXJlZCBDYWVzYXIgd2hlbiwgaW4gdGhlIGFmZmFpciBvZiBDYXRpbGluZSwgaGUgZ2F2ZSBoaXMgZW5lbWllcyBhIGhvbGQgdXBvbiBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhdGlsaW5lLCBuYW1lbHksIGhhZCBwdXJwb3NlZCBub3Qgb25seSB0byBzdWJ2ZXJ0IHRoZSBjb25zdGl0dXRpb24sIGJ1dCB0byBkZXN0cm95IHRoZSB3aG9sZSBnb3Zlcm5tZW50IGFuZCB0aHJvdyBldmVyeXRoaW5nIGludG8gY29uZnVzaW9uLiBIZSBoaW1zZWxmLCBob3dldmVyLCB3YXMgZXhwZWxsZWQgZnJvbSB0aGUgY2l0eSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDYzIEIuQy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDEwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeC48L2JpYmw+LTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMjIuMSIgdmFsaWQ9InllcyI+eHhpaTwvYmlibD4uPC9ub3RlPiBoYXZpbmcgYmVlbiBvdmVyd2hlbG1lZCBieSBwcm9vZnMgYnkgbGVzc2VyIGluaXF1aXRpZXMgYmVmb3JlIGhpcyBtb3N0IGZhciByZWFjaGluZyBwbGFucyB3ZXJlIGRpc2NvdmVyZWQ7IGJ1dCBoZSBsZWZ0IExlbnR1bHVzIGFuZCBDZXRoZWd1cyBiZWhpbmQgaGltIGluIHRoZSBjaXR5IHRvIHByb21vdGUgdGhlIGNvbnNwaXJhY3kgaW4gaGlzIHBsYWNlLiBOb3csIHdoZXRoZXIgb3Igbm90IENhZXNhciBzZWNyZXRseSBnYXZlIHRoZXNlIG1lbiBhbnkgY291bnRlbmFuY2UgYW5kIGhlbHAsIGlzIHVuY2VydGFpbjsgYnV0IGFmdGVyIHRoZXkgaGFkIGJlZW4gb3ZlcndoZWxtaW5nbHkgY29udmljdGVkIGluIHRoZSBzZW5hdGUsIGFuZCBDaWNlcm8gdGhlIGNvbnN1bCBhc2tlZCBlYWNoIHNlbmF0b3IgdG8gZ2l2ZSBoaXMgb3BpbmlvbiBvbiB0aGUgbWFubmVyIG9mIHRoZWlyIHB1bmlzaG1lbnQsIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAxMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIGNoYXB0ZXJzIHguPC9iaWJsPi08dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeC48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDIyLjEiIHZhbGlkPSJ5ZXMiPnh4aWk8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['7.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPnRoZSByZXN0LCBkb3duIHRvIENhZXNhciwgdXJnZWQgdGhhdCB0aGV5IGJlIHB1dCB0byBkZWF0aCwgYnV0IENhZXNhciByb3NlIGluIGhpcyBwbGFjZSBhbmQgZGVsaXZlcmVkIGEgbG9uZyBhbmQgc3R1ZGllZCBzcGVlY2ggYWdhaW5zdCB0aGlzLiBIZSBwbGVhZGVkIHRoYXQgdG8gcHV0IHRvIGRlYXRoIHdpdGhvdXQgbGVnYWwgdHJpYWwgbWVuIG9mIGhpZ2ggcmFuayBhbmQgYnJpbGxpYW50IGxpbmVhZ2Ugd2FzIG5vdCwgaW4gaGlzIG9waW5pb24sIHRyYWRpdGlvbmFsIG9yIGp1c3QsIGV4Y2VwdCB1bmRlciBleHRyZW1lc3QgbmVjZXNzaXR5OyBidXQgdGhhdCBpZiB0aGV5IHNob3VsZCBiZSBib3VuZCBhbmQga2VwdCBpbiBjdXN0b2R5LCBpbiBzdWNoIGNpdGllcyBvZiBJdGFseSBhcyBDaWNlcm8gaGltc2VsZiBtaWdodCBlbGVjdCwgdW50aWwgdGhlIHdhciBhZ2FpbnN0IENhdGlsaW5lIGhhZCBiZWVuIGJyb3VnaHQgdG8gYSBzdWNjZXNzZnVsIGVuZCwgdGhlIHNlbmF0ZSBjb3VsZCBhZnRlcndhcmRzLCBpbiBhIHRpbWUgb2YgcGVhY2UgYW5kIGF0IHRoZWlyIGxlaXN1cmUsIHZvdGUgdXBvbiB0aGUgY2FzZSBvZiBlYWNoIG9uZSBvZiB0aGVtLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBvcGluaW9uIHNlZW1lZCBzbyBodW1hbmUsIGFuZCB0aGUgc3BlZWNoIGluIHN1cHBvcnQgb2YgaXQgd2FzIG1hZGUgd2l0aCBzdWNoIHBvd2VyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDIyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byBNaW5vcjwvdGl0bGU+LCB4eGlpLiA0PC9iaWJsPiBmLjwvbm90ZT4gdGhhdCBub3Qgb25seSB0aG9zZSB3aG8gcm9zZSB0byBzcGVhayBhZnRlciBDYWVzYXIgc2lkZWQgd2l0aCBoaW0sIGJ1dCBtYW55IGFsc28gb2YgdGhvc2Ugd2hvIGhhZCBwcmVjZWRlZCBoaW0gdG9vayBiYWNrIHRoZSBvcGluaW9ucyB3aGljaCB0aGV5IGhhZCBleHByZXNzZWQgYW5kIHdlbnQgb3ZlciB0byBoaXMsIHVudGlsIHRoZSBxdWVzdGlvbiBjYW1lIHJvdW5kIHRvIENhdG8gYW5kIENhdHVsdXMuIFRoZXNlIHdhcm1seSBvcHBvc2VkIENhZXNhcidzIHByb3Bvc2FsLCBhbmQgQ2F0byBldmVuIGhlbHBlZCB0byByYWlzZSBzdXNwaWNpb24gYWdhaW5zdCBDYWVzYXIgYnkgd2hhdCBoZSBzYWlkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDIzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2F0byBNaW5vcjwvdGl0bGU+LCBjaGFwdGVyIHh4aWlpPC9iaWJsPi48L25vdGU+IEFzIGEgcmVzdWx0LCB0aGUgbWVuIHdlcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGV4ZWN1dGlvbmVyLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgbWFueSBvZiB0aGUgeW91bmcgbWVuIHdobyBhdCB0aGF0IHRpbWUgZm9ybWVkIGEgYm9keS1ndWFyZCBmb3IgQ2ljZXJvIHJhbiB0b2dldGhlciB3aXRoIGRyYXduIHN3b3JkcyBhbmQgdGhyZWF0ZW5lZCBDYWVzYXIgYXMgaGUgd2FzIGxlYXZpbmcgdGhlIHNlbmF0ZS4gQnV0IEN1cmlvLCBhcyB3ZSBhcmUgdG9sZCwgdGhyZXcgaGlzIHRvZ2Egcm91bmQgQ2Flc2FyIGFuZCBnb3QgaGltIGF3YXksIHdoaWxlIENpY2VybyBoaW1zZWxmLCB3aGVuIHRoZSB5b3VuZyBtZW4gbG9va2VkIHRvIGhpbSBmb3IgYSBzaWduLCBzaG9vayBoaXMgaGVhZCwgZWl0aGVyIHRocm91Z2ggZmVhciBvZiB0aGUgcGVvcGxlLCBvciBiZWNhdXNlIGhlIHRob3VnaHQgdGhlIG11cmRlciB3b3VsZCBiZSB3aG9sbHkgY29udHJhcnkgdG8gbGF3IGFuZCBqdXN0aWNlLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG9waW5pb24gc2VlbWVkIHNvIGh1bWFuZSwgYW5kIHRoZSBzcGVlY2ggaW4gc3VwcG9ydCBvZiBpdCB3YXMgbWFkZSB3aXRoIHN1Y2ggcG93ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDIyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1pbm9yPC90aXRsZT4sIHh4aWkuIDQ8L2JpYmw+IGYuPC9ub3RlPiB0aGF0IG5vdCBvbmx5IHRob3NlIHdobyByb3NlIHRvIHNwZWFrIGFmdGVyIENhZXNhciBzaWRlZCB3aXRoIGhpbSwgYnV0IG1hbnkgYWxzbyBvZiB0aG9zZSB3aG8gaGFkIHByZWNlZGVkIGhpbSB0b29rIGJhY2sgdGhlIG9waW5pb25zIHdoaWNoIHRoZXkgaGFkIGV4cHJlc3NlZCBhbmQgd2VudCBvdmVyIHRvIGhpcywgdW50aWwgdGhlIHF1ZXN0aW9uIGNhbWUgcm91bmQgdG8gQ2F0byBhbmQgQ2F0dWx1cy4gVGhlc2Ugd2FybWx5IG9wcG9zZWQgQ2Flc2FyJ3MgcHJvcG9zYWwsIGFuZCBDYXRvIGV2ZW4gaGVscGVkIHRvIHJhaXNlIHN1c3BpY2lvbiBhZ2FpbnN0IENhZXNhciBieSB3aGF0IGhlIHNhaWQuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjIuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWlub3I8L3RpdGxlPiwgeHhpaS4gNDwvYmlibD4gZi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1pbm9yPC90aXRsZT4sIHh4aWkuIDQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMjMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWlub3I8L3RpdGxlPiwgY2hhcHRlciB4eGlpaTwvYmlibD4uPC9ub3RlPiBBcyBhIHJlc3VsdCwgdGhlIG1lbiB3ZXJlIGhhbmRlZCBvdmVyIHRvIHRoZSBleGVjdXRpb25lciwgCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNaW5vcjwvdGl0bGU+LCBjaGFwdGVyIHh4aWlpPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1pbm9yPC90aXRsZT4sIGNoYXB0ZXIgeHhpaWk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYW55IG9mIHRoZSB5b3VuZyBtZW4gd2hvIGF0IHRoYXQgdGltZSBmb3JtZWQgYSBib2R5LWd1YXJkIGZvciBDaWNlcm8gcmFuIHRvZ2V0aGVyIHdpdGggZHJhd24gc3dvcmRzIGFuZCB0aHJlYXRlbmVkIENhZXNhciBhcyBoZSB3YXMgbGVhdmluZyB0aGUgc2VuYXRlLiBCdXQgQ3VyaW8sIGFzIHdlIGFyZSB0b2xkLCB0aHJldyBoaXMgdG9nYSByb3VuZCBDYWVzYXIgYW5kIGdvdCBoaW0gYXdheSwgd2hpbGUgQ2ljZXJvIGhpbXNlbGYsIHdoZW4gdGhlIHlvdW5nIG1lbiBsb29rZWQgdG8gaGltIGZvciBhIHNpZ24sIHNob29rIGhpcyBoZWFkLCBlaXRoZXIgdGhyb3VnaCBmZWFyIG9mIHRoZSBwZW9wbGUsIG9yIGJlY2F1c2UgaGUgdGhvdWdodCB0aGUgbXVyZGVyIHdvdWxkIGJlIHdob2xseSBjb250cmFyeSB0byBsYXcgYW5kIGp1c3RpY2UuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBpZiB0aGlzIGlzIHRydWUsIEkgZG8gbm90IHNlZSB3aHkgQ2ljZXJvIGRpZCBub3QgbWVudGlvbiBpdCBpbiB0aGUgdHJlYXRpc2Ugb24gaGlzIGNvbnN1bHNoaXA7PG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm8gbG9uZ2VyIGV4dGFudC48L25vdGU+IGhvd2V2ZXIsIGhlIHdhcyBhZnRlcndhcmRzIGJsYW1lZCBmb3Igbm90IGhhdmluZyBpbXByb3ZlZCB0aGF0IGJlc3Qgb2YgYWxsIG9wcG9ydHVuaXRpZXMgZm9yIHJlbW92aW5nIENhZXNhci4gSW5zdGVhZCwgaGUgc2hvd2VkIGEgY293YXJkbHkgZmVhciBvZiB0aGUgcGVvcGxlLCB3aG8gd2VyZSBleHRyYXZhZ2FudGx5IGF0dGFjaGVkIHRvIENhZXNhcjsgaW4gZmFjdCwgYSBmZXcgZGF5cyBhZnRlcndhcmQsIHdoZW4gQ2Flc2FyIGNhbWUgaW50byB0aGUgc2VuYXRlIGFuZCB0cmllZCB0byBkZWZlbmQgaGltc2VsZiBpbiB0aGUgbWF0dGVycyB3aGVyZWluIHN1c3BpY2lvbiBoYWQgYmVlbiBmaXhlZCB1cG9uIGhpbSwgYW5kIG1ldCB3aXRoIGEgdHVtdWx0IG9mIGRpc2FwcHJvdmFsLCB0aGUgcGVvcGxlLCBzZWVpbmcgdGhhdCB0aGUgc2Vzc2lvbiBvZiB0aGUgc2VuYXRlIHdhcyBsYXN0aW5nIGEgbG9uZ2VyIHRpbWUgdGhhbiB1c3VhbCwgY2FtZSB1cCB3aXRoIGxvdWQgY3JpZXMgYW5kIHN1cnJvdW5kZWQgdGhlIHNlbmF0ZS1ob3VzZSwgZGVtYW5kaW5nIENhZXNhciwgYW5kIG9yZGVyaW5nIHRoZSBzZW5hdGUgdG8gbGV0IGhpbSBnby4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIGZvciB0aGlzIHJlYXNvbiwgdG9vLCB0aGF0IENhdG8sIGZlYXJpbmcgYWJvdmUgYWxsIHRoaW5ncyBhIHJldm9sdXRpb25hcnkgbW92ZW1lbnQgc2V0IG9uIGZvb3QgYnkgdGhlIHBvb3JlciBjbGFzc2VzLCB3aG8gd2VyZSBzZXR0aW5nIHRoZSB3aG9sZSBtdWx0aXR1ZGUgb24gZmlyZSB3aXRoIHRoZSBob3BlcyB3aGljaCB0aGV5IGZpeGVkIHVwb24gQ2Flc2FyLCBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byBhc3NpZ24gdGhlbSBhIG1vbnRobHkgYWxsb3dhbmNlIG9mIGdyYWluLCBpbiBjb25zZXF1ZW5jZSBvZiB3aGljaCBhbiBhbm51YWwgb3V0bGF5IG9mIHNldmVuIG1pbGxpb24gZml2ZSBodW5kcmVkIHRob3VzYW5kIGRyYWNobWFzIHdhcyBhZGRlZCB0byB0aGUgb3RoZXIgZXhwZW5kaXR1cmVzIG9mIHRoZSBzdGF0ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gTWlub3I8L3RpdGxlPiwgeHh2aS4gMTwvYmlibD4uPC9ub3RlPiBIb3dldmVyLCB0aGUgZ3JlYXQgZmVhciB3aGljaCBwcmV2YWlsZWQgYXQgdGhlIHRpbWUgd2FzIG1hbmlmZXN0bHkgcXVlbmNoZWQgYnkgdGhpcyBtZWFzdXJlLCBhbmQgdGhlIGdyZWF0ZXN0IHBhcnQgb2YgQ2Flc2FyJ3MgcG93ZXIgd2FzIGJyb2tlbiBkb3duIGFuZCBkaXNzaXBhdGVkIGluIHRoZSBuaWNrIG9mIHRpbWUsIHNpbmNlIGhlIHdhcyBwcmFldG9yIGVsZWN0LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciA2MiBCLkMuPC9ub3RlPiBhbmQgd291bGQgYmUgbW9yZSBmb3JtaWRhYmxlIG9uIGFjY291bnQgb2YgaGlzIG9mZmljZS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgaWYgdGhpcyBpcyB0cnVlLCBJIGRvIG5vdCBzZWUgd2h5IENpY2VybyBkaWQgbm90IG1lbnRpb24gaXQgaW4gdGhlIHRyZWF0aXNlIG9uIGhpcyBjb25zdWxzaGlwOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Tm8gbG9uZ2VyIGV4dGFudC48L25vdGU+IGhvd2V2ZXIsIGhlIHdhcyBhZnRlcndhcmRzIGJsYW1lZCBmb3Igbm90IGhhdmluZyBpbXByb3ZlZCB0aGF0IGJlc3Qgb2YgYWxsIG9wcG9ydHVuaXRpZXMgZm9yIHJlbW92aW5nIENhZXNhci4gSW5zdGVhZCwgaGUgc2hvd2VkIGEgY293YXJkbHkgZmVhciBvZiB0aGUgcGVvcGxlLCB3aG8gd2VyZSBleHRyYXZhZ2FudGx5IGF0dGFjaGVkIHRvIENhZXNhcjsgaW4gZmFjdCwgYSBmZXcgZGF5cyBhZnRlcndhcmQsIHdoZW4gQ2Flc2FyIGNhbWUgaW50byB0aGUgc2VuYXRlIGFuZCB0cmllZCB0byBkZWZlbmQgaGltc2VsZiBpbiB0aGUgbWF0dGVycyB3aGVyZWluIHN1c3BpY2lvbiBoYWQgYmVlbiBmaXhlZCB1cG9uIGhpbSwgYW5kIG1ldCB3aXRoIGEgdHVtdWx0IG9mIGRpc2FwcHJvdmFsLCB0aGUgcGVvcGxlLCBzZWVpbmcgdGhhdCB0aGUgc2Vzc2lvbiBvZiB0aGUgc2VuYXRlIHdhcyBsYXN0aW5nIGEgbG9uZ2VyIHRpbWUgdGhhbiB1c3VhbCwgY2FtZSB1cCB3aXRoIGxvdWQgY3JpZXMgYW5kIHN1cnJvdW5kZWQgdGhlIHNlbmF0ZS1ob3VzZSwgZGVtYW5kaW5nIENhZXNhciwgYW5kIG9yZGVyaW5nIHRoZSBzZW5hdGUgdG8gbGV0IGhpbSBnby4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBmb3IgdGhpcyByZWFzb24sIHRvbywgdGhhdCBDYXRvLCBmZWFyaW5nIGFib3ZlIGFsbCB0aGluZ3MgYSByZXZvbHV0aW9uYXJ5IG1vdmVtZW50IHNldCBvbiBmb290IGJ5IHRoZSBwb29yZXIgY2xhc3Nlcywgd2hvIHdlcmUgc2V0dGluZyB0aGUgd2hvbGUgbXVsdGl0dWRlIG9uIGZpcmUgd2l0aCB0aGUgaG9wZXMgd2hpY2ggdGhleSBmaXhlZCB1cG9uIENhZXNhciwgcGVyc3VhZGVkIHRoZSBzZW5hdGUgdG8gYXNzaWduIHRoZW0gYSBtb250aGx5IGFsbG93YW5jZSBvZiBncmFpbiwgaW4gY29uc2VxdWVuY2Ugb2Ygd2hpY2ggYW4gYW5udWFsIG91dGxheSBvZiBzZXZlbiBtaWxsaW9uIGZpdmUgaHVuZHJlZCB0aG91c2FuZCBkcmFjaG1hcyB3YXMgYWRkZWQgdG8gdGhlIG90aGVyIGV4cGVuZGl0dXJlcyBvZiB0aGUgc3RhdGUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDI2LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1pbm9yPC90aXRsZT4sIHh4dmkuIDE8L2JpYmw+Ljwvbm90ZT4gSG93ZXZlciwgdGhlIGdyZWF0IGZlYXIgd2hpY2ggcHJldmFpbGVkIGF0IHRoZSB0aW1lIHdhcyBtYW5pZmVzdGx5IHF1ZW5jaGVkIGJ5IHRoaXMgbWVhc3VyZSwgYW5kIHRoZSBncmVhdGVzdCBwYXJ0IG9mIENhZXNhcidzIHBvd2VyIHdhcyBicm9rZW4gZG93biBhbmQgZGlzc2lwYXRlZCBpbiB0aGUgbmljayBvZiB0aW1lLCBzaW5jZSBoZSB3YXMgcHJhZXRvciBlbGVjdCw8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAyNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNaW5vcjwvdGl0bGU+LCB4eHZpLiAxPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1pbm9yPC90aXRsZT4sIHh4dmkuIDE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkZvciB0aGUgeWVhciA2MiBCLkMuPC9ub3RlPiBhbmQgd291bGQgYmUgbW9yZSBmb3JtaWRhYmxlIG9uIGFjY291bnQgb2YgaGlzIG9mZmljZS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZXJlIHdlcmUgbm8gZGlzdHVyYmFuY2VzIGluIGNvbnNlcXVlbmNlIG9mIENhZXNhcidzIHByYWV0b3JzaGlwLCBidXQgYW4gdW5wbGVhc2FudCBpbmNpZGVudCBoYXBwZW5lZCBpbiBoaXMgZmFtaWx5LiBQdWJsaXVzIENsb2RpdXMgd2FzIGEgbWFuIG9mIHBhdHJpY2lhbiBiaXJ0aCwgYW5kIGNvbnNwaWN1b3VzIGZvciB3ZWFsdGggYW5kIGVsb3F1ZW5jZSwgYnV0IGluIGluc29sZW5jZSBhbmQgZWZmcm9udGVyeSBoZSBzdXJwYXNzZWQgYWxsIHRoZSBub3RvcmlvdXMgc2NvdW5kcmVscyBvZiBoaXMgdGltZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBtYW4gd2FzIGluIGxvdmUgd2l0aCBQb21wZWlhIHRoZSB3aWZlIG9mIENhZXNhciwgYW5kIHNoZSB3YXMgbm90IHVud2lsbGluZy4gQnV0IGNsb3NlIHdhdGNoIHdhcyBrZXB0IHVwb24gdGhlIHdvbWVuJ3MgYXBhcnRtZW50cywgYW5kIEF1cmVsaWEsIENhZXNhcidzIG1vdGhlciwgYSB3b21hbiBvZiBkaXNjcmV0aW9uLCB3b3VsZCBuZXZlciBsZXQgdGhlIHlvdW5nIHdpZmUgb3V0IG9mIGhlciBzaWdodCwgYW5kIG1hZGUgaXQgZGlmZmljdWx0IGFuZCBkYW5nZXJvdXMgZm9yIHRoZSBsb3ZlcnMgdG8gaGF2ZSBhbiBpbnRlcnZpZXcuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGVyZSB3ZXJlIG5vIGRpc3R1cmJhbmNlcyBpbiBjb25zZXF1ZW5jZSBvZiBDYWVzYXIncyBwcmFldG9yc2hpcCwgYnV0IGFuIHVucGxlYXNhbnQgaW5jaWRlbnQgaGFwcGVuZWQgaW4gaGlzIGZhbWlseS4gUHVibGl1cyBDbG9kaXVzIHdhcyBhIG1hbiBvZiBwYXRyaWNpYW4gYmlydGgsIGFuZCBjb25zcGljdW91cyBmb3Igd2VhbHRoIGFuZCBlbG9xdWVuY2UsIGJ1dCBpbiBpbnNvbGVuY2UgYW5kIGVmZnJvbnRlcnkgaGUgc3VycGFzc2VkIGFsbCB0aGUgbm90b3Jpb3VzIHNjb3VuZHJlbHMgb2YgaGlzIHRpbWUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbWFuIHdhcyBpbiBsb3ZlIHdpdGggUG9tcGVpYSB0aGUgd2lmZSBvZiBDYWVzYXIsIGFuZCBzaGUgd2FzIG5vdCB1bndpbGxpbmcuIEJ1dCBjbG9zZSB3YXRjaCB3YXMga2VwdCB1cG9uIHRoZSB3b21lbidzIGFwYXJ0bWVudHMsIGFuZCBBdXJlbGlhLCBDYWVzYXIncyBtb3RoZXIsIGEgd29tYW4gb2YgZGlzY3JldGlvbiwgd291bGQgbmV2ZXIgbGV0IHRoZSB5b3VuZyB3aWZlIG91dCBvZiBoZXIgc2lnaHQsIGFuZCBtYWRlIGl0IGRpZmZpY3VsdCBhbmQgZGFuZ2Vyb3VzIGZvciB0aGUgbG92ZXJzIHRvIGhhdmUgYW4gaW50ZXJ2aWV3LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIFJvbWFucyBoYXZlIGEgZ29kZGVzcyB3aG9tIHRoZXkgY2FsbCBCb25hLCBjb3JyZXNwb25kaW5nIHRvIHRoZSBHcmVlayBHeW5hZWNlaWEuIFRoZSBQaHJ5Z2lhbnMgY2xhaW0gdGhpcyBnb2RkZXNzIGFzIHRoZWlyIG93biwgYW5kIHNheSB0aGF0IHNoZSB3YXMgdGhlIG1vdGhlciBvZiBLaW5nIE1pZGFzOyB0aGUgUm9tYW5zIHNheSBzaGUgd2FzIGEgRHJ5YWQgbnltcGggYW5kIHRoZSB3aWZlIG9mIEZhdW51czsgdGhlIEdyZWVrcyB0aGF0IHNoZSB3YXMgdGhlIHVubmFtZWFibGUgb25lIGFtb25nIHRoZSBtb3RoZXJzIG9mIERpb255c3VzLiBBbmQgdGhpcyBpcyB0aGUgcmVhc29uIHdoeSB0aGUgd29tZW4gY292ZXIgdGhlaXIgYm9vdGhzIHdpdGggdmluZS1icmFuY2hlcyB3aGVuIHRoZXkgY2VsZWJyYXRlIGhlciBmZXN0aXZhbCwgYW5kIHdoeSBhIHNhY3JlZCBzZXJwZW50IGlzIGVudGhyb25lZCBiZXNpZGUgdGhlIGdvZGRlc3MgaW4gY29uZm9ybWl0eSB3aXRoIHRoZSBteXRoLiBJdCBpcyBub3QgbGF3ZnVsIGZvciBhIG1hbiB0byBhdHRlbmQgdGhlIHNhY3JlZCBjZXJlbW9uaWVzLCBub3IgZXZlbiB0byBiZSBpbiB0aGUgaG91c2Ugd2hlbiB0aGV5IGFyZSBjZWxlYnJhdGVkOyBidXQgdGhlIHdvbWVuLCBhcGFydCBieSB0aGVtc2VsdmVzLCBhcmUgc2FpZCB0byBwZXJmb3JtIG1hbnkgcml0ZXMgZHVyaW5nIHRoZWlyIHNhY3JlZCBzZXJ2aWNlIHdoaWNoIGFyZSBPcnBoaWMgaW4gdGhlaXIgY2hhcmFjdGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgd2hlbiB0aGUgdGltZSBmb3IgdGhlIGZlc3RpdmFsIGlzIGF0IGhhbmQsIHRoZSBjb25zdWwgb3IgcHJhZXRvciBhdCB3aG9zZSBob3VzZSBpdCBpcyB0byBiZSBoZWxkIGdvZXMgYXdheSwgYW5kIGV2ZXJ5IG1hbGUgd2l0aCBoaW0sIHdoaWxlIGhpcyB3aWZlIHRha2VzIHBvc3Nlc3Npb24gb2YgdGhlIHByZW1pc2VzIGFuZCBwdXRzIHRoZW0gaW4gZHVlIGFycmF5LiBUaGUgbW9zdCBpbXBvcnRhbnQgcml0ZXMgYXJlIGNlbGVicmF0ZWQgYnkgbmlnaHQsIHdoZW4gbWlydGggYXR0ZW5kcyB0aGUgcmV2ZWxzLCBhbmQgbXVjaCBtdXNpYywgdG9vLCBpcyBoZWFyZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlIFJvbWFucyBoYXZlIGEgZ29kZGVzcyB3aG9tIHRoZXkgY2FsbCBCb25hLCBjb3JyZXNwb25kaW5nIHRvIHRoZSBHcmVlayBHeW5hZWNlaWEuIFRoZSBQaHJ5Z2lhbnMgY2xhaW0gdGhpcyBnb2RkZXNzIGFzIHRoZWlyIG93biwgYW5kIHNheSB0aGF0IHNoZSB3YXMgdGhlIG1vdGhlciBvZiBLaW5nIE1pZGFzOyB0aGUgUm9tYW5zIHNheSBzaGUgd2FzIGEgRHJ5YWQgbnltcGggYW5kIHRoZSB3aWZlIG9mIEZhdW51czsgdGhlIEdyZWVrcyB0aGF0IHNoZSB3YXMgdGhlIHVubmFtZWFibGUgb25lIGFtb25nIHRoZSBtb3RoZXJzIG9mIERpb255c3VzLiBBbmQgdGhpcyBpcyB0aGUgcmVhc29uIHdoeSB0aGUgd29tZW4gY292ZXIgdGhlaXIgYm9vdGhzIHdpdGggdmluZS1icmFuY2hlcyB3aGVuIHRoZXkgY2VsZWJyYXRlIGhlciBmZXN0aXZhbCwgYW5kIHdoeSBhIHNhY3JlZCBzZXJwZW50IGlzIGVudGhyb25lZCBiZXNpZGUgdGhlIGdvZGRlc3MgaW4gY29uZm9ybWl0eSB3aXRoIHRoZSBteXRoLiBJdCBpcyBub3QgbGF3ZnVsIGZvciBhIG1hbiB0byBhdHRlbmQgdGhlIHNhY3JlZCBjZXJlbW9uaWVzLCBub3IgZXZlbiB0byBiZSBpbiB0aGUgaG91c2Ugd2hlbiB0aGV5IGFyZSBjZWxlYnJhdGVkOyBidXQgdGhlIHdvbWVuLCBhcGFydCBieSB0aGVtc2VsdmVzLCBhcmUgc2FpZCB0byBwZXJmb3JtIG1hbnkgcml0ZXMgZHVyaW5nIHRoZWlyIHNhY3JlZCBzZXJ2aWNlIHdoaWNoIGFyZSBPcnBoaWMgaW4gdGhlaXIgY2hhcmFjdGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB3aGVuIHRoZSB0aW1lIGZvciB0aGUgZmVzdGl2YWwgaXMgYXQgaGFuZCwgdGhlIGNvbnN1bCBvciBwcmFldG9yIGF0IHdob3NlIGhvdXNlIGl0IGlzIHRvIGJlIGhlbGQgZ29lcyBhd2F5LCBhbmQgZXZlcnkgbWFsZSB3aXRoIGhpbSwgd2hpbGUgaGlzIHdpZmUgdGFrZXMgcG9zc2Vzc2lvbiBvZiB0aGUgcHJlbWlzZXMgYW5kIHB1dHMgdGhlbSBpbiBkdWUgYXJyYXkuIFRoZSBtb3N0IGltcG9ydGFudCByaXRlcyBhcmUgY2VsZWJyYXRlZCBieSBuaWdodCwgd2hlbiBtaXJ0aCBhdHRlbmRzIHRoZSByZXZlbHMsIGFuZCBtdWNoIG11c2ljLCB0b28sIGlzIGhlYXJkLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoZSB0aW1lIG9mIHdoaWNoIEkgc3BlYWssIFBvbXBlaWEgd2FzIGNlbGVicmF0aW5nIHRoaXMgZmVzdGl2YWwsIGFuZCBDbG9kaXVzLCB3aG8gd2FzIHN0aWxsIGJlYXJkbGVzcyBhbmQgb24gdGhpcyBhY2NvdW50IHRob3VnaHQgdG8gcGFzcyB1bm5vdGljZWQsIGFzc3VtZWQgdGhlIGRyZXNzIGFuZCBpbXBsZW1lbnRzIG9mIGEgbHV0ZS1naXJsIGFuZCB3ZW50IHRvIHRoZSBob3VzZSwgbG9va2luZyBsaWtlIGEgeW91bmcgd29tYW4uIEhlIGZvdW5kIHRoZSBkb29yIG9wZW4sIGFuZCB3YXMgYnJvdWdodCBpbiBzYWZlbHkgYnkgdGhlIG1haWQtc2VydmFudCB0aGVyZSwgd2hvIHdhcyBpbiB0aGUgc2VjcmV0OyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5idXQgYWZ0ZXIgc2hlIGhhZCBydW4gb24gYWhlYWQgdG8gdGVsbCBQb21wZWlhIGFuZCBzb21lIHRpbWUgaGFkIGVsYXBzZWQsIENsb2RpdXMgaGFkIG5vdCB0aGUgcGF0aWVuY2UgdG8gd2FpdCB3aGVyZSBoZSBoYWQgYmVlbiBsZWZ0LCBhbmQgc28sIGFzIGhlIHdhcyB3YW5kZXJpbmcgYWJvdXQgaW4gdGhlIGhvdXNlIChhIGxhcmdlIG9uZSkgYW5kIHRyeWluZyB0byBhdm9pZCB0aGUgbGlnaHRzLCBhbiBhdHRlbmRhbnQgb2YgQXVyZWxpYSBjYW1lIHVwb24gaGltIGFuZCBhc2tlZCBoaW0gdG8gcGxheSB3aXRoIGhlciwgYXMgb25lIHdvbWFuIHdvdWxkIGFub3RoZXIsIGFuZCB3aGVuIGhlIHJlZnVzZWQsIHNoZSBkcmFnZ2VkIGhpbSBmb3J3YXJkIGFuZCBhc2tlZCB3aG8gaGUgd2FzIGFuZCB3aGVuY2UgaGUgY2FtZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Q2xvZGl1cyBhbnN3ZXJlZCB0aGF0IGhlIHdhcyB3YWl0aW5nIGZvciBQb21wZWlhJ3MgQWJyYSAodGhpcyB3YXMgdGhlIHZlcnkgbmFtZSBieSB3aGljaCB0aGUgbWFpZCB3YXMgY2FsbGVkKSwgYW5kIGhpcyB2b2ljZSBiZXRyYXllZCBoaW0uIFRoZSBhdHRlbmRhbnQgb2YgQXVyZWxpYSBhdCBvbmNlIHNwcmFuZyBhd2F5IHdpdGggYSBzY3JlYW0gdG8gdGhlIGxpZ2h0cyBhbmQgdGhlIHRocm9uZywgY3J5aW5nIG91dCB0aGF0IHNoZSBoYWQgY2F1Z2h0IGEgbWFuLiBUaGUgd29tZW4gd2VyZSBwYW5pYy1zdHJpY2tlbiwgYW5kIEF1cmVsaWEgcHV0IGEgc3RvcCB0byB0aGUgbXlzdGljIHJpdGVzIG9mIHRoZSBnb2RkZXNzIGFuZCBjb3ZlcmVkIHVwIHRoZSBlbWJsZW1zLiBUaGVuIHNoZSBvcmRlcmVkIHRoZSBkb29ycyB0byBiZSBjbG9zZWQgYW5kIHdlbnQgYWJvdXQgdGhlIGhvdXNlIHdpdGggdG9yY2hlcywgc2VhcmNoaW5nIGZvciBDbG9kaXVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5IZSB3YXMgZm91bmQgd2hlcmUgaGUgaGFkIHRha2VuIHJlZnVnZSwgaW4gdGhlIGNoYW1iZXIgb2YgdGhlIGdpcmwgd2hvIGhhZCBsZXQgaGltIGludG8gdGhlIGhvdXNlOyBhbmQgd2hlbiB0aGV5IHNhdyB3aG8gaGUgd2FzLCB0aGUgd29tZW4gZHJvdmUgaGltIG91dCBvZiBkb29ycy4gVGhlbiBhdCBvbmNlLCBhbmQgaW4gdGhlIG5pZ2h0LCB0aGV5IHdlbnQgb2ZmIGFuZCB0b2xkIHRoZSBtYXR0ZXIgdG8gdGhlaXIgaHVzYmFuZHMsIGFuZCB3aGVuIGRheSBjYW1lIGEgcmVwb3J0IHNwcmVhZCB0aHJvdWdoIHRoZSBjaXR5IHRoYXQgQ2xvZGl1cyBoYWQgY29tbWl0dGVkIHNhY3JpbGVnZSBhbmQgb3dlZCBzYXRpc2ZhY3Rpb24sIG5vdCBvbmx5IHRvIHRob3NlIHdob20gaGUgaGFkIGluc3VsdGVkLCBidXQgYWxzbyB0byB0aGUgY2l0eSBhbmQgdG8gdGhlIGdvZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBvbmUgb2YgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUgaW5kaWN0ZWQgQ2xvZGl1cyBmb3Igc2FjcmlsZWdlLCBhbmQgdGhlIG1vc3QgaW5mbHVlbnRpYWwgc2VuYXRvcnMgbGVhZ3VlZCB0aGVtc2VsdmVzIHRvZ2V0aGVyIGFuZCBib3JlIHdpdG5lc3MgYWdhaW5zdCBoaW0gdGhhdCwgYW1vbmcgb3RoZXIgc2hvY2tpbmcgYWJvbWluYXRpb25zLCBoZSBoYWQgY29tbWl0dGVkIGFkdWx0ZXJ5IHdpdGggaGlzIHNpc3Rlciwgd2hvIHdhcyB0aGUgd2lmZSBvZiBMdWN1bGx1cy4gQnV0IGFnYWluc3QgdGhlIGVhZ2VyIGVmZm9ydHMgb2YgdGhlc2UgbWVuIHRoZSBwZW9wbGUgYXJyYXllZCB0aGVtc2VsdmVzIGluIGRlZmVuY2Ugb2YgQ2xvZGl1cywgYW5kIHdlcmUgb2YgZ3JlYXQgYXNzaXN0YW5jZSB0byBoaW0gd2l0aCB0aGUganVyb3JzIGluIHRoZSBjYXNlLCB3aG8gd2VyZSB0ZXJyb3Itc3RyaWNrZW4gYW5kIGFmcmFpZCBvZiB0aGUgbXVsdGl0dWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgZGl2b3JjZWQgUG9tcGVpYSBhdCBvbmNlLCBidXQgd2hlbiBoZSB3YXMgc3VtbW9uZWQgdG8gdGVzdGlmeSBhdCB0aGUgdHJpYWwsIGhlIHNhaWQgaGUga25ldyBub3RoaW5nIGFib3V0IHRoZSBtYXR0ZXJzIHdpdGggd2hpY2ggQ2xvZGl1cyB3YXMgY2hhcmdlZC4gSGlzIHN0YXRlbWVudCBhcHBlYXJlZCBzdHJhbmdlLCBhbmQgdGhlIHByb3NlY3V0b3IgdGhlcmVmb3JlIGFza2VkLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiwgZGlkc3QgdGhvdSBkaXZvcmNlIHRoeSB3aWZlPzwvcT4gCgkJCQkgICAgICAgIDxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJlY2F1c2UsPC9xPiBzYWlkIENhZXNhciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHRob3VnaHQgbXkgd2lmZSBvdWdodCBub3QgZXZlbiB0byBiZSB1bmRlciBzdXNwaWNpb248L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHRpbWUgb2Ygd2hpY2ggSSBzcGVhaywgUG9tcGVpYSB3YXMgY2VsZWJyYXRpbmcgdGhpcyBmZXN0aXZhbCwgYW5kIENsb2RpdXMsIHdobyB3YXMgc3RpbGwgYmVhcmRsZXNzIGFuZCBvbiB0aGlzIGFjY291bnQgdGhvdWdodCB0byBwYXNzIHVubm90aWNlZCwgYXNzdW1lZCB0aGUgZHJlc3MgYW5kIGltcGxlbWVudHMgb2YgYSBsdXRlLWdpcmwgYW5kIHdlbnQgdG8gdGhlIGhvdXNlLCBsb29raW5nIGxpa2UgYSB5b3VuZyB3b21hbi4gSGUgZm91bmQgdGhlIGRvb3Igb3BlbiwgYW5kIHdhcyBicm91Z2h0IGluIHNhZmVseSBieSB0aGUgbWFpZC1zZXJ2YW50IHRoZXJlLCB3aG8gd2FzIGluIHRoZSBzZWNyZXQ7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhZnRlciBzaGUgaGFkIHJ1biBvbiBhaGVhZCB0byB0ZWxsIFBvbXBlaWEgYW5kIHNvbWUgdGltZSBoYWQgZWxhcHNlZCwgQ2xvZGl1cyBoYWQgbm90IHRoZSBwYXRpZW5jZSB0byB3YWl0IHdoZXJlIGhlIGhhZCBiZWVuIGxlZnQsIGFuZCBzbywgYXMgaGUgd2FzIHdhbmRlcmluZyBhYm91dCBpbiB0aGUgaG91c2UgKGEgbGFyZ2Ugb25lKSBhbmQgdHJ5aW5nIHRvIGF2b2lkIHRoZSBsaWdodHMsIGFuIGF0dGVuZGFudCBvZiBBdXJlbGlhIGNhbWUgdXBvbiBoaW0gYW5kIGFza2VkIGhpbSB0byBwbGF5IHdpdGggaGVyLCBhcyBvbmUgd29tYW4gd291bGQgYW5vdGhlciwgYW5kIHdoZW4gaGUgcmVmdXNlZCwgc2hlIGRyYWdnZWQgaGltIGZvcndhcmQgYW5kIGFza2VkIHdobyBoZSB3YXMgYW5kIHdoZW5jZSBoZSBjYW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNsb2RpdXMgYW5zd2VyZWQgdGhhdCBoZSB3YXMgd2FpdGluZyBmb3IgUG9tcGVpYSdzIEFicmEgKHRoaXMgd2FzIHRoZSB2ZXJ5IG5hbWUgYnkgd2hpY2ggdGhlIG1haWQgd2FzIGNhbGxlZCksIGFuZCBoaXMgdm9pY2UgYmV0cmF5ZWQgaGltLiBUaGUgYXR0ZW5kYW50IG9mIEF1cmVsaWEgYXQgb25jZSBzcHJhbmcgYXdheSB3aXRoIGEgc2NyZWFtIHRvIHRoZSBsaWdodHMgYW5kIHRoZSB0aHJvbmcsIGNyeWluZyBvdXQgdGhhdCBzaGUgaGFkIGNhdWdodCBhIG1hbi4gVGhlIHdvbWVuIHdlcmUgcGFuaWMtc3RyaWNrZW4sIGFuZCBBdXJlbGlhIHB1dCBhIHN0b3AgdG8gdGhlIG15c3RpYyByaXRlcyBvZiB0aGUgZ29kZGVzcyBhbmQgY292ZXJlZCB1cCB0aGUgZW1ibGVtcy4gVGhlbiBzaGUgb3JkZXJlZCB0aGUgZG9vcnMgdG8gYmUgY2xvc2VkIGFuZCB3ZW50IGFib3V0IHRoZSBob3VzZSB3aXRoIHRvcmNoZXMsIHNlYXJjaGluZyBmb3IgQ2xvZGl1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBmb3VuZCB3aGVyZSBoZSBoYWQgdGFrZW4gcmVmdWdlLCBpbiB0aGUgY2hhbWJlciBvZiB0aGUgZ2lybCB3aG8gaGFkIGxldCBoaW0gaW50byB0aGUgaG91c2U7IGFuZCB3aGVuIHRoZXkgc2F3IHdobyBoZSB3YXMsIHRoZSB3b21lbiBkcm92ZSBoaW0gb3V0IG9mIGRvb3JzLiBUaGVuIGF0IG9uY2UsIGFuZCBpbiB0aGUgbmlnaHQsIHRoZXkgd2VudCBvZmYgYW5kIHRvbGQgdGhlIG1hdHRlciB0byB0aGVpciBodXNiYW5kcywgYW5kIHdoZW4gZGF5IGNhbWUgYSByZXBvcnQgc3ByZWFkIHRocm91Z2ggdGhlIGNpdHkgdGhhdCBDbG9kaXVzIGhhZCBjb21taXR0ZWQgc2FjcmlsZWdlIGFuZCBvd2VkIHNhdGlzZmFjdGlvbiwgbm90IG9ubHkgdG8gdGhvc2Ugd2hvbSBoZSBoYWQgaW5zdWx0ZWQsIGJ1dCBhbHNvIHRvIHRoZSBjaXR5IGFuZCB0byB0aGUgZ29kcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBvbmUgb2YgdGhlIHRyaWJ1bmVzIG9mIHRoZSBwZW9wbGUgaW5kaWN0ZWQgQ2xvZGl1cyBmb3Igc2FjcmlsZWdlLCBhbmQgdGhlIG1vc3QgaW5mbHVlbnRpYWwgc2VuYXRvcnMgbGVhZ3VlZCB0aGVtc2VsdmVzIHRvZ2V0aGVyIGFuZCBib3JlIHdpdG5lc3MgYWdhaW5zdCBoaW0gdGhhdCwgYW1vbmcgb3RoZXIgc2hvY2tpbmcgYWJvbWluYXRpb25zLCBoZSBoYWQgY29tbWl0dGVkIGFkdWx0ZXJ5IHdpdGggaGlzIHNpc3Rlciwgd2hvIHdhcyB0aGUgd2lmZSBvZiBMdWN1bGx1cy4gQnV0IGFnYWluc3QgdGhlIGVhZ2VyIGVmZm9ydHMgb2YgdGhlc2UgbWVuIHRoZSBwZW9wbGUgYXJyYXllZCB0aGVtc2VsdmVzIGluIGRlZmVuY2Ugb2YgQ2xvZGl1cywgYW5kIHdlcmUgb2YgZ3JlYXQgYXNzaXN0YW5jZSB0byBoaW0gd2l0aCB0aGUganVyb3JzIGluIHRoZSBjYXNlLCB3aG8gd2VyZSB0ZXJyb3Itc3RyaWNrZW4gYW5kIGFmcmFpZCBvZiB0aGUgbXVsdGl0dWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBkaXZvcmNlZCBQb21wZWlhIGF0IG9uY2UsIGJ1dCB3aGVuIGhlIHdhcyBzdW1tb25lZCB0byB0ZXN0aWZ5IGF0IHRoZSB0cmlhbCwgaGUgc2FpZCBoZSBrbmV3IG5vdGhpbmcgYWJvdXQgdGhlIG1hdHRlcnMgd2l0aCB3aGljaCBDbG9kaXVzIHdhcyBjaGFyZ2VkLiBIaXMgc3RhdGVtZW50IGFwcGVhcmVkIHN0cmFuZ2UsIGFuZCB0aGUgcHJvc2VjdXRvciB0aGVyZWZvcmUgYXNrZWQsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHRoZW4sIGRpZHN0IHRob3UgZGl2b3JjZSB0aHkgd2lmZT88L3E+IAoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJlY2F1c2UsPC9xPiBzYWlkIENhZXNhciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgdGhvdWdodCBteSB3aWZlIG91Z2h0IG5vdCBldmVuIHRvIGJlIHVuZGVyIHN1c3BpY2lvbjwvcT4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Tb21lIHNheSB0aGF0IENhZXNhciBtYWRlIHRoaXMgZGVwb3NpdGlvbiBob25lc3RseTsgYnV0IGFjY29yZGluZyB0byBvdGhlcnMgaXQgd2FzIG1hZGUgdG8gZ3JhdGlmeSB0aGUgcGVvcGxlLCB3aG8gd2VyZSBkZXRlcm1pbmVkIHRvIHJlc2N1ZSBDbG9kaXVzLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBDbG9kaXVzIHdhcyBhY3F1aXR0ZWQgb2YgdGhlIGNoYXJnZSwgdGhlIG1ham9yaXR5IG9mIHRoZSBqdXJvcnMgZ2l2aW5nIHRoZWlyIHZlcmRpY3RzIGluIGlsbGVnaWJsZSB3cml0aW5nLCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgbmVpdGhlciByaXNrIHRoZWlyIGxpdmVzIHdpdGggdGhlIHBvcHVsYWNlIGJ5IGNvbmRlbW5pbmcgaGltIG5vciBnZXQgYSBiYWQgbmFtZSBhbW9uZyB0aGUgbm9iaWxpdHkgYnkgYWNxdWl0dGluZyBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNhY3JpbGVnZSBhbmQgdHJpYWwgb2YgQ2xvZGl1cyBhcmUgZGVzY3JpYmVkIGF0IGxlbmd0aCBhbHNvIGluIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAyOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4eHZpaWkuIGFuZCB4eGl4PC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['10.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFueSByYXRlLCBDbG9kaXVzIHdhcyBhY3F1aXR0ZWQgb2YgdGhlIGNoYXJnZSwgdGhlIG1ham9yaXR5IG9mIHRoZSBqdXJvcnMgZ2l2aW5nIHRoZWlyIHZlcmRpY3RzIGluIGlsbGVnaWJsZSB3cml0aW5nLCBpbiBvcmRlciB0aGF0IHRoZXkgbWlnaHQgbmVpdGhlciByaXNrIHRoZWlyIGxpdmVzIHdpdGggdGhlIHBvcHVsYWNlIGJ5IGNvbmRlbW5pbmcgaGltIG5vciBnZXQgYSBiYWQgbmFtZSBhbW9uZyB0aGUgbm9iaWxpdHkgYnkgYWNxdWl0dGluZyBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc2FjcmlsZWdlIGFuZCB0cmlhbCBvZiBDbG9kaXVzIGFyZSBkZXNjcmliZWQgYXQgbGVuZ3RoIGFsc28gaW4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4eHZpaWkuIGFuZCB4eGl4PC9iaWJsPi48L25vdGU+CiAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gMjguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4eHZpaWkuIGFuZCB4eGl4PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgY2hhcHRlcnMgeHh2aWlpLiBhbmQgeHhpeDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkltbWVkaWF0ZWx5IGFmdGVyIGhpcyBwcmFldG9yc2hpcCBDYWVzYXIgcmVjZWl2ZWQgU3BhaW4gYXMgaGlzIHByb3ZpbmNlLCBhbmQgc2luY2UgaGUgZm91bmQgaXQgaGFyZCB0byBhcnJhbmdlIG1hdHRlcnMgd2l0aCBoaXMgY3JlZGl0b3JzLCB3aG8gb2JzdHJ1Y3RlZCBoaXMgZGVwYXJ0dXJlIGFuZCB3ZXJlIGNsYW1vcm91cywgaGUgaGFkIHJlY291cnNlIHRvIENyYXNzdXMsIHRoZSByaWNoZXN0IG9mIHRoZSBSb21hbnMsIHdobyBoYWQgbmVlZCBvZiBDYWVzYXIncyB2aWdvdXIgYW5kIGZpcmUgZm9yIGhpcyBwb2xpdGljYWwgY2FtcGFpZ24gYWdhaW5zdCBQb21wZXkuIEFuZCBpdCB3YXMgb25seSBhZnRlciBDcmFzc3VzIGhhZCBtZXQgdGhlIGRlbWFuZHMgb2YgdGhlIG1vc3QgaW1wb3J0dW5hdGUgYW5kIGluZXhvcmFibGUgb2YgdGhlc2UgY3JlZGl0b3JzIGFuZCBnaXZlbiBzdXJldHkgZm9yIGVpZ2h0IGh1bmRyZWQgYW5kIHRoaXJ0eSB0YWxlbnRzLCB0aGF0IENhZXNhciBjb3VsZCBnbyBvdXQgdG8gaGlzIHByb3ZpbmNlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkVhcmx5IGluIDYxIEIuQy48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SW1tZWRpYXRlbHkgYWZ0ZXIgaGlzIHByYWV0b3JzaGlwIENhZXNhciByZWNlaXZlZCBTcGFpbiBhcyBoaXMgcHJvdmluY2UsIGFuZCBzaW5jZSBoZSBmb3VuZCBpdCBoYXJkIHRvIGFycmFuZ2UgbWF0dGVycyB3aXRoIGhpcyBjcmVkaXRvcnMsIHdobyBvYnN0cnVjdGVkIGhpcyBkZXBhcnR1cmUgYW5kIHdlcmUgY2xhbW9yb3VzLCBoZSBoYWQgcmVjb3Vyc2UgdG8gQ3Jhc3N1cywgdGhlIHJpY2hlc3Qgb2YgdGhlIFJvbWFucywgd2hvIGhhZCBuZWVkIG9mIENhZXNhcidzIHZpZ291ciBhbmQgZmlyZSBmb3IgaGlzIHBvbGl0aWNhbCBjYW1wYWlnbiBhZ2FpbnN0IFBvbXBleS4gQW5kIGl0IHdhcyBvbmx5IGFmdGVyIENyYXNzdXMgaGFkIG1ldCB0aGUgZGVtYW5kcyBvZiB0aGUgbW9zdCBpbXBvcnR1bmF0ZSBhbmQgaW5leG9yYWJsZSBvZiB0aGVzZSBjcmVkaXRvcnMgYW5kIGdpdmVuIHN1cmV0eSBmb3IgZWlnaHQgaHVuZHJlZCBhbmQgdGhpcnR5IHRhbGVudHMsIHRoYXQgQ2Flc2FyIGNvdWxkIGdvIG91dCB0byBoaXMgcHJvdmluY2UuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5FYXJseSBpbiA2MSBCLkMuPC9ub3RlPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XZSBhcmUgdG9sZCB0aGF0LCBhcyBoZSB3YXMgY3Jvc3NpbmcgdGhlIEFscHMgYW5kIHBhc3NpbmcgYnkgYSBiYXJiYXJpYW4gdmlsbGFnZSB3aGljaCBoYWQgdmVyeSBmZXcgaW5oYWJpdGFudHMgYW5kIHdhcyBhIHNvcnJ5IHNpZ2h0LCBoaXMgY29tcGFuaW9ucyBhc2tlZCB3aXRoIG1pcnRoIGFuZCBsYXVnaHRlciwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYW4gaXQgYmUgdGhhdCBoZXJlIHRvbyB0aGVyZSBhcmUgYW1iaXRpb3VzIHN0cmlmZXMgZm9yIG9mZmljZSwgc3RydWdnbGVzIGZvciBwcmltYWN5LCBhbmQgbXV0dWFsIGplYWxvdXNpZXMgb2YgcG93ZXJmdWwgbWVuPzwvcT4gV2hlcmV1cG9uIENhZXNhciBzYWlkIHRvIHRoZW0gaW4gYWxsIHNlcmlvdXNuZXNzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd291bGQgcmF0aGVyIGJlIGZpcnN0IGhlcmUgdGhhbiBzZWNvbmQgYXQgUm9tZTwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5JbiBsaWtlIG1hbm5lciB3ZSBhcmUgdG9sZCBhZ2FpbiB0aGF0LCBpbiBTcGFpbiwgd2hlbiBoZSB3YXMgYXQgbGVpc3VyZSBhbmQgd2FzIHJlYWRpbmcgZnJvbSB0aGUgaGlzdG9yeSBvZiBBbGV4YW5kZXIsIGhlIHdhcyBsb3N0IGluIHRob3VnaHQgZm9yIGEgbG9uZyB0aW1lLCBhbmQgdGhlbiBidXJzdCBpbnRvIHRlYXJzLiBIaXMgZnJpZW5kcyB3ZXJlIGFzdG9uaXNoZWQsIGFuZCBhc2tlZCB0aGUgcmVhc29uIGZvciBoaXMgdGVhcnMuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+RG8geW91IG5vdCB0aGluayw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXQgaXMgbWF0dGVyIGZvciBzb3Jyb3cgdGhhdCB3aGlsZSBBbGV4YW5kZXIsIGF0IG15IGFnZSwgd2FzIGFscmVhZHkga2luZyBvZiBzbyBtYW55IHBlb3BsZXMsIEkgaGF2ZSBhcyB5ZXQgYWNoaWV2ZWQgbm8gYnJpbGxpYW50IHN1Y2Nlc3M/PC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TdWV0b25pdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gNzwvYmlibD4pIGFuZCBEaW8gQ2Fzc2l1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuQy4gMzcuNTIuMiI+eHh4dmlpLiA1MiwgMjwvYmlibD4pIGNvbm5lY3QgdGhpcyBhbmVjZG90ZSBtb3JlIHByb3Blcmx5IHdpdGggQ2Flc2FyJ3MgcXVhZXN0b3JzaGlwIGluIFNwYWluICg2NyBCLkMuKSB3aGVuIGhlIHdhcyB0aGlydHktdGhyZWUgeWVhcnMgb2YgYWdlLCB0aGUgYWdlIGF0IHdoaWNoIEFsZXhhbmRlciBkaWVkLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkIHRoYXQsIGFzIGhlIHdhcyBjcm9zc2luZyB0aGUgQWxwcyBhbmQgcGFzc2luZyBieSBhIGJhcmJhcmlhbiB2aWxsYWdlIHdoaWNoIGhhZCB2ZXJ5IGZldyBpbmhhYml0YW50cyBhbmQgd2FzIGEgc29ycnkgc2lnaHQsIGhpcyBjb21wYW5pb25zIGFza2VkIHdpdGggbWlydGggYW5kIGxhdWdodGVyLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FuIGl0IGJlIHRoYXQgaGVyZSB0b28gdGhlcmUgYXJlIGFtYml0aW91cyBzdHJpZmVzIGZvciBvZmZpY2UsIHN0cnVnZ2xlcyBmb3IgcHJpbWFjeSwgYW5kIG11dHVhbCBqZWFsb3VzaWVzIG9mIHBvd2VyZnVsIG1lbj88L3E+IFdoZXJldXBvbiBDYWVzYXIgc2FpZCB0byB0aGVtIGluIGFsbCBzZXJpb3VzbmVzcywgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd291bGQgcmF0aGVyIGJlIGZpcnN0IGhlcmUgdGhhbiBzZWNvbmQgYXQgUm9tZTwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkluIGxpa2UgbWFubmVyIHdlIGFyZSB0b2xkIGFnYWluIHRoYXQsIGluIFNwYWluLCB3aGVuIGhlIHdhcyBhdCBsZWlzdXJlIGFuZCB3YXMgcmVhZGluZyBmcm9tIHRoZSBoaXN0b3J5IG9mIEFsZXhhbmRlciwgaGUgd2FzIGxvc3QgaW4gdGhvdWdodCBmb3IgYSBsb25nIHRpbWUsIGFuZCB0aGVuIGJ1cnN0IGludG8gdGVhcnMuIEhpcyBmcmllbmRzIHdlcmUgYXN0b25pc2hlZCwgYW5kIGFza2VkIHRoZSByZWFzb24gZm9yIGhpcyB0ZWFycy4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkRvIHlvdSBub3QgdGhpbmssPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+aXQgaXMgbWF0dGVyIGZvciBzb3Jyb3cgdGhhdCB3aGlsZSBBbGV4YW5kZXIsIGF0IG15IGFnZSwgd2FzIGFscmVhZHkga2luZyBvZiBzbyBtYW55IHBlb3BsZXMsIEkgaGF2ZSBhcyB5ZXQgYWNoaWV2ZWQgbm8gYnJpbGxpYW50IHN1Y2Nlc3M/PC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlN1ZXRvbml1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2LiBKdWwuPC90aXRsZT4gNzwvYmlibD4pIGFuZCBEaW8gQ2Fzc2l1cyAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiAzNy41Mi4yIj54eHh2aWkuIDUyLCAyPC9iaWJsPikgY29ubmVjdCB0aGlzIGFuZWNkb3RlIG1vcmUgcHJvcGVybHkgd2l0aCBDYWVzYXIncyBxdWFlc3RvcnNoaXAgaW4gU3BhaW4gKDY3IEIuQy4pIHdoZW4gaGUgd2FzIHRoaXJ0eS10aHJlZSB5ZWFycyBvZiBhZ2UsIHRoZSBhZ2UgYXQgd2hpY2ggQWxleGFuZGVyIGRpZWQuPC9ub3RlPgogICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiA3PC9iaWJsPikgYW5kIERpbyBDYXNzaXVzICg8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiA3PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiAzNy41Mi4yIj54eHh2aWkuIDUyLCAyPC9iaWJsPikgY29ubmVjdCB0aGlzIGFuZWNkb3RlIG1vcmUgcHJvcGVybHkgd2l0aCBDYWVzYXIncyBxdWFlc3RvcnNoaXAgaW4gU3BhaW4gKDY3IEIuQy4pIHdoZW4gaGUgd2FzIHRoaXJ0eS10aHJlZSB5ZWFycyBvZiBhZ2UsIHRoZSBhZ2UgYXQgd2hpY2ggQWxleGFuZGVyIGRpZWQuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIGFzIHNvb24gYXMgaGUgcmVhY2hlZCBTcGFpbiBoZSBzZXQgaGltc2VsZiB0byB3b3JrLCBhbmQgaW4gYSBmZXcgZGF5cyByYWlzZWQgdGVuIGNvaG9ydHMgaW4gYWRkaXRpb24gdG8gdGhlIHR3ZW50eSB3aGljaCB3ZXJlIHRoZXJlIGJlZm9yZS4gVGhlbiBoZSBsZWQgaGlzIGFybXkgYWdhaW5zdCB0aGUgQ2FsbGFpY2kgYW5kIEx1c2l0YW5pLCBvdmVycG93ZXJlZCB0aGVtLCBhbmQgbWFyY2hlZCBvbiBhcyBmYXIgYXMgdGhlIG91dGVyIHNlYSwgc3ViZHVpbmcgdGhlIHRyaWJlcyB3aGljaCBiZWZvcmUgd2VyZSBub3Qgb2JlZGllbnQgdG8gUm9tZS4gQWZ0ZXIgYnJpbmdpbmcgdGhlIHdhciB0byBhIHN1Y2Nlc3NmdWwgY2xvc2UsIGhlIHdhcyBlcXVhbGx5IGhhcHB5IGluIGFkanVzdGluZyB0aGUgcHJvYmxlbXMgb2YgcGVhY2UsIGJ5IGVzdGFibGlzaGluZyBjb25jb3JkIGJldHdlZW4gdGhlIGNpdGllcywgYW5kIHBhcnRpY3VsYXJseSBieSBoZWFsaW5nIHRoZSBkaXNzZW5zaW9ucyBiZXR3ZWVuIGRlYnRvcnMgYW5kIGNyZWRpdG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIG9yZGFpbmVkIHRoYXQgdGhlIGNyZWRpdG9yIHNob3VsZCBhbm51YWxseSB0YWtlIHR3byB0aGlyZHMgb2YgaGlzIGRlYnRvcidzIGluY29tZSwgYW5kIHRoYXQgdGhlIG93bmVyIG9mIHRoZSBwcm9wZXJ0eSBzaG91bGQgdXNlIHRoZSByZXN0LCBhbmQgc28gb24gdW50aWwgdGhlIGRlYnQgd2FzIGNhbmNlbGxlZC4gSW4gaGlnaCByZXB1dGUgZm9yIHRoaXMgYWRtaW5pc3RyYXRpb24gaGUgcmV0aXJlZCBmcm9tIHRoZSBwcm92aW5jZTsgaGUgaGFkIGJlY29tZSB3ZWFsdGh5IGhpbXNlbGYsIGhhZCBlbnJpY2hlZCBoaXMgc29sZGllcnMgZnJvbSB0aGVpciBjYW1wYWlnbnMsIGFuZCBoYWQgYmVlbiBzYWx1dGVkIGJ5IHRoZW0gYXMgSW1wZXJhdG9yLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYW55IHJhdGUsIGFzIHNvb24gYXMgaGUgcmVhY2hlZCBTcGFpbiBoZSBzZXQgaGltc2VsZiB0byB3b3JrLCBhbmQgaW4gYSBmZXcgZGF5cyByYWlzZWQgdGVuIGNvaG9ydHMgaW4gYWRkaXRpb24gdG8gdGhlIHR3ZW50eSB3aGljaCB3ZXJlIHRoZXJlIGJlZm9yZS4gVGhlbiBoZSBsZWQgaGlzIGFybXkgYWdhaW5zdCB0aGUgQ2FsbGFpY2kgYW5kIEx1c2l0YW5pLCBvdmVycG93ZXJlZCB0aGVtLCBhbmQgbWFyY2hlZCBvbiBhcyBmYXIgYXMgdGhlIG91dGVyIHNlYSwgc3ViZHVpbmcgdGhlIHRyaWJlcyB3aGljaCBiZWZvcmUgd2VyZSBub3Qgb2JlZGllbnQgdG8gUm9tZS4gQWZ0ZXIgYnJpbmdpbmcgdGhlIHdhciB0byBhIHN1Y2Nlc3NmdWwgY2xvc2UsIGhlIHdhcyBlcXVhbGx5IGhhcHB5IGluIGFkanVzdGluZyB0aGUgcHJvYmxlbXMgb2YgcGVhY2UsIGJ5IGVzdGFibGlzaGluZyBjb25jb3JkIGJldHdlZW4gdGhlIGNpdGllcywgYW5kIHBhcnRpY3VsYXJseSBieSBoZWFsaW5nIHRoZSBkaXNzZW5zaW9ucyBiZXR3ZWVuIGRlYnRvcnMgYW5kIGNyZWRpdG9ycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBvcmRhaW5lZCB0aGF0IHRoZSBjcmVkaXRvciBzaG91bGQgYW5udWFsbHkgdGFrZSB0d28gdGhpcmRzIG9mIGhpcyBkZWJ0b3IncyBpbmNvbWUsIGFuZCB0aGF0IHRoZSBvd25lciBvZiB0aGUgcHJvcGVydHkgc2hvdWxkIHVzZSB0aGUgcmVzdCwgYW5kIHNvIG9uIHVudGlsIHRoZSBkZWJ0IHdhcyBjYW5jZWxsZWQuIEluIGhpZ2ggcmVwdXRlIGZvciB0aGlzIGFkbWluaXN0cmF0aW9uIGhlIHJldGlyZWQgZnJvbSB0aGUgcHJvdmluY2U7IGhlIGhhZCBiZWNvbWUgd2VhbHRoeSBoaW1zZWxmLCBoYWQgZW5yaWNoZWQgaGlzIHNvbGRpZXJzIGZyb20gdGhlaXIgY2FtcGFpZ25zLCBhbmQgaGFkIGJlZW4gc2FsdXRlZCBieSB0aGVtIGFzIEltcGVyYXRvci48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIHNpbmNlIHRob3NlIHdobyBzdWVkIGZvciB0aGUgcHJpdmlsZWdlIG9mIGEgdHJpdW1waCBtdXN0IHJlbWFpbiBvdXRzaWRlIHRoZSBjaXR5LCB3aGlsZSB0aG9zZSB3aG8gd2VyZSBjYW5kaWRhdGVzIGZvciB0aGUgY29uc3Vsc2hpcCBtdXN0IGJlIHByZXNlbnQgaW4gdGhlIGNpdHksIENhZXNhciB3YXMgaW4gYSBncmVhdCBkaWxlbW1hLCBhbmQgYmVjYXVzZSBoZSBoYWQgcmVhY2hlZCBob21lIGF0IHRoZSB2ZXJ5IHRpbWUgZm9yIHRoZSBjb25zdWxhciBlbGVjdGlvbnMsIGhlIHNlbnQgYSByZXF1ZXN0IHRvIHRoZSBzZW5hdGUgdGhhdCBoZSBtaWdodCBiZSBwZXJtaXR0ZWQgdG8gb2ZmZXIgaGltc2VsZiBmb3IgdGhlIGNvbnN1bHNoaXAgPGZvcmVpZ24gbGFuZz0ibGEiPmluIGFic2VudGnDojwvZm9yZWlnbj4sIHRocm91Z2ggdGhlIGFnZW5jeSBvZiBoaXMgZnJpZW5kcy4gQnV0IHNpbmNlIENhdG8gYmVnYW4gYnkgaW5zaXN0aW5nIHVwb24gdGhlIGxhdyBpbiBvcHBvc2l0aW9uIHRvIENhZXNhcidzIHJlcXVlc3QsIGFuZCB0aGVuLCB3aGVuIGhlIHNhdyB0aGF0IG1hbnkgc2VuYXRvcnMgaGFkIGJlZW4gd29uIG92ZXIgYnkgQ2Flc2FyJ3MgYXR0ZW50aW9ucywgc3RhdmVkIHRoZSBtYXR0ZXIgb2ZmIGJ5IGNvbnN1bWluZyB0aGUgZGF5IGluIHNwZWFraW5nLCBDYWVzYXIgZGVjaWRlZCB0byBnaXZlIHVwIHRoZSB0cml1bXBoIGFuZCB0cnkgZm9yIHRoZSBjb25zdWxzaGlwLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5TbyBhcyBzb29uIGFzIGhlIGVudGVyZWQgdGhlIGNpdHkgaGUgYXNzdW1lZCBhIHBvbGljeSB3aGljaCBkZWNlaXZlZCBldmVyeW9uZSBleGNlcHQgQ2F0by4gVGhpcyBwb2xpY3kgd2FzIHRvIHJlY29uY2lsZSBQb21wZXkgYW5kIENyYXNzdXMsIHRoZSBtb3N0IGluZmx1ZW50aWFsIG1lbiBpbiB0aGUgY2l0eS4gVGhlc2UgbWVuIENhZXNhciBicm91Z2h0IHRvZ2V0aGVyIGluIGZyaWVuZHNoaXAgYWZ0ZXIgdGhlaXIgcXVhcnJlbCwgYW5kIGJ5IGNvbmNlbnRyYXRpbmcgdGhlaXIgdW5pdGVkIHN0cmVuZ3RoIHVwb24gaGltc2VsZiwgc3VjY2VlZGVkLCBiZWZvcmUgbWVuIHdlcmUgYXdhcmUgb2YgaXQsIGFuZCBieSBhbiBhY3Qgd2hpY2ggY291bGQgYmUgY2FsbGVkIG9uZSBvZiBraW5kbmVzcywgaW4gY2hhbmdpbmcgdGhlIGZvcm0gb2YgZ292ZXJubWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGl0IHdhcyBub3QsIGFzIG1vc3QgbWVuIHN1cHBvc2VkLCB0aGUgcXVhcnJlbCBiZXR3ZWVuIENhZXNhciBhbmQgUG9tcGV5IHRoYXQgYnJvdWdodCBvbiB0aGUgY2l2aWwgd2FycywgYnV0IHJhdGhlciB0aGVpciBmcmllbmRzaGlwLCBzaW5jZSB0aGV5IHdvcmtlZCB0b2dldGhlciBmb3IgdGhlIG92ZXJ0aHJvdyBvZiB0aGUgYXJpc3RvY3JhY3kgaW4gdGhlIGZpcnN0IHBsYWNlLCBhbmQgdGhlbiwgd2hlbiB0aGlzIGhhZCBiZWVuIGFjY29tcGxpc2hlZCwgdGhleSBxdWFycmVsbGVkIHdpdGggb25lIGFub3RoZXIuIEFuZCBDYXRvLCB3aG8gb2Z0ZW4gZm9yZXRvbGQgd2hhdCB3YXMgdG8gY29tZSBvZiB0aGVpciBhbGxpYW5jZSwgZ290IHRoZSByZXB1dGF0aW9uIG9mIGEgbW9yb3NlIGFuZCB0cm91Ymxlc29tZSBmZWxsb3cgYXQgdGhlIHRpbWUsIGJ1dCBhZnRlcndhcmRzIHRoYXQgb2YgYSB3aXNlLCB0aG91Z2ggdW5mb3J0dW5hdGUsIGNvdW5zZWxsb3IuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgeGx2aWkuIDEtNTwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBzaW5jZSB0aG9zZSB3aG8gc3VlZCBmb3IgdGhlIHByaXZpbGVnZSBvZiBhIHRyaXVtcGggbXVzdCByZW1haW4gb3V0c2lkZSB0aGUgY2l0eSwgd2hpbGUgdGhvc2Ugd2hvIHdlcmUgY2FuZGlkYXRlcyBmb3IgdGhlIGNvbnN1bHNoaXAgbXVzdCBiZSBwcmVzZW50IGluIHRoZSBjaXR5LCBDYWVzYXIgd2FzIGluIGEgZ3JlYXQgZGlsZW1tYSwgYW5kIGJlY2F1c2UgaGUgaGFkIHJlYWNoZWQgaG9tZSBhdCB0aGUgdmVyeSB0aW1lIGZvciB0aGUgY29uc3VsYXIgZWxlY3Rpb25zLCBoZSBzZW50IGEgcmVxdWVzdCB0byB0aGUgc2VuYXRlIHRoYXQgaGUgbWlnaHQgYmUgcGVybWl0dGVkIHRvIG9mZmVyIGhpbXNlbGYgZm9yIHRoZSBjb25zdWxzaGlwIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmluIGFic2VudGnDojwvZm9yZWlnbj4sIHRocm91Z2ggdGhlIGFnZW5jeSBvZiBoaXMgZnJpZW5kcy4gQnV0IHNpbmNlIENhdG8gYmVnYW4gYnkgaW5zaXN0aW5nIHVwb24gdGhlIGxhdyBpbiBvcHBvc2l0aW9uIHRvIENhZXNhcidzIHJlcXVlc3QsIGFuZCB0aGVuLCB3aGVuIGhlIHNhdyB0aGF0IG1hbnkgc2VuYXRvcnMgaGFkIGJlZW4gd29uIG92ZXIgYnkgQ2Flc2FyJ3MgYXR0ZW50aW9ucywgc3RhdmVkIHRoZSBtYXR0ZXIgb2ZmIGJ5IGNvbnN1bWluZyB0aGUgZGF5IGluIHNwZWFraW5nLCBDYWVzYXIgZGVjaWRlZCB0byBnaXZlIHVwIHRoZSB0cml1bXBoIGFuZCB0cnkgZm9yIHRoZSBjb25zdWxzaGlwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIGFzIHNvb24gYXMgaGUgZW50ZXJlZCB0aGUgY2l0eSBoZSBhc3N1bWVkIGEgcG9saWN5IHdoaWNoIGRlY2VpdmVkIGV2ZXJ5b25lIGV4Y2VwdCBDYXRvLiBUaGlzIHBvbGljeSB3YXMgdG8gcmVjb25jaWxlIFBvbXBleSBhbmQgQ3Jhc3N1cywgdGhlIG1vc3QgaW5mbHVlbnRpYWwgbWVuIGluIHRoZSBjaXR5LiBUaGVzZSBtZW4gQ2Flc2FyIGJyb3VnaHQgdG9nZXRoZXIgaW4gZnJpZW5kc2hpcCBhZnRlciB0aGVpciBxdWFycmVsLCBhbmQgYnkgY29uY2VudHJhdGluZyB0aGVpciB1bml0ZWQgc3RyZW5ndGggdXBvbiBoaW1zZWxmLCBzdWNjZWVkZWQsIGJlZm9yZSBtZW4gd2VyZSBhd2FyZSBvZiBpdCwgYW5kIGJ5IGFuIGFjdCB3aGljaCBjb3VsZCBiZSBjYWxsZWQgb25lIG9mIGtpbmRuZXNzLCBpbiBjaGFuZ2luZyB0aGUgZm9ybSBvZiBnb3Zlcm5tZW50LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCB3YXMgbm90LCBhcyBtb3N0IG1lbiBzdXBwb3NlZCwgdGhlIHF1YXJyZWwgYmV0d2VlbiBDYWVzYXIgYW5kIFBvbXBleSB0aGF0IGJyb3VnaHQgb24gdGhlIGNpdmlsIHdhcnMsIGJ1dCByYXRoZXIgdGhlaXIgZnJpZW5kc2hpcCwgc2luY2UgdGhleSB3b3JrZWQgdG9nZXRoZXIgZm9yIHRoZSBvdmVydGhyb3cgb2YgdGhlIGFyaXN0b2NyYWN5IGluIHRoZSBmaXJzdCBwbGFjZSwgYW5kIHRoZW4sIHdoZW4gdGhpcyBoYWQgYmVlbiBhY2NvbXBsaXNoZWQsIHRoZXkgcXVhcnJlbGxlZCB3aXRoIG9uZSBhbm90aGVyLiBBbmQgQ2F0bywgd2hvIG9mdGVuIGZvcmV0b2xkIHdoYXQgd2FzIHRvIGNvbWUgb2YgdGhlaXIgYWxsaWFuY2UsIGdvdCB0aGUgcmVwdXRhdGlvbiBvZiBhIG1vcm9zZSBhbmQgdHJvdWJsZXNvbWUgZmVsbG93IGF0IHRoZSB0aW1lLCBidXQgYWZ0ZXJ3YXJkcyB0aGF0IG9mIGEgd2lzZSwgdGhvdWdoIHVuZm9ydHVuYXRlLCBjb3Vuc2VsbG9yLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA0Ny4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIHhsdmlpLiAxLTU8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNDcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCB4bHZpaS4gMS01PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgeGx2aWkuIDEtNTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciwgaG93ZXZlciwgZW5jb21wYXNzZWQgYW5kIHByb3RlY3RlZCBieSB0aGUgZnJpZW5kc2hpcCBvZiBDcmFzc3VzIGFuZCBQb21wZXksIGVudGVyZWQgdGhlIGNhbnZhc3MgZm9yIHRoZSBjb25zdWxzaGlwOyBhbmQgYXMgc29vbiBhcyBoZSBoYWQgYmVlbiB0cml1bXBoYW50bHkgZWxlY3RlZCwgYWxvbmcgd2l0aCBDYWxwdXJuaXVzIEJpYnVsdXMsIGFuZCBoYWQgZW50ZXJlZCB1cG9uIGhpcyBvZmZpY2UsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gNTkgQi5DLjwvbm90ZT4gaGUgcHJvcG9zZWQgbGF3cyB3aGljaCB3ZXJlIGJlY29taW5nLCBub3QgZm9yIGEgY29uc3VsLCBidXQgZm9yIGEgbW9zdCByYWRpY2FsIHRyaWJ1bmUgb2YgdGhlIHBlb3BsZTsgZm9yIHRvIGdyYXRpZnkgdGhlIG11bHRpdHVkZSBoZSBpbnRyb2R1Y2VkIHN1bmRyeSBhbGxvdG1lbnRzIGFuZCBkaXN0cmlidXRpb25zIG9mIGxhbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZW5hdGUgdGhlIG9wcG9zaXRpb24gb2YgbWVuIG9mIHRoZSBiZXR0ZXIgc29ydCBnYXZlIGhpbSB0aGUgcHJldGV4dCB3aGljaCBoZSBoYWQgbG9uZyBkZXNpcmVkLCBhbmQgY3J5aW5nIHdpdGggbG91ZCBhZGp1cmF0aW9ucyB0aGF0IGhlIHdhcyBkcml2ZW4gZm9ydGggaW50byB0aGUgcG9wdWxhciBhc3NlbWJseSBhZ2FpbnN0IGhpcyB3aXNoZXMsIGFuZCB3YXMgY29tcGVsbGVkIHRvIGNvdXJ0IGl0cyBmYXZvdXIgYnkgdGhlIGluc29sZW5jZSBhbmQgb2JzdGluYWN5IG9mIHRoZSBzZW5hdGUsIGhlIGhhc3RlbmVkIGJlZm9yZSBpdCwgYW5kIHN0YXRpb25pbmcgQ3Jhc3N1cyBvbiBvbmUgc2lkZSBvZiBoaW0gYW5kIFBvbXBleSBvbiB0aGUgb3RoZXIsIGhlIGFza2VkIHRoZW0gaWYgdGhleSBhcHByb3ZlZCBoaXMgbGF3cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhleSBkZWNsYXJlZCB0aGF0IHRoZXkgZGlkIGFwcHJvdmUgdGhlbSwgd2hlcmV1cG9uIGhlIHVyZ2VkIHRoZW0gdG8gZ2l2ZSBoaW0gdGhlaXIgYWlkIGFnYWluc3QgdGhvc2Ugd2hvIHRocmVhdGVuZWQgdG8gb3Bwb3NlIGhpbSB3aXRoIHN3b3Jkcy4gVGhleSBwcm9taXNlZCBoaW0gc3VjaCBhaWQsIGFuZCBQb21wZXkgYWN0dWFsbHkgYWRkZWQgdGhhdCBoZSB3b3VsZCBjb21lIHVwIGFnYWluc3Qgc3dvcmRzIHdpdGggc3dvcmQgYW5kIGJ1Y2tsZXIgdG9vLiBBdCB0aGlzIGltcHVsc2l2ZSBhbmQgbWFkIHNwZWVjaCwgdW53b3J0aHkgb2YgdGhlIGhpZ2ggZXN0ZWVtIGluIHdoaWNoIFBvbXBleSBzdG9vZCBhbmQgdW5iZWNvbWluZyB0byB0aGUgcmVzcGVjdCB3aGljaCB3YXMgZHVlIHRvIHRoZSBzZW5hdGUsIHRoZSBub2JpbGl0eSB3ZXJlIGRpc3RyZXNzZWQgYnV0IHRoZSBwb3B1bGFjZSB3ZXJlIGRlbGlnaHRlZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyLCBob3dldmVyLCBlbmNvbXBhc3NlZCBhbmQgcHJvdGVjdGVkIGJ5IHRoZSBmcmllbmRzaGlwIG9mIENyYXNzdXMgYW5kIFBvbXBleSwgZW50ZXJlZCB0aGUgY2FudmFzcyBmb3IgdGhlIGNvbnN1bHNoaXA7IGFuZCBhcyBzb29uIGFzIGhlIGhhZCBiZWVuIHRyaXVtcGhhbnRseSBlbGVjdGVkLCBhbG9uZyB3aXRoIENhbHB1cm5pdXMgQmlidWx1cywgYW5kIGhhZCBlbnRlcmVkIHVwb24gaGlzIG9mZmljZSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDU5IEIuQy48L25vdGU+IGhlIHByb3Bvc2VkIGxhd3Mgd2hpY2ggd2VyZSBiZWNvbWluZywgbm90IGZvciBhIGNvbnN1bCwgYnV0IGZvciBhIG1vc3QgcmFkaWNhbCB0cmlidW5lIG9mIHRoZSBwZW9wbGU7IGZvciB0byBncmF0aWZ5IHRoZSBtdWx0aXR1ZGUgaGUgaW50cm9kdWNlZCBzdW5kcnkgYWxsb3RtZW50cyBhbmQgZGlzdHJpYnV0aW9ucyBvZiBsYW5kLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBzZW5hdGUgdGhlIG9wcG9zaXRpb24gb2YgbWVuIG9mIHRoZSBiZXR0ZXIgc29ydCBnYXZlIGhpbSB0aGUgcHJldGV4dCB3aGljaCBoZSBoYWQgbG9uZyBkZXNpcmVkLCBhbmQgY3J5aW5nIHdpdGggbG91ZCBhZGp1cmF0aW9ucyB0aGF0IGhlIHdhcyBkcml2ZW4gZm9ydGggaW50byB0aGUgcG9wdWxhciBhc3NlbWJseSBhZ2FpbnN0IGhpcyB3aXNoZXMsIGFuZCB3YXMgY29tcGVsbGVkIHRvIGNvdXJ0IGl0cyBmYXZvdXIgYnkgdGhlIGluc29sZW5jZSBhbmQgb2JzdGluYWN5IG9mIHRoZSBzZW5hdGUsIGhlIGhhc3RlbmVkIGJlZm9yZSBpdCwgYW5kIHN0YXRpb25pbmcgQ3Jhc3N1cyBvbiBvbmUgc2lkZSBvZiBoaW0gYW5kIFBvbXBleSBvbiB0aGUgb3RoZXIsIGhlIGFza2VkIHRoZW0gaWYgdGhleSBhcHByb3ZlZCBoaXMgbGF3cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgZGVjbGFyZWQgdGhhdCB0aGV5IGRpZCBhcHByb3ZlIHRoZW0sIHdoZXJldXBvbiBoZSB1cmdlZCB0aGVtIHRvIGdpdmUgaGltIHRoZWlyIGFpZCBhZ2FpbnN0IHRob3NlIHdobyB0aHJlYXRlbmVkIHRvIG9wcG9zZSBoaW0gd2l0aCBzd29yZHMuIFRoZXkgcHJvbWlzZWQgaGltIHN1Y2ggYWlkLCBhbmQgUG9tcGV5IGFjdHVhbGx5IGFkZGVkIHRoYXQgaGUgd291bGQgY29tZSB1cCBhZ2FpbnN0IHN3b3JkcyB3aXRoIHN3b3JkIGFuZCBidWNrbGVyIHRvby4gQXQgdGhpcyBpbXB1bHNpdmUgYW5kIG1hZCBzcGVlY2gsIHVud29ydGh5IG9mIHRoZSBoaWdoIGVzdGVlbSBpbiB3aGljaCBQb21wZXkgc3Rvb2QgYW5kIHVuYmVjb21pbmcgdG8gdGhlIHJlc3BlY3Qgd2hpY2ggd2FzIGR1ZSB0byB0aGUgc2VuYXRlLCB0aGUgbm9iaWxpdHkgd2VyZSBkaXN0cmVzc2VkIGJ1dCB0aGUgcG9wdWxhY2Ugd2VyZSBkZWxpZ2h0ZWQuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+TW9yZW92ZXIsIENhZXNhciB0cmllZCB0byBhdmFpbCBoaW1zZWxmIHN0aWxsIG1vcmUgb2YgdGhlIGluZmx1ZW5jZSBvZiBQb21wZXkuIEhlIGhhZCBhIGRhdWdodGVyLCBKdWxpYSwgd2hvIHdhcyBiZXRyb3RoZWQgdG8gU2VydmlsaXVzIENhZXBpby4gVGhpcyBkYXVnaHRlciBoZSBiZXRyb3RoZWQgdG8gUG9tcGV5LCBhbmQgc2FpZCBoZSB3b3VsZCBnaXZlIFBvbXBleSdzIGRhdWdodGVyIGluIG1hcnJpYWdlIHRvIFNlcnZpbGl1cywgYWx0aG91Z2ggc2hlIHRvbyB3YXMgbm90IHVuYmV0cm90aGVkLCBidXQgaGFkIGJlZW4gcHJvbWlzZWQgdG8gRmF1c3R1cywgdGhlIHNvbiBvZiBTdWxsYS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIGEgbGl0dGxlIHdoaWxlIGFmdGVyd2FyZHMgQ2Flc2FyIHRvb2sgQ2FscHVybmlhIHRvIHdpZmUsIGEgZGF1Z2h0ZXIgb2YgUGlzbywgYW5kIGdvdCBQaXNvIG1hZGUgY29uc3VsIGZvciB0aGUgY29taW5nIHllYXIsIGFsdGhvdWdoIGhlcmUgdG9vIENhdG8gdmVoZW1lbnRseSBwcm90ZXN0ZWQsIGFuZCBjcmllZCBvdXQgdGhhdCBpdCB3YXMgaW50b2xlcmFibGUgdG8gaGF2ZSB0aGUgc3VwcmVtZSBwb3dlciBwcm9zdGl0dXRlZCBieSBtYXJyaWFnZSBhbGxpYW5jZXMgYW5kIHRvIHNlZSBtZW4gaGVscGluZyBvbmUgYW5vdGhlciB0byBwb3dlcnMgYW5kIGFybWllcyBhbmQgcHJvdmluY2VzIGJ5IG1lYW5zIG9mIHdvbWVuLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWVzYXIgdHJpZWQgdG8gYXZhaWwgaGltc2VsZiBzdGlsbCBtb3JlIG9mIHRoZSBpbmZsdWVuY2Ugb2YgUG9tcGV5LiBIZSBoYWQgYSBkYXVnaHRlciwgSnVsaWEsIHdobyB3YXMgYmV0cm90aGVkIHRvIFNlcnZpbGl1cyBDYWVwaW8uIFRoaXMgZGF1Z2h0ZXIgaGUgYmV0cm90aGVkIHRvIFBvbXBleSwgYW5kIHNhaWQgaGUgd291bGQgZ2l2ZSBQb21wZXkncyBkYXVnaHRlciBpbiBtYXJyaWFnZSB0byBTZXJ2aWxpdXMsIGFsdGhvdWdoIHNoZSB0b28gd2FzIG5vdCB1bmJldHJvdGhlZCwgYnV0IGhhZCBiZWVuIHByb21pc2VkIHRvIEZhdXN0dXMsIHRoZSBzb24gb2YgU3VsbGEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhIGxpdHRsZSB3aGlsZSBhZnRlcndhcmRzIENhZXNhciB0b29rIENhbHB1cm5pYSB0byB3aWZlLCBhIGRhdWdodGVyIG9mIFBpc28sIGFuZCBnb3QgUGlzbyBtYWRlIGNvbnN1bCBmb3IgdGhlIGNvbWluZyB5ZWFyLCBhbHRob3VnaCBoZXJlIHRvbyBDYXRvIHZlaGVtZW50bHkgcHJvdGVzdGVkLCBhbmQgY3JpZWQgb3V0IHRoYXQgaXQgd2FzIGludG9sZXJhYmxlIHRvIGhhdmUgdGhlIHN1cHJlbWUgcG93ZXIgcHJvc3RpdHV0ZWQgYnkgbWFycmlhZ2UgYWxsaWFuY2VzIGFuZCB0byBzZWUgbWVuIGhlbHBpbmcgb25lIGFub3RoZXIgdG8gcG93ZXJzIGFuZCBhcm1pZXMgYW5kIHByb3ZpbmNlcyBieSBtZWFucyBvZiB3b21lbi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgQ2Flc2FyJ3MgY29sbGVhZ3VlLCBCaWJ1bHVzLCBzaW5jZSBoZSBhdmFpbGVkIG5vdGhpbmcgYnkgb2JzdHJ1Y3RpbmcgQ2Flc2FyJ3MgbGF3cywgYnV0IG9mdGVuIHJhbiB0aGUgcmlzayB3aXRoIENhdG8gb2YgYmVpbmcga2lsbGVkIGluIHRoZSBmb3J1bSwgaGUgc2h1dCBoaW1zZWxmIHVwIGF0IGhvbWUgZm9yIHRoZSByZW1haW5kZXIgb2YgaGlzIHRlcm0gb2Ygb2ZmaWNlLiBQb21wZXksIGhvd2V2ZXIsIGltbWVkaWF0ZWx5IGFmdGVyIGhpcyBtYXJyaWFnZSwgZmlsbGVkIHRoZSBmb3J1bSB3aXRoIGFybWVkIG1lbiBhbmQgaGVscGVkIHRoZSBwZW9wbGUgdG8gZW5hY3QgQ2Flc2FyJ3MgbGF3cyBhbmQgZ2l2ZSBoaW0gYXMgaGlzIGNvbnN1bGFyIHByb3ZpbmNlIEdhdWwgb24gYm90aCBzaWRlcyBvZiB0aGUgQWxwcyBmb3IgZml2ZSB5ZWFycywgdG9nZXRoZXIgd2l0aCBJbGx5cmljdW0gYW5kIGZvdXIgbGVnaW9ucy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+Q2F0bywgb2YgY291cnNlLCB0cmllZCB0byBzcGVhayBhZ2FpbnN0IHRoZXNlIG1lYXN1cmVzLCBidXQgQ2Flc2FyIGhhZCBoaW0gbGVkIG9mZiB0byBwcmlzb24sIHN1cHBvc2luZyB0aGF0IGhlIHdvdWxkIGFwcGVhbCB0byB0aGUgcG9wdWxhciB0cmlidW5lczsgYnV0IHdoZW4gQ2F0byB3YWxrZWQgb2ZmIHdpdGhvdXQgYSB3b3JkIGFuZCBDYWVzYXIgc2F3IG5vdCBvbmx5IHRoYXQgdGhlIG1vc3QgaW5mbHVlbnRpYWwgbWVuIHdlcmUgZGlzcGxlYXNlZCwgYnV0IGFsc28gdGhhdCB0aGUgcG9wdWxhY2UsIG91dCBvZiByZXNwZWN0IGZvciBDYXRvJ3MgdmlydHVlLCB3ZXJlIGZvbGxvd2luZyBoaW0gaW4gc2lsZW5jZSBhbmQgd2l0aCBkb3duY2FzdCBsb29rcywgaGUgaGltc2VsZiBzZWNyZXRseSBhc2tlZCBvbmUgb2YgdGhlIHRyaWJ1bmVzIHRvIHRha2UgQ2F0byBvdXQgb2YgYXJyZXN0LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciBDYWVzYXIncyBjb2xsZWFndWUsIEJpYnVsdXMsIHNpbmNlIGhlIGF2YWlsZWQgbm90aGluZyBieSBvYnN0cnVjdGluZyBDYWVzYXIncyBsYXdzLCBidXQgb2Z0ZW4gcmFuIHRoZSByaXNrIHdpdGggQ2F0byBvZiBiZWluZyBraWxsZWQgaW4gdGhlIGZvcnVtLCBoZSBzaHV0IGhpbXNlbGYgdXAgYXQgaG9tZSBmb3IgdGhlIHJlbWFpbmRlciBvZiBoaXMgdGVybSBvZiBvZmZpY2UuIFBvbXBleSwgaG93ZXZlciwgaW1tZWRpYXRlbHkgYWZ0ZXIgaGlzIG1hcnJpYWdlLCBmaWxsZWQgdGhlIGZvcnVtIHdpdGggYXJtZWQgbWVuIGFuZCBoZWxwZWQgdGhlIHBlb3BsZSB0byBlbmFjdCBDYWVzYXIncyBsYXdzIGFuZCBnaXZlIGhpbSBhcyBoaXMgY29uc3VsYXIgcHJvdmluY2UgR2F1bCBvbiBib3RoIHNpZGVzIG9mIHRoZSBBbHBzIGZvciBmaXZlIHllYXJzLCB0b2dldGhlciB3aXRoIElsbHlyaWN1bSBhbmQgZm91ciBsZWdpb25zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIG9mIGNvdXJzZSwgdHJpZWQgdG8gc3BlYWsgYWdhaW5zdCB0aGVzZSBtZWFzdXJlcywgYnV0IENhZXNhciBoYWQgaGltIGxlZCBvZmYgdG8gcHJpc29uLCBzdXBwb3NpbmcgdGhhdCBoZSB3b3VsZCBhcHBlYWwgdG8gdGhlIHBvcHVsYXIgdHJpYnVuZXM7IGJ1dCB3aGVuIENhdG8gd2Fsa2VkIG9mZiB3aXRob3V0IGEgd29yZCBhbmQgQ2Flc2FyIHNhdyBub3Qgb25seSB0aGF0IHRoZSBtb3N0IGluZmx1ZW50aWFsIG1lbiB3ZXJlIGRpc3BsZWFzZWQsIGJ1dCBhbHNvIHRoYXQgdGhlIHBvcHVsYWNlLCBvdXQgb2YgcmVzcGVjdCBmb3IgQ2F0bydzIHZpcnR1ZSwgd2VyZSBmb2xsb3dpbmcgaGltIGluIHNpbGVuY2UgYW5kIHdpdGggZG93bmNhc3QgbG9va3MsIGhlIGhpbXNlbGYgc2VjcmV0bHkgYXNrZWQgb25lIG9mIHRoZSB0cmlidW5lcyB0byB0YWtlIENhdG8gb3V0IG9mIGFycmVzdC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGUgb3RoZXIgc2VuYXRvcnMsIG9ubHkgYSB2ZXJ5IGZldyB1c2VkIHRvIGdvIHdpdGggQ2Flc2FyIHRvIHRoZSBzZW5hdGU7IHRoZSByZXN0LCBpbiBkaXNwbGVhc3VyZSwgc3RheWVkIGF3YXkuIENvbnNpZGl1cywgYSB2ZXJ5IGFnZWQgc2VuYXRvciwgb25jZSB0b2xkIENhZXNhciB0aGF0IGhpcyBjb2xsZWFndWVzIGRpZCBub3QgY29tZSB0b2dldGhlciBiZWNhdXNlIHRoZXkgd2VyZSBhZnJhaWQgb2YgdGhlIGFybWVkIHNvbGRpZXJzLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgdGhlbiw8L3E+IHNhaWQgQ2Flc2FyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvc3QgdGhvdSB0b28gbm90IHN0YXkgYXQgaG9tZSBvdXQgb2YgdGhlIHNhbWUgZmVhcj88L3E+IFRvIHRoaXMgQ29uc2lkaXVzIHJlcGxpZWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QmVjYXVzZSBteSBvbGQgYWdlIG1ha2VzIG1lIGZlYXJsZXNzOyBmb3IgdGhlIHNob3J0IHNwYW4gb2YgbGlmZSB0aGF0IGlzIHN0aWxsIGxlZnQgbWUgZG9lcyBub3QgcmVxdWlyZSBtdWNoIGFueGlvdXMgdGhvdWdodDwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iOSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIG1vc3QgZGlzZ3JhY2VmdWwgcHVibGljIG1lYXN1cmUgb2YgdGhlIHRpbWUgd2FzIHRob3VnaHQgdG8gYmUgdGhlIGVsZWN0aW9uIHRvIHRoZSB0cmlidW5lc2hpcCwgZHVyaW5nIENhZXNhcidzIGNvbnN1bGF0ZSwgb2YgdGhlIG5vdG9yaW91cyBDbG9kaXVzLCB3aG8gaGFkIHRyZXNwYXNzZWQgdXBvbiBoaXMgcmlnaHRzIGFzIGEgaHVzYmFuZCwgYW5kIHVwb24gdGhlIHNlY3JldCBub2N0dXJuYWwgdmlnaWxzLiBIZSB3YXMgZWxlY3RlZCwgaG93ZXZlciwgZm9yIHRoZSBvdmVydGhyb3cgb2YgQ2ljZXJvOyBhbmQgQ2Flc2FyIGRpZCBub3QgZ28gZm9ydGggdXBvbiBoaXMgY2FtcGFpZ24gdW50aWwsIHdpdGggdGhlIGhlbHAgb2YgQ2xvZGl1cywgaGUgaGFkIHJhaXNlZCBhIHN1Y2Nlc3NmdWwgZmFjdGlvbiBhZ2FpbnN0IENpY2VybyBhbmQgZHJpdmVuIGhpbSBvdXQgb2YgSXRhbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4eHguIGFuZCB4eHhpPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.8'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBvdGhlciBzZW5hdG9ycywgb25seSBhIHZlcnkgZmV3IHVzZWQgdG8gZ28gd2l0aCBDYWVzYXIgdG8gdGhlIHNlbmF0ZTsgdGhlIHJlc3QsIGluIGRpc3BsZWFzdXJlLCBzdGF5ZWQgYXdheS4gQ29uc2lkaXVzLCBhIHZlcnkgYWdlZCBzZW5hdG9yLCBvbmNlIHRvbGQgQ2Flc2FyIHRoYXQgaGlzIGNvbGxlYWd1ZXMgZGlkIG5vdCBjb21lIHRvZ2V0aGVyIGJlY2F1c2UgdGhleSB3ZXJlIGFmcmFpZCBvZiB0aGUgYXJtZWQgc29sZGllcnMuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHRoZW4sPC9xPiBzYWlkIENhZXNhciwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmRvc3QgdGhvdSB0b28gbm90IHN0YXkgYXQgaG9tZSBvdXQgb2YgdGhlIHNhbWUgZmVhcj88L3E+IFRvIHRoaXMgQ29uc2lkaXVzIHJlcGxpZWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CZWNhdXNlIG15IG9sZCBhZ2UgbWFrZXMgbWUgZmVhcmxlc3M7IGZvciB0aGUgc2hvcnQgc3BhbiBvZiBsaWZlIHRoYXQgaXMgc3RpbGwgbGVmdCBtZSBkb2VzIG5vdCByZXF1aXJlIG11Y2ggYW54aW91cyB0aG91Z2h0PC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['14.9'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgbW9zdCBkaXNncmFjZWZ1bCBwdWJsaWMgbWVhc3VyZSBvZiB0aGUgdGltZSB3YXMgdGhvdWdodCB0byBiZSB0aGUgZWxlY3Rpb24gdG8gdGhlIHRyaWJ1bmVzaGlwLCBkdXJpbmcgQ2Flc2FyJ3MgY29uc3VsYXRlLCBvZiB0aGUgbm90b3Jpb3VzIENsb2RpdXMsIHdobyBoYWQgdHJlc3Bhc3NlZCB1cG9uIGhpcyByaWdodHMgYXMgYSBodXNiYW5kLCBhbmQgdXBvbiB0aGUgc2VjcmV0IG5vY3R1cm5hbCB2aWdpbHMuIEhlIHdhcyBlbGVjdGVkLCBob3dldmVyLCBmb3IgdGhlIG92ZXJ0aHJvdyBvZiBDaWNlcm87IGFuZCBDYWVzYXIgZGlkIG5vdCBnbyBmb3J0aCB1cG9uIGhpcyBjYW1wYWlnbiB1bnRpbCwgd2l0aCB0aGUgaGVscCBvZiBDbG9kaXVzLCBoZSBoYWQgcmFpc2VkIGEgc3VjY2Vzc2Z1bCBmYWN0aW9uIGFnYWluc3QgQ2ljZXJvIGFuZCBkcml2ZW4gaGltIG91dCBvZiBJdGFseS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIGNoYXB0ZXJzIHh4eC4gYW5kIHh4eGk8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiAzMC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIGNoYXB0ZXJzIHh4eC4gYW5kIHh4eGk8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCBjaGFwdGVycyB4eHguIGFuZCB4eHhpPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGNvdXJzZSBvZiBDYWVzYXIncyBsaWZlIGJlZm9yZSBoaXMgR2FsbGljIGNhbXBhaWducy4gQnV0IHRoZSBwZXJpb2Qgb2YgdGhlIHdhcnMgd2hpY2ggaGUgYWZ0ZXJ3YXJkcyBmb3VnaHQsIGFuZCBvZiB0aGUgY2FtcGFpZ25zIGJ5IHdoaWNoIGhlIHN1Ymp1Z2F0ZWQgR2F1bCwgYXMgaWYgaGUgaGFkIG1hZGUgYW5vdGhlciBiZWdpbm5pbmcgYW5kIGVudGVyZWQgdXBvbiBhIGRpZmZlcmVudCBwYXRoIG9mIGxpZmUgYW5kIG9uZSBvZiBuZXcgYWNoaWV2ZW1lbnRzLCBwcm92ZWQgaGltIHRvIGJlIGluZmVyaW9yIGFzIHNvbGRpZXIgYW5kIGNvbW1hbmRlciB0byBubyBvbmUgc29ldmVyIG9mIHRob3NlIHdobyBoYXZlIHdvbiBtb3N0IGFkbWlyYXRpb24gZm9yIGxlYWRlcnNoaXAgYW5kIHNob3duIHRoZW1zZWx2ZXMgZ3JlYXRlc3QgdGhlcmVpbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+TmF5LCBpZiBvbmUgY29tcGFyZSBoaW0gd2l0aCBzdWNoIG1lbiBhcyBGYWJpdXMgYW5kIFNjaXBpbyBhbmQgTWV0ZWxsdXMsIGFuZCB3aXRoIHRoZSBtZW4gb2YgaGlzIG93biB0aW1lIG9yIGEgbGl0dGxlIGJlZm9yZSBoaW0sIGxpa2UgU3VsbGEsIE1hcml1cywgdGhlIHR3byBMdWN1bGxpLCBvciBldmVuIFBvbXBleSBoaW1zZWxmLCB3aG9zZSBmYW1lIGZvciBldmVyeSBzb3J0IG9mIG1pbGl0YXJ5IGV4Y2VsbGVuY2Ugd2FzIGF0IHRoaXMgdGltZSBmbG93ZXJpbmcgb3V0IGFuZCByZWFjaGluZyB0byB0aGUgc2tpZXMsIENhZXNhciB3aWxsIGJlIGZvdW5kIHRvIHN1cnBhc3MgdGhlbSBhbGwgaW4gaGlzIGFjaGlldmVtZW50cy4gT25lIGhlIHN1cnBhc3NlZCBpbiB0aGUgZGlmZmljdWx0eSBvZiB0aGUgcmVnaW9ucyB3aGVyZSBoZSB3YWdlZCBoaXMgd2FyczsgYW5vdGhlciBpbiB0aGUgZ3JlYXQgZXh0ZW50IG9mIGNvdW50cnkgd2hpY2ggaGUgYWNxdWlyZWQ7IGFub3RoZXIgaW4gdGhlIG11bHRpdHVkZSBhbmQgbWlnaHQgb2YgdGhlIGVuZW1pZXMgb3ZlciB3aG9tIGhlIHdhcyB2aWN0b3Jpb3VzOyAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbm90aGVyIGluIHRoZSBzYXZhZ2UgbWFubmVycyBhbmQgcGVyZmlkaW91cyBkaXNwb3NpdGlvbnMgb2YgdGhlIHBlb3BsZSB3aG9tIGhlIGNvbmNpbGlhdGVkOyBhbm90aGVyIGluIGhpcyByZWFzb25hYmxlbmVzcyBhbmQgbWlsZG5lc3MgdG93YXJkcyBoaXMgY2FwdGl2ZXM7IGFub3RoZXIgc3RpbGwgaW4gdGhlIGdpZnRzIGFuZCBmYXZvdXJzIHdoaWNoIGhlIGJlc3Rvd2VkIHVwb24gaGlzIHNvbGRpZXJzOyBhbmQgYWxsIGluIHRoZSBmYWN0IHRoYXQgaGUgZm91Z2h0IHRoZSBtb3N0IGJhdHRsZXMgYW5kIGtpbGxlZCB0aGUgbW9zdCBlbmVtaWVzLiBGb3IgYWx0aG91Z2ggaXQgd2FzIG5vdCBmdWxsIHRlbiB5ZWFycyB0aGF0IGhlIHdhZ2VkIHdhciBpbiBHYXVsLCBoZSB0b29rIGJ5IHN0b3JtIG1vcmUgdGhhbiBlaWdodCBodW5kcmVkIGNpdGllcywgc3ViZHVlZCB0aHJlZSBodW5kcmVkIG5hdGlvbnMsIGFuZCBmb3VnaHQgcGl0Y2hlZCBiYXR0bGVzIGF0IGRpZmZlcmVudCB0aW1lcyB3aXRoIHRocmVlIG1pbGxpb24gbWVuLCBvZiB3aG9tIGhlIHNsZXcgb25lIG1pbGxpb24gaW4gaGFuZCB0byBoYW5kIGZpZ2h0aW5nIGFuZCB0b29rIGFzIG1hbnkgbW9yZSBwcmlzb25lcnMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCwgdGhlbiwgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGNvdXJzZSBvZiBDYWVzYXIncyBsaWZlIGJlZm9yZSBoaXMgR2FsbGljIGNhbXBhaWducy4gQnV0IHRoZSBwZXJpb2Qgb2YgdGhlIHdhcnMgd2hpY2ggaGUgYWZ0ZXJ3YXJkcyBmb3VnaHQsIGFuZCBvZiB0aGUgY2FtcGFpZ25zIGJ5IHdoaWNoIGhlIHN1Ymp1Z2F0ZWQgR2F1bCwgYXMgaWYgaGUgaGFkIG1hZGUgYW5vdGhlciBiZWdpbm5pbmcgYW5kIGVudGVyZWQgdXBvbiBhIGRpZmZlcmVudCBwYXRoIG9mIGxpZmUgYW5kIG9uZSBvZiBuZXcgYWNoaWV2ZW1lbnRzLCBwcm92ZWQgaGltIHRvIGJlIGluZmVyaW9yIGFzIHNvbGRpZXIgYW5kIGNvbW1hbmRlciB0byBubyBvbmUgc29ldmVyIG9mIHRob3NlIHdobyBoYXZlIHdvbiBtb3N0IGFkbWlyYXRpb24gZm9yIGxlYWRlcnNoaXAgYW5kIHNob3duIHRoZW1zZWx2ZXMgZ3JlYXRlc3QgdGhlcmVpbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5heSwgaWYgb25lIGNvbXBhcmUgaGltIHdpdGggc3VjaCBtZW4gYXMgRmFiaXVzIGFuZCBTY2lwaW8gYW5kIE1ldGVsbHVzLCBhbmQgd2l0aCB0aGUgbWVuIG9mIGhpcyBvd24gdGltZSBvciBhIGxpdHRsZSBiZWZvcmUgaGltLCBsaWtlIFN1bGxhLCBNYXJpdXMsIHRoZSB0d28gTHVjdWxsaSwgb3IgZXZlbiBQb21wZXkgaGltc2VsZiwgd2hvc2UgZmFtZSBmb3IgZXZlcnkgc29ydCBvZiBtaWxpdGFyeSBleGNlbGxlbmNlIHdhcyBhdCB0aGlzIHRpbWUgZmxvd2VyaW5nIG91dCBhbmQgcmVhY2hpbmcgdG8gdGhlIHNraWVzLCBDYWVzYXIgd2lsbCBiZSBmb3VuZCB0byBzdXJwYXNzIHRoZW0gYWxsIGluIGhpcyBhY2hpZXZlbWVudHMuIE9uZSBoZSBzdXJwYXNzZWQgaW4gdGhlIGRpZmZpY3VsdHkgb2YgdGhlIHJlZ2lvbnMgd2hlcmUgaGUgd2FnZWQgaGlzIHdhcnM7IGFub3RoZXIgaW4gdGhlIGdyZWF0IGV4dGVudCBvZiBjb3VudHJ5IHdoaWNoIGhlIGFjcXVpcmVkOyBhbm90aGVyIGluIHRoZSBtdWx0aXR1ZGUgYW5kIG1pZ2h0IG9mIHRoZSBlbmVtaWVzIG92ZXIgd2hvbSBoZSB3YXMgdmljdG9yaW91czsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFub3RoZXIgaW4gdGhlIHNhdmFnZSBtYW5uZXJzIGFuZCBwZXJmaWRpb3VzIGRpc3Bvc2l0aW9ucyBvZiB0aGUgcGVvcGxlIHdob20gaGUgY29uY2lsaWF0ZWQ7IGFub3RoZXIgaW4gaGlzIHJlYXNvbmFibGVuZXNzIGFuZCBtaWxkbmVzcyB0b3dhcmRzIGhpcyBjYXB0aXZlczsgYW5vdGhlciBzdGlsbCBpbiB0aGUgZ2lmdHMgYW5kIGZhdm91cnMgd2hpY2ggaGUgYmVzdG93ZWQgdXBvbiBoaXMgc29sZGllcnM7IGFuZCBhbGwgaW4gdGhlIGZhY3QgdGhhdCBoZSBmb3VnaHQgdGhlIG1vc3QgYmF0dGxlcyBhbmQga2lsbGVkIHRoZSBtb3N0IGVuZW1pZXMuIEZvciBhbHRob3VnaCBpdCB3YXMgbm90IGZ1bGwgdGVuIHllYXJzIHRoYXQgaGUgd2FnZWQgd2FyIGluIEdhdWwsIGhlIHRvb2sgYnkgc3Rvcm0gbW9yZSB0aGFuIGVpZ2h0IGh1bmRyZWQgY2l0aWVzLCBzdWJkdWVkIHRocmVlIGh1bmRyZWQgbmF0aW9ucywgYW5kIGZvdWdodCBwaXRjaGVkIGJhdHRsZXMgYXQgZGlmZmVyZW50IHRpbWVzIHdpdGggdGhyZWUgbWlsbGlvbiBtZW4sIG9mIHdob20gaGUgc2xldyBvbmUgbWlsbGlvbiBpbiBoYW5kIHRvIGhhbmQgZmlnaHRpbmcgYW5kIHRvb2sgYXMgbWFueSBtb3JlIHByaXNvbmVycy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IaXMgc29sZGllcnMgc2hvd2VkIHN1Y2ggZ29vZCB3aWxsIGFuZCB6ZWFsIGluIGhpcyBzZXJ2aWNlIHRoYXQgdGhvc2Ugd2hvIGluIHRoZWlyIHByZXZpb3VzIGNhbXBhaWducyBoYWQgYmVlbiBpbiBubyB3YXkgc3VwZXJpb3IgdG8gb3RoZXJzIHdlcmUgaW52aW5jaWJsZSBhbmQgaXJyZXNpc3RpYmxlIGluIGNvbmZyb250aW5nIGV2ZXJ5IGRhbmdlciB0byBlbmhhbmNlIENhZXNhcidzIGZhbWUuIFN1Y2ggYSBtYW4sIGZvciBpbnN0YW5jZSwgd2FzIEFjaWxpdXMsIHdobywgaW4gdGhlIHNlYS1maWdodCBhdCBNYXNzYWxpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5EZXNjcmliZWQgYnkgQ2Flc2FyIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDIuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CZWxsLiBDaXYuPC90aXRsZT5paS4gNC03PC9iaWJsPi48L25vdGU+IGJvYXJkZWQgYSBob3N0aWxlIHNoaXAgYW5kIGhhZCBoaXMgcmlnaHQgaGFuZCBjdXQgb2ZmIHdpdGggYSBzd29yZCwgYnV0IGNsdW5nIHdpdGggdGhlIG90aGVyIGhhbmQgdG8gaGlzIHNoaWVsZCwgYW5kIGRhc2hpbmcgaXQgaW50byB0aGUgZmFjZXMgb2YgaGlzIGZvZXMsIHJvdXRlZCB0aGVtIGFsbCBhbmQgZ290IHBvc3Nlc3Npb24gb2YgdGhlIHZlc3NlbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBhIG1hbiwgYWdhaW4sIHdhcyBDYXNzaXVzIFNjYWV2YSwgd2hvLCBpbiB0aGUgYmF0dGxlIGF0IER5cnJoYWNoaXVtLCBoYWQgaGlzIGV5ZSBzdHJ1Y2sgb3V0IHdpdGggYW4gYXJyb3csIGhpcyBzaG91bGRlciB0cmFuc2ZpeGVkIHdpdGggb25lIGphdmVsaW4gYW5kIGhpcyB0aGlnaCB3aXRoIGFub3RoZXIsIGFuZCByZWNlaXZlZCBvbiBoaXMgc2hpZWxkIHRoZSBibG93cyBvZiBvbmUgaHVuZHJlZCBhbmQgdGhpcnR5IG1pc3NpbGVzLiBJbiB0aGlzIHBsaWdodCwgaGUgY2FsbGVkIHRoZSBlbmVteSB0byBoaW0gYXMgdGhvdWdoIGhlIHdvdWxkIHN1cnJlbmRlci4gVHdvIG9mIHRoZW0sIGFjY29yZGluZ2x5LCBjb21pbmcgdXAsIGhlIGxvcHBlZCBvZmYgdGhlIHNob3VsZGVyIG9mIG9uZSB3aXRoIGhpcyBzd29yZCwgc21vdGUgdGhlIG90aGVyIGluIHRoZSBmYWNlIGFuZCBwdXQgaGltIHRvIGZsaWdodCwgYW5kIGNhbWUgb2ZmIHNhZmVseSBoaW1zZWxmIHdpdGggdGhlIGFpZCBvZiBoaXMgY29tcmFkZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuNTMiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkJlbGwuIENpdi48L3RpdGxlPmlpaS4gNTM8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWdhaW4sIGluIEJyaXRhaW4sIHdoZW4gdGhlIGVuZW15IGhhZCBmYWxsZW4gdXBvbiB0aGUgZm9yZW1vc3QgY2VudHVyaW9ucywgd2hvIGhhZCBwbHVuZ2VkIGludG8gYSB3YXRlcnkgbWFyc2gsIGEgc29sZGllciwgd2hpbGUgQ2Flc2FyIGluIHBlcnNvbiB3YXMgd2F0Y2hpbmcgdGhlIGJhdHRsZSwgZGFzaGVkIGludG8gdGhlIG1pZHN0IG9mIHRoZSBmaWdodCwgZGlzcGxheWVkIG1hbnkgY29uc3BpY3VvdXMgZGVlZHMgb2YgZGFyaW5nLCBhbmQgcmVzY3VlZCB0aGUgY2VudHVyaW9ucywgYWZ0ZXIgdGhlIEJhcmJhcmlhbnMgaGFkIGJlZW4gcm91dGVkLiBUaGVuIGhlIGhpbXNlbGYsIG1ha2luZyBoaXMgd2F5IHdpdGggZGlmZmljdWx0eSBhZnRlciBhbGwgdGhlIHJlc3QsIHBsdW5nZWQgaW50byB0aGUgbXVkZHkgY3VycmVudCwgYW5kIGF0IGxhc3QsIHdpdGhvdXQgaGlzIHNoaWVsZCwgcGFydGx5IHN3aW1taW5nIGFuZCBwYXJ0bHkgd2FkaW5nLCBnb3QgYWNyb3NzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgYW5kIGhpcyBjb21wYW55IHdlcmUgYW1hemVkIGFuZCBjYW1lIHRvIG1lZXQgdGhlIHNvbGRpZXIgd2l0aCBjcmllcyBvZiBqb3k7IGJ1dCBoZSwgaW4gZ3JlYXQgZGVqZWN0aW9uLCBhbmQgd2l0aCBhIGJ1cnN0IG9mIHRlYXJzLCBjYXN0IGhpbXNlbGYgYXQgQ2Flc2FyJ3MgZmVldCwgYmVnZ2luZyBwYXJkb24gZm9yIHRoZSBsb3NzIG9mIGhpcyBzaGllbGQuIEFnYWluLCBpbiBBZnJpY2EsIFNjaXBpbyBjYXB0dXJlZCBhIHNoaXAgb2YgQ2Flc2FyJ3MgaW4gd2hpY2ggR3Jhbml1cyBQZXRybywgd2hvIGhhZCBiZWVuIGFwcG9pbnRlZCBxdWFlc3Rvciwgd2FzIHNhaWxpbmcuIE9mIHRoZSByZXN0IG9mIHRoZSBwYXNzZW5nZXJzIFNjaXBpbyBtYWRlIGJvb3R5LCBidXQgdG9sZCB0aGUgcXVhZXN0b3IgdGhhdCBoZSBvZmZlcmVkIGhpbSBoaXMgbGlmZS4gR3Jhbml1cywgaG93ZXZlciwgcmVtYXJraW5nIHRoYXQgaXQgd2FzIHRoZSBjdXN0b20gd2l0aCBDYWVzYXIncyBzb2xkaWVycyBub3QgdG8gcmVjZWl2ZSBidXQgdG8gb2ZmZXIgbWVyY3ksIGtpbGxlZCBoaW1zZWxmIHdpdGggYSBibG93IG9mIGhpcyBzd29yZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHNvbGRpZXJzIHNob3dlZCBzdWNoIGdvb2Qgd2lsbCBhbmQgemVhbCBpbiBoaXMgc2VydmljZSB0aGF0IHRob3NlIHdobyBpbiB0aGVpciBwcmV2aW91cyBjYW1wYWlnbnMgaGFkIGJlZW4gaW4gbm8gd2F5IHN1cGVyaW9yIHRvIG90aGVycyB3ZXJlIGludmluY2libGUgYW5kIGlycmVzaXN0aWJsZSBpbiBjb25mcm9udGluZyBldmVyeSBkYW5nZXIgdG8gZW5oYW5jZSBDYWVzYXIncyBmYW1lLiBTdWNoIGEgbWFuLCBmb3IgaW5zdGFuY2UsIHdhcyBBY2lsaXVzLCB3aG8sIGluIHRoZSBzZWEtZmlnaHQgYXQgTWFzc2FsaWEsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5EZXNjcmliZWQgYnkgQ2Flc2FyIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMi40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gQ2l2LjwvdGl0bGU+aWkuIDQtNzwvYmlibD4uPC9ub3RlPiBib2FyZGVkIGEgaG9zdGlsZSBzaGlwIGFuZCBoYWQgaGlzIHJpZ2h0IGhhbmQgY3V0IG9mZiB3aXRoIGEgc3dvcmQsIGJ1dCBjbHVuZyB3aXRoIHRoZSBvdGhlciBoYW5kIHRvIGhpcyBzaGllbGQsIGFuZCBkYXNoaW5nIGl0IGludG8gdGhlIGZhY2VzIG9mIGhpcyBmb2VzLCByb3V0ZWQgdGhlbSBhbGwgYW5kIGdvdCBwb3NzZXNzaW9uIG9mIHRoZSB2ZXNzZWwuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAyLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT5paS4gNC03PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT5paS4gNC03PC90cmFuc2xhdGlvbj4="
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggYSBtYW4sIGFnYWluLCB3YXMgQ2Fzc2l1cyBTY2FldmEsIHdobywgaW4gdGhlIGJhdHRsZSBhdCBEeXJyaGFjaGl1bSwgaGFkIGhpcyBleWUgc3RydWNrIG91dCB3aXRoIGFuIGFycm93LCBoaXMgc2hvdWxkZXIgdHJhbnNmaXhlZCB3aXRoIG9uZSBqYXZlbGluIGFuZCBoaXMgdGhpZ2ggd2l0aCBhbm90aGVyLCBhbmQgcmVjZWl2ZWQgb24gaGlzIHNoaWVsZCB0aGUgYmxvd3Mgb2Ygb25lIGh1bmRyZWQgYW5kIHRoaXJ0eSBtaXNzaWxlcy4gSW4gdGhpcyBwbGlnaHQsIGhlIGNhbGxlZCB0aGUgZW5lbXkgdG8gaGltIGFzIHRob3VnaCBoZSB3b3VsZCBzdXJyZW5kZXIuIFR3byBvZiB0aGVtLCBhY2NvcmRpbmdseSwgY29taW5nIHVwLCBoZSBsb3BwZWQgb2ZmIHRoZSBzaG91bGRlciBvZiBvbmUgd2l0aCBoaXMgc3dvcmQsIHNtb3RlIHRoZSBvdGhlciBpbiB0aGUgZmFjZSBhbmQgcHV0IGhpbSB0byBmbGlnaHQsIGFuZCBjYW1lIG9mZiBzYWZlbHkgaGltc2VsZiB3aXRoIHRoZSBhaWQgb2YgaGlzIGNvbXJhZGVzLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy41MyIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBDaXYuPC90aXRsZT5paWkuIDUzPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjUzIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPmlpaS4gNTM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIENpdi48L3RpdGxlPmlpaS4gNTM8L3RyYW5zbGF0aW9uPg=="
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFnYWluLCBpbiBCcml0YWluLCB3aGVuIHRoZSBlbmVteSBoYWQgZmFsbGVuIHVwb24gdGhlIGZvcmVtb3N0IGNlbnR1cmlvbnMsIHdobyBoYWQgcGx1bmdlZCBpbnRvIGEgd2F0ZXJ5IG1hcnNoLCBhIHNvbGRpZXIsIHdoaWxlIENhZXNhciBpbiBwZXJzb24gd2FzIHdhdGNoaW5nIHRoZSBiYXR0bGUsIGRhc2hlZCBpbnRvIHRoZSBtaWRzdCBvZiB0aGUgZmlnaHQsIGRpc3BsYXllZCBtYW55IGNvbnNwaWN1b3VzIGRlZWRzIG9mIGRhcmluZywgYW5kIHJlc2N1ZWQgdGhlIGNlbnR1cmlvbnMsIGFmdGVyIHRoZSBCYXJiYXJpYW5zIGhhZCBiZWVuIHJvdXRlZC4gVGhlbiBoZSBoaW1zZWxmLCBtYWtpbmcgaGlzIHdheSB3aXRoIGRpZmZpY3VsdHkgYWZ0ZXIgYWxsIHRoZSByZXN0LCBwbHVuZ2VkIGludG8gdGhlIG11ZGR5IGN1cnJlbnQsIGFuZCBhdCBsYXN0LCB3aXRob3V0IGhpcyBzaGllbGQsIHBhcnRseSBzd2ltbWluZyBhbmQgcGFydGx5IHdhZGluZywgZ290IGFjcm9zcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBhbmQgaGlzIGNvbXBhbnkgd2VyZSBhbWF6ZWQgYW5kIGNhbWUgdG8gbWVldCB0aGUgc29sZGllciB3aXRoIGNyaWVzIG9mIGpveTsgYnV0IGhlLCBpbiBncmVhdCBkZWplY3Rpb24sIGFuZCB3aXRoIGEgYnVyc3Qgb2YgdGVhcnMsIGNhc3QgaGltc2VsZiBhdCBDYWVzYXIncyBmZWV0LCBiZWdnaW5nIHBhcmRvbiBmb3IgdGhlIGxvc3Mgb2YgaGlzIHNoaWVsZC4gQWdhaW4sIGluIEFmcmljYSwgU2NpcGlvIGNhcHR1cmVkIGEgc2hpcCBvZiBDYWVzYXIncyBpbiB3aGljaCBHcmFuaXVzIFBldHJvLCB3aG8gaGFkIGJlZW4gYXBwb2ludGVkIHF1YWVzdG9yLCB3YXMgc2FpbGluZy4gT2YgdGhlIHJlc3Qgb2YgdGhlIHBhc3NlbmdlcnMgU2NpcGlvIG1hZGUgYm9vdHksIGJ1dCB0b2xkIHRoZSBxdWFlc3RvciB0aGF0IGhlIG9mZmVyZWQgaGltIGhpcyBsaWZlLiBHcmFuaXVzLCBob3dldmVyLCByZW1hcmtpbmcgdGhhdCBpdCB3YXMgdGhlIGN1c3RvbSB3aXRoIENhZXNhcidzIHNvbGRpZXJzIG5vdCB0byByZWNlaXZlIGJ1dCB0byBvZmZlciBtZXJjeSwga2lsbGVkIGhpbXNlbGYgd2l0aCBhIGJsb3cgb2YgaGlzIHN3b3JkLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlN1Y2ggc3Bpcml0IGFuZCBhbWJpdGlvbiBDYWVzYXIgaGltc2VsZiBjcmVhdGVkIGFuZCBjdWx0aXZhdGVkIGluIGhpcyBtZW4sIGluIHRoZSBmaXJzdCBwbGFjZSwgYmVjYXVzZSBoZSBzaG93ZWQsIGJ5IGhpcyB1bnNwYXJpbmcgYmVzdG93YWwgb2YgcmV3YXJkcyBhbmQgaG9ub3VycywgdGhhdCBoZSB3YXMgbm90IGFtYXNzaW5nIHdlYWx0aCBmcm9tIGhpcyB3YXJzIGZvciBoaXMgb3duIGx1eHVyeSBvciBmb3IgYW55IGxpZmUgb2YgZWFzZSwgYnV0IHRoYXQgaGUgdHJlYXN1cmVkIGl0IHVwIGNhcmVmdWxseSBhcyBhIGNvbW1vbiBwcml6ZSBmb3IgZGVlZHMgb2YgdmFsb3VyLCBhbmQgaGFkIG5vIGdyZWF0ZXIgc2hhcmUgaW4gdGhlIHdlYWx0aCB0aGFuIGhlIG9mZmVyZWQgdG8gdGhlIGRlc2VydmluZyBhbW9uZyBoaXMgc29sZGllcnM7IGFuZCBpbiB0aGUgc2Vjb25kIHBsYWNlLCBieSB3aWxsaW5nbHkgdW5kZXJnb2luZyBldmVyeSBkYW5nZXIgYW5kIHJlZnVzaW5nIG5vIHRvaWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgYXQgaGlzIGxvdmUgb2YgZGFuZ2VyIGhpcyBtZW4gd2VyZSBub3QgYXN0b25pc2hlZCwga25vd2luZyBoaXMgYW1iaXRpb247IGJ1dCB0aGF0IGhlIHNob3VsZCB1bmRlcmdvIHRvaWxzIGJleW9uZCBoaXMgYm9keSdzIGFwcGFyZW50IHBvd2VyIG9mIGVuZHVyYW5jZSBhbWF6ZWQgdGhlbSwgYmVjYXVzZSBoZSB3YXMgb2YgYSBzcGFyZSBoYWJpdCwgaGFkIGEgc29mdCBhbmQgd2hpdGUgc2tpbiwgc3VmZmVyZWQgZnJvbSBkaXN0ZW1wZXIgaW4gdGhlIGhlYWQsIGFuZCB3YXMgc3ViamVjdCB0byBlcGlsZXB0aWMgZml0cywgYSB0cm91YmxlIHdoaWNoIGZpcnN0IGF0dGFja2VkIGhpbSwgd2UgYXJlIHRvbGQsIGluIENvcmR1YmEuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGUgZGlkIG5vdCBtYWtlIGhpcyBmZWVibGUgaGVhbHRoIGFuIGV4Y3VzZSBmb3Igc29mdCBsaXZpbmcsIGJ1dCByYXRoZXIgaGlzIG1pbGl0YXJ5IHNlcnZpY2UgYSBjdXJlIGZvciBoaXMgZmVlYmxlIGhlYWx0aCwgc2luY2UgYnkgd2Vhcmlzb21lIGpvdXJuZXlzLCBzaW1wbGUgZGlldCwgY29udGludW91c2x5IHNsZWVwaW5nIGluIHRoZSBvcGVuIGFpciwgYW5kIGVuZHVyaW5nIGhhcmRzaGlwcywgaGUgZm91Z2h0IG9mZiBoaXMgdHJvdWJsZSBhbmQga2VwdCBoaXMgYm9keSBzdHJvbmcgYWdhaW5zdCBpdHMgYXR0YWNrcy4gTW9zdCBvZiBoaXMgc2xlZXAsIGF0IGxlYXN0LCBoZSBnb3QgaW4gY2FycyBvciBsaXR0ZXJzLCBtYWtpbmcgaGlzIHJlc3QgY29uZHVjZSB0byBhY3Rpb24sIGFuZCBpbiB0aGUgZGF5LXRpbWUgaGUgd291bGQgaGF2ZSBoaW1zZWxmIGNvbnZleWVkIHRvIGdhcnJpc29ucywgY2l0aWVzLCBvciBjYW1wcyBvbmUgc2xhdmUgd2hvIHdhcyBhY2N1c3RvbWVkIHRvIHdyaXRlIGZyb20gZGljdGF0aW9uIGFzIGhlIHRyYXZlbGxlZCBzaXR0aW5nIGJ5IGhpcyBzaWRlLCBhbmQgb25lIHNvbGRpZXIgc3RhbmRpbmcgYmVoaW5kIGhpbSB3aXRoIGEgc3dvcmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBkcm92ZSBzbyByYXBpZGx5IHRoYXQsIG9uIGhpcyBmaXJzdCBqb3VybmV5IGZyb20gUm9tZSB0byBHYXVsLCBoZSByZWFjaGVkIHRoZSBSaG9uZSBpbiBzZXZlbiBkYXlzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U3VjaCBzcGlyaXQgYW5kIGFtYml0aW9uIENhZXNhciBoaW1zZWxmIGNyZWF0ZWQgYW5kIGN1bHRpdmF0ZWQgaW4gaGlzIG1lbiwgaW4gdGhlIGZpcnN0IHBsYWNlLCBiZWNhdXNlIGhlIHNob3dlZCwgYnkgaGlzIHVuc3BhcmluZyBiZXN0b3dhbCBvZiByZXdhcmRzIGFuZCBob25vdXJzLCB0aGF0IGhlIHdhcyBub3QgYW1hc3Npbmcgd2VhbHRoIGZyb20gaGlzIHdhcnMgZm9yIGhpcyBvd24gbHV4dXJ5IG9yIGZvciBhbnkgbGlmZSBvZiBlYXNlLCBidXQgdGhhdCBoZSB0cmVhc3VyZWQgaXQgdXAgY2FyZWZ1bGx5IGFzIGEgY29tbW9uIHByaXplIGZvciBkZWVkcyBvZiB2YWxvdXIsIGFuZCBoYWQgbm8gZ3JlYXRlciBzaGFyZSBpbiB0aGUgd2VhbHRoIHRoYW4gaGUgb2ZmZXJlZCB0byB0aGUgZGVzZXJ2aW5nIGFtb25nIGhpcyBzb2xkaWVyczsgYW5kIGluIHRoZSBzZWNvbmQgcGxhY2UsIGJ5IHdpbGxpbmdseSB1bmRlcmdvaW5nIGV2ZXJ5IGRhbmdlciBhbmQgcmVmdXNpbmcgbm8gdG9pbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgYXQgaGlzIGxvdmUgb2YgZGFuZ2VyIGhpcyBtZW4gd2VyZSBub3QgYXN0b25pc2hlZCwga25vd2luZyBoaXMgYW1iaXRpb247IGJ1dCB0aGF0IGhlIHNob3VsZCB1bmRlcmdvIHRvaWxzIGJleW9uZCBoaXMgYm9keSdzIGFwcGFyZW50IHBvd2VyIG9mIGVuZHVyYW5jZSBhbWF6ZWQgdGhlbSwgYmVjYXVzZSBoZSB3YXMgb2YgYSBzcGFyZSBoYWJpdCwgaGFkIGEgc29mdCBhbmQgd2hpdGUgc2tpbiwgc3VmZmVyZWQgZnJvbSBkaXN0ZW1wZXIgaW4gdGhlIGhlYWQsIGFuZCB3YXMgc3ViamVjdCB0byBlcGlsZXB0aWMgZml0cywgYSB0cm91YmxlIHdoaWNoIGZpcnN0IGF0dGFja2VkIGhpbSwgd2UgYXJlIHRvbGQsIGluIENvcmR1YmEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5ldmVydGhlbGVzcywgaGUgZGlkIG5vdCBtYWtlIGhpcyBmZWVibGUgaGVhbHRoIGFuIGV4Y3VzZSBmb3Igc29mdCBsaXZpbmcsIGJ1dCByYXRoZXIgaGlzIG1pbGl0YXJ5IHNlcnZpY2UgYSBjdXJlIGZvciBoaXMgZmVlYmxlIGhlYWx0aCwgc2luY2UgYnkgd2Vhcmlzb21lIGpvdXJuZXlzLCBzaW1wbGUgZGlldCwgY29udGludW91c2x5IHNsZWVwaW5nIGluIHRoZSBvcGVuIGFpciwgYW5kIGVuZHVyaW5nIGhhcmRzaGlwcywgaGUgZm91Z2h0IG9mZiBoaXMgdHJvdWJsZSBhbmQga2VwdCBoaXMgYm9keSBzdHJvbmcgYWdhaW5zdCBpdHMgYXR0YWNrcy4gTW9zdCBvZiBoaXMgc2xlZXAsIGF0IGxlYXN0LCBoZSBnb3QgaW4gY2FycyBvciBsaXR0ZXJzLCBtYWtpbmcgaGlzIHJlc3QgY29uZHVjZSB0byBhY3Rpb24sIGFuZCBpbiB0aGUgZGF5LXRpbWUgaGUgd291bGQgaGF2ZSBoaW1zZWxmIGNvbnZleWVkIHRvIGdhcnJpc29ucywgY2l0aWVzLCBvciBjYW1wcyBvbmUgc2xhdmUgd2hvIHdhcyBhY2N1c3RvbWVkIHRvIHdyaXRlIGZyb20gZGljdGF0aW9uIGFzIGhlIHRyYXZlbGxlZCBzaXR0aW5nIGJ5IGhpcyBzaWRlLCBhbmQgb25lIHNvbGRpZXIgc3RhbmRpbmcgYmVoaW5kIGhpbSB3aXRoIGEgc3dvcmQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSBkcm92ZSBzbyByYXBpZGx5IHRoYXQsIG9uIGhpcyBmaXJzdCBqb3VybmV5IGZyb20gUm9tZSB0byBHYXVsLCBoZSByZWFjaGVkIHRoZSBSaG9uZSBpbiBzZXZlbiBkYXlzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SG9yc2VtYW5zaGlwLCBtb3Jlb3ZlciwgaGFkIGJlZW4gZWFzeSBmb3IgaGltIGZyb20gYm95aG9vZDsgZm9yIGhlIHdhcyB3b250IHRvIHB1dCBoaXMgaGFuZHMgYmVoaW5kIGhpcyBiYWNrIGFuZCwgaG9sZGluZyB0aGVtIGNsb3NlbHkgdGhlcmUsIHRvIHJpZGUgaGlzIGhvcnNlIGF0IGZ1bGwgc3BlZWQuIEFuZCBpbiB0aGUgR2FsbGljIGNhbXBhaWducyBoZSBwcmFjdGlzZWQgZGljdGF0aW5nIGxldHRlcnMgb24gaG9yc2ViYWNrIGFuZCBrZWVwaW5nIHR3byBzY3JpYmVzIGF0IG9uY2UgYnVzeSwgb3IsIGFzIE9wcGl1cyBzYXlzLCBldmVuIG1vcmUuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+V2UgYXJlIHRvbGQsIG1vcmVvdmVyLCB0aGF0IENhZXNhciB3YXMgdGhlIGZpcnN0IHRvIGRldmlzZSBpbnRlcmNvdXJzZSB3aXRoIGhpcyBmcmllbmRzIGJ5IGxldHRlciwgc2luY2UgaGUgY291bGQgbm90IHdhaXQgZm9yIHBlcnNvbmFsIGludGVydmlld3Mgb24gdXJnZW50IG1hdHRlcnMgb3dpbmcgdG8gdGhlIG11bHRpdHVkZSBvZiBoaXMgb2NjdXBhdGlvbnMgYW5kIHRoZSBncmVhdCBzaXplIG9mIHRoZSBjaXR5LiBPZiBoaXMgaW5kaWZmZXJlbmNlIGluIHJlZ2FyZCB0byBoaXMgZGlldCB0aGUgZm9sbG93aW5nIGNpcmN1bXN0YW5jZSBhbHNvIGlzIGJyb3VnaHQgaW4gcHJvb2YuIFdoZW4gdGhlIGhvc3Qgd2hvIHdhcyBlbnRlcnRhaW5pbmcgaGltIGluIE1lZGlvbGFudW0sIFZhbGVyaXVzIExlbywgc2VydmVkIHVwIGFzcGFyYWd1cyBkcmVzc2VkIHdpdGggbXlycmggaW5zdGVhZCBvZiBvbGl2ZSBvaWwsIENhZXNhciBhdGUgb2YgaXQgd2l0aG91dCBhZG8sIGFuZCByZWJ1a2VkIGhpcyBmcmllbmRzIHdoZW4gdGhleSBzaG93ZWQgZGlzcGxlYXN1cmUuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5TdXJlbHksPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPml0IHdlcmUgZW5vdWdoIG5vdCB0byBlYXQgd2hhdCB5b3UgZG9uJ3QgbGlrZTsgYnV0IGhlIHdobyBmaW5kcyBmYXVsdCB3aXRoIGlsbC1icmVlZGluZyBsaWtlIHRoaXMgaXMgaWxsLWJyZWQgaGltc2VsZjwvcT4gT25jZSwgdG9vLCB1cG9uIGEgam91cm5leSwgaGUgYW5kIGhpcyBmb2xsb3dlcnMgd2VyZSBkcml2ZW4gYnkgYSBzdG9ybSBpbnRvIGEgcG9vciBtYW4ncyBodXQsIGFuZCB3aGVuIGhlIGZvdW5kIHRoYXQgaXQgY29uc2lzdGVkIG9mIG9uZSByb29tIG9ubHksIGFuZCB0aGF0IG9uZSBiYXJlbHkgYWJsZSB0byBhY2NvbW1vZGF0ZSBhIHNpbmdsZSBwZXJzb24sIGhlIHNhaWQgdG8gaGlzIGZyaWVuZHMgdGhhdCBob25vdXJzIG11c3QgYmUgeWllbGRlZCB0byB0aGUgc3Ryb25nZXN0LCBidXQgbmVjZXNzaXRpZXMgdG8gdGhlIHdlYWtlc3QsIGFuZCBiYWRlIE9wcGl1cyBsaWUgZG93biB0aGVyZSwgd2hpbGUgaGUgaGltc2VsZiB3aXRoIHRoZSByZXN0IG9mIGhpcyBjb21wYW55IHNsZXB0IGluIHRoZSBwb3JjaC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldlIGFyZSB0b2xkLCBtb3Jlb3ZlciwgdGhhdCBDYWVzYXIgd2FzIHRoZSBmaXJzdCB0byBkZXZpc2UgaW50ZXJjb3Vyc2Ugd2l0aCBoaXMgZnJpZW5kcyBieSBsZXR0ZXIsIHNpbmNlIGhlIGNvdWxkIG5vdCB3YWl0IGZvciBwZXJzb25hbCBpbnRlcnZpZXdzIG9uIHVyZ2VudCBtYXR0ZXJzIG93aW5nIHRvIHRoZSBtdWx0aXR1ZGUgb2YgaGlzIG9jY3VwYXRpb25zIGFuZCB0aGUgZ3JlYXQgc2l6ZSBvZiB0aGUgY2l0eS4gT2YgaGlzIGluZGlmZmVyZW5jZSBpbiByZWdhcmQgdG8gaGlzIGRpZXQgdGhlIGZvbGxvd2luZyBjaXJjdW1zdGFuY2UgYWxzbyBpcyBicm91Z2h0IGluIHByb29mLiBXaGVuIHRoZSBob3N0IHdobyB3YXMgZW50ZXJ0YWluaW5nIGhpbSBpbiBNZWRpb2xhbnVtLCBWYWxlcml1cyBMZW8sIHNlcnZlZCB1cCBhc3BhcmFndXMgZHJlc3NlZCB3aXRoIG15cnJoIGluc3RlYWQgb2Ygb2xpdmUgb2lsLCBDYWVzYXIgYXRlIG9mIGl0IHdpdGhvdXQgYWRvLCBhbmQgcmVidWtlZCBoaXMgZnJpZW5kcyB3aGVuIHRoZXkgc2hvd2VkIGRpc3BsZWFzdXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlN1cmVseSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5pdCB3ZXJlIGVub3VnaCBub3QgdG8gZWF0IHdoYXQgeW91IGRvbid0IGxpa2U7IGJ1dCBoZSB3aG8gZmluZHMgZmF1bHQgd2l0aCBpbGwtYnJlZWRpbmcgbGlrZSB0aGlzIGlzIGlsbC1icmVkIGhpbXNlbGY8L3E+IE9uY2UsIHRvbywgdXBvbiBhIGpvdXJuZXksIGhlIGFuZCBoaXMgZm9sbG93ZXJzIHdlcmUgZHJpdmVuIGJ5IGEgc3Rvcm0gaW50byBhIHBvb3IgbWFuJ3MgaHV0LCBhbmQgd2hlbiBoZSBmb3VuZCB0aGF0IGl0IGNvbnNpc3RlZCBvZiBvbmUgcm9vbSBvbmx5LCBhbmQgdGhhdCBvbmUgYmFyZWx5IGFibGUgdG8gYWNjb21tb2RhdGUgYSBzaW5nbGUgcGVyc29uLCBoZSBzYWlkIHRvIGhpcyBmcmllbmRzIHRoYXQgaG9ub3VycyBtdXN0IGJlIHlpZWxkZWQgdG8gdGhlIHN0cm9uZ2VzdCwgYnV0IG5lY2Vzc2l0aWVzIHRvIHRoZSB3ZWFrZXN0LCBhbmQgYmFkZSBPcHBpdXMgbGllIGRvd24gdGhlcmUsIHdoaWxlIGhlIGhpbXNlbGYgd2l0aCB0aGUgcmVzdCBvZiBoaXMgY29tcGFueSBzbGVwdCBpbiB0aGUgcG9yY2guPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJlc3VtZSwgdGhlIGZpcnN0IG9mIGhpcyBHYWxsaWMgd2FycyB3YXMgYWdhaW5zdCB0aGUgSGVsdmV0aWkgYW5kIFRpZ3VyaW5pLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAxLjIgIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CZWxsLiBHYWxsLjwvdGl0bGU+IGkuIDItMjk8L2JpYmw+Ljwvbm90ZT4gd2hvIGhhZCBzZXQgZmlyZSB0byB0aGVpciB0d2VsdmUgY2l0aWVzIGFuZCBmb3VyIGh1bmRyZWQgdmlsbGFnZXMgYW5kIHdlcmUgYWR2YW5jaW5nIHRocm91Z2ggdGhhdCBwYXJ0IG9mIEdhdWwgd2hpY2ggd2FzIHN1YmplY3QgdG8gdGhlIFJvbWFucywgYXMgb25jZSB0aGUgQ2ltYnJpIGFuZCBUZXV0b25lcyBoYWQgZG9uZS4gVG8gdGhlc2UgdGhleSB3ZXJlIHRob3VnaHQgdG8gYmUgbm90IGluZmVyaW9yIGluIGNvdXJhZ2UgYW5kIG9mIGVxdWFsIG51bWJlcnMsIGJlaW5nIHRocmVlIGh1bmRyZWQgdGhvdXNhbmQgaW4gYWxsLCBvZiB3aG9tIG9uZSBodW5kcmVkIGFuZCBuaW5ldHkgdGhvdXNhbmQgd2VyZSBmaWdodGluZyBtZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBUaWd1cmluaSB3ZXJlIGNydXNoZWQgYXQgdGhlIHJpdmVyIEFyYXIsIG5vdCBieSBDYWVzYXIgaGltc2VsZiwgYnV0IGJ5IExhYmllbnVzLCBoaXMgZGVwdXR5OyB0aGUgSGVsdmV0aWksIGhvd2V2ZXIsIHVuZXhwZWN0ZWRseSBhdHRhY2tlZCBDYWVzYXIgaGltc2VsZiBvbiB0aGUgbWFyY2gsIGFzIGhlIHdhcyBsZWFkaW5nIGhpcyBmb3JjZXMgdG93YXJkcyBhIGZyaWVuZGx5IGNpdHksIGJ1dCBoZSBzdWNjZWVkZWQgaW4gcmVhY2hpbmcgYSBzdHJvbmcgcGxhY2Ugb2YgcmVmdWdlLiBIZXJlLCBhZnRlciBoZSBoYWQgY29sbGVjdGVkIGFuZCBhcnJheWVkIGhpcyBmb3JjZXMsIGEgaG9yc2Ugd2FzIGJyb3VnaHQgdG8gaGltLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoaXMgaG9yc2UsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgd2lsbCB1c2UgZm9yIHRoZSBwdXJzdWl0IGFmdGVyIG15IHZpY3Rvcnk7IGJ1dCBub3cgbGV0IHVzIGdvIGFnYWluc3QgdGhlIGVuZW15LDwvcT4gYW5kIGFjY29yZGluZ2x5IGxlZCB0aGUgY2hhcmdlIG9uIGZvb3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgbG9uZyBhbmQgaGFyZCBzdHJ1Z2dsZSBoZSByb3V0ZWQgdGhlIGVuZW15J3MgZmlnaHRpbmcgbWVuLCBidXQgaGFkIHRoZSBtb3N0IHRyb3VibGUgYXQgdGhlaXIgcmFtcGFydCBvZiB3YWdnb25zLCB3aGVyZSBub3Qgb25seSBkaWQgdGhlIG1lbiB0aGVtc2VsdmVzIG1ha2UgYSBzdGFuZCBhbmQgZmlnaHQsIGJ1dCBhbHNvIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiBkZWZlbmRlZCB0aGVtc2VsdmVzIHRvIHRoZSBkZWF0aCBhbmQgd2VyZSBjdXQgdG8gcGllY2VzIHdpdGggdGhlIG1lbi4gVGhlIGJhdHRsZSB3YXMgaGFyZGx5IG92ZXIgYnkgbWlkbmlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBub2JsZSB3b3JrIG9mIHZpY3RvcnkgQ2Flc2FyIGFkZGVkIGEgbm9ibGVyIHN0aWxsLCB0aGF0IG9mIHNldHRsaW5nIHRob3NlIG9mIHRoZSBCYXJiYXJpYW5zIHdobyBoYWQgZXNjYXBlZCBhbGl2ZSBmcm9tIHRoZSBiYXR0bGUgKHRoZXJlIHdlcmUgbW9yZSB0aGFuIG9uZSBodW5kcmVkIHRob3VzYW5kIG9mIHRoZW0pLCBhbmQgY29tcGVsbGluZyB0aGVtIHRvIHJlc3VtZSB0aGUgdGVycml0b3J5IHdoaWNoIHRoZXkgaGFkIGFiYW5kb25lZCBhbmQgdGhlIGNpdGllcyB3aGljaCB0aGV5IGhhZCBkZXN0cm95ZWQuIEhlIGRpZCB0aGlzIGJlY2F1c2UgaGUgZmVhcmVkIHRoYXQgaWYgdGhlIHRlcnJpdG9yeSBiZWNhbWUgdmFjYW50IHRoZSBHZXJtYW5zIHdvdWxkIGNyb3NzIHRoZSBSaGluZSBhbmQgb2NjdXB5IGl0LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJlc3VtZSwgdGhlIGZpcnN0IG9mIGhpcyBHYWxsaWMgd2FycyB3YXMgYWdhaW5zdCB0aGUgSGVsdmV0aWkgYW5kIFRpZ3VyaW5pLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMS4yICIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CZWxsLiBHYWxsLjwvdGl0bGU+IGkuIDItMjk8L2JpYmw+Ljwvbm90ZT4gd2hvIGhhZCBzZXQgZmlyZSB0byB0aGVpciB0d2VsdmUgY2l0aWVzIGFuZCBmb3VyIGh1bmRyZWQgdmlsbGFnZXMgYW5kIHdlcmUgYWR2YW5jaW5nIHRocm91Z2ggdGhhdCBwYXJ0IG9mIEdhdWwgd2hpY2ggd2FzIHN1YmplY3QgdG8gdGhlIFJvbWFucywgYXMgb25jZSB0aGUgQ2ltYnJpIGFuZCBUZXV0b25lcyBoYWQgZG9uZS4gVG8gdGhlc2UgdGhleSB3ZXJlIHRob3VnaHQgdG8gYmUgbm90IGluZmVyaW9yIGluIGNvdXJhZ2UgYW5kIG9mIGVxdWFsIG51bWJlcnMsIGJlaW5nIHRocmVlIGh1bmRyZWQgdGhvdXNhbmQgaW4gYWxsLCBvZiB3aG9tIG9uZSBodW5kcmVkIGFuZCBuaW5ldHkgdGhvdXNhbmQgd2VyZSBmaWdodGluZyBtZW4uIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAxLjIgIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJlbGwuIEdhbGwuPC90aXRsZT4gaS4gMi0yOTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QmVsbC4gR2FsbC48L3RpdGxlPiBpLiAyLTI5PC90cmFuc2xhdGlvbj4="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBUaWd1cmluaSB3ZXJlIGNydXNoZWQgYXQgdGhlIHJpdmVyIEFyYXIsIG5vdCBieSBDYWVzYXIgaGltc2VsZiwgYnV0IGJ5IExhYmllbnVzLCBoaXMgZGVwdXR5OyB0aGUgSGVsdmV0aWksIGhvd2V2ZXIsIHVuZXhwZWN0ZWRseSBhdHRhY2tlZCBDYWVzYXIgaGltc2VsZiBvbiB0aGUgbWFyY2gsIGFzIGhlIHdhcyBsZWFkaW5nIGhpcyBmb3JjZXMgdG93YXJkcyBhIGZyaWVuZGx5IGNpdHksIGJ1dCBoZSBzdWNjZWVkZWQgaW4gcmVhY2hpbmcgYSBzdHJvbmcgcGxhY2Ugb2YgcmVmdWdlLiBIZXJlLCBhZnRlciBoZSBoYWQgY29sbGVjdGVkIGFuZCBhcnJheWVkIGhpcyBmb3JjZXMsIGEgaG9yc2Ugd2FzIGJyb3VnaHQgdG8gaGltLiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhpcyBob3JzZSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIHdpbGwgdXNlIGZvciB0aGUgcHVyc3VpdCBhZnRlciBteSB2aWN0b3J5OyBidXQgbm93IGxldCB1cyBnbyBhZ2FpbnN0IHRoZSBlbmVteSw8L3E+IGFuZCBhY2NvcmRpbmdseSBsZWQgdGhlIGNoYXJnZSBvbiBmb290LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGEgbG9uZyBhbmQgaGFyZCBzdHJ1Z2dsZSBoZSByb3V0ZWQgdGhlIGVuZW15J3MgZmlnaHRpbmcgbWVuLCBidXQgaGFkIHRoZSBtb3N0IHRyb3VibGUgYXQgdGhlaXIgcmFtcGFydCBvZiB3YWdnb25zLCB3aGVyZSBub3Qgb25seSBkaWQgdGhlIG1lbiB0aGVtc2VsdmVzIG1ha2UgYSBzdGFuZCBhbmQgZmlnaHQsIGJ1dCBhbHNvIHRoZWlyIHdpdmVzIGFuZCBjaGlsZHJlbiBkZWZlbmRlZCB0aGVtc2VsdmVzIHRvIHRoZSBkZWF0aCBhbmQgd2VyZSBjdXQgdG8gcGllY2VzIHdpdGggdGhlIG1lbi4gVGhlIGJhdHRsZSB3YXMgaGFyZGx5IG92ZXIgYnkgbWlkbmlnaHQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBub2JsZSB3b3JrIG9mIHZpY3RvcnkgQ2Flc2FyIGFkZGVkIGEgbm9ibGVyIHN0aWxsLCB0aGF0IG9mIHNldHRsaW5nIHRob3NlIG9mIHRoZSBCYXJiYXJpYW5zIHdobyBoYWQgZXNjYXBlZCBhbGl2ZSBmcm9tIHRoZSBiYXR0bGUgKHRoZXJlIHdlcmUgbW9yZSB0aGFuIG9uZSBodW5kcmVkIHRob3VzYW5kIG9mIHRoZW0pLCBhbmQgY29tcGVsbGluZyB0aGVtIHRvIHJlc3VtZSB0aGUgdGVycml0b3J5IHdoaWNoIHRoZXkgaGFkIGFiYW5kb25lZCBhbmQgdGhlIGNpdGllcyB3aGljaCB0aGV5IGhhZCBkZXN0cm95ZWQuIEhlIGRpZCB0aGlzIGJlY2F1c2UgaGUgZmVhcmVkIHRoYXQgaWYgdGhlIHRlcnJpdG9yeSBiZWNhbWUgdmFjYW50IHRoZSBHZXJtYW5zIHdvdWxkIGNyb3NzIHRoZSBSaGluZSBhbmQgb2NjdXB5IGl0LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBzZWNvbmQgd2FyLCBkaXJlY3RseSBpbiBkZWZlbmNlIG9mIHRoZSBHYXVscywgd2FzIGFnYWluc3QgdGhlIEdlcm1hbnMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDEuMzAiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkIuIEcuPC90aXRsZT4gaS4gMzAtNTM8L2JpYmw+Ljwvbm90ZT4gYWx0aG91Z2ggcHJldmlvdXNseSwgaW4gUm9tZSwgaGUgaGFkIG1hZGUgdGhlaXIga2luZyBBcmlvdmlzdHVzIGFuIGFsbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWN0aW5nIGFzIGNvbnN1bCwgaW4gNTkgQi5DLjwvbm90ZT4gQnV0IHRoZXkgd2VyZSBpbnRvbGVyYWJsZSBuZWlnaGJvdXJzIG9mIENhZXNhcidzIHN1YmplY3RzLCBhbmQgaWYgYW4gb3Bwb3J0dW5pdHkgcHJlc2VudGVkIGl0c2VsZiBpdCB3YXMgdGhvdWdodCB0aGF0IHRoZXkgd291bGQgbm90IHJlbWFpbiBxdWlldGx5IGluIHRoZWlyIHByZXNlbnQgaG9tZXMsIGJ1dCB3b3VsZCBlbmNyb2FjaCB1cG9uIGFuZCBvY2N1cHkgR2F1bC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U2VlaW5nIHRoYXQgaGlzIG9mZmljZXJzIHdlcmUgaW5jbGluZWQgdG8gYmUgYWZyYWlkLCBhbmQgcGFydGljdWxhcmx5IGFsbCB0aGUgeW91bmcgbWVuIG9mIGhpZ2ggcmFuayB3aG8gaGFkIGNvbWUgb3V0IGludGVuZGluZyB0byBtYWtlIHRoZSBjYW1wYWlnbiB3aXRoIENhZXNhciBhbiBvcHBvcnR1bml0eSBmb3IgaGlnaCBsaXZpbmcgYW5kIG1vbmV5LW1ha2luZywgaGUgY2FsbGVkIHRoZW0gdG9nZXRoZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMS40MCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpLiA0MDwvYmlibD4uPC9ub3RlPiBhbmQgYmFkZSB0aGVtIGJlIG9mZiwgc2luY2UgdGhleSB3ZXJlIHNvIHVubWFubHkgYW5kIGVmZmVtaW5hdGUsIGFuZCBub3QgZm9yY2UgdGhlbXNlbHZlcyB0byBmYWNlIGRhbmdlcjsgYXMgZm9yIGhpbXNlbGYsIGhlIHNhaWQgaGUgd291bGQgdGFrZSB0aGUgdGVudGggbGVnaW9uIGFsb25lIGFuZCBtYXJjaCBhZ2FpbnN0IHRoZSBCYXJiYXJpYW5zOyB0aGUgZW5lbXkgd291bGQgYmUgbm8gYmV0dGVyIGZpZ2h0ZXJzIHRoYW4gdGhlIENpbWJyaSwgYW5kIGhlIGhpbXNlbGYgd2FzIG5vIHdvcnNlIGEgZ2VuZXJhbCB0aGFuIE1hcml1cy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VXBvbiB0aGlzIHRoZSB0ZW50aCBsZWdpb24gc2VudCBhIGRlcHV0YXRpb24gdG8gaGltLCBleHByZXNzaW5nIHRoZWlyIGdyYXRpdHVkZSwgd2hpbGUgdGhlIG90aGVyIGxlZ2lvbnMgcmV2aWxlZCB0aGVpciBvd24gY29tbWFuZGVycywgYW5kIGFsbCB0aGUgYXJteSwgbm93IGZ1bGwgb2YgaW1wZXR1b3VzIGVhZ2VybmVzcywgZm9sbG93ZWQgQ2Flc2FyIG9uIGEgbWFyY2ggb2YgbWFueSBkYXlzLCBhbmQgYXQgbGFzdCBlbmNhbXBlZCB3aXRoaW4gdHdvIGh1bmRyZWQgZnVybG9uZ3Mgb2YgdGhlIGVuZW15LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIHNlY29uZCB3YXIsIGRpcmVjdGx5IGluIGRlZmVuY2Ugb2YgdGhlIEdhdWxzLCB3YXMgYWdhaW5zdCB0aGUgR2VybWFucyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDEuMzAiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpLiAzMC01MzwvYmlibD4uPC9ub3RlPiBhbHRob3VnaCBwcmV2aW91c2x5LCBpbiBSb21lLCBoZSBoYWQgbWFkZSB0aGVpciBraW5nIEFyaW92aXN0dXMgYW4gYWxseS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDEuMzAiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpLiAzMC01MzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpLiAzMC01Mzxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWN0aW5nIGFzIGNvbnN1bCwgaW4gNTkgQi5DLjwvbm90ZT4gQnV0IHRoZXkgd2VyZSBpbnRvbGVyYWJsZSBuZWlnaGJvdXJzIG9mIENhZXNhcidzIHN1YmplY3RzLCBhbmQgaWYgYW4gb3Bwb3J0dW5pdHkgcHJlc2VudGVkIGl0c2VsZiBpdCB3YXMgdGhvdWdodCB0aGF0IHRoZXkgd291bGQgbm90IHJlbWFpbiBxdWlldGx5IGluIHRoZWlyIHByZXNlbnQgaG9tZXMsIGJ1dCB3b3VsZCBlbmNyb2FjaCB1cG9uIGFuZCBvY2N1cHkgR2F1bC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNlZWluZyB0aGF0IGhpcyBvZmZpY2VycyB3ZXJlIGluY2xpbmVkIHRvIGJlIGFmcmFpZCwgYW5kIHBhcnRpY3VsYXJseSBhbGwgdGhlIHlvdW5nIG1lbiBvZiBoaWdoIHJhbmsgd2hvIGhhZCBjb21lIG91dCBpbnRlbmRpbmcgdG8gbWFrZSB0aGUgY2FtcGFpZ24gd2l0aCBDYWVzYXIgYW4gb3Bwb3J0dW5pdHkgZm9yIGhpZ2ggbGl2aW5nIGFuZCBtb25leS1tYWtpbmcsIGhlIGNhbGxlZCB0aGVtIHRvZ2V0aGVyPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAxLjQwIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gaS4gNDA8L2JpYmw+Ljwvbm90ZT4gYW5kIGJhZGUgdGhlbSBiZSBvZmYsIHNpbmNlIHRoZXkgd2VyZSBzbyB1bm1hbmx5IGFuZCBlZmZlbWluYXRlLCBhbmQgbm90IGZvcmNlIHRoZW1zZWx2ZXMgdG8gZmFjZSBkYW5nZXI7IGFzIGZvciBoaW1zZWxmLCBoZSBzYWlkIGhlIHdvdWxkIHRha2UgdGhlIHRlbnRoIGxlZ2lvbiBhbG9uZSBhbmQgbWFyY2ggYWdhaW5zdCB0aGUgQmFyYmFyaWFuczsgdGhlIGVuZW15IHdvdWxkIGJlIG5vIGJldHRlciBmaWdodGVycyB0aGFuIHRoZSBDaW1icmksIGFuZCBoZSBoaW1zZWxmIHdhcyBubyB3b3JzZSBhIGdlbmVyYWwgdGhhbiBNYXJpdXMuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAxLjQwIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gaS4gNDA8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gaS4gNDA8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlVwb24gdGhpcyB0aGUgdGVudGggbGVnaW9uIHNlbnQgYSBkZXB1dGF0aW9uIHRvIGhpbSwgZXhwcmVzc2luZyB0aGVpciBncmF0aXR1ZGUsIHdoaWxlIHRoZSBvdGhlciBsZWdpb25zIHJldmlsZWQgdGhlaXIgb3duIGNvbW1hbmRlcnMsIGFuZCBhbGwgdGhlIGFybXksIG5vdyBmdWxsIG9mIGltcGV0dW91cyBlYWdlcm5lc3MsIGZvbGxvd2VkIENhZXNhciBvbiBhIG1hcmNoIG9mIG1hbnkgZGF5cywgYW5kIGF0IGxhc3QgZW5jYW1wZWQgd2l0aGluIHR3byBodW5kcmVkIGZ1cmxvbmdzIG9mIHRoZSBlbmVteS48cCBjbGFzcz0idHJhbnNsYXRpb24iPk5vdywgdGhlIHZlcnkgYXBwcm9hY2ggb2YgQ2Flc2FyIHNvbWV3aGF0IHNoYXR0ZXJlZCB0aGUgcHVycG9zZSBvZiBBcmlvdmlzdHVzLiBGb3IgaGUgZGlkIG5vdCBleHBlY3QgdGhhdCB0aGUgUm9tYW5zIHdvdWxkIGF0dGFjayB0aGUgR2VybWFucywgd2hvc2Ugb25zZXQgaGUgdGhvdWdodCB0aGV5IGNvdWxkIG5vdCB3aXRoc3RhbmQsIGFuZCBoZSB3YXMgYW1hemVkIGF0IHRoZSBib2xkbmVzcyBvZiBDYWVzYXI7IGJlc2lkZXMsIGhlIHNhdyB0aGF0IGhpcyBvd24gYXJteSB3YXMgZGlzdHVyYmVkLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIG1vcmUsIHRvbywgd2FzIHRoZSBzcGlyaXQgb2YgdGhlIEdlcm1hbnMgYmx1bnRlZCBieSB0aGUgcHJvcGhlY2llcyBvZiB0aGVpciBob2x5IHdvbWVuLCB3aG8gdXNlZCB0byBmb3JldGVsbCB0aGUgZnV0dXJlIGJ5IG9ic2VydmluZyB0aGUgZWRkaWVzIGluIHRoZSByaXZlcnMgYW5kIGJ5IGZpbmRpbmcgc2lnbnMgaW4gdGhlIHdoaXJsaW5ncyBhbmQgc3BsYXNoaW5ncyBvZiB0aGUgd2F0ZXJzLCBhbmQgbm93IGZvcmJhZGUgam9pbmluZyBiYXR0bGUgYmVmb3JlIGEgbmV3IG1vb24gZ2F2ZSBpdHMgbGlnaHQuIFdoZW4gQ2Flc2FyIGxlYXJuZWQgdGhpcywgYW5kIHNhdyB0aGF0IHRoZSBHZXJtYW5zIGtlcHQgcXVpZXQsIGhlIGRlY2lkZWQgdGhhdCBpdCB3YXMgYSBnb29kIHBsYW4gdG8gZW5nYWdlIHRoZW0gd2hpbGUgdGhleSB3ZXJlIG91dCBvZiBoZWFydCwgcmF0aGVyIHRoYW4gdG8gc2l0IHN0aWxsIGFuZCB3YWl0IGZvciB0aGVpciB0aW1lLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5TbywgYnkgYXR0YWNraW5nIHRoZWlyIGVudHJlbmNobWVudHMgYW5kIHRoZSBoaWxscyBvbiB3aGljaCB0aGV5IHdlcmUgZW5jYW1wZWQsIGhlIGlycml0YXRlZCB0aGVtIGFuZCBpbmNpdGVkIHRoZW0gdG8gY29tZSBkb3duIGluIGFuZ2VyIGFuZCBmaWdodCB0aGUgaXNzdWUgb3V0LiBUaGV5IHdlcmUgc2lnbmFsbHkgcm91dGVkLCBhbmQgQ2Flc2FyIHB1cnN1ZWQgdGhlbSBhIGRpc3RhbmNlIG9mIGZvdXIgaHVuZHJlZCBmdXJsb25ncywgYXMgZmFyIGFzIHRoZSBSaGluZSwgYW5kIGZpbGxlZCBhbGwgdGhlIGludGVydmVuaW5nIHBsYWluIHdpdGggZGVhZCBib2RpZXMgYW5kIHNwb2lscy4gQXJpb3Zpc3R1cywgd2l0aCBhIGZldyBmb2xsb3dlcnMsIHN1Y2NlZWRlZCBpbiBjcm9zc2luZyB0aGUgUmhpbmU7IGhpcyBkZWFkIGFyZSBzYWlkIHRvIGhhdmUgYmVlbiBlaWdodHkgdGhvdXNhbmQgaW4gbnVtYmVyLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlN0aWxsIG1vcmUsIHRvbywgd2FzIHRoZSBzcGlyaXQgb2YgdGhlIEdlcm1hbnMgYmx1bnRlZCBieSB0aGUgcHJvcGhlY2llcyBvZiB0aGVpciBob2x5IHdvbWVuLCB3aG8gdXNlZCB0byBmb3JldGVsbCB0aGUgZnV0dXJlIGJ5IG9ic2VydmluZyB0aGUgZWRkaWVzIGluIHRoZSByaXZlcnMgYW5kIGJ5IGZpbmRpbmcgc2lnbnMgaW4gdGhlIHdoaXJsaW5ncyBhbmQgc3BsYXNoaW5ncyBvZiB0aGUgd2F0ZXJzLCBhbmQgbm93IGZvcmJhZGUgam9pbmluZyBiYXR0bGUgYmVmb3JlIGEgbmV3IG1vb24gZ2F2ZSBpdHMgbGlnaHQuIFdoZW4gQ2Flc2FyIGxlYXJuZWQgdGhpcywgYW5kIHNhdyB0aGF0IHRoZSBHZXJtYW5zIGtlcHQgcXVpZXQsIGhlIGRlY2lkZWQgdGhhdCBpdCB3YXMgYSBnb29kIHBsYW4gdG8gZW5nYWdlIHRoZW0gd2hpbGUgdGhleSB3ZXJlIG91dCBvZiBoZWFydCwgcmF0aGVyIHRoYW4gdG8gc2l0IHN0aWxsIGFuZCB3YWl0IGZvciB0aGVpciB0aW1lLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvLCBieSBhdHRhY2tpbmcgdGhlaXIgZW50cmVuY2htZW50cyBhbmQgdGhlIGhpbGxzIG9uIHdoaWNoIHRoZXkgd2VyZSBlbmNhbXBlZCwgaGUgaXJyaXRhdGVkIHRoZW0gYW5kIGluY2l0ZWQgdGhlbSB0byBjb21lIGRvd24gaW4gYW5nZXIgYW5kIGZpZ2h0IHRoZSBpc3N1ZSBvdXQuIFRoZXkgd2VyZSBzaWduYWxseSByb3V0ZWQsIGFuZCBDYWVzYXIgcHVyc3VlZCB0aGVtIGEgZGlzdGFuY2Ugb2YgZm91ciBodW5kcmVkIGZ1cmxvbmdzLCBhcyBmYXIgYXMgdGhlIFJoaW5lLCBhbmQgZmlsbGVkIGFsbCB0aGUgaW50ZXJ2ZW5pbmcgcGxhaW4gd2l0aCBkZWFkIGJvZGllcyBhbmQgc3BvaWxzLiBBcmlvdmlzdHVzLCB3aXRoIGEgZmV3IGZvbGxvd2Vycywgc3VjY2VlZGVkIGluIGNyb3NzaW5nIHRoZSBSaGluZTsgaGlzIGRlYWQgYXJlIHNhaWQgdG8gaGF2ZSBiZWVuIGVpZ2h0eSB0aG91c2FuZCBpbiBudW1iZXIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBhY2hpZXZlbWVudCwgQ2Flc2FyIGxlZnQgaGlzIGZvcmNlcyBhbW9uZyB0aGUgU2VxdWFuaSB0byBzcGVuZCB0aGUgd2ludGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB3aW50ZXIgb2YgNTgtNTcgQi5DLjwvbm90ZT4gd2hpbGUgaGUgaGltc2VsZiwgZGVzaXJvdXMgb2YgZ2l2aW5nIGF0dGVudGlvbiB0byBtYXR0ZXJzIGF0IFJvbWUsIGNhbWUgZG93biB0byBHYXVsIGFsb25nIHRoZSBQbyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMS41NCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpLiA1NDwvYmlibD46IDxmb3JlaWduIGxhbmc9ImxhIj5pcHNlIGluIGNpdGVyaW9yZW0gR2FsbGlhbSBhZCBjb252ZW50dXMgYWdlbmRvcyBwcm9mZWN0dXMgZXN0LjwvZm9yZWlnbj4KICAgICAgICAgICAgPC9ub3RlPiB3aGljaCB3YXMgYSBwYXJ0IG9mIHRoZSBwcm92aW5jZSBhc3NpZ25lZCB0byBoaW07IGZvciB0aGUgcml2ZXIgY2FsbGVkIFJ1Ymljb24gc2VwYXJhdGVzIHRoZSByZXN0IG9mIEl0YWx5IGZyb20gQ2lzYWxwaW5lIEdhdWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgaGUgZml4ZWQgaGlzIHF1YXJ0ZXJzIGFuZCBjYXJyaWVkIG9uIGhpcyBwb2xpdGljYWwgc2NoZW1lcy4gTWFueSBjYW1lIHRvIHNlZSBoaW0sIGFuZCBoZSBnYXZlIGVhY2ggb25lIHdoYXQgaGUgd2FudGVkLCBhbmQgc2VudCBhbGwgYXdheSBpbiBhY3R1YWwgcG9zc2Vzc2lvbiBvZiBzb21lIG9mIGhpcyBmYXZvdXJzIGFuZCBob3BpbmcgZm9yIG1vcmUuIEFuZCBkdXJpbmcgYWxsIHRoZSByZXN0IG9mIHRoZSB0aW1lIG9mIGhpcyBjYW1wYWlnbnMgaW4gR2F1bCwgdW5ub3RpY2VkIGJ5IFBvbXBleSwgaGUgd2FzIGFsdGVybmF0ZWx5IHN1YmR1aW5nIHRoZSBlbmVteSB3aXRoIHRoZSBhcm1zIG9mIHRoZSBjaXRpemVucywgb3IgY2FwdHVyaW5nIGFuZCBzdWJkdWluZyB0aGUgY2l0aXplbnMgd2l0aCB0aGUgbW9uZXkgd2hpY2ggaGUgZ290IGZyb20gdGhlIGVuZW15LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBhY2hpZXZlbWVudCwgQ2Flc2FyIGxlZnQgaGlzIGZvcmNlcyBhbW9uZyB0aGUgU2VxdWFuaSB0byBzcGVuZCB0aGUgd2ludGVyLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHdpbnRlciBvZiA1OC01NyBCLkMuPC9ub3RlPiB3aGlsZSBoZSBoaW1zZWxmLCBkZXNpcm91cyBvZiBnaXZpbmcgYXR0ZW50aW9uIHRvIG1hdHRlcnMgYXQgUm9tZSwgY2FtZSBkb3duIHRvIEdhdWwgYWxvbmcgdGhlIFBvLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMS41NCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGkuIDU0PC9iaWJsPjogPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+aXBzZSBpbiBjaXRlcmlvcmVtIEdhbGxpYW0gYWQgY29udmVudHVzIGFnZW5kb3MgcHJvZmVjdHVzIGVzdC48L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpY2ggd2FzIGEgcGFydCBvZiB0aGUgcHJvdmluY2UgYXNzaWduZWQgdG8gaGltOyBmb3IgdGhlIHJpdmVyIGNhbGxlZCBSdWJpY29uIHNlcGFyYXRlcyB0aGUgcmVzdCBvZiBJdGFseSBmcm9tIENpc2FscGluZSBHYXVsLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMS41NCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGkuIDU0PC9iaWJsPjogPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpLiA1NDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmlwc2UgaW4gY2l0ZXJpb3JlbSBHYWxsaWFtIGFkIGNvbnZlbnR1cyBhZ2VuZG9zIHByb2ZlY3R1cyBlc3QuPC9mb3JlaWduPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUgaGUgZml4ZWQgaGlzIHF1YXJ0ZXJzIGFuZCBjYXJyaWVkIG9uIGhpcyBwb2xpdGljYWwgc2NoZW1lcy4gTWFueSBjYW1lIHRvIHNlZSBoaW0sIGFuZCBoZSBnYXZlIGVhY2ggb25lIHdoYXQgaGUgd2FudGVkLCBhbmQgc2VudCBhbGwgYXdheSBpbiBhY3R1YWwgcG9zc2Vzc2lvbiBvZiBzb21lIG9mIGhpcyBmYXZvdXJzIGFuZCBob3BpbmcgZm9yIG1vcmUuIEFuZCBkdXJpbmcgYWxsIHRoZSByZXN0IG9mIHRoZSB0aW1lIG9mIGhpcyBjYW1wYWlnbnMgaW4gR2F1bCwgdW5ub3RpY2VkIGJ5IFBvbXBleSwgaGUgd2FzIGFsdGVybmF0ZWx5IHN1YmR1aW5nIHRoZSBlbmVteSB3aXRoIHRoZSBhcm1zIG9mIHRoZSBjaXRpemVucywgb3IgY2FwdHVyaW5nIGFuZCBzdWJkdWluZyB0aGUgY2l0aXplbnMgd2l0aCB0aGUgbW9uZXkgd2hpY2ggaGUgZ290IGZyb20gdGhlIGVuZW15LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGhlYXJkIHRoYXQgdGhlIEJlbGdhZSwgd2hvIHdlcmUgdGhlIG1vc3QgcG93ZXJmdWwgb2YgdGhlIEdhdWxzIGFuZCBvY2N1cGllZCB0aGUgdGhpcmQgcGFydCBvZiBhbGwgdGhlaXIgY291bnRyeSwgaGFkIHJldm9sdGVkLCBhbmQgaGFkIGFzc2VtYmxlZCB1bmtub3duIG15cmlhZHMgb2YgYXJtZWQgbWVuLCBoZSB0dXJuZWQgYmFjayBhdCBvbmNlIGFuZCBtYXJjaGVkIHRoaXRoZXIgd2l0aCBncmVhdCBzcGVlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIncyBjYW1wYWlnbiBhZ2FpbnN0IHRoZSBCZWxnYWUsIGluIDU3IEIuQy4sIGlzIGRlc2NyaWJlZCBieSBoaW1zZWxmIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IGlpLiAxLTMzPC9iaWJsPi48L25vdGU+IEhlIGZlbGwgdXBvbiB0aGUgZW5lbXkgYXMgdGhleSB3ZXJlIHBsdW5kZXJpbmcgdGhlIEdhdWxzIHRoYXQgd2VyZSBpbiBhbGxpYW5jZSB3aXRoIFJvbWUsIGFuZCBzbyByb3V0ZWQgYW5kIGRlc3Ryb3llZCB0aGUgbGVhc3Qgc2NhdHRlcmVkIGFuZCBtb3N0IG51bWVyb3VzIG9mIHRoZW0sIGFmdGVyIGEgZGlzZ3JhY2VmdWwgc3RydWdnbGUgb24gdGhlaXIgcGFydCwgdGhhdCB0aGUgUm9tYW5zIGNvdWxkIGNyb3NzIGxha2VzIGFuZCBkZWVwIHJpdmVycyBmb3IgdGhlIG11bHRpdHVkZSBvZiBkZWFkIGJvZGllcyBpbiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BbGwgdGhlIHJlYmVscyB3aG8gZHdlbHQgYWxvbmcgdGhlIG9jZWFuIHN1Ym1pdHRlZCB3aXRob3V0IGEgYmF0dGxlOyBhZ2FpbnN0IHRoZSBOZXJ2aWksIGhvd2V2ZXIsIHRoZSBtb3N0IHNhdmFnZSBhbmQgd2FybGlrZSBvZiB0aGUgcGVvcGxlIGluIHRoZXNlIHBhcnRzLCBDYWVzYXIgbGVkIGhpcyBmb3JjZXMuIFRoZSBOZXJ2aWksIHdobyBkd2VsdCBpbiBkZW5zZSB3b29kcywgYW5kIGhhZCBwbGFjZWQgdGhlaXIgZmFtaWxpZXMgYW5kIHBvc3Nlc3Npb25zIGluIGEgcmVjZXNzIG9mIHRoZSBmb3Jlc3QgYXQgZmFydGhlc3QgcmVtb3ZlIGZyb20gdGhlIGVuZW15LCBhdCBhIHRpbWUgd2hlbiBDYWVzYXIgd2FzIGZvcnRpZnlpbmcgYSBjYW1wIGFuZCBkaWQgbm90IGV4cGVjdCB0aGUgYmF0dGxlLCBmZWxsIHVwb24gaGltIHN1ZGRlbmx5LCBzaXh0eSB0aG91c2FuZCBzdHJvbmcuIFRoZXkgcm91dGVkIGhpcyBjYXZhbHJ5LCBhbmQgc3Vycm91bmRlZCB0aGUgc2V2ZW50aCBhbmQgdHdlbGZ0aCBsZWdpb25zIGFuZCBzbGV3IGFsbCB0aGVpciBjZW50dXJpb25zLCAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgaGFkIG5vdCBDYWVzYXIgc25hdGNoZWQgYSBzaGllbGQsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5TY3V0byBhYiBub3Zpc3NpbWlzIHVuaSBtaWxpdGkgZGV0cmFjdG88L2ZvcmVpZ24+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAyLjI1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gaWkuIDI1LCAyPC9iaWJsPikuPC9ub3RlPiBtYWRlIGhpcyB3YXkgdGhyb3VnaCB0aGUgY29tYmF0YW50cyBpbiBmcm9udCBvZiBoaW0sIGFuZCBodXJsZWQgaGltc2VsZiB1cG9uIHRoZSBCYXJiYXJpYW5zOyBhbmQgaGFkIG5vdCB0aGUgdGVudGggbGVnaW9uLCBhdCBzaWdodCBvZiBoaXMgcGVyaWwsIHJ1biBkb3duIGZyb20gdGhlIGhlaWdodHMgYW5kIGN1dCB0aGUgcmFua3Mgb2YgdGhlIGVuZW15IHRvIHBpZWNlcywgbm90IGEgUm9tYW4sIGl0IGlzIHRob3VnaHQsIHdvdWxkIGhhdmUgc3Vydml2ZWQuIEFzIGl0IHdhcywgaG93ZXZlciwgb3dpbmcgdG8gQ2Flc2FyJ3MgZGFyaW5nLCB0aGV5IGZvdWdodCBiZXlvbmQgdGhlaXIgcG93ZXJzLCBhcyB0aGUgc2F5aW5nIGlzLCBhbmQgZXZlbiB0aGVuIGRpZCBub3Qgcm91dCB0aGUgTmVydmlpLCBidXQgY3V0IHRoZW0gZG93biBhcyB0aGV5IGRlZmVuZGVkIHRoZW1zZWx2ZXM7IGZvciBvdXQgb2Ygc2l4dHkgdGhvdXNhbmQgb25seSBmaXZlIGh1bmRyZWQgYXJlIHNhaWQgdG8gaGF2ZSBjb21lIG9mZiBhbGl2ZSwgYW5kIG9ubHkgdGhyZWUgb2YgdGhlaXIgc2VuYXRvcnMgb3V0IG9mIGZvdXIgaHVuZHJlZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhlIGhlYXJkIHRoYXQgdGhlIEJlbGdhZSwgd2hvIHdlcmUgdGhlIG1vc3QgcG93ZXJmdWwgb2YgdGhlIEdhdWxzIGFuZCBvY2N1cGllZCB0aGUgdGhpcmQgcGFydCBvZiBhbGwgdGhlaXIgY291bnRyeSwgaGFkIHJldm9sdGVkLCBhbmQgaGFkIGFzc2VtYmxlZCB1bmtub3duIG15cmlhZHMgb2YgYXJtZWQgbWVuLCBoZSB0dXJuZWQgYmFjayBhdCBvbmNlIGFuZCBtYXJjaGVkIHRoaXRoZXIgd2l0aCBncmVhdCBzcGVlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhZXNhcidzIGNhbXBhaWduIGFnYWluc3QgdGhlIEJlbGdhZSwgaW4gNTcgQi5DLiwgaXMgZGVzY3JpYmVkIGJ5IGhpbXNlbGYgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAyLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGlpLiAxLTMzPC9iaWJsPi48L25vdGU+IEhlIGZlbGwgdXBvbiB0aGUgZW5lbXkgYXMgdGhleSB3ZXJlIHBsdW5kZXJpbmcgdGhlIEdhdWxzIHRoYXQgd2VyZSBpbiBhbGxpYW5jZSB3aXRoIFJvbWUsIGFuZCBzbyByb3V0ZWQgYW5kIGRlc3Ryb3llZCB0aGUgbGVhc3Qgc2NhdHRlcmVkIGFuZCBtb3N0IG51bWVyb3VzIG9mIHRoZW0sIGFmdGVyIGEgZGlzZ3JhY2VmdWwgc3RydWdnbGUgb24gdGhlaXIgcGFydCwgdGhhdCB0aGUgUm9tYW5zIGNvdWxkIGNyb3NzIGxha2VzIGFuZCBkZWVwIHJpdmVycyBmb3IgdGhlIG11bHRpdHVkZSBvZiBkZWFkIGJvZGllcyBpbiB0aGVtLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gMi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpaS4gMS0zMzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpaS4gMS0zMzwvdHJhbnNsYXRpb24+"
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGUgcmViZWxzIHdobyBkd2VsdCBhbG9uZyB0aGUgb2NlYW4gc3VibWl0dGVkIHdpdGhvdXQgYSBiYXR0bGU7IGFnYWluc3QgdGhlIE5lcnZpaSwgaG93ZXZlciwgdGhlIG1vc3Qgc2F2YWdlIGFuZCB3YXJsaWtlIG9mIHRoZSBwZW9wbGUgaW4gdGhlc2UgcGFydHMsIENhZXNhciBsZWQgaGlzIGZvcmNlcy4gVGhlIE5lcnZpaSwgd2hvIGR3ZWx0IGluIGRlbnNlIHdvb2RzLCBhbmQgaGFkIHBsYWNlZCB0aGVpciBmYW1pbGllcyBhbmQgcG9zc2Vzc2lvbnMgaW4gYSByZWNlc3Mgb2YgdGhlIGZvcmVzdCBhdCBmYXJ0aGVzdCByZW1vdmUgZnJvbSB0aGUgZW5lbXksIGF0IGEgdGltZSB3aGVuIENhZXNhciB3YXMgZm9ydGlmeWluZyBhIGNhbXAgYW5kIGRpZCBub3QgZXhwZWN0IHRoZSBiYXR0bGUsIGZlbGwgdXBvbiBoaW0gc3VkZGVubHksIHNpeHR5IHRob3VzYW5kIHN0cm9uZy4gVGhleSByb3V0ZWQgaGlzIGNhdmFscnksIGFuZCBzdXJyb3VuZGVkIHRoZSBzZXZlbnRoIGFuZCB0d2VsZnRoIGxlZ2lvbnMgYW5kIHNsZXcgYWxsIHRoZWlyIGNlbnR1cmlvbnMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYWQgbm90IENhZXNhciBzbmF0Y2hlZCBhIHNoaWVsZCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5TY3V0byBhYiBub3Zpc3NpbWlzIHVuaSBtaWxpdGkgZGV0cmFjdG88L2ZvcmVpZ24+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDIuMjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGlpLiAyNSwgMjwvYmlibD4pLjwvbm90ZT4gbWFkZSBoaXMgd2F5IHRocm91Z2ggdGhlIGNvbWJhdGFudHMgaW4gZnJvbnQgb2YgaGltLCBhbmQgaHVybGVkIGhpbXNlbGYgdXBvbiB0aGUgQmFyYmFyaWFuczsgYW5kIGhhZCBub3QgdGhlIHRlbnRoIGxlZ2lvbiwgYXQgc2lnaHQgb2YgaGlzIHBlcmlsLCBydW4gZG93biBmcm9tIHRoZSBoZWlnaHRzIGFuZCBjdXQgdGhlIHJhbmtzIG9mIHRoZSBlbmVteSB0byBwaWVjZXMsIG5vdCBhIFJvbWFuLCBpdCBpcyB0aG91Z2h0LCB3b3VsZCBoYXZlIHN1cnZpdmVkLiBBcyBpdCB3YXMsIGhvd2V2ZXIsIG93aW5nIHRvIENhZXNhcidzIGRhcmluZywgdGhleSBmb3VnaHQgYmV5b25kIHRoZWlyIHBvd2VycywgYXMgdGhlIHNheWluZyBpcywgYW5kIGV2ZW4gdGhlbiBkaWQgbm90IHJvdXQgdGhlIE5lcnZpaSwgYnV0IGN1dCB0aGVtIGRvd24gYXMgdGhleSBkZWZlbmRlZCB0aGVtc2VsdmVzOyBmb3Igb3V0IG9mIHNpeHR5IHRob3VzYW5kIG9ubHkgZml2ZSBodW5kcmVkIGFyZSBzYWlkIHRvIGhhdmUgY29tZSBvZmYgYWxpdmUsIGFuZCBvbmx5IHRocmVlIG9mIHRoZWlyIHNlbmF0b3JzIG91dCBvZiBmb3VyIGh1bmRyZWQuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+U2N1dG8gYWIgbm92aXNzaW1pcyB1bmkgbWlsaXRpIGRldHJhY3RvPC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAyLjI1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpaS4gMjUsIDI8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGlpLiAyNSwgMjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbiBzZW5hdGUsIG9uIGxlYXJuaW5nIG9mIHRoZXNlIHN1Y2Nlc3NlcywgZGVjcmVlZCBzYWNyaWZpY2VzIHRvIHRoZSBnb2RzIGFuZCBjZXNzYXRpb24gZnJvbSBidXNpbmVzcywgd2l0aCBmZXN0aXZhbCwgZm9yIGZpZnRlZW4gZGF5cywgYSBncmVhdGVyIG51bWJlciB0aGFuIGZvciBhbnkgdmljdG9yeSBiZWZvcmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5RdW9kIGFudGUgaWQgdGVtcHVzIGFjY2lkaXQgbnVsbGk8L2ZvcmVpZ24+ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAyLjM1IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CLiBHLjwvdGl0bGU+IGlpLiAzNSwgNDwvYmlibD4pLjwvbm90ZT4gRm9yIHRoZSBkYW5nZXIgd2FzIHNlZW4gdG8gaGF2ZSBiZWVuIGdyZWF0IHdoZW4gc28gbWFueSBuYXRpb25zIGF0IG9uY2UgaGFkIGJyb2tlbiBvdXQgaW4gcmV2b2x0LCBhbmQgYmVjYXVzZSBDYWVzYXIgd2FzIHRoZSB2aWN0b3IsIHRoZSBnb29kIHdpbGwgb2YgdGhlIG11bHRpdHVkZSB0b3dhcmRzIGhpbSBtYWRlIGhpcyB2aWN0b3J5IG1vcmUgc3BsZW5kaWQuIENhZXNhciBoaW1zZWxmLCBhZnRlciBzZXR0bGluZyBtYXR0ZXJzIGluIEdhdWwsIGFnYWluIHNwZW50IHRoZSB3aW50ZXI8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj41Ny01NiBCLkMuIENmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDUxLjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGxpLiAzPC9iaWJsPiBmLjwvbm90ZT4gaW4gdGhlIHJlZ2lvbnMgYWxvbmcgdGhlIFBvLCBjYXJyeWluZyBvdXQgaGlzIHBsYW5zIGF0IFJvbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3Qgb25seSBkaWQgdGhlIGNhbmRpZGF0ZXMgZm9yIG9mZmljZSB0aGVyZSBlbmpveSBoaXMgYXNzaXN0YW5jZSwgYW5kIHdpbiB0aGVpciBlbGVjdGlvbnMgYnkgY29ycnVwdGluZyB0aGUgcGVvcGxlIHdpdGggbW9uZXkgZnJvbSBoaW0sIGFuZCBkbyBldmVyeXRoaW5nIHdoaWNoIHdhcyBsaWtlbHkgdG8gZW5oYW5jZSBoaXMgcG93ZXIsIGJ1dCBhbHNvIG1vc3Qgb2YgdGhlIG1lbiBvZiBoaWdoZXN0IHJhbmsgYW5kIGdyZWF0ZXN0IGluZmx1ZW5jZSBjYW1lIHRvIHNlZSBoaW0gYXQgTHVjYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBBcHJpbCBvZiA1NiBCLkMuPC9ub3RlPiBpbmNsdWRpbmcgUG9tcGV5LCBDcmFzc3VzLCBBcHBpdXMgdGhlIGdvdmVybm9yIG9mIFNhcmRpbmlhLCBhbmQgTmVwb3MgdGhlIHByb2NvbnN1bCBvZiBTcGFpbiwgc28gdGhhdCB0aGVyZSB3ZXJlIGEgaHVuZHJlZCBhbmQgdHdlbnR5IGxpY3RvcnMgaW4gdGhlIHBsYWNlIGFuZCBtb3JlIHRoYW4gdHdvIGh1bmRyZWQgc2VuYXRvcnMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFuIHNlbmF0ZSwgb24gbGVhcm5pbmcgb2YgdGhlc2Ugc3VjY2Vzc2VzLCBkZWNyZWVkIHNhY3JpZmljZXMgdG8gdGhlIGdvZHMgYW5kIGNlc3NhdGlvbiBmcm9tIGJ1c2luZXNzLCB3aXRoIGZlc3RpdmFsLCBmb3IgZmlmdGVlbiBkYXlzLCBhIGdyZWF0ZXIgbnVtYmVyIHRoYW4gZm9yIGFueSB2aWN0b3J5IGJlZm9yZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5RdW9kIGFudGUgaWQgdGVtcHVzIGFjY2lkaXQgbnVsbGk8L2ZvcmVpZ24+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDIuMzUiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpaS4gMzUsIDQ8L2JpYmw+KS48L25vdGU+IEZvciB0aGUgZGFuZ2VyIHdhcyBzZWVuIHRvIGhhdmUgYmVlbiBncmVhdCB3aGVuIHNvIG1hbnkgbmF0aW9ucyBhdCBvbmNlIGhhZCBicm9rZW4gb3V0IGluIHJldm9sdCwgYW5kIGJlY2F1c2UgQ2Flc2FyIHdhcyB0aGUgdmljdG9yLCB0aGUgZ29vZCB3aWxsIG9mIHRoZSBtdWx0aXR1ZGUgdG93YXJkcyBoaW0gbWFkZSBoaXMgdmljdG9yeSBtb3JlIHNwbGVuZGlkLiBDYWVzYXIgaGltc2VsZiwgYWZ0ZXIgc2V0dGxpbmcgbWF0dGVycyBpbiBHYXVsLCBhZ2FpbiBzcGVudCB0aGUgd2ludGVyPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UXVvZCBhbnRlIGlkIHRlbXB1cyBhY2NpZGl0IG51bGxpPC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAyLjM1IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gaWkuIDM1LCA0PC9iaWJsPikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpaS4gMzUsIDQ8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjU3LTU2IEIuQy4gQ2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1MS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGxpLiAzPC9iaWJsPiBmLjwvbm90ZT4gaW4gdGhlIHJlZ2lvbnMgYWxvbmcgdGhlIFBvLCBjYXJyeWluZyBvdXQgaGlzIHBsYW5zIGF0IFJvbWUuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTEuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsaS4gMzwvYmlibD4gZi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbGkuIDM8L3RyYW5zbGF0aW9uPg=="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3Qgb25seSBkaWQgdGhlIGNhbmRpZGF0ZXMgZm9yIG9mZmljZSB0aGVyZSBlbmpveSBoaXMgYXNzaXN0YW5jZSwgYW5kIHdpbiB0aGVpciBlbGVjdGlvbnMgYnkgY29ycnVwdGluZyB0aGUgcGVvcGxlIHdpdGggbW9uZXkgZnJvbSBoaW0sIGFuZCBkbyBldmVyeXRoaW5nIHdoaWNoIHdhcyBsaWtlbHkgdG8gZW5oYW5jZSBoaXMgcG93ZXIsIGJ1dCBhbHNvIG1vc3Qgb2YgdGhlIG1lbiBvZiBoaWdoZXN0IHJhbmsgYW5kIGdyZWF0ZXN0IGluZmx1ZW5jZSBjYW1lIHRvIHNlZSBoaW0gYXQgTHVjYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIEFwcmlsIG9mIDU2IEIuQy48L25vdGU+IGluY2x1ZGluZyBQb21wZXksIENyYXNzdXMsIEFwcGl1cyB0aGUgZ292ZXJub3Igb2YgU2FyZGluaWEsIGFuZCBOZXBvcyB0aGUgcHJvY29uc3VsIG9mIFNwYWluLCBzbyB0aGF0IHRoZXJlIHdlcmUgYSBodW5kcmVkIGFuZCB0d2VudHkgbGljdG9ycyBpbiB0aGUgcGxhY2UgYW5kIG1vcmUgdGhhbiB0d28gaHVuZHJlZCBzZW5hdG9ycy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaGV5IGhlbGQgYSBjb3VuY2lsIGFuZCBzZXR0bGVkIG1hdHRlcnMgb24gdGhlIGZvbGxvd2luZyBiYXNpcy4gUG9tcGV5IGFuZCBDcmFzc3VzIHdlcmUgdG8gYmUgZWxlY3RlZCBjb25zdWxzIGZvciB0aGUgZW5zdWluZyB5ZWFyLCBhbmQgQ2Flc2FyIHdhcyB0byBoYXZlIG1vbmV5IHZvdGVkIGhpbSwgYmVzaWRlcyBhbm90aGVyIGZpdmUgeWVhcnMgaW4gaGlzIHByb3ZpbmNpYWwgY29tbWFuZC4gVGhpcyBzZWVtZWQgdmVyeSBzdHJhbmdlIHRvIG1lbiBvZiB1bmRlcnN0YW5kaW5nLiBGb3IgdGhvc2Ugd2hvIHdlcmUgZ2V0dGluZyBzbyBtdWNoIG1vbmV5IGZyb20gQ2Flc2FyIHVyZ2VkIHRoZSBzZW5hdGUgdG8gZ2l2ZSBoaW0gbW9uZXkgYXMgaWYgaGUgaGFkIG5vbmUsIG5heSByYXRoZXIsIHRoZXkgZm9yY2VkIGl0IHRvIGRvIHNvLCB0aG91Z2ggaXQgZ3JvYW5lZCBvdmVyIGl0cyBvd24gZGVjcmVlcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Q2F0bywgaW5kZWVkLCB3YXMgbm90IHRoZXJlLCBmb3IgaGUgaGFkIHB1cnBvc2VseSBiZWVuIHNlbnQgb3V0IG9mIHRoZSB3YXkgb24gYSBtaXNzaW9uIHRvIEN5cHJ1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiAzNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkNhdG8gTWlub3I8L3RpdGxlPiwgeHh4aXY8L2JpYmw+Ljwvbm90ZT4gYW5kIEZhdm9uaXVzLCB3aG8gd2FzIGFuIGFyZGVudCBmb2xsb3dlciBvZiBDYXRvLCBmaW5kaW5nIGhpbXNlbGYgdW5hYmxlIHRvIGFjY29tcGxpc2ggYW55dGhpbmcgYnkgaGlzIG9wcG9zaXRpb24sIGJvdW5kZWQgb3V0IG9mIGRvb3JzIGFuZCBjbGFtb3VyZWQgdG8gdGhlIHBvcHVsYWNlLiBCdXQgbm8gb25lIGdhdmUgaGVlZCB0byBoaW0sIGZvciBzb21lIHdlcmUgaW4gYXdlIG9mIFBvbXBleSBhbmQgQ3Jhc3N1cywgYW5kIG1vc3Qgd2FudGVkIHRvIHBsZWFzZSBDYWVzYXIsIGxpdmVkIGluIGhvcGVzIG9mIGhpcyBmYXZvdXJzLCBhbmQgc28ga2VwdCBxdWlldC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXkgaGVsZCBhIGNvdW5jaWwgYW5kIHNldHRsZWQgbWF0dGVycyBvbiB0aGUgZm9sbG93aW5nIGJhc2lzLiBQb21wZXkgYW5kIENyYXNzdXMgd2VyZSB0byBiZSBlbGVjdGVkIGNvbnN1bHMgZm9yIHRoZSBlbnN1aW5nIHllYXIsIGFuZCBDYWVzYXIgd2FzIHRvIGhhdmUgbW9uZXkgdm90ZWQgaGltLCBiZXNpZGVzIGFub3RoZXIgZml2ZSB5ZWFycyBpbiBoaXMgcHJvdmluY2lhbCBjb21tYW5kLiBUaGlzIHNlZW1lZCB2ZXJ5IHN0cmFuZ2UgdG8gbWVuIG9mIHVuZGVyc3RhbmRpbmcuIEZvciB0aG9zZSB3aG8gd2VyZSBnZXR0aW5nIHNvIG11Y2ggbW9uZXkgZnJvbSBDYWVzYXIgdXJnZWQgdGhlIHNlbmF0ZSB0byBnaXZlIGhpbSBtb25leSBhcyBpZiBoZSBoYWQgbm9uZSwgbmF5IHJhdGhlciwgdGhleSBmb3JjZWQgaXQgdG8gZG8gc28sIHRob3VnaCBpdCBncm9hbmVkIG92ZXIgaXRzIG93biBkZWNyZWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['21.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkNhdG8sIGluZGVlZCwgd2FzIG5vdCB0aGVyZSwgZm9yIGhlIGhhZCBwdXJwb3NlbHkgYmVlbiBzZW50IG91dCBvZiB0aGUgd2F5IG9uIGEgbWlzc2lvbiB0byBDeXBydXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhdC4gTWkuIDM0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DYXRvIE1pbm9yPC90aXRsZT4sIHh4eGl2PC9iaWJsPi48L25vdGU+IGFuZCBGYXZvbml1cywgd2hvIHdhcyBhbiBhcmRlbnQgZm9sbG93ZXIgb2YgQ2F0bywgZmluZGluZyBoaW1zZWxmIHVuYWJsZSB0byBhY2NvbXBsaXNoIGFueXRoaW5nIGJ5IGhpcyBvcHBvc2l0aW9uLCBib3VuZGVkIG91dCBvZiBkb29ycyBhbmQgY2xhbW91cmVkIHRvIHRoZSBwb3B1bGFjZS4gQnV0IG5vIG9uZSBnYXZlIGhlZWQgdG8gaGltLCBmb3Igc29tZSB3ZXJlIGluIGF3ZSBvZiBQb21wZXkgYW5kIENyYXNzdXMsIGFuZCBtb3N0IHdhbnRlZCB0byBwbGVhc2UgQ2Flc2FyLCBsaXZlZCBpbiBob3BlcyBvZiBoaXMgZmF2b3VycywgYW5kIHNvIGtlcHQgcXVpZXQuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gMzQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWlub3I8L3RpdGxlPiwgeHh4aXY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWlub3I8L3RpdGxlPiwgeHh4aXY8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5PbiByZXR1cm5pbmcgdG8gaGlzIGZvcmNlcyBpbiBHYXVsLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDU1IEIuQy4gUGx1dGFyY2ggcGFzc2VzIG92ZXIgQ2Flc2FyJ3MgY2FtcGFpZ24gb2YgNTYgQi5DLiBpbiBHYXVsLCBmb2xsb3dpbmcgdGhlIGNvbmZlcmVuY2UgYXQgTHVjYS4gQ2Flc2FyIGRlc2NyaWJlcyBpdCBpbiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpaWk8L2JpYmw+Ljwvbm90ZT4gQ2Flc2FyIGZvdW5kIGEgY29uc2lkZXJhYmxlIHdhciBpbiB0aGUgY291bnRyeSwgc2luY2UgdHdvIGdyZWF0IEdlcm1hbiBuYXRpb25zIGhhZCBqdXN0IGNyb3NzZWQgdGhlIFJoaW5lIHRvIHBvc3Nlc3MgdGhlIGxhbmQsIG9uZSBjYWxsZWQgdGhlIFVzaXBlcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIgY2FsbHMgdGhlbSBVc2lwZXRlcyBhbmQgVGVuY3RlcmkgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHIDwvdGl0bGU+aXYuIDE8L2JpYmw+KS48L25vdGU+IHRoZSBvdGhlciB0aGUgVGVudGVyaXRhZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q29uY2VybmluZyB0aGUgYmF0dGxlIHdoaWNoIHdhcyBmb3VnaHQgd2l0aCB0aGVtIENhZXNhciBzYXlzIGluIGhpcyAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8dGl0bGU+Q29tbWVudGFyaWVzPC90aXRsZT4KICAgICAgICAgICAgPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNC4xMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IGl2LiAxMzwvYmlibD4uPC9ub3RlPiB0aGF0IHRoZSBCYXJiYXJpYW5zLCB3aGlsZSB0cmVhdGluZyB3aXRoIGhpbSB1bmRlciBhIHRydWNlLCBhdHRhY2tlZCBvbiB0aGVpciBtYXJjaCBhbmQgdGhlcmVmb3JlIHJvdXRlZCBoaXMgZml2ZSB0aG91c2FuZCBjYXZhbHJ5IHdpdGggdGhlaXIgZWlnaHQgaHVuZHJlZCwgc2luY2UgaGlzIG1lbiB3ZXJlIHRha2VuIG9mZiB0aGVpciBndWFyZDsgdGhhdCB0aGV5IHRoZW4gc2VudCBvdGhlciBlbnZveXMgdG8gaGltIHdobyB0cmllZCB0byBkZWNlaXZlIGhpbSBhZ2FpbiwgYnV0IGhlIGhlbGQgdGhlbSBmYXN0IGFuZCBsZWQgaGlzIGFybXkgYWdhaW5zdCB0aGUgQmFyYmFyaWFucywgY29uc2lkZXJpbmcgdGhhdCBnb29kIGZhaXRoIHRvd2FyZHMgc3VjaCBmYWl0aGxlc3MgYnJlYWtlcnMgb2YgdHJ1Y2VzIHdhcyBmb2xseS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFRhbnVzaXVzIHNheXMgdGhhdCB3aGVuIHRoZSBzZW5hdGUgdm90ZWQgc2FjcmlmaWNlcyBvZiByZWpvaWNpbmcgb3ZlciB0aGUgdmljdG9yeSwgQ2F0byBwcm9ub3VuY2VkIHRoZSBvcGluaW9uIHRoYXQgdGhleSBvdWdodCB0byBkZWxpdmVyIHVwIENhZXNhciB0byB0aGUgQmFyYmFyaWFucywgdGh1cyBwdXJnaW5nIGF3YXkgdGhlIHZpb2xhdGlvbiBvZiB0aGUgdHJ1Y2UgaW4gYmVoYWxmIG9mIHRoZSBjaXR5LCBhbmQgdHVybmluZyB0aGUgY3Vyc2UgdGhlcmVmb3Igb24gdGhlIGd1aWx0eSBtYW4uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gcmV0dXJuaW5nIHRvIGhpcyBmb3JjZXMgaW4gR2F1bCw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDU1IEIuQy4gUGx1dGFyY2ggcGFzc2VzIG92ZXIgQ2Flc2FyJ3MgY2FtcGFpZ24gb2YgNTYgQi5DLiBpbiBHYXVsLCBmb2xsb3dpbmcgdGhlIGNvbmZlcmVuY2UgYXQgTHVjYS4gQ2Flc2FyIGRlc2NyaWJlcyBpdCBpbiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gaWlpPC9iaWJsPi48L25vdGU+IENhZXNhciBmb3VuZCBhIGNvbnNpZGVyYWJsZSB3YXIgaW4gdGhlIGNvdW50cnksIHNpbmNlIHR3byBncmVhdCBHZXJtYW4gbmF0aW9ucyBoYWQganVzdCBjcm9zc2VkIHRoZSBSaGluZSB0byBwb3NzZXNzIHRoZSBsYW5kLCBvbmUgY2FsbGVkIHRoZSBVc2lwZXMsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiAzLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGlpaTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpaWk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhZXNhciBjYWxscyB0aGVtIFVzaXBldGVzIGFuZCBUZW5jdGVyaSAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHIDwvdGl0bGU+aXYuIDE8L2JpYmw+KS48L25vdGU+IHRoZSBvdGhlciB0aGUgVGVudGVyaXRhZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcgPC90aXRsZT5pdi4gMTwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcgPC90aXRsZT5pdi4gMTwvdHJhbnNsYXRpb24+"
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNvbmNlcm5pbmcgdGhlIGJhdHRsZSB3aGljaCB3YXMgZm91Z2h0IHdpdGggdGhlbSBDYWVzYXIgc2F5cyBpbiBoaXMgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db21tZW50YXJpZXM8L3RpdGxlPgogICAgICAgICAgICA8L3E+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvbW1lbnRhcmllczwvdGl0bGU+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNC4xMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gaXYuIDEzPC9iaWJsPi48L25vdGU+IHRoYXQgdGhlIEJhcmJhcmlhbnMsIHdoaWxlIHRyZWF0aW5nIHdpdGggaGltIHVuZGVyIGEgdHJ1Y2UsIGF0dGFja2VkIG9uIHRoZWlyIG1hcmNoIGFuZCB0aGVyZWZvcmUgcm91dGVkIGhpcyBmaXZlIHRob3VzYW5kIGNhdmFscnkgd2l0aCB0aGVpciBlaWdodCBodW5kcmVkLCBzaW5jZSBoaXMgbWVuIHdlcmUgdGFrZW4gb2ZmIHRoZWlyIGd1YXJkOyB0aGF0IHRoZXkgdGhlbiBzZW50IG90aGVyIGVudm95cyB0byBoaW0gd2hvIHRyaWVkIHRvIGRlY2VpdmUgaGltIGFnYWluLCBidXQgaGUgaGVsZCB0aGVtIGZhc3QgYW5kIGxlZCBoaXMgYXJteSBhZ2FpbnN0IHRoZSBCYXJiYXJpYW5zLCBjb25zaWRlcmluZyB0aGF0IGdvb2QgZmFpdGggdG93YXJkcyBzdWNoIGZhaXRobGVzcyBicmVha2VycyBvZiB0cnVjZXMgd2FzIGZvbGx5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNC4xMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gaXYuIDEzPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGl2LiAxMzwvdHJhbnNsYXRpb24+"
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBUYW51c2l1cyBzYXlzIHRoYXQgd2hlbiB0aGUgc2VuYXRlIHZvdGVkIHNhY3JpZmljZXMgb2YgcmVqb2ljaW5nIG92ZXIgdGhlIHZpY3RvcnksIENhdG8gcHJvbm91bmNlZCB0aGUgb3BpbmlvbiB0aGF0IHRoZXkgb3VnaHQgdG8gZGVsaXZlciB1cCBDYWVzYXIgdG8gdGhlIEJhcmJhcmlhbnMsIHRodXMgcHVyZ2luZyBhd2F5IHRoZSB2aW9sYXRpb24gb2YgdGhlIHRydWNlIGluIGJlaGFsZiBvZiB0aGUgY2l0eSwgYW5kIHR1cm5pbmcgdGhlIGN1cnNlIHRoZXJlZm9yIG9uIHRoZSBndWlsdHkgbWFuLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2YgdGhvc2Ugd2hvIGhhZCBjcm9zc2VkIHRoZSBSaGluZSBpbnRvIEdhdWwgZm91ciBodW5kcmVkIHRob3VzYW5kIHdlcmUgY3V0IHRvIHBpZWNlcywgYW5kIHRoZSBmZXcgd2hvIHN1Y2NlZWRlZCBpbiBtYWtpbmcgdGhlaXIgd2F5IGJhY2sgd2VyZSByZWNlaXZlZCBieSB0aGUgU3VnYW1icmksIGEgR2VybWFuIG5hdGlvbi4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGFjdGlvbiBDYWVzYXIgbWFkZSBhIGdyb3VuZCBvZiBjb21wbGFpbnQgYWdhaW5zdCB0aGUgU3VnYW1icmksIGFuZCBiZXNpZGVzLCBoZSBjb3ZldGVkIHRoZSBmYW1lIG9mIGJlaW5nIHRoZSBmaXJzdCBtYW4gdG8gY3Jvc3MgdGhlIFJoaW5lIHdpdGggYW4gYXJteS4gSGUgdGhlcmVmb3JlIGJlZ2FuIHRvIGJyaWRnZSB0aGUgcml2ZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDQuMTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gRy48L3RpdGxlPiBpdi4gMTYtMTk8L2JpYmw+Ljwvbm90ZT4gYWx0aG91Z2ggaXQgd2FzIHZlcnkgYnJvYWQsIGFuZCBhdCB0aGlzIHBvaW50IGluIGl0cyBjb3Vyc2UgZXNwZWNpYWxseSBzd29sbGVuLCByb3VnaCwgYW5kIGltcGV0dW91cywgYW5kIHdpdGggdGhlIHRydW5rcyBhbmQgYnJhbmNoZXMgb2YgdHJlZXMgd2hpY2ggaXQgYm9yZSBkb3duIHN0cmVhbSBrZXB0IHNtaXRpbmcgYW5kIHRlYXJpbmcgYXdheSB0aGUgc3VwcG9ydHMgb2YgaGlzIGJyaWRnZS4gPHRpdGxlPkJ1dCBDYWVzYXIgY2F1Z2h0IHVwIHRoZXNlIHRydW5rcyBhbmQgYnJhbmNoZXMgd2l0aCBidWx3YXJrcyBvZiBncmVhdCB0aW1iZXJzIHBsYW50ZWQgYWNyb3NzIHRoZSBzdHJlYW0sIGFuZCBoYXZpbmcgdGh1cyBicmlkbGVkIGFuZCB5b2tlZCB0aGUgZGFzaGluZyBjdXJyZW50LCBoZSBicm91Z2h0IGhpcyBicmlkZ2XigJRzaWdodCBiZXlvbmQgYWxsIGNyZWRlbmNl4oCUdG8gY29tcGxldGlvbiBpbiB0ZW4gZGF5cy48L3RpdGxlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYWN0aW9uIENhZXNhciBtYWRlIGEgZ3JvdW5kIG9mIGNvbXBsYWludCBhZ2FpbnN0IHRoZSBTdWdhbWJyaSwgYW5kIGJlc2lkZXMsIGhlIGNvdmV0ZWQgdGhlIGZhbWUgb2YgYmVpbmcgdGhlIGZpcnN0IG1hbiB0byBjcm9zcyB0aGUgUmhpbmUgd2l0aCBhbiBhcm15LiBIZSB0aGVyZWZvcmUgYmVnYW4gdG8gYnJpZGdlIHRoZSByaXZlciw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDQuMTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGl2LiAxNi0xOTwvYmlibD4uPC9ub3RlPiBhbHRob3VnaCBpdCB3YXMgdmVyeSBicm9hZCwgYW5kIGF0IHRoaXMgcG9pbnQgaW4gaXRzIGNvdXJzZSBlc3BlY2lhbGx5IHN3b2xsZW4sIHJvdWdoLCBhbmQgaW1wZXR1b3VzLCBhbmQgd2l0aCB0aGUgdHJ1bmtzIGFuZCBicmFuY2hlcyBvZiB0cmVlcyB3aGljaCBpdCBib3JlIGRvd24gc3RyZWFtIGtlcHQgc21pdGluZyBhbmQgdGVhcmluZyBhd2F5IHRoZSBzdXBwb3J0cyBvZiBoaXMgYnJpZGdlLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDQuMTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+IGl2LiAxNi0xOTwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpdi4gMTYtMTk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CdXQgQ2Flc2FyIGNhdWdodCB1cCB0aGVzZSB0cnVua3MgYW5kIGJyYW5jaGVzIHdpdGggYnVsd2Fya3Mgb2YgZ3JlYXQgdGltYmVycyBwbGFudGVkIGFjcm9zcyB0aGUgc3RyZWFtLCBhbmQgaGF2aW5nIHRodXMgYnJpZGxlZCBhbmQgeW9rZWQgdGhlIGRhc2hpbmcgY3VycmVudCwgaGUgYnJvdWdodCBoaXMgYnJpZGdl4oCUc2lnaHQgYmV5b25kIGFsbCBjcmVkZW5jZeKAlHRvIGNvbXBsZXRpb24gaW4gdGVuIGRheXMuPC90aXRsZT4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbm93IHRocmV3IGhpcyBmb3JjZXMgYWNyb3NzIHRoZSByaXZlci4gTm8gb25lIHZlbnR1cmVkIHRvIG9wcG9zZSBoaW0sIGJ1dCBldmVuIHRoZSBTdWV2aSwgd2hvIHdlcmUgdGhlIGZvcmVtb3N0IG5hdGlvbiBvZiB0aGUgR2VybWFucywgYmVzdG93ZWQgdGhlbXNlbHZlcyBhbmQgdGhlaXIgYmVsb25naW5ncyBpbiBkZWVwIGFuZCB3b29keSBkZWZpbGVzLiBDYWVzYXIgcmF2YWdlZCB0aGUgY291bnRyeSBvZiB0aGUgZW5lbXkgd2l0aCBmaXJlLCBnYXZlIGVuY291cmFnZW1lbnQgdG8gdGhlIGNvbnN0YW50IGZyaWVuZHMgb2YgUm9tZSwgYW5kIHRoZW4gcmV0aXJlZCBhZ2FpbiBpbnRvIEdhdWwsIGhhdmluZyBzcGVudCBlaWdodGVlbiBkYXlzIGluIEdlcm1hbnkuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbm93IHRocmV3IGhpcyBmb3JjZXMgYWNyb3NzIHRoZSByaXZlci4gTm8gb25lIHZlbnR1cmVkIHRvIG9wcG9zZSBoaW0sIGJ1dCBldmVuIHRoZSBTdWV2aSwgd2hvIHdlcmUgdGhlIGZvcmVtb3N0IG5hdGlvbiBvZiB0aGUgR2VybWFucywgYmVzdG93ZWQgdGhlbXNlbHZlcyBhbmQgdGhlaXIgYmVsb25naW5ncyBpbiBkZWVwIGFuZCB3b29keSBkZWZpbGVzLiBDYWVzYXIgcmF2YWdlZCB0aGUgY291bnRyeSBvZiB0aGUgZW5lbXkgd2l0aCBmaXJlLCBnYXZlIGVuY291cmFnZW1lbnQgdG8gdGhlIGNvbnN0YW50IGZyaWVuZHMgb2YgUm9tZSwgYW5kIHRoZW4gcmV0aXJlZCBhZ2FpbiBpbnRvIEdhdWwsIGhhdmluZyBzcGVudCBlaWdodGVlbiBkYXlzIGluIEdlcm1hbnkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGlzIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgQnJpdGFubmkgd2FzIGNlbGVicmF0ZWQgZm9yIGl0cyBkYXJpbmcuIEZvciBoZSB3YXMgdGhlIGZpcnN0IHRvIGxhdW5jaCBhIGZsZWV0IHVwb24gdGhlIHdlc3Rlcm4gb2NlYW4gYW5kIHRvIHNhaWwgdGhyb3VnaCB0aGUgQXRsYW50aWMgc2VhIGNhcnJ5aW5nIGFuIGFybXkgdG8gd2FnZSB3YXIuIFRoZSBpc2xhbmQgd2FzIG9mIGluY3JlZGlibGUgbWFnbml0dWRlLCBhbmQgZnVybmlzaGVkIG11Y2ggbWF0dGVyIG9mIGRpc3B1dGUgdG8gbXVsdGl0dWRlcyBvZiB3cml0ZXJzLCBzb21lIG9mIHdob20gYXZlcnJlZCB0aGF0IGl0cyBuYW1lIGFuZCBzdG9yeSBoYWQgYmVlbiBmYWJyaWNhdGVkLCBzaW5jZSBpdCBuZXZlciBoYWQgZXhpc3RlZCBhbmQgZGlkIG5vdCB0aGVuIGV4aXN0OyBhbmQgaW4gaGlzIGF0dGVtcHQgdG8gb2NjdXB5IGl0IGhlIGNhcnJpZWQgdGhlIFJvbWFuIHN1cHJlbWFjeSBiZXlvbmQgdGhlIGNvbmZpbmVzIG9mIHRoZSBpbmhhYml0ZWQgd29ybGQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHR3aWNlPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+T25jZSBpbiA1NSBCLkMuICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjIwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkIuIEcuPC90aXRsZT4gaXYuIDIwLTM2PC9iaWJsPik7IGFnYWluIGluIDU0IEIuQy4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IHYuIDEtMjI8L2JpYmw+KS48L25vdGU+IGNyb3NzaW5nIHRvIHRoZSBpc2xhbmQgZnJvbSB0aGUgb3Bwb3NpdGUgY29hc3Qgb2YgR2F1bCBhbmQgaW4gbWFueSBiYXR0bGVzIGRhbWFnaW5nIHRoZSBlbmVteSByYXRoZXIgdGhhbiBlbnJpY2hpbmcgaGlzIG93biBtZW7igJRmb3IgdGhlcmUgd2FzIG5vdGhpbmcgd29ydGggdGFraW5nIGZyb20gbWVuIHdobyBsaXZlZCBpbiBwb3ZlcnR5IGFuZCB3cmV0Y2hlZG5lc3PigJQgaGUgYnJvdWdodCB0aGUgd2FyIHRvIGFuIGVuZCB3aGljaCB3YXMgbm90IHRvIGhpcyBsaWtpbmcsIGl0IGlzIHRydWU7IHN0aWxsLCBoZSB0b29rIGhvc3RhZ2VzIGZyb20gdGhlIGtpbmcsIGltcG9zZWQgdHJpYnV0ZXMsIGFuZCB0aGVuIHNhaWxlZCBhd2F5IGZyb20gdGhlIGlzbGFuZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhpcyBleHBlZGl0aW9uIGFnYWluc3QgdGhlIEJyaXRhbm5pIHdhcyBjZWxlYnJhdGVkIGZvciBpdHMgZGFyaW5nLiBGb3IgaGUgd2FzIHRoZSBmaXJzdCB0byBsYXVuY2ggYSBmbGVldCB1cG9uIHRoZSB3ZXN0ZXJuIG9jZWFuIGFuZCB0byBzYWlsIHRocm91Z2ggdGhlIEF0bGFudGljIHNlYSBjYXJyeWluZyBhbiBhcm15IHRvIHdhZ2Ugd2FyLiBUaGUgaXNsYW5kIHdhcyBvZiBpbmNyZWRpYmxlIG1hZ25pdHVkZSwgYW5kIGZ1cm5pc2hlZCBtdWNoIG1hdHRlciBvZiBkaXNwdXRlIHRvIG11bHRpdHVkZXMgb2Ygd3JpdGVycywgc29tZSBvZiB3aG9tIGF2ZXJyZWQgdGhhdCBpdHMgbmFtZSBhbmQgc3RvcnkgaGFkIGJlZW4gZmFicmljYXRlZCwgc2luY2UgaXQgbmV2ZXIgaGFkIGV4aXN0ZWQgYW5kIGRpZCBub3QgdGhlbiBleGlzdDsgYW5kIGluIGhpcyBhdHRlbXB0IHRvIG9jY3VweSBpdCBoZSBjYXJyaWVkIHRoZSBSb21hbiBzdXByZW1hY3kgYmV5b25kIHRoZSBjb25maW5lcyBvZiB0aGUgaW5oYWJpdGVkIHdvcmxkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHR3aWNlPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5PbmNlIGluIDU1IEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNC4yMCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gaXYuIDIwLTM2PC9iaWJsPik7IGFnYWluIGluIDU0IEIuQy4gKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiB2LiAxLTIyPC9iaWJsPikuPC9ub3RlPiBjcm9zc2luZyB0byB0aGUgaXNsYW5kIGZyb20gdGhlIG9wcG9zaXRlIGNvYXN0IG9mIEdhdWwgYW5kIGluIG1hbnkgYmF0dGxlcyBkYW1hZ2luZyB0aGUgZW5lbXkgcmF0aGVyIHRoYW4gZW5yaWNoaW5nIGhpcyBvd24gbWVu4oCUZm9yIHRoZXJlIHdhcyBub3RoaW5nIHdvcnRoIHRha2luZyBmcm9tIG1lbiB3aG8gbGl2ZWQgaW4gcG92ZXJ0eSBhbmQgd3JldGNoZWRuZXNz4oCUIGhlIGJyb3VnaHQgdGhlIHdhciB0byBhbiBlbmQgd2hpY2ggd2FzIG5vdCB0byBoaXMgbGlraW5nLCBpdCBpcyB0cnVlOyBzdGlsbCwgaGUgdG9vayBob3N0YWdlcyBmcm9tIHRoZSBraW5nLCBpbXBvc2VkIHRyaWJ1dGVzLCBhbmQgdGhlbiBzYWlsZWQgYXdheSBmcm9tIHRoZSBpc2xhbmQuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA0LjIwIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpdi4gMjAtMzY8L2JpYmw+KTsgYWdhaW4gaW4gNTQgQi5DLiAoPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiBpdi4gMjAtMzY8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gdi4gMS0yMjwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gdi4gMS0yMjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIEdhdWwgaGUgZm91bmQgbGV0dGVycyB3aGljaCB3ZXJlIGFib3V0IHRvIGJlIHNlbnQgYWNyb3NzIHRvIGhpbS4gVGhleSB3ZXJlIGZyb20gaGlzIGZyaWVuZHMgaW4gUm9tZSwgYW5kIGFkdmlzZWQgaGltIG9mIGhpcyBkYXVnaHRlcidzIGRlYXRoOyBzaGUgZGllZCBpbiBjaGlsZC1iaXJ0aCBhdCBQb21wZXkncyBob3VzZS4gR3JlYXQgd2FzIHRoZSBncmllZiBvZiBQb21wZXksIGFuZCBncmVhdCB0aGUgZ3JpZWYgb2YgQ2Flc2FyLCBhbmQgdGhlaXIgZnJpZW5kcyB3ZXJlIGdyZWF0bHkgdHJvdWJsZWQgdG9vOyB0aGV5IGZlbHQgdGhhdCB0aGUgcmVsYXRpb25zaGlwIHdoaWNoIGFsb25lIGtlcHQgdGhlIGRpc3RlbXBlcmVkIHN0YXRlIGluIGhhcm1vbnkgYW5kIGNvbmNvcmQgd2FzIG5vdyBkaXNzb2x2ZWQuIEZvciB0aGUgYmFiZSBhbHNvIGRpZWQgcHJlc2VudGx5LCBhZnRlciBzdXJ2aXZpbmcgaXRzIG1vdGhlciBhIGZldyBkYXlzLiBOb3cgSnVsaWEsIGluIHNwaXRlIG9mIHRoZSB0cmlidW5lcywgd2FzIGNhcnJpZWQgYnkgdGhlIHBlb3BsZSB0byB0aGUgQ2FtcHVzIE1hcnRpdXMsIHdoZXJlIGhlciBmdW5lcmFsIHJpdGVzIHdlcmUgaGVsZCwgYW5kIHdoZXJlIHNoZSBsaWVzIGJ1cmllZC48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1My4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIGxpaWk8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIEdhdWwgaGUgZm91bmQgbGV0dGVycyB3aGljaCB3ZXJlIGFib3V0IHRvIGJlIHNlbnQgYWNyb3NzIHRvIGhpbS4gVGhleSB3ZXJlIGZyb20gaGlzIGZyaWVuZHMgaW4gUm9tZSwgYW5kIGFkdmlzZWQgaGltIG9mIGhpcyBkYXVnaHRlcidzIGRlYXRoOyBzaGUgZGllZCBpbiBjaGlsZC1iaXJ0aCBhdCBQb21wZXkncyBob3VzZS4gR3JlYXQgd2FzIHRoZSBncmllZiBvZiBQb21wZXksIGFuZCBncmVhdCB0aGUgZ3JpZWYgb2YgQ2Flc2FyLCBhbmQgdGhlaXIgZnJpZW5kcyB3ZXJlIGdyZWF0bHkgdHJvdWJsZWQgdG9vOyB0aGV5IGZlbHQgdGhhdCB0aGUgcmVsYXRpb25zaGlwIHdoaWNoIGFsb25lIGtlcHQgdGhlIGRpc3RlbXBlcmVkIHN0YXRlIGluIGhhcm1vbnkgYW5kIGNvbmNvcmQgd2FzIG5vdyBkaXNzb2x2ZWQuIEZvciB0aGUgYmFiZSBhbHNvIGRpZWQgcHJlc2VudGx5LCBhZnRlciBzdXJ2aXZpbmcgaXRzIG1vdGhlciBhIGZldyBkYXlzLiBOb3cgSnVsaWEsIGluIHNwaXRlIG9mIHRoZSB0cmlidW5lcywgd2FzIGNhcnJpZWQgYnkgdGhlIHBlb3BsZSB0byB0aGUgQ2FtcHVzIE1hcnRpdXMsIHdoZXJlIGhlciBmdW5lcmFsIHJpdGVzIHdlcmUgaGVsZCwgYW5kIHdoZXJlIHNoZSBsaWVzIGJ1cmllZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIGxpaWk8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIGxpaWk8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBjaGFwdGVyIGxpaWk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIncyBmb3JjZXMgd2VyZSBub3cgc28gbGFyZ2UgdGhhdCBoZSB3YXMgZm9yY2VkIHRvIGRpc3RyaWJ1dGUgdGhlbSBpbiBtYW55IHdpbnRlci1xdWFydGVycywgd2hpbGUgaGUgaGltc2VsZiwgYXMgaGlzIGN1c3RvbSB3YXMsIHR1cm5lZCBoaXMgc3RlcHMgdG93YXJkcyBJdGFseS4gVGhlbiBhbGwgR2F1bCBvbmNlIG1vcmUgYnJva2Ugb3V0IGluIHJldm9sdCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNS4yNCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gRy48L3RpdGxlPiB2LiAyNC01MTwvYmlibD4uPC9ub3RlPiBhbmQgZ3JlYXQgYXJtaWVzIHdlbnQgYWJvdXQgYXR0YWNraW5nIHRoZSBlbnRyZW5jaG1lbnRzIGFuZCB0cnlpbmcgdG8gZGVzdHJveSB0aGUgd2ludGVyLXF1YXJ0ZXJzIG9mIHRoZSBSb21hbnMuIFRoZSBtb3N0IG51bWVyb3VzIGFuZCBwb3dlcmZ1bCBvZiB0aGUgcmViZWxzLCB1bmRlciBBYnJpb3JpeCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIgY2FsbHMgaGltIEFtYmlvcml4Ljwvbm90ZT4gdXR0ZXJseSBkZXN0cm95ZWQgVGl0dXJpdXMgYW5kIENvdHRhLCB0b2dldGhlciB3aXRoIHRoZWlyIGFybXksIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRoZSBsZWdpb24gdW5kZXIgQ2ljZXJvIHdhcyBzdXJyb3VuZGVkIGFuZCBiZXNpZWdlZCBieSBzaXh0eSB0aG91c2FuZCBvZiB0aGVtLCBhbmQgbmFycm93bHkgZXNjYXBlZCBoYXZpbmcgaXRzIGNhbXAgdGFrZW4gYnkgc3Rvcm0sIGFsdGhvdWdoIGFsbCB3ZXJlIHdvdW5kZWQgYW5kIHdlbnQgYmV5b25kIHRoZWlyIHBvd2VycyBpbiB0aGUgYXJkb3VyIG9mIHRoZWlyIGRlZmVuY2UuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyJ3MgZm9yY2VzIHdlcmUgbm93IHNvIGxhcmdlIHRoYXQgaGUgd2FzIGZvcmNlZCB0byBkaXN0cmlidXRlIHRoZW0gaW4gbWFueSB3aW50ZXItcXVhcnRlcnMsIHdoaWxlIGhlIGhpbXNlbGYsIGFzIGhpcyBjdXN0b20gd2FzLCB0dXJuZWQgaGlzIHN0ZXBzIHRvd2FyZHMgSXRhbHkuIFRoZW4gYWxsIEdhdWwgb25jZSBtb3JlIGJyb2tlIG91dCBpbiByZXZvbHQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA1LjI0IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gdi4gMjQtNTE8L2JpYmw+Ljwvbm90ZT4gYW5kIGdyZWF0IGFybWllcyB3ZW50IGFib3V0IGF0dGFja2luZyB0aGUgZW50cmVuY2htZW50cyBhbmQgdHJ5aW5nIHRvIGRlc3Ryb3kgdGhlIHdpbnRlci1xdWFydGVycyBvZiB0aGUgUm9tYW5zLiBUaGUgbW9zdCBudW1lcm91cyBhbmQgcG93ZXJmdWwgb2YgdGhlIHJlYmVscywgdW5kZXIgQWJyaW9yaXgsPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gR2FsLiA1LjI0IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gdi4gMjQtNTE8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gdi4gMjQtNTE8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhZXNhciBjYWxscyBoaW0gQW1iaW9yaXguPC9ub3RlPiB1dHRlcmx5IGRlc3Ryb3llZCBUaXR1cml1cyBhbmQgQ290dGEsIHRvZ2V0aGVyIHdpdGggdGhlaXIgYXJteSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIHRoZSBsZWdpb24gdW5kZXIgQ2ljZXJvIHdhcyBzdXJyb3VuZGVkIGFuZCBiZXNpZWdlZCBieSBzaXh0eSB0aG91c2FuZCBvZiB0aGVtLCBhbmQgbmFycm93bHkgZXNjYXBlZCBoYXZpbmcgaXRzIGNhbXAgdGFrZW4gYnkgc3Rvcm0sIGFsdGhvdWdoIGFsbCB3ZXJlIHdvdW5kZWQgYW5kIHdlbnQgYmV5b25kIHRoZWlyIHBvd2VycyBpbiB0aGUgYXJkb3VyIG9mIHRoZWlyIGRlZmVuY2UuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5XaGVuIHRpZGluZ3Mgb2YgdGhlc2UgdGhpbmdzIHJlYWNoZWQgQ2Flc2FyLCB3aG8gd2FzIGZhciBvbiBoaXMgam91cm5leSwgaGUgdHVybmVkIGJhY2sgcXVpY2tseSwgZ290IHRvZ2V0aGVyIHNldmVuIHRob3VzYW5kIG1lbiBpbiBhbGwsIGFuZCBodXJyaWVkIG9uIHRvIGV4dHJpY2F0ZSBDaWNlcm8gZnJvbSB0aGUgc2llZ2UuIEJ1dCB0aGUgYmVzaWVnZXJzIGJlY2FtZSBhd2FyZSBvZiBoaXMgYXBwcm9hY2gsIGFuZCB3ZW50IHRvIG1lZXQgaGltIHdpdGggdGhlIHB1cnBvc2Ugb2YgY3V0dGluZyBoaXMgZm9yY2VzIG9mZiBhdCBvbmNlLCBkZXNwaXNpbmcgdGhlaXIgc21hbGwgbnVtYmVycy4gCgkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgZGVjZWl2ZWQgdGhlbSBieSBhdm9pZGluZyBiYXR0bGUgY29udGludWFsbHksIGFuZCB3aGVuIGhlIGhhZCBmb3VuZCBhIHBsYWNlIHN1aXRhYmxlIGZvciBvbmUgd2hvIHdhcyBmaWdodGluZyBhZ2FpbnN0IG1hbnkgd2l0aCBmZXcsIGZvcnRpZmllZCBhIGNhbXAsIHdoZXJlIGhlIGtlcHQgaGlzIG1lbiBhbHRvZ2V0aGVyIGZyb20gZmlnaHRpbmcgYW5kIGZvcmNlZCB0aGVtIHRvIGluY3JlYXNlIHRoZSBoZWlnaHQgb2YgdGhlaXIgcmFtcGFydHMgYW5kIHRoZSBkZWZlbmNlcyBvZiB0aGVpciBnYXRlcyBhcyB0aG91Z2ggdGhleSB3ZXJlIGFmcmFpZC4gSGlzIHN0cmF0ZWd5IHRodXMgbGVkIHRoZSBlbmVteSB0byBkZXNwaXNlIGhpbSwgdW50aWwgYXQgbGFzdCwgd2hlbiB0aGVpciBib2xkbmVzcyBsZWQgdGhlbSB0byBhdHRhY2sgaW4gc2NhdHRlcmVkIGJhbmRzLCBoZSBzYWxsaWVkIG91dCwgcm91dGVkIHRoZW0sIGFuZCBkZXN0cm95ZWQgbWFueSBvZiB0aGVtLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBkZWNlaXZlZCB0aGVtIGJ5IGF2b2lkaW5nIGJhdHRsZSBjb250aW51YWxseSwgYW5kIHdoZW4gaGUgaGFkIGZvdW5kIGEgcGxhY2Ugc3VpdGFibGUgZm9yIG9uZSB3aG8gd2FzIGZpZ2h0aW5nIGFnYWluc3QgbWFueSB3aXRoIGZldywgZm9ydGlmaWVkIGEgY2FtcCwgd2hlcmUgaGUga2VwdCBoaXMgbWVuIGFsdG9nZXRoZXIgZnJvbSBmaWdodGluZyBhbmQgZm9yY2VkIHRoZW0gdG8gaW5jcmVhc2UgdGhlIGhlaWdodCBvZiB0aGVpciByYW1wYXJ0cyBhbmQgdGhlIGRlZmVuY2VzIG9mIHRoZWlyIGdhdGVzIGFzIHRob3VnaCB0aGV5IHdlcmUgYWZyYWlkLiBIaXMgc3RyYXRlZ3kgdGh1cyBsZWQgdGhlIGVuZW15IHRvIGRlc3Bpc2UgaGltLCB1bnRpbCBhdCBsYXN0LCB3aGVuIHRoZWlyIGJvbGRuZXNzIGxlZCB0aGVtIHRvIGF0dGFjayBpbiBzY2F0dGVyZWQgYmFuZHMsIGhlIHNhbGxpZWQgb3V0LCByb3V0ZWQgdGhlbSwgYW5kIGRlc3Ryb3llZCBtYW55IG9mIHRoZW0uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG51bWVyb3VzIHJldm9sdHMgb2YgdGhlIEdhdWxzIGluIHRob3NlIHBhcnRzIHdlcmUgcXVpZXRlZCBieSB0aGlzIHN1Y2Nlc3MsIGFzIHdlbGwgYXMgYnkgdGhlIGZhY3QgdGhhdCBDYWVzYXIgaGltc2VsZiwgZHVyaW5nIHRoZSB3aW50ZXIsIHdlbnQgYWJvdXQgaW4gYWxsIGRpcmVjdGlvbnMgYW5kIGtlcHQgY2xvc2Ugd2F0Y2ggb24gdGhlIGRpc3R1cmJlcnMgb2YgdGhlIHBlYWNlLiBGb3IgdGhlcmUgaGFkIGNvbWUgZnJvbSBJdGFseSB0aHJlZSBsZWdpb25zIHRvIHJlcGxhY2UgdGhlIG1lbiB0aGF0IGhlIGhhZCBsb3N0LCBQb21wZXkgaGF2aW5nIGxlbnQgdHdvIG9mIHRob3NlIHVuZGVyIGhpcyBjb21tYW5kLCBhbmQgb25lIGhhdmluZyBiZWVuIG5ld2x5IGxldmllZCBpbiBHYXVsIGFib3V0IHRoZSBQby4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGluIHJlbW90ZXIgcmVnaW9uczxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIGhlcmUgcGFzc2VzIG92ZXIgdGhlIGV2ZW50cyBvZiB0aGUgeWVhciA1MyBCLkMuLCBkZXNjcmliZWQgYnkgQ2Flc2FyIGluIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CLiBHLjwvdGl0bGU+IHZpPC9iaWJsPi4gVGhlIHNldmVudGggYm9vayBpcyB3aG9sbHkgdGFrZW4gdXAgd2l0aCB0aGUgd2FyIG5vdyB0byBiZSBkZXNjcmliZWQgKDUyIEIuQy4pLjwvbm90ZT4gdGhlIGdlcm1zIG9mIHRoZSBncmVhdGVzdCBhbmQgbW9zdCBkYW5nZXJvdXMgb2YgdGhlIHdhcnMgd2FnZWQgaW4gdGhvc2UgcGFydHMgYmVnYW4gdG8gc2hvdyB0aGVtc2VsdmVzLiBUaGV5IGhhZCBmb3IgYSBsb25nIHRpbWUgYmVlbiBzZWNyZXRseSBzb3duIGFuZCBjdWx0aXZhdGVkIGJ5IHRoZSBtb3N0IGluZmx1ZW50aWFsIG1lbiBhbW9uZyB0aGUgbW9zdCB3YXJsaWtlIHRyaWJlcywgYW5kIGRlcml2ZWQgc3RyZW5ndGggZnJvbSBsYXJnZSBib2RpZXMgb2YgeW91bmcgbWVuIGFzc2VtYmxlZCBmcm9tIGFsbCBzaWRlcyBpbiBhcm1zLCBmcm9tIGdyZWF0IHJpY2hlcyBicm91Z2h0IHRvZ2V0aGVyLCBmcm9tIHN0cm9uZyBjaXRpZXMsIGFuZCBmcm9tIGNvdW50cmllcyB3aGljaCB3ZXJlIGhhcmQgdG8gaW52YWRlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGF0IHNlYXNvbiBvZiB3aW50ZXIsIHRvbywgZnJvemVuIHJpdmVycywgZm9yZXN0cyBidXJpZWQgaW4gc25vdywgcGxhaW5zIGNvbnZlcnRlZCBpbnRvIGxha2VzIGJ5IHdpbnRlciB0b3JyZW50cywgaW4gc29tZSBwYXJ0cyBwYXRocyBvYmxpdGVyYXRlZCBieSBkZWVwIHNub3csIGFuZCBpbiBvdGhlcnMgdGhlIGdyZWF0IHVuY2VydGFpbnR5IG9mIGEgbWFyY2ggdGhyb3VnaCBzd2FtcHMgYW5kIHN0cmVhbXMgZGl2ZXJ0ZWQgZnJvbSB0aGVpciBjb3Vyc2VzLCBhbGwgc2VlbWVkIHRvIG1ha2UgaXQgd2hvbGx5IGltcG9zc2libGUgZm9yIENhZXNhciB0byBvcHBvc2UgdGhlIHBsYW5zIG9mIHRoZSByZWJlbHMuIEFjY29yZGluZ2x5LCBtYW55IHRyaWJlcyBoYWQgcmV2b2x0ZWQsIGJ1dCB0aGUgaGVhZCBhbmQgZnJvbnQgb2YgdGhlIHJldm9sdCB3ZXJlIHRoZSBBcnZlcm5pIGFuZCBDYXJudW50aW5pLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIENhZXNhcidzIDx0aXRsZT5CLiBHLjwvdGl0bGU+dGhlIG5hbWVzIGFyZSBDYXJudXRlcyBhbmQgVmVyY2luZ2V0b3JpeC48L25vdGU+IGFuZCBWZXJnZW50b3JpeCB3YXMgY2hvc2VuIHRvIGhhdmUgdGhlIGVudGlyZSBhdXRob3JpdHkgaW4gdGhlIHdhci4gSGlzIGZhdGhlciB0aGUgR2F1bHMgaGFkIHB1dCB0byBkZWF0aCBiZWNhdXNlIHRoZXkgdGhvdWdodCBoZSB3YXMgYWltaW5nIGF0IGEgdHlyYW5ueS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIG51bWVyb3VzIHJldm9sdHMgb2YgdGhlIEdhdWxzIGluIHRob3NlIHBhcnRzIHdlcmUgcXVpZXRlZCBieSB0aGlzIHN1Y2Nlc3MsIGFzIHdlbGwgYXMgYnkgdGhlIGZhY3QgdGhhdCBDYWVzYXIgaGltc2VsZiwgZHVyaW5nIHRoZSB3aW50ZXIsIHdlbnQgYWJvdXQgaW4gYWxsIGRpcmVjdGlvbnMgYW5kIGtlcHQgY2xvc2Ugd2F0Y2ggb24gdGhlIGRpc3R1cmJlcnMgb2YgdGhlIHBlYWNlLiBGb3IgdGhlcmUgaGFkIGNvbWUgZnJvbSBJdGFseSB0aHJlZSBsZWdpb25zIHRvIHJlcGxhY2UgdGhlIG1lbiB0aGF0IGhlIGhhZCBsb3N0LCBQb21wZXkgaGF2aW5nIGxlbnQgdHdvIG9mIHRob3NlIHVuZGVyIGhpcyBjb21tYW5kLCBhbmQgb25lIGhhdmluZyBiZWVuIG5ld2x5IGxldmllZCBpbiBHYXVsIGFib3V0IHRoZSBQby4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiByZW1vdGVyIHJlZ2lvbnM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIGhlcmUgcGFzc2VzIG92ZXIgdGhlIGV2ZW50cyBvZiB0aGUgeWVhciA1MyBCLkMuLCBkZXNjcmliZWQgYnkgQ2Flc2FyIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIEdhbC4gNi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiB2aTwvYmlibD4uIFRoZSBzZXZlbnRoIGJvb2sgaXMgd2hvbGx5IHRha2VuIHVwIHdpdGggdGhlIHdhciBub3cgdG8gYmUgZGVzY3JpYmVkICg1MiBCLkMuKS48L25vdGU+IHRoZSBnZXJtcyBvZiB0aGUgZ3JlYXRlc3QgYW5kIG1vc3QgZGFuZ2Vyb3VzIG9mIHRoZSB3YXJzIHdhZ2VkIGluIHRob3NlIHBhcnRzIGJlZ2FuIHRvIHNob3cgdGhlbXNlbHZlcy4gVGhleSBoYWQgZm9yIGEgbG9uZyB0aW1lIGJlZW4gc2VjcmV0bHkgc293biBhbmQgY3VsdGl2YXRlZCBieSB0aGUgbW9zdCBpbmZsdWVudGlhbCBtZW4gYW1vbmcgdGhlIG1vc3Qgd2FybGlrZSB0cmliZXMsIGFuZCBkZXJpdmVkIHN0cmVuZ3RoIGZyb20gbGFyZ2UgYm9kaWVzIG9mIHlvdW5nIG1lbiBhc3NlbWJsZWQgZnJvbSBhbGwgc2lkZXMgaW4gYXJtcywgZnJvbSBncmVhdCByaWNoZXMgYnJvdWdodCB0b2dldGhlciwgZnJvbSBzdHJvbmcgY2l0aWVzLCBhbmQgZnJvbSBjb3VudHJpZXMgd2hpY2ggd2VyZSBoYXJkIHRvIGludmFkZS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBHYWwuIDYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEcuPC90aXRsZT4gdmk8L2JpYmw+LiBUaGUgc2V2ZW50aCBib29rIGlzIHdob2xseSB0YWtlbiB1cCB3aXRoIHRoZSB3YXIgbm93IHRvIGJlIGRlc2NyaWJlZCAoNTIgQi5DLikuPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gRy48L3RpdGxlPiB2aTwvdHJhbnNsYXRpb24+"
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgc2Vhc29uIG9mIHdpbnRlciwgdG9vLCBmcm96ZW4gcml2ZXJzLCBmb3Jlc3RzIGJ1cmllZCBpbiBzbm93LCBwbGFpbnMgY29udmVydGVkIGludG8gbGFrZXMgYnkgd2ludGVyIHRvcnJlbnRzLCBpbiBzb21lIHBhcnRzIHBhdGhzIG9ibGl0ZXJhdGVkIGJ5IGRlZXAgc25vdywgYW5kIGluIG90aGVycyB0aGUgZ3JlYXQgdW5jZXJ0YWludHkgb2YgYSBtYXJjaCB0aHJvdWdoIHN3YW1wcyBhbmQgc3RyZWFtcyBkaXZlcnRlZCBmcm9tIHRoZWlyIGNvdXJzZXMsIGFsbCBzZWVtZWQgdG8gbWFrZSBpdCB3aG9sbHkgaW1wb3NzaWJsZSBmb3IgQ2Flc2FyIHRvIG9wcG9zZSB0aGUgcGxhbnMgb2YgdGhlIHJlYmVscy4gQWNjb3JkaW5nbHksIG1hbnkgdHJpYmVzIGhhZCByZXZvbHRlZCwgYnV0IHRoZSBoZWFkIGFuZCBmcm9udCBvZiB0aGUgcmV2b2x0IHdlcmUgdGhlIEFydmVybmkgYW5kIENhcm51bnRpbmksPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBDYWVzYXIncyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+dGhlIG5hbWVzIGFyZSBDYXJudXRlcyBhbmQgVmVyY2luZ2V0b3JpeC48L25vdGU+IGFuZCBWZXJnZW50b3JpeCB3YXMgY2hvc2VuIHRvIGhhdmUgdGhlIGVudGlyZSBhdXRob3JpdHkgaW4gdGhlIHdhci4gSGlzIGZhdGhlciB0aGUgR2F1bHMgaGFkIHB1dCB0byBkZWF0aCBiZWNhdXNlIHRoZXkgdGhvdWdodCBoZSB3YXMgYWltaW5nIGF0IGEgdHlyYW5ueS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBHLjwvdGl0bGU+dGhlIG5hbWVzIGFyZSBDYXJudXRlcyBhbmQgVmVyY2luZ2V0b3JpeC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIGxlYWRlciwgdGhlbiwgYWZ0ZXIgZGl2aWRpbmcgaGlzIGZvcmNlcyBpbnRvIG1hbnkgcGFydHMgYW5kIHB1dHRpbmcgbWFueSBvZmZpY2VycyBpbiBjb21tYW5kIG9mIHRoZW0sIHdhcyB3aW5uaW5nIG92ZXIgYWxsIHRoZSBjb3VudHJ5IHJvdW5kIGFib3V0IGFzIGZhciBhcyB0aGUgd2F0ZXItc2hlZCBvZiB0aGUgQXJhci4gSGUgcHVycG9zZWQsIG5vdyB0aGF0IHRoZXJlIHdhcyBhIGNvYWxpdGlvbiBhdCBSb21lIGFnYWluc3QgQ2Flc2FyLCBhdCBvbmNlIHRvIHJvdXNlIGFsbCBHYXVsIHRvIHdhci4gSWYgaGUgaGFkIGRvbmUgdGhpcyBhIGxpdHRsZSBsYXRlciwgd2hlbiBDYWVzYXIgd2FzIGludm9sdmVkIGluIHRoZSBjaXZpbCB3YXIsIEl0YWx5IHdvdWxkIGhhdmUgYmVlbiBhIHByZXkgdG8gdGVycm9ycyBubyBsZXNzIGFjdXRlIHRoYW4gdGhvc2UgYXJvdXNlZCBieSB0aGUgQ2ltYnJpIG9mIG9sZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFzIGl0IHdhcywgdGhlIG1hbiBlbmRvd2VkIGJ5IG5hdHVyZSB0byBtYWtlIHRoZSBiZXN0IHVzZSBvZiBhbGwgdGhlIGFydHMgb2Ygd2FyLCBhbmQgcGFydGljdWxhcmx5IG9mIGl0cyBjcnVjaWFsIG1vbWVudHMsIG5hbWVseSBDYWVzYXIsIGFzIHNvb24gYXMgaGUgbGVhcm5lZCBvZiB0aGUgcmV2b2x0LCBzZXQgb3V0IGFuZCBtYXJjaGVkIGJ5IHRoZSBzYW1lIHJvYWRzIG92ZXIgd2hpY2ggaGUgaGFkIHByZXZpb3VzbHkgY29tZSwgYW5kIGJ5IHRoZSB2aWdvdXIgYW5kIHNwZWVkIG9mIGhpcyBwYXNzYWdlIGluIHNvIHNldmVyZSBhIHdpbnRlciBzaG93ZWQgdGhlIEJhcmJhcmlhbnMgdGhhdCBhbiB1bmNvbnF1ZXJlZCBhbmQgaW52aW5jaWJsZSBhcm15IHdhcyBjb21pbmcgYWdhaW5zdCB0aGVtLiBGb3Igd2hlcmUgaXQgd2FzIGluY3JlZGlibGUgdGhhdCBvbmUgb2YgaGlzIG1lc3NlbmdlcnMgb3IgbGV0dGVyLWNhcnJpZXJzIGNvdWxkIG1ha2UgaGlzIHdheSBpbiBhIGxvbmcgdGltZSwgdGhlcmUgaGUgd2FzIHNlZW4gd2l0aCBoaXMgd2hvbGUgYXJteSwgYXQgb25jZSByYXZhZ2luZyB0aGVpciBsYW5kcyBhbmQgZGVzdHJveWluZyB0aGVpciBzdHJvbmdob2xkcywgc3ViZHVpbmcgY2l0aWVzLCAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgcmVjZWl2aW5nIHRob3NlIHdobyBjYW1lIG92ZXIgdG8gaGlzIHNpZGUsIHVudGlsIHRoZSBuYXRpb24gb2YgdGhlIEFlZHVpIGFsc28gZW50ZXJlZCB0aGUgd2FyIGFnYWluc3QgaGltLiBUaGVzZSB1cCB0byB0aGlzIHRpbWUgaGFkIGNhbGxlZCB0aGVtc2VsdmVzIGJyZXRocmVuIG9mIHRoZSBSb21hbnMgYW5kIGhhZCBiZWVuIGNvbnNwaWN1b3VzbHkgaG9ub3VyZWQsIGJ1dCBub3csIGJ5IGpvaW5pbmcgdGhlIHJlYmVscywgdGhleSBjYXVzZWQgZ3JlYXQgZGVqZWN0aW9uIGluIENhZXNhcidzIGFybXkuIEluIGNvbnNlcXVlbmNlIG9mIHRoaXMgQ2Flc2FyIHJlbW92ZWQgZnJvbSB0aG9zZSBwYXJ0cyBhbmQgcGFzc2VkIGFjcm9zcyB0aGUgdGVycml0b3J5IG9mIHRoZSBMaW5nb25lcywgd2lzaGluZyB0byByZWFjaCB0aGUgY291bnRyeSBvZiB0aGUgU2VxdWFuaSwgd2hvIHdlcmUgZnJpZW5kcywgYW5kIHN0b29kIGFzIGEgYnVsd2FyayBiZXR3ZWVuIEl0YWx5IGFuZCB0aGUgcmVzdCBvZiBHYXVsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB0aGUgZW5lbXkgZmVsbCB1cG9uIGhpbSBhbmQgc3Vycm91bmRlZCBoaW0gd2l0aCBtYW55IHRlbnMgb2YgdGhvdXNhbmRzLCBzbyB0aGF0IGhlIGVzc2F5ZWQgdG8gZmlnaHQgYSBkZWNpc2l2ZSBiYXR0bGUuIEluIHRoZSBtYWluIGhlIGdvdCB0aGUgYmVzdCBvZiB0aGUgc3RydWdnbGUsIGFuZCBhZnRlciBhIGxvbmcgdGltZSBhbmQgbXVjaCBzbGF1Z2h0ZXIgb3ZlcnBvd2VyZWQgdGhlIEJhcmJhcmlhbnM7IGJ1dCBpdCBhcHBlYXJzIHRoYXQgYXQgZmlyc3QgaGUgbWV0IHdpdGggc29tZSByZXZlcnNlLCBhbmQgdGhlIEFydmVybmkgc2hvdyBhIHNob3J0LXN3b3JkIGhhbmdpbmcgaW4gYSB0ZW1wbGUsIHdoaWNoIHRoZXkgc2F5IHdhcyBjYXB0dXJlZCBmcm9tIENhZXNhci4gV2hlbiBDYWVzYXIgaGltc2VsZiBzYXcgaXQsIGF0IGEgbGF0ZXIgdGltZSwgaGUgc21pbGVkLCBhbmQgdGhvdWdoIGhpcyBmcmllbmRzIHVyZ2VkIGhpbSB0byBoYXZlIGl0IHRha2VuIGRvd24sIGhlIHdvdWxkIG5vdCBwZXJtaXQgaXQsIGNvbnNpZGVyaW5nIGl0IHNhY3JlZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBsZWFkZXIsIHRoZW4sIGFmdGVyIGRpdmlkaW5nIGhpcyBmb3JjZXMgaW50byBtYW55IHBhcnRzIGFuZCBwdXR0aW5nIG1hbnkgb2ZmaWNlcnMgaW4gY29tbWFuZCBvZiB0aGVtLCB3YXMgd2lubmluZyBvdmVyIGFsbCB0aGUgY291bnRyeSByb3VuZCBhYm91dCBhcyBmYXIgYXMgdGhlIHdhdGVyLXNoZWQgb2YgdGhlIEFyYXIuIEhlIHB1cnBvc2VkLCBub3cgdGhhdCB0aGVyZSB3YXMgYSBjb2FsaXRpb24gYXQgUm9tZSBhZ2FpbnN0IENhZXNhciwgYXQgb25jZSB0byByb3VzZSBhbGwgR2F1bCB0byB3YXIuIElmIGhlIGhhZCBkb25lIHRoaXMgYSBsaXR0bGUgbGF0ZXIsIHdoZW4gQ2Flc2FyIHdhcyBpbnZvbHZlZCBpbiB0aGUgY2l2aWwgd2FyLCBJdGFseSB3b3VsZCBoYXZlIGJlZW4gYSBwcmV5IHRvIHRlcnJvcnMgbm8gbGVzcyBhY3V0ZSB0aGFuIHRob3NlIGFyb3VzZWQgYnkgdGhlIENpbWJyaSBvZiBvbGQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhcyBpdCB3YXMsIHRoZSBtYW4gZW5kb3dlZCBieSBuYXR1cmUgdG8gbWFrZSB0aGUgYmVzdCB1c2Ugb2YgYWxsIHRoZSBhcnRzIG9mIHdhciwgYW5kIHBhcnRpY3VsYXJseSBvZiBpdHMgY3J1Y2lhbCBtb21lbnRzLCBuYW1lbHkgQ2Flc2FyLCBhcyBzb29uIGFzIGhlIGxlYXJuZWQgb2YgdGhlIHJldm9sdCwgc2V0IG91dCBhbmQgbWFyY2hlZCBieSB0aGUgc2FtZSByb2FkcyBvdmVyIHdoaWNoIGhlIGhhZCBwcmV2aW91c2x5IGNvbWUsIGFuZCBieSB0aGUgdmlnb3VyIGFuZCBzcGVlZCBvZiBoaXMgcGFzc2FnZSBpbiBzbyBzZXZlcmUgYSB3aW50ZXIgc2hvd2VkIHRoZSBCYXJiYXJpYW5zIHRoYXQgYW4gdW5jb25xdWVyZWQgYW5kIGludmluY2libGUgYXJteSB3YXMgY29taW5nIGFnYWluc3QgdGhlbS4gRm9yIHdoZXJlIGl0IHdhcyBpbmNyZWRpYmxlIHRoYXQgb25lIG9mIGhpcyBtZXNzZW5nZXJzIG9yIGxldHRlci1jYXJyaWVycyBjb3VsZCBtYWtlIGhpcyB3YXkgaW4gYSBsb25nIHRpbWUsIHRoZXJlIGhlIHdhcyBzZWVuIHdpdGggaGlzIHdob2xlIGFybXksIGF0IG9uY2UgcmF2YWdpbmcgdGhlaXIgbGFuZHMgYW5kIGRlc3Ryb3lpbmcgdGhlaXIgc3Ryb25naG9sZHMsIHN1YmR1aW5nIGNpdGllcywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCByZWNlaXZpbmcgdGhvc2Ugd2hvIGNhbWUgb3ZlciB0byBoaXMgc2lkZSwgdW50aWwgdGhlIG5hdGlvbiBvZiB0aGUgQWVkdWkgYWxzbyBlbnRlcmVkIHRoZSB3YXIgYWdhaW5zdCBoaW0uIFRoZXNlIHVwIHRvIHRoaXMgdGltZSBoYWQgY2FsbGVkIHRoZW1zZWx2ZXMgYnJldGhyZW4gb2YgdGhlIFJvbWFucyBhbmQgaGFkIGJlZW4gY29uc3BpY3VvdXNseSBob25vdXJlZCwgYnV0IG5vdywgYnkgam9pbmluZyB0aGUgcmViZWxzLCB0aGV5IGNhdXNlZCBncmVhdCBkZWplY3Rpb24gaW4gQ2Flc2FyJ3MgYXJteS4gSW4gY29uc2VxdWVuY2Ugb2YgdGhpcyBDYWVzYXIgcmVtb3ZlZCBmcm9tIHRob3NlIHBhcnRzIGFuZCBwYXNzZWQgYWNyb3NzIHRoZSB0ZXJyaXRvcnkgb2YgdGhlIExpbmdvbmVzLCB3aXNoaW5nIHRvIHJlYWNoIHRoZSBjb3VudHJ5IG9mIHRoZSBTZXF1YW5pLCB3aG8gd2VyZSBmcmllbmRzLCBhbmQgc3Rvb2QgYXMgYSBidWx3YXJrIGJldHdlZW4gSXRhbHkgYW5kIHRoZSByZXN0IG9mIEdhdWwuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHRoZSBlbmVteSBmZWxsIHVwb24gaGltIGFuZCBzdXJyb3VuZGVkIGhpbSB3aXRoIG1hbnkgdGVucyBvZiB0aG91c2FuZHMsIHNvIHRoYXQgaGUgZXNzYXllZCB0byBmaWdodCBhIGRlY2lzaXZlIGJhdHRsZS4gSW4gdGhlIG1haW4gaGUgZ290IHRoZSBiZXN0IG9mIHRoZSBzdHJ1Z2dsZSwgYW5kIGFmdGVyIGEgbG9uZyB0aW1lIGFuZCBtdWNoIHNsYXVnaHRlciBvdmVycG93ZXJlZCB0aGUgQmFyYmFyaWFuczsgYnV0IGl0IGFwcGVhcnMgdGhhdCBhdCBmaXJzdCBoZSBtZXQgd2l0aCBzb21lIHJldmVyc2UsIGFuZCB0aGUgQXJ2ZXJuaSBzaG93IGEgc2hvcnQtc3dvcmQgaGFuZ2luZyBpbiBhIHRlbXBsZSwgd2hpY2ggdGhleSBzYXkgd2FzIGNhcHR1cmVkIGZyb20gQ2Flc2FyLiBXaGVuIENhZXNhciBoaW1zZWxmIHNhdyBpdCwgYXQgYSBsYXRlciB0aW1lLCBoZSBzbWlsZWQsIGFuZCB0aG91Z2ggaGlzIGZyaWVuZHMgdXJnZWQgaGltIHRvIGhhdmUgaXQgdGFrZW4gZG93biwgaGUgd291bGQgbm90IHBlcm1pdCBpdCwgY29uc2lkZXJpbmcgaXQgc2FjcmVkLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBtb3N0IG9mIHRoZSBCYXJiYXJpYW5zIHdobyBlc2NhcGVkIGF0IHRoYXQgdGltZSB0b29rIHJlZnVnZSB3aXRoIHRoZWlyIGtpbmcgaW4gdGhlIGNpdHkgb2YgQWxlc2lhLiBBbmQgd2hpbGUgQ2Flc2FyIHdhcyBiZXNpZWdpbmcgdGhpcyBjaXR5LCB3aGljaCB3YXMgdGhvdWdodCB0byBiZSBpbXByZWduYWJsZSBieSByZWFzb24gb2YgdGhlIGdyZWF0IHNpemUgb2YgaXRzIHdhbGxzIGFuZCB0aGUgbnVtYmVyIG9mIHRoZWlyIGRlZmVuZGVycywgdGhlcmUgZmVsbCB1cG9uIGhpbSBmcm9tIG91dHNpZGUgdGhlIGNpdHkgYSBwZXJpbCB0b28gZ3JlYXQgZm9yIHdvcmRzIHRvIGRlcGljdC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGFsbCB0aGF0IHdhcyBtaWdodGllc3QgYW1vbmcgdGhlIG5hdGlvbnMgb2YgR2F1bCBhc3NlbWJsZWQgYW5kIGNhbWUgaW4gYXJtcyB0byBBbGVzaWEsIHRocmVlIGh1bmRyZWQgdGhvdXNhbmQgc3Ryb25nOyBhbmQgdGhlIG51bWJlciBvZiBmaWdodGluZyBtZW4gaW5zaWRlIHRoZSBjaXR5IHdhcyBub3QgbGVzcyB0aGFuIGEgaHVuZHJlZCBhbmQgc2V2ZW50eSB0aG91c2FuZC4gVGh1cyBDYWVzYXIsIGNhdWdodCBiZXR3ZWVuIHNvIGxhcmdlIGhvc3RpbGUgZm9yY2VzIGFuZCBiZXNpZWdlZCB0aGVyZSwgd2FzIGNvbXBlbGxlZCB0byBidWlsZCB0d28gd2FsbHMgZm9yIGhpcyBwcm90ZWN0aW9uLCBvbmUgbG9va2luZyB0b3dhcmRzIHRoZSBjaXR5LCBhbmQgdGhlIG90aGVyIHRvd2FyZHMgdGhvc2Ugd2hvIGhhZCBjb21lIHVwIHRvIHJlbGlldmUgaXQ7IGhlIGZlbHQgdGhhdCBpZiB0aGUgdHdvIGZvcmNlcyBzaG91bGQgdW5pdGUgaGlzIGNhdXNlIHdhcyB3aG9sbHkgbG9zdC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlIG1vc3Qgb2YgdGhlIEJhcmJhcmlhbnMgd2hvIGVzY2FwZWQgYXQgdGhhdCB0aW1lIHRvb2sgcmVmdWdlIHdpdGggdGhlaXIga2luZyBpbiB0aGUgY2l0eSBvZiBBbGVzaWEuIEFuZCB3aGlsZSBDYWVzYXIgd2FzIGJlc2llZ2luZyB0aGlzIGNpdHksIHdoaWNoIHdhcyB0aG91Z2h0IHRvIGJlIGltcHJlZ25hYmxlIGJ5IHJlYXNvbiBvZiB0aGUgZ3JlYXQgc2l6ZSBvZiBpdHMgd2FsbHMgYW5kIHRoZSBudW1iZXIgb2YgdGhlaXIgZGVmZW5kZXJzLCB0aGVyZSBmZWxsIHVwb24gaGltIGZyb20gb3V0c2lkZSB0aGUgY2l0eSBhIHBlcmlsIHRvbyBncmVhdCBmb3Igd29yZHMgdG8gZGVwaWN0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbGwgdGhhdCB3YXMgbWlnaHRpZXN0IGFtb25nIHRoZSBuYXRpb25zIG9mIEdhdWwgYXNzZW1ibGVkIGFuZCBjYW1lIGluIGFybXMgdG8gQWxlc2lhLCB0aHJlZSBodW5kcmVkIHRob3VzYW5kIHN0cm9uZzsgYW5kIHRoZSBudW1iZXIgb2YgZmlnaHRpbmcgbWVuIGluc2lkZSB0aGUgY2l0eSB3YXMgbm90IGxlc3MgdGhhbiBhIGh1bmRyZWQgYW5kIHNldmVudHkgdGhvdXNhbmQuIFRodXMgQ2Flc2FyLCBjYXVnaHQgYmV0d2VlbiBzbyBsYXJnZSBob3N0aWxlIGZvcmNlcyBhbmQgYmVzaWVnZWQgdGhlcmUsIHdhcyBjb21wZWxsZWQgdG8gYnVpbGQgdHdvIHdhbGxzIGZvciBoaXMgcHJvdGVjdGlvbiwgb25lIGxvb2tpbmcgdG93YXJkcyB0aGUgY2l0eSwgYW5kIHRoZSBvdGhlciB0b3dhcmRzIHRob3NlIHdobyBoYWQgY29tZSB1cCB0byByZWxpZXZlIGl0OyBoZSBmZWx0IHRoYXQgaWYgdGhlIHR3byBmb3JjZXMgc2hvdWxkIHVuaXRlIGhpcyBjYXVzZSB3YXMgd2hvbGx5IGxvc3QuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG1hbnkgcmVhc29ucywgdGhlbiwgYW5kIG5hdHVyYWxseSwgQ2Flc2FyJ3MgcGVyaWwgYXQgQWxlc2lhIHdhcyBmYW1vdXMsIHNpbmNlIGl0IHByb2R1Y2VkIG1vcmUgZGVlZHMgb2Ygc2tpbGwgYW5kIGRhcmluZyB0aGFuIGFueSBvZiBoaXMgb3RoZXIgc3RydWdnbGVzOyBidXQgb25lIG11c3QgYmUgYW1hemVkIGFib3ZlIGFsbCB0aGF0IGhlIGVuZ2FnZWQgYW5kIGNvbnF1ZXJlZCBzbyBtYW55IHRlbnMgb2YgdGhvdXNhbmRzIG91dHNpZGUgdGhlIGNpdHkgd2l0aG91dCB0aGUga25vd2xlZGdlIG9mIHRob3NlIGluc2lkZSwgbmF5IG1vcmUsIHdpdGhvdXQgdGhlIGtub3dsZWRnZSBldmVuIG9mIHRoZSBSb21hbnMgd2hvIHdlcmUgZ3VhcmRpbmcgdGhlIHdhbGwgdGhhdCBmYWNlZCB0aGUgY2l0eS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXNlIGRpZCBub3QgbGVhcm4gb2YgdGhlIFZpY3RvcnkgdW50aWwgdGhlIHdhaWxpbmcgb2YgdGhlIG1lbiBpbiBBbGVzaWEgYW5kIHRoZSBsYW1lbnRhdGlvbnMgb2YgdGhlIHdvbWVuIHdlcmUgaGVhcmQsIGFzIHRoZXkgYmVoZWxkIGluIHRoZSBxdWFydGVycyBvZiB0aGUgZW5lbXkgbWFueSBzaGllbGRzIGFkb3JuZWQgd2l0aCBnb2xkIGFuZCBzaWx2ZXIsIG1hbnkgY29yc2VsZXRzIHNtZWFyZWQgd2l0aCBibG9vZCwgYW5kIGFsc28gZHJpbmtpbmcgY3VwcyBhbmQgdGVudHMgb2YgR2FsbGljIGZhc2hpb24gY2FycmllZCBieSB0aGUgUm9tYW5zIGludG8gdGhlaXIgY2FtcC4gU28gcXVpY2tseSBkaWQgc28gZ3JlYXQgYSBmb3JjZSwgbGlrZSBhIHBoYW50b20gb3IgYSBkcmVhbSwgZGlzcGVyc2UgYW5kIHZhbmlzaCBvdXQgb2Ygc2lnaHQsIHRoZSBncmVhdGVyIHBhcnQgb2YgdGhlbSBoYXZpbmcgZmFsbGVuIGluIHRoZSBiYXR0bGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyBoZWxkIEFsZXNpYSwgdG9vLCBhZnRlciBnaXZpbmcgdGhlbXNlbHZlcyBhbmQgQ2Flc2FyIG5vIHNtYWxsIHRyb3VibGUsIGZpbmFsbHkgc3VycmVuZGVyZWQuIEFuZCB0aGUgbGVhZGVyIG9mIHRoZSB3aG9sZSB3YXIsIFZlcmdlbnRvcml4LCBhZnRlciBwdXR0aW5nIG9uIGhpcyBtb3N0IGJlYXV0aWZ1bCBhcm1vdXIgYW5kIGRlY29yYXRpbmcgaGlzIGhvcnNlLCByb2RlIG91dCB0aHJvdWdoIHRoZSBnYXRlLiBIZSBtYWRlIGEgY2lyY3VpdCByb3VuZCBDYWVzYXIsIHdobyByZW1haW5lZCBzZWF0ZWQsIGFuZCB0aGVuIGxlYXBlZCBkb3duIGZyb20gaGlzIGhvcnNlLCBzdHJpcHBlZCBvZmYgaGlzIHN1aXQgb2YgYXJtb3VyLCBhbmQgc2VhdGluZyBoaW1zZWxmIGF0IENhZXNhcidzIGZlZXQgcmVtYWluZWQgbW90aW9ubGVzcywgdW50aWwgaGUgd2FzIGRlbGl2ZXJlZCB1cCB0byBiZSBrZXB0IGluIGN1c3RvZHkgZm9yIHRoZSB0cml1bXBoLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBtYW55IHJlYXNvbnMsIHRoZW4sIGFuZCBuYXR1cmFsbHksIENhZXNhcidzIHBlcmlsIGF0IEFsZXNpYSB3YXMgZmFtb3VzLCBzaW5jZSBpdCBwcm9kdWNlZCBtb3JlIGRlZWRzIG9mIHNraWxsIGFuZCBkYXJpbmcgdGhhbiBhbnkgb2YgaGlzIG90aGVyIHN0cnVnZ2xlczsgYnV0IG9uZSBtdXN0IGJlIGFtYXplZCBhYm92ZSBhbGwgdGhhdCBoZSBlbmdhZ2VkIGFuZCBjb25xdWVyZWQgc28gbWFueSB0ZW5zIG9mIHRob3VzYW5kcyBvdXRzaWRlIHRoZSBjaXR5IHdpdGhvdXQgdGhlIGtub3dsZWRnZSBvZiB0aG9zZSBpbnNpZGUsIG5heSBtb3JlLCB3aXRob3V0IHRoZSBrbm93bGVkZ2UgZXZlbiBvZiB0aGUgUm9tYW5zIHdobyB3ZXJlIGd1YXJkaW5nIHRoZSB3YWxsIHRoYXQgZmFjZWQgdGhlIGNpdHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSBkaWQgbm90IGxlYXJuIG9mIHRoZSBWaWN0b3J5IHVudGlsIHRoZSB3YWlsaW5nIG9mIHRoZSBtZW4gaW4gQWxlc2lhIGFuZCB0aGUgbGFtZW50YXRpb25zIG9mIHRoZSB3b21lbiB3ZXJlIGhlYXJkLCBhcyB0aGV5IGJlaGVsZCBpbiB0aGUgcXVhcnRlcnMgb2YgdGhlIGVuZW15IG1hbnkgc2hpZWxkcyBhZG9ybmVkIHdpdGggZ29sZCBhbmQgc2lsdmVyLCBtYW55IGNvcnNlbGV0cyBzbWVhcmVkIHdpdGggYmxvb2QsIGFuZCBhbHNvIGRyaW5raW5nIGN1cHMgYW5kIHRlbnRzIG9mIEdhbGxpYyBmYXNoaW9uIGNhcnJpZWQgYnkgdGhlIFJvbWFucyBpbnRvIHRoZWlyIGNhbXAuIFNvIHF1aWNrbHkgZGlkIHNvIGdyZWF0IGEgZm9yY2UsIGxpa2UgYSBwaGFudG9tIG9yIGEgZHJlYW0sIGRpc3BlcnNlIGFuZCB2YW5pc2ggb3V0IG9mIHNpZ2h0LCB0aGUgZ3JlYXRlciBwYXJ0IG9mIHRoZW0gaGF2aW5nIGZhbGxlbiBpbiB0aGUgYmF0dGxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyBoZWxkIEFsZXNpYSwgdG9vLCBhZnRlciBnaXZpbmcgdGhlbXNlbHZlcyBhbmQgQ2Flc2FyIG5vIHNtYWxsIHRyb3VibGUsIGZpbmFsbHkgc3VycmVuZGVyZWQuIEFuZCB0aGUgbGVhZGVyIG9mIHRoZSB3aG9sZSB3YXIsIFZlcmdlbnRvcml4LCBhZnRlciBwdXR0aW5nIG9uIGhpcyBtb3N0IGJlYXV0aWZ1bCBhcm1vdXIgYW5kIGRlY29yYXRpbmcgaGlzIGhvcnNlLCByb2RlIG91dCB0aHJvdWdoIHRoZSBnYXRlLiBIZSBtYWRlIGEgY2lyY3VpdCByb3VuZCBDYWVzYXIsIHdobyByZW1haW5lZCBzZWF0ZWQsIGFuZCB0aGVuIGxlYXBlZCBkb3duIGZyb20gaGlzIGhvcnNlLCBzdHJpcHBlZCBvZmYgaGlzIHN1aXQgb2YgYXJtb3VyLCBhbmQgc2VhdGluZyBoaW1zZWxmIGF0IENhZXNhcidzIGZlZXQgcmVtYWluZWQgbW90aW9ubGVzcywgdW50aWwgaGUgd2FzIGRlbGl2ZXJlZCB1cCB0byBiZSBrZXB0IGluIGN1c3RvZHkgZm9yIHRoZSB0cml1bXBoLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQ2Flc2FyIGhhZCBsb25nIGFnbyBkZWNpZGVkIHRvIHB1dCBkb3duIFBvbXBleSwganVzdCBhcywgb2YgY291cnNlLCBQb21wZXkgYWxzbyBoYWQgZGVjaWRlZCB0byBwdXQgQ2Flc2FyIGRvd24uIEZvciBub3cgdGhhdCBDcmFzc3VzLCB3aG8gd2FzIG9ubHkgd2FpdGluZyBmb3IgdGhlIGlzc3VlIG9mIHRoZWlyIHN0cnVnZ2xlIHRvIGVuZ2FnZSB0aGUgdmljdG9yLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDUzLjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGxpaWkuIDY8L2JpYmw+Ljwvbm90ZT4gaGFkIHBlcmlzaGVkIGFtb25nIHRoZSBQYXJ0aGlhbnMsIGl0IHJlbWFpbmVkIGZvciBoaW0gd2hvIHdvdWxkIGJlIGdyZWF0ZXN0IHRvIHB1dCBkb3duIGhpbSB3aG8gd2FzLCBhbmQgZm9yIGhpbSB3aG8gd2FzIGdyZWF0ZXN0LCBpZiBoZSB3b3VsZCBub3QgYmUgcHV0IGRvd24sIHRvIHRha2Ugb2ZmIGluIHRpbWUgdGhlIG1hbiBoZSBmZWFyZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZmVhciBoYWQgb25seSByZWNlbnRseSBjb21lIHVwb24gUG9tcGV5LCB3aG8gdGlsbCB0aGVuIGRlc3Bpc2VkIENhZXNhciwgZmVlbGluZyB0aGF0IGl0IHdhcyBubyBoYXJkIHRhc2sgdG8gcHV0IGRvd24gYWdhaW4gdGhlIG1hbiB3aG9tIGhlIGhpbXNlbGYgaGFkIHJhaXNlZCBvbiBoaWdoLiBCdXQgQ2Flc2FyIGhhZCBmcm9tIHRoZSBvdXRzZXQgZm9ybWVkIHRoaXMgZGVzaWduLCBhbmQgbGlrZSBhbiBhdGhsZXRlIGhhZCByZW1vdmVkIGhpbXNlbGYgdG8gYSBncmVhdCBkaXN0YW5jZSBmcm9tIGhpcyBhbnRhZ29uaXN0cywgYW5kIGJ5IGV4ZXJjaXNpbmcgaGltc2VsZiBpbiB0aGUgR2FsbGljIHdhcnMgaGFkIHByYWN0aXNlZCBoaXMgdHJvb3BzIGFuZCBpbmNyZWFzZWQgaGlzIGZhbWUsIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmxpZnRpbmcgaGltc2VsZiBieSBoaXMgYWNoaWV2ZW1lbnRzIHRvIGEgaGVpZ2h0IHdoZXJlIGhlIGNvdWxkIHZpZSB3aXRoIHRoZSBzdWNjZXNzZXMgb2YgUG9tcGV5LiBIZSBsYWlkIGhvbGQgb2YgcHJldGV4dHMgd2hpY2ggd2VyZSBmdXJuaXNoZWQgcGFydGx5IGJ5IFBvbXBleSBoaW1zZWxmLCBhbmQgcGFydGx5IGJ5IHRoZSB0aW1lcyBhbmQgdGhlIGV2aWwgc3RhdGUgb2YgZ292ZXJubWVudCBhdCBSb21lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXIgbGl2PC9iaWJsPi48L25vdGU+IGJ5IHJlYXNvbiBvZiB3aGljaCBjYW5kaWRhdGVzIGZvciBvZmZpY2Ugc2V0IHVwIGNvdW50aW5nLXRhYmxlcyBpbiBwdWJsaWMgYW5kIHNoYW1lbGVzc2x5IGJyaWJlZCB0aGUgbXVsdGl0dWRlcywgd2hpbGUgdGhlIHBlb3BsZSB3ZW50IGRvd24gaW50byB0aGUgZm9ydW0gdW5kZXIgcGF5LCBjb250ZW5kaW5nIGluIGJlaGFsZiBvZiB0aGVpciBwYXltYXN0ZXIsIG5vdCB3aXRoIHZvdGVzLCBidXQgd2l0aCBib3dzIGFuZCBhcnJvd3MsIHN3b3JkcywgYW5kIHNsaW5ncy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T2Z0ZW4sIHRvbywgdGhleSB3b3VsZCBkZWZpbGUgdGhlIHJvc3RyYSB3aXRoIGJsb29kIGFuZCBjb3Jwc2VzIGJlZm9yZSB0aGV5IHNlcGFyYXRlZCwgbGVhdmluZyB0aGUgY2l0eSB0byBhbmFyY2h5IGxpa2UgYSBzaGlwIGRyaWZ0aW5nIGFib3V0IHdpdGhvdXQgYSBzdGVlcnNtYW4sIHNvIHRoYXQgbWVuIG9mIHVuZGVyc3RhbmRpbmcgd2VyZSBjb250ZW50IGlmIG1hdHRlcnMgaXNzdWVkIGluIG5vdGhpbmcgd29yc2UgZm9yIHRoZW0gdGhhbiBtb25hcmNoeSwgYWZ0ZXIgc3VjaCBtYWRuZXNzIGFuZCBzbyBncmVhdCBhIHRlbXBlc3QuIEFuZCB0aGVyZSB3ZXJlIG1hbnkgd2hvIGFjdHVhbGx5IGRhcmVkIHRvIHNheSBpbiBwdWJsaWMgdGhhdCBub3RoaW5nIGJ1dCBtb25hcmNoeSBjb3VsZCBub3cgY3VyZSB0aGUgZGlzZWFzZXMgb2YgdGhlIHN0YXRlLCBhbmQgdGhhdCB0aGlzIHJlbWVkeSBtaWdodCB0byBiZSBhZG9wdGVkIHdoZW4gb2ZmZXJlZCBieSB0aGUgZ2VudGxlc3Qgb2YgcGh5c2ljaWFucywgaGludGluZyBhdCBQb21wZXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGV2ZW4gUG9tcGV5LCBhbHRob3VnaCBpbiB3b3JkcyBoZSBhZmZlY3RlZCB0byBkZWNsaW5lIHRoZSBob25vdXIsIGluIGZhY3QgZGlkIG1vcmUgdGhhbiBhbnkgb25lIGVsc2UgdG8gZWZmZWN0IGhpcyBhcHBvaW50bWVudCBhcyBkaWN0YXRvciwgQ2F0byBzYXcgdGhyb3VnaCBoaXMgZGVzaWduIGFuZCBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byBhcHBvaW50IGhpbSBzb2xlIGNvbnN1bCwgc29sYWNpbmcgaGltIHdpdGggYSBtb3JlIGxlZ2FsIG1vbmFyY2h5IHRoYXQgaGUgbWlnaHQgbm90IGZvcmNlIGhpcyB3YXkgdG8gdGhlIGRpY3RhdG9yc2hpcC4gVGhleSBhbHNvIHZvdGVkIGhpbSBhZGRpdGlvbmFsIHRpbWUgaW4gd2hpY2ggdG8gaG9sZCBoaXMgcHJvdmluY2VzOyBhbmQgaGUgaGFkIHR3bywgU3BhaW4gYW5kIGFsbCBBZnJpY2EsIHdoaWNoIGhlIG1hbmFnZWQgYnkgc2VuZGluZyBsZWdhdGVzIHRoaXRoZXIgYW5kIG1haW50YWluaW5nIGFybWllcyB0aGVyZSwgZm9yIHdoaWNoIGhlIHJlY2VpdmVkIGZyb20gdGhlIHB1YmxpYyB0cmVhc3VyeSBhIHRob3VzYW5kIHRhbGVudHMgYW5udWFsbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTUuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHYuIDc8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBDYWVzYXIgaGFkIGxvbmcgYWdvIGRlY2lkZWQgdG8gcHV0IGRvd24gUG9tcGV5LCBqdXN0IGFzLCBvZiBjb3Vyc2UsIFBvbXBleSBhbHNvIGhhZCBkZWNpZGVkIHRvIHB1dCBDYWVzYXIgZG93bi4gRm9yIG5vdyB0aGF0IENyYXNzdXMsIHdobyB3YXMgb25seSB3YWl0aW5nIGZvciB0aGUgaXNzdWUgb2YgdGhlaXIgc3RydWdnbGUgdG8gZW5nYWdlIHRoZSB2aWN0b3IsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDUzLjYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbGlpaS4gNjwvYmlibD4uPC9ub3RlPiBoYWQgcGVyaXNoZWQgYW1vbmcgdGhlIFBhcnRoaWFucywgaXQgcmVtYWluZWQgZm9yIGhpbSB3aG8gd291bGQgYmUgZ3JlYXRlc3QgdG8gcHV0IGRvd24gaGltIHdobyB3YXMsIGFuZCBmb3IgaGltIHdobyB3YXMgZ3JlYXRlc3QsIGlmIGhlIHdvdWxkIG5vdCBiZSBwdXQgZG93biwgdG8gdGFrZSBvZmYgaW4gdGltZSB0aGUgbWFuIGhlIGZlYXJlZC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1My42IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGxpaWkuIDY8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsaWlpLiA2PC90cmFuc2xhdGlvbj4="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZmVhciBoYWQgb25seSByZWNlbnRseSBjb21lIHVwb24gUG9tcGV5LCB3aG8gdGlsbCB0aGVuIGRlc3Bpc2VkIENhZXNhciwgZmVlbGluZyB0aGF0IGl0IHdhcyBubyBoYXJkIHRhc2sgdG8gcHV0IGRvd24gYWdhaW4gdGhlIG1hbiB3aG9tIGhlIGhpbXNlbGYgaGFkIHJhaXNlZCBvbiBoaWdoLiBCdXQgQ2Flc2FyIGhhZCBmcm9tIHRoZSBvdXRzZXQgZm9ybWVkIHRoaXMgZGVzaWduLCBhbmQgbGlrZSBhbiBhdGhsZXRlIGhhZCByZW1vdmVkIGhpbXNlbGYgdG8gYSBncmVhdCBkaXN0YW5jZSBmcm9tIGhpcyBhbnRhZ29uaXN0cywgYW5kIGJ5IGV4ZXJjaXNpbmcgaGltc2VsZiBpbiB0aGUgR2FsbGljIHdhcnMgaGFkIHByYWN0aXNlZCBoaXMgdHJvb3BzIGFuZCBpbmNyZWFzZWQgaGlzIGZhbWUsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmxpZnRpbmcgaGltc2VsZiBieSBoaXMgYWNoaWV2ZW1lbnRzIHRvIGEgaGVpZ2h0IHdoZXJlIGhlIGNvdWxkIHZpZSB3aXRoIHRoZSBzdWNjZXNzZXMgb2YgUG9tcGV5LiBIZSBsYWlkIGhvbGQgb2YgcHJldGV4dHMgd2hpY2ggd2VyZSBmdXJuaXNoZWQgcGFydGx5IGJ5IFBvbXBleSBoaW1zZWxmLCBhbmQgcGFydGx5IGJ5IHRoZSB0aW1lcyBhbmQgdGhlIGV2aWwgc3RhdGUgb2YgZ292ZXJubWVudCBhdCBSb21lLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXIgbGl2PC9iaWJsPi48L25vdGU+IGJ5IHJlYXNvbiBvZiB3aGljaCBjYW5kaWRhdGVzIGZvciBvZmZpY2Ugc2V0IHVwIGNvdW50aW5nLXRhYmxlcyBpbiBwdWJsaWMgYW5kIHNoYW1lbGVzc2x5IGJyaWJlZCB0aGUgbXVsdGl0dWRlcywgd2hpbGUgdGhlIHBlb3BsZSB3ZW50IGRvd24gaW50byB0aGUgZm9ydW0gdW5kZXIgcGF5LCBjb250ZW5kaW5nIGluIGJlaGFsZiBvZiB0aGVpciBwYXltYXN0ZXIsIG5vdCB3aXRoIHZvdGVzLCBidXQgd2l0aCBib3dzIGFuZCBhcnJvd3MsIHN3b3JkcywgYW5kIHNsaW5ncy4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGNoYXB0ZXIgbGl2PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgY2hhcHRlciBsaXY8L3RyYW5zbGF0aW9uPg=="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9mdGVuLCB0b28sIHRoZXkgd291bGQgZGVmaWxlIHRoZSByb3N0cmEgd2l0aCBibG9vZCBhbmQgY29ycHNlcyBiZWZvcmUgdGhleSBzZXBhcmF0ZWQsIGxlYXZpbmcgdGhlIGNpdHkgdG8gYW5hcmNoeSBsaWtlIGEgc2hpcCBkcmlmdGluZyBhYm91dCB3aXRob3V0IGEgc3RlZXJzbWFuLCBzbyB0aGF0IG1lbiBvZiB1bmRlcnN0YW5kaW5nIHdlcmUgY29udGVudCBpZiBtYXR0ZXJzIGlzc3VlZCBpbiBub3RoaW5nIHdvcnNlIGZvciB0aGVtIHRoYW4gbW9uYXJjaHksIGFmdGVyIHN1Y2ggbWFkbmVzcyBhbmQgc28gZ3JlYXQgYSB0ZW1wZXN0LiBBbmQgdGhlcmUgd2VyZSBtYW55IHdobyBhY3R1YWxseSBkYXJlZCB0byBzYXkgaW4gcHVibGljIHRoYXQgbm90aGluZyBidXQgbW9uYXJjaHkgY291bGQgbm93IGN1cmUgdGhlIGRpc2Vhc2VzIG9mIHRoZSBzdGF0ZSwgYW5kIHRoYXQgdGhpcyByZW1lZHkgbWlnaHQgdG8gYmUgYWRvcHRlZCB3aGVuIG9mZmVyZWQgYnkgdGhlIGdlbnRsZXN0IG9mIHBoeXNpY2lhbnMsIGhpbnRpbmcgYXQgUG9tcGV5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIGV2ZW4gUG9tcGV5LCBhbHRob3VnaCBpbiB3b3JkcyBoZSBhZmZlY3RlZCB0byBkZWNsaW5lIHRoZSBob25vdXIsIGluIGZhY3QgZGlkIG1vcmUgdGhhbiBhbnkgb25lIGVsc2UgdG8gZWZmZWN0IGhpcyBhcHBvaW50bWVudCBhcyBkaWN0YXRvciwgQ2F0byBzYXcgdGhyb3VnaCBoaXMgZGVzaWduIGFuZCBwZXJzdWFkZWQgdGhlIHNlbmF0ZSB0byBhcHBvaW50IGhpbSBzb2xlIGNvbnN1bCwgc29sYWNpbmcgaGltIHdpdGggYSBtb3JlIGxlZ2FsIG1vbmFyY2h5IHRoYXQgaGUgbWlnaHQgbm90IGZvcmNlIGhpcyB3YXkgdG8gdGhlIGRpY3RhdG9yc2hpcC4gVGhleSBhbHNvIHZvdGVkIGhpbSBhZGRpdGlvbmFsIHRpbWUgaW4gd2hpY2ggdG8gaG9sZCBoaXMgcHJvdmluY2VzOyBhbmQgaGUgaGFkIHR3bywgU3BhaW4gYW5kIGFsbCBBZnJpY2EsIHdoaWNoIGhlIG1hbmFnZWQgYnkgc2VuZGluZyBsZWdhdGVzIHRoaXRoZXIgYW5kIG1haW50YWluaW5nIGFybWllcyB0aGVyZSwgZm9yIHdoaWNoIGhlIHJlY2VpdmVkIGZyb20gdGhlIHB1YmxpYyB0cmVhc3VyeSBhIHRob3VzYW5kIHRhbGVudHMgYW5udWFsbHkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU1LjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHYuIDc8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTUuNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsdi4gNzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx2LiA3PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2VxdWVudGx5LCBDYWVzYXIgY2FudmFzc2VkIGJ5IHByb3h5IGZvciBhIGNvbnN1bHNoaXAsIGFuZCBsaWtld2lzZSBmb3IgYW4gZXh0ZW5zaW9uIG9mIHRpbWUgaW4gd2hpY2ggdG8gaG9sZCBoaXMgb3duIHByb3ZpbmNlcy4gQXQgZmlyc3QsIHRoZW4sIFBvbXBleSBoZWxkIGhpcyBwZWFjZSwgd2hpbGUgTWFyY2VsbHVzIGFuZCBMZW50dWx1cyBvcHBvc2VkIHRoZXNlIHBsYW5zOyB0aGV5IGhhdGVkIENhZXNhciBvbiBvdGhlciBncm91bmRzLCBhbmQgd2VudCBiZXlvbmQgYWxsIGJvdW5kcyBpbiB0aGVpciBlZmZvcnRzIHRvIGJyaW5nIGRpc2hvbm91ciBhbmQgYWJ1c2UgdXBvbiBoaW0uIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgdGhlIGluaGFiaXRhbnRzIG9mIE5vdnVtIENvbXVtLCBhIGNvbG9ueSByZWNlbnRseSBlc3RhYmxpc2hlZCBieSBDYWVzYXIgaW4gR2F1bCwgd2VyZSBkZXByaXZlZCBvZiBjaXRpemVuc2hpcCBieSB0aGVtOyBhbmQgTWFyY2VsbHVzLCB3aGlsZSBoZSB3YXMgY29uc3VsLCBiZWF0IHdpdGggcm9kcyBhIHNlbmF0b3Igb2YgTm92dW0gQ29tdW0gd2hvIGhhZCBjb21lIHRvIFJvbWUsIHRlbGxpbmcgaGltIGJlc2lkZXMgdGhhdCBoZSBwdXQgdGhlc2UgbWFya3MgdXBvbiBoaW0gdG8gcHJvdmUgdGhhdCBoZSB3YXMgbm90IGEgUm9tYW4sIGFuZCBiYWRlIGhpbSBnbyBiYWNrIGFuZCBzaG93IHRoZW0gdG8gQ2Flc2FyLiBCdXQgYWZ0ZXIgdGhlIGNvbnN1bHNoaXAgb2YgTWFyY2VsbHVzLCBDYWVzYXIgaGF2aW5nIG5vdyBzZW50IGhpcyBHYWxsaWMgd2VhbHRoIGZvciBhbGwgdGhvc2UgaW4gcHVibGljIGxpZmUgdG8gZHJhdyBmcm9tIGluIGNvcGlvdXMgc3RyZWFtcywgYW5kIGhhdmluZyBmcmVlZCBDdXJpbyB0aGUgdHJpYnVuZSBmcm9tIG1hbnkgZGVidHMsIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgZ2l2ZW4gUGF1bHVzIHRoZSBjb25zdWwgZmlmdGVlbiBodW5kcmVkIHRhbGVudHMsIG91dCBvZiB3aGljaCBoZSBhZG9ybmVkIHRoZSBmb3J1bSB3aXRoIHRoZSBCYXNpbGljYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgPGZvcmVpZ24gbGFuZz0ibGEiPkJhc2lsaWNhIFBhdWxpIEFlbWlsaWk8L2ZvcmVpZ24+LCBjYWxsZWQgYWxzbyA8Zm9yZWlnbiBsYW5nPSJsYSI+UmVnaWEgUGF1bGk8L2ZvcmVpZ24+LiBJdCB0b29rIHRoZSBwbGFjZSBvZiB0aGUgPGZvcmVpZ24gbGFuZz0ibGEiPkJhc2lsaWNhIEFlbWlsaWEgZXQgRnVsdmlhPC9mb3JlaWduPiwgZXJlY3RlZCBpbiAxNzkgQi5DLiA8L25vdGU+IGEgZmFtb3VzIG1vbnVtZW50LCBlcmVjdGVkIGluIHBsYWNlIG9mIHRoZSBGdWx2aWEs4oCUdW5kZXIgdGhlc2UgY2lyY3Vtc3RhbmNlcyBQb21wZXkgdG9vayBmcmlnaHQgYXQgdGhlIGNvYWxpdGlvbiwgYW5kIG9wZW5seSBub3csIGJ5IGhpcyBvd24gZWZmb3J0cyBhbmQgdGhvc2Ugb2YgaGlzIGZyaWVuZHMsIHRyaWVkIHRvIGhhdmUgYSBzdWNjZXNzb3IgYXBwb2ludGVkIHRvIENhZXNhciBpbiBoaXMgZ292ZXJubWVudCwgYW5kIHNlbnQgYSBkZW1hbmQgdG8gaGltIGZvciB0aGUgcmV0dXJuIG9mIHRoZSBzb2xkaWVycyB3aG9tIGhlIGhhZCBsZW50IGhpbSBmb3IgaGlzIEdhbGxpYyBjb250ZXN0cy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDI1LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2LiAxPC9iaWJsPi48L25vdGU+IENhZXNhciBzZW50IHRoZSBzb2xkaWVycyBiYWNrLCBhZnRlciBtYWtpbmcgYSBwcmVzZW50IHRvIGVhY2ggbWFuIG9mIHR3byBodW5kcmVkIGFuZCBmaWZ0eSBkcmFjaG1hcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBvZmZpY2VycyB3aG8gYnJvdWdodCB0aGVzZSBtZW4gdG8gUG9tcGV5IHNwcmVhZCBhYnJvYWQgYW1vbmcgdGhlIG11bHRpdHVkZSBzdG9yaWVzIHJlZ2FyZGluZyBDYWVzYXIgd2hpY2ggd2VyZSBuZWl0aGVyIHJlYXNvbmFibGUgbm9yIHRydWUsIGFuZCBydWluZWQgUG9tcGV5IGhpbXNlbGYgd2l0aCB2YWluIGhvcGVzLiBUaGV5IHRvbGQgaGltIHRoYXQgQ2Flc2FyJ3MgYXJteSB5ZWFybmVkIGZvciBoaW0sIGFuZCB0aGF0IHdoaWxlIGhlIHdhcyB3aXRoIGRpZmZpY3VsdHkgY29udHJvbGxpbmcgYWZmYWlycyBpbiB0aGUgY2l0eSBvd2luZyB0byB0aGUgZGlzZWFzZSBvZiBlbnZ5IHdoaWNoIGZlc3RlcmVkIGluIHRoZSBib2R5IHBvbGl0aWMsIHRoZSBmb3JjZXMgaW4gR2F1bCB3ZXJlIHJlYWR5IHRvIHNlcnZlIGhpbSwgYW5kIGhhZCBidXQgdG8gY3Jvc3MgaW50byBJdGFseSB3aGVuIHRoZXkgd291bGQgYXQgb25jZSBiZSBvbiBoaXMgc2lkZTsgc28gb2Jub3hpb3VzIHRvIHRoZW0gaGFkIENhZXNhciBiZWNvbWUgYnkgcmVhc29uIG9mIHRoZSBtdWx0aXR1ZGUgb2YgaGlzIGNhbXBhaWducywgYW5kIHNvIHN1c3BpY2lvdXMgb2YgaGltIHdlcmUgdGhleSBtYWRlIGJ5IHRoZWlyIGZlYXIgb2YgYSBtb25hcmNoeS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWxsIHRoaXMgZmVkIFBvbXBleSdzIHZhbml0eSwgYW5kIGhlIG5lZ2xlY3RlZCB0byBwcm92aWRlIGhpbXNlbGYgd2l0aCBzb2xkaWVycywgYXMgdGhvdWdoIGhlIGhhZCBubyBmZWFyczsgd2hpbGUgd2l0aCBzcGVlY2hlcyBhbmQgcmVzb2x1dGlvbnMgb2YgdGhlIHNlbmF0ZSBoZSB3YXMgY2FycnlpbmcgdGhlIGRheSBhZ2FpbnN0IENhZXNhciwgYXMgaGUgc3VwcG9zZWQsIGFsdGhvdWdoIGhlIHdhcyBtZXJlbHkgZ2V0dGluZyBtZWFzdXJlcyByZWplY3RlZCBhYm91dCB3aGljaCBDYWVzYXIgY2FyZWQgbmF1Z2h0LiBOYXksIHdlIGFyZSB0b2xkIHRoYXQgb25lIG9mIHRoZSBjZW50dXJpb25zIHNlbnQgdG8gUm9tZSBieSBDYWVzYXIsIGFzIGhlIHN0b29kIGluIGZyb250IG9mIHRoZSBzZW5hdGUtaG91c2UgYW5kIGxlYXJuZWQgdGhhdCB0aGUgc2VuYXRlIHdvdWxkIG5vdCBnaXZlIENhZXNhciBhbiBleHRlbnNpb24gb2YgaGlzIHRlcm0gb2YgY29tbWFuZCwgc2xhcHBlZCB0aGUgaGFuZGxlIG9mIGhpcyBzd29yZCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhpcyB3aWxsIGdpdmUgaXQ8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU4LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx2aWlpLiAyPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q29uc2VxdWVudGx5LCBDYWVzYXIgY2FudmFzc2VkIGJ5IHByb3h5IGZvciBhIGNvbnN1bHNoaXAsIGFuZCBsaWtld2lzZSBmb3IgYW4gZXh0ZW5zaW9uIG9mIHRpbWUgaW4gd2hpY2ggdG8gaG9sZCBoaXMgb3duIHByb3ZpbmNlcy4gQXQgZmlyc3QsIHRoZW4sIFBvbXBleSBoZWxkIGhpcyBwZWFjZSwgd2hpbGUgTWFyY2VsbHVzIGFuZCBMZW50dWx1cyBvcHBvc2VkIHRoZXNlIHBsYW5zOyB0aGV5IGhhdGVkIENhZXNhciBvbiBvdGhlciBncm91bmRzLCBhbmQgd2VudCBiZXlvbmQgYWxsIGJvdW5kcyBpbiB0aGVpciBlZmZvcnRzIHRvIGJyaW5nIGRpc2hvbm91ciBhbmQgYWJ1c2UgdXBvbiBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgdGhlIGluaGFiaXRhbnRzIG9mIE5vdnVtIENvbXVtLCBhIGNvbG9ueSByZWNlbnRseSBlc3RhYmxpc2hlZCBieSBDYWVzYXIgaW4gR2F1bCwgd2VyZSBkZXByaXZlZCBvZiBjaXRpemVuc2hpcCBieSB0aGVtOyBhbmQgTWFyY2VsbHVzLCB3aGlsZSBoZSB3YXMgY29uc3VsLCBiZWF0IHdpdGggcm9kcyBhIHNlbmF0b3Igb2YgTm92dW0gQ29tdW0gd2hvIGhhZCBjb21lIHRvIFJvbWUsIHRlbGxpbmcgaGltIGJlc2lkZXMgdGhhdCBoZSBwdXQgdGhlc2UgbWFya3MgdXBvbiBoaW0gdG8gcHJvdmUgdGhhdCBoZSB3YXMgbm90IGEgUm9tYW4sIGFuZCBiYWRlIGhpbSBnbyBiYWNrIGFuZCBzaG93IHRoZW0gdG8gQ2Flc2FyLiBCdXQgYWZ0ZXIgdGhlIGNvbnN1bHNoaXAgb2YgTWFyY2VsbHVzLCBDYWVzYXIgaGF2aW5nIG5vdyBzZW50IGhpcyBHYWxsaWMgd2VhbHRoIGZvciBhbGwgdGhvc2UgaW4gcHVibGljIGxpZmUgdG8gZHJhdyBmcm9tIGluIGNvcGlvdXMgc3RyZWFtcywgYW5kIGhhdmluZyBmcmVlZCBDdXJpbyB0aGUgdHJpYnVuZSBmcm9tIG1hbnkgZGVidHMsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBoYXZpbmcgZ2l2ZW4gUGF1bHVzIHRoZSBjb25zdWwgZmlmdGVlbiBodW5kcmVkIHRhbGVudHMsIG91dCBvZiB3aGljaCBoZSBhZG9ybmVkIHRoZSBmb3J1bSB3aXRoIHRoZSBCYXNpbGljYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5CYXNpbGljYSBQYXVsaSBBZW1pbGlpPC9mb3JlaWduPiwgY2FsbGVkIGFsc28gPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UmVnaWEgUGF1bGk8L2ZvcmVpZ24+LiBJdCB0b29rIHRoZSBwbGFjZSBvZiB0aGUgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+QmFzaWxpY2EgQWVtaWxpYSBldCBGdWx2aWE8L2ZvcmVpZ24+LCBlcmVjdGVkIGluIDE3OSBCLkMuIDwvbm90ZT4gYSBmYW1vdXMgbW9udW1lbnQsIGVyZWN0ZWQgaW4gcGxhY2Ugb2YgdGhlIEZ1bHZpYSzigJR1bmRlciB0aGVzZSBjaXJjdW1zdGFuY2VzIFBvbXBleSB0b29rIGZyaWdodCBhdCB0aGUgY29hbGl0aW9uLCBhbmQgb3Blbmx5IG5vdywgYnkgaGlzIG93biBlZmZvcnRzIGFuZCB0aG9zZSBvZiBoaXMgZnJpZW5kcywgdHJpZWQgdG8gaGF2ZSBhIHN1Y2Nlc3NvciBhcHBvaW50ZWQgdG8gQ2Flc2FyIGluIGhpcyBnb3Zlcm5tZW50LCBhbmQgc2VudCBhIGRlbWFuZCB0byBoaW0gZm9yIHRoZSByZXR1cm4gb2YgdGhlIHNvbGRpZXJzIHdob20gaGUgaGFkIGxlbnQgaGltIGZvciBoaXMgR2FsbGljIGNvbnRlc3RzLjxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkJhc2lsaWNhIFBhdWxpIEFlbWlsaWk8L2ZvcmVpZ24+LCBjYWxsZWQgYWxzbyA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5SZWdpYSBQYXVsaTwvZm9yZWlnbj4uIEl0IHRvb2sgdGhlIHBsYWNlIG9mIHRoZSA8Zm9yZWlnbiBjbGFzcz0idHJhbnNsYXRpb24iIGxhbmc9ImxhIj5CYXNpbGljYSBBZW1pbGlhIGV0IEZ1bHZpYTwvZm9yZWlnbj4sIGVyZWN0ZWQgaW4gMTc5IEIuQy4gPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2Flcy4gMjUuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciB4eHYuIDE8L2JpYmw+Ljwvbm90ZT4gQ2Flc2FyIHNlbnQgdGhlIHNvbGRpZXJzIGJhY2ssIGFmdGVyIG1ha2luZyBhIHByZXNlbnQgdG8gZWFjaCBtYW4gb2YgdHdvIGh1bmRyZWQgYW5kIGZpZnR5IGRyYWNobWFzLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENhZXMuIDI1LjEiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgeHh2LiAxPC9iaWJsPi48L3RyYW5zbGF0aW9uPg=="
translation['29.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgb2ZmaWNlcnMgd2hvIGJyb3VnaHQgdGhlc2UgbWVuIHRvIFBvbXBleSBzcHJlYWQgYWJyb2FkIGFtb25nIHRoZSBtdWx0aXR1ZGUgc3RvcmllcyByZWdhcmRpbmcgQ2Flc2FyIHdoaWNoIHdlcmUgbmVpdGhlciByZWFzb25hYmxlIG5vciB0cnVlLCBhbmQgcnVpbmVkIFBvbXBleSBoaW1zZWxmIHdpdGggdmFpbiBob3Blcy4gVGhleSB0b2xkIGhpbSB0aGF0IENhZXNhcidzIGFybXkgeWVhcm5lZCBmb3IgaGltLCBhbmQgdGhhdCB3aGlsZSBoZSB3YXMgd2l0aCBkaWZmaWN1bHR5IGNvbnRyb2xsaW5nIGFmZmFpcnMgaW4gdGhlIGNpdHkgb3dpbmcgdG8gdGhlIGRpc2Vhc2Ugb2YgZW52eSB3aGljaCBmZXN0ZXJlZCBpbiB0aGUgYm9keSBwb2xpdGljLCB0aGUgZm9yY2VzIGluIEdhdWwgd2VyZSByZWFkeSB0byBzZXJ2ZSBoaW0sIGFuZCBoYWQgYnV0IHRvIGNyb3NzIGludG8gSXRhbHkgd2hlbiB0aGV5IHdvdWxkIGF0IG9uY2UgYmUgb24gaGlzIHNpZGU7IHNvIG9ibm94aW91cyB0byB0aGVtIGhhZCBDYWVzYXIgYmVjb21lIGJ5IHJlYXNvbiBvZiB0aGUgbXVsdGl0dWRlIG9mIGhpcyBjYW1wYWlnbnMsIGFuZCBzbyBzdXNwaWNpb3VzIG9mIGhpbSB3ZXJlIHRoZXkgbWFkZSBieSB0aGVpciBmZWFyIG9mIGEgbW9uYXJjaHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFsbCB0aGlzIGZlZCBQb21wZXkncyB2YW5pdHksIGFuZCBoZSBuZWdsZWN0ZWQgdG8gcHJvdmlkZSBoaW1zZWxmIHdpdGggc29sZGllcnMsIGFzIHRob3VnaCBoZSBoYWQgbm8gZmVhcnM7IHdoaWxlIHdpdGggc3BlZWNoZXMgYW5kIHJlc29sdXRpb25zIG9mIHRoZSBzZW5hdGUgaGUgd2FzIGNhcnJ5aW5nIHRoZSBkYXkgYWdhaW5zdCBDYWVzYXIsIGFzIGhlIHN1cHBvc2VkLCBhbHRob3VnaCBoZSB3YXMgbWVyZWx5IGdldHRpbmcgbWVhc3VyZXMgcmVqZWN0ZWQgYWJvdXQgd2hpY2ggQ2Flc2FyIGNhcmVkIG5hdWdodC4gTmF5LCB3ZSBhcmUgdG9sZCB0aGF0IG9uZSBvZiB0aGUgY2VudHVyaW9ucyBzZW50IHRvIFJvbWUgYnkgQ2Flc2FyLCBhcyBoZSBzdG9vZCBpbiBmcm9udCBvZiB0aGUgc2VuYXRlLWhvdXNlIGFuZCBsZWFybmVkIHRoYXQgdGhlIHNlbmF0ZSB3b3VsZCBub3QgZ2l2ZSBDYWVzYXIgYW4gZXh0ZW5zaW9uIG9mIGhpcyB0ZXJtIG9mIGNvbW1hbmQsIHNsYXBwZWQgdGhlIGhhbmRsZSBvZiBoaXMgc3dvcmQgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhpcyB3aWxsIGdpdmUgaXQ8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1OC4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx2aWlpLiAyPC9iaWJsPi48L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU4LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHZpaWkuIDI8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsdmlpaS4gMjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBkZW1hbmRzIHdoaWNoIGNhbWUgZnJvbSBDYWVzYXIgY2VydGFpbmx5IGhhZCBhIHN0cmlraW5nIHNlbWJsYW5jZSBvZiBmYWlybmVzcy4gSGUgZGVtYW5kZWQsIG5hbWVseSwgdGhhdCBpZiBoZSBoaW1zZWxmIGxhaWQgZG93biBoaXMgYXJtcywgUG9tcGV5IHNob3VsZCBkbyB0aGUgc2FtZSwgYW5kIHRoYXQgYm90aCwgdGh1cyBiZWNvbWUgcHJpdmF0ZSBtZW4sIHNob3VsZCBmaW5kIHdoYXQgZmF2b3VyIHRoZXkgY291bGQgd2l0aCB0aGVpciBmZWxsb3cgY2l0aXplbnM7IGFyZ3VpbmcgdGhhdCBpZiB0aGV5IHRvb2sgYXdheSBoaXMgZm9yY2VzIGZyb20gaGltLCBidXQgY29uZmlybWVkIFBvbXBleSBpbiB0aGUgcG9zc2Vzc2lvbiBvZiBoaXMsIHRoZXkgd291bGQgYmUgYWNjdXNpbmcgb25lIG9mIHNlZWtpbmcgYSB0eXJhbm55IGFuZCBtYWtpbmcgdGhlIG90aGVyIGEgdHlyYW50LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIEN1cmlvIGxhaWQgdGhlc2UgcHJvcG9zYWxzIGJlZm9yZSB0aGUgcGVvcGxlIGluIGJlaGFsZiBvZiBDYWVzYXIsIGhlIHdhcyBsb3VkbHkgYXBwbGF1ZGVkLCBhbmQgc29tZSBhY3R1YWxseSBjYXN0IGdhcmxhbmRzIG9mIGZsb3dlcnMgdXBvbiBoaW0gYXMgaWYgaGUgd2VyZSBhIHZpY3RvcmlvdXMgYXRobGV0ZS4gQW50b255LCB0b28sIHdobyB3YXMgYSB0cmlidW5lLCBicm91Z2h0IGJlZm9yZSB0aGUgcGVvcGxlIGEgbGV0dGVyIG9mIENhZXNhcidzIG9uIHRoZXNlIG1hdHRlcnMgd2hpY2ggaGUgaGFkIHJlY2VpdmVkLCBhbmQgcmVhZCBpdCBhbG91ZCwgaW4gZGVmaWFuY2Ugb2YgdGhlIGNvbnN1bHMuIEJ1dCBpbiB0aGUgc2VuYXRlLCBTY2lwaW8sIHRoZSBmYXRoZXItaW4tbGF3IG9mIFBvbXBleSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Qb21wZXkgaGFkIG1hcnJpZWQgQ29ybmVsaWEsIHRoZSB5b3VuZyB3aWRvdyBvZiBQdWJsaXVzIENyYXNzdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBsdi4gMTwvYmlibD4pLjwvbm90ZT4gaW50cm9kdWNlZCBhIG1vdGlvbiB0aGF0IGlmIGJ5IGEgZml4ZWQgZGF5IENhZXNhciBkaWQgbm90IGxheSBkb3duIGhpcyBhcm1zIGhlIHNob3VsZCBiZSBkZWNsYXJlZCBhIHB1YmxpYyBlbmVteS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHdoZW4gdGhlIGNvbnN1bHMgcHV0IHRoZSBxdWVzdGlvbiB3aGV0aGVyIFBvbXBleSBzaG91bGQgZGlzbWlzcyBoaXMgc29sZGllcnMsIGFuZCBhZ2FpbiB3aGV0aGVyIENhZXNhciBzaG91bGQsIHZlcnkgZmV3IHNlbmF0b3JzIHZvdGVkIGZvciB0aGUgZmlyc3QsIGFuZCBhbGwgYnV0IGEgZmV3IGZvciB0aGUgc2Vjb25kOyBidXQgd2hlbiBBbnRvbnkgYWdhaW4gZGVtYW5kZWQgdGhhdCBib3RoIHNob3VsZCBnaXZlIHVwIHRoZWlyIGNvbW1hbmRzLCBhbGwgd2l0aCBvbmUgYWNjb3JkIGFzc2VudGVkLiBTY2lwaW8sIGhvd2V2ZXIsIG1hZGUgdmlvbGVudCBvcHBvc2l0aW9uLCBhbmQgTGVudHVsdXMgdGhlIGNvbnN1bCBjcmllZCBvdXQgdGhhdCBhZ2FpbnN0IGEgcm9iYmVyIHRoZXJlIHdhcyBuZWVkIG9mIGFybXMsIG5vdCB2b3Rlczsgd2hlcmV1cG9uIHRoZSBzZW5hdGUgYnJva2UgdXAsIGFuZCB0aGUgc2VuYXRvcnMgcHV0IG9uIHRoZSBnYXJiIG9mIG1vdXJuaW5nIGluIHZpZXcgb2YgdGhlIGRpc3NlbnNpb24uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlIGRlbWFuZHMgd2hpY2ggY2FtZSBmcm9tIENhZXNhciBjZXJ0YWlubHkgaGFkIGEgc3RyaWtpbmcgc2VtYmxhbmNlIG9mIGZhaXJuZXNzLiBIZSBkZW1hbmRlZCwgbmFtZWx5LCB0aGF0IGlmIGhlIGhpbXNlbGYgbGFpZCBkb3duIGhpcyBhcm1zLCBQb21wZXkgc2hvdWxkIGRvIHRoZSBzYW1lLCBhbmQgdGhhdCBib3RoLCB0aHVzIGJlY29tZSBwcml2YXRlIG1lbiwgc2hvdWxkIGZpbmQgd2hhdCBmYXZvdXIgdGhleSBjb3VsZCB3aXRoIHRoZWlyIGZlbGxvdyBjaXRpemVuczsgYXJndWluZyB0aGF0IGlmIHRoZXkgdG9vayBhd2F5IGhpcyBmb3JjZXMgZnJvbSBoaW0sIGJ1dCBjb25maXJtZWQgUG9tcGV5IGluIHRoZSBwb3NzZXNzaW9uIG9mIGhpcywgdGhleSB3b3VsZCBiZSBhY2N1c2luZyBvbmUgb2Ygc2Vla2luZyBhIHR5cmFubnkgYW5kIG1ha2luZyB0aGUgb3RoZXIgYSB0eXJhbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ3VyaW8gbGFpZCB0aGVzZSBwcm9wb3NhbHMgYmVmb3JlIHRoZSBwZW9wbGUgaW4gYmVoYWxmIG9mIENhZXNhciwgaGUgd2FzIGxvdWRseSBhcHBsYXVkZWQsIGFuZCBzb21lIGFjdHVhbGx5IGNhc3QgZ2FybGFuZHMgb2YgZmxvd2VycyB1cG9uIGhpbSBhcyBpZiBoZSB3ZXJlIGEgdmljdG9yaW91cyBhdGhsZXRlLiBBbnRvbnksIHRvbywgd2hvIHdhcyBhIHRyaWJ1bmUsIGJyb3VnaHQgYmVmb3JlIHRoZSBwZW9wbGUgYSBsZXR0ZXIgb2YgQ2Flc2FyJ3Mgb24gdGhlc2UgbWF0dGVycyB3aGljaCBoZSBoYWQgcmVjZWl2ZWQsIGFuZCByZWFkIGl0IGFsb3VkLCBpbiBkZWZpYW5jZSBvZiB0aGUgY29uc3Vscy4gQnV0IGluIHRoZSBzZW5hdGUsIFNjaXBpbywgdGhlIGZhdGhlci1pbi1sYXcgb2YgUG9tcGV5LDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+UG9tcGV5IGhhZCBtYXJyaWVkIENvcm5lbGlhLCB0aGUgeW91bmcgd2lkb3cgb2YgUHVibGl1cyBDcmFzc3VzICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1NS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx2LiAxPC9iaWJsPikuPC9ub3RlPiBpbnRyb2R1Y2VkIGEgbW90aW9uIHRoYXQgaWYgYnkgYSBmaXhlZCBkYXkgQ2Flc2FyIGRpZCBub3QgbGF5IGRvd24gaGlzIGFybXMgaGUgc2hvdWxkIGJlIGRlY2xhcmVkIGEgcHVibGljIGVuZW15LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU1LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHYuIDE8L2JpYmw+KS48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHYuIDE8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZSBjb25zdWxzIHB1dCB0aGUgcXVlc3Rpb24gd2hldGhlciBQb21wZXkgc2hvdWxkIGRpc21pc3MgaGlzIHNvbGRpZXJzLCBhbmQgYWdhaW4gd2hldGhlciBDYWVzYXIgc2hvdWxkLCB2ZXJ5IGZldyBzZW5hdG9ycyB2b3RlZCBmb3IgdGhlIGZpcnN0LCBhbmQgYWxsIGJ1dCBhIGZldyBmb3IgdGhlIHNlY29uZDsgYnV0IHdoZW4gQW50b255IGFnYWluIGRlbWFuZGVkIHRoYXQgYm90aCBzaG91bGQgZ2l2ZSB1cCB0aGVpciBjb21tYW5kcywgYWxsIHdpdGggb25lIGFjY29yZCBhc3NlbnRlZC4gU2NpcGlvLCBob3dldmVyLCBtYWRlIHZpb2xlbnQgb3Bwb3NpdGlvbiwgYW5kIExlbnR1bHVzIHRoZSBjb25zdWwgY3JpZWQgb3V0IHRoYXQgYWdhaW5zdCBhIHJvYmJlciB0aGVyZSB3YXMgbmVlZCBvZiBhcm1zLCBub3Qgdm90ZXM7IHdoZXJldXBvbiB0aGUgc2VuYXRlIGJyb2tlIHVwLCBhbmQgdGhlIHNlbmF0b3JzIHB1dCBvbiB0aGUgZ2FyYiBvZiBtb3VybmluZyBpbiB2aWV3IG9mIHRoZSBkaXNzZW5zaW9uLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBwcmVzZW50bHkgbGV0dGVycyBjYW1lIGZyb20gQ2Flc2FyIGluIHdoaWNoIGhlIGFwcGVhcmVkIHRvIHRha2UgYSBtb3JlIG1vZGVyYXRlIHBvc2l0aW9uLCBmb3IgaGUgYWdyZWVkIHRvIHN1cnJlbmRlciBldmVyeXRoaW5nIGVsc2UsIGJ1dCBkZW1hbmRlZCB0aGF0IENpc2FscGluZSBHYXVsIGFuZCBJbGx5cmljdW0gdG9nZXRoZXIgd2l0aCB0d28gbGVnaW9ucyBzaG91bGQgYmUgZ2l2ZW4gaGltIHVudGlsIGhlIHN0b29kIGZvciBoaXMgc2Vjb25kIGNvbnN1bHNoaXAuIENpY2VybyB0aGUgb3JhdG9yLCB0b28sIHdobyBoYWQganVzdCByZXR1cm5lZCBmcm9tIENpbGljaWEgYW5kIHdhcyBidXN5IHdpdGggYSByZWNvbmNpbGlhdGlvbiwgdHJpZWQgdG8gbW9sbGlmeSBQb21wZXksIHdobyB5aWVsZGVkIGV2ZXJ5dGhpbmcgZWxzZSwgYnV0IGluc2lzdGVkIG9uIHRha2luZyBhd2F5IENhZXNhcidzIHNvbGRpZXJzLiBDaWNlcm8gYWxzbyB0cmllZCB0byBwZXJzdWFkZSB0aGUgZnJpZW5kcyBvZiBDYWVzYXIgdG8gY29tcHJvbWlzZSBhbmQgY29tZSB0byBhIHNldHRsZW1lbnQgb24gdGhlIGJhc2lzIG9mIHRoZSBwcm92aW5jZXMgbWVudGlvbmVkIGFuZCBvbmx5IHNpeCB0aG91c2FuZCBzb2xkaWVycywgYW5kIFBvbXBleSB3YXMgcmVhZHkgdG8geWllbGQgYW5kIGdyYW50IHNvIG1hbnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkxlbnR1bHVzIHRoZSBjb25zdWwsIGhvd2V2ZXIsIHdvdWxkIG5vdCBsZXQgaGltLCBidXQgYWN0dWFsbHkgaGVhcGVkIGluc3VsdHMgdXBvbiBBbnRvbnkgYW5kIEN1cmlvIGFuZCBkcm92ZSB0aGVtIGRpc2dyYWNlZnVsbHkgZnJvbSB0aGUgc2VuYXRlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkphbnVhcnkgNywgNDkgQi5DLjwvbm90ZT4gdGh1cyBoaW1zZWxmIGNvbnRyaXZpbmcgZm9yIENhZXNhciB0aGUgbW9zdCBzcGVjaW91cyBvZiBoaXMgcHJldGV4dHMsIGFuZCB0aGUgb25lIGJ5IG1lYW5zIG9mIHdoaWNoIGhlIG1vc3Qgb2YgYWxsIGluY2l0ZWQgaGlzIHNvbGRpZXJzLCBzaG93aW5nIHRoZW0gbWVuIG9mIHJlcHV0ZSBhbmQgaGlnaCBvZmZpY2Ugd2hvIGhhZCBmbGVkIHRoZSBjaXR5IG9uIGhpcmVkIGNhcnRzIGFuZCBpbiB0aGUgZ2FyYiBvZiBzbGF2ZXMuIEZvciB0aHVzIHRoZXkgaGFkIGFycmF5ZWQgdGhlbXNlbHZlcyBpbiB0aGVpciBmZWFyIGFuZCBzdG9sZW4gb3V0IG9mIFJvbWUuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHByZXNlbnRseSBsZXR0ZXJzIGNhbWUgZnJvbSBDYWVzYXIgaW4gd2hpY2ggaGUgYXBwZWFyZWQgdG8gdGFrZSBhIG1vcmUgbW9kZXJhdGUgcG9zaXRpb24sIGZvciBoZSBhZ3JlZWQgdG8gc3VycmVuZGVyIGV2ZXJ5dGhpbmcgZWxzZSwgYnV0IGRlbWFuZGVkIHRoYXQgQ2lzYWxwaW5lIEdhdWwgYW5kIElsbHlyaWN1bSB0b2dldGhlciB3aXRoIHR3byBsZWdpb25zIHNob3VsZCBiZSBnaXZlbiBoaW0gdW50aWwgaGUgc3Rvb2QgZm9yIGhpcyBzZWNvbmQgY29uc3Vsc2hpcC4gQ2ljZXJvIHRoZSBvcmF0b3IsIHRvbywgd2hvIGhhZCBqdXN0IHJldHVybmVkIGZyb20gQ2lsaWNpYSBhbmQgd2FzIGJ1c3kgd2l0aCBhIHJlY29uY2lsaWF0aW9uLCB0cmllZCB0byBtb2xsaWZ5IFBvbXBleSwgd2hvIHlpZWxkZWQgZXZlcnl0aGluZyBlbHNlLCBidXQgaW5zaXN0ZWQgb24gdGFraW5nIGF3YXkgQ2Flc2FyJ3Mgc29sZGllcnMuIENpY2VybyBhbHNvIHRyaWVkIHRvIHBlcnN1YWRlIHRoZSBmcmllbmRzIG9mIENhZXNhciB0byBjb21wcm9taXNlIGFuZCBjb21lIHRvIGEgc2V0dGxlbWVudCBvbiB0aGUgYmFzaXMgb2YgdGhlIHByb3ZpbmNlcyBtZW50aW9uZWQgYW5kIG9ubHkgc2l4IHRob3VzYW5kIHNvbGRpZXJzLCBhbmQgUG9tcGV5IHdhcyByZWFkeSB0byB5aWVsZCBhbmQgZ3JhbnQgc28gbWFueS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkxlbnR1bHVzIHRoZSBjb25zdWwsIGhvd2V2ZXIsIHdvdWxkIG5vdCBsZXQgaGltLCBidXQgYWN0dWFsbHkgaGVhcGVkIGluc3VsdHMgdXBvbiBBbnRvbnkgYW5kIEN1cmlvIGFuZCBkcm92ZSB0aGVtIGRpc2dyYWNlZnVsbHkgZnJvbSB0aGUgc2VuYXRlLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SmFudWFyeSA3LCA0OSBCLkMuPC9ub3RlPiB0aHVzIGhpbXNlbGYgY29udHJpdmluZyBmb3IgQ2Flc2FyIHRoZSBtb3N0IHNwZWNpb3VzIG9mIGhpcyBwcmV0ZXh0cywgYW5kIHRoZSBvbmUgYnkgbWVhbnMgb2Ygd2hpY2ggaGUgbW9zdCBvZiBhbGwgaW5jaXRlZCBoaXMgc29sZGllcnMsIHNob3dpbmcgdGhlbSBtZW4gb2YgcmVwdXRlIGFuZCBoaWdoIG9mZmljZSB3aG8gaGFkIGZsZWQgdGhlIGNpdHkgb24gaGlyZWQgY2FydHMgYW5kIGluIHRoZSBnYXJiIG9mIHNsYXZlcy4gRm9yIHRodXMgdGhleSBoYWQgYXJyYXllZCB0aGVtc2VsdmVzIGluIHRoZWlyIGZlYXIgYW5kIHN0b2xlbiBvdXQgb2YgUm9tZS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIENhZXNhciBoYWQgd2l0aCBoaW0gbm90IG1vcmUgdGhhbiB0aHJlZSBodW5kcmVkIGhvcnNlbWVuIGFuZCBmaXZlIHRob3VzYW5kIGxlZ2lvbmFyaWVzOyBmb3IgdGhlIHJlc3Qgb2YgaGlzIGFybXkgaGFkIGJlZW4gbGVmdCBiZXlvbmQgdGhlIEFscHMsIGFuZCB3YXMgdG8gYmUgYnJvdWdodCB1cCBieSB0aG9zZSB3aG9tIGhlIGhhZCBzZW50IGZvciB0aGUgcHVycG9zZS4gSGUgc2F3LCBob3dldmVyLCB0aGF0IHRoZSBiZWdpbm5pbmcgb2YgaGlzIGVudGVycHJpc2UgYW5kIGl0cyBpbml0aWFsIHN0ZXAgZGlkIG5vdCByZXF1aXJlIGEgbGFyZ2UgZm9yY2UgYXQgcHJlc2VudCwgYnV0IG11c3QgdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIGdvbGRlbiBtb21lbnQgYnkgc2hvd2luZyBhbWF6aW5nIGJvbGRuZXNzIGFuZCBzcGVlZCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+c2luY2UgaGUgY291bGQgc3RyaWtlIHRlcnJvciBpbnRvIGhpcyBlbmVtaWVzIGJ5IGFuIHVuZXhwZWN0ZWQgYmxvdyBtb3JlIGVhc2lseSB0aGFuIGhlIGNvdWxkIG92ZXJ3aGVsbSB0aGVtIGJ5IGFuIGF0dGFjayBpbiBmdWxsIGZvcmNlLiBIZSB0aGVyZWZvcmUgb3JkZXJlZCBoaXMgY2VudHVyaW9ucyBhbmQgb3RoZXIgb2ZmaWNlcnMsIHRha2luZyB0aGVpciBzd29yZHMgb25seSwgYW5kIHdpdGhvdXQgdGhlIHJlc3Qgb2YgdGhlaXIgYXJtcywgdG8gb2NjdXB5IEFyaW1pbnVtLCBhIGxhcmdlIGNpdHkgb2YgR2F1bCwgYXZvaWRpbmcgY29tbW90aW9uIGFuZCBibG9vZHNoZWQgYXMgZmFyIGFzIHBvc3NpYmxlOyBhbmQgaGUgZW50cnVzdGVkIHRoaXMgZm9yY2UgdG8gSG9ydGVuc2l1cy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBDYWVzYXIgaGFkIHdpdGggaGltIG5vdCBtb3JlIHRoYW4gdGhyZWUgaHVuZHJlZCBob3JzZW1lbiBhbmQgZml2ZSB0aG91c2FuZCBsZWdpb25hcmllczsgZm9yIHRoZSByZXN0IG9mIGhpcyBhcm15IGhhZCBiZWVuIGxlZnQgYmV5b25kIHRoZSBBbHBzLCBhbmQgd2FzIHRvIGJlIGJyb3VnaHQgdXAgYnkgdGhvc2Ugd2hvbSBoZSBoYWQgc2VudCBmb3IgdGhlIHB1cnBvc2UuIEhlIHNhdywgaG93ZXZlciwgdGhhdCB0aGUgYmVnaW5uaW5nIG9mIGhpcyBlbnRlcnByaXNlIGFuZCBpdHMgaW5pdGlhbCBzdGVwIGRpZCBub3QgcmVxdWlyZSBhIGxhcmdlIGZvcmNlIGF0IHByZXNlbnQsIGJ1dCBtdXN0IHRha2UgYWR2YW50YWdlIG9mIHRoZSBnb2xkZW4gbW9tZW50IGJ5IHNob3dpbmcgYW1hemluZyBib2xkbmVzcyBhbmQgc3BlZWQsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPnNpbmNlIGhlIGNvdWxkIHN0cmlrZSB0ZXJyb3IgaW50byBoaXMgZW5lbWllcyBieSBhbiB1bmV4cGVjdGVkIGJsb3cgbW9yZSBlYXNpbHkgdGhhbiBoZSBjb3VsZCBvdmVyd2hlbG0gdGhlbSBieSBhbiBhdHRhY2sgaW4gZnVsbCBmb3JjZS4gSGUgdGhlcmVmb3JlIG9yZGVyZWQgaGlzIGNlbnR1cmlvbnMgYW5kIG90aGVyIG9mZmljZXJzLCB0YWtpbmcgdGhlaXIgc3dvcmRzIG9ubHksIGFuZCB3aXRob3V0IHRoZSByZXN0IG9mIHRoZWlyIGFybXMsIHRvIG9jY3VweSBBcmltaW51bSwgYSBsYXJnZSBjaXR5IG9mIEdhdWwsIGF2b2lkaW5nIGNvbW1vdGlvbiBhbmQgYmxvb2RzaGVkIGFzIGZhciBhcyBwb3NzaWJsZTsgYW5kIGhlIGVudHJ1c3RlZCB0aGlzIGZvcmNlIHRvIEhvcnRlbnNpdXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGltc2VsZiBzcGVudCB0aGUgZGF5IGluIHB1YmxpYywgYXR0ZW5kaW5nIGFuZCB3YXRjaGluZyB0aGUgZXhlcmNpc2VzIG9mIGdsYWRpYXRvcnM7IGJ1dCBhIGxpdHRsZSBiZWZvcmUgZXZlbmluZyBoZSBiYXRoZWQgYW5kIGRyZXNzZWQgYW5kIHdlbnQgaW50byB0aGUgYmFucXVldGluZyBoYWxsLiBIZXJlIGhlIGhlbGQgYnJpZWYgY29udmVyc2Ugd2l0aCB0aG9zZSB3aG8gaGFkIGJlZW4gaW52aXRlZCB0byBzdXBwZXIsIGFuZCBqdXN0IGFzIGl0IHdhcyBnZXR0aW5nIGRhcmsgcm9zZSBhbmQgd2VudCBhd2F5LCBhZnRlciBhZGRyZXNzaW5nIGNvdXJ0ZW91c2x5IG1vc3Qgb2YgaGlzIGd1ZXN0cyBhbmQgYmlkZGluZyB0aGVtIGF3YWl0IGhpcyByZXR1cm4uIFRvIGEgZmV3IG9mIGhpcyBmcmllbmRzLCBob3dldmVyLCBoZSBoYWQgcHJldmlvdXNseSBnaXZlbiBkaXJlY3Rpb25zIHRvIGZvbGxvdyBoaW0sIG5vdCBhbGwgYnkgdGhlIHNhbWUgcm91dGUsIGJ1dCBzb21lIGJ5IG9uZSB3YXkgYW5kIHNvbWUgYnkgYW5vdGhlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgaGltc2VsZiBtb3VudGVkIG9uZSBvZiBoaXMgaGlyZWQgY2FydHMgYW5kIGRyb3ZlIGF0IGZpcnN0IGFsb25nIGFub3RoZXIgcm9hZCwgdGhlbiB0dXJuZWQgdG93YXJkcyBBcmltaW51bS4gV2hlbiBoZSBjYW1lIHRvIHRoZSByaXZlciB3aGljaCBzZXBhcmF0ZXMgQ2lzYWxwaW5lIEdhdWwgZnJvbSB0aGUgcmVzdCBvZiBJdGFseSAoaXQgaXMgY2FsbGVkIHRoZSBSdWJpY29uKSwgYW5kIGJlZ2FuIHRvIHJlZmxlY3QsIG5vdyB0aGF0IGhlIGRyZXcgbmVhcmVyIHRvIHRoZSBmZWFyZnVsIHN0ZXAgYW5kIHdhcyBhZ2l0YXRlZCBieSB0aGUgbWFnbml0dWRlIG9mIGhpcyB2ZW50dXJlcywgaGUgY2hlY2tlZCBoaXMgc3BlZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGhhbHRpbmcgaW4gaGlzIGNvdXJzZSwgaGUgY29tbXVuZWQgd2l0aCBoaW1zZWxmIGEgbG9uZyB0aW1lIGluIHNpbGVuY2UgYXMgaGlzIHJlc29sdXRpb24gd2F2ZXJlZCBiYWNrIGFuZCBmb3J0aCwgYW5kIGhpcyBwdXJwb3NlIHRoZW4gc3VmZmVyZWQgY2hhbmdlIGFmdGVyIGNoYW5nZS4gRm9yIGEgbG9uZyB0aW1lLCB0b28sIGhlIGRpc2N1c3NlZCBoaXMgcGVycGxleGl0aWVzIHdpdGggaGlzIGZyaWVuZHMgd2hvIHdlcmUgcHJlc2VudCwgYW1vbmcgd2hvbSB3YXMgQXNpbml1cyBQb2xsaW8sIGVzdGltYXRpbmcgdGhlIGdyZWF0IGV2aWxzIGZvciBhbGwgbWFua2luZCB3aGljaCB3b3VsZCBmb2xsb3cgdGhlaXIgcGFzc2FnZSBvZiB0aGUgcml2ZXIsIGFuZCB0aGUgd2lkZSBmYW1lIG9mIGl0IHdoaWNoIHRoZXkgd291bGQgbGVhdmUgdG8gcG9zdGVyaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZmluYWxseSwgd2l0aCBhIHNvcnQgb2YgcGFzc2lvbiwgYXMgaWYgYWJhbmRvbmluZyBjYWxjdWxhdGlvbiBhbmQgY2FzdGluZyBoaW1zZWxmIHVwb24gdGhlIGZ1dHVyZSwgYW5kIHV0dGVyaW5nIHRoZSBwaHJhc2Ugd2l0aCB3aGljaCBtZW4gdXN1YWxseSBwcmVsdWRlIHRoZWlyIHBsdW5nZSBpbnRvIGRlc3BlcmF0ZSBhbmQgZGFyaW5nIGZvcnR1bmVzLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkxldCB0aGUgZGllIGJlIGNhc3QsPC9xPiBoZSBoYXN0ZW5lZCB0byBjcm9zcyB0aGUgcml2ZXI7IGFuZCBnb2luZyBhdCBmdWxsIHNwZWVkIG5vdyBmb3IgdGhlIHJlc3Qgb2YgdGhlIHRpbWUsIGJlZm9yZSBkYXlicmVhayBoZSBkYXNoZWQgaW50byBBcmltaW51bSBhbmQgdG9vayBwb3NzZXNzaW9uIG9mIGl0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYwLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5IDwvdGl0bGU+LCBseC4gMS0yPC9iaWJsPi48L25vdGU+IEl0IGlzIHNhaWQsIG1vcmVvdmVyLCB0aGF0IG9uIHRoZSBuaWdodCBiZWZvcmUgaGUgY3Jvc3NlZCB0aGUgcml2ZXIgaGUgaGFkIGFuIHVubmF0dXJhbCBkcmVhbTsgaGUgdGhvdWdodCwgbmFtZWx5LCB0aGF0IGhlIHdhcyBoYXZpbmcgaW5jZXN0dW91cyBpbnRlcmNvdXJzZSB3aXRoIGhpcyBvd24gbW90aGVyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBTdWV0b25pdXMgKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gNzwvYmlibD4pLCBDYWVzYXIgaGFkIHRoaXMgZHJlYW0gd2hpbGUgaGUgd2FzIHF1YWVzdG9yIGluIFNwYWluICg2NyBCLkMuKS4gVGhlIGludGVycHJldGVycyBvZiBkcmVhbXMgdG9sZCBoaW0gdGhhdCBoaXMgPGVtcGg+bW90aGVyPC9lbXBoPiBtZWFudCB0aGUgRWFydGgsIHRoZSB1bml2ZXJzYWwgcGFyZW50LCB3aGljaCB3YXMgdG8gYmVjb21lIHN1YmplY3QgdG8gaGltLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYgc3BlbnQgdGhlIGRheSBpbiBwdWJsaWMsIGF0dGVuZGluZyBhbmQgd2F0Y2hpbmcgdGhlIGV4ZXJjaXNlcyBvZiBnbGFkaWF0b3JzOyBidXQgYSBsaXR0bGUgYmVmb3JlIGV2ZW5pbmcgaGUgYmF0aGVkIGFuZCBkcmVzc2VkIGFuZCB3ZW50IGludG8gdGhlIGJhbnF1ZXRpbmcgaGFsbC4gSGVyZSBoZSBoZWxkIGJyaWVmIGNvbnZlcnNlIHdpdGggdGhvc2Ugd2hvIGhhZCBiZWVuIGludml0ZWQgdG8gc3VwcGVyLCBhbmQganVzdCBhcyBpdCB3YXMgZ2V0dGluZyBkYXJrIHJvc2UgYW5kIHdlbnQgYXdheSwgYWZ0ZXIgYWRkcmVzc2luZyBjb3VydGVvdXNseSBtb3N0IG9mIGhpcyBndWVzdHMgYW5kIGJpZGRpbmcgdGhlbSBhd2FpdCBoaXMgcmV0dXJuLiBUbyBhIGZldyBvZiBoaXMgZnJpZW5kcywgaG93ZXZlciwgaGUgaGFkIHByZXZpb3VzbHkgZ2l2ZW4gZGlyZWN0aW9ucyB0byBmb2xsb3cgaGltLCBub3QgYWxsIGJ5IHRoZSBzYW1lIHJvdXRlLCBidXQgc29tZSBieSBvbmUgd2F5IGFuZCBzb21lIGJ5IGFub3RoZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGhpbXNlbGYgbW91bnRlZCBvbmUgb2YgaGlzIGhpcmVkIGNhcnRzIGFuZCBkcm92ZSBhdCBmaXJzdCBhbG9uZyBhbm90aGVyIHJvYWQsIHRoZW4gdHVybmVkIHRvd2FyZHMgQXJpbWludW0uIFdoZW4gaGUgY2FtZSB0byB0aGUgcml2ZXIgd2hpY2ggc2VwYXJhdGVzIENpc2FscGluZSBHYXVsIGZyb20gdGhlIHJlc3Qgb2YgSXRhbHkgKGl0IGlzIGNhbGxlZCB0aGUgUnViaWNvbiksIGFuZCBiZWdhbiB0byByZWZsZWN0LCBub3cgdGhhdCBoZSBkcmV3IG5lYXJlciB0byB0aGUgZmVhcmZ1bCBzdGVwIGFuZCB3YXMgYWdpdGF0ZWQgYnkgdGhlIG1hZ25pdHVkZSBvZiBoaXMgdmVudHVyZXMsIGhlIGNoZWNrZWQgaGlzIHNwZWVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGhhbHRpbmcgaW4gaGlzIGNvdXJzZSwgaGUgY29tbXVuZWQgd2l0aCBoaW1zZWxmIGEgbG9uZyB0aW1lIGluIHNpbGVuY2UgYXMgaGlzIHJlc29sdXRpb24gd2F2ZXJlZCBiYWNrIGFuZCBmb3J0aCwgYW5kIGhpcyBwdXJwb3NlIHRoZW4gc3VmZmVyZWQgY2hhbmdlIGFmdGVyIGNoYW5nZS4gRm9yIGEgbG9uZyB0aW1lLCB0b28sIGhlIGRpc2N1c3NlZCBoaXMgcGVycGxleGl0aWVzIHdpdGggaGlzIGZyaWVuZHMgd2hvIHdlcmUgcHJlc2VudCwgYW1vbmcgd2hvbSB3YXMgQXNpbml1cyBQb2xsaW8sIGVzdGltYXRpbmcgdGhlIGdyZWF0IGV2aWxzIGZvciBhbGwgbWFua2luZCB3aGljaCB3b3VsZCBmb2xsb3cgdGhlaXIgcGFzc2FnZSBvZiB0aGUgcml2ZXIsIGFuZCB0aGUgd2lkZSBmYW1lIG9mIGl0IHdoaWNoIHRoZXkgd291bGQgbGVhdmUgdG8gcG9zdGVyaXR5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['32.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmaW5hbGx5LCB3aXRoIGEgc29ydCBvZiBwYXNzaW9uLCBhcyBpZiBhYmFuZG9uaW5nIGNhbGN1bGF0aW9uIGFuZCBjYXN0aW5nIGhpbXNlbGYgdXBvbiB0aGUgZnV0dXJlLCBhbmQgdXR0ZXJpbmcgdGhlIHBocmFzZSB3aXRoIHdoaWNoIG1lbiB1c3VhbGx5IHByZWx1ZGUgdGhlaXIgcGx1bmdlIGludG8gZGVzcGVyYXRlIGFuZCBkYXJpbmcgZm9ydHVuZXMsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5MZXQgdGhlIGRpZSBiZSBjYXN0LDwvcT4gaGUgaGFzdGVuZWQgdG8gY3Jvc3MgdGhlIHJpdmVyOyBhbmQgZ29pbmcgYXQgZnVsbCBzcGVlZCBub3cgZm9yIHRoZSByZXN0IG9mIHRoZSB0aW1lLCBiZWZvcmUgZGF5YnJlYWsgaGUgZGFzaGVkIGludG8gQXJpbWludW0gYW5kIHRvb2sgcG9zc2Vzc2lvbiBvZiBpdC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjAuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleSA8L3RpdGxlPiwgbHguIDEtMjwvYmlibD4uPC9ub3RlPiBJdCBpcyBzYWlkLCBtb3Jlb3ZlciwgdGhhdCBvbiB0aGUgbmlnaHQgYmVmb3JlIGhlIGNyb3NzZWQgdGhlIHJpdmVyIGhlIGhhZCBhbiB1bm5hdHVyYWwgZHJlYW07IGhlIHRob3VnaHQsIG5hbWVseSwgdGhhdCBoZSB3YXMgaGF2aW5nIGluY2VzdHVvdXMgaW50ZXJjb3Vyc2Ugd2l0aCBoaXMgb3duIG1vdGhlci48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2MC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5IDwvdGl0bGU+LCBseC4gMS0yPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXkgPC90aXRsZT4sIGx4LiAxLTI8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBTdWV0b25pdXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gNyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdi4gSnVsLjwvdGl0bGU+IDc8L2JpYmw+KSwgQ2Flc2FyIGhhZCB0aGlzIGRyZWFtIHdoaWxlIGhlIHdhcyBxdWFlc3RvciBpbiBTcGFpbiAoNjcgQi5DLikuIFRoZSBpbnRlcnByZXRlcnMgb2YgZHJlYW1zIHRvbGQgaGltIHRoYXQgaGlzIDxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bW90aGVyPC9lbXBoPiBtZWFudCB0aGUgRWFydGgsIHRoZSB1bml2ZXJzYWwgcGFyZW50LCB3aGljaCB3YXMgdG8gYmVjb21lIHN1YmplY3QgdG8gaGltLjwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA3IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2LiBKdWwuPC90aXRsZT4gNzwvYmlibD4pLCBDYWVzYXIgaGFkIHRoaXMgZHJlYW0gd2hpbGUgaGUgd2FzIHF1YWVzdG9yIGluIFNwYWluICg2NyBCLkMuKS4gVGhlIGludGVycHJldGVycyBvZiBkcmVhbXMgdG9sZCBoaW0gdGhhdCBoaXMgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2LiBKdWwuPC90aXRsZT4gNzxlbXBoIGNsYXNzPSJ0cmFuc2xhdGlvbiI+bW90aGVyPC9lbXBoPiBtZWFudCB0aGUgRWFydGgsIHRoZSB1bml2ZXJzYWwgcGFyZW50LCB3aGljaCB3YXMgdG8gYmVjb21lIHN1YmplY3QgdG8gaGltLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBzZWl6dXJlIG9mIEFyaW1pbnVtLCBhcyBpZiB0aGUgd2FyIGhhZCBvcGVuZWQgd2l0aCBicm9hZCBnYXRlcyB0byBjb3ZlciB0aGUgd2hvbGUgZWFydGggYW5kIHNlYSBhbGlrZSwgYW5kIHRoZSBsYXdzIG9mIHRoZSBzdGF0ZSB3ZXJlIGNvbmZvdW5kZWQgYWxvbmcgd2l0aCB0aGUgYm91bmRhcmllcyBvZiB0aGUgcHJvdmluY2UsIG9uZSB3b3VsZCBub3QgaGF2ZSB0aG91Z2h0IHRoYXQgbWVuIGFuZCB3b21lbiwgYXMgYXQgb3RoZXIgdGltZXMsIHdlcmUgaHVycnlpbmcgdGhyb3VnaCBJdGFseSBpbiBjb25zdGVybmF0aW9uLCBidXQgdGhhdCB0aGUgdmVyeSBjaXRpZXMgaGFkIHJpc2VuIHVwIGluIGZsaWdodCBhbmQgd2VyZSBydXNoaW5nIG9uZSB0aHJvdWdoIGFub3RoZXI7IAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIFJvbWUgaGVyc2VsZiwgZGVsdWdlZCBhcyBpdCB3ZXJlIGJ5IHRoZSBpbmhhYml0YW50cyBvZiB0aGUgc3Vycm91bmRpbmcgdG93bnMgd2hvIHdlcmUgZmxlZWluZyBmcm9tIHRoZWlyIGhvbWVzLCBuZWl0aGVyIHJlYWRpbHkgb2JleWluZyBhIG1hZ2lzdHJhdGUgbm9yIGxpc3RlbmluZyB0byB0aGUgdm9pY2Ugb2YgcmVhc29uLCBpbiB0aGUgc3VyZ2VzIG9mIGEgbWlnaHR5IHNlYSBuYXJyb3dseSBlc2NhcGVkIGJlaW5nIG92ZXJ0dXJuZWQgYnkgaGVyIG93biBpbnRlcm5hbCBhZ2l0YXRpb25zLiBGb3IgY29uZmxpY3RpbmcgZW1vdGlvbnMgYW5kIHZpb2xlbnQgZGlzdHVyYmFuY2VzIHByZXZhaWxlZCBldmVyeXdoZXJlLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5UaG9zZSB3aG8gcmVqb2ljZWQgZGlkIG5vdCBrZWVwIHF1aWV0LCBidXQgaW4gbWFueSBwbGFjZXMsIGFzIHdhcyBuYXR1cmFsIGluIGEgZ3JlYXQgY2l0eSwgZW5jb3VudGVyZWQgdGhvc2Ugd2hvIHdlcmUgaW4gZmVhciBhbmQgZGlzdHJlc3MsIGFuZCBiZWluZyBmaWxsZWQgd2l0aCBjb25maWRlbmNlIGFzIHRvIHRoZSBmdXR1cmUgY2FtZSBpbnRvIHN0cmlmZSB3aXRoIHRoZW07IHdoaWxlIFBvbXBleSBoaW1zZWxmLCB3aG8gd2FzIHRlcnJvci1zdHJpY2tlbiwgd2FzIGFzc2FpbGVkIG9uIGV2ZXJ5IHNpZGUsIGJlaW5nIHRha2VuIHRvIHRhc2sgYnkgc29tZSBmb3IgaGF2aW5nIHN0cmVuZ3RoZW5lZCBDYWVzYXIgYWdhaW5zdCBoaW1zZWxmIGFuZCB0aGUgc3VwcmVtZSBwb3dlciBvZiB0aGUgc3RhdGUsIGFuZCBkZW5vdW5jZWQgYnkgb3RoZXJzIGZvciBoYXZpbmcgcGVybWl0dGVkIExlbnR1bHVzIHRvIGluc3VsdCBDYWVzYXIgd2hlbiBoZSB3YXMgcmVhZHkgdG8geWllbGQgYW5kIHdhcyBvZmZlcmluZyByZWFzb25hYmxlIHRlcm1zIG9mIHNldHRsZW1lbnQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZhdm9uaXVzIGJhZGUgaGltIHN0YW1wIG9uIHRoZSBncm91bmQ7IGZvciBvbmNlLCBpbiBhIGJvYXN0ZnVsIHNwZWVjaCB0byB0aGUgc2VuYXRlLCBoZSB0b2xkIHRoZW0gdG8gdGFrZSBubyB0cm91YmxlIG9yIGFueGlvdXMgdGhvdWdodCBhYm91dCBwcmVwYXJhdGlvbnMgZm9yIHRoZSB3YXIsIHNpbmNlIHdoZW4gaXQgY2FtZSBoZSBoYWQgYnV0IHRvIHN0YW1wIHVwb24gdGhlIGVhcnRoIHRvIGZpbGwgSXRhbHkgd2l0aCBhcm1pZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNTcuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHZpaS4gNTwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIHNlaXp1cmUgb2YgQXJpbWludW0sIGFzIGlmIHRoZSB3YXIgaGFkIG9wZW5lZCB3aXRoIGJyb2FkIGdhdGVzIHRvIGNvdmVyIHRoZSB3aG9sZSBlYXJ0aCBhbmQgc2VhIGFsaWtlLCBhbmQgdGhlIGxhd3Mgb2YgdGhlIHN0YXRlIHdlcmUgY29uZm91bmRlZCBhbG9uZyB3aXRoIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwcm92aW5jZSwgb25lIHdvdWxkIG5vdCBoYXZlIHRob3VnaHQgdGhhdCBtZW4gYW5kIHdvbWVuLCBhcyBhdCBvdGhlciB0aW1lcywgd2VyZSBodXJyeWluZyB0aHJvdWdoIEl0YWx5IGluIGNvbnN0ZXJuYXRpb24sIGJ1dCB0aGF0IHRoZSB2ZXJ5IGNpdGllcyBoYWQgcmlzZW4gdXAgaW4gZmxpZ2h0IGFuZCB3ZXJlIHJ1c2hpbmcgb25lIHRocm91Z2ggYW5vdGhlcjsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIFJvbWUgaGVyc2VsZiwgZGVsdWdlZCBhcyBpdCB3ZXJlIGJ5IHRoZSBpbmhhYml0YW50cyBvZiB0aGUgc3Vycm91bmRpbmcgdG93bnMgd2hvIHdlcmUgZmxlZWluZyBmcm9tIHRoZWlyIGhvbWVzLCBuZWl0aGVyIHJlYWRpbHkgb2JleWluZyBhIG1hZ2lzdHJhdGUgbm9yIGxpc3RlbmluZyB0byB0aGUgdm9pY2Ugb2YgcmVhc29uLCBpbiB0aGUgc3VyZ2VzIG9mIGEgbWlnaHR5IHNlYSBuYXJyb3dseSBlc2NhcGVkIGJlaW5nIG92ZXJ0dXJuZWQgYnkgaGVyIG93biBpbnRlcm5hbCBhZ2l0YXRpb25zLiBGb3IgY29uZmxpY3RpbmcgZW1vdGlvbnMgYW5kIHZpb2xlbnQgZGlzdHVyYmFuY2VzIHByZXZhaWxlZCBldmVyeXdoZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRob3NlIHdobyByZWpvaWNlZCBkaWQgbm90IGtlZXAgcXVpZXQsIGJ1dCBpbiBtYW55IHBsYWNlcywgYXMgd2FzIG5hdHVyYWwgaW4gYSBncmVhdCBjaXR5LCBlbmNvdW50ZXJlZCB0aG9zZSB3aG8gd2VyZSBpbiBmZWFyIGFuZCBkaXN0cmVzcywgYW5kIGJlaW5nIGZpbGxlZCB3aXRoIGNvbmZpZGVuY2UgYXMgdG8gdGhlIGZ1dHVyZSBjYW1lIGludG8gc3RyaWZlIHdpdGggdGhlbTsgd2hpbGUgUG9tcGV5IGhpbXNlbGYsIHdobyB3YXMgdGVycm9yLXN0cmlja2VuLCB3YXMgYXNzYWlsZWQgb24gZXZlcnkgc2lkZSwgYmVpbmcgdGFrZW4gdG8gdGFzayBieSBzb21lIGZvciBoYXZpbmcgc3RyZW5ndGhlbmVkIENhZXNhciBhZ2FpbnN0IGhpbXNlbGYgYW5kIHRoZSBzdXByZW1lIHBvd2VyIG9mIHRoZSBzdGF0ZSwgYW5kIGRlbm91bmNlZCBieSBvdGhlcnMgZm9yIGhhdmluZyBwZXJtaXR0ZWQgTGVudHVsdXMgdG8gaW5zdWx0IENhZXNhciB3aGVuIGhlIHdhcyByZWFkeSB0byB5aWVsZCBhbmQgd2FzIG9mZmVyaW5nIHJlYXNvbmFibGUgdGVybXMgb2Ygc2V0dGxlbWVudC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZhdm9uaXVzIGJhZGUgaGltIHN0YW1wIG9uIHRoZSBncm91bmQ7IGZvciBvbmNlLCBpbiBhIGJvYXN0ZnVsIHNwZWVjaCB0byB0aGUgc2VuYXRlLCBoZSB0b2xkIHRoZW0gdG8gdGFrZSBubyB0cm91YmxlIG9yIGFueGlvdXMgdGhvdWdodCBhYm91dCBwcmVwYXJhdGlvbnMgZm9yIHRoZSB3YXIsIHNpbmNlIHdoZW4gaXQgY2FtZSBoZSBoYWQgYnV0IHRvIHN0YW1wIHVwb24gdGhlIGVhcnRoIHRvIGZpbGwgSXRhbHkgd2l0aCBhcm1pZXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDU3LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHZpaS4gNTwvYmlibD4uPC9ub3RlPgogICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA1Ny41IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx2aWkuIDU8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBsdmlpLiA1PHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgZXZlbiB0aGVuIFBvbXBleSdzIGZvcmNlcyB3ZXJlIG1vcmUgbnVtZXJvdXMgdGhhbiBDYWVzYXInczsgYnV0IG5vIG9uZSB3b3VsZCBzdWZmZXIgaGltIHRvIGV4ZXJjaXNlIGhpcyBvd24ganVkZ2VtZW50OyBhbmQgc28sIHVuZGVyIHRoZSBpbmZsdWVuY2Ugb2YgbWFueSBmYWxzZSBhbmQgdGVycmlmeWluZyByZXBvcnRzLCBiZWxpZXZpbmcgdGhhdCB0aGUgd2FyIHdhcyBhbHJlYWR5IGNsb3NlIGF0IGhhbmQgYW5kIHByZXZhaWxlZCBldmVyeXdoZXJlLCBoZSBnYXZlIHdheSwgd2FzIHN3ZXB0IGFsb25nIHdpdGggdGhlIHVuaXZlcnNhbCB0aWRlLCBpc3N1ZWQgYW4gZWRpY3QgZGVjbGFyaW5nIGEgc3RhdGUgb2YgYW5hcmNoeSwgYW5kIGZvcnNvb2sgdGhlIGNpdHksIGNvbW1hbmRpbmcgdGhlIHNlbmF0ZSB0byBmb2xsb3csIGFuZCBmb3JiaWRkaW5nIGFueSBvbmUgdG8gcmVtYWluIHdobyBwcmVmZXJyZWQgY291bnRyeSBhbmQgZnJlZWRvbSB0byB0eXJhbm55LjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['33.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGV2ZW4gdGhlbiBQb21wZXkncyBmb3JjZXMgd2VyZSBtb3JlIG51bWVyb3VzIHRoYW4gQ2Flc2FyJ3M7IGJ1dCBubyBvbmUgd291bGQgc3VmZmVyIGhpbSB0byBleGVyY2lzZSBoaXMgb3duIGp1ZGdlbWVudDsgYW5kIHNvLCB1bmRlciB0aGUgaW5mbHVlbmNlIG9mIG1hbnkgZmFsc2UgYW5kIHRlcnJpZnlpbmcgcmVwb3J0cywgYmVsaWV2aW5nIHRoYXQgdGhlIHdhciB3YXMgYWxyZWFkeSBjbG9zZSBhdCBoYW5kIGFuZCBwcmV2YWlsZWQgZXZlcnl3aGVyZSwgaGUgZ2F2ZSB3YXksIHdhcyBzd2VwdCBhbG9uZyB3aXRoIHRoZSB1bml2ZXJzYWwgdGlkZSwgaXNzdWVkIGFuIGVkaWN0IGRlY2xhcmluZyBhIHN0YXRlIG9mIGFuYXJjaHksIGFuZCBmb3Jzb29rIHRoZSBjaXR5LCBjb21tYW5kaW5nIHRoZSBzZW5hdGUgdG8gZm9sbG93LCBhbmQgZm9yYmlkZGluZyBhbnkgb25lIHRvIHJlbWFpbiB3aG8gcHJlZmVycmVkIGNvdW50cnkgYW5kIGZyZWVkb20gdG8gdHlyYW5ueS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgdGhlIGNvbnN1bHMgZmxlZCwgd2l0aG91dCBldmVuIG1ha2luZyB0aGUgc2FjcmlmaWNlcyB1c3VhbCBiZWZvcmUgZGVwYXJ0dXJlOyBtb3N0IG9mIHRoZSBzZW5hdG9ycyBhbHNvIGZsZWQsIGFmdGVyIHNlaXppbmcsIGluIGEgc29ydCBvZiByb2JiZXJ5LCB3aGF0ZXZlciBjYW1lIHRvIGhhbmQgb2YgdGhlaXIgb3duIHBvc3Nlc3Npb25zLCBhcyB0aG91Z2ggaXQgd2VyZSB0aGUgcHJvcGVydHkgb2Ygb3RoZXJzLiBTb21lLCB0b28sIHdobyBiZWZvcmUgdGhpcyBoYWQgdmVoZW1lbnRseSBlc3BvdXNlZCB0aGUgY2F1c2Ugb2YgQ2Flc2FyLCB3ZXJlIG5vdyBmcmlnaHRlbmVkIG91dCBvZiB0aGVpciB3aXRzLCBhbmQgd2VyZSBjYXJyaWVkIGFsb25nLCB3aGVuIHRoZXJlIHdhcyBubyBuZWVkIG9mIGl0LCBieSB0aGUgc3dlZXAgb2YgdGhlIGdyZWF0IHRpZGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IHBpdGlmdWwgd2FzIHRoZSBzaWdodCBvZiB0aGUgY2l0eSwgbm93IHRoYXQgc28gZ3JlYXQgYSB0ZW1wZXN0IHdhcyBiZWFyaW5nIGRvd24gdXBvbiBoZXIsIGNhcnJpZWQgYWxvbmcgbGlrZSBhIHNoaXAgYWJhbmRvbmVkIG9mIGhlciBoZWxtc21lbiB0byBkYXNoIGFnYWluc3Qgd2hhdGV2ZXIgbGF5IGluIGhlciBwYXRoLiBTdGlsbCwgYWx0aG91Z2ggdGhlaXIgcmVtb3ZhbCB3YXMgc28gcGl0aWZ1bCBhIHRoaW5nLCBmb3IgdGhlIHNha2Ugb2YgUG9tcGV5IG1lbiBjb25zaWRlcmVkIGV4aWxlIHRvIGJlIHRoZWlyIGNvdW50cnksIGFuZCBhYmFuZG9uZWQgUm9tZSB3aXRoIHRoZSBmZWVsaW5nIHRoYXQgaXQgd2FzIENhZXNhcidzIGNhbXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjEuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHhpLiA0PC9iaWJsPi48L25vdGU+IEZvciBldmVuIExhYmllbnVzLCBvbmUgb2YgQ2Flc2FyJ3MgZ3JlYXRlc3QgZnJpZW5kcywgd2hvIGhhZCBiZWVuIGhpcyBsZWdhdGUgYW5kIGhhZCBmb3VnaHQgbW9zdCB6ZWFsb3VzbHkgd2l0aCBoaW0gaW4gYWxsIGhpcyBHYWxsaWMgd2Fycywgbm93IHJhbiBhd2F5IGZyb20gaGltIGFuZCBjYW1lIHRvIFBvbXBleS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBjb25zdWxzIGZsZWQsIHdpdGhvdXQgZXZlbiBtYWtpbmcgdGhlIHNhY3JpZmljZXMgdXN1YWwgYmVmb3JlIGRlcGFydHVyZTsgbW9zdCBvZiB0aGUgc2VuYXRvcnMgYWxzbyBmbGVkLCBhZnRlciBzZWl6aW5nLCBpbiBhIHNvcnQgb2Ygcm9iYmVyeSwgd2hhdGV2ZXIgY2FtZSB0byBoYW5kIG9mIHRoZWlyIG93biBwb3NzZXNzaW9ucywgYXMgdGhvdWdoIGl0IHdlcmUgdGhlIHByb3BlcnR5IG9mIG90aGVycy4gU29tZSwgdG9vLCB3aG8gYmVmb3JlIHRoaXMgaGFkIHZlaGVtZW50bHkgZXNwb3VzZWQgdGhlIGNhdXNlIG9mIENhZXNhciwgd2VyZSBub3cgZnJpZ2h0ZW5lZCBvdXQgb2YgdGhlaXIgd2l0cywgYW5kIHdlcmUgY2FycmllZCBhbG9uZywgd2hlbiB0aGVyZSB3YXMgbm8gbmVlZCBvZiBpdCwgYnkgdGhlIHN3ZWVwIG9mIHRoZSBncmVhdCB0aWRlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3N0IHBpdGlmdWwgd2FzIHRoZSBzaWdodCBvZiB0aGUgY2l0eSwgbm93IHRoYXQgc28gZ3JlYXQgYSB0ZW1wZXN0IHdhcyBiZWFyaW5nIGRvd24gdXBvbiBoZXIsIGNhcnJpZWQgYWxvbmcgbGlrZSBhIHNoaXAgYWJhbmRvbmVkIG9mIGhlciBoZWxtc21lbiB0byBkYXNoIGFnYWluc3Qgd2hhdGV2ZXIgbGF5IGluIGhlciBwYXRoLiBTdGlsbCwgYWx0aG91Z2ggdGhlaXIgcmVtb3ZhbCB3YXMgc28gcGl0aWZ1bCBhIHRoaW5nLCBmb3IgdGhlIHNha2Ugb2YgUG9tcGV5IG1lbiBjb25zaWRlcmVkIGV4aWxlIHRvIGJlIHRoZWlyIGNvdW50cnksIGFuZCBhYmFuZG9uZWQgUm9tZSB3aXRoIHRoZSBmZWVsaW5nIHRoYXQgaXQgd2FzIENhZXNhcidzIGNhbXAuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYxLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHhpLiA0PC9iaWJsPi48L25vdGU+IEZvciBldmVuIExhYmllbnVzLCBvbmUgb2YgQ2Flc2FyJ3MgZ3JlYXRlc3QgZnJpZW5kcywgd2hvIGhhZCBiZWVuIGhpcyBsZWdhdGUgYW5kIGhhZCBmb3VnaHQgbW9zdCB6ZWFsb3VzbHkgd2l0aCBoaW0gaW4gYWxsIGhpcyBHYWxsaWMgd2Fycywgbm93IHJhbiBhd2F5IGZyb20gaGltIGFuZCBjYW1lIHRvIFBvbXBleS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2MS40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4aS4gNDwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4aS4gNDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXIgc2VudCB0byBMYWJpZW51cyBoaXMgbW9uZXkgYW5kIGhpcyBiYWdnYWdlOyBhZ2FpbnN0IERvbWl0aXVzLCBob3dldmVyLCB3aG8gd2FzIGhvbGRpbmcgQ29yZmluaXVtIHdpdGggdGhpcnR5IGNvaG9ydHMgdW5kZXIgaGlzIGNvbW1hbmQsIGhlIG1hcmNoZWQsIGFuZCBwaXRjaGVkIGhpcyBjYW1wIG5lYXIgYnkuIERvbWl0aXVzLCBkZXNwYWlyaW5nIG9mIGhpcyBlbnRlcnByaXNlLCBhc2tlZCBoaXMgcGh5c2ljaWFuLCB3aG8gd2FzIGEgc2xhdmUsIGZvciBhIHBvaXNvbjsgYW5kIHRha2luZyB3aGF0IHdhcyBnaXZlbiBoaW0sIGRyYW5rIGl0LCBpbnRlbmRpbmcgdG8gZGllLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYWZ0ZXIgYSBsaXR0bGUsIGhlYXJpbmcgdGhhdCBDYWVzYXIgc2hvd2VkIG1vc3Qgd29uZGVyZnVsIGNsZW1lbmN5IHRvd2FyZHMgaGlzIHByaXNvbmVycywgaGUgYmV3YWlsZWQgaGlzIGZhdGUsIGFuZCBibGFtZWQgdGhlIHJhc2huZXNzIG9mIGhpcyBwdXJwb3NlLiBUaGVuIGhpcyBwaHlzaWNpYW4gYmFkZSBoaW0gYmUgb2YgZ29vZCBjaGVlciwgc2luY2Ugd2hhdCBoZSBoYWQgZHJ1bmsgd2FzIGEgc2xlZXBpbmctcG90aW9uIGFuZCBub3QgZGVhZGx5OyB3aGVyZXVwb24gRG9taXRpdXMgcm9zZSB1cCBvdmVyam95ZWQgYW5kIHdlbnQgdG8gQ2Flc2FyLCB0aGUgcGxlZGdlIG9mIHdob3NlIHJpZ2h0IGhhbmQgaGUgcmVjZWl2ZWQsIG9ubHkgdG8gZGVzZXJ0IGhpbSBhbmQgZ28gYmFjayB0byBQb21wZXkuIFdoZW4gdGlkaW5ncyBvZiB0aGVzZSB0aGluZ3MgY2FtZSB0byBSb21lLCBtZW4gd2VyZSBtYWRlIG1vcmUgY2hlZXJmdWwsIGFuZCBzb21lIG9mIHRoZSBmdWdpdGl2ZXMgdHVybmVkIGJhY2suPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXIgc2VudCB0byBMYWJpZW51cyBoaXMgbW9uZXkgYW5kIGhpcyBiYWdnYWdlOyBhZ2FpbnN0IERvbWl0aXVzLCBob3dldmVyLCB3aG8gd2FzIGhvbGRpbmcgQ29yZmluaXVtIHdpdGggdGhpcnR5IGNvaG9ydHMgdW5kZXIgaGlzIGNvbW1hbmQsIGhlIG1hcmNoZWQsIGFuZCBwaXRjaGVkIGhpcyBjYW1wIG5lYXIgYnkuIERvbWl0aXVzLCBkZXNwYWlyaW5nIG9mIGhpcyBlbnRlcnByaXNlLCBhc2tlZCBoaXMgcGh5c2ljaWFuLCB3aG8gd2FzIGEgc2xhdmUsIGZvciBhIHBvaXNvbjsgYW5kIHRha2luZyB3aGF0IHdhcyBnaXZlbiBoaW0sIGRyYW5rIGl0LCBpbnRlbmRpbmcgdG8gZGllLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBhIGxpdHRsZSwgaGVhcmluZyB0aGF0IENhZXNhciBzaG93ZWQgbW9zdCB3b25kZXJmdWwgY2xlbWVuY3kgdG93YXJkcyBoaXMgcHJpc29uZXJzLCBoZSBiZXdhaWxlZCBoaXMgZmF0ZSwgYW5kIGJsYW1lZCB0aGUgcmFzaG5lc3Mgb2YgaGlzIHB1cnBvc2UuIFRoZW4gaGlzIHBoeXNpY2lhbiBiYWRlIGhpbSBiZSBvZiBnb29kIGNoZWVyLCBzaW5jZSB3aGF0IGhlIGhhZCBkcnVuayB3YXMgYSBzbGVlcGluZy1wb3Rpb24gYW5kIG5vdCBkZWFkbHk7IHdoZXJldXBvbiBEb21pdGl1cyByb3NlIHVwIG92ZXJqb3llZCBhbmQgd2VudCB0byBDYWVzYXIsIHRoZSBwbGVkZ2Ugb2Ygd2hvc2UgcmlnaHQgaGFuZCBoZSByZWNlaXZlZCwgb25seSB0byBkZXNlcnQgaGltIGFuZCBnbyBiYWNrIHRvIFBvbXBleS4gV2hlbiB0aWRpbmdzIG9mIHRoZXNlIHRoaW5ncyBjYW1lIHRvIFJvbWUsIG1lbiB3ZXJlIG1hZGUgbW9yZSBjaGVlcmZ1bCwgYW5kIHNvbWUgb2YgdGhlIGZ1Z2l0aXZlcyB0dXJuZWQgYmFjay48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgdG9vayBvdmVyIHRoZSB0cm9vcHMgb2YgRG9taXRpdXMsIGFzIHdlbGwgYXMgYWxsIHRoZSBvdGhlciBsZXZpZXMgb2YgUG9tcGV5IHdoaWNoIGhlIHN1cnByaXNlZCBpbiB0aGUgdmFyaW91cyBjaXRpZXMuIFRoZW4sIHNpbmNlIGhpcyBmb3JjZXMgd2VyZSBhbHJlYWR5IG51bWVyb3VzIGFuZCBmb3JtaWRhYmxlLCBoZSBtYXJjaGVkIGFnYWluc3QgUG9tcGV5IGhpbXNlbGYuIFBvbXBleSwgaG93ZXZlciwgZGlkIG5vdCBhd2FpdCBoaXMgYXBwcm9hY2gsIGJ1dCBmbGVkIHRvIEJydW5kaXNpdW0sIHNlbnQgdGhlIGNvbnN1bHMgYmVmb3JlIGhpbSB3aXRoIGFuIGFybXkgdG8gRHlycmhhY2hpdW0sIGFuZCBzaG9ydGx5IGFmdGVyd2FyZHMsIGFzIENhZXNhciBkcmV3IG5lYXIsIHNhaWxlZCBvZmYgaGltc2VsZiwgYXMgc2hhbGwgYmUgc2V0IGZvcnRoIGNpcmN1bXN0YW50aWFsbHkgaW4gaGlzIExpZmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2Mi4xIiB2YWxpZD0ieWVzIj5DaGFwdGVyIGx4aWk8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIHdpc2hlZCB0byBwdXJzdWUgaGltIGF0IG9uY2UsIGJ1dCB3YXMgZGVzdGl0dXRlIG9mIHNoaXBzOyBzbyBoZSB0dXJuZWQgYmFjayB0byBSb21lLCBoYXZpbmcgaW4gc2l4dHkgZGF5cyBhbmQgd2l0aG91dCBibG9vZHNoZWQgYmVjb21lIG1hc3RlciBvZiBhbGwgSXRhbHkuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIHRvb2sgb3ZlciB0aGUgdHJvb3BzIG9mIERvbWl0aXVzLCBhcyB3ZWxsIGFzIGFsbCB0aGUgb3RoZXIgbGV2aWVzIG9mIFBvbXBleSB3aGljaCBoZSBzdXJwcmlzZWQgaW4gdGhlIHZhcmlvdXMgY2l0aWVzLiBUaGVuLCBzaW5jZSBoaXMgZm9yY2VzIHdlcmUgYWxyZWFkeSBudW1lcm91cyBhbmQgZm9ybWlkYWJsZSwgaGUgbWFyY2hlZCBhZ2FpbnN0IFBvbXBleSBoaW1zZWxmLiBQb21wZXksIGhvd2V2ZXIsIGRpZCBub3QgYXdhaXQgaGlzIGFwcHJvYWNoLCBidXQgZmxlZCB0byBCcnVuZGlzaXVtLCBzZW50IHRoZSBjb25zdWxzIGJlZm9yZSBoaW0gd2l0aCBhbiBhcm15IHRvIER5cnJoYWNoaXVtLCBhbmQgc2hvcnRseSBhZnRlcndhcmRzLCBhcyBDYWVzYXIgZHJldyBuZWFyLCBzYWlsZWQgb2ZmIGhpbXNlbGYsIGFzIHNoYWxsIGJlIHNldCBmb3J0aCBjaXJjdW1zdGFudGlhbGx5IGluIGhpcyBMaWZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYyLjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgbHhpaTwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYyLjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgbHhpaTwvYmlibD4uPC90cmFuc2xhdGlvbj4="
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciB3aXNoZWQgdG8gcHVyc3VlIGhpbSBhdCBvbmNlLCBidXQgd2FzIGRlc3RpdHV0ZSBvZiBzaGlwczsgc28gaGUgdHVybmVkIGJhY2sgdG8gUm9tZSwgaGF2aW5nIGluIHNpeHR5IGRheXMgYW5kIHdpdGhvdXQgYmxvb2RzaGVkIGJlY29tZSBtYXN0ZXIgb2YgYWxsIEl0YWx5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SGUgZm91bmQgdGhlIGNpdHkgbW9yZSB0cmFucXVpbCB0aGFuIGhlIHdhcyBleHBlY3RpbmcsIGFuZCBtYW55IHNlbmF0b3JzIGluIGl0LiBXaXRoIHRoZXNlLCB0aGVyZWZvcmUsIGhlIGNvbmZlcnJlZCBpbiBhIGdlbnRsZSBhbmQgYWZmYWJsZSBtYW5uZXIsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DYWVzYXIgZ2l2ZXMgYSBzdW1tYXJ5IG9mIGhpcyBzcGVlY2ggdG8gdGhlIHNlbmF0b3JzIGluIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMS4zMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEMuPC90aXRsZT4gaS4gMzI8L2JpYmw+Ljwvbm90ZT4gaW52aXRpbmcgdGhlbSBldmVuIHRvIHNlbmQgYSBkZXB1dGF0aW9uIHRvIFBvbXBleSBwcm9wb3Npbmcgc3VpdGFibGUgdGVybXMgb2YgYWdyZWVtZW50LiBCdXQgbm8gb25lIHdvdWxkIGxpc3RlbiB0byBoaW0sIGVpdGhlciBiZWNhdXNlIHRoZXkgZmVhcmVkIFBvbXBleSwgd2hvbSB0aGV5IGhhZCBhYmFuZG9uZWQsIG9yIGJlY2F1c2UgdGhleSB0aG91Z2h0IHRoYXQgQ2Flc2FyIGRpZCBub3QgbWVhbiB3aGF0IGhlIHNhaWQsIGJ1dCB3YXMgaW5kdWxnaW5nIGluIHNwZWNpb3VzIHRhbGsuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgdHJpYnVuZSBNZXRlbGx1cyB0cmllZCB0byBwcmV2ZW50IENhZXNhcidzIHRha2luZyBtb25leSBmcm9tIHRoZSByZXNlcnZlIGZ1bmRzIG9mIHRoZSBzdGF0ZSwgYW5kIGNpdGVkIGNlcnRhaW4gbGF3cywgQ2Flc2FyIHNhaWQgdGhhdCBhcm1zIGFuZCBsYXdzIGhhZCBub3QgdGhlIHNhbWUgc2Vhc29uLiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBpZiB0aG91IGFydCBkaXNwbGVhc2VkIGF0IHdoYXQgaXMgZ29pbmcgb24sIGZvciB0aGUgcHJlc2VudCBnZXQgb3V0IG9mIHRoZSB3YXksIHNpbmNlIHdhciBoYXMgbm8gdXNlIGZvciBmcmVlIHNwZWVjaDsgd2hlbiwgaG93ZXZlciwgSSBoYXZlIGNvbWUgdG8gdGVybXMgYW5kIGxhaWQgZG93biBteSBhcm1zLCB0aGVuIHRob3Ugc2hhbHQgY29tZSBiZWZvcmUgdGhlIHBlb3BsZSB3aXRoIHRoeSBoYXJhbmd1ZXMuIEFuZCBpbiBzYXlpbmcgdGhpcyBJIHdhaXZlIG15IG93biBqdXN0IHJpZ2h0czsgZm9yIHRob3UgYXJ0IG1pbmUsIHRob3UgYW5kIGFsbCBvZiB0aGUgZmFjdGlvbiBob3N0aWxlIHRvIG1lIHdob20gSSBoYXZlIGNhdWdodDwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIHNwZWVjaCB0byBNZXRlbGx1cywgQ2Flc2FyIHdhbGtlZCB0b3dhcmRzIHRoZSBkb29yIG9mIHRoZSB0cmVhc3VyeSwgYW5kIHdoZW4gdGhlIGtleXMgd2VyZSBub3QgdG8gYmUgZm91bmQsIGhlIHNlbnQgZm9yIHNtaXRocyBhbmQgb3JkZXJlZCB0aGVtIHRvIGJyZWFrIGluIHRoZSBkb29yLiBNZXRlbGx1cyBvbmNlIG1vcmUgb3Bwb3NlZCBoaW0sIGFuZCB3YXMgY29tbWVuZGVkIGJ5IHNvbWUgZm9yIHNvIGRvaW5nOyBidXQgQ2Flc2FyLCByYWlzaW5nIGhpcyB2b2ljZSwgdGhyZWF0ZW5lZCB0byBraWxsIGhpbSBpZiBoZSBkaWQgbm90IGNlYXNlIGhpcyB0cm91Ymxlc29tZSBpbnRlcmZlcmVuY2UuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QW5kIHRob3Ugc3VyZWx5IGtub3dlc3QsIHlvdW5nIG1hbiw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBpdCBpcyBtb3JlIHVucGxlYXNhbnQgZm9yIG1lIHRvIHNheSB0aGlzIHRoYW4gdG8gZG8gaXQ8L3E+IFRoZW4gTWV0ZWxsdXMsIGluIGNvbnNlcXVlbmNlIG9mIHRoaXMgc3BlZWNoLCB3ZW50IG9mZiBpbiBhIGZyaWdodCwgYW5kIGhlbmNlZm9ydGggZXZlcnl0aGluZyB3YXMgc3BlZWRpbHkgYW5kIGVhc2lseSBmdXJuaXNoZWQgdG8gQ2Flc2FyIGZvciB0aGUgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDYyLjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4aWkuIDE8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNhZXNhciBnaXZlcyBhIHN1bW1hcnkgb2YgaGlzIHNwZWVjaCB0byB0aGUgc2VuYXRvcnMgaW4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjMyIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gQy48L3RpdGxlPiBpLiAzMjwvYmlibD4uPC9ub3RlPiBpbnZpdGluZyB0aGVtIGV2ZW4gdG8gc2VuZCBhIGRlcHV0YXRpb24gdG8gUG9tcGV5IHByb3Bvc2luZyBzdWl0YWJsZSB0ZXJtcyBvZiBhZ3JlZW1lbnQuIEJ1dCBubyBvbmUgd291bGQgbGlzdGVuIHRvIGhpbSwgZWl0aGVyIGJlY2F1c2UgdGhleSBmZWFyZWQgUG9tcGV5LCB3aG9tIHRoZXkgaGFkIGFiYW5kb25lZCwgb3IgYmVjYXVzZSB0aGV5IHRob3VnaHQgdGhhdCBDYWVzYXIgZGlkIG5vdCBtZWFuIHdoYXQgaGUgc2FpZCwgYnV0IHdhcyBpbmR1bGdpbmcgaW4gc3BlY2lvdXMgdGFsay4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDEuMzIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGkuIDMyPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGkuIDMyPC90cmFuc2xhdGlvbj4="
translation['35.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHRyaWJ1bmUgTWV0ZWxsdXMgdHJpZWQgdG8gcHJldmVudCBDYWVzYXIncyB0YWtpbmcgbW9uZXkgZnJvbSB0aGUgcmVzZXJ2ZSBmdW5kcyBvZiB0aGUgc3RhdGUsIGFuZCBjaXRlZCBjZXJ0YWluIGxhd3MsIENhZXNhciBzYWlkIHRoYXQgYXJtcyBhbmQgbGF3cyBoYWQgbm90IHRoZSBzYW1lIHNlYXNvbi4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkJ1dCBpZiB0aG91IGFydCBkaXNwbGVhc2VkIGF0IHdoYXQgaXMgZ29pbmcgb24sIGZvciB0aGUgcHJlc2VudCBnZXQgb3V0IG9mIHRoZSB3YXksIHNpbmNlIHdhciBoYXMgbm8gdXNlIGZvciBmcmVlIHNwZWVjaDsgd2hlbiwgaG93ZXZlciwgSSBoYXZlIGNvbWUgdG8gdGVybXMgYW5kIGxhaWQgZG93biBteSBhcm1zLCB0aGVuIHRob3Ugc2hhbHQgY29tZSBiZWZvcmUgdGhlIHBlb3BsZSB3aXRoIHRoeSBoYXJhbmd1ZXMuIEFuZCBpbiBzYXlpbmcgdGhpcyBJIHdhaXZlIG15IG93biBqdXN0IHJpZ2h0czsgZm9yIHRob3UgYXJ0IG1pbmUsIHRob3UgYW5kIGFsbCBvZiB0aGUgZmFjdGlvbiBob3N0aWxlIHRvIG1lIHdob20gSSBoYXZlIGNhdWdodDwvcT4gCgkJCQkgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgc3BlZWNoIHRvIE1ldGVsbHVzLCBDYWVzYXIgd2Fsa2VkIHRvd2FyZHMgdGhlIGRvb3Igb2YgdGhlIHRyZWFzdXJ5LCBhbmQgd2hlbiB0aGUga2V5cyB3ZXJlIG5vdCB0byBiZSBmb3VuZCwgaGUgc2VudCBmb3Igc21pdGhzIGFuZCBvcmRlcmVkIHRoZW0gdG8gYnJlYWsgaW4gdGhlIGRvb3IuIE1ldGVsbHVzIG9uY2UgbW9yZSBvcHBvc2VkIGhpbSwgYW5kIHdhcyBjb21tZW5kZWQgYnkgc29tZSBmb3Igc28gZG9pbmc7IGJ1dCBDYWVzYXIsIHJhaXNpbmcgaGlzIHZvaWNlLCB0aHJlYXRlbmVkIHRvIGtpbGwgaGltIGlmIGhlIGRpZCBub3QgY2Vhc2UgaGlzIHRyb3VibGVzb21lIGludGVyZmVyZW5jZS4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFuZCB0aG91IHN1cmVseSBrbm93ZXN0LCB5b3VuZyBtYW4sPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+dGhhdCBpdCBpcyBtb3JlIHVucGxlYXNhbnQgZm9yIG1lIHRvIHNheSB0aGlzIHRoYW4gdG8gZG8gaXQ8L3E+IFRoZW4gTWV0ZWxsdXMsIGluIGNvbnNlcXVlbmNlIG9mIHRoaXMgc3BlZWNoLCB3ZW50IG9mZiBpbiBhIGZyaWdodCwgYW5kIGhlbmNlZm9ydGggZXZlcnl0aGluZyB3YXMgc3BlZWRpbHkgYW5kIGVhc2lseSBmdXJuaXNoZWQgdG8gQ2Flc2FyIGZvciB0aGUgd2FyLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2Mi4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4aWkuIDE8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjIuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseGlpLiAxPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHhpaS4gMTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIGhlIG1hZGUgYW4gZXhwZWRpdGlvbiBpbnRvIFNwYWluLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjM0IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGkuIDM0LTg2PC9iaWJsPi48L25vdGU+IGhhdmluZyByZXNvbHZlZCBmaXJzdCB0byBkcml2ZSBvdXQgZnJvbSB0aGVyZSBBZnJhbml1cyBhbmQgVmFycm8sIFBvbXBleSdzIGxlZ2F0ZXMsIGFuZCBicmluZyB0aGVpciBmb3JjZXMgdGhlcmUgYW5kIHRoZSBwcm92aW5jZXMgaW50byBoaXMgcG93ZXIsIGFuZCB0aGVuIHRvIG1hcmNoIGFnYWluc3QgUG9tcGV5LCBsZWF2aW5nIG5vdCBhbiBlbmVteSBpbiBoaXMgcmVhci4gQW5kIHRob3VnaCBoaXMgbGlmZSB3YXMgb2Z0ZW4gaW4gcGVyaWwgZnJvbSBhbWJ1c2NhZGVzLCBhbmQgaGlzIGFybXkgbW9zdCBvZiBhbGwgZnJvbSBodW5nZXIsIGhlIGRpZCBub3QgY2Vhc2UgZnJvbSBwdXJzdWluZywgY2hhbGxlbmdpbmcsIGFuZCBiZXNpZWdpbmcgdGhlIG1lbiB1bnRpbCBoZSBoYWQgbWFkZSBoaW1zZWxmIGJ5IG1haW4gZm9yY2UgbWFzdGVyIG9mIHRoZWlyIGNhbXBzIGFuZCB0aGVpciBmb3JjZXMuIFRoZSBsZWFkZXJzLCBob3dldmVyLCBtYWRlIHRoZWlyIGVzY2FwZSB0byBQb21wZXkuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gaGUgbWFkZSBhbiBleHBlZGl0aW9uIGludG8gU3BhaW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAxLjM0IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEMuPC90aXRsZT4gaS4gMzQtODY8L2JpYmw+Ljwvbm90ZT4gaGF2aW5nIHJlc29sdmVkIGZpcnN0IHRvIGRyaXZlIG91dCBmcm9tIHRoZXJlIEFmcmFuaXVzIGFuZCBWYXJybywgUG9tcGV5J3MgbGVnYXRlcywgYW5kIGJyaW5nIHRoZWlyIGZvcmNlcyB0aGVyZSBhbmQgdGhlIHByb3ZpbmNlcyBpbnRvIGhpcyBwb3dlciwgYW5kIHRoZW4gdG8gbWFyY2ggYWdhaW5zdCBQb21wZXksIGxlYXZpbmcgbm90IGFuIGVuZW15IGluIGhpcyByZWFyLiBBbmQgdGhvdWdoIGhpcyBsaWZlIHdhcyBvZnRlbiBpbiBwZXJpbCBmcm9tIGFtYnVzY2FkZXMsIGFuZCBoaXMgYXJteSBtb3N0IG9mIGFsbCBmcm9tIGh1bmdlciwgaGUgZGlkIG5vdCBjZWFzZSBmcm9tIHB1cnN1aW5nLCBjaGFsbGVuZ2luZywgYW5kIGJlc2llZ2luZyB0aGUgbWVuIHVudGlsIGhlIGhhZCBtYWRlIGhpbXNlbGYgYnkgbWFpbiBmb3JjZSBtYXN0ZXIgb2YgdGhlaXIgY2FtcHMgYW5kIHRoZWlyIGZvcmNlcy4gVGhlIGxlYWRlcnMsIGhvd2V2ZXIsIG1hZGUgdGhlaXIgZXNjYXBlIHRvIFBvbXBleS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDEuMzQiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gQy48L3RpdGxlPiBpLiAzNC04NjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gQy48L3RpdGxlPiBpLiAzNC04NjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gQ2Flc2FyIGNhbWUgYmFjayB0byBSb21lLCBQaXNvLCBoaXMgZmF0aGVyLWluLWxhdywgdXJnZWQgaGltIHRvIHNlbmQgYSBkZXB1dGF0aW9uIHRvIFBvbXBleSB3aXRoIHByb3Bvc2FscyBmb3IgYSBzZXR0bGVtZW50OyBidXQgSXNhdXJpY3VzLCB0byBwbGVhc2UgQ2Flc2FyLCBvcHBvc2VkIHRoZSBwcm9qZWN0LiBTbywgaGF2aW5nIGJlZW4gbWFkZSBkaWN0YXRvciBieSB0aGUgc2VuYXRlLCBoZSBicm91Z2h0IGhvbWUgZXhpbGVzLCByZXN0b3JlZCB0byBjaXZpYyByaWdodHMgdGhlIGNoaWxkcmVuIG9mIHRob3NlIHdobyBoYWQgc3VmZmVyZWQgaW4gdGhlIHRpbWUgb2YgU3VsbGEsIHJlbGlldmVkIHRoZSBidXJkZW5zIG9mIHRoZSBkZWJ0b3ItY2xhc3MgYnkgYSBjZXJ0YWluIGFkanVzdG1lbnQgb2YgaW50ZXJlc3QsIHRvb2sgaW4gaGFuZCBhIGZldyBvdGhlciBwdWJsaWMgbWVhc3VyZXMgb2YgbGlrZSBjaGFyYWN0ZXIsIGFuZCB3aXRoaW4gZWxldmVuIGRheXMgYWJkaWNhdGVkIHRoZSBzb2xlIHBvd2VyLCBoYWQgaGltc2VsZiBkZWNsYXJlZCBjb25zdWwgd2l0aCBTZXJ2aWxpdXMgSXNhdXJpY3VzLCBhbmQgZW50ZXJlZCB1cG9uIGhpcyBjYW1wYWlnbi48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBDYWVzYXIgY2FtZSBiYWNrIHRvIFJvbWUsIFBpc28sIGhpcyBmYXRoZXItaW4tbGF3LCB1cmdlZCBoaW0gdG8gc2VuZCBhIGRlcHV0YXRpb24gdG8gUG9tcGV5IHdpdGggcHJvcG9zYWxzIGZvciBhIHNldHRsZW1lbnQ7IGJ1dCBJc2F1cmljdXMsIHRvIHBsZWFzZSBDYWVzYXIsIG9wcG9zZWQgdGhlIHByb2plY3QuIFNvLCBoYXZpbmcgYmVlbiBtYWRlIGRpY3RhdG9yIGJ5IHRoZSBzZW5hdGUsIGhlIGJyb3VnaHQgaG9tZSBleGlsZXMsIHJlc3RvcmVkIHRvIGNpdmljIHJpZ2h0cyB0aGUgY2hpbGRyZW4gb2YgdGhvc2Ugd2hvIGhhZCBzdWZmZXJlZCBpbiB0aGUgdGltZSBvZiBTdWxsYSwgcmVsaWV2ZWQgdGhlIGJ1cmRlbnMgb2YgdGhlIGRlYnRvci1jbGFzcyBieSBhIGNlcnRhaW4gYWRqdXN0bWVudCBvZiBpbnRlcmVzdCwgdG9vayBpbiBoYW5kIGEgZmV3IG90aGVyIHB1YmxpYyBtZWFzdXJlcyBvZiBsaWtlIGNoYXJhY3RlciwgYW5kIHdpdGhpbiBlbGV2ZW4gZGF5cyBhYmRpY2F0ZWQgdGhlIHNvbGUgcG93ZXIsIGhhZCBoaW1zZWxmIGRlY2xhcmVkIGNvbnN1bCB3aXRoIFNlcnZpbGl1cyBJc2F1cmljdXMsIGFuZCBlbnRlcmVkIHVwb24gaGlzIGNhbXBhaWduLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIGhpcyBmb3JjZXMgaGUgcGFzc2VkIGJ5IGluIGEgZm9yY2VkIG1hcmNoLCBhbmQgd2l0aCBzaXggaHVuZHJlZCBwaWNrZWQgaG9yc2VtZW4gYW5kIGZpdmUgbGVnaW9ucywgYXQgdGhlIHRpbWUgb2YgdGhlIHdpbnRlciBzb2xzdGljZSwgaW4gdGhlIGVhcmx5IHBhcnQgb2YgSmFudWFyeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPjQ4IEIuQy4gVGhlIFJvbWFuIGNhbGVuZGFyLCBhdCB0aGlzIHRpbWUsIHdhcyBtdWNoIGluIGFkdmFuY2Ugb2YgdGhlIHNvbGFyIHNlYXNvbnMuPC9ub3RlPiAodGhpcyBtb250aCBhbnN3ZXJzIG5lYXJseSB0byB0aGUgQXRoZW5pYW4gUG9zZWlkZW9uKSwgcHV0IHRvIHNlYSwgYW5kIGFmdGVyIGNyb3NzaW5nIHRoZSBJb25pYW4gZ3VsZiB0b29rIE9yaWN1bSBhbmQgQXBvbGxvbmlhLCBhbmQgc2VudCBoaXMgdHJhbnNwb3J0cyBiYWNrIGFnYWluIHRvIEJydW5kaXNpdW0gZm9yIHRoZSBzb2xkaWVycyB3aG8gaGFkIGJlZW4gYmVsYXRlZCBvbiB0aGVpciBtYXJjaC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UsIGFzIGxvbmcgYXMgdGhleSB3ZXJlIG9uIHRoZSByb2FkLCBzaW5jZSB0aGV5IHdlcmUgbm93IHBhc3QgdGhlaXIgcGh5c2ljYWwgcHJpbWUgYW5kIHdvcm4gb3V0IHdpdGggdGhlaXIgbXVsdGl0dWRpbm91cyB3YXJzLCBtdXJtdXJlZCBhZ2FpbnN0IENhZXNhci4gCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGl0aGVyLCBwcmF5LCBhbmQgdG8gd2hhdCBlbmQgd2lsbCB0aGlzIG1hbiBicmluZyB1cywgaHVycnlpbmcgdXMgYWJvdXQgYW5kIHRyZWF0aW5nIHVzIGxpa2UgdGlyZWxlc3MgYW5kIGxpZmVsZXNzIHRoaW5ncz8gRXZlbiBhIHN3b3JkIGdldHMgdGlyZWQgb3V0IHdpdGggc21pdGluZywgYW5kIHNoaWVsZCBhbmQgYnJlYXN0cGxhdGUgYXJlIHNwYXJlZCBhIGxpdHRsZSBhZnRlciBzbyBsb25nIGEgdGltZSBvZiBzZXJ2aWNlLiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2lsbCBub3QgZXZlbiBvdXIgd291bmRzLCB0aGVuLCBjb252aW5jZSBDYWVzYXIgdGhhdCBoZSBjb21tYW5kcyBtb3J0YWwgbWVuLCBhbmQgdGhhdCB3ZSBhcmUgbW9ydGFsIGluIHRoZSBlbmR1cmFuY2Ugb2YgcGFpbiBhbmQgc3VmZmVyaW5nPyBTdXJlbHkgdGhlIHdpbnRyeSBzZWFzb24gYW5kIHRoZSBvY2Nhc2lvbiBvZiBhIHN0b3JtIGF0IHNlYSBub3QgZXZlbiBhIGdvZCBjYW4gY29uc3RyYWluOyB5ZXQgdGhpcyBtYW4gdGFrZXMgcmlza3MgYXMgdGhvdWdoIGhlIHdlcmUgbm90IHB1cnN1aW5nLCBidXQgZmx5aW5nIGZyb20sIGVuZW1pZXM8L3E+IFdpdGggc3VjaCB3b3JkcyBhcyB0aGVzZSB0aGV5IG1hcmNoZWQgaW4gYSBsZWlzdXJlbHkgd2F5IHRvIEJydW5kaXNpdW0uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgZ290IHRoZXJlIGFuZCBmb3VuZCB0aGF0IENhZXNhciBoYWQgcHV0IHRvIHNlYSwgdGhleSBxdWlja2x5IGNoYW5nZWQgdGhlaXIgdG9uZSBhbmQgcmV2aWxlZCB0aGVtc2VsdmVzIGFzIHRyYWl0b3JzIHRvIHRoZSBJbXBlcmF0b3I7IHRoZXkgcmV2aWxlZCB0aGVpciBvZmZpY2VycywgdG9vLCBmb3Igbm90IGhhdmluZyBxdWlja2VuZWQgdGhlaXIgbWFyY2guIFRoZW4sIHNpdHRpbmcgb24gdGhlIGNsaWZmcywgdGhleSBsb29rZWQgb2ZmIHRvd2FyZHMgdGhlIG9wZW4gc2VhIGFuZCBFcGlydXMsIHdhdGNoaW5nIGZvciB0aGUgc2hpcHMgd2hpY2ggd2VyZSB0byBjYXJyeSB0aGVtIGFjcm9zcyB0byB0aGVpciBjb21tYW5kZXIuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSByZXN0IG9mIGhpcyBmb3JjZXMgaGUgcGFzc2VkIGJ5IGluIGEgZm9yY2VkIG1hcmNoLCBhbmQgd2l0aCBzaXggaHVuZHJlZCBwaWNrZWQgaG9yc2VtZW4gYW5kIGZpdmUgbGVnaW9ucywgYXQgdGhlIHRpbWUgb2YgdGhlIHdpbnRlciBzb2xzdGljZSwgaW4gdGhlIGVhcmx5IHBhcnQgb2YgSmFudWFyeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+NDggQi5DLiBUaGUgUm9tYW4gY2FsZW5kYXIsIGF0IHRoaXMgdGltZSwgd2FzIG11Y2ggaW4gYWR2YW5jZSBvZiB0aGUgc29sYXIgc2Vhc29ucy48L25vdGU+ICh0aGlzIG1vbnRoIGFuc3dlcnMgbmVhcmx5IHRvIHRoZSBBdGhlbmlhbiBQb3NlaWRlb24pLCBwdXQgdG8gc2VhLCBhbmQgYWZ0ZXIgY3Jvc3NpbmcgdGhlIElvbmlhbiBndWxmIHRvb2sgT3JpY3VtIGFuZCBBcG9sbG9uaWEsIGFuZCBzZW50IGhpcyB0cmFuc3BvcnRzIGJhY2sgYWdhaW4gdG8gQnJ1bmRpc2l1bSBmb3IgdGhlIHNvbGRpZXJzIHdobyBoYWQgYmVlbiBiZWxhdGVkIG9uIHRoZWlyIG1hcmNoLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlLCBhcyBsb25nIGFzIHRoZXkgd2VyZSBvbiB0aGUgcm9hZCwgc2luY2UgdGhleSB3ZXJlIG5vdyBwYXN0IHRoZWlyIHBoeXNpY2FsIHByaW1lIGFuZCB3b3JuIG91dCB3aXRoIHRoZWlyIG11bHRpdHVkaW5vdXMgd2FycywgbXVybXVyZWQgYWdhaW5zdCBDYWVzYXIuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGl0aGVyLCBwcmF5LCBhbmQgdG8gd2hhdCBlbmQgd2lsbCB0aGlzIG1hbiBicmluZyB1cywgaHVycnlpbmcgdXMgYWJvdXQgYW5kIHRyZWF0aW5nIHVzIGxpa2UgdGlyZWxlc3MgYW5kIGxpZmVsZXNzIHRoaW5ncz8gRXZlbiBhIHN3b3JkIGdldHMgdGlyZWQgb3V0IHdpdGggc21pdGluZywgYW5kIHNoaWVsZCBhbmQgYnJlYXN0cGxhdGUgYXJlIHNwYXJlZCBhIGxpdHRsZSBhZnRlciBzbyBsb25nIGEgdGltZSBvZiBzZXJ2aWNlLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaWxsIG5vdCBldmVuIG91ciB3b3VuZHMsIHRoZW4sIGNvbnZpbmNlIENhZXNhciB0aGF0IGhlIGNvbW1hbmRzIG1vcnRhbCBtZW4sIGFuZCB0aGF0IHdlIGFyZSBtb3J0YWwgaW4gdGhlIGVuZHVyYW5jZSBvZiBwYWluIGFuZCBzdWZmZXJpbmc/IFN1cmVseSB0aGUgd2ludHJ5IHNlYXNvbiBhbmQgdGhlIG9jY2FzaW9uIG9mIGEgc3Rvcm0gYXQgc2VhIG5vdCBldmVuIGEgZ29kIGNhbiBjb25zdHJhaW47IHlldCB0aGlzIG1hbiB0YWtlcyByaXNrcyBhcyB0aG91Z2ggaGUgd2VyZSBub3QgcHVyc3VpbmcsIGJ1dCBmbHlpbmcgZnJvbSwgZW5lbWllczwvcT4gV2l0aCBzdWNoIHdvcmRzIGFzIHRoZXNlIHRoZXkgbWFyY2hlZCBpbiBhIGxlaXN1cmVseSB3YXkgdG8gQnJ1bmRpc2l1bS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldpbGwgbm90IGV2ZW4gb3VyIHdvdW5kcywgdGhlbiwgY29udmluY2UgQ2Flc2FyIHRoYXQgaGUgY29tbWFuZHMgbW9ydGFsIG1lbiwgYW5kIHRoYXQgd2UgYXJlIG1vcnRhbCBpbiB0aGUgZW5kdXJhbmNlIG9mIHBhaW4gYW5kIHN1ZmZlcmluZz8gU3VyZWx5IHRoZSB3aW50cnkgc2Vhc29uIGFuZCB0aGUgb2NjYXNpb24gb2YgYSBzdG9ybSBhdCBzZWEgbm90IGV2ZW4gYSBnb2QgY2FuIGNvbnN0cmFpbjsgeWV0IHRoaXMgbWFuIHRha2VzIHJpc2tzIGFzIHRob3VnaCBoZSB3ZXJlIG5vdCBwdXJzdWluZywgYnV0IGZseWluZyBmcm9tLCBlbmVtaWVzPC90cmFuc2xhdGlvbj4="
translation['37.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZXkgZ290IHRoZXJlIGFuZCBmb3VuZCB0aGF0IENhZXNhciBoYWQgcHV0IHRvIHNlYSwgdGhleSBxdWlja2x5IGNoYW5nZWQgdGhlaXIgdG9uZSBhbmQgcmV2aWxlZCB0aGVtc2VsdmVzIGFzIHRyYWl0b3JzIHRvIHRoZSBJbXBlcmF0b3I7IHRoZXkgcmV2aWxlZCB0aGVpciBvZmZpY2VycywgdG9vLCBmb3Igbm90IGhhdmluZyBxdWlja2VuZWQgdGhlaXIgbWFyY2guIFRoZW4sIHNpdHRpbmcgb24gdGhlIGNsaWZmcywgdGhleSBsb29rZWQgb2ZmIHRvd2FyZHMgdGhlIG9wZW4gc2VhIGFuZCBFcGlydXMsIHdhdGNoaW5nIGZvciB0aGUgc2hpcHMgd2hpY2ggd2VyZSB0byBjYXJyeSB0aGVtIGFjcm9zcyB0byB0aGVpciBjb21tYW5kZXIuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgQXBvbGxvbmlhLCBzaW5jZSB0aGUgZm9yY2Ugd2hpY2ggaGUgaGFkIHdpdGggaGltIHdhcyBub3QgYSBtYXRjaCBmb3IgdGhlIGVuZW15IGFuZCB0aGUgZGVsYXkgb2YgaGlzIHRyb29wcyBvbiB0aGUgb3RoZXIgc2lkZSBjYXVzZWQgaGltIHBlcnBsZXhpdHkgYW5kIGRpc3RyZXNzLCBDYWVzYXIgY29uY2VpdmVkIHRoZSBkYW5nZXJvdXMgcGxhbiBvZiBlbWJhcmtpbmcgaW4gYSB0d2VsdmUtb2FyZWQgYm9hdCwgd2l0aG91dCBhbnkgb25lJ3Mga25vd2xlZGdlLCBhbmQgZ29pbmcgb3ZlciB0byBCcnVuZGlzaXVtLCB0aG91Z2ggdGhlIHNlYSB3YXMgZW5jb21wYXNzZWQgYnkgc3VjaCBsYXJnZSBhcm1hbWVudHMgb2YgdGhlIGVuZW15LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCBuaWdodCwgYWNjb3JkaW5nbHksIGFmdGVyIGRpc2d1aXNpbmcgaGltc2VsZiBpbiB0aGUgZHJlc3Mgb2YgYSBzbGF2ZSwgaGUgd2VudCBvbiBib2FyZCwgdGhyZXcgaGltc2VsZiBkb3duIGFzIG9uZSBvZiBubyBhY2NvdW50LCBhbmQga2VwdCBxdWlldC4gV2hpbGUgdGhlIHJpdmVyIEFvw7xzIHdhcyBjYXJyeWluZyB0aGUgYm9hdCBkb3duIHRvd2FyZHMgdGhlIHNlYSwgdGhlIGVhcmx5IG1vcm5pbmcgYnJlZXplLCB3aGljaCBhdCB0aGF0IHRpbWUgdXN1YWxseSBtYWRlIHRoZSBtb3V0aCBvZiB0aGUgcml2ZXIgY2FsbSBieSBkcml2aW5nIGJhY2sgdGhlIHdhdmVzLCB3YXMgcXVlbGxlZCBieSBhIHN0cm9uZyB3aW5kIHdoaWNoIGJsZXcgZnJvbSB0aGUgc2VhIGR1cmluZyB0aGUgbmlnaHQ7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZSByaXZlciB0aGVyZWZvcmUgY2hhZmVkIGFnYWluc3QgdGhlIGluZmxvdyBvZiB0aGUgc2VhIGFuZCB0aGUgb3Bwb3NpdGlvbiBvZiBpdHMgYmlsbG93cywgYW5kIHdhcyByb3VnaCwgYmVpbmcgYmVhdGVuIGJhY2sgd2l0aCBhIGdyZWF0IGRpbiBhbmQgdmlvbGVudCBlZGRpZXMsIHNvIHRoYXQgaXQgd2FzIGltcG9zc2libGUgZm9yIHRoZSBtYXN0ZXIgb2YgdGhlIGJvYXQgdG8gZm9yY2UgaGlzIHdheSBhbG9uZy4gSGUgdGhlcmVmb3JlIG9yZGVyZWQgdGhlIHNhaWxvcnMgdG8gY29tZSBhYm91dCBpbiBvcmRlciB0byByZXRyYWNlIGhpcyBjb3Vyc2UuIEJ1dCBDYWVzYXIsIHBlcmNlaXZpbmcgdGhpcywgZGlzY2xvc2VkIGhpbXNlbGYsIHRvb2sgdGhlIG1hc3RlciBvZiB0aGUgYm9hdCBieSB0aGUgaGFuZCwgd2hvIHdhcyB0ZXJyaWZpZWQgYXQgc2lnaHQgb2YgaGltLCBhbmQgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Db21lLCBnb29kIG1hbiwgYmUgYm9sZCBhbmQgZmVhciBuYXVnaHQ7IHRob3UgY2Fycnllc3QgQ2Flc2FyIGFuZCBDYWVzYXIncyBmb3J0dW5lIGluIHRoeSBib2F0PC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDEuNDYuMyI+RGlvbiBDYXNzaXVzLCB4bGkuIDQ2LCAzPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzYWlsb3JzIGZvcmdvdCB0aGUgc3Rvcm0sIGFuZCBsYXlpbmcgdG8gdGhlaXIgb2FycywgdHJpZWQgd2l0aCBhbGwgYWxhY3JpdHkgdG8gZm9yY2UgdGhlaXIgd2F5IGRvd24gdGhlIHJpdmVyLiBCdXQgc2luY2UgaXQgd2FzIGltcG9zc2libGUsIGFmdGVyIHRha2luZyBtdWNoIHdhdGVyIGFuZCBydW5uaW5nIGdyZWF0IGhhemFyZCBhdCB0aGUgbW91dGggb2YgdGhlIHJpdmVyLCBDYWVzYXIgdmVyeSByZWx1Y3RhbnRseSBzdWZmZXJlZCB0aGUgY2FwdGFpbiB0byBwdXQgYWJvdXQuIFdoZW4gaGUgY2FtZSBiYWNrLCBoaXMgc29sZGllcnMgbWV0IGhpbSBpbiB0aHJvbmdzLCBmaW5kaW5nIG11Y2ggZmF1bHQgYW5kIHNvcmUgZGlzcGxlYXNlZCB3aXRoIGhpbSBiZWNhdXNlIGhlIGRpZCBub3QgYmVsaWV2ZSB0aGF0IGV2ZW4gd2l0aCB0aGVtIGFsb25lIGhlIHdhcyBhYmxlIHRvIGNvbnF1ZXIsIGJ1dCB3YXMgdHJvdWJsZWQsIGFuZCByaXNrZWQgaGlzIGxpZmUgZm9yIHRoZSBzYWtlIG9mIHRoZSBhYnNlbnQgYXMgdGhvdWdoIGRpc3RydXN0aW5nIHRob3NlIHdobyB3ZXJlIHByZXNlbnQuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgQXBvbGxvbmlhLCBzaW5jZSB0aGUgZm9yY2Ugd2hpY2ggaGUgaGFkIHdpdGggaGltIHdhcyBub3QgYSBtYXRjaCBmb3IgdGhlIGVuZW15IGFuZCB0aGUgZGVsYXkgb2YgaGlzIHRyb29wcyBvbiB0aGUgb3RoZXIgc2lkZSBjYXVzZWQgaGltIHBlcnBsZXhpdHkgYW5kIGRpc3RyZXNzLCBDYWVzYXIgY29uY2VpdmVkIHRoZSBkYW5nZXJvdXMgcGxhbiBvZiBlbWJhcmtpbmcgaW4gYSB0d2VsdmUtb2FyZWQgYm9hdCwgd2l0aG91dCBhbnkgb25lJ3Mga25vd2xlZGdlLCBhbmQgZ29pbmcgb3ZlciB0byBCcnVuZGlzaXVtLCB0aG91Z2ggdGhlIHNlYSB3YXMgZW5jb21wYXNzZWQgYnkgc3VjaCBsYXJnZSBhcm1hbWVudHMgb2YgdGhlIGVuZW15LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IG5pZ2h0LCBhY2NvcmRpbmdseSwgYWZ0ZXIgZGlzZ3Vpc2luZyBoaW1zZWxmIGluIHRoZSBkcmVzcyBvZiBhIHNsYXZlLCBoZSB3ZW50IG9uIGJvYXJkLCB0aHJldyBoaW1zZWxmIGRvd24gYXMgb25lIG9mIG5vIGFjY291bnQsIGFuZCBrZXB0IHF1aWV0LiBXaGlsZSB0aGUgcml2ZXIgQW/DvHMgd2FzIGNhcnJ5aW5nIHRoZSBib2F0IGRvd24gdG93YXJkcyB0aGUgc2VhLCB0aGUgZWFybHkgbW9ybmluZyBicmVlemUsIHdoaWNoIGF0IHRoYXQgdGltZSB1c3VhbGx5IG1hZGUgdGhlIG1vdXRoIG9mIHRoZSByaXZlciBjYWxtIGJ5IGRyaXZpbmcgYmFjayB0aGUgd2F2ZXMsIHdhcyBxdWVsbGVkIGJ5IGEgc3Ryb25nIHdpbmQgd2hpY2ggYmxldyBmcm9tIHRoZSBzZWEgZHVyaW5nIHRoZSBuaWdodDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPnRoZSByaXZlciB0aGVyZWZvcmUgY2hhZmVkIGFnYWluc3QgdGhlIGluZmxvdyBvZiB0aGUgc2VhIGFuZCB0aGUgb3Bwb3NpdGlvbiBvZiBpdHMgYmlsbG93cywgYW5kIHdhcyByb3VnaCwgYmVpbmcgYmVhdGVuIGJhY2sgd2l0aCBhIGdyZWF0IGRpbiBhbmQgdmlvbGVudCBlZGRpZXMsIHNvIHRoYXQgaXQgd2FzIGltcG9zc2libGUgZm9yIHRoZSBtYXN0ZXIgb2YgdGhlIGJvYXQgdG8gZm9yY2UgaGlzIHdheSBhbG9uZy4gSGUgdGhlcmVmb3JlIG9yZGVyZWQgdGhlIHNhaWxvcnMgdG8gY29tZSBhYm91dCBpbiBvcmRlciB0byByZXRyYWNlIGhpcyBjb3Vyc2UuIEJ1dCBDYWVzYXIsIHBlcmNlaXZpbmcgdGhpcywgZGlzY2xvc2VkIGhpbXNlbGYsIHRvb2sgdGhlIG1hc3RlciBvZiB0aGUgYm9hdCBieSB0aGUgaGFuZCwgd2hvIHdhcyB0ZXJyaWZpZWQgYXQgc2lnaHQgb2YgaGltLCBhbmQgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNvbWUsIGdvb2QgbWFuLCBiZSBib2xkIGFuZCBmZWFyIG5hdWdodDsgdGhvdSBjYXJyeWVzdCBDYWVzYXIgYW5kIENhZXNhcidzIGZvcnR1bmUgaW4gdGh5IGJvYXQ8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDEuNDYuMyI+RGlvbiBDYXNzaXVzLCB4bGkuIDQ2LCAzPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0MS40Ni4zIj5EaW9uIENhc3NpdXMsIHhsaS4gNDYsIDM8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzYWlsb3JzIGZvcmdvdCB0aGUgc3Rvcm0sIGFuZCBsYXlpbmcgdG8gdGhlaXIgb2FycywgdHJpZWQgd2l0aCBhbGwgYWxhY3JpdHkgdG8gZm9yY2UgdGhlaXIgd2F5IGRvd24gdGhlIHJpdmVyLiBCdXQgc2luY2UgaXQgd2FzIGltcG9zc2libGUsIGFmdGVyIHRha2luZyBtdWNoIHdhdGVyIGFuZCBydW5uaW5nIGdyZWF0IGhhemFyZCBhdCB0aGUgbW91dGggb2YgdGhlIHJpdmVyLCBDYWVzYXIgdmVyeSByZWx1Y3RhbnRseSBzdWZmZXJlZCB0aGUgY2FwdGFpbiB0byBwdXQgYWJvdXQuIFdoZW4gaGUgY2FtZSBiYWNrLCBoaXMgc29sZGllcnMgbWV0IGhpbSBpbiB0aHJvbmdzLCBmaW5kaW5nIG11Y2ggZmF1bHQgYW5kIHNvcmUgZGlzcGxlYXNlZCB3aXRoIGhpbSBiZWNhdXNlIGhlIGRpZCBub3QgYmVsaWV2ZSB0aGF0IGV2ZW4gd2l0aCB0aGVtIGFsb25lIGhlIHdhcyBhYmxlIHRvIGNvbnF1ZXIsIGJ1dCB3YXMgdHJvdWJsZWQsIGFuZCByaXNrZWQgaGlzIGxpZmUgZm9yIHRoZSBzYWtlIG9mIHRoZSBhYnNlbnQgYXMgdGhvdWdoIGRpc3RydXN0aW5nIHRob3NlIHdobyB3ZXJlIHByZXNlbnQuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgQW50b255IHB1dCBpbiBmcm9tIEJydW5kaXNpdW0gd2l0aCBoaXMgZm9yY2VzLCBhbmQgQ2Flc2FyIHdhcyBlbWJvbGRlbmVkIHRvIGNoYWxsZW5nZSBQb21wZXkgdG8gYmF0dGxlLiBQb21wZXkgd2FzIHdlbGwgcG9zdGVkIGFuZCBkcmV3IGFtcGxlIHN1cHBsaWVzIGJvdGggZnJvbSBsYW5kIGFuZCBzZWE7IHdoaWxlIENhZXNhciBoYWQgbm8gZ3JlYXQgYWJ1bmRhbmNlIGF0IGZpcnN0LCBhbmQgYWZ0ZXJ3YXJkcyB3YXMgYWN0dWFsbHkgaGFyZCBwcmVzc2VkIGZvciB3YW50IG9mIHByb3Zpc2lvbnMuIEJ1dCBoaXMgc29sZGllcnMgZHVnIHVwIGEgY2VydGFpbiByb290LCBtaXhlZCBpdCB3aXRoIG1pbGssIGFuZCBhdGUgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuNDgiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlPkIuIEMuPC90aXRsZT4gaWlpLiA0ODwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5PbmNlLCB0b28sIHRoZXkgbWFkZSBsb2F2ZXMgb2YgaXQsIGFuZCBydW5uaW5nIHVwIHRvIHRoZSBlbmVteSdzIG91dHBvc3RzLCB0aHJldyB0aGUgbG9hdmVzIGluc2lkZSBvciB0b3NzZWQgdGhlbSB0byBvbmUgYW5vdGhlciwgYWRkaW5nIGJ5IHdheSBvZiBjb21tZW50IHRoYXQgYXMgbG9uZyBhcyB0aGUgZWFydGggcHJvZHVjZWQgc3VjaCByb290cywgdGhleSB3b3VsZCBub3Qgc3RvcCBiZXNpZWdpbmcgUG9tcGV5LiBQb21wZXksIGhvd2V2ZXIsIHdvdWxkIG5vdCBhbGxvdyBlaXRoZXIgdGhlIGxvYXZlcyBvciB0aGVzZSB3b3JkcyB0byByZWFjaCB0aGUgbWFpbiBib2R5IG9mIGhpcyBhcm15LiBGb3IgaGlzIHNvbGRpZXJzIHdlcmUgZGVqZWN0ZWQsIGZlYXJpbmcgdGhlIGZlcm9jaXR5IGFuZCBoYXJkaW5lc3Mgb2YgdGhlaXIgZW5lbWllcywgd2hvIHdlcmUgbGlrZSB3aWxkIGJlYXN0cyBpbiB0aGVpciBleWVzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgQW50b255IHB1dCBpbiBmcm9tIEJydW5kaXNpdW0gd2l0aCBoaXMgZm9yY2VzLCBhbmQgQ2Flc2FyIHdhcyBlbWJvbGRlbmVkIHRvIGNoYWxsZW5nZSBQb21wZXkgdG8gYmF0dGxlLiBQb21wZXkgd2FzIHdlbGwgcG9zdGVkIGFuZCBkcmV3IGFtcGxlIHN1cHBsaWVzIGJvdGggZnJvbSBsYW5kIGFuZCBzZWE7IHdoaWxlIENhZXNhciBoYWQgbm8gZ3JlYXQgYWJ1bmRhbmNlIGF0IGZpcnN0LCBhbmQgYWZ0ZXJ3YXJkcyB3YXMgYWN0dWFsbHkgaGFyZCBwcmVzc2VkIGZvciB3YW50IG9mIHByb3Zpc2lvbnMuIEJ1dCBoaXMgc29sZGllcnMgZHVnIHVwIGEgY2VydGFpbiByb290LCBtaXhlZCBpdCB3aXRoIG1pbGssIGFuZCBhdGUgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjQ4IiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEMuPC90aXRsZT4gaWlpLiA0ODwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy40OCIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpaS4gNDg8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEMuPC90aXRsZT4gaWlpLiA0ODwvdHJhbnNsYXRpb24+"
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uY2UsIHRvbywgdGhleSBtYWRlIGxvYXZlcyBvZiBpdCwgYW5kIHJ1bm5pbmcgdXAgdG8gdGhlIGVuZW15J3Mgb3V0cG9zdHMsIHRocmV3IHRoZSBsb2F2ZXMgaW5zaWRlIG9yIHRvc3NlZCB0aGVtIHRvIG9uZSBhbm90aGVyLCBhZGRpbmcgYnkgd2F5IG9mIGNvbW1lbnQgdGhhdCBhcyBsb25nIGFzIHRoZSBlYXJ0aCBwcm9kdWNlZCBzdWNoIHJvb3RzLCB0aGV5IHdvdWxkIG5vdCBzdG9wIGJlc2llZ2luZyBQb21wZXkuIFBvbXBleSwgaG93ZXZlciwgd291bGQgbm90IGFsbG93IGVpdGhlciB0aGUgbG9hdmVzIG9yIHRoZXNlIHdvcmRzIHRvIHJlYWNoIHRoZSBtYWluIGJvZHkgb2YgaGlzIGFybXkuIEZvciBoaXMgc29sZGllcnMgd2VyZSBkZWplY3RlZCwgZmVhcmluZyB0aGUgZmVyb2NpdHkgYW5kIGhhcmRpbmVzcyBvZiB0aGVpciBlbmVtaWVzLCB3aG8gd2VyZSBsaWtlIHdpbGQgYmVhc3RzIGluIHRoZWlyIGV5ZXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSBjb25zdGFudCBza2lybWlzaGluZ3MgYWJvdXQgdGhlIGZvcnRpZmljYXRpb25zIG9mIFBvbXBleSwgYW5kIGluIGFsbCBvZiB0aGVtIENhZXNhciBnb3QgdGhlIGJldHRlciBleGNlcHQgb25lLCB3aGVyZSB0aGVyZSB3YXMgYSBncmVhdCByb3V0IG9mIGhpcyBtZW4gYW5kIGhlIHdhcyBpbiBkYW5nZXIgb2YgbG9zaW5nIGhpcyBjYW1wLiBGb3Igd2hlbiBQb21wZXkgYXR0YWNrZWQgbm90IG9uZSBvZiBDYWVzYXIncyBtZW4gc3Rvb2QgaGlzIGdyb3VuZCwgYnV0IHRoZSBtb2F0cyB3ZXJlIGZpbGxlZCB3aXRoIHRoZSBzbGFpbiwgYW5kIG90aGVycyB3ZXJlIGZhbGxpbmcgYXQgdGhlaXIgb3duIHJhbXBhcnRzIGFuZCB3YWxscywgd2hpdGhlciB0aGV5IGhhZCBiZWVuIGRyaXZlbiBpbiBoZWFkbG9uZyBmbGlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggQ2Flc2FyIG1ldCB0aGUgZnVnaXRpdmVzIGFuZCB0cmllZCB0byB0dXJuIHRoZW0gYmFjaywgaGUgYXZhaWxlZCBub3RoaW5nLCBuYXksIHdoZW4gaGUgdHJpZWQgdG8gbGF5IGhvbGQgb2YgdGhlIHN0YW5kYXJkcyB0aGUgYmVhcmVycyB0aHJldyB0aGVtIGF3YXksIHNvIHRoYXQgdGhlIGVuZW15IGNhcHR1cmVkIHRoaXJ0eS10d28gb2YgdGhlbS4gQ2Flc2FyIGhpbXNlbGYgdG9vLCBuYXJyb3dseSBlc2NhcGVkIGJlaW5nIGtpbGxlZC4gRm9yIGFzIGEgdGFsbCBhbmQgc3R1cmR5IG1hbiB3YXMgcnVubmluZyBhd2F5IHBhc3QgaGltLCBoZSBsYWlkIGhpcyBoYW5kIHVwb24gaGltIGFuZCBiYWRlIGhpbSBzdGF5IGFuZCBmYWNlIGFib3V0IHVwb24gdGhlIGVuZW15OyBhbmQgdGhlIGZlbGxvdywgZnVsbCBvZiBwYW5pYyBhdCB0aGUgdGhyZWF0ZW5pbmcgZGFuZ2VyLCByYWlzZWQgaGlzIHN3b3JkIHRvIHNtaXRlIENhZXNhciwgYnV0IGJlZm9yZSBoZSBjb3VsZCBkbyBzbyBDYWVzYXIncyBzaGllbGQtYmVhcmVyIGxvcHBlZCBvZmYgaGlzIGFybSBhdCB0aGUgc2hvdWxkZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIGNvbXBsZXRlbHkgaGFkIENhZXNhciBnaXZlbiB1cCBoaXMgY2F1c2UgZm9yIGxvc3QgdGhhdCwgd2hlbiBQb21wZXksIGVpdGhlciBmcm9tIGV4Y2Vzc2l2ZSBjYXV0aW9uIG9yIGJ5IHNvbWUgY2hhbmNlLCBkaWQgbm90IGZvbGxvdyB1cCBoaXMgZ3JlYXQgc3VjY2VzcywgYnV0IHdpdGhkcmV3IGFmdGVyIGhlIGhhZCBzaHV0IHVwIHRoZSBmdWdpdGl2ZXMgd2l0aGluIHRoZWlyIGVudHJlbmNobWVudHMsIENhZXNhciBzYWlkIHRvIGhpcyBmcmllbmRzIGFzIGhlIGxlZnQgdGhlbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Uby1kYXkgdmljdG9yeSBoYWQgYmVlbiB3aXRoIHRoZSBlbmVteSwgaWYgdGhleSBoYWQgaGFkIGEgdmljdG9yIGluIGNvbW1hbmQ8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY1LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4di4gNTwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIGdvaW5nIGJ5IGhpbXNlbGYgdG8gaGlzIHRlbnQgYW5kIGx5aW5nIGRvd24sIGhlIHNwZW50IHRoYXQgbW9zdCBkaXN0cmVzc2Z1bCBvZiBhbGwgbmlnaHRzIGluIHZhaW4gcmVmbGVjdGlvbnMsIGNvbnZpbmNlZCB0aGF0IGhlIGhhZCBzaG93biBiYWQgZ2VuZXJhbHNoaXAuIEZvciB3aGlsZSBhIGZlcnRpbGUgY291bnRyeSBsYXkgd2FpdGluZyBmb3IgaGltLCBhbmQgdGhlIHByb3NwZXJvdXMgY2l0aWVzIG9mIE1hY2Vkb25pYSBhbmQgVGhlc3NhbHksIGhlIGhhZCBuZWdsZWN0ZWQgdG8gY2FycnkgdGhlIHdhciB0aGl0aGVyLCBhbmQgaGFkIHBvc3RlZCBoaW1zZWxmIGhlcmUgYnkgdGhlIHNlYSwgd2hpY2ggaGlzIGVuZW1pZXMgY29udHJvbGxlZCB3aXRoIHRoZWlyIGZsZWV0cywgYmVpbmcgdGh1cyBoZWxkIGluIHNpZWdlIGJ5IGxhY2sgb2YgcHJvdmlzaW9ucyByYXRoZXIgdGhhbiBiZXNpZWdpbmcgd2l0aCBoaXMgYXJtcy4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+VGh1cyBoaXMgZGVzcG9uZGVudCB0aG91Z2h0cyBvZiB0aGUgZGlmZmljdWx0eSBhbmQgcGVycGxleGl0eSBvZiBoaXMgc2l0dWF0aW9uIGtlcHQgaGltIHRvc3NpbmcgdXBvbiBoaXMgY291Y2gsIGFuZCBpbiB0aGUgbW9ybmluZyBoZSBicm9rZSBjYW1wLCByZXNvbHZlZCB0byBsZWFkIGhpcyBhcm15IGludG8gTWFjZWRvbmlhIGFnYWluc3QgU2NpcGlvOyBmb3IgaGUgd291bGQgdGhlbiBlaXRoZXIgZHJhdyBQb21wZXkgYWZ0ZXIgaGltIHRvIGEgcGxhY2Ugd2hlcmUgaGUgd291bGQgZ2l2ZSBiYXR0bGUgd2l0aG91dCBkcmF3aW5nIGhpcyBzdXBwbGllcyBhcyBoZSBub3cgZGlkIGZyb20gdGhlIHNlYSwgb3IgU2NpcGlvIHdvdWxkIGJlIGxlZnQgYWxvbmUgYW5kIGhlIHdvdWxkIG92ZXJ3aGVsbSBoaW0uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgY29uc3RhbnQgc2tpcm1pc2hpbmdzIGFib3V0IHRoZSBmb3J0aWZpY2F0aW9ucyBvZiBQb21wZXksIGFuZCBpbiBhbGwgb2YgdGhlbSBDYWVzYXIgZ290IHRoZSBiZXR0ZXIgZXhjZXB0IG9uZSwgd2hlcmUgdGhlcmUgd2FzIGEgZ3JlYXQgcm91dCBvZiBoaXMgbWVuIGFuZCBoZSB3YXMgaW4gZGFuZ2VyIG9mIGxvc2luZyBoaXMgY2FtcC4gRm9yIHdoZW4gUG9tcGV5IGF0dGFja2VkIG5vdCBvbmUgb2YgQ2Flc2FyJ3MgbWVuIHN0b29kIGhpcyBncm91bmQsIGJ1dCB0aGUgbW9hdHMgd2VyZSBmaWxsZWQgd2l0aCB0aGUgc2xhaW4sIGFuZCBvdGhlcnMgd2VyZSBmYWxsaW5nIGF0IHRoZWlyIG93biByYW1wYXJ0cyBhbmQgd2FsbHMsIHdoaXRoZXIgdGhleSBoYWQgYmVlbiBkcml2ZW4gaW4gaGVhZGxvbmcgZmxpZ2h0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aG91Z2ggQ2Flc2FyIG1ldCB0aGUgZnVnaXRpdmVzIGFuZCB0cmllZCB0byB0dXJuIHRoZW0gYmFjaywgaGUgYXZhaWxlZCBub3RoaW5nLCBuYXksIHdoZW4gaGUgdHJpZWQgdG8gbGF5IGhvbGQgb2YgdGhlIHN0YW5kYXJkcyB0aGUgYmVhcmVycyB0aHJldyB0aGVtIGF3YXksIHNvIHRoYXQgdGhlIGVuZW15IGNhcHR1cmVkIHRoaXJ0eS10d28gb2YgdGhlbS4gQ2Flc2FyIGhpbXNlbGYgdG9vLCBuYXJyb3dseSBlc2NhcGVkIGJlaW5nIGtpbGxlZC4gRm9yIGFzIGEgdGFsbCBhbmQgc3R1cmR5IG1hbiB3YXMgcnVubmluZyBhd2F5IHBhc3QgaGltLCBoZSBsYWlkIGhpcyBoYW5kIHVwb24gaGltIGFuZCBiYWRlIGhpbSBzdGF5IGFuZCBmYWNlIGFib3V0IHVwb24gdGhlIGVuZW15OyBhbmQgdGhlIGZlbGxvdywgZnVsbCBvZiBwYW5pYyBhdCB0aGUgdGhyZWF0ZW5pbmcgZGFuZ2VyLCByYWlzZWQgaGlzIHN3b3JkIHRvIHNtaXRlIENhZXNhciwgYnV0IGJlZm9yZSBoZSBjb3VsZCBkbyBzbyBDYWVzYXIncyBzaGllbGQtYmVhcmVyIGxvcHBlZCBvZmYgaGlzIGFybSBhdCB0aGUgc2hvdWxkZXIuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlNvIGNvbXBsZXRlbHkgaGFkIENhZXNhciBnaXZlbiB1cCBoaXMgY2F1c2UgZm9yIGxvc3QgdGhhdCwgd2hlbiBQb21wZXksIGVpdGhlciBmcm9tIGV4Y2Vzc2l2ZSBjYXV0aW9uIG9yIGJ5IHNvbWUgY2hhbmNlLCBkaWQgbm90IGZvbGxvdyB1cCBoaXMgZ3JlYXQgc3VjY2VzcywgYnV0IHdpdGhkcmV3IGFmdGVyIGhlIGhhZCBzaHV0IHVwIHRoZSBmdWdpdGl2ZXMgd2l0aGluIHRoZWlyIGVudHJlbmNobWVudHMsIENhZXNhciBzYWlkIHRvIGhpcyBmcmllbmRzIGFzIGhlIGxlZnQgdGhlbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRvLWRheSB2aWN0b3J5IGhhZCBiZWVuIHdpdGggdGhlIGVuZW15LCBpZiB0aGV5IGhhZCBoYWQgYSB2aWN0b3IgaW4gY29tbWFuZDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY1LjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHh2LiA1PC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjUuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseHYuIDU8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseHYuIDU8L3RyYW5zbGF0aW9uPg=="
translation['39.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gZ29pbmcgYnkgaGltc2VsZiB0byBoaXMgdGVudCBhbmQgbHlpbmcgZG93biwgaGUgc3BlbnQgdGhhdCBtb3N0IGRpc3RyZXNzZnVsIG9mIGFsbCBuaWdodHMgaW4gdmFpbiByZWZsZWN0aW9ucywgY29udmluY2VkIHRoYXQgaGUgaGFkIHNob3duIGJhZCBnZW5lcmFsc2hpcC4gRm9yIHdoaWxlIGEgZmVydGlsZSBjb3VudHJ5IGxheSB3YWl0aW5nIGZvciBoaW0sIGFuZCB0aGUgcHJvc3Blcm91cyBjaXRpZXMgb2YgTWFjZWRvbmlhIGFuZCBUaGVzc2FseSwgaGUgaGFkIG5lZ2xlY3RlZCB0byBjYXJyeSB0aGUgd2FyIHRoaXRoZXIsIGFuZCBoYWQgcG9zdGVkIGhpbXNlbGYgaGVyZSBieSB0aGUgc2VhLCB3aGljaCBoaXMgZW5lbWllcyBjb250cm9sbGVkIHdpdGggdGhlaXIgZmxlZXRzLCBiZWluZyB0aHVzIGhlbGQgaW4gc2llZ2UgYnkgbGFjayBvZiBwcm92aXNpb25zIHJhdGhlciB0aGFuIGJlc2llZ2luZyB3aXRoIGhpcyBhcm1zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRodXMgaGlzIGRlc3BvbmRlbnQgdGhvdWdodHMgb2YgdGhlIGRpZmZpY3VsdHkgYW5kIHBlcnBsZXhpdHkgb2YgaGlzIHNpdHVhdGlvbiBrZXB0IGhpbSB0b3NzaW5nIHVwb24gaGlzIGNvdWNoLCBhbmQgaW4gdGhlIG1vcm5pbmcgaGUgYnJva2UgY2FtcCwgcmVzb2x2ZWQgdG8gbGVhZCBoaXMgYXJteSBpbnRvIE1hY2Vkb25pYSBhZ2FpbnN0IFNjaXBpbzsgZm9yIGhlIHdvdWxkIHRoZW4gZWl0aGVyIGRyYXcgUG9tcGV5IGFmdGVyIGhpbSB0byBhIHBsYWNlIHdoZXJlIGhlIHdvdWxkIGdpdmUgYmF0dGxlIHdpdGhvdXQgZHJhd2luZyBoaXMgc3VwcGxpZXMgYXMgaGUgbm93IGRpZCBmcm9tIHRoZSBzZWEsIG9yIFNjaXBpbyB3b3VsZCBiZSBsZWZ0IGFsb25lIGFuZCBoZSB3b3VsZCBvdmVyd2hlbG0gaGltLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgZW1ib2xkZW5lZCB0aGUgc29sZGllcnMgb2YgUG9tcGV5IGFuZCB0aGUgbGVhZGVycyBieSB3aG9tIGhlIHdhcyBzdXJyb3VuZGVkIHRvIGtlZXAgY2xvc2UgdG8gQ2Flc2FyLCB3aG9tIHRoZXkgdGhvdWdodCBkZWZlYXRlZCBhbmQgaW4gZmxpZ2h0LiBGb3IgUG9tcGV5IGhpbXNlbGYgd2FzIGNhdXRpb3VzIGFib3V0IGhhemFyZGluZyBhIGJhdHRsZSBmb3Igc28gZ3JlYXQgYSBzdGFrZSwgYW5kIHNpbmNlIGhlIHdhcyBtb3N0IGV4Y2VsbGVudGx5IHByb3ZpZGVkIHdpdGggZXZlcnl0aGluZyBuZWNlc3NhcnkgZm9yIGEgbG9uZyB3YXIsIGhlIHRob3VnaHQgaXQgYmVzdCB0byB3ZWFyIG91dCBhbmQgcXVlbmNoIHRoZSB2aWdvdXIgb2YgdGhlIGVuZW15LCB3aGljaCBtdXN0IGJlIHNob3J0LWxpdmVkLiBGb3IgdGhlIGJlc3QgZmlnaHRpbmcgbWVuIGluIENhZXNhcidzIGFybXkgaGFkIGV4cGVyaWVuY2UsIGl0IGlzIHRydWUsIGFuZCBhIGRhcmluZyB3aGljaCB3YXMgaXJyZXNpc3RpYmxlIGluIGNvbWJhdDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IHdoYXQgd2l0aCB0aGVpciBsb25nIG1hcmNoZXMgYW5kIGZyZXF1ZW50IGVuY2FtcG1lbnRzIGFuZCBzaWVnZS13YXJmYXJlIGFuZCBuaWdodC13YXRjaGVzLCB0aGV5IHdlcmUgYmVnaW5uaW5nIHRvIGdpdmUgb3V0IGJ5IHJlYXNvbiBvZiBhZ2UsIGFuZCB3ZXJlIHRvbyB1bndpZWxkeSBmb3IgbGFib3VyLCBoYXZpbmcgbG9zdCB0aGVpciBhcmRvdXIgZnJvbSB3ZWFrbmVzcy4gQXQgdGhhdCB0aW1lLCB0b28sIGEga2luZCBvZiBwZXN0aWxlbnRpYWwgZGlzZWFzZSwgb2NjYXNpb25lZCBieSB0aGUgc3RyYW5nZW5lc3Mgb2YgdGhlaXIgZGlldCwgd2FzIHNhaWQgdG8gYmUgcHJldmFsZW50IGluIENhZXNhcidzIGFybXkuIEFuZCB3aGF0IHdhcyBtb3N0IGltcG9ydGFudCBvZiBhbGwsIHNpbmNlIENhZXNhciB3YXMgbmVpdGhlciBzdHJvbmcgaW4gZnVuZHMgbm9yIHdlbGwgc3VwcGxpZWQgd2l0aCBwcm92aXNpb25zLCBpdCB3YXMgdGhvdWdodCB0aGF0IHdpdGhpbiBhIHNob3J0IHRpbWUgaGlzIGFybXkgd291bGQgYnJlYWsgdXAgb2YgaXRzZWxmLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['40.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBlbWJvbGRlbmVkIHRoZSBzb2xkaWVycyBvZiBQb21wZXkgYW5kIHRoZSBsZWFkZXJzIGJ5IHdob20gaGUgd2FzIHN1cnJvdW5kZWQgdG8ga2VlcCBjbG9zZSB0byBDYWVzYXIsIHdob20gdGhleSB0aG91Z2h0IGRlZmVhdGVkIGFuZCBpbiBmbGlnaHQuIEZvciBQb21wZXkgaGltc2VsZiB3YXMgY2F1dGlvdXMgYWJvdXQgaGF6YXJkaW5nIGEgYmF0dGxlIGZvciBzbyBncmVhdCBhIHN0YWtlLCBhbmQgc2luY2UgaGUgd2FzIG1vc3QgZXhjZWxsZW50bHkgcHJvdmlkZWQgd2l0aCBldmVyeXRoaW5nIG5lY2Vzc2FyeSBmb3IgYSBsb25nIHdhciwgaGUgdGhvdWdodCBpdCBiZXN0IHRvIHdlYXIgb3V0IGFuZCBxdWVuY2ggdGhlIHZpZ291ciBvZiB0aGUgZW5lbXksIHdoaWNoIG11c3QgYmUgc2hvcnQtbGl2ZWQuIEZvciB0aGUgYmVzdCBmaWdodGluZyBtZW4gaW4gQ2Flc2FyJ3MgYXJteSBoYWQgZXhwZXJpZW5jZSwgaXQgaXMgdHJ1ZSwgYW5kIGEgZGFyaW5nIHdoaWNoIHdhcyBpcnJlc2lzdGlibGUgaW4gY29tYmF0OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['40.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCB3aGF0IHdpdGggdGhlaXIgbG9uZyBtYXJjaGVzIGFuZCBmcmVxdWVudCBlbmNhbXBtZW50cyBhbmQgc2llZ2Utd2FyZmFyZSBhbmQgbmlnaHQtd2F0Y2hlcywgdGhleSB3ZXJlIGJlZ2lubmluZyB0byBnaXZlIG91dCBieSByZWFzb24gb2YgYWdlLCBhbmQgd2VyZSB0b28gdW53aWVsZHkgZm9yIGxhYm91ciwgaGF2aW5nIGxvc3QgdGhlaXIgYXJkb3VyIGZyb20gd2Vha25lc3MuIEF0IHRoYXQgdGltZSwgdG9vLCBhIGtpbmQgb2YgcGVzdGlsZW50aWFsIGRpc2Vhc2UsIG9jY2FzaW9uZWQgYnkgdGhlIHN0cmFuZ2VuZXNzIG9mIHRoZWlyIGRpZXQsIHdhcyBzYWlkIHRvIGJlIHByZXZhbGVudCBpbiBDYWVzYXIncyBhcm15LiBBbmQgd2hhdCB3YXMgbW9zdCBpbXBvcnRhbnQgb2YgYWxsLCBzaW5jZSBDYWVzYXIgd2FzIG5laXRoZXIgc3Ryb25nIGluIGZ1bmRzIG5vciB3ZWxsIHN1cHBsaWVkIHdpdGggcHJvdmlzaW9ucywgaXQgd2FzIHRob3VnaHQgdGhhdCB3aXRoaW4gYSBzaG9ydCB0aW1lIGhpcyBhcm15IHdvdWxkIGJyZWFrIHVwIG9mIGl0c2VsZi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgdGhlc2UgcmVhc29ucyBQb21wZXkgZGlkIG5vdCB3aXNoIHRvIGZpZ2h0LCBidXQgQ2F0byB3YXMgdGhlIG9ubHkgb25lIHRvIGNvbW1lbmQgaGlzIGNvdXJzZSwgYW5kIHRoaXMgZnJvbSBhIGRlc2lyZSB0byBzcGFyZSB0aGUgbGl2ZXMgb2YgaGlzIGZlbGxvdyBjaXRpemVuczsgZm9yIHdoZW4gaGUgc2F3IGV2ZW4gdGhvc2Ugb2YgdGhlIGVuZW15IHdobyBoYWQgZmFsbGVuIGluIHRoZSBiYXR0bGUsIHRvIHRoZSBudW1iZXIgb2YgYSB0aG91c2FuZCwgaGUgYnVyc3QgaW50byB0ZWFycywgbXVmZmxlZCB1cCBoaXMgaGVhZCwgYW5kIHdlbnQgYXdheS4gQWxsIHRoZSByZXN0LCBob3dldmVyLCByZXZpbGVkIFBvbXBleSBmb3IgdHJ5aW5nIHRvIGF2b2lkIGEgYmF0dGxlLCBhbmQgc291Z2h0IHRvIGdvYWQgaGltIG9uIGJ5IGNhbGxpbmcgaGltIEFnYW1lbW5vbiBhbmQgS2luZyBvZiBLaW5ncywgaW1wbHlpbmcgdGhhdCBoZSBkaWQgbm90IHdpc2ggdG8gbGF5IGFzaWRlIGhpcyBzb2xlIGF1dGhvcml0eSwgYnV0IHBsdW1lZCBoaW1zZWxmIG9uIGhhdmluZyBzbyBtYW55IGNvbW1hbmRlcnMgZGVwZW5kZW50IHVwb24gaGltIGFuZCBjb21pbmcgY29uc3RhbnRseSB0byBoaXMgdGVudC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIEZhdm9uaXVzLCBhZmZlY3RpbmcgQ2F0bydzIGJvbGRuZXNzIG9mIHNwZWVjaCwgY29tcGxhaW5lZCBsaWtlIGEgbWFkIG1hbiBiZWNhdXNlIHRoYXQgeWVhciBhbHNvIHRoZXkgd291bGQgYmUgdW5hYmxlIHRvIGVuam95IHRoZSBmaWdzIG9mIFR1c2N1bHVtIGJlY2F1c2Ugb2YgUG9tcGV5J3MgbG92ZSBvZiBjb21tYW5kLiBBZnJhbml1cywgdG9vLCB3aG8gaGFkIGxhdGVseSBjb21lIGZyb20gU3BhaW4sIHdoZXJlIGhlIGhhZCBzaG93biBiYWQgZ2VuZXJhbHNoaXAsIHdoZW4gYWNjdXNlZCBvZiBiZXRyYXlpbmcgaGlzIGFybXkgZm9yIGEgYnJpYmUsIGFza2VkIHdoeSB0aGV5IGRpZCBub3QgZmlnaHQgd2l0aCB0aGUgbWVyY2hhbnQgd2hvIGhhZCBib3VnaHQgdGhlIHByb3ZpbmNlcyBmcm9tIGhpbS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2Ny4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBseHZpaS4gMzwvYmlibD4uPC9ub3RlPiBEcml2ZW4gb24gYnkgYWxsIHRoZXNlIGltcG9ydHVuaXRpZXMsIFBvbXBleSByZWx1Y3RhbnRseSBzb3VnaHQgYSBiYXR0bGUgYW5kIHB1cnN1ZWQgQ2Flc2FyLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['41.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXNlIHJlYXNvbnMgUG9tcGV5IGRpZCBub3Qgd2lzaCB0byBmaWdodCwgYnV0IENhdG8gd2FzIHRoZSBvbmx5IG9uZSB0byBjb21tZW5kIGhpcyBjb3Vyc2UsIGFuZCB0aGlzIGZyb20gYSBkZXNpcmUgdG8gc3BhcmUgdGhlIGxpdmVzIG9mIGhpcyBmZWxsb3cgY2l0aXplbnM7IGZvciB3aGVuIGhlIHNhdyBldmVuIHRob3NlIG9mIHRoZSBlbmVteSB3aG8gaGFkIGZhbGxlbiBpbiB0aGUgYmF0dGxlLCB0byB0aGUgbnVtYmVyIG9mIGEgdGhvdXNhbmQsIGhlIGJ1cnN0IGludG8gdGVhcnMsIG11ZmZsZWQgdXAgaGlzIGhlYWQsIGFuZCB3ZW50IGF3YXkuIEFsbCB0aGUgcmVzdCwgaG93ZXZlciwgcmV2aWxlZCBQb21wZXkgZm9yIHRyeWluZyB0byBhdm9pZCBhIGJhdHRsZSwgYW5kIHNvdWdodCB0byBnb2FkIGhpbSBvbiBieSBjYWxsaW5nIGhpbSBBZ2FtZW1ub24gYW5kIEtpbmcgb2YgS2luZ3MsIGltcGx5aW5nIHRoYXQgaGUgZGlkIG5vdCB3aXNoIHRvIGxheSBhc2lkZSBoaXMgc29sZSBhdXRob3JpdHksIGJ1dCBwbHVtZWQgaGltc2VsZiBvbiBoYXZpbmcgc28gbWFueSBjb21tYW5kZXJzIGRlcGVuZGVudCB1cG9uIGhpbSBhbmQgY29taW5nIGNvbnN0YW50bHkgdG8gaGlzIHRlbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['41.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBGYXZvbml1cywgYWZmZWN0aW5nIENhdG8ncyBib2xkbmVzcyBvZiBzcGVlY2gsIGNvbXBsYWluZWQgbGlrZSBhIG1hZCBtYW4gYmVjYXVzZSB0aGF0IHllYXIgYWxzbyB0aGV5IHdvdWxkIGJlIHVuYWJsZSB0byBlbmpveSB0aGUgZmlncyBvZiBUdXNjdWx1bSBiZWNhdXNlIG9mIFBvbXBleSdzIGxvdmUgb2YgY29tbWFuZC4gQWZyYW5pdXMsIHRvbywgd2hvIGhhZCBsYXRlbHkgY29tZSBmcm9tIFNwYWluLCB3aGVyZSBoZSBoYWQgc2hvd24gYmFkIGdlbmVyYWxzaGlwLCB3aGVuIGFjY3VzZWQgb2YgYmV0cmF5aW5nIGhpcyBhcm15IGZvciBhIGJyaWJlLCBhc2tlZCB3aHkgdGhleSBkaWQgbm90IGZpZ2h0IHdpdGggdGhlIG1lcmNoYW50IHdobyBoYWQgYm91Z2h0IHRoZSBwcm92aW5jZXMgZnJvbSBoaW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY3LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHh2aWkuIDM8L2JpYmw+Ljwvbm90ZT4gRHJpdmVuIG9uIGJ5IGFsbCB0aGVzZSBpbXBvcnR1bml0aWVzLCBQb21wZXkgcmVsdWN0YW50bHkgc291Z2h0IGEgYmF0dGxlIGFuZCBwdXJzdWVkIENhZXNhci48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA2Ny4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4dmlpLiAzPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHh2aWkuIDM8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgYWNjb21wbGlzaGVkIG1vc3Qgb2YgaGlzIG1hcmNoIHdpdGggZGlmZmljdWx0eSwgc2luY2Ugbm8gb25lIHdvdWxkIHNlbGwgaGltIHByb3Zpc2lvbnMsIGFuZCBldmVyeWJvZHkgZGVzcGlzZWQgaGltIG9uIGFjY291bnQgb2YgaGlzIHJlY2VudCBkZWZlYXQ7IGJ1dCBhZnRlciBoZSBoYWQgdGFrZW4gR29tcGhpLCBhIGNpdHkgb2YgVGhlc3NhbHksIGhlIG5vdCBvbmx5IHByb3ZpZGVkIGZvb2QgZm9yIGhpcyBzb2xkaWVycywgYnV0IGFsc28gcmVsaWV2ZWQgdGhlbSBvZiB0aGVpciBkaXNlYXNlIHVuZXhwZWN0ZWRseS4gRm9yIHRoZXkgZmVsbCBpbiB3aXRoIHBsZW50eSBvZiB3aW5lLCBhbmQgYWZ0ZXIgZHJpbmtpbmcgZnJlZWx5IG9mIGl0LCBhbmQgdGhlbiByZXZlbGxpbmcgYW5kIHJpb3Rpbmcgb24gdGhlaXIgbWFyY2gsIGJ5IG1lYW5zIG9mIHRoZWlyIGRydW5rZW5uZXNzIHRoZXkgZHJvdmUgYXdheSBhbmQgZ290IHJpZCBvZiB0aGVpciB0cm91YmxlLCBzaW5jZSB0aGV5IGJyb3VnaHQgdGhlaXIgYm9kaWVzIGludG8gYSBkaWZmZXJlbnQgaGFiaXQuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['41.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBhY2NvbXBsaXNoZWQgbW9zdCBvZiBoaXMgbWFyY2ggd2l0aCBkaWZmaWN1bHR5LCBzaW5jZSBubyBvbmUgd291bGQgc2VsbCBoaW0gcHJvdmlzaW9ucywgYW5kIGV2ZXJ5Ym9keSBkZXNwaXNlZCBoaW0gb24gYWNjb3VudCBvZiBoaXMgcmVjZW50IGRlZmVhdDsgYnV0IGFmdGVyIGhlIGhhZCB0YWtlbiBHb21waGksIGEgY2l0eSBvZiBUaGVzc2FseSwgaGUgbm90IG9ubHkgcHJvdmlkZWQgZm9vZCBmb3IgaGlzIHNvbGRpZXJzLCBidXQgYWxzbyByZWxpZXZlZCB0aGVtIG9mIHRoZWlyIGRpc2Vhc2UgdW5leHBlY3RlZGx5LiBGb3IgdGhleSBmZWxsIGluIHdpdGggcGxlbnR5IG9mIHdpbmUsIGFuZCBhZnRlciBkcmlua2luZyBmcmVlbHkgb2YgaXQsIGFuZCB0aGVuIHJldmVsbGluZyBhbmQgcmlvdGluZyBvbiB0aGVpciBtYXJjaCwgYnkgbWVhbnMgb2YgdGhlaXIgZHJ1bmtlbm5lc3MgdGhleSBkcm92ZSBhd2F5IGFuZCBnb3QgcmlkIG9mIHRoZWlyIHRyb3VibGUsIHNpbmNlIHRoZXkgYnJvdWdodCB0aGVpciBib2RpZXMgaW50byBhIGRpZmZlcmVudCBoYWJpdC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBib3RoIGFybWllcyBlbnRlcmVkIHRoZSBwbGFpbiBvZiBQaGFyc2FsdXMgYW5kIGVuY2FtcGVkIHRoZXJlLCBQb21wZXkncyBtaW5kIHJldmVydGVkIGFnYWluIHRvIGl0cyBmb3JtZXIgcmVhc29uaW5nLCBhbmQgYmVzaWRlcywgdGhlcmUgYmVmZWxsIGhpbSB1bmx1Y2t5IGFwcGVhcmFuY2VzIGFuZCBhIHZpc2lvbiBpbiBoaXMgc2xlZXAuIEhlIGRyZWFtZWQsIG5hbWVseSwgdGhhdCBoZSBzYXcgaGltc2VsZiBpbiBoaXMgdGhlYXRyZSBhcHBsYXVkZWQgYnkgdGhlIFJvbWFucywgLiAuIC4gVGhvc2UgYWJvdXQgaGltLCBob3dldmVyLCB3ZXJlIHNvIGNvbmZpZGVudCwgYW5kIHNvIGhvcGVmdWxseSBhbnRpY2lwYXRlZCB0aGUgdmljdG9yeSwgdGhhdCBEb21pdGl1cyBhbmQgU3BpbnRoZXIgYW5kIFNjaXBpbyBkaXNwdXRlZCBlYXJuZXN0bHkgd2l0aCBvbmUgYW5vdGhlciBvdmVyIENhZXNhcidzIG9mZmljZSBvZiA8Zm9yZWlnbiBsYW5nPSJsYSI+UG9udGlmZXggTWF4aW11czwvZm9yZWlnbj4sIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYW55IHNlbnQgYWdlbnRzIHRvIFJvbWUgdG8gaGlyZSBhbmQgdGFrZSBwb3NzZXNzaW9uIG9mIGhvdXNlcyBzdWl0YWJsZSBmb3IgcHJhZXRvcnMgYW5kIGNvbnN1bHMsIGFzc3VtaW5nIHRoYXQgdGhleSB3b3VsZCBpbW1lZGlhdGVseSBob2xkIHRoZXNlIG9mZmljZXMgYWZ0ZXIgdGhlIHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy44MiIgdmFsaWQ9InllcyI+Q2Flc2FyLCA8dGl0bGU+Qi4gQy48L3RpdGxlPiBpaWkuIDgyPC9iaWJsPiBmLjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY3LjUiIHZhbGlkPSJ5ZXMiPlBsdXRhcmNoLCA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4dmlpLiA1PC9iaWJsPi48L25vdGU+IEFuZCBtb3N0IG9mIGFsbCB3ZXJlIGhpcyBjYXZhbHJ5IGltcGF0aWVudCBmb3IgdGhlIGJhdHRsZSwgc2luY2UgdGhleSBoYWQgYSBzcGxlbmRpZCBhcnJheSBvZiBzaGluaW5nIGFybW91ciwgd2VsbC1mZWQgaG9yc2VzLCBhbmQgaGFuZHNvbWUgcGVyc29ucywgYW5kIHdlcmUgaW4gaGlnaCBzcGlyaXRzIHRvbyBvbiBhY2NvdW50IG9mIHRoZWlyIG51bWJlcnMsIHdoaWNoIHdlcmUgc2V2ZW4gdGhvdXNhbmQgdG8gQ2Flc2FyJ3Mgb25lIHRob3VzYW5kLiBUaGUgbnVtYmVycyBvZiB0aGUgaW5mYW50cnkgYWxzbyB3ZXJlIHVuZXF1YWwsIHNpbmNlIGZvcnR5LWZpdmUgdGhvdXNhbmQgd2VyZSBhcnJheWVkIGFnYWluc3QgdHdlbnR5LXR3byB0aG91c2FuZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['42.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gYm90aCBhcm1pZXMgZW50ZXJlZCB0aGUgcGxhaW4gb2YgUGhhcnNhbHVzIGFuZCBlbmNhbXBlZCB0aGVyZSwgUG9tcGV5J3MgbWluZCByZXZlcnRlZCBhZ2FpbiB0byBpdHMgZm9ybWVyIHJlYXNvbmluZywgYW5kIGJlc2lkZXMsIHRoZXJlIGJlZmVsbCBoaW0gdW5sdWNreSBhcHBlYXJhbmNlcyBhbmQgYSB2aXNpb24gaW4gaGlzIHNsZWVwLiBIZSBkcmVhbWVkLCBuYW1lbHksIHRoYXQgaGUgc2F3IGhpbXNlbGYgaW4gaGlzIHRoZWF0cmUgYXBwbGF1ZGVkIGJ5IHRoZSBSb21hbnMsIC4gLiAuIFRob3NlIGFib3V0IGhpbSwgaG93ZXZlciwgd2VyZSBzbyBjb25maWRlbnQsIGFuZCBzbyBob3BlZnVsbHkgYW50aWNpcGF0ZWQgdGhlIHZpY3RvcnksIHRoYXQgRG9taXRpdXMgYW5kIFNwaW50aGVyIGFuZCBTY2lwaW8gZGlzcHV0ZWQgZWFybmVzdGx5IHdpdGggb25lIGFub3RoZXIgb3ZlciBDYWVzYXIncyBvZmZpY2Ugb2YgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+UG9udGlmZXggTWF4aW11czwvZm9yZWlnbj4sIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['42.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBtYW55IHNlbnQgYWdlbnRzIHRvIFJvbWUgdG8gaGlyZSBhbmQgdGFrZSBwb3NzZXNzaW9uIG9mIGhvdXNlcyBzdWl0YWJsZSBmb3IgcHJhZXRvcnMgYW5kIGNvbnN1bHMsIGFzc3VtaW5nIHRoYXQgdGhleSB3b3VsZCBpbW1lZGlhdGVseSBob2xkIHRoZXNlIG9mZmljZXMgYWZ0ZXIgdGhlIHdhci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuODIiIHZhbGlkPSJ5ZXMiPkNhZXNhciwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gQy48L3RpdGxlPiBpaWkuIDgyPC9iaWJsPiBmLjsgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjcuNSIgdmFsaWQ9InllcyI+UGx1dGFyY2gsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseHZpaS4gNTwvYmlibD4uPC9ub3RlPiBBbmQgbW9zdCBvZiBhbGwgd2VyZSBoaXMgY2F2YWxyeSBpbXBhdGllbnQgZm9yIHRoZSBiYXR0bGUsIHNpbmNlIHRoZXkgaGFkIGEgc3BsZW5kaWQgYXJyYXkgb2Ygc2hpbmluZyBhcm1vdXIsIHdlbGwtZmVkIGhvcnNlcywgYW5kIGhhbmRzb21lIHBlcnNvbnMsIGFuZCB3ZXJlIGluIGhpZ2ggc3Bpcml0cyB0b28gb24gYWNjb3VudCBvZiB0aGVpciBudW1iZXJzLCB3aGljaCB3ZXJlIHNldmVuIHRob3VzYW5kIHRvIENhZXNhcidzIG9uZSB0aG91c2FuZC4gVGhlIG51bWJlcnMgb2YgdGhlIGluZmFudHJ5IGFsc28gd2VyZSB1bmVxdWFsLCBzaW5jZSBmb3J0eS1maXZlIHRob3VzYW5kIHdlcmUgYXJyYXllZCBhZ2FpbnN0IHR3ZW50eS10d28gdGhvdXNhbmQuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjgyIiB2YWxpZD0ieWVzIj5DYWVzYXIsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEMuPC90aXRsZT4gaWlpLiA4MjwvYmlibD4gZi47IDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEMuPC90aXRsZT4gaWlpLiA4MjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY3LjUiIHZhbGlkPSJ5ZXMiPlBsdXRhcmNoLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHh2aWkuIDU8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseHZpaS4gNTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBjYWxsZWQgaGlzIHNvbGRpZXJzIHRvZ2V0aGVyLCBhbmQgYWZ0ZXIgdGVsbGluZyB0aGVtIHRoYXQgQ29yZmluaXVzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gZXJyb3IgZm9yIENvcm5pZmljaXVzLjwvbm90ZT4gd2FzIG5lYXIgd2l0aCB0d28gbGVnaW9ucyBmb3IgaGltLCBhbmQgdGhhdCBmaWZ0ZWVuIGNvaG9ydHMgYmVzaWRlcyB1bmRlciBDYWxlbnVzIHdlcmUgc3RhdGlvbmVkIGF0IEF0aGVucyBhbmQgTWVnYXJhLCBhc2tlZCB0aGVtIHdoZXRoZXIgdGhleSB3aXNoZWQgdG8gd2FpdCBmb3IgdGhlc2UgdHJvb3BzLCBvciB0byBoYXphcmQgdGhlIGlzc3VlIGJ5IHRoZW1zZWx2ZXMuIFRoZW4gdGhlIHNvbGRpZXJzIGJlc291Z2h0IGhpbSB3aXRoIGxvdWQgY3JpZXMgbm90IHRvIHdhaXQgZm9yIHRoZSB0cm9vcHMsIGJ1dCByYXRoZXIgdG8gY29udHJpdmUgYW5kIG1hbm9ldXZyZSB0byBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzIHdpdGggdGhlIGVuZW15IGFzIHNvb24gYXMgcG9zc2libGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBob2xkaW5nIGEgbHVzdHJhdGlvbiBhbmQgcmV2aWV3IG9mIGhpcyBmb3JjZXMgYW5kIGhhZCBzYWNyaWZpY2VkIHRoZSBmaXJzdCB2aWN0aW0sIHRoZSBzZWVyIGF0IG9uY2UgdG9sZCBoaW0gdGhhdCB3aXRoaW4gdGhyZWUgZGF5cyB0aGVyZSB3b3VsZCBiZSBhIGRlY2lzaXZlIGJhdHRsZSB3aXRoIHRoZSBlbmVteS4gQW5kIHdoZW4gQ2Flc2FyIGFza2VkIGhpbSB3aGV0aGVyIGhlIGFsc28gc2F3IGluIHRoZSB2aWN0aW1zIGFueSBmYXZvdXJhYmxlIHNpZ25zIG9mIHRoZSBpc3N1ZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IHRoeXNlbGYsPC9xPiBzYWlkIHRoZSBzZWVyLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNhbnN0IGJldHRlciBhbnN3ZXIgdGhpcyBxdWVzdGlvbiBmb3IgdGh5c2VsZi4gRm9yIHRoZSBnb2RzIGluZGljYXRlIGEgZ3JlYXQgY2hhbmdlIGFuZCByZXZvbHV0aW9uIG9mIHRoZSBwcmVzZW50IHN0YXR1cyB0byB0aGUgb3Bwb3NpdGUuIFRoZXJlZm9yZSwgaWYgdGhvdSB0aGlua2VzdCB0aHlzZWxmIHdlbGwgb2ZmIGFzIG1hdHRlcnMgc3RhbmQsIGV4cGVjdCB0aGUgd29yc2UgZm9ydHVuZTsgaWYgYmFkbHkgb2ZmLCB0aGUgYmV0dGVyLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciBvbiB0aGUgbmlnaHQgYmVmb3JlIHRoZSBiYXR0bGUsIGFzIENhZXNhciB3YXMgbWFraW5nIHRoZSByb3VuZCBvZiBoaXMgc2VudHJpZXMgYWJvdXQgbWlkbmlnaHQsIGEgZmllcnkgdG9yY2ggd2FzIHNlZW4gaW4gdGhlIGhlYXZlbnMgd2hpY2ggc2VlbWVkIHRvIGJlIGNhcnJpZWQgb3ZlciBoaXMgY2FtcCwgYmxhemluZyBvdXQgYnJpZ2h0bHksIGFuZCB0aGVuIHRvIGZhbGwgaW50byBQb21wZXkncy4gQW5kIGR1cmluZyB0aGUgbW9ybmluZyB3YXRjaCBpdCB3YXMgbm90aWNlZCB0aGF0IHRoZXJlIHdhcyBhY3R1YWxseSBhIHBhbmljIGNvbmZ1c2lvbiBhbW9uZyB0aGUgZW5lbXkuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjguMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHh2aWlpLiAzPC9iaWJsPi48L25vdGU+IEhvd2V2ZXIsIENhZXNhciBkaWQgbm90IGV4cGVjdCB0byBmaWdodCBvbiB0aGF0IGRheSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdWd1c3QgOSwgNDggQi5DLjwvbm90ZT4gYnV0IGJlZ2FuIHRvIGJyZWFrIGNhbXAgZm9yIGEgbWFyY2ggdG8gU2NvdHVzc2EuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIGNhbGxlZCBoaXMgc29sZGllcnMgdG9nZXRoZXIsIGFuZCBhZnRlciB0ZWxsaW5nIHRoZW0gdGhhdCBDb3JmaW5pdXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGVycm9yIGZvciBDb3JuaWZpY2l1cy48L25vdGU+IHdhcyBuZWFyIHdpdGggdHdvIGxlZ2lvbnMgZm9yIGhpbSwgYW5kIHRoYXQgZmlmdGVlbiBjb2hvcnRzIGJlc2lkZXMgdW5kZXIgQ2FsZW51cyB3ZXJlIHN0YXRpb25lZCBhdCBBdGhlbnMgYW5kIE1lZ2FyYSwgYXNrZWQgdGhlbSB3aGV0aGVyIHRoZXkgd2lzaGVkIHRvIHdhaXQgZm9yIHRoZXNlIHRyb29wcywgb3IgdG8gaGF6YXJkIHRoZSBpc3N1ZSBieSB0aGVtc2VsdmVzLiBUaGVuIHRoZSBzb2xkaWVycyBiZXNvdWdodCBoaW0gd2l0aCBsb3VkIGNyaWVzIG5vdCB0byB3YWl0IGZvciB0aGUgdHJvb3BzLCBidXQgcmF0aGVyIHRvIGNvbnRyaXZlIGFuZCBtYW5vZXV2cmUgdG8gY29tZSB0byBjbG9zZSBxdWFydGVycyB3aXRoIHRoZSBlbmVteSBhcyBzb29uIGFzIHBvc3NpYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['43.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBob2xkaW5nIGEgbHVzdHJhdGlvbiBhbmQgcmV2aWV3IG9mIGhpcyBmb3JjZXMgYW5kIGhhZCBzYWNyaWZpY2VkIHRoZSBmaXJzdCB2aWN0aW0sIHRoZSBzZWVyIGF0IG9uY2UgdG9sZCBoaW0gdGhhdCB3aXRoaW4gdGhyZWUgZGF5cyB0aGVyZSB3b3VsZCBiZSBhIGRlY2lzaXZlIGJhdHRsZSB3aXRoIHRoZSBlbmVteS4gQW5kIHdoZW4gQ2Flc2FyIGFza2VkIGhpbSB3aGV0aGVyIGhlIGFsc28gc2F3IGluIHRoZSB2aWN0aW1zIGFueSBmYXZvdXJhYmxlIHNpZ25zIG9mIHRoZSBpc3N1ZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRob3UgdGh5c2VsZiw8L3E+IHNhaWQgdGhlIHNlZXIsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jYW5zdCBiZXR0ZXIgYW5zd2VyIHRoaXMgcXVlc3Rpb24gZm9yIHRoeXNlbGYuIEZvciB0aGUgZ29kcyBpbmRpY2F0ZSBhIGdyZWF0IGNoYW5nZSBhbmQgcmV2b2x1dGlvbiBvZiB0aGUgcHJlc2VudCBzdGF0dXMgdG8gdGhlIG9wcG9zaXRlLiBUaGVyZWZvcmUsIGlmIHRob3UgdGhpbmtlc3QgdGh5c2VsZiB3ZWxsIG9mZiBhcyBtYXR0ZXJzIHN0YW5kLCBleHBlY3QgdGhlIHdvcnNlIGZvcnR1bmU7IGlmIGJhZGx5IG9mZiwgdGhlIGJldHRlci48L3E+IAoJCQkJICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['43.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyIG9uIHRoZSBuaWdodCBiZWZvcmUgdGhlIGJhdHRsZSwgYXMgQ2Flc2FyIHdhcyBtYWtpbmcgdGhlIHJvdW5kIG9mIGhpcyBzZW50cmllcyBhYm91dCBtaWRuaWdodCwgYSBmaWVyeSB0b3JjaCB3YXMgc2VlbiBpbiB0aGUgaGVhdmVucyB3aGljaCBzZWVtZWQgdG8gYmUgY2FycmllZCBvdmVyIGhpcyBjYW1wLCBibGF6aW5nIG91dCBicmlnaHRseSwgYW5kIHRoZW4gdG8gZmFsbCBpbnRvIFBvbXBleSdzLiBBbmQgZHVyaW5nIHRoZSBtb3JuaW5nIHdhdGNoIGl0IHdhcyBub3RpY2VkIHRoYXQgdGhlcmUgd2FzIGFjdHVhbGx5IGEgcGFuaWMgY29uZnVzaW9uIGFtb25nIHRoZSBlbmVteS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjguMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseHZpaWkuIDM8L2JpYmw+Ljwvbm90ZT4gSG93ZXZlciwgQ2Flc2FyIGRpZCBub3QgZXhwZWN0IHRvIGZpZ2h0IG9uIHRoYXQgZGF5LDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY4LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHh2aWlpLiAzPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHh2aWlpLiAzPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BdWd1c3QgOSwgNDggQi5DLjwvbm90ZT4gYnV0IGJlZ2FuIHRvIGJyZWFrIGNhbXAgZm9yIGEgbWFyY2ggdG8gU2NvdHVzc2EuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQ0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGp1c3QgYXMgdGhlIHRlbnRzIGhhZCBiZWVuIHN0cnVjaywgaGlzIHNjb3V0cyByb2RlIHVwIHRvIGhpbSB3aXRoIHRpZGluZ3MgdGhhdCB0aGUgZW5lbXkgd2VyZSBjb21pbmcgZG93biBpbnRvIHRoZSBwbGFpbiBmb3IgYmF0dGxlLiBBdCB0aGlzIGhlIHdhcyBvdmVyam95ZWQsIGFuZCBhZnRlciBwcmF5ZXJzIGFuZCB2b3dzIHRvIHRoZSBnb2RzLCBkcmV3IHVwIGhpcyBsZWdpb25hcmllcyBpbiB0aHJlZSBkaXZpc2lvbnMuIE92ZXIgdGhlIGNlbnRyZSBoZSBwdXQgRG9taXRpdXMgQ2FsdmludXMsIHdoaWxlIG9mIHRoZSB3aW5ncyBBbnRvbnkgaGFkIG9uZSBhbmQgaGUgaGltc2VsZiB0aGUgcmlnaHQsIHdoZXJlIGhlIGludGVuZGVkIHRvIGZpZ2h0IHdpdGggdGhlIHRlbnRoIGxlZ2lvbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHNlZWluZyB0aGF0IHRoZSBlbmVteSdzIGNhdmFscnkgd2VyZSBhcnJheWluZyB0aGVtc2VsdmVzIG92ZXIgYWdhaW5zdCB0aGlzIHBvaW50LCBhbmQgZmVhcmluZyB0aGVpciBicmlsbGlhbnQgYXBwZWFyYW5jZSBhbmQgdGhlaXIgbnVtYmVycywgaGUgb3JkZXJlZCBzaXggY29ob3J0cyBmcm9tIHRoZSBmdXJ0aGVybW9zdCBsaW5lcyB0byBjb21lIHJvdW5kIHRvIGhpbSB1bm9ic2VydmVkLCBhbmQgc3RhdGlvbmVkIHRoZW0gYmVoaW5kIGhpcyByaWdodCB3aW5nLCB0ZWFjaGluZyB0aGVtIHdoYXQgdGhleSB3ZXJlIHRvIGRvIHdoZW4gdGhlIGVuZW15J3MgaG9yc2VtZW4gYXR0YWNrZWQuIFBvbXBleSBoYWQgb25lIG9mIGhpcyB3aW5ncyBoaW1zZWxmIGFuZCBEb21pdGl1cyB0aGUgbGVmdCwgd2hpbGUgU2NpcGlvLCBQb21wZXkncyBmYXRoZXItaW4tbGF3LCBjb21tYW5kZWQgdGhlIGNlbnRyZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhpcyBob3JzZW1lbiBhbGwgY3Jvd2RlZCB0byB0aGUgbGVmdCB3aW5nLCBpbnRlbmRpbmcgdG8gZW5jaXJjbGUgdGhlIGVuZW15J3MgcmlnaHQgYW5kIG1ha2UgYSBjb21wbGV0ZSByb3V0IGFib3V0IHRoZSBjb21tYW5kZXIgaGltc2VsZjsgZm9yIHRoZXkgdGhvdWdodCB0aGF0IG5vIGxlZ2lvbmFyeSBhcnJheSwgaG93ZXZlciBkZWVwLCBjb3VsZCByZXNpc3QgdGhlbSwgYnV0IHRoYXQgd2hlbiBzbyBtYW55IGhvcnNlbWVuIG1hZGUgYW4gb25zZXQgdG9nZXRoZXIgdGhlIGVuZW15IHdvdWxkIGJlIHV0dGVybHkgYnJva2VuIGFuZCBjcnVzaGVkLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDY5LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+UG9tcGV5PC90aXRsZT4sIGx4aXguIDEtMzwvYmlibD4uPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['44.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGp1c3QgYXMgdGhlIHRlbnRzIGhhZCBiZWVuIHN0cnVjaywgaGlzIHNjb3V0cyByb2RlIHVwIHRvIGhpbSB3aXRoIHRpZGluZ3MgdGhhdCB0aGUgZW5lbXkgd2VyZSBjb21pbmcgZG93biBpbnRvIHRoZSBwbGFpbiBmb3IgYmF0dGxlLiBBdCB0aGlzIGhlIHdhcyBvdmVyam95ZWQsIGFuZCBhZnRlciBwcmF5ZXJzIGFuZCB2b3dzIHRvIHRoZSBnb2RzLCBkcmV3IHVwIGhpcyBsZWdpb25hcmllcyBpbiB0aHJlZSBkaXZpc2lvbnMuIE92ZXIgdGhlIGNlbnRyZSBoZSBwdXQgRG9taXRpdXMgQ2FsdmludXMsIHdoaWxlIG9mIHRoZSB3aW5ncyBBbnRvbnkgaGFkIG9uZSBhbmQgaGUgaGltc2VsZiB0aGUgcmlnaHQsIHdoZXJlIGhlIGludGVuZGVkIHRvIGZpZ2h0IHdpdGggdGhlIHRlbnRoIGxlZ2lvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['44.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBzZWVpbmcgdGhhdCB0aGUgZW5lbXkncyBjYXZhbHJ5IHdlcmUgYXJyYXlpbmcgdGhlbXNlbHZlcyBvdmVyIGFnYWluc3QgdGhpcyBwb2ludCwgYW5kIGZlYXJpbmcgdGhlaXIgYnJpbGxpYW50IGFwcGVhcmFuY2UgYW5kIHRoZWlyIG51bWJlcnMsIGhlIG9yZGVyZWQgc2l4IGNvaG9ydHMgZnJvbSB0aGUgZnVydGhlcm1vc3QgbGluZXMgdG8gY29tZSByb3VuZCB0byBoaW0gdW5vYnNlcnZlZCwgYW5kIHN0YXRpb25lZCB0aGVtIGJlaGluZCBoaXMgcmlnaHQgd2luZywgdGVhY2hpbmcgdGhlbSB3aGF0IHRoZXkgd2VyZSB0byBkbyB3aGVuIHRoZSBlbmVteSdzIGhvcnNlbWVuIGF0dGFja2VkLiBQb21wZXkgaGFkIG9uZSBvZiBoaXMgd2luZ3MgaGltc2VsZiBhbmQgRG9taXRpdXMgdGhlIGxlZnQsIHdoaWxlIFNjaXBpbywgUG9tcGV5J3MgZmF0aGVyLWluLWxhdywgY29tbWFuZGVkIHRoZSBjZW50cmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['44.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgaG9yc2VtZW4gYWxsIGNyb3dkZWQgdG8gdGhlIGxlZnQgd2luZywgaW50ZW5kaW5nIHRvIGVuY2lyY2xlIHRoZSBlbmVteSdzIHJpZ2h0IGFuZCBtYWtlIGEgY29tcGxldGUgcm91dCBhYm91dCB0aGUgY29tbWFuZGVyIGhpbXNlbGY7IGZvciB0aGV5IHRob3VnaHQgdGhhdCBubyBsZWdpb25hcnkgYXJyYXksIGhvd2V2ZXIgZGVlcCwgY291bGQgcmVzaXN0IHRoZW0sIGJ1dCB0aGF0IHdoZW4gc28gbWFueSBob3JzZW1lbiBtYWRlIGFuIG9uc2V0IHRvZ2V0aGVyIHRoZSBlbmVteSB3b3VsZCBiZSB1dHRlcmx5IGJyb2tlbiBhbmQgY3J1c2hlZC48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseGl4LiAxLTM8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNjkuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseGl4LiAxLTM8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlBvbXBleTwvdGl0bGU+LCBseGl4LiAxLTM8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuIGJvdGggc2lkZXMgd2VyZSBhYm91dCB0byBzb3VuZCB0aGUgY2hhcmdlLCBQb21wZXkgb3JkZXJlZCBoaXMgbGVnaW9uYXJpZXMgdG8gc3RhbmQgd2l0aCBhcm1zIGF0IHRoZSByZWFkeSBhbmQgYXdhaXQgaW4gY2xvc2UgYXJyYXkgdGhlIG9uc2V0IG9mIHRoZSBlbmVteSB1bnRpbCB0aGV5IHdlcmUgd2l0aGluIGphdmVsaW4gY2FzdC4gQnV0IENhZXNhciBzYXlzPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CgkJCQkJICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Qi4gQy48L3RpdGxlPiBpaWkuIDkyLjwvYmlibD4KCQkJCSAgICAgICAgPC9ub3RlPiB0aGF0IGhlcmUgdG9vIFBvbXBleSBtYWRlIGEgbWlzdGFrZSwgbm90IGtub3dpbmcgdGhhdCB0aGUgaW5pdGlhbCBjbGFzaCB3aXRoIGFsbCB0aGUgaW1wZXR1cyBvZiBydW5uaW5nIGFkZHMgZm9yY2UgdG8gdGhlIGJsb3dzIGFuZCBmaXJlcyB0aGUgY291cmFnZSwgd2hpY2ggZXZlcnl0aGluZyB0aGVuIGNvbnNwaXJlcyB0byBmYW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIENhZXNhciBoaW1zZWxmIHdhcyBhYm91dCB0byBtb3ZlIGhpcyBsaW5lcyBvZiBsZWdpb25hcmllcywgYW5kIHdhcyBhbHJlYWR5IGdvaW5nIGZvcndhcmQgaW50byBhY3Rpb24sIGhlIHNhdyBmaXJzdCBvbmUgb2YgaGlzIGNlbnR1cmlvbnMsIGEgbWFuIGV4cGVyaWVuY2VkIGluIHdhciBhbmQgZmFpdGhmdWwgdG8gaGltLCBlbmNvdXJhZ2luZyBoaXMgbWVuIGFuZCBjaGFsbGVuZ2luZyB0aGVtIHRvIHZpZSB3aXRoIGhpbSBpbiBwcm93ZXNzLiBIaW0gQ2Flc2FyIGFkZHJlc3NlZCBieSBuYW1lIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhaXVzIENyYXNzaW5pdXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQ2Flc2FyJ3MgdmVyc2lvbiBvZiB0aGlzIGVwaXNvZGUgCgkJCQkJKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICA8dGl0bGU+Qi5DLjwvdGl0bGU+IGlpaS4gOTE8L2JpYmw+IGFuZCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjk5IiB2YWxpZD0ieWVzIj45OTwvYmlibD4pLCAKCQkJCQl0aGUgbmFtZSBpcyBDcmFzdGludXMuPC9ub3RlPiB3aGF0IGFyZSBvdXIgaG9wZXMsIGFuZCBob3cgZG9lcyBvdXIgY29uZmlkZW5jZSBzdGFuZD88L3E+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIENyYXNzaW5pdXMsIHN0cmV0Y2hpbmcgZm9ydGggaGlzIHJpZ2h0IGhhbmQsIHNhaWQgd2l0aCBhIGxvdWQgdm9pY2U6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2Ugc2hhbGwgd2luIGEgZ2xvcmlvdXMgdmljdG9yeSwgTyBDYWVzYXIsIGFuZCB0aG91IHNoYWx0IHByYWlzZSBtZSB0by1kYXksIHdoZXRoZXIgSSBhbSBhbGl2ZSBvciBkZWFkPC9xPiBTbyBzYXlpbmcsIGhlIHBsdW5nZWQgZm9yZW1vc3QgaW50byB0aGUgZW5lbXkgYXQgZnVsbCBzcGVlZCwgY2FycnlpbmcgYWxvbmcgd2l0aCBoaW0gdGhlIG9uZSBodW5kcmVkIGFuZCB0d2VudHkgc29sZGllcnMgdW5kZXIgaGlzIGNvbW1hbmQuIEJ1dCBhZnRlciBjdXR0aW5nIGhpcyB3YXkgdGhyb3VnaCB0aGUgZmlyc3QgcmFuaywgYW5kIHdoaWxlIGhlIHdhcyBmb3JnaW5nIG9ud2FyZHMgd2l0aCBncmVhdCBzbGF1Z2h0ZXIsIGhlIHdhcyBiZWF0ZW4gYmFjayBieSB0aGUgdGhydXN0IG9mIGEgc3dvcmQgdGhyb3VnaCBoaXMgbW91dGgsIGFuZCB0aGUgcG9pbnQgb2YgdGhlIHN3b3JkIGFjdHVhbGx5IGNhbWUgb3V0IGF0IHRoZSBiYWNrIG9mIGhpcyBuZWNrLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNzEuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5Qb21wZXk8L3RpdGxlPiwgbHh4aS4gMS0zPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['44.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gYm90aCBzaWRlcyB3ZXJlIGFib3V0IHRvIHNvdW5kIHRoZSBjaGFyZ2UsIFBvbXBleSBvcmRlcmVkIGhpcyBsZWdpb25hcmllcyB0byBzdGFuZCB3aXRoIGFybXMgYXQgdGhlIHJlYWR5IGFuZCBhd2FpdCBpbiBjbG9zZSBhcnJheSB0aGUgb25zZXQgb2YgdGhlIGVuZW15IHVudGlsIHRoZXkgd2VyZSB3aXRoaW4gamF2ZWxpbiBjYXN0LiBCdXQgQ2Flc2FyIHNheXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgoJCQkJCSAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpaS4gOTIuPC9iaWJsPgoJCQkJICAgICAgICA8L25vdGU+IHRoYXQgaGVyZSB0b28gUG9tcGV5IG1hZGUgYSBtaXN0YWtlLCBub3Qga25vd2luZyB0aGF0IHRoZSBpbml0aWFsIGNsYXNoIHdpdGggYWxsIHRoZSBpbXBldHVzIG9mIHJ1bm5pbmcgYWRkcyBmb3JjZSB0byB0aGUgYmxvd3MgYW5kIGZpcmVzIHRoZSBjb3VyYWdlLCB3aGljaCBldmVyeXRoaW5nIHRoZW4gY29uc3BpcmVzIHRvIGZhbi4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpaS4gOTIuPC9iaWJsPgoJCQkJICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpaS4gOTIuPC90cmFuc2xhdGlvbj4="
translation['44.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFzIENhZXNhciBoaW1zZWxmIHdhcyBhYm91dCB0byBtb3ZlIGhpcyBsaW5lcyBvZiBsZWdpb25hcmllcywgYW5kIHdhcyBhbHJlYWR5IGdvaW5nIGZvcndhcmQgaW50byBhY3Rpb24sIGhlIHNhdyBmaXJzdCBvbmUgb2YgaGlzIGNlbnR1cmlvbnMsIGEgbWFuIGV4cGVyaWVuY2VkIGluIHdhciBhbmQgZmFpdGhmdWwgdG8gaGltLCBlbmNvdXJhZ2luZyBoaXMgbWVuIGFuZCBjaGFsbGVuZ2luZyB0aGVtIHRvIHZpZSB3aXRoIGhpbSBpbiBwcm93ZXNzLiBIaW0gQ2Flc2FyIGFkZHJlc3NlZCBieSBuYW1lIGFuZCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2FpdXMgQ3Jhc3Npbml1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIENhZXNhcidzIHZlcnNpb24gb2YgdGhpcyBlcGlzb2RlIAoJCQkJCSg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLkMuPC90aXRsZT4gaWlpLiA5MTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45OSIgdmFsaWQ9InllcyI+OTk8L2JpYmw+KSwgCgkJCQkJdGhlIG5hbWUgaXMgQ3Jhc3RpbnVzLjwvbm90ZT4gd2hhdCBhcmUgb3VyIGhvcGVzLCBhbmQgaG93IGRvZXMgb3VyIGNvbmZpZGVuY2Ugc3RhbmQ/PC9xPgoJCQkJICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIENhZXNhcidzIHZlcnNpb24gb2YgdGhpcyBlcGlzb2RlIAoJCQkJCSg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuOTEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLkMuPC90aXRsZT4gaWlpLiA5MTwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45OSIgdmFsaWQ9InllcyI+OTk8L2JpYmw+KSwgCgkJCQkJdGhlIG5hbWUgaXMgQ3Jhc3RpbnVzLjwvbm90ZT4gd2hhdCBhcmUgb3VyIGhvcGVzLCBhbmQgaG93IGRvZXMgb3VyIGNvbmZpZGVuY2Ugc3RhbmQ/PGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjkxIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi5DLjwvdGl0bGU+IGlpaS4gOTE8L2JpYmw+IGFuZCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLkMuPC90aXRsZT4gaWlpLiA5MTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy45OSIgdmFsaWQ9InllcyI+OTk8L2JpYmw+KSwgCgkJCQkJdGhlIG5hbWUgaXMgQ3Jhc3RpbnVzLjwvdHJhbnNsYXRpb24+"
translation['44.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gQ3Jhc3Npbml1cywgc3RyZXRjaGluZyBmb3J0aCBoaXMgcmlnaHQgaGFuZCwgc2FpZCB3aXRoIGEgbG91ZCB2b2ljZTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPldlIHNoYWxsIHdpbiBhIGdsb3Jpb3VzIHZpY3RvcnksIE8gQ2Flc2FyLCBhbmQgdGhvdSBzaGFsdCBwcmFpc2UgbWUgdG8tZGF5LCB3aGV0aGVyIEkgYW0gYWxpdmUgb3IgZGVhZDwvcT4gU28gc2F5aW5nLCBoZSBwbHVuZ2VkIGZvcmVtb3N0IGludG8gdGhlIGVuZW15IGF0IGZ1bGwgc3BlZWQsIGNhcnJ5aW5nIGFsb25nIHdpdGggaGltIHRoZSBvbmUgaHVuZHJlZCBhbmQgdHdlbnR5IHNvbGRpZXJzIHVuZGVyIGhpcyBjb21tYW5kLiBCdXQgYWZ0ZXIgY3V0dGluZyBoaXMgd2F5IHRocm91Z2ggdGhlIGZpcnN0IHJhbmssIGFuZCB3aGlsZSBoZSB3YXMgZm9yZ2luZyBvbndhcmRzIHdpdGggZ3JlYXQgc2xhdWdodGVyLCBoZSB3YXMgYmVhdGVuIGJhY2sgYnkgdGhlIHRocnVzdCBvZiBhIHN3b3JkIHRocm91Z2ggaGlzIG1vdXRoLCBhbmQgdGhlIHBvaW50IG9mIHRoZSBzd29yZCBhY3R1YWxseSBjYW1lIG91dCBhdCB0aGUgYmFjayBvZiBoaXMgbmVjay48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA3MS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4eGkuIDEtMzwvYmlibD4uPC9ub3RlPgogICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA3MS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4eGkuIDEtMzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4eGkuIDEtMzxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGluZmFudHJ5IGhhZCB0aHVzIGNsYXNoZWQgdG9nZXRoZXIgaW4gdGhlIGNlbnRyZSBhbmQgd2VyZSBmaWdodGluZywgUG9tcGV5J3MgY2F2YWxyeSByb2RlIHByb3VkbHkgdXAgZnJvbSB0aGUgd2luZyBhbmQgZGVwbG95ZWQgdGhlaXIgc3F1YWRyb25zIHRvIGVudmVsb3BlIHRoZSBlbmVteSdzIHJpZ2h0OyBhbmQgYmVmb3JlIHRoZXkgY291bGQgYXR0YWNrLCB0aGUgY29ob3J0cyByYW4gb3V0IGZyb20gd2hlcmUgQ2Flc2FyIHdhcyBwb3N0ZWQsIG5vdCBodXJsaW5nIHRoZWlyIGphdmVsaW5zLCBhcyB1c3VhbCwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+bm9yIHlldCBzdGFiYmluZyB0aGUgdGhpZ2hzIGFuZCBsZWdzIG9mIHRoZWlyIGVuZW1pZXMgd2l0aCB0aGVtLCBidXQgYWltaW5nIHRoZW0gYXQgdGhlaXIgZXllcyBhbmQgd291bmRpbmcgdGhlaXIgZmFjZXMuIFRoZXkgaGFkIGJlZW4gaW5zdHJ1Y3RlZCB0byBkbyB0aGlzIGJ5IENhZXNhciwgd2hvIGV4cGVjdGVkIHRoYXQgbWVuIGxpdHRsZSBjb252ZXJzYW50IHdpdGggd2FycyBvciB3b3VuZHMsIGJ1dCB5b3VuZywgYW5kIHBsdW1pbmcgdGhlbXNlbHZlcyBvbiB0aGVpciB5b3V0aGZ1bCBiZWF1dHksIHdvdWxkIGRyZWFkIHN1Y2ggd291bmRzIGVzcGVjaWFsbHksIGFuZCB3b3VsZCBub3Qgc3RhbmQgdGhlaXIgZ3JvdW5kLCBmZWFyaW5nIG5vdCBvbmx5IHRoZWlyIHByZXNlbnQgZGFuZ2VyLCBidXQgYWxzbyB0aGVpciBmdXR1cmUgZGlzZmlndXJlbWVudC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoaXMgd2FzIHdoYXQgYWN0dWFsbHkgY2FtZSB0byBwYXNzOyBmb3IgdGhleSBjb3VsZCBub3QgZW5kdXJlIHRoZSB1cHdhcmQgdGhydXN0IG9mIHRoZSBqYXZlbGlucywgbm9yIGRpZCB0aGV5IGV2ZW4gdmVudHVyZSB0byBsb29rIHRoZSB3ZWFwb24gaW4gdGhlIGZhY2UsIGJ1dCB0dXJuZWQgdGhlaXIgaGVhZHMgYXdheSBhbmQgY292ZXJlZCB0aGVtIHVwIHRvIHNwYXJlIHRoZWlyIGZhY2VzLiBBbmQgZmluYWxseSwgaGF2aW5nIHRodXMgdGhyb3duIHRoZW1zZWx2ZXMgaW50byBjb25mdXNpb24sIHRoZXkgdHVybmVkIGFuZCBmbGVkIG1vc3Qgc2hhbWVmdWxseSwgdGhlcmVieSBydWluaW5nIGV2ZXJ5dGhpbmcuIEZvciB0aGUgY29ucXVlcm9ycyBvZiB0aGUgaG9yc2VtZW4gYXQgb25jZSBlbmNpcmNsZWQgdGhlIGluZmFudHJ5LCBmZWxsIHVwb24gdGhlaXIgcmVhciwgYW5kIGJlZ2FuIHRvIGN1dCB0aGVtIHRvIHBpZWNlcy48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['45.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgaW5mYW50cnkgaGFkIHRodXMgY2xhc2hlZCB0b2dldGhlciBpbiB0aGUgY2VudHJlIGFuZCB3ZXJlIGZpZ2h0aW5nLCBQb21wZXkncyBjYXZhbHJ5IHJvZGUgcHJvdWRseSB1cCBmcm9tIHRoZSB3aW5nIGFuZCBkZXBsb3llZCB0aGVpciBzcXVhZHJvbnMgdG8gZW52ZWxvcGUgdGhlIGVuZW15J3MgcmlnaHQ7IGFuZCBiZWZvcmUgdGhleSBjb3VsZCBhdHRhY2ssIHRoZSBjb2hvcnRzIHJhbiBvdXQgZnJvbSB3aGVyZSBDYWVzYXIgd2FzIHBvc3RlZCwgbm90IGh1cmxpbmcgdGhlaXIgamF2ZWxpbnMsIGFzIHVzdWFsLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['45.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm5vciB5ZXQgc3RhYmJpbmcgdGhlIHRoaWdocyBhbmQgbGVncyBvZiB0aGVpciBlbmVtaWVzIHdpdGggdGhlbSwgYnV0IGFpbWluZyB0aGVtIGF0IHRoZWlyIGV5ZXMgYW5kIHdvdW5kaW5nIHRoZWlyIGZhY2VzLiBUaGV5IGhhZCBiZWVuIGluc3RydWN0ZWQgdG8gZG8gdGhpcyBieSBDYWVzYXIsIHdobyBleHBlY3RlZCB0aGF0IG1lbiBsaXR0bGUgY29udmVyc2FudCB3aXRoIHdhcnMgb3Igd291bmRzLCBidXQgeW91bmcsIGFuZCBwbHVtaW5nIHRoZW1zZWx2ZXMgb24gdGhlaXIgeW91dGhmdWwgYmVhdXR5LCB3b3VsZCBkcmVhZCBzdWNoIHdvdW5kcyBlc3BlY2lhbGx5LCBhbmQgd291bGQgbm90IHN0YW5kIHRoZWlyIGdyb3VuZCwgZmVhcmluZyBub3Qgb25seSB0aGVpciBwcmVzZW50IGRhbmdlciwgYnV0IGFsc28gdGhlaXIgZnV0dXJlIGRpc2ZpZ3VyZW1lbnQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['45.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzIHdhcyB3aGF0IGFjdHVhbGx5IGNhbWUgdG8gcGFzczsgZm9yIHRoZXkgY291bGQgbm90IGVuZHVyZSB0aGUgdXB3YXJkIHRocnVzdCBvZiB0aGUgamF2ZWxpbnMsIG5vciBkaWQgdGhleSBldmVuIHZlbnR1cmUgdG8gbG9vayB0aGUgd2VhcG9uIGluIHRoZSBmYWNlLCBidXQgdHVybmVkIHRoZWlyIGhlYWRzIGF3YXkgYW5kIGNvdmVyZWQgdGhlbSB1cCB0byBzcGFyZSB0aGVpciBmYWNlcy4gQW5kIGZpbmFsbHksIGhhdmluZyB0aHVzIHRocm93biB0aGVtc2VsdmVzIGludG8gY29uZnVzaW9uLCB0aGV5IHR1cm5lZCBhbmQgZmxlZCBtb3N0IHNoYW1lZnVsbHksIHRoZXJlYnkgcnVpbmluZyBldmVyeXRoaW5nLiBGb3IgdGhlIGNvbnF1ZXJvcnMgb2YgdGhlIGhvcnNlbWVuIGF0IG9uY2UgZW5jaXJjbGVkIHRoZSBpbmZhbnRyeSwgZmVsbCB1cG9uIHRoZWlyIHJlYXIsIGFuZCBiZWdhbiB0byBjdXQgdGhlbSB0byBwaWVjZXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBQb21wZXksIG9uIHRoZSBvdGhlciB3aW5nLCBzYXcgaGlzIGhvcnNlbWVuIHNjYXR0ZXJlZCBpbiBmbGlnaHQsIGhlIHdhcyBubyBsb25nZXIgdGhlIHNhbWUgbWFuLCBub3IgcmVtZW1iZXJlZCB0aGF0IGhlIHdhcyBQb21wZXkgdGhlIEdyZWF0LCBidXQgbW9yZSBsaWtlIG9uZSB3aG9tIEhlYXZlbiBoYXMgcm9iYmVkIG9mIGhpcyB3aXRzIHRoYW4gYW55dGhpbmcgZWxzZSwgaGUgd2VudCBvZmYgd2l0aG91dCBhIHdvcmQgdG8gaGlzIHRlbnQsIHNhdCBkb3duIHRoZXJlLCBhbmQgYXdhaXRlZCB3aGF0IHdhcyB0byBjb21lLCB1bnRpbCBoaXMgZm9yY2VzIHdlcmUgYWxsIHJvdXRlZCBhbmQgdGhlIGVuZW15IHdlcmUgYXNzYWlsaW5nIGhpcyByYW1wYXJ0cyBhbmQgZmlnaHRpbmcgd2l0aCB0aGVpciBkZWZlbmRlcnMuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgY2FtZSB0byBoaXMgc2Vuc2VzLCBhcyBpdCB3ZXJlLCBhbmQgd2l0aCB0aGlzIG9uZSBlamFjdWxhdGlvbiwgYXMgdGhleSBzYXksIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCwgZXZlbiB0byBteSBxdWFydGVycz88L3E+IHRvb2sgb2ZmIGhpcyBmaWdodGluZyBhbmQgZ2VuZXJhbCdzIGRyZXNzLCBwdXQgb24gb25lIHN1aXRhYmxlIGZvciBhIGZ1Z2l0aXZlLCBhbmQgc3RvbGUgYXdheS4gV2hhdCBoaXMgc3Vic2VxdWVudCBmb3J0dW5lcyB3ZXJlLCBhbmQgaG93IGhlIGRlbGl2ZXJlZCBoaW1zZWxmIGludG8gdGhlIGhhbmRzIG9mIHRoZSBFZ3lwdGlhbnMgYW5kIHdhcyBtdXJkZXJlZCwgSSBzaGFsbCB0ZWxsIGluIGhpcyBMaWZlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNzcuMSIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgbHh4dmlpLjwvYmlibD4tPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDgwLjEiIHZhbGlkPSJ5ZXMiPmx4eHg8L2JpYmw+Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['45.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4gUG9tcGV5LCBvbiB0aGUgb3RoZXIgd2luZywgc2F3IGhpcyBob3JzZW1lbiBzY2F0dGVyZWQgaW4gZmxpZ2h0LCBoZSB3YXMgbm8gbG9uZ2VyIHRoZSBzYW1lIG1hbiwgbm9yIHJlbWVtYmVyZWQgdGhhdCBoZSB3YXMgUG9tcGV5IHRoZSBHcmVhdCwgYnV0IG1vcmUgbGlrZSBvbmUgd2hvbSBIZWF2ZW4gaGFzIHJvYmJlZCBvZiBoaXMgd2l0cyB0aGFuIGFueXRoaW5nIGVsc2UsIGhlIHdlbnQgb2ZmIHdpdGhvdXQgYSB3b3JkIHRvIGhpcyB0ZW50LCBzYXQgZG93biB0aGVyZSwgYW5kIGF3YWl0ZWQgd2hhdCB3YXMgdG8gY29tZSwgdW50aWwgaGlzIGZvcmNlcyB3ZXJlIGFsbCByb3V0ZWQgYW5kIHRoZSBlbmVteSB3ZXJlIGFzc2FpbGluZyBoaXMgcmFtcGFydHMgYW5kIGZpZ2h0aW5nIHdpdGggdGhlaXIgZGVmZW5kZXJzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['45.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gaGUgY2FtZSB0byBoaXMgc2Vuc2VzLCBhcyBpdCB3ZXJlLCBhbmQgd2l0aCB0aGlzIG9uZSBlamFjdWxhdGlvbiwgYXMgdGhleSBzYXksIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0LCBldmVuIHRvIG15IHF1YXJ0ZXJzPzwvcT4gdG9vayBvZmYgaGlzIGZpZ2h0aW5nIGFuZCBnZW5lcmFsJ3MgZHJlc3MsIHB1dCBvbiBvbmUgc3VpdGFibGUgZm9yIGEgZnVnaXRpdmUsIGFuZCBzdG9sZSBhd2F5LiBXaGF0IGhpcyBzdWJzZXF1ZW50IGZvcnR1bmVzIHdlcmUsIGFuZCBob3cgaGUgZGVsaXZlcmVkIGhpbXNlbGYgaW50byB0aGUgaGFuZHMgb2YgdGhlIEVneXB0aWFucyBhbmQgd2FzIG11cmRlcmVkLCBJIHNoYWxsIHRlbGwgaW4gaGlzIExpZmUuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gNzcuMSIgdmFsaWQ9InllcyI+Q2hhcHRlcnMgbHh4dmlpLjwvYmlibD4tPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gODAuMSIgdmFsaWQ9InllcyI+bHh4eDwvYmlibD4uPC9ub3RlPgogICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA3Ny4xIiB2YWxpZD0ieWVzIj5DaGFwdGVycyBseHh2aWkuPC9iaWJsPi08YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA4MC4xIiB2YWxpZD0ieWVzIj5seHh4PC9iaWJsPi48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2Flc2FyLCB3aGVuIGhlIHJlYWNoZWQgUG9tcGV5J3MgcmFtcGFydHMgYW5kIHNhdyB0aG9zZSBvZiB0aGUgZW5lbXkgd2hvIHdlcmUgYWxyZWFkeSBseWluZyBkZWFkIHRoZXJlIGFuZCB0aG9zZSB3aG8gd2VyZSBzdGlsbCBmYWxsaW5nLCBzYWlkIHdpdGggYSBncm9hbjogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGV5IHdvdWxkIGhhdmUgaXQgc287IHRoZXkgYnJvdWdodCBtZSB0byBzdWNoIGEgcGFzcyB0aGF0IGlmIEksIENhaXVzIENhZXNhciwgYWZ0ZXIgd2FnaW5nIHN1Y2Nlc3NmdWxseSB0aGUgZ3JlYXRlc3Qgd2FycywgaGFkIGRpc21pc3NlZCBteSBmb3JjZXMsIEkgc2hvdWxkIGhhdmUgYmVlbiBjb25kZW1uZWQgaW4gdGhlaXIgY291cnRzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5Ib2Mgdm9sdWVydW50OyB0YW50aXMgcmVidXMgZ2VzdGlzIEdhaXVzIENhZXNhciBjb25kZW1uYXR1cyBlc3NlbSwgbmlzaSBhYiBleGVyY2l0dSBhdXhpbGl1bSBwZXRpc3NlbTwvZm9yZWlnbj4gKDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDMwIiB2YWxpZD0ieWVzIj5TdWV0b25pdXMsIDx0aXRsZT5EaXYuIEp1bC48L3RpdGxlPiAzMDwvYmlibD4pLjwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXNpbml1cyBQb2xsaW8gc2F5cyB0aGF0IHRoZXNlIHdvcmRzLCB3aGljaCBDYWVzYXIgYWZ0ZXJ3YXJkcyB3cm90ZSBkb3duIGluIEdyZWVrLCB3ZXJlIHV0dGVyZWQgYnkgaGltIGluIExhdGluIGF0IHRoZSB0aW1lOyBoZSBhbHNvIHNheXMgdGhhdCBtb3N0IG9mIHRoZSBzbGFpbiB3ZXJlIHNlcnZhbnRzIHdobyB3ZXJlIGtpbGxlZCBhdCB0aGUgdGFraW5nIG9mIHRoZSBjYW1wLCBhbmQgdGhhdCBub3QgbW9yZSB0aGFuIHNpeCB0aG91c2FuZCBzb2xkaWVycyBmZWxsLiBNb3N0IG9mIHRob3NlIHdobyB3ZXJlIHRha2VuIGFsaXZlIENhZXNhciBpbmNvcnBvcmF0ZWQgaW4gaGlzIGxlZ2lvbnMsIGFuZCB0byBtYW55IG1lbiBvZiBwcm9taW5lbmNlIGhlIGdyYW50ZWQgaW1tdW5pdHkuIE9uZSBvZiB0aGVzZSB3YXMgQnJ1dHVzLCB3aG8gYWZ0ZXJ3YXJkcyBzbGV3IGhpbS4gQ2Flc2FyIHdhcyBkaXN0cmVzc2VkLCB3ZSBhcmUgdG9sZCwgd2hlbiBCcnV0dXMgd2FzIG5vdCB0byBiZSBmb3VuZCwgYnV0IHdoZW4gaGUgd2FzIGJyb3VnaHQgaW50byBoaXMgcHJlc2VuY2Ugc2FmZSBhbmQgc291bmQsIHdhcyBwbGVhc2VkIGJleW9uZCBtZWFzdXJlLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['46.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IENhZXNhciwgd2hlbiBoZSByZWFjaGVkIFBvbXBleSdzIHJhbXBhcnRzIGFuZCBzYXcgdGhvc2Ugb2YgdGhlIGVuZW15IHdobyB3ZXJlIGFscmVhZHkgbHlpbmcgZGVhZCB0aGVyZSBhbmQgdGhvc2Ugd2hvIHdlcmUgc3RpbGwgZmFsbGluZywgc2FpZCB3aXRoIGEgZ3JvYW46IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGV5IHdvdWxkIGhhdmUgaXQgc287IHRoZXkgYnJvdWdodCBtZSB0byBzdWNoIGEgcGFzcyB0aGF0IGlmIEksIENhaXVzIENhZXNhciwgYWZ0ZXIgd2FnaW5nIHN1Y2Nlc3NmdWxseSB0aGUgZ3JlYXRlc3Qgd2FycywgaGFkIGRpc21pc3NlZCBteSBmb3JjZXMsIEkgc2hvdWxkIGhhdmUgYmVlbiBjb25kZW1uZWQgaW4gdGhlaXIgY291cnRzLjwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+SG9jIHZvbHVlcnVudDsgdGFudGlzIHJlYnVzIGdlc3RpcyBHYWl1cyBDYWVzYXIgY29uZGVtbmF0dXMgZXNzZW0sIG5pc2kgYWIgZXhlcmNpdHUgYXV4aWxpdW0gcGV0aXNzZW08L2ZvcmVpZ24+ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdWV0LiBKdWwuIDMwIiB2YWxpZD0ieWVzIj5TdWV0b25pdXMsIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdi4gSnVsLjwvdGl0bGU+IDMwPC9iaWJsPikuPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPkhvYyB2b2x1ZXJ1bnQ7IHRhbnRpcyByZWJ1cyBnZXN0aXMgR2FpdXMgQ2Flc2FyIGNvbmRlbW5hdHVzIGVzc2VtLCBuaXNpIGFiIGV4ZXJjaXR1IGF1eGlsaXVtIHBldGlzc2VtPC9mb3JlaWduPiAoPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiAzMCIgdmFsaWQ9InllcyI+U3VldG9uaXVzLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiAzMDwvYmlibD4pLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdi4gSnVsLjwvdGl0bGU+IDMwPC90cmFuc2xhdGlvbj4="
translation['46.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFzaW5pdXMgUG9sbGlvIHNheXMgdGhhdCB0aGVzZSB3b3Jkcywgd2hpY2ggQ2Flc2FyIGFmdGVyd2FyZHMgd3JvdGUgZG93biBpbiBHcmVlaywgd2VyZSB1dHRlcmVkIGJ5IGhpbSBpbiBMYXRpbiBhdCB0aGUgdGltZTsgaGUgYWxzbyBzYXlzIHRoYXQgbW9zdCBvZiB0aGUgc2xhaW4gd2VyZSBzZXJ2YW50cyB3aG8gd2VyZSBraWxsZWQgYXQgdGhlIHRha2luZyBvZiB0aGUgY2FtcCwgYW5kIHRoYXQgbm90IG1vcmUgdGhhbiBzaXggdGhvdXNhbmQgc29sZGllcnMgZmVsbC4gTW9zdCBvZiB0aG9zZSB3aG8gd2VyZSB0YWtlbiBhbGl2ZSBDYWVzYXIgaW5jb3Jwb3JhdGVkIGluIGhpcyBsZWdpb25zLCBhbmQgdG8gbWFueSBtZW4gb2YgcHJvbWluZW5jZSBoZSBncmFudGVkIGltbXVuaXR5LiBPbmUgb2YgdGhlc2Ugd2FzIEJydXR1cywgd2hvIGFmdGVyd2FyZHMgc2xldyBoaW0uIENhZXNhciB3YXMgZGlzdHJlc3NlZCwgd2UgYXJlIHRvbGQsIHdoZW4gQnJ1dHVzIHdhcyBub3QgdG8gYmUgZm91bmQsIGJ1dCB3aGVuIGhlIHdhcyBicm91Z2h0IGludG8gaGlzIHByZXNlbmNlIHNhZmUgYW5kIHNvdW5kLCB3YXMgcGxlYXNlZCBiZXlvbmQgbWVhc3VyZS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNDciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5UaGVyZSB3ZXJlIG1hbnkgcG9ydGVudHMgb2YgdGhlIHZpY3RvcnksIGJ1dCB0aGUgbW9zdCByZW1hcmthYmxlIG9uZSBvbiByZWNvcmQgaXMgdGhhdCB3aGljaCB3YXMgc2VlbiBhdCBUcmFsbGVzLiBJbiB0aGF0IGNpdHkncyB0ZW1wbGUgb2YgVmljdG9yeSB0aGVyZSBzdG9vZCBhIHN0YXR1ZSBvZiBDYWVzYXIsIGFuZCB0aGUgZ3JvdW5kIGFyb3VuZCBpdCB3YXMgaXRzZWxmIG5hdHVyYWxseSBmaXJtLCBhbmQgd2FzIHBhdmVkIHdpdGggaGFyZCBzdG9uZTsgeWV0IGZyb20gdGhpcyBpdCBpcyBzYWlkIHRoYXQgYSBwYWxtLXRyZWUgc2hvdCB1cCBhdCB0aGUgYmFzZSBvZiB0aGUgc3RhdHVlLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQ2Flcy4gQ2l2LiAzLjEwNSIgdmFsaWQ9InllcyI+Q2Flc2FyIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGlpaS4gMTA1PC9iaWJsPiBhZCBmaW4uPC9ub3RlPiBNb3Jlb3ZlciwgYXQgUGF0YXZpdW0sIENhaXVzIENvcm5lbGl1cywgYSBtYW4gaW4gcmVwdXRlIGFzIGEgc2VlciwgYSBmZWxsb3cgY2l0aXplbiBhbmQgYWNxdWFpbnRhbmNlIG9mIExpdnkgdGhlIGhpc3RvcmlhbiwgY2hhbmNlZCB0aGF0IGRheSB0byBiZSBzaXR0aW5nIGluIHRoZSBwbGFjZSBvZiBhdWd1cnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0byBiZWdpbiB3aXRoLCBhY2NvcmRpbmcgdG8gTGl2eSwgaGUgZGlzY2VybmVkIHRoZSB0aW1lIG9mIHRoZSBiYXR0bGUsIGFuZCBzYWlkIHRvIHRob3NlIHByZXNlbnQgdGhhdCBldmVuIHRoZW4gdGhlIGV2ZW50IHdhcyBpbiBwcm9ncmVzcyBhbmQgdGhlIG1lbiB3ZXJlIGdvaW5nIGludG8gYWN0aW9uLiBBbmQgd2hlbiBoZSBsb29rZWQgYWdhaW4gYW5kIG9ic2VydmVkIHRoZSBzaWducywgaGUgc3ByYW5nIHVwIGluIGEgcmFwdHVyZSBjcnlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgdmljdG9yaW91cywgTyBDYWVzYXIhPC9xPiBUaGUgYnlzdGFuZGVycyBiZWluZyBhbWF6ZWQsIGhlIHRvb2sgdGhlIGNoYXBsZXQgZnJvbSBoaXMgaGVhZCBhbmQgZGVjbGFyZWQgd2l0aCBhbiBvYXRoIHRoYXQgaGUgd291bGQgbm90IHB1dCBpdCBvbiBhZ2FpbiB1bnRpbCB0aGUgZXZlbnQgaGFkIGJvcm5lIHdpdG5lc3MgdG8gaGlzIGFydC4gQXQgYW55IHJhdGUsIExpdnkgaW5zaXN0cyB0aGF0IHRoaXMgd2FzIHNvLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIEJvb2sgY3hpLCB3aGljaCBpcyBsb3N0Ljwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['47.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2VyZSBtYW55IHBvcnRlbnRzIG9mIHRoZSB2aWN0b3J5LCBidXQgdGhlIG1vc3QgcmVtYXJrYWJsZSBvbmUgb24gcmVjb3JkIGlzIHRoYXQgd2hpY2ggd2FzIHNlZW4gYXQgVHJhbGxlcy4gSW4gdGhhdCBjaXR5J3MgdGVtcGxlIG9mIFZpY3RvcnkgdGhlcmUgc3Rvb2QgYSBzdGF0dWUgb2YgQ2Flc2FyLCBhbmQgdGhlIGdyb3VuZCBhcm91bmQgaXQgd2FzIGl0c2VsZiBuYXR1cmFsbHkgZmlybSwgYW5kIHdhcyBwYXZlZCB3aXRoIGhhcmQgc3RvbmU7IHlldCBmcm9tIHRoaXMgaXQgaXMgc2FpZCB0aGF0IGEgcGFsbS10cmVlIHNob3QgdXAgYXQgdGhlIGJhc2Ugb2YgdGhlIHN0YXR1ZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDYWVzLiBDaXYuIDMuMTA1IiB2YWxpZD0ieWVzIj5DYWVzYXIgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gQy48L3RpdGxlPiBpaWkuIDEwNTwvYmlibD4gYWQgZmluLjwvbm90ZT4gTW9yZW92ZXIsIGF0IFBhdGF2aXVtLCBDYWl1cyBDb3JuZWxpdXMsIGEgbWFuIGluIHJlcHV0ZSBhcyBhIHNlZXIsIGEgZmVsbG93IGNpdGl6ZW4gYW5kIGFjcXVhaW50YW5jZSBvZiBMaXZ5IHRoZSBoaXN0b3JpYW4sIGNoYW5jZWQgdGhhdCBkYXkgdG8gYmUgc2l0dGluZyBpbiB0aGUgcGxhY2Ugb2YgYXVndXJ5LiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNhZXMuIENpdi4gMy4xMDUiIHZhbGlkPSJ5ZXMiPkNhZXNhciA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpaS4gMTA1PC9iaWJsPiBhZCBmaW4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gQy48L3RpdGxlPiBpaWkuIDEwNTwvdHJhbnNsYXRpb24+"
translation['47.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0byBiZWdpbiB3aXRoLCBhY2NvcmRpbmcgdG8gTGl2eSwgaGUgZGlzY2VybmVkIHRoZSB0aW1lIG9mIHRoZSBiYXR0bGUsIGFuZCBzYWlkIHRvIHRob3NlIHByZXNlbnQgdGhhdCBldmVuIHRoZW4gdGhlIGV2ZW50IHdhcyBpbiBwcm9ncmVzcyBhbmQgdGhlIG1lbiB3ZXJlIGdvaW5nIGludG8gYWN0aW9uLiBBbmQgd2hlbiBoZSBsb29rZWQgYWdhaW4gYW5kIG9ic2VydmVkIHRoZSBzaWducywgaGUgc3ByYW5nIHVwIGluIGEgcmFwdHVyZSBjcnlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGFydCB2aWN0b3Jpb3VzLCBPIENhZXNhciE8L3E+IFRoZSBieXN0YW5kZXJzIGJlaW5nIGFtYXplZCwgaGUgdG9vayB0aGUgY2hhcGxldCBmcm9tIGhpcyBoZWFkIGFuZCBkZWNsYXJlZCB3aXRoIGFuIG9hdGggdGhhdCBoZSB3b3VsZCBub3QgcHV0IGl0IG9uIGFnYWluIHVudGlsIHRoZSBldmVudCBoYWQgYm9ybmUgd2l0bmVzcyB0byBoaXMgYXJ0LiBBdCBhbnkgcmF0ZSwgTGl2eSBpbnNpc3RzIHRoYXQgdGhpcyB3YXMgc28uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBCb29rIGN4aSwgd2hpY2ggaXMgbG9zdC48L25vdGU+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhciBnYXZlIHRoZSBUaGVzc2FsaWFucyB0aGVpciBmcmVlZG9tLCB0byBjb21tZW1vcmF0ZSBoaXMgdmljdG9yeSwgYW5kIHRoZW4gcHVyc3VlZCBQb21wZXk7IHdoZW4gaGUgcmVhY2hlZCBBc2lhIGhlIG1hZGUgdGhlIENuaWRpYW5zIGFsc28gZnJlZSwgdG8gcGxlYXNlIFRoZW9wb21wdXMgdGhlIGNvbGxlY3RvciBvZiBmYWJsZXMsIGFuZCBmb3IgYWxsIHRoZSBpbmhhYml0YW50cyBvZiBBc2lhIHJlbWl0dGVkIGEgdGhpcmQgb2YgdGhlaXIgdGF4ZXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFycml2aW5nIGF0IEFsZXhhbmRyaWEganVzdCBhZnRlciBQb21wZXkncyBkZWF0aCwgaGUgdHVybmVkIGF3YXkgaW4gaG9ycm9yIGZyb20gVGhlb2RvdHVzIGFzIGhlIHByZXNlbnRlZCB0aGUgaGVhZCBvZiBQb21wZXksIGJ1dCBoZSBhY2NlcHRlZCBQb21wZXkncyBzZWFsLXJpbmcsIGFuZCBzaGVkIHRlYXJzIG92ZXIgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUG9tcC4gODAuNSIgdmFsaWQ9InllcyI+UG9tcGV5LCBseHh4LiA1PC9iaWJsPi48L25vdGU+IE1vcmVvdmVyLCBhbGwgdGhlIGNvbXBhbmlvbnMgYW5kIGludGltYXRlcyBvZiBQb21wZXkgd2hvIGhhZCBiZWVuIGNhcHR1cmVkIGJ5IHRoZSBraW5nIGFzIHRoZXkgd2FuZGVyZWQgb3ZlciB0aGUgY291bnRyeSwgaGUgdHJlYXRlZCB3aXRoIGtpbmRuZXNzIGFuZCBhdHRhY2hlZCB0aGVtIHRvIGhpbXNlbGYuIEFuZCB0byBoaXMgZnJpZW5kcyBpbiBSb21lIGhlIHdyb3RlIHRoYXQgdGhpcyB3YXMgdGhlIGdyZWF0ZXN0IGFuZCBzd2VldGVzdCBwbGVhc3VyZSB0aGF0IGhlIGRlcml2ZWQgZnJvbSBoaXMgdmljdG9yeSwgbmFtZWx5LCBmcm9tIHRpbWUgdG8gdGltZSB0byBzYXZlIHRoZSBsaXZlcyBvZiBmZWxsb3cgY2l0aXplbnMgd2hvIGhhZCBmb3VnaHQgYWdhaW5zdCBoaW0uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['48.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIGdhdmUgdGhlIFRoZXNzYWxpYW5zIHRoZWlyIGZyZWVkb20sIHRvIGNvbW1lbW9yYXRlIGhpcyB2aWN0b3J5LCBhbmQgdGhlbiBwdXJzdWVkIFBvbXBleTsgd2hlbiBoZSByZWFjaGVkIEFzaWEgaGUgbWFkZSB0aGUgQ25pZGlhbnMgYWxzbyBmcmVlLCB0byBwbGVhc2UgVGhlb3BvbXB1cyB0aGUgY29sbGVjdG9yIG9mIGZhYmxlcywgYW5kIGZvciBhbGwgdGhlIGluaGFiaXRhbnRzIG9mIEFzaWEgcmVtaXR0ZWQgYSB0aGlyZCBvZiB0aGVpciB0YXhlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['48.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFycml2aW5nIGF0IEFsZXhhbmRyaWEganVzdCBhZnRlciBQb21wZXkncyBkZWF0aCwgaGUgdHVybmVkIGF3YXkgaW4gaG9ycm9yIGZyb20gVGhlb2RvdHVzIGFzIGhlIHByZXNlbnRlZCB0aGUgaGVhZCBvZiBQb21wZXksIGJ1dCBoZSBhY2NlcHRlZCBQb21wZXkncyBzZWFsLXJpbmcsIGFuZCBzaGVkIHRlYXJzIG92ZXIgaXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDgwLjUiIHZhbGlkPSJ5ZXMiPlBvbXBleSwgbHh4eC4gNTwvYmlibD4uPC9ub3RlPiBNb3Jlb3ZlciwgYWxsIHRoZSBjb21wYW5pb25zIGFuZCBpbnRpbWF0ZXMgb2YgUG9tcGV5IHdobyBoYWQgYmVlbiBjYXB0dXJlZCBieSB0aGUga2luZyBhcyB0aGV5IHdhbmRlcmVkIG92ZXIgdGhlIGNvdW50cnksIGhlIHRyZWF0ZWQgd2l0aCBraW5kbmVzcyBhbmQgYXR0YWNoZWQgdGhlbSB0byBoaW1zZWxmLiBBbmQgdG8gaGlzIGZyaWVuZHMgaW4gUm9tZSBoZSB3cm90ZSB0aGF0IHRoaXMgd2FzIHRoZSBncmVhdGVzdCBhbmQgc3dlZXRlc3QgcGxlYXN1cmUgdGhhdCBoZSBkZXJpdmVkIGZyb20gaGlzIHZpY3RvcnksIG5hbWVseSwgZnJvbSB0aW1lIHRvIHRpbWUgdG8gc2F2ZSB0aGUgbGl2ZXMgb2YgZmVsbG93IGNpdGl6ZW5zIHdobyBoYWQgZm91Z2h0IGFnYWluc3QgaGltLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDgwLjUiIHZhbGlkPSJ5ZXMiPlBvbXBleSwgbHh4eC4gNTwvYmlibD4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSB3YXIgaW4gRWd5cHQsIHNvbWUgc2F5IHRoYXQgaXQgd2FzIG5vdCBuZWNlc3NhcnksIGJ1dCBkdWUgdG8gQ2Flc2FyJ3MgcGFzc2lvbiBmb3IgQ2xlb3BhdHJhLCBhbmQgdGhhdCBpdCB3YXMgaW5nbG9yaW91cyBhbmQgZnVsbCBvZiBwZXJpbCBmb3IgaGltLiBCdXQgb3RoZXJzIGJsYW1lIHRoZSBraW5nJ3MgcGFydHkgZm9yIGl0LCBhbmQgZXNwZWNpYWxseSB0aGUgZXVudWNoIFBvdGhlaW51cywgd2hvIGhhZCBtb3N0IGluZmx1ZW5jZSBhdCBjb3VydCw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA3Ny4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlBvbXBleTwvdGl0bGU+LCBseHh2aWkuIDI8L2JpYmw+Ljwvbm90ZT4gYW5kIGhhZCByZWNlbnRseSBraWxsZWQgUG9tcGV5OyBoZSBoYWQgYWxzbyBkcml2ZW4gQ2xlb3BhdHJhIGZyb20gdGhlIGNvdW50cnksIGFuZCB3YXMgbm93IHNlY3JldGx5IHBsb3R0aW5nIGFnYWluc3QgQ2Flc2FyLiBPbiB0aGlzIGFjY291bnQgdGhleSBzYXkgdGhhdCBmcm9tIHRoaXMgdGltZSBvbiBDYWVzYXIgcGFzc2VkIHdob2xlIG5pZ2h0cyBhdCBkcmlua2luZyBwYXJ0aWVzIGluIG9yZGVyIHRvIHByb3RlY3QgaGltc2VsZi4gQnV0IGluIGhpcyBvcGVuIGFjdHMgYWxzbyBQb3RoZWludXMgd2FzIHVuYmVhcmFibGUsIHNpbmNlIGhlIHNhaWQgYW5kIGRpZCBtYW55IHRoaW5ncyB0aGF0IHdlcmUgaW52aWRpb3VzIGFuZCBpbnN1bHRpbmcgdG8gQ2Flc2FyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaW5zdGFuY2UsIHdoZW4gdGhlIHNvbGRpZXJzIGhhZCB0aGUgb2xkZXN0IGFuZCB3b3JzdCBncmFpbiBtZWFzdXJlZCBvdXQgdG8gdGhlbSwgaGUgYmFkZSB0aGVtIHB1dCB1cCB3aXRoIGl0IGFuZCBiZSBjb250ZW50LCBzaW5jZSB0aGV5IHdlcmUgZWF0aW5nIHdoYXQgYmVsb25nZWQgdG8gb3RoZXJzOyBhbmQgYXQgdGhlIHN0YXRlIHN1cHBlcnMgaGUgdXNlZCB3b29kZW4gYW5kIGVhcnRoZW4gZGlzaGVzLCBvbiB0aGUgZ3JvdW5kIHRoYXQgQ2Flc2FyIGhhZCB0YWtlbiBhbGwgdGhlIGdvbGQgYW5kIHNpbHZlciB3YXJlIGluIHBheW1lbnQgb2YgYSBkZWJ0LiBGb3IgdGhlIGZhdGhlciBvZiB0aGUgcHJlc2VudCBraW5nIG93ZWQgQ2Flc2FyIHNldmVudGVlbiBtaWxsaW9uIGZpdmUgaHVuZHJlZCB0aG91c2FuZCBkcmFjaG1hcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5EdXJpbmcgQ2Flc2FyJ3MgY29uc3Vsc2hpcCAoNTkgQi5DLikgUHRvbGVteSBBdWxldGVzIHdhcyBkZWNsYXJlZCBhIGZyaWVuZCBhbmQgYWxseSBvZiB0aGUgUm9tYW5zLiBUbyBzZWN1cmUgdGhpcyBob25vdXIgaGUgYm90aCBnYXZlIGFuZCBwcm9taXNlZCBtb25leSB0byB0aGUgc3RhdGUuPC9ub3RlPiBvZiB3aGljaCBDYWVzYXIgaGFkIGZvcm1lcmx5IHJlbWl0dGVkIGEgcGFydCB0byBoaXMgY2hpbGRyZW4sIGJ1dCBub3cgZGVtYW5kZWQgcGF5bWVudCBvZiB0ZW4gbWlsbGlvbnMgZm9yIHRoZSBzdXBwb3J0IG9mIGhpcyBhcm15LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCBQb3RoZWludXMgYmFkZSBoaW0gZ28gYXdheSBub3cgYW5kIGF0dGVuZCB0byBoaXMgZ3JlYXQgYWZmYWlycywgYXNzdXJpbmcgaGltIHRoYXQgbGF0ZXIgaGUgd291bGQgZ2V0IGhpcyBtb25leSB3aXRoIHRoYW5rcywgQ2Flc2FyIHJlcGxpZWQgdGhhdCBoZSBoYWQgbm8gbmVlZCB3aGF0ZXZlciBvZiBFZ3lwdGlhbnMgYXMgYWR2aXNlcnMsIGFuZCBzZWNyZXRseSBzZW50IGZvciBDbGVvcGF0cmEgZnJvbSB0aGUgY291bnRyeS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['48.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGZvciB0aGUgd2FyIGluIEVneXB0LCBzb21lIHNheSB0aGF0IGl0IHdhcyBub3QgbmVjZXNzYXJ5LCBidXQgZHVlIHRvIENhZXNhcidzIHBhc3Npb24gZm9yIENsZW9wYXRyYSwgYW5kIHRoYXQgaXQgd2FzIGluZ2xvcmlvdXMgYW5kIGZ1bGwgb2YgcGVyaWwgZm9yIGhpbS4gQnV0IG90aGVycyBibGFtZSB0aGUga2luZydzIHBhcnR5IGZvciBpdCwgYW5kIGVzcGVjaWFsbHkgdGhlIGV1bnVjaCBQb3RoZWludXMsIHdobyBoYWQgbW9zdCBpbmZsdWVuY2UgYXQgY291cnQsPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFBvbXAuIDc3LjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Qb21wZXk8L3RpdGxlPiwgbHh4dmlpLiAyPC9iaWJsPi48L25vdGU+IGFuZCBoYWQgcmVjZW50bHkga2lsbGVkIFBvbXBleTsgaGUgaGFkIGFsc28gZHJpdmVuIENsZW9wYXRyYSBmcm9tIHRoZSBjb3VudHJ5LCBhbmQgd2FzIG5vdyBzZWNyZXRseSBwbG90dGluZyBhZ2FpbnN0IENhZXNhci4gT24gdGhpcyBhY2NvdW50IHRoZXkgc2F5IHRoYXQgZnJvbSB0aGlzIHRpbWUgb24gQ2Flc2FyIHBhc3NlZCB3aG9sZSBuaWdodHMgYXQgZHJpbmtpbmcgcGFydGllcyBpbiBvcmRlciB0byBwcm90ZWN0IGhpbXNlbGYuIEJ1dCBpbiBoaXMgb3BlbiBhY3RzIGFsc28gUG90aGVpbnVzIHdhcyB1bmJlYXJhYmxlLCBzaW5jZSBoZSBzYWlkIGFuZCBkaWQgbWFueSB0aGluZ3MgdGhhdCB3ZXJlIGludmlkaW91cyBhbmQgaW5zdWx0aW5nIHRvIENhZXNhci4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQb21wLiA3Ny4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4eHZpaS4gMjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UG9tcGV5PC90aXRsZT4sIGx4eHZpaS4gMjwvdHJhbnNsYXRpb24+"
translation['48.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBpbnN0YW5jZSwgd2hlbiB0aGUgc29sZGllcnMgaGFkIHRoZSBvbGRlc3QgYW5kIHdvcnN0IGdyYWluIG1lYXN1cmVkIG91dCB0byB0aGVtLCBoZSBiYWRlIHRoZW0gcHV0IHVwIHdpdGggaXQgYW5kIGJlIGNvbnRlbnQsIHNpbmNlIHRoZXkgd2VyZSBlYXRpbmcgd2hhdCBiZWxvbmdlZCB0byBvdGhlcnM7IGFuZCBhdCB0aGUgc3RhdGUgc3VwcGVycyBoZSB1c2VkIHdvb2RlbiBhbmQgZWFydGhlbiBkaXNoZXMsIG9uIHRoZSBncm91bmQgdGhhdCBDYWVzYXIgaGFkIHRha2VuIGFsbCB0aGUgZ29sZCBhbmQgc2lsdmVyIHdhcmUgaW4gcGF5bWVudCBvZiBhIGRlYnQuIEZvciB0aGUgZmF0aGVyIG9mIHRoZSBwcmVzZW50IGtpbmcgb3dlZCBDYWVzYXIgc2V2ZW50ZWVuIG1pbGxpb24gZml2ZSBodW5kcmVkIHRob3VzYW5kIGRyYWNobWFzLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+RHVyaW5nIENhZXNhcidzIGNvbnN1bHNoaXAgKDU5IEIuQy4pIFB0b2xlbXkgQXVsZXRlcyB3YXMgZGVjbGFyZWQgYSBmcmllbmQgYW5kIGFsbHkgb2YgdGhlIFJvbWFucy4gVG8gc2VjdXJlIHRoaXMgaG9ub3VyIGhlIGJvdGggZ2F2ZSBhbmQgcHJvbWlzZWQgbW9uZXkgdG8gdGhlIHN0YXRlLjwvbm90ZT4gb2Ygd2hpY2ggQ2Flc2FyIGhhZCBmb3JtZXJseSByZW1pdHRlZCBhIHBhcnQgdG8gaGlzIGNoaWxkcmVuLCBidXQgbm93IGRlbWFuZGVkIHBheW1lbnQgb2YgdGVuIG1pbGxpb25zIGZvciB0aGUgc3VwcG9ydCBvZiBoaXMgYXJteS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['48.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIFBvdGhlaW51cyBiYWRlIGhpbSBnbyBhd2F5IG5vdyBhbmQgYXR0ZW5kIHRvIGhpcyBncmVhdCBhZmZhaXJzLCBhc3N1cmluZyBoaW0gdGhhdCBsYXRlciBoZSB3b3VsZCBnZXQgaGlzIG1vbmV5IHdpdGggdGhhbmtzLCBDYWVzYXIgcmVwbGllZCB0aGF0IGhlIGhhZCBubyBuZWVkIHdoYXRldmVyIG9mIEVneXB0aWFucyBhcyBhZHZpc2VycywgYW5kIHNlY3JldGx5IHNlbnQgZm9yIENsZW9wYXRyYSBmcm9tIHRoZSBjb3VudHJ5LjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlNvIENsZW9wYXRyYSwgdGFraW5nIG9ubHkgQXBvbGxvZG9ydXMgdGhlIFNpY2lsaWFuIGZyb20gYW1vbmcgaGVyIGZyaWVuZHMsIGVtYmFya2VkIGluIGEgbGl0dGxlIHNraWZmIGFuZCBsYW5kZWQgYXQgdGhlIHBhbGFjZSB3aGVuIGl0IHdhcyBhbHJlYWR5IGdldHRpbmcgZGFyazsgYW5kIGFzIGl0IHdhcyBpbXBvc3NpYmxlIHRvIGVzY2FwZSBub3RpY2Ugb3RoZXJ3aXNlLCBzaGUgc3RyZXRjaGVkIGhlcnNlbGYgYXQgZnVsbCBsZW5ndGggaW5zaWRlIGEgYmVkLXNhY2ssIHdoaWxlIEFwb2xsb2RvcnVzIHRpZWQgdGhlIGJlZHNhY2sgdXAgd2l0aCBhIGNvcmQgYW5kIGNhcnJpZWQgaXQgaW5kb29ycyB0byBDYWVzYXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBieSB0aGlzIGRldmljZSBvZiBDbGVvcGF0cmEncywgaXQgaXMgc2FpZCwgdGhhdCBDYWVzYXIgd2FzIGZpcnN0IGNhcHRpdmF0ZWQsIGZvciBzaGUgc2hvd2VkIGhlcnNlbGYgdG8gYmUgYSBib2xkIGNvcXVldHRlLCBhbmQgc3VjY3VtYmluZyB0byB0aGUgY2hhcm0gb2YgZnVydGhlciBpbnRlcmNvdXJzZSB3aXRoIGhlciwgaGUgcmVjb25jaWxlZCBoZXIgdG8gaGVyIGJyb3RoZXIgb24gdGhlIGJhc2lzIG9mIGEgam9pbnQgc2hhcmUgd2l0aCBoaW0gaW4gdGhlIHJveWFsIHBvd2VyLiBUaGVuLCBhcyBldmVyeWJvZHkgd2FzIGZlYXN0aW5nIHRvIGNlbGVicmF0ZSB0aGUgcmVjb25jaWxpYXRpb24sIGEgc2xhdmUgb2YgQ2Flc2FyJ3MsIGhpcyBiYXJiZXIsIHdobyBsZWZ0IG5vdGhpbmcgdW5zY3J1dGluaXplZCwgb3dpbmcgdG8gYSB0aW1pZGl0eSBpbiB3aGljaCBoZSBoYWQgbm8gZXF1YWwsIGJ1dCBrZXB0IGhpcyBlYXJzIG9wZW4gYW5kIHdhcyBoZXJlLCB0aGVyZSwgYW5kIGV2ZXJ5d2hlcmUsIHBlcmNlaXZlZCB0aGF0IEFjaGlsbGFzIHRoZSBnZW5lcmFsIGFuZCBQb3RoZWludXMgdGhlIGV1bnVjaCB3ZXJlIGhhdGNoaW5nIGEgcGxvdCBhZ2FpbnN0IENhZXNhci4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgQ2Flc2FyIGhhZCBmb3VuZCB0aGVtIG91dCwgaGUgc2V0IGEgZ3VhcmQgYWJvdXQgdGhlIGJhbnF1ZXRpbmctaGFsbCwgYW5kIHB1dCBQb3RoZWludXMgdG8gZGVhdGg7IEFjaGlsbGFzLCBob3dldmVyLCBlc2NhcGVkIHRvIGhpcyBjYW1wLCBhbmQgcmFpc2VkIGFib3V0IENhZXNhciBhIHdhciBncmlldm91cyBhbmQgZGlmZmljdWx0IGZvciBvbmUgd2hvIHdhcyBkZWZlbmRpbmcgaGltc2VsZiB3aXRoIHNvIGZldyBmb2xsb3dlcnMgYWdhaW5zdCBzbyBsYXJnZSBhIGNpdHkgYW5kIGFybXkuIEluIHRoaXMgd2FyLCB0byBiZWdpbiB3aXRoLCBDYWVzYXIgZW5jb3VudGVyZWQgdGhlIHBlcmlsIG9mIGJlaW5nIHNodXQgb2ZmIGZyb20gd2F0ZXIsIHNpbmNlIHRoZSBjYW5hbHMgd2VyZSBkYW1tZWQgdXAgYnkgdGhlIGVuZW15OyBpbiB0aGUgc2Vjb25kIHBsYWNlLCB3aGVuIHRoZSBlbmVteSB0cmllZCB0byBjdXQgb2ZmIGhpcyBmbGVldCwgaGUgd2FzIGZvcmNlZCB0byByZXBlbCB0aGUgZGFuZ2VyIGJ5IHVzaW5nIGZpcmUsIGFuZCB0aGlzIHNwcmVhZCBmcm9tIHRoZSBkb2NreWFyZHMgYW5kIGRlc3Ryb3llZCB0aGUgZ3JlYXQgbGlicmFyeTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBNdXNldW0sIGZvdW5kZWQgYnkgdGhlIGZpcnN0IFB0b2xlbXkgKG9iLiAyODMgQi5DLikuIFRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgbGlicmFyeSBjYW4gaGF2ZSBiZWVuIG9ubHkgcGFydGlhbC48L25vdGU+OyAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5hbmQgdGhpcmRseSwgd2hlbiBhIGJhdHRsZSBhcm9zZSBhdCBQaGFyb3MsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QW4gaXNsYW5kIG9mZiBBbGV4YW5kcmlhLCBjb25uZWN0ZWQgd2l0aCB0aGUgbWFpbmxhbmQgYnkgYSBtb2xlLCBvciBjYXVzZXdheSwgd2hpY2ggZGl2aWRlZCB0aGUgaGFyYm91ciBpbnRvIHR3byBwYXJ0cy48L25vdGU+IGhlIHNwcmFuZyBmcm9tIHRoZSBtb2xlIGludG8gYSBzbWFsbCBib2F0IGFuZCB0cmllZCB0byBnbyB0byB0aGUgYWlkIG9mIGhpcyBtZW4gaW4gdGhlaXIgc3RydWdnbGUsIGJ1dCB0aGUgRWd5cHRpYW5zIHNhaWxlZCB1cCBhZ2FpbnN0IGhpbSBmcm9tIGV2ZXJ5IHNpZGUsIHNvIHRoYXQgaGUgdGhyZXcgaGltc2VsZiBpbnRvIHRoZSBzZWEgYW5kIHdpdGggZ3JlYXQgZGlmZmljdWx0eSBlc2NhcGVkIGJ5IHN3aW1taW5nLiBBdCB0aGlzIHRpbWUsIHRvbywgaXQgaXMgc2FpZCB0aGF0IGhlIHdhcyBob2xkaW5nIG1hbnkgcGFwZXJzIGluIGhpcyBoYW5kIGFuZCB3b3VsZCBub3QgbGV0IHRoZW0gZ28sIHRob3VnaCBtaXNzaWxlcyB3ZXJlIGZseWluZyBhdCBoaW0gYW5kIGhlIHdhcyBpbW1lcnNlZCBpbiB0aGUgc2VhLCBidXQgaGVsZCB0aGVtIGFib3ZlIHdhdGVyIHdpdGggb25lIGhhbmQgYW5kIHN3YW0gd2l0aCB0aGUgb3RoZXI7IGhpcyBsaXR0bGUgYm9hdCBoYWQgYmVlbiBzdW5rIGF0IHRoZSBvdXRzZXQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJELkMuIDQyLjQwIj5EaW8gQ2Fzc2l1cyB4bGlpLiA0MDwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZmluYWxseSwgYWZ0ZXIgdGhlIGtpbmcgaGFkIGdvbmUgYXdheSB0byB0aGUgZW5lbXksIGhlIG1hcmNoZWQgYWdhaW5zdCBoaW0gYW5kIGNvbnF1ZXJlZCBoaW0gaW4gYSBiYXR0bGUgd2hlcmUgbWFueSBmZWxsIGFuZCB0aGUga2luZyBoaW1zZWxmIGRpc2FwcGVhcmVkLiBUaGVuLCBsZWF2aW5nIENsZW9wYXRyYSBvbiB0aGUgdGhyb25lIG9mIEVneXB0IChhIGxpdHRsZSBsYXRlciBzaGUgaGFkIGEgc29uIGJ5IGhpbSB3aG9tIHRoZSBBbGV4YW5kcmlhbnMgY2FsbGVkIENhZXNhcmlvbiksIGhlIHNldCBvdXQgZm9yIFN5cmlhLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['49.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gQ2xlb3BhdHJhLCB0YWtpbmcgb25seSBBcG9sbG9kb3J1cyB0aGUgU2ljaWxpYW4gZnJvbSBhbW9uZyBoZXIgZnJpZW5kcywgZW1iYXJrZWQgaW4gYSBsaXR0bGUgc2tpZmYgYW5kIGxhbmRlZCBhdCB0aGUgcGFsYWNlIHdoZW4gaXQgd2FzIGFscmVhZHkgZ2V0dGluZyBkYXJrOyBhbmQgYXMgaXQgd2FzIGltcG9zc2libGUgdG8gZXNjYXBlIG5vdGljZSBvdGhlcndpc2UsIHNoZSBzdHJldGNoZWQgaGVyc2VsZiBhdCBmdWxsIGxlbmd0aCBpbnNpZGUgYSBiZWQtc2Fjaywgd2hpbGUgQXBvbGxvZG9ydXMgdGllZCB0aGUgYmVkc2FjayB1cCB3aXRoIGEgY29yZCBhbmQgY2FycmllZCBpdCBpbmRvb3JzIHRvIENhZXNhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['49.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBieSB0aGlzIGRldmljZSBvZiBDbGVvcGF0cmEncywgaXQgaXMgc2FpZCwgdGhhdCBDYWVzYXIgd2FzIGZpcnN0IGNhcHRpdmF0ZWQsIGZvciBzaGUgc2hvd2VkIGhlcnNlbGYgdG8gYmUgYSBib2xkIGNvcXVldHRlLCBhbmQgc3VjY3VtYmluZyB0byB0aGUgY2hhcm0gb2YgZnVydGhlciBpbnRlcmNvdXJzZSB3aXRoIGhlciwgaGUgcmVjb25jaWxlZCBoZXIgdG8gaGVyIGJyb3RoZXIgb24gdGhlIGJhc2lzIG9mIGEgam9pbnQgc2hhcmUgd2l0aCBoaW0gaW4gdGhlIHJveWFsIHBvd2VyLiBUaGVuLCBhcyBldmVyeWJvZHkgd2FzIGZlYXN0aW5nIHRvIGNlbGVicmF0ZSB0aGUgcmVjb25jaWxpYXRpb24sIGEgc2xhdmUgb2YgQ2Flc2FyJ3MsIGhpcyBiYXJiZXIsIHdobyBsZWZ0IG5vdGhpbmcgdW5zY3J1dGluaXplZCwgb3dpbmcgdG8gYSB0aW1pZGl0eSBpbiB3aGljaCBoZSBoYWQgbm8gZXF1YWwsIGJ1dCBrZXB0IGhpcyBlYXJzIG9wZW4gYW5kIHdhcyBoZXJlLCB0aGVyZSwgYW5kIGV2ZXJ5d2hlcmUsIHBlcmNlaXZlZCB0aGF0IEFjaGlsbGFzIHRoZSBnZW5lcmFsIGFuZCBQb3RoZWludXMgdGhlIGV1bnVjaCB3ZXJlIGhhdGNoaW5nIGEgcGxvdCBhZ2FpbnN0IENhZXNhci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['49.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIENhZXNhciBoYWQgZm91bmQgdGhlbSBvdXQsIGhlIHNldCBhIGd1YXJkIGFib3V0IHRoZSBiYW5xdWV0aW5nLWhhbGwsIGFuZCBwdXQgUG90aGVpbnVzIHRvIGRlYXRoOyBBY2hpbGxhcywgaG93ZXZlciwgZXNjYXBlZCB0byBoaXMgY2FtcCwgYW5kIHJhaXNlZCBhYm91dCBDYWVzYXIgYSB3YXIgZ3JpZXZvdXMgYW5kIGRpZmZpY3VsdCBmb3Igb25lIHdobyB3YXMgZGVmZW5kaW5nIGhpbXNlbGYgd2l0aCBzbyBmZXcgZm9sbG93ZXJzIGFnYWluc3Qgc28gbGFyZ2UgYSBjaXR5IGFuZCBhcm15LiBJbiB0aGlzIHdhciwgdG8gYmVnaW4gd2l0aCwgQ2Flc2FyIGVuY291bnRlcmVkIHRoZSBwZXJpbCBvZiBiZWluZyBzaHV0IG9mZiBmcm9tIHdhdGVyLCBzaW5jZSB0aGUgY2FuYWxzIHdlcmUgZGFtbWVkIHVwIGJ5IHRoZSBlbmVteTsgaW4gdGhlIHNlY29uZCBwbGFjZSwgd2hlbiB0aGUgZW5lbXkgdHJpZWQgdG8gY3V0IG9mZiBoaXMgZmxlZXQsIGhlIHdhcyBmb3JjZWQgdG8gcmVwZWwgdGhlIGRhbmdlciBieSB1c2luZyBmaXJlLCBhbmQgdGhpcyBzcHJlYWQgZnJvbSB0aGUgZG9ja3lhcmRzIGFuZCBkZXN0cm95ZWQgdGhlIGdyZWF0IGxpYnJhcnk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIHRoZSBNdXNldW0sIGZvdW5kZWQgYnkgdGhlIGZpcnN0IFB0b2xlbXkgKG9iLiAyODMgQi5DLikuIFRoZSBkZXN0cnVjdGlvbiBvZiB0aGUgbGlicmFyeSBjYW4gaGF2ZSBiZWVuIG9ubHkgcGFydGlhbC48L25vdGU+OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['49.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGlyZGx5LCB3aGVuIGEgYmF0dGxlIGFyb3NlIGF0IFBoYXJvcyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFuIGlzbGFuZCBvZmYgQWxleGFuZHJpYSwgY29ubmVjdGVkIHdpdGggdGhlIG1haW5sYW5kIGJ5IGEgbW9sZSwgb3IgY2F1c2V3YXksIHdoaWNoIGRpdmlkZWQgdGhlIGhhcmJvdXIgaW50byB0d28gcGFydHMuPC9ub3RlPiBoZSBzcHJhbmcgZnJvbSB0aGUgbW9sZSBpbnRvIGEgc21hbGwgYm9hdCBhbmQgdHJpZWQgdG8gZ28gdG8gdGhlIGFpZCBvZiBoaXMgbWVuIGluIHRoZWlyIHN0cnVnZ2xlLCBidXQgdGhlIEVneXB0aWFucyBzYWlsZWQgdXAgYWdhaW5zdCBoaW0gZnJvbSBldmVyeSBzaWRlLCBzbyB0aGF0IGhlIHRocmV3IGhpbXNlbGYgaW50byB0aGUgc2VhIGFuZCB3aXRoIGdyZWF0IGRpZmZpY3VsdHkgZXNjYXBlZCBieSBzd2ltbWluZy4gQXQgdGhpcyB0aW1lLCB0b28sIGl0IGlzIHNhaWQgdGhhdCBoZSB3YXMgaG9sZGluZyBtYW55IHBhcGVycyBpbiBoaXMgaGFuZCBhbmQgd291bGQgbm90IGxldCB0aGVtIGdvLCB0aG91Z2ggbWlzc2lsZXMgd2VyZSBmbHlpbmcgYXQgaGltIGFuZCBoZSB3YXMgaW1tZXJzZWQgaW4gdGhlIHNlYSwgYnV0IGhlbGQgdGhlbSBhYm92ZSB3YXRlciB3aXRoIG9uZSBoYW5kIGFuZCBzd2FtIHdpdGggdGhlIG90aGVyOyBoaXMgbGl0dGxlIGJvYXQgaGFkIGJlZW4gc3VuayBhdCB0aGUgb3V0c2V0Ljxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkQuQy4gNDIuNDAiPkRpbyBDYXNzaXVzIHhsaWkuIDQwPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iRC5DLiA0Mi40MCI+RGlvIENhc3NpdXMgeGxpaS4gNDA8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['49.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBmaW5hbGx5LCBhZnRlciB0aGUga2luZyBoYWQgZ29uZSBhd2F5IHRvIHRoZSBlbmVteSwgaGUgbWFyY2hlZCBhZ2FpbnN0IGhpbSBhbmQgY29ucXVlcmVkIGhpbSBpbiBhIGJhdHRsZSB3aGVyZSBtYW55IGZlbGwgYW5kIHRoZSBraW5nIGhpbXNlbGYgZGlzYXBwZWFyZWQuIFRoZW4sIGxlYXZpbmcgQ2xlb3BhdHJhIG9uIHRoZSB0aHJvbmUgb2YgRWd5cHQgKGEgbGl0dGxlIGxhdGVyIHNoZSBoYWQgYSBzb24gYnkgaGltIHdob20gdGhlIEFsZXhhbmRyaWFucyBjYWxsZWQgQ2Flc2FyaW9uKSwgaGUgc2V0IG91dCBmb3IgU3lyaWEuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gbGVhdmluZyB0aGF0IGNvdW50cnkgYW5kIHRyYXZlcnNpbmcgQXNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBKdWx5IG9mIDQ3IEIuQy48L25vdGU+IGhlIGxlYXJuZWQgdGhhdCBEb21pdGl1cyBoYWQgYmVlbiBkZWZlYXRlZCBieSBQaGFybmFjZXMgdGhlIHNvbiBvZiBNaXRocmlkYXRlcyBhbmQgaGFkIGZsZWQgZnJvbSBQb250dXMgd2l0aCBhIGZldyBmb2xsb3dlcnM7IGFsc28gdGhhdCBQaGFybmFjZXMsIHVzaW5nIGhpcyB2aWN0b3J5IHdpdGhvdXQgc3RpbnQsIGFuZCBvY2N1cHlpbmcgQml0aHluaWEgYW5kIENhcHBhZG9jaWEsIHdhcyBhaW1pbmcgdG8gc2VjdXJlIHRoZSBjb3VudHJ5IGNhbGxlZCBMZXNzZXIgQXJtZW5pYSwgYW5kIHdhcyByb3VzaW5nIHRvIHJldm9sdCBhbGwgdGhlIHByaW5jZXMgYW5kIHRldHJhcmNocyB0aGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgb25jZSwgdGhlcmVmb3JlLCBDYWVzYXIgbWFyY2hlZCBhZ2FpbnN0IGhpbSB3aXRoIHRocmVlIGxlZ2lvbnMsIGZvdWdodCBhIGdyZWF0IGJhdHRsZSB3aXRoIGhpbSBuZWFyIHRoZSBjaXR5IG9mIFplbGEsIGRyb3ZlIGhpbSBpbiBmbGlnaHQgb3V0IG9mIFBvbnR1cywgYW5kIGFubmloaWxhdGVkIGhpcyBhcm15LiBJbiBhbm5vdW5jaW5nIHRoZSBzd2lmdG5lc3MgYW5kIGZpZXJjZW5lc3Mgb2YgdGhpcyBiYXR0bGUgdG8gb25lIG9mIGhpcyBmcmllbmRzIGF0IFJvbWUsIEFtYW50aXVzLCBDYWVzYXIgd3JvdGUgdGhyZWUgd29yZHMgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYW1lLCBzYXcsIGNvbnF1ZXJlZDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGxhbmc9ImxhIj5WZW5pLCB2aWRpLCB2aWNpLjwvZm9yZWlnbj4gQWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gMzciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gMzc8L2JpYmw+KSwgdGhlIHdvcmRzIHdlcmUgZGlzcGxheWVkIGluIENhZXNhcidzIFBvbnRpYyB0cml1bXBoLjwvbm90ZT4gSW4gTGF0aW4sIGhvd2V2ZXIsIHRoZSB3b3JkcyBoYXZlIHRoZSBzYW1lIGluZmxlY3Rpb25hbCBlbmRpbmcsIGFuZCBzbyBhIGJyZXZpdHkgd2hpY2ggaXMgbW9zdCBpbXByZXNzaXZlLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['50.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gbGVhdmluZyB0aGF0IGNvdW50cnkgYW5kIHRyYXZlcnNpbmcgQXNpYSw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIEp1bHkgb2YgNDcgQi5DLjwvbm90ZT4gaGUgbGVhcm5lZCB0aGF0IERvbWl0aXVzIGhhZCBiZWVuIGRlZmVhdGVkIGJ5IFBoYXJuYWNlcyB0aGUgc29uIG9mIE1pdGhyaWRhdGVzIGFuZCBoYWQgZmxlZCBmcm9tIFBvbnR1cyB3aXRoIGEgZmV3IGZvbGxvd2VyczsgYWxzbyB0aGF0IFBoYXJuYWNlcywgdXNpbmcgaGlzIHZpY3Rvcnkgd2l0aG91dCBzdGludCwgYW5kIG9jY3VweWluZyBCaXRoeW5pYSBhbmQgQ2FwcGFkb2NpYSwgd2FzIGFpbWluZyB0byBzZWN1cmUgdGhlIGNvdW50cnkgY2FsbGVkIExlc3NlciBBcm1lbmlhLCBhbmQgd2FzIHJvdXNpbmcgdG8gcmV2b2x0IGFsbCB0aGUgcHJpbmNlcyBhbmQgdGV0cmFyY2hzIHRoZXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['50.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IG9uY2UsIHRoZXJlZm9yZSwgQ2Flc2FyIG1hcmNoZWQgYWdhaW5zdCBoaW0gd2l0aCB0aHJlZSBsZWdpb25zLCBmb3VnaHQgYSBncmVhdCBiYXR0bGUgd2l0aCBoaW0gbmVhciB0aGUgY2l0eSBvZiBaZWxhLCBkcm92ZSBoaW0gaW4gZmxpZ2h0IG91dCBvZiBQb250dXMsIGFuZCBhbm5paGlsYXRlZCBoaXMgYXJteS4gSW4gYW5ub3VuY2luZyB0aGUgc3dpZnRuZXNzIGFuZCBmaWVyY2VuZXNzIG9mIHRoaXMgYmF0dGxlIHRvIG9uZSBvZiBoaXMgZnJpZW5kcyBhdCBSb21lLCBBbWFudGl1cywgQ2Flc2FyIHdyb3RlIHRocmVlIHdvcmRzIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5DYW1lLCBzYXcsIGNvbnF1ZXJlZDwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VmVuaSwgdmlkaSwgdmljaS48L2ZvcmVpZ24+IEFjY29yZGluZyB0byBTdWV0b25pdXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gMzciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiAzNzwvYmlibD4pLCB0aGUgd29yZHMgd2VyZSBkaXNwbGF5ZWQgaW4gQ2Flc2FyJ3MgUG9udGljIHRyaXVtcGguPC9ub3RlPiBJbiBMYXRpbiwgaG93ZXZlciwgdGhlIHdvcmRzIGhhdmUgdGhlIHNhbWUgaW5mbGVjdGlvbmFsIGVuZGluZywgYW5kIHNvIGEgYnJldml0eSB3aGljaCBpcyBtb3N0IGltcHJlc3NpdmUuPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+VmVuaSwgdmlkaSwgdmljaS48L2ZvcmVpZ24+IEFjY29yZGluZyB0byBTdWV0b25pdXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gMzciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiAzNzwvYmlibD4pLCB0aGUgd29yZHMgd2VyZSBkaXNwbGF5ZWQgaW4gQ2Flc2FyJ3MgUG9udGljIHRyaXVtcGguPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RGl2LiBKdWwuPC90aXRsZT4gMzc8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzLCBoZSBjcm9zc2VkIHRvIEl0YWx5IGFuZCB3ZW50IHVwIHRvIFJvbWUsIGF0IHRoZSBjbG9zZSBvZiB0aGUgeWVhciBmb3Igd2hpY2ggaGUgaGFkIGEgc2Vjb25kIHRpbWUgYmVlbiBjaG9zZW4gZGljdGF0b3IsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNlbmF0ZSBuYW1lZCBDYWVzYXIgRGljdGF0b3IgZm9yIHRoZSB5ZWFyIDQ3IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBiYXR0bGUgYXQgUGhhcnNhbHVzLjwvbm90ZT4gdGhvdWdoIHRoYXQgb2ZmaWNlIGhhZCBuZXZlciBiZWZvcmUgYmVlbiBmb3IgYSB3aG9sZSB5ZWFyOyB0aGVuIGZvciB0aGUgZm9sbG93aW5nIHllYXIgaGUgd2FzIHByb2NsYWltZWQgY29uc3VsLiBNZW4gc3Bva2UgaWxsIG9mIGhpbSBiZWNhdXNlLCBhZnRlciBoaXMgc29sZGllcnMgaGFkIG11dGluaWVkIGFuZCBraWxsZWQgdHdvIG1lbiBvZiBwcmFldG9yaWFuIHJhbmssIEdhbGJhIGFuZCBDb3Njb25pdXMsIGhlIGNlbnN1cmVkIHRoZW0gb25seSBzbyBmYXIgYXMgdG8gY2FsbCB0aGVtIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Y2l0aXplbnM8L3E+IHdoZW4gaGUgYWRkcmVzc2VkIHRoZW0sIGluc3RlYWQgb2YgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5zb2xkaWVycyw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjEzLjkzIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZT5CLiBDLjwvdGl0bGU+IGlpLiA5MzwvYmlibD4uPC9ub3RlPiBhbmQgdGhlbiBnYXZlIGVhY2ggbWFuIGEgdGhvdXNhbmQgZHJhY2htYXMgYW5kIG11Y2ggYWxsb3R0ZWQgbGFuZCBpbiBJdGFseS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SGUgd2FzIGFsc28gY2FsdW1uaWF0ZWQgZm9yIHRoZSBtYWRuZXNzIG9mIERvbGFiZWxsYSwgdGhlIGdyZWVkIG9mIEFtYW50aXVzLCB0aGUgZHJ1bmtlbm5lc3Mgb2YgQW50b255LCBhbmQgZm9yIHRoZSBmYWN0IHRoYXQgQ29yZmluaXVzIGJ1aWx0IG92ZXIgYW5kIHJlZnVybmlzaGVkIHRoZSBob3VzZSBvZiBQb21wZXkgb24gdGhlIGdyb3VuZCB0aGF0IGl0IHdhcyBub3QgZ29vZCBlbm91Z2ggZm9yIGhpbS4gRm9yIGF0IGFsbCB0aGVzZSB0aGluZ3MgdGhlIFJvbWFucyB3ZXJlIGRpc3BsZWFzZWQuIEJ1dCBvd2luZyB0byB0aGUgcG9saXRpY2FsIHNpdHVhdGlvbiwgdGhvdWdoIENhZXNhciB3YXMgbm90IGlnbm9yYW50IG9mIHRoZXNlIHRoaW5ncyBhbmQgZGlkIG5vdCBsaWtlIHRoZW0sIGhlIHdhcyBjb21wZWxsZWQgdG8gbWFrZSB1c2Ugb2Ygc3VjaCBhc3Npc3RhbnRzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['51.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgY3Jvc3NlZCB0byBJdGFseSBhbmQgd2VudCB1cCB0byBSb21lLCBhdCB0aGUgY2xvc2Ugb2YgdGhlIHllYXIgZm9yIHdoaWNoIGhlIGhhZCBhIHNlY29uZCB0aW1lIGJlZW4gY2hvc2VuIGRpY3RhdG9yLDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIHNlbmF0ZSBuYW1lZCBDYWVzYXIgRGljdGF0b3IgZm9yIHRoZSB5ZWFyIDQ3IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBiYXR0bGUgYXQgUGhhcnNhbHVzLjwvbm90ZT4gdGhvdWdoIHRoYXQgb2ZmaWNlIGhhZCBuZXZlciBiZWZvcmUgYmVlbiBmb3IgYSB3aG9sZSB5ZWFyOyB0aGVuIGZvciB0aGUgZm9sbG93aW5nIHllYXIgaGUgd2FzIHByb2NsYWltZWQgY29uc3VsLiBNZW4gc3Bva2UgaWxsIG9mIGhpbSBiZWNhdXNlLCBhZnRlciBoaXMgc29sZGllcnMgaGFkIG11dGluaWVkIGFuZCBraWxsZWQgdHdvIG1lbiBvZiBwcmFldG9yaWFuIHJhbmssIEdhbGJhIGFuZCBDb3Njb25pdXMsIGhlIGNlbnN1cmVkIHRoZW0gb25seSBzbyBmYXIgYXMgdG8gY2FsbCB0aGVtIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jaXRpemVuczwvcT4gd2hlbiBoZSBhZGRyZXNzZWQgdGhlbSwgaW5zdGVhZCBvZiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+c29sZGllcnMsPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJBcHAuIEJDIDIuMTMuOTMiIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Qi4gQy48L3RpdGxlPiBpaS4gOTM8L2JpYmw+Ljwvbm90ZT4gYW5kIHRoZW4gZ2F2ZSBlYWNoIG1hbiBhIHRob3VzYW5kIGRyYWNobWFzIGFuZCBtdWNoIGFsbG90dGVkIGxhbmQgaW4gSXRhbHkuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjEzLjkzIiB2YWxpZD0ieWVzIj5BcHBpYW4sIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkIuIEMuPC90aXRsZT4gaWkuIDkzPC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpLiA5MzwvdHJhbnNsYXRpb24+"
translation['51.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhlIHdhcyBhbHNvIGNhbHVtbmlhdGVkIGZvciB0aGUgbWFkbmVzcyBvZiBEb2xhYmVsbGEsIHRoZSBncmVlZCBvZiBBbWFudGl1cywgdGhlIGRydW5rZW5uZXNzIG9mIEFudG9ueSwgYW5kIGZvciB0aGUgZmFjdCB0aGF0IENvcmZpbml1cyBidWlsdCBvdmVyIGFuZCByZWZ1cm5pc2hlZCB0aGUgaG91c2Ugb2YgUG9tcGV5IG9uIHRoZSBncm91bmQgdGhhdCBpdCB3YXMgbm90IGdvb2QgZW5vdWdoIGZvciBoaW0uIEZvciBhdCBhbGwgdGhlc2UgdGhpbmdzIHRoZSBSb21hbnMgd2VyZSBkaXNwbGVhc2VkLiBCdXQgb3dpbmcgdG8gdGhlIHBvbGl0aWNhbCBzaXR1YXRpb24sIHRob3VnaCBDYWVzYXIgd2FzIG5vdCBpZ25vcmFudCBvZiB0aGVzZSB0aGluZ3MgYW5kIGRpZCBub3QgbGlrZSB0aGVtLCBoZSB3YXMgY29tcGVsbGVkIHRvIG1ha2UgdXNlIG9mIHN1Y2ggYXNzaXN0YW50cy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgYmF0dGxlIGF0IFBoYXJzYWx1cywgQ2F0byBhbmQgU2NpcGlvIG1hZGUgdGhlaXIgZXNjYXBlIHRvIEFmcmljYSwgYW5kIHRoZXJlLCB3aXRoIHRoZSBhaWQgb2YgS2luZyBKdWJhLCBjb2xsZWN0ZWQgY29uc2lkZXJhYmxlIGZvcmNlcy4gQ2Flc2FyIHRoZXJlZm9yZSByZXNvbHZlZCB0byBtYWtlIGFuIGV4cGVkaXRpb24gYWdhaW5zdCB0aGVtLiBTbywgYWJvdXQgdGhlIHRpbWUgb2YgdGhlIHdpbnRlciBzb2xzdGljZSwgaGUgY3Jvc3NlZCBpbnRvIFNpY2lseSwgYW5kIHdpc2hpbmcgdG8gY3V0IG9mZiBhdCBvbmNlIGluIHRoZSBtaW5kcyBvZiBoaXMgb2ZmaWNlcnMgYWxsIGhvcGUgb2YgZGVsYXlpbmcgdGhlcmUgYW5kIHdhc3RpbmcgdGltZSwgaGUgcGl0Y2hlZCBoaXMgb3duIHRlbnQgb24gdGhlIHNlYS1iZWFjaC4gV2hlbiBhIGZhdm91cmluZyB3aW5kIGFyb3NlLCBoZSBlbWJhcmtlZCBhbmQgcHV0IHRvIHNlYSB3aXRoIHRocmVlIHRob3VzYW5kIGluZmFudHJ5IGFuZCBhIGZldyBob3JzZW1lbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiwgYWZ0ZXIgbGFuZGluZyB0aGVzZSB1bm9ic2VydmVkLCBoZSBwdXQgdG8gc2VhIGFnYWluLCBiZWluZyBmdWxsIG9mIGZlYXJzIGZvciB0aGUgbGFyZ2VyIHBhcnQgb2YgaGlzIGZvcmNlLCBhbmQgbWVldGluZyB0aGVtIGFmdGVyIHRoZXkgd2VyZSBhbHJlYWR5IGF0IHNlYSwgaGUgY29uZHVjdGVkIGFsbCBpbnRvIGNhbXAuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['52.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlIGJhdHRsZSBhdCBQaGFyc2FsdXMsIENhdG8gYW5kIFNjaXBpbyBtYWRlIHRoZWlyIGVzY2FwZSB0byBBZnJpY2EsIGFuZCB0aGVyZSwgd2l0aCB0aGUgYWlkIG9mIEtpbmcgSnViYSwgY29sbGVjdGVkIGNvbnNpZGVyYWJsZSBmb3JjZXMuIENhZXNhciB0aGVyZWZvcmUgcmVzb2x2ZWQgdG8gbWFrZSBhbiBleHBlZGl0aW9uIGFnYWluc3QgdGhlbS4gU28sIGFib3V0IHRoZSB0aW1lIG9mIHRoZSB3aW50ZXIgc29sc3RpY2UsIGhlIGNyb3NzZWQgaW50byBTaWNpbHksIGFuZCB3aXNoaW5nIHRvIGN1dCBvZmYgYXQgb25jZSBpbiB0aGUgbWluZHMgb2YgaGlzIG9mZmljZXJzIGFsbCBob3BlIG9mIGRlbGF5aW5nIHRoZXJlIGFuZCB3YXN0aW5nIHRpbWUsIGhlIHBpdGNoZWQgaGlzIG93biB0ZW50IG9uIHRoZSBzZWEtYmVhY2guIFdoZW4gYSBmYXZvdXJpbmcgd2luZCBhcm9zZSwgaGUgZW1iYXJrZWQgYW5kIHB1dCB0byBzZWEgd2l0aCB0aHJlZSB0aG91c2FuZCBpbmZhbnRyeSBhbmQgYSBmZXcgaG9yc2VtZW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4sIGFmdGVyIGxhbmRpbmcgdGhlc2UgdW5vYnNlcnZlZCwgaGUgcHV0IHRvIHNlYSBhZ2FpbiwgYmVpbmcgZnVsbCBvZiBmZWFycyBmb3IgdGhlIGxhcmdlciBwYXJ0IG9mIGhpcyBmb3JjZSwgYW5kIG1lZXRpbmcgdGhlbSBhZnRlciB0aGV5IHdlcmUgYWxyZWFkeSBhdCBzZWEsIGhlIGNvbmR1Y3RlZCBhbGwgaW50byBjYW1wLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T24gbGVhcm5pbmcgdGhhdCB0aGUgZW5lbXkgd2VyZSBlbWJvbGRlbmVkIGJ5IGFuIGFuY2llbnQgb3JhY2xlIHRvIHRoZSBlZmZlY3QgdGhhdCBpdCB3YXMgYWx3YXlzIHRoZSBwcmVyb2dhdGl2ZSBvZiB0aGUgZmFtaWx5IG9mIHRoZSBTY2lwaW9zIHRvIGNvbnF1ZXIgaW4gQWZyaWNhLCBoZSBlaXRoZXIgZmxvdXRlZCBpbiBwbGVhc2FudHJ5IHRoZSBTY2lwaW8gd2hvIGNvbW1hbmRlZCB0aGUgZW5lbXksIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+b3IgZWxzZSB0cmllZCBpbiBnb29kIGVhcm5lc3QgdG8gYXBwcm9wcmlhdGUgdG8gaGltc2VsZiB0aGUgb21lbiwgaXQgaXMgaGFyZCB0byBzYXkgd2hpY2guIEhlIGhhZCB1bmRlciBoaW0sIG5hbWVseSwgYSBtYW4gd2hvIG90aGVyd2lzZSB3YXMgYSBjb250ZW1wdGlibGUgbm9ib2R5LCBidXQgYmVsb25nZWQgdG8gdGhlIGZhbWlseSBvZiB0aGUgQWZyaWNhbmksIGFuZCB3YXMgY2FsbGVkIFNjaXBpbyBTYWxsdXN0aW8uIFRoaXMgbWFuIENhZXNhciBwdXQgaW4gdGhlIGZvcmVmcm9udCBvZiBoaXMgYmF0dGxlcyBhcyBpZiBjb21tYW5kZXIgb2YgdGhlIGFybXksIGJlaW5nIGNvbXBlbGxlZCB0byBhdHRhY2sgdGhlIGVuZW15IGZyZXF1ZW50bHkgYW5kIHRvIGZvcmNlIHRoZSBmaWdodGluZy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZXJlIHdhcyBuZWl0aGVyIHN1ZmZpY2llbnQgZm9vZCBmb3IgaGlzIG1lbiBub3IgZm9kZGVyIGZvciBoaXMgYmVhc3RzIG9mIGJ1cmRlbiwgbmF5LCB0aGV5IHdlcmUgZm9yY2VkIHRvIGZlZWQgdGhlaXIgaG9yc2VzIG9uIHNlYS13ZWVkLCB3aGljaCB0aGV5IHdhc2hlZCBmcmVlIG9mIGl0cyBzYWx0IGFuZCBtaXhlZCB3aXRoIGEgbGl0dGxlIGdyYXNzIHRvIHN3ZWV0ZW4gaXQuIEZvciB0aGUgTnVtaWRpYW5zIHNob3dlZCB0aGVtc2VsdmVzIGV2ZXJ5d2hlcmUgaW4gZ3JlYXQgbnVtYmVycyBhbmQgc3BlZWR5LCBhbmQgY29udHJvbGxlZCB0aGUgY291bnRyeS4gSW5kZWVkLCB3aGlsZSBDYWVzYXIncyBob3JzZW1lbiB3ZXJlIG9uY2Ugb2ZmIGR1dHkgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+KGEgTGlieWFuIHdhcyBzaG93aW5nIHRoZW0gaG93IGhlIGNvdWxkIGRhbmNlIGFuZCBwbGF5IHRoZSBmbHV0ZSBhdCB0aGUgc2FtZSB0aW1lIGluIGFuIGFzdG9uaXNoaW5nIG1hbm5lciwgYW5kIHRoZXkgaGFkIGNvbW1pdHRlZCB0aGVpciBob3JzZXMgdG8gdGhlIHNsYXZlcyBhbmQgd2VyZSBzaXR0aW5nIGRlbGlnaHRlZCBvbiB0aGUgZ3JvdW5kKSwgdGhlIGVuZW15IHN1ZGRlbmx5IHN1cnJvdW5kZWQgYW5kIGF0dGFja2VkIHRoZW0sIGtpbGxlZCBzb21lIG9mIHRoZW0sIGFuZCBmb2xsb3dlZCBoYXJkIHVwb24gdGhlIGhlZWxzIG9mIHRoZSByZXN0IGFzIHRoZXkgd2VyZSBkcml2ZW4gaGVhZGxvbmcgaW50byBjYW1wLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaWYgQ2Flc2FyIGhpbXNlbGYgYW5kIHdpdGggaGltIEFzaW5pdXMgUG9sbGlvLCBoYWQgbm90IGNvbWUgZnJvbSB0aGUgcmFtcGFydHMgdG8gdGhlaXIgYWlkIGFuZCBjaGVja2VkIHRoZWlyIGZsaWdodCwgdGhlIHdhciB3b3VsZCBoYXZlIGJlZW4gYXQgYW4gZW5kLiBPbiBvbmUgb2NjYXNpb24sIHRvbywgaW4gYW5vdGhlciBiYXR0bGUsIHRoZSBlbmVteSBnb3QgdGhlIGFkdmFudGFnZSBpbiB0aGUgZW5jb3VudGVyLCBhbmQgaGVyZSBpdCBpcyBzYWlkIHRoYXQgQ2Flc2FyIHNlaXplZCBieSB0aGUgbmVjayB0aGUgZnVnaXRpdmUgc3RhbmRhcmQtYmVhcmVyLCBmYWNlZCBoaW0gYWJvdXQsIGFuZCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPllvbmRlciBpcyB0aGUgZW5lbXkuPC9xPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['52.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPm9yIGVsc2UgdHJpZWQgaW4gZ29vZCBlYXJuZXN0IHRvIGFwcHJvcHJpYXRlIHRvIGhpbXNlbGYgdGhlIG9tZW4sIGl0IGlzIGhhcmQgdG8gc2F5IHdoaWNoLiBIZSBoYWQgdW5kZXIgaGltLCBuYW1lbHksIGEgbWFuIHdobyBvdGhlcndpc2Ugd2FzIGEgY29udGVtcHRpYmxlIG5vYm9keSwgYnV0IGJlbG9uZ2VkIHRvIHRoZSBmYW1pbHkgb2YgdGhlIEFmcmljYW5pLCBhbmQgd2FzIGNhbGxlZCBTY2lwaW8gU2FsbHVzdGlvLiBUaGlzIG1hbiBDYWVzYXIgcHV0IGluIHRoZSBmb3JlZnJvbnQgb2YgaGlzIGJhdHRsZXMgYXMgaWYgY29tbWFuZGVyIG9mIHRoZSBhcm15LCBiZWluZyBjb21wZWxsZWQgdG8gYXR0YWNrIHRoZSBlbmVteSBmcmVxdWVudGx5IGFuZCB0byBmb3JjZSB0aGUgZmlnaHRpbmcuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVyZSB3YXMgbmVpdGhlciBzdWZmaWNpZW50IGZvb2QgZm9yIGhpcyBtZW4gbm9yIGZvZGRlciBmb3IgaGlzIGJlYXN0cyBvZiBidXJkZW4sIG5heSwgdGhleSB3ZXJlIGZvcmNlZCB0byBmZWVkIHRoZWlyIGhvcnNlcyBvbiBzZWEtd2VlZCwgd2hpY2ggdGhleSB3YXNoZWQgZnJlZSBvZiBpdHMgc2FsdCBhbmQgbWl4ZWQgd2l0aCBhIGxpdHRsZSBncmFzcyB0byBzd2VldGVuIGl0LiBGb3IgdGhlIE51bWlkaWFucyBzaG93ZWQgdGhlbXNlbHZlcyBldmVyeXdoZXJlIGluIGdyZWF0IG51bWJlcnMgYW5kIHNwZWVkeSwgYW5kIGNvbnRyb2xsZWQgdGhlIGNvdW50cnkuIEluZGVlZCwgd2hpbGUgQ2Flc2FyJ3MgaG9yc2VtZW4gd2VyZSBvbmNlIG9mZiBkdXR5IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['52.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPihhIExpYnlhbiB3YXMgc2hvd2luZyB0aGVtIGhvdyBoZSBjb3VsZCBkYW5jZSBhbmQgcGxheSB0aGUgZmx1dGUgYXQgdGhlIHNhbWUgdGltZSBpbiBhbiBhc3RvbmlzaGluZyBtYW5uZXIsIGFuZCB0aGV5IGhhZCBjb21taXR0ZWQgdGhlaXIgaG9yc2VzIHRvIHRoZSBzbGF2ZXMgYW5kIHdlcmUgc2l0dGluZyBkZWxpZ2h0ZWQgb24gdGhlIGdyb3VuZCksIHRoZSBlbmVteSBzdWRkZW5seSBzdXJyb3VuZGVkIGFuZCBhdHRhY2tlZCB0aGVtLCBraWxsZWQgc29tZSBvZiB0aGVtLCBhbmQgZm9sbG93ZWQgaGFyZCB1cG9uIHRoZSBoZWVscyBvZiB0aGUgcmVzdCBhcyB0aGV5IHdlcmUgZHJpdmVuIGhlYWRsb25nIGludG8gY2FtcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['52.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpZiBDYWVzYXIgaGltc2VsZiBhbmQgd2l0aCBoaW0gQXNpbml1cyBQb2xsaW8sIGhhZCBub3QgY29tZSBmcm9tIHRoZSByYW1wYXJ0cyB0byB0aGVpciBhaWQgYW5kIGNoZWNrZWQgdGhlaXIgZmxpZ2h0LCB0aGUgd2FyIHdvdWxkIGhhdmUgYmVlbiBhdCBhbiBlbmQuIE9uIG9uZSBvY2Nhc2lvbiwgdG9vLCBpbiBhbm90aGVyIGJhdHRsZSwgdGhlIGVuZW15IGdvdCB0aGUgYWR2YW50YWdlIGluIHRoZSBlbmNvdW50ZXIsIGFuZCBoZXJlIGl0IGlzIHNhaWQgdGhhdCBDYWVzYXIgc2VpemVkIGJ5IHRoZSBuZWNrIHRoZSBmdWdpdGl2ZSBzdGFuZGFyZC1iZWFyZXIsIGZhY2VkIGhpbSBhYm91dCwgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Zb25kZXIgaXMgdGhlIGVuZW15LjwvcT4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciBTY2lwaW8gd2FzIGVuY291cmFnZWQgYnkgdGhlc2UgYWR2YW50YWdlcyB0byBoYXphcmQgYSBkZWNpc2l2ZSBiYXR0bGU6IHNvLCBsZWF2aW5nIEFmcmFuaXVzIGFuZCBKdWJhIGVuY2FtcGVkIHNlcGFyYXRlbHkgYXQgYSBzaG9ydCBkaXN0YW5jZSBhcGFydCwgaGUgaGltc2VsZiBiZWdhbiBmb3J0aWZ5aW5nIGEgY2FtcCBiZXlvbmQgYSBsYWtlIG5lYXIgdGhlIGNpdHkgb2YgVGhhcHN1cywgdGhhdCBpdCBtaWdodCBzZXJ2ZSB0aGUgd2hvbGUgYXJteSBhcyBhIHBsYWNlIGZyb20gd2hpY2ggdG8gc2FsbHkgb3V0IHRvIHRoZSBiYXR0bGUsIGFuZCBhcyBhIHBsYWNlIG9mIHJlZnVnZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoaWxlIGhlIHdhcyBidXN5IHdpdGggdGhpcyBwcm9qZWN0LCBDYWVzYXIgbWFkZSBoaXMgd2F5IHdpdGggaW5jb25jZWl2YWJsZSBzcGVlZCB0aHJvdWdoIHdvb2R5IHJlZ2lvbnMgd2hpY2ggYWZmb3JkZWQgdW5rbm93biBhY2Nlc3MgdG8gdGhlIHNwb3QsIG91dGZsYW5rZWQgc29tZSBvZiB0aGUgZW5lbXksIGFuZCBhdHRhY2tlZCBvdGhlcnMgaW4gZnJvbnQuIFRoZW4sIGFmdGVyIHJvdXRpbmcgdGhlc2UsIGhlIHRvb2sgYWR2YW50YWdlIG9mIHRoZSBmYXZvdXJhYmxlIGluc3RhbnQgYW5kIG9mIHRoZSBpbXBldHVzIG9mIGZvcnR1bmUsIGFuZCB0aGVyZWJ5IGNhcHR1cmVkIHRoZSBjYW1wIG9mIEFmcmFuaXVzIGF0IHRoZSBmaXJzdCBvbnNldCwgYW5kIGF0IHRoZSBmaXJzdCBvbnNldCBzYWNrZWQgdGhlIGNhbXAgb2YgdGhlIE51bWlkaWFucywgZnJvbSB3aGljaCBKdWJhIGZsZWQuIFRodXMgaW4gYSBicmllZiBwb3J0aW9uIG9mIG9uZSBkYXkgaGUgbWFkZSBoaW1zZWxmIG1hc3RlciBvZiB0aHJlZSBjYW1wcyBhbmQgc2xldyBmaWZ0eSB0aG91c2FuZCBvZiB0aGUgZW5lbXksIHdpdGhvdXQgbG9zaW5nIGFzIG1hbnkgYXMgZmlmdHkgb2YgaGlzIG93biBtZW4uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQXByaWwgb2YgNDYgQi5DLjwvbm90ZT4KICAgICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['53.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciBTY2lwaW8gd2FzIGVuY291cmFnZWQgYnkgdGhlc2UgYWR2YW50YWdlcyB0byBoYXphcmQgYSBkZWNpc2l2ZSBiYXR0bGU6IHNvLCBsZWF2aW5nIEFmcmFuaXVzIGFuZCBKdWJhIGVuY2FtcGVkIHNlcGFyYXRlbHkgYXQgYSBzaG9ydCBkaXN0YW5jZSBhcGFydCwgaGUgaGltc2VsZiBiZWdhbiBmb3J0aWZ5aW5nIGEgY2FtcCBiZXlvbmQgYSBsYWtlIG5lYXIgdGhlIGNpdHkgb2YgVGhhcHN1cywgdGhhdCBpdCBtaWdodCBzZXJ2ZSB0aGUgd2hvbGUgYXJteSBhcyBhIHBsYWNlIGZyb20gd2hpY2ggdG8gc2FsbHkgb3V0IHRvIHRoZSBiYXR0bGUsIGFuZCBhcyBhIHBsYWNlIG9mIHJlZnVnZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['53.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGlsZSBoZSB3YXMgYnVzeSB3aXRoIHRoaXMgcHJvamVjdCwgQ2Flc2FyIG1hZGUgaGlzIHdheSB3aXRoIGluY29uY2VpdmFibGUgc3BlZWQgdGhyb3VnaCB3b29keSByZWdpb25zIHdoaWNoIGFmZm9yZGVkIHVua25vd24gYWNjZXNzIHRvIHRoZSBzcG90LCBvdXRmbGFua2VkIHNvbWUgb2YgdGhlIGVuZW15LCBhbmQgYXR0YWNrZWQgb3RoZXJzIGluIGZyb250LiBUaGVuLCBhZnRlciByb3V0aW5nIHRoZXNlLCBoZSB0b29rIGFkdmFudGFnZSBvZiB0aGUgZmF2b3VyYWJsZSBpbnN0YW50IGFuZCBvZiB0aGUgaW1wZXR1cyBvZiBmb3J0dW5lLCBhbmQgdGhlcmVieSBjYXB0dXJlZCB0aGUgY2FtcCBvZiBBZnJhbml1cyBhdCB0aGUgZmlyc3Qgb25zZXQsIGFuZCBhdCB0aGUgZmlyc3Qgb25zZXQgc2Fja2VkIHRoZSBjYW1wIG9mIHRoZSBOdW1pZGlhbnMsIGZyb20gd2hpY2ggSnViYSBmbGVkLiBUaHVzIGluIGEgYnJpZWYgcG9ydGlvbiBvZiBvbmUgZGF5IGhlIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgdGhyZWUgY2FtcHMgYW5kIHNsZXcgZmlmdHkgdGhvdXNhbmQgb2YgdGhlIGVuZW15LCB3aXRob3V0IGxvc2luZyBhcyBtYW55IGFzIGZpZnR5IG9mIGhpcyBvd24gbWVuLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gQXByaWwgb2YgNDYgQi5DLjwvbm90ZT4KICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBpcyB0aGUgYWNjb3VudCB3aGljaCBzb21lIGdpdmUgb2YgdGhlIGJhdHRsZTsgb3RoZXJzLCBob3dldmVyLCBzYXkgdGhhdCBDYWVzYXIgaGltc2VsZiB3YXMgbm90IGluIHRoZSBhY3Rpb24sIGJ1dCB0aGF0LCBhcyBoZSB3YXMgbWFyc2hhbGxpbmcgYW5kIGFycmF5aW5nIGhpcyBhcm15LCBoaXMgdXN1YWwgc2lja25lc3MgbGFpZCBob2xkIG9mIGhpbSwgYW5kIGhlLCBhdCBvbmNlIGF3YXJlIHRoYXQgaXQgd2FzIGJlZ2lubmluZywgYmVmb3JlIGhpcyBhbHJlYWR5IHdhdmVyaW5nIHNlbnNlcyB3ZXJlIGFsdG9nZXRoZXIgY29uZm91bmRlZCBhbmQgb3ZlcnBvd2VyZWQgYnkgdGhlIG1hbGFkeSwgd2FzIGNhcnJpZWQgdG8gYSBuZWlnaGJvdXJpbmcgdG93ZXIsIHdoZXJlIGhlIHN0YXllZCBxdWlldGx5IGR1cmluZyB0aGUgYmF0dGxlLiBPZiB0aGUgbWVuIG9mIGNvbnN1bGFyIGFuZCBwcmFldG9yaWFsIHJhbmsgd2hvIGVzY2FwZWQgZnJvbSB0aGUgYmF0dGxlLCBzb21lIHNsZXcgdGhlbXNlbHZlcyBhdCB0aGUgbW9tZW50IG9mIHRoZWlyIGNhcHR1cmUsIGFuZCBvdGhlcnMgd2VyZSBwdXQgdG8gZGVhdGggYnkgQ2Flc2FyIGFmdGVyIGNhcHR1cmUuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['53.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgaXMgdGhlIGFjY291bnQgd2hpY2ggc29tZSBnaXZlIG9mIHRoZSBiYXR0bGU7IG90aGVycywgaG93ZXZlciwgc2F5IHRoYXQgQ2Flc2FyIGhpbXNlbGYgd2FzIG5vdCBpbiB0aGUgYWN0aW9uLCBidXQgdGhhdCwgYXMgaGUgd2FzIG1hcnNoYWxsaW5nIGFuZCBhcnJheWluZyBoaXMgYXJteSwgaGlzIHVzdWFsIHNpY2tuZXNzIGxhaWQgaG9sZCBvZiBoaW0sIGFuZCBoZSwgYXQgb25jZSBhd2FyZSB0aGF0IGl0IHdhcyBiZWdpbm5pbmcsIGJlZm9yZSBoaXMgYWxyZWFkeSB3YXZlcmluZyBzZW5zZXMgd2VyZSBhbHRvZ2V0aGVyIGNvbmZvdW5kZWQgYW5kIG92ZXJwb3dlcmVkIGJ5IHRoZSBtYWxhZHksIHdhcyBjYXJyaWVkIHRvIGEgbmVpZ2hib3VyaW5nIHRvd2VyLCB3aGVyZSBoZSBzdGF5ZWQgcXVpZXRseSBkdXJpbmcgdGhlIGJhdHRsZS4gT2YgdGhlIG1lbiBvZiBjb25zdWxhciBhbmQgcHJhZXRvcmlhbCByYW5rIHdobyBlc2NhcGVkIGZyb20gdGhlIGJhdHRsZSwgc29tZSBzbGV3IHRoZW1zZWx2ZXMgYXQgdGhlIG1vbWVudCBvZiB0aGVpciBjYXB0dXJlLCBhbmQgb3RoZXJzIHdlcmUgcHV0IHRvIGRlYXRoIGJ5IENhZXNhciBhZnRlciBjYXB0dXJlLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJlaW5nIGVhZ2VyIHRvIHRha2UgQ2F0byBhbGl2ZSwgQ2Flc2FyIGhhc3RlbmVkIHRvd2FyZHMgVXRpY2EsIGZvciBDYXRvIHdhcyBndWFyZGluZyB0aGF0IGNpdHksIGFuZCB0b29rIG5vIHBhcnQgaW4gdGhlIGJhdHRsZS4gQnV0IGhlIGxlYXJuZWQgdGhhdCBDYXRvIGhhZCBtYWRlIGF3YXkgd2l0aCBoaW1zZWxmPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DYXRvIE1pbm9yIDwvdGl0bGU+bHh2PC9iaWJsPi48L25vdGU+IGFuZCBoZSB3YXMgY2xlYXJseSBhbm5veWVkLCB0aG91Z2ggZm9yIHdoYXQgcmVhc29uIGlzIHVuY2VydGFpbi4gQXQgYW55IHJhdGUsIGhlIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2F0bywgSSBiZWdydWRnZSB0aGVlIHRoeSBkZWF0aDsgZm9yIHRob3UgZGlkc3QgYmVncnVkZ2UgbWUgdGhlIHByZXNlcnZhdGlvbiBvZiB0aHkgbGlmZS48L3E+IE5vdywgdGhlIHRyZWF0aXNlIHdoaWNoIENhZXNhciBhZnRlcndhcmRzIHdyb3RlIGFnYWluc3QgQ2F0byB3aGVuIGhlIHdhcyBkZWFkLCBkb2VzIG5vdCBzZWVtIHRvIHByb3ZlIHRoYXQgaGUgd2FzIGluIGEgZ2VudGxlIG9yIHJlY29uY2lsYWJsZSBtb29kLiBGb3IgaG93IGNvdWxkIGhlIGhhdmUgc3BhcmVkIENhdG8gYWxpdmUsIHdoZW4gaGUgcG91cmVkIG91dCBhZ2FpbnN0IGhpbSBhZnRlciBkZWF0aCBzbyBncmVhdCBhIGN1cCBvZiB3cmF0aD8gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHlldCBmcm9tIGhpcyBjb25zaWRlcmF0ZSB0cmVhdG1lbnQgb2YgQ2ljZXJvIGFuZCBCcnV0dXMgYW5kIHRob3VzYW5kcyBtb3JlIHdobyBoYWQgZm91Z2h0IGFnYWluc3QgaGltLCBpdCBpcyBpbmZlcnJlZCB0aGF0IGV2ZW4gdGhpcyB0cmVhdGlzZSB3YXMgbm90IGNvbXBvc2VkIG91dCBvZiBoYXRyZWQsIGJ1dCBmcm9tIHBvbGl0aWNhbCBhbWJpdGlvbiwgZm9yIHJlYXNvbnMgd2hpY2ggZm9sbG93LiBDaWNlcm8gaGFkIHdyaXR0ZW4gYW4gZW5jb21pdW0gb24gQ2F0byB3aGljaCBoZSBlbnRpdGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhdG88L3E+OyBhbmQgdGhlIGRpc2NvdXJzZSB3YXMgZWFnZXJseSByZWFkIGJ5IG1hbnksIGFzIHdhcyBuYXR1cmFsLCBzaW5jZSBpdCB3YXMgY29tcG9zZWQgYnkgdGhlIGFibGVzdCBvZiBvcmF0b3JzIG9uIHRoZSBub2JsZXN0IG9mIHRoZW1lcy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBhbm5veWVkIENhZXNhciwgd2hvIHRob3VnaHQgdGhhdCBDaWNlcm8ncyBwcmFpc2Ugb2YgdGhlIGRlYWQgQ2F0byB3YXMgYSBkZW51bmNpYXRpb24gb2YgQ2Flc2FyIGhpbXNlbGYuIEFjY29yZGluZ2x5LCBoZSB3cm90ZSBhIHRyZWF0aXNlIGluIHdoaWNoIGhlIGdvdCB0b2dldGhlciBjb3VudGxlc3MgY2hhcmdlcyBhZ2FpbnN0IENhdG87IGFuZCB0aGUgd29yayBpcyBlbnRpdGxlZCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGktQ2F0bzwvcT4gQm90aCB0cmVhdGlzZXMgaGF2ZSBtYW55IGVhZ2VyIHJlYWRlcnMsIGFzIHdlbGwgb24gYWNjb3VudCBvZiBDYWVzYXIgYXMgb2YgQ2F0by48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['54.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVpbmcgZWFnZXIgdG8gdGFrZSBDYXRvIGFsaXZlLCBDYWVzYXIgaGFzdGVuZWQgdG93YXJkcyBVdGljYSwgZm9yIENhdG8gd2FzIGd1YXJkaW5nIHRoYXQgY2l0eSwgYW5kIHRvb2sgbm8gcGFydCBpbiB0aGUgYmF0dGxlLiBCdXQgaGUgbGVhcm5lZCB0aGF0IENhdG8gaGFkIG1hZGUgYXdheSB3aXRoIGhpbXNlbGY8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2F0LiBNaS4gNjUuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNhdG8gTWlub3IgPC90aXRsZT5seHY8L2JpYmw+Ljwvbm90ZT4gYW5kIGhlIHdhcyBjbGVhcmx5IGFubm95ZWQsIHRob3VnaCBmb3Igd2hhdCByZWFzb24gaXMgdW5jZXJ0YWluLiBBdCBhbnkgcmF0ZSwgaGUgc2FpZDogCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDYXQuIE1pLiA2NS4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNaW5vciA8L3RpdGxlPmx4djwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2F0byBNaW5vciA8L3RpdGxlPmx4djxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Q2F0bywgSSBiZWdydWRnZSB0aGVlIHRoeSBkZWF0aDsgZm9yIHRob3UgZGlkc3QgYmVncnVkZ2UgbWUgdGhlIHByZXNlcnZhdGlvbiBvZiB0aHkgbGlmZS48L3E+IE5vdywgdGhlIHRyZWF0aXNlIHdoaWNoIENhZXNhciBhZnRlcndhcmRzIHdyb3RlIGFnYWluc3QgQ2F0byB3aGVuIGhlIHdhcyBkZWFkLCBkb2VzIG5vdCBzZWVtIHRvIHByb3ZlIHRoYXQgaGUgd2FzIGluIGEgZ2VudGxlIG9yIHJlY29uY2lsYWJsZSBtb29kLiBGb3IgaG93IGNvdWxkIGhlIGhhdmUgc3BhcmVkIENhdG8gYWxpdmUsIHdoZW4gaGUgcG91cmVkIG91dCBhZ2FpbnN0IGhpbSBhZnRlciBkZWF0aCBzbyBncmVhdCBhIGN1cCBvZiB3cmF0aD8gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['54.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB5ZXQgZnJvbSBoaXMgY29uc2lkZXJhdGUgdHJlYXRtZW50IG9mIENpY2VybyBhbmQgQnJ1dHVzIGFuZCB0aG91c2FuZHMgbW9yZSB3aG8gaGFkIGZvdWdodCBhZ2FpbnN0IGhpbSwgaXQgaXMgaW5mZXJyZWQgdGhhdCBldmVuIHRoaXMgdHJlYXRpc2Ugd2FzIG5vdCBjb21wb3NlZCBvdXQgb2YgaGF0cmVkLCBidXQgZnJvbSBwb2xpdGljYWwgYW1iaXRpb24sIGZvciByZWFzb25zIHdoaWNoIGZvbGxvdy4gQ2ljZXJvIGhhZCB3cml0dGVuIGFuIGVuY29taXVtIG9uIENhdG8gd2hpY2ggaGUgZW50aXRsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkNhdG88L3E+OyBhbmQgdGhlIGRpc2NvdXJzZSB3YXMgZWFnZXJseSByZWFkIGJ5IG1hbnksIGFzIHdhcyBuYXR1cmFsLCBzaW5jZSBpdCB3YXMgY29tcG9zZWQgYnkgdGhlIGFibGVzdCBvZiBvcmF0b3JzIG9uIHRoZSBub2JsZXN0IG9mIHRoZW1lcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['54.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgYW5ub3llZCBDYWVzYXIsIHdobyB0aG91Z2h0IHRoYXQgQ2ljZXJvJ3MgcHJhaXNlIG9mIHRoZSBkZWFkIENhdG8gd2FzIGEgZGVudW5jaWF0aW9uIG9mIENhZXNhciBoaW1zZWxmLiBBY2NvcmRpbmdseSwgaGUgd3JvdGUgYSB0cmVhdGlzZSBpbiB3aGljaCBoZSBnb3QgdG9nZXRoZXIgY291bnRsZXNzIGNoYXJnZXMgYWdhaW5zdCBDYXRvOyBhbmQgdGhlIHdvcmsgaXMgZW50aXRsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFudGktQ2F0bzwvcT4gQm90aCB0cmVhdGlzZXMgaGF2ZSBtYW55IGVhZ2VyIHJlYWRlcnMsIGFzIHdlbGwgb24gYWNjb3VudCBvZiBDYWVzYXIgYXMgb2YgQ2F0by48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdG8gcmVzdW1lLCB3aGVuIENhZXNhciBjYW1lIGJhY2sgdG8gUm9tZSBmcm9tIEFmcmljYSwgdG8gYmVnaW4gd2l0aCwgaGUgbWFkZSBhIGJvYXN0ZnVsIHNwZWVjaCB0byB0aGUgcGVvcGxlIGNvbmNlcm5pbmcgaGlzIHZpY3RvcnksIGFzc2VydGluZyB0aGF0IGhlIGhhZCBzdWJkdWVkIGEgY291bnRyeSBsYXJnZSBlbm91Z2ggdG8gZnVybmlzaCBhbm51YWxseSBmb3IgdGhlIHB1YmxpYyB0cmVhc3VyeSB0d28gaHVuZHJlZCB0aG91c2FuZCBBdHRpYyBidXNoZWxzIG9mIGdyYWluLCBhbmQgdGhyZWUgbWlsbGlvbiBwb3VuZHMgb2Ygb2xpdmUgb2lsLiBOZXh0LCBoZSBjZWxlYnJhdGVkIHRyaXVtcGhzLCBhbiBFZ3lwdGlhbiwgYSBQb250aWMsIGFuZCBhbiBBZnJpY2FuLCB0aGUgbGFzdCBub3QgZm9yIGhpcyB2aWN0b3J5IG92ZXIgU2NpcGlvLCBidXQgb3N0ZW5zaWJseSBvdmVyIEp1YmEgdGhlIGtpbmcuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgb2NjYXNpb24sIHRvbywgSnViYSwgYSBzb24gb2YgdGhlIGtpbmcsIGEgbWVyZSBpbmZhbnQsIHdhcyBjYXJyaWVkIGFsb25nIGluIHRoZSB0cml1bXBoYWwgcHJvY2Vzc2lvbiwgdGhlIG1vc3QgZm9ydHVuYXRlIGNhcHRpdmUgZXZlciB0YWtlbiwgc2luY2UgZnJvbSBiZWluZyBhIEJhcmJhcmlhbiBhbmQgYSBOdW1pZGlhbiwgaGUgY2FtZSB0byBiZSBlbnJvbGxlZCBhbW9uZyB0aGUgbW9zdCBsZWFybmVkIGhpc3RvcmlhbnMgb2YgSGVsbGFzLiBBZnRlciB0aGUgdHJpdW1waHMsIENhZXNhciBnYXZlIGhpcyBzb2xkaWVycyBsYXJnZSBnaWZ0cyBhbmQgZW50ZXJ0YWluZWQgdGhlIHBlb3BsZSB3aXRoIGJhbnF1ZXRzIGFuZCBzcGVjdGFjbGVzLCBmZWFzdGluZyB0aGVtIGFsbCBhdCBvbmUgdGltZSBvbiB0d2VudHkgdGhvdXNhbmQgZGluaW5nLWNvdWNoZXMsIGFuZCBmdXJuaXNoaW5nIHNwZWN0YWNsZXMgb2YgZ2xhZGlhdG9yaWFsIGFuZCBuYXZhbCBjb21iYXRzIGluIGhvbm91ciBvZiBoaXMgZGF1Z2h0ZXIgSnVsaWEsIGxvbmcgc2luY2UgZGVhZC48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['55.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJlc3VtZSwgd2hlbiBDYWVzYXIgY2FtZSBiYWNrIHRvIFJvbWUgZnJvbSBBZnJpY2EsIHRvIGJlZ2luIHdpdGgsIGhlIG1hZGUgYSBib2FzdGZ1bCBzcGVlY2ggdG8gdGhlIHBlb3BsZSBjb25jZXJuaW5nIGhpcyB2aWN0b3J5LCBhc3NlcnRpbmcgdGhhdCBoZSBoYWQgc3ViZHVlZCBhIGNvdW50cnkgbGFyZ2UgZW5vdWdoIHRvIGZ1cm5pc2ggYW5udWFsbHkgZm9yIHRoZSBwdWJsaWMgdHJlYXN1cnkgdHdvIGh1bmRyZWQgdGhvdXNhbmQgQXR0aWMgYnVzaGVscyBvZiBncmFpbiwgYW5kIHRocmVlIG1pbGxpb24gcG91bmRzIG9mIG9saXZlIG9pbC4gTmV4dCwgaGUgY2VsZWJyYXRlZCB0cml1bXBocywgYW4gRWd5cHRpYW4sIGEgUG9udGljLCBhbmQgYW4gQWZyaWNhbiwgdGhlIGxhc3Qgbm90IGZvciBoaXMgdmljdG9yeSBvdmVyIFNjaXBpbywgYnV0IG9zdGVuc2libHkgb3ZlciBKdWJhIHRoZSBraW5nLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['55.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoaXMgb2NjYXNpb24sIHRvbywgSnViYSwgYSBzb24gb2YgdGhlIGtpbmcsIGEgbWVyZSBpbmZhbnQsIHdhcyBjYXJyaWVkIGFsb25nIGluIHRoZSB0cml1bXBoYWwgcHJvY2Vzc2lvbiwgdGhlIG1vc3QgZm9ydHVuYXRlIGNhcHRpdmUgZXZlciB0YWtlbiwgc2luY2UgZnJvbSBiZWluZyBhIEJhcmJhcmlhbiBhbmQgYSBOdW1pZGlhbiwgaGUgY2FtZSB0byBiZSBlbnJvbGxlZCBhbW9uZyB0aGUgbW9zdCBsZWFybmVkIGhpc3RvcmlhbnMgb2YgSGVsbGFzLiBBZnRlciB0aGUgdHJpdW1waHMsIENhZXNhciBnYXZlIGhpcyBzb2xkaWVycyBsYXJnZSBnaWZ0cyBhbmQgZW50ZXJ0YWluZWQgdGhlIHBlb3BsZSB3aXRoIGJhbnF1ZXRzIGFuZCBzcGVjdGFjbGVzLCBmZWFzdGluZyB0aGVtIGFsbCBhdCBvbmUgdGltZSBvbiB0d2VudHkgdGhvdXNhbmQgZGluaW5nLWNvdWNoZXMsIGFuZCBmdXJuaXNoaW5nIHNwZWN0YWNsZXMgb2YgZ2xhZGlhdG9yaWFsIGFuZCBuYXZhbCBjb21iYXRzIGluIGhvbm91ciBvZiBoaXMgZGF1Z2h0ZXIgSnVsaWEsIGxvbmcgc2luY2UgZGVhZC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgc3BlY3RhY2xlcywgYSBjZW5zdXMgb2YgdGhlIHBlb3BsZSB3YXMgdGFrZW4sPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+QWNjb3JkaW5nIHRvIFN1ZXRvbml1cyAoPGJpYmwgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gNDEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RGl2LiBKdWwuPC90aXRsZT4gNDE8L2JpYmw+KSwgdGhpcyB3YXMgbm90IGEgY2Vuc3VzIG9mIGFsbCB0aGUgcGVvcGxlLCBidXQgYSByZXZpc2lvbiBvZiB0aGUgbnVtYmVyIG9mIHBvb3JlciBjaXRpemVucyBlbnRpdGxlZCB0byByZWNlaXZlIGFsbG93YW5jZXMgb2YgZ3JhaW4gZnJvbSB0aGUgc3RhdGUuPC9ub3RlPiBhbmQgaW5zdGVhZCBvZiB0aGUgdGhyZWUgaHVuZHJlZCBhbmQgdHdlbnR5IHRob3VzYW5kIG9mIHRoZSBwcmVjZWRpbmcgbGlzdHMgdGhlcmUgd2VyZSBlbnJvbGxlZCBvbmx5IG9uZSBodW5kcmVkIGFuZCBmaWZ0eSB0aG91c2FuZC4gU28gZ3JlYXQgd2FzIHRoZSBjYWxhbWl0eSB3aGljaCB0aGUgY2l2aWwgd2FycyBoYWQgd3JvdWdodCwgYW5kIHNvIGxhcmdlIGEgcG9ydGlvbiBvZiB0aGUgcGVvcGxlIG9mIFJvbWUgaGFkIHRoZXkgY29uc3VtZWQgYXdheSwgdG8gc2F5IG5vdGhpbmcgb2YgdGhlIG1pc2ZvcnR1bmVzIHRoYXQgcG9zc2Vzc2VkIHRoZSByZXN0IG9mIEl0YWx5IGFuZCB0aGUgcHJvdmluY2VzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['55.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSBzcGVjdGFjbGVzLCBhIGNlbnN1cyBvZiB0aGUgcGVvcGxlIHdhcyB0YWtlbiw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFjY29yZGluZyB0byBTdWV0b25pdXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlN1ZXQuIEp1bC4gNDEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EaXYuIEp1bC48L3RpdGxlPiA0MTwvYmlibD4pLCB0aGlzIHdhcyBub3QgYSBjZW5zdXMgb2YgYWxsIHRoZSBwZW9wbGUsIGJ1dCBhIHJldmlzaW9uIG9mIHRoZSBudW1iZXIgb2YgcG9vcmVyIGNpdGl6ZW5zIGVudGl0bGVkIHRvIHJlY2VpdmUgYWxsb3dhbmNlcyBvZiBncmFpbiBmcm9tIHRoZSBzdGF0ZS48L25vdGU+IGFuZCBpbnN0ZWFkIG9mIHRoZSB0aHJlZSBodW5kcmVkIGFuZCB0d2VudHkgdGhvdXNhbmQgb2YgdGhlIHByZWNlZGluZyBsaXN0cyB0aGVyZSB3ZXJlIGVucm9sbGVkIG9ubHkgb25lIGh1bmRyZWQgYW5kIGZpZnR5IHRob3VzYW5kLiBTbyBncmVhdCB3YXMgdGhlIGNhbGFtaXR5IHdoaWNoIHRoZSBjaXZpbCB3YXJzIGhhZCB3cm91Z2h0LCBhbmQgc28gbGFyZ2UgYSBwb3J0aW9uIG9mIHRoZSBwZW9wbGUgb2YgUm9tZSBoYWQgdGhleSBjb25zdW1lZCBhd2F5LCB0byBzYXkgbm90aGluZyBvZiB0aGUgbWlzZm9ydHVuZXMgdGhhdCBwb3NzZXNzZWQgdGhlIHJlc3Qgb2YgSXRhbHkgYW5kIHRoZSBwcm92aW5jZXMuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iU3VldC4gSnVsLiA0MSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdi4gSnVsLjwvdGl0bGU+IDQxPC9iaWJsPiksIHRoaXMgd2FzIG5vdCBhIGNlbnN1cyBvZiBhbGwgdGhlIHBlb3BsZSwgYnV0IGEgcmV2aXNpb24gb2YgdGhlIG51bWJlciBvZiBwb29yZXIgY2l0aXplbnMgZW50aXRsZWQgdG8gcmVjZWl2ZSBhbGxvd2FuY2VzIG9mIGdyYWluIGZyb20gdGhlIHN0YXRlLjx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkRpdi4gSnVsLjwvdGl0bGU+IDQxPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlc2UgbWF0dGVycyBoYWQgYmVlbiBmaW5pc2hlZCBhbmQgaGUgaGFkIGJlZW4gZGVjbGFyZWQgY29uc3VsIGZvciB0aGUgZm91cnRoIHRpbWUsIENhZXNhciBtYWRlIGFuIGV4cGVkaXRpb24gaW50byBTcGFpbiBhZ2FpbnN0IHRoZSBzb25zIG9mIFBvbXBleS4gVGhlc2Ugd2VyZSBzdGlsbCB5b3VuZywgYnV0IGhhZCBjb2xsZWN0ZWQgYW4gYXJteSBvZiBhbWF6aW5nIG51bWJlcnMgYW5kIGRpc3BsYXllZCBhIGJvbGRuZXNzIHdoaWNoIGp1c3RpZmllZCB0aGVpciBjbGFpbXMgdG8gbGVhZGVyc2hpcCwgc28gdGhhdCB0aGV5IGJlc2V0IENhZXNhciB3aXRoIHRoZSBncmVhdGVzdCBwZXJpbC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGdyZWF0IGJhdHRsZSB3YXMgam9pbmVkIG5lYXIgdGhlIGNpdHkgb2YgTXVuZGEsIGFuZCBoZXJlIENhZXNhciwgc2VlaW5nIGhpcyBvd24gbWVuIGhhcmQgcHJlc3NlZCBhbmQgbWFraW5nIGEgZmVlYmxlIHJlc2lzdGFuY2UsIGFza2VkIGluIGEgbG91ZCB2b2ljZSBhcyBoZSByYW4gdGhyb3VnaCB0aGUgYXJtZWQgcmFua3Mgd2hldGhlciB0aGV5IGZlbHQgbm8gc2hhbWUgdG8gdGFrZSBoaW0gYW5kIHB1dCBoaW0gaW4gdGhlIGhhbmRzIG9mIHRob3NlIGJveXMuIFdpdGggZGlmZmljdWx0eSBhbmQgYWZ0ZXIgbXVjaCBzdHJlbnVvdXMgZWZmb3J0IGhlIHJlcHVsc2VkIHRoZSBlbmVteSBhbmQgc2xldyBvdmVyIHRoaXJ0eSB0aG91c2FuZCBvZiB0aGVtLCBidXQgaGUgbG9zdCBvbmUgdGhvdXNhbmQgb2YgaGlzIG93biBtZW4sIGFuZCB0aG9zZSB0aGUgdmVyeSBiZXN0LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BcyBoZSB3YXMgZ29pbmcgYXdheSBhZnRlciB0aGUgYmF0dGxlIGhlIHNhaWQgdG8gaGlzIGZyaWVuZHMgdGhhdCBoZSBoYWQgb2Z0ZW4gc3RyaXZlbiBmb3IgdmljdG9yeSwgYnV0IG5vdyBmaXJzdCBmb3IgaGlzIGxpZmUuIEhlIGZvdWdodCB0aGlzIHZpY3RvcmlvdXMgYmF0dGxlIG9uIHRoZSBkYXkgb2YgdGhlIGZlc3RpdmFsIG9mIEJhY2NodXMsPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+TWFyY2ggMTcsIDQ1IEIuQy48L25vdGU+IG9uIHdoaWNoIGRheSBhbHNvIGl0IGlzIHNhaWQgdGhhdCBQb21wZXkgdGhlIEdyZWF0IGhhZCBnb25lIGZvcnRoIHRvIHRoZSB3YXI7IGEgcGVyaW9kIG9mIGZvdXIgeWVhcnMgaW50ZXJ2ZW5lZC4gQXMgZm9yIFBvbXBleSdzIHNvbnMsIHRoZSB5b3VuZ2VyIG1hZGUgaGlzIGVzY2FwZSwgYnV0IGFmdGVyIGEgZmV3IGRheXMgdGhlIGhlYWQgb2YgdGhlIGVsZGVyIHdhcyBicm91Z2h0IGluIGJ5IERlaWRpdXMuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['56.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhlc2UgbWF0dGVycyBoYWQgYmVlbiBmaW5pc2hlZCBhbmQgaGUgaGFkIGJlZW4gZGVjbGFyZWQgY29uc3VsIGZvciB0aGUgZm91cnRoIHRpbWUsIENhZXNhciBtYWRlIGFuIGV4cGVkaXRpb24gaW50byBTcGFpbiBhZ2FpbnN0IHRoZSBzb25zIG9mIFBvbXBleS4gVGhlc2Ugd2VyZSBzdGlsbCB5b3VuZywgYnV0IGhhZCBjb2xsZWN0ZWQgYW4gYXJteSBvZiBhbWF6aW5nIG51bWJlcnMgYW5kIGRpc3BsYXllZCBhIGJvbGRuZXNzIHdoaWNoIGp1c3RpZmllZCB0aGVpciBjbGFpbXMgdG8gbGVhZGVyc2hpcCwgc28gdGhhdCB0aGV5IGJlc2V0IENhZXNhciB3aXRoIHRoZSBncmVhdGVzdCBwZXJpbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['56.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBncmVhdCBiYXR0bGUgd2FzIGpvaW5lZCBuZWFyIHRoZSBjaXR5IG9mIE11bmRhLCBhbmQgaGVyZSBDYWVzYXIsIHNlZWluZyBoaXMgb3duIG1lbiBoYXJkIHByZXNzZWQgYW5kIG1ha2luZyBhIGZlZWJsZSByZXNpc3RhbmNlLCBhc2tlZCBpbiBhIGxvdWQgdm9pY2UgYXMgaGUgcmFuIHRocm91Z2ggdGhlIGFybWVkIHJhbmtzIHdoZXRoZXIgdGhleSBmZWx0IG5vIHNoYW1lIHRvIHRha2UgaGltIGFuZCBwdXQgaGltIGluIHRoZSBoYW5kcyBvZiB0aG9zZSBib3lzLiBXaXRoIGRpZmZpY3VsdHkgYW5kIGFmdGVyIG11Y2ggc3RyZW51b3VzIGVmZm9ydCBoZSByZXB1bHNlZCB0aGUgZW5lbXkgYW5kIHNsZXcgb3ZlciB0aGlydHkgdGhvdXNhbmQgb2YgdGhlbSwgYnV0IGhlIGxvc3Qgb25lIHRob3VzYW5kIG9mIGhpcyBvd24gbWVuLCBhbmQgdGhvc2UgdGhlIHZlcnkgYmVzdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['56.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFzIGhlIHdhcyBnb2luZyBhd2F5IGFmdGVyIHRoZSBiYXR0bGUgaGUgc2FpZCB0byBoaXMgZnJpZW5kcyB0aGF0IGhlIGhhZCBvZnRlbiBzdHJpdmVuIGZvciB2aWN0b3J5LCBidXQgbm93IGZpcnN0IGZvciBoaXMgbGlmZS4gSGUgZm91Z2h0IHRoaXMgdmljdG9yaW91cyBiYXR0bGUgb24gdGhlIGRheSBvZiB0aGUgZmVzdGl2YWwgb2YgQmFjY2h1cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPk1hcmNoIDE3LCA0NSBCLkMuPC9ub3RlPiBvbiB3aGljaCBkYXkgYWxzbyBpdCBpcyBzYWlkIHRoYXQgUG9tcGV5IHRoZSBHcmVhdCBoYWQgZ29uZSBmb3J0aCB0byB0aGUgd2FyOyBhIHBlcmlvZCBvZiBmb3VyIHllYXJzIGludGVydmVuZWQuIEFzIGZvciBQb21wZXkncyBzb25zLCB0aGUgeW91bmdlciBtYWRlIGhpcyBlc2NhcGUsIGJ1dCBhZnRlciBhIGZldyBkYXlzIHRoZSBoZWFkIG9mIHRoZSBlbGRlciB3YXMgYnJvdWdodCBpbiBieSBEZWlkaXVzLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBsYXN0IHdhciB0aGF0IENhZXNhciB3YWdlZDsgYW5kIHRoZSB0cml1bXBoIHRoYXQgd2FzIGNlbGVicmF0ZWQgZm9yIGl0IHZleGVkIHRoZSBSb21hbnMgYXMgbm90aGluZyBlbHNlIGhhZCBkb25lLiBGb3IgaXQgY29tbWVtb3JhdGVkIG5vIHZpY3Rvcnkgb3ZlciBmb3JlaWduIGNvbW1hbmRlcnMgb3IgYmFyYmFyaWFuIGtpbmdzLCBidXQgdGhlIHV0dGVyIGFubmloaWxhdGlvbiBvZiB0aGUgc29ucyBhbmQgdGhlIGZhbWlseSBvZiB0aGUgbWlnaHRpZXN0IG9mIHRoZSBSb21hbnMsIHdobyBoYWQgZmFsbGVuIHVwb24gbWlzZm9ydHVuZTsgYW5kIGl0IHdhcyBub3QgbWVldCBmb3IgQ2Flc2FyIHRvIGNlbGVicmF0ZSBhIHRyaXVtcGggZm9yIHRoZSBjYWxhbWl0aWVzIG9mIGhpcyBjb3VudHJ5LCBwcmlkaW5nIGhpbXNlbGYgdXBvbiBhY3Rpb25zIHdoaWNoIGhhZCBubyBkZWZlbmNlIGJlZm9yZSBnb2RzIG9yIG1lbiBleGNlcHQgdGhhdCB0aGV5IGhhZCBiZWVuIGRvbmUgdW5kZXIgbmVjZXNzaXR5LCBhbmQgdGhhdCB0b28gYWx0aG91Z2ggcHJldmlvdXNseSBoZSBoYWQgc2VudCBuZWl0aGVyIG1lc3NlbmdlciBub3IgbGV0dGVycyB0byBhbm5vdW5jZSB0byB0aGUgcGVvcGxlIGEgdmljdG9yeSBpbiB0aGUgY2l2aWwgd2FycywgYnV0IGhhZCBzY3J1cHVsb3VzbHkgcHV0IGZyb20gaGltIHRoZSBmYW1lIGFyaXNpbmcgdGhlcmVmcm9tLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['56.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBsYXN0IHdhciB0aGF0IENhZXNhciB3YWdlZDsgYW5kIHRoZSB0cml1bXBoIHRoYXQgd2FzIGNlbGVicmF0ZWQgZm9yIGl0IHZleGVkIHRoZSBSb21hbnMgYXMgbm90aGluZyBlbHNlIGhhZCBkb25lLiBGb3IgaXQgY29tbWVtb3JhdGVkIG5vIHZpY3Rvcnkgb3ZlciBmb3JlaWduIGNvbW1hbmRlcnMgb3IgYmFyYmFyaWFuIGtpbmdzLCBidXQgdGhlIHV0dGVyIGFubmloaWxhdGlvbiBvZiB0aGUgc29ucyBhbmQgdGhlIGZhbWlseSBvZiB0aGUgbWlnaHRpZXN0IG9mIHRoZSBSb21hbnMsIHdobyBoYWQgZmFsbGVuIHVwb24gbWlzZm9ydHVuZTsgYW5kIGl0IHdhcyBub3QgbWVldCBmb3IgQ2Flc2FyIHRvIGNlbGVicmF0ZSBhIHRyaXVtcGggZm9yIHRoZSBjYWxhbWl0aWVzIG9mIGhpcyBjb3VudHJ5LCBwcmlkaW5nIGhpbXNlbGYgdXBvbiBhY3Rpb25zIHdoaWNoIGhhZCBubyBkZWZlbmNlIGJlZm9yZSBnb2RzIG9yIG1lbiBleGNlcHQgdGhhdCB0aGV5IGhhZCBiZWVuIGRvbmUgdW5kZXIgbmVjZXNzaXR5LCBhbmQgdGhhdCB0b28gYWx0aG91Z2ggcHJldmlvdXNseSBoZSBoYWQgc2VudCBuZWl0aGVyIG1lc3NlbmdlciBub3IgbGV0dGVycyB0byBhbm5vdW5jZSB0byB0aGUgcGVvcGxlIGEgdmljdG9yeSBpbiB0aGUgY2l2aWwgd2FycywgYnV0IGhhZCBzY3J1cHVsb3VzbHkgcHV0IGZyb20gaGltIHRoZSBmYW1lIGFyaXNpbmcgdGhlcmVmcm9tLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBSb21hbnMgZ2F2ZSB3YXkgYmVmb3JlIHRoZSBnb29kIGZvcnR1bmUgb2YgdGhlIG1hbiBhbmQgYWNjZXB0ZWQgdGhlIGJpdCwgYW5kIHJlZ2FyZGluZyB0aGUgbW9uYXJjaHkgYXMgYSByZXNwaXRlIGZyb20gdGhlIGV2aWxzIG9mIHRoZSBjaXZpbCB3YXJzLCB0aGV5IGFwcG9pbnRlZCBoaW0gZGljdGF0b3IgZm9yIGxpZmUuIFRoaXMgd2FzIGNvbmZlc3NlZGx5IGEgdHlyYW5ueSwgc2luY2UgdGhlIG1vbmFyY2h5LCBiZXNpZGVzIHRoZSBlbGVtZW50IG9mIGlycmVzcG9uc2liaWxpdHksIG5vdyB0b29rIG9uIHRoYXQgb2YgcGVybWFuZW5jZS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIENpY2VybyB3aG8gcHJvcG9zZWQgdGhlIGZpcnN0IGhvbm91cnMgZm9yIGhpbSBpbiB0aGUgc2VuYXRlLCBhbmQgdGhlaXIgbWFnbml0dWRlIHdhcywgYWZ0ZXIgYWxsLCBub3QgdG9vIGdyZWF0IGZvciBhIG1hbjsgYnV0IG90aGVycyBhZGRlZCBleGNlc3NpdmUgaG9ub3VycyBhbmQgdmllZCB3aXRoIG9uZSBhbm90aGVyIGluIHByb3Bvc2luZyB0aGVtLCB0aHVzIHJlbmRlcmluZyBDYWVzYXIgb2Rpb3VzIGFuZCBvYm5veGlvdXMgZXZlbiB0byB0aGUgbWlsZGVzdCBjaXRpemVucyBiZWNhdXNlIG9mIHRoZSBwcmV0ZW5zaW9uIGFuZCBleHRyYXZhZ2FuY2Ugb2Ygd2hhdCB3YXMgZGVjcmVlZCBmb3IgaGltLiBJdCBpcyB0aG91Z2h0LCB0b28sIHRoYXQgdGhlIGVuZW1pZXMgb2YgQ2Flc2FyIG5vIGxlc3MgdGhhbiBoaXMgZmxhdHRlcmVycyBoZWxwZWQgdG8gZm9yY2UgdGhlc2UgbWVhc3VyZXMgdGhyb3VnaCwgCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+aW4gb3JkZXIgdGhhdCB0aGV5IG1pZ2h0IGhhdmUgYXMgbWFueSBwcmV0ZXh0cyBhcyBwb3NzaWJsZSBhZ2FpbnN0IGhpbSBhbmQgbWlnaHQgYmUgdGhvdWdodCB0byBoYXZlIHRoZSBiZXN0IHJlYXNvbnMgZm9yIGF0dGVtcHRpbmcgaGlzIGxpZmUuIEZvciBpbiBhbGwgb3RoZXIgd2F5cywgYXQgbGVhc3QsIGFmdGVyIHRoZSBjaXZpbCB3YXJzIHdlcmUgb3ZlciwgaGUgc2hvd2VkIGhpbXNlbGYgYmxhbWVsZXNzOyBhbmQgY2VydGFpbmx5IGl0IGlzIHRob3VnaHQgbm90IGluYXBwcm9wcmlhdGUgdGhhdCB0aGUgdGVtcGxlIG9mIENsZW1lbmN5IHdhcyBkZWNyZWVkIGFzIGEgdGhhbmstb2ZmZXJpbmcgaW4gdmlldyBvZiBoaXMgbWlsZG5lc3MuIEZvciBoZSBwYXJkb25lZCBtYW55IG9mIHRob3NlIHdobyBoYWQgZm91Z2h0IGFnYWluc3QgaGltLCBhbmQgdG8gc29tZSBoZSBldmVuIGdhdmUgaG9ub3VycyBhbmQgb2ZmaWNlcyBiZXNpZGVzIGFzIHRvIEJydXR1cyBhbmQsIENhc3NpdXMsIGJvdGggb2Ygd2hvbSB3ZXJlIG5vdyBwcmFldG9ycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHN0YXR1ZXMgb2YgUG9tcGV5LCB0b28sIHdoaWNoIGhhZCBiZWVuIHRocm93biBkb3duLCBoZSB3b3VsZCBub3Qgc3VmZmVyIHRvIHJlbWFpbiBzbywgYnV0IHNldCB0aGVtIHVwIGFnYWluLCBhdCB3aGljaCBDaWNlcm8gc2FpZCB0aGF0IGluIHNldHRpbmcgdXAgUG9tcGV5J3Mgc3RhdHVlcyBDYWVzYXIgZmlybWx5IGZpeGVkIGhpcyBvd24uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDQwLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q2ljZXJvPC90aXRsZT4sIHhsLiA0PC9iaWJsPi48L25vdGU+IFdoZW4gaGlzIGZyaWVuZHMgdGhvdWdodCBpdCBiZXN0IHRoYXQgaGUgc2hvdWxkIGhhdmUgYSBib2R5LWd1YXJkLCBhbmQgbWFueSBvZiB0aGVtIHZvbHVudGVlcmVkIGZvciB0aGlzIHNlcnZpY2UsIGhlIHdvdWxkIG5vdCBjb25zZW50LCBzYXlpbmcgdGhhdCBpdCB3YXMgYmV0dGVyIHRvIGRpZSBvbmNlIGZvciBhbGwgdGhhbiB0byBiZSBhbHdheXMgZXhwZWN0aW5nIGRlYXRoLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaW4gdGhlIGVmZm9ydCB0byBzdXJyb3VuZCBoaW1zZWxmIHdpdGggbWVuJ3MgZ29vZCB3aWxsIGFzIHRoZSBmYWlyZXN0IGFuZCBhdCB0aGUgc2FtZSB0aW1lIHRoZSBzZWN1cmVzdCBwcm90ZWN0aW9uLCBoZSBhZ2FpbiBjb3VydGVkIHRoZSBwZW9wbGUgd2l0aCBiYW5xdWV0cyBhbmQgZGlzdHJpYnV0aW9ucyBvZiBncmFpbiwgYW5kIGhpcyBzb2xkaWVycyB3aXRoIG5ld2x5IHBsYW50ZWQgY29sb25pZXMsIHRoZSBtb3N0IGNvbnNwaWN1b3VzIG9mIHdoaWNoIHdlcmUgQ2FydGhhZ2UgYW5kIENvcmludGguIFRoZSBlYXJsaWVyIGNhcHR1cmUgb2YgYm90aCB0aGVzZSBjaXRpZXMsIGFzIHdlbGwgYXMgdGhlaXIgcHJlc2VudCByZXN0b3JhdGlvbiwgY2hhbmNlZCB0byBmYWxsIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5Cb3RoIGNpdGllcyB3ZXJlIGNhcHR1cmVkIGluIDE0NiBCLkMuLCBhbmQgYm90aCB3ZXJlIHJlc3RvcmVkIGluIDQ0IEIuQy48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['57.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgdGhlIFJvbWFucyBnYXZlIHdheSBiZWZvcmUgdGhlIGdvb2QgZm9ydHVuZSBvZiB0aGUgbWFuIGFuZCBhY2NlcHRlZCB0aGUgYml0LCBhbmQgcmVnYXJkaW5nIHRoZSBtb25hcmNoeSBhcyBhIHJlc3BpdGUgZnJvbSB0aGUgZXZpbHMgb2YgdGhlIGNpdmlsIHdhcnMsIHRoZXkgYXBwb2ludGVkIGhpbSBkaWN0YXRvciBmb3IgbGlmZS4gVGhpcyB3YXMgY29uZmVzc2VkbHkgYSB0eXJhbm55LCBzaW5jZSB0aGUgbW9uYXJjaHksIGJlc2lkZXMgdGhlIGVsZW1lbnQgb2YgaXJyZXNwb25zaWJpbGl0eSwgbm93IHRvb2sgb24gdGhhdCBvZiBwZXJtYW5lbmNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['57.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkl0IHdhcyBDaWNlcm8gd2hvIHByb3Bvc2VkIHRoZSBmaXJzdCBob25vdXJzIGZvciBoaW0gaW4gdGhlIHNlbmF0ZSwgYW5kIHRoZWlyIG1hZ25pdHVkZSB3YXMsIGFmdGVyIGFsbCwgbm90IHRvbyBncmVhdCBmb3IgYSBtYW47IGJ1dCBvdGhlcnMgYWRkZWQgZXhjZXNzaXZlIGhvbm91cnMgYW5kIHZpZWQgd2l0aCBvbmUgYW5vdGhlciBpbiBwcm9wb3NpbmcgdGhlbSwgdGh1cyByZW5kZXJpbmcgQ2Flc2FyIG9kaW91cyBhbmQgb2Jub3hpb3VzIGV2ZW4gdG8gdGhlIG1pbGRlc3QgY2l0aXplbnMgYmVjYXVzZSBvZiB0aGUgcHJldGVuc2lvbiBhbmQgZXh0cmF2YWdhbmNlIG9mIHdoYXQgd2FzIGRlY3JlZWQgZm9yIGhpbS4gSXQgaXMgdGhvdWdodCwgdG9vLCB0aGF0IHRoZSBlbmVtaWVzIG9mIENhZXNhciBubyBsZXNzIHRoYW4gaGlzIGZsYXR0ZXJlcnMgaGVscGVkIHRvIGZvcmNlIHRoZXNlIG1lYXN1cmVzIHRocm91Z2gsIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['57.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmluIG9yZGVyIHRoYXQgdGhleSBtaWdodCBoYXZlIGFzIG1hbnkgcHJldGV4dHMgYXMgcG9zc2libGUgYWdhaW5zdCBoaW0gYW5kIG1pZ2h0IGJlIHRob3VnaHQgdG8gaGF2ZSB0aGUgYmVzdCByZWFzb25zIGZvciBhdHRlbXB0aW5nIGhpcyBsaWZlLiBGb3IgaW4gYWxsIG90aGVyIHdheXMsIGF0IGxlYXN0LCBhZnRlciB0aGUgY2l2aWwgd2FycyB3ZXJlIG92ZXIsIGhlIHNob3dlZCBoaW1zZWxmIGJsYW1lbGVzczsgYW5kIGNlcnRhaW5seSBpdCBpcyB0aG91Z2h0IG5vdCBpbmFwcHJvcHJpYXRlIHRoYXQgdGhlIHRlbXBsZSBvZiBDbGVtZW5jeSB3YXMgZGVjcmVlZCBhcyBhIHRoYW5rLW9mZmVyaW5nIGluIHZpZXcgb2YgaGlzIG1pbGRuZXNzLiBGb3IgaGUgcGFyZG9uZWQgbWFueSBvZiB0aG9zZSB3aG8gaGFkIGZvdWdodCBhZ2FpbnN0IGhpbSwgYW5kIHRvIHNvbWUgaGUgZXZlbiBnYXZlIGhvbm91cnMgYW5kIG9mZmljZXMgYmVzaWRlcyBhcyB0byBCcnV0dXMgYW5kLCBDYXNzaXVzLCBib3RoIG9mIHdob20gd2VyZSBub3cgcHJhZXRvcnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['57.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBzdGF0dWVzIG9mIFBvbXBleSwgdG9vLCB3aGljaCBoYWQgYmVlbiB0aHJvd24gZG93biwgaGUgd291bGQgbm90IHN1ZmZlciB0byByZW1haW4gc28sIGJ1dCBzZXQgdGhlbSB1cCBhZ2FpbiwgYXQgd2hpY2ggQ2ljZXJvIHNhaWQgdGhhdCBpbiBzZXR0aW5nIHVwIFBvbXBleSdzIHN0YXR1ZXMgQ2Flc2FyIGZpcm1seSBmaXhlZCBoaXMgb3duLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gNDAuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCB4bC4gNDwvYmlibD4uPC9ub3RlPiBXaGVuIGhpcyBmcmllbmRzIHRob3VnaHQgaXQgYmVzdCB0aGF0IGhlIHNob3VsZCBoYXZlIGEgYm9keS1ndWFyZCwgYW5kIG1hbnkgb2YgdGhlbSB2b2x1bnRlZXJlZCBmb3IgdGhpcyBzZXJ2aWNlLCBoZSB3b3VsZCBub3QgY29uc2VudCwgc2F5aW5nIHRoYXQgaXQgd2FzIGJldHRlciB0byBkaWUgb25jZSBmb3IgYWxsIHRoYW4gdG8gYmUgYWx3YXlzIGV4cGVjdGluZyBkZWF0aC4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDQwLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgeGwuIDQ8L2JpYmw+Ljx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNpY2VybzwvdGl0bGU+LCB4bC4gNDwvdHJhbnNsYXRpb24+"
translation['57.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGUgZWZmb3J0IHRvIHN1cnJvdW5kIGhpbXNlbGYgd2l0aCBtZW4ncyBnb29kIHdpbGwgYXMgdGhlIGZhaXJlc3QgYW5kIGF0IHRoZSBzYW1lIHRpbWUgdGhlIHNlY3VyZXN0IHByb3RlY3Rpb24sIGhlIGFnYWluIGNvdXJ0ZWQgdGhlIHBlb3BsZSB3aXRoIGJhbnF1ZXRzIGFuZCBkaXN0cmlidXRpb25zIG9mIGdyYWluLCBhbmQgaGlzIHNvbGRpZXJzIHdpdGggbmV3bHkgcGxhbnRlZCBjb2xvbmllcywgdGhlIG1vc3QgY29uc3BpY3VvdXMgb2Ygd2hpY2ggd2VyZSBDYXJ0aGFnZSBhbmQgQ29yaW50aC4gVGhlIGVhcmxpZXIgY2FwdHVyZSBvZiBib3RoIHRoZXNlIGNpdGllcywgYXMgd2VsbCBhcyB0aGVpciBwcmVzZW50IHJlc3RvcmF0aW9uLCBjaGFuY2VkIHRvIGZhbGwgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lLjxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Qm90aCBjaXRpZXMgd2VyZSBjYXB0dXJlZCBpbiAxNDYgQi5DLiwgYW5kIGJvdGggd2VyZSByZXN0b3JlZCBpbiA0NCBCLkMuPC9ub3RlPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNTgiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBmb3IgdGhlIG5vYmxlcywgdG8gc29tZSBvZiB0aGVtIGhlIHByb21pc2VkIGNvbnN1bHNoaXBzIGFuZCBwcmFldG9yc2hpcHMgaW4gdGhlIGZ1dHVyZSwgb3RoZXJzIGhlIGFwcGVhc2VkIHdpdGggc3VuZHJ5IG90aGVyIHBvd2VycyBhbmQgaG9ub3VycywgYW5kIGluIGFsbCBoZSBpbXBsYW50ZWQgaG9wZXMsIHNpbmNlIGhlIGFyZGVudGx5IGRlc2lyZWQgdG8gcnVsZSBvdmVyIHdpbGxpbmcgc3ViamVjdHMuIFRoZXJlZm9yZSwgd2hlbiBNYXhpbXVzIHRoZSBjb25zdWwgZGllZCwgaGUgYXBwb2ludGVkIENhbmluaXVzIFJldmlsaXVzIGNvbnN1bCBmb3IgdGhlIG9uZSBkYXkgc3RpbGwgcmVtYWluaW5nIG9mIHRoZSB0ZXJtIG9mIG9mZmljZS4gVG8gaGltLCBhcyB3ZSBhcmUgdG9sZCwgbWFueSB3ZXJlIGdvaW5nIHdpdGggY29uZ3JhdHVsYXRpb25zIGFuZCBvZmZlcnMgb2YgZXNjb3J0LCB3aGVyZXVwb24gQ2ljZXJvIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHVzIG1ha2UgaGFzdGUsIG9yIGVsc2UgdGhlIG1hbidzIGNvbnN1bHNoaXAgd2lsbCBoYXZlIGV4cGlyZWQuPC9xPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['58.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgZm9yIHRoZSBub2JsZXMsIHRvIHNvbWUgb2YgdGhlbSBoZSBwcm9taXNlZCBjb25zdWxzaGlwcyBhbmQgcHJhZXRvcnNoaXBzIGluIHRoZSBmdXR1cmUsIG90aGVycyBoZSBhcHBlYXNlZCB3aXRoIHN1bmRyeSBvdGhlciBwb3dlcnMgYW5kIGhvbm91cnMsIGFuZCBpbiBhbGwgaGUgaW1wbGFudGVkIGhvcGVzLCBzaW5jZSBoZSBhcmRlbnRseSBkZXNpcmVkIHRvIHJ1bGUgb3ZlciB3aWxsaW5nIHN1YmplY3RzLiBUaGVyZWZvcmUsIHdoZW4gTWF4aW11cyB0aGUgY29uc3VsIGRpZWQsIGhlIGFwcG9pbnRlZCBDYW5pbml1cyBSZXZpbGl1cyBjb25zdWwgZm9yIHRoZSBvbmUgZGF5IHN0aWxsIHJlbWFpbmluZyBvZiB0aGUgdGVybSBvZiBvZmZpY2UuIFRvIGhpbSwgYXMgd2UgYXJlIHRvbGQsIG1hbnkgd2VyZSBnb2luZyB3aXRoIGNvbmdyYXR1bGF0aW9ucyBhbmQgb2ZmZXJzIG9mIGVzY29ydCwgd2hlcmV1cG9uIENpY2VybyBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TGV0IHVzIG1ha2UgaGFzdGUsIG9yIGVsc2UgdGhlIG1hbidzIGNvbnN1bHNoaXAgd2lsbCBoYXZlIGV4cGlyZWQuPC9xPgogICAgICAgICA8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIncyBtYW55IHN1Y2Nlc3NlcywgaG93ZXZlciwgZGlkIG5vdCBkaXZlcnQgaGlzIG5hdHVyYWwgc3Bpcml0IG9mIGVudGVycHJpc2UgYW5kIGFtYml0aW9uIHRvIHRoZSBlbmpveW1lbnQgb2Ygd2hhdCBoZSBoYWQgbGFib3Jpb3VzbHkgYWNoaWV2ZWQsIGJ1dCBzZXJ2ZWQgYXMgZnVlbCBhbmQgaW5jZW50aXZlIGZvciBmdXR1cmUgYWNoaWV2ZW1lbnRzLCBhbmQgYmVnYXQgaW4gaGltIHBsYW5zIGZvciBncmVhdGVyIGRlZWRzIGFuZCBhIHBhc3Npb24gZm9yIGZyZXNoIGdsb3J5LCBhcyB0aG91Z2ggaGUgaGFkIHVzZWQgdXAgd2hhdCBoZSBhbHJlYWR5IGhhZC4gV2hhdCBoZSBmZWx0IHdhcyB0aGVyZWZvcmUgbm90aGluZyBlbHNlIHRoYW4gZW11bGF0aW9uIG9mIGhpbXNlbGYsIGFzIGlmIGhlIGhhZCBiZWVuIGFub3RoZXIgbWFuLCBhbmQgYSBzb3J0IG9mIHJpdmFscnkgYmV0d2VlbiB3aGF0IGhlIGhhZCBkb25lIGFuZCB3aGF0IGhlIHB1cnBvc2VkIHRvIGRvLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgcGxhbm5lZCBhbmQgcHJlcGFyZWQgdG8gbWFrZSBhbiBleHBlZGl0aW9uIGFnYWluc3QgdGhlIFBhcnRoaWFuczsgYW5kIGFmdGVyIHN1YmR1aW5nIHRoZXNlIGFuZCBtYXJjaGluZyBhcm91bmQgdGhlIEV1eGluZSBieSB3YXkgb2YgSHlyY2FuaWEsIHRoZSBDYXNwaWFuIHNlYSwgYW5kIHRoZSBDYXVjYXN1cywgdG8gaW52YWRlIFNjeXRoaWE7IGFuZCBhZnRlciBvdmVycnVubmluZyB0aGUgY291bnRyaWVzIGJvcmRlcmluZyBvbiBHZXJtYW55IGFuZCBHZXJtYW55IGl0c2VsZiwgdG8gY29tZSBiYWNrIGJ5IHdheSBvZiBHYXVsIHRvIEl0YWx5LCBhbmQgc28gdG8gY29tcGxldGUgdGhpcyBjaXJjdWl0IG9mIGhpcyBlbXBpcmUsIHdoaWNoIHdvdWxkIHRoZW4gYmUgYm91bmRlZCBvbiBhbGwgc2lkZXMgYnkgdGhlIG9jZWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5EdXJpbmcgdGhpcyBleHBlZGl0aW9uLCBtb3Jlb3ZlciwgaGUgaW50ZW5kZWQgdG8gZGlnIHRocm91Z2ggdGhlIGlzdGhtdXMgb2YgQ29yaW50aCwgYW5kIGhhZCBhbHJlYWR5IHB1dCBBbmllbnVzIGluIGNoYXJnZSBvZiB0aGlzIHdvcms7IGhlIGludGVuZGVkIGFsc28gdG8gZGl2ZXJ0IHRoZSBUaWJlciBqdXN0IGJlbG93IHRoZSBjaXR5IGludG8gYSBkZWVwIGNoYW5uZWwsIGdpdmUgaXQgYSBiZW5kIHRvd2FyZHMgQ2lyY2VpdW0sIGFuZCBtYWtlIGl0IGVtcHR5IGludG8gdGhlIHNlYSBhdCBUZXJyYWNpbmEsIHRodXMgY29udHJpdmluZyBmb3IgbWVyY2hhbnRtZW4gYSBzYWZlIGFzIHdlbGwgYXMgYW4gZWFzeSBwYXNzYWdlIHRvIFJvbWU7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBiZXNpZGVzIHRoaXMsIHRvIGNvbnZlcnQgdGhlIG1hcnNoZXMgYWJvdXQgUG9tZW50aW51bSBhbmQgU2V0aWEgaW50byBhIHBsYWluIHdoaWNoIG1hbnkgdGhvdXNhbmRzIG9mIG1lbiBjb3VsZCBjdWx0aXZhdGU7IGFuZCBmdXJ0aGVyLCB0byBidWlsZCBtb2xlcyB3aGljaCBzaG91bGQgYmFycmljYWRlIHRoZSBzZWEgd2hlcmUgaXQgd2FzIG5lYXJlc3QgdG8gUm9tZSwgdG8gY2xlYXIgYXdheSB0aGUgaGlkZGVuIGRhbmdlcnMgb24gdGhlIHNob3JlIG9mIE9zdGlhLCBhbmQgdGhlbiBjb25zdHJ1Y3QgaGFyYm91cnMgYW5kIHJvYWRzdGVhZHMgc3VmZmljaWVudCBmb3IgdGhlIGdyZWF0IGZsZWV0cyB0aGF0IHdvdWxkIHZpc2l0IHRoZW0uIEFuZCBhbGwgdGhlc2UgdGhpbmdzIHdlcmUgaW4gcHJlcGFyYXRpb24uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['58.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkNhZXNhcidzIG1hbnkgc3VjY2Vzc2VzLCBob3dldmVyLCBkaWQgbm90IGRpdmVydCBoaXMgbmF0dXJhbCBzcGlyaXQgb2YgZW50ZXJwcmlzZSBhbmQgYW1iaXRpb24gdG8gdGhlIGVuam95bWVudCBvZiB3aGF0IGhlIGhhZCBsYWJvcmlvdXNseSBhY2hpZXZlZCwgYnV0IHNlcnZlZCBhcyBmdWVsIGFuZCBpbmNlbnRpdmUgZm9yIGZ1dHVyZSBhY2hpZXZlbWVudHMsIGFuZCBiZWdhdCBpbiBoaW0gcGxhbnMgZm9yIGdyZWF0ZXIgZGVlZHMgYW5kIGEgcGFzc2lvbiBmb3IgZnJlc2ggZ2xvcnksIGFzIHRob3VnaCBoZSBoYWQgdXNlZCB1cCB3aGF0IGhlIGFscmVhZHkgaGFkLiBXaGF0IGhlIGZlbHQgd2FzIHRoZXJlZm9yZSBub3RoaW5nIGVsc2UgdGhhbiBlbXVsYXRpb24gb2YgaGltc2VsZiwgYXMgaWYgaGUgaGFkIGJlZW4gYW5vdGhlciBtYW4sIGFuZCBhIHNvcnQgb2Ygcml2YWxyeSBiZXR3ZWVuIHdoYXQgaGUgaGFkIGRvbmUgYW5kIHdoYXQgaGUgcHVycG9zZWQgdG8gZG8uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBwbGFubmVkIGFuZCBwcmVwYXJlZCB0byBtYWtlIGFuIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgUGFydGhpYW5zOyBhbmQgYWZ0ZXIgc3ViZHVpbmcgdGhlc2UgYW5kIG1hcmNoaW5nIGFyb3VuZCB0aGUgRXV4aW5lIGJ5IHdheSBvZiBIeXJjYW5pYSwgdGhlIENhc3BpYW4gc2VhLCBhbmQgdGhlIENhdWNhc3VzLCB0byBpbnZhZGUgU2N5dGhpYTsgYW5kIGFmdGVyIG92ZXJydW5uaW5nIHRoZSBjb3VudHJpZXMgYm9yZGVyaW5nIG9uIEdlcm1hbnkgYW5kIEdlcm1hbnkgaXRzZWxmLCB0byBjb21lIGJhY2sgYnkgd2F5IG9mIEdhdWwgdG8gSXRhbHksIGFuZCBzbyB0byBjb21wbGV0ZSB0aGlzIGNpcmN1aXQgb2YgaGlzIGVtcGlyZSwgd2hpY2ggd291bGQgdGhlbiBiZSBib3VuZGVkIG9uIGFsbCBzaWRlcyBieSB0aGUgb2NlYW4uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['58.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkR1cmluZyB0aGlzIGV4cGVkaXRpb24sIG1vcmVvdmVyLCBoZSBpbnRlbmRlZCB0byBkaWcgdGhyb3VnaCB0aGUgaXN0aG11cyBvZiBDb3JpbnRoLCBhbmQgaGFkIGFscmVhZHkgcHV0IEFuaWVudXMgaW4gY2hhcmdlIG9mIHRoaXMgd29yazsgaGUgaW50ZW5kZWQgYWxzbyB0byBkaXZlcnQgdGhlIFRpYmVyIGp1c3QgYmVsb3cgdGhlIGNpdHkgaW50byBhIGRlZXAgY2hhbm5lbCwgZ2l2ZSBpdCBhIGJlbmQgdG93YXJkcyBDaXJjZWl1bSwgYW5kIG1ha2UgaXQgZW1wdHkgaW50byB0aGUgc2VhIGF0IFRlcnJhY2luYSwgdGh1cyBjb250cml2aW5nIGZvciBtZXJjaGFudG1lbiBhIHNhZmUgYXMgd2VsbCBhcyBhbiBlYXN5IHBhc3NhZ2UgdG8gUm9tZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['58.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBiZXNpZGVzIHRoaXMsIHRvIGNvbnZlcnQgdGhlIG1hcnNoZXMgYWJvdXQgUG9tZW50aW51bSBhbmQgU2V0aWEgaW50byBhIHBsYWluIHdoaWNoIG1hbnkgdGhvdXNhbmRzIG9mIG1lbiBjb3VsZCBjdWx0aXZhdGU7IGFuZCBmdXJ0aGVyLCB0byBidWlsZCBtb2xlcyB3aGljaCBzaG91bGQgYmFycmljYWRlIHRoZSBzZWEgd2hlcmUgaXQgd2FzIG5lYXJlc3QgdG8gUm9tZSwgdG8gY2xlYXIgYXdheSB0aGUgaGlkZGVuIGRhbmdlcnMgb24gdGhlIHNob3JlIG9mIE9zdGlhLCBhbmQgdGhlbiBjb25zdHJ1Y3QgaGFyYm91cnMgYW5kIHJvYWRzdGVhZHMgc3VmZmljaWVudCBmb3IgdGhlIGdyZWF0IGZsZWV0cyB0aGF0IHdvdWxkIHZpc2l0IHRoZW0uIEFuZCBhbGwgdGhlc2UgdGhpbmdzIHdlcmUgaW4gcHJlcGFyYXRpb24uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjU5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGFkanVzdG1lbnQgb2YgdGhlIGNhbGVuZGFyLCBob3dldmVyLCBhbmQgdGhlIGNvcnJlY3Rpb24gb2YgdGhlIGlycmVndWxhcml0eSBpbiB0aGUgY29tcHV0YXRpb24gb2YgdGltZSwgd2VyZSBub3Qgb25seSBzdHVkaWVkIHNjaWVudGlmaWNhbGx5IGJ5IGhpbSwgYnV0IGFsc28gYnJvdWdodCB0byBjb21wbGV0aW9uLCBhbmQgcHJvdmVkIHRvIGJlIG9mIHRoZSBoaWdoZXN0IHV0aWxpdHkuIEZvciBub3Qgb25seSBpbiB2ZXJ5IGFuY2llbnQgdGltZXMgd2FzIHRoZSByZWxhdGlvbiBvZiB0aGUgbHVuYXIgdG8gdGhlIHNvbGFyIHllYXIgaW4gZ3JlYXQgY29uZnVzaW9uIGFtb25nIHRoZSBSb21hbnMsIHNvIHRoYXQgdGhlIHNhY3JpZmljaWFsIGZlYXN0cyBhbmQgZmVzdGl2YWxzLCBkaXZlcmdpbmcgZ3JhZHVhbGx5LCBhdCBsYXN0IGZlbGwgaW4gb3Bwb3NpdGUgc2Vhc29ucyBvZiB0aGUgeWVhciwgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IGFsc28gYXQgdGhpcyB0aW1lIHBlb3BsZSBnZW5lcmFsbHkgaGFkIG5vIHdheSBvZiBjb21wdXRpbmcgdGhlIGFjdHVhbCBzb2xhciB5ZWFyOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoaXMgdGltZSB0aGUgUm9tYW4gY2FsZW5kYXIgd2FzIG1vcmUgdGhhbiB0d28gbW9udGhzIGFoZWFkIG9mIHRoZSBzb2xhciB5ZWFyLiBDYWVzYXIncyByZWZvcm0gd2VudCBpbnRvIGVmZmVjdCBpbiA0NiBCLkMuPC9ub3RlPiB0aGUgcHJpZXN0cyBhbG9uZSBrbmV3IHRoZSBwcm9wZXIgdGltZSwgYW5kIHdvdWxkIHN1ZGRlbmx5IGFuZCB0byBldmVyeWJvZHkncyBzdXJwcmlzZSBpbnNlcnQgdGhlIGludGVyY2FsYXJ5IG1vbnRoIGNhbGxlZCBNZXJjZWRvbml1cy4gTnVtYSB0aGUga2luZyBpcyBzYWlkIHRvIGhhdmUgYmVlbiB0aGUgZmlyc3QgdG8gaW50ZXJjYWxhdGUgdGhpcyBtb250aCwgdGh1cyBkZXZpc2luZyBhIHNsaWdodCBhbmQgc2hvcnQtbGl2ZWQgcmVtZWR5IGZvciB0aGUgZXJyb3IgaW4gcmVnYXJkIHRvIHRoZSBzaWRlcmVhbCBhbmQgc29sYXIgY3ljbGVzLCBhcyBJIGhhdmUgc2FpZCBpbiBoaXMgTGlmZS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMTguMSIgdmFsaWQ9InllcyI+Q2hhcHRlciB4dmlpaTwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgQ2Flc2FyIGxhaWQgdGhlIHByb2JsZW0gYmVmb3JlIHRoZSBiZXN0IHBoaWxvc29waGVycyBhbmQgbWF0aGVtYXRpY2lhbnMsIGFuZCBvdXQgb2YgdGhlIG1ldGhvZHMgb2YgY29ycmVjdGlvbiB3aGljaCB3ZXJlIGFscmVhZHkgYXQgaGFuZCBjb21wb3VuZGVkIG9uZSBvZiBoaXMgb3duIHdoaWNoIHdhcyBtb3JlIGFjY3VyYXRlIHRoYW4gYW55LiBUaGlzIHRoZSBSb21hbnMgdXNlIGRvd24gdG8gdGhlIHByZXNlbnQgdGltZSwgYW5kIGFyZSB0aG91Z2h0IHRvIGJlIGxlc3MgaW4gZXJyb3IgdGhhbiBvdGhlciBwZW9wbGVzIGFzIHJlZ2FyZHMgdGhlIGluZXF1YWxpdHkgYmV0d2VlbiB0aGUgbHVuYXIgYW5kIHNvbGFyIHllYXJzLiBIb3dldmVyLCBldmVuIHRoaXMgZnVybmlzaGVkIG9jY2FzaW9uIGZvciBibGFtZSB0byB0aG9zZSB3aG8gZW52aWVkIENhZXNhciBhbmQgZGlzbGlrZWQgaGlzIHBvd2VyLiBBdCBhbnkgcmF0ZSwgQ2ljZXJvIHRoZSBvcmF0b3IsIHdlIGFyZSB0b2xkLCB3aGVuIHNvbWUgb25lIHJlbWFya2VkIHRoYXQgTHlyYSB3b3VsZCByaXNlIG9uIHRoZSBtb3Jyb3csIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+WWVzLCBieSBkZWNyZWUsPC9xPiBpbXBseWluZyB0aGF0IG1lbiB3ZXJlIGNvbXBlbGxlZCB0byBhY2NlcHQgZXZlbiB0aGlzIGRpc3BlbnNhdGlvbi48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['59.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGFkanVzdG1lbnQgb2YgdGhlIGNhbGVuZGFyLCBob3dldmVyLCBhbmQgdGhlIGNvcnJlY3Rpb24gb2YgdGhlIGlycmVndWxhcml0eSBpbiB0aGUgY29tcHV0YXRpb24gb2YgdGltZSwgd2VyZSBub3Qgb25seSBzdHVkaWVkIHNjaWVudGlmaWNhbGx5IGJ5IGhpbSwgYnV0IGFsc28gYnJvdWdodCB0byBjb21wbGV0aW9uLCBhbmQgcHJvdmVkIHRvIGJlIG9mIHRoZSBoaWdoZXN0IHV0aWxpdHkuIEZvciBub3Qgb25seSBpbiB2ZXJ5IGFuY2llbnQgdGltZXMgd2FzIHRoZSByZWxhdGlvbiBvZiB0aGUgbHVuYXIgdG8gdGhlIHNvbGFyIHllYXIgaW4gZ3JlYXQgY29uZnVzaW9uIGFtb25nIHRoZSBSb21hbnMsIHNvIHRoYXQgdGhlIHNhY3JpZmljaWFsIGZlYXN0cyBhbmQgZmVzdGl2YWxzLCBkaXZlcmdpbmcgZ3JhZHVhbGx5LCBhdCBsYXN0IGZlbGwgaW4gb3Bwb3NpdGUgc2Vhc29ucyBvZiB0aGUgeWVhciwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['59.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBhbHNvIGF0IHRoaXMgdGltZSBwZW9wbGUgZ2VuZXJhbGx5IGhhZCBubyB3YXkgb2YgY29tcHV0aW5nIHRoZSBhY3R1YWwgc29sYXIgeWVhcjs8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkF0IHRoaXMgdGltZSB0aGUgUm9tYW4gY2FsZW5kYXIgd2FzIG1vcmUgdGhhbiB0d28gbW9udGhzIGFoZWFkIG9mIHRoZSBzb2xhciB5ZWFyLiBDYWVzYXIncyByZWZvcm0gd2VudCBpbnRvIGVmZmVjdCBpbiA0NiBCLkMuPC9ub3RlPiB0aGUgcHJpZXN0cyBhbG9uZSBrbmV3IHRoZSBwcm9wZXIgdGltZSwgYW5kIHdvdWxkIHN1ZGRlbmx5IGFuZCB0byBldmVyeWJvZHkncyBzdXJwcmlzZSBpbnNlcnQgdGhlIGludGVyY2FsYXJ5IG1vbnRoIGNhbGxlZCBNZXJjZWRvbml1cy4gTnVtYSB0aGUga2luZyBpcyBzYWlkIHRvIGhhdmUgYmVlbiB0aGUgZmlyc3QgdG8gaW50ZXJjYWxhdGUgdGhpcyBtb250aCwgdGh1cyBkZXZpc2luZyBhIHNsaWdodCBhbmQgc2hvcnQtbGl2ZWQgcmVtZWR5IGZvciB0aGUgZXJyb3IgaW4gcmVnYXJkIHRvIHRoZSBzaWRlcmVhbCBhbmQgc29sYXIgY3ljbGVzLCBhcyBJIGhhdmUgc2FpZCBpbiBoaXMgTGlmZS48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDE4LjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHZpaWk8L2JpYmw+Ljwvbm90ZT4KCQkJCQoJCQkJICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDE4LjEiIHZhbGlkPSJ5ZXMiPkNoYXB0ZXIgeHZpaWk8L2JpYmw+LjwvdHJhbnNsYXRpb24+"
translation['59.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBDYWVzYXIgbGFpZCB0aGUgcHJvYmxlbSBiZWZvcmUgdGhlIGJlc3QgcGhpbG9zb3BoZXJzIGFuZCBtYXRoZW1hdGljaWFucywgYW5kIG91dCBvZiB0aGUgbWV0aG9kcyBvZiBjb3JyZWN0aW9uIHdoaWNoIHdlcmUgYWxyZWFkeSBhdCBoYW5kIGNvbXBvdW5kZWQgb25lIG9mIGhpcyBvd24gd2hpY2ggd2FzIG1vcmUgYWNjdXJhdGUgdGhhbiBhbnkuIFRoaXMgdGhlIFJvbWFucyB1c2UgZG93biB0byB0aGUgcHJlc2VudCB0aW1lLCBhbmQgYXJlIHRob3VnaHQgdG8gYmUgbGVzcyBpbiBlcnJvciB0aGFuIG90aGVyIHBlb3BsZXMgYXMgcmVnYXJkcyB0aGUgaW5lcXVhbGl0eSBiZXR3ZWVuIHRoZSBsdW5hciBhbmQgc29sYXIgeWVhcnMuIEhvd2V2ZXIsIGV2ZW4gdGhpcyBmdXJuaXNoZWQgb2NjYXNpb24gZm9yIGJsYW1lIHRvIHRob3NlIHdobyBlbnZpZWQgQ2Flc2FyIGFuZCBkaXNsaWtlZCBoaXMgcG93ZXIuIEF0IGFueSByYXRlLCBDaWNlcm8gdGhlIG9yYXRvciwgd2UgYXJlIHRvbGQsIHdoZW4gc29tZSBvbmUgcmVtYXJrZWQgdGhhdCBMeXJhIHdvdWxkIHJpc2Ugb24gdGhlIG1vcnJvdywgc2FpZDogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcywgYnkgZGVjcmVlLDwvcT4gaW1wbHlpbmcgdGhhdCBtZW4gd2VyZSBjb21wZWxsZWQgdG8gYWNjZXB0IGV2ZW4gdGhpcyBkaXNwZW5zYXRpb24uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYwIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBtb3N0IG9wZW4gYW5kIGRlYWRseSBoYXRyZWQgdG93YXJkcyBoaW0gd2FzIHByb2R1Y2VkIGJ5IGhpcyBwYXNzaW9uIGZvciB0aGUgcm95YWwgcG93ZXIuIEZvciB0aGUgbXVsdGl0dWRlIHRoaXMgd2FzIGEgZmlyc3QgY2F1c2Ugb2YgaGF0cmVkLCBhbmQgZm9yIHRob3NlIHdobyBoYWQgbG9uZyBzbW90aGVyZWQgdGhlaXIgaGF0ZSwgYSBtb3N0IHNwZWNpb3VzIHByZXRleHQgZm9yIGl0LiBBbmQgeWV0IHRob3NlIHdobyB3ZXJlIGFkdm9jYXRpbmcgdGhpcyBob25vdXIgZm9yIENhZXNhciBhY3R1YWxseSBzcHJlYWQgYWJyb2FkIGFtb25nIHRoZSBwZW9wbGUgYSByZXBvcnQgdGhhdCBmcm9tIHRoZSBTaWJ5bGxpbmUgYm9va3MgaXQgYXBwZWFyZWQgdGhhdCBQYXJ0aGlhIGNvdWxkIGJlIHRha2VuIGlmIHRoZSBSb21hbnMgd2VudCB1cCBhZ2FpbnN0IGl0IHdpdGggYSBraW5nLCBidXQgb3RoZXJ3aXNlIGNvdWxkIG5vdCBiZSBhc3NhaWxlZDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIGFzIENhZXNhciB3YXMgY29taW5nIGRvd24gZnJvbSBBbGJhIGludG8gdGhlIGNpdHkgdGhleSB2ZW50dXJlZCB0byBoYWlsIGhpbSBhcyBraW5nLiBCdXQgYXQgdGhpcyB0aGUgcGVvcGxlIHdlcmUgY29uZm91bmRlZCwgYW5kIENhZXNhciwgZGlzdHVyYmVkIGluIG1pbmQsIHNhaWQgdGhhdCBoaXMgbmFtZSB3YXMgbm90IEtpbmcsIGJ1dCBDYWVzYXIsIGFuZCBzZWVpbmcgdGhhdCBoaXMgd29yZHMgcHJvZHVjZWQgYW4gdW5pdmVyc2FsIHNpbGVuY2UsIGhlIHBhc3NlZCBvbiB3aXRoIG5vIHZlcnkgY2hlZXJmdWwgb3IgY29udGVudGVkIGxvb2tzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3ZlciwgYWZ0ZXIgc3VuZHJ5IGV4dHJhdmFnYW50IGhvbm91cnMgaGFkIGJlZW4gdm90ZWQgaGltIGluIHRoZSBzZW5hdGUsIGl0IGNoYW5jZWQgdGhhdCBoZSB3YXMgc2l0dGluZyBhYm92ZSB0aGUgcm9zdHJhLCBhbmQgYXMgdGhlIHByYWV0b3JzIGFuZCBjb25zdWxzIGRyZXcgbmVhciwgd2l0aCB0aGUgd2hvbGUgc2VuYXRlIGZvbGxvd2luZyB0aGVtLCBoZSBkaWQgbm90IHJpc2UgdG8gcmVjZWl2ZSB0aGVtLCBidXQgYXMgaWYgaGUgd2VyZSBkZWFsaW5nIHdpdGggbWVyZSBwcml2YXRlIHBlcnNvbnMsIHJlcGxpZWQgdGhhdCBoaXMgaG9ub3VycyBuZWVkZWQgY3VydGFpbG1lbnQgcmF0aGVyIHRoYW4gZW5sYXJnZW1lbnQuIFRoaXMgdmV4ZWQgbm90IG9ubHkgdGhlIHNlbmF0ZSwgYnV0IGFsc28gdGhlIHBlb3BsZSwgd2hvIGZlbHQgdGhhdCBpbiB0aGUgcGVyc29ucyBvZiB0aGUgc2VuYXRvcnMgdGhlIHN0YXRlIHdhcyBpbnN1bHRlZCwgYW5kIGluIGEgdGVycmlibGUgZGVqZWN0aW9uIHRoZXkgd2VudCBhd2F5IGF0IG9uY2UsIGFsbCB3aG8gd2VyZSBub3Qgb2JsaWdlZCB0byByZW1haW4sIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgQ2Flc2FyIHRvbywgd2hlbiBoZSB3YXMgYXdhcmUgb2YgaGlzIG1pc3Rha2UsIGltbWVkaWF0ZWx5IHR1cm5lZCB0byBnbyBob21lLCBhbmQgZHJhd2luZyBiYWNrIGhpcyB0b2dhIGZyb20gaGlzIG5lY2ssIGNyaWVkIGluIGxvdWQgdG9uZXMgdG8gaGlzIGZyaWVuZHMgdGhhdCBoZSB3YXMgcmVhZHkgdG8gb2ZmZXIgaGlzIHRocm9hdCB0byBhbnkgb25lIHdobyB3aXNoZWQgdG8ga2lsbCBoaW0uIEJ1dCBhZnRlcndhcmRzIGhlIG1hZGUgaGlzIGRpc2Vhc2UgYW4gZXhjdXNlIGZvciBoaXMgYmVoYXZpb3VyLCBzYXlpbmcgdGhhdCB0aGUgc2Vuc2VzIG9mIHRob3NlIHdobyBhcmUgdGh1cyBhZmZsaWN0ZWQgZG8gbm90IHVzdWFsbHkgcmVtYWluIHN0ZWFkeSB3aGVuIHRoZXkgYWRkcmVzcyBhIG11bHRpdHVkZSBzdGFuZGluZywgYnV0IGFyZSBzcGVlZGlseSBzaGFrZW4gYW5kIHdoaXJsZWQgYWJvdXQsIGJyaW5naW5nIG9uIGdpZGRpbmVzcyBhbmQgaW5zZW5zaWJpbGl0eS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SG93ZXZlciwgd2hhdCBoZSBzYWlkIHdhcyBub3QgdHJ1ZTsgb24gdGhlIGNvbnRyYXJ5LCBoZSB3YXMgdmVyeSBkZXNpcm91cyBvZiByaXNpbmcgdG8gcmVjZWl2ZSB0aGUgc2VuYXRlOyBidXQgb25lIG9mIGhpcyBmcmllbmRzLCBhcyB0aGV5IHNheSwgb3IgcmF0aGVyIG9uZSBvZiBoaXMgZmxhdHRlcmVycywgQ29ybmVsaXVzIEJhbGJ1cywgcmVzdHJhaW5lZCBoaW0sIHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5SZW1lbWJlciB0aGF0IHRob3UgYXJ0IENhZXNhciwgYW5kIHBlcm1pdCB0aHlzZWxmIHRvIGJlIGNvdXJ0ZWQgYXMgYSBzdXBlcmlvci48L3E+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['60.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBtb3N0IG9wZW4gYW5kIGRlYWRseSBoYXRyZWQgdG93YXJkcyBoaW0gd2FzIHByb2R1Y2VkIGJ5IGhpcyBwYXNzaW9uIGZvciB0aGUgcm95YWwgcG93ZXIuIEZvciB0aGUgbXVsdGl0dWRlIHRoaXMgd2FzIGEgZmlyc3QgY2F1c2Ugb2YgaGF0cmVkLCBhbmQgZm9yIHRob3NlIHdobyBoYWQgbG9uZyBzbW90aGVyZWQgdGhlaXIgaGF0ZSwgYSBtb3N0IHNwZWNpb3VzIHByZXRleHQgZm9yIGl0LiBBbmQgeWV0IHRob3NlIHdobyB3ZXJlIGFkdm9jYXRpbmcgdGhpcyBob25vdXIgZm9yIENhZXNhciBhY3R1YWxseSBzcHJlYWQgYWJyb2FkIGFtb25nIHRoZSBwZW9wbGUgYSByZXBvcnQgdGhhdCBmcm9tIHRoZSBTaWJ5bGxpbmUgYm9va3MgaXQgYXBwZWFyZWQgdGhhdCBQYXJ0aGlhIGNvdWxkIGJlIHRha2VuIGlmIHRoZSBSb21hbnMgd2VudCB1cCBhZ2FpbnN0IGl0IHdpdGggYSBraW5nLCBidXQgb3RoZXJ3aXNlIGNvdWxkIG5vdCBiZSBhc3NhaWxlZDsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['60.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBhcyBDYWVzYXIgd2FzIGNvbWluZyBkb3duIGZyb20gQWxiYSBpbnRvIHRoZSBjaXR5IHRoZXkgdmVudHVyZWQgdG8gaGFpbCBoaW0gYXMga2luZy4gQnV0IGF0IHRoaXMgdGhlIHBlb3BsZSB3ZXJlIGNvbmZvdW5kZWQsIGFuZCBDYWVzYXIsIGRpc3R1cmJlZCBpbiBtaW5kLCBzYWlkIHRoYXQgaGlzIG5hbWUgd2FzIG5vdCBLaW5nLCBidXQgQ2Flc2FyLCBhbmQgc2VlaW5nIHRoYXQgaGlzIHdvcmRzIHByb2R1Y2VkIGFuIHVuaXZlcnNhbCBzaWxlbmNlLCBoZSBwYXNzZWQgb24gd2l0aCBubyB2ZXJ5IGNoZWVyZnVsIG9yIGNvbnRlbnRlZCBsb29rcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['60.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBhZnRlciBzdW5kcnkgZXh0cmF2YWdhbnQgaG9ub3VycyBoYWQgYmVlbiB2b3RlZCBoaW0gaW4gdGhlIHNlbmF0ZSwgaXQgY2hhbmNlZCB0aGF0IGhlIHdhcyBzaXR0aW5nIGFib3ZlIHRoZSByb3N0cmEsIGFuZCBhcyB0aGUgcHJhZXRvcnMgYW5kIGNvbnN1bHMgZHJldyBuZWFyLCB3aXRoIHRoZSB3aG9sZSBzZW5hdGUgZm9sbG93aW5nIHRoZW0sIGhlIGRpZCBub3QgcmlzZSB0byByZWNlaXZlIHRoZW0sIGJ1dCBhcyBpZiBoZSB3ZXJlIGRlYWxpbmcgd2l0aCBtZXJlIHByaXZhdGUgcGVyc29ucywgcmVwbGllZCB0aGF0IGhpcyBob25vdXJzIG5lZWRlZCBjdXJ0YWlsbWVudCByYXRoZXIgdGhhbiBlbmxhcmdlbWVudC4gVGhpcyB2ZXhlZCBub3Qgb25seSB0aGUgc2VuYXRlLCBidXQgYWxzbyB0aGUgcGVvcGxlLCB3aG8gZmVsdCB0aGF0IGluIHRoZSBwZXJzb25zIG9mIHRoZSBzZW5hdG9ycyB0aGUgc3RhdGUgd2FzIGluc3VsdGVkLCBhbmQgaW4gYSB0ZXJyaWJsZSBkZWplY3Rpb24gdGhleSB3ZW50IGF3YXkgYXQgb25jZSwgYWxsIHdobyB3ZXJlIG5vdCBvYmxpZ2VkIHRvIHJlbWFpbiwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['60.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPnNvIHRoYXQgQ2Flc2FyIHRvbywgd2hlbiBoZSB3YXMgYXdhcmUgb2YgaGlzIG1pc3Rha2UsIGltbWVkaWF0ZWx5IHR1cm5lZCB0byBnbyBob21lLCBhbmQgZHJhd2luZyBiYWNrIGhpcyB0b2dhIGZyb20gaGlzIG5lY2ssIGNyaWVkIGluIGxvdWQgdG9uZXMgdG8gaGlzIGZyaWVuZHMgdGhhdCBoZSB3YXMgcmVhZHkgdG8gb2ZmZXIgaGlzIHRocm9hdCB0byBhbnkgb25lIHdobyB3aXNoZWQgdG8ga2lsbCBoaW0uIEJ1dCBhZnRlcndhcmRzIGhlIG1hZGUgaGlzIGRpc2Vhc2UgYW4gZXhjdXNlIGZvciBoaXMgYmVoYXZpb3VyLCBzYXlpbmcgdGhhdCB0aGUgc2Vuc2VzIG9mIHRob3NlIHdobyBhcmUgdGh1cyBhZmZsaWN0ZWQgZG8gbm90IHVzdWFsbHkgcmVtYWluIHN0ZWFkeSB3aGVuIHRoZXkgYWRkcmVzcyBhIG11bHRpdHVkZSBzdGFuZGluZywgYnV0IGFyZSBzcGVlZGlseSBzaGFrZW4gYW5kIHdoaXJsZWQgYWJvdXQsIGJyaW5naW5nIG9uIGdpZGRpbmVzcyBhbmQgaW5zZW5zaWJpbGl0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['60.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHdoYXQgaGUgc2FpZCB3YXMgbm90IHRydWU7IG9uIHRoZSBjb250cmFyeSwgaGUgd2FzIHZlcnkgZGVzaXJvdXMgb2YgcmlzaW5nIHRvIHJlY2VpdmUgdGhlIHNlbmF0ZTsgYnV0IG9uZSBvZiBoaXMgZnJpZW5kcywgYXMgdGhleSBzYXksIG9yIHJhdGhlciBvbmUgb2YgaGlzIGZsYXR0ZXJlcnMsIENvcm5lbGl1cyBCYWxidXMsIHJlc3RyYWluZWQgaGltLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5SZW1lbWJlciB0aGF0IHRob3UgYXJ0IENhZXNhciwgYW5kIHBlcm1pdCB0aHlzZWxmIHRvIGJlIGNvdXJ0ZWQgYXMgYSBzdXBlcmlvci48L3E+CiAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdhcyBhZGRlZCB0byB0aGVzZSBjYXVzZXMgb2Ygb2ZmZW5jZSBoaXMgaW5zdWx0IHRvIHRoZSB0cmlidW5lcy4gSXQgd2FzLCBuYW1lbHksIHRoZSBmZXN0aXZhbCBvZiB0aGUgTHVwZXJjYWxpYSwgb2Ygd2hpY2ggbWFueSB3cml0ZSB0aGF0IGl0IHdhcyBhbmNpZW50bHkgY2VsZWJyYXRlZCBieSBzaGVwaGVyZHMsIGFuZCBoYXMgYWxzbyBzb21lIGNvbm5lY3Rpb24gd2l0aCB0aGUgQXJjYWRpYW4gTHljYWVhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BdCB0aGlzIHRpbWUgbWFueSBvZiB0aGUgbm9ibGUgeW91dGhzIGFuZCBvZiB0aGUgbWFnaXN0cmF0ZXMgcnVuIHVwIGFuZCBkb3duIHRocm91Z2ggdGhlIGNpdHkgbmFrZWQsIGZvciBzcG9ydCBhbmQgbGF1Z2h0ZXIgc3RyaWtpbmcgdGhvc2UgdGhleSBtZWV0IHdpdGggc2hhZ2d5IHRob25ncy4gQW5kIG1hbnkgd29tZW4gb2YgcmFuayBhbHNvIHB1cnBvc2VseSBnZXQgaW4gdGhlaXIgd2F5LCBhbmQgbGlrZSBjaGlsZHJlbiBhdCBzY2hvb2wgcHJlc2VudCB0aGVpciBoYW5kcyB0byBiZSBzdHJ1Y2ssIGJlbGlldmluZyB0aGF0IHRoZSBwcmVnbmFudCB3aWxsIHRodXMgYmUgaGVscGVkIHRvIGFuIGVhc3kgZGVsaXZlcnksIGFuZCB0aGUgYmFycmVuIHRvIHByZWduYW5jeS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgY2VyZW1vbmllcyBDYWVzYXIgd2FzIHdpdG5lc3NpbmcsIHNlYXRlZCB1cG9uIHRoZSByb3N0cmEgb24gYSBnb2xkZW4gdGhyb25lLCBhcnJheWVkIGluIHRyaXVtcGhhbCBhdHRpcmUuIEFuZCBBbnRvbnkgd2FzIG9uZSBvZiB0aGUgcnVubmVycyBpbiB0aGUgc2FjcmVkIHJhY2U7IGZvciBoZSB3YXMgY29uc3VsLiBBY2NvcmRpbmdseSwgYWZ0ZXIgaGUgaGFkIGRhc2hlZCBpbnRvIHRoZSBmb3J1bSBhbmQgdGhlIGNyb3dkIGhhZCBtYWRlIHdheSBmb3IgaGltLCBoZSBjYXJyaWVkIGEgZGlhZGVtLCByb3VuZCB3aGljaCBhIHdyZWF0aCBvZiBsYXVyZWwgd2FzIHRpZWQsIGFuZCBoZWxkIGl0IG91dCB0byBDYWVzYXIuIFRoZW4gdGhlcmUgd2FzIGFwcGxhdXNlLCBub3QgbG91ZCwgYnV0IHNsaWdodCBhbmQgcHJlY29uY2VydGVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiBDYWVzYXIgcHVzaGVkIGF3YXkgdGhlIGRpYWRlbSwgYWxsIHRoZSBwZW9wbGUgYXBwbGF1ZGVkOyBhbmQgd2hlbiBBbnRvbnkgb2ZmZXJlZCBpdCBhZ2FpbiwgZmV3LCBhbmQgd2hlbiBDYWVzYXIgZGVjbGluZWQgaXQgYWdhaW4sIGFsbCwgYXBwbGF1ZGVkLiBUaGUgZXhwZXJpbWVudCBoYXZpbmcgdGh1cyBmYWlsZWQsIENhZXNhciByb3NlIGZyb20gaGlzIHNlYXQsIGFmdGVyIG9yZGVyaW5nIHRoZSB3cmVhdGggdG8gYmUgY2FycmllZCB1cCB0byB0aGUgQ2FwaXRvbDsgYnV0IHRoZW4gaGlzIHN0YXR1ZXMgd2VyZSBzZWVuIHRvIGhhdmUgYmVlbiBkZWNrZWQgd2l0aCByb3lhbCBkaWFkZW1zLiBTbyB0d28gb2YgdGhlIHRyaWJ1bmVzLCBGbGF2aXVzIGFuZCBNYXJ5bGx1cywgd2VudCB1cCB0byB0aGVtIGFuZCBwdWxsZWQgb2ZmIHRoZSBkaWFkZW1zLCBhbmQgYWZ0ZXIgZGlzY292ZXJpbmcgdGhvc2Ugd2hvIGhhZCBmaXJzdCBoYWlsZWQgQ2Flc2FyIGFzIGtpbmcsIGxlZCB0aGVtIG9mZiB0byBwcmlzb24uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgcGVvcGxlIGZvbGxvd2VkIHRoZSB0cmlidW5lcyB3aXRoIGFwcGxhdXNlIGFuZCBjYWxsZWQgdGhlbSBCcnV0dXNlcywgYmVjYXVzZSBCcnV0dXMgd2FzIHRoZSBtYW4gd2hvIHB1dCBhbiBlbmQgdG8gdGhlIHJveWFsIHN1Y2Nlc3Npb24gYW5kIGJyb3VnaHQgdGhlIHBvd2VyIGludG8gdGhlIGhhbmRzIG9mIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBpbnN0ZWFkIG9mIGEgc29sZSBydWxlci48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQdWJsLiAxLjEiIHZhbGlkPSJ5ZXMiPgoJCQkJCQkgICAgICAgICAgICA8dGl0bGU+UHVibGljb2xhPHRpdGxlPiBpLjwvdGl0bGU+CiAgICAgICAgICAgICAgICAgIDwvdGl0bGU+CgkJCQkJICAgICAgICAgIDwvYmlibD4tPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB1YmwuIDkuMSIgdmFsaWQ9InllcyI+aXg8L2JpYmw+Ljwvbm90ZT4gQXQgdGhpcywgQ2Flc2FyIHdhcyBncmVhdGx5IHZleGVkLCBhbmQgZGVwcml2ZWQgTWFyeWxsdXMgYW5kIEZsYXZpdXMgb2YgdGhlaXIgb2ZmaWNlLCB3aGlsZSBpbiBoaXMgZGVudW5jaWF0aW9uIG9mIHRoZW0sIGFsdGhvdWdoIGhlIGF0IHRoZSBzYW1lIHRpbWUgaW5zdWx0ZWQgdGhlIHBlb3BsZSwgaGUgY2FsbGVkLCB0aGVtIHJlcGVhdGVkbHkgQnJ1dGVzIGFuZCBDeW1hZWFucy48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgd29yZCBicnV0dXMgaW4gTGF0aW4gc2lnbmlmaWVkIHN0dXBpZCAoY2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHVibC4gMy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPlB1YmxpY29sYTwvdGl0bGU+LCBpaWkuIDQ8L2JpYmw+KTsgYW5kIHRoZSBwZW9wbGUgb2YgQ3ltw6ksIGluIEFzaWEgTWlub3IsIHdlcmUgY2VsZWJyYXRlZCBmb3Igc3R1cGlkaXR5ICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iU3RyYWIuIDEzLjMuNiIgdmFsaWQ9InllcyI+U3RyYWJvLCBwLiA2MjI8L2JpYmw+KS48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['61.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlcmUgd2FzIGFkZGVkIHRvIHRoZXNlIGNhdXNlcyBvZiBvZmZlbmNlIGhpcyBpbnN1bHQgdG8gdGhlIHRyaWJ1bmVzLiBJdCB3YXMsIG5hbWVseSwgdGhlIGZlc3RpdmFsIG9mIHRoZSBMdXBlcmNhbGlhLCBvZiB3aGljaCBtYW55IHdyaXRlIHRoYXQgaXQgd2FzIGFuY2llbnRseSBjZWxlYnJhdGVkIGJ5IHNoZXBoZXJkcywgYW5kIGhhcyBhbHNvIHNvbWUgY29ubmVjdGlvbiB3aXRoIHRoZSBBcmNhZGlhbiBMeWNhZWEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['61.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoaXMgdGltZSBtYW55IG9mIHRoZSBub2JsZSB5b3V0aHMgYW5kIG9mIHRoZSBtYWdpc3RyYXRlcyBydW4gdXAgYW5kIGRvd24gdGhyb3VnaCB0aGUgY2l0eSBuYWtlZCwgZm9yIHNwb3J0IGFuZCBsYXVnaHRlciBzdHJpa2luZyB0aG9zZSB0aGV5IG1lZXQgd2l0aCBzaGFnZ3kgdGhvbmdzLiBBbmQgbWFueSB3b21lbiBvZiByYW5rIGFsc28gcHVycG9zZWx5IGdldCBpbiB0aGVpciB3YXksIGFuZCBsaWtlIGNoaWxkcmVuIGF0IHNjaG9vbCBwcmVzZW50IHRoZWlyIGhhbmRzIHRvIGJlIHN0cnVjaywgYmVsaWV2aW5nIHRoYXQgdGhlIHByZWduYW50IHdpbGwgdGh1cyBiZSBoZWxwZWQgdG8gYW4gZWFzeSBkZWxpdmVyeSwgYW5kIHRoZSBiYXJyZW4gdG8gcHJlZ25hbmN5LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['61.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGNlcmVtb25pZXMgQ2Flc2FyIHdhcyB3aXRuZXNzaW5nLCBzZWF0ZWQgdXBvbiB0aGUgcm9zdHJhIG9uIGEgZ29sZGVuIHRocm9uZSwgYXJyYXllZCBpbiB0cml1bXBoYWwgYXR0aXJlLiBBbmQgQW50b255IHdhcyBvbmUgb2YgdGhlIHJ1bm5lcnMgaW4gdGhlIHNhY3JlZCByYWNlOyBmb3IgaGUgd2FzIGNvbnN1bC4gQWNjb3JkaW5nbHksIGFmdGVyIGhlIGhhZCBkYXNoZWQgaW50byB0aGUgZm9ydW0gYW5kIHRoZSBjcm93ZCBoYWQgbWFkZSB3YXkgZm9yIGhpbSwgaGUgY2FycmllZCBhIGRpYWRlbSwgcm91bmQgd2hpY2ggYSB3cmVhdGggb2YgbGF1cmVsIHdhcyB0aWVkLCBhbmQgaGVsZCBpdCBvdXQgdG8gQ2Flc2FyLiBUaGVuIHRoZXJlIHdhcyBhcHBsYXVzZSwgbm90IGxvdWQsIGJ1dCBzbGlnaHQgYW5kIHByZWNvbmNlcnRlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['61.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIENhZXNhciBwdXNoZWQgYXdheSB0aGUgZGlhZGVtLCBhbGwgdGhlIHBlb3BsZSBhcHBsYXVkZWQ7IGFuZCB3aGVuIEFudG9ueSBvZmZlcmVkIGl0IGFnYWluLCBmZXcsIGFuZCB3aGVuIENhZXNhciBkZWNsaW5lZCBpdCBhZ2FpbiwgYWxsLCBhcHBsYXVkZWQuIFRoZSBleHBlcmltZW50IGhhdmluZyB0aHVzIGZhaWxlZCwgQ2Flc2FyIHJvc2UgZnJvbSBoaXMgc2VhdCwgYWZ0ZXIgb3JkZXJpbmcgdGhlIHdyZWF0aCB0byBiZSBjYXJyaWVkIHVwIHRvIHRoZSBDYXBpdG9sOyBidXQgdGhlbiBoaXMgc3RhdHVlcyB3ZXJlIHNlZW4gdG8gaGF2ZSBiZWVuIGRlY2tlZCB3aXRoIHJveWFsIGRpYWRlbXMuIFNvIHR3byBvZiB0aGUgdHJpYnVuZXMsIEZsYXZpdXMgYW5kIE1hcnlsbHVzLCB3ZW50IHVwIHRvIHRoZW0gYW5kIHB1bGxlZCBvZmYgdGhlIGRpYWRlbXMsIGFuZCBhZnRlciBkaXNjb3ZlcmluZyB0aG9zZSB3aG8gaGFkIGZpcnN0IGhhaWxlZCBDYWVzYXIgYXMga2luZywgbGVkIHRoZW0gb2ZmIHRvIHByaXNvbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['61.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCB0aGUgcGVvcGxlIGZvbGxvd2VkIHRoZSB0cmlidW5lcyB3aXRoIGFwcGxhdXNlIGFuZCBjYWxsZWQgdGhlbSBCcnV0dXNlcywgYmVjYXVzZSBCcnV0dXMgd2FzIHRoZSBtYW4gd2hvIHB1dCBhbiBlbmQgdG8gdGhlIHJveWFsIHN1Y2Nlc3Npb24gYW5kIGJyb3VnaHQgdGhlIHBvd2VyIGludG8gdGhlIGhhbmRzIG9mIHRoZSBzZW5hdGUgYW5kIHBlb3BsZSBpbnN0ZWFkIG9mIGEgc29sZSBydWxlci48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNlZSB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHVibC4gMS4xIiB2YWxpZD0ieWVzIj4KCQkJCQkJICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHVibGljb2xhPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IGkuPC90aXRsZT4KICAgICAgICAgICAgICAgICAgPC90aXRsZT4KCQkJCQkgICAgICAgICAgPC9iaWJsPi08YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQdWJsLiA5LjEiIHZhbGlkPSJ5ZXMiPml4PC9iaWJsPi48L25vdGU+IEF0IHRoaXMsIENhZXNhciB3YXMgZ3JlYXRseSB2ZXhlZCwgYW5kIGRlcHJpdmVkIE1hcnlsbHVzIGFuZCBGbGF2aXVzIG9mIHRoZWlyIG9mZmljZSwgd2hpbGUgaW4gaGlzIGRlbnVuY2lhdGlvbiBvZiB0aGVtLCBhbHRob3VnaCBoZSBhdCB0aGUgc2FtZSB0aW1lIGluc3VsdGVkIHRoZSBwZW9wbGUsIGhlIGNhbGxlZCwgdGhlbSByZXBlYXRlZGx5IEJydXRlcyBhbmQgQ3ltYWVhbnMuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHVibC4gMS4xIiB2YWxpZD0ieWVzIj4KCQkJCQkJICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHVibGljb2xhPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+IGkuPC90aXRsZT4KICAgICAgICAgICAgICAgICAgPC90aXRsZT4KCQkJCQkgICAgICAgICAgPC9iaWJsPi08dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5QdWJsaWNvbGE8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj4gaS48L3RpdGxlPgogICAgICAgICAgICAgICAgICA8L3RpdGxlPgoJCQkJCSAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj4gaS48L3RpdGxlPgogICAgICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBQdWJsLiA5LjEiIHZhbGlkPSJ5ZXMiPml4PC9iaWJsPi48bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSB3b3JkIGJydXR1cyBpbiBMYXRpbiBzaWduaWZpZWQgc3R1cGlkIChjZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIFB1YmwuIDMuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB1YmxpY29sYTwvdGl0bGU+LCBpaWkuIDQ8L2JpYmw+KTsgYW5kIHRoZSBwZW9wbGUgb2YgQ3ltw6ksIGluIEFzaWEgTWlub3IsIHdlcmUgY2VsZWJyYXRlZCBmb3Igc3R1cGlkaXR5ICg8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdHJhYi4gMTMuMy42IiB2YWxpZD0ieWVzIj5TdHJhYm8sIHAuIDYyMjwvYmlibD4pLjwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gUHVibC4gMy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+UHVibGljb2xhPC90aXRsZT4sIGlpaS4gNDwvYmlibD4pOyBhbmQgdGhlIHBlb3BsZSBvZiBDeW3DqSwgaW4gQXNpYSBNaW5vciwgd2VyZSBjZWxlYnJhdGVkIGZvciBzdHVwaWRpdHkgKDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlB1YmxpY29sYTwvdGl0bGU+LCBpaWkuIDQ8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJTdHJhYi4gMTMuMy42IiB2YWxpZD0ieWVzIj5TdHJhYm8sIHAuIDYyMjwvYmlibD4pLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlVuZGVyIHRoZXNlIGNpcmN1bXN0YW5jZXMgdGhlIG11bHRpdHVkZSB0dXJuZWQgdGhlaXIgdGhvdWdodHMgdG93YXJkcyBNYXJjdXMgQnJ1dHVzLCB3aG8gd2FzIHRob3VnaHQgdG8gYmUgYSBkZXNjZW5kYW50IG9mIHRoZSBlbGRlciBCcnV0dXMgb24gaGlzIGZhdGhlcidzIHNpZGUsIG9uIGhpcyBtb3RoZXIncyBzaWRlIGJlbG9uZ2VkIHRvIHRoZSBTZXJ2aWxpaSwgYW5vdGhlciBpbGx1c3RyaW91cyBob3VzZSwgYW5kIHdhcyBhIHNvbi1pbi1sYXcgYW5kIG5lcGhldyBvZiBDYXRvLiBUaGUgZGVzaXJlcyB3aGljaCBCcnV0dXMgZmVsdCB0byBhdHRlbXB0IG9mIGhpcyBvd24gYWNjb3JkIHRoZSBhYm9saXRpb24gb2YgdGhlIG1vbmFyY2h5IHdlcmUgYmx1bnRlZCBieSB0aGUgZmF2b3VycyBhbmQgaG9ub3VycyB0aGF0IGhlIGhhZCByZWNlaXZlZCBmcm9tIENhZXNhci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIG5vdCBvbmx5IGhhZCBoaXMgbGlmZSBiZWVuIHNwYXJlZCBhdCBQaGFyc2FsdXMgYWZ0ZXIgUG9tcGV5J3MgZmxpZ2h0LCBhbmQgdGhlIGxpdmVzIG9mIG1hbnkgb2YgaGlzIGZyaWVuZHMgYXQgaGlzIGVudHJlYXR5LCBidXQgYWxzbyBoZSBoYWQgZ3JlYXQgY3JlZGl0IHdpdGggQ2Flc2FyLiBIZSBoYWQgcmVjZWl2ZWQgdGhlIG1vc3QgaG9ub3VyYWJsZSBvZiB0aGUgcHJhZXRvcnNoaXBzIGZvciB0aGUgY3VycmVudCB5ZWFyLCBhbmQgd2FzIHRvIGJlIGNvbnN1bCB0aHJlZSB5ZWFycyBsYXRlciwgaGF2aW5nIGJlZW4gcHJlZmVycmVkIHRvIENhc3NpdXMsIHdobyB3YXMgYSByaXZhbCBjYW5kaWRhdGUuIEZvciBDYWVzYXIsIGFzIHdlIGFyZSB0b2xkLCBzYWlkIHRoYXQgQ2Fzc2l1cyB1cmdlZCB0aGUganVzdGVyIGNsYWltcyB0byB0aGUgb2ZmaWNlLCBidXQgdGhhdCBmb3IgaGlzIG93biBwYXJ0IGhlIGNvdWxkIG5vdCBwYXNzIEJydXR1cyBieS48bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA3LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIHZpaS4gMS0zPC9iaWJsPi48L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uY2UsIHRvbywgd2hlbiBjZXJ0YWluIHBlcnNvbnMgd2VyZSBhY3R1YWxseSBhY2N1c2luZyBCcnV0dXMgdG8gaGltLCB0aGUgY29uc3BpcmFjeSBiZWluZyBhbHJlYWR5IG9uIGZvb3QsIENhZXNhciB3b3VsZCBub3QgaGVlZCB0aGVtLCBidXQgbGF5aW5nIGhpcyBoYW5kIHVwb24gaGlzIGJvZHkgc2FpZCB0byB0aGUgYWNjdXNlcnM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnJ1dHVzIHdpbGwgd2FpdCBmb3IgdGhpcyBzaHJpdmVsbGVkIHNraW4sPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzIDwvdGl0bGU+Y2hhcHRlcnMgdmlpaS48L2JpYmw+LCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOS4xIiB2YWxpZD0ieWVzIj5peC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaW1wbHlpbmcgdGhhdCBCcnV0dXMgd2FzIHdvcnRoeSB0byBydWxlIGJlY2F1c2Ugb2YgaGlzIHZpcnR1ZSwgYnV0IHRoYXQgZm9yIHRoZSBzYWtlIG9mIHJ1bGluZyBoZSB3b3VsZCBub3QgYmVjb21lIGEgdGhhbmtsZXNzIHZpbGxhaW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlLCBob3dldmVyLCB3aG8gd2VyZSBlYWdlciBmb3IgdGhlIGNoYW5nZSwgYW5kIGZpeGVkIHRoZWlyIGV5ZXMgb24gQnJ1dHVzIGFsb25lLCBvciBvbiBoaW0gZmlyc3QsIGRpZCBub3QgdmVudHVyZSB0byB0YWxrIHdpdGggaGltIGRpcmVjdGx5LCBidXQgYnkgbmlnaHQgdGhleSBjb3ZlcmVkIGhpcyBwcmFldG9yaWFsIHRyaWJ1bmUgYW5kIGNoYWlyIHdpdGggd3JpdGluZ3MsIG1vc3Qgb2Ygd2hpY2ggd2VyZSBvZiB0aGlzIHNvcnQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgYXNsZWVwLCBCcnV0dXMsPC9xPiBvciw8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGFydCBub3QgQnJ1dHVzPC9xPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzIDwvdGl0bGU+Y2hhcHRlcnMgdmlpaS48L2JpYmw+LCA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOS4xIiB2YWxpZD0ieWVzIj5peC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gV2hlbiBDYXNzaXVzIHBlcmNlaXZlZCB0aGF0IHRoZSBhbWJpdGlvbiBvZiBCcnV0dXMgd2FzIHNvbWV3aGF0IHN0aXJyZWQgYnkgdGhlc2UgdGhpbmdzLCBoZSB3YXMgbW9yZSB1cmdlbnQgd2l0aCBoaW0gdGhhbiBiZWZvcmUsIGFuZCBwcmlja2VkIGhpbSBvbiwgaGF2aW5nIGhpbXNlbGYgYWxzbyBzb21lIHByaXZhdGUgZ3JvdW5kcyBmb3IgaGF0aW5nIENhZXNhcjsgdGhlc2UgSSBoYXZlIG1lbnRpb25lZCBpbiB0aGUgTGlmZSBvZiBCcnV0dXMuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkJydXR1cyA8L3RpdGxlPmNoYXB0ZXJzIHZpaWkuPC9iaWJsPiwgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDkuMSIgdmFsaWQ9InllcyI+aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCQkKCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWVzYXIgYWN0dWFsbHkgc3VzcGVjdGVkIGhpbSwgc28gdGhhdCBoZSBvbmNlIHNhaWQgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2hhdCwgdGhpbmsgeWUsIGRvdGggQ2Fzc2l1cyB3YW50PyBJIGxpa2UgaGltIG5vdCBvdmVyIG11Y2gsIGZvciBoZSBpcyBtdWNoIHRvbyBwYWxlLjwvcT4gQW5kIGFnYWluLCB3ZSBhcmUgdG9sZCB0aGF0IHdoZW4gQW50b255IGFuZCBEb2xhYmVsbGEgd2VyZSBhY2N1c2VkIHRvIGhpbSBvZiBwbG90dGluZyByZXZvbHV0aW9uLCBDYWVzYXIgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFtIG5vdCBtdWNoIGluIGZlYXIgb2YgdGhlc2UgZmF0LCBsb25nLWhhaXJlZCBmZWxsb3dzLCBidXQgcmF0aGVyIG9mIHRob3NlIHBhbGUsIHRoaW4gb25lcyw8L3E+IG1lYW5pbmcgQnJ1dHVzIGFuZCBDYXNzaXVzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['62.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VW5kZXIgdGhlc2UgY2lyY3Vtc3RhbmNlcyB0aGUgbXVsdGl0dWRlIHR1cm5lZCB0aGVpciB0aG91Z2h0cyB0b3dhcmRzIE1hcmN1cyBCcnV0dXMsIHdobyB3YXMgdGhvdWdodCB0byBiZSBhIGRlc2NlbmRhbnQgb2YgdGhlIGVsZGVyIEJydXR1cyBvbiBoaXMgZmF0aGVyJ3Mgc2lkZSwgb24gaGlzIG1vdGhlcidzIHNpZGUgYmVsb25nZWQgdG8gdGhlIFNlcnZpbGlpLCBhbm90aGVyIGlsbHVzdHJpb3VzIGhvdXNlLCBhbmQgd2FzIGEgc29uLWluLWxhdyBhbmQgbmVwaGV3IG9mIENhdG8uIFRoZSBkZXNpcmVzIHdoaWNoIEJydXR1cyBmZWx0IHRvIGF0dGVtcHQgb2YgaGlzIG93biBhY2NvcmQgdGhlIGFib2xpdGlvbiBvZiB0aGUgbW9uYXJjaHkgd2VyZSBibHVudGVkIGJ5IHRoZSBmYXZvdXJzIGFuZCBob25vdXJzIHRoYXQgaGUgaGFkIHJlY2VpdmVkIGZyb20gQ2Flc2FyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['62.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3Qgb25seSBoYWQgaGlzIGxpZmUgYmVlbiBzcGFyZWQgYXQgUGhhcnNhbHVzIGFmdGVyIFBvbXBleSdzIGZsaWdodCwgYW5kIHRoZSBsaXZlcyBvZiBtYW55IG9mIGhpcyBmcmllbmRzIGF0IGhpcyBlbnRyZWF0eSwgYnV0IGFsc28gaGUgaGFkIGdyZWF0IGNyZWRpdCB3aXRoIENhZXNhci4gSGUgaGFkIHJlY2VpdmVkIHRoZSBtb3N0IGhvbm91cmFibGUgb2YgdGhlIHByYWV0b3JzaGlwcyBmb3IgdGhlIGN1cnJlbnQgeWVhciwgYW5kIHdhcyB0byBiZSBjb25zdWwgdGhyZWUgeWVhcnMgbGF0ZXIsIGhhdmluZyBiZWVuIHByZWZlcnJlZCB0byBDYXNzaXVzLCB3aG8gd2FzIGEgcml2YWwgY2FuZGlkYXRlLiBGb3IgQ2Flc2FyLCBhcyB3ZSBhcmUgdG9sZCwgc2FpZCB0aGF0IENhc3NpdXMgdXJnZWQgdGhlIGp1c3RlciBjbGFpbXMgdG8gdGhlIG9mZmljZSwgYnV0IHRoYXQgZm9yIGhpcyBvd24gcGFydCBoZSBjb3VsZCBub3QgcGFzcyBCcnV0dXMgYnkuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDcuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCB2aWkuIDEtMzwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDcuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCB2aWkuIDEtMzwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIHZpaS4gMS0zPC90cmFuc2xhdGlvbj4="
translation['62.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uY2UsIHRvbywgd2hlbiBjZXJ0YWluIHBlcnNvbnMgd2VyZSBhY3R1YWxseSBhY2N1c2luZyBCcnV0dXMgdG8gaGltLCB0aGUgY29uc3BpcmFjeSBiZWluZyBhbHJlYWR5IG9uIGZvb3QsIENhZXNhciB3b3VsZCBub3QgaGVlZCB0aGVtLCBidXQgbGF5aW5nIGhpcyBoYW5kIHVwb24gaGlzIGJvZHkgc2FpZCB0byB0aGUgYWNjdXNlcnM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CcnV0dXMgd2lsbCB3YWl0IGZvciB0aGlzIHNocml2ZWxsZWQgc2tpbiw8L3E+CiAgICAgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA4LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXMgPC90aXRsZT5jaGFwdGVycyB2aWlpLjwvYmlibD4sIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDkuMSIgdmFsaWQ9InllcyI+aXguPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGltcGx5aW5nIHRoYXQgQnJ1dHVzIHdhcyB3b3J0aHkgdG8gcnVsZSBiZWNhdXNlIG9mIGhpcyB2aXJ0dWUsIGJ1dCB0aGF0IGZvciB0aGUgc2FrZSBvZiBydWxpbmcgaGUgd291bGQgbm90IGJlY29tZSBhIHRoYW5rbGVzcyB2aWxsYWluLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1cyA8L3RpdGxlPmNoYXB0ZXJzIHZpaWkuPC9iaWJsPiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzIDwvdGl0bGU+Y2hhcHRlcnMgdmlpaS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA5LjEiIHZhbGlkPSJ5ZXMiPml4LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['62.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRob3NlLCBob3dldmVyLCB3aG8gd2VyZSBlYWdlciBmb3IgdGhlIGNoYW5nZSwgYW5kIGZpeGVkIHRoZWlyIGV5ZXMgb24gQnJ1dHVzIGFsb25lLCBvciBvbiBoaW0gZmlyc3QsIGRpZCBub3QgdmVudHVyZSB0byB0YWxrIHdpdGggaGltIGRpcmVjdGx5LCBidXQgYnkgbmlnaHQgdGhleSBjb3ZlcmVkIGhpcyBwcmFldG9yaWFsIHRyaWJ1bmUgYW5kIGNoYWlyIHdpdGggd3JpdGluZ3MsIG1vc3Qgb2Ygd2hpY2ggd2VyZSBvZiB0aGlzIHNvcnQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGFydCBhc2xlZXAsIEJydXR1cyw8L3E+IG9yLDxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+VGhvdSBhcnQgbm90IEJydXR1czwvcT4KICAgICAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1cyA8L3RpdGxlPmNoYXB0ZXJzIHZpaWkuPC9iaWJsPiwgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOS4xIiB2YWxpZD0ieWVzIj5peC48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gV2hlbiBDYXNzaXVzIHBlcmNlaXZlZCB0aGF0IHRoZSBhbWJpdGlvbiBvZiBCcnV0dXMgd2FzIHNvbWV3aGF0IHN0aXJyZWQgYnkgdGhlc2UgdGhpbmdzLCBoZSB3YXMgbW9yZSB1cmdlbnQgd2l0aCBoaW0gdGhhbiBiZWZvcmUsIGFuZCBwcmlja2VkIGhpbSBvbiwgaGF2aW5nIGhpbXNlbGYgYWxzbyBzb21lIHByaXZhdGUgZ3JvdW5kcyBmb3IgaGF0aW5nIENhZXNhcjsgdGhlc2UgSSBoYXZlIG1lbnRpb25lZCBpbiB0aGUgTGlmZSBvZiBCcnV0dXMuPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzIDwvdGl0bGU+Y2hhcHRlcnMgdmlpaS48L2JpYmw+LCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXMgPC90aXRsZT5jaGFwdGVycyB2aWlpLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDkuMSIgdmFsaWQ9InllcyI+aXguPC9iaWJsPgogICAgICAgICAgICA8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gOC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzIDwvdGl0bGU+Y2hhcHRlcnMgdmlpaS48L2JpYmw+LCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA5LjEiIHZhbGlkPSJ5ZXMiPml4LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDguMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1cyA8L3RpdGxlPmNoYXB0ZXJzIHZpaWkuPC9iaWJsPiwgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzIDwvdGl0bGU+Y2hhcHRlcnMgdmlpaS48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiA5LjEiIHZhbGlkPSJ5ZXMiPml4LjwvYmlibD4KICAgICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['62.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBDYWVzYXIgYWN0dWFsbHkgc3VzcGVjdGVkIGhpbSwgc28gdGhhdCBoZSBvbmNlIHNhaWQgdG8gaGlzIGZyaWVuZHM6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaGF0LCB0aGluayB5ZSwgZG90aCBDYXNzaXVzIHdhbnQ/IEkgbGlrZSBoaW0gbm90IG92ZXIgbXVjaCwgZm9yIGhlIGlzIG11Y2ggdG9vIHBhbGUuPC9xPiBBbmQgYWdhaW4sIHdlIGFyZSB0b2xkIHRoYXQgd2hlbiBBbnRvbnkgYW5kIERvbGFiZWxsYSB3ZXJlIGFjY3VzZWQgdG8gaGltIG9mIHBsb3R0aW5nIHJldm9sdXRpb24sIENhZXNhciBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBhbSBub3QgbXVjaCBpbiBmZWFyIG9mIHRoZXNlIGZhdCwgbG9uZy1oYWlyZWQgZmVsbG93cywgYnV0IHJhdGhlciBvZiB0aG9zZSBwYWxlLCB0aGluIG9uZXMsPC9xPiBtZWFuaW5nIEJydXR1cyBhbmQgQ2Fzc2l1cy48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgZGVzdGlueSwgaXQgd291bGQgc2VlbSwgaXMgbm90IHNvIG11Y2ggdW5leHBlY3RlZCBhcyBpdCBpcyB1bmF2b2lkYWJsZSwgc2luY2UgdGhleSBzYXkgdGhhdCBhbWF6aW5nIHNpZ25zIGFuZCBhcHBhcml0aW9ucyB3ZXJlIHNlZW4uIE5vdywgYXMgZm9yIGxpZ2h0cyBpbiB0aGUgaGVhdmVucywgY3Jhc2hpbmcgc291bmRzIGJvcm5lIGFsbCBhYm91dCBieSBuaWdodCwgYW5kIGJpcmRzIG9mIG9tZW4gY29taW5nIGRvd24gaW50byB0aGUgZm9ydW0sIGl0IGlzIHBlcmhhcHMgbm90IHdvcnRoIHdoaWxlIHRvIG1lbnRpb24gdGhlc2UgcHJlY3Vyc29ycyBvZiBzbyBncmVhdCBhbiBldmVudDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YnV0IFN0cmFibyB0aGUgcGhpbG9zb3BoZXIgc2F5czxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb2JhYmx5IGluIHRoZSAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5IaXN0b3JpY2FsIENvbW1lbnRhcmllczwvcT4gY2l0ZWQgaW4gdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBMdWMuIDI4LjciIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+THVjdWxsdXM8L3RpdGxlPiwgeHh2aWlpLiA3PC9iaWJsPi48L25vdGU+IHRoYXQgbXVsdGl0dWRlcyBvZiBtZW4gYWxsIG9uIGZpcmUgd2VyZSBzZWVuIHJ1c2hpbmcgdXAsIGFuZCBhIHNvbGRpZXIncyBzbGF2ZSB0aHJldyBmcm9tIGhpcyBoYW5kIGEgY29waW91cyBmbGFtZSBhbmQgc2VlbWVkIHRvIHRoZSBzcGVjdGF0b3JzIHRvIGJlIGJ1cm5pbmcsIGJ1dCB3aGVuIHRoZSBmbGFtZSBjZWFzZWQgdGhlIG1hbiB3YXMgdW5pbmp1cmVkOyBoZSBzYXlzLCBtb3Jlb3ZlciwgdGhhdCB3aGVuIENhZXNhciBoaW1zZWxmIHdhcyBzYWNyaWZpY2luZywgdGhlIGhlYXJ0IG9mIHRoZSB2aWN0aW0gd2FzIG5vdCB0byBiZSBmb3VuZCwgYW5kIHRoZSBwcm9kaWd5IGNhdXNlZCBmZWFyLCBzaW5jZSBpbiB0aGUgY291cnNlIG9mIG5hdHVyZSwgY2VydGFpbmx5LCBhbiBhbmltYWwgd2l0aG91dCBhIGhlYXJ0IGNvdWxkIG5vdCBleGlzdC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZvbGxvd2luZyBzdG9yeSwgdG9vLCBpcyB0b2xkIGJ5IG1hbnkuIEEgY2VydGFpbiBzZWVyIHdhcm5lZCBDYWVzYXIgdG8gYmUgb24gaGlzIGd1YXJkIGFnYWluc3QgYSBncmVhdCBwZXJpbCBvbiB0aGUgZGF5IG9mIHRoZSBtb250aCBvZiBNYXJjaCB3aGljaCB0aGUgUm9tYW5zIGNhbGwgdGhlIElkZXM7IGFuZCB3aGVuIHRoZSBkYXkgaGFkIGNvbWUgYW5kIENhZXNhciB3YXMgb24gaGlzIHdheSB0byB0aGUgc2VuYXRlLWhvdXNlLCBoZSBncmVldGVkIHRoZSBzZWVyIHdpdGggYSBqZXN0IGFuZCBzYWlkOgoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgdGhlIElkZXMgb2YgTWFyY2ggYXJlIGNvbWUsPC9xPiBhbmQgdGhlIHNlZXIgc2FpZCB0byBoaW0gc29mdGx5OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkF5ZSwgdGhleSBhcmUgY29tZSwgYnV0IHRoZXkgYXJlIG5vdCBnb25lLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Nb3Jlb3Zlciwgb24gdGhlIGRheSBiZWZvcmUsIHdoZW4gTWFyY3VzIExlcGlkdXMgd2FzIGVudGVydGFpbmluZyBoaW0gYXQgc3VwcGVyLCBDYWVzYXIgY2hhbmNlZCB0byBiZSBzaWduaW5nIGxldHRlcnMsIGFzIGhpcyBjdXN0b20gd2FzLCB3aGlsZSByZWNsaW5pbmcgYXQgdGFibGUsIGFuZCB0aGUgZGlzY291cnNlIHR1cm5lZCBzdWRkZW5seSB1cG9uIHRoZSBxdWVzdGlvbiB3aGF0IHNvcnQgb2YgZGVhdGggd2FzIHRoZSBiZXN0OyBiZWZvcmUgYW55IG9uZSBlbHNlIGNvdWxkIGFuc3dlciBDYWVzYXIgY3JpZWQgb3V0OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPlRoYXQgd2hpY2ggaXMgdW5leHBlY3RlZC48L3E+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgd2hpbGUgaGUgd2FzIHNsZWVwaW5nIGFzIHVzdWFsIGJ5IHRoZSBzaWRlIG9mIGhpcyB3aWZlLCBhbGwgdGhlIHdpbmRvd3MgYW5kIGRvb3JzIG9mIHRoZSBjaGFtYmVyIGZsZXcgb3BlbiBhdCBvbmNlLCBhbmQgQ2Flc2FyLCBjb25mb3VuZGVkIGJ5IHRoZSBub2lzZSBhbmQgdGhlIGxpZ2h0IG9mIHRoZSBtb29uIHNoaW5pbmcgZG93biB1cG9uIGhpbSwgbm90aWNlZCB0aGF0IENhbHB1cm5pYSB3YXMgaW4gYSBkZWVwIHNsdW1iZXIsIGJ1dCB3YXMgdXR0ZXJpbmcgaW5kaXN0aW5jdCB3b3JkcyBhbmQgaW5hcnRpY3VsYXRlIGdyb2FucyBpbiBoZXIgc2xlZXA7IGZvciBzaGUgZHJlYW1lZCwgYXMgaXQgcHJvdmVkLCB0aGF0IHNoZSB3YXMgaG9sZGluZyBoZXIgbXVyZGVyZWQgaHVzYmFuZCBpbiBoZXIgYXJtcyBhbmQgYmV3YWlsaW5nIGhpbS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['63.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2MyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGRlc3RpbnksIGl0IHdvdWxkIHNlZW0sIGlzIG5vdCBzbyBtdWNoIHVuZXhwZWN0ZWQgYXMgaXQgaXMgdW5hdm9pZGFibGUsIHNpbmNlIHRoZXkgc2F5IHRoYXQgYW1hemluZyBzaWducyBhbmQgYXBwYXJpdGlvbnMgd2VyZSBzZWVuLiBOb3csIGFzIGZvciBsaWdodHMgaW4gdGhlIGhlYXZlbnMsIGNyYXNoaW5nIHNvdW5kcyBib3JuZSBhbGwgYWJvdXQgYnkgbmlnaHQsIGFuZCBiaXJkcyBvZiBvbWVuIGNvbWluZyBkb3duIGludG8gdGhlIGZvcnVtLCBpdCBpcyBwZXJoYXBzIG5vdCB3b3J0aCB3aGlsZSB0byBtZW50aW9uIHRoZXNlIHByZWN1cnNvcnMgb2Ygc28gZ3JlYXQgYW4gZXZlbnQ7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['63.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBTdHJhYm8gdGhlIHBoaWxvc29waGVyIHNheXM8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlByb2JhYmx5IGluIHRoZSAKCQkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhpc3RvcmljYWwgQ29tbWVudGFyaWVzPC9xPiBjaXRlZCBpbiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiAyOC43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeHh2aWlpLiA3PC9iaWJsPi48L25vdGU+IHRoYXQgbXVsdGl0dWRlcyBvZiBtZW4gYWxsIG9uIGZpcmUgd2VyZSBzZWVuIHJ1c2hpbmcgdXAsIGFuZCBhIHNvbGRpZXIncyBzbGF2ZSB0aHJldyBmcm9tIGhpcyBoYW5kIGEgY29waW91cyBmbGFtZSBhbmQgc2VlbWVkIHRvIHRoZSBzcGVjdGF0b3JzIHRvIGJlIGJ1cm5pbmcsIGJ1dCB3aGVuIHRoZSBmbGFtZSBjZWFzZWQgdGhlIG1hbiB3YXMgdW5pbmp1cmVkOyBoZSBzYXlzLCBtb3Jlb3ZlciwgdGhhdCB3aGVuIENhZXNhciBoaW1zZWxmIHdhcyBzYWNyaWZpY2luZywgdGhlIGhlYXJ0IG9mIHRoZSB2aWN0aW0gd2FzIG5vdCB0byBiZSBmb3VuZCwgYW5kIHRoZSBwcm9kaWd5IGNhdXNlZCBmZWFyLCBzaW5jZSBpbiB0aGUgY291cnNlIG9mIG5hdHVyZSwgY2VydGFpbmx5LCBhbiBhbmltYWwgd2l0aG91dCBhIGhlYXJ0IGNvdWxkIG5vdCBleGlzdC4gCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkhpc3RvcmljYWwgQ29tbWVudGFyaWVzPC9xPiBjaXRlZCBpbiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTHVjLiAyOC43IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+THVjdWxsdXM8L3RpdGxlPiwgeHh2aWlpLiA3PC9iaWJsPi48dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5MdWN1bGx1czwvdGl0bGU+LCB4eHZpaWkuIDc8L3RyYW5zbGF0aW9uPg=="
translation['63.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmb2xsb3dpbmcgc3RvcnksIHRvbywgaXMgdG9sZCBieSBtYW55LiBBIGNlcnRhaW4gc2VlciB3YXJuZWQgQ2Flc2FyIHRvIGJlIG9uIGhpcyBndWFyZCBhZ2FpbnN0IGEgZ3JlYXQgcGVyaWwgb24gdGhlIGRheSBvZiB0aGUgbW9udGggb2YgTWFyY2ggd2hpY2ggdGhlIFJvbWFucyBjYWxsIHRoZSBJZGVzOyBhbmQgd2hlbiB0aGUgZGF5IGhhZCBjb21lIGFuZCBDYWVzYXIgd2FzIG9uIGhpcyB3YXkgdG8gdGhlIHNlbmF0ZS1ob3VzZSwgaGUgZ3JlZXRlZCB0aGUgc2VlciB3aXRoIGEgamVzdCBhbmQgc2FpZDoKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2VsbCwgdGhlIElkZXMgb2YgTWFyY2ggYXJlIGNvbWUsPC9xPiBhbmQgdGhlIHNlZXIgc2FpZCB0byBoaW0gc29mdGx5OiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QXllLCB0aGV5IGFyZSBjb21lLCBidXQgdGhleSBhcmUgbm90IGdvbmUuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['63.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk1vcmVvdmVyLCBvbiB0aGUgZGF5IGJlZm9yZSwgd2hlbiBNYXJjdXMgTGVwaWR1cyB3YXMgZW50ZXJ0YWluaW5nIGhpbSBhdCBzdXBwZXIsIENhZXNhciBjaGFuY2VkIHRvIGJlIHNpZ25pbmcgbGV0dGVycywgYXMgaGlzIGN1c3RvbSB3YXMsIHdoaWxlIHJlY2xpbmluZyBhdCB0YWJsZSwgYW5kIHRoZSBkaXNjb3Vyc2UgdHVybmVkIHN1ZGRlbmx5IHVwb24gdGhlIHF1ZXN0aW9uIHdoYXQgc29ydCBvZiBkZWF0aCB3YXMgdGhlIGJlc3Q7IGJlZm9yZSBhbnkgb25lIGVsc2UgY291bGQgYW5zd2VyIENhZXNhciBjcmllZCBvdXQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaGF0IHdoaWNoIGlzIHVuZXhwZWN0ZWQuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['63.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMsIHdoaWxlIGhlIHdhcyBzbGVlcGluZyBhcyB1c3VhbCBieSB0aGUgc2lkZSBvZiBoaXMgd2lmZSwgYWxsIHRoZSB3aW5kb3dzIGFuZCBkb29ycyBvZiB0aGUgY2hhbWJlciBmbGV3IG9wZW4gYXQgb25jZSwgYW5kIENhZXNhciwgY29uZm91bmRlZCBieSB0aGUgbm9pc2UgYW5kIHRoZSBsaWdodCBvZiB0aGUgbW9vbiBzaGluaW5nIGRvd24gdXBvbiBoaW0sIG5vdGljZWQgdGhhdCBDYWxwdXJuaWEgd2FzIGluIGEgZGVlcCBzbHVtYmVyLCBidXQgd2FzIHV0dGVyaW5nIGluZGlzdGluY3Qgd29yZHMgYW5kIGluYXJ0aWN1bGF0ZSBncm9hbnMgaW4gaGVyIHNsZWVwOyBmb3Igc2hlIGRyZWFtZWQsIGFzIGl0IHByb3ZlZCwgdGhhdCBzaGUgd2FzIGhvbGRpbmcgaGVyIG11cmRlcmVkIGh1c2JhbmQgaW4gaGVyIGFybXMgYW5kIGJld2FpbGluZyBoaW0uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSwgaG93ZXZlciwgc2F5IHRoYXQgdGhpcyB3YXMgbm90IHRoZSB2aXNpb24gd2hpY2ggdGhlIHdvbWFuIGhhZDsgYnV0IHRoYXQgdGhlcmUgd2FzIGF0dGFjaGVkIHRvIENhZXNhcidzIGhvdXNlIHRvIGdpdmUgaXQgYWRvcm5tZW50IGFuZCBkaXN0aW5jdGlvbiwgYnkgdm90ZSBvZiB0aGUgc2VuYXRlLCBhIGdhYmxlLW9ybmFtZW50LCBhcyBMaXZ5IHNheXMsIGFuZCBpdCB3YXMgdGhpcyB3aGljaCBDYWxwdXJuaWEgaW4gaGVyIGRyZWFtcyBzYXcgdG9ybiBkb3duLCBhbmQgdGhlcmVmb3JlLCBhcyBzaGUgdGhvdWdodCwgd2FpbGVkIGFuZCB3ZXB0LiBBdCBhbGwgZXZlbnRzLCB3aGVuIGRheSBjYW1lLCBzaGUgYmVnZ2VkIENhZXNhciwgaWYgaXQgd2FzIHBvc3NpYmxlLCBub3QgdG8gZ28gb3V0LCBidXQgdG8gcG9zdHBvbmUgdGhlIG1lZXRpbmcgb2YgdGhlIHNlbmF0ZSA7IGlmLCBob3dldmVyLCBoZSBoYWQgbm8gY29uY2VybiBhdCBhbGwgZm9yIGhlciBkcmVhbXMsIHNoZSBiZXNvdWdodCBoaW0gdG8gZW5xdWlyZSBieSBvdGhlciBtb2RlcyBvZiBkaXZpbmF0aW9uIGFuZCBieSBzYWNyaWZpY2VzIGNvbmNlcm5pbmcgdGhlIGZ1dHVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjciIHVuaXQ9InNlY3Rpb24iIC8+QW5kIENhZXNhciBhbHNvLCBhcyBpdCB3b3VsZCBhcHBlYXIsIHdhcyBpbiBzb21lIHN1c3BpY2lvbiBhbmQgZmVhci4gRm9yIG5ldmVyIGJlZm9yZSBoYWQgaGUgcGVyY2VpdmVkIGluIENhbHB1cm5pYSBhbnkgd29tYW5pc2ggc3VwZXJzdGl0aW9uLCBidXQgbm93IGhlIHNhdyB0aGF0IHNoZSB3YXMgaW4gZ3JlYXQgZGlzdHJlc3MuIEFuZCB3aGVuIHRoZSBzZWVycyBhbHNvLCBhZnRlciBtYW55IHNhY3JpZmljZXMsIHRvbGQgaGltIHRoYXQgdGhlIG9tZW5zIHdlcmUgdW5mYXZvdXJhYmxlLCBoZSByZXNvbHZlZCB0byBzZW5kIEFudG9ueSBhbmQgZGlzbWlzcyB0aGUgc2VuYXRlLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['63.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlNvbWUsIGhvd2V2ZXIsIHNheSB0aGF0IHRoaXMgd2FzIG5vdCB0aGUgdmlzaW9uIHdoaWNoIHRoZSB3b21hbiBoYWQ7IGJ1dCB0aGF0IHRoZXJlIHdhcyBhdHRhY2hlZCB0byBDYWVzYXIncyBob3VzZSB0byBnaXZlIGl0IGFkb3JubWVudCBhbmQgZGlzdGluY3Rpb24sIGJ5IHZvdGUgb2YgdGhlIHNlbmF0ZSwgYSBnYWJsZS1vcm5hbWVudCwgYXMgTGl2eSBzYXlzLCBhbmQgaXQgd2FzIHRoaXMgd2hpY2ggQ2FscHVybmlhIGluIGhlciBkcmVhbXMgc2F3IHRvcm4gZG93biwgYW5kIHRoZXJlZm9yZSwgYXMgc2hlIHRob3VnaHQsIHdhaWxlZCBhbmQgd2VwdC4gQXQgYWxsIGV2ZW50cywgd2hlbiBkYXkgY2FtZSwgc2hlIGJlZ2dlZCBDYWVzYXIsIGlmIGl0IHdhcyBwb3NzaWJsZSwgbm90IHRvIGdvIG91dCwgYnV0IHRvIHBvc3Rwb25lIHRoZSBtZWV0aW5nIG9mIHRoZSBzZW5hdGUgOyBpZiwgaG93ZXZlciwgaGUgaGFkIG5vIGNvbmNlcm4gYXQgYWxsIGZvciBoZXIgZHJlYW1zLCBzaGUgYmVzb3VnaHQgaGltIHRvIGVucXVpcmUgYnkgb3RoZXIgbW9kZXMgb2YgZGl2aW5hdGlvbiBhbmQgYnkgc2FjcmlmaWNlcyBjb25jZXJuaW5nIHRoZSBmdXR1cmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['63.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBDYWVzYXIgYWxzbywgYXMgaXQgd291bGQgYXBwZWFyLCB3YXMgaW4gc29tZSBzdXNwaWNpb24gYW5kIGZlYXIuIEZvciBuZXZlciBiZWZvcmUgaGFkIGhlIHBlcmNlaXZlZCBpbiBDYWxwdXJuaWEgYW55IHdvbWFuaXNoIHN1cGVyc3RpdGlvbiwgYnV0IG5vdyBoZSBzYXcgdGhhdCBzaGUgd2FzIGluIGdyZWF0IGRpc3RyZXNzLiBBbmQgd2hlbiB0aGUgc2VlcnMgYWxzbywgYWZ0ZXIgbWFueSBzYWNyaWZpY2VzLCB0b2xkIGhpbSB0aGF0IHRoZSBvbWVucyB3ZXJlIHVuZmF2b3VyYWJsZSwgaGUgcmVzb2x2ZWQgdG8gc2VuZCBBbnRvbnkgYW5kIGRpc21pc3MgdGhlIHNlbmF0ZS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYXQgdGhpcyBqdW5jdHVyZSBEZWNpbXVzIEJydXR1cywgc3VybmFtZWQgQWxiaW51cywgd2hvIHdhcyBzbyB0cnVzdGVkIGJ5IENhZXNhciB0aGF0IGhlIHdhcyBlbnRlcmVkIGluIGhpcyB3aWxsIGFzIGhpcyBzZWNvbmQgaGVpciwgYnV0IHdhcyBwYXJ0bmVyIGluIHRoZSBjb25zcGlyYWN5IG9mIHRoZSBvdGhlciBCcnV0dXMgYW5kIENhc3NpdXMsIGZlYXJpbmcgdGhhdCBpZiBDYWVzYXIgc2hvdWxkIGVsdWRlIHRoYXQgZGF5LCB0aGVpciB1bmRlcnRha2luZyB3b3VsZCBiZWNvbWUga25vd24sIHJpZGljdWxlZCB0aGUgc2VlcnMgYW5kIGNoaWRlZCBDYWVzYXIgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Zm9yIGxheWluZyBoaW1zZWxmIG9wZW4gdG8gbWFsaWNpb3VzIGNoYXJnZXMgb24gdGhlIHBhcnQgb2YgdGhlIHNlbmF0b3JzLCB3aG8gd291bGQgdGhpbmsgdGhlbXNlbHZlcyBtb2NrZWQgYXQ7IGZvciB0aGV5IGhhZCBtZXQgYXQgaGlzIGJpZGRpbmcsIGFuZCB3ZXJlIHJlYWR5IGFuZCB3aWxsaW5nIHRvIHZvdGUgYXMgb25lIG1hbiB0aGF0IGhlIHNob3VsZCBiZSBkZWNsYXJlZCBraW5nIG9mIHRoZSBwcm92aW5jZXMgb3V0c2lkZSBvZiBJdGFseSwgYW5kIG1pZ2h0IHdlYXIgYSBkaWFkZW0gd2hlbiBoZSB3ZW50IGFueXdoZXJlIGVsc2UgYnkgbGFuZCBvciBzZWE7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpZiBzb21lIG9uZSBzaG91bGQgdGVsbCB0aGVtIGF0IHRoZWlyIHNlc3Npb24gdG8gYmUgZ29uZSBub3csIGJ1dCB0byBjb21lIGJhY2sgYWdhaW4gd2hlbiBDYWxwdXJuaWEgc2hvdWxkIGhhdmUgYmV0dGVyIGRyZWFtcywgd2hhdCBzcGVlY2hlcyB3b3VsZCBiZSBtYWRlIGJ5IGhpcyBlbmVtaWVzLCBvciB3aG8gd291bGQgbGlzdGVuIHRvIGhpcyBmcmllbmRzIHdoZW4gdGhleSB0cmllZCB0byBzaG93IHRoYXQgdGhpcyB3YXMgbm90IHNsYXZlcnkgYW5kIHR5cmFubnk/IEJ1dCBpZiBoZSB3YXMgZnVsbHkgcmVzb2x2ZWQgKEFsYmludXMgc2FpZCkgdG8gcmVnYXJkIHRoZSBkYXkgYXMgaW5hdXNwaWNpb3VzLCBpdCB3YXMgYmV0dGVyIHRoYXQgaGUgc2hvdWxkIGdvIGluIHBlcnNvbiBhbmQgYWRkcmVzcyB0aGUgc2VuYXRlLCBhbmQgdGhlbiBwb3N0cG9uZSBpdHMgYnVzaW5lc3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHNheWluZyB0aGVzZSB0aGluZ3MgQnJ1dHVzIHRvb2sgQ2Flc2FyIGJ5IHRoZSBoYW5kIGFuZCBiZWdhbiB0byBsZWFkIGhpbSBhbG9uZy4gQW5kIGhlIGhhZCBnb25lIGJ1dCBhIGxpdHRsZSB3YXkgZnJvbSBoaXMgZG9vciB3aGVuIGEgc2xhdmUgYmVsb25naW5nIHRvIHNvbWUgb25lIGVsc2UsIGVhZ2VyIHRvIGdldCBhdCBDYWVzYXIsIGJ1dCB1bmFibGUgdG8gZG8gc28gZm9yIHRoZSBwcmVzcyBvZiBudW1iZXJzIGFib3V0IGhpbSwgZm9yY2VkIGhpcyB3YXkgaW50byB0aGUgaG91c2UsIGdhdmUgaGltc2VsZiBpbnRvIHRoZSBoYW5kcyBvZiBDYWxwdXJuaWEsIGFuZCBiYWRlIGhlciBrZWVwIGhpbSBzZWN1cmUgdW50aWwgQ2Flc2FyIGNhbWUgYmFjaywgc2luY2UgaGUgaGFkIGltcG9ydGFudCBtYXR0ZXJzIHRvIHJlcG9ydCB0byBoaW0uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['64.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGF0IHRoaXMganVuY3R1cmUgRGVjaW11cyBCcnV0dXMsIHN1cm5hbWVkIEFsYmludXMsIHdobyB3YXMgc28gdHJ1c3RlZCBieSBDYWVzYXIgdGhhdCBoZSB3YXMgZW50ZXJlZCBpbiBoaXMgd2lsbCBhcyBoaXMgc2Vjb25kIGhlaXIsIGJ1dCB3YXMgcGFydG5lciBpbiB0aGUgY29uc3BpcmFjeSBvZiB0aGUgb3RoZXIgQnJ1dHVzIGFuZCBDYXNzaXVzLCBmZWFyaW5nIHRoYXQgaWYgQ2Flc2FyIHNob3VsZCBlbHVkZSB0aGF0IGRheSwgdGhlaXIgdW5kZXJ0YWtpbmcgd291bGQgYmVjb21lIGtub3duLCByaWRpY3VsZWQgdGhlIHNlZXJzIGFuZCBjaGlkZWQgQ2Flc2FyIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['64.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmZvciBsYXlpbmcgaGltc2VsZiBvcGVuIHRvIG1hbGljaW91cyBjaGFyZ2VzIG9uIHRoZSBwYXJ0IG9mIHRoZSBzZW5hdG9ycywgd2hvIHdvdWxkIHRoaW5rIHRoZW1zZWx2ZXMgbW9ja2VkIGF0OyBmb3IgdGhleSBoYWQgbWV0IGF0IGhpcyBiaWRkaW5nLCBhbmQgd2VyZSByZWFkeSBhbmQgd2lsbGluZyB0byB2b3RlIGFzIG9uZSBtYW4gdGhhdCBoZSBzaG91bGQgYmUgZGVjbGFyZWQga2luZyBvZiB0aGUgcHJvdmluY2VzIG91dHNpZGUgb2YgSXRhbHksIGFuZCBtaWdodCB3ZWFyIGEgZGlhZGVtIHdoZW4gaGUgd2VudCBhbnl3aGVyZSBlbHNlIGJ5IGxhbmQgb3Igc2VhOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['64.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmJ1dCBpZiBzb21lIG9uZSBzaG91bGQgdGVsbCB0aGVtIGF0IHRoZWlyIHNlc3Npb24gdG8gYmUgZ29uZSBub3csIGJ1dCB0byBjb21lIGJhY2sgYWdhaW4gd2hlbiBDYWxwdXJuaWEgc2hvdWxkIGhhdmUgYmV0dGVyIGRyZWFtcywgd2hhdCBzcGVlY2hlcyB3b3VsZCBiZSBtYWRlIGJ5IGhpcyBlbmVtaWVzLCBvciB3aG8gd291bGQgbGlzdGVuIHRvIGhpcyBmcmllbmRzIHdoZW4gdGhleSB0cmllZCB0byBzaG93IHRoYXQgdGhpcyB3YXMgbm90IHNsYXZlcnkgYW5kIHR5cmFubnk/IEJ1dCBpZiBoZSB3YXMgZnVsbHkgcmVzb2x2ZWQgKEFsYmludXMgc2FpZCkgdG8gcmVnYXJkIHRoZSBkYXkgYXMgaW5hdXNwaWNpb3VzLCBpdCB3YXMgYmV0dGVyIHRoYXQgaGUgc2hvdWxkIGdvIGluIHBlcnNvbiBhbmQgYWRkcmVzcyB0aGUgc2VuYXRlLCBhbmQgdGhlbiBwb3N0cG9uZSBpdHMgYnVzaW5lc3MuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['64.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoaWxlIHNheWluZyB0aGVzZSB0aGluZ3MgQnJ1dHVzIHRvb2sgQ2Flc2FyIGJ5IHRoZSBoYW5kIGFuZCBiZWdhbiB0byBsZWFkIGhpbSBhbG9uZy4gQW5kIGhlIGhhZCBnb25lIGJ1dCBhIGxpdHRsZSB3YXkgZnJvbSBoaXMgZG9vciB3aGVuIGEgc2xhdmUgYmVsb25naW5nIHRvIHNvbWUgb25lIGVsc2UsIGVhZ2VyIHRvIGdldCBhdCBDYWVzYXIsIGJ1dCB1bmFibGUgdG8gZG8gc28gZm9yIHRoZSBwcmVzcyBvZiBudW1iZXJzIGFib3V0IGhpbSwgZm9yY2VkIGhpcyB3YXkgaW50byB0aGUgaG91c2UsIGdhdmUgaGltc2VsZiBpbnRvIHRoZSBoYW5kcyBvZiBDYWxwdXJuaWEsIGFuZCBiYWRlIGhlciBrZWVwIGhpbSBzZWN1cmUgdW50aWwgQ2Flc2FyIGNhbWUgYmFjaywgc2luY2UgaGUgaGFkIGltcG9ydGFudCBtYXR0ZXJzIHRvIHJlcG9ydCB0byBoaW0uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIEFydGVtaWRvcnVzLCBhIENuaWRpYW4gYnkgYmlydGgsIGEgdGVhY2hlciBvZiBHcmVlayBwaGlsb3NvcGh5LCBhbmQgb24gdGhpcyBhY2NvdW50IGJyb3VnaHQgaW50byBpbnRpbWFjeSB3aXRoIHNvbWUgb2YgdGhlIGZvbGxvd2VycyBvZiBCcnV0dXMsIHNvIHRoYXQgaGUgYWxzbyBrbmV3IG1vc3Qgb2Ygd2hhdCB0aGV5IHdlcmUgZG9pbmcsIGNhbWUgYnJpbmdpbmcgdG8gQ2Flc2FyIGluIGEgc21hbGwgcm9sbCB0aGUgZGlzY2xvc3VyZXMgd2hpY2ggaGUgd2FzIGdvaW5nIHRvIG1ha2U7IGJ1dCBzZWVpbmcgdGhhdCBDYWVzYXIgdG9vayBhbGwgc3VjaCByb2xscyBhbmQgaGFuZGVkIHRoZW0gdG8gaGlzIGF0dGVuZGFudHMsIGhlIGNhbWUgcXVpdGUgbmVhciwgYW5kIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UmVhZCB0aGlzLCBDYWVzYXIsIGJ5IHRoeXNlbGYsIGFuZCBzcGVlZGlseTsgZm9yIGl0IGNvbnRhaW5zIG1hdHRlcnMgb2YgaW1wb3J0YW5jZSBhbmQgb2YgY29uY2VybiB0byB0aGVlLjwvcT4gCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BY2NvcmRpbmdseSwgQ2Flc2FyIHRvb2sgdGhlIHJvbGwgYW5kIHdvdWxkIGhhdmUgcmVhZCBpdCwgYnV0IHdhcyBwcmV2ZW50ZWQgYnkgdGhlIG11bHRpdHVkZSBvZiBwZW9wbGUgd2hvIGVuZ2FnZWQgaGlzIGF0dGVudGlvbiwgYWx0aG91Z2ggaGUgc2V0IG91dCB0byBkbyBzbyBtYW55IHRpbWVzLCBhbmQgaG9sZGluZyBpbiBoaXMgaGFuZCBhbmQgcmV0YWluaW5nIHRoYXQgcm9sbCBhbG9uZSwgaGUgcGFzc2VkIG9uIGludG8gdGhlIHNlbmF0ZS4gU29tZSwgaG93ZXZlciwgc2F5IHRoYXQgYW5vdGhlciBwZXJzb24gZ2F2ZSBoaW0gdGhpcyByb2xsLCBhbmQgdGhhdCBBcnRlbWlkb3J1cyBkaWQgbm90IGdldCB0byBoaW0gYXQgYWxsLCBidXQgd2FzIGNyb3dkZWQgYXdheSBhbGwgYWxvbmcgdGhlIHJvdXRlLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['65.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIEFydGVtaWRvcnVzLCBhIENuaWRpYW4gYnkgYmlydGgsIGEgdGVhY2hlciBvZiBHcmVlayBwaGlsb3NvcGh5LCBhbmQgb24gdGhpcyBhY2NvdW50IGJyb3VnaHQgaW50byBpbnRpbWFjeSB3aXRoIHNvbWUgb2YgdGhlIGZvbGxvd2VycyBvZiBCcnV0dXMsIHNvIHRoYXQgaGUgYWxzbyBrbmV3IG1vc3Qgb2Ygd2hhdCB0aGV5IHdlcmUgZG9pbmcsIGNhbWUgYnJpbmdpbmcgdG8gQ2Flc2FyIGluIGEgc21hbGwgcm9sbCB0aGUgZGlzY2xvc3VyZXMgd2hpY2ggaGUgd2FzIGdvaW5nIHRvIG1ha2U7IGJ1dCBzZWVpbmcgdGhhdCBDYWVzYXIgdG9vayBhbGwgc3VjaCByb2xscyBhbmQgaGFuZGVkIHRoZW0gdG8gaGlzIGF0dGVuZGFudHMsIGhlIGNhbWUgcXVpdGUgbmVhciwgYW5kIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5SZWFkIHRoaXMsIENhZXNhciwgYnkgdGh5c2VsZiwgYW5kIHNwZWVkaWx5OyBmb3IgaXQgY29udGFpbnMgbWF0dGVycyBvZiBpbXBvcnRhbmNlIGFuZCBvZiBjb25jZXJuIHRvIHRoZWUuPC9xPiAKCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['65.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBDYWVzYXIgdG9vayB0aGUgcm9sbCBhbmQgd291bGQgaGF2ZSByZWFkIGl0LCBidXQgd2FzIHByZXZlbnRlZCBieSB0aGUgbXVsdGl0dWRlIG9mIHBlb3BsZSB3aG8gZW5nYWdlZCBoaXMgYXR0ZW50aW9uLCBhbHRob3VnaCBoZSBzZXQgb3V0IHRvIGRvIHNvIG1hbnkgdGltZXMsIGFuZCBob2xkaW5nIGluIGhpcyBoYW5kIGFuZCByZXRhaW5pbmcgdGhhdCByb2xsIGFsb25lLCBoZSBwYXNzZWQgb24gaW50byB0aGUgc2VuYXRlLiBTb21lLCBob3dldmVyLCBzYXkgdGhhdCBhbm90aGVyIHBlcnNvbiBnYXZlIGhpbSB0aGlzIHJvbGwsIGFuZCB0aGF0IEFydGVtaWRvcnVzIGRpZCBub3QgZ2V0IHRvIGhpbSBhdCBhbGwsIGJ1dCB3YXMgY3Jvd2RlZCBhd2F5IGFsbCBhbG9uZyB0aGUgcm91dGUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gZmFyLCBwZXJoYXBzLCB0aGVzZSB0aGluZ3MgbWF5IGhhdmUgaGFwcGVuZWQgb2YgdGhlaXIgb3duIGFjY29yZDsgdGhlIHBsYWNlLCBob3dldmVyLCB3aGljaCB3YXMgdGhlIHNjZW5lIG9mIHRoYXQgc3RydWdnbGUgYW5kIG11cmRlciwgYW5kIGluIHdoaWNoIHRoZSBzZW5hdGUgd2FzIHRoZW4gYXNzZW1ibGVkLCBzaW5jZSBpdCBjb250YWluZWQgYSBzdGF0dWUgb2YgUG9tcGV5IGFuZCBoYWQgYmVlbiBkZWRpY2F0ZWQgYnkgUG9tcGV5IGFzIGFuIGFkZGl0aW9uYWwgb3JuYW1lbnQgdG8gaGlzIHRoZWF0cmUsIG1hZGUgaXQgd2hvbGx5IGNsZWFyIHRoYXQgaXQgd2FzIHRoZSB3b3JrIG9mIHNvbWUgaGVhdmVubHkgcG93ZXIgd2hpY2ggd2FzIGNhbGxpbmcgYW5kIGd1aWRpbmcgdGhlIGFjdGlvbiB0aGl0aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5JbmRlZWQsIGl0IGlzIGFsc28gc2FpZCB0aGF0IENhc3NpdXMsIHR1cm5pbmcgaGlzIGV5ZXMgdG93YXJkIHRoZSBzdGF0dWUgb2YgUG9tcGV5IGJlZm9yZSB0aGUgYXR0YWNrIGJlZ2FuLCBpbnZva2VkIGl0IHNpbGVudGx5LCBhbHRob3VnaCBoZSB3YXMgbXVjaCBhZGRpY3RlZCB0byB0aGUgZG9jdHJpbmVzIG9mIEVwaWN1cnVzOzxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGRpc2NvdXJhZ2VkIGJlbGllZiBpbiBzdXBlcmh1bWFuIHBvd2Vycy48L25vdGU+IGJ1dCB0aGUgY3Jpc2lzLCBhcyBpdCB3b3VsZCBzZWVtLCB3aGVuIHRoZSBkcmVhZGZ1bCBhdHRlbXB0IHdhcyBub3cgY2xvc2UgYXQgaGFuZCwgcmVwbGFjZWQgaGlzIGZvcm1lciBjb29sIGNhbGN1bGF0aW9ucyB3aXRoIGRpdmluZWx5IGluc3BpcmVkIGVtb3Rpb24uPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['66.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+U28gZmFyLCBwZXJoYXBzLCB0aGVzZSB0aGluZ3MgbWF5IGhhdmUgaGFwcGVuZWQgb2YgdGhlaXIgb3duIGFjY29yZDsgdGhlIHBsYWNlLCBob3dldmVyLCB3aGljaCB3YXMgdGhlIHNjZW5lIG9mIHRoYXQgc3RydWdnbGUgYW5kIG11cmRlciwgYW5kIGluIHdoaWNoIHRoZSBzZW5hdGUgd2FzIHRoZW4gYXNzZW1ibGVkLCBzaW5jZSBpdCBjb250YWluZWQgYSBzdGF0dWUgb2YgUG9tcGV5IGFuZCBoYWQgYmVlbiBkZWRpY2F0ZWQgYnkgUG9tcGV5IGFzIGFuIGFkZGl0aW9uYWwgb3JuYW1lbnQgdG8gaGlzIHRoZWF0cmUsIG1hZGUgaXQgd2hvbGx5IGNsZWFyIHRoYXQgaXQgd2FzIHRoZSB3b3JrIG9mIHNvbWUgaGVhdmVubHkgcG93ZXIgd2hpY2ggd2FzIGNhbGxpbmcgYW5kIGd1aWRpbmcgdGhlIGFjdGlvbiB0aGl0aGVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['66.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgaXQgaXMgYWxzbyBzYWlkIHRoYXQgQ2Fzc2l1cywgdHVybmluZyBoaXMgZXllcyB0b3dhcmQgdGhlIHN0YXR1ZSBvZiBQb21wZXkgYmVmb3JlIHRoZSBhdHRhY2sgYmVnYW4sIGludm9rZWQgaXQgc2lsZW50bHksIGFsdGhvdWdoIGhlIHdhcyBtdWNoIGFkZGljdGVkIHRvIHRoZSBkb2N0cmluZXMgb2YgRXBpY3VydXM7PG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGVzZSBkaXNjb3VyYWdlZCBiZWxpZWYgaW4gc3VwZXJodW1hbiBwb3dlcnMuPC9ub3RlPiBidXQgdGhlIGNyaXNpcywgYXMgaXQgd291bGQgc2VlbSwgd2hlbiB0aGUgZHJlYWRmdWwgYXR0ZW1wdCB3YXMgbm93IGNsb3NlIGF0IGhhbmQsIHJlcGxhY2VkIGhpcyBmb3JtZXIgY29vbCBjYWxjdWxhdGlvbnMgd2l0aCBkaXZpbmVseSBpbnNwaXJlZCBlbW90aW9uLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIEFudG9ueSwgd2hvIHdhcyBhIGZyaWVuZCBvZiBDYWVzYXIncyBhbmQgYSByb2J1c3QgbWFuLCB3YXMgZGV0YWluZWQgb3V0c2lkZSBieSBCcnV0dXMgQWxiaW51cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5CeSBDYWl1cyBUcmVib25pdXMsIHJhdGhlciwgYXMgUGx1dGFyY2ggc2F5cyBpbiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDE3LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+QnJ1dHVzPC90aXRsZT4sIHh2aWkuIDE8L2JpYmw+LiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkFwcC4gQkMgMi4xNi4xMTciIHZhbGlkPSJ5ZXMiPkFwcGlhbiwgPHRpdGxlPkIuIEMuPC90aXRsZT4gaWkuIDExNzwvYmlibD47IDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMTAuMjguMSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGU+YWQgZmFtLjwvdGl0bGU+IHguIDI4PC9iaWJsPi4vbm90ZSZndDsgd2hvIHB1cnBvc2VseSBlbmdhZ2VkIGhpbSBpbiBhIGxlbmd0aHkgY29udmVyc2F0aW9uIGJ1dCBDYWVzYXIgd2VudCBpbiwgYW5kIHRoZSBzZW5hdGUgcm9zZSBpbiBoaXMgaG9ub3VyLiBTb21lIG9mIHRoZSBwYXJ0aXNhbnMgb2YgQnJ1dHVzIHRvb2sgdGhlaXIgcGxhY2VzIHJvdW5kIHRoZSBiYWNrIG9mIENhZXNhcidzIGNoYWlyLCB3aGlsZSBvdGhlcnMgd2VudCB0byBtZWV0IGhpbSwgYXMgdGhvdWdoIHRoZXkgd291bGQgc3VwcG9ydCB0aGUgcGV0aXRpb24gd2hpY2ggVGlsbGl1cyBDaW1iZXIgcHJlc2VudGVkIHRvIENhZXNhciBpbiBiZWhhbGYgb2YgaGlzIGV4aWxlZCBicm90aGVyLCBhbmQgdGhleSBqb2luZWQgdGhlaXIgZW50cmVhdGllcyB0byBoaXMgYW5kIGFjY29tcGFuaWVkIENhZXNhciB1cCB0byBoaXMgY2hhaXIuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiwgYWZ0ZXIgdGFraW5nIGhpcyBzZWF0LCBDYWVzYXIgY29udGludWVkIHRvIHJlcHVsc2UgdGhlaXIgcGV0aXRpb25zLCBhbmQsIGFzIHRoZXkgcHJlc3NlZCB1cG9uIGhpbSB3aXRoIGdyZWF0ZXIgaW1wb3J0dW5pdHksIGJlZ2FuIHRvIHNob3cgYW5nZXIgdG93YXJkcyBvbmUgYW5kIGFub3RoZXIgb2YgdGhlbSwgVGlsbGl1cyBzZWl6ZWQgaGlzIHRvZ2Egd2l0aCBib3RoIGhhbmRzIGFuZCBwdWxsZWQgaXQgZG93biBmcm9tIGhpcyBuZWNrLiBUaGlzIHdhcyB0aGUgc2lnbmFsIGZvciB0aGUgYXNzYXVsdC4gSXQgd2FzIENhc2NhIHdobyBnYXZlIGhpbSB0aGUgZmlyc3QgYmxvdyB3aXRoIGhpcyBkYWdnZXIsIGluIHRoZSBuZWNrLCBub3QgYSBtb3J0YWwgd291bmQsIG5vciBldmVuIGEgZGVlcCBvbmUsIGZvciB3aGljaCBoZSB3YXMgdG9vIG11Y2ggY29uZnVzZWQsIGFzIHdhcyBuYXR1cmFsIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBkZWVkIG9mIGdyZWF0IGRhcmluZzsgc28gdGhhdCBDYWVzYXIgdHVybmVkIGFib3V0LCBncmFzcGVkIHRoZSBrbmlmZSwgYW5kIGhlbGQgaXQgZmFzdC4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbW9zdCB0aGUgc2FtZSBpbnN0YW50IGJvdGggY3JpZWQgb3V0LCB0aGUgc21pdHRlbiBtYW4gaW4gTGF0aW46IAoJCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkFjY3Vyc2VkIENhc2NhLCB3aGF0IGRvZXN0IHRob3U/PC9xPiBhbmQgdGhlIHNtaXRlciwgaW4gR3JlZWssIHRvIGhpcyBicm90aGVyOiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Ccm90aGVyLCBoZWxwITwvcT4KICAgICAgICAgICAgPC9ub3RlPgogICAgICAgICA8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['66.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIEFudG9ueSwgd2hvIHdhcyBhIGZyaWVuZCBvZiBDYWVzYXIncyBhbmQgYSByb2J1c3QgbWFuLCB3YXMgZGV0YWluZWQgb3V0c2lkZSBieSBCcnV0dXMgQWxiaW51cyw8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkJ5IENhaXVzIFRyZWJvbml1cywgcmF0aGVyLCBhcyBQbHV0YXJjaCBzYXlzIGluIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBCcnV0LiAxNy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIHh2aWkuIDE8L2JpYmw+LiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjE2LjExNyIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpLiAxMTc8L2JpYmw+OyA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMTAuMjguMSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBmYW0uPC90aXRsZT4geC4gMjg8L2JpYmw+Li9ub3RlJmd0OyB3aG8gcHVycG9zZWx5IGVuZ2FnZWQgaGltIGluIGEgbGVuZ3RoeSBjb252ZXJzYXRpb24gYnV0IENhZXNhciB3ZW50IGluLCBhbmQgdGhlIHNlbmF0ZSByb3NlIGluIGhpcyBob25vdXIuIFNvbWUgb2YgdGhlIHBhcnRpc2FucyBvZiBCcnV0dXMgdG9vayB0aGVpciBwbGFjZXMgcm91bmQgdGhlIGJhY2sgb2YgQ2Flc2FyJ3MgY2hhaXIsIHdoaWxlIG90aGVycyB3ZW50IHRvIG1lZXQgaGltLCBhcyB0aG91Z2ggdGhleSB3b3VsZCBzdXBwb3J0IHRoZSBwZXRpdGlvbiB3aGljaCBUaWxsaXVzIENpbWJlciBwcmVzZW50ZWQgdG8gQ2Flc2FyIGluIGJlaGFsZiBvZiBoaXMgZXhpbGVkIGJyb3RoZXIsIGFuZCB0aGV5IGpvaW5lZCB0aGVpciBlbnRyZWF0aWVzIHRvIGhpcyBhbmQgYWNjb21wYW5pZWQgQ2Flc2FyIHVwIHRvIGhpcyBjaGFpci4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4sIGFmdGVyIHRha2luZyBoaXMgc2VhdCwgQ2Flc2FyIGNvbnRpbnVlZCB0byByZXB1bHNlIHRoZWlyIHBldGl0aW9ucywgYW5kLCBhcyB0aGV5IHByZXNzZWQgdXBvbiBoaW0gd2l0aCBncmVhdGVyIGltcG9ydHVuaXR5LCBiZWdhbiB0byBzaG93IGFuZ2VyIHRvd2FyZHMgb25lIGFuZCBhbm90aGVyIG9mIHRoZW0sIFRpbGxpdXMgc2VpemVkIGhpcyB0b2dhIHdpdGggYm90aCBoYW5kcyBhbmQgcHVsbGVkIGl0IGRvd24gZnJvbSBoaXMgbmVjay4gVGhpcyB3YXMgdGhlIHNpZ25hbCBmb3IgdGhlIGFzc2F1bHQuIEl0IHdhcyBDYXNjYSB3aG8gZ2F2ZSBoaW0gdGhlIGZpcnN0IGJsb3cgd2l0aCBoaXMgZGFnZ2VyLCBpbiB0aGUgbmVjaywgbm90IGEgbW9ydGFsIHdvdW5kLCBub3IgZXZlbiBhIGRlZXAgb25lLCBmb3Igd2hpY2ggaGUgd2FzIHRvbyBtdWNoIGNvbmZ1c2VkLCBhcyB3YXMgbmF0dXJhbCBhdCB0aGUgYmVnaW5uaW5nIG9mIGEgZGVlZCBvZiBncmVhdCBkYXJpbmc7IHNvIHRoYXQgQ2Flc2FyIHR1cm5lZCBhYm91dCwgZ3Jhc3BlZCB0aGUga25pZmUsIGFuZCBoZWxkIGl0IGZhc3QuIAoJCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbG1vc3QgdGhlIHNhbWUgaW5zdGFudCBib3RoIGNyaWVkIG91dCwgdGhlIHNtaXR0ZW4gbWFuIGluIExhdGluOiAKCQkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5BY2N1cnNlZCBDYXNjYSwgd2hhdCBkb2VzdCB0aG91PzwvcT4gYW5kIHRoZSBzbWl0ZXIsIGluIEdyZWVrLCB0byBoaXMgYnJvdGhlcjogCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnJvdGhlciwgaGVscCE8L3E+CiAgICAgICAgICAgIDwvbm90ZT4KICAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMTcuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCB4dmlpLiAxPC9iaWJsPi4gQ2YuIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkJydXR1czwvdGl0bGU+LCB4dmlpLiAxPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iQXBwLiBCQyAyLjE2LjExNyIgdmFsaWQ9InllcyI+QXBwaWFuLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpLiAxMTc8L2JpYmw+OyA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CLiBDLjwvdGl0bGU+IGlpLiAxMTc8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIEZhbS4gMTAuMjguMSIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5hZCBmYW0uPC90aXRsZT4geC4gMjg8L2JpYmw+Li9ub3RlJmd0OyB3aG8gcHVycG9zZWx5IGVuZ2FnZWQgaGltIGluIGEgbGVuZ3RoeSBjb252ZXJzYXRpb24gYnV0IENhZXNhciB3ZW50IGluLCBhbmQgdGhlIHNlbmF0ZSByb3NlIGluIGhpcyBob25vdXIuIFNvbWUgb2YgdGhlIHBhcnRpc2FucyBvZiBCcnV0dXMgdG9vayB0aGVpciBwbGFjZXMgcm91bmQgdGhlIGJhY2sgb2YgQ2Flc2FyJ3MgY2hhaXIsIHdoaWxlIG90aGVycyB3ZW50IHRvIG1lZXQgaGltLCBhcyB0aG91Z2ggdGhleSB3b3VsZCBzdXBwb3J0IHRoZSBwZXRpdGlvbiB3aGljaCBUaWxsaXVzIENpbWJlciBwcmVzZW50ZWQgdG8gQ2Flc2FyIGluIGJlaGFsZiBvZiBoaXMgZXhpbGVkIGJyb3RoZXIsIGFuZCB0aGV5IGpvaW5lZCB0aGVpciBlbnRyZWF0aWVzIHRvIGhpcyBhbmQgYWNjb21wYW5pZWQgQ2Flc2FyIHVwIHRvIGhpcyBjaGFpci4gCgkJCQkJPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+YWQgZmFtLjwvdGl0bGU+IHguIDI4PC90cmFuc2xhdGlvbj4="
translation['66.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuLCBhZnRlciB0YWtpbmcgaGlzIHNlYXQsIENhZXNhciBjb250aW51ZWQgdG8gcmVwdWxzZSB0aGVpciBwZXRpdGlvbnMsIGFuZCwgYXMgdGhleSBwcmVzc2VkIHVwb24gaGltIHdpdGggZ3JlYXRlciBpbXBvcnR1bml0eSwgYmVnYW4gdG8gc2hvdyBhbmdlciB0b3dhcmRzIG9uZSBhbmQgYW5vdGhlciBvZiB0aGVtLCBUaWxsaXVzIHNlaXplZCBoaXMgdG9nYSB3aXRoIGJvdGggaGFuZHMgYW5kIHB1bGxlZCBpdCBkb3duIGZyb20gaGlzIG5lY2suIFRoaXMgd2FzIHRoZSBzaWduYWwgZm9yIHRoZSBhc3NhdWx0LiBJdCB3YXMgQ2FzY2Egd2hvIGdhdmUgaGltIHRoZSBmaXJzdCBibG93IHdpdGggaGlzIGRhZ2dlciwgaW4gdGhlIG5lY2ssIG5vdCBhIG1vcnRhbCB3b3VuZCwgbm9yIGV2ZW4gYSBkZWVwIG9uZSwgZm9yIHdoaWNoIGhlIHdhcyB0b28gbXVjaCBjb25mdXNlZCwgYXMgd2FzIG5hdHVyYWwgYXQgdGhlIGJlZ2lubmluZyBvZiBhIGRlZWQgb2YgZ3JlYXQgZGFyaW5nOyBzbyB0aGF0IENhZXNhciB0dXJuZWQgYWJvdXQsIGdyYXNwZWQgdGhlIGtuaWZlLCBhbmQgaGVsZCBpdCBmYXN0LiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['66.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbW9zdCB0aGUgc2FtZSBpbnN0YW50IGJvdGggY3JpZWQgb3V0LCB0aGUgc21pdHRlbiBtYW4gaW4gTGF0aW46IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QWNjdXJzZWQgQ2FzY2EsIHdoYXQgZG9lc3QgdGhvdT88L3E+IGFuZCB0aGUgc21pdGVyLCBpbiBHcmVlaywgdG8gaGlzIGJyb3RoZXI6IAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnJvdGhlciwgaGVscCE8L3E+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+U28gdGhlIGFmZmFpciBiZWdhbiwgYW5kIHRob3NlIHdobyB3ZXJlIG5vdCBwcml2eSB0byB0aGUgcGxvdCB3ZXJlIGZpbGxlZCB3aXRoIGNvbnN0ZXJuYXRpb24gYW5kIGhvcnJvciBhdCB3aGF0IHdhcyBnb2luZyBvbjsgdGhleSBkYXJlZCBub3QgZmx5LCBub3IgZ28gdG8gQ2Flc2FyJ3MgaGVscCwgbmF5LCBub3IgZXZlbiB1dHRlciBhIHdvcmQuIEJ1dCB0aG9zZSB3aG8gaGFkIHByZXBhcmVkIHRoZW1zZWx2ZXMgZm9yIHRoZSBtdXJkZXIgYmFyZWQgZWFjaCBvZiB0aGVtIGhpcyBkYWdnZXIsIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIENhZXNhciwgaGVtbWVkIGluIG9uIGFsbCBzaWRlcywgd2hpY2hldmVyIHdheSBoZSB0dXJuZWQgY29uZnJvbnRpbmcgYmxvd3Mgb2Ygd2VhcG9ucyBhaW1lZCBhdCBoaXMgZmFjZSBhbmQgZXllcywgZHJpdmVuIGhpdGhlciBhbmQgdGhpdGhlciBsaWtlIGEgd2lsZCBiZWFzdCwgd2FzIGVudGFuZ2xlZCBpbiB0aGUgaGFuZHMgb2YgYWxsOyBmb3IgYWxsIGhhZCB0byB0YWtlIHBhcnQgaW4gdGhlIHNhY3JpZmljZSBhbmQgdGFzdGUgb2YgdGhlIHNsYXVnaHRlci4gVGhlcmVmb3JlIEJydXR1cyBhbHNvIGdhdmUgaGltIG9uZSBibG93IGluIHRoZSBncm9pbi4gQW5kIGl0IGlzIHNhaWQgYnkgc29tZSB3cml0ZXJzIHRoYXQgYWx0aG91Z2ggQ2Flc2FyIGRlZmVuZGVkIGhpbXNlbGYgYWdhaW5zdCB0aGUgcmVzdCBhbmQgZGFydGVkIHRoaXMgd2F5IGFuZCB0aGF0IGFuZCBjcmllZCBhbG91ZCwgd2hlbiBoZSBzYXcgdGhhdCBCcnV0dXMgaGFkIGRyYXduIGhpcyBkYWdnZXIsIGhlIHB1bGxlZCBoaXMgdG9nYSBkb3duIG92ZXIgaGlzIGhlYWQgYW5kIHNhbmssIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmVpdGhlciBieSBjaGFuY2Ugb3IgYmVjYXVzZSBwdXNoZWQgdGhlcmUgYnkgaGlzIG11cmRlcmVycywgYWdhaW5zdCB0aGUgcGVkZXN0YWwgb24gd2hpY2ggdGhlIHN0YXR1ZSBvZiBQb21wZXkgc3Rvb2QuIEFuZCB0aGUgcGVkZXN0YWwgd2FzIGRyZW5jaGVkIHdpdGggaGlzIGJsb29kLCBzbyB0aGF0IG9uZSBtaWdodCBoYXZlIHRob3VnaHQgdGhhdCBQb21wZXkgaGltc2VsZiB3YXMgcHJlc2lkaW5nIG92ZXIgdGhpcyB2ZW5nZWFuY2UgdXBvbiBoaXMgZW5lbXksIHdobyBub3cgbGF5IHByb3N0cmF0ZSBhdCBoaXMgZmVldCwgcXVpdmVyaW5nIGZyb20gYSBtdWx0aXR1ZGUgb2Ygd291bmRzLiBGb3IgaXQgaXMgc2FpZCB0aGF0IGhlIHJlY2VpdmVkIHR3ZW50eS10aHJlZTsgYW5kIG1hbnkgb2YgdGhlIGNvbnNwaXJhdG9ycyB3ZXJlIHdvdW5kZWQgYnkgb25lIGFub3RoZXIsIGFzIHRoZXkgc3RydWdnbGVkIHRvIHBsYW50IGFsbCB0aG9zZSBibG93cyBpbiBvbmUgYm9keS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['66.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPmFuZCBDYWVzYXIsIGhlbW1lZCBpbiBvbiBhbGwgc2lkZXMsIHdoaWNoZXZlciB3YXkgaGUgdHVybmVkIGNvbmZyb250aW5nIGJsb3dzIG9mIHdlYXBvbnMgYWltZWQgYXQgaGlzIGZhY2UgYW5kIGV5ZXMsIGRyaXZlbiBoaXRoZXIgYW5kIHRoaXRoZXIgbGlrZSBhIHdpbGQgYmVhc3QsIHdhcyBlbnRhbmdsZWQgaW4gdGhlIGhhbmRzIG9mIGFsbDsgZm9yIGFsbCBoYWQgdG8gdGFrZSBwYXJ0IGluIHRoZSBzYWNyaWZpY2UgYW5kIHRhc3RlIG9mIHRoZSBzbGF1Z2h0ZXIuIFRoZXJlZm9yZSBCcnV0dXMgYWxzbyBnYXZlIGhpbSBvbmUgYmxvdyBpbiB0aGUgZ3JvaW4uIEFuZCBpdCBpcyBzYWlkIGJ5IHNvbWUgd3JpdGVycyB0aGF0IGFsdGhvdWdoIENhZXNhciBkZWZlbmRlZCBoaW1zZWxmIGFnYWluc3QgdGhlIHJlc3QgYW5kIGRhcnRlZCB0aGlzIHdheSBhbmQgdGhhdCBhbmQgY3JpZWQgYWxvdWQsIHdoZW4gaGUgc2F3IHRoYXQgQnJ1dHVzIGhhZCBkcmF3biBoaXMgZGFnZ2VyLCBoZSBwdWxsZWQgaGlzIHRvZ2EgZG93biBvdmVyIGhpcyBoZWFkIGFuZCBzYW5rLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['66.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPmVpdGhlciBieSBjaGFuY2Ugb3IgYmVjYXVzZSBwdXNoZWQgdGhlcmUgYnkgaGlzIG11cmRlcmVycywgYWdhaW5zdCB0aGUgcGVkZXN0YWwgb24gd2hpY2ggdGhlIHN0YXR1ZSBvZiBQb21wZXkgc3Rvb2QuIEFuZCB0aGUgcGVkZXN0YWwgd2FzIGRyZW5jaGVkIHdpdGggaGlzIGJsb29kLCBzbyB0aGF0IG9uZSBtaWdodCBoYXZlIHRob3VnaHQgdGhhdCBQb21wZXkgaGltc2VsZiB3YXMgcHJlc2lkaW5nIG92ZXIgdGhpcyB2ZW5nZWFuY2UgdXBvbiBoaXMgZW5lbXksIHdobyBub3cgbGF5IHByb3N0cmF0ZSBhdCBoaXMgZmVldCwgcXVpdmVyaW5nIGZyb20gYSBtdWx0aXR1ZGUgb2Ygd291bmRzLiBGb3IgaXQgaXMgc2FpZCB0aGF0IGhlIHJlY2VpdmVkIHR3ZW50eS10aHJlZTsgYW5kIG1hbnkgb2YgdGhlIGNvbnNwaXJhdG9ycyB3ZXJlIHdvdW5kZWQgYnkgb25lIGFub3RoZXIsIGFzIHRoZXkgc3RydWdnbGVkIHRvIHBsYW50IGFsbCB0aG9zZSBibG93cyBpbiBvbmUgYm9keS48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNjciIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5DYWVzYXIgdGh1cyBkb25lIHRvIGRlYXRoLCB0aGUgc2VuYXRvcnMsIGFsdGhvdWdoIEJydXR1cyBjYW1lIGZvcndhcmQgYXMgaWYgdG8gc2F5IHNvbWV0aGluZyBhYm91dCB3aGF0IGhhZCBiZWVuIGRvbmUsIHdvdWxkIG5vdCB3YWl0IHRvIGhlYXIgaGltLCBidXQgYnVyc3Qgb3V0IG9mIGRvb3JzIGFuZCBmbGVkLCB0aHVzIGZpbGxpbmcgdGhlIHBlb3BsZSB3aXRoIGNvbmZ1c2lvbiBhbmQgaGVscGxlc3MgZmVhciwgc28gdGhhdCBzb21lIG9mIHRoZW0gY2xvc2VkIHRoZWlyIGhvdXNlcywgd2hpbGUgb3RoZXJzIGxlZnQgdGhlaXIgY291bnRlcnMgYW5kIHBsYWNlcyBvZiBidXNpbmVzcyBhbmQgcmFuLCBmaXJzdCB0byB0aGUgcGxhY2UgdG8gc2VlIHdoYXQgaGFkIGhhcHBlbmVkLCB0aGVuIGF3YXkgZnJvbSB0aGUgcGxhY2Ugd2hlbiB0aGV5IGhhZCBzZWVuLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5BbnRvbnkgYW5kIExlcGlkdXMsIHRoZSBjaGllZiBmcmllbmRzIG9mIENhZXNhciwgc3RvbGUgYXdheSBhbmQgdG9vayByZWZ1Z2UgaW4gdGhlIGhvdXNlcyBvZiBvdGhlcnMuIEJ1dCBCcnV0dXMgYW5kIGhpcyBwYXJ0aXNhbnMsIGp1c3QgYXMgdGhleSB3ZXJlLCBzdGlsbCB3YXJtIGZyb20gdGhlIHNsYXVnaHRlciwgZGlzcGxheWluZyB0aGVpciBkYWdnZXJzIGJhcmUsIHdlbnQgYWxsIGluIGEgYm9keSBvdXQgb2YgdGhlIHNlbmF0ZS1ob3VzZSBhbmQgbWFyY2hlZCB0byB0aGUgQ2FwaXRvbCwgbm90IGxpa2UgZnVnaXRpdmVzLCBidXQgd2l0aCBnbGFkIGZhY2VzIGFuZCBmdWxsIG9mIGNvbmZpZGVuY2UsIHN1bW1vbmluZyB0aGUgbXVsdGl0dWRlIHRvIGZyZWVkb20sIGFuZCB3ZWxjb21pbmcgaW50byB0aGVpciByYW5rcyB0aGUgbW9zdCBkaXN0aW5ndWlzaGVkIG9mIHRob3NlIHdobyBtZXQgdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U29tZSBhbHNvIGpvaW5lZCB0aGVpciBudW1iZXIgYW5kIHdlbnQgdXAgd2l0aCB0aGVtIGFzIHRob3VnaCB0aGV5IGhhZCBzaGFyZWQgaW4gdGhlIGRlZWQsIGFuZCBsYWlkIGNsYWltIHRvIHRoZSBnbG9yeSBvZiBpdCwgb2Ygd2hvbSB3ZXJlIENhaXVzIE9jdGF2aXVzIGFuZCBMZW50dWx1cyBTcGludGhlci4gVGhlc2UgbWVuLCB0aGVuLCBwYWlkIHRoZSBwZW5hbHR5IGZvciB0aGVpciBpbXBvc3R1cmUgbGF0ZXIsIHdoZW4gdGhleSB3ZXJlIHB1dCB0byBkZWF0aCBieSBBbnRvbnkgYW5kIHRoZSB5b3VuZyBDYWVzYXIsIHdpdGhvdXQgZXZlbiBlbmpveWluZyB0aGUgZmFtZSBmb3IgdGhlIHNha2Ugb2Ygd2hpY2ggdGhleSBkaWVkLCBvd2luZyB0byB0aGUgZGlzYmVsaWVmIG9mIHRoZWlyIGZlbGxvdyBtZW4uIEZvciBldmVuIHRob3NlIHdobyBwdW5pc2hlZCB0aGVtIGRpZCBub3QgZXhhY3QgYSBwZW5hbHR5IGZvciB3aGF0IHRoZXkgZGlkLCBidXQgZm9yIHdoYXQgdGhleSB3aXNoZWQgdGhleSBoYWQgZG9uZS48L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['67.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2NyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Q2Flc2FyIHRodXMgZG9uZSB0byBkZWF0aCwgdGhlIHNlbmF0b3JzLCBhbHRob3VnaCBCcnV0dXMgY2FtZSBmb3J3YXJkIGFzIGlmIHRvIHNheSBzb21ldGhpbmcgYWJvdXQgd2hhdCBoYWQgYmVlbiBkb25lLCB3b3VsZCBub3Qgd2FpdCB0byBoZWFyIGhpbSwgYnV0IGJ1cnN0IG91dCBvZiBkb29ycyBhbmQgZmxlZCwgdGh1cyBmaWxsaW5nIHRoZSBwZW9wbGUgd2l0aCBjb25mdXNpb24gYW5kIGhlbHBsZXNzIGZlYXIsIHNvIHRoYXQgc29tZSBvZiB0aGVtIGNsb3NlZCB0aGVpciBob3VzZXMsIHdoaWxlIG90aGVycyBsZWZ0IHRoZWlyIGNvdW50ZXJzIGFuZCBwbGFjZXMgb2YgYnVzaW5lc3MgYW5kIHJhbiwgZmlyc3QgdG8gdGhlIHBsYWNlIHRvIHNlZSB3aGF0IGhhZCBoYXBwZW5lZCwgdGhlbiBhd2F5IGZyb20gdGhlIHBsYWNlIHdoZW4gdGhleSBoYWQgc2Vlbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['67.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFudG9ueSBhbmQgTGVwaWR1cywgdGhlIGNoaWVmIGZyaWVuZHMgb2YgQ2Flc2FyLCBzdG9sZSBhd2F5IGFuZCB0b29rIHJlZnVnZSBpbiB0aGUgaG91c2VzIG9mIG90aGVycy4gQnV0IEJydXR1cyBhbmQgaGlzIHBhcnRpc2FucywganVzdCBhcyB0aGV5IHdlcmUsIHN0aWxsIHdhcm0gZnJvbSB0aGUgc2xhdWdodGVyLCBkaXNwbGF5aW5nIHRoZWlyIGRhZ2dlcnMgYmFyZSwgd2VudCBhbGwgaW4gYSBib2R5IG91dCBvZiB0aGUgc2VuYXRlLWhvdXNlIGFuZCBtYXJjaGVkIHRvIHRoZSBDYXBpdG9sLCBub3QgbGlrZSBmdWdpdGl2ZXMsIGJ1dCB3aXRoIGdsYWQgZmFjZXMgYW5kIGZ1bGwgb2YgY29uZmlkZW5jZSwgc3VtbW9uaW5nIHRoZSBtdWx0aXR1ZGUgdG8gZnJlZWRvbSwgYW5kIHdlbGNvbWluZyBpbnRvIHRoZWlyIHJhbmtzIHRoZSBtb3N0IGRpc3Rpbmd1aXNoZWQgb2YgdGhvc2Ugd2hvIG1ldCB0aGVtLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['67.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvbWUgYWxzbyBqb2luZWQgdGhlaXIgbnVtYmVyIGFuZCB3ZW50IHVwIHdpdGggdGhlbSBhcyB0aG91Z2ggdGhleSBoYWQgc2hhcmVkIGluIHRoZSBkZWVkLCBhbmQgbGFpZCBjbGFpbSB0byB0aGUgZ2xvcnkgb2YgaXQsIG9mIHdob20gd2VyZSBDYWl1cyBPY3Rhdml1cyBhbmQgTGVudHVsdXMgU3BpbnRoZXIuIFRoZXNlIG1lbiwgdGhlbiwgcGFpZCB0aGUgcGVuYWx0eSBmb3IgdGhlaXIgaW1wb3N0dXJlIGxhdGVyLCB3aGVuIHRoZXkgd2VyZSBwdXQgdG8gZGVhdGggYnkgQW50b255IGFuZCB0aGUgeW91bmcgQ2Flc2FyLCB3aXRob3V0IGV2ZW4gZW5qb3lpbmcgdGhlIGZhbWUgZm9yIHRoZSBzYWtlIG9mIHdoaWNoIHRoZXkgZGllZCwgb3dpbmcgdG8gdGhlIGRpc2JlbGllZiBvZiB0aGVpciBmZWxsb3cgbWVuLiBGb3IgZXZlbiB0aG9zZSB3aG8gcHVuaXNoZWQgdGhlbSBkaWQgbm90IGV4YWN0IGEgcGVuYWx0eSBmb3Igd2hhdCB0aGV5IGRpZCwgYnV0IGZvciB3aGF0IHRoZXkgd2lzaGVkIHRoZXkgaGFkIGRvbmUuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIG5leHQgZGF5IEJydXR1cyBjYW1lIGRvd24gYW5kIGhlbGQgYSBkaXNjb3Vyc2UsIGFuZCB0aGUgcGVvcGxlIGxpc3RlbmVkIHRvIHdoYXQgd2FzIHNhaWQgd2l0aG91dCBlaXRoZXIgZXhwcmVzc2luZyByZXNlbnRtZW50IGF0IHdoYXQgaGFkIGJlZW4gZG9uZSBvciBhcHBlYXJpbmcgdG8gYXBwcm92ZSBvZiBpdDsgdGhleSBzaG93ZWQsIGhvd2V2ZXIsIGJ5IHRoZWlyIGRlZXAgc2lsZW5jZSwgdGhhdCB3aGlsZSB0aGV5IHBpdGllZCBDYWVzYXIsIHRoZXkgcmVzcGVjdGVkIEJydXR1cy4gVGhlIHNlbmF0ZSwgdG9vLCB0cnlpbmcgdG8gbWFrZSBhIGdlbmVyYWwgYW1uZXN0eSBhbmQgcmVjb25jaWxpYXRpb24sIHZvdGVkIHRvIGdpdmUgQ2Flc2FyIGRpdmluZSBob25vdXJzIGFuZCBub3QgdG8gZGlzdHVyYiBldmVuIHRoZSBtb3N0IGluc2lnbmlmaWNhbnQgbWVhc3VyZSB3aGljaCBoZSBoYWQgYWRvcHRlZCB3aGVuIGluIHBvd2VyOyB3aGlsZSB0byBCcnV0dXMgYW5kIGhpcyBwYXJ0aXNhbnMgaXQgZGlzdHJpYnV0ZWQgcHJvdmluY2VzIGFuZCBnYXZlIHN1aXRhYmxlIGhvbm91cnMsIHNvIHRoYXQgZXZlcnlib2R5IHRob3VnaHQgdGhhdCBtYXR0ZXJzIHdlcmUgZGVjaWRlZCBhbmQgc2V0dGxlZCBpbiB0aGUgYmVzdCBwb3NzaWJsZSBtYW5uZXIuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['67.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBuZXh0IGRheSBCcnV0dXMgY2FtZSBkb3duIGFuZCBoZWxkIGEgZGlzY291cnNlLCBhbmQgdGhlIHBlb3BsZSBsaXN0ZW5lZCB0byB3aGF0IHdhcyBzYWlkIHdpdGhvdXQgZWl0aGVyIGV4cHJlc3NpbmcgcmVzZW50bWVudCBhdCB3aGF0IGhhZCBiZWVuIGRvbmUgb3IgYXBwZWFyaW5nIHRvIGFwcHJvdmUgb2YgaXQ7IHRoZXkgc2hvd2VkLCBob3dldmVyLCBieSB0aGVpciBkZWVwIHNpbGVuY2UsIHRoYXQgd2hpbGUgdGhleSBwaXRpZWQgQ2Flc2FyLCB0aGV5IHJlc3BlY3RlZCBCcnV0dXMuIFRoZSBzZW5hdGUsIHRvbywgdHJ5aW5nIHRvIG1ha2UgYSBnZW5lcmFsIGFtbmVzdHkgYW5kIHJlY29uY2lsaWF0aW9uLCB2b3RlZCB0byBnaXZlIENhZXNhciBkaXZpbmUgaG9ub3VycyBhbmQgbm90IHRvIGRpc3R1cmIgZXZlbiB0aGUgbW9zdCBpbnNpZ25pZmljYW50IG1lYXN1cmUgd2hpY2ggaGUgaGFkIGFkb3B0ZWQgd2hlbiBpbiBwb3dlcjsgd2hpbGUgdG8gQnJ1dHVzIGFuZCBoaXMgcGFydGlzYW5zIGl0IGRpc3RyaWJ1dGVkIHByb3ZpbmNlcyBhbmQgZ2F2ZSBzdWl0YWJsZSBob25vdXJzLCBzbyB0aGF0IGV2ZXJ5Ym9keSB0aG91Z2h0IHRoYXQgbWF0dGVycyB3ZXJlIGRlY2lkZWQgYW5kIHNldHRsZWQgaW4gdGhlIGJlc3QgcG9zc2libGUgbWFubmVyLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSB3aWxsIG9mIENhZXNhciB3YXMgb3BlbmVkIGFuZCBpdCB3YXMgZm91bmQgdGhhdCBoZSBoYWQgZ2l2ZW4gZXZlcnkgUm9tYW4gY2l0aXplbiBhIGNvbnNpZGVyYWJsZSBnaWZ0LCBhbmQgd2hlbiB0aGUgbXVsdGl0dWRlIHNhdyBoaXMgYm9keSBjYXJyaWVkIHRocm91Z2ggdGhlIGZvcnVtIGFsbCBkaXNmaWd1cmVkIHdpdGggaXRzIHdvdW5kcywgdGhleSBubyBsb25nZXIga2VwdCB0aGVtc2VsdmVzIHdpdGhpbiB0aGUgcmVzdHJhaW50cyBvZiBvcmRlciBhbmQgZGlzY2lwbGluZSwgYnV0IGFmdGVyIGhlYXBpbmcgcm91bmQgdGhlIGJvZHkgYmVuY2hlcywgcmFpbGluZ3MsIGFuZCB0YWJsZXMgZnJvbSB0aGUgZm9ydW0sIHRoZXkgc2V0IGZpcmUgdG8gdGhlbSBhbmQgYnVybmVkIGl0IHRoZXJlOyB0aGVuLCBsaWZ0aW5nIGJsYXppbmcgYnJhbmRzIG9uIGhpZ2gsIHRoZXkgcmFuIHRvIHRoZSBob3VzZXMgb2YgdGhlIG11cmRlcmVycyB3aXRoIGludGVudCB0byBidXJuIHRoZW0gZG93biwgd2hpbGUgb3RoZXJzIHdlbnQgZXZlcnkgd2hpdGhlciB0aHJvdWdoIHRoZSBjaXR5IHNlZWtpbmcgdG8gc2VpemUgdGhlIG1lbiB0aGVtc2VsdmVzIGFuZCB0ZWFyIHRoZW0gdG8gcGllY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3Qgb25lIG9mIHRoZXNlIGNhbWUgaW4gdGhlaXIgd2F5LCBidXQgYWxsIHdlcmUgd2VsbCBiYXJyaWNhZGVkLiBUaGVyZSB3YXMgYSBjZXJ0YWluIENpbm5hLCBob3dldmVyLCBvbmUgb2YgdGhlIGZyaWVuZHMgb2YgQ2Flc2FyLCB3aG8gY2hhbmNlZCwgYXMgdGhleSBzYXksIHRvIGhhdmUgc2VlbiBkdXJpbmcgdGhlIHByZXZpb3VzIG5pZ2h0IGEgc3RyYW5nZSB2aXNpb24uIEhlIGRyZWFtZWQsIHRoYXQgaXMsIHRoYXQgaGUgd2FzIGludml0ZWQgdG8gc3VwcGVyIGJ5IENhZXNhciwgYW5kIHRoYXQgd2hlbiBoZSBleGN1c2VkIGhpbXNlbGYsIENhZXNhciBsZWQgaGltIGFsb25nIGJ5IHRoZSBoYW5kLCBhbHRob3VnaCBoZSBkaWQgbm90IHdpc2ggdG8gZ28sIGJ1dCByZXNpc3RlZC4gTm93LCB3aGVuIGhlIGhlYXJkIHRoYXQgdGhleSB3ZXJlIGJ1cm5pbmcgdGhlIGJvZHkgb2YgQ2Flc2FyIGluIHRoZSBmb3J1bSwgaGUgcm9zZSB1cCBhbmQgd2VudCB0aGl0aGVyIG91dCBvZiByZXNwZWN0LCBhbHRob3VnaCBoZSBoYWQgbWlzZ2l2aW5ncyBhcmlzaW5nIGZyb20gaGlzIHZpc2lvbiwgYW5kIHdhcyBhdCB0aGUgc2FtZSB0aW1lIGluIGEgZmV2ZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHNpZ2h0IG9mIGhpbSwgb25lIG9mIHRoZSBtdWx0aXR1ZGUgdG9sZCBoaXMgbmFtZSB0byBhbm90aGVyIHdobyBhc2tlZCBoaW0gd2hhdCBpdCB3YXMsIGFuZCBoZSB0byBhbm90aGVyLCBhbmQgYXQgb25jZSB3b3JkIHJhbiB0aHJvdWdoIHRoZSB3aG9sZSB0aHJvbmcgdGhhdCB0aGlzIG1hbiB3YXMgb25lIG9mIHRoZSBtdXJkZXJlcnMgb2YgQ2Flc2FyLiBGb3IgdGhlcmUgd2FzIGFtb25nIHRoZSBjb25zcGlyYXRvcnMgYSBtYW4gd2hvIGJvcmUgdGhpcyBzYW1lIG5hbWUgb2YgQ2lubmEsIGFuZCBhc3N1bWluZyB0aGF0IHRoaXMgbWFuIHdhcyBoZSwgdGhlIGNyb3dkIHJ1c2hlZCB1cG9uIGhpbSBhbmQgdG9yZSBoaW0gaW4gcGllY2VzIGFtb25nIHRoZW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMjAuNSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXM8L3RpdGxlPiwgeHguIDUgZjwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGlzIG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIG1hZGUgQnJ1dHVzIGFuZCBDYXNzaXVzIGFmcmFpZCwgYW5kIG5vdCBtYW55IGRheXMgYWZ0ZXJ3YXJkcyB0aGV5IHdpdGhkcmV3IGZyb20gdGhlIGNpdHkuIFdoYXQgdGhleSBkaWQgYW5kIHN1ZmZlcmVkIGJlZm9yZSB0aGV5IGRpZWQsIGhhcyBiZWVuIHRvbGQgaW4gdGhlIExpZmUgb2YgQnJ1dHVzLjwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['68.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIHdpbGwgb2YgQ2Flc2FyIHdhcyBvcGVuZWQgYW5kIGl0IHdhcyBmb3VuZCB0aGF0IGhlIGhhZCBnaXZlbiBldmVyeSBSb21hbiBjaXRpemVuIGEgY29uc2lkZXJhYmxlIGdpZnQsIGFuZCB3aGVuIHRoZSBtdWx0aXR1ZGUgc2F3IGhpcyBib2R5IGNhcnJpZWQgdGhyb3VnaCB0aGUgZm9ydW0gYWxsIGRpc2ZpZ3VyZWQgd2l0aCBpdHMgd291bmRzLCB0aGV5IG5vIGxvbmdlciBrZXB0IHRoZW1zZWx2ZXMgd2l0aGluIHRoZSByZXN0cmFpbnRzIG9mIG9yZGVyIGFuZCBkaXNjaXBsaW5lLCBidXQgYWZ0ZXIgaGVhcGluZyByb3VuZCB0aGUgYm9keSBiZW5jaGVzLCByYWlsaW5ncywgYW5kIHRhYmxlcyBmcm9tIHRoZSBmb3J1bSwgdGhleSBzZXQgZmlyZSB0byB0aGVtIGFuZCBidXJuZWQgaXQgdGhlcmU7IHRoZW4sIGxpZnRpbmcgYmxhemluZyBicmFuZHMgb24gaGlnaCwgdGhleSByYW4gdG8gdGhlIGhvdXNlcyBvZiB0aGUgbXVyZGVyZXJzIHdpdGggaW50ZW50IHRvIGJ1cm4gdGhlbSBkb3duLCB3aGlsZSBvdGhlcnMgd2VudCBldmVyeSB3aGl0aGVyIHRocm91Z2ggdGhlIGNpdHkgc2Vla2luZyB0byBzZWl6ZSB0aGUgbWVuIHRoZW1zZWx2ZXMgYW5kIHRlYXIgdGhlbSB0byBwaWVjZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['68.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdCBvbmUgb2YgdGhlc2UgY2FtZSBpbiB0aGVpciB3YXksIGJ1dCBhbGwgd2VyZSB3ZWxsIGJhcnJpY2FkZWQuIFRoZXJlIHdhcyBhIGNlcnRhaW4gQ2lubmEsIGhvd2V2ZXIsIG9uZSBvZiB0aGUgZnJpZW5kcyBvZiBDYWVzYXIsIHdobyBjaGFuY2VkLCBhcyB0aGV5IHNheSwgdG8gaGF2ZSBzZWVuIGR1cmluZyB0aGUgcHJldmlvdXMgbmlnaHQgYSBzdHJhbmdlIHZpc2lvbi4gSGUgZHJlYW1lZCwgdGhhdCBpcywgdGhhdCBoZSB3YXMgaW52aXRlZCB0byBzdXBwZXIgYnkgQ2Flc2FyLCBhbmQgdGhhdCB3aGVuIGhlIGV4Y3VzZWQgaGltc2VsZiwgQ2Flc2FyIGxlZCBoaW0gYWxvbmcgYnkgdGhlIGhhbmQsIGFsdGhvdWdoIGhlIGRpZCBub3Qgd2lzaCB0byBnbywgYnV0IHJlc2lzdGVkLiBOb3csIHdoZW4gaGUgaGVhcmQgdGhhdCB0aGV5IHdlcmUgYnVybmluZyB0aGUgYm9keSBvZiBDYWVzYXIgaW4gdGhlIGZvcnVtLCBoZSByb3NlIHVwIGFuZCB3ZW50IHRoaXRoZXIgb3V0IG9mIHJlc3BlY3QsIGFsdGhvdWdoIGhlIGhhZCBtaXNnaXZpbmdzIGFyaXNpbmcgZnJvbSBoaXMgdmlzaW9uLCBhbmQgd2FzIGF0IHRoZSBzYW1lIHRpbWUgaW4gYSBmZXZlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['68.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkF0IHNpZ2h0IG9mIGhpbSwgb25lIG9mIHRoZSBtdWx0aXR1ZGUgdG9sZCBoaXMgbmFtZSB0byBhbm90aGVyIHdobyBhc2tlZCBoaW0gd2hhdCBpdCB3YXMsIGFuZCBoZSB0byBhbm90aGVyLCBhbmQgYXQgb25jZSB3b3JkIHJhbiB0aHJvdWdoIHRoZSB3aG9sZSB0aHJvbmcgdGhhdCB0aGlzIG1hbiB3YXMgb25lIG9mIHRoZSBtdXJkZXJlcnMgb2YgQ2Flc2FyLiBGb3IgdGhlcmUgd2FzIGFtb25nIHRoZSBjb25zcGlyYXRvcnMgYSBtYW4gd2hvIGJvcmUgdGhpcyBzYW1lIG5hbWUgb2YgQ2lubmEsIGFuZCBhc3N1bWluZyB0aGF0IHRoaXMgbWFuIHdhcyBoZSwgdGhlIGNyb3dkIHJ1c2hlZCB1cG9uIGhpbSBhbmQgdG9yZSBoaW0gaW4gcGllY2VzIGFtb25nIHRoZW0uPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDIwLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXM8L3RpdGxlPiwgeHguIDUgZjwvYmlibD4uPC9ub3RlPgoJCQkJCgkJCQkgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDIwLjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5CcnV0dXM8L3RpdGxlPiwgeHguIDUgZjwvYmlibD4uPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QnJ1dHVzPC90aXRsZT4sIHh4LiA1IGY8L3RyYW5zbGF0aW9uPg=="
translation['68.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UgbWFkZSBCcnV0dXMgYW5kIENhc3NpdXMgYWZyYWlkLCBhbmQgbm90IG1hbnkgZGF5cyBhZnRlcndhcmRzIHRoZXkgd2l0aGRyZXcgZnJvbSB0aGUgY2l0eS4gV2hhdCB0aGV5IGRpZCBhbmQgc3VmZmVyZWQgYmVmb3JlIHRoZXkgZGllZCwgaGFzIGJlZW4gdG9sZCBpbiB0aGUgTGlmZSBvZiBCcnV0dXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjY5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHRpbWUgb2YgaGlzIGRlYXRoIENhZXNhciB3YXMgZnVsbHkgZmlmdHktc2l4IHllYXJzIG9sZCwgYnV0IGhlIGhhZCBzdXJ2aXZlZCBQb21wZXkgbm90IG11Y2ggbW9yZSB0aGFuIGZvdXIgeWVhcnMsIHdoaWxlIG9mIHRoZSBwb3dlciBhbmQgZG9taW5pb24gd2hpY2ggaGUgaGFkIHNvdWdodCBhbGwgaGlzIGxpZmUgYXQgc28gZ3JlYXQgcmlza3MsIGFuZCBiYXJlbHkgYWNoaWV2ZWQgYXQgbGFzdCwgb2YgdGhpcyBoZSBoYWQgcmVhcGVkIG5vIGZydWl0IGJ1dCB0aGUgbmFtZSBvZiBpdCBvbmx5LCBhbmQgYSBnbG9yeSB3aGljaCBoYWQgYXdha2VuZWQgZW52eSBvbiB0aGUgcGFydCBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCB0aGUgZ3JlYXQgZ3VhcmRpYW4tZ2VuaXVzIG9mIHRoZSBtYW4sIHdob3NlIGhlbHAgaGUgaGFkIGVuam95ZWQgdGhyb3VnaCBsaWZlLCBmb2xsb3dlZCB1cG9uIGhpbSBldmVuIGFmdGVyIGRlYXRoIGFzIGFuIGF2ZW5nZXIgb2YgaGlzIG11cmRlciwgZHJpdmluZyBhbmQgdHJhY2tpbmcgZG93biBoaXMgc2xheWVycyBvdmVyIGV2ZXJ5IGxhbmQgYW5kIHNlYSB1bnRpbCBub3Qgb25lIG9mIHRoZW0gd2FzIGxlZnQsIGJ1dCBldmVuIHRob3NlIHdobyBpbiBhbnkgd2F5IHNvZXZlciBlaXRoZXIgcHV0IGhhbmQgdG8gdGhlIGRlZWQgb3IgdG9vayBwYXJ0IGluIHRoZSBwbG90IHdlcmUgcHVuaXNoZWQuPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['69.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2OSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXQgdGhlIHRpbWUgb2YgaGlzIGRlYXRoIENhZXNhciB3YXMgZnVsbHkgZmlmdHktc2l4IHllYXJzIG9sZCwgYnV0IGhlIGhhZCBzdXJ2aXZlZCBQb21wZXkgbm90IG11Y2ggbW9yZSB0aGFuIGZvdXIgeWVhcnMsIHdoaWxlIG9mIHRoZSBwb3dlciBhbmQgZG9taW5pb24gd2hpY2ggaGUgaGFkIHNvdWdodCBhbGwgaGlzIGxpZmUgYXQgc28gZ3JlYXQgcmlza3MsIGFuZCBiYXJlbHkgYWNoaWV2ZWQgYXQgbGFzdCwgb2YgdGhpcyBoZSBoYWQgcmVhcGVkIG5vIGZydWl0IGJ1dCB0aGUgbmFtZSBvZiBpdCBvbmx5LCBhbmQgYSBnbG9yeSB3aGljaCBoYWQgYXdha2VuZWQgZW52eSBvbiB0aGUgcGFydCBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['69.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIHRoZSBncmVhdCBndWFyZGlhbi1nZW5pdXMgb2YgdGhlIG1hbiwgd2hvc2UgaGVscCBoZSBoYWQgZW5qb3llZCB0aHJvdWdoIGxpZmUsIGZvbGxvd2VkIHVwb24gaGltIGV2ZW4gYWZ0ZXIgZGVhdGggYXMgYW4gYXZlbmdlciBvZiBoaXMgbXVyZGVyLCBkcml2aW5nIGFuZCB0cmFja2luZyBkb3duIGhpcyBzbGF5ZXJzIG92ZXIgZXZlcnkgbGFuZCBhbmQgc2VhIHVudGlsIG5vdCBvbmUgb2YgdGhlbSB3YXMgbGVmdCwgYnV0IGV2ZW4gdGhvc2Ugd2hvIGluIGFueSB3YXkgc29ldmVyIGVpdGhlciBwdXQgaGFuZCB0byB0aGUgZGVlZCBvciB0b29rIHBhcnQgaW4gdGhlIHBsb3Qgd2VyZSBwdW5pc2hlZC48cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbW9uZyBldmVudHMgb2YgbWFuJ3Mgb3JkZXJpbmcsIHRoZSBtb3N0IGFtYXppbmcgd2FzIHRoYXQgd2hpY2ggYmVmZWxsIENhc3NpdXM7IGZvciBhZnRlciBoaXMgZGVmZWF0IGF0IFBoaWxpcHBpIGhlIHNsZXcgaGltc2VsZiB3aXRoIHRoYXQgdmVyeSBkYWdnZXIgd2hpY2ggaGUgaGFkIHVzZWQgYWdhaW5zdCBDYWVzYXI7IGFuZCBhbW9uZyBldmVudHMgb2YgZGl2aW5lIG9yZGVyaW5nLCB0aGVyZSB3YXMgdGhlIGdyZWF0IGNvbWV0LCB3aGljaCBzaG93ZWQgaXRzZWxmIGluIGdyZWF0IHNwbGVuZG91ciBmb3Igc2V2ZW4gbmlnaHRzIGFmdGVyIENhZXNhcidzIG11cmRlciwgYW5kIHRoZW4gZGlzYXBwZWFyZWQgOyBhbHNvLCB0aGUgb2JzY3VyYXRpb24gb2YgdGhlIHN1bidzIHJheXMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBkdXJpbmcgYWxsIHRoYXQgeWVhciBpdHMgb3JiIHJvc2UgcGFsZSBhbmQgd2l0aG91dCByYWRpYW5jZSwgd2hpbGUgdGhlIGhlYXQgdGhhdCBjYW1lIGRvd24gZnJvbSBpdCB3YXMgc2xpZ2h0IGFuZCBpbmVmZmVjdHVhbCwgc28gdGhhdCB0aGUgYWlyIGluIGl0cyBjaXJjdWxhdGlvbiB3YXMgZGFyayBhbmQgaGVhdnkgb3dpbmcgdG8gdGhlIGZlZWJsZW5lc3Mgb2YgdGhlIHdhcm10aCB0aGF0IHBlbmV0cmF0ZWQgaXQsIGFuZCB0aGUgZnJ1aXRzLCBpbXBlcmZlY3QgYW5kIGhhbGYgcmlwZSwgd2l0aGVyZWQgYXdheSBhbmQgc2hyaXZlbGxlZCB1cCBvbiBhY2NvdW50IG9mIHRoZSBjb2xkbmVzcyBvZiB0aGUgYXRtb3NwaGVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IG1vcmUgdGhhbiBhbnl0aGluZyBlbHNlIHRoZSBwaGFudG9tIHRoYXQgYXBwZWFyZWQgdG8gQnJ1dHVzIHNob3dlZCB0aGF0IHRoZSBtdXJkZXIgb2YgQ2Flc2FyIHdhcyBub3QgcGxlYXNpbmcgdG8gdGhlIGdvZHM7IGFuZCBpdCB3YXMgb24gdGhpcyB3aXNlLiBBcyBoZSB3YXMgYWJvdXQgdG8gdGFrZSBoaXMgYXJteSBhY3Jvc3MgZnJvbSBBYnlkb3MgdG8gdGhlIG90aGVyIGNvbnRpbmVudCwgaGUgd2FzIGx5aW5nIGRvd24gYXQgbmlnaHQsIGFzIGhpcyBjdXN0b20gd2FzLCBpbiBoaXMgdGVudCwgbm90IHNsZWVwaW5nLCBidXQgdGhpbmtpbmcgb2YgdGhlIGZ1dHVyZTsgZm9yIGl0IGlzIHNhaWQgdGhhdCBvZiBhbGwgZ2VuZXJhbHMgQnJ1dHVzIHdhcyBsZWFzdCBnaXZlbiB0byBzbGVlcCwgYW5kIHRoYXQgaGUgbmF0dXJhbGx5IHJlbWFpbmVkIGF3YWtlIGEgbG9uZ2VyIHRpbWUgdGhhbiBhbnlib2R5IGVsc2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgaGUgdGhvdWdodCBoZSBoZWFyZCBhIG5vaXNlIGF0IHRoZSBkb29yLCBhbmQgbG9va2luZyB0b3dhcmRzIHRoZSBsaWdodCBvZiB0aGUgbGFtcCwgd2hpY2ggd2FzIHNsb3dseSBnb2luZyBvdXQsIGhlIHNhdyBhIGZlYXJmdWwgdmlzaW9uIG9mIGEgbWFuIG9mIHVubmF0dXJhbCBzaXplIGFuZCBoYXJzaCBhc3BlY3QuIEF0IGZpcnN0IGhlIHdhcyB0ZXJyaWZpZWQsIGJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZSB2aXNpdG9yIG5laXRoZXIgZGlkIG5vciBzYWlkIGFueXRoaW5nLCBidXQgc3Rvb2QgaW4gc2lsZW5jZSBieSBoaXMgY291Y2gsIGhlIGFza2VkIGhpbSB3aG8gaGUgd2FzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNyIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHRoZSBwaGFudG9tIGFuc3dlcmVkIGhpbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGFtIHRoeSBldmlsIGdlbml1cywgQnJ1dHVzLCBhbmQgdGhvdSBzaGFsdCBzZWUgbWUgYXQgUGhpbGlwcGkuPC9xPiBBdCB0aGUgdGltZSwgdGhlbiwgQnJ1dHVzIHNhaWQgY291cmFnZW91c2x5OiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2hhbGwgc2VlIHRoZWU7PC9xPiBhbmQgdGhlIGhlYXZlbmx5IHZpc2l0b3IgYXQgb25jZSB3ZW50IGF3YXkuIFN1YnNlcXVlbnRseSwgaG93ZXZlciwgd2hlbiBhcnJheWVkIGFnYWluc3QgQW50b255IGFuZCBDYWVzYXIgYXQgUGhpbGlwcGksIGluIHRoZSBmaXJzdCBiYXR0bGUgaGUgY29ucXVlcmVkIHRoZSBlbmVteSBpbiBoaXMgZnJvbnQsIHJvdXRlZCBhbmQgc2NhdHRlcmVkIHRoZW0sIGFuZCBzYWNrZWQgdGhlIGNhbXAgb2YgQ2Flc2FyOyAKCQkJCTxtaWxlc3RvbmUgbj0iOCIgdW5pdD0ic2VjdGlvbiIgLz5idXQgYXMgaGUgd2FzIGFib3V0IHRvIGZpZ2h0IHRoZSBzZWNvbmQgYmF0dGxlLCB0aGUgc2FtZSBwaGFudG9tIHZpc2l0ZWQgaGltIGFnYWluIGF0IG5pZ2h0LCBhbmQgdGhvdWdoIGl0IHNhaWQgbm90aGluZyB0byBoaW0sIEJydXR1cyB1bmRlcnN0b29kIGhpcyBmYXRlLCBhbmQgcGx1bmdlZCBoZWFkbG9uZyBpbnRvIGRhbmdlci4gSGUgZGlkIG5vdCBmYWxsIGluIGJhdHRsZSwgaG93ZXZlciwgYnV0IGFmdGVyIHRoZSByb3V0IHJldGlyZWQgdG8gYSBjcmVzdCBvZiBncm91bmQsIHB1dCBoaXMgbmFrZWQgc3dvcmQgdG8gaGlzIGJyZWFzdCAod2hpbGUgYSBjZXJ0YWluIGZyaWVuZCwgYXMgdGhleSBzYXksIGhlbHBlZCB0byBkcml2ZSB0aGUgYmxvdyBob21lKSwgYW5kIHNvIGRpZWQuPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+Q2YuIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gMzYuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5CcnV0dXM8L3RpdGxlPiwgeHh4dmkuPC9iaWJsPjsgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEJydXQuIDQ4LjEiIHZhbGlkPSJ5ZXMiPnhsdmlpaS48L2JpYmw+OyA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQnJ1dC4gNTIuMSIgdmFsaWQ9InllcyI+bGlpPC9iaWJsPi48L25vdGU+CiAgICAgICAgIDwvcD4KICAgICAgPC90cmFuc2xhdGlvbj4="
translation['69.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIGV2ZW50cyBvZiBtYW4ncyBvcmRlcmluZywgdGhlIG1vc3QgYW1hemluZyB3YXMgdGhhdCB3aGljaCBiZWZlbGwgQ2Fzc2l1czsgZm9yIGFmdGVyIGhpcyBkZWZlYXQgYXQgUGhpbGlwcGkgaGUgc2xldyBoaW1zZWxmIHdpdGggdGhhdCB2ZXJ5IGRhZ2dlciB3aGljaCBoZSBoYWQgdXNlZCBhZ2FpbnN0IENhZXNhcjsgYW5kIGFtb25nIGV2ZW50cyBvZiBkaXZpbmUgb3JkZXJpbmcsIHRoZXJlIHdhcyB0aGUgZ3JlYXQgY29tZXQsIHdoaWNoIHNob3dlZCBpdHNlbGYgaW4gZ3JlYXQgc3BsZW5kb3VyIGZvciBzZXZlbiBuaWdodHMgYWZ0ZXIgQ2Flc2FyJ3MgbXVyZGVyLCBhbmQgdGhlbiBkaXNhcHBlYXJlZCA7IGFsc28sIHRoZSBvYnNjdXJhdGlvbiBvZiB0aGUgc3VuJ3MgcmF5cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['69.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBkdXJpbmcgYWxsIHRoYXQgeWVhciBpdHMgb3JiIHJvc2UgcGFsZSBhbmQgd2l0aG91dCByYWRpYW5jZSwgd2hpbGUgdGhlIGhlYXQgdGhhdCBjYW1lIGRvd24gZnJvbSBpdCB3YXMgc2xpZ2h0IGFuZCBpbmVmZmVjdHVhbCwgc28gdGhhdCB0aGUgYWlyIGluIGl0cyBjaXJjdWxhdGlvbiB3YXMgZGFyayBhbmQgaGVhdnkgb3dpbmcgdG8gdGhlIGZlZWJsZW5lc3Mgb2YgdGhlIHdhcm10aCB0aGF0IHBlbmV0cmF0ZWQgaXQsIGFuZCB0aGUgZnJ1aXRzLCBpbXBlcmZlY3QgYW5kIGhhbGYgcmlwZSwgd2l0aGVyZWQgYXdheSBhbmQgc2hyaXZlbGxlZCB1cCBvbiBhY2NvdW50IG9mIHRoZSBjb2xkbmVzcyBvZiB0aGUgYXRtb3NwaGVyZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['69.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSB0aGUgcGhhbnRvbSB0aGF0IGFwcGVhcmVkIHRvIEJydXR1cyBzaG93ZWQgdGhhdCB0aGUgbXVyZGVyIG9mIENhZXNhciB3YXMgbm90IHBsZWFzaW5nIHRvIHRoZSBnb2RzOyBhbmQgaXQgd2FzIG9uIHRoaXMgd2lzZS4gQXMgaGUgd2FzIGFib3V0IHRvIHRha2UgaGlzIGFybXkgYWNyb3NzIGZyb20gQWJ5ZG9zIHRvIHRoZSBvdGhlciBjb250aW5lbnQsIGhlIHdhcyBseWluZyBkb3duIGF0IG5pZ2h0LCBhcyBoaXMgY3VzdG9tIHdhcywgaW4gaGlzIHRlbnQsIG5vdCBzbGVlcGluZywgYnV0IHRoaW5raW5nIG9mIHRoZSBmdXR1cmU7IGZvciBpdCBpcyBzYWlkIHRoYXQgb2YgYWxsIGdlbmVyYWxzIEJydXR1cyB3YXMgbGVhc3QgZ2l2ZW4gdG8gc2xlZXAsIGFuZCB0aGF0IGhlIG5hdHVyYWxseSByZW1haW5lZCBhd2FrZSBhIGxvbmdlciB0aW1lIHRoYW4gYW55Ym9keSBlbHNlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['69.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBub3cgaGUgdGhvdWdodCBoZSBoZWFyZCBhIG5vaXNlIGF0IHRoZSBkb29yLCBhbmQgbG9va2luZyB0b3dhcmRzIHRoZSBsaWdodCBvZiB0aGUgbGFtcCwgd2hpY2ggd2FzIHNsb3dseSBnb2luZyBvdXQsIGhlIHNhdyBhIGZlYXJmdWwgdmlzaW9uIG9mIGEgbWFuIG9mIHVubmF0dXJhbCBzaXplIGFuZCBoYXJzaCBhc3BlY3QuIEF0IGZpcnN0IGhlIHdhcyB0ZXJyaWZpZWQsIGJ1dCB3aGVuIGhlIHNhdyB0aGF0IHRoZSB2aXNpdG9yIG5laXRoZXIgZGlkIG5vciBzYWlkIGFueXRoaW5nLCBidXQgc3Rvb2QgaW4gc2lsZW5jZSBieSBoaXMgY291Y2gsIGhlIGFza2VkIGhpbSB3aG8gaGUgd2FzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['69.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gdGhlIHBoYW50b20gYW5zd2VyZWQgaGltOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SSBhbSB0aHkgZXZpbCBnZW5pdXMsIEJydXR1cywgYW5kIHRob3Ugc2hhbHQgc2VlIG1lIGF0IFBoaWxpcHBpLjwvcT4gQXQgdGhlIHRpbWUsIHRoZW4sIEJydXR1cyBzYWlkIGNvdXJhZ2VvdXNseTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgc2hhbGwgc2VlIHRoZWU7PC9xPiBhbmQgdGhlIGhlYXZlbmx5IHZpc2l0b3IgYXQgb25jZSB3ZW50IGF3YXkuIFN1YnNlcXVlbnRseSwgaG93ZXZlciwgd2hlbiBhcnJheWVkIGFnYWluc3QgQW50b255IGFuZCBDYWVzYXIgYXQgUGhpbGlwcGksIGluIHRoZSBmaXJzdCBiYXR0bGUgaGUgY29ucXVlcmVkIHRoZSBlbmVteSBpbiBoaXMgZnJvbnQsIHJvdXRlZCBhbmQgc2NhdHRlcmVkIHRoZW0sIGFuZCBzYWNrZWQgdGhlIGNhbXAgb2YgQ2Flc2FyOyAKCQkJCTwvdHJhbnNsYXRpb24+"
