var translations = [];
var translatedSection = null;
var current = 0;

function updateScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  console.log(page)

  var bookmarkedPageFieldName = book + "Page";
  var bookmarkedPage = localStorage.getItem(bookmarkedPageFieldName);
  if (bookmarkedPage == null) {
    localStorage.setItem(bookmarkedPageFieldName, page);
  }

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";

  var scrollPosition = localStorage.getItem(positionOnPage);
  if (scrollPosition == null) {
    scrollPosition = window.pageYOffset;
    localStorage.setItem(positionOnPage, scrollPosition);
    return;
  }

  if (bookmarkedPage == page) {
    window.scrollTo(0, scrollPosition)
    return;
  }
  window.location = bookmarkedPage;
}

function storeScrollPosition() {
  var book = titleElements[0] + titleElements[1];
  var path = window.location.pathname;
  var page = path.split("/").pop();
  localStorage.setItem(book + "Page", page);

  var pageOfBook = page.replace(".html", "");
  var positionOnPage = pageOfBook + "ScrollPosition";
  scrollPosition = window.pageYOffset;
  localStorage.setItem(positionOnPage, scrollPosition);
}

function showNextOnHelper(evt) {
  current++;
  if (current > translations.length - 1) {
    current = 0;
  }
  var translation = translations[current];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = (current + 1) + "/" + translations.length;
    helper.appendChild(transCount);
  }
}

function updateHelper(evt, lineNumber, translationsForWord) {
  if (typeof updateHelper.currentWord === 'object') {
    updateHelper.currentWord.style.textDecoration = "none";
  }
  
  if (evt.target == updateHelper.currentWord) {
    displayTranslation(lineNumber);
    return;
  }

  evt.target.style.textDecoration = "underline red";
  updateHelper.currentWord = evt.target;

  if (typeof updateHelper.previousCommentBubble === 'object' 
      && updateHelper.previousCommentBubble != null) {
    updateHelper.previousCommentBubble.style.display = "none";
  }
  var commentBubble = document.getElementById("indicator-" + lineNumber);
  if (commentBubble != null) {
    commentBubble.style.display = "inline";
  }
  updateHelper.previousCommentBubble = commentBubble;

  showTitle(lineNumber);

  translations = translationsForWord;
  var translation = translations[0];
  var innerHTML = "<span><span style='font-weight: bold; font-family:\"GFS Didot\"'>"
    + translation[0] + ",</span> " + translation[1] + "</span>";
  helper.innerHTML = innerHTML;
  helper.style.display = "block";

  if (translations.length > 1) {
    var transCount = document.createElement("span");
    transCount.id = 'transCount';
    transCount.textContent = "1/" + translations.length;
    helper.appendChild(transCount);
  }

  storeScrollPosition();
}

function showTitle(lineNumber) {
  lineNumber = lineNumber.replace(/\./g, '');
  var page = parseInt(parseInt(lineNumber, 10) / 100, 10);
  if (isNaN(page)) {
    return;
  }
  var result = page % 2;
  
  var titleToShow = titleElements[result];
  var innerHTML = "<span class=\"title\">" + titleToShow + "</span>";
  masthead.innerHTML = innerHTML;
}

function displayTranslation(line) {
  if (translatedSection) {
    translatedSection.style.backgroundColor = "";
  }
  translatedSection = document.getElementById(line);
  if (!translatedSection) {
    return;
  }
  if (!translation.hasOwnProperty(line)) {
    return;
  }
  translatedSection.style.backgroundColor = "yellow";
  parallel_translation.innerHTML = atobUTF8(translation[line]);
  parallel_translation.style.display = "block";
}

function hideTranslation() {
  translatedSection.style.backgroundColor = "";
  parallel_translation.style.display = "none";
}


function displayComment(line) {
  comment.innerHTML = atobUTF8(commentary[line]);
  comment.style.display = "block";
}

function hideComment() {
  comment.style.display = "none";
}

if ('serviceWorker' in navigator) {
  window.addEventListener('load', function() {
    navigator.serviceWorker.register('serviceworker.js').then(function(registration) {
      // Registration was successful
      console.log('ServiceWorker registration successful with scope: ', registration.scope);
    }, function(err) {
      // registration failed :(
      console.log('ServiceWorker registration failed: ', err);
    });
  });
}

window.onload = updateScrollPosition;
var translation={}
var translation={}
translation['1.1'] = ""
translation['1.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgb2ghIHdoYXQgZ3JlYXRlciBqb3kgdGhhbiB0aGlzIGNhbnN0IHRob3Ugb2J0YWluLDwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5BbmQgb2ghIHdoYXQgZ3JlYXRlciBqb3kgdGhhbiB0aGlzIGNhbnN0IHRob3Ugb2J0YWluLDwvbD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbiBpYW1iaWMgdHJpbWV0ZXIgZnJvbSB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VHltcGFuaXN0YWU8L3RpdGxlPiBvZiBTb3Bob2NsZXMgKE5hdWNrLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UcmFnLiBHcmFlYy4gRnJhZy4yPC90aXRsZT4sIHAuIDI3MCkuPC9ub3RlPiBhbmQgbW9yZSBlZmZpY2FjaW91cyBmb3IgbW9yYWwgaW1wcm92ZW1lbnQ/IERlbW9jcml0dXMgc2F5cyB3ZSBvdWdodCB0byBwcmF5IHRoYXQgd2UgbWF5IGJlIHZpc2l0ZWQgYnkgcGhhbnRvbXMgd2hpY2ggYXJlIHByb3BpdGlvdXMsIGFuZCB0aGF0IGZyb20gb3V0IHRoZSBjaXJjdW1hbWJpZW50IGFpciBzdWNoIG9ubHkgbWF5IGVuY291bnRlciB1cyBhcyBhcmUgYWdyZWVhYmxlIHRvIG91ciBuYXR1cmVzIGFuZCBnb29kLCByYXRoZXIgdGhhbiB0aG9zZSB3aGljaCBhcmUgcGVydmVyc2UgYW5kIGJhZCwgdGhlcmVieSBpbnRydWRpbmcgaW50byBwaGlsb3NvcGh5IGEgZG9jdHJpbmUgd2hpY2ggaXMgbm90IHRydWUsIGFuZCB3aGljaCBsZWFkcyBhc3RyYXkgaW50byBib3VuZGxlc3Mgc3VwZXJzdGl0aW9ucy4gCgkJCQk8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UeW1wYW5pc3RhZTwvdGl0bGU+IG9mIFNvcGhvY2xlcyAoTmF1Y2ssIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPlRyYWcuIEdyYWVjLiBGcmFnLjI8L3RpdGxlPiwgcC4gMjcwKS48L3RyYW5zbGF0aW9uPg=="
translation['1.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBpbiBteSBvd24gY2FzZSwgdGhlIHN0dWR5IG9mIGhpc3RvcnkgYW5kIHRoZSBmYW1pbGlhcml0eSB3aXRoIGl0IHdoaWNoIG15IHdyaXRpbmcgcHJvZHVjZXMsIGVuYWJsZXMgbWUsIHNpbmNlIEkgYWx3YXlzIGNoZXJpc2ggaW4gbXkgc291bCB0aGUgcmVjb3JkcyBvZiB0aGUgbm9ibGVzdCBhbmQgbW9zdCBlc3RpbWFibGUgY2hhcmFjdGVycywgdG8gcmVwZWwgYW5kIHB1dCBmYXIgZnJvbSBtZSB3aGF0ZXZlciBiYXNlLCBtYWxpY2lvdXMsIG9yIGlnbm9ibGUgc3VnZ2VzdGlvbiBteSBlbmZvcmNlZCBhc3NvY2lhdGlvbnMgbWF5IGludHJ1ZGUgdXBvbiBtZSwgY2FsbWx5IGFuZCBkaXNwYXNzaW9uYXRlbHkgdHVybmluZyBteSB0aG91Z2h0cyBhd2F5IGZyb20gdGhlbSB0byB0aGUgZmFpcmVzdCBvZiBteSBleGFtcGxlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['1.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZXNlIHdlcmUgVGltb2xlb24gdGhlIENvcmludGhpYW4gYW5kIEFlbWlsaXVzIFBhdWx1cywgd2hvc2UgTGl2ZXMgSSBoYXZlIG5vdyB1bmRlcnRha2VuIHRvIGxheSBiZWZvcmUgbXkgcmVhZGVyczsgdGhlIG1lbiB3ZXJlIGFsaWtlIG5vdCBvbmx5IGluIHRoZSBnb29kIHByaW5jaXBsZXMgd2hpY2ggdGhleSBhZG9wdGVkLCBidXQgYWxzbyBpbiB0aGUgZ29vZCBmb3J0dW5lIHdoaWNoIHRoZXkgZW5qb3llZCBpbiB0aGVpciBjb25kdWN0IG9mIGFmZmFpcnMsIGFuZCB0aGV5IHdpbGwgbWFrZSBpdCBoYXJkIGZvciBteSByZWFkZXJzIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBncmVhdGVzdCBvZiB0aGVpciBzdWNjZXNzZnVsIGFjaGlldmVtZW50cyB3ZXJlIGR1ZSB0byB0aGVpciBnb29kIGZvcnR1bmUgb3IgdGhlaXIgd2lzZG9tLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiB0aGUgTVNTLiB0aGlzIEludHJvZHVjdGlvbiBzdGFuZHMgYXMgdGhlIGZpcnN0IGNoYXB0ZXIgb2YgdGhlIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkFlbWlsaXVzIFBhdWx1czwvdGl0bGU+Ljwvbm90ZT4KCQkJICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVtaWxpdXMgUGF1bHVzPC90aXRsZT4uPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGZpcnN0IGNoYXB0ZXIgaGFzIGJlZW4gdHJhbnNwb3NlZCB0byBzZXJ2ZSBhcyBJbnRyb2R1Y3Rpb24gdG8gYm90aCB0aGUgPHRpdGxlPlRpbW9sZW9uPC90aXRsZT4gYW5kIHRoZTx0aXRsZT5BZW1pbGl1cyBQYXVsdXM8L3RpdGxlPi48L25vdGU+IFRoYXQgdGhlIEFlbWlsaWkgd2VyZSBvbmUgb2YgdGhlIGFuY2llbnQgYW5kIHBhdHJpY2lhbiBob3VzZXMgYXQgUm9tZSwgbW9zdCB3cml0ZXJzIGFncmVlLiBBbmQgdGhhdCB0aGUgZmlyc3Qgb2YgdGhlbSwgYW5kIHRoZSBvbmUgd2hvIGdhdmUgaGlzIHN1cm5hbWUgdG8gdGhlIGZhbWlseSwgd2FzIE1hbWVyY3VzLCBhIHNvbiBvZiBQeXRoYWdvcmFzIHRoZSBwaGlsb3NvcGhlciwgd2hvIHJlY2VpdmVkIHRoZSBzdXJuYW1lIG9mIEFlbWlsaXVzIGZvciB0aGUgPGVtcGg+Z3JhY2U8L2VtcGg+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlBsdXRhcmNoIHN1Z2dlc3RzIHRoZSBpZGVudGl0eSBvZiB0aGUgTGF0aW4gQWVtaWxpdXMgd2l0aCB0aGUgR3JlZWsgPGZvcmVpZ24gbGFuZz0iZ3JlZWsiPs6x4byxzrzhvbvOu865zr/PgjwvZm9yZWlnbj4gKHdpbm5pbmcpLiBDZi4gPGJpYmwgZGVmYXVsdD0iTk8iIG49IkhvbS4gT2QuIDEuNTYiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+T2R5c3NleTwvdGl0bGU+LCBpLiA1Ni48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gYW5kIGNoYXJtIG9mIGhpcyBkaXNjb3Vyc2UsIGlzIHRoZSBzdGF0ZW1lbnQgb2Ygc29tZSBvZiB0aG9zZSB3cml0ZXJzIHdobyBob2xkIHRoYXQgUHl0aGFnb3JhcyB3YXMgdGhlIGVkdWNhdG9yIG9mIE51bWEgdGhlIGtpbmcuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBOdW0uIDEuMiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5OdW1hPC90aXRsZT4sIGkuIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gIAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCBtb3N0IG9mIHRoaXMgZmFtaWx5IHdobyByb3NlIHRvIGRpc3RpbmN0aW9uIGJ5IHRoZWlyIGN1bHRpdmF0aW9uIG9mIHZpcnR1ZSwgd2VyZSBibGVzc2VkIHdpdGggZ29vZCBmb3J0dW5lOyBhbmQgaW4gdGhlIGNhc2Ugb2YgTHVjaXVzIFBhdWx1cywgaGlzIG1pc2ZvcnR1bmUgYXQgQ2FubmFlIGdhdmUgdGVzdGltb255IGFsaWtlIHRvIGhpcyB3aXNkb20gYW5kIHZhbG91ci4gRm9yIHdoZW4gaGUgY291bGQgbm90IGRpc3N1YWRlIGhpcyBjb2xsZWFndWUgZnJvbSBnaXZpbmcgYmF0dGxlLCBoZSB0b29rIHBhcnQgd2l0aCBoaW0gaW4gdGhlIHN0cnVnZ2xlLCB0aG91Z2ggcmVsdWN0YW50bHksIGJ1dCB3b3VsZCBub3QgYmUgYSBwYXJ0bmVyIGluIGhpcyBmbGlnaHQ7IG5heSwgdGhvdWdoIHRoZSBvbmUgd2hvIGhhZCBicm91Z2h0IG9uIHRoZSBwZXJpbCBsZWZ0IGhpbSBpbiB0aGUgbHVyY2gsIGhlIGhpbXNlbGYga2VwdCBoaXMgcG9zdCBhbmQgZGllZCBmaWdodGluZyB0aGUgZW5lbXkuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDE0LjEiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgY2hhcHRlcnMgeGl2LjwvYmlibD4gYW5kIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDE2LjEiIHZhbGlkPSJ5ZXMiPnh2aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['2.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgZmlyc3QgY2hhcHRlciBoYXMgYmVlbiB0cmFuc3Bvc2VkIHRvIHNlcnZlIGFzIEludHJvZHVjdGlvbiB0byBib3RoIHRoZSA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5UaW1vbGVvbjwvdGl0bGU+IGFuZCB0aGU8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5BZW1pbGl1cyBQYXVsdXM8L3RpdGxlPi48L25vdGU+IFRoYXQgdGhlIEFlbWlsaWkgd2VyZSBvbmUgb2YgdGhlIGFuY2llbnQgYW5kIHBhdHJpY2lhbiBob3VzZXMgYXQgUm9tZSwgbW9zdCB3cml0ZXJzIGFncmVlLiBBbmQgdGhhdCB0aGUgZmlyc3Qgb2YgdGhlbSwgYW5kIHRoZSBvbmUgd2hvIGdhdmUgaGlzIHN1cm5hbWUgdG8gdGhlIGZhbWlseSwgd2FzIE1hbWVyY3VzLCBhIHNvbiBvZiBQeXRoYWdvcmFzIHRoZSBwaGlsb3NvcGhlciwgd2hvIHJlY2VpdmVkIHRoZSBzdXJuYW1lIG9mIEFlbWlsaXVzIGZvciB0aGUgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+VGltb2xlb248L3RpdGxlPiBhbmQgdGhlPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QWVtaWxpdXMgUGF1bHVzPC90aXRsZT4uPGVtcGggY2xhc3M9InRyYW5zbGF0aW9uIj5ncmFjZTwvZW1waD4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5QbHV0YXJjaCBzdWdnZXN0cyB0aGUgaWRlbnRpdHkgb2YgdGhlIExhdGluIEFlbWlsaXVzIHdpdGggdGhlIEdyZWVrIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0iZ3JlZWsiPs6x4byxzrzhvbvOu865zr/PgjwvZm9yZWlnbj4gKHdpbm5pbmcpLiBDZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBPZC4gMS41NiIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaS4gNTYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGFuZCBjaGFybSBvZiBoaXMgZGlzY291cnNlLCBpcyB0aGUgc3RhdGVtZW50IG9mIHNvbWUgb2YgdGhvc2Ugd3JpdGVycyB3aG8gaG9sZCB0aGF0IFB5dGhhZ29yYXMgd2FzIHRoZSBlZHVjYXRvciBvZiBOdW1hIHRoZSBraW5nLgoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJncmVlayI+zrHhvLHOvOG9u867zrnOv8+CPC9mb3JlaWduPiAod2lubmluZykuIENmLiA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIE9kLiAxLjU2IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+T2R5c3NleTwvdGl0bGU+LCBpLiA1Ni48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk9keXNzZXk8L3RpdGxlPiwgaS4gNTYuPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIE51bS4gMS4yIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+TnVtYTwvdGl0bGU+LCBpLiAyIGYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+ICAKCQkJCSAgICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gTnVtLiAxLjIiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5OdW1hPC90aXRsZT4sIGkuIDIgZi48L2JpYmw+CiAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPk51bWE8L3RpdGxlPiwgaS4gMiBmLjwvdHJhbnNsYXRpb24+"
translation['2.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5vdywgbW9zdCBvZiB0aGlzIGZhbWlseSB3aG8gcm9zZSB0byBkaXN0aW5jdGlvbiBieSB0aGVpciBjdWx0aXZhdGlvbiBvZiB2aXJ0dWUsIHdlcmUgYmxlc3NlZCB3aXRoIGdvb2QgZm9ydHVuZTsgYW5kIGluIHRoZSBjYXNlIG9mIEx1Y2l1cyBQYXVsdXMsIGhpcyBtaXNmb3J0dW5lIGF0IENhbm5hZSBnYXZlIHRlc3RpbW9ueSBhbGlrZSB0byBoaXMgd2lzZG9tIGFuZCB2YWxvdXIuIEZvciB3aGVuIGhlIGNvdWxkIG5vdCBkaXNzdWFkZSBoaXMgY29sbGVhZ3VlIGZyb20gZ2l2aW5nIGJhdHRsZSwgaGUgdG9vayBwYXJ0IHdpdGggaGltIGluIHRoZSBzdHJ1Z2dsZSwgdGhvdWdoIHJlbHVjdGFudGx5LCBidXQgd291bGQgbm90IGJlIGEgcGFydG5lciBpbiBoaXMgZmxpZ2h0OyBuYXksIHRob3VnaCB0aGUgb25lIHdobyBoYWQgYnJvdWdodCBvbiB0aGUgcGVyaWwgbGVmdCBoaW0gaW4gdGhlIGx1cmNoLCBoZSBoaW1zZWxmIGtlcHQgaGlzIHBvc3QgYW5kIGRpZWQgZmlnaHRpbmcgdGhlIGVuZW15LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZhYi4gMTQuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZhYml1cyBNYXhpbXVzPC90aXRsZT4sIGNoYXB0ZXJzIHhpdi48L2JpYmw+IGFuZCA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDE2LjEiIHZhbGlkPSJ5ZXMiPnh2aS48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmFiLiAxNC4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+RmFiaXVzIE1heGltdXM8L3RpdGxlPiwgY2hhcHRlcnMgeGl2LjwvYmlibD4gYW5kIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZhYml1cyBNYXhpbXVzPC90aXRsZT4sIGNoYXB0ZXJzIHhpdi48YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGYWIuIDE2LjEiIHZhbGlkPSJ5ZXMiPnh2aS48L2JpYmw+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzIFBhdWx1cyBoYWQgYSBkYXVnaHRlciwgQWVtaWxpYSwgd2hvIHdhcyB0aGUgd2lmZSBvZiBTY2lwaW8gdGhlIEdyZWF0LCBhbmQgYSBzb24sIEFlbWlsaXVzIFBhdWx1cywgd2hvc2UgTGlmZSBJIG5vdyB3cml0ZS4gSGUgY2FtZSBvZiBhZ2UgYXQgYSB0aW1lIHdoaWNoIGFib3VuZGVkIGluIG1lbiBvZiB0aGUgZ3JlYXRlc3QgcmVwdXRhdGlvbiBhbmQgbW9zdCBpbGx1c3RyaW91cyB2aXJ0dWUsIGFuZCB5ZXQgaGUgd2FzIGEgY29uc3BpY3VvdXMgZmlndXJlLCBhbHRob3VnaCBoZSBkaWQgbm90IHB1cnN1ZSB0aGUgc2FtZSBzdHVkaWVzIGFzIHRoZSB5b3VuZyBub2JsZXMgb2YgdGhlIHRpbWUsIG5vciBzZXQgb3V0IG9uIGhpcyBjYXJlZXIgYnkgdGhlIHNhbWUgcGF0aC4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIGRpZCBub3QgcHJhY3Rpc2UgcGxlYWRpbmcgcHJpdmF0ZSBjYXNlcyBpbiB0aGUgY291cnRzLCBhbmQgcmVmcmFpbmVkIGFsdG9nZXRoZXIgZnJvbSB0aGUgc2FsdXRhdGlvbnMgYW5kIGdyZWV0aW5ncyBhbmQgZnJpZW5kbHkgYXR0ZW50aW9ucyB0byB3aGljaCBtb3N0IG1lbiBjdW5uaW5nbHkgcmVzb3J0ZWQgd2hlbiB0aGV5IHRyaWVkIHRvIHdpbiB0aGUgZmF2b3VyIG9mIHRoZSBwZW9wbGUgYnkgYmVjb21pbmcgdGhlaXIgemVhbG91cyBzZXJ2YW50czsgbm90IHRoYXQgaGUgd2FzIG5hdHVyYWxseSBpbmNhcGFibGUgb2YgZWl0aGVyLCBidXQgaGUgc291Z2h0IHRvIGFjcXVpcmUgZm9yIGhpbXNlbGYgd2hhdCB3YXMgYmV0dGVyIHRoYW4gYm90aCwgbmFtZWx5LCBhIHJlcHV0YXRpb24gYXJpc2luZyBmcm9tIHZhbG91ciwganVzdGljZSwgYW5kIHRydXN0d29ydGhpbmVzcy4gSW4gdGhlc2UgdmlydHVlcyBoZSBhdCBvbmNlIHN1cnBhc3NlZCBoaXMgY29udGVtcG9yYXJpZXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['2.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiBUaGlzIFBhdWx1cyBoYWQgYSBkYXVnaHRlciwgQWVtaWxpYSwgd2hvIHdhcyB0aGUgd2lmZSBvZiBTY2lwaW8gdGhlIEdyZWF0LCBhbmQgYSBzb24sIEFlbWlsaXVzIFBhdWx1cywgd2hvc2UgTGlmZSBJIG5vdyB3cml0ZS4gSGUgY2FtZSBvZiBhZ2UgYXQgYSB0aW1lIHdoaWNoIGFib3VuZGVkIGluIG1lbiBvZiB0aGUgZ3JlYXRlc3QgcmVwdXRhdGlvbiBhbmQgbW9zdCBpbGx1c3RyaW91cyB2aXJ0dWUsIGFuZCB5ZXQgaGUgd2FzIGEgY29uc3BpY3VvdXMgZmlndXJlLCBhbHRob3VnaCBoZSBkaWQgbm90IHB1cnN1ZSB0aGUgc2FtZSBzdHVkaWVzIGFzIHRoZSB5b3VuZyBub2JsZXMgb2YgdGhlIHRpbWUsIG5vciBzZXQgb3V0IG9uIGhpcyBjYXJlZXIgYnkgdGhlIHNhbWUgcGF0aC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['2.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZvciBoZSBkaWQgbm90IHByYWN0aXNlIHBsZWFkaW5nIHByaXZhdGUgY2FzZXMgaW4gdGhlIGNvdXJ0cywgYW5kIHJlZnJhaW5lZCBhbHRvZ2V0aGVyIGZyb20gdGhlIHNhbHV0YXRpb25zIGFuZCBncmVldGluZ3MgYW5kIGZyaWVuZGx5IGF0dGVudGlvbnMgdG8gd2hpY2ggbW9zdCBtZW4gY3VubmluZ2x5IHJlc29ydGVkIHdoZW4gdGhleSB0cmllZCB0byB3aW4gdGhlIGZhdm91ciBvZiB0aGUgcGVvcGxlIGJ5IGJlY29taW5nIHRoZWlyIHplYWxvdXMgc2VydmFudHM7IG5vdCB0aGF0IGhlIHdhcyBuYXR1cmFsbHkgaW5jYXBhYmxlIG9mIGVpdGhlciwgYnV0IGhlIHNvdWdodCB0byBhY3F1aXJlIGZvciBoaW1zZWxmIHdoYXQgd2FzIGJldHRlciB0aGFuIGJvdGgsIG5hbWVseSwgYSByZXB1dGF0aW9uIGFyaXNpbmcgZnJvbSB2YWxvdXIsIGp1c3RpY2UsIGFuZCB0cnVzdHdvcnRoaW5lc3MuIEluIHRoZXNlIHZpcnR1ZXMgaGUgYXQgb25jZSBzdXJwYXNzZWQgaGlzIGNvbnRlbXBvcmFyaWVzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCBldmVudHMsIHdoZW4gaGUgc3VlZCBmb3IgdGhlIGZpcnN0IG9mIHRoZSBoaWdoIG9mZmljZXMgaW4gdGhlIHN0YXRlLCB0aGUgYWVkaWxlc2hpcCwgaGUgd2FzIGVsZWN0ZWQgb3ZlciB0d2VsdmUgY29tcGV0aXRvcnMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxOTIgQi5DLjwvbm90ZT4gYWxsIG9mIHdob20sIHdlIGFyZSB0b2xkLCBhZnRlcndhcmRzIGJlY2FtZSBjb25zdWxzLiBNb3Jlb3Zlciwgd2hlbiBoZSB3YXMgbWFkZSBvbmUgb2YgdGhlIHByaWVzdHMgY2FsbGVkIEF1Z3Vycywgd2hvbSB0aGUgUm9tYW5zIGFwcG9pbnQgYXMgZ3VhcmRpYW5zIGFuZCBvdmVyc2VlcnMgb2YgdGhlIGFydCBvZiBkaXZpbmF0aW9uIGZyb20gdGhlIGZsaWdodCBvZiBiaXJkcyBhbmQgZnJvbSBvbWVucyBpbiB0aGUgc2t5LCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5oZSBzbyBjYXJlZnVsbHkgc3R1ZGllZCB0aGUgYW5jZXN0cmFsIGN1c3RvbXMgb2YgdGhlIGNpdHksIGFuZCBzbyB0aG9yb3VnaGx5IHVuZGVyc3Rvb2QgdGhlIHJlbGlnaW91cyBjZXJlbW9uaWFsIG9mIHRoZSBhbmNpZW50IFJvbWFucywgdGhhdCBoaXMgcHJpZXN0bHkgZnVuY3Rpb24sIHdoaWNoIG1lbiBoYWQgdGhvdWdodCB0byBiZSBhIGtpbmQgb2YgaG9ub3VyLCBzb3VnaHQgbWVyZWx5IG9uIGFjY291bnQgb2YgdGhlIHJlcHV0YXRpb24gd2hpY2ggaXQgZ2F2ZSwgd2FzIG1hZGUgdG8gYXBwZWFyIG9uZSBvZiB0aGUgaGlnaGVyIGFydHMsIGFuZCB0ZXN0aWZpZWQgaW4gZmF2b3VyIG9mIHRob3NlIHBoaWxvc29waGVycyB3aG8gZGVmaW5lIHJlbGlnaW9uIGFzIHRoZSBzY2llbmNlIG9mIHRoZSB3b3JzaGlwIG9mIHRoZSBnb2RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgYWxsIHRoZSBkdXRpZXMgb2YgdGhpcyBvZmZpY2Ugd2VyZSBwZXJmb3JtZWQgYnkgaGltIHdpdGggc2tpbGwgYW5kIGNhcmUsIGFuZCBoZSBsYWlkIGFzaWRlIGFsbCBvdGhlciBjb25jZXJucyB3aGVuIGhlIHdhcyBlbmdhZ2VkIGluIHRoZXNlLCBvbWl0dGluZyBub3RoaW5nIGFuZCBhZGRpbmcgbm90aGluZyBuZXcsIGJ1dCBldmVyIGNvbnRlbmRpbmcgZXZlbiB3aXRoIGhpcyBjb2xsZWFndWVzIGFib3V0IHRoZSBzbWFsbCBkZXRhaWxzIG9mIGNlcmVtb255LCBhbmQgZXhwbGFpbmluZyB0byB0aGVtIHRoYXQsIGFsdGhvdWdoIHRoZSBEZWl0eSB3YXMgaGVsZCB0byBiZSBnb29kLW5hdHVyZWQgYW5kIHNsb3cgdG8gY2Vuc3VyZSBhY3RzIG9mIG5lZ2xpZ2VuY2UsIHN0aWxsLCBmb3IgdGhlIGNpdHkgYXQgbGVhc3QgaXQgd2FzIGEgZ3JpZXZvdXMgdGhpbmcgdG8gb3Zlcmxvb2sgYW5kIGNvbmRvbmUgdGhlbTsgZm9yIG5vIG1hbiBiZWdpbnMgYXQgb25jZSB3aXRoIGEgZ3JlYXQgZGVlZCBvZiBsYXdsZXNzbmVzcyB0byBkaXN0dXJiIHRoZSBjaXZpbCBwb2xpdHksIGJ1dCB0aG9zZSB3aG8gcmVtaXQgdGhlaXIgc3RyaWN0bmVzcyBpbiBzbWFsbCBtYXR0ZXJzIGJyZWFrIGRvd24gYWxzbyB0aGUgZ3VhcmQgdGhhdCBoYXMgYmVlbiBzZXQgb3ZlciBncmVhdGVyIG1hdHRlcnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['3.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BdCBhbGwgZXZlbnRzLCB3aGVuIGhlIHN1ZWQgZm9yIHRoZSBmaXJzdCBvZiB0aGUgaGlnaCBvZmZpY2VzIGluIHRoZSBzdGF0ZSwgdGhlIGFlZGlsZXNoaXAsIGhlIHdhcyBlbGVjdGVkIG92ZXIgdHdlbHZlIGNvbXBldGl0b3JzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxOTIgQi5DLjwvbm90ZT4gYWxsIG9mIHdob20sIHdlIGFyZSB0b2xkLCBhZnRlcndhcmRzIGJlY2FtZSBjb25zdWxzLiBNb3Jlb3Zlciwgd2hlbiBoZSB3YXMgbWFkZSBvbmUgb2YgdGhlIHByaWVzdHMgY2FsbGVkIEF1Z3Vycywgd2hvbSB0aGUgUm9tYW5zIGFwcG9pbnQgYXMgZ3VhcmRpYW5zIGFuZCBvdmVyc2VlcnMgb2YgdGhlIGFydCBvZiBkaXZpbmF0aW9uIGZyb20gdGhlIGZsaWdodCBvZiBiaXJkcyBhbmQgZnJvbSBvbWVucyBpbiB0aGUgc2t5LCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['3.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmhlIHNvIGNhcmVmdWxseSBzdHVkaWVkIHRoZSBhbmNlc3RyYWwgY3VzdG9tcyBvZiB0aGUgY2l0eSwgYW5kIHNvIHRob3JvdWdobHkgdW5kZXJzdG9vZCB0aGUgcmVsaWdpb3VzIGNlcmVtb25pYWwgb2YgdGhlIGFuY2llbnQgUm9tYW5zLCB0aGF0IGhpcyBwcmllc3RseSBmdW5jdGlvbiwgd2hpY2ggbWVuIGhhZCB0aG91Z2h0IHRvIGJlIGEga2luZCBvZiBob25vdXIsIHNvdWdodCBtZXJlbHkgb24gYWNjb3VudCBvZiB0aGUgcmVwdXRhdGlvbiB3aGljaCBpdCBnYXZlLCB3YXMgbWFkZSB0byBhcHBlYXIgb25lIG9mIHRoZSBoaWdoZXIgYXJ0cywgYW5kIHRlc3RpZmllZCBpbiBmYXZvdXIgb2YgdGhvc2UgcGhpbG9zb3BoZXJzIHdobyBkZWZpbmUgcmVsaWdpb24gYXMgdGhlIHNjaWVuY2Ugb2YgdGhlIHdvcnNoaXAgb2YgdGhlIGdvZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['3.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBhbGwgdGhlIGR1dGllcyBvZiB0aGlzIG9mZmljZSB3ZXJlIHBlcmZvcm1lZCBieSBoaW0gd2l0aCBza2lsbCBhbmQgY2FyZSwgYW5kIGhlIGxhaWQgYXNpZGUgYWxsIG90aGVyIGNvbmNlcm5zIHdoZW4gaGUgd2FzIGVuZ2FnZWQgaW4gdGhlc2UsIG9taXR0aW5nIG5vdGhpbmcgYW5kIGFkZGluZyBub3RoaW5nIG5ldywgYnV0IGV2ZXIgY29udGVuZGluZyBldmVuIHdpdGggaGlzIGNvbGxlYWd1ZXMgYWJvdXQgdGhlIHNtYWxsIGRldGFpbHMgb2YgY2VyZW1vbnksIGFuZCBleHBsYWluaW5nIHRvIHRoZW0gdGhhdCwgYWx0aG91Z2ggdGhlIERlaXR5IHdhcyBoZWxkIHRvIGJlIGdvb2QtbmF0dXJlZCBhbmQgc2xvdyB0byBjZW5zdXJlIGFjdHMgb2YgbmVnbGlnZW5jZSwgc3RpbGwsIGZvciB0aGUgY2l0eSBhdCBsZWFzdCBpdCB3YXMgYSBncmlldm91cyB0aGluZyB0byBvdmVybG9vayBhbmQgY29uZG9uZSB0aGVtOyBmb3Igbm8gbWFuIGJlZ2lucyBhdCBvbmNlIHdpdGggYSBncmVhdCBkZWVkIG9mIGxhd2xlc3NuZXNzIHRvIGRpc3R1cmIgdGhlIGNpdmlsIHBvbGl0eSwgYnV0IHRob3NlIHdobyByZW1pdCB0aGVpciBzdHJpY3RuZXNzIGluIHNtYWxsIG1hdHRlcnMgYnJlYWsgZG93biBhbHNvIHRoZSBndWFyZCB0aGF0IGhhcyBiZWVuIHNldCBvdmVyIGdyZWF0ZXIgbWF0dGVycy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+RnVydGhlcm1vcmUsIGhlIHNob3dlZCBhIGxpa2Ugc2V2ZXJpdHkgaW4gc2NydXRpbmlzaW5nIGFuZCBwcmVzZXJ2aW5nIGhpcyBjb3VudHJ5J3MgbWlsaXRhcnkgY3VzdG9tcyBhbmQgdHJhZGl0aW9ucyBhbHNvLCBub3QgY291cnRpbmcgcG9wdWxhciBmYXZvdXIgd2hlbiBoZSB3YXMgaW4gY29tbWFuZCwgbm9yIHlldCwgYXMgbW9zdCBtZW4gZGlkIGF0IHRoaXMgdGltZSwgY291cnRpbmcgYSBzZWNvbmQgY29tbWFuZCBkdXJpbmcgaGlzIGZpcnN0IGJ5IGdyYXRpZnlpbmcgaGlzIHNvbGRpZXJzIGFuZCB0cmVhdGluZyB0aGVtIHdpdGggbWlsZG5lc3M7IGJ1dCwgbGlrZSBhIHByaWVzdCBvZiBvdGhlciBkcmVhZCByaXRlcywgaGUgZXhwbGFpbmVkIHRob3JvdWdobHkgYWxsIHRoZSBkZXRhaWxzIG9mIG1pbGl0YXJ5IGN1c3RvbSBhbmQgd2FzIGEgdGVycm9yIHRvIGRpc29iZWRpZW50IHRyYW5zZ3Jlc3NvcnMsIGFuZCBzbyByZXN0b3JlZCBoaXMgY291bnRyeSB0byBoZXIgZm9ybWVyIGdyZWF0bmVzcywgY29uc2lkZXJpbmcgdGhlIGNvbnF1ZXN0IG9mIGhpcyBlbmVtaWVzIGhhcmRseSBtb3JlIHRoYW4gYW4gYWNjZXNzb3J5IHRvIHRoZSB0cmFpbmluZyBvZiBoaXMgZmVsbG93LWNpdGl6ZW5zLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['3.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBoZSBzaG93ZWQgYSBsaWtlIHNldmVyaXR5IGluIHNjcnV0aW5pc2luZyBhbmQgcHJlc2VydmluZyBoaXMgY291bnRyeSdzIG1pbGl0YXJ5IGN1c3RvbXMgYW5kIHRyYWRpdGlvbnMgYWxzbywgbm90IGNvdXJ0aW5nIHBvcHVsYXIgZmF2b3VyIHdoZW4gaGUgd2FzIGluIGNvbW1hbmQsIG5vciB5ZXQsIGFzIG1vc3QgbWVuIGRpZCBhdCB0aGlzIHRpbWUsIGNvdXJ0aW5nIGEgc2Vjb25kIGNvbW1hbmQgZHVyaW5nIGhpcyBmaXJzdCBieSBncmF0aWZ5aW5nIGhpcyBzb2xkaWVycyBhbmQgdHJlYXRpbmcgdGhlbSB3aXRoIG1pbGRuZXNzOyBidXQsIGxpa2UgYSBwcmllc3Qgb2Ygb3RoZXIgZHJlYWQgcml0ZXMsIGhlIGV4cGxhaW5lZCB0aG9yb3VnaGx5IGFsbCB0aGUgZGV0YWlscyBvZiBtaWxpdGFyeSBjdXN0b20gYW5kIHdhcyBhIHRlcnJvciB0byBkaXNvYmVkaWVudCB0cmFuc2dyZXNzb3JzLCBhbmQgc28gcmVzdG9yZWQgaGlzIGNvdW50cnkgdG8gaGVyIGZvcm1lciBncmVhdG5lc3MsIGNvbnNpZGVyaW5nIHRoZSBjb25xdWVzdCBvZiBoaXMgZW5lbWllcyBoYXJkbHkgbW9yZSB0aGFuIGFuIGFjY2Vzc29yeSB0byB0aGUgdHJhaW5pbmcgb2YgaGlzIGZlbGxvdy1jaXRpemVucy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgUm9tYW5zIGhhZCBnb25lIHRvIHdhciB3aXRoIEFudGlvY2h1cyB0aGUgR3JlYXQsIGFuZCB3aGlsZSB0aGVpciBtb3N0IGV4cGVyaWVuY2VkIGNvbW1hbmRlcnMgd2VyZSBlbXBsb3llZCBhZ2FpbnN0IGhpbSwgYW5vdGhlciB3YXIgYXJvc2UgaW4gdGhlIFdlc3QsIGFuZCB0aGVyZSB3ZXJlIGdyZWF0IGNvbW1vdGlvbnMgaW4gU3BhaW4uIEZvciB0aGlzIHdhciBBZW1pbGl1cyB3YXMgc2VudCBvdXQgYXMgcHJhZXRvciwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE5MSBCLkMuPC9ub3RlPiBub3Qgd2l0aCB0aGUgc2l4IGxpY3RvcnMgd2hpY2ggcHJhZXRvcnMgdXN1YWxseSBoYXZlLCBidXQgYWRkaW5nIG90aGVyIHNpeCB0byB0aGF0IG51bWJlciwgc28gdGhhdCBoaXMgb2ZmaWNlIGhhZCBhIGNvbnN1bGFyIGRpZ25pdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIGhlIGRlZmVhdGVkIHRoZSBCYXJiYXJpYW5zIGluIHR3byBwaXRjaGVkIGJhdHRsZXMsIGFuZCBzbGV3IGFib3V0IHRoaXJ0eSB0aG91c2FuZCBvZiB0aGVtOyBhbmQgaXQgd291bGQgc2VlbSB0aGF0IGhpcyBzdWNjZXNzIHdhcyBjb25zcGljdW91c2x5IGR1ZSB0byBoaXMgZ2VuZXJhbHNoaXAsIHNpbmNlIGJ5IGNob29zaW5nIGZhdm91cmFibGUgZ3JvdW5kIGFuZCBieSBjcm9zc2luZyBhIGNlcnRhaW4gcml2ZXIgaGUgbWFkZSB2aWN0b3J5IGVhc3kgZm9yIGhpcyBzb2xkaWVyczsgbW9yZW92ZXIsIGhlIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgdHdvIGh1bmRyZWQgYW5kIGZpZnR5IGNpdGllcywgd2hpY2ggeWllbGRlZCB0byBoaW0gb2YgdGhlaXIgb3duIGFjY29yZC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgbGVmdCB0aGUgcHJvdmluY2UgaW4gcGVhY2UgYW5kIGJvdW5kIGJ5IHBsZWRnZXMgb2YgZmlkZWxpdHksIGFuZCBjYW1lIGJhY2sgdG8gUm9tZSwgbm9yIHdhcyBoZSByaWNoZXIgYnkgYSBzaW5nbGUgZHJhY2htYSBmcm9tIGhpcyBleHBlZGl0aW9uLiBBbmQsIGluZGVlZCwgaW4gYWxsIG90aGVyIHdheXMgaGUgd2FzIGEgcmF0aGVyIGluZGlmZmVyZW50IG1vbmV5LW1ha2VyLCBhbmQgc3BlbnQgZ2VuZXJvdXNseSBhbmQgd2l0aG91dCBzdGludCBvZiBoaXMgc3Vic3RhbmNlLiBCdXQgdGhpcyB3YXMgbm90IGxhcmdlOyBpbmRlZWQsIGFmdGVyIGhpcyBkZWF0aCBpdCBiYXJlbHkgc3VmZmljZWQgdG8gbWVldCB0aGUgZG93cnkgZHVlIHRvIGhpcyB3aWZlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['4.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgUm9tYW5zIGhhZCBnb25lIHRvIHdhciB3aXRoIEFudGlvY2h1cyB0aGUgR3JlYXQsIGFuZCB3aGlsZSB0aGVpciBtb3N0IGV4cGVyaWVuY2VkIGNvbW1hbmRlcnMgd2VyZSBlbXBsb3llZCBhZ2FpbnN0IGhpbSwgYW5vdGhlciB3YXIgYXJvc2UgaW4gdGhlIFdlc3QsIGFuZCB0aGVyZSB3ZXJlIGdyZWF0IGNvbW1vdGlvbnMgaW4gU3BhaW4uIEZvciB0aGlzIHdhciBBZW1pbGl1cyB3YXMgc2VudCBvdXQgYXMgcHJhZXRvciwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTkxIEIuQy48L25vdGU+IG5vdCB3aXRoIHRoZSBzaXggbGljdG9ycyB3aGljaCBwcmFldG9ycyB1c3VhbGx5IGhhdmUsIGJ1dCBhZGRpbmcgb3RoZXIgc2l4IHRvIHRoYXQgbnVtYmVyLCBzbyB0aGF0IGhpcyBvZmZpY2UgaGFkIGEgY29uc3VsYXIgZGlnbml0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIGhlIGRlZmVhdGVkIHRoZSBCYXJiYXJpYW5zIGluIHR3byBwaXRjaGVkIGJhdHRsZXMsIGFuZCBzbGV3IGFib3V0IHRoaXJ0eSB0aG91c2FuZCBvZiB0aGVtOyBhbmQgaXQgd291bGQgc2VlbSB0aGF0IGhpcyBzdWNjZXNzIHdhcyBjb25zcGljdW91c2x5IGR1ZSB0byBoaXMgZ2VuZXJhbHNoaXAsIHNpbmNlIGJ5IGNob29zaW5nIGZhdm91cmFibGUgZ3JvdW5kIGFuZCBieSBjcm9zc2luZyBhIGNlcnRhaW4gcml2ZXIgaGUgbWFkZSB2aWN0b3J5IGVhc3kgZm9yIGhpcyBzb2xkaWVyczsgbW9yZW92ZXIsIGhlIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgdHdvIGh1bmRyZWQgYW5kIGZpZnR5IGNpdGllcywgd2hpY2ggeWllbGRlZCB0byBoaW0gb2YgdGhlaXIgb3duIGFjY29yZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['4.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGxlZnQgdGhlIHByb3ZpbmNlIGluIHBlYWNlIGFuZCBib3VuZCBieSBwbGVkZ2VzIG9mIGZpZGVsaXR5LCBhbmQgY2FtZSBiYWNrIHRvIFJvbWUsIG5vciB3YXMgaGUgcmljaGVyIGJ5IGEgc2luZ2xlIGRyYWNobWEgZnJvbSBoaXMgZXhwZWRpdGlvbi4gQW5kLCBpbmRlZWQsIGluIGFsbCBvdGhlciB3YXlzIGhlIHdhcyBhIHJhdGhlciBpbmRpZmZlcmVudCBtb25leS1tYWtlciwgYW5kIHNwZW50IGdlbmVyb3VzbHkgYW5kIHdpdGhvdXQgc3RpbnQgb2YgaGlzIHN1YnN0YW5jZS4gQnV0IHRoaXMgd2FzIG5vdCBsYXJnZTsgaW5kZWVkLCBhZnRlciBoaXMgZGVhdGggaXQgYmFyZWx5IHN1ZmZpY2VkIHRvIG1lZXQgdGhlIGRvd3J5IGR1ZSB0byBoaXMgd2lmZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBtYXJyaWVkIFBhcGlyaWEsIGEgZGF1Z2h0ZXIgb2YgTWFzbywgd2hvIHdhcyBhIG1hbiBvZiBjb25zdWxhciBkaWduaXR5LCBhbmQgYWZ0ZXIgaGUgaGFkIGxpdmVkIHdpdGggaGVyIGEgbG9uZyB0aW1lIGhlIGRpdm9yY2VkIGhlciwgYWx0aG91Z2ggc2hlIGhhZCBtYWRlIGhpbSBmYXRoZXIgb2YgbW9zdCBnbG9yaW91cyBzb25zOyBmb3Igc2hlIGl0IHdhcyB3aG8gYm9yZSBoaW0gdGhhdCBtb3N0IGlsbHVzdHJpb3VzIFNjaXBpbywgYW5kIEZhYml1cyBNYXhpbXVzLiBObyBkb2N1bWVudGFyeSBncm91bmRzIGZvciB0aGUgZGl2b3JjZSBoYXZlIGNvbWUgZG93biB0byB1cywgYnV0IHRoZXJlIHdvdWxkIHNlZW0gdG8gYmUgc29tZSB0cnV0aCBpbiBhIHN0b3J5IHRvbGQgYWJvdXQgZGl2b3JjZSwgd2hpY2ggcnVucyBhcyBmb2xsb3dzLiBBIFJvbWFuIG9uY2UgZGl2b3JjZWQgaGlzIHdpZmUsIGFuZCB3aGVuIGhpcyBmcmllbmRzIGFkbW9uaXNoZWQgaGltLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXMgc2hlIG5vdCBkaXNjcmVldD8gCgkJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmlzIHNoZSBub3QgYmVhdXRpZnVsPyBpcyBzaGUgbm90IGZydWl0ZnVsPzwvcT4gaGUgaGVsZCBvdXQgaGlzIHNob2UgKHRoZSBSb21hbnMgY2FsbCBpdCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPgogICAgICAgICAgICAgICA8Zm9yZWlnbiBsYW5nPSJsYSI+Y2FsY2V1czwvZm9yZWlnbj4KICAgICAgICAgICAgPC9xPiksIHNheWluZzogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JcyB0aGlzIG5vdCBoYW5kc29tZT8gaXMgaXQgbm90IG5ldz8gYnV0IG5vIG9uZSBvZiB5b3UgY2FuIHRlbGwgbWUgd2hlcmUgaXQgcGluY2hlcyBteSBmb290PzwvcT4gRm9yLCBhcyBhIG1hdHRlciBvZiBmYWN0LCBpdCBpcyBncmVhdCBhbmQgbm90b3Jpb3VzIGZhdWx0cyB0aGF0IHNlcGFyYXRlIG1hbnkgd2l2ZXMgZnJvbSB0aGVpciBodXNiYW5kczsgYnV0IHRoZSBzbGlnaHQgYW5kIGZyZXF1ZW50IGZyaWN0aW9ucyBhcmlzaW5nIGZyb20gc29tZSB1bnBsZWFzYW50bmVzcyBvciBpbmNvbmdydWl0eSBvZiBjaGFyYWN0ZXJzLCB1bm5vdGljZWQgYXMgdGhleSBtYXkgYmUgYnkgZXZlcnlib2R5IGVsc2UsIGFsc28gcHJvZHVjZSBpbmN1cmFibGUgYWxpZW5hdGlvbnMgaW4gdGhvc2Ugd2hvc2UgbGl2ZXMgYXJlIGxpbmtlZCB0b2dldGhlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5IZSBtYXJyaWVkIFBhcGlyaWEsIGEgZGF1Z2h0ZXIgb2YgTWFzbywgd2hvIHdhcyBhIG1hbiBvZiBjb25zdWxhciBkaWduaXR5LCBhbmQgYWZ0ZXIgaGUgaGFkIGxpdmVkIHdpdGggaGVyIGEgbG9uZyB0aW1lIGhlIGRpdm9yY2VkIGhlciwgYWx0aG91Z2ggc2hlIGhhZCBtYWRlIGhpbSBmYXRoZXIgb2YgbW9zdCBnbG9yaW91cyBzb25zOyBmb3Igc2hlIGl0IHdhcyB3aG8gYm9yZSBoaW0gdGhhdCBtb3N0IGlsbHVzdHJpb3VzIFNjaXBpbywgYW5kIEZhYml1cyBNYXhpbXVzLiBObyBkb2N1bWVudGFyeSBncm91bmRzIGZvciB0aGUgZGl2b3JjZSBoYXZlIGNvbWUgZG93biB0byB1cywgYnV0IHRoZXJlIHdvdWxkIHNlZW0gdG8gYmUgc29tZSB0cnV0aCBpbiBhIHN0b3J5IHRvbGQgYWJvdXQgZGl2b3JjZSwgd2hpY2ggcnVucyBhcyBmb2xsb3dzLiBBIFJvbWFuIG9uY2UgZGl2b3JjZWQgaGlzIHdpZmUsIGFuZCB3aGVuIGhpcyBmcmllbmRzIGFkbW9uaXNoZWQgaGltLCBzYXlpbmc6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JcyBzaGUgbm90IGRpc2NyZWV0PyAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5pcyBzaGUgbm90IGJlYXV0aWZ1bD8gaXMgc2hlIG5vdCBmcnVpdGZ1bD88L3E+IGhlIGhlbGQgb3V0IGhpcyBzaG9lICh0aGUgUm9tYW5zIGNhbGwgaXQgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmlzIHNoZSBub3QgYmVhdXRpZnVsPyBpcyBzaGUgbm90IGZydWl0ZnVsPzxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+CiAgICAgICAgICAgICAgIDxmb3JlaWduIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbGFuZz0ibGEiPmNhbGNldXM8L2ZvcmVpZ24+CiAgICAgICAgICAgIDwvcT4pLCBzYXlpbmc6IAoJCQkJPGZvcmVpZ24gY2xhc3M9InRyYW5zbGF0aW9uIiBsYW5nPSJsYSI+Y2FsY2V1czwvZm9yZWlnbj4KICAgICAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JcyB0aGlzIG5vdCBoYW5kc29tZT8gaXMgaXQgbm90IG5ldz8gYnV0IG5vIG9uZSBvZiB5b3UgY2FuIHRlbGwgbWUgd2hlcmUgaXQgcGluY2hlcyBteSBmb290PzwvcT4gRm9yLCBhcyBhIG1hdHRlciBvZiBmYWN0LCBpdCBpcyBncmVhdCBhbmQgbm90b3Jpb3VzIGZhdWx0cyB0aGF0IHNlcGFyYXRlIG1hbnkgd2l2ZXMgZnJvbSB0aGVpciBodXNiYW5kczsgYnV0IHRoZSBzbGlnaHQgYW5kIGZyZXF1ZW50IGZyaWN0aW9ucyBhcmlzaW5nIGZyb20gc29tZSB1bnBsZWFzYW50bmVzcyBvciBpbmNvbmdydWl0eSBvZiBjaGFyYWN0ZXJzLCB1bm5vdGljZWQgYXMgdGhleSBtYXkgYmUgYnkgZXZlcnlib2R5IGVsc2UsIGFsc28gcHJvZHVjZSBpbmN1cmFibGUgYWxpZW5hdGlvbnMgaW4gdGhvc2Ugd2hvc2UgbGl2ZXMgYXJlIGxpbmtlZCB0b2dldGhlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+U28gdGhlbiBBZW1pbGl1cywgaGF2aW5nIGRpdm9yY2VkIFBhcGlyaWEsIHRvb2sgYW5vdGhlciB3aWZlOyBhbmQgd2hlbiBzaGUgaGFkIGJvcm5lIGhpbSB0d28gc29ucyBoZSBrZXB0IHRoZXNlIGF0IGhvbWUsIGJ1dCB0aGUgc29ucyBvZiBoaXMgZm9ybWVyIHdpZmUgaGUgaW50cm9kdWNlZCBpbnRvIHRoZSBncmVhdGVzdCBob3VzZXMgYW5kIHRoZSBtb3N0IGlsbHVzdHJpb3VzIGZhbWlsaWVzLCB0aGUgZWxkZXIgaW50byB0aGF0IG9mIEZhYml1cyBNYXhpbXVzLCB3aG8gd2FzIGZpdmUgdGltZXMgY29uc3VsLCB3aGlsZSB0aGUgeW91bmdlciB3YXMgYWRvcHRlZCBieSB0aGUgc29uIG9mIFNjaXBpbyBBZnJpY2FudXMsIGhpcyBjb3VzaW4tZ2VybWFuLCB3aG8gZ2F2ZSBoaW0gdGhlIG5hbWUgb2YgU2NpcGlvLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PZiB0aGUgZGF1Z2h0ZXJzIG9mIEFlbWlsaXVzLCBvbmUgYmVjYW1lIHRoZSB3aWZlIG9mIHRoZSBzb24gb2YgQ2F0bywgYW5kIHRoZSBvdGhlciBvZiBBZWxpdXMgVHViZXJvLCBhIG1hbiBvZiB0aGUgZ3JlYXRlc3QgZXhjZWxsZW5jZSwgYW5kIG9uZSB3aG8sIG1vcmUgdGhhbiBhbnkgb3RoZXIgUm9tYW4sIGNvbWJpbmVkIHRoZSBncmVhdGVzdCBkaWduaXR5IHdpdGggcG92ZXJ0eS4gRm9yIHRoZXJlIHdlcmUgc2l4dGVlbiBtZW1iZXJzIG9mIHRoZSBmYW1pbHksIGFsbCBBZWxpaTsgYW5kIHRoZXkgaGFkIGEgdmVyeSBsaXR0bGUgaG91c2UsIGFuZCBvbmUgbGl0dGxlIGZhcm0gc3VmZmljZWQgZm9yIGFsbCwgd2hlcmUgdGhleSBtYWludGFpbmVkIG9uZSBob21lIHRvZ2V0aGVyIHdpdGggbWFueSB3aXZlcyBhbmQgY2hpbGRyZW4uIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZXNlIHdpdmVzIGxpdmVkIGFsc28gdGhlIGRhdWdodGVyIG9mIHRoYXQgQWVtaWxpdXMgd2hvIGhhZCB0d2ljZSBiZWVuIGNvbnN1bCBhbmQgdHdpY2UgaGFkIGNlbGVicmF0ZWQgYSB0cml1bXBoLCBhbmQgc2hlIHdhcyBub3QgYXNoYW1lZCBvZiBoZXIgaHVzYmFuZCdzIHBvdmVydHksIGJ1dCBhZG1pcmVkIHRoZSB2aXJ0dWUgdGhhdCBrZXB0IGhpbSBwb29yLiBCcmV0aHJlbiBhbmQga2luc21lbiBvZiB0aGUgcHJlc2VudCBkYXksIGhvd2V2ZXIsIHVubGVzcyB6b25lcyBhbmQgcml2ZXJzIGFuZCB3YWxscyBkaXZpZGUgdGhlaXIgaW5oZXJpdGFuY2VzIGFuZCB3aWRlIHRyYWN0cyBvZiBsYW5kIHNlcGFyYXRlIHRoZW0gZnJvbSBvbmUgYW5vdGhlciwgYXJlIGNvbnRpbnVhbGx5IHF1YXJyZWxsaW5nLiBUaGVzZSwgdGhlbiwgYXJlIGNvbnNpZGVyYXRpb25zIGFuZCBleGFtcGxlcyB3aGljaCBoaXN0b3J5IHByZXNlbnRzIHRvIHRob3NlIHdobyBhcmUgd2lsbGluZyB0byBwcm9maXQgYnkgdGhlbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['5.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gQWVtaWxpdXMsIGhhdmluZyBkaXZvcmNlZCBQYXBpcmlhLCB0b29rIGFub3RoZXIgd2lmZTsgYW5kIHdoZW4gc2hlIGhhZCBib3JuZSBoaW0gdHdvIHNvbnMgaGUga2VwdCB0aGVzZSBhdCBob21lLCBidXQgdGhlIHNvbnMgb2YgaGlzIGZvcm1lciB3aWZlIGhlIGludHJvZHVjZWQgaW50byB0aGUgZ3JlYXRlc3QgaG91c2VzIGFuZCB0aGUgbW9zdCBpbGx1c3RyaW91cyBmYW1pbGllcywgdGhlIGVsZGVyIGludG8gdGhhdCBvZiBGYWJpdXMgTWF4aW11cywgd2hvIHdhcyBmaXZlIHRpbWVzIGNvbnN1bCwgd2hpbGUgdGhlIHlvdW5nZXIgd2FzIGFkb3B0ZWQgYnkgdGhlIHNvbiBvZiBTY2lwaW8gQWZyaWNhbnVzLCBoaXMgY291c2luLWdlcm1hbiwgd2hvIGdhdmUgaGltIHRoZSBuYW1lIG9mIFNjaXBpby4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9mIHRoZSBkYXVnaHRlcnMgb2YgQWVtaWxpdXMsIG9uZSBiZWNhbWUgdGhlIHdpZmUgb2YgdGhlIHNvbiBvZiBDYXRvLCBhbmQgdGhlIG90aGVyIG9mIEFlbGl1cyBUdWJlcm8sIGEgbWFuIG9mIHRoZSBncmVhdGVzdCBleGNlbGxlbmNlLCBhbmQgb25lIHdobywgbW9yZSB0aGFuIGFueSBvdGhlciBSb21hbiwgY29tYmluZWQgdGhlIGdyZWF0ZXN0IGRpZ25pdHkgd2l0aCBwb3ZlcnR5LiBGb3IgdGhlcmUgd2VyZSBzaXh0ZWVuIG1lbWJlcnMgb2YgdGhlIGZhbWlseSwgYWxsIEFlbGlpOyBhbmQgdGhleSBoYWQgYSB2ZXJ5IGxpdHRsZSBob3VzZSwgYW5kIG9uZSBsaXR0bGUgZmFybSBzdWZmaWNlZCBmb3IgYWxsLCB3aGVyZSB0aGV5IG1haW50YWluZWQgb25lIGhvbWUgdG9nZXRoZXIgd2l0aCBtYW55IHdpdmVzIGFuZCBjaGlsZHJlbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['5.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRoZXNlIHdpdmVzIGxpdmVkIGFsc28gdGhlIGRhdWdodGVyIG9mIHRoYXQgQWVtaWxpdXMgd2hvIGhhZCB0d2ljZSBiZWVuIGNvbnN1bCBhbmQgdHdpY2UgaGFkIGNlbGVicmF0ZWQgYSB0cml1bXBoLCBhbmQgc2hlIHdhcyBub3QgYXNoYW1lZCBvZiBoZXIgaHVzYmFuZCdzIHBvdmVydHksIGJ1dCBhZG1pcmVkIHRoZSB2aXJ0dWUgdGhhdCBrZXB0IGhpbSBwb29yLiBCcmV0aHJlbiBhbmQga2luc21lbiBvZiB0aGUgcHJlc2VudCBkYXksIGhvd2V2ZXIsIHVubGVzcyB6b25lcyBhbmQgcml2ZXJzIGFuZCB3YWxscyBkaXZpZGUgdGhlaXIgaW5oZXJpdGFuY2VzIGFuZCB3aWRlIHRyYWN0cyBvZiBsYW5kIHNlcGFyYXRlIHRoZW0gZnJvbSBvbmUgYW5vdGhlciwgYXJlIGNvbnRpbnVhbGx5IHF1YXJyZWxsaW5nLiBUaGVzZSwgdGhlbiwgYXJlIGNvbnNpZGVyYXRpb25zIGFuZCBleGFtcGxlcyB3aGljaCBoaXN0b3J5IHByZXNlbnRzIHRvIHRob3NlIHdobyBhcmUgd2lsbGluZyB0byBwcm9maXQgYnkgdGhlbS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZW1pbGl1cywgdGhlbiwgaGF2aW5nIGJlZW4gYXBwb2ludGVkIGNvbnN1bCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE4MiBCLkMuPC9ub3RlPiBtYWRlIGFuIGV4cGVkaXRpb24gYWdhaW5zdCB0aGUgTGlndXJpYW5zIGFsb25nIHRoZSBBbHBzLCB3aG9tIHNvbWUgY2FsbCBhbHNvIExpZ3VzdGluZXMsIGEgd2FybGlrZSBhbmQgc3Bpcml0ZWQgZm9saywgYW5kIG9uZSB3aG9zZSBwcm94aW1pdHkgdG8gdGhlIFJvbWFucyB3YXMgdGVhY2hpbmcgaXQgc2tpbGwgaW4gd2FyLiBGb3IgdGhleSBvY2N1cHkgdGhlIGV4dHJlbWl0aWVzIG9mIEl0YWx5IHRoYXQgYXJlIGJvdW5kZWQgYnkgdGhlIEFscHMsIGFuZCB0aG9zZSBwYXJ0cyBvZiB0aGUgQWxwcyB0aGVtc2VsdmVzIHRoYXQgYXJlIHdhc2hlZCBieSB0aGUgVHVzY2FuIHNlYSBhbmQgZmFjZSBBZnJpY2EsIGFuZCB0aGV5IGFyZSBtaW5nbGVkIHdpdGggR2F1bHMgYW5kIHRoZSBJYmVyaWFucyBvZiB0aGUgY29hc3QuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSB0aGV5IGhhZCBhbHNvIGxhaWQgaG9sZCBvZiB0aGUgc2VhIHdpdGggcGlyYXRpY2FsIGNyYWZ0LCBhbmQgd2VyZSByb2JiaW5nIGFuZCBkZXN0cm95aW5nIG1lcmNoYW5kaXNlLCBzYWlsaW5nIG91dCBhcyBmYXIgYXMgdGhlIHBpbGxhcnMgb2YgSGVyY3VsZXMuIEFjY29yZGluZ2x5LCB3aGVuIEFlbWlsaXVzIGNhbWUgYWdhaW5zdCB0aGVtLCB0aGV5IHdpdGhzdG9vZCBoaW0gd2l0aCBhIGZvcmNlIG9mIGZvcnR5IHRob3VzYW5kIG1lbjsgYnV0IGhlLCB3aXRoIGVpZ2h0IHRob3VzYW5kIG1lbiBhbGwgdG9sZCwgZW5nYWdlZCB0aGVpciBmaXZlZm9sZCBudW1iZXJzLCBhbmQgYWZ0ZXIgcm91dGluZyB0aGVtIGFuZCBzaHV0dGluZyB0aGVtIHVwIGluIHRoZWlyIHdhbGxlZCB0b3ducywgZ2F2ZSB0aGVtIGh1bWFuZSBhbmQgY29uY2lsaWF0b3J5IHRlcm1zOyBmb3IgaXQgd2FzIG5vdCB0aGUgd2lzaCBvZiB0aGUgUm9tYW5zIHRvIGV4dGlycGF0ZSBhbHRvZ2V0aGVyIHRoZSBMaWd1cmlhbiBuYXRpb24sIHNpbmNlIGl0IGxheSBsaWtlIGEgYmFycmllciBvciBidWx3YXJrIGFnYWluc3QgdGhlIG1vdmVtZW50cyBvZiB0aGUgR2F1bHMsIHdobyB3ZXJlIGFsd2F5cyB0aHJlYXRlbmluZyB0byBkZXNjZW5kIHVwb24gSXRhbHkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBwdXR0aW5nIGZhaXRoIGluIEFlbWlsaXVzLCB0aGV5IGRlbGl2ZXJlZCB0aGVpciBzaGlwcyBhbmQgY2l0aWVzIGludG8gaGlzIGhhbmRzLiBUaGVpciBjaXRpZXMgaGUgcmVzdG9yZWQgdG8gdGhlbSwgZWl0aGVyIGRvaW5nIHRoZW0gbm8gaGFybSBhdCBhbGwsIG9yIHNpbXBseSByYXppbmcgdGhlaXIgd2FsbHMgOyBidXQgaGUgdG9vayBhd2F5IGFsbCB0aGVpciBzaGlwcywgYW5kIGxlZnQgdGhlbSBubyBib2F0IHRoYXQgY2FycmllZCBtb3JlIHRoYW4gdGhyZWUgb2FyczsgaGUgYWxzbyByZXN0b3JlZCB0byBzYWZldHkgdGhvc2Ugd2hvbSB0aGV5IGhhZCB0YWtlbiBjYXB0aXZlIGJ5IGxhbmQgb3Igc2VhLCBhbmQgdGhlc2Ugd2VyZSBmb3VuZCB0byBiZSBtYW55LCBib3RoIFJvbWFucyBhbmQgZm9yZWlnbmVycy4gU3VjaCwgdGhlbiwgd2VyZSB0aGUgY29uc3BpY3VvdXMgYWNoaWV2ZW1lbnRzIG9mIHRoaXMgZmlyc3QgY29uc3Vsc2hpcC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['6.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZW1pbGl1cywgdGhlbiwgaGF2aW5nIGJlZW4gYXBwb2ludGVkIGNvbnN1bCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTgyIEIuQy48L25vdGU+IG1hZGUgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBMaWd1cmlhbnMgYWxvbmcgdGhlIEFscHMsIHdob20gc29tZSBjYWxsIGFsc28gTGlndXN0aW5lcywgYSB3YXJsaWtlIGFuZCBzcGlyaXRlZCBmb2xrLCBhbmQgb25lIHdob3NlIHByb3hpbWl0eSB0byB0aGUgUm9tYW5zIHdhcyB0ZWFjaGluZyBpdCBza2lsbCBpbiB3YXIuIEZvciB0aGV5IG9jY3VweSB0aGUgZXh0cmVtaXRpZXMgb2YgSXRhbHkgdGhhdCBhcmUgYm91bmRlZCBieSB0aGUgQWxwcywgYW5kIHRob3NlIHBhcnRzIG9mIHRoZSBBbHBzIHRoZW1zZWx2ZXMgdGhhdCBhcmUgd2FzaGVkIGJ5IHRoZSBUdXNjYW4gc2VhIGFuZCBmYWNlIEFmcmljYSwgYW5kIHRoZXkgYXJlIG1pbmdsZWQgd2l0aCBHYXVscyBhbmQgdGhlIEliZXJpYW5zIG9mIHRoZSBjb2FzdC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['6.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IHRoYXQgdGltZSB0aGV5IGhhZCBhbHNvIGxhaWQgaG9sZCBvZiB0aGUgc2VhIHdpdGggcGlyYXRpY2FsIGNyYWZ0LCBhbmQgd2VyZSByb2JiaW5nIGFuZCBkZXN0cm95aW5nIG1lcmNoYW5kaXNlLCBzYWlsaW5nIG91dCBhcyBmYXIgYXMgdGhlIHBpbGxhcnMgb2YgSGVyY3VsZXMuIEFjY29yZGluZ2x5LCB3aGVuIEFlbWlsaXVzIGNhbWUgYWdhaW5zdCB0aGVtLCB0aGV5IHdpdGhzdG9vZCBoaW0gd2l0aCBhIGZvcmNlIG9mIGZvcnR5IHRob3VzYW5kIG1lbjsgYnV0IGhlLCB3aXRoIGVpZ2h0IHRob3VzYW5kIG1lbiBhbGwgdG9sZCwgZW5nYWdlZCB0aGVpciBmaXZlZm9sZCBudW1iZXJzLCBhbmQgYWZ0ZXIgcm91dGluZyB0aGVtIGFuZCBzaHV0dGluZyB0aGVtIHVwIGluIHRoZWlyIHdhbGxlZCB0b3ducywgZ2F2ZSB0aGVtIGh1bWFuZSBhbmQgY29uY2lsaWF0b3J5IHRlcm1zOyBmb3IgaXQgd2FzIG5vdCB0aGUgd2lzaCBvZiB0aGUgUm9tYW5zIHRvIGV4dGlycGF0ZSBhbHRvZ2V0aGVyIHRoZSBMaWd1cmlhbiBuYXRpb24sIHNpbmNlIGl0IGxheSBsaWtlIGEgYmFycmllciBvciBidWx3YXJrIGFnYWluc3QgdGhlIG1vdmVtZW50cyBvZiB0aGUgR2F1bHMsIHdobyB3ZXJlIGFsd2F5cyB0aHJlYXRlbmluZyB0byBkZXNjZW5kIHVwb24gSXRhbHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['6.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBwdXR0aW5nIGZhaXRoIGluIEFlbWlsaXVzLCB0aGV5IGRlbGl2ZXJlZCB0aGVpciBzaGlwcyBhbmQgY2l0aWVzIGludG8gaGlzIGhhbmRzLiBUaGVpciBjaXRpZXMgaGUgcmVzdG9yZWQgdG8gdGhlbSwgZWl0aGVyIGRvaW5nIHRoZW0gbm8gaGFybSBhdCBhbGwsIG9yIHNpbXBseSByYXppbmcgdGhlaXIgd2FsbHMgOyBidXQgaGUgdG9vayBhd2F5IGFsbCB0aGVpciBzaGlwcywgYW5kIGxlZnQgdGhlbSBubyBib2F0IHRoYXQgY2FycmllZCBtb3JlIHRoYW4gdGhyZWUgb2FyczsgaGUgYWxzbyByZXN0b3JlZCB0byBzYWZldHkgdGhvc2Ugd2hvbSB0aGV5IGhhZCB0YWtlbiBjYXB0aXZlIGJ5IGxhbmQgb3Igc2VhLCBhbmQgdGhlc2Ugd2VyZSBmb3VuZCB0byBiZSBtYW55LCBib3RoIFJvbWFucyBhbmQgZm9yZWlnbmVycy4gU3VjaCwgdGhlbiwgd2VyZSB0aGUgY29uc3BpY3VvdXMgYWNoaWV2ZW1lbnRzIG9mIHRoaXMgZmlyc3QgY29uc3Vsc2hpcC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+IEFmdGVyd2FyZHMgaGUgb2Z0ZW4gbWFkZSBpdCBjbGVhciB0aGF0IGhlIHdhcyBkZXNpcm91cyBvZiBhIHNlY29uZCBjb25zdWxzaGlwLCBhbmQgb25jZSBhY3R1YWxseSBhbm5vdW5jZWQgaGlzIGNhbmRpZGFjeSwgYnV0IHdoZW4gaGUgd2FzIHBhc3NlZCBieSBhbmQgbm90IGVsZWN0ZWQsIGhlIG1hZGUgbm8gZnVydGhlciBlZmZvcnRzIHRvIG9idGFpbiB0aGUgb2ZmaWNlLCBnaXZpbmcgaGlzIGF0dGVudGlvbiB0byBoaXMgZHV0aWVzIGFzIGF1Z3VyLCBhbmQgdHJhaW5pbmcgaGlzIHNvbnMsIG5vdCBvbmx5IGluIHRoZSBuYXRpdmUgYW5kIGFuY2VzdHJhbCBkaXNjaXBsaW5lIGluIHdoaWNoIGhlIGhpbXNlbGYgaGFkIGJlZW4gdHJhaW5lZCwgYnV0IGFsc28sIGFuZCB3aXRoIGdyZWF0ZXIgYXJkb3VyLCBpbiB0aGF0IG9mIHRoZSBHcmVla3MuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3Qgb25seSB0aGUgZ3JhbW1hcmlhbnMgYW5kIHBoaWxvc29waGVycyBhbmQgcmhldG9yaWNpYW5zLCBidXQgYWxzbyB0aGUgbW9kZWxsZXJzIGFuZCBwYWludGVycywgdGhlIG92ZXJzZWVycyBvZiBob3JzZXMgYW5kIGRvZ3MsIGFuZCB0aGUgdGVhY2hlcnMgb2YgdGhlIGFydCBvZiBodW50aW5nLCBieSB3aG9tIHRoZSB5b3VuZyBtZW4gd2VyZSBzdXJyb3VuZGVkLCB3ZXJlIEdyZWVrcy4gQW5kIHRoZSBmYXRoZXIsIHVubGVzcyBzb21lIHB1YmxpYyBidXNpbmVzcyBwcmV2ZW50ZWQsIHdvdWxkIGFsd2F5cyBiZSBwcmVzZW50IGF0IHRoZWlyIHN0dWRpZXMgYW5kIGV4ZXJjaXNlcywgZm9yIGhlIHdhcyBub3cgYmVjb21lIHRoZSBmb25kZXN0IHBhcmVudCBpbiBSb21lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['6.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPiBBZnRlcndhcmRzIGhlIG9mdGVuIG1hZGUgaXQgY2xlYXIgdGhhdCBoZSB3YXMgZGVzaXJvdXMgb2YgYSBzZWNvbmQgY29uc3Vsc2hpcCwgYW5kIG9uY2UgYWN0dWFsbHkgYW5ub3VuY2VkIGhpcyBjYW5kaWRhY3ksIGJ1dCB3aGVuIGhlIHdhcyBwYXNzZWQgYnkgYW5kIG5vdCBlbGVjdGVkLCBoZSBtYWRlIG5vIGZ1cnRoZXIgZWZmb3J0cyB0byBvYnRhaW4gdGhlIG9mZmljZSwgZ2l2aW5nIGhpcyBhdHRlbnRpb24gdG8gaGlzIGR1dGllcyBhcyBhdWd1ciwgYW5kIHRyYWluaW5nIGhpcyBzb25zLCBub3Qgb25seSBpbiB0aGUgbmF0aXZlIGFuZCBhbmNlc3RyYWwgZGlzY2lwbGluZSBpbiB3aGljaCBoZSBoaW1zZWxmIGhhZCBiZWVuIHRyYWluZWQsIGJ1dCBhbHNvLCBhbmQgd2l0aCBncmVhdGVyIGFyZG91ciwgaW4gdGhhdCBvZiB0aGUgR3JlZWtzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['6.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciBub3Qgb25seSB0aGUgZ3JhbW1hcmlhbnMgYW5kIHBoaWxvc29waGVycyBhbmQgcmhldG9yaWNpYW5zLCBidXQgYWxzbyB0aGUgbW9kZWxsZXJzIGFuZCBwYWludGVycywgdGhlIG92ZXJzZWVycyBvZiBob3JzZXMgYW5kIGRvZ3MsIGFuZCB0aGUgdGVhY2hlcnMgb2YgdGhlIGFydCBvZiBodW50aW5nLCBieSB3aG9tIHRoZSB5b3VuZyBtZW4gd2VyZSBzdXJyb3VuZGVkLCB3ZXJlIEdyZWVrcy4gQW5kIHRoZSBmYXRoZXIsIHVubGVzcyBzb21lIHB1YmxpYyBidXNpbmVzcyBwcmV2ZW50ZWQsIHdvdWxkIGFsd2F5cyBiZSBwcmVzZW50IGF0IHRoZWlyIHN0dWRpZXMgYW5kIGV4ZXJjaXNlcywgZm9yIGhlIHdhcyBub3cgYmVjb21lIHRoZSBmb25kZXN0IHBhcmVudCBpbiBSb21lLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFzIHRvIHB1YmxpYyBhZmZhaXJzLCB0aGF0IHdhcyB0aGUgcGVyaW9kIHdoZW4gdGhlIFJvbWFucyB3ZXJlIGF0IHdhciB3aXRoIFBlcnNldXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xNzEtMTY4IEIuQy48L25vdGU+IHRoZSBraW5nIG9mIE1hY2Vkb25pYSwgYW5kIHdlcmUgdGFraW5nIHRoZWlyIGdlbmVyYWxzIHRvIHRhc2sgYmVjYXVzZSB0aGVpciBpbmV4cGVyaWVuY2UgYW5kIGNvd2FyZGljZSBsZWQgdGhlbSB0byBjb25kdWN0IHRoZWlyIGNhbXBhaWducyByaWRpY3Vsb3VzbHkgYW5kIGRpc2dyYWNlZnVsbHksIGFuZCB0byBzdWZmZXIgbW9yZSBoYXJtIHRoYW4gdGhleSBpbmZsaWN0ZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcGVvcGxlIHdoaWNoIGhhZCBqdXN0IGZvcmNlZCBBbnRpb2NodXMsIHN1cm5hbWVkIHRoZSBHcmVhdCwgdG8gcmV0aXJlIGZyb20gdGhlIHJlc3Qgb2YgQXNpYSwgZHJpdmVuIGhpbSBvdmVyIHRoZSBUYXVydXMgbW91bnRhaW5zLCBhbmQgc2h1dCBoaW0gdXAgaW4gU3lyaWEsIHdoZXJlIGhlIGhhZCBiZWVuIGNvbnRlbnQgdG8gYnV5IHRlcm1zIHdpdGggYSBwYXltZW50IG9mIGZpZnRlZW4gdGhvdXNhbmQgdGFsZW50czsgd2hpY2ggaGFkIGEgbGl0dGxlIHdoaWxlIGJlZm9yZSBzZXQgdGhlIEdyZWVrcyBmcmVlIGZyb20gTWFjZWRvbmlhIGJ5IGNydXNoaW5nIFBoaWxpcCBpbiBUaGVzc2FseTsgYW5kIHdoaWNoIGhhZCB1dHRlcmx5IHN1YmR1ZWQgSGFubmliYWwsIHRvIHdob20gbm8ga2luZyB3YXMgY29tcGFyYWJsZSBmb3IgcG93ZXIgb3IgYm9sZG5lc3M7CgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+IHRoaXMgcGVvcGxlIHRob3VnaHQgaXQgdW5lbmR1cmFibGUgdGhhdCB0aGV5IHNob3VsZCBiZSBjb21wZWxsZWQgdG8gY29udGVuZCB3aXRoIFBlcnNldXMgYXMgdGhvdWdoIGhlIHdlcmUgYW4gZXZlbiBtYXRjaCBmb3IgUm9tZSwgd2hlbiBmb3IgYSBsb25nIHRpbWUgYWxyZWFkeSBoZSBoYWQgY2FycmllZCBvbiBoaXMgd2FyIGFnYWluc3QgdGhlbSB3aXRoIHRoZSBwb29yIHJlbWFpbnMgb2YgaGlzIGZhdGhlcidzIHJvdXRlZCBhcm15OyBmb3IgdGhleSB3ZXJlIG5vdCBhd2FyZSB0aGF0IGFmdGVyIGhpcyBkZWZlYXQgUGhpbGlwIGhhZCBtYWRlIHRoZSBNYWNlZG9uaWFuIGFybWllcyBmYXIgbW9yZSB2aWdvcm91cyBhbmQgd2FybGlrZSB0aGFuIGJlZm9yZS4gVGhpcyBzaXR1YXRpb24gSSB3aWxsIGJyaWVmbHkgZXhwbGFpbiBmcm9tIHRoZSBiZWdpbm5pbmcuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['7.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyB0byBwdWJsaWMgYWZmYWlycywgdGhhdCB3YXMgdGhlIHBlcmlvZCB3aGVuIHRoZSBSb21hbnMgd2VyZSBhdCB3YXIgd2l0aCBQZXJzZXVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4xNzEtMTY4IEIuQy48L25vdGU+IHRoZSBraW5nIG9mIE1hY2Vkb25pYSwgYW5kIHdlcmUgdGFraW5nIHRoZWlyIGdlbmVyYWxzIHRvIHRhc2sgYmVjYXVzZSB0aGVpciBpbmV4cGVyaWVuY2UgYW5kIGNvd2FyZGljZSBsZWQgdGhlbSB0byBjb25kdWN0IHRoZWlyIGNhbXBhaWducyByaWRpY3Vsb3VzbHkgYW5kIGRpc2dyYWNlZnVsbHksIGFuZCB0byBzdWZmZXIgbW9yZSBoYXJtIHRoYW4gdGhleSBpbmZsaWN0ZWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['7.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgcGVvcGxlIHdoaWNoIGhhZCBqdXN0IGZvcmNlZCBBbnRpb2NodXMsIHN1cm5hbWVkIHRoZSBHcmVhdCwgdG8gcmV0aXJlIGZyb20gdGhlIHJlc3Qgb2YgQXNpYSwgZHJpdmVuIGhpbSBvdmVyIHRoZSBUYXVydXMgbW91bnRhaW5zLCBhbmQgc2h1dCBoaW0gdXAgaW4gU3lyaWEsIHdoZXJlIGhlIGhhZCBiZWVuIGNvbnRlbnQgdG8gYnV5IHRlcm1zIHdpdGggYSBwYXltZW50IG9mIGZpZnRlZW4gdGhvdXNhbmQgdGFsZW50czsgd2hpY2ggaGFkIGEgbGl0dGxlIHdoaWxlIGJlZm9yZSBzZXQgdGhlIEdyZWVrcyBmcmVlIGZyb20gTWFjZWRvbmlhIGJ5IGNydXNoaW5nIFBoaWxpcCBpbiBUaGVzc2FseTsgYW5kIHdoaWNoIGhhZCB1dHRlcmx5IHN1YmR1ZWQgSGFubmliYWwsIHRvIHdob20gbm8ga2luZyB3YXMgY29tcGFyYWJsZSBmb3IgcG93ZXIgb3IgYm9sZG5lc3M7CgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['7.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPiB0aGlzIHBlb3BsZSB0aG91Z2h0IGl0IHVuZW5kdXJhYmxlIHRoYXQgdGhleSBzaG91bGQgYmUgY29tcGVsbGVkIHRvIGNvbnRlbmQgd2l0aCBQZXJzZXVzIGFzIHRob3VnaCBoZSB3ZXJlIGFuIGV2ZW4gbWF0Y2ggZm9yIFJvbWUsIHdoZW4gZm9yIGEgbG9uZyB0aW1lIGFscmVhZHkgaGUgaGFkIGNhcnJpZWQgb24gaGlzIHdhciBhZ2FpbnN0IHRoZW0gd2l0aCB0aGUgcG9vciByZW1haW5zIG9mIGhpcyBmYXRoZXIncyByb3V0ZWQgYXJteTsgZm9yIHRoZXkgd2VyZSBub3QgYXdhcmUgdGhhdCBhZnRlciBoaXMgZGVmZWF0IFBoaWxpcCBoYWQgbWFkZSB0aGUgTWFjZWRvbmlhbiBhcm1pZXMgZmFyIG1vcmUgdmlnb3JvdXMgYW5kIHdhcmxpa2UgdGhhbiBiZWZvcmUuIFRoaXMgc2l0dWF0aW9uIEkgd2lsbCBicmllZmx5IGV4cGxhaW4gZnJvbSB0aGUgYmVnaW5uaW5nLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFudGlnb251cywgd2hvIHdhcyB0aGUgbW9zdCBwb3dlcmZ1bCBvZiBBbGV4YW5kZXIncyBnZW5lcmFscyBhbmQgc3VjY2Vzc29ycywgYW5kIGFjcXVpcmVkIGZvciBoaW1zZWxmIGFuZCBoaXMgbGluZSB0aGUgdGl0bGUgb2YgS2luZywgaGFkIGEgc29uIERlbWV0cml1cywgYW5kIGhpcyBzb24gd2FzIEFudGlnb251cyBzdXJuYW1lZCBHb25hdGFzLiBIaXMgc29uIGluIHR1cm4gd2FzIERlbWV0cml1cywgd2hvLCBhZnRlciByZWlnbmluZyBoaW1zZWxmIGZvciBhIHNob3J0IHRpbWUsIGRpZWQsIGxlYXZpbmcgYSBzb24gUGhpbGlwIHN0aWxsIGluIGhpcyBib3lob29kLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgbGVhZGluZyBNYWNlZG9uaWFucywgZmVhcmluZyB0aGUgYW5hcmNoeSB3aGljaCBtaWdodCByZXN1bHQsIGNhbGxlZCBpbiBBbnRpZ29udXMsIGEgY291c2luIG9mIHRoZSBkZWFkIGtpbmcsIGFuZCBtYXJyaWVkIGhpbSB0byBQaGlsaXAncyBtb3RoZXIsIGNhbGxpbmcgaGltIGZpcnN0IHJlZ2VudCBhbmQgZ2VuZXJhbCwgYW5kIHRoZW4sIGZpbmRpbmcgaGlzIHJ1bGUgbW9kZXJhdGUgYW5kIGNvbmR1Y2l2ZSB0byB0aGUgZ2VuZXJhbCBnb29kLCBnaXZpbmcgaGltIHRoZSB0aXRsZSBvZiBLaW5nLiBIZSByZWNlaXZlZCB0aGUgc3VybmFtZSBvZiBEb3Nvbiwgd2hpY2ggaW1wbGllZCB0aGF0IGhlIHdhcyBnaXZlbiB0byBwcm9taXNpbmcgYnV0IGRpZCBub3QgcGVyZm9ybSBoaXMgZW5nYWdlbWVudHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpbSBQaGlsaXAgc3VjY2VlZGVkIHRvIHRoZSB0aHJvbmUsIGFuZCwgdGhvdWdoIHN0aWxsIGEgeW91dGgsIGZsb3dlcmVkIG91dCBpbiB0aGUgcXVhbGl0aWVzIHdoaWNoIG1vc3QgZGlzdGluZ3Vpc2gga2luZ3MsIGFuZCBsZWQgbWVuIHRvIGJlbGlldmUgdGhhdCBoZSB3b3VsZCByZXN0b3JlIE1hY2Vkb25pYSB0byBoZXIgYW5jaWVudCBkaWduaXR5LCBhbmQgdGhhdCBoZSwgYW5kIGhlIGFsb25lLCB3b3VsZCBjaGVjayB0aGUgcG93ZXIgb2YgUm9tZSwgd2hpY2ggYWxyZWFkeSBleHRlbmRlZCBvdmVyIGFsbCB0aGUgd29ybGQuIEJ1dCBhZnRlciBoZSB3YXMgZGVmZWF0ZWQgaW4gYSBncmVhdCBiYXR0bGUgYXQgU2NvdHVzc2EgYnkgVGl0dXMgRmxhbWluaW51cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE5NyBCLkMuIFRoZSBiYXR0bGUgaXMgdXN1YWxseSBuYW1lZCBmcm9tIGEgcmFuZ2Ugb2YgaGlsbHMgbmVhciBTY290dXNzYSBjYWxsZWQgQ3lub3NjZXBoYWxhZS4gU2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gRmxhbS4gMy4xIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlPkZsYW1pbmludXM8L3RpdGxlPiwgY2hhcHRlcnMgaWlpLjwvYmlibD4gYW5kIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBGbGFtLiA0LjEiIHZhbGlkPSJ5ZXMiPml2LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBmb3IgYSB0aW1lIGhlIHRvb2sgYSBodW1ibGUgcG9zdHVyZSwgZW50cnVzdGVkIGFsbCBoaXMgaW50ZXJlc3RzIHRvIHRoZSBSb21hbnMsIGFuZCB3YXMgY29udGVudCB0byBjb21lIG9mZiB3aXRoIGEgbW9kZXJhdGUgZmluZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXJ3YXJkcywgaG93ZXZlciwgaGlzIGNvbmRpdGlvbiBvcHByZXNzZWQgaGltLCBhbmQgdGhpbmtpbmcgdGhhdCB0byByZWlnbiBieSBmYXZvdXIgb2YgdGhlIFJvbWFucyB3YXMgbW9yZSB0aGUgcGFydCBvZiBhIGNhcHRpdmUgc2F0aXNmaWVkIHdpdGggbWVhdCBhbmQgZHJpbmsgdGhhbiBvZiBhIG1hbiBwb3NzZXNzZWQgb2YgY291cmFnZSBhbmQgc3Bpcml0LCBoZSB0dXJuZWQgaGlzIHRob3VnaHRzIHRvIHdhciwgYW5kIG1hZGUgaGlzIGFycmFuZ2VtZW50cyBmb3IgaXQgaW4gc2VjcmVjeSBhbmQgd2l0aCBjdW5uaW5nLiBUaHVzLCB0aG9zZSBvZiBoaXMgY2l0aWVzIHdoaWNoIGxheSBvbiB0aGUgaGlnaHJvYWRzIGFuZCB0aGUgc2Vhc2hvcmUgaGUgc3VmZmVyZWQgdG8gYmVjb21lIHdlYWsgYW5kIHJhdGhlciBkZXNvbGF0ZSwgc28gYXMgdG8gYXdha2VuIGNvbnRlbXB0LCB3aGlsZSBpbiB0aGUgaW50ZXJpb3IgaGUgd2FzIGNvbGxlY3RpbmcgYSBsYXJnZSBmb3JjZTsgCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+aGUgYWxzbyBmaWxsZWQgdGhlIGZvcnRyZXNzZXMsIHN0cm9uZ2hvbGRzLCBhbmQgY2l0aWVzIG9mIHRoZSBpbnRlcmlvciB3aXRoIGFuIGFidW5kYW5jZSBvZiBhcm1zLCBtb25leSwgYW5kIG1lbiBmaXQgZm9yIHNlcnZpY2UsIGluIHRoaXMgd2F5IHByZXBhcmluZyBoaW1zZWxmIGZvciB0aGUgd2FyLCBhbmQgeWV0IGtlZXBpbmcgaXQgaGlkZGVuIGF3YXksIGFzIGl0IHdlcmUsIGFuZCBjb25jZWFsZWQuIFRodXMsIGhlIGhhZCBhcm1zIHRvIGVxdWlwIHRoaXJ0eSB0aG91c2FuZCBtZW4gbGFpZCB1cCBpbiByZXNlcnZlLCBlaWdodCBtaWxsaW9uIGJ1c2hlbHMgb2YgZ3JhaW4gaGFkIGJlZW4gaW1tdXJlZCBpbiBoaXMgc3Ryb25naG9sZHMsIGFuZCBhIHN1bSBvZiBtb25leSBzdWZmaWNpZW50IHRvIG1haW50YWluIGZvciB0ZW4geWVhcnMgdGVuIHRob3VzYW5kIG1lcmNlbmFyaWVzIGZpZ2h0aW5nIGluIGRlZmVuY2Ugb2YgdGhlIGNvdW50cnkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['8.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BbnRpZ29udXMsIHdobyB3YXMgdGhlIG1vc3QgcG93ZXJmdWwgb2YgQWxleGFuZGVyJ3MgZ2VuZXJhbHMgYW5kIHN1Y2Nlc3NvcnMsIGFuZCBhY3F1aXJlZCBmb3IgaGltc2VsZiBhbmQgaGlzIGxpbmUgdGhlIHRpdGxlIG9mIEtpbmcsIGhhZCBhIHNvbiBEZW1ldHJpdXMsIGFuZCBoaXMgc29uIHdhcyBBbnRpZ29udXMgc3VybmFtZWQgR29uYXRhcy4gSGlzIHNvbiBpbiB0dXJuIHdhcyBEZW1ldHJpdXMsIHdobywgYWZ0ZXIgcmVpZ25pbmcgaGltc2VsZiBmb3IgYSBzaG9ydCB0aW1lLCBkaWVkLCBsZWF2aW5nIGEgc29uIFBoaWxpcCBzdGlsbCBpbiBoaXMgYm95aG9vZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBsZWFkaW5nIE1hY2Vkb25pYW5zLCBmZWFyaW5nIHRoZSBhbmFyY2h5IHdoaWNoIG1pZ2h0IHJlc3VsdCwgY2FsbGVkIGluIEFudGlnb251cywgYSBjb3VzaW4gb2YgdGhlIGRlYWQga2luZywgYW5kIG1hcnJpZWQgaGltIHRvIFBoaWxpcCdzIG1vdGhlciwgY2FsbGluZyBoaW0gZmlyc3QgcmVnZW50IGFuZCBnZW5lcmFsLCBhbmQgdGhlbiwgZmluZGluZyBoaXMgcnVsZSBtb2RlcmF0ZSBhbmQgY29uZHVjaXZlIHRvIHRoZSBnZW5lcmFsIGdvb2QsIGdpdmluZyBoaW0gdGhlIHRpdGxlIG9mIEtpbmcuIEhlIHJlY2VpdmVkIHRoZSBzdXJuYW1lIG9mIERvc29uLCB3aGljaCBpbXBsaWVkIHRoYXQgaGUgd2FzIGdpdmVuIHRvIHByb21pc2luZyBidXQgZGlkIG5vdCBwZXJmb3JtIGhpcyBlbmdhZ2VtZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['8.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIGhpbSBQaGlsaXAgc3VjY2VlZGVkIHRvIHRoZSB0aHJvbmUsIGFuZCwgdGhvdWdoIHN0aWxsIGEgeW91dGgsIGZsb3dlcmVkIG91dCBpbiB0aGUgcXVhbGl0aWVzIHdoaWNoIG1vc3QgZGlzdGluZ3Vpc2gga2luZ3MsIGFuZCBsZWQgbWVuIHRvIGJlbGlldmUgdGhhdCBoZSB3b3VsZCByZXN0b3JlIE1hY2Vkb25pYSB0byBoZXIgYW5jaWVudCBkaWduaXR5LCBhbmQgdGhhdCBoZSwgYW5kIGhlIGFsb25lLCB3b3VsZCBjaGVjayB0aGUgcG93ZXIgb2YgUm9tZSwgd2hpY2ggYWxyZWFkeSBleHRlbmRlZCBvdmVyIGFsbCB0aGUgd29ybGQuIEJ1dCBhZnRlciBoZSB3YXMgZGVmZWF0ZWQgaW4gYSBncmVhdCBiYXR0bGUgYXQgU2NvdHVzc2EgYnkgVGl0dXMgRmxhbWluaW51cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTk3IEIuQy4gVGhlIGJhdHRsZSBpcyB1c3VhbGx5IG5hbWVkIGZyb20gYSByYW5nZSBvZiBoaWxscyBuZWFyIFNjb3R1c3NhIGNhbGxlZCBDeW5vc2NlcGhhbGFlLiBTZWUgdGhlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZsYW1pbmludXM8L3RpdGxlPiwgY2hhcHRlcnMgaWlpLjwvYmlibD4gYW5kIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDQuMSIgdmFsaWQ9InllcyI+aXYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGZvciBhIHRpbWUgaGUgdG9vayBhIGh1bWJsZSBwb3N0dXJlLCBlbnRydXN0ZWQgYWxsIGhpcyBpbnRlcmVzdHMgdG8gdGhlIFJvbWFucywgYW5kIHdhcyBjb250ZW50IHRvIGNvbWUgb2ZmIHdpdGggYSBtb2RlcmF0ZSBmaW5lLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDMuMSIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZsYW1pbmludXM8L3RpdGxlPiwgY2hhcHRlcnMgaWlpLjwvYmlibD4gYW5kIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkZsYW1pbmludXM8L3RpdGxlPiwgY2hhcHRlcnMgaWlpLjxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEZsYW0uIDQuMSIgdmFsaWQ9InllcyI+aXYuPC9iaWJsPgogICAgICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['8.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyd2FyZHMsIGhvd2V2ZXIsIGhpcyBjb25kaXRpb24gb3BwcmVzc2VkIGhpbSwgYW5kIHRoaW5raW5nIHRoYXQgdG8gcmVpZ24gYnkgZmF2b3VyIG9mIHRoZSBSb21hbnMgd2FzIG1vcmUgdGhlIHBhcnQgb2YgYSBjYXB0aXZlIHNhdGlzZmllZCB3aXRoIG1lYXQgYW5kIGRyaW5rIHRoYW4gb2YgYSBtYW4gcG9zc2Vzc2VkIG9mIGNvdXJhZ2UgYW5kIHNwaXJpdCwgaGUgdHVybmVkIGhpcyB0aG91Z2h0cyB0byB3YXIsIGFuZCBtYWRlIGhpcyBhcnJhbmdlbWVudHMgZm9yIGl0IGluIHNlY3JlY3kgYW5kIHdpdGggY3VubmluZy4gVGh1cywgdGhvc2Ugb2YgaGlzIGNpdGllcyB3aGljaCBsYXkgb24gdGhlIGhpZ2hyb2FkcyBhbmQgdGhlIHNlYXNob3JlIGhlIHN1ZmZlcmVkIHRvIGJlY29tZSB3ZWFrIGFuZCByYXRoZXIgZGVzb2xhdGUsIHNvIGFzIHRvIGF3YWtlbiBjb250ZW1wdCwgd2hpbGUgaW4gdGhlIGludGVyaW9yIGhlIHdhcyBjb2xsZWN0aW5nIGEgbGFyZ2UgZm9yY2U7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['8.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmhlIGFsc28gZmlsbGVkIHRoZSBmb3J0cmVzc2VzLCBzdHJvbmdob2xkcywgYW5kIGNpdGllcyBvZiB0aGUgaW50ZXJpb3Igd2l0aCBhbiBhYnVuZGFuY2Ugb2YgYXJtcywgbW9uZXksIGFuZCBtZW4gZml0IGZvciBzZXJ2aWNlLCBpbiB0aGlzIHdheSBwcmVwYXJpbmcgaGltc2VsZiBmb3IgdGhlIHdhciwgYW5kIHlldCBrZWVwaW5nIGl0IGhpZGRlbiBhd2F5LCBhcyBpdCB3ZXJlLCBhbmQgY29uY2VhbGVkLiBUaHVzLCBoZSBoYWQgYXJtcyB0byBlcXVpcCB0aGlydHkgdGhvdXNhbmQgbWVuIGxhaWQgdXAgaW4gcmVzZXJ2ZSwgZWlnaHQgbWlsbGlvbiBidXNoZWxzIG9mIGdyYWluIGhhZCBiZWVuIGltbXVyZWQgaW4gaGlzIHN0cm9uZ2hvbGRzLCBhbmQgYSBzdW0gb2YgbW9uZXkgc3VmZmljaWVudCB0byBtYWludGFpbiBmb3IgdGVuIHllYXJzIHRlbiB0aG91c2FuZCBtZXJjZW5hcmllcyBmaWdodGluZyBpbiBkZWZlbmNlIG9mIHRoZSBjb3VudHJ5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgUGhpbGlwLCBiZWZvcmUgaGUgY291bGQgcHV0IHRoZXNlIHBsYW5zIGFuZCBwcmVwYXJhdGlvbnMgaW50byBlZmZlY3QsIGRpZWQgb2YgZ3JpZWYgYW5kIGFuZ3Vpc2ggb2YgbWluZAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTc5IEIuQy48L25vdGU+OyBmb3IgaGUgY2FtZSB0byBrbm93IHRoYXQgaGUgaGFkIHVuanVzdGx5IHB1dCB0byBkZWF0aCBvbmUgb2YgaGlzIHNvbnMsIERlbWV0cml1cywgb24gZmFsc2UgY2hhcmdlcyBtYWRlIGJ5IHRoZSBvdGhlciwgd2hvIHdhcyBoaXMgaW5mZXJpb3IuIFRoZSBzb24sIGhvd2V2ZXIsIHdob20gaGUgbGVmdCwgUGVyc2V1cywgYWxvbmcgd2l0aCBoaXMgZmF0aGVyJ3Mga2luZ2RvbSwgaW5oZXJpdGVkIGhpcyBoYXRyZWQgb2YgdGhlIFJvbWFucywgYnV0IHdhcyBub3QgZXF1YWwgdG8gdGhlIGJ1cmRlbiBiZWNhdXNlIG9mIHRoZSBsaXR0bGVuZXNzIGFuZCBiYXNlbmVzcyBvZiBoaXMgY2hhcmFjdGVyLCBpbiB3aGljaCwgYW1vbmcgYWxsIHNvcnRzIG9mIHBhc3Npb25zIGFuZCBkaXN0ZW1wZXJzLCBhdmFyaWNlIHdhcyB0aGUgY2hpZWYgdHJhaXQuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgaGUgd2FzIG5vdCBldmVuIGEgdHJ1ZS1ib3JuIHNvbiwgYnV0IHRoYXQgUGhpbGlwJ3Mgd2lmZSB0b29rIGhpbSBhdCBoaXMgYmlydGggZnJvbSBoaXMgbW90aGVyLCBhIGNlcnRhaW4gc2VtcHN0cmVzcywgYW4gQXJnaXZlIHdvbWFuIG5hbWVkIEduYXRoYWVuaW9uLCBhbmQgcGFzc2VkIGhpbSBvZmYgYXMgaGVyIG93bi4gQW5kIHRoaXMgd2FzIHRoZSBjaGllZiByZWFzb24sIGFzIGl0IHdvdWxkIHNlZW0sIHdoeSBoZSBmZWFyZWQgRGVtZXRyaXVzIGFuZCBjb21wYXNzZWQgaGlzIGRlYXRoLCBsZXN0IHRoZSByb3lhbCBob3VzZSBoYXZpbmcgYSB0cnVlLWJvcm4gaGVpciB0byB0aGUgdGhyb25lLCBzaG91bGQgdW5jb3ZlciBoaXMgb3duIHNwdXJpb3VzIGJpcnRoLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['8.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQaGlsaXAsIGJlZm9yZSBoZSBjb3VsZCBwdXQgdGhlc2UgcGxhbnMgYW5kIHByZXBhcmF0aW9ucyBpbnRvIGVmZmVjdCwgZGllZCBvZiBncmllZiBhbmQgYW5ndWlzaCBvZiBtaW5kCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE3OSBCLkMuPC9ub3RlPjsgZm9yIGhlIGNhbWUgdG8ga25vdyB0aGF0IGhlIGhhZCB1bmp1c3RseSBwdXQgdG8gZGVhdGggb25lIG9mIGhpcyBzb25zLCBEZW1ldHJpdXMsIG9uIGZhbHNlIGNoYXJnZXMgbWFkZSBieSB0aGUgb3RoZXIsIHdobyB3YXMgaGlzIGluZmVyaW9yLiBUaGUgc29uLCBob3dldmVyLCB3aG9tIGhlIGxlZnQsIFBlcnNldXMsIGFsb25nIHdpdGggaGlzIGZhdGhlcidzIGtpbmdkb20sIGluaGVyaXRlZCBoaXMgaGF0cmVkIG9mIHRoZSBSb21hbnMsIGJ1dCB3YXMgbm90IGVxdWFsIHRvIHRoZSBidXJkZW4gYmVjYXVzZSBvZiB0aGUgbGl0dGxlbmVzcyBhbmQgYmFzZW5lc3Mgb2YgaGlzIGNoYXJhY3RlciwgaW4gd2hpY2gsIGFtb25nIGFsbCBzb3J0cyBvZiBwYXNzaW9ucyBhbmQgZGlzdGVtcGVycywgYXZhcmljZSB3YXMgdGhlIGNoaWVmIHRyYWl0LiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['8.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpdCBpcyBzYWlkIHRoYXQgaGUgd2FzIG5vdCBldmVuIGEgdHJ1ZS1ib3JuIHNvbiwgYnV0IHRoYXQgUGhpbGlwJ3Mgd2lmZSB0b29rIGhpbSBhdCBoaXMgYmlydGggZnJvbSBoaXMgbW90aGVyLCBhIGNlcnRhaW4gc2VtcHN0cmVzcywgYW4gQXJnaXZlIHdvbWFuIG5hbWVkIEduYXRoYWVuaW9uLCBhbmQgcGFzc2VkIGhpbSBvZmYgYXMgaGVyIG93bi4gQW5kIHRoaXMgd2FzIHRoZSBjaGllZiByZWFzb24sIGFzIGl0IHdvdWxkIHNlZW0sIHdoeSBoZSBmZWFyZWQgRGVtZXRyaXVzIGFuZCBjb21wYXNzZWQgaGlzIGRlYXRoLCBsZXN0IHRoZSByb3lhbCBob3VzZSBoYXZpbmcgYSB0cnVlLWJvcm4gaGVpciB0byB0aGUgdGhyb25lLCBzaG91bGQgdW5jb3ZlciBoaXMgb3duIHNwdXJpb3VzIGJpcnRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGFsdGhvdWdoIGhlIHdhcyBpZ25vYmxlIGFuZCBtZWFuLCB0aGUgc3RyZW5ndGggb2YgaGlzIHBvc2l0aW9uIGxlZCBoaW0gdG8gdW5kZXJ0YWtlIHRoZSB3YXIsIGFuZCBoZSBrZXB0IHVwIHRoZSBzdHJ1Z2dsZSBmb3IgYSBsb25nIHRpbWUsIHJlcHVsc2luZyBSb21hbiBjb21tYW5kZXJzIG9mIGNvbnN1bGFyIHJhbmsgd2l0aCBncmVhdCBhcm1pZXMgYW5kIGZsZWV0cywgYW5kIGFjdHVhbGx5IGNvbnF1ZXJpbmcgc29tZSBvZiB0aGVtLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QdWJsaXVzIExpY2luaXVzLCBmb3IgZXhhbXBsZSwgd2hvIHdhcyB0aGUgZmlyc3QgdGhhdCBpbnZhZGVkIE1hY2Vkb25pYSwgaGUgcm91dGVkIGluIGEgY2F2YWxyeSBiYXR0bGUsIHNsZXcgdHdlbnR5LWZpdmUgaHVuZHJlZCBnb29kIG1lbiwgYW5kIHRvb2sgc2l4IGh1bmRyZWQgcHJpc29uZXJzIGJlc2lkZXM7IHRoZW4gaGUgbWFkZSBhbiB1bmV4cGVjdGVkIGF0dGFjayB1cG9uIHRoZSBSb21hbiBmbGVldCB3aGljaCB3YXMgbHlpbmcgYXQgYW5jaG9yIG5lYXIgT3JldXMsIHNlaXplZCB0d2VudHkgc2hpcHMgb2YgYnVyZGVuIHdpdGggdGhlaXIgY2FyZ29lcywgYW5kIHNhbmsgdGhlIHJlc3QgdG9nZXRoZXIgd2l0aCB0aGUgZ3JhaW4gdGhhdCBmaWxsZWQgdGhlbTsgaGUgYWxzbyBtYWRlIGhpbXNlbGYgbWFzdGVyIG9mIGZvdXIgcXVpbnF1ZXJlbWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5IZSBmb3VnaHQgYSBzZWNvbmQgYmF0dGxlLCB0b28sIGluIHdoaWNoIGhlIHJlcHVsc2VkIHRoZSBjb25zdWwgSG9zdGlsaXVzIGFzIGhlIHdhcyB0cnlpbmcgdG8gZm9yY2UgaGlzIHdheSBpbnRvIE1hY2Vkb25pYSBhdCBFbGltaWFlOyBhbmQgYWZ0ZXIgSG9zdGlsaXVzIGhhZCBicm9rZW4gaW50byB0aGUgY291bnRyeSB1bmRldGVjdGVkIGJ5IHdheSBvZiBUaGVzc2FseSwgaGUgZ2F2ZSBoaW0gYSBjaGFsbGVuZ2UgdG8gYmF0dGxlIHdoaWNoIGhlIHdhcyBhZnJhaWQgdG8gYWNjZXB0LiBGdXJ0aGVybW9yZSwgYXMgYSBzaWRlIGlzc3VlIG9mIHRoZSB3YXIsIGhlIG1hZGUgYW4gZXhwZWRpdGlvbiBhZ2FpbnN0IHRoZSBEYXJkYW5pYW5zLCBpbXBseWluZyB0aGF0IGhlIGlnbm9yZWQgdGhlIFJvbWFucyBhbmQgdGhhdCB0aW1lIGh1bmcgaGVhdnkgb24gaGlzIGhhbmRzOyBoZSBjdXQgdG8gcGllY2VzIHRlbiB0aG91c2FuZCBvZiB0aGUgQmFyYmFyaWFucyBhbmQgZHJvdmUgb2ZmIG11Y2ggYm9vdHkuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gc2VjcmV0bHkgc3RpcnJlZCB1cCB0aGUgR2F1bHMgc2V0dGxlZCBhbG9uZyB0aGUgRGFudWJlLCB3aG8gYXJlIGNhbGxlZCBCaXN0ZXJuYWUsIGFuIGVxdWVzdHJpYW4gaG9zdCBhbmQgd2FybGlrZTsgYW5kIGhlIGludml0ZWQgdGhlIElsbHlyaWFucywgdGhyb3VnaCBHZW50aGl1cyB0aGVpciBraW5nLCB0byB0YWtlIHBhcnQgd2l0aCBoaW0gaW4gdGhlIHdhci4gQW5kIGEgcmVwb3J0IHByZXZhaWxlZCB0aGF0IHRoZSBCYXJiYXJpYW5zIGhhZCBiZWVuIGhpcmVkIGJ5IGhpbSB0byBwYXNzIHRocm91Z2ggbG93ZXIgR2F1bCwgYWxvbmcgdGhlIGNvYXN0IG9mIHRoZSBBZHJpYXRpYywgYW5kIG1ha2UgYW4gaW5jdXJzaW9uIGludG8gSXRhbHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['9.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhbHRob3VnaCBoZSB3YXMgaWdub2JsZSBhbmQgbWVhbiwgdGhlIHN0cmVuZ3RoIG9mIGhpcyBwb3NpdGlvbiBsZWQgaGltIHRvIHVuZGVydGFrZSB0aGUgd2FyLCBhbmQgaGUga2VwdCB1cCB0aGUgc3RydWdnbGUgZm9yIGEgbG9uZyB0aW1lLCByZXB1bHNpbmcgUm9tYW4gY29tbWFuZGVycyBvZiBjb25zdWxhciByYW5rIHdpdGggZ3JlYXQgYXJtaWVzIGFuZCBmbGVldHMsIGFuZCBhY3R1YWxseSBjb25xdWVyaW5nIHNvbWUgb2YgdGhlbS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlB1YmxpdXMgTGljaW5pdXMsIGZvciBleGFtcGxlLCB3aG8gd2FzIHRoZSBmaXJzdCB0aGF0IGludmFkZWQgTWFjZWRvbmlhLCBoZSByb3V0ZWQgaW4gYSBjYXZhbHJ5IGJhdHRsZSwgc2xldyB0d2VudHktZml2ZSBodW5kcmVkIGdvb2QgbWVuLCBhbmQgdG9vayBzaXggaHVuZHJlZCBwcmlzb25lcnMgYmVzaWRlczsgdGhlbiBoZSBtYWRlIGFuIHVuZXhwZWN0ZWQgYXR0YWNrIHVwb24gdGhlIFJvbWFuIGZsZWV0IHdoaWNoIHdhcyBseWluZyBhdCBhbmNob3IgbmVhciBPcmV1cywgc2VpemVkIHR3ZW50eSBzaGlwcyBvZiBidXJkZW4gd2l0aCB0aGVpciBjYXJnb2VzLCBhbmQgc2FuayB0aGUgcmVzdCB0b2dldGhlciB3aXRoIHRoZSBncmFpbiB0aGF0IGZpbGxlZCB0aGVtOyBoZSBhbHNvIG1hZGUgaGltc2VsZiBtYXN0ZXIgb2YgZm91ciBxdWlucXVlcmVtZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['9.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGZvdWdodCBhIHNlY29uZCBiYXR0bGUsIHRvbywgaW4gd2hpY2ggaGUgcmVwdWxzZWQgdGhlIGNvbnN1bCBIb3N0aWxpdXMgYXMgaGUgd2FzIHRyeWluZyB0byBmb3JjZSBoaXMgd2F5IGludG8gTWFjZWRvbmlhIGF0IEVsaW1pYWU7IGFuZCBhZnRlciBIb3N0aWxpdXMgaGFkIGJyb2tlbiBpbnRvIHRoZSBjb3VudHJ5IHVuZGV0ZWN0ZWQgYnkgd2F5IG9mIFRoZXNzYWx5LCBoZSBnYXZlIGhpbSBhIGNoYWxsZW5nZSB0byBiYXR0bGUgd2hpY2ggaGUgd2FzIGFmcmFpZCB0byBhY2NlcHQuIEZ1cnRoZXJtb3JlLCBhcyBhIHNpZGUgaXNzdWUgb2YgdGhlIHdhciwgaGUgbWFkZSBhbiBleHBlZGl0aW9uIGFnYWluc3QgdGhlIERhcmRhbmlhbnMsIGltcGx5aW5nIHRoYXQgaGUgaWdub3JlZCB0aGUgUm9tYW5zIGFuZCB0aGF0IHRpbWUgaHVuZyBoZWF2eSBvbiBoaXMgaGFuZHM7IGhlIGN1dCB0byBwaWVjZXMgdGVuIHRob3VzYW5kIG9mIHRoZSBCYXJiYXJpYW5zIGFuZCBkcm92ZSBvZmYgbXVjaCBib290eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['9.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFsc28gc2VjcmV0bHkgc3RpcnJlZCB1cCB0aGUgR2F1bHMgc2V0dGxlZCBhbG9uZyB0aGUgRGFudWJlLCB3aG8gYXJlIGNhbGxlZCBCaXN0ZXJuYWUsIGFuIGVxdWVzdHJpYW4gaG9zdCBhbmQgd2FybGlrZTsgYW5kIGhlIGludml0ZWQgdGhlIElsbHlyaWFucywgdGhyb3VnaCBHZW50aGl1cyB0aGVpciBraW5nLCB0byB0YWtlIHBhcnQgd2l0aCBoaW0gaW4gdGhlIHdhci4gQW5kIGEgcmVwb3J0IHByZXZhaWxlZCB0aGF0IHRoZSBCYXJiYXJpYW5zIGhhZCBiZWVuIGhpcmVkIGJ5IGhpbSB0byBwYXNzIHRocm91Z2ggbG93ZXIgR2F1bCwgYWxvbmcgdGhlIGNvYXN0IG9mIHRoZSBBZHJpYXRpYywgYW5kIG1ha2UgYW4gaW5jdXJzaW9uIGludG8gSXRhbHkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIFJvbWFucyBsZWFybmVkIG9mIHRoZXNlIHRoaW5ncywgdGhleSBkZWNpZGVkIHRoYXQgdGhleSB3b3VsZCBiaWQgZ29vZC1ieWUgdG8gdGhlIGZhdm91cnMgYW5kIHByb21pc2VzIG9mIHRob3NlIHdobyB3YW50ZWQgdG8gYmUgZ2VuZXJhbHMsIGFuZCB0aGVtc2VsdmVzIHN1bW1vbiB0byB0aGUgbGVhZGVyc2hpcCBhIG1hbiBvZiB3aXNkb20gd2hvIHVuZGVyc3Rvb2QgaG93IHRvIG1hbmFnZSBncmVhdCBhZmZhaXJzLiBUaGlzIG1hbiB3YXMgUGF1bHVzIEFlbWlsaXVzLCBub3cgYWR2YW5jZWQgaW4gbGlmZSBhbmQgYWJvdXQgc2l4dHkgeWVhcnMgb2YgYWdlLCBidXQgaW4gdGhlIHByaW1lIG9mIGJvZGlseSB2aWdvdXIsIGFuZCBoZWRnZWQgYWJvdXQgd2l0aCB5b3V0aGZ1bCBzb25zIGFuZCBzb25zLWluLWxhdywgYW5kIHdpdGggYSBob3N0IG9mIGZyaWVuZHMgYW5kIGtpbnNtZW4gb2YgZ3JlYXQgaW5mbHVlbmNlLCBhbGwgb2Ygd2hvbSB1cmdlZCBoaW0gdG8gZ2l2ZSBlYXIgdG8gdGhlIHBlb3BsZSB3aGVuIGl0IHN1bW1vbmVkIGhpbSB0byB0aGUgY29uc3Vsc2hpcC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgZmlyc3QgaGUgd2FzIGZvciBkZWNsaW5pbmcgdGhlIGFwcGVhbHMgb2YgdGhlIG11bHRpdHVkZSwgYW5kIHRyaWVkIHRvIGF2ZXJ0IHRoZWlyIGVhZ2VyIGltcG9ydHVuaXRpZXMsIHNheWluZyB0aGF0IGhlIGRpZCBub3Qgd2FudCBvZmZpY2U7IGJ1dCB3aGVuIHRoZXkgY2FtZSBkYWlseSB0byBoaXMgaG91c2UgYW5kIGNhbGxlZCBoaW0gZm9ydGggaW50byB0aGUgZm9ydW0gYW5kIHByZXNzZWQgaGltIHdpdGggdGhlaXIgY2xhbW91cnMsIGhlIHlpZWxkZWQ7IGFuZCB3aGVuIGhlIHByZXNlbnRlZCBoaW1zZWxmIGF0IG9uY2UgYW1vbmcgdGhlIGNhbmRpZGF0ZXMgZm9yIHRoZSBjb25zdWxzaGlwLCBoZSBkaWQgbm90IGFwcGVhciB0byBjb21lIGludG8gdGhlIENhbXB1cyBpbiBvcmRlciB0byBnZXQgb2ZmaWNlLCBidXQgYXMgb25lIHdobyBicm91Z2h0IHZpY3RvcnkgYW5kIG1pZ2h0IGluIHdhciBhbmQgb2ZmZXJlZCB0aGVtIHRvIHRoZSBjaXRpemVucy4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBzdWNoIGVhZ2VyIGhvcGVzIGRpZCBhbGwgcmVjZWl2ZSBoaW0sIGFuZCB0aGV5IG1hZGUgaGltIGNvbnN1bCBmb3IgdGhlIHNlY29uZCB0aW1lLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTY4IEIuQy48L25vdGU+IGFuZCBkaWQgbm90IHBlcm1pdCBhIGxvdCB0byBiZSBjYXN0IGZvciB0aGUgcHJvdmluY2VzLCBhcyB3YXMgdGhlIGN1c3RvbSwgYnV0IGF0IG9uY2Ugdm90ZWQgaGltIHRoZSBjb25kdWN0IG9mIHRoZSBNYWNlZG9uaWFuIHdhci4gQW5kIGl0IGlzIHNhaWQgdGhhdCB3aGVuIGhlIGhhZCBiZWVuIGFwcG9pbnRlZCBnZW5lcmFsIGFnYWluc3QgUGVyc2V1cywgYW5kIGhhZCBiZWVuIGVzY29ydGVkIGhvbWUgaW4gc3BsZW5kaWQgZmFzaGlvbiBieSB0aGUgd2hvbGUgcGVvcGxlLCBoZSBmb3VuZCB0aGVyZSBoaXMgZGF1Z2h0ZXIgVGVydGlhLCB3aG8gd2FzIHN0aWxsIGEgbGl0dGxlIGNoaWxkLCBpbiB0ZWFycy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+SGUgdG9vayBoZXIgaW4gaGlzIGFybXMsIHRoZXJlZm9yZSwgYW5kIGFza2VkIGhlciB3aHkgc2hlIGdyaWV2ZWQuIEFuZCBzaGUsIGVtYnJhY2luZyBhbmQga2lzc2luZyBoaW0sIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UHJheSBkb3N0IHRob3Ugbm90IGtub3csIEZhdGhlciwgdGhhdCBvdXIgUGVyc2V1cyBpcyBkZWFkPzwvcT4gbWVhbmluZyBhIGxpdHRsZSBwZXQgZG9nIG9mIHRoYXQgbmFtZS4gQW5kIEFlbWlsaXVzIGNyaWVkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkdvb2QgZm9ydHVuZSEgbXkgZGF1Z2h0ZXIsIEkgYWNjZXB0IHRoZSBvbWVuLjwvcT4gU3VjaCwgdGhlbiwgaXMgdGhlIHN0b3J5IHdoaWNoIENpY2VybyB0aGUgb3JhdG9yIHJlbGF0ZXMgaW4gaGlzIHdvcmsgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5PbiBEaXZpbmF0aW9uLjwvcT4KCQkJCSAgICAgICAgPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJDaWMuIERpdi4gMS4xMDMiIHZhbGlkPSJ5ZXMiPkNpY2VybywgPHRpdGxlPkRlIGRpdmluYXRpb25lPC90aXRsZT4sIEksIDEwMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['10.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgUm9tYW5zIGxlYXJuZWQgb2YgdGhlc2UgdGhpbmdzLCB0aGV5IGRlY2lkZWQgdGhhdCB0aGV5IHdvdWxkIGJpZCBnb29kLWJ5ZSB0byB0aGUgZmF2b3VycyBhbmQgcHJvbWlzZXMgb2YgdGhvc2Ugd2hvIHdhbnRlZCB0byBiZSBnZW5lcmFscywgYW5kIHRoZW1zZWx2ZXMgc3VtbW9uIHRvIHRoZSBsZWFkZXJzaGlwIGEgbWFuIG9mIHdpc2RvbSB3aG8gdW5kZXJzdG9vZCBob3cgdG8gbWFuYWdlIGdyZWF0IGFmZmFpcnMuIFRoaXMgbWFuIHdhcyBQYXVsdXMgQWVtaWxpdXMsIG5vdyBhZHZhbmNlZCBpbiBsaWZlIGFuZCBhYm91dCBzaXh0eSB5ZWFycyBvZiBhZ2UsIGJ1dCBpbiB0aGUgcHJpbWUgb2YgYm9kaWx5IHZpZ291ciwgYW5kIGhlZGdlZCBhYm91dCB3aXRoIHlvdXRoZnVsIHNvbnMgYW5kIHNvbnMtaW4tbGF3LCBhbmQgd2l0aCBhIGhvc3Qgb2YgZnJpZW5kcyBhbmQga2luc21lbiBvZiBncmVhdCBpbmZsdWVuY2UsIGFsbCBvZiB3aG9tIHVyZ2VkIGhpbSB0byBnaXZlIGVhciB0byB0aGUgcGVvcGxlIHdoZW4gaXQgc3VtbW9uZWQgaGltIHRvIHRoZSBjb25zdWxzaGlwLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['10.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGZpcnN0IGhlIHdhcyBmb3IgZGVjbGluaW5nIHRoZSBhcHBlYWxzIG9mIHRoZSBtdWx0aXR1ZGUsIGFuZCB0cmllZCB0byBhdmVydCB0aGVpciBlYWdlciBpbXBvcnR1bml0aWVzLCBzYXlpbmcgdGhhdCBoZSBkaWQgbm90IHdhbnQgb2ZmaWNlOyBidXQgd2hlbiB0aGV5IGNhbWUgZGFpbHkgdG8gaGlzIGhvdXNlIGFuZCBjYWxsZWQgaGltIGZvcnRoIGludG8gdGhlIGZvcnVtIGFuZCBwcmVzc2VkIGhpbSB3aXRoIHRoZWlyIGNsYW1vdXJzLCBoZSB5aWVsZGVkOyBhbmQgd2hlbiBoZSBwcmVzZW50ZWQgaGltc2VsZiBhdCBvbmNlIGFtb25nIHRoZSBjYW5kaWRhdGVzIGZvciB0aGUgY29uc3Vsc2hpcCwgaGUgZGlkIG5vdCBhcHBlYXIgdG8gY29tZSBpbnRvIHRoZSBDYW1wdXMgaW4gb3JkZXIgdG8gZ2V0IG9mZmljZSwgYnV0IGFzIG9uZSB3aG8gYnJvdWdodCB2aWN0b3J5IGFuZCBtaWdodCBpbiB3YXIgYW5kIG9mZmVyZWQgdGhlbSB0byB0aGUgY2l0aXplbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['10.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldpdGggc3VjaCBlYWdlciBob3BlcyBkaWQgYWxsIHJlY2VpdmUgaGltLCBhbmQgdGhleSBtYWRlIGhpbSBjb25zdWwgZm9yIHRoZSBzZWNvbmQgdGltZSwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gMTY4IEIuQy48L25vdGU+IGFuZCBkaWQgbm90IHBlcm1pdCBhIGxvdCB0byBiZSBjYXN0IGZvciB0aGUgcHJvdmluY2VzLCBhcyB3YXMgdGhlIGN1c3RvbSwgYnV0IGF0IG9uY2Ugdm90ZWQgaGltIHRoZSBjb25kdWN0IG9mIHRoZSBNYWNlZG9uaWFuIHdhci4gQW5kIGl0IGlzIHNhaWQgdGhhdCB3aGVuIGhlIGhhZCBiZWVuIGFwcG9pbnRlZCBnZW5lcmFsIGFnYWluc3QgUGVyc2V1cywgYW5kIGhhZCBiZWVuIGVzY29ydGVkIGhvbWUgaW4gc3BsZW5kaWQgZmFzaGlvbiBieSB0aGUgd2hvbGUgcGVvcGxlLCBoZSBmb3VuZCB0aGVyZSBoaXMgZGF1Z2h0ZXIgVGVydGlhLCB3aG8gd2FzIHN0aWxsIGEgbGl0dGxlIGNoaWxkLCBpbiB0ZWFycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['10.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhlIHRvb2sgaGVyIGluIGhpcyBhcm1zLCB0aGVyZWZvcmUsIGFuZCBhc2tlZCBoZXIgd2h5IHNoZSBncmlldmVkLiBBbmQgc2hlLCBlbWJyYWNpbmcgYW5kIGtpc3NpbmcgaGltLCBzYWlkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+UHJheSBkb3N0IHRob3Ugbm90IGtub3csIEZhdGhlciwgdGhhdCBvdXIgUGVyc2V1cyBpcyBkZWFkPzwvcT4gbWVhbmluZyBhIGxpdHRsZSBwZXQgZG9nIG9mIHRoYXQgbmFtZS4gQW5kIEFlbWlsaXVzIGNyaWVkOiAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+R29vZCBmb3J0dW5lISBteSBkYXVnaHRlciwgSSBhY2NlcHQgdGhlIG9tZW4uPC9xPiBTdWNoLCB0aGVuLCBpcyB0aGUgc3Rvcnkgd2hpY2ggQ2ljZXJvIHRoZSBvcmF0b3IgcmVsYXRlcyBpbiBoaXMgd29yayAKCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+T24gRGl2aW5hdGlvbi48L3E+CgkJCQkgICAgICAgIDxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRGl2LiAxLjEwMyIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBkaXZpbmF0aW9uZTwvdGl0bGU+LCBJLCAxMDMuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+CgkJCSAgICAgIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkNpYy4gRGl2LiAxLjEwMyIgdmFsaWQ9InllcyI+Q2ljZXJvLCA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBkaXZpbmF0aW9uZTwvdGl0bGU+LCBJLCAxMDMuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5EZSBkaXZpbmF0aW9uZTwvdGl0bGU+LCBJLCAxMDMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjExIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIHRoZSBjdXN0b20gZm9yIHRob3NlIHdobyBvYnRhaW5lZCB0aGUgY29uc3Vsc2hpcCB0byByZXR1cm4gdGhhbmtzLCBhcyBpdCB3ZXJlLCBmb3IgdGhlIGdyZWF0IGZhdm91ciBpbiBhIGZyaWVuZGx5IHNwZWVjaCB0byB0aGUgcGVvcGxlIGZyb20gdGhlIHJvc3RyYTsgYnV0IEFlbWlsaXVzLCBoYXZpbmcgZ2F0aGVyZWQgYW4gYXNzZW1ibHkgb2YgdGhlIGNpdGl6ZW5zLCBzYWlkIGhlIGhhZCBzdWVkIGZvciBoaXMgZmlyc3QgY29uc3Vsc2hpcCBiZWNhdXNlIGhlIGhpbXNlbGYgd2FudGVkIG9mZmljZSwgYnV0IGZvciBoaXMgc2Vjb25kIGJlY2F1c2UgdGhleSB3YW50ZWQgYSBnZW5lcmFsOyAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz53aGVyZWZvcmUgaGUgd2FzIHVuZGVyIG5vIG9ibGlnYXRpb24gdG8gdGhlbTsgb24gdGhlIGNvbnRyYXJ5LCBpZiB0aGV5IHRob3VnaHQgdGhlIHdhciB3b3VsZCBiZSBjYXJyaWVkIG9uIGJldHRlciBieSBhbm90aGVyLCBoZSByZXNpZ25lZCB0aGUgY29uZHVjdCBvZiBpdDsgYnV0IGlmIHRoZXkgaGFkIGNvbmZpZGVuY2UgaW4gaGltIHRoZXkgbXVzdCBub3QgbWFrZSB0aGVtc2VsdmVzIGhpcyBjb2xsZWFndWVzIGluIGNvbW1hbmQsIG5vciBpbmR1bGdlIGluIHJoZXRvcmljIGFib3V0IHRoZSB3YXIsIGJ1dCBxdWlldGx5IGZ1cm5pc2ggdGhlIG5lY2Vzc2FyeSBzdXBwbGllcyBmb3IgaXQsIHNpbmNlLCBpZiB0aGV5IHNvdWdodCB0byBjb21tYW5kIHRoZWlyIGNvbW1hbmRlciwgdGhlaXIgY2FtcGFpZ25zIHdvdWxkIGJlIHN0aWxsIG1vcmUgcmlkaWN1bG91cyB0aGFuIHRoZXkgd2VyZSBhbHJlYWR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5CeSB0aGVzZSB3b3JkcyBoZSBpbnNwaXJlZCB0aGUgY2l0aXplbnMgd2l0aCBncmVhdCByZXZlcmVuY2UgZm9yIGhpbXNlbGYsIGFuZCB3aXRoIGdyZWF0IGV4cGVjdGF0aW9ucyBvZiB0aGUgZnV0dXJlLCBhbmQgYWxsIHdlcmUgZ2xhZCB0aGF0IHRoZXkgaGFkIHBhc3NlZCBieSB0aGUgZmxhdHRlcmVycyBhbmQgY2hvc2VuIGEgZ2VuZXJhbCB3aG8gaGFkIHJlc29sdXRpb24gYW5kIGZyYW5rbmVzcyBvZiBzcGVlY2guIFRodXMgd2FzIHRoZSBSb21hbiBwZW9wbGUsIHRvIHRoZSBlbmQgdGhhdCBpdCBtaWdodCBwcmV2YWlsIGFuZCBiZSBncmVhdGVzdCBpbiB0aGUgd29ybGQsIGEgc2VydmFudCBvZiB2aXJ0dWUgYW5kIGhvbm91ci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['11.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SXQgd2FzIHRoZSBjdXN0b20gZm9yIHRob3NlIHdobyBvYnRhaW5lZCB0aGUgY29uc3Vsc2hpcCB0byByZXR1cm4gdGhhbmtzLCBhcyBpdCB3ZXJlLCBmb3IgdGhlIGdyZWF0IGZhdm91ciBpbiBhIGZyaWVuZGx5IHNwZWVjaCB0byB0aGUgcGVvcGxlIGZyb20gdGhlIHJvc3RyYTsgYnV0IEFlbWlsaXVzLCBoYXZpbmcgZ2F0aGVyZWQgYW4gYXNzZW1ibHkgb2YgdGhlIGNpdGl6ZW5zLCBzYWlkIGhlIGhhZCBzdWVkIGZvciBoaXMgZmlyc3QgY29uc3Vsc2hpcCBiZWNhdXNlIGhlIGhpbXNlbGYgd2FudGVkIG9mZmljZSwgYnV0IGZvciBoaXMgc2Vjb25kIGJlY2F1c2UgdGhleSB3YW50ZWQgYSBnZW5lcmFsOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['11.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPndoZXJlZm9yZSBoZSB3YXMgdW5kZXIgbm8gb2JsaWdhdGlvbiB0byB0aGVtOyBvbiB0aGUgY29udHJhcnksIGlmIHRoZXkgdGhvdWdodCB0aGUgd2FyIHdvdWxkIGJlIGNhcnJpZWQgb24gYmV0dGVyIGJ5IGFub3RoZXIsIGhlIHJlc2lnbmVkIHRoZSBjb25kdWN0IG9mIGl0OyBidXQgaWYgdGhleSBoYWQgY29uZmlkZW5jZSBpbiBoaW0gdGhleSBtdXN0IG5vdCBtYWtlIHRoZW1zZWx2ZXMgaGlzIGNvbGxlYWd1ZXMgaW4gY29tbWFuZCwgbm9yIGluZHVsZ2UgaW4gcmhldG9yaWMgYWJvdXQgdGhlIHdhciwgYnV0IHF1aWV0bHkgZnVybmlzaCB0aGUgbmVjZXNzYXJ5IHN1cHBsaWVzIGZvciBpdCwgc2luY2UsIGlmIHRoZXkgc291Z2h0IHRvIGNvbW1hbmQgdGhlaXIgY29tbWFuZGVyLCB0aGVpciBjYW1wYWlnbnMgd291bGQgYmUgc3RpbGwgbW9yZSByaWRpY3Vsb3VzIHRoYW4gdGhleSB3ZXJlIGFscmVhZHkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['11.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ5IHRoZXNlIHdvcmRzIGhlIGluc3BpcmVkIHRoZSBjaXRpemVucyB3aXRoIGdyZWF0IHJldmVyZW5jZSBmb3IgaGltc2VsZiwgYW5kIHdpdGggZ3JlYXQgZXhwZWN0YXRpb25zIG9mIHRoZSBmdXR1cmUsIGFuZCBhbGwgd2VyZSBnbGFkIHRoYXQgdGhleSBoYWQgcGFzc2VkIGJ5IHRoZSBmbGF0dGVyZXJzIGFuZCBjaG9zZW4gYSBnZW5lcmFsIHdobyBoYWQgcmVzb2x1dGlvbiBhbmQgZnJhbmtuZXNzIG9mIHNwZWVjaC4gVGh1cyB3YXMgdGhlIFJvbWFuIHBlb3BsZSwgdG8gdGhlIGVuZCB0aGF0IGl0IG1pZ2h0IHByZXZhaWwgYW5kIGJlIGdyZWF0ZXN0IGluIHRoZSB3b3JsZCwgYSBzZXJ2YW50IG9mIHZpcnR1ZSBhbmQgaG9ub3VyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTIiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4gWElJLiBOb3csIHRoYXQgQWVtaWxpdXMgUGF1bHVzLCBhZnRlciBzZXR0aW5nIG91dCB1cG9uIGhpcyBjYW1wYWlnbiwgaGFkIGEgZm9ydHVuYXRlIHZveWFnZSBhbmQgYW4gZWFzeSBwYXNzYWdlIGFuZCBjYW1lIHNwZWVkaWx5IGFuZCBzYWZlbHkgdG8gdGhlIFJvbWFuIGNhbXAsIEkgYXR0cmlidXRlIHRvIHRoZSBmYXZvdXIgb2YgSGVhdmVuOyBidXQgd2hlbiBJIHNlZSB0aGF0IHRoZSB3YXIgdW5kZXIgaGlzIGNvbW1hbmQgd2FzIGJyb3VnaHQgdG8gYW4gZW5kIHBhcnRseSBieSBoaXMgZmllcmNlIGNvdXJhZ2UsIHBhcnRseSBieSBoaXMgZXhjZWxsZW50IHBsYW5zLCBwYXJ0bHkgYnkgdGhlIGVhZ2VyIGFzc2lzdGFuY2Ugb2YgaGlzIGZyaWVuZHMsIGFuZCBwYXJ0bHkgYnkgaGlzIHJlc29sdXRlIGFkb3B0aW9uIG9mIGZpdHRpbmcgY29uY2x1c2lvbnMgaW4gdGltZXMgb2YgZGFuZ2VyLCBJIGNhbm5vdCBhc3NpZ24gaGlzIHJlbWFya2FibGUgYW5kIGJyaWxsaWFudCBzdWNjZXNzIHRvIGhpcyBjZWxlYnJhdGVkIGdvb2QgZm9ydHVuZSwgYXMgSSBjYW4gaW4gdGhlIGNhc2Ugb2Ygb3RoZXIgZ2VuZXJhbHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlVubGVzcywgaW5kZWVkLCBpdCBiZSBzYWlkIHRoYXQgdGhlIGF2YXJpY2lvdXMgY29uZHVjdCBvZiBQZXJzZXVzIHdhcyBnb29kIGZvcnR1bmUgZm9yIEFlbWlsaXVzLCBzaW5jZSBpdCB1dHRlcmx5IHN1YnZlcnRlZCB0aGUgZ3JlYXQgYW5kIGJyaWxsaWFudCBwcm9zcGVjdHMgb2YgdGhlIE1hY2Vkb25pYW5zIGZvciB0aGUgd2FyICh3aGVyZWluIHRoZWlyIGhvcGVzIHJhbiBoaWdoKSwgYmVjYXVzZSBQZXJzZXVzIHBsYXllZCB0aGUgY293YXJkIHdpdGggaGlzIG1vbmV5LiBGb3IgdGhlcmUgY2FtZSB0byBoaW0gZnJvbSB0aGUgQmlzdGVybmFlLCBhdCBoaXMgcmVxdWVzdCwgdGVuIHRob3VzYW5kIGhvcnNlbWVuIHdpdGggdGVuIHRob3VzYW5kIG1lbiB0byBydW4gYXQgdGhlaXIgc2lkZXMsIGFsbCBwcm9mZXNzaW9uYWwgc29sZGllcnMsIG1lbiB3aG8ga25ldyBub3QgaG93IHRvIHBsb3VnaCBvciB0byBzYWlsIHRoZSBzZWFzLCB3aG8gZGlkIG5vdCBmb2xsb3cgdGhlIGxpZmUgb2YgaGVyZHNtZW4sIGJ1dCB3aG8gd2VyZSBldmVyIHByYWN0aXNpbmcgb25lIGJ1c2luZXNzIGFuZCBvbmUgYXJ0LCB0aGF0IG9mIGZpZ2h0aW5nIGFuZCBjb25xdWVyaW5nIHRoZWlyIGFudGFnb25pc3RzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgd2hlbiB0aGVzZSBoYWQgZW5jYW1wZWQgaW4gTWFlZGljYSBhbmQgbWluZ2xlZCB3aXRoIHRoZSBzb2xkaWVycyBvZiB0aGUga2luZyzigJRtZW4gb2YgbG9mdHkgc3RhdHVyZSwgYWRtaXJhYmxlIGluIHRoZWlyIGRpc2NpcGxpbmUsIGdyZWF0IGJvYXN0ZXJzLCBhbmQgbG91ZCBpbiB0aGVpciB0aHJlYXRzIGFnYWluc3QgdGhlaXIgZW5lbWllcyzigJR0aGV5IGluc3BpcmVkIHRoZSBNYWNlZG9uaWFucyB3aXRoIGNvdXJhZ2UgYW5kIGEgYmVsaWVmIHRoYXQgdGhlIFJvbWFucyBjb3VsZCBub3Qgd2l0aHN0YW5kIHRoZW0sIGJ1dCB3b3VsZCBiZSB1dHRlcmx5IHRlcnJpZmllZCBieSB0aGVpciBsb29rcyBhbmQgbW92ZW1lbnRzLCB3aGljaCB3ZXJlIHN0cmFuZ2UgYW5kIHJlcHVsc2l2ZS4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGFmdGVyIFBlcnNldXMgaGFkIGRpc3Bvc2VkIHRoZSBmZWVsaW5ncyBvZiBoaXMgbWVuIGluIHRoaXMgd2F5IGFuZCBmaWxsZWQgdGhlbSB3aXRoIHNvIGdyZWF0IGhvcGVzLCB1cG9uIGJlaW5nIGFza2VkIHRvIHBheSBlYWNoIGNhcHRhaW4gb2YgdGhlIG1lcmNlbmFyaWVzIGEgdGhvdXNhbmQgcGllY2VzLCBoZSB3YXMgYmV3aWxkZXJlZCBhbmQgY3JhemVkIGF0IHRoZSBhbW91bnQgb2YgZ29sZCByZXF1aXJlZCwgYW5kIG91dCBvZiBwYXJzaW1vbnkgcmVub3VuY2VkIGFuZCBhYmFuZG9uZWQgdGhlIGFsbGlhbmNlLCBhcyBpZiBoZSB3ZXJlIGEgc3Rld2FyZCwgcmF0aGVyIHRoYW4gYSBmb2UsIG9mIHRoZSBSb21hbnMsIGFuZCB3YXMgdG8gZ2l2ZSBhbiBleGFjdCBhY2NvdW50IG9mIGhpcyBleHBlbmRpdHVyZXMgZm9yIHRoZSB3YXIgdG8gdGhvc2UgYWdhaW5zdCB3aG9tIGhlIHdhZ2VkIGl0OyBhbmQgeWV0IGhlIGhhZCBoaXMgZm9lcyB0byBnaXZlIGhpbSBsZXNzb25zLCBmb3IsIGFwYXJ0IGZyb20gdGhlaXIgb3RoZXIgcHJlcGFyYXRpb25zLCB0aGV5IGhhZCBhIGh1bmRyZWQgdGhvdXNhbmQgbWVuIGFzc2VtYmxlZCBhbmQgcmVhZHkgZm9yIHRoZWlyIG5lZWRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgaGUsIHRob3VnaCBjb250ZW5kaW5nIGFnYWluc3Qgc28gbGFyZ2UgYSBmb3JjZSwgYW5kIGluIGEgd2FyIHdoZXJlIHN1Y2ggbGFyZ2UgcmVzZXJ2ZXMgd2VyZSBtYWludGFpbmVkLCBtZWFzdXJlZCBvdXQgaGlzIGdvbGQgYW5kIHNlYWxlZCBpdCB1cCBpbiBiYWdzLCBhcyBhZnJhaWQgdG8gdG91Y2ggaXQgYXMgaWYgaXQgaGFkIGJlbG9uZ2VkIHRvIG90aGVycy4gQW5kIHRoaXMgaGUgZGlkIGFsdGhvdWdoIGhlIHdhcyBubyBMeWRpYW4gb3IgUGhvZW5pY2lhbiBib3JuLCBidXQgbGFpZCBjbGFpbSB0byBhIHNoYXJlIGluIHRoZSB2aXJ0dWVzIG9mIEFsZXhhbmRlciBhbmQgUGhpbGlwLCB3aG9zZSBkZXNjZW5kYW50IGhlIHdhcyzigJRtZW4gd2hvIG1hc3RlcmVkIHRoZSB3b3JsZCB0aHJvdWdoIHRoZWlyIGJlbGllZiB0aGF0IGVtcGlyZSB3YXMgdG8gYmUgYm91Z2h0IHdpdGggbW9uZXksIG5vdCBtb25leSB3aXRoIGVtcGlyZS4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYWxsIGV2ZW50cywgaXQgd2FzIGEgY29tbW9uIHNheWluZyB0aGF0IHRoZSBjaXRpZXMgb2YgR3JlZWNlIHdlcmUgdGFrZW4sIG5vdCBieSBQaGlsaXAsIGJ1dCBieSBQaGlsaXAncyBtb25leS4gQW5kIEFsZXhhbmRlciwgd2hlbiBoZSB3YXMgc3RhcnRpbmcgb24gaGlzIGV4cGVkaXRpb24gdG8gSW5kaWEsIGFuZCBzYXcgdGhhdCBoaXMgTWFjZWRvbmlhbnMgd2VyZSBkcmFnZ2luZyBhbG9uZyBhZnRlciB0aGVtIHRoZWlyIFBlcnNpYW4gd2VhbHRoLCB3aGljaCB3YXMgYWxyZWFkeSBidXJkZW5zb21lIGFuZCBoZWF2eSwgc2V0IGZpcmUgdG8gdGhlIHJveWFsIGJhZ2dhZ2Utd2FnZ29ucyBmaXJzdCwgYW5kIHRoZW4gcGVyc3VhZGVkIGhpcyBmb2xsb3dlcnMgdG8gZG8gdGhlIHNhbWUgd2l0aCB0aGVpcnMsIGFuZCB0byBzZXQgb3V0IGZvciB0aGUgd2FyIGluIGxpZ2h0IG1hcmNoaW5nIG9yZGVyLCBsaWtlIG1lbiByZWxlYXNlZCBmcm9tIGJvbmRhZ2UuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQZXJzZXVzIHdvdWxkIG5vdCBjb25zZW50IHRvIHBvdXIgb3V0IGhpcyBnb2xkIHVwb24gaGltc2VsZiwgaGlzIGNoaWxkcmVuLCBhbmQgaGlzIGtpbmdkb20sIGFuZCB0aHVzIHB1cmNoYXNlIHNhbHZhdGlvbiB3aXRoIGEgc21hbGwgcGFydCBvZiBoaXMgdHJlYXN1cmVzLCBidXQgY2hvc2UgdG8gYmUgY2FycmllZCB3aXRoIG1hbnkgdHJlYXN1cmVzIGFzIHRoZSB3ZWFsdGh5IGNhcHRpdmUsIGFuZCB0byBzaG93IHRoZSBSb21hbnMgaG93IG11Y2ggaGUgaGFkIHNhdmVkIGFuZCB3YXRjaGVkIGZvciB0aGVtLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['12.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFhJSS4gTm93LCB0aGF0IEFlbWlsaXVzIFBhdWx1cywgYWZ0ZXIgc2V0dGluZyBvdXQgdXBvbiBoaXMgY2FtcGFpZ24sIGhhZCBhIGZvcnR1bmF0ZSB2b3lhZ2UgYW5kIGFuIGVhc3kgcGFzc2FnZSBhbmQgY2FtZSBzcGVlZGlseSBhbmQgc2FmZWx5IHRvIHRoZSBSb21hbiBjYW1wLCBJIGF0dHJpYnV0ZSB0byB0aGUgZmF2b3VyIG9mIEhlYXZlbjsgYnV0IHdoZW4gSSBzZWUgdGhhdCB0aGUgd2FyIHVuZGVyIGhpcyBjb21tYW5kIHdhcyBicm91Z2h0IHRvIGFuIGVuZCBwYXJ0bHkgYnkgaGlzIGZpZXJjZSBjb3VyYWdlLCBwYXJ0bHkgYnkgaGlzIGV4Y2VsbGVudCBwbGFucywgcGFydGx5IGJ5IHRoZSBlYWdlciBhc3Npc3RhbmNlIG9mIGhpcyBmcmllbmRzLCBhbmQgcGFydGx5IGJ5IGhpcyByZXNvbHV0ZSBhZG9wdGlvbiBvZiBmaXR0aW5nIGNvbmNsdXNpb25zIGluIHRpbWVzIG9mIGRhbmdlciwgSSBjYW5ub3QgYXNzaWduIGhpcyByZW1hcmthYmxlIGFuZCBicmlsbGlhbnQgc3VjY2VzcyB0byBoaXMgY2VsZWJyYXRlZCBnb29kIGZvcnR1bmUsIGFzIEkgY2FuIGluIHRoZSBjYXNlIG9mIG90aGVyIGdlbmVyYWxzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlVubGVzcywgaW5kZWVkLCBpdCBiZSBzYWlkIHRoYXQgdGhlIGF2YXJpY2lvdXMgY29uZHVjdCBvZiBQZXJzZXVzIHdhcyBnb29kIGZvcnR1bmUgZm9yIEFlbWlsaXVzLCBzaW5jZSBpdCB1dHRlcmx5IHN1YnZlcnRlZCB0aGUgZ3JlYXQgYW5kIGJyaWxsaWFudCBwcm9zcGVjdHMgb2YgdGhlIE1hY2Vkb25pYW5zIGZvciB0aGUgd2FyICh3aGVyZWluIHRoZWlyIGhvcGVzIHJhbiBoaWdoKSwgYmVjYXVzZSBQZXJzZXVzIHBsYXllZCB0aGUgY293YXJkIHdpdGggaGlzIG1vbmV5LiBGb3IgdGhlcmUgY2FtZSB0byBoaW0gZnJvbSB0aGUgQmlzdGVybmFlLCBhdCBoaXMgcmVxdWVzdCwgdGVuIHRob3VzYW5kIGhvcnNlbWVuIHdpdGggdGVuIHRob3VzYW5kIG1lbiB0byBydW4gYXQgdGhlaXIgc2lkZXMsIGFsbCBwcm9mZXNzaW9uYWwgc29sZGllcnMsIG1lbiB3aG8ga25ldyBub3QgaG93IHRvIHBsb3VnaCBvciB0byBzYWlsIHRoZSBzZWFzLCB3aG8gZGlkIG5vdCBmb2xsb3cgdGhlIGxpZmUgb2YgaGVyZHNtZW4sIGJ1dCB3aG8gd2VyZSBldmVyIHByYWN0aXNpbmcgb25lIGJ1c2luZXNzIGFuZCBvbmUgYXJ0LCB0aGF0IG9mIGZpZ2h0aW5nIGFuZCBjb25xdWVyaW5nIHRoZWlyIGFudGFnb25pc3RzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIHRoZXNlIGhhZCBlbmNhbXBlZCBpbiBNYWVkaWNhIGFuZCBtaW5nbGVkIHdpdGggdGhlIHNvbGRpZXJzIG9mIHRoZSBraW5nLOKAlG1lbiBvZiBsb2Z0eSBzdGF0dXJlLCBhZG1pcmFibGUgaW4gdGhlaXIgZGlzY2lwbGluZSwgZ3JlYXQgYm9hc3RlcnMsIGFuZCBsb3VkIGluIHRoZWlyIHRocmVhdHMgYWdhaW5zdCB0aGVpciBlbmVtaWVzLOKAlHRoZXkgaW5zcGlyZWQgdGhlIE1hY2Vkb25pYW5zIHdpdGggY291cmFnZSBhbmQgYSBiZWxpZWYgdGhhdCB0aGUgUm9tYW5zIGNvdWxkIG5vdCB3aXRoc3RhbmQgdGhlbSwgYnV0IHdvdWxkIGJlIHV0dGVybHkgdGVycmlmaWVkIGJ5IHRoZWlyIGxvb2tzIGFuZCBtb3ZlbWVudHMsIHdoaWNoIHdlcmUgc3RyYW5nZSBhbmQgcmVwdWxzaXZlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhZnRlciBQZXJzZXVzIGhhZCBkaXNwb3NlZCB0aGUgZmVlbGluZ3Mgb2YgaGlzIG1lbiBpbiB0aGlzIHdheSBhbmQgZmlsbGVkIHRoZW0gd2l0aCBzbyBncmVhdCBob3BlcywgdXBvbiBiZWluZyBhc2tlZCB0byBwYXkgZWFjaCBjYXB0YWluIG9mIHRoZSBtZXJjZW5hcmllcyBhIHRob3VzYW5kIHBpZWNlcywgaGUgd2FzIGJld2lsZGVyZWQgYW5kIGNyYXplZCBhdCB0aGUgYW1vdW50IG9mIGdvbGQgcmVxdWlyZWQsIGFuZCBvdXQgb2YgcGFyc2ltb255IHJlbm91bmNlZCBhbmQgYWJhbmRvbmVkIHRoZSBhbGxpYW5jZSwgYXMgaWYgaGUgd2VyZSBhIHN0ZXdhcmQsIHJhdGhlciB0aGFuIGEgZm9lLCBvZiB0aGUgUm9tYW5zLCBhbmQgd2FzIHRvIGdpdmUgYW4gZXhhY3QgYWNjb3VudCBvZiBoaXMgZXhwZW5kaXR1cmVzIGZvciB0aGUgd2FyIHRvIHRob3NlIGFnYWluc3Qgd2hvbSBoZSB3YWdlZCBpdDsgYW5kIHlldCBoZSBoYWQgaGlzIGZvZXMgdG8gZ2l2ZSBoaW0gbGVzc29ucywgZm9yLCBhcGFydCBmcm9tIHRoZWlyIG90aGVyIHByZXBhcmF0aW9ucywgdGhleSBoYWQgYSBodW5kcmVkIHRob3VzYW5kIG1lbiBhc3NlbWJsZWQgYW5kIHJlYWR5IGZvciB0aGVpciBuZWVkcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['12.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoZSwgdGhvdWdoIGNvbnRlbmRpbmcgYWdhaW5zdCBzbyBsYXJnZSBhIGZvcmNlLCBhbmQgaW4gYSB3YXIgd2hlcmUgc3VjaCBsYXJnZSByZXNlcnZlcyB3ZXJlIG1haW50YWluZWQsIG1lYXN1cmVkIG91dCBoaXMgZ29sZCBhbmQgc2VhbGVkIGl0IHVwIGluIGJhZ3MsIGFzIGFmcmFpZCB0byB0b3VjaCBpdCBhcyBpZiBpdCBoYWQgYmVsb25nZWQgdG8gb3RoZXJzLiBBbmQgdGhpcyBoZSBkaWQgYWx0aG91Z2ggaGUgd2FzIG5vIEx5ZGlhbiBvciBQaG9lbmljaWFuIGJvcm4sIGJ1dCBsYWlkIGNsYWltIHRvIGEgc2hhcmUgaW4gdGhlIHZpcnR1ZXMgb2YgQWxleGFuZGVyIGFuZCBQaGlsaXAsIHdob3NlIGRlc2NlbmRhbnQgaGUgd2FzLOKAlG1lbiB3aG8gbWFzdGVyZWQgdGhlIHdvcmxkIHRocm91Z2ggdGhlaXIgYmVsaWVmIHRoYXQgZW1waXJlIHdhcyB0byBiZSBib3VnaHQgd2l0aCBtb25leSwgbm90IG1vbmV5IHdpdGggZW1waXJlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCBldmVudHMsIGl0IHdhcyBhIGNvbW1vbiBzYXlpbmcgdGhhdCB0aGUgY2l0aWVzIG9mIEdyZWVjZSB3ZXJlIHRha2VuLCBub3QgYnkgUGhpbGlwLCBidXQgYnkgUGhpbGlwJ3MgbW9uZXkuIEFuZCBBbGV4YW5kZXIsIHdoZW4gaGUgd2FzIHN0YXJ0aW5nIG9uIGhpcyBleHBlZGl0aW9uIHRvIEluZGlhLCBhbmQgc2F3IHRoYXQgaGlzIE1hY2Vkb25pYW5zIHdlcmUgZHJhZ2dpbmcgYWxvbmcgYWZ0ZXIgdGhlbSB0aGVpciBQZXJzaWFuIHdlYWx0aCwgd2hpY2ggd2FzIGFscmVhZHkgYnVyZGVuc29tZSBhbmQgaGVhdnksIHNldCBmaXJlIHRvIHRoZSByb3lhbCBiYWdnYWdlLXdhZ2dvbnMgZmlyc3QsIGFuZCB0aGVuIHBlcnN1YWRlZCBoaXMgZm9sbG93ZXJzIHRvIGRvIHRoZSBzYW1lIHdpdGggdGhlaXJzLCBhbmQgdG8gc2V0IG91dCBmb3IgdGhlIHdhciBpbiBsaWdodCBtYXJjaGluZyBvcmRlciwgbGlrZSBtZW4gcmVsZWFzZWQgZnJvbSBib25kYWdlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['12.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBQZXJzZXVzIHdvdWxkIG5vdCBjb25zZW50IHRvIHBvdXIgb3V0IGhpcyBnb2xkIHVwb24gaGltc2VsZiwgaGlzIGNoaWxkcmVuLCBhbmQgaGlzIGtpbmdkb20sIGFuZCB0aHVzIHB1cmNoYXNlIHNhbHZhdGlvbiB3aXRoIGEgc21hbGwgcGFydCBvZiBoaXMgdHJlYXN1cmVzLCBidXQgY2hvc2UgdG8gYmUgY2FycmllZCB3aXRoIG1hbnkgdHJlYXN1cmVzIGFzIHRoZSB3ZWFsdGh5IGNhcHRpdmUsIGFuZCB0byBzaG93IHRoZSBSb21hbnMgaG93IG11Y2ggaGUgaGFkIHNhdmVkIGFuZCB3YXRjaGVkIGZvciB0aGVtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTMiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaGUgbm90IG9ubHkgc2VudCBhd2F5IHRoZSBHYXVscyBhZnRlciBwbGF5aW5nIHRoZW0gZmFsc2UsIGJ1dCBhbHNvLCBhZnRlciBpbmR1Y2luZyBHZW50aGl1cyB0aGUgSWxseXJpYW4sIG9uIHBheW1lbnQgb2YgdGhyZWUgaHVuZHJlZCB0YWxlbnRzLCB0byBhc3Npc3QgaGltIGluIHRoZSB3YXIsIGhlIHNob3dlZCB0byB0aGUga2luZydzIG1lc3NlbmdlcnMgdGhlIG1vbmV5IGFsbCBjb3VudGVkIG91dCwgYW5kIHN1ZmZlcmVkIHRoZW0gdG8gcHV0IHRoZWlyIHNlYWxzIHVwb24gdGhlIGJhZ3M7IHRoZW4sIHdoZW4gR2VudGhpdXMsIGNvbnZpbmNlZCB0aGF0IGhlIGhhZCB0aGUgcHJpY2UgaGUgaGFkIGFza2VkLCBjb21taXR0ZWQgYSBkcmVhZGZ1bCBhbmQgaW1waW91cyBkZWVkLCBhcnJlc3RpbmcgYW5kIGltcHJpc29uaW5nIGEgUm9tYW4gZW1iYXNzeSB0aGF0IGhhZCBiZWVuIHNlbnQgdG8gaGltLCAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5QZXJzZXVzLCB0aGlua2luZyB0aGF0IHRoZSBtb25leSB3YXMgbm8gbG9uZ2VyIG5lZWRlZCB0byBtYWtlIEdlbnRoaXVzIGFuIGVuZW15IG9mIFJvbWUsIHNpbmNlIGJlZm9yZSBnZXR0aW5nIGl0IGhlIGhhZCBnaXZlbiBhIGxhc3RpbmcgZWFybmVzdCBvZiBoaXMgaGF0cmVkIGFuZCBoYWQgaW52b2x2ZWQgaGltc2VsZiBpbiB0aGUgd2FyIGJ5IHRoZSBncmVhdCB3cm9uZyB3aGljaCBoZSBoYWQgZG9uZSwgZGVwcml2ZWQgdGhlIHBvb3Igd3JldGNoIG9mIHRoZSB0aHJlZSBodW5kcmVkIHRhbGVudHMsIGFuZCBzdWZmZXJlZCBoaW0gaW4gYSBsaXR0bGUgd2hpbGUgdG8gYmUgdGFrZW4gZnJvbSBoaXMga2luZ2RvbSB3aXRoIGhpcyB3aWZlIGFuZCBjaGlsZHJlbiwgYXMgYmlyZHMgZnJvbSB0aGVpciBuZXN0LCBieSBMdWNpdXMgQW5pY2l1cywgYSBnZW5lcmFsIHNlbnQgYWdhaW5zdCBoaW0gd2l0aCBhbiBhcm15LgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIGhlIG5vdCBvbmx5IHNlbnQgYXdheSB0aGUgR2F1bHMgYWZ0ZXIgcGxheWluZyB0aGVtIGZhbHNlLCBidXQgYWxzbywgYWZ0ZXIgaW5kdWNpbmcgR2VudGhpdXMgdGhlIElsbHlyaWFuLCBvbiBwYXltZW50IG9mIHRocmVlIGh1bmRyZWQgdGFsZW50cywgdG8gYXNzaXN0IGhpbSBpbiB0aGUgd2FyLCBoZSBzaG93ZWQgdG8gdGhlIGtpbmcncyBtZXNzZW5nZXJzIHRoZSBtb25leSBhbGwgY291bnRlZCBvdXQsIGFuZCBzdWZmZXJlZCB0aGVtIHRvIHB1dCB0aGVpciBzZWFscyB1cG9uIHRoZSBiYWdzOyB0aGVuLCB3aGVuIEdlbnRoaXVzLCBjb252aW5jZWQgdGhhdCBoZSBoYWQgdGhlIHByaWNlIGhlIGhhZCBhc2tlZCwgY29tbWl0dGVkIGEgZHJlYWRmdWwgYW5kIGltcGlvdXMgZGVlZCwgYXJyZXN0aW5nIGFuZCBpbXByaXNvbmluZyBhIFJvbWFuIGVtYmFzc3kgdGhhdCBoYWQgYmVlbiBzZW50IHRvIGhpbSwgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlBlcnNldXMsIHRoaW5raW5nIHRoYXQgdGhlIG1vbmV5IHdhcyBubyBsb25nZXIgbmVlZGVkIHRvIG1ha2UgR2VudGhpdXMgYW4gZW5lbXkgb2YgUm9tZSwgc2luY2UgYmVmb3JlIGdldHRpbmcgaXQgaGUgaGFkIGdpdmVuIGEgbGFzdGluZyBlYXJuZXN0IG9mIGhpcyBoYXRyZWQgYW5kIGhhZCBpbnZvbHZlZCBoaW1zZWxmIGluIHRoZSB3YXIgYnkgdGhlIGdyZWF0IHdyb25nIHdoaWNoIGhlIGhhZCBkb25lLCBkZXByaXZlZCB0aGUgcG9vciB3cmV0Y2ggb2YgdGhlIHRocmVlIGh1bmRyZWQgdGFsZW50cywgYW5kIHN1ZmZlcmVkIGhpbSBpbiBhIGxpdHRsZSB3aGlsZSB0byBiZSB0YWtlbiBmcm9tIGhpcyBraW5nZG9tIHdpdGggaGlzIHdpZmUgYW5kIGNoaWxkcmVuLCBhcyBiaXJkcyBmcm9tIHRoZWlyIG5lc3QsIGJ5IEx1Y2l1cyBBbmljaXVzLCBhIGdlbmVyYWwgc2VudCBhZ2FpbnN0IGhpbSB3aXRoIGFuIGFybXkuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFlbWlsaXVzLCBjb21pbmcgYWdhaW5zdCBzdWNoIGFuIGFkdmVyc2FyeSwgc2Nvcm5lZCBoaW0gaW5kZWVkLCBidXQgYWRtaXJlZCBoaXMgcHJlcGFyYXRpb25zIGFuZCBoaXMgYXJteS4gRm9yIFBlcnNldXMgaGFkIGZvdXIgdGhvdXNhbmQgaG9yc2VtZW4sIGFuZCBub3QgbXVjaCBmZXdlciB0aGFuIGZvcnR5IHRob3VzYW5kIGhlYXZ5LWFybWVkIGZvb3RtZW4uIEFuZCBwbGFudGluZyBoaW1zZWxmIHdpdGggdGhlIHNlYSBiZWhpbmQgaGltLCBhbG9uZyB0aGUgZm9vdC1oaWxscyBvZiBNb3VudCBPbHltcHVzLCBvbiBncm91bmQgd2hpY2ggbm93aGVyZSBhZmZvcmRlZCBhbiBhcHByb2FjaCwgYW5kIHdoaWNoIGhhZCBiZWVuIGZvcnRpZmllZCBvbiBhbGwgc2lkZXMgYnkgaGltIHdpdGggYnVsd2Fya3MgYW5kIG91dHdvcmtzIG9mIHdvb2QsIGhlIGxheSBpbiBncmVhdCBzZWN1cml0eSwgdGhpbmtpbmcgdGhhdCBieSBkZWxheSBhbmQgZXhwZW5zZSBoZSB3b3VsZCB3ZWFyIG91dCBBZW1pbGl1cy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEFlbWlsaXVzIHdhcyBhIG1hbiB3aG8gY2x1bmcgdG8gaGlzIHB1cnBvc2UsIGFuZCB0ZXN0ZWQgZXZlcnkgcGxhbiBhbmQgbWV0aG9kIG9mIGF0dGFjazsgc2VlaW5nLCBob3dldmVyLCB0aGF0IGhpcyBhcm15LCBieSByZWFzb24gb2YgdGhlaXIgZm9ybWVyIGxpY2Vuc2UsIHdhcyBpbXBhdGllbnQgb2YgZGVsYXksIGFuZCBpbmNsaW5lZCB0byBkaWN0YXRlIHRvIHRoZWlyIGdlbmVyYWwgbWFueSBpbXByYWN0aWNhYmxlIHRoaW5ncywgaGUgcmVidWtlZCB0aGVtLCBhbmQgaW5zdHJ1Y3RlZCB0aGVtIHRvIHRha2Ugbm8gdGhvdWdodCBvciBjb25jZXJuIGZvciBhbnl0aGluZywgZXhjZXB0IGhvdyBlYWNoIG1hbiBtaWdodCBrZWVwIGhpbXNlbGYgYW5kIGhpcyBhcm1vdXIgaW4gcmVhZGluZXNzIGZvciBhY3Rpb24sIGFuZCBwbHkgaGlzIHN3b3JkIGluIFJvbWFuIGZhc2hpb24sIHdoZW4gdGhlaXIgZ2VuZXJhbCBnYXZlIHRoZW0gdGhlIG9wcG9ydHVuaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5GdXJ0aGVybW9yZSwgaGUgb3JkZXJlZCB0aGUgbmlnaHQgd2F0Y2htZW4gdG8ga2VlcCB3YXRjaCB3aXRob3V0IHRoZWlyIHNwZWFycywgd2l0aCB0aGUgaWRlYSB0aGF0IHRoZXkgd291bGQgYmUgbW9yZSBvbiB0aGUgYWxlcnQgYW5kIHdvdWxkIHN0cnVnZ2xlIG1vcmUgc3VjY2Vzc2Z1bGx5IGFnYWluc3Qgc2xlZXAsIGlmIHRoZXkgd2VyZSB1bmFibGUgdG8gZGVmZW5kIHRoZW1zZWx2ZXMgYWdhaW5zdCB0aGVpciBlbmVtaWVzIHdoZW4gdGhleSBhcHByb2FjaGVkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['13.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFlbWlsaXVzLCBjb21pbmcgYWdhaW5zdCBzdWNoIGFuIGFkdmVyc2FyeSwgc2Nvcm5lZCBoaW0gaW5kZWVkLCBidXQgYWRtaXJlZCBoaXMgcHJlcGFyYXRpb25zIGFuZCBoaXMgYXJteS4gRm9yIFBlcnNldXMgaGFkIGZvdXIgdGhvdXNhbmQgaG9yc2VtZW4sIGFuZCBub3QgbXVjaCBmZXdlciB0aGFuIGZvcnR5IHRob3VzYW5kIGhlYXZ5LWFybWVkIGZvb3RtZW4uIEFuZCBwbGFudGluZyBoaW1zZWxmIHdpdGggdGhlIHNlYSBiZWhpbmQgaGltLCBhbG9uZyB0aGUgZm9vdC1oaWxscyBvZiBNb3VudCBPbHltcHVzLCBvbiBncm91bmQgd2hpY2ggbm93aGVyZSBhZmZvcmRlZCBhbiBhcHByb2FjaCwgYW5kIHdoaWNoIGhhZCBiZWVuIGZvcnRpZmllZCBvbiBhbGwgc2lkZXMgYnkgaGltIHdpdGggYnVsd2Fya3MgYW5kIG91dHdvcmtzIG9mIHdvb2QsIGhlIGxheSBpbiBncmVhdCBzZWN1cml0eSwgdGhpbmtpbmcgdGhhdCBieSBkZWxheSBhbmQgZXhwZW5zZSBoZSB3b3VsZCB3ZWFyIG91dCBBZW1pbGl1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZW1pbGl1cyB3YXMgYSBtYW4gd2hvIGNsdW5nIHRvIGhpcyBwdXJwb3NlLCBhbmQgdGVzdGVkIGV2ZXJ5IHBsYW4gYW5kIG1ldGhvZCBvZiBhdHRhY2s7IHNlZWluZywgaG93ZXZlciwgdGhhdCBoaXMgYXJteSwgYnkgcmVhc29uIG9mIHRoZWlyIGZvcm1lciBsaWNlbnNlLCB3YXMgaW1wYXRpZW50IG9mIGRlbGF5LCBhbmQgaW5jbGluZWQgdG8gZGljdGF0ZSB0byB0aGVpciBnZW5lcmFsIG1hbnkgaW1wcmFjdGljYWJsZSB0aGluZ3MsIGhlIHJlYnVrZWQgdGhlbSwgYW5kIGluc3RydWN0ZWQgdGhlbSB0byB0YWtlIG5vIHRob3VnaHQgb3IgY29uY2VybiBmb3IgYW55dGhpbmcsIGV4Y2VwdCBob3cgZWFjaCBtYW4gbWlnaHQga2VlcCBoaW1zZWxmIGFuZCBoaXMgYXJtb3VyIGluIHJlYWRpbmVzcyBmb3IgYWN0aW9uLCBhbmQgcGx5IGhpcyBzd29yZCBpbiBSb21hbiBmYXNoaW9uLCB3aGVuIHRoZWlyIGdlbmVyYWwgZ2F2ZSB0aGVtIHRoZSBvcHBvcnR1bml0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['13.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZ1cnRoZXJtb3JlLCBoZSBvcmRlcmVkIHRoZSBuaWdodCB3YXRjaG1lbiB0byBrZWVwIHdhdGNoIHdpdGhvdXQgdGhlaXIgc3BlYXJzLCB3aXRoIHRoZSBpZGVhIHRoYXQgdGhleSB3b3VsZCBiZSBtb3JlIG9uIHRoZSBhbGVydCBhbmQgd291bGQgc3RydWdnbGUgbW9yZSBzdWNjZXNzZnVsbHkgYWdhaW5zdCBzbGVlcCwgaWYgdGhleSB3ZXJlIHVuYWJsZSB0byBkZWZlbmQgdGhlbXNlbHZlcyBhZ2FpbnN0IHRoZWlyIGVuZW1pZXMgd2hlbiB0aGV5IGFwcHJvYWNoZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBoaXMgbWVuIHdlcmUgYW5ub3llZCBlc3BlY2lhbGx5IGJ5IHRoZSBsYWNrIG9mIGRyaW5raW5nIHdhdGVyLCBzaW5jZSBvbmx5IGEgbGl0dGxlIG9mIGl0IGlzc3VlZCBmb3J0aCBhbmQgY29sbGVjdGVkIGluIHBvb2xzIGF0IHRoZSB2ZXJ5IGVkZ2Ugb2YgdGhlIHNlYSwgYW5kIHRoYXQgd2FzIGJhZC4gQWVtaWxpdXMsIHRoZXJlZm9yZSwgc2VlaW5nIHRoYXQgdGhlIGxvZnR5IGFuZCB3b29kZWQgbW91bnRhaW4gb2YgT2x5bXB1cyBsYXkgbmVhciwgYW5kIGp1ZGdpbmcgZnJvbSB0aGUgZ3JlZW5uZXNzIG9mIGl0cyB0cmVlcyB0aGF0IHRoZXJlIHdlcmUgdmVpbnMgb2Ygd2F0ZXIgY291cnNpbmcgdW5kZXIgZ3JvdW5kLCBkdWcgYSBudW1iZXIgb2YgdmVudHMgYW5kIHdlbGxzIGZvciB0aGVtIGFsb25nIHRoZSBmb290IG9mIHRoZSBtb3VudGFpbi4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2Ugd2VyZSBhdCBvbmNlIGZpbGxlZCB3aXRoIHN0cmVhbXMgb2YgcHVyZSB3YXRlciwgd2hpY2gsIHVuZGVyIHRoZSB3ZWlnaHQgYW5kIGltcHVsc2Ugb2YgdGhlIHByZXNzdXJlIHRoYXQgd2FzIHVwb24gdGhlbSwgZGlzY2hhcmdlZCB0aGVtc2VsdmVzIGludG8gdGhlIHZhY3V1bSBhZmZvcmRlZC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['14.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IGhpcyBtZW4gd2VyZSBhbm5veWVkIGVzcGVjaWFsbHkgYnkgdGhlIGxhY2sgb2YgZHJpbmtpbmcgd2F0ZXIsIHNpbmNlIG9ubHkgYSBsaXR0bGUgb2YgaXQgaXNzdWVkIGZvcnRoIGFuZCBjb2xsZWN0ZWQgaW4gcG9vbHMgYXQgdGhlIHZlcnkgZWRnZSBvZiB0aGUgc2VhLCBhbmQgdGhhdCB3YXMgYmFkLiBBZW1pbGl1cywgdGhlcmVmb3JlLCBzZWVpbmcgdGhhdCB0aGUgbG9mdHkgYW5kIHdvb2RlZCBtb3VudGFpbiBvZiBPbHltcHVzIGxheSBuZWFyLCBhbmQganVkZ2luZyBmcm9tIHRoZSBncmVlbm5lc3Mgb2YgaXRzIHRyZWVzIHRoYXQgdGhlcmUgd2VyZSB2ZWlucyBvZiB3YXRlciBjb3Vyc2luZyB1bmRlciBncm91bmQsIGR1ZyBhIG51bWJlciBvZiB2ZW50cyBhbmQgd2VsbHMgZm9yIHRoZW0gYWxvbmcgdGhlIGZvb3Qgb2YgdGhlIG1vdW50YWluLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['14.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgYXQgb25jZSBmaWxsZWQgd2l0aCBzdHJlYW1zIG9mIHB1cmUgd2F0ZXIsIHdoaWNoLCB1bmRlciB0aGUgd2VpZ2h0IGFuZCBpbXB1bHNlIG9mIHRoZSBwcmVzc3VyZSB0aGF0IHdhcyB1cG9uIHRoZW0sIGRpc2NoYXJnZWQgdGhlbXNlbHZlcyBpbnRvIHRoZSB2YWN1dW0gYWZmb3JkZWQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+QW5kIHlldCBzb21lIGRlbnkgdGhhdCBzdG9yZXMgb2YgcmVhZHkgd2F0ZXIgbGllIGhpZGRlbiBhd2F5IGJlbmVhdGggdGhlIHBsYWNlcyBmcm9tIHdoaWNoIHNwcmluZ3MgZmxvdywgYW5kIHRoYXQgdGhleSBtZXJlbHkgY29tZSB0byBsaWdodCBvciBmb3JjZSBhIHBhc3NhZ2Ugd2hlbiB0aGV5IGlzc3VlIGZvcnRoOyB0aGV5IGhvbGQgcmF0aGVyIHRoYXQgdGhlIHdhdGVyIGlzIGdlbmVyYXRlZCBhbmQgY29tZXMgaW50byBleGlzdGVuY2UgdGhlbiBhbmQgdGhlcmUgdGhyb3VnaCB0aGUgbGlxdWVmYWN0aW9uIG9mIG1hdHRlciwgYW5kIHRoYXQgbW9pc3QgdmFwb3VyIGlzIGxpcXVlZmllZCBieSBkZW5zaXR5IGFuZCBjb2xkLCB3aGVuZXZlciwgdGhhdCBpcywgaXQgaXMgY29tcHJlc3NlZCBpbiB0aGUgZGVwdGhzIG9mIGVhcnRoIGFuZCBiZWNvbWVzIGZsdWlkLiAKCQkJCTxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciwgdGhleSBhcmd1ZSwganVzdCBhcyB0aGUgYnJlYXN0cyBvZiB3b21lbiBhcmUgbm90LCBsaWtlIHZlc3NlbHMsIGZ1bGwgb2YgcmVhZHkgbWlsayB3aGljaCBmbG93cyBvdXQsIGJ1dCBieSBjb252ZXJ0aW5nIHRoZSBub3VyaXNobWVudCB0aGF0IGlzIGluIHRoZW0gcHJvZHVjZSBtaWxrIGFuZCBzdHJhaW4gaXQgb3V0OyBzbyB0aG9zZSBwbGFjZXMgaW4gdGhlIGdyb3VuZCB3aGljaCBhcmUgY2hpbGx5IGFuZCBmdWxsIG9mIHNwcmluZ3MgZG8gbm90IGhhdmUgaGlkZGVuIHdhdGVyLCBub3IgcmVzZXJ2b2lycyB3aGljaCBzZW5kIGZvcnRoIHRoZSBjdXJyZW50cyBhbmQgZGVlcCB3YXRlcnMgb2YgYWxsIG91ciByaXZlcnMgZnJvbSBhIHNvdXJjZSB0aGF0IGlzIHJlYWR5IGF0IGhhbmQsIGJ1dCBieSBmb3JjaWJseSBjb21wcmVzc2luZyBhbmQgY29uZGVuc2luZyB2YXBvdXIgYW5kIGFpciwgdGhleSBjb252ZXJ0IHRoZW0gaW50byB3YXRlci4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QXQgYWxsIGV2ZW50cywgdGhvc2UgcGxhY2VzIHdoaWNoIGFyZSBkdWcgb3BlbiBndXNoIGFuZCBmbG93IG1vcmUgZnJlZWx5IGluIHJlc3BvbnNlIHRvIHN1Y2ggbWFuaXB1bGF0aW9uLCBqdXN0IGFzIHRoZSBicmVhc3RzIG9mIHdvbWVuIGRvIGluIHJlc3BvbnNlIHRvIHN1Y2tpbmcsIGJlY2F1c2UgdGhleSBtb2lzdGVuIGFuZCBzb2Z0ZW4gdGhlIHZhcG91cnM7IHdoZXJlYXMgYWxsIHBsYWNlcyBpbiB0aGUgZ3JvdW5kIHdoaWNoIGFyZSBwYWNrZWQgdGlnaHQgYW5kIHVud29ya2VkLCBhcmUgaW5jYXBhYmxlIG9mIGdlbmVyYXRpbmcgd2F0ZXIsIHNpbmNlIHRoZXkgaGF2ZSBub3QgYmVlbiBzdWJqZWN0ZWQgdG8gdGhlIGFnaXRhdGlvbiB3aGljaCBwcm9kdWNlcyBtb2lzdHVyZS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRob3NlIHdobyBob2xkIHRoaXMgZG9jdHJpbmUgZ2l2ZSB0aGUgc2NlcHRpY2FsIG9jY2FzaW9uIHRvIG9iamVjdCB0aGF0LCBvbiB0aGlzIHJlYXNvbmluZywgdGhlcmUgaXMgbm8gYmxvb2QgaW4gbGl2aW5nIGNyZWF0dXJlcywgYnV0IGl0IGlzIGdlbmVyYXRlZCBpbiByZXNwb25zZSB0byB3b3VuZHMgYnkgYSB0cmFuc2Zvcm1hdGlvbiBvZiBzb21lIHZhcG91ciBvciBmbGVzaCwgd2hpY2ggY2F1c2VzIGl0cyBsaXF1ZWZhY3Rpb24gYW5kIGZsb3cuIE1vcmVvdmVyLCB0aGV5IGFyZSByZWZ1dGVkIGJ5IHRoZSBleHBlcmllbmNlIG9mIG1lbiB3aG8gZGlnIG1pbmVzLCBlaXRoZXIgZm9yIHNpZWdlcyBvciBmb3IgbWV0YWxzLCBhbmQgaW4gdGhlIGRlcHRocyBlbmNvdW50ZXIgcml2ZXJzIG9mIHdhdGVyLCB3aGljaCBhcmUgbm90IGdyYWR1YWxseSBjb2xsZWN0ZWQsIGFzIG11c3QgbmF0dXJhbGx5IGJlIHRoZSBjYXNlIGlmIHRoZXkgY29tZSBpbnRvIGV4aXN0ZW5jZSBhdCB0aGUgaW5zdGFudCB0aGF0IHRoZSBlYXJ0aCBpcyBhZ2l0YXRlZCwgYnV0IHBvdXIgZm91cnRoIGluIGEgZ3JlYXQgbWFzcy4gQW5kIGFnYWluLCB3aGVuIGEgbW91bnRhaW4gb3Igcm9jayBpcyBzbWl0dGVuIGFzdW5kZXIsIGEgZmllcmNlIHRvcnJlbnQgb2Ygd2F0ZXIgb2Z0ZW4gZ3VzaGVzIGZvcnRoLCBhbmQgdGhlbiBjZWFzZXMgZW50aXJlbHkuIFNvIG11Y2ggb24gdGhpcyBoZWFkLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['14.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciwgdGhleSBhcmd1ZSwganVzdCBhcyB0aGUgYnJlYXN0cyBvZiB3b21lbiBhcmUgbm90LCBsaWtlIHZlc3NlbHMsIGZ1bGwgb2YgcmVhZHkgbWlsayB3aGljaCBmbG93cyBvdXQsIGJ1dCBieSBjb252ZXJ0aW5nIHRoZSBub3VyaXNobWVudCB0aGF0IGlzIGluIHRoZW0gcHJvZHVjZSBtaWxrIGFuZCBzdHJhaW4gaXQgb3V0OyBzbyB0aG9zZSBwbGFjZXMgaW4gdGhlIGdyb3VuZCB3aGljaCBhcmUgY2hpbGx5IGFuZCBmdWxsIG9mIHNwcmluZ3MgZG8gbm90IGhhdmUgaGlkZGVuIHdhdGVyLCBub3IgcmVzZXJ2b2lycyB3aGljaCBzZW5kIGZvcnRoIHRoZSBjdXJyZW50cyBhbmQgZGVlcCB3YXRlcnMgb2YgYWxsIG91ciByaXZlcnMgZnJvbSBhIHNvdXJjZSB0aGF0IGlzIHJlYWR5IGF0IGhhbmQsIGJ1dCBieSBmb3JjaWJseSBjb21wcmVzc2luZyBhbmQgY29uZGVuc2luZyB2YXBvdXIgYW5kIGFpciwgdGhleSBjb252ZXJ0IHRoZW0gaW50byB3YXRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['14.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkF0IGFsbCBldmVudHMsIHRob3NlIHBsYWNlcyB3aGljaCBhcmUgZHVnIG9wZW4gZ3VzaCBhbmQgZmxvdyBtb3JlIGZyZWVseSBpbiByZXNwb25zZSB0byBzdWNoIG1hbmlwdWxhdGlvbiwganVzdCBhcyB0aGUgYnJlYXN0cyBvZiB3b21lbiBkbyBpbiByZXNwb25zZSB0byBzdWNraW5nLCBiZWNhdXNlIHRoZXkgbW9pc3RlbiBhbmQgc29mdGVuIHRoZSB2YXBvdXJzOyB3aGVyZWFzIGFsbCBwbGFjZXMgaW4gdGhlIGdyb3VuZCB3aGljaCBhcmUgcGFja2VkIHRpZ2h0IGFuZCB1bndvcmtlZCwgYXJlIGluY2FwYWJsZSBvZiBnZW5lcmF0aW5nIHdhdGVyLCBzaW5jZSB0aGV5IGhhdmUgbm90IGJlZW4gc3ViamVjdGVkIHRvIHRoZSBhZ2l0YXRpb24gd2hpY2ggcHJvZHVjZXMgbW9pc3R1cmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['14.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aG9zZSB3aG8gaG9sZCB0aGlzIGRvY3RyaW5lIGdpdmUgdGhlIHNjZXB0aWNhbCBvY2Nhc2lvbiB0byBvYmplY3QgdGhhdCwgb24gdGhpcyByZWFzb25pbmcsIHRoZXJlIGlzIG5vIGJsb29kIGluIGxpdmluZyBjcmVhdHVyZXMsIGJ1dCBpdCBpcyBnZW5lcmF0ZWQgaW4gcmVzcG9uc2UgdG8gd291bmRzIGJ5IGEgdHJhbnNmb3JtYXRpb24gb2Ygc29tZSB2YXBvdXIgb3IgZmxlc2gsIHdoaWNoIGNhdXNlcyBpdHMgbGlxdWVmYWN0aW9uIGFuZCBmbG93LiBNb3Jlb3ZlciwgdGhleSBhcmUgcmVmdXRlZCBieSB0aGUgZXhwZXJpZW5jZSBvZiBtZW4gd2hvIGRpZyBtaW5lcywgZWl0aGVyIGZvciBzaWVnZXMgb3IgZm9yIG1ldGFscywgYW5kIGluIHRoZSBkZXB0aHMgZW5jb3VudGVyIHJpdmVycyBvZiB3YXRlciwgd2hpY2ggYXJlIG5vdCBncmFkdWFsbHkgY29sbGVjdGVkLCBhcyBtdXN0IG5hdHVyYWxseSBiZSB0aGUgY2FzZSBpZiB0aGV5IGNvbWUgaW50byBleGlzdGVuY2UgYXQgdGhlIGluc3RhbnQgdGhhdCB0aGUgZWFydGggaXMgYWdpdGF0ZWQsIGJ1dCBwb3VyIGZvdXJ0aCBpbiBhIGdyZWF0IG1hc3MuIEFuZCBhZ2Fpbiwgd2hlbiBhIG1vdW50YWluIG9yIHJvY2sgaXMgc21pdHRlbiBhc3VuZGVyLCBhIGZpZXJjZSB0b3JyZW50IG9mIHdhdGVyIG9mdGVuIGd1c2hlcyBmb3J0aCwgYW5kIHRoZW4gY2Vhc2VzIGVudGlyZWx5LiBTbyBtdWNoIG9uIHRoaXMgaGVhZC4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjE1IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWVtaWxpdXMga2VwdCBzdGlsbCBmb3Igc2V2ZXJhbCBkYXlzLCBhbmQgdGhleSBzYXkgdGhhdCBuZXZlciB3YXMgdGhlcmUgc3VjaCBxdWlldCB3aGVuIGFybWllcyBvZiBzdWNoIHNpemUgaGFkIGNvbWUgc28gY2xvc2UgdG9nZXRoZXIuIEJ1dCB3aGVuLCBhcyBoZSB3YXMgdHJ5aW5nIGFuZCBjb25zaWRlcmluZyBldmVyeXRoaW5nLCBoZSBsZWFybmVkIHRoYXQgdGhlcmUgd2FzIG9uZSBwYXNzYWdlIGFuZCBvbmUgb25seSB0aGF0IHN0aWxsIHJlbWFpbmVkIHVuZ3VhcmRlZCwgbmFtZWx5LCB0aGUgb25lIHRocm91Z2ggUGVycmhhZWJpYSBwYXN0IHRoZSBQeXRoaXVtIGFuZCBQZXRyYSwgaGUgY29uY2VpdmVkIG1vcmUgaG9wZSBmcm9tIHRoZSBmYWN0IHRoYXQgdGhlIHBsYWNlIHdhcyBsZWZ0IHVuZ3VhcmRlZCB0aGFuIGZlYXIgZnJvbSB0aGUgcm91Z2huZXNzIGFuZCBkaWZmaWN1bHR5IG9mIGl0IHdoaWNoIGNhdXNlZCBpdCB0byBiZSBzbyBsZWZ0LCBhbmQgaGVsZCBhIGNvdW5jaWwgb2Ygd2FyIHVwb24gdGhlIG1hdHRlci4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW1vbmcgdGhvc2UgcHJlc2VudCBhdCB0aGUgY291bmNpbCwgU2NpcGlvLCBzdXJuYW1lZCBOYXNpY2EsIGEgc29uLWluLWxhdyBvZiBTY2lwaW8gQWZyaWNhbnVzLCBhbmQgYWZ0ZXJ3YXJkcyBvZiB0aGUgZ3JlYXRlc3QgaW5mbHVlbmNlIGluIHRoZSBzZW5hdGUsIHdhcyBmaXJzdCB0byBvZmZlciBoaW1zZWxmIGFzIGxlYWRlciBvZiB0aGUgZW52ZWxvcGluZyBmb3JjZS4gQW5kIHNlY29uZCwgRmFiaXVzIE1heGltdXMsIHRoZSBlbGRlc3Qgb2YgdGhlIHNvbnMgb2YgQWVtaWxpdXMsIHRob3VnaCBoZSB3YXMgc3RpbGwgYSB5b3VuZyBtYW4sIGVhZ2VybHkgdm9sdW50ZWVyZWQuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFlbWlsaXVzLCBhY2NvcmRpbmdseSwgZGVsaWdodGVkLCBnYXZlIHRoZW0sIG5vdCBhcyBtYW55IG1lbiBhcyBQb2x5Yml1cyBzdGF0ZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGxvc3QgcG9ydGlvbiBvZiBCb29rIFhYSVguPC9ub3RlPiBidXQgYXMgbWFueSBhcyBOYXNpY2EgaGltc2VsZiBzYXlzIHRoZXkgdG9vaywgaW4gYSBzaG9ydCBsZXR0ZXIgd2hpY2ggaGUgd3JvdGUgY29uY2VybmluZyB0aGVzZSBleHBsb2l0cyB0byBvbmUgb2YgdGhlIGtpbmdzLCB0aGF0IGlzLCB0aHJlZSB0aG91c2FuZCBvZiBoaXMgSXRhbGlhbnMgd2hvIHdlcmUgbm90IFJvbWFucywgYW5kIGhpcyBsZWZ0IHdpbmcgbnVtYmVyaW5nIGZpdmUgdGhvdXNhbmQuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGFkZGl0aW9uIHRvIHRoZXNlLCBOYXNpY2EgdG9vayBhIGh1bmRyZWQgYW5kIHR3ZW50eSBob3JzZW1lbiwgYmVzaWRlcyB0d28gaHVuZHJlZCBvZiB0aGUgbWl4ZWQgVGhyYWNpYW5zIGFuZCBDcmV0YW5zIHdpdGggSGFycGFsdXMsIHNldCBvdXQgb24gdGhlIHJvYWQgdG93YXJkcyB0aGUgc2VhLCBhbmQgZW5jYW1wZWQgYnkgdGhlIEhlcmFjbGV1bSwgYXMgdGhvdWdoIGhlIGludGVuZGVkIHRvIHNhaWwgcm91bmQgYnkgc2VhIGFuZCBlbnZlbG9wZSB0aGUgY2FtcCBvZiB0aGUgZW5lbXkuIAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhpcyBzb2xkaWVycyBoYWQgdGFrZW4gc3VwcGVyIGFuZCBkYXJrbmVzcyBoYWQgY29tZSwgaGUgdG9sZCBoaXMgY2hpZWYgb2ZmaWNlcnMgaGlzIHJlYWwgZGVzaWduLCBhbmQgdGhlbiBsZWQgaGlzIGZvcmNlcyBieSBuaWdodCBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLCBhd2F5IGZyb20gdGhlIHNlYSwgYW5kIGhhbHRlZCBiZWxvdyB0aGUgUHl0aGl1bSwgd2hlcmUgaGUgZ2F2ZSBoaXMgYXJteSBhIHJlc3QuIEZyb20gdGhpcyBwb2ludCBPbHltcHVzIHJpc2VzIHRvIGEgaGVpZ2h0IG9mIG1vcmUgdGhhbiB0ZW4gZnVybG9uZ3MsIGFzIGlzIHNpZ25pZmllZCBpbiBhbiBpbnNjcmlwdGlvbiBieSB0aGUgbWFuIHdobyBtZWFzdXJlZCBpdDrigJQKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHF1b3RlIHJlbmQ9ImJsb2NrcXVvdGUiPgoJCQkJCSAgICAgICAgICA8bD5UaGUgc2FjcmVkIHBlYWsgb2YgT2x5bXB1cywgYXQgQXBvbGxvJ3MgUHl0aGl1bSwgaGFzIGEgaGVpZ2h0LCBpbiBwZXJwZW5kaWN1bGFyIG1lYXN1cmVtZW50LCBvZiB0ZW4gZnVsbCBmdXJsb25ncywgYW5kIGJlc2lkZXMsIGEgaHVuZHJlZCBmZWV0IGxhY2tpbmcgb25seSBmb3VyLiBJdCB3YXMgdGhlIHNvbiBvZiBFdW1lbHVzIHdobyBtZWFzdXJlZCB0aGUgZGlzdGFuY2UsIFhlbmFnb3Jhczsgc28gZmFyZSB0aGVlIHdlbGwsIE8gS2luZywgYW5kIGJlIHByb3BpdGlvdXMgaW4gdGh5IGdpZnRzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQW5kIHlldCB0aGUgZ2VvbWV0cmljaWFucyBzYXkgdGhhdCBubyBtb3VudGFpbiBoYXMgYSBoZWlnaHQsIGFuZCBubyBzZWEgYSBkZXB0aCwgb2YgbW9yZSB0aGFuIHRlbiBmdXJsb25ncy4gSXQgd291bGQgc2VlbSwgaG93ZXZlciwgdGhhdCBYZW5hZ29yYXMgdG9vayBoaXMgbWVhc3VyZW1lbnQsIG5vdCBjYXJlbGVzc2x5LCBidXQgYWNjb3JkaW5nIHRvIHJ1bGUgYW5kIHdpdGggaW5zdHJ1bWVudHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWVtaWxpdXMga2VwdCBzdGlsbCBmb3Igc2V2ZXJhbCBkYXlzLCBhbmQgdGhleSBzYXkgdGhhdCBuZXZlciB3YXMgdGhlcmUgc3VjaCBxdWlldCB3aGVuIGFybWllcyBvZiBzdWNoIHNpemUgaGFkIGNvbWUgc28gY2xvc2UgdG9nZXRoZXIuIEJ1dCB3aGVuLCBhcyBoZSB3YXMgdHJ5aW5nIGFuZCBjb25zaWRlcmluZyBldmVyeXRoaW5nLCBoZSBsZWFybmVkIHRoYXQgdGhlcmUgd2FzIG9uZSBwYXNzYWdlIGFuZCBvbmUgb25seSB0aGF0IHN0aWxsIHJlbWFpbmVkIHVuZ3VhcmRlZCwgbmFtZWx5LCB0aGUgb25lIHRocm91Z2ggUGVycmhhZWJpYSBwYXN0IHRoZSBQeXRoaXVtIGFuZCBQZXRyYSwgaGUgY29uY2VpdmVkIG1vcmUgaG9wZSBmcm9tIHRoZSBmYWN0IHRoYXQgdGhlIHBsYWNlIHdhcyBsZWZ0IHVuZ3VhcmRlZCB0aGFuIGZlYXIgZnJvbSB0aGUgcm91Z2huZXNzIGFuZCBkaWZmaWN1bHR5IG9mIGl0IHdoaWNoIGNhdXNlZCBpdCB0byBiZSBzbyBsZWZ0LCBhbmQgaGVsZCBhIGNvdW5jaWwgb2Ygd2FyIHVwb24gdGhlIG1hdHRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFtb25nIHRob3NlIHByZXNlbnQgYXQgdGhlIGNvdW5jaWwsIFNjaXBpbywgc3VybmFtZWQgTmFzaWNhLCBhIHNvbi1pbi1sYXcgb2YgU2NpcGlvIEFmcmljYW51cywgYW5kIGFmdGVyd2FyZHMgb2YgdGhlIGdyZWF0ZXN0IGluZmx1ZW5jZSBpbiB0aGUgc2VuYXRlLCB3YXMgZmlyc3QgdG8gb2ZmZXIgaGltc2VsZiBhcyBsZWFkZXIgb2YgdGhlIGVudmVsb3BpbmcgZm9yY2UuIEFuZCBzZWNvbmQsIEZhYml1cyBNYXhpbXVzLCB0aGUgZWxkZXN0IG9mIHRoZSBzb25zIG9mIEFlbWlsaXVzLCB0aG91Z2ggaGUgd2FzIHN0aWxsIGEgeW91bmcgbWFuLCBlYWdlcmx5IHZvbHVudGVlcmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFlbWlsaXVzLCBhY2NvcmRpbmdseSwgZGVsaWdodGVkLCBnYXZlIHRoZW0sIG5vdCBhcyBtYW55IG1lbiBhcyBQb2x5Yml1cyBzdGF0ZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIGEgbG9zdCBwb3J0aW9uIG9mIEJvb2sgWFhJWC48L25vdGU+IGJ1dCBhcyBtYW55IGFzIE5hc2ljYSBoaW1zZWxmIHNheXMgdGhleSB0b29rLCBpbiBhIHNob3J0IGxldHRlciB3aGljaCBoZSB3cm90ZSBjb25jZXJuaW5nIHRoZXNlIGV4cGxvaXRzIHRvIG9uZSBvZiB0aGUga2luZ3MsIHRoYXQgaXMsIHRocmVlIHRob3VzYW5kIG9mIGhpcyBJdGFsaWFucyB3aG8gd2VyZSBub3QgUm9tYW5zLCBhbmQgaGlzIGxlZnQgd2luZyBudW1iZXJpbmcgZml2ZSB0aG91c2FuZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['15.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIGFkZGl0aW9uIHRvIHRoZXNlLCBOYXNpY2EgdG9vayBhIGh1bmRyZWQgYW5kIHR3ZW50eSBob3JzZW1lbiwgYmVzaWRlcyB0d28gaHVuZHJlZCBvZiB0aGUgbWl4ZWQgVGhyYWNpYW5zIGFuZCBDcmV0YW5zIHdpdGggSGFycGFsdXMsIHNldCBvdXQgb24gdGhlIHJvYWQgdG93YXJkcyB0aGUgc2VhLCBhbmQgZW5jYW1wZWQgYnkgdGhlIEhlcmFjbGV1bSwgYXMgdGhvdWdoIGhlIGludGVuZGVkIHRvIHNhaWwgcm91bmQgYnkgc2VhIGFuZCBlbnZlbG9wZSB0aGUgY2FtcCBvZiB0aGUgZW5lbXkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['15.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIGhpcyBzb2xkaWVycyBoYWQgdGFrZW4gc3VwcGVyIGFuZCBkYXJrbmVzcyBoYWQgY29tZSwgaGUgdG9sZCBoaXMgY2hpZWYgb2ZmaWNlcnMgaGlzIHJlYWwgZGVzaWduLCBhbmQgdGhlbiBsZWQgaGlzIGZvcmNlcyBieSBuaWdodCBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLCBhd2F5IGZyb20gdGhlIHNlYSwgYW5kIGhhbHRlZCBiZWxvdyB0aGUgUHl0aGl1bSwgd2hlcmUgaGUgZ2F2ZSBoaXMgYXJteSBhIHJlc3QuIEZyb20gdGhpcyBwb2ludCBPbHltcHVzIHJpc2VzIHRvIGEgaGVpZ2h0IG9mIG1vcmUgdGhhbiB0ZW4gZnVybG9uZ3MsIGFzIGlzIHNpZ25pZmllZCBpbiBhbiBpbnNjcmlwdGlvbiBieSB0aGUgbWFuIHdobyBtZWFzdXJlZCBpdDrigJQKCQkJCTwvdHJhbnNsYXRpb24+"
translation['15.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cXVvdGUgY2xhc3M9InRyYW5zbGF0aW9uIiByZW5kPSJibG9ja3F1b3RlIj4KCQkJCQkgICAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgc2FjcmVkIHBlYWsgb2YgT2x5bXB1cywgYXQgQXBvbGxvJ3MgUHl0aGl1bSwgaGFzIGEgaGVpZ2h0LCBpbiBwZXJwZW5kaWN1bGFyIG1lYXN1cmVtZW50LCBvZiB0ZW4gZnVsbCBmdXJsb25ncywgYW5kIGJlc2lkZXMsIGEgaHVuZHJlZCBmZWV0IGxhY2tpbmcgb25seSBmb3VyLiBJdCB3YXMgdGhlIHNvbiBvZiBFdW1lbHVzIHdobyBtZWFzdXJlZCB0aGUgZGlzdGFuY2UsIFhlbmFnb3Jhczsgc28gZmFyZSB0aGVlIHdlbGwsIE8gS2luZywgYW5kIGJlIHByb3BpdGlvdXMgaW4gdGh5IGdpZnRzLjwvbD4KCQkJCSAgICAgICAgPC9xdW90ZT4KCQkJCSAgICAgICAgPGwgY2xhc3M9InRyYW5zbGF0aW9uIj5UaGUgc2FjcmVkIHBlYWsgb2YgT2x5bXB1cywgYXQgQXBvbGxvJ3MgUHl0aGl1bSwgaGFzIGEgaGVpZ2h0LCBpbiBwZXJwZW5kaWN1bGFyIG1lYXN1cmVtZW50LCBvZiB0ZW4gZnVsbCBmdXJsb25ncywgYW5kIGJlc2lkZXMsIGEgaHVuZHJlZCBmZWV0IGxhY2tpbmcgb25seSBmb3VyLiBJdCB3YXMgdGhlIHNvbiBvZiBFdW1lbHVzIHdobyBtZWFzdXJlZCB0aGUgZGlzdGFuY2UsIFhlbmFnb3Jhczsgc28gZmFyZSB0aGVlIHdlbGwsIE8gS2luZywgYW5kIGJlIHByb3BpdGlvdXMgaW4gdGh5IGdpZnRzLjwvbD4KCQkJCSAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['15.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJQW5kIHlldCB0aGUgZ2VvbWV0cmljaWFucyBzYXkgdGhhdCBubyBtb3VudGFpbiBoYXMgYSBoZWlnaHQsIGFuZCBubyBzZWEgYSBkZXB0aCwgb2YgbW9yZSB0aGFuIHRlbiBmdXJsb25ncy4gSXQgd291bGQgc2VlbSwgaG93ZXZlciwgdGhhdCBYZW5hZ29yYXMgdG9vayBoaXMgbWVhc3VyZW1lbnQsIG5vdCBjYXJlbGVzc2x5LCBidXQgYWNjb3JkaW5nIHRvIHJ1bGUgYW5kIHdpdGggaW5zdHJ1bWVudHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkhlcmUsIHRoZW4sIE5hc2ljYSBwYXNzZWQgdGhlIG5pZ2h0OyBidXQgdG8gUGVyc2V1cywgd2hvIGRpZCBub3QgaW5mZXIgd2hhdCB3YXMgZ29pbmcgb24gYmVjYXVzZSBoZSBzYXcgQWVtaWxpdXMgcmVtYWluaW5nIHF1aWV0bHkgaW4gaGlzIHBvc2l0aW9uLCB0aGVyZSBjYW1lIGEgQ3JldGFuIGRlc2VydGVyIHdobyBoYWQgcnVuIGF3YXkgb24gdGhlIG1hcmNoLCBicmluZ2luZyBoaW0gbmV3cyBvZiB0aGUgY2lyY3VpdCB3aGljaCB0aGUgUm9tYW5zIGhhZCB0YWtlbi4gVGhvdWdoIFBlcnNldXMgd2FzIGNvbmZvdW5kZWQgYXQgdGhpcywgaGUgZGlkIG5vdCBtb3ZlIGhpcyBjYW1wLCBidXQgc2VudCBvdXQgdGVuIHRob3VzYW5kIGZvcmVpZ24gbWVyY2VuYXJpZXMgYW5kIHR3byB0aG91c2FuZCBNYWNlZG9uaWFucyB1bmRlciBNaWxvLCB3aXRoIG9yZGVycyB0byBtYWtlIGhhc3RlIGFuZCBvY2N1cHkgdGhlIHBhc3Nlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgbWVuLCBhY2NvcmRpbmcgdG8gUG9seWJpdXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGxvc3QgcG9ydGlvbiBvZiBCb29rIFhYSVguPC9ub3RlPiB3ZXJlIHN0aWxsIGFzbGVlcCB3aGVuIHRoZSBSb21hbnMgZmVsbCB1cG9uIHRoZW07IGJ1dCBOYXNpY2Egc2F5cyB0aGF0IGEgc2hhcnAgYW5kIHBlcmlsb3VzIGNvbmZsaWN0IHRvb2sgcGxhY2UgZm9yIHBvc3Nlc3Npb24gb2YgdGhlIGhlaWdodHMsIGFuZCB0aGF0IGhlIGhpbXNlbGYgc2xldyBhIFRocmFjaWFuIG1lcmNlbmFyeSwgd2hvIGVuZ2FnZWQgaGltLCBieSBzdHJpa2luZyBoaW0gdGhyb3VnaCB0aGUgYnJlYXN0IHdpdGggaGlzIGphdmVsaW4sIGFuZCB0aGF0IGFmdGVyIHRoZSBlbmVteSBoYWQgYmVlbiBkcml2ZW4gYXdheSwgYW5kIHdoaWxlIE1pbG8gd2FzIGZseWluZyBtb3N0IGRpc2dyYWNlZnVsbHkgd2l0aG91dCBoaXMgYXJtb3VyIG9yIGhpcyBjbG9haywgaGUgZm9sbG93ZWQgYWZ0ZXIgdGhlbSB3aXRob3V0IGRhbmdlciwgYW5kIGJyb3VnaHQgaGlzIGFybXkgd2l0aCBoaW0gZG93biBpbnRvIHRoZSBwbGFpbi4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['16.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+SGVyZSwgdGhlbiwgTmFzaWNhIHBhc3NlZCB0aGUgbmlnaHQ7IGJ1dCB0byBQZXJzZXVzLCB3aG8gZGlkIG5vdCBpbmZlciB3aGF0IHdhcyBnb2luZyBvbiBiZWNhdXNlIGhlIHNhdyBBZW1pbGl1cyByZW1haW5pbmcgcXVpZXRseSBpbiBoaXMgcG9zaXRpb24sIHRoZXJlIGNhbWUgYSBDcmV0YW4gZGVzZXJ0ZXIgd2hvIGhhZCBydW4gYXdheSBvbiB0aGUgbWFyY2gsIGJyaW5naW5nIGhpbSBuZXdzIG9mIHRoZSBjaXJjdWl0IHdoaWNoIHRoZSBSb21hbnMgaGFkIHRha2VuLiBUaG91Z2ggUGVyc2V1cyB3YXMgY29uZm91bmRlZCBhdCB0aGlzLCBoZSBkaWQgbm90IG1vdmUgaGlzIGNhbXAsIGJ1dCBzZW50IG91dCB0ZW4gdGhvdXNhbmQgZm9yZWlnbiBtZXJjZW5hcmllcyBhbmQgdHdvIHRob3VzYW5kIE1hY2Vkb25pYW5zIHVuZGVyIE1pbG8sIHdpdGggb3JkZXJzIHRvIG1ha2UgaGFzdGUgYW5kIG9jY3VweSB0aGUgcGFzc2VzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['16.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1lbiwgYWNjb3JkaW5nIHRvIFBvbHliaXVzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBhIGxvc3QgcG9ydGlvbiBvZiBCb29rIFhYSVguPC9ub3RlPiB3ZXJlIHN0aWxsIGFzbGVlcCB3aGVuIHRoZSBSb21hbnMgZmVsbCB1cG9uIHRoZW07IGJ1dCBOYXNpY2Egc2F5cyB0aGF0IGEgc2hhcnAgYW5kIHBlcmlsb3VzIGNvbmZsaWN0IHRvb2sgcGxhY2UgZm9yIHBvc3Nlc3Npb24gb2YgdGhlIGhlaWdodHMsIGFuZCB0aGF0IGhlIGhpbXNlbGYgc2xldyBhIFRocmFjaWFuIG1lcmNlbmFyeSwgd2hvIGVuZ2FnZWQgaGltLCBieSBzdHJpa2luZyBoaW0gdGhyb3VnaCB0aGUgYnJlYXN0IHdpdGggaGlzIGphdmVsaW4sIGFuZCB0aGF0IGFmdGVyIHRoZSBlbmVteSBoYWQgYmVlbiBkcml2ZW4gYXdheSwgYW5kIHdoaWxlIE1pbG8gd2FzIGZseWluZyBtb3N0IGRpc2dyYWNlZnVsbHkgd2l0aG91dCBoaXMgYXJtb3VyIG9yIGhpcyBjbG9haywgaGUgZm9sbG93ZWQgYWZ0ZXIgdGhlbSB3aXRob3V0IGRhbmdlciwgYW5kIGJyb3VnaHQgaGlzIGFybXkgd2l0aCBoaW0gZG93biBpbnRvIHRoZSBwbGFpbi4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcyBkaXNhc3RlciwgUGVyc2V1cyBoYXN0aWx5IGJyb2tlIGNhbXAgYW5kIHJldGlyZWQ7IGhlIGhhZCBiZWNvbWUgZXhjZWVkaW5nbHkgZmVhcmZ1bCwgYW5kIGhpcyBob3BlcyB3ZXJlIHNoYXR0ZXJlZC4gQnV0IG5ldmVydGhlbGVzcyBoZSB3YXMgdW5kZXIgdGhlIG5lY2Vzc2l0eSBvZiBzdGFuZGluZyBoaXMgZ3JvdW5kIHRoZXJlIGluIGZyb250IG9mIFB5ZG5hIGFuZCByaXNraW5nIGEgYmF0dGxlLCBvciBlbHNlIG9mIHNjYXR0ZXJpbmcgaGlzIGFybXkgYWJvdXQgYW1vbmcgdGhlIGNpdGllcyBhbmQgc28gYXdhaXRpbmcgdGhlIGlzc3VlIG9mIHRoZSB3YXIsIHdoaWNoLCBub3cgdGhhdCBpdCBoYWQgb25jZSBtYWRlIGl0cyB3YXkgaW50byBoaXMgY291bnRyeSwgY291bGQgbm90IGJlIGRyaXZlbiBvdXQgd2l0aG91dCBtdWNoIGJsb29kc2hlZCBhbmQgc2xhdWdodGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5JbiB0aGUgbnVtYmVyIG9mIGhpcyBtZW4sIHRoZW4sIGhlIHdhcyBzdXBlcmlvciB3aGVyZSBoZSB3YXMsIGFuZCB0aGV5IHdvdWxkIGZpZ2h0IHdpdGggZ3JlYXQgYXJkb3VyIGluIGRlZmVuY2Ugb2YgdGhlaXIgd2l2ZXMgYW5kIGNoaWxkcmVuLCBhbmQgd2l0aCB0aGVpciBraW5nIGJlaG9sZGluZyBhbGwgdGhlaXIgYWN0aW9ucyBhbmQgcmlza2luZyBsaWZlIGluIHRoZWlyIGJlaGFsZi4gV2l0aCBzdWNoIGFyZ3VtZW50cyBoaXMgZnJpZW5kcyBlbmNvdXJhZ2VkIFBlcnNldXMuIFNvIGhlIHBpdGNoZWQgYSBjYW1wIGFuZCBhcnJhbmdlZCBoaXMgZm9yY2VzIGZvciBiYXR0bGUsIGV4YW1pbmluZyB0aGUgZmllbGQgYW5kIGRpc3RyaWJ1dGluZyBoaXMgY29tbWFuZHMsIHB1cnBvc2luZyB0byBjb25mcm9udCB0aGUgUm9tYW5zIGFzIHNvb24gYXMgdGhleSBjYW1lIHVwLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgcGxhY2UgYWZmb3JkZWQgYSBwbGFpbiBmb3IgaGlzIHBoYWxhbngsIHdoaWNoIHJlcXVpcmVkIGZpcm0gc3RhbmRpbmcgYW5kIHNtb290aCBncm91bmQsIGFuZCB0aGVyZSB3ZXJlIGhpbGxzIHN1Y2NlZWRpbmcgb25lIGFub3RoZXIgY29udGludW91c2x5LCB3aGljaCBnYXZlIGhpcyBza2lybWlzaGVycyBhbmQgbGlnaHQtYXJtZWQgdHJvb3BzIG9wcG9ydHVuaXR5IGZvciByZXRyZWF0IGFuZCBmbGFuayBhdHRhY2suIE1vcmVvdmVyLCB0aHJvdWdoIHRoZSBtaWRkbGUgb2YgaXQgcmFuIHRoZSByaXZlcnMgQWVzb24gYW5kIExldWN1cywgd2hpY2ggd2VyZSBub3QgdmVyeSBkZWVwIGF0IHRoYXQgdGltZSAoZm9yIGl0IHdhcyB0aGUgbGF0dGVyIGVuZCBvZiBzdW1tZXIpLCBidXQgd2VyZSBsaWtlbHksIG5ldmVydGhlbGVzcywgdG8gZ2l2ZSB0aGUgUm9tYW5zIGNvbnNpZGVyYWJsZSB0cm91YmxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['16.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgZGlzYXN0ZXIsIFBlcnNldXMgaGFzdGlseSBicm9rZSBjYW1wIGFuZCByZXRpcmVkOyBoZSBoYWQgYmVjb21lIGV4Y2VlZGluZ2x5IGZlYXJmdWwsIGFuZCBoaXMgaG9wZXMgd2VyZSBzaGF0dGVyZWQuIEJ1dCBuZXZlcnRoZWxlc3MgaGUgd2FzIHVuZGVyIHRoZSBuZWNlc3NpdHkgb2Ygc3RhbmRpbmcgaGlzIGdyb3VuZCB0aGVyZSBpbiBmcm9udCBvZiBQeWRuYSBhbmQgcmlza2luZyBhIGJhdHRsZSwgb3IgZWxzZSBvZiBzY2F0dGVyaW5nIGhpcyBhcm15IGFib3V0IGFtb25nIHRoZSBjaXRpZXMgYW5kIHNvIGF3YWl0aW5nIHRoZSBpc3N1ZSBvZiB0aGUgd2FyLCB3aGljaCwgbm93IHRoYXQgaXQgaGFkIG9uY2UgbWFkZSBpdHMgd2F5IGludG8gaGlzIGNvdW50cnksIGNvdWxkIG5vdCBiZSBkcml2ZW4gb3V0IHdpdGhvdXQgbXVjaCBibG9vZHNoZWQgYW5kIHNsYXVnaHRlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['16.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkluIHRoZSBudW1iZXIgb2YgaGlzIG1lbiwgdGhlbiwgaGUgd2FzIHN1cGVyaW9yIHdoZXJlIGhlIHdhcywgYW5kIHRoZXkgd291bGQgZmlnaHQgd2l0aCBncmVhdCBhcmRvdXIgaW4gZGVmZW5jZSBvZiB0aGVpciB3aXZlcyBhbmQgY2hpbGRyZW4sIGFuZCB3aXRoIHRoZWlyIGtpbmcgYmVob2xkaW5nIGFsbCB0aGVpciBhY3Rpb25zIGFuZCByaXNraW5nIGxpZmUgaW4gdGhlaXIgYmVoYWxmLiBXaXRoIHN1Y2ggYXJndW1lbnRzIGhpcyBmcmllbmRzIGVuY291cmFnZWQgUGVyc2V1cy4gU28gaGUgcGl0Y2hlZCBhIGNhbXAgYW5kIGFycmFuZ2VkIGhpcyBmb3JjZXMgZm9yIGJhdHRsZSwgZXhhbWluaW5nIHRoZSBmaWVsZCBhbmQgZGlzdHJpYnV0aW5nIGhpcyBjb21tYW5kcywgcHVycG9zaW5nIHRvIGNvbmZyb250IHRoZSBSb21hbnMgYXMgc29vbiBhcyB0aGV5IGNhbWUgdXAuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['16.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBwbGFjZSBhZmZvcmRlZCBhIHBsYWluIGZvciBoaXMgcGhhbGFueCwgd2hpY2ggcmVxdWlyZWQgZmlybSBzdGFuZGluZyBhbmQgc21vb3RoIGdyb3VuZCwgYW5kIHRoZXJlIHdlcmUgaGlsbHMgc3VjY2VlZGluZyBvbmUgYW5vdGhlciBjb250aW51b3VzbHksIHdoaWNoIGdhdmUgaGlzIHNraXJtaXNoZXJzIGFuZCBsaWdodC1hcm1lZCB0cm9vcHMgb3Bwb3J0dW5pdHkgZm9yIHJldHJlYXQgYW5kIGZsYW5rIGF0dGFjay4gTW9yZW92ZXIsIHRocm91Z2ggdGhlIG1pZGRsZSBvZiBpdCByYW4gdGhlIHJpdmVycyBBZXNvbiBhbmQgTGV1Y3VzLCB3aGljaCB3ZXJlIG5vdCB2ZXJ5IGRlZXAgYXQgdGhhdCB0aW1lIChmb3IgaXQgd2FzIHRoZSBsYXR0ZXIgZW5kIG9mIHN1bW1lciksIGJ1dCB3ZXJlIGxpa2VseSwgbmV2ZXJ0aGVsZXNzLCB0byBnaXZlIHRoZSBSb21hbnMgY29uc2lkZXJhYmxlIHRyb3VibGUuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkFlbWlsaXVzLCBhZnRlciBlZmZlY3RpbmcgYSBqdW5jdGlvbiB3aXRoIE5hc2ljYSwgY2FtZSBkb3duIGluIGJhdHRsZSBhcnJheSBhZ2FpbnN0IHRoZSBlbmVteS4gQnV0IHdoZW4gaGUgc2F3IGhvdyB0aGV5IHdlcmUgZHJhd24gdXAsIGFuZCBpbiB3aGF0IG51bWJlcnMsIGhlIHdhcyBhbWF6ZWQsIGFuZCBjYW1lIHRvIGEgaGFsdCwgY29uc2lkZXJpbmcgd2l0aCBoaW1zZWxmLiBIaXMgeW91bmcgb2ZmaWNlcnMsIGhvd2V2ZXIsIHdobyB3ZXJlIGVhZ2VyIGZvciBiYXR0bGUsIHJvZGUgdXAgYW5kIGJlZ2dlZCBoaW0gbm90IHRvIGRlbGF5LCBlc3BlY2lhbGx5IE5hc2ljYSwgd2hvIHdhcyBlbWJvbGRlbmVkIGJ5IGhpcyBzdWNjZXNzIGF0IE1vdW50IE9seW1wdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZW1pbGl1cywgd2l0aCBhIHNtaWxlLCBzYWlkIHRvIGhpbTogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5ZZXMsIGlmIEkgaGFkIHRoeSB5b3V0aDsgYnV0IG1hbnkgdmljdG9yaWVzIHRlYWNoIG1lIHRoZSBtaXN0YWtlcyBvZiB0aGUgdmFucXVpc2hlZCwgYW5kIGZvcmJpZCBtZSB0byBqb2luIGJhdHRsZSwgaW1tZWRpYXRlbHkgYWZ0ZXIgYSBtYXJjaCwgd2l0aCBhIHBoYWxhbnggd2hpY2ggaXMgYWxyZWFkeSBkcmF3biB1cCBhbmQgY29tcGxldGVseSBmb3JtZWQuPC9xPiBBZnRlciB0aGlzLCBoZSBvcmRlcmVkIGhpcyBmb3JlbW9zdCB0cm9vcHMsIHdobyB3ZXJlIGluIHNpZ2h0IG9mIHRoZSBlbmVteSwgdG8gZm9ybSBpbnRvIGNvaG9ydHMgYW5kIGdpdmUgdGhlIGFwcGVhcmFuY2Ugb2YgYSBiYXR0bGUgbGluZSwgd2hpbGUgdGhlIG90aGVycywgd2hlZWxpbmcgdG8gdGhlIHJlYXIsIGR1ZyB0cmVuY2hlcyBhbmQgbWFya2VkIG91dCBhIGNhbXAuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGlzIHdheSwgdGhlIHRyb29wcyBuZXh0IHRvIHRoZSBsYXN0IHdoZWVsaW5nIG9mZiBpbiBkdWUgc3VjY2Vzc2lvbiwgYmVmb3JlIHRoZSBlbmVteSBrbmV3IGl0IGhlIGhhZCBicm9rZW4gdXAgaGlzIGJhdHRsZSBsaW5lIGFuZCBicm91Z2h0IGFsbCBoaXMgbWVuIHdpdGhvdXQgY29uZnVzaW9uIGludG8gdGhlaXIgaW50cmVuY2htZW50cy4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['17.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWVtaWxpdXMsIGFmdGVyIGVmZmVjdGluZyBhIGp1bmN0aW9uIHdpdGggTmFzaWNhLCBjYW1lIGRvd24gaW4gYmF0dGxlIGFycmF5IGFnYWluc3QgdGhlIGVuZW15LiBCdXQgd2hlbiBoZSBzYXcgaG93IHRoZXkgd2VyZSBkcmF3biB1cCwgYW5kIGluIHdoYXQgbnVtYmVycywgaGUgd2FzIGFtYXplZCwgYW5kIGNhbWUgdG8gYSBoYWx0LCBjb25zaWRlcmluZyB3aXRoIGhpbXNlbGYuIEhpcyB5b3VuZyBvZmZpY2VycywgaG93ZXZlciwgd2hvIHdlcmUgZWFnZXIgZm9yIGJhdHRsZSwgcm9kZSB1cCBhbmQgYmVnZ2VkIGhpbSBub3QgdG8gZGVsYXksIGVzcGVjaWFsbHkgTmFzaWNhLCB3aG8gd2FzIGVtYm9sZGVuZWQgYnkgaGlzIHN1Y2Nlc3MgYXQgTW91bnQgT2x5bXB1cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZW1pbGl1cywgd2l0aCBhIHNtaWxlLCBzYWlkIHRvIGhpbTogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPlllcywgaWYgSSBoYWQgdGh5IHlvdXRoOyBidXQgbWFueSB2aWN0b3JpZXMgdGVhY2ggbWUgdGhlIG1pc3Rha2VzIG9mIHRoZSB2YW5xdWlzaGVkLCBhbmQgZm9yYmlkIG1lIHRvIGpvaW4gYmF0dGxlLCBpbW1lZGlhdGVseSBhZnRlciBhIG1hcmNoLCB3aXRoIGEgcGhhbGFueCB3aGljaCBpcyBhbHJlYWR5IGRyYXduIHVwIGFuZCBjb21wbGV0ZWx5IGZvcm1lZC48L3E+IEFmdGVyIHRoaXMsIGhlIG9yZGVyZWQgaGlzIGZvcmVtb3N0IHRyb29wcywgd2hvIHdlcmUgaW4gc2lnaHQgb2YgdGhlIGVuZW15LCB0byBmb3JtIGludG8gY29ob3J0cyBhbmQgZ2l2ZSB0aGUgYXBwZWFyYW5jZSBvZiBhIGJhdHRsZSBsaW5lLCB3aGlsZSB0aGUgb3RoZXJzLCB3aGVlbGluZyB0byB0aGUgcmVhciwgZHVnIHRyZW5jaGVzIGFuZCBtYXJrZWQgb3V0IGEgY2FtcC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiB0aGlzIHdheSwgdGhlIHRyb29wcyBuZXh0IHRvIHRoZSBsYXN0IHdoZWVsaW5nIG9mZiBpbiBkdWUgc3VjY2Vzc2lvbiwgYmVmb3JlIHRoZSBlbmVteSBrbmV3IGl0IGhlIGhhZCBicm9rZW4gdXAgaGlzIGJhdHRsZSBsaW5lIGFuZCBicm91Z2h0IGFsbCBoaXMgbWVuIHdpdGhvdXQgY29uZnVzaW9uIGludG8gdGhlaXIgaW50cmVuY2htZW50cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj5Ob3csIHdoZW4gbmlnaHQgaGFkIGNvbWUsIGFuZCB0aGUgc29sZGllcnMsIGFmdGVyIHN1cHBlciwgd2VyZSBiZXRha2luZyB0aGVtc2VsdmVzIHRvIHJlc3QgYW5kIHNsZWVwLCBvbiBhIHN1ZGRlbiB0aGUgbW9vbiwgd2hpY2ggd2FzIGZ1bGwgYW5kIGhpZ2ggaW4gdGhlIGhlYXZlbnMsIGdyZXcgZGFyaywgbG9zdCBpdHMgbGlnaHQsIHRvb2sgb24gYWxsIHNvcnRzIG9mIGNvbG91cnMgaW4gc3VjY2Vzc2lvbiwgYW5kIGZpbmFsbHkgZGlzYXBwZWFyZWQuIAoJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFucywgYWNjb3JkaW5nIHRvIHRoZWlyIGN1c3RvbSwgdHJpZWQgdG8gY2FsbCBoZXIgbGlnaHQgYmFjayBieSB0aGUgY2xhc2hpbmcgb2YgYnJvbnplIHV0ZW5zaWxzIGFuZCBieSBob2xkaW5nIHVwIG1hbnkgYmxhemluZyBmaXJlLWJyYW5kcyBhbmQgdG9yY2hlcyB0b3dhcmRzIHRoZSBoZWF2ZW5zOyB0aGUgTWFjZWRvbmlhbnMsIGhvd2V2ZXIsIGRpZCBub3RoaW5nIG9mIHRoaXMgc29ydCwgYnV0IGFtYXplbWVudCBhbmQgdGVycm9yIHBvc3Nlc3NlZCB0aGVpciBjYW1wLCBhbmQgYSBydW1vdXIgcXVpZXRseSBzcHJlYWQgYW1vbmcgbWFueSBvZiB0aGVtIHRoYXQgdGhlIHBvcnRlbnQgc2lnbmlmaWVkIGFuIGVjbGlwc2Ugb2YgYSBraW5nLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Ob3csIEFlbWlsaXVzIHdhcyBub3QgYWx0b2dldGhlciB3aXRob3V0IGtub3dsZWRnZSBhbmQgZXhwZXJpZW5jZSBvZiB0aGUgaXJyZWd1bGFyaXRpZXMgb2YgZWNsaXBzZXMsIHdoaWNoLCBhdCBmaXhlZCBwZXJpb2RzLCBjYXJyeSB0aGUgbW9vbiBpbiBoZXIgY291cnNlIGludG8gdGhlIHNoYWRvdyBvZiB0aGUgZWFydGggYW5kIGNvbmNlYWwgaGVyIGZyb20gc2lnaHQsIHVudGlsIHNoZSBwYXNzZXMgYmV5b25kIHRoZSByZWdpb24gb2Ygc2hhZG93IGFuZCByZWZsZWN0cyBhZ2FpbiB0aGUgbGlnaHQgb2YgdGhlIHN1bjsgaG93ZXZlciwgc2luY2UgaGUgd2FzIHZlcnkgZGV2b3V0IGFuZCBnaXZlbiB0byBzYWNyaWZpY2VzIGFuZCBkaXZpbmF0aW9uLCBhcyBzb29uIGFzIGhlIHNhdyB0aGUgbW9vbiBiZWdpbm5pbmcgdG8gZW1lcmdlIGZyb20gdGhlIHNoYWRvdywgaGUgc2FjcmlmaWNlZCBlbGV2ZW4gaGVpZmVycyB0byBoZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBzb29uIGFzIGl0IHdhcyBkYXksIGhlIHNhY3JpZmljZWQgYXMgbWFueSBhcyB0d2VudHkgb3hlbiB0byBIZXJjdWxlcyB3aXRob3V0IGdldHRpbmcgZmF2b3VyYWJsZSBvbWVuczsgYnV0IHdpdGggdGhlIHR3ZW50eS1maXJzdCB2aWN0aW0gdGhlIHByb3BpdGlvdXMgc2lnbnMgYXBwZWFyZWQgYW5kIGluZGljYXRlZCB2aWN0b3J5IGlmIHRoZXkgc3Rvb2Qgb24gdGhlIGRlZmVuc2l2ZS4gQWNjb3JkaW5nbHksIGhhdmluZyB2b3dlZCB0byB0aGUgZ29kIGEgaGVjYXRvbWIgYW5kIHNvbGVtbiBnYW1lcywgaGUgb3JkZXJlZCBoaXMgb2ZmaWNlcnMgdG8gcHV0IHRoZSBhcm15IGluIGFycmF5IGZvciBiYXR0bGU7IGJ1dCBoZSBoaW1zZWxmLCB3YWl0aW5nIGZvciB0aGUgc3VuIHRvIHBhc3MgdG8gdGhlIHdlc3QgYW5kIGRlY2xpbmUsIGluIG9yZGVyIHRoYXQgaXRzIG1vcm5pbmcgbGlnaHQgbWlnaHQgbm90IHNoaW5lIGluIHRoZSBmYWNlcyBvZiBoaXMgbWVuIGFzIHRoZXkgZm91Z2h0LCBwYXNzZWQgdGhlIHRpbWUgc2l0dGluZyBpbiBoaXMgdGVudCwgd2hpY2ggd2FzIG9wZW4gdG93YXJkcyB0aGUgcGxhaW4gYW5kIHRoZSBlbmVteSdzIGVuY2FtcG1lbnQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['17.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMsIGFjY29yZGluZyB0byB0aGVpciBjdXN0b20sIHRyaWVkIHRvIGNhbGwgaGVyIGxpZ2h0IGJhY2sgYnkgdGhlIGNsYXNoaW5nIG9mIGJyb256ZSB1dGVuc2lscyBhbmQgYnkgaG9sZGluZyB1cCBtYW55IGJsYXppbmcgZmlyZS1icmFuZHMgYW5kIHRvcmNoZXMgdG93YXJkcyB0aGUgaGVhdmVuczsgdGhlIE1hY2Vkb25pYW5zLCBob3dldmVyLCBkaWQgbm90aGluZyBvZiB0aGlzIHNvcnQsIGJ1dCBhbWF6ZW1lbnQgYW5kIHRlcnJvciBwb3NzZXNzZWQgdGhlaXIgY2FtcCwgYW5kIGEgcnVtb3VyIHF1aWV0bHkgc3ByZWFkIGFtb25nIG1hbnkgb2YgdGhlbSB0aGF0IHRoZSBwb3J0ZW50IHNpZ25pZmllZCBhbiBlY2xpcHNlIG9mIGEga2luZy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgQWVtaWxpdXMgd2FzIG5vdCBhbHRvZ2V0aGVyIHdpdGhvdXQga25vd2xlZGdlIGFuZCBleHBlcmllbmNlIG9mIHRoZSBpcnJlZ3VsYXJpdGllcyBvZiBlY2xpcHNlcywgd2hpY2gsIGF0IGZpeGVkIHBlcmlvZHMsIGNhcnJ5IHRoZSBtb29uIGluIGhlciBjb3Vyc2UgaW50byB0aGUgc2hhZG93IG9mIHRoZSBlYXJ0aCBhbmQgY29uY2VhbCBoZXIgZnJvbSBzaWdodCwgdW50aWwgc2hlIHBhc3NlcyBiZXlvbmQgdGhlIHJlZ2lvbiBvZiBzaGFkb3cgYW5kIHJlZmxlY3RzIGFnYWluIHRoZSBsaWdodCBvZiB0aGUgc3VuOyBob3dldmVyLCBzaW5jZSBoZSB3YXMgdmVyeSBkZXZvdXQgYW5kIGdpdmVuIHRvIHNhY3JpZmljZXMgYW5kIGRpdmluYXRpb24sIGFzIHNvb24gYXMgaGUgc2F3IHRoZSBtb29uIGJlZ2lubmluZyB0byBlbWVyZ2UgZnJvbSB0aGUgc2hhZG93LCBoZSBzYWNyaWZpY2VkIGVsZXZlbiBoZWlmZXJzIHRvIGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['17.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBhcyBzb29uIGFzIGl0IHdhcyBkYXksIGhlIHNhY3JpZmljZWQgYXMgbWFueSBhcyB0d2VudHkgb3hlbiB0byBIZXJjdWxlcyB3aXRob3V0IGdldHRpbmcgZmF2b3VyYWJsZSBvbWVuczsgYnV0IHdpdGggdGhlIHR3ZW50eS1maXJzdCB2aWN0aW0gdGhlIHByb3BpdGlvdXMgc2lnbnMgYXBwZWFyZWQgYW5kIGluZGljYXRlZCB2aWN0b3J5IGlmIHRoZXkgc3Rvb2Qgb24gdGhlIGRlZmVuc2l2ZS4gQWNjb3JkaW5nbHksIGhhdmluZyB2b3dlZCB0byB0aGUgZ29kIGEgaGVjYXRvbWIgYW5kIHNvbGVtbiBnYW1lcywgaGUgb3JkZXJlZCBoaXMgb2ZmaWNlcnMgdG8gcHV0IHRoZSBhcm15IGluIGFycmF5IGZvciBiYXR0bGU7IGJ1dCBoZSBoaW1zZWxmLCB3YWl0aW5nIGZvciB0aGUgc3VuIHRvIHBhc3MgdG8gdGhlIHdlc3QgYW5kIGRlY2xpbmUsIGluIG9yZGVyIHRoYXQgaXRzIG1vcm5pbmcgbGlnaHQgbWlnaHQgbm90IHNoaW5lIGluIHRoZSBmYWNlcyBvZiBoaXMgbWVuIGFzIHRoZXkgZm91Z2h0LCBwYXNzZWQgdGhlIHRpbWUgc2l0dGluZyBpbiBoaXMgdGVudCwgd2hpY2ggd2FzIG9wZW4gdG93YXJkcyB0aGUgcGxhaW4gYW5kIHRoZSBlbmVteSdzIGVuY2FtcG1lbnQuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRvd2FyZHMgZXZlbmluZywgQWVtaWxpdXMgaGltc2VsZiwgYXMgc29tZSBzYXksIGRldmlzZWQgYSBzY2hlbWUgZm9yIG1ha2luZyB0aGUgZW5lbXkgYmVnaW4gdGhlIGF0dGFjaywgYW5kIHRoZSBSb21hbnMsIHB1cnN1aW5nIGEgaG9yc2Ugd2hpY2ggdGhleSBoYWQgZHJpdmVuIGZvcnRoIHdpdGhvdXQgYSBicmlkbGUsIGNhbWUgaW50byBjb2xsaXNpb24gd2l0aCB0aGVtLCBhbmQgdGhlIHB1cnN1aXQgb2YgdGhpcyBob3JzZSBicm91Z2h0IG9uIGEgYmF0dGxlOyBvdGhlcnMgc2F5IHRoYXQgVGhyYWNpYW5zLCB1bmRlciB0aGUgY29tbWFuZCBvZiBBbGV4YW5kZXIsIHNldCB1cG9uIFJvbWFuIGJlYXN0cyBvZiBidXJkZW4gdGhhdCB3ZXJlIGJyaW5naW5nIGluIGZvcmFnZSwgYW5kIHRoYXQgYWdhaW5zdCB0aGVzZSBhIHNoYXJwIHNhbGx5IHdhcyBtYWRlIGJ5IHNldmVuIGh1bmRyZWQgTGlndXJpYW5zLCB3aGVyZXVwb24gcmVpbmZvcmNlbWVudHMgd2VyZSBzZW50IHRvIGVpdGhlciBwYXJ0eSwgYW5kIHRodXMgdGhlIGVuZ2FnZW1lbnQgYmVjYW1lIGdlbmVyYWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gQWVtaWxpdXMsIGxpa2UgYSBwaWxvdCwganVkZ2luZyBmcm9tIHRoZSBzdXJnaW5nIGNvbW1vdGlvbiBpbiB0aGUgYXJtaWVzIHRoZSBncmVhdG5lc3Mgb2YgdGhlIGNvbWluZyBzdG9ybSwgY2FtZSBmb3J0aCBmcm9tIGhpcyB0ZW50IGFuZCB3ZW50IGFsb25nIGluIGZyb250IG9mIGhpcyBsZWdpb25hcnkgdHJvb3BzIGVuY291cmFnaW5nIHRoZW0sIGFuZCBOYXNpY2EsIGFmdGVyIHJpZGluZyBvdXQgdG8gdGhlIHNraXJtaXNoZXJzLCBzYXcgdGhhdCB0aGUgd2hvbGUgZm9yY2Ugb2YgdGhlIGVuZW15IHdhcyBhbGwgYnV0IGF0IGNsb3NlIHF1YXJ0ZXJzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG93YXJkcyBldmVuaW5nLCBBZW1pbGl1cyBoaW1zZWxmLCBhcyBzb21lIHNheSwgZGV2aXNlZCBhIHNjaGVtZSBmb3IgbWFraW5nIHRoZSBlbmVteSBiZWdpbiB0aGUgYXR0YWNrLCBhbmQgdGhlIFJvbWFucywgcHVyc3VpbmcgYSBob3JzZSB3aGljaCB0aGV5IGhhZCBkcml2ZW4gZm9ydGggd2l0aG91dCBhIGJyaWRsZSwgY2FtZSBpbnRvIGNvbGxpc2lvbiB3aXRoIHRoZW0sIGFuZCB0aGUgcHVyc3VpdCBvZiB0aGlzIGhvcnNlIGJyb3VnaHQgb24gYSBiYXR0bGU7IG90aGVycyBzYXkgdGhhdCBUaHJhY2lhbnMsIHVuZGVyIHRoZSBjb21tYW5kIG9mIEFsZXhhbmRlciwgc2V0IHVwb24gUm9tYW4gYmVhc3RzIG9mIGJ1cmRlbiB0aGF0IHdlcmUgYnJpbmdpbmcgaW4gZm9yYWdlLCBhbmQgdGhhdCBhZ2FpbnN0IHRoZXNlIGEgc2hhcnAgc2FsbHkgd2FzIG1hZGUgYnkgc2V2ZW4gaHVuZHJlZCBMaWd1cmlhbnMsIHdoZXJldXBvbiByZWluZm9yY2VtZW50cyB3ZXJlIHNlbnQgdG8gZWl0aGVyIHBhcnR5LCBhbmQgdGh1cyB0aGUgZW5nYWdlbWVudCBiZWNhbWUgZ2VuZXJhbC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIHRoZW4gQWVtaWxpdXMsIGxpa2UgYSBwaWxvdCwganVkZ2luZyBmcm9tIHRoZSBzdXJnaW5nIGNvbW1vdGlvbiBpbiB0aGUgYXJtaWVzIHRoZSBncmVhdG5lc3Mgb2YgdGhlIGNvbWluZyBzdG9ybSwgY2FtZSBmb3J0aCBmcm9tIGhpcyB0ZW50IGFuZCB3ZW50IGFsb25nIGluIGZyb250IG9mIGhpcyBsZWdpb25hcnkgdHJvb3BzIGVuY291cmFnaW5nIHRoZW0sIGFuZCBOYXNpY2EsIGFmdGVyIHJpZGluZyBvdXQgdG8gdGhlIHNraXJtaXNoZXJzLCBzYXcgdGhhdCB0aGUgd2hvbGUgZm9yY2Ugb2YgdGhlIGVuZW15IHdhcyBhbGwgYnV0IGF0IGNsb3NlIHF1YXJ0ZXJzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5GaXJzdCB0aGUgVGhyYWNpYW5zIGFkdmFuY2VkLCB3aG9zZSBhcHBlYXJhbmNlLCBOYXNpY2Egc2F5cywgd2FzIG1vc3QgdGVycmlibGUs4oCUbWVuIG9mIGxvZnR5IHN0YXR1cmUsIGNsYWQgaW4gdHVuaWNzIHdoaWNoIHNob3dlZCBibGFjayBiZW5lYXRoIHRoZSB3aGl0ZSBhbmQgZ2xlYW1pbmcgYXJtb3VyIG9mIHRoZWlyIHNoaWVsZHMgYW5kIGdyZWF2ZXMsIGFuZCB0b3NzaW5nIGhpZ2ggb24gdGhlaXIgcmlnaHQgc2hvdWxkZXJzIGJhdHRsZS1heGVzIHdpdGggaGVhdnkgaXJvbiBoZWFkcy4gTmV4dCB0byB0aGUgVGhyYWNpYW5zLCB0aGUgbWVyY2VuYXJpZXMgYWR2YW5jZWQgdG8gdGhlIGF0dGFjazsgdGhlaXIgZXF1aXBtZW50IHdhcyBvZiBldmVyeSB2YXJpZXR5LCBhbmQgUGFlb25pYW5zIHdlcmUgbWluZ2xlZCB3aXRoIHRoZW0uIE5leHQgdG8gdGhlc2UgY2FtZSBhIHRoaXJkIGRpdmlzaW9uLCBwaWNrZWQgbWVuLCB0aGUgZmxvd2VyIG9mIHRoZSBNYWNlZG9uaWFucyB0aGVtc2VsdmVzIGZvciB5b3V0aGZ1bCBzdHJlbmd0aCBhbmQgdmFsb3VyLCBnbGVhbWluZyB3aXRoIGdpbGRlZCBhcm1vdXIgYW5kIGZyZXNoIHNjYXJsZXQgY29hdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRoZXNlIHRvb2sgdGhlaXIgcGxhY2VzIGluIHRoZSBsaW5lLCB0aGV5IHdlcmUgaWxsdW1pbmVkIGJ5IHRoZSBwaGFsYW54LWxpbmVzIG9mIHRoZSBCcm9uemUtc2hpZWxkcyB3aGljaCBpc3N1ZWQgZnJvbSB0aGUgY2FtcCBiZWhpbmQgdGhlbSBhbmQgZmlsbGVkIHRoZSBwbGFpbiB3aXRoIHRoZSBnbGVhbSBvZiBpcm9uIGFuZCB0aGUgZ2xpdHRlciBvZiBicm9uemUsIHRoZSBoaWxscywgdG9vLCB3aXRoIHRoZSB0dW11bHR1b3VzIHNob3V0cyBvZiB0aGVpciBjaGVlcmluZy4gQW5kIHdpdGggc3VjaCBib2xkbmVzcyBhbmQgc3dpZnRuZXNzIGRpZCB0aGV5IGFkdmFuY2UgdGhhdCB0aGUgZmlyc3QgdG8gYmUgc2xhaW4gZmVsbCBvbmx5IHR3byBmdXJsb25ncyBmcm9tIHRoZSBSb21hbiBjYW1wLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['18.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZpcnN0IHRoZSBUaHJhY2lhbnMgYWR2YW5jZWQsIHdob3NlIGFwcGVhcmFuY2UsIE5hc2ljYSBzYXlzLCB3YXMgbW9zdCB0ZXJyaWJsZSzigJRtZW4gb2YgbG9mdHkgc3RhdHVyZSwgY2xhZCBpbiB0dW5pY3Mgd2hpY2ggc2hvd2VkIGJsYWNrIGJlbmVhdGggdGhlIHdoaXRlIGFuZCBnbGVhbWluZyBhcm1vdXIgb2YgdGhlaXIgc2hpZWxkcyBhbmQgZ3JlYXZlcywgYW5kIHRvc3NpbmcgaGlnaCBvbiB0aGVpciByaWdodCBzaG91bGRlcnMgYmF0dGxlLWF4ZXMgd2l0aCBoZWF2eSBpcm9uIGhlYWRzLiBOZXh0IHRvIHRoZSBUaHJhY2lhbnMsIHRoZSBtZXJjZW5hcmllcyBhZHZhbmNlZCB0byB0aGUgYXR0YWNrOyB0aGVpciBlcXVpcG1lbnQgd2FzIG9mIGV2ZXJ5IHZhcmlldHksIGFuZCBQYWVvbmlhbnMgd2VyZSBtaW5nbGVkIHdpdGggdGhlbS4gTmV4dCB0byB0aGVzZSBjYW1lIGEgdGhpcmQgZGl2aXNpb24sIHBpY2tlZCBtZW4sIHRoZSBmbG93ZXIgb2YgdGhlIE1hY2Vkb25pYW5zIHRoZW1zZWx2ZXMgZm9yIHlvdXRoZnVsIHN0cmVuZ3RoIGFuZCB2YWxvdXIsIGdsZWFtaW5nIHdpdGggZ2lsZGVkIGFybW91ciBhbmQgZnJlc2ggc2NhcmxldCBjb2F0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['18.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFzIHRoZXNlIHRvb2sgdGhlaXIgcGxhY2VzIGluIHRoZSBsaW5lLCB0aGV5IHdlcmUgaWxsdW1pbmVkIGJ5IHRoZSBwaGFsYW54LWxpbmVzIG9mIHRoZSBCcm9uemUtc2hpZWxkcyB3aGljaCBpc3N1ZWQgZnJvbSB0aGUgY2FtcCBiZWhpbmQgdGhlbSBhbmQgZmlsbGVkIHRoZSBwbGFpbiB3aXRoIHRoZSBnbGVhbSBvZiBpcm9uIGFuZCB0aGUgZ2xpdHRlciBvZiBicm9uemUsIHRoZSBoaWxscywgdG9vLCB3aXRoIHRoZSB0dW11bHR1b3VzIHNob3V0cyBvZiB0aGVpciBjaGVlcmluZy4gQW5kIHdpdGggc3VjaCBib2xkbmVzcyBhbmQgc3dpZnRuZXNzIGRpZCB0aGV5IGFkdmFuY2UgdGhhdCB0aGUgZmlyc3QgdG8gYmUgc2xhaW4gZmVsbCBvbmx5IHR3byBmdXJsb25ncyBmcm9tIHRoZSBSb21hbiBjYW1wLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMTkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyB0aGUgYXR0YWNrIGJlZ2FuLCBBZW1pbGl1cyBjYW1lIHVwIGFuZCBmb3VuZCB0aGF0IHRoZSBNYWNlZG9uaWFuIGJhdHRhbGlvbnMgaGFkIGFscmVhZHkgcGxhbnRlZCB0aGUgdGlwcyBvZiB0aGVpciBsb25nIHNwZWFycyBpbiB0aGUgc2hpZWxkcyBvZiB0aGUgUm9tYW5zLCB3aG8gd2VyZSB0aHVzIHByZXZlbnRlZCBmcm9tIHJlYWNoaW5nIHRoZW0gd2l0aCB0aGVpciBzd29yZHMuIEFuZCB3aGVuIGhlIHNhdyB0aGF0IHRoZSByZXN0IG9mIHRoZSBNYWNlZG9uaWFuIHRyb29wcyBhbHNvIHdlcmUgZHJhd2luZyB0aGVpciB0YXJnZXRzIGZyb20gdGhlaXIgc2hvdWxkZXJzIHJvdW5kIGluIGZyb250IG9mIHRoZW0sIGFuZCB3aXRoIGxvbmcgc3BlYXJzIHNhdCBhdCBvbmUgbGV2ZWwgd2VyZSB3aXRoc3RhbmRpbmcgaGlzIHNoaWVsZC1iZWFyaW5nIHRyb29wcywgYW5kIHNhdyB0b28gdGhlIHN0cmVuZ3RoIG9mIHRoZWlyIGludGVybG9ja2VkIHNoaWVsZHMgYW5kIHRoZSBmaWVyY2VuZXNzIG9mIHRoZWlyIG9uc2V0LCBhbWF6ZW1lbnQgYW5kIGZlYXIgdG9vayBwb3NzZXNzaW9uIG9mIGhpbSwgYW5kIGhlIGZlbHQgdGhhdCBoZSBoYWQgbmV2ZXIgc2VlbiBhIHNpZ2h0IG1vcmUgZmVhcmZ1bDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+b2Z0ZW4gaW4gYWZ0ZXIgdGltZXMgaGUgdXNlZCB0byBzcGVhayBvZiBoaXMgZW1vdGlvbnMgYXQgdGhhdCB0aW1lIGFuZCBvZiB3aGF0IGhlIHNhdy4gQnV0IHRoZW4sIHNob3dpbmcgdG8gaGlzIHNvbGRpZXJzIGEgZ2xhZCBhbmQgY2hlZXJmdWwgY291bnRlbmFuY2UsIGhlIHJvZGUgcGFzdCB0aGVtIHdpdGhvdXQgaGVsbWV0IG9yIGJyZWFzdHBsYXRlLiBUaGUga2luZyBvZiB0aGUgTWFjZWRvbmlhbnMsIG9uIHRoZSBvdGhlciBoYW5kLCBhY2NvcmRpbmcgdG8gUG9seWJpdXMsIGFzIHNvb24gYXMgdGhlIGJhdHRsZSBiZWdhbiwgcGxheWVkIHRoZSBjb3dhcmQgYW5kIHJvZGUgYmFjayB0byB0aGUgY2l0eSwgdW5kZXIgcHJldGVuY2Ugb2Ygc2FjcmlmaWNpbmcgdG8gSGVyYWNsZXMsIGEgZ29kIHdobyBkb2VzIG5vdCBhY2NlcHQgY293YXJkbHkgc2FjcmlmaWNlcyBmcm9tIGNvd2FyZHMsIG5vciBhY2NvbXBsaXNoIHRoZWlyIHVubmF0dXJhbCBwcmF5ZXJzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Gb3IgaXQgaXMgbm90IGluIHRoZSBuYXR1cmUgb2YgdGhpbmdzIHRoYXQgaGUgd2hvIG1ha2VzIG5vIHNob3Qgc2hvdWxkIGhpdCB0aGUgbWFyayBleGFjdGx5LCBvciB0aGF0IGhlIHdobyBkb2VzIG5vdCBob2xkIGhpcyBncm91bmQgc2hvdWxkIHdpbiB0aGUgZGF5LCBvciwgaW4gYSB3b3JkLCB0aGF0IGhlIHdobyBkb2VzIG5vdGhpbmcgc2hvdWxkIGJlIHN1Y2Nlc3NmdWwgaW4gd2hhdCBoZSBkb2VzLCBvciB0aGF0IGEgd2lja2VkIG1hbiBzaG91bGQgYmUgcHJvc3Blcm91cy4gQnV0IHRoZSBnb2QgbGlzdGVuZWQgdG8gdGhlIHByYXllcnMgb2YgQWVtaWxpdXMsIHdobyBrZXB0IHdpZWxkaW5nIGhpcyBzcGVhciBhcyBoZSBwcmF5ZWQgZm9yIG1pZ2h0IGFuZCB2aWN0b3J5LCBhbmQgZm91Z2h0IGFzIGhlIGludml0ZWQgdGhlIGdvZCB0byBmaWdodCB3aXRoIGhpbS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['19.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIxOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgdGhlIGF0dGFjayBiZWdhbiwgQWVtaWxpdXMgY2FtZSB1cCBhbmQgZm91bmQgdGhhdCB0aGUgTWFjZWRvbmlhbiBiYXR0YWxpb25zIGhhZCBhbHJlYWR5IHBsYW50ZWQgdGhlIHRpcHMgb2YgdGhlaXIgbG9uZyBzcGVhcnMgaW4gdGhlIHNoaWVsZHMgb2YgdGhlIFJvbWFucywgd2hvIHdlcmUgdGh1cyBwcmV2ZW50ZWQgZnJvbSByZWFjaGluZyB0aGVtIHdpdGggdGhlaXIgc3dvcmRzLiBBbmQgd2hlbiBoZSBzYXcgdGhhdCB0aGUgcmVzdCBvZiB0aGUgTWFjZWRvbmlhbiB0cm9vcHMgYWxzbyB3ZXJlIGRyYXdpbmcgdGhlaXIgdGFyZ2V0cyBmcm9tIHRoZWlyIHNob3VsZGVycyByb3VuZCBpbiBmcm9udCBvZiB0aGVtLCBhbmQgd2l0aCBsb25nIHNwZWFycyBzYXQgYXQgb25lIGxldmVsIHdlcmUgd2l0aHN0YW5kaW5nIGhpcyBzaGllbGQtYmVhcmluZyB0cm9vcHMsIGFuZCBzYXcgdG9vIHRoZSBzdHJlbmd0aCBvZiB0aGVpciBpbnRlcmxvY2tlZCBzaGllbGRzIGFuZCB0aGUgZmllcmNlbmVzcyBvZiB0aGVpciBvbnNldCwgYW1hemVtZW50IGFuZCBmZWFyIHRvb2sgcG9zc2Vzc2lvbiBvZiBoaW0sIGFuZCBoZSBmZWx0IHRoYXQgaGUgaGFkIG5ldmVyIHNlZW4gYSBzaWdodCBtb3JlIGZlYXJmdWw7IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['19.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm9mdGVuIGluIGFmdGVyIHRpbWVzIGhlIHVzZWQgdG8gc3BlYWsgb2YgaGlzIGVtb3Rpb25zIGF0IHRoYXQgdGltZSBhbmQgb2Ygd2hhdCBoZSBzYXcuIEJ1dCB0aGVuLCBzaG93aW5nIHRvIGhpcyBzb2xkaWVycyBhIGdsYWQgYW5kIGNoZWVyZnVsIGNvdW50ZW5hbmNlLCBoZSByb2RlIHBhc3QgdGhlbSB3aXRob3V0IGhlbG1ldCBvciBicmVhc3RwbGF0ZS4gVGhlIGtpbmcgb2YgdGhlIE1hY2Vkb25pYW5zLCBvbiB0aGUgb3RoZXIgaGFuZCwgYWNjb3JkaW5nIHRvIFBvbHliaXVzLCBhcyBzb29uIGFzIHRoZSBiYXR0bGUgYmVnYW4sIHBsYXllZCB0aGUgY293YXJkIGFuZCByb2RlIGJhY2sgdG8gdGhlIGNpdHksIHVuZGVyIHByZXRlbmNlIG9mIHNhY3JpZmljaW5nIHRvIEhlcmFjbGVzLCBhIGdvZCB3aG8gZG9lcyBub3QgYWNjZXB0IGNvd2FyZGx5IHNhY3JpZmljZXMgZnJvbSBjb3dhcmRzLCBub3IgYWNjb21wbGlzaCB0aGVpciB1bm5hdHVyYWwgcHJheWVycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBpdCBpcyBub3QgaW4gdGhlIG5hdHVyZSBvZiB0aGluZ3MgdGhhdCBoZSB3aG8gbWFrZXMgbm8gc2hvdCBzaG91bGQgaGl0IHRoZSBtYXJrIGV4YWN0bHksIG9yIHRoYXQgaGUgd2hvIGRvZXMgbm90IGhvbGQgaGlzIGdyb3VuZCBzaG91bGQgd2luIHRoZSBkYXksIG9yLCBpbiBhIHdvcmQsIHRoYXQgaGUgd2hvIGRvZXMgbm90aGluZyBzaG91bGQgYmUgc3VjY2Vzc2Z1bCBpbiB3aGF0IGhlIGRvZXMsIG9yIHRoYXQgYSB3aWNrZWQgbWFuIHNob3VsZCBiZSBwcm9zcGVyb3VzLiBCdXQgdGhlIGdvZCBsaXN0ZW5lZCB0byB0aGUgcHJheWVycyBvZiBBZW1pbGl1cywgd2hvIGtlcHQgd2llbGRpbmcgaGlzIHNwZWFyIGFzIGhlIHByYXllZCBmb3IgbWlnaHQgYW5kIHZpY3RvcnksIGFuZCBmb3VnaHQgYXMgaGUgaW52aXRlZCB0aGUgZ29kIHRvIGZpZ2h0IHdpdGggaGltLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5Ib3dldmVyLCBhIGNlcnRhaW4gUG9zZWlkb25pdXMsIHdobyBzYXlzIGhlIGxpdmVkIGluIHRob3NlIHRpbWVzIGFuZCB0b29rIHBhcnQgaW4gdGhvc2UgYWN0aW9ucywgYW5kIHdobyBoYXMgd3JpdHRlbiBhIGhpc3Rvcnkgb2YgUGVyc2V1cyBpbiBzZXZlcmFsIGJvb2tzLCBzYXlzIGl0IHdhcyBub3Qgb3V0IG9mIGNvd2FyZGljZSwgbm9yIHdpdGggdGhlIGV4Y3VzZSBvZiB0aGUgc2FjcmlmaWNlLCB0aGF0IHRoZSBraW5nIHdlbnQgYXdheSwgYnV0IGJlY2F1c2Ugb24gdGhlIGRheSBiZWZvcmUgdGhlIGJhdHRsZSBhIGhvcnNlIGhhZCBraWNrZWQgaGltIG9uIHRoZSBsZWcuIEhlIHNheXMgZnVydGhlciB0aGF0IGluIHRoZSBiYXR0bGUsIGFsdGhvdWdoIGhlIHdhcyBpbiBhIHdyZXRjaGVkIHBsaWdodCwgYW5kIGFsdGhvdWdoIGhpcyBmcmllbmRzIHRyaWVkIHRvIGRldGVyIGhpbSwgdGhlIGtpbmcgb3JkZXJlZCBhIHBhY2staG9yc2UgdG8gYmUgYnJvdWdodCB0byBoaW0sIG1vdW50ZWQgaXQsIGFuZCBqb2luZWQgaGlzIHRyb29wcyBpbiB0aGUgcGhhbGFueCB3aXRob3V0IGEgYnJlYXN0cGxhdGU7IAoJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IGFtb25nIHRoZSBtaXNzaWxlcyBvZiBldmVyeSBzb3J0IHdoaWNoIHdlcmUgZmx5aW5nIG9uIGFsbCBzaWRlcywgYSBqYXZlbGluIG1hZGUgZW50aXJlbHkgb2YgaXJvbiBzbW90ZSBoaW0sIG5vdCB0b3VjaGluZyBoaW0gd2l0aCBpdHMgcG9pbnQsIGluZGVlZCwgYnV0IGNvdXJzaW5nIGFsb25nIGhpcyBsZWZ0IHNpZGUgd2l0aCBhbiBvYmxpcXVlIHN0cm9rZSwgYW5kIHRoZSBmb3JjZSBvZiBpdHMgcGFzc2FnZSB3YXMgc3VjaCB0aGF0IGl0IHRvcmUgaGlzIHR1bmljIGFuZCBtYWRlIGEgZGFyayByZWQgYnJ1aXNlIHVwb24gaGlzIGZsZXNoLCB0aGUgbWFyayBvZiB3aGljaCByZW1haW5lZCBmb3IgYSBsb25nIHRpbWUuIFRoaXMsIHRoZW4sIGlzIHdoYXQgUG9zZWlkb25pdXMgc2F5cyBpbiBkZWZlbmNlIG9mIFBlcnNldXMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['19.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkhvd2V2ZXIsIGEgY2VydGFpbiBQb3NlaWRvbml1cywgd2hvIHNheXMgaGUgbGl2ZWQgaW4gdGhvc2UgdGltZXMgYW5kIHRvb2sgcGFydCBpbiB0aG9zZSBhY3Rpb25zLCBhbmQgd2hvIGhhcyB3cml0dGVuIGEgaGlzdG9yeSBvZiBQZXJzZXVzIGluIHNldmVyYWwgYm9va3MsIHNheXMgaXQgd2FzIG5vdCBvdXQgb2YgY293YXJkaWNlLCBub3Igd2l0aCB0aGUgZXhjdXNlIG9mIHRoZSBzYWNyaWZpY2UsIHRoYXQgdGhlIGtpbmcgd2VudCBhd2F5LCBidXQgYmVjYXVzZSBvbiB0aGUgZGF5IGJlZm9yZSB0aGUgYmF0dGxlIGEgaG9yc2UgaGFkIGtpY2tlZCBoaW0gb24gdGhlIGxlZy4gSGUgc2F5cyBmdXJ0aGVyIHRoYXQgaW4gdGhlIGJhdHRsZSwgYWx0aG91Z2ggaGUgd2FzIGluIGEgd3JldGNoZWQgcGxpZ2h0LCBhbmQgYWx0aG91Z2ggaGlzIGZyaWVuZHMgdHJpZWQgdG8gZGV0ZXIgaGltLCB0aGUga2luZyBvcmRlcmVkIGEgcGFjay1ob3JzZSB0byBiZSBicm91Z2h0IHRvIGhpbSwgbW91bnRlZCBpdCwgYW5kIGpvaW5lZCBoaXMgdHJvb3BzIGluIHRoZSBwaGFsYW54IHdpdGhvdXQgYSBicmVhc3RwbGF0ZTsgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['19.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGF0IGFtb25nIHRoZSBtaXNzaWxlcyBvZiBldmVyeSBzb3J0IHdoaWNoIHdlcmUgZmx5aW5nIG9uIGFsbCBzaWRlcywgYSBqYXZlbGluIG1hZGUgZW50aXJlbHkgb2YgaXJvbiBzbW90ZSBoaW0sIG5vdCB0b3VjaGluZyBoaW0gd2l0aCBpdHMgcG9pbnQsIGluZGVlZCwgYnV0IGNvdXJzaW5nIGFsb25nIGhpcyBsZWZ0IHNpZGUgd2l0aCBhbiBvYmxpcXVlIHN0cm9rZSwgYW5kIHRoZSBmb3JjZSBvZiBpdHMgcGFzc2FnZSB3YXMgc3VjaCB0aGF0IGl0IHRvcmUgaGlzIHR1bmljIGFuZCBtYWRlIGEgZGFyayByZWQgYnJ1aXNlIHVwb24gaGlzIGZsZXNoLCB0aGUgbWFyayBvZiB3aGljaCByZW1haW5lZCBmb3IgYSBsb25nIHRpbWUuIFRoaXMsIHRoZW4sIGlzIHdoYXQgUG9zZWlkb25pdXMgc2F5cyBpbiBkZWZlbmNlIG9mIFBlcnNldXMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBSb21hbnMsIHdoZW4gdGhleSBhdHRhY2tlZCB0aGUgTWFjZWRvbmlhbiBwaGFsYW54LCB3ZXJlIHVuYWJsZSB0byBmb3JjZSBhIHBhc3NhZ2UsIGFuZCBTYWx2aXVzLCB0aGUgY29tbWFuZGVyIG9mIHRoZSBQZWxpZ25pYW5zLCBzbmF0Y2hlZCB0aGUgc3RhbmRhcmQgb2YgaGlzIGNvbXBhbnkgYW5kIGh1cmxlZCBpdCBpbiBhbW9uZyB0aGUgZW5lbXkuIFRoZW4gdGhlIFBlbGlnbmlhbnMsIHNpbmNlIGFtb25nIHRoZSBJdGFsaWFucyBpdCBpcyBhbiB1bm5hdHVyYWwgYW5kIGZsYWdyYW50IHRoaW5nIHRvIGFiYW5kb24gYSBzdGFuZGFyZCwgcnVzaGVkIG9uIHRvd2FyZHMgdGhlIHBsYWNlIHdoZXJlIGl0IHdhcywgYW5kIGRyZWFkZnVsIGxvc3NlcyB3ZXJlIGluZmxpY3RlZCBhbmQgc3VmZmVyZWQgb24gYm90aCBzaWRlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIHRoZSBSb21hbnMgdHJpZWQgdG8gdGhydXN0IGFzaWRlIHRoZSBsb25nIHNwZWFycyBvZiB0aGVpciBlbmVtaWVzIHdpdGggdGhlaXIgc3dvcmRzLCBvciB0byBjcm93ZCB0aGVtIGJhY2sgd2l0aCB0aGVpciBzaGllbGRzLCBvciB0byBzZWl6ZSBhbmQgcHV0IHRoZW0gYnkgd2l0aCB0aGVpciB2ZXJ5IGhhbmRzOyB3aGlsZSB0aGUgTWFjZWRvbmlhbnMsIGhvbGRpbmcgdGhlbSBmaXJtbHkgYWR2YW5jZWQgd2l0aCBib3RoIGhhbmRzLCBhbmQgcGllcmNpbmcgdGhvc2Ugd2hvIGZlbGwgdXBvbiB0aGVtLCBhcm1vdXIgYW5kIGFsbCwgc2luY2UgbmVpdGhlciBzaGllbGQgbm9yIGJyZWFzdHBsYXRlIGNvdWxkIHJlc2lzdCB0aGUgZm9yY2Ugb2YgdGhlIE1hY2Vkb25pYW4gbG9uZyBzcGVhciwgaHVybGVkIGhlYWRsb25nIGJhY2sgdGhlIFBlbGlnbmlhbnMgYW5kIE1hcnJ1Y2luaWFucywgd2hvLCB3aXRoIG5vIGNvbnNpZGVyYXRpb24gYnV0IHdpdGggYW5pbWFsIGZ1cnkgcnVzaGVkIHVwb24gdGhlIHN0cm9rZXMgdGhhdCBtZXQgdGhlbSwgYW5kIGEgY2VydGFpbiBkZWF0aC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiB0aGUgZmlyc3QgbGluZSBoYWQgdGh1cyBiZWVuIGN1dCB0byBwaWVjZXMsIHRob3NlIGFycmF5ZWQgYmVoaW5kIHRoZW0gd2VyZSBiZWF0ZW4gYmFjazsgYW5kIHRob3VnaCB0aGVyZSB3YXMgbm8gZmxpZ2h0LCBzdGlsbCB0aGV5IHJldGlyZWQgdG93YXJkcyB0aGUgbW91bnRhaW4gY2FsbGVkIE9sb2NydXMsIHNvIHRoYXQgZXZlbiBBZW1pbGl1cywgYXMgUG9zZWlkb25pdXMgdGVsbHMgdXMsIHdoZW4gaGUgc2F3IGl0LCByZW50IGhpcyBnYXJtZW50cy4gRm9yIHRoaXMgcGFydCBvZiBoaXMgYXJteSB3YXMgcmV0cmVhdGluZywgYW5kIHRoZSByZXN0IG9mIHRoZSBSb21hbnMgd2VyZSB0dXJuaW5nIGFzaWRlIGZyb20gdGhlIHBoYWxhbngsIHdoaWNoIGdhdmUgdGhlbSBubyBhY2Nlc3MgdG8gaXQsIGJ1dCBjb25mcm9udGVkIHRoZW0gYXMgaXQgd2VyZSB3aXRoIGEgZGVuc2UgYmFycmljYWRlIG9mIGxvbmcgc3BlYXJzLCBhbmQgd2FzIGV2ZXJ5d2hlcmUgdW5hc3NhaWxhYmxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['20.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIFJvbWFucywgd2hlbiB0aGV5IGF0dGFja2VkIHRoZSBNYWNlZG9uaWFuIHBoYWxhbngsIHdlcmUgdW5hYmxlIHRvIGZvcmNlIGEgcGFzc2FnZSwgYW5kIFNhbHZpdXMsIHRoZSBjb21tYW5kZXIgb2YgdGhlIFBlbGlnbmlhbnMsIHNuYXRjaGVkIHRoZSBzdGFuZGFyZCBvZiBoaXMgY29tcGFueSBhbmQgaHVybGVkIGl0IGluIGFtb25nIHRoZSBlbmVteS4gVGhlbiB0aGUgUGVsaWduaWFucywgc2luY2UgYW1vbmcgdGhlIEl0YWxpYW5zIGl0IGlzIGFuIHVubmF0dXJhbCBhbmQgZmxhZ3JhbnQgdGhpbmcgdG8gYWJhbmRvbiBhIHN0YW5kYXJkLCBydXNoZWQgb24gdG93YXJkcyB0aGUgcGxhY2Ugd2hlcmUgaXQgd2FzLCBhbmQgZHJlYWRmdWwgbG9zc2VzIHdlcmUgaW5mbGljdGVkIGFuZCBzdWZmZXJlZCBvbiBib3RoIHNpZGVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['20.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGUgUm9tYW5zIHRyaWVkIHRvIHRocnVzdCBhc2lkZSB0aGUgbG9uZyBzcGVhcnMgb2YgdGhlaXIgZW5lbWllcyB3aXRoIHRoZWlyIHN3b3Jkcywgb3IgdG8gY3Jvd2QgdGhlbSBiYWNrIHdpdGggdGhlaXIgc2hpZWxkcywgb3IgdG8gc2VpemUgYW5kIHB1dCB0aGVtIGJ5IHdpdGggdGhlaXIgdmVyeSBoYW5kczsgd2hpbGUgdGhlIE1hY2Vkb25pYW5zLCBob2xkaW5nIHRoZW0gZmlybWx5IGFkdmFuY2VkIHdpdGggYm90aCBoYW5kcywgYW5kIHBpZXJjaW5nIHRob3NlIHdobyBmZWxsIHVwb24gdGhlbSwgYXJtb3VyIGFuZCBhbGwsIHNpbmNlIG5laXRoZXIgc2hpZWxkIG5vciBicmVhc3RwbGF0ZSBjb3VsZCByZXNpc3QgdGhlIGZvcmNlIG9mIHRoZSBNYWNlZG9uaWFuIGxvbmcgc3BlYXIsIGh1cmxlZCBoZWFkbG9uZyBiYWNrIHRoZSBQZWxpZ25pYW5zIGFuZCBNYXJydWNpbmlhbnMsIHdobywgd2l0aCBubyBjb25zaWRlcmF0aW9uIGJ1dCB3aXRoIGFuaW1hbCBmdXJ5IHJ1c2hlZCB1cG9uIHRoZSBzdHJva2VzIHRoYXQgbWV0IHRoZW0sIGFuZCBhIGNlcnRhaW4gZGVhdGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIGZpcnN0IGxpbmUgaGFkIHRodXMgYmVlbiBjdXQgdG8gcGllY2VzLCB0aG9zZSBhcnJheWVkIGJlaGluZCB0aGVtIHdlcmUgYmVhdGVuIGJhY2s7IGFuZCB0aG91Z2ggdGhlcmUgd2FzIG5vIGZsaWdodCwgc3RpbGwgdGhleSByZXRpcmVkIHRvd2FyZHMgdGhlIG1vdW50YWluIGNhbGxlZCBPbG9jcnVzLCBzbyB0aGF0IGV2ZW4gQWVtaWxpdXMsIGFzIFBvc2VpZG9uaXVzIHRlbGxzIHVzLCB3aGVuIGhlIHNhdyBpdCwgcmVudCBoaXMgZ2FybWVudHMuIEZvciB0aGlzIHBhcnQgb2YgaGlzIGFybXkgd2FzIHJldHJlYXRpbmcsIGFuZCB0aGUgcmVzdCBvZiB0aGUgUm9tYW5zIHdlcmUgdHVybmluZyBhc2lkZSBmcm9tIHRoZSBwaGFsYW54LCB3aGljaCBnYXZlIHRoZW0gbm8gYWNjZXNzIHRvIGl0LCBidXQgY29uZnJvbnRlZCB0aGVtIGFzIGl0IHdlcmUgd2l0aCBhIGRlbnNlIGJhcnJpY2FkZSBvZiBsb25nIHNwZWFycywgYW5kIHdhcyBldmVyeXdoZXJlIHVuYXNzYWlsYWJsZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBncm91bmQgd2FzIHVuZXZlbiwgYW5kIHRoZSBsaW5lIG9mIGJhdHRsZSBzbyBsb25nIHRoYXQgc2hpZWxkcyBjb3VsZCBub3QgYmUga2VwdCBjb250aW51b3VzbHkgbG9ja2VkIHRvZ2V0aGVyLCBhbmQgQWVtaWxpdXMgdGhlcmVmb3JlIHNhdyB0aGF0IHRoZSBNYWNlZG9uaWFuIHBoYWxhbnggd2FzIGdldHRpbmcgbWFueSBjbGVmdHMgYW5kIGludGVydmFscyBpbiBpdCwgYXMgaXMgbmF0dXJhbCB3aGVuIGFybWllcyBhcmUgbGFyZ2UgYW5kIHRoZSBlZmZvcnRzIG9mIHRoZSBjb21iYXRhbnRzIGFyZSBkaXZlcnNpZmllZDsgcG9ydGlvbnMgb2YgaXQgd2VyZSBoYXJkIHByZXNzZWQsIGFuZCBvdGhlciBwb3J0aW9ucyB3ZXJlIGRhc2hpbmcgZm9yd2FyZC4gVGhlcmV1cG9uIGhlIGNhbWUgdXAgc3dpZnRseTsgYW5kIGRpdmlkaW5nIHVwIGhpcyBjb2hvcnRzLCBvcmRlcmVkIHRoZW0gdG8gcGx1bmdlIHF1aWNrbHkgaW50byB0aGUgaW50ZXJzdGljZXMgYW5kIGVtcHR5IHNwYWNlcyBpbiB0aGUgZW5lbXkncyBsaW5lIGFuZCB0aHVzIGNvbWUgdG8gY2xvc2UgcXVhcnRlcnMsIG5vdCBmaWdodGluZyBhIHNpbmdsZSBiYXR0bGUgYWdhaW5zdCB0aGVtIGFsbCwgYnV0IG1hbnkgc2VwYXJhdGUgYW5kIHN1Y2Nlc3NpdmUgYmF0dGxlcy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgaW5zdHJ1Y3Rpb25zIGJlaW5nIGdpdmVuIGJ5IEFlbWlsaXVzIHRvIGhpcyBvZmZpY2VycywgYW5kIGJ5IGhpcyBvZmZpY2VycyB0byB0aGUgc29sZGllcnMsIGFzIHNvb24gYXMgdGhleSBnb3QgYmV0d2VlbiB0aGUgcmFua3Mgb2YgdGhlIGVuZW15IGFuZCBzZXBhcmF0ZWQgdGhlbSwgdGhleSBhdHRhY2tlZCBzb21lIG9mIHRoZW0gaW4gdGhlIGZsYW5rIHdoZXJlIHRoZWlyIGFybW91ciBkaWQgbm90IHNoaWVsZCB0aGVtLCBhbmQgY3V0IG9mZiBvdGhlcnMgYnkgZmFsbGluZyB1cG9uIHRoZWlyIHJlYXIsIGFuZCB0aGUgc3RyZW5ndGggYW5kIGdlbmVyYWwgZWZmaWNpZW5jeSBvZiB0aGUgcGhhbGFueCB3YXMgbG9zdCB3aGVuIGl0IHdhcyB0aHVzIGJyb2tlbiB1cDsgYW5kIG5vdyB0aGF0IHRoZSBNYWNlZG9uaWFucyBlbmdhZ2VkIG1hbiB0byBtYW4gb3IgaW4gc21hbGwgZGV0YWNobWVudHMsIHRoZXkgY291bGQgb25seSBoYWNrIHdpdGggdGhlaXIgc21hbGwgZGFnZ2VycyBhZ2FpbnN0IHRoZSBmaXJtIGFuZCBsb25nIHNoaWVsZHMgb2YgdGhlIFJvbWFucywgYW5kIG9wcG9zZSBsaWdodCB3aWNrZXIgdGFyZ2V0cyB0byB0aGVpciBzd29yZHMsIHdoaWNoLCBzdWNoIHdhcyB0aGVpciB3ZWlnaHQgYW5kIG1vbWVudHVtLCBwZW5ldHJhdGVkIHRocm91Z2ggYWxsIHRoZWlyIGFybW91ciB0byB0aGVpciBib2RpZXMuIFRoZXkgdGhlcmVmb3JlIG1hZGUgYSBwb29yIHJlc2lzdGFuY2UgYW5kIGF0IGxhc3Qgd2VyZSByb3V0ZWQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['20.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgZ3JvdW5kIHdhcyB1bmV2ZW4sIGFuZCB0aGUgbGluZSBvZiBiYXR0bGUgc28gbG9uZyB0aGF0IHNoaWVsZHMgY291bGQgbm90IGJlIGtlcHQgY29udGludW91c2x5IGxvY2tlZCB0b2dldGhlciwgYW5kIEFlbWlsaXVzIHRoZXJlZm9yZSBzYXcgdGhhdCB0aGUgTWFjZWRvbmlhbiBwaGFsYW54IHdhcyBnZXR0aW5nIG1hbnkgY2xlZnRzIGFuZCBpbnRlcnZhbHMgaW4gaXQsIGFzIGlzIG5hdHVyYWwgd2hlbiBhcm1pZXMgYXJlIGxhcmdlIGFuZCB0aGUgZWZmb3J0cyBvZiB0aGUgY29tYmF0YW50cyBhcmUgZGl2ZXJzaWZpZWQ7IHBvcnRpb25zIG9mIGl0IHdlcmUgaGFyZCBwcmVzc2VkLCBhbmQgb3RoZXIgcG9ydGlvbnMgd2VyZSBkYXNoaW5nIGZvcndhcmQuIFRoZXJldXBvbiBoZSBjYW1lIHVwIHN3aWZ0bHk7IGFuZCBkaXZpZGluZyB1cCBoaXMgY29ob3J0cywgb3JkZXJlZCB0aGVtIHRvIHBsdW5nZSBxdWlja2x5IGludG8gdGhlIGludGVyc3RpY2VzIGFuZCBlbXB0eSBzcGFjZXMgaW4gdGhlIGVuZW15J3MgbGluZSBhbmQgdGh1cyBjb21lIHRvIGNsb3NlIHF1YXJ0ZXJzLCBub3QgZmlnaHRpbmcgYSBzaW5nbGUgYmF0dGxlIGFnYWluc3QgdGhlbSBhbGwsIGJ1dCBtYW55IHNlcGFyYXRlIGFuZCBzdWNjZXNzaXZlIGJhdHRsZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['20.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIGluc3RydWN0aW9ucyBiZWluZyBnaXZlbiBieSBBZW1pbGl1cyB0byBoaXMgb2ZmaWNlcnMsIGFuZCBieSBoaXMgb2ZmaWNlcnMgdG8gdGhlIHNvbGRpZXJzLCBhcyBzb29uIGFzIHRoZXkgZ290IGJldHdlZW4gdGhlIHJhbmtzIG9mIHRoZSBlbmVteSBhbmQgc2VwYXJhdGVkIHRoZW0sIHRoZXkgYXR0YWNrZWQgc29tZSBvZiB0aGVtIGluIHRoZSBmbGFuayB3aGVyZSB0aGVpciBhcm1vdXIgZGlkIG5vdCBzaGllbGQgdGhlbSwgYW5kIGN1dCBvZmYgb3RoZXJzIGJ5IGZhbGxpbmcgdXBvbiB0aGVpciByZWFyLCBhbmQgdGhlIHN0cmVuZ3RoIGFuZCBnZW5lcmFsIGVmZmljaWVuY3kgb2YgdGhlIHBoYWxhbnggd2FzIGxvc3Qgd2hlbiBpdCB3YXMgdGh1cyBicm9rZW4gdXA7IGFuZCBub3cgdGhhdCB0aGUgTWFjZWRvbmlhbnMgZW5nYWdlZCBtYW4gdG8gbWFuIG9yIGluIHNtYWxsIGRldGFjaG1lbnRzLCB0aGV5IGNvdWxkIG9ubHkgaGFjayB3aXRoIHRoZWlyIHNtYWxsIGRhZ2dlcnMgYWdhaW5zdCB0aGUgZmlybSBhbmQgbG9uZyBzaGllbGRzIG9mIHRoZSBSb21hbnMsIGFuZCBvcHBvc2UgbGlnaHQgd2lja2VyIHRhcmdldHMgdG8gdGhlaXIgc3dvcmRzLCB3aGljaCwgc3VjaCB3YXMgdGhlaXIgd2VpZ2h0IGFuZCBtb21lbnR1bSwgcGVuZXRyYXRlZCB0aHJvdWdoIGFsbCB0aGVpciBhcm1vdXIgdG8gdGhlaXIgYm9kaWVzLiBUaGV5IHRoZXJlZm9yZSBtYWRlIGEgcG9vciByZXNpc3RhbmNlIGFuZCBhdCBsYXN0IHdlcmUgcm91dGVkLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHN0cnVnZ2xlIGJldHdlZW4gdGhlbSB3YXMgZmllcmNlLiBIZXJlLCB0b28sIE1hcmN1cywgdGhlIHNvbiBvZiBDYXRvIGFuZCB0aGUgc29uLWluLWxhdyBvZiBBZW1pbGl1cywgd2hpbGUgZGlzcGxheWluZyBhbGwgcG9zc2libGUgcHJvd2VzcywgbG9zdCBoaXMgc3dvcmQuIFNpbmNlIGhlIHdhcyBhIHlvdW5nIG1hbiBvZiB0aGUgbW9zdCBnZW5lcm91cyBlZHVjYXRpb24gYW5kIG93ZWQgdG8gYSBncmVhdCBmYXRoZXIgcHJvb2ZzIG9mIGdyZWF0IHZhbG91ciwgaGUgdGhvdWdodCBsaWZlIG5vdCB3b3J0aCB0aGUgbGl2aW5nIGlmIGhlIGFiYW5kb25lZCBzdWNoIHNwb2lsIG9mIGhpcyBvd24gcGVyc29uIHRvIHRoZSBlbmVteSwgYW5kIHJhbiBhbG9uZyB0aGUgcmFua3MgdGVsbGluZyBldmVyeSBmcmllbmQgYW5kIGNvbXBhbmlvbiB3aG9tIGhlIHNhdyBvZiBoaXMgbWlzaGFwIGFuZCBiZWdnaW5nIHRoZW0gZm9yIGFpZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlc2UgbWFkZSBhIGdvb2RseSBudW1iZXIgb2YgYnJhdmUgbWVuLCBhbmQgbWFraW5nIHRoZWlyIHdheSB3aXRoIG9uZSBpbXB1bHNlIHRocm91Z2ggdGhlIHJlc3QsIHRoZXkgcHV0IHRoZW1zZWx2ZXMgdW5kZXIgaGlzIGxlYWQgYW5kIGZlbGwgdXBvbiB0aGUgZW5lbXkuIFdpdGggYSBncmVhdCBzdHJ1Z2dsZSwgbXVjaCBzbGF1Z2h0ZXIsIGFuZCBtYW55IHdvdW5kcywgdGhleSBkcm92ZSB0aGVtIGZyb20gdGhlIGdyb3VuZCwgYW5kIHdoZW4gdGhleSBoYWQgd29uIGEgZnJlZSBhbmQgZW1wdHkgcGxhY2UsIHRoZXkgc2V0IHRoZW1zZWx2ZXMgdG8gbG9va2luZyBmb3IgdGhlIHN3b3JkLiBBbmQgd2hlbiBhdCBsYXN0IGl0IHdhcyBmb3VuZCBoaWRkZW4gYW1vbmcgZ3JlYXQgaGVhcHMgb2YgYXJtb3VyIGFuZCBmYWxsZW4gYm9kaWVzLCB0aGV5IHdlcmUgZmlsbGVkIHdpdGggZXhjZWVkaW5nIGpveSwgYW5kIHJhaXNpbmcgc29uZ3Mgb2YgdHJpdW1waCBmZWxsIHlldCBtb3JlIGltcGV0dW91c2x5IHVwb24gdGhvc2Ugb2YgdGhlIGVuZW15IHdobyBzdGlsbCBoZWxkIHRvZ2V0aGVyLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5GaW5hbGx5LCB0aGUgdGhyZWUgdGhvdXNhbmQgcGlja2VkIG1lbiBvZiB0aGUgTWFjZWRvbmlhbnMsIHdobyByZW1haW5lZCBpbiBvcmRlciBhbmQga2VwdCBvbiBmaWdodGluZywgd2VyZSBhbGwgY3V0IHRvIHBpZWNlczsgYW5kIG9mIHRoZSByZXN0LCB3aG8gdG9vayB0byBmbGlnaHQsIHRoZSBzbGF1Z2h0ZXIgd2FzIGdyZWF0LCBzbyB0aGF0IHRoZSBwbGFpbiBhbmQgdGhlIGxvd2VyIHNsb3BlcyBvZiB0aGUgaGlsbHMgd2VyZSBjb3ZlcmVkIHdpdGggZGVhZCBib2RpZXMsIGFuZCB0aGUgd2F0ZXJzIG9mIHRoZSByaXZlciBMZXVjdXMgd2VyZSBzdGlsbCBtaW5nbGVkIHdpdGggYmxvb2Qgd2hlbiB0aGUgUm9tYW5zIGNyb3NzZWQgaXQgb24gdGhlIGRheSBhZnRlciB0aGUgYmF0dGxlLiBGb3IgaXQgaXMgc2FpZCB0aGF0IG92ZXIgdHdlbnR5LWZpdmUgdGhvdXNhbmQgb2YgdGhlaXIgZW5lbWllcyB3ZXJlIHNsYWluOyB3aGlsZSBvZiB0aGUgUm9tYW5zIHRoZXJlIGZlbGwsIGFjY29yZGluZyB0byBQb3NlaWRvbml1cywgYSBodW5kcmVkLCBhY2NvcmRpbmcgdG8gTmFzaWNhLCBlaWdodHkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['21.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRoZSBzdHJ1Z2dsZSBiZXR3ZWVuIHRoZW0gd2FzIGZpZXJjZS4gSGVyZSwgdG9vLCBNYXJjdXMsIHRoZSBzb24gb2YgQ2F0byBhbmQgdGhlIHNvbi1pbi1sYXcgb2YgQWVtaWxpdXMsIHdoaWxlIGRpc3BsYXlpbmcgYWxsIHBvc3NpYmxlIHByb3dlc3MsIGxvc3QgaGlzIHN3b3JkLiBTaW5jZSBoZSB3YXMgYSB5b3VuZyBtYW4gb2YgdGhlIG1vc3QgZ2VuZXJvdXMgZWR1Y2F0aW9uIGFuZCBvd2VkIHRvIGEgZ3JlYXQgZmF0aGVyIHByb29mcyBvZiBncmVhdCB2YWxvdXIsIGhlIHRob3VnaHQgbGlmZSBub3Qgd29ydGggdGhlIGxpdmluZyBpZiBoZSBhYmFuZG9uZWQgc3VjaCBzcG9pbCBvZiBoaXMgb3duIHBlcnNvbiB0byB0aGUgZW5lbXksIGFuZCByYW4gYWxvbmcgdGhlIHJhbmtzIHRlbGxpbmcgZXZlcnkgZnJpZW5kIGFuZCBjb21wYW5pb24gd2hvbSBoZSBzYXcgb2YgaGlzIG1pc2hhcCBhbmQgYmVnZ2luZyB0aGVtIGZvciBhaWQuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['21.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIG1hZGUgYSBnb29kbHkgbnVtYmVyIG9mIGJyYXZlIG1lbiwgYW5kIG1ha2luZyB0aGVpciB3YXkgd2l0aCBvbmUgaW1wdWxzZSB0aHJvdWdoIHRoZSByZXN0LCB0aGV5IHB1dCB0aGVtc2VsdmVzIHVuZGVyIGhpcyBsZWFkIGFuZCBmZWxsIHVwb24gdGhlIGVuZW15LiBXaXRoIGEgZ3JlYXQgc3RydWdnbGUsIG11Y2ggc2xhdWdodGVyLCBhbmQgbWFueSB3b3VuZHMsIHRoZXkgZHJvdmUgdGhlbSBmcm9tIHRoZSBncm91bmQsIGFuZCB3aGVuIHRoZXkgaGFkIHdvbiBhIGZyZWUgYW5kIGVtcHR5IHBsYWNlLCB0aGV5IHNldCB0aGVtc2VsdmVzIHRvIGxvb2tpbmcgZm9yIHRoZSBzd29yZC4gQW5kIHdoZW4gYXQgbGFzdCBpdCB3YXMgZm91bmQgaGlkZGVuIGFtb25nIGdyZWF0IGhlYXBzIG9mIGFybW91ciBhbmQgZmFsbGVuIGJvZGllcywgdGhleSB3ZXJlIGZpbGxlZCB3aXRoIGV4Y2VlZGluZyBqb3ksIGFuZCByYWlzaW5nIHNvbmdzIG9mIHRyaXVtcGggZmVsbCB5ZXQgbW9yZSBpbXBldHVvdXNseSB1cG9uIHRob3NlIG9mIHRoZSBlbmVteSB3aG8gc3RpbGwgaGVsZCB0b2dldGhlci4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['21.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZpbmFsbHksIHRoZSB0aHJlZSB0aG91c2FuZCBwaWNrZWQgbWVuIG9mIHRoZSBNYWNlZG9uaWFucywgd2hvIHJlbWFpbmVkIGluIG9yZGVyIGFuZCBrZXB0IG9uIGZpZ2h0aW5nLCB3ZXJlIGFsbCBjdXQgdG8gcGllY2VzOyBhbmQgb2YgdGhlIHJlc3QsIHdobyB0b29rIHRvIGZsaWdodCwgdGhlIHNsYXVnaHRlciB3YXMgZ3JlYXQsIHNvIHRoYXQgdGhlIHBsYWluIGFuZCB0aGUgbG93ZXIgc2xvcGVzIG9mIHRoZSBoaWxscyB3ZXJlIGNvdmVyZWQgd2l0aCBkZWFkIGJvZGllcywgYW5kIHRoZSB3YXRlcnMgb2YgdGhlIHJpdmVyIExldWN1cyB3ZXJlIHN0aWxsIG1pbmdsZWQgd2l0aCBibG9vZCB3aGVuIHRoZSBSb21hbnMgY3Jvc3NlZCBpdCBvbiB0aGUgZGF5IGFmdGVyIHRoZSBiYXR0bGUuIEZvciBpdCBpcyBzYWlkIHRoYXQgb3ZlciB0d2VudHktZml2ZSB0aG91c2FuZCBvZiB0aGVpciBlbmVtaWVzIHdlcmUgc2xhaW47IHdoaWxlIG9mIHRoZSBSb21hbnMgdGhlcmUgZmVsbCwgYWNjb3JkaW5nIHRvIFBvc2VpZG9uaXVzLCBhIGh1bmRyZWQsIGFjY29yZGluZyB0byBOYXNpY2EsIGVpZ2h0eS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIyIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoaXMgZ3JlYXRlc3Qgb2YgYWxsIHN0cnVnZ2xlcyB3YXMgbW9zdCBzcGVlZGlseSBkZWNpZGVkOyBmb3IgdGhlIFJvbWFucyBiZWdhbiBmaWdodGluZyBhdCB0aHJlZSBvJ2Nsb2NrIGluIHRoZSBhZnRlcm5vb24sIGFuZCB3ZXJlIHZpY3RvcmlvdXMgd2l0aGluIGFuIGhvdXI7IHRoZSByZXN0IG9mIHRoZSBkYXkgdGhleSBzcGVudCBpbiB0aGUgcHVyc3VpdCwgd2hpY2ggdGhleSBrZXB0IHVwIGZvciBhcyBtYW55IGFzIGEgaHVuZHJlZCBhbmQgdHdlbnR5IGZ1cmxvbmdzLCBzbyB0aGF0IGl0IHdhcyBhbHJlYWR5IGxhdGUgaW4gdGhlIGV2ZW5pbmcgd2hlbiB0aGV5IHJldHVybmVkLiBBbGwgdGhlIHJlc3Qgd2VyZSBtZXQgYnkgdGhlaXIgc2VydmFudHMgd2l0aCB0b3JjaGVzIGFuZCBjb25kdWN0ZWQgd2l0aCBqb3lmdWwgc2hvdXRzIHRvIHRoZWlyIHRlbnRzLCB3aGljaCB3ZXJlIGFibGF6ZSB3aXRoIGxpZ2h0IGFuZCBhZG9ybmVkIHdpdGggd3JlYXRocyBvZiBpdnkgYW5kIGxhdXJlbDsgYnV0IEFlbWlsaXVzIHRoZWlyIGdlbmVyYWwgd2FzIGEgcHJleSB0byBncmVhdCBzb3Jyb3cuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBvZiB0aGUgdHdvIHNvbnMgd2hvIHdlcmUgc2VydmluZyB1bmRlciBoaW0sIHRoZSB5b3VuZ2VyIHdhcyBub3doZXJlIHRvIGJlIGZvdW5kLCBhbmQgQWVtaWxpdXMgbG92ZWQgaGltIGVzcGVjaWFsbHksIGFuZCBzYXcgdGhhdCBoZSB3YXMgYnkgbmF0dXJlIG1vcmUgcHJvbmUgdG8gZXhjZWxsZW5jZSB0aGFuIGFueSBvZiBoaXMgYnJvdGhlcnMuIEJ1dCBoZSB3YXMgb2YgYSBwYXNzaW9uYXRlIGFuZCBhbWJpdGlvdXMgc3Bpcml0LCBhbmQgd2FzIHN0aWxsIGhhcmRseSBtb3JlIHRoYW4gYSBib3kgaW4geWVhcnMsIGFuZCBoaXMgZmF0aGVyIGNvbmNsdWRlZCB0aGF0IGhlIGhhZCBjZXJ0YWlubHkgcGVyaXNoZWQsIHdoZW4sIGZvciBsYWNrIG9mIGV4cGVyaWVuY2UsIGhlIGhhZCBiZWNvbWUgZW50YW5nbGVkIGFtb25nIHRoZSBlbmVteSBhcyB0aGV5IGZvdWdodC4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIHdob2xlIGFybXkgbGVhcm5lZCBvZiB0aGUgZGlzdHJlc3MgYW5kIGFuZ3Vpc2ggb2YgdGhlaXIgZ2VuZXJhbCwgYW5kIHNwcmluZ2luZyB1cCBmcm9tIHRoZWlyIHN1cHBlcnMsIHJhbiBhYm91dCB3aXRoIHRvcmNoZXMsIG1hbnkgdG8gdGhlIHRlbnQgb2YgQWVtaWxpdXMsIGFuZCBtYW55IGluIGZyb250IG9mIHRoZSByYW1wYXJ0cywgc2VhcmNoaW5nIGFtb25nIHRoZSBudW1lcm91cyBkZWFkIGJvZGllcy4gRGVqZWN0aW9uIHJlaWduZWQgaW4gdGhlIGNhbXAsIGFuZCB0aGUgcGxhaW4gd2FzIGZpbGxlZCB3aXRoIHRoZSBjcmllcyBvZiBtZW4gY2FsbGluZyBvdXQgdGhlIG5hbWUgb2YgU2NpcGlvLiBGb3IgZnJvbSB0aGUgdmVyeSBvdXRzZXQgaGUgaGFkIGJlZW4gYWRtaXJlZCBieSBldmVyeWJvZHksIHNpbmNlLCBiZXlvbmQgYW55IG90aGVyIG9uZSBvZiBoaXMgZmFtaWx5LCBoZSBoYWQgYSBuYXR1cmUgYWRhcHRlZCBmb3IgbGVhZGVyc2hpcCBpbiB3YXIgYW5kIHB1YmxpYyBzZXJ2aWNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['22.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoaXMgZ3JlYXRlc3Qgb2YgYWxsIHN0cnVnZ2xlcyB3YXMgbW9zdCBzcGVlZGlseSBkZWNpZGVkOyBmb3IgdGhlIFJvbWFucyBiZWdhbiBmaWdodGluZyBhdCB0aHJlZSBvJ2Nsb2NrIGluIHRoZSBhZnRlcm5vb24sIGFuZCB3ZXJlIHZpY3RvcmlvdXMgd2l0aGluIGFuIGhvdXI7IHRoZSByZXN0IG9mIHRoZSBkYXkgdGhleSBzcGVudCBpbiB0aGUgcHVyc3VpdCwgd2hpY2ggdGhleSBrZXB0IHVwIGZvciBhcyBtYW55IGFzIGEgaHVuZHJlZCBhbmQgdHdlbnR5IGZ1cmxvbmdzLCBzbyB0aGF0IGl0IHdhcyBhbHJlYWR5IGxhdGUgaW4gdGhlIGV2ZW5pbmcgd2hlbiB0aGV5IHJldHVybmVkLiBBbGwgdGhlIHJlc3Qgd2VyZSBtZXQgYnkgdGhlaXIgc2VydmFudHMgd2l0aCB0b3JjaGVzIGFuZCBjb25kdWN0ZWQgd2l0aCBqb3lmdWwgc2hvdXRzIHRvIHRoZWlyIHRlbnRzLCB3aGljaCB3ZXJlIGFibGF6ZSB3aXRoIGxpZ2h0IGFuZCBhZG9ybmVkIHdpdGggd3JlYXRocyBvZiBpdnkgYW5kIGxhdXJlbDsgYnV0IEFlbWlsaXVzIHRoZWlyIGdlbmVyYWwgd2FzIGEgcHJleSB0byBncmVhdCBzb3Jyb3cuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['22.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkZvciBvZiB0aGUgdHdvIHNvbnMgd2hvIHdlcmUgc2VydmluZyB1bmRlciBoaW0sIHRoZSB5b3VuZ2VyIHdhcyBub3doZXJlIHRvIGJlIGZvdW5kLCBhbmQgQWVtaWxpdXMgbG92ZWQgaGltIGVzcGVjaWFsbHksIGFuZCBzYXcgdGhhdCBoZSB3YXMgYnkgbmF0dXJlIG1vcmUgcHJvbmUgdG8gZXhjZWxsZW5jZSB0aGFuIGFueSBvZiBoaXMgYnJvdGhlcnMuIEJ1dCBoZSB3YXMgb2YgYSBwYXNzaW9uYXRlIGFuZCBhbWJpdGlvdXMgc3Bpcml0LCBhbmQgd2FzIHN0aWxsIGhhcmRseSBtb3JlIHRoYW4gYSBib3kgaW4geWVhcnMsIGFuZCBoaXMgZmF0aGVyIGNvbmNsdWRlZCB0aGF0IGhlIGhhZCBjZXJ0YWlubHkgcGVyaXNoZWQsIHdoZW4sIGZvciBsYWNrIG9mIGV4cGVyaWVuY2UsIGhlIGhhZCBiZWNvbWUgZW50YW5nbGVkIGFtb25nIHRoZSBlbmVteSBhcyB0aGV5IGZvdWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['22.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aG9sZSBhcm15IGxlYXJuZWQgb2YgdGhlIGRpc3RyZXNzIGFuZCBhbmd1aXNoIG9mIHRoZWlyIGdlbmVyYWwsIGFuZCBzcHJpbmdpbmcgdXAgZnJvbSB0aGVpciBzdXBwZXJzLCByYW4gYWJvdXQgd2l0aCB0b3JjaGVzLCBtYW55IHRvIHRoZSB0ZW50IG9mIEFlbWlsaXVzLCBhbmQgbWFueSBpbiBmcm9udCBvZiB0aGUgcmFtcGFydHMsIHNlYXJjaGluZyBhbW9uZyB0aGUgbnVtZXJvdXMgZGVhZCBib2RpZXMuIERlamVjdGlvbiByZWlnbmVkIGluIHRoZSBjYW1wLCBhbmQgdGhlIHBsYWluIHdhcyBmaWxsZWQgd2l0aCB0aGUgY3JpZXMgb2YgbWVuIGNhbGxpbmcgb3V0IHRoZSBuYW1lIG9mIFNjaXBpby4gRm9yIGZyb20gdGhlIHZlcnkgb3V0c2V0IGhlIGhhZCBiZWVuIGFkbWlyZWQgYnkgZXZlcnlib2R5LCBzaW5jZSwgYmV5b25kIGFueSBvdGhlciBvbmUgb2YgaGlzIGZhbWlseSwgaGUgaGFkIGEgbmF0dXJlIGFkYXB0ZWQgZm9yIGxlYWRlcnNoaXAgaW4gd2FyIGFuZCBwdWJsaWMgc2VydmljZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+V2VsbCwgdGhlbiwgd2hlbiBpdCB3YXMgYWxyZWFkeSBsYXRlIGFuZCBoZSB3YXMgYWxtb3N0IGRlc3BhaXJlZCBvZiwgaGUgY2FtZSBpbiBmcm9tIHRoZSBwdXJzdWl0IHdpdGggdHdvIG9yIHRocmVlIGNvbXJhZGVzLCBjb3ZlcmVkIHdpdGggdGhlIGJsb29kIG9mIHRoZSBlbmVtaWVzIGhlIGhhZCBzbGFpbiwgaGF2aW5nIGJlZW4sIGxpa2UgYSB5b3VuZyBob3VuZCBvZiBub2JsZSBicmVlZCwgY2FycmllZCBhd2F5IGJ5IHRoZSB1bmNvbnRyb2xsYWJsZSBwbGVhc3VyZSBvZiB0aGUgdmljdG9yeS4gVGhpcyB3YXMgdGhhdCBTY2lwaW8gd2hvLCBpbiBhZnRlciB0aW1lcywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE0NiBhbmQgMTMzIEIuQy48L25vdGU+IGRlc3Ryb3llZCBDYXJ0aGFnZSBhbmQgTnVtYW50aWEsIGFuZCBiZWNhbWUgYnkgZmFyIHRoZSBtb3N0IG5vYmxlIGFuZCBpbmZsdWVudGlhbCBSb21hbiBvZiBoaXMgZGF5LiBUaHVzIEZvcnR1bmUsIHBvc3Rwb25pbmcgdG8gYW5vdGhlciBzZWFzb24gaGVyIGplYWxvdXMgZGlzcGxlYXN1cmUgYXQgdGhlIGdyZWF0IHN1Y2Nlc3Mgb2YgQWVtaWxpdXMsIHJlc3RvcmVkIHRvIGhpbSB0aGVuIGluIGFsbCBjb21wbGV0ZW5lc3MgaGlzIHBsZWFzdXJlIGluIGhpcyB2aWN0b3J5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlIGJhdHRsZSBvZiBQeWRuYSBpcyBkZXNjcmliZWQgYnkgTGl2eSBpbiB4bGl2LiAzNi00MS48L25vdGU+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['22.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldlbGwsIHRoZW4sIHdoZW4gaXQgd2FzIGFscmVhZHkgbGF0ZSBhbmQgaGUgd2FzIGFsbW9zdCBkZXNwYWlyZWQgb2YsIGhlIGNhbWUgaW4gZnJvbSB0aGUgcHVyc3VpdCB3aXRoIHR3byBvciB0aHJlZSBjb21yYWRlcywgY292ZXJlZCB3aXRoIHRoZSBibG9vZCBvZiB0aGUgZW5lbWllcyBoZSBoYWQgc2xhaW4sIGhhdmluZyBiZWVuLCBsaWtlIGEgeW91bmcgaG91bmQgb2Ygbm9ibGUgYnJlZWQsIGNhcnJpZWQgYXdheSBieSB0aGUgdW5jb250cm9sbGFibGUgcGxlYXN1cmUgb2YgdGhlIHZpY3RvcnkuIFRoaXMgd2FzIHRoYXQgU2NpcGlvIHdobywgaW4gYWZ0ZXIgdGltZXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE0NiBhbmQgMTMzIEIuQy48L25vdGU+IGRlc3Ryb3llZCBDYXJ0aGFnZSBhbmQgTnVtYW50aWEsIGFuZCBiZWNhbWUgYnkgZmFyIHRoZSBtb3N0IG5vYmxlIGFuZCBpbmZsdWVudGlhbCBSb21hbiBvZiBoaXMgZGF5LiBUaHVzIEZvcnR1bmUsIHBvc3Rwb25pbmcgdG8gYW5vdGhlciBzZWFzb24gaGVyIGplYWxvdXMgZGlzcGxlYXN1cmUgYXQgdGhlIGdyZWF0IHN1Y2Nlc3Mgb2YgQWVtaWxpdXMsIHJlc3RvcmVkIHRvIGhpbSB0aGVuIGluIGFsbCBjb21wbGV0ZW5lc3MgaGlzIHBsZWFzdXJlIGluIGhpcyB2aWN0b3J5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgYmF0dGxlIG9mIFB5ZG5hIGlzIGRlc2NyaWJlZCBieSBMaXZ5IGluIHhsaXYuIDM2LTQxLjwvbm90ZT4KCQkJICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFBlcnNldXMgd2FzIGF3YXkgaW4gZmxpZ2h0IGZyb20gUHlkbmEgdG8gUGVsbGEsIHNpbmNlIHByYWN0aWNhbGx5IGFsbCBoaXMgaG9yc2VtZW4gY2FtZSBzYWZlbHkgb2ZmIGZyb20gdGhlIGJhdHRsZS4gQnV0IHdoZW4gaGlzIGZvb3RtZW4gb3ZlcnRvb2sgaGlzIGhvcnNlbWVuLCBhbmQsIGFidXNpbmcgdGhlbSBhcyBjb3dhcmRzIGFuZCB0cmFpdG9ycywgdHJpZWQgdG8gcHVzaCB0aGVtIGZyb20gdGhlaXIgaG9yc2VzIGFuZCBmZWxsIHRvIGJlYXRpbmcgdGhlbSwgdGhlIGtpbmcsIGFmcmFpZCBvZiB0aGUgdHVtdWx0LCB0dXJuZWQgaGlzIGhvcnNlIG91dCBvZiB0aGUgcm9hZCwgZHJldyBoaXMgcHVycGxlIHJvYmUgcm91bmQgYW5kIGhlbGQgaXQgaW4gZnJvbnQgb2YgaGltLCB0aGF0IGhlIG1pZ2h0IG5vdCBiZSBjb25zcGljdW91cywgYW5kIGNhcnJpZWQgaGlzIGRpYWRlbSBpbiBoaXMgaGFuZHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IGFsc28gY29udmVyc2Ugd2l0aCBoaXMgY29tcGFuaW9ucyBhcyBoZSB3YWxrZWQsIGhlIGRpc21vdW50ZWQgZnJvbSBoaXMgaG9yc2UgYW5kIGxlZCBoaW0gYWxvbmcuIEJ1dCBvZiB0aGVzZSBjb21wYW5pb25zLCBvbmUgcHJldGVuZGVkIHRoYXQgaGUgbXVzdCBmYXN0ZW4gYSBzaG9lIHRoYXQgaGFkIGJlY29tZSBsb29zZSwgYW5vdGhlciB0aGF0IGhlIG11c3Qgd2F0ZXIgaGlzIGhvcnNlLCBhbm90aGVyIHRoYXQgaGUgaGltc2VsZiB3YW50ZWQgd2F0ZXIgdG8gZHJpbmssIGFuZCBzbyB0aGV5IGdyYWR1YWxseSBsYWdnZWQgYmVoaW5kIGFuZCByYW4gYXdheSwgYmVjYXVzZSB0aGV5IGhhZCBtb3JlIGZlYXIgb2YgaGlzIGNydWVsdHkgdGhhbiBvZiB0aGUgZW5lbXkuIEZvciBoZSB3YXMgbGFjZXJhdGVkIGJ5IGhpcyBtaXNmb3J0dW5lcywgYW5kIHNvdWdodCB0byB0dXJuIHRoZSByZXNwb25zaWJpbGl0eSBmb3IgaGlzIGRlZmVhdCBhd2F5IGZyb20gaGltc2VsZiBhbmQgdXBvbiBldmVyeWJvZHkgZWxzZS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+SGUgZW50ZXJlZCBQZWxsYSBkdXJpbmcgdGhlIG5pZ2h0LCBhbmQgd2hlbiBFdWN0dXMgYW5kIEV1bGFldXMsIGhpcyB0cmVhc3VyZXJzLCBjYW1lIHRvIG1lZXQgaGltLCBhbmQsIHdoYXQgd2l0aCB0aGVpciBjZW5zdXJlIGZvciB3aGF0IGhhZCBoYXBwZW5lZCBhbmQgdGhlaXIgdW5zZWFzb25hYmx5IGJvbGQgc3BlZWNoZXMgYW5kIGNvdW5zZWxzLCBlbnJhZ2VkIGhpbSwgaGUgc2xldyB0aGVtLCBzbWl0aW5nIGJvdGggb2YgdGhlbSBoaW1zZWxmIHdpdGggaGlzIHNtYWxsLXN3b3JkLiBBZnRlciB0aGlzIG5vIG9uZSByZW1haW5lZCB3aXRoIGhpbSBleGNlcHQgRXZhbmRlciB0aGUgQ3JldGFuLCBBcmNoZWRhbXVzIHRoZSBBZXRvbGlhbiwgYW5kIE5lb24gdGhlIEJvZW90aWFuLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5PZiBoaXMgc29sZGllcnMsIG9ubHkgdGhlIENyZXRhbnMgZm9sbG93ZWQgYWZ0ZXIgaGltLCBub3QgdGhyb3VnaCBnb29kIHdpbGwsIGJ1dCBiZWNhdXNlIHRoZXkgd2VyZSBhcyBkZXZvdGVkIHRvIGhpcyByaWNoZXMgYXMgYmVlcyB0byB0aGVpciBob25leWNvbWJzLiBGb3IgaGUgd2FzIGNhcnJ5aW5nIGFsb25nIHZhc3QgdHJlYXN1cmVzLCBhbmQgaGFkIGhhbmRlZCBvdXQgZnJvbSB0aGVtIGZvciBkaXN0cmlidXRpb24gYW1vbmcgdGhlIENyZXRhbnMgZHJpbmtpbmcgY3VwcyBhbmQgbWl4aW5nIGJvd2xzIGFuZCBvdGhlciBmdXJuaXR1cmUgb2YgZ29sZCBhbmQgc2lsdmVyIHRvIGEgdmFsdWUgb2YgZmlmdHkgdGFsZW50cy4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+SGUgYXJyaXZlZCBhdCBBbXBoaXBvbGlzIGZpcnN0LCBhbmQgdGhlbiBmcm9tIHRoZXJlIGF0IEdhbGVwc3VzLCBhbmQgbm93IHRoYXQgaGlzIGZlYXIgaGFkIGFiYXRlZCBhIGxpdHRsZSwgaGUgcmVsYXBzZWQgaW50byB0aGF0IGNvbmdlbml0YWwgYW5kIG9sZGVzdCBkaXNlYXNlIG9mIGhpcywgbmFtZWx5LCBwYXJzaW1vbnksIGFuZCBsYW1lbnRlZCB0byBoaXMgZnJpZW5kcyB0aGF0IHRocm91Z2ggaWdub3JhbmNlIGhlIGhhZCBzdWZmZXJlZCBzb21lIG9mIHRoZSBnb2xkIHBsYXRlIG9mIEFsZXhhbmRlciB0aGUgR3JlYXQgdG8gZmFsbCBpbnRvIHRoZSBoYW5kcyBvZiB0aGUgQ3JldGFucywgYW5kIHdpdGggdGVhcmZ1bCBzdXBwbGljYXRpb25zIGhlIGJlc291Z2h0IHRob3NlIHdobyBoYWQgaXQgdG8gZXhjaGFuZ2UgaXQgZm9yIG1vbmV5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5Ob3cgdGhvc2UgdGhhdCB1bmRlcnN0b29kIGhpbSBhY2N1cmF0ZWx5IGRpZCBub3QgZmFpbCB0byBzZWUgdGhhdCBoZSB3YXMgcGxheWluZyB0aGUgQ3JldGFuIGFnYWluc3QgQ3JldGFuczsgYnV0IHRob3NlIHdobyBsaXN0ZW5lZCB0byBoaW0sIGFuZCBnYXZlIGJhY2sgdGhlIHBsYXRlLCB3ZXJlIGNoZWF0ZWQuIEZvciBoZSBkaWQgbm90IHBheSB0aGVtIHRoZSBtb25leSBoZSBoYWQgcHJvbWlzZWQsIGJ1dCBhZnRlciBjcmFmdGlseSBnZXR0aW5nIHRoaXJ0eSB0YWxlbnRzIGZyb20gaGlzIGZyaWVuZHMsIHdoaWNoIGhpcyBlbmVtaWVzIHdlcmUgdG8gZ2V0IHNvb24gYWZ0ZXJ3YXJkcywgaGUgc2FpbGVkIGFjcm9zcyB3aXRoIHRoZW0gdG8gU2Ftb3RocmFjZSwgd2hlcmUgaGUgdG9vayByZWZ1Z2UgYXMgYSBzdXBwbGlhbnQgaW4gdGhlIHRlbXBsZSBvZiB0aGUgRGlvc2N1cmkuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['23.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IFBlcnNldXMgd2FzIGF3YXkgaW4gZmxpZ2h0IGZyb20gUHlkbmEgdG8gUGVsbGEsIHNpbmNlIHByYWN0aWNhbGx5IGFsbCBoaXMgaG9yc2VtZW4gY2FtZSBzYWZlbHkgb2ZmIGZyb20gdGhlIGJhdHRsZS4gQnV0IHdoZW4gaGlzIGZvb3RtZW4gb3ZlcnRvb2sgaGlzIGhvcnNlbWVuLCBhbmQsIGFidXNpbmcgdGhlbSBhcyBjb3dhcmRzIGFuZCB0cmFpdG9ycywgdHJpZWQgdG8gcHVzaCB0aGVtIGZyb20gdGhlaXIgaG9yc2VzIGFuZCBmZWxsIHRvIGJlYXRpbmcgdGhlbSwgdGhlIGtpbmcsIGFmcmFpZCBvZiB0aGUgdHVtdWx0LCB0dXJuZWQgaGlzIGhvcnNlIG91dCBvZiB0aGUgcm9hZCwgZHJldyBoaXMgcHVycGxlIHJvYmUgcm91bmQgYW5kIGhlbGQgaXQgaW4gZnJvbnQgb2YgaGltLCB0aGF0IGhlIG1pZ2h0IG5vdCBiZSBjb25zcGljdW91cywgYW5kIGNhcnJpZWQgaGlzIGRpYWRlbSBpbiBoaXMgaGFuZHMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['23.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCBpbiBvcmRlciB0aGF0IGhlIG1pZ2h0IGFsc28gY29udmVyc2Ugd2l0aCBoaXMgY29tcGFuaW9ucyBhcyBoZSB3YWxrZWQsIGhlIGRpc21vdW50ZWQgZnJvbSBoaXMgaG9yc2UgYW5kIGxlZCBoaW0gYWxvbmcuIEJ1dCBvZiB0aGVzZSBjb21wYW5pb25zLCBvbmUgcHJldGVuZGVkIHRoYXQgaGUgbXVzdCBmYXN0ZW4gYSBzaG9lIHRoYXQgaGFkIGJlY29tZSBsb29zZSwgYW5vdGhlciB0aGF0IGhlIG11c3Qgd2F0ZXIgaGlzIGhvcnNlLCBhbm90aGVyIHRoYXQgaGUgaGltc2VsZiB3YW50ZWQgd2F0ZXIgdG8gZHJpbmssIGFuZCBzbyB0aGV5IGdyYWR1YWxseSBsYWdnZWQgYmVoaW5kIGFuZCByYW4gYXdheSwgYmVjYXVzZSB0aGV5IGhhZCBtb3JlIGZlYXIgb2YgaGlzIGNydWVsdHkgdGhhbiBvZiB0aGUgZW5lbXkuIEZvciBoZSB3YXMgbGFjZXJhdGVkIGJ5IGhpcyBtaXNmb3J0dW5lcywgYW5kIHNvdWdodCB0byB0dXJuIHRoZSByZXNwb25zaWJpbGl0eSBmb3IgaGlzIGRlZmVhdCBhd2F5IGZyb20gaGltc2VsZiBhbmQgdXBvbiBldmVyeWJvZHkgZWxzZS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkhlIGVudGVyZWQgUGVsbGEgZHVyaW5nIHRoZSBuaWdodCwgYW5kIHdoZW4gRXVjdHVzIGFuZCBFdWxhZXVzLCBoaXMgdHJlYXN1cmVycywgY2FtZSB0byBtZWV0IGhpbSwgYW5kLCB3aGF0IHdpdGggdGhlaXIgY2Vuc3VyZSBmb3Igd2hhdCBoYWQgaGFwcGVuZWQgYW5kIHRoZWlyIHVuc2Vhc29uYWJseSBib2xkIHNwZWVjaGVzIGFuZCBjb3Vuc2VscywgZW5yYWdlZCBoaW0sIGhlIHNsZXcgdGhlbSwgc21pdGluZyBib3RoIG9mIHRoZW0gaGltc2VsZiB3aXRoIGhpcyBzbWFsbC1zd29yZC4gQWZ0ZXIgdGhpcyBubyBvbmUgcmVtYWluZWQgd2l0aCBoaW0gZXhjZXB0IEV2YW5kZXIgdGhlIENyZXRhbiwgQXJjaGVkYW11cyB0aGUgQWV0b2xpYW4sIGFuZCBOZW9uIHRoZSBCb2VvdGlhbi4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPk9mIGhpcyBzb2xkaWVycywgb25seSB0aGUgQ3JldGFucyBmb2xsb3dlZCBhZnRlciBoaW0sIG5vdCB0aHJvdWdoIGdvb2Qgd2lsbCwgYnV0IGJlY2F1c2UgdGhleSB3ZXJlIGFzIGRldm90ZWQgdG8gaGlzIHJpY2hlcyBhcyBiZWVzIHRvIHRoZWlyIGhvbmV5Y29tYnMuIEZvciBoZSB3YXMgY2FycnlpbmcgYWxvbmcgdmFzdCB0cmVhc3VyZXMsIGFuZCBoYWQgaGFuZGVkIG91dCBmcm9tIHRoZW0gZm9yIGRpc3RyaWJ1dGlvbiBhbW9uZyB0aGUgQ3JldGFucyBkcmlua2luZyBjdXBzIGFuZCBtaXhpbmcgYm93bHMgYW5kIG90aGVyIGZ1cm5pdHVyZSBvZiBnb2xkIGFuZCBzaWx2ZXIgdG8gYSB2YWx1ZSBvZiBmaWZ0eSB0YWxlbnRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['23.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkhlIGFycml2ZWQgYXQgQW1waGlwb2xpcyBmaXJzdCwgYW5kIHRoZW4gZnJvbSB0aGVyZSBhdCBHYWxlcHN1cywgYW5kIG5vdyB0aGF0IGhpcyBmZWFyIGhhZCBhYmF0ZWQgYSBsaXR0bGUsIGhlIHJlbGFwc2VkIGludG8gdGhhdCBjb25nZW5pdGFsIGFuZCBvbGRlc3QgZGlzZWFzZSBvZiBoaXMsIG5hbWVseSwgcGFyc2ltb255LCBhbmQgbGFtZW50ZWQgdG8gaGlzIGZyaWVuZHMgdGhhdCB0aHJvdWdoIGlnbm9yYW5jZSBoZSBoYWQgc3VmZmVyZWQgc29tZSBvZiB0aGUgZ29sZCBwbGF0ZSBvZiBBbGV4YW5kZXIgdGhlIEdyZWF0IHRvIGZhbGwgaW50byB0aGUgaGFuZHMgb2YgdGhlIENyZXRhbnMsIGFuZCB3aXRoIHRlYXJmdWwgc3VwcGxpY2F0aW9ucyBoZSBiZXNvdWdodCB0aG9zZSB3aG8gaGFkIGl0IHRvIGV4Y2hhbmdlIGl0IGZvciBtb25leS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['23.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vdyB0aG9zZSB0aGF0IHVuZGVyc3Rvb2QgaGltIGFjY3VyYXRlbHkgZGlkIG5vdCBmYWlsIHRvIHNlZSB0aGF0IGhlIHdhcyBwbGF5aW5nIHRoZSBDcmV0YW4gYWdhaW5zdCBDcmV0YW5zOyBidXQgdGhvc2Ugd2hvIGxpc3RlbmVkIHRvIGhpbSwgYW5kIGdhdmUgYmFjayB0aGUgcGxhdGUsIHdlcmUgY2hlYXRlZC4gRm9yIGhlIGRpZCBub3QgcGF5IHRoZW0gdGhlIG1vbmV5IGhlIGhhZCBwcm9taXNlZCwgYnV0IGFmdGVyIGNyYWZ0aWx5IGdldHRpbmcgdGhpcnR5IHRhbGVudHMgZnJvbSBoaXMgZnJpZW5kcywgd2hpY2ggaGlzIGVuZW1pZXMgd2VyZSB0byBnZXQgc29vbiBhZnRlcndhcmRzLCBoZSBzYWlsZWQgYWNyb3NzIHdpdGggdGhlbSB0byBTYW1vdGhyYWNlLCB3aGVyZSBoZSB0b29rIHJlZnVnZSBhcyBhIHN1cHBsaWFudCBpbiB0aGUgdGVtcGxlIG9mIHRoZSBEaW9zY3VyaS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgTWFjZWRvbmlhbnMgYXJlIGFsd2F5cyBzYWlkIHRvIGhhdmUgYmVlbiBsb3ZlcnMgb2YgdGhlaXIga2luZ3MsIGJ1dCBhdCB0aGlzIHRpbWUsIGZlZWxpbmcgdGhhdCB0aGVpciBwcm9wIHdhcyBzaGF0dGVyZWQgYW5kIGFsbCBoYWQgZmFsbGVuIHdpdGggaXQsIHRoZXkgcHV0IHRoZW1zZWx2ZXMgaW50byB0aGUgaGFuZHMgb2YgQWVtaWxpdXMsIGFuZCBpbiB0d28gZGF5cyBtYWRlIGhpbSBtYXN0ZXIgb2YgYWxsIE1hY2Vkb25pYS4gQW5kIHRoaXMgd291bGQgc2VlbSB0byBiZWFyIHdpdG5lc3MgaW4gZmF2b3VyIG9mIHRob3NlIHdobyBkZWNsYXJlIHRoYXQgdGhlc2UgYWNoaWV2ZW1lbnRzIG9mIGhpcyB3ZXJlIGR1ZSB0byBhIHJhcmUgZ29vZCBmb3J0dW5lLiBBbmQgc3RpbGwgZnVydGhlciwgdGhhdCB3aGljaCBiZWZlbGwgaGltIGF0IGhpcyBzYWNyaWZpY2Ugd2FzIGEgdG9rZW4gb2YgZGl2aW5lIGZhdm91ci4gV2hlbiwgbmFtZWx5LCBBZW1pbGl1cyB3YXMgc2FjcmlmaWNpbmcgaW4gQW1waGlwb2xpcywgYW5kIHRoZSBzYWNyZWQgcml0ZXMgd2VyZSBiZWd1biwgYSB0aHVuZGVyYm9sdCBkYXJ0ZWQgZG93biB1cG9uIHRoZSBhbHRhciwgc2V0IGl0IG9uIGZpcmUsIGFuZCBjb25zdW1lZCB0aGUgc2FjcmlmaWNlIHdpdGggaXQuICAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgYW4gYWx0b2dldGhlciBtb3JlIHNpZ25hbCBpbnN0YW5jZSBvZiBkaXZpbmUgZmF2b3VyIGFuZCBnb29kIGZvcnR1bmUgaXMgc2VlbiBpbiB0aGUgd2F5IHRoZSBydW1vdXIgb2YgaGlzIHZpY3Rvcnkgc3ByZWFkLiBGb3IgaXQgd2FzIG9ubHkgdGhlIGZvdXJ0aCBkYXkgYWZ0ZXIgUGVyc2V1cyBoYWQgYmVlbiBkZWZlYXRlZCBhdCBQeWRuYSwgYW5kIGF0IFJvbWUgdGhlIHBlb3BsZSB3ZXJlIHdhdGNoaW5nIGVxdWVzdHJpYW4gY29udGVzdHMsIHdoZW4gc3VkZGVubHkgYSByZXBvcnQgc3ByYW5nIHVwIGF0IHRoZSBlbnRyYW5jZSBvZiB0aGUgdGhlYXRyZSB0aGF0IEFlbWlsaXVzIGhhZCBjb25xdWVyZWQgUGVyc2V1cyBpbiBhIGdyZWF0IGJhdHRsZSBhbmQgcmVkdWNlZCBhbGwgTWFjZWRvbmlhLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGlzIHRoZSBydW1vdXIgc3ByZWFkIHF1aWNrbHkgYW1vbmcgdGhlIG11bHRpdHVkZSwgYW5kIGpveSBidXJzdCBmb3J0aCwgYWNjb21wYW5pZWQgYnkgc2hvdXRzIGFuZCBjbGFwcGluZyBvZiBoYW5kcywgYW5kIHByZXZhaWxlZCBpbiB0aGUgY2l0eSBhbGwgdGhhdCBkYXkuIFRoZW4sIHNpbmNlIHRoZSBzdG9yeSBjb3VsZCBub3QgYmUgdHJhY2VkIHRvIGFueSBzdXJlIHNvdXJjZSwgYnV0IHNlZW1lZCB0byBiZSBjdXJyZW50IGV2ZXJ5d2hlcmUgYWxpa2UsIGZvciB0aGUgdGltZSBiZWluZyB0aGUgcnVtb3VyIHZhbmlzaGVkIGludG8gdGhpbiBhaXI7IGJ1dCB3aGVuLCBhIGZldyBkYXlzIGFmdGVyd2FyZHMsIHRoZXkgd2VyZSBjbGVhcmx5IGluZm9ybWVkIG9mIHRoZSBtYXR0ZXIsIHRoZXkgd2VyZSBhc3RvbmlzaGVkIGF0IHRoZSB0aWRpbmdzIHdoaWNoIGhhZCByZWFjaGVkIHRoZW0gZmlyc3QsIHNlZWluZyB0aGF0IGluIHRoZSBmaWN0aW9uIHRoZXJlIHdhcyB0cnV0aC4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['24.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGUgTWFjZWRvbmlhbnMgYXJlIGFsd2F5cyBzYWlkIHRvIGhhdmUgYmVlbiBsb3ZlcnMgb2YgdGhlaXIga2luZ3MsIGJ1dCBhdCB0aGlzIHRpbWUsIGZlZWxpbmcgdGhhdCB0aGVpciBwcm9wIHdhcyBzaGF0dGVyZWQgYW5kIGFsbCBoYWQgZmFsbGVuIHdpdGggaXQsIHRoZXkgcHV0IHRoZW1zZWx2ZXMgaW50byB0aGUgaGFuZHMgb2YgQWVtaWxpdXMsIGFuZCBpbiB0d28gZGF5cyBtYWRlIGhpbSBtYXN0ZXIgb2YgYWxsIE1hY2Vkb25pYS4gQW5kIHRoaXMgd291bGQgc2VlbSB0byBiZWFyIHdpdG5lc3MgaW4gZmF2b3VyIG9mIHRob3NlIHdobyBkZWNsYXJlIHRoYXQgdGhlc2UgYWNoaWV2ZW1lbnRzIG9mIGhpcyB3ZXJlIGR1ZSB0byBhIHJhcmUgZ29vZCBmb3J0dW5lLiBBbmQgc3RpbGwgZnVydGhlciwgdGhhdCB3aGljaCBiZWZlbGwgaGltIGF0IGhpcyBzYWNyaWZpY2Ugd2FzIGEgdG9rZW4gb2YgZGl2aW5lIGZhdm91ci4gV2hlbiwgbmFtZWx5LCBBZW1pbGl1cyB3YXMgc2FjcmlmaWNpbmcgaW4gQW1waGlwb2xpcywgYW5kIHRoZSBzYWNyZWQgcml0ZXMgd2VyZSBiZWd1biwgYSB0aHVuZGVyYm9sdCBkYXJ0ZWQgZG93biB1cG9uIHRoZSBhbHRhciwgc2V0IGl0IG9uIGZpcmUsIGFuZCBjb25zdW1lZCB0aGUgc2FjcmlmaWNlIHdpdGggaXQuICAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['24.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBhbiBhbHRvZ2V0aGVyIG1vcmUgc2lnbmFsIGluc3RhbmNlIG9mIGRpdmluZSBmYXZvdXIgYW5kIGdvb2QgZm9ydHVuZSBpcyBzZWVuIGluIHRoZSB3YXkgdGhlIHJ1bW91ciBvZiBoaXMgdmljdG9yeSBzcHJlYWQuIEZvciBpdCB3YXMgb25seSB0aGUgZm91cnRoIGRheSBhZnRlciBQZXJzZXVzIGhhZCBiZWVuIGRlZmVhdGVkIGF0IFB5ZG5hLCBhbmQgYXQgUm9tZSB0aGUgcGVvcGxlIHdlcmUgd2F0Y2hpbmcgZXF1ZXN0cmlhbiBjb250ZXN0cywgd2hlbiBzdWRkZW5seSBhIHJlcG9ydCBzcHJhbmcgdXAgYXQgdGhlIGVudHJhbmNlIG9mIHRoZSB0aGVhdHJlIHRoYXQgQWVtaWxpdXMgaGFkIGNvbnF1ZXJlZCBQZXJzZXVzIGluIGEgZ3JlYXQgYmF0dGxlIGFuZCByZWR1Y2VkIGFsbCBNYWNlZG9uaWEuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['24.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoaXMgdGhlIHJ1bW91ciBzcHJlYWQgcXVpY2tseSBhbW9uZyB0aGUgbXVsdGl0dWRlLCBhbmQgam95IGJ1cnN0IGZvcnRoLCBhY2NvbXBhbmllZCBieSBzaG91dHMgYW5kIGNsYXBwaW5nIG9mIGhhbmRzLCBhbmQgcHJldmFpbGVkIGluIHRoZSBjaXR5IGFsbCB0aGF0IGRheS4gVGhlbiwgc2luY2UgdGhlIHN0b3J5IGNvdWxkIG5vdCBiZSB0cmFjZWQgdG8gYW55IHN1cmUgc291cmNlLCBidXQgc2VlbWVkIHRvIGJlIGN1cnJlbnQgZXZlcnl3aGVyZSBhbGlrZSwgZm9yIHRoZSB0aW1lIGJlaW5nIHRoZSBydW1vdXIgdmFuaXNoZWQgaW50byB0aGluIGFpcjsgYnV0IHdoZW4sIGEgZmV3IGRheXMgYWZ0ZXJ3YXJkcywgdGhleSB3ZXJlIGNsZWFybHkgaW5mb3JtZWQgb2YgdGhlIG1hdHRlciwgdGhleSB3ZXJlIGFzdG9uaXNoZWQgYXQgdGhlIHRpZGluZ3Mgd2hpY2ggaGFkIHJlYWNoZWQgdGhlbSBmaXJzdCwgc2VlaW5nIHRoYXQgaW4gdGhlIGZpY3Rpb24gdGhlcmUgd2FzIHRydXRoLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMjUiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4gWFhWLiBJdCBpcyBzYWlkIGFsc28gdGhhdCBhIHJlcG9ydCBvZiB0aGUgYmF0dGxlIGZvdWdodCBieSB0aGUgSXRhbGlhbiBHcmVla3MgYXQgdGhlIHJpdmVyIFNhZ3JhCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGJhdHRsZSBiZXR3ZWVuIHRoZSBMb2NyaWFucyBhbmQgQ3JvdG9uaWF0cywgYXQgc29tZSB0aW1lIGluIHRoZSBzaXh0aCBjZW50dXJ5IEIuQy48L25vdGU+IHJlYWNoZWQgUGVsb3Bvbm5lc3VzIG9uIHRoZSBzYW1lIGRheSwgYW5kIHNvIGRpZCB0aGF0IG9mIHRoZSBiYXR0bGUgd2l0aCB0aGUgTWVkZXMgYXQgTXljYWxlIGNvbWUgb24gdGhlIHNhbWUgZGF5IHRvIFBsYXRhZWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JdCB3YXMgd2hlbiB0aGUgR3JlZWtzIGF0IE15Y2FsZSB3ZXJlIGFib3V0IHRvIGF0dGFjayB0aGUgUGVyc2lhbnMgdGhhdCBhIHJ1bW91ciBjYW1lIHRvIHRoZW0gb2YgdGhlIHZpY3Rvcnkgb2YgdGhlIEdyZWVrcyBhdCBQbGF0YWVhIG92ZXIgTWFyZG9uaXVzICg8YmlibCBkZWZhdWx0PSJOTyIgbj0iSGR0LiA5LjEwMCIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCBpeC4gMTAwPC9iaWJsPikuPC9ub3RlPiBBbmQgd2hlbiB0aGUgUm9tYW5zIGNvbnF1ZXJlZCB0aGUgVGFycXVpbnMsIHdobyBoYWQgdGFrZW4gdGhlIGZpZWxkIGFnYWluc3QgdGhlbSB3aXRoIHRoZSBMYXRpbnMsIHR3byB0YWxsIGFuZCBiZWF1dGlmdWwgbWVuIHdlcmUgc2VlbiBhdCBSb21lIGEgbGl0dGxlIHdoaWxlIGFmdGVyLCB3aG8gYnJvdWdodCBkaXJlY3QgdGlkaW5ncyBmcm9tIHRoZSBhcm15LiBUaGVzZSB3ZXJlIGNvbmplY3R1cmVkIHRvIGJlIHRoZSBEaW9zY3VyaS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZpcnN0IG1hbiB3aG8gbWV0IHRoZW0gaW4gZnJvbnQgb2YgdGhlIHNwcmluZyBpbiB0aGUgZm9ydW0sIHdoZXJlIHRoZXkgd2VyZSBjb29saW5nIHRoZWlyIGhvcnNlcywgd2hpY2ggd2VyZSByZWVraW5nIHdpdGggc3dlYXQsIHdhcyBhbWF6ZWQgYXQgdGhlaXIgcmVwb3J0IG9mIHRoZSB2aWN0b3J5LgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ29yLiAzLjQiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+Q29yaW9sYW51czwvdGl0bGU+LCBpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+ICBUaGVuLCB3ZSBhcmUgdG9sZCwgdGhleSB0b3VjaGVkIGhpcyBiZWFyZCB3aXRoIHRoZWlyIGhhbmRzLCBxdWlldGx5IHNtaWxpbmcgdGhlIHdoaWxlLCBhbmQgdGhlIGhhaXIgb2YgaXQgd2FzIGNoYW5nZWQgYXQgb25jZSBmcm9tIGJsYWNrIHRvIHJlZCwgYSBjaXJjdW1zdGFuY2Ugd2hpY2ggZ2F2ZSBjcmVkZW5jZSB0byB0aGVpciBzdG9yeSwgYW5kIGZpeGVkIHVwb24gdGhlIG1hbiB0aGUgc3VybmFtZSBvZiBBaGVub2JhcmJ1cywgdGhhdCBpcyB0byBzYXksIEJyb256ZS1iZWFyZC4gQW5kIGFsbCB0aGlzIGlzIG1hZGUgY3JlZGlibGUgYnkgdGhhdCB3aGljaCBoYXMgaGFwcGVuZWQgaW4gb3VyIHRpbWUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIG5hbWVseSwgQW50b25pdXMgd2FzIGluIHJldm9sdCBmcm9tIERvbWl0aWFuLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gOTEgQS5ELjwvbm90ZT4gYW5kIGEgZ3JlYXQgd2FyIHdhcyBleHBlY3RlZCBmcm9tIEdlcm1hbnksIGFuZCBSb21lIHdhcyBpbiBjb21tb3Rpb24sIHN1ZGRlbmx5IGFuZCBzcG9udGFuZW91c2x5IHRoZSBwZW9wbGUgb2YgdGhlaXIgb3duIGFjY29yZCBzcHJlYWQgYWJyb2FkIGEgcmVwb3J0IG9mIGEgdmljdG9yeSwgYW5kIGEgc3RvcnkgY291cnNlZCB0aHJvdWdoIFJvbWUgdGhhdCBBbnRvbml1cyBoaW1zZWxmIGhhZCBiZWVuIHNsYWluLCBhbmQgdGhhdCBvZiBoaXMgZGVmZWF0ZWQgYXJteSBub3QgYSBwb3J0aW9uIHdhcyBsZWZ0IGFsaXZlLiBCZWxpZWYgaW4gdGhlIHN0b3J5IGJlY2FtZSBzbyBzdHJvbmcgYW5kIGRpc3RpbmN0IHRoYXQgbWFueSBvZiB0aGUgbWFnaXN0cmF0ZXMgYWN0dWFsbHkgb2ZmZXJlZCBzYWNyaWZpY2VzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5XaGVuLCBob3dldmVyLCB0aGUgYXV0aG9yIG9mIHRoZSBzdG9yeSB3YXMgc291Z2h0LCBub25lIGNvdWxkIGJlIGZvdW5kLCBidXQgaXQgZWx1ZGVkIGFsbCBwdXJzdWl0IGZyb20gb25lIG1hbiB0byBhbm90aGVyLCBhbmQgZmluYWxseSBkaXNhcHBlYXJlZCBpbiB0aGUgbGltaXRsZXNzIHRocm9uZywgYXMgaW4gYSB5YXduaW5nIHNlYSwgYW5kIHdhcyBzZWVuIHRvIGhhdmUgbm8gc3VyZSBzb3VyY2UuIFRoaXMgcnVtb3VyLCB0aGVuLCBxdWlja2x5IG1lbHRlZCBhd2F5IGluIHRoZSBjaXR5OyBidXQgd2hlbiBEb21pdGlhbiB3YXMgc2V0dGluZyBvdXQgd2l0aCBhbiBhcm15IGZvciB0aGUgd2FyIGFuZCB3YXMgYWxyZWFkeSBvbiB0aGUgbWFyY2gsIG1lc3NhZ2VzIGFuZCBsZXR0ZXJzIGFubm91bmNpbmcgdGhlIHZpY3RvcnkgY2FtZSB0byBtZWV0IGhpbS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkFudG9uaXVzIGRpZCBub3QgZ2V0IHRoZSBoZWxwIGhlIGV4cGVjdGVkIGZyb20gR2VybWFuIGF1eGlsaWFyaWVzLCBhbmQgd2FzIGRlZmVhdGVkIGJ5IEFwcGl1cyBOb3JiYW51cy48L25vdGU+ICBBbmQgdGhlIHN1Y2Nlc3MgaXRzZWxmIHdhcyBnYWluZWQgb24gdGhlIGRheSB3aGVuIHRoZSBydW1vdXIgb2YgaXQgY2FtZSB0byBSb21lLCBhbHRob3VnaCB0aGUgZGlzdGFuY2UgYmV0d2VlbiB0aGUgcGxhY2VzIHdhcyBtb3JlIHRoYW4gdHdlbnR5IHRob3VzYW5kIGZ1cmxvbmdzLiBUaGVzZSBmYWN0cyBhcmUga25vd24gdG8gZXZlcnkgb25lIG9mIG91ciB0aW1lLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['25.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFhYVi4gSXQgaXMgc2FpZCBhbHNvIHRoYXQgYSByZXBvcnQgb2YgdGhlIGJhdHRsZSBmb3VnaHQgYnkgdGhlIEl0YWxpYW4gR3JlZWtzIGF0IHRoZSByaXZlciBTYWdyYQoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BIGJhdHRsZSBiZXR3ZWVuIHRoZSBMb2NyaWFucyBhbmQgQ3JvdG9uaWF0cywgYXQgc29tZSB0aW1lIGluIHRoZSBzaXh0aCBjZW50dXJ5IEIuQy48L25vdGU+IHJlYWNoZWQgUGVsb3Bvbm5lc3VzIG9uIHRoZSBzYW1lIGRheSwgYW5kIHNvIGRpZCB0aGF0IG9mIHRoZSBiYXR0bGUgd2l0aCB0aGUgTWVkZXMgYXQgTXljYWxlIGNvbWUgb24gdGhlIHNhbWUgZGF5IHRvIFBsYXRhZWEuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkl0IHdhcyB3aGVuIHRoZSBHcmVla3MgYXQgTXljYWxlIHdlcmUgYWJvdXQgdG8gYXR0YWNrIHRoZSBQZXJzaWFucyB0aGF0IGEgcnVtb3VyIGNhbWUgdG8gdGhlbSBvZiB0aGUgdmljdG9yeSBvZiB0aGUgR3JlZWtzIGF0IFBsYXRhZWEgb3ZlciBNYXJkb25pdXMgKDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IkhkdC4gOS4xMDAiIHZhbGlkPSJ5ZXMiPkhlcm9kb3R1cywgaXguIDEwMDwvYmlibD4pLjwvbm90ZT4gQW5kIHdoZW4gdGhlIFJvbWFucyBjb25xdWVyZWQgdGhlIFRhcnF1aW5zLCB3aG8gaGFkIHRha2VuIHRoZSBmaWVsZCBhZ2FpbnN0IHRoZW0gd2l0aCB0aGUgTGF0aW5zLCB0d28gdGFsbCBhbmQgYmVhdXRpZnVsIG1lbiB3ZXJlIHNlZW4gYXQgUm9tZSBhIGxpdHRsZSB3aGlsZSBhZnRlciwgd2hvIGJyb3VnaHQgZGlyZWN0IHRpZGluZ3MgZnJvbSB0aGUgYXJteS4gVGhlc2Ugd2VyZSBjb25qZWN0dXJlZCB0byBiZSB0aGUgRGlvc2N1cmkuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSGR0LiA5LjEwMCIgdmFsaWQ9InllcyI+SGVyb2RvdHVzLCBpeC4gMTAwPC9iaWJsPikuPC90cmFuc2xhdGlvbj4="
translation['25.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBtYW4gd2hvIG1ldCB0aGVtIGluIGZyb250IG9mIHRoZSBzcHJpbmcgaW4gdGhlIGZvcnVtLCB3aGVyZSB0aGV5IHdlcmUgY29vbGluZyB0aGVpciBob3JzZXMsIHdoaWNoIHdlcmUgcmVla2luZyB3aXRoIHN3ZWF0LCB3YXMgYW1hemVkIGF0IHRoZWlyIHJlcG9ydCBvZiB0aGUgdmljdG9yeS4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDb3IuIDMuNCIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZSBjbGFzcz0idHJhbnNsYXRpb24iPkNvcmlvbGFudXM8L3RpdGxlPiwgaWlpLiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAgVGhlbiwgd2UgYXJlIHRvbGQsIHRoZXkgdG91Y2hlZCBoaXMgYmVhcmQgd2l0aCB0aGVpciBoYW5kcywgcXVpZXRseSBzbWlsaW5nIHRoZSB3aGlsZSwgYW5kIHRoZSBoYWlyIG9mIGl0IHdhcyBjaGFuZ2VkIGF0IG9uY2UgZnJvbSBibGFjayB0byByZWQsIGEgY2lyY3Vtc3RhbmNlIHdoaWNoIGdhdmUgY3JlZGVuY2UgdG8gdGhlaXIgc3RvcnksIGFuZCBmaXhlZCB1cG9uIHRoZSBtYW4gdGhlIHN1cm5hbWUgb2YgQWhlbm9iYXJidXMsIHRoYXQgaXMgdG8gc2F5LCBCcm9uemUtYmVhcmQuIEFuZCBhbGwgdGhpcyBpcyBtYWRlIGNyZWRpYmxlIGJ5IHRoYXQgd2hpY2ggaGFzIGhhcHBlbmVkIGluIG91ciB0aW1lLiAKCQkJCTxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENvci4gMy40IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q29yaW9sYW51czwvdGl0bGU+LCBpaWkuIDQuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5Db3Jpb2xhbnVzPC90aXRsZT4sIGlpaS4gNC48L3RyYW5zbGF0aW9uPg=="
translation['25.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIG5hbWVseSwgQW50b25pdXMgd2FzIGluIHJldm9sdCBmcm9tIERvbWl0aWFuLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiA5MSBBLkQuPC9ub3RlPiBhbmQgYSBncmVhdCB3YXIgd2FzIGV4cGVjdGVkIGZyb20gR2VybWFueSwgYW5kIFJvbWUgd2FzIGluIGNvbW1vdGlvbiwgc3VkZGVubHkgYW5kIHNwb250YW5lb3VzbHkgdGhlIHBlb3BsZSBvZiB0aGVpciBvd24gYWNjb3JkIHNwcmVhZCBhYnJvYWQgYSByZXBvcnQgb2YgYSB2aWN0b3J5LCBhbmQgYSBzdG9yeSBjb3Vyc2VkIHRocm91Z2ggUm9tZSB0aGF0IEFudG9uaXVzIGhpbXNlbGYgaGFkIGJlZW4gc2xhaW4sIGFuZCB0aGF0IG9mIGhpcyBkZWZlYXRlZCBhcm15IG5vdCBhIHBvcnRpb24gd2FzIGxlZnQgYWxpdmUuIEJlbGllZiBpbiB0aGUgc3RvcnkgYmVjYW1lIHNvIHN0cm9uZyBhbmQgZGlzdGluY3QgdGhhdCBtYW55IG9mIHRoZSBtYWdpc3RyYXRlcyBhY3R1YWxseSBvZmZlcmVkIHNhY3JpZmljZXMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['25.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPldoZW4sIGhvd2V2ZXIsIHRoZSBhdXRob3Igb2YgdGhlIHN0b3J5IHdhcyBzb3VnaHQsIG5vbmUgY291bGQgYmUgZm91bmQsIGJ1dCBpdCBlbHVkZWQgYWxsIHB1cnN1aXQgZnJvbSBvbmUgbWFuIHRvIGFub3RoZXIsIGFuZCBmaW5hbGx5IGRpc2FwcGVhcmVkIGluIHRoZSBsaW1pdGxlc3MgdGhyb25nLCBhcyBpbiBhIHlhd25pbmcgc2VhLCBhbmQgd2FzIHNlZW4gdG8gaGF2ZSBubyBzdXJlIHNvdXJjZS4gVGhpcyBydW1vdXIsIHRoZW4sIHF1aWNrbHkgbWVsdGVkIGF3YXkgaW4gdGhlIGNpdHk7IGJ1dCB3aGVuIERvbWl0aWFuIHdhcyBzZXR0aW5nIG91dCB3aXRoIGFuIGFybXkgZm9yIHRoZSB3YXIgYW5kIHdhcyBhbHJlYWR5IG9uIHRoZSBtYXJjaCwgbWVzc2FnZXMgYW5kIGxldHRlcnMgYW5ub3VuY2luZyB0aGUgdmljdG9yeSBjYW1lIHRvIG1lZXQgaGltLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5BbnRvbml1cyBkaWQgbm90IGdldCB0aGUgaGVscCBoZSBleHBlY3RlZCBmcm9tIEdlcm1hbiBhdXhpbGlhcmllcywgYW5kIHdhcyBkZWZlYXRlZCBieSBBcHBpdXMgTm9yYmFudXMuPC9ub3RlPiAgQW5kIHRoZSBzdWNjZXNzIGl0c2VsZiB3YXMgZ2FpbmVkIG9uIHRoZSBkYXkgd2hlbiB0aGUgcnVtb3VyIG9mIGl0IGNhbWUgdG8gUm9tZSwgYWx0aG91Z2ggdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHBsYWNlcyB3YXMgbW9yZSB0aGFuIHR3ZW50eSB0aG91c2FuZCBmdXJsb25ncy4gVGhlc2UgZmFjdHMgYXJlIGtub3duIHRvIGV2ZXJ5IG9uZSBvZiBvdXIgdGltZS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI2IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJlc3VtZSwgR25hZXVzIE9jdGF2aXVzLCB0aGUgYWRtaXJhbCBvZiBBZW1pbGl1cywgY2FtZSB0byBhbmNob3Igb2ZmIFNhbW90aHJhY2UsIGFuZCB3aGlsZSBoZSBhbGxvd2VkIFBlcnNldXMgdG8gZW5qb3kgYXN5bHVtLCBvdXQgb2YgcmVzcGVjdCB0byB0aGUgZ29kcywgaGUgdG9vayBtZWFucyB0byBwcmV2ZW50IGhpbSBmcm9tIGVzY2FwaW5nIGJ5IHNlYS4gSG93ZXZlciwgUGVyc2V1cyBzb21laG93IHN1Y2NlZWRlZCBpbiBwZXJzdWFkaW5nIGEgY2VydGFpbiBDcmV0YW4gbmFtZWQgT3JvYW5kZXMsIHRoZSBvd25lciBvZiBhIHNtYWxsIHNraWZmIHRvIHRha2UgaGltIG9uIGJvYXJkIHdpdGggaGlzIHRyZWFzdXJlcy4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+U28gT3JvYW5kZXMsIHRydWUgQ3JldGFuIHRoYXQgaGUgd2FzLCB0b29rIHRoZSB0cmVhc3VyZXMgYWJvYXJkIGJ5IG5pZ2h0LCBhbmQgYWZ0ZXIgYmlkZGluZyBQZXJzZXVzIHRvIGNvbWUgZHVyaW5nIHRoZSBmb2xsb3dpbmcgbmlnaHQgdG8gdGhlIGhhcmJvdXIgYWRqb2luaW5nIHRoZSBEZW1ldHJpdW0sIHdpdGggaGlzIGNoaWxkcmVuIGFuZCBuZWNlc3NhcnkgYXR0ZW5kYW50cywgYXMgc29vbiBhcyBldmVuaW5nIGZlbGwgc2FpbGVkIG9mZi4gTm93LCBQZXJzZXVzIHN1ZmZlcmVkIHBpdGlmdWxseSBpbiBsZXR0aW5nIGhpbXNlbGYgZG93biB0aHJvdWdoIGEgbmFycm93IHdpbmRvdyBpbiB0aGUgZm9ydHJlc3MsIHRvZ2V0aGVyIHdpdGggaGlzIHdpZmUgYW5kIGxpdHRsZSBjaGlsZHJlbiwgd2hvIHdlcmUgdW5hY3F1YWludGVkIHdpdGggd2FuZGVyaW5nIGFuZCBoYXJkc2hpcHM7IGJ1dCBtb3N0IHBpdGlmdWwgb2YgYWxsIHdhcyB0aGUgZ3JvYW4gaGUgZ2F2ZSB3aGVuIHNvbWUgb25lIHRvbGQgaGltLCBhcyBoZSB3YW5kZXJlZCBhbG9uZyB0aGUgc2hvcmUsIHRoYXQgaGUgaGFkIHNlZW4gT3JvYW5kZXMgYWxyZWFkeSBvdXQgYXQgc2VhIGFuZCB1bmRlciBmdWxsIHNhaWwuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBkYXkgd2FzIGJlZ2lubmluZyB0byBkYXduLCBhbmQgc28sIGJlcmVmdCBvZiBldmVyeSBob3BlLCBoZSBmbGVkIGJhY2sgdG8gdGhlIGZvcnRyZXNzIHdpdGggaGlzIHdpZmUsIGJlZm9yZSB0aGUgUm9tYW5zIGNvdWxkIHByZXZlbnQgaGltLCB0aG91Z2ggdGhleSBzYXcgaGltLiBIaXMgY2hpbGRyZW4gd2VyZSBzZWl6ZWQgYW5kIGRlbGl2ZXJlZCB0byB0aGUgUm9tYW5zIGJ5IElvbiwgd2hvIG9mIG9sZCBoYWQgYmVlbiBhIGZhdm91cml0ZSBvZiBQZXJzZXVzLCBidXQgbm93IGJlY2FtZSBoaXMgQmV0cmF5ZXIsIGFuZCBmdXJuaXNoZWQgdGhlIG1vc3QgY29tcGVsbGluZyByZWFzb24gZm9yIGhpcyBjb21pbmcsIGFzIGEgd2lsZCBiZWFzdCB3aWxsIGRvIHdoZW4gaXRzIHlvdW5nIGhhdmUgYmVlbiBjYXB0dXJlZCwgYW5kIHN1cnJlbmRlcmluZyBoaW1zZWxmIHRvIHRob3NlIHdobyBoYWQgdGhlbSBpbiB0aGVpciBwb3dlci4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHRvIHJlc3VtZSwgR25hZXVzIE9jdGF2aXVzLCB0aGUgYWRtaXJhbCBvZiBBZW1pbGl1cywgY2FtZSB0byBhbmNob3Igb2ZmIFNhbW90aHJhY2UsIGFuZCB3aGlsZSBoZSBhbGxvd2VkIFBlcnNldXMgdG8gZW5qb3kgYXN5bHVtLCBvdXQgb2YgcmVzcGVjdCB0byB0aGUgZ29kcywgaGUgdG9vayBtZWFucyB0byBwcmV2ZW50IGhpbSBmcm9tIGVzY2FwaW5nIGJ5IHNlYS4gSG93ZXZlciwgUGVyc2V1cyBzb21laG93IHN1Y2NlZWRlZCBpbiBwZXJzdWFkaW5nIGEgY2VydGFpbiBDcmV0YW4gbmFtZWQgT3JvYW5kZXMsIHRoZSBvd25lciBvZiBhIHNtYWxsIHNraWZmIHRvIHRha2UgaGltIG9uIGJvYXJkIHdpdGggaGlzIHRyZWFzdXJlcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlNvIE9yb2FuZGVzLCB0cnVlIENyZXRhbiB0aGF0IGhlIHdhcywgdG9vayB0aGUgdHJlYXN1cmVzIGFib2FyZCBieSBuaWdodCwgYW5kIGFmdGVyIGJpZGRpbmcgUGVyc2V1cyB0byBjb21lIGR1cmluZyB0aGUgZm9sbG93aW5nIG5pZ2h0IHRvIHRoZSBoYXJib3VyIGFkam9pbmluZyB0aGUgRGVtZXRyaXVtLCB3aXRoIGhpcyBjaGlsZHJlbiBhbmQgbmVjZXNzYXJ5IGF0dGVuZGFudHMsIGFzIHNvb24gYXMgZXZlbmluZyBmZWxsIHNhaWxlZCBvZmYuIE5vdywgUGVyc2V1cyBzdWZmZXJlZCBwaXRpZnVsbHkgaW4gbGV0dGluZyBoaW1zZWxmIGRvd24gdGhyb3VnaCBhIG5hcnJvdyB3aW5kb3cgaW4gdGhlIGZvcnRyZXNzLCB0b2dldGhlciB3aXRoIGhpcyB3aWZlIGFuZCBsaXR0bGUgY2hpbGRyZW4sIHdobyB3ZXJlIHVuYWNxdWFpbnRlZCB3aXRoIHdhbmRlcmluZyBhbmQgaGFyZHNoaXBzOyBidXQgbW9zdCBwaXRpZnVsIG9mIGFsbCB3YXMgdGhlIGdyb2FuIGhlIGdhdmUgd2hlbiBzb21lIG9uZSB0b2xkIGhpbSwgYXMgaGUgd2FuZGVyZWQgYWxvbmcgdGhlIHNob3JlLCB0aGF0IGhlIGhhZCBzZWVuIE9yb2FuZGVzIGFscmVhZHkgb3V0IGF0IHNlYSBhbmQgdW5kZXIgZnVsbCBzYWlsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['26.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciBkYXkgd2FzIGJlZ2lubmluZyB0byBkYXduLCBhbmQgc28sIGJlcmVmdCBvZiBldmVyeSBob3BlLCBoZSBmbGVkIGJhY2sgdG8gdGhlIGZvcnRyZXNzIHdpdGggaGlzIHdpZmUsIGJlZm9yZSB0aGUgUm9tYW5zIGNvdWxkIHByZXZlbnQgaGltLCB0aG91Z2ggdGhleSBzYXcgaGltLiBIaXMgY2hpbGRyZW4gd2VyZSBzZWl6ZWQgYW5kIGRlbGl2ZXJlZCB0byB0aGUgUm9tYW5zIGJ5IElvbiwgd2hvIG9mIG9sZCBoYWQgYmVlbiBhIGZhdm91cml0ZSBvZiBQZXJzZXVzLCBidXQgbm93IGJlY2FtZSBoaXMgQmV0cmF5ZXIsIGFuZCBmdXJuaXNoZWQgdGhlIG1vc3QgY29tcGVsbGluZyByZWFzb24gZm9yIGhpcyBjb21pbmcsIGFzIGEgd2lsZCBiZWFzdCB3aWxsIGRvIHdoZW4gaXRzIHlvdW5nIGhhdmUgYmVlbiBjYXB0dXJlZCwgYW5kIHN1cnJlbmRlcmluZyBoaW1zZWxmIHRvIHRob3NlIHdobyBoYWQgdGhlbSBpbiB0aGVpciBwb3dlci4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIGhhdmluZyBtb3N0IGNvbmZpZGVuY2UgaW4gTmFzaWNhLCBoZSBjYWxsZWQgZm9yIGhpbTsgYnV0IHNpbmNlIE5hc2ljYSB3YXMgbm90IHRoZXJlLCBhZnRlciBiZXdhaWxpbmcgaGlzIG1pc2ZvcnR1bmUgYW5kIGNhcmVmdWxseSB3ZWlnaGluZyB0aGUgbmVjZXNzaXR5IHVuZGVyIHdoaWNoIGhlIGxheSwgaGUgZ2F2ZSBoaW1zZWxmIGludG8gdGhlIHBvd2VyIG9mIEduYWV1cywgdGh1cyBtYWtpbmcgaXQgbW9zdCBhYnVuZGFudGx5IGNsZWFyIHRoYXQgaGlzIGF2YXJpY2Ugd2FzIGEgbGVzcyBpZ25vYmxlIGV2aWwgdGhhbiB0aGUgbG92ZSBvZiBsaWZlIHRoYXQgd2FzIGluIGhpbSwgYW5kIHRoYXQgbGVkIGhpbSB0byBkZXByaXZlIGhpbXNlbGYgb2YgdGhlIG9ubHkgdGhpbmcgd2hpY2ggRm9ydHVuZSBjYW5ub3QgdGFrZSBhd2F5IGZyb20gdGhlIGZhbGxlbiwgbmFtZWx5LCBwaXR5LiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igd2hlbiBhdCBoaXMgcmVxdWVzdCBoZSB3YXMgYnJvdWdodCB0byBBZW1pbGl1cywgQWVtaWxpdXMgc2F3IGluIGhpbSBhIGdyZWF0IG1hbiB3aG9zZSBmYWxsIHdhcyBkdWUgdG8gdGhlIHJlc2VudG1lbnQgb2YgdGhlIGdvZHMgYW5kIGhpcyBvd24gZXZpbCBmb3J0dW5lLCBhbmQgcm9zZSB1cCBhbmQgY2FtZSB0byBtZWV0IGhpbSwgYWNjb21wYW5pZWQgYnkgaGlzIGZyaWVuZHMsIGFuZCB3aXRoIHRlYXJzIGluIGhpcyBleWVzOyBidXQgUGVyc2V1cywgYSBtb3N0IHNoYW1lZnVsIHNpZ2h0LCBhZnRlciB0aHJvd2luZyBoaW1zZWxmIHByb25lIGJlZm9yZSBoaW0gYW5kIHRoZW4gY2xhc3BpbmcgaGlzIGtuZWVzLCBicm9rZSBvdXQgaW50byBpZ25vYmxlIGNyaWVzIGFuZCBzdXBwbGljYXRpb25zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVzZSBBZW1pbGl1cyBjb3VsZCBub3QgYWJpZGUgYW5kIHdvdWxkIG5vdCBoZWFyOyBidXQgbG9va2luZyB1cG9uIGhpbSB3aXRoIGEgZGlzdHJlc3NlZCBhbmQgc29ycm93ZnVsIGNvdW50ZW5hbmNlLCBzYWlkOiAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPldoeSwgd3JldGNoZWQgbWFuLCBkb3N0IHRob3UgZnJlZSBGb3J0dW5lIGZyb20gdGh5IHN0cm9uZ2VzdCBpbmRpY3RtZW50IGFnYWluc3QgaGVyLCBieSBjb25kdWN0IHdoaWNoIHdpbGwgbWFrZSBtZW4gdGhpbmsgdGhhdCB0aHkgbWlzZm9ydHVuZXMgYXJlIG5vdCB1bmRlc2VydmVkLCBhbmQgdGhhdCB0aHkgZm9ybWVyIHByb3NwZXJpdHksIHJhdGhlciB0aGFuIHRoeSBwcmVzZW50IGxvdCwgd2FzIGJleW9uZCB0aHkgZGVzZXJ0cz8gQW5kIHdoeSBkb3N0IHRob3UgZGVwcmVjaWF0ZSBteSB2aWN0b3J5LCBhbmQgbWFrZSBteSBzdWNjZXNzIGEgbWVhZ3JlIG9uZSwgYnkgc2hvd2luZyB0aHlzZWxmIG5vIG5vYmxlIG9yIGV2ZW4gZml0dGluZyBhbnRhZ29uaXN0IGZvciBSb21hbnM/IFZhbG91ciBpbiB0aGUgdW5mb3J0dW5hdGUgb2J0YWlucyBncmVhdCByZXZlcmVuY2UgZXZlbiBhbW9uZyB0aGVpciBlbmVtaWVzLCBidXQgY293YXJkaWNlLCBpbiBSb21hbiBleWVzLCBldmVuIHRob3VnaCBpdCBtZWV0IHdpdGggc3VjY2VzcywgaXMgaW4gZXZlcnkgd2F5IGEgbW9zdCBkaXNob25vdXJhYmxlIHRoaW5nLjwvcT4KCQkJICAgICAgPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['26.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCBoYXZpbmcgbW9zdCBjb25maWRlbmNlIGluIE5hc2ljYSwgaGUgY2FsbGVkIGZvciBoaW07IGJ1dCBzaW5jZSBOYXNpY2Egd2FzIG5vdCB0aGVyZSwgYWZ0ZXIgYmV3YWlsaW5nIGhpcyBtaXNmb3J0dW5lIGFuZCBjYXJlZnVsbHkgd2VpZ2hpbmcgdGhlIG5lY2Vzc2l0eSB1bmRlciB3aGljaCBoZSBsYXksIGhlIGdhdmUgaGltc2VsZiBpbnRvIHRoZSBwb3dlciBvZiBHbmFldXMsIHRodXMgbWFraW5nIGl0IG1vc3QgYWJ1bmRhbnRseSBjbGVhciB0aGF0IGhpcyBhdmFyaWNlIHdhcyBhIGxlc3MgaWdub2JsZSBldmlsIHRoYW4gdGhlIGxvdmUgb2YgbGlmZSB0aGF0IHdhcyBpbiBoaW0sIGFuZCB0aGF0IGxlZCBoaW0gdG8gZGVwcml2ZSBoaW1zZWxmIG9mIHRoZSBvbmx5IHRoaW5nIHdoaWNoIEZvcnR1bmUgY2Fubm90IHRha2UgYXdheSBmcm9tIHRoZSBmYWxsZW4sIG5hbWVseSwgcGl0eS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['26.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkZvciB3aGVuIGF0IGhpcyByZXF1ZXN0IGhlIHdhcyBicm91Z2h0IHRvIEFlbWlsaXVzLCBBZW1pbGl1cyBzYXcgaW4gaGltIGEgZ3JlYXQgbWFuIHdob3NlIGZhbGwgd2FzIGR1ZSB0byB0aGUgcmVzZW50bWVudCBvZiB0aGUgZ29kcyBhbmQgaGlzIG93biBldmlsIGZvcnR1bmUsIGFuZCByb3NlIHVwIGFuZCBjYW1lIHRvIG1lZXQgaGltLCBhY2NvbXBhbmllZCBieSBoaXMgZnJpZW5kcywgYW5kIHdpdGggdGVhcnMgaW4gaGlzIGV5ZXM7IGJ1dCBQZXJzZXVzLCBhIG1vc3Qgc2hhbWVmdWwgc2lnaHQsIGFmdGVyIHRocm93aW5nIGhpbXNlbGYgcHJvbmUgYmVmb3JlIGhpbSBhbmQgdGhlbiBjbGFzcGluZyBoaXMga25lZXMsIGJyb2tlIG91dCBpbnRvIGlnbm9ibGUgY3JpZXMgYW5kIHN1cHBsaWNhdGlvbnMuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['26.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIEFlbWlsaXVzIGNvdWxkIG5vdCBhYmlkZSBhbmQgd291bGQgbm90IGhlYXI7IGJ1dCBsb29raW5nIHVwb24gaGltIHdpdGggYSBkaXN0cmVzc2VkIGFuZCBzb3Jyb3dmdWwgY291bnRlbmFuY2UsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XaHksIHdyZXRjaGVkIG1hbiwgZG9zdCB0aG91IGZyZWUgRm9ydHVuZSBmcm9tIHRoeSBzdHJvbmdlc3QgaW5kaWN0bWVudCBhZ2FpbnN0IGhlciwgYnkgY29uZHVjdCB3aGljaCB3aWxsIG1ha2UgbWVuIHRoaW5rIHRoYXQgdGh5IG1pc2ZvcnR1bmVzIGFyZSBub3QgdW5kZXNlcnZlZCwgYW5kIHRoYXQgdGh5IGZvcm1lciBwcm9zcGVyaXR5LCByYXRoZXIgdGhhbiB0aHkgcHJlc2VudCBsb3QsIHdhcyBiZXlvbmQgdGh5IGRlc2VydHM/IEFuZCB3aHkgZG9zdCB0aG91IGRlcHJlY2lhdGUgbXkgdmljdG9yeSwgYW5kIG1ha2UgbXkgc3VjY2VzcyBhIG1lYWdyZSBvbmUsIGJ5IHNob3dpbmcgdGh5c2VsZiBubyBub2JsZSBvciBldmVuIGZpdHRpbmcgYW50YWdvbmlzdCBmb3IgUm9tYW5zPyBWYWxvdXIgaW4gdGhlIHVuZm9ydHVuYXRlIG9idGFpbnMgZ3JlYXQgcmV2ZXJlbmNlIGV2ZW4gYW1vbmcgdGhlaXIgZW5lbWllcywgYnV0IGNvd2FyZGljZSwgaW4gUm9tYW4gZXllcywgZXZlbiB0aG91Z2ggaXQgbWVldCB3aXRoIHN1Y2Nlc3MsIGlzIGluIGV2ZXJ5IHdheSBhIG1vc3QgZGlzaG9ub3VyYWJsZSB0aGluZy48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPk5vdHdpdGhzdGFuZGluZyBoaXMgZGlzcGxlYXN1cmUsIGhlIHJhaXNlZCBQZXJzZXVzIHVwLCBnYXZlIGhpbSBoaXMgaGFuZCwgYW5kIHB1dCBoaW0gaW4gY2hhcmdlIG9mIFR1YmVybywgd2hpbGUgaGUgaGltc2VsZiBkcmV3IGhpcyBzb25zLCBoaXMgc29ucy1pbi1sYXcsIGFuZCBvZiB0aGUgb3RoZXIgb2ZmaWNlcnMgZXNwZWNpYWxseSB0aGUgeW91bmdlciBtZW4sIGludG8gaGlzIHRlbnQsIHdoZXJlIGZvciBhIGxvbmcgdGltZSBoZSBzYXQgaW4gc2lsZW50IGNvbW11bmlvbiB3aXRoIGhpbXNlbGYsIHNvIHRoYXQgYWxsIHdvbmRlcmVkLiBUaGVuIGhlIGJlZ2FuIHRvIGRpc2NvdXJzZSBvZiBGb3J0dW5lIGFuZCBvZiBodW1hbiBhZmZhaXJzLCBzYXlpbmc6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+SXMgaXQsIHRoZW4sIGZpdHRpbmcgdGhhdCBvbmUgd2hvIGlzIG1vcnRhbCBzaG91bGQgYmUgZW1ib2xkZW5lZCB3aGVuIHN1Y2Nlc3MgY29tZXMgdG8gaGltLCBhbmQgaGF2ZSBoaWdoIHRob3VnaHRzIGJlY2F1c2UgaGUgaGFzIHN1YmR1ZWQgYSBuYXRpb24sIG9yIGEgY2l0eSwgb3IgYSBraW5nZG9tPyAKCQkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+b3Igc2hvdWxkIGhpcyB0aG91Z2h0cyBkd2VsbCByYXRoZXIgb24gdGhpcyByZXZlcnNhbCBvZiBmb3J0dW5lLCB3aGljaCBzZXRzIGJlZm9yZSB0aGUgd2FycmlvciBhbiBpbGx1c3RyYXRpb24gb2YgdGhlIHdlYWtuZXNzIHRoYXQgaXMgY29tbW9uIHRvIGFsbCBtZW4sIGFuZCB0ZWFjaGVzIGhpbSB0byByZWdhcmQgbm90aGluZyBhcyBzdGFibGUgb3Igc2FmZT8gRm9yIHdoYXQgb2NjYXNpb24gaGF2ZSBtZW4gdG8gYmUgY29uZmlkZW50LCB3aGVuIHRoZWlyIGNvbnF1ZXN0IG9mIG90aGVycyBnaXZlcyB0aGVtIG1vc3QgY29nZW50IHJlYXNvbiB0byBiZSBpbiBmZWFyIG9mIEZvcnR1bmUsIGFuZCB3aGVuIG9uZSB3aG8gZXh1bHRzIGluIHN1Y2Nlc3MgaXMgdGhyb3duLCBhcyBJIGFtLCBpbnRvIGdyZWF0IGRlamVjdGlvbiBieSByZWZsZWN0aW5nIHVwb24gdGhlIGFsbG90bWVudHMgb2YgRmF0ZSwgd2hpY2ggdGFrZSBhIGNpcmNsaW5nIGNvdXJzZSwgYW5kIGZhbGwgbm93IHVwb24gc29tZSBhbmQgbm93IHVwb24gb3RoZXJzPyAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T3IsIHdoZW4gdGhlIHN1Y2Nlc3Npb24gb2YgQWxleGFuZGVyLCB3aG8gYXR0YWluZWQgdGhlIGhpZ2hlc3QgcGlubmFjbGUgb2YgcG93ZXIgYW5kIHdvbiB0aGUgZ3JlYXRlc3QgbWlnaHQsIGhhcyBmYWxsZW4gaW4gdGhlIHNwYWNlIG9mIGEgc2luZ2xlIGhvdXIgYW5kIGhhcyBiZWVuIHB1dCBiZW5lYXRoIHlvdXIgZmVldCwgb3Igd2hlbiB5b3Ugc2VlIGtpbmdzIHdobyBidXQganVzdCBub3cgd2VyZSBzdXJyb3VuZGVkIGJ5IHNvIG1hbnkgbXlyaWFkcyBvZiBpbmZhbnRyeSBhbmQgdGhvdXNhbmRzIG9mIGNhdmFscnksIHJlY2VpdmluZyBmcm9tIHRoZWlyIGVuZW15J3MgaGFuZHMgdGhlIGZvb2QgYW5kIGRyaW5rIHJlcXVpc2l0ZSBmb3IgdGhlIGRheSwgY2FuIHlvdSBzdXBwb3NlIHRoYXQgd2Ugb3Vyc2VsdmVzIGhhdmUgYW55IGd1YXJhbnRlZSBmcm9tIEZvcnR1bmUgdGhhdCB3aWxsIGF2YWlsIGFnYWluc3QgdGhlIGF0dGFja3Mgb2YgdGltZT8gCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFiYW5kb24sIHRoZW4sIHlvdW5nIG1lbiwgdGhpcyBlbXB0eSBpbnNvbGVuY2UgYW5kIHByaWRlIG9mIHZpY3RvcnksIGFuZCB0YWtlIGEgaHVtYmxlIHBvc3R1cmUgYXMgeW91IGNvbmZyb250IHRoZSBmdXR1cmUsIGFsd2F5cyBleHBlY3RhbnQgb2YgdGhlIHRpbWUgd2hlbiB0aGUgRGVpdHkgc2hhbGwgYXQgbGFzdCBsYXVuY2ggYWdhaW5zdCBlYWNoIG9uZSBvZiB5b3UgaGlzIGplYWxvdXMgZGlzcGxlYXN1cmUgYXQgeW91ciBwcmVzZW50IHByb3NwZXJpdHkuPC9xPiBNYW55IHN1Y2ggd29yZHMgd2VyZSB1dHRlcmVkIGJ5IEFlbWlsaXVzLCB3ZSBhcmUgdG9sZCwgYW5kIGhlIHNlbnQgdGhlIHlvdW5nIG1lbiBhd2F5IHdpdGggdGhlaXIgdmFpbmdsb3Jpb3VzIGluc29sZW5jZSBhbmQgcHJpZGUgd2VsbCBjdXJiZWQgYnkgaGlzIHRyZW5jaGFudCBzcGVlY2gsIGFzIGJ5IGEgYnJpZGxlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['27.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Tm90d2l0aHN0YW5kaW5nIGhpcyBkaXNwbGVhc3VyZSwgaGUgcmFpc2VkIFBlcnNldXMgdXAsIGdhdmUgaGltIGhpcyBoYW5kLCBhbmQgcHV0IGhpbSBpbiBjaGFyZ2Ugb2YgVHViZXJvLCB3aGlsZSBoZSBoaW1zZWxmIGRyZXcgaGlzIHNvbnMsIGhpcyBzb25zLWluLWxhdywgYW5kIG9mIHRoZSBvdGhlciBvZmZpY2VycyBlc3BlY2lhbGx5IHRoZSB5b3VuZ2VyIG1lbiwgaW50byBoaXMgdGVudCwgd2hlcmUgZm9yIGEgbG9uZyB0aW1lIGhlIHNhdCBpbiBzaWxlbnQgY29tbXVuaW9uIHdpdGggaGltc2VsZiwgc28gdGhhdCBhbGwgd29uZGVyZWQuIFRoZW4gaGUgYmVnYW4gdG8gZGlzY291cnNlIG9mIEZvcnR1bmUgYW5kIG9mIGh1bWFuIGFmZmFpcnMsIHNheWluZzogCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPklzIGl0LCB0aGVuLCBmaXR0aW5nIHRoYXQgb25lIHdobyBpcyBtb3J0YWwgc2hvdWxkIGJlIGVtYm9sZGVuZWQgd2hlbiBzdWNjZXNzIGNvbWVzIHRvIGhpbSwgYW5kIGhhdmUgaGlnaCB0aG91Z2h0cyBiZWNhdXNlIGhlIGhhcyBzdWJkdWVkIGEgbmF0aW9uLCBvciBhIGNpdHksIG9yIGEga2luZ2RvbT8gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+b3Igc2hvdWxkIGhpcyB0aG91Z2h0cyBkd2VsbCByYXRoZXIgb24gdGhpcyByZXZlcnNhbCBvZiBmb3J0dW5lLCB3aGljaCBzZXRzIGJlZm9yZSB0aGUgd2FycmlvciBhbiBpbGx1c3RyYXRpb24gb2YgdGhlIHdlYWtuZXNzIHRoYXQgaXMgY29tbW9uIHRvIGFsbCBtZW4sIGFuZCB0ZWFjaGVzIGhpbSB0byByZWdhcmQgbm90aGluZyBhcyBzdGFibGUgb3Igc2FmZT8gRm9yIHdoYXQgb2NjYXNpb24gaGF2ZSBtZW4gdG8gYmUgY29uZmlkZW50LCB3aGVuIHRoZWlyIGNvbnF1ZXN0IG9mIG90aGVycyBnaXZlcyB0aGVtIG1vc3QgY29nZW50IHJlYXNvbiB0byBiZSBpbiBmZWFyIG9mIEZvcnR1bmUsIGFuZCB3aGVuIG9uZSB3aG8gZXh1bHRzIGluIHN1Y2Nlc3MgaXMgdGhyb3duLCBhcyBJIGFtLCBpbnRvIGdyZWF0IGRlamVjdGlvbiBieSByZWZsZWN0aW5nIHVwb24gdGhlIGFsbG90bWVudHMgb2YgRmF0ZSwgd2hpY2ggdGFrZSBhIGNpcmNsaW5nIGNvdXJzZSwgYW5kIGZhbGwgbm93IHVwb24gc29tZSBhbmQgbm93IHVwb24gb3RoZXJzPyAKCQkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+T3IsIHdoZW4gdGhlIHN1Y2Nlc3Npb24gb2YgQWxleGFuZGVyLCB3aG8gYXR0YWluZWQgdGhlIGhpZ2hlc3QgcGlubmFjbGUgb2YgcG93ZXIgYW5kIHdvbiB0aGUgZ3JlYXRlc3QgbWlnaHQsIGhhcyBmYWxsZW4gaW4gdGhlIHNwYWNlIG9mIGEgc2luZ2xlIGhvdXIgYW5kIGhhcyBiZWVuIHB1dCBiZW5lYXRoIHlvdXIgZmVldCwgb3Igd2hlbiB5b3Ugc2VlIGtpbmdzIHdobyBidXQganVzdCBub3cgd2VyZSBzdXJyb3VuZGVkIGJ5IHNvIG1hbnkgbXlyaWFkcyBvZiBpbmZhbnRyeSBhbmQgdGhvdXNhbmRzIG9mIGNhdmFscnksIHJlY2VpdmluZyBmcm9tIHRoZWlyIGVuZW15J3MgaGFuZHMgdGhlIGZvb2QgYW5kIGRyaW5rIHJlcXVpc2l0ZSBmb3IgdGhlIGRheSwgY2FuIHlvdSBzdXBwb3NlIHRoYXQgd2Ugb3Vyc2VsdmVzIGhhdmUgYW55IGd1YXJhbnRlZSBmcm9tIEZvcnR1bmUgdGhhdCB3aWxsIGF2YWlsIGFnYWluc3QgdGhlIGF0dGFja3Mgb2YgdGltZT8gCgkJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFiYW5kb24sIHRoZW4sIHlvdW5nIG1lbiwgdGhpcyBlbXB0eSBpbnNvbGVuY2UgYW5kIHByaWRlIG9mIHZpY3RvcnksIGFuZCB0YWtlIGEgaHVtYmxlIHBvc3R1cmUgYXMgeW91IGNvbmZyb250IHRoZSBmdXR1cmUsIGFsd2F5cyBleHBlY3RhbnQgb2YgdGhlIHRpbWUgd2hlbiB0aGUgRGVpdHkgc2hhbGwgYXQgbGFzdCBsYXVuY2ggYWdhaW5zdCBlYWNoIG9uZSBvZiB5b3UgaGlzIGplYWxvdXMgZGlzcGxlYXN1cmUgYXQgeW91ciBwcmVzZW50IHByb3NwZXJpdHkuPC9xPiBNYW55IHN1Y2ggd29yZHMgd2VyZSB1dHRlcmVkIGJ5IEFlbWlsaXVzLCB3ZSBhcmUgdG9sZCwgYW5kIGhlIHNlbnQgdGhlIHlvdW5nIG1lbiBhd2F5IHdpdGggdGhlaXIgdmFpbmdsb3Jpb3VzIGluc29sZW5jZSBhbmQgcHJpZGUgd2VsbCBjdXJiZWQgYnkgaGlzIHRyZW5jaGFudCBzcGVlY2gsIGFzIGJ5IGEgYnJpZGxlLgoJCQk8L3RyYW5zbGF0aW9uPg=="
translation['27.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPm9yIHNob3VsZCBoaXMgdGhvdWdodHMgZHdlbGwgcmF0aGVyIG9uIHRoaXMgcmV2ZXJzYWwgb2YgZm9ydHVuZSwgd2hpY2ggc2V0cyBiZWZvcmUgdGhlIHdhcnJpb3IgYW4gaWxsdXN0cmF0aW9uIG9mIHRoZSB3ZWFrbmVzcyB0aGF0IGlzIGNvbW1vbiB0byBhbGwgbWVuLCBhbmQgdGVhY2hlcyBoaW0gdG8gcmVnYXJkIG5vdGhpbmcgYXMgc3RhYmxlIG9yIHNhZmU/IEZvciB3aGF0IG9jY2FzaW9uIGhhdmUgbWVuIHRvIGJlIGNvbmZpZGVudCwgd2hlbiB0aGVpciBjb25xdWVzdCBvZiBvdGhlcnMgZ2l2ZXMgdGhlbSBtb3N0IGNvZ2VudCByZWFzb24gdG8gYmUgaW4gZmVhciBvZiBGb3J0dW5lLCBhbmQgd2hlbiBvbmUgd2hvIGV4dWx0cyBpbiBzdWNjZXNzIGlzIHRocm93biwgYXMgSSBhbSwgaW50byBncmVhdCBkZWplY3Rpb24gYnkgcmVmbGVjdGluZyB1cG9uIHRoZSBhbGxvdG1lbnRzIG9mIEZhdGUsIHdoaWNoIHRha2UgYSBjaXJjbGluZyBjb3Vyc2UsIGFuZCBmYWxsIG5vdyB1cG9uIHNvbWUgYW5kIG5vdyB1cG9uIG90aGVycz8gCgkJCQkJPC90cmFuc2xhdGlvbj4="
translation['27.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9yLCB3aGVuIHRoZSBzdWNjZXNzaW9uIG9mIEFsZXhhbmRlciwgd2hvIGF0dGFpbmVkIHRoZSBoaWdoZXN0IHBpbm5hY2xlIG9mIHBvd2VyIGFuZCB3b24gdGhlIGdyZWF0ZXN0IG1pZ2h0LCBoYXMgZmFsbGVuIGluIHRoZSBzcGFjZSBvZiBhIHNpbmdsZSBob3VyIGFuZCBoYXMgYmVlbiBwdXQgYmVuZWF0aCB5b3VyIGZlZXQsIG9yIHdoZW4geW91IHNlZSBraW5ncyB3aG8gYnV0IGp1c3Qgbm93IHdlcmUgc3Vycm91bmRlZCBieSBzbyBtYW55IG15cmlhZHMgb2YgaW5mYW50cnkgYW5kIHRob3VzYW5kcyBvZiBjYXZhbHJ5LCByZWNlaXZpbmcgZnJvbSB0aGVpciBlbmVteSdzIGhhbmRzIHRoZSBmb29kIGFuZCBkcmluayByZXF1aXNpdGUgZm9yIHRoZSBkYXksIGNhbiB5b3Ugc3VwcG9zZSB0aGF0IHdlIG91cnNlbHZlcyBoYXZlIGFueSBndWFyYW50ZWUgZnJvbSBGb3J0dW5lIHRoYXQgd2lsbCBhdmFpbCBhZ2FpbnN0IHRoZSBhdHRhY2tzIG9mIHRpbWU/IAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['27.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkFiYW5kb24sIHRoZW4sIHlvdW5nIG1lbiwgdGhpcyBlbXB0eSBpbnNvbGVuY2UgYW5kIHByaWRlIG9mIHZpY3RvcnksIGFuZCB0YWtlIGEgaHVtYmxlIHBvc3R1cmUgYXMgeW91IGNvbmZyb250IHRoZSBmdXR1cmUsIGFsd2F5cyBleHBlY3RhbnQgb2YgdGhlIHRpbWUgd2hlbiB0aGUgRGVpdHkgc2hhbGwgYXQgbGFzdCBsYXVuY2ggYWdhaW5zdCBlYWNoIG9uZSBvZiB5b3UgaGlzIGplYWxvdXMgZGlzcGxlYXN1cmUgYXQgeW91ciBwcmVzZW50IHByb3NwZXJpdHkuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI4IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgZ2F2ZSBoaXMgYXJteSBhIGNoYW5jZSB0byByZXN0LCB3aGlsZSBoZSBoaW1zZWxmIHdlbnQgYWJvdXQgdG8gc2VlIEdyZWVjZSwgb2NjdXB5aW5nIGhpbXNlbGYgaW4gd2F5cyBhbGlrZSBob25vdXJhYmxlIGFuZCBodW1hbmUuIEZvciBpbiBoaXMgcHJvZ3Jlc3MgaGUgcmVzdG9yZWQgdGhlIHBvcHVsYXIgZ292ZXJubWVudHMgYW5kIGVzdGFibGlzaGVkIHRoZWlyIGNpdmlsIHBvbGl0aWVzOyBoZSBhbHNvIGdhdmUgZ2lmdHMgdG8gdGhlIGNpdGllcywgdG8gc29tZSBncmFpbiBmcm9tIHRoZSByb3lhbCBzdG9yZXMsIHRvIG90aGVycyBvaWwuIEZvciBpdCBpcyBzYWlkIHRoYXQgc28gZ3JlYXQgc3RvcmVzIHdlcmUgZm91bmQgbGFpZCB1cCB0aGF0IHBldGl0aW9uZXJzIGFuZCByZWNlaXZlcnMgZmFpbGVkIGJlZm9yZSB0aGUgYWJ1bmRhbmNlIGRpc2NvdmVyZWQgd2FzIGV4aGF1c3RlZC4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgRGVscGhpLCBoZSBzYXcgYSB0YWxsIHNxdWFyZSBwaWxsYXIgY29tcG9zZWQgb2Ygd2hpdGUgbWFyYmxlIHN0b25lcywgb24gd2hpY2ggYSBnb2xkZW4gc3RhdHVlIG9mIFBlcnNldXMgd2FzIGludGVuZGVkIHRvIHN0YW5kLCBhbmQgZ2F2ZSBvcmRlcnMgdGhhdCBoaXMgb3duIHN0YXR1ZSBzaG91bGQgYmUgc2V0IHRoZXJlLCBmb3IgaXQgd2FzIG1lZXQgdGhhdCB0aGUgY29ucXVlcmVkIHNob3VsZCBtYWtlIHJvb20gZm9yIHRoZWlyIGNvbnF1ZXJvcnMuIEFuZCBhdCBPbHltcGlhLCBhcyB0aGV5IHNheSwgaGUgbWFkZSB0aGF0IHV0dGVyYW5jZSB3aGljaCBpcyBub3cgaW4gZXZlcnkgbW91dGgsIHRoYXQgUGhlaWRpYXMgaGFkIG1vdWxkZWQgdGhlIFpldXMgb2YgSG9tZXIuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHRlbiBjb21taXNzaW9uZXJzIGFycml2ZWQgZnJvbSBSb21lLCBoZSByZXN0b3JlZCB0byB0aGUgTWFjZWRvbmlhbnMgdGhlaXIgY291bnRyeSBhbmQgdGhlaXIgY2l0aWVzIGZvciBmcmVlIGFuZCBpbmRlcGVuZGVudCByZXNpZGVuY2U7IHRoZXkgd2VyZSBhbHNvIHRvIHBheSB0aGUgUm9tYW5zIGEgaHVuZHJlZCB0YWxlbnRzIGluIHRyaWJ1dGUsIGEgc3VtIGxlc3MgdGhhbiBoYWxmIG9mIHdoYXQgdGhleSB1c2VkIHRvIHBheSB0byB0aGVpciBraW5ncy4gSGUgYWxzbyBoZWxkIGFsbCBzb3J0cyBvZiBnYW1lcyBhbmQgY29udGVzdHMgYW5kIHBlcmZvcm1lZCBzYWNyaWZpY2VzIHRvIHRoZSBnb2RzLCBhdCB3aGljaCBoZSBnYXZlIGZlYXN0cyBhbmQgYmFucXVldHMsIG1ha2luZyBsaWJlcmFsIGFsbG93YW5jZXMgdGhlcmVmb3IgZnJvbSB0aGUgcm95YWwgdHJlYXN1cnksIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGluIHRoZSBhcnJhbmdlbWVudCBhbmQgb3JkZXJpbmcgb2YgdGhlbSwgaW4gc2FsdXRpbmcgYW5kIHNlYXRpbmcgaGlzIGd1ZXN0cywgYW5kIGluIHBheWluZyB0byBlYWNoIG9uZSB0aGF0IGRlZ3JlZSBvZiBob25vdXIgYW5kIGtpbmRseSBhdHRlbnRpb24gd2hpY2ggd2FzIHByb3Blcmx5IGhpcyBkdWUsIGhlIHNob3dlZCBzdWNoIG5pY2UgYW5kIHRob3VnaHRmdWwgcGVyY2VwdGlvbiB0aGF0IHRoZSBHcmVla3Mgd2VyZSBhbWF6ZWQsIHNlZWluZyB0aGF0IG5vdCBldmVuIHRoZWlyIHBhc3RpbWVzIHdlcmUgdHJlYXRlZCBieSBoaW0gd2l0aCBuZWdsZWN0LCBidXQgdGhhdCwgYWx0aG91Z2ggaGUgd2FzIGEgbWFuIG9mIHN1Y2ggZ3JlYXQgYWZmYWlycywgaGUgZ2F2ZSBldmVuIHRvIHRyaWZsaW5nIHRoaW5ncyB0aGVpciBkdWUgYXR0ZW50aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BbmQgaGUgd2FzIGFsc28gZGVsaWdodGVkIHRvIGZpbmQgdGhhdCwgdGhvdWdoIHByZXBhcmF0aW9ucyBmb3IgZW50ZXJ0YWlubWVudCB3ZXJlIGV2ZXIgc28gbWFueSBhbmQgc3BsZW5kaWQsIGhlIGhpbXNlbGYgd2FzIHRoZSBwbGVhc2FudGVzdCBzaWdodCB0byBoaXMgZ3Vlc3RzIGFuZCBnYXZlIHRoZW0gbW9zdCBlbmpveW1lbnQ7IGFuZCBoZSB1c2VkIHRvIHNheSB0byB0aG9zZSB3aG8gd29uZGVyZWQgYXQgaGlzIGF0dGVudGlvbiB0byBkZXRhaWxzIHRoYXQgdGhlIHNhbWUgc3Bpcml0IHdhcyByZXF1aXJlZCBib3RoIGluIG1hcnNoYWxsaW5nIGEgbGluZSBvZiBiYXR0bGUgYW5kIGluIHByZXNpZGluZyBhdCBhIGJhbnF1ZXQgd2VsbCwgdGhlIG9iamVjdCBiZWluZywgaW4gdGhlIG9uZSBjYXNlLCB0byBjYXVzZSBtb3N0IHRlcnJvciBpbiB0aGUgZW5lbXksIGluIHRoZSBvdGhlciwgdG8gZ2l2ZSBtb3N0IHBsZWFzdXJlIHRvIHRoZSBjb21wYW55LiAKCQkJCTxtaWxlc3RvbmUgbj0iNiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgbW9yZSB0aGFuIGFueXRoaW5nIGVsc2UgbWVuIHByYWlzZWQgaGlzIGZyZWVkb20gb2Ygc3Bpcml0IGFuZCBoaXMgZ3JlYXRuZXNzIG9mIHNvdWw7IGZvciBoZSB3b3VsZCBub3QgY29uc2VudCBldmVuIHRvIGxvb2sgdXBvbiB0aGUgcXVhbnRpdGllcyBvZiBzaWx2ZXIgYW5kIHRoZSBxdWFudGl0aWVzIG9mIGdvbGQgdGhhdCB3ZXJlIGdhdGhlcmVkIHRvZ2V0aGVyIGZyb20gdGhlIHJveWFsIHRyZWFzdXJpZXMsIGJ1dCBoYW5kZWQgdGhlbSBvdmVyIHRvIHRoZSBxdWFlc3RvcnMgZm9yIHRoZSBwdWJsaWMgY2hlc3QuIEl0IHdhcyBvbmx5IHRoZSBib29rcyBvZiB0aGUga2luZyB0aGF0IGhlIGFsbG93ZWQgaGlzIHNvbnMsIHdobyB3ZXJlIGRldm90ZWQgdG8gbGVhcm5pbmcsIHRvIGNob29zZSBvdXQgZm9yIHRoZW1zZWx2ZXMsIGFuZCB3aGVuIGhlIHdhcyBkaXN0cmlidXRpbmcgcmV3YXJkcyBmb3IgdmFsb3VyIGluIHRoZSBiYXR0bGUsIGhlIGdhdmUgQWVsaXVzIFR1YmVybywgaGlzIHNvbi1pbi1sYXcsIGEgYm93bCBvZiBmaXZlIHBvdW5kcyB3ZWlnaHQuIAoJCQkJPG1pbGVzdG9uZSBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBUdWJlcm8sIHdobywgYXMgSSBoYXZlIHNhaWQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj4KICAgICAgICAgICAgICAgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFlbS4gNS40IiB2YWxpZD0ieWVzIj5DaGFwdGVyIHYuIDQuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IGR3ZWx0IHdpdGggZmlmdGVlbiByZWxhdGlvbnMsIGFuZCBhIHBhbHRyeSBmYXJtIHN1cHBvcnRlZCB0aGVtIGFsbC4gQW5kIHRoYXQgaXMgc2FpZCB0byBoYXZlIGJlZW4gdGhlIGZpcnN0IHNpbHZlciB0aGF0IGV2ZXIgZW50ZXJlZCB0aGUgaG91c2Ugb2YgdGhlIEFlbGlpLCBicm91Z2h0IGluIGFzIGFuIGhvbm91ciBiZXN0b3dlZCB1cG9uIHZhbG91ciwgYnV0IHVwIHRvIHRoYXQgdGltZSBuZWl0aGVyIHRoZXkgdGhlbXNlbHZlcyBub3IgdGhlaXIgd2l2ZXMgdXNlZCBlaXRoZXIgc2lsdmVyIG9yIGdvbGQuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['28.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWZ0ZXIgdGhpcywgaGUgZ2F2ZSBoaXMgYXJteSBhIGNoYW5jZSB0byByZXN0LCB3aGlsZSBoZSBoaW1zZWxmIHdlbnQgYWJvdXQgdG8gc2VlIEdyZWVjZSwgb2NjdXB5aW5nIGhpbXNlbGYgaW4gd2F5cyBhbGlrZSBob25vdXJhYmxlIGFuZCBodW1hbmUuIEZvciBpbiBoaXMgcHJvZ3Jlc3MgaGUgcmVzdG9yZWQgdGhlIHBvcHVsYXIgZ292ZXJubWVudHMgYW5kIGVzdGFibGlzaGVkIHRoZWlyIGNpdmlsIHBvbGl0aWVzOyBoZSBhbHNvIGdhdmUgZ2lmdHMgdG8gdGhlIGNpdGllcywgdG8gc29tZSBncmFpbiBmcm9tIHRoZSByb3lhbCBzdG9yZXMsIHRvIG90aGVycyBvaWwuIEZvciBpdCBpcyBzYWlkIHRoYXQgc28gZ3JlYXQgc3RvcmVzIHdlcmUgZm91bmQgbGFpZCB1cCB0aGF0IHBldGl0aW9uZXJzIGFuZCByZWNlaXZlcnMgZmFpbGVkIGJlZm9yZSB0aGUgYWJ1bmRhbmNlIGRpc2NvdmVyZWQgd2FzIGV4aGF1c3RlZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IERlbHBoaSwgaGUgc2F3IGEgdGFsbCBzcXVhcmUgcGlsbGFyIGNvbXBvc2VkIG9mIHdoaXRlIG1hcmJsZSBzdG9uZXMsIG9uIHdoaWNoIGEgZ29sZGVuIHN0YXR1ZSBvZiBQZXJzZXVzIHdhcyBpbnRlbmRlZCB0byBzdGFuZCwgYW5kIGdhdmUgb3JkZXJzIHRoYXQgaGlzIG93biBzdGF0dWUgc2hvdWxkIGJlIHNldCB0aGVyZSwgZm9yIGl0IHdhcyBtZWV0IHRoYXQgdGhlIGNvbnF1ZXJlZCBzaG91bGQgbWFrZSByb29tIGZvciB0aGVpciBjb25xdWVyb3JzLiBBbmQgYXQgT2x5bXBpYSwgYXMgdGhleSBzYXksIGhlIG1hZGUgdGhhdCB1dHRlcmFuY2Ugd2hpY2ggaXMgbm93IGluIGV2ZXJ5IG1vdXRoLCB0aGF0IFBoZWlkaWFzIGhhZCBtb3VsZGVkIHRoZSBaZXVzIG9mIEhvbWVyLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHRlbiBjb21taXNzaW9uZXJzIGFycml2ZWQgZnJvbSBSb21lLCBoZSByZXN0b3JlZCB0byB0aGUgTWFjZWRvbmlhbnMgdGhlaXIgY291bnRyeSBhbmQgdGhlaXIgY2l0aWVzIGZvciBmcmVlIGFuZCBpbmRlcGVuZGVudCByZXNpZGVuY2U7IHRoZXkgd2VyZSBhbHNvIHRvIHBheSB0aGUgUm9tYW5zIGEgaHVuZHJlZCB0YWxlbnRzIGluIHRyaWJ1dGUsIGEgc3VtIGxlc3MgdGhhbiBoYWxmIG9mIHdoYXQgdGhleSB1c2VkIHRvIHBheSB0byB0aGVpciBraW5ncy4gSGUgYWxzbyBoZWxkIGFsbCBzb3J0cyBvZiBnYW1lcyBhbmQgY29udGVzdHMgYW5kIHBlcmZvcm1lZCBzYWNyaWZpY2VzIHRvIHRoZSBnb2RzLCBhdCB3aGljaCBoZSBnYXZlIGZlYXN0cyBhbmQgYmFucXVldHMsIG1ha2luZyBsaWJlcmFsIGFsbG93YW5jZXMgdGhlcmVmb3IgZnJvbSB0aGUgcm95YWwgdHJlYXN1cnksIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIGluIHRoZSBhcnJhbmdlbWVudCBhbmQgb3JkZXJpbmcgb2YgdGhlbSwgaW4gc2FsdXRpbmcgYW5kIHNlYXRpbmcgaGlzIGd1ZXN0cywgYW5kIGluIHBheWluZyB0byBlYWNoIG9uZSB0aGF0IGRlZ3JlZSBvZiBob25vdXIgYW5kIGtpbmRseSBhdHRlbnRpb24gd2hpY2ggd2FzIHByb3Blcmx5IGhpcyBkdWUsIGhlIHNob3dlZCBzdWNoIG5pY2UgYW5kIHRob3VnaHRmdWwgcGVyY2VwdGlvbiB0aGF0IHRoZSBHcmVla3Mgd2VyZSBhbWF6ZWQsIHNlZWluZyB0aGF0IG5vdCBldmVuIHRoZWlyIHBhc3RpbWVzIHdlcmUgdHJlYXRlZCBieSBoaW0gd2l0aCBuZWdsZWN0LCBidXQgdGhhdCwgYWx0aG91Z2ggaGUgd2FzIGEgbWFuIG9mIHN1Y2ggZ3JlYXQgYWZmYWlycywgaGUgZ2F2ZSBldmVuIHRvIHRyaWZsaW5nIHRoaW5ncyB0aGVpciBkdWUgYXR0ZW50aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['28.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCBoZSB3YXMgYWxzbyBkZWxpZ2h0ZWQgdG8gZmluZCB0aGF0LCB0aG91Z2ggcHJlcGFyYXRpb25zIGZvciBlbnRlcnRhaW5tZW50IHdlcmUgZXZlciBzbyBtYW55IGFuZCBzcGxlbmRpZCwgaGUgaGltc2VsZiB3YXMgdGhlIHBsZWFzYW50ZXN0IHNpZ2h0IHRvIGhpcyBndWVzdHMgYW5kIGdhdmUgdGhlbSBtb3N0IGVuam95bWVudDsgYW5kIGhlIHVzZWQgdG8gc2F5IHRvIHRob3NlIHdobyB3b25kZXJlZCBhdCBoaXMgYXR0ZW50aW9uIHRvIGRldGFpbHMgdGhhdCB0aGUgc2FtZSBzcGlyaXQgd2FzIHJlcXVpcmVkIGJvdGggaW4gbWFyc2hhbGxpbmcgYSBsaW5lIG9mIGJhdHRsZSBhbmQgaW4gcHJlc2lkaW5nIGF0IGEgYmFucXVldCB3ZWxsLCB0aGUgb2JqZWN0IGJlaW5nLCBpbiB0aGUgb25lIGNhc2UsIHRvIGNhdXNlIG1vc3QgdGVycm9yIGluIHRoZSBlbmVteSwgaW4gdGhlIG90aGVyLCB0byBnaXZlIG1vc3QgcGxlYXN1cmUgdG8gdGhlIGNvbXBhbnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['28.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBtb3JlIHRoYW4gYW55dGhpbmcgZWxzZSBtZW4gcHJhaXNlZCBoaXMgZnJlZWRvbSBvZiBzcGlyaXQgYW5kIGhpcyBncmVhdG5lc3Mgb2Ygc291bDsgZm9yIGhlIHdvdWxkIG5vdCBjb25zZW50IGV2ZW4gdG8gbG9vayB1cG9uIHRoZSBxdWFudGl0aWVzIG9mIHNpbHZlciBhbmQgdGhlIHF1YW50aXRpZXMgb2YgZ29sZCB0aGF0IHdlcmUgZ2F0aGVyZWQgdG9nZXRoZXIgZnJvbSB0aGUgcm95YWwgdHJlYXN1cmllcywgYnV0IGhhbmRlZCB0aGVtIG92ZXIgdG8gdGhlIHF1YWVzdG9ycyBmb3IgdGhlIHB1YmxpYyBjaGVzdC4gSXQgd2FzIG9ubHkgdGhlIGJvb2tzIG9mIHRoZSBraW5nIHRoYXQgaGUgYWxsb3dlZCBoaXMgc29ucywgd2hvIHdlcmUgZGV2b3RlZCB0byBsZWFybmluZywgdG8gY2hvb3NlIG91dCBmb3IgdGhlbXNlbHZlcywgYW5kIHdoZW4gaGUgd2FzIGRpc3RyaWJ1dGluZyByZXdhcmRzIGZvciB2YWxvdXIgaW4gdGhlIGJhdHRsZSwgaGUgZ2F2ZSBBZWxpdXMgVHViZXJvLCBoaXMgc29uLWluLWxhdywgYSBib3dsIG9mIGZpdmUgcG91bmRzIHdlaWdodC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['28.7'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI3IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIHRoZSBUdWJlcm8sIHdobywgYXMgSSBoYXZlIHNhaWQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDUuNCIgdmFsaWQ9InllcyI+Q2hhcHRlciB2LiA0LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiBkd2VsdCB3aXRoIGZpZnRlZW4gcmVsYXRpb25zLCBhbmQgYSBwYWx0cnkgZmFybSBzdXBwb3J0ZWQgdGhlbSBhbGwuIEFuZCB0aGF0IGlzIHNhaWQgdG8gaGF2ZSBiZWVuIHRoZSBmaXJzdCBzaWx2ZXIgdGhhdCBldmVyIGVudGVyZWQgdGhlIGhvdXNlIG9mIHRoZSBBZWxpaSwgYnJvdWdodCBpbiBhcyBhbiBob25vdXIgYmVzdG93ZWQgdXBvbiB2YWxvdXIsIGJ1dCB1cCB0byB0aGF0IHRpbWUgbmVpdGhlciB0aGV5IHRoZW1zZWx2ZXMgbm9yIHRoZWlyIHdpdmVzIHVzZWQgZWl0aGVyIHNpbHZlciBvciBnb2xkLgoJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDUuNCIgdmFsaWQ9InllcyI+Q2hhcHRlciB2LiA0LjwvYmlibD4KICAgICAgICAgICAgPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjI5IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgcHV0IGV2ZXJ5dGhpbmcgaW4gZ29vZCBvcmRlciwgaGFkIGJpZGRlbiB0aGUgR3JlZWtzIGZhcmV3ZWxsLCBhbmQgaGFkIGV4aG9ydGVkIHRoZSBNYWNlZG9uaWFucyB0byBiZSBtaW5kZnVsIG9mIHRoZSBmcmVlZG9tIGJlc3Rvd2VkIHVwb24gdGhlbSBieSB0aGUgUm9tYW5zIGFuZCBwcmVzZXJ2ZSBpdCBieSBnb29kIG9yZGVyIGFuZCBjb25jb3JkLCBoZSBtYXJjaGVkIGFnYWluc3QgRXBpcnVzLCBoYXZpbmcgYW4gb3JkZXIgZnJvbSB0aGUgc2VuYXRlIHRvIGdpdmUgdGhlIHNvbGRpZXJzIHdobyBoYWQgZm91Z2h0IHdpdGggaGltIHRoZSBiYXR0bGUgYWdhaW5zdCBQZXJzZXVzIHRoZSBwcml2aWxlZ2Ugb2YgcGlsbGFnaW5nIHRoZSBjaXRpZXMgdGhlcmUuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldpc2hpbmcgdG8gc2V0IHVwb24gdGhlIGluaGFiaXRhbnRzIGFsbCBhdCBvbmNlIGFuZCBzdWRkZW5seSwgd2hlbiBubyBvbmUgZXhwZWN0ZWQgaXQsIGhlIHNlbnQgZm9yIHRoZSB0ZW4gcHJpbmNpcGFsIG1lbiBvZiBlYWNoIGNpdHksIGFuZCBvcmRlcmVkIHRoZW0gdG8gYnJpbmcgaW4gb24gYSBmaXhlZCBkYXkgd2hhdGV2ZXIgc2lsdmVyIGFuZCBnb2xkIHRoZXkgaGFkIGluIHRoZWlyIGhvdXNlcyBhbmQgdGVtcGxlcy4gSGUgYWxzbyBzZW50IHdpdGggZWFjaCBvZiB0aGVzZSBib2RpZXMsIGFzIGlmIGZvciB0aGlzIHZlcnkgcHVycG9zZSwgYSBndWFyZCBvZiBzb2xkaWVycyBhbmQgYW4gb2ZmaWNlciwgd2hvIHByZXRlbmRlZCB0byBzZWFyY2ggZm9yIGFuZCByZWNlaXZlIHRoZSBtb25leS4gCgkJCQk8bWlsZXN0b25lIG49IjMiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IHdoZW4gdGhlIGFwcG9pbnRlZCBkYXkgY2FtZSwgYXQgb25lIGFuZCB0aGUgc2FtZSB0aW1lIHRoZXNlIGFsbCBzZXQgb3V0IHRvIG92ZXJydW4gYW5kIHBpbGxhZ2UgdGhlIGNpdGllcywgc28gdGhhdCBpbiBhIHNpbmdsZSBob3VyIGEgaHVuZHJlZCBhbmQgZmlmdHkgdGhvdXNhbmQgcGVyc29ucyB3ZXJlIG1hZGUgc2xhdmVzLCBhbmQgc2V2ZW50eSBjaXRpZXMgd2VyZSBzYWNrZWQ7IGFuZCB5ZXQgZnJvbSBhbGwgdGhpcyBkZXN0cnVjdGlvbiBhbmQgdXR0ZXIgcnVpbiBlYWNoIHNvbGRpZXIgcmVjZWl2ZWQgbm8gbW9yZSB0aGFuIGVsZXZlbiBkcmFjaG1hcyBhcyBoaXMgc2hhcmUsIGFuZCBhbGwgbWVuIHNodWRkZXJlZCBhdCB0aGUgaXNzdWUgb2YgdGhlIHdhciwgd2hlbiB0aGUgZGl2aXNpb24gb2YgYSB3aG9sZSBuYXRpb24ncyBzdWJzdGFuY2UgcmVzdWx0ZWQgaW4gc28gc2xpZ2h0IGEgZ2FpbiBhbmQgcHJvZml0IGZvciBlYWNoIHNvbGRpZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['29.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2hlbiBoZSBoYWQgcHV0IGV2ZXJ5dGhpbmcgaW4gZ29vZCBvcmRlciwgaGFkIGJpZGRlbiB0aGUgR3JlZWtzIGZhcmV3ZWxsLCBhbmQgaGFkIGV4aG9ydGVkIHRoZSBNYWNlZG9uaWFucyB0byBiZSBtaW5kZnVsIG9mIHRoZSBmcmVlZG9tIGJlc3Rvd2VkIHVwb24gdGhlbSBieSB0aGUgUm9tYW5zIGFuZCBwcmVzZXJ2ZSBpdCBieSBnb29kIG9yZGVyIGFuZCBjb25jb3JkLCBoZSBtYXJjaGVkIGFnYWluc3QgRXBpcnVzLCBoYXZpbmcgYW4gb3JkZXIgZnJvbSB0aGUgc2VuYXRlIHRvIGdpdmUgdGhlIHNvbGRpZXJzIHdobyBoYWQgZm91Z2h0IHdpdGggaGltIHRoZSBiYXR0bGUgYWdhaW5zdCBQZXJzZXVzIHRoZSBwcml2aWxlZ2Ugb2YgcGlsbGFnaW5nIHRoZSBjaXRpZXMgdGhlcmUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['29.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPldpc2hpbmcgdG8gc2V0IHVwb24gdGhlIGluaGFiaXRhbnRzIGFsbCBhdCBvbmNlIGFuZCBzdWRkZW5seSwgd2hlbiBubyBvbmUgZXhwZWN0ZWQgaXQsIGhlIHNlbnQgZm9yIHRoZSB0ZW4gcHJpbmNpcGFsIG1lbiBvZiBlYWNoIGNpdHksIGFuZCBvcmRlcmVkIHRoZW0gdG8gYnJpbmcgaW4gb24gYSBmaXhlZCBkYXkgd2hhdGV2ZXIgc2lsdmVyIGFuZCBnb2xkIHRoZXkgaGFkIGluIHRoZWlyIGhvdXNlcyBhbmQgdGVtcGxlcy4gSGUgYWxzbyBzZW50IHdpdGggZWFjaCBvZiB0aGVzZSBib2RpZXMsIGFzIGlmIGZvciB0aGlzIHZlcnkgcHVycG9zZSwgYSBndWFyZCBvZiBzb2xkaWVycyBhbmQgYW4gb2ZmaWNlciwgd2hvIHByZXRlbmRlZCB0byBzZWFyY2ggZm9yIGFuZCByZWNlaXZlIHRoZSBtb25leS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['29.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSBhcHBvaW50ZWQgZGF5IGNhbWUsIGF0IG9uZSBhbmQgdGhlIHNhbWUgdGltZSB0aGVzZSBhbGwgc2V0IG91dCB0byBvdmVycnVuIGFuZCBwaWxsYWdlIHRoZSBjaXRpZXMsIHNvIHRoYXQgaW4gYSBzaW5nbGUgaG91ciBhIGh1bmRyZWQgYW5kIGZpZnR5IHRob3VzYW5kIHBlcnNvbnMgd2VyZSBtYWRlIHNsYXZlcywgYW5kIHNldmVudHkgY2l0aWVzIHdlcmUgc2Fja2VkOyBhbmQgeWV0IGZyb20gYWxsIHRoaXMgZGVzdHJ1Y3Rpb24gYW5kIHV0dGVyIHJ1aW4gZWFjaCBzb2xkaWVyIHJlY2VpdmVkIG5vIG1vcmUgdGhhbiBlbGV2ZW4gZHJhY2htYXMgYXMgaGlzIHNoYXJlLCBhbmQgYWxsIG1lbiBzaHVkZGVyZWQgYXQgdGhlIGlzc3VlIG9mIHRoZSB3YXIsIHdoZW4gdGhlIGRpdmlzaW9uIG9mIGEgd2hvbGUgbmF0aW9uJ3Mgc3Vic3RhbmNlIHJlc3VsdGVkIGluIHNvIHNsaWdodCBhIGdhaW4gYW5kIHByb2ZpdCBmb3IgZWFjaCBzb2xkaWVyLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzAiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZW1pbGl1cywgdGhlbiwgYWZ0ZXIgZXhlY3V0aW5nIGEgY29tbWlzc2lvbiBzbyBjb250cmFyeSB0byBoaXMgbWlsZCBhbmQgZ2VuZXJvdXMgbmF0dXJlLCB3ZW50IGRvd24gdG8gT3JpY3VzLiBGcm9tIHRoZXJlIGhlIGNyb3NzZWQgaW50byBJdGFseSB3aXRoIGhpcyBmb3JjZXMsIGFuZCBzYWlsZWQgdXAgdGhlIHJpdmVyIFRpYmVyIG9uIHRoZSByb3lhbCBnYWxsZXksIHdoaWNoIGhhZCBzaXh0ZWVuIGJhbmtzIG9mIG9hcnMgYW5kIHdhcyByaWNobHkgYWRvcm5lZCB3aXRoIGNhcHR1cmVkIGFybXMgYW5kIGNsb3RocyBvZiBzY2FybGV0IGFuZCBwdXJwbGUsIHNvIHRoYXQgdGhlIFJvbWFucyBhY3R1YWxseSBjYW1lIGluIHRocm9uZ3MgZnJvbSBvdXQgdGhlIGNpdHksIGFzIGl0IHdlcmUgdG8gc29tZSBzcGVjdGFjbGUgb2YgdHJpdW1waGFudCBwcm9ncmVzcyB3aG9zZSBwbGVhc3VyZXMgdGhleSB3ZXJlIGVuam95aW5nIGluIGFkdmFuY2UsIGFuZCBmb2xsb3dlZCBhbG9uZyB0aGUgYmFua3MgYXMgdGhlIHNwbGFzaGluZyBvYXJzIHNlbnQgdGhlIHNoaXAgc2xvd2x5IHVwIHRoZSBzdHJlYW0uCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['30.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWVtaWxpdXMsIHRoZW4sIGFmdGVyIGV4ZWN1dGluZyBhIGNvbW1pc3Npb24gc28gY29udHJhcnkgdG8gaGlzIG1pbGQgYW5kIGdlbmVyb3VzIG5hdHVyZSwgd2VudCBkb3duIHRvIE9yaWN1cy4gRnJvbSB0aGVyZSBoZSBjcm9zc2VkIGludG8gSXRhbHkgd2l0aCBoaXMgZm9yY2VzLCBhbmQgc2FpbGVkIHVwIHRoZSByaXZlciBUaWJlciBvbiB0aGUgcm95YWwgZ2FsbGV5LCB3aGljaCBoYWQgc2l4dGVlbiBiYW5rcyBvZiBvYXJzIGFuZCB3YXMgcmljaGx5IGFkb3JuZWQgd2l0aCBjYXB0dXJlZCBhcm1zIGFuZCBjbG90aHMgb2Ygc2NhcmxldCBhbmQgcHVycGxlLCBzbyB0aGF0IHRoZSBSb21hbnMgYWN0dWFsbHkgY2FtZSBpbiB0aHJvbmdzIGZyb20gb3V0IHRoZSBjaXR5LCBhcyBpdCB3ZXJlIHRvIHNvbWUgc3BlY3RhY2xlIG9mIHRyaXVtcGhhbnQgcHJvZ3Jlc3Mgd2hvc2UgcGxlYXN1cmVzIHRoZXkgd2VyZSBlbmpveWluZyBpbiBhZHZhbmNlLCBhbmQgZm9sbG93ZWQgYWxvbmcgdGhlIGJhbmtzIGFzIHRoZSBzcGxhc2hpbmcgb2FycyBzZW50IHRoZSBzaGlwIHNsb3dseSB1cCB0aGUgc3RyZWFtLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgdGhlIHNvbGRpZXJzLCB3aG8gaGFkIGNhc3QgbG9uZ2luZyBleWVzIHVwb24gdGhlIHJveWFsIHRyZWFzdXJlcywgc2luY2UgdGhleSBoYWQgbm90IGdvdCBhcyBtdWNoIGFzIHRoZXkgdGhvdWdodCB0aGV5IGRlc2VydmVkLCB3ZXJlIHNlY3JldGx5IGVucmFnZWQgb24gdGhpcyBhY2NvdW50IGFuZCBiaXR0ZXJseSBkaXNwb3NlZCB0b3dhcmRzIEFlbWlsaXVzLCB3aGlsZSBvcGVubHkgdGhleSBhY2N1c2VkIGhpbSBvZiBoYXZpbmcgYmVlbiBoYXJzaCBhbmQgaW1wZXJpb3VzIGluIGhpcyBjb21tYW5kIG9mIHRoZW07IHRoZXkgd2VyZSB0aGVyZWZvcmUgbm90IHZlcnkgcmVhZHkgdG8gc2Vjb25kIGhpcyBlYWdlciBkZXNpcmVzIGZvciBhIHRyaXVtcGguIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFNlcnZpdXMgR2FsYmEsIHdobyB3YXMgYW4gZW5lbXkgb2YgQWVtaWxpdXMsIGFsdGhvdWdoIGhlIGhhZCBiZWVuIG9uZSBvZiBoaXMgbWlsaXRhcnkgdHJpYnVuZXMsIHBlcmNlaXZlZCB0aGlzLCBoZSBtYWRlIGJvbGQgdG8gZGVjbGFyZSBvcGVubHkgdGhhdCB0aGUgdHJpdW1waCBvdWdodCBub3QgdG8gYmUgYWxsb3dlZCBoaW0uIEhlIGFsc28gc293ZWQgbWFueSBjYWx1bW5pZXMgYWdhaW5zdCB0aGVpciBnZW5lcmFsIGFtb25nIHRoZSBtYXNzZXMgb2YgdGhlIHNvbGRpZXJ5LCBhbmQgcm91c2VkIHN0aWxsIGZ1cnRoZXIgdGhlIHJlc2VudG1lbnQgdGhleSBhbHJlYWR5IGZlbHQsIGFuZCB0aGVuIGFza2VkIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIGZvciBhbm90aGVyIGRheSBpbiB3aGljaCB0byBicmluZyBoaXMgYWNjdXNhdGlvbnMsIHNpbmNlIHRoYXQgZGF5IHdhcyBub3Qgc3VmZmljaWVudCwgb2Ygd2hpY2ggb25seSBmb3VyIGhvdXJzIHN0aWxsIHJlbWFpbmVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5CdXQgd2hlbiB0aGUgdHJpYnVuZXMgb3JkZXJlZCBoaW0gdG8gc3BlYWssIGlmIGhlIGhhZCBhbnl0aGluZyB0byBzYXksIGhlIGJlZ2FuIGEgc3BlZWNoIHdoaWNoIHdhcyBsb25nIGFuZCBmdWxsIG9mIGFsbCBzb3J0cyBvZiBpbmp1cmlvdXMgc3RhdGVtZW50cywgYW5kIHNvIGNvbnN1bWVkIHRoZSB0aW1lIHJlbWFpbmluZyBpbiB0aGUgZGF5LiBXaGVuIGRhcmtuZXNzIGNhbWUsIHRoZSB0cmlidW5lcyBkaXNzb2x2ZWQgdGhlIGFzc2VtYmx5LCBidXQgdGhlIHNvbGRpZXJzLCBub3cgZ3Jvd24gYm9sZGVyLCBmbG9ja2VkIHRvIEdhbGJhLCBmb3JtZWQgdGhlbXNlbHZlcyBpbnRvIGEgZmFjdGlvbiwgYW5kIGJlZm9yZSBpdCB3YXMgbGlnaHQgcHJvY2VlZGVkIHRvIHRha2UgcG9zc2Vzc2lvbiBvZiB0aGUgQ2FwaXRvbDsgZm9yIGl0IHdhcyB0aGVyZSB0aGF0IHRoZSB0cmlidW5lcyBwcm9wb3NlZCB0byBob2xkIHRoZSBhc3NlbWJseS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['30.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB0aGUgc29sZGllcnMsIHdobyBoYWQgY2FzdCBsb25naW5nIGV5ZXMgdXBvbiB0aGUgcm95YWwgdHJlYXN1cmVzLCBzaW5jZSB0aGV5IGhhZCBub3QgZ290IGFzIG11Y2ggYXMgdGhleSB0aG91Z2h0IHRoZXkgZGVzZXJ2ZWQsIHdlcmUgc2VjcmV0bHkgZW5yYWdlZCBvbiB0aGlzIGFjY291bnQgYW5kIGJpdHRlcmx5IGRpc3Bvc2VkIHRvd2FyZHMgQWVtaWxpdXMsIHdoaWxlIG9wZW5seSB0aGV5IGFjY3VzZWQgaGltIG9mIGhhdmluZyBiZWVuIGhhcnNoIGFuZCBpbXBlcmlvdXMgaW4gaGlzIGNvbW1hbmQgb2YgdGhlbTsgdGhleSB3ZXJlIHRoZXJlZm9yZSBub3QgdmVyeSByZWFkeSB0byBzZWNvbmQgaGlzIGVhZ2VyIGRlc2lyZXMgZm9yIGEgdHJpdW1waC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['30.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB3aGVuIFNlcnZpdXMgR2FsYmEsIHdobyB3YXMgYW4gZW5lbXkgb2YgQWVtaWxpdXMsIGFsdGhvdWdoIGhlIGhhZCBiZWVuIG9uZSBvZiBoaXMgbWlsaXRhcnkgdHJpYnVuZXMsIHBlcmNlaXZlZCB0aGlzLCBoZSBtYWRlIGJvbGQgdG8gZGVjbGFyZSBvcGVubHkgdGhhdCB0aGUgdHJpdW1waCBvdWdodCBub3QgdG8gYmUgYWxsb3dlZCBoaW0uIEhlIGFsc28gc293ZWQgbWFueSBjYWx1bW5pZXMgYWdhaW5zdCB0aGVpciBnZW5lcmFsIGFtb25nIHRoZSBtYXNzZXMgb2YgdGhlIHNvbGRpZXJ5LCBhbmQgcm91c2VkIHN0aWxsIGZ1cnRoZXIgdGhlIHJlc2VudG1lbnQgdGhleSBhbHJlYWR5IGZlbHQsIGFuZCB0aGVuIGFza2VkIHRoZSB0cmlidW5lcyBvZiB0aGUgcGVvcGxlIGZvciBhbm90aGVyIGRheSBpbiB3aGljaCB0byBicmluZyBoaXMgYWNjdXNhdGlvbnMsIHNpbmNlIHRoYXQgZGF5IHdhcyBub3Qgc3VmZmljaWVudCwgb2Ygd2hpY2ggb25seSBmb3VyIGhvdXJzIHN0aWxsIHJlbWFpbmVkLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['30.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCB3aGVuIHRoZSB0cmlidW5lcyBvcmRlcmVkIGhpbSB0byBzcGVhaywgaWYgaGUgaGFkIGFueXRoaW5nIHRvIHNheSwgaGUgYmVnYW4gYSBzcGVlY2ggd2hpY2ggd2FzIGxvbmcgYW5kIGZ1bGwgb2YgYWxsIHNvcnRzIG9mIGluanVyaW91cyBzdGF0ZW1lbnRzLCBhbmQgc28gY29uc3VtZWQgdGhlIHRpbWUgcmVtYWluaW5nIGluIHRoZSBkYXkuIFdoZW4gZGFya25lc3MgY2FtZSwgdGhlIHRyaWJ1bmVzIGRpc3NvbHZlZCB0aGUgYXNzZW1ibHksIGJ1dCB0aGUgc29sZGllcnMsIG5vdyBncm93biBib2xkZXIsIGZsb2NrZWQgdG8gR2FsYmEsIGZvcm1lZCB0aGVtc2VsdmVzIGludG8gYSBmYWN0aW9uLCBhbmQgYmVmb3JlIGl0IHdhcyBsaWdodCBwcm9jZWVkZWQgdG8gdGFrZSBwb3NzZXNzaW9uIG9mIHRoZSBDYXBpdG9sOyBmb3IgaXQgd2FzIHRoZXJlIHRoYXQgdGhlIHRyaWJ1bmVzIHByb3Bvc2VkIHRvIGhvbGQgdGhlIGFzc2VtYmx5LgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzEiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BcyBzb29uIGFzIGl0IHdhcyBkYXkgdGhlIHZvdGluZyBiZWdhbiwgYW5kIHRoZSBmaXJzdCB0cmliZSB3YXMgdm90aW5nIGFnYWluc3QgdGhlIHRyaXVtcGgsIHdoZW4ga25vd2xlZGdlIG9mIHRoZSBtYXR0ZXIgd2FzIGJyb3VnaHQgZG93biB0byB0aGUgcmVzdCBvZiB0aGUgcGVvcGxlIGFuZCB0aGUgc2VuYXRlLiBUaGUgbXVsdGl0dWRlLCBkZWVwbHkgZ3JpZXZlZCBhdCB0aGUgaW5kaWduaXR5IG9mZmVyZWQgdG8gQWVtaWxpdXMsIGNvdWxkIG9ubHkgY3J5IG91dCBhZ2FpbnN0IGl0IGluIHZhaW47IGJ1dCB0aGUgbW9zdCBwcm9taW5lbnQgc2VuYXRvcnMsIHdpdGggc2hvdXRzIGFnYWluc3QgdGhlIGlnbm9taW55IG9mIHRoZSB0aGluZywgZXhob3J0ZWQgb25lIGFub3RoZXIgdG8gYXR0YWNrIHRoZSBib2xkIGxpY2Vuc2Ugb2YgdGhlIHNvbGRpZXJzLCB3aGljaCB3b3VsZCBwcm9jZWVkIHRvIGFueSBhbmQgZXZlcnkgZGVlZCBvZiBsYXdsZXNzbmVzcyBhbmQgdmlvbGVuY2UgaWYgbm90aGluZyB3ZXJlIGRvbmUgdG8gcHJldmVudCB0aGVpciBkZXByaXZpbmcgQWVtaWxpdXMgUGF1bHVzIG9mIHRoZSBob25vdXJzIG9mIGhpcyB2aWN0b3J5LiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5UaGVuIHB1c2hpbmcgdGhlaXIgd2F5IHRocm91Z2ggdGhlIHRocm9uZyBhbmQgZ29pbmcgdXAgdG8gdGhlIENhcGl0b2wgaW4gYSBib2R5LCB0aGV5IHRvbGQgdGhlIHRyaWJ1bmVzIHRvIHB1dCBhIHN0b3AgdG8gdGhlIHZvdGluZyB1bnRpbCB0aGV5IGNvdWxkIGZpbmlzaCB3aGF0IHRoZXkgd2lzaGVkIHRvIHNheSB0byB0aGUgcGVvcGxlLiBBbGwgdm90aW5nIHN0b3BwZWQsIHNpbGVuY2Ugd2FzIG1hZGUsIGFuZCBNYXJjdXMgU2VydmlsaXVzLCBhIG1hbiBvZiBjb25zdWxhciBkaWduaXR5LCBhbmQgb25lIHdobyBoYWQgc2xhaW4gdHdlbnR5LXRocmVlIGZvZXMgaW4gc2luZ2xlIGNvbWJhdCwgY2FtZSBmb3J3YXJkIGFuZCBzYWlkIHRoYXQgaGUga25ldyBub3cgYmV0dGVyIHRoYW4gZXZlciBiZWZvcmUgaG93IGdyZWF0IGEgY29tbWFuZGVyIEFlbWlsaXVzIFBhdWx1cyB3YXMsIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoZW4gaGUgc2F3IGhvdyBmdWxsIG9mIGJhc2VuZXNzIGFuZCBkaXNvYmVkaWVuY2UgdGhlIGFybXkgd2FzIHdoaWNoIGhlIGhhZCB1c2VkIGluIHRoZSBzdWNjZXNzZnVsIGFjY29tcGxpc2htZW50IG9mIHN1Y2ggZ3JlYXQgYW5kIGZhaXIgZXhwbG9pdHM7IGFuZCBoZSB3YXMgYW1hemVkIHRoYXQgdGhlIHBlb3BsZSwgd2hpbGUgZXh1bHRpbmcgaW4gdHJpdW1waHMgb3ZlciBJbGx5cmlhbnMgYW5kIExpZ3VyaWFucywgYmVncnVkZ2VkIGl0c2VsZiB0aGUgc2lnaHQgb2YgdGhlIGtpbmcgb2YgTWFjZWRvbmlhIHRha2VuIGFsaXZlIGFuZCB0aGUgZ2xvcnkgb2YgQWxleGFuZGVyIGFuZCBQaGlsaXAgbWFkZSBzcG9pbCBieSBSb21hbiBhcm1zLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIGlzIGl0IG5vdCBhIHN0cmFuZ2UgdGhpbmcsPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgd2hlbiBhbiB1bnN1YnN0YW50aWFsIHJ1bW91ciBvZiB2aWN0b3J5IGNhbWUgc3VkZGVubHkgYW5kIHByZW1hdHVyZWx5IHRvIHRoZSBjaXR5LCB5b3Ugc2FjcmlmaWNlZCB0byB0aGUgZ29kcyBhbmQgcHJheWVkIHRoYXQgdGhpcyByZXBvcnQgbWlnaHQgc3BlZWRpbHkgYmUgdmVyaWZpZWQgYmVmb3JlIHlvdXIgZXllczsgYnV0IG5vdyB0aGF0IHlvdXIgZ2VuZXJhbCBpcyBjb21lIHdpdGggaGlzIHJlYWwgdmljdG9yeSwgeW91IHJvYiB0aGUgZ29kcyBvZiB0aGVpciBob25vdXIsIGFuZCB5b3Vyc2VsdmVzIG9mIHlvdXIgam95IGluIGl0LCBhcyB0aG91Z2ggYWZyYWlkIHRvIGJlaG9sZCB0aGUgbWFnbml0dWRlIG9mIGhpcyBzdWNjZXNzZXMsIG9yIHNlZWtpbmcgdG8gc3BhcmUgdGhlIGZlZWxpbmdzIG9mIHlvdXIgZW5lbXk/IEFuZCB5ZXQgaXQgd2VyZSBiZXR0ZXIgdGhhdCBvdXQgb2YgcGl0eSB0b3dhcmRzIGhpbSwgYW5kIG5vdCBvdXQgb2YgZW52eSB0b3dhcmRzIHlvdXIgZ2VuZXJhbCwgdGhlIHRyaXVtcGggc2hvdWxkIGJlIGRvbmUgYXdheSB3aXRoLiAKCQkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QnV0LDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj50byBzdWNoIGdyZWF0IHBvd2VyIGlzIG1hbGljZSBicm91Z2h0IGJ5IHlvdSB0aGF0IGEgbWFuIHdpdGhvdXQgYSB3b3VuZCB0byBzaG93LCBhbmQgd2hvc2UgcGVyc29uIGlzIHNsZWVrIGZyb20gZGVsaWNhdGUgYW5kIGNvd2FyZGx5IGVmZmVtaW5hY3ksIGRhcmVzIHRvIHRhbGsgYWJvdXQgdGhlIGNvbmR1Y3Qgb2YgYSBnZW5lcmFsIGFuZCBoaXMgdHJpdW1waCB0byB1cyB3aG8gaGF2ZSBiZWVuIHRhdWdodCBieSBhbGwgdGhlc2Ugd291bmRzIHRvIGp1ZGdlIHRoZSB2YWxvdXIgYW5kIHRoZSBjb3dhcmRpY2Ugb2YgZ2VuZXJhbHMuPC9xPiBBbmQgd2l0aCB0aGUgd29yZHMgaGUgcGFydGVkIGhpcyBnYXJtZW50IGFuZCBkaXNwbGF5ZWQgdXBvbiBoaXMgYnJlYXN0IGFuIGluY3JlZGlibGUgbnVtYmVyIG9mIHdvdW5kcy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+VGhlbiB3aGVlbGluZyBhYm91dCwgaGUgdW5jb3ZlcmVkIHNvbWUgcGFydHMgb2YgaGlzIHBlcnNvbiB3aGljaCBpdCBpcyB0aG91Z2h0IHVuYmVjb21pbmcgdG8gaGF2ZSBuYWtlZCBpbiBhIGNyb3dkLCBhbmQgdHVybmluZyB0byBHYWxiYSwgc2FpZDogCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGxhdWdoZXN0IGF0IHRoZXNlIHNjYXJzLCBidXQgSSBnbG9yeSBpbiB0aGVtIGJlZm9yZSBteSBmZWxsb3ctY2l0aXplbnMsIGluIHdob3NlIGRlZmVuY2UgSSBnb3QgdGhlbSwgcmlkaW5nIG5pZ2h0IGFuZCBkYXkgd2l0aG91dCBjZWFzaW5nLiBCdXQgY29tZSwgdGFrZSB0aGVzZSBwZW9wbGUgb2ZmIHRvIHRoZWlyIHZvdGluZzsgYW5kIEkgd2lsbCBjb21lIGRvd24gYW5kIGZvbGxvdyBhbG9uZyB3aXRoIHRoZW0gYWxsLCBhbmQgd2lsbCBsZWFybiB3aG8gYXJlIGJhc2UgYW5kIHRoYW5rbGVzcyBhbmQgcHJlZmVyIHRvIGJlIHdoZWVkbGVkIGFuZCBmbGF0dGVyZWQgaW4gd2FyIHJhdGhlciB0aGFuIGNvbW1hbmRlZC48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['31.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QXMgc29vbiBhcyBpdCB3YXMgZGF5IHRoZSB2b3RpbmcgYmVnYW4sIGFuZCB0aGUgZmlyc3QgdHJpYmUgd2FzIHZvdGluZyBhZ2FpbnN0IHRoZSB0cml1bXBoLCB3aGVuIGtub3dsZWRnZSBvZiB0aGUgbWF0dGVyIHdhcyBicm91Z2h0IGRvd24gdG8gdGhlIHJlc3Qgb2YgdGhlIHBlb3BsZSBhbmQgdGhlIHNlbmF0ZS4gVGhlIG11bHRpdHVkZSwgZGVlcGx5IGdyaWV2ZWQgYXQgdGhlIGluZGlnbml0eSBvZmZlcmVkIHRvIEFlbWlsaXVzLCBjb3VsZCBvbmx5IGNyeSBvdXQgYWdhaW5zdCBpdCBpbiB2YWluOyBidXQgdGhlIG1vc3QgcHJvbWluZW50IHNlbmF0b3JzLCB3aXRoIHNob3V0cyBhZ2FpbnN0IHRoZSBpZ25vbWlueSBvZiB0aGUgdGhpbmcsIGV4aG9ydGVkIG9uZSBhbm90aGVyIHRvIGF0dGFjayB0aGUgYm9sZCBsaWNlbnNlIG9mIHRoZSBzb2xkaWVycywgd2hpY2ggd291bGQgcHJvY2VlZCB0byBhbnkgYW5kIGV2ZXJ5IGRlZWQgb2YgbGF3bGVzc25lc3MgYW5kIHZpb2xlbmNlIGlmIG5vdGhpbmcgd2VyZSBkb25lIHRvIHByZXZlbnQgdGhlaXIgZGVwcml2aW5nIEFlbWlsaXVzIFBhdWx1cyBvZiB0aGUgaG9ub3VycyBvZiBoaXMgdmljdG9yeS4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gcHVzaGluZyB0aGVpciB3YXkgdGhyb3VnaCB0aGUgdGhyb25nIGFuZCBnb2luZyB1cCB0byB0aGUgQ2FwaXRvbCBpbiBhIGJvZHksIHRoZXkgdG9sZCB0aGUgdHJpYnVuZXMgdG8gcHV0IGEgc3RvcCB0byB0aGUgdm90aW5nIHVudGlsIHRoZXkgY291bGQgZmluaXNoIHdoYXQgdGhleSB3aXNoZWQgdG8gc2F5IHRvIHRoZSBwZW9wbGUuIEFsbCB2b3Rpbmcgc3RvcHBlZCwgc2lsZW5jZSB3YXMgbWFkZSwgYW5kIE1hcmN1cyBTZXJ2aWxpdXMsIGEgbWFuIG9mIGNvbnN1bGFyIGRpZ25pdHksIGFuZCBvbmUgd2hvIGhhZCBzbGFpbiB0d2VudHktdGhyZWUgZm9lcyBpbiBzaW5nbGUgY29tYmF0LCBjYW1lIGZvcndhcmQgYW5kIHNhaWQgdGhhdCBoZSBrbmV3IG5vdyBiZXR0ZXIgdGhhbiBldmVyIGJlZm9yZSBob3cgZ3JlYXQgYSBjb21tYW5kZXIgQWVtaWxpdXMgUGF1bHVzIHdhcywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['31.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPndoZW4gaGUgc2F3IGhvdyBmdWxsIG9mIGJhc2VuZXNzIGFuZCBkaXNvYmVkaWVuY2UgdGhlIGFybXkgd2FzIHdoaWNoIGhlIGhhZCB1c2VkIGluIHRoZSBzdWNjZXNzZnVsIGFjY29tcGxpc2htZW50IG9mIHN1Y2ggZ3JlYXQgYW5kIGZhaXIgZXhwbG9pdHM7IGFuZCBoZSB3YXMgYW1hemVkIHRoYXQgdGhlIHBlb3BsZSwgd2hpbGUgZXh1bHRpbmcgaW4gdHJpdW1waHMgb3ZlciBJbGx5cmlhbnMgYW5kIExpZ3VyaWFucywgYmVncnVkZ2VkIGl0c2VsZiB0aGUgc2lnaHQgb2YgdGhlIGtpbmcgb2YgTWFjZWRvbmlhIHRha2VuIGFsaXZlIGFuZCB0aGUgZ2xvcnkgb2YgQWxleGFuZGVyIGFuZCBQaGlsaXAgbWFkZSBzcG9pbCBieSBSb21hbiBhcm1zLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPkZvciBpcyBpdCBub3QgYSBzdHJhbmdlIHRoaW5nLDwvcT4gc2FpZCBoZSwgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRoYXQgd2hlbiBhbiB1bnN1YnN0YW50aWFsIHJ1bW91ciBvZiB2aWN0b3J5IGNhbWUgc3VkZGVubHkgYW5kIHByZW1hdHVyZWx5IHRvIHRoZSBjaXR5LCB5b3Ugc2FjcmlmaWNlZCB0byB0aGUgZ29kcyBhbmQgcHJheWVkIHRoYXQgdGhpcyByZXBvcnQgbWlnaHQgc3BlZWRpbHkgYmUgdmVyaWZpZWQgYmVmb3JlIHlvdXIgZXllczsgYnV0IG5vdyB0aGF0IHlvdXIgZ2VuZXJhbCBpcyBjb21lIHdpdGggaGlzIHJlYWwgdmljdG9yeSwgeW91IHJvYiB0aGUgZ29kcyBvZiB0aGVpciBob25vdXIsIGFuZCB5b3Vyc2VsdmVzIG9mIHlvdXIgam95IGluIGl0LCBhcyB0aG91Z2ggYWZyYWlkIHRvIGJlaG9sZCB0aGUgbWFnbml0dWRlIG9mIGhpcyBzdWNjZXNzZXMsIG9yIHNlZWtpbmcgdG8gc3BhcmUgdGhlIGZlZWxpbmdzIG9mIHlvdXIgZW5lbXk/IEFuZCB5ZXQgaXQgd2VyZSBiZXR0ZXIgdGhhdCBvdXQgb2YgcGl0eSB0b3dhcmRzIGhpbSwgYW5kIG5vdCBvdXQgb2YgZW52eSB0b3dhcmRzIHlvdXIgZ2VuZXJhbCwgdGhlIHRyaXVtcGggc2hvdWxkIGJlIGRvbmUgYXdheSB3aXRoLiAKCQkJCQk8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5CdXQsPC9xPiBzYWlkIGhlLCAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCw8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPnRvIHN1Y2ggZ3JlYXQgcG93ZXIgaXMgbWFsaWNlIGJyb3VnaHQgYnkgeW91IHRoYXQgYSBtYW4gd2l0aG91dCBhIHdvdW5kIHRvIHNob3csIGFuZCB3aG9zZSBwZXJzb24gaXMgc2xlZWsgZnJvbSBkZWxpY2F0ZSBhbmQgY293YXJkbHkgZWZmZW1pbmFjeSwgZGFyZXMgdG8gdGFsayBhYm91dCB0aGUgY29uZHVjdCBvZiBhIGdlbmVyYWwgYW5kIGhpcyB0cml1bXBoIHRvIHVzIHdobyBoYXZlIGJlZW4gdGF1Z2h0IGJ5IGFsbCB0aGVzZSB3b3VuZHMgdG8ganVkZ2UgdGhlIHZhbG91ciBhbmQgdGhlIGNvd2FyZGljZSBvZiBnZW5lcmFscy48L3E+IEFuZCB3aXRoIHRoZSB3b3JkcyBoZSBwYXJ0ZWQgaGlzIGdhcm1lbnQgYW5kIGRpc3BsYXllZCB1cG9uIGhpcyBicmVhc3QgYW4gaW5jcmVkaWJsZSBudW1iZXIgb2Ygd291bmRzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['31.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPlRoZW4gd2hlZWxpbmcgYWJvdXQsIGhlIHVuY292ZXJlZCBzb21lIHBhcnRzIG9mIGhpcyBwZXJzb24gd2hpY2ggaXQgaXMgdGhvdWdodCB1bmJlY29taW5nIHRvIGhhdmUgbmFrZWQgaW4gYSBjcm93ZCwgYW5kIHR1cm5pbmcgdG8gR2FsYmEsIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5UaG91IGxhdWdoZXN0IGF0IHRoZXNlIHNjYXJzLCBidXQgSSBnbG9yeSBpbiB0aGVtIGJlZm9yZSBteSBmZWxsb3ctY2l0aXplbnMsIGluIHdob3NlIGRlZmVuY2UgSSBnb3QgdGhlbSwgcmlkaW5nIG5pZ2h0IGFuZCBkYXkgd2l0aG91dCBjZWFzaW5nLiBCdXQgY29tZSwgdGFrZSB0aGVzZSBwZW9wbGUgb2ZmIHRvIHRoZWlyIHZvdGluZzsgYW5kIEkgd2lsbCBjb21lIGRvd24gYW5kIGZvbGxvdyBhbG9uZyB3aXRoIHRoZW0gYWxsLCBhbmQgd2lsbCBsZWFybiB3aG8gYXJlIGJhc2UgYW5kIHRoYW5rbGVzcyBhbmQgcHJlZmVyIHRvIGJlIHdoZWVkbGVkIGFuZCBmbGF0dGVyZWQgaW4gd2FyIHJhdGhlciB0aGFuIGNvbW1hbmRlZC48L3E+CgkJCSAgICAgIDxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgc3BlZWNoLCB0aGV5IHRlbGwgdXMsIHNvIHJlYnVmZmVkIHRoZSBzb2xkaWVyeSBhbmQgY2hhbmdlZCB0aGVpciBtaW5kcyB0aGF0IHRoZSB0cml1bXBoIHdhcyB2b3RlZCB0byBBZW1pbGl1cyBieSBhbGwgdGhlIHRyaWJlcy4gQW5kIGl0IHdhcyBjb25kdWN0ZWQsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiBOb3ZlbWJlciwgMTY3IEIuQy48L25vdGU+IHRoZXkgc2F5LCBhZnRlciB0aGUgZm9sbG93aW5nIGZhc2hpb24uIFRoZSBwZW9wbGUgZXJlY3RlZCBzY2FmZm9sZGluZ3MgaW4gdGhlIHRoZWF0cmVzIGZvciBlcXVlc3RyaWFuIGNvbnRlc3RzLCB3aGljaCB0aGV5IGNhbGwgY2lyY3VzZXMsIGFuZCByb3VuZCB0aGUgZm9ydW0sIG9jY3VwaWVkIHRoZSBvdGhlciBwYXJ0cyBvZiB0aGUgY2l0eSB3aGljaCBhZmZvcmRlZCBhIHZpZXcgb2YgdGhlIHByb2Nlc3Npb24sIGFuZCB3aXRuZXNzZWQgdGhlIHNwZWN0YWNsZSBhcnJheWVkIGluIHdoaXRlIGdhcm1lbnRzLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5FdmVyeSB0ZW1wbGUgd2FzIG9wZW4gYW5kIGZpbGxlZCB3aXRoIGdhcmxhbmRzIGFuZCBpbmNlbnNlLCB3aGlsZSBudW1lcm91cyBzZXJ2aXRvcnMgYW5kIGxpY3RvcnMgcmVzdHJhaW5lZCB0aGUgdGhyb25naW5nIGFuZCBzY3VycnlpbmcgY3Jvd2RzIGFuZCBrZXB0IHRoZSBzdHJlZXRzIG9wZW4gYW5kIGNsZWFyLiBUaHJlZSBkYXlzIHdlcmUgYXNzaWduZWQgZm9yIHRoZSB0cml1bXBoYWwgcHJvY2Vzc2lvbi4gVGhlIGZpcnN0IGJhcmVseSBzdWZmaWNlZCBmb3IgdGhlIGV4aGliaXRpb24gb2YgdGhlIGNhcHR1cmVkIHN0YXR1ZXMsIHBhaW50aW5ncywgYW5kIGNvbG9zc2FsIGZpZ3VyZXMsIHdoaWNoIHdlcmUgY2FycmllZCBvbiB0d28gaHVuZHJlZCBhbmQgZmlmdHkgY2hhcmlvdHMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBzZWNvbmQsIHRoZSBmaW5lc3QgYW5kIHJpY2hlc3Qgb2YgdGhlIE1hY2Vkb25pYW4gYXJtcyB3ZXJlIGJvcm5lIGFsb25nIGluIG1hbnkgd2FnZ29ucy4gVGhlIGFybXMgdGhlbXNlbHZlcyBnbGl0dGVyZWQgd2l0aCBmcmVzaGx5IHBvbGlzaGVkIGJyb256ZSBhbmQgc3RlZWwsIGFuZCB3ZXJlIGNhcmVmdWxseSBhbmQgYXJ0ZnVsbHkgYXJyYW5nZWQgdG8gbG9vayBleGFjdGx5IGFzIHRob3VnaCB0aGV5IGhhZCBiZWVuIHBpbGVkIHRvZ2V0aGVyIGluIGhlYXBzIGFuZCBhdCByYW5kb20sIGhlbG1ldHMgbHlpbmcgdXBvbiBzaGllbGRzIGFuZCBicmVhc3QtcGxhdGVzIHVwb24gZ3JlYXZlcywgCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+d2hpbGUgQ3JldGFuIHRhcmdldHMgYW5kIFRocmFjaWFuIHdpY2tlciBzaGllbGRzIGFuZCBxdWl2ZXJzIHdlcmUgbWl4ZWQgdXAgd2l0aCBob3JzZXMnIGJyaWRsZXMsIGFuZCB0aHJvdWdoIHRoZW0gcHJvamVjdGVkIG5ha2VkIHN3b3JkcyBhbmQgbG9uZyBNYWNlZG9uaWFuIHNwZWFycyBwbGFudGVkIGFtb25nIHRoZW0sIGFsbCB0aGUgYXJtcyBiZWluZyBzbyBsb29zZWx5IHBhY2tlZCB0aGF0IHRoZXkgc21vdGUgYWdhaW5zdCBlYWNoIG90aGVyIGFzIHRoZXkgd2VyZSBib3JuZSBhbG9uZyBhbmQgZ2F2ZSBvdXQgYSBoYXJzaCBhbmQgZHJlYWRmdWwgc291bmQsIGFuZCB0aGUgc2lnaHQgb2YgdGhlbSwgZXZlbiB0aG91Z2ggdGhleSB3ZXJlIHNwb2lscyBvZiBhIGNvbnF1ZXJlZCBlbmVteSwgd2FzIG5vdCB3aXRob3V0IGl0cyB0ZXJyb3JzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5BZnRlciB0aGUgd2FnZ29ucyBsYWRlbiB3aXRoIGFybW91ciB0aGVyZSBmb2xsb3dlZCB0aHJlZSB0aG91c2FuZCBtZW4gY2FycnlpbmcgY29pbmVkIHNpbHZlciBpbiBzZXZlbiBodW5kcmVkIGFuZCBmaWZ0eSB2ZXNzZWxzLCBlYWNoIG9mIHdoaWNoIGNvbnRhaW5lZCB0aHJlZSB0YWxlbnRzIGFuZCB3YXMgYm9ybmUgYnkgZm91ciBtZW4sIHdoaWxlIHN0aWxsIG90aGVyIG1lbiBjYXJyaWVkIG1peGluZy1ib3dscyBvZiBzaWx2ZXIsIGRyaW5raW5nIGhvcm5zLCBib3dscywgYW5kIGN1cHMsIGFsbCB3ZWxsIGFycmFuZ2VkIGZvciBzaG93IGFuZCBleGNlbGxpbmcgaW4gc2l6ZSBhbmQgaW4gdGhlIGRlcHRoIG9mIHRoZWlyIGNhcnZlZCBvcm5hbWVudHMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['32.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyBzcGVlY2gsIHRoZXkgdGVsbCB1cywgc28gcmVidWZmZWQgdGhlIHNvbGRpZXJ5IGFuZCBjaGFuZ2VkIHRoZWlyIG1pbmRzIHRoYXQgdGhlIHRyaXVtcGggd2FzIHZvdGVkIHRvIEFlbWlsaXVzIGJ5IGFsbCB0aGUgdHJpYmVzLiBBbmQgaXQgd2FzIGNvbmR1Y3RlZCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+SW4gTm92ZW1iZXIsIDE2NyBCLkMuPC9ub3RlPiB0aGV5IHNheSwgYWZ0ZXIgdGhlIGZvbGxvd2luZyBmYXNoaW9uLiBUaGUgcGVvcGxlIGVyZWN0ZWQgc2NhZmZvbGRpbmdzIGluIHRoZSB0aGVhdHJlcyBmb3IgZXF1ZXN0cmlhbiBjb250ZXN0cywgd2hpY2ggdGhleSBjYWxsIGNpcmN1c2VzLCBhbmQgcm91bmQgdGhlIGZvcnVtLCBvY2N1cGllZCB0aGUgb3RoZXIgcGFydHMgb2YgdGhlIGNpdHkgd2hpY2ggYWZmb3JkZWQgYSB2aWV3IG9mIHRoZSBwcm9jZXNzaW9uLCBhbmQgd2l0bmVzc2VkIHRoZSBzcGVjdGFjbGUgYXJyYXllZCBpbiB3aGl0ZSBnYXJtZW50cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkV2ZXJ5IHRlbXBsZSB3YXMgb3BlbiBhbmQgZmlsbGVkIHdpdGggZ2FybGFuZHMgYW5kIGluY2Vuc2UsIHdoaWxlIG51bWVyb3VzIHNlcnZpdG9ycyBhbmQgbGljdG9ycyByZXN0cmFpbmVkIHRoZSB0aHJvbmdpbmcgYW5kIHNjdXJyeWluZyBjcm93ZHMgYW5kIGtlcHQgdGhlIHN0cmVldHMgb3BlbiBhbmQgY2xlYXIuIFRocmVlIGRheXMgd2VyZSBhc3NpZ25lZCBmb3IgdGhlIHRyaXVtcGhhbCBwcm9jZXNzaW9uLiBUaGUgZmlyc3QgYmFyZWx5IHN1ZmZpY2VkIGZvciB0aGUgZXhoaWJpdGlvbiBvZiB0aGUgY2FwdHVyZWQgc3RhdHVlcywgcGFpbnRpbmdzLCBhbmQgY29sb3NzYWwgZmlndXJlcywgd2hpY2ggd2VyZSBjYXJyaWVkIG9uIHR3byBodW5kcmVkIGFuZCBmaWZ0eSBjaGFyaW90cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk9uIHRoZSBzZWNvbmQsIHRoZSBmaW5lc3QgYW5kIHJpY2hlc3Qgb2YgdGhlIE1hY2Vkb25pYW4gYXJtcyB3ZXJlIGJvcm5lIGFsb25nIGluIG1hbnkgd2FnZ29ucy4gVGhlIGFybXMgdGhlbXNlbHZlcyBnbGl0dGVyZWQgd2l0aCBmcmVzaGx5IHBvbGlzaGVkIGJyb256ZSBhbmQgc3RlZWwsIGFuZCB3ZXJlIGNhcmVmdWxseSBhbmQgYXJ0ZnVsbHkgYXJyYW5nZWQgdG8gbG9vayBleGFjdGx5IGFzIHRob3VnaCB0aGV5IGhhZCBiZWVuIHBpbGVkIHRvZ2V0aGVyIGluIGhlYXBzIGFuZCBhdCByYW5kb20sIGhlbG1ldHMgbHlpbmcgdXBvbiBzaGllbGRzIGFuZCBicmVhc3QtcGxhdGVzIHVwb24gZ3JlYXZlcywgCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPndoaWxlIENyZXRhbiB0YXJnZXRzIGFuZCBUaHJhY2lhbiB3aWNrZXIgc2hpZWxkcyBhbmQgcXVpdmVycyB3ZXJlIG1peGVkIHVwIHdpdGggaG9yc2VzJyBicmlkbGVzLCBhbmQgdGhyb3VnaCB0aGVtIHByb2plY3RlZCBuYWtlZCBzd29yZHMgYW5kIGxvbmcgTWFjZWRvbmlhbiBzcGVhcnMgcGxhbnRlZCBhbW9uZyB0aGVtLCBhbGwgdGhlIGFybXMgYmVpbmcgc28gbG9vc2VseSBwYWNrZWQgdGhhdCB0aGV5IHNtb3RlIGFnYWluc3QgZWFjaCBvdGhlciBhcyB0aGV5IHdlcmUgYm9ybmUgYWxvbmcgYW5kIGdhdmUgb3V0IGEgaGFyc2ggYW5kIGRyZWFkZnVsIHNvdW5kLCBhbmQgdGhlIHNpZ2h0IG9mIHRoZW0sIGV2ZW4gdGhvdWdoIHRoZXkgd2VyZSBzcG9pbHMgb2YgYSBjb25xdWVyZWQgZW5lbXksIHdhcyBub3Qgd2l0aG91dCBpdHMgdGVycm9ycy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['32.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFmdGVyIHRoZSB3YWdnb25zIGxhZGVuIHdpdGggYXJtb3VyIHRoZXJlIGZvbGxvd2VkIHRocmVlIHRob3VzYW5kIG1lbiBjYXJyeWluZyBjb2luZWQgc2lsdmVyIGluIHNldmVuIGh1bmRyZWQgYW5kIGZpZnR5IHZlc3NlbHMsIGVhY2ggb2Ygd2hpY2ggY29udGFpbmVkIHRocmVlIHRhbGVudHMgYW5kIHdhcyBib3JuZSBieSBmb3VyIG1lbiwgd2hpbGUgc3RpbGwgb3RoZXIgbWVuIGNhcnJpZWQgbWl4aW5nLWJvd2xzIG9mIHNpbHZlciwgZHJpbmtpbmcgaG9ybnMsIGJvd2xzLCBhbmQgY3VwcywgYWxsIHdlbGwgYXJyYW5nZWQgZm9yIHNob3cgYW5kIGV4Y2VsbGluZyBpbiBzaXplIGFuZCBpbiB0aGUgZGVwdGggb2YgdGhlaXIgY2FydmVkIG9ybmFtZW50cy4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjMzIiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIHRoaXJkIGRheSwgYXMgc29vbiBhcyBpdCB3YXMgbW9ybmluZywgdHJ1bXBldGVycyBsZWQgdGhlIHdheSwgc291bmRpbmcgb3V0IG5vIG1hcmNoaW5nIG9yIHByb2Nlc3Npb25hbCBzdHJhaW4sIGJ1dCBzdWNoIGEgb25lIGFzIHRoZSBSb21hbnMgdXNlIHRvIHJvdXNlIHRoZW1zZWx2ZXMgdG8gYmF0dGxlLiBBZnRlciB0aGVzZSB0aGVyZSB3ZXJlIGxlZCBhbG9uZyBhIGh1bmRyZWQgYW5kIHR3ZW50eSBzdGFsbC1mZWQgb3hlbiB3aXRoIGdpbGRlZCBob3JucywgYmVkZWNrZWQgd2l0aCBmaWxsZXRzIGFuZCBnYXJsYW5kcy4gVGhvc2Ugd2hvIGxlZCB0aGVzZSB2aWN0aW1zIHRvIHRoZSBzYWNyaWZpY2Ugd2VyZSB5b3VuZyBtZW4gd2VhcmluZyBhcHJvbnMgd2l0aCBoYW5kc29tZSBib3JkZXJzLCBhbmQgYm95cyBhdHRlbmRlZCB0aGVtIGNhcnJ5aW5nIGdvbGQgYW5kIHNpbHZlciB2ZXNzZWxzIG9mIGxpYmF0aW9uLiAKCQkJCTxtaWxlc3RvbmUgbj0iMiIgdW5pdD0ic2VjdGlvbiIgLz5OZXh0LCBhZnRlciB0aGVzZSwgY2FtZSB0aGUgY2FycmllcnMgb2YgdGhlIGNvaW5lZCBnb2xkLCB3aGljaCwgbGlrZSB0aGUgc2lsdmVyLCB3YXMgcG9ydGlvbmVkIG91dCBpbnRvIHZlc3NlbHMgY29udGFpbmluZyB0aHJlZSB0YWxlbnRzOyBhbmQgdGhlIG51bWJlciBvZiB0aGVzZSB2ZXNzZWxzIHdhcyBlaWdodHkgbGFja2luZyB0aHJlZS4gQWZ0ZXIgdGhlc2UgZm9sbG93ZWQgdGhlIGJlYXJlcnMgb2YgdGhlIGNvbnNlY3JhdGVkIGJvd2wsIHdoaWNoIEFlbWlsaXVzIGhhZCBjYXVzZWQgdG8gYmUgbWFkZSBvZiB0ZW4gdGFsZW50cyBvZiBnb2xkIGFuZCBhZG9ybmVkIHdpdGggcHJlY2lvdXMgc3RvbmVzLCBhbmQgdGhlbiB0aG9zZSB3aG8gZGlzcGxheWVkIHRoZSBib3dscyBrbm93biBhcyBBbnRpZ29uaWRzIGFuZCBTZWxldWNpZHMgYW5kIFRoZXJhY2xlaWFuLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+VGhlc2UgbGFzdCB3ZXJlIG5hbWVkIGZyb20gYSBmYW1vdXMgQ29yaW50aGlhbiBhcnRpc3QuPC9ub3RlPiB0b2dldGhlciB3aXRoIGFsbCB0aGUgZ29sZCBwbGF0ZSBvZiBQZXJzZXVzJ3MgdGFibGUuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgZm9sbG93ZWQgYnkgdGhlIGNoYXJpb3Qgb2YgUGVyc2V1cywgd2hpY2ggYm9yZSBoaXMgYXJtcywgYW5kIGhpcyBkaWFkZW0gbHlpbmcgdXBvbiBoaXMgYXJtcy4gVGhlbiwgYXQgYSBsaXR0bGUgaW50ZXJ2YWwsIGNhbWUgdGhlIGNoaWxkcmVuIG9mIHRoZSBraW5nLCBsZWQgYWxvbmcgYXMgc2xhdmVzLCBhbmQgd2l0aCB0aGVtIGEgdGhyb25nIG9mIGZvc3Rlci1wYXJlbnRzLCB0ZWFjaGVycywgYW5kIHR1dG9ycywgYWxsIGluIHRlYXJzLCBzdHJldGNoaW5nIG91dCB0aGVpciBvd24gaGFuZHMgdG8gdGhlIHNwZWN0YXRvcnMgYW5kIHRlYWNoaW5nIHRoZSBjaGlsZHJlbiB0byBiZWcgYW5kIHN1cHBsaWNhdGUuIAoJCQkJPG1pbGVzdG9uZSBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgdHdvIGJveXMsIGFuZCBvbmUgZ2lybCwgYW5kIHRoZXkgd2VyZSBub3QgdmVyeSBjb25zY2lvdXMgb2YgdGhlIG1hZ25pdHVkZSBvZiB0aGVpciBldmlscyBiZWNhdXNlIG9mIHRoZWlyIHRlbmRlciBhZ2U7IHdoZXJlZm9yZSB0aGV5IGV2b2tlZCBldmVuIG1vcmUgcGl0eSBpbiB2aWV3IG9mIHRoZSB0aW1lIHdoZW4gdGhlaXIgdW5jb25zY2lvdXNuZXNzIHdvdWxkIGNlYXNlLCBzbyB0aGF0IFBlcnNldXMgd2Fsa2VkIGFsb25nIGFsbW9zdCB1bmhlZWRlZCwgd2hpbGUgdGhlIFJvbWFucywgbW92ZWQgYnkgY29tcGFzc2lvbiwga2VwdCB0aGVpciBleWVzIHVwb24gdGhlIGNoaWxkcmVuLCBhbmQgbWFueSBvZiB0aGVtIHNoZWQgdGVhcnMsIGFuZCBmb3IgYWxsIG9mIHRoZW0gdGhlIHBsZWFzdXJlIG9mIHRoZSBzcGVjdGFjbGUgd2FzIG1pbmdsZWQgd2l0aCBwYWluLCB1bnRpbCB0aGUgY2hpbGRyZW4gaGFkIHBhc3NlZCBieS4KCQkJPC9wPgogICAgICAgICA8L3RyYW5zbGF0aW9uPg=="
translation['33.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzMyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+T24gdGhlIHRoaXJkIGRheSwgYXMgc29vbiBhcyBpdCB3YXMgbW9ybmluZywgdHJ1bXBldGVycyBsZWQgdGhlIHdheSwgc291bmRpbmcgb3V0IG5vIG1hcmNoaW5nIG9yIHByb2Nlc3Npb25hbCBzdHJhaW4sIGJ1dCBzdWNoIGEgb25lIGFzIHRoZSBSb21hbnMgdXNlIHRvIHJvdXNlIHRoZW1zZWx2ZXMgdG8gYmF0dGxlLiBBZnRlciB0aGVzZSB0aGVyZSB3ZXJlIGxlZCBhbG9uZyBhIGh1bmRyZWQgYW5kIHR3ZW50eSBzdGFsbC1mZWQgb3hlbiB3aXRoIGdpbGRlZCBob3JucywgYmVkZWNrZWQgd2l0aCBmaWxsZXRzIGFuZCBnYXJsYW5kcy4gVGhvc2Ugd2hvIGxlZCB0aGVzZSB2aWN0aW1zIHRvIHRoZSBzYWNyaWZpY2Ugd2VyZSB5b3VuZyBtZW4gd2VhcmluZyBhcHJvbnMgd2l0aCBoYW5kc29tZSBib3JkZXJzLCBhbmQgYm95cyBhdHRlbmRlZCB0aGVtIGNhcnJ5aW5nIGdvbGQgYW5kIHNpbHZlciB2ZXNzZWxzIG9mIGxpYmF0aW9uLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk5leHQsIGFmdGVyIHRoZXNlLCBjYW1lIHRoZSBjYXJyaWVycyBvZiB0aGUgY29pbmVkIGdvbGQsIHdoaWNoLCBsaWtlIHRoZSBzaWx2ZXIsIHdhcyBwb3J0aW9uZWQgb3V0IGludG8gdmVzc2VscyBjb250YWluaW5nIHRocmVlIHRhbGVudHM7IGFuZCB0aGUgbnVtYmVyIG9mIHRoZXNlIHZlc3NlbHMgd2FzIGVpZ2h0eSBsYWNraW5nIHRocmVlLiBBZnRlciB0aGVzZSBmb2xsb3dlZCB0aGUgYmVhcmVycyBvZiB0aGUgY29uc2VjcmF0ZWQgYm93bCwgd2hpY2ggQWVtaWxpdXMgaGFkIGNhdXNlZCB0byBiZSBtYWRlIG9mIHRlbiB0YWxlbnRzIG9mIGdvbGQgYW5kIGFkb3JuZWQgd2l0aCBwcmVjaW91cyBzdG9uZXMsIGFuZCB0aGVuIHRob3NlIHdobyBkaXNwbGF5ZWQgdGhlIGJvd2xzIGtub3duIGFzIEFudGlnb25pZHMgYW5kIFNlbGV1Y2lkcyBhbmQgVGhlcmFjbGVpYW4sCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZXNlIGxhc3Qgd2VyZSBuYW1lZCBmcm9tIGEgZmFtb3VzIENvcmludGhpYW4gYXJ0aXN0Ljwvbm90ZT4gdG9nZXRoZXIgd2l0aCBhbGwgdGhlIGdvbGQgcGxhdGUgb2YgUGVyc2V1cydzIHRhYmxlLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['33.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlRoZXNlIHdlcmUgZm9sbG93ZWQgYnkgdGhlIGNoYXJpb3Qgb2YgUGVyc2V1cywgd2hpY2ggYm9yZSBoaXMgYXJtcywgYW5kIGhpcyBkaWFkZW0gbHlpbmcgdXBvbiBoaXMgYXJtcy4gVGhlbiwgYXQgYSBsaXR0bGUgaW50ZXJ2YWwsIGNhbWUgdGhlIGNoaWxkcmVuIG9mIHRoZSBraW5nLCBsZWQgYWxvbmcgYXMgc2xhdmVzLCBhbmQgd2l0aCB0aGVtIGEgdGhyb25nIG9mIGZvc3Rlci1wYXJlbnRzLCB0ZWFjaGVycywgYW5kIHR1dG9ycywgYWxsIGluIHRlYXJzLCBzdHJldGNoaW5nIG91dCB0aGVpciBvd24gaGFuZHMgdG8gdGhlIHNwZWN0YXRvcnMgYW5kIHRlYWNoaW5nIHRoZSBjaGlsZHJlbiB0byBiZWcgYW5kIHN1cHBsaWNhdGUuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['33.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZXJlIHdlcmUgdHdvIGJveXMsIGFuZCBvbmUgZ2lybCwgYW5kIHRoZXkgd2VyZSBub3QgdmVyeSBjb25zY2lvdXMgb2YgdGhlIG1hZ25pdHVkZSBvZiB0aGVpciBldmlscyBiZWNhdXNlIG9mIHRoZWlyIHRlbmRlciBhZ2U7IHdoZXJlZm9yZSB0aGV5IGV2b2tlZCBldmVuIG1vcmUgcGl0eSBpbiB2aWV3IG9mIHRoZSB0aW1lIHdoZW4gdGhlaXIgdW5jb25zY2lvdXNuZXNzIHdvdWxkIGNlYXNlLCBzbyB0aGF0IFBlcnNldXMgd2Fsa2VkIGFsb25nIGFsbW9zdCB1bmhlZWRlZCwgd2hpbGUgdGhlIFJvbWFucywgbW92ZWQgYnkgY29tcGFzc2lvbiwga2VwdCB0aGVpciBleWVzIHVwb24gdGhlIGNoaWxkcmVuLCBhbmQgbWFueSBvZiB0aGVtIHNoZWQgdGVhcnMsIGFuZCBmb3IgYWxsIG9mIHRoZW0gdGhlIHBsZWFzdXJlIG9mIHRoZSBzcGVjdGFjbGUgd2FzIG1pbmdsZWQgd2l0aCBwYWluLCB1bnRpbCB0aGUgY2hpbGRyZW4gaGFkIHBhc3NlZCBieS4KCQkJPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM0IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVoaW5kIHRoZSBjaGlsZHJlbiBhbmQgdGhlaXIgdHJhaW4gb2YgYXR0ZW5kYW50cyB3YWxrZWQgUGVyc2V1cyBoaW1zZWxmLCBjbGFkIGluIGEgZGFyayByb2JlIGFuZCB3ZWFyaW5nIHRoZSBoaWdoIGJvb3RzIG9mIGhpcyBjb3VudHJ5LCBidXQgdGhlIG1hZ25pdHVkZSBvZiBoaXMgZXZpbHMgbWFkZSBoaW0gcmVzZW1ibGUgb25lIHdobyBpcyB1dHRlcmx5IGR1bWJmb3VuZGVkIGFuZCBiZXdpbGRlcmVkLiBIZSwgdG9vLCB3YXMgZm9sbG93ZWQgYnkgYSBjb21wYW55IG9mIGZyaWVuZHMgYW5kIGludGltYXRlcywgd2hvc2UgZmFjZXMgd2VyZSBoZWF2eSB3aXRoIGdyaWVmLCBhbmQgd2hvc2UgdGVhcmZ1bCBnYXplIGNvbnRpbnVhbGx5IGZpeGVkIHVwb24gUGVyc2V1cyBnYXZlIHRoZSBzcGVjdGF0b3JzIHRvIHVuZGVyc3RhbmQgdGhhdCBpdCB3YXMgaGlzIG1pc2ZvcnR1bmUgd2hpY2ggdGhleSBiZXdhaWxlZCwgYW5kIHRoYXQgdGhlaXIgb3duIGZhdGUgbGVhc3Qgb2YgYWxsIGNvbmNlcm5lZCB0aGVtLiBBbmQgeWV0IFBlcnNldXMgaGFkIHNlbnQgdG8gQWVtaWxpdXMgYmVnZ2luZyBub3QgdG8gYmUgbGVkIGluIHRoZSBwcm9jZXNzaW9uIGFuZCBhc2tpbmcgdG8gYmUgbGVmdCBvdXQgb2YgdGhlIHRyaXVtcGguIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZW1pbGl1cywgaW4gbW9ja2VyeSwgYXMgaXQgd291bGQgc2VlbSwgb2YgdGhlIGtpbmcncyBjb3dhcmRpY2UgYW5kIGxvdmUgb2YgbGlmZSwgaGFkIHNhaWQ6IAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+QnV0IHRoaXMgYXQgbGVhc3Qgd2FzIGluIGhpcyBwb3dlciBiZWZvcmUsIGFuZCBpcyBzbyBub3csIGlmIGhlIHNob3VsZCB3aXNoIGl0LDwvcT4gc2lnbmlmeWluZyBkZWF0aCBpbiBwcmVmZXJlbmNlIHRvIGRpc2dyYWNlOyBmb3IgdGhpcywgaG93ZXZlciwgdGhlIGNvd2FyZCBoYWQgbm90IHRoZSBoZWFydCwgYnV0IHdhcyBtYWRlIHdlYWsgYnkgbm8gb25lIGtub3dzIHdoYXQgaG9wZXMsIGFuZCBiZWNhbWUgYSBwYXJ0IG9mIGhpcyBvd24gc3BvaWxzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['34.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QmVoaW5kIHRoZSBjaGlsZHJlbiBhbmQgdGhlaXIgdHJhaW4gb2YgYXR0ZW5kYW50cyB3YWxrZWQgUGVyc2V1cyBoaW1zZWxmLCBjbGFkIGluIGEgZGFyayByb2JlIGFuZCB3ZWFyaW5nIHRoZSBoaWdoIGJvb3RzIG9mIGhpcyBjb3VudHJ5LCBidXQgdGhlIG1hZ25pdHVkZSBvZiBoaXMgZXZpbHMgbWFkZSBoaW0gcmVzZW1ibGUgb25lIHdobyBpcyB1dHRlcmx5IGR1bWJmb3VuZGVkIGFuZCBiZXdpbGRlcmVkLiBIZSwgdG9vLCB3YXMgZm9sbG93ZWQgYnkgYSBjb21wYW55IG9mIGZyaWVuZHMgYW5kIGludGltYXRlcywgd2hvc2UgZmFjZXMgd2VyZSBoZWF2eSB3aXRoIGdyaWVmLCBhbmQgd2hvc2UgdGVhcmZ1bCBnYXplIGNvbnRpbnVhbGx5IGZpeGVkIHVwb24gUGVyc2V1cyBnYXZlIHRoZSBzcGVjdGF0b3JzIHRvIHVuZGVyc3RhbmQgdGhhdCBpdCB3YXMgaGlzIG1pc2ZvcnR1bmUgd2hpY2ggdGhleSBiZXdhaWxlZCwgYW5kIHRoYXQgdGhlaXIgb3duIGZhdGUgbGVhc3Qgb2YgYWxsIGNvbmNlcm5lZCB0aGVtLiBBbmQgeWV0IFBlcnNldXMgaGFkIHNlbnQgdG8gQWVtaWxpdXMgYmVnZ2luZyBub3QgdG8gYmUgbGVkIGluIHRoZSBwcm9jZXNzaW9uIGFuZCBhc2tpbmcgdG8gYmUgbGVmdCBvdXQgb2YgdGhlIHRyaXVtcGguIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['34.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBBZW1pbGl1cywgaW4gbW9ja2VyeSwgYXMgaXQgd291bGQgc2VlbSwgb2YgdGhlIGtpbmcncyBjb3dhcmRpY2UgYW5kIGxvdmUgb2YgbGlmZSwgaGFkIHNhaWQ6IAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5CdXQgdGhpcyBhdCBsZWFzdCB3YXMgaW4gaGlzIHBvd2VyIGJlZm9yZSwgYW5kIGlzIHNvIG5vdywgaWYgaGUgc2hvdWxkIHdpc2ggaXQsPC9xPiBzaWduaWZ5aW5nIGRlYXRoIGluIHByZWZlcmVuY2UgdG8gZGlzZ3JhY2U7IGZvciB0aGlzLCBob3dldmVyLCB0aGUgY293YXJkIGhhZCBub3QgdGhlIGhlYXJ0LCBidXQgd2FzIG1hZGUgd2VhayBieSBubyBvbmUga25vd3Mgd2hhdCBob3BlcywgYW5kIGJlY2FtZSBhIHBhcnQgb2YgaGlzIG93biBzcG9pbHMuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQgaW4gb3JkZXIgdG8gdGhlc2Ugd2VyZSBjYXJyaWVkIHdyZWF0aHMgb2YgZ29sZCwgZm91ciBodW5kcmVkIGluIG51bWJlciwgd2hpY2ggdGhlIGNpdGllcyBoYWQgc2VudCB3aXRoIHRoZWlyIGVtYmFzc2llcyB0byBBZW1pbGl1cyBhcyBwcml6ZXMgZm9yIGhpcyB2aWN0b3J5LiBOZXh0LCBtb3VudGVkIG9uIGEgY2hhcmlvdCBvZiBtYWduaWZpY2VudCBhZG9ybm1lbnQsIGNhbWUgQWVtaWxpdXMgaGltc2VsZiwgYSBtYW4gd29ydGh5IHRvIGJlIGxvb2tlZCB1cG9uIGV2ZW4gd2l0aG91dCBzdWNoIG1hcmtzIG9mIHBvd2VyLCB3ZWFyaW5nIGEgcHVycGxlIHJvYmUgaW50ZXJ3b3ZlbiB3aXRoIGdvbGQsIGFuZCBob2xkaW5nIGZvcnRoIGluIGhpcyByaWdodCBoYW5kIGEgc3ByYXkgb2YgbGF1cmVsLiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz5UaGUgd2hvbGUgYXJteSBhbHNvIGNhcnJpZWQgc3ByYXlzIG9mIGxhdXJlbCwgZm9sbG93aW5nIHRoZSBjaGFyaW90IG9mIHRoZWlyIGdlbmVyYWwgYnkgY29tcGFuaWVzIGFuZCBkaXZpc2lvbnMsIGFuZCBzaW5naW5nLCBzb21lIG9mIHRoZW0gZGl2ZXJzIHNvbmdzIGludGVybWluZ2xlZCB3aXRoIGplc3RpbmcsIGFzIHRoZSBhbmNpZW50IGN1c3RvbSB3YXMsIGFuZCBvdGhlcnMgcGFlYW5zIG9mIHZpY3RvcnkgYW5kIGh5bW5zIGluIHByYWlzZSBvZiB0aGUgYWNoaWV2ZW1lbnRzIG9mIEFlbWlsaXVzLCB3aG8gd2FzIGdhemVkIHVwb24gYW5kIGFkbWlyZWQgYnkgYWxsLCBhbmQgZW52aWVkIGJ5IG5vIG9uZSB0aGF0IHdhcyBnb29kLiBCdXQgYWZ0ZXIgYWxsIHRoZXJlIGlzLCBhcyBpdCBzZWVtcywgYSBkaXZpbml0eSB3aG9zZSBwcm92aW5jZSBpdCBpcyB0byBkaW1pbmlzaCB3aGF0ZXZlciBwcm9zcGVyaXR5IGlzIGlub3JkaW5hdGVseSBncmVhdCwgYW5kIHRvIG1pbmdsZSB0aGUgYWZmYWlycyBvZiBodW1hbiBsaWZlLCB0aGF0IG5vIG9uZSBtYXkgYmUgd2l0aG91dCBhIHRhc3RlIG9mIGV2aWwgYW5kIHdob2xseSBmcmVlIGZyb20gaXQsIGJ1dCB0aGF0LCBhcyBIb21lciBzYXlzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+CiAgICAgICAgICAgICAgIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAyNC41MjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGU+SWxpYWQ8L3RpdGxlPiwgeHhpdi4gNTI1IGZmLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB0aG9zZSBtYXkgYmUgdGhvdWdodCB0byBmYXJlIGJlc3Qgd2hvc2UgZm9ydHVuZXMgaW5jbGluZSBub3cgb25lIHdheSBhbmQgbm93IGFub3RoZXIuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['34.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPk5leHQgaW4gb3JkZXIgdG8gdGhlc2Ugd2VyZSBjYXJyaWVkIHdyZWF0aHMgb2YgZ29sZCwgZm91ciBodW5kcmVkIGluIG51bWJlciwgd2hpY2ggdGhlIGNpdGllcyBoYWQgc2VudCB3aXRoIHRoZWlyIGVtYmFzc2llcyB0byBBZW1pbGl1cyBhcyBwcml6ZXMgZm9yIGhpcyB2aWN0b3J5LiBOZXh0LCBtb3VudGVkIG9uIGEgY2hhcmlvdCBvZiBtYWduaWZpY2VudCBhZG9ybm1lbnQsIGNhbWUgQWVtaWxpdXMgaGltc2VsZiwgYSBtYW4gd29ydGh5IHRvIGJlIGxvb2tlZCB1cG9uIGV2ZW4gd2l0aG91dCBzdWNoIG1hcmtzIG9mIHBvd2VyLCB3ZWFyaW5nIGEgcHVycGxlIHJvYmUgaW50ZXJ3b3ZlbiB3aXRoIGdvbGQsIGFuZCBob2xkaW5nIGZvcnRoIGluIGhpcyByaWdodCBoYW5kIGEgc3ByYXkgb2YgbGF1cmVsLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['34.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoZSB3aG9sZSBhcm15IGFsc28gY2FycmllZCBzcHJheXMgb2YgbGF1cmVsLCBmb2xsb3dpbmcgdGhlIGNoYXJpb3Qgb2YgdGhlaXIgZ2VuZXJhbCBieSBjb21wYW5pZXMgYW5kIGRpdmlzaW9ucywgYW5kIHNpbmdpbmcsIHNvbWUgb2YgdGhlbSBkaXZlcnMgc29uZ3MgaW50ZXJtaW5nbGVkIHdpdGggamVzdGluZywgYXMgdGhlIGFuY2llbnQgY3VzdG9tIHdhcywgYW5kIG90aGVycyBwYWVhbnMgb2YgdmljdG9yeSBhbmQgaHltbnMgaW4gcHJhaXNlIG9mIHRoZSBhY2hpZXZlbWVudHMgb2YgQWVtaWxpdXMsIHdobyB3YXMgZ2F6ZWQgdXBvbiBhbmQgYWRtaXJlZCBieSBhbGwsIGFuZCBlbnZpZWQgYnkgbm8gb25lIHRoYXQgd2FzIGdvb2QuIEJ1dCBhZnRlciBhbGwgdGhlcmUgaXMsIGFzIGl0IHNlZW1zLCBhIGRpdmluaXR5IHdob3NlIHByb3ZpbmNlIGl0IGlzIHRvIGRpbWluaXNoIHdoYXRldmVyIHByb3NwZXJpdHkgaXMgaW5vcmRpbmF0ZWx5IGdyZWF0LCBhbmQgdG8gbWluZ2xlIHRoZSBhZmZhaXJzIG9mIGh1bWFuIGxpZmUsIHRoYXQgbm8gb25lIG1heSBiZSB3aXRob3V0IGEgdGFzdGUgb2YgZXZpbCBhbmQgd2hvbGx5IGZyZWUgZnJvbSBpdCwgYnV0IHRoYXQsIGFzIEhvbWVyIHNheXMsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPgogICAgICAgICAgICAgICA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJIb20uIElsLiAyNC41MjUiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5JbGlhZDwvdGl0bGU+LCB4eGl2LiA1MjUgZmYuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IHRob3NlIG1heSBiZSB0aG91Z2h0IHRvIGZhcmUgYmVzdCB3aG9zZSBmb3J0dW5lcyBpbmNsaW5lIG5vdyBvbmUgd2F5IGFuZCBub3cgYW5vdGhlci4KCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iSG9tLiBJbC4gMjQuNTI1IiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHhpdi4gNTI1IGZmLjwvYmlibD4KICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+SWxpYWQ8L3RpdGxlPiwgeHhpdi4gNTI1IGZmLjxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPkZvciBBZW1pbGl1cyBoYWQgZm91ciBzb25zLCBvZiB3aG9tIHR3bywgYXMgSSBoYXZlIGFscmVhZHkgc2FpZCwKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkNmLiA8YmlibCBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWVtLiA1LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdi4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGFkIGJlZW4gYWRvcHRlZCBpbnRvIG90aGVyIGZhbWlsaWVzLCBuYW1lbHksIFNjaXBpbyBhbmQgRmFiaXVzOyBhbmQgdHdvIHNvbnMgc3RpbGwgYm95cywgdGhlIGNoaWxkcmVuIG9mIGEgc2Vjb25kIHdpZmUsIHdob20gaGUgaGFkIGluIGhpcyBvd24gaG91c2UuIAoJCQkJPG1pbGVzdG9uZSBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiB0aGVzZSwgZm91cnRlZW4geWVhcnMgb2YgYWdlLCBkaWVkIGZpdmUgZGF5cyBiZWZvcmUgQWVtaWxpdXMgY2VsZWJyYXRlZCBoaXMgdHJpdW1waCwgYW5kIHRoZSBkZWF0aCBvZiB0aGUgb3RoZXIsIHdobyB3YXMgdHdlbHZlIHllYXJzIG9mIGFnZSwgZm9sbG93ZWQgdGhyZWUgZGF5cyBhZnRlciB0aGUgdHJpdW1waCwgc28gdGhhdCB0aGVyZSB3YXMgbm8gUm9tYW4gd2hvIGRpZCBub3Qgc2hhcmUgdGhlIGZhdGhlcidzIGdyaWVmOyBuYXksIHRoZXkgYWxsIHNodWRkZXJlZCBhdCB0aGUgY3J1ZWx0eSBvZiBGb3J0dW5lLCBzZWVpbmcgdGhhdCBzaGUgaGFkIG5vdCBzY3J1cGxlZCB0byBicmluZyBzdWNoIGdyZWF0IHNvcnJvdyBpbnRvIGEgaG91c2UgdGhhdCB3YXMgZnVsbCBvZiBncmF0dWxhdGlvbnMsIGpveSwgYW5kIHNhY3JpZmljZXMsIG9yIHRvIG1pbmdsZSBsYW1lbnRhdGlvbnMgYW5kIHRlYXJzIHdpdGggcGFlYW5zIG9mIHZpY3RvcnkgYW5kIHRyaXVtcGhzLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+Rm9yIEFlbWlsaXVzIGhhZCBmb3VyIHNvbnMsIG9mIHdob20gdHdvLCBhcyBJIGhhdmUgYWxyZWFkeSBzYWlkLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5DZi4gPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWVtLiA1LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdi4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gaGFkIGJlZW4gYWRvcHRlZCBpbnRvIG90aGVyIGZhbWlsaWVzLCBuYW1lbHksIFNjaXBpbyBhbmQgRmFiaXVzOyBhbmQgdHdvIHNvbnMgc3RpbGwgYm95cywgdGhlIGNoaWxkcmVuIG9mIGEgc2Vjb25kIHdpZmUsIHdob20gaGUgaGFkIGluIGhpcyBvd24gaG91c2UuIAoJCQkJPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQWVtLiA1LjMiIHZhbGlkPSJ5ZXMiPmNoYXB0ZXIgdi4gMy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['35.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPk9uZSBvZiB0aGVzZSwgZm91cnRlZW4geWVhcnMgb2YgYWdlLCBkaWVkIGZpdmUgZGF5cyBiZWZvcmUgQWVtaWxpdXMgY2VsZWJyYXRlZCBoaXMgdHJpdW1waCwgYW5kIHRoZSBkZWF0aCBvZiB0aGUgb3RoZXIsIHdobyB3YXMgdHdlbHZlIHllYXJzIG9mIGFnZSwgZm9sbG93ZWQgdGhyZWUgZGF5cyBhZnRlciB0aGUgdHJpdW1waCwgc28gdGhhdCB0aGVyZSB3YXMgbm8gUm9tYW4gd2hvIGRpZCBub3Qgc2hhcmUgdGhlIGZhdGhlcidzIGdyaWVmOyBuYXksIHRoZXkgYWxsIHNodWRkZXJlZCBhdCB0aGUgY3J1ZWx0eSBvZiBGb3J0dW5lLCBzZWVpbmcgdGhhdCBzaGUgaGFkIG5vdCBzY3J1cGxlZCB0byBicmluZyBzdWNoIGdyZWF0IHNvcnJvdyBpbnRvIGEgaG91c2UgdGhhdCB3YXMgZnVsbCBvZiBncmF0dWxhdGlvbnMsIGpveSwgYW5kIHNhY3JpZmljZXMsIG9yIHRvIG1pbmdsZSBsYW1lbnRhdGlvbnMgYW5kIHRlYXJzIHdpdGggcGFlYW5zIG9mIHZpY3RvcnkgYW5kIHRyaXVtcGhzLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzYiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz5BZW1pbGl1cywgbm90d2l0aHN0YW5kaW5nLCByaWdodGx5IGNvbnNpZGVyaW5nIHRoYXQgbWVuIGhhdmUgbmVlZCBvZiBicmF2ZXJ5IGFuZCBjb3VyYWdlLCBub3Qgb25seSBhZ2FpbnN0IGFybXMgYW5kIGxvbmcgc3BlYXJzLCBidXQgYWdhaW5zdCBldmVyeSBvbnNldCBvZiBGb3J0dW5lIGFzIHdlbGwsIHNvIGFkYXB0ZWQgYW5kIGFkanVzdGVkIHRoZSBtaW5nbGVkIGNpcmN1bXN0YW5jZXMgb2YgaGlzIGxvdCB0aGF0IHRoZSBiYWQgd2FzIGxvc3Qgc2lnaHQgb2YgaW4gdGhlIGdvb2QsIGFuZCBoaXMgcHJpdmF0ZSBzb3Jyb3cgaW4gdGhlIHB1YmxpYyB3ZWxmYXJlLCB0aHVzIG5laXRoZXIgbG93ZXJpbmcgdGhlIGdyYW5kZXVyIG5vciBzdWxseWluZyB0aGUgZGlnbml0eSBvZiBoaXMgdmljdG9yeS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+VGhlIGZpcnN0IG9mIGhpcyBzb25zIHdobyBkaWVkIGhlIGJ1cmllZCwgYW5kIGltbWVkaWF0ZWx5IGFmdGVyd2FyZHMgY2VsZWJyYXRlZCB0aGUgdHJpdW1waCwgYXMgSSBoYXZlIHNhaWQ7IGFuZCB3aGVuIHRoZSBzZWNvbmQgZGllZCwgYWZ0ZXIgdGhlIHRyaXVtcGgsIGhlIGdhdGhlcmVkIHRoZSBSb21hbiBwZW9wbGUgaW50byBhbiBhc3NlbWJseSBhbmQgc3Bva2UgdG8gdGhlbSBhcyBhIG1hbiB3aG8gZGlkIG5vdCBhc2sgZm9yIGNvbWZvcnQsIGJ1dCByYXRoZXIgc291Z2h0IHRvIGNvbWZvcnQgaGlzIGZlbGxvdy1jaXRpemVucyBpbiB0aGVpciBkaXN0cmVzcyBvdmVyIGhpcyBvd24gbWlzZm9ydHVuZXMuIEhlIHNhaWQsIG5hbWVseSwgdGhhdCBoZSBoYWQgbmV2ZXIgZHJlYWRlZCBhbnkgaHVtYW4gYWdlbmN5LCBidXQgYW1vbmcgYWdlbmNpZXMgdGhhdCB3ZXJlIGRpdmluZSBoZSBoYWQgZXZlciBmZWFyZWQgRm9ydHVuZSwgYmVsaWV2aW5nIGhlciB0byBiZSBhIG1vc3QgdW50cnVzdHdvcnRoeSBhbmQgdmFyaWFibGUgdGhpbmc7IAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBzaW5jZSBpbiB0aGlzIHdhciBwYXJ0aWN1bGFybHkgc2hlIGhhZCBhdHRlbmRlZCBoaXMgdW5kZXJ0YWtpbmdzIGxpa2UgYSBwcm9zcGVyb3VzIGdhbGUsIGFzIGl0IHdlcmUsIGhlIGhhZCBuZXZlciBjZWFzZWQgdG8gZXhwZWN0IHNvbWUgY2hhbmdlIGFuZCBzb21lIHJldmVyc2FsIG9mIHRoZSBjdXJyZW50IG9mIGFmZmFpcnMuIAoJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+Rm9yIGluIG9uZSBkYXksPC9xPiBzYWlkIGhlLCAKCQkJCTxxIGRpcmVjdD0idW5zcGVjaWZpZWQiPkkgY3Jvc3NlZCB0aGUgSW9uaWFuIFNlYSBmcm9tIEJydW5kaXNpdW0gYW5kIHB1dCBpbiBhdCBDb3JjeXJhOyB0aGVuY2UsIGluIGZpdmUgZGF5cywgSSBjYW1lIHRvIERlbHBoaSBhbmQgc2FjcmlmaWNlZCB0byB0aGUgZ29kOyBhbmQgYWdhaW4sIGluIG90aGVyIGZpdmUgZGF5cywgSSB0b29rIGNvbW1hbmQgb2YgdGhlIGZvcmNlcyBpbiBNYWNlZG9uaWEsIGFuZCBhZnRlciB0aGUgdXN1YWwgbHVzdHJhdGlvbiBhbmQgcmV2aWV3IG9mIHRoZW0gSSBwcm9jZWVkZWQgYXQgb25jZSB0byBhY3Rpb24sIGFuZCBpbiBvdGhlciBmaWZ0ZWVuIGRheXMgYnJvdWdodCB0aGUgd2FyIHRvIHRoZSBtb3N0IGdsb3Jpb3VzIGlzc3VlLiAKCQkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEkgZGlzdHJ1c3RlZCBGb3J0dW5lIGJlY2F1c2UgdGhlIGN1cnJlbnQgb2YgbXkgYWZmYWlycyByYW4gc28gc21vb3RobHksIGFuZCBub3cgdGhhdCB0aGVyZSB3YXMgY29tcGxldGUgaW1tdW5pdHkgYW5kIG5vdGhpbmcgdG8gZmVhciBmcm9tIGhvc3RpbGUgYXR0YWNrcywgaXQgd2FzIHBhcnRpY3VsYXJseSBkdXJpbmcgbXkgdm95YWdlIGhvbWUgdGhhdCBJIGZlYXJlZCB0aGUgcmV2ZXJzYWwgb2YgdGhlIERlaXR5J3MgZmF2b3VyIGFmdGVyIGFsbCBteSBnb29kIGZvcnR1bmUsIHNpbmNlIEkgd2FzIGJyaW5naW5nIGhvbWUgc28gbGFyZ2UgYSB2aWN0b3Jpb3VzIGFybXksIHN1Y2ggc3BvaWxzLCBhbmQgY2FwdHVyZWQga2luZ3MuIE5heSBtb3JlLCBldmVuIHdoZW4gSSBoYWQgcmVhY2hlZCB5b3Ugc2FmZWx5IGFuZCBiZWhlbGQgdGhlIGNpdHkgZnVsbCBvZiBkZWxpZ2h0IGFuZCBncmF0dWxhdGlvbiBhbmQgc2FjcmlmaWNlcywgSSB3YXMgc3RpbGwgc3VzcGljaW91cyBvZiBGb3J0dW5lLCBrbm93aW5nIHRoYXQgc2hlIGJlc3Rvd3MgdXBvbiBtZW4gbm8gZ3JlYXQgYm9vbiB0aGF0IGlzIHdpdGhvdXQgYWxsb3kgb3IgZnJlZSBmcm9tIGRpdmluZSBkaXNwbGVhc3VyZS4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgbXkgc291bCB3YXMgaW4gdHJhdmFpbCB3aXRoIHRoaXMgZmVhciBhbmQgY291bGQgbm90IGRpc21pc3MgaXQgYW5kIGNlYXNlIGFueGlvdXNseSBmb3JlY2FzdGluZyB0aGUgY2l0eSdzIGZ1dHVyZSwgdW50aWwgSSB3YXMgc21pdHRlbiB3aXRoIHRoaXMgZ3JlYXQgbWlzZm9ydHVuZSBpbiBteSBvd24gaG91c2UsIGFuZCBpbiBkYXlzIGNvbnNlY3JhdGVkIHRvIHJlam9pY2luZyBoYWQgY2FycmllZCB0d28gbW9zdCBub2JsZSBzb25zLCB3aG8gYWxvbmUgcmVtYWluZWQgdG8gYmUgbXkgaGVpcnMsIG9uZSBhZnRlciB0aGUgb3RoZXIgdG8gdGhlaXIgZ3JhdmVzLiAKCQkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZWZvcmUsIEkgYW0gaW4gbm8gcGVyaWwgb2Ygd2hhdCBtb3N0IGNvbmNlcm5lZCBtZSwgYW5kIGFtIGNvbmZpZGVudCwgYW5kIEkgdGhpbmsgdGhhdCBGb3J0dW5lIHdpbGwgcmVtYWluIGNvbnN0YW50IHRvIG91ciBjaXR5IGFuZCBkbyBoZXIgbm8gaGFybS4gRm9yIHRoYXQgZGVpdHkgaGFzIHN1ZmZpY2llbnRseSB1c2VkIG1lIGFuZCBteSBhZmZsaWN0aW9ucyB0byBzYXRpc2Z5IHRoZSBkaXZpbmUgZGlzcGxlYXN1cmUgYXQgb3VyIHN1Y2Nlc3NlcywgYW5kIHNoZSBtYWtlcyB0aGUgaGVybyBvZiB0aGUgdHJpdW1waCBhcyBjbGVhciBhbiBleGFtcGxlIG9mIGh1bWFuIHdlYWtuZXNzIGFzIHRoZSB2aWN0aW0gb2YgdGhlIHRyaXVtcGg7IGV4Y2VwdCB0aGF0IFBlcnNldXMsIGV2ZW4gdGhvdWdoIGNvbnF1ZXJlZCwgaGFzIGhpcyBjaGlsZHJlbiwgd2hpbGUgQWVtaWxpdXMsIHRob3VnaCBjb25xdWVyb3IsIGhhcyBsb3N0IGhpcy48L3E+CgkJCSAgICAgIDwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['36.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNiIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+QWVtaWxpdXMsIG5vdHdpdGhzdGFuZGluZywgcmlnaHRseSBjb25zaWRlcmluZyB0aGF0IG1lbiBoYXZlIG5lZWQgb2YgYnJhdmVyeSBhbmQgY291cmFnZSwgbm90IG9ubHkgYWdhaW5zdCBhcm1zIGFuZCBsb25nIHNwZWFycywgYnV0IGFnYWluc3QgZXZlcnkgb25zZXQgb2YgRm9ydHVuZSBhcyB3ZWxsLCBzbyBhZGFwdGVkIGFuZCBhZGp1c3RlZCB0aGUgbWluZ2xlZCBjaXJjdW1zdGFuY2VzIG9mIGhpcyBsb3QgdGhhdCB0aGUgYmFkIHdhcyBsb3N0IHNpZ2h0IG9mIGluIHRoZSBnb29kLCBhbmQgaGlzIHByaXZhdGUgc29ycm93IGluIHRoZSBwdWJsaWMgd2VsZmFyZSwgdGh1cyBuZWl0aGVyIGxvd2VyaW5nIHRoZSBncmFuZGV1ciBub3Igc3VsbHlpbmcgdGhlIGRpZ25pdHkgb2YgaGlzIHZpY3RvcnkuIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['36.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPlRoZSBmaXJzdCBvZiBoaXMgc29ucyB3aG8gZGllZCBoZSBidXJpZWQsIGFuZCBpbW1lZGlhdGVseSBhZnRlcndhcmRzIGNlbGVicmF0ZWQgdGhlIHRyaXVtcGgsIGFzIEkgaGF2ZSBzYWlkOyBhbmQgd2hlbiB0aGUgc2Vjb25kIGRpZWQsIGFmdGVyIHRoZSB0cml1bXBoLCBoZSBnYXRoZXJlZCB0aGUgUm9tYW4gcGVvcGxlIGludG8gYW4gYXNzZW1ibHkgYW5kIHNwb2tlIHRvIHRoZW0gYXMgYSBtYW4gd2hvIGRpZCBub3QgYXNrIGZvciBjb21mb3J0LCBidXQgcmF0aGVyIHNvdWdodCB0byBjb21mb3J0IGhpcyBmZWxsb3ctY2l0aXplbnMgaW4gdGhlaXIgZGlzdHJlc3Mgb3ZlciBoaXMgb3duIG1pc2ZvcnR1bmVzLiBIZSBzYWlkLCBuYW1lbHksIHRoYXQgaGUgaGFkIG5ldmVyIGRyZWFkZWQgYW55IGh1bWFuIGFnZW5jeSwgYnV0IGFtb25nIGFnZW5jaWVzIHRoYXQgd2VyZSBkaXZpbmUgaGUgaGFkIGV2ZXIgZmVhcmVkIEZvcnR1bmUsIGJlbGlldmluZyBoZXIgdG8gYmUgYSBtb3N0IHVudHJ1c3R3b3J0aHkgYW5kIHZhcmlhYmxlIHRoaW5nOyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPmFuZCBzaW5jZSBpbiB0aGlzIHdhciBwYXJ0aWN1bGFybHkgc2hlIGhhZCBhdHRlbmRlZCBoaXMgdW5kZXJ0YWtpbmdzIGxpa2UgYSBwcm9zcGVyb3VzIGdhbGUsIGFzIGl0IHdlcmUsIGhlIGhhZCBuZXZlciBjZWFzZWQgdG8gZXhwZWN0IHNvbWUgY2hhbmdlIGFuZCBzb21lIHJldmVyc2FsIG9mIHRoZSBjdXJyZW50IG9mIGFmZmFpcnMuIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5Gb3IgaW4gb25lIGRheSw8L3E+IHNhaWQgaGUsIAoJCQkJPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5JIGNyb3NzZWQgdGhlIElvbmlhbiBTZWEgZnJvbSBCcnVuZGlzaXVtIGFuZCBwdXQgaW4gYXQgQ29yY3lyYTsgdGhlbmNlLCBpbiBmaXZlIGRheXMsIEkgY2FtZSB0byBEZWxwaGkgYW5kIHNhY3JpZmljZWQgdG8gdGhlIGdvZDsgYW5kIGFnYWluLCBpbiBvdGhlciBmaXZlIGRheXMsIEkgdG9vayBjb21tYW5kIG9mIHRoZSBmb3JjZXMgaW4gTWFjZWRvbmlhLCBhbmQgYWZ0ZXIgdGhlIHVzdWFsIGx1c3RyYXRpb24gYW5kIHJldmlldyBvZiB0aGVtIEkgcHJvY2VlZGVkIGF0IG9uY2UgdG8gYWN0aW9uLCBhbmQgaW4gb3RoZXIgZmlmdGVlbiBkYXlzIGJyb3VnaHQgdGhlIHdhciB0byB0aGUgbW9zdCBnbG9yaW91cyBpc3N1ZS4gCgkJCQkJPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+QnV0IEkgZGlzdHJ1c3RlZCBGb3J0dW5lIGJlY2F1c2UgdGhlIGN1cnJlbnQgb2YgbXkgYWZmYWlycyByYW4gc28gc21vb3RobHksIGFuZCBub3cgdGhhdCB0aGVyZSB3YXMgY29tcGxldGUgaW1tdW5pdHkgYW5kIG5vdGhpbmcgdG8gZmVhciBmcm9tIGhvc3RpbGUgYXR0YWNrcywgaXQgd2FzIHBhcnRpY3VsYXJseSBkdXJpbmcgbXkgdm95YWdlIGhvbWUgdGhhdCBJIGZlYXJlZCB0aGUgcmV2ZXJzYWwgb2YgdGhlIERlaXR5J3MgZmF2b3VyIGFmdGVyIGFsbCBteSBnb29kIGZvcnR1bmUsIHNpbmNlIEkgd2FzIGJyaW5naW5nIGhvbWUgc28gbGFyZ2UgYSB2aWN0b3Jpb3VzIGFybXksIHN1Y2ggc3BvaWxzLCBhbmQgY2FwdHVyZWQga2luZ3MuIE5heSBtb3JlLCBldmVuIHdoZW4gSSBoYWQgcmVhY2hlZCB5b3Ugc2FmZWx5IGFuZCBiZWhlbGQgdGhlIGNpdHkgZnVsbCBvZiBkZWxpZ2h0IGFuZCBncmF0dWxhdGlvbiBhbmQgc2FjcmlmaWNlcywgSSB3YXMgc3RpbGwgc3VzcGljaW91cyBvZiBGb3J0dW5lLCBrbm93aW5nIHRoYXQgc2hlIGJlc3Rvd3MgdXBvbiBtZW4gbm8gZ3JlYXQgYm9vbiB0aGF0IGlzIHdpdGhvdXQgYWxsb3kgb3IgZnJlZSBmcm9tIGRpdmluZSBkaXNwbGVhc3VyZS4gCgkJCQkJPG1pbGVzdG9uZSBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgbXkgc291bCB3YXMgaW4gdHJhdmFpbCB3aXRoIHRoaXMgZmVhciBhbmQgY291bGQgbm90IGRpc21pc3MgaXQgYW5kIGNlYXNlIGFueGlvdXNseSBmb3JlY2FzdGluZyB0aGUgY2l0eSdzIGZ1dHVyZSwgdW50aWwgSSB3YXMgc21pdHRlbiB3aXRoIHRoaXMgZ3JlYXQgbWlzZm9ydHVuZSBpbiBteSBvd24gaG91c2UsIGFuZCBpbiBkYXlzIGNvbnNlY3JhdGVkIHRvIHJlam9pY2luZyBoYWQgY2FycmllZCB0d28gbW9zdCBub2JsZSBzb25zLCB3aG8gYWxvbmUgcmVtYWluZWQgdG8gYmUgbXkgaGVpcnMsIG9uZSBhZnRlciB0aGUgb3RoZXIgdG8gdGhlaXIgZ3JhdmVzLiAKCQkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+Tm93LCB0aGVyZWZvcmUsIEkgYW0gaW4gbm8gcGVyaWwgb2Ygd2hhdCBtb3N0IGNvbmNlcm5lZCBtZSwgYW5kIGFtIGNvbmZpZGVudCwgYW5kIEkgdGhpbmsgdGhhdCBGb3J0dW5lIHdpbGwgcmVtYWluIGNvbnN0YW50IHRvIG91ciBjaXR5IGFuZCBkbyBoZXIgbm8gaGFybS4gRm9yIHRoYXQgZGVpdHkgaGFzIHN1ZmZpY2llbnRseSB1c2VkIG1lIGFuZCBteSBhZmZsaWN0aW9ucyB0byBzYXRpc2Z5IHRoZSBkaXZpbmUgZGlzcGxlYXN1cmUgYXQgb3VyIHN1Y2Nlc3NlcywgYW5kIHNoZSBtYWtlcyB0aGUgaGVybyBvZiB0aGUgdHJpdW1waCBhcyBjbGVhciBhbiBleGFtcGxlIG9mIGh1bWFuIHdlYWtuZXNzIGFzIHRoZSB2aWN0aW0gb2YgdGhlIHRyaXVtcGg7IGV4Y2VwdCB0aGF0IFBlcnNldXMsIGV2ZW4gdGhvdWdoIGNvbnF1ZXJlZCwgaGFzIGhpcyBjaGlsZHJlbiwgd2hpbGUgQWVtaWxpdXMsIHRob3VnaCBjb25xdWVyb3IsIGhhcyBsb3N0IGhpcy48L3E+CgkJCSAgICAgIDwvdHJhbnNsYXRpb24+"
translation['36.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPkJ1dCBJIGRpc3RydXN0ZWQgRm9ydHVuZSBiZWNhdXNlIHRoZSBjdXJyZW50IG9mIG15IGFmZmFpcnMgcmFuIHNvIHNtb290aGx5LCBhbmQgbm93IHRoYXQgdGhlcmUgd2FzIGNvbXBsZXRlIGltbXVuaXR5IGFuZCBub3RoaW5nIHRvIGZlYXIgZnJvbSBob3N0aWxlIGF0dGFja3MsIGl0IHdhcyBwYXJ0aWN1bGFybHkgZHVyaW5nIG15IHZveWFnZSBob21lIHRoYXQgSSBmZWFyZWQgdGhlIHJldmVyc2FsIG9mIHRoZSBEZWl0eSdzIGZhdm91ciBhZnRlciBhbGwgbXkgZ29vZCBmb3J0dW5lLCBzaW5jZSBJIHdhcyBicmluZ2luZyBob21lIHNvIGxhcmdlIGEgdmljdG9yaW91cyBhcm15LCBzdWNoIHNwb2lscywgYW5kIGNhcHR1cmVkIGtpbmdzLiBOYXkgbW9yZSwgZXZlbiB3aGVuIEkgaGFkIHJlYWNoZWQgeW91IHNhZmVseSBhbmQgYmVoZWxkIHRoZSBjaXR5IGZ1bGwgb2YgZGVsaWdodCBhbmQgZ3JhdHVsYXRpb24gYW5kIHNhY3JpZmljZXMsIEkgd2FzIHN0aWxsIHN1c3BpY2lvdXMgb2YgRm9ydHVuZSwga25vd2luZyB0aGF0IHNoZSBiZXN0b3dzIHVwb24gbWVuIG5vIGdyZWF0IGJvb24gdGhhdCBpcyB3aXRob3V0IGFsbG95IG9yIGZyZWUgZnJvbSBkaXZpbmUgZGlzcGxlYXN1cmUuIAoJCQkJCTwvdHJhbnNsYXRpb24+"
translation['36.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkluZGVlZCwgbXkgc291bCB3YXMgaW4gdHJhdmFpbCB3aXRoIHRoaXMgZmVhciBhbmQgY291bGQgbm90IGRpc21pc3MgaXQgYW5kIGNlYXNlIGFueGlvdXNseSBmb3JlY2FzdGluZyB0aGUgY2l0eSdzIGZ1dHVyZSwgdW50aWwgSSB3YXMgc21pdHRlbiB3aXRoIHRoaXMgZ3JlYXQgbWlzZm9ydHVuZSBpbiBteSBvd24gaG91c2UsIGFuZCBpbiBkYXlzIGNvbnNlY3JhdGVkIHRvIHJlam9pY2luZyBoYWQgY2FycmllZCB0d28gbW9zdCBub2JsZSBzb25zLCB3aG8gYWxvbmUgcmVtYWluZWQgdG8gYmUgbXkgaGVpcnMsIG9uZSBhZnRlciB0aGUgb3RoZXIgdG8gdGhlaXIgZ3JhdmVzLiAKCQkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['36.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPk5vdywgdGhlcmVmb3JlLCBJIGFtIGluIG5vIHBlcmlsIG9mIHdoYXQgbW9zdCBjb25jZXJuZWQgbWUsIGFuZCBhbSBjb25maWRlbnQsIGFuZCBJIHRoaW5rIHRoYXQgRm9ydHVuZSB3aWxsIHJlbWFpbiBjb25zdGFudCB0byBvdXIgY2l0eSBhbmQgZG8gaGVyIG5vIGhhcm0uIEZvciB0aGF0IGRlaXR5IGhhcyBzdWZmaWNpZW50bHkgdXNlZCBtZSBhbmQgbXkgYWZmbGljdGlvbnMgdG8gc2F0aXNmeSB0aGUgZGl2aW5lIGRpc3BsZWFzdXJlIGF0IG91ciBzdWNjZXNzZXMsIGFuZCBzaGUgbWFrZXMgdGhlIGhlcm8gb2YgdGhlIHRyaXVtcGggYXMgY2xlYXIgYW4gZXhhbXBsZSBvZiBodW1hbiB3ZWFrbmVzcyBhcyB0aGUgdmljdGltIG9mIHRoZSB0cml1bXBoOyBleGNlcHQgdGhhdCBQZXJzZXVzLCBldmVuIHRob3VnaCBjb25xdWVyZWQsIGhhcyBoaXMgY2hpbGRyZW4sIHdoaWxlIEFlbWlsaXVzLCB0aG91Z2ggY29ucXVlcm9yLCBoYXMgbG9zdCBoaXMuPHAgY2xhc3M9InRyYW5zbGF0aW9uIj4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjM3IiB1bml0PSJjaGFwdGVyIiAvPgoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBzdWNoIG5vYmxlIGFuZCBsb2Z0eSB3b3Jkcywgd2UgYXJlIHRvbGQsIGRpZCBBZW1pbGl1cywgZnJvbSBhbiB1bmZlaWduZWQgYW5kIHNpbmNlcmUgc3Bpcml0LCBhZGRyZXNzIHRoZSBwZW9wbGUuIEJ1dCBmb3IgUGVyc2V1cywgYWx0aG91Z2ggaGUgcGl0aWVkIGhpbSBmb3IgaGlzIGNoYW5nZWQgbG90IGFuZCB3YXMgdmVyeSBlYWdlciB0byBoZWxwIGhpbSwgaGUgY291bGQgb2J0YWluIG5vIG90aGVyIGZhdm91ciB0aGFuIGEgcmVtb3ZhbCBmcm9tIHRoZSBwcmlzb24gd2hpY2ggdGhlIFJvbWFucyBjYWxsZWQgCgkJCQk8cSBkaXJlY3Q9InVuc3BlY2lmaWVkIj5jYXJjZXI8L3E+IHRvIGEgY2xlYW4gcGxhY2UgYW5kIGtpbmRsaWVyIHRyZWF0bWVudDsgCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+YW5kIHRoZXJlLCBiZWluZyBjbG9zZWx5IHdhdGNoZWQsIGFjY29yZGluZyB0byBtb3N0IHdyaXRlcnMgdGhlIGtpbmcgc3RhcnZlZCBoaW1zZWxmIHRvIGRlYXRoLiBCdXQgc29tZSB0ZWxsIG9mIGEgdmVyeSB1bnVzdWFsIGFuZCBwZWN1bGlhciB3YXkgaW4gd2hpY2ggaGUgZGllZCwgYXMgZm9sbG93cy4gVGhlIHNvbGRpZXJzIHdobyBndWFyZGVkIGhpcyBwZXJzb24gZm91bmQgc29tZSBmYXVsdCB3aXRoIGhpbSBhbmQgZ290IGFuZ3J5IGF0IGhpbSwgYW5kIHNpbmNlIHRoZXkgY291bGQgbm90IHZleCBhbmQgaW5qdXJlIGhpbSBpbiBhbnkgb3RoZXIgd2F5LCB0aGV5IHByZXZlbnRlZCBoaW0gZnJvbSBzbGVlcGluZywgZGlzdHVyYmluZyBoaXMgcmVwb3NlIGJ5IHRoZWlyIGFzc2lkdW91cyBhdHRlbnRpb25zIGFuZCBrZWVwaW5nIGhpbSBhd2FrZSBieSBldmVyeSBwb3NzaWJsZSBhcnRpZmljZSwgdW50aWwgaW4gdGhpcyB3YXkgaGUgd2FzIHdvcm4gb3V0IGFuZCBkaWVkLiAKCQkJCTxtaWxlc3RvbmUgbj0iMyIgdW5pdD0ic2VjdGlvbiIgLz5Ud28gb2YgaGlzIGNoaWxkcmVuIGFsc28gZGllZC4gQnV0IHRoZSB0aGlyZCwgQWxleGFuZGVyLCBpcyBzYWlkIHRvIGhhdmUgYmVjb21lIGV4cGVydCBpbiBlbWJvc3NpbmcgYW5kIGZpbmUgbWV0YWwgd29yazsgaGUgYWxzbyBsZWFybmVkIHRvIHdyaXRlIGFuZCBzcGVhayB0aGUgUm9tYW4gbGFuZ3VhZ2UsIGFuZCB3YXMgc2VjcmV0YXJ5IHRvIHRoZSBtYWdpc3RyYXRlcywgaW4gd2hpY2ggb2ZmaWNlIGhlIHByb3ZlZCBoaW1zZWxmIHRvIGhhdmUgc2tpbGwgYW5kIGVsZWdhbmNlLgoJCQk8L3A+CiAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['37.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzNyIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+V2l0aCBzdWNoIG5vYmxlIGFuZCBsb2Z0eSB3b3Jkcywgd2UgYXJlIHRvbGQsIGRpZCBBZW1pbGl1cywgZnJvbSBhbiB1bmZlaWduZWQgYW5kIHNpbmNlcmUgc3Bpcml0LCBhZGRyZXNzIHRoZSBwZW9wbGUuIEJ1dCBmb3IgUGVyc2V1cywgYWx0aG91Z2ggaGUgcGl0aWVkIGhpbSBmb3IgaGlzIGNoYW5nZWQgbG90IGFuZCB3YXMgdmVyeSBlYWdlciB0byBoZWxwIGhpbSwgaGUgY291bGQgb2J0YWluIG5vIG90aGVyIGZhdm91ciB0aGFuIGEgcmVtb3ZhbCBmcm9tIHRoZSBwcmlzb24gd2hpY2ggdGhlIFJvbWFucyBjYWxsZWQgCgkJCQk8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPmNhcmNlcjwvcT4gdG8gYSBjbGVhbiBwbGFjZSBhbmQga2luZGxpZXIgdHJlYXRtZW50OyAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['37.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPmFuZCB0aGVyZSwgYmVpbmcgY2xvc2VseSB3YXRjaGVkLCBhY2NvcmRpbmcgdG8gbW9zdCB3cml0ZXJzIHRoZSBraW5nIHN0YXJ2ZWQgaGltc2VsZiB0byBkZWF0aC4gQnV0IHNvbWUgdGVsbCBvZiBhIHZlcnkgdW51c3VhbCBhbmQgcGVjdWxpYXIgd2F5IGluIHdoaWNoIGhlIGRpZWQsIGFzIGZvbGxvd3MuIFRoZSBzb2xkaWVycyB3aG8gZ3VhcmRlZCBoaXMgcGVyc29uIGZvdW5kIHNvbWUgZmF1bHQgd2l0aCBoaW0gYW5kIGdvdCBhbmdyeSBhdCBoaW0sIGFuZCBzaW5jZSB0aGV5IGNvdWxkIG5vdCB2ZXggYW5kIGluanVyZSBoaW0gaW4gYW55IG90aGVyIHdheSwgdGhleSBwcmV2ZW50ZWQgaGltIGZyb20gc2xlZXBpbmcsIGRpc3R1cmJpbmcgaGlzIHJlcG9zZSBieSB0aGVpciBhc3NpZHVvdXMgYXR0ZW50aW9ucyBhbmQga2VlcGluZyBoaW0gYXdha2UgYnkgZXZlcnkgcG9zc2libGUgYXJ0aWZpY2UsIHVudGlsIGluIHRoaXMgd2F5IGhlIHdhcyB3b3JuIG91dCBhbmQgZGllZC4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['37.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPlR3byBvZiBoaXMgY2hpbGRyZW4gYWxzbyBkaWVkLiBCdXQgdGhlIHRoaXJkLCBBbGV4YW5kZXIsIGlzIHNhaWQgdG8gaGF2ZSBiZWNvbWUgZXhwZXJ0IGluIGVtYm9zc2luZyBhbmQgZmluZSBtZXRhbCB3b3JrOyBoZSBhbHNvIGxlYXJuZWQgdG8gd3JpdGUgYW5kIHNwZWFrIHRoZSBSb21hbiBsYW5ndWFnZSwgYW5kIHdhcyBzZWNyZXRhcnkgdG8gdGhlIG1hZ2lzdHJhdGVzLCBpbiB3aGljaCBvZmZpY2UgaGUgcHJvdmVkIGhpbXNlbGYgdG8gaGF2ZSBza2lsbCBhbmQgZWxlZ2FuY2UuCgkJCTxwIGNsYXNzPSJ0cmFuc2xhdGlvbiI+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBuPSIxIiB1bml0PSJzZWN0aW9uIiAvPlRvIHRoZSBleHBsb2l0cyBvZiBBZW1pbGl1cyBpbiBNYWNlZG9uaWEgaXMgYXNjcmliZWQgaGlzIG1vc3QgdW5ib3VuZGVkIHBvcHVsYXJpdHkgd2l0aCB0aGUgcGVvcGxlLCBzaW5jZSBzbyBtdWNoIG1vbmV5IHdhcyB0aGVuIGJyb3VnaHQgaW50byB0aGUgcHVibGljIHRyZWFzdXJ5IGJ5IGhpbSB0aGF0IHRoZSBwZW9wbGUgbm8gbG9uZ2VyIG5lZWRlZCB0byBwYXkgc3BlY2lhbCB0YXhlcyB1bnRpbCB0aGUgdGltZXMgb2YgSGlydGl1cyBhbmQgUGFuc2EsIHdobyB3ZXJlIGNvbnN1bHMgZHVyaW5nIHRoZSBmaXJzdCB3YXIgYmV0d2VlbiBBbnRvbnkgYW5kIE9jdGF2aXVzIENhZXNhci4KCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlRoZSBzby1jYWxsZWQgCgkJCQkJPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2FyIG9mIE11dGluYSw8L3E+IGluIDQzIEIuQy47IGNmLiB0aGUgPGJpYmwgZGVmYXVsdD0iTk8iIG49IlBsdXQuIENpYy4gNDUuMyIgdmFsaWQ9InllcyI+CiAgICAgICAgICAgICAgICAgIDx0aXRsZT5DaWNlcm88L3RpdGxlPiwgeGx2LiAzLTUuPC9iaWJsPgogICAgICAgICAgICA8L25vdGU+IAoJCQkJICAgICAgICA8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoaXMsIHRvbywgd2FzIHBlY3VsaWFyIGFuZCByZW1hcmthYmxlIGluIEFlbWlsaXVzLCB0aGF0IGFsdGhvdWdoIGhlIHdhcyBhZG1pcmVkIGFuZCBob25vdXJlZCBieSB0aGUgcGVvcGxlIGJleW9uZCBtZWFzdXJlLCBoZSByZW1haW5lZCBhIG1lbWJlciBvZiB0aGUgYXJpc3RvY3JhdGljIHBhcnR5LCBhbmQgbmVpdGhlciBzYWlkIG9yIGRpZCBhbnl0aGluZyB0byB3aW4gdGhlIGZhdm91ciBvZiB0aGUgbXVsdGl0dWRlLCBidXQgYWx3YXlzIHNpZGVkIGluIHBvbGl0aWNhbCBtYXR0ZXJzIHdpdGggdGhlIGxlYWRpbmcgYW5kIG1vc3QgcG93ZXJmdWwgbWVuLiBBbmQgdGhpcyBhdHRpdHVkZSBvZiBBZW1pbGl1cyB3YXMgaW4gYWZ0ZXIgdGltZXMgY2FzdCBpbiB0aGUgdGVldGggb2YgU2NpcGlvIEFmcmljYW51cyBieSBBcHBpdXMuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSBtZW4sIGJlaW5nIHRoZW4gZ3JlYXRlc3QgaW4gdGhlIGNpdHksIHdlcmUgY2FuZGlkYXRlcyBmb3IgdGhlIGNlbnNvcnNoaXAsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxNDIgQi5DLjwvbm90ZT4gdGhlIG9uZSBoYXZpbmcgdGhlIHNlbmF0ZSBhbmQgdGhlIG5vYmxlcyB0byBzdXBwb3J0IGhpbSwgZm9yIHRoaXMgd2FzIHRoZSBoZXJlZGl0YXJ5IHBvbGljeSBvZiB0aGUgQXBwaWksIHdoaWxlIHRoZSBvdGhlciwgYWx0aG91Z2ggZ3JlYXQgb24gaGlzIG93biBhY2NvdW50LCBuZXZlcnRoZWxlc3MgYWx3YXlzIG1hZGUgdXNlIG9mIHRoZSBncmVhdCBmYXZvdXIgYW5kIGxvdmUgb2YgdGhlIHBlb3BsZSBmb3IgaGltLiBXaGVuLCB0aGVyZWZvcmUsIEFwcGl1cyBzYXcgU2NpcGlvIHJ1c2hpbmcgaW50byB0aGUgZm9ydW0gYXR0ZW5kZWQgYnkgbWVuIHdobyB3ZXJlIG9mIGxvdyBiaXJ0aCBhbmQgaGFkIGxhdGVseSBiZWVuIHNsYXZlcywgYnV0IHdobyB3ZXJlIGZyZXF1ZW50ZXJzIG9mIHRoZSBmb3J1bSBhbmQgYWJsZSB0byBnYXRoZXIgYSBtb2IgYW5kIGZvcmNlIGFsbCBpc3N1ZXMgYnkgbWVhbnMgb2Ygc29saWNpdGF0aW9ucyBhbmQgc2hvdXRpbmcsIGhlIGNyaWVkIHdpdGggYSBsb3VkIHZvaWNlIGFuZCBzYWlkOiAKCQkJCTxtaWxlc3RvbmUgbj0iNCIgdW5pdD0ic2VjdGlvbiIgLz4KCQkJCSAgICAgICAgPHEgZGlyZWN0PSJ1bnNwZWNpZmllZCI+TyBQYXVsdXMgQWVtaWxpdXMsIGdyb2FuIGJlbmVhdGggdGhlIGVhcnRoIHdoZW4gdGhvdSBsZWFybmVzdCB0aGF0IHRoeSBzb24gaXMgZXNjb3J0ZWQgdG8gdGhlIGNlbnNvcnNoaXAgYnkgQWVtaWxpdXMgdGhlIGNvbW1vbiBjcmllciBhbmQgTGljaW5pdXMgUGhpbG9uaWN1cy48L3E+IEJ1dCBTY2lwaW8gaGFkIHRoZSBnb29kIHdpbGwgb2YgdGhlIHBlb3BsZSBiZWNhdXNlIGhlIHN1cHBvcnRlZCB0aGVtIGluIG1vc3QgdGhpbmdzLCB3aGlsZSBBZW1pbGl1cywgYWx0aG91Z2ggaGUgc2lkZWQgd2l0aCB0aGUgbm9ibGVzLCB3YXMgbm8gbGVzcyBsb3ZlZCBieSB0aGUgbXVsdGl0dWRlIHRoYW4gdGhlIG9uZSB3aG8gd2FzIHRob3VnaHQgdG8gcGF5IG1vc3QgY291cnQgdG8gdGhlIHBlb3BsZSBhbmQgdG8gc2VlayB0aGVpciBmYXZvdXIgaW4gaGlzIGludGVyY291cnNlIHdpdGggdGhlbS4gCgkJCQk8bWlsZXN0b25lIG49IjUiIHVuaXQ9InNlY3Rpb24iIC8+QW5kIHRoZXkgbWFkZSB0aGlzIG1hbmlmZXN0IGJ5IGNvbmZlcnJpbmcgdXBvbiBoaW0sIGFsb25nIHdpdGggaGlzIG90aGVyIGhvbm91cnMsIHRoYXQgb2YgdGhlIGNlbnNvcnNoaXAsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxNjQgQi5DLjwvbm90ZT4gd2hpY2ggaXMgb2YgYWxsIG9mZmljZXMgbW9zdCBzYWNyZWQsIGFuZCBvZiBncmVhdCBpbmZsdWVuY2UsIGJvdGggaW4gb3RoZXIgd2F5cywgYW5kIGVzcGVjaWFsbHkgYmVjYXVzZSBpdCBleGFtaW5lcyBpbnRvIHRoZSBsaXZlcyBhbmQgY29uZHVjdCBvZiBtZW4uIEZvciBpdCBpcyBpbiB0aGUgcG93ZXIgb2YgdGhlIGNlbnNvcnMgdG8gZXhwZWwgYW55IHNlbmF0b3Igd2hvc2UgbGlmZSBpcyB1bmJlY29taW5nLCBhbmQgdG8gYXBwb2ludCB0aGUgbGVhZGVyIG9mIHRoZSBzZW5hdGUsIGFuZCB0aGV5IGNhbiBkaXNncmFjZSBhbnkgeW91bmcga25pZ2h0IG9mIGxvb3NlIGhhYml0cyBieSB0YWtpbmcgYXdheSBoaXMgaG9yc2UuIFRoZXkgYWxzbyB0YWtlIGNoYXJnZSBvZiB0aGUgcHJvcGVydHkgYXNzZXNzbWVudHMgYW5kIHRoZSByZWdpc3RyeSBsaXN0cy4gCgkJCQk8bWlsZXN0b25lIG49IjYiIHVuaXQ9InNlY3Rpb24iIC8+QWNjb3JkaW5nbHksIHRoZSBudW1iZXIgb2YgY2l0aXplbnMgcmVnaXN0ZXJlZCB1bmRlciBBZW1pbGl1cyB3YXMgdGhyZWUgaHVuZHJlZCBhbmQgdGhpcnR5LXNldmVuIHRob3VzYW5kIGZvdXIgaHVuZHJlZCBhbmQgZmlmdHktdHdvOyBoZSBhbHNvIGRlY2xhcmVkIE1hcmN1cyBBZW1pbGl1cyBMZXBpZHVzIGZpcnN0IHNlbmF0b3IsIGEgbWFuIHdobyBoYWQgYWxyZWFkeSBoZWxkIHRoaXMgcHJlc2lkZW5jeSBmb3VyIHRpbWVzLCBhbmQgaGUgZXhwZWxsZWQgb25seSB0aHJlZSBzZW5hdG9ycywgbWVuIG9mIG5vIG5vdGUsIGFuZCBpbiB0aGUgbXVzdGVyIG9mIHRoZSBrbmlnaHRzIGEgbGlrZSBtb2RlcmF0aW9uIHdhcyBvYnNlcnZlZCBib3RoIGJ5IGhpbXNlbGYgYW5kIGJ5IE1hcmNpdXMgUGhpbGlwcHVzIGhpcyBjb2xsZWFndWUuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['38.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOCIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+VG8gdGhlIGV4cGxvaXRzIG9mIEFlbWlsaXVzIGluIE1hY2Vkb25pYSBpcyBhc2NyaWJlZCBoaXMgbW9zdCB1bmJvdW5kZWQgcG9wdWxhcml0eSB3aXRoIHRoZSBwZW9wbGUsIHNpbmNlIHNvIG11Y2ggbW9uZXkgd2FzIHRoZW4gYnJvdWdodCBpbnRvIHRoZSBwdWJsaWMgdHJlYXN1cnkgYnkgaGltIHRoYXQgdGhlIHBlb3BsZSBubyBsb25nZXIgbmVlZGVkIHRvIHBheSBzcGVjaWFsIHRheGVzIHVudGlsIHRoZSB0aW1lcyBvZiBIaXJ0aXVzIGFuZCBQYW5zYSwgd2hvIHdlcmUgY29uc3VscyBkdXJpbmcgdGhlIGZpcnN0IHdhciBiZXR3ZWVuIEFudG9ueSBhbmQgT2N0YXZpdXMgQ2Flc2FyLgoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5UaGUgc28tY2FsbGVkIAoJCQkJCTxxIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGlyZWN0PSJ1bnNwZWNpZmllZCI+V2FyIG9mIE11dGluYSw8L3E+IGluIDQzIEIuQy47IGNmLiB0aGUgPGJpYmwgY2xhc3M9InRyYW5zbGF0aW9uIiBkZWZhdWx0PSJOTyIgbj0iUGx1dC4gQ2ljLiA0NS4zIiB2YWxpZD0ieWVzIj4KICAgICAgICAgICAgICAgICAgPHRpdGxlIGNsYXNzPSJ0cmFuc2xhdGlvbiI+Q2ljZXJvPC90aXRsZT4sIHhsdi4gMy01LjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiAKCQkJCSAgICAgICAgPHEgY2xhc3M9InRyYW5zbGF0aW9uIiBkaXJlY3Q9InVuc3BlY2lmaWVkIj5XYXIgb2YgTXV0aW5hLDwvcT4gaW4gNDMgQi5DLjsgY2YuIHRoZSA8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBDaWMuIDQ1LjMiIHZhbGlkPSJ5ZXMiPgogICAgICAgICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgeGx2LiAzLTUuPC9iaWJsPgogICAgICAgICAgICA8dGl0bGUgY2xhc3M9InRyYW5zbGF0aW9uIj5DaWNlcm88L3RpdGxlPiwgeGx2LiAzLTUuPC90cmFuc2xhdGlvbj4="
translation['38.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGlzLCB0b28sIHdhcyBwZWN1bGlhciBhbmQgcmVtYXJrYWJsZSBpbiBBZW1pbGl1cywgdGhhdCBhbHRob3VnaCBoZSB3YXMgYWRtaXJlZCBhbmQgaG9ub3VyZWQgYnkgdGhlIHBlb3BsZSBiZXlvbmQgbWVhc3VyZSwgaGUgcmVtYWluZWQgYSBtZW1iZXIgb2YgdGhlIGFyaXN0b2NyYXRpYyBwYXJ0eSwgYW5kIG5laXRoZXIgc2FpZCBvciBkaWQgYW55dGhpbmcgdG8gd2luIHRoZSBmYXZvdXIgb2YgdGhlIG11bHRpdHVkZSwgYnV0IGFsd2F5cyBzaWRlZCBpbiBwb2xpdGljYWwgbWF0dGVycyB3aXRoIHRoZSBsZWFkaW5nIGFuZCBtb3N0IHBvd2VyZnVsIG1lbi4gQW5kIHRoaXMgYXR0aXR1ZGUgb2YgQWVtaWxpdXMgd2FzIGluIGFmdGVyIHRpbWVzIGNhc3QgaW4gdGhlIHRlZXRoIG9mIFNjaXBpbyBBZnJpY2FudXMgYnkgQXBwaXVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['38.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPkZvciB0aGVzZSBtZW4sIGJlaW5nIHRoZW4gZ3JlYXRlc3QgaW4gdGhlIGNpdHksIHdlcmUgY2FuZGlkYXRlcyBmb3IgdGhlIGNlbnNvcnNoaXAsCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPkluIDE0MiBCLkMuPC9ub3RlPiB0aGUgb25lIGhhdmluZyB0aGUgc2VuYXRlIGFuZCB0aGUgbm9ibGVzIHRvIHN1cHBvcnQgaGltLCBmb3IgdGhpcyB3YXMgdGhlIGhlcmVkaXRhcnkgcG9saWN5IG9mIHRoZSBBcHBpaSwgd2hpbGUgdGhlIG90aGVyLCBhbHRob3VnaCBncmVhdCBvbiBoaXMgb3duIGFjY291bnQsIG5ldmVydGhlbGVzcyBhbHdheXMgbWFkZSB1c2Ugb2YgdGhlIGdyZWF0IGZhdm91ciBhbmQgbG92ZSBvZiB0aGUgcGVvcGxlIGZvciBoaW0uIFdoZW4sIHRoZXJlZm9yZSwgQXBwaXVzIHNhdyBTY2lwaW8gcnVzaGluZyBpbnRvIHRoZSBmb3J1bSBhdHRlbmRlZCBieSBtZW4gd2hvIHdlcmUgb2YgbG93IGJpcnRoIGFuZCBoYWQgbGF0ZWx5IGJlZW4gc2xhdmVzLCBidXQgd2hvIHdlcmUgZnJlcXVlbnRlcnMgb2YgdGhlIGZvcnVtIGFuZCBhYmxlIHRvIGdhdGhlciBhIG1vYiBhbmQgZm9yY2UgYWxsIGlzc3VlcyBieSBtZWFucyBvZiBzb2xpY2l0YXRpb25zIGFuZCBzaG91dGluZywgaGUgY3JpZWQgd2l0aCBhIGxvdWQgdm9pY2UgYW5kIHNhaWQ6IAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPgoJCQkJICAgICAgICA8cSBjbGFzcz0idHJhbnNsYXRpb24iIGRpcmVjdD0idW5zcGVjaWZpZWQiPk8gUGF1bHVzIEFlbWlsaXVzLCBncm9hbiBiZW5lYXRoIHRoZSBlYXJ0aCB3aGVuIHRob3UgbGVhcm5lc3QgdGhhdCB0aHkgc29uIGlzIGVzY29ydGVkIHRvIHRoZSBjZW5zb3JzaGlwIGJ5IEFlbWlsaXVzIHRoZSBjb21tb24gY3JpZXIgYW5kIExpY2luaXVzIFBoaWxvbmljdXMuPC9xPiBCdXQgU2NpcGlvIGhhZCB0aGUgZ29vZCB3aWxsIG9mIHRoZSBwZW9wbGUgYmVjYXVzZSBoZSBzdXBwb3J0ZWQgdGhlbSBpbiBtb3N0IHRoaW5ncywgd2hpbGUgQWVtaWxpdXMsIGFsdGhvdWdoIGhlIHNpZGVkIHdpdGggdGhlIG5vYmxlcywgd2FzIG5vIGxlc3MgbG92ZWQgYnkgdGhlIG11bHRpdHVkZSB0aGFuIHRoZSBvbmUgd2hvIHdhcyB0aG91Z2h0IHRvIHBheSBtb3N0IGNvdXJ0IHRvIHRoZSBwZW9wbGUgYW5kIHRvIHNlZWsgdGhlaXIgZmF2b3VyIGluIGhpcyBpbnRlcmNvdXJzZSB3aXRoIHRoZW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['38.5'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI1IiB1bml0PSJzZWN0aW9uIiAvPkFuZCB0aGV5IG1hZGUgdGhpcyBtYW5pZmVzdCBieSBjb25mZXJyaW5nIHVwb24gaGltLCBhbG9uZyB3aXRoIGhpcyBvdGhlciBob25vdXJzLCB0aGF0IG9mIHRoZSBjZW5zb3JzaGlwLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgY2xhc3M9InRyYW5zbGF0aW9uIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5JbiAxNjQgQi5DLjwvbm90ZT4gd2hpY2ggaXMgb2YgYWxsIG9mZmljZXMgbW9zdCBzYWNyZWQsIGFuZCBvZiBncmVhdCBpbmZsdWVuY2UsIGJvdGggaW4gb3RoZXIgd2F5cywgYW5kIGVzcGVjaWFsbHkgYmVjYXVzZSBpdCBleGFtaW5lcyBpbnRvIHRoZSBsaXZlcyBhbmQgY29uZHVjdCBvZiBtZW4uIEZvciBpdCBpcyBpbiB0aGUgcG93ZXIgb2YgdGhlIGNlbnNvcnMgdG8gZXhwZWwgYW55IHNlbmF0b3Igd2hvc2UgbGlmZSBpcyB1bmJlY29taW5nLCBhbmQgdG8gYXBwb2ludCB0aGUgbGVhZGVyIG9mIHRoZSBzZW5hdGUsIGFuZCB0aGV5IGNhbiBkaXNncmFjZSBhbnkgeW91bmcga25pZ2h0IG9mIGxvb3NlIGhhYml0cyBieSB0YWtpbmcgYXdheSBoaXMgaG9yc2UuIFRoZXkgYWxzbyB0YWtlIGNoYXJnZSBvZiB0aGUgcHJvcGVydHkgYXNzZXNzbWVudHMgYW5kIHRoZSByZWdpc3RyeSBsaXN0cy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
translation['38.6'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI2IiB1bml0PSJzZWN0aW9uIiAvPkFjY29yZGluZ2x5LCB0aGUgbnVtYmVyIG9mIGNpdGl6ZW5zIHJlZ2lzdGVyZWQgdW5kZXIgQWVtaWxpdXMgd2FzIHRocmVlIGh1bmRyZWQgYW5kIHRoaXJ0eS1zZXZlbiB0aG91c2FuZCBmb3VyIGh1bmRyZWQgYW5kIGZpZnR5LXR3bzsgaGUgYWxzbyBkZWNsYXJlZCBNYXJjdXMgQWVtaWxpdXMgTGVwaWR1cyBmaXJzdCBzZW5hdG9yLCBhIG1hbiB3aG8gaGFkIGFscmVhZHkgaGVsZCB0aGlzIHByZXNpZGVuY3kgZm91ciB0aW1lcywgYW5kIGhlIGV4cGVsbGVkIG9ubHkgdGhyZWUgc2VuYXRvcnMsIG1lbiBvZiBubyBub3RlLCBhbmQgaW4gdGhlIG11c3RlciBvZiB0aGUga25pZ2h0cyBhIGxpa2UgbW9kZXJhdGlvbiB3YXMgb2JzZXJ2ZWQgYm90aCBieSBoaW1zZWxmIGFuZCBieSBNYXJjaXVzIFBoaWxpcHB1cyBoaXMgY29sbGVhZ3VlLgoJCQk8cCBjbGFzcz0idHJhbnNsYXRpb24iPgoJCQkJICAgICAgICA8bWlsZXN0b25lIGNsYXNzPSJ0cmFuc2xhdGlvbiIgbj0iMzkiIHVuaXQ9ImNoYXB0ZXIiIC8+CgkJCQkgICAgICAgIDxtaWxlc3RvbmUgbj0iMSIgdW5pdD0ic2VjdGlvbiIgLz4gWFhYSVguIEFmdGVyIGhlIGhhZCBwZXJmb3JtZWQgbW9zdCBvZiB0aGUgbW9yZSBpbXBvcnRhbnQgZHV0aWVzIG9mIHRoaXMgb2ZmaWNlLCBoZSBmZWxsIHNpY2sgb2YgYSBkaXNlYXNlIHdoaWNoIGF0IGZpcnN0IHdhcyBkYW5nZXJvdXMsIGJ1dCBpbiB0aW1lIGJlY2FtZSBsZXNzIHRocmVhdGVuaW5nLCB0aG91Z2ggaXQgd2FzIHRyb3VibGVzb21lIGFuZCBoYXJkIHRvIGdldCByaWQgb2YuIFVuZGVyIHRoZSBhZHZpY2Ugb2YgaGlzIHBoeXNpY2lhbnMgaGUgc2FpbGVkIHRvIFZlbGlhIGluIEl0YWx5LCBhbmQgdGhlcmUgc3BlbnQgbXVjaCB0aW1lIGluIGNvdW50cnkgcGxhY2VzIGx5aW5nIGJ5IHRoZSBzZWEgYW5kIGFmZm9yZGluZyBncmVhdCBxdWlldC4gVGhlbiB0aGUgUm9tYW5zIGxvbmdlZCBmb3IgaGltLCBhbmQgb2Z0ZW4gaW4gdGhlIHRoZWF0cmVzIGdhdmUgdXR0ZXJhbmNlIHRvIGVhZ2VyIGRlc2lyZXMgYW5kIGV2ZW4gcHJheWVycyB0aGF0IHRoZXkgbWlnaHQgc2VlIGhpbS4gCgkJCQk8bWlsZXN0b25lIG49IjIiIHVuaXQ9InNlY3Rpb24iIC8+QXQgbGFzdCwgd2hlbiBhIGNlcnRhaW4gcmVsaWdpb3VzIGNlcmVtb255IG1hZGUgaGlzIHByZXNlbmNlIG5lY2Vzc2FyeSwgYW5kIGhpcyBoZWFsdGggc2VlbWVkIHRvIGJlIHN1ZmZpY2llbnQgZm9yIHRoZSBqb3VybmV5LCBoZSByZXR1cm5lZCB0byBSb21lLiBIZXJlIGhlIG9mZmVyZWQgdGhlIHB1YmxpYyBzYWNyaWZpY2UgaW4gY29tcGFueSB3aXRoIHRoZSBvdGhlciBwcmllc3RzLAoJCQkJPG5vdGUgYW5jaG9yZWQ9InllcyIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDMuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaWkuIDEtMy48L2JpYmw+CiAgICAgICAgICAgIDwvbm90ZT4gd2hpbGUgdGhlIHBlb3BsZSB0aHJvbmdlZCBhYm91dCB3aXRoIG1hbmlmZXN0IHRva2VucyBvZiBkZWxpZ2h0OyBhbmQgb24gdGhlIGZvbGxvd2luZyBkYXkgaGUgc2FjcmlmaWNlZCBhZ2FpbiB0byB0aGUgZ29kcyBwcml2YXRlbHkgaW4gZ3JhdGl0dWRlIGZvciBoaXMgcmVjb3ZlcnkuIAoJCQkJPG1pbGVzdG9uZSBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHNhY3JpZmljZSBoYWQgYmVlbiBkdWx5IHBlcmZvcm1lZCwgaGUgcmV0dXJuZWQgdG8gaGlzIGhvdXNlIGFuZCBsYXkgZG93biB0byByZXN0LCBhbmQgdGhlbiwgYmVmb3JlIGhlIGNvdWxkIG5vdGljZSBhbmQgYmUgY29uc2Npb3VzIG9mIGFueSBjaGFuZ2UsIGhlIGJlY2FtZSBkZWxpcmlvdXMgYW5kIGRlcmFuZ2VkIGluIG1pbmQsIGFuZCBvbiB0aGUgdGhpcmQgZGF5IGFmdGVyIGRpZWQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBwbGFjZT0idW5zcGVjaWZpZWQiIHJlc3A9ImVkIj5TZXZlbiB5ZWFycyBhZnRlciBoaXMgdHJpdW1waCwgMTYwIEIuQy48L25vdGU+ICBIZSB3YXMgZnVsbHkgYmxlc3NlZCB3aXRoIGV2ZXJ5dGhpbmcgdGhhdCBtZW4gdGhpbmsgY29uZHVjaXZlIHRvIGhhcHBpbmVzcy4gRm9yIGhpcyBmdW5lcmFsIHByb2Nlc3Npb24gY2FsbGVkIGZvcnRoIG1lbidzIGFkbWlyYXRpb24sIGFuZCBzaG93ZWQgYSBkZXNpcmUgdG8gYWRvcm4gaGlzIHZpcnR1ZSB3aXRoIHRoZSBiZXN0IGFuZCBtb3N0IGVudmlhYmxlIG9ic2VxdWllcy4gCgkJCQk8bWlsZXN0b25lIG49IjQiIHVuaXQ9InNlY3Rpb24iIC8+VGhpcyB3YXMgbWFuaWZlc3QsIG5vdCBpbiBnb2xkIG9yIGl2b3J5IG9yIHRoZSBvdGhlciBhbWJpdGlvdXMgYW5kIGV4cGVuc2l2ZSBwcmVwYXJhdGlvbnMgZm9yIHN1Y2ggcml0ZXMsIGJ1dCBpbiBnb29kIHdpbGwgYW5kIGhvbm91ciBhbmQgZ3JhdGl0dWRlIG9uIHRoZSBwYXJ0LCBub3Qgb25seSBvZiBoaXMgZmVsbG93IGNpdGl6ZW5zLCBidXQgYWxzbyBvZiBoaXMgZW5lbWllcy4gQXQgYWxsIGV2ZW50cywgb3V0IG9mIGFsbCB0aGUgSWJlcmlhbnMgYW5kIExpZ3VyaWFucyBhbmQgTWFjZWRvbmlhbnMgd2hvIGNoYW5jZWQgdG8gYmUgcHJlc2VudCwgdGhvc2UgdGhhdCB3ZXJlIHlvdW5nIGFuZCBzdHJvbmcgb2YgYm9keSBhc3Npc3RlZCBieSB0dXJucyBpbiBjYXJyeWluZyB0aGUgYmllciwgd2hpbGUgdGhlIG1vcmUgZWxkZXJseSBmb2xsb3dlZCB3aXRoIHRoZSBwcm9jZXNzaW9uIGNhbGxpbmcgYWxvdWQgdXBvbiBBZW1pbGl1cyBhcyBiZW5lZmFjdG9yIGFuZCBwcmVzZXJ2ZXIgb2YgdGhlaXIgY291bnRyaWVzLiAKCQkJCTxtaWxlc3RvbmUgbj0iNSIgdW5pdD0ic2VjdGlvbiIgLz5Gb3Igbm90IG9ubHkgYXQgdGhlIHRpbWVzIG9mIGhpcyBjb25xdWVzdHMgaGFkIGhlIHRyZWF0ZWQgdGhlbSBhbGwgd2l0aCBtaWxkbmVzcyBhbmQgaHVtYW5pdHksIGJ1dCBhbHNvIGR1cmluZyBhbGwgdGhlIHJlc3Qgb2YgaGlzIGxpZmUgaGUgd2FzIGV2ZXIgZG9pbmcgdGhlbSBzb21lIGdvb2QgYW5kIGNhcmluZyBmb3IgdGhlbSBhcyB0aG91Z2ggdGhleSBoYWQgYmVlbiBraW5kcmVkIGFuZCByZWxhdGlvbnMuCgkJCTwvcD4KICAgICAgICAgPC90cmFuc2xhdGlvbj4="
translation['39.1'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzOSIgdW5pdD0iY2hhcHRlciIgLz4KCQkJCSAgICAgICAgPG1pbGVzdG9uZSBjbGFzcz0idHJhbnNsYXRpb24iIG49IjEiIHVuaXQ9InNlY3Rpb24iIC8+IFhYWElYLiBBZnRlciBoZSBoYWQgcGVyZm9ybWVkIG1vc3Qgb2YgdGhlIG1vcmUgaW1wb3J0YW50IGR1dGllcyBvZiB0aGlzIG9mZmljZSwgaGUgZmVsbCBzaWNrIG9mIGEgZGlzZWFzZSB3aGljaCBhdCBmaXJzdCB3YXMgZGFuZ2Vyb3VzLCBidXQgaW4gdGltZSBiZWNhbWUgbGVzcyB0aHJlYXRlbmluZywgdGhvdWdoIGl0IHdhcyB0cm91Ymxlc29tZSBhbmQgaGFyZCB0byBnZXQgcmlkIG9mLiBVbmRlciB0aGUgYWR2aWNlIG9mIGhpcyBwaHlzaWNpYW5zIGhlIHNhaWxlZCB0byBWZWxpYSBpbiBJdGFseSwgYW5kIHRoZXJlIHNwZW50IG11Y2ggdGltZSBpbiBjb3VudHJ5IHBsYWNlcyBseWluZyBieSB0aGUgc2VhIGFuZCBhZmZvcmRpbmcgZ3JlYXQgcXVpZXQuIFRoZW4gdGhlIFJvbWFucyBsb25nZWQgZm9yIGhpbSwgYW5kIG9mdGVuIGluIHRoZSB0aGVhdHJlcyBnYXZlIHV0dGVyYW5jZSB0byBlYWdlciBkZXNpcmVzIGFuZCBldmVuIHByYXllcnMgdGhhdCB0aGV5IG1pZ2h0IHNlZSBoaW0uIAoJCQkJPC90cmFuc2xhdGlvbj4="
translation['39.2'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIyIiB1bml0PSJzZWN0aW9uIiAvPkF0IGxhc3QsIHdoZW4gYSBjZXJ0YWluIHJlbGlnaW91cyBjZXJlbW9ueSBtYWRlIGhpcyBwcmVzZW5jZSBuZWNlc3NhcnksIGFuZCBoaXMgaGVhbHRoIHNlZW1lZCB0byBiZSBzdWZmaWNpZW50IGZvciB0aGUgam91cm5leSwgaGUgcmV0dXJuZWQgdG8gUm9tZS4gSGVyZSBoZSBvZmZlcmVkIHRoZSBwdWJsaWMgc2FjcmlmaWNlIGluIGNvbXBhbnkgd2l0aCB0aGUgb3RoZXIgcHJpZXN0cywKCQkJCTxub3RlIGFuY2hvcmVkPSJ5ZXMiIGNsYXNzPSJ0cmFuc2xhdGlvbiIgcGxhY2U9InVuc3BlY2lmaWVkIiByZXNwPSJlZCI+U2VlIDxiaWJsIGNsYXNzPSJ0cmFuc2xhdGlvbiIgZGVmYXVsdD0iTk8iIG49IlBsdXQuIEFlbS4gMy4xIiB2YWxpZD0ieWVzIj5jaGFwdGVyIGlpaS4gMS0zLjwvYmlibD4KICAgICAgICAgICAgPC9ub3RlPiB3aGlsZSB0aGUgcGVvcGxlIHRocm9uZ2VkIGFib3V0IHdpdGggbWFuaWZlc3QgdG9rZW5zIG9mIGRlbGlnaHQ7IGFuZCBvbiB0aGUgZm9sbG93aW5nIGRheSBoZSBzYWNyaWZpY2VkIGFnYWluIHRvIHRoZSBnb2RzIHByaXZhdGVseSBpbiBncmF0aXR1ZGUgZm9yIGhpcyByZWNvdmVyeS4gCgkJCQk8YmlibCBjbGFzcz0idHJhbnNsYXRpb24iIGRlZmF1bHQ9Ik5PIiBuPSJQbHV0LiBBZW0uIDMuMSIgdmFsaWQ9InllcyI+Y2hhcHRlciBpaWkuIDEtMy48L2JpYmw+CiAgICAgICAgICAgIDwvdHJhbnNsYXRpb24+"
translation['39.3'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSIzIiB1bml0PSJzZWN0aW9uIiAvPldoZW4gdGhlIHNhY3JpZmljZSBoYWQgYmVlbiBkdWx5IHBlcmZvcm1lZCwgaGUgcmV0dXJuZWQgdG8gaGlzIGhvdXNlIGFuZCBsYXkgZG93biB0byByZXN0LCBhbmQgdGhlbiwgYmVmb3JlIGhlIGNvdWxkIG5vdGljZSBhbmQgYmUgY29uc2Npb3VzIG9mIGFueSBjaGFuZ2UsIGhlIGJlY2FtZSBkZWxpcmlvdXMgYW5kIGRlcmFuZ2VkIGluIG1pbmQsIGFuZCBvbiB0aGUgdGhpcmQgZGF5IGFmdGVyIGRpZWQuCgkJCQk8bm90ZSBhbmNob3JlZD0ieWVzIiBjbGFzcz0idHJhbnNsYXRpb24iIHBsYWNlPSJ1bnNwZWNpZmllZCIgcmVzcD0iZWQiPlNldmVuIHllYXJzIGFmdGVyIGhpcyB0cml1bXBoLCAxNjAgQi5DLjwvbm90ZT4gIEhlIHdhcyBmdWxseSBibGVzc2VkIHdpdGggZXZlcnl0aGluZyB0aGF0IG1lbiB0aGluayBjb25kdWNpdmUgdG8gaGFwcGluZXNzLiBGb3IgaGlzIGZ1bmVyYWwgcHJvY2Vzc2lvbiBjYWxsZWQgZm9ydGggbWVuJ3MgYWRtaXJhdGlvbiwgYW5kIHNob3dlZCBhIGRlc2lyZSB0byBhZG9ybiBoaXMgdmlydHVlIHdpdGggdGhlIGJlc3QgYW5kIG1vc3QgZW52aWFibGUgb2JzZXF1aWVzLiAKCQkJCTwvdHJhbnNsYXRpb24+"
translation['39.4'] = "PHRyYW5zbGF0aW9uPjxtaWxlc3RvbmUgY2xhc3M9InRyYW5zbGF0aW9uIiBuPSI0IiB1bml0PSJzZWN0aW9uIiAvPlRoaXMgd2FzIG1hbmlmZXN0LCBub3QgaW4gZ29sZCBvciBpdm9yeSBvciB0aGUgb3RoZXIgYW1iaXRpb3VzIGFuZCBleHBlbnNpdmUgcHJlcGFyYXRpb25zIGZvciBzdWNoIHJpdGVzLCBidXQgaW4gZ29vZCB3aWxsIGFuZCBob25vdXIgYW5kIGdyYXRpdHVkZSBvbiB0aGUgcGFydCwgbm90IG9ubHkgb2YgaGlzIGZlbGxvdyBjaXRpemVucywgYnV0IGFsc28gb2YgaGlzIGVuZW1pZXMuIEF0IGFsbCBldmVudHMsIG91dCBvZiBhbGwgdGhlIEliZXJpYW5zIGFuZCBMaWd1cmlhbnMgYW5kIE1hY2Vkb25pYW5zIHdobyBjaGFuY2VkIHRvIGJlIHByZXNlbnQsIHRob3NlIHRoYXQgd2VyZSB5b3VuZyBhbmQgc3Ryb25nIG9mIGJvZHkgYXNzaXN0ZWQgYnkgdHVybnMgaW4gY2FycnlpbmcgdGhlIGJpZXIsIHdoaWxlIHRoZSBtb3JlIGVsZGVybHkgZm9sbG93ZWQgd2l0aCB0aGUgcHJvY2Vzc2lvbiBjYWxsaW5nIGFsb3VkIHVwb24gQWVtaWxpdXMgYXMgYmVuZWZhY3RvciBhbmQgcHJlc2VydmVyIG9mIHRoZWlyIGNvdW50cmllcy4gCgkJCQk8L3RyYW5zbGF0aW9uPg=="
